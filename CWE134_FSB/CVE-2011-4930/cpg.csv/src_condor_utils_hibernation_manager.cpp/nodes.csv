command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4785042	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_hibernation_manager.cpp								
ANR	4785043	Function	HibernationManager :: HibernationManager	40:0:1445:1713							
ANR	4785044	FunctionDef	HibernationManager :: HibernationManager (HibernatorBase * hibernator)		4785043	0					
ANR	4785045	CompoundStatement		47:0:1699:1713	4785043	0					
ANR	4785046	ExpressionStatement	update ( )	48:1:1702:1711	4785043	0	True				
ANR	4785047	CallExpression	update ( )		4785043	0					
ANR	4785048	Callee	update		4785043	0					
ANR	4785049	Identifier	update		4785043	0					
ANR	4785050	ArgumentList			4785043	1					
ANR	4785051	Identifier	HibernationManager :: HibernationManager		4785043	1					
ANR	4785052	ParameterList	HibernatorBase * hibernator		4785043	2					
ANR	4785053	Parameter	HibernatorBase * hibernator	40:40:1485:1510	4785043	0	True				
ANR	4785054	ParameterType	HibernatorBase *		4785043	0					
ANR	4785055	Identifier	hibernator		4785043	1					
ANR	4785056	CFGEntryNode	ENTRY		4785043		True				
ANR	4785057	CFGExitNode	EXIT		4785043		True				
ANR	4785058	Symbol	hibernator		4785043						
ANR	4785059	Function	HibernationManager :: ~HibernationManager	51:0:1716:1906							
ANR	4785060	FunctionDef	HibernationManager :: ~HibernationManager ()		4785059	0					
ANR	4785061	CompoundStatement		52:0:1774:1906	4785059	0					
ANR	4785062	IfStatement	if ( m_hibernator )		4785059	0					
ANR	4785063	Condition	m_hibernator	53:6:1782:1793	4785059	0	True				
ANR	4785064	Identifier	m_hibernator		4785059	0					
ANR	4785065	CompoundStatement		2:21:22:22	4785059	1					
ANR	4785066	Statement	delete	54:2:1801:1806	4785059	0	True				
ANR	4785067	ExpressionStatement	m_hibernator	54:9:1808:1820	4785059	1	True				
ANR	4785068	Identifier	m_hibernator		4785059	0					
ANR	4785069	ForStatement	for ( int i = 0 ; i < m_adapters . getlast ( ) ; i ++ )		4785059	1					
ANR	4785070	ForInit	int i = 0 ;	56:7:1832:1841	4785059	0	True				
ANR	4785071	IdentifierDeclStatement	int i = 0 ;		4785059	0					
ANR	4785072	IdentifierDecl	i = 0		4785059	0					
ANR	4785073	IdentifierDeclType	int		4785059	0					
ANR	4785074	Identifier	i		4785059	1					
ANR	4785075	AssignmentExpression	i = 0		4785059	2		=			
ANR	4785076	Identifier	i		4785059	0					
ANR	4785077	PrimaryExpression	0		4785059	1					
ANR	4785078	Condition	i < m_adapters . getlast ( )	56:19:1844:1867	4785059	1	True				
ANR	4785079	RelationalExpression	i < m_adapters . getlast ( )		4785059	0		<			
ANR	4785080	Identifier	i		4785059	0					
ANR	4785081	CallExpression	m_adapters . getlast ( )		4785059	1					
ANR	4785082	Callee	m_adapters . getlast		4785059	0					
ANR	4785083	MemberAccess	m_adapters . getlast		4785059	0					
ANR	4785084	Identifier	m_adapters		4785059	0					
ANR	4785085	Identifier	getlast		4785059	1					
ANR	4785086	ArgumentList			4785059	1					
ANR	4785087	PostIncDecOperationExpression	i ++	56:46:1871:1873	4785059	2	True				
ANR	4785088	Identifier	i		4785059	0					
ANR	4785089	IncDec	++		4785059	1					
ANR	4785090	CompoundStatement		5:52:102:102	4785059	3					
ANR	4785091	Statement	delete	57:2:1881:1886	4785059	0	True				
ANR	4785092	ExpressionStatement	m_adapters [ i ]	57:9:1888:1901	4785059	1	True				
ANR	4785093	ArrayIndexing	m_adapters [ i ]		4785059	0					
ANR	4785094	Identifier	m_adapters		4785059	0					
ANR	4785095	Identifier	i		4785059	1					
ANR	4785096	Identifier	HibernationManager :: ~HibernationManager		4785059	1					
ANR	4785097	ParameterList			4785059	2					
ANR	4785098	CFGEntryNode	ENTRY		4785059		True				
ANR	4785099	CFGExitNode	EXIT		4785059		True				
ANR	4785100	Symbol	m_adapters . getlast		4785059						
ANR	4785101	Symbol	m_adapters		4785059						
ANR	4785102	Symbol	i		4785059						
ANR	4785103	Symbol	m_hibernator		4785059						
ANR	4785104	Function	HibernationManager :: initialize	61:0:1909:2033							
ANR	4785105	FunctionDef	HibernationManager :: initialize ()		4785104	0					
ANR	4785106	CompoundStatement		63:0:1954:2033	4785104	0					
ANR	4785107	IfStatement	if ( m_hibernator )		4785104	0					
ANR	4785108	Condition	m_hibernator	64:6:1962:1973	4785104	0	True				
ANR	4785109	Identifier	m_hibernator		4785104	0					
ANR	4785110	CompoundStatement		2:21:22:22	4785104	1					
ANR	4785111	ReturnStatement	return m_hibernator -> initialize ( ) ;	65:2:1981:2014	4785104	0	True				
ANR	4785112	CallExpression	m_hibernator -> initialize ( )		4785104	0					
ANR	4785113	Callee	m_hibernator -> initialize		4785104	0					
ANR	4785114	PtrMemberAccess	m_hibernator -> initialize		4785104	0					
ANR	4785115	Identifier	m_hibernator		4785104	0					
ANR	4785116	Identifier	initialize		4785104	1					
ANR	4785117	ArgumentList			4785104	1					
ANR	4785118	ReturnStatement	return true ;	67:1:2020:2031	4785104	1	True				
ANR	4785119	Identifier	true		4785104	0					
ANR	4785120	ReturnType	bool		4785104	1					
ANR	4785121	Identifier	HibernationManager :: initialize		4785104	2					
ANR	4785122	ParameterList			4785104	3					
ANR	4785123	CFGEntryNode	ENTRY		4785104		True				
ANR	4785124	CFGExitNode	EXIT		4785104		True				
ANR	4785125	Symbol	* m_hibernator		4785104						
ANR	4785126	Symbol	true		4785104						
ANR	4785127	Symbol	m_hibernator -> initialize		4785104						
ANR	4785128	Symbol	m_hibernator		4785104						
ANR	4785129	Function	HibernationManager :: addInterface	70:0:2036:2274							
ANR	4785130	FunctionDef	HibernationManager :: addInterface (NetworkAdapterBase & adapter)		4785129	0					
ANR	4785131	CompoundStatement		72:0:2105:2274	4785129	0					
ANR	4785132	ExpressionStatement	m_adapters . add ( & adapter )	73:1:2108:2134	4785129	0	True				
ANR	4785133	CallExpression	m_adapters . add ( & adapter )		4785129	0					
ANR	4785134	Callee	m_adapters . add		4785129	0					
ANR	4785135	MemberAccess	m_adapters . add		4785129	0					
ANR	4785136	Identifier	m_adapters		4785129	0					
ANR	4785137	Identifier	add		4785129	1					
ANR	4785138	ArgumentList	& adapter		4785129	1					
ANR	4785139	Argument	& adapter		4785129	0					
ANR	4785140	UnaryOperationExpression	& adapter		4785129	0					
ANR	4785141	UnaryOperator	&		4785129	0					
ANR	4785142	Identifier	adapter		4785129	1					
ANR	4785143	IfStatement	if ( ( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false ) )		4785129	1					
ANR	4785144	Condition	( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false )	74:7:2143:2219	4785129	0	True				
ANR	4785145	OrExpression	( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false )		4785129	0		||			
ANR	4785146	EqualityExpression	NULL == m_primary_adapter		4785129	0		==			
ANR	4785147	Identifier	NULL		4785129	0					
ANR	4785148	Identifier	m_primary_adapter		4785129	1					
ANR	4785149	EqualityExpression	m_primary_adapter -> isPrimary ( ) == false		4785129	1		==			
ANR	4785150	CallExpression	m_primary_adapter -> isPrimary ( )		4785129	0					
ANR	4785151	Callee	m_primary_adapter -> isPrimary		4785129	0					
ANR	4785152	PtrMemberAccess	m_primary_adapter -> isPrimary		4785129	0					
ANR	4785153	Identifier	m_primary_adapter		4785129	0					
ANR	4785154	Identifier	isPrimary		4785129	1					
ANR	4785155	ArgumentList			4785129	1					
ANR	4785156	Identifier	false		4785129	1					
ANR	4785157	CompoundStatement		4:48:117:117	4785129	1					
ANR	4785158	ExpressionStatement	m_primary_adapter = & adapter	76:2:2227:2255	4785129	0	True				
ANR	4785159	AssignmentExpression	m_primary_adapter = & adapter		4785129	0		=			
ANR	4785160	Identifier	m_primary_adapter		4785129	0					
ANR	4785161	UnaryOperationExpression	& adapter		4785129	1					
ANR	4785162	UnaryOperator	&		4785129	0					
ANR	4785163	Identifier	adapter		4785129	1					
ANR	4785164	ReturnStatement	return true ;	78:1:2261:2272	4785129	2	True				
ANR	4785165	Identifier	true		4785129	0					
ANR	4785166	ReturnType	bool		4785129	1					
ANR	4785167	Identifier	HibernationManager :: addInterface		4785129	2					
ANR	4785168	ParameterList	NetworkAdapterBase & adapter		4785129	3					
ANR	4785169	Parameter	NetworkAdapterBase & adapter	71:34:2075:2101	4785129	0	True				
ANR	4785170	ParameterType	NetworkAdapterBase &		4785129	0					
ANR	4785171	Identifier	adapter		4785129	1					
ANR	4785172	CFGEntryNode	ENTRY		4785129		True				
ANR	4785173	CFGExitNode	EXIT		4785129		True				
ANR	4785174	Symbol	adapter		4785129						
ANR	4785175	Symbol	NULL		4785129						
ANR	4785176	Symbol	* m_primary_adapter		4785129						
ANR	4785177	Symbol	m_adapters		4785129						
ANR	4785178	Symbol	m_primary_adapter -> isPrimary		4785129						
ANR	4785179	Symbol	false		4785129						
ANR	4785180	Symbol	true		4785129						
ANR	4785181	Symbol	m_primary_adapter		4785129						
ANR	4785182	Symbol	& adapter		4785129						
ANR	4785183	Function	HibernationManager :: update	81:0:2277:2695							
ANR	4785184	FunctionDef	HibernationManager :: update ()		4785183	0					
ANR	4785185	CompoundStatement		83:0:2317:2695	4785183	0					
ANR	4785186	IdentifierDeclStatement	int previous_inteval = m_interval ;	84:1:2320:2353	4785183	0	True				
ANR	4785187	IdentifierDecl	previous_inteval = m_interval		4785183	0					
ANR	4785188	IdentifierDeclType	int		4785183	0					
ANR	4785189	Identifier	previous_inteval		4785183	1					
ANR	4785190	AssignmentExpression	previous_inteval = m_interval		4785183	2		=			
ANR	4785191	Identifier	m_interval		4785183	0					
ANR	4785192	Identifier	m_interval		4785183	1					
ANR	4785193	ExpressionStatement	"m_interval = param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"	85:1:2356:2453	4785183	1	True				
ANR	4785194	AssignmentExpression	"m_interval = param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"		4785183	0		=			
ANR	4785195	Identifier	m_interval		4785183	0					
ANR	4785196	CallExpression	"param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"		4785183	1					
ANR	4785197	Callee	param_integer		4785183	0					
ANR	4785198	Identifier	param_integer		4785183	0					
ANR	4785199	ArgumentList	"""HIBERNATE_CHECK_INTERVAL"""		4785183	1					
ANR	4785200	Argument	"""HIBERNATE_CHECK_INTERVAL"""		4785183	0					
ANR	4785201	PrimaryExpression	"""HIBERNATE_CHECK_INTERVAL"""		4785183	0					
ANR	4785202	Argument	0		4785183	1					
ANR	4785203	PrimaryExpression	0		4785183	0					
ANR	4785204	Argument	0		4785183	2					
ANR	4785205	PrimaryExpression	0		4785183	0					
ANR	4785206	IdentifierDeclStatement	bool change = ( previous_inteval != m_interval ) ;	87:1:2457:2505	4785183	2	True				
ANR	4785207	IdentifierDecl	change = ( previous_inteval != m_interval )		4785183	0					
ANR	4785208	IdentifierDeclType	bool		4785183	0					
ANR	4785209	Identifier	change		4785183	1					
ANR	4785210	AssignmentExpression	change = ( previous_inteval != m_interval )		4785183	2		=			
ANR	4785211	Identifier	change		4785183	0					
ANR	4785212	EqualityExpression	previous_inteval != m_interval		4785183	1		!=			
ANR	4785213	Identifier	previous_inteval		4785183	0					
ANR	4785214	Identifier	m_interval		4785183	1					
ANR	4785215	IfStatement	if ( change )		4785183	3					
ANR	4785216	Condition	change	88:6:2513:2518	4785183	0	True				
ANR	4785217	Identifier	change		4785183	0					
ANR	4785218	CompoundStatement		6:15:204:204	4785183	1					
ANR	4785219	ExpressionStatement	"dprintf ( D_ALWAYS , ""HibernationManager: Hibernation is %s\\n"" , ( m_interval > 0 ? ""enabled"" : ""disabled"" ) )"	89:2:2526:2637	4785183	0	True				
ANR	4785220	CallExpression	"dprintf ( D_ALWAYS , ""HibernationManager: Hibernation is %s\\n"" , ( m_interval > 0 ? ""enabled"" : ""disabled"" ) )"		4785183	0					
ANR	4785221	Callee	dprintf		4785183	0					
ANR	4785222	Identifier	dprintf		4785183	0					
ANR	4785223	ArgumentList	D_ALWAYS		4785183	1					
ANR	4785224	Argument	D_ALWAYS		4785183	0					
ANR	4785225	Identifier	D_ALWAYS		4785183	0					
ANR	4785226	Argument	"""HibernationManager: Hibernation is %s\\n"""		4785183	1					
ANR	4785227	PrimaryExpression	"""HibernationManager: Hibernation is %s\\n"""		4785183	0					
ANR	4785228	Argument	"m_interval > 0 ? ""enabled"" : ""disabled"""		4785183	2					
ANR	4785229	ConditionalExpression	"m_interval > 0 ? ""enabled"" : ""disabled"""		4785183	0					
ANR	4785230	Condition	m_interval > 0		4785183	0					
ANR	4785231	RelationalExpression	m_interval > 0		4785183	0		>			
ANR	4785232	Identifier	m_interval		4785183	0					
ANR	4785233	PrimaryExpression	0		4785183	1					
ANR	4785234	PrimaryExpression	"""enabled"""		4785183	1					
ANR	4785235	PrimaryExpression	"""disabled"""		4785183	2					
ANR	4785236	IfStatement	if ( m_hibernator )		4785183	4					
ANR	4785237	Condition	m_hibernator	92:6:2648:2659	4785183	0	True				
ANR	4785238	Identifier	m_hibernator		4785183	0					
ANR	4785239	CompoundStatement		10:21:345:345	4785183	1					
ANR	4785240	ExpressionStatement	m_hibernator -> update ( )	93:2:2667:2690	4785183	0	True				
ANR	4785241	CallExpression	m_hibernator -> update ( )		4785183	0					
ANR	4785242	Callee	m_hibernator -> update		4785183	0					
ANR	4785243	PtrMemberAccess	m_hibernator -> update		4785183	0					
ANR	4785244	Identifier	m_hibernator		4785183	0					
ANR	4785245	Identifier	update		4785183	1					
ANR	4785246	ArgumentList			4785183	1					
ANR	4785247	ReturnType	void		4785183	1					
ANR	4785248	Identifier	HibernationManager :: update		4785183	2					
ANR	4785249	ParameterList			4785183	3					
ANR	4785250	CFGEntryNode	ENTRY		4785183		True				
ANR	4785251	CFGExitNode	EXIT		4785183		True				
ANR	4785252	Symbol	previous_inteval		4785183						
ANR	4785253	Symbol	change		4785183						
ANR	4785254	Symbol	D_ALWAYS		4785183						
ANR	4785255	Symbol	param_integer		4785183						
ANR	4785256	Symbol	m_interval		4785183						
ANR	4785257	Symbol	m_hibernator		4785183						
ANR	4785258	Function	HibernationManager :: isStateSupported	97:0:2698:2876							
ANR	4785259	FunctionDef	HibernationManager :: isStateSupported (HibernatorBase :: SLEEP_STATE state)		4785258	0					
ANR	4785260	CompoundStatement		99:0:2783:2876	4785258	0					
ANR	4785261	IfStatement	if ( m_hibernator )		4785258	0					
ANR	4785262	Condition	m_hibernator	100:6:2791:2802	4785258	0	True				
ANR	4785263	Identifier	m_hibernator		4785258	0					
ANR	4785264	CompoundStatement		2:21:22:22	4785258	1					
ANR	4785265	ReturnStatement	return m_hibernator -> isStateSupported ( state ) ;	101:2:2810:2856	4785258	0	True				
ANR	4785266	CallExpression	m_hibernator -> isStateSupported ( state )		4785258	0					
ANR	4785267	Callee	m_hibernator -> isStateSupported		4785258	0					
ANR	4785268	PtrMemberAccess	m_hibernator -> isStateSupported		4785258	0					
ANR	4785269	Identifier	m_hibernator		4785258	0					
ANR	4785270	Identifier	isStateSupported		4785258	1					
ANR	4785271	ArgumentList	state		4785258	1					
ANR	4785272	Argument	state		4785258	0					
ANR	4785273	Identifier	state		4785258	0					
ANR	4785274	ReturnStatement	return false ;	103:1:2862:2874	4785258	1	True				
ANR	4785275	Identifier	false		4785258	0					
ANR	4785276	ReturnType	bool		4785258	1					
ANR	4785277	Identifier	HibernationManager :: isStateSupported		4785258	2					
ANR	4785278	ParameterList	HibernatorBase :: SLEEP_STATE state		4785258	3					
ANR	4785279	Parameter	HibernatorBase :: SLEEP_STATE state	98:38:2741:2773	4785258	0	True				
ANR	4785280	ParameterType	HibernatorBase :: SLEEP_STATE		4785258	0					
ANR	4785281	Identifier	state		4785258	1					
ANR	4785282	CFGEntryNode	ENTRY		4785258		True				
ANR	4785283	CFGExitNode	EXIT		4785258		True				
ANR	4785284	Symbol	* m_hibernator		4785258						
ANR	4785285	Symbol	false		4785258						
ANR	4785286	Symbol	state		4785258						
ANR	4785287	Symbol	m_hibernator -> isStateSupported		4785258						
ANR	4785288	Symbol	m_hibernator		4785258						
ANR	4785289	Function	HibernationManager :: getSupportedStates	106:0:2879:3043							
ANR	4785290	FunctionDef	HibernationManager :: getSupportedStates (unsigned & mask)		4785289	0					
ANR	4785291	CompoundStatement		108:0:2948:3043	4785289	0					
ANR	4785292	IfStatement	if ( m_hibernator )		4785289	0					
ANR	4785293	Condition	m_hibernator	109:6:2956:2967	4785289	0	True				
ANR	4785294	Identifier	m_hibernator		4785289	0					
ANR	4785295	CompoundStatement		2:21:22:22	4785289	1					
ANR	4785296	ExpressionStatement	mask = m_hibernator -> getStates ( )	110:2:2975:3008	4785289	0	True				
ANR	4785297	AssignmentExpression	mask = m_hibernator -> getStates ( )		4785289	0		=			
ANR	4785298	Identifier	mask		4785289	0					
ANR	4785299	CallExpression	m_hibernator -> getStates ( )		4785289	1					
ANR	4785300	Callee	m_hibernator -> getStates		4785289	0					
ANR	4785301	PtrMemberAccess	m_hibernator -> getStates		4785289	0					
ANR	4785302	Identifier	m_hibernator		4785289	0					
ANR	4785303	Identifier	getStates		4785289	1					
ANR	4785304	ArgumentList			4785289	1					
ANR	4785305	ReturnStatement	return true ;	111:2:3012:3023	4785289	1	True				
ANR	4785306	Identifier	true		4785289	0					
ANR	4785307	ReturnStatement	return false ;	113:1:3029:3041	4785289	1	True				
ANR	4785308	Identifier	false		4785289	0					
ANR	4785309	ReturnType	bool		4785289	1					
ANR	4785310	Identifier	HibernationManager :: getSupportedStates		4785289	2					
ANR	4785311	ParameterList	unsigned & mask		4785289	3					
ANR	4785312	Parameter	unsigned & mask	107:40:2924:2938	4785289	0	True				
ANR	4785313	ParameterType	unsigned &		4785289	0					
ANR	4785314	Identifier	mask		4785289	1					
ANR	4785315	CFGEntryNode	ENTRY		4785289		True				
ANR	4785316	CFGExitNode	EXIT		4785289		True				
ANR	4785317	Symbol	* m_hibernator		4785289						
ANR	4785318	Symbol	true		4785289						
ANR	4785319	Symbol	false		4785289						
ANR	4785320	Symbol	m_hibernator -> getStates		4785289						
ANR	4785321	Symbol	m_hibernator		4785289						
ANR	4785322	Symbol	mask		4785289						
ANR	4785323	Function	HibernationManager :: getSupportedStates	116:0:3046:3312							
ANR	4785324	FunctionDef	HibernationManager :: getSupportedStates (ExtArray < HibernatorBase :: SLEEP_STATE > & states)		4785323	0					
ANR	4785325	CompoundStatement		119:0:3146:3312	4785323	0					
ANR	4785326	ExpressionStatement	states . truncate ( - 1 )	120:1:3149:3168	4785323	0	True				
ANR	4785327	CallExpression	states . truncate ( - 1 )		4785323	0					
ANR	4785328	Callee	states . truncate		4785323	0					
ANR	4785329	MemberAccess	states . truncate		4785323	0					
ANR	4785330	Identifier	states		4785323	0					
ANR	4785331	Identifier	truncate		4785323	1					
ANR	4785332	ArgumentList	- 1		4785323	1					
ANR	4785333	Argument	- 1		4785323	0					
ANR	4785334	UnaryOperationExpression	- 1		4785323	0					
ANR	4785335	UnaryOperator	-		4785323	0					
ANR	4785336	PrimaryExpression	1		4785323	1					
ANR	4785337	IfStatement	if ( m_hibernator )		4785323	1					
ANR	4785338	Condition	m_hibernator	121:6:3176:3187	4785323	0	True				
ANR	4785339	Identifier	m_hibernator		4785323	0					
ANR	4785340	CompoundStatement		4:2:48:90	4785323	1					
ANR	4785341	IdentifierDeclStatement	unsigned mask = m_hibernator -> getStates ( ) ;	122:2:3195:3237	4785323	0	True				
ANR	4785342	IdentifierDecl	mask = m_hibernator -> getStates ( )		4785323	0					
ANR	4785343	IdentifierDeclType	unsigned		4785323	0					
ANR	4785344	Identifier	mask		4785323	1					
ANR	4785345	AssignmentExpression	mask = m_hibernator -> getStates ( )		4785323	2		=			
ANR	4785346	Identifier	mask		4785323	0					
ANR	4785347	CallExpression	m_hibernator -> getStates ( )		4785323	1					
ANR	4785348	Callee	m_hibernator -> getStates		4785323	0					
ANR	4785349	PtrMemberAccess	m_hibernator -> getStates		4785323	0					
ANR	4785350	Identifier	m_hibernator		4785323	0					
ANR	4785351	Identifier	getStates		4785323	1					
ANR	4785352	ArgumentList			4785323	1					
ANR	4785353	ReturnStatement	"return HibernatorBase :: maskToStates ( mask , states ) ;"	123:2:3241:3292	4785323	1	True				
ANR	4785354	CallExpression	"HibernatorBase :: maskToStates ( mask , states )"		4785323	0					
ANR	4785355	Callee	HibernatorBase :: maskToStates		4785323	0					
ANR	4785356	Identifier	HibernatorBase :: maskToStates		4785323	0					
ANR	4785357	ArgumentList	mask		4785323	1					
ANR	4785358	Argument	mask		4785323	0					
ANR	4785359	Identifier	mask		4785323	0					
ANR	4785360	Argument	states		4785323	1					
ANR	4785361	Identifier	states		4785323	0					
ANR	4785362	ReturnStatement	return false ;	125:1:3298:3310	4785323	2	True				
ANR	4785363	Identifier	false		4785323	0					
ANR	4785364	ReturnType	bool		4785323	1					
ANR	4785365	Identifier	HibernationManager :: getSupportedStates		4785323	2					
ANR	4785366	ParameterList	ExtArray < HibernatorBase :: SLEEP_STATE > & states		4785323	3					
ANR	4785367	Parameter	ExtArray < HibernatorBase :: SLEEP_STATE > & states	118:1:3092:3136	4785323	0	True				
ANR	4785368	ParameterType	ExtArray < HibernatorBase :: SLEEP_STATE > &		4785323	0					
ANR	4785369	Identifier	states		4785323	1					
ANR	4785370	CFGEntryNode	ENTRY		4785323		True				
ANR	4785371	CFGExitNode	EXIT		4785323		True				
ANR	4785372	Symbol	* m_hibernator		4785323						
ANR	4785373	Symbol	false		4785323						
ANR	4785374	Symbol	m_hibernator -> getStates		4785323						
ANR	4785375	Symbol	HibernatorBase :: maskToStates		4785323						
ANR	4785376	Symbol	m_hibernator		4785323						
ANR	4785377	Symbol	states		4785323						
ANR	4785378	Symbol	mask		4785323						
ANR	4785379	Function	HibernationManager :: getSupportedStates	128:0:3315:3556							
ANR	4785380	FunctionDef	HibernationManager :: getSupportedStates (MyString & str)		4785379	0					
ANR	4785381	CompoundStatement		130:0:3382:3556	4785379	0					
ANR	4785382	ExpressionStatement	"str = """""	131:1:3385:3393	4785379	0	True				
ANR	4785383	AssignmentExpression	"str = """""		4785379	0		=			
ANR	4785384	Identifier	str		4785379	0					
ANR	4785385	PrimaryExpression	""""""		4785379	1					
ANR	4785386	IdentifierDeclStatement	ExtArray < HibernatorBase :: SLEEP_STATE > states ;	132:1:3396:3440	4785379	1	True				
ANR	4785387	IdentifierDecl	states		4785379	0					
ANR	4785388	IdentifierDeclType	ExtArray < HibernatorBase :: SLEEP_STATE >		4785379	0					
ANR	4785389	Identifier	states		4785379	1					
ANR	4785390	IfStatement	if ( ! getSupportedStates ( states ) )		4785379	2					
ANR	4785391	Condition	! getSupportedStates ( states )	133:6:3448:3476	4785379	0	True				
ANR	4785392	UnaryOperationExpression	! getSupportedStates ( states )		4785379	0					
ANR	4785393	UnaryOperator	!		4785379	0					
ANR	4785394	CallExpression	getSupportedStates ( states )		4785379	1					
ANR	4785395	Callee	getSupportedStates		4785379	0					
ANR	4785396	Identifier	getSupportedStates		4785379	0					
ANR	4785397	ArgumentList	states		4785379	1					
ANR	4785398	Argument	states		4785379	0					
ANR	4785399	Identifier	states		4785379	0					
ANR	4785400	CompoundStatement		4:38:97:97	4785379	1					
ANR	4785401	ReturnStatement	return false ;	134:2:3484:3496	4785379	0	True				
ANR	4785402	Identifier	false		4785379	0					
ANR	4785403	ReturnStatement	"return HibernatorBase :: statesToString ( states , str ) ;"	136:1:3502:3554	4785379	3	True				
ANR	4785404	CallExpression	"HibernatorBase :: statesToString ( states , str )"		4785379	0					
ANR	4785405	Callee	HibernatorBase :: statesToString		4785379	0					
ANR	4785406	Identifier	HibernatorBase :: statesToString		4785379	0					
ANR	4785407	ArgumentList	states		4785379	1					
ANR	4785408	Argument	states		4785379	0					
ANR	4785409	Identifier	states		4785379	0					
ANR	4785410	Argument	str		4785379	1					
ANR	4785411	Identifier	str		4785379	0					
ANR	4785412	ReturnType	bool		4785379	1					
ANR	4785413	Identifier	HibernationManager :: getSupportedStates		4785379	2					
ANR	4785414	ParameterList	MyString & str		4785379	3					
ANR	4785415	Parameter	MyString & str	129:40:3360:3372	4785379	0	True				
ANR	4785416	ParameterType	MyString &		4785379	0					
ANR	4785417	Identifier	str		4785379	1					
ANR	4785418	CFGEntryNode	ENTRY		4785379		True				
ANR	4785419	CFGExitNode	EXIT		4785379		True				
ANR	4785420	Symbol	str		4785379						
ANR	4785421	Symbol	false		4785379						
ANR	4785422	Symbol	getSupportedStates		4785379						
ANR	4785423	Symbol	states		4785379						
ANR	4785424	Symbol	HibernatorBase :: statesToString		4785379						
ANR	4785425	Function	HibernationManager :: setTargetState	139:0:3559:3782							
ANR	4785426	FunctionDef	HibernationManager :: setTargetState (HibernatorBase :: SLEEP_STATE state)		4785425	0					
ANR	4785427	CompoundStatement		141:0:3636:3782	4785425	0					
ANR	4785428	IfStatement	if ( state == m_target_state )		4785425	0					
ANR	4785429	Condition	state == m_target_state	142:6:3644:3666	4785425	0	True				
ANR	4785430	EqualityExpression	state == m_target_state		4785425	0		==			
ANR	4785431	Identifier	state		4785425	0					
ANR	4785432	Identifier	m_target_state		4785425	1					
ANR	4785433	CompoundStatement		2:32:33:33	4785425	1					
ANR	4785434	ReturnStatement	return true ;	143:2:3674:3685	4785425	0	True				
ANR	4785435	Identifier	true		4785425	0					
ANR	4785436	IfStatement	if ( ! validateState ( state ) )		4785425	1					
ANR	4785437	Condition	! validateState ( state )	145:6:3696:3718	4785425	0	True				
ANR	4785438	UnaryOperationExpression	! validateState ( state )		4785425	0					
ANR	4785439	UnaryOperator	!		4785425	0					
ANR	4785440	CallExpression	validateState ( state )		4785425	1					
ANR	4785441	Callee	validateState		4785425	0					
ANR	4785442	Identifier	validateState		4785425	0					
ANR	4785443	ArgumentList	state		4785425	1					
ANR	4785444	Argument	state		4785425	0					
ANR	4785445	Identifier	state		4785425	0					
ANR	4785446	CompoundStatement		5:32:85:85	4785425	1					
ANR	4785447	ReturnStatement	return false ;	146:2:3726:3738	4785425	0	True				
ANR	4785448	Identifier	false		4785425	0					
ANR	4785449	ExpressionStatement	m_target_state = state	148:1:3744:3766	4785425	2	True				
ANR	4785450	AssignmentExpression	m_target_state = state		4785425	0		=			
ANR	4785451	Identifier	m_target_state		4785425	0					
ANR	4785452	Identifier	state		4785425	1					
ANR	4785453	ReturnStatement	return true ;	149:1:3769:3780	4785425	3	True				
ANR	4785454	Identifier	true		4785425	0					
ANR	4785455	ReturnType	bool		4785425	1					
ANR	4785456	Identifier	HibernationManager :: setTargetState		4785425	2					
ANR	4785457	ParameterList	HibernatorBase :: SLEEP_STATE state		4785425	3					
ANR	4785458	Parameter	HibernatorBase :: SLEEP_STATE state	140:36:3600:3632	4785425	0	True				
ANR	4785459	ParameterType	HibernatorBase :: SLEEP_STATE		4785425	0					
ANR	4785460	Identifier	state		4785425	1					
ANR	4785461	CFGEntryNode	ENTRY		4785425		True				
ANR	4785462	CFGExitNode	EXIT		4785425		True				
ANR	4785463	Symbol	m_target_state		4785425						
ANR	4785464	Symbol	true		4785425						
ANR	4785465	Symbol	false		4785425						
ANR	4785466	Symbol	state		4785425						
ANR	4785467	Symbol	validateState		4785425						
ANR	4785468	Function	HibernationManager :: setTargetState	152:0:3785:4090							
ANR	4785469	FunctionDef	HibernationManager :: setTargetState (const char * name)		4785468	0					
ANR	4785470	CompoundStatement		154:0:3845:4090	4785468	0					
ANR	4785471	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> stringToSleepState ( name ) ;	155:1:3848:3926	4785468	0	True				
ANR	4785472	IdentifierDecl	state = m_hibernator -> stringToSleepState ( name )		4785468	0					
ANR	4785473	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		4785468	0					
ANR	4785474	Identifier	state		4785468	1					
ANR	4785475	AssignmentExpression	state = m_hibernator -> stringToSleepState ( name )		4785468	2		=			
ANR	4785476	Identifier	state		4785468	0					
ANR	4785477	CallExpression	m_hibernator -> stringToSleepState ( name )		4785468	1					
ANR	4785478	Callee	m_hibernator -> stringToSleepState		4785468	0					
ANR	4785479	PtrMemberAccess	m_hibernator -> stringToSleepState		4785468	0					
ANR	4785480	Identifier	m_hibernator		4785468	0					
ANR	4785481	Identifier	stringToSleepState		4785468	1					
ANR	4785482	ArgumentList	name		4785468	1					
ANR	4785483	Argument	name		4785468	0					
ANR	4785484	Identifier	name		4785468	0					
ANR	4785485	IfStatement	if ( state == HibernatorBase :: NONE )		4785468	1					
ANR	4785486	Condition	state == HibernatorBase :: NONE	157:6:3934:3962	4785468	0	True				
ANR	4785487	EqualityExpression	state == HibernatorBase :: NONE		4785468	0		==			
ANR	4785488	Identifier	state		4785468	0					
ANR	4785489	Identifier	HibernatorBase :: NONE		4785468	1					
ANR	4785490	CompoundStatement		4:38:120:120	4785468	1					
ANR	4785491	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't set invalid target state '%s'\\n"" , name )"	158:2:3970:4036	4785468	0	True				
ANR	4785492	CallExpression	"dprintf ( D_ALWAYS , ""Can't set invalid target state '%s'\\n"" , name )"		4785468	0					
ANR	4785493	Callee	dprintf		4785468	0					
ANR	4785494	Identifier	dprintf		4785468	0					
ANR	4785495	ArgumentList	D_ALWAYS		4785468	1					
ANR	4785496	Argument	D_ALWAYS		4785468	0					
ANR	4785497	Identifier	D_ALWAYS		4785468	0					
ANR	4785498	Argument	"""Can't set invalid target state '%s'\\n"""		4785468	1					
ANR	4785499	PrimaryExpression	"""Can't set invalid target state '%s'\\n"""		4785468	0					
ANR	4785500	Argument	name		4785468	2					
ANR	4785501	Identifier	name		4785468	0					
ANR	4785502	ReturnStatement	return false ;	159:2:4040:4052	4785468	1	True				
ANR	4785503	Identifier	false		4785468	0					
ANR	4785504	ReturnStatement	return setTargetState ( state ) ;	161:1:4058:4088	4785468	2	True				
ANR	4785505	CallExpression	setTargetState ( state )		4785468	0					
ANR	4785506	Callee	setTargetState		4785468	0					
ANR	4785507	Identifier	setTargetState		4785468	0					
ANR	4785508	ArgumentList	state		4785468	1					
ANR	4785509	Argument	state		4785468	0					
ANR	4785510	Identifier	state		4785468	0					
ANR	4785511	ReturnType	bool		4785468	1					
ANR	4785512	Identifier	HibernationManager :: setTargetState		4785468	2					
ANR	4785513	ParameterList	const char * name		4785468	3					
ANR	4785514	Parameter	const char * name	153:36:3826:3841	4785468	0	True				
ANR	4785515	ParameterType	const char *		4785468	0					
ANR	4785516	Identifier	name		4785468	1					
ANR	4785517	CFGEntryNode	ENTRY		4785468		True				
ANR	4785518	CFGExitNode	EXIT		4785468		True				
ANR	4785519	Symbol	* m_hibernator		4785468						
ANR	4785520	Symbol	name		4785468						
ANR	4785521	Symbol	D_ALWAYS		4785468						
ANR	4785522	Symbol	false		4785468						
ANR	4785523	Symbol	m_hibernator -> stringToSleepState		4785468						
ANR	4785524	Symbol	state		4785468						
ANR	4785525	Symbol	setTargetState		4785468						
ANR	4785526	Symbol	m_hibernator		4785468						
ANR	4785527	Symbol	HibernatorBase :: NONE		4785468						
ANR	4785528	Function	HibernationManager :: setTargetLevel	164:0:4093:4388							
ANR	4785529	FunctionDef	HibernationManager :: setTargetLevel (int level)		4785528	0					
ANR	4785530	CompoundStatement		166:0:4147:4388	4785528	0					
ANR	4785531	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> intToSleepState ( level ) ;	167:1:4150:4226	4785528	0	True				
ANR	4785532	IdentifierDecl	state = m_hibernator -> intToSleepState ( level )		4785528	0					
ANR	4785533	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		4785528	0					
ANR	4785534	Identifier	state		4785528	1					
ANR	4785535	AssignmentExpression	state = m_hibernator -> intToSleepState ( level )		4785528	2		=			
ANR	4785536	Identifier	state		4785528	0					
ANR	4785537	CallExpression	m_hibernator -> intToSleepState ( level )		4785528	1					
ANR	4785538	Callee	m_hibernator -> intToSleepState		4785528	0					
ANR	4785539	PtrMemberAccess	m_hibernator -> intToSleepState		4785528	0					
ANR	4785540	Identifier	m_hibernator		4785528	0					
ANR	4785541	Identifier	intToSleepState		4785528	1					
ANR	4785542	ArgumentList	level		4785528	1					
ANR	4785543	Argument	level		4785528	0					
ANR	4785544	Identifier	level		4785528	0					
ANR	4785545	IfStatement	if ( state == HibernatorBase :: NONE )		4785528	1					
ANR	4785546	Condition	state == HibernatorBase :: NONE	169:6:4234:4262	4785528	0	True				
ANR	4785547	EqualityExpression	state == HibernatorBase :: NONE		4785528	0		==			
ANR	4785548	Identifier	state		4785528	0					
ANR	4785549	Identifier	HibernatorBase :: NONE		4785528	1					
ANR	4785550	CompoundStatement		4:38:118:118	4785528	1					
ANR	4785551	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid level %d\\n"" , level )"	170:2:4270:4334	4785528	0	True				
ANR	4785552	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid level %d\\n"" , level )"		4785528	0					
ANR	4785553	Callee	dprintf		4785528	0					
ANR	4785554	Identifier	dprintf		4785528	0					
ANR	4785555	ArgumentList	D_ALWAYS		4785528	1					
ANR	4785556	Argument	D_ALWAYS		4785528	0					
ANR	4785557	Identifier	D_ALWAYS		4785528	0					
ANR	4785558	Argument	"""Can't switch to invalid level %d\\n"""		4785528	1					
ANR	4785559	PrimaryExpression	"""Can't switch to invalid level %d\\n"""		4785528	0					
ANR	4785560	Argument	level		4785528	2					
ANR	4785561	Identifier	level		4785528	0					
ANR	4785562	ReturnStatement	return false ;	171:2:4338:4350	4785528	1	True				
ANR	4785563	Identifier	false		4785528	0					
ANR	4785564	ReturnStatement	return setTargetState ( state ) ;	173:1:4356:4386	4785528	2	True				
ANR	4785565	CallExpression	setTargetState ( state )		4785528	0					
ANR	4785566	Callee	setTargetState		4785528	0					
ANR	4785567	Identifier	setTargetState		4785528	0					
ANR	4785568	ArgumentList	state		4785528	1					
ANR	4785569	Argument	state		4785528	0					
ANR	4785570	Identifier	state		4785528	0					
ANR	4785571	ReturnType	bool		4785528	1					
ANR	4785572	Identifier	HibernationManager :: setTargetLevel		4785528	2					
ANR	4785573	ParameterList	int level		4785528	3					
ANR	4785574	Parameter	int level	165:37:4135:4143	4785528	0	True				
ANR	4785575	ParameterType	int		4785528	0					
ANR	4785576	Identifier	level		4785528	1					
ANR	4785577	CFGEntryNode	ENTRY		4785528		True				
ANR	4785578	CFGExitNode	EXIT		4785528		True				
ANR	4785579	Symbol	m_hibernator -> intToSleepState		4785528						
ANR	4785580	Symbol	* m_hibernator		4785528						
ANR	4785581	Symbol	level		4785528						
ANR	4785582	Symbol	D_ALWAYS		4785528						
ANR	4785583	Symbol	false		4785528						
ANR	4785584	Symbol	state		4785528						
ANR	4785585	Symbol	setTargetState		4785528						
ANR	4785586	Symbol	m_hibernator		4785528						
ANR	4785587	Symbol	HibernatorBase :: NONE		4785528						
ANR	4785588	Function	HibernationManager :: validateState	176:0:4391:4788							
ANR	4785589	FunctionDef	HibernationManager :: validateState (HibernatorBase :: SLEEP_STATE state)		4785588	0					
ANR	4785590	CompoundStatement		178:0:4473:4788	4785588	0					
ANR	4785591	IfStatement	if ( ! isStateValid ( state ) )		4785588	0					
ANR	4785592	Condition	! isStateValid ( state )	179:6:4481:4503	4785588	0	True				
ANR	4785593	UnaryOperationExpression	! isStateValid ( state )		4785588	0					
ANR	4785594	UnaryOperator	!		4785588	0					
ANR	4785595	CallExpression	isStateValid ( state )		4785588	1					
ANR	4785596	Callee	isStateValid		4785588	0					
ANR	4785597	Identifier	isStateValid		4785588	0					
ANR	4785598	ArgumentList	state		4785588	1					
ANR	4785599	Argument	state		4785588	0					
ANR	4785600	Identifier	state		4785588	0					
ANR	4785601	CompoundStatement		2:32:33:33	4785588	1					
ANR	4785602	ExpressionStatement	"dprintf ( D_ALWAYS , ""Attempt to set invalid sleep state %d\\n"" , ( int ) state )"	180:2:4511:4590	4785588	0	True				
ANR	4785603	CallExpression	"dprintf ( D_ALWAYS , ""Attempt to set invalid sleep state %d\\n"" , ( int ) state )"		4785588	0					
ANR	4785604	Callee	dprintf		4785588	0					
ANR	4785605	Identifier	dprintf		4785588	0					
ANR	4785606	ArgumentList	D_ALWAYS		4785588	1					
ANR	4785607	Argument	D_ALWAYS		4785588	0					
ANR	4785608	Identifier	D_ALWAYS		4785588	0					
ANR	4785609	Argument	"""Attempt to set invalid sleep state %d\\n"""		4785588	1					
ANR	4785610	PrimaryExpression	"""Attempt to set invalid sleep state %d\\n"""		4785588	0					
ANR	4785611	Argument	( int ) state		4785588	2					
ANR	4785612	CastExpression	( int ) state		4785588	0					
ANR	4785613	CastTarget	int		4785588	0					
ANR	4785614	Identifier	state		4785588	1					
ANR	4785615	ReturnStatement	return false ;	182:2:4594:4606	4785588	1	True				
ANR	4785616	Identifier	false		4785588	0					
ANR	4785617	IfStatement	if ( ! isStateSupported ( state ) )		4785588	1					
ANR	4785618	Condition	! isStateSupported ( state )	184:6:4617:4641	4785588	0	True				
ANR	4785619	UnaryOperationExpression	! isStateSupported ( state )		4785588	0					
ANR	4785620	UnaryOperator	!		4785588	0					
ANR	4785621	CallExpression	isStateSupported ( state )		4785588	1					
ANR	4785622	Callee	isStateSupported		4785588	0					
ANR	4785623	Identifier	isStateSupported		4785588	0					
ANR	4785624	ArgumentList	state		4785588	1					
ANR	4785625	Argument	state		4785588	0					
ANR	4785626	Identifier	state		4785588	0					
ANR	4785627	CompoundStatement		7:34:171:171	4785588	1					
ANR	4785628	ExpressionStatement	"dprintf ( D_ALWAYS , ""Attempt to set unsupported sleep state %s\\n"" , sleepStateToString ( state ) )"	185:2:4649:4753	4785588	0	True				
ANR	4785629	CallExpression	"dprintf ( D_ALWAYS , ""Attempt to set unsupported sleep state %s\\n"" , sleepStateToString ( state ) )"		4785588	0					
ANR	4785630	Callee	dprintf		4785588	0					
ANR	4785631	Identifier	dprintf		4785588	0					
ANR	4785632	ArgumentList	D_ALWAYS		4785588	1					
ANR	4785633	Argument	D_ALWAYS		4785588	0					
ANR	4785634	Identifier	D_ALWAYS		4785588	0					
ANR	4785635	Argument	"""Attempt to set unsupported sleep state %s\\n"""		4785588	1					
ANR	4785636	PrimaryExpression	"""Attempt to set unsupported sleep state %s\\n"""		4785588	0					
ANR	4785637	Argument	sleepStateToString ( state )		4785588	2					
ANR	4785638	CallExpression	sleepStateToString ( state )		4785588	0					
ANR	4785639	Callee	sleepStateToString		4785588	0					
ANR	4785640	Identifier	sleepStateToString		4785588	0					
ANR	4785641	ArgumentList	state		4785588	1					
ANR	4785642	Argument	state		4785588	0					
ANR	4785643	Identifier	state		4785588	0					
ANR	4785644	ReturnStatement	return false ;	188:2:4757:4769	4785588	1	True				
ANR	4785645	Identifier	false		4785588	0					
ANR	4785646	ReturnStatement	return true ;	190:1:4775:4786	4785588	2	True				
ANR	4785647	Identifier	true		4785588	0					
ANR	4785648	ReturnType	bool		4785588	1					
ANR	4785649	Identifier	HibernationManager :: validateState		4785588	2					
ANR	4785650	ParameterList	HibernatorBase :: SLEEP_STATE state		4785588	3					
ANR	4785651	Parameter	HibernatorBase :: SLEEP_STATE state	177:35:4431:4463	4785588	0	True				
ANR	4785652	ParameterType	HibernatorBase :: SLEEP_STATE		4785588	0					
ANR	4785653	Identifier	state		4785588	1					
ANR	4785654	CFGEntryNode	ENTRY		4785588		True				
ANR	4785655	CFGExitNode	EXIT		4785588		True				
ANR	4785656	Symbol	isStateValid		4785588						
ANR	4785657	Symbol	sleepStateToString		4785588						
ANR	4785658	Symbol	D_ALWAYS		4785588						
ANR	4785659	Symbol	false		4785588						
ANR	4785660	Symbol	true		4785588						
ANR	4785661	Symbol	state		4785588						
ANR	4785662	Symbol	isStateSupported		4785588						
ANR	4785663	Function	HibernationManager :: switchToTargetState	193:0:4791:4888							
ANR	4785664	FunctionDef	HibernationManager :: switchToTargetState ()		4785663	0					
ANR	4785665	CompoundStatement		195:0:4845:4888	4785663	0					
ANR	4785666	ReturnStatement	return switchToState ( m_target_state ) ;	196:1:4848:4886	4785663	0	True				
ANR	4785667	CallExpression	switchToState ( m_target_state )		4785663	0					
ANR	4785668	Callee	switchToState		4785663	0					
ANR	4785669	Identifier	switchToState		4785663	0					
ANR	4785670	ArgumentList	m_target_state		4785663	1					
ANR	4785671	Argument	m_target_state		4785663	0					
ANR	4785672	Identifier	m_target_state		4785663	0					
ANR	4785673	ReturnType	bool		4785663	1					
ANR	4785674	Identifier	HibernationManager :: switchToTargetState		4785663	2					
ANR	4785675	ParameterList			4785663	3					
ANR	4785676	CFGEntryNode	ENTRY		4785663		True				
ANR	4785677	CFGExitNode	EXIT		4785663		True				
ANR	4785678	Symbol	switchToState		4785663						
ANR	4785679	Symbol	m_target_state		4785663						
ANR	4785680	Function	HibernationManager :: switchToState	199:0:4891:5244							
ANR	4785681	FunctionDef	HibernationManager :: switchToState (HibernatorBase :: SLEEP_STATE state)		4785680	0					
ANR	4785682	CompoundStatement		201:0:4968:5244	4785680	0					
ANR	4785683	IfStatement	if ( ! validateState ( state ) )		4785680	0					
ANR	4785684	Condition	! validateState ( state )	202:6:4976:4998	4785680	0	True				
ANR	4785685	UnaryOperationExpression	! validateState ( state )		4785680	0					
ANR	4785686	UnaryOperator	!		4785680	0					
ANR	4785687	CallExpression	validateState ( state )		4785680	1					
ANR	4785688	Callee	validateState		4785680	0					
ANR	4785689	Identifier	validateState		4785680	0					
ANR	4785690	ArgumentList	state		4785680	1					
ANR	4785691	Argument	state		4785680	0					
ANR	4785692	Identifier	state		4785680	0					
ANR	4785693	CompoundStatement		2:32:33:33	4785680	1					
ANR	4785694	ReturnStatement	return false ;	203:2:5006:5018	4785680	0	True				
ANR	4785695	Identifier	false		4785680	0					
ANR	4785696	IfStatement	if ( NULL == m_hibernator )		4785680	1					
ANR	4785697	Condition	NULL == m_hibernator	205:6:5029:5048	4785680	0	True				
ANR	4785698	EqualityExpression	NULL == m_hibernator		4785680	0		==			
ANR	4785699	Identifier	NULL		4785680	0					
ANR	4785700	Identifier	m_hibernator		4785680	1					
ANR	4785701	CompoundStatement		5:29:83:83	4785680	1					
ANR	4785702	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to state %s: no hibernator\\n"" , sleepStateToString ( state ) )"	206:2:5056:5154	4785680	0	True				
ANR	4785703	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to state %s: no hibernator\\n"" , sleepStateToString ( state ) )"		4785680	0					
ANR	4785704	Callee	dprintf		4785680	0					
ANR	4785705	Identifier	dprintf		4785680	0					
ANR	4785706	ArgumentList	D_ALWAYS		4785680	1					
ANR	4785707	Argument	D_ALWAYS		4785680	0					
ANR	4785708	Identifier	D_ALWAYS		4785680	0					
ANR	4785709	Argument	"""Can't switch to state %s: no hibernator\\n"""		4785680	1					
ANR	4785710	PrimaryExpression	"""Can't switch to state %s: no hibernator\\n"""		4785680	0					
ANR	4785711	Argument	sleepStateToString ( state )		4785680	2					
ANR	4785712	CallExpression	sleepStateToString ( state )		4785680	0					
ANR	4785713	Callee	sleepStateToString		4785680	0					
ANR	4785714	Identifier	sleepStateToString		4785680	0					
ANR	4785715	ArgumentList	state		4785680	1					
ANR	4785716	Argument	state		4785680	0					
ANR	4785717	Identifier	state		4785680	0					
ANR	4785718	ReturnStatement	return false ;	208:2:5158:5170	4785680	1	True				
ANR	4785719	Identifier	false		4785680	0					
ANR	4785720	ReturnStatement	"return m_hibernator -> switchToState ( state , m_actual_state , true ) ;"	210:1:5176:5242	4785680	2	True				
ANR	4785721	CallExpression	"m_hibernator -> switchToState ( state , m_actual_state , true )"		4785680	0					
ANR	4785722	Callee	m_hibernator -> switchToState		4785680	0					
ANR	4785723	PtrMemberAccess	m_hibernator -> switchToState		4785680	0					
ANR	4785724	Identifier	m_hibernator		4785680	0					
ANR	4785725	Identifier	switchToState		4785680	1					
ANR	4785726	ArgumentList	state		4785680	1					
ANR	4785727	Argument	state		4785680	0					
ANR	4785728	Identifier	state		4785680	0					
ANR	4785729	Argument	m_actual_state		4785680	1					
ANR	4785730	Identifier	m_actual_state		4785680	0					
ANR	4785731	Argument	true		4785680	2					
ANR	4785732	Identifier	true		4785680	0					
ANR	4785733	ReturnType	bool		4785680	1					
ANR	4785734	Identifier	HibernationManager :: switchToState		4785680	2					
ANR	4785735	ParameterList	HibernatorBase :: SLEEP_STATE state		4785680	3					
ANR	4785736	Parameter	HibernatorBase :: SLEEP_STATE state	200:36:4932:4964	4785680	0	True				
ANR	4785737	ParameterType	HibernatorBase :: SLEEP_STATE		4785680	0					
ANR	4785738	Identifier	state		4785680	1					
ANR	4785739	CFGEntryNode	ENTRY		4785680		True				
ANR	4785740	CFGExitNode	EXIT		4785680		True				
ANR	4785741	Symbol	NULL		4785680						
ANR	4785742	Symbol	* m_hibernator		4785680						
ANR	4785743	Symbol	m_hibernator -> switchToState		4785680						
ANR	4785744	Symbol	m_actual_state		4785680						
ANR	4785745	Symbol	sleepStateToString		4785680						
ANR	4785746	Symbol	false		4785680						
ANR	4785747	Symbol	D_ALWAYS		4785680						
ANR	4785748	Symbol	true		4785680						
ANR	4785749	Symbol	state		4785680						
ANR	4785750	Symbol	validateState		4785680						
ANR	4785751	Symbol	m_hibernator		4785680						
ANR	4785752	Function	HibernationManager :: switchToState	213:0:5247:5550							
ANR	4785753	FunctionDef	HibernationManager :: switchToState (const char * name)		4785752	0					
ANR	4785754	CompoundStatement		215:0:5307:5550	4785752	0					
ANR	4785755	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> stringToSleepState ( name ) ;	216:1:5310:5388	4785752	0	True				
ANR	4785756	IdentifierDecl	state = m_hibernator -> stringToSleepState ( name )		4785752	0					
ANR	4785757	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		4785752	0					
ANR	4785758	Identifier	state		4785752	1					
ANR	4785759	AssignmentExpression	state = m_hibernator -> stringToSleepState ( name )		4785752	2		=			
ANR	4785760	Identifier	state		4785752	0					
ANR	4785761	CallExpression	m_hibernator -> stringToSleepState ( name )		4785752	1					
ANR	4785762	Callee	m_hibernator -> stringToSleepState		4785752	0					
ANR	4785763	PtrMemberAccess	m_hibernator -> stringToSleepState		4785752	0					
ANR	4785764	Identifier	m_hibernator		4785752	0					
ANR	4785765	Identifier	stringToSleepState		4785752	1					
ANR	4785766	ArgumentList	name		4785752	1					
ANR	4785767	Argument	name		4785752	0					
ANR	4785768	Identifier	name		4785752	0					
ANR	4785769	IfStatement	if ( state == HibernatorBase :: NONE )		4785752	1					
ANR	4785770	Condition	state == HibernatorBase :: NONE	218:6:5396:5424	4785752	0	True				
ANR	4785771	EqualityExpression	state == HibernatorBase :: NONE		4785752	0		==			
ANR	4785772	Identifier	state		4785752	0					
ANR	4785773	Identifier	HibernatorBase :: NONE		4785752	1					
ANR	4785774	CompoundStatement		4:38:120:120	4785752	1					
ANR	4785775	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid state '%s'\\n"" , name )"	219:2:5432:5497	4785752	0	True				
ANR	4785776	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid state '%s'\\n"" , name )"		4785752	0					
ANR	4785777	Callee	dprintf		4785752	0					
ANR	4785778	Identifier	dprintf		4785752	0					
ANR	4785779	ArgumentList	D_ALWAYS		4785752	1					
ANR	4785780	Argument	D_ALWAYS		4785752	0					
ANR	4785781	Identifier	D_ALWAYS		4785752	0					
ANR	4785782	Argument	"""Can't switch to invalid state '%s'\\n"""		4785752	1					
ANR	4785783	PrimaryExpression	"""Can't switch to invalid state '%s'\\n"""		4785752	0					
ANR	4785784	Argument	name		4785752	2					
ANR	4785785	Identifier	name		4785752	0					
ANR	4785786	ReturnStatement	return false ;	220:2:5501:5513	4785752	1	True				
ANR	4785787	Identifier	false		4785752	0					
ANR	4785788	ReturnStatement	return switchToState ( state ) ;	222:1:5519:5548	4785752	2	True				
ANR	4785789	CallExpression	switchToState ( state )		4785752	0					
ANR	4785790	Callee	switchToState		4785752	0					
ANR	4785791	Identifier	switchToState		4785752	0					
ANR	4785792	ArgumentList	state		4785752	1					
ANR	4785793	Argument	state		4785752	0					
ANR	4785794	Identifier	state		4785752	0					
ANR	4785795	ReturnType	bool		4785752	1					
ANR	4785796	Identifier	HibernationManager :: switchToState		4785752	2					
ANR	4785797	ParameterList	const char * name		4785752	3					
ANR	4785798	Parameter	const char * name	214:36:5288:5303	4785752	0	True				
ANR	4785799	ParameterType	const char *		4785752	0					
ANR	4785800	Identifier	name		4785752	1					
ANR	4785801	CFGEntryNode	ENTRY		4785752		True				
ANR	4785802	CFGExitNode	EXIT		4785752		True				
ANR	4785803	Symbol	switchToState		4785752						
ANR	4785804	Symbol	* m_hibernator		4785752						
ANR	4785805	Symbol	name		4785752						
ANR	4785806	Symbol	D_ALWAYS		4785752						
ANR	4785807	Symbol	false		4785752						
ANR	4785808	Symbol	m_hibernator -> stringToSleepState		4785752						
ANR	4785809	Symbol	state		4785752						
ANR	4785810	Symbol	m_hibernator		4785752						
ANR	4785811	Symbol	HibernatorBase :: NONE		4785752						
ANR	4785812	Function	HibernationManager :: switchToLevel	225:0:5553:5848							
ANR	4785813	FunctionDef	HibernationManager :: switchToLevel (int level)		4785812	0					
ANR	4785814	CompoundStatement		227:0:5606:5848	4785812	0					
ANR	4785815	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> intToSleepState ( level ) ;	228:1:5609:5685	4785812	0	True				
ANR	4785816	IdentifierDecl	state = m_hibernator -> intToSleepState ( level )		4785812	0					
ANR	4785817	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		4785812	0					
ANR	4785818	Identifier	state		4785812	1					
ANR	4785819	AssignmentExpression	state = m_hibernator -> intToSleepState ( level )		4785812	2		=			
ANR	4785820	Identifier	state		4785812	0					
ANR	4785821	CallExpression	m_hibernator -> intToSleepState ( level )		4785812	1					
ANR	4785822	Callee	m_hibernator -> intToSleepState		4785812	0					
ANR	4785823	PtrMemberAccess	m_hibernator -> intToSleepState		4785812	0					
ANR	4785824	Identifier	m_hibernator		4785812	0					
ANR	4785825	Identifier	intToSleepState		4785812	1					
ANR	4785826	ArgumentList	level		4785812	1					
ANR	4785827	Argument	level		4785812	0					
ANR	4785828	Identifier	level		4785812	0					
ANR	4785829	IfStatement	if ( state == HibernatorBase :: NONE )		4785812	1					
ANR	4785830	Condition	state == HibernatorBase :: NONE	230:6:5693:5721	4785812	0	True				
ANR	4785831	EqualityExpression	state == HibernatorBase :: NONE		4785812	0		==			
ANR	4785832	Identifier	state		4785812	0					
ANR	4785833	Identifier	HibernatorBase :: NONE		4785812	1					
ANR	4785834	CompoundStatement		4:38:118:118	4785812	1					
ANR	4785835	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid level '%d'\\n"" , level )"	231:2:5729:5795	4785812	0	True				
ANR	4785836	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid level '%d'\\n"" , level )"		4785812	0					
ANR	4785837	Callee	dprintf		4785812	0					
ANR	4785838	Identifier	dprintf		4785812	0					
ANR	4785839	ArgumentList	D_ALWAYS		4785812	1					
ANR	4785840	Argument	D_ALWAYS		4785812	0					
ANR	4785841	Identifier	D_ALWAYS		4785812	0					
ANR	4785842	Argument	"""Can't switch to invalid level '%d'\\n"""		4785812	1					
ANR	4785843	PrimaryExpression	"""Can't switch to invalid level '%d'\\n"""		4785812	0					
ANR	4785844	Argument	level		4785812	2					
ANR	4785845	Identifier	level		4785812	0					
ANR	4785846	ReturnStatement	return false ;	232:2:5799:5811	4785812	1	True				
ANR	4785847	Identifier	false		4785812	0					
ANR	4785848	ReturnStatement	return switchToState ( state ) ;	234:1:5817:5846	4785812	2	True				
ANR	4785849	CallExpression	switchToState ( state )		4785812	0					
ANR	4785850	Callee	switchToState		4785812	0					
ANR	4785851	Identifier	switchToState		4785812	0					
ANR	4785852	ArgumentList	state		4785812	1					
ANR	4785853	Argument	state		4785812	0					
ANR	4785854	Identifier	state		4785812	0					
ANR	4785855	ReturnType	bool		4785812	1					
ANR	4785856	Identifier	HibernationManager :: switchToLevel		4785812	2					
ANR	4785857	ParameterList	int level		4785812	3					
ANR	4785858	Parameter	int level	226:36:5594:5602	4785812	0	True				
ANR	4785859	ParameterType	int		4785812	0					
ANR	4785860	Identifier	level		4785812	1					
ANR	4785861	CFGEntryNode	ENTRY		4785812		True				
ANR	4785862	CFGExitNode	EXIT		4785812		True				
ANR	4785863	Symbol	switchToState		4785812						
ANR	4785864	Symbol	m_hibernator -> intToSleepState		4785812						
ANR	4785865	Symbol	* m_hibernator		4785812						
ANR	4785866	Symbol	level		4785812						
ANR	4785867	Symbol	D_ALWAYS		4785812						
ANR	4785868	Symbol	false		4785812						
ANR	4785869	Symbol	state		4785812						
ANR	4785870	Symbol	m_hibernator		4785812						
ANR	4785871	Symbol	HibernatorBase :: NONE		4785812						
ANR	4785872	Function	HibernationManager :: canHibernate	237:0:5851:6027							
ANR	4785873	FunctionDef	HibernationManager :: canHibernate ()		4785872	0					
ANR	4785874	CompoundStatement		239:0:5902:6027	4785872	0					
ANR	4785875	IdentifierDeclStatement	bool can = false ;	240:1:5905:5921	4785872	0	True				
ANR	4785876	IdentifierDecl	can = false		4785872	0					
ANR	4785877	IdentifierDeclType	bool		4785872	0					
ANR	4785878	Identifier	can		4785872	1					
ANR	4785879	AssignmentExpression	can = false		4785872	2		=			
ANR	4785880	Identifier	false		4785872	0					
ANR	4785881	Identifier	false		4785872	1					
ANR	4785882	IfStatement	if ( m_hibernator )		4785872	1					
ANR	4785883	Condition	m_hibernator	241:6:5930:5941	4785872	0	True				
ANR	4785884	Identifier	m_hibernator		4785872	0					
ANR	4785885	CompoundStatement		3:21:42:42	4785872	1					
ANR	4785886	ExpressionStatement	can = ( HibernatorBase :: NONE != m_hibernator -> getStates ( ) )	242:2:5949:6009	4785872	0	True				
ANR	4785887	AssignmentExpression	can = ( HibernatorBase :: NONE != m_hibernator -> getStates ( ) )		4785872	0		=			
ANR	4785888	Identifier	can		4785872	0					
ANR	4785889	EqualityExpression	HibernatorBase :: NONE != m_hibernator -> getStates ( )		4785872	1		!=			
ANR	4785890	Identifier	HibernatorBase :: NONE		4785872	0					
ANR	4785891	CallExpression	m_hibernator -> getStates ( )		4785872	1					
ANR	4785892	Callee	m_hibernator -> getStates		4785872	0					
ANR	4785893	PtrMemberAccess	m_hibernator -> getStates		4785872	0					
ANR	4785894	Identifier	m_hibernator		4785872	0					
ANR	4785895	Identifier	getStates		4785872	1					
ANR	4785896	ArgumentList			4785872	1					
ANR	4785897	ReturnStatement	return can ;	244:1:6015:6025	4785872	2	True				
ANR	4785898	Identifier	can		4785872	0					
ANR	4785899	ReturnType	bool		4785872	1					
ANR	4785900	Identifier	HibernationManager :: canHibernate		4785872	2					
ANR	4785901	ParameterList			4785872	3					
ANR	4785902	CFGEntryNode	ENTRY		4785872		True				
ANR	4785903	CFGExitNode	EXIT		4785872		True				
ANR	4785904	Symbol	can		4785872						
ANR	4785905	Symbol	* m_hibernator		4785872						
ANR	4785906	Symbol	false		4785872						
ANR	4785907	Symbol	m_hibernator -> getStates		4785872						
ANR	4785908	Symbol	m_hibernator		4785872						
ANR	4785909	Symbol	HibernatorBase :: NONE		4785872						
ANR	4785910	Function	HibernationManager :: canWake	247:0:6030:6254							
ANR	4785911	FunctionDef	HibernationManager :: canWake ()		4785910	0					
ANR	4785912	CompoundStatement		249:0:6076:6254	4785910	0					
ANR	4785913	IdentifierDeclStatement	bool can = false ;	250:4:6082:6098	4785910	0	True				
ANR	4785914	IdentifierDecl	can = false		4785910	0					
ANR	4785915	IdentifierDeclType	bool		4785910	0					
ANR	4785916	Identifier	can		4785910	1					
ANR	4785917	AssignmentExpression	can = false		4785910	2		=			
ANR	4785918	Identifier	false		4785910	0					
ANR	4785919	Identifier	false		4785910	1					
ANR	4785920	ExpressionStatement	can = ( ( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) ) )	252:1:6102:6236	4785910	1	True				
ANR	4785921	AssignmentExpression	can = ( ( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) ) )		4785910	0		=			
ANR	4785922	Identifier	can		4785910	0					
ANR	4785923	AndExpression	( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) )		4785910	1		&&			
ANR	4785924	EqualityExpression	NULL != m_primary_adapter		4785910	0		!=			
ANR	4785925	Identifier	NULL		4785910	0					
ANR	4785926	Identifier	m_primary_adapter		4785910	1					
ANR	4785927	AndExpression	( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) )		4785910	1		&&			
ANR	4785928	CallExpression	m_primary_adapter -> exists ( )		4785910	0					
ANR	4785929	Callee	m_primary_adapter -> exists		4785910	0					
ANR	4785930	PtrMemberAccess	m_primary_adapter -> exists		4785910	0					
ANR	4785931	Identifier	m_primary_adapter		4785910	0					
ANR	4785932	Identifier	exists		4785910	1					
ANR	4785933	ArgumentList			4785910	1					
ANR	4785934	CallExpression	m_primary_adapter -> isWakeable ( )		4785910	1					
ANR	4785935	Callee	m_primary_adapter -> isWakeable		4785910	0					
ANR	4785936	PtrMemberAccess	m_primary_adapter -> isWakeable		4785910	0					
ANR	4785937	Identifier	m_primary_adapter		4785910	0					
ANR	4785938	Identifier	isWakeable		4785910	1					
ANR	4785939	ArgumentList			4785910	1					
ANR	4785940	ReturnStatement	return can ;	255:4:6242:6252	4785910	2	True				
ANR	4785941	Identifier	can		4785910	0					
ANR	4785942	ReturnType	bool		4785910	1					
ANR	4785943	Identifier	HibernationManager :: canWake		4785910	2					
ANR	4785944	ParameterList			4785910	3					
ANR	4785945	CFGEntryNode	ENTRY		4785910		True				
ANR	4785946	CFGExitNode	EXIT		4785910		True				
ANR	4785947	Symbol	can		4785910						
ANR	4785948	Symbol	* m_primary_adapter		4785910						
ANR	4785949	Symbol	NULL		4785910						
ANR	4785950	Symbol	false		4785910						
ANR	4785951	Symbol	m_primary_adapter -> exists		4785910						
ANR	4785952	Symbol	m_primary_adapter		4785910						
ANR	4785953	Symbol	m_primary_adapter -> isWakeable		4785910						
ANR	4785954	Function	HibernationManager :: wantsHibernate	258:0:6257:6436							
ANR	4785955	FunctionDef	HibernationManager :: wantsHibernate ()		4785954	0					
ANR	4785956	CompoundStatement		260:0:6310:6436	4785954	0					
ANR	4785957	IdentifierDeclStatement	bool does = false ;	261:4:6316:6333	4785954	0	True				
ANR	4785958	IdentifierDecl	does = false		4785954	0					
ANR	4785959	IdentifierDeclType	bool		4785954	0					
ANR	4785960	Identifier	does		4785954	1					
ANR	4785961	AssignmentExpression	does = false		4785954	2		=			
ANR	4785962	Identifier	false		4785954	0					
ANR	4785963	Identifier	false		4785954	1					
ANR	4785964	IfStatement	if ( m_hibernator )		4785954	1					
ANR	4785965	Condition	m_hibernator	262:6:6341:6352	4785954	0	True				
ANR	4785966	Identifier	m_hibernator		4785954	0					
ANR	4785967	CompoundStatement		3:21:45:45	4785954	1					
ANR	4785968	IfStatement	if ( canHibernate ( ) )		4785954	0					
ANR	4785969	Condition	canHibernate ( )	263:7:6365:6379	4785954	0	True				
ANR	4785970	CallExpression	canHibernate ( )		4785954	0					
ANR	4785971	Callee	canHibernate		4785954	0					
ANR	4785972	Identifier	canHibernate		4785954	0					
ANR	4785973	ArgumentList			4785954	1					
ANR	4785974	CompoundStatement		4:25:72:72	4785954	1					
ANR	4785975	ExpressionStatement	does = ( m_interval > 0 )	264:3:6388:6413	4785954	0	True				
ANR	4785976	AssignmentExpression	does = ( m_interval > 0 )		4785954	0		=			
ANR	4785977	Identifier	does		4785954	0					
ANR	4785978	RelationalExpression	m_interval > 0		4785954	1		>			
ANR	4785979	Identifier	m_interval		4785954	0					
ANR	4785980	PrimaryExpression	0		4785954	1					
ANR	4785981	ReturnStatement	return does ;	267:1:6423:6434	4785954	2	True				
ANR	4785982	Identifier	does		4785954	0					
ANR	4785983	ReturnType	bool		4785954	1					
ANR	4785984	Identifier	HibernationManager :: wantsHibernate		4785954	2					
ANR	4785985	ParameterList			4785954	3					
ANR	4785986	CFGEntryNode	ENTRY		4785954		True				
ANR	4785987	CFGExitNode	EXIT		4785954		True				
ANR	4785988	Symbol	does		4785954						
ANR	4785989	Symbol	false		4785954						
ANR	4785990	Symbol	canHibernate		4785954						
ANR	4785991	Symbol	m_interval		4785954						
ANR	4785992	Symbol	m_hibernator		4785954						
ANR	4785993	Function	HibernationManager :: getCheckInterval	270:0:6439:6515							
ANR	4785994	FunctionDef	HibernationManager :: getCheckInterval ()		4785993	0					
ANR	4785995	CompoundStatement		271:0:6493:6515	4785993	0					
ANR	4785996	ReturnStatement	return m_interval ;	272:1:6496:6513	4785993	0	True				
ANR	4785997	Identifier	m_interval		4785993	0					
ANR	4785998	ReturnType	int		4785993	1					
ANR	4785999	Identifier	HibernationManager :: getCheckInterval		4785993	2					
ANR	4786000	ParameterList			4785993	3					
ANR	4786001	CFGEntryNode	ENTRY		4785993		True				
ANR	4786002	CFGExitNode	EXIT		4785993		True				
ANR	4786003	Symbol	m_interval		4785993						
ANR	4786004	Function	HibernationManager :: getHibernationMethod	275:0:6518:6668							
ANR	4786005	FunctionDef	HibernationManager :: getHibernationMethod ()		4786004	0					
ANR	4786006	CompoundStatement		277:0:6587:6668	4786004	0					
ANR	4786007	IfStatement	if ( m_hibernator )		4786004	0					
ANR	4786008	Condition	m_hibernator	278:6:6595:6606	4786004	0	True				
ANR	4786009	Identifier	m_hibernator		4786004	0					
ANR	4786010	CompoundStatement		2:21:22:22	4786004	1					
ANR	4786011	ReturnStatement	return m_hibernator -> getMethod ( ) ;	279:2:6614:6647	4786004	0	True				
ANR	4786012	CallExpression	m_hibernator -> getMethod ( )		4786004	0					
ANR	4786013	Callee	m_hibernator -> getMethod		4786004	0					
ANR	4786014	PtrMemberAccess	m_hibernator -> getMethod		4786004	0					
ANR	4786015	Identifier	m_hibernator		4786004	0					
ANR	4786016	Identifier	getMethod		4786004	1					
ANR	4786017	ArgumentList			4786004	1					
ANR	4786018	ReturnStatement	"return ""NONE"" ;"	281:1:6653:6666	4786004	1	True				
ANR	4786019	PrimaryExpression	"""NONE"""		4786004	0					
ANR	4786020	ReturnType	const char *		4786004	1					
ANR	4786021	Identifier	HibernationManager :: getHibernationMethod		4786004	2					
ANR	4786022	ParameterList			4786004	3					
ANR	4786023	CFGEntryNode	ENTRY		4786004		True				
ANR	4786024	CFGExitNode	EXIT		4786004		True				
ANR	4786025	Symbol	m_hibernator -> getMethod		4786004						
ANR	4786026	Symbol	* m_hibernator		4786004						
ANR	4786027	Symbol	m_hibernator		4786004						
ANR	4786028	Function	HibernationManager :: publish	284:0:6671:7539							
ANR	4786029	FunctionDef	HibernationManager :: publish (ClassAd & ad)		4786028	0					
ANR	4786030	CompoundStatement		286:0:6720:7539	4786028	0					
ANR	4786031	IdentifierDeclStatement	int level = sleepStateToInt ( m_target_state ) ;	291:1:6957:7002	4786028	0	True				
ANR	4786032	IdentifierDecl	level = sleepStateToInt ( m_target_state )		4786028	0					
ANR	4786033	IdentifierDeclType	int		4786028	0					
ANR	4786034	Identifier	level		4786028	1					
ANR	4786035	AssignmentExpression	level = sleepStateToInt ( m_target_state )		4786028	2		=			
ANR	4786036	Identifier	level		4786028	0					
ANR	4786037	CallExpression	sleepStateToInt ( m_target_state )		4786028	1					
ANR	4786038	Callee	sleepStateToInt		4786028	0					
ANR	4786039	Identifier	sleepStateToInt		4786028	0					
ANR	4786040	ArgumentList	m_target_state		4786028	1					
ANR	4786041	Argument	m_target_state		4786028	0					
ANR	4786042	Identifier	m_target_state		4786028	0					
ANR	4786043	IdentifierDeclStatement	const char * state = sleepStateToString ( m_target_state ) ;	292:1:7005:7061	4786028	1	True				
ANR	4786044	IdentifierDecl	* state = sleepStateToString ( m_target_state )		4786028	0					
ANR	4786045	IdentifierDeclType	const char *		4786028	0					
ANR	4786046	Identifier	state		4786028	1					
ANR	4786047	AssignmentExpression	* state = sleepStateToString ( m_target_state )		4786028	2		=			
ANR	4786048	Identifier	state		4786028	0					
ANR	4786049	CallExpression	sleepStateToString ( m_target_state )		4786028	1					
ANR	4786050	Callee	sleepStateToString		4786028	0					
ANR	4786051	Identifier	sleepStateToString		4786028	0					
ANR	4786052	ArgumentList	m_target_state		4786028	1					
ANR	4786053	Argument	m_target_state		4786028	0					
ANR	4786054	Identifier	m_target_state		4786028	0					
ANR	4786055	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_LEVEL , level )"	293:4:7067:7110	4786028	2	True				
ANR	4786056	CallExpression	"ad . Assign ( ATTR_HIBERNATION_LEVEL , level )"		4786028	0					
ANR	4786057	Callee	ad . Assign		4786028	0					
ANR	4786058	MemberAccess	ad . Assign		4786028	0					
ANR	4786059	Identifier	ad		4786028	0					
ANR	4786060	Identifier	Assign		4786028	1					
ANR	4786061	ArgumentList	ATTR_HIBERNATION_LEVEL		4786028	1					
ANR	4786062	Argument	ATTR_HIBERNATION_LEVEL		4786028	0					
ANR	4786063	Identifier	ATTR_HIBERNATION_LEVEL		4786028	0					
ANR	4786064	Argument	level		4786028	1					
ANR	4786065	Identifier	level		4786028	0					
ANR	4786066	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_STATE , state )"	294:4:7116:7159	4786028	3	True				
ANR	4786067	CallExpression	"ad . Assign ( ATTR_HIBERNATION_STATE , state )"		4786028	0					
ANR	4786068	Callee	ad . Assign		4786028	0					
ANR	4786069	MemberAccess	ad . Assign		4786028	0					
ANR	4786070	Identifier	ad		4786028	0					
ANR	4786071	Identifier	Assign		4786028	1					
ANR	4786072	ArgumentList	ATTR_HIBERNATION_STATE		4786028	1					
ANR	4786073	Argument	ATTR_HIBERNATION_STATE		4786028	0					
ANR	4786074	Identifier	ATTR_HIBERNATION_STATE		4786028	0					
ANR	4786075	Argument	state		4786028	1					
ANR	4786076	Identifier	state		4786028	0					
ANR	4786077	IdentifierDeclStatement	MyString states ;	296:1:7163:7178	4786028	4	True				
ANR	4786078	IdentifierDecl	states		4786028	0					
ANR	4786079	IdentifierDeclType	MyString		4786028	0					
ANR	4786080	Identifier	states		4786028	1					
ANR	4786081	ExpressionStatement	getSupportedStates ( states )	297:1:7181:7209	4786028	5	True				
ANR	4786082	CallExpression	getSupportedStates ( states )		4786028	0					
ANR	4786083	Callee	getSupportedStates		4786028	0					
ANR	4786084	Identifier	getSupportedStates		4786028	0					
ANR	4786085	ArgumentList	states		4786028	1					
ANR	4786086	Argument	states		4786028	0					
ANR	4786087	Identifier	states		4786028	0					
ANR	4786088	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"	298:4:7215:7270	4786028	6	True				
ANR	4786089	CallExpression	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"		4786028	0					
ANR	4786090	Callee	ad . Assign		4786028	0					
ANR	4786091	MemberAccess	ad . Assign		4786028	0					
ANR	4786092	Identifier	ad		4786028	0					
ANR	4786093	Identifier	Assign		4786028	1					
ANR	4786094	ArgumentList	ATTR_HIBERNATION_SUPPORTED_STATES		4786028	1					
ANR	4786095	Argument	ATTR_HIBERNATION_SUPPORTED_STATES		4786028	0					
ANR	4786096	Identifier	ATTR_HIBERNATION_SUPPORTED_STATES		4786028	0					
ANR	4786097	Argument	states		4786028	1					
ANR	4786098	Identifier	states		4786028	0					
ANR	4786099	ExpressionStatement	"ad . Assign ( ATTR_CAN_HIBERNATE , canHibernate ( ) )"	301:4:7346:7395	4786028	7	True				
ANR	4786100	CallExpression	"ad . Assign ( ATTR_CAN_HIBERNATE , canHibernate ( ) )"		4786028	0					
ANR	4786101	Callee	ad . Assign		4786028	0					
ANR	4786102	MemberAccess	ad . Assign		4786028	0					
ANR	4786103	Identifier	ad		4786028	0					
ANR	4786104	Identifier	Assign		4786028	1					
ANR	4786105	ArgumentList	ATTR_CAN_HIBERNATE		4786028	1					
ANR	4786106	Argument	ATTR_CAN_HIBERNATE		4786028	0					
ANR	4786107	Identifier	ATTR_CAN_HIBERNATE		4786028	0					
ANR	4786108	Argument	canHibernate ( )		4786028	1					
ANR	4786109	CallExpression	canHibernate ( )		4786028	0					
ANR	4786110	Callee	canHibernate		4786028	0					
ANR	4786111	Identifier	canHibernate		4786028	0					
ANR	4786112	ArgumentList			4786028	1					
ANR	4786113	IfStatement	if ( m_primary_adapter )		4786028	8					
ANR	4786114	Condition	m_primary_adapter	305:6:7478:7494	4786028	0	True				
ANR	4786115	Identifier	m_primary_adapter		4786028	0					
ANR	4786116	CompoundStatement		20:26:777:777	4786028	1					
ANR	4786117	ExpressionStatement	m_primary_adapter -> publish ( ad )	306:2:7502:7534	4786028	0	True				
ANR	4786118	CallExpression	m_primary_adapter -> publish ( ad )		4786028	0					
ANR	4786119	Callee	m_primary_adapter -> publish		4786028	0					
ANR	4786120	PtrMemberAccess	m_primary_adapter -> publish		4786028	0					
ANR	4786121	Identifier	m_primary_adapter		4786028	0					
ANR	4786122	Identifier	publish		4786028	1					
ANR	4786123	ArgumentList	ad		4786028	1					
ANR	4786124	Argument	ad		4786028	0					
ANR	4786125	Identifier	ad		4786028	0					
ANR	4786126	ReturnType	void		4786028	1					
ANR	4786127	Identifier	HibernationManager :: publish		4786028	2					
ANR	4786128	ParameterList	ClassAd & ad		4786028	3					
ANR	4786129	Parameter	ClassAd & ad	285:30:6706:6716	4786028	0	True				
ANR	4786130	ParameterType	ClassAd &		4786028	0					
ANR	4786131	Identifier	ad		4786028	1					
ANR	4786132	CFGEntryNode	ENTRY		4786028		True				
ANR	4786133	CFGExitNode	EXIT		4786028		True				
ANR	4786134	Symbol	sleepStateToInt		4786028						
ANR	4786135	Symbol	ad		4786028						
ANR	4786136	Symbol	level		4786028						
ANR	4786137	Symbol	ATTR_HIBERNATION_SUPPORTED_STATES		4786028						
ANR	4786138	Symbol	m_primary_adapter		4786028						
ANR	4786139	Symbol	ATTR_HIBERNATION_LEVEL		4786028						
ANR	4786140	Symbol	states		4786028						
ANR	4786141	Symbol	ATTR_CAN_HIBERNATE		4786028						
ANR	4786142	Symbol	ATTR_HIBERNATION_STATE		4786028						
ANR	4786143	Symbol	m_target_state		4786028						
ANR	4786144	Symbol	sleepStateToString		4786028						
ANR	4786145	Symbol	canHibernate		4786028						
ANR	4786146	Symbol	state		4786028						
