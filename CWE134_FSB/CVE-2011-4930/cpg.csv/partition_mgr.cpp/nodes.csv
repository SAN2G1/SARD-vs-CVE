command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1969775	File	data/converged/CVE-2011-4930_htcondor/partition_mgr.cpp								
ANR	1969776	Function	PartitionManager :: PartitionManager	32:0:1113:1190							
ANR	1969777	FunctionDef	PartitionManager :: PartitionManager ()		1969776	0					
ANR	1969778	CompoundStatement		34:0:1188:1190	1969776	0					
ANR	1969779	Identifier	PartitionManager :: PartitionManager		1969776	1					
ANR	1969780	ParameterList			1969776	2					
ANR	1969781	CFGEntryNode	ENTRY		1969776		True				
ANR	1969782	CFGExitNode	EXIT		1969776		True				
ANR	1969783	Function	PartitionManager :: ~PartitionManager	37:0:1193:1385							
ANR	1969784	FunctionDef	PartitionManager :: ~PartitionManager ()		1969783	0					
ANR	1969785	CompoundStatement		38:0:1231:1385	1969783	0					
ANR	1969786	IdentifierDeclStatement	int idx ;	39:1:1234:1241	1969783	0	True				
ANR	1969787	IdentifierDecl	idx		1969783	0					
ANR	1969788	IdentifierDeclType	int		1969783	0					
ANR	1969789	Identifier	idx		1969783	1					
ANR	1969790	IdentifierDeclStatement	ClassAd * ad = NULL ;	40:1:1244:1262	1969783	1	True				
ANR	1969791	IdentifierDecl	* ad = NULL		1969783	0					
ANR	1969792	IdentifierDeclType	ClassAd *		1969783	0					
ANR	1969793	Identifier	ad		1969783	1					
ANR	1969794	AssignmentExpression	* ad = NULL		1969783	2		=			
ANR	1969795	Identifier	NULL		1969783	0					
ANR	1969796	Identifier	NULL		1969783	1					
ANR	1969797	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1969783	2					
ANR	1969798	ForInit	idx = 0 ;	42:6:1271:1278	1969783	0	True				
ANR	1969799	AssignmentExpression	idx = 0		1969783	0		=			
ANR	1969800	Identifier	idx		1969783	0					
ANR	1969801	PrimaryExpression	0		1969783	1					
ANR	1969802	Condition	idx < m_parts . length ( )	42:15:1280:1301	1969783	1	True				
ANR	1969803	RelationalExpression	idx < m_parts . length ( )		1969783	0		<			
ANR	1969804	Identifier	idx		1969783	0					
ANR	1969805	CallExpression	m_parts . length ( )		1969783	1					
ANR	1969806	Callee	m_parts . length		1969783	0					
ANR	1969807	MemberAccess	m_parts . length		1969783	0					
ANR	1969808	Identifier	m_parts		1969783	0					
ANR	1969809	Identifier	length		1969783	1					
ANR	1969810	ArgumentList			1969783	1					
ANR	1969811	PostIncDecOperationExpression	idx ++	42:39:1304:1308	1969783	2	True				
ANR	1969812	Identifier	idx		1969783	0					
ANR	1969813	IncDec	++		1969783	1					
ANR	1969814	CompoundStatement		6:1:80:80	1969783	3					
ANR	1969815	ExpressionStatement	ad = m_parts [ idx ] . detach ( )	44:2:1316:1342	1969783	0	True				
ANR	1969816	AssignmentExpression	ad = m_parts [ idx ] . detach ( )		1969783	0		=			
ANR	1969817	Identifier	ad		1969783	0					
ANR	1969818	CallExpression	m_parts [ idx ] . detach ( )		1969783	1					
ANR	1969819	Callee	m_parts [ idx ] . detach		1969783	0					
ANR	1969820	MemberAccess	m_parts [ idx ] . detach		1969783	0					
ANR	1969821	ArrayIndexing	m_parts [ idx ]		1969783	0					
ANR	1969822	Identifier	m_parts		1969783	0					
ANR	1969823	Identifier	idx		1969783	1					
ANR	1969824	Identifier	detach		1969783	1					
ANR	1969825	ArgumentList			1969783	1					
ANR	1969826	IfStatement	if ( ad != NULL )		1969783	1					
ANR	1969827	Condition	ad != NULL	45:6:1350:1359	1969783	0	True				
ANR	1969828	EqualityExpression	ad != NULL		1969783	0		!=			
ANR	1969829	Identifier	ad		1969783	0					
ANR	1969830	Identifier	NULL		1969783	1					
ANR	1969831	CompoundStatement		8:18:130:130	1969783	1					
ANR	1969832	Statement	delete	46:3:1367:1372	1969783	0	True				
ANR	1969833	ExpressionStatement	ad	46:10:1374:1376	1969783	1	True				
ANR	1969834	Identifier	ad		1969783	0					
ANR	1969835	Identifier	PartitionManager :: ~PartitionManager		1969783	1					
ANR	1969836	ParameterList			1969783	2					
ANR	1969837	CFGEntryNode	ENTRY		1969783		True				
ANR	1969838	CFGExitNode	EXIT		1969783		True				
ANR	1969839	Symbol	NULL		1969783						
ANR	1969840	Symbol	ad		1969783						
ANR	1969841	Symbol	m_parts . length		1969783						
ANR	1969842	Symbol	* m_parts		1969783						
ANR	1969843	Symbol	m_parts		1969783						
ANR	1969844	Symbol	* idx		1969783						
ANR	1969845	Symbol	idx		1969783						
ANR	1969846	Symbol	m_parts [ idx ] . detach		1969783						
ANR	1969847	Function	PartitionManager :: query_available_partitions	51:0:1388:1892							
ANR	1969848	FunctionDef	PartitionManager :: query_available_partitions (char * script)		1969847	0					
ANR	1969849	CompoundStatement		52:0:1452:1892	1969847	0					
ANR	1969850	IdentifierDeclStatement	FILE * fin = NULL ;	53:1:1455:1471	1969847	0	True				
ANR	1969851	IdentifierDecl	* fin = NULL		1969847	0					
ANR	1969852	IdentifierDeclType	FILE *		1969847	0					
ANR	1969853	Identifier	fin		1969847	1					
ANR	1969854	AssignmentExpression	* fin = NULL		1969847	2		=			
ANR	1969855	Identifier	NULL		1969847	0					
ANR	1969856	Identifier	NULL		1969847	1					
ANR	1969857	IdentifierDeclStatement	ArgList args ;	54:1:1474:1486	1969847	1	True				
ANR	1969858	IdentifierDecl	args		1969847	0					
ANR	1969859	IdentifierDeclType	ArgList		1969847	0					
ANR	1969860	Identifier	args		1969847	1					
ANR	1969861	IdentifierDeclStatement	priv_state priv ;	55:1:1489:1504	1969847	2	True				
ANR	1969862	IdentifierDecl	priv		1969847	0					
ANR	1969863	IdentifierDeclType	priv_state		1969847	0					
ANR	1969864	Identifier	priv		1969847	1					
ANR	1969865	ExpressionStatement	"dprintf ( D_ALWAYS , ""Finding available partitions with: %s\\n"" , script )"	60:1:1613:1681	1969847	3	True				
ANR	1969866	CallExpression	"dprintf ( D_ALWAYS , ""Finding available partitions with: %s\\n"" , script )"		1969847	0					
ANR	1969867	Callee	dprintf		1969847	0					
ANR	1969868	Identifier	dprintf		1969847	0					
ANR	1969869	ArgumentList	D_ALWAYS		1969847	1					
ANR	1969870	Argument	D_ALWAYS		1969847	0					
ANR	1969871	Identifier	D_ALWAYS		1969847	0					
ANR	1969872	Argument	"""Finding available partitions with: %s\\n"""		1969847	1					
ANR	1969873	PrimaryExpression	"""Finding available partitions with: %s\\n"""		1969847	0					
ANR	1969874	Argument	script		1969847	2					
ANR	1969875	Identifier	script		1969847	0					
ANR	1969876	ExpressionStatement	args . AppendArg ( script )	62:1:1685:1707	1969847	4	True				
ANR	1969877	CallExpression	args . AppendArg ( script )		1969847	0					
ANR	1969878	Callee	args . AppendArg		1969847	0					
ANR	1969879	MemberAccess	args . AppendArg		1969847	0					
ANR	1969880	Identifier	args		1969847	0					
ANR	1969881	Identifier	AppendArg		1969847	1					
ANR	1969882	ArgumentList	script		1969847	1					
ANR	1969883	Argument	script		1969847	0					
ANR	1969884	Identifier	script		1969847	0					
ANR	1969885	ExpressionStatement	priv = set_root_priv ( )	64:1:1711:1733	1969847	5	True				
ANR	1969886	AssignmentExpression	priv = set_root_priv ( )		1969847	0		=			
ANR	1969887	Identifier	priv		1969847	0					
ANR	1969888	CallExpression	set_root_priv ( )		1969847	1					
ANR	1969889	Callee	set_root_priv		1969847	0					
ANR	1969890	Identifier	set_root_priv		1969847	0					
ANR	1969891	ArgumentList			1969847	1					
ANR	1969892	ExpressionStatement	"fin = my_popen ( args , ""r"" , TRUE )"	65:1:1736:1767	1969847	6	True				
ANR	1969893	AssignmentExpression	"fin = my_popen ( args , ""r"" , TRUE )"		1969847	0		=			
ANR	1969894	Identifier	fin		1969847	0					
ANR	1969895	CallExpression	"my_popen ( args , ""r"" , TRUE )"		1969847	1					
ANR	1969896	Callee	my_popen		1969847	0					
ANR	1969897	Identifier	my_popen		1969847	0					
ANR	1969898	ArgumentList	args		1969847	1					
ANR	1969899	Argument	args		1969847	0					
ANR	1969900	Identifier	args		1969847	0					
ANR	1969901	Argument	"""r"""		1969847	1					
ANR	1969902	PrimaryExpression	"""r"""		1969847	0					
ANR	1969903	Argument	TRUE		1969847	2					
ANR	1969904	Identifier	TRUE		1969847	0					
ANR	1969905	IfStatement	if ( fin == NULL )		1969847	7					
ANR	1969906	Condition	fin == NULL	67:5:1775:1785	1969847	0	True				
ANR	1969907	EqualityExpression	fin == NULL		1969847	0		==			
ANR	1969908	Identifier	fin		1969847	0					
ANR	1969909	Identifier	NULL		1969847	1					
ANR	1969910	CompoundStatement		16:18:335:335	1969847	1					
ANR	1969911	ExpressionStatement	"EXCEPT ( ""Can't execute %s\\n"" , script )"	68:2:1792:1828	1969847	0	True				
ANR	1969912	CallExpression	"EXCEPT ( ""Can't execute %s\\n"" , script )"		1969847	0					
ANR	1969913	Callee	EXCEPT		1969847	0					
ANR	1969914	Identifier	EXCEPT		1969847	0					
ANR	1969915	ArgumentList	"""Can't execute %s\\n"""		1969847	1					
ANR	1969916	Argument	"""Can't execute %s\\n"""		1969847	0					
ANR	1969917	PrimaryExpression	"""Can't execute %s\\n"""		1969847	0					
ANR	1969918	Argument	script		1969847	1					
ANR	1969919	Identifier	script		1969847	0					
ANR	1969920	ExpressionStatement	read_partitions ( fin )	71:1:1835:1855	1969847	8	True				
ANR	1969921	CallExpression	read_partitions ( fin )		1969847	0					
ANR	1969922	Callee	read_partitions		1969847	0					
ANR	1969923	Identifier	read_partitions		1969847	0					
ANR	1969924	ArgumentList	fin		1969847	1					
ANR	1969925	Argument	fin		1969847	0					
ANR	1969926	Identifier	fin		1969847	0					
ANR	1969927	ExpressionStatement	my_pclose ( fin )	73:1:1859:1873	1969847	9	True				
ANR	1969928	CallExpression	my_pclose ( fin )		1969847	0					
ANR	1969929	Callee	my_pclose		1969847	0					
ANR	1969930	Identifier	my_pclose		1969847	0					
ANR	1969931	ArgumentList	fin		1969847	1					
ANR	1969932	Argument	fin		1969847	0					
ANR	1969933	Identifier	fin		1969847	0					
ANR	1969934	ExpressionStatement	set_priv ( priv )	74:1:1876:1890	1969847	10	True				
ANR	1969935	CallExpression	set_priv ( priv )		1969847	0					
ANR	1969936	Callee	set_priv		1969847	0					
ANR	1969937	Identifier	set_priv		1969847	0					
ANR	1969938	ArgumentList	priv		1969847	1					
ANR	1969939	Argument	priv		1969847	0					
ANR	1969940	Identifier	priv		1969847	0					
ANR	1969941	ReturnType	void		1969847	1					
ANR	1969942	Identifier	PartitionManager :: query_available_partitions		1969847	2					
ANR	1969943	ParameterList	char * script		1969847	3					
ANR	1969944	Parameter	char * script	51:50:1438:1449	1969847	0	True				
ANR	1969945	ParameterType	char *		1969847	0					
ANR	1969946	Identifier	script		1969847	1					
ANR	1969947	CFGEntryNode	ENTRY		1969847		True				
ANR	1969948	CFGExitNode	EXIT		1969847		True				
ANR	1969949	Symbol	args		1969847						
ANR	1969950	Symbol	NULL		1969847						
ANR	1969951	Symbol	D_ALWAYS		1969847						
ANR	1969952	Symbol	TRUE		1969847						
ANR	1969953	Symbol	fin		1969847						
ANR	1969954	Symbol	set_root_priv		1969847						
ANR	1969955	Symbol	priv		1969847						
ANR	1969956	Symbol	my_popen		1969847						
ANR	1969957	Symbol	script		1969847						
ANR	1969958	Function	PartitionManager :: read_partitions	77:0:1895:3228							
ANR	1969959	FunctionDef	PartitionManager :: read_partitions (FILE * fin)		1969958	0					
ANR	1969960	CompoundStatement		78:0:1945:3228	1969958	0					
ANR	1969961	IdentifierDeclStatement	int idx ;	79:1:1948:1955	1969958	0	True				
ANR	1969962	IdentifierDecl	idx		1969958	0					
ANR	1969963	IdentifierDeclType	int		1969958	0					
ANR	1969964	Identifier	idx		1969958	1					
ANR	1969965	IdentifierDeclStatement	ClassAd * ad = NULL ;	80:1:1958:1976	1969958	1	True				
ANR	1969966	IdentifierDecl	* ad = NULL		1969958	0					
ANR	1969967	IdentifierDeclType	ClassAd *		1969958	0					
ANR	1969968	Identifier	ad		1969958	1					
ANR	1969969	AssignmentExpression	* ad = NULL		1969958	2		=			
ANR	1969970	Identifier	NULL		1969958	0					
ANR	1969971	Identifier	NULL		1969958	1					
ANR	1969972	IdentifierDeclStatement	"int eof , error , empty ;"	81:1:1979:2000	1969958	2	True				
ANR	1969973	IdentifierDecl	eof		1969958	0					
ANR	1969974	IdentifierDeclType	int		1969958	0					
ANR	1969975	Identifier	eof		1969958	1					
ANR	1969976	IdentifierDecl	error		1969958	1					
ANR	1969977	IdentifierDeclType	int		1969958	0					
ANR	1969978	Identifier	error		1969958	1					
ANR	1969979	IdentifierDecl	empty		1969958	2					
ANR	1969980	IdentifierDeclType	int		1969958	0					
ANR	1969981	Identifier	empty		1969958	1					
ANR	1969982	IdentifierDeclStatement	"const char * classad_delimitor = ""---\\n"" ;"	82:1:2003:2042	1969958	3	True				
ANR	1969983	IdentifierDecl	"* classad_delimitor = ""---\\n"""		1969958	0					
ANR	1969984	IdentifierDeclType	const char *		1969958	0					
ANR	1969985	Identifier	classad_delimitor		1969958	1					
ANR	1969986	AssignmentExpression	"* classad_delimitor = ""---\\n"""		1969958	2		=			
ANR	1969987	Identifier	classad_delimitor		1969958	0					
ANR	1969988	PrimaryExpression	"""---\\n"""		1969958	1					
ANR	1969989	IdentifierDeclStatement	MyString tmp_str ;	83:1:2045:2061	1969958	4	True				
ANR	1969990	IdentifierDecl	tmp_str		1969958	0					
ANR	1969991	IdentifierDeclType	MyString		1969958	0					
ANR	1969992	Identifier	tmp_str		1969958	1					
ANR	1969993	IdentifierDeclStatement	bool tmp_bool = true ;	84:1:2064:2084	1969958	5	True				
ANR	1969994	IdentifierDecl	tmp_bool = true		1969958	0					
ANR	1969995	IdentifierDeclType	bool		1969958	0					
ANR	1969996	Identifier	tmp_bool		1969958	1					
ANR	1969997	AssignmentExpression	tmp_bool = true		1969958	2		=			
ANR	1969998	Identifier	true		1969958	0					
ANR	1969999	Identifier	true		1969958	1					
ANR	1970000	ForStatement	for ( idx = 0 ; idx < m_parts . getsize ( ) ; idx ++ )		1969958	6					
ANR	1970001	ForInit	idx = 0 ;	89:6:2214:2221	1969958	0	True				
ANR	1970002	AssignmentExpression	idx = 0		1969958	0		=			
ANR	1970003	Identifier	idx		1969958	0					
ANR	1970004	PrimaryExpression	0		1969958	1					
ANR	1970005	Condition	idx < m_parts . getsize ( )	89:15:2223:2245	1969958	1	True				
ANR	1970006	RelationalExpression	idx < m_parts . getsize ( )		1969958	0		<			
ANR	1970007	Identifier	idx		1969958	0					
ANR	1970008	CallExpression	m_parts . getsize ( )		1969958	1					
ANR	1970009	Callee	m_parts . getsize		1969958	0					
ANR	1970010	MemberAccess	m_parts . getsize		1969958	0					
ANR	1970011	Identifier	m_parts		1969958	0					
ANR	1970012	Identifier	getsize		1969958	1					
ANR	1970013	ArgumentList			1969958	1					
ANR	1970014	PostIncDecOperationExpression	idx ++	89:40:2248:2252	1969958	2	True				
ANR	1970015	Identifier	idx		1969958	0					
ANR	1970016	IncDec	++		1969958	1					
ANR	1970017	CompoundStatement		13:1:310:310	1969958	3					
ANR	1970018	ExpressionStatement	ad = m_parts [ idx ] . detach ( )	91:2:2260:2286	1969958	0	True				
ANR	1970019	AssignmentExpression	ad = m_parts [ idx ] . detach ( )		1969958	0		=			
ANR	1970020	Identifier	ad		1969958	0					
ANR	1970021	CallExpression	m_parts [ idx ] . detach ( )		1969958	1					
ANR	1970022	Callee	m_parts [ idx ] . detach		1969958	0					
ANR	1970023	MemberAccess	m_parts [ idx ] . detach		1969958	0					
ANR	1970024	ArrayIndexing	m_parts [ idx ]		1969958	0					
ANR	1970025	Identifier	m_parts		1969958	0					
ANR	1970026	Identifier	idx		1969958	1					
ANR	1970027	Identifier	detach		1969958	1					
ANR	1970028	ArgumentList			1969958	1					
ANR	1970029	Statement	delete	92:2:2290:2295	1969958	1	True				
ANR	1970030	ExpressionStatement	ad	92:9:2297:2299	1969958	2	True				
ANR	1970031	Identifier	ad		1969958	0					
ANR	1970032	ExpressionStatement	m_parts . truncate ( 0 )	94:1:2305:2324	1969958	7	True				
ANR	1970033	CallExpression	m_parts . truncate ( 0 )		1969958	0					
ANR	1970034	Callee	m_parts . truncate		1969958	0					
ANR	1970035	MemberAccess	m_parts . truncate		1969958	0					
ANR	1970036	Identifier	m_parts		1969958	0					
ANR	1970037	Identifier	truncate		1969958	1					
ANR	1970038	ArgumentList	0		1969958	1					
ANR	1970039	Argument	0		1969958	0					
ANR	1970040	PrimaryExpression	0		1969958	0					
ANR	1970041	ExpressionStatement	idx = 0	96:1:2328:2335	1969958	8	True				
ANR	1970042	AssignmentExpression	idx = 0		1969958	0		=			
ANR	1970043	Identifier	idx		1969958	0					
ANR	1970044	PrimaryExpression	0		1969958	1					
ANR	1970045	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	97:1:2338:2393	1969958	9	True				
ANR	1970046	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		1969958	0		=			
ANR	1970047	Identifier	ad		1969958	0					
ANR	1970048	Expression	"fin , classad_delimitor , eof , error , empty"		1969958	1					
ANR	1970049	Identifier	fin		1969958	0					
ANR	1970050	Expression	"classad_delimitor , eof , error , empty"		1969958	1					
ANR	1970051	Identifier	classad_delimitor		1969958	0					
ANR	1970052	Expression	"eof , error , empty"		1969958	1					
ANR	1970053	Identifier	eof		1969958	0					
ANR	1970054	Expression	"error , empty"		1969958	1					
ANR	1970055	Identifier	error		1969958	0					
ANR	1970056	Identifier	empty		1969958	1					
ANR	1970057	WhileStatement	while ( ! empty )		1969958	10					
ANR	1970058	Condition	! empty	98:7:2402:2407	1969958	0	True				
ANR	1970059	UnaryOperationExpression	! empty		1969958	0					
ANR	1970060	UnaryOperator	!		1969958	0					
ANR	1970061	Identifier	empty		1969958	1					
ANR	1970062	CompoundStatement		22:1:465:465	1969958	1					
ANR	1970063	ExpressionStatement	m_parts [ idx ] . attach ( ad )	100:2:2415:2438	1969958	0	True				
ANR	1970064	CallExpression	m_parts [ idx ] . attach ( ad )		1969958	0					
ANR	1970065	Callee	m_parts [ idx ] . attach		1969958	0					
ANR	1970066	MemberAccess	m_parts [ idx ] . attach		1969958	0					
ANR	1970067	ArrayIndexing	m_parts [ idx ]		1969958	0					
ANR	1970068	Identifier	m_parts		1969958	0					
ANR	1970069	Identifier	idx		1969958	1					
ANR	1970070	Identifier	attach		1969958	1					
ANR	1970071	ArgumentList	ad		1969958	1					
ANR	1970072	Argument	ad		1969958	0					
ANR	1970073	Identifier	ad		1969958	0					
ANR	1970074	ExpressionStatement	tmp_str = m_parts [ idx ] . get_name ( )	101:2:2442:2475	1969958	1	True				
ANR	1970075	AssignmentExpression	tmp_str = m_parts [ idx ] . get_name ( )		1969958	0		=			
ANR	1970076	Identifier	tmp_str		1969958	0					
ANR	1970077	CallExpression	m_parts [ idx ] . get_name ( )		1969958	1					
ANR	1970078	Callee	m_parts [ idx ] . get_name		1969958	0					
ANR	1970079	MemberAccess	m_parts [ idx ] . get_name		1969958	0					
ANR	1970080	ArrayIndexing	m_parts [ idx ]		1969958	0					
ANR	1970081	Identifier	m_parts		1969958	0					
ANR	1970082	Identifier	idx		1969958	1					
ANR	1970083	Identifier	get_name		1969958	1					
ANR	1970084	ArgumentList			1969958	1					
ANR	1970085	SwitchStatement	switch ( m_parts [ idx ] . get_pstate ( ) )		1969958	2					
ANR	1970086	Condition	m_parts [ idx ] . get_pstate ( )	107:9:2716:2740	1969958	0	True				
ANR	1970087	CallExpression	m_parts [ idx ] . get_pstate ( )		1969958	0					
ANR	1970088	Callee	m_parts [ idx ] . get_pstate		1969958	0					
ANR	1970089	MemberAccess	m_parts [ idx ] . get_pstate		1969958	0					
ANR	1970090	ArrayIndexing	m_parts [ idx ]		1969958	0					
ANR	1970091	Identifier	m_parts		1969958	0					
ANR	1970092	Identifier	idx		1969958	1					
ANR	1970093	Identifier	get_pstate		1969958	1					
ANR	1970094	ArgumentList			1969958	1					
ANR	1970095	CompoundStatement		30:36:797:797	1969958	1					
ANR	1970096	Label	case BOOTED :	108:3:2748:2759	1969958	0	True				
ANR	1970097	Identifier	BOOTED		1969958	0					
ANR	1970098	IfStatement	"if ( m_assigned . lookup ( tmp_str , tmp_bool ) == 0 )"		1969958	1					
ANR	1970099	Condition	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"	109:8:2769:2809	1969958	0	True				
ANR	1970100	EqualityExpression	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"		1969958	0		==			
ANR	1970101	CallExpression	"m_assigned . lookup ( tmp_str , tmp_bool )"		1969958	0					
ANR	1970102	Callee	m_assigned . lookup		1969958	0					
ANR	1970103	MemberAccess	m_assigned . lookup		1969958	0					
ANR	1970104	Identifier	m_assigned		1969958	0					
ANR	1970105	Identifier	lookup		1969958	1					
ANR	1970106	ArgumentList	tmp_str		1969958	1					
ANR	1970107	Argument	tmp_str		1969958	0					
ANR	1970108	Identifier	tmp_str		1969958	0					
ANR	1970109	Argument	tmp_bool		1969958	1					
ANR	1970110	Identifier	tmp_bool		1969958	0					
ANR	1970111	PrimaryExpression	0		1969958	1					
ANR	1970112	CompoundStatement		32:51:866:866	1969958	1					
ANR	1970113	ExpressionStatement	m_parts [ idx ] . set_pstate ( ASSIGNED )	110:5:2819:2852	1969958	0	True				
ANR	1970114	CallExpression	m_parts [ idx ] . set_pstate ( ASSIGNED )		1969958	0					
ANR	1970115	Callee	m_parts [ idx ] . set_pstate		1969958	0					
ANR	1970116	MemberAccess	m_parts [ idx ] . set_pstate		1969958	0					
ANR	1970117	ArrayIndexing	m_parts [ idx ]		1969958	0					
ANR	1970118	Identifier	m_parts		1969958	0					
ANR	1970119	Identifier	idx		1969958	1					
ANR	1970120	Identifier	set_pstate		1969958	1					
ANR	1970121	ArgumentList	ASSIGNED		1969958	1					
ANR	1970122	Argument	ASSIGNED		1969958	0					
ANR	1970123	Identifier	ASSIGNED		1969958	0					
ANR	1970124	BreakStatement	break ;	112:4:2864:2869	1969958	2	True				
ANR	1970125	Label	case BACKED :	113:3:2874:2885	1969958	3	True				
ANR	1970126	Identifier	BACKED		1969958	0					
ANR	1970127	IfStatement	"if ( m_assigned . lookup ( tmp_str , tmp_bool ) == 0 )"		1969958	4					
ANR	1970128	Condition	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"	114:8:2895:2935	1969958	0	True				
ANR	1970129	EqualityExpression	"m_assigned . lookup ( tmp_str , tmp_bool ) == 0"		1969958	0		==			
ANR	1970130	CallExpression	"m_assigned . lookup ( tmp_str , tmp_bool )"		1969958	0					
ANR	1970131	Callee	m_assigned . lookup		1969958	0					
ANR	1970132	MemberAccess	m_assigned . lookup		1969958	0					
ANR	1970133	Identifier	m_assigned		1969958	0					
ANR	1970134	Identifier	lookup		1969958	1					
ANR	1970135	ArgumentList	tmp_str		1969958	1					
ANR	1970136	Argument	tmp_str		1969958	0					
ANR	1970137	Identifier	tmp_str		1969958	0					
ANR	1970138	Argument	tmp_bool		1969958	1					
ANR	1970139	Identifier	tmp_bool		1969958	0					
ANR	1970140	PrimaryExpression	0		1969958	1					
ANR	1970141	CompoundStatement		37:51:992:992	1969958	1					
ANR	1970142	ExpressionStatement	m_assigned . remove ( tmp_str )	115:5:2945:2971	1969958	0	True				
ANR	1970143	CallExpression	m_assigned . remove ( tmp_str )		1969958	0					
ANR	1970144	Callee	m_assigned . remove		1969958	0					
ANR	1970145	MemberAccess	m_assigned . remove		1969958	0					
ANR	1970146	Identifier	m_assigned		1969958	0					
ANR	1970147	Identifier	remove		1969958	1					
ANR	1970148	ArgumentList	tmp_str		1969958	1					
ANR	1970149	Argument	tmp_str		1969958	0					
ANR	1970150	Identifier	tmp_str		1969958	0					
ANR	1970151	BreakStatement	break ;	117:4:2983:2988	1969958	5	True				
ANR	1970152	Label	default :	118:3:2993:3000	1969958	6	True				
ANR	1970153	Identifier	default		1969958	0					
ANR	1970154	BreakStatement	break ;	120:4:3024:3029	1969958	7	True				
ANR	1970155	ExpressionStatement	idx ++	124:2:3071:3076	1969958	3	True				
ANR	1970156	PostIncDecOperationExpression	idx ++		1969958	0					
ANR	1970157	Identifier	idx		1969958	0					
ANR	1970158	IncDec	++		1969958	1					
ANR	1970159	ExpressionStatement	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"	126:2:3081:3136	1969958	4	True				
ANR	1970160	AssignmentExpression	"ad = new ClassAd ( fin , classad_delimitor , eof , error , empty )"		1969958	0		=			
ANR	1970161	Identifier	ad		1969958	0					
ANR	1970162	Expression	"fin , classad_delimitor , eof , error , empty"		1969958	1					
ANR	1970163	Identifier	fin		1969958	0					
ANR	1970164	Expression	"classad_delimitor , eof , error , empty"		1969958	1					
ANR	1970165	Identifier	classad_delimitor		1969958	0					
ANR	1970166	Expression	"eof , error , empty"		1969958	1					
ANR	1970167	Identifier	eof		1969958	0					
ANR	1970168	Expression	"error , empty"		1969958	1					
ANR	1970169	Identifier	error		1969958	0					
ANR	1970170	Identifier	empty		1969958	1					
ANR	1970171	Statement	delete	130:1:3216:3221	1969958	11	True				
ANR	1970172	ExpressionStatement	ad	130:7:3222:3226	1969958	12	True				
ANR	1970173	Identifier	ad		1969958	0					
ANR	1970174	ReturnType	void		1969958	1					
ANR	1970175	Identifier	PartitionManager :: read_partitions		1969958	2					
ANR	1970176	ParameterList	FILE * fin		1969958	3					
ANR	1970177	Parameter	FILE * fin	77:39:1934:1942	1969958	0	True				
ANR	1970178	ParameterType	FILE *		1969958	0					
ANR	1970179	Identifier	fin		1969958	1					
ANR	1970180	CFGEntryNode	ENTRY		1969958		True				
ANR	1970181	CFGExitNode	EXIT		1969958		True				
ANR	1970182	Symbol	NULL		1969958						
ANR	1970183	Symbol	ad		1969958						
ANR	1970184	Symbol	tmp_str		1969958						
ANR	1970185	Symbol	* m_parts		1969958						
ANR	1970186	Symbol	tmp_bool		1969958						
ANR	1970187	Symbol	fin		1969958						
ANR	1970188	Symbol	classad_delimitor		1969958						
ANR	1970189	Symbol	error		1969958						
ANR	1970190	Symbol	empty		1969958						
ANR	1970191	Symbol	m_parts [ idx ] . get_name		1969958						
ANR	1970192	Symbol	m_parts		1969958						
ANR	1970193	Symbol	m_assigned . lookup		1969958						
ANR	1970194	Symbol	m_parts . getsize		1969958						
ANR	1970195	Symbol	ASSIGNED		1969958						
ANR	1970196	Symbol	true		1969958						
ANR	1970197	Symbol	* idx		1969958						
ANR	1970198	Symbol	idx		1969958						
ANR	1970199	Symbol	eof		1969958						
ANR	1970200	Symbol	m_parts [ idx ] . detach		1969958						
ANR	1970201	Symbol	m_parts [ idx ] . get_pstate		1969958						
ANR	1970202	Symbol	m_assigned		1969958						
ANR	1970203	Function	PartitionManager :: partition_exists	134:0:3279:3475							
ANR	1970204	FunctionDef	PartitionManager :: partition_exists (MyString name)		1970203	0					
ANR	1970205	CompoundStatement		135:0:3334:3475	1970203	0					
ANR	1970206	IdentifierDeclStatement	int idx ;	136:1:3337:3344	1970203	0	True				
ANR	1970207	IdentifierDecl	idx		1970203	0					
ANR	1970208	IdentifierDeclType	int		1970203	0					
ANR	1970209	Identifier	idx		1970203	1					
ANR	1970210	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1970203	1					
ANR	1970211	ForInit	idx = 0 ;	138:6:3353:3360	1970203	0	True				
ANR	1970212	AssignmentExpression	idx = 0		1970203	0		=			
ANR	1970213	Identifier	idx		1970203	0					
ANR	1970214	PrimaryExpression	0		1970203	1					
ANR	1970215	Condition	idx < m_parts . length ( )	138:15:3362:3383	1970203	1	True				
ANR	1970216	RelationalExpression	idx < m_parts . length ( )		1970203	0		<			
ANR	1970217	Identifier	idx		1970203	0					
ANR	1970218	CallExpression	m_parts . length ( )		1970203	1					
ANR	1970219	Callee	m_parts . length		1970203	0					
ANR	1970220	MemberAccess	m_parts . length		1970203	0					
ANR	1970221	Identifier	m_parts		1970203	0					
ANR	1970222	Identifier	length		1970203	1					
ANR	1970223	ArgumentList			1970203	1					
ANR	1970224	PostIncDecOperationExpression	idx ++	138:39:3386:3390	1970203	2	True				
ANR	1970225	Identifier	idx		1970203	0					
ANR	1970226	IncDec	++		1970203	1					
ANR	1970227	CompoundStatement		4:46:58:58	1970203	3					
ANR	1970228	IfStatement	if ( m_parts [ idx ] . get_name ( ) == name )		1970203	0					
ANR	1970229	Condition	m_parts [ idx ] . get_name ( ) == name	139:6:3401:3431	1970203	0	True				
ANR	1970230	EqualityExpression	m_parts [ idx ] . get_name ( ) == name		1970203	0		==			
ANR	1970231	CallExpression	m_parts [ idx ] . get_name ( )		1970203	0					
ANR	1970232	Callee	m_parts [ idx ] . get_name		1970203	0					
ANR	1970233	MemberAccess	m_parts [ idx ] . get_name		1970203	0					
ANR	1970234	ArrayIndexing	m_parts [ idx ]		1970203	0					
ANR	1970235	Identifier	m_parts		1970203	0					
ANR	1970236	Identifier	idx		1970203	1					
ANR	1970237	Identifier	get_name		1970203	1					
ANR	1970238	ArgumentList			1970203	1					
ANR	1970239	Identifier	name		1970203	1					
ANR	1970240	CompoundStatement		5:39:99:99	1970203	1					
ANR	1970241	ReturnStatement	return true ;	140:3:3439:3450	1970203	0	True				
ANR	1970242	Identifier	true		1970203	0					
ANR	1970243	ReturnStatement	return false ;	144:1:3461:3473	1970203	2	True				
ANR	1970244	Identifier	false		1970203	0					
ANR	1970245	ReturnType	bool		1970203	1					
ANR	1970246	Identifier	PartitionManager :: partition_exists		1970203	2					
ANR	1970247	ParameterList	MyString name		1970203	3					
ANR	1970248	Parameter	MyString name	134:40:3319:3331	1970203	0	True				
ANR	1970249	ParameterType	MyString		1970203	0					
ANR	1970250	Identifier	name		1970203	1					
ANR	1970251	CFGEntryNode	ENTRY		1970203		True				
ANR	1970252	CFGExitNode	EXIT		1970203		True				
ANR	1970253	Symbol	m_parts . length		1970203						
ANR	1970254	Symbol	* m_parts		1970203						
ANR	1970255	Symbol	m_parts [ idx ] . get_name		1970203						
ANR	1970256	Symbol	m_parts		1970203						
ANR	1970257	Symbol	name		1970203						
ANR	1970258	Symbol	* idx		1970203						
ANR	1970259	Symbol	true		1970203						
ANR	1970260	Symbol	false		1970203						
ANR	1970261	Symbol	idx		1970203						
ANR	1970262	Function	PartitionManager :: set_partition_backer	147:0:3478:3816							
ANR	1970263	FunctionDef	"PartitionManager :: set_partition_backer (MyString part_name , MyString backer)"		1970262	0					
ANR	1970264	CompoundStatement		148:0:3559:3816	1970262	0					
ANR	1970265	IdentifierDeclStatement	int idx ;	149:1:3562:3569	1970262	0	True				
ANR	1970266	IdentifierDecl	idx		1970262	0					
ANR	1970267	IdentifierDeclType	int		1970262	0					
ANR	1970268	Identifier	idx		1970262	1					
ANR	1970269	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1970262	1					
ANR	1970270	ForInit	idx = 0 ;	151:6:3578:3585	1970262	0	True				
ANR	1970271	AssignmentExpression	idx = 0		1970262	0		=			
ANR	1970272	Identifier	idx		1970262	0					
ANR	1970273	PrimaryExpression	0		1970262	1					
ANR	1970274	Condition	idx < m_parts . length ( )	151:15:3587:3608	1970262	1	True				
ANR	1970275	RelationalExpression	idx < m_parts . length ( )		1970262	0		<			
ANR	1970276	Identifier	idx		1970262	0					
ANR	1970277	CallExpression	m_parts . length ( )		1970262	1					
ANR	1970278	Callee	m_parts . length		1970262	0					
ANR	1970279	MemberAccess	m_parts . length		1970262	0					
ANR	1970280	Identifier	m_parts		1970262	0					
ANR	1970281	Identifier	length		1970262	1					
ANR	1970282	ArgumentList			1970262	1					
ANR	1970283	PostIncDecOperationExpression	idx ++	151:39:3611:3615	1970262	2	True				
ANR	1970284	Identifier	idx		1970262	0					
ANR	1970285	IncDec	++		1970262	1					
ANR	1970286	CompoundStatement		4:46:58:58	1970262	3					
ANR	1970287	IfStatement	if ( m_parts [ idx ] . get_name ( ) == part_name )		1970262	0					
ANR	1970288	Condition	m_parts [ idx ] . get_name ( ) == part_name	152:6:3626:3661	1970262	0	True				
ANR	1970289	EqualityExpression	m_parts [ idx ] . get_name ( ) == part_name		1970262	0		==			
ANR	1970290	CallExpression	m_parts [ idx ] . get_name ( )		1970262	0					
ANR	1970291	Callee	m_parts [ idx ] . get_name		1970262	0					
ANR	1970292	MemberAccess	m_parts [ idx ] . get_name		1970262	0					
ANR	1970293	ArrayIndexing	m_parts [ idx ]		1970262	0					
ANR	1970294	Identifier	m_parts		1970262	0					
ANR	1970295	Identifier	idx		1970262	1					
ANR	1970296	Identifier	get_name		1970262	1					
ANR	1970297	ArgumentList			1970262	1					
ANR	1970298	Identifier	part_name		1970262	1					
ANR	1970299	CompoundStatement		5:44:104:104	1970262	1					
ANR	1970300	ExpressionStatement	m_parts [ idx ] . set_backer ( backer )	153:3:3669:3700	1970262	0	True				
ANR	1970301	CallExpression	m_parts [ idx ] . set_backer ( backer )		1970262	0					
ANR	1970302	Callee	m_parts [ idx ] . set_backer		1970262	0					
ANR	1970303	MemberAccess	m_parts [ idx ] . set_backer		1970262	0					
ANR	1970304	ArrayIndexing	m_parts [ idx ]		1970262	0					
ANR	1970305	Identifier	m_parts		1970262	0					
ANR	1970306	Identifier	idx		1970262	1					
ANR	1970307	Identifier	set_backer		1970262	1					
ANR	1970308	ArgumentList	backer		1970262	1					
ANR	1970309	Argument	backer		1970262	0					
ANR	1970310	Identifier	backer		1970262	0					
ANR	1970311	ExpressionStatement	m_parts [ idx ] . set_pstate ( BACKED )	155:3:3765:3796	1970262	1	True				
ANR	1970312	CallExpression	m_parts [ idx ] . set_pstate ( BACKED )		1970262	0					
ANR	1970313	Callee	m_parts [ idx ] . set_pstate		1970262	0					
ANR	1970314	MemberAccess	m_parts [ idx ] . set_pstate		1970262	0					
ANR	1970315	ArrayIndexing	m_parts [ idx ]		1970262	0					
ANR	1970316	Identifier	m_parts		1970262	0					
ANR	1970317	Identifier	idx		1970262	1					
ANR	1970318	Identifier	set_pstate		1970262	1					
ANR	1970319	ArgumentList	BACKED		1970262	1					
ANR	1970320	Argument	BACKED		1970262	0					
ANR	1970321	Identifier	BACKED		1970262	0					
ANR	1970322	ReturnStatement	return ;	156:3:3801:3807	1970262	2	True				
ANR	1970323	ReturnType	void		1970262	1					
ANR	1970324	Identifier	PartitionManager :: set_partition_backer		1970262	2					
ANR	1970325	ParameterList	"MyString part_name , MyString backer"		1970262	3					
ANR	1970326	Parameter	MyString part_name	147:44:3522:3539	1970262	0	True				
ANR	1970327	ParameterType	MyString		1970262	0					
ANR	1970328	Identifier	part_name		1970262	1					
ANR	1970329	Parameter	MyString backer	147:64:3542:3556	1970262	1	True				
ANR	1970330	ParameterType	MyString		1970262	0					
ANR	1970331	Identifier	backer		1970262	1					
ANR	1970332	CFGEntryNode	ENTRY		1970262		True				
ANR	1970333	CFGExitNode	EXIT		1970262		True				
ANR	1970334	Symbol	m_parts . length		1970262						
ANR	1970335	Symbol	* m_parts		1970262						
ANR	1970336	Symbol	m_parts [ idx ] . get_name		1970262						
ANR	1970337	Symbol	backer		1970262						
ANR	1970338	Symbol	m_parts		1970262						
ANR	1970339	Symbol	BACKED		1970262						
ANR	1970340	Symbol	* idx		1970262						
ANR	1970341	Symbol	idx		1970262						
ANR	1970342	Symbol	part_name		1970262						
ANR	1970343	Function	PartitionManager :: get_partition_backer	161:0:3819:4074							
ANR	1970344	FunctionDef	PartitionManager :: get_partition_backer (MyString part_name)		1970343	0					
ANR	1970345	CompoundStatement		162:0:3887:4074	1970343	0					
ANR	1970346	IdentifierDeclStatement	int idx ;	163:1:3890:3897	1970343	0	True				
ANR	1970347	IdentifierDecl	idx		1970343	0					
ANR	1970348	IdentifierDeclType	int		1970343	0					
ANR	1970349	Identifier	idx		1970343	1					
ANR	1970350	IdentifierDeclStatement	"MyString none = """" ;"	164:1:3900:3918	1970343	1	True				
ANR	1970351	IdentifierDecl	"none = """""		1970343	0					
ANR	1970352	IdentifierDeclType	MyString		1970343	0					
ANR	1970353	Identifier	none		1970343	1					
ANR	1970354	AssignmentExpression	"none = """""		1970343	2		=			
ANR	1970355	Identifier	none		1970343	0					
ANR	1970356	PrimaryExpression	""""""		1970343	1					
ANR	1970357	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1970343	2					
ANR	1970358	ForInit	idx = 0 ;	166:6:3927:3934	1970343	0	True				
ANR	1970359	AssignmentExpression	idx = 0		1970343	0		=			
ANR	1970360	Identifier	idx		1970343	0					
ANR	1970361	PrimaryExpression	0		1970343	1					
ANR	1970362	Condition	idx < m_parts . length ( )	166:15:3936:3957	1970343	1	True				
ANR	1970363	RelationalExpression	idx < m_parts . length ( )		1970343	0		<			
ANR	1970364	Identifier	idx		1970343	0					
ANR	1970365	CallExpression	m_parts . length ( )		1970343	1					
ANR	1970366	Callee	m_parts . length		1970343	0					
ANR	1970367	MemberAccess	m_parts . length		1970343	0					
ANR	1970368	Identifier	m_parts		1970343	0					
ANR	1970369	Identifier	length		1970343	1					
ANR	1970370	ArgumentList			1970343	1					
ANR	1970371	PostIncDecOperationExpression	idx ++	166:39:3960:3964	1970343	2	True				
ANR	1970372	Identifier	idx		1970343	0					
ANR	1970373	IncDec	++		1970343	1					
ANR	1970374	CompoundStatement		5:46:79:79	1970343	3					
ANR	1970375	IfStatement	if ( m_parts [ idx ] . get_name ( ) == part_name )		1970343	0					
ANR	1970376	Condition	m_parts [ idx ] . get_name ( ) == part_name	167:6:3975:4010	1970343	0	True				
ANR	1970377	EqualityExpression	m_parts [ idx ] . get_name ( ) == part_name		1970343	0		==			
ANR	1970378	CallExpression	m_parts [ idx ] . get_name ( )		1970343	0					
ANR	1970379	Callee	m_parts [ idx ] . get_name		1970343	0					
ANR	1970380	MemberAccess	m_parts [ idx ] . get_name		1970343	0					
ANR	1970381	ArrayIndexing	m_parts [ idx ]		1970343	0					
ANR	1970382	Identifier	m_parts		1970343	0					
ANR	1970383	Identifier	idx		1970343	1					
ANR	1970384	Identifier	get_name		1970343	1					
ANR	1970385	ArgumentList			1970343	1					
ANR	1970386	Identifier	part_name		1970343	1					
ANR	1970387	CompoundStatement		6:44:125:125	1970343	1					
ANR	1970388	ReturnStatement	return m_parts [ idx ] . get_backer ( ) ;	168:3:4018:4050	1970343	0	True				
ANR	1970389	CallExpression	m_parts [ idx ] . get_backer ( )		1970343	0					
ANR	1970390	Callee	m_parts [ idx ] . get_backer		1970343	0					
ANR	1970391	MemberAccess	m_parts [ idx ] . get_backer		1970343	0					
ANR	1970392	ArrayIndexing	m_parts [ idx ]		1970343	0					
ANR	1970393	Identifier	m_parts		1970343	0					
ANR	1970394	Identifier	idx		1970343	1					
ANR	1970395	Identifier	get_backer		1970343	1					
ANR	1970396	ArgumentList			1970343	1					
ANR	1970397	ReturnStatement	return none ;	172:1:4061:4072	1970343	3	True				
ANR	1970398	Identifier	none		1970343	0					
ANR	1970399	ReturnType	MyString		1970343	1					
ANR	1970400	Identifier	PartitionManager :: get_partition_backer		1970343	2					
ANR	1970401	ParameterList	MyString part_name		1970343	3					
ANR	1970402	Parameter	MyString part_name	161:48:3867:3884	1970343	0	True				
ANR	1970403	ParameterType	MyString		1970343	0					
ANR	1970404	Identifier	part_name		1970343	1					
ANR	1970405	CFGEntryNode	ENTRY		1970343		True				
ANR	1970406	CFGExitNode	EXIT		1970343		True				
ANR	1970407	Symbol	m_parts [ idx ] . get_backer		1970343						
ANR	1970408	Symbol	m_parts . length		1970343						
ANR	1970409	Symbol	m_parts [ idx ] . get_name		1970343						
ANR	1970410	Symbol	* m_parts		1970343						
ANR	1970411	Symbol	m_parts		1970343						
ANR	1970412	Symbol	* idx		1970343						
ANR	1970413	Symbol	none		1970343						
ANR	1970414	Symbol	idx		1970343						
ANR	1970415	Symbol	part_name		1970343						
ANR	1970416	Function	PartitionManager :: partition_realization	177:0:4184:4779							
ANR	1970417	FunctionDef	"PartitionManager :: partition_realization (int & tot_smp , int & tot_dual , int & tot_vn)"		1970416	0					
ANR	1970418	CompoundStatement		179:0:4273:4779	1970416	0					
ANR	1970419	IdentifierDeclStatement	int idx ;	180:1:4276:4283	1970416	0	True				
ANR	1970420	IdentifierDecl	idx		1970416	0					
ANR	1970421	IdentifierDeclType	int		1970416	0					
ANR	1970422	Identifier	idx		1970416	1					
ANR	1970423	ExpressionStatement	tot_smp = 0	182:1:4287:4298	1970416	1	True				
ANR	1970424	AssignmentExpression	tot_smp = 0		1970416	0		=			
ANR	1970425	Identifier	tot_smp		1970416	0					
ANR	1970426	PrimaryExpression	0		1970416	1					
ANR	1970427	ExpressionStatement	tot_dual = 0	183:1:4301:4313	1970416	2	True				
ANR	1970428	AssignmentExpression	tot_dual = 0		1970416	0		=			
ANR	1970429	Identifier	tot_dual		1970416	0					
ANR	1970430	PrimaryExpression	0		1970416	1					
ANR	1970431	ExpressionStatement	tot_vn = 0	184:1:4316:4326	1970416	3	True				
ANR	1970432	AssignmentExpression	tot_vn = 0		1970416	0		=			
ANR	1970433	Identifier	tot_vn		1970416	0					
ANR	1970434	PrimaryExpression	0		1970416	1					
ANR	1970435	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1970416	4					
ANR	1970436	ForInit	idx = 0 ;	186:6:4335:4342	1970416	0	True				
ANR	1970437	AssignmentExpression	idx = 0		1970416	0		=			
ANR	1970438	Identifier	idx		1970416	0					
ANR	1970439	PrimaryExpression	0		1970416	1					
ANR	1970440	Condition	idx < m_parts . length ( )	186:15:4344:4365	1970416	1	True				
ANR	1970441	RelationalExpression	idx < m_parts . length ( )		1970416	0		<			
ANR	1970442	Identifier	idx		1970416	0					
ANR	1970443	CallExpression	m_parts . length ( )		1970416	1					
ANR	1970444	Callee	m_parts . length		1970416	0					
ANR	1970445	MemberAccess	m_parts . length		1970416	0					
ANR	1970446	Identifier	m_parts		1970416	0					
ANR	1970447	Identifier	length		1970416	1					
ANR	1970448	ArgumentList			1970416	1					
ANR	1970449	PostIncDecOperationExpression	idx ++	186:39:4368:4372	1970416	2	True				
ANR	1970450	Identifier	idx		1970416	0					
ANR	1970451	IncDec	++		1970416	1					
ANR	1970452	CompoundStatement		8:46:101:101	1970416	3					
ANR	1970453	IfStatement	if ( m_parts [ idx ] . get_pstate ( ) == BACKED )		1970416	0					
ANR	1970454	Condition	m_parts [ idx ] . get_pstate ( ) == BACKED	187:6:4383:4417	1970416	0	True				
ANR	1970455	EqualityExpression	m_parts [ idx ] . get_pstate ( ) == BACKED		1970416	0		==			
ANR	1970456	CallExpression	m_parts [ idx ] . get_pstate ( )		1970416	0					
ANR	1970457	Callee	m_parts [ idx ] . get_pstate		1970416	0					
ANR	1970458	MemberAccess	m_parts [ idx ] . get_pstate		1970416	0					
ANR	1970459	ArrayIndexing	m_parts [ idx ]		1970416	0					
ANR	1970460	Identifier	m_parts		1970416	0					
ANR	1970461	Identifier	idx		1970416	1					
ANR	1970462	Identifier	get_pstate		1970416	1					
ANR	1970463	ArgumentList			1970416	1					
ANR	1970464	Identifier	BACKED		1970416	1					
ANR	1970465	CompoundStatement		9:43:146:146	1970416	1					
ANR	1970466	SwitchStatement	switch ( m_parts [ idx ] . get_pkind ( ) )		1970416	0					
ANR	1970467	Condition	m_parts [ idx ] . get_pkind ( )	188:10:4432:4455	1970416	0	True				
ANR	1970468	CallExpression	m_parts [ idx ] . get_pkind ( )		1970416	0					
ANR	1970469	Callee	m_parts [ idx ] . get_pkind		1970416	0					
ANR	1970470	MemberAccess	m_parts [ idx ] . get_pkind		1970416	0					
ANR	1970471	ArrayIndexing	m_parts [ idx ]		1970416	0					
ANR	1970472	Identifier	m_parts		1970416	0					
ANR	1970473	Identifier	idx		1970416	1					
ANR	1970474	Identifier	get_pkind		1970416	1					
ANR	1970475	ArgumentList			1970416	1					
ANR	1970476	CompoundStatement		10:36:184:184	1970416	1					
ANR	1970477	Label	case SMP :	189:4:4464:4472	1970416	0	True				
ANR	1970478	Identifier	SMP		1970416	0					
ANR	1970479	ExpressionStatement	tot_smp += m_parts [ idx ] . get_size ( )	190:5:4479:4513	1970416	1	True				
ANR	1970480	AssignmentExpression	tot_smp += m_parts [ idx ] . get_size ( )		1970416	0		+=			
ANR	1970481	Identifier	tot_smp		1970416	0					
ANR	1970482	CallExpression	m_parts [ idx ] . get_size ( )		1970416	1					
ANR	1970483	Callee	m_parts [ idx ] . get_size		1970416	0					
ANR	1970484	MemberAccess	m_parts [ idx ] . get_size		1970416	0					
ANR	1970485	ArrayIndexing	m_parts [ idx ]		1970416	0					
ANR	1970486	Identifier	m_parts		1970416	0					
ANR	1970487	Identifier	idx		1970416	1					
ANR	1970488	Identifier	get_size		1970416	1					
ANR	1970489	ArgumentList			1970416	1					
ANR	1970490	BreakStatement	break ;	191:5:4520:4525	1970416	2	True				
ANR	1970491	Label	case DUAL :	193:4:4532:4541	1970416	3	True				
ANR	1970492	Identifier	DUAL		1970416	0					
ANR	1970493	ExpressionStatement	tot_dual += m_parts [ idx ] . get_size ( )	194:5:4548:4583	1970416	4	True				
ANR	1970494	AssignmentExpression	tot_dual += m_parts [ idx ] . get_size ( )		1970416	0		+=			
ANR	1970495	Identifier	tot_dual		1970416	0					
ANR	1970496	CallExpression	m_parts [ idx ] . get_size ( )		1970416	1					
ANR	1970497	Callee	m_parts [ idx ] . get_size		1970416	0					
ANR	1970498	MemberAccess	m_parts [ idx ] . get_size		1970416	0					
ANR	1970499	ArrayIndexing	m_parts [ idx ]		1970416	0					
ANR	1970500	Identifier	m_parts		1970416	0					
ANR	1970501	Identifier	idx		1970416	1					
ANR	1970502	Identifier	get_size		1970416	1					
ANR	1970503	ArgumentList			1970416	1					
ANR	1970504	BreakStatement	break ;	195:5:4590:4595	1970416	5	True				
ANR	1970505	Label	case VN :	197:4:4602:4609	1970416	6	True				
ANR	1970506	Identifier	VN		1970416	0					
ANR	1970507	ExpressionStatement	tot_dual += m_parts [ idx ] . get_size ( )	198:5:4616:4651	1970416	7	True				
ANR	1970508	AssignmentExpression	tot_dual += m_parts [ idx ] . get_size ( )		1970416	0		+=			
ANR	1970509	Identifier	tot_dual		1970416	0					
ANR	1970510	CallExpression	m_parts [ idx ] . get_size ( )		1970416	1					
ANR	1970511	Callee	m_parts [ idx ] . get_size		1970416	0					
ANR	1970512	MemberAccess	m_parts [ idx ] . get_size		1970416	0					
ANR	1970513	ArrayIndexing	m_parts [ idx ]		1970416	0					
ANR	1970514	Identifier	m_parts		1970416	0					
ANR	1970515	Identifier	idx		1970416	1					
ANR	1970516	Identifier	get_size		1970416	1					
ANR	1970517	ArgumentList			1970416	1					
ANR	1970518	BreakStatement	break ;	199:5:4658:4663	1970416	8	True				
ANR	1970519	Label	default :	201:4:4670:4677	1970416	9	True				
ANR	1970520	Identifier	default		1970416	0					
ANR	1970521	Statement	EXCEPT	202:5:4684:4689	1970416	10	True				
ANR	1970522	Statement	(	202:11:4690:4690	1970416	11	True				
ANR	1970523	Statement	"""PartitionManager::total_backed_partitions(): """	202:12:4691:4737	1970416	12	True				
ANR	1970524	Statement	"""Programmer error!"""	203:6:4745:4763	1970416	13	True				
ANR	1970525	Statement	)	203:25:4764:4764	1970416	14	True				
ANR	1970526	ExpressionStatement		203:26:4765:4765	1970416	15	True				
ANR	1970527	ReturnType	void		1970416	1					
ANR	1970528	Identifier	PartitionManager :: partition_realization		1970416	2					
ANR	1970529	ParameterList	"int & tot_smp , int & tot_dual , int & tot_vn"		1970416	3					
ANR	1970530	Parameter	int & tot_smp	177:45:4229:4240	1970416	0	True				
ANR	1970531	ParameterType	int &		1970416	0					
ANR	1970532	Identifier	tot_smp		1970416	1					
ANR	1970533	Parameter	int & tot_dual	177:59:4243:4255	1970416	1	True				
ANR	1970534	ParameterType	int &		1970416	0					
ANR	1970535	Identifier	tot_dual		1970416	1					
ANR	1970536	Parameter	int & tot_vn	178:1:4260:4270	1970416	2	True				
ANR	1970537	ParameterType	int &		1970416	0					
ANR	1970538	Identifier	tot_vn		1970416	1					
ANR	1970539	CFGEntryNode	ENTRY		1970416		True				
ANR	1970540	CFGExitNode	EXIT		1970416		True				
ANR	1970541	Symbol	m_parts . length		1970416						
ANR	1970542	Symbol	* m_parts		1970416						
ANR	1970543	Symbol	m_parts [ idx ] . get_pkind		1970416						
ANR	1970544	Symbol	m_parts		1970416						
ANR	1970545	Symbol	BACKED		1970416						
ANR	1970546	Symbol	* idx		1970416						
ANR	1970547	Symbol	tot_dual		1970416						
ANR	1970548	Symbol	tot_vn		1970416						
ANR	1970549	Symbol	m_parts [ idx ] . get_size		1970416						
ANR	1970550	Symbol	tot_smp		1970416						
ANR	1970551	Symbol	idx		1970416						
ANR	1970552	Symbol	m_parts [ idx ] . get_pstate		1970416						
ANR	1970553	DeclStmt									
ANR	1970554	Decl							int	int	idx
ANR	1970555	DeclStmt									
ANR	1970556	Decl							int	int	total_smp_idle
ANR	1970557	DeclStmt									
ANR	1970558	Decl							int	int	total_dual_idle
ANR	1970559	DeclStmt									
ANR	1970560	Decl							int	int	total_vn_idle
ANR	1970561	DeclStmt									
ANR	1970562	Decl							MyString	MyString	name
ANR	1970563	DeclStmt									
ANR	1970564	Decl							bool	bool	val
ANR	1970565	DeclStmt									
ANR	1970566	Decl							int	int	smp_backed
ANR	1970567	DeclStmt									
ANR	1970568	Decl							int	int	dual_backed
ANR	1970569	DeclStmt									
ANR	1970570	Decl							int	int	vn_backed
ANR	1970571	Function	PartitionManager :: dump	444:0:12719:12850							
ANR	1970572	FunctionDef	PartitionManager :: dump (int flags)		1970571	0					
ANR	1970573	CompoundStatement		445:0:12758:12850	1970571	0					
ANR	1970574	IdentifierDeclStatement	int idx ;	446:1:12761:12768	1970571	0	True				
ANR	1970575	IdentifierDecl	idx		1970571	0					
ANR	1970576	IdentifierDeclType	int		1970571	0					
ANR	1970577	Identifier	idx		1970571	1					
ANR	1970578	ForStatement	for ( idx = 0 ; idx < m_parts . length ( ) ; idx ++ )		1970571	1					
ANR	1970579	ForInit	idx = 0 ;	448:6:12777:12784	1970571	0	True				
ANR	1970580	AssignmentExpression	idx = 0		1970571	0		=			
ANR	1970581	Identifier	idx		1970571	0					
ANR	1970582	PrimaryExpression	0		1970571	1					
ANR	1970583	Condition	idx < m_parts . length ( )	448:15:12786:12807	1970571	1	True				
ANR	1970584	RelationalExpression	idx < m_parts . length ( )		1970571	0		<			
ANR	1970585	Identifier	idx		1970571	0					
ANR	1970586	CallExpression	m_parts . length ( )		1970571	1					
ANR	1970587	Callee	m_parts . length		1970571	0					
ANR	1970588	MemberAccess	m_parts . length		1970571	0					
ANR	1970589	Identifier	m_parts		1970571	0					
ANR	1970590	Identifier	length		1970571	1					
ANR	1970591	ArgumentList			1970571	1					
ANR	1970592	PostIncDecOperationExpression	idx ++	448:39:12810:12814	1970571	2	True				
ANR	1970593	Identifier	idx		1970571	0					
ANR	1970594	IncDec	++		1970571	1					
ANR	1970595	CompoundStatement		4:46:58:58	1970571	3					
ANR	1970596	ExpressionStatement	m_parts [ idx ] . dump ( flags )	449:2:12821:12845	1970571	0	True				
ANR	1970597	CallExpression	m_parts [ idx ] . dump ( flags )		1970571	0					
ANR	1970598	Callee	m_parts [ idx ] . dump		1970571	0					
ANR	1970599	MemberAccess	m_parts [ idx ] . dump		1970571	0					
ANR	1970600	ArrayIndexing	m_parts [ idx ]		1970571	0					
ANR	1970601	Identifier	m_parts		1970571	0					
ANR	1970602	Identifier	idx		1970571	1					
ANR	1970603	Identifier	dump		1970571	1					
ANR	1970604	ArgumentList	flags		1970571	1					
ANR	1970605	Argument	flags		1970571	0					
ANR	1970606	Identifier	flags		1970571	0					
ANR	1970607	ReturnType	void		1970571	1					
ANR	1970608	Identifier	PartitionManager :: dump		1970571	2					
ANR	1970609	ParameterList	int flags		1970571	3					
ANR	1970610	Parameter	int flags	444:28:12747:12755	1970571	0	True				
ANR	1970611	ParameterType	int		1970571	0					
ANR	1970612	Identifier	flags		1970571	1					
ANR	1970613	CFGEntryNode	ENTRY		1970571		True				
ANR	1970614	CFGExitNode	EXIT		1970571		True				
ANR	1970615	Symbol	m_parts . length		1970571						
ANR	1970616	Symbol	* m_parts		1970571						
ANR	1970617	Symbol	m_parts		1970571						
ANR	1970618	Symbol	flags		1970571						
ANR	1970619	Symbol	* idx		1970571						
ANR	1970620	Symbol	idx		1970571						
