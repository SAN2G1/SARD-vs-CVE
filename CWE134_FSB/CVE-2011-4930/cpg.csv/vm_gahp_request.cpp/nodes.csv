command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5544669	File	data/converged/CVE-2011-4930_htcondor/vm_gahp_request.cpp								
ANR	5544670	Function	VMGahpRequest :: VMGahpRequest	38:0:1199:1488							
ANR	5544671	FunctionDef	VMGahpRequest :: VMGahpRequest (VMGahpServer * server)		5544670	0					
ANR	5544672	CompoundStatement		39:0:1250:1488	5544670	0					
ANR	5544673	ExpressionStatement	m_mode = NORMAL	40:1:1253:1268	5544670	0	True				
ANR	5544674	AssignmentExpression	m_mode = NORMAL		5544670	0		=			
ANR	5544675	Identifier	m_mode		5544670	0					
ANR	5544676	Identifier	NORMAL		5544670	1					
ANR	5544677	ExpressionStatement	m_server = server	41:1:1271:1288	5544670	1	True				
ANR	5544678	AssignmentExpression	m_server = server		5544670	0		=			
ANR	5544679	Identifier	m_server		5544670	0					
ANR	5544680	Identifier	server		5544670	1					
ANR	5544681	ExpressionStatement	m_pending_status = REQ_INITIALIZED	43:1:1292:1326	5544670	2	True				
ANR	5544682	AssignmentExpression	m_pending_status = REQ_INITIALIZED		5544670	0		=			
ANR	5544683	Identifier	m_pending_status		5544670	0					
ANR	5544684	Identifier	REQ_INITIALIZED		5544670	1					
ANR	5544685	ExpressionStatement	m_pending_reqid = 0	44:1:1329:1348	5544670	3	True				
ANR	5544686	AssignmentExpression	m_pending_reqid = 0		5544670	0		=			
ANR	5544687	Identifier	m_pending_reqid		5544670	0					
ANR	5544688	PrimaryExpression	0		5544670	1					
ANR	5544689	ExpressionStatement	"m_pending_args = """""	45:1:1351:1370	5544670	4	True				
ANR	5544690	AssignmentExpression	"m_pending_args = """""		5544670	0		=			
ANR	5544691	Identifier	m_pending_args		5544670	0					
ANR	5544692	PrimaryExpression	""""""		5544670	1					
ANR	5544693	ExpressionStatement	m_pending_result = NULL	46:1:1373:1396	5544670	5	True				
ANR	5544694	AssignmentExpression	m_pending_result = NULL		5544670	0		=			
ANR	5544695	Identifier	m_pending_result		5544670	0					
ANR	5544696	Identifier	NULL		5544670	1					
ANR	5544697	ExpressionStatement	m_timeout = 0	48:1:1401:1414	5544670	6	True				
ANR	5544698	AssignmentExpression	m_timeout = 0		5544670	0		=			
ANR	5544699	Identifier	m_timeout		5544670	0					
ANR	5544700	PrimaryExpression	0		5544670	1					
ANR	5544701	ExpressionStatement	m_expire_time = 0	49:1:1417:1434	5544670	7	True				
ANR	5544702	AssignmentExpression	m_expire_time = 0		5544670	0		=			
ANR	5544703	Identifier	m_expire_time		5544670	0					
ANR	5544704	PrimaryExpression	0		5544670	1					
ANR	5544705	ExpressionStatement	m_user_timer_id = - 1	50:1:1437:1457	5544670	8	True				
ANR	5544706	AssignmentExpression	m_user_timer_id = - 1		5544670	0		=			
ANR	5544707	Identifier	m_user_timer_id		5544670	0					
ANR	5544708	UnaryOperationExpression	- 1		5544670	1					
ANR	5544709	UnaryOperator	-		5544670	0					
ANR	5544710	PrimaryExpression	1		5544670	1					
ANR	5544711	ExpressionStatement	m_pending_timeout_tid = - 1	51:1:1460:1486	5544670	9	True				
ANR	5544712	AssignmentExpression	m_pending_timeout_tid = - 1		5544670	0		=			
ANR	5544713	Identifier	m_pending_timeout_tid		5544670	0					
ANR	5544714	UnaryOperationExpression	- 1		5544670	1					
ANR	5544715	UnaryOperator	-		5544670	0					
ANR	5544716	PrimaryExpression	1		5544670	1					
ANR	5544717	Identifier	VMGahpRequest :: VMGahpRequest		5544670	1					
ANR	5544718	ParameterList	VMGahpServer * server		5544670	2					
ANR	5544719	Parameter	VMGahpServer * server	38:29:1228:1247	5544670	0	True				
ANR	5544720	ParameterType	VMGahpServer *		5544670	0					
ANR	5544721	Identifier	server		5544670	1					
ANR	5544722	CFGEntryNode	ENTRY		5544670		True				
ANR	5544723	CFGExitNode	EXIT		5544670		True				
ANR	5544724	Symbol	m_pending_reqid		5544670						
ANR	5544725	Symbol	server		5544670						
ANR	5544726	Symbol	REQ_INITIALIZED		5544670						
ANR	5544727	Symbol	m_expire_time		5544670						
ANR	5544728	Symbol	NULL		5544670						
ANR	5544729	Symbol	m_pending_timeout_tid		5544670						
ANR	5544730	Symbol	m_pending_status		5544670						
ANR	5544731	Symbol	m_server		5544670						
ANR	5544732	Symbol	m_pending_args		5544670						
ANR	5544733	Symbol	m_timeout		5544670						
ANR	5544734	Symbol	m_user_timer_id		5544670						
ANR	5544735	Symbol	m_mode		5544670						
ANR	5544736	Symbol	m_pending_result		5544670						
ANR	5544737	Symbol	NORMAL		5544670						
ANR	5544738	Function	VMGahpRequest :: ~VMGahpRequest	54:0:1491:1542							
ANR	5544739	FunctionDef	VMGahpRequest :: ~VMGahpRequest ()		5544738	0					
ANR	5544740	CompoundStatement		55:0:1523:1542	5544738	0					
ANR	5544741	ExpressionStatement	clearPending ( )	56:1:1526:1540	5544738	0	True				
ANR	5544742	CallExpression	clearPending ( )		5544738	0					
ANR	5544743	Callee	clearPending		5544738	0					
ANR	5544744	Identifier	clearPending		5544738	0					
ANR	5544745	ArgumentList			5544738	1					
ANR	5544746	Identifier	VMGahpRequest :: ~VMGahpRequest		5544738	1					
ANR	5544747	ParameterList			5544738	2					
ANR	5544748	CFGEntryNode	ENTRY		5544738		True				
ANR	5544749	CFGExitNode	EXIT		5544738		True				
ANR	5544750	Function	VMGahpRequest :: clearPending	59:0:1545:2177							
ANR	5544751	FunctionDef	VMGahpRequest :: clearPending ()		5544750	0					
ANR	5544752	CompoundStatement		61:0:1580:2177	5544750	0					
ANR	5544753	IfStatement	if ( m_pending_reqid && m_server && ( m_pending_status != REQ_INITIALIZED ) )		5544750	0					
ANR	5544754	Condition	m_pending_reqid && m_server && ( m_pending_status != REQ_INITIALIZED )	62:5:1587:1657	5544750	0	True				
ANR	5544755	AndExpression	m_pending_reqid && m_server && ( m_pending_status != REQ_INITIALIZED )		5544750	0		&&			
ANR	5544756	Identifier	m_pending_reqid		5544750	0					
ANR	5544757	AndExpression	m_server && ( m_pending_status != REQ_INITIALIZED )		5544750	1		&&			
ANR	5544758	Identifier	m_server		5544750	0					
ANR	5544759	EqualityExpression	m_pending_status != REQ_INITIALIZED		5544750	1		!=			
ANR	5544760	Identifier	m_pending_status		5544750	0					
ANR	5544761	Identifier	REQ_INITIALIZED		5544750	1					
ANR	5544762	CompoundStatement		3:42:79:79	5544750	1					
ANR	5544763	ExpressionStatement	m_server -> cancelPendingRequest ( m_pending_reqid )	64:2:1664:1711	5544750	0	True				
ANR	5544764	CallExpression	m_server -> cancelPendingRequest ( m_pending_reqid )		5544750	0					
ANR	5544765	Callee	m_server -> cancelPendingRequest		5544750	0					
ANR	5544766	PtrMemberAccess	m_server -> cancelPendingRequest		5544750	0					
ANR	5544767	Identifier	m_server		5544750	0					
ANR	5544768	Identifier	cancelPendingRequest		5544750	1					
ANR	5544769	ArgumentList	m_pending_reqid		5544750	1					
ANR	5544770	Argument	m_pending_reqid		5544750	0					
ANR	5544771	Identifier	m_pending_reqid		5544750	0					
ANR	5544772	ExpressionStatement	m_server = NULL	66:1:1717:1732	5544750	1	True				
ANR	5544773	AssignmentExpression	m_server = NULL		5544750	0		=			
ANR	5544774	Identifier	m_server		5544750	0					
ANR	5544775	Identifier	NULL		5544750	1					
ANR	5544776	ExpressionStatement	m_mode = NORMAL	67:1:1735:1750	5544750	2	True				
ANR	5544777	AssignmentExpression	m_mode = NORMAL		5544750	0		=			
ANR	5544778	Identifier	m_mode		5544750	0					
ANR	5544779	Identifier	NORMAL		5544750	1					
ANR	5544780	ExpressionStatement	m_pending_reqid = 0	69:1:1754:1773	5544750	3	True				
ANR	5544781	AssignmentExpression	m_pending_reqid = 0		5544750	0		=			
ANR	5544782	Identifier	m_pending_reqid		5544750	0					
ANR	5544783	PrimaryExpression	0		5544750	1					
ANR	5544784	ExpressionStatement	"m_pending_args = """""	70:1:1776:1795	5544750	4	True				
ANR	5544785	AssignmentExpression	"m_pending_args = """""		5544750	0		=			
ANR	5544786	Identifier	m_pending_args		5544750	0					
ANR	5544787	PrimaryExpression	""""""		5544750	1					
ANR	5544788	IfStatement	if ( m_pending_result )		5544750	5					
ANR	5544789	Condition	m_pending_result	71:4:1801:1816	5544750	0	True				
ANR	5544790	Identifier	m_pending_result		5544750	0					
ANR	5544791	CompoundStatement		11:22:238:238	5544750	1					
ANR	5544792	Statement	delete	72:2:1823:1828	5544750	0	True				
ANR	5544793	ExpressionStatement	m_pending_result	72:9:1830:1846	5544750	1	True				
ANR	5544794	Identifier	m_pending_result		5544750	0					
ANR	5544795	ExpressionStatement	m_pending_result = NULL	73:2:1850:1873	5544750	2	True				
ANR	5544796	AssignmentExpression	m_pending_result = NULL		5544750	0		=			
ANR	5544797	Identifier	m_pending_result		5544750	0					
ANR	5544798	Identifier	NULL		5544750	1					
ANR	5544799	ExpressionStatement	m_pending_status = REQ_INITIALIZED	76:1:1880:1914	5544750	6	True				
ANR	5544800	AssignmentExpression	m_pending_status = REQ_INITIALIZED		5544750	0		=			
ANR	5544801	Identifier	m_pending_status		5544750	0					
ANR	5544802	Identifier	REQ_INITIALIZED		5544750	1					
ANR	5544803	ExpressionStatement	m_timeout = 0	77:1:1917:1930	5544750	7	True				
ANR	5544804	AssignmentExpression	m_timeout = 0		5544750	0		=			
ANR	5544805	Identifier	m_timeout		5544750	0					
ANR	5544806	PrimaryExpression	0		5544750	1					
ANR	5544807	ExpressionStatement	m_expire_time = 0	78:1:1933:1950	5544750	8	True				
ANR	5544808	AssignmentExpression	m_expire_time = 0		5544750	0		=			
ANR	5544809	Identifier	m_expire_time		5544750	0					
ANR	5544810	PrimaryExpression	0		5544750	1					
ANR	5544811	IfStatement	if ( m_pending_timeout_tid != - 1 )		5544750	9					
ANR	5544812	Condition	m_pending_timeout_tid != - 1	79:5:1957:1983	5544750	0	True				
ANR	5544813	EqualityExpression	m_pending_timeout_tid != - 1		5544750	0		!=			
ANR	5544814	Identifier	m_pending_timeout_tid		5544750	0					
ANR	5544815	UnaryOperationExpression	- 1		5544750	1					
ANR	5544816	UnaryOperator	-		5544750	0					
ANR	5544817	PrimaryExpression	1		5544750	1					
ANR	5544818	CompoundStatement		19:35:406:406	5544750	1					
ANR	5544819	ExpressionStatement	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )	80:2:1991:2038	5544750	0	True				
ANR	5544820	CallExpression	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )		5544750	0					
ANR	5544821	Callee	daemonCore -> Cancel_Timer		5544750	0					
ANR	5544822	PtrMemberAccess	daemonCore -> Cancel_Timer		5544750	0					
ANR	5544823	Identifier	daemonCore		5544750	0					
ANR	5544824	Identifier	Cancel_Timer		5544750	1					
ANR	5544825	ArgumentList	m_pending_timeout_tid		5544750	1					
ANR	5544826	Argument	m_pending_timeout_tid		5544750	0					
ANR	5544827	Identifier	m_pending_timeout_tid		5544750	0					
ANR	5544828	ExpressionStatement	m_pending_timeout_tid = - 1	81:2:2042:2068	5544750	1	True				
ANR	5544829	AssignmentExpression	m_pending_timeout_tid = - 1		5544750	0		=			
ANR	5544830	Identifier	m_pending_timeout_tid		5544750	0					
ANR	5544831	UnaryOperationExpression	- 1		5544750	1					
ANR	5544832	UnaryOperator	-		5544750	0					
ANR	5544833	PrimaryExpression	1		5544750	1					
ANR	5544834	IfStatement	if ( m_user_timer_id != - 1 )		5544750	10					
ANR	5544835	Condition	m_user_timer_id != - 1	84:5:2079:2099	5544750	0	True				
ANR	5544836	EqualityExpression	m_user_timer_id != - 1		5544750	0		!=			
ANR	5544837	Identifier	m_user_timer_id		5544750	0					
ANR	5544838	UnaryOperationExpression	- 1		5544750	1					
ANR	5544839	UnaryOperator	-		5544750	0					
ANR	5544840	PrimaryExpression	1		5544750	1					
ANR	5544841	CompoundStatement		24:29:522:522	5544750	1					
ANR	5544842	ExpressionStatement	daemonCore -> Cancel_Timer ( m_user_timer_id )	85:2:2107:2148	5544750	0	True				
ANR	5544843	CallExpression	daemonCore -> Cancel_Timer ( m_user_timer_id )		5544750	0					
ANR	5544844	Callee	daemonCore -> Cancel_Timer		5544750	0					
ANR	5544845	PtrMemberAccess	daemonCore -> Cancel_Timer		5544750	0					
ANR	5544846	Identifier	daemonCore		5544750	0					
ANR	5544847	Identifier	Cancel_Timer		5544750	1					
ANR	5544848	ArgumentList	m_user_timer_id		5544750	1					
ANR	5544849	Argument	m_user_timer_id		5544750	0					
ANR	5544850	Identifier	m_user_timer_id		5544750	0					
ANR	5544851	ExpressionStatement	m_user_timer_id = - 1	86:2:2152:2172	5544750	1	True				
ANR	5544852	AssignmentExpression	m_user_timer_id = - 1		5544750	0		=			
ANR	5544853	Identifier	m_user_timer_id		5544750	0					
ANR	5544854	UnaryOperationExpression	- 1		5544750	1					
ANR	5544855	UnaryOperator	-		5544750	0					
ANR	5544856	PrimaryExpression	1		5544750	1					
ANR	5544857	ReturnType	void		5544750	1					
ANR	5544858	Identifier	VMGahpRequest :: clearPending		5544750	2					
ANR	5544859	ParameterList			5544750	3					
ANR	5544860	CFGEntryNode	ENTRY		5544750		True				
ANR	5544861	CFGExitNode	EXIT		5544750		True				
ANR	5544862	Symbol	m_pending_reqid		5544750						
ANR	5544863	Symbol	REQ_INITIALIZED		5544750						
ANR	5544864	Symbol	m_expire_time		5544750						
ANR	5544865	Symbol	NULL		5544750						
ANR	5544866	Symbol	m_pending_timeout_tid		5544750						
ANR	5544867	Symbol	m_pending_status		5544750						
ANR	5544868	Symbol	m_server		5544750						
ANR	5544869	Symbol	m_pending_args		5544750						
ANR	5544870	Symbol	m_timeout		5544750						
ANR	5544871	Symbol	m_user_timer_id		5544750						
ANR	5544872	Symbol	daemonCore		5544750						
ANR	5544873	Symbol	m_mode		5544750						
ANR	5544874	Symbol	m_pending_result		5544750						
ANR	5544875	Symbol	NORMAL		5544750						
ANR	5544876	Function	VMGahpRequest :: pending_timer_fn	90:0:2180:2490							
ANR	5544877	FunctionDef	VMGahpRequest :: pending_timer_fn ()		5544876	0					
ANR	5544878	CompoundStatement		92:0:2218:2490	5544876	0					
ANR	5544879	IdentifierDeclStatement	int retval = TRUE ;	93:1:2221:2238	5544876	0	True				
ANR	5544880	IdentifierDecl	retval = TRUE		5544876	0					
ANR	5544881	IdentifierDeclType	int		5544876	0					
ANR	5544882	Identifier	retval		5544876	1					
ANR	5544883	AssignmentExpression	retval = TRUE		5544876	2		=			
ANR	5544884	Identifier	TRUE		5544876	0					
ANR	5544885	Identifier	TRUE		5544876	1					
ANR	5544886	IfStatement	if ( m_user_timer_id != - 1 )		5544876	1					
ANR	5544887	Condition	m_user_timer_id != - 1	97:5:2335:2355	5544876	0	True				
ANR	5544888	EqualityExpression	m_user_timer_id != - 1		5544876	0		!=			
ANR	5544889	Identifier	m_user_timer_id		5544876	0					
ANR	5544890	UnaryOperationExpression	- 1		5544876	1					
ANR	5544891	UnaryOperator	-		5544876	0					
ANR	5544892	PrimaryExpression	1		5544876	1					
ANR	5544893	CompoundStatement		6:29:140:140	5544876	1					
ANR	5544894	ExpressionStatement	"retval = daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"	98:2:2363:2415	5544876	0	True				
ANR	5544895	AssignmentExpression	"retval = daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"		5544876	0		=			
ANR	5544896	Identifier	retval		5544876	0					
ANR	5544897	CallExpression	"daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"		5544876	1					
ANR	5544898	Callee	daemonCore -> Reset_Timer		5544876	0					
ANR	5544899	PtrMemberAccess	daemonCore -> Reset_Timer		5544876	0					
ANR	5544900	Identifier	daemonCore		5544876	0					
ANR	5544901	Identifier	Reset_Timer		5544876	1					
ANR	5544902	ArgumentList	m_user_timer_id		5544876	1					
ANR	5544903	Argument	m_user_timer_id		5544876	0					
ANR	5544904	Identifier	m_user_timer_id		5544876	0					
ANR	5544905	Argument	0		5544876	1					
ANR	5544906	PrimaryExpression	0		5544876	0					
ANR	5544907	ExpressionStatement	m_user_timer_id = - 1	99:2:2419:2439	5544876	1	True				
ANR	5544908	AssignmentExpression	m_user_timer_id = - 1		5544876	0		=			
ANR	5544909	Identifier	m_user_timer_id		5544876	0					
ANR	5544910	UnaryOperationExpression	- 1		5544876	1					
ANR	5544911	UnaryOperator	-		5544876	0					
ANR	5544912	PrimaryExpression	1		5544876	1					
ANR	5544913	ExpressionStatement	m_pending_timeout_tid = - 1	102:1:2446:2472	5544876	2	True				
ANR	5544914	AssignmentExpression	m_pending_timeout_tid = - 1		5544876	0		=			
ANR	5544915	Identifier	m_pending_timeout_tid		5544876	0					
ANR	5544916	UnaryOperationExpression	- 1		5544876	1					
ANR	5544917	UnaryOperator	-		5544876	0					
ANR	5544918	PrimaryExpression	1		5544876	1					
ANR	5544919	ReturnStatement	return retval ;	103:1:2475:2488	5544876	3	True				
ANR	5544920	Identifier	retval		5544876	0					
ANR	5544921	ReturnType	int		5544876	1					
ANR	5544922	Identifier	VMGahpRequest :: pending_timer_fn		5544876	2					
ANR	5544923	ParameterList			5544876	3					
ANR	5544924	CFGEntryNode	ENTRY		5544876		True				
ANR	5544925	CFGExitNode	EXIT		5544876		True				
ANR	5544926	Symbol	daemonCore -> Reset_Timer		5544876						
ANR	5544927	Symbol	m_pending_timeout_tid		5544876						
ANR	5544928	Symbol	* daemonCore		5544876						
ANR	5544929	Symbol	daemonCore		5544876						
ANR	5544930	Symbol	TRUE		5544876						
ANR	5544931	Symbol	retval		5544876						
ANR	5544932	Symbol	m_user_timer_id		5544876						
ANR	5544933	Function	VMGahpRequest :: startPendingTimer	106:0:2493:2907							
ANR	5544934	FunctionDef	VMGahpRequest :: startPendingTimer ()		5544933	0					
ANR	5544935	CompoundStatement		108:0:2533:2907	5544933	0					
ANR	5544936	IfStatement	if ( m_pending_timeout_tid != - 1 )		5544933	0					
ANR	5544937	Condition	m_pending_timeout_tid != - 1	109:5:2540:2566	5544933	0	True				
ANR	5544938	EqualityExpression	m_pending_timeout_tid != - 1		5544933	0		!=			
ANR	5544939	Identifier	m_pending_timeout_tid		5544933	0					
ANR	5544940	UnaryOperationExpression	- 1		5544933	1					
ANR	5544941	UnaryOperator	-		5544933	0					
ANR	5544942	PrimaryExpression	1		5544933	1					
ANR	5544943	CompoundStatement		2:35:36:36	5544933	1					
ANR	5544944	ExpressionStatement	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )	110:2:2574:2621	5544933	0	True				
ANR	5544945	CallExpression	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )		5544933	0					
ANR	5544946	Callee	daemonCore -> Cancel_Timer		5544933	0					
ANR	5544947	PtrMemberAccess	daemonCore -> Cancel_Timer		5544933	0					
ANR	5544948	Identifier	daemonCore		5544933	0					
ANR	5544949	Identifier	Cancel_Timer		5544933	1					
ANR	5544950	ArgumentList	m_pending_timeout_tid		5544933	1					
ANR	5544951	Argument	m_pending_timeout_tid		5544933	0					
ANR	5544952	Identifier	m_pending_timeout_tid		5544933	0					
ANR	5544953	ExpressionStatement	m_pending_timeout_tid = - 1	111:2:2625:2651	5544933	1	True				
ANR	5544954	AssignmentExpression	m_pending_timeout_tid = - 1		5544933	0		=			
ANR	5544955	Identifier	m_pending_timeout_tid		5544933	0					
ANR	5544956	UnaryOperationExpression	- 1		5544933	1					
ANR	5544957	UnaryOperator	-		5544933	0					
ANR	5544958	PrimaryExpression	1		5544933	1					
ANR	5544959	ExpressionStatement	m_expire_time = 0	113:1:2657:2674	5544933	1	True				
ANR	5544960	AssignmentExpression	m_expire_time = 0		5544933	0		=			
ANR	5544961	Identifier	m_expire_time		5544933	0					
ANR	5544962	PrimaryExpression	0		5544933	1					
ANR	5544963	IfStatement	if ( m_timeout )		5544933	2					
ANR	5544964	Condition	m_timeout	115:5:2682:2690	5544933	0	True				
ANR	5544965	Identifier	m_timeout		5544933	0					
ANR	5544966	CompoundStatement		8:17:160:160	5544933	1					
ANR	5544967	ExpressionStatement	"m_pending_timeout_tid = daemonCore -> Register_Timer ( m_timeout , ( TimerHandlercpp ) & VMGahpRequest :: pending_timer_fn , ""VMGahpRequest::pending_timer_fn"" , this )"	116:2:2698:2860	5544933	0	True				
ANR	5544968	AssignmentExpression	"m_pending_timeout_tid = daemonCore -> Register_Timer ( m_timeout , ( TimerHandlercpp ) & VMGahpRequest :: pending_timer_fn , ""VMGahpRequest::pending_timer_fn"" , this )"		5544933	0		=			
ANR	5544969	Identifier	m_pending_timeout_tid		5544933	0					
ANR	5544970	CallExpression	"daemonCore -> Register_Timer ( m_timeout , ( TimerHandlercpp ) & VMGahpRequest :: pending_timer_fn , ""VMGahpRequest::pending_timer_fn"" , this )"		5544933	1					
ANR	5544971	Callee	daemonCore -> Register_Timer		5544933	0					
ANR	5544972	PtrMemberAccess	daemonCore -> Register_Timer		5544933	0					
ANR	5544973	Identifier	daemonCore		5544933	0					
ANR	5544974	Identifier	Register_Timer		5544933	1					
ANR	5544975	ArgumentList	m_timeout		5544933	1					
ANR	5544976	Argument	m_timeout		5544933	0					
ANR	5544977	Identifier	m_timeout		5544933	0					
ANR	5544978	Argument	( TimerHandlercpp ) & VMGahpRequest :: pending_timer_fn		5544933	1					
ANR	5544979	CastExpression	( TimerHandlercpp ) & VMGahpRequest :: pending_timer_fn		5544933	0					
ANR	5544980	CastTarget	TimerHandlercpp		5544933	0					
ANR	5544981	UnaryOperationExpression	& VMGahpRequest :: pending_timer_fn		5544933	1					
ANR	5544982	UnaryOperator	&		5544933	0					
ANR	5544983	Identifier	VMGahpRequest :: pending_timer_fn		5544933	1					
ANR	5544984	Argument	"""VMGahpRequest::pending_timer_fn"""		5544933	2					
ANR	5544985	PrimaryExpression	"""VMGahpRequest::pending_timer_fn"""		5544933	0					
ANR	5544986	Argument	this		5544933	3					
ANR	5544987	Identifier	this		5544933	0					
ANR	5544988	ExpressionStatement	m_expire_time = time ( NULL ) + m_timeout	119:2:2864:2902	5544933	1	True				
ANR	5544989	AssignmentExpression	m_expire_time = time ( NULL ) + m_timeout		5544933	0		=			
ANR	5544990	Identifier	m_expire_time		5544933	0					
ANR	5544991	AdditiveExpression	time ( NULL ) + m_timeout		5544933	1		+			
ANR	5544992	CallExpression	time ( NULL )		5544933	0					
ANR	5544993	Callee	time		5544933	0					
ANR	5544994	Identifier	time		5544933	0					
ANR	5544995	ArgumentList	NULL		5544933	1					
ANR	5544996	Argument	NULL		5544933	0					
ANR	5544997	Identifier	NULL		5544933	0					
ANR	5544998	Identifier	m_timeout		5544933	1					
ANR	5544999	ReturnType	void		5544933	1					
ANR	5545000	Identifier	VMGahpRequest :: startPendingTimer		5544933	2					
ANR	5545001	ParameterList			5544933	3					
ANR	5545002	CFGEntryNode	ENTRY		5544933		True				
ANR	5545003	CFGExitNode	EXIT		5544933		True				
ANR	5545004	Symbol	m_expire_time		5544933						
ANR	5545005	Symbol	NULL		5544933						
ANR	5545006	Symbol	m_pending_timeout_tid		5544933						
ANR	5545007	Symbol	* daemonCore		5544933						
ANR	5545008	Symbol	& VMGahpRequest :: pending_timer_fn		5544933						
ANR	5545009	Symbol	daemonCore		5544933						
ANR	5545010	Symbol	daemonCore -> Register_Timer		5544933						
ANR	5545011	Symbol	this		5544933						
ANR	5545012	Symbol	time		5544933						
ANR	5545013	Symbol	m_timeout		5544933						
ANR	5545014	Function	VMGahpRequest :: stopPendingTimer	123:0:2910:3091							
ANR	5545015	FunctionDef	VMGahpRequest :: stopPendingTimer ()		5545014	0					
ANR	5545016	CompoundStatement		125:0:2949:3091	5545014	0					
ANR	5545017	IfStatement	if ( m_pending_timeout_tid != - 1 )		5545014	0					
ANR	5545018	Condition	m_pending_timeout_tid != - 1	126:5:2956:2982	5545014	0	True				
ANR	5545019	EqualityExpression	m_pending_timeout_tid != - 1		5545014	0		!=			
ANR	5545020	Identifier	m_pending_timeout_tid		5545014	0					
ANR	5545021	UnaryOperationExpression	- 1		5545014	1					
ANR	5545022	UnaryOperator	-		5545014	0					
ANR	5545023	PrimaryExpression	1		5545014	1					
ANR	5545024	CompoundStatement		2:35:36:36	5545014	1					
ANR	5545025	ExpressionStatement	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )	127:2:2990:3037	5545014	0	True				
ANR	5545026	CallExpression	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )		5545014	0					
ANR	5545027	Callee	daemonCore -> Cancel_Timer		5545014	0					
ANR	5545028	PtrMemberAccess	daemonCore -> Cancel_Timer		5545014	0					
ANR	5545029	Identifier	daemonCore		5545014	0					
ANR	5545030	Identifier	Cancel_Timer		5545014	1					
ANR	5545031	ArgumentList	m_pending_timeout_tid		5545014	1					
ANR	5545032	Argument	m_pending_timeout_tid		5545014	0					
ANR	5545033	Identifier	m_pending_timeout_tid		5545014	0					
ANR	5545034	ExpressionStatement	m_pending_timeout_tid = - 1	129:1:3043:3069	5545014	1	True				
ANR	5545035	AssignmentExpression	m_pending_timeout_tid = - 1		5545014	0		=			
ANR	5545036	Identifier	m_pending_timeout_tid		5545014	0					
ANR	5545037	UnaryOperationExpression	- 1		5545014	1					
ANR	5545038	UnaryOperator	-		5545014	0					
ANR	5545039	PrimaryExpression	1		5545014	1					
ANR	5545040	ExpressionStatement	m_expire_time = 0	130:1:3072:3089	5545014	2	True				
ANR	5545041	AssignmentExpression	m_expire_time = 0		5545014	0		=			
ANR	5545042	Identifier	m_expire_time		5545014	0					
ANR	5545043	PrimaryExpression	0		5545014	1					
ANR	5545044	ReturnType	void		5545014	1					
ANR	5545045	Identifier	VMGahpRequest :: stopPendingTimer		5545014	2					
ANR	5545046	ParameterList			5545014	3					
ANR	5545047	CFGEntryNode	ENTRY		5545014		True				
ANR	5545048	CFGExitNode	EXIT		5545014		True				
ANR	5545049	Symbol	m_expire_time		5545014						
ANR	5545050	Symbol	m_pending_timeout_tid		5545014						
ANR	5545051	Symbol	daemonCore		5545014						
ANR	5545052	Function	VMGahpRequest :: isPendingTimeout	133:0:3094:3381							
ANR	5545053	FunctionDef	VMGahpRequest :: isPendingTimeout ()		5545052	0					
ANR	5545054	CompoundStatement		135:0:3133:3381	5545052	0					
ANR	5545055	IfStatement	if ( getPendingStatus ( ) == REQ_REJECTED )		5545052	0					
ANR	5545056	Condition	getPendingStatus ( ) == REQ_REJECTED	136:5:3140:3173	5545052	0	True				
ANR	5545057	EqualityExpression	getPendingStatus ( ) == REQ_REJECTED		5545052	0		==			
ANR	5545058	CallExpression	getPendingStatus ( )		5545052	0					
ANR	5545059	Callee	getPendingStatus		5545052	0					
ANR	5545060	Identifier	getPendingStatus		5545052	0					
ANR	5545061	ArgumentList			5545052	1					
ANR	5545062	Identifier	REQ_REJECTED		5545052	1					
ANR	5545063	CompoundStatement		2:42:43:43	5545052	1					
ANR	5545064	ReturnStatement	return true ;	138:2:3230:3241	5545052	0	True				
ANR	5545065	Identifier	true		5545052	0					
ANR	5545066	IfStatement	if ( getPendingStatus ( ) == REQ_SUBMITTED )		5545052	1					
ANR	5545067	Condition	getPendingStatus ( ) == REQ_SUBMITTED	141:5:3252:3286	5545052	0	True				
ANR	5545068	EqualityExpression	getPendingStatus ( ) == REQ_SUBMITTED		5545052	0		==			
ANR	5545069	CallExpression	getPendingStatus ( )		5545052	0					
ANR	5545070	Callee	getPendingStatus		5545052	0					
ANR	5545071	Identifier	getPendingStatus		5545052	0					
ANR	5545072	ArgumentList			5545052	1					
ANR	5545073	Identifier	REQ_SUBMITTED		5545052	1					
ANR	5545074	CompoundStatement		7:43:156:156	5545052	1					
ANR	5545075	IfStatement	if ( m_expire_time && ( time ( NULL ) > m_expire_time ) )		5545052	0					
ANR	5545076	Condition	m_expire_time && ( time ( NULL ) > m_expire_time )	142:6:3298:3342	5545052	0	True				
ANR	5545077	AndExpression	m_expire_time && ( time ( NULL ) > m_expire_time )		5545052	0		&&			
ANR	5545078	Identifier	m_expire_time		5545052	0					
ANR	5545079	RelationalExpression	time ( NULL ) > m_expire_time		5545052	1		>			
ANR	5545080	CallExpression	time ( NULL )		5545052	0					
ANR	5545081	Callee	time		5545052	0					
ANR	5545082	Identifier	time		5545052	0					
ANR	5545083	ArgumentList	NULL		5545052	1					
ANR	5545084	Argument	NULL		5545052	0					
ANR	5545085	Identifier	NULL		5545052	0					
ANR	5545086	Identifier	m_expire_time		5545052	1					
ANR	5545087	ReturnStatement	return true ;	143:3:3349:3360	5545052	1	True				
ANR	5545088	Identifier	true		5545052	0					
ANR	5545089	ReturnStatement	return false ;	146:1:3367:3379	5545052	2	True				
ANR	5545090	Identifier	false		5545052	0					
ANR	5545091	ReturnType	bool		5545052	1					
ANR	5545092	Identifier	VMGahpRequest :: isPendingTimeout		5545052	2					
ANR	5545093	ParameterList			5545052	3					
ANR	5545094	CFGEntryNode	ENTRY		5545052		True				
ANR	5545095	CFGExitNode	EXIT		5545052		True				
ANR	5545096	Symbol	REQ_REJECTED		5545052						
ANR	5545097	Symbol	m_expire_time		5545052						
ANR	5545098	Symbol	NULL		5545052						
ANR	5545099	Symbol	getPendingStatus		5545052						
ANR	5545100	Symbol	true		5545052						
ANR	5545101	Symbol	false		5545052						
ANR	5545102	Symbol	time		5545052						
ANR	5545103	Symbol	REQ_SUBMITTED		5545052						
ANR	5545104	Function	VMGahpRequest :: resetUserTimer	149:0:3384:3760							
ANR	5545105	FunctionDef	VMGahpRequest :: resetUserTimer ()		5545104	0					
ANR	5545106	CompoundStatement		151:0:3420:3760	5545104	0					
ANR	5545107	IdentifierDeclStatement	int retval = TRUE ;	152:1:3423:3440	5545104	0	True				
ANR	5545108	IdentifierDecl	retval = TRUE		5545104	0					
ANR	5545109	IdentifierDeclType	int		5545104	0					
ANR	5545110	Identifier	retval		5545104	1					
ANR	5545111	AssignmentExpression	retval = TRUE		5545104	2		=			
ANR	5545112	Identifier	TRUE		5545104	0					
ANR	5545113	Identifier	TRUE		5545104	1					
ANR	5545114	IfStatement	if ( m_pending_timeout_tid != - 1 )		5545104	1					
ANR	5545115	Condition	m_pending_timeout_tid != - 1	155:5:3512:3538	5545104	0	True				
ANR	5545116	EqualityExpression	m_pending_timeout_tid != - 1		5545104	0		!=			
ANR	5545117	Identifier	m_pending_timeout_tid		5545104	0					
ANR	5545118	UnaryOperationExpression	- 1		5545104	1					
ANR	5545119	UnaryOperator	-		5545104	0					
ANR	5545120	PrimaryExpression	1		5545104	1					
ANR	5545121	CompoundStatement		5:35:121:121	5545104	1					
ANR	5545122	ExpressionStatement	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )	156:2:3546:3593	5545104	0	True				
ANR	5545123	CallExpression	daemonCore -> Cancel_Timer ( m_pending_timeout_tid )		5545104	0					
ANR	5545124	Callee	daemonCore -> Cancel_Timer		5545104	0					
ANR	5545125	PtrMemberAccess	daemonCore -> Cancel_Timer		5545104	0					
ANR	5545126	Identifier	daemonCore		5545104	0					
ANR	5545127	Identifier	Cancel_Timer		5545104	1					
ANR	5545128	ArgumentList	m_pending_timeout_tid		5545104	1					
ANR	5545129	Argument	m_pending_timeout_tid		5545104	0					
ANR	5545130	Identifier	m_pending_timeout_tid		5545104	0					
ANR	5545131	ExpressionStatement	m_pending_timeout_tid = - 1	157:2:3597:3623	5545104	1	True				
ANR	5545132	AssignmentExpression	m_pending_timeout_tid = - 1		5545104	0		=			
ANR	5545133	Identifier	m_pending_timeout_tid		5545104	0					
ANR	5545134	UnaryOperationExpression	- 1		5545104	1					
ANR	5545135	UnaryOperator	-		5545104	0					
ANR	5545136	PrimaryExpression	1		5545104	1					
ANR	5545137	IfStatement	if ( m_user_timer_id != - 1 )		5545104	2					
ANR	5545138	Condition	m_user_timer_id != - 1	160:5:3634:3654	5545104	0	True				
ANR	5545139	EqualityExpression	m_user_timer_id != - 1		5545104	0		!=			
ANR	5545140	Identifier	m_user_timer_id		5545104	0					
ANR	5545141	UnaryOperationExpression	- 1		5545104	1					
ANR	5545142	UnaryOperator	-		5545104	0					
ANR	5545143	PrimaryExpression	1		5545104	1					
ANR	5545144	CompoundStatement		10:29:237:237	5545104	1					
ANR	5545145	ExpressionStatement	"retval = daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"	161:2:3662:3714	5545104	0	True				
ANR	5545146	AssignmentExpression	"retval = daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"		5545104	0		=			
ANR	5545147	Identifier	retval		5545104	0					
ANR	5545148	CallExpression	"daemonCore -> Reset_Timer ( m_user_timer_id , 0 )"		5545104	1					
ANR	5545149	Callee	daemonCore -> Reset_Timer		5545104	0					
ANR	5545150	PtrMemberAccess	daemonCore -> Reset_Timer		5545104	0					
ANR	5545151	Identifier	daemonCore		5545104	0					
ANR	5545152	Identifier	Reset_Timer		5545104	1					
ANR	5545153	ArgumentList	m_user_timer_id		5545104	1					
ANR	5545154	Argument	m_user_timer_id		5545104	0					
ANR	5545155	Identifier	m_user_timer_id		5545104	0					
ANR	5545156	Argument	0		5545104	1					
ANR	5545157	PrimaryExpression	0		5545104	0					
ANR	5545158	ExpressionStatement	m_user_timer_id = - 1	162:2:3718:3738	5545104	1	True				
ANR	5545159	AssignmentExpression	m_user_timer_id = - 1		5545104	0		=			
ANR	5545160	Identifier	m_user_timer_id		5545104	0					
ANR	5545161	UnaryOperationExpression	- 1		5545104	1					
ANR	5545162	UnaryOperator	-		5545104	0					
ANR	5545163	PrimaryExpression	1		5545104	1					
ANR	5545164	ReturnStatement	return retval ;	165:1:3745:3758	5545104	3	True				
ANR	5545165	Identifier	retval		5545104	0					
ANR	5545166	ReturnType	int		5545104	1					
ANR	5545167	Identifier	VMGahpRequest :: resetUserTimer		5545104	2					
ANR	5545168	ParameterList			5545104	3					
ANR	5545169	CFGEntryNode	ENTRY		5545104		True				
ANR	5545170	CFGExitNode	EXIT		5545104		True				
ANR	5545171	Symbol	m_pending_timeout_tid		5545104						
ANR	5545172	Symbol	daemonCore -> Reset_Timer		5545104						
ANR	5545173	Symbol	* daemonCore		5545104						
ANR	5545174	Symbol	daemonCore		5545104						
ANR	5545175	Symbol	TRUE		5545104						
ANR	5545176	Symbol	retval		5545104						
ANR	5545177	Symbol	m_user_timer_id		5545104						
ANR	5545178	Function	VMGahpRequest :: detachVMGahpServer	168:0:3763:3952							
ANR	5545179	FunctionDef	VMGahpRequest :: detachVMGahpServer ()		5545178	0					
ANR	5545180	CompoundStatement		170:0:3805:3952	5545178	0					
ANR	5545181	ExpressionStatement	m_server = NULL	171:1:3808:3823	5545178	0	True				
ANR	5545182	AssignmentExpression	m_server = NULL		5545178	0		=			
ANR	5545183	Identifier	m_server		5545178	0					
ANR	5545184	Identifier	NULL		5545178	1					
ANR	5545185	ExpressionStatement	setPendingStatus ( REQ_REJECTED )	173:1:3827:3857	5545178	1	True				
ANR	5545186	CallExpression	setPendingStatus ( REQ_REJECTED )		5545178	0					
ANR	5545187	Callee	setPendingStatus		5545178	0					
ANR	5545188	Identifier	setPendingStatus		5545178	0					
ANR	5545189	ArgumentList	REQ_REJECTED		5545178	1					
ANR	5545190	Argument	REQ_REJECTED		5545178	0					
ANR	5545191	Identifier	REQ_REJECTED		5545178	0					
ANR	5545192	IfStatement	if ( m_pending_timeout_tid != - 1 )		5545178	2					
ANR	5545193	Condition	m_pending_timeout_tid != - 1	175:5:3865:3891	5545178	0	True				
ANR	5545194	EqualityExpression	m_pending_timeout_tid != - 1		5545178	0		!=			
ANR	5545195	Identifier	m_pending_timeout_tid		5545178	0					
ANR	5545196	UnaryOperationExpression	- 1		5545178	1					
ANR	5545197	UnaryOperator	-		5545178	0					
ANR	5545198	PrimaryExpression	1		5545178	1					
ANR	5545199	CompoundStatement		6:35:89:89	5545178	1					
ANR	5545200	ExpressionStatement	"daemonCore -> Reset_Timer ( m_pending_timeout_tid , 0 )"	176:2:3899:3947	5545178	0	True				
ANR	5545201	CallExpression	"daemonCore -> Reset_Timer ( m_pending_timeout_tid , 0 )"		5545178	0					
ANR	5545202	Callee	daemonCore -> Reset_Timer		5545178	0					
ANR	5545203	PtrMemberAccess	daemonCore -> Reset_Timer		5545178	0					
ANR	5545204	Identifier	daemonCore		5545178	0					
ANR	5545205	Identifier	Reset_Timer		5545178	1					
ANR	5545206	ArgumentList	m_pending_timeout_tid		5545178	1					
ANR	5545207	Argument	m_pending_timeout_tid		5545178	0					
ANR	5545208	Identifier	m_pending_timeout_tid		5545178	0					
ANR	5545209	Argument	0		5545178	1					
ANR	5545210	PrimaryExpression	0		5545178	0					
ANR	5545211	ReturnType	void		5545178	1					
ANR	5545212	Identifier	VMGahpRequest :: detachVMGahpServer		5545178	2					
ANR	5545213	ParameterList			5545178	3					
ANR	5545214	CFGEntryNode	ENTRY		5545178		True				
ANR	5545215	CFGExitNode	EXIT		5545178		True				
ANR	5545216	Symbol	REQ_REJECTED		5545178						
ANR	5545217	Symbol	NULL		5545178						
ANR	5545218	Symbol	m_pending_timeout_tid		5545178						
ANR	5545219	Symbol	m_server		5545178						
ANR	5545220	Symbol	daemonCore		5545178						
ANR	5545221	Function	VMGahpRequest :: vmStart	180:0:3955:5555							
ANR	5545222	FunctionDef	"VMGahpRequest :: vmStart (const char * vm_type , const char * workingdir)"		5545221	0					
ANR	5545223	CompoundStatement		182:0:4027:5555	5545221	0					
ANR	5545224	Statement	static	183:1:4030:4035	5545221	0	True				
ANR	5545225	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_START"" ;"	183:8:4037:4076	5545221	1	True				
ANR	5545226	IdentifierDecl	"* command = ""CONDOR_VM_START"""		5545221	0					
ANR	5545227	IdentifierDeclType	const char *		5545221	0					
ANR	5545228	Identifier	command		5545221	1					
ANR	5545229	AssignmentExpression	"* command = ""CONDOR_VM_START"""		5545221	2		=			
ANR	5545230	Identifier	command		5545221	0					
ANR	5545231	PrimaryExpression	"""CONDOR_VM_START"""		5545221	1					
ANR	5545232	IfStatement	if ( ! vm_type || ( getPendingStatus ( ) != REQ_INITIALIZED ) )		5545221	2					
ANR	5545233	Condition	! vm_type || ( getPendingStatus ( ) != REQ_INITIALIZED )	185:5:4084:4134	5545221	0	True				
ANR	5545234	OrExpression	! vm_type || ( getPendingStatus ( ) != REQ_INITIALIZED )		5545221	0		||			
ANR	5545235	UnaryOperationExpression	! vm_type		5545221	0					
ANR	5545236	UnaryOperator	!		5545221	0					
ANR	5545237	Identifier	vm_type		5545221	1					
ANR	5545238	EqualityExpression	getPendingStatus ( ) != REQ_INITIALIZED		5545221	1		!=			
ANR	5545239	CallExpression	getPendingStatus ( )		5545221	0					
ANR	5545240	Callee	getPendingStatus		5545221	0					
ANR	5545241	Identifier	getPendingStatus		5545221	0					
ANR	5545242	ArgumentList			5545221	1					
ANR	5545243	Identifier	REQ_INITIALIZED		5545221	1					
ANR	5545244	CompoundStatement		4:58:109:109	5545221	1					
ANR	5545245	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	186:2:4141:4172	5545221	0	True				
ANR	5545246	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545221	0					
ANR	5545247	IfStatement	if ( m_server -> isSupportedCommand ( command ) == FALSE )		5545221	3					
ANR	5545248	Condition	m_server -> isSupportedCommand ( command ) == FALSE	189:4:4182:4227	5545221	0	True				
ANR	5545249	EqualityExpression	m_server -> isSupportedCommand ( command ) == FALSE		5545221	0		==			
ANR	5545250	CallExpression	m_server -> isSupportedCommand ( command )		5545221	0					
ANR	5545251	Callee	m_server -> isSupportedCommand		5545221	0					
ANR	5545252	PtrMemberAccess	m_server -> isSupportedCommand		5545221	0					
ANR	5545253	Identifier	m_server		5545221	0					
ANR	5545254	Identifier	isSupportedCommand		5545221	1					
ANR	5545255	ArgumentList	command		5545221	1					
ANR	5545256	Argument	command		5545221	0					
ANR	5545257	Identifier	command		5545221	0					
ANR	5545258	Identifier	FALSE		5545221	1					
ANR	5545259	CompoundStatement		8:52:202:202	5545221	1					
ANR	5545260	ReturnStatement	return VMGAHP_REQ_COMMAND_NOT_SUPPORTED ;	190:2:4234:4273	5545221	0	True				
ANR	5545261	Identifier	VMGAHP_REQ_COMMAND_NOT_SUPPORTED		5545221	0					
ANR	5545262	IfStatement	if ( m_server -> isSupportedVMType ( vm_type ) == FALSE )		5545221	4					
ANR	5545263	Condition	m_server -> isSupportedVMType ( vm_type ) == FALSE	193:4:4283:4327	5545221	0	True				
ANR	5545264	EqualityExpression	m_server -> isSupportedVMType ( vm_type ) == FALSE		5545221	0		==			
ANR	5545265	CallExpression	m_server -> isSupportedVMType ( vm_type )		5545221	0					
ANR	5545266	Callee	m_server -> isSupportedVMType		5545221	0					
ANR	5545267	PtrMemberAccess	m_server -> isSupportedVMType		5545221	0					
ANR	5545268	Identifier	m_server		5545221	0					
ANR	5545269	Identifier	isSupportedVMType		5545221	1					
ANR	5545270	ArgumentList	vm_type		5545221	1					
ANR	5545271	Argument	vm_type		5545221	0					
ANR	5545272	Identifier	vm_type		5545221	0					
ANR	5545273	Identifier	FALSE		5545221	1					
ANR	5545274	CompoundStatement		12:51:302:302	5545221	1					
ANR	5545275	ReturnStatement	return VMGAHP_REQ_VMTYPE_NOT_SUPPORTED ;	194:2:4334:4372	5545221	0	True				
ANR	5545276	Identifier	VMGAHP_REQ_VMTYPE_NOT_SUPPORTED		5545221	0					
ANR	5545277	IfStatement	if ( m_server -> publishVMClassAd ( workingdir ) == FALSE )		5545221	5					
ANR	5545278	Condition	m_server -> publishVMClassAd ( workingdir ) == FALSE	198:4:4455:4501	5545221	0	True				
ANR	5545279	EqualityExpression	m_server -> publishVMClassAd ( workingdir ) == FALSE		5545221	0		==			
ANR	5545280	CallExpression	m_server -> publishVMClassAd ( workingdir )		5545221	0					
ANR	5545281	Callee	m_server -> publishVMClassAd		5545221	0					
ANR	5545282	PtrMemberAccess	m_server -> publishVMClassAd		5545221	0					
ANR	5545283	Identifier	m_server		5545221	0					
ANR	5545284	Identifier	publishVMClassAd		5545221	1					
ANR	5545285	ArgumentList	workingdir		5545221	1					
ANR	5545286	Argument	workingdir		5545221	0					
ANR	5545287	Identifier	workingdir		5545221	0					
ANR	5545288	Identifier	FALSE		5545221	1					
ANR	5545289	CompoundStatement		17:54:477:477	5545221	1					
ANR	5545290	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	199:2:4509:4540	5545221	0	True				
ANR	5545291	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545221	0					
ANR	5545292	IdentifierDeclStatement	MyString reqline ;	202:1:4547:4563	5545221	6	True				
ANR	5545293	IdentifierDecl	reqline		5545221	0					
ANR	5545294	IdentifierDeclType	MyString		5545221	0					
ANR	5545295	Identifier	reqline		5545221	1					
ANR	5545296	ExpressionStatement	"reqline . sprintf ( ""%s"" , vm_type )"	203:1:4566:4596	5545221	7	True				
ANR	5545297	CallExpression	"reqline . sprintf ( ""%s"" , vm_type )"		5545221	0					
ANR	5545298	Callee	reqline . sprintf		5545221	0					
ANR	5545299	MemberAccess	reqline . sprintf		5545221	0					
ANR	5545300	Identifier	reqline		5545221	0					
ANR	5545301	Identifier	sprintf		5545221	1					
ANR	5545302	ArgumentList	"""%s"""		5545221	1					
ANR	5545303	Argument	"""%s"""		5545221	0					
ANR	5545304	PrimaryExpression	"""%s"""		5545221	0					
ANR	5545305	Argument	vm_type		5545221	1					
ANR	5545306	Identifier	vm_type		5545221	0					
ANR	5545307	IfStatement	"if ( m_server -> nowPending ( command , reqline . Value ( ) , this ) == false )"		5545221	8					
ANR	5545308	Condition	"m_server -> nowPending ( command , reqline . Value ( ) , this ) == false"	207:5:4689:4749	5545221	0	True				
ANR	5545309	EqualityExpression	"m_server -> nowPending ( command , reqline . Value ( ) , this ) == false"		5545221	0		==			
ANR	5545310	CallExpression	"m_server -> nowPending ( command , reqline . Value ( ) , this )"		5545221	0					
ANR	5545311	Callee	m_server -> nowPending		5545221	0					
ANR	5545312	PtrMemberAccess	m_server -> nowPending		5545221	0					
ANR	5545313	Identifier	m_server		5545221	0					
ANR	5545314	Identifier	nowPending		5545221	1					
ANR	5545315	ArgumentList	command		5545221	1					
ANR	5545316	Argument	command		5545221	0					
ANR	5545317	Identifier	command		5545221	0					
ANR	5545318	Argument	reqline . Value ( )		5545221	1					
ANR	5545319	CallExpression	reqline . Value ( )		5545221	0					
ANR	5545320	Callee	reqline . Value		5545221	0					
ANR	5545321	MemberAccess	reqline . Value		5545221	0					
ANR	5545322	Identifier	reqline		5545221	0					
ANR	5545323	Identifier	Value		5545221	1					
ANR	5545324	ArgumentList			5545221	1					
ANR	5545325	Argument	this		5545221	2					
ANR	5545326	Identifier	this		5545221	0					
ANR	5545327	Identifier	false		5545221	1					
ANR	5545328	CompoundStatement		26:69:725:725	5545221	1					
ANR	5545329	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	208:2:4757:4788	5545221	0	True				
ANR	5545330	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545221	0					
ANR	5545331	ExpressionStatement	m_command = command	212:1:4837:4856	5545221	9	True				
ANR	5545332	AssignmentExpression	m_command = command		5545221	0		=			
ANR	5545333	Identifier	m_command		5545221	0					
ANR	5545334	Identifier	command		5545221	1					
ANR	5545335	ExpressionStatement	startPendingTimer ( )	213:1:4859:4878	5545221	10	True				
ANR	5545336	CallExpression	startPendingTimer ( )		5545221	0					
ANR	5545337	Callee	startPendingTimer		5545221	0					
ANR	5545338	Identifier	startPendingTimer		5545221	0					
ANR	5545339	ArgumentList			5545221	1					
ANR	5545340	IfStatement	if ( m_mode == BLOCKING )		5545221	11					
ANR	5545341	Condition	m_mode == BLOCKING	216:5:4925:4942	5545221	0	True				
ANR	5545342	EqualityExpression	m_mode == BLOCKING		5545221	0		==			
ANR	5545343	Identifier	m_mode		5545221	0					
ANR	5545344	Identifier	BLOCKING		5545221	1					
ANR	5545345	CompoundStatement		35:26:918:918	5545221	1					
ANR	5545346	ExpressionStatement	"m_server -> getPendingResult ( m_pending_reqid , true )"	217:2:4950:4999	5545221	0	True				
ANR	5545347	CallExpression	"m_server -> getPendingResult ( m_pending_reqid , true )"		5545221	0					
ANR	5545348	Callee	m_server -> getPendingResult		5545221	0					
ANR	5545349	PtrMemberAccess	m_server -> getPendingResult		5545221	0					
ANR	5545350	Identifier	m_server		5545221	0					
ANR	5545351	Identifier	getPendingResult		5545221	1					
ANR	5545352	ArgumentList	m_pending_reqid		5545221	1					
ANR	5545353	Argument	m_pending_reqid		5545221	0					
ANR	5545354	Identifier	m_pending_reqid		5545221	0					
ANR	5545355	Argument	true		5545221	1					
ANR	5545356	Identifier	true		5545221	0					
ANR	5545357	ElseStatement	else		5545221	0					
ANR	5545358	CompoundStatement		37:8:981:981	5545221	0					
ANR	5545359	ExpressionStatement	"m_server -> getPendingResult ( m_pending_reqid , false )"	219:2:5013:5063	5545221	0	True				
ANR	5545360	CallExpression	"m_server -> getPendingResult ( m_pending_reqid , false )"		5545221	0					
ANR	5545361	Callee	m_server -> getPendingResult		5545221	0					
ANR	5545362	PtrMemberAccess	m_server -> getPendingResult		5545221	0					
ANR	5545363	Identifier	m_server		5545221	0					
ANR	5545364	Identifier	getPendingResult		5545221	1					
ANR	5545365	ArgumentList	m_pending_reqid		5545221	1					
ANR	5545366	Argument	m_pending_reqid		5545221	0					
ANR	5545367	Identifier	m_pending_reqid		5545221	0					
ANR	5545368	Argument	false		5545221	1					
ANR	5545369	Identifier	false		5545221	0					
ANR	5545370	IfStatement	if ( m_pending_status == REQ_DONE )		5545221	12					
ANR	5545371	Condition	m_pending_status == REQ_DONE	222:5:5074:5101	5545221	0	True				
ANR	5545372	EqualityExpression	m_pending_status == REQ_DONE		5545221	0		==			
ANR	5545373	Identifier	m_pending_status		5545221	0					
ANR	5545374	Identifier	REQ_DONE		5545221	1					
ANR	5545375	CompoundStatement		41:36:1077:1077	5545221	1					
ANR	5545376	ExpressionStatement	stopPendingTimer ( )	223:2:5109:5127	5545221	0	True				
ANR	5545377	CallExpression	stopPendingTimer ( )		5545221	0					
ANR	5545378	Callee	stopPendingTimer		5545221	0					
ANR	5545379	Identifier	stopPendingTimer		5545221	0					
ANR	5545380	ArgumentList			5545221	1					
ANR	5545381	ReturnStatement	return VMGAHP_REQ_COMMAND_DONE ;	224:2:5131:5161	5545221	1	True				
ANR	5545382	Identifier	VMGAHP_REQ_COMMAND_DONE		5545221	0					
ANR	5545383	ElseStatement	else		5545221	0					
ANR	5545384	IfStatement	if ( m_pending_status == REQ_SUBMITTED )		5545221	0					
ANR	5545385	Condition	m_pending_status == REQ_SUBMITTED	225:12:5175:5207	5545221	0	True				
ANR	5545386	EqualityExpression	m_pending_status == REQ_SUBMITTED		5545221	0		==			
ANR	5545387	Identifier	m_pending_status		5545221	0					
ANR	5545388	Identifier	REQ_SUBMITTED		5545221	1					
ANR	5545389	CompoundStatement		44:48:1183:1183	5545221	1					
ANR	5545390	IfStatement	if ( isPendingTimeout ( ) )		5545221	0					
ANR	5545391	Condition	isPendingTimeout ( )	227:6:5253:5270	5545221	0	True				
ANR	5545392	CallExpression	isPendingTimeout ( )		5545221	0					
ANR	5545393	Callee	isPendingTimeout		5545221	0					
ANR	5545394	Identifier	isPendingTimeout		5545221	0					
ANR	5545395	ArgumentList			5545221	1					
ANR	5545396	CompoundStatement		46:27:1246:1246	5545221	1					
ANR	5545397	ExpressionStatement	"dprintf ( D_ALWAYS , ""(%s %s) timed out\\n"" , command , reqline . Value ( ) )"	228:3:5279:5342	5545221	0	True				
ANR	5545398	CallExpression	"dprintf ( D_ALWAYS , ""(%s %s) timed out\\n"" , command , reqline . Value ( ) )"		5545221	0					
ANR	5545399	Callee	dprintf		5545221	0					
ANR	5545400	Identifier	dprintf		5545221	0					
ANR	5545401	ArgumentList	D_ALWAYS		5545221	1					
ANR	5545402	Argument	D_ALWAYS		5545221	0					
ANR	5545403	Identifier	D_ALWAYS		5545221	0					
ANR	5545404	Argument	"""(%s %s) timed out\\n"""		5545221	1					
ANR	5545405	PrimaryExpression	"""(%s %s) timed out\\n"""		5545221	0					
ANR	5545406	Argument	command		5545221	2					
ANR	5545407	Identifier	command		5545221	0					
ANR	5545408	Argument	reqline . Value ( )		5545221	3					
ANR	5545409	CallExpression	reqline . Value ( )		5545221	0					
ANR	5545410	Callee	reqline . Value		5545221	0					
ANR	5545411	MemberAccess	reqline . Value		5545221	0					
ANR	5545412	Identifier	reqline		5545221	0					
ANR	5545413	Identifier	Value		5545221	1					
ANR	5545414	ArgumentList			5545221	1					
ANR	5545415	ReturnStatement	return VMGAHP_REQ_COMMAND_TIMED_OUT ;	229:3:5347:5382	5545221	1	True				
ANR	5545416	Identifier	VMGAHP_REQ_COMMAND_TIMED_OUT		5545221	0					
ANR	5545417	ReturnStatement	return VMGAHP_REQ_COMMAND_PENDING ;	233:2:5440:5473	5545221	1	True				
ANR	5545418	Identifier	VMGAHP_REQ_COMMAND_PENDING		5545221	0					
ANR	5545419	ElseStatement	else		5545221	0					
ANR	5545420	CompoundStatement		53:7:1454:1454	5545221	0					
ANR	5545421	ExpressionStatement	stopPendingTimer ( )	236:2:5497:5515	5545221	0	True				
ANR	5545422	CallExpression	stopPendingTimer ( )		5545221	0					
ANR	5545423	Callee	stopPendingTimer		5545221	0					
ANR	5545424	Identifier	stopPendingTimer		5545221	0					
ANR	5545425	ArgumentList			5545221	1					
ANR	5545426	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	237:2:5519:5550	5545221	1	True				
ANR	5545427	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545221	0					
ANR	5545428	ReturnType	int		5545221	1					
ANR	5545429	Identifier	VMGahpRequest :: vmStart		5545221	2					
ANR	5545430	ParameterList	"const char * vm_type , const char * workingdir"		5545221	3					
ANR	5545431	Parameter	const char * vm_type	181:23:3982:4000	5545221	0	True				
ANR	5545432	ParameterType	const char *		5545221	0					
ANR	5545433	Identifier	vm_type		5545221	1					
ANR	5545434	Parameter	const char * workingdir	181:44:4003:4024	5545221	1	True				
ANR	5545435	ParameterType	const char *		5545221	0					
ANR	5545436	Identifier	workingdir		5545221	1					
ANR	5545437	CFGEntryNode	ENTRY		5545221		True				
ANR	5545438	CFGExitNode	EXIT		5545221		True				
ANR	5545439	Symbol	m_server -> isSupportedVMType		5545221						
ANR	5545440	Symbol	VMGAHP_REQ_COMMAND_ERROR		5545221						
ANR	5545441	Symbol	workingdir		5545221						
ANR	5545442	Symbol	m_server		5545221						
ANR	5545443	Symbol	VMGAHP_REQ_COMMAND_TIMED_OUT		5545221						
ANR	5545444	Symbol	isPendingTimeout		5545221						
ANR	5545445	Symbol	VMGAHP_REQ_VMTYPE_NOT_SUPPORTED		5545221						
ANR	5545446	Symbol	REQ_SUBMITTED		5545221						
ANR	5545447	Symbol	VMGAHP_REQ_COMMAND_NOT_SUPPORTED		5545221						
ANR	5545448	Symbol	vm_type		5545221						
ANR	5545449	Symbol	VMGAHP_REQ_COMMAND_DONE		5545221						
ANR	5545450	Symbol	m_server -> nowPending		5545221						
ANR	5545451	Symbol	getPendingStatus		5545221						
ANR	5545452	Symbol	reqline		5545221						
ANR	5545453	Symbol	m_mode		5545221						
ANR	5545454	Symbol	m_pending_reqid		5545221						
ANR	5545455	Symbol	REQ_INITIALIZED		5545221						
ANR	5545456	Symbol	m_server -> publishVMClassAd		5545221						
ANR	5545457	Symbol	m_command		5545221						
ANR	5545458	Symbol	REQ_DONE		5545221						
ANR	5545459	Symbol	m_server -> isSupportedCommand		5545221						
ANR	5545460	Symbol	m_pending_status		5545221						
ANR	5545461	Symbol	* m_server		5545221						
ANR	5545462	Symbol	false		5545221						
ANR	5545463	Symbol	this		5545221						
ANR	5545464	Symbol	D_ALWAYS		5545221						
ANR	5545465	Symbol	command		5545221						
ANR	5545466	Symbol	VMGAHP_REQ_COMMAND_PENDING		5545221						
ANR	5545467	Symbol	reqline . Value		5545221						
ANR	5545468	Symbol	true		5545221						
ANR	5545469	Symbol	FALSE		5545221						
ANR	5545470	Symbol	BLOCKING		5545221						
ANR	5545471	Function	VMGahpRequest :: vmStop	241:0:5558:5687							
ANR	5545472	FunctionDef	VMGahpRequest :: vmStop (int vm_id)		5545471	0					
ANR	5545473	CompoundStatement		243:0:5595:5687	5545471	0					
ANR	5545474	Statement	static	244:1:5598:5603	5545471	0	True				
ANR	5545475	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_STOP"" ;"	244:8:5605:5643	5545471	1	True				
ANR	5545476	IdentifierDecl	"* command = ""CONDOR_VM_STOP"""		5545471	0					
ANR	5545477	IdentifierDeclType	const char *		5545471	0					
ANR	5545478	Identifier	command		5545471	1					
ANR	5545479	AssignmentExpression	"* command = ""CONDOR_VM_STOP"""		5545471	2		=			
ANR	5545480	Identifier	command		5545471	0					
ANR	5545481	PrimaryExpression	"""CONDOR_VM_STOP"""		5545471	1					
ANR	5545482	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	246:1:5647:5685	5545471	2	True				
ANR	5545483	CallExpression	"executeBasicCmd ( command , vm_id )"		5545471	0					
ANR	5545484	Callee	executeBasicCmd		5545471	0					
ANR	5545485	Identifier	executeBasicCmd		5545471	0					
ANR	5545486	ArgumentList	command		5545471	1					
ANR	5545487	Argument	command		5545471	0					
ANR	5545488	Identifier	command		5545471	0					
ANR	5545489	Argument	vm_id		5545471	1					
ANR	5545490	Identifier	vm_id		5545471	0					
ANR	5545491	ReturnType	int		5545471	1					
ANR	5545492	Identifier	VMGahpRequest :: vmStop		5545471	2					
ANR	5545493	ParameterList	int vm_id		5545471	3					
ANR	5545494	Parameter	int vm_id	242:22:5584:5592	5545471	0	True				
ANR	5545495	ParameterType	int		5545471	0					
ANR	5545496	Identifier	vm_id		5545471	1					
ANR	5545497	CFGEntryNode	ENTRY		5545471		True				
ANR	5545498	CFGExitNode	EXIT		5545471		True				
ANR	5545499	Symbol	vm_id		5545471						
ANR	5545500	Symbol	executeBasicCmd		5545471						
ANR	5545501	Symbol	command		5545471						
ANR	5545502	Function	VMGahpRequest :: vmSuspend	249:0:5690:5825							
ANR	5545503	FunctionDef	VMGahpRequest :: vmSuspend (int vm_id)		5545502	0					
ANR	5545504	CompoundStatement		251:0:5730:5825	5545502	0					
ANR	5545505	Statement	static	252:1:5733:5738	5545502	0	True				
ANR	5545506	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_SUSPEND"" ;"	252:8:5740:5781	5545502	1	True				
ANR	5545507	IdentifierDecl	"* command = ""CONDOR_VM_SUSPEND"""		5545502	0					
ANR	5545508	IdentifierDeclType	const char *		5545502	0					
ANR	5545509	Identifier	command		5545502	1					
ANR	5545510	AssignmentExpression	"* command = ""CONDOR_VM_SUSPEND"""		5545502	2		=			
ANR	5545511	Identifier	command		5545502	0					
ANR	5545512	PrimaryExpression	"""CONDOR_VM_SUSPEND"""		5545502	1					
ANR	5545513	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	254:1:5785:5823	5545502	2	True				
ANR	5545514	CallExpression	"executeBasicCmd ( command , vm_id )"		5545502	0					
ANR	5545515	Callee	executeBasicCmd		5545502	0					
ANR	5545516	Identifier	executeBasicCmd		5545502	0					
ANR	5545517	ArgumentList	command		5545502	1					
ANR	5545518	Argument	command		5545502	0					
ANR	5545519	Identifier	command		5545502	0					
ANR	5545520	Argument	vm_id		5545502	1					
ANR	5545521	Identifier	vm_id		5545502	0					
ANR	5545522	ReturnType	int		5545502	1					
ANR	5545523	Identifier	VMGahpRequest :: vmSuspend		5545502	2					
ANR	5545524	ParameterList	int vm_id		5545502	3					
ANR	5545525	Parameter	int vm_id	250:25:5719:5727	5545502	0	True				
ANR	5545526	ParameterType	int		5545502	0					
ANR	5545527	Identifier	vm_id		5545502	1					
ANR	5545528	CFGEntryNode	ENTRY		5545502		True				
ANR	5545529	CFGExitNode	EXIT		5545502		True				
ANR	5545530	Symbol	vm_id		5545502						
ANR	5545531	Symbol	executeBasicCmd		5545502						
ANR	5545532	Symbol	command		5545502						
ANR	5545533	Function	VMGahpRequest :: vmSoftSuspend	257:0:5828:5972							
ANR	5545534	FunctionDef	VMGahpRequest :: vmSoftSuspend (int vm_id)		5545533	0					
ANR	5545535	CompoundStatement		259:0:5872:5972	5545533	0					
ANR	5545536	Statement	static	260:1:5875:5880	5545533	0	True				
ANR	5545537	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_SOFT_SUSPEND"" ;"	260:8:5882:5928	5545533	1	True				
ANR	5545538	IdentifierDecl	"* command = ""CONDOR_VM_SOFT_SUSPEND"""		5545533	0					
ANR	5545539	IdentifierDeclType	const char *		5545533	0					
ANR	5545540	Identifier	command		5545533	1					
ANR	5545541	AssignmentExpression	"* command = ""CONDOR_VM_SOFT_SUSPEND"""		5545533	2		=			
ANR	5545542	Identifier	command		5545533	0					
ANR	5545543	PrimaryExpression	"""CONDOR_VM_SOFT_SUSPEND"""		5545533	1					
ANR	5545544	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	262:1:5932:5970	5545533	2	True				
ANR	5545545	CallExpression	"executeBasicCmd ( command , vm_id )"		5545533	0					
ANR	5545546	Callee	executeBasicCmd		5545533	0					
ANR	5545547	Identifier	executeBasicCmd		5545533	0					
ANR	5545548	ArgumentList	command		5545533	1					
ANR	5545549	Argument	command		5545533	0					
ANR	5545550	Identifier	command		5545533	0					
ANR	5545551	Argument	vm_id		5545533	1					
ANR	5545552	Identifier	vm_id		5545533	0					
ANR	5545553	ReturnType	int		5545533	1					
ANR	5545554	Identifier	VMGahpRequest :: vmSoftSuspend		5545533	2					
ANR	5545555	ParameterList	int vm_id		5545533	3					
ANR	5545556	Parameter	int vm_id	258:29:5861:5869	5545533	0	True				
ANR	5545557	ParameterType	int		5545533	0					
ANR	5545558	Identifier	vm_id		5545533	1					
ANR	5545559	CFGEntryNode	ENTRY		5545533		True				
ANR	5545560	CFGExitNode	EXIT		5545533		True				
ANR	5545561	Symbol	vm_id		5545533						
ANR	5545562	Symbol	executeBasicCmd		5545533						
ANR	5545563	Symbol	command		5545533						
ANR	5545564	Function	VMGahpRequest :: vmResume	265:0:5975:6108							
ANR	5545565	FunctionDef	VMGahpRequest :: vmResume (int vm_id)		5545564	0					
ANR	5545566	CompoundStatement		267:0:6014:6108	5545564	0					
ANR	5545567	Statement	static	268:1:6017:6022	5545564	0	True				
ANR	5545568	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_RESUME"" ;"	268:8:6024:6064	5545564	1	True				
ANR	5545569	IdentifierDecl	"* command = ""CONDOR_VM_RESUME"""		5545564	0					
ANR	5545570	IdentifierDeclType	const char *		5545564	0					
ANR	5545571	Identifier	command		5545564	1					
ANR	5545572	AssignmentExpression	"* command = ""CONDOR_VM_RESUME"""		5545564	2		=			
ANR	5545573	Identifier	command		5545564	0					
ANR	5545574	PrimaryExpression	"""CONDOR_VM_RESUME"""		5545564	1					
ANR	5545575	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	270:1:6068:6106	5545564	2	True				
ANR	5545576	CallExpression	"executeBasicCmd ( command , vm_id )"		5545564	0					
ANR	5545577	Callee	executeBasicCmd		5545564	0					
ANR	5545578	Identifier	executeBasicCmd		5545564	0					
ANR	5545579	ArgumentList	command		5545564	1					
ANR	5545580	Argument	command		5545564	0					
ANR	5545581	Identifier	command		5545564	0					
ANR	5545582	Argument	vm_id		5545564	1					
ANR	5545583	Identifier	vm_id		5545564	0					
ANR	5545584	ReturnType	int		5545564	1					
ANR	5545585	Identifier	VMGahpRequest :: vmResume		5545564	2					
ANR	5545586	ParameterList	int vm_id		5545564	3					
ANR	5545587	Parameter	int vm_id	266:24:6003:6011	5545564	0	True				
ANR	5545588	ParameterType	int		5545564	0					
ANR	5545589	Identifier	vm_id		5545564	1					
ANR	5545590	CFGEntryNode	ENTRY		5545564		True				
ANR	5545591	CFGExitNode	EXIT		5545564		True				
ANR	5545592	Symbol	vm_id		5545564						
ANR	5545593	Symbol	executeBasicCmd		5545564						
ANR	5545594	Symbol	command		5545564						
ANR	5545595	Function	VMGahpRequest :: vmCheckpoint	273:0:6111:6252							
ANR	5545596	FunctionDef	VMGahpRequest :: vmCheckpoint (int vm_id)		5545595	0					
ANR	5545597	CompoundStatement		275:0:6154:6252	5545595	0					
ANR	5545598	Statement	static	276:1:6157:6162	5545595	0	True				
ANR	5545599	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_CHECKPOINT"" ;"	276:8:6164:6208	5545595	1	True				
ANR	5545600	IdentifierDecl	"* command = ""CONDOR_VM_CHECKPOINT"""		5545595	0					
ANR	5545601	IdentifierDeclType	const char *		5545595	0					
ANR	5545602	Identifier	command		5545595	1					
ANR	5545603	AssignmentExpression	"* command = ""CONDOR_VM_CHECKPOINT"""		5545595	2		=			
ANR	5545604	Identifier	command		5545595	0					
ANR	5545605	PrimaryExpression	"""CONDOR_VM_CHECKPOINT"""		5545595	1					
ANR	5545606	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	278:1:6212:6250	5545595	2	True				
ANR	5545607	CallExpression	"executeBasicCmd ( command , vm_id )"		5545595	0					
ANR	5545608	Callee	executeBasicCmd		5545595	0					
ANR	5545609	Identifier	executeBasicCmd		5545595	0					
ANR	5545610	ArgumentList	command		5545595	1					
ANR	5545611	Argument	command		5545595	0					
ANR	5545612	Identifier	command		5545595	0					
ANR	5545613	Argument	vm_id		5545595	1					
ANR	5545614	Identifier	vm_id		5545595	0					
ANR	5545615	ReturnType	int		5545595	1					
ANR	5545616	Identifier	VMGahpRequest :: vmCheckpoint		5545595	2					
ANR	5545617	ParameterList	int vm_id		5545595	3					
ANR	5545618	Parameter	int vm_id	274:28:6143:6151	5545595	0	True				
ANR	5545619	ParameterType	int		5545595	0					
ANR	5545620	Identifier	vm_id		5545595	1					
ANR	5545621	CFGEntryNode	ENTRY		5545595		True				
ANR	5545622	CFGExitNode	EXIT		5545595		True				
ANR	5545623	Symbol	vm_id		5545595						
ANR	5545624	Symbol	executeBasicCmd		5545595						
ANR	5545625	Symbol	command		5545595						
ANR	5545626	Function	VMGahpRequest :: vmStatus	281:0:6255:6388							
ANR	5545627	FunctionDef	VMGahpRequest :: vmStatus (int vm_id)		5545626	0					
ANR	5545628	CompoundStatement		283:0:6294:6388	5545626	0					
ANR	5545629	Statement	static	284:1:6297:6302	5545626	0	True				
ANR	5545630	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_STATUS"" ;"	284:8:6304:6344	5545626	1	True				
ANR	5545631	IdentifierDecl	"* command = ""CONDOR_VM_STATUS"""		5545626	0					
ANR	5545632	IdentifierDeclType	const char *		5545626	0					
ANR	5545633	Identifier	command		5545626	1					
ANR	5545634	AssignmentExpression	"* command = ""CONDOR_VM_STATUS"""		5545626	2		=			
ANR	5545635	Identifier	command		5545626	0					
ANR	5545636	PrimaryExpression	"""CONDOR_VM_STATUS"""		5545626	1					
ANR	5545637	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	286:1:6348:6386	5545626	2	True				
ANR	5545638	CallExpression	"executeBasicCmd ( command , vm_id )"		5545626	0					
ANR	5545639	Callee	executeBasicCmd		5545626	0					
ANR	5545640	Identifier	executeBasicCmd		5545626	0					
ANR	5545641	ArgumentList	command		5545626	1					
ANR	5545642	Argument	command		5545626	0					
ANR	5545643	Identifier	command		5545626	0					
ANR	5545644	Argument	vm_id		5545626	1					
ANR	5545645	Identifier	vm_id		5545626	0					
ANR	5545646	ReturnType	int		5545626	1					
ANR	5545647	Identifier	VMGahpRequest :: vmStatus		5545626	2					
ANR	5545648	ParameterList	int vm_id		5545626	3					
ANR	5545649	Parameter	int vm_id	282:24:6283:6291	5545626	0	True				
ANR	5545650	ParameterType	int		5545626	0					
ANR	5545651	Identifier	vm_id		5545626	1					
ANR	5545652	CFGEntryNode	ENTRY		5545626		True				
ANR	5545653	CFGExitNode	EXIT		5545626		True				
ANR	5545654	Symbol	vm_id		5545626						
ANR	5545655	Symbol	executeBasicCmd		5545626						
ANR	5545656	Symbol	command		5545626						
ANR	5545657	Function	VMGahpRequest :: vmGetPid	289:0:6391:6524							
ANR	5545658	FunctionDef	VMGahpRequest :: vmGetPid (int vm_id)		5545657	0					
ANR	5545659	CompoundStatement		291:0:6430:6524	5545657	0					
ANR	5545660	Statement	static	292:1:6433:6438	5545657	0	True				
ANR	5545661	IdentifierDeclStatement	"const char * command = ""CONDOR_VM_GETPID"" ;"	292:8:6440:6480	5545657	1	True				
ANR	5545662	IdentifierDecl	"* command = ""CONDOR_VM_GETPID"""		5545657	0					
ANR	5545663	IdentifierDeclType	const char *		5545657	0					
ANR	5545664	Identifier	command		5545657	1					
ANR	5545665	AssignmentExpression	"* command = ""CONDOR_VM_GETPID"""		5545657	2		=			
ANR	5545666	Identifier	command		5545657	0					
ANR	5545667	PrimaryExpression	"""CONDOR_VM_GETPID"""		5545657	1					
ANR	5545668	ReturnStatement	"return executeBasicCmd ( command , vm_id ) ;"	294:1:6484:6522	5545657	2	True				
ANR	5545669	CallExpression	"executeBasicCmd ( command , vm_id )"		5545657	0					
ANR	5545670	Callee	executeBasicCmd		5545657	0					
ANR	5545671	Identifier	executeBasicCmd		5545657	0					
ANR	5545672	ArgumentList	command		5545657	1					
ANR	5545673	Argument	command		5545657	0					
ANR	5545674	Identifier	command		5545657	0					
ANR	5545675	Argument	vm_id		5545657	1					
ANR	5545676	Identifier	vm_id		5545657	0					
ANR	5545677	ReturnType	int		5545657	1					
ANR	5545678	Identifier	VMGahpRequest :: vmGetPid		5545657	2					
ANR	5545679	ParameterList	int vm_id		5545657	3					
ANR	5545680	Parameter	int vm_id	290:24:6419:6427	5545657	0	True				
ANR	5545681	ParameterType	int		5545657	0					
ANR	5545682	Identifier	vm_id		5545657	1					
ANR	5545683	CFGEntryNode	ENTRY		5545657		True				
ANR	5545684	CFGExitNode	EXIT		5545657		True				
ANR	5545685	Symbol	vm_id		5545657						
ANR	5545686	Symbol	executeBasicCmd		5545657						
ANR	5545687	Symbol	command		5545657						
ANR	5545688	Function	VMGahpRequest :: executeBasicCmd	297:0:6527:7792							
ANR	5545689	FunctionDef	"VMGahpRequest :: executeBasicCmd (const char * command , int vm_id)"		5545688	0					
ANR	5545690	CompoundStatement		299:0:6594:7792	5545688	0					
ANR	5545691	IfStatement	if ( getPendingStatus ( ) != REQ_INITIALIZED )		5545688	0					
ANR	5545692	Condition	getPendingStatus ( ) != REQ_INITIALIZED	300:5:6601:6637	5545688	0	True				
ANR	5545693	EqualityExpression	getPendingStatus ( ) != REQ_INITIALIZED		5545688	0		!=			
ANR	5545694	CallExpression	getPendingStatus ( )		5545688	0					
ANR	5545695	Callee	getPendingStatus		5545688	0					
ANR	5545696	Identifier	getPendingStatus		5545688	0					
ANR	5545697	ArgumentList			5545688	1					
ANR	5545698	Identifier	REQ_INITIALIZED		5545688	1					
ANR	5545699	CompoundStatement		2:45:46:46	5545688	1					
ANR	5545700	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	301:2:6645:6676	5545688	0	True				
ANR	5545701	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545688	0					
ANR	5545702	IfStatement	if ( m_server -> isSupportedCommand ( command ) == FALSE )		5545688	1					
ANR	5545703	Condition	m_server -> isSupportedCommand ( command ) == FALSE	304:4:6686:6731	5545688	0	True				
ANR	5545704	EqualityExpression	m_server -> isSupportedCommand ( command ) == FALSE		5545688	0		==			
ANR	5545705	CallExpression	m_server -> isSupportedCommand ( command )		5545688	0					
ANR	5545706	Callee	m_server -> isSupportedCommand		5545688	0					
ANR	5545707	PtrMemberAccess	m_server -> isSupportedCommand		5545688	0					
ANR	5545708	Identifier	m_server		5545688	0					
ANR	5545709	Identifier	isSupportedCommand		5545688	1					
ANR	5545710	ArgumentList	command		5545688	1					
ANR	5545711	Argument	command		5545688	0					
ANR	5545712	Identifier	command		5545688	0					
ANR	5545713	Identifier	FALSE		5545688	1					
ANR	5545714	CompoundStatement		6:52:139:139	5545688	1					
ANR	5545715	ReturnStatement	return VMGAHP_REQ_COMMAND_NOT_SUPPORTED ;	305:2:6738:6777	5545688	0	True				
ANR	5545716	Identifier	VMGAHP_REQ_COMMAND_NOT_SUPPORTED		5545688	0					
ANR	5545717	IdentifierDeclStatement	MyString reqline ;	308:1:6784:6800	5545688	2	True				
ANR	5545718	IdentifierDecl	reqline		5545688	0					
ANR	5545719	IdentifierDeclType	MyString		5545688	0					
ANR	5545720	Identifier	reqline		5545688	1					
ANR	5545721	ExpressionStatement	"reqline . sprintf ( ""%d"" , vm_id )"	309:1:6803:6831	5545688	3	True				
ANR	5545722	CallExpression	"reqline . sprintf ( ""%d"" , vm_id )"		5545688	0					
ANR	5545723	Callee	reqline . sprintf		5545688	0					
ANR	5545724	MemberAccess	reqline . sprintf		5545688	0					
ANR	5545725	Identifier	reqline		5545688	0					
ANR	5545726	Identifier	sprintf		5545688	1					
ANR	5545727	ArgumentList	"""%d"""		5545688	1					
ANR	5545728	Argument	"""%d"""		5545688	0					
ANR	5545729	PrimaryExpression	"""%d"""		5545688	0					
ANR	5545730	Argument	vm_id		5545688	1					
ANR	5545731	Identifier	vm_id		5545688	0					
ANR	5545732	IfStatement	"if ( m_server -> nowPending ( command , reqline . Value ( ) , this ) == false )"		5545688	4					
ANR	5545733	Condition	"m_server -> nowPending ( command , reqline . Value ( ) , this ) == false"	313:5:6924:6984	5545688	0	True				
ANR	5545734	EqualityExpression	"m_server -> nowPending ( command , reqline . Value ( ) , this ) == false"		5545688	0		==			
ANR	5545735	CallExpression	"m_server -> nowPending ( command , reqline . Value ( ) , this )"		5545688	0					
ANR	5545736	Callee	m_server -> nowPending		5545688	0					
ANR	5545737	PtrMemberAccess	m_server -> nowPending		5545688	0					
ANR	5545738	Identifier	m_server		5545688	0					
ANR	5545739	Identifier	nowPending		5545688	1					
ANR	5545740	ArgumentList	command		5545688	1					
ANR	5545741	Argument	command		5545688	0					
ANR	5545742	Identifier	command		5545688	0					
ANR	5545743	Argument	reqline . Value ( )		5545688	1					
ANR	5545744	CallExpression	reqline . Value ( )		5545688	0					
ANR	5545745	Callee	reqline . Value		5545688	0					
ANR	5545746	MemberAccess	reqline . Value		5545688	0					
ANR	5545747	Identifier	reqline		5545688	0					
ANR	5545748	Identifier	Value		5545688	1					
ANR	5545749	ArgumentList			5545688	1					
ANR	5545750	Argument	this		5545688	2					
ANR	5545751	Identifier	this		5545688	0					
ANR	5545752	Identifier	false		5545688	1					
ANR	5545753	CompoundStatement		15:69:393:393	5545688	1					
ANR	5545754	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	314:2:6992:7023	5545688	0	True				
ANR	5545755	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545688	0					
ANR	5545756	ExpressionStatement	m_command = command	318:1:7072:7091	5545688	5	True				
ANR	5545757	AssignmentExpression	m_command = command		5545688	0		=			
ANR	5545758	Identifier	m_command		5545688	0					
ANR	5545759	Identifier	command		5545688	1					
ANR	5545760	ExpressionStatement	startPendingTimer ( )	319:1:7094:7113	5545688	6	True				
ANR	5545761	CallExpression	startPendingTimer ( )		5545688	0					
ANR	5545762	Callee	startPendingTimer		5545688	0					
ANR	5545763	Identifier	startPendingTimer		5545688	0					
ANR	5545764	ArgumentList			5545688	1					
ANR	5545765	IfStatement	if ( m_mode == BLOCKING )		5545688	7					
ANR	5545766	Condition	m_mode == BLOCKING	322:5:7161:7178	5545688	0	True				
ANR	5545767	EqualityExpression	m_mode == BLOCKING		5545688	0		==			
ANR	5545768	Identifier	m_mode		5545688	0					
ANR	5545769	Identifier	BLOCKING		5545688	1					
ANR	5545770	CompoundStatement		24:26:587:587	5545688	1					
ANR	5545771	ExpressionStatement	"m_server -> getPendingResult ( m_pending_reqid , true )"	323:2:7186:7235	5545688	0	True				
ANR	5545772	CallExpression	"m_server -> getPendingResult ( m_pending_reqid , true )"		5545688	0					
ANR	5545773	Callee	m_server -> getPendingResult		5545688	0					
ANR	5545774	PtrMemberAccess	m_server -> getPendingResult		5545688	0					
ANR	5545775	Identifier	m_server		5545688	0					
ANR	5545776	Identifier	getPendingResult		5545688	1					
ANR	5545777	ArgumentList	m_pending_reqid		5545688	1					
ANR	5545778	Argument	m_pending_reqid		5545688	0					
ANR	5545779	Identifier	m_pending_reqid		5545688	0					
ANR	5545780	Argument	true		5545688	1					
ANR	5545781	Identifier	true		5545688	0					
ANR	5545782	ElseStatement	else		5545688	0					
ANR	5545783	CompoundStatement		26:8:650:650	5545688	0					
ANR	5545784	ExpressionStatement	"m_server -> getPendingResult ( m_pending_reqid , false )"	325:2:7250:7300	5545688	0	True				
ANR	5545785	CallExpression	"m_server -> getPendingResult ( m_pending_reqid , false )"		5545688	0					
ANR	5545786	Callee	m_server -> getPendingResult		5545688	0					
ANR	5545787	PtrMemberAccess	m_server -> getPendingResult		5545688	0					
ANR	5545788	Identifier	m_server		5545688	0					
ANR	5545789	Identifier	getPendingResult		5545688	1					
ANR	5545790	ArgumentList	m_pending_reqid		5545688	1					
ANR	5545791	Argument	m_pending_reqid		5545688	0					
ANR	5545792	Identifier	m_pending_reqid		5545688	0					
ANR	5545793	Argument	false		5545688	1					
ANR	5545794	Identifier	false		5545688	0					
ANR	5545795	IfStatement	if ( m_pending_status == REQ_DONE )		5545688	8					
ANR	5545796	Condition	m_pending_status == REQ_DONE	328:5:7311:7338	5545688	0	True				
ANR	5545797	EqualityExpression	m_pending_status == REQ_DONE		5545688	0		==			
ANR	5545798	Identifier	m_pending_status		5545688	0					
ANR	5545799	Identifier	REQ_DONE		5545688	1					
ANR	5545800	CompoundStatement		30:36:747:747	5545688	1					
ANR	5545801	ExpressionStatement	stopPendingTimer ( )	329:2:7346:7364	5545688	0	True				
ANR	5545802	CallExpression	stopPendingTimer ( )		5545688	0					
ANR	5545803	Callee	stopPendingTimer		5545688	0					
ANR	5545804	Identifier	stopPendingTimer		5545688	0					
ANR	5545805	ArgumentList			5545688	1					
ANR	5545806	ReturnStatement	return VMGAHP_REQ_COMMAND_DONE ;	330:2:7368:7398	5545688	1	True				
ANR	5545807	Identifier	VMGAHP_REQ_COMMAND_DONE		5545688	0					
ANR	5545808	ElseStatement	else		5545688	0					
ANR	5545809	IfStatement	if ( m_pending_status == REQ_SUBMITTED )		5545688	0					
ANR	5545810	Condition	m_pending_status == REQ_SUBMITTED	331:12:7412:7444	5545688	0	True				
ANR	5545811	EqualityExpression	m_pending_status == REQ_SUBMITTED		5545688	0		==			
ANR	5545812	Identifier	m_pending_status		5545688	0					
ANR	5545813	Identifier	REQ_SUBMITTED		5545688	1					
ANR	5545814	CompoundStatement		33:48:853:853	5545688	1					
ANR	5545815	IfStatement	if ( isPendingTimeout ( ) )		5545688	0					
ANR	5545816	Condition	isPendingTimeout ( )	333:6:7490:7507	5545688	0	True				
ANR	5545817	CallExpression	isPendingTimeout ( )		5545688	0					
ANR	5545818	Callee	isPendingTimeout		5545688	0					
ANR	5545819	Identifier	isPendingTimeout		5545688	0					
ANR	5545820	ArgumentList			5545688	1					
ANR	5545821	CompoundStatement		35:27:916:916	5545688	1					
ANR	5545822	ExpressionStatement	"dprintf ( D_ALWAYS , ""(%s %s) timed out\\n"" , command , reqline . Value ( ) )"	334:3:7516:7579	5545688	0	True				
ANR	5545823	CallExpression	"dprintf ( D_ALWAYS , ""(%s %s) timed out\\n"" , command , reqline . Value ( ) )"		5545688	0					
ANR	5545824	Callee	dprintf		5545688	0					
ANR	5545825	Identifier	dprintf		5545688	0					
ANR	5545826	ArgumentList	D_ALWAYS		5545688	1					
ANR	5545827	Argument	D_ALWAYS		5545688	0					
ANR	5545828	Identifier	D_ALWAYS		5545688	0					
ANR	5545829	Argument	"""(%s %s) timed out\\n"""		5545688	1					
ANR	5545830	PrimaryExpression	"""(%s %s) timed out\\n"""		5545688	0					
ANR	5545831	Argument	command		5545688	2					
ANR	5545832	Identifier	command		5545688	0					
ANR	5545833	Argument	reqline . Value ( )		5545688	3					
ANR	5545834	CallExpression	reqline . Value ( )		5545688	0					
ANR	5545835	Callee	reqline . Value		5545688	0					
ANR	5545836	MemberAccess	reqline . Value		5545688	0					
ANR	5545837	Identifier	reqline		5545688	0					
ANR	5545838	Identifier	Value		5545688	1					
ANR	5545839	ArgumentList			5545688	1					
ANR	5545840	ReturnStatement	return VMGAHP_REQ_COMMAND_TIMED_OUT ;	335:3:7584:7619	5545688	1	True				
ANR	5545841	Identifier	VMGAHP_REQ_COMMAND_TIMED_OUT		5545688	0					
ANR	5545842	ReturnStatement	return VMGAHP_REQ_COMMAND_PENDING ;	339:2:7677:7710	5545688	1	True				
ANR	5545843	Identifier	VMGAHP_REQ_COMMAND_PENDING		5545688	0					
ANR	5545844	ElseStatement	else		5545688	0					
ANR	5545845	CompoundStatement		42:7:1124:1124	5545688	0					
ANR	5545846	ExpressionStatement	stopPendingTimer ( )	342:2:7734:7752	5545688	0	True				
ANR	5545847	CallExpression	stopPendingTimer ( )		5545688	0					
ANR	5545848	Callee	stopPendingTimer		5545688	0					
ANR	5545849	Identifier	stopPendingTimer		5545688	0					
ANR	5545850	ArgumentList			5545688	1					
ANR	5545851	ReturnStatement	return VMGAHP_REQ_COMMAND_ERROR ;	343:2:7756:7787	5545688	1	True				
ANR	5545852	Identifier	VMGAHP_REQ_COMMAND_ERROR		5545688	0					
ANR	5545853	ReturnType	int		5545688	1					
ANR	5545854	Identifier	VMGahpRequest :: executeBasicCmd		5545688	2					
ANR	5545855	ParameterList	"const char * command , int vm_id"		5545688	3					
ANR	5545856	Parameter	const char * command	298:31:6562:6580	5545688	0	True				
ANR	5545857	ParameterType	const char *		5545688	0					
ANR	5545858	Identifier	command		5545688	1					
ANR	5545859	Parameter	int vm_id	298:52:6583:6591	5545688	1	True				
ANR	5545860	ParameterType	int		5545688	0					
ANR	5545861	Identifier	vm_id		5545688	1					
ANR	5545862	CFGEntryNode	ENTRY		5545688		True				
ANR	5545863	CFGExitNode	EXIT		5545688		True				
ANR	5545864	Symbol	VMGAHP_REQ_COMMAND_ERROR		5545688						
ANR	5545865	Symbol	m_server		5545688						
ANR	5545866	Symbol	VMGAHP_REQ_COMMAND_TIMED_OUT		5545688						
ANR	5545867	Symbol	isPendingTimeout		5545688						
ANR	5545868	Symbol	REQ_SUBMITTED		5545688						
ANR	5545869	Symbol	VMGAHP_REQ_COMMAND_NOT_SUPPORTED		5545688						
ANR	5545870	Symbol	vm_id		5545688						
ANR	5545871	Symbol	VMGAHP_REQ_COMMAND_DONE		5545688						
ANR	5545872	Symbol	m_server -> nowPending		5545688						
ANR	5545873	Symbol	getPendingStatus		5545688						
ANR	5545874	Symbol	reqline		5545688						
ANR	5545875	Symbol	m_mode		5545688						
ANR	5545876	Symbol	m_pending_reqid		5545688						
ANR	5545877	Symbol	REQ_INITIALIZED		5545688						
ANR	5545878	Symbol	m_command		5545688						
ANR	5545879	Symbol	REQ_DONE		5545688						
ANR	5545880	Symbol	m_server -> isSupportedCommand		5545688						
ANR	5545881	Symbol	m_pending_status		5545688						
ANR	5545882	Symbol	* m_server		5545688						
ANR	5545883	Symbol	this		5545688						
ANR	5545884	Symbol	false		5545688						
ANR	5545885	Symbol	D_ALWAYS		5545688						
ANR	5545886	Symbol	command		5545688						
ANR	5545887	Symbol	VMGAHP_REQ_COMMAND_PENDING		5545688						
ANR	5545888	Symbol	reqline . Value		5545688						
ANR	5545889	Symbol	true		5545688						
ANR	5545890	Symbol	FALSE		5545688						
ANR	5545891	Symbol	BLOCKING		5545688						
ANR	5545892	Function	VMGahpRequest :: setMode	347:0:7795:7852							
ANR	5545893	FunctionDef	VMGahpRequest :: setMode (reqmode m)		5545892	0					
ANR	5545894	CompoundStatement		349:0:7835:7852	5545892	0					
ANR	5545895	ExpressionStatement	m_mode = m	350:1:7839:7849	5545892	0	True				
ANR	5545896	AssignmentExpression	m_mode = m		5545892	0		=			
ANR	5545897	Identifier	m_mode		5545892	0					
ANR	5545898	Identifier	m		5545892	1					
ANR	5545899	ReturnType	void		5545892	1					
ANR	5545900	Identifier	VMGahpRequest :: setMode		5545892	2					
ANR	5545901	ParameterList	reqmode m		5545892	3					
ANR	5545902	Parameter	reqmode m	348:23:7823:7831	5545892	0	True				
ANR	5545903	ParameterType	reqmode		5545892	0					
ANR	5545904	Identifier	m		5545892	1					
ANR	5545905	CFGEntryNode	ENTRY		5545892		True				
ANR	5545906	CFGExitNode	EXIT		5545892		True				
ANR	5545907	Symbol	m_mode		5545892						
ANR	5545908	Symbol	m		5545892						
ANR	5545909	Function	VMGahpRequest :: setTimeout	353:0:7855:7913							
ANR	5545910	FunctionDef	VMGahpRequest :: setTimeout (int t)		5545909	0					
ANR	5545911	CompoundStatement		355:0:7895:7913	5545909	0					
ANR	5545912	ExpressionStatement	m_timeout = t	356:1:7898:7911	5545909	0	True				
ANR	5545913	AssignmentExpression	m_timeout = t		5545909	0		=			
ANR	5545914	Identifier	m_timeout		5545909	0					
ANR	5545915	Identifier	t		5545909	1					
ANR	5545916	ReturnType	void		5545909	1					
ANR	5545917	Identifier	VMGahpRequest :: setTimeout		5545909	2					
ANR	5545918	ParameterList	int t		5545909	3					
ANR	5545919	Parameter	int t	354:26:7887:7891	5545909	0	True				
ANR	5545920	ParameterType	int		5545909	0					
ANR	5545921	Identifier	t		5545909	1					
ANR	5545922	CFGEntryNode	ENTRY		5545909		True				
ANR	5545923	CFGExitNode	EXIT		5545909		True				
ANR	5545924	Symbol	t		5545909						
ANR	5545925	Symbol	m_timeout		5545909						
ANR	5545926	Function	VMGahpRequest :: getTimeout	359:0:7916:7971							
ANR	5545927	FunctionDef	VMGahpRequest :: getTimeout ()		5545926	0					
ANR	5545928	CompoundStatement		361:0:7950:7971	5545926	0					
ANR	5545929	ReturnStatement	return m_timeout ;	362:1:7953:7969	5545926	0	True				
ANR	5545930	Identifier	m_timeout		5545926	0					
ANR	5545931	ReturnType	int		5545926	1					
ANR	5545932	Identifier	VMGahpRequest :: getTimeout		5545926	2					
ANR	5545933	ParameterList			5545926	3					
ANR	5545934	CFGEntryNode	ENTRY		5545926		True				
ANR	5545935	CFGExitNode	EXIT		5545926		True				
ANR	5545936	Symbol	m_timeout		5545926						
ANR	5545937	Function	VMGahpRequest :: setNotificationTimerId	365:0:7974:8054							
ANR	5545938	FunctionDef	VMGahpRequest :: setNotificationTimerId (int tid)		5545937	0					
ANR	5545939	CompoundStatement		367:0:8028:8054	5545937	0					
ANR	5545940	ExpressionStatement	m_user_timer_id = tid	368:1:8031:8052	5545937	0	True				
ANR	5545941	AssignmentExpression	m_user_timer_id = tid		5545937	0		=			
ANR	5545942	Identifier	m_user_timer_id		5545937	0					
ANR	5545943	Identifier	tid		5545937	1					
ANR	5545944	ReturnType	void		5545937	1					
ANR	5545945	Identifier	VMGahpRequest :: setNotificationTimerId		5545937	2					
ANR	5545946	ParameterList	int tid		5545937	3					
ANR	5545947	Parameter	int tid	366:38:8018:8024	5545937	0	True				
ANR	5545948	ParameterType	int		5545937	0					
ANR	5545949	Identifier	tid		5545937	1					
ANR	5545950	CFGEntryNode	ENTRY		5545937		True				
ANR	5545951	CFGExitNode	EXIT		5545937		True				
ANR	5545952	Symbol	tid		5545937						
ANR	5545953	Symbol	m_user_timer_id		5545937						
ANR	5545954	Function	VMGahpRequest :: getNotificationTimerId	371:0:8057:8130							
ANR	5545955	FunctionDef	VMGahpRequest :: getNotificationTimerId ()		5545954	0					
ANR	5545956	CompoundStatement		373:0:8103:8130	5545954	0					
ANR	5545957	ReturnStatement	return m_user_timer_id ;	374:1:8106:8128	5545954	0	True				
ANR	5545958	Identifier	m_user_timer_id		5545954	0					
ANR	5545959	ReturnType	int		5545954	1					
ANR	5545960	Identifier	VMGahpRequest :: getNotificationTimerId		5545954	2					
ANR	5545961	ParameterList			5545954	3					
ANR	5545962	CFGEntryNode	ENTRY		5545954		True				
ANR	5545963	CFGExitNode	EXIT		5545954		True				
ANR	5545964	Symbol	m_user_timer_id		5545954						
ANR	5545965	Function	VMGahpRequest :: getVMGahpServer	377:0:8133:8202							
ANR	5545966	FunctionDef	VMGahpRequest :: getVMGahpServer ()		5545965	0					
ANR	5545967	CompoundStatement		379:0:8182:8202	5545965	0					
ANR	5545968	ReturnStatement	return m_server ;	380:1:8185:8200	5545965	0	True				
ANR	5545969	Identifier	m_server		5545965	0					
ANR	5545970	ReturnType	VMGahpServer *		5545965	1					
ANR	5545971	Identifier	VMGahpRequest :: getVMGahpServer		5545965	2					
ANR	5545972	ParameterList			5545965	3					
ANR	5545973	CFGEntryNode	ENTRY		5545965		True				
ANR	5545974	CFGExitNode	EXIT		5545965		True				
ANR	5545975	Symbol	m_server		5545965						
ANR	5545976	Function	VMGahpRequest :: setReqId	383:0:8205:8269							
ANR	5545977	FunctionDef	VMGahpRequest :: setReqId (int id)		5545976	0					
ANR	5545978	CompoundStatement		385:0:8244:8269	5545976	0					
ANR	5545979	ExpressionStatement	m_pending_reqid = id	386:1:8247:8267	5545976	0	True				
ANR	5545980	AssignmentExpression	m_pending_reqid = id		5545976	0		=			
ANR	5545981	Identifier	m_pending_reqid		5545976	0					
ANR	5545982	Identifier	id		5545976	1					
ANR	5545983	ReturnType	void		5545976	1					
ANR	5545984	Identifier	VMGahpRequest :: setReqId		5545976	2					
ANR	5545985	ParameterList	int id		5545976	3					
ANR	5545986	Parameter	int id	384:24:8235:8240	5545976	0	True				
ANR	5545987	ParameterType	int		5545976	0					
ANR	5545988	Identifier	id		5545976	1					
ANR	5545989	CFGEntryNode	ENTRY		5545976		True				
ANR	5545990	CFGExitNode	EXIT		5545976		True				
ANR	5545991	Symbol	m_pending_reqid		5545976						
ANR	5545992	Symbol	id		5545976						
ANR	5545993	Function	VMGahpRequest :: getReqId	389:0:8273:8332							
ANR	5545994	FunctionDef	VMGahpRequest :: getReqId ()		5545993	0					
ANR	5545995	CompoundStatement		391:0:8305:8332	5545993	0					
ANR	5545996	ReturnStatement	return m_pending_reqid ;	392:1:8308:8330	5545993	0	True				
ANR	5545997	Identifier	m_pending_reqid		5545993	0					
ANR	5545998	ReturnType	int		5545993	1					
ANR	5545999	Identifier	VMGahpRequest :: getReqId		5545993	2					
ANR	5546000	ParameterList			5545993	3					
ANR	5546001	CFGEntryNode	ENTRY		5545993		True				
ANR	5546002	CFGExitNode	EXIT		5545993		True				
ANR	5546003	Symbol	m_pending_reqid		5545993						
ANR	5546004	Function	VMGahpRequest :: setResult	395:0:8336:8417							
ANR	5546005	FunctionDef	VMGahpRequest :: setResult (Gahp_Args * result)		5546004	0					
ANR	5546006	CompoundStatement		397:0:8387:8417	5546004	0					
ANR	5546007	ExpressionStatement	m_pending_result = result	398:1:8390:8415	5546004	0	True				
ANR	5546008	AssignmentExpression	m_pending_result = result		5546004	0		=			
ANR	5546009	Identifier	m_pending_result		5546004	0					
ANR	5546010	Identifier	result		5546004	1					
ANR	5546011	ReturnType	void		5546004	1					
ANR	5546012	Identifier	VMGahpRequest :: setResult		5546004	2					
ANR	5546013	ParameterList	Gahp_Args * result		5546004	3					
ANR	5546014	Parameter	Gahp_Args * result	396:25:8367:8383	5546004	0	True				
ANR	5546015	ParameterType	Gahp_Args *		5546004	0					
ANR	5546016	Identifier	result		5546004	1					
ANR	5546017	CFGEntryNode	ENTRY		5546004		True				
ANR	5546018	CFGExitNode	EXIT		5546004		True				
ANR	5546019	Symbol	result		5546004						
ANR	5546020	Symbol	m_pending_result		5546004						
ANR	5546021	Function	VMGahpRequest :: getResult	401:0:8420:8487							
ANR	5546022	FunctionDef	VMGahpRequest :: getResult ()		5546021	0					
ANR	5546023	CompoundStatement		402:27:8459:8487	5546021	0					
ANR	5546024	ReturnStatement	return m_pending_result ;	403:1:8462:8485	5546021	0	True				
ANR	5546025	Identifier	m_pending_result		5546021	0					
ANR	5546026	ReturnType	Gahp_Args *		5546021	1					
ANR	5546027	Identifier	VMGahpRequest :: getResult		5546021	2					
ANR	5546028	ParameterList			5546021	3					
ANR	5546029	CFGEntryNode	ENTRY		5546021		True				
ANR	5546030	CFGExitNode	EXIT		5546021		True				
ANR	5546031	Symbol	m_pending_result		5546021						
ANR	5546032	Function	VMGahpRequest :: checkResult	406:0:8490:9165							
ANR	5546033	FunctionDef	VMGahpRequest :: checkResult (MyString & errmsg)		5546032	0					
ANR	5546034	CompoundStatement		407:45:8541:9165	5546032	0					
ANR	5546035	IfStatement	if ( ! m_pending_result || m_pending_result -> argc != 3 )		5546032	0					
ANR	5546036	Condition	! m_pending_result || m_pending_result -> argc != 3	408:5:8548:8595	5546032	0	True				
ANR	5546037	OrExpression	! m_pending_result || m_pending_result -> argc != 3		5546032	0		||			
ANR	5546038	UnaryOperationExpression	! m_pending_result		5546032	0					
ANR	5546039	UnaryOperator	!		5546032	0					
ANR	5546040	Identifier	m_pending_result		5546032	1					
ANR	5546041	EqualityExpression	m_pending_result -> argc != 3		5546032	1		!=			
ANR	5546042	PtrMemberAccess	m_pending_result -> argc		5546032	0					
ANR	5546043	Identifier	m_pending_result		5546032	0					
ANR	5546044	Identifier	argc		5546032	1					
ANR	5546045	PrimaryExpression	3		5546032	1					
ANR	5546046	CompoundStatement		2:55:56:56	5546032	1					
ANR	5546047	ExpressionStatement	"dprintf ( D_ALWAYS , ""Bad Result of VM Request('%s')\\n"" , m_command . Value ( ) )"	409:2:8602:8679	5546032	0	True				
ANR	5546048	CallExpression	"dprintf ( D_ALWAYS , ""Bad Result of VM Request('%s')\\n"" , m_command . Value ( ) )"		5546032	0					
ANR	5546049	Callee	dprintf		5546032	0					
ANR	5546050	Identifier	dprintf		5546032	0					
ANR	5546051	ArgumentList	D_ALWAYS		5546032	1					
ANR	5546052	Argument	D_ALWAYS		5546032	0					
ANR	5546053	Identifier	D_ALWAYS		5546032	0					
ANR	5546054	Argument	"""Bad Result of VM Request('%s')\\n"""		5546032	1					
ANR	5546055	PrimaryExpression	"""Bad Result of VM Request('%s')\\n"""		5546032	0					
ANR	5546056	Argument	m_command . Value ( )		5546032	2					
ANR	5546057	CallExpression	m_command . Value ( )		5546032	0					
ANR	5546058	Callee	m_command . Value		5546032	0					
ANR	5546059	MemberAccess	m_command . Value		5546032	0					
ANR	5546060	Identifier	m_command		5546032	0					
ANR	5546061	Identifier	Value		5546032	1					
ANR	5546062	ArgumentList			5546032	1					
ANR	5546063	ExpressionStatement	errmsg = VMGAHP_ERR_INTERNAL	411:2:8683:8711	5546032	1	True				
ANR	5546064	AssignmentExpression	errmsg = VMGAHP_ERR_INTERNAL		5546032	0		=			
ANR	5546065	Identifier	errmsg		5546032	0					
ANR	5546066	Identifier	VMGAHP_ERR_INTERNAL		5546032	1					
ANR	5546067	ReturnStatement	return false ;	412:2:8715:8727	5546032	2	True				
ANR	5546068	Identifier	false		5546032	0					
ANR	5546069	IdentifierDeclStatement	"int resultno = ( int ) strtol ( m_pending_result -> argv [ 1 ] , ( char * * ) NULL , 10 ) ;"	415:1:8734:8806	5546032	1	True				
ANR	5546070	IdentifierDecl	"resultno = ( int ) strtol ( m_pending_result -> argv [ 1 ] , ( char * * ) NULL , 10 )"		5546032	0					
ANR	5546071	IdentifierDeclType	int		5546032	0					
ANR	5546072	Identifier	resultno		5546032	1					
ANR	5546073	AssignmentExpression	"resultno = ( int ) strtol ( m_pending_result -> argv [ 1 ] , ( char * * ) NULL , 10 )"		5546032	2		=			
ANR	5546074	Identifier	resultno		5546032	0					
ANR	5546075	CastExpression	"( int ) strtol ( m_pending_result -> argv [ 1 ] , ( char * * ) NULL , 10 )"		5546032	1					
ANR	5546076	CastTarget	int		5546032	0					
ANR	5546077	CallExpression	"strtol ( m_pending_result -> argv [ 1 ] , ( char * * ) NULL , 10 )"		5546032	1					
ANR	5546078	Callee	strtol		5546032	0					
ANR	5546079	Identifier	strtol		5546032	0					
ANR	5546080	ArgumentList	m_pending_result -> argv [ 1 ]		5546032	1					
ANR	5546081	Argument	m_pending_result -> argv [ 1 ]		5546032	0					
ANR	5546082	ArrayIndexing	m_pending_result -> argv [ 1 ]		5546032	0					
ANR	5546083	PtrMemberAccess	m_pending_result -> argv		5546032	0					
ANR	5546084	Identifier	m_pending_result		5546032	0					
ANR	5546085	Identifier	argv		5546032	1					
ANR	5546086	PrimaryExpression	1		5546032	1					
ANR	5546087	Argument	( char * * ) NULL		5546032	1					
ANR	5546088	CastExpression	( char * * ) NULL		5546032	0					
ANR	5546089	CastTarget	char * *		5546032	0					
ANR	5546090	Identifier	NULL		5546032	1					
ANR	5546091	Argument	10		5546032	2					
ANR	5546092	PrimaryExpression	10		5546032	0					
ANR	5546093	IfStatement	if ( resultno != 0 )		5546032	2					
ANR	5546094	Condition	resultno != 0	416:5:8813:8825	5546032	0	True				
ANR	5546095	EqualityExpression	resultno != 0		5546032	0		!=			
ANR	5546096	Identifier	resultno		5546032	0					
ANR	5546097	PrimaryExpression	0		5546032	1					
ANR	5546098	CompoundStatement		10:21:287:287	5546032	1					
ANR	5546099	Statement	dprintf	417:2:8833:8839	5546032	0	True				
ANR	5546100	Statement	(	417:9:8840:8840	5546032	1	True				
ANR	5546101	Statement	D_ALWAYS	417:10:8841:8848	5546032	2	True				
ANR	5546102	Statement	","	417:18:8849:8849	5546032	3	True				
ANR	5546103	Statement	"""Failed to execute command('%s'), """	417:20:8851:8885	5546032	4	True				
ANR	5546104	Statement	"""vmgahp error string('%s')\\n"""	418:4:8891:8919	5546032	5	True				
ANR	5546105	Statement	","	418:33:8920:8920	5546032	6	True				
ANR	5546106	Statement	m_command	419:4:8927:8935	5546032	7	True				
ANR	5546107	Statement	.	419:13:8936:8936	5546032	8	True				
ANR	5546108	Statement	Value	419:14:8937:8941	5546032	9	True				
ANR	5546109	Statement	(	419:19:8942:8942	5546032	10	True				
ANR	5546110	Statement	)	419:20:8943:8943	5546032	11	True				
ANR	5546111	Statement	","	419:21:8944:8944	5546032	12	True				
ANR	5546112	Statement	m_pending_result	419:23:8946:8961	5546032	13	True				
ANR	5546113	Statement	->	419:39:8962:8963	5546032	14	True				
ANR	5546114	Statement	argv	419:41:8964:8967	5546032	15	True				
ANR	5546115	Statement	[	419:45:8968:8968	5546032	16	True				
ANR	5546116	Statement	2	419:46:8969:8969	5546032	17	True				
ANR	5546117	Statement	]	419:47:8970:8970	5546032	18	True				
ANR	5546118	Statement	)	419:48:8971:8971	5546032	19	True				
ANR	5546119	ExpressionStatement		419:49:8972:8972	5546032	20	True				
ANR	5546120	IfStatement	"if ( ! strcmp ( m_pending_result -> argv [ 2 ] , ""NULL"" ) )"		5546032	21					
ANR	5546121	Condition	"! strcmp ( m_pending_result -> argv [ 2 ] , ""NULL"" )"	421:6:8981:9022	5546032	0	True				
ANR	5546122	UnaryOperationExpression	"! strcmp ( m_pending_result -> argv [ 2 ] , ""NULL"" )"		5546032	0					
ANR	5546123	UnaryOperator	!		5546032	0					
ANR	5546124	CallExpression	"strcmp ( m_pending_result -> argv [ 2 ] , ""NULL"" )"		5546032	1					
ANR	5546125	Callee	strcmp		5546032	0					
ANR	5546126	Identifier	strcmp		5546032	0					
ANR	5546127	ArgumentList	m_pending_result -> argv [ 2 ]		5546032	1					
ANR	5546128	Argument	m_pending_result -> argv [ 2 ]		5546032	0					
ANR	5546129	ArrayIndexing	m_pending_result -> argv [ 2 ]		5546032	0					
ANR	5546130	PtrMemberAccess	m_pending_result -> argv		5546032	0					
ANR	5546131	Identifier	m_pending_result		5546032	0					
ANR	5546132	Identifier	argv		5546032	1					
ANR	5546133	PrimaryExpression	2		5546032	1					
ANR	5546134	Argument	"""NULL"""		5546032	1					
ANR	5546135	PrimaryExpression	"""NULL"""		5546032	0					
ANR	5546136	CompoundStatement		15:51:484:484	5546032	1					
ANR	5546137	ExpressionStatement	errmsg = VMGAHP_ERR_INTERNAL	422:3:9031:9059	5546032	0	True				
ANR	5546138	AssignmentExpression	errmsg = VMGAHP_ERR_INTERNAL		5546032	0		=			
ANR	5546139	Identifier	errmsg		5546032	0					
ANR	5546140	Identifier	VMGAHP_ERR_INTERNAL		5546032	1					
ANR	5546141	ReturnStatement	return false ;	423:3:9064:9076	5546032	1	True				
ANR	5546142	Identifier	false		5546032	0					
ANR	5546143	ElseStatement	else		5546032	0					
ANR	5546144	CompoundStatement		18:8:544:544	5546032	0					
ANR	5546145	ExpressionStatement	errmsg = m_pending_result -> argv [ 2 ]	425:3:9091:9125	5546032	0	True				
ANR	5546146	AssignmentExpression	errmsg = m_pending_result -> argv [ 2 ]		5546032	0		=			
ANR	5546147	Identifier	errmsg		5546032	0					
ANR	5546148	ArrayIndexing	m_pending_result -> argv [ 2 ]		5546032	1					
ANR	5546149	PtrMemberAccess	m_pending_result -> argv		5546032	0					
ANR	5546150	Identifier	m_pending_result		5546032	0					
ANR	5546151	Identifier	argv		5546032	1					
ANR	5546152	PrimaryExpression	2		5546032	1					
ANR	5546153	ReturnStatement	return false ;	426:3:9130:9142	5546032	1	True				
ANR	5546154	Identifier	false		5546032	0					
ANR	5546155	ReturnStatement	return true ;	429:1:9152:9163	5546032	3	True				
ANR	5546156	Identifier	true		5546032	0					
ANR	5546157	ReturnType	bool		5546032	1					
ANR	5546158	Identifier	VMGahpRequest :: checkResult		5546032	2					
ANR	5546159	ParameterList	MyString & errmsg		5546032	3					
ANR	5546160	Parameter	MyString & errmsg	407:27:8523:8538	5546032	0	True				
ANR	5546161	ParameterType	MyString &		5546032	0					
ANR	5546162	Identifier	errmsg		5546032	1					
ANR	5546163	CFGEntryNode	ENTRY		5546032		True				
ANR	5546164	CFGExitNode	EXIT		5546032		True				
ANR	5546165	Symbol	strcmp		5546032						
ANR	5546166	Symbol	m_command		5546032						
ANR	5546167	Symbol	VMGAHP_ERR_INTERNAL		5546032						
ANR	5546168	Symbol	resultno		5546032						
ANR	5546169	Symbol	NULL		5546032						
ANR	5546170	Symbol	m_pending_result -> argc		5546032						
ANR	5546171	Symbol	D_ALWAYS		5546032						
ANR	5546172	Symbol	false		5546032						
ANR	5546173	Symbol	errmsg		5546032						
ANR	5546174	Symbol	* * m_pending_result		5546032						
ANR	5546175	Symbol	m_pending_result -> argv		5546032						
ANR	5546176	Symbol	strtol		5546032						
ANR	5546177	Symbol	* m_pending_result		5546032						
ANR	5546178	Symbol	true		5546032						
ANR	5546179	Symbol	m_command . Value		5546032						
ANR	5546180	Symbol	* m_pending_result -> argv		5546032						
ANR	5546181	Symbol	m_pending_result		5546032						
ANR	5546182	Function	VMGahpRequest :: setPendingStatus	432:0:9168:9254							
ANR	5546183	FunctionDef	VMGahpRequest :: setPendingStatus (reqstatus status)		5546182	0					
ANR	5546184	CompoundStatement		433:50:9224:9254	5546182	0					
ANR	5546185	ExpressionStatement	m_pending_status = status	434:1:9227:9252	5546182	0	True				
ANR	5546186	AssignmentExpression	m_pending_status = status		5546182	0		=			
ANR	5546187	Identifier	m_pending_status		5546182	0					
ANR	5546188	Identifier	status		5546182	1					
ANR	5546189	ReturnType	void		5546182	1					
ANR	5546190	Identifier	VMGahpRequest :: setPendingStatus		5546182	2					
ANR	5546191	ParameterList	reqstatus status		5546182	3					
ANR	5546192	Parameter	reqstatus status	433:32:9206:9221	5546182	0	True				
ANR	5546193	ParameterType	reqstatus		5546182	0					
ANR	5546194	Identifier	status		5546182	1					
ANR	5546195	CFGEntryNode	ENTRY		5546182		True				
ANR	5546196	CFGExitNode	EXIT		5546182		True				
ANR	5546197	Symbol	m_pending_status		5546182						
ANR	5546198	Symbol	status		5546182						
ANR	5546199	Function	VMGahpRequest :: getPendingStatus	437:0:9258:9330							
ANR	5546200	FunctionDef	VMGahpRequest :: getPendingStatus ()		5546199	0					
ANR	5546201	CompoundStatement		437:44:9302:9330	5546199	0					
ANR	5546202	ReturnStatement	return m_pending_status ;	438:1:9305:9328	5546199	0	True				
ANR	5546203	Identifier	m_pending_status		5546199	0					
ANR	5546204	ReturnType	reqstatus		5546199	1					
ANR	5546205	Identifier	VMGahpRequest :: getPendingStatus		5546199	2					
ANR	5546206	ParameterList			5546199	3					
ANR	5546207	CFGEntryNode	ENTRY		5546199		True				
ANR	5546208	CFGExitNode	EXIT		5546199		True				
ANR	5546209	Symbol	m_pending_status		5546199						
