command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4977742	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_test_stat_wrapper.cpp								
ANR	4977743	ClassDef	StatOp	23:0:864:934							
ANR	4977744	DeclStmt									
ANR	4977745	Decl							const char	const char *	str
ANR	4977746	DeclStmt									
ANR	4977747	Decl							StatWrapper :: StatOpType	StatWrapper :: StatOpType	type
ANR	4977748	DeclStmt									
ANR	4977749	Decl							void	void ( const char * argv0 )	Help
ANR	4977750	DeclStmt									
ANR	4977751	Decl							const StatOp	const StatOp * ( const char * name )	get_op
ANR	4977752	DeclStmt									
ANR	4977753	Decl							const char	const char * ( StatWrapper :: StatOpType which )	get_op_name
ANR	4977754	DeclStmt									
ANR	4977755	Decl							void	"void ( StatWrapper & stat , const char * label )"	dump_status
ANR	4977756	DeclStmt									
ANR	4977757	Decl							const StatOp	const StatOp [ ]	Ops
ANR	4977758	Function	main	44:0:1508:9024							
ANR	4977759	FunctionDef	"main (int argc , const char * argv [ ])"		4977758	0					
ANR	4977760	CompoundStatement		46:0:1549:9024	4977758	0					
ANR	4977761	IdentifierDeclStatement	int fd ;	47:1:1552:1562	4977758	0	True				
ANR	4977762	IdentifierDecl	fd		4977758	0					
ANR	4977763	IdentifierDeclType	int		4977758	0					
ANR	4977764	Identifier	fd		4977758	1					
ANR	4977765	IdentifierDeclStatement	const char * path ;	48:1:1565:1582	4977758	1	True				
ANR	4977766	IdentifierDecl	* path		4977758	0					
ANR	4977767	IdentifierDeclType	const char *		4977758	0					
ANR	4977768	Identifier	path		4977758	1					
ANR	4977769	IdentifierDeclStatement	StatWrapper * wrapper = NULL ;	49:1:1585:1613	4977758	2	True				
ANR	4977770	IdentifierDecl	* wrapper = NULL		4977758	0					
ANR	4977771	IdentifierDeclType	StatWrapper *		4977758	0					
ANR	4977772	Identifier	wrapper		4977758	1					
ANR	4977773	AssignmentExpression	* wrapper = NULL		4977758	2		=			
ANR	4977774	Identifier	NULL		4977758	0					
ANR	4977775	Identifier	NULL		4977758	1					
ANR	4977776	IdentifierDeclStatement	"const char * usage = ""test [-h|--help] <file> [operations]"" ;"	50:1:1616:1676	4977758	3	True				
ANR	4977777	IdentifierDecl	"* usage = ""test [-h|--help] <file> [operations]"""		4977758	0					
ANR	4977778	IdentifierDeclType	const char *		4977758	0					
ANR	4977779	Identifier	usage		4977758	1					
ANR	4977780	AssignmentExpression	"* usage = ""test [-h|--help] <file> [operations]"""		4977758	2		=			
ANR	4977781	Identifier	usage		4977758	0					
ANR	4977782	PrimaryExpression	"""test [-h|--help] <file> [operations]"""		4977758	1					
ANR	4977783	IfStatement	if ( argc < 2 )		4977758	4					
ANR	4977784	Condition	argc < 2	53:6:1685:1692	4977758	0	True				
ANR	4977785	RelationalExpression	argc < 2		4977758	0		<			
ANR	4977786	Identifier	argc		4977758	0					
ANR	4977787	PrimaryExpression	2		4977758	1					
ANR	4977788	CompoundStatement		8:17:146:146	4977758	1					
ANR	4977789	ExpressionStatement	"fprintf ( stderr , ""no file specified\\n"" )"	54:2:1700:1740	4977758	0	True				
ANR	4977790	CallExpression	"fprintf ( stderr , ""no file specified\\n"" )"		4977758	0					
ANR	4977791	Callee	fprintf		4977758	0					
ANR	4977792	Identifier	fprintf		4977758	0					
ANR	4977793	ArgumentList	stderr		4977758	1					
ANR	4977794	Argument	stderr		4977758	0					
ANR	4977795	Identifier	stderr		4977758	0					
ANR	4977796	Argument	"""no file specified\\n"""		4977758	1					
ANR	4977797	PrimaryExpression	"""no file specified\\n"""		4977758	0					
ANR	4977798	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , usage )"	55:2:1744:1776	4977758	1	True				
ANR	4977799	CallExpression	"fprintf ( stderr , ""%s\\n"" , usage )"		4977758	0					
ANR	4977800	Callee	fprintf		4977758	0					
ANR	4977801	Identifier	fprintf		4977758	0					
ANR	4977802	ArgumentList	stderr		4977758	1					
ANR	4977803	Argument	stderr		4977758	0					
ANR	4977804	Identifier	stderr		4977758	0					
ANR	4977805	Argument	"""%s\\n"""		4977758	1					
ANR	4977806	PrimaryExpression	"""%s\\n"""		4977758	0					
ANR	4977807	Argument	usage		4977758	2					
ANR	4977808	Identifier	usage		4977758	0					
ANR	4977809	ExpressionStatement	exit ( 1 )	56:2:1780:1789	4977758	2	True				
ANR	4977810	CallExpression	exit ( 1 )		4977758	0					
ANR	4977811	Callee	exit		4977758	0					
ANR	4977812	Identifier	exit		4977758	0					
ANR	4977813	ArgumentList	1		4977758	1					
ANR	4977814	Argument	1		4977758	0					
ANR	4977815	PrimaryExpression	1		4977758	0					
ANR	4977816	ExpressionStatement	path = argv [ 1 ]	58:1:1795:1809	4977758	5	True				
ANR	4977817	AssignmentExpression	path = argv [ 1 ]		4977758	0		=			
ANR	4977818	Identifier	path		4977758	0					
ANR	4977819	ArrayIndexing	argv [ 1 ]		4977758	1					
ANR	4977820	Identifier	argv		4977758	0					
ANR	4977821	PrimaryExpression	1		4977758	1					
ANR	4977822	IfStatement	if ( * path == '-' )		4977758	6					
ANR	4977823	Condition	* path == '-'	59:6:1817:1828	4977758	0	True				
ANR	4977824	EqualityExpression	* path == '-'		4977758	0		==			
ANR	4977825	UnaryOperationExpression	* path		4977758	0					
ANR	4977826	UnaryOperator	*		4977758	0					
ANR	4977827	Identifier	path		4977758	1					
ANR	4977828	PrimaryExpression	'-'		4977758	1					
ANR	4977829	CompoundStatement		14:21:282:282	4977758	1					
ANR	4977830	ExpressionStatement	"fprintf ( stderr , ""no file specified\\n"" )"	60:2:1836:1876	4977758	0	True				
ANR	4977831	CallExpression	"fprintf ( stderr , ""no file specified\\n"" )"		4977758	0					
ANR	4977832	Callee	fprintf		4977758	0					
ANR	4977833	Identifier	fprintf		4977758	0					
ANR	4977834	ArgumentList	stderr		4977758	1					
ANR	4977835	Argument	stderr		4977758	0					
ANR	4977836	Identifier	stderr		4977758	0					
ANR	4977837	Argument	"""no file specified\\n"""		4977758	1					
ANR	4977838	PrimaryExpression	"""no file specified\\n"""		4977758	0					
ANR	4977839	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , usage )"	61:2:1880:1912	4977758	1	True				
ANR	4977840	CallExpression	"fprintf ( stderr , ""%s\\n"" , usage )"		4977758	0					
ANR	4977841	Callee	fprintf		4977758	0					
ANR	4977842	Identifier	fprintf		4977758	0					
ANR	4977843	ArgumentList	stderr		4977758	1					
ANR	4977844	Argument	stderr		4977758	0					
ANR	4977845	Identifier	stderr		4977758	0					
ANR	4977846	Argument	"""%s\\n"""		4977758	1					
ANR	4977847	PrimaryExpression	"""%s\\n"""		4977758	0					
ANR	4977848	Argument	usage		4977758	2					
ANR	4977849	Identifier	usage		4977758	0					
ANR	4977850	ExpressionStatement	Help ( argv [ 0 ] )	62:2:1916:1931	4977758	2	True				
ANR	4977851	CallExpression	Help ( argv [ 0 ] )		4977758	0					
ANR	4977852	Callee	Help		4977758	0					
ANR	4977853	Identifier	Help		4977758	0					
ANR	4977854	ArgumentList	argv [ 0 ]		4977758	1					
ANR	4977855	Argument	argv [ 0 ]		4977758	0					
ANR	4977856	ArrayIndexing	argv [ 0 ]		4977758	0					
ANR	4977857	Identifier	argv		4977758	0					
ANR	4977858	PrimaryExpression	0		4977758	1					
ANR	4977859	ExpressionStatement	exit ( 1 )	63:2:1935:1944	4977758	3	True				
ANR	4977860	CallExpression	exit ( 1 )		4977758	0					
ANR	4977861	Callee	exit		4977758	0					
ANR	4977862	Identifier	exit		4977758	0					
ANR	4977863	ArgumentList	1		4977758	1					
ANR	4977864	Argument	1		4977758	0					
ANR	4977865	PrimaryExpression	1		4977758	0					
ANR	4977866	ExpressionStatement	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"	65:1:1950:1997	4977758	7	True				
ANR	4977867	AssignmentExpression	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"		4977758	0		=			
ANR	4977868	Identifier	fd		4977758	0					
ANR	4977869	CallExpression	"safe_open_wrapper_follow ( path , O_RDONLY )"		4977758	1					
ANR	4977870	Callee	safe_open_wrapper_follow		4977758	0					
ANR	4977871	Identifier	safe_open_wrapper_follow		4977758	0					
ANR	4977872	ArgumentList	path		4977758	1					
ANR	4977873	Argument	path		4977758	0					
ANR	4977874	Identifier	path		4977758	0					
ANR	4977875	Argument	O_RDONLY		4977758	1					
ANR	4977876	Identifier	O_RDONLY		4977758	0					
ANR	4977877	ExpressionStatement	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"	66:1:2000:2050	4977758	8	True				
ANR	4977878	CallExpression	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"		4977758	0					
ANR	4977879	Callee	printf		4977758	0					
ANR	4977880	Identifier	printf		4977758	0					
ANR	4977881	ArgumentList	"""path set to '%s', fd to %d\\n"""		4977758	1					
ANR	4977882	Argument	"""path set to '%s', fd to %d\\n"""		4977758	0					
ANR	4977883	PrimaryExpression	"""path set to '%s', fd to %d\\n"""		4977758	0					
ANR	4977884	Argument	path		4977758	1					
ANR	4977885	Identifier	path		4977758	0					
ANR	4977886	Argument	fd		4977758	2					
ANR	4977887	Identifier	fd		4977758	0					
ANR	4977888	IdentifierDeclStatement	int argno ;	68:1:2054:2064	4977758	9	True				
ANR	4977889	IdentifierDecl	argno		4977758	0					
ANR	4977890	IdentifierDeclType	int		4977758	0					
ANR	4977891	Identifier	argno		4977758	1					
ANR	4977892	IdentifierDeclStatement	int skip = 0 ;	69:1:2067:2080	4977758	10	True				
ANR	4977893	IdentifierDecl	skip = 0		4977758	0					
ANR	4977894	IdentifierDeclType	int		4977758	0					
ANR	4977895	Identifier	skip		4977758	1					
ANR	4977896	AssignmentExpression	skip = 0		4977758	2		=			
ANR	4977897	Identifier	skip		4977758	0					
ANR	4977898	PrimaryExpression	0		4977758	1					
ANR	4977899	ForStatement	for ( argno = 2 ; argno < argc ; argno ++ )		4977758	11					
ANR	4977900	ForInit	argno = 2 ;	70:6:2088:2097	4977758	0	True				
ANR	4977901	AssignmentExpression	argno = 2		4977758	0		=			
ANR	4977902	Identifier	argno		4977758	0					
ANR	4977903	PrimaryExpression	2		4977758	1					
ANR	4977904	Condition	argno < argc	70:17:2099:2110	4977758	1	True				
ANR	4977905	RelationalExpression	argno < argc		4977758	0		<			
ANR	4977906	Identifier	argno		4977758	0					
ANR	4977907	Identifier	argc		4977758	1					
ANR	4977908	PostIncDecOperationExpression	argno ++	70:32:2114:2120	4977758	2	True				
ANR	4977909	Identifier	argno		4977758	0					
ANR	4977910	IncDec	++		4977758	1					
ANR	4977911	CompoundStatement		33:2:709:732	4977758	3					
ANR	4977912	IfStatement	if ( skip )		4977758	0					
ANR	4977913	Condition	skip	71:7:2133:2136	4977758	0	True				
ANR	4977914	Identifier	skip		4977758	0					
ANR	4977915	CompoundStatement		26:14:590:590	4977758	1					
ANR	4977916	ExpressionStatement	skip --	72:3:2145:2151	4977758	0	True				
ANR	4977917	PostIncDecOperationExpression	skip --		4977758	0					
ANR	4977918	Identifier	skip		4977758	0					
ANR	4977919	IncDec	--		4977758	1					
ANR	4977920	ContinueStatement	continue ;	73:3:2156:2164	4977758	1	True				
ANR	4977921	IdentifierDeclStatement	const char * arg = argv [ argno ] ;	75:2:2172:2201	4977758	1	True				
ANR	4977922	IdentifierDecl	* arg = argv [ argno ]		4977758	0					
ANR	4977923	IdentifierDeclType	const char *		4977758	0					
ANR	4977924	Identifier	arg		4977758	1					
ANR	4977925	AssignmentExpression	* arg = argv [ argno ]		4977758	2		=			
ANR	4977926	Identifier	arg		4977758	0					
ANR	4977927	ArrayIndexing	argv [ argno ]		4977758	1					
ANR	4977928	Identifier	argv		4977758	0					
ANR	4977929	Identifier	argno		4977758	1					
ANR	4977930	IdentifierDeclStatement	const char * arg1 = NULL ;	76:2:2205:2228	4977758	2	True				
ANR	4977931	IdentifierDecl	* arg1 = NULL		4977758	0					
ANR	4977932	IdentifierDeclType	const char *		4977758	0					
ANR	4977933	Identifier	arg1		4977758	1					
ANR	4977934	AssignmentExpression	* arg1 = NULL		4977758	2		=			
ANR	4977935	Identifier	NULL		4977758	0					
ANR	4977936	Identifier	NULL		4977758	1					
ANR	4977937	IdentifierDeclStatement	const char * arg2 = NULL ;	77:2:2232:2255	4977758	3	True				
ANR	4977938	IdentifierDecl	* arg2 = NULL		4977758	0					
ANR	4977939	IdentifierDeclType	const char *		4977758	0					
ANR	4977940	Identifier	arg2		4977758	1					
ANR	4977941	AssignmentExpression	* arg2 = NULL		4977758	2		=			
ANR	4977942	Identifier	NULL		4977758	0					
ANR	4977943	Identifier	NULL		4977758	1					
ANR	4977944	IdentifierDeclStatement	const char * arg3 = NULL ;	78:2:2259:2282	4977758	4	True				
ANR	4977945	IdentifierDecl	* arg3 = NULL		4977758	0					
ANR	4977946	IdentifierDeclType	const char *		4977758	0					
ANR	4977947	Identifier	arg3		4977758	1					
ANR	4977948	AssignmentExpression	* arg3 = NULL		4977758	2		=			
ANR	4977949	Identifier	NULL		4977758	0					
ANR	4977950	Identifier	NULL		4977758	1					
ANR	4977951	IfStatement	if ( arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' ) )		4977758	5					
ANR	4977952	Condition	arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )	79:7:2291:2343	4977758	0	True				
ANR	4977953	AndExpression	arg && ( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )		4977758	0		&&			
ANR	4977954	Identifier	arg		4977758	0					
ANR	4977955	AndExpression	( argc > ( argno + 1 ) ) && ( * argv [ argno + 1 ] != '-' )		4977758	1		&&			
ANR	4977956	RelationalExpression	argc > ( argno + 1 )		4977758	0		>			
ANR	4977957	Identifier	argc		4977758	0					
ANR	4977958	AdditiveExpression	argno + 1		4977758	1		+			
ANR	4977959	Identifier	argno		4977758	0					
ANR	4977960	PrimaryExpression	1		4977758	1					
ANR	4977961	EqualityExpression	* argv [ argno + 1 ] != '-'		4977758	1		!=			
ANR	4977962	UnaryOperationExpression	* argv [ argno + 1 ]		4977758	0					
ANR	4977963	UnaryOperator	*		4977758	0					
ANR	4977964	ArrayIndexing	argv [ argno + 1 ]		4977758	1					
ANR	4977965	Identifier	argv		4977758	0					
ANR	4977966	AdditiveExpression	argno + 1		4977758	1		+			
ANR	4977967	Identifier	argno		4977758	0					
ANR	4977968	PrimaryExpression	1		4977758	1					
ANR	4977969	PrimaryExpression	'-'		4977758	1					
ANR	4977970	CompoundStatement		34:64:798:798	4977758	1					
ANR	4977971	ExpressionStatement	arg1 = argv [ argno + 1 ]	80:3:2353:2373	4977758	0	True				
ANR	4977972	AssignmentExpression	arg1 = argv [ argno + 1 ]		4977758	0		=			
ANR	4977973	Identifier	arg1		4977758	0					
ANR	4977974	ArrayIndexing	argv [ argno + 1 ]		4977758	1					
ANR	4977975	Identifier	argv		4977758	0					
ANR	4977976	AdditiveExpression	argno + 1		4977758	1		+			
ANR	4977977	Identifier	argno		4977758	0					
ANR	4977978	PrimaryExpression	1		4977758	1					
ANR	4977979	IfStatement	if ( arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' ) )		4977758	6					
ANR	4977980	Condition	arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )	82:7:2386:2438	4977758	0	True				
ANR	4977981	AndExpression	arg1 && ( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )		4977758	0		&&			
ANR	4977982	Identifier	arg1		4977758	0					
ANR	4977983	AndExpression	( argc > ( argno + 2 ) ) && ( * argv [ argno + 2 ] != '-' )		4977758	1		&&			
ANR	4977984	RelationalExpression	argc > ( argno + 2 )		4977758	0		>			
ANR	4977985	Identifier	argc		4977758	0					
ANR	4977986	AdditiveExpression	argno + 2		4977758	1		+			
ANR	4977987	Identifier	argno		4977758	0					
ANR	4977988	PrimaryExpression	2		4977758	1					
ANR	4977989	EqualityExpression	* argv [ argno + 2 ] != '-'		4977758	1		!=			
ANR	4977990	UnaryOperationExpression	* argv [ argno + 2 ]		4977758	0					
ANR	4977991	UnaryOperator	*		4977758	0					
ANR	4977992	ArrayIndexing	argv [ argno + 2 ]		4977758	1					
ANR	4977993	Identifier	argv		4977758	0					
ANR	4977994	AdditiveExpression	argno + 2		4977758	1		+			
ANR	4977995	Identifier	argno		4977758	0					
ANR	4977996	PrimaryExpression	2		4977758	1					
ANR	4977997	PrimaryExpression	'-'		4977758	1					
ANR	4977998	CompoundStatement		37:64:893:893	4977758	1					
ANR	4977999	ExpressionStatement	arg2 = argv [ argno + 2 ]	83:3:2448:2468	4977758	0	True				
ANR	4978000	AssignmentExpression	arg2 = argv [ argno + 2 ]		4977758	0		=			
ANR	4978001	Identifier	arg2		4977758	0					
ANR	4978002	ArrayIndexing	argv [ argno + 2 ]		4977758	1					
ANR	4978003	Identifier	argv		4977758	0					
ANR	4978004	AdditiveExpression	argno + 2		4977758	1		+			
ANR	4978005	Identifier	argno		4977758	0					
ANR	4978006	PrimaryExpression	2		4977758	1					
ANR	4978007	IfStatement	if ( arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' ) )		4977758	7					
ANR	4978008	Condition	arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )	85:7:2481:2533	4977758	0	True				
ANR	4978009	AndExpression	arg2 && ( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )		4977758	0		&&			
ANR	4978010	Identifier	arg2		4977758	0					
ANR	4978011	AndExpression	( argc > ( argno + 3 ) ) && ( * argv [ argno + 3 ] != '-' )		4977758	1		&&			
ANR	4978012	RelationalExpression	argc > ( argno + 3 )		4977758	0		>			
ANR	4978013	Identifier	argc		4977758	0					
ANR	4978014	AdditiveExpression	argno + 3		4977758	1		+			
ANR	4978015	Identifier	argno		4977758	0					
ANR	4978016	PrimaryExpression	3		4977758	1					
ANR	4978017	EqualityExpression	* argv [ argno + 3 ] != '-'		4977758	1		!=			
ANR	4978018	UnaryOperationExpression	* argv [ argno + 3 ]		4977758	0					
ANR	4978019	UnaryOperator	*		4977758	0					
ANR	4978020	ArrayIndexing	argv [ argno + 3 ]		4977758	1					
ANR	4978021	Identifier	argv		4977758	0					
ANR	4978022	AdditiveExpression	argno + 3		4977758	1		+			
ANR	4978023	Identifier	argno		4977758	0					
ANR	4978024	PrimaryExpression	3		4977758	1					
ANR	4978025	PrimaryExpression	'-'		4977758	1					
ANR	4978026	CompoundStatement		40:64:988:988	4977758	1					
ANR	4978027	ExpressionStatement	arg3 = argv [ argno + 3 ]	86:3:2543:2563	4977758	0	True				
ANR	4978028	AssignmentExpression	arg3 = argv [ argno + 3 ]		4977758	0		=			
ANR	4978029	Identifier	arg3		4977758	0					
ANR	4978030	ArrayIndexing	argv [ argno + 3 ]		4977758	1					
ANR	4978031	Identifier	argv		4977758	0					
ANR	4978032	AdditiveExpression	argno + 3		4977758	1		+			
ANR	4978033	Identifier	argno		4977758	0					
ANR	4978034	PrimaryExpression	3		4977758	1					
ANR	4978035	IfStatement	"if ( ( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) ) )"		4977758	8					
ANR	4978036	Condition	"( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) )"	89:7:2577:2627	4977758	0	True				
ANR	4978037	OrExpression	"( ! strcmp ( arg , ""--help"" ) ) || ( ! strcmp ( arg , ""-h"" ) )"		4977758	0		||			
ANR	4978038	UnaryOperationExpression	"! strcmp ( arg , ""--help"" )"		4977758	0					
ANR	4978039	UnaryOperator	!		4977758	0					
ANR	4978040	CallExpression	"strcmp ( arg , ""--help"" )"		4977758	1					
ANR	4978041	Callee	strcmp		4977758	0					
ANR	4978042	Identifier	strcmp		4977758	0					
ANR	4978043	ArgumentList	arg		4977758	1					
ANR	4978044	Argument	arg		4977758	0					
ANR	4978045	Identifier	arg		4977758	0					
ANR	4978046	Argument	"""--help"""		4977758	1					
ANR	4978047	PrimaryExpression	"""--help"""		4977758	0					
ANR	4978048	UnaryOperationExpression	"! strcmp ( arg , ""-h"" )"		4977758	1					
ANR	4978049	UnaryOperator	!		4977758	0					
ANR	4978050	CallExpression	"strcmp ( arg , ""-h"" )"		4977758	1					
ANR	4978051	Callee	strcmp		4977758	0					
ANR	4978052	Identifier	strcmp		4977758	0					
ANR	4978053	ArgumentList	arg		4977758	1					
ANR	4978054	Argument	arg		4977758	0					
ANR	4978055	Identifier	arg		4977758	0					
ANR	4978056	Argument	"""-h"""		4977758	1					
ANR	4978057	PrimaryExpression	"""-h"""		4977758	0					
ANR	4978058	CompoundStatement		44:61:1081:1081	4977758	1					
ANR	4978059	ExpressionStatement	Help ( argv [ 0 ] )	90:3:2636:2651	4977758	0	True				
ANR	4978060	CallExpression	Help ( argv [ 0 ] )		4977758	0					
ANR	4978061	Callee	Help		4977758	0					
ANR	4978062	Identifier	Help		4977758	0					
ANR	4978063	ArgumentList	argv [ 0 ]		4977758	1					
ANR	4978064	Argument	argv [ 0 ]		4977758	0					
ANR	4978065	ArrayIndexing	argv [ 0 ]		4977758	0					
ANR	4978066	Identifier	argv		4977758	0					
ANR	4978067	PrimaryExpression	0		4977758	1					
ANR	4978068	ExpressionStatement	exit ( 0 )	91:3:2656:2665	4977758	1	True				
ANR	4978069	CallExpression	exit ( 0 )		4977758	0					
ANR	4978070	Callee	exit		4977758	0					
ANR	4978071	Identifier	exit		4977758	0					
ANR	4978072	ArgumentList	0		4977758	1					
ANR	4978073	Argument	0		4977758	0					
ANR	4978074	PrimaryExpression	0		4977758	0					
ANR	4978075	ElseStatement	else		4977758	0					
ANR	4978076	IfStatement	"if ( ( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) ) )"		4977758	0					
ANR	4978077	Condition	"( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) )"	94:12:2684:2734	4977758	0	True				
ANR	4978078	OrExpression	"( ! strcmp ( arg , ""--path"" ) ) || ( ! strcmp ( arg , ""-p"" ) )"		4977758	0		||			
ANR	4978079	UnaryOperationExpression	"! strcmp ( arg , ""--path"" )"		4977758	0					
ANR	4978080	UnaryOperator	!		4977758	0					
ANR	4978081	CallExpression	"strcmp ( arg , ""--path"" )"		4977758	1					
ANR	4978082	Callee	strcmp		4977758	0					
ANR	4978083	Identifier	strcmp		4977758	0					
ANR	4978084	ArgumentList	arg		4977758	1					
ANR	4978085	Argument	arg		4977758	0					
ANR	4978086	Identifier	arg		4977758	0					
ANR	4978087	Argument	"""--path"""		4977758	1					
ANR	4978088	PrimaryExpression	"""--path"""		4977758	0					
ANR	4978089	UnaryOperationExpression	"! strcmp ( arg , ""-p"" )"		4977758	1					
ANR	4978090	UnaryOperator	!		4977758	0					
ANR	4978091	CallExpression	"strcmp ( arg , ""-p"" )"		4977758	1					
ANR	4978092	Callee	strcmp		4977758	0					
ANR	4978093	Identifier	strcmp		4977758	0					
ANR	4978094	ArgumentList	arg		4977758	1					
ANR	4978095	Argument	arg		4977758	0					
ANR	4978096	Identifier	arg		4977758	0					
ANR	4978097	Argument	"""-p"""		4977758	1					
ANR	4978098	PrimaryExpression	"""-p"""		4977758	0					
ANR	4978099	CompoundStatement		49:66:1188:1188	4977758	1					
ANR	4978100	IfStatement	if ( ! arg1 )		4977758	0					
ANR	4978101	Condition	! arg1	95:8:2748:2752	4977758	0	True				
ANR	4978102	UnaryOperationExpression	! arg1		4977758	0					
ANR	4978103	UnaryOperator	!		4977758	0					
ANR	4978104	Identifier	arg1		4977758	1					
ANR	4978105	CompoundStatement		50:16:1206:1206	4977758	1					
ANR	4978106	ExpressionStatement	"fprintf ( stderr , ""--path usage: --path <path>\\n"" )"	96:4:2762:2812	4977758	0	True				
ANR	4978107	CallExpression	"fprintf ( stderr , ""--path usage: --path <path>\\n"" )"		4977758	0					
ANR	4978108	Callee	fprintf		4977758	0					
ANR	4978109	Identifier	fprintf		4977758	0					
ANR	4978110	ArgumentList	stderr		4977758	1					
ANR	4978111	Argument	stderr		4977758	0					
ANR	4978112	Identifier	stderr		4977758	0					
ANR	4978113	Argument	"""--path usage: --path <path>\\n"""		4977758	1					
ANR	4978114	PrimaryExpression	"""--path usage: --path <path>\\n"""		4977758	0					
ANR	4978115	ExpressionStatement	exit ( 1 )	97:4:2818:2827	4977758	1	True				
ANR	4978116	CallExpression	exit ( 1 )		4977758	0					
ANR	4978117	Callee	exit		4977758	0					
ANR	4978118	Identifier	exit		4977758	0					
ANR	4978119	ArgumentList	1		4977758	1					
ANR	4978120	Argument	1		4977758	0					
ANR	4978121	PrimaryExpression	1		4977758	0					
ANR	4978122	ExpressionStatement	path = arg1	99:3:2837:2848	4977758	1	True				
ANR	4978123	AssignmentExpression	path = arg1		4977758	0		=			
ANR	4978124	Identifier	path		4977758	0					
ANR	4978125	Identifier	arg1		4977758	1					
ANR	4978126	ExpressionStatement	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"	100:3:2853:2900	4977758	2	True				
ANR	4978127	AssignmentExpression	"fd = safe_open_wrapper_follow ( path , O_RDONLY )"		4977758	0		=			
ANR	4978128	Identifier	fd		4977758	0					
ANR	4978129	CallExpression	"safe_open_wrapper_follow ( path , O_RDONLY )"		4977758	1					
ANR	4978130	Callee	safe_open_wrapper_follow		4977758	0					
ANR	4978131	Identifier	safe_open_wrapper_follow		4977758	0					
ANR	4978132	ArgumentList	path		4977758	1					
ANR	4978133	Argument	path		4977758	0					
ANR	4978134	Identifier	path		4977758	0					
ANR	4978135	Argument	O_RDONLY		4977758	1					
ANR	4978136	Identifier	O_RDONLY		4977758	0					
ANR	4978137	ExpressionStatement	skip = 1	101:3:2905:2913	4977758	3	True				
ANR	4978138	AssignmentExpression	skip = 1		4977758	0		=			
ANR	4978139	Identifier	skip		4977758	0					
ANR	4978140	PrimaryExpression	1		4977758	1					
ANR	4978141	ExpressionStatement	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"	102:3:2918:2968	4977758	4	True				
ANR	4978142	CallExpression	"printf ( ""path set to '%s', fd to %d\\n"" , path , fd )"		4977758	0					
ANR	4978143	Callee	printf		4977758	0					
ANR	4978144	Identifier	printf		4977758	0					
ANR	4978145	ArgumentList	"""path set to '%s', fd to %d\\n"""		4977758	1					
ANR	4978146	Argument	"""path set to '%s', fd to %d\\n"""		4977758	0					
ANR	4978147	PrimaryExpression	"""path set to '%s', fd to %d\\n"""		4977758	0					
ANR	4978148	Argument	path		4977758	1					
ANR	4978149	Identifier	path		4977758	0					
ANR	4978150	Argument	fd		4977758	2					
ANR	4978151	Identifier	fd		4977758	0					
ANR	4978152	ElseStatement	else		4977758	0					
ANR	4978153	IfStatement	"if ( ( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) ) )"		4977758	0					
ANR	4978154	Condition	"( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) )"	105:12:2987:3039	4977758	0	True				
ANR	4978155	OrExpression	"( ! strcmp ( arg , ""--create"" ) ) || ( ! strcmp ( arg , ""-c"" ) )"		4977758	0		||			
ANR	4978156	UnaryOperationExpression	"! strcmp ( arg , ""--create"" )"		4977758	0					
ANR	4978157	UnaryOperator	!		4977758	0					
ANR	4978158	CallExpression	"strcmp ( arg , ""--create"" )"		4977758	1					
ANR	4978159	Callee	strcmp		4977758	0					
ANR	4978160	Identifier	strcmp		4977758	0					
ANR	4978161	ArgumentList	arg		4977758	1					
ANR	4978162	Argument	arg		4977758	0					
ANR	4978163	Identifier	arg		4977758	0					
ANR	4978164	Argument	"""--create"""		4977758	1					
ANR	4978165	PrimaryExpression	"""--create"""		4977758	0					
ANR	4978166	UnaryOperationExpression	"! strcmp ( arg , ""-c"" )"		4977758	1					
ANR	4978167	UnaryOperator	!		4977758	0					
ANR	4978168	CallExpression	"strcmp ( arg , ""-c"" )"		4977758	1					
ANR	4978169	Callee	strcmp		4977758	0					
ANR	4978170	Identifier	strcmp		4977758	0					
ANR	4978171	ArgumentList	arg		4977758	1					
ANR	4978172	Argument	arg		4977758	0					
ANR	4978173	Identifier	arg		4977758	0					
ANR	4978174	Argument	"""-c"""		4977758	1					
ANR	4978175	PrimaryExpression	"""-c"""		4977758	0					
ANR	4978176	CompoundStatement		111:3:2992:3002	4977758	1					
ANR	4978177	IfStatement	if ( ! arg1 || ! arg2 )		4977758	0					
ANR	4978178	Condition	! arg1 || ! arg2	107:8:3054:3067	4977758	0	True				
ANR	4978179	OrExpression	! arg1 || ! arg2		4977758	0		||			
ANR	4978180	UnaryOperationExpression	! arg1		4977758	0					
ANR	4978181	UnaryOperator	!		4977758	0					
ANR	4978182	Identifier	arg1		4977758	1					
ANR	4978183	UnaryOperationExpression	! arg2		4977758	1					
ANR	4978184	UnaryOperator	!		4977758	0					
ANR	4978185	Identifier	arg2		4977758	1					
ANR	4978186	CompoundStatement		62:25:1521:1521	4977758	1					
ANR	4978187	ExpressionStatement	"fprintf ( stderr , ""--create usage: --create <op> <which>\\n"" )"	108:4:3077:3137	4977758	0	True				
ANR	4978188	CallExpression	"fprintf ( stderr , ""--create usage: --create <op> <which>\\n"" )"		4977758	0					
ANR	4978189	Callee	fprintf		4977758	0					
ANR	4978190	Identifier	fprintf		4977758	0					
ANR	4978191	ArgumentList	stderr		4977758	1					
ANR	4978192	Argument	stderr		4977758	0					
ANR	4978193	Identifier	stderr		4977758	0					
ANR	4978194	Argument	"""--create usage: --create <op> <which>\\n"""		4977758	1					
ANR	4978195	PrimaryExpression	"""--create usage: --create <op> <which>\\n"""		4977758	0					
ANR	4978196	ExpressionStatement	exit ( 1 )	109:4:3143:3152	4977758	1	True				
ANR	4978197	CallExpression	exit ( 1 )		4977758	0					
ANR	4978198	Callee	exit		4977758	0					
ANR	4978199	Identifier	exit		4977758	0					
ANR	4978200	ArgumentList	1		4977758	1					
ANR	4978201	Argument	1		4977758	0					
ANR	4978202	PrimaryExpression	1		4977758	0					
ANR	4978203	ExpressionStatement	skip = 2	112:3:3163:3171	4977758	1	True				
ANR	4978204	AssignmentExpression	skip = 2		4977758	0		=			
ANR	4978205	Identifier	skip		4977758	0					
ANR	4978206	PrimaryExpression	2		4977758	1					
ANR	4978207	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	113:3:3176:3212	4977758	2	True				
ANR	4978208	IdentifierDecl	* op = get_op ( arg1 )		4977758	0					
ANR	4978209	IdentifierDeclType	const StatOp *		4977758	0					
ANR	4978210	Identifier	op		4977758	1					
ANR	4978211	AssignmentExpression	* op = get_op ( arg1 )		4977758	2		=			
ANR	4978212	Identifier	op		4977758	0					
ANR	4978213	CallExpression	get_op ( arg1 )		4977758	1					
ANR	4978214	Callee	get_op		4977758	0					
ANR	4978215	Identifier	get_op		4977758	0					
ANR	4978216	ArgumentList	arg1		4977758	1					
ANR	4978217	Argument	arg1		4977758	0					
ANR	4978218	Identifier	arg1		4977758	0					
ANR	4978219	IdentifierDeclStatement	const StatOp * which = get_op ( arg1 ) ;	114:3:3217:3253	4977758	3	True				
ANR	4978220	IdentifierDecl	* which = get_op ( arg1 )		4977758	0					
ANR	4978221	IdentifierDeclType	const StatOp *		4977758	0					
ANR	4978222	Identifier	which		4977758	1					
ANR	4978223	AssignmentExpression	* which = get_op ( arg1 )		4977758	2		=			
ANR	4978224	Identifier	which		4977758	0					
ANR	4978225	CallExpression	get_op ( arg1 )		4977758	1					
ANR	4978226	Callee	get_op		4977758	0					
ANR	4978227	Identifier	get_op		4977758	0					
ANR	4978228	ArgumentList	arg1		4977758	1					
ANR	4978229	Argument	arg1		4977758	0					
ANR	4978230	Identifier	arg1		4977758	0					
ANR	4978231	IdentifierDeclStatement	"const char * n = """" ;"	115:3:3258:3276	4977758	4	True				
ANR	4978232	IdentifierDecl	"* n = """""		4977758	0					
ANR	4978233	IdentifierDeclType	const char *		4977758	0					
ANR	4978234	Identifier	n		4977758	1					
ANR	4978235	AssignmentExpression	"* n = """""		4977758	2		=			
ANR	4978236	Identifier	n		4977758	0					
ANR	4978237	PrimaryExpression	""""""		4977758	1					
ANR	4978238	IdentifierDeclStatement	bool auto_stat = false ;	116:3:3281:3303	4977758	5	True				
ANR	4978239	IdentifierDecl	auto_stat = false		4977758	0					
ANR	4978240	IdentifierDeclType	bool		4977758	0					
ANR	4978241	Identifier	auto_stat		4977758	1					
ANR	4978242	AssignmentExpression	auto_stat = false		4977758	2		=			
ANR	4978243	Identifier	false		4977758	0					
ANR	4978244	Identifier	false		4977758	1					
ANR	4978245	SwitchStatement	switch ( op -> type )		4977758	6					
ANR	4978246	Condition	op -> type	119:12:3342:3349	4977758	0	True				
ANR	4978247	PtrMemberAccess	op -> type		4977758	0					
ANR	4978248	Identifier	op		4977758	0					
ANR	4978249	Identifier	type		4977758	1					
ANR	4978250	CompoundStatement		74:23:1803:1803	4977758	1					
ANR	4978251	Label	case StatWrapper :: STATOP_STAT :	120:3:3358:3387	4977758	0	True				
ANR	4978252	Identifier	StatWrapper :: STATOP_STAT		4977758	0					
ANR	4978253	Label	case StatWrapper :: STATOP_LSTAT :	121:3:3392:3422	4977758	1	True				
ANR	4978254	Identifier	StatWrapper :: STATOP_LSTAT		4977758	0					
ANR	4978255	Label	case StatWrapper :: STATOP_BOTH :	122:3:3427:3456	4977758	2	True				
ANR	4978256	Identifier	StatWrapper :: STATOP_BOTH		4977758	0					
ANR	4978257	ExpressionStatement	"n = ""StatWrapper(path,which)"""	123:4:3462:3491	4977758	3	True				
ANR	4978258	AssignmentExpression	"n = ""StatWrapper(path,which)"""		4977758	0		=			
ANR	4978259	Identifier	n		4977758	0					
ANR	4978260	PrimaryExpression	"""StatWrapper(path,which)"""		4977758	1					
ANR	4978261	ExpressionStatement	auto_stat = ( ( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL ) )	124:4:3497:3712	4977758	4	True				
ANR	4978262	AssignmentExpression	auto_stat = ( ( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL ) )		4977758	0		=			
ANR	4978263	Identifier	auto_stat		4977758	0					
ANR	4978264	OrExpression	( which -> type == StatWrapper :: STATOP_STAT ) || ( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		4977758	1		||			
ANR	4978265	EqualityExpression	which -> type == StatWrapper :: STATOP_STAT		4977758	0		==			
ANR	4978266	PtrMemberAccess	which -> type		4977758	0					
ANR	4978267	Identifier	which		4977758	0					
ANR	4978268	Identifier	type		4977758	1					
ANR	4978269	Identifier	StatWrapper :: STATOP_STAT		4977758	1					
ANR	4978270	OrExpression	( which -> type == StatWrapper :: STATOP_LSTAT ) || ( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		4977758	1		||			
ANR	4978271	EqualityExpression	which -> type == StatWrapper :: STATOP_LSTAT		4977758	0		==			
ANR	4978272	PtrMemberAccess	which -> type		4977758	0					
ANR	4978273	Identifier	which		4977758	0					
ANR	4978274	Identifier	type		4977758	1					
ANR	4978275	Identifier	StatWrapper :: STATOP_LSTAT		4977758	1					
ANR	4978276	OrExpression	( which -> type == StatWrapper :: STATOP_BOTH ) || ( which -> type == StatWrapper :: STATOP_ALL )		4977758	1		||			
ANR	4978277	EqualityExpression	which -> type == StatWrapper :: STATOP_BOTH		4977758	0		==			
ANR	4978278	PtrMemberAccess	which -> type		4977758	0					
ANR	4978279	Identifier	which		4977758	0					
ANR	4978280	Identifier	type		4977758	1					
ANR	4978281	Identifier	StatWrapper :: STATOP_BOTH		4977758	1					
ANR	4978282	EqualityExpression	which -> type == StatWrapper :: STATOP_ALL		4977758	1		==			
ANR	4978283	PtrMemberAccess	which -> type		4977758	0					
ANR	4978284	Identifier	which		4977758	0					
ANR	4978285	Identifier	type		4977758	1					
ANR	4978286	Identifier	StatWrapper :: STATOP_ALL		4977758	1					
ANR	4978287	ExpressionStatement	"wrapper = new StatWrapper ( path , which -> type )"	128:4:3718:3764	4977758	5	True				
ANR	4978288	AssignmentExpression	"wrapper = new StatWrapper ( path , which -> type )"		4977758	0		=			
ANR	4978289	Identifier	wrapper		4977758	0					
ANR	4978290	Expression	"path , which -> type"		4977758	1					
ANR	4978291	Identifier	path		4977758	0					
ANR	4978292	PtrMemberAccess	which -> type		4977758	1					
ANR	4978293	Identifier	which		4977758	0					
ANR	4978294	Identifier	type		4977758	1					
ANR	4978295	BreakStatement	break ;	129:4:3770:3775	4977758	6	True				
ANR	4978296	Label	case StatWrapper :: STATOP_FSTAT :	130:3:3780:3810	4977758	7	True				
ANR	4978297	Identifier	StatWrapper :: STATOP_FSTAT		4977758	0					
ANR	4978298	ExpressionStatement	"n = ""StatWrapper(fd,which)"""	131:4:3816:3843	4977758	8	True				
ANR	4978299	AssignmentExpression	"n = ""StatWrapper(fd,which)"""		4977758	0		=			
ANR	4978300	Identifier	n		4977758	0					
ANR	4978301	PrimaryExpression	"""StatWrapper(fd,which)"""		4977758	1					
ANR	4978302	ExpressionStatement	"wrapper = new StatWrapper ( fd , which -> type )"	132:4:3849:3893	4977758	9	True				
ANR	4978303	AssignmentExpression	"wrapper = new StatWrapper ( fd , which -> type )"		4977758	0		=			
ANR	4978304	Identifier	wrapper		4977758	0					
ANR	4978305	Expression	"fd , which -> type"		4977758	1					
ANR	4978306	Identifier	fd		4977758	0					
ANR	4978307	PtrMemberAccess	which -> type		4977758	1					
ANR	4978308	Identifier	which		4977758	0					
ANR	4978309	Identifier	type		4977758	1					
ANR	4978310	ExpressionStatement	auto_stat = ( ( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL ) )	133:4:3899:4008	4977758	10	True				
ANR	4978311	AssignmentExpression	auto_stat = ( ( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL ) )		4977758	0		=			
ANR	4978312	Identifier	auto_stat		4977758	0					
ANR	4978313	OrExpression	( which -> type == StatWrapper :: STATOP_FSTAT ) || ( which -> type == StatWrapper :: STATOP_ALL )		4977758	1		||			
ANR	4978314	EqualityExpression	which -> type == StatWrapper :: STATOP_FSTAT		4977758	0		==			
ANR	4978315	PtrMemberAccess	which -> type		4977758	0					
ANR	4978316	Identifier	which		4977758	0					
ANR	4978317	Identifier	type		4977758	1					
ANR	4978318	Identifier	StatWrapper :: STATOP_FSTAT		4977758	1					
ANR	4978319	EqualityExpression	which -> type == StatWrapper :: STATOP_ALL		4977758	1		==			
ANR	4978320	PtrMemberAccess	which -> type		4977758	0					
ANR	4978321	Identifier	which		4977758	0					
ANR	4978322	Identifier	type		4977758	1					
ANR	4978323	Identifier	StatWrapper :: STATOP_ALL		4977758	1					
ANR	4978324	BreakStatement	break ;	135:4:4014:4019	4977758	11	True				
ANR	4978325	Label	case StatWrapper :: STATOP_NONE :	136:3:4024:4053	4977758	12	True				
ANR	4978326	Identifier	StatWrapper :: STATOP_NONE		4977758	0					
ANR	4978327	ExpressionStatement	"n = ""StatWrapper(void)"""	137:4:4059:4082	4977758	13	True				
ANR	4978328	AssignmentExpression	"n = ""StatWrapper(void)"""		4977758	0		=			
ANR	4978329	Identifier	n		4977758	0					
ANR	4978330	PrimaryExpression	"""StatWrapper(void)"""		4977758	1					
ANR	4978331	Statement	wrapper	138:4:4088:4094	4977758	14	True				
ANR	4978332	Statement	=	138:12:4096:4096	4977758	15	True				
ANR	4978333	Statement	new	138:14:4098:4100	4977758	16	True				
ANR	4978334	ExpressionStatement	StatWrapper	138:18:4102:4113	4977758	17	True				
ANR	4978335	Identifier	StatWrapper		4977758	0					
ANR	4978336	BreakStatement	break ;	139:4:4119:4124	4977758	18	True				
ANR	4978337	Label	case StatWrapper :: STATOP_ALL :	140:3:4129:4157	4977758	19	True				
ANR	4978338	Identifier	StatWrapper :: STATOP_ALL		4977758	0					
ANR	4978339	Label	case StatWrapper :: STATOP_LAST :	141:3:4162:4191	4977758	20	True				
ANR	4978340	Identifier	StatWrapper :: STATOP_LAST		4977758	0					
ANR	4978341	Label	default :	142:3:4196:4203	4977758	21	True				
ANR	4978342	Identifier	default		4977758	0					
ANR	4978343	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"	143:4:4209:4295	4977758	22	True				
ANR	4978344	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"		4977758	0					
ANR	4978345	Callee	fprintf		4977758	0					
ANR	4978346	Identifier	fprintf		4977758	0					
ANR	4978347	ArgumentList	stderr		4977758	1					
ANR	4978348	Argument	stderr		4977758	0					
ANR	4978349	Identifier	stderr		4977758	0					
ANR	4978350	Argument	"""%s (%d) doesn't make sense for create\\n"""		4977758	1					
ANR	4978351	PrimaryExpression	"""%s (%d) doesn't make sense for create\\n"""		4977758	0					
ANR	4978352	Argument	op -> str		4977758	2					
ANR	4978353	PtrMemberAccess	op -> str		4977758	0					
ANR	4978354	Identifier	op		4977758	0					
ANR	4978355	Identifier	str		4977758	1					
ANR	4978356	Argument	op -> type		4977758	3					
ANR	4978357	PtrMemberAccess	op -> type		4977758	0					
ANR	4978358	Identifier	op		4977758	0					
ANR	4978359	Identifier	type		4977758	1					
ANR	4978360	ExpressionStatement	exit ( 1 )	145:4:4301:4310	4977758	23	True				
ANR	4978361	CallExpression	exit ( 1 )		4977758	0					
ANR	4978362	Callee	exit		4977758	0					
ANR	4978363	Identifier	exit		4977758	0					
ANR	4978364	ArgumentList	1		4977758	1					
ANR	4978365	Argument	1		4977758	0					
ANR	4978366	PrimaryExpression	1		4977758	0					
ANR	4978367	BreakStatement	break ;	146:4:4316:4321	4977758	24	True				
ANR	4978368	IfStatement	if ( ! wrapper )		4977758	7					
ANR	4978369	Condition	! wrapper	148:8:4336:4343	4977758	0	True				
ANR	4978370	UnaryOperationExpression	! wrapper		4977758	0					
ANR	4978371	UnaryOperator	!		4977758	0					
ANR	4978372	Identifier	wrapper		4977758	1					
ANR	4978373	CompoundStatement		103:19:2797:2797	4977758	1					
ANR	4978374	ExpressionStatement	"fprintf ( stderr , ""Failed to create StatWrapper (%s) object!\\n"" , n )"	149:4:4353:4427	4977758	0	True				
ANR	4978375	CallExpression	"fprintf ( stderr , ""Failed to create StatWrapper (%s) object!\\n"" , n )"		4977758	0					
ANR	4978376	Callee	fprintf		4977758	0					
ANR	4978377	Identifier	fprintf		4977758	0					
ANR	4978378	ArgumentList	stderr		4977758	1					
ANR	4978379	Argument	stderr		4977758	0					
ANR	4978380	Identifier	stderr		4977758	0					
ANR	4978381	Argument	"""Failed to create StatWrapper (%s) object!\\n"""		4977758	1					
ANR	4978382	PrimaryExpression	"""Failed to create StatWrapper (%s) object!\\n"""		4977758	0					
ANR	4978383	Argument	n		4977758	2					
ANR	4978384	Identifier	n		4977758	0					
ANR	4978385	ExpressionStatement	exit ( 1 )	151:4:4433:4442	4977758	1	True				
ANR	4978386	CallExpression	exit ( 1 )		4977758	0					
ANR	4978387	Callee	exit		4977758	0					
ANR	4978388	Identifier	exit		4977758	0					
ANR	4978389	ArgumentList	1		4977758	1					
ANR	4978390	Argument	1		4977758	0					
ANR	4978391	PrimaryExpression	1		4977758	0					
ANR	4978392	ExpressionStatement	"printf ( ""Created StatWrapper object via %s\\n"" , n )"	153:3:4452:4502	4977758	8	True				
ANR	4978393	CallExpression	"printf ( ""Created StatWrapper object via %s\\n"" , n )"		4977758	0					
ANR	4978394	Callee	printf		4977758	0					
ANR	4978395	Identifier	printf		4977758	0					
ANR	4978396	ArgumentList	"""Created StatWrapper object via %s\\n"""		4977758	1					
ANR	4978397	Argument	"""Created StatWrapper object via %s\\n"""		4977758	0					
ANR	4978398	PrimaryExpression	"""Created StatWrapper object via %s\\n"""		4977758	0					
ANR	4978399	Argument	n		4977758	1					
ANR	4978400	Identifier	n		4977758	0					
ANR	4978401	ExpressionStatement	"printf ( ""Stat Functions:\\n"" )"	155:3:4508:4537	4977758	9	True				
ANR	4978402	CallExpression	"printf ( ""Stat Functions:\\n"" )"		4977758	0					
ANR	4978403	Callee	printf		4977758	0					
ANR	4978404	Identifier	printf		4977758	0					
ANR	4978405	ArgumentList	"""Stat Functions:\\n"""		4977758	1					
ANR	4978406	Argument	"""Stat Functions:\\n"""		4977758	0					
ANR	4978407	PrimaryExpression	"""Stat Functions:\\n"""		4977758	0					
ANR	4978408	IdentifierDeclStatement	int opint ;	156:3:4542:4552	4977758	10	True				
ANR	4978409	IdentifierDecl	opint		4977758	0					
ANR	4978410	IdentifierDeclType	int		4977758	0					
ANR	4978411	Identifier	opint		4977758	1					
ANR	4978412	ForStatement	for ( opint = ( int ) StatWrapper :: STATOP_MIN ; opint <= ( int ) StatWrapper :: STATOP_MAX ; opint ++ )		4977758	11					
ANR	4978413	ForInit	opint = ( int ) StatWrapper :: STATOP_MIN ;	157:8:4562:4598	4977758	0	True				
ANR	4978414	AssignmentExpression	opint = ( int ) StatWrapper :: STATOP_MIN		4977758	0		=			
ANR	4978415	Identifier	opint		4977758	0					
ANR	4978416	CastExpression	( int ) StatWrapper :: STATOP_MIN		4977758	1					
ANR	4978417	CastTarget	int		4977758	0					
ANR	4978418	Identifier	StatWrapper :: STATOP_MIN		4977758	1					
ANR	4978419	Condition	opint <= ( int ) StatWrapper :: STATOP_MAX	158:5:4605:4641	4977758	1	True				
ANR	4978420	RelationalExpression	opint <= ( int ) StatWrapper :: STATOP_MAX		4977758	0		<=			
ANR	4978421	Identifier	opint		4977758	0					
ANR	4978422	CastExpression	( int ) StatWrapper :: STATOP_MAX		4977758	1					
ANR	4978423	CastTarget	int		4977758	0					
ANR	4978424	Identifier	StatWrapper :: STATOP_MAX		4977758	1					
ANR	4978425	PostIncDecOperationExpression	opint ++	159:5:4649:4655	4977758	2	True				
ANR	4978426	Identifier	opint		4977758	0					
ANR	4978427	IncDec	++		4977758	1					
ANR	4978428	CompoundStatement		120:4:3282:3320	4977758	3					
ANR	4978429	IdentifierDeclStatement	StatWrapper :: StatOpType opno = ( StatWrapper :: StatOpType ) opint ;	160:4:4665:4727	4977758	0	True				
ANR	4978430	IdentifierDecl	opno = ( StatWrapper :: StatOpType ) opint		4977758	0					
ANR	4978431	IdentifierDeclType	StatWrapper :: StatOpType		4977758	0					
ANR	4978432	Identifier	opno		4977758	1					
ANR	4978433	AssignmentExpression	opno = ( StatWrapper :: StatOpType ) opint		4977758	2		=			
ANR	4978434	Identifier	opno		4977758	0					
ANR	4978435	CastExpression	( StatWrapper :: StatOpType ) opint		4977758	1					
ANR	4978436	CastTarget	StatWrapper :: StatOpType		4977758	0					
ANR	4978437	Identifier	opint		4977758	1					
ANR	4978438	IdentifierDeclStatement	const char * fn = wrapper -> GetStatFn ( opno ) ;	161:4:4733:4776	4977758	1	True				
ANR	4978439	IdentifierDecl	* fn = wrapper -> GetStatFn ( opno )		4977758	0					
ANR	4978440	IdentifierDeclType	const char *		4977758	0					
ANR	4978441	Identifier	fn		4977758	1					
ANR	4978442	AssignmentExpression	* fn = wrapper -> GetStatFn ( opno )		4977758	2		=			
ANR	4978443	Identifier	fn		4977758	0					
ANR	4978444	CallExpression	wrapper -> GetStatFn ( opno )		4977758	1					
ANR	4978445	Callee	wrapper -> GetStatFn		4977758	0					
ANR	4978446	PtrMemberAccess	wrapper -> GetStatFn		4977758	0					
ANR	4978447	Identifier	wrapper		4977758	0					
ANR	4978448	Identifier	GetStatFn		4977758	1					
ANR	4978449	ArgumentList	opno		4977758	1					
ANR	4978450	Argument	opno		4977758	0					
ANR	4978451	Identifier	opno		4977758	0					
ANR	4978452	IfStatement	if ( NULL == fn )		4977758	2					
ANR	4978453	Condition	NULL == fn	162:9:4787:4796	4977758	0	True				
ANR	4978454	EqualityExpression	NULL == fn		4977758	0		==			
ANR	4978455	Identifier	NULL		4977758	0					
ANR	4978456	Identifier	fn		4977758	1					
ANR	4978457	CompoundStatement		117:22:3250:3250	4977758	1					
ANR	4978458	ExpressionStatement	"fn = ""<NULL>"""	163:5:4807:4820	4977758	0	True				
ANR	4978459	AssignmentExpression	"fn = ""<NULL>"""		4977758	0		=			
ANR	4978460	Identifier	fn		4977758	0					
ANR	4978461	PrimaryExpression	"""<NULL>"""		4977758	1					
ANR	4978462	IdentifierDeclStatement	const char * name = get_op_name ( opno ) ;	165:4:4832:4870	4977758	3	True				
ANR	4978463	IdentifierDecl	* name = get_op_name ( opno )		4977758	0					
ANR	4978464	IdentifierDeclType	const char *		4977758	0					
ANR	4978465	Identifier	name		4977758	1					
ANR	4978466	AssignmentExpression	* name = get_op_name ( opno )		4977758	2		=			
ANR	4978467	Identifier	name		4977758	0					
ANR	4978468	CallExpression	get_op_name ( opno )		4977758	1					
ANR	4978469	Callee	get_op_name		4977758	0					
ANR	4978470	Identifier	get_op_name		4977758	0					
ANR	4978471	ArgumentList	opno		4977758	1					
ANR	4978472	Argument	opno		4977758	0					
ANR	4978473	Identifier	opno		4977758	0					
ANR	4978474	ExpressionStatement	"printf ( ""  %s = %s\\n"" , name , fn )"	166:4:4876:4909	4977758	4	True				
ANR	4978475	CallExpression	"printf ( ""  %s = %s\\n"" , name , fn )"		4977758	0					
ANR	4978476	Callee	printf		4977758	0					
ANR	4978477	Identifier	printf		4977758	0					
ANR	4978478	ArgumentList	"""  %s = %s\\n"""		4977758	1					
ANR	4978479	Argument	"""  %s = %s\\n"""		4977758	0					
ANR	4978480	PrimaryExpression	"""  %s = %s\\n"""		4977758	0					
ANR	4978481	Argument	name		4977758	1					
ANR	4978482	Identifier	name		4977758	0					
ANR	4978483	Argument	fn		4977758	2					
ANR	4978484	Identifier	fn		4977758	0					
ANR	4978485	IfStatement	if ( auto_stat )		4977758	12					
ANR	4978486	Condition	auto_stat	169:8:4925:4933	4977758	0	True				
ANR	4978487	Identifier	auto_stat		4977758	0					
ANR	4978488	CompoundStatement		124:20:3387:3387	4977758	1					
ANR	4978489	ExpressionStatement	"dump_status ( * wrapper , ""Stat results"" )"	170:4:4943:4982	4977758	0	True				
ANR	4978490	CallExpression	"dump_status ( * wrapper , ""Stat results"" )"		4977758	0					
ANR	4978491	Callee	dump_status		4977758	0					
ANR	4978492	Identifier	dump_status		4977758	0					
ANR	4978493	ArgumentList	* wrapper		4977758	1					
ANR	4978494	Argument	* wrapper		4977758	0					
ANR	4978495	UnaryOperationExpression	* wrapper		4977758	0					
ANR	4978496	UnaryOperator	*		4977758	0					
ANR	4978497	Identifier	wrapper		4977758	1					
ANR	4978498	Argument	"""Stat results"""		4977758	1					
ANR	4978499	PrimaryExpression	"""Stat results"""		4977758	0					
ANR	4978500	ElseStatement	else		4977758	0					
ANR	4978501	IfStatement	"if ( ! strcmp ( arg , ""--set"" ) )"		4977758	0					
ANR	4978502	Condition	"! strcmp ( arg , ""--set"" )"	174:12:5006:5028	4977758	0	True				
ANR	4978503	UnaryOperationExpression	"! strcmp ( arg , ""--set"" )"		4977758	0					
ANR	4978504	UnaryOperator	!		4977758	0					
ANR	4978505	CallExpression	"strcmp ( arg , ""--set"" )"		4977758	1					
ANR	4978506	Callee	strcmp		4977758	0					
ANR	4978507	Identifier	strcmp		4977758	0					
ANR	4978508	ArgumentList	arg		4977758	1					
ANR	4978509	Argument	arg		4977758	0					
ANR	4978510	Identifier	arg		4977758	0					
ANR	4978511	Argument	"""--set"""		4977758	1					
ANR	4978512	PrimaryExpression	"""--set"""		4977758	0					
ANR	4978513	CompoundStatement		145:3:3781:3810	4977758	1					
ANR	4978514	ExpressionStatement	skip = 1	175:3:5037:5045	4977758	0	True				
ANR	4978515	AssignmentExpression	skip = 1		4977758	0		=			
ANR	4978516	Identifier	skip		4977758	0					
ANR	4978517	PrimaryExpression	1		4977758	1					
ANR	4978518	IfStatement	if ( ! arg1 )		4977758	1					
ANR	4978519	Condition	! arg1	177:8:5056:5060	4977758	0	True				
ANR	4978520	UnaryOperationExpression	! arg1		4977758	0					
ANR	4978521	UnaryOperator	!		4977758	0					
ANR	4978522	Identifier	arg1		4977758	1					
ANR	4978523	CompoundStatement		132:16:3514:3514	4977758	1					
ANR	4978524	ExpressionStatement	"fprintf ( stderr , ""--set usage: --set <op>\\n"" )"	178:4:5070:5116	4977758	0	True				
ANR	4978525	CallExpression	"fprintf ( stderr , ""--set usage: --set <op>\\n"" )"		4977758	0					
ANR	4978526	Callee	fprintf		4977758	0					
ANR	4978527	Identifier	fprintf		4977758	0					
ANR	4978528	ArgumentList	stderr		4977758	1					
ANR	4978529	Argument	stderr		4977758	0					
ANR	4978530	Identifier	stderr		4977758	0					
ANR	4978531	Argument	"""--set usage: --set <op>\\n"""		4977758	1					
ANR	4978532	PrimaryExpression	"""--set usage: --set <op>\\n"""		4977758	0					
ANR	4978533	ExpressionStatement	exit ( 1 )	179:4:5122:5131	4977758	1	True				
ANR	4978534	CallExpression	exit ( 1 )		4977758	0					
ANR	4978535	Callee	exit		4977758	0					
ANR	4978536	Identifier	exit		4977758	0					
ANR	4978537	ArgumentList	1		4977758	1					
ANR	4978538	Argument	1		4977758	0					
ANR	4978539	PrimaryExpression	1		4977758	0					
ANR	4978540	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	181:3:5141:5174	4977758	2	True				
ANR	4978541	IdentifierDecl	* op = get_op ( arg1 )		4977758	0					
ANR	4978542	IdentifierDeclType	const StatOp *		4977758	0					
ANR	4978543	Identifier	op		4977758	1					
ANR	4978544	AssignmentExpression	* op = get_op ( arg1 )		4977758	2		=			
ANR	4978545	Identifier	op		4977758	0					
ANR	4978546	CallExpression	get_op ( arg1 )		4977758	1					
ANR	4978547	Callee	get_op		4977758	0					
ANR	4978548	Identifier	get_op		4977758	0					
ANR	4978549	ArgumentList	arg1		4977758	1					
ANR	4978550	Argument	arg1		4977758	0					
ANR	4978551	Identifier	arg1		4977758	0					
ANR	4978552	IfStatement	if ( ! wrapper )		4977758	3					
ANR	4978553	Condition	! wrapper	183:8:5185:5192	4977758	0	True				
ANR	4978554	UnaryOperationExpression	! wrapper		4977758	0					
ANR	4978555	UnaryOperator	!		4977758	0					
ANR	4978556	Identifier	wrapper		4977758	1					
ANR	4978557	CompoundStatement		138:19:3646:3646	4977758	1					
ANR	4978558	ExpressionStatement	"fprintf ( stderr , ""--set: no wrapper object!\\n"" )"	184:4:5202:5250	4977758	0	True				
ANR	4978559	CallExpression	"fprintf ( stderr , ""--set: no wrapper object!\\n"" )"		4977758	0					
ANR	4978560	Callee	fprintf		4977758	0					
ANR	4978561	Identifier	fprintf		4977758	0					
ANR	4978562	ArgumentList	stderr		4977758	1					
ANR	4978563	Argument	stderr		4977758	0					
ANR	4978564	Identifier	stderr		4977758	0					
ANR	4978565	Argument	"""--set: no wrapper object!\\n"""		4977758	1					
ANR	4978566	PrimaryExpression	"""--set: no wrapper object!\\n"""		4977758	0					
ANR	4978567	ExpressionStatement	exit ( 1 )	185:4:5256:5265	4977758	1	True				
ANR	4978568	CallExpression	exit ( 1 )		4977758	0					
ANR	4978569	Callee	exit		4977758	0					
ANR	4978570	Identifier	exit		4977758	0					
ANR	4978571	ArgumentList	1		4977758	1					
ANR	4978572	Argument	1		4977758	0					
ANR	4978573	PrimaryExpression	1		4977758	0					
ANR	4978574	IdentifierDeclStatement	"bool rc1 = false , rc2 = false ;"	189:3:5297:5326	4977758	4	True				
ANR	4978575	IdentifierDecl	rc1 = false		4977758	0					
ANR	4978576	IdentifierDeclType	bool		4977758	0					
ANR	4978577	Identifier	rc1		4977758	1					
ANR	4978578	AssignmentExpression	rc1 = false		4977758	2		=			
ANR	4978579	Identifier	false		4977758	0					
ANR	4978580	Identifier	false		4977758	1					
ANR	4978581	IdentifierDecl	rc2 = false		4977758	1					
ANR	4978582	IdentifierDeclType	bool		4977758	0					
ANR	4978583	Identifier	rc2		4977758	1					
ANR	4978584	AssignmentExpression	rc2 = false		4977758	2		=			
ANR	4978585	Identifier	false		4977758	0					
ANR	4978586	Identifier	false		4977758	1					
ANR	4978587	IdentifierDeclStatement	"const char * n1 = """" , * n2 = """" ;"	190:3:5331:5360	4977758	5	True				
ANR	4978588	IdentifierDecl	"* n1 = """""		4977758	0					
ANR	4978589	IdentifierDeclType	const char *		4977758	0					
ANR	4978590	Identifier	n1		4977758	1					
ANR	4978591	AssignmentExpression	"* n1 = """""		4977758	2		=			
ANR	4978592	Identifier	n1		4977758	0					
ANR	4978593	PrimaryExpression	""""""		4977758	1					
ANR	4978594	IdentifierDecl	"* n2 = """""		4977758	1					
ANR	4978595	IdentifierDeclType	const char *		4977758	0					
ANR	4978596	Identifier	n2		4977758	1					
ANR	4978597	AssignmentExpression	"* n2 = """""		4977758	2		=			
ANR	4978598	Identifier	n2		4977758	0					
ANR	4978599	PrimaryExpression	""""""		4977758	1					
ANR	4978600	SwitchStatement	switch ( op -> type )		4977758	6					
ANR	4978601	Condition	op -> type	191:12:5374:5381	4977758	0	True				
ANR	4978602	PtrMemberAccess	op -> type		4977758	0					
ANR	4978603	Identifier	op		4977758	0					
ANR	4978604	Identifier	type		4977758	1					
ANR	4978605	CompoundStatement		146:23:3835:3835	4977758	1					
ANR	4978606	Label	case StatWrapper :: STATOP_STAT :	192:3:5390:5419	4977758	0	True				
ANR	4978607	Identifier	StatWrapper :: STATOP_STAT		4977758	0					
ANR	4978608	Label	case StatWrapper :: STATOP_LSTAT :	193:3:5424:5454	4977758	1	True				
ANR	4978609	Identifier	StatWrapper :: STATOP_LSTAT		4977758	0					
ANR	4978610	Label	case StatWrapper :: STATOP_BOTH :	194:3:5459:5488	4977758	2	True				
ANR	4978611	Identifier	StatWrapper :: STATOP_BOTH		4977758	0					
ANR	4978612	ExpressionStatement	"n1 = ""SetPath"""	195:4:5494:5508	4977758	3	True				
ANR	4978613	AssignmentExpression	"n1 = ""SetPath"""		4977758	0		=			
ANR	4978614	Identifier	n1		4977758	0					
ANR	4978615	PrimaryExpression	"""SetPath"""		4977758	1					
ANR	4978616	ExpressionStatement	rc1 = wrapper -> SetPath ( path )	196:4:5514:5544	4977758	4	True				
ANR	4978617	AssignmentExpression	rc1 = wrapper -> SetPath ( path )		4977758	0		=			
ANR	4978618	Identifier	rc1		4977758	0					
ANR	4978619	CallExpression	wrapper -> SetPath ( path )		4977758	1					
ANR	4978620	Callee	wrapper -> SetPath		4977758	0					
ANR	4978621	PtrMemberAccess	wrapper -> SetPath		4977758	0					
ANR	4978622	Identifier	wrapper		4977758	0					
ANR	4978623	Identifier	SetPath		4977758	1					
ANR	4978624	ArgumentList	path		4977758	1					
ANR	4978625	Argument	path		4977758	0					
ANR	4978626	Identifier	path		4977758	0					
ANR	4978627	BreakStatement	break ;	197:4:5550:5555	4977758	5	True				
ANR	4978628	Label	case StatWrapper :: STATOP_FSTAT :	198:3:5560:5590	4977758	6	True				
ANR	4978629	Identifier	StatWrapper :: STATOP_FSTAT		4977758	0					
ANR	4978630	ExpressionStatement	"n1 = ""SetFd"""	199:4:5596:5608	4977758	7	True				
ANR	4978631	AssignmentExpression	"n1 = ""SetFd"""		4977758	0		=			
ANR	4978632	Identifier	n1		4977758	0					
ANR	4978633	PrimaryExpression	"""SetFd"""		4977758	1					
ANR	4978634	ExpressionStatement	rc1 = wrapper -> SetFD ( fd )	200:4:5614:5640	4977758	8	True				
ANR	4978635	AssignmentExpression	rc1 = wrapper -> SetFD ( fd )		4977758	0		=			
ANR	4978636	Identifier	rc1		4977758	0					
ANR	4978637	CallExpression	wrapper -> SetFD ( fd )		4977758	1					
ANR	4978638	Callee	wrapper -> SetFD		4977758	0					
ANR	4978639	PtrMemberAccess	wrapper -> SetFD		4977758	0					
ANR	4978640	Identifier	wrapper		4977758	0					
ANR	4978641	Identifier	SetFD		4977758	1					
ANR	4978642	ArgumentList	fd		4977758	1					
ANR	4978643	Argument	fd		4977758	0					
ANR	4978644	Identifier	fd		4977758	0					
ANR	4978645	BreakStatement	break ;	201:4:5646:5651	4977758	9	True				
ANR	4978646	Label	case StatWrapper :: STATOP_NONE :	202:3:5656:5685	4977758	10	True				
ANR	4978647	Identifier	StatWrapper :: STATOP_NONE		4977758	0					
ANR	4978648	BreakStatement	break ;	203:4:5691:5696	4977758	11	True				
ANR	4978649	Label	case StatWrapper :: STATOP_ALL :	204:3:5701:5729	4977758	12	True				
ANR	4978650	Identifier	StatWrapper :: STATOP_ALL		4977758	0					
ANR	4978651	ExpressionStatement	"n1 = ""SetPath"""	205:4:5735:5749	4977758	13	True				
ANR	4978652	AssignmentExpression	"n1 = ""SetPath"""		4977758	0		=			
ANR	4978653	Identifier	n1		4977758	0					
ANR	4978654	PrimaryExpression	"""SetPath"""		4977758	1					
ANR	4978655	ExpressionStatement	rc1 = wrapper -> SetPath ( path )	206:4:5755:5785	4977758	14	True				
ANR	4978656	AssignmentExpression	rc1 = wrapper -> SetPath ( path )		4977758	0		=			
ANR	4978657	Identifier	rc1		4977758	0					
ANR	4978658	CallExpression	wrapper -> SetPath ( path )		4977758	1					
ANR	4978659	Callee	wrapper -> SetPath		4977758	0					
ANR	4978660	PtrMemberAccess	wrapper -> SetPath		4977758	0					
ANR	4978661	Identifier	wrapper		4977758	0					
ANR	4978662	Identifier	SetPath		4977758	1					
ANR	4978663	ArgumentList	path		4977758	1					
ANR	4978664	Argument	path		4977758	0					
ANR	4978665	Identifier	path		4977758	0					
ANR	4978666	ExpressionStatement	"n2 = ""SetFD"""	207:4:5791:5803	4977758	15	True				
ANR	4978667	AssignmentExpression	"n2 = ""SetFD"""		4977758	0		=			
ANR	4978668	Identifier	n2		4977758	0					
ANR	4978669	PrimaryExpression	"""SetFD"""		4977758	1					
ANR	4978670	ExpressionStatement	rc2 = wrapper -> SetFD ( fd )	208:4:5809:5835	4977758	16	True				
ANR	4978671	AssignmentExpression	rc2 = wrapper -> SetFD ( fd )		4977758	0		=			
ANR	4978672	Identifier	rc2		4977758	0					
ANR	4978673	CallExpression	wrapper -> SetFD ( fd )		4977758	1					
ANR	4978674	Callee	wrapper -> SetFD		4977758	0					
ANR	4978675	PtrMemberAccess	wrapper -> SetFD		4977758	0					
ANR	4978676	Identifier	wrapper		4977758	0					
ANR	4978677	Identifier	SetFD		4977758	1					
ANR	4978678	ArgumentList	fd		4977758	1					
ANR	4978679	Argument	fd		4977758	0					
ANR	4978680	Identifier	fd		4977758	0					
ANR	4978681	BreakStatement	break ;	209:4:5841:5846	4977758	17	True				
ANR	4978682	Label	case StatWrapper :: STATOP_LAST :	210:3:5851:5880	4977758	18	True				
ANR	4978683	Identifier	StatWrapper :: STATOP_LAST		4977758	0					
ANR	4978684	Label	default :	211:3:5885:5892	4977758	19	True				
ANR	4978685	Identifier	default		4977758	0					
ANR	4978686	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for set\\n"" , op -> str , op -> type )"	212:4:5898:5981	4977758	20	True				
ANR	4978687	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for set\\n"" , op -> str , op -> type )"		4977758	0					
ANR	4978688	Callee	fprintf		4977758	0					
ANR	4978689	Identifier	fprintf		4977758	0					
ANR	4978690	ArgumentList	stderr		4977758	1					
ANR	4978691	Argument	stderr		4977758	0					
ANR	4978692	Identifier	stderr		4977758	0					
ANR	4978693	Argument	"""%s (%d) doesn't make sense for set\\n"""		4977758	1					
ANR	4978694	PrimaryExpression	"""%s (%d) doesn't make sense for set\\n"""		4977758	0					
ANR	4978695	Argument	op -> str		4977758	2					
ANR	4978696	PtrMemberAccess	op -> str		4977758	0					
ANR	4978697	Identifier	op		4977758	0					
ANR	4978698	Identifier	str		4977758	1					
ANR	4978699	Argument	op -> type		4977758	3					
ANR	4978700	PtrMemberAccess	op -> type		4977758	0					
ANR	4978701	Identifier	op		4977758	0					
ANR	4978702	Identifier	type		4977758	1					
ANR	4978703	ExpressionStatement	exit ( 1 )	214:4:5987:5996	4977758	21	True				
ANR	4978704	CallExpression	exit ( 1 )		4977758	0					
ANR	4978705	Callee	exit		4977758	0					
ANR	4978706	Identifier	exit		4977758	0					
ANR	4978707	ArgumentList	1		4977758	1					
ANR	4978708	Argument	1		4977758	0					
ANR	4978709	PrimaryExpression	1		4977758	0					
ANR	4978710	BreakStatement	break ;	215:4:6002:6007	4977758	22	True				
ANR	4978711	IfStatement	if ( rc1 || rc2 )		4977758	7					
ANR	4978712	Condition	rc1 || rc2	217:8:6022:6031	4977758	0	True				
ANR	4978713	OrExpression	rc1 || rc2		4977758	0		||			
ANR	4978714	Identifier	rc1		4977758	0					
ANR	4978715	Identifier	rc2		4977758	1					
ANR	4978716	CompoundStatement		172:21:4485:4485	4977758	1					
ANR	4978717	ExpressionStatement	"printf ( ""set via %s [%s/%s] OK\\n"" , op -> str , n1 , n2 )"	218:4:6041:6099	4977758	0	True				
ANR	4978718	CallExpression	"printf ( ""set via %s [%s/%s] OK\\n"" , op -> str , n1 , n2 )"		4977758	0					
ANR	4978719	Callee	printf		4977758	0					
ANR	4978720	Identifier	printf		4977758	0					
ANR	4978721	ArgumentList	"""set via %s [%s/%s] OK\\n"""		4977758	1					
ANR	4978722	Argument	"""set via %s [%s/%s] OK\\n"""		4977758	0					
ANR	4978723	PrimaryExpression	"""set via %s [%s/%s] OK\\n"""		4977758	0					
ANR	4978724	Argument	op -> str		4977758	1					
ANR	4978725	PtrMemberAccess	op -> str		4977758	0					
ANR	4978726	Identifier	op		4977758	0					
ANR	4978727	Identifier	str		4977758	1					
ANR	4978728	Argument	n1		4977758	2					
ANR	4978729	Identifier	n1		4977758	0					
ANR	4978730	Argument	n2		4977758	3					
ANR	4978731	Identifier	n2		4977758	0					
ANR	4978732	ElseStatement	else		4977758	0					
ANR	4978733	CompoundStatement		175:10:4561:4561	4977758	0					
ANR	4978734	ExpressionStatement	"fprintf ( stderr , ""set via %s [%s/%s] FAILED\\n"" , op -> str , n1 , n2 )"	221:4:6117:6189	4977758	0	True				
ANR	4978735	CallExpression	"fprintf ( stderr , ""set via %s [%s/%s] FAILED\\n"" , op -> str , n1 , n2 )"		4977758	0					
ANR	4978736	Callee	fprintf		4977758	0					
ANR	4978737	Identifier	fprintf		4977758	0					
ANR	4978738	ArgumentList	stderr		4977758	1					
ANR	4978739	Argument	stderr		4977758	0					
ANR	4978740	Identifier	stderr		4977758	0					
ANR	4978741	Argument	"""set via %s [%s/%s] FAILED\\n"""		4977758	1					
ANR	4978742	PrimaryExpression	"""set via %s [%s/%s] FAILED\\n"""		4977758	0					
ANR	4978743	Argument	op -> str		4977758	2					
ANR	4978744	PtrMemberAccess	op -> str		4977758	0					
ANR	4978745	Identifier	op		4977758	0					
ANR	4978746	Identifier	str		4977758	1					
ANR	4978747	Argument	n1		4977758	3					
ANR	4978748	Identifier	n1		4977758	0					
ANR	4978749	Argument	n2		4977758	4					
ANR	4978750	Identifier	n2		4977758	0					
ANR	4978751	ExpressionStatement	exit ( 1 )	223:4:6195:6204	4977758	1	True				
ANR	4978752	CallExpression	exit ( 1 )		4977758	0					
ANR	4978753	Callee	exit		4977758	0					
ANR	4978754	Identifier	exit		4977758	0					
ANR	4978755	ArgumentList	1		4977758	1					
ANR	4978756	Argument	1		4977758	0					
ANR	4978757	PrimaryExpression	1		4977758	0					
ANR	4978758	ElseStatement	else		4977758	0					
ANR	4978759	IfStatement	"if ( ( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) ) )"		4977758	0					
ANR	4978760	Condition	"( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) )"	227:12:6228:6278	4977758	0	True				
ANR	4978761	OrExpression	"( ! strcmp ( arg , ""--stat"" ) ) || ( ! strcmp ( arg , ""-s"" ) )"		4977758	0		||			
ANR	4978762	UnaryOperationExpression	"! strcmp ( arg , ""--stat"" )"		4977758	0					
ANR	4978763	UnaryOperator	!		4977758	0					
ANR	4978764	CallExpression	"strcmp ( arg , ""--stat"" )"		4977758	1					
ANR	4978765	Callee	strcmp		4977758	0					
ANR	4978766	Identifier	strcmp		4977758	0					
ANR	4978767	ArgumentList	arg		4977758	1					
ANR	4978768	Argument	arg		4977758	0					
ANR	4978769	Identifier	arg		4977758	0					
ANR	4978770	Argument	"""--stat"""		4977758	1					
ANR	4978771	PrimaryExpression	"""--stat"""		4977758	0					
ANR	4978772	UnaryOperationExpression	"! strcmp ( arg , ""-s"" )"		4977758	1					
ANR	4978773	UnaryOperator	!		4977758	0					
ANR	4978774	CallExpression	"strcmp ( arg , ""-s"" )"		4977758	1					
ANR	4978775	Callee	strcmp		4977758	0					
ANR	4978776	Identifier	strcmp		4977758	0					
ANR	4978777	ArgumentList	arg		4977758	1					
ANR	4978778	Argument	arg		4977758	0					
ANR	4978779	Identifier	arg		4977758	0					
ANR	4978780	Argument	"""-s"""		4977758	1					
ANR	4978781	PrimaryExpression	"""-s"""		4977758	0					
ANR	4978782	CompoundStatement		211:3:5320:5343	4977758	1					
ANR	4978783	IfStatement	if ( ! arg2 )		4977758	0					
ANR	4978784	Condition	! arg2	228:8:6292:6296	4977758	0	True				
ANR	4978785	UnaryOperationExpression	! arg2		4977758	0					
ANR	4978786	UnaryOperator	!		4977758	0					
ANR	4978787	Identifier	arg2		4977758	1					
ANR	4978788	CompoundStatement		183:16:4750:4750	4977758	1					
ANR	4978789	ExpressionStatement	"fprintf ( stderr , ""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"" )"	229:4:6306:6383	4977758	0	True				
ANR	4978790	CallExpression	"fprintf ( stderr , ""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"" )"		4977758	0					
ANR	4978791	Callee	fprintf		4977758	0					
ANR	4978792	Identifier	fprintf		4977758	0					
ANR	4978793	ArgumentList	stderr		4977758	1					
ANR	4978794	Argument	stderr		4977758	0					
ANR	4978795	Identifier	stderr		4977758	0					
ANR	4978796	Argument	"""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"""		4977758	1					
ANR	4978797	PrimaryExpression	"""--stat usage: --stat <op> <which> [f[orce]|[no]]\\n"""		4977758	0					
ANR	4978798	ExpressionStatement	exit ( 1 )	231:4:6389:6398	4977758	1	True				
ANR	4978799	CallExpression	exit ( 1 )		4977758	0					
ANR	4978800	Callee	exit		4977758	0					
ANR	4978801	Identifier	exit		4977758	0					
ANR	4978802	ArgumentList	1		4977758	1					
ANR	4978803	Argument	1		4977758	0					
ANR	4978804	PrimaryExpression	1		4977758	0					
ANR	4978805	IdentifierDeclStatement	const StatOp * op = get_op ( arg1 ) ;	233:3:6408:6444	4977758	1	True				
ANR	4978806	IdentifierDecl	* op = get_op ( arg1 )		4977758	0					
ANR	4978807	IdentifierDeclType	const StatOp *		4977758	0					
ANR	4978808	Identifier	op		4977758	1					
ANR	4978809	AssignmentExpression	* op = get_op ( arg1 )		4977758	2		=			
ANR	4978810	Identifier	op		4977758	0					
ANR	4978811	CallExpression	get_op ( arg1 )		4977758	1					
ANR	4978812	Callee	get_op		4977758	0					
ANR	4978813	Identifier	get_op		4977758	0					
ANR	4978814	ArgumentList	arg1		4977758	1					
ANR	4978815	Argument	arg1		4977758	0					
ANR	4978816	Identifier	arg1		4977758	0					
ANR	4978817	IdentifierDeclStatement	const StatOp * which = get_op ( arg2 ) ;	234:3:6449:6485	4977758	2	True				
ANR	4978818	IdentifierDecl	* which = get_op ( arg2 )		4977758	0					
ANR	4978819	IdentifierDeclType	const StatOp *		4977758	0					
ANR	4978820	Identifier	which		4977758	1					
ANR	4978821	AssignmentExpression	* which = get_op ( arg2 )		4977758	2		=			
ANR	4978822	Identifier	which		4977758	0					
ANR	4978823	CallExpression	get_op ( arg2 )		4977758	1					
ANR	4978824	Callee	get_op		4977758	0					
ANR	4978825	Identifier	get_op		4977758	0					
ANR	4978826	ArgumentList	arg2		4977758	1					
ANR	4978827	Argument	arg2		4977758	0					
ANR	4978828	Identifier	arg2		4977758	0					
ANR	4978829	IdentifierDeclStatement	bool force = true ;	235:3:6490:6507	4977758	3	True				
ANR	4978830	IdentifierDecl	force = true		4977758	0					
ANR	4978831	IdentifierDeclType	bool		4977758	0					
ANR	4978832	Identifier	force		4977758	1					
ANR	4978833	AssignmentExpression	force = true		4977758	2		=			
ANR	4978834	Identifier	true		4977758	0					
ANR	4978835	Identifier	true		4977758	1					
ANR	4978836	IdentifierDeclStatement	bool force_set ;	236:3:6512:6526	4977758	4	True				
ANR	4978837	IdentifierDecl	force_set		4977758	0					
ANR	4978838	IdentifierDeclType	bool		4977758	0					
ANR	4978839	Identifier	force_set		4977758	1					
ANR	4978840	IfStatement	if ( arg3 )		4977758	5					
ANR	4978841	Condition	arg3	238:8:6537:6540	4977758	0	True				
ANR	4978842	Identifier	arg3		4977758	0					
ANR	4978843	CompoundStatement		193:15:4994:4994	4977758	1					
ANR	4978844	ExpressionStatement	skip = 3	239:4:6550:6558	4977758	0	True				
ANR	4978845	AssignmentExpression	skip = 3		4977758	0		=			
ANR	4978846	Identifier	skip		4977758	0					
ANR	4978847	PrimaryExpression	3		4977758	1					
ANR	4978848	ExpressionStatement	"force = ( ( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) ) )"	240:4:6564:6641	4977758	1	True				
ANR	4978849	AssignmentExpression	"force = ( ( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) ) )"		4977758	0		=			
ANR	4978850	Identifier	force		4977758	0					
ANR	4978851	OrExpression	"( ! strcasecmp ( arg3 , ""f"" ) ) || ( ! strcasecmp ( arg3 , ""force"" ) )"		4977758	1		||			
ANR	4978852	UnaryOperationExpression	"! strcasecmp ( arg3 , ""f"" )"		4977758	0					
ANR	4978853	UnaryOperator	!		4977758	0					
ANR	4978854	CallExpression	"strcasecmp ( arg3 , ""f"" )"		4977758	1					
ANR	4978855	Callee	strcasecmp		4977758	0					
ANR	4978856	Identifier	strcasecmp		4977758	0					
ANR	4978857	ArgumentList	arg3		4977758	1					
ANR	4978858	Argument	arg3		4977758	0					
ANR	4978859	Identifier	arg3		4977758	0					
ANR	4978860	Argument	"""f"""		4977758	1					
ANR	4978861	PrimaryExpression	"""f"""		4977758	0					
ANR	4978862	UnaryOperationExpression	"! strcasecmp ( arg3 , ""force"" )"		4977758	1					
ANR	4978863	UnaryOperator	!		4977758	0					
ANR	4978864	CallExpression	"strcasecmp ( arg3 , ""force"" )"		4977758	1					
ANR	4978865	Callee	strcasecmp		4977758	0					
ANR	4978866	Identifier	strcasecmp		4977758	0					
ANR	4978867	ArgumentList	arg3		4977758	1					
ANR	4978868	Argument	arg3		4977758	0					
ANR	4978869	Identifier	arg3		4977758	0					
ANR	4978870	Argument	"""force"""		4977758	1					
ANR	4978871	PrimaryExpression	"""force"""		4977758	0					
ANR	4978872	ElseStatement	else		4977758	0					
ANR	4978873	CompoundStatement		198:8:5106:5106	4977758	0					
ANR	4978874	ExpressionStatement	skip = 2	244:4:6662:6670	4977758	0	True				
ANR	4978875	AssignmentExpression	skip = 2		4977758	0		=			
ANR	4978876	Identifier	skip		4977758	0					
ANR	4978877	PrimaryExpression	2		4977758	1					
ANR	4978878	ExpressionStatement	force_set = false	245:4:6676:6693	4977758	1	True				
ANR	4978879	AssignmentExpression	force_set = false		4977758	0		=			
ANR	4978880	Identifier	force_set		4977758	0					
ANR	4978881	Identifier	false		4977758	1					
ANR	4978882	IfStatement	if ( ! wrapper )		4977758	6					
ANR	4978883	Condition	! wrapper	248:8:6709:6716	4977758	0	True				
ANR	4978884	UnaryOperationExpression	! wrapper		4977758	0					
ANR	4978885	UnaryOperator	!		4977758	0					
ANR	4978886	Identifier	wrapper		4977758	1					
ANR	4978887	CompoundStatement		203:19:5170:5170	4977758	1					
ANR	4978888	ExpressionStatement	"fprintf ( stderr , ""--stat: no wrapper object!\\n"" )"	249:4:6726:6775	4977758	0	True				
ANR	4978889	CallExpression	"fprintf ( stderr , ""--stat: no wrapper object!\\n"" )"		4977758	0					
ANR	4978890	Callee	fprintf		4977758	0					
ANR	4978891	Identifier	fprintf		4977758	0					
ANR	4978892	ArgumentList	stderr		4977758	1					
ANR	4978893	Argument	stderr		4977758	0					
ANR	4978894	Identifier	stderr		4977758	0					
ANR	4978895	Argument	"""--stat: no wrapper object!\\n"""		4977758	1					
ANR	4978896	PrimaryExpression	"""--stat: no wrapper object!\\n"""		4977758	0					
ANR	4978897	ExpressionStatement	exit ( 1 )	250:4:6781:6790	4977758	1	True				
ANR	4978898	CallExpression	exit ( 1 )		4977758	0					
ANR	4978899	Callee	exit		4977758	0					
ANR	4978900	Identifier	exit		4977758	0					
ANR	4978901	ArgumentList	1		4977758	1					
ANR	4978902	Argument	1		4977758	0					
ANR	4978903	PrimaryExpression	1		4977758	0					
ANR	4978904	IdentifierDeclStatement	"int rc1 = 0 , rc2 = 0 ;"	254:3:6823:6844	4977758	7	True				
ANR	4978905	IdentifierDecl	rc1 = 0		4977758	0					
ANR	4978906	IdentifierDeclType	int		4977758	0					
ANR	4978907	Identifier	rc1		4977758	1					
ANR	4978908	AssignmentExpression	rc1 = 0		4977758	2		=			
ANR	4978909	Identifier	rc1		4977758	0					
ANR	4978910	PrimaryExpression	0		4977758	1					
ANR	4978911	IdentifierDecl	rc2 = 0		4977758	1					
ANR	4978912	IdentifierDeclType	int		4977758	0					
ANR	4978913	Identifier	rc2		4977758	1					
ANR	4978914	AssignmentExpression	rc2 = 0		4977758	2		=			
ANR	4978915	Identifier	rc2		4977758	0					
ANR	4978916	PrimaryExpression	0		4977758	1					
ANR	4978917	IdentifierDeclStatement	bool op2 = false ;	255:3:6849:6865	4977758	8	True				
ANR	4978918	IdentifierDecl	op2 = false		4977758	0					
ANR	4978919	IdentifierDeclType	bool		4977758	0					
ANR	4978920	Identifier	op2		4977758	1					
ANR	4978921	AssignmentExpression	op2 = false		4977758	2		=			
ANR	4978922	Identifier	false		4977758	0					
ANR	4978923	Identifier	false		4977758	1					
ANR	4978924	IdentifierDeclStatement	"char * n1 = """" , * n2 = """" ;"	256:3:6870:6893	4977758	9	True				
ANR	4978925	IdentifierDecl	"* n1 = """""		4977758	0					
ANR	4978926	IdentifierDeclType	char *		4977758	0					
ANR	4978927	Identifier	n1		4977758	1					
ANR	4978928	AssignmentExpression	"* n1 = """""		4977758	2		=			
ANR	4978929	Identifier	n1		4977758	0					
ANR	4978930	PrimaryExpression	""""""		4977758	1					
ANR	4978931	IdentifierDecl	"* n2 = """""		4977758	1					
ANR	4978932	IdentifierDeclType	char *		4977758	0					
ANR	4978933	Identifier	n2		4977758	1					
ANR	4978934	AssignmentExpression	"* n2 = """""		4977758	2		=			
ANR	4978935	Identifier	n2		4977758	0					
ANR	4978936	PrimaryExpression	""""""		4977758	1					
ANR	4978937	SwitchStatement	switch ( op -> type )		4977758	10					
ANR	4978938	Condition	op -> type	257:12:6907:6914	4977758	0	True				
ANR	4978939	PtrMemberAccess	op -> type		4977758	0					
ANR	4978940	Identifier	op		4977758	0					
ANR	4978941	Identifier	type		4977758	1					
ANR	4978942	CompoundStatement		212:23:5368:5368	4977758	1					
ANR	4978943	Label	case StatWrapper :: STATOP_NONE :	258:3:6923:6952	4977758	0	True				
ANR	4978944	Identifier	StatWrapper :: STATOP_NONE		4977758	0					
ANR	4978945	Label	case StatWrapper :: STATOP_LAST :	259:3:6957:6986	4977758	1	True				
ANR	4978946	Identifier	StatWrapper :: STATOP_LAST		4977758	0					
ANR	4978947	IfStatement	if ( force_set )		4977758	2					
ANR	4978948	Condition	force_set	260:9:6997:7005	4977758	0	True				
ANR	4978949	Identifier	force_set		4977758	0					
ANR	4978950	CompoundStatement		215:21:5459:5459	4977758	1					
ANR	4978951	ExpressionStatement	"n1 = ""Stat(which,force)"""	261:5:7016:7040	4977758	0	True				
ANR	4978952	AssignmentExpression	"n1 = ""Stat(which,force)"""		4977758	0		=			
ANR	4978953	Identifier	n1		4977758	0					
ANR	4978954	PrimaryExpression	"""Stat(which,force)"""		4977758	1					
ANR	4978955	ExpressionStatement	"rc1 = wrapper -> Stat ( which -> type , force )"	262:5:7047:7088	4977758	1	True				
ANR	4978956	AssignmentExpression	"rc1 = wrapper -> Stat ( which -> type , force )"		4977758	0		=			
ANR	4978957	Identifier	rc1		4977758	0					
ANR	4978958	CallExpression	"wrapper -> Stat ( which -> type , force )"		4977758	1					
ANR	4978959	Callee	wrapper -> Stat		4977758	0					
ANR	4978960	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4978961	Identifier	wrapper		4977758	0					
ANR	4978962	Identifier	Stat		4977758	1					
ANR	4978963	ArgumentList	which -> type		4977758	1					
ANR	4978964	Argument	which -> type		4977758	0					
ANR	4978965	PtrMemberAccess	which -> type		4977758	0					
ANR	4978966	Identifier	which		4977758	0					
ANR	4978967	Identifier	type		4977758	1					
ANR	4978968	Argument	force		4977758	1					
ANR	4978969	Identifier	force		4977758	0					
ANR	4978970	ElseStatement	else		4977758	0					
ANR	4978971	CompoundStatement		218:11:5551:5551	4977758	0					
ANR	4978972	ExpressionStatement	"n1 = ""Stat(which)"""	264:5:7108:7126	4977758	0	True				
ANR	4978973	AssignmentExpression	"n1 = ""Stat(which)"""		4977758	0		=			
ANR	4978974	Identifier	n1		4977758	0					
ANR	4978975	PrimaryExpression	"""Stat(which)"""		4977758	1					
ANR	4978976	ExpressionStatement	rc1 = wrapper -> Stat ( which -> type )	265:5:7133:7167	4977758	1	True				
ANR	4978977	AssignmentExpression	rc1 = wrapper -> Stat ( which -> type )		4977758	0		=			
ANR	4978978	Identifier	rc1		4977758	0					
ANR	4978979	CallExpression	wrapper -> Stat ( which -> type )		4977758	1					
ANR	4978980	Callee	wrapper -> Stat		4977758	0					
ANR	4978981	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4978982	Identifier	wrapper		4977758	0					
ANR	4978983	Identifier	Stat		4977758	1					
ANR	4978984	ArgumentList	which -> type		4977758	1					
ANR	4978985	Argument	which -> type		4977758	0					
ANR	4978986	PtrMemberAccess	which -> type		4977758	0					
ANR	4978987	Identifier	which		4977758	0					
ANR	4978988	Identifier	type		4977758	1					
ANR	4978989	BreakStatement	break ;	267:4:7179:7184	4977758	3	True				
ANR	4978990	Label	case StatWrapper :: STATOP_STAT :	268:3:7189:7218	4977758	4	True				
ANR	4978991	Identifier	StatWrapper :: STATOP_STAT		4977758	0					
ANR	4978992	Label	case StatWrapper :: STATOP_LSTAT :	269:3:7223:7253	4977758	5	True				
ANR	4978993	Identifier	StatWrapper :: STATOP_LSTAT		4977758	0					
ANR	4978994	Label	case StatWrapper :: STATOP_BOTH :	270:3:7258:7287	4977758	6	True				
ANR	4978995	Identifier	StatWrapper :: STATOP_BOTH		4977758	0					
ANR	4978996	IfStatement	if ( force_set )		4977758	7					
ANR	4978997	Condition	force_set	271:9:7298:7306	4977758	0	True				
ANR	4978998	Identifier	force_set		4977758	0					
ANR	4978999	CompoundStatement		226:21:5760:5760	4977758	1					
ANR	4979000	ExpressionStatement	"n1 = ""Stat(path,which,force)"""	272:5:7317:7346	4977758	0	True				
ANR	4979001	AssignmentExpression	"n1 = ""Stat(path,which,force)"""		4977758	0		=			
ANR	4979002	Identifier	n1		4977758	0					
ANR	4979003	PrimaryExpression	"""Stat(path,which,force)"""		4977758	1					
ANR	4979004	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type , force )"	273:5:7353:7400	4977758	1	True				
ANR	4979005	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type , force )"		4977758	0		=			
ANR	4979006	Identifier	rc1		4977758	0					
ANR	4979007	CallExpression	"wrapper -> Stat ( path , which -> type , force )"		4977758	1					
ANR	4979008	Callee	wrapper -> Stat		4977758	0					
ANR	4979009	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979010	Identifier	wrapper		4977758	0					
ANR	4979011	Identifier	Stat		4977758	1					
ANR	4979012	ArgumentList	path		4977758	1					
ANR	4979013	Argument	path		4977758	0					
ANR	4979014	Identifier	path		4977758	0					
ANR	4979015	Argument	which -> type		4977758	1					
ANR	4979016	PtrMemberAccess	which -> type		4977758	0					
ANR	4979017	Identifier	which		4977758	0					
ANR	4979018	Identifier	type		4977758	1					
ANR	4979019	Argument	force		4977758	2					
ANR	4979020	Identifier	force		4977758	0					
ANR	4979021	ElseStatement	else		4977758	0					
ANR	4979022	CompoundStatement		229:11:5863:5863	4977758	0					
ANR	4979023	ExpressionStatement	"n1 = ""Stat(path,which)"""	275:5:7420:7443	4977758	0	True				
ANR	4979024	AssignmentExpression	"n1 = ""Stat(path,which)"""		4977758	0		=			
ANR	4979025	Identifier	n1		4977758	0					
ANR	4979026	PrimaryExpression	"""Stat(path,which)"""		4977758	1					
ANR	4979027	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type )"	276:5:7450:7490	4977758	1	True				
ANR	4979028	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type )"		4977758	0		=			
ANR	4979029	Identifier	rc1		4977758	0					
ANR	4979030	CallExpression	"wrapper -> Stat ( path , which -> type )"		4977758	1					
ANR	4979031	Callee	wrapper -> Stat		4977758	0					
ANR	4979032	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979033	Identifier	wrapper		4977758	0					
ANR	4979034	Identifier	Stat		4977758	1					
ANR	4979035	ArgumentList	path		4977758	1					
ANR	4979036	Argument	path		4977758	0					
ANR	4979037	Identifier	path		4977758	0					
ANR	4979038	Argument	which -> type		4977758	1					
ANR	4979039	PtrMemberAccess	which -> type		4977758	0					
ANR	4979040	Identifier	which		4977758	0					
ANR	4979041	Identifier	type		4977758	1					
ANR	4979042	BreakStatement	break ;	278:4:7502:7507	4977758	8	True				
ANR	4979043	Label	case StatWrapper :: STATOP_FSTAT :	279:3:7512:7542	4977758	9	True				
ANR	4979044	Identifier	StatWrapper :: STATOP_FSTAT		4977758	0					
ANR	4979045	IfStatement	if ( force_set )		4977758	10					
ANR	4979046	Condition	force_set	280:9:7553:7561	4977758	0	True				
ANR	4979047	Identifier	force_set		4977758	0					
ANR	4979048	CompoundStatement		235:21:6015:6015	4977758	1					
ANR	4979049	ExpressionStatement	"n1 = ""Stat(fd,force)"""	281:5:7572:7593	4977758	0	True				
ANR	4979050	AssignmentExpression	"n1 = ""Stat(fd,force)"""		4977758	0		=			
ANR	4979051	Identifier	n1		4977758	0					
ANR	4979052	PrimaryExpression	"""Stat(fd,force)"""		4977758	1					
ANR	4979053	ExpressionStatement	"rc1 = wrapper -> Stat ( fd , which -> type , force )"	282:5:7600:7645	4977758	1	True				
ANR	4979054	AssignmentExpression	"rc1 = wrapper -> Stat ( fd , which -> type , force )"		4977758	0		=			
ANR	4979055	Identifier	rc1		4977758	0					
ANR	4979056	CallExpression	"wrapper -> Stat ( fd , which -> type , force )"		4977758	1					
ANR	4979057	Callee	wrapper -> Stat		4977758	0					
ANR	4979058	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979059	Identifier	wrapper		4977758	0					
ANR	4979060	Identifier	Stat		4977758	1					
ANR	4979061	ArgumentList	fd		4977758	1					
ANR	4979062	Argument	fd		4977758	0					
ANR	4979063	Identifier	fd		4977758	0					
ANR	4979064	Argument	which -> type		4977758	1					
ANR	4979065	PtrMemberAccess	which -> type		4977758	0					
ANR	4979066	Identifier	which		4977758	0					
ANR	4979067	Identifier	type		4977758	1					
ANR	4979068	Argument	force		4977758	2					
ANR	4979069	Identifier	force		4977758	0					
ANR	4979070	ElseStatement	else		4977758	0					
ANR	4979071	CompoundStatement		238:11:6108:6108	4977758	0					
ANR	4979072	ExpressionStatement	"n1 = ""Stat(fd)"""	284:5:7665:7680	4977758	0	True				
ANR	4979073	AssignmentExpression	"n1 = ""Stat(fd)"""		4977758	0		=			
ANR	4979074	Identifier	n1		4977758	0					
ANR	4979075	PrimaryExpression	"""Stat(fd)"""		4977758	1					
ANR	4979076	ExpressionStatement	rc1 = wrapper -> Stat ( fd )	285:5:7687:7712	4977758	1	True				
ANR	4979077	AssignmentExpression	rc1 = wrapper -> Stat ( fd )		4977758	0		=			
ANR	4979078	Identifier	rc1		4977758	0					
ANR	4979079	CallExpression	wrapper -> Stat ( fd )		4977758	1					
ANR	4979080	Callee	wrapper -> Stat		4977758	0					
ANR	4979081	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979082	Identifier	wrapper		4977758	0					
ANR	4979083	Identifier	Stat		4977758	1					
ANR	4979084	ArgumentList	fd		4977758	1					
ANR	4979085	Argument	fd		4977758	0					
ANR	4979086	Identifier	fd		4977758	0					
ANR	4979087	BreakStatement	break ;	287:4:7724:7729	4977758	11	True				
ANR	4979088	Label	case StatWrapper :: STATOP_ALL :	288:3:7734:7762	4977758	12	True				
ANR	4979089	Identifier	StatWrapper :: STATOP_ALL		4977758	0					
ANR	4979090	IfStatement	if ( force_set )		4977758	13					
ANR	4979091	Condition	force_set	289:9:7773:7781	4977758	0	True				
ANR	4979092	Identifier	force_set		4977758	0					
ANR	4979093	CompoundStatement		244:21:6235:6235	4977758	1					
ANR	4979094	ExpressionStatement	"n1 = ""Stat(path,which,force)"""	290:5:7792:7821	4977758	0	True				
ANR	4979095	AssignmentExpression	"n1 = ""Stat(path,which,force)"""		4977758	0		=			
ANR	4979096	Identifier	n1		4977758	0					
ANR	4979097	PrimaryExpression	"""Stat(path,which,force)"""		4977758	1					
ANR	4979098	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type , force )"	291:5:7828:7876	4977758	1	True				
ANR	4979099	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type , force )"		4977758	0		=			
ANR	4979100	Identifier	rc1		4977758	0					
ANR	4979101	CallExpression	"wrapper -> Stat ( path , which -> type , force )"		4977758	1					
ANR	4979102	Callee	wrapper -> Stat		4977758	0					
ANR	4979103	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979104	Identifier	wrapper		4977758	0					
ANR	4979105	Identifier	Stat		4977758	1					
ANR	4979106	ArgumentList	path		4977758	1					
ANR	4979107	Argument	path		4977758	0					
ANR	4979108	Identifier	path		4977758	0					
ANR	4979109	Argument	which -> type		4977758	1					
ANR	4979110	PtrMemberAccess	which -> type		4977758	0					
ANR	4979111	Identifier	which		4977758	0					
ANR	4979112	Identifier	type		4977758	1					
ANR	4979113	Argument	force		4977758	2					
ANR	4979114	Identifier	force		4977758	0					
ANR	4979115	ExpressionStatement	"n2 = ""Stat(fd,force)"""	292:5:7883:7904	4977758	2	True				
ANR	4979116	AssignmentExpression	"n2 = ""Stat(fd,force)"""		4977758	0		=			
ANR	4979117	Identifier	n2		4977758	0					
ANR	4979118	PrimaryExpression	"""Stat(fd,force)"""		4977758	1					
ANR	4979119	ExpressionStatement	"rc2 = wrapper -> Stat ( fd , force )"	293:5:7911:7943	4977758	3	True				
ANR	4979120	AssignmentExpression	"rc2 = wrapper -> Stat ( fd , force )"		4977758	0		=			
ANR	4979121	Identifier	rc2		4977758	0					
ANR	4979122	CallExpression	"wrapper -> Stat ( fd , force )"		4977758	1					
ANR	4979123	Callee	wrapper -> Stat		4977758	0					
ANR	4979124	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979125	Identifier	wrapper		4977758	0					
ANR	4979126	Identifier	Stat		4977758	1					
ANR	4979127	ArgumentList	fd		4977758	1					
ANR	4979128	Argument	fd		4977758	0					
ANR	4979129	Identifier	fd		4977758	0					
ANR	4979130	Argument	force		4977758	1					
ANR	4979131	Identifier	force		4977758	0					
ANR	4979132	ElseStatement	else		4977758	0					
ANR	4979133	CompoundStatement		249:11:6406:6406	4977758	0					
ANR	4979134	ExpressionStatement	"n1 = ""Stat(path,which)"""	295:5:7963:7986	4977758	0	True				
ANR	4979135	AssignmentExpression	"n1 = ""Stat(path,which)"""		4977758	0		=			
ANR	4979136	Identifier	n1		4977758	0					
ANR	4979137	PrimaryExpression	"""Stat(path,which)"""		4977758	1					
ANR	4979138	ExpressionStatement	"rc1 = wrapper -> Stat ( path , which -> type )"	296:5:7993:8034	4977758	1	True				
ANR	4979139	AssignmentExpression	"rc1 = wrapper -> Stat ( path , which -> type )"		4977758	0		=			
ANR	4979140	Identifier	rc1		4977758	0					
ANR	4979141	CallExpression	"wrapper -> Stat ( path , which -> type )"		4977758	1					
ANR	4979142	Callee	wrapper -> Stat		4977758	0					
ANR	4979143	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979144	Identifier	wrapper		4977758	0					
ANR	4979145	Identifier	Stat		4977758	1					
ANR	4979146	ArgumentList	path		4977758	1					
ANR	4979147	Argument	path		4977758	0					
ANR	4979148	Identifier	path		4977758	0					
ANR	4979149	Argument	which -> type		4977758	1					
ANR	4979150	PtrMemberAccess	which -> type		4977758	0					
ANR	4979151	Identifier	which		4977758	0					
ANR	4979152	Identifier	type		4977758	1					
ANR	4979153	ExpressionStatement	"n2 = ""Stat(fd)"""	297:5:8041:8056	4977758	2	True				
ANR	4979154	AssignmentExpression	"n2 = ""Stat(fd)"""		4977758	0		=			
ANR	4979155	Identifier	n2		4977758	0					
ANR	4979156	PrimaryExpression	"""Stat(fd)"""		4977758	1					
ANR	4979157	ExpressionStatement	rc2 = wrapper -> Stat ( fd )	298:5:8063:8088	4977758	3	True				
ANR	4979158	AssignmentExpression	rc2 = wrapper -> Stat ( fd )		4977758	0		=			
ANR	4979159	Identifier	rc2		4977758	0					
ANR	4979160	CallExpression	wrapper -> Stat ( fd )		4977758	1					
ANR	4979161	Callee	wrapper -> Stat		4977758	0					
ANR	4979162	PtrMemberAccess	wrapper -> Stat		4977758	0					
ANR	4979163	Identifier	wrapper		4977758	0					
ANR	4979164	Identifier	Stat		4977758	1					
ANR	4979165	ArgumentList	fd		4977758	1					
ANR	4979166	Argument	fd		4977758	0					
ANR	4979167	Identifier	fd		4977758	0					
ANR	4979168	ExpressionStatement	op2 = true	300:4:8100:8110	4977758	14	True				
ANR	4979169	AssignmentExpression	op2 = true		4977758	0		=			
ANR	4979170	Identifier	op2		4977758	0					
ANR	4979171	Identifier	true		4977758	1					
ANR	4979172	BreakStatement	break ;	301:4:8116:8121	4977758	15	True				
ANR	4979173	Label	default :	302:3:8126:8133	4977758	16	True				
ANR	4979174	Identifier	default		4977758	0					
ANR	4979175	ExpressionStatement	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"	303:4:8139:8225	4977758	17	True				
ANR	4979176	CallExpression	"fprintf ( stderr , ""%s (%d) doesn't make sense for create\\n"" , op -> str , op -> type )"		4977758	0					
ANR	4979177	Callee	fprintf		4977758	0					
ANR	4979178	Identifier	fprintf		4977758	0					
ANR	4979179	ArgumentList	stderr		4977758	1					
ANR	4979180	Argument	stderr		4977758	0					
ANR	4979181	Identifier	stderr		4977758	0					
ANR	4979182	Argument	"""%s (%d) doesn't make sense for create\\n"""		4977758	1					
ANR	4979183	PrimaryExpression	"""%s (%d) doesn't make sense for create\\n"""		4977758	0					
ANR	4979184	Argument	op -> str		4977758	2					
ANR	4979185	PtrMemberAccess	op -> str		4977758	0					
ANR	4979186	Identifier	op		4977758	0					
ANR	4979187	Identifier	str		4977758	1					
ANR	4979188	Argument	op -> type		4977758	3					
ANR	4979189	PtrMemberAccess	op -> type		4977758	0					
ANR	4979190	Identifier	op		4977758	0					
ANR	4979191	Identifier	type		4977758	1					
ANR	4979192	ExpressionStatement	"printf ( ""%s %s (%d)\\n"" , n1 , rc1 ? ""Failed"" : ""OK"" , rc1 )"	306:3:8235:8289	4977758	11	True				
ANR	4979193	CallExpression	"printf ( ""%s %s (%d)\\n"" , n1 , rc1 ? ""Failed"" : ""OK"" , rc1 )"		4977758	0					
ANR	4979194	Callee	printf		4977758	0					
ANR	4979195	Identifier	printf		4977758	0					
ANR	4979196	ArgumentList	"""%s %s (%d)\\n"""		4977758	1					
ANR	4979197	Argument	"""%s %s (%d)\\n"""		4977758	0					
ANR	4979198	PrimaryExpression	"""%s %s (%d)\\n"""		4977758	0					
ANR	4979199	Argument	n1		4977758	1					
ANR	4979200	Identifier	n1		4977758	0					
ANR	4979201	Argument	"rc1 ? ""Failed"" : ""OK"""		4977758	2					
ANR	4979202	ConditionalExpression	"rc1 ? ""Failed"" : ""OK"""		4977758	0					
ANR	4979203	Condition	rc1		4977758	0					
ANR	4979204	Identifier	rc1		4977758	0					
ANR	4979205	PrimaryExpression	"""Failed"""		4977758	1					
ANR	4979206	PrimaryExpression	"""OK"""		4977758	2					
ANR	4979207	Argument	rc1		4977758	3					
ANR	4979208	Identifier	rc1		4977758	0					
ANR	4979209	IfStatement	if ( op2 )		4977758	12					
ANR	4979210	Condition	op2	307:8:8299:8301	4977758	0	True				
ANR	4979211	Identifier	op2		4977758	0					
ANR	4979212	CompoundStatement		262:14:6755:6755	4977758	1					
ANR	4979213	ExpressionStatement	"printf ( ""%s %s (%d)\\n"" , n2 , rc2 ? ""Failed"" : ""OK"" , rc2 )"	308:4:8311:8365	4977758	0	True				
ANR	4979214	CallExpression	"printf ( ""%s %s (%d)\\n"" , n2 , rc2 ? ""Failed"" : ""OK"" , rc2 )"		4977758	0					
ANR	4979215	Callee	printf		4977758	0					
ANR	4979216	Identifier	printf		4977758	0					
ANR	4979217	ArgumentList	"""%s %s (%d)\\n"""		4977758	1					
ANR	4979218	Argument	"""%s %s (%d)\\n"""		4977758	0					
ANR	4979219	PrimaryExpression	"""%s %s (%d)\\n"""		4977758	0					
ANR	4979220	Argument	n2		4977758	1					
ANR	4979221	Identifier	n2		4977758	0					
ANR	4979222	Argument	"rc2 ? ""Failed"" : ""OK"""		4977758	2					
ANR	4979223	ConditionalExpression	"rc2 ? ""Failed"" : ""OK"""		4977758	0					
ANR	4979224	Condition	rc2		4977758	0					
ANR	4979225	Identifier	rc2		4977758	0					
ANR	4979226	PrimaryExpression	"""Failed"""		4977758	1					
ANR	4979227	PrimaryExpression	"""OK"""		4977758	2					
ANR	4979228	Argument	rc2		4977758	3					
ANR	4979229	Identifier	rc2		4977758	0					
ANR	4979230	ExpressionStatement	"dump_status ( * wrapper , ""Stat results"" )"	311:3:8377:8416	4977758	13	True				
ANR	4979231	CallExpression	"dump_status ( * wrapper , ""Stat results"" )"		4977758	0					
ANR	4979232	Callee	dump_status		4977758	0					
ANR	4979233	Identifier	dump_status		4977758	0					
ANR	4979234	ArgumentList	* wrapper		4977758	1					
ANR	4979235	Argument	* wrapper		4977758	0					
ANR	4979236	UnaryOperationExpression	* wrapper		4977758	0					
ANR	4979237	UnaryOperator	*		4977758	0					
ANR	4979238	Identifier	wrapper		4977758	1					
ANR	4979239	Argument	"""Stat results"""		4977758	1					
ANR	4979240	PrimaryExpression	"""Stat results"""		4977758	0					
ANR	4979241	ElseStatement	else		4977758	0					
ANR	4979242	IfStatement	"if ( ( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) ) )"		4977758	0					
ANR	4979243	Condition	"( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) )"	314:12:8435:8486	4977758	0	True				
ANR	4979244	OrExpression	"( ! strcmp ( arg , ""--retry"" ) ) || ( ! strcmp ( arg , ""-r"" ) )"		4977758	0		||			
ANR	4979245	UnaryOperationExpression	"! strcmp ( arg , ""--retry"" )"		4977758	0					
ANR	4979246	UnaryOperator	!		4977758	0					
ANR	4979247	CallExpression	"strcmp ( arg , ""--retry"" )"		4977758	1					
ANR	4979248	Callee	strcmp		4977758	0					
ANR	4979249	Identifier	strcmp		4977758	0					
ANR	4979250	ArgumentList	arg		4977758	1					
ANR	4979251	Argument	arg		4977758	0					
ANR	4979252	Identifier	arg		4977758	0					
ANR	4979253	Argument	"""--retry"""		4977758	1					
ANR	4979254	PrimaryExpression	"""--retry"""		4977758	0					
ANR	4979255	UnaryOperationExpression	"! strcmp ( arg , ""-r"" )"		4977758	1					
ANR	4979256	UnaryOperator	!		4977758	0					
ANR	4979257	CallExpression	"strcmp ( arg , ""-r"" )"		4977758	1					
ANR	4979258	Callee	strcmp		4977758	0					
ANR	4979259	Identifier	strcmp		4977758	0					
ANR	4979260	ArgumentList	arg		4977758	1					
ANR	4979261	Argument	arg		4977758	0					
ANR	4979262	Identifier	arg		4977758	0					
ANR	4979263	Argument	"""-r"""		4977758	1					
ANR	4979264	PrimaryExpression	"""-r"""		4977758	0					
ANR	4979265	CompoundStatement		275:3:7043:7070	4977758	1					
ANR	4979266	IfStatement	if ( ! wrapper )		4977758	0					
ANR	4979267	Condition	! wrapper	315:8:8500:8507	4977758	0	True				
ANR	4979268	UnaryOperationExpression	! wrapper		4977758	0					
ANR	4979269	UnaryOperator	!		4977758	0					
ANR	4979270	Identifier	wrapper		4977758	1					
ANR	4979271	CompoundStatement		270:19:6961:6961	4977758	1					
ANR	4979272	ExpressionStatement	"fprintf ( stderr , ""--retry: no wrapper object!\\n"" )"	316:4:8517:8567	4977758	0	True				
ANR	4979273	CallExpression	"fprintf ( stderr , ""--retry: no wrapper object!\\n"" )"		4977758	0					
ANR	4979274	Callee	fprintf		4977758	0					
ANR	4979275	Identifier	fprintf		4977758	0					
ANR	4979276	ArgumentList	stderr		4977758	1					
ANR	4979277	Argument	stderr		4977758	0					
ANR	4979278	Identifier	stderr		4977758	0					
ANR	4979279	Argument	"""--retry: no wrapper object!\\n"""		4977758	1					
ANR	4979280	PrimaryExpression	"""--retry: no wrapper object!\\n"""		4977758	0					
ANR	4979281	ExpressionStatement	exit ( 1 )	317:4:8573:8582	4977758	1	True				
ANR	4979282	CallExpression	exit ( 1 )		4977758	0					
ANR	4979283	Callee	exit		4977758	0					
ANR	4979284	Identifier	exit		4977758	0					
ANR	4979285	ArgumentList	1		4977758	1					
ANR	4979286	Argument	1		4977758	0					
ANR	4979287	PrimaryExpression	1		4977758	0					
ANR	4979288	IdentifierDeclStatement	int rc = wrapper -> Retry ( ) ;	320:3:8593:8620	4977758	1	True				
ANR	4979289	IdentifierDecl	rc = wrapper -> Retry ( )		4977758	0					
ANR	4979290	IdentifierDeclType	int		4977758	0					
ANR	4979291	Identifier	rc		4977758	1					
ANR	4979292	AssignmentExpression	rc = wrapper -> Retry ( )		4977758	2		=			
ANR	4979293	Identifier	rc		4977758	0					
ANR	4979294	CallExpression	wrapper -> Retry ( )		4977758	1					
ANR	4979295	Callee	wrapper -> Retry		4977758	0					
ANR	4979296	PtrMemberAccess	wrapper -> Retry		4977758	0					
ANR	4979297	Identifier	wrapper		4977758	0					
ANR	4979298	Identifier	Retry		4977758	1					
ANR	4979299	ArgumentList			4977758	1					
ANR	4979300	ExpressionStatement	"printf ( ""Retry %s: %d\\n"" , rc ? ""Failed"" : ""OK"" , rc )"	321:3:8625:8675	4977758	2	True				
ANR	4979301	CallExpression	"printf ( ""Retry %s: %d\\n"" , rc ? ""Failed"" : ""OK"" , rc )"		4977758	0					
ANR	4979302	Callee	printf		4977758	0					
ANR	4979303	Identifier	printf		4977758	0					
ANR	4979304	ArgumentList	"""Retry %s: %d\\n"""		4977758	1					
ANR	4979305	Argument	"""Retry %s: %d\\n"""		4977758	0					
ANR	4979306	PrimaryExpression	"""Retry %s: %d\\n"""		4977758	0					
ANR	4979307	Argument	"rc ? ""Failed"" : ""OK"""		4977758	1					
ANR	4979308	ConditionalExpression	"rc ? ""Failed"" : ""OK"""		4977758	0					
ANR	4979309	Condition	rc		4977758	0					
ANR	4979310	Identifier	rc		4977758	0					
ANR	4979311	PrimaryExpression	"""Failed"""		4977758	1					
ANR	4979312	PrimaryExpression	"""OK"""		4977758	2					
ANR	4979313	Argument	rc		4977758	2					
ANR	4979314	Identifier	rc		4977758	0					
ANR	4979315	ExpressionStatement	"dump_status ( * wrapper , ""Retry results"" )"	323:3:8681:8721	4977758	3	True				
ANR	4979316	CallExpression	"dump_status ( * wrapper , ""Retry results"" )"		4977758	0					
ANR	4979317	Callee	dump_status		4977758	0					
ANR	4979318	Identifier	dump_status		4977758	0					
ANR	4979319	ArgumentList	* wrapper		4977758	1					
ANR	4979320	Argument	* wrapper		4977758	0					
ANR	4979321	UnaryOperationExpression	* wrapper		4977758	0					
ANR	4979322	UnaryOperator	*		4977758	0					
ANR	4979323	Identifier	wrapper		4977758	1					
ANR	4979324	Argument	"""Retry results"""		4977758	1					
ANR	4979325	PrimaryExpression	"""Retry results"""		4977758	0					
ANR	4979326	ElseStatement	else		4977758	0					
ANR	4979327	IfStatement	"if ( ( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) ) )"		4977758	0					
ANR	4979328	Condition	"( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) )"	326:12:8740:8791	4977758	0	True				
ANR	4979329	OrExpression	"( ! strcmp ( arg , ""--query"" ) ) || ( ! strcmp ( arg , ""-q"" ) )"		4977758	0		||			
ANR	4979330	UnaryOperationExpression	"! strcmp ( arg , ""--query"" )"		4977758	0					
ANR	4979331	UnaryOperator	!		4977758	0					
ANR	4979332	CallExpression	"strcmp ( arg , ""--query"" )"		4977758	1					
ANR	4979333	Callee	strcmp		4977758	0					
ANR	4979334	Identifier	strcmp		4977758	0					
ANR	4979335	ArgumentList	arg		4977758	1					
ANR	4979336	Argument	arg		4977758	0					
ANR	4979337	Identifier	arg		4977758	0					
ANR	4979338	Argument	"""--query"""		4977758	1					
ANR	4979339	PrimaryExpression	"""--query"""		4977758	0					
ANR	4979340	UnaryOperationExpression	"! strcmp ( arg , ""-q"" )"		4977758	1					
ANR	4979341	UnaryOperator	!		4977758	0					
ANR	4979342	CallExpression	"strcmp ( arg , ""-q"" )"		4977758	1					
ANR	4979343	Callee	strcmp		4977758	0					
ANR	4979344	Identifier	strcmp		4977758	0					
ANR	4979345	ArgumentList	arg		4977758	1					
ANR	4979346	Argument	arg		4977758	0					
ANR	4979347	Identifier	arg		4977758	0					
ANR	4979348	Argument	"""-q"""		4977758	1					
ANR	4979349	PrimaryExpression	"""-q"""		4977758	0					
ANR	4979350	CompoundStatement		281:67:7245:7245	4977758	1					
ANR	4979351	IfStatement	if ( ! wrapper )		4977758	0					
ANR	4979352	Condition	! wrapper	327:8:8805:8812	4977758	0	True				
ANR	4979353	UnaryOperationExpression	! wrapper		4977758	0					
ANR	4979354	UnaryOperator	!		4977758	0					
ANR	4979355	Identifier	wrapper		4977758	1					
ANR	4979356	CompoundStatement		282:19:7266:7266	4977758	1					
ANR	4979357	ExpressionStatement	"fprintf ( stderr , ""--query: no wrapper object!\\n"" )"	328:4:8822:8872	4977758	0	True				
ANR	4979358	CallExpression	"fprintf ( stderr , ""--query: no wrapper object!\\n"" )"		4977758	0					
ANR	4979359	Callee	fprintf		4977758	0					
ANR	4979360	Identifier	fprintf		4977758	0					
ANR	4979361	ArgumentList	stderr		4977758	1					
ANR	4979362	Argument	stderr		4977758	0					
ANR	4979363	Identifier	stderr		4977758	0					
ANR	4979364	Argument	"""--query: no wrapper object!\\n"""		4977758	1					
ANR	4979365	PrimaryExpression	"""--query: no wrapper object!\\n"""		4977758	0					
ANR	4979366	ExpressionStatement	exit ( 1 )	329:4:8878:8887	4977758	1	True				
ANR	4979367	CallExpression	exit ( 1 )		4977758	0					
ANR	4979368	Callee	exit		4977758	0					
ANR	4979369	Identifier	exit		4977758	0					
ANR	4979370	ArgumentList	1		4977758	1					
ANR	4979371	Argument	1		4977758	0					
ANR	4979372	PrimaryExpression	1		4977758	0					
ANR	4979373	ExpressionStatement	"dump_status ( * wrapper , ""Query results"" )"	332:3:8898:8938	4977758	1	True				
ANR	4979374	CallExpression	"dump_status ( * wrapper , ""Query results"" )"		4977758	0					
ANR	4979375	Callee	dump_status		4977758	0					
ANR	4979376	Identifier	dump_status		4977758	0					
ANR	4979377	ArgumentList	* wrapper		4977758	1					
ANR	4979378	Argument	* wrapper		4977758	0					
ANR	4979379	UnaryOperationExpression	* wrapper		4977758	0					
ANR	4979380	UnaryOperator	*		4977758	0					
ANR	4979381	Identifier	wrapper		4977758	1					
ANR	4979382	Argument	"""Query results"""		4977758	1					
ANR	4979383	PrimaryExpression	"""Query results"""		4977758	0					
ANR	4979384	ElseStatement	else		4977758	0					
ANR	4979385	CompoundStatement		290:7:7402:7402	4977758	0					
ANR	4979386	ExpressionStatement	"fprintf ( stderr , ""Unknown command %s\\n"" , arg )"	336:3:8957:9003	4977758	0	True				
ANR	4979387	CallExpression	"fprintf ( stderr , ""Unknown command %s\\n"" , arg )"		4977758	0					
ANR	4979388	Callee	fprintf		4977758	0					
ANR	4979389	Identifier	fprintf		4977758	0					
ANR	4979390	ArgumentList	stderr		4977758	1					
ANR	4979391	Argument	stderr		4977758	0					
ANR	4979392	Identifier	stderr		4977758	0					
ANR	4979393	Argument	"""Unknown command %s\\n"""		4977758	1					
ANR	4979394	PrimaryExpression	"""Unknown command %s\\n"""		4977758	0					
ANR	4979395	Argument	arg		4977758	2					
ANR	4979396	Identifier	arg		4977758	0					
ANR	4979397	ReturnStatement	return 0 ;	340:1:9014:9022	4977758	12	True				
ANR	4979398	PrimaryExpression	0		4977758	0					
ANR	4979399	ReturnType	int		4977758	1					
ANR	4979400	Identifier	main		4977758	2					
ANR	4979401	ParameterList	"int argc , const char * argv [ ]"		4977758	3					
ANR	4979402	Parameter	int argc	45:6:1518:1525	4977758	0	True				
ANR	4979403	ParameterType	int		4977758	0					
ANR	4979404	Identifier	argc		4977758	1					
ANR	4979405	Parameter	const char * argv [ ]	45:16:1528:1545	4977758	1	True				
ANR	4979406	ParameterType	const char * [ ]		4977758	0					
ANR	4979407	Identifier	argv		4977758	1					
ANR	4979408	CFGEntryNode	ENTRY		4977758		True				
ANR	4979409	CFGExitNode	EXIT		4977758		True				
ANR	4979410	Symbol	wrapper -> Stat		4977758						
ANR	4979411	Symbol	n1		4977758						
ANR	4979412	Symbol	* op		4977758						
ANR	4979413	Symbol	n2		4977758						
ANR	4979414	Symbol	usage		4977758						
ANR	4979415	Symbol	wrapper -> SetPath		4977758						
ANR	4979416	Symbol	wrapper		4977758						
ANR	4979417	Symbol	* argv		4977758						
ANR	4979418	Symbol	StatWrapper :: STATOP_LSTAT		4977758						
ANR	4979419	Symbol	wrapper -> GetStatFn		4977758						
ANR	4979420	Symbol	path		4977758						
ANR	4979421	Symbol	force_set		4977758						
ANR	4979422	Symbol	* * argv		4977758						
ANR	4979423	Symbol	argno		4977758						
ANR	4979424	Symbol	strcasecmp		4977758						
ANR	4979425	Symbol	strcmp		4977758						
ANR	4979426	Symbol	which		4977758						
ANR	4979427	Symbol	rc2		4977758						
ANR	4979428	Symbol	rc1		4977758						
ANR	4979429	Symbol	NULL		4977758						
ANR	4979430	Symbol	op -> type		4977758						
ANR	4979431	Symbol	StatWrapper :: STATOP_ALL		4977758						
ANR	4979432	Symbol	stderr		4977758						
ANR	4979433	Symbol	arg3		4977758						
ANR	4979434	Symbol	get_op_name		4977758						
ANR	4979435	Symbol	arg2		4977758						
ANR	4979436	Symbol	rc		4977758						
ANR	4979437	Symbol	StatWrapper :: STATOP_BOTH		4977758						
ANR	4979438	Symbol	arg1		4977758						
ANR	4979439	Symbol	* argv [ argno + 3 ]		4977758						
ANR	4979440	Symbol	name		4977758						
ANR	4979441	Symbol	true		4977758						
ANR	4979442	Symbol	* which		4977758						
ANR	4979443	Symbol	* argv [ argno + 1 ]		4977758						
ANR	4979444	Symbol	force		4977758						
ANR	4979445	Symbol	fd		4977758						
ANR	4979446	Symbol	which -> type		4977758						
ANR	4979447	Symbol	opint		4977758						
ANR	4979448	Symbol	safe_open_wrapper_follow		4977758						
ANR	4979449	Symbol	StatWrapper :: STATOP_FSTAT		4977758						
ANR	4979450	Symbol	StatWrapper :: STATOP_MIN		4977758						
ANR	4979451	Symbol	fn		4977758						
ANR	4979452	Symbol	skip		4977758						
ANR	4979453	Symbol	* argno		4977758						
ANR	4979454	Symbol	argv		4977758						
ANR	4979455	Symbol	opno		4977758						
ANR	4979456	Symbol	arg		4977758						
ANR	4979457	Symbol	StatWrapper :: STATOP_STAT		4977758						
ANR	4979458	Symbol	StatWrapper :: STATOP_MAX		4977758						
ANR	4979459	Symbol	op -> str		4977758						
ANR	4979460	Symbol	argc		4977758						
ANR	4979461	Symbol	op		4977758						
ANR	4979462	Symbol	auto_stat		4977758						
ANR	4979463	Symbol	get_op		4977758						
ANR	4979464	Symbol	* wrapper		4977758						
ANR	4979465	Symbol	* * argno		4977758						
ANR	4979466	Symbol	false		4977758						
ANR	4979467	Symbol	n		4977758						
ANR	4979468	Symbol	op2		4977758						
ANR	4979469	Symbol	O_RDONLY		4977758						
ANR	4979470	Symbol	wrapper -> SetFD		4977758						
ANR	4979471	Symbol	* path		4977758						
ANR	4979472	Symbol	* argv [ argno + 2 ]		4977758						
ANR	4979473	Symbol	wrapper -> Retry		4977758						
ANR	4979474	Function	Help	343:0:9027:9784							
ANR	4979475	FunctionDef	Help (const char * argv0)		4979474	0					
ANR	4979476	CompoundStatement		345:0:9065:9784	4979474	0					
ANR	4979477	Statement	printf	346:1:9068:9073	4979474	0	True				
ANR	4979478	Statement	(	346:7:9074:9074	4979474	1	True				
ANR	4979479	Statement	"""usage: %s <file> [-command <flags>] [..]\\n"""	346:9:9076:9119	4979474	2	True				
ANR	4979480	Statement	"""  commands:\\n"""	347:3:9124:9138	4979474	3	True				
ANR	4979481	Statement	"""  --create|-c <op> <which>         """	348:3:9143:9179	4979474	4	True				
ANR	4979482	Statement	"""Create a StatWrapper object\\n"""	349:3:9184:9214	4979474	5	True				
ANR	4979483	Statement	"""  --set|-c <op>                    """	350:3:9219:9255	4979474	6	True				
ANR	4979484	Statement	"""Setup a StatWrapper object\\n"""	351:3:9260:9289	4979474	7	True				
ANR	4979485	Statement	"""  --stat|-s <op> <which> [f[orce]|no]"""	352:3:9294:9332	4979474	8	True				
ANR	4979486	Statement	"""Do the actual stat (optional force) \\n"""	353:3:9337:9376	4979474	9	True				
ANR	4979487	Statement	"""  --retry                          """	354:3:9381:9417	4979474	10	True				
ANR	4979488	Statement	"""Retry last operation\\n"""	355:3:9422:9445	4979474	11	True				
ANR	4979489	Statement	"""  --query                          """	356:3:9450:9486	4979474	12	True				
ANR	4979490	Statement	"""Query status of object\\n"""	357:3:9491:9516	4979474	13	True				
ANR	4979491	Statement	"""  <op>: Type of operation:         """	358:3:9521:9557	4979474	14	True				
ANR	4979492	Statement	"""NONE,STAT,LSTAT,BOTH,FSTAT,ALL,LAST\\n"""	359:3:9562:9600	4979474	15	True				
ANR	4979493	Statement	"""  <which>: Which for operation:    """	360:3:9605:9641	4979474	16	True				
ANR	4979494	Statement	"""NONE,STAT,LSTAT,BOTH,FSTAT,ALL,LAST\\n"""	361:3:9646:9684	4979474	17	True				
ANR	4979495	Statement	"""  --path <path>                    """	362:3:9689:9725	4979474	18	True				
ANR	4979496	Statement	"""  <path> specify a new path\\n"""	363:3:9730:9760	4979474	19	True				
ANR	4979497	Statement	""""""	364:3:9765:9766	4979474	20	True				
ANR	4979498	Statement	","	364:5:9767:9767	4979474	21	True				
ANR	4979499	Statement	argv0	365:3:9772:9776	4979474	22	True				
ANR	4979500	Statement	)	366:3:9781:9781	4979474	23	True				
ANR	4979501	ExpressionStatement		366:4:9782:9782	4979474	24	True				
ANR	4979502	ReturnType	static void		4979474	1					
ANR	4979503	Identifier	Help		4979474	2					
ANR	4979504	ParameterList	const char * argv0		4979474	3					
ANR	4979505	Parameter	const char * argv0	344:6:9045:9061	4979474	0	True				
ANR	4979506	ParameterType	const char *		4979474	0					
ANR	4979507	Identifier	argv0		4979474	1					
ANR	4979508	CFGEntryNode	ENTRY		4979474		True				
ANR	4979509	CFGExitNode	EXIT		4979474		True				
ANR	4979510	Symbol	argv0		4979474						
ANR	4979511	Function	dump_status	369:0:9788:10941							
ANR	4979512	FunctionDef	"dump_status (StatWrapper & stat , const char * label)"		4979511	0					
ANR	4979513	CompoundStatement		371:0:9852:10941	4979511	0					
ANR	4979514	IdentifierDeclStatement	int opint ;	372:1:9855:9864	4979511	0	True				
ANR	4979515	IdentifierDecl	opint		4979511	0					
ANR	4979516	IdentifierDeclType	int		4979511	0					
ANR	4979517	Identifier	opint		4979511	1					
ANR	4979518	ForStatement	for ( opint = StatWrapper :: STATOP_MIN ; opint <= StatWrapper :: STATOP_MAX ; opint ++ )		4979511	1					
ANR	4979519	ForInit	opint = StatWrapper :: STATOP_MIN ;	373:6:9872:9903	4979511	0	True				
ANR	4979520	AssignmentExpression	opint = StatWrapper :: STATOP_MIN		4979511	0		=			
ANR	4979521	Identifier	opint		4979511	0					
ANR	4979522	Identifier	StatWrapper :: STATOP_MIN		4979511	1					
ANR	4979523	Condition	opint <= StatWrapper :: STATOP_MAX	374:3:9908:9939	4979511	1	True				
ANR	4979524	RelationalExpression	opint <= StatWrapper :: STATOP_MAX		4979511	0		<=			
ANR	4979525	Identifier	opint		4979511	0					
ANR	4979526	Identifier	StatWrapper :: STATOP_MAX		4979511	1					
ANR	4979527	PostIncDecOperationExpression	opint ++	375:3:9945:9951	4979511	2	True				
ANR	4979528	Identifier	opint		4979511	0					
ANR	4979529	IncDec	++		4979511	1					
ANR	4979530	CompoundStatement		19:2:398:425	4979511	3					
ANR	4979531	IdentifierDeclStatement	StatWrapper :: StatOpType opno = ( StatWrapper :: StatOpType ) opint ;	377:2:9960:10022	4979511	0	True				
ANR	4979532	IdentifierDecl	opno = ( StatWrapper :: StatOpType ) opint		4979511	0					
ANR	4979533	IdentifierDeclType	StatWrapper :: StatOpType		4979511	0					
ANR	4979534	Identifier	opno		4979511	1					
ANR	4979535	AssignmentExpression	opno = ( StatWrapper :: StatOpType ) opint		4979511	2		=			
ANR	4979536	Identifier	opno		4979511	0					
ANR	4979537	CastExpression	( StatWrapper :: StatOpType ) opint		4979511	1					
ANR	4979538	CastTarget	StatWrapper :: StatOpType		4979511	0					
ANR	4979539	Identifier	opint		4979511	1					
ANR	4979540	IdentifierDeclStatement	const char * fn = stat . GetStatFn ( opno ) ;	379:2:10027:10066	4979511	1	True				
ANR	4979541	IdentifierDecl	* fn = stat . GetStatFn ( opno )		4979511	0					
ANR	4979542	IdentifierDeclType	const char *		4979511	0					
ANR	4979543	Identifier	fn		4979511	1					
ANR	4979544	AssignmentExpression	* fn = stat . GetStatFn ( opno )		4979511	2		=			
ANR	4979545	Identifier	fn		4979511	0					
ANR	4979546	CallExpression	stat . GetStatFn ( opno )		4979511	1					
ANR	4979547	Callee	stat . GetStatFn		4979511	0					
ANR	4979548	MemberAccess	stat . GetStatFn		4979511	0					
ANR	4979549	Identifier	stat		4979511	0					
ANR	4979550	Identifier	GetStatFn		4979511	1					
ANR	4979551	ArgumentList	opno		4979511	1					
ANR	4979552	Argument	opno		4979511	0					
ANR	4979553	Identifier	opno		4979511	0					
ANR	4979554	IfStatement	if ( NULL == fn )		4979511	2					
ANR	4979555	Condition	NULL == fn	380:7:10075:10084	4979511	0	True				
ANR	4979556	EqualityExpression	NULL == fn		4979511	0		==			
ANR	4979557	Identifier	NULL		4979511	0					
ANR	4979558	Identifier	fn		4979511	1					
ANR	4979559	CompoundStatement		10:20:235:235	4979511	1					
ANR	4979560	ExpressionStatement	"fn = ""<NULL>"""	381:3:10093:10106	4979511	0	True				
ANR	4979561	AssignmentExpression	"fn = ""<NULL>"""		4979511	0		=			
ANR	4979562	Identifier	fn		4979511	0					
ANR	4979563	PrimaryExpression	"""<NULL>"""		4979511	1					
ANR	4979564	IdentifierDeclStatement	const char * name = get_op_name ( opno ) ;	383:2:10114:10153	4979511	3	True				
ANR	4979565	IdentifierDecl	* name = get_op_name ( opno )		4979511	0					
ANR	4979566	IdentifierDeclType	const char *		4979511	0					
ANR	4979567	Identifier	name		4979511	1					
ANR	4979568	AssignmentExpression	* name = get_op_name ( opno )		4979511	2		=			
ANR	4979569	Identifier	name		4979511	0					
ANR	4979570	CallExpression	get_op_name ( opno )		4979511	1					
ANR	4979571	Callee	get_op_name		4979511	0					
ANR	4979572	Identifier	get_op_name		4979511	0					
ANR	4979573	ArgumentList	opno		4979511	1					
ANR	4979574	Argument	opno		4979511	0					
ANR	4979575	Identifier	opno		4979511	0					
ANR	4979576	IdentifierDeclStatement	StatStructType buf ;	384:2:10157:10176	4979511	4	True				
ANR	4979577	IdentifierDecl	buf		4979511	0					
ANR	4979578	IdentifierDeclType	StatStructType		4979511	0					
ANR	4979579	Identifier	buf		4979511	1					
ANR	4979580	IdentifierDeclStatement	int err = 0 ;	385:2:10180:10195	4979511	5	True				
ANR	4979581	IdentifierDecl	err = 0		4979511	0					
ANR	4979582	IdentifierDeclType	int		4979511	0					
ANR	4979583	Identifier	err		4979511	1					
ANR	4979584	AssignmentExpression	err = 0		4979511	2		=			
ANR	4979585	Identifier	err		4979511	0					
ANR	4979586	PrimaryExpression	0		4979511	1					
ANR	4979587	IdentifierDeclStatement	bool valid = false ;	386:2:10199:10220	4979511	6	True				
ANR	4979588	IdentifierDecl	valid = false		4979511	0					
ANR	4979589	IdentifierDeclType	bool		4979511	0					
ANR	4979590	Identifier	valid		4979511	1					
ANR	4979591	AssignmentExpression	valid = false		4979511	2		=			
ANR	4979592	Identifier	false		4979511	0					
ANR	4979593	Identifier	false		4979511	1					
ANR	4979594	IdentifierDeclStatement	bool getbuf = false ;	387:2:10224:10246	4979511	7	True				
ANR	4979595	IdentifierDecl	getbuf = false		4979511	0					
ANR	4979596	IdentifierDeclType	bool		4979511	0					
ANR	4979597	Identifier	getbuf		4979511	1					
ANR	4979598	AssignmentExpression	getbuf = false		4979511	2		=			
ANR	4979599	Identifier	false		4979511	0					
ANR	4979600	Identifier	false		4979511	1					
ANR	4979601	IdentifierDeclStatement	int rc = stat . GetRc ( opno ) ;	389:2:10251:10278	4979511	8	True				
ANR	4979602	IdentifierDecl	rc = stat . GetRc ( opno )		4979511	0					
ANR	4979603	IdentifierDeclType	int		4979511	0					
ANR	4979604	Identifier	rc		4979511	1					
ANR	4979605	AssignmentExpression	rc = stat . GetRc ( opno )		4979511	2		=			
ANR	4979606	Identifier	rc		4979511	0					
ANR	4979607	CallExpression	stat . GetRc ( opno )		4979511	1					
ANR	4979608	Callee	stat . GetRc		4979511	0					
ANR	4979609	MemberAccess	stat . GetRc		4979511	0					
ANR	4979610	Identifier	stat		4979511	0					
ANR	4979611	Identifier	GetRc		4979511	1					
ANR	4979612	ArgumentList	opno		4979511	1					
ANR	4979613	Argument	opno		4979511	0					
ANR	4979614	Identifier	opno		4979511	0					
ANR	4979615	IfStatement	if ( rc )		4979511	9					
ANR	4979616	Condition	rc	390:7:10287:10288	4979511	0	True				
ANR	4979617	Identifier	rc		4979511	0					
ANR	4979618	CompoundStatement		20:12:439:439	4979511	1					
ANR	4979619	ExpressionStatement	err = stat . GetErrno ( opno )	391:3:10297:10324	4979511	0	True				
ANR	4979620	AssignmentExpression	err = stat . GetErrno ( opno )		4979511	0		=			
ANR	4979621	Identifier	err		4979511	0					
ANR	4979622	CallExpression	stat . GetErrno ( opno )		4979511	1					
ANR	4979623	Callee	stat . GetErrno		4979511	0					
ANR	4979624	MemberAccess	stat . GetErrno		4979511	0					
ANR	4979625	Identifier	stat		4979511	0					
ANR	4979626	Identifier	GetErrno		4979511	1					
ANR	4979627	ArgumentList	opno		4979511	1					
ANR	4979628	Argument	opno		4979511	0					
ANR	4979629	Identifier	opno		4979511	0					
ANR	4979630	ExpressionStatement	valid = stat . IsBufValid ( opno )	393:2:10332:10363	4979511	10	True				
ANR	4979631	AssignmentExpression	valid = stat . IsBufValid ( opno )		4979511	0		=			
ANR	4979632	Identifier	valid		4979511	0					
ANR	4979633	CallExpression	stat . IsBufValid ( opno )		4979511	1					
ANR	4979634	Callee	stat . IsBufValid		4979511	0					
ANR	4979635	MemberAccess	stat . IsBufValid		4979511	0					
ANR	4979636	Identifier	stat		4979511	0					
ANR	4979637	Identifier	IsBufValid		4979511	1					
ANR	4979638	ArgumentList	opno		4979511	1					
ANR	4979639	Argument	opno		4979511	0					
ANR	4979640	Identifier	opno		4979511	0					
ANR	4979641	IfStatement	if ( valid )		4979511	11					
ANR	4979642	Condition	valid	394:6:10371:10375	4979511	0	True				
ANR	4979643	Identifier	valid		4979511	0					
ANR	4979644	CompoundStatement		24:14:526:526	4979511	1					
ANR	4979645	ExpressionStatement	"getbuf = stat . GetBuf ( buf , opno )"	395:3:10384:10417	4979511	0	True				
ANR	4979646	AssignmentExpression	"getbuf = stat . GetBuf ( buf , opno )"		4979511	0		=			
ANR	4979647	Identifier	getbuf		4979511	0					
ANR	4979648	CallExpression	"stat . GetBuf ( buf , opno )"		4979511	1					
ANR	4979649	Callee	stat . GetBuf		4979511	0					
ANR	4979650	MemberAccess	stat . GetBuf		4979511	0					
ANR	4979651	Identifier	stat		4979511	0					
ANR	4979652	Identifier	GetBuf		4979511	1					
ANR	4979653	ArgumentList	buf		4979511	1					
ANR	4979654	Argument	buf		4979511	0					
ANR	4979655	Identifier	buf		4979511	0					
ANR	4979656	Argument	opno		4979511	1					
ANR	4979657	Identifier	opno		4979511	0					
ANR	4979658	ExpressionStatement	"printf ( ""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"" , label , name , fn , rc , err , valid ? ""true"" : ""false"" , getbuf ? ""true"" : ""false"" )"	398:2:10426:10572	4979511	12	True				
ANR	4979659	CallExpression	"printf ( ""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"" , label , name , fn , rc , err , valid ? ""true"" : ""false"" , getbuf ? ""true"" : ""false"" )"		4979511	0					
ANR	4979660	Callee	printf		4979511	0					
ANR	4979661	Identifier	printf		4979511	0					
ANR	4979662	ArgumentList	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		4979511	1					
ANR	4979663	Argument	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		4979511	0					
ANR	4979664	PrimaryExpression	"""  %s %s: fn=%s; rc=%d errno=%d valid=%s getbuf=%s\\n"""		4979511	0					
ANR	4979665	Argument	label		4979511	1					
ANR	4979666	Identifier	label		4979511	0					
ANR	4979667	Argument	name		4979511	2					
ANR	4979668	Identifier	name		4979511	0					
ANR	4979669	Argument	fn		4979511	3					
ANR	4979670	Identifier	fn		4979511	0					
ANR	4979671	Argument	rc		4979511	4					
ANR	4979672	Identifier	rc		4979511	0					
ANR	4979673	Argument	err		4979511	5					
ANR	4979674	Identifier	err		4979511	0					
ANR	4979675	Argument	"valid ? ""true"" : ""false"""		4979511	6					
ANR	4979676	ConditionalExpression	"valid ? ""true"" : ""false"""		4979511	0					
ANR	4979677	Condition	valid		4979511	0					
ANR	4979678	Identifier	valid		4979511	0					
ANR	4979679	PrimaryExpression	"""true"""		4979511	1					
ANR	4979680	PrimaryExpression	"""false"""		4979511	2					
ANR	4979681	Argument	"getbuf ? ""true"" : ""false"""		4979511	7					
ANR	4979682	ConditionalExpression	"getbuf ? ""true"" : ""false"""		4979511	0					
ANR	4979683	Condition	getbuf		4979511	0					
ANR	4979684	Identifier	getbuf		4979511	0					
ANR	4979685	PrimaryExpression	"""true"""		4979511	1					
ANR	4979686	PrimaryExpression	"""false"""		4979511	2					
ANR	4979687	IfStatement	if ( valid )		4979511	13					
ANR	4979688	Condition	valid	401:7:10581:10585	4979511	0	True				
ANR	4979689	Identifier	valid		4979511	0					
ANR	4979690	CompoundStatement		31:15:736:736	4979511	1					
ANR	4979691	Statement	printf	402:3:10594:10599	4979511	0	True				
ANR	4979692	Statement	(	402:9:10600:10600	4979511	1	True				
ANR	4979693	Statement	"""    buf: dev=%d ino=%u mode=%03o nlink=%d ids=%d/%d\\n"""	402:11:10602:10656	4979511	2	True				
ANR	4979694	Statement	"""         size=%lld a/m/ctime=%d/%d/%d\\n"""	403:5:10663:10703	4979511	3	True				
ANR	4979695	Statement	","	403:46:10704:10704	4979511	4	True				
ANR	4979696	Statement	(	404:5:10711:10711	4979511	5	True				
ANR	4979697	Statement	int	404:6:10712:10714	4979511	6	True				
ANR	4979698	Statement	)	404:9:10715:10715	4979511	7	True				
ANR	4979699	Statement	buf	404:10:10716:10718	4979511	8	True				
ANR	4979700	Statement	.	404:13:10719:10719	4979511	9	True				
ANR	4979701	Statement	st_dev	404:14:10720:10725	4979511	10	True				
ANR	4979702	Statement	","	404:20:10726:10726	4979511	11	True				
ANR	4979703	Statement	(	405:5:10733:10733	4979511	12	True				
ANR	4979704	Statement	unsigned	405:6:10734:10741	4979511	13	True				
ANR	4979705	Statement	)	405:14:10742:10742	4979511	14	True				
ANR	4979706	Statement	buf	405:15:10743:10745	4979511	15	True				
ANR	4979707	Statement	.	405:18:10746:10746	4979511	16	True				
ANR	4979708	Statement	st_ino	405:19:10747:10752	4979511	17	True				
ANR	4979709	Statement	","	405:25:10753:10753	4979511	18	True				
ANR	4979710	Statement	(	405:27:10755:10755	4979511	19	True				
ANR	4979711	Statement	unsigned	405:28:10756:10763	4979511	20	True				
ANR	4979712	Statement	)	405:36:10764:10764	4979511	21	True				
ANR	4979713	Statement	buf	405:37:10765:10767	4979511	22	True				
ANR	4979714	Statement	.	405:40:10768:10768	4979511	23	True				
ANR	4979715	Statement	st_mode	405:41:10769:10775	4979511	24	True				
ANR	4979716	Statement	","	405:48:10776:10776	4979511	25	True				
ANR	4979717	Statement	(	406:5:10783:10783	4979511	26	True				
ANR	4979718	Statement	int	406:6:10784:10786	4979511	27	True				
ANR	4979719	Statement	)	406:9:10787:10787	4979511	28	True				
ANR	4979720	Statement	buf	406:10:10788:10790	4979511	29	True				
ANR	4979721	Statement	.	406:13:10791:10791	4979511	30	True				
ANR	4979722	Statement	st_nlink	406:14:10792:10799	4979511	31	True				
ANR	4979723	Statement	","	406:22:10800:10800	4979511	32	True				
ANR	4979724	Statement	(	407:5:10807:10807	4979511	33	True				
ANR	4979725	Statement	int	407:6:10808:10810	4979511	34	True				
ANR	4979726	Statement	)	407:9:10811:10811	4979511	35	True				
ANR	4979727	Statement	buf	407:10:10812:10814	4979511	36	True				
ANR	4979728	Statement	.	407:13:10815:10815	4979511	37	True				
ANR	4979729	Statement	st_uid	407:14:10816:10821	4979511	38	True				
ANR	4979730	Statement	","	407:20:10822:10822	4979511	39	True				
ANR	4979731	Statement	(	407:22:10824:10824	4979511	40	True				
ANR	4979732	Statement	int	407:23:10825:10827	4979511	41	True				
ANR	4979733	Statement	)	407:26:10828:10828	4979511	42	True				
ANR	4979734	Statement	buf	407:27:10829:10831	4979511	43	True				
ANR	4979735	Statement	.	407:30:10832:10832	4979511	44	True				
ANR	4979736	Statement	st_gid	407:31:10833:10838	4979511	45	True				
ANR	4979737	Statement	","	407:37:10839:10839	4979511	46	True				
ANR	4979738	Statement	(	408:5:10846:10846	4979511	47	True				
ANR	4979739	Statement	long	408:6:10847:10850	4979511	48	True				
ANR	4979740	Statement	long	408:11:10852:10855	4979511	49	True				
ANR	4979741	Statement	)	408:15:10856:10856	4979511	50	True				
ANR	4979742	Statement	buf	408:16:10857:10859	4979511	51	True				
ANR	4979743	Statement	.	408:19:10860:10860	4979511	52	True				
ANR	4979744	Statement	st_size	408:20:10861:10867	4979511	53	True				
ANR	4979745	Statement	","	408:27:10868:10868	4979511	54	True				
ANR	4979746	Statement	(	409:5:10875:10875	4979511	55	True				
ANR	4979747	Statement	int	409:6:10876:10878	4979511	56	True				
ANR	4979748	Statement	)	409:9:10879:10879	4979511	57	True				
ANR	4979749	Statement	buf	409:10:10880:10882	4979511	58	True				
ANR	4979750	Statement	.	409:13:10883:10883	4979511	59	True				
ANR	4979751	Statement	st_atime	409:14:10884:10891	4979511	60	True				
ANR	4979752	Statement	","	409:22:10892:10892	4979511	61	True				
ANR	4979753	Statement	(	409:24:10894:10894	4979511	62	True				
ANR	4979754	Statement	int	409:25:10895:10897	4979511	63	True				
ANR	4979755	Statement	)	409:28:10898:10898	4979511	64	True				
ANR	4979756	Statement	buf	409:29:10899:10901	4979511	65	True				
ANR	4979757	Statement	.	409:32:10902:10902	4979511	66	True				
ANR	4979758	Statement	st_mtime	409:33:10903:10910	4979511	67	True				
ANR	4979759	Statement	","	409:41:10911:10911	4979511	68	True				
ANR	4979760	Statement	(	409:43:10913:10913	4979511	69	True				
ANR	4979761	Statement	int	409:44:10914:10916	4979511	70	True				
ANR	4979762	Statement	)	409:47:10917:10917	4979511	71	True				
ANR	4979763	Statement	buf	409:48:10918:10920	4979511	72	True				
ANR	4979764	Statement	.	409:51:10921:10921	4979511	73	True				
ANR	4979765	Statement	st_ctime	409:52:10922:10929	4979511	74	True				
ANR	4979766	Statement	)	409:61:10931:10931	4979511	75	True				
ANR	4979767	ExpressionStatement		409:62:10932:10932	4979511	76	True				
ANR	4979768	ReturnType	static void		4979511	1					
ANR	4979769	Identifier	dump_status		4979511	2					
ANR	4979770	ParameterList	"StatWrapper & stat , const char * label"		4979511	3					
ANR	4979771	Parameter	StatWrapper & stat	370:13:9813:9829	4979511	0	True				
ANR	4979772	ParameterType	StatWrapper &		4979511	0					
ANR	4979773	Identifier	stat		4979511	1					
ANR	4979774	Parameter	const char * label	370:32:9832:9848	4979511	1	True				
ANR	4979775	ParameterType	const char *		4979511	0					
ANR	4979776	Identifier	label		4979511	1					
ANR	4979777	CFGEntryNode	ENTRY		4979511		True				
ANR	4979778	CFGExitNode	EXIT		4979511		True				
ANR	4979779	Symbol	stat		4979511						
ANR	4979780	Symbol	NULL		4979511						
ANR	4979781	Symbol	err		4979511						
ANR	4979782	Symbol	StatWrapper :: STATOP_MIN		4979511						
ANR	4979783	Symbol	fn		4979511						
ANR	4979784	Symbol	false		4979511						
ANR	4979785	Symbol	stat . GetErrno		4979511						
ANR	4979786	Symbol	label		4979511						
ANR	4979787	Symbol	stat . IsBufValid		4979511						
ANR	4979788	Symbol	get_op_name		4979511						
ANR	4979789	Symbol	valid		4979511						
ANR	4979790	Symbol	rc		4979511						
ANR	4979791	Symbol	buf		4979511						
ANR	4979792	Symbol	stat . GetRc		4979511						
ANR	4979793	Symbol	getbuf		4979511						
ANR	4979794	Symbol	opno		4979511						
ANR	4979795	Symbol	name		4979511						
ANR	4979796	Symbol	StatWrapper :: STATOP_MAX		4979511						
ANR	4979797	Symbol	stat . GetStatFn		4979511						
ANR	4979798	Symbol	stat . GetBuf		4979511						
ANR	4979799	Symbol	opint		4979511						
ANR	4979800	Function	get_op	414:0:10944:11165							
ANR	4979801	FunctionDef	get_op (const char * str)		4979800	0					
ANR	4979802	CompoundStatement		416:0:10992:11165	4979800	0					
ANR	4979803	IfStatement	if ( NULL == str )		4979800	0					
ANR	4979804	Condition	NULL == str	418:6:11001:11011	4979800	0	True				
ANR	4979805	EqualityExpression	NULL == str		4979800	0		==			
ANR	4979806	Identifier	NULL		4979800	0					
ANR	4979807	Identifier	str		4979800	1					
ANR	4979808	CompoundStatement		3:20:22:22	4979800	1					
ANR	4979809	ReturnStatement	return & Ops [ 0 ] ;	419:2:11019:11033	4979800	0	True				
ANR	4979810	UnaryOperationExpression	& Ops [ 0 ]		4979800	0					
ANR	4979811	UnaryOperator	&		4979800	0					
ANR	4979812	ArrayIndexing	Ops [ 0 ]		4979800	1					
ANR	4979813	Identifier	Ops		4979800	0					
ANR	4979814	PrimaryExpression	0		4979800	1					
ANR	4979815	ForStatement	for ( const StatOp * op = Ops ; op -> str ; op ++ )		4979800	1					
ANR	4979816	ForInit	const StatOp * op = Ops ;	422:6:11045:11067	4979800	0	True				
ANR	4979817	IdentifierDeclStatement	const StatOp * op = Ops ;		4979800	0					
ANR	4979818	IdentifierDecl	* op = Ops		4979800	0					
ANR	4979819	IdentifierDeclType	const StatOp *		4979800	0					
ANR	4979820	Identifier	op		4979800	1					
ANR	4979821	AssignmentExpression	* op = Ops		4979800	2		=			
ANR	4979822	Identifier	Ops		4979800	0					
ANR	4979823	Identifier	Ops		4979800	1					
ANR	4979824	Condition	op -> str	422:30:11069:11075	4979800	1	True				
ANR	4979825	PtrMemberAccess	op -> str		4979800	0					
ANR	4979826	Identifier	op		4979800	0					
ANR	4979827	Identifier	str		4979800	1					
ANR	4979828	PostIncDecOperationExpression	op ++	422:40:11079:11082	4979800	2	True				
ANR	4979829	Identifier	op		4979800	0					
ANR	4979830	IncDec	++		4979800	1					
ANR	4979831	CompoundStatement		7:47:93:93	4979800	3					
ANR	4979832	IfStatement	"if ( ! strcasecmp ( op -> str , str ) )"		4979800	0					
ANR	4979833	Condition	"! strcasecmp ( op -> str , str )"	423:7:11095:11121	4979800	0	True				
ANR	4979834	UnaryOperationExpression	"! strcasecmp ( op -> str , str )"		4979800	0					
ANR	4979835	UnaryOperator	!		4979800	0					
ANR	4979836	CallExpression	"strcasecmp ( op -> str , str )"		4979800	1					
ANR	4979837	Callee	strcasecmp		4979800	0					
ANR	4979838	Identifier	strcasecmp		4979800	0					
ANR	4979839	ArgumentList	op -> str		4979800	1					
ANR	4979840	Argument	op -> str		4979800	0					
ANR	4979841	PtrMemberAccess	op -> str		4979800	0					
ANR	4979842	Identifier	op		4979800	0					
ANR	4979843	Identifier	str		4979800	1					
ANR	4979844	Argument	str		4979800	1					
ANR	4979845	Identifier	str		4979800	0					
ANR	4979846	CompoundStatement		8:37:132:132	4979800	1					
ANR	4979847	ReturnStatement	return op ;	424:3:11130:11139	4979800	0	True				
ANR	4979848	Identifier	op		4979800	0					
ANR	4979849	ReturnStatement	return & Ops [ 0 ] ;	427:1:11149:11163	4979800	2	True				
ANR	4979850	UnaryOperationExpression	& Ops [ 0 ]		4979800	0					
ANR	4979851	UnaryOperator	&		4979800	0					
ANR	4979852	ArrayIndexing	Ops [ 0 ]		4979800	1					
ANR	4979853	Identifier	Ops		4979800	0					
ANR	4979854	PrimaryExpression	0		4979800	1					
ANR	4979855	ReturnType	static const StatOp *		4979800	1					
ANR	4979856	Identifier	get_op		4979800	2					
ANR	4979857	ParameterList	const char * str		4979800	3					
ANR	4979858	Parameter	const char * str	415:8:10974:10988	4979800	0	True				
ANR	4979859	ParameterType	const char *		4979800	0					
ANR	4979860	Identifier	str		4979800	1					
ANR	4979861	CFGEntryNode	ENTRY		4979800		True				
ANR	4979862	CFGExitNode	EXIT		4979800		True				
ANR	4979863	Symbol	str		4979800						
ANR	4979864	Symbol	op		4979800						
ANR	4979865	Symbol	NULL		4979800						
ANR	4979866	Symbol	Ops		4979800						
ANR	4979867	Symbol	* op		4979800						
ANR	4979868	Symbol	op -> str		4979800						
ANR	4979869	Symbol	strcasecmp		4979800						
ANR	4979870	Function	get_op_name	430:0:11169:11368							
ANR	4979871	FunctionDef	get_op_name (StatWrapper :: StatOpType which)		4979870	0					
ANR	4979872	CompoundStatement		432:0:11234:11368	4979870	0					
ANR	4979873	IfStatement	if ( ( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX ) )		4979870	0					
ANR	4979874	Condition	( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX )	433:6:11242:11318	4979870	0	True				
ANR	4979875	OrExpression	( which < StatWrapper :: STATOP_MIN ) || ( which > StatWrapper :: STATOP_MAX )		4979870	0		||			
ANR	4979876	RelationalExpression	which < StatWrapper :: STATOP_MIN		4979870	0		<			
ANR	4979877	Identifier	which		4979870	0					
ANR	4979878	Identifier	StatWrapper :: STATOP_MIN		4979870	1					
ANR	4979879	RelationalExpression	which > StatWrapper :: STATOP_MAX		4979870	1		>			
ANR	4979880	Identifier	which		4979870	0					
ANR	4979881	Identifier	StatWrapper :: STATOP_MAX		4979870	1					
ANR	4979882	CompoundStatement		3:41:87:87	4979870	1					
ANR	4979883	ReturnStatement	"return ""NONE"" ;"	435:2:11326:11339	4979870	0	True				
ANR	4979884	PrimaryExpression	"""NONE"""		4979870	0					
ANR	4979885	ReturnStatement	return Ops [ which ] . str ;	437:1:11345:11366	4979870	1	True				
ANR	4979886	MemberAccess	Ops [ which ] . str		4979870	0					
ANR	4979887	ArrayIndexing	Ops [ which ]		4979870	0					
ANR	4979888	Identifier	Ops		4979870	0					
ANR	4979889	Identifier	which		4979870	1					
ANR	4979890	Identifier	str		4979870	1					
ANR	4979891	ReturnType	static const char *		4979870	1					
ANR	4979892	Identifier	get_op_name		4979870	2					
ANR	4979893	ParameterList	StatWrapper :: StatOpType which		4979870	3					
ANR	4979894	Parameter	StatWrapper :: StatOpType which	431:13:11202:11230	4979870	0	True				
ANR	4979895	ParameterType	StatWrapper :: StatOpType		4979870	0					
ANR	4979896	Identifier	which		4979870	1					
ANR	4979897	CFGEntryNode	ENTRY		4979870		True				
ANR	4979898	CFGExitNode	EXIT		4979870		True				
ANR	4979899	Symbol	which		4979870						
ANR	4979900	Symbol	* Ops		4979870						
ANR	4979901	Symbol	Ops		4979870						
ANR	4979902	Symbol	StatWrapper :: STATOP_MIN		4979870						
ANR	4979903	Symbol	StatWrapper :: STATOP_MAX		4979870						
ANR	4979904	Symbol	* which		4979870						
ANR	4979905	Symbol	Ops [ which ] . str		4979870						
