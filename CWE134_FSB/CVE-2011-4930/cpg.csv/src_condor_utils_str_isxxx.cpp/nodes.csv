command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4901495	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_str_isxxx.cpp								
ANR	4901496	Function	str_isint	23:0:861:1018							
ANR	4901497	FunctionDef	str_isint (const char * s)		4901496	0					
ANR	4901498	CompoundStatement		25:0:893:1018	4901496	0					
ANR	4901499	IfStatement	if ( NULL == s )		4901496	0					
ANR	4901500	Condition	NULL == s	26:6:901:909	4901496	0	True				
ANR	4901501	EqualityExpression	NULL == s		4901496	0		==			
ANR	4901502	Identifier	NULL		4901496	0					
ANR	4901503	Identifier	s		4901496	1					
ANR	4901504	CompoundStatement		2:18:19:19	4901496	1					
ANR	4901505	ReturnStatement	return false ;	27:2:917:929	4901496	0	True				
ANR	4901506	Identifier	false		4901496	0					
ANR	4901507	WhileStatement	while ( * s )		4901496	1					
ANR	4901508	Condition	* s	29:8:942:943	4901496	0	True				
ANR	4901509	UnaryOperationExpression	* s		4901496	0					
ANR	4901510	UnaryOperator	*		4901496	0					
ANR	4901511	Identifier	s		4901496	1					
ANR	4901512	CompoundStatement		5:13:53:53	4901496	1					
ANR	4901513	IfStatement	if ( ! isdigit ( * s ) )		4901496	0					
ANR	4901514	Condition	! isdigit ( * s )	30:7:956:967	4901496	0	True				
ANR	4901515	UnaryOperationExpression	! isdigit ( * s )		4901496	0					
ANR	4901516	UnaryOperator	!		4901496	0					
ANR	4901517	CallExpression	isdigit ( * s )		4901496	1					
ANR	4901518	Callee	isdigit		4901496	0					
ANR	4901519	Identifier	isdigit		4901496	0					
ANR	4901520	ArgumentList	* s		4901496	1					
ANR	4901521	Argument	* s		4901496	0					
ANR	4901522	UnaryOperationExpression	* s		4901496	0					
ANR	4901523	UnaryOperator	*		4901496	0					
ANR	4901524	Identifier	s		4901496	1					
ANR	4901525	CompoundStatement		6:22:77:77	4901496	1					
ANR	4901526	ReturnStatement	return false ;	31:3:976:988	4901496	0	True				
ANR	4901527	Identifier	false		4901496	0					
ANR	4901528	ExpressionStatement	s ++	33:2:996:999	4901496	1	True				
ANR	4901529	PostIncDecOperationExpression	s ++		4901496	0					
ANR	4901530	Identifier	s		4901496	0					
ANR	4901531	IncDec	++		4901496	1					
ANR	4901532	ReturnStatement	return true ;	35:1:1005:1016	4901496	2	True				
ANR	4901533	Identifier	true		4901496	0					
ANR	4901534	ReturnType	bool		4901496	1					
ANR	4901535	Identifier	str_isint		4901496	2					
ANR	4901536	ParameterList	const char * s		4901496	3					
ANR	4901537	Parameter	const char * s	24:11:877:889	4901496	0	True				
ANR	4901538	ParameterType	const char *		4901496	0					
ANR	4901539	Identifier	s		4901496	1					
ANR	4901540	CFGEntryNode	ENTRY		4901496		True				
ANR	4901541	CFGExitNode	EXIT		4901496		True				
ANR	4901542	Symbol	s		4901496						
ANR	4901543	Symbol	NULL		4901496						
ANR	4901544	Symbol	false		4901496						
ANR	4901545	Symbol	true		4901496						
ANR	4901546	Symbol	* s		4901496						
ANR	4901547	Symbol	isdigit		4901496						
ANR	4901548	Function	str_isreal	38:0:1021:1547							
ANR	4901549	FunctionDef	"str_isreal (const char * s , bool strict)"		4901548	0					
ANR	4901550	CompoundStatement		40:0:1067:1547	4901548	0					
ANR	4901551	IfStatement	if ( NULL == s )		4901548	0					
ANR	4901552	Condition	NULL == s	41:6:1075:1083	4901548	0	True				
ANR	4901553	EqualityExpression	NULL == s		4901548	0		==			
ANR	4901554	Identifier	NULL		4901548	0					
ANR	4901555	Identifier	s		4901548	1					
ANR	4901556	CompoundStatement		2:18:19:19	4901548	1					
ANR	4901557	ReturnStatement	return false ;	42:2:1091:1103	4901548	0	True				
ANR	4901558	Identifier	false		4901548	0					
ANR	4901559	IdentifierDeclStatement	bool dot = false ;	44:1:1109:1127	4901548	1	True				
ANR	4901560	IdentifierDecl	dot = false		4901548	0					
ANR	4901561	IdentifierDeclType	bool		4901548	0					
ANR	4901562	Identifier	dot		4901548	1					
ANR	4901563	AssignmentExpression	dot = false		4901548	2		=			
ANR	4901564	Identifier	false		4901548	0					
ANR	4901565	Identifier	false		4901548	1					
ANR	4901566	IdentifierDeclStatement	const char * p = s ;	45:1:1130:1147	4901548	2	True				
ANR	4901567	IdentifierDecl	* p = s		4901548	0					
ANR	4901568	IdentifierDeclType	const char *		4901548	0					
ANR	4901569	Identifier	p		4901548	1					
ANR	4901570	AssignmentExpression	* p = s		4901548	2		=			
ANR	4901571	Identifier	s		4901548	0					
ANR	4901572	Identifier	s		4901548	1					
ANR	4901573	WhileStatement	while ( * p )		4901548	3					
ANR	4901574	Condition	* p	46:8:1157:1158	4901548	0	True				
ANR	4901575	UnaryOperationExpression	* p		4901548	0					
ANR	4901576	UnaryOperator	*		4901548	0					
ANR	4901577	Identifier	p		4901548	1					
ANR	4901578	CompoundStatement		8:2:98:124	4901548	1					
ANR	4901579	IdentifierDeclStatement	bool isdot = ( '.' == * p ) ;	47:2:1166:1192	4901548	0	True				
ANR	4901580	IdentifierDecl	isdot = ( '.' == * p )		4901548	0					
ANR	4901581	IdentifierDeclType	bool		4901548	0					
ANR	4901582	Identifier	isdot		4901548	1					
ANR	4901583	AssignmentExpression	isdot = ( '.' == * p )		4901548	2		=			
ANR	4901584	Identifier	isdot		4901548	0					
ANR	4901585	EqualityExpression	'.' == * p		4901548	1		==			
ANR	4901586	PrimaryExpression	'.'		4901548	0					
ANR	4901587	UnaryOperationExpression	* p		4901548	1					
ANR	4901588	UnaryOperator	*		4901548	0					
ANR	4901589	Identifier	p		4901548	1					
ANR	4901590	IfStatement	if ( isdot )		4901548	1					
ANR	4901591	Condition	isdot	48:7:1201:1205	4901548	0	True				
ANR	4901592	Identifier	isdot		4901548	0					
ANR	4901593	CompoundStatement		9:15:141:141	4901548	1					
ANR	4901594	IfStatement	if ( dot )		4901548	0					
ANR	4901595	Condition	dot	49:8:1219:1221	4901548	0	True				
ANR	4901596	Identifier	dot		4901548	0					
ANR	4901597	CompoundStatement		10:14:157:157	4901548	1					
ANR	4901598	ReturnStatement	return false ;	50:4:1231:1243	4901548	0	True				
ANR	4901599	Identifier	false		4901548	0					
ANR	4901600	ElseStatement	else		4901548	0					
ANR	4901601	IfStatement	if ( strict && ( s == p ) )		4901548	0					
ANR	4901602	Condition	strict && ( s == p )	53:13:1305:1322	4901548	0	True				
ANR	4901603	AndExpression	strict && ( s == p )		4901548	0		&&			
ANR	4901604	Identifier	strict		4901548	0					
ANR	4901605	EqualityExpression	s == p		4901548	1		==			
ANR	4901606	Identifier	s		4901548	0					
ANR	4901607	Identifier	p		4901548	1					
ANR	4901608	CompoundStatement		14:34:258:258	4901548	1					
ANR	4901609	ReturnStatement	return false ;	54:4:1332:1344	4901548	0	True				
ANR	4901610	Identifier	false		4901548	0					
ANR	4901611	ExpressionStatement	dot = true	56:3:1354:1364	4901548	1	True				
ANR	4901612	AssignmentExpression	dot = true		4901548	0		=			
ANR	4901613	Identifier	dot		4901548	0					
ANR	4901614	Identifier	true		4901548	1					
ANR	4901615	ElseStatement	else		4901548	0					
ANR	4901616	IfStatement	if ( ! isdigit ( * p ) )		4901548	0					
ANR	4901617	Condition	! isdigit ( * p )	58:12:1382:1393	4901548	0	True				
ANR	4901618	UnaryOperationExpression	! isdigit ( * p )		4901548	0					
ANR	4901619	UnaryOperator	!		4901548	0					
ANR	4901620	CallExpression	isdigit ( * p )		4901548	1					
ANR	4901621	Callee	isdigit		4901548	0					
ANR	4901622	Identifier	isdigit		4901548	0					
ANR	4901623	ArgumentList	* p		4901548	1					
ANR	4901624	Argument	* p		4901548	0					
ANR	4901625	UnaryOperationExpression	* p		4901548	0					
ANR	4901626	UnaryOperator	*		4901548	0					
ANR	4901627	Identifier	p		4901548	1					
ANR	4901628	CompoundStatement		19:27:329:329	4901548	1					
ANR	4901629	ReturnStatement	return false ;	59:3:1402:1414	4901548	0	True				
ANR	4901630	Identifier	false		4901548	0					
ANR	4901631	ExpressionStatement	p ++	61:2:1422:1425	4901548	2	True				
ANR	4901632	PostIncDecOperationExpression	p ++		4901548	0					
ANR	4901633	Identifier	p		4901548	0					
ANR	4901634	IncDec	++		4901548	1					
ANR	4901635	IfStatement	if ( strict && isdot && ( '\\0' == * p ) )		4901548	3					
ANR	4901636	Condition	strict && isdot && ( '\\0' == * p )	63:7:1473:1503	4901548	0	True				
ANR	4901637	AndExpression	strict && isdot && ( '\\0' == * p )		4901548	0		&&			
ANR	4901638	Identifier	strict		4901548	0					
ANR	4901639	AndExpression	isdot && ( '\\0' == * p )		4901548	1		&&			
ANR	4901640	Identifier	isdot		4901548	0					
ANR	4901641	EqualityExpression	'\\0' == * p		4901548	1		==			
ANR	4901642	PrimaryExpression	'\\0'		4901548	0					
ANR	4901643	UnaryOperationExpression	* p		4901548	1					
ANR	4901644	UnaryOperator	*		4901548	0					
ANR	4901645	Identifier	p		4901548	1					
ANR	4901646	CompoundStatement		24:41:439:439	4901548	1					
ANR	4901647	ReturnStatement	return false ;	64:3:1512:1524	4901548	0	True				
ANR	4901648	Identifier	false		4901548	0					
ANR	4901649	ReturnStatement	return true ;	67:1:1534:1545	4901548	4	True				
ANR	4901650	Identifier	true		4901548	0					
ANR	4901651	ReturnType	bool		4901548	1					
ANR	4901652	Identifier	str_isreal		4901548	2					
ANR	4901653	ParameterList	"const char * s , bool strict"		4901548	3					
ANR	4901654	Parameter	const char * s	39:12:1038:1050	4901548	0	True				
ANR	4901655	ParameterType	const char *		4901548	0					
ANR	4901656	Identifier	s		4901548	1					
ANR	4901657	Parameter	bool strict	39:27:1053:1063	4901548	1	True				
ANR	4901658	ParameterType	bool		4901548	0					
ANR	4901659	Identifier	strict		4901548	1					
ANR	4901660	CFGEntryNode	ENTRY		4901548		True				
ANR	4901661	CFGExitNode	EXIT		4901548		True				
ANR	4901662	Symbol	p		4901548						
ANR	4901663	Symbol	isdot		4901548						
ANR	4901664	Symbol	s		4901548						
ANR	4901665	Symbol	NULL		4901548						
ANR	4901666	Symbol	false		4901548						
ANR	4901667	Symbol	dot		4901548						
ANR	4901668	Symbol	true		4901548						
ANR	4901669	Symbol	* p		4901548						
ANR	4901670	Symbol	strict		4901548						
ANR	4901671	Symbol	isdigit		4901548						
ANR	4901672	Function	str_isalpha	70:0:1550:1709							
ANR	4901673	FunctionDef	str_isalpha (const char * s)		4901672	0					
ANR	4901674	CompoundStatement		72:0:1584:1709	4901672	0					
ANR	4901675	IfStatement	if ( NULL == s )		4901672	0					
ANR	4901676	Condition	NULL == s	73:6:1592:1600	4901672	0	True				
ANR	4901677	EqualityExpression	NULL == s		4901672	0		==			
ANR	4901678	Identifier	NULL		4901672	0					
ANR	4901679	Identifier	s		4901672	1					
ANR	4901680	CompoundStatement		2:18:19:19	4901672	1					
ANR	4901681	ReturnStatement	return false ;	74:2:1608:1620	4901672	0	True				
ANR	4901682	Identifier	false		4901672	0					
ANR	4901683	WhileStatement	while ( * s )		4901672	1					
ANR	4901684	Condition	* s	76:8:1633:1634	4901672	0	True				
ANR	4901685	UnaryOperationExpression	* s		4901672	0					
ANR	4901686	UnaryOperator	*		4901672	0					
ANR	4901687	Identifier	s		4901672	1					
ANR	4901688	CompoundStatement		5:13:53:53	4901672	1					
ANR	4901689	IfStatement	if ( ! isalpha ( * s ) )		4901672	0					
ANR	4901690	Condition	! isalpha ( * s )	77:7:1647:1658	4901672	0	True				
ANR	4901691	UnaryOperationExpression	! isalpha ( * s )		4901672	0					
ANR	4901692	UnaryOperator	!		4901672	0					
ANR	4901693	CallExpression	isalpha ( * s )		4901672	1					
ANR	4901694	Callee	isalpha		4901672	0					
ANR	4901695	Identifier	isalpha		4901672	0					
ANR	4901696	ArgumentList	* s		4901672	1					
ANR	4901697	Argument	* s		4901672	0					
ANR	4901698	UnaryOperationExpression	* s		4901672	0					
ANR	4901699	UnaryOperator	*		4901672	0					
ANR	4901700	Identifier	s		4901672	1					
ANR	4901701	CompoundStatement		6:22:77:77	4901672	1					
ANR	4901702	ReturnStatement	return false ;	78:3:1667:1679	4901672	0	True				
ANR	4901703	Identifier	false		4901672	0					
ANR	4901704	ExpressionStatement	s ++	80:2:1687:1690	4901672	1	True				
ANR	4901705	PostIncDecOperationExpression	s ++		4901672	0					
ANR	4901706	Identifier	s		4901672	0					
ANR	4901707	IncDec	++		4901672	1					
ANR	4901708	ReturnStatement	return true ;	82:1:1696:1707	4901672	2	True				
ANR	4901709	Identifier	true		4901672	0					
ANR	4901710	ReturnType	bool		4901672	1					
ANR	4901711	Identifier	str_isalpha		4901672	2					
ANR	4901712	ParameterList	const char * s		4901672	3					
ANR	4901713	Parameter	const char * s	71:13:1568:1580	4901672	0	True				
ANR	4901714	ParameterType	const char *		4901672	0					
ANR	4901715	Identifier	s		4901672	1					
ANR	4901716	CFGEntryNode	ENTRY		4901672		True				
ANR	4901717	CFGExitNode	EXIT		4901672		True				
ANR	4901718	Symbol	isalpha		4901672						
ANR	4901719	Symbol	s		4901672						
ANR	4901720	Symbol	NULL		4901672						
ANR	4901721	Symbol	false		4901672						
ANR	4901722	Symbol	true		4901672						
ANR	4901723	Symbol	* s		4901672						
ANR	4901724	Function	str_isalnum	85:0:1712:1871							
ANR	4901725	FunctionDef	str_isalnum (const char * s)		4901724	0					
ANR	4901726	CompoundStatement		87:0:1746:1871	4901724	0					
ANR	4901727	IfStatement	if ( NULL == s )		4901724	0					
ANR	4901728	Condition	NULL == s	88:6:1754:1762	4901724	0	True				
ANR	4901729	EqualityExpression	NULL == s		4901724	0		==			
ANR	4901730	Identifier	NULL		4901724	0					
ANR	4901731	Identifier	s		4901724	1					
ANR	4901732	CompoundStatement		2:18:19:19	4901724	1					
ANR	4901733	ReturnStatement	return false ;	89:2:1770:1782	4901724	0	True				
ANR	4901734	Identifier	false		4901724	0					
ANR	4901735	WhileStatement	while ( * s )		4901724	1					
ANR	4901736	Condition	* s	91:8:1795:1796	4901724	0	True				
ANR	4901737	UnaryOperationExpression	* s		4901724	0					
ANR	4901738	UnaryOperator	*		4901724	0					
ANR	4901739	Identifier	s		4901724	1					
ANR	4901740	CompoundStatement		5:13:53:53	4901724	1					
ANR	4901741	IfStatement	if ( ! isalnum ( * s ) )		4901724	0					
ANR	4901742	Condition	! isalnum ( * s )	92:7:1809:1820	4901724	0	True				
ANR	4901743	UnaryOperationExpression	! isalnum ( * s )		4901724	0					
ANR	4901744	UnaryOperator	!		4901724	0					
ANR	4901745	CallExpression	isalnum ( * s )		4901724	1					
ANR	4901746	Callee	isalnum		4901724	0					
ANR	4901747	Identifier	isalnum		4901724	0					
ANR	4901748	ArgumentList	* s		4901724	1					
ANR	4901749	Argument	* s		4901724	0					
ANR	4901750	UnaryOperationExpression	* s		4901724	0					
ANR	4901751	UnaryOperator	*		4901724	0					
ANR	4901752	Identifier	s		4901724	1					
ANR	4901753	CompoundStatement		6:22:77:77	4901724	1					
ANR	4901754	ReturnStatement	return false ;	93:3:1829:1841	4901724	0	True				
ANR	4901755	Identifier	false		4901724	0					
ANR	4901756	ExpressionStatement	s ++	95:2:1849:1852	4901724	1	True				
ANR	4901757	PostIncDecOperationExpression	s ++		4901724	0					
ANR	4901758	Identifier	s		4901724	0					
ANR	4901759	IncDec	++		4901724	1					
ANR	4901760	ReturnStatement	return true ;	97:1:1858:1869	4901724	2	True				
ANR	4901761	Identifier	true		4901724	0					
ANR	4901762	ReturnType	bool		4901724	1					
ANR	4901763	Identifier	str_isalnum		4901724	2					
ANR	4901764	ParameterList	const char * s		4901724	3					
ANR	4901765	Parameter	const char * s	86:13:1730:1742	4901724	0	True				
ANR	4901766	ParameterType	const char *		4901724	0					
ANR	4901767	Identifier	s		4901724	1					
ANR	4901768	CFGEntryNode	ENTRY		4901724		True				
ANR	4901769	CFGExitNode	EXIT		4901724		True				
ANR	4901770	Symbol	s		4901724						
ANR	4901771	Symbol	NULL		4901724						
ANR	4901772	Symbol	isalnum		4901724						
ANR	4901773	Symbol	false		4901724						
ANR	4901774	Symbol	true		4901724						
ANR	4901775	Symbol	* s		4901724						
ANR	4901776	ClassDef	TEST	101:0:1893:2006							
ANR	4901777	DeclStmt									
ANR	4901778	Decl							const char	const char *	s
ANR	4901779	DeclStmt									
ANR	4901780	Decl							bool	bool	is_int
ANR	4901781	DeclStmt									
ANR	4901782	Decl							bool	bool	is_real
ANR	4901783	DeclStmt									
ANR	4901784	Decl							bool	bool	is_strict
ANR	4901785	DeclStmt									
ANR	4901786	Decl							bool	bool	is_alpha
ANR	4901787	DeclStmt									
ANR	4901788	Decl							bool	bool	is_alnum
ANR	4901789	DeclStmt									
ANR	4901790	Decl							TEST	TEST [ ]	tests
ANR	4901791	Function	main	142:0:3271:4248							
ANR	4901792	FunctionDef	"main (int argc , const char * argv [ ])"		4901791	0					
ANR	4901793	CompoundStatement		143:0:3312:4248	4901791	0					
ANR	4901794	ExpressionStatement	( void ) argc	144:1:3315:3326	4901791	0	True				
ANR	4901795	CastExpression	( void ) argc		4901791	0					
ANR	4901796	CastTarget	void		4901791	0					
ANR	4901797	Identifier	argc		4901791	1					
ANR	4901798	ExpressionStatement	( void ) argv	145:1:3329:3340	4901791	1	True				
ANR	4901799	CastExpression	( void ) argv		4901791	0					
ANR	4901800	CastTarget	void		4901791	0					
ANR	4901801	Identifier	argv		4901791	1					
ANR	4901802	IdentifierDeclStatement	int failures = 0 ;	147:1:3344:3360	4901791	2	True				
ANR	4901803	IdentifierDecl	failures = 0		4901791	0					
ANR	4901804	IdentifierDeclType	int		4901791	0					
ANR	4901805	Identifier	failures		4901791	1					
ANR	4901806	AssignmentExpression	failures = 0		4901791	2		=			
ANR	4901807	Identifier	failures		4901791	0					
ANR	4901808	PrimaryExpression	0		4901791	1					
ANR	4901809	IdentifierDeclStatement	const TEST * t = tests ;	148:1:3363:3384	4901791	3	True				
ANR	4901810	IdentifierDecl	* t = tests		4901791	0					
ANR	4901811	IdentifierDeclType	const TEST *		4901791	0					
ANR	4901812	Identifier	t		4901791	1					
ANR	4901813	AssignmentExpression	* t = tests		4901791	2		=			
ANR	4901814	Identifier	tests		4901791	0					
ANR	4901815	Identifier	tests		4901791	1					
ANR	4901816	DoStatement	do		4901791	4					
ANR	4901817	CompoundStatement		13:2:278:476	4901791	0					
ANR	4901818	IdentifierDeclStatement	bool is_int = str_isint ( t -> s ) ;	150:2:3394:3426	4901791	0	True				
ANR	4901819	IdentifierDecl	is_int = str_isint ( t -> s )		4901791	0					
ANR	4901820	IdentifierDeclType	bool		4901791	0					
ANR	4901821	Identifier	is_int		4901791	1					
ANR	4901822	AssignmentExpression	is_int = str_isint ( t -> s )		4901791	2		=			
ANR	4901823	Identifier	is_int		4901791	0					
ANR	4901824	CallExpression	str_isint ( t -> s )		4901791	1					
ANR	4901825	Callee	str_isint		4901791	0					
ANR	4901826	Identifier	str_isint		4901791	0					
ANR	4901827	ArgumentList	t -> s		4901791	1					
ANR	4901828	Argument	t -> s		4901791	0					
ANR	4901829	PtrMemberAccess	t -> s		4901791	0					
ANR	4901830	Identifier	t		4901791	0					
ANR	4901831	Identifier	s		4901791	1					
ANR	4901832	IdentifierDeclStatement	bool is_real = str_isreal ( t -> s ) ;	151:2:3430:3464	4901791	1	True				
ANR	4901833	IdentifierDecl	is_real = str_isreal ( t -> s )		4901791	0					
ANR	4901834	IdentifierDeclType	bool		4901791	0					
ANR	4901835	Identifier	is_real		4901791	1					
ANR	4901836	AssignmentExpression	is_real = str_isreal ( t -> s )		4901791	2		=			
ANR	4901837	Identifier	is_real		4901791	0					
ANR	4901838	CallExpression	str_isreal ( t -> s )		4901791	1					
ANR	4901839	Callee	str_isreal		4901791	0					
ANR	4901840	Identifier	str_isreal		4901791	0					
ANR	4901841	ArgumentList	t -> s		4901791	1					
ANR	4901842	Argument	t -> s		4901791	0					
ANR	4901843	PtrMemberAccess	t -> s		4901791	0					
ANR	4901844	Identifier	t		4901791	0					
ANR	4901845	Identifier	s		4901791	1					
ANR	4901846	IdentifierDeclStatement	"bool is_strict = str_isreal ( t -> s , true ) ;"	152:2:3468:3509	4901791	2	True				
ANR	4901847	IdentifierDecl	"is_strict = str_isreal ( t -> s , true )"		4901791	0					
ANR	4901848	IdentifierDeclType	bool		4901791	0					
ANR	4901849	Identifier	is_strict		4901791	1					
ANR	4901850	AssignmentExpression	"is_strict = str_isreal ( t -> s , true )"		4901791	2		=			
ANR	4901851	Identifier	is_strict		4901791	0					
ANR	4901852	CallExpression	"str_isreal ( t -> s , true )"		4901791	1					
ANR	4901853	Callee	str_isreal		4901791	0					
ANR	4901854	Identifier	str_isreal		4901791	0					
ANR	4901855	ArgumentList	t -> s		4901791	1					
ANR	4901856	Argument	t -> s		4901791	0					
ANR	4901857	PtrMemberAccess	t -> s		4901791	0					
ANR	4901858	Identifier	t		4901791	0					
ANR	4901859	Identifier	s		4901791	1					
ANR	4901860	Argument	true		4901791	1					
ANR	4901861	Identifier	true		4901791	0					
ANR	4901862	IdentifierDeclStatement	bool is_alpha = str_isalpha ( t -> s ) ;	153:2:3513:3548	4901791	3	True				
ANR	4901863	IdentifierDecl	is_alpha = str_isalpha ( t -> s )		4901791	0					
ANR	4901864	IdentifierDeclType	bool		4901791	0					
ANR	4901865	Identifier	is_alpha		4901791	1					
ANR	4901866	AssignmentExpression	is_alpha = str_isalpha ( t -> s )		4901791	2		=			
ANR	4901867	Identifier	is_alpha		4901791	0					
ANR	4901868	CallExpression	str_isalpha ( t -> s )		4901791	1					
ANR	4901869	Callee	str_isalpha		4901791	0					
ANR	4901870	Identifier	str_isalpha		4901791	0					
ANR	4901871	ArgumentList	t -> s		4901791	1					
ANR	4901872	Argument	t -> s		4901791	0					
ANR	4901873	PtrMemberAccess	t -> s		4901791	0					
ANR	4901874	Identifier	t		4901791	0					
ANR	4901875	Identifier	s		4901791	1					
ANR	4901876	IdentifierDeclStatement	bool is_alnum = str_isalnum ( t -> s ) ;	154:2:3552:3587	4901791	4	True				
ANR	4901877	IdentifierDecl	is_alnum = str_isalnum ( t -> s )		4901791	0					
ANR	4901878	IdentifierDeclType	bool		4901791	0					
ANR	4901879	Identifier	is_alnum		4901791	1					
ANR	4901880	AssignmentExpression	is_alnum = str_isalnum ( t -> s )		4901791	2		=			
ANR	4901881	Identifier	is_alnum		4901791	0					
ANR	4901882	CallExpression	str_isalnum ( t -> s )		4901791	1					
ANR	4901883	Callee	str_isalnum		4901791	0					
ANR	4901884	Identifier	str_isalnum		4901791	0					
ANR	4901885	ArgumentList	t -> s		4901791	1					
ANR	4901886	Argument	t -> s		4901791	0					
ANR	4901887	PtrMemberAccess	t -> s		4901791	0					
ANR	4901888	Identifier	t		4901791	0					
ANR	4901889	Identifier	s		4901791	1					
ANR	4901890	IdentifierDeclStatement	bool ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) ) ;	155:2:3591:3789	4901791	5	True				
ANR	4901891	IdentifierDecl	ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) )		4901791	0					
ANR	4901892	IdentifierDeclType	bool		4901791	0					
ANR	4901893	Identifier	ok		4901791	1					
ANR	4901894	AssignmentExpression	ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) )		4901791	2		=			
ANR	4901895	Identifier	ok		4901791	0					
ANR	4901896	AndExpression	( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		4901791	1		&&			
ANR	4901897	EqualityExpression	is_int == t -> is_int		4901791	0		==			
ANR	4901898	Identifier	is_int		4901791	0					
ANR	4901899	PtrMemberAccess	t -> is_int		4901791	1					
ANR	4901900	Identifier	t		4901791	0					
ANR	4901901	Identifier	is_int		4901791	1					
ANR	4901902	AndExpression	( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		4901791	1		&&			
ANR	4901903	EqualityExpression	is_real == t -> is_real		4901791	0		==			
ANR	4901904	Identifier	is_real		4901791	0					
ANR	4901905	PtrMemberAccess	t -> is_real		4901791	1					
ANR	4901906	Identifier	t		4901791	0					
ANR	4901907	Identifier	is_real		4901791	1					
ANR	4901908	AndExpression	( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		4901791	1		&&			
ANR	4901909	EqualityExpression	is_strict == t -> is_strict		4901791	0		==			
ANR	4901910	Identifier	is_strict		4901791	0					
ANR	4901911	PtrMemberAccess	t -> is_strict		4901791	1					
ANR	4901912	Identifier	t		4901791	0					
ANR	4901913	Identifier	is_strict		4901791	1					
ANR	4901914	AndExpression	( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		4901791	1		&&			
ANR	4901915	EqualityExpression	is_alpha == t -> is_alpha		4901791	0		==			
ANR	4901916	Identifier	is_alpha		4901791	0					
ANR	4901917	PtrMemberAccess	t -> is_alpha		4901791	1					
ANR	4901918	Identifier	t		4901791	0					
ANR	4901919	Identifier	is_alpha		4901791	1					
ANR	4901920	EqualityExpression	is_alnum == t -> is_alnum		4901791	1		==			
ANR	4901921	Identifier	is_alnum		4901791	0					
ANR	4901922	PtrMemberAccess	t -> is_alnum		4901791	1					
ANR	4901923	Identifier	t		4901791	0					
ANR	4901924	Identifier	is_alnum		4901791	1					
ANR	4901925	ExpressionStatement	"printf ( ""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"" , t -> s , TF ( t -> is_int ) , TF ( t -> is_real ) , TF ( t -> is_strict ) , TF ( t -> is_alpha ) , TF ( t -> is_alnum ) , TF ( is_int ) , TF ( is_real ) , TF ( is_strict ) , TF ( is_alpha ) , TF ( is_alnum ) , ok ? ""OK"" : ""FAILURE"" )"	160:2:3793:4065	4901791	6	True				
ANR	4901926	CallExpression	"printf ( ""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"" , t -> s , TF ( t -> is_int ) , TF ( t -> is_real ) , TF ( t -> is_strict ) , TF ( t -> is_alpha ) , TF ( t -> is_alnum ) , TF ( is_int ) , TF ( is_real ) , TF ( is_strict ) , TF ( is_alpha ) , TF ( is_alnum ) , ok ? ""OK"" : ""FAILURE"" )"		4901791	0					
ANR	4901927	Callee	printf		4901791	0					
ANR	4901928	Identifier	printf		4901791	0					
ANR	4901929	ArgumentList	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		4901791	1					
ANR	4901930	Argument	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		4901791	0					
ANR	4901931	PrimaryExpression	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		4901791	0					
ANR	4901932	Argument	t -> s		4901791	1					
ANR	4901933	PtrMemberAccess	t -> s		4901791	0					
ANR	4901934	Identifier	t		4901791	0					
ANR	4901935	Identifier	s		4901791	1					
ANR	4901936	Argument	TF ( t -> is_int )		4901791	2					
ANR	4901937	CallExpression	TF ( t -> is_int )		4901791	0					
ANR	4901938	Callee	TF		4901791	0					
ANR	4901939	Identifier	TF		4901791	0					
ANR	4901940	ArgumentList	t -> is_int		4901791	1					
ANR	4901941	Argument	t -> is_int		4901791	0					
ANR	4901942	PtrMemberAccess	t -> is_int		4901791	0					
ANR	4901943	Identifier	t		4901791	0					
ANR	4901944	Identifier	is_int		4901791	1					
ANR	4901945	Argument	TF ( t -> is_real )		4901791	3					
ANR	4901946	CallExpression	TF ( t -> is_real )		4901791	0					
ANR	4901947	Callee	TF		4901791	0					
ANR	4901948	Identifier	TF		4901791	0					
ANR	4901949	ArgumentList	t -> is_real		4901791	1					
ANR	4901950	Argument	t -> is_real		4901791	0					
ANR	4901951	PtrMemberAccess	t -> is_real		4901791	0					
ANR	4901952	Identifier	t		4901791	0					
ANR	4901953	Identifier	is_real		4901791	1					
ANR	4901954	Argument	TF ( t -> is_strict )		4901791	4					
ANR	4901955	CallExpression	TF ( t -> is_strict )		4901791	0					
ANR	4901956	Callee	TF		4901791	0					
ANR	4901957	Identifier	TF		4901791	0					
ANR	4901958	ArgumentList	t -> is_strict		4901791	1					
ANR	4901959	Argument	t -> is_strict		4901791	0					
ANR	4901960	PtrMemberAccess	t -> is_strict		4901791	0					
ANR	4901961	Identifier	t		4901791	0					
ANR	4901962	Identifier	is_strict		4901791	1					
ANR	4901963	Argument	TF ( t -> is_alpha )		4901791	5					
ANR	4901964	CallExpression	TF ( t -> is_alpha )		4901791	0					
ANR	4901965	Callee	TF		4901791	0					
ANR	4901966	Identifier	TF		4901791	0					
ANR	4901967	ArgumentList	t -> is_alpha		4901791	1					
ANR	4901968	Argument	t -> is_alpha		4901791	0					
ANR	4901969	PtrMemberAccess	t -> is_alpha		4901791	0					
ANR	4901970	Identifier	t		4901791	0					
ANR	4901971	Identifier	is_alpha		4901791	1					
ANR	4901972	Argument	TF ( t -> is_alnum )		4901791	6					
ANR	4901973	CallExpression	TF ( t -> is_alnum )		4901791	0					
ANR	4901974	Callee	TF		4901791	0					
ANR	4901975	Identifier	TF		4901791	0					
ANR	4901976	ArgumentList	t -> is_alnum		4901791	1					
ANR	4901977	Argument	t -> is_alnum		4901791	0					
ANR	4901978	PtrMemberAccess	t -> is_alnum		4901791	0					
ANR	4901979	Identifier	t		4901791	0					
ANR	4901980	Identifier	is_alnum		4901791	1					
ANR	4901981	Argument	TF ( is_int )		4901791	7					
ANR	4901982	CallExpression	TF ( is_int )		4901791	0					
ANR	4901983	Callee	TF		4901791	0					
ANR	4901984	Identifier	TF		4901791	0					
ANR	4901985	ArgumentList	is_int		4901791	1					
ANR	4901986	Argument	is_int		4901791	0					
ANR	4901987	Identifier	is_int		4901791	0					
ANR	4901988	Argument	TF ( is_real )		4901791	8					
ANR	4901989	CallExpression	TF ( is_real )		4901791	0					
ANR	4901990	Callee	TF		4901791	0					
ANR	4901991	Identifier	TF		4901791	0					
ANR	4901992	ArgumentList	is_real		4901791	1					
ANR	4901993	Argument	is_real		4901791	0					
ANR	4901994	Identifier	is_real		4901791	0					
ANR	4901995	Argument	TF ( is_strict )		4901791	9					
ANR	4901996	CallExpression	TF ( is_strict )		4901791	0					
ANR	4901997	Callee	TF		4901791	0					
ANR	4901998	Identifier	TF		4901791	0					
ANR	4901999	ArgumentList	is_strict		4901791	1					
ANR	4902000	Argument	is_strict		4901791	0					
ANR	4902001	Identifier	is_strict		4901791	0					
ANR	4902002	Argument	TF ( is_alpha )		4901791	10					
ANR	4902003	CallExpression	TF ( is_alpha )		4901791	0					
ANR	4902004	Callee	TF		4901791	0					
ANR	4902005	Identifier	TF		4901791	0					
ANR	4902006	ArgumentList	is_alpha		4901791	1					
ANR	4902007	Argument	is_alpha		4901791	0					
ANR	4902008	Identifier	is_alpha		4901791	0					
ANR	4902009	Argument	TF ( is_alnum )		4901791	11					
ANR	4902010	CallExpression	TF ( is_alnum )		4901791	0					
ANR	4902011	Callee	TF		4901791	0					
ANR	4902012	Identifier	TF		4901791	0					
ANR	4902013	ArgumentList	is_alnum		4901791	1					
ANR	4902014	Argument	is_alnum		4901791	0					
ANR	4902015	Identifier	is_alnum		4901791	0					
ANR	4902016	Argument	"ok ? ""OK"" : ""FAILURE"""		4901791	12					
ANR	4902017	ConditionalExpression	"ok ? ""OK"" : ""FAILURE"""		4901791	0					
ANR	4902018	Condition	ok		4901791	0					
ANR	4902019	Identifier	ok		4901791	0					
ANR	4902020	PrimaryExpression	"""OK"""		4901791	1					
ANR	4902021	PrimaryExpression	"""FAILURE"""		4901791	2					
ANR	4902022	IfStatement	if ( ! ok )		4901791	7					
ANR	4902023	Condition	! ok	167:7:4074:4076	4901791	0	True				
ANR	4902024	UnaryOperationExpression	! ok		4901791	0					
ANR	4902025	UnaryOperator	!		4901791	0					
ANR	4902026	Identifier	ok		4901791	1					
ANR	4902027	CompoundStatement		25:13:767:767	4901791	1					
ANR	4902028	ExpressionStatement	failures ++	168:3:4085:4095	4901791	0	True				
ANR	4902029	PostIncDecOperationExpression	failures ++		4901791	0					
ANR	4902030	Identifier	failures		4901791	0					
ANR	4902031	IncDec	++		4901791	1					
ANR	4902032	ExpressionStatement	t ++	170:2:4103:4106	4901791	8	True				
ANR	4902033	PostIncDecOperationExpression	t ++		4901791	0					
ANR	4902034	Identifier	t		4901791	0					
ANR	4902035	IncDec	++		4901791	1					
ANR	4902036	Condition	t -> s	171:10:4118:4121	4901791	1	True				
ANR	4902037	PtrMemberAccess	t -> s		4901791	0					
ANR	4902038	Identifier	t		4901791	0					
ANR	4902039	Identifier	s		4901791	1					
ANR	4902040	IfStatement	if ( failures )		4901791	5					
ANR	4902041	Condition	failures	172:6:4132:4139	4901791	0	True				
ANR	4902042	Identifier	failures		4901791	0					
ANR	4902043	CompoundStatement		30:17:830:830	4901791	1					
ANR	4902044	ExpressionStatement	"printf ( ""%d tests failed\\n"" , failures )"	173:2:4147:4186	4901791	0	True				
ANR	4902045	CallExpression	"printf ( ""%d tests failed\\n"" , failures )"		4901791	0					
ANR	4902046	Callee	printf		4901791	0					
ANR	4902047	Identifier	printf		4901791	0					
ANR	4902048	ArgumentList	"""%d tests failed\\n"""		4901791	1					
ANR	4902049	Argument	"""%d tests failed\\n"""		4901791	0					
ANR	4902050	PrimaryExpression	"""%d tests failed\\n"""		4901791	0					
ANR	4902051	Argument	failures		4901791	1					
ANR	4902052	Identifier	failures		4901791	0					
ANR	4902053	ExpressionStatement	exit ( 0 )	174:2:4190:4199	4901791	1	True				
ANR	4902054	CallExpression	exit ( 0 )		4901791	0					
ANR	4902055	Callee	exit		4901791	0					
ANR	4902056	Identifier	exit		4901791	0					
ANR	4902057	ArgumentList	0		4901791	1					
ANR	4902058	Argument	0		4901791	0					
ANR	4902059	PrimaryExpression	0		4901791	0					
ANR	4902060	ExpressionStatement	"printf ( ""All tests passed\\n"" )"	176:1:4205:4235	4901791	6	True				
ANR	4902061	CallExpression	"printf ( ""All tests passed\\n"" )"		4901791	0					
ANR	4902062	Callee	printf		4901791	0					
ANR	4902063	Identifier	printf		4901791	0					
ANR	4902064	ArgumentList	"""All tests passed\\n"""		4901791	1					
ANR	4902065	Argument	"""All tests passed\\n"""		4901791	0					
ANR	4902066	PrimaryExpression	"""All tests passed\\n"""		4901791	0					
ANR	4902067	ReturnStatement	return 0 ;	177:1:4238:4246	4901791	7	True				
ANR	4902068	PrimaryExpression	0		4901791	0					
ANR	4902069	ReturnType	int		4901791	1					
ANR	4902070	Identifier	main		4901791	2					
ANR	4902071	ParameterList	"int argc , const char * argv [ ]"		4901791	3					
ANR	4902072	Parameter	int argc	142:10:3281:3288	4901791	0	True				
ANR	4902073	ParameterType	int		4901791	0					
ANR	4902074	Identifier	argc		4901791	1					
ANR	4902075	Parameter	const char * argv [ ]	142:20:3291:3308	4901791	1	True				
ANR	4902076	ParameterType	const char * [ ]		4901791	0					
ANR	4902077	Identifier	argv		4901791	1					
ANR	4902078	CFGEntryNode	ENTRY		4901791		True				
ANR	4902079	CFGExitNode	EXIT		4901791		True				
ANR	4902080	Symbol	argc		4901791						
ANR	4902081	Symbol	is_strict		4901791						
ANR	4902082	Symbol	t -> is_alpha		4901791						
ANR	4902083	Symbol	str_isalnum		4901791						
ANR	4902084	Symbol	t -> is_real		4901791						
ANR	4902085	Symbol	failures		4901791						
ANR	4902086	Symbol	t -> is_alnum		4901791						
ANR	4902087	Symbol	is_alpha		4901791						
ANR	4902088	Symbol	str_isalpha		4901791						
ANR	4902089	Symbol	is_real		4901791						
ANR	4902090	Symbol	is_alnum		4901791						
ANR	4902091	Symbol	t -> is_int		4901791						
ANR	4902092	Symbol	argv		4901791						
ANR	4902093	Symbol	str_isint		4901791						
ANR	4902094	Symbol	t -> is_strict		4901791						
ANR	4902095	Symbol	TF		4901791						
ANR	4902096	Symbol	tests		4901791						
ANR	4902097	Symbol	t		4901791						
ANR	4902098	Symbol	is_int		4901791						
ANR	4902099	Symbol	true		4901791						
ANR	4902100	Symbol	t -> s		4901791						
ANR	4902101	Symbol	str_isreal		4901791						
ANR	4902102	Symbol	ok		4901791						
ANR	4902103	Symbol	* t		4901791						
