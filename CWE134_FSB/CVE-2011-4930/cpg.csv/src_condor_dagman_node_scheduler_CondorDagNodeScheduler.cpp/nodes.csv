command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3141951	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_node_scheduler_CondorDagNodeScheduler.cpp								
ANR	3141952	DeclStmt									
ANR	3141953	Decl							float	float *	floatPtr
ANR	3141954	DeclStmt									
ANR	3141955	Decl							int	int *	intPtr
ANR	3141956	Function	main	58:0:1685:22966							
ANR	3141957	FunctionDef	"main (int argc , char * argv [ ])"		3141956	0					
ANR	3141958	CompoundStatement		59:0:1720:22966	3141956	0					
ANR	3141959	TryStatement	try		3141956	0					
ANR	3141960	CompoundStatement		588:2:16672:16686	3141956	0					
ANR	3141961	IdentifierDeclStatement	"int i , j , k ;"		3141956	0					
ANR	3141962	IdentifierDecl	i		3141956	0					
ANR	3141963	IdentifierDeclType	int		3141956	0					
ANR	3141964	Identifier	i		3141956	1					
ANR	3141965	IdentifierDecl	j		3141956	1					
ANR	3141966	IdentifierDeclType	int		3141956	0					
ANR	3141967	Identifier	j		3141956	1					
ANR	3141968	IdentifierDecl	k		3141956	2					
ANR	3141969	IdentifierDeclType	int		3141956	0					
ANR	3141970	Identifier	k		3141956	1					
ANR	3141971	IdentifierDeclStatement	float c ;		3141956	1					
ANR	3141972	IdentifierDecl	c		3141956	0					
ANR	3141973	IdentifierDeclType	float		3141956	0					
ANR	3141974	Identifier	c		3141956	1					
ANR	3141975	IdentifierDeclStatement	ConstituentLibrary lib ;		3141956	2					
ANR	3141976	IdentifierDecl	lib		3141956	0					
ANR	3141977	IdentifierDeclType	ConstituentLibrary		3141956	0					
ANR	3141978	Identifier	lib		3141956	1					
ANR	3141979	IdentifierDeclStatement	float done ;		3141956	3					
ANR	3141980	IdentifierDecl	done		3141956	0					
ANR	3141981	IdentifierDeclType	float		3141956	0					
ANR	3141982	Identifier	done		3141956	1					
ANR	3141983	IdentifierDeclStatement	float last ;		3141956	4					
ANR	3141984	IdentifierDecl	last		3141956	0					
ANR	3141985	IdentifierDeclType	float		3141956	0					
ANR	3141986	Identifier	last		3141956	1					
ANR	3141987	IdentifierDeclStatement	"clock_t start , finish ;"		3141956	5					
ANR	3141988	IdentifierDecl	start		3141956	0					
ANR	3141989	IdentifierDeclType	clock_t		3141956	0					
ANR	3141990	Identifier	start		3141956	1					
ANR	3141991	IdentifierDecl	finish		3141956	1					
ANR	3141992	IdentifierDeclType	clock_t		3141956	0					
ANR	3141993	Identifier	finish		3141956	1					
ANR	3141994	IdentifierDeclStatement	FILE * fPrio ;		3141956	6					
ANR	3141995	IdentifierDecl	* fPrio		3141956	0					
ANR	3141996	IdentifierDeclType	FILE *		3141956	0					
ANR	3141997	Identifier	fPrio		3141956	1					
ANR	3141998	ExpressionStatement	start = clock ( )		3141956	7					
ANR	3141999	AssignmentExpression	start = clock ( )		3141956	0		=			
ANR	3142000	Identifier	start		3141956	0					
ANR	3142001	CallExpression	clock ( )		3141956	1					
ANR	3142002	Callee	clock		3141956	0					
ANR	3142003	Identifier	clock		3141956	0					
ANR	3142004	ArgumentList			3141956	1					
ANR	3142005	IfStatement	if ( argc <= 1 )		3141956	8					
ANR	3142006	Condition	argc <= 1		3141956	0					
ANR	3142007	RelationalExpression	argc <= 1		3141956	0		<=			
ANR	3142008	Identifier	argc		3141956	0					
ANR	3142009	PrimaryExpression	1		3141956	1					
ANR	3142010	CompoundStatement		16:16:247:247	3141956	1					
ANR	3142011	Label	usage :		3141956	0					
ANR	3142012	Identifier	usage		3141956	0					
ANR	3142013	ExpressionStatement	"printf ( ""\\n"" )"		3141956	1					
ANR	3142014	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142015	Callee	printf		3141956	0					
ANR	3142016	Identifier	printf		3141956	0					
ANR	3142017	ArgumentList	"""\\n"""		3141956	1					
ANR	3142018	Argument	"""\\n"""		3141956	0					
ANR	3142019	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142020	ExpressionStatement	"printf ( ""NAME\\n"" )"		3141956	2					
ANR	3142021	CallExpression	"printf ( ""NAME\\n"" )"		3141956	0					
ANR	3142022	Callee	printf		3141956	0					
ANR	3142023	Identifier	printf		3141956	0					
ANR	3142024	ArgumentList	"""NAME\\n"""		3141956	1					
ANR	3142025	Argument	"""NAME\\n"""		3141956	0					
ANR	3142026	PrimaryExpression	"""NAME\\n"""		3141956	0					
ANR	3142027	ExpressionStatement	"printf ( ""   prio - a tool for prioritizing jobs of a DAGMan file\\n"" )"		3141956	3					
ANR	3142028	CallExpression	"printf ( ""   prio - a tool for prioritizing jobs of a DAGMan file\\n"" )"		3141956	0					
ANR	3142029	Callee	printf		3141956	0					
ANR	3142030	Identifier	printf		3141956	0					
ANR	3142031	ArgumentList	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		3141956	1					
ANR	3142032	Argument	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		3141956	0					
ANR	3142033	PrimaryExpression	"""   prio - a tool for prioritizing jobs of a DAGMan file\\n"""		3141956	0					
ANR	3142034	ExpressionStatement	"printf ( ""\\n"" )"		3141956	4					
ANR	3142035	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142036	Callee	printf		3141956	0					
ANR	3142037	Identifier	printf		3141956	0					
ANR	3142038	ArgumentList	"""\\n"""		3141956	1					
ANR	3142039	Argument	"""\\n"""		3141956	0					
ANR	3142040	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142041	ExpressionStatement	"printf ( ""SYNOPSIS\\n"" )"		3141956	5					
ANR	3142042	CallExpression	"printf ( ""SYNOPSIS\\n"" )"		3141956	0					
ANR	3142043	Callee	printf		3141956	0					
ANR	3142044	Identifier	printf		3141956	0					
ANR	3142045	ArgumentList	"""SYNOPSIS\\n"""		3141956	1					
ANR	3142046	Argument	"""SYNOPSIS\\n"""		3141956	0					
ANR	3142047	PrimaryExpression	"""SYNOPSIS\\n"""		3141956	0					
ANR	3142048	ExpressionStatement	"printf ( ""   prio [options] INOUTfile.dag\\n"" )"		3141956	6					
ANR	3142049	CallExpression	"printf ( ""   prio [options] INOUTfile.dag\\n"" )"		3141956	0					
ANR	3142050	Callee	printf		3141956	0					
ANR	3142051	Identifier	printf		3141956	0					
ANR	3142052	ArgumentList	"""   prio [options] INOUTfile.dag\\n"""		3141956	1					
ANR	3142053	Argument	"""   prio [options] INOUTfile.dag\\n"""		3141956	0					
ANR	3142054	PrimaryExpression	"""   prio [options] INOUTfile.dag\\n"""		3141956	0					
ANR	3142055	ExpressionStatement	"printf ( ""\\n"" )"		3141956	7					
ANR	3142056	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142057	Callee	printf		3141956	0					
ANR	3142058	Identifier	printf		3141956	0					
ANR	3142059	ArgumentList	"""\\n"""		3141956	1					
ANR	3142060	Argument	"""\\n"""		3141956	0					
ANR	3142061	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142062	ExpressionStatement	"printf ( ""DESCRIPTION\\n"" )"		3141956	8					
ANR	3142063	CallExpression	"printf ( ""DESCRIPTION\\n"" )"		3141956	0					
ANR	3142064	Callee	printf		3141956	0					
ANR	3142065	Identifier	printf		3141956	0					
ANR	3142066	ArgumentList	"""DESCRIPTION\\n"""		3141956	1					
ANR	3142067	Argument	"""DESCRIPTION\\n"""		3141956	0					
ANR	3142068	PrimaryExpression	"""DESCRIPTION\\n"""		3141956	0					
ANR	3142069	ExpressionStatement	"printf ( ""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"" )"		3141956	9					
ANR	3142070	CallExpression	"printf ( ""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"" )"		3141956	0					
ANR	3142071	Callee	printf		3141956	0					
ANR	3142072	Identifier	printf		3141956	0					
ANR	3142073	ArgumentList	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		3141956	1					
ANR	3142074	Argument	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		3141956	0					
ANR	3142075	PrimaryExpression	"""   Prioritizes jobs of a DAGMan file using an algorithm based on the paper\\n"""		3141956	0					
ANR	3142076	ExpressionStatement	"printf ( ""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"" )"		3141956	10					
ANR	3142077	CallExpression	"printf ( ""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"" )"		3141956	0					
ANR	3142078	Callee	printf		3141956	0					
ANR	3142079	Identifier	printf		3141956	0					
ANR	3142080	ArgumentList	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		3141956	1					
ANR	3142081	Argument	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		3141956	0					
ANR	3142082	PrimaryExpression	"""         Malewicz, G., Rosenberg, A., Yurkewych, M.:\\n"""		3141956	0					
ANR	3142083	ExpressionStatement	"printf ( ""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"" )"		3141956	11					
ANR	3142084	CallExpression	"printf ( ""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"" )"		3141956	0					
ANR	3142085	Callee	printf		3141956	0					
ANR	3142086	Identifier	printf		3141956	0					
ANR	3142087	ArgumentList	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		3141956	1					
ANR	3142088	Argument	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		3141956	0					
ANR	3142089	PrimaryExpression	"""         Toward a Theory for Scheduling Dags in Internet-Based Computing.\\n"""		3141956	0					
ANR	3142090	ExpressionStatement	"printf ( ""         IEEE Transactions on Computers (2005) to appear\\n"" )"		3141956	12					
ANR	3142091	CallExpression	"printf ( ""         IEEE Transactions on Computers (2005) to appear\\n"" )"		3141956	0					
ANR	3142092	Callee	printf		3141956	0					
ANR	3142093	Identifier	printf		3141956	0					
ANR	3142094	ArgumentList	"""         IEEE Transactions on Computers (2005) to appear\\n"""		3141956	1					
ANR	3142095	Argument	"""         IEEE Transactions on Computers (2005) to appear\\n"""		3141956	0					
ANR	3142096	PrimaryExpression	"""         IEEE Transactions on Computers (2005) to appear\\n"""		3141956	0					
ANR	3142097	ExpressionStatement	"printf ( ""         (preliminary version IPDPS'05)\\n"" )"		3141956	13					
ANR	3142098	CallExpression	"printf ( ""         (preliminary version IPDPS'05)\\n"" )"		3141956	0					
ANR	3142099	Callee	printf		3141956	0					
ANR	3142100	Identifier	printf		3141956	0					
ANR	3142101	ArgumentList	"""         (preliminary version IPDPS'05)\\n"""		3141956	1					
ANR	3142102	Argument	"""         (preliminary version IPDPS'05)\\n"""		3141956	0					
ANR	3142103	PrimaryExpression	"""         (preliminary version IPDPS'05)\\n"""		3141956	0					
ANR	3142104	ExpressionStatement	"printf ( ""   The algorithm prioritizes jobs so as to try to maximize the number\\n"" )"		3141956	14					
ANR	3142105	CallExpression	"printf ( ""   The algorithm prioritizes jobs so as to try to maximize the number\\n"" )"		3141956	0					
ANR	3142106	Callee	printf		3141956	0					
ANR	3142107	Identifier	printf		3141956	0					
ANR	3142108	ArgumentList	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		3141956	1					
ANR	3142109	Argument	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		3141956	0					
ANR	3142110	PrimaryExpression	"""   The algorithm prioritizes jobs so as to try to maximize the number\\n"""		3141956	0					
ANR	3142111	ExpressionStatement	"printf ( ""   of eligible jobs at any step of the computation, thus helping improve\\n"" )"		3141956	15					
ANR	3142112	CallExpression	"printf ( ""   of eligible jobs at any step of the computation, thus helping improve\\n"" )"		3141956	0					
ANR	3142113	Callee	printf		3141956	0					
ANR	3142114	Identifier	printf		3141956	0					
ANR	3142115	ArgumentList	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		3141956	1					
ANR	3142116	Argument	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		3141956	0					
ANR	3142117	PrimaryExpression	"""   of eligible jobs at any step of the computation, thus helping improve\\n"""		3141956	0					
ANR	3142118	ExpressionStatement	"printf ( ""   the utilization of workers in the presence of unpredictable variability\\n"" )"		3141956	16					
ANR	3142119	CallExpression	"printf ( ""   the utilization of workers in the presence of unpredictable variability\\n"" )"		3141956	0					
ANR	3142120	Callee	printf		3141956	0					
ANR	3142121	Identifier	printf		3141956	0					
ANR	3142122	ArgumentList	"""   the utilization of workers in the presence of unpredictable variability\\n"""		3141956	1					
ANR	3142123	Argument	"""   the utilization of workers in the presence of unpredictable variability\\n"""		3141956	0					
ANR	3142124	PrimaryExpression	"""   the utilization of workers in the presence of unpredictable variability\\n"""		3141956	0					
ANR	3142125	ExpressionStatement	"printf ( ""   in the number of workers available during the computation.\\n"" )"		3141956	17					
ANR	3142126	CallExpression	"printf ( ""   in the number of workers available during the computation.\\n"" )"		3141956	0					
ANR	3142127	Callee	printf		3141956	0					
ANR	3142128	Identifier	printf		3141956	0					
ANR	3142129	ArgumentList	"""   in the number of workers available during the computation.\\n"""		3141956	1					
ANR	3142130	Argument	"""   in the number of workers available during the computation.\\n"""		3141956	0					
ANR	3142131	PrimaryExpression	"""   in the number of workers available during the computation.\\n"""		3141956	0					
ANR	3142132	ExpressionStatement	"printf ( ""   The algorithm decomposes the dag of job dependencies extracted from\\n"" )"		3141956	18					
ANR	3142133	CallExpression	"printf ( ""   The algorithm decomposes the dag of job dependencies extracted from\\n"" )"		3141956	0					
ANR	3142134	Callee	printf		3141956	0					
ANR	3142135	Identifier	printf		3141956	0					
ANR	3142136	ArgumentList	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		3141956	1					
ANR	3142137	Argument	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		3141956	0					
ANR	3142138	PrimaryExpression	"""   The algorithm decomposes the dag of job dependencies extracted from\\n"""		3141956	0					
ANR	3142139	ExpressionStatement	"printf ( ""   the DAGMan file, prioritizes the components, and schedules them in\\n"" )"		3141956	19					
ANR	3142140	CallExpression	"printf ( ""   the DAGMan file, prioritizes the components, and schedules them in\\n"" )"		3141956	0					
ANR	3142141	Callee	printf		3141956	0					
ANR	3142142	Identifier	printf		3141956	0					
ANR	3142143	ArgumentList	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		3141956	1					
ANR	3142144	Argument	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		3141956	0					
ANR	3142145	PrimaryExpression	"""   the DAGMan file, prioritizes the components, and schedules them in\\n"""		3141956	0					
ANR	3142146	ExpressionStatement	"printf ( ""   a topological sort order observing the priorities. An optimal \\n"" )"		3141956	20					
ANR	3142147	CallExpression	"printf ( ""   a topological sort order observing the priorities. An optimal \\n"" )"		3141956	0					
ANR	3142148	Callee	printf		3141956	0					
ANR	3142149	Identifier	printf		3141956	0					
ANR	3142150	ArgumentList	"""   a topological sort order observing the priorities. An optimal \\n"""		3141956	1					
ANR	3142151	Argument	"""   a topological sort order observing the priorities. An optimal \\n"""		3141956	0					
ANR	3142152	PrimaryExpression	"""   a topological sort order observing the priorities. An optimal \\n"""		3141956	0					
ANR	3142153	ExpressionStatement	"printf ( ""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"" )"		3141956	21					
ANR	3142154	CallExpression	"printf ( ""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"" )"		3141956	0					
ANR	3142155	Callee	printf		3141956	0					
ANR	3142156	Identifier	printf		3141956	0					
ANR	3142157	ArgumentList	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		3141956	1					
ANR	3142158	Argument	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		3141956	0					
ANR	3142159	PrimaryExpression	"""   prioritization is produced for any dag composed of W-dags, M-dags, N-dags,\\n"""		3141956	0					
ANR	3142160	ExpressionStatement	"printf ( ""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"" )"		3141956	22					
ANR	3142161	CallExpression	"printf ( ""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"" )"		3141956	0					
ANR	3142162	Callee	printf		3141956	0					
ANR	3142163	Identifier	printf		3141956	0					
ANR	3142164	ArgumentList	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		3141956	1					
ANR	3142165	Argument	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		3141956	0					
ANR	3142166	PrimaryExpression	"""   C-dags, and Q-dags as defined in the paper. The tool instruments\\n"""		3141956	0					
ANR	3142167	ExpressionStatement	"printf ( ""   the DAGMan file, and corresponding submit description files,\\n"" )"		3141956	23					
ANR	3142168	CallExpression	"printf ( ""   the DAGMan file, and corresponding submit description files,\\n"" )"		3141956	0					
ANR	3142169	Callee	printf		3141956	0					
ANR	3142170	Identifier	printf		3141956	0					
ANR	3142171	ArgumentList	"""   the DAGMan file, and corresponding submit description files,\\n"""		3141956	1					
ANR	3142172	Argument	"""   the DAGMan file, and corresponding submit description files,\\n"""		3141956	0					
ANR	3142173	PrimaryExpression	"""   the DAGMan file, and corresponding submit description files,\\n"""		3141956	0					
ANR	3142174	ExpressionStatement	"printf ( ""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"" )"		3141956	24					
ANR	3142175	CallExpression	"printf ( ""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"" )"		3141956	0					
ANR	3142176	Callee	printf		3141956	0					
ANR	3142177	Identifier	printf		3141956	0					
ANR	3142178	ArgumentList	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		3141956	1					
ANR	3142179	Argument	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		3141956	0					
ANR	3142180	PrimaryExpression	"""   so as to utilize Condor's mechanism for sequencing job submissions.\\n"""		3141956	0					
ANR	3142181	ExpressionStatement	"printf ( ""   Original files are backed up with the suffix \\"".OLD\\"".\\n"" )"		3141956	25					
ANR	3142182	CallExpression	"printf ( ""   Original files are backed up with the suffix \\"".OLD\\"".\\n"" )"		3141956	0					
ANR	3142183	Callee	printf		3141956	0					
ANR	3142184	Identifier	printf		3141956	0					
ANR	3142185	ArgumentList	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		3141956	1					
ANR	3142186	Argument	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		3141956	0					
ANR	3142187	PrimaryExpression	"""   Original files are backed up with the suffix \\"".OLD\\"".\\n"""		3141956	0					
ANR	3142188	ExpressionStatement	"printf ( ""\\n"" )"		3141956	26					
ANR	3142189	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142190	Callee	printf		3141956	0					
ANR	3142191	Identifier	printf		3141956	0					
ANR	3142192	ArgumentList	"""\\n"""		3141956	1					
ANR	3142193	Argument	"""\\n"""		3141956	0					
ANR	3142194	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142195	ExpressionStatement	"printf ( ""TYPICAL USAGE\\n"" )"		3141956	27					
ANR	3142196	CallExpression	"printf ( ""TYPICAL USAGE\\n"" )"		3141956	0					
ANR	3142197	Callee	printf		3141956	0					
ANR	3142198	Identifier	printf		3141956	0					
ANR	3142199	ArgumentList	"""TYPICAL USAGE\\n"""		3141956	1					
ANR	3142200	Argument	"""TYPICAL USAGE\\n"""		3141956	0					
ANR	3142201	PrimaryExpression	"""TYPICAL USAGE\\n"""		3141956	0					
ANR	3142202	ExpressionStatement	"printf ( ""   First run\\n"" )"		3141956	28					
ANR	3142203	CallExpression	"printf ( ""   First run\\n"" )"		3141956	0					
ANR	3142204	Callee	printf		3141956	0					
ANR	3142205	Identifier	printf		3141956	0					
ANR	3142206	ArgumentList	"""   First run\\n"""		3141956	1					
ANR	3142207	Argument	"""   First run\\n"""		3141956	0					
ANR	3142208	PrimaryExpression	"""   First run\\n"""		3141956	0					
ANR	3142209	ExpressionStatement	"printf ( ""         prio foo.dag\\n"" )"		3141956	29					
ANR	3142210	CallExpression	"printf ( ""         prio foo.dag\\n"" )"		3141956	0					
ANR	3142211	Callee	printf		3141956	0					
ANR	3142212	Identifier	printf		3141956	0					
ANR	3142213	ArgumentList	"""         prio foo.dag\\n"""		3141956	1					
ANR	3142214	Argument	"""         prio foo.dag\\n"""		3141956	0					
ANR	3142215	PrimaryExpression	"""         prio foo.dag\\n"""		3141956	0					
ANR	3142216	ExpressionStatement	"printf ( ""   then run\\n"" )"		3141956	30					
ANR	3142217	CallExpression	"printf ( ""   then run\\n"" )"		3141956	0					
ANR	3142218	Callee	printf		3141956	0					
ANR	3142219	Identifier	printf		3141956	0					
ANR	3142220	ArgumentList	"""   then run\\n"""		3141956	1					
ANR	3142221	Argument	"""   then run\\n"""		3141956	0					
ANR	3142222	PrimaryExpression	"""   then run\\n"""		3141956	0					
ANR	3142223	ExpressionStatement	"printf ( ""         condor_submit_dag foo.dag\\n"" )"		3141956	31					
ANR	3142224	CallExpression	"printf ( ""         condor_submit_dag foo.dag\\n"" )"		3141956	0					
ANR	3142225	Callee	printf		3141956	0					
ANR	3142226	Identifier	printf		3141956	0					
ANR	3142227	ArgumentList	"""         condor_submit_dag foo.dag\\n"""		3141956	1					
ANR	3142228	Argument	"""         condor_submit_dag foo.dag\\n"""		3141956	0					
ANR	3142229	PrimaryExpression	"""         condor_submit_dag foo.dag\\n"""		3141956	0					
ANR	3142230	ExpressionStatement	"printf ( ""   Do not use the -maxjobs option for condor_submit_dag.\\n"" )"		3141956	32					
ANR	3142231	CallExpression	"printf ( ""   Do not use the -maxjobs option for condor_submit_dag.\\n"" )"		3141956	0					
ANR	3142232	Callee	printf		3141956	0					
ANR	3142233	Identifier	printf		3141956	0					
ANR	3142234	ArgumentList	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		3141956	1					
ANR	3142235	Argument	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		3141956	0					
ANR	3142236	PrimaryExpression	"""   Do not use the -maxjobs option for condor_submit_dag.\\n"""		3141956	0					
ANR	3142237	ExpressionStatement	"printf ( ""\\n"" )"		3141956	33					
ANR	3142238	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142239	Callee	printf		3141956	0					
ANR	3142240	Identifier	printf		3141956	0					
ANR	3142241	ArgumentList	"""\\n"""		3141956	1					
ANR	3142242	Argument	"""\\n"""		3141956	0					
ANR	3142243	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142244	ExpressionStatement	"printf ( ""OPTIONS\\n"" )"		3141956	34					
ANR	3142245	CallExpression	"printf ( ""OPTIONS\\n"" )"		3141956	0					
ANR	3142246	Callee	printf		3141956	0					
ANR	3142247	Identifier	printf		3141956	0					
ANR	3142248	ArgumentList	"""OPTIONS\\n"""		3141956	1					
ANR	3142249	Argument	"""OPTIONS\\n"""		3141956	0					
ANR	3142250	PrimaryExpression	"""OPTIONS\\n"""		3141956	0					
ANR	3142251	ExpressionStatement	"printf ( ""\\n"" )"		3141956	35					
ANR	3142252	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142253	Callee	printf		3141956	0					
ANR	3142254	Identifier	printf		3141956	0					
ANR	3142255	ArgumentList	"""\\n"""		3141956	1					
ANR	3142256	Argument	"""\\n"""		3141956	0					
ANR	3142257	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142258	ExpressionStatement	"printf ( ""   -s               does not instrument the submit description file of each\\n"" )"		3141956	36					
ANR	3142259	CallExpression	"printf ( ""   -s               does not instrument the submit description file of each\\n"" )"		3141956	0					
ANR	3142260	Callee	printf		3141956	0					
ANR	3142261	Identifier	printf		3141956	0					
ANR	3142262	ArgumentList	"""   -s               does not instrument the submit description file of each\\n"""		3141956	1					
ANR	3142263	Argument	"""   -s               does not instrument the submit description file of each\\n"""		3141956	0					
ANR	3142264	PrimaryExpression	"""   -s               does not instrument the submit description file of each\\n"""		3141956	0					
ANR	3142265	ExpressionStatement	"printf ( ""                    job to add there a JOBPRIORITY macro.\\n"" )"		3141956	37					
ANR	3142266	CallExpression	"printf ( ""                    job to add there a JOBPRIORITY macro.\\n"" )"		3141956	0					
ANR	3142267	Callee	printf		3141956	0					
ANR	3142268	Identifier	printf		3141956	0					
ANR	3142269	ArgumentList	"""                    job to add there a JOBPRIORITY macro.\\n"""		3141956	1					
ANR	3142270	Argument	"""                    job to add there a JOBPRIORITY macro.\\n"""		3141956	0					
ANR	3142271	PrimaryExpression	"""                    job to add there a JOBPRIORITY macro.\\n"""		3141956	0					
ANR	3142272	ExpressionStatement	"printf ( ""\\n"" )"		3141956	38					
ANR	3142273	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142274	Callee	printf		3141956	0					
ANR	3142275	Identifier	printf		3141956	0					
ANR	3142276	ArgumentList	"""\\n"""		3141956	1					
ANR	3142277	Argument	"""\\n"""		3141956	0					
ANR	3142278	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142279	ExpressionStatement	"printf ( ""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"" )"		3141956	39					
ANR	3142280	CallExpression	"printf ( ""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"" )"		3141956	0					
ANR	3142281	Callee	printf		3141956	0					
ANR	3142282	Identifier	printf		3141956	0					
ANR	3142283	ArgumentList	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		3141956	1					
ANR	3142284	Argument	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		3141956	0					
ANR	3142285	PrimaryExpression	"""   -p OUTfile.prio  saves a list of job names in the order from the highest\\n"""		3141956	0					
ANR	3142286	ExpressionStatement	"printf ( ""                    priority one to the lowest priority one.\\n"" )"		3141956	40					
ANR	3142287	CallExpression	"printf ( ""                    priority one to the lowest priority one.\\n"" )"		3141956	0					
ANR	3142288	Callee	printf		3141956	0					
ANR	3142289	Identifier	printf		3141956	0					
ANR	3142290	ArgumentList	"""                    priority one to the lowest priority one.\\n"""		3141956	1					
ANR	3142291	Argument	"""                    priority one to the lowest priority one.\\n"""		3141956	0					
ANR	3142292	PrimaryExpression	"""                    priority one to the lowest priority one.\\n"""		3141956	0					
ANR	3142293	ExpressionStatement	"printf ( ""\\n"" )"		3141956	41					
ANR	3142294	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142295	Callee	printf		3141956	0					
ANR	3142296	Identifier	printf		3141956	0					
ANR	3142297	ArgumentList	"""\\n"""		3141956	1					
ANR	3142298	Argument	"""\\n"""		3141956	0					
ANR	3142299	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142300	ExpressionStatement	"printf ( ""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"" )"		3141956	42					
ANR	3142301	CallExpression	"printf ( ""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"" )"		3141956	0					
ANR	3142302	Callee	printf		3141956	0					
ANR	3142303	Identifier	printf		3141956	0					
ANR	3142304	ArgumentList	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		3141956	1					
ANR	3142305	Argument	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		3141956	0					
ANR	3142306	PrimaryExpression	"""   -e OUTfile.elig  saves the eligibility plot when jobs are executed in\\n"""		3141956	0					
ANR	3142307	ExpressionStatement	"printf ( ""                    the order of the priorities.\\n"" )"		3141956	43					
ANR	3142308	CallExpression	"printf ( ""                    the order of the priorities.\\n"" )"		3141956	0					
ANR	3142309	Callee	printf		3141956	0					
ANR	3142310	Identifier	printf		3141956	0					
ANR	3142311	ArgumentList	"""                    the order of the priorities.\\n"""		3141956	1					
ANR	3142312	Argument	"""                    the order of the priorities.\\n"""		3141956	0					
ANR	3142313	PrimaryExpression	"""                    the order of the priorities.\\n"""		3141956	0					
ANR	3142314	ExpressionStatement	"printf ( ""\\n"" )"		3141956	44					
ANR	3142315	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142316	Callee	printf		3141956	0					
ANR	3142317	Identifier	printf		3141956	0					
ANR	3142318	ArgumentList	"""\\n"""		3141956	1					
ANR	3142319	Argument	"""\\n"""		3141956	0					
ANR	3142320	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142321	ExpressionStatement	"printf ( ""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"" )"		3141956	45					
ANR	3142322	CallExpression	"printf ( ""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"" )"		3141956	0					
ANR	3142323	Callee	printf		3141956	0					
ANR	3142324	Identifier	printf		3141956	0					
ANR	3142325	ArgumentList	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		3141956	1					
ANR	3142326	Argument	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		3141956	0					
ANR	3142327	PrimaryExpression	"""   -g OUTfile.dot   saves the dag in the DOT format for GraphViz.\\n"""		3141956	0					
ANR	3142328	ExpressionStatement	"printf ( ""\\n"" )"		3141956	46					
ANR	3142329	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142330	Callee	printf		3141956	0					
ANR	3142331	Identifier	printf		3141956	0					
ANR	3142332	ArgumentList	"""\\n"""		3141956	1					
ANR	3142333	Argument	"""\\n"""		3141956	0					
ANR	3142334	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142335	ExpressionStatement	"printf ( ""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"" )"		3141956	47					
ANR	3142336	CallExpression	"printf ( ""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"" )"		3141956	0					
ANR	3142337	Callee	printf		3141956	0					
ANR	3142338	Identifier	printf		3141956	0					
ANR	3142339	ArgumentList	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		3141956	1					
ANR	3142340	Argument	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		3141956	0					
ANR	3142341	PrimaryExpression	"""   -r OUTfileS.dot  saves the \\""superdag\\"" in the DOT format for GraphViz.\\n"""		3141956	0					
ANR	3142342	ExpressionStatement	"printf ( ""\\n"" )"		3141956	48					
ANR	3142343	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142344	Callee	printf		3141956	0					
ANR	3142345	Identifier	printf		3141956	0					
ANR	3142346	ArgumentList	"""\\n"""		3141956	1					
ANR	3142347	Argument	"""\\n"""		3141956	0					
ANR	3142348	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142349	ExpressionStatement	"printf ( ""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"" )"		3141956	49					
ANR	3142350	CallExpression	"printf ( ""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"" )"		3141956	0					
ANR	3142351	Callee	printf		3141956	0					
ANR	3142352	Identifier	printf		3141956	0					
ANR	3142353	ArgumentList	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		3141956	1					
ANR	3142354	Argument	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		3141956	0					
ANR	3142355	PrimaryExpression	"""   -c OUTfileC      saves each component of the dag in the DOT format for\\n"""		3141956	0					
ANR	3142356	ExpressionStatement	"printf ( ""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"" )"		3141956	50					
ANR	3142357	CallExpression	"printf ( ""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"" )"		3141956	0					
ANR	3142358	Callee	printf		3141956	0					
ANR	3142359	Identifier	printf		3141956	0					
ANR	3142360	ArgumentList	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		3141956	1					
ANR	3142361	Argument	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		3141956	0					
ANR	3142362	PrimaryExpression	"""                    GraphViz with an appended sequence number and \\"".dot\\"".\\n"""		3141956	0					
ANR	3142363	ExpressionStatement	"printf ( ""\\n"" )"		3141956	51					
ANR	3142364	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142365	Callee	printf		3141956	0					
ANR	3142366	Identifier	printf		3141956	0					
ANR	3142367	ArgumentList	"""\\n"""		3141956	1					
ANR	3142368	Argument	"""\\n"""		3141956	0					
ANR	3142369	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142370	ExpressionStatement	"printf ( ""AUTHOR\\n"" )"		3141956	52					
ANR	3142371	CallExpression	"printf ( ""AUTHOR\\n"" )"		3141956	0					
ANR	3142372	Callee	printf		3141956	0					
ANR	3142373	Identifier	printf		3141956	0					
ANR	3142374	ArgumentList	"""AUTHOR\\n"""		3141956	1					
ANR	3142375	Argument	"""AUTHOR\\n"""		3141956	0					
ANR	3142376	PrimaryExpression	"""AUTHOR\\n"""		3141956	0					
ANR	3142377	ExpressionStatement	"printf ( ""   Grzegorz Malewicz\\n"" )"		3141956	53					
ANR	3142378	CallExpression	"printf ( ""   Grzegorz Malewicz\\n"" )"		3141956	0					
ANR	3142379	Callee	printf		3141956	0					
ANR	3142380	Identifier	printf		3141956	0					
ANR	3142381	ArgumentList	"""   Grzegorz Malewicz\\n"""		3141956	1					
ANR	3142382	Argument	"""   Grzegorz Malewicz\\n"""		3141956	0					
ANR	3142383	PrimaryExpression	"""   Grzegorz Malewicz\\n"""		3141956	0					
ANR	3142384	ExpressionStatement	"printf ( ""\\n"" )"		3141956	54					
ANR	3142385	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142386	Callee	printf		3141956	0					
ANR	3142387	Identifier	printf		3141956	0					
ANR	3142388	ArgumentList	"""\\n"""		3141956	1					
ANR	3142389	Argument	"""\\n"""		3141956	0					
ANR	3142390	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142391	ExpressionStatement	"printf ( ""HISTORY\\n"" )"		3141956	55					
ANR	3142392	CallExpression	"printf ( ""HISTORY\\n"" )"		3141956	0					
ANR	3142393	Callee	printf		3141956	0					
ANR	3142394	Identifier	printf		3141956	0					
ANR	3142395	ArgumentList	"""HISTORY\\n"""		3141956	1					
ANR	3142396	Argument	"""HISTORY\\n"""		3141956	0					
ANR	3142397	PrimaryExpression	"""HISTORY\\n"""		3141956	0					
ANR	3142398	ExpressionStatement	"printf ( ""   Implemented during the summer of 2005. Released in October of 2005\\n"" )"		3141956	56					
ANR	3142399	CallExpression	"printf ( ""   Implemented during the summer of 2005. Released in October of 2005\\n"" )"		3141956	0					
ANR	3142400	Callee	printf		3141956	0					
ANR	3142401	Identifier	printf		3141956	0					
ANR	3142402	ArgumentList	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		3141956	1					
ANR	3142403	Argument	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		3141956	0					
ANR	3142404	PrimaryExpression	"""   Implemented during the summer of 2005. Released in October of 2005\\n"""		3141956	0					
ANR	3142405	ExpressionStatement	"printf ( ""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"" )"		3141956	57					
ANR	3142406	CallExpression	"printf ( ""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"" )"		3141956	0					
ANR	3142407	Callee	printf		3141956	0					
ANR	3142408	Identifier	printf		3141956	0					
ANR	3142409	ArgumentList	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		3141956	1					
ANR	3142410	Argument	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		3141956	0					
ANR	3142411	PrimaryExpression	"""   within the Condor Project (http://www.cs.wisc.edu/condor)\\n"""		3141956	0					
ANR	3142412	ExpressionStatement	"printf ( ""\\n"" )"		3141956	58					
ANR	3142413	CallExpression	"printf ( ""\\n"" )"		3141956	0					
ANR	3142414	Callee	printf		3141956	0					
ANR	3142415	Identifier	printf		3141956	0					
ANR	3142416	ArgumentList	"""\\n"""		3141956	1					
ANR	3142417	Argument	"""\\n"""		3141956	0					
ANR	3142418	PrimaryExpression	"""\\n"""		3141956	0					
ANR	3142419	ExpressionStatement	"printf ( ""ACKNOWLEDGEMENT\\n"" )"		3141956	59					
ANR	3142420	CallExpression	"printf ( ""ACKNOWLEDGEMENT\\n"" )"		3141956	0					
ANR	3142421	Callee	printf		3141956	0					
ANR	3142422	Identifier	printf		3141956	0					
ANR	3142423	ArgumentList	"""ACKNOWLEDGEMENT\\n"""		3141956	1					
ANR	3142424	Argument	"""ACKNOWLEDGEMENT\\n"""		3141956	0					
ANR	3142425	PrimaryExpression	"""ACKNOWLEDGEMENT\\n"""		3141956	0					
ANR	3142426	ExpressionStatement	"printf ( ""   The work of the author was supported in part by the National Science\\n"" )"		3141956	60					
ANR	3142427	CallExpression	"printf ( ""   The work of the author was supported in part by the National Science\\n"" )"		3141956	0					
ANR	3142428	Callee	printf		3141956	0					
ANR	3142429	Identifier	printf		3141956	0					
ANR	3142430	ArgumentList	"""   The work of the author was supported in part by the National Science\\n"""		3141956	1					
ANR	3142431	Argument	"""   The work of the author was supported in part by the National Science\\n"""		3141956	0					
ANR	3142432	PrimaryExpression	"""   The work of the author was supported in part by the National Science\\n"""		3141956	0					
ANR	3142433	ExpressionStatement	"printf ( ""   Foundation grant ITR-800864, and was performed during the author's\\n"" )"		3141956	61					
ANR	3142434	CallExpression	"printf ( ""   Foundation grant ITR-800864, and was performed during the author's\\n"" )"		3141956	0					
ANR	3142435	Callee	printf		3141956	0					
ANR	3142436	Identifier	printf		3141956	0					
ANR	3142437	ArgumentList	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		3141956	1					
ANR	3142438	Argument	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		3141956	0					
ANR	3142439	PrimaryExpression	"""   Foundation grant ITR-800864, and was performed during the author's\\n"""		3141956	0					
ANR	3142440	ExpressionStatement	"printf ( ""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"" )"		3141956	62					
ANR	3142441	CallExpression	"printf ( ""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"" )"		3141956	0					
ANR	3142442	Callee	printf		3141956	0					
ANR	3142443	Identifier	printf		3141956	0					
ANR	3142444	ArgumentList	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		3141956	1					
ANR	3142445	Argument	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		3141956	0					
ANR	3142446	PrimaryExpression	"""   summer 2005 visit to the Division of Mathematics and Computer Science,\\n"""		3141956	0					
ANR	3142447	ExpressionStatement	"printf ( ""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"" )"		3141956	63					
ANR	3142448	CallExpression	"printf ( ""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"" )"		3141956	0					
ANR	3142449	Callee	printf		3141956	0					
ANR	3142450	Identifier	printf		3141956	0					
ANR	3142451	ArgumentList	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		3141956	1					
ANR	3142452	Argument	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		3141956	0					
ANR	3142453	PrimaryExpression	"""   Argonne National Laboratory (http://www.mcs.anl.gov).\\n"""		3141956	0					
ANR	3142454	ReturnStatement	return - 1 ;		3141956	64					
ANR	3142455	UnaryOperationExpression	- 1		3141956	0					
ANR	3142456	UnaryOperator	-		3141956	0					
ANR	3142457	PrimaryExpression	1		3141956	1					
ANR	3142458	ExpressionStatement			3141956	9					
ANR	3142459	ForStatement	for ( i = 0 ; i < argc ; i ++ )		3141956	10					
ANR	3142460	ForInit	i = 0 ;		3141956	0					
ANR	3142461	AssignmentExpression	i = 0		3141956	0		=			
ANR	3142462	Identifier	i		3141956	0					
ANR	3142463	PrimaryExpression	0		3141956	1					
ANR	3142464	Condition	i < argc		3141956	1					
ANR	3142465	RelationalExpression	i < argc		3141956	0		<			
ANR	3142466	Identifier	i		3141956	0					
ANR	3142467	Identifier	argc		3141956	1					
ANR	3142468	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3142469	Identifier	i		3141956	0					
ANR	3142470	IncDec	++		3141956	1					
ANR	3142471	CompoundStatement		86:26:4032:4032	3141956	3					
ANR	3142472	IfStatement	if ( MAX_ARGV_LEN - 5 < strlen ( argv [ i ] ) )		3141956	0					
ANR	3142473	Condition	MAX_ARGV_LEN - 5 < strlen ( argv [ i ] )		3141956	0					
ANR	3142474	RelationalExpression	MAX_ARGV_LEN - 5 < strlen ( argv [ i ] )		3141956	0		<			
ANR	3142475	AdditiveExpression	MAX_ARGV_LEN - 5		3141956	0		-			
ANR	3142476	Identifier	MAX_ARGV_LEN		3141956	0					
ANR	3142477	PrimaryExpression	5		3141956	1					
ANR	3142478	CallExpression	strlen ( argv [ i ] )		3141956	1					
ANR	3142479	Callee	strlen		3141956	0					
ANR	3142480	Identifier	strlen		3141956	0					
ANR	3142481	ArgumentList	argv [ i ]		3141956	1					
ANR	3142482	Argument	argv [ i ]		3141956	0					
ANR	3142483	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142484	Identifier	argv		3141956	0					
ANR	3142485	Identifier	i		3141956	1					
ANR	3142486	CompoundStatement		87:42:4076:4076	3141956	1					
ANR	3142487	ExpressionStatement	"alert ( """" )"		3141956	0					
ANR	3142488	CallExpression	"alert ( """" )"		3141956	0					
ANR	3142489	Callee	alert		3141956	0					
ANR	3142490	Identifier	alert		3141956	0					
ANR	3142491	ArgumentList	""""""		3141956	1					
ANR	3142492	Argument	""""""		3141956	0					
ANR	3142493	PrimaryExpression	""""""		3141956	0					
ANR	3142494	ExpressionStatement	"printf ( ""argument number %d exceeds %d characters\\n"" , i , MAX_ARGV_LEN - 5 )"		3141956	1					
ANR	3142495	CallExpression	"printf ( ""argument number %d exceeds %d characters\\n"" , i , MAX_ARGV_LEN - 5 )"		3141956	0					
ANR	3142496	Callee	printf		3141956	0					
ANR	3142497	Identifier	printf		3141956	0					
ANR	3142498	ArgumentList	"""argument number %d exceeds %d characters\\n"""		3141956	1					
ANR	3142499	Argument	"""argument number %d exceeds %d characters\\n"""		3141956	0					
ANR	3142500	PrimaryExpression	"""argument number %d exceeds %d characters\\n"""		3141956	0					
ANR	3142501	Argument	i		3141956	1					
ANR	3142502	Identifier	i		3141956	0					
ANR	3142503	Argument	MAX_ARGV_LEN - 5		3141956	2					
ANR	3142504	AdditiveExpression	MAX_ARGV_LEN - 5		3141956	0		-			
ANR	3142505	Identifier	MAX_ARGV_LEN		3141956	0					
ANR	3142506	PrimaryExpression	5		3141956	1					
ANR	3142507	ReturnStatement	return - 1 ;		3141956	2					
ANR	3142508	UnaryOperationExpression	- 1		3141956	0					
ANR	3142509	UnaryOperator	-		3141956	0					
ANR	3142510	PrimaryExpression	1		3141956	1					
ANR	3142511	ExpressionStatement			3141956	11					
ANR	3142512	ExpressionStatement	i = 1		3141956	12					
ANR	3142513	AssignmentExpression	i = 1		3141956	0		=			
ANR	3142514	Identifier	i		3141956	0					
ANR	3142515	PrimaryExpression	1		3141956	1					
ANR	3142516	IdentifierDeclStatement	bool argumSdf = true ;		3141956	13					
ANR	3142517	IdentifierDecl	argumSdf = true		3141956	0					
ANR	3142518	IdentifierDeclType	bool		3141956	0					
ANR	3142519	Identifier	argumSdf		3141956	1					
ANR	3142520	AssignmentExpression	argumSdf = true		3141956	2		=			
ANR	3142521	Identifier	true		3141956	0					
ANR	3142522	Identifier	true		3141956	1					
ANR	3142523	IdentifierDeclStatement	bool argumPrio = false ;		3141956	14					
ANR	3142524	IdentifierDecl	argumPrio = false		3141956	0					
ANR	3142525	IdentifierDeclType	bool		3141956	0					
ANR	3142526	Identifier	argumPrio		3141956	1					
ANR	3142527	AssignmentExpression	argumPrio = false		3141956	2		=			
ANR	3142528	Identifier	false		3141956	0					
ANR	3142529	Identifier	false		3141956	1					
ANR	3142530	IdentifierDeclStatement	bool argumElig = false ;		3141956	15					
ANR	3142531	IdentifierDecl	argumElig = false		3141956	0					
ANR	3142532	IdentifierDeclType	bool		3141956	0					
ANR	3142533	Identifier	argumElig		3141956	1					
ANR	3142534	AssignmentExpression	argumElig = false		3141956	2		=			
ANR	3142535	Identifier	false		3141956	0					
ANR	3142536	Identifier	false		3141956	1					
ANR	3142537	IdentifierDeclStatement	bool argumSupeRdag = false ;		3141956	16					
ANR	3142538	IdentifierDecl	argumSupeRdag = false		3141956	0					
ANR	3142539	IdentifierDeclType	bool		3141956	0					
ANR	3142540	Identifier	argumSupeRdag		3141956	1					
ANR	3142541	AssignmentExpression	argumSupeRdag = false		3141956	2		=			
ANR	3142542	Identifier	false		3141956	0					
ANR	3142543	Identifier	false		3141956	1					
ANR	3142544	IdentifierDeclStatement	bool argumDag = false ;		3141956	17					
ANR	3142545	IdentifierDecl	argumDag = false		3141956	0					
ANR	3142546	IdentifierDeclType	bool		3141956	0					
ANR	3142547	Identifier	argumDag		3141956	1					
ANR	3142548	AssignmentExpression	argumDag = false		3141956	2		=			
ANR	3142549	Identifier	false		3141956	0					
ANR	3142550	Identifier	false		3141956	1					
ANR	3142551	IdentifierDeclStatement	bool argumConstit = false ;		3141956	18					
ANR	3142552	IdentifierDecl	argumConstit = false		3141956	0					
ANR	3142553	IdentifierDeclType	bool		3141956	0					
ANR	3142554	Identifier	argumConstit		3141956	1					
ANR	3142555	AssignmentExpression	argumConstit = false		3141956	2		=			
ANR	3142556	Identifier	false		3141956	0					
ANR	3142557	Identifier	false		3141956	1					
ANR	3142558	IdentifierDeclStatement	char * fileNamePrio = NULL ;		3141956	19					
ANR	3142559	IdentifierDecl	* fileNamePrio = NULL		3141956	0					
ANR	3142560	IdentifierDeclType	char *		3141956	0					
ANR	3142561	Identifier	fileNamePrio		3141956	1					
ANR	3142562	AssignmentExpression	* fileNamePrio = NULL		3141956	2		=			
ANR	3142563	Identifier	NULL		3141956	0					
ANR	3142564	Identifier	NULL		3141956	1					
ANR	3142565	IdentifierDeclStatement	char * fileNameElig = NULL ;		3141956	20					
ANR	3142566	IdentifierDecl	* fileNameElig = NULL		3141956	0					
ANR	3142567	IdentifierDeclType	char *		3141956	0					
ANR	3142568	Identifier	fileNameElig		3141956	1					
ANR	3142569	AssignmentExpression	* fileNameElig = NULL		3141956	2		=			
ANR	3142570	Identifier	NULL		3141956	0					
ANR	3142571	Identifier	NULL		3141956	1					
ANR	3142572	IdentifierDeclStatement	char * fileNameSupeRdag = NULL ;		3141956	21					
ANR	3142573	IdentifierDecl	* fileNameSupeRdag = NULL		3141956	0					
ANR	3142574	IdentifierDeclType	char *		3141956	0					
ANR	3142575	Identifier	fileNameSupeRdag		3141956	1					
ANR	3142576	AssignmentExpression	* fileNameSupeRdag = NULL		3141956	2		=			
ANR	3142577	Identifier	NULL		3141956	0					
ANR	3142578	Identifier	NULL		3141956	1					
ANR	3142579	IdentifierDeclStatement	char * fileNameDag = NULL ;		3141956	22					
ANR	3142580	IdentifierDecl	* fileNameDag = NULL		3141956	0					
ANR	3142581	IdentifierDeclType	char *		3141956	0					
ANR	3142582	Identifier	fileNameDag		3141956	1					
ANR	3142583	AssignmentExpression	* fileNameDag = NULL		3141956	2		=			
ANR	3142584	Identifier	NULL		3141956	0					
ANR	3142585	Identifier	NULL		3141956	1					
ANR	3142586	IdentifierDeclStatement	char * fileNameConstit = NULL ;		3141956	23					
ANR	3142587	IdentifierDecl	* fileNameConstit = NULL		3141956	0					
ANR	3142588	IdentifierDeclType	char *		3141956	0					
ANR	3142589	Identifier	fileNameConstit		3141956	1					
ANR	3142590	AssignmentExpression	* fileNameConstit = NULL		3141956	2		=			
ANR	3142591	Identifier	NULL		3141956	0					
ANR	3142592	Identifier	NULL		3141956	1					
ANR	3142593	WhileStatement	while ( i < argc && '-' == argv [ i ] [ 0 ] )		3141956	24					
ANR	3142594	Condition	i < argc && '-' == argv [ i ] [ 0 ]		3141956	0					
ANR	3142595	AndExpression	i < argc && '-' == argv [ i ] [ 0 ]		3141956	0		&&			
ANR	3142596	RelationalExpression	i < argc		3141956	0		<			
ANR	3142597	Identifier	i		3141956	0					
ANR	3142598	Identifier	argc		3141956	1					
ANR	3142599	EqualityExpression	'-' == argv [ i ] [ 0 ]		3141956	1		==			
ANR	3142600	PrimaryExpression	'-'		3141956	0					
ANR	3142601	ArrayIndexing	argv [ i ] [ 0 ]		3141956	1					
ANR	3142602	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142603	Identifier	argv		3141956	0					
ANR	3142604	Identifier	i		3141956	1					
ANR	3142605	PrimaryExpression	0		3141956	1					
ANR	3142606	CompoundStatement		107:39:4563:4563	3141956	1					
ANR	3142607	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" ) )"		3141956	0					
ANR	3142608	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		3141956	0					
ANR	3142609	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		3141956	0		==			
ANR	3142610	PrimaryExpression	0		3141956	0					
ANR	3142611	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""s"" )"		3141956	1					
ANR	3142612	Callee	strcmp		3141956	0					
ANR	3142613	Identifier	strcmp		3141956	0					
ANR	3142614	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142615	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142616	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142617	UnaryOperator	&		3141956	0					
ANR	3142618	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142619	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142620	Identifier	argv		3141956	0					
ANR	3142621	Identifier	i		3141956	1					
ANR	3142622	PrimaryExpression	1		3141956	1					
ANR	3142623	Argument	"""s"""		3141956	1					
ANR	3142624	PrimaryExpression	"""s"""		3141956	0					
ANR	3142625	CompoundStatement		109:41:4647:4647	3141956	1					
ANR	3142626	ExpressionStatement	argumSdf = false		3141956	0					
ANR	3142627	AssignmentExpression	argumSdf = false		3141956	0		=			
ANR	3142628	Identifier	argumSdf		3141956	0					
ANR	3142629	Identifier	false		3141956	1					
ANR	3142630	ExpressionStatement	i ++		3141956	1					
ANR	3142631	PostIncDecOperationExpression	i ++		3141956	0					
ANR	3142632	Identifier	i		3141956	0					
ANR	3142633	IncDec	++		3141956	1					
ANR	3142634	ElseStatement	else		3141956	0					
ANR	3142635	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" ) )"		3141956	0					
ANR	3142636	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		3141956	0					
ANR	3142637	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		3141956	0		==			
ANR	3142638	PrimaryExpression	0		3141956	0					
ANR	3142639	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""p"" )"		3141956	1					
ANR	3142640	Callee	strcmp		3141956	0					
ANR	3142641	Identifier	strcmp		3141956	0					
ANR	3142642	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142643	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142644	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142645	UnaryOperator	&		3141956	0					
ANR	3142646	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142647	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142648	Identifier	argv		3141956	0					
ANR	3142649	Identifier	i		3141956	1					
ANR	3142650	PrimaryExpression	1		3141956	1					
ANR	3142651	Argument	"""p"""		3141956	1					
ANR	3142652	PrimaryExpression	"""p"""		3141956	0					
ANR	3142653	CompoundStatement		115:46:4779:4779	3141956	1					
ANR	3142654	ExpressionStatement	argumPrio = true		3141956	0					
ANR	3142655	AssignmentExpression	argumPrio = true		3141956	0		=			
ANR	3142656	Identifier	argumPrio		3141956	0					
ANR	3142657	Identifier	true		3141956	1					
ANR	3142658	ExpressionStatement	fileNamePrio = argv [ i + 1 ]		3141956	1					
ANR	3142659	AssignmentExpression	fileNamePrio = argv [ i + 1 ]		3141956	0		=			
ANR	3142660	Identifier	fileNamePrio		3141956	0					
ANR	3142661	ArrayIndexing	argv [ i + 1 ]		3141956	1					
ANR	3142662	Identifier	argv		3141956	0					
ANR	3142663	AdditiveExpression	i + 1		3141956	1		+			
ANR	3142664	Identifier	i		3141956	0					
ANR	3142665	PrimaryExpression	1		3141956	1					
ANR	3142666	ExpressionStatement	i += 2		3141956	2					
ANR	3142667	AssignmentExpression	i += 2		3141956	0		+=			
ANR	3142668	Identifier	i		3141956	0					
ANR	3142669	PrimaryExpression	2		3141956	1					
ANR	3142670	ElseStatement	else		3141956	0					
ANR	3142671	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" ) )"		3141956	0					
ANR	3142672	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		3141956	0					
ANR	3142673	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		3141956	0		==			
ANR	3142674	PrimaryExpression	0		3141956	0					
ANR	3142675	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""e"" )"		3141956	1					
ANR	3142676	Callee	strcmp		3141956	0					
ANR	3142677	Identifier	strcmp		3141956	0					
ANR	3142678	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142679	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142680	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142681	UnaryOperator	&		3141956	0					
ANR	3142682	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142683	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142684	Identifier	argv		3141956	0					
ANR	3142685	Identifier	i		3141956	1					
ANR	3142686	PrimaryExpression	1		3141956	1					
ANR	3142687	Argument	"""e"""		3141956	1					
ANR	3142688	PrimaryExpression	"""e"""		3141956	0					
ANR	3142689	CompoundStatement		122:46:4921:4921	3141956	1					
ANR	3142690	ExpressionStatement	argumElig = true		3141956	0					
ANR	3142691	AssignmentExpression	argumElig = true		3141956	0		=			
ANR	3142692	Identifier	argumElig		3141956	0					
ANR	3142693	Identifier	true		3141956	1					
ANR	3142694	ExpressionStatement	fileNameElig = argv [ i + 1 ]		3141956	1					
ANR	3142695	AssignmentExpression	fileNameElig = argv [ i + 1 ]		3141956	0		=			
ANR	3142696	Identifier	fileNameElig		3141956	0					
ANR	3142697	ArrayIndexing	argv [ i + 1 ]		3141956	1					
ANR	3142698	Identifier	argv		3141956	0					
ANR	3142699	AdditiveExpression	i + 1		3141956	1		+			
ANR	3142700	Identifier	i		3141956	0					
ANR	3142701	PrimaryExpression	1		3141956	1					
ANR	3142702	ExpressionStatement	i += 2		3141956	2					
ANR	3142703	AssignmentExpression	i += 2		3141956	0		+=			
ANR	3142704	Identifier	i		3141956	0					
ANR	3142705	PrimaryExpression	2		3141956	1					
ANR	3142706	ElseStatement	else		3141956	0					
ANR	3142707	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" ) )"		3141956	0					
ANR	3142708	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		3141956	0					
ANR	3142709	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		3141956	0		==			
ANR	3142710	PrimaryExpression	0		3141956	0					
ANR	3142711	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""g"" )"		3141956	1					
ANR	3142712	Callee	strcmp		3141956	0					
ANR	3142713	Identifier	strcmp		3141956	0					
ANR	3142714	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142715	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142716	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142717	UnaryOperator	&		3141956	0					
ANR	3142718	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142719	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142720	Identifier	argv		3141956	0					
ANR	3142721	Identifier	i		3141956	1					
ANR	3142722	PrimaryExpression	1		3141956	1					
ANR	3142723	Argument	"""g"""		3141956	1					
ANR	3142724	PrimaryExpression	"""g"""		3141956	0					
ANR	3142725	CompoundStatement		129:46:5066:5066	3141956	1					
ANR	3142726	ExpressionStatement	argumDag = true		3141956	0					
ANR	3142727	AssignmentExpression	argumDag = true		3141956	0		=			
ANR	3142728	Identifier	argumDag		3141956	0					
ANR	3142729	Identifier	true		3141956	1					
ANR	3142730	ExpressionStatement	fileNameDag = argv [ i + 1 ]		3141956	1					
ANR	3142731	AssignmentExpression	fileNameDag = argv [ i + 1 ]		3141956	0		=			
ANR	3142732	Identifier	fileNameDag		3141956	0					
ANR	3142733	ArrayIndexing	argv [ i + 1 ]		3141956	1					
ANR	3142734	Identifier	argv		3141956	0					
ANR	3142735	AdditiveExpression	i + 1		3141956	1		+			
ANR	3142736	Identifier	i		3141956	0					
ANR	3142737	PrimaryExpression	1		3141956	1					
ANR	3142738	ExpressionStatement	i += 2		3141956	2					
ANR	3142739	AssignmentExpression	i += 2		3141956	0		+=			
ANR	3142740	Identifier	i		3141956	0					
ANR	3142741	PrimaryExpression	2		3141956	1					
ANR	3142742	ElseStatement	else		3141956	0					
ANR	3142743	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" ) )"		3141956	0					
ANR	3142744	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		3141956	0					
ANR	3142745	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		3141956	0		==			
ANR	3142746	PrimaryExpression	0		3141956	0					
ANR	3142747	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""r"" )"		3141956	1					
ANR	3142748	Callee	strcmp		3141956	0					
ANR	3142749	Identifier	strcmp		3141956	0					
ANR	3142750	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142751	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142752	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142753	UnaryOperator	&		3141956	0					
ANR	3142754	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142755	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142756	Identifier	argv		3141956	0					
ANR	3142757	Identifier	i		3141956	1					
ANR	3142758	PrimaryExpression	1		3141956	1					
ANR	3142759	Argument	"""r"""		3141956	1					
ANR	3142760	PrimaryExpression	"""r"""		3141956	0					
ANR	3142761	CompoundStatement		136:46:5203:5203	3141956	1					
ANR	3142762	ExpressionStatement	argumSupeRdag = true		3141956	0					
ANR	3142763	AssignmentExpression	argumSupeRdag = true		3141956	0		=			
ANR	3142764	Identifier	argumSupeRdag		3141956	0					
ANR	3142765	Identifier	true		3141956	1					
ANR	3142766	ExpressionStatement	fileNameSupeRdag = argv [ i + 1 ]		3141956	1					
ANR	3142767	AssignmentExpression	fileNameSupeRdag = argv [ i + 1 ]		3141956	0		=			
ANR	3142768	Identifier	fileNameSupeRdag		3141956	0					
ANR	3142769	ArrayIndexing	argv [ i + 1 ]		3141956	1					
ANR	3142770	Identifier	argv		3141956	0					
ANR	3142771	AdditiveExpression	i + 1		3141956	1		+			
ANR	3142772	Identifier	i		3141956	0					
ANR	3142773	PrimaryExpression	1		3141956	1					
ANR	3142774	ExpressionStatement	i += 2		3141956	2					
ANR	3142775	AssignmentExpression	i += 2		3141956	0		+=			
ANR	3142776	Identifier	i		3141956	0					
ANR	3142777	PrimaryExpression	2		3141956	1					
ANR	3142778	ElseStatement	else		3141956	0					
ANR	3142779	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" ) )"		3141956	0					
ANR	3142780	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		3141956	0					
ANR	3142781	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		3141956	0		==			
ANR	3142782	PrimaryExpression	0		3141956	0					
ANR	3142783	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""c"" )"		3141956	1					
ANR	3142784	Callee	strcmp		3141956	0					
ANR	3142785	Identifier	strcmp		3141956	0					
ANR	3142786	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142787	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142788	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142789	UnaryOperator	&		3141956	0					
ANR	3142790	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142791	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142792	Identifier	argv		3141956	0					
ANR	3142793	Identifier	i		3141956	1					
ANR	3142794	PrimaryExpression	1		3141956	1					
ANR	3142795	Argument	"""c"""		3141956	1					
ANR	3142796	PrimaryExpression	"""c"""		3141956	0					
ANR	3142797	CompoundStatement		143:46:5355:5355	3141956	1					
ANR	3142798	ExpressionStatement	argumConstit = true		3141956	0					
ANR	3142799	AssignmentExpression	argumConstit = true		3141956	0		=			
ANR	3142800	Identifier	argumConstit		3141956	0					
ANR	3142801	Identifier	true		3141956	1					
ANR	3142802	ExpressionStatement	fileNameConstit = argv [ i + 1 ]		3141956	1					
ANR	3142803	AssignmentExpression	fileNameConstit = argv [ i + 1 ]		3141956	0		=			
ANR	3142804	Identifier	fileNameConstit		3141956	0					
ANR	3142805	ArrayIndexing	argv [ i + 1 ]		3141956	1					
ANR	3142806	Identifier	argv		3141956	0					
ANR	3142807	AdditiveExpression	i + 1		3141956	1		+			
ANR	3142808	Identifier	i		3141956	0					
ANR	3142809	PrimaryExpression	1		3141956	1					
ANR	3142810	ExpressionStatement	i += 2		3141956	2					
ANR	3142811	AssignmentExpression	i += 2		3141956	0		+=			
ANR	3142812	Identifier	i		3141956	0					
ANR	3142813	PrimaryExpression	2		3141956	1					
ANR	3142814	ElseStatement	else		3141956	0					
ANR	3142815	IfStatement	"if ( 0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" ) )"		3141956	0					
ANR	3142816	Condition	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		3141956	0					
ANR	3142817	EqualityExpression	"0 == strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		3141956	0		==			
ANR	3142818	PrimaryExpression	0		3141956	0					
ANR	3142819	CallExpression	"strcmp ( & ( argv [ i ] [ 1 ] ) , ""usage"" )"		3141956	1					
ANR	3142820	Callee	strcmp		3141956	0					
ANR	3142821	Identifier	strcmp		3141956	0					
ANR	3142822	ArgumentList	& ( argv [ i ] [ 1 ] )		3141956	1					
ANR	3142823	Argument	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142824	UnaryOperationExpression	& ( argv [ i ] [ 1 ] )		3141956	0					
ANR	3142825	UnaryOperator	&		3141956	0					
ANR	3142826	ArrayIndexing	argv [ i ] [ 1 ]		3141956	1					
ANR	3142827	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142828	Identifier	argv		3141956	0					
ANR	3142829	Identifier	i		3141956	1					
ANR	3142830	PrimaryExpression	1		3141956	1					
ANR	3142831	Argument	"""usage"""		3141956	1					
ANR	3142832	PrimaryExpression	"""usage"""		3141956	0					
ANR	3142833	CompoundStatement		150:50:5517:5517	3141956	1					
ANR	3142834	GotoStatement	goto usage ;		3141956	0					
ANR	3142835	Identifier	usage		3141956	0					
ANR	3142836	ElseStatement	else		3141956	0					
ANR	3142837	CompoundStatement		154:8:5549:5549	3141956	0					
ANR	3142838	ExpressionStatement	"printf ( ""An unrecognized argument %s\\n"" , argv [ i ] )"		3141956	0					
ANR	3142839	CallExpression	"printf ( ""An unrecognized argument %s\\n"" , argv [ i ] )"		3141956	0					
ANR	3142840	Callee	printf		3141956	0					
ANR	3142841	Identifier	printf		3141956	0					
ANR	3142842	ArgumentList	"""An unrecognized argument %s\\n"""		3141956	1					
ANR	3142843	Argument	"""An unrecognized argument %s\\n"""		3141956	0					
ANR	3142844	PrimaryExpression	"""An unrecognized argument %s\\n"""		3141956	0					
ANR	3142845	Argument	argv [ i ]		3141956	1					
ANR	3142846	ArrayIndexing	argv [ i ]		3141956	0					
ANR	3142847	Identifier	argv		3141956	0					
ANR	3142848	Identifier	i		3141956	1					
ANR	3142849	ThrowStatement	"throw ""prio, unrecognized argument"" ;"		3141956	1					
ANR	3142850	PrimaryExpression	"""prio, unrecognized argument"""		3141956	0					
ANR	3142851	ExpressionStatement			3141956	1					
ANR	3142852	ExpressionStatement			3141956	25					
ANR	3142853	IfStatement	if ( i != argc - 1 )		3141956	26					
ANR	3142854	Condition	i != argc - 1		3141956	0					
ANR	3142855	EqualityExpression	i != argc - 1		3141956	0		!=			
ANR	3142856	Identifier	i		3141956	0					
ANR	3142857	AdditiveExpression	argc - 1		3141956	1		-			
ANR	3142858	Identifier	argc		3141956	0					
ANR	3142859	PrimaryExpression	1		3141956	1					
ANR	3142860	ThrowStatement	"throw ""prio, missing dagman file name"" ;"		3141956	1					
ANR	3142861	PrimaryExpression	"""prio, missing dagman file name"""		3141956	0					
ANR	3142862	IdentifierDeclStatement	char * fileNameDagman = argv [ i ] ;		3141956	27					
ANR	3142863	IdentifierDecl	* fileNameDagman = argv [ i ]		3141956	0					
ANR	3142864	IdentifierDeclType	char *		3141956	0					
ANR	3142865	Identifier	fileNameDagman		3141956	1					
ANR	3142866	AssignmentExpression	* fileNameDagman = argv [ i ]		3141956	2		=			
ANR	3142867	Identifier	fileNameDagman		3141956	0					
ANR	3142868	ArrayIndexing	argv [ i ]		3141956	1					
ANR	3142869	Identifier	argv		3141956	0					
ANR	3142870	Identifier	i		3141956	1					
ANR	3142871	IfStatement	if ( argumPrio )		3141956	28					
ANR	3142872	Condition	argumPrio		3141956	0					
ANR	3142873	Identifier	argumPrio		3141956	0					
ANR	3142874	CompoundStatement		169:18:5934:5934	3141956	1					
ANR	3142875	ExpressionStatement	"fPrio = fopen ( fileNamePrio , ""wt"" )"		3141956	0					
ANR	3142876	AssignmentExpression	"fPrio = fopen ( fileNamePrio , ""wt"" )"		3141956	0		=			
ANR	3142877	Identifier	fPrio		3141956	0					
ANR	3142878	CallExpression	"fopen ( fileNamePrio , ""wt"" )"		3141956	1					
ANR	3142879	Callee	fopen		3141956	0					
ANR	3142880	Identifier	fopen		3141956	0					
ANR	3142881	ArgumentList	fileNamePrio		3141956	1					
ANR	3142882	Argument	fileNamePrio		3141956	0					
ANR	3142883	Identifier	fileNamePrio		3141956	0					
ANR	3142884	Argument	"""wt"""		3141956	1					
ANR	3142885	PrimaryExpression	"""wt"""		3141956	0					
ANR	3142886	IfStatement	if ( NULL == fPrio )		3141956	1					
ANR	3142887	Condition	NULL == fPrio		3141956	0					
ANR	3142888	EqualityExpression	NULL == fPrio		3141956	0		==			
ANR	3142889	Identifier	NULL		3141956	0					
ANR	3142890	Identifier	fPrio		3141956	1					
ANR	3142891	ThrowStatement	"throw ""prio, priorities is NULL"" ;"		3141956	1					
ANR	3142892	PrimaryExpression	"""prio, priorities is NULL"""		3141956	0					
ANR	3142893	ExpressionStatement			3141956	29					
ANR	3142894	ExpressionStatement	"printf ( ""-- loading dagman file\\n"" )"		3141956	30					
ANR	3142895	CallExpression	"printf ( ""-- loading dagman file\\n"" )"		3141956	0					
ANR	3142896	Callee	printf		3141956	0					
ANR	3142897	Identifier	printf		3141956	0					
ANR	3142898	ArgumentList	"""-- loading dagman file\\n"""		3141956	1					
ANR	3142899	Argument	"""-- loading dagman file\\n"""		3141956	0					
ANR	3142900	PrimaryExpression	"""-- loading dagman file\\n"""		3141956	0					
ANR	3142901	IdentifierDeclStatement	DagmanDag g ( fileNameDagman ) ;		3141956	31					
ANR	3142902	IdentifierDecl	g ( fileNameDagman )		3141956	0					
ANR	3142903	IdentifierDeclType	DagmanDag		3141956	0					
ANR	3142904	Identifier	g		3141956	1					
ANR	3142905	Identifier	fileNameDagman		3141956	2					
ANR	3142906	IfStatement	if ( argumDag )		3141956	32					
ANR	3142907	Condition	argumDag		3141956	0					
ANR	3142908	Identifier	argumDag		3141956	0					
ANR	3142909	CompoundStatement		181:17:6147:6147	3141956	1					
ANR	3142910	ExpressionStatement	"printf ( ""-- saving dag as dot\\n"" )"		3141956	0					
ANR	3142911	CallExpression	"printf ( ""-- saving dag as dot\\n"" )"		3141956	0					
ANR	3142912	Callee	printf		3141956	0					
ANR	3142913	Identifier	printf		3141956	0					
ANR	3142914	ArgumentList	"""-- saving dag as dot\\n"""		3141956	1					
ANR	3142915	Argument	"""-- saving dag as dot\\n"""		3141956	0					
ANR	3142916	PrimaryExpression	"""-- saving dag as dot\\n"""		3141956	0					
ANR	3142917	ExpressionStatement	g . saveAsDot ( fileNameDag )		3141956	1					
ANR	3142918	CallExpression	g . saveAsDot ( fileNameDag )		3141956	0					
ANR	3142919	Callee	g . saveAsDot		3141956	0					
ANR	3142920	MemberAccess	g . saveAsDot		3141956	0					
ANR	3142921	Identifier	g		3141956	0					
ANR	3142922	Identifier	saveAsDot		3141956	1					
ANR	3142923	ArgumentList	fileNameDag		3141956	1					
ANR	3142924	Argument	fileNameDag		3141956	0					
ANR	3142925	Identifier	fileNameDag		3141956	0					
ANR	3142926	ExpressionStatement			3141956	33					
ANR	3142927	ExpressionStatement	"printf ( ""-- decomposing dag\\n"" )"		3141956	34					
ANR	3142928	CallExpression	"printf ( ""-- decomposing dag\\n"" )"		3141956	0					
ANR	3142929	Callee	printf		3141956	0					
ANR	3142930	Identifier	printf		3141956	0					
ANR	3142931	ArgumentList	"""-- decomposing dag\\n"""		3141956	1					
ANR	3142932	Argument	"""-- decomposing dag\\n"""		3141956	0					
ANR	3142933	PrimaryExpression	"""-- decomposing dag\\n"""		3141956	0					
ANR	3142934	IdentifierDeclStatement	Superdag superdag ( g ) ;		3141956	35					
ANR	3142935	IdentifierDecl	superdag ( g )		3141956	0					
ANR	3142936	IdentifierDeclType	Superdag		3141956	0					
ANR	3142937	Identifier	superdag		3141956	1					
ANR	3142938	Identifier	g		3141956	2					
ANR	3142939	IfStatement	if ( argumSupeRdag )		3141956	36					
ANR	3142940	Condition	argumSupeRdag		3141956	0					
ANR	3142941	Identifier	argumSupeRdag		3141956	0					
ANR	3142942	CompoundStatement		196:22:6379:6379	3141956	1					
ANR	3142943	ExpressionStatement	"printf ( ""-- saving superdag\\n"" )"		3141956	0					
ANR	3142944	CallExpression	"printf ( ""-- saving superdag\\n"" )"		3141956	0					
ANR	3142945	Callee	printf		3141956	0					
ANR	3142946	Identifier	printf		3141956	0					
ANR	3142947	ArgumentList	"""-- saving superdag\\n"""		3141956	1					
ANR	3142948	Argument	"""-- saving superdag\\n"""		3141956	0					
ANR	3142949	PrimaryExpression	"""-- saving superdag\\n"""		3141956	0					
ANR	3142950	ExpressionStatement	superdag . saveSuperdagAsDot ( fileNameSupeRdag )		3141956	1					
ANR	3142951	CallExpression	superdag . saveSuperdagAsDot ( fileNameSupeRdag )		3141956	0					
ANR	3142952	Callee	superdag . saveSuperdagAsDot		3141956	0					
ANR	3142953	MemberAccess	superdag . saveSuperdagAsDot		3141956	0					
ANR	3142954	Identifier	superdag		3141956	0					
ANR	3142955	Identifier	saveSuperdagAsDot		3141956	1					
ANR	3142956	ArgumentList	fileNameSupeRdag		3141956	1					
ANR	3142957	Argument	fileNameSupeRdag		3141956	0					
ANR	3142958	Identifier	fileNameSupeRdag		3141956	0					
ANR	3142959	ExpressionStatement			3141956	37					
ANR	3142960	IdentifierDeclStatement	int * numParents = superdag . getParentCountVector ( ) ;		3141956	38					
ANR	3142961	IdentifierDecl	* numParents = superdag . getParentCountVector ( )		3141956	0					
ANR	3142962	IdentifierDeclType	int *		3141956	0					
ANR	3142963	Identifier	numParents		3141956	1					
ANR	3142964	AssignmentExpression	* numParents = superdag . getParentCountVector ( )		3141956	2		=			
ANR	3142965	Identifier	numParents		3141956	0					
ANR	3142966	CallExpression	superdag . getParentCountVector ( )		3141956	1					
ANR	3142967	Callee	superdag . getParentCountVector		3141956	0					
ANR	3142968	MemberAccess	superdag . getParentCountVector		3141956	0					
ANR	3142969	Identifier	superdag		3141956	0					
ANR	3142970	Identifier	getParentCountVector		3141956	1					
ANR	3142971	ArgumentList			3141956	1					
ANR	3142972	IdentifierDeclStatement	int numNodes = superdag . getNumNodes ( ) ;		3141956	39					
ANR	3142973	IdentifierDecl	numNodes = superdag . getNumNodes ( )		3141956	0					
ANR	3142974	IdentifierDeclType	int		3141956	0					
ANR	3142975	Identifier	numNodes		3141956	1					
ANR	3142976	AssignmentExpression	numNodes = superdag . getNumNodes ( )		3141956	2		=			
ANR	3142977	Identifier	numNodes		3141956	0					
ANR	3142978	CallExpression	superdag . getNumNodes ( )		3141956	1					
ANR	3142979	Callee	superdag . getNumNodes		3141956	0					
ANR	3142980	MemberAccess	superdag . getNumNodes		3141956	0					
ANR	3142981	Identifier	superdag		3141956	0					
ANR	3142982	Identifier	getNumNodes		3141956	1					
ANR	3142983	ArgumentList			3141956	1					
ANR	3142984	IdentifierDeclStatement	int seq = 0 ;		3141956	40					
ANR	3142985	IdentifierDecl	seq = 0		3141956	0					
ANR	3142986	IdentifierDeclType	int		3141956	0					
ANR	3142987	Identifier	seq		3141956	1					
ANR	3142988	AssignmentExpression	seq = 0		3141956	2		=			
ANR	3142989	Identifier	seq		3141956	0					
ANR	3142990	PrimaryExpression	0		3141956	1					
ANR	3142991	IdentifierDeclStatement	int * sked = new int [ g . getNumNodes ( ) ] ;		3141956	41					
ANR	3142992	IdentifierDecl	* sked = new int [ g . getNumNodes ( ) ]		3141956	0					
ANR	3142993	IdentifierDeclType	int *		3141956	0					
ANR	3142994	Identifier	sked		3141956	1					
ANR	3142995	AssignmentExpression	* sked = new int [ g . getNumNodes ( ) ]		3141956	2		=			
ANR	3142996	Identifier	sked		3141956	0					
ANR	3142997	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3142998	Callee	g . getNumNodes		3141956	0					
ANR	3142999	MemberAccess	g . getNumNodes		3141956	0					
ANR	3143000	Identifier	g		3141956	0					
ANR	3143001	Identifier	getNumNodes		3141956	1					
ANR	3143002	ArgumentList			3141956	1					
ANR	3143003	IfStatement	if ( NULL == sked )		3141956	42					
ANR	3143004	Condition	NULL == sked		3141956	0					
ANR	3143005	EqualityExpression	NULL == sked		3141956	0		==			
ANR	3143006	Identifier	NULL		3141956	0					
ANR	3143007	Identifier	sked		3141956	1					
ANR	3143008	ThrowStatement	"throw ""prio, sked is NULL"" ;"		3141956	1					
ANR	3143009	PrimaryExpression	"""prio, sked is NULL"""		3141956	0					
ANR	3143010	IdentifierDeclStatement	int idx = 0 ;		3141956	43					
ANR	3143011	IdentifierDecl	idx = 0		3141956	0					
ANR	3143012	IdentifierDeclType	int		3141956	0					
ANR	3143013	Identifier	idx		3141956	1					
ANR	3143014	AssignmentExpression	idx = 0		3141956	2		=			
ANR	3143015	Identifier	idx		3141956	0					
ANR	3143016	PrimaryExpression	0		3141956	1					
ANR	3143017	ExpressionStatement	"printf ( ""-- scheduling each constituent\\n"" )"		3141956	44					
ANR	3143018	CallExpression	"printf ( ""-- scheduling each constituent\\n"" )"		3141956	0					
ANR	3143019	Callee	printf		3141956	0					
ANR	3143020	Identifier	printf		3141956	0					
ANR	3143021	ArgumentList	"""-- scheduling each constituent\\n"""		3141956	1					
ANR	3143022	Argument	"""-- scheduling each constituent\\n"""		3141956	0					
ANR	3143023	PrimaryExpression	"""-- scheduling each constituent\\n"""		3141956	0					
ANR	3143024	IdentifierDeclStatement	int * * schedule ;		3141956	45					
ANR	3143025	IdentifierDecl	* * schedule		3141956	0					
ANR	3143026	IdentifierDeclType	int * *		3141956	0					
ANR	3143027	Identifier	schedule		3141956	1					
ANR	3143028	ExpressionStatement	schedule = new intPtr [ numNodes ]		3141956	46					
ANR	3143029	AssignmentExpression	schedule = new intPtr [ numNodes ]		3141956	0		=			
ANR	3143030	Identifier	schedule		3141956	0					
ANR	3143031	Identifier	numNodes		3141956	1					
ANR	3143032	IfStatement	if ( NULL == schedule )		3141956	47					
ANR	3143033	Condition	NULL == schedule		3141956	0					
ANR	3143034	EqualityExpression	NULL == schedule		3141956	0		==			
ANR	3143035	Identifier	NULL		3141956	0					
ANR	3143036	Identifier	schedule		3141956	1					
ANR	3143037	ThrowStatement	"throw ""prio, schedule is NULL"" ;"		3141956	1					
ANR	3143038	PrimaryExpression	"""prio, schedule is NULL"""		3141956	0					
ANR	3143039	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3141956	48					
ANR	3143040	ForInit	i = 0 ;		3141956	0					
ANR	3143041	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143042	Identifier	i		3141956	0					
ANR	3143043	PrimaryExpression	0		3141956	1					
ANR	3143044	Condition	i < numNodes		3141956	1					
ANR	3143045	RelationalExpression	i < numNodes		3141956	0		<			
ANR	3143046	Identifier	i		3141956	0					
ANR	3143047	Identifier	numNodes		3141956	1					
ANR	3143048	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143049	Identifier	i		3141956	0					
ANR	3143050	IncDec	++		3141956	1					
ANR	3143051	CompoundStatement		225:30:7118:7118	3141956	3					
ANR	3143052	ExpressionStatement	schedule [ i ] = lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		3141956	0					
ANR	3143053	AssignmentExpression	schedule [ i ] = lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		3141956	0		=			
ANR	3143054	ArrayIndexing	schedule [ i ]		3141956	0					
ANR	3143055	Identifier	schedule		3141956	0					
ANR	3143056	Identifier	i		3141956	1					
ANR	3143057	CallExpression	lib . getSchedule ( * ( superdag . getConstituent ( i ) ) )		3141956	1					
ANR	3143058	Callee	lib . getSchedule		3141956	0					
ANR	3143059	MemberAccess	lib . getSchedule		3141956	0					
ANR	3143060	Identifier	lib		3141956	0					
ANR	3143061	Identifier	getSchedule		3141956	1					
ANR	3143062	ArgumentList	* ( superdag . getConstituent ( i ) )		3141956	1					
ANR	3143063	Argument	* ( superdag . getConstituent ( i ) )		3141956	0					
ANR	3143064	UnaryOperationExpression	* ( superdag . getConstituent ( i ) )		3141956	0					
ANR	3143065	UnaryOperator	*		3141956	0					
ANR	3143066	CallExpression	superdag . getConstituent ( i )		3141956	1					
ANR	3143067	Callee	superdag . getConstituent		3141956	0					
ANR	3143068	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143069	Identifier	superdag		3141956	0					
ANR	3143070	Identifier	getConstituent		3141956	1					
ANR	3143071	ArgumentList	i		3141956	1					
ANR	3143072	Argument	i		3141956	0					
ANR	3143073	Identifier	i		3141956	0					
ANR	3143074	IfStatement	if ( NULL == schedule [ i ] )		3141956	1					
ANR	3143075	Condition	NULL == schedule [ i ]		3141956	0					
ANR	3143076	EqualityExpression	NULL == schedule [ i ]		3141956	0		==			
ANR	3143077	Identifier	NULL		3141956	0					
ANR	3143078	ArrayIndexing	schedule [ i ]		3141956	1					
ANR	3143079	Identifier	schedule		3141956	0					
ANR	3143080	Identifier	i		3141956	1					
ANR	3143081	ThrowStatement	"throw ""prio, schedule[i] is NULL"" ;"		3141956	1					
ANR	3143082	PrimaryExpression	"""prio, schedule[i] is NULL"""		3141956	0					
ANR	3143083	ExpressionStatement			3141956	49					
ANR	3143084	ExpressionStatement	"printf ( ""-- building eligibility plots\\n"" )"		3141956	50					
ANR	3143085	CallExpression	"printf ( ""-- building eligibility plots\\n"" )"		3141956	0					
ANR	3143086	Callee	printf		3141956	0					
ANR	3143087	Identifier	printf		3141956	0					
ANR	3143088	ArgumentList	"""-- building eligibility plots\\n"""		3141956	1					
ANR	3143089	Argument	"""-- building eligibility plots\\n"""		3141956	0					
ANR	3143090	PrimaryExpression	"""-- building eligibility plots\\n"""		3141956	0					
ANR	3143091	IdentifierDeclStatement	int * * eligPlot ;		3141956	51					
ANR	3143092	IdentifierDecl	* * eligPlot		3141956	0					
ANR	3143093	IdentifierDeclType	int * *		3141956	0					
ANR	3143094	Identifier	eligPlot		3141956	1					
ANR	3143095	ExpressionStatement	eligPlot = new intPtr [ numNodes ]		3141956	52					
ANR	3143096	AssignmentExpression	eligPlot = new intPtr [ numNodes ]		3141956	0		=			
ANR	3143097	Identifier	eligPlot		3141956	0					
ANR	3143098	Identifier	numNodes		3141956	1					
ANR	3143099	IfStatement	if ( NULL == eligPlot )		3141956	53					
ANR	3143100	Condition	NULL == eligPlot		3141956	0					
ANR	3143101	EqualityExpression	NULL == eligPlot		3141956	0		==			
ANR	3143102	Identifier	NULL		3141956	0					
ANR	3143103	Identifier	eligPlot		3141956	1					
ANR	3143104	ThrowStatement	"throw ""prio, eligPlot is NULL"" ;"		3141956	1					
ANR	3143105	PrimaryExpression	"""prio, eligPlot is NULL"""		3141956	0					
ANR	3143106	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3141956	54					
ANR	3143107	ForInit	i = 0 ;		3141956	0					
ANR	3143108	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143109	Identifier	i		3141956	0					
ANR	3143110	PrimaryExpression	0		3141956	1					
ANR	3143111	Condition	i < numNodes		3141956	1					
ANR	3143112	RelationalExpression	i < numNodes		3141956	0		<			
ANR	3143113	Identifier	i		3141956	0					
ANR	3143114	Identifier	numNodes		3141956	1					
ANR	3143115	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143116	Identifier	i		3141956	0					
ANR	3143117	IncDec	++		3141956	1					
ANR	3143118	CompoundStatement		240:30:7501:7501	3141956	3					
ANR	3143119	ExpressionStatement	eligPlot [ i ] = ( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		3141956	0					
ANR	3143120	AssignmentExpression	eligPlot [ i ] = ( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		3141956	0		=			
ANR	3143121	ArrayIndexing	eligPlot [ i ]		3141956	0					
ANR	3143122	Identifier	eligPlot		3141956	0					
ANR	3143123	Identifier	i		3141956	1					
ANR	3143124	CallExpression	( superdag . getConstituent ( i ) ) -> getEligPlot ( schedule [ i ] )		3141956	1					
ANR	3143125	Callee	( superdag . getConstituent ( i ) ) -> getEligPlot		3141956	0					
ANR	3143126	PtrMemberAccess	( superdag . getConstituent ( i ) ) -> getEligPlot		3141956	0					
ANR	3143127	CallExpression	superdag . getConstituent ( i )		3141956	0					
ANR	3143128	Callee	superdag . getConstituent		3141956	0					
ANR	3143129	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143130	Identifier	superdag		3141956	0					
ANR	3143131	Identifier	getConstituent		3141956	1					
ANR	3143132	ArgumentList	i		3141956	1					
ANR	3143133	Argument	i		3141956	0					
ANR	3143134	Identifier	i		3141956	0					
ANR	3143135	Identifier	getEligPlot		3141956	1					
ANR	3143136	ArgumentList	schedule [ i ]		3141956	1					
ANR	3143137	Argument	schedule [ i ]		3141956	0					
ANR	3143138	ArrayIndexing	schedule [ i ]		3141956	0					
ANR	3143139	Identifier	schedule		3141956	0					
ANR	3143140	Identifier	i		3141956	1					
ANR	3143141	IfStatement	if ( NULL == eligPlot [ i ] )		3141956	1					
ANR	3143142	Condition	NULL == eligPlot [ i ]		3141956	0					
ANR	3143143	EqualityExpression	NULL == eligPlot [ i ]		3141956	0		==			
ANR	3143144	Identifier	NULL		3141956	0					
ANR	3143145	ArrayIndexing	eligPlot [ i ]		3141956	1					
ANR	3143146	Identifier	eligPlot		3141956	0					
ANR	3143147	Identifier	i		3141956	1					
ANR	3143148	ThrowStatement	"throw ""prio, eligPlot[i] is NULL"" ;"		3141956	1					
ANR	3143149	PrimaryExpression	"""prio, eligPlot[i] is NULL"""		3141956	0					
ANR	3143150	IdentifierDeclStatement	int * nonSink ;		3141956	55					
ANR	3143151	IdentifierDecl	* nonSink		3141956	0					
ANR	3143152	IdentifierDeclType	int *		3141956	0					
ANR	3143153	Identifier	nonSink		3141956	1					
ANR	3143154	ExpressionStatement	nonSink = new int [ numNodes ]		3141956	56					
ANR	3143155	AssignmentExpression	nonSink = new int [ numNodes ]		3141956	0		=			
ANR	3143156	Identifier	nonSink		3141956	0					
ANR	3143157	Identifier	numNodes		3141956	1					
ANR	3143158	IfStatement	if ( NULL == nonSink )		3141956	57					
ANR	3143159	Condition	NULL == nonSink		3141956	0					
ANR	3143160	EqualityExpression	NULL == nonSink		3141956	0		==			
ANR	3143161	Identifier	NULL		3141956	0					
ANR	3143162	Identifier	nonSink		3141956	1					
ANR	3143163	ThrowStatement	"throw ""prio, nonSink is NULL"" ;"		3141956	1					
ANR	3143164	PrimaryExpression	"""prio, nonSink is NULL"""		3141956	0					
ANR	3143165	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3141956	58					
ANR	3143166	ForInit	i = 0 ;		3141956	0					
ANR	3143167	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143168	Identifier	i		3141956	0					
ANR	3143169	PrimaryExpression	0		3141956	1					
ANR	3143170	Condition	i < numNodes		3141956	1					
ANR	3143171	RelationalExpression	i < numNodes		3141956	0		<			
ANR	3143172	Identifier	i		3141956	0					
ANR	3143173	Identifier	numNodes		3141956	1					
ANR	3143174	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143175	Identifier	i		3141956	0					
ANR	3143176	IncDec	++		3141956	1					
ANR	3143177	ExpressionStatement	nonSink [ i ] = superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		3141956	3					
ANR	3143178	AssignmentExpression	nonSink [ i ] = superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		3141956	0		=			
ANR	3143179	ArrayIndexing	nonSink [ i ]		3141956	0					
ANR	3143180	Identifier	nonSink		3141956	0					
ANR	3143181	Identifier	i		3141956	1					
ANR	3143182	AdditiveExpression	superdag . getConstituent ( i ) -> getNumNodes ( ) - superdag . getConstituent ( i ) -> getNumSinks ( )		3141956	1		-			
ANR	3143183	CallExpression	superdag . getConstituent ( i ) -> getNumNodes ( )		3141956	0					
ANR	3143184	Callee	superdag . getConstituent ( i ) -> getNumNodes		3141956	0					
ANR	3143185	PtrMemberAccess	superdag . getConstituent ( i ) -> getNumNodes		3141956	0					
ANR	3143186	CallExpression	superdag . getConstituent ( i )		3141956	0					
ANR	3143187	Callee	superdag . getConstituent		3141956	0					
ANR	3143188	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143189	Identifier	superdag		3141956	0					
ANR	3143190	Identifier	getConstituent		3141956	1					
ANR	3143191	ArgumentList	i		3141956	1					
ANR	3143192	Argument	i		3141956	0					
ANR	3143193	Identifier	i		3141956	0					
ANR	3143194	Identifier	getNumNodes		3141956	1					
ANR	3143195	ArgumentList			3141956	1					
ANR	3143196	CallExpression	superdag . getConstituent ( i ) -> getNumSinks ( )		3141956	1					
ANR	3143197	Callee	superdag . getConstituent ( i ) -> getNumSinks		3141956	0					
ANR	3143198	PtrMemberAccess	superdag . getConstituent ( i ) -> getNumSinks		3141956	0					
ANR	3143199	CallExpression	superdag . getConstituent ( i )		3141956	0					
ANR	3143200	Callee	superdag . getConstituent		3141956	0					
ANR	3143201	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143202	Identifier	superdag		3141956	0					
ANR	3143203	Identifier	getConstituent		3141956	1					
ANR	3143204	ArgumentList	i		3141956	1					
ANR	3143205	Argument	i		3141956	0					
ANR	3143206	Identifier	i		3141956	0					
ANR	3143207	Identifier	getNumSinks		3141956	1					
ANR	3143208	ArgumentList			3141956	1					
ANR	3143209	IdentifierDeclStatement	BTreePtr * btreeTab ;		3141956	59					
ANR	3143210	IdentifierDecl	* btreeTab		3141956	0					
ANR	3143211	IdentifierDeclType	BTreePtr *		3141956	0					
ANR	3143212	Identifier	btreeTab		3141956	1					
ANR	3143213	ExpressionStatement	btreeTab = new BTreePtr [ numNodes ]		3141956	60					
ANR	3143214	AssignmentExpression	btreeTab = new BTreePtr [ numNodes ]		3141956	0		=			
ANR	3143215	Identifier	btreeTab		3141956	0					
ANR	3143216	Identifier	numNodes		3141956	1					
ANR	3143217	IfStatement	if ( NULL == btreeTab )		3141956	61					
ANR	3143218	Condition	NULL == btreeTab		3141956	0					
ANR	3143219	EqualityExpression	NULL == btreeTab		3141956	0		==			
ANR	3143220	Identifier	NULL		3141956	0					
ANR	3143221	Identifier	btreeTab		3141956	1					
ANR	3143222	ThrowStatement	"throw ""prio, btreeTab is NULL"" ;"		3141956	1					
ANR	3143223	PrimaryExpression	"""prio, btreeTab is NULL"""		3141956	0					
ANR	3143224	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3141956	62					
ANR	3143225	ForInit	i = 0 ;		3141956	0					
ANR	3143226	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143227	Identifier	i		3141956	0					
ANR	3143228	PrimaryExpression	0		3141956	1					
ANR	3143229	Condition	i < numNodes		3141956	1					
ANR	3143230	RelationalExpression	i < numNodes		3141956	0		<			
ANR	3143231	Identifier	i		3141956	0					
ANR	3143232	Identifier	numNodes		3141956	1					
ANR	3143233	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143234	Identifier	i		3141956	0					
ANR	3143235	IncDec	++		3141956	1					
ANR	3143236	ExpressionStatement	btreeTab [ i ] = NULL		3141956	3					
ANR	3143237	AssignmentExpression	btreeTab [ i ] = NULL		3141956	0		=			
ANR	3143238	ArrayIndexing	btreeTab [ i ]		3141956	0					
ANR	3143239	Identifier	btreeTab		3141956	0					
ANR	3143240	Identifier	i		3141956	1					
ANR	3143241	Identifier	NULL		3141956	1					
ANR	3143242	IdentifierDeclStatement	ResizableArray < int > sources ;		3141956	63					
ANR	3143243	IdentifierDecl	sources		3141956	0					
ANR	3143244	IdentifierDeclType	ResizableArray < int >		3141956	0					
ANR	3143245	Identifier	sources		3141956	1					
ANR	3143246	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3141956	64					
ANR	3143247	ForInit	i = 0 ;		3141956	0					
ANR	3143248	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143249	Identifier	i		3141956	0					
ANR	3143250	PrimaryExpression	0		3141956	1					
ANR	3143251	Condition	i < numNodes		3141956	1					
ANR	3143252	RelationalExpression	i < numNodes		3141956	0		<			
ANR	3143253	Identifier	i		3141956	0					
ANR	3143254	Identifier	numNodes		3141956	1					
ANR	3143255	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143256	Identifier	i		3141956	0					
ANR	3143257	IncDec	++		3141956	1					
ANR	3143258	CompoundStatement		267:30:8222:8222	3141956	3					
ANR	3143259	IfStatement	if ( 0 == numParents [ i ] )		3141956	0					
ANR	3143260	Condition	0 == numParents [ i ]		3141956	0					
ANR	3143261	EqualityExpression	0 == numParents [ i ]		3141956	0		==			
ANR	3143262	PrimaryExpression	0		3141956	0					
ANR	3143263	ArrayIndexing	numParents [ i ]		3141956	1					
ANR	3143264	Identifier	numParents		3141956	0					
ANR	3143265	Identifier	i		3141956	1					
ANR	3143266	ExpressionStatement	sources . append ( i )		3141956	1					
ANR	3143267	CallExpression	sources . append ( i )		3141956	0					
ANR	3143268	Callee	sources . append		3141956	0					
ANR	3143269	MemberAccess	sources . append		3141956	0					
ANR	3143270	Identifier	sources		3141956	0					
ANR	3143271	Identifier	append		3141956	1					
ANR	3143272	ArgumentList	i		3141956	1					
ANR	3143273	Argument	i		3141956	0					
ANR	3143274	Identifier	i		3141956	0					
ANR	3143275	ExpressionStatement			3141956	65					
ANR	3143276	ExpressionStatement	"printf ( ""-- establishing priorities among all sources of superdag\\n"" )"		3141956	66					
ANR	3143277	CallExpression	"printf ( ""-- establishing priorities among all sources of superdag\\n"" )"		3141956	0					
ANR	3143278	Callee	printf		3141956	0					
ANR	3143279	Identifier	printf		3141956	0					
ANR	3143280	ArgumentList	"""-- establishing priorities among all sources of superdag\\n"""		3141956	1					
ANR	3143281	Argument	"""-- establishing priorities among all sources of superdag\\n"""		3141956	0					
ANR	3143282	PrimaryExpression	"""-- establishing priorities among all sources of superdag\\n"""		3141956	0					
ANR	3143283	ExpressionStatement	done = - 1		3141956	67					
ANR	3143284	AssignmentExpression	done = - 1		3141956	0		=			
ANR	3143285	Identifier	done		3141956	0					
ANR	3143286	UnaryOperationExpression	- 1		3141956	1					
ANR	3143287	UnaryOperator	-		3141956	0					
ANR	3143288	PrimaryExpression	1		3141956	1					
ANR	3143289	ExpressionStatement	last = - 1		3141956	68					
ANR	3143290	AssignmentExpression	last = - 1		3141956	0		=			
ANR	3143291	Identifier	last		3141956	0					
ANR	3143292	UnaryOperationExpression	- 1		3141956	1					
ANR	3143293	UnaryOperator	-		3141956	0					
ANR	3143294	PrimaryExpression	1		3141956	1					
ANR	3143295	ForStatement	for ( i = 0 ; i < sources . getNumElem ( ) ; i ++ )		3141956	69					
ANR	3143296	ForInit	i = 0 ;		3141956	0					
ANR	3143297	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143298	Identifier	i		3141956	0					
ANR	3143299	PrimaryExpression	0		3141956	1					
ANR	3143300	Condition	i < sources . getNumElem ( )		3141956	1					
ANR	3143301	RelationalExpression	i < sources . getNumElem ( )		3141956	0		<			
ANR	3143302	Identifier	i		3141956	0					
ANR	3143303	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143304	Callee	sources . getNumElem		3141956	0					
ANR	3143305	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143306	Identifier	sources		3141956	0					
ANR	3143307	Identifier	getNumElem		3141956	1					
ANR	3143308	ArgumentList			3141956	1					
ANR	3143309	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143310	Identifier	i		3141956	0					
ANR	3143311	IncDec	++		3141956	1					
ANR	3143312	CompoundStatement		293:3:8772:8801	3141956	3					
ANR	3143313	ExpressionStatement	done ++		3141956	0					
ANR	3143314	PostIncDecOperationExpression	done ++		3141956	0					
ANR	3143315	Identifier	done		3141956	0					
ANR	3143316	IncDec	++		3141956	1					
ANR	3143317	IfStatement	if ( done / sources . getNumElem ( ) > last + 0.1 )		3141956	1					
ANR	3143318	Condition	done / sources . getNumElem ( ) > last + 0.1		3141956	0					
ANR	3143319	RelationalExpression	done / sources . getNumElem ( ) > last + 0.1		3141956	0		>			
ANR	3143320	MultiplicativeExpression	done / sources . getNumElem ( )		3141956	0		/			
ANR	3143321	Identifier	done		3141956	0					
ANR	3143322	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143323	Callee	sources . getNumElem		3141956	0					
ANR	3143324	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143325	Identifier	sources		3141956	0					
ANR	3143326	Identifier	getNumElem		3141956	1					
ANR	3143327	ArgumentList			3141956	1					
ANR	3143328	AdditiveExpression	last + 0.1		3141956	1		+			
ANR	3143329	Identifier	last		3141956	0					
ANR	3143330	PrimaryExpression	0.1		3141956	1					
ANR	3143331	CompoundStatement		285:46:8621:8621	3141956	1					
ANR	3143332	ExpressionStatement	last = done / sources . getNumElem ( )		3141956	0					
ANR	3143333	AssignmentExpression	last = done / sources . getNumElem ( )		3141956	0		=			
ANR	3143334	Identifier	last		3141956	0					
ANR	3143335	MultiplicativeExpression	done / sources . getNumElem ( )		3141956	1		/			
ANR	3143336	Identifier	done		3141956	0					
ANR	3143337	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143338	Callee	sources . getNumElem		3141956	0					
ANR	3143339	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143340	Identifier	sources		3141956	0					
ANR	3143341	Identifier	getNumElem		3141956	1					
ANR	3143342	ArgumentList			3141956	1					
ANR	3143343	ExpressionStatement	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		3141956	1					
ANR	3143344	CallExpression	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		3141956	0					
ANR	3143345	Callee	printf		3141956	0					
ANR	3143346	Identifier	printf		3141956	0					
ANR	3143347	ArgumentList	"""    about %d percent done\\n"""		3141956	1					
ANR	3143348	Argument	"""    about %d percent done\\n"""		3141956	0					
ANR	3143349	PrimaryExpression	"""    about %d percent done\\n"""		3141956	0					
ANR	3143350	Argument	( int ) ( last * 100 )		3141956	1					
ANR	3143351	CastExpression	( int ) ( last * 100 )		3141956	0					
ANR	3143352	CastTarget	int		3141956	0					
ANR	3143353	MultiplicativeExpression	last * 100		3141956	1		*			
ANR	3143354	Identifier	last		3141956	0					
ANR	3143355	PrimaryExpression	100		3141956	1					
ANR	3143356	ExpressionStatement			3141956	2					
ANR	3143357	IdentifierDeclStatement	int srcA = sources . getElem ( i ) ;		3141956	3					
ANR	3143358	IdentifierDecl	srcA = sources . getElem ( i )		3141956	0					
ANR	3143359	IdentifierDeclType	int		3141956	0					
ANR	3143360	Identifier	srcA		3141956	1					
ANR	3143361	AssignmentExpression	srcA = sources . getElem ( i )		3141956	2		=			
ANR	3143362	Identifier	srcA		3141956	0					
ANR	3143363	CallExpression	sources . getElem ( i )		3141956	1					
ANR	3143364	Callee	sources . getElem		3141956	0					
ANR	3143365	MemberAccess	sources . getElem		3141956	0					
ANR	3143366	Identifier	sources		3141956	0					
ANR	3143367	Identifier	getElem		3141956	1					
ANR	3143368	ArgumentList	i		3141956	1					
ANR	3143369	Argument	i		3141956	0					
ANR	3143370	Identifier	i		3141956	0					
ANR	3143371	ExpressionStatement	btreeTab [ srcA ] = new BTree ( )		3141956	4					
ANR	3143372	AssignmentExpression	btreeTab [ srcA ] = new BTree ( )		3141956	0		=			
ANR	3143373	ArrayIndexing	btreeTab [ srcA ]		3141956	0					
ANR	3143374	Identifier	btreeTab		3141956	0					
ANR	3143375	Identifier	srcA		3141956	1					
ANR	3143376	UnaryExpression	new BTree ( )		3141956	1					
ANR	3143377	IfStatement	if ( NULL == btreeTab [ srcA ] )		3141956	5					
ANR	3143378	Condition	NULL == btreeTab [ srcA ]		3141956	0					
ANR	3143379	EqualityExpression	NULL == btreeTab [ srcA ]		3141956	0		==			
ANR	3143380	Identifier	NULL		3141956	0					
ANR	3143381	ArrayIndexing	btreeTab [ srcA ]		3141956	1					
ANR	3143382	Identifier	btreeTab		3141956	0					
ANR	3143383	Identifier	srcA		3141956	1					
ANR	3143384	ThrowStatement	"throw ""prio, btreeTab[srcA] is NULL"" ;"		3141956	1					
ANR	3143385	PrimaryExpression	"""prio, btreeTab[srcA] is NULL"""		3141956	0					
ANR	3143386	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		3141956	6					
ANR	3143387	ForInit	j = 0 ;		3141956	0					
ANR	3143388	AssignmentExpression	j = 0		3141956	0		=			
ANR	3143389	Identifier	j		3141956	0					
ANR	3143390	PrimaryExpression	0		3141956	1					
ANR	3143391	Condition	j < sources . getNumElem ( )		3141956	1					
ANR	3143392	RelationalExpression	j < sources . getNumElem ( )		3141956	0		<			
ANR	3143393	Identifier	j		3141956	0					
ANR	3143394	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143395	Callee	sources . getNumElem		3141956	0					
ANR	3143396	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143397	Identifier	sources		3141956	0					
ANR	3143398	Identifier	getNumElem		3141956	1					
ANR	3143399	ArgumentList			3141956	1					
ANR	3143400	PostIncDecOperationExpression	j ++		3141956	2					
ANR	3143401	Identifier	j		3141956	0					
ANR	3143402	IncDec	++		3141956	1					
ANR	3143403	CompoundStatement		301:43:9029:9029	3141956	3					
ANR	3143404	IfStatement	if ( i == j )		3141956	0					
ANR	3143405	Condition	i == j		3141956	0					
ANR	3143406	EqualityExpression	i == j		3141956	0		==			
ANR	3143407	Identifier	i		3141956	0					
ANR	3143408	Identifier	j		3141956	1					
ANR	3143409	ContinueStatement	continue ;		3141956	1					
ANR	3143410	ElseStatement	else		3141956	0					
ANR	3143411	CompoundStatement		308:5:9265:9302	3141956	0					
ANR	3143412	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		3141956	0					
ANR	3143413	IdentifierDecl	srcB = sources . getElem ( j )		3141956	0					
ANR	3143414	IdentifierDeclType	int		3141956	0					
ANR	3143415	Identifier	srcB		3141956	1					
ANR	3143416	AssignmentExpression	srcB = sources . getElem ( j )		3141956	2		=			
ANR	3143417	Identifier	srcB		3141956	0					
ANR	3143418	CallExpression	sources . getElem ( j )		3141956	1					
ANR	3143419	Callee	sources . getElem		3141956	0					
ANR	3143420	MemberAccess	sources . getElem		3141956	0					
ANR	3143421	Identifier	sources		3141956	0					
ANR	3143422	Identifier	getElem		3141956	1					
ANR	3143423	ArgumentList	j		3141956	1					
ANR	3143424	Argument	j		3141956	0					
ANR	3143425	Identifier	j		3141956	0					
ANR	3143426	ExpressionStatement	"c = lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	1					
ANR	3143427	AssignmentExpression	"c = lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	0		=			
ANR	3143428	Identifier	c		3141956	0					
ANR	3143429	CallExpression	"lib . getPriority ( eligPlot [ srcA ] , nonSink [ srcA ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	1					
ANR	3143430	Callee	lib . getPriority		3141956	0					
ANR	3143431	MemberAccess	lib . getPriority		3141956	0					
ANR	3143432	Identifier	lib		3141956	0					
ANR	3143433	Identifier	getPriority		3141956	1					
ANR	3143434	ArgumentList	eligPlot [ srcA ]		3141956	1					
ANR	3143435	Argument	eligPlot [ srcA ]		3141956	0					
ANR	3143436	ArrayIndexing	eligPlot [ srcA ]		3141956	0					
ANR	3143437	Identifier	eligPlot		3141956	0					
ANR	3143438	Identifier	srcA		3141956	1					
ANR	3143439	Argument	nonSink [ srcA ]		3141956	1					
ANR	3143440	ArrayIndexing	nonSink [ srcA ]		3141956	0					
ANR	3143441	Identifier	nonSink		3141956	0					
ANR	3143442	Identifier	srcA		3141956	1					
ANR	3143443	Argument	eligPlot [ srcB ]		3141956	2					
ANR	3143444	ArrayIndexing	eligPlot [ srcB ]		3141956	0					
ANR	3143445	Identifier	eligPlot		3141956	0					
ANR	3143446	Identifier	srcB		3141956	1					
ANR	3143447	Argument	nonSink [ srcB ]		3141956	3					
ANR	3143448	ArrayIndexing	nonSink [ srcB ]		3141956	0					
ANR	3143449	Identifier	nonSink		3141956	0					
ANR	3143450	Identifier	srcB		3141956	1					
ANR	3143451	ExpressionStatement	c *= ULONG_MAX / 2		3141956	2					
ANR	3143452	AssignmentExpression	c *= ULONG_MAX / 2		3141956	0		*=			
ANR	3143453	Identifier	c		3141956	0					
ANR	3143454	MultiplicativeExpression	ULONG_MAX / 2		3141956	1		/			
ANR	3143455	Identifier	ULONG_MAX		3141956	0					
ANR	3143456	PrimaryExpression	2		3141956	1					
ANR	3143457	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		3141956	3					
ANR	3143458	IdentifierDecl	key = ( unsigned long ) c		3141956	0					
ANR	3143459	IdentifierDeclType	unsigned long		3141956	0					
ANR	3143460	Identifier	key		3141956	1					
ANR	3143461	AssignmentExpression	key = ( unsigned long ) c		3141956	2		=			
ANR	3143462	Identifier	key		3141956	0					
ANR	3143463	CastExpression	( unsigned long ) c		3141956	1					
ANR	3143464	CastTarget	unsigned long		3141956	0					
ANR	3143465	Identifier	c		3141956	1					
ANR	3143466	ExpressionStatement	"btreeTab [ srcA ] -> insert ( key , srcB )"		3141956	4					
ANR	3143467	CallExpression	"btreeTab [ srcA ] -> insert ( key , srcB )"		3141956	0					
ANR	3143468	Callee	btreeTab [ srcA ] -> insert		3141956	0					
ANR	3143469	PtrMemberAccess	btreeTab [ srcA ] -> insert		3141956	0					
ANR	3143470	ArrayIndexing	btreeTab [ srcA ]		3141956	0					
ANR	3143471	Identifier	btreeTab		3141956	0					
ANR	3143472	Identifier	srcA		3141956	1					
ANR	3143473	Identifier	insert		3141956	1					
ANR	3143474	ArgumentList	key		3141956	1					
ANR	3143475	Argument	key		3141956	0					
ANR	3143476	Identifier	key		3141956	0					
ANR	3143477	Argument	srcB		3141956	1					
ANR	3143478	Identifier	srcB		3141956	0					
ANR	3143479	ExpressionStatement			3141956	1					
ANR	3143480	ExpressionStatement			3141956	7					
ANR	3143481	ExpressionStatement			3141956	70					
ANR	3143482	ExpressionStatement	"printf ( ""-- scheduling superdag through prioritizing\\n"" )"		3141956	71					
ANR	3143483	CallExpression	"printf ( ""-- scheduling superdag through prioritizing\\n"" )"		3141956	0					
ANR	3143484	Callee	printf		3141956	0					
ANR	3143485	Identifier	printf		3141956	0					
ANR	3143486	ArgumentList	"""-- scheduling superdag through prioritizing\\n"""		3141956	1					
ANR	3143487	Argument	"""-- scheduling superdag through prioritizing\\n"""		3141956	0					
ANR	3143488	PrimaryExpression	"""-- scheduling superdag through prioritizing\\n"""		3141956	0					
ANR	3143489	ExpressionStatement	done = - 1		3141956	72					
ANR	3143490	AssignmentExpression	done = - 1		3141956	0		=			
ANR	3143491	Identifier	done		3141956	0					
ANR	3143492	UnaryOperationExpression	- 1		3141956	1					
ANR	3143493	UnaryOperator	-		3141956	0					
ANR	3143494	PrimaryExpression	1		3141956	1					
ANR	3143495	ExpressionStatement	last = - 1		3141956	73					
ANR	3143496	AssignmentExpression	last = - 1		3141956	0		=			
ANR	3143497	Identifier	last		3141956	0					
ANR	3143498	UnaryOperationExpression	- 1		3141956	1					
ANR	3143499	UnaryOperator	-		3141956	0					
ANR	3143500	PrimaryExpression	1		3141956	1					
ANR	3143501	WhileStatement	while ( sources . getNumElem ( ) > 0 )		3141956	74					
ANR	3143502	Condition	sources . getNumElem ( ) > 0		3141956	0					
ANR	3143503	RelationalExpression	sources . getNumElem ( ) > 0		3141956	0		>			
ANR	3143504	CallExpression	sources . getNumElem ( )		3141956	0					
ANR	3143505	Callee	sources . getNumElem		3141956	0					
ANR	3143506	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143507	Identifier	sources		3141956	0					
ANR	3143508	Identifier	getNumElem		3141956	1					
ANR	3143509	ArgumentList			3141956	1					
ANR	3143510	PrimaryExpression	0		3141956	1					
ANR	3143511	CompoundStatement		337:3:9833:9843	3141956	1					
ANR	3143512	ExpressionStatement	done ++		3141956	0					
ANR	3143513	PostIncDecOperationExpression	done ++		3141956	0					
ANR	3143514	Identifier	done		3141956	0					
ANR	3143515	IncDec	++		3141956	1					
ANR	3143516	IfStatement	if ( done / numNodes > last + 0.01 )		3141956	1					
ANR	3143517	Condition	done / numNodes > last + 0.01		3141956	0					
ANR	3143518	RelationalExpression	done / numNodes > last + 0.01		3141956	0		>			
ANR	3143519	MultiplicativeExpression	done / numNodes		3141956	0		/			
ANR	3143520	Identifier	done		3141956	0					
ANR	3143521	Identifier	numNodes		3141956	1					
ANR	3143522	AdditiveExpression	last + 0.01		3141956	1		+			
ANR	3143523	Identifier	last		3141956	0					
ANR	3143524	PrimaryExpression	0.01		3141956	1					
ANR	3143525	CompoundStatement		326:35:9581:9581	3141956	1					
ANR	3143526	ExpressionStatement	last = done / numNodes		3141956	0					
ANR	3143527	AssignmentExpression	last = done / numNodes		3141956	0		=			
ANR	3143528	Identifier	last		3141956	0					
ANR	3143529	MultiplicativeExpression	done / numNodes		3141956	1		/			
ANR	3143530	Identifier	done		3141956	0					
ANR	3143531	Identifier	numNodes		3141956	1					
ANR	3143532	ExpressionStatement	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		3141956	1					
ANR	3143533	CallExpression	"printf ( ""    about %d percent done\\n"" , ( int ) ( last * 100 ) )"		3141956	0					
ANR	3143534	Callee	printf		3141956	0					
ANR	3143535	Identifier	printf		3141956	0					
ANR	3143536	ArgumentList	"""    about %d percent done\\n"""		3141956	1					
ANR	3143537	Argument	"""    about %d percent done\\n"""		3141956	0					
ANR	3143538	PrimaryExpression	"""    about %d percent done\\n"""		3141956	0					
ANR	3143539	Argument	( int ) ( last * 100 )		3141956	1					
ANR	3143540	CastExpression	( int ) ( last * 100 )		3141956	0					
ANR	3143541	CastTarget	int		3141956	0					
ANR	3143542	MultiplicativeExpression	last * 100		3141956	1		*			
ANR	3143543	Identifier	last		3141956	0					
ANR	3143544	PrimaryExpression	100		3141956	1					
ANR	3143545	ExpressionStatement			3141956	2					
ANR	3143546	IdentifierDeclStatement	unsigned long maxPri = 0 ;		3141956	3					
ANR	3143547	IdentifierDecl	maxPri = 0		3141956	0					
ANR	3143548	IdentifierDeclType	unsigned long		3141956	0					
ANR	3143549	Identifier	maxPri		3141956	1					
ANR	3143550	AssignmentExpression	maxPri = 0		3141956	2		=			
ANR	3143551	Identifier	maxPri		3141956	0					
ANR	3143552	PrimaryExpression	0		3141956	1					
ANR	3143553	IdentifierDeclStatement	int maxSrc ;		3141956	4					
ANR	3143554	IdentifierDecl	maxSrc		3141956	0					
ANR	3143555	IdentifierDeclType	int		3141956	0					
ANR	3143556	Identifier	maxSrc		3141956	1					
ANR	3143557	IfStatement	if ( 1 == sources . getNumElem ( ) )		3141956	5					
ANR	3143558	Condition	1 == sources . getNumElem ( )		3141956	0					
ANR	3143559	EqualityExpression	1 == sources . getNumElem ( )		3141956	0		==			
ANR	3143560	PrimaryExpression	1		3141956	0					
ANR	3143561	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143562	Callee	sources . getNumElem		3141956	0					
ANR	3143563	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143564	Identifier	sources		3141956	0					
ANR	3143565	Identifier	getNumElem		3141956	1					
ANR	3143566	ArgumentList			3141956	1					
ANR	3143567	CompoundStatement		338:35:9880:9880	3141956	1					
ANR	3143568	ExpressionStatement	maxSrc = sources . getElem ( 0 )		3141956	0					
ANR	3143569	AssignmentExpression	maxSrc = sources . getElem ( 0 )		3141956	0		=			
ANR	3143570	Identifier	maxSrc		3141956	0					
ANR	3143571	CallExpression	sources . getElem ( 0 )		3141956	1					
ANR	3143572	Callee	sources . getElem		3141956	0					
ANR	3143573	MemberAccess	sources . getElem		3141956	0					
ANR	3143574	Identifier	sources		3141956	0					
ANR	3143575	Identifier	getElem		3141956	1					
ANR	3143576	ArgumentList	0		3141956	1					
ANR	3143577	Argument	0		3141956	0					
ANR	3143578	PrimaryExpression	0		3141956	0					
ANR	3143579	ElseStatement	else		3141956	0					
ANR	3143580	CompoundStatement		342:8:9985:9985	3141956	0					
ANR	3143581	ForStatement	for ( i = 0 ; i < sources . getNumElem ( ) ; i ++ )		3141956	0					
ANR	3143582	ForInit	i = 0 ;		3141956	0					
ANR	3143583	AssignmentExpression	i = 0		3141956	0		=			
ANR	3143584	Identifier	i		3141956	0					
ANR	3143585	PrimaryExpression	0		3141956	1					
ANR	3143586	Condition	i < sources . getNumElem ( )		3141956	1					
ANR	3143587	RelationalExpression	i < sources . getNumElem ( )		3141956	0		<			
ANR	3143588	Identifier	i		3141956	0					
ANR	3143589	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143590	Callee	sources . getNumElem		3141956	0					
ANR	3143591	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143592	Identifier	sources		3141956	0					
ANR	3143593	Identifier	getNumElem		3141956	1					
ANR	3143594	ArgumentList			3141956	1					
ANR	3143595	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3143596	Identifier	i		3141956	0					
ANR	3143597	IncDec	++		3141956	1					
ANR	3143598	CompoundStatement		351:5:10388:10405	3141956	3					
ANR	3143599	IdentifierDeclStatement	int src = sources . getElem ( i ) ;		3141956	0					
ANR	3143600	IdentifierDecl	src = sources . getElem ( i )		3141956	0					
ANR	3143601	IdentifierDeclType	int		3141956	0					
ANR	3143602	Identifier	src		3141956	1					
ANR	3143603	AssignmentExpression	src = sources . getElem ( i )		3141956	2		=			
ANR	3143604	Identifier	src		3141956	0					
ANR	3143605	CallExpression	sources . getElem ( i )		3141956	1					
ANR	3143606	Callee	sources . getElem		3141956	0					
ANR	3143607	MemberAccess	sources . getElem		3141956	0					
ANR	3143608	Identifier	sources		3141956	0					
ANR	3143609	Identifier	getElem		3141956	1					
ANR	3143610	ArgumentList	i		3141956	1					
ANR	3143611	Argument	i		3141956	0					
ANR	3143612	Identifier	i		3141956	0					
ANR	3143613	IdentifierDeclStatement	unsigned long pri ;		3141956	1					
ANR	3143614	IdentifierDecl	pri		3141956	0					
ANR	3143615	IdentifierDeclType	unsigned long		3141956	0					
ANR	3143616	Identifier	pri		3141956	1					
ANR	3143617	WhileStatement	while ( true )		3141956	2					
ANR	3143618	Condition	true		3141956	0					
ANR	3143619	Identifier	true		3141956	0					
ANR	3143620	CompoundStatement		354:6:10473:10517	3141956	1					
ANR	3143621	ExpressionStatement	pri = btreeTab [ src ] -> findMinKey ( )		3141956	0					
ANR	3143622	AssignmentExpression	pri = btreeTab [ src ] -> findMinKey ( )		3141956	0		=			
ANR	3143623	Identifier	pri		3141956	0					
ANR	3143624	CallExpression	btreeTab [ src ] -> findMinKey ( )		3141956	1					
ANR	3143625	Callee	btreeTab [ src ] -> findMinKey		3141956	0					
ANR	3143626	PtrMemberAccess	btreeTab [ src ] -> findMinKey		3141956	0					
ANR	3143627	ArrayIndexing	btreeTab [ src ]		3141956	0					
ANR	3143628	Identifier	btreeTab		3141956	0					
ANR	3143629	Identifier	src		3141956	1					
ANR	3143630	Identifier	findMinKey		3141956	1					
ANR	3143631	ArgumentList			3141956	1					
ANR	3143632	IdentifierDeclStatement	int srcB = btreeTab [ src ] -> findValForMinKey ( ) ;		3141956	1					
ANR	3143633	IdentifierDecl	srcB = btreeTab [ src ] -> findValForMinKey ( )		3141956	0					
ANR	3143634	IdentifierDeclType	int		3141956	0					
ANR	3143635	Identifier	srcB		3141956	1					
ANR	3143636	AssignmentExpression	srcB = btreeTab [ src ] -> findValForMinKey ( )		3141956	2		=			
ANR	3143637	Identifier	srcB		3141956	0					
ANR	3143638	CallExpression	btreeTab [ src ] -> findValForMinKey ( )		3141956	1					
ANR	3143639	Callee	btreeTab [ src ] -> findValForMinKey		3141956	0					
ANR	3143640	PtrMemberAccess	btreeTab [ src ] -> findValForMinKey		3141956	0					
ANR	3143641	ArrayIndexing	btreeTab [ src ]		3141956	0					
ANR	3143642	Identifier	btreeTab		3141956	0					
ANR	3143643	Identifier	src		3141956	1					
ANR	3143644	Identifier	findValForMinKey		3141956	1					
ANR	3143645	ArgumentList			3141956	1					
ANR	3143646	IfStatement	if ( NULL != btreeTab [ srcB ] )		3141956	2					
ANR	3143647	Condition	NULL != btreeTab [ srcB ]		3141956	0					
ANR	3143648	EqualityExpression	NULL != btreeTab [ srcB ]		3141956	0		!=			
ANR	3143649	Identifier	NULL		3141956	0					
ANR	3143650	ArrayIndexing	btreeTab [ srcB ]		3141956	1					
ANR	3143651	Identifier	btreeTab		3141956	0					
ANR	3143652	Identifier	srcB		3141956	1					
ANR	3143653	BreakStatement	break ;		3141956	1					
ANR	3143654	ExpressionStatement	btreeTab [ src ] -> removeMin ( )		3141956	3					
ANR	3143655	CallExpression	btreeTab [ src ] -> removeMin ( )		3141956	0					
ANR	3143656	Callee	btreeTab [ src ] -> removeMin		3141956	0					
ANR	3143657	PtrMemberAccess	btreeTab [ src ] -> removeMin		3141956	0					
ANR	3143658	ArrayIndexing	btreeTab [ src ]		3141956	0					
ANR	3143659	Identifier	btreeTab		3141956	0					
ANR	3143660	Identifier	src		3141956	1					
ANR	3143661	Identifier	removeMin		3141956	1					
ANR	3143662	ArgumentList			3141956	1					
ANR	3143663	ExpressionStatement			3141956	3					
ANR	3143664	IfStatement	if ( pri > maxPri )		3141956	4					
ANR	3143665	Condition	pri > maxPri		3141956	0					
ANR	3143666	RelationalExpression	pri > maxPri		3141956	0		>			
ANR	3143667	Identifier	pri		3141956	0					
ANR	3143668	Identifier	maxPri		3141956	1					
ANR	3143669	CompoundStatement		360:24:10633:10633	3141956	1					
ANR	3143670	ExpressionStatement	maxPri = pri		3141956	0					
ANR	3143671	AssignmentExpression	maxPri = pri		3141956	0		=			
ANR	3143672	Identifier	maxPri		3141956	0					
ANR	3143673	Identifier	pri		3141956	1					
ANR	3143674	ExpressionStatement	maxSrc = src		3141956	1					
ANR	3143675	AssignmentExpression	maxSrc = src		3141956	0		=			
ANR	3143676	Identifier	maxSrc		3141956	0					
ANR	3143677	Identifier	src		3141956	1					
ANR	3143678	ExpressionStatement			3141956	5					
ANR	3143679	ExpressionStatement			3141956	1					
ANR	3143680	ExpressionStatement			3141956	6					
ANR	3143681	IfStatement	if ( argumConstit )		3141956	7					
ANR	3143682	Condition	argumConstit		3141956	0					
ANR	3143683	Identifier	argumConstit		3141956	0					
ANR	3143684	CompoundStatement		372:4:10796:10822	3141956	1					
ANR	3143685	IdentifierDeclStatement	char name [ MAX_ARGV_LEN + 40 ] ;		3141956	0					
ANR	3143686	IdentifierDecl	name [ MAX_ARGV_LEN + 40 ]		3141956	0					
ANR	3143687	IdentifierDeclType	char [ MAX_ARGV_LEN + 40 ]		3141956	0					
ANR	3143688	Identifier	name		3141956	1					
ANR	3143689	AdditiveExpression	MAX_ARGV_LEN + 40		3141956	2		+			
ANR	3143690	Identifier	MAX_ARGV_LEN		3141956	0					
ANR	3143691	PrimaryExpression	40		3141956	1					
ANR	3143692	ExpressionStatement	"snprintf ( name , MAX_ARGV_LEN , ""%s%06d.dot"" , fileNameConstit , seq )"		3141956	1					
ANR	3143693	CallExpression	"snprintf ( name , MAX_ARGV_LEN , ""%s%06d.dot"" , fileNameConstit , seq )"		3141956	0					
ANR	3143694	Callee	snprintf		3141956	0					
ANR	3143695	Identifier	snprintf		3141956	0					
ANR	3143696	ArgumentList	name		3141956	1					
ANR	3143697	Argument	name		3141956	0					
ANR	3143698	Identifier	name		3141956	0					
ANR	3143699	Argument	MAX_ARGV_LEN		3141956	1					
ANR	3143700	Identifier	MAX_ARGV_LEN		3141956	0					
ANR	3143701	Argument	"""%s%06d.dot"""		3141956	2					
ANR	3143702	PrimaryExpression	"""%s%06d.dot"""		3141956	0					
ANR	3143703	Argument	fileNameConstit		3141956	3					
ANR	3143704	Identifier	fileNameConstit		3141956	0					
ANR	3143705	Argument	seq		3141956	4					
ANR	3143706	Identifier	seq		3141956	0					
ANR	3143707	ExpressionStatement	seq ++		3141956	2					
ANR	3143708	PostIncDecOperationExpression	seq ++		3141956	0					
ANR	3143709	Identifier	seq		3141956	0					
ANR	3143710	IncDec	++		3141956	1					
ANR	3143711	ExpressionStatement	superdag . getConstituent ( maxSrc ) -> saveAsDot ( name )		3141956	3					
ANR	3143712	CallExpression	superdag . getConstituent ( maxSrc ) -> saveAsDot ( name )		3141956	0					
ANR	3143713	Callee	superdag . getConstituent ( maxSrc ) -> saveAsDot		3141956	0					
ANR	3143714	PtrMemberAccess	superdag . getConstituent ( maxSrc ) -> saveAsDot		3141956	0					
ANR	3143715	CallExpression	superdag . getConstituent ( maxSrc )		3141956	0					
ANR	3143716	Callee	superdag . getConstituent		3141956	0					
ANR	3143717	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143718	Identifier	superdag		3141956	0					
ANR	3143719	Identifier	getConstituent		3141956	1					
ANR	3143720	ArgumentList	maxSrc		3141956	1					
ANR	3143721	Argument	maxSrc		3141956	0					
ANR	3143722	Identifier	maxSrc		3141956	0					
ANR	3143723	Identifier	saveAsDot		3141956	1					
ANR	3143724	ArgumentList	name		3141956	1					
ANR	3143725	Argument	name		3141956	0					
ANR	3143726	Identifier	name		3141956	0					
ANR	3143727	ExpressionStatement			3141956	8					
ANR	3143728	ForStatement	for ( j = 0 ; j < nonSink [ maxSrc ] ; j ++ )		3141956	9					
ANR	3143729	ForInit	j = 0 ;		3141956	0					
ANR	3143730	AssignmentExpression	j = 0		3141956	0		=			
ANR	3143731	Identifier	j		3141956	0					
ANR	3143732	PrimaryExpression	0		3141956	1					
ANR	3143733	Condition	j < nonSink [ maxSrc ]		3141956	1					
ANR	3143734	RelationalExpression	j < nonSink [ maxSrc ]		3141956	0		<			
ANR	3143735	Identifier	j		3141956	0					
ANR	3143736	ArrayIndexing	nonSink [ maxSrc ]		3141956	1					
ANR	3143737	Identifier	nonSink		3141956	0					
ANR	3143738	Identifier	maxSrc		3141956	1					
ANR	3143739	PostIncDecOperationExpression	j ++		3141956	2					
ANR	3143740	Identifier	j		3141956	0					
ANR	3143741	IncDec	++		3141956	1					
ANR	3143742	CompoundStatement		400:4:11574:11626	3141956	3					
ANR	3143743	IdentifierDeclStatement	int node = schedule [ maxSrc ] [ j ] ;		3141956	0					
ANR	3143744	IdentifierDecl	node = schedule [ maxSrc ] [ j ]		3141956	0					
ANR	3143745	IdentifierDeclType	int		3141956	0					
ANR	3143746	Identifier	node		3141956	1					
ANR	3143747	AssignmentExpression	node = schedule [ maxSrc ] [ j ]		3141956	2		=			
ANR	3143748	Identifier	node		3141956	0					
ANR	3143749	ArrayIndexing	schedule [ maxSrc ] [ j ]		3141956	1					
ANR	3143750	ArrayIndexing	schedule [ maxSrc ]		3141956	0					
ANR	3143751	Identifier	schedule		3141956	0					
ANR	3143752	Identifier	maxSrc		3141956	1					
ANR	3143753	Identifier	j		3141956	1					
ANR	3143754	IdentifierDeclStatement	int intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node ) ;		3141956	1					
ANR	3143755	IdentifierDecl	intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		3141956	0					
ANR	3143756	IdentifierDeclType	int		3141956	0					
ANR	3143757	Identifier	intLabel		3141956	1					
ANR	3143758	AssignmentExpression	intLabel = superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		3141956	2		=			
ANR	3143759	Identifier	intLabel		3141956	0					
ANR	3143760	CallExpression	superdag . getConstituent ( maxSrc ) -> getLabelInt ( node )		3141956	1					
ANR	3143761	Callee	superdag . getConstituent ( maxSrc ) -> getLabelInt		3141956	0					
ANR	3143762	PtrMemberAccess	superdag . getConstituent ( maxSrc ) -> getLabelInt		3141956	0					
ANR	3143763	CallExpression	superdag . getConstituent ( maxSrc )		3141956	0					
ANR	3143764	Callee	superdag . getConstituent		3141956	0					
ANR	3143765	MemberAccess	superdag . getConstituent		3141956	0					
ANR	3143766	Identifier	superdag		3141956	0					
ANR	3143767	Identifier	getConstituent		3141956	1					
ANR	3143768	ArgumentList	maxSrc		3141956	1					
ANR	3143769	Argument	maxSrc		3141956	0					
ANR	3143770	Identifier	maxSrc		3141956	0					
ANR	3143771	Identifier	getLabelInt		3141956	1					
ANR	3143772	ArgumentList	node		3141956	1					
ANR	3143773	Argument	node		3141956	0					
ANR	3143774	Identifier	node		3141956	0					
ANR	3143775	ExpressionStatement	sked [ idx ] = intLabel		3141956	2					
ANR	3143776	AssignmentExpression	sked [ idx ] = intLabel		3141956	0		=			
ANR	3143777	ArrayIndexing	sked [ idx ]		3141956	0					
ANR	3143778	Identifier	sked		3141956	0					
ANR	3143779	Identifier	idx		3141956	1					
ANR	3143780	Identifier	intLabel		3141956	1					
ANR	3143781	ExpressionStatement	idx ++		3141956	3					
ANR	3143782	PostIncDecOperationExpression	idx ++		3141956	0					
ANR	3143783	Identifier	idx		3141956	0					
ANR	3143784	IncDec	++		3141956	1					
ANR	3143785	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( intLabel ) ;		3141956	4					
ANR	3143786	IdentifierDecl	* stringLabel = g . getLabelString ( intLabel )		3141956	0					
ANR	3143787	IdentifierDeclType	const char *		3141956	0					
ANR	3143788	Identifier	stringLabel		3141956	1					
ANR	3143789	AssignmentExpression	* stringLabel = g . getLabelString ( intLabel )		3141956	2		=			
ANR	3143790	Identifier	stringLabel		3141956	0					
ANR	3143791	CallExpression	g . getLabelString ( intLabel )		3141956	1					
ANR	3143792	Callee	g . getLabelString		3141956	0					
ANR	3143793	MemberAccess	g . getLabelString		3141956	0					
ANR	3143794	Identifier	g		3141956	0					
ANR	3143795	Identifier	getLabelString		3141956	1					
ANR	3143796	ArgumentList	intLabel		3141956	1					
ANR	3143797	Argument	intLabel		3141956	0					
ANR	3143798	Identifier	intLabel		3141956	0					
ANR	3143799	ExpressionStatement	"printf ( ""constituent %d  node %d  intLabel %d  stringLabel %s\\n"" , maxSrc , node , intLabel , stringLabel )"		3141956	5					
ANR	3143800	CallExpression	"printf ( ""constituent %d  node %d  intLabel %d  stringLabel %s\\n"" , maxSrc , node , intLabel , stringLabel )"		3141956	0					
ANR	3143801	Callee	printf		3141956	0					
ANR	3143802	Identifier	printf		3141956	0					
ANR	3143803	ArgumentList	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		3141956	1					
ANR	3143804	Argument	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		3141956	0					
ANR	3143805	PrimaryExpression	"""constituent %d  node %d  intLabel %d  stringLabel %s\\n"""		3141956	0					
ANR	3143806	Argument	maxSrc		3141956	1					
ANR	3143807	Identifier	maxSrc		3141956	0					
ANR	3143808	Argument	node		3141956	2					
ANR	3143809	Identifier	node		3141956	0					
ANR	3143810	Argument	intLabel		3141956	3					
ANR	3143811	Identifier	intLabel		3141956	0					
ANR	3143812	Argument	stringLabel		3141956	4					
ANR	3143813	Identifier	stringLabel		3141956	0					
ANR	3143814	IfStatement	if ( argumPrio )		3141956	6					
ANR	3143815	Condition	argumPrio		3141956	0					
ANR	3143816	Identifier	argumPrio		3141956	0					
ANR	3143817	CompoundStatement		407:20:11826:11826	3141956	1					
ANR	3143818	ExpressionStatement	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		3141956	0					
ANR	3143819	CallExpression	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		3141956	0					
ANR	3143820	Callee	fprintf		3141956	0					
ANR	3143821	Identifier	fprintf		3141956	0					
ANR	3143822	ArgumentList	fPrio		3141956	1					
ANR	3143823	Argument	fPrio		3141956	0					
ANR	3143824	Identifier	fPrio		3141956	0					
ANR	3143825	Argument	"""%s\\n"""		3141956	1					
ANR	3143826	PrimaryExpression	"""%s\\n"""		3141956	0					
ANR	3143827	Argument	stringLabel		3141956	2					
ANR	3143828	Identifier	stringLabel		3141956	0					
ANR	3143829	ExpressionStatement			3141956	7					
ANR	3143830	ExpressionStatement			3141956	10					
ANR	3143831	Statement	delete		3141956	11					
ANR	3143832	ExpressionStatement	btreeTab [ maxSrc ]		3141956	12					
ANR	3143833	ArrayIndexing	btreeTab [ maxSrc ]		3141956	0					
ANR	3143834	Identifier	btreeTab		3141956	0					
ANR	3143835	Identifier	maxSrc		3141956	1					
ANR	3143836	ExpressionStatement	btreeTab [ maxSrc ] = NULL		3141956	13					
ANR	3143837	AssignmentExpression	btreeTab [ maxSrc ] = NULL		3141956	0		=			
ANR	3143838	ArrayIndexing	btreeTab [ maxSrc ]		3141956	0					
ANR	3143839	Identifier	btreeTab		3141956	0					
ANR	3143840	Identifier	maxSrc		3141956	1					
ANR	3143841	Identifier	NULL		3141956	1					
ANR	3143842	ExpressionStatement	sources . removeElem ( maxSrc )		3141956	14					
ANR	3143843	CallExpression	sources . removeElem ( maxSrc )		3141956	0					
ANR	3143844	Callee	sources . removeElem		3141956	0					
ANR	3143845	MemberAccess	sources . removeElem		3141956	0					
ANR	3143846	Identifier	sources		3141956	0					
ANR	3143847	Identifier	removeElem		3141956	1					
ANR	3143848	ArgumentList	maxSrc		3141956	1					
ANR	3143849	Argument	maxSrc		3141956	0					
ANR	3143850	Identifier	maxSrc		3141956	0					
ANR	3143851	ExpressionStatement	numParents [ maxSrc ] = - 1		3141956	15					
ANR	3143852	AssignmentExpression	numParents [ maxSrc ] = - 1		3141956	0		=			
ANR	3143853	ArrayIndexing	numParents [ maxSrc ]		3141956	0					
ANR	3143854	Identifier	numParents		3141956	0					
ANR	3143855	Identifier	maxSrc		3141956	1					
ANR	3143856	UnaryOperationExpression	- 1		3141956	1					
ANR	3143857	UnaryOperator	-		3141956	0					
ANR	3143858	PrimaryExpression	1		3141956	1					
ANR	3143859	ForStatement	for ( k = 0 ; k < superdag . getNumArcs ( maxSrc ) ; k ++ )		3141956	16					
ANR	3143860	ForInit	k = 0 ;		3141956	0					
ANR	3143861	AssignmentExpression	k = 0		3141956	0		=			
ANR	3143862	Identifier	k		3141956	0					
ANR	3143863	PrimaryExpression	0		3141956	1					
ANR	3143864	Condition	k < superdag . getNumArcs ( maxSrc )		3141956	1					
ANR	3143865	RelationalExpression	k < superdag . getNumArcs ( maxSrc )		3141956	0		<			
ANR	3143866	Identifier	k		3141956	0					
ANR	3143867	CallExpression	superdag . getNumArcs ( maxSrc )		3141956	1					
ANR	3143868	Callee	superdag . getNumArcs		3141956	0					
ANR	3143869	MemberAccess	superdag . getNumArcs		3141956	0					
ANR	3143870	Identifier	superdag		3141956	0					
ANR	3143871	Identifier	getNumArcs		3141956	1					
ANR	3143872	ArgumentList	maxSrc		3141956	1					
ANR	3143873	Argument	maxSrc		3141956	0					
ANR	3143874	Identifier	maxSrc		3141956	0					
ANR	3143875	PostIncDecOperationExpression	k ++		3141956	2					
ANR	3143876	Identifier	k		3141956	0					
ANR	3143877	IncDec	++		3141956	1					
ANR	3143878	CompoundStatement		428:4:12348:12385	3141956	3					
ANR	3143879	IdentifierDeclStatement	"int child = superdag . getArc ( maxSrc , k ) ;"		3141956	0					
ANR	3143880	IdentifierDecl	"child = superdag . getArc ( maxSrc , k )"		3141956	0					
ANR	3143881	IdentifierDeclType	int		3141956	0					
ANR	3143882	Identifier	child		3141956	1					
ANR	3143883	AssignmentExpression	"child = superdag . getArc ( maxSrc , k )"		3141956	2		=			
ANR	3143884	Identifier	child		3141956	0					
ANR	3143885	CallExpression	"superdag . getArc ( maxSrc , k )"		3141956	1					
ANR	3143886	Callee	superdag . getArc		3141956	0					
ANR	3143887	MemberAccess	superdag . getArc		3141956	0					
ANR	3143888	Identifier	superdag		3141956	0					
ANR	3143889	Identifier	getArc		3141956	1					
ANR	3143890	ArgumentList	maxSrc		3141956	1					
ANR	3143891	Argument	maxSrc		3141956	0					
ANR	3143892	Identifier	maxSrc		3141956	0					
ANR	3143893	Argument	k		3141956	1					
ANR	3143894	Identifier	k		3141956	0					
ANR	3143895	ExpressionStatement	numParents [ child ] --		3141956	1					
ANR	3143896	PostIncDecOperationExpression	numParents [ child ] --		3141956	0					
ANR	3143897	ArrayIndexing	numParents [ child ]		3141956	0					
ANR	3143898	Identifier	numParents		3141956	0					
ANR	3143899	Identifier	child		3141956	1					
ANR	3143900	IncDec	--		3141956	1					
ANR	3143901	IfStatement	if ( 0 == numParents [ child ] )		3141956	2					
ANR	3143902	Condition	0 == numParents [ child ]		3141956	0					
ANR	3143903	EqualityExpression	0 == numParents [ child ]		3141956	0		==			
ANR	3143904	PrimaryExpression	0		3141956	0					
ANR	3143905	ArrayIndexing	numParents [ child ]		3141956	1					
ANR	3143906	Identifier	numParents		3141956	0					
ANR	3143907	Identifier	child		3141956	1					
ANR	3143908	CompoundStatement		432:33:12491:12491	3141956	1					
ANR	3143909	ExpressionStatement	btreeTab [ child ] = new BTree ( )		3141956	0					
ANR	3143910	AssignmentExpression	btreeTab [ child ] = new BTree ( )		3141956	0		=			
ANR	3143911	ArrayIndexing	btreeTab [ child ]		3141956	0					
ANR	3143912	Identifier	btreeTab		3141956	0					
ANR	3143913	Identifier	child		3141956	1					
ANR	3143914	UnaryExpression	new BTree ( )		3141956	1					
ANR	3143915	IfStatement	if ( NULL == btreeTab [ child ] )		3141956	1					
ANR	3143916	Condition	NULL == btreeTab [ child ]		3141956	0					
ANR	3143917	EqualityExpression	NULL == btreeTab [ child ]		3141956	0		==			
ANR	3143918	Identifier	NULL		3141956	0					
ANR	3143919	ArrayIndexing	btreeTab [ child ]		3141956	1					
ANR	3143920	Identifier	btreeTab		3141956	0					
ANR	3143921	Identifier	child		3141956	1					
ANR	3143922	ThrowStatement	"throw ""prio, btreeTab[child] is NULL"" ;"		3141956	1					
ANR	3143923	PrimaryExpression	"""prio, btreeTab[child] is NULL"""		3141956	0					
ANR	3143924	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		3141956	2					
ANR	3143925	ForInit	j = 0 ;		3141956	0					
ANR	3143926	AssignmentExpression	j = 0		3141956	0		=			
ANR	3143927	Identifier	j		3141956	0					
ANR	3143928	PrimaryExpression	0		3141956	1					
ANR	3143929	Condition	j < sources . getNumElem ( )		3141956	1					
ANR	3143930	RelationalExpression	j < sources . getNumElem ( )		3141956	0		<			
ANR	3143931	Identifier	j		3141956	0					
ANR	3143932	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3143933	Callee	sources . getNumElem		3141956	0					
ANR	3143934	MemberAccess	sources . getNumElem		3141956	0					
ANR	3143935	Identifier	sources		3141956	0					
ANR	3143936	Identifier	getNumElem		3141956	1					
ANR	3143937	ArgumentList			3141956	1					
ANR	3143938	PostIncDecOperationExpression	j ++		3141956	2					
ANR	3143939	Identifier	j		3141956	0					
ANR	3143940	IncDec	++		3141956	1					
ANR	3143941	CompoundStatement		444:6:12927:12964	3141956	3					
ANR	3143942	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		3141956	0					
ANR	3143943	IdentifierDecl	srcB = sources . getElem ( j )		3141956	0					
ANR	3143944	IdentifierDeclType	int		3141956	0					
ANR	3143945	Identifier	srcB		3141956	1					
ANR	3143946	AssignmentExpression	srcB = sources . getElem ( j )		3141956	2		=			
ANR	3143947	Identifier	srcB		3141956	0					
ANR	3143948	CallExpression	sources . getElem ( j )		3141956	1					
ANR	3143949	Callee	sources . getElem		3141956	0					
ANR	3143950	MemberAccess	sources . getElem		3141956	0					
ANR	3143951	Identifier	sources		3141956	0					
ANR	3143952	Identifier	getElem		3141956	1					
ANR	3143953	ArgumentList	j		3141956	1					
ANR	3143954	Argument	j		3141956	0					
ANR	3143955	Identifier	j		3141956	0					
ANR	3143956	ExpressionStatement	"c = lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	1					
ANR	3143957	AssignmentExpression	"c = lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	0		=			
ANR	3143958	Identifier	c		3141956	0					
ANR	3143959	CallExpression	"lib . getPriority ( eligPlot [ child ] , nonSink [ child ] , eligPlot [ srcB ] , nonSink [ srcB ] )"		3141956	1					
ANR	3143960	Callee	lib . getPriority		3141956	0					
ANR	3143961	MemberAccess	lib . getPriority		3141956	0					
ANR	3143962	Identifier	lib		3141956	0					
ANR	3143963	Identifier	getPriority		3141956	1					
ANR	3143964	ArgumentList	eligPlot [ child ]		3141956	1					
ANR	3143965	Argument	eligPlot [ child ]		3141956	0					
ANR	3143966	ArrayIndexing	eligPlot [ child ]		3141956	0					
ANR	3143967	Identifier	eligPlot		3141956	0					
ANR	3143968	Identifier	child		3141956	1					
ANR	3143969	Argument	nonSink [ child ]		3141956	1					
ANR	3143970	ArrayIndexing	nonSink [ child ]		3141956	0					
ANR	3143971	Identifier	nonSink		3141956	0					
ANR	3143972	Identifier	child		3141956	1					
ANR	3143973	Argument	eligPlot [ srcB ]		3141956	2					
ANR	3143974	ArrayIndexing	eligPlot [ srcB ]		3141956	0					
ANR	3143975	Identifier	eligPlot		3141956	0					
ANR	3143976	Identifier	srcB		3141956	1					
ANR	3143977	Argument	nonSink [ srcB ]		3141956	3					
ANR	3143978	ArrayIndexing	nonSink [ srcB ]		3141956	0					
ANR	3143979	Identifier	nonSink		3141956	0					
ANR	3143980	Identifier	srcB		3141956	1					
ANR	3143981	ExpressionStatement	c *= ULONG_MAX / 2		3141956	2					
ANR	3143982	AssignmentExpression	c *= ULONG_MAX / 2		3141956	0		*=			
ANR	3143983	Identifier	c		3141956	0					
ANR	3143984	MultiplicativeExpression	ULONG_MAX / 2		3141956	1		/			
ANR	3143985	Identifier	ULONG_MAX		3141956	0					
ANR	3143986	PrimaryExpression	2		3141956	1					
ANR	3143987	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		3141956	3					
ANR	3143988	IdentifierDecl	key = ( unsigned long ) c		3141956	0					
ANR	3143989	IdentifierDeclType	unsigned long		3141956	0					
ANR	3143990	Identifier	key		3141956	1					
ANR	3143991	AssignmentExpression	key = ( unsigned long ) c		3141956	2		=			
ANR	3143992	Identifier	key		3141956	0					
ANR	3143993	CastExpression	( unsigned long ) c		3141956	1					
ANR	3143994	CastTarget	unsigned long		3141956	0					
ANR	3143995	Identifier	c		3141956	1					
ANR	3143996	ExpressionStatement	"btreeTab [ child ] -> insert ( key , srcB )"		3141956	4					
ANR	3143997	CallExpression	"btreeTab [ child ] -> insert ( key , srcB )"		3141956	0					
ANR	3143998	Callee	btreeTab [ child ] -> insert		3141956	0					
ANR	3143999	PtrMemberAccess	btreeTab [ child ] -> insert		3141956	0					
ANR	3144000	ArrayIndexing	btreeTab [ child ]		3141956	0					
ANR	3144001	Identifier	btreeTab		3141956	0					
ANR	3144002	Identifier	child		3141956	1					
ANR	3144003	Identifier	insert		3141956	1					
ANR	3144004	ArgumentList	key		3141956	1					
ANR	3144005	Argument	key		3141956	0					
ANR	3144006	Identifier	key		3141956	0					
ANR	3144007	Argument	srcB		3141956	1					
ANR	3144008	Identifier	srcB		3141956	0					
ANR	3144009	ExpressionStatement			3141956	3					
ANR	3144010	ForStatement	for ( j = 0 ; j < sources . getNumElem ( ) ; j ++ )		3141956	4					
ANR	3144011	ForInit	j = 0 ;		3141956	0					
ANR	3144012	AssignmentExpression	j = 0		3141956	0		=			
ANR	3144013	Identifier	j		3141956	0					
ANR	3144014	PrimaryExpression	0		3141956	1					
ANR	3144015	Condition	j < sources . getNumElem ( )		3141956	1					
ANR	3144016	RelationalExpression	j < sources . getNumElem ( )		3141956	0		<			
ANR	3144017	Identifier	j		3141956	0					
ANR	3144018	CallExpression	sources . getNumElem ( )		3141956	1					
ANR	3144019	Callee	sources . getNumElem		3141956	0					
ANR	3144020	MemberAccess	sources . getNumElem		3141956	0					
ANR	3144021	Identifier	sources		3141956	0					
ANR	3144022	Identifier	getNumElem		3141956	1					
ANR	3144023	ArgumentList			3141956	1					
ANR	3144024	PostIncDecOperationExpression	j ++		3141956	2					
ANR	3144025	Identifier	j		3141956	0					
ANR	3144026	IncDec	++		3141956	1					
ANR	3144027	CompoundStatement		453:6:13371:13408	3141956	3					
ANR	3144028	IdentifierDeclStatement	int srcB = sources . getElem ( j ) ;		3141956	0					
ANR	3144029	IdentifierDecl	srcB = sources . getElem ( j )		3141956	0					
ANR	3144030	IdentifierDeclType	int		3141956	0					
ANR	3144031	Identifier	srcB		3141956	1					
ANR	3144032	AssignmentExpression	srcB = sources . getElem ( j )		3141956	2		=			
ANR	3144033	Identifier	srcB		3141956	0					
ANR	3144034	CallExpression	sources . getElem ( j )		3141956	1					
ANR	3144035	Callee	sources . getElem		3141956	0					
ANR	3144036	MemberAccess	sources . getElem		3141956	0					
ANR	3144037	Identifier	sources		3141956	0					
ANR	3144038	Identifier	getElem		3141956	1					
ANR	3144039	ArgumentList	j		3141956	1					
ANR	3144040	Argument	j		3141956	0					
ANR	3144041	Identifier	j		3141956	0					
ANR	3144042	ExpressionStatement	"c = lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		3141956	1					
ANR	3144043	AssignmentExpression	"c = lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		3141956	0		=			
ANR	3144044	Identifier	c		3141956	0					
ANR	3144045	CallExpression	"lib . getPriority ( eligPlot [ srcB ] , nonSink [ srcB ] , eligPlot [ child ] , nonSink [ child ] )"		3141956	1					
ANR	3144046	Callee	lib . getPriority		3141956	0					
ANR	3144047	MemberAccess	lib . getPriority		3141956	0					
ANR	3144048	Identifier	lib		3141956	0					
ANR	3144049	Identifier	getPriority		3141956	1					
ANR	3144050	ArgumentList	eligPlot [ srcB ]		3141956	1					
ANR	3144051	Argument	eligPlot [ srcB ]		3141956	0					
ANR	3144052	ArrayIndexing	eligPlot [ srcB ]		3141956	0					
ANR	3144053	Identifier	eligPlot		3141956	0					
ANR	3144054	Identifier	srcB		3141956	1					
ANR	3144055	Argument	nonSink [ srcB ]		3141956	1					
ANR	3144056	ArrayIndexing	nonSink [ srcB ]		3141956	0					
ANR	3144057	Identifier	nonSink		3141956	0					
ANR	3144058	Identifier	srcB		3141956	1					
ANR	3144059	Argument	eligPlot [ child ]		3141956	2					
ANR	3144060	ArrayIndexing	eligPlot [ child ]		3141956	0					
ANR	3144061	Identifier	eligPlot		3141956	0					
ANR	3144062	Identifier	child		3141956	1					
ANR	3144063	Argument	nonSink [ child ]		3141956	3					
ANR	3144064	ArrayIndexing	nonSink [ child ]		3141956	0					
ANR	3144065	Identifier	nonSink		3141956	0					
ANR	3144066	Identifier	child		3141956	1					
ANR	3144067	ExpressionStatement	c *= ULONG_MAX / 2		3141956	2					
ANR	3144068	AssignmentExpression	c *= ULONG_MAX / 2		3141956	0		*=			
ANR	3144069	Identifier	c		3141956	0					
ANR	3144070	MultiplicativeExpression	ULONG_MAX / 2		3141956	1		/			
ANR	3144071	Identifier	ULONG_MAX		3141956	0					
ANR	3144072	PrimaryExpression	2		3141956	1					
ANR	3144073	IdentifierDeclStatement	unsigned long key = ( unsigned long ) c ;		3141956	3					
ANR	3144074	IdentifierDecl	key = ( unsigned long ) c		3141956	0					
ANR	3144075	IdentifierDeclType	unsigned long		3141956	0					
ANR	3144076	Identifier	key		3141956	1					
ANR	3144077	AssignmentExpression	key = ( unsigned long ) c		3141956	2		=			
ANR	3144078	Identifier	key		3141956	0					
ANR	3144079	CastExpression	( unsigned long ) c		3141956	1					
ANR	3144080	CastTarget	unsigned long		3141956	0					
ANR	3144081	Identifier	c		3141956	1					
ANR	3144082	ExpressionStatement	"btreeTab [ srcB ] -> insert ( key , child )"		3141956	4					
ANR	3144083	CallExpression	"btreeTab [ srcB ] -> insert ( key , child )"		3141956	0					
ANR	3144084	Callee	btreeTab [ srcB ] -> insert		3141956	0					
ANR	3144085	PtrMemberAccess	btreeTab [ srcB ] -> insert		3141956	0					
ANR	3144086	ArrayIndexing	btreeTab [ srcB ]		3141956	0					
ANR	3144087	Identifier	btreeTab		3141956	0					
ANR	3144088	Identifier	srcB		3141956	1					
ANR	3144089	Identifier	insert		3141956	1					
ANR	3144090	ArgumentList	key		3141956	1					
ANR	3144091	Argument	key		3141956	0					
ANR	3144092	Identifier	key		3141956	0					
ANR	3144093	Argument	child		3141956	1					
ANR	3144094	Identifier	child		3141956	0					
ANR	3144095	ExpressionStatement			3141956	5					
ANR	3144096	ExpressionStatement	sources . append ( child )		3141956	6					
ANR	3144097	CallExpression	sources . append ( child )		3141956	0					
ANR	3144098	Callee	sources . append		3141956	0					
ANR	3144099	MemberAccess	sources . append		3141956	0					
ANR	3144100	Identifier	sources		3141956	0					
ANR	3144101	Identifier	append		3141956	1					
ANR	3144102	ArgumentList	child		3141956	1					
ANR	3144103	Argument	child		3141956	0					
ANR	3144104	Identifier	child		3141956	0					
ANR	3144105	ExpressionStatement			3141956	3					
ANR	3144106	ExpressionStatement			3141956	17					
ANR	3144107	ExpressionStatement			3141956	75					
ANR	3144108	ExpressionStatement	"printf ( ""-- scheduling all sinks of G\\n"" )"		3141956	76					
ANR	3144109	CallExpression	"printf ( ""-- scheduling all sinks of G\\n"" )"		3141956	0					
ANR	3144110	Callee	printf		3141956	0					
ANR	3144111	Identifier	printf		3141956	0					
ANR	3144112	ArgumentList	"""-- scheduling all sinks of G\\n"""		3141956	1					
ANR	3144113	Argument	"""-- scheduling all sinks of G\\n"""		3141956	0					
ANR	3144114	PrimaryExpression	"""-- scheduling all sinks of G\\n"""		3141956	0					
ANR	3144115	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	77					
ANR	3144116	ForInit	i = 0 ;		3141956	0					
ANR	3144117	AssignmentExpression	i = 0		3141956	0		=			
ANR	3144118	Identifier	i		3141956	0					
ANR	3144119	PrimaryExpression	0		3141956	1					
ANR	3144120	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3144121	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3144122	Identifier	i		3141956	0					
ANR	3144123	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3144124	Callee	g . getNumNodes		3141956	0					
ANR	3144125	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144126	Identifier	g		3141956	0					
ANR	3144127	Identifier	getNumNodes		3141956	1					
ANR	3144128	ArgumentList			3141956	1					
ANR	3144129	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3144130	Identifier	i		3141956	0					
ANR	3144131	IncDec	++		3141956	1					
ANR	3144132	CompoundStatement		471:37:13695:13695	3141956	3					
ANR	3144133	IfStatement	if ( 0 == g . getNumArcs ( i ) )		3141956	0					
ANR	3144134	Condition	0 == g . getNumArcs ( i )		3141956	0					
ANR	3144135	EqualityExpression	0 == g . getNumArcs ( i )		3141956	0		==			
ANR	3144136	PrimaryExpression	0		3141956	0					
ANR	3144137	CallExpression	g . getNumArcs ( i )		3141956	1					
ANR	3144138	Callee	g . getNumArcs		3141956	0					
ANR	3144139	MemberAccess	g . getNumArcs		3141956	0					
ANR	3144140	Identifier	g		3141956	0					
ANR	3144141	Identifier	getNumArcs		3141956	1					
ANR	3144142	ArgumentList	i		3141956	1					
ANR	3144143	Argument	i		3141956	0					
ANR	3144144	Identifier	i		3141956	0					
ANR	3144145	CompoundStatement		478:4:13793:13839	3141956	1					
ANR	3144146	ExpressionStatement	sked [ idx ] = i		3141956	0					
ANR	3144147	AssignmentExpression	sked [ idx ] = i		3141956	0		=			
ANR	3144148	ArrayIndexing	sked [ idx ]		3141956	0					
ANR	3144149	Identifier	sked		3141956	0					
ANR	3144150	Identifier	idx		3141956	1					
ANR	3144151	Identifier	i		3141956	1					
ANR	3144152	ExpressionStatement	idx ++		3141956	1					
ANR	3144153	PostIncDecOperationExpression	idx ++		3141956	0					
ANR	3144154	Identifier	idx		3141956	0					
ANR	3144155	IncDec	++		3141956	1					
ANR	3144156	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( i ) ;		3141956	2					
ANR	3144157	IdentifierDecl	* stringLabel = g . getLabelString ( i )		3141956	0					
ANR	3144158	IdentifierDeclType	const char *		3141956	0					
ANR	3144159	Identifier	stringLabel		3141956	1					
ANR	3144160	AssignmentExpression	* stringLabel = g . getLabelString ( i )		3141956	2		=			
ANR	3144161	Identifier	stringLabel		3141956	0					
ANR	3144162	CallExpression	g . getLabelString ( i )		3141956	1					
ANR	3144163	Callee	g . getLabelString		3141956	0					
ANR	3144164	MemberAccess	g . getLabelString		3141956	0					
ANR	3144165	Identifier	g		3141956	0					
ANR	3144166	Identifier	getLabelString		3141956	1					
ANR	3144167	ArgumentList	i		3141956	1					
ANR	3144168	Argument	i		3141956	0					
ANR	3144169	Identifier	i		3141956	0					
ANR	3144170	ExpressionStatement	"printf ( ""%s \\n"" , stringLabel )"		3141956	3					
ANR	3144171	CallExpression	"printf ( ""%s \\n"" , stringLabel )"		3141956	0					
ANR	3144172	Callee	printf		3141956	0					
ANR	3144173	Identifier	printf		3141956	0					
ANR	3144174	ArgumentList	"""%s \\n"""		3141956	1					
ANR	3144175	Argument	"""%s \\n"""		3141956	0					
ANR	3144176	PrimaryExpression	"""%s \\n"""		3141956	0					
ANR	3144177	Argument	stringLabel		3141956	1					
ANR	3144178	Identifier	stringLabel		3141956	0					
ANR	3144179	IfStatement	if ( argumPrio )		3141956	4					
ANR	3144180	Condition	argumPrio		3141956	0					
ANR	3144181	Identifier	argumPrio		3141956	0					
ANR	3144182	CompoundStatement		485:20:13965:13965	3141956	1					
ANR	3144183	ExpressionStatement	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		3141956	0					
ANR	3144184	CallExpression	"fprintf ( fPrio , ""%s\\n"" , stringLabel )"		3141956	0					
ANR	3144185	Callee	fprintf		3141956	0					
ANR	3144186	Identifier	fprintf		3141956	0					
ANR	3144187	ArgumentList	fPrio		3141956	1					
ANR	3144188	Argument	fPrio		3141956	0					
ANR	3144189	Identifier	fPrio		3141956	0					
ANR	3144190	Argument	"""%s\\n"""		3141956	1					
ANR	3144191	PrimaryExpression	"""%s\\n"""		3141956	0					
ANR	3144192	Argument	stringLabel		3141956	2					
ANR	3144193	Identifier	stringLabel		3141956	0					
ANR	3144194	ExpressionStatement			3141956	5					
ANR	3144195	ExpressionStatement			3141956	1					
ANR	3144196	ExpressionStatement			3141956	78					
ANR	3144197	IfStatement	if ( argumPrio )		3141956	79					
ANR	3144198	Condition	argumPrio		3141956	0					
ANR	3144199	Identifier	argumPrio		3141956	0					
ANR	3144200	CompoundStatement		492:18:14048:14048	3141956	1					
ANR	3144201	ExpressionStatement	fclose ( fPrio )		3141956	0					
ANR	3144202	CallExpression	fclose ( fPrio )		3141956	0					
ANR	3144203	Callee	fclose		3141956	0					
ANR	3144204	Identifier	fclose		3141956	0					
ANR	3144205	ArgumentList	fPrio		3141956	1					
ANR	3144206	Argument	fPrio		3141956	0					
ANR	3144207	Identifier	fPrio		3141956	0					
ANR	3144208	ExpressionStatement			3141956	80					
ANR	3144209	IfStatement	if ( argumElig )		3141956	81					
ANR	3144210	Condition	argumElig		3141956	0					
ANR	3144211	Identifier	argumElig		3141956	0					
ANR	3144212	CompoundStatement		508:3:14307:14345	3141956	1					
ANR	3144213	ExpressionStatement	"printf ( ""-- computing eligibility plot\\n"" )"		3141956	0					
ANR	3144214	CallExpression	"printf ( ""-- computing eligibility plot\\n"" )"		3141956	0					
ANR	3144215	Callee	printf		3141956	0					
ANR	3144216	Identifier	printf		3141956	0					
ANR	3144217	ArgumentList	"""-- computing eligibility plot\\n"""		3141956	1					
ANR	3144218	Argument	"""-- computing eligibility plot\\n"""		3141956	0					
ANR	3144219	PrimaryExpression	"""-- computing eligibility plot\\n"""		3141956	0					
ANR	3144220	IdentifierDeclStatement	int * elig = g . getEligPlot ( sked ) ;		3141956	1					
ANR	3144221	IdentifierDecl	* elig = g . getEligPlot ( sked )		3141956	0					
ANR	3144222	IdentifierDeclType	int *		3141956	0					
ANR	3144223	Identifier	elig		3141956	1					
ANR	3144224	AssignmentExpression	* elig = g . getEligPlot ( sked )		3141956	2		=			
ANR	3144225	Identifier	elig		3141956	0					
ANR	3144226	CallExpression	g . getEligPlot ( sked )		3141956	1					
ANR	3144227	Callee	g . getEligPlot		3141956	0					
ANR	3144228	MemberAccess	g . getEligPlot		3141956	0					
ANR	3144229	Identifier	g		3141956	0					
ANR	3144230	Identifier	getEligPlot		3141956	1					
ANR	3144231	ArgumentList	sked		3141956	1					
ANR	3144232	Argument	sked		3141956	0					
ANR	3144233	Identifier	sked		3141956	0					
ANR	3144234	IfStatement	if ( NULL == elig )		3141956	2					
ANR	3144235	Condition	NULL == elig		3141956	0					
ANR	3144236	EqualityExpression	NULL == elig		3141956	0		==			
ANR	3144237	Identifier	NULL		3141956	0					
ANR	3144238	Identifier	elig		3141956	1					
ANR	3144239	ThrowStatement	"throw ""prio, elig is NULL"" ;"		3141956	1					
ANR	3144240	PrimaryExpression	"""prio, elig is NULL"""		3141956	0					
ANR	3144241	IdentifierDeclStatement	"FILE * fElig = fopen ( fileNameElig , ""wt"" ) ;"		3141956	3					
ANR	3144242	IdentifierDecl	"* fElig = fopen ( fileNameElig , ""wt"" )"		3141956	0					
ANR	3144243	IdentifierDeclType	FILE *		3141956	0					
ANR	3144244	Identifier	fElig		3141956	1					
ANR	3144245	AssignmentExpression	"* fElig = fopen ( fileNameElig , ""wt"" )"		3141956	2		=			
ANR	3144246	Identifier	fElig		3141956	0					
ANR	3144247	CallExpression	"fopen ( fileNameElig , ""wt"" )"		3141956	1					
ANR	3144248	Callee	fopen		3141956	0					
ANR	3144249	Identifier	fopen		3141956	0					
ANR	3144250	ArgumentList	fileNameElig		3141956	1					
ANR	3144251	Argument	fileNameElig		3141956	0					
ANR	3144252	Identifier	fileNameElig		3141956	0					
ANR	3144253	Argument	"""wt"""		3141956	1					
ANR	3144254	PrimaryExpression	"""wt"""		3141956	0					
ANR	3144255	IfStatement	if ( NULL == fElig )		3141956	4					
ANR	3144256	Condition	NULL == fElig		3141956	0					
ANR	3144257	EqualityExpression	NULL == fElig		3141956	0		==			
ANR	3144258	Identifier	NULL		3141956	0					
ANR	3144259	Identifier	fElig		3141956	1					
ANR	3144260	ThrowStatement	"throw ""prio, fElig is NULL"" ;"		3141956	1					
ANR	3144261	PrimaryExpression	"""prio, fElig is NULL"""		3141956	0					
ANR	3144262	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	5					
ANR	3144263	ForInit	i = 0 ;		3141956	0					
ANR	3144264	AssignmentExpression	i = 0		3141956	0		=			
ANR	3144265	Identifier	i		3141956	0					
ANR	3144266	PrimaryExpression	0		3141956	1					
ANR	3144267	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3144268	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3144269	Identifier	i		3141956	0					
ANR	3144270	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3144271	Callee	g . getNumNodes		3141956	0					
ANR	3144272	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144273	Identifier	g		3141956	0					
ANR	3144274	Identifier	getNumNodes		3141956	1					
ANR	3144275	ArgumentList			3141956	1					
ANR	3144276	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3144277	Identifier	i		3141956	0					
ANR	3144278	IncDec	++		3141956	1					
ANR	3144279	ExpressionStatement	"fprintf ( fElig , ""%d\\n"" , elig [ i ] )"		3141956	3					
ANR	3144280	CallExpression	"fprintf ( fElig , ""%d\\n"" , elig [ i ] )"		3141956	0					
ANR	3144281	Callee	fprintf		3141956	0					
ANR	3144282	Identifier	fprintf		3141956	0					
ANR	3144283	ArgumentList	fElig		3141956	1					
ANR	3144284	Argument	fElig		3141956	0					
ANR	3144285	Identifier	fElig		3141956	0					
ANR	3144286	Argument	"""%d\\n"""		3141956	1					
ANR	3144287	PrimaryExpression	"""%d\\n"""		3141956	0					
ANR	3144288	Argument	elig [ i ]		3141956	2					
ANR	3144289	ArrayIndexing	elig [ i ]		3141956	0					
ANR	3144290	Identifier	elig		3141956	0					
ANR	3144291	Identifier	i		3141956	1					
ANR	3144292	ExpressionStatement	fclose ( fElig )		3141956	6					
ANR	3144293	CallExpression	fclose ( fElig )		3141956	0					
ANR	3144294	Callee	fclose		3141956	0					
ANR	3144295	Identifier	fclose		3141956	0					
ANR	3144296	ArgumentList	fElig		3141956	1					
ANR	3144297	Argument	fElig		3141956	0					
ANR	3144298	Identifier	fElig		3141956	0					
ANR	3144299	ExpressionStatement			3141956	82					
ANR	3144300	ExpressionStatement	"printf ( ""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"" )"		3141956	83					
ANR	3144301	CallExpression	"printf ( ""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"" )"		3141956	0					
ANR	3144302	Callee	printf		3141956	0					
ANR	3144303	Identifier	printf		3141956	0					
ANR	3144304	ArgumentList	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		3141956	1					
ANR	3144305	Argument	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		3141956	0					
ANR	3144306	PrimaryExpression	"""-- instrumenting the DAGMan file with priorities (back up as \\"".OLD\\"")\\n"""		3141956	0					
ANR	3144307	IdentifierDeclStatement	const size_t bufSize = 10000 ;		3141956	84					
ANR	3144308	IdentifierDecl	bufSize = 10000		3141956	0					
ANR	3144309	IdentifierDeclType	const size_t		3141956	0					
ANR	3144310	Identifier	bufSize		3141956	1					
ANR	3144311	AssignmentExpression	bufSize = 10000		3141956	2		=			
ANR	3144312	Identifier	bufSize		3141956	0					
ANR	3144313	PrimaryExpression	10000		3141956	1					
ANR	3144314	IdentifierDeclStatement	char buffer1 [ bufSize ] ;		3141956	85					
ANR	3144315	IdentifierDecl	buffer1 [ bufSize ]		3141956	0					
ANR	3144316	IdentifierDeclType	char [ bufSize ]		3141956	0					
ANR	3144317	Identifier	buffer1		3141956	1					
ANR	3144318	Identifier	bufSize		3141956	2					
ANR	3144319	IdentifierDeclStatement	char buffer2 [ bufSize ] ;		3141956	86					
ANR	3144320	IdentifierDecl	buffer2 [ bufSize ]		3141956	0					
ANR	3144321	IdentifierDeclType	char [ bufSize ]		3141956	0					
ANR	3144322	Identifier	buffer2		3141956	1					
ANR	3144323	Identifier	bufSize		3141956	2					
ANR	3144324	IdentifierDeclStatement	char buffer3 [ bufSize ] ;		3141956	87					
ANR	3144325	IdentifierDecl	buffer3 [ bufSize ]		3141956	0					
ANR	3144326	IdentifierDeclType	char [ bufSize ]		3141956	0					
ANR	3144327	Identifier	buffer3		3141956	1					
ANR	3144328	Identifier	bufSize		3141956	2					
ANR	3144329	IdentifierDeclStatement	char fileNameDagmanPri [ 1000 ] ;		3141956	88					
ANR	3144330	IdentifierDecl	fileNameDagmanPri [ 1000 ]		3141956	0					
ANR	3144331	IdentifierDeclType	char [ 1000 ]		3141956	0					
ANR	3144332	Identifier	fileNameDagmanPri		3141956	1					
ANR	3144333	PrimaryExpression	1000		3141956	2					
ANR	3144334	ExpressionStatement	"snprintf ( fileNameDagmanPri , 1000 , ""%s.NEW"" , fileNameDagman )"		3141956	89					
ANR	3144335	CallExpression	"snprintf ( fileNameDagmanPri , 1000 , ""%s.NEW"" , fileNameDagman )"		3141956	0					
ANR	3144336	Callee	snprintf		3141956	0					
ANR	3144337	Identifier	snprintf		3141956	0					
ANR	3144338	ArgumentList	fileNameDagmanPri		3141956	1					
ANR	3144339	Argument	fileNameDagmanPri		3141956	0					
ANR	3144340	Identifier	fileNameDagmanPri		3141956	0					
ANR	3144341	Argument	1000		3141956	1					
ANR	3144342	PrimaryExpression	1000		3141956	0					
ANR	3144343	Argument	"""%s.NEW"""		3141956	2					
ANR	3144344	PrimaryExpression	"""%s.NEW"""		3141956	0					
ANR	3144345	Argument	fileNameDagman		3141956	3					
ANR	3144346	Identifier	fileNameDagman		3141956	0					
ANR	3144347	IdentifierDeclStatement	FILE * streamOUT ;		3141956	90					
ANR	3144348	IdentifierDecl	* streamOUT		3141956	0					
ANR	3144349	IdentifierDeclType	FILE *		3141956	0					
ANR	3144350	Identifier	streamOUT		3141956	1					
ANR	3144351	ExpressionStatement	"streamOUT = fopen ( fileNameDagmanPri , ""wt"" )"		3141956	91					
ANR	3144352	AssignmentExpression	"streamOUT = fopen ( fileNameDagmanPri , ""wt"" )"		3141956	0		=			
ANR	3144353	Identifier	streamOUT		3141956	0					
ANR	3144354	CallExpression	"fopen ( fileNameDagmanPri , ""wt"" )"		3141956	1					
ANR	3144355	Callee	fopen		3141956	0					
ANR	3144356	Identifier	fopen		3141956	0					
ANR	3144357	ArgumentList	fileNameDagmanPri		3141956	1					
ANR	3144358	Argument	fileNameDagmanPri		3141956	0					
ANR	3144359	Identifier	fileNameDagmanPri		3141956	0					
ANR	3144360	Argument	"""wt"""		3141956	1					
ANR	3144361	PrimaryExpression	"""wt"""		3141956	0					
ANR	3144362	IfStatement	if ( NULL == streamOUT )		3141956	92					
ANR	3144363	Condition	NULL == streamOUT		3141956	0					
ANR	3144364	EqualityExpression	NULL == streamOUT		3141956	0		==			
ANR	3144365	Identifier	NULL		3141956	0					
ANR	3144366	Identifier	streamOUT		3141956	1					
ANR	3144367	ThrowStatement	"throw ""prio, streamOUT is NULL"" ;"		3141956	1					
ANR	3144368	PrimaryExpression	"""prio, streamOUT is NULL"""		3141956	0					
ANR	3144369	IdentifierDeclStatement	StreamTokenizerWithCont * dagmanIN = new StreamTokenizerWithCont ( fileNameDagman ) ;		3141956	93					
ANR	3144370	IdentifierDecl	* dagmanIN = new StreamTokenizerWithCont ( fileNameDagman )		3141956	0					
ANR	3144371	IdentifierDeclType	StreamTokenizerWithCont *		3141956	0					
ANR	3144372	Identifier	dagmanIN		3141956	1					
ANR	3144373	AssignmentExpression	* dagmanIN = new StreamTokenizerWithCont ( fileNameDagman )		3141956	2		=			
ANR	3144374	Identifier	fileNameDagman		3141956	0					
ANR	3144375	Identifier	fileNameDagman		3141956	1					
ANR	3144376	IfStatement	if ( NULL == dagmanIN )		3141956	94					
ANR	3144377	Condition	NULL == dagmanIN		3141956	0					
ANR	3144378	EqualityExpression	NULL == dagmanIN		3141956	0		==			
ANR	3144379	Identifier	NULL		3141956	0					
ANR	3144380	Identifier	dagmanIN		3141956	1					
ANR	3144381	ThrowStatement	"throw ""prio, dagman is NULL"" ;"		3141956	1					
ANR	3144382	PrimaryExpression	"""prio, dagman is NULL"""		3141956	0					
ANR	3144383	WhileStatement	while ( ! dagmanIN -> isEOF ( ) )		3141956	95					
ANR	3144384	Condition	! dagmanIN -> isEOF ( )		3141956	0					
ANR	3144385	UnaryOperationExpression	! dagmanIN -> isEOF ( )		3141956	0					
ANR	3144386	UnaryOperator	!		3141956	0					
ANR	3144387	CallExpression	dagmanIN -> isEOF ( )		3141956	1					
ANR	3144388	Callee	dagmanIN -> isEOF		3141956	0					
ANR	3144389	PtrMemberAccess	dagmanIN -> isEOF		3141956	0					
ANR	3144390	Identifier	dagmanIN		3141956	0					
ANR	3144391	Identifier	isEOF		3141956	1					
ANR	3144392	ArgumentList			3141956	1					
ANR	3144393	CompoundStatement		546:3:15590:15637	3141956	1					
ANR	3144394	IdentifierDeclStatement	"int ret1 = dagmanIN -> readToken ( buffer1 , bufSize ) ;"		3141956	0					
ANR	3144395	IdentifierDecl	"ret1 = dagmanIN -> readToken ( buffer1 , bufSize )"		3141956	0					
ANR	3144396	IdentifierDeclType	int		3141956	0					
ANR	3144397	Identifier	ret1		3141956	1					
ANR	3144398	AssignmentExpression	"ret1 = dagmanIN -> readToken ( buffer1 , bufSize )"		3141956	2		=			
ANR	3144399	Identifier	ret1		3141956	0					
ANR	3144400	CallExpression	"dagmanIN -> readToken ( buffer1 , bufSize )"		3141956	1					
ANR	3144401	Callee	dagmanIN -> readToken		3141956	0					
ANR	3144402	PtrMemberAccess	dagmanIN -> readToken		3141956	0					
ANR	3144403	Identifier	dagmanIN		3141956	0					
ANR	3144404	Identifier	readToken		3141956	1					
ANR	3144405	ArgumentList	buffer1		3141956	1					
ANR	3144406	Argument	buffer1		3141956	0					
ANR	3144407	Identifier	buffer1		3141956	0					
ANR	3144408	Argument	bufSize		3141956	1					
ANR	3144409	Identifier	bufSize		3141956	0					
ANR	3144410	IdentifierDeclStatement	"int ret2 = dagmanIN -> readToken ( buffer2 , bufSize ) ;"		3141956	1					
ANR	3144411	IdentifierDecl	"ret2 = dagmanIN -> readToken ( buffer2 , bufSize )"		3141956	0					
ANR	3144412	IdentifierDeclType	int		3141956	0					
ANR	3144413	Identifier	ret2		3141956	1					
ANR	3144414	AssignmentExpression	"ret2 = dagmanIN -> readToken ( buffer2 , bufSize )"		3141956	2		=			
ANR	3144415	Identifier	ret2		3141956	0					
ANR	3144416	CallExpression	"dagmanIN -> readToken ( buffer2 , bufSize )"		3141956	1					
ANR	3144417	Callee	dagmanIN -> readToken		3141956	0					
ANR	3144418	PtrMemberAccess	dagmanIN -> readToken		3141956	0					
ANR	3144419	Identifier	dagmanIN		3141956	0					
ANR	3144420	Identifier	readToken		3141956	1					
ANR	3144421	ArgumentList	buffer2		3141956	1					
ANR	3144422	Argument	buffer2		3141956	0					
ANR	3144423	Identifier	buffer2		3141956	0					
ANR	3144424	Argument	bufSize		3141956	1					
ANR	3144425	Identifier	bufSize		3141956	0					
ANR	3144426	IdentifierDeclStatement	"int ret3 = dagmanIN -> readToken ( buffer3 , bufSize ) ;"		3141956	2					
ANR	3144427	IdentifierDecl	"ret3 = dagmanIN -> readToken ( buffer3 , bufSize )"		3141956	0					
ANR	3144428	IdentifierDeclType	int		3141956	0					
ANR	3144429	Identifier	ret3		3141956	1					
ANR	3144430	AssignmentExpression	"ret3 = dagmanIN -> readToken ( buffer3 , bufSize )"		3141956	2		=			
ANR	3144431	Identifier	ret3		3141956	0					
ANR	3144432	CallExpression	"dagmanIN -> readToken ( buffer3 , bufSize )"		3141956	1					
ANR	3144433	Callee	dagmanIN -> readToken		3141956	0					
ANR	3144434	PtrMemberAccess	dagmanIN -> readToken		3141956	0					
ANR	3144435	Identifier	dagmanIN		3141956	0					
ANR	3144436	Identifier	readToken		3141956	1					
ANR	3144437	ArgumentList	buffer3		3141956	1					
ANR	3144438	Argument	buffer3		3141956	0					
ANR	3144439	Identifier	buffer3		3141956	0					
ANR	3144440	Argument	bufSize		3141956	1					
ANR	3144441	Identifier	bufSize		3141956	0					
ANR	3144442	IfStatement	if ( 0 != ret1 && 0 != ret2 && 0 != ret3 )		3141956	3					
ANR	3144443	Condition	0 != ret1 && 0 != ret2 && 0 != ret3		3141956	0					
ANR	3144444	AndExpression	0 != ret1 && 0 != ret2 && 0 != ret3		3141956	0		&&			
ANR	3144445	EqualityExpression	0 != ret1		3141956	0		!=			
ANR	3144446	PrimaryExpression	0		3141956	0					
ANR	3144447	Identifier	ret1		3141956	1					
ANR	3144448	AndExpression	0 != ret2 && 0 != ret3		3141956	1		&&			
ANR	3144449	EqualityExpression	0 != ret2		3141956	0		!=			
ANR	3144450	PrimaryExpression	0		3141956	0					
ANR	3144451	Identifier	ret2		3141956	1					
ANR	3144452	EqualityExpression	0 != ret3		3141956	1		!=			
ANR	3144453	PrimaryExpression	0		3141956	0					
ANR	3144454	Identifier	ret3		3141956	1					
ANR	3144455	CompoundStatement		549:39:15723:15723	3141956	1					
ANR	3144456	IfStatement	"if ( 0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) ) )"		3141956	0					
ANR	3144457	Condition	"0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		3141956	0					
ANR	3144458	AndExpression	"0 == stricmp ( buffer1 , ""Vars"" ) && 0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		3141956	0		&&			
ANR	3144459	EqualityExpression	"0 == stricmp ( buffer1 , ""Vars"" )"		3141956	0		==			
ANR	3144460	PrimaryExpression	0		3141956	0					
ANR	3144461	CallExpression	"stricmp ( buffer1 , ""Vars"" )"		3141956	1					
ANR	3144462	Callee	stricmp		3141956	0					
ANR	3144463	Identifier	stricmp		3141956	0					
ANR	3144464	ArgumentList	buffer1		3141956	1					
ANR	3144465	Argument	buffer1		3141956	0					
ANR	3144466	Identifier	buffer1		3141956	0					
ANR	3144467	Argument	"""Vars"""		3141956	1					
ANR	3144468	PrimaryExpression	"""Vars"""		3141956	0					
ANR	3144469	EqualityExpression	"0 == strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		3141956	1		==			
ANR	3144470	PrimaryExpression	0		3141956	0					
ANR	3144471	CallExpression	"strnicmp ( buffer3 , ""JOBPRIORITY"" , strlen ( ""JOBPRIORITY"" ) )"		3141956	1					
ANR	3144472	Callee	strnicmp		3141956	0					
ANR	3144473	Identifier	strnicmp		3141956	0					
ANR	3144474	ArgumentList	buffer3		3141956	1					
ANR	3144475	Argument	buffer3		3141956	0					
ANR	3144476	Identifier	buffer3		3141956	0					
ANR	3144477	Argument	"""JOBPRIORITY"""		3141956	1					
ANR	3144478	PrimaryExpression	"""JOBPRIORITY"""		3141956	0					
ANR	3144479	Argument	"strlen ( ""JOBPRIORITY"" )"		3141956	2					
ANR	3144480	CallExpression	"strlen ( ""JOBPRIORITY"" )"		3141956	0					
ANR	3144481	Callee	strlen		3141956	0					
ANR	3144482	Identifier	strlen		3141956	0					
ANR	3144483	ArgumentList	"""JOBPRIORITY"""		3141956	1					
ANR	3144484	Argument	"""JOBPRIORITY"""		3141956	0					
ANR	3144485	PrimaryExpression	"""JOBPRIORITY"""		3141956	0					
ANR	3144486	CompoundStatement		555:7:15854:15854	3141956	1					
ANR	3144487	ExpressionStatement	dagmanIN -> skipLine ( )		3141956	0					
ANR	3144488	CallExpression	dagmanIN -> skipLine ( )		3141956	0					
ANR	3144489	Callee	dagmanIN -> skipLine		3141956	0					
ANR	3144490	PtrMemberAccess	dagmanIN -> skipLine		3141956	0					
ANR	3144491	Identifier	dagmanIN		3141956	0					
ANR	3144492	Identifier	skipLine		3141956	1					
ANR	3144493	ArgumentList			3141956	1					
ANR	3144494	ExpressionStatement	dagmanIN -> resetRecentLine ( )		3141956	1					
ANR	3144495	CallExpression	dagmanIN -> resetRecentLine ( )		3141956	0					
ANR	3144496	Callee	dagmanIN -> resetRecentLine		3141956	0					
ANR	3144497	PtrMemberAccess	dagmanIN -> resetRecentLine		3141956	0					
ANR	3144498	Identifier	dagmanIN		3141956	0					
ANR	3144499	Identifier	resetRecentLine		3141956	1					
ANR	3144500	ArgumentList			3141956	1					
ANR	3144501	ContinueStatement	continue ;		3141956	2					
ANR	3144502	ExpressionStatement			3141956	4					
ANR	3144503	ExpressionStatement	dagmanIN -> skipLine ( )		3141956	5					
ANR	3144504	CallExpression	dagmanIN -> skipLine ( )		3141956	0					
ANR	3144505	Callee	dagmanIN -> skipLine		3141956	0					
ANR	3144506	PtrMemberAccess	dagmanIN -> skipLine		3141956	0					
ANR	3144507	Identifier	dagmanIN		3141956	0					
ANR	3144508	Identifier	skipLine		3141956	1					
ANR	3144509	ArgumentList			3141956	1					
ANR	3144510	ExpressionStatement	dagmanIN -> saveRecentLine ( streamOUT )		3141956	6					
ANR	3144511	CallExpression	dagmanIN -> saveRecentLine ( streamOUT )		3141956	0					
ANR	3144512	Callee	dagmanIN -> saveRecentLine		3141956	0					
ANR	3144513	PtrMemberAccess	dagmanIN -> saveRecentLine		3141956	0					
ANR	3144514	Identifier	dagmanIN		3141956	0					
ANR	3144515	Identifier	saveRecentLine		3141956	1					
ANR	3144516	ArgumentList	streamOUT		3141956	1					
ANR	3144517	Argument	streamOUT		3141956	0					
ANR	3144518	Identifier	streamOUT		3141956	0					
ANR	3144519	ExpressionStatement	dagmanIN -> resetRecentLine ( )		3141956	7					
ANR	3144520	CallExpression	dagmanIN -> resetRecentLine ( )		3141956	0					
ANR	3144521	Callee	dagmanIN -> resetRecentLine		3141956	0					
ANR	3144522	PtrMemberAccess	dagmanIN -> resetRecentLine		3141956	0					
ANR	3144523	Identifier	dagmanIN		3141956	0					
ANR	3144524	Identifier	resetRecentLine		3141956	1					
ANR	3144525	ArgumentList			3141956	1					
ANR	3144526	ExpressionStatement			3141956	96					
ANR	3144527	Statement	delete		3141956	97					
ANR	3144528	ExpressionStatement	dagmanIN		3141956	98					
ANR	3144529	Identifier	dagmanIN		3141956	0					
ANR	3144530	ExpressionStatement	fclose ( streamOUT )		3141956	99					
ANR	3144531	CallExpression	fclose ( streamOUT )		3141956	0					
ANR	3144532	Callee	fclose		3141956	0					
ANR	3144533	Identifier	fclose		3141956	0					
ANR	3144534	ArgumentList	streamOUT		3141956	1					
ANR	3144535	Argument	streamOUT		3141956	0					
ANR	3144536	Identifier	streamOUT		3141956	0					
ANR	3144537	ExpressionStatement	"streamOUT = fopen ( fileNameDagmanPri , ""a+t"" )"		3141956	100					
ANR	3144538	AssignmentExpression	"streamOUT = fopen ( fileNameDagmanPri , ""a+t"" )"		3141956	0		=			
ANR	3144539	Identifier	streamOUT		3141956	0					
ANR	3144540	CallExpression	"fopen ( fileNameDagmanPri , ""a+t"" )"		3141956	1					
ANR	3144541	Callee	fopen		3141956	0					
ANR	3144542	Identifier	fopen		3141956	0					
ANR	3144543	ArgumentList	fileNameDagmanPri		3141956	1					
ANR	3144544	Argument	fileNameDagmanPri		3141956	0					
ANR	3144545	Identifier	fileNameDagmanPri		3141956	0					
ANR	3144546	Argument	"""a+t"""		3141956	1					
ANR	3144547	PrimaryExpression	"""a+t"""		3141956	0					
ANR	3144548	IfStatement	if ( NULL == streamOUT )		3141956	101					
ANR	3144549	Condition	NULL == streamOUT		3141956	0					
ANR	3144550	EqualityExpression	NULL == streamOUT		3141956	0		==			
ANR	3144551	Identifier	NULL		3141956	0					
ANR	3144552	Identifier	streamOUT		3141956	1					
ANR	3144553	ThrowStatement	"throw ""prio, streamOUT is NULL"" ;"		3141956	1					
ANR	3144554	PrimaryExpression	"""prio, streamOUT is NULL"""		3141956	0					
ANR	3144555	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	102					
ANR	3144556	ForInit	i = 0 ;		3141956	0					
ANR	3144557	AssignmentExpression	i = 0		3141956	0		=			
ANR	3144558	Identifier	i		3141956	0					
ANR	3144559	PrimaryExpression	0		3141956	1					
ANR	3144560	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3144561	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3144562	Identifier	i		3141956	0					
ANR	3144563	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3144564	Callee	g . getNumNodes		3141956	0					
ANR	3144565	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144566	Identifier	g		3141956	0					
ANR	3144567	Identifier	getNumNodes		3141956	1					
ANR	3144568	ArgumentList			3141956	1					
ANR	3144569	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3144570	Identifier	i		3141956	0					
ANR	3144571	IncDec	++		3141956	1					
ANR	3144572	CompoundStatement		582:3:16471:16525	3141956	3					
ANR	3144573	IdentifierDeclStatement	const char * stringLabel = g . getLabelString ( sked [ i ] ) ;		3141956	0					
ANR	3144574	IdentifierDecl	* stringLabel = g . getLabelString ( sked [ i ] )		3141956	0					
ANR	3144575	IdentifierDeclType	const char *		3141956	0					
ANR	3144576	Identifier	stringLabel		3141956	1					
ANR	3144577	AssignmentExpression	* stringLabel = g . getLabelString ( sked [ i ] )		3141956	2		=			
ANR	3144578	Identifier	stringLabel		3141956	0					
ANR	3144579	CallExpression	g . getLabelString ( sked [ i ] )		3141956	1					
ANR	3144580	Callee	g . getLabelString		3141956	0					
ANR	3144581	MemberAccess	g . getLabelString		3141956	0					
ANR	3144582	Identifier	g		3141956	0					
ANR	3144583	Identifier	getLabelString		3141956	1					
ANR	3144584	ArgumentList	sked [ i ]		3141956	1					
ANR	3144585	Argument	sked [ i ]		3141956	0					
ANR	3144586	ArrayIndexing	sked [ i ]		3141956	0					
ANR	3144587	Identifier	sked		3141956	0					
ANR	3144588	Identifier	i		3141956	1					
ANR	3144589	ExpressionStatement	"fprintf ( streamOUT , ""Vars %s JOBPRIORITY=\\""%d\\""\\n"" , stringLabel , g . getNumNodes ( ) - i )"		3141956	1					
ANR	3144590	CallExpression	"fprintf ( streamOUT , ""Vars %s JOBPRIORITY=\\""%d\\""\\n"" , stringLabel , g . getNumNodes ( ) - i )"		3141956	0					
ANR	3144591	Callee	fprintf		3141956	0					
ANR	3144592	Identifier	fprintf		3141956	0					
ANR	3144593	ArgumentList	streamOUT		3141956	1					
ANR	3144594	Argument	streamOUT		3141956	0					
ANR	3144595	Identifier	streamOUT		3141956	0					
ANR	3144596	Argument	"""Vars %s JOBPRIORITY=\\""%d\\""\\n"""		3141956	1					
ANR	3144597	PrimaryExpression	"""Vars %s JOBPRIORITY=\\""%d\\""\\n"""		3141956	0					
ANR	3144598	Argument	stringLabel		3141956	2					
ANR	3144599	Identifier	stringLabel		3141956	0					
ANR	3144600	Argument	g . getNumNodes ( ) - i		3141956	3					
ANR	3144601	AdditiveExpression	g . getNumNodes ( ) - i		3141956	0		-			
ANR	3144602	CallExpression	g . getNumNodes ( )		3141956	0					
ANR	3144603	Callee	g . getNumNodes		3141956	0					
ANR	3144604	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144605	Identifier	g		3141956	0					
ANR	3144606	Identifier	getNumNodes		3141956	1					
ANR	3144607	ArgumentList			3141956	1					
ANR	3144608	Identifier	i		3141956	1					
ANR	3144609	ExpressionStatement			3141956	103					
ANR	3144610	ExpressionStatement	fclose ( streamOUT )		3141956	104					
ANR	3144611	CallExpression	fclose ( streamOUT )		3141956	0					
ANR	3144612	Callee	fclose		3141956	0					
ANR	3144613	Identifier	fclose		3141956	0					
ANR	3144614	ArgumentList	streamOUT		3141956	1					
ANR	3144615	Argument	streamOUT		3141956	0					
ANR	3144616	Identifier	streamOUT		3141956	0					
ANR	3144617	IdentifierDeclStatement	char old [ 1000 ] ;		3141956	105					
ANR	3144618	IdentifierDecl	old [ 1000 ]		3141956	0					
ANR	3144619	IdentifierDeclType	char [ 1000 ]		3141956	0					
ANR	3144620	Identifier	old		3141956	1					
ANR	3144621	PrimaryExpression	1000		3141956	2					
ANR	3144622	ExpressionStatement	"snprintf ( old , 1000 , ""%s.OLD"" , fileNameDagman )"		3141956	106					
ANR	3144623	CallExpression	"snprintf ( old , 1000 , ""%s.OLD"" , fileNameDagman )"		3141956	0					
ANR	3144624	Callee	snprintf		3141956	0					
ANR	3144625	Identifier	snprintf		3141956	0					
ANR	3144626	ArgumentList	old		3141956	1					
ANR	3144627	Argument	old		3141956	0					
ANR	3144628	Identifier	old		3141956	0					
ANR	3144629	Argument	1000		3141956	1					
ANR	3144630	PrimaryExpression	1000		3141956	0					
ANR	3144631	Argument	"""%s.OLD"""		3141956	2					
ANR	3144632	PrimaryExpression	"""%s.OLD"""		3141956	0					
ANR	3144633	Argument	fileNameDagman		3141956	3					
ANR	3144634	Identifier	fileNameDagman		3141956	0					
ANR	3144635	ExpressionStatement	remove ( old )		3141956	107					
ANR	3144636	CallExpression	remove ( old )		3141956	0					
ANR	3144637	Callee	remove		3141956	0					
ANR	3144638	Identifier	remove		3141956	0					
ANR	3144639	ArgumentList	old		3141956	1					
ANR	3144640	Argument	old		3141956	0					
ANR	3144641	Identifier	old		3141956	0					
ANR	3144642	ExpressionStatement	"rename ( fileNameDagman , old )"		3141956	108					
ANR	3144643	CallExpression	"rename ( fileNameDagman , old )"		3141956	0					
ANR	3144644	Callee	rename		3141956	0					
ANR	3144645	Identifier	rename		3141956	0					
ANR	3144646	ArgumentList	fileNameDagman		3141956	1					
ANR	3144647	Argument	fileNameDagman		3141956	0					
ANR	3144648	Identifier	fileNameDagman		3141956	0					
ANR	3144649	Argument	old		3141956	1					
ANR	3144650	Identifier	old		3141956	0					
ANR	3144651	ExpressionStatement	"rename ( fileNameDagmanPri , fileNameDagman )"		3141956	109					
ANR	3144652	CallExpression	"rename ( fileNameDagmanPri , fileNameDagman )"		3141956	0					
ANR	3144653	Callee	rename		3141956	0					
ANR	3144654	Identifier	rename		3141956	0					
ANR	3144655	ArgumentList	fileNameDagmanPri		3141956	1					
ANR	3144656	Argument	fileNameDagmanPri		3141956	0					
ANR	3144657	Identifier	fileNameDagmanPri		3141956	0					
ANR	3144658	Argument	fileNameDagman		3141956	1					
ANR	3144659	Identifier	fileNameDagman		3141956	0					
ANR	3144660	IfStatement	if ( argumSdf )		3141956	110					
ANR	3144661	Condition	argumSdf		3141956	0					
ANR	3144662	Identifier	argumSdf		3141956	0					
ANR	3144663	CompoundStatement		692:3:19581:19596	3141956	1					
ANR	3144664	ExpressionStatement	"printf ( ""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"" )"		3141956	0					
ANR	3144665	CallExpression	"printf ( ""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"" )"		3141956	0					
ANR	3144666	Callee	printf		3141956	0					
ANR	3144667	Identifier	printf		3141956	0					
ANR	3144668	ArgumentList	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		3141956	1					
ANR	3144669	Argument	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		3141956	0					
ANR	3144670	PrimaryExpression	"""-- instrumenting submit description files (back up as \\"".OLD\\"")\\n"""		3141956	0					
ANR	3144671	IdentifierDeclStatement	char buffer [ bufSize ] ;		3141956	1					
ANR	3144672	IdentifierDecl	buffer [ bufSize ]		3141956	0					
ANR	3144673	IdentifierDeclType	char [ bufSize ]		3141956	0					
ANR	3144674	Identifier	buffer		3141956	1					
ANR	3144675	Identifier	bufSize		3141956	2					
ANR	3144676	IdentifierDeclStatement	Trie * trie = new Trie ( ) ;		3141956	2					
ANR	3144677	IdentifierDecl	* trie = new Trie ( )		3141956	0					
ANR	3144678	IdentifierDeclType	Trie *		3141956	0					
ANR	3144679	Identifier	trie		3141956	1					
ANR	3144680	AssignmentExpression	* trie = new Trie ( )		3141956	2		=			
ANR	3144681	Identifier	trie		3141956	0					
ANR	3144682	UnaryExpression	new Trie ( )		3141956	1					
ANR	3144683	IfStatement	if ( NULL == trie )		3141956	3					
ANR	3144684	Condition	NULL == trie		3141956	0					
ANR	3144685	EqualityExpression	NULL == trie		3141956	0		==			
ANR	3144686	Identifier	NULL		3141956	0					
ANR	3144687	Identifier	trie		3141956	1					
ANR	3144688	ThrowStatement	"throw ""prio, trie is NULL"" ;"		3141956	1					
ANR	3144689	PrimaryExpression	"""prio, trie is NULL"""		3141956	0					
ANR	3144690	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	4					
ANR	3144691	ForInit	i = 0 ;		3141956	0					
ANR	3144692	AssignmentExpression	i = 0		3141956	0		=			
ANR	3144693	Identifier	i		3141956	0					
ANR	3144694	PrimaryExpression	0		3141956	1					
ANR	3144695	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3144696	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3144697	Identifier	i		3141956	0					
ANR	3144698	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3144699	Callee	g . getNumNodes		3141956	0					
ANR	3144700	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144701	Identifier	g		3141956	0					
ANR	3144702	Identifier	getNumNodes		3141956	1					
ANR	3144703	ArgumentList			3141956	1					
ANR	3144704	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3144705	Identifier	i		3141956	0					
ANR	3144706	IncDec	++		3141956	1					
ANR	3144707	CompoundStatement		638:4:18031:18112	3141956	3					
ANR	3144708	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		3141956	0					
ANR	3144709	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0					
ANR	3144710	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0		!=			
ANR	3144711	UnaryOperationExpression	- 1		3141956	0					
ANR	3144712	UnaryOperator	-		3141956	0					
ANR	3144713	PrimaryExpression	1		3141956	1					
ANR	3144714	CallExpression	trie -> find ( g . getSdfName ( i ) )		3141956	1					
ANR	3144715	Callee	trie -> find		3141956	0					
ANR	3144716	PtrMemberAccess	trie -> find		3141956	0					
ANR	3144717	Identifier	trie		3141956	0					
ANR	3144718	Identifier	find		3141956	1					
ANR	3144719	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3144720	Argument	g . getSdfName ( i )		3141956	0					
ANR	3144721	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144722	Callee	g . getSdfName		3141956	0					
ANR	3144723	MemberAccess	g . getSdfName		3141956	0					
ANR	3144724	Identifier	g		3141956	0					
ANR	3144725	Identifier	getSdfName		3141956	1					
ANR	3144726	ArgumentList	i		3141956	1					
ANR	3144727	Argument	i		3141956	0					
ANR	3144728	Identifier	i		3141956	0					
ANR	3144729	CompoundStatement		616:44:17423:17423	3141956	1					
ANR	3144730	ContinueStatement	continue ;		3141956	0					
ANR	3144731	ExpressionStatement			3141956	1					
ANR	3144732	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	2					
ANR	3144733	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	0					
ANR	3144734	Callee	trie -> add		3141956	0					
ANR	3144735	PtrMemberAccess	trie -> add		3141956	0					
ANR	3144736	Identifier	trie		3141956	0					
ANR	3144737	Identifier	add		3141956	1					
ANR	3144738	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3144739	Argument	g . getSdfName ( i )		3141956	0					
ANR	3144740	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144741	Callee	g . getSdfName		3141956	0					
ANR	3144742	MemberAccess	g . getSdfName		3141956	0					
ANR	3144743	Identifier	g		3141956	0					
ANR	3144744	Identifier	getSdfName		3141956	1					
ANR	3144745	ArgumentList	i		3141956	1					
ANR	3144746	Argument	i		3141956	0					
ANR	3144747	Identifier	i		3141956	0					
ANR	3144748	Argument	1		3141956	1					
ANR	3144749	PrimaryExpression	1		3141956	0					
ANR	3144750	IdentifierDeclStatement	char fileNameSdfNew [ 1000 ] ;		3141956	3					
ANR	3144751	IdentifierDecl	fileNameSdfNew [ 1000 ]		3141956	0					
ANR	3144752	IdentifierDeclType	char [ 1000 ]		3141956	0					
ANR	3144753	Identifier	fileNameSdfNew		3141956	1					
ANR	3144754	PrimaryExpression	1000		3141956	2					
ANR	3144755	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > 1000 - 10 )		3141956	4					
ANR	3144756	Condition	strlen ( g . getSdfName ( i ) ) > 1000 - 10		3141956	0					
ANR	3144757	RelationalExpression	strlen ( g . getSdfName ( i ) ) > 1000 - 10		3141956	0		>			
ANR	3144758	CallExpression	strlen ( g . getSdfName ( i ) )		3141956	0					
ANR	3144759	Callee	strlen		3141956	0					
ANR	3144760	Identifier	strlen		3141956	0					
ANR	3144761	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3144762	Argument	g . getSdfName ( i )		3141956	0					
ANR	3144763	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144764	Callee	g . getSdfName		3141956	0					
ANR	3144765	MemberAccess	g . getSdfName		3141956	0					
ANR	3144766	Identifier	g		3141956	0					
ANR	3144767	Identifier	getSdfName		3141956	1					
ANR	3144768	ArgumentList	i		3141956	1					
ANR	3144769	Argument	i		3141956	0					
ANR	3144770	Identifier	i		3141956	0					
ANR	3144771	AdditiveExpression	1000 - 10		3141956	1		-			
ANR	3144772	PrimaryExpression	1000		3141956	0					
ANR	3144773	PrimaryExpression	10		3141956	1					
ANR	3144774	ThrowStatement	"throw ""prio, line too long 2"" ;"		3141956	1					
ANR	3144775	PrimaryExpression	"""prio, line too long 2"""		3141956	0					
ANR	3144776	ExpressionStatement	"snprintf ( fileNameSdfNew , 1000 , ""%s.NEW"" , g . getSdfName ( i ) )"		3141956	5					
ANR	3144777	CallExpression	"snprintf ( fileNameSdfNew , 1000 , ""%s.NEW"" , g . getSdfName ( i ) )"		3141956	0					
ANR	3144778	Callee	snprintf		3141956	0					
ANR	3144779	Identifier	snprintf		3141956	0					
ANR	3144780	ArgumentList	fileNameSdfNew		3141956	1					
ANR	3144781	Argument	fileNameSdfNew		3141956	0					
ANR	3144782	Identifier	fileNameSdfNew		3141956	0					
ANR	3144783	Argument	1000		3141956	1					
ANR	3144784	PrimaryExpression	1000		3141956	0					
ANR	3144785	Argument	"""%s.NEW"""		3141956	2					
ANR	3144786	PrimaryExpression	"""%s.NEW"""		3141956	0					
ANR	3144787	Argument	g . getSdfName ( i )		3141956	3					
ANR	3144788	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144789	Callee	g . getSdfName		3141956	0					
ANR	3144790	MemberAccess	g . getSdfName		3141956	0					
ANR	3144791	Identifier	g		3141956	0					
ANR	3144792	Identifier	getSdfName		3141956	1					
ANR	3144793	ArgumentList	i		3141956	1					
ANR	3144794	Argument	i		3141956	0					
ANR	3144795	Identifier	i		3141956	0					
ANR	3144796	IdentifierDeclStatement	FILE * sdfNEW ;		3141956	6					
ANR	3144797	IdentifierDecl	* sdfNEW		3141956	0					
ANR	3144798	IdentifierDeclType	FILE *		3141956	0					
ANR	3144799	Identifier	sdfNEW		3141956	1					
ANR	3144800	ExpressionStatement	"sdfNEW = fopen ( fileNameSdfNew , ""wt"" )"		3141956	7					
ANR	3144801	AssignmentExpression	"sdfNEW = fopen ( fileNameSdfNew , ""wt"" )"		3141956	0		=			
ANR	3144802	Identifier	sdfNEW		3141956	0					
ANR	3144803	CallExpression	"fopen ( fileNameSdfNew , ""wt"" )"		3141956	1					
ANR	3144804	Callee	fopen		3141956	0					
ANR	3144805	Identifier	fopen		3141956	0					
ANR	3144806	ArgumentList	fileNameSdfNew		3141956	1					
ANR	3144807	Argument	fileNameSdfNew		3141956	0					
ANR	3144808	Identifier	fileNameSdfNew		3141956	0					
ANR	3144809	Argument	"""wt"""		3141956	1					
ANR	3144810	PrimaryExpression	"""wt"""		3141956	0					
ANR	3144811	IfStatement	if ( NULL == sdfNEW )		3141956	8					
ANR	3144812	Condition	NULL == sdfNEW		3141956	0					
ANR	3144813	EqualityExpression	NULL == sdfNEW		3141956	0		==			
ANR	3144814	Identifier	NULL		3141956	0					
ANR	3144815	Identifier	sdfNEW		3141956	1					
ANR	3144816	ThrowStatement	"throw ""prio, sdfNEW is NULL"" ;"		3141956	1					
ANR	3144817	PrimaryExpression	"""prio, sdfNEW is NULL"""		3141956	0					
ANR	3144818	IdentifierDeclStatement	StreamTokenizerWithCont * sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) ) ;		3141956	9					
ANR	3144819	IdentifierDecl	* sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) )		3141956	0					
ANR	3144820	IdentifierDeclType	StreamTokenizerWithCont *		3141956	0					
ANR	3144821	Identifier	sdfStream		3141956	1					
ANR	3144822	AssignmentExpression	* sdfStream = new StreamTokenizerWithCont ( g . getSdfName ( i ) )		3141956	2		=			
ANR	3144823	Identifier	sdfStream		3141956	0					
ANR	3144824	CallExpression	g . getSdfName ( i )		3141956	1					
ANR	3144825	Callee	g . getSdfName		3141956	0					
ANR	3144826	MemberAccess	g . getSdfName		3141956	0					
ANR	3144827	Identifier	g		3141956	0					
ANR	3144828	Identifier	getSdfName		3141956	1					
ANR	3144829	ArgumentList	i		3141956	1					
ANR	3144830	Argument	i		3141956	0					
ANR	3144831	Identifier	i		3141956	0					
ANR	3144832	IfStatement	if ( NULL == sdfStream )		3141956	10					
ANR	3144833	Condition	NULL == sdfStream		3141956	0					
ANR	3144834	EqualityExpression	NULL == sdfStream		3141956	0		==			
ANR	3144835	Identifier	NULL		3141956	0					
ANR	3144836	Identifier	sdfStream		3141956	1					
ANR	3144837	ThrowStatement	"throw ""prio, sdfStream is NULL"" ;"		3141956	1					
ANR	3144838	PrimaryExpression	"""prio, sdfStream is NULL"""		3141956	0					
ANR	3144839	WhileStatement	while ( ! sdfStream -> isEOF ( ) )		3141956	11					
ANR	3144840	Condition	! sdfStream -> isEOF ( )		3141956	0					
ANR	3144841	UnaryOperationExpression	! sdfStream -> isEOF ( )		3141956	0					
ANR	3144842	UnaryOperator	!		3141956	0					
ANR	3144843	CallExpression	sdfStream -> isEOF ( )		3141956	1					
ANR	3144844	Callee	sdfStream -> isEOF		3141956	0					
ANR	3144845	PtrMemberAccess	sdfStream -> isEOF		3141956	0					
ANR	3144846	Identifier	sdfStream		3141956	0					
ANR	3144847	Identifier	isEOF		3141956	1					
ANR	3144848	ArgumentList			3141956	1					
ANR	3144849	CompoundStatement		646:5:18339:18385	3141956	1					
ANR	3144850	IdentifierDeclStatement	"int ret = sdfStream -> readToken ( buffer , bufSize ) ;"		3141956	0					
ANR	3144851	IdentifierDecl	"ret = sdfStream -> readToken ( buffer , bufSize )"		3141956	0					
ANR	3144852	IdentifierDeclType	int		3141956	0					
ANR	3144853	Identifier	ret		3141956	1					
ANR	3144854	AssignmentExpression	"ret = sdfStream -> readToken ( buffer , bufSize )"		3141956	2		=			
ANR	3144855	Identifier	ret		3141956	0					
ANR	3144856	CallExpression	"sdfStream -> readToken ( buffer , bufSize )"		3141956	1					
ANR	3144857	Callee	sdfStream -> readToken		3141956	0					
ANR	3144858	PtrMemberAccess	sdfStream -> readToken		3141956	0					
ANR	3144859	Identifier	sdfStream		3141956	0					
ANR	3144860	Identifier	readToken		3141956	1					
ANR	3144861	ArgumentList	buffer		3141956	1					
ANR	3144862	Argument	buffer		3141956	0					
ANR	3144863	Identifier	buffer		3141956	0					
ANR	3144864	Argument	bufSize		3141956	1					
ANR	3144865	Identifier	bufSize		3141956	0					
ANR	3144866	IfStatement	if ( 0 != ret )		3141956	1					
ANR	3144867	Condition	0 != ret		3141956	0					
ANR	3144868	EqualityExpression	0 != ret		3141956	0		!=			
ANR	3144869	PrimaryExpression	0		3141956	0					
ANR	3144870	Identifier	ret		3141956	1					
ANR	3144871	CompoundStatement		649:18:18452:18452	3141956	1					
ANR	3144872	IfStatement	"if ( 0 == stricmp ( buffer , ""priority"" ) )"		3141956	0					
ANR	3144873	Condition	"0 == stricmp ( buffer , ""priority"" )"		3141956	0					
ANR	3144874	EqualityExpression	"0 == stricmp ( buffer , ""priority"" )"		3141956	0		==			
ANR	3144875	PrimaryExpression	0		3141956	0					
ANR	3144876	CallExpression	"stricmp ( buffer , ""priority"" )"		3141956	1					
ANR	3144877	Callee	stricmp		3141956	0					
ANR	3144878	Identifier	stricmp		3141956	0					
ANR	3144879	ArgumentList	buffer		3141956	1					
ANR	3144880	Argument	buffer		3141956	0					
ANR	3144881	Identifier	buffer		3141956	0					
ANR	3144882	Argument	"""priority"""		3141956	1					
ANR	3144883	PrimaryExpression	"""priority"""		3141956	0					
ANR	3144884	CompoundStatement		652:42:18509:18509	3141956	1					
ANR	3144885	ExpressionStatement	sdfStream -> skipLine ( )		3141956	0					
ANR	3144886	CallExpression	sdfStream -> skipLine ( )		3141956	0					
ANR	3144887	Callee	sdfStream -> skipLine		3141956	0					
ANR	3144888	PtrMemberAccess	sdfStream -> skipLine		3141956	0					
ANR	3144889	Identifier	sdfStream		3141956	0					
ANR	3144890	Identifier	skipLine		3141956	1					
ANR	3144891	ArgumentList			3141956	1					
ANR	3144892	ExpressionStatement	sdfStream -> resetRecentLine ( )		3141956	1					
ANR	3144893	CallExpression	sdfStream -> resetRecentLine ( )		3141956	0					
ANR	3144894	Callee	sdfStream -> resetRecentLine		3141956	0					
ANR	3144895	PtrMemberAccess	sdfStream -> resetRecentLine		3141956	0					
ANR	3144896	Identifier	sdfStream		3141956	0					
ANR	3144897	Identifier	resetRecentLine		3141956	1					
ANR	3144898	ArgumentList			3141956	1					
ANR	3144899	ContinueStatement	continue ;		3141956	2					
ANR	3144900	ExpressionStatement			3141956	2					
ANR	3144901	ExpressionStatement	sdfStream -> skipLine ( )		3141956	3					
ANR	3144902	CallExpression	sdfStream -> skipLine ( )		3141956	0					
ANR	3144903	Callee	sdfStream -> skipLine		3141956	0					
ANR	3144904	PtrMemberAccess	sdfStream -> skipLine		3141956	0					
ANR	3144905	Identifier	sdfStream		3141956	0					
ANR	3144906	Identifier	skipLine		3141956	1					
ANR	3144907	ArgumentList			3141956	1					
ANR	3144908	ExpressionStatement	sdfStream -> saveRecentLine ( sdfNEW )		3141956	4					
ANR	3144909	CallExpression	sdfStream -> saveRecentLine ( sdfNEW )		3141956	0					
ANR	3144910	Callee	sdfStream -> saveRecentLine		3141956	0					
ANR	3144911	PtrMemberAccess	sdfStream -> saveRecentLine		3141956	0					
ANR	3144912	Identifier	sdfStream		3141956	0					
ANR	3144913	Identifier	saveRecentLine		3141956	1					
ANR	3144914	ArgumentList	sdfNEW		3141956	1					
ANR	3144915	Argument	sdfNEW		3141956	0					
ANR	3144916	Identifier	sdfNEW		3141956	0					
ANR	3144917	ExpressionStatement	sdfStream -> resetRecentLine ( )		3141956	5					
ANR	3144918	CallExpression	sdfStream -> resetRecentLine ( )		3141956	0					
ANR	3144919	Callee	sdfStream -> resetRecentLine		3141956	0					
ANR	3144920	PtrMemberAccess	sdfStream -> resetRecentLine		3141956	0					
ANR	3144921	Identifier	sdfStream		3141956	0					
ANR	3144922	Identifier	resetRecentLine		3141956	1					
ANR	3144923	ArgumentList			3141956	1					
ANR	3144924	ExpressionStatement			3141956	12					
ANR	3144925	ExpressionStatement	"fprintf ( sdfNEW , ""priority = $(JOBPRIORITY)\\n"" )"		3141956	13					
ANR	3144926	CallExpression	"fprintf ( sdfNEW , ""priority = $(JOBPRIORITY)\\n"" )"		3141956	0					
ANR	3144927	Callee	fprintf		3141956	0					
ANR	3144928	Identifier	fprintf		3141956	0					
ANR	3144929	ArgumentList	sdfNEW		3141956	1					
ANR	3144930	Argument	sdfNEW		3141956	0					
ANR	3144931	Identifier	sdfNEW		3141956	0					
ANR	3144932	Argument	"""priority = $(JOBPRIORITY)\\n"""		3141956	1					
ANR	3144933	PrimaryExpression	"""priority = $(JOBPRIORITY)\\n"""		3141956	0					
ANR	3144934	Statement	delete		3141956	14					
ANR	3144935	ExpressionStatement	sdfStream		3141956	15					
ANR	3144936	Identifier	sdfStream		3141956	0					
ANR	3144937	ExpressionStatement	fclose ( sdfNEW )		3141956	16					
ANR	3144938	CallExpression	fclose ( sdfNEW )		3141956	0					
ANR	3144939	Callee	fclose		3141956	0					
ANR	3144940	Identifier	fclose		3141956	0					
ANR	3144941	ArgumentList	sdfNEW		3141956	1					
ANR	3144942	Argument	sdfNEW		3141956	0					
ANR	3144943	Identifier	sdfNEW		3141956	0					
ANR	3144944	ExpressionStatement			3141956	5					
ANR	3144945	Statement	delete		3141956	6					
ANR	3144946	ExpressionStatement	trie		3141956	7					
ANR	3144947	Identifier	trie		3141956	0					
ANR	3144948	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	8					
ANR	3144949	ForInit	i = 0 ;		3141956	0					
ANR	3144950	AssignmentExpression	i = 0		3141956	0		=			
ANR	3144951	Identifier	i		3141956	0					
ANR	3144952	PrimaryExpression	0		3141956	1					
ANR	3144953	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3144954	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3144955	Identifier	i		3141956	0					
ANR	3144956	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3144957	Callee	g . getNumNodes		3141956	0					
ANR	3144958	MemberAccess	g . getNumNodes		3141956	0					
ANR	3144959	Identifier	g		3141956	0					
ANR	3144960	Identifier	getNumNodes		3141956	1					
ANR	3144961	ArgumentList			3141956	1					
ANR	3144962	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3144963	Identifier	i		3141956	0					
ANR	3144964	IncDec	++		3141956	1					
ANR	3144965	CompoundStatement		680:38:19110:19110	3141956	3					
ANR	3144966	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		3141956	0					
ANR	3144967	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0					
ANR	3144968	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0		>			
ANR	3144969	CallExpression	strlen ( g . getSdfName ( i ) )		3141956	0					
ANR	3144970	Callee	strlen		3141956	0					
ANR	3144971	Identifier	strlen		3141956	0					
ANR	3144972	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3144973	Argument	g . getSdfName ( i )		3141956	0					
ANR	3144974	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144975	Callee	g . getSdfName		3141956	0					
ANR	3144976	MemberAccess	g . getSdfName		3141956	0					
ANR	3144977	Identifier	g		3141956	0					
ANR	3144978	Identifier	getSdfName		3141956	1					
ANR	3144979	ArgumentList	i		3141956	1					
ANR	3144980	Argument	i		3141956	0					
ANR	3144981	Identifier	i		3141956	0					
ANR	3144982	AdditiveExpression	bufSize - 20		3141956	1		-			
ANR	3144983	Identifier	bufSize		3141956	0					
ANR	3144984	PrimaryExpression	20		3141956	1					
ANR	3144985	ThrowStatement	"throw ""prio, too long line 4"" ;"		3141956	1					
ANR	3144986	PrimaryExpression	"""prio, too long line 4"""		3141956	0					
ANR	3144987	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	1					
ANR	3144988	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	0					
ANR	3144989	Callee	strncpy		3141956	0					
ANR	3144990	Identifier	strncpy		3141956	0					
ANR	3144991	ArgumentList	buffer		3141956	1					
ANR	3144992	Argument	buffer		3141956	0					
ANR	3144993	Identifier	buffer		3141956	0					
ANR	3144994	Argument	g . getSdfName ( i )		3141956	1					
ANR	3144995	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3144996	Callee	g . getSdfName		3141956	0					
ANR	3144997	MemberAccess	g . getSdfName		3141956	0					
ANR	3144998	Identifier	g		3141956	0					
ANR	3144999	Identifier	getSdfName		3141956	1					
ANR	3145000	ArgumentList	i		3141956	1					
ANR	3145001	Argument	i		3141956	0					
ANR	3145002	Identifier	i		3141956	0					
ANR	3145003	Argument	bufSize - 10		3141956	2					
ANR	3145004	AdditiveExpression	bufSize - 10		3141956	0		-			
ANR	3145005	Identifier	bufSize		3141956	0					
ANR	3145006	PrimaryExpression	10		3141956	1					
ANR	3145007	ExpressionStatement	"strcat ( buffer , "".OLD"" )"		3141956	2					
ANR	3145008	CallExpression	"strcat ( buffer , "".OLD"" )"		3141956	0					
ANR	3145009	Callee	strcat		3141956	0					
ANR	3145010	Identifier	strcat		3141956	0					
ANR	3145011	ArgumentList	buffer		3141956	1					
ANR	3145012	Argument	buffer		3141956	0					
ANR	3145013	Identifier	buffer		3141956	0					
ANR	3145014	Argument	""".OLD"""		3141956	1					
ANR	3145015	PrimaryExpression	""".OLD"""		3141956	0					
ANR	3145016	ExpressionStatement	remove ( buffer )		3141956	3					
ANR	3145017	CallExpression	remove ( buffer )		3141956	0					
ANR	3145018	Callee	remove		3141956	0					
ANR	3145019	Identifier	remove		3141956	0					
ANR	3145020	ArgumentList	buffer		3141956	1					
ANR	3145021	Argument	buffer		3141956	0					
ANR	3145022	Identifier	buffer		3141956	0					
ANR	3145023	ExpressionStatement			3141956	9					
ANR	3145024	ExpressionStatement	trie = new Trie ( )		3141956	10					
ANR	3145025	AssignmentExpression	trie = new Trie ( )		3141956	0		=			
ANR	3145026	Identifier	trie		3141956	0					
ANR	3145027	UnaryExpression	new Trie ( )		3141956	1					
ANR	3145028	IfStatement	if ( NULL == trie )		3141956	11					
ANR	3145029	Condition	NULL == trie		3141956	0					
ANR	3145030	EqualityExpression	NULL == trie		3141956	0		==			
ANR	3145031	Identifier	NULL		3141956	0					
ANR	3145032	Identifier	trie		3141956	1					
ANR	3145033	ThrowStatement	"throw ""prio, trie is NULL, 2"" ;"		3141956	1					
ANR	3145034	PrimaryExpression	"""prio, trie is NULL, 2"""		3141956	0					
ANR	3145035	IdentifierDeclStatement	bool fail = false ;		3141956	12					
ANR	3145036	IdentifierDecl	fail = false		3141956	0					
ANR	3145037	IdentifierDeclType	bool		3141956	0					
ANR	3145038	Identifier	fail		3141956	1					
ANR	3145039	AssignmentExpression	fail = false		3141956	2		=			
ANR	3145040	Identifier	false		3141956	0					
ANR	3145041	Identifier	false		3141956	1					
ANR	3145042	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	13					
ANR	3145043	ForInit	i = 0 ;		3141956	0					
ANR	3145044	AssignmentExpression	i = 0		3141956	0		=			
ANR	3145045	Identifier	i		3141956	0					
ANR	3145046	PrimaryExpression	0		3141956	1					
ANR	3145047	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3145048	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3145049	Identifier	i		3141956	0					
ANR	3145050	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3145051	Callee	g . getNumNodes		3141956	0					
ANR	3145052	MemberAccess	g . getNumNodes		3141956	0					
ANR	3145053	Identifier	g		3141956	0					
ANR	3145054	Identifier	getNumNodes		3141956	1					
ANR	3145055	ArgumentList			3141956	1					
ANR	3145056	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3145057	Identifier	i		3141956	0					
ANR	3145058	IncDec	++		3141956	1					
ANR	3145059	CompoundStatement		693:38:19636:19636	3141956	3					
ANR	3145060	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		3141956	0					
ANR	3145061	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0					
ANR	3145062	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0		!=			
ANR	3145063	UnaryOperationExpression	- 1		3141956	0					
ANR	3145064	UnaryOperator	-		3141956	0					
ANR	3145065	PrimaryExpression	1		3141956	1					
ANR	3145066	CallExpression	trie -> find ( g . getSdfName ( i ) )		3141956	1					
ANR	3145067	Callee	trie -> find		3141956	0					
ANR	3145068	PtrMemberAccess	trie -> find		3141956	0					
ANR	3145069	Identifier	trie		3141956	0					
ANR	3145070	Identifier	find		3141956	1					
ANR	3145071	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145072	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145073	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145074	Callee	g . getSdfName		3141956	0					
ANR	3145075	MemberAccess	g . getSdfName		3141956	0					
ANR	3145076	Identifier	g		3141956	0					
ANR	3145077	Identifier	getSdfName		3141956	1					
ANR	3145078	ArgumentList	i		3141956	1					
ANR	3145079	Argument	i		3141956	0					
ANR	3145080	Identifier	i		3141956	0					
ANR	3145081	CompoundStatement		696:44:19761:19761	3141956	1					
ANR	3145082	ContinueStatement	continue ;		3141956	0					
ANR	3145083	ExpressionStatement			3141956	1					
ANR	3145084	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	2					
ANR	3145085	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	0					
ANR	3145086	Callee	trie -> add		3141956	0					
ANR	3145087	PtrMemberAccess	trie -> add		3141956	0					
ANR	3145088	Identifier	trie		3141956	0					
ANR	3145089	Identifier	add		3141956	1					
ANR	3145090	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145091	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145092	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145093	Callee	g . getSdfName		3141956	0					
ANR	3145094	MemberAccess	g . getSdfName		3141956	0					
ANR	3145095	Identifier	g		3141956	0					
ANR	3145096	Identifier	getSdfName		3141956	1					
ANR	3145097	ArgumentList	i		3141956	1					
ANR	3145098	Argument	i		3141956	0					
ANR	3145099	Identifier	i		3141956	0					
ANR	3145100	Argument	1		3141956	1					
ANR	3145101	PrimaryExpression	1		3141956	0					
ANR	3145102	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		3141956	3					
ANR	3145103	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0					
ANR	3145104	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0		>			
ANR	3145105	CallExpression	strlen ( g . getSdfName ( i ) )		3141956	0					
ANR	3145106	Callee	strlen		3141956	0					
ANR	3145107	Identifier	strlen		3141956	0					
ANR	3145108	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145109	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145110	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145111	Callee	g . getSdfName		3141956	0					
ANR	3145112	MemberAccess	g . getSdfName		3141956	0					
ANR	3145113	Identifier	g		3141956	0					
ANR	3145114	Identifier	getSdfName		3141956	1					
ANR	3145115	ArgumentList	i		3141956	1					
ANR	3145116	Argument	i		3141956	0					
ANR	3145117	Identifier	i		3141956	0					
ANR	3145118	AdditiveExpression	bufSize - 20		3141956	1		-			
ANR	3145119	Identifier	bufSize		3141956	0					
ANR	3145120	PrimaryExpression	20		3141956	1					
ANR	3145121	ThrowStatement	"throw ""prio, too long line 4"" ;"		3141956	1					
ANR	3145122	PrimaryExpression	"""prio, too long line 4"""		3141956	0					
ANR	3145123	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	4					
ANR	3145124	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	0					
ANR	3145125	Callee	strncpy		3141956	0					
ANR	3145126	Identifier	strncpy		3141956	0					
ANR	3145127	ArgumentList	buffer		3141956	1					
ANR	3145128	Argument	buffer		3141956	0					
ANR	3145129	Identifier	buffer		3141956	0					
ANR	3145130	Argument	g . getSdfName ( i )		3141956	1					
ANR	3145131	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145132	Callee	g . getSdfName		3141956	0					
ANR	3145133	MemberAccess	g . getSdfName		3141956	0					
ANR	3145134	Identifier	g		3141956	0					
ANR	3145135	Identifier	getSdfName		3141956	1					
ANR	3145136	ArgumentList	i		3141956	1					
ANR	3145137	Argument	i		3141956	0					
ANR	3145138	Identifier	i		3141956	0					
ANR	3145139	Argument	bufSize - 10		3141956	2					
ANR	3145140	AdditiveExpression	bufSize - 10		3141956	0		-			
ANR	3145141	Identifier	bufSize		3141956	0					
ANR	3145142	PrimaryExpression	10		3141956	1					
ANR	3145143	ExpressionStatement	"strcat ( buffer , "".OLD"" )"		3141956	5					
ANR	3145144	CallExpression	"strcat ( buffer , "".OLD"" )"		3141956	0					
ANR	3145145	Callee	strcat		3141956	0					
ANR	3145146	Identifier	strcat		3141956	0					
ANR	3145147	ArgumentList	buffer		3141956	1					
ANR	3145148	Argument	buffer		3141956	0					
ANR	3145149	Identifier	buffer		3141956	0					
ANR	3145150	Argument	""".OLD"""		3141956	1					
ANR	3145151	PrimaryExpression	""".OLD"""		3141956	0					
ANR	3145152	IfStatement	"if ( 0 != rename ( g . getSdfName ( i ) , buffer ) )"		3141956	6					
ANR	3145153	Condition	"0 != rename ( g . getSdfName ( i ) , buffer )"		3141956	0					
ANR	3145154	EqualityExpression	"0 != rename ( g . getSdfName ( i ) , buffer )"		3141956	0		!=			
ANR	3145155	PrimaryExpression	0		3141956	0					
ANR	3145156	CallExpression	"rename ( g . getSdfName ( i ) , buffer )"		3141956	1					
ANR	3145157	Callee	rename		3141956	0					
ANR	3145158	Identifier	rename		3141956	0					
ANR	3145159	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145160	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145161	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145162	Callee	g . getSdfName		3141956	0					
ANR	3145163	MemberAccess	g . getSdfName		3141956	0					
ANR	3145164	Identifier	g		3141956	0					
ANR	3145165	Identifier	getSdfName		3141956	1					
ANR	3145166	ArgumentList	i		3141956	1					
ANR	3145167	Argument	i		3141956	0					
ANR	3145168	Identifier	i		3141956	0					
ANR	3145169	Argument	buffer		3141956	1					
ANR	3145170	Identifier	buffer		3141956	0					
ANR	3145171	ExpressionStatement	fail = true		3141956	1					
ANR	3145172	AssignmentExpression	fail = true		3141956	0		=			
ANR	3145173	Identifier	fail		3141956	0					
ANR	3145174	Identifier	true		3141956	1					
ANR	3145175	ExpressionStatement			3141956	14					
ANR	3145176	Statement	delete		3141956	15					
ANR	3145177	ExpressionStatement	trie		3141956	16					
ANR	3145178	Identifier	trie		3141956	0					
ANR	3145179	IfStatement	if ( fail )		3141956	17					
ANR	3145180	Condition	fail		3141956	0					
ANR	3145181	Identifier	fail		3141956	0					
ANR	3145182	ThrowStatement	"throw ""prio, rename failed"" ;"		3141956	1					
ANR	3145183	PrimaryExpression	"""prio, rename failed"""		3141956	0					
ANR	3145184	ExpressionStatement	trie = new Trie ( )		3141956	18					
ANR	3145185	AssignmentExpression	trie = new Trie ( )		3141956	0		=			
ANR	3145186	Identifier	trie		3141956	0					
ANR	3145187	UnaryExpression	new Trie ( )		3141956	1					
ANR	3145188	IfStatement	if ( NULL == trie )		3141956	19					
ANR	3145189	Condition	NULL == trie		3141956	0					
ANR	3145190	EqualityExpression	NULL == trie		3141956	0		==			
ANR	3145191	Identifier	NULL		3141956	0					
ANR	3145192	Identifier	trie		3141956	1					
ANR	3145193	ThrowStatement	"throw ""prio, trie is NULL, 3"" ;"		3141956	1					
ANR	3145194	PrimaryExpression	"""prio, trie is NULL, 3"""		3141956	0					
ANR	3145195	ExpressionStatement	fail = false		3141956	20					
ANR	3145196	AssignmentExpression	fail = false		3141956	0		=			
ANR	3145197	Identifier	fail		3141956	0					
ANR	3145198	Identifier	false		3141956	1					
ANR	3145199	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		3141956	21					
ANR	3145200	ForInit	i = 0 ;		3141956	0					
ANR	3145201	AssignmentExpression	i = 0		3141956	0		=			
ANR	3145202	Identifier	i		3141956	0					
ANR	3145203	PrimaryExpression	0		3141956	1					
ANR	3145204	Condition	i < g . getNumNodes ( )		3141956	1					
ANR	3145205	RelationalExpression	i < g . getNumNodes ( )		3141956	0		<			
ANR	3145206	Identifier	i		3141956	0					
ANR	3145207	CallExpression	g . getNumNodes ( )		3141956	1					
ANR	3145208	Callee	g . getNumNodes		3141956	0					
ANR	3145209	MemberAccess	g . getNumNodes		3141956	0					
ANR	3145210	Identifier	g		3141956	0					
ANR	3145211	Identifier	getNumNodes		3141956	1					
ANR	3145212	ArgumentList			3141956	1					
ANR	3145213	PostIncDecOperationExpression	i ++		3141956	2					
ANR	3145214	Identifier	i		3141956	0					
ANR	3145215	IncDec	++		3141956	1					
ANR	3145216	CompoundStatement		718:38:20398:20398	3141956	3					
ANR	3145217	IfStatement	if ( - 1 != trie -> find ( g . getSdfName ( i ) ) )		3141956	0					
ANR	3145218	Condition	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0					
ANR	3145219	EqualityExpression	- 1 != trie -> find ( g . getSdfName ( i ) )		3141956	0		!=			
ANR	3145220	UnaryOperationExpression	- 1		3141956	0					
ANR	3145221	UnaryOperator	-		3141956	0					
ANR	3145222	PrimaryExpression	1		3141956	1					
ANR	3145223	CallExpression	trie -> find ( g . getSdfName ( i ) )		3141956	1					
ANR	3145224	Callee	trie -> find		3141956	0					
ANR	3145225	PtrMemberAccess	trie -> find		3141956	0					
ANR	3145226	Identifier	trie		3141956	0					
ANR	3145227	Identifier	find		3141956	1					
ANR	3145228	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145229	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145230	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145231	Callee	g . getSdfName		3141956	0					
ANR	3145232	MemberAccess	g . getSdfName		3141956	0					
ANR	3145233	Identifier	g		3141956	0					
ANR	3145234	Identifier	getSdfName		3141956	1					
ANR	3145235	ArgumentList	i		3141956	1					
ANR	3145236	Argument	i		3141956	0					
ANR	3145237	Identifier	i		3141956	0					
ANR	3145238	CompoundStatement		721:44:20523:20523	3141956	1					
ANR	3145239	ContinueStatement	continue ;		3141956	0					
ANR	3145240	ExpressionStatement			3141956	1					
ANR	3145241	ExpressionStatement	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	2					
ANR	3145242	CallExpression	"trie -> add ( g . getSdfName ( i ) , 1 )"		3141956	0					
ANR	3145243	Callee	trie -> add		3141956	0					
ANR	3145244	PtrMemberAccess	trie -> add		3141956	0					
ANR	3145245	Identifier	trie		3141956	0					
ANR	3145246	Identifier	add		3141956	1					
ANR	3145247	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145248	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145249	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145250	Callee	g . getSdfName		3141956	0					
ANR	3145251	MemberAccess	g . getSdfName		3141956	0					
ANR	3145252	Identifier	g		3141956	0					
ANR	3145253	Identifier	getSdfName		3141956	1					
ANR	3145254	ArgumentList	i		3141956	1					
ANR	3145255	Argument	i		3141956	0					
ANR	3145256	Identifier	i		3141956	0					
ANR	3145257	Argument	1		3141956	1					
ANR	3145258	PrimaryExpression	1		3141956	0					
ANR	3145259	IfStatement	if ( strlen ( g . getSdfName ( i ) ) > bufSize - 20 )		3141956	3					
ANR	3145260	Condition	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0					
ANR	3145261	RelationalExpression	strlen ( g . getSdfName ( i ) ) > bufSize - 20		3141956	0		>			
ANR	3145262	CallExpression	strlen ( g . getSdfName ( i ) )		3141956	0					
ANR	3145263	Callee	strlen		3141956	0					
ANR	3145264	Identifier	strlen		3141956	0					
ANR	3145265	ArgumentList	g . getSdfName ( i )		3141956	1					
ANR	3145266	Argument	g . getSdfName ( i )		3141956	0					
ANR	3145267	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145268	Callee	g . getSdfName		3141956	0					
ANR	3145269	MemberAccess	g . getSdfName		3141956	0					
ANR	3145270	Identifier	g		3141956	0					
ANR	3145271	Identifier	getSdfName		3141956	1					
ANR	3145272	ArgumentList	i		3141956	1					
ANR	3145273	Argument	i		3141956	0					
ANR	3145274	Identifier	i		3141956	0					
ANR	3145275	AdditiveExpression	bufSize - 20		3141956	1		-			
ANR	3145276	Identifier	bufSize		3141956	0					
ANR	3145277	PrimaryExpression	20		3141956	1					
ANR	3145278	ThrowStatement	"throw ""prio, too long line 5"" ;"		3141956	1					
ANR	3145279	PrimaryExpression	"""prio, too long line 5"""		3141956	0					
ANR	3145280	ExpressionStatement	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	4					
ANR	3145281	CallExpression	"strncpy ( buffer , g . getSdfName ( i ) , bufSize - 10 )"		3141956	0					
ANR	3145282	Callee	strncpy		3141956	0					
ANR	3145283	Identifier	strncpy		3141956	0					
ANR	3145284	ArgumentList	buffer		3141956	1					
ANR	3145285	Argument	buffer		3141956	0					
ANR	3145286	Identifier	buffer		3141956	0					
ANR	3145287	Argument	g . getSdfName ( i )		3141956	1					
ANR	3145288	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145289	Callee	g . getSdfName		3141956	0					
ANR	3145290	MemberAccess	g . getSdfName		3141956	0					
ANR	3145291	Identifier	g		3141956	0					
ANR	3145292	Identifier	getSdfName		3141956	1					
ANR	3145293	ArgumentList	i		3141956	1					
ANR	3145294	Argument	i		3141956	0					
ANR	3145295	Identifier	i		3141956	0					
ANR	3145296	Argument	bufSize - 10		3141956	2					
ANR	3145297	AdditiveExpression	bufSize - 10		3141956	0		-			
ANR	3145298	Identifier	bufSize		3141956	0					
ANR	3145299	PrimaryExpression	10		3141956	1					
ANR	3145300	ExpressionStatement	"strcat ( buffer , "".NEW"" )"		3141956	5					
ANR	3145301	CallExpression	"strcat ( buffer , "".NEW"" )"		3141956	0					
ANR	3145302	Callee	strcat		3141956	0					
ANR	3145303	Identifier	strcat		3141956	0					
ANR	3145304	ArgumentList	buffer		3141956	1					
ANR	3145305	Argument	buffer		3141956	0					
ANR	3145306	Identifier	buffer		3141956	0					
ANR	3145307	Argument	""".NEW"""		3141956	1					
ANR	3145308	PrimaryExpression	""".NEW"""		3141956	0					
ANR	3145309	IfStatement	"if ( 0 != rename ( buffer , g . getSdfName ( i ) ) )"		3141956	6					
ANR	3145310	Condition	"0 != rename ( buffer , g . getSdfName ( i ) )"		3141956	0					
ANR	3145311	EqualityExpression	"0 != rename ( buffer , g . getSdfName ( i ) )"		3141956	0		!=			
ANR	3145312	PrimaryExpression	0		3141956	0					
ANR	3145313	CallExpression	"rename ( buffer , g . getSdfName ( i ) )"		3141956	1					
ANR	3145314	Callee	rename		3141956	0					
ANR	3145315	Identifier	rename		3141956	0					
ANR	3145316	ArgumentList	buffer		3141956	1					
ANR	3145317	Argument	buffer		3141956	0					
ANR	3145318	Identifier	buffer		3141956	0					
ANR	3145319	Argument	g . getSdfName ( i )		3141956	1					
ANR	3145320	CallExpression	g . getSdfName ( i )		3141956	0					
ANR	3145321	Callee	g . getSdfName		3141956	0					
ANR	3145322	MemberAccess	g . getSdfName		3141956	0					
ANR	3145323	Identifier	g		3141956	0					
ANR	3145324	Identifier	getSdfName		3141956	1					
ANR	3145325	ArgumentList	i		3141956	1					
ANR	3145326	Argument	i		3141956	0					
ANR	3145327	Identifier	i		3141956	0					
ANR	3145328	ExpressionStatement	fail = true		3141956	1					
ANR	3145329	AssignmentExpression	fail = true		3141956	0		=			
ANR	3145330	Identifier	fail		3141956	0					
ANR	3145331	Identifier	true		3141956	1					
ANR	3145332	ExpressionStatement			3141956	22					
ANR	3145333	Statement	delete		3141956	23					
ANR	3145334	ExpressionStatement	trie		3141956	24					
ANR	3145335	Identifier	trie		3141956	0					
ANR	3145336	IfStatement	if ( fail )		3141956	25					
ANR	3145337	Condition	fail		3141956	0					
ANR	3145338	Identifier	fail		3141956	0					
ANR	3145339	ThrowStatement	"throw ""prio, rename failed 2"" ;"		3141956	1					
ANR	3145340	PrimaryExpression	"""prio, rename failed 2"""		3141956	0					
ANR	3145341	ExpressionStatement			3141956	111					
ANR	3145342	ExpressionStatement	finish = clock ( )		3141956	112					
ANR	3145343	AssignmentExpression	finish = clock ( )		3141956	0		=			
ANR	3145344	Identifier	finish		3141956	0					
ANR	3145345	CallExpression	clock ( )		3141956	1					
ANR	3145346	Callee	clock		3141956	0					
ANR	3145347	Identifier	clock		3141956	0					
ANR	3145348	ArgumentList			3141956	1					
ANR	3145349	ExpressionStatement	"printf ( ""-- total time %d seconds\\n"" , ( finish - start ) / CLOCKS_PER_SEC )"		3141956	113					
ANR	3145350	CallExpression	"printf ( ""-- total time %d seconds\\n"" , ( finish - start ) / CLOCKS_PER_SEC )"		3141956	0					
ANR	3145351	Callee	printf		3141956	0					
ANR	3145352	Identifier	printf		3141956	0					
ANR	3145353	ArgumentList	"""-- total time %d seconds\\n"""		3141956	1					
ANR	3145354	Argument	"""-- total time %d seconds\\n"""		3141956	0					
ANR	3145355	PrimaryExpression	"""-- total time %d seconds\\n"""		3141956	0					
ANR	3145356	Argument	( finish - start ) / CLOCKS_PER_SEC		3141956	1					
ANR	3145357	MultiplicativeExpression	( finish - start ) / CLOCKS_PER_SEC		3141956	0		/			
ANR	3145358	AdditiveExpression	finish - start		3141956	0		-			
ANR	3145359	Identifier	finish		3141956	0					
ANR	3145360	Identifier	start		3141956	1					
ANR	3145361	Identifier	CLOCKS_PER_SEC		3141956	1					
ANR	3145362	CatchList			3141956	1					
ANR	3145363	CatchStatement	catch ( char * msg )		3141956	0					
ANR	3145364	Identifier	msg		3141956	0					
ANR	3145365	CompoundStatement		747:22:21136:21136	3141956	1					
ANR	3145366	ExpressionStatement	alert ( msg )	806:2:22861:22871	3141956	0	True				
ANR	3145367	CallExpression	alert ( msg )		3141956	0					
ANR	3145368	Callee	alert		3141956	0					
ANR	3145369	Identifier	alert		3141956	0					
ANR	3145370	ArgumentList	msg		3141956	1					
ANR	3145371	Argument	msg		3141956	0					
ANR	3145372	Identifier	msg		3141956	0					
ANR	3145373	ReturnStatement	return - 1 ;	807:2:22875:22884	3141956	1	True				
ANR	3145374	UnaryOperationExpression	- 1		3141956	0					
ANR	3145375	UnaryOperator	-		3141956	0					
ANR	3145376	PrimaryExpression	1		3141956	1					
ANR	3145377	CatchStatement	catch ( ... )		3141956	1					
ANR	3145378	CompoundStatement		750:14:21179:21179	3141956	0					
ANR	3145379	ExpressionStatement	"alert ( ""Unrecognized exception"" )"		3141956	0					
ANR	3145380	CallExpression	"alert ( ""Unrecognized exception"" )"		3141956	0					
ANR	3145381	Callee	alert		3141956	0					
ANR	3145382	Identifier	alert		3141956	0					
ANR	3145383	ArgumentList	"""Unrecognized exception"""		3141956	1					
ANR	3145384	Argument	"""Unrecognized exception"""		3141956	0					
ANR	3145385	PrimaryExpression	"""Unrecognized exception"""		3141956	0					
ANR	3145386	ReturnStatement	return - 1 ;		3141956	1					
ANR	3145387	UnaryOperationExpression	- 1		3141956	0					
ANR	3145388	UnaryOperator	-		3141956	0					
ANR	3145389	PrimaryExpression	1		3141956	1					
ANR	3145390	ExpressionStatement		811:2:22952:22952	3141956	1	True				
ANR	3145391	ReturnStatement	return 0 ;	813:1:22956:22964	3141956	2	True				
ANR	3145392	PrimaryExpression	0		3141956	0					
ANR	3145393	ReturnType	int		3141956	1					
ANR	3145394	Identifier	main		3141956	2					
ANR	3145395	ParameterList	"int argc , char * argv [ ]"		3141956	3					
ANR	3145396	Parameter	int argc	58:10:1695:1702	3141956	0	True				
ANR	3145397	ParameterType	int		3141956	0					
ANR	3145398	Identifier	argc		3141956	1					
ANR	3145399	Parameter	char * argv [ ]	58:20:1705:1716	3141956	1	True				
ANR	3145400	ParameterType	char * [ ]		3141956	0					
ANR	3145401	Identifier	argv		3141956	1					
ANR	3145402	CFGEntryNode	ENTRY		3141956		True				
ANR	3145403	CFGExitNode	EXIT		3141956		True				
ANR	3145404	CFGErrorNode	ERROR		3141956		True				
ANR	3145405	Symbol	argc		3141956						
ANR	3145406	Symbol	argv		3141956						
