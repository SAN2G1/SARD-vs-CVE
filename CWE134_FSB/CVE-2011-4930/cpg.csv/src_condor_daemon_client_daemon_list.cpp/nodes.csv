command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2999634	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_client_daemon_list.cpp								
ANR	2999635	Function	DaemonList :: DaemonList	30:0:1019:1046							
ANR	2999636	FunctionDef	DaemonList :: DaemonList ()		2999635	0					
ANR	2999637	CompoundStatement		31:0:1044:1046	2999635	0					
ANR	2999638	Identifier	DaemonList :: DaemonList		2999635	1					
ANR	2999639	ParameterList			2999635	2					
ANR	2999640	CFGEntryNode	ENTRY		2999635		True				
ANR	2999641	CFGExitNode	EXIT		2999635		True				
ANR	2999642	Function	DaemonList :: ~DaemonList	35:0:1050:1158							
ANR	2999643	FunctionDef	DaemonList :: ~DaemonList ()		2999642	0					
ANR	2999644	CompoundStatement		36:0:1082:1158	2999642	0					
ANR	2999645	IdentifierDeclStatement	Daemon * tmp ;	37:1:1085:1096	2999642	0	True				
ANR	2999646	IdentifierDecl	* tmp		2999642	0					
ANR	2999647	IdentifierDeclType	Daemon *		2999642	0					
ANR	2999648	Identifier	tmp		2999642	1					
ANR	2999649	ExpressionStatement	list . Rewind ( )	38:1:1099:1112	2999642	1	True				
ANR	2999650	CallExpression	list . Rewind ( )		2999642	0					
ANR	2999651	Callee	list . Rewind		2999642	0					
ANR	2999652	MemberAccess	list . Rewind		2999642	0					
ANR	2999653	Identifier	list		2999642	0					
ANR	2999654	Identifier	Rewind		2999642	1					
ANR	2999655	ArgumentList			2999642	1					
ANR	2999656	WhileStatement	while ( list . Next ( tmp ) )		2999642	2					
ANR	2999657	Condition	list . Next ( tmp )	39:8:1122:1135	2999642	0	True				
ANR	2999658	CallExpression	list . Next ( tmp )		2999642	0					
ANR	2999659	Callee	list . Next		2999642	0					
ANR	2999660	MemberAccess	list . Next		2999642	0					
ANR	2999661	Identifier	list		2999642	0					
ANR	2999662	Identifier	Next		2999642	1					
ANR	2999663	ArgumentList	tmp		2999642	1					
ANR	2999664	Argument	tmp		2999642	0					
ANR	2999665	Identifier	tmp		2999642	0					
ANR	2999666	CompoundStatement		4:25:56:56	2999642	1					
ANR	2999667	Statement	delete	40:2:1143:1148	2999642	0	True				
ANR	2999668	ExpressionStatement	tmp	40:9:1150:1153	2999642	1	True				
ANR	2999669	Identifier	tmp		2999642	0					
ANR	2999670	Identifier	DaemonList :: ~DaemonList		2999642	1					
ANR	2999671	ParameterList			2999642	2					
ANR	2999672	CFGEntryNode	ENTRY		2999642		True				
ANR	2999673	CFGExitNode	EXIT		2999642		True				
ANR	2999674	Symbol	tmp		2999642						
ANR	2999675	Symbol	list . Next		2999642						
ANR	2999676	Symbol	list		2999642						
ANR	2999677	Function	DaemonList :: init	45:0:1162:1661							
ANR	2999678	FunctionDef	"DaemonList :: init (daemon_t type , const char * host_list , const char * pool_list)"		2999677	0					
ANR	2999679	CompoundStatement		47:0:1247:1661	2999677	0					
ANR	2999680	IdentifierDeclStatement	Daemon * tmp ;	48:1:1250:1261	2999677	0	True				
ANR	2999681	IdentifierDecl	* tmp		2999677	0					
ANR	2999682	IdentifierDeclType	Daemon *		2999677	0					
ANR	2999683	Identifier	tmp		2999677	1					
ANR	2999684	IdentifierDeclStatement	char * host ;	49:1:1264:1274	2999677	1	True				
ANR	2999685	IdentifierDecl	* host		2999677	0					
ANR	2999686	IdentifierDeclType	char *		2999677	0					
ANR	2999687	Identifier	host		2999677	1					
ANR	2999688	IdentifierDeclStatement	char const * pool = NULL ;	50:1:1277:1300	2999677	2	True				
ANR	2999689	IdentifierDecl	* pool = NULL		2999677	0					
ANR	2999690	IdentifierDeclType	char const *		2999677	0					
ANR	2999691	Identifier	pool		2999677	1					
ANR	2999692	AssignmentExpression	* pool = NULL		2999677	2		=			
ANR	2999693	Identifier	NULL		2999677	0					
ANR	2999694	Identifier	NULL		2999677	1					
ANR	2999695	IdentifierDeclStatement	StringList foo ;	51:1:1303:1317	2999677	3	True				
ANR	2999696	IdentifierDecl	foo		2999677	0					
ANR	2999697	IdentifierDeclType	StringList		2999677	0					
ANR	2999698	Identifier	foo		2999677	1					
ANR	2999699	IdentifierDeclStatement	StringList pools ;	52:1:1320:1336	2999677	4	True				
ANR	2999700	IdentifierDecl	pools		2999677	0					
ANR	2999701	IdentifierDeclType	StringList		2999677	0					
ANR	2999702	Identifier	pools		2999677	1					
ANR	2999703	IfStatement	if ( host_list )		2999677	5					
ANR	2999704	Condition	host_list	53:5:1343:1351	2999677	0	True				
ANR	2999705	Identifier	host_list		2999677	0					
ANR	2999706	CompoundStatement		7:17:107:107	2999677	1					
ANR	2999707	ExpressionStatement	foo . initializeFromString ( host_list )	54:2:1359:1396	2999677	0	True				
ANR	2999708	CallExpression	foo . initializeFromString ( host_list )		2999677	0					
ANR	2999709	Callee	foo . initializeFromString		2999677	0					
ANR	2999710	MemberAccess	foo . initializeFromString		2999677	0					
ANR	2999711	Identifier	foo		2999677	0					
ANR	2999712	Identifier	initializeFromString		2999677	1					
ANR	2999713	ArgumentList	host_list		2999677	1					
ANR	2999714	Argument	host_list		2999677	0					
ANR	2999715	Identifier	host_list		2999677	0					
ANR	2999716	ExpressionStatement	foo . rewind ( )	55:2:1400:1412	2999677	1	True				
ANR	2999717	CallExpression	foo . rewind ( )		2999677	0					
ANR	2999718	Callee	foo . rewind		2999677	0					
ANR	2999719	MemberAccess	foo . rewind		2999677	0					
ANR	2999720	Identifier	foo		2999677	0					
ANR	2999721	Identifier	rewind		2999677	1					
ANR	2999722	ArgumentList			2999677	1					
ANR	2999723	IfStatement	if ( pool_list )		2999677	6					
ANR	2999724	Condition	pool_list	57:5:1422:1430	2999677	0	True				
ANR	2999725	Identifier	pool_list		2999677	0					
ANR	2999726	CompoundStatement		11:17:186:186	2999677	1					
ANR	2999727	ExpressionStatement	pools . initializeFromString ( pool_list )	58:2:1438:1477	2999677	0	True				
ANR	2999728	CallExpression	pools . initializeFromString ( pool_list )		2999677	0					
ANR	2999729	Callee	pools . initializeFromString		2999677	0					
ANR	2999730	MemberAccess	pools . initializeFromString		2999677	0					
ANR	2999731	Identifier	pools		2999677	0					
ANR	2999732	Identifier	initializeFromString		2999677	1					
ANR	2999733	ArgumentList	pool_list		2999677	1					
ANR	2999734	Argument	pool_list		2999677	0					
ANR	2999735	Identifier	pool_list		2999677	0					
ANR	2999736	ExpressionStatement	pools . rewind ( )	59:2:1481:1495	2999677	1	True				
ANR	2999737	CallExpression	pools . rewind ( )		2999677	0					
ANR	2999738	Callee	pools . rewind		2999677	0					
ANR	2999739	MemberAccess	pools . rewind		2999677	0					
ANR	2999740	Identifier	pools		2999677	0					
ANR	2999741	Identifier	rewind		2999677	1					
ANR	2999742	ArgumentList			2999677	1					
ANR	2999743	WhileStatement	while ( true )		2999677	7					
ANR	2999744	Condition	true	61:8:1508:1511	2999677	0	True				
ANR	2999745	Identifier	true		2999677	0					
ANR	2999746	CompoundStatement		15:15:267:267	2999677	1					
ANR	2999747	ExpressionStatement	host = foo . next ( )	62:2:1519:1536	2999677	0	True				
ANR	2999748	AssignmentExpression	host = foo . next ( )		2999677	0		=			
ANR	2999749	Identifier	host		2999677	0					
ANR	2999750	CallExpression	foo . next ( )		2999677	1					
ANR	2999751	Callee	foo . next		2999677	0					
ANR	2999752	MemberAccess	foo . next		2999677	0					
ANR	2999753	Identifier	foo		2999677	0					
ANR	2999754	Identifier	next		2999677	1					
ANR	2999755	ArgumentList			2999677	1					
ANR	2999756	ExpressionStatement	pool = pools . next ( )	63:2:1540:1559	2999677	1	True				
ANR	2999757	AssignmentExpression	pool = pools . next ( )		2999677	0		=			
ANR	2999758	Identifier	pool		2999677	0					
ANR	2999759	CallExpression	pools . next ( )		2999677	1					
ANR	2999760	Callee	pools . next		2999677	0					
ANR	2999761	MemberAccess	pools . next		2999677	0					
ANR	2999762	Identifier	pools		2999677	0					
ANR	2999763	Identifier	next		2999677	1					
ANR	2999764	ArgumentList			2999677	1					
ANR	2999765	IfStatement	if ( ! host && ! pool )		2999677	2					
ANR	2999766	Condition	! host && ! pool	64:6:1567:1580	2999677	0	True				
ANR	2999767	AndExpression	! host && ! pool		2999677	0		&&			
ANR	2999768	UnaryOperationExpression	! host		2999677	0					
ANR	2999769	UnaryOperator	!		2999677	0					
ANR	2999770	Identifier	host		2999677	1					
ANR	2999771	UnaryOperationExpression	! pool		2999677	1					
ANR	2999772	UnaryOperator	!		2999677	0					
ANR	2999773	Identifier	pool		2999677	1					
ANR	2999774	CompoundStatement		18:23:336:336	2999677	1					
ANR	2999775	BreakStatement	break ;	65:3:1589:1594	2999677	0	True				
ANR	2999776	ExpressionStatement	"tmp = buildDaemon ( type , host , pool )"	67:2:1602:1639	2999677	3	True				
ANR	2999777	AssignmentExpression	"tmp = buildDaemon ( type , host , pool )"		2999677	0		=			
ANR	2999778	Identifier	tmp		2999677	0					
ANR	2999779	CallExpression	"buildDaemon ( type , host , pool )"		2999677	1					
ANR	2999780	Callee	buildDaemon		2999677	0					
ANR	2999781	Identifier	buildDaemon		2999677	0					
ANR	2999782	ArgumentList	type		2999677	1					
ANR	2999783	Argument	type		2999677	0					
ANR	2999784	Identifier	type		2999677	0					
ANR	2999785	Argument	host		2999677	1					
ANR	2999786	Identifier	host		2999677	0					
ANR	2999787	Argument	pool		2999677	2					
ANR	2999788	Identifier	pool		2999677	0					
ANR	2999789	ExpressionStatement	append ( tmp )	68:2:1643:1656	2999677	4	True				
ANR	2999790	CallExpression	append ( tmp )		2999677	0					
ANR	2999791	Callee	append		2999677	0					
ANR	2999792	Identifier	append		2999677	0					
ANR	2999793	ArgumentList	tmp		2999677	1					
ANR	2999794	Argument	tmp		2999677	0					
ANR	2999795	Identifier	tmp		2999677	0					
ANR	2999796	ReturnType	void		2999677	1					
ANR	2999797	Identifier	DaemonList :: init		2999677	2					
ANR	2999798	ParameterList	"daemon_t type , const char * host_list , const char * pool_list"		2999677	3					
ANR	2999799	Parameter	daemon_t type	46:18:1185:1197	2999677	0	True				
ANR	2999800	ParameterType	daemon_t		2999677	0					
ANR	2999801	Identifier	type		2999677	1					
ANR	2999802	Parameter	const char * host_list	46:33:1200:1220	2999677	1	True				
ANR	2999803	ParameterType	const char *		2999677	0					
ANR	2999804	Identifier	host_list		2999677	1					
ANR	2999805	Parameter	const char * pool_list	46:56:1223:1243	2999677	2	True				
ANR	2999806	ParameterType	const char *		2999677	0					
ANR	2999807	Identifier	pool_list		2999677	1					
ANR	2999808	CFGEntryNode	ENTRY		2999677		True				
ANR	2999809	CFGExitNode	EXIT		2999677		True				
ANR	2999810	Symbol	NULL		2999677						
ANR	2999811	Symbol	foo		2999677						
ANR	2999812	Symbol	pool		2999677						
ANR	2999813	Symbol	pools		2999677						
ANR	2999814	Symbol	type		2999677						
ANR	2999815	Symbol	host_list		2999677						
ANR	2999816	Symbol	foo . next		2999677						
ANR	2999817	Symbol	pools . next		2999677						
ANR	2999818	Symbol	tmp		2999677						
ANR	2999819	Symbol	host		2999677						
ANR	2999820	Symbol	true		2999677						
ANR	2999821	Symbol	pool_list		2999677						
ANR	2999822	Symbol	buildDaemon		2999677						
ANR	2999823	Function	DaemonList :: buildDaemon	73:0:1665:1921							
ANR	2999824	FunctionDef	"DaemonList :: buildDaemon (daemon_t type , const char * host , char const * pool)"		2999823	0					
ANR	2999825	CompoundStatement		75:0:1750:1921	2999823	0					
ANR	2999826	IdentifierDeclStatement	Daemon * tmp ;	76:1:1753:1764	2999823	0	True				
ANR	2999827	IdentifierDecl	* tmp		2999823	0					
ANR	2999828	IdentifierDeclType	Daemon *		2999823	0					
ANR	2999829	Identifier	tmp		2999823	1					
ANR	2999830	SwitchStatement	switch ( type )		2999823	1					
ANR	2999831	Condition	type	77:9:1775:1778	2999823	0	True				
ANR	2999832	Identifier	type		2999823	0					
ANR	2999833	CompoundStatement		3:16:31:31	2999823	1					
ANR	2999834	Label	case DT_COLLECTOR :	78:1:1785:1802	2999823	0	True				
ANR	2999835	Identifier	DT_COLLECTOR		2999823	0					
ANR	2999836	ExpressionStatement	tmp = new DCCollector ( host )	79:2:1806:1835	2999823	1	True				
ANR	2999837	AssignmentExpression	tmp = new DCCollector ( host )		2999823	0		=			
ANR	2999838	Identifier	tmp		2999823	0					
ANR	2999839	Identifier	host		2999823	1					
ANR	2999840	BreakStatement	break ;	80:2:1839:1844	2999823	2	True				
ANR	2999841	Label	default :	81:1:1847:1854	2999823	3	True				
ANR	2999842	Identifier	default		2999823	0					
ANR	2999843	ExpressionStatement	"tmp = new Daemon ( type , host , pool )"	82:2:1858:1894	2999823	4	True				
ANR	2999844	AssignmentExpression	"tmp = new Daemon ( type , host , pool )"		2999823	0		=			
ANR	2999845	Identifier	tmp		2999823	0					
ANR	2999846	Expression	"type , host , pool"		2999823	1					
ANR	2999847	Identifier	type		2999823	0					
ANR	2999848	Expression	"host , pool"		2999823	1					
ANR	2999849	Identifier	host		2999823	0					
ANR	2999850	Identifier	pool		2999823	1					
ANR	2999851	BreakStatement	break ;	83:2:1898:1903	2999823	5	True				
ANR	2999852	ReturnStatement	return tmp ;	85:1:1909:1919	2999823	2	True				
ANR	2999853	Identifier	tmp		2999823	0					
ANR	2999854	ReturnType	Daemon *		2999823	1					
ANR	2999855	Identifier	DaemonList :: buildDaemon		2999823	2					
ANR	2999856	ParameterList	"daemon_t type , const char * host , char const * pool"		2999823	3					
ANR	2999857	Parameter	daemon_t type	74:25:1698:1710	2999823	0	True				
ANR	2999858	ParameterType	daemon_t		2999823	0					
ANR	2999859	Identifier	type		2999823	1					
ANR	2999860	Parameter	const char * host	74:40:1713:1728	2999823	1	True				
ANR	2999861	ParameterType	const char *		2999823	0					
ANR	2999862	Identifier	host		2999823	1					
ANR	2999863	Parameter	char const * pool	74:58:1731:1746	2999823	2	True				
ANR	2999864	ParameterType	char const *		2999823	0					
ANR	2999865	Identifier	pool		2999823	1					
ANR	2999866	CFGEntryNode	ENTRY		2999823		True				
ANR	2999867	CFGExitNode	EXIT		2999823		True				
ANR	2999868	Symbol	tmp		2999823						
ANR	2999869	Symbol	host		2999823						
ANR	2999870	Symbol	pool		2999823						
ANR	2999871	Symbol	type		2999823						
ANR	2999872	Function	DaemonList :: append	94:0:2072:2133							
ANR	2999873	FunctionDef	DaemonList :: append (Daemon * d)		2999872	0					
ANR	2999874	CompoundStatement		95:31:2108:2133	2999872	0					
ANR	2999875	ReturnStatement	return list . Append ( d ) ;	95:1:2110:2131	2999872	0	True				
ANR	2999876	CallExpression	list . Append ( d )		2999872	0					
ANR	2999877	Callee	list . Append		2999872	0					
ANR	2999878	MemberAccess	list . Append		2999872	0					
ANR	2999879	Identifier	list		2999872	0					
ANR	2999880	Identifier	Append		2999872	1					
ANR	2999881	ArgumentList	d		2999872	1					
ANR	2999882	Argument	d		2999872	0					
ANR	2999883	Identifier	d		2999872	0					
ANR	2999884	ReturnType	bool		2999872	1					
ANR	2999885	Identifier	DaemonList :: append		2999872	2					
ANR	2999886	ParameterList	Daemon * d		2999872	3					
ANR	2999887	Parameter	Daemon * d	95:20:2097:2105	2999872	0	True				
ANR	2999888	ParameterType	Daemon *		2999872	0					
ANR	2999889	Identifier	d		2999872	1					
ANR	2999890	CFGEntryNode	ENTRY		2999872		True				
ANR	2999891	CFGExitNode	EXIT		2999872		True				
ANR	2999892	Symbol	list . Append		2999872						
ANR	2999893	Symbol	d		2999872						
ANR	2999894	Symbol	list		2999872						
ANR	2999895	Function	DaemonList :: Append	97:0:2136:2197							
ANR	2999896	FunctionDef	DaemonList :: Append (Daemon * d)		2999895	0					
ANR	2999897	CompoundStatement		98:31:2172:2197	2999895	0					
ANR	2999898	ReturnStatement	return list . Append ( d ) ;	98:1:2174:2195	2999895	0	True				
ANR	2999899	CallExpression	list . Append ( d )		2999895	0					
ANR	2999900	Callee	list . Append		2999895	0					
ANR	2999901	MemberAccess	list . Append		2999895	0					
ANR	2999902	Identifier	list		2999895	0					
ANR	2999903	Identifier	Append		2999895	1					
ANR	2999904	ArgumentList	d		2999895	1					
ANR	2999905	Argument	d		2999895	0					
ANR	2999906	Identifier	d		2999895	0					
ANR	2999907	ReturnType	bool		2999895	1					
ANR	2999908	Identifier	DaemonList :: Append		2999895	2					
ANR	2999909	ParameterList	Daemon * d		2999895	3					
ANR	2999910	Parameter	Daemon * d	98:20:2161:2169	2999895	0	True				
ANR	2999911	ParameterType	Daemon *		2999895	0					
ANR	2999912	Identifier	d		2999895	1					
ANR	2999913	CFGEntryNode	ENTRY		2999895		True				
ANR	2999914	CFGExitNode	EXIT		2999895		True				
ANR	2999915	Symbol	list . Append		2999895						
ANR	2999916	Symbol	d		2999895						
ANR	2999917	Symbol	list		2999895						
ANR	2999918	Function	DaemonList :: isEmpty	100:0:2200:2258							
ANR	2999919	FunctionDef	DaemonList :: isEmpty ()		2999918	0					
ANR	2999920	CompoundStatement		101:28:2233:2258	2999918	0					
ANR	2999921	ReturnStatement	return list . IsEmpty ( ) ;	101:1:2235:2256	2999918	0	True				
ANR	2999922	CallExpression	list . IsEmpty ( )		2999918	0					
ANR	2999923	Callee	list . IsEmpty		2999918	0					
ANR	2999924	MemberAccess	list . IsEmpty		2999918	0					
ANR	2999925	Identifier	list		2999918	0					
ANR	2999926	Identifier	IsEmpty		2999918	1					
ANR	2999927	ArgumentList			2999918	1					
ANR	2999928	ReturnType	bool		2999918	1					
ANR	2999929	Identifier	DaemonList :: isEmpty		2999918	2					
ANR	2999930	ParameterList			2999918	3					
ANR	2999931	CFGEntryNode	ENTRY		2999918		True				
ANR	2999932	CFGExitNode	EXIT		2999918		True				
ANR	2999933	Symbol	list		2999918						
ANR	2999934	Symbol	list . IsEmpty		2999918						
ANR	2999935	Function	DaemonList :: IsEmpty	103:0:2262:2320							
ANR	2999936	FunctionDef	DaemonList :: IsEmpty ()		2999935	0					
ANR	2999937	CompoundStatement		104:28:2295:2320	2999935	0					
ANR	2999938	ReturnStatement	return list . IsEmpty ( ) ;	104:1:2297:2318	2999935	0	True				
ANR	2999939	CallExpression	list . IsEmpty ( )		2999935	0					
ANR	2999940	Callee	list . IsEmpty		2999935	0					
ANR	2999941	MemberAccess	list . IsEmpty		2999935	0					
ANR	2999942	Identifier	list		2999935	0					
ANR	2999943	Identifier	IsEmpty		2999935	1					
ANR	2999944	ArgumentList			2999935	1					
ANR	2999945	ReturnType	bool		2999935	1					
ANR	2999946	Identifier	DaemonList :: IsEmpty		2999935	2					
ANR	2999947	ParameterList			2999935	3					
ANR	2999948	CFGEntryNode	ENTRY		2999935		True				
ANR	2999949	CFGExitNode	EXIT		2999935		True				
ANR	2999950	Symbol	list		2999935						
ANR	2999951	Symbol	list . IsEmpty		2999935						
ANR	2999952	Function	DaemonList :: number	106:0:2324:2379							
ANR	2999953	FunctionDef	DaemonList :: number ()		2999952	0					
ANR	2999954	CompoundStatement		107:27:2355:2379	2999952	0					
ANR	2999955	ReturnStatement	return list . Number ( ) ;	107:1:2357:2377	2999952	0	True				
ANR	2999956	CallExpression	list . Number ( )		2999952	0					
ANR	2999957	Callee	list . Number		2999952	0					
ANR	2999958	MemberAccess	list . Number		2999952	0					
ANR	2999959	Identifier	list		2999952	0					
ANR	2999960	Identifier	Number		2999952	1					
ANR	2999961	ArgumentList			2999952	1					
ANR	2999962	ReturnType	int		2999952	1					
ANR	2999963	Identifier	DaemonList :: number		2999952	2					
ANR	2999964	ParameterList			2999952	3					
ANR	2999965	CFGEntryNode	ENTRY		2999952		True				
ANR	2999966	CFGExitNode	EXIT		2999952		True				
ANR	2999967	Symbol	list		2999952						
ANR	2999968	Symbol	list . Number		2999952						
ANR	2999969	Function	DaemonList :: Number	109:0:2383:2438							
ANR	2999970	FunctionDef	DaemonList :: Number ()		2999969	0					
ANR	2999971	CompoundStatement		110:27:2414:2438	2999969	0					
ANR	2999972	ReturnStatement	return list . Number ( ) ;	110:1:2416:2436	2999969	0	True				
ANR	2999973	CallExpression	list . Number ( )		2999969	0					
ANR	2999974	Callee	list . Number		2999969	0					
ANR	2999975	MemberAccess	list . Number		2999969	0					
ANR	2999976	Identifier	list		2999969	0					
ANR	2999977	Identifier	Number		2999969	1					
ANR	2999978	ArgumentList			2999969	1					
ANR	2999979	ReturnType	int		2999969	1					
ANR	2999980	Identifier	DaemonList :: Number		2999969	2					
ANR	2999981	ParameterList			2999969	3					
ANR	2999982	CFGEntryNode	ENTRY		2999969		True				
ANR	2999983	CFGExitNode	EXIT		2999969		True				
ANR	2999984	Symbol	list		2999969						
ANR	2999985	Symbol	list . Number		2999969						
ANR	2999986	Function	DaemonList :: rewind	112:0:2442:2491							
ANR	2999987	FunctionDef	DaemonList :: rewind ()		2999986	0					
ANR	2999988	CompoundStatement		113:27:2474:2491	2999986	0					
ANR	2999989	ExpressionStatement	list . Rewind ( )	113:1:2476:2489	2999986	0	True				
ANR	2999990	CallExpression	list . Rewind ( )		2999986	0					
ANR	2999991	Callee	list . Rewind		2999986	0					
ANR	2999992	MemberAccess	list . Rewind		2999986	0					
ANR	2999993	Identifier	list		2999986	0					
ANR	2999994	Identifier	Rewind		2999986	1					
ANR	2999995	ArgumentList			2999986	1					
ANR	2999996	ReturnType	void		2999986	1					
ANR	2999997	Identifier	DaemonList :: rewind		2999986	2					
ANR	2999998	ParameterList			2999986	3					
ANR	2999999	CFGEntryNode	ENTRY		2999986		True				
ANR	3000000	CFGExitNode	EXIT		2999986		True				
ANR	3000001	Symbol	list		2999986						
ANR	3000002	Function	DaemonList :: Rewind	115:0:2495:2544							
ANR	3000003	FunctionDef	DaemonList :: Rewind ()		3000002	0					
ANR	3000004	CompoundStatement		116:27:2527:2544	3000002	0					
ANR	3000005	ExpressionStatement	list . Rewind ( )	116:1:2529:2542	3000002	0	True				
ANR	3000006	CallExpression	list . Rewind ( )		3000002	0					
ANR	3000007	Callee	list . Rewind		3000002	0					
ANR	3000008	MemberAccess	list . Rewind		3000002	0					
ANR	3000009	Identifier	list		3000002	0					
ANR	3000010	Identifier	Rewind		3000002	1					
ANR	3000011	ArgumentList			3000002	1					
ANR	3000012	ReturnType	void		3000002	1					
ANR	3000013	Identifier	DaemonList :: Rewind		3000002	2					
ANR	3000014	ParameterList			3000002	3					
ANR	3000015	CFGEntryNode	ENTRY		3000002		True				
ANR	3000016	CFGExitNode	EXIT		3000002		True				
ANR	3000017	Symbol	list		3000002						
ANR	3000018	Function	DaemonList :: current	118:0:2548:2614							
ANR	3000019	FunctionDef	DaemonList :: current (Daemon * & d)		3000018	0					
ANR	3000020	CompoundStatement		119:35:2588:2614	3000018	0					
ANR	3000021	ReturnStatement	return list . Current ( d ) ;	119:1:2590:2612	3000018	0	True				
ANR	3000022	CallExpression	list . Current ( d )		3000018	0					
ANR	3000023	Callee	list . Current		3000018	0					
ANR	3000024	MemberAccess	list . Current		3000018	0					
ANR	3000025	Identifier	list		3000018	0					
ANR	3000026	Identifier	Current		3000018	1					
ANR	3000027	ArgumentList	d		3000018	1					
ANR	3000028	Argument	d		3000018	0					
ANR	3000029	Identifier	d		3000018	0					
ANR	3000030	ReturnType	bool		3000018	1					
ANR	3000031	Identifier	DaemonList :: current		3000018	2					
ANR	3000032	ParameterList	Daemon * & d		3000018	3					
ANR	3000033	Parameter	Daemon * & d	119:21:2574:2584	3000018	0	True				
ANR	3000034	ParameterType	Daemon * &		3000018	0					
ANR	3000035	Identifier	d		3000018	1					
ANR	3000036	CFGEntryNode	ENTRY		3000018		True				
ANR	3000037	CFGExitNode	EXIT		3000018		True				
ANR	3000038	Symbol	d		3000018						
ANR	3000039	Symbol	list . Current		3000018						
ANR	3000040	Symbol	list		3000018						
ANR	3000041	Function	DaemonList :: Current	121:0:2618:2684							
ANR	3000042	FunctionDef	DaemonList :: Current (Daemon * & d)		3000041	0					
ANR	3000043	CompoundStatement		122:35:2658:2684	3000041	0					
ANR	3000044	ReturnStatement	return list . Current ( d ) ;	122:1:2660:2682	3000041	0	True				
ANR	3000045	CallExpression	list . Current ( d )		3000041	0					
ANR	3000046	Callee	list . Current		3000041	0					
ANR	3000047	MemberAccess	list . Current		3000041	0					
ANR	3000048	Identifier	list		3000041	0					
ANR	3000049	Identifier	Current		3000041	1					
ANR	3000050	ArgumentList	d		3000041	1					
ANR	3000051	Argument	d		3000041	0					
ANR	3000052	Identifier	d		3000041	0					
ANR	3000053	ReturnType	bool		3000041	1					
ANR	3000054	Identifier	DaemonList :: Current		3000041	2					
ANR	3000055	ParameterList	Daemon * & d		3000041	3					
ANR	3000056	Parameter	Daemon * & d	122:21:2644:2654	3000041	0	True				
ANR	3000057	ParameterType	Daemon * &		3000041	0					
ANR	3000058	Identifier	d		3000041	1					
ANR	3000059	CFGEntryNode	ENTRY		3000041		True				
ANR	3000060	CFGExitNode	EXIT		3000041		True				
ANR	3000061	Symbol	d		3000041						
ANR	3000062	Symbol	list . Current		3000041						
ANR	3000063	Symbol	list		3000041						
ANR	3000064	Function	DaemonList :: next	124:0:2688:2748							
ANR	3000065	FunctionDef	DaemonList :: next (Daemon * & d)		3000064	0					
ANR	3000066	CompoundStatement		125:32:2725:2748	3000064	0					
ANR	3000067	ReturnStatement	return list . Next ( d ) ;	125:1:2727:2746	3000064	0	True				
ANR	3000068	CallExpression	list . Next ( d )		3000064	0					
ANR	3000069	Callee	list . Next		3000064	0					
ANR	3000070	MemberAccess	list . Next		3000064	0					
ANR	3000071	Identifier	list		3000064	0					
ANR	3000072	Identifier	Next		3000064	1					
ANR	3000073	ArgumentList	d		3000064	1					
ANR	3000074	Argument	d		3000064	0					
ANR	3000075	Identifier	d		3000064	0					
ANR	3000076	ReturnType	bool		3000064	1					
ANR	3000077	Identifier	DaemonList :: next		3000064	2					
ANR	3000078	ParameterList	Daemon * & d		3000064	3					
ANR	3000079	Parameter	Daemon * & d	125:18:2711:2721	3000064	0	True				
ANR	3000080	ParameterType	Daemon * &		3000064	0					
ANR	3000081	Identifier	d		3000064	1					
ANR	3000082	CFGEntryNode	ENTRY		3000064		True				
ANR	3000083	CFGExitNode	EXIT		3000064		True				
ANR	3000084	Symbol	d		3000064						
ANR	3000085	Symbol	list . Next		3000064						
ANR	3000086	Symbol	list		3000064						
ANR	3000087	Function	DaemonList :: Next	127:0:2752:2812							
ANR	3000088	FunctionDef	DaemonList :: Next (Daemon * & d)		3000087	0					
ANR	3000089	CompoundStatement		128:32:2789:2812	3000087	0					
ANR	3000090	ReturnStatement	return list . Next ( d ) ;	128:1:2791:2810	3000087	0	True				
ANR	3000091	CallExpression	list . Next ( d )		3000087	0					
ANR	3000092	Callee	list . Next		3000087	0					
ANR	3000093	MemberAccess	list . Next		3000087	0					
ANR	3000094	Identifier	list		3000087	0					
ANR	3000095	Identifier	Next		3000087	1					
ANR	3000096	ArgumentList	d		3000087	1					
ANR	3000097	Argument	d		3000087	0					
ANR	3000098	Identifier	d		3000087	0					
ANR	3000099	ReturnType	bool		3000087	1					
ANR	3000100	Identifier	DaemonList :: Next		3000087	2					
ANR	3000101	ParameterList	Daemon * & d		3000087	3					
ANR	3000102	Parameter	Daemon * & d	128:18:2775:2785	3000087	0	True				
ANR	3000103	ParameterType	Daemon * &		3000087	0					
ANR	3000104	Identifier	d		3000087	1					
ANR	3000105	CFGEntryNode	ENTRY		3000087		True				
ANR	3000106	CFGExitNode	EXIT		3000087		True				
ANR	3000107	Symbol	d		3000087						
ANR	3000108	Symbol	list . Next		3000087						
ANR	3000109	Symbol	list		3000087						
ANR	3000110	Function	DaemonList :: atEnd	130:0:2816:2864							
ANR	3000111	FunctionDef	DaemonList :: atEnd ()		3000110	0					
ANR	3000112	CompoundStatement		131:20:2841:2864	3000110	0					
ANR	3000113	ReturnStatement	return list . AtEnd ( ) ;	131:1:2843:2862	3000110	0	True				
ANR	3000114	CallExpression	list . AtEnd ( )		3000110	0					
ANR	3000115	Callee	list . AtEnd		3000110	0					
ANR	3000116	MemberAccess	list . AtEnd		3000110	0					
ANR	3000117	Identifier	list		3000110	0					
ANR	3000118	Identifier	AtEnd		3000110	1					
ANR	3000119	ArgumentList			3000110	1					
ANR	3000120	ReturnType	bool		3000110	1					
ANR	3000121	Identifier	DaemonList :: atEnd		3000110	2					
ANR	3000122	ParameterList			3000110	3					
ANR	3000123	CFGEntryNode	ENTRY		3000110		True				
ANR	3000124	CFGExitNode	EXIT		3000110		True				
ANR	3000125	Symbol	list		3000110						
ANR	3000126	Symbol	list . AtEnd		3000110						
ANR	3000127	Function	DaemonList :: AtEnd	133:0:2868:2916							
ANR	3000128	FunctionDef	DaemonList :: AtEnd ()		3000127	0					
ANR	3000129	CompoundStatement		134:20:2893:2916	3000127	0					
ANR	3000130	ReturnStatement	return list . AtEnd ( ) ;	134:1:2895:2914	3000127	0	True				
ANR	3000131	CallExpression	list . AtEnd ( )		3000127	0					
ANR	3000132	Callee	list . AtEnd		3000127	0					
ANR	3000133	MemberAccess	list . AtEnd		3000127	0					
ANR	3000134	Identifier	list		3000127	0					
ANR	3000135	Identifier	AtEnd		3000127	1					
ANR	3000136	ArgumentList			3000127	1					
ANR	3000137	ReturnType	bool		3000127	1					
ANR	3000138	Identifier	DaemonList :: AtEnd		3000127	2					
ANR	3000139	ParameterList			3000127	3					
ANR	3000140	CFGEntryNode	ENTRY		3000127		True				
ANR	3000141	CFGExitNode	EXIT		3000127		True				
ANR	3000142	Symbol	list . AtEnd		3000127						
ANR	3000143	Symbol	list		3000127						
ANR	3000144	Function	DaemonList :: deleteCurrent	136:0:2920:2978							
ANR	3000145	FunctionDef	DaemonList :: deleteCurrent ()		3000144	0					
ANR	3000146	CompoundStatement		137:28:2953:2978	3000144	0					
ANR	3000147	ExpressionStatement	this -> DeleteCurrent ( )	137:1:2955:2976	3000144	0	True				
ANR	3000148	CallExpression	this -> DeleteCurrent ( )		3000144	0					
ANR	3000149	Callee	this -> DeleteCurrent		3000144	0					
ANR	3000150	PtrMemberAccess	this -> DeleteCurrent		3000144	0					
ANR	3000151	Identifier	this		3000144	0					
ANR	3000152	Identifier	DeleteCurrent		3000144	1					
ANR	3000153	ArgumentList			3000144	1					
ANR	3000154	ReturnType	void		3000144	1					
ANR	3000155	Identifier	DaemonList :: deleteCurrent		3000144	2					
ANR	3000156	ParameterList			3000144	3					
ANR	3000157	CFGEntryNode	ENTRY		3000144		True				
ANR	3000158	CFGExitNode	EXIT		3000144		True				
ANR	3000159	Symbol	this		3000144						
ANR	3000160	Function	DaemonList :: DeleteCurrent	148:0:3446:3576							
ANR	3000161	FunctionDef	DaemonList :: DeleteCurrent ()		3000160	0					
ANR	3000162	CompoundStatement		149:28:3479:3576	3000160	0					
ANR	3000163	IdentifierDeclStatement	Daemon * cur = NULL ;	150:1:3482:3500	3000160	0	True				
ANR	3000164	IdentifierDecl	* cur = NULL		3000160	0					
ANR	3000165	IdentifierDeclType	Daemon *		3000160	0					
ANR	3000166	Identifier	cur		3000160	1					
ANR	3000167	AssignmentExpression	* cur = NULL		3000160	2		=			
ANR	3000168	Identifier	NULL		3000160	0					
ANR	3000169	Identifier	NULL		3000160	1					
ANR	3000170	IfStatement	if ( list . Current ( cur ) && cur )		3000160	1					
ANR	3000171	Condition	list . Current ( cur ) && cur	151:5:3507:3530	3000160	0	True				
ANR	3000172	AndExpression	list . Current ( cur ) && cur		3000160	0		&&			
ANR	3000173	CallExpression	list . Current ( cur )		3000160	0					
ANR	3000174	Callee	list . Current		3000160	0					
ANR	3000175	MemberAccess	list . Current		3000160	0					
ANR	3000176	Identifier	list		3000160	0					
ANR	3000177	Identifier	Current		3000160	1					
ANR	3000178	ArgumentList	cur		3000160	1					
ANR	3000179	Argument	cur		3000160	0					
ANR	3000180	Identifier	cur		3000160	0					
ANR	3000181	Identifier	cur		3000160	1					
ANR	3000182	CompoundStatement		3:32:54:54	3000160	1					
ANR	3000183	Statement	delete	152:2:3538:3543	3000160	0	True				
ANR	3000184	ExpressionStatement	cur	152:9:3545:3548	3000160	1	True				
ANR	3000185	Identifier	cur		3000160	0					
ANR	3000186	ExpressionStatement	list . DeleteCurrent ( )	154:1:3554:3574	3000160	2	True				
ANR	3000187	CallExpression	list . DeleteCurrent ( )		3000160	0					
ANR	3000188	Callee	list . DeleteCurrent		3000160	0					
ANR	3000189	MemberAccess	list . DeleteCurrent		3000160	0					
ANR	3000190	Identifier	list		3000160	0					
ANR	3000191	Identifier	DeleteCurrent		3000160	1					
ANR	3000192	ArgumentList			3000160	1					
ANR	3000193	ReturnType	void		3000160	1					
ANR	3000194	Identifier	DaemonList :: DeleteCurrent		3000160	2					
ANR	3000195	ParameterList			3000160	3					
ANR	3000196	CFGEntryNode	ENTRY		3000160		True				
ANR	3000197	CFGExitNode	EXIT		3000160		True				
ANR	3000198	Symbol	cur		3000160						
ANR	3000199	Symbol	NULL		3000160						
ANR	3000200	Symbol	list . Current		3000160						
ANR	3000201	Symbol	list		3000160						
ANR	3000202	Function	CollectorList :: CollectorList	158:0:3580:3613							
ANR	3000203	FunctionDef	CollectorList :: CollectorList ()		3000202	0					
ANR	3000204	CompoundStatement		158:31:3611:3613	3000202	0					
ANR	3000205	Identifier	CollectorList :: CollectorList		3000202	1					
ANR	3000206	ParameterList			3000202	2					
ANR	3000207	CFGEntryNode	ENTRY		3000202		True				
ANR	3000208	CFGExitNode	EXIT		3000202		True				
ANR	3000209	Function	CollectorList :: ~CollectorList	161:0:3616:3650							
ANR	3000210	FunctionDef	CollectorList :: ~CollectorList ()		3000209	0					
ANR	3000211	CompoundStatement		161:32:3648:3650	3000209	0					
ANR	3000212	Identifier	CollectorList :: ~CollectorList		3000209	1					
ANR	3000213	ParameterList			3000209	2					
ANR	3000214	CFGEntryNode	ENTRY		3000209		True				
ANR	3000215	CFGExitNode	EXIT		3000209		True				
ANR	3000216	Function	CollectorList :: create	165:0:3654:4824							
ANR	3000217	FunctionDef	CollectorList :: create (const char * pool)		3000216	0					
ANR	3000218	CompoundStatement		167:0:3713:4824	3000216	0					
ANR	3000219	IdentifierDeclStatement	CollectorList * result = new CollectorList ( ) ;	168:1:3716:3760	3000216	0	True				
ANR	3000220	IdentifierDecl	* result = new CollectorList ( )		3000216	0					
ANR	3000221	IdentifierDeclType	CollectorList *		3000216	0					
ANR	3000222	Identifier	result		3000216	1					
ANR	3000223	AssignmentExpression	* result = new CollectorList ( )		3000216	2		=			
ANR	3000224	Identifier	result		3000216	0					
ANR	3000225	UnaryExpression	new CollectorList ( )		3000216	1					
ANR	3000226	IdentifierDeclStatement	DCCollector * collector = NULL ;	169:1:3763:3793	3000216	1	True				
ANR	3000227	IdentifierDecl	* collector = NULL		3000216	0					
ANR	3000228	IdentifierDeclType	DCCollector *		3000216	0					
ANR	3000229	Identifier	collector		3000216	1					
ANR	3000230	AssignmentExpression	* collector = NULL		3000216	2		=			
ANR	3000231	Identifier	NULL		3000216	0					
ANR	3000232	Identifier	NULL		3000216	1					
ANR	3000233	IfStatement	if ( pool )		3000216	2					
ANR	3000234	Condition	pool	171:5:3801:3804	3000216	0	True				
ANR	3000235	Identifier	pool		3000216	0					
ANR	3000236	CompoundStatement		5:11:93:93	3000216	1					
ANR	3000237	ExpressionStatement	result -> append ( new DCCollector ( pool ) )	174:2:3917:3956	3000216	0	True				
ANR	3000238	CallExpression	result -> append ( new DCCollector ( pool ) )		3000216	0					
ANR	3000239	Callee	result -> append		3000216	0					
ANR	3000240	PtrMemberAccess	result -> append		3000216	0					
ANR	3000241	Identifier	result		3000216	0					
ANR	3000242	Identifier	append		3000216	1					
ANR	3000243	ArgumentList	pool		3000216	1					
ANR	3000244	Argument	pool		3000216	0					
ANR	3000245	Identifier	pool		3000216	0					
ANR	3000246	ReturnStatement	return result ;	175:2:3960:3973	3000216	1	True				
ANR	3000247	Identifier	result		3000216	0					
ANR	3000248	IdentifierDeclStatement	StringList collector_name_list ;	179:1:4021:4051	3000216	3	True				
ANR	3000249	IdentifierDecl	collector_name_list		3000216	0					
ANR	3000250	IdentifierDeclType	StringList		3000216	0					
ANR	3000251	Identifier	collector_name_list		3000216	1					
ANR	3000252	IdentifierDeclStatement	char * collector_name_param = NULL ;	180:1:4054:4088	3000216	4	True				
ANR	3000253	IdentifierDecl	* collector_name_param = NULL		3000216	0					
ANR	3000254	IdentifierDeclType	char *		3000216	0					
ANR	3000255	Identifier	collector_name_param		3000216	1					
ANR	3000256	AssignmentExpression	* collector_name_param = NULL		3000216	2		=			
ANR	3000257	Identifier	NULL		3000216	0					
ANR	3000258	Identifier	NULL		3000216	1					
ANR	3000259	ExpressionStatement	"collector_name_param = getCmHostFromConfig ( ""COLLECTOR"" )"	181:1:4091:4148	3000216	5	True				
ANR	3000260	AssignmentExpression	"collector_name_param = getCmHostFromConfig ( ""COLLECTOR"" )"		3000216	0		=			
ANR	3000261	Identifier	collector_name_param		3000216	0					
ANR	3000262	CallExpression	"getCmHostFromConfig ( ""COLLECTOR"" )"		3000216	1					
ANR	3000263	Callee	getCmHostFromConfig		3000216	0					
ANR	3000264	Identifier	getCmHostFromConfig		3000216	0					
ANR	3000265	ArgumentList	"""COLLECTOR"""		3000216	1					
ANR	3000266	Argument	"""COLLECTOR"""		3000216	0					
ANR	3000267	PrimaryExpression	"""COLLECTOR"""		3000216	0					
ANR	3000268	IfStatement	if ( collector_name_param )		3000216	6					
ANR	3000269	Condition	collector_name_param	182:5:4155:4174	3000216	0	True				
ANR	3000270	Identifier	collector_name_param		3000216	0					
ANR	3000271	CompoundStatement		21:2:599:627	3000216	1					
ANR	3000272	ExpressionStatement	collector_name_list . initializeFromString ( collector_name_param )	183:2:4182:4244	3000216	0	True				
ANR	3000273	CallExpression	collector_name_list . initializeFromString ( collector_name_param )		3000216	0					
ANR	3000274	Callee	collector_name_list . initializeFromString		3000216	0					
ANR	3000275	MemberAccess	collector_name_list . initializeFromString		3000216	0					
ANR	3000276	Identifier	collector_name_list		3000216	0					
ANR	3000277	Identifier	initializeFromString		3000216	1					
ANR	3000278	ArgumentList	collector_name_param		3000216	1					
ANR	3000279	Argument	collector_name_param		3000216	0					
ANR	3000280	Identifier	collector_name_param		3000216	0					
ANR	3000281	ExpressionStatement	collector_name_list . rewind ( )	186:2:4281:4309	3000216	1	True				
ANR	3000282	CallExpression	collector_name_list . rewind ( )		3000216	0					
ANR	3000283	Callee	collector_name_list . rewind		3000216	0					
ANR	3000284	MemberAccess	collector_name_list . rewind		3000216	0					
ANR	3000285	Identifier	collector_name_list		3000216	0					
ANR	3000286	Identifier	rewind		3000216	1					
ANR	3000287	ArgumentList			3000216	1					
ANR	3000288	IdentifierDeclStatement	char * collector_name = NULL ;	187:2:4313:4341	3000216	2	True				
ANR	3000289	IdentifierDecl	* collector_name = NULL		3000216	0					
ANR	3000290	IdentifierDeclType	char *		3000216	0					
ANR	3000291	Identifier	collector_name		3000216	1					
ANR	3000292	AssignmentExpression	* collector_name = NULL		3000216	2		=			
ANR	3000293	Identifier	NULL		3000216	0					
ANR	3000294	Identifier	NULL		3000216	1					
ANR	3000295	WhileStatement	while ( ( collector_name = collector_name_list . next ( ) ) != NULL )		3000216	3					
ANR	3000296	Condition	( collector_name = collector_name_list . next ( ) ) != NULL	188:9:4352:4404	3000216	0	True				
ANR	3000297	EqualityExpression	( collector_name = collector_name_list . next ( ) ) != NULL		3000216	0		!=			
ANR	3000298	AssignmentExpression	collector_name = collector_name_list . next ( )		3000216	0		=			
ANR	3000299	Identifier	collector_name		3000216	0					
ANR	3000300	CallExpression	collector_name_list . next ( )		3000216	1					
ANR	3000301	Callee	collector_name_list . next		3000216	0					
ANR	3000302	MemberAccess	collector_name_list . next		3000216	0					
ANR	3000303	Identifier	collector_name_list		3000216	0					
ANR	3000304	Identifier	next		3000216	1					
ANR	3000305	ArgumentList			3000216	1					
ANR	3000306	Identifier	NULL		3000216	1					
ANR	3000307	CompoundStatement		22:64:693:693	3000216	1					
ANR	3000308	ExpressionStatement	collector = new DCCollector ( collector_name )	189:3:4412:4456	3000216	0	True				
ANR	3000309	AssignmentExpression	collector = new DCCollector ( collector_name )		3000216	0		=			
ANR	3000310	Identifier	collector		3000216	0					
ANR	3000311	Identifier	collector_name		3000216	1					
ANR	3000312	ExpressionStatement	result -> append ( collector )	190:3:4461:4487	3000216	1	True				
ANR	3000313	CallExpression	result -> append ( collector )		3000216	0					
ANR	3000314	Callee	result -> append		3000216	0					
ANR	3000315	PtrMemberAccess	result -> append		3000216	0					
ANR	3000316	Identifier	result		3000216	0					
ANR	3000317	Identifier	append		3000216	1					
ANR	3000318	ArgumentList	collector		3000216	1					
ANR	3000319	Argument	collector		3000216	0					
ANR	3000320	Identifier	collector		3000216	0					
ANR	3000321	ElseStatement	else		3000216	0					
ANR	3000322	CompoundStatement		26:8:787:787	3000216	0					
ANR	3000323	ExpressionStatement	"dprintf ( D_ALWAYS , ""Warning: Collector information was not found in the configuration file. ClassAds will not be sent to the collector and this daemon will not join a larger Condor pool.\\n"" )"	194:2:4548:4738	3000216	0	True				
ANR	3000324	CallExpression	"dprintf ( D_ALWAYS , ""Warning: Collector information was not found in the configuration file. ClassAds will not be sent to the collector and this daemon will not join a larger Condor pool.\\n"" )"		3000216	0					
ANR	3000325	Callee	dprintf		3000216	0					
ANR	3000326	Identifier	dprintf		3000216	0					
ANR	3000327	ArgumentList	D_ALWAYS		3000216	1					
ANR	3000328	Argument	D_ALWAYS		3000216	0					
ANR	3000329	Identifier	D_ALWAYS		3000216	0					
ANR	3000330	Argument	"""Warning: Collector information was not found in the configuration file. ClassAds will not be sent to the collector and this daemon will not join a larger Condor pool.\\n"""		3000216	1					
ANR	3000331	PrimaryExpression	"""Warning: Collector information was not found in the configuration file. ClassAds will not be sent to the collector and this daemon will not join a larger Condor pool.\\n"""		3000216	0					
ANR	3000332	IfStatement	if ( collector_name_param )		3000216	7					
ANR	3000333	Condition	collector_name_param	196:5:4748:4767	3000216	0	True				
ANR	3000334	Identifier	collector_name_param		3000216	0					
ANR	3000335	CompoundStatement		30:28:1057:1057	3000216	1					
ANR	3000336	ExpressionStatement	free ( collector_name_param )	197:2:4775:4803	3000216	0	True				
ANR	3000337	CallExpression	free ( collector_name_param )		3000216	0					
ANR	3000338	Callee	free		3000216	0					
ANR	3000339	Identifier	free		3000216	0					
ANR	3000340	ArgumentList	collector_name_param		3000216	1					
ANR	3000341	Argument	collector_name_param		3000216	0					
ANR	3000342	Identifier	collector_name_param		3000216	0					
ANR	3000343	ReturnStatement	return result ;	199:1:4809:4822	3000216	8	True				
ANR	3000344	Identifier	result		3000216	0					
ANR	3000345	ReturnType	CollectorList *		3000216	1					
ANR	3000346	Identifier	CollectorList :: create		3000216	2					
ANR	3000347	ParameterList	const char * pool		3000216	3					
ANR	3000348	Parameter	const char * pool	166:23:3693:3709	3000216	0	True				
ANR	3000349	ParameterType	const char *		3000216	0					
ANR	3000350	Identifier	pool		3000216	1					
ANR	3000351	CFGEntryNode	ENTRY		3000216		True				
ANR	3000352	CFGExitNode	EXIT		3000216		True				
ANR	3000353	Symbol	result		3000216						
ANR	3000354	Symbol	NULL		3000216						
ANR	3000355	Symbol	collector_name_list		3000216						
ANR	3000356	Symbol	pool		3000216						
ANR	3000357	Symbol	collector_name		3000216						
ANR	3000358	Symbol	D_ALWAYS		3000216						
ANR	3000359	Symbol	collector_name_param		3000216						
ANR	3000360	Symbol	getCmHostFromConfig		3000216						
ANR	3000361	Symbol	collector		3000216						
ANR	3000362	Symbol	collector_name_list . next		3000216						
ANR	3000363	Function	CollectorList :: resortLocal	213:0:5111:6478							
ANR	3000364	FunctionDef	CollectorList :: resortLocal (const char * preferred_collector)		3000363	0					
ANR	3000365	CompoundStatement		215:0:5177:6478	3000363	0					
ANR	3000366	IdentifierDeclStatement	char * tmp_preferred_collector = NULL ;	220:1:5398:5435	3000363	0	True				
ANR	3000367	IdentifierDecl	* tmp_preferred_collector = NULL		3000363	0					
ANR	3000368	IdentifierDeclType	char *		3000363	0					
ANR	3000369	Identifier	tmp_preferred_collector		3000363	1					
ANR	3000370	AssignmentExpression	* tmp_preferred_collector = NULL		3000363	2		=			
ANR	3000371	Identifier	NULL		3000363	0					
ANR	3000372	Identifier	NULL		3000363	1					
ANR	3000373	IfStatement	if ( ! preferred_collector )		3000363	1					
ANR	3000374	Condition	! preferred_collector	222:6:5444:5463	3000363	0	True				
ANR	3000375	UnaryOperationExpression	! preferred_collector		3000363	0					
ANR	3000376	UnaryOperator	!		3000363	0					
ANR	3000377	Identifier	preferred_collector		3000363	1					
ANR	3000378	CompoundStatement		11:2:391:437	3000363	1					
ANR	3000379	IdentifierDeclStatement	MyString _hostname_str = get_local_fqdn ( ) ;	224:2:5524:5565	3000363	0	True				
ANR	3000380	IdentifierDecl	_hostname_str = get_local_fqdn ( )		3000363	0					
ANR	3000381	IdentifierDeclType	MyString		3000363	0					
ANR	3000382	Identifier	_hostname_str		3000363	1					
ANR	3000383	AssignmentExpression	_hostname_str = get_local_fqdn ( )		3000363	2		=			
ANR	3000384	Identifier	_hostname_str		3000363	0					
ANR	3000385	CallExpression	get_local_fqdn ( )		3000363	1					
ANR	3000386	Callee	get_local_fqdn		3000363	0					
ANR	3000387	Identifier	get_local_fqdn		3000363	0					
ANR	3000388	ArgumentList			3000363	1					
ANR	3000389	IdentifierDeclStatement	const char * _hostname = _hostname_str . Value ( ) ;	225:2:5569:5615	3000363	1	True				
ANR	3000390	IdentifierDecl	* _hostname = _hostname_str . Value ( )		3000363	0					
ANR	3000391	IdentifierDeclType	const char *		3000363	0					
ANR	3000392	Identifier	_hostname		3000363	1					
ANR	3000393	AssignmentExpression	* _hostname = _hostname_str . Value ( )		3000363	2		=			
ANR	3000394	Identifier	_hostname		3000363	0					
ANR	3000395	CallExpression	_hostname_str . Value ( )		3000363	1					
ANR	3000396	Callee	_hostname_str . Value		3000363	0					
ANR	3000397	MemberAccess	_hostname_str . Value		3000363	0					
ANR	3000398	Identifier	_hostname_str		3000363	0					
ANR	3000399	Identifier	Value		3000363	1					
ANR	3000400	ArgumentList			3000363	1					
ANR	3000401	IfStatement	if ( ! ( * _hostname ) )		3000363	2					
ANR	3000402	Condition	! ( * _hostname )	226:6:5623:5635	3000363	0	True				
ANR	3000403	UnaryOperationExpression	! ( * _hostname )		3000363	0					
ANR	3000404	UnaryOperator	!		3000363	0					
ANR	3000405	UnaryOperationExpression	* _hostname		3000363	1					
ANR	3000406	UnaryOperator	*		3000363	0					
ANR	3000407	Identifier	_hostname		3000363	1					
ANR	3000408	CompoundStatement		12:21:460:460	3000363	1					
ANR	3000409	ReturnStatement	return - 1 ;	228:3:5685:5694	3000363	0	True				
ANR	3000410	UnaryOperationExpression	- 1		3000363	0					
ANR	3000411	UnaryOperator	-		3000363	0					
ANR	3000412	PrimaryExpression	1		3000363	1					
ANR	3000413	ExpressionStatement	tmp_preferred_collector = strdup ( _hostname )	231:2:5703:5746	3000363	3	True				
ANR	3000414	AssignmentExpression	tmp_preferred_collector = strdup ( _hostname )		3000363	0		=			
ANR	3000415	Identifier	tmp_preferred_collector		3000363	0					
ANR	3000416	CallExpression	strdup ( _hostname )		3000363	1					
ANR	3000417	Callee	strdup		3000363	0					
ANR	3000418	Identifier	strdup		3000363	0					
ANR	3000419	ArgumentList	_hostname		3000363	1					
ANR	3000420	Argument	_hostname		3000363	0					
ANR	3000421	Identifier	_hostname		3000363	0					
ANR	3000422	ExpressionStatement	preferred_collector = preferred_collector	232:2:5750:5791	3000363	4	True				
ANR	3000423	AssignmentExpression	preferred_collector = preferred_collector		3000363	0		=			
ANR	3000424	Identifier	preferred_collector		3000363	0					
ANR	3000425	Identifier	preferred_collector		3000363	1					
ANR	3000426	IdentifierDeclStatement	Daemon * daemon ;	237:1:5882:5896	3000363	2	True				
ANR	3000427	IdentifierDecl	* daemon		3000363	0					
ANR	3000428	IdentifierDeclType	Daemon *		3000363	0					
ANR	3000429	Identifier	daemon		3000363	1					
ANR	3000430	IdentifierDeclStatement	SimpleList < Daemon * > prefer_list ;	238:1:5899:5930	3000363	3	True				
ANR	3000431	IdentifierDecl	prefer_list		3000363	0					
ANR	3000432	IdentifierDeclType	SimpleList < Daemon * >		3000363	0					
ANR	3000433	Identifier	prefer_list		3000363	1					
ANR	3000434	ExpressionStatement	this -> list . Rewind ( )	239:1:5933:5952	3000363	4	True				
ANR	3000435	CallExpression	this -> list . Rewind ( )		3000363	0					
ANR	3000436	Callee	this -> list . Rewind		3000363	0					
ANR	3000437	MemberAccess	this -> list . Rewind		3000363	0					
ANR	3000438	PtrMemberAccess	this -> list		3000363	0					
ANR	3000439	Identifier	this		3000363	0					
ANR	3000440	Identifier	list		3000363	1					
ANR	3000441	Identifier	Rewind		3000363	1					
ANR	3000442	ArgumentList			3000363	1					
ANR	3000443	WhileStatement	while ( this -> list . Next ( daemon ) )		3000363	5					
ANR	3000444	Condition	this -> list . Next ( daemon )	240:9:5963:5985	3000363	0	True				
ANR	3000445	CallExpression	this -> list . Next ( daemon )		3000363	0					
ANR	3000446	Callee	this -> list . Next		3000363	0					
ANR	3000447	MemberAccess	this -> list . Next		3000363	0					
ANR	3000448	PtrMemberAccess	this -> list		3000363	0					
ANR	3000449	Identifier	this		3000363	0					
ANR	3000450	Identifier	list		3000363	1					
ANR	3000451	Identifier	Next		3000363	1					
ANR	3000452	ArgumentList	daemon		3000363	1					
ANR	3000453	Argument	daemon		3000363	0					
ANR	3000454	Identifier	daemon		3000363	0					
ANR	3000455	CompoundStatement		26:35:811:811	3000363	1					
ANR	3000456	IfStatement	"if ( same_host ( preferred_collector , daemon -> fullHostname ( ) ) )"		3000363	0					
ANR	3000457	Condition	"same_host ( preferred_collector , daemon -> fullHostname ( ) )"	241:7:5998:6052	3000363	0	True				
ANR	3000458	CallExpression	"same_host ( preferred_collector , daemon -> fullHostname ( ) )"		3000363	0					
ANR	3000459	Callee	same_host		3000363	0					
ANR	3000460	Identifier	same_host		3000363	0					
ANR	3000461	ArgumentList	preferred_collector		3000363	1					
ANR	3000462	Argument	preferred_collector		3000363	0					
ANR	3000463	Identifier	preferred_collector		3000363	0					
ANR	3000464	Argument	daemon -> fullHostname ( )		3000363	1					
ANR	3000465	CallExpression	daemon -> fullHostname ( )		3000363	0					
ANR	3000466	Callee	daemon -> fullHostname		3000363	0					
ANR	3000467	PtrMemberAccess	daemon -> fullHostname		3000363	0					
ANR	3000468	Identifier	daemon		3000363	0					
ANR	3000469	Identifier	fullHostname		3000363	1					
ANR	3000470	ArgumentList			3000363	1					
ANR	3000471	CompoundStatement		27:65:878:878	3000363	1					
ANR	3000472	ExpressionStatement	this -> list . DeleteCurrent ( )	242:3:6061:6087	3000363	0	True				
ANR	3000473	CallExpression	this -> list . DeleteCurrent ( )		3000363	0					
ANR	3000474	Callee	this -> list . DeleteCurrent		3000363	0					
ANR	3000475	MemberAccess	this -> list . DeleteCurrent		3000363	0					
ANR	3000476	PtrMemberAccess	this -> list		3000363	0					
ANR	3000477	Identifier	this		3000363	0					
ANR	3000478	Identifier	list		3000363	1					
ANR	3000479	Identifier	DeleteCurrent		3000363	1					
ANR	3000480	ArgumentList			3000363	1					
ANR	3000481	ExpressionStatement	prefer_list . Prepend ( daemon )	243:3:6092:6121	3000363	1	True				
ANR	3000482	CallExpression	prefer_list . Prepend ( daemon )		3000363	0					
ANR	3000483	Callee	prefer_list . Prepend		3000363	0					
ANR	3000484	MemberAccess	prefer_list . Prepend		3000363	0					
ANR	3000485	Identifier	prefer_list		3000363	0					
ANR	3000486	Identifier	Prepend		3000363	1					
ANR	3000487	ArgumentList	daemon		3000363	1					
ANR	3000488	Argument	daemon		3000363	0					
ANR	3000489	Identifier	daemon		3000363	0					
ANR	3000490	ExpressionStatement	this -> list . Rewind ( )	249:1:6218:6237	3000363	6	True				
ANR	3000491	CallExpression	this -> list . Rewind ( )		3000363	0					
ANR	3000492	Callee	this -> list . Rewind		3000363	0					
ANR	3000493	MemberAccess	this -> list . Rewind		3000363	0					
ANR	3000494	PtrMemberAccess	this -> list		3000363	0					
ANR	3000495	Identifier	this		3000363	0					
ANR	3000496	Identifier	list		3000363	1					
ANR	3000497	Identifier	Rewind		3000363	1					
ANR	3000498	ArgumentList			3000363	1					
ANR	3000499	ExpressionStatement	prefer_list . Rewind ( )	250:1:6240:6260	3000363	7	True				
ANR	3000500	CallExpression	prefer_list . Rewind ( )		3000363	0					
ANR	3000501	Callee	prefer_list . Rewind		3000363	0					
ANR	3000502	MemberAccess	prefer_list . Rewind		3000363	0					
ANR	3000503	Identifier	prefer_list		3000363	0					
ANR	3000504	Identifier	Rewind		3000363	1					
ANR	3000505	ArgumentList			3000363	1					
ANR	3000506	WhileStatement	while ( prefer_list . Next ( daemon ) )		3000363	8					
ANR	3000507	Condition	prefer_list . Next ( daemon )	251:9:6271:6294	3000363	0	True				
ANR	3000508	CallExpression	prefer_list . Next ( daemon )		3000363	0					
ANR	3000509	Callee	prefer_list . Next		3000363	0					
ANR	3000510	MemberAccess	prefer_list . Next		3000363	0					
ANR	3000511	Identifier	prefer_list		3000363	0					
ANR	3000512	Identifier	Next		3000363	1					
ANR	3000513	ArgumentList	daemon		3000363	1					
ANR	3000514	Argument	daemon		3000363	0					
ANR	3000515	Identifier	daemon		3000363	0					
ANR	3000516	CompoundStatement		37:36:1120:1120	3000363	1					
ANR	3000517	ExpressionStatement	this -> list . Prepend ( daemon )	252:2:6302:6330	3000363	0	True				
ANR	3000518	CallExpression	this -> list . Prepend ( daemon )		3000363	0					
ANR	3000519	Callee	this -> list . Prepend		3000363	0					
ANR	3000520	MemberAccess	this -> list . Prepend		3000363	0					
ANR	3000521	PtrMemberAccess	this -> list		3000363	0					
ANR	3000522	Identifier	this		3000363	0					
ANR	3000523	Identifier	list		3000363	1					
ANR	3000524	Identifier	Prepend		3000363	1					
ANR	3000525	ArgumentList	daemon		3000363	1					
ANR	3000526	Argument	daemon		3000363	0					
ANR	3000527	Identifier	daemon		3000363	0					
ANR	3000528	ExpressionStatement	free ( tmp_preferred_collector )	255:1:6338:6367	3000363	9	True				
ANR	3000529	CallExpression	free ( tmp_preferred_collector )		3000363	0					
ANR	3000530	Callee	free		3000363	0					
ANR	3000531	Identifier	free		3000363	0					
ANR	3000532	ArgumentList	tmp_preferred_collector		3000363	1					
ANR	3000533	Argument	tmp_preferred_collector		3000363	0					
ANR	3000534	Identifier	tmp_preferred_collector		3000363	0					
ANR	3000535	ReturnStatement	return 0 ;	256:1:6468:6476	3000363	10	True				
ANR	3000536	PrimaryExpression	0		3000363	0					
ANR	3000537	ReturnType	int		3000363	1					
ANR	3000538	Identifier	CollectorList :: resortLocal		3000363	2					
ANR	3000539	ParameterList	const char * preferred_collector		3000363	3					
ANR	3000540	Parameter	const char * preferred_collector	214:28:5143:5173	3000363	0	True				
ANR	3000541	ParameterType	const char *		3000363	0					
ANR	3000542	Identifier	preferred_collector		3000363	1					
ANR	3000543	CFGEntryNode	ENTRY		3000363		True				
ANR	3000544	CFGExitNode	EXIT		3000363		True				
ANR	3000545	Symbol	tmp_preferred_collector		3000363						
ANR	3000546	Symbol	NULL		3000363						
ANR	3000547	Symbol	_hostname_str . Value		3000363						
ANR	3000548	Symbol	* _hostname		3000363						
ANR	3000549	Symbol	prefer_list		3000363						
ANR	3000550	Symbol	this		3000363						
ANR	3000551	Symbol	_hostname_str		3000363						
ANR	3000552	Symbol	get_local_fqdn		3000363						
ANR	3000553	Symbol	daemon -> fullHostname		3000363						
ANR	3000554	Symbol	preferred_collector		3000363						
ANR	3000555	Symbol	this -> list . Next		3000363						
ANR	3000556	Symbol	daemon		3000363						
ANR	3000557	Symbol	this -> list		3000363						
ANR	3000558	Symbol	* this		3000363						
ANR	3000559	Symbol	_hostname		3000363						
ANR	3000560	Symbol	* daemon		3000363						
ANR	3000561	Symbol	strdup		3000363						
ANR	3000562	Symbol	same_host		3000363						
ANR	3000563	Symbol	prefer_list . Next		3000363						
ANR	3000564	Function	CollectorList :: sendUpdates	260:0:6482:6865							
ANR	3000565	FunctionDef	"CollectorList :: sendUpdates (int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblocking)"		3000564	0					
ANR	3000566	CompoundStatement		261:84:6570:6865	3000564	0					
ANR	3000567	IdentifierDeclStatement	int success_count = 0 ;	262:1:6573:6594	3000564	0	True				
ANR	3000568	IdentifierDecl	success_count = 0		3000564	0					
ANR	3000569	IdentifierDeclType	int		3000564	0					
ANR	3000570	Identifier	success_count		3000564	1					
ANR	3000571	AssignmentExpression	success_count = 0		3000564	2		=			
ANR	3000572	Identifier	success_count		3000564	0					
ANR	3000573	PrimaryExpression	0		3000564	1					
ANR	3000574	ExpressionStatement	this -> rewind ( )	264:1:6598:6612	3000564	1	True				
ANR	3000575	CallExpression	this -> rewind ( )		3000564	0					
ANR	3000576	Callee	this -> rewind		3000564	0					
ANR	3000577	PtrMemberAccess	this -> rewind		3000564	0					
ANR	3000578	Identifier	this		3000564	0					
ANR	3000579	Identifier	rewind		3000564	1					
ANR	3000580	ArgumentList			3000564	1					
ANR	3000581	IdentifierDeclStatement	DCCollector * daemon ;	265:1:6615:6635	3000564	2	True				
ANR	3000582	IdentifierDecl	* daemon		3000564	0					
ANR	3000583	IdentifierDeclType	DCCollector *		3000564	0					
ANR	3000584	Identifier	daemon		3000564	1					
ANR	3000585	WhileStatement	while ( this -> next ( daemon ) )		3000564	3					
ANR	3000586	Condition	this -> next ( daemon )	266:8:6645:6662	3000564	0	True				
ANR	3000587	CallExpression	this -> next ( daemon )		3000564	0					
ANR	3000588	Callee	this -> next		3000564	0					
ANR	3000589	PtrMemberAccess	this -> next		3000564	0					
ANR	3000590	Identifier	this		3000564	0					
ANR	3000591	Identifier	next		3000564	1					
ANR	3000592	ArgumentList	daemon		3000564	1					
ANR	3000593	Argument	daemon		3000564	0					
ANR	3000594	Identifier	daemon		3000564	0					
ANR	3000595	CompoundStatement		6:28:94:94	3000564	1					
ANR	3000596	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Trying to update collector %s\\n"" , daemon -> addr ( ) )"	267:2:6669:6754	3000564	0	True				
ANR	3000597	CallExpression	"dprintf ( D_FULLDEBUG , ""Trying to update collector %s\\n"" , daemon -> addr ( ) )"		3000564	0					
ANR	3000598	Callee	dprintf		3000564	0					
ANR	3000599	Identifier	dprintf		3000564	0					
ANR	3000600	ArgumentList	D_FULLDEBUG		3000564	1					
ANR	3000601	Argument	D_FULLDEBUG		3000564	0					
ANR	3000602	Identifier	D_FULLDEBUG		3000564	0					
ANR	3000603	Argument	"""Trying to update collector %s\\n"""		3000564	1					
ANR	3000604	PrimaryExpression	"""Trying to update collector %s\\n"""		3000564	0					
ANR	3000605	Argument	daemon -> addr ( )		3000564	2					
ANR	3000606	CallExpression	daemon -> addr ( )		3000564	0					
ANR	3000607	Callee	daemon -> addr		3000564	0					
ANR	3000608	PtrMemberAccess	daemon -> addr		3000564	0					
ANR	3000609	Identifier	daemon		3000564	0					
ANR	3000610	Identifier	addr		3000564	1					
ANR	3000611	ArgumentList			3000564	1					
ANR	3000612	IfStatement	"if ( daemon -> sendUpdate ( cmd , ad1 , ad2 , nonblocking ) )"		3000564	1					
ANR	3000613	Condition	"daemon -> sendUpdate ( cmd , ad1 , ad2 , nonblocking )"	270:6:6762:6807	3000564	0	True				
ANR	3000614	CallExpression	"daemon -> sendUpdate ( cmd , ad1 , ad2 , nonblocking )"		3000564	0					
ANR	3000615	Callee	daemon -> sendUpdate		3000564	0					
ANR	3000616	PtrMemberAccess	daemon -> sendUpdate		3000564	0					
ANR	3000617	Identifier	daemon		3000564	0					
ANR	3000618	Identifier	sendUpdate		3000564	1					
ANR	3000619	ArgumentList	cmd		3000564	1					
ANR	3000620	Argument	cmd		3000564	0					
ANR	3000621	Identifier	cmd		3000564	0					
ANR	3000622	Argument	ad1		3000564	1					
ANR	3000623	Identifier	ad1		3000564	0					
ANR	3000624	Argument	ad2		3000564	2					
ANR	3000625	Identifier	ad2		3000564	0					
ANR	3000626	Argument	nonblocking		3000564	3					
ANR	3000627	Identifier	nonblocking		3000564	0					
ANR	3000628	CompoundStatement		10:55:240:240	3000564	1					
ANR	3000629	ExpressionStatement	success_count ++	271:3:6816:6831	3000564	0	True				
ANR	3000630	PostIncDecOperationExpression	success_count ++		3000564	0					
ANR	3000631	Identifier	success_count		3000564	0					
ANR	3000632	IncDec	++		3000564	1					
ANR	3000633	ReturnStatement	return success_count ;	275:1:6843:6863	3000564	4	True				
ANR	3000634	Identifier	success_count		3000564	0					
ANR	3000635	ReturnType	int		3000564	1					
ANR	3000636	Identifier	CollectorList :: sendUpdates		3000564	2					
ANR	3000637	ParameterList	"int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblocking"		3000564	3					
ANR	3000638	Parameter	int cmd	261:28:6514:6520	3000564	0	True				
ANR	3000639	ParameterType	int		3000564	0					
ANR	3000640	Identifier	cmd		3000564	1					
ANR	3000641	Parameter	ClassAd * ad1	261:37:6523:6535	3000564	1	True				
ANR	3000642	ParameterType	ClassAd *		3000564	0					
ANR	3000643	Identifier	ad1		3000564	1					
ANR	3000644	Parameter	ClassAd * ad2	261:52:6538:6549	3000564	2	True				
ANR	3000645	ParameterType	ClassAd *		3000564	0					
ANR	3000646	Identifier	ad2		3000564	1					
ANR	3000647	Parameter	bool nonblocking	261:66:6552:6567	3000564	3	True				
ANR	3000648	ParameterType	bool		3000564	0					
ANR	3000649	Identifier	nonblocking		3000564	1					
ANR	3000650	CFGEntryNode	ENTRY		3000564		True				
ANR	3000651	CFGExitNode	EXIT		3000564		True				
ANR	3000652	Symbol	daemon -> sendUpdate		3000564						
ANR	3000653	Symbol	nonblocking		3000564						
ANR	3000654	Symbol	this -> next		3000564						
ANR	3000655	Symbol	success_count		3000564						
ANR	3000656	Symbol	this		3000564						
ANR	3000657	Symbol	D_FULLDEBUG		3000564						
ANR	3000658	Symbol	ad2		3000564						
ANR	3000659	Symbol	ad1		3000564						
ANR	3000660	Symbol	daemon		3000564						
ANR	3000661	Symbol	* this		3000564						
ANR	3000662	Symbol	* daemon		3000564						
ANR	3000663	Symbol	cmd		3000564						
ANR	3000664	Symbol	daemon -> addr		3000564						
ANR	3000665	Function	CollectorList :: query	278:0:6868:8994							
ANR	3000666	FunctionDef	"CollectorList :: query (CondorQuery & cQuery , ClassAdList & adList , CondorError * errstack)"		3000665	0					
ANR	3000667	CompoundStatement		279:88:6968:8994	3000665	0					
ANR	3000668	IdentifierDeclStatement	int num_collectors = this -> number ( ) ;	281:1:6972:7007	3000665	0	True				
ANR	3000669	IdentifierDecl	num_collectors = this -> number ( )		3000665	0					
ANR	3000670	IdentifierDeclType	int		3000665	0					
ANR	3000671	Identifier	num_collectors		3000665	1					
ANR	3000672	AssignmentExpression	num_collectors = this -> number ( )		3000665	2		=			
ANR	3000673	Identifier	num_collectors		3000665	0					
ANR	3000674	CallExpression	this -> number ( )		3000665	1					
ANR	3000675	Callee	this -> number		3000665	0					
ANR	3000676	PtrMemberAccess	this -> number		3000665	0					
ANR	3000677	Identifier	this		3000665	0					
ANR	3000678	Identifier	number		3000665	1					
ANR	3000679	ArgumentList			3000665	1					
ANR	3000680	IfStatement	if ( num_collectors < 1 )		3000665	1					
ANR	3000681	Condition	num_collectors < 1	282:5:7014:7031	3000665	0	True				
ANR	3000682	RelationalExpression	num_collectors < 1		3000665	0		<			
ANR	3000683	Identifier	num_collectors		3000665	0					
ANR	3000684	PrimaryExpression	1		3000665	1					
ANR	3000685	CompoundStatement		4:25:65:65	3000665	1					
ANR	3000686	ReturnStatement	return Q_NO_COLLECTOR_HOST ;	283:2:7038:7064	3000665	0	True				
ANR	3000687	Identifier	Q_NO_COLLECTOR_HOST		3000665	0					
ANR	3000688	IdentifierDeclStatement	SimpleList < DCCollector * > sorted_collectors ;	286:1:7071:7114	3000665	2	True				
ANR	3000689	IdentifierDecl	sorted_collectors		3000665	0					
ANR	3000690	IdentifierDeclType	SimpleList < DCCollector * >		3000665	0					
ANR	3000691	Identifier	sorted_collectors		3000665	1					
ANR	3000692	IdentifierDeclStatement	DCCollector * daemon ;	287:1:7117:7137	3000665	3	True				
ANR	3000693	IdentifierDecl	* daemon		3000665	0					
ANR	3000694	IdentifierDeclType	DCCollector *		3000665	0					
ANR	3000695	Identifier	daemon		3000665	1					
ANR	3000696	IdentifierDeclStatement	QueryResult result ;	288:1:7140:7158	3000665	4	True				
ANR	3000697	IdentifierDecl	result		3000665	0					
ANR	3000698	IdentifierDeclType	QueryResult		3000665	0					
ANR	3000699	Identifier	result		3000665	1					
ANR	3000700	IdentifierDeclStatement	int pass = 0 ;	289:1:7161:7173	3000665	5	True				
ANR	3000701	IdentifierDecl	pass = 0		3000665	0					
ANR	3000702	IdentifierDeclType	int		3000665	0					
ANR	3000703	Identifier	pass		3000665	1					
ANR	3000704	AssignmentExpression	pass = 0		3000665	2		=			
ANR	3000705	Identifier	pass		3000665	0					
ANR	3000706	PrimaryExpression	0		3000665	1					
ANR	3000707	IdentifierDeclStatement	bool problems_resolving = false ;	291:1:7177:7208	3000665	6	True				
ANR	3000708	IdentifierDecl	problems_resolving = false		3000665	0					
ANR	3000709	IdentifierDeclType	bool		3000665	0					
ANR	3000710	Identifier	problems_resolving		3000665	1					
ANR	3000711	AssignmentExpression	problems_resolving = false		3000665	2		=			
ANR	3000712	Identifier	false		3000665	0					
ANR	3000713	Identifier	false		3000665	1					
ANR	3000714	ForStatement	for ( pass = 1 ; pass <= 2 ; pass ++ )		3000665	7					
ANR	3000715	ForInit	pass = 1 ;	293:6:7217:7225	3000665	0	True				
ANR	3000716	AssignmentExpression	pass = 1		3000665	0		=			
ANR	3000717	Identifier	pass		3000665	0					
ANR	3000718	PrimaryExpression	1		3000665	1					
ANR	3000719	Condition	pass <= 2	293:16:7227:7235	3000665	1	True				
ANR	3000720	RelationalExpression	pass <= 2		3000665	0		<=			
ANR	3000721	Identifier	pass		3000665	0					
ANR	3000722	PrimaryExpression	2		3000665	1					
ANR	3000723	PostIncDecOperationExpression	pass ++	293:27:7238:7243	3000665	2	True				
ANR	3000724	Identifier	pass		3000665	0					
ANR	3000725	IncDec	++		3000665	1					
ANR	3000726	CompoundStatement		15:36:278:278	3000665	3					
ANR	3000727	ExpressionStatement	this -> rewind ( )	294:2:7251:7265	3000665	0	True				
ANR	3000728	CallExpression	this -> rewind ( )		3000665	0					
ANR	3000729	Callee	this -> rewind		3000665	0					
ANR	3000730	PtrMemberAccess	this -> rewind		3000665	0					
ANR	3000731	Identifier	this		3000665	0					
ANR	3000732	Identifier	rewind		3000665	1					
ANR	3000733	ArgumentList			3000665	1					
ANR	3000734	WhileStatement	while ( this -> next ( daemon ) )		3000665	1					
ANR	3000735	Condition	this -> next ( daemon )	295:9:7276:7293	3000665	0	True				
ANR	3000736	CallExpression	this -> next ( daemon )		3000665	0					
ANR	3000737	Callee	this -> next		3000665	0					
ANR	3000738	PtrMemberAccess	this -> next		3000665	0					
ANR	3000739	Identifier	this		3000665	0					
ANR	3000740	Identifier	next		3000665	1					
ANR	3000741	ArgumentList	daemon		3000665	1					
ANR	3000742	Argument	daemon		3000665	0					
ANR	3000743	Identifier	daemon		3000665	0					
ANR	3000744	CompoundStatement		17:29:327:327	3000665	1					
ANR	3000745	IfStatement	if ( daemon -> isBlacklisted ( ) )		3000665	0					
ANR	3000746	Condition	daemon -> isBlacklisted ( )	297:7:7363:7385	3000665	0	True				
ANR	3000747	CallExpression	daemon -> isBlacklisted ( )		3000665	0					
ANR	3000748	Callee	daemon -> isBlacklisted		3000665	0					
ANR	3000749	PtrMemberAccess	daemon -> isBlacklisted		3000665	0					
ANR	3000750	Identifier	daemon		3000665	0					
ANR	3000751	Identifier	isBlacklisted		3000665	1					
ANR	3000752	ArgumentList			3000665	1					
ANR	3000753	CompoundStatement		19:33:420:420	3000665	1					
ANR	3000754	IfStatement	if ( pass == 1 )		3000665	0					
ANR	3000755	Condition	pass == 1	298:8:7399:7407	3000665	0	True				
ANR	3000756	EqualityExpression	pass == 1		3000665	0		==			
ANR	3000757	Identifier	pass		3000665	0					
ANR	3000758	PrimaryExpression	1		3000665	1					
ANR	3000759	CompoundStatement		20:20:442:442	3000665	1					
ANR	3000760	IfStatement	if ( num_collectors > 1 )		3000665	0					
ANR	3000761	Condition	num_collectors > 1	299:9:7422:7439	3000665	0	True				
ANR	3000762	RelationalExpression	num_collectors > 1		3000665	0		>			
ANR	3000763	Identifier	num_collectors		3000665	0					
ANR	3000764	PrimaryExpression	1		3000665	1					
ANR	3000765	CompoundStatement		21:30:474:474	3000665	1					
ANR	3000766	Statement	dprintf	300:6:7451:7457	3000665	0	True				
ANR	3000767	Statement	(	300:13:7458:7458	3000665	1	True				
ANR	3000768	Statement	D_ALWAYS	300:15:7460:7467	3000665	2	True				
ANR	3000769	Statement	","	300:23:7468:7468	3000665	3	True				
ANR	3000770	Statement	"""Collector %s %s is still being avoided if """	301:9:7479:7522	3000665	4	True				
ANR	3000771	Statement	"""an alternative succeeds.\\n"""	302:9:7533:7560	3000665	5	True				
ANR	3000772	Statement	","	302:37:7561:7561	3000665	6	True				
ANR	3000773	Statement	daemon	303:9:7572:7577	3000665	7	True				
ANR	3000774	Statement	->	303:15:7578:7579	3000665	8	True				
ANR	3000775	Statement	name	303:17:7580:7583	3000665	9	True				
ANR	3000776	Statement	(	303:21:7584:7584	3000665	10	True				
ANR	3000777	Statement	)	303:22:7585:7585	3000665	11	True				
ANR	3000778	Statement	?	303:24:7587:7587	3000665	12	True				
ANR	3000779	Statement	daemon	303:26:7589:7594	3000665	13	True				
ANR	3000780	Statement	->	303:32:7595:7596	3000665	14	True				
ANR	3000781	Statement	name	303:34:7597:7600	3000665	15	True				
ANR	3000782	Statement	(	303:38:7601:7601	3000665	16	True				
ANR	3000783	Statement	)	303:39:7602:7602	3000665	17	True				
ANR	3000784	Statement	:	303:41:7604:7604	3000665	18	True				
ANR	3000785	Statement	"""unknown"""	303:43:7606:7614	3000665	19	True				
ANR	3000786	Statement	","	303:52:7615:7615	3000665	20	True				
ANR	3000787	Statement	daemon	304:9:7626:7631	3000665	21	True				
ANR	3000788	Statement	->	304:15:7632:7633	3000665	22	True				
ANR	3000789	Statement	addr	304:17:7634:7637	3000665	23	True				
ANR	3000790	Statement	(	304:21:7638:7638	3000665	24	True				
ANR	3000791	Statement	)	304:22:7639:7639	3000665	25	True				
ANR	3000792	Statement	?	304:24:7641:7641	3000665	26	True				
ANR	3000793	Statement	daemon	304:26:7643:7648	3000665	27	True				
ANR	3000794	Statement	->	304:32:7649:7650	3000665	28	True				
ANR	3000795	Statement	addr	304:34:7651:7654	3000665	29	True				
ANR	3000796	Statement	(	304:38:7655:7655	3000665	30	True				
ANR	3000797	Statement	)	304:39:7656:7656	3000665	31	True				
ANR	3000798	Statement	:	304:41:7658:7658	3000665	32	True				
ANR	3000799	Statement	"""unknown"""	304:43:7660:7668	3000665	33	True				
ANR	3000800	Statement	)	304:52:7669:7669	3000665	34	True				
ANR	3000801	ExpressionStatement		304:53:7670:7670	3000665	35	True				
ANR	3000802	ContinueStatement	continue ;	306:5:7684:7692	3000665	1	True				
ANR	3000803	ElseStatement	else		3000665	0					
ANR	3000804	CompoundStatement		31:8:744:744	3000665	0					
ANR	3000805	IfStatement	if ( pass == 2 )		3000665	0					
ANR	3000806	Condition	pass == 2	310:8:7723:7731	3000665	0	True				
ANR	3000807	EqualityExpression	pass == 2		3000665	0		==			
ANR	3000808	Identifier	pass		3000665	0					
ANR	3000809	PrimaryExpression	2		3000665	1					
ANR	3000810	CompoundStatement		32:20:766:766	3000665	1					
ANR	3000811	ContinueStatement	continue ;	311:5:7742:7750	3000665	0	True				
ANR	3000812	ExpressionStatement	sorted_collectors . Append ( daemon )	314:3:7766:7800	3000665	1	True				
ANR	3000813	CallExpression	sorted_collectors . Append ( daemon )		3000665	0					
ANR	3000814	Callee	sorted_collectors . Append		3000665	0					
ANR	3000815	MemberAccess	sorted_collectors . Append		3000665	0					
ANR	3000816	Identifier	sorted_collectors		3000665	0					
ANR	3000817	Identifier	Append		3000665	1					
ANR	3000818	ArgumentList	daemon		3000665	1					
ANR	3000819	Argument	daemon		3000665	0					
ANR	3000820	Identifier	daemon		3000665	0					
ANR	3000821	ExpressionStatement	sorted_collectors . Rewind ( )	318:1:7811:7837	3000665	8	True				
ANR	3000822	CallExpression	sorted_collectors . Rewind ( )		3000665	0					
ANR	3000823	Callee	sorted_collectors . Rewind		3000665	0					
ANR	3000824	MemberAccess	sorted_collectors . Rewind		3000665	0					
ANR	3000825	Identifier	sorted_collectors		3000665	0					
ANR	3000826	Identifier	Rewind		3000665	1					
ANR	3000827	ArgumentList			3000665	1					
ANR	3000828	WhileStatement	while ( sorted_collectors . Next ( daemon ) )		3000665	9					
ANR	3000829	Condition	sorted_collectors . Next ( daemon )	319:8:7847:7878	3000665	0	True				
ANR	3000830	CallExpression	sorted_collectors . Next ( daemon )		3000665	0					
ANR	3000831	Callee	sorted_collectors . Next		3000665	0					
ANR	3000832	MemberAccess	sorted_collectors . Next		3000665	0					
ANR	3000833	Identifier	sorted_collectors		3000665	0					
ANR	3000834	Identifier	Next		3000665	1					
ANR	3000835	ArgumentList	daemon		3000665	1					
ANR	3000836	Argument	daemon		3000665	0					
ANR	3000837	Identifier	daemon		3000665	0					
ANR	3000838	CompoundStatement		41:43:913:913	3000665	1					
ANR	3000839	IfStatement	if ( ! daemon -> addr ( ) )		3000665	0					
ANR	3000840	Condition	! daemon -> addr ( )	320:7:7891:7906	3000665	0	True				
ANR	3000841	UnaryOperationExpression	! daemon -> addr ( )		3000665	0					
ANR	3000842	UnaryOperator	!		3000665	0					
ANR	3000843	CallExpression	daemon -> addr ( )		3000665	1					
ANR	3000844	Callee	daemon -> addr		3000665	0					
ANR	3000845	PtrMemberAccess	daemon -> addr		3000665	0					
ANR	3000846	Identifier	daemon		3000665	0					
ANR	3000847	Identifier	addr		3000665	1					
ANR	3000848	ArgumentList			3000665	1					
ANR	3000849	CompoundStatement		42:26:941:941	3000665	1					
ANR	3000850	IfStatement	if ( daemon -> name ( ) )		3000665	0					
ANR	3000851	Condition	daemon -> name ( )	321:8:7920:7933	3000665	0	True				
ANR	3000852	CallExpression	daemon -> name ( )		3000665	0					
ANR	3000853	Callee	daemon -> name		3000665	0					
ANR	3000854	PtrMemberAccess	daemon -> name		3000665	0					
ANR	3000855	Identifier	daemon		3000665	0					
ANR	3000856	Identifier	name		3000665	1					
ANR	3000857	ArgumentList			3000665	1					
ANR	3000858	CompoundStatement		43:25:968:968	3000665	1					
ANR	3000859	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't resolve collector %s; skipping\\n"" , daemon -> name ( ) )"	322:4:7943:8034	3000665	0	True				
ANR	3000860	CallExpression	"dprintf ( D_ALWAYS , ""Can't resolve collector %s; skipping\\n"" , daemon -> name ( ) )"		3000665	0					
ANR	3000861	Callee	dprintf		3000665	0					
ANR	3000862	Identifier	dprintf		3000665	0					
ANR	3000863	ArgumentList	D_ALWAYS		3000665	1					
ANR	3000864	Argument	D_ALWAYS		3000665	0					
ANR	3000865	Identifier	D_ALWAYS		3000665	0					
ANR	3000866	Argument	"""Can't resolve collector %s; skipping\\n"""		3000665	1					
ANR	3000867	PrimaryExpression	"""Can't resolve collector %s; skipping\\n"""		3000665	0					
ANR	3000868	Argument	daemon -> name ( )		3000665	2					
ANR	3000869	CallExpression	daemon -> name ( )		3000665	0					
ANR	3000870	Callee	daemon -> name		3000665	0					
ANR	3000871	PtrMemberAccess	daemon -> name		3000665	0					
ANR	3000872	Identifier	daemon		3000665	0					
ANR	3000873	Identifier	name		3000665	1					
ANR	3000874	ArgumentList			3000665	1					
ANR	3000875	ElseStatement	else		3000665	0					
ANR	3000876	CompoundStatement		47:10:1077:1077	3000665	0					
ANR	3000877	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't resolve nameless collector; skipping\\n"" )"	326:4:8052:8126	3000665	0	True				
ANR	3000878	CallExpression	"dprintf ( D_ALWAYS , ""Can't resolve nameless collector; skipping\\n"" )"		3000665	0					
ANR	3000879	Callee	dprintf		3000665	0					
ANR	3000880	Identifier	dprintf		3000665	0					
ANR	3000881	ArgumentList	D_ALWAYS		3000665	1					
ANR	3000882	Argument	D_ALWAYS		3000665	0					
ANR	3000883	Identifier	D_ALWAYS		3000665	0					
ANR	3000884	Argument	"""Can't resolve nameless collector; skipping\\n"""		3000665	1					
ANR	3000885	PrimaryExpression	"""Can't resolve nameless collector; skipping\\n"""		3000665	0					
ANR	3000886	ExpressionStatement	problems_resolving = true	329:3:8136:8161	3000665	1	True				
ANR	3000887	AssignmentExpression	problems_resolving = true		3000665	0		=			
ANR	3000888	Identifier	problems_resolving		3000665	0					
ANR	3000889	Identifier	true		3000665	1					
ANR	3000890	ContinueStatement	continue ;	330:3:8166:8174	3000665	2	True				
ANR	3000891	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Trying to query collector %s\\n"" , daemon -> addr ( ) )"	332:2:8182:8265	3000665	1	True				
ANR	3000892	CallExpression	"dprintf ( D_FULLDEBUG , ""Trying to query collector %s\\n"" , daemon -> addr ( ) )"		3000665	0					
ANR	3000893	Callee	dprintf		3000665	0					
ANR	3000894	Identifier	dprintf		3000665	0					
ANR	3000895	ArgumentList	D_FULLDEBUG		3000665	1					
ANR	3000896	Argument	D_FULLDEBUG		3000665	0					
ANR	3000897	Identifier	D_FULLDEBUG		3000665	0					
ANR	3000898	Argument	"""Trying to query collector %s\\n"""		3000665	1					
ANR	3000899	PrimaryExpression	"""Trying to query collector %s\\n"""		3000665	0					
ANR	3000900	Argument	daemon -> addr ( )		3000665	2					
ANR	3000901	CallExpression	daemon -> addr ( )		3000665	0					
ANR	3000902	Callee	daemon -> addr		3000665	0					
ANR	3000903	PtrMemberAccess	daemon -> addr		3000665	0					
ANR	3000904	Identifier	daemon		3000665	0					
ANR	3000905	Identifier	addr		3000665	1					
ANR	3000906	ArgumentList			3000665	1					
ANR	3000907	IfStatement	if ( num_collectors > 1 )		3000665	2					
ANR	3000908	Condition	num_collectors > 1	336:6:8274:8291	3000665	0	True				
ANR	3000909	RelationalExpression	num_collectors > 1		3000665	0		>			
ANR	3000910	Identifier	num_collectors		3000665	0					
ANR	3000911	PrimaryExpression	1		3000665	1					
ANR	3000912	CompoundStatement		58:27:1326:1326	3000665	1					
ANR	3000913	ExpressionStatement	daemon -> blacklistMonitorQueryStarted ( )	337:3:8300:8338	3000665	0	True				
ANR	3000914	CallExpression	daemon -> blacklistMonitorQueryStarted ( )		3000665	0					
ANR	3000915	Callee	daemon -> blacklistMonitorQueryStarted		3000665	0					
ANR	3000916	PtrMemberAccess	daemon -> blacklistMonitorQueryStarted		3000665	0					
ANR	3000917	Identifier	daemon		3000665	0					
ANR	3000918	Identifier	blacklistMonitorQueryStarted		3000665	1					
ANR	3000919	ArgumentList			3000665	1					
ANR	3000920	ExpressionStatement	"result = cQuery . fetchAds ( adList , daemon -> addr ( ) , errstack )"	340:2:8347:8410	3000665	3	True				
ANR	3000921	AssignmentExpression	"result = cQuery . fetchAds ( adList , daemon -> addr ( ) , errstack )"		3000665	0		=			
ANR	3000922	Identifier	result		3000665	0					
ANR	3000923	CallExpression	"cQuery . fetchAds ( adList , daemon -> addr ( ) , errstack )"		3000665	1					
ANR	3000924	Callee	cQuery . fetchAds		3000665	0					
ANR	3000925	MemberAccess	cQuery . fetchAds		3000665	0					
ANR	3000926	Identifier	cQuery		3000665	0					
ANR	3000927	Identifier	fetchAds		3000665	1					
ANR	3000928	ArgumentList	adList		3000665	1					
ANR	3000929	Argument	adList		3000665	0					
ANR	3000930	Identifier	adList		3000665	0					
ANR	3000931	Argument	daemon -> addr ( )		3000665	1					
ANR	3000932	CallExpression	daemon -> addr ( )		3000665	0					
ANR	3000933	Callee	daemon -> addr		3000665	0					
ANR	3000934	PtrMemberAccess	daemon -> addr		3000665	0					
ANR	3000935	Identifier	daemon		3000665	0					
ANR	3000936	Identifier	addr		3000665	1					
ANR	3000937	ArgumentList			3000665	1					
ANR	3000938	Argument	errstack		3000665	2					
ANR	3000939	Identifier	errstack		3000665	0					
ANR	3000940	IfStatement	if ( num_collectors > 1 )		3000665	4					
ANR	3000941	Condition	num_collectors > 1	343:6:8419:8436	3000665	0	True				
ANR	3000942	RelationalExpression	num_collectors > 1		3000665	0		>			
ANR	3000943	Identifier	num_collectors		3000665	0					
ANR	3000944	PrimaryExpression	1		3000665	1					
ANR	3000945	CompoundStatement		65:27:1471:1471	3000665	1					
ANR	3000946	ExpressionStatement	daemon -> blacklistMonitorQueryFinished ( result == Q_OK )	344:3:8445:8500	3000665	0	True				
ANR	3000947	CallExpression	daemon -> blacklistMonitorQueryFinished ( result == Q_OK )		3000665	0					
ANR	3000948	Callee	daemon -> blacklistMonitorQueryFinished		3000665	0					
ANR	3000949	PtrMemberAccess	daemon -> blacklistMonitorQueryFinished		3000665	0					
ANR	3000950	Identifier	daemon		3000665	0					
ANR	3000951	Identifier	blacklistMonitorQueryFinished		3000665	1					
ANR	3000952	ArgumentList	result == Q_OK		3000665	1					
ANR	3000953	Argument	result == Q_OK		3000665	0					
ANR	3000954	EqualityExpression	result == Q_OK		3000665	0		==			
ANR	3000955	Identifier	result		3000665	0					
ANR	3000956	Identifier	Q_OK		3000665	1					
ANR	3000957	IfStatement	if ( result == Q_OK )		3000665	5					
ANR	3000958	Condition	result == Q_OK	347:6:8513:8526	3000665	0	True				
ANR	3000959	EqualityExpression	result == Q_OK		3000665	0		==			
ANR	3000960	Identifier	result		3000665	0					
ANR	3000961	Identifier	Q_OK		3000665	1					
ANR	3000962	CompoundStatement		69:22:1560:1560	3000665	1					
ANR	3000963	ReturnStatement	return result ;	348:3:8534:8547	3000665	0	True				
ANR	3000964	Identifier	result		3000665	0					
ANR	3000965	IfStatement	if ( problems_resolving && errstack && ! errstack -> code ( 0 ) )		3000665	10					
ANR	3000966	Condition	problems_resolving && errstack && ! errstack -> code ( 0 )	353:4:8636:8687	3000665	0	True				
ANR	3000967	AndExpression	problems_resolving && errstack && ! errstack -> code ( 0 )		3000665	0		&&			
ANR	3000968	Identifier	problems_resolving		3000665	0					
ANR	3000969	AndExpression	errstack && ! errstack -> code ( 0 )		3000665	1		&&			
ANR	3000970	Identifier	errstack		3000665	0					
ANR	3000971	UnaryOperationExpression	! errstack -> code ( 0 )		3000665	1					
ANR	3000972	UnaryOperator	!		3000665	0					
ANR	3000973	CallExpression	errstack -> code ( 0 )		3000665	1					
ANR	3000974	Callee	errstack -> code		3000665	0					
ANR	3000975	PtrMemberAccess	errstack -> code		3000665	0					
ANR	3000976	Identifier	errstack		3000665	0					
ANR	3000977	Identifier	code		3000665	1					
ANR	3000978	ArgumentList	0		3000665	1					
ANR	3000979	Argument	0		3000665	0					
ANR	3000980	PrimaryExpression	0		3000665	0					
ANR	3000981	CompoundStatement		77:2:1744:1794	3000665	1					
ANR	3000982	IdentifierDeclStatement	MyString errmsg ;	354:2:8694:8709	3000665	0	True				
ANR	3000983	IdentifierDecl	errmsg		3000665	0					
ANR	3000984	IdentifierDeclType	MyString		3000665	0					
ANR	3000985	Identifier	errmsg		3000665	1					
ANR	3000986	IdentifierDeclStatement	"char * tmplist = getCmHostFromConfig ( ""COLLECTOR"" ) ;"	355:2:8713:8763	3000665	1	True				
ANR	3000987	IdentifierDecl	"* tmplist = getCmHostFromConfig ( ""COLLECTOR"" )"		3000665	0					
ANR	3000988	IdentifierDeclType	char *		3000665	0					
ANR	3000989	Identifier	tmplist		3000665	1					
ANR	3000990	AssignmentExpression	"* tmplist = getCmHostFromConfig ( ""COLLECTOR"" )"		3000665	2		=			
ANR	3000991	Identifier	tmplist		3000665	0					
ANR	3000992	CallExpression	"getCmHostFromConfig ( ""COLLECTOR"" )"		3000665	1					
ANR	3000993	Callee	getCmHostFromConfig		3000665	0					
ANR	3000994	Identifier	getCmHostFromConfig		3000665	0					
ANR	3000995	ArgumentList	"""COLLECTOR"""		3000665	1					
ANR	3000996	Argument	"""COLLECTOR"""		3000665	0					
ANR	3000997	PrimaryExpression	"""COLLECTOR"""		3000665	0					
ANR	3000998	ExpressionStatement	"errmsg . sprintf ( ""Unable to resolve COLLECTOR_HOST (%s)."" , tmplist ? tmplist : ""(null)"" )"	356:2:8767:8849	3000665	2	True				
ANR	3000999	CallExpression	"errmsg . sprintf ( ""Unable to resolve COLLECTOR_HOST (%s)."" , tmplist ? tmplist : ""(null)"" )"		3000665	0					
ANR	3001000	Callee	errmsg . sprintf		3000665	0					
ANR	3001001	MemberAccess	errmsg . sprintf		3000665	0					
ANR	3001002	Identifier	errmsg		3000665	0					
ANR	3001003	Identifier	sprintf		3000665	1					
ANR	3001004	ArgumentList	"""Unable to resolve COLLECTOR_HOST (%s)."""		3000665	1					
ANR	3001005	Argument	"""Unable to resolve COLLECTOR_HOST (%s)."""		3000665	0					
ANR	3001006	PrimaryExpression	"""Unable to resolve COLLECTOR_HOST (%s)."""		3000665	0					
ANR	3001007	Argument	"tmplist ? tmplist : ""(null)"""		3000665	1					
ANR	3001008	ConditionalExpression	"tmplist ? tmplist : ""(null)"""		3000665	0					
ANR	3001009	Condition	tmplist		3000665	0					
ANR	3001010	Identifier	tmplist		3000665	0					
ANR	3001011	Identifier	tmplist		3000665	1					
ANR	3001012	PrimaryExpression	"""(null)"""		3000665	2					
ANR	3001013	ExpressionStatement	"errstack -> push ( ""CONDOR_STATUS"" , 1 , errmsg . Value ( ) )"	357:2:8853:8901	3000665	3	True				
ANR	3001014	CallExpression	"errstack -> push ( ""CONDOR_STATUS"" , 1 , errmsg . Value ( ) )"		3000665	0					
ANR	3001015	Callee	errstack -> push		3000665	0					
ANR	3001016	PtrMemberAccess	errstack -> push		3000665	0					
ANR	3001017	Identifier	errstack		3000665	0					
ANR	3001018	Identifier	push		3000665	1					
ANR	3001019	ArgumentList	"""CONDOR_STATUS"""		3000665	1					
ANR	3001020	Argument	"""CONDOR_STATUS"""		3000665	0					
ANR	3001021	PrimaryExpression	"""CONDOR_STATUS"""		3000665	0					
ANR	3001022	Argument	1		3000665	1					
ANR	3001023	PrimaryExpression	1		3000665	0					
ANR	3001024	Argument	errmsg . Value ( )		3000665	2					
ANR	3001025	CallExpression	errmsg . Value ( )		3000665	0					
ANR	3001026	Callee	errmsg . Value		3000665	0					
ANR	3001027	MemberAccess	errmsg . Value		3000665	0					
ANR	3001028	Identifier	errmsg		3000665	0					
ANR	3001029	Identifier	Value		3000665	1					
ANR	3001030	ArgumentList			3000665	1					
ANR	3001031	ReturnStatement	return Q_COMMUNICATION_ERROR ;	361:1:8964:8992	3000665	11	True				
ANR	3001032	Identifier	Q_COMMUNICATION_ERROR		3000665	0					
ANR	3001033	ReturnType	QueryResult		3000665	1					
ANR	3001034	Identifier	CollectorList :: query		3000665	2					
ANR	3001035	ParameterList	"CondorQuery & cQuery , ClassAdList & adList , CondorError * errstack"		3000665	3					
ANR	3001036	Parameter	CondorQuery & cQuery	279:21:6901:6920	3000665	0	True				
ANR	3001037	ParameterType	CondorQuery &		3000665	0					
ANR	3001038	Identifier	cQuery		3000665	1					
ANR	3001039	Parameter	ClassAdList & adList	279:43:6923:6942	3000665	1	True				
ANR	3001040	ParameterType	ClassAdList &		3000665	0					
ANR	3001041	Identifier	adList		3000665	1					
ANR	3001042	Parameter	CondorError * errstack	279:65:6945:6965	3000665	2	True				
ANR	3001043	ParameterType	CondorError *		3000665	0					
ANR	3001044	Identifier	errstack		3000665	1					
ANR	3001045	CFGEntryNode	ENTRY		3000665		True				
ANR	3001046	CFGExitNode	EXIT		3000665		True				
ANR	3001047	Symbol	Q_COMMUNICATION_ERROR		3000665						
ANR	3001048	Symbol	daemon -> isBlacklisted		3000665						
ANR	3001049	Symbol	tmplist		3000665						
ANR	3001050	Symbol	sorted_collectors . Next		3000665						
ANR	3001051	Symbol	adList		3000665						
ANR	3001052	Symbol	cQuery . fetchAds		3000665						
ANR	3001053	Symbol	Q_NO_COLLECTOR_HOST		3000665						
ANR	3001054	Symbol	result		3000665						
ANR	3001055	Symbol	* daemon		3000665						
ANR	3001056	Symbol	errmsg . Value		3000665						
ANR	3001057	Symbol	daemon -> name		3000665						
ANR	3001058	Symbol	sorted_collectors		3000665						
ANR	3001059	Symbol	pass		3000665						
ANR	3001060	Symbol	this -> next		3000665						
ANR	3001061	Symbol	this -> number		3000665						
ANR	3001062	Symbol	this		3000665						
ANR	3001063	Symbol	false		3000665						
ANR	3001064	Symbol	D_ALWAYS		3000665						
ANR	3001065	Symbol	errmsg		3000665						
ANR	3001066	Symbol	D_FULLDEBUG		3000665						
ANR	3001067	Symbol	Q_OK		3000665						
ANR	3001068	Symbol	daemon		3000665						
ANR	3001069	Symbol	* this		3000665						
ANR	3001070	Symbol	errstack		3000665						
ANR	3001071	Symbol	* errstack		3000665						
ANR	3001072	Symbol	problems_resolving		3000665						
ANR	3001073	Symbol	true		3000665						
ANR	3001074	Symbol	num_collectors		3000665						
ANR	3001075	Symbol	errstack -> code		3000665						
ANR	3001076	Symbol	getCmHostFromConfig		3000665						
ANR	3001077	Symbol	daemon -> addr		3000665						
ANR	3001078	Symbol	cQuery		3000665						
ANR	3001079	Function	CollectorList :: next	366:0:8999:9087							
ANR	3001080	FunctionDef	CollectorList :: next (DCCollector * & d)		3001079	0					
ANR	3001081	CompoundStatement		368:0:9044:9087	3001079	0					
ANR	3001082	ReturnStatement	return DaemonList :: Next ( ( Daemon * & ) d ) ;	369:1:9047:9085	3001079	0	True				
ANR	3001083	CallExpression	DaemonList :: Next ( ( Daemon * & ) d )		3001079	0					
ANR	3001084	Callee	DaemonList :: Next		3001079	0					
ANR	3001085	Identifier	DaemonList :: Next		3001079	0					
ANR	3001086	ArgumentList	( Daemon * & ) d		3001079	1					
ANR	3001087	Argument	( Daemon * & ) d		3001079	0					
ANR	3001088	CastExpression	( Daemon * & ) d		3001079	0					
ANR	3001089	CastTarget	Daemon * &		3001079	0					
ANR	3001090	Identifier	d		3001079	1					
ANR	3001091	ReturnType	bool		3001079	1					
ANR	3001092	Identifier	CollectorList :: next		3001079	2					
ANR	3001093	ParameterList	DCCollector * & d		3001079	3					
ANR	3001094	Parameter	DCCollector * & d	367:21:9025:9040	3001079	0	True				
ANR	3001095	ParameterType	DCCollector * &		3001079	0					
ANR	3001096	Identifier	d		3001079	1					
ANR	3001097	CFGEntryNode	ENTRY		3001079		True				
ANR	3001098	CFGExitNode	EXIT		3001079		True				
ANR	3001099	Symbol	DaemonList :: Next		3001079						
ANR	3001100	Symbol	d		3001079						
ANR	3001101	Function	CollectorList :: Next	373:0:9091:9157							
ANR	3001102	FunctionDef	CollectorList :: Next (DCCollector * & d)		3001101	0					
ANR	3001103	CompoundStatement		375:0:9136:9157	3001101	0					
ANR	3001104	ReturnStatement	return next ( d ) ;	376:1:9139:9155	3001101	0	True				
ANR	3001105	CallExpression	next ( d )		3001101	0					
ANR	3001106	Callee	next		3001101	0					
ANR	3001107	Identifier	next		3001101	0					
ANR	3001108	ArgumentList	d		3001101	1					
ANR	3001109	Argument	d		3001101	0					
ANR	3001110	Identifier	d		3001101	0					
ANR	3001111	ReturnType	bool		3001101	1					
ANR	3001112	Identifier	CollectorList :: Next		3001101	2					
ANR	3001113	ParameterList	DCCollector * & d		3001101	3					
ANR	3001114	Parameter	DCCollector * & d	374:21:9117:9132	3001101	0	True				
ANR	3001115	ParameterType	DCCollector * &		3001101	0					
ANR	3001116	Identifier	d		3001101	1					
ANR	3001117	CFGEntryNode	ENTRY		3001101		True				
ANR	3001118	CFGExitNode	EXIT		3001101		True				
ANR	3001119	Symbol	next		3001101						
ANR	3001120	Symbol	d		3001101						
ANR	3001121	Function	CollectorList :: next	380:0:9161:9234							
ANR	3001122	FunctionDef	CollectorList :: next (Daemon * & d)		3001121	0					
ANR	3001123	CompoundStatement		382:0:9201:9234	3001121	0					
ANR	3001124	ReturnStatement	return DaemonList :: Next ( d ) ;	383:1:9204:9232	3001121	0	True				
ANR	3001125	CallExpression	DaemonList :: Next ( d )		3001121	0					
ANR	3001126	Callee	DaemonList :: Next		3001121	0					
ANR	3001127	Identifier	DaemonList :: Next		3001121	0					
ANR	3001128	ArgumentList	d		3001121	1					
ANR	3001129	Argument	d		3001121	0					
ANR	3001130	Identifier	d		3001121	0					
ANR	3001131	ReturnType	bool		3001121	1					
ANR	3001132	Identifier	CollectorList :: next		3001121	2					
ANR	3001133	ParameterList	Daemon * & d		3001121	3					
ANR	3001134	Parameter	Daemon * & d	381:21:9187:9197	3001121	0	True				
ANR	3001135	ParameterType	Daemon * &		3001121	0					
ANR	3001136	Identifier	d		3001121	1					
ANR	3001137	CFGEntryNode	ENTRY		3001121		True				
ANR	3001138	CFGExitNode	EXIT		3001121		True				
ANR	3001139	Symbol	DaemonList :: Next		3001121						
ANR	3001140	Symbol	d		3001121						
ANR	3001141	Function	CollectorList :: Next	387:0:9238:9299							
ANR	3001142	FunctionDef	CollectorList :: Next (Daemon * & d)		3001141	0					
ANR	3001143	CompoundStatement		389:0:9278:9299	3001141	0					
ANR	3001144	ReturnStatement	return next ( d ) ;	390:1:9281:9297	3001141	0	True				
ANR	3001145	CallExpression	next ( d )		3001141	0					
ANR	3001146	Callee	next		3001141	0					
ANR	3001147	Identifier	next		3001141	0					
ANR	3001148	ArgumentList	d		3001141	1					
ANR	3001149	Argument	d		3001141	0					
ANR	3001150	Identifier	d		3001141	0					
ANR	3001151	ReturnType	bool		3001141	1					
ANR	3001152	Identifier	CollectorList :: Next		3001141	2					
ANR	3001153	ParameterList	Daemon * & d		3001141	3					
ANR	3001154	Parameter	Daemon * & d	388:21:9264:9274	3001141	0	True				
ANR	3001155	ParameterType	Daemon * &		3001141	0					
ANR	3001156	Identifier	d		3001141	1					
ANR	3001157	CFGEntryNode	ENTRY		3001141		True				
ANR	3001158	CFGExitNode	EXIT		3001141		True				
ANR	3001159	Symbol	next		3001141						
ANR	3001160	Symbol	d		3001141						
