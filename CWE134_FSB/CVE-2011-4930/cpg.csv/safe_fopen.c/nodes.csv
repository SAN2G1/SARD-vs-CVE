command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2201189	File	data/converged/CVE-2011-4930_htcondor/safe_fopen.c								
ANR	2201190	DeclStmt									
ANR	2201191	Decl							int	"int ( const char * flags , int * mode , int create_file )"	stdio_mode_to_open_flag
ANR	2201192	DeclStmt									
ANR	2201193	Decl							FILE	"FILE * ( int fd , const char * flags )"	safe_fdopen
ANR	2201194	DeclStmt									
ANR	2201195	Decl							char	char * ( const char * flags )	fix_stdio_fdopen_mode_on_windows
ANR	2201196	DeclStmt									
ANR	2201197	Decl							const char	const char [ ]	ccsStr
ANR	2201198	DeclStmt									
ANR	2201199	Decl							const char	const char [ ]	unicodeStr
ANR	2201200	DeclStmt									
ANR	2201201	Decl							const char	const char [ ]	utf8Str
ANR	2201202	DeclStmt									
ANR	2201203	Decl							const char	const char [ ]	utf16Str
ANR	2201204	DeclStmt									
ANR	2201205	Decl							const size_t	const size_t	ccsStrLen
ANR	2201206	DeclStmt									
ANR	2201207	Decl							const size_t	const size_t	unicodeStrLen
ANR	2201208	DeclStmt									
ANR	2201209	Decl							const size_t	const size_t	utf8StrLen
ANR	2201210	DeclStmt									
ANR	2201211	Decl							const size_t	const size_t	utf16StrLen
ANR	2201212	Function	safe_fopen_no_create	76:0:2365:2725							
ANR	2201213	FunctionDef	"safe_fopen_no_create (const char * fn , const char * flags)"		2201212	0					
ANR	2201214	CompoundStatement		77:0:2427:2725	2201212	0					
ANR	2201215	IdentifierDeclStatement	int open_flags ;	78:4:2433:2447	2201212	0	True				
ANR	2201216	IdentifierDecl	open_flags		2201212	0					
ANR	2201217	IdentifierDeclType	int		2201212	0					
ANR	2201218	Identifier	open_flags		2201212	1					
ANR	2201219	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 0 ) ;"	79:4:2453:2507	2201212	1	True				
ANR	2201220	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201212	0					
ANR	2201221	IdentifierDeclType	int		2201212	0					
ANR	2201222	Identifier	r		2201212	1					
ANR	2201223	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201212	2		=			
ANR	2201224	Identifier	r		2201212	0					
ANR	2201225	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201212	1					
ANR	2201226	Callee	stdio_mode_to_open_flag		2201212	0					
ANR	2201227	Identifier	stdio_mode_to_open_flag		2201212	0					
ANR	2201228	ArgumentList	flags		2201212	1					
ANR	2201229	Argument	flags		2201212	0					
ANR	2201230	Identifier	flags		2201212	0					
ANR	2201231	Argument	& open_flags		2201212	1					
ANR	2201232	UnaryOperationExpression	& open_flags		2201212	0					
ANR	2201233	UnaryOperator	&		2201212	0					
ANR	2201234	Identifier	open_flags		2201212	1					
ANR	2201235	Argument	0		2201212	2					
ANR	2201236	PrimaryExpression	0		2201212	0					
ANR	2201237	IdentifierDeclStatement	int f ;	80:4:2513:2518	2201212	2	True				
ANR	2201238	IdentifierDecl	f		2201212	0					
ANR	2201239	IdentifierDeclType	int		2201212	0					
ANR	2201240	Identifier	f		2201212	1					
ANR	2201241	IfStatement	if ( r != 0 )		2201212	3					
ANR	2201242	Condition	r != 0	82:8:2529:2534	2201212	0	True				
ANR	2201243	EqualityExpression	r != 0		2201212	0		!=			
ANR	2201244	Identifier	r		2201212	0					
ANR	2201245	PrimaryExpression	0		2201212	1					
ANR	2201246	CompoundStatement		6:17:110:110	2201212	1					
ANR	2201247	ReturnStatement	return NULL ;	83:1:2541:2552	2201212	0	True				
ANR	2201248	Identifier	NULL		2201212	0					
ANR	2201249	ExpressionStatement	open_flags &= ~O_CREAT	87:4:2620:2642	2201212	4	True				
ANR	2201250	AssignmentExpression	open_flags &= ~O_CREAT		2201212	0		&=			
ANR	2201251	Identifier	open_flags		2201212	0					
ANR	2201252	Identifier	~O_CREAT		2201212	1					
ANR	2201253	ExpressionStatement	"f = safe_open_no_create ( fn , open_flags )"	89:4:2649:2688	2201212	5	True				
ANR	2201254	AssignmentExpression	"f = safe_open_no_create ( fn , open_flags )"		2201212	0		=			
ANR	2201255	Identifier	f		2201212	0					
ANR	2201256	CallExpression	"safe_open_no_create ( fn , open_flags )"		2201212	1					
ANR	2201257	Callee	safe_open_no_create		2201212	0					
ANR	2201258	Identifier	safe_open_no_create		2201212	0					
ANR	2201259	ArgumentList	fn		2201212	1					
ANR	2201260	Argument	fn		2201212	0					
ANR	2201261	Identifier	fn		2201212	0					
ANR	2201262	Argument	open_flags		2201212	1					
ANR	2201263	Identifier	open_flags		2201212	0					
ANR	2201264	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	91:4:2695:2723	2201212	6	True				
ANR	2201265	CallExpression	"safe_fdopen ( f , flags )"		2201212	0					
ANR	2201266	Callee	safe_fdopen		2201212	0					
ANR	2201267	Identifier	safe_fdopen		2201212	0					
ANR	2201268	ArgumentList	f		2201212	1					
ANR	2201269	Argument	f		2201212	0					
ANR	2201270	Identifier	f		2201212	0					
ANR	2201271	Argument	flags		2201212	1					
ANR	2201272	Identifier	flags		2201212	0					
ANR	2201273	ReturnType	FILE *		2201212	1					
ANR	2201274	Identifier	safe_fopen_no_create		2201212	2					
ANR	2201275	ParameterList	"const char * fn , const char * flags"		2201212	3					
ANR	2201276	Parameter	const char * fn	76:27:2392:2405	2201212	0	True				
ANR	2201277	ParameterType	const char *		2201212	0					
ANR	2201278	Identifier	fn		2201212	1					
ANR	2201279	Parameter	const char * flags	76:43:2408:2424	2201212	1	True				
ANR	2201280	ParameterType	const char *		2201212	0					
ANR	2201281	Identifier	flags		2201212	1					
ANR	2201282	CFGEntryNode	ENTRY		2201212		True				
ANR	2201283	CFGExitNode	EXIT		2201212		True				
ANR	2201284	Symbol	& open_flags		2201212						
ANR	2201285	Symbol	r		2201212						
ANR	2201286	Symbol	NULL		2201212						
ANR	2201287	Symbol	safe_fdopen		2201212						
ANR	2201288	Symbol	f		2201212						
ANR	2201289	Symbol	safe_open_no_create		2201212						
ANR	2201290	Symbol	fn		2201212						
ANR	2201291	Symbol	flags		2201212						
ANR	2201292	Symbol	stdio_mode_to_open_flag		2201212						
ANR	2201293	Symbol	~O_CREAT		2201212						
ANR	2201294	Symbol	open_flags		2201212						
ANR	2201295	Function	safe_fcreate_fail_if_exists	96:0:2788:3097							
ANR	2201296	FunctionDef	"safe_fcreate_fail_if_exists (const char * fn , const char * flags , mode_t mode)"		2201295	0					
ANR	2201297	CompoundStatement		97:0:2870:3097	2201295	0					
ANR	2201298	IdentifierDeclStatement	int open_flags ;	98:4:2876:2890	2201295	0	True				
ANR	2201299	IdentifierDecl	open_flags		2201295	0					
ANR	2201300	IdentifierDeclType	int		2201295	0					
ANR	2201301	Identifier	open_flags		2201295	1					
ANR	2201302	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	99:4:2896:2950	2201295	1	True				
ANR	2201303	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201295	0					
ANR	2201304	IdentifierDeclType	int		2201295	0					
ANR	2201305	Identifier	r		2201295	1					
ANR	2201306	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201295	2		=			
ANR	2201307	Identifier	r		2201295	0					
ANR	2201308	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201295	1					
ANR	2201309	Callee	stdio_mode_to_open_flag		2201295	0					
ANR	2201310	Identifier	stdio_mode_to_open_flag		2201295	0					
ANR	2201311	ArgumentList	flags		2201295	1					
ANR	2201312	Argument	flags		2201295	0					
ANR	2201313	Identifier	flags		2201295	0					
ANR	2201314	Argument	& open_flags		2201295	1					
ANR	2201315	UnaryOperationExpression	& open_flags		2201295	0					
ANR	2201316	UnaryOperator	&		2201295	0					
ANR	2201317	Identifier	open_flags		2201295	1					
ANR	2201318	Argument	1		2201295	2					
ANR	2201319	PrimaryExpression	1		2201295	0					
ANR	2201320	IdentifierDeclStatement	int f ;	100:4:2956:2961	2201295	2	True				
ANR	2201321	IdentifierDecl	f		2201295	0					
ANR	2201322	IdentifierDeclType	int		2201295	0					
ANR	2201323	Identifier	f		2201295	1					
ANR	2201324	IfStatement	if ( r != 0 )		2201295	3					
ANR	2201325	Condition	r != 0	102:8:2972:2977	2201295	0	True				
ANR	2201326	EqualityExpression	r != 0		2201295	0		!=			
ANR	2201327	Identifier	r		2201295	0					
ANR	2201328	PrimaryExpression	0		2201295	1					
ANR	2201329	CompoundStatement		6:17:110:110	2201295	1					
ANR	2201330	ReturnStatement	return NULL ;	103:1:2984:2995	2201295	0	True				
ANR	2201331	Identifier	NULL		2201295	0					
ANR	2201332	ExpressionStatement	"f = safe_create_fail_if_exists ( fn , open_flags , mode )"	106:4:3008:3060	2201295	4	True				
ANR	2201333	AssignmentExpression	"f = safe_create_fail_if_exists ( fn , open_flags , mode )"		2201295	0		=			
ANR	2201334	Identifier	f		2201295	0					
ANR	2201335	CallExpression	"safe_create_fail_if_exists ( fn , open_flags , mode )"		2201295	1					
ANR	2201336	Callee	safe_create_fail_if_exists		2201295	0					
ANR	2201337	Identifier	safe_create_fail_if_exists		2201295	0					
ANR	2201338	ArgumentList	fn		2201295	1					
ANR	2201339	Argument	fn		2201295	0					
ANR	2201340	Identifier	fn		2201295	0					
ANR	2201341	Argument	open_flags		2201295	1					
ANR	2201342	Identifier	open_flags		2201295	0					
ANR	2201343	Argument	mode		2201295	2					
ANR	2201344	Identifier	mode		2201295	0					
ANR	2201345	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	108:4:3067:3095	2201295	5	True				
ANR	2201346	CallExpression	"safe_fdopen ( f , flags )"		2201295	0					
ANR	2201347	Callee	safe_fdopen		2201295	0					
ANR	2201348	Identifier	safe_fdopen		2201295	0					
ANR	2201349	ArgumentList	f		2201295	1					
ANR	2201350	Argument	f		2201295	0					
ANR	2201351	Identifier	f		2201295	0					
ANR	2201352	Argument	flags		2201295	1					
ANR	2201353	Identifier	flags		2201295	0					
ANR	2201354	ReturnType	FILE *		2201295	1					
ANR	2201355	Identifier	safe_fcreate_fail_if_exists		2201295	2					
ANR	2201356	ParameterList	"const char * fn , const char * flags , mode_t mode"		2201295	3					
ANR	2201357	Parameter	const char * fn	96:34:2822:2835	2201295	0	True				
ANR	2201358	ParameterType	const char *		2201295	0					
ANR	2201359	Identifier	fn		2201295	1					
ANR	2201360	Parameter	const char * flags	96:50:2838:2854	2201295	1	True				
ANR	2201361	ParameterType	const char *		2201295	0					
ANR	2201362	Identifier	flags		2201295	1					
ANR	2201363	Parameter	mode_t mode	96:69:2857:2867	2201295	2	True				
ANR	2201364	ParameterType	mode_t		2201295	0					
ANR	2201365	Identifier	mode		2201295	1					
ANR	2201366	CFGEntryNode	ENTRY		2201295		True				
ANR	2201367	CFGExitNode	EXIT		2201295		True				
ANR	2201368	Symbol	mode		2201295						
ANR	2201369	Symbol	& open_flags		2201295						
ANR	2201370	Symbol	r		2201295						
ANR	2201371	Symbol	NULL		2201295						
ANR	2201372	Symbol	safe_fdopen		2201295						
ANR	2201373	Symbol	f		2201295						
ANR	2201374	Symbol	fn		2201295						
ANR	2201375	Symbol	flags		2201295						
ANR	2201376	Symbol	stdio_mode_to_open_flag		2201295						
ANR	2201377	Symbol	open_flags		2201295						
ANR	2201378	Symbol	safe_create_fail_if_exists		2201295						
ANR	2201379	Function	safe_fcreate_keep_if_exists	113:0:3162:3471							
ANR	2201380	FunctionDef	"safe_fcreate_keep_if_exists (const char * fn , const char * flags , mode_t mode)"		2201379	0					
ANR	2201381	CompoundStatement		114:0:3244:3471	2201379	0					
ANR	2201382	IdentifierDeclStatement	int open_flags ;	115:4:3250:3264	2201379	0	True				
ANR	2201383	IdentifierDecl	open_flags		2201379	0					
ANR	2201384	IdentifierDeclType	int		2201379	0					
ANR	2201385	Identifier	open_flags		2201379	1					
ANR	2201386	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	116:4:3270:3324	2201379	1	True				
ANR	2201387	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201379	0					
ANR	2201388	IdentifierDeclType	int		2201379	0					
ANR	2201389	Identifier	r		2201379	1					
ANR	2201390	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201379	2		=			
ANR	2201391	Identifier	r		2201379	0					
ANR	2201392	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201379	1					
ANR	2201393	Callee	stdio_mode_to_open_flag		2201379	0					
ANR	2201394	Identifier	stdio_mode_to_open_flag		2201379	0					
ANR	2201395	ArgumentList	flags		2201379	1					
ANR	2201396	Argument	flags		2201379	0					
ANR	2201397	Identifier	flags		2201379	0					
ANR	2201398	Argument	& open_flags		2201379	1					
ANR	2201399	UnaryOperationExpression	& open_flags		2201379	0					
ANR	2201400	UnaryOperator	&		2201379	0					
ANR	2201401	Identifier	open_flags		2201379	1					
ANR	2201402	Argument	1		2201379	2					
ANR	2201403	PrimaryExpression	1		2201379	0					
ANR	2201404	IdentifierDeclStatement	int f ;	117:4:3330:3335	2201379	2	True				
ANR	2201405	IdentifierDecl	f		2201379	0					
ANR	2201406	IdentifierDeclType	int		2201379	0					
ANR	2201407	Identifier	f		2201379	1					
ANR	2201408	IfStatement	if ( r != 0 )		2201379	3					
ANR	2201409	Condition	r != 0	119:8:3346:3351	2201379	0	True				
ANR	2201410	EqualityExpression	r != 0		2201379	0		!=			
ANR	2201411	Identifier	r		2201379	0					
ANR	2201412	PrimaryExpression	0		2201379	1					
ANR	2201413	CompoundStatement		6:17:110:110	2201379	1					
ANR	2201414	ReturnStatement	return NULL ;	120:1:3358:3369	2201379	0	True				
ANR	2201415	Identifier	NULL		2201379	0					
ANR	2201416	ExpressionStatement	"f = safe_create_keep_if_exists ( fn , open_flags , mode )"	123:4:3382:3434	2201379	4	True				
ANR	2201417	AssignmentExpression	"f = safe_create_keep_if_exists ( fn , open_flags , mode )"		2201379	0		=			
ANR	2201418	Identifier	f		2201379	0					
ANR	2201419	CallExpression	"safe_create_keep_if_exists ( fn , open_flags , mode )"		2201379	1					
ANR	2201420	Callee	safe_create_keep_if_exists		2201379	0					
ANR	2201421	Identifier	safe_create_keep_if_exists		2201379	0					
ANR	2201422	ArgumentList	fn		2201379	1					
ANR	2201423	Argument	fn		2201379	0					
ANR	2201424	Identifier	fn		2201379	0					
ANR	2201425	Argument	open_flags		2201379	1					
ANR	2201426	Identifier	open_flags		2201379	0					
ANR	2201427	Argument	mode		2201379	2					
ANR	2201428	Identifier	mode		2201379	0					
ANR	2201429	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	125:4:3441:3469	2201379	5	True				
ANR	2201430	CallExpression	"safe_fdopen ( f , flags )"		2201379	0					
ANR	2201431	Callee	safe_fdopen		2201379	0					
ANR	2201432	Identifier	safe_fdopen		2201379	0					
ANR	2201433	ArgumentList	f		2201379	1					
ANR	2201434	Argument	f		2201379	0					
ANR	2201435	Identifier	f		2201379	0					
ANR	2201436	Argument	flags		2201379	1					
ANR	2201437	Identifier	flags		2201379	0					
ANR	2201438	ReturnType	FILE *		2201379	1					
ANR	2201439	Identifier	safe_fcreate_keep_if_exists		2201379	2					
ANR	2201440	ParameterList	"const char * fn , const char * flags , mode_t mode"		2201379	3					
ANR	2201441	Parameter	const char * fn	113:34:3196:3209	2201379	0	True				
ANR	2201442	ParameterType	const char *		2201379	0					
ANR	2201443	Identifier	fn		2201379	1					
ANR	2201444	Parameter	const char * flags	113:50:3212:3228	2201379	1	True				
ANR	2201445	ParameterType	const char *		2201379	0					
ANR	2201446	Identifier	flags		2201379	1					
ANR	2201447	Parameter	mode_t mode	113:69:3231:3241	2201379	2	True				
ANR	2201448	ParameterType	mode_t		2201379	0					
ANR	2201449	Identifier	mode		2201379	1					
ANR	2201450	CFGEntryNode	ENTRY		2201379		True				
ANR	2201451	CFGExitNode	EXIT		2201379		True				
ANR	2201452	Symbol	mode		2201379						
ANR	2201453	Symbol	& open_flags		2201379						
ANR	2201454	Symbol	r		2201379						
ANR	2201455	Symbol	NULL		2201379						
ANR	2201456	Symbol	safe_fdopen		2201379						
ANR	2201457	Symbol	safe_create_keep_if_exists		2201379						
ANR	2201458	Symbol	f		2201379						
ANR	2201459	Symbol	fn		2201379						
ANR	2201460	Symbol	flags		2201379						
ANR	2201461	Symbol	stdio_mode_to_open_flag		2201379						
ANR	2201462	Symbol	open_flags		2201379						
ANR	2201463	Function	safe_fcreate_replace_if_exists	130:0:3517:3832							
ANR	2201464	FunctionDef	"safe_fcreate_replace_if_exists (const char * fn , const char * flags , mode_t mode)"		2201463	0					
ANR	2201465	CompoundStatement		131:0:3602:3832	2201463	0					
ANR	2201466	IdentifierDeclStatement	int open_flags ;	132:4:3608:3622	2201463	0	True				
ANR	2201467	IdentifierDecl	open_flags		2201463	0					
ANR	2201468	IdentifierDeclType	int		2201463	0					
ANR	2201469	Identifier	open_flags		2201463	1					
ANR	2201470	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	133:4:3628:3682	2201463	1	True				
ANR	2201471	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201463	0					
ANR	2201472	IdentifierDeclType	int		2201463	0					
ANR	2201473	Identifier	r		2201463	1					
ANR	2201474	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201463	2		=			
ANR	2201475	Identifier	r		2201463	0					
ANR	2201476	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201463	1					
ANR	2201477	Callee	stdio_mode_to_open_flag		2201463	0					
ANR	2201478	Identifier	stdio_mode_to_open_flag		2201463	0					
ANR	2201479	ArgumentList	flags		2201463	1					
ANR	2201480	Argument	flags		2201463	0					
ANR	2201481	Identifier	flags		2201463	0					
ANR	2201482	Argument	& open_flags		2201463	1					
ANR	2201483	UnaryOperationExpression	& open_flags		2201463	0					
ANR	2201484	UnaryOperator	&		2201463	0					
ANR	2201485	Identifier	open_flags		2201463	1					
ANR	2201486	Argument	1		2201463	2					
ANR	2201487	PrimaryExpression	1		2201463	0					
ANR	2201488	IdentifierDeclStatement	int f ;	134:4:3688:3693	2201463	2	True				
ANR	2201489	IdentifierDecl	f		2201463	0					
ANR	2201490	IdentifierDeclType	int		2201463	0					
ANR	2201491	Identifier	f		2201463	1					
ANR	2201492	IfStatement	if ( r != 0 )		2201463	3					
ANR	2201493	Condition	r != 0	136:8:3704:3709	2201463	0	True				
ANR	2201494	EqualityExpression	r != 0		2201463	0		!=			
ANR	2201495	Identifier	r		2201463	0					
ANR	2201496	PrimaryExpression	0		2201463	1					
ANR	2201497	CompoundStatement		6:17:110:110	2201463	1					
ANR	2201498	ReturnStatement	return NULL ;	137:1:3716:3727	2201463	0	True				
ANR	2201499	Identifier	NULL		2201463	0					
ANR	2201500	ExpressionStatement	"f = safe_create_replace_if_exists ( fn , open_flags , mode )"	140:4:3740:3795	2201463	4	True				
ANR	2201501	AssignmentExpression	"f = safe_create_replace_if_exists ( fn , open_flags , mode )"		2201463	0		=			
ANR	2201502	Identifier	f		2201463	0					
ANR	2201503	CallExpression	"safe_create_replace_if_exists ( fn , open_flags , mode )"		2201463	1					
ANR	2201504	Callee	safe_create_replace_if_exists		2201463	0					
ANR	2201505	Identifier	safe_create_replace_if_exists		2201463	0					
ANR	2201506	ArgumentList	fn		2201463	1					
ANR	2201507	Argument	fn		2201463	0					
ANR	2201508	Identifier	fn		2201463	0					
ANR	2201509	Argument	open_flags		2201463	1					
ANR	2201510	Identifier	open_flags		2201463	0					
ANR	2201511	Argument	mode		2201463	2					
ANR	2201512	Identifier	mode		2201463	0					
ANR	2201513	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	142:4:3802:3830	2201463	5	True				
ANR	2201514	CallExpression	"safe_fdopen ( f , flags )"		2201463	0					
ANR	2201515	Callee	safe_fdopen		2201463	0					
ANR	2201516	Identifier	safe_fdopen		2201463	0					
ANR	2201517	ArgumentList	f		2201463	1					
ANR	2201518	Argument	f		2201463	0					
ANR	2201519	Identifier	f		2201463	0					
ANR	2201520	Argument	flags		2201463	1					
ANR	2201521	Identifier	flags		2201463	0					
ANR	2201522	ReturnType	FILE *		2201463	1					
ANR	2201523	Identifier	safe_fcreate_replace_if_exists		2201463	2					
ANR	2201524	ParameterList	"const char * fn , const char * flags , mode_t mode"		2201463	3					
ANR	2201525	Parameter	const char * fn	130:37:3554:3567	2201463	0	True				
ANR	2201526	ParameterType	const char *		2201463	0					
ANR	2201527	Identifier	fn		2201463	1					
ANR	2201528	Parameter	const char * flags	130:53:3570:3586	2201463	1	True				
ANR	2201529	ParameterType	const char *		2201463	0					
ANR	2201530	Identifier	flags		2201463	1					
ANR	2201531	Parameter	mode_t mode	130:72:3589:3599	2201463	2	True				
ANR	2201532	ParameterType	mode_t		2201463	0					
ANR	2201533	Identifier	mode		2201463	1					
ANR	2201534	CFGEntryNode	ENTRY		2201463		True				
ANR	2201535	CFGExitNode	EXIT		2201463		True				
ANR	2201536	Symbol	mode		2201463						
ANR	2201537	Symbol	& open_flags		2201463						
ANR	2201538	Symbol	r		2201463						
ANR	2201539	Symbol	NULL		2201463						
ANR	2201540	Symbol	safe_fdopen		2201463						
ANR	2201541	Symbol	f		2201463						
ANR	2201542	Symbol	fn		2201463						
ANR	2201543	Symbol	flags		2201463						
ANR	2201544	Symbol	stdio_mode_to_open_flag		2201463						
ANR	2201545	Symbol	safe_create_replace_if_exists		2201463						
ANR	2201546	Symbol	open_flags		2201463						
ANR	2201547	Function	safe_fopen_no_create_follow	147:0:3861:4235							
ANR	2201548	FunctionDef	"safe_fopen_no_create_follow (const char * fn , const char * flags)"		2201547	0					
ANR	2201549	CompoundStatement		148:0:3930:4235	2201547	0					
ANR	2201550	IdentifierDeclStatement	int open_flags ;	149:4:3936:3950	2201547	0	True				
ANR	2201551	IdentifierDecl	open_flags		2201547	0					
ANR	2201552	IdentifierDeclType	int		2201547	0					
ANR	2201553	Identifier	open_flags		2201547	1					
ANR	2201554	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 0 ) ;"	150:4:3956:4010	2201547	1	True				
ANR	2201555	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201547	0					
ANR	2201556	IdentifierDeclType	int		2201547	0					
ANR	2201557	Identifier	r		2201547	1					
ANR	2201558	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201547	2		=			
ANR	2201559	Identifier	r		2201547	0					
ANR	2201560	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 0 )"		2201547	1					
ANR	2201561	Callee	stdio_mode_to_open_flag		2201547	0					
ANR	2201562	Identifier	stdio_mode_to_open_flag		2201547	0					
ANR	2201563	ArgumentList	flags		2201547	1					
ANR	2201564	Argument	flags		2201547	0					
ANR	2201565	Identifier	flags		2201547	0					
ANR	2201566	Argument	& open_flags		2201547	1					
ANR	2201567	UnaryOperationExpression	& open_flags		2201547	0					
ANR	2201568	UnaryOperator	&		2201547	0					
ANR	2201569	Identifier	open_flags		2201547	1					
ANR	2201570	Argument	0		2201547	2					
ANR	2201571	PrimaryExpression	0		2201547	0					
ANR	2201572	IdentifierDeclStatement	int f ;	151:4:4016:4021	2201547	2	True				
ANR	2201573	IdentifierDecl	f		2201547	0					
ANR	2201574	IdentifierDeclType	int		2201547	0					
ANR	2201575	Identifier	f		2201547	1					
ANR	2201576	IfStatement	if ( r != 0 )		2201547	3					
ANR	2201577	Condition	r != 0	153:8:4032:4037	2201547	0	True				
ANR	2201578	EqualityExpression	r != 0		2201547	0		!=			
ANR	2201579	Identifier	r		2201547	0					
ANR	2201580	PrimaryExpression	0		2201547	1					
ANR	2201581	CompoundStatement		6:17:110:110	2201547	1					
ANR	2201582	ReturnStatement	return NULL ;	154:1:4044:4055	2201547	0	True				
ANR	2201583	Identifier	NULL		2201547	0					
ANR	2201584	ExpressionStatement	open_flags &= ~O_CREAT	158:4:4123:4145	2201547	4	True				
ANR	2201585	AssignmentExpression	open_flags &= ~O_CREAT		2201547	0		&=			
ANR	2201586	Identifier	open_flags		2201547	0					
ANR	2201587	Identifier	~O_CREAT		2201547	1					
ANR	2201588	ExpressionStatement	"f = safe_open_no_create_follow ( fn , open_flags )"	160:4:4152:4198	2201547	5	True				
ANR	2201589	AssignmentExpression	"f = safe_open_no_create_follow ( fn , open_flags )"		2201547	0		=			
ANR	2201590	Identifier	f		2201547	0					
ANR	2201591	CallExpression	"safe_open_no_create_follow ( fn , open_flags )"		2201547	1					
ANR	2201592	Callee	safe_open_no_create_follow		2201547	0					
ANR	2201593	Identifier	safe_open_no_create_follow		2201547	0					
ANR	2201594	ArgumentList	fn		2201547	1					
ANR	2201595	Argument	fn		2201547	0					
ANR	2201596	Identifier	fn		2201547	0					
ANR	2201597	Argument	open_flags		2201547	1					
ANR	2201598	Identifier	open_flags		2201547	0					
ANR	2201599	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	162:4:4205:4233	2201547	6	True				
ANR	2201600	CallExpression	"safe_fdopen ( f , flags )"		2201547	0					
ANR	2201601	Callee	safe_fdopen		2201547	0					
ANR	2201602	Identifier	safe_fdopen		2201547	0					
ANR	2201603	ArgumentList	f		2201547	1					
ANR	2201604	Argument	f		2201547	0					
ANR	2201605	Identifier	f		2201547	0					
ANR	2201606	Argument	flags		2201547	1					
ANR	2201607	Identifier	flags		2201547	0					
ANR	2201608	ReturnType	FILE *		2201547	1					
ANR	2201609	Identifier	safe_fopen_no_create_follow		2201547	2					
ANR	2201610	ParameterList	"const char * fn , const char * flags"		2201547	3					
ANR	2201611	Parameter	const char * fn	147:34:3895:3908	2201547	0	True				
ANR	2201612	ParameterType	const char *		2201547	0					
ANR	2201613	Identifier	fn		2201547	1					
ANR	2201614	Parameter	const char * flags	147:50:3911:3927	2201547	1	True				
ANR	2201615	ParameterType	const char *		2201547	0					
ANR	2201616	Identifier	flags		2201547	1					
ANR	2201617	CFGEntryNode	ENTRY		2201547		True				
ANR	2201618	CFGExitNode	EXIT		2201547		True				
ANR	2201619	Symbol	safe_open_no_create_follow		2201547						
ANR	2201620	Symbol	& open_flags		2201547						
ANR	2201621	Symbol	r		2201547						
ANR	2201622	Symbol	NULL		2201547						
ANR	2201623	Symbol	safe_fdopen		2201547						
ANR	2201624	Symbol	f		2201547						
ANR	2201625	Symbol	fn		2201547						
ANR	2201626	Symbol	flags		2201547						
ANR	2201627	Symbol	stdio_mode_to_open_flag		2201547						
ANR	2201628	Symbol	~O_CREAT		2201547						
ANR	2201629	Symbol	open_flags		2201547						
ANR	2201630	Function	safe_fcreate_keep_if_exists_follow	167:0:4300:4623							
ANR	2201631	FunctionDef	"safe_fcreate_keep_if_exists_follow (const char * fn , const char * flags , mode_t mode)"		2201630	0					
ANR	2201632	CompoundStatement		168:0:4389:4623	2201630	0					
ANR	2201633	IdentifierDeclStatement	int open_flags ;	169:4:4395:4409	2201630	0	True				
ANR	2201634	IdentifierDecl	open_flags		2201630	0					
ANR	2201635	IdentifierDeclType	int		2201630	0					
ANR	2201636	Identifier	open_flags		2201630	1					
ANR	2201637	IdentifierDeclStatement	"int r = stdio_mode_to_open_flag ( flags , & open_flags , 1 ) ;"	170:4:4415:4469	2201630	1	True				
ANR	2201638	IdentifierDecl	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201630	0					
ANR	2201639	IdentifierDeclType	int		2201630	0					
ANR	2201640	Identifier	r		2201630	1					
ANR	2201641	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201630	2		=			
ANR	2201642	Identifier	r		2201630	0					
ANR	2201643	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , 1 )"		2201630	1					
ANR	2201644	Callee	stdio_mode_to_open_flag		2201630	0					
ANR	2201645	Identifier	stdio_mode_to_open_flag		2201630	0					
ANR	2201646	ArgumentList	flags		2201630	1					
ANR	2201647	Argument	flags		2201630	0					
ANR	2201648	Identifier	flags		2201630	0					
ANR	2201649	Argument	& open_flags		2201630	1					
ANR	2201650	UnaryOperationExpression	& open_flags		2201630	0					
ANR	2201651	UnaryOperator	&		2201630	0					
ANR	2201652	Identifier	open_flags		2201630	1					
ANR	2201653	Argument	1		2201630	2					
ANR	2201654	PrimaryExpression	1		2201630	0					
ANR	2201655	IdentifierDeclStatement	int f ;	171:4:4475:4480	2201630	2	True				
ANR	2201656	IdentifierDecl	f		2201630	0					
ANR	2201657	IdentifierDeclType	int		2201630	0					
ANR	2201658	Identifier	f		2201630	1					
ANR	2201659	IfStatement	if ( r != 0 )		2201630	3					
ANR	2201660	Condition	r != 0	173:8:4491:4496	2201630	0	True				
ANR	2201661	EqualityExpression	r != 0		2201630	0		!=			
ANR	2201662	Identifier	r		2201630	0					
ANR	2201663	PrimaryExpression	0		2201630	1					
ANR	2201664	CompoundStatement		6:17:110:110	2201630	1					
ANR	2201665	ReturnStatement	return NULL ;	174:1:4503:4514	2201630	0	True				
ANR	2201666	Identifier	NULL		2201630	0					
ANR	2201667	ExpressionStatement	"f = safe_create_keep_if_exists_follow ( fn , open_flags , mode )"	177:4:4527:4586	2201630	4	True				
ANR	2201668	AssignmentExpression	"f = safe_create_keep_if_exists_follow ( fn , open_flags , mode )"		2201630	0		=			
ANR	2201669	Identifier	f		2201630	0					
ANR	2201670	CallExpression	"safe_create_keep_if_exists_follow ( fn , open_flags , mode )"		2201630	1					
ANR	2201671	Callee	safe_create_keep_if_exists_follow		2201630	0					
ANR	2201672	Identifier	safe_create_keep_if_exists_follow		2201630	0					
ANR	2201673	ArgumentList	fn		2201630	1					
ANR	2201674	Argument	fn		2201630	0					
ANR	2201675	Identifier	fn		2201630	0					
ANR	2201676	Argument	open_flags		2201630	1					
ANR	2201677	Identifier	open_flags		2201630	0					
ANR	2201678	Argument	mode		2201630	2					
ANR	2201679	Identifier	mode		2201630	0					
ANR	2201680	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	179:4:4593:4621	2201630	5	True				
ANR	2201681	CallExpression	"safe_fdopen ( f , flags )"		2201630	0					
ANR	2201682	Callee	safe_fdopen		2201630	0					
ANR	2201683	Identifier	safe_fdopen		2201630	0					
ANR	2201684	ArgumentList	f		2201630	1					
ANR	2201685	Argument	f		2201630	0					
ANR	2201686	Identifier	f		2201630	0					
ANR	2201687	Argument	flags		2201630	1					
ANR	2201688	Identifier	flags		2201630	0					
ANR	2201689	ReturnType	FILE *		2201630	1					
ANR	2201690	Identifier	safe_fcreate_keep_if_exists_follow		2201630	2					
ANR	2201691	ParameterList	"const char * fn , const char * flags , mode_t mode"		2201630	3					
ANR	2201692	Parameter	const char * fn	167:41:4341:4354	2201630	0	True				
ANR	2201693	ParameterType	const char *		2201630	0					
ANR	2201694	Identifier	fn		2201630	1					
ANR	2201695	Parameter	const char * flags	167:57:4357:4373	2201630	1	True				
ANR	2201696	ParameterType	const char *		2201630	0					
ANR	2201697	Identifier	flags		2201630	1					
ANR	2201698	Parameter	mode_t mode	167:76:4376:4386	2201630	2	True				
ANR	2201699	ParameterType	mode_t		2201630	0					
ANR	2201700	Identifier	mode		2201630	1					
ANR	2201701	CFGEntryNode	ENTRY		2201630		True				
ANR	2201702	CFGExitNode	EXIT		2201630		True				
ANR	2201703	Symbol	mode		2201630						
ANR	2201704	Symbol	safe_create_keep_if_exists_follow		2201630						
ANR	2201705	Symbol	& open_flags		2201630						
ANR	2201706	Symbol	r		2201630						
ANR	2201707	Symbol	NULL		2201630						
ANR	2201708	Symbol	safe_fdopen		2201630						
ANR	2201709	Symbol	f		2201630						
ANR	2201710	Symbol	fn		2201630						
ANR	2201711	Symbol	flags		2201630						
ANR	2201712	Symbol	stdio_mode_to_open_flag		2201630						
ANR	2201713	Symbol	open_flags		2201630						
ANR	2201714	Function	stdio_mode_to_open_flag	194:0:5021:8288							
ANR	2201715	FunctionDef	"stdio_mode_to_open_flag (const char * flags , int * mode , int create_file)"		2201714	0					
ANR	2201716	CompoundStatement		195:0:5096:8288	2201714	0					
ANR	2201717	IdentifierDeclStatement	int plus_flag = 0 ;	196:4:5102:5120	2201714	0	True				
ANR	2201718	IdentifierDecl	plus_flag = 0		2201714	0					
ANR	2201719	IdentifierDeclType	int		2201714	0					
ANR	2201720	Identifier	plus_flag		2201714	1					
ANR	2201721	AssignmentExpression	plus_flag = 0		2201714	2		=			
ANR	2201722	Identifier	plus_flag		2201714	0					
ANR	2201723	PrimaryExpression	0		2201714	1					
ANR	2201724	IdentifierDeclStatement	char mode_char ;	197:4:5126:5140	2201714	1	True				
ANR	2201725	IdentifierDecl	mode_char		2201714	0					
ANR	2201726	IdentifierDeclType	char		2201714	0					
ANR	2201727	Identifier	mode_char		2201714	1					
ANR	2201728	IfStatement	if ( ! flags || ! mode )		2201714	2					
ANR	2201729	Condition	! flags || ! mode	199:8:5151:5165	2201714	0	True				
ANR	2201730	OrExpression	! flags || ! mode		2201714	0		||			
ANR	2201731	UnaryOperationExpression	! flags		2201714	0					
ANR	2201732	UnaryOperator	!		2201714	0					
ANR	2201733	Identifier	flags		2201714	1					
ANR	2201734	UnaryOperationExpression	! mode		2201714	1					
ANR	2201735	UnaryOperator	!		2201714	0					
ANR	2201736	Identifier	mode		2201714	1					
ANR	2201737	CompoundStatement		5:26:72:72	2201714	1					
ANR	2201738	ExpressionStatement	errno = EINVAL	200:1:5172:5186	2201714	0	True				
ANR	2201739	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2201740	Identifier	errno		2201714	0					
ANR	2201741	Identifier	EINVAL		2201714	1					
ANR	2201742	ReturnStatement	return - 1 ;	201:1:5189:5198	2201714	1	True				
ANR	2201743	UnaryOperationExpression	- 1		2201714	0					
ANR	2201744	UnaryOperator	-		2201714	0					
ANR	2201745	PrimaryExpression	1		2201714	1					
ANR	2201746	ExpressionStatement	* mode = 0	204:4:5211:5220	2201714	3	True				
ANR	2201747	AssignmentExpression	* mode = 0		2201714	0		=			
ANR	2201748	UnaryOperationExpression	* mode		2201714	0					
ANR	2201749	UnaryOperator	*		2201714	0					
ANR	2201750	Identifier	mode		2201714	1					
ANR	2201751	PrimaryExpression	0		2201714	1					
ANR	2201752	ExpressionStatement	mode_char = flags [ 0 ]	205:4:5226:5246	2201714	4	True				
ANR	2201753	AssignmentExpression	mode_char = flags [ 0 ]		2201714	0		=			
ANR	2201754	Identifier	mode_char		2201714	0					
ANR	2201755	ArrayIndexing	flags [ 0 ]		2201714	1					
ANR	2201756	Identifier	flags		2201714	0					
ANR	2201757	PrimaryExpression	0		2201714	1					
ANR	2201758	IfStatement	if ( mode_char == 'r' || mode_char == 'w' || mode_char == 'a' )		2201714	5					
ANR	2201759	Condition	mode_char == 'r' || mode_char == 'w' || mode_char == 'a'	207:8:5257:5312	2201714	0	True				
ANR	2201760	OrExpression	mode_char == 'r' || mode_char == 'w' || mode_char == 'a'		2201714	0		||			
ANR	2201761	EqualityExpression	mode_char == 'r'		2201714	0		==			
ANR	2201762	Identifier	mode_char		2201714	0					
ANR	2201763	PrimaryExpression	'r'		2201714	1					
ANR	2201764	OrExpression	mode_char == 'w' || mode_char == 'a'		2201714	1		||			
ANR	2201765	EqualityExpression	mode_char == 'w'		2201714	0		==			
ANR	2201766	Identifier	mode_char		2201714	0					
ANR	2201767	PrimaryExpression	'w'		2201714	1					
ANR	2201768	EqualityExpression	mode_char == 'a'		2201714	1		==			
ANR	2201769	Identifier	mode_char		2201714	0					
ANR	2201770	PrimaryExpression	'a'		2201714	1					
ANR	2201771	CompoundStatement		13:67:219:219	2201714	1					
ANR	2201772	IfStatement	if ( flags [ 1 ] == 'b' )		2201714	0					
ANR	2201773	Condition	flags [ 1 ] == 'b'	208:5:5323:5337	2201714	0	True				
ANR	2201774	EqualityExpression	flags [ 1 ] == 'b'		2201714	0		==			
ANR	2201775	ArrayIndexing	flags [ 1 ]		2201714	0					
ANR	2201776	Identifier	flags		2201714	0					
ANR	2201777	PrimaryExpression	1		2201714	1					
ANR	2201778	PrimaryExpression	'b'		2201714	1					
ANR	2201779	CompoundStatement		14:23:244:244	2201714	1					
ANR	2201780	ExpressionStatement	plus_flag = flags [ 2 ] == '+'	209:5:5348:5375	2201714	0	True				
ANR	2201781	AssignmentExpression	plus_flag = flags [ 2 ] == '+'		2201714	0		=			
ANR	2201782	Identifier	plus_flag		2201714	0					
ANR	2201783	EqualityExpression	flags [ 2 ] == '+'		2201714	1		==			
ANR	2201784	ArrayIndexing	flags [ 2 ]		2201714	0					
ANR	2201785	Identifier	flags		2201714	0					
ANR	2201786	PrimaryExpression	2		2201714	1					
ANR	2201787	PrimaryExpression	'+'		2201714	1					
ANR	2201788	ElseStatement	else		2201714	0					
ANR	2201789	CompoundStatement		16:10:290:290	2201714	0					
ANR	2201790	ExpressionStatement	plus_flag = flags [ 1 ] == '+'	211:5:5394:5421	2201714	0	True				
ANR	2201791	AssignmentExpression	plus_flag = flags [ 1 ] == '+'		2201714	0		=			
ANR	2201792	Identifier	plus_flag		2201714	0					
ANR	2201793	EqualityExpression	flags [ 1 ] == '+'		2201714	1		==			
ANR	2201794	ArrayIndexing	flags [ 1 ]		2201714	0					
ANR	2201795	Identifier	flags		2201714	0					
ANR	2201796	PrimaryExpression	1		2201714	1					
ANR	2201797	PrimaryExpression	'+'		2201714	1					
ANR	2201798	ElseStatement	else		2201714	0					
ANR	2201799	CompoundStatement		19:13:342:342	2201714	0					
ANR	2201800	ExpressionStatement	errno = EINVAL	215:1:5463:5477	2201714	0	True				
ANR	2201801	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2201802	Identifier	errno		2201714	0					
ANR	2201803	Identifier	EINVAL		2201714	1					
ANR	2201804	ReturnStatement	return - 1 ;	216:1:5480:5489	2201714	1	True				
ANR	2201805	UnaryOperationExpression	- 1		2201714	0					
ANR	2201806	UnaryOperator	-		2201714	0					
ANR	2201807	PrimaryExpression	1		2201714	1					
ANR	2201808	IfStatement	if ( create_file && mode_char == 'r' )		2201714	6					
ANR	2201809	Condition	create_file && mode_char == 'r'	220:8:5580:5610	2201714	0	True				
ANR	2201810	AndExpression	create_file && mode_char == 'r'		2201714	0		&&			
ANR	2201811	Identifier	create_file		2201714	0					
ANR	2201812	EqualityExpression	mode_char == 'r'		2201714	1		==			
ANR	2201813	Identifier	mode_char		2201714	0					
ANR	2201814	PrimaryExpression	'r'		2201714	1					
ANR	2201815	CompoundStatement		26:42:517:517	2201714	1					
ANR	2201816	ExpressionStatement	errno = EINVAL	221:1:5617:5631	2201714	0	True				
ANR	2201817	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2201818	Identifier	errno		2201714	0					
ANR	2201819	Identifier	EINVAL		2201714	1					
ANR	2201820	ReturnStatement	return - 1 ;	222:1:5634:5643	2201714	1	True				
ANR	2201821	UnaryOperationExpression	- 1		2201714	0					
ANR	2201822	UnaryOperator	-		2201714	0					
ANR	2201823	PrimaryExpression	1		2201714	1					
ANR	2201824	IfStatement	if ( mode_char != 'r' )		2201714	7					
ANR	2201825	Condition	mode_char != 'r'	226:8:5696:5711	2201714	0	True				
ANR	2201826	EqualityExpression	mode_char != 'r'		2201714	0		!=			
ANR	2201827	Identifier	mode_char		2201714	0					
ANR	2201828	PrimaryExpression	'r'		2201714	1					
ANR	2201829	CompoundStatement		32:27:618:618	2201714	1					
ANR	2201830	ExpressionStatement	* mode |= O_CREAT	227:1:5718:5734	2201714	0	True				
ANR	2201831	AssignmentExpression	* mode |= O_CREAT		2201714	0		|=			
ANR	2201832	UnaryOperationExpression	* mode		2201714	0					
ANR	2201833	UnaryOperator	*		2201714	0					
ANR	2201834	Identifier	mode		2201714	1					
ANR	2201835	Identifier	O_CREAT		2201714	1					
ANR	2201836	IfStatement	if ( plus_flag )		2201714	8					
ANR	2201837	Condition	plus_flag	230:8:5751:5759	2201714	0	True				
ANR	2201838	Identifier	plus_flag		2201714	0					
ANR	2201839	CompoundStatement		36:20:666:666	2201714	1					
ANR	2201840	ExpressionStatement	* mode |= O_RDWR	231:1:5766:5781	2201714	0	True				
ANR	2201841	AssignmentExpression	* mode |= O_RDWR		2201714	0		|=			
ANR	2201842	UnaryOperationExpression	* mode		2201714	0					
ANR	2201843	UnaryOperator	*		2201714	0					
ANR	2201844	Identifier	mode		2201714	1					
ANR	2201845	Identifier	O_RDWR		2201714	1					
ANR	2201846	ElseStatement	else		2201714	0					
ANR	2201847	IfStatement	if ( mode_char == 'r' )		2201714	0					
ANR	2201848	Condition	mode_char == 'r'	232:16:5799:5814	2201714	0	True				
ANR	2201849	EqualityExpression	mode_char == 'r'		2201714	0		==			
ANR	2201850	Identifier	mode_char		2201714	0					
ANR	2201851	PrimaryExpression	'r'		2201714	1					
ANR	2201852	CompoundStatement		38:35:721:721	2201714	1					
ANR	2201853	ExpressionStatement	* mode |= O_RDONLY	233:1:5821:5838	2201714	0	True				
ANR	2201854	AssignmentExpression	* mode |= O_RDONLY		2201714	0		|=			
ANR	2201855	UnaryOperationExpression	* mode		2201714	0					
ANR	2201856	UnaryOperator	*		2201714	0					
ANR	2201857	Identifier	mode		2201714	1					
ANR	2201858	Identifier	O_RDONLY		2201714	1					
ANR	2201859	ElseStatement	else		2201714	0					
ANR	2201860	CompoundStatement		40:14:757:757	2201714	0					
ANR	2201861	ExpressionStatement	* mode |= O_WRONLY	235:1:5888:5905	2201714	0	True				
ANR	2201862	AssignmentExpression	* mode |= O_WRONLY		2201714	0		|=			
ANR	2201863	UnaryOperationExpression	* mode		2201714	0					
ANR	2201864	UnaryOperator	*		2201714	0					
ANR	2201865	Identifier	mode		2201714	1					
ANR	2201866	Identifier	O_WRONLY		2201714	1					
ANR	2201867	IfStatement	if ( mode_char == 'a' )		2201714	9					
ANR	2201868	Condition	mode_char == 'a'	238:8:5922:5937	2201714	0	True				
ANR	2201869	EqualityExpression	mode_char == 'a'		2201714	0		==			
ANR	2201870	Identifier	mode_char		2201714	0					
ANR	2201871	PrimaryExpression	'a'		2201714	1					
ANR	2201872	CompoundStatement		44:27:844:844	2201714	1					
ANR	2201873	ExpressionStatement	* mode |= O_APPEND	239:1:5944:5961	2201714	0	True				
ANR	2201874	AssignmentExpression	* mode |= O_APPEND		2201714	0		|=			
ANR	2201875	UnaryOperationExpression	* mode		2201714	0					
ANR	2201876	UnaryOperator	*		2201714	0					
ANR	2201877	Identifier	mode		2201714	1					
ANR	2201878	Identifier	O_APPEND		2201714	1					
ANR	2201879	ElseStatement	else		2201714	0					
ANR	2201880	IfStatement	if ( mode_char == 'w' )		2201714	0					
ANR	2201881	Condition	mode_char == 'w'	240:16:5979:5994	2201714	0	True				
ANR	2201882	EqualityExpression	mode_char == 'w'		2201714	0		==			
ANR	2201883	Identifier	mode_char		2201714	0					
ANR	2201884	PrimaryExpression	'w'		2201714	1					
ANR	2201885	CompoundStatement		46:35:901:901	2201714	1					
ANR	2201886	ExpressionStatement	* mode |= O_TRUNC	241:1:6001:6017	2201714	0	True				
ANR	2201887	AssignmentExpression	* mode |= O_TRUNC		2201714	0		|=			
ANR	2201888	UnaryOperationExpression	* mode		2201714	0					
ANR	2201889	UnaryOperator	*		2201714	0					
ANR	2201890	Identifier	mode		2201714	1					
ANR	2201891	Identifier	O_TRUNC		2201714	1					
ANR	2201892	CompoundStatement		55:1:1056:1081	2201714	10					
ANR	2201893	IdentifierDeclStatement	const char * f = & flags [ 1 ] ;	249:1:6153:6178	2201714	0	True				
ANR	2201894	IdentifierDecl	* f = & flags [ 1 ]		2201714	0					
ANR	2201895	IdentifierDeclType	const char *		2201714	0					
ANR	2201896	Identifier	f		2201714	1					
ANR	2201897	AssignmentExpression	* f = & flags [ 1 ]		2201714	2		=			
ANR	2201898	Identifier	f		2201714	0					
ANR	2201899	UnaryOperationExpression	& flags [ 1 ]		2201714	1					
ANR	2201900	UnaryOperator	&		2201714	0					
ANR	2201901	ArrayIndexing	flags [ 1 ]		2201714	1					
ANR	2201902	Identifier	flags		2201714	0					
ANR	2201903	PrimaryExpression	1		2201714	1					
ANR	2201904	WhileStatement	while ( * f )		2201714	1					
ANR	2201905	Condition	* f	255:8:6356:6357	2201714	0	True				
ANR	2201906	UnaryOperationExpression	* f		2201714	0					
ANR	2201907	UnaryOperator	*		2201714	0					
ANR	2201908	Identifier	f		2201714	1					
ANR	2201909	CompoundStatement		61:13:1264:1264	2201714	1					
ANR	2201910	SwitchStatement	switch ( * f )		2201714	0					
ANR	2201911	Condition	* f	256:13:6376:6377	2201714	0	True				
ANR	2201912	UnaryOperationExpression	* f		2201714	0					
ANR	2201913	UnaryOperator	*		2201714	0					
ANR	2201914	Identifier	f		2201714	1					
ANR	2201915	CompoundStatement		62:18:1284:1284	2201714	1					
ANR	2201916	Label	case '+' :	257:5:6388:6396	2201714	0	True				
ANR	2201917	BreakStatement	break ;	259:2:6431:6436	2201714	1	True				
ANR	2201918	Label	case 'b' :	261:5:6444:6452	2201714	2	True				
ANR	2201919	ExpressionStatement	* mode |= _O_BINARY	263:2:6473:6491	2201714	3	True				
ANR	2201920	AssignmentExpression	* mode |= _O_BINARY		2201714	0		|=			
ANR	2201921	UnaryOperationExpression	* mode		2201714	0					
ANR	2201922	UnaryOperator	*		2201714	0					
ANR	2201923	Identifier	mode		2201714	1					
ANR	2201924	Identifier	_O_BINARY		2201714	1					
ANR	2201925	BreakStatement	break ;	267:2:6573:6578	2201714	4	True				
ANR	2201926	Label	case 't' :	270:5:6601:6609	2201714	5	True				
ANR	2201927	ExpressionStatement	* mode |= _O_TEXT	271:2:6613:6629	2201714	6	True				
ANR	2201928	AssignmentExpression	* mode |= _O_TEXT		2201714	0		|=			
ANR	2201929	UnaryOperationExpression	* mode		2201714	0					
ANR	2201930	UnaryOperator	*		2201714	0					
ANR	2201931	Identifier	mode		2201714	1					
ANR	2201932	Identifier	_O_TEXT		2201714	1					
ANR	2201933	BreakStatement	break ;	272:2:6633:6638	2201714	7	True				
ANR	2201934	Label	case 'S' :	276:5:6674:6682	2201714	8	True				
ANR	2201935	ExpressionStatement	* mode |= _O_SEQUENTIAL	277:2:6686:6708	2201714	9	True				
ANR	2201936	AssignmentExpression	* mode |= _O_SEQUENTIAL		2201714	0		|=			
ANR	2201937	UnaryOperationExpression	* mode		2201714	0					
ANR	2201938	UnaryOperator	*		2201714	0					
ANR	2201939	Identifier	mode		2201714	1					
ANR	2201940	Identifier	_O_SEQUENTIAL		2201714	1					
ANR	2201941	BreakStatement	break ;	278:2:6712:6717	2201714	10	True				
ANR	2201942	Label	case 'R' :	282:5:6749:6757	2201714	11	True				
ANR	2201943	ExpressionStatement	* mode |= _O_RANDOM	283:2:6761:6779	2201714	12	True				
ANR	2201944	AssignmentExpression	* mode |= _O_RANDOM		2201714	0		|=			
ANR	2201945	UnaryOperationExpression	* mode		2201714	0					
ANR	2201946	UnaryOperator	*		2201714	0					
ANR	2201947	Identifier	mode		2201714	1					
ANR	2201948	Identifier	_O_RANDOM		2201714	1					
ANR	2201949	BreakStatement	break ;	284:2:6783:6788	2201714	13	True				
ANR	2201950	Label	case 'T' :	288:5:6825:6833	2201714	14	True				
ANR	2201951	ExpressionStatement	* mode |= _O_SHORT_LIVED	289:2:6837:6860	2201714	15	True				
ANR	2201952	AssignmentExpression	* mode |= _O_SHORT_LIVED		2201714	0		|=			
ANR	2201953	UnaryOperationExpression	* mode		2201714	0					
ANR	2201954	UnaryOperator	*		2201714	0					
ANR	2201955	Identifier	mode		2201714	1					
ANR	2201956	Identifier	_O_SHORT_LIVED		2201714	1					
ANR	2201957	BreakStatement	break ;	290:2:6864:6869	2201714	16	True				
ANR	2201958	Label	case 'D' :	294:5:6904:6912	2201714	17	True				
ANR	2201959	ExpressionStatement	* mode |= _O_TEMPORARY	295:2:6916:6937	2201714	18	True				
ANR	2201960	AssignmentExpression	* mode |= _O_TEMPORARY		2201714	0		|=			
ANR	2201961	UnaryOperationExpression	* mode		2201714	0					
ANR	2201962	UnaryOperator	*		2201714	0					
ANR	2201963	Identifier	mode		2201714	1					
ANR	2201964	Identifier	_O_TEMPORARY		2201714	1					
ANR	2201965	BreakStatement	break ;	296:2:6941:6946	2201714	19	True				
ANR	2201966	Label	case 'N' :	300:5:6981:6989	2201714	20	True				
ANR	2201967	ExpressionStatement	* mode |= _O_NOINHERIT	301:2:6993:7014	2201714	21	True				
ANR	2201968	AssignmentExpression	* mode |= _O_NOINHERIT		2201714	0		|=			
ANR	2201969	UnaryOperationExpression	* mode		2201714	0					
ANR	2201970	UnaryOperator	*		2201714	0					
ANR	2201971	Identifier	mode		2201714	1					
ANR	2201972	Identifier	_O_NOINHERIT		2201714	1					
ANR	2201973	BreakStatement	break ;	302:2:7018:7023	2201714	22	True				
ANR	2201974	Label	case 'n' :	305:5:7038:7046	2201714	23	True				
ANR	2201975	BreakStatement	break ;	307:2:7093:7098	2201714	24	True				
ANR	2201976	Label	case 'c' :	309:5:7106:7114	2201714	25	True				
ANR	2201977	IfStatement	"if ( strncmp ( f , ccsStr , ccsStrLen ) != 0 )"		2201714	26					
ANR	2201978	Condition	"strncmp ( f , ccsStr , ccsStrLen ) != 0"	311:6:7185:7218	2201714	0	True				
ANR	2201979	EqualityExpression	"strncmp ( f , ccsStr , ccsStrLen ) != 0"		2201714	0		!=			
ANR	2201980	CallExpression	"strncmp ( f , ccsStr , ccsStrLen )"		2201714	0					
ANR	2201981	Callee	strncmp		2201714	0					
ANR	2201982	Identifier	strncmp		2201714	0					
ANR	2201983	ArgumentList	f		2201714	1					
ANR	2201984	Argument	f		2201714	0					
ANR	2201985	Identifier	f		2201714	0					
ANR	2201986	Argument	ccsStr		2201714	1					
ANR	2201987	Identifier	ccsStr		2201714	0					
ANR	2201988	Argument	ccsStrLen		2201714	2					
ANR	2201989	Identifier	ccsStrLen		2201714	0					
ANR	2201990	PrimaryExpression	0		2201714	1					
ANR	2201991	CompoundStatement		117:43:2125:2125	2201714	1					
ANR	2201992	BreakStatement	break ;	314:6:7284:7289	2201714	0	True				
ANR	2201993	ElseStatement	else		2201714	0					
ANR	2201994	CompoundStatement		122:11:2268:2268	2201714	0					
ANR	2201995	ExpressionStatement	f += ccsStrLen	318:6:7405:7419	2201714	0	True				
ANR	2201996	AssignmentExpression	f += ccsStrLen		2201714	0		+=			
ANR	2201997	Identifier	f		2201714	0					
ANR	2201998	Identifier	ccsStrLen		2201714	1					
ANR	2201999	IfStatement	"if ( strncmp ( f , unicodeStr , unicodeStrLen ) == 0 )"		2201714	1					
ANR	2202000	Condition	"strncmp ( f , unicodeStr , unicodeStrLen ) == 0"	320:10:7447:7488	2201714	0	True				
ANR	2202001	EqualityExpression	"strncmp ( f , unicodeStr , unicodeStrLen ) == 0"		2201714	0		==			
ANR	2202002	CallExpression	"strncmp ( f , unicodeStr , unicodeStrLen )"		2201714	0					
ANR	2202003	Callee	strncmp		2201714	0					
ANR	2202004	Identifier	strncmp		2201714	0					
ANR	2202005	ArgumentList	f		2201714	1					
ANR	2202006	Argument	f		2201714	0					
ANR	2202007	Identifier	f		2201714	0					
ANR	2202008	Argument	unicodeStr		2201714	1					
ANR	2202009	Identifier	unicodeStr		2201714	0					
ANR	2202010	Argument	unicodeStrLen		2201714	2					
ANR	2202011	Identifier	unicodeStrLen		2201714	0					
ANR	2202012	PrimaryExpression	0		2201714	1					
ANR	2202013	CompoundStatement		126:55:2395:2395	2201714	1					
ANR	2202014	ExpressionStatement	f += unicodeStrLen - 1	322:3:7533:7555	2201714	0	True				
ANR	2202015	AssignmentExpression	f += unicodeStrLen - 1		2201714	0		+=			
ANR	2202016	Identifier	f		2201714	0					
ANR	2202017	AdditiveExpression	unicodeStrLen - 1		2201714	1		-			
ANR	2202018	Identifier	unicodeStrLen		2201714	0					
ANR	2202019	PrimaryExpression	1		2201714	1					
ANR	2202020	ExpressionStatement	* mode |= _O_WTEXT	323:3:7560:7577	2201714	1	True				
ANR	2202021	AssignmentExpression	* mode |= _O_WTEXT		2201714	0		|=			
ANR	2202022	UnaryOperationExpression	* mode		2201714	0					
ANR	2202023	UnaryOperator	*		2201714	0					
ANR	2202024	Identifier	mode		2201714	1					
ANR	2202025	Identifier	_O_WTEXT		2201714	1					
ANR	2202026	BreakStatement	break ;	324:3:7582:7587	2201714	2	True				
ANR	2202027	IfStatement	"if ( strncmp ( f , utf8Str , utf8StrLen ) == 0 )"		2201714	2					
ANR	2202028	Condition	"strncmp ( f , utf8Str , utf8StrLen ) == 0"	328:10:7629:7664	2201714	0	True				
ANR	2202029	EqualityExpression	"strncmp ( f , utf8Str , utf8StrLen ) == 0"		2201714	0		==			
ANR	2202030	CallExpression	"strncmp ( f , utf8Str , utf8StrLen )"		2201714	0					
ANR	2202031	Callee	strncmp		2201714	0					
ANR	2202032	Identifier	strncmp		2201714	0					
ANR	2202033	ArgumentList	f		2201714	1					
ANR	2202034	Argument	f		2201714	0					
ANR	2202035	Identifier	f		2201714	0					
ANR	2202036	Argument	utf8Str		2201714	1					
ANR	2202037	Identifier	utf8Str		2201714	0					
ANR	2202038	Argument	utf8StrLen		2201714	2					
ANR	2202039	Identifier	utf8StrLen		2201714	0					
ANR	2202040	PrimaryExpression	0		2201714	1					
ANR	2202041	CompoundStatement		134:49:2571:2571	2201714	1					
ANR	2202042	ExpressionStatement	f += utf8StrLen - 1	330:3:7706:7725	2201714	0	True				
ANR	2202043	AssignmentExpression	f += utf8StrLen - 1		2201714	0		+=			
ANR	2202044	Identifier	f		2201714	0					
ANR	2202045	AdditiveExpression	utf8StrLen - 1		2201714	1		-			
ANR	2202046	Identifier	utf8StrLen		2201714	0					
ANR	2202047	PrimaryExpression	1		2201714	1					
ANR	2202048	ExpressionStatement	* mode |= _O_UTF8	331:3:7730:7746	2201714	1	True				
ANR	2202049	AssignmentExpression	* mode |= _O_UTF8		2201714	0		|=			
ANR	2202050	UnaryOperationExpression	* mode		2201714	0					
ANR	2202051	UnaryOperator	*		2201714	0					
ANR	2202052	Identifier	mode		2201714	1					
ANR	2202053	Identifier	_O_UTF8		2201714	1					
ANR	2202054	BreakStatement	break ;	332:3:7751:7756	2201714	2	True				
ANR	2202055	IfStatement	"if ( strncmp ( f , utf16Str , utf16StrLen ) == 0 )"		2201714	3					
ANR	2202056	Condition	"strncmp ( f , utf16Str , utf16StrLen ) == 0"	336:10:7799:7836	2201714	0	True				
ANR	2202057	EqualityExpression	"strncmp ( f , utf16Str , utf16StrLen ) == 0"		2201714	0		==			
ANR	2202058	CallExpression	"strncmp ( f , utf16Str , utf16StrLen )"		2201714	0					
ANR	2202059	Callee	strncmp		2201714	0					
ANR	2202060	Identifier	strncmp		2201714	0					
ANR	2202061	ArgumentList	f		2201714	1					
ANR	2202062	Argument	f		2201714	0					
ANR	2202063	Identifier	f		2201714	0					
ANR	2202064	Argument	utf16Str		2201714	1					
ANR	2202065	Identifier	utf16Str		2201714	0					
ANR	2202066	Argument	utf16StrLen		2201714	2					
ANR	2202067	Identifier	utf16StrLen		2201714	0					
ANR	2202068	PrimaryExpression	0		2201714	1					
ANR	2202069	CompoundStatement		142:51:2743:2743	2201714	1					
ANR	2202070	ExpressionStatement	f += utf16StrLen - 1	338:3:7881:7901	2201714	0	True				
ANR	2202071	AssignmentExpression	f += utf16StrLen - 1		2201714	0		+=			
ANR	2202072	Identifier	f		2201714	0					
ANR	2202073	AdditiveExpression	utf16StrLen - 1		2201714	1		-			
ANR	2202074	Identifier	utf16StrLen		2201714	0					
ANR	2202075	PrimaryExpression	1		2201714	1					
ANR	2202076	ExpressionStatement	* mode |= _O_UTF16	339:3:7906:7923	2201714	1	True				
ANR	2202077	AssignmentExpression	* mode |= _O_UTF16		2201714	0		|=			
ANR	2202078	UnaryOperationExpression	* mode		2201714	0					
ANR	2202079	UnaryOperator	*		2201714	0					
ANR	2202080	Identifier	mode		2201714	1					
ANR	2202081	Identifier	_O_UTF16		2201714	1					
ANR	2202082	BreakStatement	break ;	340:3:7928:7933	2201714	2	True				
ANR	2202083	ExpressionStatement	errno = EINVAL	344:6:7996:8010	2201714	4	True				
ANR	2202084	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2202085	Identifier	errno		2201714	0					
ANR	2202086	Identifier	EINVAL		2201714	1					
ANR	2202087	ReturnStatement	return - 1 ;	345:6:8018:8027	2201714	5	True				
ANR	2202088	UnaryOperationExpression	- 1		2201714	0					
ANR	2202089	UnaryOperator	-		2201714	0					
ANR	2202090	PrimaryExpression	1		2201714	1					
ANR	2202091	ExpressionStatement	errno = EINVAL	348:2:8071:8085	2201714	27	True				
ANR	2202092	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2202093	Identifier	errno		2201714	0					
ANR	2202094	Identifier	EINVAL		2201714	1					
ANR	2202095	ReturnStatement	return - 1 ;	349:2:8089:8098	2201714	28	True				
ANR	2202096	UnaryOperationExpression	- 1		2201714	0					
ANR	2202097	UnaryOperator	-		2201714	0					
ANR	2202098	PrimaryExpression	1		2201714	1					
ANR	2202099	Label	"case ',' :"	352:5:8113:8121	2201714	29	True				
ANR	2202100	BreakStatement	break ;	354:2:8190:8195	2201714	30	True				
ANR	2202101	Label	default :	356:5:8203:8210	2201714	31	True				
ANR	2202102	Identifier	default		2201714	0					
ANR	2202103	ExpressionStatement	errno = EINVAL	357:2:8214:8228	2201714	32	True				
ANR	2202104	AssignmentExpression	errno = EINVAL		2201714	0		=			
ANR	2202105	Identifier	errno		2201714	0					
ANR	2202106	Identifier	EINVAL		2201714	1					
ANR	2202107	ReturnStatement	return - 1 ;	358:2:8232:8241	2201714	33	True				
ANR	2202108	UnaryOperationExpression	- 1		2201714	0					
ANR	2202109	UnaryOperator	-		2201714	0					
ANR	2202110	PrimaryExpression	1		2201714	1					
ANR	2202111	ExpressionStatement	++ f	361:1:8252:8255	2201714	1	True				
ANR	2202112	UnaryExpression	++ f		2201714	0					
ANR	2202113	IncDec	++		2201714	0					
ANR	2202114	Identifier	f		2201714	1					
ANR	2202115	ReturnStatement	return 0 ;	366:4:8278:8286	2201714	11	True				
ANR	2202116	PrimaryExpression	0		2201714	0					
ANR	2202117	ReturnType	int		2201714	1					
ANR	2202118	Identifier	stdio_mode_to_open_flag		2201714	2					
ANR	2202119	ParameterList	"const char * flags , int * mode , int create_file"		2201714	3					
ANR	2202120	Parameter	const char * flags	194:28:5049:5065	2201714	0	True				
ANR	2202121	ParameterType	const char *		2201714	0					
ANR	2202122	Identifier	flags		2201714	1					
ANR	2202123	Parameter	int * mode	194:47:5068:5076	2201714	1	True				
ANR	2202124	ParameterType	int *		2201714	0					
ANR	2202125	Identifier	mode		2201714	1					
ANR	2202126	Parameter	int create_file	194:58:5079:5093	2201714	2	True				
ANR	2202127	ParameterType	int		2201714	0					
ANR	2202128	Identifier	create_file		2201714	1					
ANR	2202129	CFGEntryNode	ENTRY		2201714		True				
ANR	2202130	CFGExitNode	EXIT		2201714		True				
ANR	2202131	Symbol	_O_UTF8		2201714						
ANR	2202132	Symbol	mode_char		2201714						
ANR	2202133	Symbol	O_CREAT		2201714						
ANR	2202134	Symbol	ccsStr		2201714						
ANR	2202135	Symbol	flags		2201714						
ANR	2202136	Symbol	_O_BINARY		2201714						
ANR	2202137	Symbol	mode		2201714						
ANR	2202138	Symbol	create_file		2201714						
ANR	2202139	Symbol	strncmp		2201714						
ANR	2202140	Symbol	O_RDWR		2201714						
ANR	2202141	Symbol	utf16Str		2201714						
ANR	2202142	Symbol	utf8StrLen		2201714						
ANR	2202143	Symbol	_O_TEXT		2201714						
ANR	2202144	Symbol	plus_flag		2201714						
ANR	2202145	Symbol	* flags		2201714						
ANR	2202146	Symbol	errno		2201714						
ANR	2202147	Symbol	unicodeStr		2201714						
ANR	2202148	Symbol	utf8Str		2201714						
ANR	2202149	Symbol	_O_NOINHERIT		2201714						
ANR	2202150	Symbol	_O_RANDOM		2201714						
ANR	2202151	Symbol	utf16StrLen		2201714						
ANR	2202152	Symbol	f		2201714						
ANR	2202153	Symbol	ccsStrLen		2201714						
ANR	2202154	Symbol	_O_SHORT_LIVED		2201714						
ANR	2202155	Symbol	_O_TEMPORARY		2201714						
ANR	2202156	Symbol	O_APPEND		2201714						
ANR	2202157	Symbol	EINVAL		2201714						
ANR	2202158	Symbol	* f		2201714						
ANR	2202159	Symbol	_O_UTF16		2201714						
ANR	2202160	Symbol	O_TRUNC		2201714						
ANR	2202161	Symbol	O_RDONLY		2201714						
ANR	2202162	Symbol	* mode		2201714						
ANR	2202163	Symbol	unicodeStrLen		2201714						
ANR	2202164	Symbol	O_WRONLY		2201714						
ANR	2202165	Symbol	_O_WTEXT		2201714						
ANR	2202166	Symbol	_O_SEQUENTIAL		2201714						
ANR	2202167	Function	fix_stdio_fdopen_mode_on_windows	375:0:8427:10190							
ANR	2202168	FunctionDef	fix_stdio_fdopen_mode_on_windows (const char * flags)		2202167	0					
ANR	2202169	CompoundStatement		376:0:8485:10190	2202167	0					
ANR	2202170	IdentifierDeclStatement	const char * from ;	377:4:8491:8507	2202167	0	True				
ANR	2202171	IdentifierDecl	* from		2202167	0					
ANR	2202172	IdentifierDeclType	const char *		2202167	0					
ANR	2202173	Identifier	from		2202167	1					
ANR	2202174	IdentifierDeclStatement	char * new_flags ;	378:4:8513:8528	2202167	1	True				
ANR	2202175	IdentifierDecl	* new_flags		2202167	0					
ANR	2202176	IdentifierDeclType	char *		2202167	0					
ANR	2202177	Identifier	new_flags		2202167	1					
ANR	2202178	IdentifierDeclStatement	char * to ;	379:4:8534:8542	2202167	2	True				
ANR	2202179	IdentifierDecl	* to		2202167	0					
ANR	2202180	IdentifierDeclType	char *		2202167	0					
ANR	2202181	Identifier	to		2202167	1					
ANR	2202182	IfStatement	if ( flags == NULL )		2202167	3					
ANR	2202183	Condition	flags == NULL	381:8:8553:8565	2202167	0	True				
ANR	2202184	EqualityExpression	flags == NULL		2202167	0		==			
ANR	2202185	Identifier	flags		2202167	0					
ANR	2202186	Identifier	NULL		2202167	1					
ANR	2202187	CompoundStatement		6:24:83:83	2202167	1					
ANR	2202188	ExpressionStatement	errno = EINVAL	382:1:8572:8586	2202167	0	True				
ANR	2202189	AssignmentExpression	errno = EINVAL		2202167	0		=			
ANR	2202190	Identifier	errno		2202167	0					
ANR	2202191	Identifier	EINVAL		2202167	1					
ANR	2202192	ReturnStatement	return NULL ;	383:1:8589:8600	2202167	1	True				
ANR	2202193	Identifier	NULL		2202167	0					
ANR	2202194	ExpressionStatement	new_flags = malloc ( strlen ( flags ) + 1 )	386:4:8613:8650	2202167	4	True				
ANR	2202195	AssignmentExpression	new_flags = malloc ( strlen ( flags ) + 1 )		2202167	0		=			
ANR	2202196	Identifier	new_flags		2202167	0					
ANR	2202197	CallExpression	malloc ( strlen ( flags ) + 1 )		2202167	1					
ANR	2202198	Callee	malloc		2202167	0					
ANR	2202199	Identifier	malloc		2202167	0					
ANR	2202200	ArgumentList	strlen ( flags ) + 1		2202167	1					
ANR	2202201	Argument	strlen ( flags ) + 1		2202167	0					
ANR	2202202	AdditiveExpression	strlen ( flags ) + 1		2202167	0		+			
ANR	2202203	CallExpression	strlen ( flags )		2202167	0					
ANR	2202204	Callee	strlen		2202167	0					
ANR	2202205	Identifier	strlen		2202167	0					
ANR	2202206	ArgumentList	flags		2202167	1					
ANR	2202207	Argument	flags		2202167	0					
ANR	2202208	Identifier	flags		2202167	0					
ANR	2202209	PrimaryExpression	1		2202167	1					
ANR	2202210	IfStatement	if ( new_flags == NULL )		2202167	5					
ANR	2202211	Condition	new_flags == NULL	387:8:8660:8676	2202167	0	True				
ANR	2202212	EqualityExpression	new_flags == NULL		2202167	0		==			
ANR	2202213	Identifier	new_flags		2202167	0					
ANR	2202214	Identifier	NULL		2202167	1					
ANR	2202215	CompoundStatement		12:28:194:194	2202167	1					
ANR	2202216	ReturnStatement	return NULL ;	388:1:8683:8694	2202167	0	True				
ANR	2202217	Identifier	NULL		2202167	0					
ANR	2202218	ExpressionStatement	from = flags	391:4:8707:8719	2202167	6	True				
ANR	2202219	AssignmentExpression	from = flags		2202167	0		=			
ANR	2202220	Identifier	from		2202167	0					
ANR	2202221	Identifier	flags		2202167	1					
ANR	2202222	ExpressionStatement	to = new_flags	392:4:8725:8739	2202167	7	True				
ANR	2202223	AssignmentExpression	to = new_flags		2202167	0		=			
ANR	2202224	Identifier	to		2202167	0					
ANR	2202225	Identifier	new_flags		2202167	1					
ANR	2202226	DoStatement	do		2202167	8					
ANR	2202227	CompoundStatement		19:8:264:264	2202167	0					
ANR	2202228	SwitchStatement	switch ( * from )		2202167	0					
ANR	2202229	Condition	* from	395:9:8761:8765	2202167	0	True				
ANR	2202230	UnaryOperationExpression	* from		2202167	0					
ANR	2202231	UnaryOperator	*		2202167	0					
ANR	2202232	Identifier	from		2202167	1					
ANR	2202233	CompoundStatement		20:17:283:283	2202167	1					
ANR	2202234	Label	case 'N' :	396:1:8772:8780	2202167	0	True				
ANR	2202235	ExpressionStatement	++ from	398:5:8834:8840	2202167	1	True				
ANR	2202236	UnaryExpression	++ from		2202167	0					
ANR	2202237	IncDec	++		2202167	0					
ANR	2202238	Identifier	from		2202167	1					
ANR	2202239	BreakStatement	break ;	399:5:8847:8852	2202167	2	True				
ANR	2202240	Label	case 'c' :	401:1:8856:8864	2202167	3	True				
ANR	2202241	IfStatement	"if ( strncmp ( from , ccsStr , ccsStrLen ) != 0 )"		2202167	4					
ANR	2202242	Condition	"strncmp ( from , ccsStr , ccsStrLen ) != 0"	403:9:8938:8974	2202167	0	True				
ANR	2202243	EqualityExpression	"strncmp ( from , ccsStr , ccsStrLen ) != 0"		2202167	0		!=			
ANR	2202244	CallExpression	"strncmp ( from , ccsStr , ccsStrLen )"		2202167	0					
ANR	2202245	Callee	strncmp		2202167	0					
ANR	2202246	Identifier	strncmp		2202167	0					
ANR	2202247	ArgumentList	from		2202167	1					
ANR	2202248	Argument	from		2202167	0					
ANR	2202249	Identifier	from		2202167	0					
ANR	2202250	Argument	ccsStr		2202167	1					
ANR	2202251	Identifier	ccsStr		2202167	0					
ANR	2202252	Argument	ccsStrLen		2202167	2					
ANR	2202253	Identifier	ccsStrLen		2202167	0					
ANR	2202254	PrimaryExpression	0		2202167	1					
ANR	2202255	CompoundStatement		28:49:492:492	2202167	1					
ANR	2202256	ExpressionStatement	* to ++ = * from ++	406:2:9032:9047	2202167	0	True				
ANR	2202257	AssignmentExpression	* to ++ = * from ++		2202167	0		=			
ANR	2202258	UnaryOperationExpression	* to ++		2202167	0					
ANR	2202259	UnaryOperator	*		2202167	0					
ANR	2202260	PostIncDecOperationExpression	to ++		2202167	1					
ANR	2202261	Identifier	to		2202167	0					
ANR	2202262	IncDec	++		2202167	1					
ANR	2202263	UnaryOperationExpression	* from ++		2202167	1					
ANR	2202264	UnaryOperator	*		2202167	0					
ANR	2202265	PostIncDecOperationExpression	from ++		2202167	1					
ANR	2202266	Identifier	from		2202167	0					
ANR	2202267	IncDec	++		2202167	1					
ANR	2202268	BreakStatement	break ;	407:2:9051:9056	2202167	1	True				
ANR	2202269	ElseStatement	else		2202167	0					
ANR	2202270	CompoundStatement		34:14:649:649	2202167	0					
ANR	2202271	ExpressionStatement	"memcpy ( to , ccsStr , ccsStrLen )"	411:2:9167:9196	2202167	0	True				
ANR	2202272	CallExpression	"memcpy ( to , ccsStr , ccsStrLen )"		2202167	0					
ANR	2202273	Callee	memcpy		2202167	0					
ANR	2202274	Identifier	memcpy		2202167	0					
ANR	2202275	ArgumentList	to		2202167	1					
ANR	2202276	Argument	to		2202167	0					
ANR	2202277	Identifier	to		2202167	0					
ANR	2202278	Argument	ccsStr		2202167	1					
ANR	2202279	Identifier	ccsStr		2202167	0					
ANR	2202280	Argument	ccsStrLen		2202167	2					
ANR	2202281	Identifier	ccsStrLen		2202167	0					
ANR	2202282	ExpressionStatement	from += ccsStrLen	412:2:9200:9217	2202167	1	True				
ANR	2202283	AssignmentExpression	from += ccsStrLen		2202167	0		+=			
ANR	2202284	Identifier	from		2202167	0					
ANR	2202285	Identifier	ccsStrLen		2202167	1					
ANR	2202286	ExpressionStatement	to += ccsStrLen	413:2:9221:9236	2202167	2	True				
ANR	2202287	AssignmentExpression	to += ccsStrLen		2202167	0		+=			
ANR	2202288	Identifier	to		2202167	0					
ANR	2202289	Identifier	ccsStrLen		2202167	1					
ANR	2202290	IfStatement	"if ( strncmp ( from , unicodeStr , unicodeStrLen ) == 0 )"		2202167	3					
ANR	2202291	Condition	"strncmp ( from , unicodeStr , unicodeStrLen ) == 0"	415:6:9260:9304	2202167	0	True				
ANR	2202292	EqualityExpression	"strncmp ( from , unicodeStr , unicodeStrLen ) == 0"		2202167	0		==			
ANR	2202293	CallExpression	"strncmp ( from , unicodeStr , unicodeStrLen )"		2202167	0					
ANR	2202294	Callee	strncmp		2202167	0					
ANR	2202295	Identifier	strncmp		2202167	0					
ANR	2202296	ArgumentList	from		2202167	1					
ANR	2202297	Argument	from		2202167	0					
ANR	2202298	Identifier	from		2202167	0					
ANR	2202299	Argument	unicodeStr		2202167	1					
ANR	2202300	Identifier	unicodeStr		2202167	0					
ANR	2202301	Argument	unicodeStrLen		2202167	2					
ANR	2202302	Identifier	unicodeStrLen		2202167	0					
ANR	2202303	PrimaryExpression	0		2202167	1					
ANR	2202304	CompoundStatement		40:54:822:822	2202167	1					
ANR	2202305	ExpressionStatement	"memcpy ( to , unicodeStr , unicodeStrLen )"	417:6:9355:9392	2202167	0	True				
ANR	2202306	CallExpression	"memcpy ( to , unicodeStr , unicodeStrLen )"		2202167	0					
ANR	2202307	Callee	memcpy		2202167	0					
ANR	2202308	Identifier	memcpy		2202167	0					
ANR	2202309	ArgumentList	to		2202167	1					
ANR	2202310	Argument	to		2202167	0					
ANR	2202311	Identifier	to		2202167	0					
ANR	2202312	Argument	unicodeStr		2202167	1					
ANR	2202313	Identifier	unicodeStr		2202167	0					
ANR	2202314	Argument	unicodeStrLen		2202167	2					
ANR	2202315	Identifier	unicodeStrLen		2202167	0					
ANR	2202316	ExpressionStatement	from += unicodeStrLen	418:6:9400:9421	2202167	1	True				
ANR	2202317	AssignmentExpression	from += unicodeStrLen		2202167	0		+=			
ANR	2202318	Identifier	from		2202167	0					
ANR	2202319	Identifier	unicodeStrLen		2202167	1					
ANR	2202320	ExpressionStatement	to += unicodeStrLen	419:6:9429:9448	2202167	2	True				
ANR	2202321	AssignmentExpression	to += unicodeStrLen		2202167	0		+=			
ANR	2202322	Identifier	to		2202167	0					
ANR	2202323	Identifier	unicodeStrLen		2202167	1					
ANR	2202324	IfStatement	"if ( strncmp ( from , utf8Str , utf8StrLen ) == 0 )"		2202167	4					
ANR	2202325	Condition	"strncmp ( from , utf8Str , utf8StrLen ) == 0"	423:6:9482:9520	2202167	0	True				
ANR	2202326	EqualityExpression	"strncmp ( from , utf8Str , utf8StrLen ) == 0"		2202167	0		==			
ANR	2202327	CallExpression	"strncmp ( from , utf8Str , utf8StrLen )"		2202167	0					
ANR	2202328	Callee	strncmp		2202167	0					
ANR	2202329	Identifier	strncmp		2202167	0					
ANR	2202330	ArgumentList	from		2202167	1					
ANR	2202331	Argument	from		2202167	0					
ANR	2202332	Identifier	from		2202167	0					
ANR	2202333	Argument	utf8Str		2202167	1					
ANR	2202334	Identifier	utf8Str		2202167	0					
ANR	2202335	Argument	utf8StrLen		2202167	2					
ANR	2202336	Identifier	utf8StrLen		2202167	0					
ANR	2202337	PrimaryExpression	0		2202167	1					
ANR	2202338	CompoundStatement		48:48:1038:1038	2202167	1					
ANR	2202339	ExpressionStatement	"memcpy ( to , utf8Str , utf8StrLen )"	425:6:9568:9599	2202167	0	True				
ANR	2202340	CallExpression	"memcpy ( to , utf8Str , utf8StrLen )"		2202167	0					
ANR	2202341	Callee	memcpy		2202167	0					
ANR	2202342	Identifier	memcpy		2202167	0					
ANR	2202343	ArgumentList	to		2202167	1					
ANR	2202344	Argument	to		2202167	0					
ANR	2202345	Identifier	to		2202167	0					
ANR	2202346	Argument	utf8Str		2202167	1					
ANR	2202347	Identifier	utf8Str		2202167	0					
ANR	2202348	Argument	utf8StrLen		2202167	2					
ANR	2202349	Identifier	utf8StrLen		2202167	0					
ANR	2202350	ExpressionStatement	from += utf8StrLen	426:6:9607:9625	2202167	1	True				
ANR	2202351	AssignmentExpression	from += utf8StrLen		2202167	0		+=			
ANR	2202352	Identifier	from		2202167	0					
ANR	2202353	Identifier	utf8StrLen		2202167	1					
ANR	2202354	ExpressionStatement	to += utf8StrLen	427:6:9633:9649	2202167	2	True				
ANR	2202355	AssignmentExpression	to += utf8StrLen		2202167	0		+=			
ANR	2202356	Identifier	to		2202167	0					
ANR	2202357	Identifier	utf8StrLen		2202167	1					
ANR	2202358	BreakStatement	break ;	428:6:9657:9662	2202167	3	True				
ANR	2202359	IfStatement	"if ( strncmp ( from , utf16Str , utf16StrLen ) == 0 )"		2202167	5					
ANR	2202360	Condition	"strncmp ( from , utf16Str , utf16StrLen ) == 0"	432:6:9697:9737	2202167	0	True				
ANR	2202361	EqualityExpression	"strncmp ( from , utf16Str , utf16StrLen ) == 0"		2202167	0		==			
ANR	2202362	CallExpression	"strncmp ( from , utf16Str , utf16StrLen )"		2202167	0					
ANR	2202363	Callee	strncmp		2202167	0					
ANR	2202364	Identifier	strncmp		2202167	0					
ANR	2202365	ArgumentList	from		2202167	1					
ANR	2202366	Argument	from		2202167	0					
ANR	2202367	Identifier	from		2202167	0					
ANR	2202368	Argument	utf16Str		2202167	1					
ANR	2202369	Identifier	utf16Str		2202167	0					
ANR	2202370	Argument	utf16StrLen		2202167	2					
ANR	2202371	Identifier	utf16StrLen		2202167	0					
ANR	2202372	PrimaryExpression	0		2202167	1					
ANR	2202373	CompoundStatement		57:50:1255:1255	2202167	1					
ANR	2202374	ExpressionStatement	"memcpy ( to , utf16Str , utf16StrLen )"	434:6:9788:9821	2202167	0	True				
ANR	2202375	CallExpression	"memcpy ( to , utf16Str , utf16StrLen )"		2202167	0					
ANR	2202376	Callee	memcpy		2202167	0					
ANR	2202377	Identifier	memcpy		2202167	0					
ANR	2202378	ArgumentList	to		2202167	1					
ANR	2202379	Argument	to		2202167	0					
ANR	2202380	Identifier	to		2202167	0					
ANR	2202381	Argument	utf16Str		2202167	1					
ANR	2202382	Identifier	utf16Str		2202167	0					
ANR	2202383	Argument	utf16StrLen		2202167	2					
ANR	2202384	Identifier	utf16StrLen		2202167	0					
ANR	2202385	ExpressionStatement	from += utf16StrLen	435:6:9829:9848	2202167	1	True				
ANR	2202386	AssignmentExpression	from += utf16StrLen		2202167	0		+=			
ANR	2202387	Identifier	from		2202167	0					
ANR	2202388	Identifier	utf16StrLen		2202167	1					
ANR	2202389	ExpressionStatement	to += utf16StrLen	436:6:9856:9873	2202167	2	True				
ANR	2202390	AssignmentExpression	to += utf16StrLen		2202167	0		+=			
ANR	2202391	Identifier	to		2202167	0					
ANR	2202392	Identifier	utf16StrLen		2202167	1					
ANR	2202393	BreakStatement	break ;	437:6:9881:9886	2202167	3	True				
ANR	2202394	ExpressionStatement	errno = EINVAL	441:2:9937:9951	2202167	6	True				
ANR	2202395	AssignmentExpression	errno = EINVAL		2202167	0		=			
ANR	2202396	Identifier	errno		2202167	0					
ANR	2202397	Identifier	EINVAL		2202167	1					
ANR	2202398	ExpressionStatement	free ( new_flags )	442:2:9955:9970	2202167	7	True				
ANR	2202399	CallExpression	free ( new_flags )		2202167	0					
ANR	2202400	Callee	free		2202167	0					
ANR	2202401	Identifier	free		2202167	0					
ANR	2202402	ArgumentList	new_flags		2202167	1					
ANR	2202403	Argument	new_flags		2202167	0					
ANR	2202404	Identifier	new_flags		2202167	0					
ANR	2202405	ReturnStatement	return NULL ;	443:2:9974:9985	2202167	8	True				
ANR	2202406	Identifier	NULL		2202167	0					
ANR	2202407	Label	default :	446:1:10002:10009	2202167	5	True				
ANR	2202408	Identifier	default		2202167	0					
ANR	2202409	ExpressionStatement	* to ++ = * from ++	448:5:10053:10068	2202167	6	True				
ANR	2202410	AssignmentExpression	* to ++ = * from ++		2202167	0		=			
ANR	2202411	UnaryOperationExpression	* to ++		2202167	0					
ANR	2202412	UnaryOperator	*		2202167	0					
ANR	2202413	PostIncDecOperationExpression	to ++		2202167	1					
ANR	2202414	Identifier	to		2202167	0					
ANR	2202415	IncDec	++		2202167	1					
ANR	2202416	UnaryOperationExpression	* from ++		2202167	1					
ANR	2202417	UnaryOperator	*		2202167	0					
ANR	2202418	PostIncDecOperationExpression	from ++		2202167	1					
ANR	2202419	Identifier	from		2202167	0					
ANR	2202420	IncDec	++		2202167	1					
ANR	2202421	BreakStatement	break ;	449:5:10075:10080	2202167	7	True				
ANR	2202422	Condition	* from	451:14:10099:10103	2202167	1	True				
ANR	2202423	UnaryOperationExpression	* from		2202167	0					
ANR	2202424	UnaryOperator	*		2202167	0					
ANR	2202425	Identifier	from		2202167	1					
ANR	2202426	ExpressionStatement	* to = 0	454:4:10158:10165	2202167	9	True				
ANR	2202427	AssignmentExpression	* to = 0		2202167	0		=			
ANR	2202428	UnaryOperationExpression	* to		2202167	0					
ANR	2202429	UnaryOperator	*		2202167	0					
ANR	2202430	Identifier	to		2202167	1					
ANR	2202431	PrimaryExpression	0		2202167	1					
ANR	2202432	ReturnStatement	return new_flags ;	456:4:10172:10188	2202167	10	True				
ANR	2202433	Identifier	new_flags		2202167	0					
ANR	2202434	ReturnType	char *		2202167	1					
ANR	2202435	Identifier	fix_stdio_fdopen_mode_on_windows		2202167	2					
ANR	2202436	ParameterList	const char * flags		2202167	3					
ANR	2202437	Parameter	const char * flags	375:39:8466:8482	2202167	0	True				
ANR	2202438	ParameterType	const char *		2202167	0					
ANR	2202439	Identifier	flags		2202167	1					
ANR	2202440	CFGEntryNode	ENTRY		2202167		True				
ANR	2202441	CFGExitNode	EXIT		2202167		True				
ANR	2202442	Symbol	malloc		2202167						
ANR	2202443	Symbol	errno		2202167						
ANR	2202444	Symbol	* to		2202167						
ANR	2202445	Symbol	NULL		2202167						
ANR	2202446	Symbol	unicodeStr		2202167						
ANR	2202447	Symbol	utf8Str		2202167						
ANR	2202448	Symbol	utf16StrLen		2202167						
ANR	2202449	Symbol	ccsStrLen		2202167						
ANR	2202450	Symbol	ccsStr		2202167						
ANR	2202451	Symbol	flags		2202167						
ANR	2202452	Symbol	EINVAL		2202167						
ANR	2202453	Symbol	strlen		2202167						
ANR	2202454	Symbol	strncmp		2202167						
ANR	2202455	Symbol	* from ++		2202167						
ANR	2202456	Symbol	utf16Str		2202167						
ANR	2202457	Symbol	utf8StrLen		2202167						
ANR	2202458	Symbol	new_flags		2202167						
ANR	2202459	Symbol	* to ++		2202167						
ANR	2202460	Symbol	from		2202167						
ANR	2202461	Symbol	unicodeStrLen		2202167						
ANR	2202462	Symbol	to		2202167						
ANR	2202463	Symbol	* from		2202167						
ANR	2202464	Function	safe_fdopen	465:0:10326:10779							
ANR	2202465	FunctionDef	"safe_fdopen (int fd , const char * flags)"		2202464	0					
ANR	2202466	CompoundStatement		466:0:10371:10779	2202464	0					
ANR	2202467	IdentifierDeclStatement	FILE * F ;	467:4:10377:10384	2202464	0	True				
ANR	2202468	IdentifierDecl	* F		2202464	0					
ANR	2202469	IdentifierDeclType	FILE *		2202464	0					
ANR	2202470	Identifier	F		2202464	1					
ANR	2202471	IdentifierDeclStatement	char * new_flags ;	469:4:10403:10418	2202464	1	True				
ANR	2202472	IdentifierDecl	* new_flags		2202464	0					
ANR	2202473	IdentifierDeclType	char *		2202464	0					
ANR	2202474	Identifier	new_flags		2202464	1					
ANR	2202475	IfStatement	if ( fd == - 1 )		2202464	2					
ANR	2202476	Condition	fd == - 1	472:8:10436:10443	2202464	0	True				
ANR	2202477	EqualityExpression	fd == - 1		2202464	0		==			
ANR	2202478	Identifier	fd		2202464	0					
ANR	2202479	UnaryOperationExpression	- 1		2202464	1					
ANR	2202480	UnaryOperator	-		2202464	0					
ANR	2202481	PrimaryExpression	1		2202464	1					
ANR	2202482	CompoundStatement		7:19:75:75	2202464	1					
ANR	2202483	ReturnStatement	return NULL ;	473:1:10450:10461	2202464	0	True				
ANR	2202484	Identifier	NULL		2202464	0					
ANR	2202485	ExpressionStatement	new_flags = fix_stdio_fdopen_mode_on_windows ( flags )	477:4:10487:10538	2202464	3	True				
ANR	2202486	AssignmentExpression	new_flags = fix_stdio_fdopen_mode_on_windows ( flags )		2202464	0		=			
ANR	2202487	Identifier	new_flags		2202464	0					
ANR	2202488	CallExpression	fix_stdio_fdopen_mode_on_windows ( flags )		2202464	1					
ANR	2202489	Callee	fix_stdio_fdopen_mode_on_windows		2202464	0					
ANR	2202490	Identifier	fix_stdio_fdopen_mode_on_windows		2202464	0					
ANR	2202491	ArgumentList	flags		2202464	1					
ANR	2202492	Argument	flags		2202464	0					
ANR	2202493	Identifier	flags		2202464	0					
ANR	2202494	IfStatement	if ( new_flags == NULL )		2202464	4					
ANR	2202495	Condition	new_flags == NULL	478:8:10548:10564	2202464	0	True				
ANR	2202496	EqualityExpression	new_flags == NULL		2202464	0		==			
ANR	2202497	Identifier	new_flags		2202464	0					
ANR	2202498	Identifier	NULL		2202464	1					
ANR	2202499	CompoundStatement		13:28:196:196	2202464	1					
ANR	2202500	ExpressionStatement	( void ) close ( fd )	479:1:10571:10586	2202464	0	True				
ANR	2202501	CastExpression	( void ) close ( fd )		2202464	0					
ANR	2202502	CastTarget	void		2202464	0					
ANR	2202503	CallExpression	close ( fd )		2202464	1					
ANR	2202504	Callee	close		2202464	0					
ANR	2202505	Identifier	close		2202464	0					
ANR	2202506	ArgumentList	fd		2202464	1					
ANR	2202507	Argument	fd		2202464	0					
ANR	2202508	Identifier	fd		2202464	0					
ANR	2202509	ExpressionStatement	errno = EINVAL	480:1:10589:10603	2202464	1	True				
ANR	2202510	AssignmentExpression	errno = EINVAL		2202464	0		=			
ANR	2202511	Identifier	errno		2202464	0					
ANR	2202512	Identifier	EINVAL		2202464	1					
ANR	2202513	ReturnStatement	return NULL ;	481:1:10606:10617	2202464	2	True				
ANR	2202514	Identifier	NULL		2202464	0					
ANR	2202515	ExpressionStatement	flags = new_flags	483:4:10629:10646	2202464	5	True				
ANR	2202516	AssignmentExpression	flags = new_flags		2202464	0		=			
ANR	2202517	Identifier	flags		2202464	0					
ANR	2202518	Identifier	new_flags		2202464	1					
ANR	2202519	ExpressionStatement	"F = fdopen ( fd , flags )"	486:4:10660:10681	2202464	6	True				
ANR	2202520	AssignmentExpression	"F = fdopen ( fd , flags )"		2202464	0		=			
ANR	2202521	Identifier	F		2202464	0					
ANR	2202522	CallExpression	"fdopen ( fd , flags )"		2202464	1					
ANR	2202523	Callee	fdopen		2202464	0					
ANR	2202524	Identifier	fdopen		2202464	0					
ANR	2202525	ArgumentList	fd		2202464	1					
ANR	2202526	Argument	fd		2202464	0					
ANR	2202527	Identifier	fd		2202464	0					
ANR	2202528	Argument	flags		2202464	1					
ANR	2202529	Identifier	flags		2202464	0					
ANR	2202530	IfStatement	if ( ! F )		2202464	7					
ANR	2202531	Condition	! F	487:8:10691:10692	2202464	0	True				
ANR	2202532	UnaryOperationExpression	! F		2202464	0					
ANR	2202533	UnaryOperator	!		2202464	0					
ANR	2202534	Identifier	F		2202464	1					
ANR	2202535	CompoundStatement		22:13:324:324	2202464	1					
ANR	2202536	ExpressionStatement	( void ) close ( fd )	488:1:10699:10714	2202464	0	True				
ANR	2202537	CastExpression	( void ) close ( fd )		2202464	0					
ANR	2202538	CastTarget	void		2202464	0					
ANR	2202539	CallExpression	close ( fd )		2202464	1					
ANR	2202540	Callee	close		2202464	0					
ANR	2202541	Identifier	close		2202464	0					
ANR	2202542	ArgumentList	fd		2202464	1					
ANR	2202543	Argument	fd		2202464	0					
ANR	2202544	Identifier	fd		2202464	0					
ANR	2202545	ExpressionStatement	free ( new_flags )	492:4:10740:10755	2202464	8	True				
ANR	2202546	CallExpression	free ( new_flags )		2202464	0					
ANR	2202547	Callee	free		2202464	0					
ANR	2202548	Identifier	free		2202464	0					
ANR	2202549	ArgumentList	new_flags		2202464	1					
ANR	2202550	Argument	new_flags		2202464	0					
ANR	2202551	Identifier	new_flags		2202464	0					
ANR	2202552	ReturnStatement	return F ;	495:4:10769:10777	2202464	9	True				
ANR	2202553	Identifier	F		2202464	0					
ANR	2202554	ReturnType	FILE *		2202464	1					
ANR	2202555	Identifier	safe_fdopen		2202464	2					
ANR	2202556	ParameterList	"int fd , const char * flags"		2202464	3					
ANR	2202557	Parameter	int fd	465:18:10344:10349	2202464	0	True				
ANR	2202558	ParameterType	int		2202464	0					
ANR	2202559	Identifier	fd		2202464	1					
ANR	2202560	Parameter	const char * flags	465:26:10352:10368	2202464	1	True				
ANR	2202561	ParameterType	const char *		2202464	0					
ANR	2202562	Identifier	flags		2202464	1					
ANR	2202563	CFGEntryNode	ENTRY		2202464		True				
ANR	2202564	CFGExitNode	EXIT		2202464		True				
ANR	2202565	Symbol	EINVAL		2202464						
ANR	2202566	Symbol	fix_stdio_fdopen_mode_on_windows		2202464						
ANR	2202567	Symbol	errno		2202464						
ANR	2202568	Symbol	NULL		2202464						
ANR	2202569	Symbol	F		2202464						
ANR	2202570	Symbol	flags		2202464						
ANR	2202571	Symbol	new_flags		2202464						
ANR	2202572	Symbol	fdopen		2202464						
ANR	2202573	Symbol	fd		2202464						
ANR	2202574	Function	safe_fopen_wrapper	509:0:11054:11509							
ANR	2202575	FunctionDef	"safe_fopen_wrapper (const char * fn , const char * flags , mode_t mode)"		2202574	0					
ANR	2202576	CompoundStatement		510:0:11127:11509	2202574	0					
ANR	2202577	IdentifierDeclStatement	int create_file ;	511:4:11133:11148	2202574	0	True				
ANR	2202578	IdentifierDecl	create_file		2202574	0					
ANR	2202579	IdentifierDeclType	int		2202574	0					
ANR	2202580	Identifier	create_file		2202574	1					
ANR	2202581	IdentifierDeclStatement	int r ;	512:4:11154:11159	2202574	1	True				
ANR	2202582	IdentifierDecl	r		2202574	0					
ANR	2202583	IdentifierDeclType	int		2202574	0					
ANR	2202584	Identifier	r		2202574	1					
ANR	2202585	IdentifierDeclStatement	int open_flags ;	513:4:11165:11179	2202574	2	True				
ANR	2202586	IdentifierDecl	open_flags		2202574	0					
ANR	2202587	IdentifierDeclType	int		2202574	0					
ANR	2202588	Identifier	open_flags		2202574	1					
ANR	2202589	IdentifierDeclStatement	int f ;	514:4:11185:11190	2202574	3	True				
ANR	2202590	IdentifierDecl	f		2202574	0					
ANR	2202591	IdentifierDeclType	int		2202574	0					
ANR	2202592	Identifier	f		2202574	1					
ANR	2202593	ExpressionStatement	create_file = ( flags != NULL && flags [ 0 ] != 'r' )	517:4:11269:11317	2202574	4	True				
ANR	2202594	AssignmentExpression	create_file = ( flags != NULL && flags [ 0 ] != 'r' )		2202574	0		=			
ANR	2202595	Identifier	create_file		2202574	0					
ANR	2202596	AndExpression	flags != NULL && flags [ 0 ] != 'r'		2202574	1		&&			
ANR	2202597	EqualityExpression	flags != NULL		2202574	0		!=			
ANR	2202598	Identifier	flags		2202574	0					
ANR	2202599	Identifier	NULL		2202574	1					
ANR	2202600	EqualityExpression	flags [ 0 ] != 'r'		2202574	1		!=			
ANR	2202601	ArrayIndexing	flags [ 0 ]		2202574	0					
ANR	2202602	Identifier	flags		2202574	0					
ANR	2202603	PrimaryExpression	0		2202574	1					
ANR	2202604	PrimaryExpression	'r'		2202574	1					
ANR	2202605	ExpressionStatement	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"	518:4:11323:11383	2202574	5	True				
ANR	2202606	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		2202574	0		=			
ANR	2202607	Identifier	r		2202574	0					
ANR	2202608	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		2202574	1					
ANR	2202609	Callee	stdio_mode_to_open_flag		2202574	0					
ANR	2202610	Identifier	stdio_mode_to_open_flag		2202574	0					
ANR	2202611	ArgumentList	flags		2202574	1					
ANR	2202612	Argument	flags		2202574	0					
ANR	2202613	Identifier	flags		2202574	0					
ANR	2202614	Argument	& open_flags		2202574	1					
ANR	2202615	UnaryOperationExpression	& open_flags		2202574	0					
ANR	2202616	UnaryOperator	&		2202574	0					
ANR	2202617	Identifier	open_flags		2202574	1					
ANR	2202618	Argument	create_file		2202574	2					
ANR	2202619	Identifier	create_file		2202574	0					
ANR	2202620	IfStatement	if ( r != 0 )		2202574	6					
ANR	2202621	Condition	r != 0	520:8:11394:11399	2202574	0	True				
ANR	2202622	EqualityExpression	r != 0		2202574	0		!=			
ANR	2202623	Identifier	r		2202574	0					
ANR	2202624	PrimaryExpression	0		2202574	1					
ANR	2202625	CompoundStatement		11:16:274:274	2202574	1					
ANR	2202626	ReturnStatement	return NULL ;	521:1:11405:11416	2202574	0	True				
ANR	2202627	Identifier	NULL		2202574	0					
ANR	2202628	ExpressionStatement	"f = safe_open_wrapper ( fn , open_flags , mode )"	524:4:11429:11472	2202574	7	True				
ANR	2202629	AssignmentExpression	"f = safe_open_wrapper ( fn , open_flags , mode )"		2202574	0		=			
ANR	2202630	Identifier	f		2202574	0					
ANR	2202631	CallExpression	"safe_open_wrapper ( fn , open_flags , mode )"		2202574	1					
ANR	2202632	Callee	safe_open_wrapper		2202574	0					
ANR	2202633	Identifier	safe_open_wrapper		2202574	0					
ANR	2202634	ArgumentList	fn		2202574	1					
ANR	2202635	Argument	fn		2202574	0					
ANR	2202636	Identifier	fn		2202574	0					
ANR	2202637	Argument	open_flags		2202574	1					
ANR	2202638	Identifier	open_flags		2202574	0					
ANR	2202639	Argument	mode		2202574	2					
ANR	2202640	Identifier	mode		2202574	0					
ANR	2202641	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	526:4:11479:11507	2202574	8	True				
ANR	2202642	CallExpression	"safe_fdopen ( f , flags )"		2202574	0					
ANR	2202643	Callee	safe_fdopen		2202574	0					
ANR	2202644	Identifier	safe_fdopen		2202574	0					
ANR	2202645	ArgumentList	f		2202574	1					
ANR	2202646	Argument	f		2202574	0					
ANR	2202647	Identifier	f		2202574	0					
ANR	2202648	Argument	flags		2202574	1					
ANR	2202649	Identifier	flags		2202574	0					
ANR	2202650	ReturnType	FILE *		2202574	1					
ANR	2202651	Identifier	safe_fopen_wrapper		2202574	2					
ANR	2202652	ParameterList	"const char * fn , const char * flags , mode_t mode"		2202574	3					
ANR	2202653	Parameter	const char * fn	509:25:11079:11092	2202574	0	True				
ANR	2202654	ParameterType	const char *		2202574	0					
ANR	2202655	Identifier	fn		2202574	1					
ANR	2202656	Parameter	const char * flags	509:41:11095:11111	2202574	1	True				
ANR	2202657	ParameterType	const char *		2202574	0					
ANR	2202658	Identifier	flags		2202574	1					
ANR	2202659	Parameter	mode_t mode	509:60:11114:11124	2202574	2	True				
ANR	2202660	ParameterType	mode_t		2202574	0					
ANR	2202661	Identifier	mode		2202574	1					
ANR	2202662	CFGEntryNode	ENTRY		2202574		True				
ANR	2202663	CFGExitNode	EXIT		2202574		True				
ANR	2202664	Symbol	* flags		2202574						
ANR	2202665	Symbol	& open_flags		2202574						
ANR	2202666	Symbol	NULL		2202574						
ANR	2202667	Symbol	safe_fdopen		2202574						
ANR	2202668	Symbol	f		2202574						
ANR	2202669	Symbol	fn		2202574						
ANR	2202670	Symbol	flags		2202574						
ANR	2202671	Symbol	open_flags		2202574						
ANR	2202672	Symbol	safe_open_wrapper		2202574						
ANR	2202673	Symbol	mode		2202574						
ANR	2202674	Symbol	create_file		2202574						
ANR	2202675	Symbol	r		2202574						
ANR	2202676	Symbol	stdio_mode_to_open_flag		2202574						
ANR	2202677	Function	safe_fopen_wrapper_follow	531:0:11583:12052							
ANR	2202678	FunctionDef	"safe_fopen_wrapper_follow (const char * fn , const char * flags , mode_t mode)"		2202677	0					
ANR	2202679	CompoundStatement		532:0:11663:12052	2202677	0					
ANR	2202680	IdentifierDeclStatement	int create_file ;	533:4:11669:11684	2202677	0	True				
ANR	2202681	IdentifierDecl	create_file		2202677	0					
ANR	2202682	IdentifierDeclType	int		2202677	0					
ANR	2202683	Identifier	create_file		2202677	1					
ANR	2202684	IdentifierDeclStatement	int r ;	534:4:11690:11695	2202677	1	True				
ANR	2202685	IdentifierDecl	r		2202677	0					
ANR	2202686	IdentifierDeclType	int		2202677	0					
ANR	2202687	Identifier	r		2202677	1					
ANR	2202688	IdentifierDeclStatement	int open_flags ;	535:4:11701:11715	2202677	2	True				
ANR	2202689	IdentifierDecl	open_flags		2202677	0					
ANR	2202690	IdentifierDeclType	int		2202677	0					
ANR	2202691	Identifier	open_flags		2202677	1					
ANR	2202692	IdentifierDeclStatement	int f ;	536:4:11721:11726	2202677	3	True				
ANR	2202693	IdentifierDecl	f		2202677	0					
ANR	2202694	IdentifierDeclType	int		2202677	0					
ANR	2202695	Identifier	f		2202677	1					
ANR	2202696	ExpressionStatement	create_file = ( flags != NULL && flags [ 0 ] != 'r' )	539:4:11805:11853	2202677	4	True				
ANR	2202697	AssignmentExpression	create_file = ( flags != NULL && flags [ 0 ] != 'r' )		2202677	0		=			
ANR	2202698	Identifier	create_file		2202677	0					
ANR	2202699	AndExpression	flags != NULL && flags [ 0 ] != 'r'		2202677	1		&&			
ANR	2202700	EqualityExpression	flags != NULL		2202677	0		!=			
ANR	2202701	Identifier	flags		2202677	0					
ANR	2202702	Identifier	NULL		2202677	1					
ANR	2202703	EqualityExpression	flags [ 0 ] != 'r'		2202677	1		!=			
ANR	2202704	ArrayIndexing	flags [ 0 ]		2202677	0					
ANR	2202705	Identifier	flags		2202677	0					
ANR	2202706	PrimaryExpression	0		2202677	1					
ANR	2202707	PrimaryExpression	'r'		2202677	1					
ANR	2202708	ExpressionStatement	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"	540:4:11859:11919	2202677	5	True				
ANR	2202709	AssignmentExpression	"r = stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		2202677	0		=			
ANR	2202710	Identifier	r		2202677	0					
ANR	2202711	CallExpression	"stdio_mode_to_open_flag ( flags , & open_flags , create_file )"		2202677	1					
ANR	2202712	Callee	stdio_mode_to_open_flag		2202677	0					
ANR	2202713	Identifier	stdio_mode_to_open_flag		2202677	0					
ANR	2202714	ArgumentList	flags		2202677	1					
ANR	2202715	Argument	flags		2202677	0					
ANR	2202716	Identifier	flags		2202677	0					
ANR	2202717	Argument	& open_flags		2202677	1					
ANR	2202718	UnaryOperationExpression	& open_flags		2202677	0					
ANR	2202719	UnaryOperator	&		2202677	0					
ANR	2202720	Identifier	open_flags		2202677	1					
ANR	2202721	Argument	create_file		2202677	2					
ANR	2202722	Identifier	create_file		2202677	0					
ANR	2202723	IfStatement	if ( r != 0 )		2202677	6					
ANR	2202724	Condition	r != 0	542:8:11930:11935	2202677	0	True				
ANR	2202725	EqualityExpression	r != 0		2202677	0		!=			
ANR	2202726	Identifier	r		2202677	0					
ANR	2202727	PrimaryExpression	0		2202677	1					
ANR	2202728	CompoundStatement		11:16:274:274	2202677	1					
ANR	2202729	ReturnStatement	return NULL ;	543:1:11941:11952	2202677	0	True				
ANR	2202730	Identifier	NULL		2202677	0					
ANR	2202731	ExpressionStatement	"f = safe_open_wrapper_follow ( fn , open_flags , mode )"	546:4:11965:12015	2202677	7	True				
ANR	2202732	AssignmentExpression	"f = safe_open_wrapper_follow ( fn , open_flags , mode )"		2202677	0		=			
ANR	2202733	Identifier	f		2202677	0					
ANR	2202734	CallExpression	"safe_open_wrapper_follow ( fn , open_flags , mode )"		2202677	1					
ANR	2202735	Callee	safe_open_wrapper_follow		2202677	0					
ANR	2202736	Identifier	safe_open_wrapper_follow		2202677	0					
ANR	2202737	ArgumentList	fn		2202677	1					
ANR	2202738	Argument	fn		2202677	0					
ANR	2202739	Identifier	fn		2202677	0					
ANR	2202740	Argument	open_flags		2202677	1					
ANR	2202741	Identifier	open_flags		2202677	0					
ANR	2202742	Argument	mode		2202677	2					
ANR	2202743	Identifier	mode		2202677	0					
ANR	2202744	ReturnStatement	"return safe_fdopen ( f , flags ) ;"	548:4:12022:12050	2202677	8	True				
ANR	2202745	CallExpression	"safe_fdopen ( f , flags )"		2202677	0					
ANR	2202746	Callee	safe_fdopen		2202677	0					
ANR	2202747	Identifier	safe_fdopen		2202677	0					
ANR	2202748	ArgumentList	f		2202677	1					
ANR	2202749	Argument	f		2202677	0					
ANR	2202750	Identifier	f		2202677	0					
ANR	2202751	Argument	flags		2202677	1					
ANR	2202752	Identifier	flags		2202677	0					
ANR	2202753	ReturnType	FILE *		2202677	1					
ANR	2202754	Identifier	safe_fopen_wrapper_follow		2202677	2					
ANR	2202755	ParameterList	"const char * fn , const char * flags , mode_t mode"		2202677	3					
ANR	2202756	Parameter	const char * fn	531:32:11615:11628	2202677	0	True				
ANR	2202757	ParameterType	const char *		2202677	0					
ANR	2202758	Identifier	fn		2202677	1					
ANR	2202759	Parameter	const char * flags	531:48:11631:11647	2202677	1	True				
ANR	2202760	ParameterType	const char *		2202677	0					
ANR	2202761	Identifier	flags		2202677	1					
ANR	2202762	Parameter	mode_t mode	531:67:11650:11660	2202677	2	True				
ANR	2202763	ParameterType	mode_t		2202677	0					
ANR	2202764	Identifier	mode		2202677	1					
ANR	2202765	CFGEntryNode	ENTRY		2202677		True				
ANR	2202766	CFGExitNode	EXIT		2202677		True				
ANR	2202767	Symbol	* flags		2202677						
ANR	2202768	Symbol	& open_flags		2202677						
ANR	2202769	Symbol	NULL		2202677						
ANR	2202770	Symbol	safe_open_wrapper_follow		2202677						
ANR	2202771	Symbol	safe_fdopen		2202677						
ANR	2202772	Symbol	f		2202677						
ANR	2202773	Symbol	fn		2202677						
ANR	2202774	Symbol	flags		2202677						
ANR	2202775	Symbol	open_flags		2202677						
ANR	2202776	Symbol	mode		2202677						
ANR	2202777	Symbol	create_file		2202677						
ANR	2202778	Symbol	r		2202677						
ANR	2202779	Symbol	stdio_mode_to_open_flag		2202677						
