command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5000232	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_uids.windows.credd.cpp								
ANR	5000233	Function	get_password_from_credd	32:0:1079:2058							
ANR	5000234	FunctionDef	"get_password_from_credd (const char * credd_host , const char username [ ] , const char domain [ ] , char * pw , int cb)"		5000233	0					
ANR	5000235	CompoundStatement		38:0:1239:2058	5000233	0					
ANR	5000236	IdentifierDeclStatement	bool got_password = false ;	39:1:1242:1267	5000233	0	True				
ANR	5000237	IdentifierDecl	got_password = false		5000233	0					
ANR	5000238	IdentifierDeclType	bool		5000233	0					
ANR	5000239	Identifier	got_password		5000233	1					
ANR	5000240	AssignmentExpression	got_password = false		5000233	2		=			
ANR	5000241	Identifier	false		5000233	0					
ANR	5000242	Identifier	false		5000233	1					
ANR	5000243	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""trying to fetch password from credd: %s\\n"" , credd_host )"	41:1:1271:1348	5000233	1	True				
ANR	5000244	CallExpression	"dprintf ( D_FULLDEBUG , ""trying to fetch password from credd: %s\\n"" , credd_host )"		5000233	0					
ANR	5000245	Callee	dprintf		5000233	0					
ANR	5000246	Identifier	dprintf		5000233	0					
ANR	5000247	ArgumentList	D_FULLDEBUG		5000233	1					
ANR	5000248	Argument	D_FULLDEBUG		5000233	0					
ANR	5000249	Identifier	D_FULLDEBUG		5000233	0					
ANR	5000250	Argument	"""trying to fetch password from credd: %s\\n"""		5000233	1					
ANR	5000251	PrimaryExpression	"""trying to fetch password from credd: %s\\n"""		5000233	0					
ANR	5000252	Argument	credd_host		5000233	2					
ANR	5000253	Identifier	credd_host		5000233	0					
ANR	5000254	IdentifierDeclStatement	Daemon credd ( DT_CREDD ) ;	42:1:1351:1373	5000233	2	True				
ANR	5000255	IdentifierDecl	credd ( DT_CREDD )		5000233	0					
ANR	5000256	IdentifierDeclType	Daemon		5000233	0					
ANR	5000257	Identifier	credd		5000233	1					
ANR	5000258	Identifier	DT_CREDD		5000233	2					
ANR	5000259	IdentifierDeclStatement	"Sock * credd_sock = credd . startCommand ( CREDD_GET_PASSWD , Stream :: reli_sock , 10 ) ;"	43:1:1376:1453	5000233	3	True				
ANR	5000260	IdentifierDecl	"* credd_sock = credd . startCommand ( CREDD_GET_PASSWD , Stream :: reli_sock , 10 )"		5000233	0					
ANR	5000261	IdentifierDeclType	Sock *		5000233	0					
ANR	5000262	Identifier	credd_sock		5000233	1					
ANR	5000263	AssignmentExpression	"* credd_sock = credd . startCommand ( CREDD_GET_PASSWD , Stream :: reli_sock , 10 )"		5000233	2		=			
ANR	5000264	Identifier	credd_sock		5000233	0					
ANR	5000265	CallExpression	"credd . startCommand ( CREDD_GET_PASSWD , Stream :: reli_sock , 10 )"		5000233	1					
ANR	5000266	Callee	credd . startCommand		5000233	0					
ANR	5000267	MemberAccess	credd . startCommand		5000233	0					
ANR	5000268	Identifier	credd		5000233	0					
ANR	5000269	Identifier	startCommand		5000233	1					
ANR	5000270	ArgumentList	CREDD_GET_PASSWD		5000233	1					
ANR	5000271	Argument	CREDD_GET_PASSWD		5000233	0					
ANR	5000272	Identifier	CREDD_GET_PASSWD		5000233	0					
ANR	5000273	Argument	Stream :: reli_sock		5000233	1					
ANR	5000274	Identifier	Stream :: reli_sock		5000233	0					
ANR	5000275	Argument	10		5000233	2					
ANR	5000276	PrimaryExpression	10		5000233	0					
ANR	5000277	IfStatement	if ( credd_sock )		5000233	4					
ANR	5000278	Condition	credd_sock	44:6:1461:1470	5000233	0	True				
ANR	5000279	Identifier	credd_sock		5000233	0					
ANR	5000280	CompoundStatement		13:2:409:429	5000233	1					
ANR	5000281	ExpressionStatement	credd_sock -> put ( ( char * ) username )	45:2:1478:1510	5000233	0	True				
ANR	5000282	CallExpression	credd_sock -> put ( ( char * ) username )		5000233	0					
ANR	5000283	Callee	credd_sock -> put		5000233	0					
ANR	5000284	PtrMemberAccess	credd_sock -> put		5000233	0					
ANR	5000285	Identifier	credd_sock		5000233	0					
ANR	5000286	Identifier	put		5000233	1					
ANR	5000287	ArgumentList	( char * ) username		5000233	1					
ANR	5000288	Argument	( char * ) username		5000233	0					
ANR	5000289	CastExpression	( char * ) username		5000233	0					
ANR	5000290	CastTarget	char *		5000233	0					
ANR	5000291	Identifier	username		5000233	1					
ANR	5000292	ExpressionStatement	credd_sock -> put ( ( char * ) domain )	46:2:1527:1557	5000233	1	True				
ANR	5000293	CallExpression	credd_sock -> put ( ( char * ) domain )		5000233	0					
ANR	5000294	Callee	credd_sock -> put		5000233	0					
ANR	5000295	PtrMemberAccess	credd_sock -> put		5000233	0					
ANR	5000296	Identifier	credd_sock		5000233	0					
ANR	5000297	Identifier	put		5000233	1					
ANR	5000298	ArgumentList	( char * ) domain		5000233	1					
ANR	5000299	Argument	( char * ) domain		5000233	0					
ANR	5000300	CastExpression	( char * ) domain		5000233	0					
ANR	5000301	CastTarget	char *		5000233	0					
ANR	5000302	Identifier	domain		5000233	1					
ANR	5000303	ExpressionStatement	credd_sock -> end_of_message ( )	47:2:1577:1605	5000233	2	True				
ANR	5000304	CallExpression	credd_sock -> end_of_message ( )		5000233	0					
ANR	5000305	Callee	credd_sock -> end_of_message		5000233	0					
ANR	5000306	PtrMemberAccess	credd_sock -> end_of_message		5000233	0					
ANR	5000307	Identifier	credd_sock		5000233	0					
ANR	5000308	Identifier	end_of_message		5000233	1					
ANR	5000309	ArgumentList			5000233	1					
ANR	5000310	ExpressionStatement	credd_sock -> decode ( )	48:2:1609:1629	5000233	3	True				
ANR	5000311	CallExpression	credd_sock -> decode ( )		5000233	0					
ANR	5000312	Callee	credd_sock -> decode		5000233	0					
ANR	5000313	PtrMemberAccess	credd_sock -> decode		5000233	0					
ANR	5000314	Identifier	credd_sock		5000233	0					
ANR	5000315	Identifier	decode		5000233	1					
ANR	5000316	ArgumentList			5000233	1					
ANR	5000317	ExpressionStatement	pw [ 0 ] = '\\0'	49:2:1633:1645	5000233	4	True				
ANR	5000318	AssignmentExpression	pw [ 0 ] = '\\0'		5000233	0		=			
ANR	5000319	ArrayIndexing	pw [ 0 ]		5000233	0					
ANR	5000320	Identifier	pw		5000233	0					
ANR	5000321	PrimaryExpression	0		5000233	1					
ANR	5000322	PrimaryExpression	'\\0'		5000233	1					
ANR	5000323	IdentifierDeclStatement	char * my_buffer = pw ;	50:2:1649:1669	5000233	5	True				
ANR	5000324	IdentifierDecl	* my_buffer = pw		5000233	0					
ANR	5000325	IdentifierDeclType	char *		5000233	0					
ANR	5000326	Identifier	my_buffer		5000233	1					
ANR	5000327	AssignmentExpression	* my_buffer = pw		5000233	2		=			
ANR	5000328	Identifier	pw		5000233	0					
ANR	5000329	Identifier	pw		5000233	1					
ANR	5000330	IfStatement	"if ( credd_sock -> code ( my_buffer , cb ) && pw [ 0 ] )"		5000233	6					
ANR	5000331	Condition	"credd_sock -> code ( my_buffer , cb ) && pw [ 0 ]"	51:7:1678:1716	5000233	0	True				
ANR	5000332	AndExpression	"credd_sock -> code ( my_buffer , cb ) && pw [ 0 ]"		5000233	0		&&			
ANR	5000333	CallExpression	"credd_sock -> code ( my_buffer , cb )"		5000233	0					
ANR	5000334	Callee	credd_sock -> code		5000233	0					
ANR	5000335	PtrMemberAccess	credd_sock -> code		5000233	0					
ANR	5000336	Identifier	credd_sock		5000233	0					
ANR	5000337	Identifier	code		5000233	1					
ANR	5000338	ArgumentList	my_buffer		5000233	1					
ANR	5000339	Argument	my_buffer		5000233	0					
ANR	5000340	Identifier	my_buffer		5000233	0					
ANR	5000341	Argument	cb		5000233	1					
ANR	5000342	Identifier	cb		5000233	0					
ANR	5000343	ArrayIndexing	pw [ 0 ]		5000233	1					
ANR	5000344	Identifier	pw		5000233	0					
ANR	5000345	PrimaryExpression	0		5000233	1					
ANR	5000346	CompoundStatement		14:49:480:480	5000233	1					
ANR	5000347	ExpressionStatement	got_password = true	52:3:1725:1744	5000233	0	True				
ANR	5000348	AssignmentExpression	got_password = true		5000233	0		=			
ANR	5000349	Identifier	got_password		5000233	0					
ANR	5000350	Identifier	true		5000233	1					
ANR	5000351	ElseStatement	else		5000233	0					
ANR	5000352	CompoundStatement		16:9:515:515	5000233	0					
ANR	5000353	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""credd (%s) did not have info for %s@%s\\n"" , credd_host , username , domain )"	54:3:1760:1863	5000233	0	True				
ANR	5000354	CallExpression	"dprintf ( D_FULLDEBUG , ""credd (%s) did not have info for %s@%s\\n"" , credd_host , username , domain )"		5000233	0					
ANR	5000355	Callee	dprintf		5000233	0					
ANR	5000356	Identifier	dprintf		5000233	0					
ANR	5000357	ArgumentList	D_FULLDEBUG		5000233	1					
ANR	5000358	Argument	D_FULLDEBUG		5000233	0					
ANR	5000359	Identifier	D_FULLDEBUG		5000233	0					
ANR	5000360	Argument	"""credd (%s) did not have info for %s@%s\\n"""		5000233	1					
ANR	5000361	PrimaryExpression	"""credd (%s) did not have info for %s@%s\\n"""		5000233	0					
ANR	5000362	Argument	credd_host		5000233	2					
ANR	5000363	Identifier	credd_host		5000233	0					
ANR	5000364	Argument	username		5000233	3					
ANR	5000365	Identifier	username		5000233	0					
ANR	5000366	Argument	domain		5000233	4					
ANR	5000367	Identifier	domain		5000233	0					
ANR	5000368	Statement	delete	58:2:1871:1876	5000233	7	True				
ANR	5000369	ExpressionStatement	credd_sock	58:9:1878:1888	5000233	8	True				
ANR	5000370	Identifier	credd_sock		5000233	0					
ANR	5000371	ExpressionStatement	credd_sock = NULL	59:2:1892:1909	5000233	9	True				
ANR	5000372	AssignmentExpression	credd_sock = NULL		5000233	0		=			
ANR	5000373	Identifier	credd_sock		5000233	0					
ANR	5000374	Identifier	NULL		5000233	1					
ANR	5000375	ElseStatement	else		5000233	0					
ANR	5000376	CompoundStatement		23:8:679:679	5000233	0					
ANR	5000377	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Failed to contact credd %s: %s\\n"" , credd_host , credd . error ( ) ? credd . error ( ) : """" )"	61:2:1923:2028	5000233	0	True				
ANR	5000378	CallExpression	"dprintf ( D_FULLDEBUG , ""Failed to contact credd %s: %s\\n"" , credd_host , credd . error ( ) ? credd . error ( ) : """" )"		5000233	0					
ANR	5000379	Callee	dprintf		5000233	0					
ANR	5000380	Identifier	dprintf		5000233	0					
ANR	5000381	ArgumentList	D_FULLDEBUG		5000233	1					
ANR	5000382	Argument	D_FULLDEBUG		5000233	0					
ANR	5000383	Identifier	D_FULLDEBUG		5000233	0					
ANR	5000384	Argument	"""Failed to contact credd %s: %s\\n"""		5000233	1					
ANR	5000385	PrimaryExpression	"""Failed to contact credd %s: %s\\n"""		5000233	0					
ANR	5000386	Argument	credd_host		5000233	2					
ANR	5000387	Identifier	credd_host		5000233	0					
ANR	5000388	Argument	"credd . error ( ) ? credd . error ( ) : """""		5000233	3					
ANR	5000389	ConditionalExpression	"credd . error ( ) ? credd . error ( ) : """""		5000233	0					
ANR	5000390	Condition	credd . error ( )		5000233	0					
ANR	5000391	CallExpression	credd . error ( )		5000233	0					
ANR	5000392	Callee	credd . error		5000233	0					
ANR	5000393	MemberAccess	credd . error		5000233	0					
ANR	5000394	Identifier	credd		5000233	0					
ANR	5000395	Identifier	error		5000233	1					
ANR	5000396	ArgumentList			5000233	1					
ANR	5000397	CallExpression	credd . error ( )		5000233	1					
ANR	5000398	Callee	credd . error		5000233	0					
ANR	5000399	MemberAccess	credd . error		5000233	0					
ANR	5000400	Identifier	credd		5000233	0					
ANR	5000401	Identifier	error		5000233	1					
ANR	5000402	ArgumentList			5000233	1					
ANR	5000403	PrimaryExpression	""""""		5000233	2					
ANR	5000404	ReturnStatement	return got_password ;	64:4:2037:2056	5000233	5	True				
ANR	5000405	Identifier	got_password		5000233	0					
ANR	5000406	ReturnType	bool		5000233	1					
ANR	5000407	Identifier	get_password_from_credd		5000233	2					
ANR	5000408	ParameterList	"const char * credd_host , const char username [ ] , const char domain [ ] , char * pw , int cb"		5000233	3					
ANR	5000409	Parameter	const char * credd_host	33:1:1111:1133	5000233	0	True				
ANR	5000410	ParameterType	const char *		5000233	0					
ANR	5000411	Identifier	credd_host		5000233	1					
ANR	5000412	Parameter	const char username [ ]	34:1:1137:1158	5000233	1	True				
ANR	5000413	ParameterType	const char [ ]		5000233	0					
ANR	5000414	Identifier	username		5000233	1					
ANR	5000415	Parameter	const char domain [ ]	35:1:1162:1181	5000233	2	True				
ANR	5000416	ParameterType	const char [ ]		5000233	0					
ANR	5000417	Identifier	domain		5000233	1					
ANR	5000418	Parameter	char * pw	36:1:1185:1193	5000233	3	True				
ANR	5000419	ParameterType	char *		5000233	0					
ANR	5000420	Identifier	pw		5000233	1					
ANR	5000421	Parameter	int cb	37:1:1197:1205	5000233	4	True				
ANR	5000422	ParameterType	int		5000233	0					
ANR	5000423	Identifier	cb		5000233	1					
ANR	5000424	CFGEntryNode	ENTRY		5000233		True				
ANR	5000425	CFGExitNode	EXIT		5000233		True				
ANR	5000426	Symbol	NULL		5000233						
ANR	5000427	Symbol	credd . startCommand		5000233						
ANR	5000428	Symbol	credd_host		5000233						
ANR	5000429	Symbol	pw		5000233						
ANR	5000430	Symbol	false		5000233						
ANR	5000431	Symbol	D_FULLDEBUG		5000233						
ANR	5000432	Symbol	CREDD_GET_PASSWD		5000233						
ANR	5000433	Symbol	* pw		5000233						
ANR	5000434	Symbol	my_buffer		5000233						
ANR	5000435	Symbol	credd_sock -> code		5000233						
ANR	5000436	Symbol	* credd_sock		5000233						
ANR	5000437	Symbol	credd_sock		5000233						
ANR	5000438	Symbol	domain		5000233						
ANR	5000439	Symbol	got_password		5000233						
ANR	5000440	Symbol	true		5000233						
ANR	5000441	Symbol	Stream :: reli_sock		5000233						
ANR	5000442	Symbol	credd . error		5000233						
ANR	5000443	Symbol	credd		5000233						
ANR	5000444	Symbol	username		5000233						
ANR	5000445	Symbol	cb		5000233						
ANR	5000446	Function	cache_credd_locally	67:0:2061:2629							
ANR	5000447	FunctionDef	"cache_credd_locally (const char username [ ] , const char domain [ ] , const char * pw)"		5000446	0					
ANR	5000448	CompoundStatement		72:0:2155:2629	5000446	0					
ANR	5000449	IdentifierDeclStatement	bool fAdded = false ;	73:1:2158:2177	5000446	0	True				
ANR	5000450	IdentifierDecl	fAdded = false		5000446	0					
ANR	5000451	IdentifierDeclType	bool		5000446	0					
ANR	5000452	Identifier	fAdded		5000446	1					
ANR	5000453	AssignmentExpression	fAdded = false		5000446	2		=			
ANR	5000454	Identifier	false		5000446	0					
ANR	5000455	Identifier	false		5000446	1					
ANR	5000456	IdentifierDeclStatement	MyString my_full_name ;	74:1:2180:2201	5000446	1	True				
ANR	5000457	IdentifierDecl	my_full_name		5000446	0					
ANR	5000458	IdentifierDeclType	MyString		5000446	0					
ANR	5000459	Identifier	my_full_name		5000446	1					
ANR	5000460	ExpressionStatement	"my_full_name . sprintf ( ""%s@%s"" , username , domain )"	75:1:2204:2249	5000446	2	True				
ANR	5000461	CallExpression	"my_full_name . sprintf ( ""%s@%s"" , username , domain )"		5000446	0					
ANR	5000462	Callee	my_full_name . sprintf		5000446	0					
ANR	5000463	MemberAccess	my_full_name . sprintf		5000446	0					
ANR	5000464	Identifier	my_full_name		5000446	0					
ANR	5000465	Identifier	sprintf		5000446	1					
ANR	5000466	ArgumentList	"""%s@%s"""		5000446	1					
ANR	5000467	Argument	"""%s@%s"""		5000446	0					
ANR	5000468	PrimaryExpression	"""%s@%s"""		5000446	0					
ANR	5000469	Argument	username		5000446	1					
ANR	5000470	Identifier	username		5000446	0					
ANR	5000471	Argument	domain		5000446	2					
ANR	5000472	Identifier	domain		5000446	0					
ANR	5000473	IfStatement	"if ( addCredential ( my_full_name . Value ( ) , pw ) == SUCCESS )"		5000446	3					
ANR	5000474	Condition	"addCredential ( my_full_name . Value ( ) , pw ) == SUCCESS"	76:6:2257:2305	5000446	0	True				
ANR	5000475	EqualityExpression	"addCredential ( my_full_name . Value ( ) , pw ) == SUCCESS"		5000446	0		==			
ANR	5000476	CallExpression	"addCredential ( my_full_name . Value ( ) , pw )"		5000446	0					
ANR	5000477	Callee	addCredential		5000446	0					
ANR	5000478	Identifier	addCredential		5000446	0					
ANR	5000479	ArgumentList	my_full_name . Value ( )		5000446	1					
ANR	5000480	Argument	my_full_name . Value ( )		5000446	0					
ANR	5000481	CallExpression	my_full_name . Value ( )		5000446	0					
ANR	5000482	Callee	my_full_name . Value		5000446	0					
ANR	5000483	MemberAccess	my_full_name . Value		5000446	0					
ANR	5000484	Identifier	my_full_name		5000446	0					
ANR	5000485	Identifier	Value		5000446	1					
ANR	5000486	ArgumentList			5000446	1					
ANR	5000487	Argument	pw		5000446	1					
ANR	5000488	Identifier	pw		5000446	0					
ANR	5000489	Identifier	SUCCESS		5000446	1					
ANR	5000490	CompoundStatement		5:58:153:153	5000446	1					
ANR	5000491	Statement	dprintf	77:2:2313:2319	5000446	0	True				
ANR	5000492	Statement	(	77:9:2320:2320	5000446	1	True				
ANR	5000493	Statement	D_FULLDEBUG	77:10:2321:2331	5000446	2	True				
ANR	5000494	Statement	","	77:21:2332:2332	5000446	3	True				
ANR	5000495	Statement	"""init_user_ids: """	78:3:2337:2353	5000446	4	True				
ANR	5000496	Statement	"""Successfully stashed credential in registry for user %s\\n"""	79:3:2358:2416	5000446	5	True				
ANR	5000497	Statement	","	79:62:2417:2417	5000446	6	True				
ANR	5000498	Statement	my_full_name	80:3:2422:2433	5000446	7	True				
ANR	5000499	Statement	.	80:15:2434:2434	5000446	8	True				
ANR	5000500	Statement	Value	80:16:2435:2439	5000446	9	True				
ANR	5000501	Statement	(	80:21:2440:2440	5000446	10	True				
ANR	5000502	Statement	)	80:22:2441:2441	5000446	11	True				
ANR	5000503	Statement	)	80:23:2442:2442	5000446	12	True				
ANR	5000504	ExpressionStatement		80:24:2443:2443	5000446	13	True				
ANR	5000505	ExpressionStatement	fAdded = true	81:8:2453:2466	5000446	14	True				
ANR	5000506	AssignmentExpression	fAdded = true		5000446	0		=			
ANR	5000507	Identifier	fAdded		5000446	0					
ANR	5000508	Identifier	true		5000446	1					
ANR	5000509	ElseStatement	else		5000446	0					
ANR	5000510	CompoundStatement		11:8:320:320	5000446	0					
ANR	5000511	Statement	dprintf	83:2:2480:2486	5000446	0	True				
ANR	5000512	Statement	(	83:9:2487:2487	5000446	1	True				
ANR	5000513	Statement	D_FULLDEBUG	83:10:2488:2498	5000446	2	True				
ANR	5000514	Statement	","	83:21:2499:2499	5000446	3	True				
ANR	5000515	Statement	"""init_user_ids: """	84:3:2504:2520	5000446	4	True				
ANR	5000516	Statement	"""Failed to stash credential in registry for user %s\\n"""	85:3:2525:2578	5000446	5	True				
ANR	5000517	Statement	","	85:57:2579:2579	5000446	6	True				
ANR	5000518	Statement	my_full_name	86:3:2584:2595	5000446	7	True				
ANR	5000519	Statement	.	86:15:2596:2596	5000446	8	True				
ANR	5000520	Statement	Value	86:16:2597:2601	5000446	9	True				
ANR	5000521	Statement	(	86:21:2602:2602	5000446	10	True				
ANR	5000522	Statement	)	86:22:2603:2603	5000446	11	True				
ANR	5000523	Statement	)	86:23:2604:2604	5000446	12	True				
ANR	5000524	ExpressionStatement		86:24:2605:2605	5000446	13	True				
ANR	5000525	ReturnStatement	return fAdded ;	88:4:2614:2627	5000446	4	True				
ANR	5000526	Identifier	fAdded		5000446	0					
ANR	5000527	ReturnType	bool		5000446	1					
ANR	5000528	Identifier	cache_credd_locally		5000446	2					
ANR	5000529	ParameterList	"const char username [ ] , const char domain [ ] , const char * pw"		5000446	3					
ANR	5000530	Parameter	const char username [ ]	69:1:2090:2111	5000446	0	True				
ANR	5000531	ParameterType	const char [ ]		5000446	0					
ANR	5000532	Identifier	username		5000446	1					
ANR	5000533	Parameter	const char domain [ ]	70:1:2115:2134	5000446	1	True				
ANR	5000534	ParameterType	const char [ ]		5000446	0					
ANR	5000535	Identifier	domain		5000446	1					
ANR	5000536	Parameter	const char * pw	71:1:2138:2152	5000446	2	True				
ANR	5000537	ParameterType	const char *		5000446	0					
ANR	5000538	Identifier	pw		5000446	1					
ANR	5000539	CFGEntryNode	ENTRY		5000446		True				
ANR	5000540	CFGExitNode	EXIT		5000446		True				
ANR	5000541	Symbol	SUCCESS		5000446						
ANR	5000542	Symbol	domain		5000446						
ANR	5000543	Symbol	pw		5000446						
ANR	5000544	Symbol	false		5000446						
ANR	5000545	Symbol	true		5000446						
ANR	5000546	Symbol	fAdded		5000446						
ANR	5000547	Symbol	my_full_name		5000446						
ANR	5000548	Symbol	addCredential		5000446						
ANR	5000549	Symbol	username		5000446						
ANR	5000550	Symbol	my_full_name . Value		5000446						
