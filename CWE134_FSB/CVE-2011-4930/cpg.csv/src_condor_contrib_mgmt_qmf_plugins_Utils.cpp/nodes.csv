command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2959611	File	data/converged/CVE-2011-4930_htcondor/src_condor_contrib_mgmt_qmf_plugins_Utils.cpp								
ANR	2959612	DeclStmt									
ANR	2959613	Decl							const std :: string	const std :: string	EXPR_TYPE
ANR	2959614	DeclStmt									
ANR	2959615	Decl							const std :: string	const std :: string	TYPEMAP_KEY
ANR	2959616	DeclStmt									
ANR	2959617	Decl							const char	const char * [ ]	RESERVED
ANR	2959618	Function	TrimQuotes	42:0:1183:1490							
ANR	2959619	FunctionDef	TrimQuotes (const char * str)		2959618	0					
ANR	2959620	CompoundStatement		42:35:1218:1490	2959618	0					
ANR	2959621	IdentifierDeclStatement	string val = str ;	43:1:1221:1237	2959618	0	True				
ANR	2959622	IdentifierDecl	val = str		2959618	0					
ANR	2959623	IdentifierDeclType	string		2959618	0					
ANR	2959624	Identifier	val		2959618	1					
ANR	2959625	AssignmentExpression	val = str		2959618	2		=			
ANR	2959626	Identifier	str		2959618	0					
ANR	2959627	Identifier	str		2959618	1					
ANR	2959628	IdentifierDeclStatement	"size_t endpos = val . find_last_not_of ( ""\\\\\\"""" ) ;"	45:1:1241:1285	2959618	1	True				
ANR	2959629	IdentifierDecl	"endpos = val . find_last_not_of ( ""\\\\\\"""" )"		2959618	0					
ANR	2959630	IdentifierDeclType	size_t		2959618	0					
ANR	2959631	Identifier	endpos		2959618	1					
ANR	2959632	AssignmentExpression	"endpos = val . find_last_not_of ( ""\\\\\\"""" )"		2959618	2		=			
ANR	2959633	Identifier	endpos		2959618	0					
ANR	2959634	CallExpression	"val . find_last_not_of ( ""\\\\\\"""" )"		2959618	1					
ANR	2959635	Callee	val . find_last_not_of		2959618	0					
ANR	2959636	MemberAccess	val . find_last_not_of		2959618	0					
ANR	2959637	Identifier	val		2959618	0					
ANR	2959638	Identifier	find_last_not_of		2959618	1					
ANR	2959639	ArgumentList	"""\\\\\\"""""		2959618	1					
ANR	2959640	Argument	"""\\\\\\"""""		2959618	0					
ANR	2959641	PrimaryExpression	"""\\\\\\"""""		2959618	0					
ANR	2959642	IfStatement	if ( string :: npos != endpos )		2959618	2					
ANR	2959643	Condition	string :: npos != endpos	46:5:1292:1313	2959618	0	True				
ANR	2959644	EqualityExpression	string :: npos != endpos		2959618	0		!=			
ANR	2959645	Identifier	string :: npos		2959618	0					
ANR	2959646	Identifier	endpos		2959618	1					
ANR	2959647	CompoundStatement		5:30:98:98	2959618	1					
ANR	2959648	ExpressionStatement	"val = val . substr ( 0 , endpos + 1 )"	47:2:1321:1352	2959618	0	True				
ANR	2959649	AssignmentExpression	"val = val . substr ( 0 , endpos + 1 )"		2959618	0		=			
ANR	2959650	Identifier	val		2959618	0					
ANR	2959651	CallExpression	"val . substr ( 0 , endpos + 1 )"		2959618	1					
ANR	2959652	Callee	val . substr		2959618	0					
ANR	2959653	MemberAccess	val . substr		2959618	0					
ANR	2959654	Identifier	val		2959618	0					
ANR	2959655	Identifier	substr		2959618	1					
ANR	2959656	ArgumentList	0		2959618	1					
ANR	2959657	Argument	0		2959618	0					
ANR	2959658	PrimaryExpression	0		2959618	0					
ANR	2959659	Argument	endpos + 1		2959618	1					
ANR	2959660	AdditiveExpression	endpos + 1		2959618	0		+			
ANR	2959661	Identifier	endpos		2959618	0					
ANR	2959662	PrimaryExpression	1		2959618	1					
ANR	2959663	IdentifierDeclStatement	"size_t startpos = val . find_first_not_of ( ""\\\\\\"""" ) ;"	49:1:1358:1405	2959618	3	True				
ANR	2959664	IdentifierDecl	"startpos = val . find_first_not_of ( ""\\\\\\"""" )"		2959618	0					
ANR	2959665	IdentifierDeclType	size_t		2959618	0					
ANR	2959666	Identifier	startpos		2959618	1					
ANR	2959667	AssignmentExpression	"startpos = val . find_first_not_of ( ""\\\\\\"""" )"		2959618	2		=			
ANR	2959668	Identifier	startpos		2959618	0					
ANR	2959669	CallExpression	"val . find_first_not_of ( ""\\\\\\"""" )"		2959618	1					
ANR	2959670	Callee	val . find_first_not_of		2959618	0					
ANR	2959671	MemberAccess	val . find_first_not_of		2959618	0					
ANR	2959672	Identifier	val		2959618	0					
ANR	2959673	Identifier	find_first_not_of		2959618	1					
ANR	2959674	ArgumentList	"""\\\\\\"""""		2959618	1					
ANR	2959675	Argument	"""\\\\\\"""""		2959618	0					
ANR	2959676	PrimaryExpression	"""\\\\\\"""""		2959618	0					
ANR	2959677	IfStatement	if ( string :: npos != startpos )		2959618	4					
ANR	2959678	Condition	string :: npos != startpos	50:5:1412:1435	2959618	0	True				
ANR	2959679	EqualityExpression	string :: npos != startpos		2959618	0		!=			
ANR	2959680	Identifier	string :: npos		2959618	0					
ANR	2959681	Identifier	startpos		2959618	1					
ANR	2959682	CompoundStatement		9:32:220:220	2959618	1					
ANR	2959683	ExpressionStatement	val = val . substr ( startpos )	51:2:1443:1471	2959618	0	True				
ANR	2959684	AssignmentExpression	val = val . substr ( startpos )		2959618	0		=			
ANR	2959685	Identifier	val		2959618	0					
ANR	2959686	CallExpression	val . substr ( startpos )		2959618	1					
ANR	2959687	Callee	val . substr		2959618	0					
ANR	2959688	MemberAccess	val . substr		2959618	0					
ANR	2959689	Identifier	val		2959618	0					
ANR	2959690	Identifier	substr		2959618	1					
ANR	2959691	ArgumentList	startpos		2959618	1					
ANR	2959692	Argument	startpos		2959618	0					
ANR	2959693	Identifier	startpos		2959618	0					
ANR	2959694	ReturnStatement	return val ;	54:1:1478:1488	2959618	5	True				
ANR	2959695	Identifier	val		2959618	0					
ANR	2959696	ReturnType	string		2959618	1					
ANR	2959697	Identifier	TrimQuotes		2959618	2					
ANR	2959698	ParameterList	const char * str		2959618	3					
ANR	2959699	Parameter	const char * str	42:18:1201:1215	2959618	0	True				
ANR	2959700	ParameterType	const char *		2959618	0					
ANR	2959701	Identifier	str		2959618	1					
ANR	2959702	CFGEntryNode	ENTRY		2959618		True				
ANR	2959703	CFGExitNode	EXIT		2959618		True				
ANR	2959704	Symbol	str		2959618						
ANR	2959705	Symbol	val		2959618						
ANR	2959706	Symbol	val . find_last_not_of		2959618						
ANR	2959707	Symbol	string :: npos		2959618						
ANR	2959708	Symbol	startpos		2959618						
ANR	2959709	Symbol	endpos		2959618						
ANR	2959710	Symbol	val . substr		2959618						
ANR	2959711	Symbol	val . find_first_not_of		2959618						
ANR	2959712	Function	IsValidGroupUserName	59:0:1592:2011							
ANR	2959713	FunctionDef	"IsValidGroupUserName (const std :: string & _name , std :: string & _text)"		2959712	0					
ANR	2959714	CompoundStatement		59:72:1664:2011	2959712	0					
ANR	2959715	IdentifierDeclStatement	const char * ptr = _name . c_str ( ) ;	60:1:1667:1698	2959712	0	True				
ANR	2959716	IdentifierDecl	* ptr = _name . c_str ( )		2959712	0					
ANR	2959717	IdentifierDeclType	const char *		2959712	0					
ANR	2959718	Identifier	ptr		2959712	1					
ANR	2959719	AssignmentExpression	* ptr = _name . c_str ( )		2959712	2		=			
ANR	2959720	Identifier	ptr		2959712	0					
ANR	2959721	CallExpression	_name . c_str ( )		2959712	1					
ANR	2959722	Callee	_name . c_str		2959712	0					
ANR	2959723	MemberAccess	_name . c_str		2959712	0					
ANR	2959724	Identifier	_name		2959712	0					
ANR	2959725	Identifier	c_str		2959712	1					
ANR	2959726	ArgumentList			2959712	1					
ANR	2959727	WhileStatement	while ( * ptr )		2959712	1					
ANR	2959728	Condition	* ptr	62:8:1709:1712	2959712	0	True				
ANR	2959729	UnaryOperationExpression	* ptr		2959712	0					
ANR	2959730	UnaryOperator	*		2959712	0					
ANR	2959731	Identifier	ptr		2959712	1					
ANR	2959732	CompoundStatement		5:2:55:70	2959712	1					
ANR	2959733	IdentifierDeclStatement	char c = * ptr ++ ;	63:2:1720:1735	2959712	0	True				
ANR	2959734	IdentifierDecl	c = * ptr ++		2959712	0					
ANR	2959735	IdentifierDeclType	char		2959712	0					
ANR	2959736	Identifier	c		2959712	1					
ANR	2959737	AssignmentExpression	c = * ptr ++		2959712	2		=			
ANR	2959738	Identifier	c		2959712	0					
ANR	2959739	UnaryOperationExpression	* ptr ++		2959712	1					
ANR	2959740	UnaryOperator	*		2959712	0					
ANR	2959741	PostIncDecOperationExpression	ptr ++		2959712	1					
ANR	2959742	Identifier	ptr		2959712	0					
ANR	2959743	IncDec	++		2959712	1					
ANR	2959744	IfStatement	if ( ( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '@' ) && ( c != '.' ) )		2959712	1					
ANR	2959745	Condition	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '@' ) && ( c != '.' )	64:7:1744:1871	2959712	0	True				
ANR	2959746	AndExpression	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '@' ) && ( c != '.' )		2959712	0		&&			
ANR	2959747	OrExpression	'a' > c || c > 'z'		2959712	0		||			
ANR	2959748	RelationalExpression	'a' > c		2959712	0		>			
ANR	2959749	PrimaryExpression	'a'		2959712	0					
ANR	2959750	Identifier	c		2959712	1					
ANR	2959751	RelationalExpression	c > 'z'		2959712	1		>			
ANR	2959752	Identifier	c		2959712	0					
ANR	2959753	PrimaryExpression	'z'		2959712	1					
ANR	2959754	AndExpression	( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '@' ) && ( c != '.' )		2959712	1		&&			
ANR	2959755	OrExpression	'A' > c || c > 'Z'		2959712	0		||			
ANR	2959756	RelationalExpression	'A' > c		2959712	0		>			
ANR	2959757	PrimaryExpression	'A'		2959712	0					
ANR	2959758	Identifier	c		2959712	1					
ANR	2959759	RelationalExpression	c > 'Z'		2959712	1		>			
ANR	2959760	Identifier	c		2959712	0					
ANR	2959761	PrimaryExpression	'Z'		2959712	1					
ANR	2959762	AndExpression	( '0' > c || c > '9' ) && ( c != '_' ) && ( c != '@' ) && ( c != '.' )		2959712	1		&&			
ANR	2959763	OrExpression	'0' > c || c > '9'		2959712	0		||			
ANR	2959764	RelationalExpression	'0' > c		2959712	0		>			
ANR	2959765	PrimaryExpression	'0'		2959712	0					
ANR	2959766	Identifier	c		2959712	1					
ANR	2959767	RelationalExpression	c > '9'		2959712	1		>			
ANR	2959768	Identifier	c		2959712	0					
ANR	2959769	PrimaryExpression	'9'		2959712	1					
ANR	2959770	AndExpression	( c != '_' ) && ( c != '@' ) && ( c != '.' )		2959712	1		&&			
ANR	2959771	EqualityExpression	c != '_'		2959712	0		!=			
ANR	2959772	Identifier	c		2959712	0					
ANR	2959773	PrimaryExpression	'_'		2959712	1					
ANR	2959774	AndExpression	( c != '@' ) && ( c != '.' )		2959712	1		&&			
ANR	2959775	EqualityExpression	c != '@'		2959712	0		!=			
ANR	2959776	Identifier	c		2959712	0					
ANR	2959777	PrimaryExpression	'@'		2959712	1					
ANR	2959778	EqualityExpression	c != '.'		2959712	1		!=			
ANR	2959779	Identifier	c		2959712	0					
ANR	2959780	PrimaryExpression	'.'		2959712	1					
ANR	2959781	CompoundStatement		11:17:210:210	2959712	1					
ANR	2959782	ExpressionStatement	"_text = ""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""	70:3:1880:1971	2959712	0	True				
ANR	2959783	AssignmentExpression	"_text = ""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""		2959712	0		=			
ANR	2959784	Identifier	_text		2959712	0					
ANR	2959785	PrimaryExpression	"""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""		2959712	1					
ANR	2959786	ReturnStatement	return false ;	71:3:1976:1988	2959712	1	True				
ANR	2959787	Identifier	false		2959712	0					
ANR	2959788	ReturnStatement	return true ;	74:1:1998:2009	2959712	2	True				
ANR	2959789	Identifier	true		2959712	0					
ANR	2959790	ReturnType	bool		2959712	1					
ANR	2959791	Identifier	IsValidGroupUserName		2959712	2					
ANR	2959792	ParameterList	"const std :: string & _name , std :: string & _text"		2959712	3					
ANR	2959793	Parameter	const std :: string & _name	59:26:1618:1641	2959712	0	True				
ANR	2959794	ParameterType	const std :: string &		2959712	0					
ANR	2959795	Identifier	_name		2959712	1					
ANR	2959796	Parameter	std :: string & _text	59:52:1644:1661	2959712	1	True				
ANR	2959797	ParameterType	std :: string &		2959712	0					
ANR	2959798	Identifier	_text		2959712	1					
ANR	2959799	CFGEntryNode	ENTRY		2959712		True				
ANR	2959800	CFGExitNode	EXIT		2959712		True				
ANR	2959801	Symbol	c		2959712						
ANR	2959802	Symbol	_name		2959712						
ANR	2959803	Symbol	* ptr ++		2959712						
ANR	2959804	Symbol	* ptr		2959712						
ANR	2959805	Symbol	false		2959712						
ANR	2959806	Symbol	true		2959712						
ANR	2959807	Symbol	_text		2959712						
ANR	2959808	Symbol	_name . c_str		2959712						
ANR	2959809	Symbol	ptr		2959712						
ANR	2959810	Function	IsValidParamName	79:0:2111:2378							
ANR	2959811	FunctionDef	"IsValidParamName (const std :: string & _name , std :: string & _text)"		2959810	0					
ANR	2959812	CompoundStatement		79:68:2179:2378	2959810	0					
ANR	2959813	IdentifierDeclStatement	const char * ptr = _name . c_str ( ) ;	80:1:2182:2213	2959810	0	True				
ANR	2959814	IdentifierDecl	* ptr = _name . c_str ( )		2959810	0					
ANR	2959815	IdentifierDeclType	const char *		2959810	0					
ANR	2959816	Identifier	ptr		2959810	1					
ANR	2959817	AssignmentExpression	* ptr = _name . c_str ( )		2959810	2		=			
ANR	2959818	Identifier	ptr		2959810	0					
ANR	2959819	CallExpression	_name . c_str ( )		2959810	1					
ANR	2959820	Callee	_name . c_str		2959810	0					
ANR	2959821	MemberAccess	_name . c_str		2959810	0					
ANR	2959822	Identifier	_name		2959810	0					
ANR	2959823	Identifier	c_str		2959810	1					
ANR	2959824	ArgumentList			2959810	1					
ANR	2959825	IfStatement	if ( ! is_valid_param_name ( ptr ) )		2959810	1					
ANR	2959826	Condition	! is_valid_param_name ( ptr )	82:5:2221:2245	2959810	0	True				
ANR	2959827	UnaryOperationExpression	! is_valid_param_name ( ptr )		2959810	0					
ANR	2959828	UnaryOperator	!		2959810	0					
ANR	2959829	CallExpression	is_valid_param_name ( ptr )		2959810	1					
ANR	2959830	Callee	is_valid_param_name		2959810	0					
ANR	2959831	Identifier	is_valid_param_name		2959810	0					
ANR	2959832	ArgumentList	ptr		2959810	1					
ANR	2959833	Argument	ptr		2959810	0					
ANR	2959834	Identifier	ptr		2959810	0					
ANR	2959835	CompoundStatement		4:32:68:68	2959810	1					
ANR	2959836	ExpressionStatement	"_text = ""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""	83:2:2252:2343	2959810	0	True				
ANR	2959837	AssignmentExpression	"_text = ""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""		2959810	0		=			
ANR	2959838	Identifier	_text		2959810	0					
ANR	2959839	PrimaryExpression	"""Invalid name for group/user - alphanumeric, underscore, @ and dot characters only"""		2959810	1					
ANR	2959840	ReturnStatement	return false ;	84:2:2347:2359	2959810	1	True				
ANR	2959841	Identifier	false		2959810	0					
ANR	2959842	ReturnStatement	return true ;	86:1:2365:2376	2959810	2	True				
ANR	2959843	Identifier	true		2959810	0					
ANR	2959844	ReturnType	bool		2959810	1					
ANR	2959845	Identifier	IsValidParamName		2959810	2					
ANR	2959846	ParameterList	"const std :: string & _name , std :: string & _text"		2959810	3					
ANR	2959847	Parameter	const std :: string & _name	79:22:2133:2156	2959810	0	True				
ANR	2959848	ParameterType	const std :: string &		2959810	0					
ANR	2959849	Identifier	_name		2959810	1					
ANR	2959850	Parameter	std :: string & _text	79:48:2159:2176	2959810	1	True				
ANR	2959851	ParameterType	std :: string &		2959810	0					
ANR	2959852	Identifier	_text		2959810	1					
ANR	2959853	CFGEntryNode	ENTRY		2959810		True				
ANR	2959854	CFGExitNode	EXIT		2959810		True				
ANR	2959855	Symbol	is_valid_param_name		2959810						
ANR	2959856	Symbol	_name		2959810						
ANR	2959857	Symbol	false		2959810						
ANR	2959858	Symbol	true		2959810						
ANR	2959859	Symbol	_text		2959810						
ANR	2959860	Symbol	_name . c_str		2959810						
ANR	2959861	Symbol	ptr		2959810						
ANR	2959862	Function	IsValidAttributeName	91:0:2460:2833							
ANR	2959863	FunctionDef	"IsValidAttributeName (const std :: string & _name , std :: string & _text)"		2959862	0					
ANR	2959864	CompoundStatement		91:72:2532:2833	2959862	0					
ANR	2959865	IdentifierDeclStatement	const char * ptr = _name . c_str ( ) ;	92:1:2535:2566	2959862	0	True				
ANR	2959866	IdentifierDecl	* ptr = _name . c_str ( )		2959862	0					
ANR	2959867	IdentifierDeclType	const char *		2959862	0					
ANR	2959868	Identifier	ptr		2959862	1					
ANR	2959869	AssignmentExpression	* ptr = _name . c_str ( )		2959862	2		=			
ANR	2959870	Identifier	ptr		2959862	0					
ANR	2959871	CallExpression	_name . c_str ( )		2959862	1					
ANR	2959872	Callee	_name . c_str		2959862	0					
ANR	2959873	MemberAccess	_name . c_str		2959862	0					
ANR	2959874	Identifier	_name		2959862	0					
ANR	2959875	Identifier	c_str		2959862	1					
ANR	2959876	ArgumentList			2959862	1					
ANR	2959877	WhileStatement	while ( * ptr )		2959862	1					
ANR	2959878	Condition	* ptr	93:8:2576:2579	2959862	0	True				
ANR	2959879	UnaryOperationExpression	* ptr		2959862	0					
ANR	2959880	UnaryOperator	*		2959862	0					
ANR	2959881	Identifier	ptr		2959862	1					
ANR	2959882	CompoundStatement		4:2:54:69	2959862	1					
ANR	2959883	IdentifierDeclStatement	char c = * ptr ++ ;	94:2:2587:2602	2959862	0	True				
ANR	2959884	IdentifierDecl	c = * ptr ++		2959862	0					
ANR	2959885	IdentifierDeclType	char		2959862	0					
ANR	2959886	Identifier	c		2959862	1					
ANR	2959887	AssignmentExpression	c = * ptr ++		2959862	2		=			
ANR	2959888	Identifier	c		2959862	0					
ANR	2959889	UnaryOperationExpression	* ptr ++		2959862	1					
ANR	2959890	UnaryOperator	*		2959862	0					
ANR	2959891	PostIncDecOperationExpression	ptr ++		2959862	1					
ANR	2959892	Identifier	ptr		2959862	0					
ANR	2959893	IncDec	++		2959862	1					
ANR	2959894	IfStatement	if ( ( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' ) )		2959862	1					
ANR	2959895	Condition	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )	95:7:2611:2702	2959862	0	True				
ANR	2959896	AndExpression	( 'a' > c || c > 'z' ) && ( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )		2959862	0		&&			
ANR	2959897	OrExpression	'a' > c || c > 'z'		2959862	0		||			
ANR	2959898	RelationalExpression	'a' > c		2959862	0		>			
ANR	2959899	PrimaryExpression	'a'		2959862	0					
ANR	2959900	Identifier	c		2959862	1					
ANR	2959901	RelationalExpression	c > 'z'		2959862	1		>			
ANR	2959902	Identifier	c		2959862	0					
ANR	2959903	PrimaryExpression	'z'		2959862	1					
ANR	2959904	AndExpression	( 'A' > c || c > 'Z' ) && ( '0' > c || c > '9' ) && ( c != '_' )		2959862	1		&&			
ANR	2959905	OrExpression	'A' > c || c > 'Z'		2959862	0		||			
ANR	2959906	RelationalExpression	'A' > c		2959862	0		>			
ANR	2959907	PrimaryExpression	'A'		2959862	0					
ANR	2959908	Identifier	c		2959862	1					
ANR	2959909	RelationalExpression	c > 'Z'		2959862	1		>			
ANR	2959910	Identifier	c		2959862	0					
ANR	2959911	PrimaryExpression	'Z'		2959862	1					
ANR	2959912	AndExpression	( '0' > c || c > '9' ) && ( c != '_' )		2959862	1		&&			
ANR	2959913	OrExpression	'0' > c || c > '9'		2959862	0		||			
ANR	2959914	RelationalExpression	'0' > c		2959862	0		>			
ANR	2959915	PrimaryExpression	'0'		2959862	0					
ANR	2959916	Identifier	c		2959862	1					
ANR	2959917	RelationalExpression	c > '9'		2959862	1		>			
ANR	2959918	Identifier	c		2959862	0					
ANR	2959919	PrimaryExpression	'9'		2959862	1					
ANR	2959920	EqualityExpression	c != '_'		2959862	1		!=			
ANR	2959921	Identifier	c		2959862	0					
ANR	2959922	PrimaryExpression	'_'		2959862	1					
ANR	2959923	CompoundStatement		8:17:173:173	2959862	1					
ANR	2959924	ExpressionStatement	"_text = ""Invalid name for attribute - alphanumeric and underscore characters only"""	99:3:2711:2793	2959862	0	True				
ANR	2959925	AssignmentExpression	"_text = ""Invalid name for attribute - alphanumeric and underscore characters only"""		2959862	0		=			
ANR	2959926	Identifier	_text		2959862	0					
ANR	2959927	PrimaryExpression	"""Invalid name for attribute - alphanumeric and underscore characters only"""		2959862	1					
ANR	2959928	ReturnStatement	return false ;	100:3:2798:2810	2959862	1	True				
ANR	2959929	Identifier	false		2959862	0					
ANR	2959930	ReturnStatement	return true ;	103:1:2820:2831	2959862	2	True				
ANR	2959931	Identifier	true		2959862	0					
ANR	2959932	ReturnType	bool		2959862	1					
ANR	2959933	Identifier	IsValidAttributeName		2959862	2					
ANR	2959934	ParameterList	"const std :: string & _name , std :: string & _text"		2959862	3					
ANR	2959935	Parameter	const std :: string & _name	91:26:2486:2509	2959862	0	True				
ANR	2959936	ParameterType	const std :: string &		2959862	0					
ANR	2959937	Identifier	_name		2959862	1					
ANR	2959938	Parameter	std :: string & _text	91:52:2512:2529	2959862	1	True				
ANR	2959939	ParameterType	std :: string &		2959862	0					
ANR	2959940	Identifier	_text		2959862	1					
ANR	2959941	CFGEntryNode	ENTRY		2959862		True				
ANR	2959942	CFGExitNode	EXIT		2959862		True				
ANR	2959943	Symbol	c		2959862						
ANR	2959944	Symbol	_name		2959862						
ANR	2959945	Symbol	* ptr ++		2959862						
ANR	2959946	Symbol	* ptr		2959862						
ANR	2959947	Symbol	false		2959862						
ANR	2959948	Symbol	true		2959862						
ANR	2959949	Symbol	_text		2959862						
ANR	2959950	Symbol	_name . c_str		2959862						
ANR	2959951	Symbol	ptr		2959862						
ANR	2959952	Function	CheckRequiredAttrs	106:0:2836:3122							
ANR	2959953	FunctionDef	"CheckRequiredAttrs (compat_classad :: ClassAd & ad , const char * attrs [ ] , std :: string & missing)"		2959952	0					
ANR	2959954	CompoundStatement		106:96:2932:3122	2959952	0					
ANR	2959955	IdentifierDeclStatement	bool status = true ;	107:1:2935:2953	2959952	0	True				
ANR	2959956	IdentifierDecl	status = true		2959952	0					
ANR	2959957	IdentifierDeclType	bool		2959952	0					
ANR	2959958	Identifier	status		2959952	1					
ANR	2959959	AssignmentExpression	status = true		2959952	2		=			
ANR	2959960	Identifier	true		2959952	0					
ANR	2959961	Identifier	true		2959952	1					
ANR	2959962	IdentifierDeclStatement	int i = 0 ;	108:1:2956:2965	2959952	1	True				
ANR	2959963	IdentifierDecl	i = 0		2959952	0					
ANR	2959964	IdentifierDeclType	int		2959952	0					
ANR	2959965	Identifier	i		2959952	1					
ANR	2959966	AssignmentExpression	i = 0		2959952	2		=			
ANR	2959967	Identifier	i		2959952	0					
ANR	2959968	PrimaryExpression	0		2959952	1					
ANR	2959969	WhileStatement	while ( NULL != attrs [ i ] )		2959952	2					
ANR	2959970	Condition	NULL != attrs [ i ]	110:15:2983:2998	2959952	0	True				
ANR	2959971	EqualityExpression	NULL != attrs [ i ]		2959952	0		!=			
ANR	2959972	Identifier	NULL		2959952	0					
ANR	2959973	ArrayIndexing	attrs [ i ]		2959952	1					
ANR	2959974	Identifier	attrs		2959952	0					
ANR	2959975	Identifier	i		2959952	1					
ANR	2959976	CompoundStatement		5:33:68:68	2959952	1					
ANR	2959977	IfStatement	if ( ! ad . Lookup ( attrs [ i ] ) )		2959952	0					
ANR	2959978	Condition	! ad . Lookup ( attrs [ i ] )	111:6:3009:3028	2959952	0	True				
ANR	2959979	UnaryOperationExpression	! ad . Lookup ( attrs [ i ] )		2959952	0					
ANR	2959980	UnaryOperator	!		2959952	0					
ANR	2959981	CallExpression	ad . Lookup ( attrs [ i ] )		2959952	1					
ANR	2959982	Callee	ad . Lookup		2959952	0					
ANR	2959983	MemberAccess	ad . Lookup		2959952	0					
ANR	2959984	Identifier	ad		2959952	0					
ANR	2959985	Identifier	Lookup		2959952	1					
ANR	2959986	ArgumentList	attrs [ i ]		2959952	1					
ANR	2959987	Argument	attrs [ i ]		2959952	0					
ANR	2959988	ArrayIndexing	attrs [ i ]		2959952	0					
ANR	2959989	Identifier	attrs		2959952	0					
ANR	2959990	Identifier	i		2959952	1					
ANR	2959991	CompoundStatement		6:28:98:98	2959952	1					
ANR	2959992	ExpressionStatement	"missing += "" """	112:3:3036:3050	2959952	0	True				
ANR	2959993	AssignmentExpression	"missing += "" """		2959952	0		+=			
ANR	2959994	Identifier	missing		2959952	0					
ANR	2959995	PrimaryExpression	""" """		2959952	1					
ANR	2959996	ExpressionStatement	missing += attrs [ i ]	112:19:3052:3071	2959952	1	True				
ANR	2959997	AssignmentExpression	missing += attrs [ i ]		2959952	0		+=			
ANR	2959998	Identifier	missing		2959952	0					
ANR	2959999	ArrayIndexing	attrs [ i ]		2959952	1					
ANR	2960000	Identifier	attrs		2959952	0					
ANR	2960001	Identifier	i		2959952	1					
ANR	2960002	ExpressionStatement	status = false	113:3:3076:3090	2959952	2	True				
ANR	2960003	AssignmentExpression	status = false		2959952	0		=			
ANR	2960004	Identifier	status		2959952	0					
ANR	2960005	Identifier	false		2959952	1					
ANR	2960006	ExpressionStatement	i ++	115:2:3098:3101	2959952	1	True				
ANR	2960007	PostIncDecOperationExpression	i ++		2959952	0					
ANR	2960008	Identifier	i		2959952	0					
ANR	2960009	IncDec	++		2959952	1					
ANR	2960010	ReturnStatement	return status ;	117:1:3107:3120	2959952	3	True				
ANR	2960011	Identifier	status		2959952	0					
ANR	2960012	ReturnType	bool		2959952	1					
ANR	2960013	Identifier	CheckRequiredAttrs		2959952	2					
ANR	2960014	ParameterList	"compat_classad :: ClassAd & ad , const char * attrs [ ] , std :: string & missing"		2959952	3					
ANR	2960015	Parameter	compat_classad :: ClassAd & ad	106:24:2860:2886	2959952	0	True				
ANR	2960016	ParameterType	compat_classad :: ClassAd &		2959952	0					
ANR	2960017	Identifier	ad		2959952	1					
ANR	2960018	Parameter	const char * attrs [ ]	106:53:2889:2907	2959952	1	True				
ANR	2960019	ParameterType	const char * [ ]		2959952	0					
ANR	2960020	Identifier	attrs		2959952	1					
ANR	2960021	Parameter	std :: string & missing	106:74:2910:2929	2959952	2	True				
ANR	2960022	ParameterType	std :: string &		2959952	0					
ANR	2960023	Identifier	missing		2959952	1					
ANR	2960024	CFGEntryNode	ENTRY		2959952		True				
ANR	2960025	CFGExitNode	EXIT		2959952		True				
ANR	2960026	Symbol	* attrs		2959952						
ANR	2960027	Symbol	ad		2959952						
ANR	2960028	Symbol	* i		2959952						
ANR	2960029	Symbol	NULL		2959952						
ANR	2960030	Symbol	missing		2959952						
ANR	2960031	Symbol	true		2959952						
ANR	2960032	Symbol	false		2959952						
ANR	2960033	Symbol	i		2959952						
ANR	2960034	Symbol	ad . Lookup		2959952						
ANR	2960035	Symbol	attrs		2959952						
ANR	2960036	Symbol	status		2959952						
ANR	2960037	Function	IsKeyword	121:0:3169:3331							
ANR	2960038	FunctionDef	IsKeyword (const char * kw)		2960037	0					
ANR	2960039	CompoundStatement		121:31:3200:3331	2960037	0					
ANR	2960040	IdentifierDeclStatement	int i = 0 ;	122:1:3203:3212	2960037	0	True				
ANR	2960041	IdentifierDecl	i = 0		2960037	0					
ANR	2960042	IdentifierDeclType	int		2960037	0					
ANR	2960043	Identifier	i		2960037	1					
ANR	2960044	AssignmentExpression	i = 0		2960037	2		=			
ANR	2960045	Identifier	i		2960037	0					
ANR	2960046	PrimaryExpression	0		2960037	1					
ANR	2960047	WhileStatement	while ( NULL != RESERVED [ i ] )		2960037	1					
ANR	2960048	Condition	NULL != RESERVED [ i ]	123:8:3222:3240	2960037	0	True				
ANR	2960049	EqualityExpression	NULL != RESERVED [ i ]		2960037	0		!=			
ANR	2960050	Identifier	NULL		2960037	0					
ANR	2960051	ArrayIndexing	RESERVED [ i ]		2960037	1					
ANR	2960052	Identifier	RESERVED		2960037	0					
ANR	2960053	Identifier	i		2960037	1					
ANR	2960054	CompoundStatement		3:29:42:42	2960037	1					
ANR	2960055	IfStatement	"if ( strcasecmp ( kw , RESERVED [ i ] ) == 0 )"		2960037	0					
ANR	2960056	Condition	"strcasecmp ( kw , RESERVED [ i ] ) == 0"	124:6:3251:3281	2960037	0	True				
ANR	2960057	EqualityExpression	"strcasecmp ( kw , RESERVED [ i ] ) == 0"		2960037	0		==			
ANR	2960058	CallExpression	"strcasecmp ( kw , RESERVED [ i ] )"		2960037	0					
ANR	2960059	Callee	strcasecmp		2960037	0					
ANR	2960060	Identifier	strcasecmp		2960037	0					
ANR	2960061	ArgumentList	kw		2960037	1					
ANR	2960062	Argument	kw		2960037	0					
ANR	2960063	Identifier	kw		2960037	0					
ANR	2960064	Argument	RESERVED [ i ]		2960037	1					
ANR	2960065	ArrayIndexing	RESERVED [ i ]		2960037	0					
ANR	2960066	Identifier	RESERVED		2960037	0					
ANR	2960067	Identifier	i		2960037	1					
ANR	2960068	PrimaryExpression	0		2960037	1					
ANR	2960069	CompoundStatement		4:39:83:83	2960037	1					
ANR	2960070	ReturnStatement	return true ;	125:3:3289:3300	2960037	0	True				
ANR	2960071	Identifier	true		2960037	0					
ANR	2960072	ExpressionStatement	i ++	127:2:3308:3311	2960037	1	True				
ANR	2960073	PostIncDecOperationExpression	i ++		2960037	0					
ANR	2960074	Identifier	i		2960037	0					
ANR	2960075	IncDec	++		2960037	1					
ANR	2960076	ReturnStatement	return false ;	129:1:3317:3329	2960037	2	True				
ANR	2960077	Identifier	false		2960037	0					
ANR	2960078	ReturnType	bool		2960037	1					
ANR	2960079	Identifier	IsKeyword		2960037	2					
ANR	2960080	ParameterList	const char * kw		2960037	3					
ANR	2960081	Parameter	const char * kw	121:15:3184:3197	2960037	0	True				
ANR	2960082	ParameterType	const char *		2960037	0					
ANR	2960083	Identifier	kw		2960037	1					
ANR	2960084	CFGEntryNode	ENTRY		2960037		True				
ANR	2960085	CFGExitNode	EXIT		2960037		True				
ANR	2960086	Symbol	* RESERVED		2960037						
ANR	2960087	Symbol	NULL		2960037						
ANR	2960088	Symbol	* i		2960037						
ANR	2960089	Symbol	true		2960037						
ANR	2960090	Symbol	false		2960037						
ANR	2960091	Symbol	i		2960037						
ANR	2960092	Symbol	RESERVED		2960037						
ANR	2960093	Symbol	kw		2960037						
ANR	2960094	Symbol	strcasecmp		2960037						
ANR	2960095	Function	IsSubmissionChange	133:0:3407:3532							
ANR	2960096	FunctionDef	IsSubmissionChange (const char * attr)		2960095	0					
ANR	2960097	CompoundStatement		133:42:3449:3532	2960095	0					
ANR	2960098	IfStatement	"if ( strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0 )"		2960095	0					
ANR	2960099	Condition	"strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0"	134:5:3456:3494	2960095	0	True				
ANR	2960100	EqualityExpression	"strcasecmp ( attr , ATTR_JOB_SUBMISSION ) == 0"		2960095	0		==			
ANR	2960101	CallExpression	"strcasecmp ( attr , ATTR_JOB_SUBMISSION )"		2960095	0					
ANR	2960102	Callee	strcasecmp		2960095	0					
ANR	2960103	Identifier	strcasecmp		2960095	0					
ANR	2960104	ArgumentList	attr		2960095	1					
ANR	2960105	Argument	attr		2960095	0					
ANR	2960106	Identifier	attr		2960095	0					
ANR	2960107	Argument	ATTR_JOB_SUBMISSION		2960095	1					
ANR	2960108	Identifier	ATTR_JOB_SUBMISSION		2960095	0					
ANR	2960109	PrimaryExpression	0		2960095	1					
ANR	2960110	CompoundStatement		2:46:47:47	2960095	1					
ANR	2960111	ReturnStatement	return true ;	135:2:3501:3512	2960095	0	True				
ANR	2960112	Identifier	true		2960095	0					
ANR	2960113	ReturnStatement	return false ;	137:1:3518:3530	2960095	1	True				
ANR	2960114	Identifier	false		2960095	0					
ANR	2960115	ReturnType	bool		2960095	1					
ANR	2960116	Identifier	IsSubmissionChange		2960095	2					
ANR	2960117	ParameterList	const char * attr		2960095	3					
ANR	2960118	Parameter	const char * attr	133:24:3431:3446	2960095	0	True				
ANR	2960119	ParameterType	const char *		2960095	0					
ANR	2960120	Identifier	attr		2960095	1					
ANR	2960121	CFGEntryNode	ENTRY		2960095		True				
ANR	2960122	CFGExitNode	EXIT		2960095		True				
ANR	2960123	Symbol	ATTR_JOB_SUBMISSION		2960095						
ANR	2960124	Symbol	true		2960095						
ANR	2960125	Symbol	false		2960095						
ANR	2960126	Symbol	attr		2960095						
ANR	2960127	Symbol	strcasecmp		2960095						
ANR	2960128	Function	AddAttribute	140:0:3535:5507							
ANR	2960129	FunctionDef	"AddAttribute (compat_classad :: ClassAd & ad , const char * name , Variant :: Map & job)"		2960128	0					
ANR	2960130	CompoundStatement		142:0:3619:5507	2960128	0					
ANR	2960131	IdentifierDeclStatement	ExprTree * expr ;	143:1:3622:3636	2960128	0	True				
ANR	2960132	IdentifierDecl	* expr		2960128	0					
ANR	2960133	IdentifierDeclType	ExprTree *		2960128	0					
ANR	2960134	Identifier	expr		2960128	1					
ANR	2960135	IdentifierDeclStatement	Variant :: Map * descriptors = NULL ;	144:1:3639:3671	2960128	1	True				
ANR	2960136	IdentifierDecl	* descriptors = NULL		2960128	0					
ANR	2960137	IdentifierDeclType	Variant :: Map *		2960128	0					
ANR	2960138	Identifier	descriptors		2960128	1					
ANR	2960139	AssignmentExpression	* descriptors = NULL		2960128	2		=			
ANR	2960140	Identifier	NULL		2960128	0					
ANR	2960141	Identifier	NULL		2960128	1					
ANR	2960142	IdentifierDeclStatement	Variant :: Map :: iterator it = job . find ( TYPEMAP_KEY ) ;	145:1:3674:3723	2960128	2	True				
ANR	2960143	IdentifierDecl	it = job . find ( TYPEMAP_KEY )		2960128	0					
ANR	2960144	IdentifierDeclType	Variant :: Map :: iterator		2960128	0					
ANR	2960145	Identifier	it		2960128	1					
ANR	2960146	AssignmentExpression	it = job . find ( TYPEMAP_KEY )		2960128	2		=			
ANR	2960147	Identifier	it		2960128	0					
ANR	2960148	CallExpression	job . find ( TYPEMAP_KEY )		2960128	1					
ANR	2960149	Callee	job . find		2960128	0					
ANR	2960150	MemberAccess	job . find		2960128	0					
ANR	2960151	Identifier	job		2960128	0					
ANR	2960152	Identifier	find		2960128	1					
ANR	2960153	ArgumentList	TYPEMAP_KEY		2960128	1					
ANR	2960154	Argument	TYPEMAP_KEY		2960128	0					
ANR	2960155	Identifier	TYPEMAP_KEY		2960128	0					
ANR	2960156	IfStatement	if ( it != job . end ( ) )		2960128	3					
ANR	2960157	Condition	it != job . end ( )	146:5:3730:3744	2960128	0	True				
ANR	2960158	EqualityExpression	it != job . end ( )		2960128	0		!=			
ANR	2960159	Identifier	it		2960128	0					
ANR	2960160	CallExpression	job . end ( )		2960128	1					
ANR	2960161	Callee	job . end		2960128	0					
ANR	2960162	MemberAccess	job . end		2960128	0					
ANR	2960163	Identifier	job		2960128	0					
ANR	2960164	Identifier	end		2960128	1					
ANR	2960165	ArgumentList			2960128	1					
ANR	2960166	CompoundStatement		5:22:127:127	2960128	1					
ANR	2960167	ExpressionStatement	descriptors = & ( ( it -> second ) . asMap ( ) )	147:2:3751:3789	2960128	0	True				
ANR	2960168	AssignmentExpression	descriptors = & ( ( it -> second ) . asMap ( ) )		2960128	0		=			
ANR	2960169	Identifier	descriptors		2960128	0					
ANR	2960170	UnaryOperationExpression	& ( ( it -> second ) . asMap ( ) )		2960128	1					
ANR	2960171	UnaryOperator	&		2960128	0					
ANR	2960172	CallExpression	( it -> second ) . asMap ( )		2960128	1					
ANR	2960173	Callee	( it -> second ) . asMap		2960128	0					
ANR	2960174	MemberAccess	( it -> second ) . asMap		2960128	0					
ANR	2960175	PtrMemberAccess	it -> second		2960128	0					
ANR	2960176	Identifier	it		2960128	0					
ANR	2960177	Identifier	second		2960128	1					
ANR	2960178	Identifier	asMap		2960128	1					
ANR	2960179	ArgumentList			2960128	1					
ANR	2960180	IfStatement	if ( ! ( expr = ad . Lookup ( name ) ) )		2960128	4					
ANR	2960181	Condition	! ( expr = ad . Lookup ( name ) )	157:5:4143:4167	2960128	0	True				
ANR	2960182	UnaryOperationExpression	! ( expr = ad . Lookup ( name ) )		2960128	0					
ANR	2960183	UnaryOperator	!		2960128	0					
ANR	2960184	AssignmentExpression	expr = ad . Lookup ( name )		2960128	1		=			
ANR	2960185	Identifier	expr		2960128	0					
ANR	2960186	CallExpression	ad . Lookup ( name )		2960128	1					
ANR	2960187	Callee	ad . Lookup		2960128	0					
ANR	2960188	MemberAccess	ad . Lookup		2960128	0					
ANR	2960189	Identifier	ad		2960128	0					
ANR	2960190	Identifier	Lookup		2960128	1					
ANR	2960191	ArgumentList	name		2960128	1					
ANR	2960192	Argument	name		2960128	0					
ANR	2960193	Identifier	name		2960128	0					
ANR	2960194	CompoundStatement		16:32:550:550	2960128	1					
ANR	2960195	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Warning: failed to lookup attribute '%s' from ad\\n"" , name )"	158:2:4174:4254	2960128	0	True				
ANR	2960196	CallExpression	"dprintf ( D_FULLDEBUG , ""Warning: failed to lookup attribute '%s' from ad\\n"" , name )"		2960128	0					
ANR	2960197	Callee	dprintf		2960128	0					
ANR	2960198	Identifier	dprintf		2960128	0					
ANR	2960199	ArgumentList	D_FULLDEBUG		2960128	1					
ANR	2960200	Argument	D_FULLDEBUG		2960128	0					
ANR	2960201	Identifier	D_FULLDEBUG		2960128	0					
ANR	2960202	Argument	"""Warning: failed to lookup attribute '%s' from ad\\n"""		2960128	1					
ANR	2960203	PrimaryExpression	"""Warning: failed to lookup attribute '%s' from ad\\n"""		2960128	0					
ANR	2960204	Argument	name		2960128	2					
ANR	2960205	Identifier	name		2960128	0					
ANR	2960206	ReturnStatement	return false ;	159:2:4258:4270	2960128	1	True				
ANR	2960207	Identifier	false		2960128	0					
ANR	2960208	IdentifierDeclStatement	classad :: Value value ;	162:4:4280:4300	2960128	5	True				
ANR	2960209	IdentifierDecl	value		2960128	0					
ANR	2960210	IdentifierDeclType	classad :: Value		2960128	0					
ANR	2960211	Identifier	value		2960128	1					
ANR	2960212	ExpressionStatement	"ad . EvaluateExpr ( expr , value )"	163:4:4306:4333	2960128	6	True				
ANR	2960213	CallExpression	"ad . EvaluateExpr ( expr , value )"		2960128	0					
ANR	2960214	Callee	ad . EvaluateExpr		2960128	0					
ANR	2960215	MemberAccess	ad . EvaluateExpr		2960128	0					
ANR	2960216	Identifier	ad		2960128	0					
ANR	2960217	Identifier	EvaluateExpr		2960128	1					
ANR	2960218	ArgumentList	expr		2960128	1					
ANR	2960219	Argument	expr		2960128	0					
ANR	2960220	Identifier	expr		2960128	0					
ANR	2960221	Argument	value		2960128	1					
ANR	2960222	Identifier	value		2960128	0					
ANR	2960223	IfStatement	if ( expr -> GetKind ( ) != ExprTree :: LITERAL_NODE || ( expr -> GetKind ( ) == ExprTree :: LITERAL_NODE && ( value . GetType ( ) == classad :: Value :: ERROR_VALUE || value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE ) ) )		2960128	7					
ANR	2960224	Condition	expr -> GetKind ( ) != ExprTree :: LITERAL_NODE || ( expr -> GetKind ( ) == ExprTree :: LITERAL_NODE && ( value . GetType ( ) == classad :: Value :: ERROR_VALUE || value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE ) )	167:5:4440:4698	2960128	0	True				
ANR	2960225	OrExpression	expr -> GetKind ( ) != ExprTree :: LITERAL_NODE || ( expr -> GetKind ( ) == ExprTree :: LITERAL_NODE && ( value . GetType ( ) == classad :: Value :: ERROR_VALUE || value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE ) )		2960128	0		||			
ANR	2960226	EqualityExpression	expr -> GetKind ( ) != ExprTree :: LITERAL_NODE		2960128	0		!=			
ANR	2960227	CallExpression	expr -> GetKind ( )		2960128	0					
ANR	2960228	Callee	expr -> GetKind		2960128	0					
ANR	2960229	PtrMemberAccess	expr -> GetKind		2960128	0					
ANR	2960230	Identifier	expr		2960128	0					
ANR	2960231	Identifier	GetKind		2960128	1					
ANR	2960232	ArgumentList			2960128	1					
ANR	2960233	Identifier	ExprTree :: LITERAL_NODE		2960128	1					
ANR	2960234	AndExpression	expr -> GetKind ( ) == ExprTree :: LITERAL_NODE && ( value . GetType ( ) == classad :: Value :: ERROR_VALUE || value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE )		2960128	1		&&			
ANR	2960235	EqualityExpression	expr -> GetKind ( ) == ExprTree :: LITERAL_NODE		2960128	0		==			
ANR	2960236	CallExpression	expr -> GetKind ( )		2960128	0					
ANR	2960237	Callee	expr -> GetKind		2960128	0					
ANR	2960238	PtrMemberAccess	expr -> GetKind		2960128	0					
ANR	2960239	Identifier	expr		2960128	0					
ANR	2960240	Identifier	GetKind		2960128	1					
ANR	2960241	ArgumentList			2960128	1					
ANR	2960242	Identifier	ExprTree :: LITERAL_NODE		2960128	1					
ANR	2960243	OrExpression	value . GetType ( ) == classad :: Value :: ERROR_VALUE || value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE		2960128	1		||			
ANR	2960244	EqualityExpression	value . GetType ( ) == classad :: Value :: ERROR_VALUE		2960128	0		==			
ANR	2960245	CallExpression	value . GetType ( )		2960128	0					
ANR	2960246	Callee	value . GetType		2960128	0					
ANR	2960247	MemberAccess	value . GetType		2960128	0					
ANR	2960248	Identifier	value		2960128	0					
ANR	2960249	Identifier	GetType		2960128	1					
ANR	2960250	ArgumentList			2960128	1					
ANR	2960251	Identifier	classad :: Value :: ERROR_VALUE		2960128	1					
ANR	2960252	OrExpression	value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE || value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE		2960128	1		||			
ANR	2960253	EqualityExpression	value . GetType ( ) == classad :: Value :: UNDEFINED_VALUE		2960128	0		==			
ANR	2960254	CallExpression	value . GetType ( )		2960128	0					
ANR	2960255	Callee	value . GetType		2960128	0					
ANR	2960256	MemberAccess	value . GetType		2960128	0					
ANR	2960257	Identifier	value		2960128	0					
ANR	2960258	Identifier	GetType		2960128	1					
ANR	2960259	ArgumentList			2960128	1					
ANR	2960260	Identifier	classad :: Value :: UNDEFINED_VALUE		2960128	1					
ANR	2960261	EqualityExpression	value . GetType ( ) == classad :: Value :: BOOLEAN_VALUE		2960128	1		==			
ANR	2960262	CallExpression	value . GetType ( )		2960128	0					
ANR	2960263	Callee	value . GetType		2960128	0					
ANR	2960264	MemberAccess	value . GetType		2960128	0					
ANR	2960265	Identifier	value		2960128	0					
ANR	2960266	Identifier	GetType		2960128	1					
ANR	2960267	ArgumentList			2960128	1					
ANR	2960268	Identifier	classad :: Value :: BOOLEAN_VALUE		2960128	1					
ANR	2960269	CompoundStatement		30:56:1081:1081	2960128	1					
ANR	2960270	IfStatement	if ( ! descriptors )		2960128	0					
ANR	2960271	Condition	! descriptors	172:6:4709:4720	2960128	0	True				
ANR	2960272	UnaryOperationExpression	! descriptors		2960128	0					
ANR	2960273	UnaryOperator	!		2960128	0					
ANR	2960274	Identifier	descriptors		2960128	1					
ANR	2960275	CompoundStatement		31:20:1103:1103	2960128	1					
ANR	2960276	ExpressionStatement	descriptors = new Variant :: Map ( )	174:3:4756:4788	2960128	0	True				
ANR	2960277	AssignmentExpression	descriptors = new Variant :: Map ( )		2960128	0		=			
ANR	2960278	Identifier	descriptors		2960128	0					
ANR	2960279	UnaryExpression	new Variant :: Map ( )		2960128	1					
ANR	2960280	ExpressionStatement	( * descriptors ) [ name ] = EXPR_TYPE	175:3:4793:4825	2960128	1	True				
ANR	2960281	AssignmentExpression	( * descriptors ) [ name ] = EXPR_TYPE		2960128	0		=			
ANR	2960282	ArrayIndexing	( * descriptors ) [ name ]		2960128	0					
ANR	2960283	UnaryOperationExpression	* descriptors		2960128	0					
ANR	2960284	UnaryOperator	*		2960128	0					
ANR	2960285	Identifier	descriptors		2960128	1					
ANR	2960286	Identifier	name		2960128	1					
ANR	2960287	Identifier	EXPR_TYPE		2960128	1					
ANR	2960288	ExpressionStatement	job [ TYPEMAP_KEY ] = * descriptors	177:3:4847:4878	2960128	2	True				
ANR	2960289	AssignmentExpression	job [ TYPEMAP_KEY ] = * descriptors		2960128	0		=			
ANR	2960290	ArrayIndexing	job [ TYPEMAP_KEY ]		2960128	0					
ANR	2960291	Identifier	job		2960128	0					
ANR	2960292	Identifier	TYPEMAP_KEY		2960128	1					
ANR	2960293	UnaryOperationExpression	* descriptors		2960128	1					
ANR	2960294	UnaryOperator	*		2960128	0					
ANR	2960295	Identifier	descriptors		2960128	1					
ANR	2960296	Statement	delete	178:3:4883:4888	2960128	3	True				
ANR	2960297	ExpressionStatement	descriptors	178:10:4890:4901	2960128	4	True				
ANR	2960298	Identifier	descriptors		2960128	0					
ANR	2960299	ElseStatement	else		2960128	0					
ANR	2960300	CompoundStatement		39:7:1294:1294	2960128	0					
ANR	2960301	ExpressionStatement	( * descriptors ) [ name ] = EXPR_TYPE	181:3:4919:4951	2960128	0	True				
ANR	2960302	AssignmentExpression	( * descriptors ) [ name ] = EXPR_TYPE		2960128	0		=			
ANR	2960303	ArrayIndexing	( * descriptors ) [ name ]		2960128	0					
ANR	2960304	UnaryOperationExpression	* descriptors		2960128	0					
ANR	2960305	UnaryOperator	*		2960128	0					
ANR	2960306	Identifier	descriptors		2960128	1					
ANR	2960307	Identifier	name		2960128	1					
ANR	2960308	Identifier	EXPR_TYPE		2960128	1					
ANR	2960309	SwitchStatement	switch ( value . GetType ( ) )		2960128	8					
ANR	2960310	Condition	value . GetType ( )	185:9:4970:4984	2960128	0	True				
ANR	2960311	CallExpression	value . GetType ( )		2960128	0					
ANR	2960312	Callee	value . GetType		2960128	0					
ANR	2960313	MemberAccess	value . GetType		2960128	0					
ANR	2960314	Identifier	value		2960128	0					
ANR	2960315	Identifier	GetType		2960128	1					
ANR	2960316	ArgumentList			2960128	1					
ANR	2960317	CompoundStatement		51:12:1551:1559	2960128	1					
ANR	2960318	Label	case classad :: Value :: INTEGER_VALUE :	186:8:4997:5031	2960128	0	True				
ANR	2960319	Identifier	classad :: Value :: INTEGER_VALUE		2960128	0					
ANR	2960320	IdentifierDeclStatement	int i ;	187:12:5045:5050	2960128	1	True				
ANR	2960321	IdentifierDecl	i		2960128	0					
ANR	2960322	IdentifierDeclType	int		2960128	0					
ANR	2960323	Identifier	i		2960128	1					
ANR	2960324	ExpressionStatement	value . IsIntegerValue ( i )	188:12:5064:5088	2960128	2	True				
ANR	2960325	CallExpression	value . IsIntegerValue ( i )		2960128	0					
ANR	2960326	Callee	value . IsIntegerValue		2960128	0					
ANR	2960327	MemberAccess	value . IsIntegerValue		2960128	0					
ANR	2960328	Identifier	value		2960128	0					
ANR	2960329	Identifier	IsIntegerValue		2960128	1					
ANR	2960330	ArgumentList	i		2960128	1					
ANR	2960331	Argument	i		2960128	0					
ANR	2960332	Identifier	i		2960128	0					
ANR	2960333	ExpressionStatement	job [ name ] = i	189:3:5093:5106	2960128	3	True				
ANR	2960334	AssignmentExpression	job [ name ] = i		2960128	0		=			
ANR	2960335	ArrayIndexing	job [ name ]		2960128	0					
ANR	2960336	Identifier	job		2960128	0					
ANR	2960337	Identifier	name		2960128	1					
ANR	2960338	Identifier	i		2960128	1					
ANR	2960339	BreakStatement	break ;	190:3:5111:5116	2960128	4	True				
ANR	2960340	Label	case classad :: Value :: REAL_VALUE :	191:8:5126:5157	2960128	5	True				
ANR	2960341	Identifier	classad :: Value :: REAL_VALUE		2960128	0					
ANR	2960342	IdentifierDeclStatement	double d ;	192:12:5171:5179	2960128	6	True				
ANR	2960343	IdentifierDecl	d		2960128	0					
ANR	2960344	IdentifierDeclType	double		2960128	0					
ANR	2960345	Identifier	d		2960128	1					
ANR	2960346	ExpressionStatement	value . IsRealValue ( d )	193:12:5193:5213	2960128	7	True				
ANR	2960347	CallExpression	value . IsRealValue ( d )		2960128	0					
ANR	2960348	Callee	value . IsRealValue		2960128	0					
ANR	2960349	MemberAccess	value . IsRealValue		2960128	0					
ANR	2960350	Identifier	value		2960128	0					
ANR	2960351	Identifier	IsRealValue		2960128	1					
ANR	2960352	ArgumentList	d		2960128	1					
ANR	2960353	Argument	d		2960128	0					
ANR	2960354	Identifier	d		2960128	0					
ANR	2960355	ExpressionStatement	job [ name ] = d	194:3:5218:5231	2960128	8	True				
ANR	2960356	AssignmentExpression	job [ name ] = d		2960128	0		=			
ANR	2960357	ArrayIndexing	job [ name ]		2960128	0					
ANR	2960358	Identifier	job		2960128	0					
ANR	2960359	Identifier	name		2960128	1					
ANR	2960360	Identifier	d		2960128	1					
ANR	2960361	BreakStatement	break ;	195:3:5236:5241	2960128	9	True				
ANR	2960362	Label	case classad :: Value :: ERROR_VALUE :	196:8:5251:5283	2960128	10	True				
ANR	2960363	Identifier	classad :: Value :: ERROR_VALUE		2960128	0					
ANR	2960364	Label	case classad :: Value :: UNDEFINED_VALUE :	197:8:5293:5329	2960128	11	True				
ANR	2960365	Identifier	classad :: Value :: UNDEFINED_VALUE		2960128	0					
ANR	2960366	Label	case classad :: Value :: BOOLEAN_VALUE :	198:8:5339:5373	2960128	12	True				
ANR	2960367	Identifier	classad :: Value :: BOOLEAN_VALUE		2960128	0					
ANR	2960368	Label	case classad :: Value :: STRING_VALUE :	199:8:5383:5416	2960128	13	True				
ANR	2960369	Identifier	classad :: Value :: STRING_VALUE		2960128	0					
ANR	2960370	Label	default :	200:2:5420:5427	2960128	14	True				
ANR	2960371	Identifier	default		2960128	0					
ANR	2960372	ExpressionStatement	job [ name ] = TrimQuotes ( ExprTreeToString ( expr ) )	201:12:5441:5487	2960128	15	True				
ANR	2960373	AssignmentExpression	job [ name ] = TrimQuotes ( ExprTreeToString ( expr ) )		2960128	0		=			
ANR	2960374	ArrayIndexing	job [ name ]		2960128	0					
ANR	2960375	Identifier	job		2960128	0					
ANR	2960376	Identifier	name		2960128	1					
ANR	2960377	CallExpression	TrimQuotes ( ExprTreeToString ( expr ) )		2960128	1					
ANR	2960378	Callee	TrimQuotes		2960128	0					
ANR	2960379	Identifier	TrimQuotes		2960128	0					
ANR	2960380	ArgumentList	ExprTreeToString ( expr )		2960128	1					
ANR	2960381	Argument	ExprTreeToString ( expr )		2960128	0					
ANR	2960382	CallExpression	ExprTreeToString ( expr )		2960128	0					
ANR	2960383	Callee	ExprTreeToString		2960128	0					
ANR	2960384	Identifier	ExprTreeToString		2960128	0					
ANR	2960385	ArgumentList	expr		2960128	1					
ANR	2960386	Argument	expr		2960128	0					
ANR	2960387	Identifier	expr		2960128	0					
ANR	2960388	ReturnStatement	return true ;	204:1:5494:5505	2960128	9	True				
ANR	2960389	Identifier	true		2960128	0					
ANR	2960390	ReturnType	bool		2960128	1					
ANR	2960391	Identifier	AddAttribute		2960128	2					
ANR	2960392	ParameterList	"compat_classad :: ClassAd & ad , const char * name , Variant :: Map & job"		2960128	3					
ANR	2960393	Parameter	compat_classad :: ClassAd & ad	141:13:3553:3579	2960128	0	True				
ANR	2960394	ParameterType	compat_classad :: ClassAd &		2960128	0					
ANR	2960395	Identifier	ad		2960128	1					
ANR	2960396	Parameter	const char * name	141:42:3582:3597	2960128	1	True				
ANR	2960397	ParameterType	const char *		2960128	0					
ANR	2960398	Identifier	name		2960128	1					
ANR	2960399	Parameter	Variant :: Map & job	141:60:3600:3616	2960128	2	True				
ANR	2960400	ParameterType	Variant :: Map &		2960128	0					
ANR	2960401	Identifier	job		2960128	1					
ANR	2960402	CFGEntryNode	ENTRY		2960128		True				
ANR	2960403	CFGExitNode	EXIT		2960128		True				
ANR	2960404	Symbol	classad :: Value :: UNDEFINED_VALUE		2960128						
ANR	2960405	Symbol	& it -> second		2960128						
ANR	2960406	Symbol	* descriptors		2960128						
ANR	2960407	Symbol	job . end		2960128						
ANR	2960408	Symbol	ExprTree :: LITERAL_NODE		2960128						
ANR	2960409	Symbol	ExprTreeToString		2960128						
ANR	2960410	Symbol	& ( it -> second ) . asMap		2960128						
ANR	2960411	Symbol	ad . Lookup		2960128						
ANR	2960412	Symbol	TrimQuotes		2960128						
ANR	2960413	Symbol	descriptors		2960128						
ANR	2960414	Symbol	value . GetType		2960128						
ANR	2960415	Symbol	* TYPEMAP_KEY		2960128						
ANR	2960416	Symbol	* * descriptors		2960128						
ANR	2960417	Symbol	expr		2960128						
ANR	2960418	Symbol	value		2960128						
ANR	2960419	Symbol	EXPR_TYPE		2960128						
ANR	2960420	Symbol	* name		2960128						
ANR	2960421	Symbol	expr -> GetKind		2960128						
ANR	2960422	Symbol	classad :: Value :: ERROR_VALUE		2960128						
ANR	2960423	Symbol	ad		2960128						
ANR	2960424	Symbol	NULL		2960128						
ANR	2960425	Symbol	d		2960128						
ANR	2960426	Symbol	TYPEMAP_KEY		2960128						
ANR	2960427	Symbol	* job		2960128						
ANR	2960428	Symbol	false		2960128						
ANR	2960429	Symbol	i		2960128						
ANR	2960430	Symbol	D_FULLDEBUG		2960128						
ANR	2960431	Symbol	it		2960128						
ANR	2960432	Symbol	job . find		2960128						
ANR	2960433	Symbol	it -> second		2960128						
ANR	2960434	Symbol	* it		2960128						
ANR	2960435	Symbol	* expr		2960128						
ANR	2960436	Symbol	name		2960128						
ANR	2960437	Symbol	true		2960128						
ANR	2960438	Symbol	job		2960128						
ANR	2960439	Symbol	classad :: Value :: BOOLEAN_VALUE		2960128						
ANR	2960440	Function	PopulateVariantMapFromAd	207:0:5510:5884							
ANR	2960441	FunctionDef	"PopulateVariantMapFromAd (compat_classad :: ClassAd & ad , Variant :: Map & _map)"		2960440	0					
ANR	2960442	CompoundStatement		209:0:5589:5884	2960440	0					
ANR	2960443	IdentifierDeclStatement	ExprTree * expr ;	210:1:5592:5606	2960440	0	True				
ANR	2960444	IdentifierDecl	* expr		2960440	0					
ANR	2960445	IdentifierDeclType	ExprTree *		2960440	0					
ANR	2960446	Identifier	expr		2960440	1					
ANR	2960447	IdentifierDeclStatement	const char * name ;	211:1:5609:5625	2960440	1	True				
ANR	2960448	IdentifierDecl	* name		2960440	0					
ANR	2960449	IdentifierDeclType	const char *		2960440	0					
ANR	2960450	Identifier	name		2960440	1					
ANR	2960451	ExpressionStatement	ad . ResetExpr ( )	212:1:5628:5642	2960440	2	True				
ANR	2960452	CallExpression	ad . ResetExpr ( )		2960440	0					
ANR	2960453	Callee	ad . ResetExpr		2960440	0					
ANR	2960454	MemberAccess	ad . ResetExpr		2960440	0					
ANR	2960455	Identifier	ad		2960440	0					
ANR	2960456	Identifier	ResetExpr		2960440	1					
ANR	2960457	ArgumentList			2960440	1					
ANR	2960458	ExpressionStatement	_map . clear ( )	213:1:5645:5657	2960440	3	True				
ANR	2960459	CallExpression	_map . clear ( )		2960440	0					
ANR	2960460	Callee	_map . clear		2960440	0					
ANR	2960461	MemberAccess	_map . clear		2960440	0					
ANR	2960462	Identifier	_map		2960440	0					
ANR	2960463	Identifier	clear		2960440	1					
ANR	2960464	ArgumentList			2960440	1					
ANR	2960465	WhileStatement	"while ( ad . NextExpr ( name , expr ) )"		2960440	4					
ANR	2960466	Condition	"ad . NextExpr ( name , expr )"	214:8:5667:5688	2960440	0	True				
ANR	2960467	CallExpression	"ad . NextExpr ( name , expr )"		2960440	0					
ANR	2960468	Callee	ad . NextExpr		2960440	0					
ANR	2960469	MemberAccess	ad . NextExpr		2960440	0					
ANR	2960470	Identifier	ad		2960440	0					
ANR	2960471	Identifier	NextExpr		2960440	1					
ANR	2960472	ArgumentList	name		2960440	1					
ANR	2960473	Argument	name		2960440	0					
ANR	2960474	Identifier	name		2960440	0					
ANR	2960475	Argument	expr		2960440	1					
ANR	2960476	Identifier	expr		2960440	0					
ANR	2960477	CompoundStatement		6:32:101:101	2960440	1					
ANR	2960478	IfStatement	"if ( ! AddAttribute ( ad , name , _map ) )"		2960440	0					
ANR	2960479	Condition	"! AddAttribute ( ad , name , _map )"	215:6:5699:5727	2960440	0	True				
ANR	2960480	UnaryOperationExpression	"! AddAttribute ( ad , name , _map )"		2960440	0					
ANR	2960481	UnaryOperator	!		2960440	0					
ANR	2960482	CallExpression	"AddAttribute ( ad , name , _map )"		2960440	1					
ANR	2960483	Callee	AddAttribute		2960440	0					
ANR	2960484	Identifier	AddAttribute		2960440	0					
ANR	2960485	ArgumentList	ad		2960440	1					
ANR	2960486	Argument	ad		2960440	0					
ANR	2960487	Identifier	ad		2960440	0					
ANR	2960488	Argument	name		2960440	1					
ANR	2960489	Identifier	name		2960440	0					
ANR	2960490	Argument	_map		2960440	2					
ANR	2960491	Identifier	_map		2960440	0					
ANR	2960492	CompoundStatement		7:37:140:140	2960440	1					
ANR	2960493	ReturnStatement	return false ;	216:20:5752:5764	2960440	0	True				
ANR	2960494	Identifier	false		2960440	0					
ANR	2960495	ReturnStatement	return true ;	225:1:5871:5882	2960440	5	True				
ANR	2960496	Identifier	true		2960440	0					
ANR	2960497	ReturnType	bool		2960440	1					
ANR	2960498	Identifier	PopulateVariantMapFromAd		2960440	2					
ANR	2960499	ParameterList	"compat_classad :: ClassAd & ad , Variant :: Map & _map"		2960440	3					
ANR	2960500	Parameter	compat_classad :: ClassAd & ad	208:25:5540:5566	2960440	0	True				
ANR	2960501	ParameterType	compat_classad :: ClassAd &		2960440	0					
ANR	2960502	Identifier	ad		2960440	1					
ANR	2960503	Parameter	Variant :: Map & _map	208:54:5569:5586	2960440	1	True				
ANR	2960504	ParameterType	Variant :: Map &		2960440	0					
ANR	2960505	Identifier	_map		2960440	1					
ANR	2960506	CFGEntryNode	ENTRY		2960440		True				
ANR	2960507	CFGExitNode	EXIT		2960440		True				
ANR	2960508	Symbol	_map		2960440						
ANR	2960509	Symbol	AddAttribute		2960440						
ANR	2960510	Symbol	ad		2960440						
ANR	2960511	Symbol	name		2960440						
ANR	2960512	Symbol	false		2960440						
ANR	2960513	Symbol	true		2960440						
ANR	2960514	Symbol	expr		2960440						
ANR	2960515	Symbol	ad . NextExpr		2960440						
ANR	2960516	Function	PopulateAdFromVariantMap	229:0:5888:8023							
ANR	2960517	FunctionDef	"PopulateAdFromVariantMap (Variant :: Map & _map , compat_classad :: ClassAd & ad , std :: string & text)"		2960516	0					
ANR	2960518	CompoundStatement		231:0:5986:8023	2960516	0					
ANR	2960519	IdentifierDeclStatement	Variant :: Map * descriptors = NULL ;	232:1:5989:6021	2960516	0	True				
ANR	2960520	IdentifierDecl	* descriptors = NULL		2960516	0					
ANR	2960521	IdentifierDeclType	Variant :: Map *		2960516	0					
ANR	2960522	Identifier	descriptors		2960516	1					
ANR	2960523	AssignmentExpression	* descriptors = NULL		2960516	2		=			
ANR	2960524	Identifier	NULL		2960516	0					
ANR	2960525	Identifier	NULL		2960516	1					
ANR	2960526	IdentifierDeclStatement	Variant :: Map :: iterator it = _map . find ( TYPEMAP_KEY ) ;	234:1:6068:6118	2960516	1	True				
ANR	2960527	IdentifierDecl	it = _map . find ( TYPEMAP_KEY )		2960516	0					
ANR	2960528	IdentifierDeclType	Variant :: Map :: iterator		2960516	0					
ANR	2960529	Identifier	it		2960516	1					
ANR	2960530	AssignmentExpression	it = _map . find ( TYPEMAP_KEY )		2960516	2		=			
ANR	2960531	Identifier	it		2960516	0					
ANR	2960532	CallExpression	_map . find ( TYPEMAP_KEY )		2960516	1					
ANR	2960533	Callee	_map . find		2960516	0					
ANR	2960534	MemberAccess	_map . find		2960516	0					
ANR	2960535	Identifier	_map		2960516	0					
ANR	2960536	Identifier	find		2960516	1					
ANR	2960537	ArgumentList	TYPEMAP_KEY		2960516	1					
ANR	2960538	Argument	TYPEMAP_KEY		2960516	0					
ANR	2960539	Identifier	TYPEMAP_KEY		2960516	0					
ANR	2960540	IfStatement	if ( it != _map . end ( ) )		2960516	2					
ANR	2960541	Condition	it != _map . end ( )	235:5:6125:6140	2960516	0	True				
ANR	2960542	EqualityExpression	it != _map . end ( )		2960516	0		!=			
ANR	2960543	Identifier	it		2960516	0					
ANR	2960544	CallExpression	_map . end ( )		2960516	1					
ANR	2960545	Callee	_map . end		2960516	0					
ANR	2960546	MemberAccess	_map . end		2960516	0					
ANR	2960547	Identifier	_map		2960516	0					
ANR	2960548	Identifier	end		2960516	1					
ANR	2960549	ArgumentList			2960516	1					
ANR	2960550	CompoundStatement		5:23:156:156	2960516	1					
ANR	2960551	ExpressionStatement	descriptors = & ( ( it -> second ) . asMap ( ) )	236:2:6147:6185	2960516	0	True				
ANR	2960552	AssignmentExpression	descriptors = & ( ( it -> second ) . asMap ( ) )		2960516	0		=			
ANR	2960553	Identifier	descriptors		2960516	0					
ANR	2960554	UnaryOperationExpression	& ( ( it -> second ) . asMap ( ) )		2960516	1					
ANR	2960555	UnaryOperator	&		2960516	0					
ANR	2960556	CallExpression	( it -> second ) . asMap ( )		2960516	1					
ANR	2960557	Callee	( it -> second ) . asMap		2960516	0					
ANR	2960558	MemberAccess	( it -> second ) . asMap		2960516	0					
ANR	2960559	PtrMemberAccess	it -> second		2960516	0					
ANR	2960560	Identifier	it		2960516	0					
ANR	2960561	Identifier	second		2960516	1					
ANR	2960562	Identifier	asMap		2960516	1					
ANR	2960563	ArgumentList			2960516	1					
ANR	2960564	ForStatement	for ( Variant :: Map :: const_iterator entry = _map . begin ( ) ; _map . end ( ) != entry ; entry ++ )		2960516	3					
ANR	2960565	ForInit	Variant :: Map :: const_iterator entry = _map . begin ( ) ;	239:6:6197:6246	2960516	0	True				
ANR	2960566	IdentifierDeclStatement	Variant :: Map :: const_iterator entry = _map . begin ( ) ;		2960516	0					
ANR	2960567	IdentifierDecl	entry = _map . begin ( )		2960516	0					
ANR	2960568	IdentifierDeclType	Variant :: Map :: const_iterator		2960516	0					
ANR	2960569	Identifier	entry		2960516	1					
ANR	2960570	AssignmentExpression	entry = _map . begin ( )		2960516	2		=			
ANR	2960571	Identifier	entry		2960516	0					
ANR	2960572	CallExpression	_map . begin ( )		2960516	1					
ANR	2960573	Callee	_map . begin		2960516	0					
ANR	2960574	MemberAccess	_map . begin		2960516	0					
ANR	2960575	Identifier	_map		2960516	0					
ANR	2960576	Identifier	begin		2960516	1					
ANR	2960577	ArgumentList			2960516	1					
ANR	2960578	Condition	_map . end ( ) != entry	239:57:6248:6266	2960516	1	True				
ANR	2960579	EqualityExpression	_map . end ( ) != entry		2960516	0		!=			
ANR	2960580	CallExpression	_map . end ( )		2960516	0					
ANR	2960581	Callee	_map . end		2960516	0					
ANR	2960582	MemberAccess	_map . end		2960516	0					
ANR	2960583	Identifier	_map		2960516	0					
ANR	2960584	Identifier	end		2960516	1					
ANR	2960585	ArgumentList			2960516	1					
ANR	2960586	Identifier	entry		2960516	1					
ANR	2960587	PostIncDecOperationExpression	entry ++	239:78:6269:6275	2960516	2	True				
ANR	2960588	Identifier	entry		2960516	0					
ANR	2960589	IncDec	++		2960516	1					
ANR	2960590	CompoundStatement		17:2:468:502	2960516	3					
ANR	2960591	IdentifierDeclStatement	const char * name = entry -> first . c_str ( ) ;	240:2:6282:6321	2960516	0	True				
ANR	2960592	IdentifierDecl	* name = entry -> first . c_str ( )		2960516	0					
ANR	2960593	IdentifierDeclType	const char *		2960516	0					
ANR	2960594	Identifier	name		2960516	1					
ANR	2960595	AssignmentExpression	* name = entry -> first . c_str ( )		2960516	2		=			
ANR	2960596	Identifier	name		2960516	0					
ANR	2960597	CallExpression	entry -> first . c_str ( )		2960516	1					
ANR	2960598	Callee	entry -> first . c_str		2960516	0					
ANR	2960599	MemberAccess	entry -> first . c_str		2960516	0					
ANR	2960600	PtrMemberAccess	entry -> first		2960516	0					
ANR	2960601	Identifier	entry		2960516	0					
ANR	2960602	Identifier	first		2960516	1					
ANR	2960603	Identifier	c_str		2960516	1					
ANR	2960604	ArgumentList			2960516	1					
ANR	2960605	IfStatement	if ( IsKeyword ( name ) )		2960516	1					
ANR	2960606	Condition	IsKeyword ( name )	242:6:6330:6344	2960516	0	True				
ANR	2960607	CallExpression	IsKeyword ( name )		2960516	0					
ANR	2960608	Callee	IsKeyword		2960516	0					
ANR	2960609	Identifier	IsKeyword		2960516	0					
ANR	2960610	ArgumentList	name		2960516	1					
ANR	2960611	Argument	name		2960516	0					
ANR	2960612	Identifier	name		2960516	0					
ANR	2960613	CompoundStatement		12:23:360:360	2960516	1					
ANR	2960614	ExpressionStatement	"text = ""Reserved ClassAd keyword cannot be an attribute name: "" + entry -> first"	243:3:6352:6429	2960516	0	True				
ANR	2960615	AssignmentExpression	"text = ""Reserved ClassAd keyword cannot be an attribute name: "" + entry -> first"		2960516	0		=			
ANR	2960616	Identifier	text		2960516	0					
ANR	2960617	AdditiveExpression	"""Reserved ClassAd keyword cannot be an attribute name: "" + entry -> first"		2960516	1		+			
ANR	2960618	PrimaryExpression	"""Reserved ClassAd keyword cannot be an attribute name: """		2960516	0					
ANR	2960619	PtrMemberAccess	entry -> first		2960516	1					
ANR	2960620	Identifier	entry		2960516	0					
ANR	2960621	Identifier	first		2960516	1					
ANR	2960622	ReturnStatement	return false ;	244:3:6434:6446	2960516	1	True				
ANR	2960623	Identifier	false		2960516	0					
ANR	2960624	IdentifierDeclStatement	Variant value = _map [ entry -> first ] ;	247:2:6455:6489	2960516	2	True				
ANR	2960625	IdentifierDecl	value = _map [ entry -> first ]		2960516	0					
ANR	2960626	IdentifierDeclType	Variant		2960516	0					
ANR	2960627	Identifier	value		2960516	1					
ANR	2960628	AssignmentExpression	value = _map [ entry -> first ]		2960516	2		=			
ANR	2960629	Identifier	value		2960516	0					
ANR	2960630	ArrayIndexing	_map [ entry -> first ]		2960516	1					
ANR	2960631	Identifier	_map		2960516	0					
ANR	2960632	PtrMemberAccess	entry -> first		2960516	1					
ANR	2960633	Identifier	entry		2960516	0					
ANR	2960634	Identifier	first		2960516	1					
ANR	2960635	IfStatement	"if ( 0 == strcmp ( name , EXPR_TYPE . c_str ( ) ) )"		2960516	3					
ANR	2960636	Condition	"0 == strcmp ( name , EXPR_TYPE . c_str ( ) )"	250:6:6523:6557	2960516	0	True				
ANR	2960637	EqualityExpression	"0 == strcmp ( name , EXPR_TYPE . c_str ( ) )"		2960516	0		==			
ANR	2960638	PrimaryExpression	0		2960516	0					
ANR	2960639	CallExpression	"strcmp ( name , EXPR_TYPE . c_str ( ) )"		2960516	1					
ANR	2960640	Callee	strcmp		2960516	0					
ANR	2960641	Identifier	strcmp		2960516	0					
ANR	2960642	ArgumentList	name		2960516	1					
ANR	2960643	Argument	name		2960516	0					
ANR	2960644	Identifier	name		2960516	0					
ANR	2960645	Argument	EXPR_TYPE . c_str ( )		2960516	1					
ANR	2960646	CallExpression	EXPR_TYPE . c_str ( )		2960516	0					
ANR	2960647	Callee	EXPR_TYPE . c_str		2960516	0					
ANR	2960648	MemberAccess	EXPR_TYPE . c_str		2960516	0					
ANR	2960649	Identifier	EXPR_TYPE		2960516	0					
ANR	2960650	Identifier	c_str		2960516	1					
ANR	2960651	ArgumentList			2960516	1					
ANR	2960652	CompoundStatement		20:43:573:573	2960516	1					
ANR	2960653	BreakStatement	break ;	251:3:6565:6570	2960516	0	True				
ANR	2960654	IfStatement	if ( descriptors && ( it = descriptors -> find ( entry -> first ) ) != descriptors -> end ( ) && it -> second == EXPR_TYPE )		2960516	4					
ANR	2960655	Condition	descriptors && ( it = descriptors -> find ( entry -> first ) ) != descriptors -> end ( ) && it -> second == EXPR_TYPE	256:6:6660:6767	2960516	0	True				
ANR	2960656	AndExpression	descriptors && ( it = descriptors -> find ( entry -> first ) ) != descriptors -> end ( ) && it -> second == EXPR_TYPE		2960516	0		&&			
ANR	2960657	Identifier	descriptors		2960516	0					
ANR	2960658	AndExpression	( it = descriptors -> find ( entry -> first ) ) != descriptors -> end ( ) && it -> second == EXPR_TYPE		2960516	1		&&			
ANR	2960659	EqualityExpression	( it = descriptors -> find ( entry -> first ) ) != descriptors -> end ( )		2960516	0		!=			
ANR	2960660	AssignmentExpression	it = descriptors -> find ( entry -> first )		2960516	0		=			
ANR	2960661	Identifier	it		2960516	0					
ANR	2960662	CallExpression	descriptors -> find ( entry -> first )		2960516	1					
ANR	2960663	Callee	descriptors -> find		2960516	0					
ANR	2960664	PtrMemberAccess	descriptors -> find		2960516	0					
ANR	2960665	Identifier	descriptors		2960516	0					
ANR	2960666	Identifier	find		2960516	1					
ANR	2960667	ArgumentList	entry -> first		2960516	1					
ANR	2960668	Argument	entry -> first		2960516	0					
ANR	2960669	PtrMemberAccess	entry -> first		2960516	0					
ANR	2960670	Identifier	entry		2960516	0					
ANR	2960671	Identifier	first		2960516	1					
ANR	2960672	CallExpression	descriptors -> end ( )		2960516	1					
ANR	2960673	Callee	descriptors -> end		2960516	0					
ANR	2960674	PtrMemberAccess	descriptors -> end		2960516	0					
ANR	2960675	Identifier	descriptors		2960516	0					
ANR	2960676	Identifier	end		2960516	1					
ANR	2960677	ArgumentList			2960516	1					
ANR	2960678	EqualityExpression	it -> second == EXPR_TYPE		2960516	1		==			
ANR	2960679	PtrMemberAccess	it -> second		2960516	0					
ANR	2960680	Identifier	it		2960516	0					
ANR	2960681	Identifier	second		2960516	1					
ANR	2960682	Identifier	EXPR_TYPE		2960516	1					
ANR	2960683	CompoundStatement		28:28:783:783	2960516	1					
ANR	2960684	ExpressionStatement	"ad . AssignExpr ( entry -> first . c_str ( ) , value . asString ( ) . c_str ( ) )"	259:3:6775:6836	2960516	0	True				
ANR	2960685	CallExpression	"ad . AssignExpr ( entry -> first . c_str ( ) , value . asString ( ) . c_str ( ) )"		2960516	0					
ANR	2960686	Callee	ad . AssignExpr		2960516	0					
ANR	2960687	MemberAccess	ad . AssignExpr		2960516	0					
ANR	2960688	Identifier	ad		2960516	0					
ANR	2960689	Identifier	AssignExpr		2960516	1					
ANR	2960690	ArgumentList	entry -> first . c_str ( )		2960516	1					
ANR	2960691	Argument	entry -> first . c_str ( )		2960516	0					
ANR	2960692	CallExpression	entry -> first . c_str ( )		2960516	0					
ANR	2960693	Callee	entry -> first . c_str		2960516	0					
ANR	2960694	MemberAccess	entry -> first . c_str		2960516	0					
ANR	2960695	PtrMemberAccess	entry -> first		2960516	0					
ANR	2960696	Identifier	entry		2960516	0					
ANR	2960697	Identifier	first		2960516	1					
ANR	2960698	Identifier	c_str		2960516	1					
ANR	2960699	ArgumentList			2960516	1					
ANR	2960700	Argument	value . asString ( ) . c_str ( )		2960516	1					
ANR	2960701	CallExpression	value . asString ( ) . c_str ( )		2960516	0					
ANR	2960702	Callee	value . asString ( ) . c_str		2960516	0					
ANR	2960703	MemberAccess	value . asString ( ) . c_str		2960516	0					
ANR	2960704	CallExpression	value . asString ( )		2960516	0					
ANR	2960705	Callee	value . asString		2960516	0					
ANR	2960706	MemberAccess	value . asString		2960516	0					
ANR	2960707	Identifier	value		2960516	0					
ANR	2960708	Identifier	asString		2960516	1					
ANR	2960709	ArgumentList			2960516	1					
ANR	2960710	Identifier	c_str		2960516	1					
ANR	2960711	ArgumentList			2960516	1					
ANR	2960712	ElseStatement	else		2960516	0					
ANR	2960713	CompoundStatement		31:7:913:913	2960516	0					
ANR	2960714	SwitchStatement	switch ( value . getType ( ) )		2960516	0					
ANR	2960715	Condition	value . getType ( )	262:11:6913:6927	2960516	0	True				
ANR	2960716	CallExpression	value . getType ( )		2960516	0					
ANR	2960717	Callee	value . getType		2960516	0					
ANR	2960718	MemberAccess	value . getType		2960516	0					
ANR	2960719	Identifier	value		2960516	0					
ANR	2960720	Identifier	getType		2960516	1					
ANR	2960721	ArgumentList			2960516	1					
ANR	2960722	CompoundStatement		32:28:943:943	2960516	1					
ANR	2960723	Label	case VAR_UINT8 :	263:4:6936:6950	2960516	0	True				
ANR	2960724	Identifier	VAR_UINT8		2960516	0					
ANR	2960725	ExpressionStatement	"ad . Assign ( name , value . asUint8 ( ) )"	264:5:6957:6989	2960516	1	True				
ANR	2960726	CallExpression	"ad . Assign ( name , value . asUint8 ( ) )"		2960516	0					
ANR	2960727	Callee	ad . Assign		2960516	0					
ANR	2960728	MemberAccess	ad . Assign		2960516	0					
ANR	2960729	Identifier	ad		2960516	0					
ANR	2960730	Identifier	Assign		2960516	1					
ANR	2960731	ArgumentList	name		2960516	1					
ANR	2960732	Argument	name		2960516	0					
ANR	2960733	Identifier	name		2960516	0					
ANR	2960734	Argument	value . asUint8 ( )		2960516	1					
ANR	2960735	CallExpression	value . asUint8 ( )		2960516	0					
ANR	2960736	Callee	value . asUint8		2960516	0					
ANR	2960737	MemberAccess	value . asUint8		2960516	0					
ANR	2960738	Identifier	value		2960516	0					
ANR	2960739	Identifier	asUint8		2960516	1					
ANR	2960740	ArgumentList			2960516	1					
ANR	2960741	BreakStatement	break ;	265:5:6996:7001	2960516	2	True				
ANR	2960742	Label	case VAR_UINT16 :	266:4:7007:7022	2960516	3	True				
ANR	2960743	Identifier	VAR_UINT16		2960516	0					
ANR	2960744	ExpressionStatement	"ad . Assign ( name , value . asUint16 ( ) )"	267:5:7029:7062	2960516	4	True				
ANR	2960745	CallExpression	"ad . Assign ( name , value . asUint16 ( ) )"		2960516	0					
ANR	2960746	Callee	ad . Assign		2960516	0					
ANR	2960747	MemberAccess	ad . Assign		2960516	0					
ANR	2960748	Identifier	ad		2960516	0					
ANR	2960749	Identifier	Assign		2960516	1					
ANR	2960750	ArgumentList	name		2960516	1					
ANR	2960751	Argument	name		2960516	0					
ANR	2960752	Identifier	name		2960516	0					
ANR	2960753	Argument	value . asUint16 ( )		2960516	1					
ANR	2960754	CallExpression	value . asUint16 ( )		2960516	0					
ANR	2960755	Callee	value . asUint16		2960516	0					
ANR	2960756	MemberAccess	value . asUint16		2960516	0					
ANR	2960757	Identifier	value		2960516	0					
ANR	2960758	Identifier	asUint16		2960516	1					
ANR	2960759	ArgumentList			2960516	1					
ANR	2960760	BreakStatement	break ;	268:5:7069:7074	2960516	5	True				
ANR	2960761	Label	case VAR_UINT32 :	269:4:7080:7095	2960516	6	True				
ANR	2960762	Identifier	VAR_UINT32		2960516	0					
ANR	2960763	Label	case VAR_UINT64 :	270:4:7101:7116	2960516	7	True				
ANR	2960764	Identifier	VAR_UINT64		2960516	0					
ANR	2960765	ExpressionStatement	"ad . Assign ( name , value . asUint32 ( ) )"	271:5:7123:7156	2960516	8	True				
ANR	2960766	CallExpression	"ad . Assign ( name , value . asUint32 ( ) )"		2960516	0					
ANR	2960767	Callee	ad . Assign		2960516	0					
ANR	2960768	MemberAccess	ad . Assign		2960516	0					
ANR	2960769	Identifier	ad		2960516	0					
ANR	2960770	Identifier	Assign		2960516	1					
ANR	2960771	ArgumentList	name		2960516	1					
ANR	2960772	Argument	name		2960516	0					
ANR	2960773	Identifier	name		2960516	0					
ANR	2960774	Argument	value . asUint32 ( )		2960516	1					
ANR	2960775	CallExpression	value . asUint32 ( )		2960516	0					
ANR	2960776	Callee	value . asUint32		2960516	0					
ANR	2960777	MemberAccess	value . asUint32		2960516	0					
ANR	2960778	Identifier	value		2960516	0					
ANR	2960779	Identifier	asUint32		2960516	1					
ANR	2960780	ArgumentList			2960516	1					
ANR	2960781	BreakStatement	break ;	272:5:7163:7168	2960516	9	True				
ANR	2960782	Label	case VAR_INT8 :	273:4:7174:7187	2960516	10	True				
ANR	2960783	Identifier	VAR_INT8		2960516	0					
ANR	2960784	ExpressionStatement	"ad . Assign ( name , value . asInt8 ( ) )"	274:5:7194:7225	2960516	11	True				
ANR	2960785	CallExpression	"ad . Assign ( name , value . asInt8 ( ) )"		2960516	0					
ANR	2960786	Callee	ad . Assign		2960516	0					
ANR	2960787	MemberAccess	ad . Assign		2960516	0					
ANR	2960788	Identifier	ad		2960516	0					
ANR	2960789	Identifier	Assign		2960516	1					
ANR	2960790	ArgumentList	name		2960516	1					
ANR	2960791	Argument	name		2960516	0					
ANR	2960792	Identifier	name		2960516	0					
ANR	2960793	Argument	value . asInt8 ( )		2960516	1					
ANR	2960794	CallExpression	value . asInt8 ( )		2960516	0					
ANR	2960795	Callee	value . asInt8		2960516	0					
ANR	2960796	MemberAccess	value . asInt8		2960516	0					
ANR	2960797	Identifier	value		2960516	0					
ANR	2960798	Identifier	asInt8		2960516	1					
ANR	2960799	ArgumentList			2960516	1					
ANR	2960800	BreakStatement	break ;	275:5:7232:7237	2960516	12	True				
ANR	2960801	Label	case VAR_INT16 :	276:4:7243:7257	2960516	13	True				
ANR	2960802	Identifier	VAR_INT16		2960516	0					
ANR	2960803	ExpressionStatement	"ad . Assign ( name , value . asInt16 ( ) )"	277:5:7264:7296	2960516	14	True				
ANR	2960804	CallExpression	"ad . Assign ( name , value . asInt16 ( ) )"		2960516	0					
ANR	2960805	Callee	ad . Assign		2960516	0					
ANR	2960806	MemberAccess	ad . Assign		2960516	0					
ANR	2960807	Identifier	ad		2960516	0					
ANR	2960808	Identifier	Assign		2960516	1					
ANR	2960809	ArgumentList	name		2960516	1					
ANR	2960810	Argument	name		2960516	0					
ANR	2960811	Identifier	name		2960516	0					
ANR	2960812	Argument	value . asInt16 ( )		2960516	1					
ANR	2960813	CallExpression	value . asInt16 ( )		2960516	0					
ANR	2960814	Callee	value . asInt16		2960516	0					
ANR	2960815	MemberAccess	value . asInt16		2960516	0					
ANR	2960816	Identifier	value		2960516	0					
ANR	2960817	Identifier	asInt16		2960516	1					
ANR	2960818	ArgumentList			2960516	1					
ANR	2960819	BreakStatement	break ;	278:5:7303:7308	2960516	15	True				
ANR	2960820	Label	case VAR_INT32 :	279:4:7314:7328	2960516	16	True				
ANR	2960821	Identifier	VAR_INT32		2960516	0					
ANR	2960822	Label	case VAR_INT64 :	280:4:7334:7348	2960516	17	True				
ANR	2960823	Identifier	VAR_INT64		2960516	0					
ANR	2960824	ExpressionStatement	"ad . Assign ( name , value . asInt32 ( ) )"	281:5:7355:7387	2960516	18	True				
ANR	2960825	CallExpression	"ad . Assign ( name , value . asInt32 ( ) )"		2960516	0					
ANR	2960826	Callee	ad . Assign		2960516	0					
ANR	2960827	MemberAccess	ad . Assign		2960516	0					
ANR	2960828	Identifier	ad		2960516	0					
ANR	2960829	Identifier	Assign		2960516	1					
ANR	2960830	ArgumentList	name		2960516	1					
ANR	2960831	Argument	name		2960516	0					
ANR	2960832	Identifier	name		2960516	0					
ANR	2960833	Argument	value . asInt32 ( )		2960516	1					
ANR	2960834	CallExpression	value . asInt32 ( )		2960516	0					
ANR	2960835	Callee	value . asInt32		2960516	0					
ANR	2960836	MemberAccess	value . asInt32		2960516	0					
ANR	2960837	Identifier	value		2960516	0					
ANR	2960838	Identifier	asInt32		2960516	1					
ANR	2960839	ArgumentList			2960516	1					
ANR	2960840	BreakStatement	break ;	282:5:7394:7399	2960516	19	True				
ANR	2960841	Label	case VAR_FLOAT :	283:4:7405:7419	2960516	20	True				
ANR	2960842	Identifier	VAR_FLOAT		2960516	0					
ANR	2960843	ExpressionStatement	"ad . Assign ( name , value . asFloat ( ) )"	284:5:7426:7458	2960516	21	True				
ANR	2960844	CallExpression	"ad . Assign ( name , value . asFloat ( ) )"		2960516	0					
ANR	2960845	Callee	ad . Assign		2960516	0					
ANR	2960846	MemberAccess	ad . Assign		2960516	0					
ANR	2960847	Identifier	ad		2960516	0					
ANR	2960848	Identifier	Assign		2960516	1					
ANR	2960849	ArgumentList	name		2960516	1					
ANR	2960850	Argument	name		2960516	0					
ANR	2960851	Identifier	name		2960516	0					
ANR	2960852	Argument	value . asFloat ( )		2960516	1					
ANR	2960853	CallExpression	value . asFloat ( )		2960516	0					
ANR	2960854	Callee	value . asFloat		2960516	0					
ANR	2960855	MemberAccess	value . asFloat		2960516	0					
ANR	2960856	Identifier	value		2960516	0					
ANR	2960857	Identifier	asFloat		2960516	1					
ANR	2960858	ArgumentList			2960516	1					
ANR	2960859	BreakStatement	break ;	285:5:7465:7470	2960516	22	True				
ANR	2960860	Label	case VAR_DOUBLE :	286:4:7476:7491	2960516	23	True				
ANR	2960861	Identifier	VAR_DOUBLE		2960516	0					
ANR	2960862	ExpressionStatement	"ad . Assign ( name , value . asDouble ( ) )"	287:5:7498:7531	2960516	24	True				
ANR	2960863	CallExpression	"ad . Assign ( name , value . asDouble ( ) )"		2960516	0					
ANR	2960864	Callee	ad . Assign		2960516	0					
ANR	2960865	MemberAccess	ad . Assign		2960516	0					
ANR	2960866	Identifier	ad		2960516	0					
ANR	2960867	Identifier	Assign		2960516	1					
ANR	2960868	ArgumentList	name		2960516	1					
ANR	2960869	Argument	name		2960516	0					
ANR	2960870	Identifier	name		2960516	0					
ANR	2960871	Argument	value . asDouble ( )		2960516	1					
ANR	2960872	CallExpression	value . asDouble ( )		2960516	0					
ANR	2960873	Callee	value . asDouble		2960516	0					
ANR	2960874	MemberAccess	value . asDouble		2960516	0					
ANR	2960875	Identifier	value		2960516	0					
ANR	2960876	Identifier	asDouble		2960516	1					
ANR	2960877	ArgumentList			2960516	1					
ANR	2960878	BreakStatement	break ;	288:5:7538:7543	2960516	25	True				
ANR	2960879	Label	case VAR_BOOL :	289:4:7549:7562	2960516	26	True				
ANR	2960880	Identifier	VAR_BOOL		2960516	0					
ANR	2960881	Label	case VAR_UUID :	290:4:7568:7581	2960516	27	True				
ANR	2960882	Identifier	VAR_UUID		2960516	0					
ANR	2960883	Label	case VAR_STRING :	291:4:7587:7602	2960516	28	True				
ANR	2960884	Identifier	VAR_STRING		2960516	0					
ANR	2960885	ExpressionStatement	"ad . Assign ( name , value . asString ( ) . c_str ( ) )"	292:5:7609:7650	2960516	29	True				
ANR	2960886	CallExpression	"ad . Assign ( name , value . asString ( ) . c_str ( ) )"		2960516	0					
ANR	2960887	Callee	ad . Assign		2960516	0					
ANR	2960888	MemberAccess	ad . Assign		2960516	0					
ANR	2960889	Identifier	ad		2960516	0					
ANR	2960890	Identifier	Assign		2960516	1					
ANR	2960891	ArgumentList	name		2960516	1					
ANR	2960892	Argument	name		2960516	0					
ANR	2960893	Identifier	name		2960516	0					
ANR	2960894	Argument	value . asString ( ) . c_str ( )		2960516	1					
ANR	2960895	CallExpression	value . asString ( ) . c_str ( )		2960516	0					
ANR	2960896	Callee	value . asString ( ) . c_str		2960516	0					
ANR	2960897	MemberAccess	value . asString ( ) . c_str		2960516	0					
ANR	2960898	CallExpression	value . asString ( )		2960516	0					
ANR	2960899	Callee	value . asString		2960516	0					
ANR	2960900	MemberAccess	value . asString		2960516	0					
ANR	2960901	Identifier	value		2960516	0					
ANR	2960902	Identifier	asString		2960516	1					
ANR	2960903	ArgumentList			2960516	1					
ANR	2960904	Identifier	c_str		2960516	1					
ANR	2960905	ArgumentList			2960516	1					
ANR	2960906	BreakStatement	break ;	293:5:7657:7662	2960516	30	True				
ANR	2960907	Label	default :	294:4:7668:7675	2960516	31	True				
ANR	2960908	Identifier	default		2960516	0					
ANR	2960909	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Warning: Unknown/unsupported Variant type in map for attribute '%s'\\n"" , name )"	295:5:7682:7781	2960516	32	True				
ANR	2960910	CallExpression	"dprintf ( D_FULLDEBUG , ""Warning: Unknown/unsupported Variant type in map for attribute '%s'\\n"" , name )"		2960516	0					
ANR	2960911	Callee	dprintf		2960516	0					
ANR	2960912	Identifier	dprintf		2960516	0					
ANR	2960913	ArgumentList	D_FULLDEBUG		2960516	1					
ANR	2960914	Argument	D_FULLDEBUG		2960516	0					
ANR	2960915	Identifier	D_FULLDEBUG		2960516	0					
ANR	2960916	Argument	"""Warning: Unknown/unsupported Variant type in map for attribute '%s'\\n"""		2960516	1					
ANR	2960917	PrimaryExpression	"""Warning: Unknown/unsupported Variant type in map for attribute '%s'\\n"""		2960516	0					
ANR	2960918	Argument	name		2960516	2					
ANR	2960919	Identifier	name		2960516	0					
ANR	2960920	IfStatement	if ( ! descriptors )		2960516	4					
ANR	2960921	Condition	! descriptors	300:5:7801:7812	2960516	0	True				
ANR	2960922	UnaryOperationExpression	! descriptors		2960516	0					
ANR	2960923	UnaryOperator	!		2960516	0					
ANR	2960924	Identifier	descriptors		2960516	1					
ANR	2960925	CompoundStatement		70:19:1828:1828	2960516	1					
ANR	2960926	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Warning - no type map found in this Variant::Map. Continuing...\\n"" )"	301:2:7819:7907	2960516	0	True				
ANR	2960927	CallExpression	"dprintf ( D_FULLDEBUG , ""Warning - no type map found in this Variant::Map. Continuing...\\n"" )"		2960516	0					
ANR	2960928	Callee	dprintf		2960516	0					
ANR	2960929	Identifier	dprintf		2960516	0					
ANR	2960930	ArgumentList	D_FULLDEBUG		2960516	1					
ANR	2960931	Argument	D_FULLDEBUG		2960516	0					
ANR	2960932	Identifier	D_FULLDEBUG		2960516	0					
ANR	2960933	Argument	"""Warning - no type map found in this Variant::Map. Continuing...\\n"""		2960516	1					
ANR	2960934	PrimaryExpression	"""Warning - no type map found in this Variant::Map. Continuing...\\n"""		2960516	0					
ANR	2960935	ReturnStatement	return true ;	309:1:8010:8021	2960516	5	True				
ANR	2960936	Identifier	true		2960516	0					
ANR	2960937	ReturnType	bool		2960516	1					
ANR	2960938	Identifier	PopulateAdFromVariantMap		2960516	2					
ANR	2960939	ParameterList	"Variant :: Map & _map , compat_classad :: ClassAd & ad , std :: string & text"		2960516	3					
ANR	2960940	Parameter	Variant :: Map & _map	230:25:5918:5935	2960516	0	True				
ANR	2960941	ParameterType	Variant :: Map &		2960516	0					
ANR	2960942	Identifier	_map		2960516	1					
ANR	2960943	Parameter	compat_classad :: ClassAd & ad	230:45:5938:5964	2960516	1	True				
ANR	2960944	ParameterType	compat_classad :: ClassAd &		2960516	0					
ANR	2960945	Identifier	ad		2960516	1					
ANR	2960946	Parameter	std :: string & text	230:74:5967:5983	2960516	2	True				
ANR	2960947	ParameterType	std :: string &		2960516	0					
ANR	2960948	Identifier	text		2960516	1					
ANR	2960949	CFGEntryNode	ENTRY		2960516		True				
ANR	2960950	CFGExitNode	EXIT		2960516		True				
ANR	2960951	Symbol	_map . find		2960516						
ANR	2960952	Symbol	& it -> second		2960516						
ANR	2960953	Symbol	_map . end		2960516						
ANR	2960954	Symbol	* * entry		2960516						
ANR	2960955	Symbol	entry -> first		2960516						
ANR	2960956	Symbol	* descriptors		2960516						
ANR	2960957	Symbol	descriptors -> find		2960516						
ANR	2960958	Symbol	* _map		2960516						
ANR	2960959	Symbol	value . asUint32		2960516						
ANR	2960960	Symbol	& ( it -> second ) . asMap		2960516						
ANR	2960961	Symbol	value . getType		2960516						
ANR	2960962	Symbol	value . asString ( ) . c_str		2960516						
ANR	2960963	Symbol	descriptors		2960516						
ANR	2960964	Symbol	value . asInt16		2960516						
ANR	2960965	Symbol	value . asUint16		2960516						
ANR	2960966	Symbol	text		2960516						
ANR	2960967	Symbol	value . asString		2960516						
ANR	2960968	Symbol	value		2960516						
ANR	2960969	Symbol	EXPR_TYPE . c_str		2960516						
ANR	2960970	Symbol	* entry		2960516						
ANR	2960971	Symbol	EXPR_TYPE		2960516						
ANR	2960972	Symbol	* entry -> first		2960516						
ANR	2960973	Symbol	strcmp		2960516						
ANR	2960974	Symbol	ad		2960516						
ANR	2960975	Symbol	NULL		2960516						
ANR	2960976	Symbol	value . asInt8		2960516						
ANR	2960977	Symbol	TYPEMAP_KEY		2960516						
ANR	2960978	Symbol	IsKeyword		2960516						
ANR	2960979	Symbol	false		2960516						
ANR	2960980	Symbol	descriptors -> end		2960516						
ANR	2960981	Symbol	D_FULLDEBUG		2960516						
ANR	2960982	Symbol	it		2960516						
ANR	2960983	Symbol	value . asInt32		2960516						
ANR	2960984	Symbol	value . asFloat		2960516						
ANR	2960985	Symbol	_map . begin		2960516						
ANR	2960986	Symbol	_map		2960516						
ANR	2960987	Symbol	it -> second		2960516						
ANR	2960988	Symbol	entry		2960516						
ANR	2960989	Symbol	* it		2960516						
ANR	2960990	Symbol	name		2960516						
ANR	2960991	Symbol	true		2960516						
ANR	2960992	Symbol	entry -> first . c_str		2960516						
ANR	2960993	Symbol	value . asUint8		2960516						
ANR	2960994	Symbol	value . asDouble		2960516						
