command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	998283	File	data/converged/CVE-2011-4930_htcondor/config.cpp								
ANR	998284	DeclStmt									
ANR	998285	Decl							char	"char * ( FILE * , int )"	getline_implementation
ANR	998286	DeclStmt									
ANR	998287	Decl							int	int	ConfigLineNo
ANR	998288	Function	condor_isidchar	54:0:1997:2248							
ANR	998289	FunctionDef	condor_isidchar (int c)		998288	0					
ANR	998290	CompoundStatement		56:0:2024:2248	998288	0					
ANR	998291	IfStatement	"if ( ( 'a' <= c && c <= 'z' ) || ( 'A' <= c && c <= 'Z' ) || ( '0' <= c && c <= '9' ) || ( strchr ( ""_./"" , c ) != NULL ) )"		998288	0					
ANR	998292	Condition	"( 'a' <= c && c <= 'z' ) || ( 'A' <= c && c <= 'Z' ) || ( '0' <= c && c <= '9' ) || ( strchr ( ""_./"" , c ) != NULL )"	57:5:2031:2213	998288	0	True				
ANR	998293	OrExpression	"( 'a' <= c && c <= 'z' ) || ( 'A' <= c && c <= 'Z' ) || ( '0' <= c && c <= '9' ) || ( strchr ( ""_./"" , c ) != NULL )"		998288	0		||			
ANR	998294	AndExpression	'a' <= c && c <= 'z'		998288	0		&&			
ANR	998295	RelationalExpression	'a' <= c		998288	0		<=			
ANR	998296	PrimaryExpression	'a'		998288	0					
ANR	998297	Identifier	c		998288	1					
ANR	998298	RelationalExpression	c <= 'z'		998288	1		<=			
ANR	998299	Identifier	c		998288	0					
ANR	998300	PrimaryExpression	'z'		998288	1					
ANR	998301	OrExpression	"( 'A' <= c && c <= 'Z' ) || ( '0' <= c && c <= '9' ) || ( strchr ( ""_./"" , c ) != NULL )"		998288	1		||			
ANR	998302	AndExpression	'A' <= c && c <= 'Z'		998288	0		&&			
ANR	998303	RelationalExpression	'A' <= c		998288	0		<=			
ANR	998304	PrimaryExpression	'A'		998288	0					
ANR	998305	Identifier	c		998288	1					
ANR	998306	RelationalExpression	c <= 'Z'		998288	1		<=			
ANR	998307	Identifier	c		998288	0					
ANR	998308	PrimaryExpression	'Z'		998288	1					
ANR	998309	OrExpression	"( '0' <= c && c <= '9' ) || ( strchr ( ""_./"" , c ) != NULL )"		998288	1		||			
ANR	998310	AndExpression	'0' <= c && c <= '9'		998288	0		&&			
ANR	998311	RelationalExpression	'0' <= c		998288	0		<=			
ANR	998312	PrimaryExpression	'0'		998288	0					
ANR	998313	Identifier	c		998288	1					
ANR	998314	RelationalExpression	c <= '9'		998288	1		<=			
ANR	998315	Identifier	c		998288	0					
ANR	998316	PrimaryExpression	'9'		998288	1					
ANR	998317	EqualityExpression	"strchr ( ""_./"" , c ) != NULL"		998288	1		!=			
ANR	998318	CallExpression	"strchr ( ""_./"" , c )"		998288	0					
ANR	998319	Callee	strchr		998288	0					
ANR	998320	Identifier	strchr		998288	0					
ANR	998321	ArgumentList	"""_./"""		998288	1					
ANR	998322	Argument	"""_./"""		998288	0					
ANR	998323	PrimaryExpression	"""_./"""		998288	0					
ANR	998324	Argument	c		998288	1					
ANR	998325	Identifier	c		998288	0					
ANR	998326	Identifier	NULL		998288	1					
ANR	998327	CompoundStatement		7:1:193:193	998288	1					
ANR	998328	ReturnStatement	return 1 ;	63:2:2222:2230	998288	0	True				
ANR	998329	PrimaryExpression	1		998288	0					
ANR	998330	ReturnStatement	return 0 ;	66:1:2238:2246	998288	1	True				
ANR	998331	PrimaryExpression	0		998288	0					
ANR	998332	ReturnType	int		998288	1					
ANR	998333	Identifier	condor_isidchar		998288	2					
ANR	998334	ParameterList	int c		998288	3					
ANR	998335	Parameter	int c	55:16:2017:2021	998288	0	True				
ANR	998336	ParameterType	int		998288	0					
ANR	998337	Identifier	c		998288	1					
ANR	998338	CFGEntryNode	ENTRY		998288		True				
ANR	998339	CFGExitNode	EXIT		998288		True				
ANR	998340	Symbol	c		998288						
ANR	998341	Symbol	NULL		998288						
ANR	998342	Symbol	strchr		998288						
ANR	998343	Function	is_valid_param_name	80:0:2530:2750							
ANR	998344	FunctionDef	is_valid_param_name (const char * name)		998343	0					
ANR	998345	CompoundStatement		81:0:2572:2750	998343	0					
ANR	998346	WhileStatement	while ( * name )		998343	0					
ANR	998347	Condition	* name	84:8:2679:2683	998343	0	True				
ANR	998348	UnaryOperationExpression	* name		998343	0					
ANR	998349	UnaryOperator	*		998343	0					
ANR	998350	Identifier	name		998343	1					
ANR	998351	CompoundStatement		4:16:114:114	998343	1					
ANR	998352	IfStatement	if ( ! ISIDCHAR ( * name ++ ) )		998343	0					
ANR	998353	Condition	! ISIDCHAR ( * name ++ )	85:6:2695:2712	998343	0	True				
ANR	998354	UnaryOperationExpression	! ISIDCHAR ( * name ++ )		998343	0					
ANR	998355	UnaryOperator	!		998343	0					
ANR	998356	CallExpression	ISIDCHAR ( * name ++ )		998343	1					
ANR	998357	Callee	ISIDCHAR		998343	0					
ANR	998358	Identifier	ISIDCHAR		998343	0					
ANR	998359	ArgumentList	* name ++		998343	1					
ANR	998360	Argument	* name ++		998343	0					
ANR	998361	UnaryOperationExpression	* name ++		998343	0					
ANR	998362	UnaryOperator	*		998343	0					
ANR	998363	PostIncDecOperationExpression	name ++		998343	1					
ANR	998364	Identifier	name		998343	0					
ANR	998365	IncDec	++		998343	1					
ANR	998366	CompoundStatement		5:27:143:143	998343	1					
ANR	998367	ReturnStatement	return 0 ;	86:3:2721:2729	998343	0	True				
ANR	998368	PrimaryExpression	0		998343	0					
ANR	998369	ReturnStatement	return 1 ;	90:1:2740:2748	998343	1	True				
ANR	998370	PrimaryExpression	1		998343	0					
ANR	998371	ReturnType	int		998343	1					
ANR	998372	Identifier	is_valid_param_name		998343	2					
ANR	998373	ParameterList	const char * name		998343	3					
ANR	998374	Parameter	const char * name	80:24:2554:2569	998343	0	True				
ANR	998375	ParameterType	const char *		998343	0					
ANR	998376	Identifier	name		998343	1					
ANR	998377	CFGEntryNode	ENTRY		998343		True				
ANR	998378	CFGExitNode	EXIT		998343		True				
ANR	998379	Symbol	* name		998343						
ANR	998380	Symbol	ISIDCHAR		998343						
ANR	998381	Symbol	name		998343						
ANR	998382	Symbol	* name ++		998343						
ANR	998383	Function	parse_param_name_from_config	93:0:2753:3167							
ANR	998384	FunctionDef	parse_param_name_from_config (const char * config)		998383	0					
ANR	998385	CompoundStatement		94:0:2809:3167	998383	0					
ANR	998386	IdentifierDeclStatement	"char * name , * tmp ;"	95:1:2812:2828	998383	0	True				
ANR	998387	IdentifierDecl	* name		998383	0					
ANR	998388	IdentifierDeclType	char *		998383	0					
ANR	998389	Identifier	name		998383	1					
ANR	998390	IdentifierDecl	* tmp		998383	1					
ANR	998391	IdentifierDeclType	char *		998383	0					
ANR	998392	Identifier	tmp		998383	1					
ANR	998393	IfStatement	if ( ! ( name = strdup ( config ) ) )		998383	1					
ANR	998394	Condition	! ( name = strdup ( config ) )	97:5:2836:2859	998383	0	True				
ANR	998395	UnaryOperationExpression	! ( name = strdup ( config ) )		998383	0					
ANR	998396	UnaryOperator	!		998383	0					
ANR	998397	AssignmentExpression	name = strdup ( config )		998383	1		=			
ANR	998398	Identifier	name		998383	0					
ANR	998399	CallExpression	strdup ( config )		998383	1					
ANR	998400	Callee	strdup		998383	0					
ANR	998401	Identifier	strdup		998383	0					
ANR	998402	ArgumentList	config		998383	1					
ANR	998403	Argument	config		998383	0					
ANR	998404	Identifier	config		998383	0					
ANR	998405	CompoundStatement		4:31:52:52	998383	1					
ANR	998406	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	98:2:2866:2890	998383	0	True				
ANR	998407	CallExpression	"EXCEPT ( ""Out of memory!"" )"		998383	0					
ANR	998408	Callee	EXCEPT		998383	0					
ANR	998409	Identifier	EXCEPT		998383	0					
ANR	998410	ArgumentList	"""Out of memory!"""		998383	1					
ANR	998411	Argument	"""Out of memory!"""		998383	0					
ANR	998412	PrimaryExpression	"""Out of memory!"""		998383	0					
ANR	998413	ExpressionStatement	"tmp = strchr ( name , '=' )"	101:1:2897:2920	998383	2	True				
ANR	998414	AssignmentExpression	"tmp = strchr ( name , '=' )"		998383	0		=			
ANR	998415	Identifier	tmp		998383	0					
ANR	998416	CallExpression	"strchr ( name , '=' )"		998383	1					
ANR	998417	Callee	strchr		998383	0					
ANR	998418	Identifier	strchr		998383	0					
ANR	998419	ArgumentList	name		998383	1					
ANR	998420	Argument	name		998383	0					
ANR	998421	Identifier	name		998383	0					
ANR	998422	Argument	'='		998383	1					
ANR	998423	PrimaryExpression	'='		998383	0					
ANR	998424	IfStatement	if ( ! tmp )		998383	3					
ANR	998425	Condition	! tmp	102:5:2927:2930	998383	0	True				
ANR	998426	UnaryOperationExpression	! tmp		998383	0					
ANR	998427	UnaryOperator	!		998383	0					
ANR	998428	Identifier	tmp		998383	1					
ANR	998429	CompoundStatement		9:11:123:123	998383	1					
ANR	998430	ExpressionStatement	"tmp = strchr ( name , ':' )"	103:2:2937:2960	998383	0	True				
ANR	998431	AssignmentExpression	"tmp = strchr ( name , ':' )"		998383	0		=			
ANR	998432	Identifier	tmp		998383	0					
ANR	998433	CallExpression	"strchr ( name , ':' )"		998383	1					
ANR	998434	Callee	strchr		998383	0					
ANR	998435	Identifier	strchr		998383	0					
ANR	998436	ArgumentList	name		998383	1					
ANR	998437	Argument	name		998383	0					
ANR	998438	Identifier	name		998383	0					
ANR	998439	Argument	':'		998383	1					
ANR	998440	PrimaryExpression	':'		998383	0					
ANR	998441	IfStatement	if ( ! tmp )		998383	4					
ANR	998442	Condition	! tmp	105:5:2970:2973	998383	0	True				
ANR	998443	UnaryOperationExpression	! tmp		998383	0					
ANR	998444	UnaryOperator	!		998383	0					
ANR	998445	Identifier	tmp		998383	1					
ANR	998446	CompoundStatement		12:11:166:166	998383	1					
ANR	998447	ReturnStatement	return NULL ;	107:2:3046:3057	998383	0	True				
ANR	998448	Identifier	NULL		998383	0					
ANR	998449	ExpressionStatement	* tmp = ' '	111:1:3088:3098	998383	5	True				
ANR	998450	AssignmentExpression	* tmp = ' '		998383	0		=			
ANR	998451	UnaryOperationExpression	* tmp		998383	0					
ANR	998452	UnaryOperator	*		998383	0					
ANR	998453	Identifier	tmp		998383	1					
ANR	998454	PrimaryExpression	' '		998383	1					
ANR	998455	WhileStatement	while ( isspace ( * tmp ) )		998383	6					
ANR	998456	Condition	isspace ( * tmp )	112:8:3108:3120	998383	0	True				
ANR	998457	CallExpression	isspace ( * tmp )		998383	0					
ANR	998458	Callee	isspace		998383	0					
ANR	998459	Identifier	isspace		998383	0					
ANR	998460	ArgumentList	* tmp		998383	1					
ANR	998461	Argument	* tmp		998383	0					
ANR	998462	UnaryOperationExpression	* tmp		998383	0					
ANR	998463	UnaryOperator	*		998383	0					
ANR	998464	Identifier	tmp		998383	1					
ANR	998465	CompoundStatement		19:23:313:313	998383	1					
ANR	998466	ExpressionStatement	* tmp = '\\0'	113:2:3127:3138	998383	0	True				
ANR	998467	AssignmentExpression	* tmp = '\\0'		998383	0		=			
ANR	998468	UnaryOperationExpression	* tmp		998383	0					
ANR	998469	UnaryOperator	*		998383	0					
ANR	998470	Identifier	tmp		998383	1					
ANR	998471	PrimaryExpression	'\\0'		998383	1					
ANR	998472	ExpressionStatement	tmp --	114:2:3142:3147	998383	1	True				
ANR	998473	PostIncDecOperationExpression	tmp --		998383	0					
ANR	998474	Identifier	tmp		998383	0					
ANR	998475	IncDec	--		998383	1					
ANR	998476	ReturnStatement	return name ;	117:1:3154:3165	998383	7	True				
ANR	998477	Identifier	name		998383	0					
ANR	998478	ReturnType	char *		998383	1					
ANR	998479	Identifier	parse_param_name_from_config		998383	2					
ANR	998480	ParameterList	const char * config		998383	3					
ANR	998481	Parameter	const char * config	93:36:2789:2806	998383	0	True				
ANR	998482	ParameterType	const char *		998383	0					
ANR	998483	Identifier	config		998383	1					
ANR	998484	CFGEntryNode	ENTRY		998383		True				
ANR	998485	CFGExitNode	EXIT		998383		True				
ANR	998486	Symbol	* tmp		998383						
ANR	998487	Symbol	NULL		998383						
ANR	998488	Symbol	tmp		998383						
ANR	998489	Symbol	name		998383						
ANR	998490	Symbol	isspace		998383						
ANR	998491	Symbol	strchr		998383						
ANR	998492	Symbol	strdup		998383						
ANR	998493	Symbol	config		998383						
ANR	998494	Function	is_piped_command	120:0:3170:3420							
ANR	998495	FunctionDef	is_piped_command (const char * filename)		998494	0					
ANR	998496	CompoundStatement		122:0:3215:3420	998494	0					
ANR	998497	IdentifierDeclStatement	bool retVal = false ;	123:1:3218:3237	998494	0	True				
ANR	998498	IdentifierDecl	retVal = false		998494	0					
ANR	998499	IdentifierDeclType	bool		998494	0					
ANR	998500	Identifier	retVal		998494	1					
ANR	998501	AssignmentExpression	retVal = false		998494	2		=			
ANR	998502	Identifier	false		998494	0					
ANR	998503	Identifier	false		998494	1					
ANR	998504	IdentifierDeclStatement	"char const * pdest = strchr ( filename , '|' ) ;"	125:1:3241:3284	998494	1	True				
ANR	998505	IdentifierDecl	"* pdest = strchr ( filename , '|' )"		998494	0					
ANR	998506	IdentifierDeclType	char const *		998494	0					
ANR	998507	Identifier	pdest		998494	1					
ANR	998508	AssignmentExpression	"* pdest = strchr ( filename , '|' )"		998494	2		=			
ANR	998509	Identifier	pdest		998494	0					
ANR	998510	CallExpression	"strchr ( filename , '|' )"		998494	1					
ANR	998511	Callee	strchr		998494	0					
ANR	998512	Identifier	strchr		998494	0					
ANR	998513	ArgumentList	filename		998494	1					
ANR	998514	Argument	filename		998494	0					
ANR	998515	Identifier	filename		998494	0					
ANR	998516	Argument	'|'		998494	1					
ANR	998517	PrimaryExpression	'|'		998494	0					
ANR	998518	IfStatement	if ( pdest != NULL )		998494	2					
ANR	998519	Condition	pdest != NULL	126:6:3292:3304	998494	0	True				
ANR	998520	EqualityExpression	pdest != NULL		998494	0		!=			
ANR	998521	Identifier	pdest		998494	0					
ANR	998522	Identifier	NULL		998494	1					
ANR	998523	CompoundStatement		5:22:92:92	998494	1					
ANR	998524	ExpressionStatement	retVal = true	128:2:3385:3398	998494	0	True				
ANR	998525	AssignmentExpression	retVal = true		998494	0		=			
ANR	998526	Identifier	retVal		998494	0					
ANR	998527	Identifier	true		998494	1					
ANR	998528	ReturnStatement	return retVal ;	131:1:3405:3418	998494	3	True				
ANR	998529	Identifier	retVal		998494	0					
ANR	998530	ReturnType	bool		998494	1					
ANR	998531	Identifier	is_piped_command		998494	2					
ANR	998532	ParameterList	const char * filename		998494	3					
ANR	998533	Parameter	const char * filename	121:17:3193:3212	998494	0	True				
ANR	998534	ParameterType	const char *		998494	0					
ANR	998535	Identifier	filename		998494	1					
ANR	998536	CFGEntryNode	ENTRY		998494		True				
ANR	998537	CFGExitNode	EXIT		998494		True				
ANR	998538	Symbol	filename		998494						
ANR	998539	Symbol	NULL		998494						
ANR	998540	Symbol	false		998494						
ANR	998541	Symbol	true		998494						
ANR	998542	Symbol	strchr		998494						
ANR	998543	Symbol	pdest		998494						
ANR	998544	Symbol	retVal		998494						
ANR	998545	Function	is_valid_command	136:0:3509:3710							
ANR	998546	FunctionDef	is_valid_command (const char * cmdToExecute)		998545	0					
ANR	998547	CompoundStatement		138:0:3558:3710	998545	0					
ANR	998548	IdentifierDeclStatement	bool retVal = false ;	139:1:3561:3580	998545	0	True				
ANR	998549	IdentifierDecl	retVal = false		998545	0					
ANR	998550	IdentifierDeclType	bool		998545	0					
ANR	998551	Identifier	retVal		998545	1					
ANR	998552	AssignmentExpression	retVal = false		998545	2		=			
ANR	998553	Identifier	false		998545	0					
ANR	998554	Identifier	false		998545	1					
ANR	998555	IdentifierDeclStatement	int cmdStrLength = strlen ( cmdToExecute ) ;	141:1:3584:3623	998545	1	True				
ANR	998556	IdentifierDecl	cmdStrLength = strlen ( cmdToExecute )		998545	0					
ANR	998557	IdentifierDeclType	int		998545	0					
ANR	998558	Identifier	cmdStrLength		998545	1					
ANR	998559	AssignmentExpression	cmdStrLength = strlen ( cmdToExecute )		998545	2		=			
ANR	998560	Identifier	cmdStrLength		998545	0					
ANR	998561	CallExpression	strlen ( cmdToExecute )		998545	1					
ANR	998562	Callee	strlen		998545	0					
ANR	998563	Identifier	strlen		998545	0					
ANR	998564	ArgumentList	cmdToExecute		998545	1					
ANR	998565	Argument	cmdToExecute		998545	0					
ANR	998566	Identifier	cmdToExecute		998545	0					
ANR	998567	IfStatement	if ( cmdToExecute [ cmdStrLength - 1 ] == '|' )		998545	2					
ANR	998568	Condition	cmdToExecute [ cmdStrLength - 1 ] == '|'	142:6:3631:3667	998545	0	True				
ANR	998569	EqualityExpression	cmdToExecute [ cmdStrLength - 1 ] == '|'		998545	0		==			
ANR	998570	ArrayIndexing	cmdToExecute [ cmdStrLength - 1 ]		998545	0					
ANR	998571	Identifier	cmdToExecute		998545	0					
ANR	998572	AdditiveExpression	cmdStrLength - 1		998545	1		-			
ANR	998573	Identifier	cmdStrLength		998545	0					
ANR	998574	PrimaryExpression	1		998545	1					
ANR	998575	PrimaryExpression	'|'		998545	1					
ANR	998576	CompoundStatement		5:46:112:112	998545	1					
ANR	998577	ExpressionStatement	retVal = true	143:2:3675:3688	998545	0	True				
ANR	998578	AssignmentExpression	retVal = true		998545	0		=			
ANR	998579	Identifier	retVal		998545	0					
ANR	998580	Identifier	true		998545	1					
ANR	998581	ReturnStatement	return retVal ;	146:1:3695:3708	998545	3	True				
ANR	998582	Identifier	retVal		998545	0					
ANR	998583	ReturnType	bool		998545	1					
ANR	998584	Identifier	is_valid_command		998545	2					
ANR	998585	ParameterList	const char * cmdToExecute		998545	3					
ANR	998586	Parameter	const char * cmdToExecute	137:17:3532:3555	998545	0	True				
ANR	998587	ParameterType	const char *		998545	0					
ANR	998588	Identifier	cmdToExecute		998545	1					
ANR	998589	CFGEntryNode	ENTRY		998545		True				
ANR	998590	CFGExitNode	EXIT		998545		True				
ANR	998591	Symbol	strlen		998545						
ANR	998592	Symbol	false		998545						
ANR	998593	Symbol	cmdStrLength		998545						
ANR	998594	Symbol	true		998545						
ANR	998595	Symbol	* cmdToExecute		998545						
ANR	998596	Symbol	* cmdStrLength		998545						
ANR	998597	Symbol	cmdToExecute		998545						
ANR	998598	Symbol	retVal		998545						
ANR	998599	Function	Read_config	150:0:3714:10065							
ANR	998600	FunctionDef	"Read_config (const char * config_source , BUCKET * * table , int table_size , int expand_flag , bool check_runtime_security , ExtraParamTable * extra_info)"		998599	0					
ANR	998601	CompoundStatement		155:0:3878:10065	998599	0					
ANR	998602	IdentifierDeclStatement	FILE * conf_fp = NULL ;	156:3:3883:3903	998599	0	True				
ANR	998603	IdentifierDecl	* conf_fp = NULL		998599	0					
ANR	998604	IdentifierDeclType	FILE *		998599	0					
ANR	998605	Identifier	conf_fp		998599	1					
ANR	998606	AssignmentExpression	* conf_fp = NULL		998599	2		=			
ANR	998607	Identifier	NULL		998599	0					
ANR	998608	Identifier	NULL		998599	1					
ANR	998609	IdentifierDeclStatement	char * name = NULL ;	157:1:3906:3923	998599	1	True				
ANR	998610	IdentifierDecl	* name = NULL		998599	0					
ANR	998611	IdentifierDeclType	char *		998599	0					
ANR	998612	Identifier	name		998599	1					
ANR	998613	AssignmentExpression	* name = NULL		998599	2		=			
ANR	998614	Identifier	NULL		998599	0					
ANR	998615	Identifier	NULL		998599	1					
ANR	998616	IdentifierDeclStatement	char * value = NULL ;	158:1:3926:3944	998599	2	True				
ANR	998617	IdentifierDecl	* value = NULL		998599	0					
ANR	998618	IdentifierDeclType	char *		998599	0					
ANR	998619	Identifier	value		998599	1					
ANR	998620	AssignmentExpression	* value = NULL		998599	2		=			
ANR	998621	Identifier	NULL		998599	0					
ANR	998622	Identifier	NULL		998599	1					
ANR	998623	IdentifierDeclStatement	char * rhs = NULL ;	159:1:3947:3963	998599	3	True				
ANR	998624	IdentifierDecl	* rhs = NULL		998599	0					
ANR	998625	IdentifierDeclType	char *		998599	0					
ANR	998626	Identifier	rhs		998599	1					
ANR	998627	AssignmentExpression	* rhs = NULL		998599	2		=			
ANR	998628	Identifier	NULL		998599	0					
ANR	998629	Identifier	NULL		998599	1					
ANR	998630	IdentifierDeclStatement	char * ptr = NULL ;	160:1:3966:3982	998599	4	True				
ANR	998631	IdentifierDecl	* ptr = NULL		998599	0					
ANR	998632	IdentifierDeclType	char *		998599	0					
ANR	998633	Identifier	ptr		998599	1					
ANR	998634	AssignmentExpression	* ptr = NULL		998599	2		=			
ANR	998635	Identifier	NULL		998599	0					
ANR	998636	Identifier	NULL		998599	1					
ANR	998637	IdentifierDeclStatement	char op ;	161:1:3985:3992	998599	5	True				
ANR	998638	IdentifierDecl	op		998599	0					
ANR	998639	IdentifierDeclType	char		998599	0					
ANR	998640	Identifier	op		998599	1					
ANR	998641	IdentifierDeclStatement	int retval = 0 ;	162:1:3995:4010	998599	6	True				
ANR	998642	IdentifierDecl	retval = 0		998599	0					
ANR	998643	IdentifierDeclType	int		998599	0					
ANR	998644	Identifier	retval		998599	1					
ANR	998645	AssignmentExpression	retval = 0		998599	2		=			
ANR	998646	Identifier	retval		998599	0					
ANR	998647	PrimaryExpression	0		998599	1					
ANR	998648	IdentifierDeclStatement	bool is_pipe_cmd = false ;	163:1:4013:4037	998599	7	True				
ANR	998649	IdentifierDecl	is_pipe_cmd = false		998599	0					
ANR	998650	IdentifierDeclType	bool		998599	0					
ANR	998651	Identifier	is_pipe_cmd		998599	1					
ANR	998652	AssignmentExpression	is_pipe_cmd = false		998599	2		=			
ANR	998653	Identifier	false		998599	0					
ANR	998654	Identifier	false		998599	1					
ANR	998655	IdentifierDeclStatement	bool firstRead = true ;	164:1:4040:4061	998599	8	True				
ANR	998656	IdentifierDecl	firstRead = true		998599	0					
ANR	998657	IdentifierDeclType	bool		998599	0					
ANR	998658	Identifier	firstRead		998599	1					
ANR	998659	AssignmentExpression	firstRead = true		998599	2		=			
ANR	998660	Identifier	true		998599	0					
ANR	998661	Identifier	true		998599	1					
ANR	998662	ExpressionStatement	ConfigLineNo = 0	166:1:4065:4081	998599	9	True				
ANR	998663	AssignmentExpression	ConfigLineNo = 0		998599	0		=			
ANR	998664	Identifier	ConfigLineNo		998599	0					
ANR	998665	PrimaryExpression	0		998599	1					
ANR	998666	IfStatement	if ( is_piped_command ( config_source ) )		998599	10					
ANR	998667	Condition	is_piped_command ( config_source )	170:6:4208:4238	998599	0	True				
ANR	998668	CallExpression	is_piped_command ( config_source )		998599	0					
ANR	998669	Callee	is_piped_command		998599	0					
ANR	998670	Identifier	is_piped_command		998599	0					
ANR	998671	ArgumentList	config_source		998599	1					
ANR	998672	Argument	config_source		998599	0					
ANR	998673	Identifier	config_source		998599	0					
ANR	998674	CompoundStatement		16:40:363:363	998599	1					
ANR	998675	ExpressionStatement	is_pipe_cmd = true	171:2:4246:4264	998599	0	True				
ANR	998676	AssignmentExpression	is_pipe_cmd = true		998599	0		=			
ANR	998677	Identifier	is_pipe_cmd		998599	0					
ANR	998678	Identifier	true		998599	1					
ANR	998679	IfStatement	if ( is_valid_command ( config_source ) )		998599	1					
ANR	998680	Condition	is_valid_command ( config_source )	172:7:4273:4303	998599	0	True				
ANR	998681	CallExpression	is_valid_command ( config_source )		998599	0					
ANR	998682	Callee	is_valid_command		998599	0					
ANR	998683	Identifier	is_valid_command		998599	0					
ANR	998684	ArgumentList	config_source		998599	1					
ANR	998685	Argument	config_source		998599	0					
ANR	998686	Identifier	config_source		998599	0					
ANR	998687	CompoundStatement		25:3:659:679	998599	1					
ANR	998688	IdentifierDeclStatement	char * cmdToExecute = strdup ( config_source ) ;	175:3:4420:4464	998599	0	True				
ANR	998689	IdentifierDecl	* cmdToExecute = strdup ( config_source )		998599	0					
ANR	998690	IdentifierDeclType	char *		998599	0					
ANR	998691	Identifier	cmdToExecute		998599	1					
ANR	998692	AssignmentExpression	* cmdToExecute = strdup ( config_source )		998599	2		=			
ANR	998693	Identifier	cmdToExecute		998599	0					
ANR	998694	CallExpression	strdup ( config_source )		998599	1					
ANR	998695	Callee	strdup		998599	0					
ANR	998696	Identifier	strdup		998599	0					
ANR	998697	ArgumentList	config_source		998599	1					
ANR	998698	Argument	config_source		998599	0					
ANR	998699	Identifier	config_source		998599	0					
ANR	998700	ExpressionStatement	cmdToExecute [ strlen ( cmdToExecute ) - 1 ] = '\\0'	176:3:4469:4512	998599	1	True				
ANR	998701	AssignmentExpression	cmdToExecute [ strlen ( cmdToExecute ) - 1 ] = '\\0'		998599	0		=			
ANR	998702	ArrayIndexing	cmdToExecute [ strlen ( cmdToExecute ) - 1 ]		998599	0					
ANR	998703	Identifier	cmdToExecute		998599	0					
ANR	998704	AdditiveExpression	strlen ( cmdToExecute ) - 1		998599	1		-			
ANR	998705	CallExpression	strlen ( cmdToExecute )		998599	0					
ANR	998706	Callee	strlen		998599	0					
ANR	998707	Identifier	strlen		998599	0					
ANR	998708	ArgumentList	cmdToExecute		998599	1					
ANR	998709	Argument	cmdToExecute		998599	0					
ANR	998710	Identifier	cmdToExecute		998599	0					
ANR	998711	PrimaryExpression	1		998599	1					
ANR	998712	PrimaryExpression	'\\0'		998599	1					
ANR	998713	IdentifierDeclStatement	ArgList argList ;	178:3:4518:4533	998599	2	True				
ANR	998714	IdentifierDecl	argList		998599	0					
ANR	998715	IdentifierDeclType	ArgList		998599	0					
ANR	998716	Identifier	argList		998599	1					
ANR	998717	IdentifierDeclStatement	MyString args_errors ;	179:3:4538:4558	998599	3	True				
ANR	998718	IdentifierDecl	args_errors		998599	0					
ANR	998719	IdentifierDeclType	MyString		998599	0					
ANR	998720	Identifier	args_errors		998599	1					
ANR	998721	IfStatement	"if ( ! argList . AppendArgsV1RawOrV2Quoted ( cmdToExecute , & args_errors ) )"		998599	4					
ANR	998722	Condition	"! argList . AppendArgsV1RawOrV2Quoted ( cmdToExecute , & args_errors )"	180:6:4566:4627	998599	0	True				
ANR	998723	UnaryOperationExpression	"! argList . AppendArgsV1RawOrV2Quoted ( cmdToExecute , & args_errors )"		998599	0					
ANR	998724	UnaryOperator	!		998599	0					
ANR	998725	CallExpression	"argList . AppendArgsV1RawOrV2Quoted ( cmdToExecute , & args_errors )"		998599	1					
ANR	998726	Callee	argList . AppendArgsV1RawOrV2Quoted		998599	0					
ANR	998727	MemberAccess	argList . AppendArgsV1RawOrV2Quoted		998599	0					
ANR	998728	Identifier	argList		998599	0					
ANR	998729	Identifier	AppendArgsV1RawOrV2Quoted		998599	1					
ANR	998730	ArgumentList	cmdToExecute		998599	1					
ANR	998731	Argument	cmdToExecute		998599	0					
ANR	998732	Identifier	cmdToExecute		998599	0					
ANR	998733	Argument	& args_errors		998599	1					
ANR	998734	UnaryOperationExpression	& args_errors		998599	0					
ANR	998735	UnaryOperator	&		998599	0					
ANR	998736	Identifier	args_errors		998599	1					
ANR	998737	CompoundStatement		26:70:751:751	998599	1					
ANR	998738	ExpressionStatement	"printf ( ""Can't append cmd %s(%s)\\n"" , cmdToExecute , args_errors . Value ( ) )"	181:4:4636:4706	998599	0	True				
ANR	998739	CallExpression	"printf ( ""Can't append cmd %s(%s)\\n"" , cmdToExecute , args_errors . Value ( ) )"		998599	0					
ANR	998740	Callee	printf		998599	0					
ANR	998741	Identifier	printf		998599	0					
ANR	998742	ArgumentList	"""Can't append cmd %s(%s)\\n"""		998599	1					
ANR	998743	Argument	"""Can't append cmd %s(%s)\\n"""		998599	0					
ANR	998744	PrimaryExpression	"""Can't append cmd %s(%s)\\n"""		998599	0					
ANR	998745	Argument	cmdToExecute		998599	1					
ANR	998746	Identifier	cmdToExecute		998599	0					
ANR	998747	Argument	args_errors . Value ( )		998599	2					
ANR	998748	CallExpression	args_errors . Value ( )		998599	0					
ANR	998749	Callee	args_errors . Value		998599	0					
ANR	998750	MemberAccess	args_errors . Value		998599	0					
ANR	998751	Identifier	args_errors		998599	0					
ANR	998752	Identifier	Value		998599	1					
ANR	998753	ArgumentList			998599	1					
ANR	998754	ExpressionStatement	free ( cmdToExecute )	182:4:4712:4732	998599	1	True				
ANR	998755	CallExpression	free ( cmdToExecute )		998599	0					
ANR	998756	Callee	free		998599	0					
ANR	998757	Identifier	free		998599	0					
ANR	998758	ArgumentList	cmdToExecute		998599	1					
ANR	998759	Argument	cmdToExecute		998599	0					
ANR	998760	Identifier	cmdToExecute		998599	0					
ANR	998761	ReturnStatement	return - 1 ;	183:4:4738:4747	998599	2	True				
ANR	998762	UnaryOperationExpression	- 1		998599	0					
ANR	998763	UnaryOperator	-		998599	0					
ANR	998764	PrimaryExpression	1		998599	1					
ANR	998765	ExpressionStatement	"conf_fp = my_popen ( argList , ""r"" , FALSE )"	185:3:4757:4796	998599	5	True				
ANR	998766	AssignmentExpression	"conf_fp = my_popen ( argList , ""r"" , FALSE )"		998599	0		=			
ANR	998767	Identifier	conf_fp		998599	0					
ANR	998768	CallExpression	"my_popen ( argList , ""r"" , FALSE )"		998599	1					
ANR	998769	Callee	my_popen		998599	0					
ANR	998770	Identifier	my_popen		998599	0					
ANR	998771	ArgumentList	argList		998599	1					
ANR	998772	Argument	argList		998599	0					
ANR	998773	Identifier	argList		998599	0					
ANR	998774	Argument	"""r"""		998599	1					
ANR	998775	PrimaryExpression	"""r"""		998599	0					
ANR	998776	Argument	FALSE		998599	2					
ANR	998777	Identifier	FALSE		998599	0					
ANR	998778	IfStatement	if ( conf_fp == NULL )		998599	6					
ANR	998779	Condition	conf_fp == NULL	186:7:4805:4819	998599	0	True				
ANR	998780	EqualityExpression	conf_fp == NULL		998599	0		==			
ANR	998781	Identifier	conf_fp		998599	0					
ANR	998782	Identifier	NULL		998599	1					
ANR	998783	CompoundStatement		32:25:944:944	998599	1					
ANR	998784	ExpressionStatement	"printf ( ""Can't open cmd %s\\n"" , cmdToExecute )"	187:4:4829:4872	998599	0	True				
ANR	998785	CallExpression	"printf ( ""Can't open cmd %s\\n"" , cmdToExecute )"		998599	0					
ANR	998786	Callee	printf		998599	0					
ANR	998787	Identifier	printf		998599	0					
ANR	998788	ArgumentList	"""Can't open cmd %s\\n"""		998599	1					
ANR	998789	Argument	"""Can't open cmd %s\\n"""		998599	0					
ANR	998790	PrimaryExpression	"""Can't open cmd %s\\n"""		998599	0					
ANR	998791	Argument	cmdToExecute		998599	1					
ANR	998792	Identifier	cmdToExecute		998599	0					
ANR	998793	ExpressionStatement	free ( cmdToExecute )	188:4:4878:4898	998599	1	True				
ANR	998794	CallExpression	free ( cmdToExecute )		998599	0					
ANR	998795	Callee	free		998599	0					
ANR	998796	Identifier	free		998599	0					
ANR	998797	ArgumentList	cmdToExecute		998599	1					
ANR	998798	Argument	cmdToExecute		998599	0					
ANR	998799	Identifier	cmdToExecute		998599	0					
ANR	998800	ReturnStatement	return - 1 ;	189:4:4904:4913	998599	2	True				
ANR	998801	UnaryOperationExpression	- 1		998599	0					
ANR	998802	UnaryOperator	-		998599	0					
ANR	998803	PrimaryExpression	1		998599	1					
ANR	998804	ExpressionStatement	free ( cmdToExecute )	191:3:4923:4943	998599	7	True				
ANR	998805	CallExpression	free ( cmdToExecute )		998599	0					
ANR	998806	Callee	free		998599	0					
ANR	998807	Identifier	free		998599	0					
ANR	998808	ArgumentList	cmdToExecute		998599	1					
ANR	998809	Argument	cmdToExecute		998599	0					
ANR	998810	Identifier	cmdToExecute		998599	0					
ANR	998811	ElseStatement	else		998599	0					
ANR	998812	CompoundStatement		38:9:1075:1075	998599	0					
ANR	998813	Statement	printf	193:3:4959:4964	998599	0	True				
ANR	998814	Statement	(	193:9:4965:4965	998599	1	True				
ANR	998815	Statement	"""Specified cmd, %s, not a valid command to execute.  It must have a '|' """	193:10:4966:5038	998599	2	True				
ANR	998816	Statement	"""character at the end.\\n"""	194:7:5047:5071	998599	3	True				
ANR	998817	Statement	","	194:32:5072:5072	998599	4	True				
ANR	998818	Statement	config_source	194:34:5074:5086	998599	5	True				
ANR	998819	Statement	)	194:47:5087:5087	998599	6	True				
ANR	998820	ExpressionStatement		194:48:5088:5088	998599	7	True				
ANR	998821	ReturnStatement	return ( - 1 ) ;	195:3:5093:5105	998599	8	True				
ANR	998822	UnaryOperationExpression	- 1		998599	0					
ANR	998823	UnaryOperator	-		998599	0					
ANR	998824	PrimaryExpression	1		998599	1					
ANR	998825	ElseStatement	else		998599	0					
ANR	998826	CompoundStatement		43:8:1240:1240	998599	0					
ANR	998827	ExpressionStatement	is_pipe_cmd = false	198:2:5123:5142	998599	0	True				
ANR	998828	AssignmentExpression	is_pipe_cmd = false		998599	0		=			
ANR	998829	Identifier	is_pipe_cmd		998599	0					
ANR	998830	Identifier	false		998599	1					
ANR	998831	ExpressionStatement	"conf_fp = safe_fopen_wrapper_follow ( config_source , ""r"" )"	199:2:5146:5201	998599	1	True				
ANR	998832	AssignmentExpression	"conf_fp = safe_fopen_wrapper_follow ( config_source , ""r"" )"		998599	0		=			
ANR	998833	Identifier	conf_fp		998599	0					
ANR	998834	CallExpression	"safe_fopen_wrapper_follow ( config_source , ""r"" )"		998599	1					
ANR	998835	Callee	safe_fopen_wrapper_follow		998599	0					
ANR	998836	Identifier	safe_fopen_wrapper_follow		998599	0					
ANR	998837	ArgumentList	config_source		998599	1					
ANR	998838	Argument	config_source		998599	0					
ANR	998839	Identifier	config_source		998599	0					
ANR	998840	Argument	"""r"""		998599	1					
ANR	998841	PrimaryExpression	"""r"""		998599	0					
ANR	998842	IfStatement	if ( conf_fp == NULL )		998599	2					
ANR	998843	Condition	conf_fp == NULL	200:6:5209:5223	998599	0	True				
ANR	998844	EqualityExpression	conf_fp == NULL		998599	0		==			
ANR	998845	Identifier	conf_fp		998599	0					
ANR	998846	Identifier	NULL		998599	1					
ANR	998847	CompoundStatement		46:24:1348:1348	998599	1					
ANR	998848	ExpressionStatement	"printf ( ""Can't open file %s\\n"" , config_source )"	201:3:5232:5277	998599	0	True				
ANR	998849	CallExpression	"printf ( ""Can't open file %s\\n"" , config_source )"		998599	0					
ANR	998850	Callee	printf		998599	0					
ANR	998851	Identifier	printf		998599	0					
ANR	998852	ArgumentList	"""Can't open file %s\\n"""		998599	1					
ANR	998853	Argument	"""Can't open file %s\\n"""		998599	0					
ANR	998854	PrimaryExpression	"""Can't open file %s\\n"""		998599	0					
ANR	998855	Argument	config_source		998599	1					
ANR	998856	Identifier	config_source		998599	0					
ANR	998857	ReturnStatement	return ( - 1 ) ;	202:3:5282:5294	998599	1	True				
ANR	998858	UnaryOperationExpression	- 1		998599	0					
ANR	998859	UnaryOperator	-		998599	0					
ANR	998860	PrimaryExpression	1		998599	1					
ANR	998861	IfStatement	if ( check_runtime_security )		998599	11					
ANR	998862	Condition	check_runtime_security	206:5:5309:5330	998599	0	True				
ANR	998863	Identifier	check_runtime_security		998599	0					
ANR	998864	CompoundStatement		65:2:1802:1834	998599	1					
ANR	998865	IfStatement	if ( is_pipe_cmd )		998599	0					
ANR	998866	Condition	is_pipe_cmd	209:7:5417:5427	998599	0	True				
ANR	998867	Identifier	is_pipe_cmd		998599	0					
ANR	998868	CompoundStatement		55:21:1552:1552	998599	1					
ANR	998869	Statement	fprintf	210:3:5436:5442	998599	0	True				
ANR	998870	Statement	(	210:10:5443:5443	998599	1	True				
ANR	998871	Statement	stderr	210:12:5445:5450	998599	2	True				
ANR	998872	Statement	","	210:18:5451:5451	998599	3	True				
ANR	998873	Statement	"""Configuration Error File <%s>: runtime config """	210:20:5453:5500	998599	4	True				
ANR	998874	Statement	"""not allowed to come from a pipe command\\n"""	211:6:5508:5550	998599	5	True				
ANR	998875	Statement	","	211:49:5551:5551	998599	6	True				
ANR	998876	Statement	config_source	212:6:5559:5571	998599	7	True				
ANR	998877	Statement	)	212:20:5573:5573	998599	8	True				
ANR	998878	ExpressionStatement		212:21:5574:5574	998599	9	True				
ANR	998879	ExpressionStatement	retval = - 1	213:3:5579:5590	998599	10	True				
ANR	998880	AssignmentExpression	retval = - 1		998599	0		=			
ANR	998881	Identifier	retval		998599	0					
ANR	998882	UnaryOperationExpression	- 1		998599	1					
ANR	998883	UnaryOperator	-		998599	0					
ANR	998884	PrimaryExpression	1		998599	1					
ANR	998885	GotoStatement	goto cleanup ;	214:3:5595:5607	998599	11	True				
ANR	998886	Identifier	cleanup		998599	0					
ANR	998887	IdentifierDeclStatement	int fd = fileno ( conf_fp ) ;	216:2:5615:5639	998599	1	True				
ANR	998888	IdentifierDecl	fd = fileno ( conf_fp )		998599	0					
ANR	998889	IdentifierDeclType	int		998599	0					
ANR	998890	Identifier	fd		998599	1					
ANR	998891	AssignmentExpression	fd = fileno ( conf_fp )		998599	2		=			
ANR	998892	Identifier	fd		998599	0					
ANR	998893	CallExpression	fileno ( conf_fp )		998599	1					
ANR	998894	Callee	fileno		998599	0					
ANR	998895	Identifier	fileno		998599	0					
ANR	998896	ArgumentList	conf_fp		998599	1					
ANR	998897	Argument	conf_fp		998599	0					
ANR	998898	Identifier	conf_fp		998599	0					
ANR	998899	IdentifierDeclStatement	struct stat statbuf ;	217:2:5643:5662	998599	2	True				
ANR	998900	IdentifierDecl	statbuf		998599	0					
ANR	998901	IdentifierDeclType	struct stat		998599	0					
ANR	998902	Identifier	statbuf		998599	1					
ANR	998903	IdentifierDeclStatement	uid_t f_uid ;	218:2:5666:5677	998599	3	True				
ANR	998904	IdentifierDecl	f_uid		998599	0					
ANR	998905	IdentifierDeclType	uid_t		998599	0					
ANR	998906	Identifier	f_uid		998599	1					
ANR	998907	IdentifierDeclStatement	"int rval = fstat ( fd , & statbuf ) ;"	219:2:5681:5713	998599	4	True				
ANR	998908	IdentifierDecl	"rval = fstat ( fd , & statbuf )"		998599	0					
ANR	998909	IdentifierDeclType	int		998599	0					
ANR	998910	Identifier	rval		998599	1					
ANR	998911	AssignmentExpression	"rval = fstat ( fd , & statbuf )"		998599	2		=			
ANR	998912	Identifier	rval		998599	0					
ANR	998913	CallExpression	"fstat ( fd , & statbuf )"		998599	1					
ANR	998914	Callee	fstat		998599	0					
ANR	998915	Identifier	fstat		998599	0					
ANR	998916	ArgumentList	fd		998599	1					
ANR	998917	Argument	fd		998599	0					
ANR	998918	Identifier	fd		998599	0					
ANR	998919	Argument	& statbuf		998599	1					
ANR	998920	UnaryOperationExpression	& statbuf		998599	0					
ANR	998921	UnaryOperator	&		998599	0					
ANR	998922	Identifier	statbuf		998599	1					
ANR	998923	IfStatement	if ( rval < 0 )		998599	5					
ANR	998924	Condition	rval < 0	220:6:5721:5728	998599	0	True				
ANR	998925	RelationalExpression	rval < 0		998599	0		<			
ANR	998926	Identifier	rval		998599	0					
ANR	998927	PrimaryExpression	0		998599	1					
ANR	998928	CompoundStatement		66:17:1853:1853	998599	1					
ANR	998929	ExpressionStatement	"fprintf ( stderr , ""Configuration Error File <%s>, fstat() failed: %s (errno: %d)\\n"" , config_source , strerror ( errno ) , errno )"	221:3:5737:5866	998599	0	True				
ANR	998930	CallExpression	"fprintf ( stderr , ""Configuration Error File <%s>, fstat() failed: %s (errno: %d)\\n"" , config_source , strerror ( errno ) , errno )"		998599	0					
ANR	998931	Callee	fprintf		998599	0					
ANR	998932	Identifier	fprintf		998599	0					
ANR	998933	ArgumentList	stderr		998599	1					
ANR	998934	Argument	stderr		998599	0					
ANR	998935	Identifier	stderr		998599	0					
ANR	998936	Argument	"""Configuration Error File <%s>, fstat() failed: %s (errno: %d)\\n"""		998599	1					
ANR	998937	PrimaryExpression	"""Configuration Error File <%s>, fstat() failed: %s (errno: %d)\\n"""		998599	0					
ANR	998938	Argument	config_source		998599	2					
ANR	998939	Identifier	config_source		998599	0					
ANR	998940	Argument	strerror ( errno )		998599	3					
ANR	998941	CallExpression	strerror ( errno )		998599	0					
ANR	998942	Callee	strerror		998599	0					
ANR	998943	Identifier	strerror		998599	0					
ANR	998944	ArgumentList	errno		998599	1					
ANR	998945	Argument	errno		998599	0					
ANR	998946	Identifier	errno		998599	0					
ANR	998947	Argument	errno		998599	4					
ANR	998948	Identifier	errno		998599	0					
ANR	998949	ExpressionStatement	retval = - 1	223:3:5871:5882	998599	1	True				
ANR	998950	AssignmentExpression	retval = - 1		998599	0		=			
ANR	998951	Identifier	retval		998599	0					
ANR	998952	UnaryOperationExpression	- 1		998599	1					
ANR	998953	UnaryOperator	-		998599	0					
ANR	998954	PrimaryExpression	1		998599	1					
ANR	998955	GotoStatement	goto cleanup ;	224:3:5887:5899	998599	2	True				
ANR	998956	Identifier	cleanup		998599	0					
ANR	998957	ExpressionStatement	f_uid = statbuf . st_uid	226:2:5907:5929	998599	6	True				
ANR	998958	AssignmentExpression	f_uid = statbuf . st_uid		998599	0		=			
ANR	998959	Identifier	f_uid		998599	0					
ANR	998960	MemberAccess	statbuf . st_uid		998599	1					
ANR	998961	Identifier	statbuf		998599	0					
ANR	998962	Identifier	st_uid		998599	1					
ANR	998963	IfStatement	if ( can_switch_ids ( ) )		998599	7					
ANR	998964	Condition	can_switch_ids ( )	227:6:5937:5952	998599	0	True				
ANR	998965	CallExpression	can_switch_ids ( )		998599	0					
ANR	998966	Callee	can_switch_ids		998599	0					
ANR	998967	Identifier	can_switch_ids		998599	0					
ANR	998968	ArgumentList			998599	1					
ANR	998969	CompoundStatement		73:25:2077:2077	998599	1					
ANR	998970	IfStatement	if ( f_uid != 0 )		998599	0					
ANR	998971	Condition	f_uid != 0	229:7:6023:6032	998599	0	True				
ANR	998972	EqualityExpression	f_uid != 0		998599	0		!=			
ANR	998973	Identifier	f_uid		998599	0					
ANR	998974	PrimaryExpression	0		998599	1					
ANR	998975	CompoundStatement		75:20:2157:2157	998599	1					
ANR	998976	Statement	fprintf	230:4:6042:6048	998599	0	True				
ANR	998977	Statement	(	230:11:6049:6049	998599	1	True				
ANR	998978	Statement	stderr	230:13:6051:6056	998599	2	True				
ANR	998979	Statement	","	230:19:6057:6057	998599	3	True				
ANR	998980	Statement	"""Configuration Error File <%s>, """	230:21:6059:6091	998599	4	True				
ANR	998981	Statement	"""running as root yet runtime config file owned """	231:7:6100:6147	998599	5	True				
ANR	998982	Statement	"""by uid %d, not 0!\\n"""	232:7:6156:6176	998599	6	True				
ANR	998983	Statement	","	232:28:6177:6177	998599	7	True				
ANR	998984	Statement	config_source	232:30:6179:6191	998599	8	True				
ANR	998985	Statement	","	232:43:6192:6192	998599	9	True				
ANR	998986	Statement	(	232:45:6194:6194	998599	10	True				
ANR	998987	Statement	int	232:46:6195:6197	998599	11	True				
ANR	998988	Statement	)	232:49:6198:6198	998599	12	True				
ANR	998989	Statement	f_uid	232:50:6199:6203	998599	13	True				
ANR	998990	Statement	)	232:56:6205:6205	998599	14	True				
ANR	998991	ExpressionStatement		232:57:6206:6206	998599	15	True				
ANR	998992	ExpressionStatement	retval = - 1	233:4:6212:6223	998599	16	True				
ANR	998993	AssignmentExpression	retval = - 1		998599	0		=			
ANR	998994	Identifier	retval		998599	0					
ANR	998995	UnaryOperationExpression	- 1		998599	1					
ANR	998996	UnaryOperator	-		998599	0					
ANR	998997	PrimaryExpression	1		998599	1					
ANR	998998	GotoStatement	goto cleanup ;	234:4:6229:6241	998599	17	True				
ANR	998999	Identifier	cleanup		998599	0					
ANR	999000	ElseStatement	else		998599	0					
ANR	999001	CompoundStatement		82:9:2378:2378	998599	0					
ANR	999002	IfStatement	if ( f_uid != get_my_uid ( ) )		998599	0					
ANR	999003	Condition	f_uid != get_my_uid ( )	238:7:6325:6345	998599	0	True				
ANR	999004	EqualityExpression	f_uid != get_my_uid ( )		998599	0		!=			
ANR	999005	Identifier	f_uid		998599	0					
ANR	999006	CallExpression	get_my_uid ( )		998599	1					
ANR	999007	Callee	get_my_uid		998599	0					
ANR	999008	Identifier	get_my_uid		998599	0					
ANR	999009	ArgumentList			998599	1					
ANR	999010	CompoundStatement		84:31:2470:2470	998599	1					
ANR	999011	Statement	fprintf	239:4:6355:6361	998599	0	True				
ANR	999012	Statement	(	239:11:6362:6362	998599	1	True				
ANR	999013	Statement	stderr	239:13:6364:6369	998599	2	True				
ANR	999014	Statement	","	239:19:6370:6370	998599	3	True				
ANR	999015	Statement	"""Configuration Error File <%s>, """	239:21:6372:6404	998599	4	True				
ANR	999016	Statement	"""running as uid %d yet runtime config file owned """	240:7:6413:6462	998599	5	True				
ANR	999017	Statement	"""by uid %d!\\n"""	241:7:6471:6484	998599	6	True				
ANR	999018	Statement	","	241:21:6485:6485	998599	7	True				
ANR	999019	Statement	config_source	241:23:6487:6499	998599	8	True				
ANR	999020	Statement	","	241:36:6500:6500	998599	9	True				
ANR	999021	Statement	(	241:38:6502:6502	998599	10	True				
ANR	999022	Statement	int	241:39:6503:6505	998599	11	True				
ANR	999023	Statement	)	241:42:6506:6506	998599	12	True				
ANR	999024	Statement	get_my_uid	241:43:6507:6516	998599	13	True				
ANR	999025	Statement	(	241:53:6517:6517	998599	14	True				
ANR	999026	Statement	)	241:54:6518:6518	998599	15	True				
ANR	999027	Statement	","	241:55:6519:6519	998599	16	True				
ANR	999028	Statement	(	242:7:6528:6528	998599	17	True				
ANR	999029	Statement	int	242:8:6529:6531	998599	18	True				
ANR	999030	Statement	)	242:11:6532:6532	998599	19	True				
ANR	999031	Statement	f_uid	242:12:6533:6537	998599	20	True				
ANR	999032	Statement	)	242:18:6539:6539	998599	21	True				
ANR	999033	ExpressionStatement		242:19:6540:6540	998599	22	True				
ANR	999034	ExpressionStatement	retval = - 1	243:4:6546:6557	998599	23	True				
ANR	999035	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999036	Identifier	retval		998599	0					
ANR	999037	UnaryOperationExpression	- 1		998599	1					
ANR	999038	UnaryOperator	-		998599	0					
ANR	999039	PrimaryExpression	1		998599	1					
ANR	999040	GotoStatement	goto cleanup ;	244:4:6563:6575	998599	24	True				
ANR	999041	Identifier	cleanup		998599	0					
ANR	999042	WhileStatement	while ( true )		998599	12					
ANR	999043	Condition	true	250:7:6650:6653	998599	0	True				
ANR	999044	Identifier	true		998599	0					
ANR	999045	CompoundStatement		96:13:2777:2777	998599	1					
ANR	999046	ExpressionStatement	"name = getline_implementation ( conf_fp , 128 )"	251:2:6660:6703	998599	0	True				
ANR	999047	AssignmentExpression	"name = getline_implementation ( conf_fp , 128 )"		998599	0		=			
ANR	999048	Identifier	name		998599	0					
ANR	999049	CallExpression	"getline_implementation ( conf_fp , 128 )"		998599	1					
ANR	999050	Callee	getline_implementation		998599	0					
ANR	999051	Identifier	getline_implementation		998599	0					
ANR	999052	ArgumentList	conf_fp		998599	1					
ANR	999053	Argument	conf_fp		998599	0					
ANR	999054	Identifier	conf_fp		998599	0					
ANR	999055	Argument	128		998599	1					
ANR	999056	PrimaryExpression	128		998599	0					
ANR	999057	IfStatement	if ( name == NULL )		998599	1					
ANR	999058	Condition	name == NULL	253:6:6776:6787	998599	0	True				
ANR	999059	EqualityExpression	name == NULL		998599	0		==			
ANR	999060	Identifier	name		998599	0					
ANR	999061	Identifier	NULL		998599	1					
ANR	999062	CompoundStatement		99:20:2911:2911	998599	1					
ANR	999063	IfStatement	if ( firstRead )		998599	0					
ANR	999064	Condition	firstRead	254:7:6799:6807	998599	0	True				
ANR	999065	Identifier	firstRead		998599	0					
ANR	999066	CompoundStatement		100:18:2931:2931	998599	1					
ANR	999067	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""WARNING: Config source is empty: %s\\n"" , config_source )"	255:4:6816:6898	998599	0	True				
ANR	999068	CallExpression	"dprintf ( D_FULLDEBUG , ""WARNING: Config source is empty: %s\\n"" , config_source )"		998599	0					
ANR	999069	Callee	dprintf		998599	0					
ANR	999070	Identifier	dprintf		998599	0					
ANR	999071	ArgumentList	D_FULLDEBUG		998599	1					
ANR	999072	Argument	D_FULLDEBUG		998599	0					
ANR	999073	Identifier	D_FULLDEBUG		998599	0					
ANR	999074	Argument	"""WARNING: Config source is empty: %s\\n"""		998599	1					
ANR	999075	PrimaryExpression	"""WARNING: Config source is empty: %s\\n"""		998599	0					
ANR	999076	Argument	config_source		998599	2					
ANR	999077	Identifier	config_source		998599	0					
ANR	999078	BreakStatement	break ;	258:3:6908:6913	998599	1	True				
ANR	999079	ExpressionStatement	firstRead = false	260:2:6921:6938	998599	2	True				
ANR	999080	AssignmentExpression	firstRead = false		998599	0		=			
ANR	999081	Identifier	firstRead		998599	0					
ANR	999082	Identifier	false		998599	1					
ANR	999083	IfStatement	if ( * name == '#' || blankline ( name ) )		998599	3					
ANR	999084	Condition	* name == '#' || blankline ( name )	263:6:6976:7006	998599	0	True				
ANR	999085	OrExpression	* name == '#' || blankline ( name )		998599	0		||			
ANR	999086	EqualityExpression	* name == '#'		998599	0		==			
ANR	999087	UnaryOperationExpression	* name		998599	0					
ANR	999088	UnaryOperator	*		998599	0					
ANR	999089	Identifier	name		998599	1					
ANR	999090	PrimaryExpression	'#'		998599	1					
ANR	999091	CallExpression	blankline ( name )		998599	1					
ANR	999092	Callee	blankline		998599	0					
ANR	999093	Identifier	blankline		998599	0					
ANR	999094	ArgumentList	name		998599	1					
ANR	999095	Argument	name		998599	0					
ANR	999096	Identifier	name		998599	0					
ANR	999097	ContinueStatement	continue ;	264:3:7013:7021	998599	1	True				
ANR	999098	ExpressionStatement	ptr = name	266:2:7026:7036	998599	4	True				
ANR	999099	AssignmentExpression	ptr = name		998599	0		=			
ANR	999100	Identifier	ptr		998599	0					
ANR	999101	Identifier	name		998599	1					
ANR	999102	WhileStatement	while ( * ptr )		998599	5					
ANR	999103	Condition	* ptr	272:9:7158:7161	998599	0	True				
ANR	999104	UnaryOperationExpression	* ptr		998599	0					
ANR	999105	UnaryOperator	*		998599	0					
ANR	999106	Identifier	ptr		998599	1					
ANR	999107	CompoundStatement		118:16:3286:3286	998599	1					
ANR	999108	IfStatement	if ( isspace ( * ptr ) || ISOP ( * ptr ) )		998599	0					
ANR	999109	Condition	isspace ( * ptr ) || ISOP ( * ptr )	273:7:7174:7200	998599	0	True				
ANR	999110	OrExpression	isspace ( * ptr ) || ISOP ( * ptr )		998599	0		||			
ANR	999111	CallExpression	isspace ( * ptr )		998599	0					
ANR	999112	Callee	isspace		998599	0					
ANR	999113	Identifier	isspace		998599	0					
ANR	999114	ArgumentList	* ptr		998599	1					
ANR	999115	Argument	* ptr		998599	0					
ANR	999116	UnaryOperationExpression	* ptr		998599	0					
ANR	999117	UnaryOperator	*		998599	0					
ANR	999118	Identifier	ptr		998599	1					
ANR	999119	CallExpression	ISOP ( * ptr )		998599	1					
ANR	999120	Callee	ISOP		998599	0					
ANR	999121	Identifier	ISOP		998599	0					
ANR	999122	ArgumentList	* ptr		998599	1					
ANR	999123	Argument	* ptr		998599	0					
ANR	999124	UnaryOperationExpression	* ptr		998599	0					
ANR	999125	UnaryOperator	*		998599	0					
ANR	999126	Identifier	ptr		998599	1					
ANR	999127	CompoundStatement		119:37:3325:3325	998599	1					
ANR	999128	BreakStatement	break ;	275:5:7259:7264	998599	0	True				
ANR	999129	ElseStatement	else		998599	0					
ANR	999130	CompoundStatement		122:10:3397:3397	998599	0					
ANR	999131	ExpressionStatement	ptr ++	277:5:7283:7288	998599	0	True				
ANR	999132	PostIncDecOperationExpression	ptr ++		998599	0					
ANR	999133	Identifier	ptr		998599	0					
ANR	999134	IncDec	++		998599	1					
ANR	999135	IfStatement	if ( ! * ptr )		998599	6					
ANR	999136	Condition	! * ptr	281:6:7306:7310	998599	0	True				
ANR	999137	UnaryOperationExpression	! * ptr		998599	0					
ANR	999138	UnaryOperator	!		998599	0					
ANR	999139	UnaryOperationExpression	* ptr		998599	1					
ANR	999140	UnaryOperator	*		998599	0					
ANR	999141	Identifier	ptr		998599	1					
ANR	999142	CompoundStatement		127:14:3435:3435	998599	1					
ANR	999143	IfStatement	if ( name && name [ 0 ] && name [ 0 ] == '[' )		998599	0					
ANR	999144	Condition	name && name [ 0 ] && name [ 0 ] == '['	283:8:7381:7413	998599	0	True				
ANR	999145	AndExpression	name && name [ 0 ] && name [ 0 ] == '['		998599	0		&&			
ANR	999146	Identifier	name		998599	0					
ANR	999147	AndExpression	name [ 0 ] && name [ 0 ] == '['		998599	1		&&			
ANR	999148	ArrayIndexing	name [ 0 ]		998599	0					
ANR	999149	Identifier	name		998599	0					
ANR	999150	PrimaryExpression	0		998599	1					
ANR	999151	EqualityExpression	name [ 0 ] == '['		998599	1		==			
ANR	999152	ArrayIndexing	name [ 0 ]		998599	0					
ANR	999153	Identifier	name		998599	0					
ANR	999154	PrimaryExpression	0		998599	1					
ANR	999155	PrimaryExpression	'['		998599	1					
ANR	999156	CompoundStatement		129:44:3538:3538	998599	1					
ANR	999157	ContinueStatement	continue ;	287:4:7596:7604	998599	0	True				
ANR	999158	ElseStatement	else		998599	0					
ANR	999159	CompoundStatement		134:10:3737:3737	998599	0					
ANR	999160	ExpressionStatement	retval = - 1	290:4:7672:7683	998599	0	True				
ANR	999161	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999162	Identifier	retval		998599	0					
ANR	999163	UnaryOperationExpression	- 1		998599	1					
ANR	999164	UnaryOperator	-		998599	0					
ANR	999165	PrimaryExpression	1		998599	1					
ANR	999166	GotoStatement	goto cleanup ;	291:4:7689:7701	998599	1	True				
ANR	999167	Identifier	cleanup		998599	0					
ANR	999168	IfStatement	if ( ISOP ( * ptr ) )		998599	7					
ANR	999169	Condition	ISOP ( * ptr )	295:6:7719:7728	998599	0	True				
ANR	999170	CallExpression	ISOP ( * ptr )		998599	0					
ANR	999171	Callee	ISOP		998599	0					
ANR	999172	Identifier	ISOP		998599	0					
ANR	999173	ArgumentList	* ptr		998599	1					
ANR	999174	Argument	* ptr		998599	0					
ANR	999175	UnaryOperationExpression	* ptr		998599	0					
ANR	999176	UnaryOperator	*		998599	0					
ANR	999177	Identifier	ptr		998599	1					
ANR	999178	CompoundStatement		141:19:3853:3853	998599	1					
ANR	999179	ExpressionStatement	op = * ptr	296:3:7737:7746	998599	0	True				
ANR	999180	AssignmentExpression	op = * ptr		998599	0		=			
ANR	999181	Identifier	op		998599	0					
ANR	999182	UnaryOperationExpression	* ptr		998599	1					
ANR	999183	UnaryOperator	*		998599	0					
ANR	999184	Identifier	ptr		998599	1					
ANR	999185	ExpressionStatement	* ptr ++ = '\\0'	298:3:7786:7799	998599	1	True				
ANR	999186	AssignmentExpression	* ptr ++ = '\\0'		998599	0		=			
ANR	999187	UnaryOperationExpression	* ptr ++		998599	0					
ANR	999188	UnaryOperator	*		998599	0					
ANR	999189	PostIncDecOperationExpression	ptr ++		998599	1					
ANR	999190	Identifier	ptr		998599	0					
ANR	999191	IncDec	++		998599	1					
ANR	999192	PrimaryExpression	'\\0'		998599	1					
ANR	999193	ElseStatement	else		998599	0					
ANR	999194	CompoundStatement		146:9:3973:3973	998599	0					
ANR	999195	ExpressionStatement	* ptr ++ = '\\0'	301:3:7857:7870	998599	0	True				
ANR	999196	AssignmentExpression	* ptr ++ = '\\0'		998599	0		=			
ANR	999197	UnaryOperationExpression	* ptr ++		998599	0					
ANR	999198	UnaryOperator	*		998599	0					
ANR	999199	PostIncDecOperationExpression	ptr ++		998599	1					
ANR	999200	Identifier	ptr		998599	0					
ANR	999201	IncDec	++		998599	1					
ANR	999202	PrimaryExpression	'\\0'		998599	1					
ANR	999203	WhileStatement	while ( * ptr && ! ISOP ( * ptr ) )		998599	1					
ANR	999204	Condition	* ptr && ! ISOP ( * ptr )	302:10:7882:7900	998599	0	True				
ANR	999205	AndExpression	* ptr && ! ISOP ( * ptr )		998599	0		&&			
ANR	999206	UnaryOperationExpression	* ptr		998599	0					
ANR	999207	UnaryOperator	*		998599	0					
ANR	999208	Identifier	ptr		998599	1					
ANR	999209	UnaryOperationExpression	! ISOP ( * ptr )		998599	1					
ANR	999210	UnaryOperator	!		998599	0					
ANR	999211	CallExpression	ISOP ( * ptr )		998599	1					
ANR	999212	Callee	ISOP		998599	0					
ANR	999213	Identifier	ISOP		998599	0					
ANR	999214	ArgumentList	* ptr		998599	1					
ANR	999215	Argument	* ptr		998599	0					
ANR	999216	UnaryOperationExpression	* ptr		998599	0					
ANR	999217	UnaryOperator	*		998599	0					
ANR	999218	Identifier	ptr		998599	1					
ANR	999219	CompoundStatement		148:32:4025:4025	998599	1					
ANR	999220	ExpressionStatement	ptr ++	303:4:7910:7915	998599	0	True				
ANR	999221	PostIncDecOperationExpression	ptr ++		998599	0					
ANR	999222	Identifier	ptr		998599	0					
ANR	999223	IncDec	++		998599	1					
ANR	999224	IfStatement	if ( ! * ptr )		998599	2					
ANR	999225	Condition	! * ptr	306:7:7930:7934	998599	0	True				
ANR	999226	UnaryOperationExpression	! * ptr		998599	0					
ANR	999227	UnaryOperator	!		998599	0					
ANR	999228	UnaryOperationExpression	* ptr		998599	1					
ANR	999229	UnaryOperator	*		998599	0					
ANR	999230	Identifier	ptr		998599	1					
ANR	999231	CompoundStatement		152:15:4059:4059	998599	1					
ANR	999232	ExpressionStatement	retval = - 1	307:4:7944:7955	998599	0	True				
ANR	999233	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999234	Identifier	retval		998599	0					
ANR	999235	UnaryOperationExpression	- 1		998599	1					
ANR	999236	UnaryOperator	-		998599	0					
ANR	999237	PrimaryExpression	1		998599	1					
ANR	999238	GotoStatement	goto cleanup ;	308:4:7961:7973	998599	1	True				
ANR	999239	Identifier	cleanup		998599	0					
ANR	999240	ExpressionStatement	op = * ptr ++	311:3:7984:7995	998599	3	True				
ANR	999241	AssignmentExpression	op = * ptr ++		998599	0		=			
ANR	999242	Identifier	op		998599	0					
ANR	999243	UnaryOperationExpression	* ptr ++		998599	1					
ANR	999244	UnaryOperator	*		998599	0					
ANR	999245	PostIncDecOperationExpression	ptr ++		998599	1					
ANR	999246	Identifier	ptr		998599	0					
ANR	999247	IncDec	++		998599	1					
ANR	999248	WhileStatement	while ( * ptr && isspace ( * ptr ) )		998599	8					
ANR	999249	Condition	* ptr && isspace ( * ptr )	315:9:8052:8072	998599	0	True				
ANR	999250	AndExpression	* ptr && isspace ( * ptr )		998599	0		&&			
ANR	999251	UnaryOperationExpression	* ptr		998599	0					
ANR	999252	UnaryOperator	*		998599	0					
ANR	999253	Identifier	ptr		998599	1					
ANR	999254	CallExpression	isspace ( * ptr )		998599	1					
ANR	999255	Callee	isspace		998599	0					
ANR	999256	Identifier	isspace		998599	0					
ANR	999257	ArgumentList	* ptr		998599	1					
ANR	999258	Argument	* ptr		998599	0					
ANR	999259	UnaryOperationExpression	* ptr		998599	0					
ANR	999260	UnaryOperator	*		998599	0					
ANR	999261	Identifier	ptr		998599	1					
ANR	999262	CompoundStatement		161:33:4197:4197	998599	1					
ANR	999263	ExpressionStatement	ptr ++	316:3:8081:8086	998599	0	True				
ANR	999264	PostIncDecOperationExpression	ptr ++		998599	0					
ANR	999265	Identifier	ptr		998599	0					
ANR	999266	IncDec	++		998599	1					
ANR	999267	ExpressionStatement	rhs = ptr	319:2:8095:8104	998599	9	True				
ANR	999268	AssignmentExpression	rhs = ptr		998599	0		=			
ANR	999269	Identifier	rhs		998599	0					
ANR	999270	Identifier	ptr		998599	1					
ANR	999271	ExpressionStatement	"name = expand_macro ( name , table , table_size )"	324:2:8198:8244	998599	10	True				
ANR	999272	AssignmentExpression	"name = expand_macro ( name , table , table_size )"		998599	0		=			
ANR	999273	Identifier	name		998599	0					
ANR	999274	CallExpression	"expand_macro ( name , table , table_size )"		998599	1					
ANR	999275	Callee	expand_macro		998599	0					
ANR	999276	Identifier	expand_macro		998599	0					
ANR	999277	ArgumentList	name		998599	1					
ANR	999278	Argument	name		998599	0					
ANR	999279	Identifier	name		998599	0					
ANR	999280	Argument	table		998599	1					
ANR	999281	Identifier	table		998599	0					
ANR	999282	Argument	table_size		998599	2					
ANR	999283	Identifier	table_size		998599	0					
ANR	999284	IfStatement	if ( name == NULL )		998599	11					
ANR	999285	Condition	name == NULL	325:6:8252:8263	998599	0	True				
ANR	999286	EqualityExpression	name == NULL		998599	0		==			
ANR	999287	Identifier	name		998599	0					
ANR	999288	Identifier	NULL		998599	1					
ANR	999289	CompoundStatement		171:21:4388:4388	998599	1					
ANR	999290	ExpressionStatement	retval = - 1	326:3:8272:8283	998599	0	True				
ANR	999291	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999292	Identifier	retval		998599	0					
ANR	999293	UnaryOperationExpression	- 1		998599	1					
ANR	999294	UnaryOperator	-		998599	0					
ANR	999295	PrimaryExpression	1		998599	1					
ANR	999296	GotoStatement	goto cleanup ;	327:3:8288:8300	998599	1	True				
ANR	999297	Identifier	cleanup		998599	0					
ANR	999298	IfStatement	if ( ! is_valid_param_name ( name ) )		998599	12					
ANR	999299	Condition	! is_valid_param_name ( name )	332:6:8410:8435	998599	0	True				
ANR	999300	UnaryOperationExpression	! is_valid_param_name ( name )		998599	0					
ANR	999301	UnaryOperator	!		998599	0					
ANR	999302	CallExpression	is_valid_param_name ( name )		998599	1					
ANR	999303	Callee	is_valid_param_name		998599	0					
ANR	999304	Identifier	is_valid_param_name		998599	0					
ANR	999305	ArgumentList	name		998599	1					
ANR	999306	Argument	name		998599	0					
ANR	999307	Identifier	name		998599	0					
ANR	999308	CompoundStatement		178:35:4560:4560	998599	1					
ANR	999309	ExpressionStatement	"fprintf ( stderr , ""Configuration Error File <%s>, Line %d: Illegal Identifier: <%s>\\n"" , config_source , ConfigLineNo , name )"	333:3:8444:8578	998599	0	True				
ANR	999310	CallExpression	"fprintf ( stderr , ""Configuration Error File <%s>, Line %d: Illegal Identifier: <%s>\\n"" , config_source , ConfigLineNo , name )"		998599	0					
ANR	999311	Callee	fprintf		998599	0					
ANR	999312	Identifier	fprintf		998599	0					
ANR	999313	ArgumentList	stderr		998599	1					
ANR	999314	Argument	stderr		998599	0					
ANR	999315	Identifier	stderr		998599	0					
ANR	999316	Argument	"""Configuration Error File <%s>, Line %d: Illegal Identifier: <%s>\\n"""		998599	1					
ANR	999317	PrimaryExpression	"""Configuration Error File <%s>, Line %d: Illegal Identifier: <%s>\\n"""		998599	0					
ANR	999318	Argument	config_source		998599	2					
ANR	999319	Identifier	config_source		998599	0					
ANR	999320	Argument	ConfigLineNo		998599	3					
ANR	999321	Identifier	ConfigLineNo		998599	0					
ANR	999322	Argument	name		998599	4					
ANR	999323	Identifier	name		998599	0					
ANR	999324	ExpressionStatement	retval = - 1	336:3:8583:8594	998599	1	True				
ANR	999325	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999326	Identifier	retval		998599	0					
ANR	999327	UnaryOperationExpression	- 1		998599	1					
ANR	999328	UnaryOperator	-		998599	0					
ANR	999329	PrimaryExpression	1		998599	1					
ANR	999330	GotoStatement	goto cleanup ;	337:3:8599:8611	998599	2	True				
ANR	999331	Identifier	cleanup		998599	0					
ANR	999332	IfStatement	if ( expand_flag == EXPAND_IMMEDIATE )		998599	13					
ANR	999333	Condition	expand_flag == EXPAND_IMMEDIATE	340:6:8624:8654	998599	0	True				
ANR	999334	EqualityExpression	expand_flag == EXPAND_IMMEDIATE		998599	0		==			
ANR	999335	Identifier	expand_flag		998599	0					
ANR	999336	Identifier	EXPAND_IMMEDIATE		998599	1					
ANR	999337	CompoundStatement		186:40:4779:4779	998599	1					
ANR	999338	ExpressionStatement	"value = expand_macro ( rhs , table , table_size )"	341:3:8663:8709	998599	0	True				
ANR	999339	AssignmentExpression	"value = expand_macro ( rhs , table , table_size )"		998599	0		=			
ANR	999340	Identifier	value		998599	0					
ANR	999341	CallExpression	"expand_macro ( rhs , table , table_size )"		998599	1					
ANR	999342	Callee	expand_macro		998599	0					
ANR	999343	Identifier	expand_macro		998599	0					
ANR	999344	ArgumentList	rhs		998599	1					
ANR	999345	Argument	rhs		998599	0					
ANR	999346	Identifier	rhs		998599	0					
ANR	999347	Argument	table		998599	1					
ANR	999348	Identifier	table		998599	0					
ANR	999349	Argument	table_size		998599	2					
ANR	999350	Identifier	table_size		998599	0					
ANR	999351	IfStatement	if ( value == NULL )		998599	1					
ANR	999352	Condition	value == NULL	342:7:8718:8730	998599	0	True				
ANR	999353	EqualityExpression	value == NULL		998599	0		==			
ANR	999354	Identifier	value		998599	0					
ANR	999355	Identifier	NULL		998599	1					
ANR	999356	CompoundStatement		188:23:4855:4855	998599	1					
ANR	999357	ExpressionStatement	retval = - 1	343:4:8740:8751	998599	0	True				
ANR	999358	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999359	Identifier	retval		998599	0					
ANR	999360	UnaryOperationExpression	- 1		998599	1					
ANR	999361	UnaryOperator	-		998599	0					
ANR	999362	PrimaryExpression	1		998599	1					
ANR	999363	GotoStatement	goto cleanup ;	344:4:8757:8769	998599	1	True				
ANR	999364	Identifier	cleanup		998599	0					
ANR	999365	ElseStatement	else		998599	0					
ANR	999366	CompoundStatement		192:10:4907:4907	998599	0					
ANR	999367	ExpressionStatement	"value = expand_macro ( rhs , table , table_size , name )"	348:3:8828:8880	998599	0	True				
ANR	999368	AssignmentExpression	"value = expand_macro ( rhs , table , table_size , name )"		998599	0		=			
ANR	999369	Identifier	value		998599	0					
ANR	999370	CallExpression	"expand_macro ( rhs , table , table_size , name )"		998599	1					
ANR	999371	Callee	expand_macro		998599	0					
ANR	999372	Identifier	expand_macro		998599	0					
ANR	999373	ArgumentList	rhs		998599	1					
ANR	999374	Argument	rhs		998599	0					
ANR	999375	Identifier	rhs		998599	0					
ANR	999376	Argument	table		998599	1					
ANR	999377	Identifier	table		998599	0					
ANR	999378	Argument	table_size		998599	2					
ANR	999379	Identifier	table_size		998599	0					
ANR	999380	Argument	name		998599	3					
ANR	999381	Identifier	name		998599	0					
ANR	999382	IfStatement	if ( value == NULL )		998599	1					
ANR	999383	Condition	value == NULL	349:7:8889:8901	998599	0	True				
ANR	999384	EqualityExpression	value == NULL		998599	0		==			
ANR	999385	Identifier	value		998599	0					
ANR	999386	Identifier	NULL		998599	1					
ANR	999387	CompoundStatement		195:23:5026:5026	998599	1					
ANR	999388	ExpressionStatement	retval = - 1	350:4:8911:8922	998599	0	True				
ANR	999389	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999390	Identifier	retval		998599	0					
ANR	999391	UnaryOperationExpression	- 1		998599	1					
ANR	999392	UnaryOperator	-		998599	0					
ANR	999393	PrimaryExpression	1		998599	1					
ANR	999394	GotoStatement	goto cleanup ;	351:4:8928:8940	998599	1	True				
ANR	999395	Identifier	cleanup		998599	0					
ANR	999396	IfStatement	if ( op == ':' || op == '=' )		998599	14					
ANR	999397	Condition	op == ':' || op == '='	355:6:8960:8981	998599	0	True				
ANR	999398	OrExpression	op == ':' || op == '='		998599	0		||			
ANR	999399	EqualityExpression	op == ':'		998599	0		==			
ANR	999400	Identifier	op		998599	0					
ANR	999401	PrimaryExpression	':'		998599	1					
ANR	999402	EqualityExpression	op == '='		998599	1		==			
ANR	999403	Identifier	op		998599	0					
ANR	999404	PrimaryExpression	'='		998599	1					
ANR	999405	CompoundStatement		201:31:5106:5106	998599	1					
ANR	999406	ExpressionStatement	"insert ( name , value , table , table_size )"	364:3:9275:9315	998599	0	True				
ANR	999407	CallExpression	"insert ( name , value , table , table_size )"		998599	0					
ANR	999408	Callee	insert		998599	0					
ANR	999409	Identifier	insert		998599	0					
ANR	999410	ArgumentList	name		998599	1					
ANR	999411	Argument	name		998599	0					
ANR	999412	Identifier	name		998599	0					
ANR	999413	Argument	value		998599	1					
ANR	999414	Identifier	value		998599	0					
ANR	999415	Argument	table		998599	2					
ANR	999416	Identifier	table		998599	0					
ANR	999417	Argument	table_size		998599	3					
ANR	999418	Identifier	table_size		998599	0					
ANR	999419	IfStatement	if ( extra_info != NULL )		998599	1					
ANR	999420	Condition	extra_info != NULL	365:7:9324:9341	998599	0	True				
ANR	999421	EqualityExpression	extra_info != NULL		998599	0		!=			
ANR	999422	Identifier	extra_info		998599	0					
ANR	999423	Identifier	NULL		998599	1					
ANR	999424	CompoundStatement		211:27:5465:5465	998599	1					
ANR	999425	ExpressionStatement	"extra_info -> AddFileParam ( name , config_source , ConfigLineNo )"	366:4:9350:9409	998599	0	True				
ANR	999426	CallExpression	"extra_info -> AddFileParam ( name , config_source , ConfigLineNo )"		998599	0					
ANR	999427	Callee	extra_info -> AddFileParam		998599	0					
ANR	999428	PtrMemberAccess	extra_info -> AddFileParam		998599	0					
ANR	999429	Identifier	extra_info		998599	0					
ANR	999430	Identifier	AddFileParam		998599	1					
ANR	999431	ArgumentList	name		998599	1					
ANR	999432	Argument	name		998599	0					
ANR	999433	Identifier	name		998599	0					
ANR	999434	Argument	config_source		998599	1					
ANR	999435	Identifier	config_source		998599	0					
ANR	999436	Argument	ConfigLineNo		998599	2					
ANR	999437	Identifier	ConfigLineNo		998599	0					
ANR	999438	ElseStatement	else		998599	0					
ANR	999439	CompoundStatement		214:9:5546:5546	998599	0					
ANR	999440	ExpressionStatement	"fprintf ( stderr , ""Configuration Error File <%s>, Line %d: Syntax Error\\n"" , config_source , ConfigLineNo )"	369:3:9430:9542	998599	0	True				
ANR	999441	CallExpression	"fprintf ( stderr , ""Configuration Error File <%s>, Line %d: Syntax Error\\n"" , config_source , ConfigLineNo )"		998599	0					
ANR	999442	Callee	fprintf		998599	0					
ANR	999443	Identifier	fprintf		998599	0					
ANR	999444	ArgumentList	stderr		998599	1					
ANR	999445	Argument	stderr		998599	0					
ANR	999446	Identifier	stderr		998599	0					
ANR	999447	Argument	"""Configuration Error File <%s>, Line %d: Syntax Error\\n"""		998599	1					
ANR	999448	PrimaryExpression	"""Configuration Error File <%s>, Line %d: Syntax Error\\n"""		998599	0					
ANR	999449	Argument	config_source		998599	2					
ANR	999450	Identifier	config_source		998599	0					
ANR	999451	Argument	ConfigLineNo		998599	3					
ANR	999452	Identifier	ConfigLineNo		998599	0					
ANR	999453	ExpressionStatement	retval = - 1	372:3:9547:9558	998599	1	True				
ANR	999454	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999455	Identifier	retval		998599	0					
ANR	999456	UnaryOperationExpression	- 1		998599	1					
ANR	999457	UnaryOperator	-		998599	0					
ANR	999458	PrimaryExpression	1		998599	1					
ANR	999459	GotoStatement	goto cleanup ;	373:3:9563:9575	998599	2	True				
ANR	999460	Identifier	cleanup		998599	0					
ANR	999461	ExpressionStatement	FREE ( name )	376:2:9584:9596	998599	15	True				
ANR	999462	CallExpression	FREE ( name )		998599	0					
ANR	999463	Callee	FREE		998599	0					
ANR	999464	Identifier	FREE		998599	0					
ANR	999465	ArgumentList	name		998599	1					
ANR	999466	Argument	name		998599	0					
ANR	999467	Identifier	name		998599	0					
ANR	999468	ExpressionStatement	name = NULL	377:2:9600:9611	998599	16	True				
ANR	999469	AssignmentExpression	name = NULL		998599	0		=			
ANR	999470	Identifier	name		998599	0					
ANR	999471	Identifier	NULL		998599	1					
ANR	999472	ExpressionStatement	FREE ( value )	378:2:9615:9628	998599	17	True				
ANR	999473	CallExpression	FREE ( value )		998599	0					
ANR	999474	Callee	FREE		998599	0					
ANR	999475	Identifier	FREE		998599	0					
ANR	999476	ArgumentList	value		998599	1					
ANR	999477	Argument	value		998599	0					
ANR	999478	Identifier	value		998599	0					
ANR	999479	ExpressionStatement	value = NULL	379:2:9632:9644	998599	18	True				
ANR	999480	AssignmentExpression	value = NULL		998599	0		=			
ANR	999481	Identifier	value		998599	0					
ANR	999482	Identifier	NULL		998599	1					
ANR	999483	Label	cleanup :	382:1:9651:9658	998599	13	True				
ANR	999484	Identifier	cleanup		998599	0					
ANR	999485	IfStatement	if ( conf_fp )		998599	14					
ANR	999486	Condition	conf_fp	383:6:9666:9672	998599	0	True				
ANR	999487	Identifier	conf_fp		998599	0					
ANR	999488	CompoundStatement		229:16:5797:5797	998599	1					
ANR	999489	IfStatement	if ( is_pipe_cmd )		998599	0					
ANR	999490	Condition	is_pipe_cmd	384:7:9685:9695	998599	0	True				
ANR	999491	Identifier	is_pipe_cmd		998599	0					
ANR	999492	CompoundStatement		231:3:5825:5861	998599	1					
ANR	999493	IdentifierDeclStatement	int exit_code = my_pclose ( conf_fp ) ;	385:3:9704:9740	998599	0	True				
ANR	999494	IdentifierDecl	exit_code = my_pclose ( conf_fp )		998599	0					
ANR	999495	IdentifierDeclType	int		998599	0					
ANR	999496	Identifier	exit_code		998599	1					
ANR	999497	AssignmentExpression	exit_code = my_pclose ( conf_fp )		998599	2		=			
ANR	999498	Identifier	exit_code		998599	0					
ANR	999499	CallExpression	my_pclose ( conf_fp )		998599	1					
ANR	999500	Callee	my_pclose		998599	0					
ANR	999501	Identifier	my_pclose		998599	0					
ANR	999502	ArgumentList	conf_fp		998599	1					
ANR	999503	Argument	conf_fp		998599	0					
ANR	999504	Identifier	conf_fp		998599	0					
ANR	999505	IfStatement	if ( retval == 0 && exit_code != 0 )		998599	1					
ANR	999506	Condition	retval == 0 && exit_code != 0	386:8:9750:9778	998599	0	True				
ANR	999507	AndExpression	retval == 0 && exit_code != 0		998599	0		&&			
ANR	999508	EqualityExpression	retval == 0		998599	0		==			
ANR	999509	Identifier	retval		998599	0					
ANR	999510	PrimaryExpression	0		998599	1					
ANR	999511	EqualityExpression	exit_code != 0		998599	1		!=			
ANR	999512	Identifier	exit_code		998599	0					
ANR	999513	PrimaryExpression	0		998599	1					
ANR	999514	CompoundStatement		232:40:5903:5903	998599	1					
ANR	999515	Statement	fprintf	387:4:9788:9794	998599	0	True				
ANR	999516	Statement	(	387:11:9795:9795	998599	1	True				
ANR	999517	Statement	stderr	387:13:9797:9802	998599	2	True				
ANR	999518	Statement	","	387:19:9803:9803	998599	3	True				
ANR	999519	Statement	"""Configuration Error File <%s>: """	387:21:9805:9837	998599	4	True				
ANR	999520	Statement	"""command terminated with exit code %d\\n"""	388:7:9846:9885	998599	5	True				
ANR	999521	Statement	","	388:47:9886:9886	998599	6	True				
ANR	999522	Statement	config_source	389:7:9895:9907	998599	7	True				
ANR	999523	Statement	","	389:20:9908:9908	998599	8	True				
ANR	999524	Statement	exit_code	389:22:9910:9918	998599	9	True				
ANR	999525	Statement	)	389:32:9920:9920	998599	10	True				
ANR	999526	ExpressionStatement		389:33:9921:9921	998599	11	True				
ANR	999527	ExpressionStatement	retval = - 1	390:4:9927:9938	998599	12	True				
ANR	999528	AssignmentExpression	retval = - 1		998599	0		=			
ANR	999529	Identifier	retval		998599	0					
ANR	999530	UnaryOperationExpression	- 1		998599	1					
ANR	999531	UnaryOperator	-		998599	0					
ANR	999532	PrimaryExpression	1		998599	1					
ANR	999533	ElseStatement	else		998599	0					
ANR	999534	CompoundStatement		238:9:6075:6075	998599	0					
ANR	999535	ExpressionStatement	fclose ( conf_fp )	393:3:9959:9976	998599	0	True				
ANR	999536	CallExpression	fclose ( conf_fp )		998599	0					
ANR	999537	Callee	fclose		998599	0					
ANR	999538	Identifier	fclose		998599	0					
ANR	999539	ArgumentList	conf_fp		998599	1					
ANR	999540	Argument	conf_fp		998599	0					
ANR	999541	Identifier	conf_fp		998599	0					
ANR	999542	IfStatement	if ( name )		998599	15					
ANR	999543	Condition	name	396:4:9989:9992	998599	0	True				
ANR	999544	Identifier	name		998599	0					
ANR	999545	CompoundStatement		242:10:6116:6116	998599	1					
ANR	999546	ExpressionStatement	FREE ( name )	397:2:9999:10011	998599	0	True				
ANR	999547	CallExpression	FREE ( name )		998599	0					
ANR	999548	Callee	FREE		998599	0					
ANR	999549	Identifier	FREE		998599	0					
ANR	999550	ArgumentList	name		998599	1					
ANR	999551	Argument	name		998599	0					
ANR	999552	Identifier	name		998599	0					
ANR	999553	IfStatement	if ( value )		998599	16					
ANR	999554	Condition	value	399:4:10020:10024	998599	0	True				
ANR	999555	Identifier	value		998599	0					
ANR	999556	CompoundStatement		245:11:6148:6148	998599	1					
ANR	999557	ExpressionStatement	FREE ( value )	400:2:10031:10044	998599	0	True				
ANR	999558	CallExpression	FREE ( value )		998599	0					
ANR	999559	Callee	FREE		998599	0					
ANR	999560	Identifier	FREE		998599	0					
ANR	999561	ArgumentList	value		998599	1					
ANR	999562	Argument	value		998599	0					
ANR	999563	Identifier	value		998599	0					
ANR	999564	ReturnStatement	return retval ;	402:1:10050:10063	998599	17	True				
ANR	999565	Identifier	retval		998599	0					
ANR	999566	ReturnType	int		998599	1					
ANR	999567	Identifier	Read_config		998599	2					
ANR	999568	ParameterList	"const char * config_source , BUCKET * * table , int table_size , int expand_flag , bool check_runtime_security , ExtraParamTable * extra_info"		998599	3					
ANR	999569	Parameter	const char * config_source	151:13:3731:3755	998599	0	True				
ANR	999570	ParameterType	const char *		998599	0					
ANR	999571	Identifier	config_source		998599	1					
ANR	999572	Parameter	BUCKET * * table	151:40:3758:3771	998599	1	True				
ANR	999573	ParameterType	BUCKET * *		998599	0					
ANR	999574	Identifier	table		998599	1					
ANR	999575	Parameter	int table_size	152:4:3779:3792	998599	2	True				
ANR	999576	ParameterType	int		998599	0					
ANR	999577	Identifier	table_size		998599	1					
ANR	999578	Parameter	int expand_flag	152:20:3795:3809	998599	3	True				
ANR	999579	ParameterType	int		998599	0					
ANR	999580	Identifier	expand_flag		998599	1					
ANR	999581	Parameter	bool check_runtime_security	153:4:3816:3842	998599	4	True				
ANR	999582	ParameterType	bool		998599	0					
ANR	999583	Identifier	check_runtime_security		998599	1					
ANR	999584	Parameter	ExtraParamTable * extra_info	154:4:3849:3875	998599	5	True				
ANR	999585	ParameterType	ExtraParamTable *		998599	0					
ANR	999586	Identifier	extra_info		998599	1					
ANR	999587	CFGEntryNode	ENTRY		998599		True				
ANR	999588	CFGExitNode	EXIT		998599		True				
ANR	999589	Symbol	argList		998599						
ANR	999590	Symbol	table_size		998599						
ANR	999591	Symbol	firstRead		998599						
ANR	999592	Symbol	cmdToExecute		998599						
ANR	999593	Symbol	argList . AppendArgsV1RawOrV2Quoted		998599						
ANR	999594	Symbol	strlen		998599						
ANR	999595	Symbol	can_switch_ids		998599						
ANR	999596	Symbol	expand_flag		998599						
ANR	999597	Symbol	* ptr		998599						
ANR	999598	Symbol	& statbuf		998599						
ANR	999599	Symbol	get_my_uid		998599						
ANR	999600	Symbol	errno		998599						
ANR	999601	Symbol	EXPAND_IMMEDIATE		998599						
ANR	999602	Symbol	NULL		998599						
ANR	999603	Symbol	args_errors . Value		998599						
ANR	999604	Symbol	isspace		998599						
ANR	999605	Symbol	ISOP		998599						
ANR	999606	Symbol	D_FULLDEBUG		998599						
ANR	999607	Symbol	stderr		998599						
ANR	999608	Symbol	retval		998599						
ANR	999609	Symbol	check_runtime_security		998599						
ANR	999610	Symbol	strerror		998599						
ANR	999611	Symbol	expand_macro		998599						
ANR	999612	Symbol	fileno		998599						
ANR	999613	Symbol	name		998599						
ANR	999614	Symbol	true		998599						
ANR	999615	Symbol	statbuf . st_uid		998599						
ANR	999616	Symbol	getline_implementation		998599						
ANR	999617	Symbol	exit_code		998599						
ANR	999618	Symbol	* cmdToExecute		998599						
ANR	999619	Symbol	f_uid		998599						
ANR	999620	Symbol	my_pclose		998599						
ANR	999621	Symbol	fd		998599						
ANR	999622	Symbol	is_valid_command		998599						
ANR	999623	Symbol	my_popen		998599						
ANR	999624	Symbol	rval		998599						
ANR	999625	Symbol	args_errors		998599						
ANR	999626	Symbol	config_source		998599						
ANR	999627	Symbol	value		998599						
ANR	999628	Symbol	safe_fopen_wrapper_follow		998599						
ANR	999629	Symbol	table		998599						
ANR	999630	Symbol	* name		998599						
ANR	999631	Symbol	op		998599						
ANR	999632	Symbol	is_pipe_cmd		998599						
ANR	999633	Symbol	* ptr ++		998599						
ANR	999634	Symbol	false		998599						
ANR	999635	Symbol	fstat		998599						
ANR	999636	Symbol	& args_errors		998599						
ANR	999637	Symbol	ptr		998599						
ANR	999638	Symbol	is_valid_param_name		998599						
ANR	999639	Symbol	blankline		998599						
ANR	999640	Symbol	extra_info		998599						
ANR	999641	Symbol	ConfigLineNo		998599						
ANR	999642	Symbol	* strlen		998599						
ANR	999643	Symbol	statbuf		998599						
ANR	999644	Symbol	conf_fp		998599						
ANR	999645	Symbol	is_piped_command		998599						
ANR	999646	Symbol	FALSE		998599						
ANR	999647	Symbol	strdup		998599						
ANR	999648	Symbol	rhs		998599						
ANR	999649	Function	condor_hash	410:0:10157:10424							
ANR	999650	FunctionDef	"condor_hash (register const char * string , register int size)"		999649	0					
ANR	999651	CompoundStatement		412:0:10223:10424	999649	0					
ANR	999652	Statement	register	413:1:10226:10233	999649	0	True				
ANR	999653	IdentifierDeclStatement	unsigned int answer ;	413:10:10235:10255	999649	1	True				
ANR	999654	IdentifierDecl	answer		999649	0					
ANR	999655	IdentifierDeclType	unsigned int		999649	0					
ANR	999656	Identifier	answer		999649	1					
ANR	999657	ExpressionStatement	answer = 1	415:1:10259:10269	999649	2	True				
ANR	999658	AssignmentExpression	answer = 1		999649	0		=			
ANR	999659	Identifier	answer		999649	0					
ANR	999660	PrimaryExpression	1		999649	1					
ANR	999661	ForStatement	for ( ; * string ; string ++ )		999649	3					
ANR	999662	Condition	* string	417:8:10280:10286	999649	0	True				
ANR	999663	UnaryOperationExpression	* string		999649	0					
ANR	999664	UnaryOperator	*		999649	0					
ANR	999665	Identifier	string		999649	1					
ANR	999666	PostIncDecOperationExpression	string ++	417:17:10289:10296	999649	1	True				
ANR	999667	Identifier	string		999649	0					
ANR	999668	IncDec	++		999649	1					
ANR	999669	CompoundStatement		6:28:76:76	999649	2					
ANR	999670	ExpressionStatement	answer <<= 1	418:2:10304:10316	999649	0	True				
ANR	999671	AssignmentExpression	answer <<= 1		999649	0		<<=			
ANR	999672	Identifier	answer		999649	0					
ANR	999673	PrimaryExpression	1		999649	1					
ANR	999674	ExpressionStatement	answer += ( int ) * string	419:2:10320:10342	999649	1	True				
ANR	999675	AssignmentExpression	answer += ( int ) * string		999649	0		+=			
ANR	999676	Identifier	answer		999649	0					
ANR	999677	CastExpression	( int ) * string		999649	1					
ANR	999678	CastTarget	int		999649	0					
ANR	999679	UnaryOperationExpression	* string		999649	1					
ANR	999680	UnaryOperator	*		999649	0					
ANR	999681	Identifier	string		999649	1					
ANR	999682	ExpressionStatement	answer >>= 1	421:1:10348:10360	999649	4	True				
ANR	999683	AssignmentExpression	answer >>= 1		999649	0		>>=			
ANR	999684	Identifier	answer		999649	0					
ANR	999685	PrimaryExpression	1		999649	1					
ANR	999686	ExpressionStatement	answer %= size	422:1:10392:10406	999649	5	True				
ANR	999687	AssignmentExpression	answer %= size		999649	0		%=			
ANR	999688	Identifier	answer		999649	0					
ANR	999689	Identifier	size		999649	1					
ANR	999690	ReturnStatement	return answer ;	423:1:10409:10422	999649	6	True				
ANR	999691	Identifier	answer		999649	0					
ANR	999692	ReturnType	int		999649	1					
ANR	999693	Identifier	condor_hash		999649	2					
ANR	999694	ParameterList	"register const char * string , register int size"		999649	3					
ANR	999695	Parameter	register const char * string	411:13:10174:10200	999649	0	True				
ANR	999696	ParameterType	register const char *		999649	0					
ANR	999697	Identifier	string		999649	1					
ANR	999698	Parameter	register int size	411:42:10203:10219	999649	1	True				
ANR	999699	ParameterType	register int		999649	0					
ANR	999700	Identifier	size		999649	1					
ANR	999701	CFGEntryNode	ENTRY		999649		True				
ANR	999702	CFGExitNode	EXIT		999649		True				
ANR	999703	Symbol	string		999649						
ANR	999704	Symbol	size		999649						
ANR	999705	Symbol	answer		999649						
ANR	999706	Symbol	* string		999649						
ANR	999707	Function	insert	429:0:10499:11229							
ANR	999708	FunctionDef	"insert (const char * name , const char * value , BUCKET * * table , int table_size)"		999707	0					
ANR	999709	CompoundStatement		431:0:10582:11229	999707	0					
ANR	999710	Statement	register	432:1:10585:10592	999707	0	True				
ANR	999711	IdentifierDeclStatement	BUCKET * ptr ;	432:10:10594:10605	999707	1	True				
ANR	999712	IdentifierDecl	* ptr		999707	0					
ANR	999713	IdentifierDeclType	BUCKET *		999707	0					
ANR	999714	Identifier	ptr		999707	1					
ANR	999715	IdentifierDeclStatement	int loc ;	433:1:10608:10616	999707	2	True				
ANR	999716	IdentifierDecl	loc		999707	0					
ANR	999717	IdentifierDeclType	int		999707	0					
ANR	999718	Identifier	loc		999707	1					
ANR	999719	IdentifierDeclStatement	BUCKET * bucket ;	434:1:10619:10633	999707	3	True				
ANR	999720	IdentifierDecl	* bucket		999707	0					
ANR	999721	IdentifierDeclType	BUCKET *		999707	0					
ANR	999722	Identifier	bucket		999707	1					
ANR	999723	IdentifierDeclStatement	char tmp_name [ MAX_PARAM_LEN ] ;	435:1:10636:10666	999707	4	True				
ANR	999724	IdentifierDecl	tmp_name [ MAX_PARAM_LEN ]		999707	0					
ANR	999725	IdentifierDeclType	char [ MAX_PARAM_LEN ]		999707	0					
ANR	999726	Identifier	tmp_name		999707	1					
ANR	999727	Identifier	MAX_PARAM_LEN		999707	2					
ANR	999728	ExpressionStatement	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"	438:1:10714:10760	999707	5	True				
ANR	999729	CallExpression	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"		999707	0					
ANR	999730	Callee	snprintf		999707	0					
ANR	999731	Identifier	snprintf		999707	0					
ANR	999732	ArgumentList	tmp_name		999707	1					
ANR	999733	Argument	tmp_name		999707	0					
ANR	999734	Identifier	tmp_name		999707	0					
ANR	999735	Argument	MAX_PARAM_LEN		999707	1					
ANR	999736	Identifier	MAX_PARAM_LEN		999707	0					
ANR	999737	Argument	"""%s"""		999707	2					
ANR	999738	PrimaryExpression	"""%s"""		999707	0					
ANR	999739	Argument	name		999707	3					
ANR	999740	Identifier	name		999707	0					
ANR	999741	ExpressionStatement	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'	439:1:10763:10795	999707	6	True				
ANR	999742	AssignmentExpression	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'		999707	0		=			
ANR	999743	ArrayIndexing	tmp_name [ MAX_PARAM_LEN - 1 ]		999707	0					
ANR	999744	Identifier	tmp_name		999707	0					
ANR	999745	AdditiveExpression	MAX_PARAM_LEN - 1		999707	1		-			
ANR	999746	Identifier	MAX_PARAM_LEN		999707	0					
ANR	999747	PrimaryExpression	1		999707	1					
ANR	999748	PrimaryExpression	'\\0'		999707	1					
ANR	999749	ExpressionStatement	strlwr ( tmp_name )	440:1:10798:10816	999707	7	True				
ANR	999750	CallExpression	strlwr ( tmp_name )		999707	0					
ANR	999751	Callee	strlwr		999707	0					
ANR	999752	Identifier	strlwr		999707	0					
ANR	999753	ArgumentList	tmp_name		999707	1					
ANR	999754	Argument	tmp_name		999707	0					
ANR	999755	Identifier	tmp_name		999707	0					
ANR	999756	ExpressionStatement	"loc = condor_hash ( tmp_name , table_size )"	441:1:10819:10860	999707	8	True				
ANR	999757	AssignmentExpression	"loc = condor_hash ( tmp_name , table_size )"		999707	0		=			
ANR	999758	Identifier	loc		999707	0					
ANR	999759	CallExpression	"condor_hash ( tmp_name , table_size )"		999707	1					
ANR	999760	Callee	condor_hash		999707	0					
ANR	999761	Identifier	condor_hash		999707	0					
ANR	999762	ArgumentList	tmp_name		999707	1					
ANR	999763	Argument	tmp_name		999707	0					
ANR	999764	Identifier	tmp_name		999707	0					
ANR	999765	Argument	table_size		999707	1					
ANR	999766	Identifier	table_size		999707	0					
ANR	999767	ForStatement	for ( ptr = table [ loc ] ; ptr ; ptr = ptr -> next )		999707	9					
ANR	999768	ForInit	ptr = table [ loc ] ;	442:6:10868:10882	999707	0	True				
ANR	999769	AssignmentExpression	ptr = table [ loc ]		999707	0		=			
ANR	999770	Identifier	ptr		999707	0					
ANR	999771	ArrayIndexing	table [ loc ]		999707	1					
ANR	999772	Identifier	table		999707	0					
ANR	999773	Identifier	loc		999707	1					
ANR	999774	Condition	ptr	442:22:10884:10886	999707	1	True				
ANR	999775	Identifier	ptr		999707	0					
ANR	999776	AssignmentExpression	ptr = ptr -> next	442:27:10889:10901	999707	2	True	=			
ANR	999777	Identifier	ptr		999707	0					
ANR	999778	PtrMemberAccess	ptr -> next		999707	1					
ANR	999779	Identifier	ptr		999707	0					
ANR	999780	Identifier	next		999707	1					
ANR	999781	CompoundStatement		12:43:322:322	999707	3					
ANR	999782	IfStatement	"if ( strcmp ( tmp_name , ptr -> name ) == 0 )"		999707	0					
ANR	999783	Condition	"strcmp ( tmp_name , ptr -> name ) == 0"	443:6:10913:10943	999707	0	True				
ANR	999784	EqualityExpression	"strcmp ( tmp_name , ptr -> name ) == 0"		999707	0		==			
ANR	999785	CallExpression	"strcmp ( tmp_name , ptr -> name )"		999707	0					
ANR	999786	Callee	strcmp		999707	0					
ANR	999787	Identifier	strcmp		999707	0					
ANR	999788	ArgumentList	tmp_name		999707	1					
ANR	999789	Argument	tmp_name		999707	0					
ANR	999790	Identifier	tmp_name		999707	0					
ANR	999791	Argument	ptr -> name		999707	1					
ANR	999792	PtrMemberAccess	ptr -> name		999707	0					
ANR	999793	Identifier	ptr		999707	0					
ANR	999794	Identifier	name		999707	1					
ANR	999795	PrimaryExpression	0		999707	1					
ANR	999796	CompoundStatement		13:40:364:364	999707	1					
ANR	999797	ExpressionStatement	FREE ( ptr -> value )	444:3:10952:10970	999707	0	True				
ANR	999798	CallExpression	FREE ( ptr -> value )		999707	0					
ANR	999799	Callee	FREE		999707	0					
ANR	999800	Identifier	FREE		999707	0					
ANR	999801	ArgumentList	ptr -> value		999707	1					
ANR	999802	Argument	ptr -> value		999707	0					
ANR	999803	PtrMemberAccess	ptr -> value		999707	0					
ANR	999804	Identifier	ptr		999707	0					
ANR	999805	Identifier	value		999707	1					
ANR	999806	ExpressionStatement	ptr -> value = strdup ( value )	445:3:10975:11003	999707	1	True				
ANR	999807	AssignmentExpression	ptr -> value = strdup ( value )		999707	0		=			
ANR	999808	PtrMemberAccess	ptr -> value		999707	0					
ANR	999809	Identifier	ptr		999707	0					
ANR	999810	Identifier	value		999707	1					
ANR	999811	CallExpression	strdup ( value )		999707	1					
ANR	999812	Callee	strdup		999707	0					
ANR	999813	Identifier	strdup		999707	0					
ANR	999814	ArgumentList	value		999707	1					
ANR	999815	Argument	value		999707	0					
ANR	999816	Identifier	value		999707	0					
ANR	999817	ReturnStatement	return ;	446:3:11008:11014	999707	2	True				
ANR	999818	ExpressionStatement	bucket = ( BUCKET * ) MALLOC ( sizeof ( BUCKET ) )	451:1:11043:11086	999707	10	True				
ANR	999819	AssignmentExpression	bucket = ( BUCKET * ) MALLOC ( sizeof ( BUCKET ) )		999707	0		=			
ANR	999820	Identifier	bucket		999707	0					
ANR	999821	CastExpression	( BUCKET * ) MALLOC ( sizeof ( BUCKET ) )		999707	1					
ANR	999822	CastTarget	BUCKET *		999707	0					
ANR	999823	CallExpression	MALLOC ( sizeof ( BUCKET ) )		999707	1					
ANR	999824	Callee	MALLOC		999707	0					
ANR	999825	Identifier	MALLOC		999707	0					
ANR	999826	ArgumentList	sizeof ( BUCKET )		999707	1					
ANR	999827	Argument	sizeof ( BUCKET )		999707	0					
ANR	999828	SizeofExpression	sizeof ( BUCKET )		999707	0					
ANR	999829	Sizeof	sizeof		999707	0					
ANR	999830	SizeofOperand	BUCKET		999707	1					
ANR	999831	ExpressionStatement	bucket -> name = strdup ( tmp_name )	452:1:11089:11122	999707	11	True				
ANR	999832	AssignmentExpression	bucket -> name = strdup ( tmp_name )		999707	0		=			
ANR	999833	PtrMemberAccess	bucket -> name		999707	0					
ANR	999834	Identifier	bucket		999707	0					
ANR	999835	Identifier	name		999707	1					
ANR	999836	CallExpression	strdup ( tmp_name )		999707	1					
ANR	999837	Callee	strdup		999707	0					
ANR	999838	Identifier	strdup		999707	0					
ANR	999839	ArgumentList	tmp_name		999707	1					
ANR	999840	Argument	tmp_name		999707	0					
ANR	999841	Identifier	tmp_name		999707	0					
ANR	999842	ExpressionStatement	bucket -> value = strdup ( value )	453:1:11125:11156	999707	12	True				
ANR	999843	AssignmentExpression	bucket -> value = strdup ( value )		999707	0		=			
ANR	999844	PtrMemberAccess	bucket -> value		999707	0					
ANR	999845	Identifier	bucket		999707	0					
ANR	999846	Identifier	value		999707	1					
ANR	999847	CallExpression	strdup ( value )		999707	1					
ANR	999848	Callee	strdup		999707	0					
ANR	999849	Identifier	strdup		999707	0					
ANR	999850	ArgumentList	value		999707	1					
ANR	999851	Argument	value		999707	0					
ANR	999852	Identifier	value		999707	0					
ANR	999853	ExpressionStatement	bucket -> used = 0	454:1:11159:11175	999707	13	True				
ANR	999854	AssignmentExpression	bucket -> used = 0		999707	0		=			
ANR	999855	PtrMemberAccess	bucket -> used		999707	0					
ANR	999856	Identifier	bucket		999707	0					
ANR	999857	Identifier	used		999707	1					
ANR	999858	PrimaryExpression	0		999707	1					
ANR	999859	ExpressionStatement	bucket -> next = table [ loc ]	455:1:11178:11205	999707	14	True				
ANR	999860	AssignmentExpression	bucket -> next = table [ loc ]		999707	0		=			
ANR	999861	PtrMemberAccess	bucket -> next		999707	0					
ANR	999862	Identifier	bucket		999707	0					
ANR	999863	Identifier	next		999707	1					
ANR	999864	ArrayIndexing	table [ loc ]		999707	1					
ANR	999865	Identifier	table		999707	0					
ANR	999866	Identifier	loc		999707	1					
ANR	999867	ExpressionStatement	table [ loc ] = bucket	456:1:11208:11227	999707	15	True				
ANR	999868	AssignmentExpression	table [ loc ] = bucket		999707	0		=			
ANR	999869	ArrayIndexing	table [ loc ]		999707	0					
ANR	999870	Identifier	table		999707	0					
ANR	999871	Identifier	loc		999707	1					
ANR	999872	Identifier	bucket		999707	1					
ANR	999873	ReturnType	void		999707	1					
ANR	999874	Identifier	insert		999707	2					
ANR	999875	ParameterList	"const char * name , const char * value , BUCKET * * table , int table_size"		999707	3					
ANR	999876	Parameter	const char * name	430:8:10512:10527	999707	0	True				
ANR	999877	ParameterType	const char *		999707	0					
ANR	999878	Identifier	name		999707	1					
ANR	999879	Parameter	const char * value	430:26:10530:10546	999707	1	True				
ANR	999880	ParameterType	const char *		999707	0					
ANR	999881	Identifier	value		999707	1					
ANR	999882	Parameter	BUCKET * * table	430:45:10549:10562	999707	2	True				
ANR	999883	ParameterType	BUCKET * *		999707	0					
ANR	999884	Identifier	table		999707	1					
ANR	999885	Parameter	int table_size	430:61:10565:10578	999707	3	True				
ANR	999886	ParameterType	int		999707	0					
ANR	999887	Identifier	table_size		999707	1					
ANR	999888	CFGEntryNode	ENTRY		999707		True				
ANR	999889	CFGExitNode	EXIT		999707		True				
ANR	999890	Symbol	table_size		999707						
ANR	999891	Symbol	loc		999707						
ANR	999892	Symbol	ptr -> name		999707						
ANR	999893	Symbol	bucket -> name		999707						
ANR	999894	Symbol	bucket -> value		999707						
ANR	999895	Symbol	ptr -> value		999707						
ANR	999896	Symbol	* MAX_PARAM_LEN		999707						
ANR	999897	Symbol	* ptr		999707						
ANR	999898	Symbol	value		999707						
ANR	999899	Symbol	table		999707						
ANR	999900	Symbol	* tmp_name		999707						
ANR	999901	Symbol	strcmp		999707						
ANR	999902	Symbol	bucket -> next		999707						
ANR	999903	Symbol	bucket -> used		999707						
ANR	999904	Symbol	condor_hash		999707						
ANR	999905	Symbol	* table		999707						
ANR	999906	Symbol	* loc		999707						
ANR	999907	Symbol	MAX_PARAM_LEN		999707						
ANR	999908	Symbol	ptr		999707						
ANR	999909	Symbol	tmp_name		999707						
ANR	999910	Symbol	bucket		999707						
ANR	999911	Symbol	* bucket		999707						
ANR	999912	Symbol	MALLOC		999707						
ANR	999913	Symbol	name		999707						
ANR	999914	Symbol	strdup		999707						
ANR	999915	Symbol	ptr -> next		999707						
ANR	999916	Function	set_macro_used	462:0:11278:11749							
ANR	999917	FunctionDef	"set_macro_used (const char * name , int used , BUCKET * table [ ] , int table_size)"		999916	0					
ANR	999918	CompoundStatement		464:0:11363:11749	999916	0					
ANR	999919	Statement	register	465:1:11366:11373	999916	0	True				
ANR	999920	IdentifierDeclStatement	BUCKET * ptr ;	465:10:11375:11386	999916	1	True				
ANR	999921	IdentifierDecl	* ptr		999916	0					
ANR	999922	IdentifierDeclType	BUCKET *		999916	0					
ANR	999923	Identifier	ptr		999916	1					
ANR	999924	IdentifierDeclStatement	int loc ;	466:1:11389:11397	999916	2	True				
ANR	999925	IdentifierDecl	loc		999916	0					
ANR	999926	IdentifierDeclType	int		999916	0					
ANR	999927	Identifier	loc		999916	1					
ANR	999928	IdentifierDeclStatement	char tmp_name [ MAX_PARAM_LEN ] ;	467:1:11400:11430	999916	3	True				
ANR	999929	IdentifierDecl	tmp_name [ MAX_PARAM_LEN ]		999916	0					
ANR	999930	IdentifierDeclType	char [ MAX_PARAM_LEN ]		999916	0					
ANR	999931	Identifier	tmp_name		999916	1					
ANR	999932	Identifier	MAX_PARAM_LEN		999916	2					
ANR	999933	ExpressionStatement	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"	470:1:11475:11521	999916	4	True				
ANR	999934	CallExpression	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"		999916	0					
ANR	999935	Callee	snprintf		999916	0					
ANR	999936	Identifier	snprintf		999916	0					
ANR	999937	ArgumentList	tmp_name		999916	1					
ANR	999938	Argument	tmp_name		999916	0					
ANR	999939	Identifier	tmp_name		999916	0					
ANR	999940	Argument	MAX_PARAM_LEN		999916	1					
ANR	999941	Identifier	MAX_PARAM_LEN		999916	0					
ANR	999942	Argument	"""%s"""		999916	2					
ANR	999943	PrimaryExpression	"""%s"""		999916	0					
ANR	999944	Argument	name		999916	3					
ANR	999945	Identifier	name		999916	0					
ANR	999946	ExpressionStatement	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'	471:1:11524:11556	999916	5	True				
ANR	999947	AssignmentExpression	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'		999916	0		=			
ANR	999948	ArrayIndexing	tmp_name [ MAX_PARAM_LEN - 1 ]		999916	0					
ANR	999949	Identifier	tmp_name		999916	0					
ANR	999950	AdditiveExpression	MAX_PARAM_LEN - 1		999916	1		-			
ANR	999951	Identifier	MAX_PARAM_LEN		999916	0					
ANR	999952	PrimaryExpression	1		999916	1					
ANR	999953	PrimaryExpression	'\\0'		999916	1					
ANR	999954	ExpressionStatement	strlwr ( tmp_name )	472:1:11559:11577	999916	6	True				
ANR	999955	CallExpression	strlwr ( tmp_name )		999916	0					
ANR	999956	Callee	strlwr		999916	0					
ANR	999957	Identifier	strlwr		999916	0					
ANR	999958	ArgumentList	tmp_name		999916	1					
ANR	999959	Argument	tmp_name		999916	0					
ANR	999960	Identifier	tmp_name		999916	0					
ANR	999961	ExpressionStatement	"loc = condor_hash ( tmp_name , table_size )"	473:1:11580:11621	999916	7	True				
ANR	999962	AssignmentExpression	"loc = condor_hash ( tmp_name , table_size )"		999916	0		=			
ANR	999963	Identifier	loc		999916	0					
ANR	999964	CallExpression	"condor_hash ( tmp_name , table_size )"		999916	1					
ANR	999965	Callee	condor_hash		999916	0					
ANR	999966	Identifier	condor_hash		999916	0					
ANR	999967	ArgumentList	tmp_name		999916	1					
ANR	999968	Argument	tmp_name		999916	0					
ANR	999969	Identifier	tmp_name		999916	0					
ANR	999970	Argument	table_size		999916	1					
ANR	999971	Identifier	table_size		999916	0					
ANR	999972	ForStatement	for ( ptr = table [ loc ] ; ptr ; ptr = ptr -> next )		999916	8					
ANR	999973	ForInit	ptr = table [ loc ] ;	474:6:11629:11643	999916	0	True				
ANR	999974	AssignmentExpression	ptr = table [ loc ]		999916	0		=			
ANR	999975	Identifier	ptr		999916	0					
ANR	999976	ArrayIndexing	table [ loc ]		999916	1					
ANR	999977	Identifier	table		999916	0					
ANR	999978	Identifier	loc		999916	1					
ANR	999979	Condition	ptr	474:22:11645:11647	999916	1	True				
ANR	999980	Identifier	ptr		999916	0					
ANR	999981	AssignmentExpression	ptr = ptr -> next	474:27:11650:11662	999916	2	True	=			
ANR	999982	Identifier	ptr		999916	0					
ANR	999983	PtrMemberAccess	ptr -> next		999916	1					
ANR	999984	Identifier	ptr		999916	0					
ANR	999985	Identifier	next		999916	1					
ANR	999986	CompoundStatement		11:43:302:302	999916	3					
ANR	999987	IfStatement	"if ( strcmp ( tmp_name , ptr -> name ) == 0 )"		999916	0					
ANR	999988	Condition	"strcmp ( tmp_name , ptr -> name ) == 0"	475:6:11674:11704	999916	0	True				
ANR	999989	EqualityExpression	"strcmp ( tmp_name , ptr -> name ) == 0"		999916	0		==			
ANR	999990	CallExpression	"strcmp ( tmp_name , ptr -> name )"		999916	0					
ANR	999991	Callee	strcmp		999916	0					
ANR	999992	Identifier	strcmp		999916	0					
ANR	999993	ArgumentList	tmp_name		999916	1					
ANR	999994	Argument	tmp_name		999916	0					
ANR	999995	Identifier	tmp_name		999916	0					
ANR	999996	Argument	ptr -> name		999916	1					
ANR	999997	PtrMemberAccess	ptr -> name		999916	0					
ANR	999998	Identifier	ptr		999916	0					
ANR	999999	Identifier	name		999916	1					
ANR	1000000	PrimaryExpression	0		999916	1					
ANR	1000001	CompoundStatement		12:40:344:344	999916	1					
ANR	1000002	ExpressionStatement	ptr -> used = used	476:3:11713:11729	999916	0	True				
ANR	1000003	AssignmentExpression	ptr -> used = used		999916	0		=			
ANR	1000004	PtrMemberAccess	ptr -> used		999916	0					
ANR	1000005	Identifier	ptr		999916	0					
ANR	1000006	Identifier	used		999916	1					
ANR	1000007	Identifier	used		999916	1					
ANR	1000008	ReturnStatement	return ;	477:3:11734:11740	999916	1	True				
ANR	1000009	ReturnType	void		999916	1					
ANR	1000010	Identifier	set_macro_used		999916	2					
ANR	1000011	ParameterList	"const char * name , int used , BUCKET * table [ ] , int table_size"		999916	3					
ANR	1000012	Parameter	const char * name	463:17:11301:11316	999916	0	True				
ANR	1000013	ParameterType	const char *		999916	0					
ANR	1000014	Identifier	name		999916	1					
ANR	1000015	Parameter	int used	463:35:11319:11326	999916	1	True				
ANR	1000016	ParameterType	int		999916	0					
ANR	1000017	Identifier	used		999916	1					
ANR	1000018	Parameter	BUCKET * table [ ]	463:45:11329:11343	999916	2	True				
ANR	1000019	ParameterType	BUCKET * [ ]		999916	0					
ANR	1000020	Identifier	table		999916	1					
ANR	1000021	Parameter	int table_size	463:62:11346:11359	999916	3	True				
ANR	1000022	ParameterType	int		999916	0					
ANR	1000023	Identifier	table_size		999916	1					
ANR	1000024	CFGEntryNode	ENTRY		999916		True				
ANR	1000025	CFGExitNode	EXIT		999916		True				
ANR	1000026	Symbol	strcmp		999916						
ANR	1000027	Symbol	table_size		999916						
ANR	1000028	Symbol	loc		999916						
ANR	1000029	Symbol	condor_hash		999916						
ANR	1000030	Symbol	ptr -> name		999916						
ANR	1000031	Symbol	* table		999916						
ANR	1000032	Symbol	ptr -> used		999916						
ANR	1000033	Symbol	* loc		999916						
ANR	1000034	Symbol	used		999916						
ANR	1000035	Symbol	MAX_PARAM_LEN		999916						
ANR	1000036	Symbol	ptr		999916						
ANR	1000037	Symbol	tmp_name		999916						
ANR	1000038	Symbol	* MAX_PARAM_LEN		999916						
ANR	1000039	Symbol	name		999916						
ANR	1000040	Symbol	* ptr		999916						
ANR	1000041	Symbol	table		999916						
ANR	1000042	Symbol	* tmp_name		999916						
ANR	1000043	Symbol	ptr -> next		999916						
ANR	1000044	Function	getline	489:0:12113:12193							
ANR	1000045	FunctionDef	getline (FILE * fp)		1000044	0					
ANR	1000046	CompoundStatement		491:0:12140:12193	1000044	0					
ANR	1000047	ReturnStatement	"return getline_implementation ( fp , _POSIX_ARG_MAX ) ;"	492:1:12143:12191	1000044	0	True				
ANR	1000048	CallExpression	"getline_implementation ( fp , _POSIX_ARG_MAX )"		1000044	0					
ANR	1000049	Callee	getline_implementation		1000044	0					
ANR	1000050	Identifier	getline_implementation		1000044	0					
ANR	1000051	ArgumentList	fp		1000044	1					
ANR	1000052	Argument	fp		1000044	0					
ANR	1000053	Identifier	fp		1000044	0					
ANR	1000054	Argument	_POSIX_ARG_MAX		1000044	1					
ANR	1000055	Identifier	_POSIX_ARG_MAX		1000044	0					
ANR	1000056	ReturnType	char *		1000044	1					
ANR	1000057	Identifier	getline		1000044	2					
ANR	1000058	ParameterList	FILE * fp		1000044	3					
ANR	1000059	Parameter	FILE * fp	490:9:12129:12136	1000044	0	True				
ANR	1000060	ParameterType	FILE *		1000044	0					
ANR	1000061	Identifier	fp		1000044	1					
ANR	1000062	CFGEntryNode	ENTRY		1000044		True				
ANR	1000063	CFGExitNode	EXIT		1000044		True				
ANR	1000064	Symbol	_POSIX_ARG_MAX		1000044						
ANR	1000065	Symbol	getline_implementation		1000044						
ANR	1000066	Symbol	fp		1000044						
ANR	1000067	Function	getline_implementation	494:0:12195:14578							
ANR	1000068	FunctionDef	"getline_implementation (FILE * fp , int requested_bufsize)"		1000067	0					
ANR	1000069	CompoundStatement		496:0:12267:14578	1000067	0					
ANR	1000070	Statement	static	497:1:12270:12275	1000067	0	True				
ANR	1000071	IdentifierDeclStatement	char * buf = NULL ;	497:8:12277:12293	1000067	1	True				
ANR	1000072	IdentifierDecl	* buf = NULL		1000067	0					
ANR	1000073	IdentifierDeclType	char *		1000067	0					
ANR	1000074	Identifier	buf		1000067	1					
ANR	1000075	AssignmentExpression	* buf = NULL		1000067	2		=			
ANR	1000076	Identifier	NULL		1000067	0					
ANR	1000077	Identifier	NULL		1000067	1					
ANR	1000078	Statement	static	498:1:12296:12301	1000067	2	True				
ANR	1000079	IdentifierDeclStatement	unsigned int buflen = 0 ;	498:8:12303:12326	1000067	3	True				
ANR	1000080	IdentifierDecl	buflen = 0		1000067	0					
ANR	1000081	IdentifierDeclType	unsigned int		1000067	0					
ANR	1000082	Identifier	buflen		1000067	1					
ANR	1000083	AssignmentExpression	buflen = 0		1000067	2		=			
ANR	1000084	Identifier	buflen		1000067	0					
ANR	1000085	PrimaryExpression	0		1000067	1					
ANR	1000086	IdentifierDeclStatement	char * end_ptr ;	499:1:12329:12342	1000067	4	True				
ANR	1000087	IdentifierDecl	* end_ptr		1000067	0					
ANR	1000088	IdentifierDeclType	char *		1000067	0					
ANR	1000089	Identifier	end_ptr		1000067	1					
ANR	1000090	IdentifierDeclStatement	char * line_ptr ;	500:1:12380:12397	1000067	5	True				
ANR	1000091	IdentifierDecl	* line_ptr		1000067	0					
ANR	1000092	IdentifierDeclType	char *		1000067	0					
ANR	1000093	Identifier	line_ptr		1000067	1					
ANR	1000094	IfStatement	if ( feof ( fp ) )		1000067	6					
ANR	1000095	Condition	feof ( fp )	502:5:12405:12412	1000067	0	True				
ANR	1000096	CallExpression	feof ( fp )		1000067	0					
ANR	1000097	Callee	feof		1000067	0					
ANR	1000098	Identifier	feof		1000067	0					
ANR	1000099	ArgumentList	fp		1000067	1					
ANR	1000100	Argument	fp		1000067	0					
ANR	1000101	Identifier	fp		1000067	0					
ANR	1000102	CompoundStatement		7:16:148:148	1000067	1					
ANR	1000103	IfStatement	if ( buf )		1000067	0					
ANR	1000104	Condition	buf	505:7:12507:12509	1000067	0	True				
ANR	1000105	Identifier	buf		1000067	0					
ANR	1000106	CompoundStatement		10:13:245:245	1000067	1					
ANR	1000107	ExpressionStatement	free ( buf )	506:3:12518:12527	1000067	0	True				
ANR	1000108	CallExpression	free ( buf )		1000067	0					
ANR	1000109	Callee	free		1000067	0					
ANR	1000110	Identifier	free		1000067	0					
ANR	1000111	ArgumentList	buf		1000067	1					
ANR	1000112	Argument	buf		1000067	0					
ANR	1000113	Identifier	buf		1000067	0					
ANR	1000114	ExpressionStatement	buf = NULL	507:3:12532:12542	1000067	1	True				
ANR	1000115	AssignmentExpression	buf = NULL		1000067	0		=			
ANR	1000116	Identifier	buf		1000067	0					
ANR	1000117	Identifier	NULL		1000067	1					
ANR	1000118	ExpressionStatement	buflen = 0	508:3:12547:12557	1000067	2	True				
ANR	1000119	AssignmentExpression	buflen = 0		1000067	0		=			
ANR	1000120	Identifier	buflen		1000067	0					
ANR	1000121	PrimaryExpression	0		1000067	1					
ANR	1000122	ReturnStatement	return NULL ;	510:2:12565:12576	1000067	1	True				
ANR	1000123	Identifier	NULL		1000067	0					
ANR	1000124	IfStatement	if ( buflen < ( unsigned int ) requested_bufsize )		1000067	7					
ANR	1000125	Condition	buflen < ( unsigned int ) requested_bufsize	513:6:12588:12627	1000067	0	True				
ANR	1000126	RelationalExpression	buflen < ( unsigned int ) requested_bufsize		1000067	0		<			
ANR	1000127	Identifier	buflen		1000067	0					
ANR	1000128	CastExpression	( unsigned int ) requested_bufsize		1000067	1					
ANR	1000129	CastTarget	unsigned int		1000067	0					
ANR	1000130	Identifier	requested_bufsize		1000067	1					
ANR	1000131	CompoundStatement		18:49:363:363	1000067	1					
ANR	1000132	IfStatement	if ( buf )		1000067	0					
ANR	1000133	Condition	buf	514:7:12640:12642	1000067	0	True				
ANR	1000134	Identifier	buf		1000067	0					
ANR	1000135	ExpressionStatement	free ( buf )	514:13:12646:12655	1000067	1	True				
ANR	1000136	CallExpression	free ( buf )		1000067	0					
ANR	1000137	Callee	free		1000067	0					
ANR	1000138	Identifier	free		1000067	0					
ANR	1000139	ArgumentList	buf		1000067	1					
ANR	1000140	Argument	buf		1000067	0					
ANR	1000141	Identifier	buf		1000067	0					
ANR	1000142	ExpressionStatement	buf = ( char * ) malloc ( requested_bufsize )	515:2:12659:12698	1000067	1	True				
ANR	1000143	AssignmentExpression	buf = ( char * ) malloc ( requested_bufsize )		1000067	0		=			
ANR	1000144	Identifier	buf		1000067	0					
ANR	1000145	CastExpression	( char * ) malloc ( requested_bufsize )		1000067	1					
ANR	1000146	CastTarget	char *		1000067	0					
ANR	1000147	CallExpression	malloc ( requested_bufsize )		1000067	1					
ANR	1000148	Callee	malloc		1000067	0					
ANR	1000149	Identifier	malloc		1000067	0					
ANR	1000150	ArgumentList	requested_bufsize		1000067	1					
ANR	1000151	Argument	requested_bufsize		1000067	0					
ANR	1000152	Identifier	requested_bufsize		1000067	0					
ANR	1000153	ExpressionStatement	buflen = requested_bufsize	516:2:12702:12728	1000067	2	True				
ANR	1000154	AssignmentExpression	buflen = requested_bufsize		1000067	0		=			
ANR	1000155	Identifier	buflen		1000067	0					
ANR	1000156	Identifier	requested_bufsize		1000067	1					
ANR	1000157	ExpressionStatement	buf [ 0 ] = '\\0'	518:1:12734:12747	1000067	8	True				
ANR	1000158	AssignmentExpression	buf [ 0 ] = '\\0'		1000067	0		=			
ANR	1000159	ArrayIndexing	buf [ 0 ]		1000067	0					
ANR	1000160	Identifier	buf		1000067	0					
ANR	1000161	PrimaryExpression	0		1000067	1					
ANR	1000162	PrimaryExpression	'\\0'		1000067	1					
ANR	1000163	ExpressionStatement	end_ptr = buf	519:1:12750:12763	1000067	9	True				
ANR	1000164	AssignmentExpression	end_ptr = buf		1000067	0		=			
ANR	1000165	Identifier	end_ptr		1000067	0					
ANR	1000166	Identifier	buf		1000067	1					
ANR	1000167	ExpressionStatement	line_ptr = buf	520:1:12766:12780	1000067	10	True				
ANR	1000168	AssignmentExpression	line_ptr = buf		1000067	0		=			
ANR	1000169	Identifier	line_ptr		1000067	0					
ANR	1000170	Identifier	buf		1000067	1					
ANR	1000171	ForStatement	for ( ; ; )		1000067	11					
ANR	1000172	CompoundStatement		77:2:1941:1961	1000067	0					
ANR	1000173	IdentifierDeclStatement	int len = buflen - ( end_ptr - buf ) ;	524:2:12868:12903	1000067	0	True				
ANR	1000174	IdentifierDecl	len = buflen - ( end_ptr - buf )		1000067	0					
ANR	1000175	IdentifierDeclType	int		1000067	0					
ANR	1000176	Identifier	len		1000067	1					
ANR	1000177	AssignmentExpression	len = buflen - ( end_ptr - buf )		1000067	2		=			
ANR	1000178	Identifier	len		1000067	0					
ANR	1000179	AdditiveExpression	buflen - ( end_ptr - buf )		1000067	1		-			
ANR	1000180	Identifier	buflen		1000067	0					
ANR	1000181	AdditiveExpression	end_ptr - buf		1000067	1		-			
ANR	1000182	Identifier	end_ptr		1000067	0					
ANR	1000183	Identifier	buf		1000067	1					
ANR	1000184	IfStatement	if ( len <= 5 )		1000067	1					
ANR	1000185	Condition	len <= 5	525:6:12911:12918	1000067	0	True				
ANR	1000186	RelationalExpression	len <= 5		1000067	0		<=			
ANR	1000187	Identifier	len		1000067	0					
ANR	1000188	PrimaryExpression	5		1000067	1					
ANR	1000189	CompoundStatement		32:3:715:765	1000067	1					
ANR	1000190	IdentifierDeclStatement	"char * newbuf = ( char * ) realloc ( buf , 4096 + buflen ) ;"	527:3:12983:13033	1000067	0	True				
ANR	1000191	IdentifierDecl	"* newbuf = ( char * ) realloc ( buf , 4096 + buflen )"		1000067	0					
ANR	1000192	IdentifierDeclType	char *		1000067	0					
ANR	1000193	Identifier	newbuf		1000067	1					
ANR	1000194	AssignmentExpression	"* newbuf = ( char * ) realloc ( buf , 4096 + buflen )"		1000067	2		=			
ANR	1000195	Identifier	newbuf		1000067	0					
ANR	1000196	CastExpression	"( char * ) realloc ( buf , 4096 + buflen )"		1000067	1					
ANR	1000197	CastTarget	char *		1000067	0					
ANR	1000198	CallExpression	"realloc ( buf , 4096 + buflen )"		1000067	1					
ANR	1000199	Callee	realloc		1000067	0					
ANR	1000200	Identifier	realloc		1000067	0					
ANR	1000201	ArgumentList	buf		1000067	1					
ANR	1000202	Argument	buf		1000067	0					
ANR	1000203	Identifier	buf		1000067	0					
ANR	1000204	Argument	4096 + buflen		1000067	1					
ANR	1000205	AdditiveExpression	4096 + buflen		1000067	0		+			
ANR	1000206	PrimaryExpression	4096		1000067	0					
ANR	1000207	Identifier	buflen		1000067	1					
ANR	1000208	IfStatement	if ( newbuf )		1000067	1					
ANR	1000209	Condition	newbuf	528:8:13043:13048	1000067	0	True				
ANR	1000210	Identifier	newbuf		1000067	0					
ANR	1000211	CompoundStatement		33:17:784:784	1000067	1					
ANR	1000212	ExpressionStatement	end_ptr = ( end_ptr - buf ) + newbuf	529:4:13058:13092	1000067	0	True				
ANR	1000213	AssignmentExpression	end_ptr = ( end_ptr - buf ) + newbuf		1000067	0		=			
ANR	1000214	Identifier	end_ptr		1000067	0					
ANR	1000215	AdditiveExpression	( end_ptr - buf ) + newbuf		1000067	1		+			
ANR	1000216	AdditiveExpression	end_ptr - buf		1000067	0		-			
ANR	1000217	Identifier	end_ptr		1000067	0					
ANR	1000218	Identifier	buf		1000067	1					
ANR	1000219	Identifier	newbuf		1000067	1					
ANR	1000220	ExpressionStatement	line_ptr = ( line_ptr - buf ) + newbuf	530:4:13098:13134	1000067	1	True				
ANR	1000221	AssignmentExpression	line_ptr = ( line_ptr - buf ) + newbuf		1000067	0		=			
ANR	1000222	Identifier	line_ptr		1000067	0					
ANR	1000223	AdditiveExpression	( line_ptr - buf ) + newbuf		1000067	1		+			
ANR	1000224	AdditiveExpression	line_ptr - buf		1000067	0		-			
ANR	1000225	Identifier	line_ptr		1000067	0					
ANR	1000226	Identifier	buf		1000067	1					
ANR	1000227	Identifier	newbuf		1000067	1					
ANR	1000228	ExpressionStatement	buf = newbuf	531:4:13140:13152	1000067	2	True				
ANR	1000229	AssignmentExpression	buf = newbuf		1000067	0		=			
ANR	1000230	Identifier	buf		1000067	0					
ANR	1000231	Identifier	newbuf		1000067	1					
ANR	1000232	ExpressionStatement	buflen += 4096	532:4:13205:13219	1000067	3	True				
ANR	1000233	AssignmentExpression	buflen += 4096		1000067	0		+=			
ANR	1000234	Identifier	buflen		1000067	0					
ANR	1000235	PrimaryExpression	4096		1000067	1					
ANR	1000236	ExpressionStatement	len += 4096	533:4:13225:13236	1000067	4	True				
ANR	1000237	AssignmentExpression	len += 4096		1000067	0		+=			
ANR	1000238	Identifier	len		1000067	0					
ANR	1000239	PrimaryExpression	4096		1000067	1					
ANR	1000240	ElseStatement	else		1000067	0					
ANR	1000241	CompoundStatement		39:10:980:980	1000067	0					
ANR	1000242	ExpressionStatement	"EXCEPT ( ""Out of memory - config file line too long"" )"	536:4:13303:13356	1000067	0	True				
ANR	1000243	CallExpression	"EXCEPT ( ""Out of memory - config file line too long"" )"		1000067	0					
ANR	1000244	Callee	EXCEPT		1000067	0					
ANR	1000245	Identifier	EXCEPT		1000067	0					
ANR	1000246	ArgumentList	"""Out of memory - config file line too long"""		1000067	1					
ANR	1000247	Argument	"""Out of memory - config file line too long"""		1000067	0					
ANR	1000248	PrimaryExpression	"""Out of memory - config file line too long"""		1000067	0					
ANR	1000249	IfStatement	"if ( fgets ( end_ptr , len , fp ) == NULL )"		1000067	2					
ANR	1000250	Condition	"fgets ( end_ptr , len , fp ) == NULL"	540:6:13374:13402	1000067	0	True				
ANR	1000251	EqualityExpression	"fgets ( end_ptr , len , fp ) == NULL"		1000067	0		==			
ANR	1000252	CallExpression	"fgets ( end_ptr , len , fp )"		1000067	0					
ANR	1000253	Callee	fgets		1000067	0					
ANR	1000254	Identifier	fgets		1000067	0					
ANR	1000255	ArgumentList	end_ptr		1000067	1					
ANR	1000256	Argument	end_ptr		1000067	0					
ANR	1000257	Identifier	end_ptr		1000067	0					
ANR	1000258	Argument	len		1000067	1					
ANR	1000259	Identifier	len		1000067	0					
ANR	1000260	Argument	fp		1000067	2					
ANR	1000261	Identifier	fp		1000067	0					
ANR	1000262	Identifier	NULL		1000067	1					
ANR	1000263	CompoundStatement		45:38:1138:1138	1000067	1					
ANR	1000264	IfStatement	if ( buf [ 0 ] == '\\0' )		1000067	0					
ANR	1000265	Condition	buf [ 0 ] == '\\0'	541:7:13415:13428	1000067	0	True				
ANR	1000266	EqualityExpression	buf [ 0 ] == '\\0'		1000067	0		==			
ANR	1000267	ArrayIndexing	buf [ 0 ]		1000067	0					
ANR	1000268	Identifier	buf		1000067	0					
ANR	1000269	PrimaryExpression	0		1000067	1					
ANR	1000270	PrimaryExpression	'\\0'		1000067	1					
ANR	1000271	CompoundStatement		46:24:1164:1164	1000067	1					
ANR	1000272	ReturnStatement	return NULL ;	542:4:13438:13449	1000067	0	True				
ANR	1000273	Identifier	NULL		1000067	0					
ANR	1000274	ElseStatement	else		1000067	0					
ANR	1000275	CompoundStatement		48:10:1193:1193	1000067	0					
ANR	1000276	ReturnStatement	return buf ;	544:4:13467:13477	1000067	0	True				
ANR	1000277	Identifier	buf		1000067	0					
ANR	1000278	IfStatement	if ( * end_ptr == '\\0' )		1000067	3					
ANR	1000279	Condition	* end_ptr == '\\0'	549:7:13569:13584	1000067	0	True				
ANR	1000280	EqualityExpression	* end_ptr == '\\0'		1000067	0		==			
ANR	1000281	UnaryOperationExpression	* end_ptr		1000067	0					
ANR	1000282	UnaryOperator	*		1000067	0					
ANR	1000283	Identifier	end_ptr		1000067	1					
ANR	1000284	PrimaryExpression	'\\0'		1000067	1					
ANR	1000285	CompoundStatement		54:26:1320:1320	1000067	1					
ANR	1000286	ContinueStatement	continue ;	550:3:13593:13601	1000067	0	True				
ANR	1000287	ExpressionStatement	end_ptr += strlen ( end_ptr )	553:2:13610:13636	1000067	4	True				
ANR	1000288	AssignmentExpression	end_ptr += strlen ( end_ptr )		1000067	0		+=			
ANR	1000289	Identifier	end_ptr		1000067	0					
ANR	1000290	CallExpression	strlen ( end_ptr )		1000067	1					
ANR	1000291	Callee	strlen		1000067	0					
ANR	1000292	Identifier	strlen		1000067	0					
ANR	1000293	ArgumentList	end_ptr		1000067	1					
ANR	1000294	Argument	end_ptr		1000067	0					
ANR	1000295	Identifier	end_ptr		1000067	0					
ANR	1000296	IfStatement	if ( end_ptr [ - 1 ] != '\\n' )		1000067	5					
ANR	1000297	Condition	end_ptr [ - 1 ] != '\\n'	554:6:13644:13662	1000067	0	True				
ANR	1000298	EqualityExpression	end_ptr [ - 1 ] != '\\n'		1000067	0		!=			
ANR	1000299	ArrayIndexing	end_ptr [ - 1 ]		1000067	0					
ANR	1000300	Identifier	end_ptr		1000067	0					
ANR	1000301	UnaryOperationExpression	- 1		1000067	1					
ANR	1000302	UnaryOperator	-		1000067	0					
ANR	1000303	PrimaryExpression	1		1000067	1					
ANR	1000304	PrimaryExpression	'\\n'		1000067	1					
ANR	1000305	CompoundStatement		59:28:1398:1398	1000067	1					
ANR	1000306	ContinueStatement	continue ;	558:3:13841:13849	1000067	0	True				
ANR	1000307	ExpressionStatement	ConfigLineNo ++	561:2:13905:13919	1000067	6	True				
ANR	1000308	PostIncDecOperationExpression	ConfigLineNo ++		1000067	0					
ANR	1000309	Identifier	ConfigLineNo		1000067	0					
ANR	1000310	IncDec	++		1000067	1					
ANR	1000311	WhileStatement	while ( end_ptr > line_ptr && isspace ( end_ptr [ - 1 ] ) )		1000067	7					
ANR	1000312	Condition	end_ptr > line_ptr && isspace ( end_ptr [ - 1 ] )	567:9:14077:14118	1000067	0	True				
ANR	1000313	AndExpression	end_ptr > line_ptr && isspace ( end_ptr [ - 1 ] )		1000067	0		&&			
ANR	1000314	RelationalExpression	end_ptr > line_ptr		1000067	0		>			
ANR	1000315	Identifier	end_ptr		1000067	0					
ANR	1000316	Identifier	line_ptr		1000067	1					
ANR	1000317	CallExpression	isspace ( end_ptr [ - 1 ] )		1000067	1					
ANR	1000318	Callee	isspace		1000067	0					
ANR	1000319	Identifier	isspace		1000067	0					
ANR	1000320	ArgumentList	end_ptr [ - 1 ]		1000067	1					
ANR	1000321	Argument	end_ptr [ - 1 ]		1000067	0					
ANR	1000322	ArrayIndexing	end_ptr [ - 1 ]		1000067	0					
ANR	1000323	Identifier	end_ptr		1000067	0					
ANR	1000324	UnaryOperationExpression	- 1		1000067	1					
ANR	1000325	UnaryOperator	-		1000067	0					
ANR	1000326	PrimaryExpression	1		1000067	1					
ANR	1000327	CompoundStatement		72:54:1854:1854	1000067	1					
ANR	1000328	ExpressionStatement	* ( -- end_ptr ) = '\\0'	568:3:14127:14146	1000067	0	True				
ANR	1000329	AssignmentExpression	* ( -- end_ptr ) = '\\0'		1000067	0		=			
ANR	1000330	UnaryOperationExpression	* ( -- end_ptr )		1000067	0					
ANR	1000331	UnaryOperator	*		1000067	0					
ANR	1000332	UnaryExpression	-- end_ptr		1000067	1					
ANR	1000333	IncDec	--		1000067	0					
ANR	1000334	Identifier	end_ptr		1000067	1					
ANR	1000335	PrimaryExpression	'\\0'		1000067	1					
ANR	1000336	IdentifierDeclStatement	char * ptr = line_ptr ;	572:2:14209:14229	1000067	8	True				
ANR	1000337	IdentifierDecl	* ptr = line_ptr		1000067	0					
ANR	1000338	IdentifierDeclType	char *		1000067	0					
ANR	1000339	Identifier	ptr		1000067	1					
ANR	1000340	AssignmentExpression	* ptr = line_ptr		1000067	2		=			
ANR	1000341	Identifier	line_ptr		1000067	0					
ANR	1000342	Identifier	line_ptr		1000067	1					
ANR	1000343	WhileStatement	while ( isspace ( * ptr ) )		1000067	9					
ANR	1000344	Condition	isspace ( * ptr )	573:9:14240:14252	1000067	0	True				
ANR	1000345	CallExpression	isspace ( * ptr )		1000067	0					
ANR	1000346	Callee	isspace		1000067	0					
ANR	1000347	Identifier	isspace		1000067	0					
ANR	1000348	ArgumentList	* ptr		1000067	1					
ANR	1000349	Argument	* ptr		1000067	0					
ANR	1000350	UnaryOperationExpression	* ptr		1000067	0					
ANR	1000351	UnaryOperator	*		1000067	0					
ANR	1000352	Identifier	ptr		1000067	1					
ANR	1000353	CompoundStatement		78:25:1988:1988	1000067	1					
ANR	1000354	ExpressionStatement	ptr ++	574:3:14261:14266	1000067	0	True				
ANR	1000355	PostIncDecOperationExpression	ptr ++		1000067	0					
ANR	1000356	Identifier	ptr		1000067	0					
ANR	1000357	IncDec	++		1000067	1					
ANR	1000358	IfStatement	if ( ptr != line_ptr )		1000067	10					
ANR	1000359	Condition	ptr != line_ptr	576:6:14278:14292	1000067	0	True				
ANR	1000360	EqualityExpression	ptr != line_ptr		1000067	0		!=			
ANR	1000361	Identifier	ptr		1000067	0					
ANR	1000362	Identifier	line_ptr		1000067	1					
ANR	1000363	CompoundStatement		81:24:2028:2028	1000067	1					
ANR	1000364	ExpressionStatement	"( void ) memmove ( line_ptr , ptr , end_ptr - ptr + 1 )"	577:3:14301:14346	1000067	0	True				
ANR	1000365	CastExpression	"( void ) memmove ( line_ptr , ptr , end_ptr - ptr + 1 )"		1000067	0					
ANR	1000366	CastTarget	void		1000067	0					
ANR	1000367	CallExpression	"memmove ( line_ptr , ptr , end_ptr - ptr + 1 )"		1000067	1					
ANR	1000368	Callee	memmove		1000067	0					
ANR	1000369	Identifier	memmove		1000067	0					
ANR	1000370	ArgumentList	line_ptr		1000067	1					
ANR	1000371	Argument	line_ptr		1000067	0					
ANR	1000372	Identifier	line_ptr		1000067	0					
ANR	1000373	Argument	ptr		1000067	1					
ANR	1000374	Identifier	ptr		1000067	0					
ANR	1000375	Argument	end_ptr - ptr + 1		1000067	2					
ANR	1000376	AdditiveExpression	end_ptr - ptr + 1		1000067	0		-			
ANR	1000377	Identifier	end_ptr		1000067	0					
ANR	1000378	AdditiveExpression	ptr + 1		1000067	1		+			
ANR	1000379	Identifier	ptr		1000067	0					
ANR	1000380	PrimaryExpression	1		1000067	1					
ANR	1000381	ExpressionStatement	end_ptr = ( end_ptr - ptr ) + line_ptr	578:3:14351:14387	1000067	1	True				
ANR	1000382	AssignmentExpression	end_ptr = ( end_ptr - ptr ) + line_ptr		1000067	0		=			
ANR	1000383	Identifier	end_ptr		1000067	0					
ANR	1000384	AdditiveExpression	( end_ptr - ptr ) + line_ptr		1000067	1		+			
ANR	1000385	AdditiveExpression	end_ptr - ptr		1000067	0		-			
ANR	1000386	Identifier	end_ptr		1000067	0					
ANR	1000387	Identifier	ptr		1000067	1					
ANR	1000388	Identifier	line_ptr		1000067	1					
ANR	1000389	IfStatement	if ( end_ptr > buf && end_ptr [ - 1 ] == '\\\\' )		1000067	11					
ANR	1000390	Condition	end_ptr > buf && end_ptr [ - 1 ] == '\\\\'	581:6:14400:14435	1000067	0	True				
ANR	1000391	AndExpression	end_ptr > buf && end_ptr [ - 1 ] == '\\\\'		1000067	0		&&			
ANR	1000392	RelationalExpression	end_ptr > buf		1000067	0		>			
ANR	1000393	Identifier	end_ptr		1000067	0					
ANR	1000394	Identifier	buf		1000067	1					
ANR	1000395	EqualityExpression	end_ptr [ - 1 ] == '\\\\'		1000067	1		==			
ANR	1000396	ArrayIndexing	end_ptr [ - 1 ]		1000067	0					
ANR	1000397	Identifier	end_ptr		1000067	0					
ANR	1000398	UnaryOperationExpression	- 1		1000067	1					
ANR	1000399	UnaryOperator	-		1000067	0					
ANR	1000400	PrimaryExpression	1		1000067	1					
ANR	1000401	PrimaryExpression	'\\\\'		1000067	1					
ANR	1000402	CompoundStatement		86:45:2171:2171	1000067	1					
ANR	1000403	ExpressionStatement	* ( -- end_ptr ) = '\\0'	583:3:14500:14519	1000067	0	True				
ANR	1000404	AssignmentExpression	* ( -- end_ptr ) = '\\0'		1000067	0		=			
ANR	1000405	UnaryOperationExpression	* ( -- end_ptr )		1000067	0					
ANR	1000406	UnaryOperator	*		1000067	0					
ANR	1000407	UnaryExpression	-- end_ptr		1000067	1					
ANR	1000408	IncDec	--		1000067	0					
ANR	1000409	Identifier	end_ptr		1000067	1					
ANR	1000410	PrimaryExpression	'\\0'		1000067	1					
ANR	1000411	ExpressionStatement	line_ptr = end_ptr	584:3:14524:14542	1000067	1	True				
ANR	1000412	AssignmentExpression	line_ptr = end_ptr		1000067	0		=			
ANR	1000413	Identifier	line_ptr		1000067	0					
ANR	1000414	Identifier	end_ptr		1000067	1					
ANR	1000415	ContinueStatement	continue ;	585:3:14547:14555	1000067	2	True				
ANR	1000416	ReturnStatement	return buf ;	587:2:14563:14573	1000067	12	True				
ANR	1000417	Identifier	buf		1000067	0					
ANR	1000418	ReturnType	static char *		1000067	1					
ANR	1000419	Identifier	getline_implementation		1000067	2					
ANR	1000420	ParameterList	"FILE * fp , int requested_bufsize"		1000067	3					
ANR	1000421	Parameter	FILE * fp	495:24:12233:12240	1000067	0	True				
ANR	1000422	ParameterType	FILE *		1000067	0					
ANR	1000423	Identifier	fp		1000067	1					
ANR	1000424	Parameter	int requested_bufsize	495:34:12243:12263	1000067	1	True				
ANR	1000425	ParameterType	int		1000067	0					
ANR	1000426	Identifier	requested_bufsize		1000067	1					
ANR	1000427	CFGEntryNode	ENTRY		1000067		True				
ANR	1000428	CFGExitNode	EXIT		1000067		True				
ANR	1000429	InfiniteForNode	true		1000067		True				
ANR	1000430	Symbol	malloc		1000067						
ANR	1000431	Symbol	* buf		1000067						
ANR	1000432	Symbol	NULL		1000067						
ANR	1000433	Symbol	newbuf		1000067						
ANR	1000434	Symbol	isspace		1000067						
ANR	1000435	Symbol	fp		1000067						
ANR	1000436	Symbol	requested_bufsize		1000067						
ANR	1000437	Symbol	realloc		1000067						
ANR	1000438	Symbol	* end_ptr		1000067						
ANR	1000439	Symbol	* ( -- end_ptr )		1000067						
ANR	1000440	Symbol	fgets		1000067						
ANR	1000441	Symbol	ptr		1000067						
ANR	1000442	Symbol	strlen		1000067						
ANR	1000443	Symbol	buf		1000067						
ANR	1000444	Symbol	end_ptr		1000067						
ANR	1000445	Symbol	len		1000067						
ANR	1000446	Symbol	ConfigLineNo		1000067						
ANR	1000447	Symbol	* ptr		1000067						
ANR	1000448	Symbol	buflen		1000067						
ANR	1000449	Symbol	feof		1000067						
ANR	1000450	Symbol	line_ptr		1000067						
ANR	1000451	Function	string_to_long	595:0:14712:15041							
ANR	1000452	FunctionDef	"string_to_long (const char * s , long * valuep)"		1000451	0					
ANR	1000453	CompoundStatement		597:0:14762:15041	1000451	0					
ANR	1000454	IfStatement	if ( ! s )		1000451	0					
ANR	1000455	Condition	! s	599:6:14810:14811	1000451	0	True				
ANR	1000456	UnaryOperationExpression	! s		1000451	0					
ANR	1000457	UnaryOperator	!		1000451	0					
ANR	1000458	Identifier	s		1000451	1					
ANR	1000459	CompoundStatement		3:11:52:52	1000451	1					
ANR	1000460	ReturnStatement	return - 1 ;	600:2:14819:14828	1000451	0	True				
ANR	1000461	UnaryOperationExpression	- 1		1000451	0					
ANR	1000462	UnaryOperator	-		1000451	0					
ANR	1000463	PrimaryExpression	1		1000451	1					
ANR	1000464	IdentifierDeclStatement	char * endp ;	604:1:14885:14895	1000451	1	True				
ANR	1000465	IdentifierDecl	* endp		1000451	0					
ANR	1000466	IdentifierDeclType	char *		1000451	0					
ANR	1000467	Identifier	endp		1000451	1					
ANR	1000468	IdentifierDeclStatement	"long value = strtol ( s , & endp , 10 ) ;"	605:1:14898:14933	1000451	2	True				
ANR	1000469	IdentifierDecl	"value = strtol ( s , & endp , 10 )"		1000451	0					
ANR	1000470	IdentifierDeclType	long		1000451	0					
ANR	1000471	Identifier	value		1000451	1					
ANR	1000472	AssignmentExpression	"value = strtol ( s , & endp , 10 )"		1000451	2		=			
ANR	1000473	Identifier	value		1000451	0					
ANR	1000474	CallExpression	"strtol ( s , & endp , 10 )"		1000451	1					
ANR	1000475	Callee	strtol		1000451	0					
ANR	1000476	Identifier	strtol		1000451	0					
ANR	1000477	ArgumentList	s		1000451	1					
ANR	1000478	Argument	s		1000451	0					
ANR	1000479	Identifier	s		1000451	0					
ANR	1000480	Argument	& endp		1000451	1					
ANR	1000481	UnaryOperationExpression	& endp		1000451	0					
ANR	1000482	UnaryOperator	&		1000451	0					
ANR	1000483	Identifier	endp		1000451	1					
ANR	1000484	Argument	10		1000451	2					
ANR	1000485	PrimaryExpression	10		1000451	0					
ANR	1000486	IfStatement	if ( ( const char * ) endp == s )		1000451	3					
ANR	1000487	Condition	( const char * ) endp == s	606:6:14941:14963	1000451	0	True				
ANR	1000488	EqualityExpression	( const char * ) endp == s		1000451	0		==			
ANR	1000489	CastExpression	( const char * ) endp		1000451	0					
ANR	1000490	CastTarget	const char *		1000451	0					
ANR	1000491	Identifier	endp		1000451	1					
ANR	1000492	Identifier	s		1000451	1					
ANR	1000493	CompoundStatement		10:32:204:204	1000451	1					
ANR	1000494	ReturnStatement	return - 2 ;	607:2:14971:14980	1000451	0	True				
ANR	1000495	UnaryOperationExpression	- 2		1000451	0					
ANR	1000496	UnaryOperator	-		1000451	0					
ANR	1000497	PrimaryExpression	2		1000451	1					
ANR	1000498	ExpressionStatement	* valuep = value	611:1:15013:15028	1000451	4	True				
ANR	1000499	AssignmentExpression	* valuep = value		1000451	0		=			
ANR	1000500	UnaryOperationExpression	* valuep		1000451	0					
ANR	1000501	UnaryOperator	*		1000451	0					
ANR	1000502	Identifier	valuep		1000451	1					
ANR	1000503	Identifier	value		1000451	1					
ANR	1000504	ReturnStatement	return 0 ;	612:1:15031:15039	1000451	5	True				
ANR	1000505	PrimaryExpression	0		1000451	0					
ANR	1000506	ReturnType	int		1000451	1					
ANR	1000507	Identifier	string_to_long		1000451	2					
ANR	1000508	ParameterList	"const char * s , long * valuep"		1000451	3					
ANR	1000509	Parameter	const char * s	596:16:14732:14744	1000451	0	True				
ANR	1000510	ParameterType	const char *		1000451	0					
ANR	1000511	Identifier	s		1000451	1					
ANR	1000512	Parameter	long * valuep	596:31:14747:14758	1000451	1	True				
ANR	1000513	ParameterType	long *		1000451	0					
ANR	1000514	Identifier	valuep		1000451	1					
ANR	1000515	CFGEntryNode	ENTRY		1000451		True				
ANR	1000516	CFGExitNode	EXIT		1000451		True				
ANR	1000517	Symbol	s		1000451						
ANR	1000518	Symbol	strtol		1000451						
ANR	1000519	Symbol	& endp		1000451						
ANR	1000520	Symbol	valuep		1000451						
ANR	1000521	Symbol	endp		1000451						
ANR	1000522	Symbol	* valuep		1000451						
ANR	1000523	Symbol	value		1000451						
ANR	1000524	Function	expand_macro	625:0:15540:19351							
ANR	1000525	FunctionDef	"expand_macro (const char * value , BUCKET * * table , int table_size , char * self , bool use_default_param_table)"		1000524	0					
ANR	1000526	CompoundStatement		631:0:15675:19351	1000524	0					
ANR	1000527	IdentifierDeclStatement	char * tmp = strdup ( value ) ;	632:1:15678:15705	1000524	0	True				
ANR	1000528	IdentifierDecl	* tmp = strdup ( value )		1000524	0					
ANR	1000529	IdentifierDeclType	char *		1000524	0					
ANR	1000530	Identifier	tmp		1000524	1					
ANR	1000531	AssignmentExpression	* tmp = strdup ( value )		1000524	2		=			
ANR	1000532	Identifier	tmp		1000524	0					
ANR	1000533	CallExpression	strdup ( value )		1000524	1					
ANR	1000534	Callee	strdup		1000524	0					
ANR	1000535	Identifier	strdup		1000524	0					
ANR	1000536	ArgumentList	value		1000524	1					
ANR	1000537	Argument	value		1000524	0					
ANR	1000538	Identifier	value		1000524	0					
ANR	1000539	IdentifierDeclStatement	"char * left , * name , * right ;"	633:1:15708:15733	1000524	1	True				
ANR	1000540	IdentifierDecl	* left		1000524	0					
ANR	1000541	IdentifierDeclType	char *		1000524	0					
ANR	1000542	Identifier	left		1000524	1					
ANR	1000543	IdentifierDecl	* name		1000524	1					
ANR	1000544	IdentifierDeclType	char *		1000524	0					
ANR	1000545	Identifier	name		1000524	1					
ANR	1000546	IdentifierDecl	* right		1000524	2					
ANR	1000547	IdentifierDeclType	char *		1000524	0					
ANR	1000548	Identifier	right		1000524	1					
ANR	1000549	IdentifierDeclStatement	const char * tvalue ;	634:1:15736:15754	1000524	2	True				
ANR	1000550	IdentifierDecl	* tvalue		1000524	0					
ANR	1000551	IdentifierDeclType	const char *		1000524	0					
ANR	1000552	Identifier	tvalue		1000524	1					
ANR	1000553	IdentifierDeclStatement	char * rval ;	635:1:15757:15767	1000524	3	True				
ANR	1000554	IdentifierDecl	* rval		1000524	0					
ANR	1000555	IdentifierDeclType	char *		1000524	0					
ANR	1000556	Identifier	rval		1000524	1					
ANR	1000557	IdentifierDeclStatement	bool all_done = false ;	637:1:15771:15792	1000524	4	True				
ANR	1000558	IdentifierDecl	all_done = false		1000524	0					
ANR	1000559	IdentifierDeclType	bool		1000524	0					
ANR	1000560	Identifier	all_done		1000524	1					
ANR	1000561	AssignmentExpression	all_done = false		1000524	2		=			
ANR	1000562	Identifier	false		1000524	0					
ANR	1000563	Identifier	false		1000524	1					
ANR	1000564	WhileStatement	while ( ! all_done )		1000524	5					
ANR	1000565	Condition	! all_done	638:8:15802:15810	1000524	0	True				
ANR	1000566	UnaryOperationExpression	! all_done		1000524	0					
ANR	1000567	UnaryOperator	!		1000524	0					
ANR	1000568	Identifier	all_done		1000524	1					
ANR	1000569	CompoundStatement		8:20:138:138	1000524	1					
ANR	1000570	ExpressionStatement	all_done = true	639:2:15852:15867	1000524	0	True				
ANR	1000571	AssignmentExpression	all_done = true		1000524	0		=			
ANR	1000572	Identifier	all_done		1000524	0					
ANR	1000573	Identifier	true		1000524	1					
ANR	1000574	IfStatement	"if ( ! self && find_special_config_macro ( ""$ENV"" , true , tmp , & left , & name , & right ) )"		1000524	1					
ANR	1000575	Condition	"! self && find_special_config_macro ( ""$ENV"" , true , tmp , & left , & name , & right )"	641:6:15876:15948	1000524	0	True				
ANR	1000576	AndExpression	"! self && find_special_config_macro ( ""$ENV"" , true , tmp , & left , & name , & right )"		1000524	0		&&			
ANR	1000577	UnaryOperationExpression	! self		1000524	0					
ANR	1000578	UnaryOperator	!		1000524	0					
ANR	1000579	Identifier	self		1000524	1					
ANR	1000580	CallExpression	"find_special_config_macro ( ""$ENV"" , true , tmp , & left , & name , & right )"		1000524	1					
ANR	1000581	Callee	find_special_config_macro		1000524	0					
ANR	1000582	Identifier	find_special_config_macro		1000524	0					
ANR	1000583	ArgumentList	"""$ENV"""		1000524	1					
ANR	1000584	Argument	"""$ENV"""		1000524	0					
ANR	1000585	PrimaryExpression	"""$ENV"""		1000524	0					
ANR	1000586	Argument	true		1000524	1					
ANR	1000587	Identifier	true		1000524	0					
ANR	1000588	Argument	tmp		1000524	2					
ANR	1000589	Identifier	tmp		1000524	0					
ANR	1000590	Argument	& left		1000524	3					
ANR	1000591	UnaryOperationExpression	& left		1000524	0					
ANR	1000592	UnaryOperator	&		1000524	0					
ANR	1000593	Identifier	left		1000524	1					
ANR	1000594	Argument	& name		1000524	4					
ANR	1000595	UnaryOperationExpression	& name		1000524	0					
ANR	1000596	UnaryOperator	&		1000524	0					
ANR	1000597	Identifier	name		1000524	1					
ANR	1000598	Argument	& right		1000524	5					
ANR	1000599	UnaryOperationExpression	& right		1000524	0					
ANR	1000600	UnaryOperator	&		1000524	0					
ANR	1000601	Identifier	right		1000524	1					
ANR	1000602	CompoundStatement		12:2:279:279	1000524	1					
ANR	1000603	ExpressionStatement	all_done = false	643:3:15960:15976	1000524	0	True				
ANR	1000604	AssignmentExpression	all_done = false		1000524	0		=			
ANR	1000605	Identifier	all_done		1000524	0					
ANR	1000606	Identifier	false		1000524	1					
ANR	1000607	ExpressionStatement	tvalue = getenv ( name )	644:3:15981:16002	1000524	1	True				
ANR	1000608	AssignmentExpression	tvalue = getenv ( name )		1000524	0		=			
ANR	1000609	Identifier	tvalue		1000524	0					
ANR	1000610	CallExpression	getenv ( name )		1000524	1					
ANR	1000611	Callee	getenv		1000524	0					
ANR	1000612	Identifier	getenv		1000524	0					
ANR	1000613	ArgumentList	name		1000524	1					
ANR	1000614	Argument	name		1000524	0					
ANR	1000615	Identifier	name		1000524	0					
ANR	1000616	IfStatement	if ( tvalue == NULL )		1000524	2					
ANR	1000617	Condition	tvalue == NULL	645:7:16011:16024	1000524	0	True				
ANR	1000618	EqualityExpression	tvalue == NULL		1000524	0		==			
ANR	1000619	Identifier	tvalue		1000524	0					
ANR	1000620	Identifier	NULL		1000524	1					
ANR	1000621	CompoundStatement		15:24:352:352	1000524	1					
ANR	1000622	ExpressionStatement	"EXCEPT ( ""Can't find %s in environment!"" , name )"	646:4:16034:16078	1000524	0	True				
ANR	1000623	CallExpression	"EXCEPT ( ""Can't find %s in environment!"" , name )"		1000524	0					
ANR	1000624	Callee	EXCEPT		1000524	0					
ANR	1000625	Identifier	EXCEPT		1000524	0					
ANR	1000626	ArgumentList	"""Can't find %s in environment!"""		1000524	1					
ANR	1000627	Argument	"""Can't find %s in environment!"""		1000524	0					
ANR	1000628	PrimaryExpression	"""Can't find %s in environment!"""		1000524	0					
ANR	1000629	Argument	name		1000524	1					
ANR	1000630	Identifier	name		1000524	0					
ANR	1000631	ExpressionStatement	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )	649:3:16089:16187	1000524	3	True				
ANR	1000632	AssignmentExpression	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	0		=			
ANR	1000633	Identifier	rval		1000524	0					
ANR	1000634	CastExpression	( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1000635	CastTarget	char *		1000524	0					
ANR	1000636	CallExpression	MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1000637	Callee	MALLOC		1000524	0					
ANR	1000638	Identifier	MALLOC		1000524	0					
ANR	1000639	ArgumentList	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	1					
ANR	1000640	Argument	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1000641	CastExpression	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1000642	CastTarget	unsigned		1000524	0					
ANR	1000643	AdditiveExpression	strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1000644	CallExpression	strlen ( left )		1000524	0					
ANR	1000645	Callee	strlen		1000524	0					
ANR	1000646	Identifier	strlen		1000524	0					
ANR	1000647	ArgumentList	left		1000524	1					
ANR	1000648	Argument	left		1000524	0					
ANR	1000649	Identifier	left		1000524	0					
ANR	1000650	AdditiveExpression	strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1000651	CallExpression	strlen ( tvalue )		1000524	0					
ANR	1000652	Callee	strlen		1000524	0					
ANR	1000653	Identifier	strlen		1000524	0					
ANR	1000654	ArgumentList	tvalue		1000524	1					
ANR	1000655	Argument	tvalue		1000524	0					
ANR	1000656	Identifier	tvalue		1000524	0					
ANR	1000657	AdditiveExpression	strlen ( right ) + 1		1000524	1		+			
ANR	1000658	CallExpression	strlen ( right )		1000524	0					
ANR	1000659	Callee	strlen		1000524	0					
ANR	1000660	Identifier	strlen		1000524	0					
ANR	1000661	ArgumentList	right		1000524	1					
ANR	1000662	Argument	right		1000524	0					
ANR	1000663	Identifier	right		1000524	0					
ANR	1000664	PrimaryExpression	1		1000524	1					
ANR	1000665	ExpressionStatement	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"	651:3:16192:16244	1000524	4	True				
ANR	1000666	CastExpression	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	0					
ANR	1000667	CastTarget	void		1000524	0					
ANR	1000668	CallExpression	"sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	1					
ANR	1000669	Callee	sprintf		1000524	0					
ANR	1000670	Identifier	sprintf		1000524	0					
ANR	1000671	ArgumentList	rval		1000524	1					
ANR	1000672	Argument	rval		1000524	0					
ANR	1000673	Identifier	rval		1000524	0					
ANR	1000674	Argument	"""%s%s%s"""		1000524	1					
ANR	1000675	PrimaryExpression	"""%s%s%s"""		1000524	0					
ANR	1000676	Argument	left		1000524	2					
ANR	1000677	Identifier	left		1000524	0					
ANR	1000678	Argument	tvalue		1000524	3					
ANR	1000679	Identifier	tvalue		1000524	0					
ANR	1000680	Argument	right		1000524	4					
ANR	1000681	Identifier	right		1000524	0					
ANR	1000682	ExpressionStatement	FREE ( tmp )	652:3:16249:16260	1000524	5	True				
ANR	1000683	CallExpression	FREE ( tmp )		1000524	0					
ANR	1000684	Callee	FREE		1000524	0					
ANR	1000685	Identifier	FREE		1000524	0					
ANR	1000686	ArgumentList	tmp		1000524	1					
ANR	1000687	Argument	tmp		1000524	0					
ANR	1000688	Identifier	tmp		1000524	0					
ANR	1000689	ExpressionStatement	tmp = rval	653:3:16265:16275	1000524	6	True				
ANR	1000690	AssignmentExpression	tmp = rval		1000524	0		=			
ANR	1000691	Identifier	tmp		1000524	0					
ANR	1000692	Identifier	rval		1000524	1					
ANR	1000693	IfStatement	"if ( ! self && find_special_config_macro ( ""$RANDOM_CHOICE"" , false , tmp , & left , & name , & right ) )"		1000524	2					
ANR	1000694	Condition	"! self && find_special_config_macro ( ""$RANDOM_CHOICE"" , false , tmp , & left , & name , & right )"	656:6:16288:16375	1000524	0	True				
ANR	1000695	AndExpression	"! self && find_special_config_macro ( ""$RANDOM_CHOICE"" , false , tmp , & left , & name , & right )"		1000524	0		&&			
ANR	1000696	UnaryOperationExpression	! self		1000524	0					
ANR	1000697	UnaryOperator	!		1000524	0					
ANR	1000698	Identifier	self		1000524	1					
ANR	1000699	CallExpression	"find_special_config_macro ( ""$RANDOM_CHOICE"" , false , tmp , & left , & name , & right )"		1000524	1					
ANR	1000700	Callee	find_special_config_macro		1000524	0					
ANR	1000701	Identifier	find_special_config_macro		1000524	0					
ANR	1000702	ArgumentList	"""$RANDOM_CHOICE"""		1000524	1					
ANR	1000703	Argument	"""$RANDOM_CHOICE"""		1000524	0					
ANR	1000704	PrimaryExpression	"""$RANDOM_CHOICE"""		1000524	0					
ANR	1000705	Argument	false		1000524	1					
ANR	1000706	Identifier	false		1000524	0					
ANR	1000707	Argument	tmp		1000524	2					
ANR	1000708	Identifier	tmp		1000524	0					
ANR	1000709	Argument	& left		1000524	3					
ANR	1000710	UnaryOperationExpression	& left		1000524	0					
ANR	1000711	UnaryOperator	&		1000524	0					
ANR	1000712	Identifier	left		1000524	1					
ANR	1000713	Argument	& name		1000524	4					
ANR	1000714	UnaryOperationExpression	& name		1000524	0					
ANR	1000715	UnaryOperator	&		1000524	0					
ANR	1000716	Identifier	name		1000524	1					
ANR	1000717	Argument	& right		1000524	5					
ANR	1000718	UnaryOperationExpression	& right		1000524	0					
ANR	1000719	UnaryOperator	&		1000524	0					
ANR	1000720	Identifier	right		1000524	1					
ANR	1000721	CompoundStatement		31:3:765:799	1000524	1					
ANR	1000722	ExpressionStatement	all_done = false	659:3:16387:16403	1000524	0	True				
ANR	1000723	AssignmentExpression	all_done = false		1000524	0		=			
ANR	1000724	Identifier	all_done		1000524	0					
ANR	1000725	Identifier	false		1000524	1					
ANR	1000726	IdentifierDeclStatement	"StringList entries ( name , "","" ) ;"	660:3:16408:16436	1000524	1	True				
ANR	1000727	IdentifierDecl	"entries ( name , "","" )"		1000524	0					
ANR	1000728	IdentifierDeclType	StringList		1000524	0					
ANR	1000729	Identifier	entries		1000524	1					
ANR	1000730	Expression	"name , "","""		1000524	2					
ANR	1000731	Identifier	name		1000524	0					
ANR	1000732	PrimaryExpression	""","""		1000524	1					
ANR	1000733	IdentifierDeclStatement	int num_entries = entries . number ( ) ;	661:3:16441:16475	1000524	2	True				
ANR	1000734	IdentifierDecl	num_entries = entries . number ( )		1000524	0					
ANR	1000735	IdentifierDeclType	int		1000524	0					
ANR	1000736	Identifier	num_entries		1000524	1					
ANR	1000737	AssignmentExpression	num_entries = entries . number ( )		1000524	2		=			
ANR	1000738	Identifier	num_entries		1000524	0					
ANR	1000739	CallExpression	entries . number ( )		1000524	1					
ANR	1000740	Callee	entries . number		1000524	0					
ANR	1000741	MemberAccess	entries . number		1000524	0					
ANR	1000742	Identifier	entries		1000524	0					
ANR	1000743	Identifier	number		1000524	1					
ANR	1000744	ArgumentList			1000524	1					
ANR	1000745	ExpressionStatement	tvalue = NULL	662:3:16480:16493	1000524	3	True				
ANR	1000746	AssignmentExpression	tvalue = NULL		1000524	0		=			
ANR	1000747	Identifier	tvalue		1000524	0					
ANR	1000748	Identifier	NULL		1000524	1					
ANR	1000749	IfStatement	if ( num_entries > 0 )		1000524	4					
ANR	1000750	Condition	num_entries > 0	663:8:16503:16517	1000524	0	True				
ANR	1000751	RelationalExpression	num_entries > 0		1000524	0		>			
ANR	1000752	Identifier	num_entries		1000524	0					
ANR	1000753	PrimaryExpression	0		1000524	1					
ANR	1000754	CompoundStatement		35:4:910:919	1000524	1					
ANR	1000755	IdentifierDeclStatement	int rand_entry = ( get_random_int ( ) % num_entries ) + 1 ;	664:4:16527:16580	1000524	0	True				
ANR	1000756	IdentifierDecl	rand_entry = ( get_random_int ( ) % num_entries ) + 1		1000524	0					
ANR	1000757	IdentifierDeclType	int		1000524	0					
ANR	1000758	Identifier	rand_entry		1000524	1					
ANR	1000759	AssignmentExpression	rand_entry = ( get_random_int ( ) % num_entries ) + 1		1000524	2		=			
ANR	1000760	Identifier	rand_entry		1000524	0					
ANR	1000761	AdditiveExpression	( get_random_int ( ) % num_entries ) + 1		1000524	1		+			
ANR	1000762	MultiplicativeExpression	get_random_int ( ) % num_entries		1000524	0		%			
ANR	1000763	CallExpression	get_random_int ( )		1000524	0					
ANR	1000764	Callee	get_random_int		1000524	0					
ANR	1000765	Identifier	get_random_int		1000524	0					
ANR	1000766	ArgumentList			1000524	1					
ANR	1000767	Identifier	num_entries		1000524	1					
ANR	1000768	PrimaryExpression	1		1000524	1					
ANR	1000769	IdentifierDeclStatement	int i = 0 ;	665:4:16586:16595	1000524	1	True				
ANR	1000770	IdentifierDecl	i = 0		1000524	0					
ANR	1000771	IdentifierDeclType	int		1000524	0					
ANR	1000772	Identifier	i		1000524	1					
ANR	1000773	AssignmentExpression	i = 0		1000524	2		=			
ANR	1000774	Identifier	i		1000524	0					
ANR	1000775	PrimaryExpression	0		1000524	1					
ANR	1000776	ExpressionStatement	entries . rewind ( )	666:4:16601:16617	1000524	2	True				
ANR	1000777	CallExpression	entries . rewind ( )		1000524	0					
ANR	1000778	Callee	entries . rewind		1000524	0					
ANR	1000779	MemberAccess	entries . rewind		1000524	0					
ANR	1000780	Identifier	entries		1000524	0					
ANR	1000781	Identifier	rewind		1000524	1					
ANR	1000782	ArgumentList			1000524	1					
ANR	1000783	WhileStatement	while ( ( i < rand_entry ) && ( tvalue = entries . next ( ) ) )		1000524	3					
ANR	1000784	Condition	( i < rand_entry ) && ( tvalue = entries . next ( ) )	667:12:16631:16673	1000524	0	True				
ANR	1000785	AndExpression	( i < rand_entry ) && ( tvalue = entries . next ( ) )		1000524	0		&&			
ANR	1000786	RelationalExpression	i < rand_entry		1000524	0		<			
ANR	1000787	Identifier	i		1000524	0					
ANR	1000788	Identifier	rand_entry		1000524	1					
ANR	1000789	AssignmentExpression	tvalue = entries . next ( )		1000524	1		=			
ANR	1000790	Identifier	tvalue		1000524	0					
ANR	1000791	CallExpression	entries . next ( )		1000524	1					
ANR	1000792	Callee	entries . next		1000524	0					
ANR	1000793	MemberAccess	entries . next		1000524	0					
ANR	1000794	Identifier	entries		1000524	0					
ANR	1000795	Identifier	next		1000524	1					
ANR	1000796	ArgumentList			1000524	1					
ANR	1000797	CompoundStatement		37:58:1001:1001	1000524	1					
ANR	1000798	ExpressionStatement	i ++	668:5:16684:16687	1000524	0	True				
ANR	1000799	PostIncDecOperationExpression	i ++		1000524	0					
ANR	1000800	Identifier	i		1000524	0					
ANR	1000801	IncDec	++		1000524	1					
ANR	1000802	IfStatement	if ( tvalue == NULL )		1000524	5					
ANR	1000803	Condition	tvalue == NULL	671:7:16707:16720	1000524	0	True				
ANR	1000804	EqualityExpression	tvalue == NULL		1000524	0		==			
ANR	1000805	Identifier	tvalue		1000524	0					
ANR	1000806	Identifier	NULL		1000524	1					
ANR	1000807	CompoundStatement		41:24:1048:1048	1000524	1					
ANR	1000808	ExpressionStatement	"EXCEPT ( ""$RANDOM_CHOICE() macro in config file empty!"" )"	672:4:16730:16785	1000524	0	True				
ANR	1000809	CallExpression	"EXCEPT ( ""$RANDOM_CHOICE() macro in config file empty!"" )"		1000524	0					
ANR	1000810	Callee	EXCEPT		1000524	0					
ANR	1000811	Identifier	EXCEPT		1000524	0					
ANR	1000812	ArgumentList	"""$RANDOM_CHOICE() macro in config file empty!"""		1000524	1					
ANR	1000813	Argument	"""$RANDOM_CHOICE() macro in config file empty!"""		1000524	0					
ANR	1000814	PrimaryExpression	"""$RANDOM_CHOICE() macro in config file empty!"""		1000524	0					
ANR	1000815	ExpressionStatement	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )	675:3:16796:16894	1000524	6	True				
ANR	1000816	AssignmentExpression	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	0		=			
ANR	1000817	Identifier	rval		1000524	0					
ANR	1000818	CastExpression	( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1000819	CastTarget	char *		1000524	0					
ANR	1000820	CallExpression	MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1000821	Callee	MALLOC		1000524	0					
ANR	1000822	Identifier	MALLOC		1000524	0					
ANR	1000823	ArgumentList	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	1					
ANR	1000824	Argument	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1000825	CastExpression	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1000826	CastTarget	unsigned		1000524	0					
ANR	1000827	AdditiveExpression	strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1000828	CallExpression	strlen ( left )		1000524	0					
ANR	1000829	Callee	strlen		1000524	0					
ANR	1000830	Identifier	strlen		1000524	0					
ANR	1000831	ArgumentList	left		1000524	1					
ANR	1000832	Argument	left		1000524	0					
ANR	1000833	Identifier	left		1000524	0					
ANR	1000834	AdditiveExpression	strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1000835	CallExpression	strlen ( tvalue )		1000524	0					
ANR	1000836	Callee	strlen		1000524	0					
ANR	1000837	Identifier	strlen		1000524	0					
ANR	1000838	ArgumentList	tvalue		1000524	1					
ANR	1000839	Argument	tvalue		1000524	0					
ANR	1000840	Identifier	tvalue		1000524	0					
ANR	1000841	AdditiveExpression	strlen ( right ) + 1		1000524	1		+			
ANR	1000842	CallExpression	strlen ( right )		1000524	0					
ANR	1000843	Callee	strlen		1000524	0					
ANR	1000844	Identifier	strlen		1000524	0					
ANR	1000845	ArgumentList	right		1000524	1					
ANR	1000846	Argument	right		1000524	0					
ANR	1000847	Identifier	right		1000524	0					
ANR	1000848	PrimaryExpression	1		1000524	1					
ANR	1000849	ExpressionStatement	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"	677:3:16899:16951	1000524	7	True				
ANR	1000850	CastExpression	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	0					
ANR	1000851	CastTarget	void		1000524	0					
ANR	1000852	CallExpression	"sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	1					
ANR	1000853	Callee	sprintf		1000524	0					
ANR	1000854	Identifier	sprintf		1000524	0					
ANR	1000855	ArgumentList	rval		1000524	1					
ANR	1000856	Argument	rval		1000524	0					
ANR	1000857	Identifier	rval		1000524	0					
ANR	1000858	Argument	"""%s%s%s"""		1000524	1					
ANR	1000859	PrimaryExpression	"""%s%s%s"""		1000524	0					
ANR	1000860	Argument	left		1000524	2					
ANR	1000861	Identifier	left		1000524	0					
ANR	1000862	Argument	tvalue		1000524	3					
ANR	1000863	Identifier	tvalue		1000524	0					
ANR	1000864	Argument	right		1000524	4					
ANR	1000865	Identifier	right		1000524	0					
ANR	1000866	ExpressionStatement	FREE ( tmp )	678:3:16956:16967	1000524	8	True				
ANR	1000867	CallExpression	FREE ( tmp )		1000524	0					
ANR	1000868	Callee	FREE		1000524	0					
ANR	1000869	Identifier	FREE		1000524	0					
ANR	1000870	ArgumentList	tmp		1000524	1					
ANR	1000871	Argument	tmp		1000524	0					
ANR	1000872	Identifier	tmp		1000524	0					
ANR	1000873	ExpressionStatement	tmp = rval	679:3:16972:16982	1000524	9	True				
ANR	1000874	AssignmentExpression	tmp = rval		1000524	0		=			
ANR	1000875	Identifier	tmp		1000524	0					
ANR	1000876	Identifier	rval		1000524	1					
ANR	1000877	IfStatement	"if ( ! self && find_special_config_macro ( ""$RANDOM_INTEGER"" , false , tmp , & left , & name , & right ) )"		1000524	3					
ANR	1000878	Condition	"! self && find_special_config_macro ( ""$RANDOM_INTEGER"" , false , tmp , & left , & name , & right )"	682:6:16995:17083	1000524	0	True				
ANR	1000879	AndExpression	"! self && find_special_config_macro ( ""$RANDOM_INTEGER"" , false , tmp , & left , & name , & right )"		1000524	0		&&			
ANR	1000880	UnaryOperationExpression	! self		1000524	0					
ANR	1000881	UnaryOperator	!		1000524	0					
ANR	1000882	Identifier	self		1000524	1					
ANR	1000883	CallExpression	"find_special_config_macro ( ""$RANDOM_INTEGER"" , false , tmp , & left , & name , & right )"		1000524	1					
ANR	1000884	Callee	find_special_config_macro		1000524	0					
ANR	1000885	Identifier	find_special_config_macro		1000524	0					
ANR	1000886	ArgumentList	"""$RANDOM_INTEGER"""		1000524	1					
ANR	1000887	Argument	"""$RANDOM_INTEGER"""		1000524	0					
ANR	1000888	PrimaryExpression	"""$RANDOM_INTEGER"""		1000524	0					
ANR	1000889	Argument	false		1000524	1					
ANR	1000890	Identifier	false		1000524	0					
ANR	1000891	Argument	tmp		1000524	2					
ANR	1000892	Identifier	tmp		1000524	0					
ANR	1000893	Argument	& left		1000524	3					
ANR	1000894	UnaryOperationExpression	& left		1000524	0					
ANR	1000895	UnaryOperator	&		1000524	0					
ANR	1000896	Identifier	left		1000524	1					
ANR	1000897	Argument	& name		1000524	4					
ANR	1000898	UnaryOperationExpression	& name		1000524	0					
ANR	1000899	UnaryOperator	&		1000524	0					
ANR	1000900	Identifier	name		1000524	1					
ANR	1000901	Argument	& right		1000524	5					
ANR	1000902	UnaryOperationExpression	& right		1000524	0					
ANR	1000903	UnaryOperator	&		1000524	0					
ANR	1000904	Identifier	right		1000524	1					
ANR	1000905	CompoundStatement		93:3:2413:2426	1000524	1					
ANR	1000906	ExpressionStatement	all_done = false	685:3:17095:17111	1000524	0	True				
ANR	1000907	AssignmentExpression	all_done = false		1000524	0		=			
ANR	1000908	Identifier	all_done		1000524	0					
ANR	1000909	Identifier	false		1000524	1					
ANR	1000910	IdentifierDeclStatement	"StringList entries ( name , "","" ) ;"	686:3:17116:17145	1000524	1	True				
ANR	1000911	IdentifierDecl	"entries ( name , "","" )"		1000524	0					
ANR	1000912	IdentifierDeclType	StringList		1000524	0					
ANR	1000913	Identifier	entries		1000524	1					
ANR	1000914	Expression	"name , "","""		1000524	2					
ANR	1000915	Identifier	name		1000524	0					
ANR	1000916	PrimaryExpression	""","""		1000524	1					
ANR	1000917	ExpressionStatement	entries . rewind ( )	688:3:17151:17167	1000524	2	True				
ANR	1000918	CallExpression	entries . rewind ( )		1000524	0					
ANR	1000919	Callee	entries . rewind		1000524	0					
ANR	1000920	MemberAccess	entries . rewind		1000524	0					
ANR	1000921	Identifier	entries		1000524	0					
ANR	1000922	Identifier	rewind		1000524	1					
ANR	1000923	ArgumentList			1000524	1					
ANR	1000924	IdentifierDeclStatement	const char * tmp2 ;	689:3:17172:17188	1000524	3	True				
ANR	1000925	IdentifierDecl	* tmp2		1000524	0					
ANR	1000926	IdentifierDeclType	const char *		1000524	0					
ANR	1000927	Identifier	tmp2		1000524	1					
ANR	1000928	ExpressionStatement	tmp2 = entries . next ( )	691:3:17194:17215	1000524	4	True				
ANR	1000929	AssignmentExpression	tmp2 = entries . next ( )		1000524	0		=			
ANR	1000930	Identifier	tmp2		1000524	0					
ANR	1000931	CallExpression	entries . next ( )		1000524	1					
ANR	1000932	Callee	entries . next		1000524	0					
ANR	1000933	MemberAccess	entries . next		1000524	0					
ANR	1000934	Identifier	entries		1000524	0					
ANR	1000935	Identifier	next		1000524	1					
ANR	1000936	ArgumentList			1000524	1					
ANR	1000937	IdentifierDeclStatement	long min_value = 0 ;	692:3:17220:17236	1000524	5	True				
ANR	1000938	IdentifierDecl	min_value = 0		1000524	0					
ANR	1000939	IdentifierDeclType	long		1000524	0					
ANR	1000940	Identifier	min_value		1000524	1					
ANR	1000941	AssignmentExpression	min_value = 0		1000524	2		=			
ANR	1000942	Identifier	min_value		1000524	0					
ANR	1000943	PrimaryExpression	0		1000524	1					
ANR	1000944	IfStatement	"if ( string_to_long ( tmp2 , & min_value ) < 0 )"		1000524	6					
ANR	1000945	Condition	"string_to_long ( tmp2 , & min_value ) < 0"	693:8:17246:17283	1000524	0	True				
ANR	1000946	RelationalExpression	"string_to_long ( tmp2 , & min_value ) < 0"		1000524	0		<			
ANR	1000947	CallExpression	"string_to_long ( tmp2 , & min_value )"		1000524	0					
ANR	1000948	Callee	string_to_long		1000524	0					
ANR	1000949	Identifier	string_to_long		1000524	0					
ANR	1000950	ArgumentList	tmp2		1000524	1					
ANR	1000951	Argument	tmp2		1000524	0					
ANR	1000952	Identifier	tmp2		1000524	0					
ANR	1000953	Argument	& min_value		1000524	1					
ANR	1000954	UnaryOperationExpression	& min_value		1000524	0					
ANR	1000955	UnaryOperator	&		1000524	0					
ANR	1000956	Identifier	min_value		1000524	1					
ANR	1000957	PrimaryExpression	0		1000524	1					
ANR	1000958	CompoundStatement		63:49:1611:1611	1000524	1					
ANR	1000959	ExpressionStatement	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid min!"" )"	694:4:17293:17349	1000524	0	True				
ANR	1000960	CallExpression	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid min!"" )"		1000524	0					
ANR	1000961	Callee	EXCEPT		1000524	0					
ANR	1000962	Identifier	EXCEPT		1000524	0					
ANR	1000963	ArgumentList	"""$RANDOM_INTEGER() config macro: invalid min!"""		1000524	1					
ANR	1000964	Argument	"""$RANDOM_INTEGER() config macro: invalid min!"""		1000524	0					
ANR	1000965	PrimaryExpression	"""$RANDOM_INTEGER() config macro: invalid min!"""		1000524	0					
ANR	1000966	ExpressionStatement	tmp2 = entries . next ( )	697:3:17360:17381	1000524	7	True				
ANR	1000967	AssignmentExpression	tmp2 = entries . next ( )		1000524	0		=			
ANR	1000968	Identifier	tmp2		1000524	0					
ANR	1000969	CallExpression	entries . next ( )		1000524	1					
ANR	1000970	Callee	entries . next		1000524	0					
ANR	1000971	MemberAccess	entries . next		1000524	0					
ANR	1000972	Identifier	entries		1000524	0					
ANR	1000973	Identifier	next		1000524	1					
ANR	1000974	ArgumentList			1000524	1					
ANR	1000975	IdentifierDeclStatement	long max_value = 0 ;	698:3:17386:17402	1000524	8	True				
ANR	1000976	IdentifierDecl	max_value = 0		1000524	0					
ANR	1000977	IdentifierDeclType	long		1000524	0					
ANR	1000978	Identifier	max_value		1000524	1					
ANR	1000979	AssignmentExpression	max_value = 0		1000524	2		=			
ANR	1000980	Identifier	max_value		1000524	0					
ANR	1000981	PrimaryExpression	0		1000524	1					
ANR	1000982	IfStatement	"if ( string_to_long ( tmp2 , & max_value ) < 0 )"		1000524	9					
ANR	1000983	Condition	"string_to_long ( tmp2 , & max_value ) < 0"	699:8:17412:17449	1000524	0	True				
ANR	1000984	RelationalExpression	"string_to_long ( tmp2 , & max_value ) < 0"		1000524	0		<			
ANR	1000985	CallExpression	"string_to_long ( tmp2 , & max_value )"		1000524	0					
ANR	1000986	Callee	string_to_long		1000524	0					
ANR	1000987	Identifier	string_to_long		1000524	0					
ANR	1000988	ArgumentList	tmp2		1000524	1					
ANR	1000989	Argument	tmp2		1000524	0					
ANR	1000990	Identifier	tmp2		1000524	0					
ANR	1000991	Argument	& max_value		1000524	1					
ANR	1000992	UnaryOperationExpression	& max_value		1000524	0					
ANR	1000993	UnaryOperator	&		1000524	0					
ANR	1000994	Identifier	max_value		1000524	1					
ANR	1000995	PrimaryExpression	0		1000524	1					
ANR	1000996	CompoundStatement		69:49:1777:1777	1000524	1					
ANR	1000997	ExpressionStatement	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid max!"" )"	700:4:17459:17515	1000524	0	True				
ANR	1000998	CallExpression	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid max!"" )"		1000524	0					
ANR	1000999	Callee	EXCEPT		1000524	0					
ANR	1001000	Identifier	EXCEPT		1000524	0					
ANR	1001001	ArgumentList	"""$RANDOM_INTEGER() config macro: invalid max!"""		1000524	1					
ANR	1001002	Argument	"""$RANDOM_INTEGER() config macro: invalid max!"""		1000524	0					
ANR	1001003	PrimaryExpression	"""$RANDOM_INTEGER() config macro: invalid max!"""		1000524	0					
ANR	1001004	ExpressionStatement	tmp2 = entries . next ( )	703:3:17526:17547	1000524	10	True				
ANR	1001005	AssignmentExpression	tmp2 = entries . next ( )		1000524	0		=			
ANR	1001006	Identifier	tmp2		1000524	0					
ANR	1001007	CallExpression	entries . next ( )		1000524	1					
ANR	1001008	Callee	entries . next		1000524	0					
ANR	1001009	MemberAccess	entries . next		1000524	0					
ANR	1001010	Identifier	entries		1000524	0					
ANR	1001011	Identifier	next		1000524	1					
ANR	1001012	ArgumentList			1000524	1					
ANR	1001013	IdentifierDeclStatement	long step = 1 ;	704:3:17552:17565	1000524	11	True				
ANR	1001014	IdentifierDecl	step = 1		1000524	0					
ANR	1001015	IdentifierDeclType	long		1000524	0					
ANR	1001016	Identifier	step		1000524	1					
ANR	1001017	AssignmentExpression	step = 1		1000524	2		=			
ANR	1001018	Identifier	step		1000524	0					
ANR	1001019	PrimaryExpression	1		1000524	1					
ANR	1001020	IfStatement	"if ( string_to_long ( tmp2 , & step ) < - 1 )"		1000524	12					
ANR	1001021	Condition	"string_to_long ( tmp2 , & step ) < - 1"	705:8:17575:17608	1000524	0	True				
ANR	1001022	RelationalExpression	"string_to_long ( tmp2 , & step ) < - 1"		1000524	0		<			
ANR	1001023	CallExpression	"string_to_long ( tmp2 , & step )"		1000524	0					
ANR	1001024	Callee	string_to_long		1000524	0					
ANR	1001025	Identifier	string_to_long		1000524	0					
ANR	1001026	ArgumentList	tmp2		1000524	1					
ANR	1001027	Argument	tmp2		1000524	0					
ANR	1001028	Identifier	tmp2		1000524	0					
ANR	1001029	Argument	& step		1000524	1					
ANR	1001030	UnaryOperationExpression	& step		1000524	0					
ANR	1001031	UnaryOperator	&		1000524	0					
ANR	1001032	Identifier	step		1000524	1					
ANR	1001033	UnaryOperationExpression	- 1		1000524	1					
ANR	1001034	UnaryOperator	-		1000524	0					
ANR	1001035	PrimaryExpression	1		1000524	1					
ANR	1001036	CompoundStatement		75:45:1936:1936	1000524	1					
ANR	1001037	ExpressionStatement	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid step!"" )"	706:4:17618:17675	1000524	0	True				
ANR	1001038	CallExpression	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid step!"" )"		1000524	0					
ANR	1001039	Callee	EXCEPT		1000524	0					
ANR	1001040	Identifier	EXCEPT		1000524	0					
ANR	1001041	ArgumentList	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	1					
ANR	1001042	Argument	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	0					
ANR	1001043	PrimaryExpression	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	0					
ANR	1001044	IfStatement	if ( step < 1 )		1000524	13					
ANR	1001045	Condition	step < 1	709:8:17691:17698	1000524	0	True				
ANR	1001046	RelationalExpression	step < 1		1000524	0		<			
ANR	1001047	Identifier	step		1000524	0					
ANR	1001048	PrimaryExpression	1		1000524	1					
ANR	1001049	CompoundStatement		79:19:2026:2026	1000524	1					
ANR	1001050	ExpressionStatement	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid step!"" )"	710:4:17708:17765	1000524	0	True				
ANR	1001051	CallExpression	"EXCEPT ( ""$RANDOM_INTEGER() config macro: invalid step!"" )"		1000524	0					
ANR	1001052	Callee	EXCEPT		1000524	0					
ANR	1001053	Identifier	EXCEPT		1000524	0					
ANR	1001054	ArgumentList	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	1					
ANR	1001055	Argument	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	0					
ANR	1001056	PrimaryExpression	"""$RANDOM_INTEGER() config macro: invalid step!"""		1000524	0					
ANR	1001057	IfStatement	if ( min_value > max_value )		1000524	14					
ANR	1001058	Condition	min_value > max_value	712:8:17780:17800	1000524	0	True				
ANR	1001059	RelationalExpression	min_value > max_value		1000524	0		>			
ANR	1001060	Identifier	min_value		1000524	0					
ANR	1001061	Identifier	max_value		1000524	1					
ANR	1001062	CompoundStatement		82:32:2128:2128	1000524	1					
ANR	1001063	ExpressionStatement	"EXCEPT ( ""$RANDOM_INTEGER() config macro: min > max!"" )"	713:4:17810:17864	1000524	0	True				
ANR	1001064	CallExpression	"EXCEPT ( ""$RANDOM_INTEGER() config macro: min > max!"" )"		1000524	0					
ANR	1001065	Callee	EXCEPT		1000524	0					
ANR	1001066	Identifier	EXCEPT		1000524	0					
ANR	1001067	ArgumentList	"""$RANDOM_INTEGER() config macro: min > max!"""		1000524	1					
ANR	1001068	Argument	"""$RANDOM_INTEGER() config macro: min > max!"""		1000524	0					
ANR	1001069	PrimaryExpression	"""$RANDOM_INTEGER() config macro: min > max!"""		1000524	0					
ANR	1001070	IdentifierDeclStatement	long range = step + max_value - min_value ;	717:3:17907:17948	1000524	15	True				
ANR	1001071	IdentifierDecl	range = step + max_value - min_value		1000524	0					
ANR	1001072	IdentifierDeclType	long		1000524	0					
ANR	1001073	Identifier	range		1000524	1					
ANR	1001074	AssignmentExpression	range = step + max_value - min_value		1000524	2		=			
ANR	1001075	Identifier	range		1000524	0					
ANR	1001076	AdditiveExpression	step + max_value - min_value		1000524	1		+			
ANR	1001077	Identifier	step		1000524	0					
ANR	1001078	AdditiveExpression	max_value - min_value		1000524	1		-			
ANR	1001079	Identifier	max_value		1000524	0					
ANR	1001080	Identifier	min_value		1000524	1					
ANR	1001081	IdentifierDeclStatement	long num = range / step ;	718:3:17953:17977	1000524	16	True				
ANR	1001082	IdentifierDecl	num = range / step		1000524	0					
ANR	1001083	IdentifierDeclType	long		1000524	0					
ANR	1001084	Identifier	num		1000524	1					
ANR	1001085	AssignmentExpression	num = range / step		1000524	2		=			
ANR	1001086	Identifier	num		1000524	0					
ANR	1001087	MultiplicativeExpression	range / step		1000524	1		/			
ANR	1001088	Identifier	range		1000524	0					
ANR	1001089	Identifier	step		1000524	1					
ANR	1001090	IdentifierDeclStatement	long random_value = min_value + ( get_random_int ( ) % num ) * step ;	719:3:17982:18049	1000524	17	True				
ANR	1001091	IdentifierDecl	random_value = min_value + ( get_random_int ( ) % num ) * step		1000524	0					
ANR	1001092	IdentifierDeclType	long		1000524	0					
ANR	1001093	Identifier	random_value		1000524	1					
ANR	1001094	AssignmentExpression	random_value = min_value + ( get_random_int ( ) % num ) * step		1000524	2		=			
ANR	1001095	Identifier	random_value		1000524	0					
ANR	1001096	AdditiveExpression	min_value + ( get_random_int ( ) % num ) * step		1000524	1		+			
ANR	1001097	Identifier	min_value		1000524	0					
ANR	1001098	MultiplicativeExpression	( get_random_int ( ) % num ) * step		1000524	1		*			
ANR	1001099	MultiplicativeExpression	get_random_int ( ) % num		1000524	0		%			
ANR	1001100	CallExpression	get_random_int ( )		1000524	0					
ANR	1001101	Callee	get_random_int		1000524	0					
ANR	1001102	Identifier	get_random_int		1000524	0					
ANR	1001103	ArgumentList			1000524	1					
ANR	1001104	Identifier	num		1000524	1					
ANR	1001105	Identifier	step		1000524	1					
ANR	1001106	IdentifierDeclStatement	char buf [ 128 ] ;	723:3:18089:18102	1000524	18	True				
ANR	1001107	IdentifierDecl	buf [ 128 ]		1000524	0					
ANR	1001108	IdentifierDeclType	char [ 128 ]		1000524	0					
ANR	1001109	Identifier	buf		1000524	1					
ANR	1001110	PrimaryExpression	128		1000524	2					
ANR	1001111	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) - 1 , ""%ld"" , random_value )"	724:3:18107:18158	1000524	19	True				
ANR	1001112	CallExpression	"snprintf ( buf , sizeof ( buf ) - 1 , ""%ld"" , random_value )"		1000524	0					
ANR	1001113	Callee	snprintf		1000524	0					
ANR	1001114	Identifier	snprintf		1000524	0					
ANR	1001115	ArgumentList	buf		1000524	1					
ANR	1001116	Argument	buf		1000524	0					
ANR	1001117	Identifier	buf		1000524	0					
ANR	1001118	Argument	sizeof ( buf ) - 1		1000524	1					
ANR	1001119	AdditiveExpression	sizeof ( buf ) - 1		1000524	0		-			
ANR	1001120	SizeofExpression	sizeof ( buf )		1000524	0					
ANR	1001121	Sizeof	sizeof		1000524	0					
ANR	1001122	SizeofOperand	buf		1000524	1					
ANR	1001123	PrimaryExpression	1		1000524	1					
ANR	1001124	Argument	"""%ld"""		1000524	2					
ANR	1001125	PrimaryExpression	"""%ld"""		1000524	0					
ANR	1001126	Argument	random_value		1000524	3					
ANR	1001127	Identifier	random_value		1000524	0					
ANR	1001128	ExpressionStatement	buf [ sizeof ( buf ) - 1 ] = '\\0'	725:3:18163:18188	1000524	20	True				
ANR	1001129	AssignmentExpression	buf [ sizeof ( buf ) - 1 ] = '\\0'		1000524	0		=			
ANR	1001130	ArrayIndexing	buf [ sizeof ( buf ) - 1 ]		1000524	0					
ANR	1001131	Identifier	buf		1000524	0					
ANR	1001132	AdditiveExpression	sizeof ( buf ) - 1		1000524	1		-			
ANR	1001133	SizeofExpression	sizeof ( buf )		1000524	0					
ANR	1001134	Sizeof	sizeof		1000524	0					
ANR	1001135	SizeofOperand	buf		1000524	1					
ANR	1001136	PrimaryExpression	1		1000524	1					
ANR	1001137	PrimaryExpression	'\\0'		1000524	1					
ANR	1001138	ExpressionStatement	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 ) )	726:3:18193:18288	1000524	21	True				
ANR	1001139	AssignmentExpression	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 ) )		1000524	0		=			
ANR	1001140	Identifier	rval		1000524	0					
ANR	1001141	CastExpression	( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001142	CastTarget	char *		1000524	0					
ANR	1001143	CallExpression	MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001144	Callee	MALLOC		1000524	0					
ANR	1001145	Identifier	MALLOC		1000524	0					
ANR	1001146	ArgumentList	( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 )		1000524	1					
ANR	1001147	Argument	( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 )		1000524	0					
ANR	1001148	CastExpression	( unsigned ) ( strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1 )		1000524	0					
ANR	1001149	CastTarget	unsigned		1000524	0					
ANR	1001150	AdditiveExpression	strlen ( left ) + strlen ( buf ) + strlen ( right ) + 1		1000524	1		+			
ANR	1001151	CallExpression	strlen ( left )		1000524	0					
ANR	1001152	Callee	strlen		1000524	0					
ANR	1001153	Identifier	strlen		1000524	0					
ANR	1001154	ArgumentList	left		1000524	1					
ANR	1001155	Argument	left		1000524	0					
ANR	1001156	Identifier	left		1000524	0					
ANR	1001157	AdditiveExpression	strlen ( buf ) + strlen ( right ) + 1		1000524	1		+			
ANR	1001158	CallExpression	strlen ( buf )		1000524	0					
ANR	1001159	Callee	strlen		1000524	0					
ANR	1001160	Identifier	strlen		1000524	0					
ANR	1001161	ArgumentList	buf		1000524	1					
ANR	1001162	Argument	buf		1000524	0					
ANR	1001163	Identifier	buf		1000524	0					
ANR	1001164	AdditiveExpression	strlen ( right ) + 1		1000524	1		+			
ANR	1001165	CallExpression	strlen ( right )		1000524	0					
ANR	1001166	Callee	strlen		1000524	0					
ANR	1001167	Identifier	strlen		1000524	0					
ANR	1001168	ArgumentList	right		1000524	1					
ANR	1001169	Argument	right		1000524	0					
ANR	1001170	Identifier	right		1000524	0					
ANR	1001171	PrimaryExpression	1		1000524	1					
ANR	1001172	ExpressionStatement	"( void ) sprintf ( rval , ""%s%s%s"" , left , buf , right )"	728:3:18293:18342	1000524	22	True				
ANR	1001173	CastExpression	"( void ) sprintf ( rval , ""%s%s%s"" , left , buf , right )"		1000524	0					
ANR	1001174	CastTarget	void		1000524	0					
ANR	1001175	CallExpression	"sprintf ( rval , ""%s%s%s"" , left , buf , right )"		1000524	1					
ANR	1001176	Callee	sprintf		1000524	0					
ANR	1001177	Identifier	sprintf		1000524	0					
ANR	1001178	ArgumentList	rval		1000524	1					
ANR	1001179	Argument	rval		1000524	0					
ANR	1001180	Identifier	rval		1000524	0					
ANR	1001181	Argument	"""%s%s%s"""		1000524	1					
ANR	1001182	PrimaryExpression	"""%s%s%s"""		1000524	0					
ANR	1001183	Argument	left		1000524	2					
ANR	1001184	Identifier	left		1000524	0					
ANR	1001185	Argument	buf		1000524	3					
ANR	1001186	Identifier	buf		1000524	0					
ANR	1001187	Argument	right		1000524	4					
ANR	1001188	Identifier	right		1000524	0					
ANR	1001189	ExpressionStatement	FREE ( tmp )	729:3:18347:18358	1000524	23	True				
ANR	1001190	CallExpression	FREE ( tmp )		1000524	0					
ANR	1001191	Callee	FREE		1000524	0					
ANR	1001192	Identifier	FREE		1000524	0					
ANR	1001193	ArgumentList	tmp		1000524	1					
ANR	1001194	Argument	tmp		1000524	0					
ANR	1001195	Identifier	tmp		1000524	0					
ANR	1001196	ExpressionStatement	tmp = rval	730:3:18363:18373	1000524	24	True				
ANR	1001197	AssignmentExpression	tmp = rval		1000524	0		=			
ANR	1001198	Identifier	tmp		1000524	0					
ANR	1001199	Identifier	rval		1000524	1					
ANR	1001200	IfStatement	"if ( find_config_macro ( tmp , & left , & name , & right , self ) )"		1000524	4					
ANR	1001201	Condition	"find_config_macro ( tmp , & left , & name , & right , self )"	733:6:18386:18435	1000524	0	True				
ANR	1001202	CallExpression	"find_config_macro ( tmp , & left , & name , & right , self )"		1000524	0					
ANR	1001203	Callee	find_config_macro		1000524	0					
ANR	1001204	Identifier	find_config_macro		1000524	0					
ANR	1001205	ArgumentList	tmp		1000524	1					
ANR	1001206	Argument	tmp		1000524	0					
ANR	1001207	Identifier	tmp		1000524	0					
ANR	1001208	Argument	& left		1000524	1					
ANR	1001209	UnaryOperationExpression	& left		1000524	0					
ANR	1001210	UnaryOperator	&		1000524	0					
ANR	1001211	Identifier	left		1000524	1					
ANR	1001212	Argument	& name		1000524	2					
ANR	1001213	UnaryOperationExpression	& name		1000524	0					
ANR	1001214	UnaryOperator	&		1000524	0					
ANR	1001215	Identifier	name		1000524	1					
ANR	1001216	Argument	& right		1000524	3					
ANR	1001217	UnaryOperationExpression	& right		1000524	0					
ANR	1001218	UnaryOperator	&		1000524	0					
ANR	1001219	Identifier	right		1000524	1					
ANR	1001220	Argument	self		1000524	4					
ANR	1001221	Identifier	self		1000524	0					
ANR	1001222	CompoundStatement		103:59:2763:2763	1000524	1					
ANR	1001223	ExpressionStatement	all_done = false	734:3:18444:18460	1000524	0	True				
ANR	1001224	AssignmentExpression	all_done = false		1000524	0		=			
ANR	1001225	Identifier	all_done		1000524	0					
ANR	1001226	Identifier	false		1000524	1					
ANR	1001227	ExpressionStatement	"tvalue = lookup_macro ( name , table , table_size )"	735:3:18465:18513	1000524	1	True				
ANR	1001228	AssignmentExpression	"tvalue = lookup_macro ( name , table , table_size )"		1000524	0		=			
ANR	1001229	Identifier	tvalue		1000524	0					
ANR	1001230	CallExpression	"lookup_macro ( name , table , table_size )"		1000524	1					
ANR	1001231	Callee	lookup_macro		1000524	0					
ANR	1001232	Identifier	lookup_macro		1000524	0					
ANR	1001233	ArgumentList	name		1000524	1					
ANR	1001234	Argument	name		1000524	0					
ANR	1001235	Identifier	name		1000524	0					
ANR	1001236	Argument	table		1000524	1					
ANR	1001237	Identifier	table		1000524	0					
ANR	1001238	Argument	table_size		1000524	2					
ANR	1001239	Identifier	table_size		1000524	0					
ANR	1001240	IfStatement	if ( ! self && use_default_param_table && tvalue == NULL )		1000524	2					
ANR	1001241	Condition	! self && use_default_param_table && tvalue == NULL	740:7:18690:18739	1000524	0	True				
ANR	1001242	AndExpression	! self && use_default_param_table && tvalue == NULL		1000524	0		&&			
ANR	1001243	UnaryOperationExpression	! self		1000524	0					
ANR	1001244	UnaryOperator	!		1000524	0					
ANR	1001245	Identifier	self		1000524	1					
ANR	1001246	AndExpression	use_default_param_table && tvalue == NULL		1000524	1		&&			
ANR	1001247	Identifier	use_default_param_table		1000524	0					
ANR	1001248	EqualityExpression	tvalue == NULL		1000524	1		==			
ANR	1001249	Identifier	tvalue		1000524	0					
ANR	1001250	Identifier	NULL		1000524	1					
ANR	1001251	CompoundStatement		110:60:3067:3067	1000524	1					
ANR	1001252	ExpressionStatement	tvalue = param_default_string ( name )	741:4:18749:18784	1000524	0	True				
ANR	1001253	AssignmentExpression	tvalue = param_default_string ( name )		1000524	0		=			
ANR	1001254	Identifier	tvalue		1000524	0					
ANR	1001255	CallExpression	param_default_string ( name )		1000524	1					
ANR	1001256	Callee	param_default_string		1000524	0					
ANR	1001257	Identifier	param_default_string		1000524	0					
ANR	1001258	ArgumentList	name		1000524	1					
ANR	1001259	Argument	name		1000524	0					
ANR	1001260	Identifier	name		1000524	0					
ANR	1001261	IfStatement	if ( tvalue == NULL )		1000524	3					
ANR	1001262	Condition	tvalue == NULL	743:7:18798:18811	1000524	0	True				
ANR	1001263	EqualityExpression	tvalue == NULL		1000524	0		==			
ANR	1001264	Identifier	tvalue		1000524	0					
ANR	1001265	Identifier	NULL		1000524	1					
ANR	1001266	CompoundStatement		113:24:3139:3139	1000524	1					
ANR	1001267	ExpressionStatement	"tvalue = """""	744:4:18821:18832	1000524	0	True				
ANR	1001268	AssignmentExpression	"tvalue = """""		1000524	0		=			
ANR	1001269	Identifier	tvalue		1000524	0					
ANR	1001270	PrimaryExpression	""""""		1000524	1					
ANR	1001271	ExpressionStatement	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )	747:3:18843:18941	1000524	4	True				
ANR	1001272	AssignmentExpression	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	0		=			
ANR	1001273	Identifier	rval		1000524	0					
ANR	1001274	CastExpression	( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001275	CastTarget	char *		1000524	0					
ANR	1001276	CallExpression	MALLOC ( ( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001277	Callee	MALLOC		1000524	0					
ANR	1001278	Identifier	MALLOC		1000524	0					
ANR	1001279	ArgumentList	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	1					
ANR	1001280	Argument	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1001281	CastExpression	( unsigned ) ( strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1 )		1000524	0					
ANR	1001282	CastTarget	unsigned		1000524	0					
ANR	1001283	AdditiveExpression	strlen ( left ) + strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1001284	CallExpression	strlen ( left )		1000524	0					
ANR	1001285	Callee	strlen		1000524	0					
ANR	1001286	Identifier	strlen		1000524	0					
ANR	1001287	ArgumentList	left		1000524	1					
ANR	1001288	Argument	left		1000524	0					
ANR	1001289	Identifier	left		1000524	0					
ANR	1001290	AdditiveExpression	strlen ( tvalue ) + strlen ( right ) + 1		1000524	1		+			
ANR	1001291	CallExpression	strlen ( tvalue )		1000524	0					
ANR	1001292	Callee	strlen		1000524	0					
ANR	1001293	Identifier	strlen		1000524	0					
ANR	1001294	ArgumentList	tvalue		1000524	1					
ANR	1001295	Argument	tvalue		1000524	0					
ANR	1001296	Identifier	tvalue		1000524	0					
ANR	1001297	AdditiveExpression	strlen ( right ) + 1		1000524	1		+			
ANR	1001298	CallExpression	strlen ( right )		1000524	0					
ANR	1001299	Callee	strlen		1000524	0					
ANR	1001300	Identifier	strlen		1000524	0					
ANR	1001301	ArgumentList	right		1000524	1					
ANR	1001302	Argument	right		1000524	0					
ANR	1001303	Identifier	right		1000524	0					
ANR	1001304	PrimaryExpression	1		1000524	1					
ANR	1001305	ExpressionStatement	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"	749:3:18946:18998	1000524	5	True				
ANR	1001306	CastExpression	"( void ) sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	0					
ANR	1001307	CastTarget	void		1000524	0					
ANR	1001308	CallExpression	"sprintf ( rval , ""%s%s%s"" , left , tvalue , right )"		1000524	1					
ANR	1001309	Callee	sprintf		1000524	0					
ANR	1001310	Identifier	sprintf		1000524	0					
ANR	1001311	ArgumentList	rval		1000524	1					
ANR	1001312	Argument	rval		1000524	0					
ANR	1001313	Identifier	rval		1000524	0					
ANR	1001314	Argument	"""%s%s%s"""		1000524	1					
ANR	1001315	PrimaryExpression	"""%s%s%s"""		1000524	0					
ANR	1001316	Argument	left		1000524	2					
ANR	1001317	Identifier	left		1000524	0					
ANR	1001318	Argument	tvalue		1000524	3					
ANR	1001319	Identifier	tvalue		1000524	0					
ANR	1001320	Argument	right		1000524	4					
ANR	1001321	Identifier	right		1000524	0					
ANR	1001322	ExpressionStatement	FREE ( tmp )	750:3:19003:19014	1000524	6	True				
ANR	1001323	CallExpression	FREE ( tmp )		1000524	0					
ANR	1001324	Callee	FREE		1000524	0					
ANR	1001325	Identifier	FREE		1000524	0					
ANR	1001326	ArgumentList	tmp		1000524	1					
ANR	1001327	Argument	tmp		1000524	0					
ANR	1001328	Identifier	tmp		1000524	0					
ANR	1001329	ExpressionStatement	tmp = rval	751:3:19019:19029	1000524	7	True				
ANR	1001330	AssignmentExpression	tmp = rval		1000524	0		=			
ANR	1001331	Identifier	tmp		1000524	0					
ANR	1001332	Identifier	rval		1000524	1					
ANR	1001333	IfStatement	if ( ! self )		1000524	6					
ANR	1001334	Condition	! self	756:5:19092:19096	1000524	0	True				
ANR	1001335	UnaryOperationExpression	! self		1000524	0					
ANR	1001336	UnaryOperator	!		1000524	0					
ANR	1001337	Identifier	self		1000524	1					
ANR	1001338	WhileStatement	"while ( find_config_macro ( tmp , & left , & name , & right , DOLLAR_ID ) )"		1000524	1					
ANR	1001339	Condition	"find_config_macro ( tmp , & left , & name , & right , DOLLAR_ID )"	757:8:19107:19161	1000524	0	True				
ANR	1001340	CallExpression	"find_config_macro ( tmp , & left , & name , & right , DOLLAR_ID )"		1000524	0					
ANR	1001341	Callee	find_config_macro		1000524	0					
ANR	1001342	Identifier	find_config_macro		1000524	0					
ANR	1001343	ArgumentList	tmp		1000524	1					
ANR	1001344	Argument	tmp		1000524	0					
ANR	1001345	Identifier	tmp		1000524	0					
ANR	1001346	Argument	& left		1000524	1					
ANR	1001347	UnaryOperationExpression	& left		1000524	0					
ANR	1001348	UnaryOperator	&		1000524	0					
ANR	1001349	Identifier	left		1000524	1					
ANR	1001350	Argument	& name		1000524	2					
ANR	1001351	UnaryOperationExpression	& name		1000524	0					
ANR	1001352	UnaryOperator	&		1000524	0					
ANR	1001353	Identifier	name		1000524	1					
ANR	1001354	Argument	& right		1000524	3					
ANR	1001355	UnaryOperationExpression	& right		1000524	0					
ANR	1001356	UnaryOperator	&		1000524	0					
ANR	1001357	Identifier	right		1000524	1					
ANR	1001358	Argument	DOLLAR_ID		1000524	4					
ANR	1001359	Identifier	DOLLAR_ID		1000524	0					
ANR	1001360	CompoundStatement		127:66:3489:3489	1000524	1					
ANR	1001361	ExpressionStatement	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 ) )	758:2:19169:19253	1000524	0	True				
ANR	1001362	AssignmentExpression	rval = ( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 ) )		1000524	0		=			
ANR	1001363	Identifier	rval		1000524	0					
ANR	1001364	CastExpression	( char * ) MALLOC ( ( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001365	CastTarget	char *		1000524	0					
ANR	1001366	CallExpression	MALLOC ( ( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 ) )		1000524	1					
ANR	1001367	Callee	MALLOC		1000524	0					
ANR	1001368	Identifier	MALLOC		1000524	0					
ANR	1001369	ArgumentList	( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 )		1000524	1					
ANR	1001370	Argument	( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 )		1000524	0					
ANR	1001371	CastExpression	( unsigned ) ( strlen ( left ) + 1 + strlen ( right ) + 1 )		1000524	0					
ANR	1001372	CastTarget	unsigned		1000524	0					
ANR	1001373	AdditiveExpression	strlen ( left ) + 1 + strlen ( right ) + 1		1000524	1		+			
ANR	1001374	CallExpression	strlen ( left )		1000524	0					
ANR	1001375	Callee	strlen		1000524	0					
ANR	1001376	Identifier	strlen		1000524	0					
ANR	1001377	ArgumentList	left		1000524	1					
ANR	1001378	Argument	left		1000524	0					
ANR	1001379	Identifier	left		1000524	0					
ANR	1001380	AdditiveExpression	1 + strlen ( right ) + 1		1000524	1		+			
ANR	1001381	PrimaryExpression	1		1000524	0					
ANR	1001382	AdditiveExpression	strlen ( right ) + 1		1000524	1		+			
ANR	1001383	CallExpression	strlen ( right )		1000524	0					
ANR	1001384	Callee	strlen		1000524	0					
ANR	1001385	Identifier	strlen		1000524	0					
ANR	1001386	ArgumentList	right		1000524	1					
ANR	1001387	Argument	right		1000524	0					
ANR	1001388	Identifier	right		1000524	0					
ANR	1001389	PrimaryExpression	1		1000524	1					
ANR	1001390	ExpressionStatement	"( void ) sprintf ( rval , ""%s$%s"" , left , right )"	760:2:19257:19300	1000524	1	True				
ANR	1001391	CastExpression	"( void ) sprintf ( rval , ""%s$%s"" , left , right )"		1000524	0					
ANR	1001392	CastTarget	void		1000524	0					
ANR	1001393	CallExpression	"sprintf ( rval , ""%s$%s"" , left , right )"		1000524	1					
ANR	1001394	Callee	sprintf		1000524	0					
ANR	1001395	Identifier	sprintf		1000524	0					
ANR	1001396	ArgumentList	rval		1000524	1					
ANR	1001397	Argument	rval		1000524	0					
ANR	1001398	Identifier	rval		1000524	0					
ANR	1001399	Argument	"""%s$%s"""		1000524	1					
ANR	1001400	PrimaryExpression	"""%s$%s"""		1000524	0					
ANR	1001401	Argument	left		1000524	2					
ANR	1001402	Identifier	left		1000524	0					
ANR	1001403	Argument	right		1000524	3					
ANR	1001404	Identifier	right		1000524	0					
ANR	1001405	ExpressionStatement	FREE ( tmp )	761:2:19304:19315	1000524	2	True				
ANR	1001406	CallExpression	FREE ( tmp )		1000524	0					
ANR	1001407	Callee	FREE		1000524	0					
ANR	1001408	Identifier	FREE		1000524	0					
ANR	1001409	ArgumentList	tmp		1000524	1					
ANR	1001410	Argument	tmp		1000524	0					
ANR	1001411	Identifier	tmp		1000524	0					
ANR	1001412	ExpressionStatement	tmp = rval	762:2:19319:19329	1000524	3	True				
ANR	1001413	AssignmentExpression	tmp = rval		1000524	0		=			
ANR	1001414	Identifier	tmp		1000524	0					
ANR	1001415	Identifier	rval		1000524	1					
ANR	1001416	ReturnStatement	return ( tmp ) ;	765:1:19336:19349	1000524	7	True				
ANR	1001417	Identifier	tmp		1000524	0					
ANR	1001418	ReturnType	char *		1000524	1					
ANR	1001419	Identifier	expand_macro		1000524	2					
ANR	1001420	ParameterList	"const char * value , BUCKET * * table , int table_size , char * self , bool use_default_param_table"		1000524	3					
ANR	1001421	Parameter	const char * value	626:14:15561:15577	1000524	0	True				
ANR	1001422	ParameterType	const char *		1000524	0					
ANR	1001423	Identifier	value		1000524	1					
ANR	1001424	Parameter	BUCKET * * table	627:5:15585:15598	1000524	1	True				
ANR	1001425	ParameterType	BUCKET * *		1000524	0					
ANR	1001426	Identifier	table		1000524	1					
ANR	1001427	Parameter	int table_size	628:5:15606:15619	1000524	2	True				
ANR	1001428	ParameterType	int		1000524	0					
ANR	1001429	Identifier	table_size		1000524	1					
ANR	1001430	Parameter	char * self	629:5:15627:15636	1000524	3	True				
ANR	1001431	ParameterType	char *		1000524	0					
ANR	1001432	Identifier	self		1000524	1					
ANR	1001433	Parameter	bool use_default_param_table	630:5:15644:15671	1000524	4	True				
ANR	1001434	ParameterType	bool		1000524	0					
ANR	1001435	Identifier	use_default_param_table		1000524	1					
ANR	1001436	CFGEntryNode	ENTRY		1000524		True				
ANR	1001437	CFGExitNode	EXIT		1000524		True				
ANR	1001438	Symbol	table_size		1000524						
ANR	1001439	Symbol	num		1000524						
ANR	1001440	Symbol	all_done		1000524						
ANR	1001441	Symbol	get_random_int		1000524						
ANR	1001442	Symbol	range		1000524						
ANR	1001443	Symbol	random_value		1000524						
ANR	1001444	Symbol	& name		1000524						
ANR	1001445	Symbol	& left		1000524						
ANR	1001446	Symbol	tmp2		1000524						
ANR	1001447	Symbol	DOLLAR_ID		1000524						
ANR	1001448	Symbol	strlen		1000524						
ANR	1001449	Symbol	entries . next		1000524						
ANR	1001450	Symbol	tmp		1000524						
ANR	1001451	Symbol	find_special_config_macro		1000524						
ANR	1001452	Symbol	& max_value		1000524						
ANR	1001453	Symbol	& step		1000524						
ANR	1001454	Symbol	find_config_macro		1000524						
ANR	1001455	Symbol	rval		1000524						
ANR	1001456	Symbol	use_default_param_table		1000524						
ANR	1001457	Symbol	value		1000524						
ANR	1001458	Symbol	& right		1000524						
ANR	1001459	Symbol	table		1000524						
ANR	1001460	Symbol	getenv		1000524						
ANR	1001461	Symbol	& min_value		1000524						
ANR	1001462	Symbol	* buf		1000524						
ANR	1001463	Symbol	tvalue		1000524						
ANR	1001464	Symbol	NULL		1000524						
ANR	1001465	Symbol	false		1000524						
ANR	1001466	Symbol	string_to_long		1000524						
ANR	1001467	Symbol	i		1000524						
ANR	1001468	Symbol	rand_entry		1000524						
ANR	1001469	Symbol	right		1000524						
ANR	1001470	Symbol	entries . number		1000524						
ANR	1001471	Symbol	min_value		1000524						
ANR	1001472	Symbol	entries		1000524						
ANR	1001473	Symbol	buf		1000524						
ANR	1001474	Symbol	MALLOC		1000524						
ANR	1001475	Symbol	left		1000524						
ANR	1001476	Symbol	name		1000524						
ANR	1001477	Symbol	true		1000524						
ANR	1001478	Symbol	param_default_string		1000524						
ANR	1001479	Symbol	self		1000524						
ANR	1001480	Symbol	step		1000524						
ANR	1001481	Symbol	strdup		1000524						
ANR	1001482	Symbol	lookup_macro		1000524						
ANR	1001483	Symbol	num_entries		1000524						
ANR	1001484	Symbol	max_value		1000524						
ANR	1001485	Function	hash_iter_scoot_to_next_bucket	773:0:19613:19832							
ANR	1001486	FunctionDef	hash_iter_scoot_to_next_bucket (HASHITER p)		1001485	0					
ANR	1001487	CompoundStatement		775:0:19668:19832	1001485	0					
ANR	1001488	WhileStatement	while ( p -> current == NULL )		1001485	0					
ANR	1001489	Condition	p -> current == NULL	776:7:19677:19694	1001485	0	True				
ANR	1001490	EqualityExpression	p -> current == NULL		1001485	0		==			
ANR	1001491	PtrMemberAccess	p -> current		1001485	0					
ANR	1001492	Identifier	p		1001485	0					
ANR	1001493	Identifier	current		1001485	1					
ANR	1001494	Identifier	NULL		1001485	1					
ANR	1001495	CompoundStatement		2:27:28:28	1001485	1					
ANR	1001496	ExpressionStatement	( p -> index ) ++	777:2:19701:19713	1001485	0	True				
ANR	1001497	PostIncDecOperationExpression	( p -> index ) ++		1001485	0					
ANR	1001498	PtrMemberAccess	p -> index		1001485	0					
ANR	1001499	Identifier	p		1001485	0					
ANR	1001500	Identifier	index		1001485	1					
ANR	1001501	IncDec	++		1001485	1					
ANR	1001502	IfStatement	if ( p -> index >= p -> table_size )		1001485	1					
ANR	1001503	Condition	p -> index >= p -> table_size	778:5:19720:19744	1001485	0	True				
ANR	1001504	RelationalExpression	p -> index >= p -> table_size		1001485	0		>=			
ANR	1001505	PtrMemberAccess	p -> index		1001485	0					
ANR	1001506	Identifier	p		1001485	0					
ANR	1001507	Identifier	index		1001485	1					
ANR	1001508	PtrMemberAccess	p -> table_size		1001485	1					
ANR	1001509	Identifier	p		1001485	0					
ANR	1001510	Identifier	table_size		1001485	1					
ANR	1001511	CompoundStatement		4:32:78:78	1001485	1					
ANR	1001512	ReturnStatement	return ;	780:3:19782:19788	1001485	0	True				
ANR	1001513	ExpressionStatement	p -> current = p -> table [ p -> index ]	782:2:19796:19827	1001485	2	True				
ANR	1001514	AssignmentExpression	p -> current = p -> table [ p -> index ]		1001485	0		=			
ANR	1001515	PtrMemberAccess	p -> current		1001485	0					
ANR	1001516	Identifier	p		1001485	0					
ANR	1001517	Identifier	current		1001485	1					
ANR	1001518	ArrayIndexing	p -> table [ p -> index ]		1001485	1					
ANR	1001519	PtrMemberAccess	p -> table		1001485	0					
ANR	1001520	Identifier	p		1001485	0					
ANR	1001521	Identifier	table		1001485	1					
ANR	1001522	PtrMemberAccess	p -> index		1001485	1					
ANR	1001523	Identifier	p		1001485	0					
ANR	1001524	Identifier	index		1001485	1					
ANR	1001525	ReturnType	static void		1001485	1					
ANR	1001526	Identifier	hash_iter_scoot_to_next_bucket		1001485	2					
ANR	1001527	ParameterList	HASHITER p		1001485	3					
ANR	1001528	Parameter	HASHITER p	774:31:19656:19665	1001485	0	True				
ANR	1001529	ParameterType	HASHITER		1001485	0					
ANR	1001530	Identifier	p		1001485	1					
ANR	1001531	CFGEntryNode	ENTRY		1001485		True				
ANR	1001532	CFGExitNode	EXIT		1001485		True				
ANR	1001533	Symbol	p		1001485						
ANR	1001534	Symbol	p -> current		1001485						
ANR	1001535	Symbol	* p -> index		1001485						
ANR	1001536	Symbol	NULL		1001485						
ANR	1001537	Symbol	* p -> table		1001485						
ANR	1001538	Symbol	* p		1001485						
ANR	1001539	Symbol	* * p		1001485						
ANR	1001540	Symbol	p -> table_size		1001485						
ANR	1001541	Symbol	p -> table		1001485						
ANR	1001542	Symbol	p -> index		1001485						
ANR	1001543	Function	hash_iter_begin	786:0:19835:20146							
ANR	1001544	FunctionDef	"hash_iter_begin (BUCKET * * table , int table_size)"		1001543	0					
ANR	1001545	CompoundStatement		788:0:19894:20146	1001543	0					
ANR	1001546	ExpressionStatement	ASSERT ( table != NULL )	789:1:19897:19918	1001543	0	True				
ANR	1001547	CallExpression	ASSERT ( table != NULL )		1001543	0					
ANR	1001548	Callee	ASSERT		1001543	0					
ANR	1001549	Identifier	ASSERT		1001543	0					
ANR	1001550	ArgumentList	table != NULL		1001543	1					
ANR	1001551	Argument	table != NULL		1001543	0					
ANR	1001552	EqualityExpression	table != NULL		1001543	0		!=			
ANR	1001553	Identifier	table		1001543	0					
ANR	1001554	Identifier	NULL		1001543	1					
ANR	1001555	ExpressionStatement	ASSERT ( table_size > 0 )	790:1:19921:19943	1001543	1	True				
ANR	1001556	CallExpression	ASSERT ( table_size > 0 )		1001543	0					
ANR	1001557	Callee	ASSERT		1001543	0					
ANR	1001558	Identifier	ASSERT		1001543	0					
ANR	1001559	ArgumentList	table_size > 0		1001543	1					
ANR	1001560	Argument	table_size > 0		1001543	0					
ANR	1001561	RelationalExpression	table_size > 0		1001543	0		>			
ANR	1001562	Identifier	table_size		1001543	0					
ANR	1001563	PrimaryExpression	0		1001543	1					
ANR	1001564	IdentifierDeclStatement	hash_iter * p = ( hash_iter * ) MALLOC ( sizeof ( hash_iter ) ) ;	791:1:19946:20000	1001543	2	True				
ANR	1001565	IdentifierDecl	* p = ( hash_iter * ) MALLOC ( sizeof ( hash_iter ) )		1001543	0					
ANR	1001566	IdentifierDeclType	hash_iter *		1001543	0					
ANR	1001567	Identifier	p		1001543	1					
ANR	1001568	AssignmentExpression	* p = ( hash_iter * ) MALLOC ( sizeof ( hash_iter ) )		1001543	2		=			
ANR	1001569	Identifier	p		1001543	0					
ANR	1001570	CastExpression	( hash_iter * ) MALLOC ( sizeof ( hash_iter ) )		1001543	1					
ANR	1001571	CastTarget	hash_iter *		1001543	0					
ANR	1001572	CallExpression	MALLOC ( sizeof ( hash_iter ) )		1001543	1					
ANR	1001573	Callee	MALLOC		1001543	0					
ANR	1001574	Identifier	MALLOC		1001543	0					
ANR	1001575	ArgumentList	sizeof ( hash_iter )		1001543	1					
ANR	1001576	Argument	sizeof ( hash_iter )		1001543	0					
ANR	1001577	SizeofExpression	sizeof ( hash_iter )		1001543	0					
ANR	1001578	Sizeof	sizeof		1001543	0					
ANR	1001579	SizeofOperand	hash_iter		1001543	1					
ANR	1001580	ExpressionStatement	p -> table = table	792:1:20003:20019	1001543	3	True				
ANR	1001581	AssignmentExpression	p -> table = table		1001543	0		=			
ANR	1001582	PtrMemberAccess	p -> table		1001543	0					
ANR	1001583	Identifier	p		1001543	0					
ANR	1001584	Identifier	table		1001543	1					
ANR	1001585	Identifier	table		1001543	1					
ANR	1001586	ExpressionStatement	p -> table_size = table_size	793:1:20022:20048	1001543	4	True				
ANR	1001587	AssignmentExpression	p -> table_size = table_size		1001543	0		=			
ANR	1001588	PtrMemberAccess	p -> table_size		1001543	0					
ANR	1001589	Identifier	p		1001543	0					
ANR	1001590	Identifier	table_size		1001543	1					
ANR	1001591	Identifier	table_size		1001543	1					
ANR	1001592	ExpressionStatement	p -> index = 0	794:1:20051:20063	1001543	5	True				
ANR	1001593	AssignmentExpression	p -> index = 0		1001543	0		=			
ANR	1001594	PtrMemberAccess	p -> index		1001543	0					
ANR	1001595	Identifier	p		1001543	0					
ANR	1001596	Identifier	index		1001543	1					
ANR	1001597	PrimaryExpression	0		1001543	1					
ANR	1001598	ExpressionStatement	p -> current = p -> table [ p -> index ]	795:1:20066:20097	1001543	6	True				
ANR	1001599	AssignmentExpression	p -> current = p -> table [ p -> index ]		1001543	0		=			
ANR	1001600	PtrMemberAccess	p -> current		1001543	0					
ANR	1001601	Identifier	p		1001543	0					
ANR	1001602	Identifier	current		1001543	1					
ANR	1001603	ArrayIndexing	p -> table [ p -> index ]		1001543	1					
ANR	1001604	PtrMemberAccess	p -> table		1001543	0					
ANR	1001605	Identifier	p		1001543	0					
ANR	1001606	Identifier	table		1001543	1					
ANR	1001607	PtrMemberAccess	p -> index		1001543	1					
ANR	1001608	Identifier	p		1001543	0					
ANR	1001609	Identifier	index		1001543	1					
ANR	1001610	ExpressionStatement	hash_iter_scoot_to_next_bucket ( p )	796:1:20100:20133	1001543	7	True				
ANR	1001611	CallExpression	hash_iter_scoot_to_next_bucket ( p )		1001543	0					
ANR	1001612	Callee	hash_iter_scoot_to_next_bucket		1001543	0					
ANR	1001613	Identifier	hash_iter_scoot_to_next_bucket		1001543	0					
ANR	1001614	ArgumentList	p		1001543	1					
ANR	1001615	Argument	p		1001543	0					
ANR	1001616	Identifier	p		1001543	0					
ANR	1001617	ReturnStatement	return p ;	797:1:20136:20144	1001543	8	True				
ANR	1001618	Identifier	p		1001543	0					
ANR	1001619	ReturnType	HASHITER		1001543	1					
ANR	1001620	Identifier	hash_iter_begin		1001543	2					
ANR	1001621	ParameterList	"BUCKET * * table , int table_size"		1001543	3					
ANR	1001622	Parameter	BUCKET * * table	787:16:19861:19875	1001543	0	True				
ANR	1001623	ParameterType	BUCKET * *		1001543	0					
ANR	1001624	Identifier	table		1001543	1					
ANR	1001625	Parameter	int table_size	787:33:19878:19891	1001543	1	True				
ANR	1001626	ParameterType	int		1001543	0					
ANR	1001627	Identifier	table_size		1001543	1					
ANR	1001628	CFGEntryNode	ENTRY		1001543		True				
ANR	1001629	CFGExitNode	EXIT		1001543		True				
ANR	1001630	Symbol	table_size		1001543						
ANR	1001631	Symbol	p -> current		1001543						
ANR	1001632	Symbol	NULL		1001543						
ANR	1001633	Symbol	* p -> table		1001543						
ANR	1001634	Symbol	p -> index		1001543						
ANR	1001635	Symbol	p		1001543						
ANR	1001636	Symbol	* p -> index		1001543						
ANR	1001637	Symbol	MALLOC		1001543						
ANR	1001638	Symbol	* p		1001543						
ANR	1001639	Symbol	* * p		1001543						
ANR	1001640	Symbol	table		1001543						
ANR	1001641	Symbol	p -> table		1001543						
ANR	1001642	Symbol	p -> table_size		1001543						
ANR	1001643	Function	hash_iter_done	800:0:20149:20314							
ANR	1001644	FunctionDef	hash_iter_done (HASHITER iter)		1001643	0					
ANR	1001645	CompoundStatement		802:0:20183:20314	1001643	0					
ANR	1001646	ExpressionStatement	ASSERT ( iter )	803:1:20186:20198	1001643	0	True				
ANR	1001647	CallExpression	ASSERT ( iter )		1001643	0					
ANR	1001648	Callee	ASSERT		1001643	0					
ANR	1001649	Identifier	ASSERT		1001643	0					
ANR	1001650	ArgumentList	iter		1001643	1					
ANR	1001651	Argument	iter		1001643	0					
ANR	1001652	Identifier	iter		1001643	0					
ANR	1001653	ExpressionStatement	ASSERT ( iter -> table )	804:1:20201:20220	1001643	1	True				
ANR	1001654	CallExpression	ASSERT ( iter -> table )		1001643	0					
ANR	1001655	Callee	ASSERT		1001643	0					
ANR	1001656	Identifier	ASSERT		1001643	0					
ANR	1001657	ArgumentList	iter -> table		1001643	1					
ANR	1001658	Argument	iter -> table		1001643	0					
ANR	1001659	PtrMemberAccess	iter -> table		1001643	0					
ANR	1001660	Identifier	iter		1001643	0					
ANR	1001661	Identifier	table		1001643	1					
ANR	1001662	ReturnStatement	return iter -> current == NULL ;	805:1:20284:20312	1001643	2	True				
ANR	1001663	EqualityExpression	iter -> current == NULL		1001643	0		==			
ANR	1001664	PtrMemberAccess	iter -> current		1001643	0					
ANR	1001665	Identifier	iter		1001643	0					
ANR	1001666	Identifier	current		1001643	1					
ANR	1001667	Identifier	NULL		1001643	1					
ANR	1001668	ReturnType	int		1001643	1					
ANR	1001669	Identifier	hash_iter_done		1001643	2					
ANR	1001670	ParameterList	HASHITER iter		1001643	3					
ANR	1001671	Parameter	HASHITER iter	801:15:20168:20180	1001643	0	True				
ANR	1001672	ParameterType	HASHITER		1001643	0					
ANR	1001673	Identifier	iter		1001643	1					
ANR	1001674	CFGEntryNode	ENTRY		1001643		True				
ANR	1001675	CFGExitNode	EXIT		1001643		True				
ANR	1001676	Symbol	* iter		1001643						
ANR	1001677	Symbol	NULL		1001643						
ANR	1001678	Symbol	iter		1001643						
ANR	1001679	Symbol	iter -> table		1001643						
ANR	1001680	Symbol	iter -> current		1001643						
ANR	1001681	Function	hash_iter_next	808:0:20317:20605							
ANR	1001682	FunctionDef	hash_iter_next (HASHITER iter)		1001681	0					
ANR	1001683	CompoundStatement		810:0:20352:20605	1001681	0					
ANR	1001684	ExpressionStatement	ASSERT ( iter )	811:1:20355:20367	1001681	0	True				
ANR	1001685	CallExpression	ASSERT ( iter )		1001681	0					
ANR	1001686	Callee	ASSERT		1001681	0					
ANR	1001687	Identifier	ASSERT		1001681	0					
ANR	1001688	ArgumentList	iter		1001681	1					
ANR	1001689	Argument	iter		1001681	0					
ANR	1001690	Identifier	iter		1001681	0					
ANR	1001691	ExpressionStatement	ASSERT ( iter -> table )	812:1:20370:20389	1001681	1	True				
ANR	1001692	CallExpression	ASSERT ( iter -> table )		1001681	0					
ANR	1001693	Callee	ASSERT		1001681	0					
ANR	1001694	Identifier	ASSERT		1001681	0					
ANR	1001695	ArgumentList	iter -> table		1001681	1					
ANR	1001696	Argument	iter -> table		1001681	0					
ANR	1001697	PtrMemberAccess	iter -> table		1001681	0					
ANR	1001698	Identifier	iter		1001681	0					
ANR	1001699	Identifier	table		1001681	1					
ANR	1001700	IfStatement	if ( hash_iter_done ( iter ) )		1001681	2					
ANR	1001701	Condition	hash_iter_done ( iter )	813:4:20456:20475	1001681	0	True				
ANR	1001702	CallExpression	hash_iter_done ( iter )		1001681	0					
ANR	1001703	Callee	hash_iter_done		1001681	0					
ANR	1001704	Identifier	hash_iter_done		1001681	0					
ANR	1001705	ArgumentList	iter		1001681	1					
ANR	1001706	Argument	iter		1001681	0					
ANR	1001707	Identifier	iter		1001681	0					
ANR	1001708	CompoundStatement		4:26:125:125	1001681	1					
ANR	1001709	ReturnStatement	return 0 ;	814:2:20482:20490	1001681	0	True				
ANR	1001710	PrimaryExpression	0		1001681	0					
ANR	1001711	ExpressionStatement	iter -> current = iter -> current -> next	816:1:20496:20531	1001681	3	True				
ANR	1001712	AssignmentExpression	iter -> current = iter -> current -> next		1001681	0		=			
ANR	1001713	PtrMemberAccess	iter -> current		1001681	0					
ANR	1001714	Identifier	iter		1001681	0					
ANR	1001715	Identifier	current		1001681	1					
ANR	1001716	PtrMemberAccess	iter -> current -> next		1001681	1					
ANR	1001717	PtrMemberAccess	iter -> current		1001681	0					
ANR	1001718	Identifier	iter		1001681	0					
ANR	1001719	Identifier	current		1001681	1					
ANR	1001720	Identifier	next		1001681	1					
ANR	1001721	ExpressionStatement	hash_iter_scoot_to_next_bucket ( iter )	817:1:20534:20570	1001681	4	True				
ANR	1001722	CallExpression	hash_iter_scoot_to_next_bucket ( iter )		1001681	0					
ANR	1001723	Callee	hash_iter_scoot_to_next_bucket		1001681	0					
ANR	1001724	Identifier	hash_iter_scoot_to_next_bucket		1001681	0					
ANR	1001725	ArgumentList	iter		1001681	1					
ANR	1001726	Argument	iter		1001681	0					
ANR	1001727	Identifier	iter		1001681	0					
ANR	1001728	ReturnStatement	return ( iter -> current ) ? 1 : 0 ;	818:1:20573:20603	1001681	5	True				
ANR	1001729	ConditionalExpression	( iter -> current ) ? 1 : 0		1001681	0					
ANR	1001730	Condition	iter -> current		1001681	0					
ANR	1001731	PtrMemberAccess	iter -> current		1001681	0					
ANR	1001732	Identifier	iter		1001681	0					
ANR	1001733	Identifier	current		1001681	1					
ANR	1001734	PrimaryExpression	1		1001681	1					
ANR	1001735	PrimaryExpression	0		1001681	2					
ANR	1001736	ReturnType	int		1001681	1					
ANR	1001737	Identifier	hash_iter_next		1001681	2					
ANR	1001738	ParameterList	HASHITER iter		1001681	3					
ANR	1001739	Parameter	HASHITER iter	809:15:20337:20349	1001681	0	True				
ANR	1001740	ParameterType	HASHITER		1001681	0					
ANR	1001741	Identifier	iter		1001681	1					
ANR	1001742	CFGEntryNode	ENTRY		1001681		True				
ANR	1001743	CFGExitNode	EXIT		1001681		True				
ANR	1001744	Symbol	* iter		1001681						
ANR	1001745	Symbol	* iter -> current		1001681						
ANR	1001746	Symbol	iter -> current -> next		1001681						
ANR	1001747	Symbol	iter		1001681						
ANR	1001748	Symbol	iter -> table		1001681						
ANR	1001749	Symbol	* * iter		1001681						
ANR	1001750	Symbol	iter -> current		1001681						
ANR	1001751	Symbol	hash_iter_done		1001681						
ANR	1001752	Function	hash_iter_key	821:0:20608:20809							
ANR	1001753	FunctionDef	hash_iter_key (HASHITER iter)		1001752	0					
ANR	1001754	CompoundStatement		823:0:20645:20809	1001752	0					
ANR	1001755	ExpressionStatement	ASSERT ( iter )	824:1:20648:20660	1001752	0	True				
ANR	1001756	CallExpression	ASSERT ( iter )		1001752	0					
ANR	1001757	Callee	ASSERT		1001752	0					
ANR	1001758	Identifier	ASSERT		1001752	0					
ANR	1001759	ArgumentList	iter		1001752	1					
ANR	1001760	Argument	iter		1001752	0					
ANR	1001761	Identifier	iter		1001752	0					
ANR	1001762	ExpressionStatement	ASSERT ( iter -> table )	825:1:20663:20682	1001752	1	True				
ANR	1001763	CallExpression	ASSERT ( iter -> table )		1001752	0					
ANR	1001764	Callee	ASSERT		1001752	0					
ANR	1001765	Identifier	ASSERT		1001752	0					
ANR	1001766	ArgumentList	iter -> table		1001752	1					
ANR	1001767	Argument	iter -> table		1001752	0					
ANR	1001768	PtrMemberAccess	iter -> table		1001752	0					
ANR	1001769	Identifier	iter		1001752	0					
ANR	1001770	Identifier	table		1001752	1					
ANR	1001771	ExpressionStatement	ASSERT ( ! hash_iter_done ( iter ) )	826:1:20746:20778	1001752	2	True				
ANR	1001772	CallExpression	ASSERT ( ! hash_iter_done ( iter ) )		1001752	0					
ANR	1001773	Callee	ASSERT		1001752	0					
ANR	1001774	Identifier	ASSERT		1001752	0					
ANR	1001775	ArgumentList	! hash_iter_done ( iter )		1001752	1					
ANR	1001776	Argument	! hash_iter_done ( iter )		1001752	0					
ANR	1001777	UnaryOperationExpression	! hash_iter_done ( iter )		1001752	0					
ANR	1001778	UnaryOperator	!		1001752	0					
ANR	1001779	CallExpression	hash_iter_done ( iter )		1001752	1					
ANR	1001780	Callee	hash_iter_done		1001752	0					
ANR	1001781	Identifier	hash_iter_done		1001752	0					
ANR	1001782	ArgumentList	iter		1001752	1					
ANR	1001783	Argument	iter		1001752	0					
ANR	1001784	Identifier	iter		1001752	0					
ANR	1001785	ReturnStatement	return iter -> current -> name ;	827:1:20781:20807	1001752	3	True				
ANR	1001786	PtrMemberAccess	iter -> current -> name		1001752	0					
ANR	1001787	PtrMemberAccess	iter -> current		1001752	0					
ANR	1001788	Identifier	iter		1001752	0					
ANR	1001789	Identifier	current		1001752	1					
ANR	1001790	Identifier	name		1001752	1					
ANR	1001791	ReturnType	char *		1001752	1					
ANR	1001792	Identifier	hash_iter_key		1001752	2					
ANR	1001793	ParameterList	HASHITER iter		1001752	3					
ANR	1001794	Parameter	HASHITER iter	822:14:20630:20642	1001752	0	True				
ANR	1001795	ParameterType	HASHITER		1001752	0					
ANR	1001796	Identifier	iter		1001752	1					
ANR	1001797	CFGEntryNode	ENTRY		1001752		True				
ANR	1001798	CFGExitNode	EXIT		1001752		True				
ANR	1001799	Symbol	* iter		1001752						
ANR	1001800	Symbol	* iter -> current		1001752						
ANR	1001801	Symbol	iter		1001752						
ANR	1001802	Symbol	iter -> table		1001752						
ANR	1001803	Symbol	* * iter		1001752						
ANR	1001804	Symbol	iter -> current		1001752						
ANR	1001805	Symbol	hash_iter_done		1001752						
ANR	1001806	Symbol	iter -> current -> name		1001752						
ANR	1001807	Function	hash_iter_value	830:0:20812:21016							
ANR	1001808	FunctionDef	hash_iter_value (HASHITER iter)		1001807	0					
ANR	1001809	CompoundStatement		832:0:20851:21016	1001807	0					
ANR	1001810	ExpressionStatement	ASSERT ( iter )	833:1:20854:20866	1001807	0	True				
ANR	1001811	CallExpression	ASSERT ( iter )		1001807	0					
ANR	1001812	Callee	ASSERT		1001807	0					
ANR	1001813	Identifier	ASSERT		1001807	0					
ANR	1001814	ArgumentList	iter		1001807	1					
ANR	1001815	Argument	iter		1001807	0					
ANR	1001816	Identifier	iter		1001807	0					
ANR	1001817	ExpressionStatement	ASSERT ( iter -> table )	834:1:20869:20888	1001807	1	True				
ANR	1001818	CallExpression	ASSERT ( iter -> table )		1001807	0					
ANR	1001819	Callee	ASSERT		1001807	0					
ANR	1001820	Identifier	ASSERT		1001807	0					
ANR	1001821	ArgumentList	iter -> table		1001807	1					
ANR	1001822	Argument	iter -> table		1001807	0					
ANR	1001823	PtrMemberAccess	iter -> table		1001807	0					
ANR	1001824	Identifier	iter		1001807	0					
ANR	1001825	Identifier	table		1001807	1					
ANR	1001826	ExpressionStatement	ASSERT ( ! hash_iter_done ( iter ) )	835:1:20952:20984	1001807	2	True				
ANR	1001827	CallExpression	ASSERT ( ! hash_iter_done ( iter ) )		1001807	0					
ANR	1001828	Callee	ASSERT		1001807	0					
ANR	1001829	Identifier	ASSERT		1001807	0					
ANR	1001830	ArgumentList	! hash_iter_done ( iter )		1001807	1					
ANR	1001831	Argument	! hash_iter_done ( iter )		1001807	0					
ANR	1001832	UnaryOperationExpression	! hash_iter_done ( iter )		1001807	0					
ANR	1001833	UnaryOperator	!		1001807	0					
ANR	1001834	CallExpression	hash_iter_done ( iter )		1001807	1					
ANR	1001835	Callee	hash_iter_done		1001807	0					
ANR	1001836	Identifier	hash_iter_done		1001807	0					
ANR	1001837	ArgumentList	iter		1001807	1					
ANR	1001838	Argument	iter		1001807	0					
ANR	1001839	Identifier	iter		1001807	0					
ANR	1001840	ReturnStatement	return iter -> current -> value ;	836:1:20987:21014	1001807	3	True				
ANR	1001841	PtrMemberAccess	iter -> current -> value		1001807	0					
ANR	1001842	PtrMemberAccess	iter -> current		1001807	0					
ANR	1001843	Identifier	iter		1001807	0					
ANR	1001844	Identifier	current		1001807	1					
ANR	1001845	Identifier	value		1001807	1					
ANR	1001846	ReturnType	char *		1001807	1					
ANR	1001847	Identifier	hash_iter_value		1001807	2					
ANR	1001848	ParameterList	HASHITER iter		1001807	3					
ANR	1001849	Parameter	HASHITER iter	831:16:20836:20848	1001807	0	True				
ANR	1001850	ParameterType	HASHITER		1001807	0					
ANR	1001851	Identifier	iter		1001807	1					
ANR	1001852	CFGEntryNode	ENTRY		1001807		True				
ANR	1001853	CFGExitNode	EXIT		1001807		True				
ANR	1001854	Symbol	* iter		1001807						
ANR	1001855	Symbol	* iter -> current		1001807						
ANR	1001856	Symbol	iter -> current -> value		1001807						
ANR	1001857	Symbol	iter		1001807						
ANR	1001858	Symbol	iter -> table		1001807						
ANR	1001859	Symbol	* * iter		1001807						
ANR	1001860	Symbol	iter -> current		1001807						
ANR	1001861	Symbol	hash_iter_done		1001807						
ANR	1001862	Function	hash_iter_used_value	839:0:21019:21223							
ANR	1001863	FunctionDef	hash_iter_used_value (HASHITER iter)		1001862	0					
ANR	1001864	CompoundStatement		841:0:21059:21223	1001862	0					
ANR	1001865	ExpressionStatement	ASSERT ( iter )	842:1:21062:21074	1001862	0	True				
ANR	1001866	CallExpression	ASSERT ( iter )		1001862	0					
ANR	1001867	Callee	ASSERT		1001862	0					
ANR	1001868	Identifier	ASSERT		1001862	0					
ANR	1001869	ArgumentList	iter		1001862	1					
ANR	1001870	Argument	iter		1001862	0					
ANR	1001871	Identifier	iter		1001862	0					
ANR	1001872	ExpressionStatement	ASSERT ( iter -> table )	843:1:21077:21096	1001862	1	True				
ANR	1001873	CallExpression	ASSERT ( iter -> table )		1001862	0					
ANR	1001874	Callee	ASSERT		1001862	0					
ANR	1001875	Identifier	ASSERT		1001862	0					
ANR	1001876	ArgumentList	iter -> table		1001862	1					
ANR	1001877	Argument	iter -> table		1001862	0					
ANR	1001878	PtrMemberAccess	iter -> table		1001862	0					
ANR	1001879	Identifier	iter		1001862	0					
ANR	1001880	Identifier	table		1001862	1					
ANR	1001881	ExpressionStatement	ASSERT ( ! hash_iter_done ( iter ) )	844:1:21160:21192	1001862	2	True				
ANR	1001882	CallExpression	ASSERT ( ! hash_iter_done ( iter ) )		1001862	0					
ANR	1001883	Callee	ASSERT		1001862	0					
ANR	1001884	Identifier	ASSERT		1001862	0					
ANR	1001885	ArgumentList	! hash_iter_done ( iter )		1001862	1					
ANR	1001886	Argument	! hash_iter_done ( iter )		1001862	0					
ANR	1001887	UnaryOperationExpression	! hash_iter_done ( iter )		1001862	0					
ANR	1001888	UnaryOperator	!		1001862	0					
ANR	1001889	CallExpression	hash_iter_done ( iter )		1001862	1					
ANR	1001890	Callee	hash_iter_done		1001862	0					
ANR	1001891	Identifier	hash_iter_done		1001862	0					
ANR	1001892	ArgumentList	iter		1001862	1					
ANR	1001893	Argument	iter		1001862	0					
ANR	1001894	Identifier	iter		1001862	0					
ANR	1001895	ReturnStatement	return iter -> current -> used ;	845:1:21195:21221	1001862	3	True				
ANR	1001896	PtrMemberAccess	iter -> current -> used		1001862	0					
ANR	1001897	PtrMemberAccess	iter -> current		1001862	0					
ANR	1001898	Identifier	iter		1001862	0					
ANR	1001899	Identifier	current		1001862	1					
ANR	1001900	Identifier	used		1001862	1					
ANR	1001901	ReturnType	int		1001862	1					
ANR	1001902	Identifier	hash_iter_used_value		1001862	2					
ANR	1001903	ParameterList	HASHITER iter		1001862	3					
ANR	1001904	Parameter	HASHITER iter	840:21:21044:21056	1001862	0	True				
ANR	1001905	ParameterType	HASHITER		1001862	0					
ANR	1001906	Identifier	iter		1001862	1					
ANR	1001907	CFGEntryNode	ENTRY		1001862		True				
ANR	1001908	CFGExitNode	EXIT		1001862		True				
ANR	1001909	Symbol	* iter		1001862						
ANR	1001910	Symbol	* iter -> current		1001862						
ANR	1001911	Symbol	iter -> current -> used		1001862						
ANR	1001912	Symbol	iter		1001862						
ANR	1001913	Symbol	iter -> table		1001862						
ANR	1001914	Symbol	iter -> current		1001862						
ANR	1001915	Symbol	* * iter		1001862						
ANR	1001916	Symbol	hash_iter_done		1001862						
ANR	1001917	Function	hash_iter_delete	848:0:21226:21437							
ANR	1001918	FunctionDef	hash_iter_delete (HASHITER * iter)		1001917	0					
ANR	1001919	CompoundStatement		850:0:21266:21437	1001917	0					
ANR	1001920	ExpressionStatement	ASSERT ( iter )	851:1:21269:21281	1001917	0	True				
ANR	1001921	CallExpression	ASSERT ( iter )		1001917	0					
ANR	1001922	Callee	ASSERT		1001917	0					
ANR	1001923	Identifier	ASSERT		1001917	0					
ANR	1001924	ArgumentList	iter		1001917	1					
ANR	1001925	Argument	iter		1001917	0					
ANR	1001926	Identifier	iter		1001917	0					
ANR	1001927	ExpressionStatement	ASSERT ( iter [ 0 ] )	852:1:21284:21299	1001917	1	True				
ANR	1001928	CallExpression	ASSERT ( iter [ 0 ] )		1001917	0					
ANR	1001929	Callee	ASSERT		1001917	0					
ANR	1001930	Identifier	ASSERT		1001917	0					
ANR	1001931	ArgumentList	iter [ 0 ]		1001917	1					
ANR	1001932	Argument	iter [ 0 ]		1001917	0					
ANR	1001933	ArrayIndexing	iter [ 0 ]		1001917	0					
ANR	1001934	Identifier	iter		1001917	0					
ANR	1001935	PrimaryExpression	0		1001917	1					
ANR	1001936	ExpressionStatement	ASSERT ( iter [ 0 ] -> table )	853:1:21302:21324	1001917	2	True				
ANR	1001937	CallExpression	ASSERT ( iter [ 0 ] -> table )		1001917	0					
ANR	1001938	Callee	ASSERT		1001917	0					
ANR	1001939	Identifier	ASSERT		1001917	0					
ANR	1001940	ArgumentList	iter [ 0 ] -> table		1001917	1					
ANR	1001941	Argument	iter [ 0 ] -> table		1001917	0					
ANR	1001942	PtrMemberAccess	iter [ 0 ] -> table		1001917	0					
ANR	1001943	ArrayIndexing	iter [ 0 ]		1001917	0					
ANR	1001944	Identifier	iter		1001917	0					
ANR	1001945	PrimaryExpression	0		1001917	1					
ANR	1001946	Identifier	table		1001917	1					
ANR	1001947	ExpressionStatement	iter [ 0 ] -> table = NULL	854:1:21388:21409	1001917	3	True				
ANR	1001948	AssignmentExpression	iter [ 0 ] -> table = NULL		1001917	0		=			
ANR	1001949	PtrMemberAccess	iter [ 0 ] -> table		1001917	0					
ANR	1001950	ArrayIndexing	iter [ 0 ]		1001917	0					
ANR	1001951	Identifier	iter		1001917	0					
ANR	1001952	PrimaryExpression	0		1001917	1					
ANR	1001953	Identifier	table		1001917	1					
ANR	1001954	Identifier	NULL		1001917	1					
ANR	1001955	ExpressionStatement	free ( * iter )	855:1:21412:21423	1001917	4	True				
ANR	1001956	CallExpression	free ( * iter )		1001917	0					
ANR	1001957	Callee	free		1001917	0					
ANR	1001958	Identifier	free		1001917	0					
ANR	1001959	ArgumentList	* iter		1001917	1					
ANR	1001960	Argument	* iter		1001917	0					
ANR	1001961	UnaryOperationExpression	* iter		1001917	0					
ANR	1001962	UnaryOperator	*		1001917	0					
ANR	1001963	Identifier	iter		1001917	1					
ANR	1001964	ExpressionStatement	* iter = 0	856:1:21426:21435	1001917	5	True				
ANR	1001965	AssignmentExpression	* iter = 0		1001917	0		=			
ANR	1001966	UnaryOperationExpression	* iter		1001917	0					
ANR	1001967	UnaryOperator	*		1001917	0					
ANR	1001968	Identifier	iter		1001917	1					
ANR	1001969	PrimaryExpression	0		1001917	1					
ANR	1001970	ReturnType	void		1001917	1					
ANR	1001971	Identifier	hash_iter_delete		1001917	2					
ANR	1001972	ParameterList	HASHITER * iter		1001917	3					
ANR	1001973	Parameter	HASHITER * iter	849:17:21249:21263	1001917	0	True				
ANR	1001974	ParameterType	HASHITER *		1001917	0					
ANR	1001975	Identifier	iter		1001917	1					
ANR	1001976	CFGEntryNode	ENTRY		1001917		True				
ANR	1001977	CFGExitNode	EXIT		1001917		True				
ANR	1001978	Symbol	* iter		1001917						
ANR	1001979	Symbol	iter [ 0 ] -> table		1001917						
ANR	1001980	Symbol	NULL		1001917						
ANR	1001981	Symbol	iter		1001917						
ANR	1001982	Symbol	* * iter		1001917						
ANR	1001983	Function	find_special_config_macro	863:0:21527:22606							
ANR	1001984	FunctionDef	"find_special_config_macro (const char * prefix , bool only_id_chars , register char * value , register char * * leftp , register char * * namep , register char * * rightp)"		1001983	0					
ANR	1001985	CompoundStatement		866:0:21694:22606	1001983	0					
ANR	1001986	IdentifierDeclStatement	"char * left , * left_end , * name , * right ;"	867:1:21697:21733	1001983	0	True				
ANR	1001987	IdentifierDecl	* left		1001983	0					
ANR	1001988	IdentifierDeclType	char *		1001983	0					
ANR	1001989	Identifier	left		1001983	1					
ANR	1001990	IdentifierDecl	* left_end		1001983	1					
ANR	1001991	IdentifierDeclType	char *		1001983	0					
ANR	1001992	Identifier	left_end		1001983	1					
ANR	1001993	IdentifierDecl	* name		1001983	2					
ANR	1001994	IdentifierDeclType	char *		1001983	0					
ANR	1001995	Identifier	name		1001983	1					
ANR	1001996	IdentifierDecl	* right		1001983	3					
ANR	1001997	IdentifierDeclType	char *		1001983	0					
ANR	1001998	Identifier	right		1001983	1					
ANR	1001999	IdentifierDeclStatement	char * tvalue ;	868:1:21736:21748	1001983	1	True				
ANR	1002000	IdentifierDecl	* tvalue		1001983	0					
ANR	1002001	IdentifierDeclType	char *		1001983	0					
ANR	1002002	Identifier	tvalue		1001983	1					
ANR	1002003	IdentifierDeclStatement	int prefix_len ;	869:1:21751:21765	1001983	2	True				
ANR	1002004	IdentifierDecl	prefix_len		1001983	0					
ANR	1002005	IdentifierDeclType	int		1001983	0					
ANR	1002006	Identifier	prefix_len		1001983	1					
ANR	1002007	IfStatement	if ( prefix == NULL )		1001983	3					
ANR	1002008	Condition	prefix == NULL	871:6:21774:21787	1001983	0	True				
ANR	1002009	EqualityExpression	prefix == NULL		1001983	0		==			
ANR	1002010	Identifier	prefix		1001983	0					
ANR	1002011	Identifier	NULL		1001983	1					
ANR	1002012	CompoundStatement		6:23:96:96	1001983	1					
ANR	1002013	ReturnStatement	return ( 0 ) ;	872:2:21795:21806	1001983	0	True				
ANR	1002014	PrimaryExpression	0		1001983	0					
ANR	1002015	ExpressionStatement	prefix_len = strlen ( prefix )	875:1:21813:21840	1001983	4	True				
ANR	1002016	AssignmentExpression	prefix_len = strlen ( prefix )		1001983	0		=			
ANR	1002017	Identifier	prefix_len		1001983	0					
ANR	1002018	CallExpression	strlen ( prefix )		1001983	1					
ANR	1002019	Callee	strlen		1001983	0					
ANR	1002020	Identifier	strlen		1001983	0					
ANR	1002021	ArgumentList	prefix		1001983	1					
ANR	1002022	Argument	prefix		1001983	0					
ANR	1002023	Identifier	prefix		1001983	0					
ANR	1002024	ExpressionStatement	tvalue = value	876:1:21843:21857	1001983	5	True				
ANR	1002025	AssignmentExpression	tvalue = value		1001983	0		=			
ANR	1002026	Identifier	tvalue		1001983	0					
ANR	1002027	Identifier	value		1001983	1					
ANR	1002028	ExpressionStatement	left = value	877:1:21860:21872	1001983	6	True				
ANR	1002029	AssignmentExpression	left = value		1001983	0		=			
ANR	1002030	Identifier	left		1001983	0					
ANR	1002031	Identifier	value		1001983	1					
ANR	1002032	WhileStatement	while ( 1 )		1001983	7					
ANR	1002033	Condition	1	880:8:21943:21943	1001983	0	True				
ANR	1002034	PrimaryExpression	1		1001983	0					
ANR	1002035	CompoundStatement		15:11:251:251	1001983	1					
ANR	1002036	Label	tryagain :	881:0:21948:21956	1001983	0	True				
ANR	1002037	Identifier	tryagain		1001983	0					
ANR	1002038	IfStatement	if ( tvalue )		1001983	1					
ANR	1002039	Condition	tvalue	882:6:21964:21969	1001983	0	True				
ANR	1002040	Identifier	tvalue		1001983	0					
ANR	1002041	CompoundStatement		17:14:277:277	1001983	1					
ANR	1002042	Statement	value	883:3:21977:21981	1001983	0	True				
ANR	1002043	Statement	=	883:9:21983:21983	1001983	1	True				
ANR	1002044	Statement	const_cast	883:11:21985:21994	1001983	2	True				
ANR	1002045	Statement	<	883:21:21995:21995	1001983	3	True				
ANR	1002046	Statement	char	883:22:21996:21999	1001983	4	True				
ANR	1002047	Statement	*	883:27:22001:22001	1001983	5	True				
ANR	1002048	Statement	>	883:28:22002:22002	1001983	6	True				
ANR	1002049	ExpressionStatement	"strstr ( tvalue , prefix )"	883:29:22003:22028	1001983	7	True				
ANR	1002050	CallExpression	"strstr ( tvalue , prefix )"		1001983	0					
ANR	1002051	Callee	strstr		1001983	0					
ANR	1002052	Identifier	strstr		1001983	0					
ANR	1002053	ArgumentList	tvalue		1001983	1					
ANR	1002054	Argument	tvalue		1001983	0					
ANR	1002055	Identifier	tvalue		1001983	0					
ANR	1002056	Argument	prefix		1001983	1					
ANR	1002057	Identifier	prefix		1001983	0					
ANR	1002058	IfStatement	if ( value == NULL )		1001983	2					
ANR	1002059	Condition	value == NULL	886:6:22043:22055	1001983	0	True				
ANR	1002060	EqualityExpression	value == NULL		1001983	0		==			
ANR	1002061	Identifier	value		1001983	0					
ANR	1002062	Identifier	NULL		1001983	1					
ANR	1002063	CompoundStatement		21:22:364:364	1001983	1					
ANR	1002064	ReturnStatement	return ( 0 ) ;	887:3:22064:22075	1001983	0	True				
ANR	1002065	PrimaryExpression	0		1001983	0					
ANR	1002066	ExpressionStatement	value += prefix_len	890:2:22084:22103	1001983	3	True				
ANR	1002067	AssignmentExpression	value += prefix_len		1001983	0		+=			
ANR	1002068	Identifier	value		1001983	0					
ANR	1002069	Identifier	prefix_len		1001983	1					
ANR	1002070	IfStatement	if ( * value == '(' )		1001983	4					
ANR	1002071	Condition	* value == '('	891:6:22111:22123	1001983	0	True				
ANR	1002072	EqualityExpression	* value == '('		1001983	0		==			
ANR	1002073	UnaryOperationExpression	* value		1001983	0					
ANR	1002074	UnaryOperator	*		1001983	0					
ANR	1002075	Identifier	value		1001983	1					
ANR	1002076	PrimaryExpression	'('		1001983	1					
ANR	1002077	CompoundStatement		26:22:432:432	1001983	1					
ANR	1002078	ExpressionStatement	left_end = value - prefix_len	892:3:22132:22161	1001983	0	True				
ANR	1002079	AssignmentExpression	left_end = value - prefix_len		1001983	0		=			
ANR	1002080	Identifier	left_end		1001983	0					
ANR	1002081	AdditiveExpression	value - prefix_len		1001983	1		-			
ANR	1002082	Identifier	value		1001983	0					
ANR	1002083	Identifier	prefix_len		1001983	1					
ANR	1002084	ExpressionStatement	name = ++ value	893:3:22166:22180	1001983	1	True				
ANR	1002085	AssignmentExpression	name = ++ value		1001983	0		=			
ANR	1002086	Identifier	name		1001983	0					
ANR	1002087	UnaryExpression	++ value		1001983	1					
ANR	1002088	IncDec	++		1001983	0					
ANR	1002089	Identifier	value		1001983	1					
ANR	1002090	WhileStatement	while ( * value && * value != ')' )		1001983	2					
ANR	1002091	Condition	* value && * value != ')'	894:10:22192:22214	1001983	0	True				
ANR	1002092	AndExpression	* value && * value != ')'		1001983	0		&&			
ANR	1002093	UnaryOperationExpression	* value		1001983	0					
ANR	1002094	UnaryOperator	*		1001983	0					
ANR	1002095	Identifier	value		1001983	1					
ANR	1002096	EqualityExpression	* value != ')'		1001983	1		!=			
ANR	1002097	UnaryOperationExpression	* value		1001983	0					
ANR	1002098	UnaryOperator	*		1001983	0					
ANR	1002099	Identifier	value		1001983	1					
ANR	1002100	PrimaryExpression	')'		1001983	1					
ANR	1002101	CompoundStatement		30:4:529:546	1001983	1					
ANR	1002102	IdentifierDeclStatement	char c = * value ++ ;	895:4:22224:22241	1001983	0	True				
ANR	1002103	IdentifierDecl	c = * value ++		1001983	0					
ANR	1002104	IdentifierDeclType	char		1001983	0					
ANR	1002105	Identifier	c		1001983	1					
ANR	1002106	AssignmentExpression	c = * value ++		1001983	2		=			
ANR	1002107	Identifier	c		1001983	0					
ANR	1002108	UnaryOperationExpression	* value ++		1001983	1					
ANR	1002109	UnaryOperator	*		1001983	0					
ANR	1002110	PostIncDecOperationExpression	value ++		1001983	1					
ANR	1002111	Identifier	value		1001983	0					
ANR	1002112	IncDec	++		1001983	1					
ANR	1002113	IfStatement	if ( ! ISIDCHAR ( c ) && only_id_chars )		1001983	1					
ANR	1002114	Condition	! ISIDCHAR ( c ) && only_id_chars	896:8:22251:22279	1001983	0	True				
ANR	1002115	AndExpression	! ISIDCHAR ( c ) && only_id_chars		1001983	0		&&			
ANR	1002116	UnaryOperationExpression	! ISIDCHAR ( c )		1001983	0					
ANR	1002117	UnaryOperator	!		1001983	0					
ANR	1002118	CallExpression	ISIDCHAR ( c )		1001983	1					
ANR	1002119	Callee	ISIDCHAR		1001983	0					
ANR	1002120	Identifier	ISIDCHAR		1001983	0					
ANR	1002121	ArgumentList	c		1001983	1					
ANR	1002122	Argument	c		1001983	0					
ANR	1002123	Identifier	c		1001983	0					
ANR	1002124	Identifier	only_id_chars		1001983	1					
ANR	1002125	CompoundStatement		31:40:588:588	1001983	1					
ANR	1002126	ExpressionStatement	tvalue = name	897:5:22290:22303	1001983	0	True				
ANR	1002127	AssignmentExpression	tvalue = name		1001983	0		=			
ANR	1002128	Identifier	tvalue		1001983	0					
ANR	1002129	Identifier	name		1001983	1					
ANR	1002130	GotoStatement	goto tryagain ;	898:5:22310:22323	1001983	1	True				
ANR	1002131	Identifier	tryagain		1001983	0					
ANR	1002132	IfStatement	if ( * value == ')' )		1001983	3					
ANR	1002133	Condition	* value == ')'	902:7:22344:22356	1001983	0	True				
ANR	1002134	EqualityExpression	* value == ')'		1001983	0		==			
ANR	1002135	UnaryOperationExpression	* value		1001983	0					
ANR	1002136	UnaryOperator	*		1001983	0					
ANR	1002137	Identifier	value		1001983	1					
ANR	1002138	PrimaryExpression	')'		1001983	1					
ANR	1002139	CompoundStatement		37:23:665:665	1001983	1					
ANR	1002140	ExpressionStatement	right = value	903:4:22366:22379	1001983	0	True				
ANR	1002141	AssignmentExpression	right = value		1001983	0		=			
ANR	1002142	Identifier	right		1001983	0					
ANR	1002143	Identifier	value		1001983	1					
ANR	1002144	BreakStatement	break ;	904:4:22385:22390	1001983	1	True				
ANR	1002145	ElseStatement	else		1001983	0					
ANR	1002146	CompoundStatement		40:10:707:707	1001983	0					
ANR	1002147	ExpressionStatement	tvalue = name	906:4:22408:22421	1001983	0	True				
ANR	1002148	AssignmentExpression	tvalue = name		1001983	0		=			
ANR	1002149	Identifier	tvalue		1001983	0					
ANR	1002150	Identifier	name		1001983	1					
ANR	1002151	GotoStatement	goto tryagain ;	907:4:22427:22440	1001983	1	True				
ANR	1002152	Identifier	tryagain		1001983	0					
ANR	1002153	ElseStatement	else		1001983	0					
ANR	1002154	CompoundStatement		44:9:761:761	1001983	0					
ANR	1002155	ExpressionStatement	tvalue = value	910:3:22461:22475	1001983	0	True				
ANR	1002156	AssignmentExpression	tvalue = value		1001983	0		=			
ANR	1002157	Identifier	tvalue		1001983	0					
ANR	1002158	Identifier	value		1001983	1					
ANR	1002159	GotoStatement	goto tryagain ;	911:3:22480:22493	1001983	1	True				
ANR	1002160	Identifier	tryagain		1001983	0					
ANR	1002161	ExpressionStatement	* left_end = '\\0'	915:1:22504:22520	1001983	8	True				
ANR	1002162	AssignmentExpression	* left_end = '\\0'		1001983	0		=			
ANR	1002163	UnaryOperationExpression	* left_end		1001983	0					
ANR	1002164	UnaryOperator	*		1001983	0					
ANR	1002165	Identifier	left_end		1001983	1					
ANR	1002166	PrimaryExpression	'\\0'		1001983	1					
ANR	1002167	ExpressionStatement	* right ++ = '\\0'	916:1:22523:22538	1001983	9	True				
ANR	1002168	AssignmentExpression	* right ++ = '\\0'		1001983	0		=			
ANR	1002169	UnaryOperationExpression	* right ++		1001983	0					
ANR	1002170	UnaryOperator	*		1001983	0					
ANR	1002171	PostIncDecOperationExpression	right ++		1001983	1					
ANR	1002172	Identifier	right		1001983	0					
ANR	1002173	IncDec	++		1001983	1					
ANR	1002174	PrimaryExpression	'\\0'		1001983	1					
ANR	1002175	ExpressionStatement	* leftp = left	918:1:22542:22555	1001983	10	True				
ANR	1002176	AssignmentExpression	* leftp = left		1001983	0		=			
ANR	1002177	UnaryOperationExpression	* leftp		1001983	0					
ANR	1002178	UnaryOperator	*		1001983	0					
ANR	1002179	Identifier	leftp		1001983	1					
ANR	1002180	Identifier	left		1001983	1					
ANR	1002181	ExpressionStatement	* namep = name	919:1:22558:22571	1001983	11	True				
ANR	1002182	AssignmentExpression	* namep = name		1001983	0		=			
ANR	1002183	UnaryOperationExpression	* namep		1001983	0					
ANR	1002184	UnaryOperator	*		1001983	0					
ANR	1002185	Identifier	namep		1001983	1					
ANR	1002186	Identifier	name		1001983	1					
ANR	1002187	ExpressionStatement	* rightp = right	920:1:22574:22589	1001983	12	True				
ANR	1002188	AssignmentExpression	* rightp = right		1001983	0		=			
ANR	1002189	UnaryOperationExpression	* rightp		1001983	0					
ANR	1002190	UnaryOperator	*		1001983	0					
ANR	1002191	Identifier	rightp		1001983	1					
ANR	1002192	Identifier	right		1001983	1					
ANR	1002193	ReturnStatement	return ( 1 ) ;	922:1:22593:22604	1001983	13	True				
ANR	1002194	PrimaryExpression	1		1001983	0					
ANR	1002195	ReturnType	int		1001983	1					
ANR	1002196	Identifier	find_special_config_macro		1001983	2					
ANR	1002197	ParameterList	"const char * prefix , bool only_id_chars , register char * value , register char * * leftp , register char * * namep , register char * * rightp"		1001983	3					
ANR	1002198	Parameter	const char * prefix	864:27:21558:21575	1001983	0	True				
ANR	1002199	ParameterType	const char *		1001983	0					
ANR	1002200	Identifier	prefix		1001983	1					
ANR	1002201	Parameter	bool only_id_chars	864:47:21578:21595	1001983	1	True				
ANR	1002202	ParameterType	bool		1001983	0					
ANR	1002203	Identifier	only_id_chars		1001983	1					
ANR	1002204	Parameter	register char * value	864:67:21598:21617	1001983	2	True				
ANR	1002205	ParameterType	register char *		1001983	0					
ANR	1002206	Identifier	value		1001983	1					
ANR	1002207	Parameter	register char * * leftp	865:2:21623:21643	1001983	3	True				
ANR	1002208	ParameterType	register char * *		1001983	0					
ANR	1002209	Identifier	leftp		1001983	1					
ANR	1002210	Parameter	register char * * namep	865:25:21646:21666	1001983	4	True				
ANR	1002211	ParameterType	register char * *		1001983	0					
ANR	1002212	Identifier	namep		1001983	1					
ANR	1002213	Parameter	register char * * rightp	865:48:21669:21690	1001983	5	True				
ANR	1002214	ParameterType	register char * *		1001983	0					
ANR	1002215	Identifier	rightp		1001983	1					
ANR	1002216	CFGEntryNode	ENTRY		1001983		True				
ANR	1002217	CFGExitNode	EXIT		1001983		True				
ANR	1002218	Symbol	tvalue		1001983						
ANR	1002219	Symbol	NULL		1001983						
ANR	1002220	Symbol	c		1001983						
ANR	1002221	Symbol	prefix		1001983						
ANR	1002222	Symbol	leftp		1001983						
ANR	1002223	Symbol	prefix_len		1001983						
ANR	1002224	Symbol	* value ++		1001983						
ANR	1002225	Symbol	only_id_chars		1001983						
ANR	1002226	Symbol	right		1001983						
ANR	1002227	Symbol	strlen		1001983						
ANR	1002228	Symbol	ISIDCHAR		1001983						
ANR	1002229	Symbol	* leftp		1001983						
ANR	1002230	Symbol	left_end		1001983						
ANR	1002231	Symbol	* namep		1001983						
ANR	1002232	Symbol	* rightp		1001983						
ANR	1002233	Symbol	rightp		1001983						
ANR	1002234	Symbol	left		1001983						
ANR	1002235	Symbol	* left_end		1001983						
ANR	1002236	Symbol	* value		1001983						
ANR	1002237	Symbol	name		1001983						
ANR	1002238	Symbol	* right ++		1001983						
ANR	1002239	Symbol	value		1001983						
ANR	1002240	Symbol	namep		1001983						
ANR	1002241	Function	find_config_macro	926:0:22664:26393							
ANR	1002242	FunctionDef	"find_config_macro (register char * value , register char * * leftp , register char * * namep , register char * * rightp , const char * self , bool getdollardollar , int search_pos)"		1002241	0					
ANR	1002243	CompoundStatement		931:0:22845:26393	1002241	0					
ANR	1002244	IdentifierDeclStatement	"char * left , * left_end , * name , * right ;"	932:1:22848:22884	1002241	0	True				
ANR	1002245	IdentifierDecl	* left		1002241	0					
ANR	1002246	IdentifierDeclType	char *		1002241	0					
ANR	1002247	Identifier	left		1002241	1					
ANR	1002248	IdentifierDecl	* left_end		1002241	1					
ANR	1002249	IdentifierDeclType	char *		1002241	0					
ANR	1002250	Identifier	left_end		1002241	1					
ANR	1002251	IdentifierDecl	* name		1002241	2					
ANR	1002252	IdentifierDeclType	char *		1002241	0					
ANR	1002253	Identifier	name		1002241	1					
ANR	1002254	IdentifierDecl	* right		1002241	3					
ANR	1002255	IdentifierDeclType	char *		1002241	0					
ANR	1002256	Identifier	right		1002241	1					
ANR	1002257	IdentifierDeclStatement	char * tvalue ;	933:1:22887:22899	1002241	1	True				
ANR	1002258	IdentifierDecl	* tvalue		1002241	0					
ANR	1002259	IdentifierDeclType	char *		1002241	0					
ANR	1002260	Identifier	tvalue		1002241	1					
ANR	1002261	ExpressionStatement	tvalue = value + search_pos	935:1:22903:22930	1002241	2	True				
ANR	1002262	AssignmentExpression	tvalue = value + search_pos		1002241	0		=			
ANR	1002263	Identifier	tvalue		1002241	0					
ANR	1002264	AdditiveExpression	value + search_pos		1002241	1		+			
ANR	1002265	Identifier	value		1002241	0					
ANR	1002266	Identifier	search_pos		1002241	1					
ANR	1002267	ExpressionStatement	left = value	936:1:22933:22945	1002241	3	True				
ANR	1002268	AssignmentExpression	left = value		1002241	0		=			
ANR	1002269	Identifier	left		1002241	0					
ANR	1002270	Identifier	value		1002241	1					
ANR	1002271	ForStatement	for ( ; ; )		1002241	4					
ANR	1002272	CompoundStatement		8:9:111:111	1002241	0					
ANR	1002273	Label	tryagain :	939:0:22959:22967	1002241	0	True				
ANR	1002274	Identifier	tryagain		1002241	0					
ANR	1002275	IfStatement	if ( tvalue )		1002241	1					
ANR	1002276	Condition	tvalue	940:6:22975:22980	1002241	0	True				
ANR	1002277	Identifier	tvalue		1002241	0					
ANR	1002278	CompoundStatement		10:14:137:137	1002241	1					
ANR	1002279	Statement	value	941:3:22988:22992	1002241	0	True				
ANR	1002280	Statement	=	941:9:22994:22994	1002241	1	True				
ANR	1002281	Statement	const_cast	941:11:22996:23005	1002241	2	True				
ANR	1002282	Statement	<	941:21:23006:23006	1002241	3	True				
ANR	1002283	Statement	char	941:22:23007:23010	1002241	4	True				
ANR	1002284	Statement	*	941:27:23012:23012	1002241	5	True				
ANR	1002285	Statement	>	941:28:23013:23013	1002241	6	True				
ANR	1002286	ExpressionStatement	"strchr ( tvalue , '$' )"	941:29:23014:23037	1002241	7	True				
ANR	1002287	CallExpression	"strchr ( tvalue , '$' )"		1002241	0					
ANR	1002288	Callee	strchr		1002241	0					
ANR	1002289	Identifier	strchr		1002241	0					
ANR	1002290	ArgumentList	tvalue		1002241	1					
ANR	1002291	Argument	tvalue		1002241	0					
ANR	1002292	Identifier	tvalue		1002241	0					
ANR	1002293	Argument	'$'		1002241	1					
ANR	1002294	PrimaryExpression	'$'		1002241	0					
ANR	1002295	IfStatement	if ( value == NULL )		1002241	2					
ANR	1002296	Condition	value == NULL	944:6:23052:23064	1002241	0	True				
ANR	1002297	EqualityExpression	value == NULL		1002241	0		==			
ANR	1002298	Identifier	value		1002241	0					
ANR	1002299	Identifier	NULL		1002241	1					
ANR	1002300	CompoundStatement		14:22:222:222	1002241	1					
ANR	1002301	ReturnStatement	return ( 0 ) ;	945:3:23073:23084	1002241	0	True				
ANR	1002302	PrimaryExpression	0		1002241	0					
ANR	1002303	IfStatement	if ( getdollardollar )		1002241	3					
ANR	1002304	Condition	getdollardollar	954:7:23386:23400	1002241	0	True				
ANR	1002305	Identifier	getdollardollar		1002241	0					
ANR	1002306	CompoundStatement		24:25:558:558	1002241	1					
ANR	1002307	IfStatement	if ( * ++ value != '$' )		1002241	0					
ANR	1002308	Condition	* ++ value != '$'	955:8:23414:23428	1002241	0	True				
ANR	1002309	EqualityExpression	* ++ value != '$'		1002241	0		!=			
ANR	1002310	UnaryOperationExpression	* ++ value		1002241	0					
ANR	1002311	UnaryOperator	*		1002241	0					
ANR	1002312	UnaryExpression	++ value		1002241	1					
ANR	1002313	IncDec	++		1002241	0					
ANR	1002314	Identifier	value		1002241	1					
ANR	1002315	PrimaryExpression	'$'		1002241	1					
ANR	1002316	CompoundStatement		25:26:586:586	1002241	1					
ANR	1002317	ExpressionStatement	tvalue = value	957:4:23468:23482	1002241	0	True				
ANR	1002318	AssignmentExpression	tvalue = value		1002241	0		=			
ANR	1002319	Identifier	tvalue		1002241	0					
ANR	1002320	Identifier	value		1002241	1					
ANR	1002321	GotoStatement	goto tryagain ;	958:4:23488:23501	1002241	1	True				
ANR	1002322	Identifier	tryagain		1002241	0					
ANR	1002323	ElseStatement	else		1002241	0					
ANR	1002324	CompoundStatement		30:9:671:671	1002241	0					
ANR	1002325	IfStatement	if ( ( * ( value + sizeof ( char ) ) ) == '$' )		1002241	0					
ANR	1002326	Condition	( * ( value + sizeof ( char ) ) ) == '$'	963:8:23599:23630	1002241	0	True				
ANR	1002327	EqualityExpression	( * ( value + sizeof ( char ) ) ) == '$'		1002241	0		==			
ANR	1002328	UnaryOperationExpression	* ( value + sizeof ( char ) )		1002241	0					
ANR	1002329	UnaryOperator	*		1002241	0					
ANR	1002330	AdditiveExpression	value + sizeof ( char )		1002241	1		+			
ANR	1002331	Identifier	value		1002241	0					
ANR	1002332	SizeofExpression	sizeof ( char )		1002241	1					
ANR	1002333	Sizeof	sizeof		1002241	0					
ANR	1002334	SizeofOperand	char		1002241	1					
ANR	1002335	PrimaryExpression	'$'		1002241	1					
ANR	1002336	CompoundStatement		33:43:788:788	1002241	1					
ANR	1002337	ExpressionStatement	value ++	964:4:23640:23647	1002241	0	True				
ANR	1002338	PostIncDecOperationExpression	value ++		1002241	0					
ANR	1002339	Identifier	value		1002241	0					
ANR	1002340	IncDec	++		1002241	1					
ANR	1002341	ExpressionStatement	value ++	965:4:23671:23678	1002241	1	True				
ANR	1002342	PostIncDecOperationExpression	value ++		1002241	0					
ANR	1002343	Identifier	value		1002241	0					
ANR	1002344	IncDec	++		1002241	1					
ANR	1002345	ExpressionStatement	tvalue = value	966:4:23704:23718	1002241	2	True				
ANR	1002346	AssignmentExpression	tvalue = value		1002241	0		=			
ANR	1002347	Identifier	tvalue		1002241	0					
ANR	1002348	Identifier	value		1002241	1					
ANR	1002349	GotoStatement	goto tryagain ;	967:4:23724:23737	1002241	3	True				
ANR	1002350	Identifier	tryagain		1002241	0					
ANR	1002351	IfStatement	if ( * ++ value == '(' )		1002241	4					
ANR	1002352	Condition	* ++ value == '('	971:6:23755:23769	1002241	0	True				
ANR	1002353	EqualityExpression	* ++ value == '('		1002241	0		==			
ANR	1002354	UnaryOperationExpression	* ++ value		1002241	0					
ANR	1002355	UnaryOperator	*		1002241	0					
ANR	1002356	UnaryExpression	++ value		1002241	1					
ANR	1002357	IncDec	++		1002241	0					
ANR	1002358	Identifier	value		1002241	1					
ANR	1002359	PrimaryExpression	'('		1002241	1					
ANR	1002360	CompoundStatement		41:24:927:927	1002241	1					
ANR	1002361	IfStatement	if ( getdollardollar && * value != '\\0' && value [ 1 ] == '[' )		1002241	0					
ANR	1002362	Condition	getdollardollar && * value != '\\0' && value [ 1 ] == '['	972:7:23782:23833	1002241	0	True				
ANR	1002363	AndExpression	getdollardollar && * value != '\\0' && value [ 1 ] == '['		1002241	0		&&			
ANR	1002364	Identifier	getdollardollar		1002241	0					
ANR	1002365	AndExpression	* value != '\\0' && value [ 1 ] == '['		1002241	1		&&			
ANR	1002366	EqualityExpression	* value != '\\0'		1002241	0		!=			
ANR	1002367	UnaryOperationExpression	* value		1002241	0					
ANR	1002368	UnaryOperator	*		1002241	0					
ANR	1002369	Identifier	value		1002241	1					
ANR	1002370	PrimaryExpression	'\\0'		1002241	1					
ANR	1002371	EqualityExpression	value [ 1 ] == '['		1002241	1		==			
ANR	1002372	ArrayIndexing	value [ 1 ]		1002241	0					
ANR	1002373	Identifier	value		1002241	0					
ANR	1002374	PrimaryExpression	1		1002241	1					
ANR	1002375	PrimaryExpression	'['		1002241	1					
ANR	1002376	CompoundStatement		49:4:1254:1293	1002241	1					
ANR	1002377	IdentifierDeclStatement	"char * end_marker = strstr ( value , ""])"" ) ;"	979:4:24100:24139	1002241	0	True				
ANR	1002378	IdentifierDecl	"* end_marker = strstr ( value , ""])"" )"		1002241	0					
ANR	1002379	IdentifierDeclType	char *		1002241	0					
ANR	1002380	Identifier	end_marker		1002241	1					
ANR	1002381	AssignmentExpression	"* end_marker = strstr ( value , ""])"" )"		1002241	2		=			
ANR	1002382	Identifier	end_marker		1002241	0					
ANR	1002383	CallExpression	"strstr ( value , ""])"" )"		1002241	1					
ANR	1002384	Callee	strstr		1002241	0					
ANR	1002385	Identifier	strstr		1002241	0					
ANR	1002386	ArgumentList	value		1002241	1					
ANR	1002387	Argument	value		1002241	0					
ANR	1002388	Identifier	value		1002241	0					
ANR	1002389	Argument	"""])"""		1002241	1					
ANR	1002390	PrimaryExpression	"""])"""		1002241	0					
ANR	1002391	IfStatement	if ( end_marker == NULL )		1002241	1					
ANR	1002392	Condition	end_marker == NULL	980:8:24149:24166	1002241	0	True				
ANR	1002393	EqualityExpression	end_marker == NULL		1002241	0		==			
ANR	1002394	Identifier	end_marker		1002241	0					
ANR	1002395	Identifier	NULL		1002241	1					
ANR	1002396	CompoundStatement		50:29:1324:1324	1002241	1					
ANR	1002397	ExpressionStatement	tvalue = value	981:5:24177:24191	1002241	0	True				
ANR	1002398	AssignmentExpression	tvalue = value		1002241	0		=			
ANR	1002399	Identifier	tvalue		1002241	0					
ANR	1002400	Identifier	value		1002241	1					
ANR	1002401	GotoStatement	goto tryagain ;	982:5:24198:24211	1002241	1	True				
ANR	1002402	Identifier	tryagain		1002241	0					
ANR	1002403	ExpressionStatement	left_end = value - 2	985:4:24224:24244	1002241	2	True				
ANR	1002404	AssignmentExpression	left_end = value - 2		1002241	0		=			
ANR	1002405	Identifier	left_end		1002241	0					
ANR	1002406	AdditiveExpression	value - 2		1002241	1		-			
ANR	1002407	Identifier	value		1002241	0					
ANR	1002408	PrimaryExpression	2		1002241	1					
ANR	1002409	ExpressionStatement	name = ++ value	986:4:24250:24264	1002241	3	True				
ANR	1002410	AssignmentExpression	name = ++ value		1002241	0		=			
ANR	1002411	Identifier	name		1002241	0					
ANR	1002412	UnaryExpression	++ value		1002241	1					
ANR	1002413	IncDec	++		1002241	0					
ANR	1002414	Identifier	value		1002241	1					
ANR	1002415	ExpressionStatement	right = end_marker + 1	987:4:24270:24292	1002241	4	True				
ANR	1002416	AssignmentExpression	right = end_marker + 1		1002241	0		=			
ANR	1002417	Identifier	right		1002241	0					
ANR	1002418	AdditiveExpression	end_marker + 1		1002241	1		+			
ANR	1002419	Identifier	end_marker		1002241	0					
ANR	1002420	PrimaryExpression	1		1002241	1					
ANR	1002421	BreakStatement	break ;	988:4:24298:24303	1002241	5	True				
ANR	1002422	ElseStatement	else		1002241	0					
ANR	1002423	CompoundStatement		60:10:1470:1470	1002241	0					
ANR	1002424	IfStatement	if ( getdollardollar )		1002241	0					
ANR	1002425	Condition	getdollardollar	998:9:24633:24647	1002241	0	True				
ANR	1002426	Identifier	getdollardollar		1002241	0					
ANR	1002427	CompoundStatement		68:27:1805:1805	1002241	1					
ANR	1002428	ExpressionStatement	left_end = value - 2	999:5:24658:24678	1002241	0	True				
ANR	1002429	AssignmentExpression	left_end = value - 2		1002241	0		=			
ANR	1002430	Identifier	left_end		1002241	0					
ANR	1002431	AdditiveExpression	value - 2		1002241	1		-			
ANR	1002432	Identifier	value		1002241	0					
ANR	1002433	PrimaryExpression	2		1002241	1					
ANR	1002434	ElseStatement	else		1002241	0					
ANR	1002435	CompoundStatement		70:11:1845:1845	1002241	0					
ANR	1002436	ExpressionStatement	left_end = value - 1	1001:5:24698:24718	1002241	0	True				
ANR	1002437	AssignmentExpression	left_end = value - 1		1002241	0		=			
ANR	1002438	Identifier	left_end		1002241	0					
ANR	1002439	AdditiveExpression	value - 1		1002241	1		-			
ANR	1002440	Identifier	value		1002241	0					
ANR	1002441	PrimaryExpression	1		1002241	1					
ANR	1002442	ExpressionStatement	name = ++ value	1003:4:24730:24744	1002241	1	True				
ANR	1002443	AssignmentExpression	name = ++ value		1002241	0		=			
ANR	1002444	Identifier	name		1002241	0					
ANR	1002445	UnaryExpression	++ value		1002241	1					
ANR	1002446	IncDec	++		1002241	0					
ANR	1002447	Identifier	value		1002241	1					
ANR	1002448	WhileStatement	while ( * value && * value != ')' )		1002241	2					
ANR	1002449	Condition	* value && * value != ')'	1004:11:24757:24779	1002241	0	True				
ANR	1002450	AndExpression	* value && * value != ')'		1002241	0		&&			
ANR	1002451	UnaryOperationExpression	* value		1002241	0					
ANR	1002452	UnaryOperator	*		1002241	0					
ANR	1002453	Identifier	value		1002241	1					
ANR	1002454	EqualityExpression	* value != ')'		1002241	1		!=			
ANR	1002455	UnaryOperationExpression	* value		1002241	0					
ANR	1002456	UnaryOperator	*		1002241	0					
ANR	1002457	Identifier	value		1002241	1					
ANR	1002458	PrimaryExpression	')'		1002241	1					
ANR	1002459	CompoundStatement		75:5:1944:1961	1002241	1					
ANR	1002460	IdentifierDeclStatement	char c = * value ++ ;	1005:5:24790:24807	1002241	0	True				
ANR	1002461	IdentifierDecl	c = * value ++		1002241	0					
ANR	1002462	IdentifierDeclType	char		1002241	0					
ANR	1002463	Identifier	c		1002241	1					
ANR	1002464	AssignmentExpression	c = * value ++		1002241	2		=			
ANR	1002465	Identifier	c		1002241	0					
ANR	1002466	UnaryOperationExpression	* value ++		1002241	1					
ANR	1002467	UnaryOperator	*		1002241	0					
ANR	1002468	PostIncDecOperationExpression	value ++		1002241	1					
ANR	1002469	Identifier	value		1002241	0					
ANR	1002470	IncDec	++		1002241	1					
ANR	1002471	IfStatement	if ( getdollardollar )		1002241	1					
ANR	1002472	Condition	getdollardollar	1006:9:24818:24832	1002241	0	True				
ANR	1002473	Identifier	getdollardollar		1002241	0					
ANR	1002474	CompoundStatement		76:27:1990:1990	1002241	1					
ANR	1002475	IfStatement	if ( ! ISDDCHAR ( c ) )		1002241	0					
ANR	1002476	Condition	! ISDDCHAR ( c )	1007:10:24848:24859	1002241	0	True				
ANR	1002477	UnaryOperationExpression	! ISDDCHAR ( c )		1002241	0					
ANR	1002478	UnaryOperator	!		1002241	0					
ANR	1002479	CallExpression	ISDDCHAR ( c )		1002241	1					
ANR	1002480	Callee	ISDDCHAR		1002241	0					
ANR	1002481	Identifier	ISDDCHAR		1002241	0					
ANR	1002482	ArgumentList	c		1002241	1					
ANR	1002483	Argument	c		1002241	0					
ANR	1002484	Identifier	c		1002241	0					
ANR	1002485	CompoundStatement		77:25:2017:2017	1002241	1					
ANR	1002486	ExpressionStatement	tvalue = name	1008:7:24872:24885	1002241	0	True				
ANR	1002487	AssignmentExpression	tvalue = name		1002241	0		=			
ANR	1002488	Identifier	tvalue		1002241	0					
ANR	1002489	Identifier	name		1002241	1					
ANR	1002490	GotoStatement	goto tryagain ;	1009:7:24894:24907	1002241	1	True				
ANR	1002491	Identifier	tryagain		1002241	0					
ANR	1002492	ElseStatement	else		1002241	0					
ANR	1002493	CompoundStatement		81:12:2083:2083	1002241	0					
ANR	1002494	IfStatement	if ( ! ISIDCHAR ( c ) )		1002241	0					
ANR	1002495	Condition	! ISIDCHAR ( c )	1012:10:24941:24952	1002241	0	True				
ANR	1002496	UnaryOperationExpression	! ISIDCHAR ( c )		1002241	0					
ANR	1002497	UnaryOperator	!		1002241	0					
ANR	1002498	CallExpression	ISIDCHAR ( c )		1002241	1					
ANR	1002499	Callee	ISIDCHAR		1002241	0					
ANR	1002500	Identifier	ISIDCHAR		1002241	0					
ANR	1002501	ArgumentList	c		1002241	1					
ANR	1002502	Argument	c		1002241	0					
ANR	1002503	Identifier	c		1002241	0					
ANR	1002504	CompoundStatement		82:25:2110:2110	1002241	1					
ANR	1002505	ExpressionStatement	tvalue = name	1013:7:24965:24978	1002241	0	True				
ANR	1002506	AssignmentExpression	tvalue = name		1002241	0		=			
ANR	1002507	Identifier	tvalue		1002241	0					
ANR	1002508	Identifier	name		1002241	1					
ANR	1002509	GotoStatement	goto tryagain ;	1014:7:24987:25000	1002241	1	True				
ANR	1002510	Identifier	tryagain		1002241	0					
ANR	1002511	IfStatement	if ( * value == ')' )		1002241	3					
ANR	1002512	Condition	* value == ')'	1019:8:25032:25044	1002241	0	True				
ANR	1002513	EqualityExpression	* value == ')'		1002241	0		==			
ANR	1002514	UnaryOperationExpression	* value		1002241	0					
ANR	1002515	UnaryOperator	*		1002241	0					
ANR	1002516	Identifier	value		1002241	1					
ANR	1002517	PrimaryExpression	')'		1002241	1					
ANR	1002518	CompoundStatement		95:5:2481:2505	1002241	1					
ANR	1002519	IdentifierDeclStatement	int namelen = value - name ;	1025:5:25327:25351	1002241	0	True				
ANR	1002520	IdentifierDecl	namelen = value - name		1002241	0					
ANR	1002521	IdentifierDeclType	int		1002241	0					
ANR	1002522	Identifier	namelen		1002241	1					
ANR	1002523	AssignmentExpression	namelen = value - name		1002241	2		=			
ANR	1002524	Identifier	namelen		1002241	0					
ANR	1002525	AdditiveExpression	value - name		1002241	1		-			
ANR	1002526	Identifier	value		1002241	0					
ANR	1002527	Identifier	name		1002241	1					
ANR	1002528	IfStatement	"if ( ! self || ( strncasecmp ( name , self , namelen ) == MATCH && self [ namelen ] == '\\0' ) )"		1002241	1					
ANR	1002529	Condition	"! self || ( strncasecmp ( name , self , namelen ) == MATCH && self [ namelen ] == '\\0' )"	1026:9:25362:25442	1002241	0	True				
ANR	1002530	OrExpression	"! self || ( strncasecmp ( name , self , namelen ) == MATCH && self [ namelen ] == '\\0' )"		1002241	0		||			
ANR	1002531	UnaryOperationExpression	! self		1002241	0					
ANR	1002532	UnaryOperator	!		1002241	0					
ANR	1002533	Identifier	self		1002241	1					
ANR	1002534	AndExpression	"strncasecmp ( name , self , namelen ) == MATCH && self [ namelen ] == '\\0'"		1002241	1		&&			
ANR	1002535	EqualityExpression	"strncasecmp ( name , self , namelen ) == MATCH"		1002241	0		==			
ANR	1002536	CallExpression	"strncasecmp ( name , self , namelen )"		1002241	0					
ANR	1002537	Callee	strncasecmp		1002241	0					
ANR	1002538	Identifier	strncasecmp		1002241	0					
ANR	1002539	ArgumentList	name		1002241	1					
ANR	1002540	Argument	name		1002241	0					
ANR	1002541	Identifier	name		1002241	0					
ANR	1002542	Argument	self		1002241	1					
ANR	1002543	Identifier	self		1002241	0					
ANR	1002544	Argument	namelen		1002241	2					
ANR	1002545	Identifier	namelen		1002241	0					
ANR	1002546	Identifier	MATCH		1002241	1					
ANR	1002547	EqualityExpression	self [ namelen ] == '\\0'		1002241	1		==			
ANR	1002548	ArrayIndexing	self [ namelen ]		1002241	0					
ANR	1002549	Identifier	self		1002241	0					
ANR	1002550	Identifier	namelen		1002241	1					
ANR	1002551	PrimaryExpression	'\\0'		1002241	1					
ANR	1002552	CompoundStatement		96:93:2600:2600	1002241	1					
ANR	1002553	IfStatement	"if ( ! self && strncasecmp ( name , DOLLAR_ID , namelen ) == MATCH )"		1002241	0					
ANR	1002554	Condition	"! self && strncasecmp ( name , DOLLAR_ID , namelen ) == MATCH"	1037:11:25963:26015	1002241	0	True				
ANR	1002555	AndExpression	"! self && strncasecmp ( name , DOLLAR_ID , namelen ) == MATCH"		1002241	0		&&			
ANR	1002556	UnaryOperationExpression	! self		1002241	0					
ANR	1002557	UnaryOperator	!		1002241	0					
ANR	1002558	Identifier	self		1002241	1					
ANR	1002559	EqualityExpression	"strncasecmp ( name , DOLLAR_ID , namelen ) == MATCH"		1002241	1		==			
ANR	1002560	CallExpression	"strncasecmp ( name , DOLLAR_ID , namelen )"		1002241	0					
ANR	1002561	Callee	strncasecmp		1002241	0					
ANR	1002562	Identifier	strncasecmp		1002241	0					
ANR	1002563	ArgumentList	name		1002241	1					
ANR	1002564	Argument	name		1002241	0					
ANR	1002565	Identifier	name		1002241	0					
ANR	1002566	Argument	DOLLAR_ID		1002241	1					
ANR	1002567	Identifier	DOLLAR_ID		1002241	0					
ANR	1002568	Argument	namelen		1002241	2					
ANR	1002569	Identifier	namelen		1002241	0					
ANR	1002570	Identifier	MATCH		1002241	1					
ANR	1002571	CompoundStatement		107:67:3173:3173	1002241	1					
ANR	1002572	ExpressionStatement	tvalue = name	1038:7:26028:26041	1002241	0	True				
ANR	1002573	AssignmentExpression	tvalue = name		1002241	0		=			
ANR	1002574	Identifier	tvalue		1002241	0					
ANR	1002575	Identifier	name		1002241	1					
ANR	1002576	GotoStatement	goto tryagain ;	1039:7:26050:26063	1002241	1	True				
ANR	1002577	Identifier	tryagain		1002241	0					
ANR	1002578	ExpressionStatement	right = value	1041:6:26079:26092	1002241	1	True				
ANR	1002579	AssignmentExpression	right = value		1002241	0		=			
ANR	1002580	Identifier	right		1002241	0					
ANR	1002581	Identifier	value		1002241	1					
ANR	1002582	BreakStatement	break ;	1042:6:26100:26105	1002241	2	True				
ANR	1002583	ElseStatement	else		1002241	0					
ANR	1002584	CompoundStatement		113:12:3273:3273	1002241	0					
ANR	1002585	ExpressionStatement	tvalue = name	1044:6:26127:26140	1002241	0	True				
ANR	1002586	AssignmentExpression	tvalue = name		1002241	0		=			
ANR	1002587	Identifier	tvalue		1002241	0					
ANR	1002588	Identifier	name		1002241	1					
ANR	1002589	GotoStatement	goto tryagain ;	1045:6:26148:26161	1002241	1	True				
ANR	1002590	Identifier	tryagain		1002241	0					
ANR	1002591	ElseStatement	else		1002241	0					
ANR	1002592	CompoundStatement		117:11:3335:3335	1002241	0					
ANR	1002593	ExpressionStatement	tvalue = name	1048:5:26188:26201	1002241	0	True				
ANR	1002594	AssignmentExpression	tvalue = name		1002241	0		=			
ANR	1002595	Identifier	tvalue		1002241	0					
ANR	1002596	Identifier	name		1002241	1					
ANR	1002597	GotoStatement	goto tryagain ;	1049:5:26208:26221	1002241	1	True				
ANR	1002598	Identifier	tryagain		1002241	0					
ANR	1002599	ElseStatement	else		1002241	0					
ANR	1002600	CompoundStatement		122:9:3397:3397	1002241	0					
ANR	1002601	ExpressionStatement	tvalue = value	1053:3:26248:26262	1002241	0	True				
ANR	1002602	AssignmentExpression	tvalue = value		1002241	0		=			
ANR	1002603	Identifier	tvalue		1002241	0					
ANR	1002604	Identifier	value		1002241	1					
ANR	1002605	GotoStatement	goto tryagain ;	1054:3:26267:26280	1002241	1	True				
ANR	1002606	Identifier	tryagain		1002241	0					
ANR	1002607	ExpressionStatement	* left_end = '\\0'	1058:1:26291:26307	1002241	5	True				
ANR	1002608	AssignmentExpression	* left_end = '\\0'		1002241	0		=			
ANR	1002609	UnaryOperationExpression	* left_end		1002241	0					
ANR	1002610	UnaryOperator	*		1002241	0					
ANR	1002611	Identifier	left_end		1002241	1					
ANR	1002612	PrimaryExpression	'\\0'		1002241	1					
ANR	1002613	ExpressionStatement	* right ++ = '\\0'	1059:1:26310:26325	1002241	6	True				
ANR	1002614	AssignmentExpression	* right ++ = '\\0'		1002241	0		=			
ANR	1002615	UnaryOperationExpression	* right ++		1002241	0					
ANR	1002616	UnaryOperator	*		1002241	0					
ANR	1002617	PostIncDecOperationExpression	right ++		1002241	1					
ANR	1002618	Identifier	right		1002241	0					
ANR	1002619	IncDec	++		1002241	1					
ANR	1002620	PrimaryExpression	'\\0'		1002241	1					
ANR	1002621	ExpressionStatement	* leftp = left	1061:1:26329:26342	1002241	7	True				
ANR	1002622	AssignmentExpression	* leftp = left		1002241	0		=			
ANR	1002623	UnaryOperationExpression	* leftp		1002241	0					
ANR	1002624	UnaryOperator	*		1002241	0					
ANR	1002625	Identifier	leftp		1002241	1					
ANR	1002626	Identifier	left		1002241	1					
ANR	1002627	ExpressionStatement	* namep = name	1062:1:26345:26358	1002241	8	True				
ANR	1002628	AssignmentExpression	* namep = name		1002241	0		=			
ANR	1002629	UnaryOperationExpression	* namep		1002241	0					
ANR	1002630	UnaryOperator	*		1002241	0					
ANR	1002631	Identifier	namep		1002241	1					
ANR	1002632	Identifier	name		1002241	1					
ANR	1002633	ExpressionStatement	* rightp = right	1063:1:26361:26376	1002241	9	True				
ANR	1002634	AssignmentExpression	* rightp = right		1002241	0		=			
ANR	1002635	UnaryOperationExpression	* rightp		1002241	0					
ANR	1002636	UnaryOperator	*		1002241	0					
ANR	1002637	Identifier	rightp		1002241	1					
ANR	1002638	Identifier	right		1002241	1					
ANR	1002639	ReturnStatement	return ( 1 ) ;	1065:1:26380:26391	1002241	10	True				
ANR	1002640	PrimaryExpression	1		1002241	0					
ANR	1002641	ReturnType	int		1002241	1					
ANR	1002642	Identifier	find_config_macro		1002241	2					
ANR	1002643	ParameterList	"register char * value , register char * * leftp , register char * * namep , register char * * rightp , const char * self , bool getdollardollar , int search_pos"		1002241	3					
ANR	1002644	Parameter	register char * value	927:19:22687:22706	1002241	0	True				
ANR	1002645	ParameterType	register char *		1002241	0					
ANR	1002646	Identifier	value		1002241	1					
ANR	1002647	Parameter	register char * * leftp	927:41:22709:22729	1002241	1	True				
ANR	1002648	ParameterType	register char * *		1002241	0					
ANR	1002649	Identifier	leftp		1002241	1					
ANR	1002650	Parameter	register char * * namep	928:3:22736:22756	1002241	2	True				
ANR	1002651	ParameterType	register char * *		1002241	0					
ANR	1002652	Identifier	namep		1002241	1					
ANR	1002653	Parameter	register char * * rightp	928:26:22759:22780	1002241	3	True				
ANR	1002654	ParameterType	register char * *		1002241	0					
ANR	1002655	Identifier	rightp		1002241	1					
ANR	1002656	Parameter	const char * self	929:3:22786:22801	1002241	4	True				
ANR	1002657	ParameterType	const char *		1002241	0					
ANR	1002658	Identifier	self		1002241	1					
ANR	1002659	Parameter	bool getdollardollar	930:3:22807:22826	1002241	5	True				
ANR	1002660	ParameterType	bool		1002241	0					
ANR	1002661	Identifier	getdollardollar		1002241	1					
ANR	1002662	Parameter	int search_pos	930:25:22829:22842	1002241	6	True				
ANR	1002663	ParameterType	int		1002241	0					
ANR	1002664	Identifier	search_pos		1002241	1					
ANR	1002665	CFGEntryNode	ENTRY		1002241		True				
ANR	1002666	CFGExitNode	EXIT		1002241		True				
ANR	1002667	InfiniteForNode	true		1002241		True				
ANR	1002668	Symbol	ISDDCHAR		1002241						
ANR	1002669	Symbol	* ++ value		1002241						
ANR	1002670	Symbol	strncasecmp		1002241						
ANR	1002671	Symbol	namelen		1002241						
ANR	1002672	Symbol	end_marker		1002241						
ANR	1002673	Symbol	* ( value + sizeof ( char ) )		1002241						
ANR	1002674	Symbol	DOLLAR_ID		1002241						
ANR	1002675	Symbol	search_pos		1002241						
ANR	1002676	Symbol	ISIDCHAR		1002241						
ANR	1002677	Symbol	* leftp		1002241						
ANR	1002678	Symbol	left_end		1002241						
ANR	1002679	Symbol	* namep		1002241						
ANR	1002680	Symbol	rightp		1002241						
ANR	1002681	Symbol	getdollardollar		1002241						
ANR	1002682	Symbol	* left_end		1002241						
ANR	1002683	Symbol	* right ++		1002241						
ANR	1002684	Symbol	value		1002241						
ANR	1002685	Symbol	tvalue		1002241						
ANR	1002686	Symbol	NULL		1002241						
ANR	1002687	Symbol	c		1002241						
ANR	1002688	Symbol	* self		1002241						
ANR	1002689	Symbol	leftp		1002241						
ANR	1002690	Symbol	* value ++		1002241						
ANR	1002691	Symbol	right		1002241						
ANR	1002692	Symbol	* rightp		1002241						
ANR	1002693	Symbol	left		1002241						
ANR	1002694	Symbol	strstr		1002241						
ANR	1002695	Symbol	* value		1002241						
ANR	1002696	Symbol	* namelen		1002241						
ANR	1002697	Symbol	name		1002241						
ANR	1002698	Symbol	self		1002241						
ANR	1002699	Symbol	namep		1002241						
ANR	1002700	Symbol	MATCH		1002241						
ANR	1002701	Function	lookup_macro_lower	1075:0:26542:26839							
ANR	1002702	FunctionDef	"lookup_macro_lower (const char * name , BUCKET * * table , int table_size)"		1002701	0					
ANR	1002703	CompoundStatement		1077:0:26620:26839	1002701	0					
ANR	1002704	IdentifierDeclStatement	int loc ;	1078:1:26623:26633	1002701	0	True				
ANR	1002705	IdentifierDecl	loc		1002701	0					
ANR	1002706	IdentifierDeclType	int		1002701	0					
ANR	1002707	Identifier	loc		1002701	1					
ANR	1002708	Statement	register	1079:1:26636:26643	1002701	1	True				
ANR	1002709	IdentifierDeclStatement	BUCKET * ptr ;	1079:10:26645:26656	1002701	2	True				
ANR	1002710	IdentifierDecl	* ptr		1002701	0					
ANR	1002711	IdentifierDeclType	BUCKET *		1002701	0					
ANR	1002712	Identifier	ptr		1002701	1					
ANR	1002713	ExpressionStatement	"loc = condor_hash ( name , table_size )"	1081:1:26660:26697	1002701	3	True				
ANR	1002714	AssignmentExpression	"loc = condor_hash ( name , table_size )"		1002701	0		=			
ANR	1002715	Identifier	loc		1002701	0					
ANR	1002716	CallExpression	"condor_hash ( name , table_size )"		1002701	1					
ANR	1002717	Callee	condor_hash		1002701	0					
ANR	1002718	Identifier	condor_hash		1002701	0					
ANR	1002719	ArgumentList	name		1002701	1					
ANR	1002720	Argument	name		1002701	0					
ANR	1002721	Identifier	name		1002701	0					
ANR	1002722	Argument	table_size		1002701	1					
ANR	1002723	Identifier	table_size		1002701	0					
ANR	1002724	ForStatement	for ( ptr = table [ loc ] ; ptr ; ptr = ptr -> next )		1002701	4					
ANR	1002725	ForInit	ptr = table [ loc ] ;	1082:6:26705:26719	1002701	0	True				
ANR	1002726	AssignmentExpression	ptr = table [ loc ]		1002701	0		=			
ANR	1002727	Identifier	ptr		1002701	0					
ANR	1002728	ArrayIndexing	table [ loc ]		1002701	1					
ANR	1002729	Identifier	table		1002701	0					
ANR	1002730	Identifier	loc		1002701	1					
ANR	1002731	Condition	ptr	1082:22:26721:26723	1002701	1	True				
ANR	1002732	Identifier	ptr		1002701	0					
ANR	1002733	AssignmentExpression	ptr = ptr -> next	1082:27:26726:26738	1002701	2	True	=			
ANR	1002734	Identifier	ptr		1002701	0					
ANR	1002735	PtrMemberAccess	ptr -> next		1002701	1					
ANR	1002736	Identifier	ptr		1002701	0					
ANR	1002737	Identifier	next		1002701	1					
ANR	1002738	CompoundStatement		6:43:121:121	1002701	3					
ANR	1002739	IfStatement	"if ( ! strcmp ( name , ptr -> name ) )"		1002701	0					
ANR	1002740	Condition	"! strcmp ( name , ptr -> name )"	1083:6:26750:26772	1002701	0	True				
ANR	1002741	UnaryOperationExpression	"! strcmp ( name , ptr -> name )"		1002701	0					
ANR	1002742	UnaryOperator	!		1002701	0					
ANR	1002743	CallExpression	"strcmp ( name , ptr -> name )"		1002701	1					
ANR	1002744	Callee	strcmp		1002701	0					
ANR	1002745	Identifier	strcmp		1002701	0					
ANR	1002746	ArgumentList	name		1002701	1					
ANR	1002747	Argument	name		1002701	0					
ANR	1002748	Identifier	name		1002701	0					
ANR	1002749	Argument	ptr -> name		1002701	1					
ANR	1002750	PtrMemberAccess	ptr -> name		1002701	0					
ANR	1002751	Identifier	ptr		1002701	0					
ANR	1002752	Identifier	name		1002701	1					
ANR	1002753	CompoundStatement		7:32:155:155	1002701	1					
ANR	1002754	ExpressionStatement	ptr -> used = 1	1084:3:26781:26794	1002701	0	True				
ANR	1002755	AssignmentExpression	ptr -> used = 1		1002701	0		=			
ANR	1002756	PtrMemberAccess	ptr -> used		1002701	0					
ANR	1002757	Identifier	ptr		1002701	0					
ANR	1002758	Identifier	used		1002701	1					
ANR	1002759	PrimaryExpression	1		1002701	1					
ANR	1002760	ReturnStatement	return ptr -> value ;	1085:3:26799:26816	1002701	1	True				
ANR	1002761	PtrMemberAccess	ptr -> value		1002701	0					
ANR	1002762	Identifier	ptr		1002701	0					
ANR	1002763	Identifier	value		1002701	1					
ANR	1002764	ReturnStatement	return NULL ;	1088:1:26826:26837	1002701	5	True				
ANR	1002765	Identifier	NULL		1002701	0					
ANR	1002766	ReturnType	char *		1002701	1					
ANR	1002767	Identifier	lookup_macro_lower		1002701	2					
ANR	1002768	ParameterList	"const char * name , BUCKET * * table , int table_size"		1002701	3					
ANR	1002769	Parameter	const char * name	1076:20:26569:26584	1002701	0	True				
ANR	1002770	ParameterType	const char *		1002701	0					
ANR	1002771	Identifier	name		1002701	1					
ANR	1002772	Parameter	BUCKET * * table	1076:38:26587:26600	1002701	1	True				
ANR	1002773	ParameterType	BUCKET * *		1002701	0					
ANR	1002774	Identifier	table		1002701	1					
ANR	1002775	Parameter	int table_size	1076:54:26603:26616	1002701	2	True				
ANR	1002776	ParameterType	int		1002701	0					
ANR	1002777	Identifier	table_size		1002701	1					
ANR	1002778	CFGEntryNode	ENTRY		1002701		True				
ANR	1002779	CFGExitNode	EXIT		1002701		True				
ANR	1002780	Symbol	strcmp		1002701						
ANR	1002781	Symbol	table_size		1002701						
ANR	1002782	Symbol	loc		1002701						
ANR	1002783	Symbol	NULL		1002701						
ANR	1002784	Symbol	condor_hash		1002701						
ANR	1002785	Symbol	ptr -> name		1002701						
ANR	1002786	Symbol	* table		1002701						
ANR	1002787	Symbol	ptr -> used		1002701						
ANR	1002788	Symbol	* loc		1002701						
ANR	1002789	Symbol	ptr -> value		1002701						
ANR	1002790	Symbol	ptr		1002701						
ANR	1002791	Symbol	name		1002701						
ANR	1002792	Symbol	* ptr		1002701						
ANR	1002793	Symbol	table		1002701						
ANR	1002794	Symbol	ptr -> next		1002701						
ANR	1002795	Function	lookup_macro	1090:0:26841:27222							
ANR	1002796	FunctionDef	"lookup_macro (const char * name , BUCKET * * table , int table_size)"		1002795	0					
ANR	1002797	CompoundStatement		1092:0:26913:27222	1002795	0					
ANR	1002798	IdentifierDeclStatement	char tmp_name [ MAX_PARAM_LEN ] ;	1093:1:26916:26948	1002795	0	True				
ANR	1002799	IdentifierDecl	tmp_name [ MAX_PARAM_LEN ]		1002795	0					
ANR	1002800	IdentifierDeclType	char [ MAX_PARAM_LEN ]		1002795	0					
ANR	1002801	Identifier	tmp_name		1002795	1					
ANR	1002802	Identifier	MAX_PARAM_LEN		1002795	2					
ANR	1002803	ExpressionStatement	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"	1097:1:27067:27109	1002795	1	True				
ANR	1002804	CallExpression	"snprintf ( tmp_name , MAX_PARAM_LEN , ""%s"" , name )"		1002795	0					
ANR	1002805	Callee	snprintf		1002795	0					
ANR	1002806	Identifier	snprintf		1002795	0					
ANR	1002807	ArgumentList	tmp_name		1002795	1					
ANR	1002808	Argument	tmp_name		1002795	0					
ANR	1002809	Identifier	tmp_name		1002795	0					
ANR	1002810	Argument	MAX_PARAM_LEN		1002795	1					
ANR	1002811	Identifier	MAX_PARAM_LEN		1002795	0					
ANR	1002812	Argument	"""%s"""		1002795	2					
ANR	1002813	PrimaryExpression	"""%s"""		1002795	0					
ANR	1002814	Argument	name		1002795	3					
ANR	1002815	Identifier	name		1002795	0					
ANR	1002816	ExpressionStatement	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'	1098:1:27112:27144	1002795	2	True				
ANR	1002817	AssignmentExpression	tmp_name [ MAX_PARAM_LEN - 1 ] = '\\0'		1002795	0		=			
ANR	1002818	ArrayIndexing	tmp_name [ MAX_PARAM_LEN - 1 ]		1002795	0					
ANR	1002819	Identifier	tmp_name		1002795	0					
ANR	1002820	AdditiveExpression	MAX_PARAM_LEN - 1		1002795	1		-			
ANR	1002821	Identifier	MAX_PARAM_LEN		1002795	0					
ANR	1002822	PrimaryExpression	1		1002795	1					
ANR	1002823	PrimaryExpression	'\\0'		1002795	1					
ANR	1002824	ExpressionStatement	strlwr ( tmp_name )	1099:1:27147:27165	1002795	3	True				
ANR	1002825	CallExpression	strlwr ( tmp_name )		1002795	0					
ANR	1002826	Callee	strlwr		1002795	0					
ANR	1002827	Identifier	strlwr		1002795	0					
ANR	1002828	ArgumentList	tmp_name		1002795	1					
ANR	1002829	Argument	tmp_name		1002795	0					
ANR	1002830	Identifier	tmp_name		1002795	0					
ANR	1002831	ReturnStatement	"return lookup_macro_lower ( tmp_name , table , table_size ) ;"	1100:1:27168:27220	1002795	4	True				
ANR	1002832	CallExpression	"lookup_macro_lower ( tmp_name , table , table_size )"		1002795	0					
ANR	1002833	Callee	lookup_macro_lower		1002795	0					
ANR	1002834	Identifier	lookup_macro_lower		1002795	0					
ANR	1002835	ArgumentList	tmp_name		1002795	1					
ANR	1002836	Argument	tmp_name		1002795	0					
ANR	1002837	Identifier	tmp_name		1002795	0					
ANR	1002838	Argument	table		1002795	1					
ANR	1002839	Identifier	table		1002795	0					
ANR	1002840	Argument	table_size		1002795	2					
ANR	1002841	Identifier	table_size		1002795	0					
ANR	1002842	ReturnType	char *		1002795	1					
ANR	1002843	Identifier	lookup_macro		1002795	2					
ANR	1002844	ParameterList	"const char * name , BUCKET * * table , int table_size"		1002795	3					
ANR	1002845	Parameter	const char * name	1091:14:26862:26877	1002795	0	True				
ANR	1002846	ParameterType	const char *		1002795	0					
ANR	1002847	Identifier	name		1002795	1					
ANR	1002848	Parameter	BUCKET * * table	1091:32:26880:26893	1002795	1	True				
ANR	1002849	ParameterType	BUCKET * *		1002795	0					
ANR	1002850	Identifier	table		1002795	1					
ANR	1002851	Parameter	int table_size	1091:48:26896:26909	1002795	2	True				
ANR	1002852	ParameterType	int		1002795	0					
ANR	1002853	Identifier	table_size		1002795	1					
ANR	1002854	CFGEntryNode	ENTRY		1002795		True				
ANR	1002855	CFGExitNode	EXIT		1002795		True				
ANR	1002856	Symbol	table_size		1002795						
ANR	1002857	Symbol	lookup_macro_lower		1002795						
ANR	1002858	Symbol	name		1002795						
ANR	1002859	Symbol	MAX_PARAM_LEN		1002795						
ANR	1002860	Symbol	table		1002795						
ANR	1002861	Symbol	tmp_name		1002795						
ANR	1002862	Symbol	* MAX_PARAM_LEN		1002795						
ANR	1002863	Symbol	* tmp_name		1002795						
