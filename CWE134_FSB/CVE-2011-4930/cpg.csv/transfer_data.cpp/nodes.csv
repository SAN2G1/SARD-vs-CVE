command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5464498	File	data/converged/CVE-2011-4930_htcondor/transfer_data.cpp								
ANR	5464499	DeclStmt									
ANR	5464500	Decl							const char	const char *	MyName
ANR	5464501	DeclStmt									
ANR	5464502	Decl							MyString	MyString	global_constraint
ANR	5464503	DeclStmt									
ANR	5464504	Decl							bool	bool	had_error
ANR	5464505	DeclStmt									
ANR	5464506	Decl							DCSchedd	DCSchedd *	schedd
ANR	5464507	DeclStmt									
ANR	5464508	Decl							bool	bool	All
ANR	5464509	DeclStmt									
ANR	5464510	Decl							SandboxTransferMethod	SandboxTransferMethod	st_method
ANR	5464511	DeclStmt									
ANR	5464512	Decl							void	void ( const char * )	procArg
ANR	5464513	DeclStmt									
ANR	5464514	Decl							void	void ( const char * )	addConstraint
ANR	5464515	DeclStmt									
ANR	5464516	Decl							void	void ( )	handleAll
ANR	5464517	Function	usage	52:0:1525:3160							
ANR	5464518	FunctionDef	usage (int iExitCode)		5464517	0					
ANR	5464519	CompoundStatement		53:0:1551:3160	5464517	0					
ANR	5464520	ExpressionStatement	"fprintf ( stderr , ""Usage: %s [options] [constraints]\\n"" , MyName )"	54:1:1554:1618	5464517	0	True				
ANR	5464521	CallExpression	"fprintf ( stderr , ""Usage: %s [options] [constraints]\\n"" , MyName )"		5464517	0					
ANR	5464522	Callee	fprintf		5464517	0					
ANR	5464523	Identifier	fprintf		5464517	0					
ANR	5464524	ArgumentList	stderr		5464517	1					
ANR	5464525	Argument	stderr		5464517	0					
ANR	5464526	Identifier	stderr		5464517	0					
ANR	5464527	Argument	"""Usage: %s [options] [constraints]\\n"""		5464517	1					
ANR	5464528	PrimaryExpression	"""Usage: %s [options] [constraints]\\n"""		5464517	0					
ANR	5464529	Argument	MyName		5464517	2					
ANR	5464530	Identifier	MyName		5464517	0					
ANR	5464531	ExpressionStatement	"fprintf ( stderr , "" where [options] is zero or more of:\\n"" )"	55:1:1621:1680	5464517	1	True				
ANR	5464532	CallExpression	"fprintf ( stderr , "" where [options] is zero or more of:\\n"" )"		5464517	0					
ANR	5464533	Callee	fprintf		5464517	0					
ANR	5464534	Identifier	fprintf		5464517	0					
ANR	5464535	ArgumentList	stderr		5464517	1					
ANR	5464536	Argument	stderr		5464517	0					
ANR	5464537	Identifier	stderr		5464517	0					
ANR	5464538	Argument	""" where [options] is zero or more of:\\n"""		5464517	1					
ANR	5464539	PrimaryExpression	""" where [options] is zero or more of:\\n"""		5464517	0					
ANR	5464540	ExpressionStatement	"fprintf ( stderr , ""  -help               Display this message and exit\\n"" )"	56:1:1683:1757	5464517	2	True				
ANR	5464541	CallExpression	"fprintf ( stderr , ""  -help               Display this message and exit\\n"" )"		5464517	0					
ANR	5464542	Callee	fprintf		5464517	0					
ANR	5464543	Identifier	fprintf		5464517	0					
ANR	5464544	ArgumentList	stderr		5464517	1					
ANR	5464545	Argument	stderr		5464517	0					
ANR	5464546	Identifier	stderr		5464517	0					
ANR	5464547	Argument	"""  -help               Display this message and exit\\n"""		5464517	1					
ANR	5464548	PrimaryExpression	"""  -help               Display this message and exit\\n"""		5464517	0					
ANR	5464549	ExpressionStatement	"fprintf ( stderr , ""  -version            Display version information and exit\\n"" )"	57:1:1760:1841	5464517	3	True				
ANR	5464550	CallExpression	"fprintf ( stderr , ""  -version            Display version information and exit\\n"" )"		5464517	0					
ANR	5464551	Callee	fprintf		5464517	0					
ANR	5464552	Identifier	fprintf		5464517	0					
ANR	5464553	ArgumentList	stderr		5464517	1					
ANR	5464554	Argument	stderr		5464517	0					
ANR	5464555	Identifier	stderr		5464517	0					
ANR	5464556	Argument	"""  -version            Display version information and exit\\n"""		5464517	1					
ANR	5464557	PrimaryExpression	"""  -version            Display version information and exit\\n"""		5464517	0					
ANR	5464558	ExpressionStatement	"fprintf ( stderr , ""  -name schedd_name   Connect to the given schedd\\n"" )"	63:1:2049:2121	5464517	4	True				
ANR	5464559	CallExpression	"fprintf ( stderr , ""  -name schedd_name   Connect to the given schedd\\n"" )"		5464517	0					
ANR	5464560	Callee	fprintf		5464517	0					
ANR	5464561	Identifier	fprintf		5464517	0					
ANR	5464562	ArgumentList	stderr		5464517	1					
ANR	5464563	Argument	stderr		5464517	0					
ANR	5464564	Identifier	stderr		5464517	0					
ANR	5464565	Argument	"""  -name schedd_name   Connect to the given schedd\\n"""		5464517	1					
ANR	5464566	PrimaryExpression	"""  -name schedd_name   Connect to the given schedd\\n"""		5464517	0					
ANR	5464567	ExpressionStatement	"fprintf ( stderr , ""  -pool hostname      Use the given central manager to find daemons\\n"" )"	64:1:2124:2214	5464517	5	True				
ANR	5464568	CallExpression	"fprintf ( stderr , ""  -pool hostname      Use the given central manager to find daemons\\n"" )"		5464517	0					
ANR	5464569	Callee	fprintf		5464517	0					
ANR	5464570	Identifier	fprintf		5464517	0					
ANR	5464571	ArgumentList	stderr		5464517	1					
ANR	5464572	Argument	stderr		5464517	0					
ANR	5464573	Identifier	stderr		5464517	0					
ANR	5464574	Argument	"""  -pool hostname      Use the given central manager to find daemons\\n"""		5464517	1					
ANR	5464575	PrimaryExpression	"""  -pool hostname      Use the given central manager to find daemons\\n"""		5464517	0					
ANR	5464576	ExpressionStatement	"fprintf ( stderr , ""  -addr <ip:port>     Connect directly to the given \\""sinful string\\""\\n"" )"	65:1:2217:2309	5464517	6	True				
ANR	5464577	CallExpression	"fprintf ( stderr , ""  -addr <ip:port>     Connect directly to the given \\""sinful string\\""\\n"" )"		5464517	0					
ANR	5464578	Callee	fprintf		5464517	0					
ANR	5464579	Identifier	fprintf		5464517	0					
ANR	5464580	ArgumentList	stderr		5464517	1					
ANR	5464581	Argument	stderr		5464517	0					
ANR	5464582	Identifier	stderr		5464517	0					
ANR	5464583	Argument	"""  -addr <ip:port>     Connect directly to the given \\""sinful string\\""\\n"""		5464517	1					
ANR	5464584	PrimaryExpression	"""  -addr <ip:port>     Connect directly to the given \\""sinful string\\""\\n"""		5464517	0					
ANR	5464585	ExpressionStatement	"fprintf ( stderr , ""  -stm <method>\\t\\thow to move a sandbox out of Condor\\n"" )"	66:1:2312:2389	5464517	7	True				
ANR	5464586	CallExpression	"fprintf ( stderr , ""  -stm <method>\\t\\thow to move a sandbox out of Condor\\n"" )"		5464517	0					
ANR	5464587	Callee	fprintf		5464517	0					
ANR	5464588	Identifier	fprintf		5464517	0					
ANR	5464589	ArgumentList	stderr		5464517	1					
ANR	5464590	Argument	stderr		5464517	0					
ANR	5464591	Identifier	stderr		5464517	0					
ANR	5464592	Argument	"""  -stm <method>\\t\\thow to move a sandbox out of Condor\\n"""		5464517	1					
ANR	5464593	PrimaryExpression	"""  -stm <method>\\t\\thow to move a sandbox out of Condor\\n"""		5464517	0					
ANR	5464594	ExpressionStatement	"fprintf ( stderr , ""               \\t\\tAvailable methods:\\n\\n"" )"	67:1:2392:2454	5464517	8	True				
ANR	5464595	CallExpression	"fprintf ( stderr , ""               \\t\\tAvailable methods:\\n\\n"" )"		5464517	0					
ANR	5464596	Callee	fprintf		5464517	0					
ANR	5464597	Identifier	fprintf		5464517	0					
ANR	5464598	ArgumentList	stderr		5464517	1					
ANR	5464599	Argument	stderr		5464517	0					
ANR	5464600	Identifier	stderr		5464517	0					
ANR	5464601	Argument	"""               \\t\\tAvailable methods:\\n\\n"""		5464517	1					
ANR	5464602	PrimaryExpression	"""               \\t\\tAvailable methods:\\n\\n"""		5464517	0					
ANR	5464603	ExpressionStatement	"fprintf ( stderr , ""               \\t\\t\\tstm_use_schedd_only\\n"" )"	68:1:2457:2520	5464517	9	True				
ANR	5464604	CallExpression	"fprintf ( stderr , ""               \\t\\t\\tstm_use_schedd_only\\n"" )"		5464517	0					
ANR	5464605	Callee	fprintf		5464517	0					
ANR	5464606	Identifier	fprintf		5464517	0					
ANR	5464607	ArgumentList	stderr		5464517	1					
ANR	5464608	Argument	stderr		5464517	0					
ANR	5464609	Identifier	stderr		5464517	0					
ANR	5464610	Argument	"""               \\t\\t\\tstm_use_schedd_only\\n"""		5464517	1					
ANR	5464611	PrimaryExpression	"""               \\t\\t\\tstm_use_schedd_only\\n"""		5464517	0					
ANR	5464612	ExpressionStatement	"fprintf ( stderr , ""               \\t\\t\\tstm_use_transferd\\n\\n"" )"	69:1:2523:2586	5464517	10	True				
ANR	5464613	CallExpression	"fprintf ( stderr , ""               \\t\\t\\tstm_use_transferd\\n\\n"" )"		5464517	0					
ANR	5464614	Callee	fprintf		5464517	0					
ANR	5464615	Identifier	fprintf		5464517	0					
ANR	5464616	ArgumentList	stderr		5464517	1					
ANR	5464617	Argument	stderr		5464517	0					
ANR	5464618	Identifier	stderr		5464517	0					
ANR	5464619	Argument	"""               \\t\\t\\tstm_use_transferd\\n\\n"""		5464517	1					
ANR	5464620	PrimaryExpression	"""               \\t\\t\\tstm_use_transferd\\n\\n"""		5464517	0					
ANR	5464621	ExpressionStatement	"fprintf ( stderr , "" and where [constraints] is one or more of:\\n"" )"	70:1:2589:2655	5464517	11	True				
ANR	5464622	CallExpression	"fprintf ( stderr , "" and where [constraints] is one or more of:\\n"" )"		5464517	0					
ANR	5464623	Callee	fprintf		5464517	0					
ANR	5464624	Identifier	fprintf		5464517	0					
ANR	5464625	ArgumentList	stderr		5464517	1					
ANR	5464626	Argument	stderr		5464517	0					
ANR	5464627	Identifier	stderr		5464517	0					
ANR	5464628	Argument	""" and where [constraints] is one or more of:\\n"""		5464517	1					
ANR	5464629	PrimaryExpression	""" and where [constraints] is one or more of:\\n"""		5464517	0					
ANR	5464630	ExpressionStatement	"fprintf ( stderr , ""  cluster.proc        transfer data for the given job\\n"" )"	71:1:2658:2733	5464517	12	True				
ANR	5464631	CallExpression	"fprintf ( stderr , ""  cluster.proc        transfer data for the given job\\n"" )"		5464517	0					
ANR	5464632	Callee	fprintf		5464517	0					
ANR	5464633	Identifier	fprintf		5464517	0					
ANR	5464634	ArgumentList	stderr		5464517	1					
ANR	5464635	Argument	stderr		5464517	0					
ANR	5464636	Identifier	stderr		5464517	0					
ANR	5464637	Argument	"""  cluster.proc        transfer data for the given job\\n"""		5464517	1					
ANR	5464638	PrimaryExpression	"""  cluster.proc        transfer data for the given job\\n"""		5464517	0					
ANR	5464639	ExpressionStatement	"fprintf ( stderr , ""  cluster             transfer data for the given cluster of jobs\\n"" )"	72:1:2736:2823	5464517	13	True				
ANR	5464640	CallExpression	"fprintf ( stderr , ""  cluster             transfer data for the given cluster of jobs\\n"" )"		5464517	0					
ANR	5464641	Callee	fprintf		5464517	0					
ANR	5464642	Identifier	fprintf		5464517	0					
ANR	5464643	ArgumentList	stderr		5464517	1					
ANR	5464644	Argument	stderr		5464517	0					
ANR	5464645	Identifier	stderr		5464517	0					
ANR	5464646	Argument	"""  cluster             transfer data for the given cluster of jobs\\n"""		5464517	1					
ANR	5464647	PrimaryExpression	"""  cluster             transfer data for the given cluster of jobs\\n"""		5464517	0					
ANR	5464648	ExpressionStatement	"fprintf ( stderr , ""  user                transfer data for all jobs owned by user\\n"" )"	73:1:2826:2911	5464517	14	True				
ANR	5464649	CallExpression	"fprintf ( stderr , ""  user                transfer data for all jobs owned by user\\n"" )"		5464517	0					
ANR	5464650	Callee	fprintf		5464517	0					
ANR	5464651	Identifier	fprintf		5464517	0					
ANR	5464652	ArgumentList	stderr		5464517	1					
ANR	5464653	Argument	stderr		5464517	0					
ANR	5464654	Identifier	stderr		5464517	0					
ANR	5464655	Argument	"""  user                transfer data for all jobs owned by user\\n"""		5464517	1					
ANR	5464656	PrimaryExpression	"""  user                transfer data for all jobs owned by user\\n"""		5464517	0					
ANR	5464657	ExpressionStatement	"fprintf ( stderr , ""  -constraint expr    transfer data for all jobs matching the boolean expression\\n"" )"	74:1:2914:3017	5464517	15	True				
ANR	5464658	CallExpression	"fprintf ( stderr , ""  -constraint expr    transfer data for all jobs matching the boolean expression\\n"" )"		5464517	0					
ANR	5464659	Callee	fprintf		5464517	0					
ANR	5464660	Identifier	fprintf		5464517	0					
ANR	5464661	ArgumentList	stderr		5464517	1					
ANR	5464662	Argument	stderr		5464517	0					
ANR	5464663	Identifier	stderr		5464517	0					
ANR	5464664	Argument	"""  -constraint expr    transfer data for all jobs matching the boolean expression\\n"""		5464517	1					
ANR	5464665	PrimaryExpression	"""  -constraint expr    transfer data for all jobs matching the boolean expression\\n"""		5464517	0					
ANR	5464666	Statement	fprintf	75:1:3020:3026	5464517	16	True				
ANR	5464667	Statement	(	75:8:3027:3027	5464517	17	True				
ANR	5464668	Statement	stderr	75:10:3029:3034	5464517	18	True				
ANR	5464669	Statement	","	75:16:3035:3035	5464517	19	True				
ANR	5464670	Statement	"""  -all                transfer data for all jobs """	75:18:3037:3087	5464517	20	True				
ANR	5464671	Statement	"""(cannot be used with other constraints)\\n"""	76:4:3093:3135	5464517	21	True				
ANR	5464672	Statement	)	76:48:3137:3137	5464517	22	True				
ANR	5464673	ExpressionStatement		76:49:3138:3138	5464517	23	True				
ANR	5464674	ExpressionStatement	exit ( iExitCode )	77:1:3141:3158	5464517	24	True				
ANR	5464675	CallExpression	exit ( iExitCode )		5464517	0					
ANR	5464676	Callee	exit		5464517	0					
ANR	5464677	Identifier	exit		5464517	0					
ANR	5464678	ArgumentList	iExitCode		5464517	1					
ANR	5464679	Argument	iExitCode		5464517	0					
ANR	5464680	Identifier	iExitCode		5464517	0					
ANR	5464681	ReturnType	void		5464517	1					
ANR	5464682	Identifier	usage		5464517	2					
ANR	5464683	ParameterList	int iExitCode		5464517	3					
ANR	5464684	Parameter	int iExitCode	52:11:1536:1548	5464517	0	True				
ANR	5464685	ParameterType	int		5464517	0					
ANR	5464686	Identifier	iExitCode		5464517	1					
ANR	5464687	CFGEntryNode	ENTRY		5464517		True				
ANR	5464688	CFGExitNode	EXIT		5464517		True				
ANR	5464689	Symbol	MyName		5464517						
ANR	5464690	Symbol	iExitCode		5464517						
ANR	5464691	Symbol	stderr		5464517						
ANR	5464692	Function	version	80:0:3163:3256							
ANR	5464693	FunctionDef	version ()		5464692	0					
ANR	5464694	CompoundStatement		82:0:3184:3256	5464692	0					
ANR	5464695	ExpressionStatement	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"	83:1:3187:3242	5464692	0	True				
ANR	5464696	CallExpression	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"		5464692	0					
ANR	5464697	Callee	printf		5464692	0					
ANR	5464698	Identifier	printf		5464692	0					
ANR	5464699	ArgumentList	"""%s\\n%s\\n"""		5464692	1					
ANR	5464700	Argument	"""%s\\n%s\\n"""		5464692	0					
ANR	5464701	PrimaryExpression	"""%s\\n%s\\n"""		5464692	0					
ANR	5464702	Argument	CondorVersion ( )		5464692	1					
ANR	5464703	CallExpression	CondorVersion ( )		5464692	0					
ANR	5464704	Callee	CondorVersion		5464692	0					
ANR	5464705	Identifier	CondorVersion		5464692	0					
ANR	5464706	ArgumentList			5464692	1					
ANR	5464707	Argument	CondorPlatform ( )		5464692	2					
ANR	5464708	CallExpression	CondorPlatform ( )		5464692	0					
ANR	5464709	Callee	CondorPlatform		5464692	0					
ANR	5464710	Identifier	CondorPlatform		5464692	0					
ANR	5464711	ArgumentList			5464692	1					
ANR	5464712	ExpressionStatement	exit ( 0 )	84:1:3245:3254	5464692	1	True				
ANR	5464713	CallExpression	exit ( 0 )		5464692	0					
ANR	5464714	Callee	exit		5464692	0					
ANR	5464715	Identifier	exit		5464692	0					
ANR	5464716	ArgumentList	0		5464692	1					
ANR	5464717	Argument	0		5464692	0					
ANR	5464718	PrimaryExpression	0		5464692	0					
ANR	5464719	ReturnType	void		5464692	1					
ANR	5464720	Identifier	version		5464692	2					
ANR	5464721	ParameterList			5464692	3					
ANR	5464722	CFGEntryNode	ENTRY		5464692		True				
ANR	5464723	CFGExitNode	EXIT		5464692		True				
ANR	5464724	Symbol	CondorVersion		5464692						
ANR	5464725	Symbol	CondorPlatform		5464692						
ANR	5464726	Function	procArg	88:0:3260:4387							
ANR	5464727	FunctionDef	procArg (const char * arg)		5464726	0					
ANR	5464728	CompoundStatement		90:0:3290:4387	5464726	0					
ANR	5464729	IdentifierDeclStatement	"int c , p ;"	91:1:3293:3302	5464726	0	True				
ANR	5464730	IdentifierDecl	c		5464726	0					
ANR	5464731	IdentifierDeclType	int		5464726	0					
ANR	5464732	Identifier	c		5464726	1					
ANR	5464733	IdentifierDecl	p		5464726	1					
ANR	5464734	IdentifierDeclType	int		5464726	0					
ANR	5464735	Identifier	p		5464726	1					
ANR	5464736	IdentifierDeclStatement	char * tmp ;	92:1:3330:3339	5464726	1	True				
ANR	5464737	IdentifierDecl	* tmp		5464726	0					
ANR	5464738	IdentifierDeclType	char *		5464726	0					
ANR	5464739	Identifier	tmp		5464726	1					
ANR	5464740	IdentifierDeclStatement	MyString constraint ;	94:1:3343:3362	5464726	2	True				
ANR	5464741	IdentifierDecl	constraint		5464726	0					
ANR	5464742	IdentifierDeclType	MyString		5464726	0					
ANR	5464743	Identifier	constraint		5464726	1					
ANR	5464744	IfStatement	if ( isdigit ( * arg ) )		5464726	3					
ANR	5464745	Condition	isdigit ( * arg )	96:4:3369:3381	5464726	0	True				
ANR	5464746	CallExpression	isdigit ( * arg )		5464726	0					
ANR	5464747	Callee	isdigit		5464726	0					
ANR	5464748	Identifier	isdigit		5464726	0					
ANR	5464749	ArgumentList	* arg		5464726	1					
ANR	5464750	Argument	* arg		5464726	0					
ANR	5464751	UnaryOperationExpression	* arg		5464726	0					
ANR	5464752	UnaryOperator	*		5464726	0					
ANR	5464753	Identifier	arg		5464726	1					
ANR	5464754	CompoundStatement		9:1:124:124	5464726	1					
ANR	5464755	ExpressionStatement	"c = strtol ( arg , & tmp , 10 )"	99:2:3419:3444	5464726	0	True				
ANR	5464756	AssignmentExpression	"c = strtol ( arg , & tmp , 10 )"		5464726	0		=			
ANR	5464757	Identifier	c		5464726	0					
ANR	5464758	CallExpression	"strtol ( arg , & tmp , 10 )"		5464726	1					
ANR	5464759	Callee	strtol		5464726	0					
ANR	5464760	Identifier	strtol		5464726	0					
ANR	5464761	ArgumentList	arg		5464726	1					
ANR	5464762	Argument	arg		5464726	0					
ANR	5464763	Identifier	arg		5464726	0					
ANR	5464764	Argument	& tmp		5464726	1					
ANR	5464765	UnaryOperationExpression	& tmp		5464726	0					
ANR	5464766	UnaryOperator	&		5464726	0					
ANR	5464767	Identifier	tmp		5464726	1					
ANR	5464768	Argument	10		5464726	2					
ANR	5464769	PrimaryExpression	10		5464726	0					
ANR	5464770	IfStatement	if ( c <= 0 )		5464726	1					
ANR	5464771	Condition	c <= 0	100:5:3451:3456	5464726	0	True				
ANR	5464772	RelationalExpression	c <= 0		5464726	0		<=			
ANR	5464773	Identifier	c		5464726	0					
ANR	5464774	PrimaryExpression	0		5464726	1					
ANR	5464775	CompoundStatement		12:2:170:170	5464726	1					
ANR	5464776	ExpressionStatement	"fprintf ( stderr , ""Invalid cluster # from %s.\\n"" , arg )"	102:3:3466:3518	5464726	0	True				
ANR	5464777	CallExpression	"fprintf ( stderr , ""Invalid cluster # from %s.\\n"" , arg )"		5464726	0					
ANR	5464778	Callee	fprintf		5464726	0					
ANR	5464779	Identifier	fprintf		5464726	0					
ANR	5464780	ArgumentList	stderr		5464726	1					
ANR	5464781	Argument	stderr		5464726	0					
ANR	5464782	Identifier	stderr		5464726	0					
ANR	5464783	Argument	"""Invalid cluster # from %s.\\n"""		5464726	1					
ANR	5464784	PrimaryExpression	"""Invalid cluster # from %s.\\n"""		5464726	0					
ANR	5464785	Argument	arg		5464726	2					
ANR	5464786	Identifier	arg		5464726	0					
ANR	5464787	ExpressionStatement	had_error = true	103:3:3523:3539	5464726	1	True				
ANR	5464788	AssignmentExpression	had_error = true		5464726	0		=			
ANR	5464789	Identifier	had_error		5464726	0					
ANR	5464790	Identifier	true		5464726	1					
ANR	5464791	ReturnStatement	return ;	104:3:3544:3550	5464726	2	True				
ANR	5464792	IfStatement	if ( * tmp == '\\0' )		5464726	2					
ANR	5464793	Condition	* tmp == '\\0'	106:5:3561:3572	5464726	0	True				
ANR	5464794	EqualityExpression	* tmp == '\\0'		5464726	0		==			
ANR	5464795	UnaryOperationExpression	* tmp		5464726	0					
ANR	5464796	UnaryOperator	*		5464726	0					
ANR	5464797	Identifier	tmp		5464726	1					
ANR	5464798	PrimaryExpression	'\\0'		5464726	1					
ANR	5464799	CompoundStatement		19:2:310:310	5464726	1					
ANR	5464800	ExpressionStatement	"constraint . sprintf ( ""%s==%d"" , ATTR_CLUSTER_ID , c )"	109:3:3606:3656	5464726	0	True				
ANR	5464801	CallExpression	"constraint . sprintf ( ""%s==%d"" , ATTR_CLUSTER_ID , c )"		5464726	0					
ANR	5464802	Callee	constraint . sprintf		5464726	0					
ANR	5464803	MemberAccess	constraint . sprintf		5464726	0					
ANR	5464804	Identifier	constraint		5464726	0					
ANR	5464805	Identifier	sprintf		5464726	1					
ANR	5464806	ArgumentList	"""%s==%d"""		5464726	1					
ANR	5464807	Argument	"""%s==%d"""		5464726	0					
ANR	5464808	PrimaryExpression	"""%s==%d"""		5464726	0					
ANR	5464809	Argument	ATTR_CLUSTER_ID		5464726	1					
ANR	5464810	Identifier	ATTR_CLUSTER_ID		5464726	0					
ANR	5464811	Argument	c		5464726	2					
ANR	5464812	Identifier	c		5464726	0					
ANR	5464813	ExpressionStatement	addConstraint ( constraint . Value ( ) )	110:3:3661:3694	5464726	1	True				
ANR	5464814	CallExpression	addConstraint ( constraint . Value ( ) )		5464726	0					
ANR	5464815	Callee	addConstraint		5464726	0					
ANR	5464816	Identifier	addConstraint		5464726	0					
ANR	5464817	ArgumentList	constraint . Value ( )		5464726	1					
ANR	5464818	Argument	constraint . Value ( )		5464726	0					
ANR	5464819	CallExpression	constraint . Value ( )		5464726	0					
ANR	5464820	Callee	constraint . Value		5464726	0					
ANR	5464821	MemberAccess	constraint . Value		5464726	0					
ANR	5464822	Identifier	constraint		5464726	0					
ANR	5464823	Identifier	Value		5464726	1					
ANR	5464824	ArgumentList			5464726	1					
ANR	5464825	ReturnStatement	return ;	111:3:3699:3705	5464726	2	True				
ANR	5464826	IfStatement	if ( * tmp == '.' )		5464726	3					
ANR	5464827	Condition	* tmp == '.'	113:5:3716:3726	5464726	0	True				
ANR	5464828	EqualityExpression	* tmp == '.'		5464726	0		==			
ANR	5464829	UnaryOperationExpression	* tmp		5464726	0					
ANR	5464830	UnaryOperator	*		5464726	0					
ANR	5464831	Identifier	tmp		5464726	1					
ANR	5464832	PrimaryExpression	'.'		5464726	1					
ANR	5464833	CompoundStatement		25:2:440:440	5464726	1					
ANR	5464834	ExpressionStatement	"p = strtol ( tmp + 1 , & tmp , 10 )"	115:3:3736:3765	5464726	0	True				
ANR	5464835	AssignmentExpression	"p = strtol ( tmp + 1 , & tmp , 10 )"		5464726	0		=			
ANR	5464836	Identifier	p		5464726	0					
ANR	5464837	CallExpression	"strtol ( tmp + 1 , & tmp , 10 )"		5464726	1					
ANR	5464838	Callee	strtol		5464726	0					
ANR	5464839	Identifier	strtol		5464726	0					
ANR	5464840	ArgumentList	tmp + 1		5464726	1					
ANR	5464841	Argument	tmp + 1		5464726	0					
ANR	5464842	AdditiveExpression	tmp + 1		5464726	0		+			
ANR	5464843	Identifier	tmp		5464726	0					
ANR	5464844	PrimaryExpression	1		5464726	1					
ANR	5464845	Argument	& tmp		5464726	1					
ANR	5464846	UnaryOperationExpression	& tmp		5464726	0					
ANR	5464847	UnaryOperator	&		5464726	0					
ANR	5464848	Identifier	tmp		5464726	1					
ANR	5464849	Argument	10		5464726	2					
ANR	5464850	PrimaryExpression	10		5464726	0					
ANR	5464851	IfStatement	if ( p < 0 )		5464726	1					
ANR	5464852	Condition	p < 0	116:6:3773:3777	5464726	0	True				
ANR	5464853	RelationalExpression	p < 0		5464726	0		<			
ANR	5464854	Identifier	p		5464726	0					
ANR	5464855	PrimaryExpression	0		5464726	1					
ANR	5464856	CompoundStatement		28:3:492:492	5464726	1					
ANR	5464857	ExpressionStatement	"fprintf ( stderr , ""Invalid proc # from %s.\\n"" , arg )"	118:4:3789:3839	5464726	0	True				
ANR	5464858	CallExpression	"fprintf ( stderr , ""Invalid proc # from %s.\\n"" , arg )"		5464726	0					
ANR	5464859	Callee	fprintf		5464726	0					
ANR	5464860	Identifier	fprintf		5464726	0					
ANR	5464861	ArgumentList	stderr		5464726	1					
ANR	5464862	Argument	stderr		5464726	0					
ANR	5464863	Identifier	stderr		5464726	0					
ANR	5464864	Argument	"""Invalid proc # from %s.\\n"""		5464726	1					
ANR	5464865	PrimaryExpression	"""Invalid proc # from %s.\\n"""		5464726	0					
ANR	5464866	Argument	arg		5464726	2					
ANR	5464867	Identifier	arg		5464726	0					
ANR	5464868	ExpressionStatement	had_error = 1	119:4:3845:3858	5464726	1	True				
ANR	5464869	AssignmentExpression	had_error = 1		5464726	0		=			
ANR	5464870	Identifier	had_error		5464726	0					
ANR	5464871	PrimaryExpression	1		5464726	1					
ANR	5464872	ReturnStatement	return ;	120:4:3864:3870	5464726	2	True				
ANR	5464873	IfStatement	if ( * tmp == '\\0' )		5464726	2					
ANR	5464874	Condition	* tmp == '\\0'	122:6:3883:3894	5464726	0	True				
ANR	5464875	EqualityExpression	* tmp == '\\0'		5464726	0		==			
ANR	5464876	UnaryOperationExpression	* tmp		5464726	0					
ANR	5464877	UnaryOperator	*		5464726	0					
ANR	5464878	Identifier	tmp		5464726	1					
ANR	5464879	PrimaryExpression	'\\0'		5464726	1					
ANR	5464880	CompoundStatement		35:3:630:630	5464726	1					
ANR	5464881	ExpressionStatement	"constraint . sprintf ( ""(%s==%d && %s==%d)"" , ATTR_CLUSTER_ID , c , ATTR_PROC_ID , p )"	125:4:3927:4016	5464726	0	True				
ANR	5464882	CallExpression	"constraint . sprintf ( ""(%s==%d && %s==%d)"" , ATTR_CLUSTER_ID , c , ATTR_PROC_ID , p )"		5464726	0					
ANR	5464883	Callee	constraint . sprintf		5464726	0					
ANR	5464884	MemberAccess	constraint . sprintf		5464726	0					
ANR	5464885	Identifier	constraint		5464726	0					
ANR	5464886	Identifier	sprintf		5464726	1					
ANR	5464887	ArgumentList	"""(%s==%d && %s==%d)"""		5464726	1					
ANR	5464888	Argument	"""(%s==%d && %s==%d)"""		5464726	0					
ANR	5464889	PrimaryExpression	"""(%s==%d && %s==%d)"""		5464726	0					
ANR	5464890	Argument	ATTR_CLUSTER_ID		5464726	1					
ANR	5464891	Identifier	ATTR_CLUSTER_ID		5464726	0					
ANR	5464892	Argument	c		5464726	2					
ANR	5464893	Identifier	c		5464726	0					
ANR	5464894	Argument	ATTR_PROC_ID		5464726	3					
ANR	5464895	Identifier	ATTR_PROC_ID		5464726	0					
ANR	5464896	Argument	p		5464726	4					
ANR	5464897	Identifier	p		5464726	0					
ANR	5464898	ExpressionStatement	addConstraint ( constraint . Value ( ) )	128:4:4022:4055	5464726	1	True				
ANR	5464899	CallExpression	addConstraint ( constraint . Value ( ) )		5464726	0					
ANR	5464900	Callee	addConstraint		5464726	0					
ANR	5464901	Identifier	addConstraint		5464726	0					
ANR	5464902	ArgumentList	constraint . Value ( )		5464726	1					
ANR	5464903	Argument	constraint . Value ( )		5464726	0					
ANR	5464904	CallExpression	constraint . Value ( )		5464726	0					
ANR	5464905	Callee	constraint . Value		5464726	0					
ANR	5464906	MemberAccess	constraint . Value		5464726	0					
ANR	5464907	Identifier	constraint		5464726	0					
ANR	5464908	Identifier	Value		5464726	1					
ANR	5464909	ArgumentList			5464726	1					
ANR	5464910	ReturnStatement	return ;	129:4:4061:4067	5464726	2	True				
ANR	5464911	ExpressionStatement	"fprintf ( stderr , ""Warning: unrecognized \\""%s\\"" skipped.\\n"" , arg )"	132:2:4080:4145	5464726	4	True				
ANR	5464912	CallExpression	"fprintf ( stderr , ""Warning: unrecognized \\""%s\\"" skipped.\\n"" , arg )"		5464726	0					
ANR	5464913	Callee	fprintf		5464726	0					
ANR	5464914	Identifier	fprintf		5464726	0					
ANR	5464915	ArgumentList	stderr		5464726	1					
ANR	5464916	Argument	stderr		5464726	0					
ANR	5464917	Identifier	stderr		5464726	0					
ANR	5464918	Argument	"""Warning: unrecognized \\""%s\\"" skipped.\\n"""		5464726	1					
ANR	5464919	PrimaryExpression	"""Warning: unrecognized \\""%s\\"" skipped.\\n"""		5464726	0					
ANR	5464920	Argument	arg		5464726	2					
ANR	5464921	Identifier	arg		5464726	0					
ANR	5464922	ReturnStatement	return ;	133:2:4149:4155	5464726	5	True				
ANR	5464923	ElseStatement	else		5464726	0					
ANR	5464924	IfStatement	if ( isalpha ( * arg ) )		5464726	0					
ANR	5464925	Condition	isalpha ( * arg )	135:9:4169:4181	5464726	0	True				
ANR	5464926	CallExpression	isalpha ( * arg )		5464726	0					
ANR	5464927	Callee	isalpha		5464726	0					
ANR	5464928	Identifier	isalpha		5464726	0					
ANR	5464929	ArgumentList	* arg		5464726	1					
ANR	5464930	Argument	* arg		5464726	0					
ANR	5464931	UnaryOperationExpression	* arg		5464726	0					
ANR	5464932	UnaryOperator	*		5464726	0					
ANR	5464933	Identifier	arg		5464726	1					
ANR	5464934	CompoundStatement		48:1:919:919	5464726	1					
ANR	5464935	ExpressionStatement	"constraint . sprintf ( ""%s == \\""%s\\"""" , ATTR_OWNER , arg )"	138:2:4214:4267	5464726	0	True				
ANR	5464936	CallExpression	"constraint . sprintf ( ""%s == \\""%s\\"""" , ATTR_OWNER , arg )"		5464726	0					
ANR	5464937	Callee	constraint . sprintf		5464726	0					
ANR	5464938	MemberAccess	constraint . sprintf		5464726	0					
ANR	5464939	Identifier	constraint		5464726	0					
ANR	5464940	Identifier	sprintf		5464726	1					
ANR	5464941	ArgumentList	"""%s == \\""%s\\"""""		5464726	1					
ANR	5464942	Argument	"""%s == \\""%s\\"""""		5464726	0					
ANR	5464943	PrimaryExpression	"""%s == \\""%s\\"""""		5464726	0					
ANR	5464944	Argument	ATTR_OWNER		5464726	1					
ANR	5464945	Identifier	ATTR_OWNER		5464726	0					
ANR	5464946	Argument	arg		5464726	2					
ANR	5464947	Identifier	arg		5464726	0					
ANR	5464948	ExpressionStatement	addConstraint ( constraint . Value ( ) )	139:2:4271:4304	5464726	1	True				
ANR	5464949	CallExpression	addConstraint ( constraint . Value ( ) )		5464726	0					
ANR	5464950	Callee	addConstraint		5464726	0					
ANR	5464951	Identifier	addConstraint		5464726	0					
ANR	5464952	ArgumentList	constraint . Value ( )		5464726	1					
ANR	5464953	Argument	constraint . Value ( )		5464726	0					
ANR	5464954	CallExpression	constraint . Value ( )		5464726	0					
ANR	5464955	Callee	constraint . Value		5464726	0					
ANR	5464956	MemberAccess	constraint . Value		5464726	0					
ANR	5464957	Identifier	constraint		5464726	0					
ANR	5464958	Identifier	Value		5464726	1					
ANR	5464959	ArgumentList			5464726	1					
ANR	5464960	ElseStatement	else		5464726	0					
ANR	5464961	CompoundStatement		51:8:1023:1023	5464726	0					
ANR	5464962	ExpressionStatement	"fprintf ( stderr , ""Warning: unrecognized \\""%s\\"" skipped\\n"" , arg )"	141:2:4318:4382	5464726	0	True				
ANR	5464963	CallExpression	"fprintf ( stderr , ""Warning: unrecognized \\""%s\\"" skipped\\n"" , arg )"		5464726	0					
ANR	5464964	Callee	fprintf		5464726	0					
ANR	5464965	Identifier	fprintf		5464726	0					
ANR	5464966	ArgumentList	stderr		5464726	1					
ANR	5464967	Argument	stderr		5464726	0					
ANR	5464968	Identifier	stderr		5464726	0					
ANR	5464969	Argument	"""Warning: unrecognized \\""%s\\"" skipped\\n"""		5464726	1					
ANR	5464970	PrimaryExpression	"""Warning: unrecognized \\""%s\\"" skipped\\n"""		5464726	0					
ANR	5464971	Argument	arg		5464726	2					
ANR	5464972	Identifier	arg		5464726	0					
ANR	5464973	ReturnType	void		5464726	1					
ANR	5464974	Identifier	procArg		5464726	2					
ANR	5464975	ParameterList	const char * arg		5464726	3					
ANR	5464976	Parameter	const char * arg	89:8:3273:3287	5464726	0	True				
ANR	5464977	ParameterType	const char *		5464726	0					
ANR	5464978	Identifier	arg		5464726	1					
ANR	5464979	CFGEntryNode	ENTRY		5464726		True				
ANR	5464980	CFGExitNode	EXIT		5464726		True				
ANR	5464981	Symbol	* tmp		5464726						
ANR	5464982	Symbol	isalpha		5464726						
ANR	5464983	Symbol	constraint . Value		5464726						
ANR	5464984	Symbol	c		5464726						
ANR	5464985	Symbol	ATTR_PROC_ID		5464726						
ANR	5464986	Symbol	stderr		5464726						
ANR	5464987	Symbol	p		5464726						
ANR	5464988	Symbol	ATTR_CLUSTER_ID		5464726						
ANR	5464989	Symbol	strtol		5464726						
ANR	5464990	Symbol	tmp		5464726						
ANR	5464991	Symbol	arg		5464726						
ANR	5464992	Symbol	true		5464726						
ANR	5464993	Symbol	constraint		5464726						
ANR	5464994	Symbol	& tmp		5464726						
ANR	5464995	Symbol	had_error		5464726						
ANR	5464996	Symbol	isdigit		5464726						
ANR	5464997	Symbol	* arg		5464726						
ANR	5464998	Symbol	ATTR_OWNER		5464726						
ANR	5464999	Function	addConstraint	146:0:4391:4613							
ANR	5465000	FunctionDef	addConstraint (const char * constraint)		5464999	0					
ANR	5465001	CompoundStatement		148:0:4436:4613	5464999	0					
ANR	5465002	IfStatement	if ( global_constraint . Length ( ) > 0 )		5464999	0					
ANR	5465003	Condition	global_constraint . Length ( ) > 0	149:6:4444:4473	5464999	0	True				
ANR	5465004	RelationalExpression	global_constraint . Length ( ) > 0		5464999	0		>			
ANR	5465005	CallExpression	global_constraint . Length ( )		5464999	0					
ANR	5465006	Callee	global_constraint . Length		5464999	0					
ANR	5465007	MemberAccess	global_constraint . Length		5464999	0					
ANR	5465008	Identifier	global_constraint		5464999	0					
ANR	5465009	Identifier	Length		5464999	1					
ANR	5465010	ArgumentList			5464999	1					
ANR	5465011	PrimaryExpression	0		5464999	1					
ANR	5465012	CompoundStatement		2:39:40:40	5464999	1					
ANR	5465013	ExpressionStatement	"global_constraint += "" || ("""	150:2:4481:4509	5464999	0	True				
ANR	5465014	AssignmentExpression	"global_constraint += "" || ("""		5464999	0		+=			
ANR	5465015	Identifier	global_constraint		5464999	0					
ANR	5465016	PrimaryExpression	""" || ("""		5464999	1					
ANR	5465017	ElseStatement	else		5464999	0					
ANR	5465018	CompoundStatement		4:8:82:82	5464999	0					
ANR	5465019	ExpressionStatement	"global_constraint += ""("""	152:2:4523:4547	5464999	0	True				
ANR	5465020	AssignmentExpression	"global_constraint += ""("""		5464999	0		+=			
ANR	5465021	Identifier	global_constraint		5464999	0					
ANR	5465022	PrimaryExpression	"""("""		5464999	1					
ANR	5465023	ExpressionStatement	global_constraint += constraint	154:1:4553:4584	5464999	1	True				
ANR	5465024	AssignmentExpression	global_constraint += constraint		5464999	0		+=			
ANR	5465025	Identifier	global_constraint		5464999	0					
ANR	5465026	Identifier	constraint		5464999	1					
ANR	5465027	ExpressionStatement	"global_constraint += "")"""	155:1:4587:4611	5464999	2	True				
ANR	5465028	AssignmentExpression	"global_constraint += "")"""		5464999	0		+=			
ANR	5465029	Identifier	global_constraint		5464999	0					
ANR	5465030	PrimaryExpression	""")"""		5464999	1					
ANR	5465031	ReturnType	void		5464999	1					
ANR	5465032	Identifier	addConstraint		5464999	2					
ANR	5465033	ParameterList	const char * constraint		5464999	3					
ANR	5465034	Parameter	const char * constraint	147:15:4411:4432	5464999	0	True				
ANR	5465035	ParameterType	const char *		5464999	0					
ANR	5465036	Identifier	constraint		5464999	1					
ANR	5465037	CFGEntryNode	ENTRY		5464999		True				
ANR	5465038	CFGExitNode	EXIT		5464999		True				
ANR	5465039	Symbol	global_constraint		5464999						
ANR	5465040	Symbol	constraint		5464999						
ANR	5465041	Symbol	global_constraint . Length		5464999						
ANR	5465042	Function	handleAll	159:0:4617:4740							
ANR	5465043	FunctionDef	handleAll ()		5465042	0					
ANR	5465044	CompoundStatement		161:0:4634:4740	5465042	0					
ANR	5465045	IdentifierDeclStatement	char constraint [ 128 ] ;	162:1:4637:4657	5465042	0	True				
ANR	5465046	IdentifierDecl	constraint [ 128 ]		5465042	0					
ANR	5465047	IdentifierDeclType	char [ 128 ]		5465042	0					
ANR	5465048	Identifier	constraint		5465042	1					
ANR	5465049	PrimaryExpression	128		5465042	2					
ANR	5465050	ExpressionStatement	"sprintf ( constraint , ""%s >= 0"" , ATTR_CLUSTER_ID )"	163:1:4660:4709	5465042	1	True				
ANR	5465051	CallExpression	"sprintf ( constraint , ""%s >= 0"" , ATTR_CLUSTER_ID )"		5465042	0					
ANR	5465052	Callee	sprintf		5465042	0					
ANR	5465053	Identifier	sprintf		5465042	0					
ANR	5465054	ArgumentList	constraint		5465042	1					
ANR	5465055	Argument	constraint		5465042	0					
ANR	5465056	Identifier	constraint		5465042	0					
ANR	5465057	Argument	"""%s >= 0"""		5465042	1					
ANR	5465058	PrimaryExpression	"""%s >= 0"""		5465042	0					
ANR	5465059	Argument	ATTR_CLUSTER_ID		5465042	2					
ANR	5465060	Identifier	ATTR_CLUSTER_ID		5465042	0					
ANR	5465061	ExpressionStatement	addConstraint ( constraint )	165:1:4713:4738	5465042	2	True				
ANR	5465062	CallExpression	addConstraint ( constraint )		5465042	0					
ANR	5465063	Callee	addConstraint		5465042	0					
ANR	5465064	Identifier	addConstraint		5465042	0					
ANR	5465065	ArgumentList	constraint		5465042	1					
ANR	5465066	Argument	constraint		5465042	0					
ANR	5465067	Identifier	constraint		5465042	0					
ANR	5465068	ReturnType	void		5465042	1					
ANR	5465069	Identifier	handleAll		5465042	2					
ANR	5465070	ParameterList			5465042	3					
ANR	5465071	CFGEntryNode	ENTRY		5465042		True				
ANR	5465072	CFGExitNode	EXIT		5465042		True				
ANR	5465073	Symbol	ATTR_CLUSTER_ID		5465042						
ANR	5465074	Symbol	constraint		5465042						
ANR	5465075	Function	main	171:0:4746:11026							
ANR	5465076	FunctionDef	"main (int argc , char * argv [ ])"		5465075	0					
ANR	5465077	CompoundStatement		173:0:4779:11026	5465075	0					
ANR	5465078	IdentifierDeclStatement	char * arg ;	174:1:4782:4791	5465075	0	True				
ANR	5465079	IdentifierDecl	* arg		5465075	0					
ANR	5465080	IdentifierDeclType	char *		5465075	0					
ANR	5465081	Identifier	arg		5465075	1					
ANR	5465082	IdentifierDeclStatement	char * * args = ( char * * ) malloc ( sizeof ( char * ) * ( argc - 1 ) ) ;	175:1:4794:4850	5465075	1	True				
ANR	5465083	IdentifierDecl	* * args = ( char * * ) malloc ( sizeof ( char * ) * ( argc - 1 ) )		5465075	0					
ANR	5465084	IdentifierDeclType	char * *		5465075	0					
ANR	5465085	Identifier	args		5465075	1					
ANR	5465086	AssignmentExpression	* * args = ( char * * ) malloc ( sizeof ( char * ) * ( argc - 1 ) )		5465075	2		=			
ANR	5465087	Identifier	args		5465075	0					
ANR	5465088	CastExpression	( char * * ) malloc ( sizeof ( char * ) * ( argc - 1 ) )		5465075	1					
ANR	5465089	CastTarget	char * *		5465075	0					
ANR	5465090	CallExpression	malloc ( sizeof ( char * ) * ( argc - 1 ) )		5465075	1					
ANR	5465091	Callee	malloc		5465075	0					
ANR	5465092	Identifier	malloc		5465075	0					
ANR	5465093	ArgumentList	sizeof ( char * ) * ( argc - 1 )		5465075	1					
ANR	5465094	Argument	sizeof ( char * ) * ( argc - 1 )		5465075	0					
ANR	5465095	MultiplicativeExpression	sizeof ( char * ) * ( argc - 1 )		5465075	0		*			
ANR	5465096	SizeofExpression	sizeof ( char * )		5465075	0					
ANR	5465097	Sizeof	sizeof		5465075	0					
ANR	5465098	SizeofOperand	char *		5465075	1					
ANR	5465099	AdditiveExpression	argc - 1		5465075	1		-			
ANR	5465100	Identifier	argc		5465075	0					
ANR	5465101	PrimaryExpression	1		5465075	1					
ANR	5465102	IdentifierDeclStatement	int nArgs = 0 ;	176:1:4862:4876	5465075	2	True				
ANR	5465103	IdentifierDecl	nArgs = 0		5465075	0					
ANR	5465104	IdentifierDeclType	int		5465075	0					
ANR	5465105	Identifier	nArgs		5465075	1					
ANR	5465106	AssignmentExpression	nArgs = 0		5465075	2		=			
ANR	5465107	Identifier	nArgs		5465075	0					
ANR	5465108	PrimaryExpression	0		5465075	1					
ANR	5465109	IdentifierDeclStatement	"int i , result ;"	177:1:4901:4915	5465075	3	True				
ANR	5465110	IdentifierDecl	i		5465075	0					
ANR	5465111	IdentifierDeclType	int		5465075	0					
ANR	5465112	Identifier	i		5465075	1					
ANR	5465113	IdentifierDecl	result		5465075	1					
ANR	5465114	IdentifierDeclType	int		5465075	0					
ANR	5465115	Identifier	result		5465075	1					
ANR	5465116	IdentifierDeclStatement	char * pool = NULL ;	178:1:4918:4935	5465075	4	True				
ANR	5465117	IdentifierDecl	* pool = NULL		5465075	0					
ANR	5465118	IdentifierDeclType	char *		5465075	0					
ANR	5465119	Identifier	pool		5465075	1					
ANR	5465120	AssignmentExpression	* pool = NULL		5465075	2		=			
ANR	5465121	Identifier	NULL		5465075	0					
ANR	5465122	Identifier	NULL		5465075	1					
ANR	5465123	IdentifierDeclStatement	char * scheddName = NULL ;	179:1:4938:4961	5465075	5	True				
ANR	5465124	IdentifierDecl	* scheddName = NULL		5465075	0					
ANR	5465125	IdentifierDeclType	char *		5465075	0					
ANR	5465126	Identifier	scheddName		5465075	1					
ANR	5465127	AssignmentExpression	* scheddName = NULL		5465075	2		=			
ANR	5465128	Identifier	NULL		5465075	0					
ANR	5465129	Identifier	NULL		5465075	1					
ANR	5465130	IdentifierDeclStatement	char * scheddAddr = NULL ;	180:1:4964:4987	5465075	6	True				
ANR	5465131	IdentifierDecl	* scheddAddr = NULL		5465075	0					
ANR	5465132	IdentifierDeclType	char *		5465075	0					
ANR	5465133	Identifier	scheddAddr		5465075	1					
ANR	5465134	AssignmentExpression	* scheddAddr = NULL		5465075	2		=			
ANR	5465135	Identifier	NULL		5465075	0					
ANR	5465136	Identifier	NULL		5465075	1					
ANR	5465137	IdentifierDeclStatement	MyString method ;	181:1:4990:5005	5465075	7	True				
ANR	5465138	IdentifierDecl	method		5465075	0					
ANR	5465139	IdentifierDeclType	MyString		5465075	0					
ANR	5465140	Identifier	method		5465075	1					
ANR	5465141	IdentifierDeclStatement	char * tmp ;	182:1:5008:5017	5465075	8	True				
ANR	5465142	IdentifierDecl	* tmp		5465075	0					
ANR	5465143	IdentifierDeclType	char *		5465075	0					
ANR	5465144	Identifier	tmp		5465075	1					
ANR	5465145	IdentifierDeclStatement	param_functions * p_funcs = NULL ;	183:1:5020:5051	5465075	9	True				
ANR	5465146	IdentifierDecl	* p_funcs = NULL		5465075	0					
ANR	5465147	IdentifierDeclType	param_functions *		5465075	0					
ANR	5465148	Identifier	p_funcs		5465075	1					
ANR	5465149	AssignmentExpression	* p_funcs = NULL		5465075	2		=			
ANR	5465150	Identifier	NULL		5465075	0					
ANR	5465151	Identifier	NULL		5465075	1					
ANR	5465152	ExpressionStatement	"myDistro -> Init ( argc , argv )"	185:1:5055:5083	5465075	10	True				
ANR	5465153	CallExpression	"myDistro -> Init ( argc , argv )"		5465075	0					
ANR	5465154	Callee	myDistro -> Init		5465075	0					
ANR	5465155	PtrMemberAccess	myDistro -> Init		5465075	0					
ANR	5465156	Identifier	myDistro		5465075	0					
ANR	5465157	Identifier	Init		5465075	1					
ANR	5465158	ArgumentList	argc		5465075	1					
ANR	5465159	Argument	argc		5465075	0					
ANR	5465160	Identifier	argc		5465075	0					
ANR	5465161	Argument	argv		5465075	1					
ANR	5465162	Identifier	argv		5465075	0					
ANR	5465163	ExpressionStatement	MyName = condor_basename ( argv [ 0 ] )	186:1:5086:5119	5465075	11	True				
ANR	5465164	AssignmentExpression	MyName = condor_basename ( argv [ 0 ] )		5465075	0		=			
ANR	5465165	Identifier	MyName		5465075	0					
ANR	5465166	CallExpression	condor_basename ( argv [ 0 ] )		5465075	1					
ANR	5465167	Callee	condor_basename		5465075	0					
ANR	5465168	Identifier	condor_basename		5465075	0					
ANR	5465169	ArgumentList	argv [ 0 ]		5465075	1					
ANR	5465170	Argument	argv [ 0 ]		5465075	0					
ANR	5465171	ArrayIndexing	argv [ 0 ]		5465075	0					
ANR	5465172	Identifier	argv		5465075	0					
ANR	5465173	PrimaryExpression	0		5465075	1					
ANR	5465174	ExpressionStatement	config ( )	187:1:5122:5130	5465075	12	True				
ANR	5465175	CallExpression	config ( )		5465075	0					
ANR	5465176	Callee	config		5465075	0					
ANR	5465177	Identifier	config		5465075	0					
ANR	5465178	ArgumentList			5465075	1					
ANR	5465179	ExpressionStatement	"install_sig_handler ( SIGPIPE , SIG_IGN )"	190:1:5154:5192	5465075	13	True				
ANR	5465180	CallExpression	"install_sig_handler ( SIGPIPE , SIG_IGN )"		5465075	0					
ANR	5465181	Callee	install_sig_handler		5465075	0					
ANR	5465182	Identifier	install_sig_handler		5465075	0					
ANR	5465183	ArgumentList	SIGPIPE		5465075	1					
ANR	5465184	Argument	SIGPIPE		5465075	0					
ANR	5465185	Identifier	SIGPIPE		5465075	0					
ANR	5465186	Argument	SIG_IGN		5465075	1					
ANR	5465187	Identifier	SIG_IGN		5465075	0					
ANR	5465188	ExpressionStatement	"tmp = param ( ""SANDBOX_TRANSFER_METHOD"" )"	196:1:5371:5411	5465075	14	True				
ANR	5465189	AssignmentExpression	"tmp = param ( ""SANDBOX_TRANSFER_METHOD"" )"		5465075	0		=			
ANR	5465190	Identifier	tmp		5465075	0					
ANR	5465191	CallExpression	"param ( ""SANDBOX_TRANSFER_METHOD"" )"		5465075	1					
ANR	5465192	Callee	param		5465075	0					
ANR	5465193	Identifier	param		5465075	0					
ANR	5465194	ArgumentList	"""SANDBOX_TRANSFER_METHOD"""		5465075	1					
ANR	5465195	Argument	"""SANDBOX_TRANSFER_METHOD"""		5465075	0					
ANR	5465196	PrimaryExpression	"""SANDBOX_TRANSFER_METHOD"""		5465075	0					
ANR	5465197	IfStatement	if ( tmp != NULL )		5465075	15					
ANR	5465198	Condition	tmp != NULL	197:6:5419:5429	5465075	0	True				
ANR	5465199	EqualityExpression	tmp != NULL		5465075	0		!=			
ANR	5465200	Identifier	tmp		5465075	0					
ANR	5465201	Identifier	NULL		5465075	1					
ANR	5465202	CompoundStatement		25:20:653:653	5465075	1					
ANR	5465203	ExpressionStatement	method = tmp	198:2:5437:5449	5465075	0	True				
ANR	5465204	AssignmentExpression	method = tmp		5465075	0		=			
ANR	5465205	Identifier	method		5465075	0					
ANR	5465206	Identifier	tmp		5465075	1					
ANR	5465207	ExpressionStatement	free ( tmp )	199:2:5453:5464	5465075	1	True				
ANR	5465208	CallExpression	free ( tmp )		5465075	0					
ANR	5465209	Callee	free		5465075	0					
ANR	5465210	Identifier	free		5465075	0					
ANR	5465211	ArgumentList	tmp		5465075	1					
ANR	5465212	Argument	tmp		5465075	0					
ANR	5465213	Identifier	tmp		5465075	0					
ANR	5465214	ExpressionStatement	"string_to_stm ( method , st_method )"	200:2:5468:5502	5465075	2	True				
ANR	5465215	CallExpression	"string_to_stm ( method , st_method )"		5465075	0					
ANR	5465216	Callee	string_to_stm		5465075	0					
ANR	5465217	Identifier	string_to_stm		5465075	0					
ANR	5465218	ArgumentList	method		5465075	1					
ANR	5465219	Argument	method		5465075	0					
ANR	5465220	Identifier	method		5465075	0					
ANR	5465221	Argument	st_method		5465075	1					
ANR	5465222	Identifier	st_method		5465075	0					
ANR	5465223	ForStatement	for ( argv ++ ; ( arg = * argv ) ; argv ++ )		5465075	16					
ANR	5465224	ForInit	argv ++ ;	204:6:5539:5545	5465075	0	True				
ANR	5465225	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465226	Identifier	argv		5465075	0					
ANR	5465227	IncDec	++		5465075	1					
ANR	5465228	Condition	arg = * argv	204:14:5547:5559	5465075	1	True				
ANR	5465229	AssignmentExpression	arg = * argv		5465075	0		=			
ANR	5465230	Identifier	arg		5465075	0					
ANR	5465231	UnaryOperationExpression	* argv		5465075	1					
ANR	5465232	UnaryOperator	*		5465075	0					
ANR	5465233	Identifier	argv		5465075	1					
ANR	5465234	PostIncDecOperationExpression	argv ++	204:29:5562:5567	5465075	2	True				
ANR	5465235	Identifier	argv		5465075	0					
ANR	5465236	IncDec	++		5465075	1					
ANR	5465237	CompoundStatement		32:38:791:791	5465075	3					
ANR	5465238	IfStatement	if ( arg [ 0 ] == '-' )		5465075	0					
ANR	5465239	Condition	arg [ 0 ] == '-'	205:6:5579:5591	5465075	0	True				
ANR	5465240	EqualityExpression	arg [ 0 ] == '-'		5465075	0		==			
ANR	5465241	ArrayIndexing	arg [ 0 ]		5465075	0					
ANR	5465242	Identifier	arg		5465075	0					
ANR	5465243	PrimaryExpression	0		5465075	1					
ANR	5465244	PrimaryExpression	'-'		5465075	1					
ANR	5465245	CompoundStatement		33:22:815:815	5465075	1					
ANR	5465246	IfStatement	if ( ! arg [ 1 ] )		5465075	0					
ANR	5465247	Condition	! arg [ 1 ]	206:7:5604:5611	5465075	0	True				
ANR	5465248	UnaryOperationExpression	! arg [ 1 ]		5465075	0					
ANR	5465249	UnaryOperator	!		5465075	0					
ANR	5465250	ArrayIndexing	arg [ 1 ]		5465075	1					
ANR	5465251	Identifier	arg		5465075	0					
ANR	5465252	PrimaryExpression	1		5465075	1					
ANR	5465253	CompoundStatement		34:18:835:835	5465075	1					
ANR	5465254	ExpressionStatement	usage ( )	207:4:5621:5628	5465075	0	True				
ANR	5465255	CallExpression	usage ( )		5465075	0					
ANR	5465256	Callee	usage		5465075	0					
ANR	5465257	Identifier	usage		5465075	0					
ANR	5465258	ArgumentList			5465075	1					
ANR	5465259	SwitchStatement	switch ( arg [ 1 ] )		5465075	1					
ANR	5465260	Condition	arg [ 1 ]	209:11:5646:5651	5465075	0	True				
ANR	5465261	ArrayIndexing	arg [ 1 ]		5465075	0					
ANR	5465262	Identifier	arg		5465075	0					
ANR	5465263	PrimaryExpression	1		5465075	1					
ANR	5465264	CompoundStatement		37:20:875:875	5465075	1					
ANR	5465265	Label	case 'd' :	210:3:5660:5668	5465075	0	True				
ANR	5465266	ExpressionStatement	Termlog = 1	212:4:5700:5711	5465075	1	True				
ANR	5465267	AssignmentExpression	Termlog = 1		5465075	0		=			
ANR	5465268	Identifier	Termlog		5465075	0					
ANR	5465269	PrimaryExpression	1		5465075	1					
ANR	5465270	ExpressionStatement	p_funcs = get_param_functions ( )	213:4:5717:5748	5465075	2	True				
ANR	5465271	AssignmentExpression	p_funcs = get_param_functions ( )		5465075	0		=			
ANR	5465272	Identifier	p_funcs		5465075	0					
ANR	5465273	CallExpression	get_param_functions ( )		5465075	1					
ANR	5465274	Callee	get_param_functions		5465075	0					
ANR	5465275	Identifier	get_param_functions		5465075	0					
ANR	5465276	ArgumentList			5465075	1					
ANR	5465277	ExpressionStatement	"dprintf_config ( ""TOOL"" , p_funcs )"	214:4:5754:5786	5465075	3	True				
ANR	5465278	CallExpression	"dprintf_config ( ""TOOL"" , p_funcs )"		5465075	0					
ANR	5465279	Callee	dprintf_config		5465075	0					
ANR	5465280	Identifier	dprintf_config		5465075	0					
ANR	5465281	ArgumentList	"""TOOL"""		5465075	1					
ANR	5465282	Argument	"""TOOL"""		5465075	0					
ANR	5465283	PrimaryExpression	"""TOOL"""		5465075	0					
ANR	5465284	Argument	p_funcs		5465075	1					
ANR	5465285	Identifier	p_funcs		5465075	0					
ANR	5465286	BreakStatement	break ;	215:4:5792:5797	5465075	4	True				
ANR	5465287	Label	case 'c' :	216:3:5802:5810	5465075	5	True				
ANR	5465288	ExpressionStatement	args [ nArgs ] = arg	217:4:5816:5833	5465075	6	True				
ANR	5465289	AssignmentExpression	args [ nArgs ] = arg		5465075	0		=			
ANR	5465290	ArrayIndexing	args [ nArgs ]		5465075	0					
ANR	5465291	Identifier	args		5465075	0					
ANR	5465292	Identifier	nArgs		5465075	1					
ANR	5465293	Identifier	arg		5465075	1					
ANR	5465294	ExpressionStatement	nArgs ++	218:4:5839:5846	5465075	7	True				
ANR	5465295	PostIncDecOperationExpression	nArgs ++		5465075	0					
ANR	5465296	Identifier	nArgs		5465075	0					
ANR	5465297	IncDec	++		5465075	1					
ANR	5465298	ExpressionStatement	argv ++	219:4:5852:5858	5465075	8	True				
ANR	5465299	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465300	Identifier	argv		5465075	0					
ANR	5465301	IncDec	++		5465075	1					
ANR	5465302	IfStatement	if ( ! * argv )		5465075	9					
ANR	5465303	Condition	! * argv	220:8:5868:5874	5465075	0	True				
ANR	5465304	UnaryOperationExpression	! * argv		5465075	0					
ANR	5465305	UnaryOperator	!		5465075	0					
ANR	5465306	UnaryOperationExpression	* argv		5465075	1					
ANR	5465307	UnaryOperator	*		5465075	0					
ANR	5465308	Identifier	argv		5465075	1					
ANR	5465309	CompoundStatement		48:18:1098:1098	5465075	1					
ANR	5465310	ExpressionStatement	"fprintf ( stderr , ""%s: -constraint requires another argument\\n"" , MyName )"	221:5:5885:5974	5465075	0	True				
ANR	5465311	CallExpression	"fprintf ( stderr , ""%s: -constraint requires another argument\\n"" , MyName )"		5465075	0					
ANR	5465312	Callee	fprintf		5465075	0					
ANR	5465313	Identifier	fprintf		5465075	0					
ANR	5465314	ArgumentList	stderr		5465075	1					
ANR	5465315	Argument	stderr		5465075	0					
ANR	5465316	Identifier	stderr		5465075	0					
ANR	5465317	Argument	"""%s: -constraint requires another argument\\n"""		5465075	1					
ANR	5465318	PrimaryExpression	"""%s: -constraint requires another argument\\n"""		5465075	0					
ANR	5465319	Argument	MyName		5465075	2					
ANR	5465320	Identifier	MyName		5465075	0					
ANR	5465321	ExpressionStatement	exit ( 1 )	224:5:5981:5988	5465075	1	True				
ANR	5465322	CallExpression	exit ( 1 )		5465075	0					
ANR	5465323	Callee	exit		5465075	0					
ANR	5465324	Identifier	exit		5465075	0					
ANR	5465325	ArgumentList	1		5465075	1					
ANR	5465326	Argument	1		5465075	0					
ANR	5465327	PrimaryExpression	1		5465075	0					
ANR	5465328	ExpressionStatement	args [ nArgs ] = * argv	226:4:6004:6023	5465075	10	True				
ANR	5465329	AssignmentExpression	args [ nArgs ] = * argv		5465075	0		=			
ANR	5465330	ArrayIndexing	args [ nArgs ]		5465075	0					
ANR	5465331	Identifier	args		5465075	0					
ANR	5465332	Identifier	nArgs		5465075	1					
ANR	5465333	UnaryOperationExpression	* argv		5465075	1					
ANR	5465334	UnaryOperator	*		5465075	0					
ANR	5465335	Identifier	argv		5465075	1					
ANR	5465336	ExpressionStatement	nArgs ++	227:4:6029:6036	5465075	11	True				
ANR	5465337	PostIncDecOperationExpression	nArgs ++		5465075	0					
ANR	5465338	Identifier	nArgs		5465075	0					
ANR	5465339	IncDec	++		5465075	1					
ANR	5465340	BreakStatement	break ;	228:4:6042:6047	5465075	12	True				
ANR	5465341	Label	case 'a' :	229:3:6052:6060	5465075	13	True				
ANR	5465342	IfStatement	if ( arg [ 2 ] && arg [ 2 ] == 'd' )		5465075	14					
ANR	5465343	Condition	arg [ 2 ] && arg [ 2 ] == 'd'	230:8:6070:6092	5465075	0	True				
ANR	5465344	AndExpression	arg [ 2 ] && arg [ 2 ] == 'd'		5465075	0		&&			
ANR	5465345	ArrayIndexing	arg [ 2 ]		5465075	0					
ANR	5465346	Identifier	arg		5465075	0					
ANR	5465347	PrimaryExpression	2		5465075	1					
ANR	5465348	EqualityExpression	arg [ 2 ] == 'd'		5465075	1		==			
ANR	5465349	ArrayIndexing	arg [ 2 ]		5465075	0					
ANR	5465350	Identifier	arg		5465075	0					
ANR	5465351	PrimaryExpression	2		5465075	1					
ANR	5465352	PrimaryExpression	'd'		5465075	1					
ANR	5465353	CompoundStatement		58:34:1316:1316	5465075	1					
ANR	5465354	ExpressionStatement	argv ++	231:5:6103:6109	5465075	0	True				
ANR	5465355	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465356	Identifier	argv		5465075	0					
ANR	5465357	IncDec	++		5465075	1					
ANR	5465358	IfStatement	if ( ! * argv )		5465075	1					
ANR	5465359	Condition	! * argv	232:9:6120:6126	5465075	0	True				
ANR	5465360	UnaryOperationExpression	! * argv		5465075	0					
ANR	5465361	UnaryOperator	!		5465075	0					
ANR	5465362	UnaryOperationExpression	* argv		5465075	1					
ANR	5465363	UnaryOperator	*		5465075	0					
ANR	5465364	Identifier	argv		5465075	1					
ANR	5465365	CompoundStatement		60:19:1350:1350	5465075	1					
ANR	5465366	ExpressionStatement	"fprintf ( stderr , ""%s: -addr requires another argument\\n"" , MyName )"	233:6:6138:6223	5465075	0	True				
ANR	5465367	CallExpression	"fprintf ( stderr , ""%s: -addr requires another argument\\n"" , MyName )"		5465075	0					
ANR	5465368	Callee	fprintf		5465075	0					
ANR	5465369	Identifier	fprintf		5465075	0					
ANR	5465370	ArgumentList	stderr		5465075	1					
ANR	5465371	Argument	stderr		5465075	0					
ANR	5465372	Identifier	stderr		5465075	0					
ANR	5465373	Argument	"""%s: -addr requires another argument\\n"""		5465075	1					
ANR	5465374	PrimaryExpression	"""%s: -addr requires another argument\\n"""		5465075	0					
ANR	5465375	Argument	MyName		5465075	2					
ANR	5465376	Identifier	MyName		5465075	0					
ANR	5465377	ExpressionStatement	exit ( 1 )	236:6:6231:6238	5465075	1	True				
ANR	5465378	CallExpression	exit ( 1 )		5465075	0					
ANR	5465379	Callee	exit		5465075	0					
ANR	5465380	Identifier	exit		5465075	0					
ANR	5465381	ArgumentList	1		5465075	1					
ANR	5465382	Argument	1		5465075	0					
ANR	5465383	PrimaryExpression	1		5465075	0					
ANR	5465384	IfStatement	if ( is_valid_sinful ( * argv ) )		5465075	2					
ANR	5465385	Condition	is_valid_sinful ( * argv )	238:9:6260:6281	5465075	0	True				
ANR	5465386	CallExpression	is_valid_sinful ( * argv )		5465075	0					
ANR	5465387	Callee	is_valid_sinful		5465075	0					
ANR	5465388	Identifier	is_valid_sinful		5465075	0					
ANR	5465389	ArgumentList	* argv		5465075	1					
ANR	5465390	Argument	* argv		5465075	0					
ANR	5465391	UnaryOperationExpression	* argv		5465075	0					
ANR	5465392	UnaryOperator	*		5465075	0					
ANR	5465393	Identifier	argv		5465075	1					
ANR	5465394	CompoundStatement		66:34:1505:1505	5465075	1					
ANR	5465395	ExpressionStatement	scheddAddr = strdup ( * argv )	239:6:6293:6319	5465075	0	True				
ANR	5465396	AssignmentExpression	scheddAddr = strdup ( * argv )		5465075	0		=			
ANR	5465397	Identifier	scheddAddr		5465075	0					
ANR	5465398	CallExpression	strdup ( * argv )		5465075	1					
ANR	5465399	Callee	strdup		5465075	0					
ANR	5465400	Identifier	strdup		5465075	0					
ANR	5465401	ArgumentList	* argv		5465075	1					
ANR	5465402	Argument	* argv		5465075	0					
ANR	5465403	UnaryOperationExpression	* argv		5465075	0					
ANR	5465404	UnaryOperator	*		5465075	0					
ANR	5465405	Identifier	argv		5465075	1					
ANR	5465406	IfStatement	if ( ! scheddAddr )		5465075	1					
ANR	5465407	Condition	! scheddAddr	240:10:6331:6342	5465075	0	True				
ANR	5465408	UnaryOperationExpression	! scheddAddr		5465075	0					
ANR	5465409	UnaryOperator	!		5465075	0					
ANR	5465410	Identifier	scheddAddr		5465075	1					
ANR	5465411	CompoundStatement		68:25:1566:1566	5465075	1					
ANR	5465412	ExpressionStatement	"fprintf ( stderr , ""Out of Memory!\\n"" )"	241:7:6355:6392	5465075	0	True				
ANR	5465413	CallExpression	"fprintf ( stderr , ""Out of Memory!\\n"" )"		5465075	0					
ANR	5465414	Callee	fprintf		5465075	0					
ANR	5465415	Identifier	fprintf		5465075	0					
ANR	5465416	ArgumentList	stderr		5465075	1					
ANR	5465417	Argument	stderr		5465075	0					
ANR	5465418	Identifier	stderr		5465075	0					
ANR	5465419	Argument	"""Out of Memory!\\n"""		5465075	1					
ANR	5465420	PrimaryExpression	"""Out of Memory!\\n"""		5465075	0					
ANR	5465421	ExpressionStatement	exit ( 1 )	242:7:6401:6408	5465075	1	True				
ANR	5465422	CallExpression	exit ( 1 )		5465075	0					
ANR	5465423	Callee	exit		5465075	0					
ANR	5465424	Identifier	exit		5465075	0					
ANR	5465425	ArgumentList	1		5465075	1					
ANR	5465426	Argument	1		5465075	0					
ANR	5465427	PrimaryExpression	1		5465075	0					
ANR	5465428	ElseStatement	else		5465075	0					
ANR	5465429	CompoundStatement		72:12:1650:1650	5465075	0					
ANR	5465430	ExpressionStatement	"fprintf ( stderr , ""%s: \\""%s\\"" is not a valid address\\n"" , MyName , * argv )"	245:6:6438:6528	5465075	0	True				
ANR	5465431	CallExpression	"fprintf ( stderr , ""%s: \\""%s\\"" is not a valid address\\n"" , MyName , * argv )"		5465075	0					
ANR	5465432	Callee	fprintf		5465075	0					
ANR	5465433	Identifier	fprintf		5465075	0					
ANR	5465434	ArgumentList	stderr		5465075	1					
ANR	5465435	Argument	stderr		5465075	0					
ANR	5465436	Identifier	stderr		5465075	0					
ANR	5465437	Argument	"""%s: \\""%s\\"" is not a valid address\\n"""		5465075	1					
ANR	5465438	PrimaryExpression	"""%s: \\""%s\\"" is not a valid address\\n"""		5465075	0					
ANR	5465439	Argument	MyName		5465075	2					
ANR	5465440	Identifier	MyName		5465075	0					
ANR	5465441	Argument	* argv		5465075	3					
ANR	5465442	UnaryOperationExpression	* argv		5465075	0					
ANR	5465443	UnaryOperator	*		5465075	0					
ANR	5465444	Identifier	argv		5465075	1					
ANR	5465445	Statement	fprintf	248:6:6536:6542	5465075	1	True				
ANR	5465446	Statement	(	248:13:6543:6543	5465075	2	True				
ANR	5465447	Statement	stderr	248:15:6545:6550	5465075	3	True				
ANR	5465448	Statement	","	248:21:6551:6551	5465075	4	True				
ANR	5465449	Statement	"""Should be of the form """	248:23:6553:6576	5465075	5	True				
ANR	5465450	Statement	"""<ip.address.here:port>\\n"""	249:9:6587:6612	5465075	6	True				
ANR	5465451	Statement	)	249:36:6614:6614	5465075	7	True				
ANR	5465452	ExpressionStatement		249:37:6615:6615	5465075	8	True				
ANR	5465453	ExpressionStatement	"fprintf ( stderr , ""For example: <123.456.789.123:6789>\\n"" )"	250:6:6623:6691	5465075	9	True				
ANR	5465454	CallExpression	"fprintf ( stderr , ""For example: <123.456.789.123:6789>\\n"" )"		5465075	0					
ANR	5465455	Callee	fprintf		5465075	0					
ANR	5465456	Identifier	fprintf		5465075	0					
ANR	5465457	ArgumentList	stderr		5465075	1					
ANR	5465458	Argument	stderr		5465075	0					
ANR	5465459	Identifier	stderr		5465075	0					
ANR	5465460	Argument	"""For example: <123.456.789.123:6789>\\n"""		5465075	1					
ANR	5465461	PrimaryExpression	"""For example: <123.456.789.123:6789>\\n"""		5465075	0					
ANR	5465462	ExpressionStatement	exit ( 1 )	252:6:6699:6708	5465075	10	True				
ANR	5465463	CallExpression	exit ( 1 )		5465075	0					
ANR	5465464	Callee	exit		5465075	0					
ANR	5465465	Identifier	exit		5465075	0					
ANR	5465466	ArgumentList	1		5465075	1					
ANR	5465467	Argument	1		5465075	0					
ANR	5465468	PrimaryExpression	1		5465075	0					
ANR	5465469	BreakStatement	break ;	254:5:6722:6727	5465075	3	True				
ANR	5465470	ExpressionStatement	All = true	256:4:6739:6749	5465075	15	True				
ANR	5465471	AssignmentExpression	All = true		5465075	0		=			
ANR	5465472	Identifier	All		5465075	0					
ANR	5465473	Identifier	true		5465075	1					
ANR	5465474	BreakStatement	break ;	257:4:6755:6760	5465075	16	True				
ANR	5465475	Label	case 'n' :	258:3:6765:6773	5465075	17	True				
ANR	5465476	ExpressionStatement	argv ++	260:4:6839:6845	5465075	18	True				
ANR	5465477	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465478	Identifier	argv		5465075	0					
ANR	5465479	IncDec	++		5465075	1					
ANR	5465480	IfStatement	if ( ! * argv )		5465075	19					
ANR	5465481	Condition	! * argv	261:8:6855:6861	5465075	0	True				
ANR	5465482	UnaryOperationExpression	! * argv		5465075	0					
ANR	5465483	UnaryOperator	!		5465075	0					
ANR	5465484	UnaryOperationExpression	* argv		5465075	1					
ANR	5465485	UnaryOperator	*		5465075	0					
ANR	5465486	Identifier	argv		5465075	1					
ANR	5465487	CompoundStatement		89:18:2085:2085	5465075	1					
ANR	5465488	ExpressionStatement	"fprintf ( stderr , ""%s: -name requires another argument\\n"" , MyName )"	262:5:6872:6946	5465075	0	True				
ANR	5465489	CallExpression	"fprintf ( stderr , ""%s: -name requires another argument\\n"" , MyName )"		5465075	0					
ANR	5465490	Callee	fprintf		5465075	0					
ANR	5465491	Identifier	fprintf		5465075	0					
ANR	5465492	ArgumentList	stderr		5465075	1					
ANR	5465493	Argument	stderr		5465075	0					
ANR	5465494	Identifier	stderr		5465075	0					
ANR	5465495	Argument	"""%s: -name requires another argument\\n"""		5465075	1					
ANR	5465496	PrimaryExpression	"""%s: -name requires another argument\\n"""		5465075	0					
ANR	5465497	Argument	MyName		5465075	2					
ANR	5465498	Identifier	MyName		5465075	0					
ANR	5465499	ExpressionStatement	exit ( 1 )	264:5:6953:6960	5465075	1	True				
ANR	5465500	CallExpression	exit ( 1 )		5465075	0					
ANR	5465501	Callee	exit		5465075	0					
ANR	5465502	Identifier	exit		5465075	0					
ANR	5465503	ArgumentList	1		5465075	1					
ANR	5465504	Argument	1		5465075	0					
ANR	5465505	PrimaryExpression	1		5465075	0					
ANR	5465506	IfStatement	if ( scheddName )		5465075	20					
ANR	5465507	Condition	scheddName	266:9:6980:6989	5465075	0	True				
ANR	5465508	Identifier	scheddName		5465075	0					
ANR	5465509	ExpressionStatement	free ( scheddName )	266:22:6993:7009	5465075	1	True				
ANR	5465510	CallExpression	free ( scheddName )		5465075	0					
ANR	5465511	Callee	free		5465075	0					
ANR	5465512	Identifier	free		5465075	0					
ANR	5465513	ArgumentList	scheddName		5465075	1					
ANR	5465514	Argument	scheddName		5465075	0					
ANR	5465515	Identifier	scheddName		5465075	0					
ANR	5465516	ExpressionStatement	scheddName = strdup ( * argv )	267:4:7015:7041	5465075	21	True				
ANR	5465517	AssignmentExpression	scheddName = strdup ( * argv )		5465075	0		=			
ANR	5465518	Identifier	scheddName		5465075	0					
ANR	5465519	CallExpression	strdup ( * argv )		5465075	1					
ANR	5465520	Callee	strdup		5465075	0					
ANR	5465521	Identifier	strdup		5465075	0					
ANR	5465522	ArgumentList	* argv		5465075	1					
ANR	5465523	Argument	* argv		5465075	0					
ANR	5465524	UnaryOperationExpression	* argv		5465075	0					
ANR	5465525	UnaryOperator	*		5465075	0					
ANR	5465526	Identifier	argv		5465075	1					
ANR	5465527	BreakStatement	break ;	268:4:7047:7052	5465075	22	True				
ANR	5465528	Label	case 'p' :	269:3:7057:7065	5465075	23	True				
ANR	5465529	ExpressionStatement	argv ++	271:4:7129:7135	5465075	24	True				
ANR	5465530	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465531	Identifier	argv		5465075	0					
ANR	5465532	IncDec	++		5465075	1					
ANR	5465533	IfStatement	if ( ! * argv )		5465075	25					
ANR	5465534	Condition	! * argv	272:8:7145:7151	5465075	0	True				
ANR	5465535	UnaryOperationExpression	! * argv		5465075	0					
ANR	5465536	UnaryOperator	!		5465075	0					
ANR	5465537	UnaryOperationExpression	* argv		5465075	1					
ANR	5465538	UnaryOperator	*		5465075	0					
ANR	5465539	Identifier	argv		5465075	1					
ANR	5465540	CompoundStatement		100:18:2375:2375	5465075	1					
ANR	5465541	ExpressionStatement	"fprintf ( stderr , ""%s: -pool requires another argument\\n"" , MyName )"	273:5:7162:7236	5465075	0	True				
ANR	5465542	CallExpression	"fprintf ( stderr , ""%s: -pool requires another argument\\n"" , MyName )"		5465075	0					
ANR	5465543	Callee	fprintf		5465075	0					
ANR	5465544	Identifier	fprintf		5465075	0					
ANR	5465545	ArgumentList	stderr		5465075	1					
ANR	5465546	Argument	stderr		5465075	0					
ANR	5465547	Identifier	stderr		5465075	0					
ANR	5465548	Argument	"""%s: -pool requires another argument\\n"""		5465075	1					
ANR	5465549	PrimaryExpression	"""%s: -pool requires another argument\\n"""		5465075	0					
ANR	5465550	Argument	MyName		5465075	2					
ANR	5465551	Identifier	MyName		5465075	0					
ANR	5465552	ExpressionStatement	exit ( 1 )	275:5:7243:7250	5465075	1	True				
ANR	5465553	CallExpression	exit ( 1 )		5465075	0					
ANR	5465554	Callee	exit		5465075	0					
ANR	5465555	Identifier	exit		5465075	0					
ANR	5465556	ArgumentList	1		5465075	1					
ANR	5465557	Argument	1		5465075	0					
ANR	5465558	PrimaryExpression	1		5465075	0					
ANR	5465559	IfStatement	if ( pool )		5465075	26					
ANR	5465560	Condition	pool	277:8:7270:7273	5465075	0	True				
ANR	5465561	Identifier	pool		5465075	0					
ANR	5465562	CompoundStatement		105:15:2497:2497	5465075	1					
ANR	5465563	ExpressionStatement	free ( pool )	278:5:7284:7296	5465075	0	True				
ANR	5465564	CallExpression	free ( pool )		5465075	0					
ANR	5465565	Callee	free		5465075	0					
ANR	5465566	Identifier	free		5465075	0					
ANR	5465567	ArgumentList	pool		5465075	1					
ANR	5465568	Argument	pool		5465075	0					
ANR	5465569	Identifier	pool		5465075	0					
ANR	5465570	ExpressionStatement	pool = strdup ( * argv )	280:4:7308:7330	5465075	27	True				
ANR	5465571	AssignmentExpression	pool = strdup ( * argv )		5465075	0		=			
ANR	5465572	Identifier	pool		5465075	0					
ANR	5465573	CallExpression	strdup ( * argv )		5465075	1					
ANR	5465574	Callee	strdup		5465075	0					
ANR	5465575	Identifier	strdup		5465075	0					
ANR	5465576	ArgumentList	* argv		5465075	1					
ANR	5465577	Argument	* argv		5465075	0					
ANR	5465578	UnaryOperationExpression	* argv		5465075	0					
ANR	5465579	UnaryOperator	*		5465075	0					
ANR	5465580	Identifier	argv		5465075	1					
ANR	5465581	BreakStatement	break ;	281:4:7336:7341	5465075	28	True				
ANR	5465582	Label	case 's' :	282:3:7346:7354	5465075	29	True				
ANR	5465583	ExpressionStatement	argv ++	283:4:7360:7366	5465075	30	True				
ANR	5465584	PostIncDecOperationExpression	argv ++		5465075	0					
ANR	5465585	Identifier	argv		5465075	0					
ANR	5465586	IncDec	++		5465075	1					
ANR	5465587	IfStatement	if ( ! * argv )		5465075	31					
ANR	5465588	Condition	! * argv	284:8:7376:7382	5465075	0	True				
ANR	5465589	UnaryOperationExpression	! * argv		5465075	0					
ANR	5465590	UnaryOperator	!		5465075	0					
ANR	5465591	UnaryOperationExpression	* argv		5465075	1					
ANR	5465592	UnaryOperator	*		5465075	0					
ANR	5465593	Identifier	argv		5465075	1					
ANR	5465594	CompoundStatement		112:18:2606:2606	5465075	1					
ANR	5465595	ExpressionStatement	"fprintf ( stderr , ""%s: -stm requires another argument\\n"" , MyName )"	285:5:7393:7466	5465075	0	True				
ANR	5465596	CallExpression	"fprintf ( stderr , ""%s: -stm requires another argument\\n"" , MyName )"		5465075	0					
ANR	5465597	Callee	fprintf		5465075	0					
ANR	5465598	Identifier	fprintf		5465075	0					
ANR	5465599	ArgumentList	stderr		5465075	1					
ANR	5465600	Argument	stderr		5465075	0					
ANR	5465601	Identifier	stderr		5465075	0					
ANR	5465602	Argument	"""%s: -stm requires another argument\\n"""		5465075	1					
ANR	5465603	PrimaryExpression	"""%s: -stm requires another argument\\n"""		5465075	0					
ANR	5465604	Argument	MyName		5465075	2					
ANR	5465605	Identifier	MyName		5465075	0					
ANR	5465606	ExpressionStatement	exit ( 1 )	287:5:7473:7480	5465075	1	True				
ANR	5465607	CallExpression	exit ( 1 )		5465075	0					
ANR	5465608	Callee	exit		5465075	0					
ANR	5465609	Identifier	exit		5465075	0					
ANR	5465610	ArgumentList	1		5465075	1					
ANR	5465611	Argument	1		5465075	0					
ANR	5465612	PrimaryExpression	1		5465075	0					
ANR	5465613	ExpressionStatement	method = * argv	289:4:7496:7510	5465075	32	True				
ANR	5465614	AssignmentExpression	method = * argv		5465075	0		=			
ANR	5465615	Identifier	method		5465075	0					
ANR	5465616	UnaryOperationExpression	* argv		5465075	1					
ANR	5465617	UnaryOperator	*		5465075	0					
ANR	5465618	Identifier	argv		5465075	1					
ANR	5465619	ExpressionStatement	"string_to_stm ( method , st_method )"	290:4:7516:7548	5465075	33	True				
ANR	5465620	CallExpression	"string_to_stm ( method , st_method )"		5465075	0					
ANR	5465621	Callee	string_to_stm		5465075	0					
ANR	5465622	Identifier	string_to_stm		5465075	0					
ANR	5465623	ArgumentList	method		5465075	1					
ANR	5465624	Argument	method		5465075	0					
ANR	5465625	Identifier	method		5465075	0					
ANR	5465626	Argument	st_method		5465075	1					
ANR	5465627	Identifier	st_method		5465075	0					
ANR	5465628	BreakStatement	break ;	291:4:7554:7559	5465075	34	True				
ANR	5465629	Label	case 'v' :	292:3:7564:7572	5465075	35	True				
ANR	5465630	ExpressionStatement	version ( )	293:4:7578:7587	5465075	36	True				
ANR	5465631	CallExpression	version ( )		5465075	0					
ANR	5465632	Callee	version		5465075	0					
ANR	5465633	Identifier	version		5465075	0					
ANR	5465634	ArgumentList			5465075	1					
ANR	5465635	BreakStatement	break ;	294:4:7593:7598	5465075	37	True				
ANR	5465636	Label	case 'h' :	295:3:7603:7611	5465075	38	True				
ANR	5465637	ExpressionStatement	usage ( 0 )	296:4:7617:7625	5465075	39	True				
ANR	5465638	CallExpression	usage ( 0 )		5465075	0					
ANR	5465639	Callee	usage		5465075	0					
ANR	5465640	Identifier	usage		5465075	0					
ANR	5465641	ArgumentList	0		5465075	1					
ANR	5465642	Argument	0		5465075	0					
ANR	5465643	PrimaryExpression	0		5465075	0					
ANR	5465644	BreakStatement	break ;	297:4:7631:7636	5465075	40	True				
ANR	5465645	Label	default :	298:3:7641:7648	5465075	41	True				
ANR	5465646	Identifier	default		5465075	0					
ANR	5465647	ExpressionStatement	"fprintf ( stderr , ""Unrecognized option: %s\\n"" , arg )"	299:4:7654:7705	5465075	42	True				
ANR	5465648	CallExpression	"fprintf ( stderr , ""Unrecognized option: %s\\n"" , arg )"		5465075	0					
ANR	5465649	Callee	fprintf		5465075	0					
ANR	5465650	Identifier	fprintf		5465075	0					
ANR	5465651	ArgumentList	stderr		5465075	1					
ANR	5465652	Argument	stderr		5465075	0					
ANR	5465653	Identifier	stderr		5465075	0					
ANR	5465654	Argument	"""Unrecognized option: %s\\n"""		5465075	1					
ANR	5465655	PrimaryExpression	"""Unrecognized option: %s\\n"""		5465075	0					
ANR	5465656	Argument	arg		5465075	2					
ANR	5465657	Identifier	arg		5465075	0					
ANR	5465658	ExpressionStatement	usage ( )	300:4:7712:7719	5465075	43	True				
ANR	5465659	CallExpression	usage ( )		5465075	0					
ANR	5465660	Callee	usage		5465075	0					
ANR	5465661	Identifier	usage		5465075	0					
ANR	5465662	ArgumentList			5465075	1					
ANR	5465663	BreakStatement	break ;	301:4:7725:7730	5465075	44	True				
ANR	5465664	ElseStatement	else		5465075	0					
ANR	5465665	CompoundStatement		131:9:2966:2966	5465075	0					
ANR	5465666	IfStatement	if ( All )		5465075	0					
ANR	5465667	Condition	All	304:7:7755:7757	5465075	0	True				
ANR	5465668	Identifier	All		5465075	0					
ANR	5465669	CompoundStatement		132:13:2981:2981	5465075	1					
ANR	5465670	ExpressionStatement	usage ( )	307:4:7846:7853	5465075	0	True				
ANR	5465671	CallExpression	usage ( )		5465075	0					
ANR	5465672	Callee	usage		5465075	0					
ANR	5465673	Identifier	usage		5465075	0					
ANR	5465674	ArgumentList			5465075	1					
ANR	5465675	ExpressionStatement	args [ nArgs ] = arg	309:3:7863:7880	5465075	1	True				
ANR	5465676	AssignmentExpression	args [ nArgs ] = arg		5465075	0		=			
ANR	5465677	ArrayIndexing	args [ nArgs ]		5465075	0					
ANR	5465678	Identifier	args		5465075	0					
ANR	5465679	Identifier	nArgs		5465075	1					
ANR	5465680	Identifier	arg		5465075	1					
ANR	5465681	ExpressionStatement	nArgs ++	310:3:7885:7892	5465075	2	True				
ANR	5465682	PostIncDecOperationExpression	nArgs ++		5465075	0					
ANR	5465683	Identifier	nArgs		5465075	0					
ANR	5465684	IncDec	++		5465075	1					
ANR	5465685	IfStatement	if ( st_method == STM_UNKNOWN )		5465075	17					
ANR	5465686	Condition	st_method == STM_UNKNOWN	315:5:7974:7997	5465075	0	True				
ANR	5465687	EqualityExpression	st_method == STM_UNKNOWN		5465075	0		==			
ANR	5465688	Identifier	st_method		5465075	0					
ANR	5465689	Identifier	STM_UNKNOWN		5465075	1					
ANR	5465690	CompoundStatement		143:31:3220:3220	5465075	1					
ANR	5465691	ExpressionStatement	"fprintf ( stderr , ""%s: Unknown sandbox transfer method: %s\\n"" , MyName , method . Value ( ) )"	316:2:8004:8095	5465075	0	True				
ANR	5465692	CallExpression	"fprintf ( stderr , ""%s: Unknown sandbox transfer method: %s\\n"" , MyName , method . Value ( ) )"		5465075	0					
ANR	5465693	Callee	fprintf		5465075	0					
ANR	5465694	Identifier	fprintf		5465075	0					
ANR	5465695	ArgumentList	stderr		5465075	1					
ANR	5465696	Argument	stderr		5465075	0					
ANR	5465697	Identifier	stderr		5465075	0					
ANR	5465698	Argument	"""%s: Unknown sandbox transfer method: %s\\n"""		5465075	1					
ANR	5465699	PrimaryExpression	"""%s: Unknown sandbox transfer method: %s\\n"""		5465075	0					
ANR	5465700	Argument	MyName		5465075	2					
ANR	5465701	Identifier	MyName		5465075	0					
ANR	5465702	Argument	method . Value ( )		5465075	3					
ANR	5465703	CallExpression	method . Value ( )		5465075	0					
ANR	5465704	Callee	method . Value		5465075	0					
ANR	5465705	MemberAccess	method . Value		5465075	0					
ANR	5465706	Identifier	method		5465075	0					
ANR	5465707	Identifier	Value		5465075	1					
ANR	5465708	ArgumentList			5465075	1					
ANR	5465709	ExpressionStatement	usage ( )	319:2:8099:8106	5465075	1	True				
ANR	5465710	CallExpression	usage ( )		5465075	0					
ANR	5465711	Callee	usage		5465075	0					
ANR	5465712	Identifier	usage		5465075	0					
ANR	5465713	ArgumentList			5465075	1					
ANR	5465714	ExpressionStatement	exit ( 1 )	320:2:8110:8117	5465075	2	True				
ANR	5465715	CallExpression	exit ( 1 )		5465075	0					
ANR	5465716	Callee	exit		5465075	0					
ANR	5465717	Identifier	exit		5465075	0					
ANR	5465718	ArgumentList	1		5465075	1					
ANR	5465719	Argument	1		5465075	0					
ANR	5465720	PrimaryExpression	1		5465075	0					
ANR	5465721	IfStatement	if ( ! ( All || nArgs ) )		5465075	18					
ANR	5465722	Condition	! ( All || nArgs )	323:5:8128:8143	5465075	0	True				
ANR	5465723	UnaryOperationExpression	! ( All || nArgs )		5465075	0					
ANR	5465724	UnaryOperator	!		5465075	0					
ANR	5465725	OrExpression	All || nArgs		5465075	1		||			
ANR	5465726	Identifier	All		5465075	0					
ANR	5465727	Identifier	nArgs		5465075	1					
ANR	5465728	CompoundStatement		151:24:3367:3367	5465075	1					
ANR	5465729	ExpressionStatement	"fprintf ( stderr , ""You did not specify any jobs\\n"" )"	327:2:8198:8249	5465075	0	True				
ANR	5465730	CallExpression	"fprintf ( stderr , ""You did not specify any jobs\\n"" )"		5465075	0					
ANR	5465731	Callee	fprintf		5465075	0					
ANR	5465732	Identifier	fprintf		5465075	0					
ANR	5465733	ArgumentList	stderr		5465075	1					
ANR	5465734	Argument	stderr		5465075	0					
ANR	5465735	Identifier	stderr		5465075	0					
ANR	5465736	Argument	"""You did not specify any jobs\\n"""		5465075	1					
ANR	5465737	PrimaryExpression	"""You did not specify any jobs\\n"""		5465075	0					
ANR	5465738	ExpressionStatement	usage ( )	328:2:8254:8261	5465075	1	True				
ANR	5465739	CallExpression	usage ( )		5465075	0					
ANR	5465740	Callee	usage		5465075	0					
ANR	5465741	Identifier	usage		5465075	0					
ANR	5465742	ArgumentList			5465075	1					
ANR	5465743	IfStatement	if ( ! scheddAddr )		5465075	19					
ANR	5465744	Condition	! scheddAddr	333:5:8357:8368	5465075	0	True				
ANR	5465745	UnaryOperationExpression	! scheddAddr		5465075	0					
ANR	5465746	UnaryOperator	!		5465075	0					
ANR	5465747	Identifier	scheddAddr		5465075	1					
ANR	5465748	CompoundStatement		161:20:3592:3592	5465075	1					
ANR	5465749	ExpressionStatement	"schedd = new DCSchedd ( scheddName , pool )"	336:2:8480:8521	5465075	0	True				
ANR	5465750	AssignmentExpression	"schedd = new DCSchedd ( scheddName , pool )"		5465075	0		=			
ANR	5465751	Identifier	schedd		5465075	0					
ANR	5465752	Expression	"scheddName , pool"		5465075	1					
ANR	5465753	Identifier	scheddName		5465075	0					
ANR	5465754	Identifier	pool		5465075	1					
ANR	5465755	ElseStatement	else		5465075	0					
ANR	5465756	CompoundStatement		165:8:3751:3751	5465075	0					
ANR	5465757	ExpressionStatement	schedd = new DCSchedd ( scheddAddr )	338:2:8535:8570	5465075	0	True				
ANR	5465758	AssignmentExpression	schedd = new DCSchedd ( scheddAddr )		5465075	0		=			
ANR	5465759	Identifier	schedd		5465075	0					
ANR	5465760	Identifier	scheddAddr		5465075	1					
ANR	5465761	IfStatement	if ( ! schedd -> locate ( ) )		5465075	20					
ANR	5465762	Condition	! schedd -> locate ( )	340:5:8580:8597	5465075	0	True				
ANR	5465763	UnaryOperationExpression	! schedd -> locate ( )		5465075	0					
ANR	5465764	UnaryOperator	!		5465075	0					
ANR	5465765	CallExpression	schedd -> locate ( )		5465075	1					
ANR	5465766	Callee	schedd -> locate		5465075	0					
ANR	5465767	PtrMemberAccess	schedd -> locate		5465075	0					
ANR	5465768	Identifier	schedd		5465075	0					
ANR	5465769	Identifier	locate		5465075	1					
ANR	5465770	ArgumentList			5465075	1					
ANR	5465771	CompoundStatement		168:26:3821:3821	5465075	1					
ANR	5465772	ExpressionStatement	"fprintf ( stderr , ""%s: %s\\n"" , MyName , schedd -> error ( ) )"	341:2:8605:8659	5465075	0	True				
ANR	5465773	CallExpression	"fprintf ( stderr , ""%s: %s\\n"" , MyName , schedd -> error ( ) )"		5465075	0					
ANR	5465774	Callee	fprintf		5465075	0					
ANR	5465775	Identifier	fprintf		5465075	0					
ANR	5465776	ArgumentList	stderr		5465075	1					
ANR	5465777	Argument	stderr		5465075	0					
ANR	5465778	Identifier	stderr		5465075	0					
ANR	5465779	Argument	"""%s: %s\\n"""		5465075	1					
ANR	5465780	PrimaryExpression	"""%s: %s\\n"""		5465075	0					
ANR	5465781	Argument	MyName		5465075	2					
ANR	5465782	Identifier	MyName		5465075	0					
ANR	5465783	Argument	schedd -> error ( )		5465075	3					
ANR	5465784	CallExpression	schedd -> error ( )		5465075	0					
ANR	5465785	Callee	schedd -> error		5465075	0					
ANR	5465786	PtrMemberAccess	schedd -> error		5465075	0					
ANR	5465787	Identifier	schedd		5465075	0					
ANR	5465788	Identifier	error		5465075	1					
ANR	5465789	ArgumentList			5465075	1					
ANR	5465790	ExpressionStatement	exit ( 1 )	342:2:8664:8673	5465075	1	True				
ANR	5465791	CallExpression	exit ( 1 )		5465075	0					
ANR	5465792	Callee	exit		5465075	0					
ANR	5465793	Identifier	exit		5465075	0					
ANR	5465794	ArgumentList	1		5465075	1					
ANR	5465795	Argument	1		5465075	0					
ANR	5465796	PrimaryExpression	1		5465075	0					
ANR	5465797	IfStatement	if ( All )		5465075	21					
ANR	5465798	Condition	All	346:5:8707:8709	5465075	0	True				
ANR	5465799	Identifier	All		5465075	0					
ANR	5465800	CompoundStatement		174:11:3933:3933	5465075	1					
ANR	5465801	ExpressionStatement	handleAll ( )	347:2:8717:8728	5465075	0	True				
ANR	5465802	CallExpression	handleAll ( )		5465075	0					
ANR	5465803	Callee	handleAll		5465075	0					
ANR	5465804	Identifier	handleAll		5465075	0					
ANR	5465805	ArgumentList			5465075	1					
ANR	5465806	ElseStatement	else		5465075	0					
ANR	5465807	CompoundStatement		176:8:3958:3958	5465075	0					
ANR	5465808	ForStatement	for ( i = 0 ; i < nArgs ; i ++ )		5465075	0					
ANR	5465809	ForInit	i = 0 ;	349:6:8746:8751	5465075	0	True				
ANR	5465810	AssignmentExpression	i = 0		5465075	0		=			
ANR	5465811	Identifier	i		5465075	0					
ANR	5465812	PrimaryExpression	0		5465075	1					
ANR	5465813	Condition	i < nArgs	349:13:8753:8761	5465075	1	True				
ANR	5465814	RelationalExpression	i < nArgs		5465075	0		<			
ANR	5465815	Identifier	i		5465075	0					
ANR	5465816	Identifier	nArgs		5465075	1					
ANR	5465817	PostIncDecOperationExpression	i ++	349:24:8764:8766	5465075	2	True				
ANR	5465818	Identifier	i		5465075	0					
ANR	5465819	IncDec	++		5465075	1					
ANR	5465820	CompoundStatement		177:29:3989:3989	5465075	3					
ANR	5465821	IfStatement	"if ( match_prefix ( args [ i ] , ""-constraint"" ) )"		5465075	0					
ANR	5465822	Condition	"match_prefix ( args [ i ] , ""-constraint"" )"	350:7:8778:8815	5465075	0	True				
ANR	5465823	CallExpression	"match_prefix ( args [ i ] , ""-constraint"" )"		5465075	0					
ANR	5465824	Callee	match_prefix		5465075	0					
ANR	5465825	Identifier	match_prefix		5465075	0					
ANR	5465826	ArgumentList	args [ i ]		5465075	1					
ANR	5465827	Argument	args [ i ]		5465075	0					
ANR	5465828	ArrayIndexing	args [ i ]		5465075	0					
ANR	5465829	Identifier	args		5465075	0					
ANR	5465830	Identifier	i		5465075	1					
ANR	5465831	Argument	"""-constraint"""		5465075	1					
ANR	5465832	PrimaryExpression	"""-constraint"""		5465075	0					
ANR	5465833	CompoundStatement		178:48:4039:4039	5465075	1					
ANR	5465834	ExpressionStatement	i ++	351:4:8825:8828	5465075	0	True				
ANR	5465835	PostIncDecOperationExpression	i ++		5465075	0					
ANR	5465836	Identifier	i		5465075	0					
ANR	5465837	IncDec	++		5465075	1					
ANR	5465838	ExpressionStatement	addConstraint ( args [ i ] )	352:4:8834:8858	5465075	1	True				
ANR	5465839	CallExpression	addConstraint ( args [ i ] )		5465075	0					
ANR	5465840	Callee	addConstraint		5465075	0					
ANR	5465841	Identifier	addConstraint		5465075	0					
ANR	5465842	ArgumentList	args [ i ]		5465075	1					
ANR	5465843	Argument	args [ i ]		5465075	0					
ANR	5465844	ArrayIndexing	args [ i ]		5465075	0					
ANR	5465845	Identifier	args		5465075	0					
ANR	5465846	Identifier	i		5465075	1					
ANR	5465847	ElseStatement	else		5465075	0					
ANR	5465848	CompoundStatement		181:10:4090:4090	5465075	0					
ANR	5465849	ExpressionStatement	procArg ( args [ i ] )	354:4:8876:8892	5465075	0	True				
ANR	5465850	CallExpression	procArg ( args [ i ] )		5465075	0					
ANR	5465851	Callee	procArg		5465075	0					
ANR	5465852	Identifier	procArg		5465075	0					
ANR	5465853	ArgumentList	args [ i ]		5465075	1					
ANR	5465854	Argument	args [ i ]		5465075	0					
ANR	5465855	ArrayIndexing	args [ i ]		5465075	0					
ANR	5465856	Identifier	args		5465075	0					
ANR	5465857	Identifier	i		5465075	1					
ANR	5465858	IfStatement	if ( global_constraint . Length ( ) <= 0 )		5465075	22					
ANR	5465859	Condition	global_constraint . Length ( ) <= 0	360:6:8970:9000	5465075	0	True				
ANR	5465860	RelationalExpression	global_constraint . Length ( ) <= 0		5465075	0		<=			
ANR	5465861	CallExpression	global_constraint . Length ( )		5465075	0					
ANR	5465862	Callee	global_constraint . Length		5465075	0					
ANR	5465863	MemberAccess	global_constraint . Length		5465075	0					
ANR	5465864	Identifier	global_constraint		5465075	0					
ANR	5465865	Identifier	Length		5465075	1					
ANR	5465866	ArgumentList			5465075	1					
ANR	5465867	PrimaryExpression	0		5465075	1					
ANR	5465868	CompoundStatement		188:40:4224:4224	5465075	1					
ANR	5465869	ExpressionStatement	"fprintf ( stderr , ""Unable to create a job constraint!\\n"" )"	361:2:9011:9067	5465075	0	True				
ANR	5465870	CallExpression	"fprintf ( stderr , ""Unable to create a job constraint!\\n"" )"		5465075	0					
ANR	5465871	Callee	fprintf		5465075	0					
ANR	5465872	Identifier	fprintf		5465075	0					
ANR	5465873	ArgumentList	stderr		5465075	1					
ANR	5465874	Argument	stderr		5465075	0					
ANR	5465875	Identifier	stderr		5465075	0					
ANR	5465876	Argument	"""Unable to create a job constraint!\\n"""		5465075	1					
ANR	5465877	PrimaryExpression	"""Unable to create a job constraint!\\n"""		5465075	0					
ANR	5465878	ExpressionStatement	exit ( 1 )	362:2:9071:9078	5465075	1	True				
ANR	5465879	CallExpression	exit ( 1 )		5465075	0					
ANR	5465880	Callee	exit		5465075	0					
ANR	5465881	Identifier	exit		5465075	0					
ANR	5465882	ArgumentList	1		5465075	1					
ANR	5465883	Argument	1		5465075	0					
ANR	5465884	PrimaryExpression	1		5465075	0					
ANR	5465885	ExpressionStatement	"fprintf ( stdout , ""Fetching data files...\\n"" )"	365:1:9085:9127	5465075	23	True				
ANR	5465886	CallExpression	"fprintf ( stdout , ""Fetching data files...\\n"" )"		5465075	0					
ANR	5465887	Callee	fprintf		5465075	0					
ANR	5465888	Identifier	fprintf		5465075	0					
ANR	5465889	ArgumentList	stdout		5465075	1					
ANR	5465890	Argument	stdout		5465075	0					
ANR	5465891	Identifier	stdout		5465075	0					
ANR	5465892	Argument	"""Fetching data files...\\n"""		5465075	1					
ANR	5465893	PrimaryExpression	"""Fetching data files...\\n"""		5465075	0					
ANR	5465894	SwitchStatement	switch ( st_method )		5465075	24					
ANR	5465895	Condition	st_method	367:8:9138:9146	5465075	0	True				
ANR	5465896	Identifier	st_method		5465075	0					
ANR	5465897	CompoundStatement		195:19:4369:4369	5465075	1					
ANR	5465898	Label	case STM_USE_SCHEDD_ONLY :	368:2:9153:9177	5465075	0	True				
ANR	5465899	Identifier	STM_USE_SCHEDD_ONLY		5465075	0					
ANR	5465900	CompoundStatement		201:3:4499:4519	5465075	1					
ANR	5465901	IdentifierDeclStatement	CondorError errstack ;	373:3:9279:9299	5465075	0	True				
ANR	5465902	IdentifierDecl	errstack		5465075	0					
ANR	5465903	IdentifierDeclType	CondorError		5465075	0					
ANR	5465904	Identifier	errstack		5465075	1					
ANR	5465905	ExpressionStatement	"result = schedd -> receiveJobSandbox ( global_constraint . Value ( ) , & errstack )"	374:3:9304:9380	5465075	1	True				
ANR	5465906	AssignmentExpression	"result = schedd -> receiveJobSandbox ( global_constraint . Value ( ) , & errstack )"		5465075	0		=			
ANR	5465907	Identifier	result		5465075	0					
ANR	5465908	CallExpression	"schedd -> receiveJobSandbox ( global_constraint . Value ( ) , & errstack )"		5465075	1					
ANR	5465909	Callee	schedd -> receiveJobSandbox		5465075	0					
ANR	5465910	PtrMemberAccess	schedd -> receiveJobSandbox		5465075	0					
ANR	5465911	Identifier	schedd		5465075	0					
ANR	5465912	Identifier	receiveJobSandbox		5465075	1					
ANR	5465913	ArgumentList	global_constraint . Value ( )		5465075	1					
ANR	5465914	Argument	global_constraint . Value ( )		5465075	0					
ANR	5465915	CallExpression	global_constraint . Value ( )		5465075	0					
ANR	5465916	Callee	global_constraint . Value		5465075	0					
ANR	5465917	MemberAccess	global_constraint . Value		5465075	0					
ANR	5465918	Identifier	global_constraint		5465075	0					
ANR	5465919	Identifier	Value		5465075	1					
ANR	5465920	ArgumentList			5465075	1					
ANR	5465921	Argument	& errstack		5465075	1					
ANR	5465922	UnaryOperationExpression	& errstack		5465075	0					
ANR	5465923	UnaryOperator	&		5465075	0					
ANR	5465924	Identifier	errstack		5465075	1					
ANR	5465925	IfStatement	if ( ! result )		5465075	2					
ANR	5465926	Condition	! result	376:8:9390:9396	5465075	0	True				
ANR	5465927	UnaryOperationExpression	! result		5465075	0					
ANR	5465928	UnaryOperator	!		5465075	0					
ANR	5465929	Identifier	result		5465075	1					
ANR	5465930	CompoundStatement		204:18:4620:4620	5465075	1					
ANR	5465931	ExpressionStatement	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"	377:4:9406:9461	5465075	0	True				
ANR	5465932	CallExpression	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"		5465075	0					
ANR	5465933	Callee	fprintf		5465075	0					
ANR	5465934	Identifier	fprintf		5465075	0					
ANR	5465935	ArgumentList	stderr		5465075	1					
ANR	5465936	Argument	stderr		5465075	0					
ANR	5465937	Identifier	stderr		5465075	0					
ANR	5465938	Argument	"""\\n%s\\n"""		5465075	1					
ANR	5465939	PrimaryExpression	"""\\n%s\\n"""		5465075	0					
ANR	5465940	Argument	errstack . getFullText ( true )		5465075	2					
ANR	5465941	CallExpression	errstack . getFullText ( true )		5465075	0					
ANR	5465942	Callee	errstack . getFullText		5465075	0					
ANR	5465943	MemberAccess	errstack . getFullText		5465075	0					
ANR	5465944	Identifier	errstack		5465075	0					
ANR	5465945	Identifier	getFullText		5465075	1					
ANR	5465946	ArgumentList	true		5465075	1					
ANR	5465947	Argument	true		5465075	0					
ANR	5465948	Identifier	true		5465075	0					
ANR	5465949	ExpressionStatement	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"	378:4:9467:9523	5465075	1	True				
ANR	5465950	CallExpression	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"		5465075	0					
ANR	5465951	Callee	fprintf		5465075	0					
ANR	5465952	Identifier	fprintf		5465075	0					
ANR	5465953	ArgumentList	stderr		5465075	1					
ANR	5465954	Argument	stderr		5465075	0					
ANR	5465955	Identifier	stderr		5465075	0					
ANR	5465956	Argument	"""ERROR: Failed to spool job files.\\n"""		5465075	1					
ANR	5465957	PrimaryExpression	"""ERROR: Failed to spool job files.\\n"""		5465075	0					
ANR	5465958	ExpressionStatement	exit ( 1 )	379:4:9529:9536	5465075	2	True				
ANR	5465959	CallExpression	exit ( 1 )		5465075	0					
ANR	5465960	Callee	exit		5465075	0					
ANR	5465961	Identifier	exit		5465075	0					
ANR	5465962	ArgumentList	1		5465075	1					
ANR	5465963	Argument	1		5465075	0					
ANR	5465964	PrimaryExpression	1		5465075	0					
ANR	5465965	ReturnStatement	return 0 ;	383:3:9564:9572	5465075	3	True				
ANR	5465966	PrimaryExpression	0		5465075	0					
ANR	5465967	BreakStatement	break ;	386:3:9595:9600	5465075	2	True				
ANR	5465968	Label	case STM_USE_TRANSFERD :	388:2:9605:9627	5465075	3	True				
ANR	5465969	Identifier	STM_USE_TRANSFERD		5465075	0					
ANR	5465970	CompoundStatement		251:3:5854:5889	5465075	4					
ANR	5465971	IdentifierDeclStatement	CondorError errstack ;	394:3:9756:9776	5465075	0	True				
ANR	5465972	IdentifierDecl	errstack		5465075	0					
ANR	5465973	IdentifierDeclType	CondorError		5465075	0					
ANR	5465974	Identifier	errstack		5465075	1					
ANR	5465975	IdentifierDeclStatement	ClassAd respad ;	395:3:9781:9795	5465075	1	True				
ANR	5465976	IdentifierDecl	respad		5465075	0					
ANR	5465977	IdentifierDeclType	ClassAd		5465075	0					
ANR	5465978	Identifier	respad		5465075	1					
ANR	5465979	IdentifierDeclStatement	int invalid ;	396:3:9800:9811	5465075	2	True				
ANR	5465980	IdentifierDecl	invalid		5465075	0					
ANR	5465981	IdentifierDeclType	int		5465075	0					
ANR	5465982	Identifier	invalid		5465075	1					
ANR	5465983	IdentifierDeclStatement	MyString reason ;	397:3:9816:9831	5465075	3	True				
ANR	5465984	IdentifierDecl	reason		5465075	0					
ANR	5465985	IdentifierDeclType	MyString		5465075	0					
ANR	5465986	Identifier	reason		5465075	1					
ANR	5465987	IdentifierDeclStatement	MyString td_sinful ;	398:3:9836:9854	5465075	4	True				
ANR	5465988	IdentifierDecl	td_sinful		5465075	0					
ANR	5465989	IdentifierDeclType	MyString		5465075	0					
ANR	5465990	Identifier	td_sinful		5465075	1					
ANR	5465991	IdentifierDeclStatement	MyString td_cap ;	399:3:9859:9874	5465075	5	True				
ANR	5465992	IdentifierDecl	td_cap		5465075	0					
ANR	5465993	IdentifierDeclType	MyString		5465075	0					
ANR	5465994	Identifier	td_cap		5465075	1					
ANR	5465995	ExpressionStatement	"result = schedd -> requestSandboxLocation ( FTPD_DOWNLOAD , global_constraint , FTP_CFTP , & respad , & errstack )"	401:3:9880:9988	5465075	6	True				
ANR	5465996	AssignmentExpression	"result = schedd -> requestSandboxLocation ( FTPD_DOWNLOAD , global_constraint , FTP_CFTP , & respad , & errstack )"		5465075	0		=			
ANR	5465997	Identifier	result		5465075	0					
ANR	5465998	CallExpression	"schedd -> requestSandboxLocation ( FTPD_DOWNLOAD , global_constraint , FTP_CFTP , & respad , & errstack )"		5465075	1					
ANR	5465999	Callee	schedd -> requestSandboxLocation		5465075	0					
ANR	5466000	PtrMemberAccess	schedd -> requestSandboxLocation		5465075	0					
ANR	5466001	Identifier	schedd		5465075	0					
ANR	5466002	Identifier	requestSandboxLocation		5465075	1					
ANR	5466003	ArgumentList	FTPD_DOWNLOAD		5465075	1					
ANR	5466004	Argument	FTPD_DOWNLOAD		5465075	0					
ANR	5466005	Identifier	FTPD_DOWNLOAD		5465075	0					
ANR	5466006	Argument	global_constraint		5465075	1					
ANR	5466007	Identifier	global_constraint		5465075	0					
ANR	5466008	Argument	FTP_CFTP		5465075	2					
ANR	5466009	Identifier	FTP_CFTP		5465075	0					
ANR	5466010	Argument	& respad		5465075	3					
ANR	5466011	UnaryOperationExpression	& respad		5465075	0					
ANR	5466012	UnaryOperator	&		5465075	0					
ANR	5466013	Identifier	respad		5465075	1					
ANR	5466014	Argument	& errstack		5465075	4					
ANR	5466015	UnaryOperationExpression	& errstack		5465075	0					
ANR	5466016	UnaryOperator	&		5465075	0					
ANR	5466017	Identifier	errstack		5465075	1					
ANR	5466018	IfStatement	if ( ! result )		5465075	7					
ANR	5466019	Condition	! result	403:8:9998:10004	5465075	0	True				
ANR	5466020	UnaryOperationExpression	! result		5465075	0					
ANR	5466021	UnaryOperator	!		5465075	0					
ANR	5466022	Identifier	result		5465075	1					
ANR	5466023	CompoundStatement		231:18:5228:5228	5465075	1					
ANR	5466024	ExpressionStatement	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"	404:4:10014:10069	5465075	0	True				
ANR	5466025	CallExpression	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"		5465075	0					
ANR	5466026	Callee	fprintf		5465075	0					
ANR	5466027	Identifier	fprintf		5465075	0					
ANR	5466028	ArgumentList	stderr		5465075	1					
ANR	5466029	Argument	stderr		5465075	0					
ANR	5466030	Identifier	stderr		5465075	0					
ANR	5466031	Argument	"""\\n%s\\n"""		5465075	1					
ANR	5466032	PrimaryExpression	"""\\n%s\\n"""		5465075	0					
ANR	5466033	Argument	errstack . getFullText ( true )		5465075	2					
ANR	5466034	CallExpression	errstack . getFullText ( true )		5465075	0					
ANR	5466035	Callee	errstack . getFullText		5465075	0					
ANR	5466036	MemberAccess	errstack . getFullText		5465075	0					
ANR	5466037	Identifier	errstack		5465075	0					
ANR	5466038	Identifier	getFullText		5465075	1					
ANR	5466039	ArgumentList	true		5465075	1					
ANR	5466040	Argument	true		5465075	0					
ANR	5466041	Identifier	true		5465075	0					
ANR	5466042	ExpressionStatement	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"	405:4:10075:10131	5465075	1	True				
ANR	5466043	CallExpression	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"		5465075	0					
ANR	5466044	Callee	fprintf		5465075	0					
ANR	5466045	Identifier	fprintf		5465075	0					
ANR	5466046	ArgumentList	stderr		5465075	1					
ANR	5466047	Argument	stderr		5465075	0					
ANR	5466048	Identifier	stderr		5465075	0					
ANR	5466049	Argument	"""ERROR: Failed to spool job files.\\n"""		5465075	1					
ANR	5466050	PrimaryExpression	"""ERROR: Failed to spool job files.\\n"""		5465075	0					
ANR	5466051	ExpressionStatement	exit ( 1 )	406:4:10137:10144	5465075	2	True				
ANR	5466052	CallExpression	exit ( 1 )		5465075	0					
ANR	5466053	Callee	exit		5465075	0					
ANR	5466054	Identifier	exit		5465075	0					
ANR	5466055	ArgumentList	1		5465075	1					
ANR	5466056	Argument	1		5465075	0					
ANR	5466057	PrimaryExpression	1		5465075	0					
ANR	5466058	ExpressionStatement	"respad . LookupInteger ( ATTR_TREQ_INVALID_REQUEST , invalid )"	409:3:10155:10211	5465075	8	True				
ANR	5466059	CallExpression	"respad . LookupInteger ( ATTR_TREQ_INVALID_REQUEST , invalid )"		5465075	0					
ANR	5466060	Callee	respad . LookupInteger		5465075	0					
ANR	5466061	MemberAccess	respad . LookupInteger		5465075	0					
ANR	5466062	Identifier	respad		5465075	0					
ANR	5466063	Identifier	LookupInteger		5465075	1					
ANR	5466064	ArgumentList	ATTR_TREQ_INVALID_REQUEST		5465075	1					
ANR	5466065	Argument	ATTR_TREQ_INVALID_REQUEST		5465075	0					
ANR	5466066	Identifier	ATTR_TREQ_INVALID_REQUEST		5465075	0					
ANR	5466067	Argument	invalid		5465075	1					
ANR	5466068	Identifier	invalid		5465075	0					
ANR	5466069	IfStatement	if ( invalid == TRUE )		5465075	9					
ANR	5466070	Condition	invalid == TRUE	410:7:10220:10234	5465075	0	True				
ANR	5466071	EqualityExpression	invalid == TRUE		5465075	0		==			
ANR	5466072	Identifier	invalid		5465075	0					
ANR	5466073	Identifier	TRUE		5465075	1					
ANR	5466074	CompoundStatement		238:24:5457:5457	5465075	1					
ANR	5466075	ExpressionStatement	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"	411:4:10243:10299	5465075	0	True				
ANR	5466076	CallExpression	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"		5465075	0					
ANR	5466077	Callee	fprintf		5465075	0					
ANR	5466078	Identifier	fprintf		5465075	0					
ANR	5466079	ArgumentList	stderr		5465075	1					
ANR	5466080	Argument	stderr		5465075	0					
ANR	5466081	Identifier	stderr		5465075	0					
ANR	5466082	Argument	"""ERROR: Failed to spool job files.\\n"""		5465075	1					
ANR	5466083	PrimaryExpression	"""ERROR: Failed to spool job files.\\n"""		5465075	0					
ANR	5466084	ExpressionStatement	"respad . LookupString ( ATTR_TREQ_INVALID_REASON , reason )"	412:4:10305:10358	5465075	1	True				
ANR	5466085	CallExpression	"respad . LookupString ( ATTR_TREQ_INVALID_REASON , reason )"		5465075	0					
ANR	5466086	Callee	respad . LookupString		5465075	0					
ANR	5466087	MemberAccess	respad . LookupString		5465075	0					
ANR	5466088	Identifier	respad		5465075	0					
ANR	5466089	Identifier	LookupString		5465075	1					
ANR	5466090	ArgumentList	ATTR_TREQ_INVALID_REASON		5465075	1					
ANR	5466091	Argument	ATTR_TREQ_INVALID_REASON		5465075	0					
ANR	5466092	Identifier	ATTR_TREQ_INVALID_REASON		5465075	0					
ANR	5466093	Argument	reason		5465075	1					
ANR	5466094	Identifier	reason		5465075	0					
ANR	5466095	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , reason . Value ( ) )"	413:4:10364:10404	5465075	2	True				
ANR	5466096	CallExpression	"fprintf ( stderr , ""%s\\n"" , reason . Value ( ) )"		5465075	0					
ANR	5466097	Callee	fprintf		5465075	0					
ANR	5466098	Identifier	fprintf		5465075	0					
ANR	5466099	ArgumentList	stderr		5465075	1					
ANR	5466100	Argument	stderr		5465075	0					
ANR	5466101	Identifier	stderr		5465075	0					
ANR	5466102	Argument	"""%s\\n"""		5465075	1					
ANR	5466103	PrimaryExpression	"""%s\\n"""		5465075	0					
ANR	5466104	Argument	reason . Value ( )		5465075	2					
ANR	5466105	CallExpression	reason . Value ( )		5465075	0					
ANR	5466106	Callee	reason . Value		5465075	0					
ANR	5466107	MemberAccess	reason . Value		5465075	0					
ANR	5466108	Identifier	reason		5465075	0					
ANR	5466109	Identifier	Value		5465075	1					
ANR	5466110	ArgumentList			5465075	1					
ANR	5466111	ExpressionStatement	exit ( EXIT_FAILURE )	414:4:10410:10428	5465075	3	True				
ANR	5466112	CallExpression	exit ( EXIT_FAILURE )		5465075	0					
ANR	5466113	Callee	exit		5465075	0					
ANR	5466114	Identifier	exit		5465075	0					
ANR	5466115	ArgumentList	EXIT_FAILURE		5465075	1					
ANR	5466116	Argument	EXIT_FAILURE		5465075	0					
ANR	5466117	Identifier	EXIT_FAILURE		5465075	0					
ANR	5466118	ExpressionStatement	"respad . LookupString ( ATTR_TREQ_TD_SINFUL , td_sinful )"	417:3:10439:10490	5465075	10	True				
ANR	5466119	CallExpression	"respad . LookupString ( ATTR_TREQ_TD_SINFUL , td_sinful )"		5465075	0					
ANR	5466120	Callee	respad . LookupString		5465075	0					
ANR	5466121	MemberAccess	respad . LookupString		5465075	0					
ANR	5466122	Identifier	respad		5465075	0					
ANR	5466123	Identifier	LookupString		5465075	1					
ANR	5466124	ArgumentList	ATTR_TREQ_TD_SINFUL		5465075	1					
ANR	5466125	Argument	ATTR_TREQ_TD_SINFUL		5465075	0					
ANR	5466126	Identifier	ATTR_TREQ_TD_SINFUL		5465075	0					
ANR	5466127	Argument	td_sinful		5465075	1					
ANR	5466128	Identifier	td_sinful		5465075	0					
ANR	5466129	ExpressionStatement	"respad . LookupString ( ATTR_TREQ_CAPABILITY , td_cap )"	418:3:10495:10544	5465075	11	True				
ANR	5466130	CallExpression	"respad . LookupString ( ATTR_TREQ_CAPABILITY , td_cap )"		5465075	0					
ANR	5466131	Callee	respad . LookupString		5465075	0					
ANR	5466132	MemberAccess	respad . LookupString		5465075	0					
ANR	5466133	Identifier	respad		5465075	0					
ANR	5466134	Identifier	LookupString		5465075	1					
ANR	5466135	ArgumentList	ATTR_TREQ_CAPABILITY		5465075	1					
ANR	5466136	Argument	ATTR_TREQ_CAPABILITY		5465075	0					
ANR	5466137	Identifier	ATTR_TREQ_CAPABILITY		5465075	0					
ANR	5466138	Argument	td_cap		5465075	1					
ANR	5466139	Identifier	td_cap		5465075	0					
ANR	5466140	ExpressionStatement	"dprintf ( D_ALWAYS , ""td: %s, cap: %s\\n"" , td_sinful . Value ( ) , td_cap . Value ( ) )"	420:3:10550:10628	5465075	12	True				
ANR	5466141	CallExpression	"dprintf ( D_ALWAYS , ""td: %s, cap: %s\\n"" , td_sinful . Value ( ) , td_cap . Value ( ) )"		5465075	0					
ANR	5466142	Callee	dprintf		5465075	0					
ANR	5466143	Identifier	dprintf		5465075	0					
ANR	5466144	ArgumentList	D_ALWAYS		5465075	1					
ANR	5466145	Argument	D_ALWAYS		5465075	0					
ANR	5466146	Identifier	D_ALWAYS		5465075	0					
ANR	5466147	Argument	"""td: %s, cap: %s\\n"""		5465075	1					
ANR	5466148	PrimaryExpression	"""td: %s, cap: %s\\n"""		5465075	0					
ANR	5466149	Argument	td_sinful . Value ( )		5465075	2					
ANR	5466150	CallExpression	td_sinful . Value ( )		5465075	0					
ANR	5466151	Callee	td_sinful . Value		5465075	0					
ANR	5466152	MemberAccess	td_sinful . Value		5465075	0					
ANR	5466153	Identifier	td_sinful		5465075	0					
ANR	5466154	Identifier	Value		5465075	1					
ANR	5466155	ArgumentList			5465075	1					
ANR	5466156	Argument	td_cap . Value ( )		5465075	3					
ANR	5466157	CallExpression	td_cap . Value ( )		5465075	0					
ANR	5466158	Callee	td_cap . Value		5465075	0					
ANR	5466159	MemberAccess	td_cap . Value		5465075	0					
ANR	5466160	Identifier	td_cap		5465075	0					
ANR	5466161	Identifier	Value		5465075	1					
ANR	5466162	ArgumentList			5465075	1					
ANR	5466163	IdentifierDeclStatement	DCTransferD dctd ( td_sinful . Value ( ) ) ;	423:3:10634:10669	5465075	13	True				
ANR	5466164	IdentifierDecl	dctd ( td_sinful . Value ( ) )		5465075	0					
ANR	5466165	IdentifierDeclType	DCTransferD		5465075	0					
ANR	5466166	Identifier	dctd		5465075	1					
ANR	5466167	CallExpression	td_sinful . Value ( )		5465075	2					
ANR	5466168	Callee	td_sinful . Value		5465075	0					
ANR	5466169	MemberAccess	td_sinful . Value		5465075	0					
ANR	5466170	Identifier	td_sinful		5465075	0					
ANR	5466171	Identifier	Value		5465075	1					
ANR	5466172	ArgumentList			5465075	1					
ANR	5466173	ExpressionStatement	"result = dctd . download_job_files ( & respad , & errstack )"	425:3:10675:10727	5465075	14	True				
ANR	5466174	AssignmentExpression	"result = dctd . download_job_files ( & respad , & errstack )"		5465075	0		=			
ANR	5466175	Identifier	result		5465075	0					
ANR	5466176	CallExpression	"dctd . download_job_files ( & respad , & errstack )"		5465075	1					
ANR	5466177	Callee	dctd . download_job_files		5465075	0					
ANR	5466178	MemberAccess	dctd . download_job_files		5465075	0					
ANR	5466179	Identifier	dctd		5465075	0					
ANR	5466180	Identifier	download_job_files		5465075	1					
ANR	5466181	ArgumentList	& respad		5465075	1					
ANR	5466182	Argument	& respad		5465075	0					
ANR	5466183	UnaryOperationExpression	& respad		5465075	0					
ANR	5466184	UnaryOperator	&		5465075	0					
ANR	5466185	Identifier	respad		5465075	1					
ANR	5466186	Argument	& errstack		5465075	1					
ANR	5466187	UnaryOperationExpression	& errstack		5465075	0					
ANR	5466188	UnaryOperator	&		5465075	0					
ANR	5466189	Identifier	errstack		5465075	1					
ANR	5466190	IfStatement	if ( ! result )		5465075	15					
ANR	5466191	Condition	! result	426:8:10737:10743	5465075	0	True				
ANR	5466192	UnaryOperationExpression	! result		5465075	0					
ANR	5466193	UnaryOperator	!		5465075	0					
ANR	5466194	Identifier	result		5465075	1					
ANR	5466195	CompoundStatement		254:18:5967:5967	5465075	1					
ANR	5466196	ExpressionStatement	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"	427:4:10753:10808	5465075	0	True				
ANR	5466197	CallExpression	"fprintf ( stderr , ""\\n%s\\n"" , errstack . getFullText ( true ) )"		5465075	0					
ANR	5466198	Callee	fprintf		5465075	0					
ANR	5466199	Identifier	fprintf		5465075	0					
ANR	5466200	ArgumentList	stderr		5465075	1					
ANR	5466201	Argument	stderr		5465075	0					
ANR	5466202	Identifier	stderr		5465075	0					
ANR	5466203	Argument	"""\\n%s\\n"""		5465075	1					
ANR	5466204	PrimaryExpression	"""\\n%s\\n"""		5465075	0					
ANR	5466205	Argument	errstack . getFullText ( true )		5465075	2					
ANR	5466206	CallExpression	errstack . getFullText ( true )		5465075	0					
ANR	5466207	Callee	errstack . getFullText		5465075	0					
ANR	5466208	MemberAccess	errstack . getFullText		5465075	0					
ANR	5466209	Identifier	errstack		5465075	0					
ANR	5466210	Identifier	getFullText		5465075	1					
ANR	5466211	ArgumentList	true		5465075	1					
ANR	5466212	Argument	true		5465075	0					
ANR	5466213	Identifier	true		5465075	0					
ANR	5466214	ExpressionStatement	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"	428:4:10814:10870	5465075	1	True				
ANR	5466215	CallExpression	"fprintf ( stderr , ""ERROR: Failed to spool job files.\\n"" )"		5465075	0					
ANR	5466216	Callee	fprintf		5465075	0					
ANR	5466217	Identifier	fprintf		5465075	0					
ANR	5466218	ArgumentList	stderr		5465075	1					
ANR	5466219	Argument	stderr		5465075	0					
ANR	5466220	Identifier	stderr		5465075	0					
ANR	5466221	Argument	"""ERROR: Failed to spool job files.\\n"""		5465075	1					
ANR	5466222	PrimaryExpression	"""ERROR: Failed to spool job files.\\n"""		5465075	0					
ANR	5466223	ExpressionStatement	exit ( 1 )	429:4:10876:10883	5465075	2	True				
ANR	5466224	CallExpression	exit ( 1 )		5465075	0					
ANR	5466225	Callee	exit		5465075	0					
ANR	5466226	Identifier	exit		5465075	0					
ANR	5466227	ArgumentList	1		5465075	1					
ANR	5466228	Argument	1		5465075	0					
ANR	5466229	PrimaryExpression	1		5465075	0					
ANR	5466230	BreakStatement	break ;	433:2:10911:10916	5465075	5	True				
ANR	5466231	Label	default :	435:2:10921:10928	5465075	6	True				
ANR	5466232	Identifier	default		5465075	0					
ANR	5466233	ExpressionStatement	"EXCEPT ( ""PROGRAMMER ERROR: st_method must be known."" )"	436:3:10933:10985	5465075	7	True				
ANR	5466234	CallExpression	"EXCEPT ( ""PROGRAMMER ERROR: st_method must be known."" )"		5465075	0					
ANR	5466235	Callee	EXCEPT		5465075	0					
ANR	5466236	Identifier	EXCEPT		5465075	0					
ANR	5466237	ArgumentList	"""PROGRAMMER ERROR: st_method must be known."""		5465075	1					
ANR	5466238	Argument	"""PROGRAMMER ERROR: st_method must be known."""		5465075	0					
ANR	5466239	PrimaryExpression	"""PROGRAMMER ERROR: st_method must be known."""		5465075	0					
ANR	5466240	BreakStatement	break ;	437:3:10990:10995	5465075	8	True				
ANR	5466241	ReturnStatement	return 0 ;	441:1:11016:11024	5465075	25	True				
ANR	5466242	PrimaryExpression	0		5465075	0					
ANR	5466243	ReturnType	int		5465075	1					
ANR	5466244	Identifier	main		5465075	2					
ANR	5466245	ParameterList	"int argc , char * argv [ ]"		5465075	3					
ANR	5466246	Parameter	int argc	172:5:4755:4762	5465075	0	True				
ANR	5466247	ParameterType	int		5465075	0					
ANR	5466248	Identifier	argc		5465075	1					
ANR	5466249	Parameter	char * argv [ ]	172:15:4765:4776	5465075	1	True				
ANR	5466250	ParameterType	char * [ ]		5465075	0					
ANR	5466251	Identifier	argv		5465075	1					
ANR	5466252	CFGEntryNode	ENTRY		5465075		True				
ANR	5466253	CFGExitNode	EXIT		5465075		True				
ANR	5466254	Symbol	All		5465075						
ANR	5466255	Symbol	reason		5465075						
ANR	5466256	Symbol	dctd		5465075						
ANR	5466257	Symbol	st_method		5465075						
ANR	5466258	Symbol	method . Value		5465075						
ANR	5466259	Symbol	stdout		5465075						
ANR	5466260	Symbol	FTP_CFTP		5465075						
ANR	5466261	Symbol	p_funcs		5465075						
ANR	5466262	Symbol	* argv		5465075						
ANR	5466263	Symbol	* args		5465075						
ANR	5466264	Symbol	tmp		5465075						
ANR	5466265	Symbol	myDistro		5465075						
ANR	5466266	Symbol	scheddAddr		5465075						
ANR	5466267	Symbol	& errstack		5465075						
ANR	5466268	Symbol	td_cap . Value		5465075						
ANR	5466269	Symbol	SIGPIPE		5465075						
ANR	5466270	Symbol	global_constraint . Length		5465075						
ANR	5466271	Symbol	schedd -> requestSandboxLocation		5465075						
ANR	5466272	Symbol	NULL		5465075						
ANR	5466273	Symbol	td_cap		5465075						
ANR	5466274	Symbol	method		5465075						
ANR	5466275	Symbol	get_param_functions		5465075						
ANR	5466276	Symbol	global_constraint . Value		5465075						
ANR	5466277	Symbol	pool		5465075						
ANR	5466278	Symbol	SIG_IGN		5465075						
ANR	5466279	Symbol	TRUE		5465075						
ANR	5466280	Symbol	stderr		5465075						
ANR	5466281	Symbol	& respad		5465075						
ANR	5466282	Symbol	errstack		5465075						
ANR	5466283	Symbol	dctd . download_job_files		5465075						
ANR	5466284	Symbol	EXIT_FAILURE		5465075						
ANR	5466285	Symbol	scheddName		5465075						
ANR	5466286	Symbol	true		5465075						
ANR	5466287	Symbol	invalid		5465075						
ANR	5466288	Symbol	td_sinful . Value		5465075						
ANR	5466289	Symbol	condor_basename		5465075						
ANR	5466290	Symbol	respad		5465075						
ANR	5466291	Symbol	* arg		5465075						
ANR	5466292	Symbol	STM_UNKNOWN		5465075						
ANR	5466293	Symbol	MyName		5465075						
ANR	5466294	Symbol	match_prefix		5465075						
ANR	5466295	Symbol	nArgs		5465075						
ANR	5466296	Symbol	is_valid_sinful		5465075						
ANR	5466297	Symbol	reason . Value		5465075						
ANR	5466298	Symbol	schedd -> locate		5465075						
ANR	5466299	Symbol	argv		5465075						
ANR	5466300	Symbol	ATTR_TREQ_TD_SINFUL		5465075						
ANR	5466301	Symbol	result		5465075						
ANR	5466302	Symbol	param		5465075						
ANR	5466303	Symbol	arg		5465075						
ANR	5466304	Symbol	schedd -> receiveJobSandbox		5465075						
ANR	5466305	Symbol	FTPD_DOWNLOAD		5465075						
ANR	5466306	Symbol	* schedd		5465075						
ANR	5466307	Symbol	argc		5465075						
ANR	5466308	Symbol	malloc		5465075						
ANR	5466309	Symbol	Termlog		5465075						
ANR	5466310	Symbol	D_ALWAYS		5465075						
ANR	5466311	Symbol	i		5465075						
ANR	5466312	Symbol	schedd		5465075						
ANR	5466313	Symbol	args		5465075						
ANR	5466314	Symbol	global_constraint		5465075						
ANR	5466315	Symbol	* i		5465075						
ANR	5466316	Symbol	td_sinful		5465075						
ANR	5466317	Symbol	ATTR_TREQ_CAPABILITY		5465075						
ANR	5466318	Symbol	ATTR_TREQ_INVALID_REQUEST		5465075						
ANR	5466319	Symbol	errstack . getFullText		5465075						
ANR	5466320	Symbol	* nArgs		5465075						
ANR	5466321	Symbol	strdup		5465075						
ANR	5466322	Symbol	schedd -> error		5465075						
ANR	5466323	Symbol	ATTR_TREQ_INVALID_REASON		5465075						
