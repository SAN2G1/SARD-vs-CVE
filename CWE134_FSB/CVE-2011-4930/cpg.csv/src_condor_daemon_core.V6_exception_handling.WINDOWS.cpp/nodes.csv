command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3084904	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_core.V6_exception_handling.WINDOWS.cpp								
ANR	3084905	DeclStmt									
ANR	3084906	Decl							TCHAR	TCHAR [ MAX_PATH ]	ExceptionHandler :: m_szLogFileName
ANR	3084907	DeclStmt									
ANR	3084908	Decl							LPTOP_LEVEL_EXCEPTION_FILTER	LPTOP_LEVEL_EXCEPTION_FILTER	ExceptionHandler :: m_previousFilter
ANR	3084909	DeclStmt									
ANR	3084910	Decl							HANDLE	HANDLE	ExceptionHandler :: m_hReportFile
ANR	3084911	DeclStmt									
ANR	3084912	Decl							pid_t	pid_t	ExceptionHandler :: m_pid
ANR	3084913	DeclStmt									
ANR	3084914	Decl							ExceptionHandler :: SYMINITIALIZEPROC	ExceptionHandler :: SYMINITIALIZEPROC	ExceptionHandler :: _SymInitialize
ANR	3084915	DeclStmt									
ANR	3084916	Decl							ExceptionHandler :: SYMCLEANUPPROC	ExceptionHandler :: SYMCLEANUPPROC	ExceptionHandler :: _SymCleanup
ANR	3084917	DeclStmt									
ANR	3084918	Decl							ExceptionHandler :: STACKWALKPROC	ExceptionHandler :: STACKWALKPROC	ExceptionHandler :: _StackWalk
ANR	3084919	DeclStmt									
ANR	3084920	Decl							ExceptionHandler :: SYMFUNCTIONTABLEACCESSPROC	ExceptionHandler :: SYMFUNCTIONTABLEACCESSPROC	ExceptionHandler :: _SymFunctionTableAccess
ANR	3084921	DeclStmt									
ANR	3084922	Decl							ExceptionHandler :: SYMGETMODULEBASEPROC	ExceptionHandler :: SYMGETMODULEBASEPROC	ExceptionHandler :: _SymGetModuleBase
ANR	3084923	DeclStmt									
ANR	3084924	Decl							ExceptionHandler :: SYMGETSYMFROMADDRPROC	ExceptionHandler :: SYMGETSYMFROMADDRPROC	ExceptionHandler :: _SymGetSymFromAddr
ANR	3084925	DeclStmt									
ANR	3084926	Decl							ExceptionHandler :: SYMGETLINEFROMADDRPROC	ExceptionHandler :: SYMGETLINEFROMADDRPROC	ExceptionHandler :: _SymGetLineFromAddr
ANR	3084927	DeclStmt									
ANR	3084928	Decl							ExceptionHandler	ExceptionHandler	g_ExceptionHandler
ANR	3084929	Function	ExceptionHandler :: ExceptionHandler	50:0:2034:2664							
ANR	3084930	FunctionDef	ExceptionHandler :: ExceptionHandler ()		3084929	0					
ANR	3084931	CompoundStatement		50:37:2071:2664	3084929	0					
ANR	3084932	ExpressionStatement	m_previousFilter = SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )	52:4:2132:2207	3084929	0	True				
ANR	3084933	AssignmentExpression	m_previousFilter = SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		3084929	0		=			
ANR	3084934	Identifier	m_previousFilter		3084929	0					
ANR	3084935	CallExpression	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		3084929	1					
ANR	3084936	Callee	SetUnhandledExceptionFilter		3084929	0					
ANR	3084937	Identifier	SetUnhandledExceptionFilter		3084929	0					
ANR	3084938	ArgumentList	MSJUnhandledExceptionFilter		3084929	1					
ANR	3084939	Argument	MSJUnhandledExceptionFilter		3084929	0					
ANR	3084940	Identifier	MSJUnhandledExceptionFilter		3084929	0					
ANR	3084941	ExpressionStatement	"GetModuleFileName ( 0 , m_szLogFileName , MAX_PATH )"	54:4:2285:2334	3084929	1	True				
ANR	3084942	CallExpression	"GetModuleFileName ( 0 , m_szLogFileName , MAX_PATH )"		3084929	0					
ANR	3084943	Callee	GetModuleFileName		3084929	0					
ANR	3084944	Identifier	GetModuleFileName		3084929	0					
ANR	3084945	ArgumentList	0		3084929	1					
ANR	3084946	Argument	0		3084929	0					
ANR	3084947	PrimaryExpression	0		3084929	0					
ANR	3084948	Argument	m_szLogFileName		3084929	1					
ANR	3084949	Identifier	m_szLogFileName		3084929	0					
ANR	3084950	Argument	MAX_PATH		3084929	2					
ANR	3084951	Identifier	MAX_PATH		3084929	0					
ANR	3084952	IdentifierDeclStatement	"PTSTR pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) ) ;"	57:1:2434:2485	3084929	2	True				
ANR	3084953	IdentifierDecl	"pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) )"		3084929	0					
ANR	3084954	IdentifierDeclType	PTSTR		3084929	0					
ANR	3084955	Identifier	pszDot		3084929	1					
ANR	3084956	AssignmentExpression	"pszDot = _tcsrchr ( m_szLogFileName , _T ( '.' ) )"		3084929	2		=			
ANR	3084957	Identifier	pszDot		3084929	0					
ANR	3084958	CallExpression	"_tcsrchr ( m_szLogFileName , _T ( '.' ) )"		3084929	1					
ANR	3084959	Callee	_tcsrchr		3084929	0					
ANR	3084960	Identifier	_tcsrchr		3084929	0					
ANR	3084961	ArgumentList	m_szLogFileName		3084929	1					
ANR	3084962	Argument	m_szLogFileName		3084929	0					
ANR	3084963	Identifier	m_szLogFileName		3084929	0					
ANR	3084964	Argument	_T ( '.' )		3084929	1					
ANR	3084965	CallExpression	_T ( '.' )		3084929	0					
ANR	3084966	Callee	_T		3084929	0					
ANR	3084967	Identifier	_T		3084929	0					
ANR	3084968	ArgumentList	'.'		3084929	1					
ANR	3084969	Argument	'.'		3084929	0					
ANR	3084970	PrimaryExpression	'.'		3084929	0					
ANR	3084971	IfStatement	if ( pszDot )		3084929	3					
ANR	3084972	Condition	pszDot	58:9:2496:2501	3084929	0	True				
ANR	3084973	Identifier	pszDot		3084929	0					
ANR	3084974	CompoundStatement		9:21:436:436	3084929	1					
ANR	3084975	ExpressionStatement	pszDot ++	59:2:2520:2528	3084929	0	True				
ANR	3084976	PostIncDecOperationExpression	pszDot ++		3084929	0					
ANR	3084977	Identifier	pszDot		3084929	0					
ANR	3084978	IncDec	++		3084929	1					
ANR	3084979	IfStatement	if ( _tcslen ( pszDot ) >= 3 )		3084929	1					
ANR	3084980	Condition	_tcslen ( pszDot ) >= 3	60:13:2569:2588	3084929	0	True				
ANR	3084981	RelationalExpression	_tcslen ( pszDot ) >= 3		3084929	0		>=			
ANR	3084982	CallExpression	_tcslen ( pszDot )		3084929	0					
ANR	3084983	Callee	_tcslen		3084929	0					
ANR	3084984	Identifier	_tcslen		3084929	0					
ANR	3084985	ArgumentList	pszDot		3084929	1					
ANR	3084986	Argument	pszDot		3084929	0					
ANR	3084987	Identifier	pszDot		3084929	0					
ANR	3084988	PrimaryExpression	3		3084929	1					
ANR	3084989	ExpressionStatement	"_tcscpy ( pszDot , _T ( ""RPT"" ) )"	61:12:2604:2632	3084929	1	True				
ANR	3084990	CallExpression	"_tcscpy ( pszDot , _T ( ""RPT"" ) )"		3084929	0					
ANR	3084991	Callee	_tcscpy		3084929	0					
ANR	3084992	Identifier	_tcscpy		3084929	0					
ANR	3084993	ArgumentList	pszDot		3084929	1					
ANR	3084994	Argument	pszDot		3084929	0					
ANR	3084995	Identifier	pszDot		3084929	0					
ANR	3084996	Argument	"_T ( ""RPT"" )"		3084929	1					
ANR	3084997	CallExpression	"_T ( ""RPT"" )"		3084929	0					
ANR	3084998	Callee	_T		3084929	0					
ANR	3084999	Identifier	_T		3084929	0					
ANR	3085000	ArgumentList	"""RPT"""		3084929	1					
ANR	3085001	Argument	"""RPT"""		3084929	0					
ANR	3085002	PrimaryExpression	"""RPT"""		3084929	0					
ANR	3085003	Identifier	ExceptionHandler :: ExceptionHandler		3084929	1					
ANR	3085004	ParameterList			3084929	2					
ANR	3085005	CFGEntryNode	ENTRY		3084929		True				
ANR	3085006	CFGExitNode	EXIT		3084929		True				
ANR	3085007	Symbol	_T		3084929						
ANR	3085008	Symbol	MSJUnhandledExceptionFilter		3084929						
ANR	3085009	Symbol	m_szLogFileName		3084929						
ANR	3085010	Symbol	m_previousFilter		3084929						
ANR	3085011	Symbol	pszDot		3084929						
ANR	3085012	Symbol	MAX_PATH		3084929						
ANR	3085013	Symbol	_tcslen		3084929						
ANR	3085014	Symbol	_tcsrchr		3084929						
ANR	3085015	Symbol	SetUnhandledExceptionFilter		3084929						
ANR	3085016	Function	ExceptionHandler :: ~ExceptionHandler	66:0:2710:2803							
ANR	3085017	FunctionDef	ExceptionHandler :: ~ExceptionHandler ()		3085016	0					
ANR	3085018	CompoundStatement		66:38:2748:2803	3085016	0					
ANR	3085019	ExpressionStatement	SetUnhandledExceptionFilter ( m_previousFilter )	67:4:2754:2801	3085016	0	True				
ANR	3085020	CallExpression	SetUnhandledExceptionFilter ( m_previousFilter )		3085016	0					
ANR	3085021	Callee	SetUnhandledExceptionFilter		3085016	0					
ANR	3085022	Identifier	SetUnhandledExceptionFilter		3085016	0					
ANR	3085023	ArgumentList	m_previousFilter		3085016	1					
ANR	3085024	Argument	m_previousFilter		3085016	0					
ANR	3085025	Identifier	m_previousFilter		3085016	0					
ANR	3085026	Identifier	ExceptionHandler :: ~ExceptionHandler		3085016	1					
ANR	3085027	ParameterList			3085016	2					
ANR	3085028	CFGEntryNode	ENTRY		3085016		True				
ANR	3085029	CFGExitNode	EXIT		3085016		True				
ANR	3085030	Symbol	m_previousFilter		3085016						
ANR	3085031	Function	ExceptionHandler :: TurnOff	76:0:3124:3209							
ANR	3085032	FunctionDef	ExceptionHandler :: TurnOff ()		3085031	0					
ANR	3085033	CompoundStatement		76:33:3157:3209	3085031	0					
ANR	3085034	ExpressionStatement	SetUnhandledExceptionFilter ( m_previousFilter )	77:1:3160:3207	3085031	0	True				
ANR	3085035	CallExpression	SetUnhandledExceptionFilter ( m_previousFilter )		3085031	0					
ANR	3085036	Callee	SetUnhandledExceptionFilter		3085031	0					
ANR	3085037	Identifier	SetUnhandledExceptionFilter		3085031	0					
ANR	3085038	ArgumentList	m_previousFilter		3085031	1					
ANR	3085039	Argument	m_previousFilter		3085031	0					
ANR	3085040	Identifier	m_previousFilter		3085031	0					
ANR	3085041	ReturnType	void		3085031	1					
ANR	3085042	Identifier	ExceptionHandler :: TurnOff		3085031	2					
ANR	3085043	ParameterList			3085031	3					
ANR	3085044	CFGEntryNode	ENTRY		3085031		True				
ANR	3085045	CFGExitNode	EXIT		3085031		True				
ANR	3085046	Symbol	m_previousFilter		3085031						
ANR	3085047	Function	ExceptionHandler :: TurnOn	80:0:3212:3305							
ANR	3085048	FunctionDef	ExceptionHandler :: TurnOn ()		3085047	0					
ANR	3085049	CompoundStatement		80:32:3244:3305	3085047	0					
ANR	3085050	ExpressionStatement	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )	81:1:3247:3303	3085047	0	True				
ANR	3085051	CallExpression	SetUnhandledExceptionFilter ( MSJUnhandledExceptionFilter )		3085047	0					
ANR	3085052	Callee	SetUnhandledExceptionFilter		3085047	0					
ANR	3085053	Identifier	SetUnhandledExceptionFilter		3085047	0					
ANR	3085054	ArgumentList	MSJUnhandledExceptionFilter		3085047	1					
ANR	3085055	Argument	MSJUnhandledExceptionFilter		3085047	0					
ANR	3085056	Identifier	MSJUnhandledExceptionFilter		3085047	0					
ANR	3085057	ReturnType	void		3085047	1					
ANR	3085058	Identifier	ExceptionHandler :: TurnOn		3085047	2					
ANR	3085059	ParameterList			3085047	3					
ANR	3085060	CFGEntryNode	ENTRY		3085047		True				
ANR	3085061	CFGExitNode	EXIT		3085047		True				
ANR	3085062	Symbol	MSJUnhandledExceptionFilter		3085047						
ANR	3085063	Function	ExceptionHandler :: SetLogFileName	87:0:3503:3614							
ANR	3085064	FunctionDef	ExceptionHandler :: SetLogFileName (PTSTR pszLogFileName)		3085063	0					
ANR	3085065	CompoundStatement		87:61:3564:3614	3085063	0					
ANR	3085066	ExpressionStatement	"_tcscpy ( m_szLogFileName , pszLogFileName )"	88:4:3570:3612	3085063	0	True				
ANR	3085067	CallExpression	"_tcscpy ( m_szLogFileName , pszLogFileName )"		3085063	0					
ANR	3085068	Callee	_tcscpy		3085063	0					
ANR	3085069	Identifier	_tcscpy		3085063	0					
ANR	3085070	ArgumentList	m_szLogFileName		3085063	1					
ANR	3085071	Argument	m_szLogFileName		3085063	0					
ANR	3085072	Identifier	m_szLogFileName		3085063	0					
ANR	3085073	Argument	pszLogFileName		3085063	1					
ANR	3085074	Identifier	pszLogFileName		3085063	0					
ANR	3085075	ReturnType	void		3085063	1					
ANR	3085076	Identifier	ExceptionHandler :: SetLogFileName		3085063	2					
ANR	3085077	ParameterList	PTSTR pszLogFileName		3085063	3					
ANR	3085078	Parameter	PTSTR pszLogFileName	87:39:3542:3561	3085063	0	True				
ANR	3085079	ParameterType	PTSTR		3085063	0					
ANR	3085080	Identifier	pszLogFileName		3085063	1					
ANR	3085081	CFGEntryNode	ENTRY		3085063		True				
ANR	3085082	CFGExitNode	EXIT		3085063		True				
ANR	3085083	Symbol	pszLogFileName		3085063						
ANR	3085084	Symbol	m_szLogFileName		3085063						
ANR	3085085	Function	ExceptionHandler :: SetPID	94:0:3814:3877							
ANR	3085086	FunctionDef	ExceptionHandler :: SetPID (pid_t pid)		3085085	0					
ANR	3085087	CompoundStatement		94:42:3856:3877	3085085	0					
ANR	3085088	ExpressionStatement	m_pid = pid	95:4:3863:3874	3085085	0	True				
ANR	3085089	AssignmentExpression	m_pid = pid		3085085	0		=			
ANR	3085090	Identifier	m_pid		3085085	0					
ANR	3085091	Identifier	pid		3085085	1					
ANR	3085092	ReturnType	void		3085085	1					
ANR	3085093	Identifier	ExceptionHandler :: SetPID		3085085	2					
ANR	3085094	ParameterList	pid_t pid		3085085	3					
ANR	3085095	Parameter	pid_t pid	94:31:3845:3853	3085085	0	True				
ANR	3085096	ParameterType	pid_t		3085085	0					
ANR	3085097	Identifier	pid		3085085	1					
ANR	3085098	CFGEntryNode	ENTRY		3085085		True				
ANR	3085099	CFGExitNode	EXIT		3085085		True				
ANR	3085100	Symbol	m_pid		3085085						
ANR	3085101	Symbol	pid		3085085						
ANR	3085102	Function	ExceptionHandler :: MSJUnhandledExceptionFilter	101:0:4066:4938							
ANR	3085103	FunctionDef	ExceptionHandler :: MSJUnhandledExceptionFilter (PEXCEPTION_POINTERS pExceptionInfo)		3085102	0					
ANR	3085104	CompoundStatement		103:0:4207:4938	3085102	0					
ANR	3085105	ExpressionStatement	"dprintf ( D_ALWAYS , ""Intercepting an unhandled exception.\\n"" )"	104:1:4215:4277	3085102	0	True				
ANR	3085106	CallExpression	"dprintf ( D_ALWAYS , ""Intercepting an unhandled exception.\\n"" )"		3085102	0					
ANR	3085107	Callee	dprintf		3085102	0					
ANR	3085108	Identifier	dprintf		3085102	0					
ANR	3085109	ArgumentList	D_ALWAYS		3085102	1					
ANR	3085110	Argument	D_ALWAYS		3085102	0					
ANR	3085111	Identifier	D_ALWAYS		3085102	0					
ANR	3085112	Argument	"""Intercepting an unhandled exception.\\n"""		3085102	1					
ANR	3085113	PrimaryExpression	"""Intercepting an unhandled exception.\\n"""		3085102	0					
ANR	3085114	ExpressionStatement	"m_hReportFile = CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"	105:1:4281:4534	3085102	1	True				
ANR	3085115	AssignmentExpression	"m_hReportFile = CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"		3085102	0		=			
ANR	3085116	Identifier	m_hReportFile		3085102	0					
ANR	3085117	CallExpression	"CreateFile ( m_szLogFileName , GENERIC_WRITE , 0 , 0 , CREATE_ALWAYS , FILE_FLAG_WRITE_THROUGH , 0 )"		3085102	1					
ANR	3085118	Callee	CreateFile		3085102	0					
ANR	3085119	Identifier	CreateFile		3085102	0					
ANR	3085120	ArgumentList	m_szLogFileName		3085102	1					
ANR	3085121	Argument	m_szLogFileName		3085102	0					
ANR	3085122	Identifier	m_szLogFileName		3085102	0					
ANR	3085123	Argument	GENERIC_WRITE		3085102	1					
ANR	3085124	Identifier	GENERIC_WRITE		3085102	0					
ANR	3085125	Argument	0		3085102	2					
ANR	3085126	PrimaryExpression	0		3085102	0					
ANR	3085127	Argument	0		3085102	3					
ANR	3085128	PrimaryExpression	0		3085102	0					
ANR	3085129	Argument	CREATE_ALWAYS		3085102	4					
ANR	3085130	Identifier	CREATE_ALWAYS		3085102	0					
ANR	3085131	Argument	FILE_FLAG_WRITE_THROUGH		3085102	5					
ANR	3085132	Identifier	FILE_FLAG_WRITE_THROUGH		3085102	0					
ANR	3085133	Argument	0		3085102	6					
ANR	3085134	PrimaryExpression	0		3085102	0					
ANR	3085135	IfStatement	if ( m_hReportFile )		3085102	2					
ANR	3085136	Condition	m_hReportFile	112:6:4546:4558	3085102	0	True				
ANR	3085137	Identifier	m_hReportFile		3085102	0					
ANR	3085138	CompoundStatement		10:25:357:357	3085102	1					
ANR	3085139	ExpressionStatement	"dprintf ( D_ALWAYS , ""Dropping a core file.\\n"" )"	113:2:4570:4617	3085102	0	True				
ANR	3085140	CallExpression	"dprintf ( D_ALWAYS , ""Dropping a core file.\\n"" )"		3085102	0					
ANR	3085141	Callee	dprintf		3085102	0					
ANR	3085142	Identifier	dprintf		3085102	0					
ANR	3085143	ArgumentList	D_ALWAYS		3085102	1					
ANR	3085144	Argument	D_ALWAYS		3085102	0					
ANR	3085145	Identifier	D_ALWAYS		3085102	0					
ANR	3085146	Argument	"""Dropping a core file.\\n"""		3085102	1					
ANR	3085147	PrimaryExpression	"""Dropping a core file.\\n"""		3085102	0					
ANR	3085148	ExpressionStatement	GenerateExceptionReport ( pExceptionInfo )	115:8:4687:4728	3085102	1	True				
ANR	3085149	CallExpression	GenerateExceptionReport ( pExceptionInfo )		3085102	0					
ANR	3085150	Callee	GenerateExceptionReport		3085102	0					
ANR	3085151	Identifier	GenerateExceptionReport		3085102	0					
ANR	3085152	ArgumentList	pExceptionInfo		3085102	1					
ANR	3085153	Argument	pExceptionInfo		3085102	0					
ANR	3085154	Identifier	pExceptionInfo		3085102	0					
ANR	3085155	ExpressionStatement	CloseHandle ( m_hReportFile )	116:8:4738:4766	3085102	2	True				
ANR	3085156	CallExpression	CloseHandle ( m_hReportFile )		3085102	0					
ANR	3085157	Callee	CloseHandle		3085102	0					
ANR	3085158	Identifier	CloseHandle		3085102	0					
ANR	3085159	ArgumentList	m_hReportFile		3085102	1					
ANR	3085160	Argument	m_hReportFile		3085102	0					
ANR	3085161	Identifier	m_hReportFile		3085102	0					
ANR	3085162	ExpressionStatement	m_hReportFile = 0	117:2:4778:4795	3085102	3	True				
ANR	3085163	AssignmentExpression	m_hReportFile = 0		3085102	0		=			
ANR	3085164	Identifier	m_hReportFile		3085102	0					
ANR	3085165	PrimaryExpression	0		3085102	1					
ANR	3085166	IfStatement	if ( m_previousFilter )		3085102	3					
ANR	3085167	Condition	m_previousFilter	119:9:4813:4828	3085102	0	True				
ANR	3085168	Identifier	m_previousFilter		3085102	0					
ANR	3085169	ReturnStatement	return m_previousFilter ( pExceptionInfo ) ;	120:2:4842:4883	3085102	1	True				
ANR	3085170	CallExpression	m_previousFilter ( pExceptionInfo )		3085102	0					
ANR	3085171	Callee	m_previousFilter		3085102	0					
ANR	3085172	Identifier	m_previousFilter		3085102	0					
ANR	3085173	ArgumentList	pExceptionInfo		3085102	1					
ANR	3085174	Argument	pExceptionInfo		3085102	0					
ANR	3085175	Identifier	pExceptionInfo		3085102	0					
ANR	3085176	ElseStatement	else		3085102	0					
ANR	3085177	ReturnStatement	return EXCEPTION_CONTINUE_SEARCH ;	122:2:4904:4936	3085102	0	True				
ANR	3085178	Identifier	EXCEPTION_CONTINUE_SEARCH		3085102	0					
ANR	3085179	ReturnType	LONG WINAPI		3085102	1					
ANR	3085180	Identifier	ExceptionHandler :: MSJUnhandledExceptionFilter		3085102	2					
ANR	3085181	ParameterList	PEXCEPTION_POINTERS pExceptionInfo		3085102	3					
ANR	3085182	Parameter	PEXCEPTION_POINTERS pExceptionInfo	102:45:4170:4203	3085102	0	True				
ANR	3085183	ParameterType	PEXCEPTION_POINTERS		3085102	0					
ANR	3085184	Identifier	pExceptionInfo		3085102	1					
ANR	3085185	CFGEntryNode	ENTRY		3085102		True				
ANR	3085186	CFGExitNode	EXIT		3085102		True				
ANR	3085187	Symbol	CreateFile		3085102						
ANR	3085188	Symbol	CREATE_ALWAYS		3085102						
ANR	3085189	Symbol	pExceptionInfo		3085102						
ANR	3085190	Symbol	m_szLogFileName		3085102						
ANR	3085191	Symbol	GENERIC_WRITE		3085102						
ANR	3085192	Symbol	D_ALWAYS		3085102						
ANR	3085193	Symbol	m_previousFilter		3085102						
ANR	3085194	Symbol	EXCEPTION_CONTINUE_SEARCH		3085102						
ANR	3085195	Symbol	FILE_FLAG_WRITE_THROUGH		3085102						
ANR	3085196	Symbol	m_hReportFile		3085102						
ANR	3085197	Function	ExceptionHandler :: GenerateExceptionReport	128:0:5252:7640							
ANR	3085198	FunctionDef	ExceptionHandler :: GenerateExceptionReport (PEXCEPTION_POINTERS pExceptionInfo)		3085197	0					
ANR	3085199	CompoundStatement		129:40:5340:7640	3085197	0					
ANR	3085200	ExpressionStatement	"_tprintf ( _T ( ""//=====================================================\\n"" ) )"	131:4:5378:5453	3085197	0	True				
ANR	3085201	CallExpression	"_tprintf ( _T ( ""//=====================================================\\n"" ) )"		3085197	0					
ANR	3085202	Callee	_tprintf		3085197	0					
ANR	3085203	Identifier	_tprintf		3085197	0					
ANR	3085204	ArgumentList	"_T ( ""//=====================================================\\n"" )"		3085197	1					
ANR	3085205	Argument	"_T ( ""//=====================================================\\n"" )"		3085197	0					
ANR	3085206	CallExpression	"_T ( ""//=====================================================\\n"" )"		3085197	0					
ANR	3085207	Callee	_T		3085197	0					
ANR	3085208	Identifier	_T		3085197	0					
ANR	3085209	ArgumentList	"""//=====================================================\\n"""		3085197	1					
ANR	3085210	Argument	"""//=====================================================\\n"""		3085197	0					
ANR	3085211	PrimaryExpression	"""//=====================================================\\n"""		3085197	0					
ANR	3085212	IdentifierDeclStatement	PEXCEPTION_RECORD pExceptionRecord = pExceptionInfo -> ExceptionRecord ;	132:4:5459:5527	3085197	1	True				
ANR	3085213	IdentifierDecl	pExceptionRecord = pExceptionInfo -> ExceptionRecord		3085197	0					
ANR	3085214	IdentifierDeclType	PEXCEPTION_RECORD		3085197	0					
ANR	3085215	Identifier	pExceptionRecord		3085197	1					
ANR	3085216	AssignmentExpression	pExceptionRecord = pExceptionInfo -> ExceptionRecord		3085197	2		=			
ANR	3085217	Identifier	pExceptionRecord		3085197	0					
ANR	3085218	PtrMemberAccess	pExceptionInfo -> ExceptionRecord		3085197	1					
ANR	3085219	Identifier	pExceptionInfo		3085197	0					
ANR	3085220	Identifier	ExceptionRecord		3085197	1					
ANR	3085221	ExpressionStatement	"_tprintf ( _T ( ""PID: %d\\n"" ) , m_pid )"	134:1:5571:5607	3085197	2	True				
ANR	3085222	CallExpression	"_tprintf ( _T ( ""PID: %d\\n"" ) , m_pid )"		3085197	0					
ANR	3085223	Callee	_tprintf		3085197	0					
ANR	3085224	Identifier	_tprintf		3085197	0					
ANR	3085225	ArgumentList	"_T ( ""PID: %d\\n"" )"		3085197	1					
ANR	3085226	Argument	"_T ( ""PID: %d\\n"" )"		3085197	0					
ANR	3085227	CallExpression	"_T ( ""PID: %d\\n"" )"		3085197	0					
ANR	3085228	Callee	_T		3085197	0					
ANR	3085229	Identifier	_T		3085197	0					
ANR	3085230	ArgumentList	"""PID: %d\\n"""		3085197	1					
ANR	3085231	Argument	"""PID: %d\\n"""		3085197	0					
ANR	3085232	PrimaryExpression	"""PID: %d\\n"""		3085197	0					
ANR	3085233	Argument	m_pid		3085197	1					
ANR	3085234	Identifier	m_pid		3085197	0					
ANR	3085235	ExpressionStatement	"_tprintf ( _T ( ""Exception code: %08X %s\\n"" ) , pExceptionRecord -> ExceptionCode , GetExceptionString ( pExceptionRecord -> ExceptionCode ) )"	136:4:5666:5829	3085197	3	True				
ANR	3085236	CallExpression	"_tprintf ( _T ( ""Exception code: %08X %s\\n"" ) , pExceptionRecord -> ExceptionCode , GetExceptionString ( pExceptionRecord -> ExceptionCode ) )"		3085197	0					
ANR	3085237	Callee	_tprintf		3085197	0					
ANR	3085238	Identifier	_tprintf		3085197	0					
ANR	3085239	ArgumentList	"_T ( ""Exception code: %08X %s\\n"" )"		3085197	1					
ANR	3085240	Argument	"_T ( ""Exception code: %08X %s\\n"" )"		3085197	0					
ANR	3085241	CallExpression	"_T ( ""Exception code: %08X %s\\n"" )"		3085197	0					
ANR	3085242	Callee	_T		3085197	0					
ANR	3085243	Identifier	_T		3085197	0					
ANR	3085244	ArgumentList	"""Exception code: %08X %s\\n"""		3085197	1					
ANR	3085245	Argument	"""Exception code: %08X %s\\n"""		3085197	0					
ANR	3085246	PrimaryExpression	"""Exception code: %08X %s\\n"""		3085197	0					
ANR	3085247	Argument	pExceptionRecord -> ExceptionCode		3085197	1					
ANR	3085248	PtrMemberAccess	pExceptionRecord -> ExceptionCode		3085197	0					
ANR	3085249	Identifier	pExceptionRecord		3085197	0					
ANR	3085250	Identifier	ExceptionCode		3085197	1					
ANR	3085251	Argument	GetExceptionString ( pExceptionRecord -> ExceptionCode )		3085197	2					
ANR	3085252	CallExpression	GetExceptionString ( pExceptionRecord -> ExceptionCode )		3085197	0					
ANR	3085253	Callee	GetExceptionString		3085197	0					
ANR	3085254	Identifier	GetExceptionString		3085197	0					
ANR	3085255	ArgumentList	pExceptionRecord -> ExceptionCode		3085197	1					
ANR	3085256	Argument	pExceptionRecord -> ExceptionCode		3085197	0					
ANR	3085257	PtrMemberAccess	pExceptionRecord -> ExceptionCode		3085197	0					
ANR	3085258	Identifier	pExceptionRecord		3085197	0					
ANR	3085259	Identifier	ExceptionCode		3085197	1					
ANR	3085260	IdentifierDeclStatement	TCHAR szFaultingModule [ MAX_PATH ] ;	140:4:5894:5926	3085197	4	True				
ANR	3085261	IdentifierDecl	szFaultingModule [ MAX_PATH ]		3085197	0					
ANR	3085262	IdentifierDeclType	TCHAR [ MAX_PATH ]		3085197	0					
ANR	3085263	Identifier	szFaultingModule		3085197	1					
ANR	3085264	Identifier	MAX_PATH		3085197	2					
ANR	3085265	IdentifierDeclStatement	"DWORD section , offset ;"	141:1:5933:5954	3085197	5	True				
ANR	3085266	IdentifierDecl	section		3085197	0					
ANR	3085267	IdentifierDeclType	DWORD		3085197	0					
ANR	3085268	Identifier	section		3085197	1					
ANR	3085269	IdentifierDecl	offset		3085197	1					
ANR	3085270	IdentifierDeclType	DWORD		3085197	0					
ANR	3085271	Identifier	offset		3085197	1					
ANR	3085272	ExpressionStatement	"GetLogicalAddress ( pExceptionRecord -> ExceptionAddress , szFaultingModule , sizeof ( szFaultingModule ) , section , offset )"	142:4:5960:6151	3085197	6	True				
ANR	3085273	CallExpression	"GetLogicalAddress ( pExceptionRecord -> ExceptionAddress , szFaultingModule , sizeof ( szFaultingModule ) , section , offset )"		3085197	0					
ANR	3085274	Callee	GetLogicalAddress		3085197	0					
ANR	3085275	Identifier	GetLogicalAddress		3085197	0					
ANR	3085276	ArgumentList	pExceptionRecord -> ExceptionAddress		3085197	1					
ANR	3085277	Argument	pExceptionRecord -> ExceptionAddress		3085197	0					
ANR	3085278	PtrMemberAccess	pExceptionRecord -> ExceptionAddress		3085197	0					
ANR	3085279	Identifier	pExceptionRecord		3085197	0					
ANR	3085280	Identifier	ExceptionAddress		3085197	1					
ANR	3085281	Argument	szFaultingModule		3085197	1					
ANR	3085282	Identifier	szFaultingModule		3085197	0					
ANR	3085283	Argument	sizeof ( szFaultingModule )		3085197	2					
ANR	3085284	SizeofExpression	sizeof ( szFaultingModule )		3085197	0					
ANR	3085285	Sizeof	sizeof		3085197	0					
ANR	3085286	SizeofOperand	szFaultingModule		3085197	1					
ANR	3085287	Argument	section		3085197	3					
ANR	3085288	Identifier	section		3085197	0					
ANR	3085289	Argument	offset		3085197	4					
ANR	3085290	Identifier	offset		3085197	0					
ANR	3085291	ExpressionStatement	"_tprintf ( _T ( ""Fault address:  %08X %02X:%08X %s\\n"" ) , pExceptionRecord -> ExceptionAddress , section , offset , szFaultingModule )"	146:4:6157:6309	3085197	7	True				
ANR	3085292	CallExpression	"_tprintf ( _T ( ""Fault address:  %08X %02X:%08X %s\\n"" ) , pExceptionRecord -> ExceptionAddress , section , offset , szFaultingModule )"		3085197	0					
ANR	3085293	Callee	_tprintf		3085197	0					
ANR	3085294	Identifier	_tprintf		3085197	0					
ANR	3085295	ArgumentList	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		3085197	1					
ANR	3085296	Argument	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		3085197	0					
ANR	3085297	CallExpression	"_T ( ""Fault address:  %08X %02X:%08X %s\\n"" )"		3085197	0					
ANR	3085298	Callee	_T		3085197	0					
ANR	3085299	Identifier	_T		3085197	0					
ANR	3085300	ArgumentList	"""Fault address:  %08X %02X:%08X %s\\n"""		3085197	1					
ANR	3085301	Argument	"""Fault address:  %08X %02X:%08X %s\\n"""		3085197	0					
ANR	3085302	PrimaryExpression	"""Fault address:  %08X %02X:%08X %s\\n"""		3085197	0					
ANR	3085303	Argument	pExceptionRecord -> ExceptionAddress		3085197	1					
ANR	3085304	PtrMemberAccess	pExceptionRecord -> ExceptionAddress		3085197	0					
ANR	3085305	Identifier	pExceptionRecord		3085197	0					
ANR	3085306	Identifier	ExceptionAddress		3085197	1					
ANR	3085307	Argument	section		3085197	2					
ANR	3085308	Identifier	section		3085197	0					
ANR	3085309	Argument	offset		3085197	3					
ANR	3085310	Identifier	offset		3085197	0					
ANR	3085311	Argument	szFaultingModule		3085197	4					
ANR	3085312	Identifier	szFaultingModule		3085197	0					
ANR	3085313	IdentifierDeclStatement	PCONTEXT pCtx = pExceptionInfo -> ContextRecord ;	149:4:6315:6360	3085197	8	True				
ANR	3085314	IdentifierDecl	pCtx = pExceptionInfo -> ContextRecord		3085197	0					
ANR	3085315	IdentifierDeclType	PCONTEXT		3085197	0					
ANR	3085316	Identifier	pCtx		3085197	1					
ANR	3085317	AssignmentExpression	pCtx = pExceptionInfo -> ContextRecord		3085197	2		=			
ANR	3085318	Identifier	pCtx		3085197	0					
ANR	3085319	PtrMemberAccess	pExceptionInfo -> ContextRecord		3085197	1					
ANR	3085320	Identifier	pExceptionInfo		3085197	0					
ANR	3085321	Identifier	ContextRecord		3085197	1					
ANR	3085322	ExpressionStatement	"_tprintf ( _T ( ""\\nRegisters:\\n"" ) )"	153:1:6475:6507	3085197	9	True				
ANR	3085323	CallExpression	"_tprintf ( _T ( ""\\nRegisters:\\n"" ) )"		3085197	0					
ANR	3085324	Callee	_tprintf		3085197	0					
ANR	3085325	Identifier	_tprintf		3085197	0					
ANR	3085326	ArgumentList	"_T ( ""\\nRegisters:\\n"" )"		3085197	1					
ANR	3085327	Argument	"_T ( ""\\nRegisters:\\n"" )"		3085197	0					
ANR	3085328	CallExpression	"_T ( ""\\nRegisters:\\n"" )"		3085197	0					
ANR	3085329	Callee	_T		3085197	0					
ANR	3085330	Identifier	_T		3085197	0					
ANR	3085331	ArgumentList	"""\\nRegisters:\\n"""		3085197	1					
ANR	3085332	Argument	"""\\nRegisters:\\n"""		3085197	0					
ANR	3085333	PrimaryExpression	"""\\nRegisters:\\n"""		3085197	0					
ANR	3085334	ExpressionStatement	"_tprintf ( _T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" ) , pCtx -> Eax , pCtx -> Ebx , pCtx -> Ecx , pCtx -> Edx , pCtx -> Esi , pCtx -> Edi )"	154:4:6513:6669	3085197	10	True				
ANR	3085335	CallExpression	"_tprintf ( _T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" ) , pCtx -> Eax , pCtx -> Ebx , pCtx -> Ecx , pCtx -> Edx , pCtx -> Esi , pCtx -> Edi )"		3085197	0					
ANR	3085336	Callee	_tprintf		3085197	0					
ANR	3085337	Identifier	_tprintf		3085197	0					
ANR	3085338	ArgumentList	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		3085197	1					
ANR	3085339	Argument	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		3085197	0					
ANR	3085340	CallExpression	"_T ( ""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"" )"		3085197	0					
ANR	3085341	Callee	_T		3085197	0					
ANR	3085342	Identifier	_T		3085197	0					
ANR	3085343	ArgumentList	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		3085197	1					
ANR	3085344	Argument	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		3085197	0					
ANR	3085345	PrimaryExpression	"""EAX:%08X\\nEBX:%08X\\nECX:%08X\\nEDX:%08X\\nESI:%08X\\nEDI:%08X\\n"""		3085197	0					
ANR	3085346	Argument	pCtx -> Eax		3085197	1					
ANR	3085347	PtrMemberAccess	pCtx -> Eax		3085197	0					
ANR	3085348	Identifier	pCtx		3085197	0					
ANR	3085349	Identifier	Eax		3085197	1					
ANR	3085350	Argument	pCtx -> Ebx		3085197	2					
ANR	3085351	PtrMemberAccess	pCtx -> Ebx		3085197	0					
ANR	3085352	Identifier	pCtx		3085197	0					
ANR	3085353	Identifier	Ebx		3085197	1					
ANR	3085354	Argument	pCtx -> Ecx		3085197	3					
ANR	3085355	PtrMemberAccess	pCtx -> Ecx		3085197	0					
ANR	3085356	Identifier	pCtx		3085197	0					
ANR	3085357	Identifier	Ecx		3085197	1					
ANR	3085358	Argument	pCtx -> Edx		3085197	4					
ANR	3085359	PtrMemberAccess	pCtx -> Edx		3085197	0					
ANR	3085360	Identifier	pCtx		3085197	0					
ANR	3085361	Identifier	Edx		3085197	1					
ANR	3085362	Argument	pCtx -> Esi		3085197	5					
ANR	3085363	PtrMemberAccess	pCtx -> Esi		3085197	0					
ANR	3085364	Identifier	pCtx		3085197	0					
ANR	3085365	Identifier	Esi		3085197	1					
ANR	3085366	Argument	pCtx -> Edi		3085197	6					
ANR	3085367	PtrMemberAccess	pCtx -> Edi		3085197	0					
ANR	3085368	Identifier	pCtx		3085197	0					
ANR	3085369	Identifier	Edi		3085197	1					
ANR	3085370	ExpressionStatement	"_tprintf ( _T ( ""CS:EIP:%04X:%08X\\n"" ) , pCtx -> SegCs , pCtx -> Eip )"	156:4:6675:6735	3085197	11	True				
ANR	3085371	CallExpression	"_tprintf ( _T ( ""CS:EIP:%04X:%08X\\n"" ) , pCtx -> SegCs , pCtx -> Eip )"		3085197	0					
ANR	3085372	Callee	_tprintf		3085197	0					
ANR	3085373	Identifier	_tprintf		3085197	0					
ANR	3085374	ArgumentList	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		3085197	1					
ANR	3085375	Argument	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		3085197	0					
ANR	3085376	CallExpression	"_T ( ""CS:EIP:%04X:%08X\\n"" )"		3085197	0					
ANR	3085377	Callee	_T		3085197	0					
ANR	3085378	Identifier	_T		3085197	0					
ANR	3085379	ArgumentList	"""CS:EIP:%04X:%08X\\n"""		3085197	1					
ANR	3085380	Argument	"""CS:EIP:%04X:%08X\\n"""		3085197	0					
ANR	3085381	PrimaryExpression	"""CS:EIP:%04X:%08X\\n"""		3085197	0					
ANR	3085382	Argument	pCtx -> SegCs		3085197	1					
ANR	3085383	PtrMemberAccess	pCtx -> SegCs		3085197	0					
ANR	3085384	Identifier	pCtx		3085197	0					
ANR	3085385	Identifier	SegCs		3085197	1					
ANR	3085386	Argument	pCtx -> Eip		3085197	2					
ANR	3085387	PtrMemberAccess	pCtx -> Eip		3085197	0					
ANR	3085388	Identifier	pCtx		3085197	0					
ANR	3085389	Identifier	Eip		3085197	1					
ANR	3085390	ExpressionStatement	"_tprintf ( _T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" ) , pCtx -> SegSs , pCtx -> Esp , pCtx -> Ebp )"	157:4:6741:6836	3085197	12	True				
ANR	3085391	CallExpression	"_tprintf ( _T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" ) , pCtx -> SegSs , pCtx -> Esp , pCtx -> Ebp )"		3085197	0					
ANR	3085392	Callee	_tprintf		3085197	0					
ANR	3085393	Identifier	_tprintf		3085197	0					
ANR	3085394	ArgumentList	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		3085197	1					
ANR	3085395	Argument	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		3085197	0					
ANR	3085396	CallExpression	"_T ( ""SS:ESP:%04X:%08X  EBP:%08X\\n"" )"		3085197	0					
ANR	3085397	Callee	_T		3085197	0					
ANR	3085398	Identifier	_T		3085197	0					
ANR	3085399	ArgumentList	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		3085197	1					
ANR	3085400	Argument	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		3085197	0					
ANR	3085401	PrimaryExpression	"""SS:ESP:%04X:%08X  EBP:%08X\\n"""		3085197	0					
ANR	3085402	Argument	pCtx -> SegSs		3085197	1					
ANR	3085403	PtrMemberAccess	pCtx -> SegSs		3085197	0					
ANR	3085404	Identifier	pCtx		3085197	0					
ANR	3085405	Identifier	SegSs		3085197	1					
ANR	3085406	Argument	pCtx -> Esp		3085197	2					
ANR	3085407	PtrMemberAccess	pCtx -> Esp		3085197	0					
ANR	3085408	Identifier	pCtx		3085197	0					
ANR	3085409	Identifier	Esp		3085197	1					
ANR	3085410	Argument	pCtx -> Ebp		3085197	3					
ANR	3085411	PtrMemberAccess	pCtx -> Ebp		3085197	0					
ANR	3085412	Identifier	pCtx		3085197	0					
ANR	3085413	Identifier	Ebp		3085197	1					
ANR	3085414	ExpressionStatement	"_tprintf ( _T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" ) , pCtx -> SegDs , pCtx -> SegEs , pCtx -> SegFs , pCtx -> SegGs )"	159:4:6842:6962	3085197	13	True				
ANR	3085415	CallExpression	"_tprintf ( _T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" ) , pCtx -> SegDs , pCtx -> SegEs , pCtx -> SegFs , pCtx -> SegGs )"		3085197	0					
ANR	3085416	Callee	_tprintf		3085197	0					
ANR	3085417	Identifier	_tprintf		3085197	0					
ANR	3085418	ArgumentList	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		3085197	1					
ANR	3085419	Argument	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		3085197	0					
ANR	3085420	CallExpression	"_T ( ""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"" )"		3085197	0					
ANR	3085421	Callee	_T		3085197	0					
ANR	3085422	Identifier	_T		3085197	0					
ANR	3085423	ArgumentList	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		3085197	1					
ANR	3085424	Argument	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		3085197	0					
ANR	3085425	PrimaryExpression	"""DS:%04X  ES:%04X  FS:%04X  GS:%04X\\n"""		3085197	0					
ANR	3085426	Argument	pCtx -> SegDs		3085197	1					
ANR	3085427	PtrMemberAccess	pCtx -> SegDs		3085197	0					
ANR	3085428	Identifier	pCtx		3085197	0					
ANR	3085429	Identifier	SegDs		3085197	1					
ANR	3085430	Argument	pCtx -> SegEs		3085197	2					
ANR	3085431	PtrMemberAccess	pCtx -> SegEs		3085197	0					
ANR	3085432	Identifier	pCtx		3085197	0					
ANR	3085433	Identifier	SegEs		3085197	1					
ANR	3085434	Argument	pCtx -> SegFs		3085197	3					
ANR	3085435	PtrMemberAccess	pCtx -> SegFs		3085197	0					
ANR	3085436	Identifier	pCtx		3085197	0					
ANR	3085437	Identifier	SegFs		3085197	1					
ANR	3085438	Argument	pCtx -> SegGs		3085197	4					
ANR	3085439	PtrMemberAccess	pCtx -> SegGs		3085197	0					
ANR	3085440	Identifier	pCtx		3085197	0					
ANR	3085441	Identifier	SegGs		3085197	1					
ANR	3085442	ExpressionStatement	"_tprintf ( _T ( ""Flags:%08X\\n"" ) , pCtx -> EFlags )"	161:4:6968:7012	3085197	14	True				
ANR	3085443	CallExpression	"_tprintf ( _T ( ""Flags:%08X\\n"" ) , pCtx -> EFlags )"		3085197	0					
ANR	3085444	Callee	_tprintf		3085197	0					
ANR	3085445	Identifier	_tprintf		3085197	0					
ANR	3085446	ArgumentList	"_T ( ""Flags:%08X\\n"" )"		3085197	1					
ANR	3085447	Argument	"_T ( ""Flags:%08X\\n"" )"		3085197	0					
ANR	3085448	CallExpression	"_T ( ""Flags:%08X\\n"" )"		3085197	0					
ANR	3085449	Callee	_T		3085197	0					
ANR	3085450	Identifier	_T		3085197	0					
ANR	3085451	ArgumentList	"""Flags:%08X\\n"""		3085197	1					
ANR	3085452	Argument	"""Flags:%08X\\n"""		3085197	0					
ANR	3085453	PrimaryExpression	"""Flags:%08X\\n"""		3085197	0					
ANR	3085454	Argument	pCtx -> EFlags		3085197	1					
ANR	3085455	PtrMemberAccess	pCtx -> EFlags		3085197	0					
ANR	3085456	Identifier	pCtx		3085197	0					
ANR	3085457	Identifier	EFlags		3085197	1					
ANR	3085458	IfStatement	if ( ! InitImagehlpFunctions ( ) )		3085197	15					
ANR	3085459	Condition	! InitImagehlpFunctions ( )	163:9:7034:7057	3085197	0	True				
ANR	3085460	UnaryOperationExpression	! InitImagehlpFunctions ( )		3085197	0					
ANR	3085461	UnaryOperator	!		3085197	0					
ANR	3085462	CallExpression	InitImagehlpFunctions ( )		3085197	1					
ANR	3085463	Callee	InitImagehlpFunctions		3085197	0					
ANR	3085464	Identifier	InitImagehlpFunctions		3085197	0					
ANR	3085465	ArgumentList			3085197	1					
ANR	3085466	CompoundStatement		35:39:1723:1723	3085197	1					
ANR	3085467	ExpressionStatement	IntelStackWalk ( pCtx )	168:2:7303:7325	3085197	0	True				
ANR	3085468	CallExpression	IntelStackWalk ( pCtx )		3085197	0					
ANR	3085469	Callee	IntelStackWalk		3085197	0					
ANR	3085470	Identifier	IntelStackWalk		3085197	0					
ANR	3085471	ArgumentList	pCtx		3085197	1					
ANR	3085472	Argument	pCtx		3085197	0					
ANR	3085473	Identifier	pCtx		3085197	0					
ANR	3085474	ReturnStatement	return ;	170:2:7344:7350	3085197	1	True				
ANR	3085475	ExpressionStatement	ImagehlpStackWalk ( pCtx )	172:1:7364:7389	3085197	16	True				
ANR	3085476	CallExpression	ImagehlpStackWalk ( pCtx )		3085197	0					
ANR	3085477	Callee	ImagehlpStackWalk		3085197	0					
ANR	3085478	Identifier	ImagehlpStackWalk		3085197	0					
ANR	3085479	ArgumentList	pCtx		3085197	1					
ANR	3085480	Argument	pCtx		3085197	0					
ANR	3085481	Identifier	pCtx		3085197	0					
ANR	3085482	ExpressionStatement	_SymCleanup ( GetCurrentProcess ( ) )	173:4:7395:7429	3085197	17	True				
ANR	3085483	CallExpression	_SymCleanup ( GetCurrentProcess ( ) )		3085197	0					
ANR	3085484	Callee	_SymCleanup		3085197	0					
ANR	3085485	Identifier	_SymCleanup		3085197	0					
ANR	3085486	ArgumentList	GetCurrentProcess ( )		3085197	1					
ANR	3085487	Argument	GetCurrentProcess ( )		3085197	0					
ANR	3085488	CallExpression	GetCurrentProcess ( )		3085197	0					
ANR	3085489	Callee	GetCurrentProcess		3085197	0					
ANR	3085490	Identifier	GetCurrentProcess		3085197	0					
ANR	3085491	ArgumentList			3085197	1					
ANR	3085492	ExpressionStatement	"_tprintf ( _T ( ""\\n//=====================================================\\n"" ) )"	176:1:7561:7638	3085197	18	True				
ANR	3085493	CallExpression	"_tprintf ( _T ( ""\\n//=====================================================\\n"" ) )"		3085197	0					
ANR	3085494	Callee	_tprintf		3085197	0					
ANR	3085495	Identifier	_tprintf		3085197	0					
ANR	3085496	ArgumentList	"_T ( ""\\n//=====================================================\\n"" )"		3085197	1					
ANR	3085497	Argument	"_T ( ""\\n//=====================================================\\n"" )"		3085197	0					
ANR	3085498	CallExpression	"_T ( ""\\n//=====================================================\\n"" )"		3085197	0					
ANR	3085499	Callee	_T		3085197	0					
ANR	3085500	Identifier	_T		3085197	0					
ANR	3085501	ArgumentList	"""\\n//=====================================================\\n"""		3085197	1					
ANR	3085502	Argument	"""\\n//=====================================================\\n"""		3085197	0					
ANR	3085503	PrimaryExpression	"""\\n//=====================================================\\n"""		3085197	0					
ANR	3085504	ReturnType	void		3085197	1					
ANR	3085505	Identifier	ExceptionHandler :: GenerateExceptionReport		3085197	2					
ANR	3085506	ParameterList	PEXCEPTION_POINTERS pExceptionInfo		3085197	3					
ANR	3085507	Parameter	PEXCEPTION_POINTERS pExceptionInfo	129:4:5304:5337	3085197	0	True				
ANR	3085508	ParameterType	PEXCEPTION_POINTERS		3085197	0					
ANR	3085509	Identifier	pExceptionInfo		3085197	1					
ANR	3085510	CFGEntryNode	ENTRY		3085197		True				
ANR	3085511	CFGExitNode	EXIT		3085197		True				
ANR	3085512	Symbol	InitImagehlpFunctions		3085197						
ANR	3085513	Symbol	pExceptionInfo		3085197						
ANR	3085514	Symbol	pCtx -> Eip		3085197						
ANR	3085515	Symbol	section		3085197						
ANR	3085516	Symbol	pExceptionRecord -> ExceptionAddress		3085197						
ANR	3085517	Symbol	pCtx -> SegSs		3085197						
ANR	3085518	Symbol	pCtx -> Ecx		3085197						
ANR	3085519	Symbol	_T		3085197						
ANR	3085520	Symbol	m_pid		3085197						
ANR	3085521	Symbol	pCtx -> Eax		3085197						
ANR	3085522	Symbol	pCtx -> SegGs		3085197						
ANR	3085523	Symbol	* pExceptionRecord		3085197						
ANR	3085524	Symbol	pCtx -> SegEs		3085197						
ANR	3085525	Symbol	pCtx -> EFlags		3085197						
ANR	3085526	Symbol	pCtx -> SegCs		3085197						
ANR	3085527	Symbol	offset		3085197						
ANR	3085528	Symbol	pCtx		3085197						
ANR	3085529	Symbol	pCtx -> Edi		3085197						
ANR	3085530	Symbol	* pExceptionInfo		3085197						
ANR	3085531	Symbol	pExceptionInfo -> ExceptionRecord		3085197						
ANR	3085532	Symbol	szFaultingModule		3085197						
ANR	3085533	Symbol	GetCurrentProcess		3085197						
ANR	3085534	Symbol	pCtx -> Ebp		3085197						
ANR	3085535	Symbol	pExceptionInfo -> ContextRecord		3085197						
ANR	3085536	Symbol	* pCtx		3085197						
ANR	3085537	Symbol	pExceptionRecord -> ExceptionCode		3085197						
ANR	3085538	Symbol	pCtx -> Edx		3085197						
ANR	3085539	Symbol	GetExceptionString		3085197						
ANR	3085540	Symbol	pCtx -> Ebx		3085197						
ANR	3085541	Symbol	pCtx -> Esi		3085197						
ANR	3085542	Symbol	pCtx -> Esp		3085197						
ANR	3085543	Symbol	pCtx -> SegFs		3085197						
ANR	3085544	Symbol	pCtx -> SegDs		3085197						
ANR	3085545	Symbol	pExceptionRecord		3085197						
ANR	3085546	Function	ExceptionHandler :: GetExceptionString	183:0:7992:9317							
ANR	3085547	FunctionDef	ExceptionHandler :: GetExceptionString (DWORD dwCode)		3085546	0					
ANR	3085548	CompoundStatement		183:59:8051:9317	3085546	0					
ANR	3085549	SwitchStatement	switch ( dwCode )		3085546	0					
ANR	3085550	Condition	dwCode	184:13:8066:8071	3085546	0	True				
ANR	3085551	Identifier	dwCode		3085546	0					
ANR	3085552	CompoundStatement		2:25:26:26	3085546	1					
ANR	3085553	Statement	EXCEPTION	185:2:8090:8098	3085546	0	True				
ANR	3085554	Statement	(	185:11:8099:8099	3085546	1	True				
ANR	3085555	Statement	ACCESS_VIOLATION	185:13:8101:8116	3085546	2	True				
ANR	3085556	Statement	)	185:30:8118:8118	3085546	3	True				
ANR	3085557	Statement	EXCEPTION	186:8:8128:8136	3085546	4	True				
ANR	3085558	Statement	(	186:17:8137:8137	3085546	5	True				
ANR	3085559	Statement	DATATYPE_MISALIGNMENT	186:19:8139:8159	3085546	6	True				
ANR	3085560	Statement	)	186:41:8161:8161	3085546	7	True				
ANR	3085561	Statement	EXCEPTION	187:2:8173:8181	3085546	8	True				
ANR	3085562	Statement	(	187:11:8182:8182	3085546	9	True				
ANR	3085563	Statement	BREAKPOINT	187:13:8184:8193	3085546	10	True				
ANR	3085564	Statement	)	187:24:8195:8195	3085546	11	True				
ANR	3085565	Statement	EXCEPTION	188:8:8205:8213	3085546	12	True				
ANR	3085566	Statement	(	188:17:8214:8214	3085546	13	True				
ANR	3085567	Statement	SINGLE_STEP	188:19:8216:8226	3085546	14	True				
ANR	3085568	Statement	)	188:31:8228:8228	3085546	15	True				
ANR	3085569	Statement	EXCEPTION	189:2:8240:8248	3085546	16	True				
ANR	3085570	Statement	(	189:11:8249:8249	3085546	17	True				
ANR	3085571	Statement	ARRAY_BOUNDS_EXCEEDED	189:13:8251:8271	3085546	18	True				
ANR	3085572	Statement	)	189:35:8273:8273	3085546	19	True				
ANR	3085573	Statement	EXCEPTION	190:8:8283:8291	3085546	20	True				
ANR	3085574	Statement	(	190:17:8292:8292	3085546	21	True				
ANR	3085575	Statement	FLT_DENORMAL_OPERAND	190:19:8294:8313	3085546	22	True				
ANR	3085576	Statement	)	190:40:8315:8315	3085546	23	True				
ANR	3085577	Statement	EXCEPTION	191:2:8327:8335	3085546	24	True				
ANR	3085578	Statement	(	191:11:8336:8336	3085546	25	True				
ANR	3085579	Statement	FLT_DIVIDE_BY_ZERO	191:13:8338:8355	3085546	26	True				
ANR	3085580	Statement	)	191:32:8357:8357	3085546	27	True				
ANR	3085581	Statement	EXCEPTION	192:8:8367:8375	3085546	28	True				
ANR	3085582	Statement	(	192:17:8376:8376	3085546	29	True				
ANR	3085583	Statement	FLT_INEXACT_RESULT	192:19:8378:8395	3085546	30	True				
ANR	3085584	Statement	)	192:38:8397:8397	3085546	31	True				
ANR	3085585	Statement	EXCEPTION	193:8:8407:8415	3085546	32	True				
ANR	3085586	Statement	(	193:17:8416:8416	3085546	33	True				
ANR	3085587	Statement	FLT_INVALID_OPERATION	193:19:8418:8438	3085546	34	True				
ANR	3085588	Statement	)	193:41:8440:8440	3085546	35	True				
ANR	3085589	Statement	EXCEPTION	194:2:8452:8460	3085546	36	True				
ANR	3085590	Statement	(	194:11:8461:8461	3085546	37	True				
ANR	3085591	Statement	FLT_OVERFLOW	194:13:8463:8474	3085546	38	True				
ANR	3085592	Statement	)	194:26:8476:8476	3085546	39	True				
ANR	3085593	Statement	EXCEPTION	195:8:8486:8494	3085546	40	True				
ANR	3085594	Statement	(	195:17:8495:8495	3085546	41	True				
ANR	3085595	Statement	FLT_STACK_CHECK	195:19:8497:8511	3085546	42	True				
ANR	3085596	Statement	)	195:35:8513:8513	3085546	43	True				
ANR	3085597	Statement	EXCEPTION	196:2:8525:8533	3085546	44	True				
ANR	3085598	Statement	(	196:11:8534:8534	3085546	45	True				
ANR	3085599	Statement	FLT_UNDERFLOW	196:13:8536:8548	3085546	46	True				
ANR	3085600	Statement	)	196:27:8550:8550	3085546	47	True				
ANR	3085601	Statement	EXCEPTION	197:8:8560:8568	3085546	48	True				
ANR	3085602	Statement	(	197:17:8569:8569	3085546	49	True				
ANR	3085603	Statement	INT_DIVIDE_BY_ZERO	197:19:8571:8588	3085546	50	True				
ANR	3085604	Statement	)	197:38:8590:8590	3085546	51	True				
ANR	3085605	Statement	EXCEPTION	198:2:8602:8610	3085546	52	True				
ANR	3085606	Statement	(	198:11:8611:8611	3085546	53	True				
ANR	3085607	Statement	INT_OVERFLOW	198:13:8613:8624	3085546	54	True				
ANR	3085608	Statement	)	198:26:8626:8626	3085546	55	True				
ANR	3085609	Statement	EXCEPTION	199:8:8636:8644	3085546	56	True				
ANR	3085610	Statement	(	199:17:8645:8645	3085546	57	True				
ANR	3085611	Statement	PRIV_INSTRUCTION	199:19:8647:8662	3085546	58	True				
ANR	3085612	Statement	)	199:36:8664:8664	3085546	59	True				
ANR	3085613	Statement	EXCEPTION	200:2:8676:8684	3085546	60	True				
ANR	3085614	Statement	(	200:11:8685:8685	3085546	61	True				
ANR	3085615	Statement	IN_PAGE_ERROR	200:13:8687:8699	3085546	62	True				
ANR	3085616	Statement	)	200:27:8701:8701	3085546	63	True				
ANR	3085617	Statement	EXCEPTION	201:8:8711:8719	3085546	64	True				
ANR	3085618	Statement	(	201:17:8720:8720	3085546	65	True				
ANR	3085619	Statement	ILLEGAL_INSTRUCTION	201:19:8722:8740	3085546	66	True				
ANR	3085620	Statement	)	201:39:8742:8742	3085546	67	True				
ANR	3085621	Statement	EXCEPTION	202:8:8752:8760	3085546	68	True				
ANR	3085622	Statement	(	202:17:8761:8761	3085546	69	True				
ANR	3085623	Statement	NONCONTINUABLE_EXCEPTION	202:19:8763:8786	3085546	70	True				
ANR	3085624	Statement	)	202:44:8788:8788	3085546	71	True				
ANR	3085625	Statement	EXCEPTION	203:2:8800:8808	3085546	72	True				
ANR	3085626	Statement	(	203:11:8809:8809	3085546	73	True				
ANR	3085627	Statement	STACK_OVERFLOW	203:13:8811:8824	3085546	74	True				
ANR	3085628	Statement	)	203:28:8826:8826	3085546	75	True				
ANR	3085629	Statement	EXCEPTION	204:8:8836:8844	3085546	76	True				
ANR	3085630	Statement	(	204:17:8845:8845	3085546	77	True				
ANR	3085631	Statement	INVALID_DISPOSITION	204:19:8847:8865	3085546	78	True				
ANR	3085632	Statement	)	204:39:8867:8867	3085546	79	True				
ANR	3085633	Statement	EXCEPTION	205:2:8879:8887	3085546	80	True				
ANR	3085634	Statement	(	205:11:8888:8888	3085546	81	True				
ANR	3085635	Statement	GUARD_PAGE	205:13:8890:8899	3085546	82	True				
ANR	3085636	Statement	)	205:24:8901:8901	3085546	83	True				
ANR	3085637	Statement	EXCEPTION	206:8:8911:8919	3085546	84	True				
ANR	3085638	Statement	(	206:17:8920:8920	3085546	85	True				
ANR	3085639	Statement	INVALID_HANDLE	206:19:8922:8935	3085546	86	True				
ANR	3085640	Statement	)	206:34:8937:8937	3085546	87	True				
ANR	3085641	Statement	static	210:1:9057:9062	3085546	1	True				
ANR	3085642	IdentifierDeclStatement	TCHAR szBuffer [ 512 ] = { 0 } ;	210:8:9064:9091	3085546	2	True				
ANR	3085643	IdentifierDecl	szBuffer [ 512 ] = { 0 }		3085546	0					
ANR	3085644	IdentifierDeclType	TCHAR [ 512 ]		3085546	0					
ANR	3085645	Identifier	szBuffer		3085546	1					
ANR	3085646	PrimaryExpression	512		3085546	2					
ANR	3085647	AssignmentExpression	szBuffer [ 512 ] = { 0 }		3085546	3		=			
ANR	3085648	Identifier	szBuffer		3085546	0					
ANR	3085649	InitializerList	0		3085546	1					
ANR	3085650	PrimaryExpression	0		3085546	0					
ANR	3085651	ExpressionStatement	"FormatMessage ( FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE , GetModuleHandle ( _T ( ""NTDLL.DLL"" ) ) , dwCode , 0 , szBuffer , sizeof ( szBuffer ) , 0 )"	211:4:9097:9294	3085546	3	True				
ANR	3085652	CallExpression	"FormatMessage ( FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE , GetModuleHandle ( _T ( ""NTDLL.DLL"" ) ) , dwCode , 0 , szBuffer , sizeof ( szBuffer ) , 0 )"		3085546	0					
ANR	3085653	Callee	FormatMessage		3085546	0					
ANR	3085654	Identifier	FormatMessage		3085546	0					
ANR	3085655	ArgumentList	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		3085546	1					
ANR	3085656	Argument	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		3085546	0					
ANR	3085657	InclusiveOrExpression	FORMAT_MESSAGE_IGNORE_INSERTS | FORMAT_MESSAGE_FROM_HMODULE		3085546	0		|			
ANR	3085658	Identifier	FORMAT_MESSAGE_IGNORE_INSERTS		3085546	0					
ANR	3085659	Identifier	FORMAT_MESSAGE_FROM_HMODULE		3085546	1					
ANR	3085660	Argument	"GetModuleHandle ( _T ( ""NTDLL.DLL"" ) )"		3085546	1					
ANR	3085661	CallExpression	"GetModuleHandle ( _T ( ""NTDLL.DLL"" ) )"		3085546	0					
ANR	3085662	Callee	GetModuleHandle		3085546	0					
ANR	3085663	Identifier	GetModuleHandle		3085546	0					
ANR	3085664	ArgumentList	"_T ( ""NTDLL.DLL"" )"		3085546	1					
ANR	3085665	Argument	"_T ( ""NTDLL.DLL"" )"		3085546	0					
ANR	3085666	CallExpression	"_T ( ""NTDLL.DLL"" )"		3085546	0					
ANR	3085667	Callee	_T		3085546	0					
ANR	3085668	Identifier	_T		3085546	0					
ANR	3085669	ArgumentList	"""NTDLL.DLL"""		3085546	1					
ANR	3085670	Argument	"""NTDLL.DLL"""		3085546	0					
ANR	3085671	PrimaryExpression	"""NTDLL.DLL"""		3085546	0					
ANR	3085672	Argument	dwCode		3085546	2					
ANR	3085673	Identifier	dwCode		3085546	0					
ANR	3085674	Argument	0		3085546	3					
ANR	3085675	PrimaryExpression	0		3085546	0					
ANR	3085676	Argument	szBuffer		3085546	4					
ANR	3085677	Identifier	szBuffer		3085546	0					
ANR	3085678	Argument	sizeof ( szBuffer )		3085546	5					
ANR	3085679	SizeofExpression	sizeof ( szBuffer )		3085546	0					
ANR	3085680	Sizeof	sizeof		3085546	0					
ANR	3085681	SizeofOperand	szBuffer		3085546	1					
ANR	3085682	Argument	0		3085546	6					
ANR	3085683	PrimaryExpression	0		3085546	0					
ANR	3085684	ReturnStatement	return szBuffer ;	214:4:9300:9315	3085546	4	True				
ANR	3085685	Identifier	szBuffer		3085546	0					
ANR	3085686	ReturnType	LPTSTR		3085546	1					
ANR	3085687	Identifier	ExceptionHandler :: GetExceptionString		3085546	2					
ANR	3085688	ParameterList	DWORD dwCode		3085546	3					
ANR	3085689	Parameter	DWORD dwCode	183:45:8037:8048	3085546	0	True				
ANR	3085690	ParameterType	DWORD		3085546	0					
ANR	3085691	Identifier	dwCode		3085546	1					
ANR	3085692	CFGEntryNode	ENTRY		3085546		True				
ANR	3085693	CFGExitNode	EXIT		3085546		True				
ANR	3085694	Symbol	dwCode		3085546						
ANR	3085695	Symbol	FORMAT_MESSAGE_FROM_HMODULE		3085546						
ANR	3085696	Symbol	FORMAT_MESSAGE_IGNORE_INSERTS		3085546						
ANR	3085697	Symbol	_T		3085546						
ANR	3085698	Symbol	szBuffer		3085546						
ANR	3085699	Symbol	GetModuleHandle		3085546						
ANR	3085700	Function	ExceptionHandler :: GetLogicalAddress	223:0:9881:11470							
ANR	3085701	FunctionDef	"ExceptionHandler :: GetLogicalAddress (PVOID addr , PTSTR szModule , DWORD len , DWORD & section , DWORD & offset)"		3085700	0					
ANR	3085702	CompoundStatement		224:79:10002:11470	3085700	0					
ANR	3085703	IdentifierDeclStatement	MEMORY_BASIC_INFORMATION mbi ;	225:4:10008:10036	3085700	0	True				
ANR	3085704	IdentifierDecl	mbi		3085700	0					
ANR	3085705	IdentifierDeclType	MEMORY_BASIC_INFORMATION		3085700	0					
ANR	3085706	Identifier	mbi		3085700	1					
ANR	3085707	IfStatement	"if ( ! VirtualQuery ( addr , & mbi , sizeof ( mbi ) ) )"		3085700	1					
ANR	3085708	Condition	"! VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"	226:9:10047:10086	3085700	0	True				
ANR	3085709	UnaryOperationExpression	"! VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"		3085700	0					
ANR	3085710	UnaryOperator	!		3085700	0					
ANR	3085711	CallExpression	"VirtualQuery ( addr , & mbi , sizeof ( mbi ) )"		3085700	1					
ANR	3085712	Callee	VirtualQuery		3085700	0					
ANR	3085713	Identifier	VirtualQuery		3085700	0					
ANR	3085714	ArgumentList	addr		3085700	1					
ANR	3085715	Argument	addr		3085700	0					
ANR	3085716	Identifier	addr		3085700	0					
ANR	3085717	Argument	& mbi		3085700	1					
ANR	3085718	UnaryOperationExpression	& mbi		3085700	0					
ANR	3085719	UnaryOperator	&		3085700	0					
ANR	3085720	Identifier	mbi		3085700	1					
ANR	3085721	Argument	sizeof ( mbi )		3085700	2					
ANR	3085722	SizeofExpression	sizeof ( mbi )		3085700	0					
ANR	3085723	Sizeof	sizeof		3085700	0					
ANR	3085724	SizeofOperand	mbi		3085700	1					
ANR	3085725	ReturnStatement	return FALSE ;	227:2:10100:10112	3085700	1	True				
ANR	3085726	Identifier	FALSE		3085700	0					
ANR	3085727	IdentifierDeclStatement	DWORD hMod = ( DWORD ) mbi . AllocationBase ;	228:4:10118:10156	3085700	2	True				
ANR	3085728	IdentifierDecl	hMod = ( DWORD ) mbi . AllocationBase		3085700	0					
ANR	3085729	IdentifierDeclType	DWORD		3085700	0					
ANR	3085730	Identifier	hMod		3085700	1					
ANR	3085731	AssignmentExpression	hMod = ( DWORD ) mbi . AllocationBase		3085700	2		=			
ANR	3085732	Identifier	hMod		3085700	0					
ANR	3085733	CastExpression	( DWORD ) mbi . AllocationBase		3085700	1					
ANR	3085734	CastTarget	DWORD		3085700	0					
ANR	3085735	MemberAccess	mbi . AllocationBase		3085700	1					
ANR	3085736	Identifier	mbi		3085700	0					
ANR	3085737	Identifier	AllocationBase		3085700	1					
ANR	3085738	IfStatement	"if ( ! GetModuleFileName ( ( HMODULE ) hMod , szModule , len ) )"		3085700	3					
ANR	3085739	Condition	"! GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"	229:9:10167:10216	3085700	0	True				
ANR	3085740	UnaryOperationExpression	"! GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"		3085700	0					
ANR	3085741	UnaryOperator	!		3085700	0					
ANR	3085742	CallExpression	"GetModuleFileName ( ( HMODULE ) hMod , szModule , len )"		3085700	1					
ANR	3085743	Callee	GetModuleFileName		3085700	0					
ANR	3085744	Identifier	GetModuleFileName		3085700	0					
ANR	3085745	ArgumentList	( HMODULE ) hMod		3085700	1					
ANR	3085746	Argument	( HMODULE ) hMod		3085700	0					
ANR	3085747	CastExpression	( HMODULE ) hMod		3085700	0					
ANR	3085748	CastTarget	HMODULE		3085700	0					
ANR	3085749	Identifier	hMod		3085700	1					
ANR	3085750	Argument	szModule		3085700	1					
ANR	3085751	Identifier	szModule		3085700	0					
ANR	3085752	Argument	len		3085700	2					
ANR	3085753	Identifier	len		3085700	0					
ANR	3085754	ReturnStatement	return FALSE ;	230:8:10228:10240	3085700	1	True				
ANR	3085755	Identifier	FALSE		3085700	0					
ANR	3085756	IdentifierDeclStatement	PIMAGE_DOS_HEADER pDosHdr = ( PIMAGE_DOS_HEADER ) hMod ;	231:4:10286:10337	3085700	4	True				
ANR	3085757	IdentifierDecl	pDosHdr = ( PIMAGE_DOS_HEADER ) hMod		3085700	0					
ANR	3085758	IdentifierDeclType	PIMAGE_DOS_HEADER		3085700	0					
ANR	3085759	Identifier	pDosHdr		3085700	1					
ANR	3085760	AssignmentExpression	pDosHdr = ( PIMAGE_DOS_HEADER ) hMod		3085700	2		=			
ANR	3085761	Identifier	pDosHdr		3085700	0					
ANR	3085762	CastExpression	( PIMAGE_DOS_HEADER ) hMod		3085700	1					
ANR	3085763	CastTarget	PIMAGE_DOS_HEADER		3085700	0					
ANR	3085764	Identifier	hMod		3085700	1					
ANR	3085765	IdentifierDeclStatement	PIMAGE_NT_HEADERS pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew ) ;	233:4:10395:10467	3085700	5	True				
ANR	3085766	IdentifierDecl	pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		3085700	0					
ANR	3085767	IdentifierDeclType	PIMAGE_NT_HEADERS		3085700	0					
ANR	3085768	Identifier	pNtHdr		3085700	1					
ANR	3085769	AssignmentExpression	pNtHdr = ( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		3085700	2		=			
ANR	3085770	Identifier	pNtHdr		3085700	0					
ANR	3085771	CastExpression	( PIMAGE_NT_HEADERS ) ( hMod + pDosHdr -> e_lfanew )		3085700	1					
ANR	3085772	CastTarget	PIMAGE_NT_HEADERS		3085700	0					
ANR	3085773	AdditiveExpression	hMod + pDosHdr -> e_lfanew		3085700	1		+			
ANR	3085774	Identifier	hMod		3085700	0					
ANR	3085775	PtrMemberAccess	pDosHdr -> e_lfanew		3085700	1					
ANR	3085776	Identifier	pDosHdr		3085700	0					
ANR	3085777	Identifier	e_lfanew		3085700	1					
ANR	3085778	IdentifierDeclStatement	PIMAGE_SECTION_HEADER pSection = IMAGE_FIRST_SECTION ( pNtHdr ) ;	234:4:10473:10535	3085700	6	True				
ANR	3085779	IdentifierDecl	pSection = IMAGE_FIRST_SECTION ( pNtHdr )		3085700	0					
ANR	3085780	IdentifierDeclType	PIMAGE_SECTION_HEADER		3085700	0					
ANR	3085781	Identifier	pSection		3085700	1					
ANR	3085782	AssignmentExpression	pSection = IMAGE_FIRST_SECTION ( pNtHdr )		3085700	2		=			
ANR	3085783	Identifier	pSection		3085700	0					
ANR	3085784	CallExpression	IMAGE_FIRST_SECTION ( pNtHdr )		3085700	1					
ANR	3085785	Callee	IMAGE_FIRST_SECTION		3085700	0					
ANR	3085786	Identifier	IMAGE_FIRST_SECTION		3085700	0					
ANR	3085787	ArgumentList	pNtHdr		3085700	1					
ANR	3085788	Argument	pNtHdr		3085700	0					
ANR	3085789	Identifier	pNtHdr		3085700	0					
ANR	3085790	IdentifierDeclStatement	DWORD rva = ( DWORD ) addr - hMod ;	235:4:10541:10571	3085700	7	True				
ANR	3085791	IdentifierDecl	rva = ( DWORD ) addr - hMod		3085700	0					
ANR	3085792	IdentifierDeclType	DWORD		3085700	0					
ANR	3085793	Identifier	rva		3085700	1					
ANR	3085794	AssignmentExpression	rva = ( DWORD ) addr - hMod		3085700	2		=			
ANR	3085795	Identifier	rva		3085700	0					
ANR	3085796	AdditiveExpression	( DWORD ) addr - hMod		3085700	1		-			
ANR	3085797	CastExpression	( DWORD ) addr		3085700	0					
ANR	3085798	CastTarget	DWORD		3085700	0					
ANR	3085799	Identifier	addr		3085700	1					
ANR	3085800	Identifier	hMod		3085700	1					
ANR	3085801	ForStatement	"for ( unsigned i = 0 ; i < pNtHdr -> FileHeader . NumberOfSections ; i ++ , pSection ++ )"		3085700	8					
ANR	3085802	ForInit	unsigned i = 0 ;	238:9:10734:10748	3085700	0	True				
ANR	3085803	IdentifierDeclStatement	unsigned i = 0 ;		3085700	0					
ANR	3085804	IdentifierDecl	i = 0		3085700	0					
ANR	3085805	IdentifierDeclType	unsigned		3085700	0					
ANR	3085806	Identifier	i		3085700	1					
ANR	3085807	AssignmentExpression	i = 0		3085700	2		=			
ANR	3085808	Identifier	i		3085700	0					
ANR	3085809	PrimaryExpression	0		3085700	1					
ANR	3085810	Condition	i < pNtHdr -> FileHeader . NumberOfSections	239:12:10762:10800	3085700	1	True				
ANR	3085811	RelationalExpression	i < pNtHdr -> FileHeader . NumberOfSections		3085700	0		<			
ANR	3085812	Identifier	i		3085700	0					
ANR	3085813	MemberAccess	pNtHdr -> FileHeader . NumberOfSections		3085700	1					
ANR	3085814	PtrMemberAccess	pNtHdr -> FileHeader		3085700	0					
ANR	3085815	Identifier	pNtHdr		3085700	0					
ANR	3085816	Identifier	FileHeader		3085700	1					
ANR	3085817	Identifier	NumberOfSections		3085700	1					
ANR	3085818	Expression	"i ++ , pSection ++"	240:12:10815:10829	3085700	2	True				
ANR	3085819	PostIncDecOperationExpression	i ++		3085700	0					
ANR	3085820	Identifier	i		3085700	0					
ANR	3085821	IncDec	++		3085700	1					
ANR	3085822	PostIncDecOperationExpression	pSection ++		3085700	1					
ANR	3085823	Identifier	pSection		3085700	0					
ANR	3085824	IncDec	++		3085700	1					
ANR	3085825	CompoundStatement		19:8:898:1008	3085700	3					
ANR	3085826	IdentifierDeclStatement	DWORD sectionStart = pSection -> VirtualAddress ;	241:8:10846:10891	3085700	0	True				
ANR	3085827	IdentifierDecl	sectionStart = pSection -> VirtualAddress		3085700	0					
ANR	3085828	IdentifierDeclType	DWORD		3085700	0					
ANR	3085829	Identifier	sectionStart		3085700	1					
ANR	3085830	AssignmentExpression	sectionStart = pSection -> VirtualAddress		3085700	2		=			
ANR	3085831	Identifier	sectionStart		3085700	0					
ANR	3085832	PtrMemberAccess	pSection -> VirtualAddress		3085700	1					
ANR	3085833	Identifier	pSection		3085700	0					
ANR	3085834	Identifier	VirtualAddress		3085700	1					
ANR	3085835	IdentifierDeclStatement	"DWORD sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize ) ;"	242:8:10901:11011	3085700	1	True				
ANR	3085836	IdentifierDecl	"sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		3085700	0					
ANR	3085837	IdentifierDeclType	DWORD		3085700	0					
ANR	3085838	Identifier	sectionEnd		3085700	1					
ANR	3085839	AssignmentExpression	"sectionEnd = sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		3085700	2		=			
ANR	3085840	Identifier	sectionEnd		3085700	0					
ANR	3085841	AdditiveExpression	"sectionStart + max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		3085700	1		+			
ANR	3085842	Identifier	sectionStart		3085700	0					
ANR	3085843	CallExpression	"max ( pSection -> SizeOfRawData , pSection -> Misc . VirtualSize )"		3085700	1					
ANR	3085844	Callee	max		3085700	0					
ANR	3085845	Identifier	max		3085700	0					
ANR	3085846	ArgumentList	pSection -> SizeOfRawData		3085700	1					
ANR	3085847	Argument	pSection -> SizeOfRawData		3085700	0					
ANR	3085848	PtrMemberAccess	pSection -> SizeOfRawData		3085700	0					
ANR	3085849	Identifier	pSection		3085700	0					
ANR	3085850	Identifier	SizeOfRawData		3085700	1					
ANR	3085851	Argument	pSection -> Misc . VirtualSize		3085700	1					
ANR	3085852	MemberAccess	pSection -> Misc . VirtualSize		3085700	0					
ANR	3085853	PtrMemberAccess	pSection -> Misc		3085700	0					
ANR	3085854	Identifier	pSection		3085700	0					
ANR	3085855	Identifier	Misc		3085700	1					
ANR	3085856	Identifier	VirtualSize		3085700	1					
ANR	3085857	IfStatement	if ( ( rva >= sectionStart ) && ( rva <= sectionEnd ) )		3085700	2					
ANR	3085858	Condition	( rva >= sectionStart ) && ( rva <= sectionEnd )	245:13:11071:11114	3085700	0	True				
ANR	3085859	AndExpression	( rva >= sectionStart ) && ( rva <= sectionEnd )		3085700	0		&&			
ANR	3085860	RelationalExpression	rva >= sectionStart		3085700	0		>=			
ANR	3085861	Identifier	rva		3085700	0					
ANR	3085862	Identifier	sectionStart		3085700	1					
ANR	3085863	RelationalExpression	rva <= sectionEnd		3085700	1		<=			
ANR	3085864	Identifier	rva		3085700	0					
ANR	3085865	Identifier	sectionEnd		3085700	1					
ANR	3085866	CompoundStatement		22:60:1115:1115	3085700	1					
ANR	3085867	ExpressionStatement	section = i + 1	249:3:11321:11334	3085700	0	True				
ANR	3085868	AssignmentExpression	section = i + 1		3085700	0		=			
ANR	3085869	Identifier	section		3085700	0					
ANR	3085870	AdditiveExpression	i + 1		3085700	1		+			
ANR	3085871	Identifier	i		3085700	0					
ANR	3085872	PrimaryExpression	1		3085700	1					
ANR	3085873	ExpressionStatement	offset = rva - sectionStart	250:12:11348:11375	3085700	1	True				
ANR	3085874	AssignmentExpression	offset = rva - sectionStart		3085700	0		=			
ANR	3085875	Identifier	offset		3085700	0					
ANR	3085876	AdditiveExpression	rva - sectionStart		3085700	1		-			
ANR	3085877	Identifier	rva		3085700	0					
ANR	3085878	Identifier	sectionStart		3085700	1					
ANR	3085879	ReturnStatement	return TRUE ;	251:3:11392:11403	3085700	2	True				
ANR	3085880	Identifier	TRUE		3085700	0					
ANR	3085881	ReturnStatement	return FALSE ;	254:4:11428:11440	3085700	9	True				
ANR	3085882	Identifier	FALSE		3085700	0					
ANR	3085883	ReturnType	BOOL		3085700	1					
ANR	3085884	Identifier	ExceptionHandler :: GetLogicalAddress		3085700	2					
ANR	3085885	ParameterList	"PVOID addr , PTSTR szModule , DWORD len , DWORD & section , DWORD & offset"		3085700	3					
ANR	3085886	Parameter	PVOID addr	224:8:9931:9940	3085700	0	True				
ANR	3085887	ParameterType	PVOID		3085700	0					
ANR	3085888	Identifier	addr		3085700	1					
ANR	3085889	Parameter	PTSTR szModule	224:20:9943:9956	3085700	1	True				
ANR	3085890	ParameterType	PTSTR		3085700	0					
ANR	3085891	Identifier	szModule		3085700	1					
ANR	3085892	Parameter	DWORD len	224:36:9959:9967	3085700	2	True				
ANR	3085893	ParameterType	DWORD		3085700	0					
ANR	3085894	Identifier	len		3085700	1					
ANR	3085895	Parameter	DWORD & section	224:47:9970:9983	3085700	3	True				
ANR	3085896	ParameterType	DWORD &		3085700	0					
ANR	3085897	Identifier	section		3085700	1					
ANR	3085898	Parameter	DWORD & offset	224:63:9986:9998	3085700	4	True				
ANR	3085899	ParameterType	DWORD &		3085700	0					
ANR	3085900	Identifier	offset		3085700	1					
ANR	3085901	CFGEntryNode	ENTRY		3085700		True				
ANR	3085902	CFGExitNode	EXIT		3085700		True				
ANR	3085903	Symbol	pNtHdr -> FileHeader		3085700						
ANR	3085904	Symbol	pDosHdr -> e_lfanew		3085700						
ANR	3085905	Symbol	GetModuleFileName		3085700						
ANR	3085906	Symbol	pSection -> SizeOfRawData		3085700						
ANR	3085907	Symbol	section		3085700						
ANR	3085908	Symbol	hMod		3085700						
ANR	3085909	Symbol	pDosHdr		3085700						
ANR	3085910	Symbol	* pSection		3085700						
ANR	3085911	Symbol	VirtualQuery		3085700						
ANR	3085912	Symbol	len		3085700						
ANR	3085913	Symbol	sectionEnd		3085700						
ANR	3085914	Symbol	IMAGE_FIRST_SECTION		3085700						
ANR	3085915	Symbol	addr		3085700						
ANR	3085916	Symbol	* pDosHdr		3085700						
ANR	3085917	Symbol	rva		3085700						
ANR	3085918	Symbol	pSection -> Misc . VirtualSize		3085700						
ANR	3085919	Symbol	& mbi		3085700						
ANR	3085920	Symbol	pNtHdr -> FileHeader . NumberOfSections		3085700						
ANR	3085921	Symbol	pNtHdr		3085700						
ANR	3085922	Symbol	sectionStart		3085700						
ANR	3085923	Symbol	offset		3085700						
ANR	3085924	Symbol	mbi . AllocationBase		3085700						
ANR	3085925	Symbol	max		3085700						
ANR	3085926	Symbol	i		3085700						
ANR	3085927	Symbol	TRUE		3085700						
ANR	3085928	Symbol	* pNtHdr		3085700						
ANR	3085929	Symbol	pSection -> VirtualAddress		3085700						
ANR	3085930	Symbol	pSection -> Misc		3085700						
ANR	3085931	Symbol	mbi		3085700						
ANR	3085932	Symbol	FALSE		3085700						
ANR	3085933	Symbol	szModule		3085700						
ANR	3085934	Symbol	pSection		3085700						
ANR	3085935	Function	ExceptionHandler :: IntelStackWalk	259:0:11661:12723							
ANR	3085936	FunctionDef	ExceptionHandler :: IntelStackWalk (PCONTEXT pContext)		3085935	0					
ANR	3085937	CompoundStatement		259:59:11720:12723	3085935	0					
ANR	3085938	ExpressionStatement	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"	260:4:11726:11759	3085935	0	True				
ANR	3085939	CallExpression	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"		3085935	0					
ANR	3085940	Callee	_tprintf		3085935	0					
ANR	3085941	Identifier	_tprintf		3085935	0					
ANR	3085942	ArgumentList	"_T ( ""\\nCall stack:\\n"" )"		3085935	1					
ANR	3085943	Argument	"_T ( ""\\nCall stack:\\n"" )"		3085935	0					
ANR	3085944	CallExpression	"_T ( ""\\nCall stack:\\n"" )"		3085935	0					
ANR	3085945	Callee	_T		3085935	0					
ANR	3085946	Identifier	_T		3085935	0					
ANR	3085947	ArgumentList	"""\\nCall stack:\\n"""		3085935	1					
ANR	3085948	Argument	"""\\nCall stack:\\n"""		3085935	0					
ANR	3085949	PrimaryExpression	"""\\nCall stack:\\n"""		3085935	0					
ANR	3085950	ExpressionStatement	"_tprintf ( _T ( ""Address   Frame     Logical addr  Module\\n"" ) )"	261:4:11765:11825	3085935	1	True				
ANR	3085951	CallExpression	"_tprintf ( _T ( ""Address   Frame     Logical addr  Module\\n"" ) )"		3085935	0					
ANR	3085952	Callee	_tprintf		3085935	0					
ANR	3085953	Identifier	_tprintf		3085935	0					
ANR	3085954	ArgumentList	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		3085935	1					
ANR	3085955	Argument	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		3085935	0					
ANR	3085956	CallExpression	"_T ( ""Address   Frame     Logical addr  Module\\n"" )"		3085935	0					
ANR	3085957	Callee	_T		3085935	0					
ANR	3085958	Identifier	_T		3085935	0					
ANR	3085959	ArgumentList	"""Address   Frame     Logical addr  Module\\n"""		3085935	1					
ANR	3085960	Argument	"""Address   Frame     Logical addr  Module\\n"""		3085935	0					
ANR	3085961	PrimaryExpression	"""Address   Frame     Logical addr  Module\\n"""		3085935	0					
ANR	3085962	IdentifierDeclStatement	DWORD pc = pContext -> Eip ;	262:4:11831:11855	3085935	2	True				
ANR	3085963	IdentifierDecl	pc = pContext -> Eip		3085935	0					
ANR	3085964	IdentifierDeclType	DWORD		3085935	0					
ANR	3085965	Identifier	pc		3085935	1					
ANR	3085966	AssignmentExpression	pc = pContext -> Eip		3085935	2		=			
ANR	3085967	Identifier	pc		3085935	0					
ANR	3085968	PtrMemberAccess	pContext -> Eip		3085935	1					
ANR	3085969	Identifier	pContext		3085935	0					
ANR	3085970	Identifier	Eip		3085935	1					
ANR	3085971	IdentifierDeclStatement	"PDWORD pFrame , pPrevFrame ;"	263:1:11862:11887	3085935	3	True				
ANR	3085972	IdentifierDecl	pFrame		3085935	0					
ANR	3085973	IdentifierDeclType	PDWORD		3085935	0					
ANR	3085974	Identifier	pFrame		3085935	1					
ANR	3085975	IdentifierDecl	pPrevFrame		3085935	1					
ANR	3085976	IdentifierDeclType	PDWORD		3085935	0					
ANR	3085977	Identifier	pPrevFrame		3085935	1					
ANR	3085978	ExpressionStatement	pFrame = ( PDWORD ) pContext -> Ebp	264:4:11897:11927	3085935	4	True				
ANR	3085979	AssignmentExpression	pFrame = ( PDWORD ) pContext -> Ebp		3085935	0		=			
ANR	3085980	Identifier	pFrame		3085935	0					
ANR	3085981	CastExpression	( PDWORD ) pContext -> Ebp		3085935	1					
ANR	3085982	CastTarget	PDWORD		3085935	0					
ANR	3085983	PtrMemberAccess	pContext -> Ebp		3085935	1					
ANR	3085984	Identifier	pContext		3085935	0					
ANR	3085985	Identifier	Ebp		3085935	1					
ANR	3085986	DoStatement	do		3085935	5					
ANR	3085987	CompoundStatement		9:2:271:300	3085935	0					
ANR	3085988	IdentifierDeclStatement	"TCHAR szModule [ MAX_PATH ] = _T ( """" ) ;"	266:8:11947:11980	3085935	0	True				
ANR	3085989	IdentifierDecl	"szModule [ MAX_PATH ] = _T ( """" )"		3085935	0					
ANR	3085990	IdentifierDeclType	TCHAR [ MAX_PATH ]		3085935	0					
ANR	3085991	Identifier	szModule		3085935	1					
ANR	3085992	Identifier	MAX_PATH		3085935	2					
ANR	3085993	AssignmentExpression	"szModule [ MAX_PATH ] = _T ( """" )"		3085935	3		=			
ANR	3085994	Identifier	MAX_PATH		3085935	0					
ANR	3085995	CallExpression	"_T ( """" )"		3085935	1					
ANR	3085996	Callee	_T		3085935	0					
ANR	3085997	Identifier	_T		3085935	0					
ANR	3085998	ArgumentList	""""""		3085935	1					
ANR	3085999	Argument	""""""		3085935	0					
ANR	3086000	PrimaryExpression	""""""		3085935	0					
ANR	3086001	IdentifierDeclStatement	"DWORD section = 0 , offset = 0 ;"	267:2:11992:12021	3085935	1	True				
ANR	3086002	IdentifierDecl	section = 0		3085935	0					
ANR	3086003	IdentifierDeclType	DWORD		3085935	0					
ANR	3086004	Identifier	section		3085935	1					
ANR	3086005	AssignmentExpression	section = 0		3085935	2		=			
ANR	3086006	Identifier	section		3085935	0					
ANR	3086007	PrimaryExpression	0		3085935	1					
ANR	3086008	IdentifierDecl	offset = 0		3085935	1					
ANR	3086009	IdentifierDeclType	DWORD		3085935	0					
ANR	3086010	Identifier	offset		3085935	1					
ANR	3086011	AssignmentExpression	offset = 0		3085935	2		=			
ANR	3086012	Identifier	offset		3085935	0					
ANR	3086013	PrimaryExpression	0		3085935	1					
ANR	3086014	ExpressionStatement	"GetLogicalAddress ( ( PVOID ) pc , szModule , sizeof ( szModule ) , section , offset )"	268:8:12031:12102	3085935	2	True				
ANR	3086015	CallExpression	"GetLogicalAddress ( ( PVOID ) pc , szModule , sizeof ( szModule ) , section , offset )"		3085935	0					
ANR	3086016	Callee	GetLogicalAddress		3085935	0					
ANR	3086017	Identifier	GetLogicalAddress		3085935	0					
ANR	3086018	ArgumentList	( PVOID ) pc		3085935	1					
ANR	3086019	Argument	( PVOID ) pc		3085935	0					
ANR	3086020	CastExpression	( PVOID ) pc		3085935	0					
ANR	3086021	CastTarget	PVOID		3085935	0					
ANR	3086022	Identifier	pc		3085935	1					
ANR	3086023	Argument	szModule		3085935	1					
ANR	3086024	Identifier	szModule		3085935	0					
ANR	3086025	Argument	sizeof ( szModule )		3085935	2					
ANR	3086026	SizeofExpression	sizeof ( szModule )		3085935	0					
ANR	3086027	Sizeof	sizeof		3085935	0					
ANR	3086028	SizeofOperand	szModule		3085935	1					
ANR	3086029	Argument	section		3085935	3					
ANR	3086030	Identifier	section		3085935	0					
ANR	3086031	Argument	offset		3085935	4					
ANR	3086032	Identifier	offset		3085935	0					
ANR	3086033	ExpressionStatement	"_tprintf ( _T ( ""%08X  %08X  %04X:%08X %s\\n"" ) , pc , pFrame , section , offset , szModule )"	269:8:12112:12213	3085935	3	True				
ANR	3086034	CallExpression	"_tprintf ( _T ( ""%08X  %08X  %04X:%08X %s\\n"" ) , pc , pFrame , section , offset , szModule )"		3085935	0					
ANR	3086035	Callee	_tprintf		3085935	0					
ANR	3086036	Identifier	_tprintf		3085935	0					
ANR	3086037	ArgumentList	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		3085935	1					
ANR	3086038	Argument	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		3085935	0					
ANR	3086039	CallExpression	"_T ( ""%08X  %08X  %04X:%08X %s\\n"" )"		3085935	0					
ANR	3086040	Callee	_T		3085935	0					
ANR	3086041	Identifier	_T		3085935	0					
ANR	3086042	ArgumentList	"""%08X  %08X  %04X:%08X %s\\n"""		3085935	1					
ANR	3086043	Argument	"""%08X  %08X  %04X:%08X %s\\n"""		3085935	0					
ANR	3086044	PrimaryExpression	"""%08X  %08X  %04X:%08X %s\\n"""		3085935	0					
ANR	3086045	Argument	pc		3085935	1					
ANR	3086046	Identifier	pc		3085935	0					
ANR	3086047	Argument	pFrame		3085935	2					
ANR	3086048	Identifier	pFrame		3085935	0					
ANR	3086049	Argument	section		3085935	3					
ANR	3086050	Identifier	section		3085935	0					
ANR	3086051	Argument	offset		3085935	4					
ANR	3086052	Identifier	offset		3085935	0					
ANR	3086053	Argument	szModule		3085935	5					
ANR	3086054	Identifier	szModule		3085935	0					
ANR	3086055	ExpressionStatement	pc = pFrame [ 1 ]	271:8:12223:12237	3085935	4	True				
ANR	3086056	AssignmentExpression	pc = pFrame [ 1 ]		3085935	0		=			
ANR	3086057	Identifier	pc		3085935	0					
ANR	3086058	ArrayIndexing	pFrame [ 1 ]		3085935	1					
ANR	3086059	Identifier	pFrame		3085935	0					
ANR	3086060	PrimaryExpression	1		3085935	1					
ANR	3086061	ExpressionStatement	pPrevFrame = pFrame	272:2:12249:12268	3085935	5	True				
ANR	3086062	AssignmentExpression	pPrevFrame = pFrame		3085935	0		=			
ANR	3086063	Identifier	pPrevFrame		3085935	0					
ANR	3086064	Identifier	pFrame		3085935	1					
ANR	3086065	ExpressionStatement	pFrame = ( PDWORD ) pFrame [ 0 ]	273:8:12278:12304	3085935	6	True				
ANR	3086066	AssignmentExpression	pFrame = ( PDWORD ) pFrame [ 0 ]		3085935	0		=			
ANR	3086067	Identifier	pFrame		3085935	0					
ANR	3086068	CastExpression	( PDWORD ) pFrame [ 0 ]		3085935	1					
ANR	3086069	CastTarget	PDWORD		3085935	0					
ANR	3086070	ArrayIndexing	pFrame [ 0 ]		3085935	1					
ANR	3086071	Identifier	pFrame		3085935	0					
ANR	3086072	PrimaryExpression	0		3085935	1					
ANR	3086073	IfStatement	if ( ( DWORD ) pFrame & 3 )		3085935	7					
ANR	3086074	Condition	( DWORD ) pFrame & 3	274:13:12360:12376	3085935	0	True				
ANR	3086075	BitAndExpression	( DWORD ) pFrame & 3		3085935	0		&			
ANR	3086076	CastExpression	( DWORD ) pFrame		3085935	0					
ANR	3086077	CastTarget	DWORD		3085935	0					
ANR	3086078	Identifier	pFrame		3085935	1					
ANR	3086079	PrimaryExpression	3		3085935	1					
ANR	3086080	BreakStatement	break ;	275:12:12433:12438	3085935	1	True				
ANR	3086081	IfStatement	if ( pFrame <= pPrevFrame )		3085935	8					
ANR	3086082	Condition	pFrame <= pPrevFrame	276:13:12506:12525	3085935	0	True				
ANR	3086083	RelationalExpression	pFrame <= pPrevFrame		3085935	0		<=			
ANR	3086084	Identifier	pFrame		3085935	0					
ANR	3086085	Identifier	pPrevFrame		3085935	1					
ANR	3086086	BreakStatement	break ;	277:3:12544:12549	3085935	1	True				
ANR	3086087	IfStatement	"if ( IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 ) )"		3085935	9					
ANR	3086088	Condition	"IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 )"	279:13:12641:12678	3085935	0	True				
ANR	3086089	CallExpression	"IsBadWritePtr ( pFrame , sizeof ( PVOID ) * 2 )"		3085935	0					
ANR	3086090	Callee	IsBadWritePtr		3085935	0					
ANR	3086091	Identifier	IsBadWritePtr		3085935	0					
ANR	3086092	ArgumentList	pFrame		3085935	1					
ANR	3086093	Argument	pFrame		3085935	0					
ANR	3086094	Identifier	pFrame		3085935	0					
ANR	3086095	Argument	sizeof ( PVOID ) * 2		3085935	1					
ANR	3086096	MultiplicativeExpression	sizeof ( PVOID ) * 2		3085935	0		*			
ANR	3086097	SizeofExpression	sizeof ( PVOID )		3085935	0					
ANR	3086098	Sizeof	sizeof		3085935	0					
ANR	3086099	SizeofOperand	PVOID		3085935	1					
ANR	3086100	PrimaryExpression	2		3085935	1					
ANR	3086101	BreakStatement	break ;	280:3:12697:12702	3085935	1	True				
ANR	3086102	Condition	1	281:14:12718:12718	3085935	1	True				
ANR	3086103	PrimaryExpression	1		3085935	0					
ANR	3086104	ReturnType	void		3085935	1					
ANR	3086105	Identifier	ExceptionHandler :: IntelStackWalk		3085935	2					
ANR	3086106	ParameterList	PCONTEXT pContext		3085935	3					
ANR	3086107	Parameter	PCONTEXT pContext	259:39:11700:11716	3085935	0	True				
ANR	3086108	ParameterType	PCONTEXT		3085935	0					
ANR	3086109	Identifier	pContext		3085935	1					
ANR	3086110	CFGEntryNode	ENTRY		3085935		True				
ANR	3086111	CFGExitNode	EXIT		3085935		True				
ANR	3086112	Symbol	pPrevFrame		3085935						
ANR	3086113	Symbol	offset		3085935						
ANR	3086114	Symbol	section		3085935						
ANR	3086115	Symbol	pContext		3085935						
ANR	3086116	Symbol	pContext -> Eip		3085935						
ANR	3086117	Symbol	IsBadWritePtr		3085935						
ANR	3086118	Symbol	pc		3085935						
ANR	3086119	Symbol	pFrame		3085935						
ANR	3086120	Symbol	* pFrame		3085935						
ANR	3086121	Symbol	_T		3085935						
ANR	3086122	Symbol	pContext -> Ebp		3085935						
ANR	3086123	Symbol	* pContext		3085935						
ANR	3086124	Symbol	MAX_PATH		3085935						
ANR	3086125	Symbol	szModule		3085935						
ANR	3086126	Function	ExceptionHandler :: InternalSymGetLineFromAddr	286:0:12896:13870							
ANR	3086127	FunctionDef	"ExceptionHandler :: InternalSymGetLineFromAddr (IN HANDLE hProcess , IN DWORD dwAddr , OUT PDWORD pdwDisplacement , OUT PIMAGEHLP_LINE Line)"		3086126	0					
ANR	3086128	CompoundStatement		290:0:13090:13870	3086126	0					
ANR	3086129	IdentifierDeclStatement	DWORD dwTempDis = 0 ;	295:4:13355:13375	3086126	0	True				
ANR	3086130	IdentifierDecl	dwTempDis = 0		3086126	0					
ANR	3086131	IdentifierDeclType	DWORD		3086126	0					
ANR	3086132	Identifier	dwTempDis		3086126	1					
ANR	3086133	AssignmentExpression	dwTempDis = 0		3086126	2		=			
ANR	3086134	Identifier	dwTempDis		3086126	0					
ANR	3086135	PrimaryExpression	0		3086126	1					
ANR	3086136	WhileStatement	"while ( FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line ) )"		3086126	1					
ANR	3086137	Condition	"FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"	297:12:13391:13468	3086126	0	True				
ANR	3086138	EqualityExpression	"FALSE == _SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"		3086126	0		==			
ANR	3086139	Identifier	FALSE		3086126	0					
ANR	3086140	CallExpression	"_SymGetLineFromAddr ( hProcess , dwAddr - dwTempDis , pdwDisplacement , Line )"		3086126	1					
ANR	3086141	Callee	_SymGetLineFromAddr		3086126	0					
ANR	3086142	Identifier	_SymGetLineFromAddr		3086126	0					
ANR	3086143	ArgumentList	hProcess		3086126	1					
ANR	3086144	Argument	hProcess		3086126	0					
ANR	3086145	Identifier	hProcess		3086126	0					
ANR	3086146	Argument	dwAddr - dwTempDis		3086126	1					
ANR	3086147	AdditiveExpression	dwAddr - dwTempDis		3086126	0		-			
ANR	3086148	Identifier	dwAddr		3086126	0					
ANR	3086149	Identifier	dwTempDis		3086126	1					
ANR	3086150	Argument	pdwDisplacement		3086126	2					
ANR	3086151	Identifier	pdwDisplacement		3086126	0					
ANR	3086152	Argument	Line		3086126	3					
ANR	3086153	Identifier	Line		3086126	0					
ANR	3086154	CompoundStatement		9:4:385:385	3086126	1					
ANR	3086155	ExpressionStatement	dwTempDis += 1	299:8:13487:13502	3086126	0	True				
ANR	3086156	AssignmentExpression	dwTempDis += 1		3086126	0		+=			
ANR	3086157	Identifier	dwTempDis		3086126	0					
ANR	3086158	PrimaryExpression	1		3086126	1					
ANR	3086159	IfStatement	if ( 100 == dwTempDis )		3086126	1					
ANR	3086160	Condition	100 == dwTempDis	300:13:13518:13533	3086126	0	True				
ANR	3086161	EqualityExpression	100 == dwTempDis		3086126	0		==			
ANR	3086162	PrimaryExpression	100		3086126	0					
ANR	3086163	Identifier	dwTempDis		3086126	1					
ANR	3086164	CompoundStatement		12:8:455:455	3086126	1					
ANR	3086165	ReturnStatement	return ( FALSE ) ;	302:12:13561:13578	3086126	0	True				
ANR	3086166	Identifier	FALSE		3086126	0					
ANR	3086167	IfStatement	if ( 0 != dwTempDis )		3086126	2					
ANR	3086168	Condition	0 != dwTempDis	309:9:13775:13788	3086126	0	True				
ANR	3086169	EqualityExpression	0 != dwTempDis		3086126	0		!=			
ANR	3086170	PrimaryExpression	0		3086126	0					
ANR	3086171	Identifier	dwTempDis		3086126	1					
ANR	3086172	CompoundStatement		21:4:706:706	3086126	1					
ANR	3086173	ExpressionStatement	* pdwDisplacement = dwTempDis	311:8:13808:13837	3086126	0	True				
ANR	3086174	AssignmentExpression	* pdwDisplacement = dwTempDis		3086126	0		=			
ANR	3086175	UnaryOperationExpression	* pdwDisplacement		3086126	0					
ANR	3086176	UnaryOperator	*		3086126	0					
ANR	3086177	Identifier	pdwDisplacement		3086126	1					
ANR	3086178	Identifier	dwTempDis		3086126	1					
ANR	3086179	ReturnStatement	return ( TRUE ) ;	313:4:13851:13867	3086126	3	True				
ANR	3086180	Identifier	TRUE		3086126	0					
ANR	3086181	ReturnType	BOOL		3086126	1					
ANR	3086182	Identifier	ExceptionHandler :: InternalSymGetLineFromAddr		3086126	2					
ANR	3086183	ParameterList	"IN HANDLE hProcess , IN DWORD dwAddr , OUT PDWORD pdwDisplacement , OUT PIMAGEHLP_LINE Line"		3086126	3					
ANR	3086184	Parameter	IN HANDLE hProcess	286:52:12948:12968	3086126	0	True				
ANR	3086185	ParameterType	IN HANDLE		3086126	0					
ANR	3086186	Identifier	hProcess		3086126	1					
ANR	3086187	Parameter	IN DWORD dwAddr	287:13:12985:13002	3086126	1	True				
ANR	3086188	ParameterType	IN DWORD		3086126	0					
ANR	3086189	Identifier	dwAddr		3086126	1					
ANR	3086190	Parameter	OUT PDWORD pdwDisplacement	288:13:13019:13046	3086126	2	True				
ANR	3086191	ParameterType	OUT PDWORD		3086126	0					
ANR	3086192	Identifier	pdwDisplacement		3086126	1					
ANR	3086193	Parameter	OUT PIMAGEHLP_LINE Line	289:13:13063:13086	3086126	3	True				
ANR	3086194	ParameterType	OUT PIMAGEHLP_LINE		3086126	0					
ANR	3086195	Identifier	Line		3086126	1					
ANR	3086196	CFGEntryNode	ENTRY		3086126		True				
ANR	3086197	CFGExitNode	EXIT		3086126		True				
ANR	3086198	Symbol	Line		3086126						
ANR	3086199	Symbol	dwAddr		3086126						
ANR	3086200	Symbol	dwTempDis		3086126						
ANR	3086201	Symbol	hProcess		3086126						
ANR	3086202	Symbol	pdwDisplacement		3086126						
ANR	3086203	Symbol	* pdwDisplacement		3086126						
ANR	3086204	Symbol	TRUE		3086126						
ANR	3086205	Symbol	FALSE		3086126						
ANR	3086206	Symbol	_SymGetLineFromAddr		3086126						
ANR	3086207	Function	ExceptionHandler :: ImagehlpStackWalk	320:0:14064:17901							
ANR	3086208	FunctionDef	ExceptionHandler :: ImagehlpStackWalk (PCONTEXT pContext)		3086207	0					
ANR	3086209	CompoundStatement		320:62:14126:17901	3086207	0					
ANR	3086210	ExpressionStatement	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"	321:4:14132:14165	3086207	0	True				
ANR	3086211	CallExpression	"_tprintf ( _T ( ""\\nCall stack:\\n"" ) )"		3086207	0					
ANR	3086212	Callee	_tprintf		3086207	0					
ANR	3086213	Identifier	_tprintf		3086207	0					
ANR	3086214	ArgumentList	"_T ( ""\\nCall stack:\\n"" )"		3086207	1					
ANR	3086215	Argument	"_T ( ""\\nCall stack:\\n"" )"		3086207	0					
ANR	3086216	CallExpression	"_T ( ""\\nCall stack:\\n"" )"		3086207	0					
ANR	3086217	Callee	_T		3086207	0					
ANR	3086218	Identifier	_T		3086207	0					
ANR	3086219	ArgumentList	"""\\nCall stack:\\n"""		3086207	1					
ANR	3086220	Argument	"""\\nCall stack:\\n"""		3086207	0					
ANR	3086221	PrimaryExpression	"""\\nCall stack:\\n"""		3086207	0					
ANR	3086222	ExpressionStatement	"_tprintf ( _T ( ""Address   Frame\\n"" ) )"	323:1:14283:14318	3086207	1	True				
ANR	3086223	CallExpression	"_tprintf ( _T ( ""Address   Frame\\n"" ) )"		3086207	0					
ANR	3086224	Callee	_tprintf		3086207	0					
ANR	3086225	Identifier	_tprintf		3086207	0					
ANR	3086226	ArgumentList	"_T ( ""Address   Frame\\n"" )"		3086207	1					
ANR	3086227	Argument	"_T ( ""Address   Frame\\n"" )"		3086207	0					
ANR	3086228	CallExpression	"_T ( ""Address   Frame\\n"" )"		3086207	0					
ANR	3086229	Callee	_T		3086207	0					
ANR	3086230	Identifier	_T		3086207	0					
ANR	3086231	ArgumentList	"""Address   Frame\\n"""		3086207	1					
ANR	3086232	Argument	"""Address   Frame\\n"""		3086207	0					
ANR	3086233	PrimaryExpression	"""Address   Frame\\n"""		3086207	0					
ANR	3086234	ExpressionStatement	SymSetOptions ( SYMOPT_LOAD_LINES )	325:1:14322:14354	3086207	2	True				
ANR	3086235	CallExpression	SymSetOptions ( SYMOPT_LOAD_LINES )		3086207	0					
ANR	3086236	Callee	SymSetOptions		3086207	0					
ANR	3086237	Identifier	SymSetOptions		3086207	0					
ANR	3086238	ArgumentList	SYMOPT_LOAD_LINES		3086207	1					
ANR	3086239	Argument	SYMOPT_LOAD_LINES		3086207	0					
ANR	3086240	Identifier	SYMOPT_LOAD_LINES		3086207	0					
ANR	3086241	IdentifierDeclStatement	STACKFRAME sf ;	328:4:14435:14448	3086207	3	True				
ANR	3086242	IdentifierDecl	sf		3086207	0					
ANR	3086243	IdentifierDeclType	STACKFRAME		3086207	0					
ANR	3086244	Identifier	sf		3086207	1					
ANR	3086245	ExpressionStatement	"memset ( & sf , 0 , sizeof ( sf ) )"	329:1:14455:14483	3086207	4	True				
ANR	3086246	CallExpression	"memset ( & sf , 0 , sizeof ( sf ) )"		3086207	0					
ANR	3086247	Callee	memset		3086207	0					
ANR	3086248	Identifier	memset		3086207	0					
ANR	3086249	ArgumentList	& sf		3086207	1					
ANR	3086250	Argument	& sf		3086207	0					
ANR	3086251	UnaryOperationExpression	& sf		3086207	0					
ANR	3086252	UnaryOperator	&		3086207	0					
ANR	3086253	Identifier	sf		3086207	1					
ANR	3086254	Argument	0		3086207	1					
ANR	3086255	PrimaryExpression	0		3086207	0					
ANR	3086256	Argument	sizeof ( sf )		3086207	2					
ANR	3086257	SizeofExpression	sizeof ( sf )		3086207	0					
ANR	3086258	Sizeof	sizeof		3086207	0					
ANR	3086259	SizeofOperand	sf		3086207	1					
ANR	3086260	ExpressionStatement	sf . AddrPC . Offset = pContext -> Eip	332:4:14641:14679	3086207	5	True				
ANR	3086261	AssignmentExpression	sf . AddrPC . Offset = pContext -> Eip		3086207	0		=			
ANR	3086262	MemberAccess	sf . AddrPC . Offset		3086207	0					
ANR	3086263	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086264	Identifier	sf		3086207	0					
ANR	3086265	Identifier	AddrPC		3086207	1					
ANR	3086266	Identifier	Offset		3086207	1					
ANR	3086267	PtrMemberAccess	pContext -> Eip		3086207	1					
ANR	3086268	Identifier	pContext		3086207	0					
ANR	3086269	Identifier	Eip		3086207	1					
ANR	3086270	ExpressionStatement	sf . AddrPC . Mode = AddrModeFlat	333:4:14685:14722	3086207	6	True				
ANR	3086271	AssignmentExpression	sf . AddrPC . Mode = AddrModeFlat		3086207	0		=			
ANR	3086272	MemberAccess	sf . AddrPC . Mode		3086207	0					
ANR	3086273	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086274	Identifier	sf		3086207	0					
ANR	3086275	Identifier	AddrPC		3086207	1					
ANR	3086276	Identifier	Mode		3086207	1					
ANR	3086277	Identifier	AddrModeFlat		3086207	1					
ANR	3086278	ExpressionStatement	sf . AddrStack . Offset = pContext -> Esp	334:4:14728:14766	3086207	7	True				
ANR	3086279	AssignmentExpression	sf . AddrStack . Offset = pContext -> Esp		3086207	0		=			
ANR	3086280	MemberAccess	sf . AddrStack . Offset		3086207	0					
ANR	3086281	MemberAccess	sf . AddrStack		3086207	0					
ANR	3086282	Identifier	sf		3086207	0					
ANR	3086283	Identifier	AddrStack		3086207	1					
ANR	3086284	Identifier	Offset		3086207	1					
ANR	3086285	PtrMemberAccess	pContext -> Esp		3086207	1					
ANR	3086286	Identifier	pContext		3086207	0					
ANR	3086287	Identifier	Esp		3086207	1					
ANR	3086288	ExpressionStatement	sf . AddrStack . Mode = AddrModeFlat	335:4:14772:14809	3086207	8	True				
ANR	3086289	AssignmentExpression	sf . AddrStack . Mode = AddrModeFlat		3086207	0		=			
ANR	3086290	MemberAccess	sf . AddrStack . Mode		3086207	0					
ANR	3086291	MemberAccess	sf . AddrStack		3086207	0					
ANR	3086292	Identifier	sf		3086207	0					
ANR	3086293	Identifier	AddrStack		3086207	1					
ANR	3086294	Identifier	Mode		3086207	1					
ANR	3086295	Identifier	AddrModeFlat		3086207	1					
ANR	3086296	ExpressionStatement	sf . AddrFrame . Offset = pContext -> Ebp	336:4:14815:14853	3086207	9	True				
ANR	3086297	AssignmentExpression	sf . AddrFrame . Offset = pContext -> Ebp		3086207	0		=			
ANR	3086298	MemberAccess	sf . AddrFrame . Offset		3086207	0					
ANR	3086299	MemberAccess	sf . AddrFrame		3086207	0					
ANR	3086300	Identifier	sf		3086207	0					
ANR	3086301	Identifier	AddrFrame		3086207	1					
ANR	3086302	Identifier	Offset		3086207	1					
ANR	3086303	PtrMemberAccess	pContext -> Ebp		3086207	1					
ANR	3086304	Identifier	pContext		3086207	0					
ANR	3086305	Identifier	Ebp		3086207	1					
ANR	3086306	ExpressionStatement	sf . AddrFrame . Mode = AddrModeFlat	337:4:14859:14896	3086207	10	True				
ANR	3086307	AssignmentExpression	sf . AddrFrame . Mode = AddrModeFlat		3086207	0		=			
ANR	3086308	MemberAccess	sf . AddrFrame . Mode		3086207	0					
ANR	3086309	MemberAccess	sf . AddrFrame		3086207	0					
ANR	3086310	Identifier	sf		3086207	0					
ANR	3086311	Identifier	AddrFrame		3086207	1					
ANR	3086312	Identifier	Mode		3086207	1					
ANR	3086313	Identifier	AddrModeFlat		3086207	1					
ANR	3086314	WhileStatement	while ( 1 )		3086207	11					
ANR	3086315	Condition	1	338:9:14911:14911	3086207	0	True				
ANR	3086316	PrimaryExpression	1		3086207	0					
ANR	3086317	CompoundStatement		46:8:2251:2276	3086207	1					
ANR	3086318	IfStatement	"if ( ! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 ) )"		3086207	0					
ANR	3086319	Condition	"! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"	339:13:14933:15323	3086207	0	True				
ANR	3086320	UnaryOperationExpression	"! _StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"		3086207	0					
ANR	3086321	UnaryOperator	!		3086207	0					
ANR	3086322	CallExpression	"_StackWalk ( IMAGE_FILE_MACHINE_I386 , GetCurrentProcess ( ) , GetCurrentThread ( ) , & sf , pContext , 0 , _SymFunctionTableAccess , _SymGetModuleBase , 0 )"		3086207	1					
ANR	3086323	Callee	_StackWalk		3086207	0					
ANR	3086324	Identifier	_StackWalk		3086207	0					
ANR	3086325	ArgumentList	IMAGE_FILE_MACHINE_I386		3086207	1					
ANR	3086326	Argument	IMAGE_FILE_MACHINE_I386		3086207	0					
ANR	3086327	Identifier	IMAGE_FILE_MACHINE_I386		3086207	0					
ANR	3086328	Argument	GetCurrentProcess ( )		3086207	1					
ANR	3086329	CallExpression	GetCurrentProcess ( )		3086207	0					
ANR	3086330	Callee	GetCurrentProcess		3086207	0					
ANR	3086331	Identifier	GetCurrentProcess		3086207	0					
ANR	3086332	ArgumentList			3086207	1					
ANR	3086333	Argument	GetCurrentThread ( )		3086207	2					
ANR	3086334	CallExpression	GetCurrentThread ( )		3086207	0					
ANR	3086335	Callee	GetCurrentThread		3086207	0					
ANR	3086336	Identifier	GetCurrentThread		3086207	0					
ANR	3086337	ArgumentList			3086207	1					
ANR	3086338	Argument	& sf		3086207	3					
ANR	3086339	UnaryOperationExpression	& sf		3086207	0					
ANR	3086340	UnaryOperator	&		3086207	0					
ANR	3086341	Identifier	sf		3086207	1					
ANR	3086342	Argument	pContext		3086207	4					
ANR	3086343	Identifier	pContext		3086207	0					
ANR	3086344	Argument	0		3086207	5					
ANR	3086345	PrimaryExpression	0		3086207	0					
ANR	3086346	Argument	_SymFunctionTableAccess		3086207	6					
ANR	3086347	Identifier	_SymFunctionTableAccess		3086207	0					
ANR	3086348	Argument	_SymGetModuleBase		3086207	7					
ANR	3086349	Identifier	_SymGetModuleBase		3086207	0					
ANR	3086350	Argument	0		3086207	8					
ANR	3086351	PrimaryExpression	0		3086207	0					
ANR	3086352	BreakStatement	break ;	348:12:15339:15344	3086207	1	True				
ANR	3086353	IfStatement	if ( 0 == sf . AddrFrame . Offset )		3086207	1					
ANR	3086354	Condition	0 == sf . AddrFrame . Offset	349:13:15359:15382	3086207	0	True				
ANR	3086355	EqualityExpression	0 == sf . AddrFrame . Offset		3086207	0		==			
ANR	3086356	PrimaryExpression	0		3086207	0					
ANR	3086357	MemberAccess	sf . AddrFrame . Offset		3086207	1					
ANR	3086358	MemberAccess	sf . AddrFrame		3086207	0					
ANR	3086359	Identifier	sf		3086207	0					
ANR	3086360	Identifier	AddrFrame		3086207	1					
ANR	3086361	Identifier	Offset		3086207	1					
ANR	3086362	BreakStatement	break ;	350:12:15433:15438	3086207	1	True				
ANR	3086363	ExpressionStatement	"_tprintf ( _T ( ""%08X  %08X  "" ) , sf . AddrPC . Offset , sf . AddrFrame . Offset )"	351:8:15503:15572	3086207	2	True				
ANR	3086364	CallExpression	"_tprintf ( _T ( ""%08X  %08X  "" ) , sf . AddrPC . Offset , sf . AddrFrame . Offset )"		3086207	0					
ANR	3086365	Callee	_tprintf		3086207	0					
ANR	3086366	Identifier	_tprintf		3086207	0					
ANR	3086367	ArgumentList	"_T ( ""%08X  %08X  "" )"		3086207	1					
ANR	3086368	Argument	"_T ( ""%08X  %08X  "" )"		3086207	0					
ANR	3086369	CallExpression	"_T ( ""%08X  %08X  "" )"		3086207	0					
ANR	3086370	Callee	_T		3086207	0					
ANR	3086371	Identifier	_T		3086207	0					
ANR	3086372	ArgumentList	"""%08X  %08X  """		3086207	1					
ANR	3086373	Argument	"""%08X  %08X  """		3086207	0					
ANR	3086374	PrimaryExpression	"""%08X  %08X  """		3086207	0					
ANR	3086375	Argument	sf . AddrPC . Offset		3086207	1					
ANR	3086376	MemberAccess	sf . AddrPC . Offset		3086207	0					
ANR	3086377	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086378	Identifier	sf		3086207	0					
ANR	3086379	Identifier	AddrPC		3086207	1					
ANR	3086380	Identifier	Offset		3086207	1					
ANR	3086381	Argument	sf . AddrFrame . Offset		3086207	2					
ANR	3086382	MemberAccess	sf . AddrFrame . Offset		3086207	0					
ANR	3086383	MemberAccess	sf . AddrFrame		3086207	0					
ANR	3086384	Identifier	sf		3086207	0					
ANR	3086385	Identifier	AddrFrame		3086207	1					
ANR	3086386	Identifier	Offset		3086207	1					
ANR	3086387	IdentifierDeclStatement	BYTE symbolBuffer [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ] ;	359:8:16078:16128	3086207	3	True				
ANR	3086388	IdentifierDecl	symbolBuffer [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ]		3086207	0					
ANR	3086389	IdentifierDeclType	BYTE [ sizeof ( IMAGEHLP_SYMBOL ) + 512 ]		3086207	0					
ANR	3086390	Identifier	symbolBuffer		3086207	1					
ANR	3086391	AdditiveExpression	sizeof ( IMAGEHLP_SYMBOL ) + 512		3086207	2		+			
ANR	3086392	SizeofExpression	sizeof ( IMAGEHLP_SYMBOL )		3086207	0					
ANR	3086393	Sizeof	sizeof		3086207	0					
ANR	3086394	SizeofOperand	IMAGEHLP_SYMBOL		3086207	1					
ANR	3086395	PrimaryExpression	512		3086207	1					
ANR	3086396	IdentifierDeclStatement	PIMAGEHLP_SYMBOL pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer ;	360:8:16138:16195	3086207	4	True				
ANR	3086397	IdentifierDecl	pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer		3086207	0					
ANR	3086398	IdentifierDeclType	PIMAGEHLP_SYMBOL		3086207	0					
ANR	3086399	Identifier	pSymbol		3086207	1					
ANR	3086400	AssignmentExpression	pSymbol = ( PIMAGEHLP_SYMBOL ) symbolBuffer		3086207	2		=			
ANR	3086401	Identifier	pSymbol		3086207	0					
ANR	3086402	CastExpression	( PIMAGEHLP_SYMBOL ) symbolBuffer		3086207	1					
ANR	3086403	CastTarget	PIMAGEHLP_SYMBOL		3086207	0					
ANR	3086404	Identifier	symbolBuffer		3086207	1					
ANR	3086405	ExpressionStatement	pSymbol -> SizeOfStruct = sizeof ( IMAGEHLP_SYMBOL )	362:2:16256:16303	3086207	5	True				
ANR	3086406	AssignmentExpression	pSymbol -> SizeOfStruct = sizeof ( IMAGEHLP_SYMBOL )		3086207	0		=			
ANR	3086407	PtrMemberAccess	pSymbol -> SizeOfStruct		3086207	0					
ANR	3086408	Identifier	pSymbol		3086207	0					
ANR	3086409	Identifier	SizeOfStruct		3086207	1					
ANR	3086410	SizeofExpression	sizeof ( IMAGEHLP_SYMBOL )		3086207	1					
ANR	3086411	Sizeof	sizeof		3086207	0					
ANR	3086412	SizeofOperand	IMAGEHLP_SYMBOL		3086207	1					
ANR	3086413	ExpressionStatement	pSymbol -> MaxNameLength = 511	363:8:16313:16341	3086207	6	True				
ANR	3086414	AssignmentExpression	pSymbol -> MaxNameLength = 511		3086207	0		=			
ANR	3086415	PtrMemberAccess	pSymbol -> MaxNameLength		3086207	0					
ANR	3086416	Identifier	pSymbol		3086207	0					
ANR	3086417	Identifier	MaxNameLength		3086207	1					
ANR	3086418	PrimaryExpression	511		3086207	1					
ANR	3086419	ExpressionStatement	pSymbol -> Name [ 0 ] = '\\0'	364:2:16345:16368	3086207	7	True				
ANR	3086420	AssignmentExpression	pSymbol -> Name [ 0 ] = '\\0'		3086207	0		=			
ANR	3086421	ArrayIndexing	pSymbol -> Name [ 0 ]		3086207	0					
ANR	3086422	PtrMemberAccess	pSymbol -> Name		3086207	0					
ANR	3086423	Identifier	pSymbol		3086207	0					
ANR	3086424	Identifier	Name		3086207	1					
ANR	3086425	PrimaryExpression	0		3086207	1					
ANR	3086426	PrimaryExpression	'\\0'		3086207	1					
ANR	3086427	IdentifierDeclStatement	DWORD symDisplacement = 0 ;	365:8:16378:16403	3086207	8	True				
ANR	3086428	IdentifierDecl	symDisplacement = 0		3086207	0					
ANR	3086429	IdentifierDeclType	DWORD		3086207	0					
ANR	3086430	Identifier	symDisplacement		3086207	1					
ANR	3086431	AssignmentExpression	symDisplacement = 0		3086207	2		=			
ANR	3086432	Identifier	symDisplacement		3086207	0					
ANR	3086433	PrimaryExpression	0		3086207	1					
ANR	3086434	IfStatement	"if ( _SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol ) )"		3086207	9					
ANR	3086435	Condition	"_SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol )"	368:7:16527:16641	3086207	0	True				
ANR	3086436	CallExpression	"_SymGetSymFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , pSymbol )"		3086207	0					
ANR	3086437	Callee	_SymGetSymFromAddr		3086207	0					
ANR	3086438	Identifier	_SymGetSymFromAddr		3086207	0					
ANR	3086439	ArgumentList	GetCurrentProcess ( )		3086207	1					
ANR	3086440	Argument	GetCurrentProcess ( )		3086207	0					
ANR	3086441	CallExpression	GetCurrentProcess ( )		3086207	0					
ANR	3086442	Callee	GetCurrentProcess		3086207	0					
ANR	3086443	Identifier	GetCurrentProcess		3086207	0					
ANR	3086444	ArgumentList			3086207	1					
ANR	3086445	Argument	sf . AddrPC . Offset		3086207	1					
ANR	3086446	MemberAccess	sf . AddrPC . Offset		3086207	0					
ANR	3086447	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086448	Identifier	sf		3086207	0					
ANR	3086449	Identifier	AddrPC		3086207	1					
ANR	3086450	Identifier	Offset		3086207	1					
ANR	3086451	Argument	& symDisplacement		3086207	2					
ANR	3086452	UnaryOperationExpression	& symDisplacement		3086207	0					
ANR	3086453	UnaryOperator	&		3086207	0					
ANR	3086454	Identifier	symDisplacement		3086207	1					
ANR	3086455	Argument	pSymbol		3086207	3					
ANR	3086456	Identifier	pSymbol		3086207	0					
ANR	3086457	CompoundStatement		55:3:2681:2705	3086207	1					
ANR	3086458	IdentifierDeclStatement	IMAGEHLP_LINE lineInfo ;	371:3:16653:16675	3086207	0	True				
ANR	3086459	IdentifierDecl	lineInfo		3086207	0					
ANR	3086460	IdentifierDeclType	IMAGEHLP_LINE		3086207	0					
ANR	3086461	Identifier	lineInfo		3086207	1					
ANR	3086462	ExpressionStatement	lineInfo . SizeOfStruct = sizeof ( IMAGEHLP_LINE )	372:3:16680:16725	3086207	1	True				
ANR	3086463	AssignmentExpression	lineInfo . SizeOfStruct = sizeof ( IMAGEHLP_LINE )		3086207	0		=			
ANR	3086464	MemberAccess	lineInfo . SizeOfStruct		3086207	0					
ANR	3086465	Identifier	lineInfo		3086207	0					
ANR	3086466	Identifier	SizeOfStruct		3086207	1					
ANR	3086467	SizeofExpression	sizeof ( IMAGEHLP_LINE )		3086207	1					
ANR	3086468	Sizeof	sizeof		3086207	0					
ANR	3086469	SizeofOperand	IMAGEHLP_LINE		3086207	1					
ANR	3086470	ExpressionStatement	"ZeroMemory ( & lineInfo , sizeof ( IMAGEHLP_LINE ) )"	373:3:16754:16802	3086207	2	True				
ANR	3086471	CallExpression	"ZeroMemory ( & lineInfo , sizeof ( IMAGEHLP_LINE ) )"		3086207	0					
ANR	3086472	Callee	ZeroMemory		3086207	0					
ANR	3086473	Identifier	ZeroMemory		3086207	0					
ANR	3086474	ArgumentList	& lineInfo		3086207	1					
ANR	3086475	Argument	& lineInfo		3086207	0					
ANR	3086476	UnaryOperationExpression	& lineInfo		3086207	0					
ANR	3086477	UnaryOperator	&		3086207	0					
ANR	3086478	Identifier	lineInfo		3086207	1					
ANR	3086479	Argument	sizeof ( IMAGEHLP_LINE )		3086207	1					
ANR	3086480	SizeofExpression	sizeof ( IMAGEHLP_LINE )		3086207	0					
ANR	3086481	Sizeof	sizeof		3086207	0					
ANR	3086482	SizeofOperand	IMAGEHLP_LINE		3086207	1					
ANR	3086483	IdentifierDeclStatement	bool bGotLineNum = false ;	374:3:16808:16832	3086207	3	True				
ANR	3086484	IdentifierDecl	bGotLineNum = false		3086207	0					
ANR	3086485	IdentifierDeclType	bool		3086207	0					
ANR	3086486	Identifier	bGotLineNum		3086207	1					
ANR	3086487	AssignmentExpression	bGotLineNum = false		3086207	2		=			
ANR	3086488	Identifier	false		3086207	0					
ANR	3086489	Identifier	false		3086207	1					
ANR	3086490	IfStatement	if ( _SymGetLineFromAddr )		3086207	4					
ANR	3086491	Condition	_SymGetLineFromAddr	375:7:16841:16859	3086207	0	True				
ANR	3086492	Identifier	_SymGetLineFromAddr		3086207	0					
ANR	3086493	CompoundStatement		57:3:2781:2781	3086207	1					
ANR	3086494	ExpressionStatement	"bGotLineNum = InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"	378:4:16929:17047	3086207	0	True				
ANR	3086495	AssignmentExpression	"bGotLineNum = InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"		3086207	0		=			
ANR	3086496	Identifier	bGotLineNum		3086207	0					
ANR	3086497	CallExpression	"InternalSymGetLineFromAddr ( GetCurrentProcess ( ) , sf . AddrPC . Offset , & symDisplacement , & lineInfo )"		3086207	1					
ANR	3086498	Callee	InternalSymGetLineFromAddr		3086207	0					
ANR	3086499	Identifier	InternalSymGetLineFromAddr		3086207	0					
ANR	3086500	ArgumentList	GetCurrentProcess ( )		3086207	1					
ANR	3086501	Argument	GetCurrentProcess ( )		3086207	0					
ANR	3086502	CallExpression	GetCurrentProcess ( )		3086207	0					
ANR	3086503	Callee	GetCurrentProcess		3086207	0					
ANR	3086504	Identifier	GetCurrentProcess		3086207	0					
ANR	3086505	ArgumentList			3086207	1					
ANR	3086506	Argument	sf . AddrPC . Offset		3086207	1					
ANR	3086507	MemberAccess	sf . AddrPC . Offset		3086207	0					
ANR	3086508	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086509	Identifier	sf		3086207	0					
ANR	3086510	Identifier	AddrPC		3086207	1					
ANR	3086511	Identifier	Offset		3086207	1					
ANR	3086512	Argument	& symDisplacement		3086207	2					
ANR	3086513	UnaryOperationExpression	& symDisplacement		3086207	0					
ANR	3086514	UnaryOperator	&		3086207	0					
ANR	3086515	Identifier	symDisplacement		3086207	1					
ANR	3086516	Argument	& lineInfo		3086207	3					
ANR	3086517	UnaryOperationExpression	& lineInfo		3086207	0					
ANR	3086518	UnaryOperator	&		3086207	0					
ANR	3086519	Identifier	lineInfo		3086207	1					
ANR	3086520	IfStatement	if ( bGotLineNum )		3086207	5					
ANR	3086521	Condition	bGotLineNum	382:7:17065:17075	3086207	0	True				
ANR	3086522	Identifier	bGotLineNum		3086207	0					
ANR	3086523	ExpressionStatement	"_tprintf ( _T ( ""%hs (%s:%d)\\n"" ) , pSymbol -> Name , lineInfo . FileName , lineInfo . LineNumber )"	383:4:17082:17173	3086207	1	True				
ANR	3086524	CallExpression	"_tprintf ( _T ( ""%hs (%s:%d)\\n"" ) , pSymbol -> Name , lineInfo . FileName , lineInfo . LineNumber )"		3086207	0					
ANR	3086525	Callee	_tprintf		3086207	0					
ANR	3086526	Identifier	_tprintf		3086207	0					
ANR	3086527	ArgumentList	"_T ( ""%hs (%s:%d)\\n"" )"		3086207	1					
ANR	3086528	Argument	"_T ( ""%hs (%s:%d)\\n"" )"		3086207	0					
ANR	3086529	CallExpression	"_T ( ""%hs (%s:%d)\\n"" )"		3086207	0					
ANR	3086530	Callee	_T		3086207	0					
ANR	3086531	Identifier	_T		3086207	0					
ANR	3086532	ArgumentList	"""%hs (%s:%d)\\n"""		3086207	1					
ANR	3086533	Argument	"""%hs (%s:%d)\\n"""		3086207	0					
ANR	3086534	PrimaryExpression	"""%hs (%s:%d)\\n"""		3086207	0					
ANR	3086535	Argument	pSymbol -> Name		3086207	1					
ANR	3086536	PtrMemberAccess	pSymbol -> Name		3086207	0					
ANR	3086537	Identifier	pSymbol		3086207	0					
ANR	3086538	Identifier	Name		3086207	1					
ANR	3086539	Argument	lineInfo . FileName		3086207	2					
ANR	3086540	MemberAccess	lineInfo . FileName		3086207	0					
ANR	3086541	Identifier	lineInfo		3086207	0					
ANR	3086542	Identifier	FileName		3086207	1					
ANR	3086543	Argument	lineInfo . LineNumber		3086207	3					
ANR	3086544	MemberAccess	lineInfo . LineNumber		3086207	0					
ANR	3086545	Identifier	lineInfo		3086207	0					
ANR	3086546	Identifier	LineNumber		3086207	1					
ANR	3086547	ElseStatement	else		3086207	0					
ANR	3086548	ExpressionStatement	"_tprintf ( _T ( ""%hs+%X\\n"" ) , pSymbol -> Name , symDisplacement )"	386:4:17187:17245	3086207	0	True				
ANR	3086549	CallExpression	"_tprintf ( _T ( ""%hs+%X\\n"" ) , pSymbol -> Name , symDisplacement )"		3086207	0					
ANR	3086550	Callee	_tprintf		3086207	0					
ANR	3086551	Identifier	_tprintf		3086207	0					
ANR	3086552	ArgumentList	"_T ( ""%hs+%X\\n"" )"		3086207	1					
ANR	3086553	Argument	"_T ( ""%hs+%X\\n"" )"		3086207	0					
ANR	3086554	CallExpression	"_T ( ""%hs+%X\\n"" )"		3086207	0					
ANR	3086555	Callee	_T		3086207	0					
ANR	3086556	Identifier	_T		3086207	0					
ANR	3086557	ArgumentList	"""%hs+%X\\n"""		3086207	1					
ANR	3086558	Argument	"""%hs+%X\\n"""		3086207	0					
ANR	3086559	PrimaryExpression	"""%hs+%X\\n"""		3086207	0					
ANR	3086560	Argument	pSymbol -> Name		3086207	1					
ANR	3086561	PtrMemberAccess	pSymbol -> Name		3086207	0					
ANR	3086562	Identifier	pSymbol		3086207	0					
ANR	3086563	Identifier	Name		3086207	1					
ANR	3086564	Argument	symDisplacement		3086207	2					
ANR	3086565	Identifier	symDisplacement		3086207	0					
ANR	3086566	ElseStatement	else		3086207	0					
ANR	3086567	CompoundStatement		77:12:3496:3525	3086207	0					
ANR	3086568	IdentifierDeclStatement	"TCHAR szModule [ MAX_PATH ] = _T ( """" ) ;"	395:12:17576:17609	3086207	0	True				
ANR	3086569	IdentifierDecl	"szModule [ MAX_PATH ] = _T ( """" )"		3086207	0					
ANR	3086570	IdentifierDeclType	TCHAR [ MAX_PATH ]		3086207	0					
ANR	3086571	Identifier	szModule		3086207	1					
ANR	3086572	Identifier	MAX_PATH		3086207	2					
ANR	3086573	AssignmentExpression	"szModule [ MAX_PATH ] = _T ( """" )"		3086207	3		=			
ANR	3086574	Identifier	MAX_PATH		3086207	0					
ANR	3086575	CallExpression	"_T ( """" )"		3086207	1					
ANR	3086576	Callee	_T		3086207	0					
ANR	3086577	Identifier	_T		3086207	0					
ANR	3086578	ArgumentList	""""""		3086207	1					
ANR	3086579	Argument	""""""		3086207	0					
ANR	3086580	PrimaryExpression	""""""		3086207	0					
ANR	3086581	IdentifierDeclStatement	"DWORD section = 0 , offset = 0 ;"	396:12:17623:17652	3086207	1	True				
ANR	3086582	IdentifierDecl	section = 0		3086207	0					
ANR	3086583	IdentifierDeclType	DWORD		3086207	0					
ANR	3086584	Identifier	section		3086207	1					
ANR	3086585	AssignmentExpression	section = 0		3086207	2		=			
ANR	3086586	Identifier	section		3086207	0					
ANR	3086587	PrimaryExpression	0		3086207	1					
ANR	3086588	IdentifierDecl	offset = 0		3086207	1					
ANR	3086589	IdentifierDeclType	DWORD		3086207	0					
ANR	3086590	Identifier	offset		3086207	1					
ANR	3086591	AssignmentExpression	offset = 0		3086207	2		=			
ANR	3086592	Identifier	offset		3086207	0					
ANR	3086593	PrimaryExpression	0		3086207	1					
ANR	3086594	ExpressionStatement	"GetLogicalAddress ( ( PVOID ) sf . AddrPC . Offset , szModule , sizeof ( szModule ) , section , offset )"	397:12:17666:17788	3086207	2	True				
ANR	3086595	CallExpression	"GetLogicalAddress ( ( PVOID ) sf . AddrPC . Offset , szModule , sizeof ( szModule ) , section , offset )"		3086207	0					
ANR	3086596	Callee	GetLogicalAddress		3086207	0					
ANR	3086597	Identifier	GetLogicalAddress		3086207	0					
ANR	3086598	ArgumentList	( PVOID ) sf . AddrPC . Offset		3086207	1					
ANR	3086599	Argument	( PVOID ) sf . AddrPC . Offset		3086207	0					
ANR	3086600	CastExpression	( PVOID ) sf . AddrPC . Offset		3086207	0					
ANR	3086601	CastTarget	PVOID		3086207	0					
ANR	3086602	MemberAccess	sf . AddrPC . Offset		3086207	1					
ANR	3086603	MemberAccess	sf . AddrPC		3086207	0					
ANR	3086604	Identifier	sf		3086207	0					
ANR	3086605	Identifier	AddrPC		3086207	1					
ANR	3086606	Identifier	Offset		3086207	1					
ANR	3086607	Argument	szModule		3086207	1					
ANR	3086608	Identifier	szModule		3086207	0					
ANR	3086609	Argument	sizeof ( szModule )		3086207	2					
ANR	3086610	SizeofExpression	sizeof ( szModule )		3086207	0					
ANR	3086611	Sizeof	sizeof		3086207	0					
ANR	3086612	SizeofOperand	szModule		3086207	1					
ANR	3086613	Argument	section		3086207	3					
ANR	3086614	Identifier	section		3086207	0					
ANR	3086615	Argument	offset		3086207	4					
ANR	3086616	Identifier	offset		3086207	0					
ANR	3086617	ExpressionStatement	"_tprintf ( _T ( ""%04X:%08X %s\\n"" ) , section , offset , szModule )"	399:12:17802:17883	3086207	3	True				
ANR	3086618	CallExpression	"_tprintf ( _T ( ""%04X:%08X %s\\n"" ) , section , offset , szModule )"		3086207	0					
ANR	3086619	Callee	_tprintf		3086207	0					
ANR	3086620	Identifier	_tprintf		3086207	0					
ANR	3086621	ArgumentList	"_T ( ""%04X:%08X %s\\n"" )"		3086207	1					
ANR	3086622	Argument	"_T ( ""%04X:%08X %s\\n"" )"		3086207	0					
ANR	3086623	CallExpression	"_T ( ""%04X:%08X %s\\n"" )"		3086207	0					
ANR	3086624	Callee	_T		3086207	0					
ANR	3086625	Identifier	_T		3086207	0					
ANR	3086626	ArgumentList	"""%04X:%08X %s\\n"""		3086207	1					
ANR	3086627	Argument	"""%04X:%08X %s\\n"""		3086207	0					
ANR	3086628	PrimaryExpression	"""%04X:%08X %s\\n"""		3086207	0					
ANR	3086629	Argument	section		3086207	1					
ANR	3086630	Identifier	section		3086207	0					
ANR	3086631	Argument	offset		3086207	2					
ANR	3086632	Identifier	offset		3086207	0					
ANR	3086633	Argument	szModule		3086207	3					
ANR	3086634	Identifier	szModule		3086207	0					
ANR	3086635	ReturnType	void		3086207	1					
ANR	3086636	Identifier	ExceptionHandler :: ImagehlpStackWalk		3086207	2					
ANR	3086637	ParameterList	PCONTEXT pContext		3086207	3					
ANR	3086638	Parameter	PCONTEXT pContext	320:42:14106:14122	3086207	0	True				
ANR	3086639	ParameterType	PCONTEXT		3086207	0					
ANR	3086640	Identifier	pContext		3086207	1					
ANR	3086641	CFGEntryNode	ENTRY		3086207		True				
ANR	3086642	CFGExitNode	EXIT		3086207		True				
ANR	3086643	Symbol	section		3086207						
ANR	3086644	Symbol	sf . AddrStack . Offset		3086207						
ANR	3086645	Symbol	sf . AddrPC . Offset		3086207						
ANR	3086646	Symbol	AddrModeFlat		3086207						
ANR	3086647	Symbol	pSymbol		3086207						
ANR	3086648	Symbol	lineInfo . SizeOfStruct		3086207						
ANR	3086649	Symbol	lineInfo		3086207						
ANR	3086650	Symbol	symbolBuffer		3086207						
ANR	3086651	Symbol	InternalSymGetLineFromAddr		3086207						
ANR	3086652	Symbol	& sf		3086207						
ANR	3086653	Symbol	_SymGetSymFromAddr		3086207						
ANR	3086654	Symbol	offset		3086207						
ANR	3086655	Symbol	sf . AddrStack . Mode		3086207						
ANR	3086656	Symbol	lineInfo . FileName		3086207						
ANR	3086657	Symbol	GetCurrentThread		3086207						
ANR	3086658	Symbol	GetCurrentProcess		3086207						
ANR	3086659	Symbol	* pSymbol		3086207						
ANR	3086660	Symbol	bGotLineNum		3086207						
ANR	3086661	Symbol	pContext -> Eip		3086207						
ANR	3086662	Symbol	sf . AddrFrame		3086207						
ANR	3086663	Symbol	& lineInfo		3086207						
ANR	3086664	Symbol	_SymGetModuleBase		3086207						
ANR	3086665	Symbol	lineInfo . LineNumber		3086207						
ANR	3086666	Symbol	sf . AddrFrame . Offset		3086207						
ANR	3086667	Symbol	szModule		3086207						
ANR	3086668	Symbol	pSymbol -> SizeOfStruct		3086207						
ANR	3086669	Symbol	sf . AddrPC		3086207						
ANR	3086670	Symbol	sf . AddrFrame . Mode		3086207						
ANR	3086671	Symbol	_SymFunctionTableAccess		3086207						
ANR	3086672	Symbol	pSymbol -> Name		3086207						
ANR	3086673	Symbol	sf		3086207						
ANR	3086674	Symbol	_T		3086207						
ANR	3086675	Symbol	IMAGE_FILE_MACHINE_I386		3086207						
ANR	3086676	Symbol	SYMOPT_LOAD_LINES		3086207						
ANR	3086677	Symbol	* pContext		3086207						
ANR	3086678	Symbol	sf . AddrPC . Mode		3086207						
ANR	3086679	Symbol	_SymGetLineFromAddr		3086207						
ANR	3086680	Symbol	sf . AddrStack		3086207						
ANR	3086681	Symbol	_StackWalk		3086207						
ANR	3086682	Symbol	pContext -> Esp		3086207						
ANR	3086683	Symbol	* pSymbol -> Name		3086207						
ANR	3086684	Symbol	pSymbol -> MaxNameLength		3086207						
ANR	3086685	Symbol	false		3086207						
ANR	3086686	Symbol	pContext		3086207						
ANR	3086687	Symbol	pContext -> Ebp		3086207						
ANR	3086688	Symbol	* * pSymbol		3086207						
ANR	3086689	Symbol	symDisplacement		3086207						
ANR	3086690	Symbol	MAX_PATH		3086207						
ANR	3086691	Symbol	& symDisplacement		3086207						
ANR	3086692	Function	ExceptionHandler :: _tprintf	408:0:18219:18594							
ANR	3086693	FunctionDef	ExceptionHandler :: _tprintf (const TCHAR * format)		3086692	0					
ANR	3086694	CompoundStatement		408:66:18285:18594	3086692	0					
ANR	3086695	IdentifierDeclStatement	TCHAR szBuff [ 1024 ] ;	409:4:18291:18309	3086692	0	True				
ANR	3086696	IdentifierDecl	szBuff [ 1024 ]		3086692	0					
ANR	3086697	IdentifierDeclType	TCHAR [ 1024 ]		3086692	0					
ANR	3086698	Identifier	szBuff		3086692	1					
ANR	3086699	PrimaryExpression	1024		3086692	2					
ANR	3086700	IdentifierDeclStatement	int retValue ;	410:1:18316:18328	3086692	1	True				
ANR	3086701	IdentifierDecl	retValue		3086692	0					
ANR	3086702	IdentifierDeclType	int		3086692	0					
ANR	3086703	Identifier	retValue		3086692	1					
ANR	3086704	IdentifierDeclStatement	DWORD cbWritten ;	411:1:18335:18350	3086692	2	True				
ANR	3086705	IdentifierDecl	cbWritten		3086692	0					
ANR	3086706	IdentifierDeclType	DWORD		3086692	0					
ANR	3086707	Identifier	cbWritten		3086692	1					
ANR	3086708	IdentifierDeclStatement	va_list argptr ;	412:1:18357:18371	3086692	3	True				
ANR	3086709	IdentifierDecl	argptr		3086692	0					
ANR	3086710	IdentifierDeclType	va_list		3086692	0					
ANR	3086711	Identifier	argptr		3086692	1					
ANR	3086712	ExpressionStatement	"va_start ( argptr , format )"	414:1:18389:18415	3086692	4	True				
ANR	3086713	CallExpression	"va_start ( argptr , format )"		3086692	0					
ANR	3086714	Callee	va_start		3086692	0					
ANR	3086715	Identifier	va_start		3086692	0					
ANR	3086716	ArgumentList	argptr		3086692	1					
ANR	3086717	Argument	argptr		3086692	0					
ANR	3086718	Identifier	argptr		3086692	0					
ANR	3086719	Argument	format		3086692	1					
ANR	3086720	Identifier	format		3086692	0					
ANR	3086721	ExpressionStatement	"retValue = wvsprintf ( szBuff , format , argptr )"	415:4:18421:18467	3086692	5	True				
ANR	3086722	AssignmentExpression	"retValue = wvsprintf ( szBuff , format , argptr )"		3086692	0		=			
ANR	3086723	Identifier	retValue		3086692	0					
ANR	3086724	CallExpression	"wvsprintf ( szBuff , format , argptr )"		3086692	1					
ANR	3086725	Callee	wvsprintf		3086692	0					
ANR	3086726	Identifier	wvsprintf		3086692	0					
ANR	3086727	ArgumentList	szBuff		3086692	1					
ANR	3086728	Argument	szBuff		3086692	0					
ANR	3086729	Identifier	szBuff		3086692	0					
ANR	3086730	Argument	format		3086692	1					
ANR	3086731	Identifier	format		3086692	0					
ANR	3086732	Argument	argptr		3086692	2					
ANR	3086733	Identifier	argptr		3086692	0					
ANR	3086734	ExpressionStatement	va_end ( argptr )	416:1:18474:18490	3086692	6	True				
ANR	3086735	CallExpression	va_end ( argptr )		3086692	0					
ANR	3086736	Callee	va_end		3086692	0					
ANR	3086737	Identifier	va_end		3086692	0					
ANR	3086738	ArgumentList	argptr		3086692	1					
ANR	3086739	Argument	argptr		3086692	0					
ANR	3086740	Identifier	argptr		3086692	0					
ANR	3086741	ExpressionStatement	"WriteFile ( m_hReportFile , szBuff , retValue * sizeof ( TCHAR ) , & cbWritten , 0 )"	417:4:18496:18571	3086692	7	True				
ANR	3086742	CallExpression	"WriteFile ( m_hReportFile , szBuff , retValue * sizeof ( TCHAR ) , & cbWritten , 0 )"		3086692	0					
ANR	3086743	Callee	WriteFile		3086692	0					
ANR	3086744	Identifier	WriteFile		3086692	0					
ANR	3086745	ArgumentList	m_hReportFile		3086692	1					
ANR	3086746	Argument	m_hReportFile		3086692	0					
ANR	3086747	Identifier	m_hReportFile		3086692	0					
ANR	3086748	Argument	szBuff		3086692	1					
ANR	3086749	Identifier	szBuff		3086692	0					
ANR	3086750	Argument	retValue * sizeof ( TCHAR )		3086692	2					
ANR	3086751	MultiplicativeExpression	retValue * sizeof ( TCHAR )		3086692	0		*			
ANR	3086752	Identifier	retValue		3086692	0					
ANR	3086753	SizeofExpression	sizeof ( TCHAR )		3086692	1					
ANR	3086754	Sizeof	sizeof		3086692	0					
ANR	3086755	SizeofOperand	TCHAR		3086692	1					
ANR	3086756	Argument	& cbWritten		3086692	3					
ANR	3086757	UnaryOperationExpression	& cbWritten		3086692	0					
ANR	3086758	UnaryOperator	&		3086692	0					
ANR	3086759	Identifier	cbWritten		3086692	1					
ANR	3086760	Argument	0		3086692	4					
ANR	3086761	PrimaryExpression	0		3086692	0					
ANR	3086762	ReturnStatement	return retValue ;	418:4:18577:18592	3086692	8	True				
ANR	3086763	Identifier	retValue		3086692	0					
ANR	3086764	ReturnType	int __cdecl		3086692	1					
ANR	3086765	Identifier	ExceptionHandler :: _tprintf		3086692	2					
ANR	3086766	ParameterList	const TCHAR * format		3086692	3					
ANR	3086767	Parameter	const TCHAR * format	408:39:18258:18277	3086692	0	True				
ANR	3086768	ParameterType	const TCHAR *		3086692	0					
ANR	3086769	Identifier	format		3086692	1					
ANR	3086770	CFGEntryNode	ENTRY		3086692		True				
ANR	3086771	CFGExitNode	EXIT		3086692		True				
ANR	3086772	Symbol	wvsprintf		3086692						
ANR	3086773	Symbol	& cbWritten		3086692						
ANR	3086774	Symbol	argptr		3086692						
ANR	3086775	Symbol	cbWritten		3086692						
ANR	3086776	Symbol	retValue		3086692						
ANR	3086777	Symbol	format		3086692						
ANR	3086778	Symbol	szBuff		3086692						
ANR	3086779	Symbol	m_hReportFile		3086692						
ANR	3086780	Function	ExceptionHandler :: InitImagehlpFunctions	423:0:18824:20426							
ANR	3086781	FunctionDef	ExceptionHandler :: InitImagehlpFunctions ()		3086780	0					
ANR	3086782	CompoundStatement		423:53:18877:20426	3086780	0					
ANR	3086783	IdentifierDeclStatement	"HMODULE hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) ) ;"	424:4:18883:18939	3086780	0	True				
ANR	3086784	IdentifierDecl	"hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		3086780	0					
ANR	3086785	IdentifierDeclType	HMODULE		3086780	0					
ANR	3086786	Identifier	hModImagehlp		3086780	1					
ANR	3086787	AssignmentExpression	"hModImagehlp = LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		3086780	2		=			
ANR	3086788	Identifier	hModImagehlp		3086780	0					
ANR	3086789	CallExpression	"LoadLibrary ( _T ( ""IMAGEHLP.DLL"" ) )"		3086780	1					
ANR	3086790	Callee	LoadLibrary		3086780	0					
ANR	3086791	Identifier	LoadLibrary		3086780	0					
ANR	3086792	ArgumentList	"_T ( ""IMAGEHLP.DLL"" )"		3086780	1					
ANR	3086793	Argument	"_T ( ""IMAGEHLP.DLL"" )"		3086780	0					
ANR	3086794	CallExpression	"_T ( ""IMAGEHLP.DLL"" )"		3086780	0					
ANR	3086795	Callee	_T		3086780	0					
ANR	3086796	Identifier	_T		3086780	0					
ANR	3086797	ArgumentList	"""IMAGEHLP.DLL"""		3086780	1					
ANR	3086798	Argument	"""IMAGEHLP.DLL"""		3086780	0					
ANR	3086799	PrimaryExpression	"""IMAGEHLP.DLL"""		3086780	0					
ANR	3086800	IfStatement	if ( ! hModImagehlp )		3086780	1					
ANR	3086801	Condition	! hModImagehlp	425:9:18950:18962	3086780	0	True				
ANR	3086802	UnaryOperationExpression	! hModImagehlp		3086780	0					
ANR	3086803	UnaryOperator	!		3086780	0					
ANR	3086804	Identifier	hModImagehlp		3086780	1					
ANR	3086805	ReturnStatement	return FALSE ;	426:2:18976:18988	3086780	1	True				
ANR	3086806	Identifier	FALSE		3086780	0					
ANR	3086807	ExpressionStatement	"_SymInitialize = ( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"	427:4:18994:19133	3086780	2	True				
ANR	3086808	AssignmentExpression	"_SymInitialize = ( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		3086780	0		=			
ANR	3086809	Identifier	_SymInitialize		3086780	0					
ANR	3086810	CastExpression	"( SYMINITIALIZEPROC ) GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		3086780	1					
ANR	3086811	CastTarget	SYMINITIALIZEPROC		3086780	0					
ANR	3086812	CallExpression	"GetProcAddress ( hModImagehlp , ""SymInitialize"" )"		3086780	1					
ANR	3086813	Callee	GetProcAddress		3086780	0					
ANR	3086814	Identifier	GetProcAddress		3086780	0					
ANR	3086815	ArgumentList	hModImagehlp		3086780	1					
ANR	3086816	Argument	hModImagehlp		3086780	0					
ANR	3086817	Identifier	hModImagehlp		3086780	0					
ANR	3086818	Argument	"""SymInitialize"""		3086780	1					
ANR	3086819	PrimaryExpression	"""SymInitialize"""		3086780	0					
ANR	3086820	IfStatement	if ( ! _SymInitialize )		3086780	3					
ANR	3086821	Condition	! _SymInitialize	429:9:19144:19158	3086780	0	True				
ANR	3086822	UnaryOperationExpression	! _SymInitialize		3086780	0					
ANR	3086823	UnaryOperator	!		3086780	0					
ANR	3086824	Identifier	_SymInitialize		3086780	1					
ANR	3086825	ReturnStatement	return FALSE ;	430:2:19172:19184	3086780	1	True				
ANR	3086826	Identifier	FALSE		3086780	0					
ANR	3086827	ExpressionStatement	"_SymCleanup = ( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"	431:4:19190:19264	3086780	4	True				
ANR	3086828	AssignmentExpression	"_SymCleanup = ( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		3086780	0		=			
ANR	3086829	Identifier	_SymCleanup		3086780	0					
ANR	3086830	CastExpression	"( SYMCLEANUPPROC ) GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		3086780	1					
ANR	3086831	CastTarget	SYMCLEANUPPROC		3086780	0					
ANR	3086832	CallExpression	"GetProcAddress ( hModImagehlp , ""SymCleanup"" )"		3086780	1					
ANR	3086833	Callee	GetProcAddress		3086780	0					
ANR	3086834	Identifier	GetProcAddress		3086780	0					
ANR	3086835	ArgumentList	hModImagehlp		3086780	1					
ANR	3086836	Argument	hModImagehlp		3086780	0					
ANR	3086837	Identifier	hModImagehlp		3086780	0					
ANR	3086838	Argument	"""SymCleanup"""		3086780	1					
ANR	3086839	PrimaryExpression	"""SymCleanup"""		3086780	0					
ANR	3086840	IfStatement	if ( ! _SymCleanup )		3086780	5					
ANR	3086841	Condition	! _SymCleanup	432:9:19275:19286	3086780	0	True				
ANR	3086842	UnaryOperationExpression	! _SymCleanup		3086780	0					
ANR	3086843	UnaryOperator	!		3086780	0					
ANR	3086844	Identifier	_SymCleanup		3086780	1					
ANR	3086845	ReturnStatement	return FALSE ;	433:2:19292:19304	3086780	1	True				
ANR	3086846	Identifier	FALSE		3086780	0					
ANR	3086847	ExpressionStatement	"_StackWalk = ( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"	434:4:19310:19381	3086780	6	True				
ANR	3086848	AssignmentExpression	"_StackWalk = ( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"		3086780	0		=			
ANR	3086849	Identifier	_StackWalk		3086780	0					
ANR	3086850	CastExpression	"( STACKWALKPROC ) GetProcAddress ( hModImagehlp , ""StackWalk"" )"		3086780	1					
ANR	3086851	CastTarget	STACKWALKPROC		3086780	0					
ANR	3086852	CallExpression	"GetProcAddress ( hModImagehlp , ""StackWalk"" )"		3086780	1					
ANR	3086853	Callee	GetProcAddress		3086780	0					
ANR	3086854	Identifier	GetProcAddress		3086780	0					
ANR	3086855	ArgumentList	hModImagehlp		3086780	1					
ANR	3086856	Argument	hModImagehlp		3086780	0					
ANR	3086857	Identifier	hModImagehlp		3086780	0					
ANR	3086858	Argument	"""StackWalk"""		3086780	1					
ANR	3086859	PrimaryExpression	"""StackWalk"""		3086780	0					
ANR	3086860	IfStatement	if ( ! _StackWalk )		3086780	7					
ANR	3086861	Condition	! _StackWalk	435:9:19392:19402	3086780	0	True				
ANR	3086862	UnaryOperationExpression	! _StackWalk		3086780	0					
ANR	3086863	UnaryOperator	!		3086780	0					
ANR	3086864	Identifier	_StackWalk		3086780	1					
ANR	3086865	ReturnStatement	return FALSE ;	436:2:19408:19420	3086780	1	True				
ANR	3086866	Identifier	FALSE		3086780	0					
ANR	3086867	ExpressionStatement	"_SymFunctionTableAccess = ( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"	437:4:19426:19561	3086780	8	True				
ANR	3086868	AssignmentExpression	"_SymFunctionTableAccess = ( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		3086780	0		=			
ANR	3086869	Identifier	_SymFunctionTableAccess		3086780	0					
ANR	3086870	CastExpression	"( SYMFUNCTIONTABLEACCESSPROC ) GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		3086780	1					
ANR	3086871	CastTarget	SYMFUNCTIONTABLEACCESSPROC		3086780	0					
ANR	3086872	CallExpression	"GetProcAddress ( hModImagehlp , ""SymFunctionTableAccess"" )"		3086780	1					
ANR	3086873	Callee	GetProcAddress		3086780	0					
ANR	3086874	Identifier	GetProcAddress		3086780	0					
ANR	3086875	ArgumentList	hModImagehlp		3086780	1					
ANR	3086876	Argument	hModImagehlp		3086780	0					
ANR	3086877	Identifier	hModImagehlp		3086780	0					
ANR	3086878	Argument	"""SymFunctionTableAccess"""		3086780	1					
ANR	3086879	PrimaryExpression	"""SymFunctionTableAccess"""		3086780	0					
ANR	3086880	IfStatement	if ( ! _SymFunctionTableAccess )		3086780	9					
ANR	3086881	Condition	! _SymFunctionTableAccess	439:9:19572:19595	3086780	0	True				
ANR	3086882	UnaryOperationExpression	! _SymFunctionTableAccess		3086780	0					
ANR	3086883	UnaryOperator	!		3086780	0					
ANR	3086884	Identifier	_SymFunctionTableAccess		3086780	1					
ANR	3086885	ReturnStatement	return FALSE ;	440:2:19601:19613	3086780	1	True				
ANR	3086886	Identifier	FALSE		3086780	0					
ANR	3086887	ExpressionStatement	"_SymGetModuleBase = ( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"	441:4:19619:19768	3086780	10	True				
ANR	3086888	AssignmentExpression	"_SymGetModuleBase = ( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		3086780	0		=			
ANR	3086889	Identifier	_SymGetModuleBase		3086780	0					
ANR	3086890	CastExpression	"( SYMGETMODULEBASEPROC ) GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		3086780	1					
ANR	3086891	CastTarget	SYMGETMODULEBASEPROC		3086780	0					
ANR	3086892	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetModuleBase"" )"		3086780	1					
ANR	3086893	Callee	GetProcAddress		3086780	0					
ANR	3086894	Identifier	GetProcAddress		3086780	0					
ANR	3086895	ArgumentList	hModImagehlp		3086780	1					
ANR	3086896	Argument	hModImagehlp		3086780	0					
ANR	3086897	Identifier	hModImagehlp		3086780	0					
ANR	3086898	Argument	"""SymGetModuleBase"""		3086780	1					
ANR	3086899	PrimaryExpression	"""SymGetModuleBase"""		3086780	0					
ANR	3086900	IfStatement	if ( ! _SymGetModuleBase )		3086780	11					
ANR	3086901	Condition	! _SymGetModuleBase	443:9:19779:19796	3086780	0	True				
ANR	3086902	UnaryOperationExpression	! _SymGetModuleBase		3086780	0					
ANR	3086903	UnaryOperator	!		3086780	0					
ANR	3086904	Identifier	_SymGetModuleBase		3086780	1					
ANR	3086905	ReturnStatement	return FALSE ;	444:2:19802:19814	3086780	1	True				
ANR	3086906	Identifier	FALSE		3086780	0					
ANR	3086907	ExpressionStatement	"_SymGetSymFromAddr = ( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"	445:4:19820:19973	3086780	12	True				
ANR	3086908	AssignmentExpression	"_SymGetSymFromAddr = ( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		3086780	0		=			
ANR	3086909	Identifier	_SymGetSymFromAddr		3086780	0					
ANR	3086910	CastExpression	"( SYMGETSYMFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		3086780	1					
ANR	3086911	CastTarget	SYMGETSYMFROMADDRPROC		3086780	0					
ANR	3086912	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetSymFromAddr"" )"		3086780	1					
ANR	3086913	Callee	GetProcAddress		3086780	0					
ANR	3086914	Identifier	GetProcAddress		3086780	0					
ANR	3086915	ArgumentList	hModImagehlp		3086780	1					
ANR	3086916	Argument	hModImagehlp		3086780	0					
ANR	3086917	Identifier	hModImagehlp		3086780	0					
ANR	3086918	Argument	"""SymGetSymFromAddr"""		3086780	1					
ANR	3086919	PrimaryExpression	"""SymGetSymFromAddr"""		3086780	0					
ANR	3086920	IfStatement	if ( ! _SymGetSymFromAddr )		3086780	13					
ANR	3086921	Condition	! _SymGetSymFromAddr	447:9:19984:20002	3086780	0	True				
ANR	3086922	UnaryOperationExpression	! _SymGetSymFromAddr		3086780	0					
ANR	3086923	UnaryOperator	!		3086780	0					
ANR	3086924	Identifier	_SymGetSymFromAddr		3086780	1					
ANR	3086925	ReturnStatement	return FALSE ;	448:2:20013:20025	3086780	1	True				
ANR	3086926	Identifier	FALSE		3086780	0					
ANR	3086927	ExpressionStatement	"_SymGetLineFromAddr = ( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"	453:1:20214:20326	3086780	14	True				
ANR	3086928	AssignmentExpression	"_SymGetLineFromAddr = ( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		3086780	0		=			
ANR	3086929	Identifier	_SymGetLineFromAddr		3086780	0					
ANR	3086930	CastExpression	"( SYMGETLINEFROMADDRPROC ) GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		3086780	1					
ANR	3086931	CastTarget	SYMGETLINEFROMADDRPROC		3086780	0					
ANR	3086932	CallExpression	"GetProcAddress ( hModImagehlp , ""SymGetLineFromAddr"" )"		3086780	1					
ANR	3086933	Callee	GetProcAddress		3086780	0					
ANR	3086934	Identifier	GetProcAddress		3086780	0					
ANR	3086935	ArgumentList	hModImagehlp		3086780	1					
ANR	3086936	Argument	hModImagehlp		3086780	0					
ANR	3086937	Identifier	hModImagehlp		3086780	0					
ANR	3086938	Argument	"""SymGetLineFromAddr"""		3086780	1					
ANR	3086939	PrimaryExpression	"""SymGetLineFromAddr"""		3086780	0					
ANR	3086940	IfStatement	"if ( ! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE ) )"		3086780	15					
ANR	3086941	Condition	"! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"	456:9:20338:20387	3086780	0	True				
ANR	3086942	UnaryOperationExpression	"! _SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"		3086780	0					
ANR	3086943	UnaryOperator	!		3086780	0					
ANR	3086944	CallExpression	"_SymInitialize ( GetCurrentProcess ( ) , NULL , TRUE )"		3086780	1					
ANR	3086945	Callee	_SymInitialize		3086780	0					
ANR	3086946	Identifier	_SymInitialize		3086780	0					
ANR	3086947	ArgumentList	GetCurrentProcess ( )		3086780	1					
ANR	3086948	Argument	GetCurrentProcess ( )		3086780	0					
ANR	3086949	CallExpression	GetCurrentProcess ( )		3086780	0					
ANR	3086950	Callee	GetCurrentProcess		3086780	0					
ANR	3086951	Identifier	GetCurrentProcess		3086780	0					
ANR	3086952	ArgumentList			3086780	1					
ANR	3086953	Argument	NULL		3086780	1					
ANR	3086954	Identifier	NULL		3086780	0					
ANR	3086955	Argument	TRUE		3086780	2					
ANR	3086956	Identifier	TRUE		3086780	0					
ANR	3086957	ReturnStatement	return FALSE ;	457:2:20393:20405	3086780	1	True				
ANR	3086958	Identifier	FALSE		3086780	0					
ANR	3086959	ReturnStatement	return TRUE ;	459:4:20412:20423	3086780	16	True				
ANR	3086960	Identifier	TRUE		3086780	0					
ANR	3086961	ReturnType	BOOL		3086780	1					
ANR	3086962	Identifier	ExceptionHandler :: InitImagehlpFunctions		3086780	2					
ANR	3086963	ParameterList			3086780	3					
ANR	3086964	CFGEntryNode	ENTRY		3086780		True				
ANR	3086965	CFGExitNode	EXIT		3086780		True				
ANR	3086966	Symbol	_StackWalk		3086780						
ANR	3086967	Symbol	NULL		3086780						
ANR	3086968	Symbol	_SymInitialize		3086780						
ANR	3086969	Symbol	_SymFunctionTableAccess		3086780						
ANR	3086970	Symbol	TRUE		3086780						
ANR	3086971	Symbol	GetCurrentProcess		3086780						
ANR	3086972	Symbol	_SymCleanup		3086780						
ANR	3086973	Symbol	hModImagehlp		3086780						
ANR	3086974	Symbol	LoadLibrary		3086780						
ANR	3086975	Symbol	_T		3086780						
ANR	3086976	Symbol	GetProcAddress		3086780						
ANR	3086977	Symbol	_SymGetModuleBase		3086780						
ANR	3086978	Symbol	FALSE		3086780						
ANR	3086979	Symbol	_SymGetSymFromAddr		3086780						
ANR	3086980	Symbol	_SymGetLineFromAddr		3086780						
