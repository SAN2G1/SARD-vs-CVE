command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5504785	File	data/converged/CVE-2011-4930_htcondor/unit_tests.cpp								
ANR	5504786	DeclStmt									
ANR	5504787	Decl							Emitter	Emitter	e
ANR	5504788	DeclStmt									
ANR	5504789	Decl							void	void ( void )	print_usage
ANR	5504790	DeclStmt									
ANR	5504791	Decl							bool	bool ( void )	FTEST_host_in_domain
ANR	5504792	DeclStmt									
ANR	5504793	Decl							bool	bool ( void )	FTEST_getHostFromAddr
ANR	5504794	DeclStmt									
ANR	5504795	Decl							bool	bool ( void )	FTEST_getPortFromAddr
ANR	5504796	DeclStmt									
ANR	5504797	Decl							bool	bool ( void )	FTEST_is_ipaddr
ANR	5504798	DeclStmt									
ANR	5504799	Decl							bool	bool ( void )	FTEST_is_valid_sinful
ANR	5504800	DeclStmt									
ANR	5504801	Decl							bool	bool ( void )	FTEST_is_valid_network
ANR	5504802	DeclStmt									
ANR	5504803	Decl							bool	bool ( void )	FTEST_sin_to_string
ANR	5504804	DeclStmt									
ANR	5504805	Decl							bool	bool ( void )	FTEST_string_to_ip
ANR	5504806	DeclStmt									
ANR	5504807	Decl							bool	bool ( void )	FTEST_string_to_sin
ANR	5504808	DeclStmt									
ANR	5504809	Decl							bool	bool ( void )	FTEST_string_to_port
ANR	5504810	DeclStmt									
ANR	5504811	Decl							bool	bool ( void )	FTEST_strupr
ANR	5504812	DeclStmt									
ANR	5504813	Decl							bool	bool ( void )	FTEST_strlwr
ANR	5504814	DeclStmt									
ANR	5504815	Decl							bool	bool ( void )	FTEST_basename
ANR	5504816	DeclStmt									
ANR	5504817	Decl							bool	bool ( void )	FTEST_dirname
ANR	5504818	DeclStmt									
ANR	5504819	Decl							bool	bool ( void )	FTEST_fullpath
ANR	5504820	DeclStmt									
ANR	5504821	Decl							bool	bool ( void )	FTEST_flatten_and_inline
ANR	5504822	DeclStmt									
ANR	5504823	Decl							bool	bool ( void )	FTEST_stl_string_utils
ANR	5504824	DeclStmt									
ANR	5504825	Decl							bool	bool ( void )	OTEST_HashTable
ANR	5504826	DeclStmt									
ANR	5504827	Decl							bool	bool ( void )	OTEST_MyString
ANR	5504828	DeclStmt									
ANR	5504829	Decl							bool	bool ( void )	OTEST_StringList
ANR	5504830	DeclStmt									
ANR	5504831	Decl							bool	bool ( void )	OTEST_Old_Classads
ANR	5504832	DeclStmt									
ANR	5504833	Decl							bool	bool ( void )	OTEST_Env
ANR	5504834	DeclStmt									
ANR	5504835	Decl							bool	bool ( void )	OTEST_FileLock
ANR	5504836	DeclStmt									
ANR	5504837	Decl							bool	bool ( void )	OTEST_ArgList
ANR	5504838	DeclStmt									
ANR	5504839	Decl							bool	bool ( void )	OTEST_Iso_Dates
ANR	5504840	DeclStmt									
ANR	5504841	Decl							bool	bool ( void )	OTEST_UserPolicy
ANR	5504842	DeclStmt									
ANR	5504843	Decl							bool	bool ( void )	OTEST_Directory
ANR	5504844	DeclStmt									
ANR	5504845	Decl							bool	bool ( void )	OTEST_TmpDir
ANR	5504846	DeclStmt									
ANR	5504847	Decl							bool	bool ( void )	OTEST_StatInfo
ANR	5504848	ClassDef	<unnamed>	69:13:2105:2963							
ANR	5504849	DeclStmt									
ANR	5504850	Decl							const char	const char *	name
ANR	5504851	DeclStmt									
ANR	5504852	Decl							test_func_ptr	test_func_ptr	func
ANR	5504853	DeclStmt									
ANR	5504854	Decl								 [ ]	function_map
ANR	5504855	DeclStmt									
ANR	5504856	Decl							int	int	function_map_num_elems
ANR	5504857	Function	main	106:0:3043:6672							
ANR	5504858	FunctionDef	"main (int argc , char * argv [ ])"		5504857	0					
ANR	5504859	CompoundStatement		106:33:3076:6672	5504857	0					
ANR	5504860	IdentifierDeclStatement	"int num_tests = INT_MAX , num_funcs_or_objs = INT_MAX ;"	108:1:3081:3133	5504857	0	True				
ANR	5504861	IdentifierDecl	num_tests = INT_MAX		5504857	0					
ANR	5504862	IdentifierDeclType	int		5504857	0					
ANR	5504863	Identifier	num_tests		5504857	1					
ANR	5504864	AssignmentExpression	num_tests = INT_MAX		5504857	2		=			
ANR	5504865	Identifier	INT_MAX		5504857	0					
ANR	5504866	Identifier	INT_MAX		5504857	1					
ANR	5504867	IdentifierDecl	num_funcs_or_objs = INT_MAX		5504857	1					
ANR	5504868	IdentifierDeclType	int		5504857	0					
ANR	5504869	Identifier	num_funcs_or_objs		5504857	1					
ANR	5504870	AssignmentExpression	num_funcs_or_objs = INT_MAX		5504857	2		=			
ANR	5504871	Identifier	INT_MAX		5504857	0					
ANR	5504872	Identifier	INT_MAX		5504857	1					
ANR	5504873	IdentifierDeclStatement	"bool only_functions = false , only_objects = false , failures_printed = true , successes_printed = true ;"	109:1:3136:3239	5504857	1	True				
ANR	5504874	IdentifierDecl	only_functions = false		5504857	0					
ANR	5504875	IdentifierDeclType	bool		5504857	0					
ANR	5504876	Identifier	only_functions		5504857	1					
ANR	5504877	AssignmentExpression	only_functions = false		5504857	2		=			
ANR	5504878	Identifier	false		5504857	0					
ANR	5504879	Identifier	false		5504857	1					
ANR	5504880	IdentifierDecl	only_objects = false		5504857	1					
ANR	5504881	IdentifierDeclType	bool		5504857	0					
ANR	5504882	Identifier	only_objects		5504857	1					
ANR	5504883	AssignmentExpression	only_objects = false		5504857	2		=			
ANR	5504884	Identifier	false		5504857	0					
ANR	5504885	Identifier	false		5504857	1					
ANR	5504886	IdentifierDecl	failures_printed = true		5504857	2					
ANR	5504887	IdentifierDeclType	bool		5504857	0					
ANR	5504888	Identifier	failures_printed		5504857	1					
ANR	5504889	AssignmentExpression	failures_printed = true		5504857	2		=			
ANR	5504890	Identifier	true		5504857	0					
ANR	5504891	Identifier	true		5504857	1					
ANR	5504892	IdentifierDecl	successes_printed = true		5504857	3					
ANR	5504893	IdentifierDeclType	bool		5504857	0					
ANR	5504894	Identifier	successes_printed		5504857	1					
ANR	5504895	AssignmentExpression	successes_printed = true		5504857	2		=			
ANR	5504896	Identifier	true		5504857	0					
ANR	5504897	Identifier	true		5504857	1					
ANR	5504898	IdentifierDeclStatement	"StringList tests_to_run ( """" ) ;"	111:1:3242:3269	5504857	2	True				
ANR	5504899	IdentifierDecl	"tests_to_run ( """" )"		5504857	0					
ANR	5504900	IdentifierDeclType	StringList		5504857	0					
ANR	5504901	Identifier	tests_to_run		5504857	1					
ANR	5504902	PrimaryExpression	""""""		5504857	2					
ANR	5504903	IfStatement	if ( argc >= 2 )		5504857	3					
ANR	5504904	Condition	argc >= 2	114:4:3297:3305	5504857	0	True				
ANR	5504905	RelationalExpression	argc >= 2		5504857	0		>=			
ANR	5504906	Identifier	argc		5504857	0					
ANR	5504907	PrimaryExpression	2		5504857	1					
ANR	5504908	CompoundStatement		10:2:235:244	5504857	1					
ANR	5504909	IdentifierDeclStatement	int i = 1 ;	115:2:3312:3321	5504857	0	True				
ANR	5504910	IdentifierDecl	i = 1		5504857	0					
ANR	5504911	IdentifierDeclType	int		5504857	0					
ANR	5504912	Identifier	i		5504857	1					
ANR	5504913	AssignmentExpression	i = 1		5504857	2		=			
ANR	5504914	Identifier	i		5504857	0					
ANR	5504915	PrimaryExpression	1		5504857	1					
ANR	5504916	WhileStatement	while ( i < argc )		5504857	1					
ANR	5504917	Condition	i < argc	116:8:3331:3338	5504857	0	True				
ANR	5504918	RelationalExpression	i < argc		5504857	0		<			
ANR	5504919	Identifier	i		5504857	0					
ANR	5504920	Identifier	argc		5504857	1					
ANR	5504921	CompoundStatement		11:18:264:264	5504857	1					
ANR	5504922	IfStatement	"if ( strcmp ( argv [ i ] , ""-n"" ) == MATCH )"		5504857	0					
ANR	5504923	Condition	"strcmp ( argv [ i ] , ""-n"" ) == MATCH"	117:6:3349:3378	5504857	0	True				
ANR	5504924	EqualityExpression	"strcmp ( argv [ i ] , ""-n"" ) == MATCH"		5504857	0		==			
ANR	5504925	CallExpression	"strcmp ( argv [ i ] , ""-n"" )"		5504857	0					
ANR	5504926	Callee	strcmp		5504857	0					
ANR	5504927	Identifier	strcmp		5504857	0					
ANR	5504928	ArgumentList	argv [ i ]		5504857	1					
ANR	5504929	Argument	argv [ i ]		5504857	0					
ANR	5504930	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5504931	Identifier	argv		5504857	0					
ANR	5504932	Identifier	i		5504857	1					
ANR	5504933	Argument	"""-n"""		5504857	1					
ANR	5504934	PrimaryExpression	"""-n"""		5504857	0					
ANR	5504935	Identifier	MATCH		5504857	1					
ANR	5504936	CompoundStatement		12:38:304:304	5504857	1					
ANR	5504937	IfStatement	if ( i >= argc - 1 )		5504857	0					
ANR	5504938	Condition	i >= argc - 1	118:7:3390:3402	5504857	0	True				
ANR	5504939	RelationalExpression	i >= argc - 1		5504857	0		>=			
ANR	5504940	Identifier	i		5504857	0					
ANR	5504941	AdditiveExpression	argc - 1		5504857	1		-			
ANR	5504942	Identifier	argc		5504857	0					
ANR	5504943	PrimaryExpression	1		5504857	1					
ANR	5504944	CompoundStatement		13:22:328:328	5504857	1					
ANR	5504945	ExpressionStatement	"printf ( ""Missing additional argument for '%s'.\\n"" , argv [ i ] )"	119:5:3412:3470	5504857	0	True				
ANR	5504946	CallExpression	"printf ( ""Missing additional argument for '%s'.\\n"" , argv [ i ] )"		5504857	0					
ANR	5504947	Callee	printf		5504857	0					
ANR	5504948	Identifier	printf		5504857	0					
ANR	5504949	ArgumentList	"""Missing additional argument for '%s'.\\n"""		5504857	1					
ANR	5504950	Argument	"""Missing additional argument for '%s'.\\n"""		5504857	0					
ANR	5504951	PrimaryExpression	"""Missing additional argument for '%s'.\\n"""		5504857	0					
ANR	5504952	Argument	argv [ i ]		5504857	1					
ANR	5504953	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5504954	Identifier	argv		5504857	0					
ANR	5504955	Identifier	i		5504857	1					
ANR	5504956	ExpressionStatement	print_usage ( )	120:5:3477:3490	5504857	1	True				
ANR	5504957	CallExpression	print_usage ( )		5504857	0					
ANR	5504958	Callee	print_usage		5504857	0					
ANR	5504959	Identifier	print_usage		5504857	0					
ANR	5504960	ArgumentList			5504857	1					
ANR	5504961	ReturnStatement	return EXIT_FAILURE ;	121:5:3497:3516	5504857	2	True				
ANR	5504962	Identifier	EXIT_FAILURE		5504857	0					
ANR	5504963	ExpressionStatement	num_tests = atoi ( argv [ i + 1 ] )	123:4:3528:3555	5504857	1	True				
ANR	5504964	AssignmentExpression	num_tests = atoi ( argv [ i + 1 ] )		5504857	0		=			
ANR	5504965	Identifier	num_tests		5504857	0					
ANR	5504966	CallExpression	atoi ( argv [ i + 1 ] )		5504857	1					
ANR	5504967	Callee	atoi		5504857	0					
ANR	5504968	Identifier	atoi		5504857	0					
ANR	5504969	ArgumentList	argv [ i + 1 ]		5504857	1					
ANR	5504970	Argument	argv [ i + 1 ]		5504857	0					
ANR	5504971	ArrayIndexing	argv [ i + 1 ]		5504857	0					
ANR	5504972	Identifier	argv		5504857	0					
ANR	5504973	AdditiveExpression	i + 1		5504857	1		+			
ANR	5504974	Identifier	i		5504857	0					
ANR	5504975	PrimaryExpression	1		5504857	1					
ANR	5504976	ExpressionStatement	i ++	124:4:3561:3564	5504857	2	True				
ANR	5504977	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5504978	Identifier	i		5504857	0					
ANR	5504979	IncDec	++		5504857	1					
ANR	5504980	ElseStatement	else		5504857	0					
ANR	5504981	IfStatement	"if ( strcmp ( argv [ i ] , ""-N"" ) == MATCH )"		5504857	0					
ANR	5504982	Condition	"strcmp ( argv [ i ] , ""-N"" ) == MATCH"	126:11:3582:3611	5504857	0	True				
ANR	5504983	EqualityExpression	"strcmp ( argv [ i ] , ""-N"" ) == MATCH"		5504857	0		==			
ANR	5504984	CallExpression	"strcmp ( argv [ i ] , ""-N"" )"		5504857	0					
ANR	5504985	Callee	strcmp		5504857	0					
ANR	5504986	Identifier	strcmp		5504857	0					
ANR	5504987	ArgumentList	argv [ i ]		5504857	1					
ANR	5504988	Argument	argv [ i ]		5504857	0					
ANR	5504989	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5504990	Identifier	argv		5504857	0					
ANR	5504991	Identifier	i		5504857	1					
ANR	5504992	Argument	"""-N"""		5504857	1					
ANR	5504993	PrimaryExpression	"""-N"""		5504857	0					
ANR	5504994	Identifier	MATCH		5504857	1					
ANR	5504995	CompoundStatement		21:43:537:537	5504857	1					
ANR	5504996	IfStatement	if ( i >= argc - 1 )		5504857	0					
ANR	5504997	Condition	i >= argc - 1	127:7:3623:3635	5504857	0	True				
ANR	5504998	RelationalExpression	i >= argc - 1		5504857	0		>=			
ANR	5504999	Identifier	i		5504857	0					
ANR	5505000	AdditiveExpression	argc - 1		5504857	1		-			
ANR	5505001	Identifier	argc		5504857	0					
ANR	5505002	PrimaryExpression	1		5504857	1					
ANR	5505003	CompoundStatement		22:22:561:561	5504857	1					
ANR	5505004	ExpressionStatement	"printf ( ""Missing additional argument for '%s'.\\n"" , argv [ i ] )"	128:5:3645:3703	5504857	0	True				
ANR	5505005	CallExpression	"printf ( ""Missing additional argument for '%s'.\\n"" , argv [ i ] )"		5504857	0					
ANR	5505006	Callee	printf		5504857	0					
ANR	5505007	Identifier	printf		5504857	0					
ANR	5505008	ArgumentList	"""Missing additional argument for '%s'.\\n"""		5504857	1					
ANR	5505009	Argument	"""Missing additional argument for '%s'.\\n"""		5504857	0					
ANR	5505010	PrimaryExpression	"""Missing additional argument for '%s'.\\n"""		5504857	0					
ANR	5505011	Argument	argv [ i ]		5504857	1					
ANR	5505012	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505013	Identifier	argv		5504857	0					
ANR	5505014	Identifier	i		5504857	1					
ANR	5505015	ExpressionStatement	print_usage ( )	129:5:3710:3723	5504857	1	True				
ANR	5505016	CallExpression	print_usage ( )		5504857	0					
ANR	5505017	Callee	print_usage		5504857	0					
ANR	5505018	Identifier	print_usage		5504857	0					
ANR	5505019	ArgumentList			5504857	1					
ANR	5505020	ReturnStatement	return EXIT_FAILURE ;	130:5:3730:3749	5504857	2	True				
ANR	5505021	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505022	ExpressionStatement	num_funcs_or_objs = atoi ( argv [ i + 1 ] )	132:4:3761:3796	5504857	1	True				
ANR	5505023	AssignmentExpression	num_funcs_or_objs = atoi ( argv [ i + 1 ] )		5504857	0		=			
ANR	5505024	Identifier	num_funcs_or_objs		5504857	0					
ANR	5505025	CallExpression	atoi ( argv [ i + 1 ] )		5504857	1					
ANR	5505026	Callee	atoi		5504857	0					
ANR	5505027	Identifier	atoi		5504857	0					
ANR	5505028	ArgumentList	argv [ i + 1 ]		5504857	1					
ANR	5505029	Argument	argv [ i + 1 ]		5504857	0					
ANR	5505030	ArrayIndexing	argv [ i + 1 ]		5504857	0					
ANR	5505031	Identifier	argv		5504857	0					
ANR	5505032	AdditiveExpression	i + 1		5504857	1		+			
ANR	5505033	Identifier	i		5504857	0					
ANR	5505034	PrimaryExpression	1		5504857	1					
ANR	5505035	ExpressionStatement	i ++	133:4:3802:3805	5504857	2	True				
ANR	5505036	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5505037	Identifier	i		5504857	0					
ANR	5505038	IncDec	++		5504857	1					
ANR	5505039	ElseStatement	else		5504857	0					
ANR	5505040	IfStatement	"if ( strcmp ( argv [ i ] , ""-F"" ) == MATCH )"		5504857	0					
ANR	5505041	Condition	"strcmp ( argv [ i ] , ""-F"" ) == MATCH"	135:11:3823:3852	5504857	0	True				
ANR	5505042	EqualityExpression	"strcmp ( argv [ i ] , ""-F"" ) == MATCH"		5504857	0		==			
ANR	5505043	CallExpression	"strcmp ( argv [ i ] , ""-F"" )"		5504857	0					
ANR	5505044	Callee	strcmp		5504857	0					
ANR	5505045	Identifier	strcmp		5504857	0					
ANR	5505046	ArgumentList	argv [ i ]		5504857	1					
ANR	5505047	Argument	argv [ i ]		5504857	0					
ANR	5505048	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505049	Identifier	argv		5504857	0					
ANR	5505050	Identifier	i		5504857	1					
ANR	5505051	Argument	"""-F"""		5504857	1					
ANR	5505052	PrimaryExpression	"""-F"""		5504857	0					
ANR	5505053	Identifier	MATCH		5504857	1					
ANR	5505054	ExpressionStatement	only_functions = true	136:4:3859:3880	5504857	1	True				
ANR	5505055	AssignmentExpression	only_functions = true		5504857	0		=			
ANR	5505056	Identifier	only_functions		5504857	0					
ANR	5505057	Identifier	true		5504857	1					
ANR	5505058	ElseStatement	else		5504857	0					
ANR	5505059	IfStatement	"if ( strcmp ( argv [ i ] , ""-O"" ) == MATCH )"		5504857	0					
ANR	5505060	Condition	"strcmp ( argv [ i ] , ""-O"" ) == MATCH"	137:11:3893:3922	5504857	0	True				
ANR	5505061	EqualityExpression	"strcmp ( argv [ i ] , ""-O"" ) == MATCH"		5504857	0		==			
ANR	5505062	CallExpression	"strcmp ( argv [ i ] , ""-O"" )"		5504857	0					
ANR	5505063	Callee	strcmp		5504857	0					
ANR	5505064	Identifier	strcmp		5504857	0					
ANR	5505065	ArgumentList	argv [ i ]		5504857	1					
ANR	5505066	Argument	argv [ i ]		5504857	0					
ANR	5505067	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505068	Identifier	argv		5504857	0					
ANR	5505069	Identifier	i		5504857	1					
ANR	5505070	Argument	"""-O"""		5504857	1					
ANR	5505071	PrimaryExpression	"""-O"""		5504857	0					
ANR	5505072	Identifier	MATCH		5504857	1					
ANR	5505073	ExpressionStatement	only_objects = true	138:4:3929:3948	5504857	1	True				
ANR	5505074	AssignmentExpression	only_objects = true		5504857	0		=			
ANR	5505075	Identifier	only_objects		5504857	0					
ANR	5505076	Identifier	true		5504857	1					
ANR	5505077	ElseStatement	else		5504857	0					
ANR	5505078	IfStatement	"if ( strcmp ( argv [ i ] , ""-f"" ) == MATCH )"		5504857	0					
ANR	5505079	Condition	"strcmp ( argv [ i ] , ""-f"" ) == MATCH"	139:11:3961:3990	5504857	0	True				
ANR	5505080	EqualityExpression	"strcmp ( argv [ i ] , ""-f"" ) == MATCH"		5504857	0		==			
ANR	5505081	CallExpression	"strcmp ( argv [ i ] , ""-f"" )"		5504857	0					
ANR	5505082	Callee	strcmp		5504857	0					
ANR	5505083	Identifier	strcmp		5504857	0					
ANR	5505084	ArgumentList	argv [ i ]		5504857	1					
ANR	5505085	Argument	argv [ i ]		5504857	0					
ANR	5505086	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505087	Identifier	argv		5504857	0					
ANR	5505088	Identifier	i		5504857	1					
ANR	5505089	Argument	"""-f"""		5504857	1					
ANR	5505090	PrimaryExpression	"""-f"""		5504857	0					
ANR	5505091	Identifier	MATCH		5504857	1					
ANR	5505092	ExpressionStatement	successes_printed = false	140:4:3997:4022	5504857	1	True				
ANR	5505093	AssignmentExpression	successes_printed = false		5504857	0		=			
ANR	5505094	Identifier	successes_printed		5504857	0					
ANR	5505095	Identifier	false		5504857	1					
ANR	5505096	ElseStatement	else		5504857	0					
ANR	5505097	IfStatement	"if ( strcmp ( argv [ i ] , ""-p"" ) == MATCH )"		5504857	0					
ANR	5505098	Condition	"strcmp ( argv [ i ] , ""-p"" ) == MATCH"	141:11:4035:4064	5504857	0	True				
ANR	5505099	EqualityExpression	"strcmp ( argv [ i ] , ""-p"" ) == MATCH"		5504857	0		==			
ANR	5505100	CallExpression	"strcmp ( argv [ i ] , ""-p"" )"		5504857	0					
ANR	5505101	Callee	strcmp		5504857	0					
ANR	5505102	Identifier	strcmp		5504857	0					
ANR	5505103	ArgumentList	argv [ i ]		5504857	1					
ANR	5505104	Argument	argv [ i ]		5504857	0					
ANR	5505105	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505106	Identifier	argv		5504857	0					
ANR	5505107	Identifier	i		5504857	1					
ANR	5505108	Argument	"""-p"""		5504857	1					
ANR	5505109	PrimaryExpression	"""-p"""		5504857	0					
ANR	5505110	Identifier	MATCH		5504857	1					
ANR	5505111	ExpressionStatement	failures_printed = false	142:4:4071:4095	5504857	1	True				
ANR	5505112	AssignmentExpression	failures_printed = false		5504857	0		=			
ANR	5505113	Identifier	failures_printed		5504857	0					
ANR	5505114	Identifier	false		5504857	1					
ANR	5505115	ElseStatement	else		5504857	0					
ANR	5505116	IfStatement	"if ( strcmp ( argv [ i ] , ""-y"" ) == MATCH )"		5504857	0					
ANR	5505117	Condition	"strcmp ( argv [ i ] , ""-y"" ) == MATCH"	143:11:4108:4137	5504857	0	True				
ANR	5505118	EqualityExpression	"strcmp ( argv [ i ] , ""-y"" ) == MATCH"		5504857	0		==			
ANR	5505119	CallExpression	"strcmp ( argv [ i ] , ""-y"" )"		5504857	0					
ANR	5505120	Callee	strcmp		5504857	0					
ANR	5505121	Identifier	strcmp		5504857	0					
ANR	5505122	ArgumentList	argv [ i ]		5504857	1					
ANR	5505123	Argument	argv [ i ]		5504857	0					
ANR	5505124	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505125	Identifier	argv		5504857	0					
ANR	5505126	Identifier	i		5504857	1					
ANR	5505127	Argument	"""-y"""		5504857	1					
ANR	5505128	PrimaryExpression	"""-y"""		5504857	0					
ANR	5505129	Identifier	MATCH		5504857	1					
ANR	5505130	CompoundStatement		38:43:1063:1063	5504857	1					
ANR	5505131	ExpressionStatement	successes_printed = false	144:4:4146:4171	5504857	0	True				
ANR	5505132	AssignmentExpression	successes_printed = false		5504857	0		=			
ANR	5505133	Identifier	successes_printed		5504857	0					
ANR	5505134	Identifier	false		5504857	1					
ANR	5505135	ExpressionStatement	failures_printed = false	145:4:4177:4201	5504857	1	True				
ANR	5505136	AssignmentExpression	failures_printed = false		5504857	0		=			
ANR	5505137	Identifier	failures_printed		5504857	0					
ANR	5505138	Identifier	false		5504857	1					
ANR	5505139	ElseStatement	else		5504857	0					
ANR	5505140	IfStatement	"if ( strcmp ( argv [ i ] , ""-t"" ) == MATCH )"		5504857	0					
ANR	5505141	Condition	"strcmp ( argv [ i ] , ""-t"" ) == MATCH"	147:11:4219:4248	5504857	0	True				
ANR	5505142	EqualityExpression	"strcmp ( argv [ i ] , ""-t"" ) == MATCH"		5504857	0		==			
ANR	5505143	CallExpression	"strcmp ( argv [ i ] , ""-t"" )"		5504857	0					
ANR	5505144	Callee	strcmp		5504857	0					
ANR	5505145	Identifier	strcmp		5504857	0					
ANR	5505146	ArgumentList	argv [ i ]		5504857	1					
ANR	5505147	Argument	argv [ i ]		5504857	0					
ANR	5505148	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505149	Identifier	argv		5504857	0					
ANR	5505150	Identifier	i		5504857	1					
ANR	5505151	Argument	"""-t"""		5504857	1					
ANR	5505152	PrimaryExpression	"""-t"""		5504857	0					
ANR	5505153	Identifier	MATCH		5504857	1					
ANR	5505154	CompoundStatement		51:4:1345:1354	5504857	1					
ANR	5505155	IfStatement	if ( i >= argc - 1 )		5504857	0					
ANR	5505156	Condition	i >= argc - 1	148:7:4260:4272	5504857	0	True				
ANR	5505157	RelationalExpression	i >= argc - 1		5504857	0		>=			
ANR	5505158	Identifier	i		5504857	0					
ANR	5505159	AdditiveExpression	argc - 1		5504857	1		-			
ANR	5505160	Identifier	argc		5504857	0					
ANR	5505161	PrimaryExpression	1		5504857	1					
ANR	5505162	CompoundStatement		43:22:1198:1198	5504857	1					
ANR	5505163	ExpressionStatement	"printf ( ""Missing additional argument(s) for '%s'.\\n"" , argv [ i ] )"	149:5:4282:4350	5504857	0	True				
ANR	5505164	CallExpression	"printf ( ""Missing additional argument(s) for '%s'.\\n"" , argv [ i ] )"		5504857	0					
ANR	5505165	Callee	printf		5504857	0					
ANR	5505166	Identifier	printf		5504857	0					
ANR	5505167	ArgumentList	"""Missing additional argument(s) for '%s'.\\n"""		5504857	1					
ANR	5505168	Argument	"""Missing additional argument(s) for '%s'.\\n"""		5504857	0					
ANR	5505169	PrimaryExpression	"""Missing additional argument(s) for '%s'.\\n"""		5504857	0					
ANR	5505170	Argument	argv [ i ]		5504857	1					
ANR	5505171	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505172	Identifier	argv		5504857	0					
ANR	5505173	Identifier	i		5504857	1					
ANR	5505174	ExpressionStatement	print_usage ( )	151:5:4357:4370	5504857	1	True				
ANR	5505175	CallExpression	print_usage ( )		5504857	0					
ANR	5505176	Callee	print_usage		5504857	0					
ANR	5505177	Identifier	print_usage		5504857	0					
ANR	5505178	ArgumentList			5504857	1					
ANR	5505179	ReturnStatement	return EXIT_FAILURE ;	152:5:4377:4396	5504857	2	True				
ANR	5505180	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505181	ExpressionStatement	i ++	155:4:4413:4416	5504857	1	True				
ANR	5505182	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5505183	Identifier	i		5504857	0					
ANR	5505184	IncDec	++		5504857	1					
ANR	5505185	IdentifierDeclStatement	int j = i ;	156:4:4422:4431	5504857	2	True				
ANR	5505186	IdentifierDecl	j = i		5504857	0					
ANR	5505187	IdentifierDeclType	int		5504857	0					
ANR	5505188	Identifier	j		5504857	1					
ANR	5505189	AssignmentExpression	j = i		5504857	2		=			
ANR	5505190	Identifier	i		5504857	0					
ANR	5505191	Identifier	i		5504857	1					
ANR	5505192	WhileStatement	while ( j < argc && argv [ j ] [ 0 ] != '-' )		5504857	3					
ANR	5505193	Condition	j < argc && argv [ j ] [ 0 ] != '-'	158:10:4477:4505	5504857	0	True				
ANR	5505194	AndExpression	j < argc && argv [ j ] [ 0 ] != '-'		5504857	0		&&			
ANR	5505195	RelationalExpression	j < argc		5504857	0		<			
ANR	5505196	Identifier	j		5504857	0					
ANR	5505197	Identifier	argc		5504857	1					
ANR	5505198	EqualityExpression	argv [ j ] [ 0 ] != '-'		5504857	1		!=			
ANR	5505199	ArrayIndexing	argv [ j ] [ 0 ]		5504857	0					
ANR	5505200	ArrayIndexing	argv [ j ]		5504857	0					
ANR	5505201	Identifier	argv		5504857	0					
ANR	5505202	Identifier	j		5504857	1					
ANR	5505203	PrimaryExpression	0		5504857	1					
ANR	5505204	PrimaryExpression	'-'		5504857	1					
ANR	5505205	CompoundStatement		53:41:1431:1431	5504857	1					
ANR	5505206	ExpressionStatement	tests_to_run . append ( argv [ j ] )	159:5:4515:4543	5504857	0	True				
ANR	5505207	CallExpression	tests_to_run . append ( argv [ j ] )		5504857	0					
ANR	5505208	Callee	tests_to_run . append		5504857	0					
ANR	5505209	MemberAccess	tests_to_run . append		5504857	0					
ANR	5505210	Identifier	tests_to_run		5504857	0					
ANR	5505211	Identifier	append		5504857	1					
ANR	5505212	ArgumentList	argv [ j ]		5504857	1					
ANR	5505213	Argument	argv [ j ]		5504857	0					
ANR	5505214	ArrayIndexing	argv [ j ]		5504857	0					
ANR	5505215	Identifier	argv		5504857	0					
ANR	5505216	Identifier	j		5504857	1					
ANR	5505217	ExpressionStatement	j ++	160:5:4550:4553	5504857	1	True				
ANR	5505218	PostIncDecOperationExpression	j ++		5504857	0					
ANR	5505219	Identifier	j		5504857	0					
ANR	5505220	IncDec	++		5504857	1					
ANR	5505221	ExpressionStatement	i = j - 1	162:4:4565:4574	5504857	4	True				
ANR	5505222	AssignmentExpression	i = j - 1		5504857	0		=			
ANR	5505223	Identifier	i		5504857	0					
ANR	5505224	AdditiveExpression	j - 1		5504857	1		-			
ANR	5505225	Identifier	j		5504857	0					
ANR	5505226	PrimaryExpression	1		5504857	1					
ANR	5505227	ElseStatement	else		5504857	0					
ANR	5505228	IfStatement	"if ( strcmp ( argv [ i ] , ""-h"" ) == MATCH || strcmp ( argv [ i ] , ""--help"" ) == MATCH )"		5504857	0					
ANR	5505229	Condition	"strcmp ( argv [ i ] , ""-h"" ) == MATCH || strcmp ( argv [ i ] , ""--help"" ) == MATCH"	164:11:4592:4664	5504857	0	True				
ANR	5505230	OrExpression	"strcmp ( argv [ i ] , ""-h"" ) == MATCH || strcmp ( argv [ i ] , ""--help"" ) == MATCH"		5504857	0		||			
ANR	5505231	EqualityExpression	"strcmp ( argv [ i ] , ""-h"" ) == MATCH"		5504857	0		==			
ANR	5505232	CallExpression	"strcmp ( argv [ i ] , ""-h"" )"		5504857	0					
ANR	5505233	Callee	strcmp		5504857	0					
ANR	5505234	Identifier	strcmp		5504857	0					
ANR	5505235	ArgumentList	argv [ i ]		5504857	1					
ANR	5505236	Argument	argv [ i ]		5504857	0					
ANR	5505237	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505238	Identifier	argv		5504857	0					
ANR	5505239	Identifier	i		5504857	1					
ANR	5505240	Argument	"""-h"""		5504857	1					
ANR	5505241	PrimaryExpression	"""-h"""		5504857	0					
ANR	5505242	Identifier	MATCH		5504857	1					
ANR	5505243	EqualityExpression	"strcmp ( argv [ i ] , ""--help"" ) == MATCH"		5504857	1		==			
ANR	5505244	CallExpression	"strcmp ( argv [ i ] , ""--help"" )"		5504857	0					
ANR	5505245	Callee	strcmp		5504857	0					
ANR	5505246	Identifier	strcmp		5504857	0					
ANR	5505247	ArgumentList	argv [ i ]		5504857	1					
ANR	5505248	Argument	argv [ i ]		5504857	0					
ANR	5505249	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505250	Identifier	argv		5504857	0					
ANR	5505251	Identifier	i		5504857	1					
ANR	5505252	Argument	"""--help"""		5504857	1					
ANR	5505253	PrimaryExpression	"""--help"""		5504857	0					
ANR	5505254	Identifier	MATCH		5504857	1					
ANR	5505255	CompoundStatement		61:3:1594:1594	5504857	1					
ANR	5505256	ExpressionStatement	print_usage ( )	167:4:4677:4690	5504857	0	True				
ANR	5505257	CallExpression	print_usage ( )		5504857	0					
ANR	5505258	Callee	print_usage		5504857	0					
ANR	5505259	Identifier	print_usage		5504857	0					
ANR	5505260	ArgumentList			5504857	1					
ANR	5505261	ReturnStatement	return EXIT_FAILURE ;	168:4:4696:4715	5504857	1	True				
ANR	5505262	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505263	ElseStatement	else		5504857	0					
ANR	5505264	CompoundStatement		65:8:1653:1653	5504857	0					
ANR	5505265	ExpressionStatement	"printf ( ""Invalid argument '%s'\\n"" , argv [ i ] )"	171:4:4736:4778	5504857	0	True				
ANR	5505266	CallExpression	"printf ( ""Invalid argument '%s'\\n"" , argv [ i ] )"		5504857	0					
ANR	5505267	Callee	printf		5504857	0					
ANR	5505268	Identifier	printf		5504857	0					
ANR	5505269	ArgumentList	"""Invalid argument '%s'\\n"""		5504857	1					
ANR	5505270	Argument	"""Invalid argument '%s'\\n"""		5504857	0					
ANR	5505271	PrimaryExpression	"""Invalid argument '%s'\\n"""		5504857	0					
ANR	5505272	Argument	argv [ i ]		5504857	1					
ANR	5505273	ArrayIndexing	argv [ i ]		5504857	0					
ANR	5505274	Identifier	argv		5504857	0					
ANR	5505275	Identifier	i		5504857	1					
ANR	5505276	ExpressionStatement	print_usage ( )	172:4:4784:4797	5504857	1	True				
ANR	5505277	CallExpression	print_usage ( )		5504857	0					
ANR	5505278	Callee	print_usage		5504857	0					
ANR	5505279	Identifier	print_usage		5504857	0					
ANR	5505280	ArgumentList			5504857	1					
ANR	5505281	ReturnStatement	return EXIT_FAILURE ;	173:4:4803:4822	5504857	2	True				
ANR	5505282	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505283	ExpressionStatement	i ++	175:3:4832:4835	5504857	1	True				
ANR	5505284	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5505285	Identifier	i		5504857	0					
ANR	5505286	IncDec	++		5504857	1					
ANR	5505287	IdentifierDeclStatement	WSADATA wsaData ;	180:1:4901:4916	5504857	4	True				
ANR	5505288	IdentifierDecl	wsaData		5504857	0					
ANR	5505289	IdentifierDeclType	WSADATA		5504857	0					
ANR	5505290	Identifier	wsaData		5504857	1					
ANR	5505291	IdentifierDeclStatement	"int iResult = WSAStartup ( MAKEWORD ( 2 , 0 ) , & wsaData ) ;"	181:1:4919:4968	5504857	5	True				
ANR	5505292	IdentifierDecl	"iResult = WSAStartup ( MAKEWORD ( 2 , 0 ) , & wsaData )"		5504857	0					
ANR	5505293	IdentifierDeclType	int		5504857	0					
ANR	5505294	Identifier	iResult		5504857	1					
ANR	5505295	AssignmentExpression	"iResult = WSAStartup ( MAKEWORD ( 2 , 0 ) , & wsaData )"		5504857	2		=			
ANR	5505296	Identifier	iResult		5504857	0					
ANR	5505297	CallExpression	"WSAStartup ( MAKEWORD ( 2 , 0 ) , & wsaData )"		5504857	1					
ANR	5505298	Callee	WSAStartup		5504857	0					
ANR	5505299	Identifier	WSAStartup		5504857	0					
ANR	5505300	ArgumentList	"MAKEWORD ( 2 , 0 )"		5504857	1					
ANR	5505301	Argument	"MAKEWORD ( 2 , 0 )"		5504857	0					
ANR	5505302	CallExpression	"MAKEWORD ( 2 , 0 )"		5504857	0					
ANR	5505303	Callee	MAKEWORD		5504857	0					
ANR	5505304	Identifier	MAKEWORD		5504857	0					
ANR	5505305	ArgumentList	2		5504857	1					
ANR	5505306	Argument	2		5504857	0					
ANR	5505307	PrimaryExpression	2		5504857	0					
ANR	5505308	Argument	0		5504857	1					
ANR	5505309	PrimaryExpression	0		5504857	0					
ANR	5505310	Argument	& wsaData		5504857	1					
ANR	5505311	UnaryOperationExpression	& wsaData		5504857	0					
ANR	5505312	UnaryOperator	&		5504857	0					
ANR	5505313	Identifier	wsaData		5504857	1					
ANR	5505314	IfStatement	if ( iResult != 0 )		5504857	6					
ANR	5505315	Condition	iResult != 0	182:4:4974:4985	5504857	0	True				
ANR	5505316	EqualityExpression	iResult != 0		5504857	0		!=			
ANR	5505317	Identifier	iResult		5504857	0					
ANR	5505318	PrimaryExpression	0		5504857	1					
ANR	5505319	CompoundStatement		78:1:1912:1912	5504857	1					
ANR	5505320	ExpressionStatement	"printf ( ""Failed to initialize Winsock: %d\\n"" , iResult )"	184:2:4993:5046	5504857	0	True				
ANR	5505321	CallExpression	"printf ( ""Failed to initialize Winsock: %d\\n"" , iResult )"		5504857	0					
ANR	5505322	Callee	printf		5504857	0					
ANR	5505323	Identifier	printf		5504857	0					
ANR	5505324	ArgumentList	"""Failed to initialize Winsock: %d\\n"""		5504857	1					
ANR	5505325	Argument	"""Failed to initialize Winsock: %d\\n"""		5504857	0					
ANR	5505326	PrimaryExpression	"""Failed to initialize Winsock: %d\\n"""		5504857	0					
ANR	5505327	Argument	iResult		5504857	1					
ANR	5505328	Identifier	iResult		5504857	0					
ANR	5505329	ReturnStatement	return EXIT_FAILURE ;	185:2:5050:5069	5504857	1	True				
ANR	5505330	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505331	IfStatement	if ( only_functions && only_objects )		5504857	7					
ANR	5505332	Condition	only_functions && only_objects	188:4:5085:5114	5504857	0	True				
ANR	5505333	AndExpression	only_functions && only_objects		5504857	0		&&			
ANR	5505334	Identifier	only_functions		5504857	0					
ANR	5505335	Identifier	only_objects		5504857	1					
ANR	5505336	CompoundStatement		83:36:2040:2040	5504857	1					
ANR	5505337	ExpressionStatement	only_functions = false	189:2:5121:5143	5504857	0	True				
ANR	5505338	AssignmentExpression	only_functions = false		5504857	0		=			
ANR	5505339	Identifier	only_functions		5504857	0					
ANR	5505340	Identifier	false		5504857	1					
ANR	5505341	ExpressionStatement	only_objects = false	190:2:5147:5167	5504857	1	True				
ANR	5505342	AssignmentExpression	only_objects = false		5504857	0		=			
ANR	5505343	Identifier	only_objects		5504857	0					
ANR	5505344	Identifier	false		5504857	1					
ANR	5505345	ExpressionStatement	"e . init ( failures_printed , successes_printed )"	193:1:5175:5218	5504857	8	True				
ANR	5505346	CallExpression	"e . init ( failures_printed , successes_printed )"		5504857	0					
ANR	5505347	Callee	e . init		5504857	0					
ANR	5505348	MemberAccess	e . init		5504857	0					
ANR	5505349	Identifier	e		5504857	0					
ANR	5505350	Identifier	init		5504857	1					
ANR	5505351	ArgumentList	failures_printed		5504857	1					
ANR	5505352	Argument	failures_printed		5504857	0					
ANR	5505353	Identifier	failures_printed		5504857	0					
ANR	5505354	Argument	successes_printed		5504857	1					
ANR	5505355	Identifier	successes_printed		5504857	0					
ANR	5505356	IdentifierDeclStatement	FunctionDriver driver ( num_funcs_or_objs ) ;	195:1:5253:5293	5504857	9	True				
ANR	5505357	IdentifierDecl	driver ( num_funcs_or_objs )		5504857	0					
ANR	5505358	IdentifierDeclType	FunctionDriver		5504857	0					
ANR	5505359	Identifier	driver		5504857	1					
ANR	5505360	Identifier	num_funcs_or_objs		5504857	2					
ANR	5505361	ExpressionStatement	driver . init ( num_tests )	196:1:5296:5318	5504857	10	True				
ANR	5505362	CallExpression	driver . init ( num_tests )		5504857	0					
ANR	5505363	Callee	driver . init		5504857	0					
ANR	5505364	MemberAccess	driver . init		5504857	0					
ANR	5505365	Identifier	driver		5504857	0					
ANR	5505366	Identifier	init		5504857	1					
ANR	5505367	ArgumentList	num_tests		5504857	1					
ANR	5505368	Argument	num_tests		5504857	0					
ANR	5505369	Identifier	num_tests		5504857	0					
ANR	5505370	IfStatement	if ( ! tests_to_run . isEmpty ( ) )		5504857	11					
ANR	5505371	Condition	! tests_to_run . isEmpty ( )	199:4:5353:5375	5504857	0	True				
ANR	5505372	UnaryOperationExpression	! tests_to_run . isEmpty ( )		5504857	0					
ANR	5505373	UnaryOperator	!		5504857	0					
ANR	5505374	CallExpression	tests_to_run . isEmpty ( )		5504857	1					
ANR	5505375	Callee	tests_to_run . isEmpty		5504857	0					
ANR	5505376	MemberAccess	tests_to_run . isEmpty		5504857	0					
ANR	5505377	Identifier	tests_to_run		5504857	0					
ANR	5505378	Identifier	isEmpty		5504857	1					
ANR	5505379	ArgumentList			5504857	1					
ANR	5505380	CompoundStatement		96:2:2326:2335	5504857	1					
ANR	5505381	IdentifierDeclStatement	char * test = NULL ;	200:2:5382:5399	5504857	0	True				
ANR	5505382	IdentifierDecl	* test = NULL		5504857	0					
ANR	5505383	IdentifierDeclType	char *		5504857	0					
ANR	5505384	Identifier	test		5504857	1					
ANR	5505385	AssignmentExpression	* test = NULL		5504857	2		=			
ANR	5505386	Identifier	NULL		5504857	0					
ANR	5505387	Identifier	NULL		5504857	1					
ANR	5505388	IdentifierDeclStatement	int i = 0 ;	201:2:5403:5412	5504857	1	True				
ANR	5505389	IdentifierDecl	i = 0		5504857	0					
ANR	5505390	IdentifierDeclType	int		5504857	0					
ANR	5505391	Identifier	i		5504857	1					
ANR	5505392	AssignmentExpression	i = 0		5504857	2		=			
ANR	5505393	Identifier	i		5504857	0					
ANR	5505394	PrimaryExpression	0		5504857	1					
ANR	5505395	ExpressionStatement	tests_to_run . rewind ( )	202:2:5416:5437	5504857	2	True				
ANR	5505396	CallExpression	tests_to_run . rewind ( )		5504857	0					
ANR	5505397	Callee	tests_to_run . rewind		5504857	0					
ANR	5505398	MemberAccess	tests_to_run . rewind		5504857	0					
ANR	5505399	Identifier	tests_to_run		5504857	0					
ANR	5505400	Identifier	rewind		5504857	1					
ANR	5505401	ArgumentList			5504857	1					
ANR	5505402	WhileStatement	while ( ( test = tests_to_run . next ( ) ) )		5504857	3					
ANR	5505403	Condition	test = tests_to_run . next ( )	203:8:5447:5474	5504857	0	True				
ANR	5505404	AssignmentExpression	test = tests_to_run . next ( )		5504857	0		=			
ANR	5505405	Identifier	test		5504857	0					
ANR	5505406	CallExpression	tests_to_run . next ( )		5504857	1					
ANR	5505407	Callee	tests_to_run . next		5504857	0					
ANR	5505408	MemberAccess	tests_to_run . next		5504857	0					
ANR	5505409	Identifier	tests_to_run		5504857	0					
ANR	5505410	Identifier	next		5504857	1					
ANR	5505411	ArgumentList			5504857	1					
ANR	5505412	CompoundStatement		98:38:2400:2400	5504857	1					
ANR	5505413	ExpressionStatement	i = 0	204:3:5482:5487	5504857	0	True				
ANR	5505414	AssignmentExpression	i = 0		5504857	0		=			
ANR	5505415	Identifier	i		5504857	0					
ANR	5505416	PrimaryExpression	0		5504857	1					
ANR	5505417	WhileStatement	while ( i < function_map_num_elems )		5504857	1					
ANR	5505418	Condition	i < function_map_num_elems	205:9:5498:5523	5504857	0	True				
ANR	5505419	RelationalExpression	i < function_map_num_elems		5504857	0		<			
ANR	5505420	Identifier	i		5504857	0					
ANR	5505421	Identifier	function_map_num_elems		5504857	1					
ANR	5505422	CompoundStatement		101:3:2452:2452	5504857	1					
ANR	5505423	IfStatement	"if ( strcmp ( function_map [ i ] . name , test ) == MATCH )"		5504857	0					
ANR	5505424	Condition	"strcmp ( function_map [ i ] . name , test ) == MATCH"	207:7:5538:5580	5504857	0	True				
ANR	5505425	EqualityExpression	"strcmp ( function_map [ i ] . name , test ) == MATCH"		5504857	0		==			
ANR	5505426	CallExpression	"strcmp ( function_map [ i ] . name , test )"		5504857	0					
ANR	5505427	Callee	strcmp		5504857	0					
ANR	5505428	Identifier	strcmp		5504857	0					
ANR	5505429	ArgumentList	function_map [ i ] . name		5504857	1					
ANR	5505430	Argument	function_map [ i ] . name		5504857	0					
ANR	5505431	MemberAccess	function_map [ i ] . name		5504857	0					
ANR	5505432	ArrayIndexing	function_map [ i ]		5504857	0					
ANR	5505433	Identifier	function_map		5504857	0					
ANR	5505434	Identifier	i		5504857	1					
ANR	5505435	Identifier	name		5504857	1					
ANR	5505436	Argument	test		5504857	1					
ANR	5505437	Identifier	test		5504857	0					
ANR	5505438	Identifier	MATCH		5504857	1					
ANR	5505439	CompoundStatement		102:52:2506:2506	5504857	1					
ANR	5505440	ExpressionStatement	driver . register_function ( function_map [ i ] . func )	208:5:5590:5636	5504857	0	True				
ANR	5505441	CallExpression	driver . register_function ( function_map [ i ] . func )		5504857	0					
ANR	5505442	Callee	driver . register_function		5504857	0					
ANR	5505443	MemberAccess	driver . register_function		5504857	0					
ANR	5505444	Identifier	driver		5504857	0					
ANR	5505445	Identifier	register_function		5504857	1					
ANR	5505446	ArgumentList	function_map [ i ] . func		5504857	1					
ANR	5505447	Argument	function_map [ i ] . func		5504857	0					
ANR	5505448	MemberAccess	function_map [ i ] . func		5504857	0					
ANR	5505449	ArrayIndexing	function_map [ i ]		5504857	0					
ANR	5505450	Identifier	function_map		5504857	0					
ANR	5505451	Identifier	i		5504857	1					
ANR	5505452	Identifier	func		5504857	1					
ANR	5505453	BreakStatement	break ;	209:5:5643:5648	5504857	1	True				
ANR	5505454	ExpressionStatement	i ++	211:4:5660:5663	5504857	1	True				
ANR	5505455	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5505456	Identifier	i		5504857	0					
ANR	5505457	IncDec	++		5504857	1					
ANR	5505458	IfStatement	if ( i >= function_map_num_elems )		5504857	2					
ANR	5505459	Condition	i >= function_map_num_elems	215:6:5698:5724	5504857	0	True				
ANR	5505460	RelationalExpression	i >= function_map_num_elems		5504857	0		>=			
ANR	5505461	Identifier	i		5504857	0					
ANR	5505462	Identifier	function_map_num_elems		5504857	1					
ANR	5505463	CompoundStatement		110:35:2650:2650	5504857	1					
ANR	5505464	ExpressionStatement	"printf ( ""Invalid test '%s'.\\n"" , test )"	216:4:5733:5769	5504857	0	True				
ANR	5505465	CallExpression	"printf ( ""Invalid test '%s'.\\n"" , test )"		5504857	0					
ANR	5505466	Callee	printf		5504857	0					
ANR	5505467	Identifier	printf		5504857	0					
ANR	5505468	ArgumentList	"""Invalid test '%s'.\\n"""		5504857	1					
ANR	5505469	Argument	"""Invalid test '%s'.\\n"""		5504857	0					
ANR	5505470	PrimaryExpression	"""Invalid test '%s'.\\n"""		5504857	0					
ANR	5505471	Argument	test		5504857	1					
ANR	5505472	Identifier	test		5504857	0					
ANR	5505473	ExpressionStatement	WSACleanup ( )	219:4:5861:5873	5504857	1	True				
ANR	5505474	CallExpression	WSACleanup ( )		5504857	0					
ANR	5505475	Callee	WSACleanup		5504857	0					
ANR	5505476	Identifier	WSACleanup		5504857	0					
ANR	5505477	ArgumentList			5504857	1					
ANR	5505478	ReturnStatement	return EXIT_FAILURE ;	221:4:5886:5905	5504857	2	True				
ANR	5505479	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505480	ElseStatement	else		5504857	0					
ANR	5505481	CompoundStatement		124:2:2890:2910	5504857	0					
ANR	5505482	IdentifierDeclStatement	int i = 0 ;	228:2:5954:5963	5504857	0	True				
ANR	5505483	IdentifierDecl	i = 0		5504857	0					
ANR	5505484	IdentifierDeclType	int		5504857	0					
ANR	5505485	Identifier	i		5504857	1					
ANR	5505486	AssignmentExpression	i = 0		5504857	2		=			
ANR	5505487	Identifier	i		5504857	0					
ANR	5505488	PrimaryExpression	0		5504857	1					
ANR	5505489	IdentifierDeclStatement	bool objects = false ;	229:2:5967:5987	5504857	1	True				
ANR	5505490	IdentifierDecl	objects = false		5504857	0					
ANR	5505491	IdentifierDeclType	bool		5504857	0					
ANR	5505492	Identifier	objects		5504857	1					
ANR	5505493	AssignmentExpression	objects = false		5504857	2		=			
ANR	5505494	Identifier	false		5504857	0					
ANR	5505495	Identifier	false		5504857	1					
ANR	5505496	WhileStatement	while ( i < function_map_num_elems )		5504857	2					
ANR	5505497	Condition	i < function_map_num_elems	230:8:5997:6022	5504857	0	True				
ANR	5505498	RelationalExpression	i < function_map_num_elems		5504857	0		<			
ANR	5505499	Identifier	i		5504857	0					
ANR	5505500	Identifier	function_map_num_elems		5504857	1					
ANR	5505501	CompoundStatement		125:36:2948:2948	5504857	1					
ANR	5505502	IfStatement	if ( ! objects )		5504857	0					
ANR	5505503	Condition	! objects	231:6:6033:6040	5504857	0	True				
ANR	5505504	UnaryOperationExpression	! objects		5504857	0					
ANR	5505505	UnaryOperator	!		5504857	0					
ANR	5505506	Identifier	objects		5504857	1					
ANR	5505507	CompoundStatement		126:16:2966:2966	5504857	1					
ANR	5505508	ExpressionStatement	"objects = ( strcmp ( function_map [ i ] . name , ""start of objects"" ) == MATCH )"	232:4:6049:6123	5504857	0	True				
ANR	5505509	AssignmentExpression	"objects = ( strcmp ( function_map [ i ] . name , ""start of objects"" ) == MATCH )"		5504857	0		=			
ANR	5505510	Identifier	objects		5504857	0					
ANR	5505511	EqualityExpression	"strcmp ( function_map [ i ] . name , ""start of objects"" ) == MATCH"		5504857	1		==			
ANR	5505512	CallExpression	"strcmp ( function_map [ i ] . name , ""start of objects"" )"		5504857	0					
ANR	5505513	Callee	strcmp		5504857	0					
ANR	5505514	Identifier	strcmp		5504857	0					
ANR	5505515	ArgumentList	function_map [ i ] . name		5504857	1					
ANR	5505516	Argument	function_map [ i ] . name		5504857	0					
ANR	5505517	MemberAccess	function_map [ i ] . name		5504857	0					
ANR	5505518	ArrayIndexing	function_map [ i ]		5504857	0					
ANR	5505519	Identifier	function_map		5504857	0					
ANR	5505520	Identifier	i		5504857	1					
ANR	5505521	Identifier	name		5504857	1					
ANR	5505522	Argument	"""start of objects"""		5504857	1					
ANR	5505523	PrimaryExpression	"""start of objects"""		5504857	0					
ANR	5505524	Identifier	MATCH		5504857	1					
ANR	5505525	IfStatement	if ( ! objects && ! only_objects )		5504857	1					
ANR	5505526	Condition	! objects && ! only_objects	234:7:6132:6156	5504857	0	True				
ANR	5505527	AndExpression	! objects && ! only_objects		5504857	0		&&			
ANR	5505528	UnaryOperationExpression	! objects		5504857	0					
ANR	5505529	UnaryOperator	!		5504857	0					
ANR	5505530	Identifier	objects		5504857	1					
ANR	5505531	UnaryOperationExpression	! only_objects		5504857	1					
ANR	5505532	UnaryOperator	!		5504857	0					
ANR	5505533	Identifier	only_objects		5504857	1					
ANR	5505534	ExpressionStatement	driver . register_function ( function_map [ i ] . func )	235:5:6164:6210	5504857	1	True				
ANR	5505535	CallExpression	driver . register_function ( function_map [ i ] . func )		5504857	0					
ANR	5505536	Callee	driver . register_function		5504857	0					
ANR	5505537	MemberAccess	driver . register_function		5504857	0					
ANR	5505538	Identifier	driver		5504857	0					
ANR	5505539	Identifier	register_function		5504857	1					
ANR	5505540	ArgumentList	function_map [ i ] . func		5504857	1					
ANR	5505541	Argument	function_map [ i ] . func		5504857	0					
ANR	5505542	MemberAccess	function_map [ i ] . func		5504857	0					
ANR	5505543	ArrayIndexing	function_map [ i ]		5504857	0					
ANR	5505544	Identifier	function_map		5504857	0					
ANR	5505545	Identifier	i		5504857	1					
ANR	5505546	Identifier	func		5504857	1					
ANR	5505547	ElseStatement	else		5504857	0					
ANR	5505548	IfStatement	if ( ! only_functions )		5504857	0					
ANR	5505549	Condition	! only_functions	237:11:6228:6242	5504857	0	True				
ANR	5505550	UnaryOperationExpression	! only_functions		5504857	0					
ANR	5505551	UnaryOperator	!		5504857	0					
ANR	5505552	Identifier	only_functions		5504857	1					
ANR	5505553	ExpressionStatement	driver . register_function ( function_map [ i ] . func )	238:4:6249:6295	5504857	1	True				
ANR	5505554	CallExpression	driver . register_function ( function_map [ i ] . func )		5504857	0					
ANR	5505555	Callee	driver . register_function		5504857	0					
ANR	5505556	MemberAccess	driver . register_function		5504857	0					
ANR	5505557	Identifier	driver		5504857	0					
ANR	5505558	Identifier	register_function		5504857	1					
ANR	5505559	ArgumentList	function_map [ i ] . func		5504857	1					
ANR	5505560	Argument	function_map [ i ] . func		5504857	0					
ANR	5505561	MemberAccess	function_map [ i ] . func		5504857	0					
ANR	5505562	ArrayIndexing	function_map [ i ]		5504857	0					
ANR	5505563	Identifier	function_map		5504857	0					
ANR	5505564	Identifier	i		5504857	1					
ANR	5505565	Identifier	func		5504857	1					
ANR	5505566	ExpressionStatement	i ++	239:3:6300:6303	5504857	1	True				
ANR	5505567	PostIncDecOperationExpression	i ++		5504857	0					
ANR	5505568	Identifier	i		5504857	0					
ANR	5505569	IncDec	++		5504857	1					
ANR	5505570	IdentifierDeclStatement	bool result = driver . do_all_functions ( false ) ;	244:1:6363:6407	5504857	12	True				
ANR	5505571	IdentifierDecl	result = driver . do_all_functions ( false )		5504857	0					
ANR	5505572	IdentifierDeclType	bool		5504857	0					
ANR	5505573	Identifier	result		5504857	1					
ANR	5505574	AssignmentExpression	result = driver . do_all_functions ( false )		5504857	2		=			
ANR	5505575	Identifier	result		5504857	0					
ANR	5505576	CallExpression	driver . do_all_functions ( false )		5504857	1					
ANR	5505577	Callee	driver . do_all_functions		5504857	0					
ANR	5505578	MemberAccess	driver . do_all_functions		5504857	0					
ANR	5505579	Identifier	driver		5504857	0					
ANR	5505580	Identifier	do_all_functions		5504857	1					
ANR	5505581	ArgumentList	false		5504857	1					
ANR	5505582	Argument	false		5504857	0					
ANR	5505583	Identifier	false		5504857	0					
ANR	5505584	ExpressionStatement	e . emit_summary ( )	245:1:6410:6426	5504857	13	True				
ANR	5505585	CallExpression	e . emit_summary ( )		5504857	0					
ANR	5505586	Callee	e . emit_summary		5504857	0					
ANR	5505587	MemberAccess	e . emit_summary		5504857	0					
ANR	5505588	Identifier	e		5504857	0					
ANR	5505589	Identifier	emit_summary		5504857	1					
ANR	5505590	ArgumentList			5504857	1					
ANR	5505591	ExpressionStatement	WSACleanup ( )	248:1:6512:6524	5504857	14	True				
ANR	5505592	CallExpression	WSACleanup ( )		5504857	0					
ANR	5505593	Callee	WSACleanup		5504857	0					
ANR	5505594	Identifier	WSACleanup		5504857	0					
ANR	5505595	ArgumentList			5504857	1					
ANR	5505596	IfStatement	if ( result )		5504857	15					
ANR	5505597	Condition	result	250:4:6537:6542	5504857	0	True				
ANR	5505598	Identifier	result		5504857	0					
ANR	5505599	CompoundStatement		145:12:3468:3468	5504857	1					
ANR	5505600	ExpressionStatement	"printf ( ""Test suite has passed.\\n"" )"	251:2:6549:6584	5504857	0	True				
ANR	5505601	CallExpression	"printf ( ""Test suite has passed.\\n"" )"		5504857	0					
ANR	5505602	Callee	printf		5504857	0					
ANR	5505603	Identifier	printf		5504857	0					
ANR	5505604	ArgumentList	"""Test suite has passed.\\n"""		5504857	1					
ANR	5505605	Argument	"""Test suite has passed.\\n"""		5504857	0					
ANR	5505606	PrimaryExpression	"""Test suite has passed.\\n"""		5504857	0					
ANR	5505607	ReturnStatement	return EXIT_SUCCESS ;	252:2:6588:6607	5504857	1	True				
ANR	5505608	Identifier	EXIT_SUCCESS		5504857	0					
ANR	5505609	ExpressionStatement	"printf ( ""Test suite has failed.\\n"" )"	254:1:6613:6648	5504857	16	True				
ANR	5505610	CallExpression	"printf ( ""Test suite has failed.\\n"" )"		5504857	0					
ANR	5505611	Callee	printf		5504857	0					
ANR	5505612	Identifier	printf		5504857	0					
ANR	5505613	ArgumentList	"""Test suite has failed.\\n"""		5504857	1					
ANR	5505614	Argument	"""Test suite has failed.\\n"""		5504857	0					
ANR	5505615	PrimaryExpression	"""Test suite has failed.\\n"""		5504857	0					
ANR	5505616	ReturnStatement	return EXIT_FAILURE ;	255:1:6651:6670	5504857	17	True				
ANR	5505617	Identifier	EXIT_FAILURE		5504857	0					
ANR	5505618	ReturnType	int		5504857	1					
ANR	5505619	Identifier	main		5504857	2					
ANR	5505620	ParameterList	"int argc , char * argv [ ]"		5504857	3					
ANR	5505621	Parameter	int argc	106:9:3052:3059	5504857	0	True				
ANR	5505622	ParameterType	int		5504857	0					
ANR	5505623	Identifier	argc		5504857	1					
ANR	5505624	Parameter	char * argv [ ]	106:19:3062:3073	5504857	1	True				
ANR	5505625	ParameterType	char * [ ]		5504857	0					
ANR	5505626	Identifier	argv		5504857	1					
ANR	5505627	CFGEntryNode	ENTRY		5504857		True				
ANR	5505628	CFGExitNode	EXIT		5504857		True				
ANR	5505629	Symbol	only_objects		5504857						
ANR	5505630	Symbol	tests_to_run . next		5504857						
ANR	5505631	Symbol	iResult		5504857						
ANR	5505632	Symbol	function_map [ i ] . name		5504857						
ANR	5505633	Symbol	objects		5504857						
ANR	5505634	Symbol	* argv		5504857						
ANR	5505635	Symbol	argv		5504857						
ANR	5505636	Symbol	result		5504857						
ANR	5505637	Symbol	INT_MAX		5504857						
ANR	5505638	Symbol	MAKEWORD		5504857						
ANR	5505639	Symbol	function_map_num_elems		5504857						
ANR	5505640	Symbol	* * argv		5504857						
ANR	5505641	Symbol	* function_map		5504857						
ANR	5505642	Symbol	tests_to_run . isEmpty		5504857						
ANR	5505643	Symbol	function_map		5504857						
ANR	5505644	Symbol	& wsaData		5504857						
ANR	5505645	Symbol	argc		5504857						
ANR	5505646	Symbol	strcmp		5504857						
ANR	5505647	Symbol	atoi		5504857						
ANR	5505648	Symbol	* * j		5504857						
ANR	5505649	Symbol	driver . do_all_functions		5504857						
ANR	5505650	Symbol	NULL		5504857						
ANR	5505651	Symbol	test		5504857						
ANR	5505652	Symbol	num_funcs_or_objs		5504857						
ANR	5505653	Symbol	e		5504857						
ANR	5505654	Symbol	successes_printed		5504857						
ANR	5505655	Symbol	false		5504857						
ANR	5505656	Symbol	only_functions		5504857						
ANR	5505657	Symbol	i		5504857						
ANR	5505658	Symbol	j		5504857						
ANR	5505659	Symbol	WSAStartup		5504857						
ANR	5505660	Symbol	tests_to_run		5504857						
ANR	5505661	Symbol	num_tests		5504857						
ANR	5505662	Symbol	* i		5504857						
ANR	5505663	Symbol	* j		5504857						
ANR	5505664	Symbol	driver		5504857						
ANR	5505665	Symbol	EXIT_FAILURE		5504857						
ANR	5505666	Symbol	wsaData		5504857						
ANR	5505667	Symbol	EXIT_SUCCESS		5504857						
ANR	5505668	Symbol	true		5504857						
ANR	5505669	Symbol	failures_printed		5504857						
ANR	5505670	Symbol	function_map [ i ] . func		5504857						
ANR	5505671	Symbol	MATCH		5504857						
ANR	5505672	Function	print_usage	258:0:6675:7106							
ANR	5505673	FunctionDef	print_usage ()		5505672	0					
ANR	5505674	CompoundStatement		258:23:6698:7106	5505672	0					
ANR	5505675	Statement	printf	259:1:6701:6706	5505672	0	True				
ANR	5505676	Statement	(	259:7:6707:6707	5505672	1	True				
ANR	5505677	Statement	"""condor_unit_tests\\n\\t"""	259:8:6708:6730	5505672	2	True				
ANR	5505678	Statement	"""-n x: Run x number of tests\\n\\t"""	260:2:6734:6766	5505672	3	True				
ANR	5505679	Statement	"""-N x: Test x number of functions/objects\\n\\t"""	261:2:6770:6815	5505672	4	True				
ANR	5505680	Statement	"""-t x: Run test(s) x (x is a test name FTEST_ or OTEST_)\\n\\t"""	262:2:6819:6879	5505672	5	True				
ANR	5505681	Statement	"""-F: Only test functions\\n\\t"""	263:2:6883:6911	5505672	6	True				
ANR	5505682	Statement	"""-O: Only test objects\\n\\t"""	264:2:6915:6941	5505672	7	True				
ANR	5505683	Statement	"""-f: Only show output for tests that fail\\n\\t"""	265:2:6945:6990	5505672	8	True				
ANR	5505684	Statement	"""-p: Only show output for tests that pass\\n\\t"""	266:2:6994:7039	5505672	9	True				
ANR	5505685	Statement	"""-y: Only show summary\\n\\t"""	267:2:7043:7069	5505672	10	True				
ANR	5505686	Statement	"""-h, --help: Print this out\\n"""	268:2:7073:7102	5505672	11	True				
ANR	5505687	Statement	)	268:32:7103:7103	5505672	12	True				
ANR	5505688	ExpressionStatement		268:33:7104:7104	5505672	13	True				
ANR	5505689	ReturnType	void		5505672	1					
ANR	5505690	Identifier	print_usage		5505672	2					
ANR	5505691	ParameterList			5505672	3					
ANR	5505692	CFGEntryNode	ENTRY		5505672		True				
ANR	5505693	CFGExitNode	EXIT		5505672		True				
