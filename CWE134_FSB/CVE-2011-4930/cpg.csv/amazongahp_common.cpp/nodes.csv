command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	625801	File	data/converged/CVE-2011-4930_htcondor/amazongahp_common.cpp								
ANR	625802	DeclStmt									
ANR	625803	Decl							std :: string	std :: string	amazon_proxy_host
ANR	625804	DeclStmt									
ANR	625805	Decl							int	int	amazon_proxy_port
ANR	625806	DeclStmt									
ANR	625807	Decl							std :: string	std :: string	amazon_proxy_user
ANR	625808	DeclStmt									
ANR	625809	Decl							std :: string	std :: string	amazon_proxy_passwd
ANR	625810	DeclStmt									
ANR	625811	Decl							SimpleList < AmazonGahpCommand * >	SimpleList < AmazonGahpCommand * >	amazon_gahp_commands
ANR	625812	Function	set_amazon_proxy_server	35:0:1214:2786							
ANR	625813	FunctionDef	set_amazon_proxy_server (const char * url)		625812	0					
ANR	625814	CompoundStatement		36:0:1261:2786	625812	0					
ANR	625815	IfStatement	if ( ! url )		625812	0					
ANR	625816	Condition	! url	37:5:1268:1271	625812	0	True				
ANR	625817	UnaryOperationExpression	! url		625812	0					
ANR	625818	UnaryOperator	!		625812	0					
ANR	625819	Identifier	url		625812	1					
ANR	625820	CompoundStatement		2:12:13:13	625812	1					
ANR	625821	ReturnStatement	return ;	38:2:1279:1285	625812	0	True				
ANR	625822	IfStatement	"if ( ! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) ) )"		625812	1					
ANR	625823	Condition	"! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"	42:5:1333:1379	625812	0	True				
ANR	625824	UnaryOperationExpression	"! strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"		625812	0					
ANR	625825	UnaryOperator	!		625812	0					
ANR	625826	CallExpression	"strncasecmp ( ""http://"" , url , strlen ( ""http://"" ) )"		625812	1					
ANR	625827	Callee	strncasecmp		625812	0					
ANR	625828	Identifier	strncasecmp		625812	0					
ANR	625829	ArgumentList	"""http://"""		625812	1					
ANR	625830	Argument	"""http://"""		625812	0					
ANR	625831	PrimaryExpression	"""http://"""		625812	0					
ANR	625832	Argument	url		625812	1					
ANR	625833	Identifier	url		625812	0					
ANR	625834	Argument	"strlen ( ""http://"" )"		625812	2					
ANR	625835	CallExpression	"strlen ( ""http://"" )"		625812	0					
ANR	625836	Callee	strlen		625812	0					
ANR	625837	Identifier	strlen		625812	0					
ANR	625838	ArgumentList	"""http://"""		625812	1					
ANR	625839	Argument	"""http://"""		625812	0					
ANR	625840	PrimaryExpression	"""http://"""		625812	0					
ANR	625841	CompoundStatement		7:54:120:120	625812	1					
ANR	625842	ExpressionStatement	"amazon_proxy_host = url + strlen ( ""http://"" )"	43:2:1386:1430	625812	0	True				
ANR	625843	AssignmentExpression	"amazon_proxy_host = url + strlen ( ""http://"" )"		625812	0		=			
ANR	625844	Identifier	amazon_proxy_host		625812	0					
ANR	625845	AdditiveExpression	"url + strlen ( ""http://"" )"		625812	1		+			
ANR	625846	Identifier	url		625812	0					
ANR	625847	CallExpression	"strlen ( ""http://"" )"		625812	1					
ANR	625848	Callee	strlen		625812	0					
ANR	625849	Identifier	strlen		625812	0					
ANR	625850	ArgumentList	"""http://"""		625812	1					
ANR	625851	Argument	"""http://"""		625812	0					
ANR	625852	PrimaryExpression	"""http://"""		625812	0					
ANR	625853	ExpressionStatement	amazon_proxy_port = 80	44:2:1434:1456	625812	1	True				
ANR	625854	AssignmentExpression	amazon_proxy_port = 80		625812	0		=			
ANR	625855	Identifier	amazon_proxy_port		625812	0					
ANR	625856	PrimaryExpression	80		625812	1					
ANR	625857	ElseStatement	else		625812	0					
ANR	625858	IfStatement	"if ( ! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) ) )"		625812	0					
ANR	625859	Condition	"! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"	45:11:1469:1517	625812	0	True				
ANR	625860	UnaryOperationExpression	"! strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"		625812	0					
ANR	625861	UnaryOperator	!		625812	0					
ANR	625862	CallExpression	"strncasecmp ( ""https://"" , url , strlen ( ""https://"" ) )"		625812	1					
ANR	625863	Callee	strncasecmp		625812	0					
ANR	625864	Identifier	strncasecmp		625812	0					
ANR	625865	ArgumentList	"""https://"""		625812	1					
ANR	625866	Argument	"""https://"""		625812	0					
ANR	625867	PrimaryExpression	"""https://"""		625812	0					
ANR	625868	Argument	url		625812	1					
ANR	625869	Identifier	url		625812	0					
ANR	625870	Argument	"strlen ( ""https://"" )"		625812	2					
ANR	625871	CallExpression	"strlen ( ""https://"" )"		625812	0					
ANR	625872	Callee	strlen		625812	0					
ANR	625873	Identifier	strlen		625812	0					
ANR	625874	ArgumentList	"""https://"""		625812	1					
ANR	625875	Argument	"""https://"""		625812	0					
ANR	625876	PrimaryExpression	"""https://"""		625812	0					
ANR	625877	CompoundStatement		10:63:259:259	625812	1					
ANR	625878	ExpressionStatement	"amazon_proxy_host = url + strlen ( ""https://"" )"	46:2:1526:1571	625812	0	True				
ANR	625879	AssignmentExpression	"amazon_proxy_host = url + strlen ( ""https://"" )"		625812	0		=			
ANR	625880	Identifier	amazon_proxy_host		625812	0					
ANR	625881	AdditiveExpression	"url + strlen ( ""https://"" )"		625812	1		+			
ANR	625882	Identifier	url		625812	0					
ANR	625883	CallExpression	"strlen ( ""https://"" )"		625812	1					
ANR	625884	Callee	strlen		625812	0					
ANR	625885	Identifier	strlen		625812	0					
ANR	625886	ArgumentList	"""https://"""		625812	1					
ANR	625887	Argument	"""https://"""		625812	0					
ANR	625888	PrimaryExpression	"""https://"""		625812	0					
ANR	625889	ExpressionStatement	amazon_proxy_port = 443	47:2:1575:1598	625812	1	True				
ANR	625890	AssignmentExpression	amazon_proxy_port = 443		625812	0		=			
ANR	625891	Identifier	amazon_proxy_port		625812	0					
ANR	625892	PrimaryExpression	443		625812	1					
ANR	625893	ElseStatement	else		625812	0					
ANR	625894	CompoundStatement		13:7:345:345	625812	0					
ANR	625895	ExpressionStatement	amazon_proxy_host = url	49:2:1611:1634	625812	0	True				
ANR	625896	AssignmentExpression	amazon_proxy_host = url		625812	0		=			
ANR	625897	Identifier	amazon_proxy_host		625812	0					
ANR	625898	Identifier	url		625812	1					
ANR	625899	ExpressionStatement	amazon_proxy_port = 80	50:2:1638:1660	625812	1	True				
ANR	625900	AssignmentExpression	amazon_proxy_port = 80		625812	0		=			
ANR	625901	Identifier	amazon_proxy_port		625812	0					
ANR	625902	PrimaryExpression	80		625812	1					
ANR	625903	IdentifierDeclStatement	size_t pos = amazon_proxy_host . find ( '@' ) ;	56:4:1876:1916	625812	2	True				
ANR	625904	IdentifierDecl	pos = amazon_proxy_host . find ( '@' )		625812	0					
ANR	625905	IdentifierDeclType	size_t		625812	0					
ANR	625906	Identifier	pos		625812	1					
ANR	625907	AssignmentExpression	pos = amazon_proxy_host . find ( '@' )		625812	2		=			
ANR	625908	Identifier	pos		625812	0					
ANR	625909	CallExpression	amazon_proxy_host . find ( '@' )		625812	1					
ANR	625910	Callee	amazon_proxy_host . find		625812	0					
ANR	625911	MemberAccess	amazon_proxy_host . find		625812	0					
ANR	625912	Identifier	amazon_proxy_host		625812	0					
ANR	625913	Identifier	find		625812	1					
ANR	625914	ArgumentList	'@'		625812	1					
ANR	625915	Argument	'@'		625812	0					
ANR	625916	PrimaryExpression	'@'		625812	0					
ANR	625917	IfStatement	if ( std :: string :: npos != pos )		625812	3					
ANR	625918	Condition	std :: string :: npos != pos	57:5:1923:1946	625812	0	True				
ANR	625919	EqualityExpression	std :: string :: npos != pos		625812	0		!=			
ANR	625920	Identifier	std :: string :: npos		625812	0					
ANR	625921	Identifier	pos		625812	1					
ANR	625922	CompoundStatement		22:32:688:688	625812	1					
ANR	625923	ExpressionStatement	"amazon_proxy_user = amazon_proxy_host . substr ( 0 , pos )"	58:3:1955:2007	625812	0	True				
ANR	625924	AssignmentExpression	"amazon_proxy_user = amazon_proxy_host . substr ( 0 , pos )"		625812	0		=			
ANR	625925	Identifier	amazon_proxy_user		625812	0					
ANR	625926	CallExpression	"amazon_proxy_host . substr ( 0 , pos )"		625812	1					
ANR	625927	Callee	amazon_proxy_host . substr		625812	0					
ANR	625928	MemberAccess	amazon_proxy_host . substr		625812	0					
ANR	625929	Identifier	amazon_proxy_host		625812	0					
ANR	625930	Identifier	substr		625812	1					
ANR	625931	ArgumentList	0		625812	1					
ANR	625932	Argument	0		625812	0					
ANR	625933	PrimaryExpression	0		625812	0					
ANR	625934	Argument	pos		625812	1					
ANR	625935	Identifier	pos		625812	0					
ANR	625936	ExpressionStatement	"amazon_proxy_host = amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"	60:3:2016:2101	625812	1	True				
ANR	625937	AssignmentExpression	"amazon_proxy_host = amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		625812	0		=			
ANR	625938	Identifier	amazon_proxy_host		625812	0					
ANR	625939	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		625812	1					
ANR	625940	Callee	amazon_proxy_host . substr		625812	0					
ANR	625941	MemberAccess	amazon_proxy_host . substr		625812	0					
ANR	625942	Identifier	amazon_proxy_host		625812	0					
ANR	625943	Identifier	substr		625812	1					
ANR	625944	ArgumentList	pos + 1		625812	1					
ANR	625945	Argument	pos + 1		625812	0					
ANR	625946	AdditiveExpression	pos + 1		625812	0		+			
ANR	625947	Identifier	pos		625812	0					
ANR	625948	PrimaryExpression	1		625812	1					
ANR	625949	Argument	amazon_proxy_host . length ( )		625812	1					
ANR	625950	CallExpression	amazon_proxy_host . length ( )		625812	0					
ANR	625951	Callee	amazon_proxy_host . length		625812	0					
ANR	625952	MemberAccess	amazon_proxy_host . length		625812	0					
ANR	625953	Identifier	amazon_proxy_host		625812	0					
ANR	625954	Identifier	length		625812	1					
ANR	625955	ArgumentList			625812	1					
ANR	625956	ExpressionStatement	pos = amazon_proxy_user . find ( ':' )	63:6:2110:2143	625812	2	True				
ANR	625957	AssignmentExpression	pos = amazon_proxy_user . find ( ':' )		625812	0		=			
ANR	625958	Identifier	pos		625812	0					
ANR	625959	CallExpression	amazon_proxy_user . find ( ':' )		625812	1					
ANR	625960	Callee	amazon_proxy_user . find		625812	0					
ANR	625961	MemberAccess	amazon_proxy_user . find		625812	0					
ANR	625962	Identifier	amazon_proxy_user		625812	0					
ANR	625963	Identifier	find		625812	1					
ANR	625964	ArgumentList	':'		625812	1					
ANR	625965	Argument	':'		625812	0					
ANR	625966	PrimaryExpression	':'		625812	0					
ANR	625967	IfStatement	if ( std :: string :: npos != pos )		625812	3					
ANR	625968	Condition	std :: string :: npos != pos	64:7:2152:2175	625812	0	True				
ANR	625969	EqualityExpression	std :: string :: npos != pos		625812	0		!=			
ANR	625970	Identifier	std :: string :: npos		625812	0					
ANR	625971	Identifier	pos		625812	1					
ANR	625972	CompoundStatement		29:34:917:917	625812	1					
ANR	625973	ExpressionStatement	"amazon_proxy_passwd = amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"	65:2:2183:2269	625812	0	True				
ANR	625974	AssignmentExpression	"amazon_proxy_passwd = amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"		625812	0		=			
ANR	625975	Identifier	amazon_proxy_passwd		625812	0					
ANR	625976	CallExpression	"amazon_proxy_user . substr ( pos + 1 , amazon_proxy_user . length ( ) )"		625812	1					
ANR	625977	Callee	amazon_proxy_user . substr		625812	0					
ANR	625978	MemberAccess	amazon_proxy_user . substr		625812	0					
ANR	625979	Identifier	amazon_proxy_user		625812	0					
ANR	625980	Identifier	substr		625812	1					
ANR	625981	ArgumentList	pos + 1		625812	1					
ANR	625982	Argument	pos + 1		625812	0					
ANR	625983	AdditiveExpression	pos + 1		625812	0		+			
ANR	625984	Identifier	pos		625812	0					
ANR	625985	PrimaryExpression	1		625812	1					
ANR	625986	Argument	amazon_proxy_user . length ( )		625812	1					
ANR	625987	CallExpression	amazon_proxy_user . length ( )		625812	0					
ANR	625988	Callee	amazon_proxy_user . length		625812	0					
ANR	625989	MemberAccess	amazon_proxy_user . length		625812	0					
ANR	625990	Identifier	amazon_proxy_user		625812	0					
ANR	625991	Identifier	length		625812	1					
ANR	625992	ArgumentList			625812	1					
ANR	625993	ExpressionStatement	"amazon_proxy_user = amazon_proxy_user . substr ( 0 , pos )"	67:2:2273:2325	625812	1	True				
ANR	625994	AssignmentExpression	"amazon_proxy_user = amazon_proxy_user . substr ( 0 , pos )"		625812	0		=			
ANR	625995	Identifier	amazon_proxy_user		625812	0					
ANR	625996	CallExpression	"amazon_proxy_user . substr ( 0 , pos )"		625812	1					
ANR	625997	Callee	amazon_proxy_user . substr		625812	0					
ANR	625998	MemberAccess	amazon_proxy_user . substr		625812	0					
ANR	625999	Identifier	amazon_proxy_user		625812	0					
ANR	626000	Identifier	substr		625812	1					
ANR	626001	ArgumentList	0		625812	1					
ANR	626002	Argument	0		625812	0					
ANR	626003	PrimaryExpression	0		625812	0					
ANR	626004	Argument	pos		625812	1					
ANR	626005	Identifier	pos		625812	0					
ANR	626006	ExpressionStatement	pos = amazon_proxy_host . find ( ':' )	71:4:2340:2373	625812	4	True				
ANR	626007	AssignmentExpression	pos = amazon_proxy_host . find ( ':' )		625812	0		=			
ANR	626008	Identifier	pos		625812	0					
ANR	626009	CallExpression	amazon_proxy_host . find ( ':' )		625812	1					
ANR	626010	Callee	amazon_proxy_host . find		625812	0					
ANR	626011	MemberAccess	amazon_proxy_host . find		625812	0					
ANR	626012	Identifier	amazon_proxy_host		625812	0					
ANR	626013	Identifier	find		625812	1					
ANR	626014	ArgumentList	':'		625812	1					
ANR	626015	Argument	':'		625812	0					
ANR	626016	PrimaryExpression	':'		625812	0					
ANR	626017	IfStatement	if ( std :: string :: npos != pos )		625812	5					
ANR	626018	Condition	std :: string :: npos != pos	72:5:2380:2403	625812	0	True				
ANR	626019	EqualityExpression	std :: string :: npos != pos		625812	0		!=			
ANR	626020	Identifier	std :: string :: npos		625812	0					
ANR	626021	Identifier	pos		625812	1					
ANR	626022	CompoundStatement		38:2:1149:1250	625812	1					
ANR	626023	IdentifierDeclStatement	"int port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) ) ;"	73:2:2411:2512	625812	0	True				
ANR	626024	IdentifierDecl	"port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		625812	0					
ANR	626025	IdentifierDeclType	int		625812	0					
ANR	626026	Identifier	port		625812	1					
ANR	626027	AssignmentExpression	"port = atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		625812	2		=			
ANR	626028	Identifier	port		625812	0					
ANR	626029	CallExpression	"atoi ( amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( ) )"		625812	1					
ANR	626030	Callee	atoi		625812	0					
ANR	626031	Identifier	atoi		625812	0					
ANR	626032	ArgumentList	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		625812	1					
ANR	626033	Argument	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		625812	0					
ANR	626034	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str ( )"		625812	0					
ANR	626035	Callee	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		625812	0					
ANR	626036	MemberAccess	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		625812	0					
ANR	626037	CallExpression	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) )"		625812	0					
ANR	626038	Callee	amazon_proxy_host . substr		625812	0					
ANR	626039	MemberAccess	amazon_proxy_host . substr		625812	0					
ANR	626040	Identifier	amazon_proxy_host		625812	0					
ANR	626041	Identifier	substr		625812	1					
ANR	626042	ArgumentList	pos + 1		625812	1					
ANR	626043	Argument	pos + 1		625812	0					
ANR	626044	AdditiveExpression	pos + 1		625812	0		+			
ANR	626045	Identifier	pos		625812	0					
ANR	626046	PrimaryExpression	1		625812	1					
ANR	626047	Argument	amazon_proxy_host . length ( )		625812	1					
ANR	626048	CallExpression	amazon_proxy_host . length ( )		625812	0					
ANR	626049	Callee	amazon_proxy_host . length		625812	0					
ANR	626050	MemberAccess	amazon_proxy_host . length		625812	0					
ANR	626051	Identifier	amazon_proxy_host		625812	0					
ANR	626052	Identifier	length		625812	1					
ANR	626053	ArgumentList			625812	1					
ANR	626054	Identifier	c_str		625812	1					
ANR	626055	ArgumentList			625812	1					
ANR	626056	IfStatement	if ( port > 0 )		625812	1					
ANR	626057	Condition	port > 0	77:6:2521:2528	625812	0	True				
ANR	626058	RelationalExpression	port > 0		625812	0		>			
ANR	626059	Identifier	port		625812	0					
ANR	626060	PrimaryExpression	0		625812	1					
ANR	626061	CompoundStatement		42:17:1270:1270	625812	1					
ANR	626062	ExpressionStatement	amazon_proxy_port = port	78:3:2537:2561	625812	0	True				
ANR	626063	AssignmentExpression	amazon_proxy_port = port		625812	0		=			
ANR	626064	Identifier	amazon_proxy_port		625812	0					
ANR	626065	Identifier	port		625812	1					
ANR	626066	ExpressionStatement	"amazon_proxy_host = amazon_proxy_host . substr ( 0 , pos )"	81:2:2570:2622	625812	2	True				
ANR	626067	AssignmentExpression	"amazon_proxy_host = amazon_proxy_host . substr ( 0 , pos )"		625812	0		=			
ANR	626068	Identifier	amazon_proxy_host		625812	0					
ANR	626069	CallExpression	"amazon_proxy_host . substr ( 0 , pos )"		625812	1					
ANR	626070	Callee	amazon_proxy_host . substr		625812	0					
ANR	626071	MemberAccess	amazon_proxy_host . substr		625812	0					
ANR	626072	Identifier	amazon_proxy_host		625812	0					
ANR	626073	Identifier	substr		625812	1					
ANR	626074	ArgumentList	0		625812	1					
ANR	626075	Argument	0		625812	0					
ANR	626076	PrimaryExpression	0		625812	0					
ANR	626077	Argument	pos		625812	1					
ANR	626078	Identifier	pos		625812	0					
ANR	626079	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using proxy server, host=%s, port=%d user=%s\\n"" , amazon_proxy_host . c_str ( ) , amazon_proxy_port , amazon_proxy_user . c_str ( ) )"	84:1:2638:2784	625812	6	True				
ANR	626080	CallExpression	"dprintf ( D_ALWAYS , ""Using proxy server, host=%s, port=%d user=%s\\n"" , amazon_proxy_host . c_str ( ) , amazon_proxy_port , amazon_proxy_user . c_str ( ) )"		625812	0					
ANR	626081	Callee	dprintf		625812	0					
ANR	626082	Identifier	dprintf		625812	0					
ANR	626083	ArgumentList	D_ALWAYS		625812	1					
ANR	626084	Argument	D_ALWAYS		625812	0					
ANR	626085	Identifier	D_ALWAYS		625812	0					
ANR	626086	Argument	"""Using proxy server, host=%s, port=%d user=%s\\n"""		625812	1					
ANR	626087	PrimaryExpression	"""Using proxy server, host=%s, port=%d user=%s\\n"""		625812	0					
ANR	626088	Argument	amazon_proxy_host . c_str ( )		625812	2					
ANR	626089	CallExpression	amazon_proxy_host . c_str ( )		625812	0					
ANR	626090	Callee	amazon_proxy_host . c_str		625812	0					
ANR	626091	MemberAccess	amazon_proxy_host . c_str		625812	0					
ANR	626092	Identifier	amazon_proxy_host		625812	0					
ANR	626093	Identifier	c_str		625812	1					
ANR	626094	ArgumentList			625812	1					
ANR	626095	Argument	amazon_proxy_port		625812	3					
ANR	626096	Identifier	amazon_proxy_port		625812	0					
ANR	626097	Argument	amazon_proxy_user . c_str ( )		625812	4					
ANR	626098	CallExpression	amazon_proxy_user . c_str ( )		625812	0					
ANR	626099	Callee	amazon_proxy_user . c_str		625812	0					
ANR	626100	MemberAccess	amazon_proxy_user . c_str		625812	0					
ANR	626101	Identifier	amazon_proxy_user		625812	0					
ANR	626102	Identifier	c_str		625812	1					
ANR	626103	ArgumentList			625812	1					
ANR	626104	ReturnType	void		625812	1					
ANR	626105	Identifier	set_amazon_proxy_server		625812	2					
ANR	626106	ParameterList	const char * url		625812	3					
ANR	626107	Parameter	const char * url	35:29:1243:1257	625812	0	True				
ANR	626108	ParameterType	const char *		625812	0					
ANR	626109	Identifier	url		625812	1					
ANR	626110	CFGEntryNode	ENTRY		625812		True				
ANR	626111	CFGExitNode	EXIT		625812		True				
ANR	626112	Symbol	atoi		625812						
ANR	626113	Symbol	strncasecmp		625812						
ANR	626114	Symbol	amazon_proxy_passwd		625812						
ANR	626115	Symbol	D_ALWAYS		625812						
ANR	626116	Symbol	amazon_proxy_port		625812						
ANR	626117	Symbol	amazon_proxy_user . length		625812						
ANR	626118	Symbol	amazon_proxy_user . c_str		625812						
ANR	626119	Symbol	url		625812						
ANR	626120	Symbol	amazon_proxy_host . substr		625812						
ANR	626121	Symbol	strlen		625812						
ANR	626122	Symbol	std :: string :: npos		625812						
ANR	626123	Symbol	amazon_proxy_user		625812						
ANR	626124	Symbol	amazon_proxy_host . find		625812						
ANR	626125	Symbol	amazon_proxy_user . find		625812						
ANR	626126	Symbol	"amazon_proxy_host . substr ( pos + 1 , amazon_proxy_host . length ( ) ) . c_str"		625812						
ANR	626127	Symbol	amazon_proxy_host		625812						
ANR	626128	Symbol	pos		625812						
ANR	626129	Symbol	amazon_proxy_host . length		625812						
ANR	626130	Symbol	amazon_proxy_user . substr		625812						
ANR	626131	Symbol	port		625812						
ANR	626132	Symbol	amazon_proxy_host . c_str		625812						
ANR	626133	Function	get_amazon_proxy_server	89:0:2789:3129							
ANR	626134	FunctionDef	"get_amazon_proxy_server (const char * & host_name , int & port , const char * & user_name , const char * & passwd)"		626133	0					
ANR	626135	CompoundStatement		90:0:2899:3129	626133	0					
ANR	626136	IfStatement	if ( amazon_proxy_host . empty ( ) == false )		626133	0					
ANR	626137	Condition	amazon_proxy_host . empty ( ) == false	91:5:2906:2939	626133	0	True				
ANR	626138	EqualityExpression	amazon_proxy_host . empty ( ) == false		626133	0		==			
ANR	626139	CallExpression	amazon_proxy_host . empty ( )		626133	0					
ANR	626140	Callee	amazon_proxy_host . empty		626133	0					
ANR	626141	MemberAccess	amazon_proxy_host . empty		626133	0					
ANR	626142	Identifier	amazon_proxy_host		626133	0					
ANR	626143	Identifier	empty		626133	1					
ANR	626144	ArgumentList			626133	1					
ANR	626145	Identifier	false		626133	1					
ANR	626146	CompoundStatement		2:42:43:43	626133	1					
ANR	626147	ExpressionStatement	host_name = amazon_proxy_host . c_str ( )	92:2:2947:2984	626133	0	True				
ANR	626148	AssignmentExpression	host_name = amazon_proxy_host . c_str ( )		626133	0		=			
ANR	626149	Identifier	host_name		626133	0					
ANR	626150	CallExpression	amazon_proxy_host . c_str ( )		626133	1					
ANR	626151	Callee	amazon_proxy_host . c_str		626133	0					
ANR	626152	MemberAccess	amazon_proxy_host . c_str		626133	0					
ANR	626153	Identifier	amazon_proxy_host		626133	0					
ANR	626154	Identifier	c_str		626133	1					
ANR	626155	ArgumentList			626133	1					
ANR	626156	ExpressionStatement	port = amazon_proxy_port	93:2:2988:3012	626133	1	True				
ANR	626157	AssignmentExpression	port = amazon_proxy_port		626133	0		=			
ANR	626158	Identifier	port		626133	0					
ANR	626159	Identifier	amazon_proxy_port		626133	1					
ANR	626160	ExpressionStatement	user_name = amazon_proxy_user . c_str ( )	94:2:3016:3053	626133	2	True				
ANR	626161	AssignmentExpression	user_name = amazon_proxy_user . c_str ( )		626133	0		=			
ANR	626162	Identifier	user_name		626133	0					
ANR	626163	CallExpression	amazon_proxy_user . c_str ( )		626133	1					
ANR	626164	Callee	amazon_proxy_user . c_str		626133	0					
ANR	626165	MemberAccess	amazon_proxy_user . c_str		626133	0					
ANR	626166	Identifier	amazon_proxy_user		626133	0					
ANR	626167	Identifier	c_str		626133	1					
ANR	626168	ArgumentList			626133	1					
ANR	626169	ExpressionStatement	passwd = amazon_proxy_passwd . c_str ( )	95:2:3057:3093	626133	3	True				
ANR	626170	AssignmentExpression	passwd = amazon_proxy_passwd . c_str ( )		626133	0		=			
ANR	626171	Identifier	passwd		626133	0					
ANR	626172	CallExpression	amazon_proxy_passwd . c_str ( )		626133	1					
ANR	626173	Callee	amazon_proxy_passwd . c_str		626133	0					
ANR	626174	MemberAccess	amazon_proxy_passwd . c_str		626133	0					
ANR	626175	Identifier	amazon_proxy_passwd		626133	0					
ANR	626176	Identifier	c_str		626133	1					
ANR	626177	ArgumentList			626133	1					
ANR	626178	ReturnStatement	return true ;	96:2:3097:3108	626133	4	True				
ANR	626179	Identifier	true		626133	0					
ANR	626180	ReturnStatement	return false ;	99:1:3115:3127	626133	1	True				
ANR	626181	Identifier	false		626133	0					
ANR	626182	ReturnType	bool		626133	1					
ANR	626183	Identifier	get_amazon_proxy_server		626133	2					
ANR	626184	ParameterList	"const char * & host_name , int & port , const char * & user_name , const char * & passwd"		626133	3					
ANR	626185	Parameter	const char * & host_name	89:29:2818:2839	626133	0	True				
ANR	626186	ParameterType	const char * &		626133	0					
ANR	626187	Identifier	host_name		626133	1					
ANR	626188	Parameter	int & port	89:53:2842:2850	626133	1	True				
ANR	626189	ParameterType	int &		626133	0					
ANR	626190	Identifier	port		626133	1					
ANR	626191	Parameter	const char * & user_name	89:64:2853:2874	626133	2	True				
ANR	626192	ParameterType	const char * &		626133	0					
ANR	626193	Identifier	user_name		626133	1					
ANR	626194	Parameter	const char * & passwd	89:88:2877:2895	626133	3	True				
ANR	626195	ParameterType	const char * &		626133	0					
ANR	626196	Identifier	passwd		626133	1					
ANR	626197	CFGEntryNode	ENTRY		626133		True				
ANR	626198	CFGExitNode	EXIT		626133		True				
ANR	626199	Symbol	amazon_proxy_host . empty		626133						
ANR	626200	Symbol	amazon_proxy_passwd . c_str		626133						
ANR	626201	Symbol	user_name		626133						
ANR	626202	Symbol	false		626133						
ANR	626203	Symbol	amazon_proxy_passwd		626133						
ANR	626204	Symbol	amazon_proxy_port		626133						
ANR	626205	Symbol	amazon_proxy_user . c_str		626133						
ANR	626206	Symbol	amazon_proxy_user		626133						
ANR	626207	Symbol	amazon_proxy_host		626133						
ANR	626208	Symbol	port		626133						
ANR	626209	Symbol	passwd		626133						
ANR	626210	Symbol	true		626133						
ANR	626211	Symbol	amazon_proxy_host . c_str		626133						
ANR	626212	Symbol	host_name		626133						
ANR	626213	Function	AmazonGahpCommand :: AmazonGahpCommand	102:0:3132:3300							
ANR	626214	FunctionDef	"AmazonGahpCommand :: AmazonGahpCommand (const char * cmd , ioCheckfn iofunc , workerfn workerfunc)"		626213	0					
ANR	626215	CompoundStatement		103:0:3225:3300	626213	0					
ANR	626216	ExpressionStatement	command = cmd	104:1:3228:3241	626213	0	True				
ANR	626217	AssignmentExpression	command = cmd		626213	0		=			
ANR	626218	Identifier	command		626213	0					
ANR	626219	Identifier	cmd		626213	1					
ANR	626220	ExpressionStatement	iocheckfunction = iofunc	105:1:3244:3268	626213	1	True				
ANR	626221	AssignmentExpression	iocheckfunction = iofunc		626213	0		=			
ANR	626222	Identifier	iocheckfunction		626213	0					
ANR	626223	Identifier	iofunc		626213	1					
ANR	626224	ExpressionStatement	workerfunction = workerfunc	106:1:3271:3298	626213	2	True				
ANR	626225	AssignmentExpression	workerfunction = workerfunc		626213	0		=			
ANR	626226	Identifier	workerfunction		626213	0					
ANR	626227	Identifier	workerfunc		626213	1					
ANR	626228	Identifier	AmazonGahpCommand :: AmazonGahpCommand		626213	1					
ANR	626229	ParameterList	"const char * cmd , ioCheckfn iofunc , workerfn workerfunc"		626213	2					
ANR	626230	Parameter	const char * cmd	102:37:3169:3183	626213	0	True				
ANR	626231	ParameterType	const char *		626213	0					
ANR	626232	Identifier	cmd		626213	1					
ANR	626233	Parameter	ioCheckfn iofunc	102:54:3186:3201	626213	1	True				
ANR	626234	ParameterType	ioCheckfn		626213	0					
ANR	626235	Identifier	iofunc		626213	1					
ANR	626236	Parameter	workerfn workerfunc	102:72:3204:3222	626213	2	True				
ANR	626237	ParameterType	workerfn		626213	0					
ANR	626238	Identifier	workerfunc		626213	1					
ANR	626239	CFGEntryNode	ENTRY		626213		True				
ANR	626240	CFGExitNode	EXIT		626213		True				
ANR	626241	Symbol	iocheckfunction		626213						
ANR	626242	Symbol	workerfunc		626213						
ANR	626243	Symbol	iofunc		626213						
ANR	626244	Symbol	cmd		626213						
ANR	626245	Symbol	workerfunction		626213						
ANR	626246	Symbol	command		626213						
ANR	626247	Function	registerAmazonGahpCommand	109:0:3303:3577							
ANR	626248	FunctionDef	"registerAmazonGahpCommand (const char * command , ioCheckfn iofunc , workerfn workerfunc)"		626247	0					
ANR	626249	CompoundStatement		111:0:3394:3577	626247	0					
ANR	626250	IfStatement	if ( ! command )		626247	0					
ANR	626251	Condition	! command	112:5:3401:3408	626247	0	True				
ANR	626252	UnaryOperationExpression	! command		626247	0					
ANR	626253	UnaryOperator	!		626247	0					
ANR	626254	Identifier	command		626247	1					
ANR	626255	CompoundStatement		2:16:17:17	626247	1					
ANR	626256	ReturnStatement	return ;	113:2:3416:3422	626247	0	True				
ANR	626257	IdentifierDeclStatement	"AmazonGahpCommand * newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc ) ;"	116:1:3429:3511	626247	1	True				
ANR	626258	IdentifierDecl	"* newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc )"		626247	0					
ANR	626259	IdentifierDeclType	AmazonGahpCommand *		626247	0					
ANR	626260	Identifier	newcommand		626247	1					
ANR	626261	AssignmentExpression	"* newcommand = new AmazonGahpCommand ( command , iofunc , workerfunc )"		626247	2		=			
ANR	626262	Identifier	newcommand		626247	0					
ANR	626263	Expression	"command , iofunc , workerfunc"		626247	1					
ANR	626264	Identifier	command		626247	0					
ANR	626265	Expression	"iofunc , workerfunc"		626247	1					
ANR	626266	Identifier	iofunc		626247	0					
ANR	626267	Identifier	workerfunc		626247	1					
ANR	626268	ExpressionStatement	ASSERT ( newcommand )	117:1:3514:3532	626247	2	True				
ANR	626269	CallExpression	ASSERT ( newcommand )		626247	0					
ANR	626270	Callee	ASSERT		626247	0					
ANR	626271	Identifier	ASSERT		626247	0					
ANR	626272	ArgumentList	newcommand		626247	1					
ANR	626273	Argument	newcommand		626247	0					
ANR	626274	Identifier	newcommand		626247	0					
ANR	626275	ExpressionStatement	amazon_gahp_commands . Append ( newcommand )	119:1:3536:3575	626247	3	True				
ANR	626276	CallExpression	amazon_gahp_commands . Append ( newcommand )		626247	0					
ANR	626277	Callee	amazon_gahp_commands . Append		626247	0					
ANR	626278	MemberAccess	amazon_gahp_commands . Append		626247	0					
ANR	626279	Identifier	amazon_gahp_commands		626247	0					
ANR	626280	Identifier	Append		626247	1					
ANR	626281	ArgumentList	newcommand		626247	1					
ANR	626282	Argument	newcommand		626247	0					
ANR	626283	Identifier	newcommand		626247	0					
ANR	626284	ReturnType	void		626247	1					
ANR	626285	Identifier	registerAmazonGahpCommand		626247	2					
ANR	626286	ParameterList	"const char * command , ioCheckfn iofunc , workerfn workerfunc"		626247	3					
ANR	626287	Parameter	const char * command	110:26:3334:3352	626247	0	True				
ANR	626288	ParameterType	const char *		626247	0					
ANR	626289	Identifier	command		626247	1					
ANR	626290	Parameter	ioCheckfn iofunc	110:47:3355:3370	626247	1	True				
ANR	626291	ParameterType	ioCheckfn		626247	0					
ANR	626292	Identifier	iofunc		626247	1					
ANR	626293	Parameter	workerfn workerfunc	110:65:3373:3391	626247	2	True				
ANR	626294	ParameterType	workerfn		626247	0					
ANR	626295	Identifier	workerfunc		626247	1					
ANR	626296	CFGEntryNode	ENTRY		626247		True				
ANR	626297	CFGExitNode	EXIT		626247		True				
ANR	626298	Symbol	workerfunc		626247						
ANR	626299	Symbol	iofunc		626247						
ANR	626300	Symbol	amazon_gahp_commands		626247						
ANR	626301	Symbol	newcommand		626247						
ANR	626302	Symbol	command		626247						
ANR	626303	Function	numofAmazonCommands	122:0:3580:3651							
ANR	626304	FunctionDef	numofAmazonCommands ()		626303	0					
ANR	626305	CompoundStatement		124:0:3610:3651	626303	0					
ANR	626306	ReturnStatement	return amazon_gahp_commands . Number ( ) ;	125:1:3613:3649	626303	0	True				
ANR	626307	CallExpression	amazon_gahp_commands . Number ( )		626303	0					
ANR	626308	Callee	amazon_gahp_commands . Number		626303	0					
ANR	626309	MemberAccess	amazon_gahp_commands . Number		626303	0					
ANR	626310	Identifier	amazon_gahp_commands		626303	0					
ANR	626311	Identifier	Number		626303	1					
ANR	626312	ArgumentList			626303	1					
ANR	626313	ReturnType	int		626303	1					
ANR	626314	Identifier	numofAmazonCommands		626303	2					
ANR	626315	ParameterList			626303	3					
ANR	626316	CFGEntryNode	ENTRY		626303		True				
ANR	626317	CFGExitNode	EXIT		626303		True				
ANR	626318	Symbol	amazon_gahp_commands		626303						
ANR	626319	Symbol	amazon_gahp_commands . Number		626303						
ANR	626320	Function	allAmazonCommands	128:0:3654:3901							
ANR	626321	FunctionDef	allAmazonCommands (StringList & output)		626320	0					
ANR	626322	CompoundStatement		130:0:3697:3901	626320	0					
ANR	626323	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	131:1:3700:3733	626320	0	True				
ANR	626324	IdentifierDecl	* one_cmd = NULL		626320	0					
ANR	626325	IdentifierDeclType	AmazonGahpCommand *		626320	0					
ANR	626326	Identifier	one_cmd		626320	1					
ANR	626327	AssignmentExpression	* one_cmd = NULL		626320	2		=			
ANR	626328	Identifier	NULL		626320	0					
ANR	626329	Identifier	NULL		626320	1					
ANR	626330	ExpressionStatement	amazon_gahp_commands . Rewind ( )	133:1:3737:3766	626320	1	True				
ANR	626331	CallExpression	amazon_gahp_commands . Rewind ( )		626320	0					
ANR	626332	Callee	amazon_gahp_commands . Rewind		626320	0					
ANR	626333	MemberAccess	amazon_gahp_commands . Rewind		626320	0					
ANR	626334	Identifier	amazon_gahp_commands		626320	0					
ANR	626335	Identifier	Rewind		626320	1					
ANR	626336	ArgumentList			626320	1					
ANR	626337	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		626320	2					
ANR	626338	Condition	amazon_gahp_commands . Next ( one_cmd )	134:8:3776:3809	626320	0	True				
ANR	626339	CallExpression	amazon_gahp_commands . Next ( one_cmd )		626320	0					
ANR	626340	Callee	amazon_gahp_commands . Next		626320	0					
ANR	626341	MemberAccess	amazon_gahp_commands . Next		626320	0					
ANR	626342	Identifier	amazon_gahp_commands		626320	0					
ANR	626343	Identifier	Next		626320	1					
ANR	626344	ArgumentList	one_cmd		626320	1					
ANR	626345	Argument	one_cmd		626320	0					
ANR	626346	Identifier	one_cmd		626320	0					
ANR	626347	CompoundStatement		5:45:115:115	626320	1					
ANR	626348	ExpressionStatement	output . append ( one_cmd -> command . c_str ( ) )	135:2:3817:3856	626320	0	True				
ANR	626349	CallExpression	output . append ( one_cmd -> command . c_str ( ) )		626320	0					
ANR	626350	Callee	output . append		626320	0					
ANR	626351	MemberAccess	output . append		626320	0					
ANR	626352	Identifier	output		626320	0					
ANR	626353	Identifier	append		626320	1					
ANR	626354	ArgumentList	one_cmd -> command . c_str ( )		626320	1					
ANR	626355	Argument	one_cmd -> command . c_str ( )		626320	0					
ANR	626356	CallExpression	one_cmd -> command . c_str ( )		626320	0					
ANR	626357	Callee	one_cmd -> command . c_str		626320	0					
ANR	626358	MemberAccess	one_cmd -> command . c_str		626320	0					
ANR	626359	PtrMemberAccess	one_cmd -> command		626320	0					
ANR	626360	Identifier	one_cmd		626320	0					
ANR	626361	Identifier	command		626320	1					
ANR	626362	Identifier	c_str		626320	1					
ANR	626363	ArgumentList			626320	1					
ANR	626364	ReturnStatement	return amazon_gahp_commands . Number ( ) ;	138:1:3863:3899	626320	3	True				
ANR	626365	CallExpression	amazon_gahp_commands . Number ( )		626320	0					
ANR	626366	Callee	amazon_gahp_commands . Number		626320	0					
ANR	626367	MemberAccess	amazon_gahp_commands . Number		626320	0					
ANR	626368	Identifier	amazon_gahp_commands		626320	0					
ANR	626369	Identifier	Number		626320	1					
ANR	626370	ArgumentList			626320	1					
ANR	626371	ReturnType	int		626320	1					
ANR	626372	Identifier	allAmazonCommands		626320	2					
ANR	626373	ParameterList	StringList & output		626320	3					
ANR	626374	Parameter	StringList & output	129:18:3677:3694	626320	0	True				
ANR	626375	ParameterType	StringList &		626320	0					
ANR	626376	Identifier	output		626320	1					
ANR	626377	CFGEntryNode	ENTRY		626320		True				
ANR	626378	CFGExitNode	EXIT		626320		True				
ANR	626379	Symbol	output		626320						
ANR	626380	Symbol	NULL		626320						
ANR	626381	Symbol	amazon_gahp_commands		626320						
ANR	626382	Symbol	one_cmd -> command		626320						
ANR	626383	Symbol	amazon_gahp_commands . Number		626320						
ANR	626384	Symbol	one_cmd		626320						
ANR	626385	Symbol	amazon_gahp_commands . Next		626320						
ANR	626386	Symbol	one_cmd -> command . c_str		626320						
ANR	626387	Symbol	* one_cmd		626320						
ANR	626388	Function	executeIOCheckFunc	141:0:3904:4325							
ANR	626389	FunctionDef	"executeIOCheckFunc (const char * cmd , char * * argv , int argc)"		626388	0					
ANR	626390	CompoundStatement		143:0:3968:4325	626388	0					
ANR	626391	IfStatement	if ( ! cmd )		626388	0					
ANR	626392	Condition	! cmd	144:4:3974:3977	626388	0	True				
ANR	626393	UnaryOperationExpression	! cmd		626388	0					
ANR	626394	UnaryOperator	!		626388	0					
ANR	626395	Identifier	cmd		626388	1					
ANR	626396	CompoundStatement		2:10:11:11	626388	1					
ANR	626397	ReturnStatement	return false ;	145:2:3984:3996	626388	0	True				
ANR	626398	Identifier	false		626388	0					
ANR	626399	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	148:1:4003:4036	626388	1	True				
ANR	626400	IdentifierDecl	* one_cmd = NULL		626388	0					
ANR	626401	IdentifierDeclType	AmazonGahpCommand *		626388	0					
ANR	626402	Identifier	one_cmd		626388	1					
ANR	626403	AssignmentExpression	* one_cmd = NULL		626388	2		=			
ANR	626404	Identifier	NULL		626388	0					
ANR	626405	Identifier	NULL		626388	1					
ANR	626406	ExpressionStatement	amazon_gahp_commands . Rewind ( )	150:1:4040:4069	626388	2	True				
ANR	626407	CallExpression	amazon_gahp_commands . Rewind ( )		626388	0					
ANR	626408	Callee	amazon_gahp_commands . Rewind		626388	0					
ANR	626409	MemberAccess	amazon_gahp_commands . Rewind		626388	0					
ANR	626410	Identifier	amazon_gahp_commands		626388	0					
ANR	626411	Identifier	Rewind		626388	1					
ANR	626412	ArgumentList			626388	1					
ANR	626413	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		626388	3					
ANR	626414	Condition	amazon_gahp_commands . Next ( one_cmd )	151:8:4079:4112	626388	0	True				
ANR	626415	CallExpression	amazon_gahp_commands . Next ( one_cmd )		626388	0					
ANR	626416	Callee	amazon_gahp_commands . Next		626388	0					
ANR	626417	MemberAccess	amazon_gahp_commands . Next		626388	0					
ANR	626418	Identifier	amazon_gahp_commands		626388	0					
ANR	626419	Identifier	Next		626388	1					
ANR	626420	ArgumentList	one_cmd		626388	1					
ANR	626421	Argument	one_cmd		626388	0					
ANR	626422	Identifier	one_cmd		626388	0					
ANR	626423	CompoundStatement		9:45:147:147	626388	1					
ANR	626424	IfStatement	"if ( ! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction )"		626388	0					
ANR	626425	Condition	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction"	152:6:4124:4198	626388	0	True				
ANR	626426	AndExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> iocheckfunction"		626388	0		&&			
ANR	626427	UnaryOperationExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		626388	0					
ANR	626428	UnaryOperator	!		626388	0					
ANR	626429	CallExpression	"strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		626388	1					
ANR	626430	Callee	strcasecmp		626388	0					
ANR	626431	Identifier	strcasecmp		626388	0					
ANR	626432	ArgumentList	one_cmd -> command . c_str ( )		626388	1					
ANR	626433	Argument	one_cmd -> command . c_str ( )		626388	0					
ANR	626434	CallExpression	one_cmd -> command . c_str ( )		626388	0					
ANR	626435	Callee	one_cmd -> command . c_str		626388	0					
ANR	626436	MemberAccess	one_cmd -> command . c_str		626388	0					
ANR	626437	PtrMemberAccess	one_cmd -> command		626388	0					
ANR	626438	Identifier	one_cmd		626388	0					
ANR	626439	Identifier	command		626388	1					
ANR	626440	Identifier	c_str		626388	1					
ANR	626441	ArgumentList			626388	1					
ANR	626442	Argument	cmd		626388	1					
ANR	626443	Identifier	cmd		626388	0					
ANR	626444	PtrMemberAccess	one_cmd -> iocheckfunction		626388	1					
ANR	626445	Identifier	one_cmd		626388	0					
ANR	626446	Identifier	iocheckfunction		626388	1					
ANR	626447	CompoundStatement		11:31:233:233	626388	1					
ANR	626448	ReturnStatement	"return one_cmd -> iocheckfunction ( argv , argc ) ;"	154:3:4207:4250	626388	0	True				
ANR	626449	CallExpression	"one_cmd -> iocheckfunction ( argv , argc )"		626388	0					
ANR	626450	Callee	one_cmd -> iocheckfunction		626388	0					
ANR	626451	PtrMemberAccess	one_cmd -> iocheckfunction		626388	0					
ANR	626452	Identifier	one_cmd		626388	0					
ANR	626453	Identifier	iocheckfunction		626388	1					
ANR	626454	ArgumentList	argv		626388	1					
ANR	626455	Argument	argv		626388	0					
ANR	626456	Identifier	argv		626388	0					
ANR	626457	Argument	argc		626388	1					
ANR	626458	Identifier	argc		626388	0					
ANR	626459	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"	158:1:4261:4308	626388	4	True				
ANR	626460	CallExpression	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"		626388	0					
ANR	626461	Callee	dprintf		626388	0					
ANR	626462	Identifier	dprintf		626388	0					
ANR	626463	ArgumentList	D_ALWAYS		626388	1					
ANR	626464	Argument	D_ALWAYS		626388	0					
ANR	626465	Identifier	D_ALWAYS		626388	0					
ANR	626466	Argument	"""Unknown command %s\\n"""		626388	1					
ANR	626467	PrimaryExpression	"""Unknown command %s\\n"""		626388	0					
ANR	626468	Argument	cmd		626388	2					
ANR	626469	Identifier	cmd		626388	0					
ANR	626470	ReturnStatement	return false ;	159:1:4311:4323	626388	5	True				
ANR	626471	Identifier	false		626388	0					
ANR	626472	ReturnType	bool		626388	1					
ANR	626473	Identifier	executeIOCheckFunc		626388	2					
ANR	626474	ParameterList	"const char * cmd , char * * argv , int argc"		626388	3					
ANR	626475	Parameter	const char * cmd	142:19:3928:3942	626388	0	True				
ANR	626476	ParameterType	const char *		626388	0					
ANR	626477	Identifier	cmd		626388	1					
ANR	626478	Parameter	char * * argv	142:36:3945:3955	626388	1	True				
ANR	626479	ParameterType	char * *		626388	0					
ANR	626480	Identifier	argv		626388	1					
ANR	626481	Parameter	int argc	142:49:3958:3965	626388	2	True				
ANR	626482	ParameterType	int		626388	0					
ANR	626483	Identifier	argc		626388	1					
ANR	626484	CFGEntryNode	ENTRY		626388		True				
ANR	626485	CFGExitNode	EXIT		626388		True				
ANR	626486	Symbol	argc		626388						
ANR	626487	Symbol	NULL		626388						
ANR	626488	Symbol	one_cmd		626388						
ANR	626489	Symbol	one_cmd -> iocheckfunction		626388						
ANR	626490	Symbol	false		626388						
ANR	626491	Symbol	D_ALWAYS		626388						
ANR	626492	Symbol	argv		626388						
ANR	626493	Symbol	* one_cmd		626388						
ANR	626494	Symbol	amazon_gahp_commands		626388						
ANR	626495	Symbol	one_cmd -> command		626388						
ANR	626496	Symbol	amazon_gahp_commands . Next		626388						
ANR	626497	Symbol	one_cmd -> command . c_str		626388						
ANR	626498	Symbol	cmd		626388						
ANR	626499	Symbol	strcasecmp		626388						
ANR	626500	Function	executeWorkerFunc	162:0:4328:4787							
ANR	626501	FunctionDef	"executeWorkerFunc (const char * cmd , char * * argv , int argc , std :: string & output_string)"		626500	0					
ANR	626502	CompoundStatement		164:0:4419:4787	626500	0					
ANR	626503	IfStatement	if ( ! cmd )		626500	0					
ANR	626504	Condition	! cmd	165:4:4425:4428	626500	0	True				
ANR	626505	UnaryOperationExpression	! cmd		626500	0					
ANR	626506	UnaryOperator	!		626500	0					
ANR	626507	Identifier	cmd		626500	1					
ANR	626508	CompoundStatement		2:10:11:11	626500	1					
ANR	626509	ReturnStatement	return false ;	166:2:4435:4447	626500	0	True				
ANR	626510	Identifier	false		626500	0					
ANR	626511	IdentifierDeclStatement	AmazonGahpCommand * one_cmd = NULL ;	169:1:4454:4487	626500	1	True				
ANR	626512	IdentifierDecl	* one_cmd = NULL		626500	0					
ANR	626513	IdentifierDeclType	AmazonGahpCommand *		626500	0					
ANR	626514	Identifier	one_cmd		626500	1					
ANR	626515	AssignmentExpression	* one_cmd = NULL		626500	2		=			
ANR	626516	Identifier	NULL		626500	0					
ANR	626517	Identifier	NULL		626500	1					
ANR	626518	ExpressionStatement	amazon_gahp_commands . Rewind ( )	171:1:4491:4520	626500	2	True				
ANR	626519	CallExpression	amazon_gahp_commands . Rewind ( )		626500	0					
ANR	626520	Callee	amazon_gahp_commands . Rewind		626500	0					
ANR	626521	MemberAccess	amazon_gahp_commands . Rewind		626500	0					
ANR	626522	Identifier	amazon_gahp_commands		626500	0					
ANR	626523	Identifier	Rewind		626500	1					
ANR	626524	ArgumentList			626500	1					
ANR	626525	WhileStatement	while ( amazon_gahp_commands . Next ( one_cmd ) )		626500	3					
ANR	626526	Condition	amazon_gahp_commands . Next ( one_cmd )	172:8:4530:4563	626500	0	True				
ANR	626527	CallExpression	amazon_gahp_commands . Next ( one_cmd )		626500	0					
ANR	626528	Callee	amazon_gahp_commands . Next		626500	0					
ANR	626529	MemberAccess	amazon_gahp_commands . Next		626500	0					
ANR	626530	Identifier	amazon_gahp_commands		626500	0					
ANR	626531	Identifier	Next		626500	1					
ANR	626532	ArgumentList	one_cmd		626500	1					
ANR	626533	Argument	one_cmd		626500	0					
ANR	626534	Identifier	one_cmd		626500	0					
ANR	626535	CompoundStatement		9:45:147:147	626500	1					
ANR	626536	IfStatement	"if ( ! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction )"		626500	0					
ANR	626537	Condition	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction"	173:6:4575:4647	626500	0	True				
ANR	626538	AndExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd ) && one_cmd -> workerfunction"		626500	0		&&			
ANR	626539	UnaryOperationExpression	"! strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		626500	0					
ANR	626540	UnaryOperator	!		626500	0					
ANR	626541	CallExpression	"strcasecmp ( one_cmd -> command . c_str ( ) , cmd )"		626500	1					
ANR	626542	Callee	strcasecmp		626500	0					
ANR	626543	Identifier	strcasecmp		626500	0					
ANR	626544	ArgumentList	one_cmd -> command . c_str ( )		626500	1					
ANR	626545	Argument	one_cmd -> command . c_str ( )		626500	0					
ANR	626546	CallExpression	one_cmd -> command . c_str ( )		626500	0					
ANR	626547	Callee	one_cmd -> command . c_str		626500	0					
ANR	626548	MemberAccess	one_cmd -> command . c_str		626500	0					
ANR	626549	PtrMemberAccess	one_cmd -> command		626500	0					
ANR	626550	Identifier	one_cmd		626500	0					
ANR	626551	Identifier	command		626500	1					
ANR	626552	Identifier	c_str		626500	1					
ANR	626553	ArgumentList			626500	1					
ANR	626554	Argument	cmd		626500	1					
ANR	626555	Identifier	cmd		626500	0					
ANR	626556	PtrMemberAccess	one_cmd -> workerfunction		626500	1					
ANR	626557	Identifier	one_cmd		626500	0					
ANR	626558	Identifier	workerfunction		626500	1					
ANR	626559	CompoundStatement		11:29:231:231	626500	1					
ANR	626560	ReturnStatement	"return one_cmd -> workerfunction ( argv , argc , output_string ) ;"	175:3:4656:4713	626500	0	True				
ANR	626561	CallExpression	"one_cmd -> workerfunction ( argv , argc , output_string )"		626500	0					
ANR	626562	Callee	one_cmd -> workerfunction		626500	0					
ANR	626563	PtrMemberAccess	one_cmd -> workerfunction		626500	0					
ANR	626564	Identifier	one_cmd		626500	0					
ANR	626565	Identifier	workerfunction		626500	1					
ANR	626566	ArgumentList	argv		626500	1					
ANR	626567	Argument	argv		626500	0					
ANR	626568	Identifier	argv		626500	0					
ANR	626569	Argument	argc		626500	1					
ANR	626570	Identifier	argc		626500	0					
ANR	626571	Argument	output_string		626500	2					
ANR	626572	Identifier	output_string		626500	0					
ANR	626573	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"	178:1:4723:4770	626500	4	True				
ANR	626574	CallExpression	"dprintf ( D_ALWAYS , ""Unknown command %s\\n"" , cmd )"		626500	0					
ANR	626575	Callee	dprintf		626500	0					
ANR	626576	Identifier	dprintf		626500	0					
ANR	626577	ArgumentList	D_ALWAYS		626500	1					
ANR	626578	Argument	D_ALWAYS		626500	0					
ANR	626579	Identifier	D_ALWAYS		626500	0					
ANR	626580	Argument	"""Unknown command %s\\n"""		626500	1					
ANR	626581	PrimaryExpression	"""Unknown command %s\\n"""		626500	0					
ANR	626582	Argument	cmd		626500	2					
ANR	626583	Identifier	cmd		626500	0					
ANR	626584	ReturnStatement	return false ;	179:1:4773:4785	626500	5	True				
ANR	626585	Identifier	false		626500	0					
ANR	626586	ReturnType	bool		626500	1					
ANR	626587	Identifier	executeWorkerFunc		626500	2					
ANR	626588	ParameterList	"const char * cmd , char * * argv , int argc , std :: string & output_string"		626500	3					
ANR	626589	Parameter	const char * cmd	163:18:4351:4365	626500	0	True				
ANR	626590	ParameterType	const char *		626500	0					
ANR	626591	Identifier	cmd		626500	1					
ANR	626592	Parameter	char * * argv	163:35:4368:4378	626500	1	True				
ANR	626593	ParameterType	char * *		626500	0					
ANR	626594	Identifier	argv		626500	1					
ANR	626595	Parameter	int argc	163:48:4381:4388	626500	2	True				
ANR	626596	ParameterType	int		626500	0					
ANR	626597	Identifier	argc		626500	1					
ANR	626598	Parameter	std :: string & output_string	163:58:4391:4416	626500	3	True				
ANR	626599	ParameterType	std :: string &		626500	0					
ANR	626600	Identifier	output_string		626500	1					
ANR	626601	CFGEntryNode	ENTRY		626500		True				
ANR	626602	CFGExitNode	EXIT		626500		True				
ANR	626603	Symbol	argc		626500						
ANR	626604	Symbol	NULL		626500						
ANR	626605	Symbol	one_cmd -> workerfunction		626500						
ANR	626606	Symbol	one_cmd		626500						
ANR	626607	Symbol	false		626500						
ANR	626608	Symbol	D_ALWAYS		626500						
ANR	626609	Symbol	argv		626500						
ANR	626610	Symbol	* one_cmd		626500						
ANR	626611	Symbol	amazon_gahp_commands		626500						
ANR	626612	Symbol	one_cmd -> command		626500						
ANR	626613	Symbol	output_string		626500						
ANR	626614	Symbol	amazon_gahp_commands . Next		626500						
ANR	626615	Symbol	one_cmd -> command . c_str		626500						
ANR	626616	Symbol	cmd		626500						
ANR	626617	Symbol	strcasecmp		626500						
ANR	626618	Function	parse_gahp_command	182:0:4790:5844							
ANR	626619	FunctionDef	"parse_gahp_command (const char * raw , Gahp_Args * args)"		626618	0					
ANR	626620	CompoundStatement		183:54:4848:5844	626618	0					
ANR	626621	IfStatement	if ( ! raw )		626618	0					
ANR	626622	Condition	! raw	185:5:4856:4859	626618	0	True				
ANR	626623	UnaryOperationExpression	! raw		626618	0					
ANR	626624	UnaryOperator	!		626618	0					
ANR	626625	Identifier	raw		626618	1					
ANR	626626	CompoundStatement		3:11:13:13	626618	1					
ANR	626627	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR parse_gahp_command: empty command\\n"" )"	186:2:4866:4927	626618	0	True				
ANR	626628	CallExpression	"dprintf ( D_ALWAYS , ""ERROR parse_gahp_command: empty command\\n"" )"		626618	0					
ANR	626629	Callee	dprintf		626618	0					
ANR	626630	Identifier	dprintf		626618	0					
ANR	626631	ArgumentList	D_ALWAYS		626618	1					
ANR	626632	Argument	D_ALWAYS		626618	0					
ANR	626633	Identifier	D_ALWAYS		626618	0					
ANR	626634	Argument	"""ERROR parse_gahp_command: empty command\\n"""		626618	1					
ANR	626635	PrimaryExpression	"""ERROR parse_gahp_command: empty command\\n"""		626618	0					
ANR	626636	ReturnStatement	return FALSE ;	187:2:4931:4943	626618	1	True				
ANR	626637	Identifier	FALSE		626618	0					
ANR	626638	ExpressionStatement	args -> reset ( )	190:1:4950:4963	626618	1	True				
ANR	626639	CallExpression	args -> reset ( )		626618	0					
ANR	626640	Callee	args -> reset		626618	0					
ANR	626641	PtrMemberAccess	args -> reset		626618	0					
ANR	626642	Identifier	args		626618	0					
ANR	626643	Identifier	reset		626618	1					
ANR	626644	ArgumentList			626618	1					
ANR	626645	IdentifierDeclStatement	int beginning = 0 ;	192:1:4967:4984	626618	2	True				
ANR	626646	IdentifierDecl	beginning = 0		626618	0					
ANR	626647	IdentifierDeclType	int		626618	0					
ANR	626648	Identifier	beginning		626618	1					
ANR	626649	AssignmentExpression	beginning = 0		626618	2		=			
ANR	626650	Identifier	beginning		626618	0					
ANR	626651	PrimaryExpression	0		626618	1					
ANR	626652	IdentifierDeclStatement	int len = strlen ( raw ) ;	194:1:4988:5007	626618	3	True				
ANR	626653	IdentifierDecl	len = strlen ( raw )		626618	0					
ANR	626654	IdentifierDeclType	int		626618	0					
ANR	626655	Identifier	len		626618	1					
ANR	626656	AssignmentExpression	len = strlen ( raw )		626618	2		=			
ANR	626657	Identifier	len		626618	0					
ANR	626658	CallExpression	strlen ( raw )		626618	1					
ANR	626659	Callee	strlen		626618	0					
ANR	626660	Identifier	strlen		626618	0					
ANR	626661	ArgumentList	raw		626618	1					
ANR	626662	Argument	raw		626618	0					
ANR	626663	Identifier	raw		626618	0					
ANR	626664	IdentifierDeclStatement	char * buff = ( char * ) malloc ( len + 1 ) ;	196:1:5011:5045	626618	4	True				
ANR	626665	IdentifierDecl	* buff = ( char * ) malloc ( len + 1 )		626618	0					
ANR	626666	IdentifierDeclType	char *		626618	0					
ANR	626667	Identifier	buff		626618	1					
ANR	626668	AssignmentExpression	* buff = ( char * ) malloc ( len + 1 )		626618	2		=			
ANR	626669	Identifier	buff		626618	0					
ANR	626670	CastExpression	( char * ) malloc ( len + 1 )		626618	1					
ANR	626671	CastTarget	char *		626618	0					
ANR	626672	CallExpression	malloc ( len + 1 )		626618	1					
ANR	626673	Callee	malloc		626618	0					
ANR	626674	Identifier	malloc		626618	0					
ANR	626675	ArgumentList	len + 1		626618	1					
ANR	626676	Argument	len + 1		626618	0					
ANR	626677	AdditiveExpression	len + 1		626618	0		+			
ANR	626678	Identifier	len		626618	0					
ANR	626679	PrimaryExpression	1		626618	1					
ANR	626680	IdentifierDeclStatement	int buff_len = 0 ;	197:1:5048:5064	626618	5	True				
ANR	626681	IdentifierDecl	buff_len = 0		626618	0					
ANR	626682	IdentifierDeclType	int		626618	0					
ANR	626683	Identifier	buff_len		626618	1					
ANR	626684	AssignmentExpression	buff_len = 0		626618	2		=			
ANR	626685	Identifier	buff_len		626618	0					
ANR	626686	PrimaryExpression	0		626618	1					
ANR	626687	ForStatement	for ( int i = 0 ; i < len ; i ++ )		626618	6					
ANR	626688	ForInit	int i = 0 ;	199:6:5073:5082	626618	0	True				
ANR	626689	IdentifierDeclStatement	int i = 0 ;		626618	0					
ANR	626690	IdentifierDecl	i = 0		626618	0					
ANR	626691	IdentifierDeclType	int		626618	0					
ANR	626692	Identifier	i		626618	1					
ANR	626693	AssignmentExpression	i = 0		626618	2		=			
ANR	626694	Identifier	i		626618	0					
ANR	626695	PrimaryExpression	0		626618	1					
ANR	626696	Condition	i < len	199:17:5084:5088	626618	1	True				
ANR	626697	RelationalExpression	i < len		626618	0		<			
ANR	626698	Identifier	i		626618	0					
ANR	626699	Identifier	len		626618	1					
ANR	626700	PostIncDecOperationExpression	i ++	199:24:5091:5093	626618	2	True				
ANR	626701	Identifier	i		626618	0					
ANR	626702	IncDec	++		626618	1					
ANR	626703	CompoundStatement		17:29:247:247	626618	3					
ANR	626704	IfStatement	if ( raw [ i ] == '\\\\' )		626618	0					
ANR	626705	Condition	raw [ i ] == '\\\\'	201:7:5106:5119	626618	0	True				
ANR	626706	EqualityExpression	raw [ i ] == '\\\\'		626618	0		==			
ANR	626707	ArrayIndexing	raw [ i ]		626618	0					
ANR	626708	Identifier	raw		626618	0					
ANR	626709	Identifier	i		626618	1					
ANR	626710	PrimaryExpression	'\\\\'		626618	1					
ANR	626711	CompoundStatement		19:24:274:274	626618	1					
ANR	626712	ExpressionStatement	i ++	202:3:5128:5131	626618	0	True				
ANR	626713	PostIncDecOperationExpression	i ++		626618	0					
ANR	626714	Identifier	i		626618	0					
ANR	626715	IncDec	++		626618	1					
ANR	626716	IfStatement	if ( i < ( len - 1 ) )		626618	1					
ANR	626717	Condition	i < ( len - 1 )	203:7:5160:5168	626618	0	True				
ANR	626718	RelationalExpression	i < ( len - 1 )		626618	0		<			
ANR	626719	Identifier	i		626618	0					
ANR	626720	AdditiveExpression	len - 1		626618	1		-			
ANR	626721	Identifier	len		626618	0					
ANR	626722	PrimaryExpression	1		626618	1					
ANR	626723	ExpressionStatement	buff [ buff_len ++ ] = raw [ i ]	204:4:5175:5200	626618	1	True				
ANR	626724	AssignmentExpression	buff [ buff_len ++ ] = raw [ i ]		626618	0		=			
ANR	626725	ArrayIndexing	buff [ buff_len ++ ]		626618	0					
ANR	626726	Identifier	buff		626618	0					
ANR	626727	PostIncDecOperationExpression	buff_len ++		626618	1					
ANR	626728	Identifier	buff_len		626618	0					
ANR	626729	IncDec	++		626618	1					
ANR	626730	ArrayIndexing	raw [ i ]		626618	1					
ANR	626731	Identifier	raw		626618	0					
ANR	626732	Identifier	i		626618	1					
ANR	626733	ContinueStatement	continue ;	205:3:5205:5213	626618	2	True				
ANR	626734	IfStatement	if ( raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n' )		626618	1					
ANR	626735	Condition	raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'	209:7:5274:5334	626618	0	True				
ANR	626736	OrExpression	raw [ i ] == ' ' || raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'		626618	0		||			
ANR	626737	EqualityExpression	raw [ i ] == ' '		626618	0		==			
ANR	626738	ArrayIndexing	raw [ i ]		626618	0					
ANR	626739	Identifier	raw		626618	0					
ANR	626740	Identifier	i		626618	1					
ANR	626741	PrimaryExpression	' '		626618	1					
ANR	626742	OrExpression	raw [ i ] == '\\t' || raw [ i ] == '\\r' || raw [ i ] == '\\n'		626618	1		||			
ANR	626743	EqualityExpression	raw [ i ] == '\\t'		626618	0		==			
ANR	626744	ArrayIndexing	raw [ i ]		626618	0					
ANR	626745	Identifier	raw		626618	0					
ANR	626746	Identifier	i		626618	1					
ANR	626747	PrimaryExpression	'\\t'		626618	1					
ANR	626748	OrExpression	raw [ i ] == '\\r' || raw [ i ] == '\\n'		626618	1		||			
ANR	626749	EqualityExpression	raw [ i ] == '\\r'		626618	0		==			
ANR	626750	ArrayIndexing	raw [ i ]		626618	0					
ANR	626751	Identifier	raw		626618	0					
ANR	626752	Identifier	i		626618	1					
ANR	626753	PrimaryExpression	'\\r'		626618	1					
ANR	626754	EqualityExpression	raw [ i ] == '\\n'		626618	1		==			
ANR	626755	ArrayIndexing	raw [ i ]		626618	0					
ANR	626756	Identifier	raw		626618	0					
ANR	626757	Identifier	i		626618	1					
ANR	626758	PrimaryExpression	'\\n'		626618	1					
ANR	626759	CompoundStatement		27:70:488:488	626618	1					
ANR	626760	ExpressionStatement	buff [ buff_len ++ ] = '\\0'	214:3:5466:5489	626618	0	True				
ANR	626761	AssignmentExpression	buff [ buff_len ++ ] = '\\0'		626618	0		=			
ANR	626762	ArrayIndexing	buff [ buff_len ++ ]		626618	0					
ANR	626763	Identifier	buff		626618	0					
ANR	626764	PostIncDecOperationExpression	buff_len ++		626618	1					
ANR	626765	Identifier	buff_len		626618	0					
ANR	626766	IncDec	++		626618	1					
ANR	626767	PrimaryExpression	'\\0'		626618	1					
ANR	626768	ExpressionStatement	args -> add_arg ( strdup ( buff ) )	215:3:5494:5523	626618	1	True				
ANR	626769	CallExpression	args -> add_arg ( strdup ( buff ) )		626618	0					
ANR	626770	Callee	args -> add_arg		626618	0					
ANR	626771	PtrMemberAccess	args -> add_arg		626618	0					
ANR	626772	Identifier	args		626618	0					
ANR	626773	Identifier	add_arg		626618	1					
ANR	626774	ArgumentList	strdup ( buff )		626618	1					
ANR	626775	Argument	strdup ( buff )		626618	0					
ANR	626776	CallExpression	strdup ( buff )		626618	0					
ANR	626777	Callee	strdup		626618	0					
ANR	626778	Identifier	strdup		626618	0					
ANR	626779	ArgumentList	buff		626618	1					
ANR	626780	Argument	buff		626618	0					
ANR	626781	Identifier	buff		626618	0					
ANR	626782	ExpressionStatement	buff_len = 0	216:3:5528:5540	626618	2	True				
ANR	626783	AssignmentExpression	buff_len = 0		626618	0		=			
ANR	626784	Identifier	buff_len		626618	0					
ANR	626785	PrimaryExpression	0		626618	1					
ANR	626786	ExpressionStatement	beginning = i + 1	218:3:5573:5588	626618	3	True				
ANR	626787	AssignmentExpression	beginning = i + 1		626618	0		=			
ANR	626788	Identifier	beginning		626618	0					
ANR	626789	AdditiveExpression	i + 1		626618	1		+			
ANR	626790	Identifier	i		626618	0					
ANR	626791	PrimaryExpression	1		626618	1					
ANR	626792	ElseStatement	else		626618	0					
ANR	626793	CompoundStatement		38:7:794:794	626618	0					
ANR	626794	ExpressionStatement	buff [ buff_len ++ ] = raw [ i ]	222:3:5693:5718	626618	0	True				
ANR	626795	AssignmentExpression	buff [ buff_len ++ ] = raw [ i ]		626618	0		=			
ANR	626796	ArrayIndexing	buff [ buff_len ++ ]		626618	0					
ANR	626797	Identifier	buff		626618	0					
ANR	626798	PostIncDecOperationExpression	buff_len ++		626618	1					
ANR	626799	Identifier	buff_len		626618	0					
ANR	626800	IncDec	++		626618	1					
ANR	626801	ArrayIndexing	raw [ i ]		626618	1					
ANR	626802	Identifier	raw		626618	0					
ANR	626803	Identifier	i		626618	1					
ANR	626804	ExpressionStatement	buff [ buff_len ++ ] = '\\0'	227:1:5758:5781	626618	7	True				
ANR	626805	AssignmentExpression	buff [ buff_len ++ ] = '\\0'		626618	0		=			
ANR	626806	ArrayIndexing	buff [ buff_len ++ ]		626618	0					
ANR	626807	Identifier	buff		626618	0					
ANR	626808	PostIncDecOperationExpression	buff_len ++		626618	1					
ANR	626809	Identifier	buff_len		626618	0					
ANR	626810	IncDec	++		626618	1					
ANR	626811	PrimaryExpression	'\\0'		626618	1					
ANR	626812	ExpressionStatement	args -> add_arg ( strdup ( buff ) )	228:1:5784:5813	626618	8	True				
ANR	626813	CallExpression	args -> add_arg ( strdup ( buff ) )		626618	0					
ANR	626814	Callee	args -> add_arg		626618	0					
ANR	626815	PtrMemberAccess	args -> add_arg		626618	0					
ANR	626816	Identifier	args		626618	0					
ANR	626817	Identifier	add_arg		626618	1					
ANR	626818	ArgumentList	strdup ( buff )		626618	1					
ANR	626819	Argument	strdup ( buff )		626618	0					
ANR	626820	CallExpression	strdup ( buff )		626618	0					
ANR	626821	Callee	strdup		626618	0					
ANR	626822	Identifier	strdup		626618	0					
ANR	626823	ArgumentList	buff		626618	1					
ANR	626824	Argument	buff		626618	0					
ANR	626825	Identifier	buff		626618	0					
ANR	626826	ExpressionStatement	free ( buff )	230:1:5817:5828	626618	9	True				
ANR	626827	CallExpression	free ( buff )		626618	0					
ANR	626828	Callee	free		626618	0					
ANR	626829	Identifier	free		626618	0					
ANR	626830	ArgumentList	buff		626618	1					
ANR	626831	Argument	buff		626618	0					
ANR	626832	Identifier	buff		626618	0					
ANR	626833	ReturnStatement	return TRUE ;	231:1:5831:5842	626618	10	True				
ANR	626834	Identifier	TRUE		626618	0					
ANR	626835	ReturnType	int		626618	1					
ANR	626836	Identifier	parse_gahp_command		626618	2					
ANR	626837	ParameterList	"const char * raw , Gahp_Args * args"		626618	3					
ANR	626838	Parameter	const char * raw	183:20:4814:4828	626618	0	True				
ANR	626839	ParameterType	const char *		626618	0					
ANR	626840	Identifier	raw		626618	1					
ANR	626841	Parameter	Gahp_Args * args	183:37:4831:4845	626618	1	True				
ANR	626842	ParameterType	Gahp_Args *		626618	0					
ANR	626843	Identifier	args		626618	1					
ANR	626844	CFGEntryNode	ENTRY		626618		True				
ANR	626845	CFGExitNode	EXIT		626618		True				
ANR	626846	Symbol	malloc		626618						
ANR	626847	Symbol	beginning		626618						
ANR	626848	Symbol	D_ALWAYS		626618						
ANR	626849	Symbol	raw		626618						
ANR	626850	Symbol	i		626618						
ANR	626851	Symbol	TRUE		626618						
ANR	626852	Symbol	buff_len		626618						
ANR	626853	Symbol	args		626618						
ANR	626854	Symbol	strlen		626618						
ANR	626855	Symbol	* raw		626618						
ANR	626856	Symbol	* i		626618						
ANR	626857	Symbol	len		626618						
ANR	626858	Symbol	* buff		626618						
ANR	626859	Symbol	FALSE		626618						
ANR	626860	Symbol	strdup		626618						
ANR	626861	Symbol	buff		626618						
ANR	626862	Function	check_read_access_file	234:0:5847:6086							
ANR	626863	FunctionDef	check_read_access_file (const char * file)		626862	0					
ANR	626864	CompoundStatement		236:0:5893:6086	626862	0					
ANR	626865	IfStatement	if ( ! file || file [ 0 ] == '\\0' )		626862	0					
ANR	626866	Condition	! file || file [ 0 ] == '\\0'	237:5:5900:5923	626862	0	True				
ANR	626867	OrExpression	! file || file [ 0 ] == '\\0'		626862	0		||			
ANR	626868	UnaryOperationExpression	! file		626862	0					
ANR	626869	UnaryOperator	!		626862	0					
ANR	626870	Identifier	file		626862	1					
ANR	626871	EqualityExpression	file [ 0 ] == '\\0'		626862	1		==			
ANR	626872	ArrayIndexing	file [ 0 ]		626862	0					
ANR	626873	Identifier	file		626862	0					
ANR	626874	PrimaryExpression	0		626862	1					
ANR	626875	PrimaryExpression	'\\0'		626862	1					
ANR	626876	CompoundStatement		2:32:33:33	626862	1					
ANR	626877	ReturnStatement	return false ;	238:2:5931:5943	626862	0	True				
ANR	626878	Identifier	false		626862	0					
ANR	626879	IdentifierDeclStatement	"int ret = access ( file , R_OK ) ;"	241:1:5950:5978	626862	1	True				
ANR	626880	IdentifierDecl	"ret = access ( file , R_OK )"		626862	0					
ANR	626881	IdentifierDeclType	int		626862	0					
ANR	626882	Identifier	ret		626862	1					
ANR	626883	AssignmentExpression	"ret = access ( file , R_OK )"		626862	2		=			
ANR	626884	Identifier	ret		626862	0					
ANR	626885	CallExpression	"access ( file , R_OK )"		626862	1					
ANR	626886	Callee	access		626862	0					
ANR	626887	Identifier	access		626862	0					
ANR	626888	ArgumentList	file		626862	1					
ANR	626889	Argument	file		626862	0					
ANR	626890	Identifier	file		626862	0					
ANR	626891	Argument	R_OK		626862	1					
ANR	626892	Identifier	R_OK		626862	0					
ANR	626893	IfStatement	if ( ret < 0 )		626862	2					
ANR	626894	Condition	ret < 0	243:4:5985:5991	626862	0	True				
ANR	626895	RelationalExpression	ret < 0		626862	0		<			
ANR	626896	Identifier	ret		626862	0					
ANR	626897	PrimaryExpression	0		626862	1					
ANR	626898	CompoundStatement		8:14:101:101	626862	1					
ANR	626899	ExpressionStatement	"dprintf ( D_ALWAYS , ""File(%s) can't be read\\n"" , file )"	244:2:5999:6050	626862	0	True				
ANR	626900	CallExpression	"dprintf ( D_ALWAYS , ""File(%s) can't be read\\n"" , file )"		626862	0					
ANR	626901	Callee	dprintf		626862	0					
ANR	626902	Identifier	dprintf		626862	0					
ANR	626903	ArgumentList	D_ALWAYS		626862	1					
ANR	626904	Argument	D_ALWAYS		626862	0					
ANR	626905	Identifier	D_ALWAYS		626862	0					
ANR	626906	Argument	"""File(%s) can't be read\\n"""		626862	1					
ANR	626907	PrimaryExpression	"""File(%s) can't be read\\n"""		626862	0					
ANR	626908	Argument	file		626862	2					
ANR	626909	Identifier	file		626862	0					
ANR	626910	ReturnStatement	return false ;	245:2:6054:6066	626862	1	True				
ANR	626911	Identifier	false		626862	0					
ANR	626912	ReturnStatement	return true ;	248:1:6073:6084	626862	3	True				
ANR	626913	Identifier	true		626862	0					
ANR	626914	ReturnType	bool		626862	1					
ANR	626915	Identifier	check_read_access_file		626862	2					
ANR	626916	ParameterList	const char * file		626862	3					
ANR	626917	Parameter	const char * file	235:23:5875:5890	626862	0	True				
ANR	626918	ParameterType	const char *		626862	0					
ANR	626919	Identifier	file		626862	1					
ANR	626920	CFGEntryNode	ENTRY		626862		True				
ANR	626921	CFGExitNode	EXIT		626862		True				
ANR	626922	Symbol	ret		626862						
ANR	626923	Symbol	file		626862						
ANR	626924	Symbol	access		626862						
ANR	626925	Symbol	false		626862						
ANR	626926	Symbol	D_ALWAYS		626862						
ANR	626927	Symbol	true		626862						
ANR	626928	Symbol	* file		626862						
ANR	626929	Symbol	R_OK		626862						
ANR	626930	Function	check_create_file	251:0:6089:6454							
ANR	626931	FunctionDef	"check_create_file (const char * file , mode_t mode)"		626930	0					
ANR	626932	CompoundStatement		253:0:6143:6454	626930	0					
ANR	626933	IfStatement	if ( ! file || file [ 0 ] == '\\0' )		626930	0					
ANR	626934	Condition	! file || file [ 0 ] == '\\0'	254:5:6150:6173	626930	0	True				
ANR	626935	OrExpression	! file || file [ 0 ] == '\\0'		626930	0		||			
ANR	626936	UnaryOperationExpression	! file		626930	0					
ANR	626937	UnaryOperator	!		626930	0					
ANR	626938	Identifier	file		626930	1					
ANR	626939	EqualityExpression	file [ 0 ] == '\\0'		626930	1		==			
ANR	626940	ArrayIndexing	file [ 0 ]		626930	0					
ANR	626941	Identifier	file		626930	0					
ANR	626942	PrimaryExpression	0		626930	1					
ANR	626943	PrimaryExpression	'\\0'		626930	1					
ANR	626944	CompoundStatement		2:32:33:33	626930	1					
ANR	626945	ReturnStatement	return false ;	255:2:6181:6193	626930	0	True				
ANR	626946	Identifier	false		626930	0					
ANR	626947	IdentifierDeclStatement	FILE * fp = NULL ;	258:1:6200:6215	626930	1	True				
ANR	626948	IdentifierDecl	* fp = NULL		626930	0					
ANR	626949	IdentifierDeclType	FILE *		626930	0					
ANR	626950	Identifier	fp		626930	1					
ANR	626951	AssignmentExpression	* fp = NULL		626930	2		=			
ANR	626952	Identifier	NULL		626930	0					
ANR	626953	Identifier	NULL		626930	1					
ANR	626954	ExpressionStatement	"fp = safe_fopen_wrapper ( file , ""w"" , mode )"	260:1:6219:6259	626930	2	True				
ANR	626955	AssignmentExpression	"fp = safe_fopen_wrapper ( file , ""w"" , mode )"		626930	0		=			
ANR	626956	Identifier	fp		626930	0					
ANR	626957	CallExpression	"safe_fopen_wrapper ( file , ""w"" , mode )"		626930	1					
ANR	626958	Callee	safe_fopen_wrapper		626930	0					
ANR	626959	Identifier	safe_fopen_wrapper		626930	0					
ANR	626960	ArgumentList	file		626930	1					
ANR	626961	Argument	file		626930	0					
ANR	626962	Identifier	file		626930	0					
ANR	626963	Argument	"""w"""		626930	1					
ANR	626964	PrimaryExpression	"""w"""		626930	0					
ANR	626965	Argument	mode		626930	2					
ANR	626966	Identifier	mode		626930	0					
ANR	626967	IfStatement	if ( ! fp )		626930	3					
ANR	626968	Condition	! fp	261:5:6266:6268	626930	0	True				
ANR	626969	UnaryOperationExpression	! fp		626930	0					
ANR	626970	UnaryOperator	!		626930	0					
ANR	626971	Identifier	fp		626930	1					
ANR	626972	CompoundStatement		9:11:128:128	626930	1					
ANR	626973	Statement	dprintf	262:2:6276:6282	626930	0	True				
ANR	626974	Statement	(	262:9:6283:6283	626930	1	True				
ANR	626975	Statement	D_ALWAYS	262:10:6284:6291	626930	2	True				
ANR	626976	Statement	","	262:18:6292:6292	626930	3	True				
ANR	626977	Statement	"""failed to safe_fopen_wrapper %s in write mode: """	262:20:6294:6342	626930	4	True				
ANR	626978	Statement	"""safe_fopen_wrapper returns %s\\n"""	263:4:6348:6380	626930	5	True				
ANR	626979	Statement	","	263:37:6381:6381	626930	6	True				
ANR	626980	Statement	file	263:39:6383:6386	626930	7	True				
ANR	626981	Statement	","	263:43:6387:6387	626930	8	True				
ANR	626982	Statement	strerror	263:45:6389:6396	626930	9	True				
ANR	626983	Statement	(	263:53:6397:6397	626930	10	True				
ANR	626984	Statement	errno	263:54:6398:6402	626930	11	True				
ANR	626985	Statement	)	263:59:6403:6403	626930	12	True				
ANR	626986	Statement	)	263:60:6404:6404	626930	13	True				
ANR	626987	ExpressionStatement		263:61:6405:6405	626930	14	True				
ANR	626988	ReturnStatement	return false ;	264:2:6409:6421	626930	15	True				
ANR	626989	Identifier	false		626930	0					
ANR	626990	ExpressionStatement	fclose ( fp )	267:1:6428:6438	626930	4	True				
ANR	626991	CallExpression	fclose ( fp )		626930	0					
ANR	626992	Callee	fclose		626930	0					
ANR	626993	Identifier	fclose		626930	0					
ANR	626994	ArgumentList	fp		626930	1					
ANR	626995	Argument	fp		626930	0					
ANR	626996	Identifier	fp		626930	0					
ANR	626997	ReturnStatement	return true ;	268:1:6441:6452	626930	5	True				
ANR	626998	Identifier	true		626930	0					
ANR	626999	ReturnType	bool		626930	1					
ANR	627000	Identifier	check_create_file		626930	2					
ANR	627001	ParameterList	"const char * file , mode_t mode"		626930	3					
ANR	627002	Parameter	const char * file	252:18:6112:6127	626930	0	True				
ANR	627003	ParameterType	const char *		626930	0					
ANR	627004	Identifier	file		626930	1					
ANR	627005	Parameter	mode_t mode	252:36:6130:6140	626930	1	True				
ANR	627006	ParameterType	mode_t		626930	0					
ANR	627007	Identifier	mode		626930	1					
ANR	627008	CFGEntryNode	ENTRY		626930		True				
ANR	627009	CFGExitNode	EXIT		626930		True				
ANR	627010	Symbol	mode		626930						
ANR	627011	Symbol	file		626930						
ANR	627012	Symbol	NULL		626930						
ANR	627013	Symbol	safe_fopen_wrapper		626930						
ANR	627014	Symbol	false		626930						
ANR	627015	Symbol	true		626930						
ANR	627016	Symbol	fp		626930						
ANR	627017	Symbol	* file		626930						
ANR	627018	Function	verify_number_args	271:0:6457:6650							
ANR	627019	FunctionDef	"verify_number_args (const int is , const int should_be)"		627018	0					
ANR	627020	CompoundStatement		272:55:6516:6650	627018	0					
ANR	627021	IfStatement	if ( is != should_be )		627018	0					
ANR	627022	Condition	is != should_be	273:5:6523:6537	627018	0	True				
ANR	627023	EqualityExpression	is != should_be		627018	0		!=			
ANR	627024	Identifier	is		627018	0					
ANR	627025	Identifier	should_be		627018	1					
ANR	627026	CompoundStatement		2:22:23:23	627018	1					
ANR	627027	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be %d\\n"" , is , should_be )"	274:2:6544:6615	627018	0	True				
ANR	627028	CallExpression	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be %d\\n"" , is , should_be )"		627018	0					
ANR	627029	Callee	dprintf		627018	0					
ANR	627030	Identifier	dprintf		627018	0					
ANR	627031	ArgumentList	D_ALWAYS		627018	1					
ANR	627032	Argument	D_ALWAYS		627018	0					
ANR	627033	Identifier	D_ALWAYS		627018	0					
ANR	627034	Argument	"""Wrong # of args %d, should be %d\\n"""		627018	1					
ANR	627035	PrimaryExpression	"""Wrong # of args %d, should be %d\\n"""		627018	0					
ANR	627036	Argument	is		627018	2					
ANR	627037	Identifier	is		627018	0					
ANR	627038	Argument	should_be		627018	3					
ANR	627039	Identifier	should_be		627018	0					
ANR	627040	ReturnStatement	return FALSE ;	275:2:6619:6631	627018	1	True				
ANR	627041	Identifier	FALSE		627018	0					
ANR	627042	ReturnStatement	return TRUE ;	277:1:6637:6648	627018	1	True				
ANR	627043	Identifier	TRUE		627018	0					
ANR	627044	ReturnType	int		627018	1					
ANR	627045	Identifier	verify_number_args		627018	2					
ANR	627046	ParameterList	"const int is , const int should_be"		627018	3					
ANR	627047	Parameter	const int is	272:20:6481:6492	627018	0	True				
ANR	627048	ParameterType	const int		627018	0					
ANR	627049	Identifier	is		627018	1					
ANR	627050	Parameter	const int should_be	272:34:6495:6513	627018	1	True				
ANR	627051	ParameterType	const int		627018	0					
ANR	627052	Identifier	should_be		627018	1					
ANR	627053	CFGEntryNode	ENTRY		627018		True				
ANR	627054	CFGExitNode	EXIT		627018		True				
ANR	627055	Symbol	D_ALWAYS		627018						
ANR	627056	Symbol	TRUE		627018						
ANR	627057	Symbol	is		627018						
ANR	627058	Symbol	FALSE		627018						
ANR	627059	Symbol	should_be		627018						
ANR	627060	Function	verify_min_number_args	280:0:6653:6866							
ANR	627061	FunctionDef	"verify_min_number_args (const int is , const int minimum)"		627060	0					
ANR	627062	CompoundStatement		281:57:6714:6866	627060	0					
ANR	627063	IfStatement	if ( is < minimum )		627060	0					
ANR	627064	Condition	is < minimum	282:5:6721:6732	627060	0	True				
ANR	627065	RelationalExpression	is < minimum		627060	0		<			
ANR	627066	Identifier	is		627060	0					
ANR	627067	Identifier	minimum		627060	1					
ANR	627068	CompoundStatement		2:20:21:21	627060	1					
ANR	627069	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be more than or equal to %d\\n"" , is , minimum )"	283:2:6740:6831	627060	0	True				
ANR	627070	CallExpression	"dprintf ( D_ALWAYS , ""Wrong # of args %d, should be more than or equal to %d\\n"" , is , minimum )"		627060	0					
ANR	627071	Callee	dprintf		627060	0					
ANR	627072	Identifier	dprintf		627060	0					
ANR	627073	ArgumentList	D_ALWAYS		627060	1					
ANR	627074	Argument	D_ALWAYS		627060	0					
ANR	627075	Identifier	D_ALWAYS		627060	0					
ANR	627076	Argument	"""Wrong # of args %d, should be more than or equal to %d\\n"""		627060	1					
ANR	627077	PrimaryExpression	"""Wrong # of args %d, should be more than or equal to %d\\n"""		627060	0					
ANR	627078	Argument	is		627060	2					
ANR	627079	Identifier	is		627060	0					
ANR	627080	Argument	minimum		627060	3					
ANR	627081	Identifier	minimum		627060	0					
ANR	627082	ReturnStatement	return FALSE ;	284:2:6835:6847	627060	1	True				
ANR	627083	Identifier	FALSE		627060	0					
ANR	627084	ReturnStatement	return TRUE ;	286:1:6853:6864	627060	1	True				
ANR	627085	Identifier	TRUE		627060	0					
ANR	627086	ReturnType	int		627060	1					
ANR	627087	Identifier	verify_min_number_args		627060	2					
ANR	627088	ParameterList	"const int is , const int minimum"		627060	3					
ANR	627089	Parameter	const int is	281:24:6681:6692	627060	0	True				
ANR	627090	ParameterType	const int		627060	0					
ANR	627091	Identifier	is		627060	1					
ANR	627092	Parameter	const int minimum	281:38:6695:6711	627060	1	True				
ANR	627093	ParameterType	const int		627060	0					
ANR	627094	Identifier	minimum		627060	1					
ANR	627095	CFGEntryNode	ENTRY		627060		True				
ANR	627096	CFGExitNode	EXIT		627060		True				
ANR	627097	Symbol	D_ALWAYS		627060						
ANR	627098	Symbol	TRUE		627060						
ANR	627099	Symbol	is		627060						
ANR	627100	Symbol	FALSE		627060						
ANR	627101	Symbol	minimum		627060						
ANR	627102	Function	verify_request_id	289:0:6869:7073							
ANR	627103	FunctionDef	verify_request_id (const char * s)		627102	0					
ANR	627104	CompoundStatement		290:35:6908:7073	627102	0					
ANR	627105	IdentifierDeclStatement	unsigned int i ;	291:4:6914:6928	627102	0	True				
ANR	627106	IdentifierDecl	i		627102	0					
ANR	627107	IdentifierDeclType	unsigned int		627102	0					
ANR	627108	Identifier	i		627102	1					
ANR	627109	ForStatement	for ( i = 0 ; i < strlen ( s ) ; i ++ )		627102	1					
ANR	627110	ForInit	i = 0 ;	292:6:6936:6939	627102	0	True				
ANR	627111	AssignmentExpression	i = 0		627102	0		=			
ANR	627112	Identifier	i		627102	0					
ANR	627113	PrimaryExpression	0		627102	1					
ANR	627114	Condition	i < strlen ( s )	292:11:6941:6951	627102	1	True				
ANR	627115	RelationalExpression	i < strlen ( s )		627102	0		<			
ANR	627116	Identifier	i		627102	0					
ANR	627117	CallExpression	strlen ( s )		627102	1					
ANR	627118	Callee	strlen		627102	0					
ANR	627119	Identifier	strlen		627102	0					
ANR	627120	ArgumentList	s		627102	1					
ANR	627121	Argument	s		627102	0					
ANR	627122	Identifier	s		627102	0					
ANR	627123	PostIncDecOperationExpression	i ++	292:24:6954:6956	627102	2	True				
ANR	627124	Identifier	i		627102	0					
ANR	627125	IncDec	++		627102	1					
ANR	627126	CompoundStatement		3:29:50:50	627102	3					
ANR	627127	IfStatement	if ( ! isdigit ( s [ i ] ) )		627102	0					
ANR	627128	Condition	! isdigit ( s [ i ] )	293:6:6967:6980	627102	0	True				
ANR	627129	UnaryOperationExpression	! isdigit ( s [ i ] )		627102	0					
ANR	627130	UnaryOperator	!		627102	0					
ANR	627131	CallExpression	isdigit ( s [ i ] )		627102	1					
ANR	627132	Callee	isdigit		627102	0					
ANR	627133	Identifier	isdigit		627102	0					
ANR	627134	ArgumentList	s [ i ]		627102	1					
ANR	627135	Argument	s [ i ]		627102	0					
ANR	627136	ArrayIndexing	s [ i ]		627102	0					
ANR	627137	Identifier	s		627102	0					
ANR	627138	Identifier	i		627102	1					
ANR	627139	CompoundStatement		4:22:74:74	627102	1					
ANR	627140	ExpressionStatement	"dprintf ( D_ALWAYS , ""Bad request id %s\\n"" , s )"	294:3:6988:7032	627102	0	True				
ANR	627141	CallExpression	"dprintf ( D_ALWAYS , ""Bad request id %s\\n"" , s )"		627102	0					
ANR	627142	Callee	dprintf		627102	0					
ANR	627143	Identifier	dprintf		627102	0					
ANR	627144	ArgumentList	D_ALWAYS		627102	1					
ANR	627145	Argument	D_ALWAYS		627102	0					
ANR	627146	Identifier	D_ALWAYS		627102	0					
ANR	627147	Argument	"""Bad request id %s\\n"""		627102	1					
ANR	627148	PrimaryExpression	"""Bad request id %s\\n"""		627102	0					
ANR	627149	Argument	s		627102	2					
ANR	627150	Identifier	s		627102	0					
ANR	627151	ReturnStatement	return FALSE ;	295:3:7037:7049	627102	1	True				
ANR	627152	Identifier	FALSE		627102	0					
ANR	627153	ReturnStatement	return TRUE ;	299:1:7060:7071	627102	2	True				
ANR	627154	Identifier	TRUE		627102	0					
ANR	627155	ReturnType	int		627102	1					
ANR	627156	Identifier	verify_request_id		627102	2					
ANR	627157	ParameterList	const char * s		627102	3					
ANR	627158	Parameter	const char * s	290:19:6892:6905	627102	0	True				
ANR	627159	ParameterType	const char *		627102	0					
ANR	627160	Identifier	s		627102	1					
ANR	627161	CFGEntryNode	ENTRY		627102		True				
ANR	627162	CFGExitNode	EXIT		627102		True				
ANR	627163	Symbol	strlen		627102						
ANR	627164	Symbol	s		627102						
ANR	627165	Symbol	* i		627102						
ANR	627166	Symbol	D_ALWAYS		627102						
ANR	627167	Symbol	i		627102						
ANR	627168	Symbol	TRUE		627102						
ANR	627169	Symbol	FALSE		627102						
ANR	627170	Symbol	* s		627102						
ANR	627171	Symbol	isdigit		627102						
ANR	627172	Function	verify_string_name	302:0:7076:7390							
ANR	627173	FunctionDef	verify_string_name (const char * s)		627172	0					
ANR	627174	CompoundStatement		303:35:7115:7390	627172	0					
ANR	627175	IfStatement	if ( s == NULL )		627172	0					
ANR	627176	Condition	s == NULL	304:8:7125:7133	627172	0	True				
ANR	627177	EqualityExpression	s == NULL		627172	0		==			
ANR	627178	Identifier	s		627172	0					
ANR	627179	Identifier	NULL		627172	1					
ANR	627180	CompoundStatement		2:20:21:21	627172	1					
ANR	627181	ExpressionStatement	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is NULL.\\n"" )"	305:8:7147:7216	627172	0	True				
ANR	627182	CallExpression	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is NULL.\\n"" )"		627172	0					
ANR	627183	Callee	dprintf		627172	0					
ANR	627184	Identifier	dprintf		627172	0					
ANR	627185	ArgumentList	D_ALWAYS		627172	1					
ANR	627186	Argument	D_ALWAYS		627172	0					
ANR	627187	Identifier	D_ALWAYS		627172	0					
ANR	627188	Argument	"""verify_string_name() failed: string is NULL.\\n"""		627172	1					
ANR	627189	PrimaryExpression	"""verify_string_name() failed: string is NULL.\\n"""		627172	0					
ANR	627190	ReturnStatement	return false ;	306:8:7226:7238	627172	1	True				
ANR	627191	Identifier	false		627172	0					
ANR	627192	IfStatement	if ( strlen ( s ) <= 0 )		627172	1					
ANR	627193	Condition	strlen ( s ) <= 0	308:8:7254:7267	627172	0	True				
ANR	627194	RelationalExpression	strlen ( s ) <= 0		627172	0		<=			
ANR	627195	CallExpression	strlen ( s )		627172	0					
ANR	627196	Callee	strlen		627172	0					
ANR	627197	Identifier	strlen		627172	0					
ANR	627198	ArgumentList	s		627172	1					
ANR	627199	Argument	s		627172	0					
ANR	627200	Identifier	s		627172	0					
ANR	627201	PrimaryExpression	0		627172	1					
ANR	627202	CompoundStatement		6:25:155:155	627172	1					
ANR	627203	ExpressionStatement	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is zero-length.\\n"" )"	309:8:7281:7357	627172	0	True				
ANR	627204	CallExpression	"dprintf ( D_ALWAYS , ""verify_string_name() failed: string is zero-length.\\n"" )"		627172	0					
ANR	627205	Callee	dprintf		627172	0					
ANR	627206	Identifier	dprintf		627172	0					
ANR	627207	ArgumentList	D_ALWAYS		627172	1					
ANR	627208	Argument	D_ALWAYS		627172	0					
ANR	627209	Identifier	D_ALWAYS		627172	0					
ANR	627210	Argument	"""verify_string_name() failed: string is zero-length.\\n"""		627172	1					
ANR	627211	PrimaryExpression	"""verify_string_name() failed: string is zero-length.\\n"""		627172	0					
ANR	627212	ReturnStatement	return true ;	311:4:7377:7388	627172	2	True				
ANR	627213	Identifier	true		627172	0					
ANR	627214	ReturnType	int		627172	1					
ANR	627215	Identifier	verify_string_name		627172	2					
ANR	627216	ParameterList	const char * s		627172	3					
ANR	627217	Parameter	const char * s	303:19:7099:7112	627172	0	True				
ANR	627218	ParameterType	const char *		627172	0					
ANR	627219	Identifier	s		627172	1					
ANR	627220	CFGEntryNode	ENTRY		627172		True				
ANR	627221	CFGExitNode	EXIT		627172		True				
ANR	627222	Symbol	strlen		627172						
ANR	627223	Symbol	s		627172						
ANR	627224	Symbol	NULL		627172						
ANR	627225	Symbol	D_ALWAYS		627172						
ANR	627226	Symbol	false		627172						
ANR	627227	Symbol	true		627172						
ANR	627228	Function	verify_number	314:0:7393:7670							
ANR	627229	FunctionDef	verify_number (const char * s)		627228	0					
ANR	627230	CompoundStatement		315:31:7428:7670	627228	0					
ANR	627231	IfStatement	if ( ! s || ! ( * s ) )		627228	0					
ANR	627232	Condition	! s || ! ( * s )	316:5:7435:7445	627228	0	True				
ANR	627233	OrExpression	! s || ! ( * s )		627228	0		||			
ANR	627234	UnaryOperationExpression	! s		627228	0					
ANR	627235	UnaryOperator	!		627228	0					
ANR	627236	Identifier	s		627228	1					
ANR	627237	UnaryOperationExpression	! ( * s )		627228	1					
ANR	627238	UnaryOperator	!		627228	0					
ANR	627239	UnaryOperationExpression	* s		627228	1					
ANR	627240	UnaryOperator	*		627228	0					
ANR	627241	Identifier	s		627228	1					
ANR	627242	CompoundStatement		2:18:19:19	627228	1					
ANR	627243	ExpressionStatement	"dprintf ( D_ALWAYS , ""No digit number\\n"" )"	317:2:7452:7491	627228	0	True				
ANR	627244	CallExpression	"dprintf ( D_ALWAYS , ""No digit number\\n"" )"		627228	0					
ANR	627245	Callee	dprintf		627228	0					
ANR	627246	Identifier	dprintf		627228	0					
ANR	627247	ArgumentList	D_ALWAYS		627228	1					
ANR	627248	Argument	D_ALWAYS		627228	0					
ANR	627249	Identifier	D_ALWAYS		627228	0					
ANR	627250	Argument	"""No digit number\\n"""		627228	1					
ANR	627251	PrimaryExpression	"""No digit number\\n"""		627228	0					
ANR	627252	ReturnStatement	return FALSE ;	318:2:7495:7507	627228	1	True				
ANR	627253	Identifier	FALSE		627228	0					
ANR	627254	IdentifierDeclStatement	int i = 0 ;	321:1:7515:7522	627228	1	True				
ANR	627255	IdentifierDecl	i = 0		627228	0					
ANR	627256	IdentifierDeclType	int		627228	0					
ANR	627257	Identifier	i		627228	1					
ANR	627258	AssignmentExpression	i = 0		627228	2		=			
ANR	627259	Identifier	i		627228	0					
ANR	627260	PrimaryExpression	0		627228	1					
ANR	627261	DoStatement	do		627228	2					
ANR	627262	CompoundStatement		9:4:103:103	627228	0					
ANR	627263	IfStatement	if ( s [ i ] < '0' || s [ i ] > '9' )		627228	0					
ANR	627264	Condition	s [ i ] < '0' || s [ i ] > '9'	324:6:7540:7559	627228	0	True				
ANR	627265	OrExpression	s [ i ] < '0' || s [ i ] > '9'		627228	0		||			
ANR	627266	RelationalExpression	s [ i ] < '0'		627228	0		<			
ANR	627267	ArrayIndexing	s [ i ]		627228	0					
ANR	627268	Identifier	s		627228	0					
ANR	627269	Identifier	i		627228	1					
ANR	627270	PrimaryExpression	'0'		627228	1					
ANR	627271	RelationalExpression	s [ i ] > '9'		627228	1		>			
ANR	627272	ArrayIndexing	s [ i ]		627228	0					
ANR	627273	Identifier	s		627228	0					
ANR	627274	Identifier	i		627228	1					
ANR	627275	PrimaryExpression	'9'		627228	1					
ANR	627276	CompoundStatement		10:28:133:133	627228	1					
ANR	627277	ExpressionStatement	"dprintf ( D_ALWAYS , ""Bad digit number %s\\n"" , s )"	325:3:7567:7613	627228	0	True				
ANR	627278	CallExpression	"dprintf ( D_ALWAYS , ""Bad digit number %s\\n"" , s )"		627228	0					
ANR	627279	Callee	dprintf		627228	0					
ANR	627280	Identifier	dprintf		627228	0					
ANR	627281	ArgumentList	D_ALWAYS		627228	1					
ANR	627282	Argument	D_ALWAYS		627228	0					
ANR	627283	Identifier	D_ALWAYS		627228	0					
ANR	627284	Argument	"""Bad digit number %s\\n"""		627228	1					
ANR	627285	PrimaryExpression	"""Bad digit number %s\\n"""		627228	0					
ANR	627286	Argument	s		627228	2					
ANR	627287	Identifier	s		627228	0					
ANR	627288	ReturnStatement	return FALSE ;	326:3:7618:7630	627228	1	True				
ANR	627289	Identifier	FALSE		627228	0					
ANR	627290	Condition	s [ ++ i ]	328:10:7646:7651	627228	1	True				
ANR	627291	ArrayIndexing	s [ ++ i ]		627228	0					
ANR	627292	Identifier	s		627228	0					
ANR	627293	UnaryExpression	++ i		627228	1					
ANR	627294	IncDec	++		627228	0					
ANR	627295	Identifier	i		627228	1					
ANR	627296	ReturnStatement	return TRUE ;	330:1:7657:7668	627228	3	True				
ANR	627297	Identifier	TRUE		627228	0					
ANR	627298	ReturnType	int		627228	1					
ANR	627299	Identifier	verify_number		627228	2					
ANR	627300	ParameterList	const char * s		627228	3					
ANR	627301	Parameter	const char * s	315:15:7412:7425	627228	0	True				
ANR	627302	ParameterType	const char *		627228	0					
ANR	627303	Identifier	s		627228	1					
ANR	627304	CFGEntryNode	ENTRY		627228		True				
ANR	627305	CFGExitNode	EXIT		627228		True				
ANR	627306	Symbol	s		627228						
ANR	627307	Symbol	* i		627228						
ANR	627308	Symbol	D_ALWAYS		627228						
ANR	627309	Symbol	i		627228						
ANR	627310	Symbol	TRUE		627228						
ANR	627311	Symbol	FALSE		627228						
ANR	627312	Symbol	* s		627228						
ANR	627313	Function	check_access_and_secret_key_file	333:0:7673:8297							
ANR	627314	FunctionDef	"check_access_and_secret_key_file (const char * accesskeyfile , const char * secretkeyfile , std :: string & err_msg)"		627313	0					
ANR	627315	CompoundStatement		334:0:7787:8297	627313	0					
ANR	627316	IfStatement	if ( ! check_read_access_file ( accesskeyfile ) )		627313	0					
ANR	627317	Condition	! check_read_access_file ( accesskeyfile )	336:5:7822:7859	627313	0	True				
ANR	627318	UnaryOperationExpression	! check_read_access_file ( accesskeyfile )		627313	0					
ANR	627319	UnaryOperator	!		627313	0					
ANR	627320	CallExpression	check_read_access_file ( accesskeyfile )		627313	1					
ANR	627321	Callee	check_read_access_file		627313	0					
ANR	627322	Identifier	check_read_access_file		627313	0					
ANR	627323	ArgumentList	accesskeyfile		627313	1					
ANR	627324	Argument	accesskeyfile		627313	0					
ANR	627325	Identifier	accesskeyfile		627313	0					
ANR	627326	CompoundStatement		3:46:75:75	627313	1					
ANR	627327	ExpressionStatement	"sprintf ( err_msg , ""Cannot_read_access_key_file(%s)"" , accesskeyfile ? accesskeyfile : """" )"	337:2:7867:7951	627313	0	True				
ANR	627328	CallExpression	"sprintf ( err_msg , ""Cannot_read_access_key_file(%s)"" , accesskeyfile ? accesskeyfile : """" )"		627313	0					
ANR	627329	Callee	sprintf		627313	0					
ANR	627330	Identifier	sprintf		627313	0					
ANR	627331	ArgumentList	err_msg		627313	1					
ANR	627332	Argument	err_msg		627313	0					
ANR	627333	Identifier	err_msg		627313	0					
ANR	627334	Argument	"""Cannot_read_access_key_file(%s)"""		627313	1					
ANR	627335	PrimaryExpression	"""Cannot_read_access_key_file(%s)"""		627313	0					
ANR	627336	Argument	"accesskeyfile ? accesskeyfile : """""		627313	2					
ANR	627337	ConditionalExpression	"accesskeyfile ? accesskeyfile : """""		627313	0					
ANR	627338	Condition	accesskeyfile		627313	0					
ANR	627339	Identifier	accesskeyfile		627313	0					
ANR	627340	Identifier	accesskeyfile		627313	1					
ANR	627341	PrimaryExpression	""""""		627313	2					
ANR	627342	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"	338:2:7955:8005	627313	1	True				
ANR	627343	CallExpression	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"		627313	0					
ANR	627344	Callee	dprintf		627313	0					
ANR	627345	Identifier	dprintf		627313	0					
ANR	627346	ArgumentList	D_ALWAYS		627313	1					
ANR	627347	Argument	D_ALWAYS		627313	0					
ANR	627348	Identifier	D_ALWAYS		627313	0					
ANR	627349	Argument	"""Error: %s\\n"""		627313	1					
ANR	627350	PrimaryExpression	"""Error: %s\\n"""		627313	0					
ANR	627351	Argument	err_msg . c_str ( )		627313	2					
ANR	627352	CallExpression	err_msg . c_str ( )		627313	0					
ANR	627353	Callee	err_msg . c_str		627313	0					
ANR	627354	MemberAccess	err_msg . c_str		627313	0					
ANR	627355	Identifier	err_msg		627313	0					
ANR	627356	Identifier	c_str		627313	1					
ANR	627357	ArgumentList			627313	1					
ANR	627358	ReturnStatement	return false ;	339:2:8009:8021	627313	2	True				
ANR	627359	Identifier	false		627313	0					
ANR	627360	IfStatement	if ( ! check_read_access_file ( secretkeyfile ) )		627313	1					
ANR	627361	Condition	! check_read_access_file ( secretkeyfile )	343:5:8078:8115	627313	0	True				
ANR	627362	UnaryOperationExpression	! check_read_access_file ( secretkeyfile )		627313	0					
ANR	627363	UnaryOperator	!		627313	0					
ANR	627364	CallExpression	check_read_access_file ( secretkeyfile )		627313	1					
ANR	627365	Callee	check_read_access_file		627313	0					
ANR	627366	Identifier	check_read_access_file		627313	0					
ANR	627367	ArgumentList	secretkeyfile		627313	1					
ANR	627368	Argument	secretkeyfile		627313	0					
ANR	627369	Identifier	secretkeyfile		627313	0					
ANR	627370	CompoundStatement		10:46:331:331	627313	1					
ANR	627371	ExpressionStatement	"sprintf ( err_msg , ""Cannot_read_secret_key_file(%s)"" , secretkeyfile ? secretkeyfile : """" )"	344:2:8123:8207	627313	0	True				
ANR	627372	CallExpression	"sprintf ( err_msg , ""Cannot_read_secret_key_file(%s)"" , secretkeyfile ? secretkeyfile : """" )"		627313	0					
ANR	627373	Callee	sprintf		627313	0					
ANR	627374	Identifier	sprintf		627313	0					
ANR	627375	ArgumentList	err_msg		627313	1					
ANR	627376	Argument	err_msg		627313	0					
ANR	627377	Identifier	err_msg		627313	0					
ANR	627378	Argument	"""Cannot_read_secret_key_file(%s)"""		627313	1					
ANR	627379	PrimaryExpression	"""Cannot_read_secret_key_file(%s)"""		627313	0					
ANR	627380	Argument	"secretkeyfile ? secretkeyfile : """""		627313	2					
ANR	627381	ConditionalExpression	"secretkeyfile ? secretkeyfile : """""		627313	0					
ANR	627382	Condition	secretkeyfile		627313	0					
ANR	627383	Identifier	secretkeyfile		627313	0					
ANR	627384	Identifier	secretkeyfile		627313	1					
ANR	627385	PrimaryExpression	""""""		627313	2					
ANR	627386	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"	345:2:8211:8261	627313	1	True				
ANR	627387	CallExpression	"dprintf ( D_ALWAYS , ""Error: %s\\n"" , err_msg . c_str ( ) )"		627313	0					
ANR	627388	Callee	dprintf		627313	0					
ANR	627389	Identifier	dprintf		627313	0					
ANR	627390	ArgumentList	D_ALWAYS		627313	1					
ANR	627391	Argument	D_ALWAYS		627313	0					
ANR	627392	Identifier	D_ALWAYS		627313	0					
ANR	627393	Argument	"""Error: %s\\n"""		627313	1					
ANR	627394	PrimaryExpression	"""Error: %s\\n"""		627313	0					
ANR	627395	Argument	err_msg . c_str ( )		627313	2					
ANR	627396	CallExpression	err_msg . c_str ( )		627313	0					
ANR	627397	Callee	err_msg . c_str		627313	0					
ANR	627398	MemberAccess	err_msg . c_str		627313	0					
ANR	627399	Identifier	err_msg		627313	0					
ANR	627400	Identifier	c_str		627313	1					
ANR	627401	ArgumentList			627313	1					
ANR	627402	ReturnStatement	return false ;	346:2:8265:8277	627313	2	True				
ANR	627403	Identifier	false		627313	0					
ANR	627404	ReturnStatement	return true ;	349:1:8284:8295	627313	2	True				
ANR	627405	Identifier	true		627313	0					
ANR	627406	ReturnType	bool		627313	1					
ANR	627407	Identifier	check_access_and_secret_key_file		627313	2					
ANR	627408	ParameterList	"const char * accesskeyfile , const char * secretkeyfile , std :: string & err_msg"		627313	3					
ANR	627409	Parameter	const char * accesskeyfile	333:38:7711:7735	627313	0	True				
ANR	627410	ParameterType	const char *		627313	0					
ANR	627411	Identifier	accesskeyfile		627313	1					
ANR	627412	Parameter	const char * secretkeyfile	333:65:7738:7762	627313	1	True				
ANR	627413	ParameterType	const char *		627313	0					
ANR	627414	Identifier	secretkeyfile		627313	1					
ANR	627415	Parameter	std :: string & err_msg	333:92:7765:7784	627313	2	True				
ANR	627416	ParameterType	std :: string &		627313	0					
ANR	627417	Identifier	err_msg		627313	1					
ANR	627418	CFGEntryNode	ENTRY		627313		True				
ANR	627419	CFGExitNode	EXIT		627313		True				
ANR	627420	Symbol	check_read_access_file		627313						
ANR	627421	Symbol	accesskeyfile		627313						
ANR	627422	Symbol	err_msg . c_str		627313						
ANR	627423	Symbol	secretkeyfile		627313						
ANR	627424	Symbol	err_msg		627313						
ANR	627425	Symbol	D_ALWAYS		627313						
ANR	627426	Symbol	false		627313						
ANR	627427	Symbol	true		627313						
ANR	627428	Function	get_int	353:0:8317:8392							
ANR	627429	FunctionDef	"get_int (const char * blah , int * s)"		627428	0					
ANR	627430	CompoundStatement		354:37:8358:8392	627428	0					
ANR	627431	ExpressionStatement	* s = atoi ( blah )	355:1:8361:8376	627428	0	True				
ANR	627432	AssignmentExpression	* s = atoi ( blah )		627428	0		=			
ANR	627433	UnaryOperationExpression	* s		627428	0					
ANR	627434	UnaryOperator	*		627428	0					
ANR	627435	Identifier	s		627428	1					
ANR	627436	CallExpression	atoi ( blah )		627428	1					
ANR	627437	Callee	atoi		627428	0					
ANR	627438	Identifier	atoi		627428	0					
ANR	627439	ArgumentList	blah		627428	1					
ANR	627440	Argument	blah		627428	0					
ANR	627441	Identifier	blah		627428	0					
ANR	627442	ReturnStatement	return TRUE ;	356:1:8379:8390	627428	1	True				
ANR	627443	Identifier	TRUE		627428	0					
ANR	627444	ReturnType	int		627428	1					
ANR	627445	Identifier	get_int		627428	2					
ANR	627446	ParameterList	"const char * blah , int * s"		627428	3					
ANR	627447	Parameter	const char * blah	354:9:8330:8346	627428	0	True				
ANR	627448	ParameterType	const char *		627428	0					
ANR	627449	Identifier	blah		627428	1					
ANR	627450	Parameter	int * s	354:28:8349:8355	627428	1	True				
ANR	627451	ParameterType	int *		627428	0					
ANR	627452	Identifier	s		627428	1					
ANR	627453	CFGEntryNode	ENTRY		627428		True				
ANR	627454	CFGExitNode	EXIT		627428		True				
ANR	627455	Symbol	atoi		627428						
ANR	627456	Symbol	s		627428						
ANR	627457	Symbol	TRUE		627428						
ANR	627458	Symbol	* s		627428						
ANR	627459	Symbol	blah		627428						
ANR	627460	Function	get_ulong	359:0:8395:8495							
ANR	627461	FunctionDef	"get_ulong (const char * blah , unsigned long * s)"		627460	0					
ANR	627462	CompoundStatement		360:49:8448:8495	627460	0					
ANR	627463	ExpressionStatement	* s = ( unsigned long ) atol ( blah )	361:1:8451:8479	627460	0	True				
ANR	627464	AssignmentExpression	* s = ( unsigned long ) atol ( blah )		627460	0		=			
ANR	627465	UnaryOperationExpression	* s		627460	0					
ANR	627466	UnaryOperator	*		627460	0					
ANR	627467	Identifier	s		627460	1					
ANR	627468	CastExpression	( unsigned long ) atol ( blah )		627460	1					
ANR	627469	CastTarget	unsigned long		627460	0					
ANR	627470	CallExpression	atol ( blah )		627460	1					
ANR	627471	Callee	atol		627460	0					
ANR	627472	Identifier	atol		627460	0					
ANR	627473	ArgumentList	blah		627460	1					
ANR	627474	Argument	blah		627460	0					
ANR	627475	Identifier	blah		627460	0					
ANR	627476	ReturnStatement	return TRUE ;	362:1:8482:8493	627460	1	True				
ANR	627477	Identifier	TRUE		627460	0					
ANR	627478	ReturnType	int		627460	1					
ANR	627479	Identifier	get_ulong		627460	2					
ANR	627480	ParameterList	"const char * blah , unsigned long * s"		627460	3					
ANR	627481	Parameter	const char * blah	360:11:8410:8426	627460	0	True				
ANR	627482	ParameterType	const char *		627460	0					
ANR	627483	Identifier	blah		627460	1					
ANR	627484	Parameter	unsigned long * s	360:30:8429:8445	627460	1	True				
ANR	627485	ParameterType	unsigned long *		627460	0					
ANR	627486	Identifier	s		627460	1					
ANR	627487	CFGEntryNode	ENTRY		627460		True				
ANR	627488	CFGExitNode	EXIT		627460		True				
ANR	627489	Symbol	s		627460						
ANR	627490	Symbol	TRUE		627460						
ANR	627491	Symbol	atol		627460						
ANR	627492	Symbol	* s		627460						
ANR	627493	Symbol	blah		627460						
ANR	627494	Function	create_output_string	365:0:8498:9014							
ANR	627495	FunctionDef	"create_output_string (int req_id , const char * * results , const int argc)"		627494	0					
ANR	627496	CompoundStatement		367:0:8583:9014	627494	0					
ANR	627497	IdentifierDeclStatement	std :: string buffer ;	368:1:8586:8604	627494	0	True				
ANR	627498	IdentifierDecl	buffer		627494	0					
ANR	627499	IdentifierDeclType	std :: string		627494	0					
ANR	627500	Identifier	buffer		627494	1					
ANR	627501	ExpressionStatement	"sprintf ( buffer , ""%d"" , req_id )"	370:1:8608:8639	627494	1	True				
ANR	627502	CallExpression	"sprintf ( buffer , ""%d"" , req_id )"		627494	0					
ANR	627503	Callee	sprintf		627494	0					
ANR	627504	Identifier	sprintf		627494	0					
ANR	627505	ArgumentList	buffer		627494	1					
ANR	627506	Argument	buffer		627494	0					
ANR	627507	Identifier	buffer		627494	0					
ANR	627508	Argument	"""%d"""		627494	1					
ANR	627509	PrimaryExpression	"""%d"""		627494	0					
ANR	627510	Argument	req_id		627494	2					
ANR	627511	Identifier	req_id		627494	0					
ANR	627512	ForStatement	for ( int i = 0 ; i < argc ; i ++ )		627494	2					
ANR	627513	ForInit	int i = 0 ;	372:7:8649:8658	627494	0	True				
ANR	627514	IdentifierDeclStatement	int i = 0 ;		627494	0					
ANR	627515	IdentifierDecl	i = 0		627494	0					
ANR	627516	IdentifierDeclType	int		627494	0					
ANR	627517	Identifier	i		627494	1					
ANR	627518	AssignmentExpression	i = 0		627494	2		=			
ANR	627519	Identifier	i		627494	0					
ANR	627520	PrimaryExpression	0		627494	1					
ANR	627521	Condition	i < argc	372:18:8660:8667	627494	1	True				
ANR	627522	RelationalExpression	i < argc		627494	0		<			
ANR	627523	Identifier	i		627494	0					
ANR	627524	Identifier	argc		627494	1					
ANR	627525	PostIncDecOperationExpression	i ++	372:28:8670:8672	627494	2	True				
ANR	627526	Identifier	i		627494	0					
ANR	627527	IncDec	++		627494	1					
ANR	627528	CompoundStatement		6:34:92:92	627494	3					
ANR	627529	ExpressionStatement	buffer += ' '	373:2:8680:8693	627494	0	True				
ANR	627530	AssignmentExpression	buffer += ' '		627494	0		+=			
ANR	627531	Identifier	buffer		627494	0					
ANR	627532	PrimaryExpression	' '		627494	1					
ANR	627533	IfStatement	if ( results [ i ] == NULL )		627494	1					
ANR	627534	Condition	results [ i ] == NULL	374:7:8702:8719	627494	0	True				
ANR	627535	EqualityExpression	results [ i ] == NULL		627494	0		==			
ANR	627536	ArrayIndexing	results [ i ]		627494	0					
ANR	627537	Identifier	results		627494	0					
ANR	627538	Identifier	i		627494	1					
ANR	627539	Identifier	NULL		627494	1					
ANR	627540	CompoundStatement		8:28:139:139	627494	1					
ANR	627541	ExpressionStatement	"buffer += ""NULL"""	375:3:8728:8744	627494	0	True				
ANR	627542	AssignmentExpression	"buffer += ""NULL"""		627494	0		+=			
ANR	627543	Identifier	buffer		627494	0					
ANR	627544	PrimaryExpression	"""NULL"""		627494	1					
ANR	627545	ElseStatement	else		627494	0					
ANR	627546	CompoundStatement		10:9:171:171	627494	0					
ANR	627547	ForStatement	for ( int j = 0 ; results [ i ] [ j ] != '\\0' ; j ++ )		627494	0					
ANR	627548	ForInit	int j = 0 ;	377:9:8766:8775	627494	0	True				
ANR	627549	IdentifierDeclStatement	int j = 0 ;		627494	0					
ANR	627550	IdentifierDecl	j = 0		627494	0					
ANR	627551	IdentifierDeclType	int		627494	0					
ANR	627552	Identifier	j		627494	1					
ANR	627553	AssignmentExpression	j = 0		627494	2		=			
ANR	627554	Identifier	j		627494	0					
ANR	627555	PrimaryExpression	0		627494	1					
ANR	627556	Condition	results [ i ] [ j ] != '\\0'	377:20:8777:8797	627494	1	True				
ANR	627557	EqualityExpression	results [ i ] [ j ] != '\\0'		627494	0		!=			
ANR	627558	ArrayIndexing	results [ i ] [ j ]		627494	0					
ANR	627559	ArrayIndexing	results [ i ]		627494	0					
ANR	627560	Identifier	results		627494	0					
ANR	627561	Identifier	i		627494	1					
ANR	627562	Identifier	j		627494	1					
ANR	627563	PrimaryExpression	'\\0'		627494	1					
ANR	627564	PostIncDecOperationExpression	j ++	377:43:8800:8802	627494	2	True				
ANR	627565	Identifier	j		627494	0					
ANR	627566	IncDec	++		627494	1					
ANR	627567	CompoundStatement		11:49:222:222	627494	3					
ANR	627568	SwitchStatement	switch ( results [ i ] [ j ] )		627494	0					
ANR	627569	Condition	results [ i ] [ j ]	378:13:8821:8833	627494	0	True				
ANR	627570	ArrayIndexing	results [ i ] [ j ]		627494	0					
ANR	627571	ArrayIndexing	results [ i ]		627494	0					
ANR	627572	Identifier	results		627494	0					
ANR	627573	Identifier	i		627494	1					
ANR	627574	Identifier	j		627494	1					
ANR	627575	CompoundStatement		12:29:253:253	627494	1					
ANR	627576	Label	case ' ' :	379:4:8843:8851	627494	0	True				
ANR	627577	Label	case '\\\\' :	380:4:8857:8866	627494	1	True				
ANR	627578	Label	case '\\r' :	381:4:8872:8881	627494	2	True				
ANR	627579	Label	case '\\n' :	382:4:8887:8896	627494	3	True				
ANR	627580	ExpressionStatement	buffer += '\\\\'	383:5:8903:8917	627494	4	True				
ANR	627581	AssignmentExpression	buffer += '\\\\'		627494	0		+=			
ANR	627582	Identifier	buffer		627494	0					
ANR	627583	PrimaryExpression	'\\\\'		627494	1					
ANR	627584	Label	default :	384:4:8923:8930	627494	5	True				
ANR	627585	Identifier	default		627494	0					
ANR	627586	ExpressionStatement	buffer += results [ i ] [ j ]	385:5:8937:8960	627494	6	True				
ANR	627587	AssignmentExpression	buffer += results [ i ] [ j ]		627494	0		+=			
ANR	627588	Identifier	buffer		627494	0					
ANR	627589	ArrayIndexing	results [ i ] [ j ]		627494	1					
ANR	627590	ArrayIndexing	results [ i ]		627494	0					
ANR	627591	Identifier	results		627494	0					
ANR	627592	Identifier	i		627494	1					
ANR	627593	Identifier	j		627494	1					
ANR	627594	ExpressionStatement	buffer += '\\n'	391:1:8982:8996	627494	3	True				
ANR	627595	AssignmentExpression	buffer += '\\n'		627494	0		+=			
ANR	627596	Identifier	buffer		627494	0					
ANR	627597	PrimaryExpression	'\\n'		627494	1					
ANR	627598	ReturnStatement	return buffer ;	392:1:8999:9012	627494	4	True				
ANR	627599	Identifier	buffer		627494	0					
ANR	627600	ReturnType	std :: string		627494	1					
ANR	627601	Identifier	create_output_string		627494	2					
ANR	627602	ParameterList	"int req_id , const char * * results , const int argc"		627494	3					
ANR	627603	Parameter	int req_id	366:22:8532:8541	627494	0	True				
ANR	627604	ParameterType	int		627494	0					
ANR	627605	Identifier	req_id		627494	1					
ANR	627606	Parameter	const char * * results	366:34:8544:8564	627494	1	True				
ANR	627607	ParameterType	const char * *		627494	0					
ANR	627608	Identifier	results		627494	1					
ANR	627609	Parameter	const int argc	366:57:8567:8580	627494	2	True				
ANR	627610	ParameterType	const int		627494	0					
ANR	627611	Identifier	argc		627494	1					
ANR	627612	CFGEntryNode	ENTRY		627494		True				
ANR	627613	CFGExitNode	EXIT		627494		True				
ANR	627614	Symbol	req_id		627494						
ANR	627615	Symbol	argc		627494						
ANR	627616	Symbol	* * i		627494						
ANR	627617	Symbol	NULL		627494						
ANR	627618	Symbol	* i		627494						
ANR	627619	Symbol	* * results		627494						
ANR	627620	Symbol	* j		627494						
ANR	627621	Symbol	i		627494						
ANR	627622	Symbol	j		627494						
ANR	627623	Symbol	buffer		627494						
ANR	627624	Symbol	* results		627494						
ANR	627625	Symbol	results		627494						
ANR	627626	Function	create_success_result	395:0:9017:9598							
ANR	627627	FunctionDef	"create_success_result (int req_id , StringList * result_list)"		627626	0					
ANR	627628	CompoundStatement		397:0:9089:9598	627626	0					
ANR	627629	IdentifierDeclStatement	int index_count = 1 ;	398:1:9092:9111	627626	0	True				
ANR	627630	IdentifierDecl	index_count = 1		627626	0					
ANR	627631	IdentifierDeclType	int		627626	0					
ANR	627632	Identifier	index_count		627626	1					
ANR	627633	AssignmentExpression	index_count = 1		627626	2		=			
ANR	627634	Identifier	index_count		627626	0					
ANR	627635	PrimaryExpression	1		627626	1					
ANR	627636	IfStatement	if ( ! result_list || ( result_list -> number ( ) == 0 ) )		627626	1					
ANR	627637	Condition	! result_list || ( result_list -> number ( ) == 0 )	399:5:9118:9161	627626	0	True				
ANR	627638	OrExpression	! result_list || ( result_list -> number ( ) == 0 )		627626	0		||			
ANR	627639	UnaryOperationExpression	! result_list		627626	0					
ANR	627640	UnaryOperator	!		627626	0					
ANR	627641	Identifier	result_list		627626	1					
ANR	627642	EqualityExpression	result_list -> number ( ) == 0		627626	1		==			
ANR	627643	CallExpression	result_list -> number ( )		627626	0					
ANR	627644	Callee	result_list -> number		627626	0					
ANR	627645	PtrMemberAccess	result_list -> number		627626	0					
ANR	627646	Identifier	result_list		627626	0					
ANR	627647	Identifier	number		627626	1					
ANR	627648	ArgumentList			627626	1					
ANR	627649	PrimaryExpression	0		627626	1					
ANR	627650	CompoundStatement		3:52:75:75	627626	1					
ANR	627651	ExpressionStatement	index_count = 1	400:2:9169:9184	627626	0	True				
ANR	627652	AssignmentExpression	index_count = 1		627626	0		=			
ANR	627653	Identifier	index_count		627626	0					
ANR	627654	PrimaryExpression	1		627626	1					
ANR	627655	ElseStatement	else		627626	0					
ANR	627656	CompoundStatement		5:7:103:103	627626	0					
ANR	627657	ExpressionStatement	index_count = result_list -> number ( )	402:2:9197:9232	627626	0	True				
ANR	627658	AssignmentExpression	index_count = result_list -> number ( )		627626	0		=			
ANR	627659	Identifier	index_count		627626	0					
ANR	627660	CallExpression	result_list -> number ( )		627626	1					
ANR	627661	Callee	result_list -> number		627626	0					
ANR	627662	PtrMemberAccess	result_list -> number		627626	0					
ANR	627663	Identifier	result_list		627626	0					
ANR	627664	Identifier	number		627626	1					
ANR	627665	ArgumentList			627626	1					
ANR	627666	IdentifierDeclStatement	const char * tmp_result [ index_count ] ;	405:1:9239:9274	627626	2	True				
ANR	627667	IdentifierDecl	* tmp_result [ index_count ]		627626	0					
ANR	627668	IdentifierDeclType	const char * [ index_count ]		627626	0					
ANR	627669	Identifier	tmp_result		627626	1					
ANR	627670	Identifier	index_count		627626	2					
ANR	627671	ExpressionStatement	tmp_result [ 0 ] = AMAZON_COMMAND_SUCCESS_OUTPUT	407:1:9278:9323	627626	3	True				
ANR	627672	AssignmentExpression	tmp_result [ 0 ] = AMAZON_COMMAND_SUCCESS_OUTPUT		627626	0		=			
ANR	627673	ArrayIndexing	tmp_result [ 0 ]		627626	0					
ANR	627674	Identifier	tmp_result		627626	0					
ANR	627675	PrimaryExpression	0		627626	1					
ANR	627676	Identifier	AMAZON_COMMAND_SUCCESS_OUTPUT		627626	1					
ANR	627677	IdentifierDeclStatement	int i = 1 ;	409:1:9327:9336	627626	4	True				
ANR	627678	IdentifierDecl	i = 1		627626	0					
ANR	627679	IdentifierDeclType	int		627626	0					
ANR	627680	Identifier	i		627626	1					
ANR	627681	AssignmentExpression	i = 1		627626	2		=			
ANR	627682	Identifier	i		627626	0					
ANR	627683	PrimaryExpression	1		627626	1					
ANR	627684	IfStatement	if ( result_list && ( result_list -> number ( ) > 0 ) )		627626	5					
ANR	627685	Condition	result_list && ( result_list -> number ( ) > 0 )	410:5:9343:9384	627626	0	True				
ANR	627686	AndExpression	result_list && ( result_list -> number ( ) > 0 )		627626	0		&&			
ANR	627687	Identifier	result_list		627626	0					
ANR	627688	RelationalExpression	result_list -> number ( ) > 0		627626	1		>			
ANR	627689	CallExpression	result_list -> number ( )		627626	0					
ANR	627690	Callee	result_list -> number		627626	0					
ANR	627691	PtrMemberAccess	result_list -> number		627626	0					
ANR	627692	Identifier	result_list		627626	0					
ANR	627693	Identifier	number		627626	1					
ANR	627694	ArgumentList			627626	1					
ANR	627695	PrimaryExpression	0		627626	1					
ANR	627696	CompoundStatement		15:2:302:325	627626	1					
ANR	627697	IdentifierDeclStatement	char * one_result = NULL ;	411:2:9392:9415	627626	0	True				
ANR	627698	IdentifierDecl	* one_result = NULL		627626	0					
ANR	627699	IdentifierDeclType	char *		627626	0					
ANR	627700	Identifier	one_result		627626	1					
ANR	627701	AssignmentExpression	* one_result = NULL		627626	2		=			
ANR	627702	Identifier	NULL		627626	0					
ANR	627703	Identifier	NULL		627626	1					
ANR	627704	ExpressionStatement	result_list -> rewind ( )	412:2:9419:9440	627626	1	True				
ANR	627705	CallExpression	result_list -> rewind ( )		627626	0					
ANR	627706	Callee	result_list -> rewind		627626	0					
ANR	627707	PtrMemberAccess	result_list -> rewind		627626	0					
ANR	627708	Identifier	result_list		627626	0					
ANR	627709	Identifier	rewind		627626	1					
ANR	627710	ArgumentList			627626	1					
ANR	627711	WhileStatement	while ( ( one_result = result_list -> next ( ) ) != NULL )		627626	2					
ANR	627712	Condition	( one_result = result_list -> next ( ) ) != NULL	413:8:9450:9491	627626	0	True				
ANR	627713	EqualityExpression	( one_result = result_list -> next ( ) ) != NULL		627626	0		!=			
ANR	627714	AssignmentExpression	one_result = result_list -> next ( )		627626	0		=			
ANR	627715	Identifier	one_result		627626	0					
ANR	627716	CallExpression	result_list -> next ( )		627626	1					
ANR	627717	Callee	result_list -> next		627626	0					
ANR	627718	PtrMemberAccess	result_list -> next		627626	0					
ANR	627719	Identifier	result_list		627626	0					
ANR	627720	Identifier	next		627626	1					
ANR	627721	ArgumentList			627626	1					
ANR	627722	Identifier	NULL		627626	1					
ANR	627723	CompoundStatement		17:53:405:405	627626	1					
ANR	627724	ExpressionStatement	tmp_result [ i ] = one_result	414:3:9500:9526	627626	0	True				
ANR	627725	AssignmentExpression	tmp_result [ i ] = one_result		627626	0		=			
ANR	627726	ArrayIndexing	tmp_result [ i ]		627626	0					
ANR	627727	Identifier	tmp_result		627626	0					
ANR	627728	Identifier	i		627626	1					
ANR	627729	Identifier	one_result		627626	1					
ANR	627730	ExpressionStatement	i ++	415:3:9531:9534	627626	1	True				
ANR	627731	PostIncDecOperationExpression	i ++		627626	0					
ANR	627732	Identifier	i		627626	0					
ANR	627733	IncDec	++		627626	1					
ANR	627734	ReturnStatement	"return create_output_string ( req_id , tmp_result , i ) ;"	419:1:9545:9596	627626	6	True				
ANR	627735	CallExpression	"create_output_string ( req_id , tmp_result , i )"		627626	0					
ANR	627736	Callee	create_output_string		627626	0					
ANR	627737	Identifier	create_output_string		627626	0					
ANR	627738	ArgumentList	req_id		627626	1					
ANR	627739	Argument	req_id		627626	0					
ANR	627740	Identifier	req_id		627626	0					
ANR	627741	Argument	tmp_result		627626	1					
ANR	627742	Identifier	tmp_result		627626	0					
ANR	627743	Argument	i		627626	2					
ANR	627744	Identifier	i		627626	0					
ANR	627745	ReturnType	std :: string		627626	1					
ANR	627746	Identifier	create_success_result		627626	2					
ANR	627747	ParameterList	"int req_id , StringList * result_list"		627626	3					
ANR	627748	Parameter	int req_id	396:23:9052:9061	627626	0	True				
ANR	627749	ParameterType	int		627626	0					
ANR	627750	Identifier	req_id		627626	1					
ANR	627751	Parameter	StringList * result_list	396:35:9064:9086	627626	1	True				
ANR	627752	ParameterType	StringList *		627626	0					
ANR	627753	Identifier	result_list		627626	1					
ANR	627754	CFGEntryNode	ENTRY		627626		True				
ANR	627755	CFGExitNode	EXIT		627626		True				
ANR	627756	Symbol	one_result		627626						
ANR	627757	Symbol	NULL		627626						
ANR	627758	Symbol	create_output_string		627626						
ANR	627759	Symbol	* result_list		627626						
ANR	627760	Symbol	i		627626						
ANR	627761	Symbol	tmp_result		627626						
ANR	627762	Symbol	result_list -> number		627626						
ANR	627763	Symbol	req_id		627626						
ANR	627764	Symbol	* i		627626						
ANR	627765	Symbol	result_list -> next		627626						
ANR	627766	Symbol	AMAZON_COMMAND_SUCCESS_OUTPUT		627626						
ANR	627767	Symbol	result_list		627626						
ANR	627768	Symbol	* tmp_result		627626						
ANR	627769	Symbol	index_count		627626						
ANR	627770	Function	create_failure_result	422:0:9601:9992							
ANR	627771	FunctionDef	"create_failure_result (int req_id , const char * err_msg , const char * err_code)"		627770	0					
ANR	627772	CompoundStatement		424:0:9691:9992	627770	0					
ANR	627773	IdentifierDeclStatement	const char * tmp_result [ 3 ] ;	425:1:9694:9719	627770	0	True				
ANR	627774	IdentifierDecl	* tmp_result [ 3 ]		627770	0					
ANR	627775	IdentifierDeclType	const char * [ 3 ]		627770	0					
ANR	627776	Identifier	tmp_result		627770	1					
ANR	627777	PrimaryExpression	3		627770	2					
ANR	627778	ExpressionStatement	tmp_result [ 0 ] = AMAZON_COMMAND_ERROR_OUTPUT	426:1:9722:9765	627770	1	True				
ANR	627779	AssignmentExpression	tmp_result [ 0 ] = AMAZON_COMMAND_ERROR_OUTPUT		627770	0		=			
ANR	627780	ArrayIndexing	tmp_result [ 0 ]		627770	0					
ANR	627781	Identifier	tmp_result		627770	0					
ANR	627782	PrimaryExpression	0		627770	1					
ANR	627783	Identifier	AMAZON_COMMAND_ERROR_OUTPUT		627770	1					
ANR	627784	IfStatement	if ( ! err_code )		627770	2					
ANR	627785	Condition	! err_code	428:5:9773:9781	627770	0	True				
ANR	627786	UnaryOperationExpression	! err_code		627770	0					
ANR	627787	UnaryOperator	!		627770	0					
ANR	627788	Identifier	err_code		627770	1					
ANR	627789	CompoundStatement		5:17:93:93	627770	1					
ANR	627790	ExpressionStatement	err_code = GENERAL_GAHP_ERROR_CODE	429:2:9789:9823	627770	0	True				
ANR	627791	AssignmentExpression	err_code = GENERAL_GAHP_ERROR_CODE		627770	0		=			
ANR	627792	Identifier	err_code		627770	0					
ANR	627793	Identifier	GENERAL_GAHP_ERROR_CODE		627770	1					
ANR	627794	IfStatement	if ( ! err_msg )		627770	3					
ANR	627795	Condition	! err_msg	431:5:9833:9840	627770	0	True				
ANR	627796	UnaryOperationExpression	! err_msg		627770	0					
ANR	627797	UnaryOperator	!		627770	0					
ANR	627798	Identifier	err_msg		627770	1					
ANR	627799	CompoundStatement		8:16:152:152	627770	1					
ANR	627800	ExpressionStatement	err_msg = GENERAL_GAHP_ERROR_MSG	432:2:9848:9880	627770	0	True				
ANR	627801	AssignmentExpression	err_msg = GENERAL_GAHP_ERROR_MSG		627770	0		=			
ANR	627802	Identifier	err_msg		627770	0					
ANR	627803	Identifier	GENERAL_GAHP_ERROR_MSG		627770	1					
ANR	627804	ExpressionStatement	tmp_result [ 1 ] = err_code	434:1:9886:9910	627770	4	True				
ANR	627805	AssignmentExpression	tmp_result [ 1 ] = err_code		627770	0		=			
ANR	627806	ArrayIndexing	tmp_result [ 1 ]		627770	0					
ANR	627807	Identifier	tmp_result		627770	0					
ANR	627808	PrimaryExpression	1		627770	1					
ANR	627809	Identifier	err_code		627770	1					
ANR	627810	ExpressionStatement	tmp_result [ 2 ] = err_msg	435:1:9913:9936	627770	5	True				
ANR	627811	AssignmentExpression	tmp_result [ 2 ] = err_msg		627770	0		=			
ANR	627812	ArrayIndexing	tmp_result [ 2 ]		627770	0					
ANR	627813	Identifier	tmp_result		627770	0					
ANR	627814	PrimaryExpression	2		627770	1					
ANR	627815	Identifier	err_msg		627770	1					
ANR	627816	ReturnStatement	"return create_output_string ( req_id , tmp_result , 3 ) ;"	437:1:9940:9990	627770	6	True				
ANR	627817	CallExpression	"create_output_string ( req_id , tmp_result , 3 )"		627770	0					
ANR	627818	Callee	create_output_string		627770	0					
ANR	627819	Identifier	create_output_string		627770	0					
ANR	627820	ArgumentList	req_id		627770	1					
ANR	627821	Argument	req_id		627770	0					
ANR	627822	Identifier	req_id		627770	0					
ANR	627823	Argument	tmp_result		627770	1					
ANR	627824	Identifier	tmp_result		627770	0					
ANR	627825	Argument	3		627770	2					
ANR	627826	PrimaryExpression	3		627770	0					
ANR	627827	ReturnType	std :: string		627770	1					
ANR	627828	Identifier	create_failure_result		627770	2					
ANR	627829	ParameterList	"int req_id , const char * err_msg , const char * err_code"		627770	3					
ANR	627830	Parameter	int req_id	423:23:9636:9645	627770	0	True				
ANR	627831	ParameterType	int		627770	0					
ANR	627832	Identifier	req_id		627770	1					
ANR	627833	Parameter	const char * err_msg	423:35:9648:9666	627770	1	True				
ANR	627834	ParameterType	const char *		627770	0					
ANR	627835	Identifier	err_msg		627770	1					
ANR	627836	Parameter	const char * err_code	423:56:9669:9688	627770	2	True				
ANR	627837	ParameterType	const char *		627770	0					
ANR	627838	Identifier	err_code		627770	1					
ANR	627839	CFGEntryNode	ENTRY		627770		True				
ANR	627840	CFGExitNode	EXIT		627770		True				
ANR	627841	Symbol	req_id		627770						
ANR	627842	Symbol	create_output_string		627770						
ANR	627843	Symbol	AMAZON_COMMAND_ERROR_OUTPUT		627770						
ANR	627844	Symbol	err_msg		627770						
ANR	627845	Symbol	err_code		627770						
ANR	627846	Symbol	* tmp_result		627770						
ANR	627847	Symbol	GENERAL_GAHP_ERROR_MSG		627770						
ANR	627848	Symbol	tmp_result		627770						
ANR	627849	Symbol	GENERAL_GAHP_ERROR_CODE		627770						
