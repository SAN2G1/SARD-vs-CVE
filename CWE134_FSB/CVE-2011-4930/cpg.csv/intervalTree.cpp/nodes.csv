command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1665115	File	data/converged/CVE-2011-4930_htcondor/intervalTree.cpp								
ANR	1665116	Function	IntervalTree :: IntervalTree	31:0:956:1004							
ANR	1665117	FunctionDef	IntervalTree :: IntervalTree ()		1665116	0					
ANR	1665118	CompoundStatement		33:0:987:1004	1665116	0					
ANR	1665119	ExpressionStatement	nodes = NULL	34:1:990:1002	1665116	0	True				
ANR	1665120	AssignmentExpression	nodes = NULL		1665116	0		=			
ANR	1665121	Identifier	nodes		1665116	0					
ANR	1665122	Identifier	NULL		1665116	1					
ANR	1665123	Identifier	IntervalTree :: IntervalTree		1665116	1					
ANR	1665124	ParameterList			1665116	2					
ANR	1665125	CFGEntryNode	ENTRY		1665116		True				
ANR	1665126	CFGExitNode	EXIT		1665116		True				
ANR	1665127	Symbol	NULL		1665116						
ANR	1665128	Symbol	nodes		1665116						
ANR	1665129	Function	IntervalTree :: ~IntervalTree	37:0:1007:1071							
ANR	1665130	FunctionDef	IntervalTree :: ~IntervalTree ()		1665129	0					
ANR	1665131	CompoundStatement		39:0:1039:1071	1665129	0					
ANR	1665132	IfStatement	if ( nodes )		1665129	0					
ANR	1665133	Condition	nodes	40:5:1046:1050	1665129	0	True				
ANR	1665134	Identifier	nodes		1665129	0					
ANR	1665135	Statement	delete	40:13:1054:1059	1665129	1	True				
ANR	1665136	Statement	[	40:20:1061:1061	1665129	1	True				
ANR	1665137	Statement	]	40:21:1062:1062	1665129	2	True				
ANR	1665138	ExpressionStatement	nodes	40:23:1064:1069	1665129	3	True				
ANR	1665139	Identifier	nodes		1665129	0					
ANR	1665140	Identifier	IntervalTree :: ~IntervalTree		1665129	1					
ANR	1665141	ParameterList			1665129	2					
ANR	1665142	CFGEntryNode	ENTRY		1665129		True				
ANR	1665143	CFGExitNode	EXIT		1665129		True				
ANR	1665144	Symbol	nodes		1665129						
ANR	1665145	Function	IntervalTree :: MakeIntervalTree	43:0:1074:5368							
ANR	1665146	FunctionDef	IntervalTree :: MakeIntervalTree (const OneDimension & intervals)		1665145	0					
ANR	1665147	CompoundStatement		45:0:1153:5368	1665145	0					
ANR	1665148	IdentifierDeclStatement	OneDimension :: const_iterator itr ;	46:1:1156:1188	1665145	0	True				
ANR	1665149	IdentifierDecl	itr		1665145	0					
ANR	1665150	IdentifierDeclType	OneDimension :: const_iterator		1665145	0					
ANR	1665151	Identifier	itr		1665145	1					
ANR	1665152	IdentifierDeclStatement	set < double > endPoints ;	47:1:1191:1217	1665145	1	True				
ANR	1665153	IdentifierDecl	endPoints		1665145	0					
ANR	1665154	IdentifierDeclType	set < double >		1665145	0					
ANR	1665155	Identifier	endPoints		1665145	1					
ANR	1665156	IdentifierDeclStatement	"double tmpL , tmpR ;"	48:1:1220:1243	1665145	2	True				
ANR	1665157	IdentifierDecl	tmpL		1665145	0					
ANR	1665158	IdentifierDeclType	double		1665145	0					
ANR	1665159	Identifier	tmpL		1665145	1					
ANR	1665160	IdentifierDecl	tmpR		1665145	1					
ANR	1665161	IdentifierDeclType	double		1665145	0					
ANR	1665162	Identifier	tmpR		1665145	1					
ANR	1665163	ForStatement	for ( itr = intervals . begin ( ) ; itr != intervals . end ( ) ; itr ++ )		1665145	3					
ANR	1665164	ForInit	itr = intervals . begin ( ) ;	51:6:1303:1327	1665145	0	True				
ANR	1665165	AssignmentExpression	itr = intervals . begin ( )		1665145	0		=			
ANR	1665166	Identifier	itr		1665145	0					
ANR	1665167	CallExpression	intervals . begin ( )		1665145	1					
ANR	1665168	Callee	intervals . begin		1665145	0					
ANR	1665169	MemberAccess	intervals . begin		1665145	0					
ANR	1665170	Identifier	intervals		1665145	0					
ANR	1665171	Identifier	begin		1665145	1					
ANR	1665172	ArgumentList			1665145	1					
ANR	1665173	Condition	itr != intervals . end ( )	51:32:1329:1351	1665145	1	True				
ANR	1665174	EqualityExpression	itr != intervals . end ( )		1665145	0		!=			
ANR	1665175	Identifier	itr		1665145	0					
ANR	1665176	CallExpression	intervals . end ( )		1665145	1					
ANR	1665177	Callee	intervals . end		1665145	0					
ANR	1665178	MemberAccess	intervals . end		1665145	0					
ANR	1665179	Identifier	intervals		1665145	0					
ANR	1665180	Identifier	end		1665145	1					
ANR	1665181	ArgumentList			1665145	1					
ANR	1665182	PostIncDecOperationExpression	itr ++	51:57:1354:1358	1665145	2	True				
ANR	1665183	Identifier	itr		1665145	0					
ANR	1665184	IncDec	++		1665145	1					
ANR	1665185	CompoundStatement		7:65:208:208	1665145	3					
ANR	1665186	ExpressionStatement	itr -> second . lower . IsNumber ( tmpL )	52:2:1366:1400	1665145	0	True				
ANR	1665187	CallExpression	itr -> second . lower . IsNumber ( tmpL )		1665145	0					
ANR	1665188	Callee	itr -> second . lower . IsNumber		1665145	0					
ANR	1665189	MemberAccess	itr -> second . lower . IsNumber		1665145	0					
ANR	1665190	MemberAccess	itr -> second . lower		1665145	0					
ANR	1665191	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665192	Identifier	itr		1665145	0					
ANR	1665193	Identifier	second		1665145	1					
ANR	1665194	Identifier	lower		1665145	1					
ANR	1665195	Identifier	IsNumber		1665145	1					
ANR	1665196	ArgumentList	tmpL		1665145	1					
ANR	1665197	Argument	tmpL		1665145	0					
ANR	1665198	Identifier	tmpL		1665145	0					
ANR	1665199	ExpressionStatement	endPoints . insert ( tmpL )	53:2:1404:1428	1665145	1	True				
ANR	1665200	CallExpression	endPoints . insert ( tmpL )		1665145	0					
ANR	1665201	Callee	endPoints . insert		1665145	0					
ANR	1665202	MemberAccess	endPoints . insert		1665145	0					
ANR	1665203	Identifier	endPoints		1665145	0					
ANR	1665204	Identifier	insert		1665145	1					
ANR	1665205	ArgumentList	tmpL		1665145	1					
ANR	1665206	Argument	tmpL		1665145	0					
ANR	1665207	Identifier	tmpL		1665145	0					
ANR	1665208	ExpressionStatement	itr -> second . upper . IsNumber ( tmpR )	54:2:1432:1466	1665145	2	True				
ANR	1665209	CallExpression	itr -> second . upper . IsNumber ( tmpR )		1665145	0					
ANR	1665210	Callee	itr -> second . upper . IsNumber		1665145	0					
ANR	1665211	MemberAccess	itr -> second . upper . IsNumber		1665145	0					
ANR	1665212	MemberAccess	itr -> second . upper		1665145	0					
ANR	1665213	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665214	Identifier	itr		1665145	0					
ANR	1665215	Identifier	second		1665145	1					
ANR	1665216	Identifier	upper		1665145	1					
ANR	1665217	Identifier	IsNumber		1665145	1					
ANR	1665218	ArgumentList	tmpR		1665145	1					
ANR	1665219	Argument	tmpR		1665145	0					
ANR	1665220	Identifier	tmpR		1665145	0					
ANR	1665221	ExpressionStatement	endPoints . insert ( tmpR )	55:2:1470:1494	1665145	3	True				
ANR	1665222	CallExpression	endPoints . insert ( tmpR )		1665145	0					
ANR	1665223	Callee	endPoints . insert		1665145	0					
ANR	1665224	MemberAccess	endPoints . insert		1665145	0					
ANR	1665225	Identifier	endPoints		1665145	0					
ANR	1665226	Identifier	insert		1665145	1					
ANR	1665227	ArgumentList	tmpR		1665145	1					
ANR	1665228	Argument	tmpR		1665145	0					
ANR	1665229	Identifier	tmpR		1665145	0					
ANR	1665230	IdentifierDeclStatement	unsigned int numPoints = endPoints . size ( ) ;	57:1:1500:1542	1665145	4	True				
ANR	1665231	IdentifierDecl	numPoints = endPoints . size ( )		1665145	0					
ANR	1665232	IdentifierDeclType	unsigned int		1665145	0					
ANR	1665233	Identifier	numPoints		1665145	1					
ANR	1665234	AssignmentExpression	numPoints = endPoints . size ( )		1665145	2		=			
ANR	1665235	Identifier	numPoints		1665145	0					
ANR	1665236	CallExpression	endPoints . size ( )		1665145	1					
ANR	1665237	Callee	endPoints . size		1665145	0					
ANR	1665238	MemberAccess	endPoints . size		1665145	0					
ANR	1665239	Identifier	endPoints		1665145	0					
ANR	1665240	Identifier	size		1665145	1					
ANR	1665241	ArgumentList			1665145	1					
ANR	1665242	IdentifierDeclStatement	"int depth , overflow , retain , size , frontStart , backStart ;"	60:1:1612:1668	1665145	5	True				
ANR	1665243	IdentifierDecl	depth		1665145	0					
ANR	1665244	IdentifierDeclType	int		1665145	0					
ANR	1665245	Identifier	depth		1665145	1					
ANR	1665246	IdentifierDecl	overflow		1665145	1					
ANR	1665247	IdentifierDeclType	int		1665145	0					
ANR	1665248	Identifier	overflow		1665145	1					
ANR	1665249	IdentifierDecl	retain		1665145	2					
ANR	1665250	IdentifierDeclType	int		1665145	0					
ANR	1665251	Identifier	retain		1665145	1					
ANR	1665252	IdentifierDecl	size		1665145	3					
ANR	1665253	IdentifierDeclType	int		1665145	0					
ANR	1665254	Identifier	size		1665145	1					
ANR	1665255	IdentifierDecl	frontStart		1665145	4					
ANR	1665256	IdentifierDeclType	int		1665145	0					
ANR	1665257	Identifier	frontStart		1665145	1					
ANR	1665258	IdentifierDecl	backStart		1665145	5					
ANR	1665259	IdentifierDeclType	int		1665145	0					
ANR	1665260	Identifier	backStart		1665145	1					
ANR	1665261	ExpressionStatement	depth = 1	63:1:1727:1736	1665145	6	True				
ANR	1665262	AssignmentExpression	depth = 1		1665145	0		=			
ANR	1665263	Identifier	depth		1665145	0					
ANR	1665264	PrimaryExpression	1		1665145	1					
ANR	1665265	WhileStatement	while ( numPoints >> depth )		1665145	7					
ANR	1665266	Condition	numPoints >> depth	64:8:1746:1763	1665145	0	True				
ANR	1665267	ShiftExpression	numPoints >> depth		1665145	0		>>			
ANR	1665268	Identifier	numPoints		1665145	0					
ANR	1665269	Identifier	depth		1665145	1					
ANR	1665270	ExpressionStatement	depth ++	64:29:1767:1774	1665145	1	True				
ANR	1665271	PostIncDecOperationExpression	depth ++		1665145	0					
ANR	1665272	Identifier	depth		1665145	0					
ANR	1665273	IncDec	++		1665145	1					
ANR	1665274	Statement	overflow	67:1:1844:1851	1665145	8	True				
ANR	1665275	Statement	=	67:10:1853:1853	1665145	9	True				
ANR	1665276	Statement	2	67:12:1855:1855	1665145	10	True				
ANR	1665277	Statement	*	67:14:1857:1857	1665145	11	True				
ANR	1665278	Statement	(	67:16:1859:1859	1665145	12	True				
ANR	1665279	Statement	numPoints	67:18:1861:1869	1665145	13	True				
ANR	1665280	Statement	-	67:28:1871:1871	1665145	14	True				
ANR	1665281	Statement	unsigned	67:30:1873:1880	1665145	15	True				
ANR	1665282	Statement	(	67:38:1881:1881	1665145	16	True				
ANR	1665283	Statement	1	67:40:1883:1883	1665145	17	True				
ANR	1665284	Statement	<<	67:41:1884:1885	1665145	18	True				
ANR	1665285	Statement	(	67:43:1886:1886	1665145	19	True				
ANR	1665286	Statement	depth	67:44:1887:1891	1665145	20	True				
ANR	1665287	Statement	-	67:49:1892:1892	1665145	21	True				
ANR	1665288	Statement	1	67:50:1893:1893	1665145	22	True				
ANR	1665289	Statement	)	67:51:1894:1894	1665145	23	True				
ANR	1665290	Statement	)	67:53:1896:1896	1665145	24	True				
ANR	1665291	Statement	)	67:55:1898:1898	1665145	25	True				
ANR	1665292	ExpressionStatement		67:56:1899:1899	1665145	26	True				
ANR	1665293	ExpressionStatement	retain = numPoints - overflow	68:1:1902:1931	1665145	27	True				
ANR	1665294	AssignmentExpression	retain = numPoints - overflow		1665145	0		=			
ANR	1665295	Identifier	retain		1665145	0					
ANR	1665296	AdditiveExpression	numPoints - overflow		1665145	1		-			
ANR	1665297	Identifier	numPoints		1665145	0					
ANR	1665298	Identifier	overflow		1665145	1					
ANR	1665299	ExpressionStatement	frontStart = ( 1 << depth ) - 1	71:1:2004:2035	1665145	28	True				
ANR	1665300	AssignmentExpression	frontStart = ( 1 << depth ) - 1		1665145	0		=			
ANR	1665301	Identifier	frontStart		1665145	0					
ANR	1665302	AdditiveExpression	( 1 << depth ) - 1		1665145	1		-			
ANR	1665303	ShiftExpression	1 << depth		1665145	0		<<			
ANR	1665304	PrimaryExpression	1		1665145	0					
ANR	1665305	Identifier	depth		1665145	1					
ANR	1665306	PrimaryExpression	1		1665145	1					
ANR	1665307	ExpressionStatement	backStart = frontStart - retain	72:1:2038:2069	1665145	29	True				
ANR	1665308	AssignmentExpression	backStart = frontStart - retain		1665145	0		=			
ANR	1665309	Identifier	backStart		1665145	0					
ANR	1665310	AdditiveExpression	frontStart - retain		1665145	1		-			
ANR	1665311	Identifier	frontStart		1665145	0					
ANR	1665312	Identifier	retain		1665145	1					
ANR	1665313	ExpressionStatement	size = frontStart + overflow	73:1:2072:2100	1665145	30	True				
ANR	1665314	AssignmentExpression	size = frontStart + overflow		1665145	0		=			
ANR	1665315	Identifier	size		1665145	0					
ANR	1665316	AdditiveExpression	frontStart + overflow		1665145	1		+			
ANR	1665317	Identifier	frontStart		1665145	0					
ANR	1665318	Identifier	overflow		1665145	1					
ANR	1665319	Statement	IntervalTree	76:1:2150:2161	1665145	31	True				
ANR	1665320	Statement	*	76:14:2163:2163	1665145	32	True				
ANR	1665321	Statement	intTree	76:15:2164:2170	1665145	33	True				
ANR	1665322	Statement	=	76:23:2172:2172	1665145	34	True				
ANR	1665323	Statement	new	76:25:2174:2176	1665145	35	True				
ANR	1665324	ExpressionStatement	IntervalTree	76:29:2178:2190	1665145	36	True				
ANR	1665325	Identifier	IntervalTree		1665145	0					
ANR	1665326	IdentifierDeclStatement	IntervalTreeNode * nodes = new IntervalTreeNode [ size ] ;	77:1:2193:2247	1665145	37	True				
ANR	1665327	IdentifierDecl	* nodes = new IntervalTreeNode [ size ]		1665145	0					
ANR	1665328	IdentifierDeclType	IntervalTreeNode *		1665145	0					
ANR	1665329	Identifier	nodes		1665145	1					
ANR	1665330	AssignmentExpression	* nodes = new IntervalTreeNode [ size ]		1665145	2		=			
ANR	1665331	Identifier	size		1665145	0					
ANR	1665332	Identifier	size		1665145	1					
ANR	1665333	ExpressionStatement	intTree -> size = size	78:1:2250:2270	1665145	38	True				
ANR	1665334	AssignmentExpression	intTree -> size = size		1665145	0		=			
ANR	1665335	PtrMemberAccess	intTree -> size		1665145	0					
ANR	1665336	Identifier	intTree		1665145	0					
ANR	1665337	Identifier	size		1665145	1					
ANR	1665338	Identifier	size		1665145	1					
ANR	1665339	ExpressionStatement	intTree -> nodes = nodes	79:1:2273:2295	1665145	39	True				
ANR	1665340	AssignmentExpression	intTree -> nodes = nodes		1665145	0		=			
ANR	1665341	PtrMemberAccess	intTree -> nodes		1665145	0					
ANR	1665342	Identifier	intTree		1665145	0					
ANR	1665343	Identifier	nodes		1665145	1					
ANR	1665344	Identifier	nodes		1665145	1					
ANR	1665345	IdentifierDeclStatement	set < double > :: iterator sitr = endPoints . begin ( ) ;	82:1:2346:2393	1665145	40	True				
ANR	1665346	IdentifierDecl	sitr = endPoints . begin ( )		1665145	0					
ANR	1665347	IdentifierDeclType	set < double > :: iterator		1665145	0					
ANR	1665348	Identifier	sitr		1665145	1					
ANR	1665349	AssignmentExpression	sitr = endPoints . begin ( )		1665145	2		=			
ANR	1665350	Identifier	sitr		1665145	0					
ANR	1665351	CallExpression	endPoints . begin ( )		1665145	1					
ANR	1665352	Callee	endPoints . begin		1665145	0					
ANR	1665353	MemberAccess	endPoints . begin		1665145	0					
ANR	1665354	Identifier	endPoints		1665145	0					
ANR	1665355	Identifier	begin		1665145	1					
ANR	1665356	ArgumentList			1665145	1					
ANR	1665357	ForStatement	"for ( int i = frontStart ; i < frontStart + overflow ; i ++ , sitr ++ )"		1665145	41					
ANR	1665358	ForInit	int i = frontStart ;	83:6:2401:2420	1665145	0	True				
ANR	1665359	IdentifierDeclStatement	int i = frontStart ;		1665145	0					
ANR	1665360	IdentifierDecl	i = frontStart		1665145	0					
ANR	1665361	IdentifierDeclType	int		1665145	0					
ANR	1665362	Identifier	i		1665145	1					
ANR	1665363	AssignmentExpression	i = frontStart		1665145	2		=			
ANR	1665364	Identifier	frontStart		1665145	0					
ANR	1665365	Identifier	frontStart		1665145	1					
ANR	1665366	Condition	i < frontStart + overflow	83:27:2422:2444	1665145	1	True				
ANR	1665367	RelationalExpression	i < frontStart + overflow		1665145	0		<			
ANR	1665368	Identifier	i		1665145	0					
ANR	1665369	AdditiveExpression	frontStart + overflow		1665145	1		+			
ANR	1665370	Identifier	frontStart		1665145	0					
ANR	1665371	Identifier	overflow		1665145	1					
ANR	1665372	Expression	"i ++ , sitr ++"	83:53:2448:2458	1665145	2	True				
ANR	1665373	PostIncDecOperationExpression	i ++		1665145	0					
ANR	1665374	Identifier	i		1665145	0					
ANR	1665375	IncDec	++		1665145	1					
ANR	1665376	PostIncDecOperationExpression	sitr ++		1665145	1					
ANR	1665377	Identifier	sitr		1665145	0					
ANR	1665378	IncDec	++		1665145	1					
ANR	1665379	CompoundStatement		39:67:1308:1308	1665145	3					
ANR	1665380	ExpressionStatement	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr	84:2:2466:2522	1665145	0	True				
ANR	1665381	AssignmentExpression	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		1665145	0		=			
ANR	1665382	MemberAccess	nodes [ i ] . max		1665145	0					
ANR	1665383	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665384	Identifier	nodes		1665145	0					
ANR	1665385	Identifier	i		1665145	1					
ANR	1665386	Identifier	max		1665145	1					
ANR	1665387	AssignmentExpression	nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		1665145	1		=			
ANR	1665388	MemberAccess	nodes [ i ] . min		1665145	0					
ANR	1665389	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665390	Identifier	nodes		1665145	0					
ANR	1665391	Identifier	i		1665145	1					
ANR	1665392	Identifier	min		1665145	1					
ANR	1665393	AssignmentExpression	nodes [ i ] . nodeValue = * sitr		1665145	1		=			
ANR	1665394	MemberAccess	nodes [ i ] . nodeValue		1665145	0					
ANR	1665395	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665396	Identifier	nodes		1665145	0					
ANR	1665397	Identifier	i		1665145	1					
ANR	1665398	Identifier	nodeValue		1665145	1					
ANR	1665399	UnaryOperationExpression	* sitr		1665145	1					
ANR	1665400	UnaryOperator	*		1665145	0					
ANR	1665401	Identifier	sitr		1665145	1					
ANR	1665402	ForStatement	"for ( int i = backStart ; i < backStart + retain ; i ++ , sitr ++ )"		1665145	42					
ANR	1665403	ForInit	int i = backStart ;	88:6:2579:2597	1665145	0	True				
ANR	1665404	IdentifierDeclStatement	int i = backStart ;		1665145	0					
ANR	1665405	IdentifierDecl	i = backStart		1665145	0					
ANR	1665406	IdentifierDeclType	int		1665145	0					
ANR	1665407	Identifier	i		1665145	1					
ANR	1665408	AssignmentExpression	i = backStart		1665145	2		=			
ANR	1665409	Identifier	backStart		1665145	0					
ANR	1665410	Identifier	backStart		1665145	1					
ANR	1665411	Condition	i < backStart + retain	88:26:2599:2618	1665145	1	True				
ANR	1665412	RelationalExpression	i < backStart + retain		1665145	0		<			
ANR	1665413	Identifier	i		1665145	0					
ANR	1665414	AdditiveExpression	backStart + retain		1665145	1		+			
ANR	1665415	Identifier	backStart		1665145	0					
ANR	1665416	Identifier	retain		1665145	1					
ANR	1665417	Expression	"i ++ , sitr ++"	88:49:2622:2632	1665145	2	True				
ANR	1665418	PostIncDecOperationExpression	i ++		1665145	0					
ANR	1665419	Identifier	i		1665145	0					
ANR	1665420	IncDec	++		1665145	1					
ANR	1665421	PostIncDecOperationExpression	sitr ++		1665145	1					
ANR	1665422	Identifier	sitr		1665145	0					
ANR	1665423	IncDec	++		1665145	1					
ANR	1665424	CompoundStatement		44:63:1482:1482	1665145	3					
ANR	1665425	ExpressionStatement	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr	89:2:2640:2696	1665145	0	True				
ANR	1665426	AssignmentExpression	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		1665145	0		=			
ANR	1665427	MemberAccess	nodes [ i ] . max		1665145	0					
ANR	1665428	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665429	Identifier	nodes		1665145	0					
ANR	1665430	Identifier	i		1665145	1					
ANR	1665431	Identifier	max		1665145	1					
ANR	1665432	AssignmentExpression	nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		1665145	1		=			
ANR	1665433	MemberAccess	nodes [ i ] . min		1665145	0					
ANR	1665434	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665435	Identifier	nodes		1665145	0					
ANR	1665436	Identifier	i		1665145	1					
ANR	1665437	Identifier	min		1665145	1					
ANR	1665438	AssignmentExpression	nodes [ i ] . nodeValue = * sitr		1665145	1		=			
ANR	1665439	MemberAccess	nodes [ i ] . nodeValue		1665145	0					
ANR	1665440	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665441	Identifier	nodes		1665145	0					
ANR	1665442	Identifier	i		1665145	1					
ANR	1665443	Identifier	nodeValue		1665145	1					
ANR	1665444	UnaryOperationExpression	* sitr		1665145	1					
ANR	1665445	UnaryOperator	*		1665145	0					
ANR	1665446	Identifier	sitr		1665145	1					
ANR	1665447	ForStatement	for ( int i = backStart - 1 ; i >= 0 ; i -- )		1665145	43					
ANR	1665448	ForInit	int i = backStart - 1 ;	93:6:2761:2783	1665145	0	True				
ANR	1665449	IdentifierDeclStatement	int i = backStart - 1 ;		1665145	0					
ANR	1665450	IdentifierDecl	i = backStart - 1		1665145	0					
ANR	1665451	IdentifierDeclType	int		1665145	0					
ANR	1665452	Identifier	i		1665145	1					
ANR	1665453	AssignmentExpression	i = backStart - 1		1665145	2		=			
ANR	1665454	Identifier	i		1665145	0					
ANR	1665455	AdditiveExpression	backStart - 1		1665145	1		-			
ANR	1665456	Identifier	backStart		1665145	0					
ANR	1665457	PrimaryExpression	1		1665145	1					
ANR	1665458	Condition	i >= 0	93:30:2785:2790	1665145	1	True				
ANR	1665459	RelationalExpression	i >= 0		1665145	0		>=			
ANR	1665460	Identifier	i		1665145	0					
ANR	1665461	PrimaryExpression	0		1665145	1					
ANR	1665462	PostIncDecOperationExpression	i --	93:39:2794:2796	1665145	2	True				
ANR	1665463	Identifier	i		1665145	0					
ANR	1665464	IncDec	--		1665145	1					
ANR	1665465	CompoundStatement		49:45:1646:1646	1665145	3					
ANR	1665466	ExpressionStatement	nodes [ i ] . nodeValue = ( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2	94:2:2804:2868	1665145	0	True				
ANR	1665467	AssignmentExpression	nodes [ i ] . nodeValue = ( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2		1665145	0		=			
ANR	1665468	MemberAccess	nodes [ i ] . nodeValue		1665145	0					
ANR	1665469	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665470	Identifier	nodes		1665145	0					
ANR	1665471	Identifier	i		1665145	1					
ANR	1665472	Identifier	nodeValue		1665145	1					
ANR	1665473	MultiplicativeExpression	( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2		1665145	1		/			
ANR	1665474	AdditiveExpression	nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min		1665145	0		+			
ANR	1665475	MemberAccess	nodes [ 2 * i + 1 ] . max		1665145	0					
ANR	1665476	ArrayIndexing	nodes [ 2 * i + 1 ]		1665145	0					
ANR	1665477	Identifier	nodes		1665145	0					
ANR	1665478	AdditiveExpression	2 * i + 1		1665145	1		+			
ANR	1665479	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665480	PrimaryExpression	2		1665145	0					
ANR	1665481	Identifier	i		1665145	1					
ANR	1665482	PrimaryExpression	1		1665145	1					
ANR	1665483	Identifier	max		1665145	1					
ANR	1665484	MemberAccess	nodes [ 2 * i + 2 ] . min		1665145	1					
ANR	1665485	ArrayIndexing	nodes [ 2 * i + 2 ]		1665145	0					
ANR	1665486	Identifier	nodes		1665145	0					
ANR	1665487	AdditiveExpression	2 * i + 2		1665145	1		+			
ANR	1665488	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665489	PrimaryExpression	2		1665145	0					
ANR	1665490	Identifier	i		1665145	1					
ANR	1665491	PrimaryExpression	2		1665145	1					
ANR	1665492	Identifier	min		1665145	1					
ANR	1665493	PrimaryExpression	2		1665145	1					
ANR	1665494	ExpressionStatement	tmpL = nodes [ 2 * i + 1 ] . max	95:2:2872:2895	1665145	1	True				
ANR	1665495	AssignmentExpression	tmpL = nodes [ 2 * i + 1 ] . max		1665145	0		=			
ANR	1665496	Identifier	tmpL		1665145	0					
ANR	1665497	MemberAccess	nodes [ 2 * i + 1 ] . max		1665145	1					
ANR	1665498	ArrayIndexing	nodes [ 2 * i + 1 ]		1665145	0					
ANR	1665499	Identifier	nodes		1665145	0					
ANR	1665500	AdditiveExpression	2 * i + 1		1665145	1		+			
ANR	1665501	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665502	PrimaryExpression	2		1665145	0					
ANR	1665503	Identifier	i		1665145	1					
ANR	1665504	PrimaryExpression	1		1665145	1					
ANR	1665505	Identifier	max		1665145	1					
ANR	1665506	ExpressionStatement	tmpR = nodes [ 2 * i + 2 ] . max	95:27:2897:2920	1665145	2	True				
ANR	1665507	AssignmentExpression	tmpR = nodes [ 2 * i + 2 ] . max		1665145	0		=			
ANR	1665508	Identifier	tmpR		1665145	0					
ANR	1665509	MemberAccess	nodes [ 2 * i + 2 ] . max		1665145	1					
ANR	1665510	ArrayIndexing	nodes [ 2 * i + 2 ]		1665145	0					
ANR	1665511	Identifier	nodes		1665145	0					
ANR	1665512	AdditiveExpression	2 * i + 2		1665145	1		+			
ANR	1665513	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665514	PrimaryExpression	2		1665145	0					
ANR	1665515	Identifier	i		1665145	1					
ANR	1665516	PrimaryExpression	2		1665145	1					
ANR	1665517	Identifier	max		1665145	1					
ANR	1665518	ExpressionStatement	nodes [ i ] . max = tmpL > tmpR ? tmpL : tmpR	96:2:2924:2964	1665145	3	True				
ANR	1665519	AssignmentExpression	nodes [ i ] . max = tmpL > tmpR ? tmpL : tmpR		1665145	0		=			
ANR	1665520	MemberAccess	nodes [ i ] . max		1665145	0					
ANR	1665521	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665522	Identifier	nodes		1665145	0					
ANR	1665523	Identifier	i		1665145	1					
ANR	1665524	Identifier	max		1665145	1					
ANR	1665525	ConditionalExpression	tmpL > tmpR ? tmpL : tmpR		1665145	1					
ANR	1665526	Condition	tmpL > tmpR		1665145	0					
ANR	1665527	RelationalExpression	tmpL > tmpR		1665145	0		>			
ANR	1665528	Identifier	tmpL		1665145	0					
ANR	1665529	Identifier	tmpR		1665145	1					
ANR	1665530	Identifier	tmpL		1665145	1					
ANR	1665531	Identifier	tmpR		1665145	2					
ANR	1665532	ExpressionStatement	tmpL = nodes [ 2 * i + 1 ] . min	97:2:2968:2991	1665145	4	True				
ANR	1665533	AssignmentExpression	tmpL = nodes [ 2 * i + 1 ] . min		1665145	0		=			
ANR	1665534	Identifier	tmpL		1665145	0					
ANR	1665535	MemberAccess	nodes [ 2 * i + 1 ] . min		1665145	1					
ANR	1665536	ArrayIndexing	nodes [ 2 * i + 1 ]		1665145	0					
ANR	1665537	Identifier	nodes		1665145	0					
ANR	1665538	AdditiveExpression	2 * i + 1		1665145	1		+			
ANR	1665539	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665540	PrimaryExpression	2		1665145	0					
ANR	1665541	Identifier	i		1665145	1					
ANR	1665542	PrimaryExpression	1		1665145	1					
ANR	1665543	Identifier	min		1665145	1					
ANR	1665544	ExpressionStatement	tmpR = nodes [ 2 * i + 2 ] . min	97:27:2993:3016	1665145	5	True				
ANR	1665545	AssignmentExpression	tmpR = nodes [ 2 * i + 2 ] . min		1665145	0		=			
ANR	1665546	Identifier	tmpR		1665145	0					
ANR	1665547	MemberAccess	nodes [ 2 * i + 2 ] . min		1665145	1					
ANR	1665548	ArrayIndexing	nodes [ 2 * i + 2 ]		1665145	0					
ANR	1665549	Identifier	nodes		1665145	0					
ANR	1665550	AdditiveExpression	2 * i + 2		1665145	1		+			
ANR	1665551	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665552	PrimaryExpression	2		1665145	0					
ANR	1665553	Identifier	i		1665145	1					
ANR	1665554	PrimaryExpression	2		1665145	1					
ANR	1665555	Identifier	min		1665145	1					
ANR	1665556	ExpressionStatement	nodes [ i ] . min = tmpL < tmpR ? tmpL : tmpR	98:2:3020:3060	1665145	6	True				
ANR	1665557	AssignmentExpression	nodes [ i ] . min = tmpL < tmpR ? tmpL : tmpR		1665145	0		=			
ANR	1665558	MemberAccess	nodes [ i ] . min		1665145	0					
ANR	1665559	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665560	Identifier	nodes		1665145	0					
ANR	1665561	Identifier	i		1665145	1					
ANR	1665562	Identifier	min		1665145	1					
ANR	1665563	ConditionalExpression	tmpL < tmpR ? tmpL : tmpR		1665145	1					
ANR	1665564	Condition	tmpL < tmpR		1665145	0					
ANR	1665565	RelationalExpression	tmpL < tmpR		1665145	0		<			
ANR	1665566	Identifier	tmpL		1665145	0					
ANR	1665567	Identifier	tmpR		1665145	1					
ANR	1665568	Identifier	tmpL		1665145	1					
ANR	1665569	Identifier	tmpR		1665145	2					
ANR	1665570	ForStatement	for ( itr = intervals . begin ( ) ; itr != intervals . end ( ) ; itr ++ )		1665145	44					
ANR	1665571	ForInit	itr = intervals . begin ( ) ;	103:6:3122:3146	1665145	0	True				
ANR	1665572	AssignmentExpression	itr = intervals . begin ( )		1665145	0		=			
ANR	1665573	Identifier	itr		1665145	0					
ANR	1665574	CallExpression	intervals . begin ( )		1665145	1					
ANR	1665575	Callee	intervals . begin		1665145	0					
ANR	1665576	MemberAccess	intervals . begin		1665145	0					
ANR	1665577	Identifier	intervals		1665145	0					
ANR	1665578	Identifier	begin		1665145	1					
ANR	1665579	ArgumentList			1665145	1					
ANR	1665580	Condition	itr != intervals . end ( )	103:32:3148:3170	1665145	1	True				
ANR	1665581	EqualityExpression	itr != intervals . end ( )		1665145	0		!=			
ANR	1665582	Identifier	itr		1665145	0					
ANR	1665583	CallExpression	intervals . end ( )		1665145	1					
ANR	1665584	Callee	intervals . end		1665145	0					
ANR	1665585	MemberAccess	intervals . end		1665145	0					
ANR	1665586	Identifier	intervals		1665145	0					
ANR	1665587	Identifier	end		1665145	1					
ANR	1665588	ArgumentList			1665145	1					
ANR	1665589	PostIncDecOperationExpression	itr ++	103:57:3173:3177	1665145	2	True				
ANR	1665590	Identifier	itr		1665145	0					
ANR	1665591	IncDec	++		1665145	1					
ANR	1665592	CompoundStatement		60:2:2031:2044	1665145	3					
ANR	1665593	IdentifierDeclStatement	int index = 0 ;	104:2:3185:3198	1665145	0	True				
ANR	1665594	IdentifierDecl	index = 0		1665145	0					
ANR	1665595	IdentifierDeclType	int		1665145	0					
ANR	1665596	Identifier	index		1665145	1					
ANR	1665597	AssignmentExpression	index = 0		1665145	2		=			
ANR	1665598	Identifier	index		1665145	0					
ANR	1665599	PrimaryExpression	0		1665145	1					
ANR	1665600	ExpressionStatement	itr -> second . lower . IsNumber ( tmpL )	105:2:3219:3253	1665145	1	True				
ANR	1665601	CallExpression	itr -> second . lower . IsNumber ( tmpL )		1665145	0					
ANR	1665602	Callee	itr -> second . lower . IsNumber		1665145	0					
ANR	1665603	MemberAccess	itr -> second . lower . IsNumber		1665145	0					
ANR	1665604	MemberAccess	itr -> second . lower		1665145	0					
ANR	1665605	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665606	Identifier	itr		1665145	0					
ANR	1665607	Identifier	second		1665145	1					
ANR	1665608	Identifier	lower		1665145	1					
ANR	1665609	Identifier	IsNumber		1665145	1					
ANR	1665610	ArgumentList	tmpL		1665145	1					
ANR	1665611	Argument	tmpL		1665145	0					
ANR	1665612	Identifier	tmpL		1665145	0					
ANR	1665613	ExpressionStatement	itr -> second . upper . IsNumber ( tmpR )	106:2:3257:3291	1665145	2	True				
ANR	1665614	CallExpression	itr -> second . upper . IsNumber ( tmpR )		1665145	0					
ANR	1665615	Callee	itr -> second . upper . IsNumber		1665145	0					
ANR	1665616	MemberAccess	itr -> second . upper . IsNumber		1665145	0					
ANR	1665617	MemberAccess	itr -> second . upper		1665145	0					
ANR	1665618	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665619	Identifier	itr		1665145	0					
ANR	1665620	Identifier	second		1665145	1					
ANR	1665621	Identifier	upper		1665145	1					
ANR	1665622	Identifier	IsNumber		1665145	1					
ANR	1665623	ArgumentList	tmpR		1665145	1					
ANR	1665624	Argument	tmpR		1665145	0					
ANR	1665625	Identifier	tmpR		1665145	0					
ANR	1665626	WhileStatement	while ( 1 )		1665145	3					
ANR	1665627	Condition	1	107:9:3302:3302	1665145	0	True				
ANR	1665628	PrimaryExpression	1		1665145	0					
ANR	1665629	CompoundStatement		63:13:2152:2152	1665145	1					
ANR	1665630	IfStatement	if ( index > size )		1665145	0					
ANR	1665631	Condition	index > size	108:7:3315:3326	1665145	0	True				
ANR	1665632	RelationalExpression	index > size		1665145	0		>			
ANR	1665633	Identifier	index		1665145	0					
ANR	1665634	Identifier	size		1665145	1					
ANR	1665635	CompoundStatement		64:22:2176:2176	1665145	1					
ANR	1665636	ExpressionStatement	"printf ( ""Fell out of the primary structure"" )"	109:4:3336:3381	1665145	0	True				
ANR	1665637	CallExpression	"printf ( ""Fell out of the primary structure"" )"		1665145	0					
ANR	1665638	Callee	printf		1665145	0					
ANR	1665639	Identifier	printf		1665145	0					
ANR	1665640	ArgumentList	"""Fell out of the primary structure"""		1665145	1					
ANR	1665641	Argument	"""Fell out of the primary structure"""		1665145	0					
ANR	1665642	PrimaryExpression	"""Fell out of the primary structure"""		1665145	0					
ANR	1665643	ExpressionStatement	exit ( 1 )	110:4:3387:3396	1665145	1	True				
ANR	1665644	CallExpression	exit ( 1 )		1665145	0					
ANR	1665645	Callee	exit		1665145	0					
ANR	1665646	Identifier	exit		1665145	0					
ANR	1665647	ArgumentList	1		1665145	1					
ANR	1665648	Argument	1		1665145	0					
ANR	1665649	PrimaryExpression	1		1665145	0					
ANR	1665650	IfStatement	if ( tmpR < nodes [ index ] . nodeValue )		1665145	1					
ANR	1665651	Condition	tmpR < nodes [ index ] . nodeValue	112:7:3410:3438	1665145	0	True				
ANR	1665652	RelationalExpression	tmpR < nodes [ index ] . nodeValue		1665145	0		<			
ANR	1665653	Identifier	tmpR		1665145	0					
ANR	1665654	MemberAccess	nodes [ index ] . nodeValue		1665145	1					
ANR	1665655	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665656	Identifier	nodes		1665145	0					
ANR	1665657	Identifier	index		1665145	1					
ANR	1665658	Identifier	nodeValue		1665145	1					
ANR	1665659	CompoundStatement		68:39:2288:2288	1665145	1					
ANR	1665660	ExpressionStatement	index = index * 2 + 1	113:4:3448:3467	1665145	0	True				
ANR	1665661	AssignmentExpression	index = index * 2 + 1		1665145	0		=			
ANR	1665662	Identifier	index		1665145	0					
ANR	1665663	AdditiveExpression	index * 2 + 1		1665145	1		+			
ANR	1665664	MultiplicativeExpression	index * 2		1665145	0		*			
ANR	1665665	Identifier	index		1665145	0					
ANR	1665666	PrimaryExpression	2		1665145	1					
ANR	1665667	PrimaryExpression	1		1665145	1					
ANR	1665668	ContinueStatement	continue ;	114:4:3473:3481	1665145	1	True				
ANR	1665669	IfStatement	if ( tmpL > nodes [ index ] . nodeValue )		1665145	2					
ANR	1665670	Condition	tmpL > nodes [ index ] . nodeValue	116:7:3496:3524	1665145	0	True				
ANR	1665671	RelationalExpression	tmpL > nodes [ index ] . nodeValue		1665145	0		>			
ANR	1665672	Identifier	tmpL		1665145	0					
ANR	1665673	MemberAccess	nodes [ index ] . nodeValue		1665145	1					
ANR	1665674	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665675	Identifier	nodes		1665145	0					
ANR	1665676	Identifier	index		1665145	1					
ANR	1665677	Identifier	nodeValue		1665145	1					
ANR	1665678	CompoundStatement		72:39:2374:2374	1665145	1					
ANR	1665679	ExpressionStatement	index = index * 2 + 2	117:4:3534:3553	1665145	0	True				
ANR	1665680	AssignmentExpression	index = index * 2 + 2		1665145	0		=			
ANR	1665681	Identifier	index		1665145	0					
ANR	1665682	AdditiveExpression	index * 2 + 2		1665145	1		+			
ANR	1665683	MultiplicativeExpression	index * 2		1665145	0		*			
ANR	1665684	Identifier	index		1665145	0					
ANR	1665685	PrimaryExpression	2		1665145	1					
ANR	1665686	PrimaryExpression	2		1665145	1					
ANR	1665687	ContinueStatement	continue ;	118:4:3559:3567	1665145	1	True				
ANR	1665688	IfStatement	if ( tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue )		1665145	3					
ANR	1665689	Condition	tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue	120:7:3582:3641	1665145	0	True				
ANR	1665690	AndExpression	tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue		1665145	0		&&			
ANR	1665691	RelationalExpression	tmpL <= nodes [ index ] . nodeValue		1665145	0		<=			
ANR	1665692	Identifier	tmpL		1665145	0					
ANR	1665693	MemberAccess	nodes [ index ] . nodeValue		1665145	1					
ANR	1665694	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665695	Identifier	nodes		1665145	0					
ANR	1665696	Identifier	index		1665145	1					
ANR	1665697	Identifier	nodeValue		1665145	1					
ANR	1665698	RelationalExpression	tmpR >= nodes [ index ] . nodeValue		1665145	1		>=			
ANR	1665699	Identifier	tmpR		1665145	0					
ANR	1665700	MemberAccess	nodes [ index ] . nodeValue		1665145	1					
ANR	1665701	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665702	Identifier	nodes		1665145	0					
ANR	1665703	Identifier	index		1665145	1					
ANR	1665704	Identifier	nodeValue		1665145	1					
ANR	1665705	CompoundStatement		76:70:2491:2491	1665145	1					
ANR	1665706	IfStatement	"if ( ! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper ) )"		1665145	0					
ANR	1665707	Condition	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"	121:8:3655:3832	1665145	0	True				
ANR	1665708	OrExpression	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		1665145	0		||			
ANR	1665709	UnaryOperationExpression	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower )"		1665145	0					
ANR	1665710	UnaryOperator	!		1665145	0					
ANR	1665711	CallExpression	"InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower )"		1665145	1					
ANR	1665712	Callee	InsertInLeftSecondary		1665145	0					
ANR	1665713	Identifier	InsertInLeftSecondary		1665145	0					
ANR	1665714	ArgumentList	nodes [ index ] . LS		1665145	1					
ANR	1665715	Argument	nodes [ index ] . LS		1665145	0					
ANR	1665716	MemberAccess	nodes [ index ] . LS		1665145	0					
ANR	1665717	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665718	Identifier	nodes		1665145	0					
ANR	1665719	Identifier	index		1665145	1					
ANR	1665720	Identifier	LS		1665145	1					
ANR	1665721	Argument	itr -> first		1665145	1					
ANR	1665722	PtrMemberAccess	itr -> first		1665145	0					
ANR	1665723	Identifier	itr		1665145	0					
ANR	1665724	Identifier	first		1665145	1					
ANR	1665725	Argument	tmpL		1665145	2					
ANR	1665726	Identifier	tmpL		1665145	0					
ANR	1665727	Argument	itr -> second . openLower		1665145	3					
ANR	1665728	MemberAccess	itr -> second . openLower		1665145	0					
ANR	1665729	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665730	Identifier	itr		1665145	0					
ANR	1665731	Identifier	second		1665145	1					
ANR	1665732	Identifier	openLower		1665145	1					
ANR	1665733	UnaryOperationExpression	"! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		1665145	1					
ANR	1665734	UnaryOperator	!		1665145	0					
ANR	1665735	CallExpression	"InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		1665145	1					
ANR	1665736	Callee	InsertInRightSecondary		1665145	0					
ANR	1665737	Identifier	InsertInRightSecondary		1665145	0					
ANR	1665738	ArgumentList	nodes [ index ] . RS		1665145	1					
ANR	1665739	Argument	nodes [ index ] . RS		1665145	0					
ANR	1665740	MemberAccess	nodes [ index ] . RS		1665145	0					
ANR	1665741	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665742	Identifier	nodes		1665145	0					
ANR	1665743	Identifier	index		1665145	1					
ANR	1665744	Identifier	RS		1665145	1					
ANR	1665745	Argument	itr -> first		1665145	1					
ANR	1665746	PtrMemberAccess	itr -> first		1665145	0					
ANR	1665747	Identifier	itr		1665145	0					
ANR	1665748	Identifier	first		1665145	1					
ANR	1665749	Argument	tmpR		1665145	2					
ANR	1665750	Identifier	tmpR		1665145	0					
ANR	1665751	Argument	itr -> second . openUpper		1665145	3					
ANR	1665752	MemberAccess	itr -> second . openUpper		1665145	0					
ANR	1665753	PtrMemberAccess	itr -> second		1665145	0					
ANR	1665754	Identifier	itr		1665145	0					
ANR	1665755	Identifier	second		1665145	1					
ANR	1665756	Identifier	openUpper		1665145	1					
ANR	1665757	CompoundStatement		80:30:2681:2681	1665145	1					
ANR	1665758	ExpressionStatement	"printf ( ""Failed to insert in secondary list"" )"	125:5:3842:3888	1665145	0	True				
ANR	1665759	CallExpression	"printf ( ""Failed to insert in secondary list"" )"		1665145	0					
ANR	1665760	Callee	printf		1665145	0					
ANR	1665761	Identifier	printf		1665145	0					
ANR	1665762	ArgumentList	"""Failed to insert in secondary list"""		1665145	1					
ANR	1665763	Argument	"""Failed to insert in secondary list"""		1665145	0					
ANR	1665764	PrimaryExpression	"""Failed to insert in secondary list"""		1665145	0					
ANR	1665765	ExpressionStatement	exit ( 1 )	126:5:3895:3904	1665145	1	True				
ANR	1665766	CallExpression	exit ( 1 )		1665145	0					
ANR	1665767	Callee	exit		1665145	0					
ANR	1665768	Identifier	exit		1665145	0					
ANR	1665769	ArgumentList	1		1665145	1					
ANR	1665770	Argument	1		1665145	0					
ANR	1665771	PrimaryExpression	1		1665145	0					
ANR	1665772	ExpressionStatement	nodes [ index ] . active = true	132:4:4147:4173	1665145	1	True				
ANR	1665773	AssignmentExpression	nodes [ index ] . active = true		1665145	0		=			
ANR	1665774	MemberAccess	nodes [ index ] . active		1665145	0					
ANR	1665775	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665776	Identifier	nodes		1665145	0					
ANR	1665777	Identifier	index		1665145	1					
ANR	1665778	Identifier	active		1665145	1					
ANR	1665779	Identifier	true		1665145	1					
ANR	1665780	ExpressionStatement	nodes [ index ] . activeDesc = true	133:4:4179:4209	1665145	2	True				
ANR	1665781	AssignmentExpression	nodes [ index ] . activeDesc = true		1665145	0		=			
ANR	1665782	MemberAccess	nodes [ index ] . activeDesc		1665145	0					
ANR	1665783	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665784	Identifier	nodes		1665145	0					
ANR	1665785	Identifier	index		1665145	1					
ANR	1665786	Identifier	activeDesc		1665145	1					
ANR	1665787	Identifier	true		1665145	1					
ANR	1665788	ExpressionStatement	nodes [ index ] . closestActive = index	134:4:4215:4249	1665145	3	True				
ANR	1665789	AssignmentExpression	nodes [ index ] . closestActive = index		1665145	0		=			
ANR	1665790	MemberAccess	nodes [ index ] . closestActive		1665145	0					
ANR	1665791	ArrayIndexing	nodes [ index ]		1665145	0					
ANR	1665792	Identifier	nodes		1665145	0					
ANR	1665793	Identifier	index		1665145	1					
ANR	1665794	Identifier	closestActive		1665145	1					
ANR	1665795	Identifier	index		1665145	1					
ANR	1665796	BreakStatement	break ;	135:4:4255:4260	1665145	4	True				
ANR	1665797	IdentifierDeclStatement	"int indexL , indexR ;"	141:1:4330:4348	1665145	45	True				
ANR	1665798	IdentifierDecl	indexL		1665145	0					
ANR	1665799	IdentifierDeclType	int		1665145	0					
ANR	1665800	Identifier	indexL		1665145	1					
ANR	1665801	IdentifierDecl	indexR		1665145	1					
ANR	1665802	IdentifierDeclType	int		1665145	0					
ANR	1665803	Identifier	indexR		1665145	1					
ANR	1665804	ExpressionStatement	intTree -> rootT = 0	142:1:4351:4369	1665145	46	True				
ANR	1665805	AssignmentExpression	intTree -> rootT = 0		1665145	0		=			
ANR	1665806	PtrMemberAccess	intTree -> rootT		1665145	0					
ANR	1665807	Identifier	intTree		1665145	0					
ANR	1665808	Identifier	rootT		1665145	1					
ANR	1665809	PrimaryExpression	0		1665145	1					
ANR	1665810	ForStatement	for ( int i = backStart - 1 ; i >= 0 ; i -- )		1665145	47					
ANR	1665811	ForInit	int i = backStart - 1 ;	143:6:4377:4398	1665145	0	True				
ANR	1665812	IdentifierDeclStatement	int i = backStart - 1 ;		1665145	0					
ANR	1665813	IdentifierDecl	i = backStart - 1		1665145	0					
ANR	1665814	IdentifierDeclType	int		1665145	0					
ANR	1665815	Identifier	i		1665145	1					
ANR	1665816	AssignmentExpression	i = backStart - 1		1665145	2		=			
ANR	1665817	Identifier	i		1665145	0					
ANR	1665818	AdditiveExpression	backStart - 1		1665145	1		-			
ANR	1665819	Identifier	backStart		1665145	0					
ANR	1665820	PrimaryExpression	1		1665145	1					
ANR	1665821	Condition	i >= 0	143:29:4400:4405	1665145	1	True				
ANR	1665822	RelationalExpression	i >= 0		1665145	0		>=			
ANR	1665823	Identifier	i		1665145	0					
ANR	1665824	PrimaryExpression	0		1665145	1					
ANR	1665825	PostIncDecOperationExpression	i --	143:38:4409:4411	1665145	2	True				
ANR	1665826	Identifier	i		1665145	0					
ANR	1665827	IncDec	--		1665145	1					
ANR	1665828	CompoundStatement		99:44:3261:3261	1665145	3					
ANR	1665829	ExpressionStatement	indexL = 2 * i + 1	144:2:4419:4435	1665145	0	True				
ANR	1665830	AssignmentExpression	indexL = 2 * i + 1		1665145	0		=			
ANR	1665831	Identifier	indexL		1665145	0					
ANR	1665832	AdditiveExpression	2 * i + 1		1665145	1		+			
ANR	1665833	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665834	PrimaryExpression	2		1665145	0					
ANR	1665835	Identifier	i		1665145	1					
ANR	1665836	PrimaryExpression	1		1665145	1					
ANR	1665837	ExpressionStatement	indexR = 2 * i + 2	145:2:4439:4455	1665145	1	True				
ANR	1665838	AssignmentExpression	indexR = 2 * i + 2		1665145	0		=			
ANR	1665839	Identifier	indexR		1665145	0					
ANR	1665840	AdditiveExpression	2 * i + 2		1665145	1		+			
ANR	1665841	MultiplicativeExpression	2 * i		1665145	0		*			
ANR	1665842	PrimaryExpression	2		1665145	0					
ANR	1665843	Identifier	i		1665145	1					
ANR	1665844	PrimaryExpression	2		1665145	1					
ANR	1665845	ExpressionStatement	nodes [ i ] . active = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )	147:2:4511:4634	1665145	2	True				
ANR	1665846	AssignmentExpression	nodes [ i ] . active = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		1665145	0		=			
ANR	1665847	MemberAccess	nodes [ i ] . active		1665145	0					
ANR	1665848	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665849	Identifier	nodes		1665145	0					
ANR	1665850	Identifier	i		1665145	1					
ANR	1665851	Identifier	active		1665145	1					
ANR	1665852	OrExpression	( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		1665145	1		||			
ANR	1665853	OrExpression	nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL		1665145	0		||			
ANR	1665854	EqualityExpression	nodes [ i ] . LS != NULL		1665145	0		!=			
ANR	1665855	MemberAccess	nodes [ i ] . LS		1665145	0					
ANR	1665856	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665857	Identifier	nodes		1665145	0					
ANR	1665858	Identifier	i		1665145	1					
ANR	1665859	Identifier	LS		1665145	1					
ANR	1665860	Identifier	NULL		1665145	1					
ANR	1665861	EqualityExpression	nodes [ i ] . RS != NULL		1665145	1		!=			
ANR	1665862	MemberAccess	nodes [ i ] . RS		1665145	0					
ANR	1665863	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665864	Identifier	nodes		1665145	0					
ANR	1665865	Identifier	i		1665145	1					
ANR	1665866	Identifier	RS		1665145	1					
ANR	1665867	Identifier	NULL		1665145	1					
ANR	1665868	AndExpression	nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1665145	1		&&			
ANR	1665869	MemberAccess	nodes [ indexL ] . activeDesc		1665145	0					
ANR	1665870	ArrayIndexing	nodes [ indexL ]		1665145	0					
ANR	1665871	Identifier	nodes		1665145	0					
ANR	1665872	Identifier	indexL		1665145	1					
ANR	1665873	Identifier	activeDesc		1665145	1					
ANR	1665874	MemberAccess	nodes [ indexR ] . activeDesc		1665145	1					
ANR	1665875	ArrayIndexing	nodes [ indexR ]		1665145	0					
ANR	1665876	Identifier	nodes		1665145	0					
ANR	1665877	Identifier	indexR		1665145	1					
ANR	1665878	Identifier	activeDesc		1665145	1					
ANR	1665879	IfStatement	if ( nodes [ i ] . active )		1665145	3					
ANR	1665880	Condition	nodes [ i ] . active	151:6:4703:4717	1665145	0	True				
ANR	1665881	MemberAccess	nodes [ i ] . active		1665145	0					
ANR	1665882	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665883	Identifier	nodes		1665145	0					
ANR	1665884	Identifier	i		1665145	1					
ANR	1665885	Identifier	active		1665145	1					
ANR	1665886	CompoundStatement		107:24:3567:3567	1665145	1					
ANR	1665887	ExpressionStatement	nodes [ i ] . LT = nodes [ indexL ] . closestActive	152:3:4726:4767	1665145	0	True				
ANR	1665888	AssignmentExpression	nodes [ i ] . LT = nodes [ indexL ] . closestActive		1665145	0		=			
ANR	1665889	MemberAccess	nodes [ i ] . LT		1665145	0					
ANR	1665890	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665891	Identifier	nodes		1665145	0					
ANR	1665892	Identifier	i		1665145	1					
ANR	1665893	Identifier	LT		1665145	1					
ANR	1665894	MemberAccess	nodes [ indexL ] . closestActive		1665145	1					
ANR	1665895	ArrayIndexing	nodes [ indexL ]		1665145	0					
ANR	1665896	Identifier	nodes		1665145	0					
ANR	1665897	Identifier	indexL		1665145	1					
ANR	1665898	Identifier	closestActive		1665145	1					
ANR	1665899	ExpressionStatement	nodes [ i ] . RT = nodes [ indexR ] . closestActive	153:3:4772:4813	1665145	1	True				
ANR	1665900	AssignmentExpression	nodes [ i ] . RT = nodes [ indexR ] . closestActive		1665145	0		=			
ANR	1665901	MemberAccess	nodes [ i ] . RT		1665145	0					
ANR	1665902	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665903	Identifier	nodes		1665145	0					
ANR	1665904	Identifier	i		1665145	1					
ANR	1665905	Identifier	RT		1665145	1					
ANR	1665906	MemberAccess	nodes [ indexR ] . closestActive		1665145	1					
ANR	1665907	ArrayIndexing	nodes [ indexR ]		1665145	0					
ANR	1665908	Identifier	nodes		1665145	0					
ANR	1665909	Identifier	indexR		1665145	1					
ANR	1665910	Identifier	closestActive		1665145	1					
ANR	1665911	ExpressionStatement	nodes [ i ] . activeDesc = true	155:3:4872:4898	1665145	2	True				
ANR	1665912	AssignmentExpression	nodes [ i ] . activeDesc = true		1665145	0		=			
ANR	1665913	MemberAccess	nodes [ i ] . activeDesc		1665145	0					
ANR	1665914	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665915	Identifier	nodes		1665145	0					
ANR	1665916	Identifier	i		1665145	1					
ANR	1665917	Identifier	activeDesc		1665145	1					
ANR	1665918	Identifier	true		1665145	1					
ANR	1665919	ExpressionStatement	nodes [ i ] . closestActive = i	156:3:4903:4929	1665145	3	True				
ANR	1665920	AssignmentExpression	nodes [ i ] . closestActive = i		1665145	0		=			
ANR	1665921	MemberAccess	nodes [ i ] . closestActive		1665145	0					
ANR	1665922	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665923	Identifier	nodes		1665145	0					
ANR	1665924	Identifier	i		1665145	1					
ANR	1665925	Identifier	closestActive		1665145	1					
ANR	1665926	Identifier	i		1665145	1					
ANR	1665927	ExpressionStatement	intTree -> rootT = i	158:3:5001:5019	1665145	4	True				
ANR	1665928	AssignmentExpression	intTree -> rootT = i		1665145	0		=			
ANR	1665929	PtrMemberAccess	intTree -> rootT		1665145	0					
ANR	1665930	Identifier	intTree		1665145	0					
ANR	1665931	Identifier	rootT		1665145	1					
ANR	1665932	Identifier	i		1665145	1					
ANR	1665933	ElseStatement	else		1665145	0					
ANR	1665934	CompoundStatement		115:9:3876:3876	1665145	0					
ANR	1665935	ExpressionStatement	nodes [ i ] . activeDesc = nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc	162:3:5130:5209	1665145	0	True				
ANR	1665936	AssignmentExpression	nodes [ i ] . activeDesc = nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc		1665145	0		=			
ANR	1665937	MemberAccess	nodes [ i ] . activeDesc		1665145	0					
ANR	1665938	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665939	Identifier	nodes		1665145	0					
ANR	1665940	Identifier	i		1665145	1					
ANR	1665941	Identifier	activeDesc		1665145	1					
ANR	1665942	OrExpression	nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc		1665145	1		||			
ANR	1665943	MemberAccess	nodes [ indexL ] . activeDesc		1665145	0					
ANR	1665944	ArrayIndexing	nodes [ indexL ]		1665145	0					
ANR	1665945	Identifier	nodes		1665145	0					
ANR	1665946	Identifier	indexL		1665145	1					
ANR	1665947	Identifier	activeDesc		1665145	1					
ANR	1665948	MemberAccess	nodes [ indexR ] . activeDesc		1665145	1					
ANR	1665949	ArrayIndexing	nodes [ indexR ]		1665145	0					
ANR	1665950	Identifier	nodes		1665145	0					
ANR	1665951	Identifier	indexR		1665145	1					
ANR	1665952	Identifier	activeDesc		1665145	1					
ANR	1665953	ExpressionStatement	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive	164:3:5214:5327	1665145	1	True				
ANR	1665954	AssignmentExpression	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		1665145	0		=			
ANR	1665955	MemberAccess	nodes [ i ] . closestActive		1665145	0					
ANR	1665956	ArrayIndexing	nodes [ i ]		1665145	0					
ANR	1665957	Identifier	nodes		1665145	0					
ANR	1665958	Identifier	i		1665145	1					
ANR	1665959	Identifier	closestActive		1665145	1					
ANR	1665960	ConditionalExpression	nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		1665145	1					
ANR	1665961	Condition	nodes [ indexL ] . activeDesc		1665145	0					
ANR	1665962	MemberAccess	nodes [ indexL ] . activeDesc		1665145	0					
ANR	1665963	ArrayIndexing	nodes [ indexL ]		1665145	0					
ANR	1665964	Identifier	nodes		1665145	0					
ANR	1665965	Identifier	indexL		1665145	1					
ANR	1665966	Identifier	activeDesc		1665145	1					
ANR	1665967	MemberAccess	nodes [ indexL ] . closestActive		1665145	1					
ANR	1665968	ArrayIndexing	nodes [ indexL ]		1665145	0					
ANR	1665969	Identifier	nodes		1665145	0					
ANR	1665970	Identifier	indexL		1665145	1					
ANR	1665971	Identifier	closestActive		1665145	1					
ANR	1665972	MemberAccess	nodes [ indexR ] . closestActive		1665145	2					
ANR	1665973	ArrayIndexing	nodes [ indexR ]		1665145	0					
ANR	1665974	Identifier	nodes		1665145	0					
ANR	1665975	Identifier	indexR		1665145	1					
ANR	1665976	Identifier	closestActive		1665145	1					
ANR	1665977	ReturnStatement	return ( intTree ) ;	171:1:5349:5366	1665145	48	True				
ANR	1665978	Identifier	intTree		1665145	0					
ANR	1665979	ReturnType	IntervalTree *		1665145	1					
ANR	1665980	Identifier	IntervalTree :: MakeIntervalTree		1665145	2					
ANR	1665981	ParameterList	const OneDimension & intervals		1665145	3					
ANR	1665982	Parameter	const OneDimension & intervals	44:18:1121:1149	1665145	0	True				
ANR	1665983	ParameterType	const OneDimension &		1665145	0					
ANR	1665984	Identifier	intervals		1665145	1					
ANR	1665985	CFGEntryNode	ENTRY		1665145		True				
ANR	1665986	CFGExitNode	EXIT		1665145		True				
ANR	1665987	Symbol	intTree		1665145						
ANR	1665988	Symbol	* index		1665145						
ANR	1665989	Symbol	InsertInRightSecondary		1665145						
ANR	1665990	Symbol	nodes [ indexR ] . closestActive		1665145						
ANR	1665991	Symbol	nodes [ i ] . activeDesc		1665145						
ANR	1665992	Symbol	nodes [ indexL ] . closestActive		1665145						
ANR	1665993	Symbol	itr -> second . openLower		1665145						
ANR	1665994	Symbol	itr -> second . upper		1665145						
ANR	1665995	Symbol	overflow		1665145						
ANR	1665996	Symbol	nodes [ i ] . active		1665145						
ANR	1665997	Symbol	* nodes		1665145						
ANR	1665998	Symbol	nodes [ index ] . nodeValue		1665145						
ANR	1665999	Symbol	InsertInLeftSecondary		1665145						
ANR	1666000	Symbol	endPoints		1665145						
ANR	1666001	Symbol	itr -> second		1665145						
ANR	1666002	Symbol	nodes [ index ] . RS		1665145						
ANR	1666003	Symbol	numPoints		1665145						
ANR	1666004	Symbol	tmpL		1665145						
ANR	1666005	Symbol	NULL		1665145						
ANR	1666006	Symbol	itr		1665145						
ANR	1666007	Symbol	nodes [ index ] . closestActive		1665145						
ANR	1666008	Symbol	index		1665145						
ANR	1666009	Symbol	indexR		1665145						
ANR	1666010	Symbol	nodes [ 2 * i + 1 ] . max		1665145						
ANR	1666011	Symbol	tmpR		1665145						
ANR	1666012	Symbol	* sitr		1665145						
ANR	1666013	Symbol	itr -> second . openUpper		1665145						
ANR	1666014	Symbol	intervals		1665145						
ANR	1666015	Symbol	nodes [ i ] . closestActive		1665145						
ANR	1666016	Symbol	size		1665145						
ANR	1666017	Symbol	intTree -> size		1665145						
ANR	1666018	Symbol	true		1665145						
ANR	1666019	Symbol	nodes [ i ] . min		1665145						
ANR	1666020	Symbol	* intTree		1665145						
ANR	1666021	Symbol	nodes [ 2 * i + 1 ] . min		1665145						
ANR	1666022	Symbol	nodes [ i ] . RT		1665145						
ANR	1666023	Symbol	intTree -> nodes		1665145						
ANR	1666024	Symbol	nodes [ i ] . nodeValue		1665145						
ANR	1666025	Symbol	nodes [ i ] . RS		1665145						
ANR	1666026	Symbol	frontStart		1665145						
ANR	1666027	Symbol	nodes [ indexR ] . activeDesc		1665145						
ANR	1666028	Symbol	endPoints . size		1665145						
ANR	1666029	Symbol	retain		1665145						
ANR	1666030	Symbol	nodes [ i ] . max		1665145						
ANR	1666031	Symbol	backStart		1665145						
ANR	1666032	Symbol	nodes [ index ] . activeDesc		1665145						
ANR	1666033	Symbol	* indexL		1665145						
ANR	1666034	Symbol	nodes [ index ] . active		1665145						
ANR	1666035	Symbol	indexL		1665145						
ANR	1666036	Symbol	* indexR		1665145						
ANR	1666037	Symbol	endPoints . begin		1665145						
ANR	1666038	Symbol	nodes [ index ] . LS		1665145						
ANR	1666039	Symbol	itr -> first		1665145						
ANR	1666040	Symbol	sitr		1665145						
ANR	1666041	Symbol	nodes [ indexL ] . activeDesc		1665145						
ANR	1666042	Symbol	intervals . end		1665145						
ANR	1666043	Symbol	nodes [ 2 * i + 2 ] . max		1665145						
ANR	1666044	Symbol	i		1665145						
ANR	1666045	Symbol	* itr		1665145						
ANR	1666046	Symbol	itr -> second . lower		1665145						
ANR	1666047	Symbol	intervals . begin		1665145						
ANR	1666048	Symbol	depth		1665145						
ANR	1666049	Symbol	nodes		1665145						
ANR	1666050	Symbol	* i		1665145						
ANR	1666051	Symbol	intTree -> rootT		1665145						
ANR	1666052	Symbol	nodes [ i ] . LT		1665145						
ANR	1666053	Symbol	nodes [ i ] . LS		1665145						
ANR	1666054	Symbol	nodes [ 2 * i + 2 ] . min		1665145						
ANR	1666055	Function	IntervalTree :: DeleteInterval	175:0:5372:7989							
ANR	1666056	FunctionDef	"IntervalTree :: DeleteInterval (const int & key , const Interval & interval)"		1666055	0					
ANR	1666057	CompoundStatement		177:0:5451:7989	1666055	0					
ANR	1666058	IdentifierDeclStatement	"double l , r ;"	178:1:5454:5465	1666055	0	True				
ANR	1666059	IdentifierDecl	l		1666055	0					
ANR	1666060	IdentifierDeclType	double		1666055	0					
ANR	1666061	Identifier	l		1666055	1					
ANR	1666062	IdentifierDecl	r		1666055	1					
ANR	1666063	IdentifierDeclType	double		1666055	0					
ANR	1666064	Identifier	r		1666055	1					
ANR	1666065	IdentifierDeclStatement	int i ;	179:1:5468:5474	1666055	1	True				
ANR	1666066	IdentifierDecl	i		1666055	0					
ANR	1666067	IdentifierDeclType	int		1666055	0					
ANR	1666068	Identifier	i		1666055	1					
ANR	1666069	IfStatement	if ( ! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r ) )		1666055	2					
ANR	1666070	Condition	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )	181:5:5482:5543	1666055	0	True				
ANR	1666071	OrExpression	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )		1666055	0		||			
ANR	1666072	UnaryOperationExpression	! interval . lower . IsNumber ( l )		1666055	0					
ANR	1666073	UnaryOperator	!		1666055	0					
ANR	1666074	CallExpression	interval . lower . IsNumber ( l )		1666055	1					
ANR	1666075	Callee	interval . lower . IsNumber		1666055	0					
ANR	1666076	MemberAccess	interval . lower . IsNumber		1666055	0					
ANR	1666077	MemberAccess	interval . lower		1666055	0					
ANR	1666078	Identifier	interval		1666055	0					
ANR	1666079	Identifier	lower		1666055	1					
ANR	1666080	Identifier	IsNumber		1666055	1					
ANR	1666081	ArgumentList	l		1666055	1					
ANR	1666082	Argument	l		1666055	0					
ANR	1666083	Identifier	l		1666055	0					
ANR	1666084	UnaryOperationExpression	! interval . upper . IsNumber ( r )		1666055	1					
ANR	1666085	UnaryOperator	!		1666055	0					
ANR	1666086	CallExpression	interval . upper . IsNumber ( r )		1666055	1					
ANR	1666087	Callee	interval . upper . IsNumber		1666055	0					
ANR	1666088	MemberAccess	interval . upper . IsNumber		1666055	0					
ANR	1666089	MemberAccess	interval . upper		1666055	0					
ANR	1666090	Identifier	interval		1666055	0					
ANR	1666091	Identifier	upper		1666055	1					
ANR	1666092	Identifier	IsNumber		1666055	1					
ANR	1666093	ArgumentList	r		1666055	1					
ANR	1666094	Argument	r		1666055	0					
ANR	1666095	Identifier	r		1666055	0					
ANR	1666096	CompoundStatement		5:70:95:95	1666055	1					
ANR	1666097	ReturnStatement	return ( false ) ;	182:2:5551:5566	1666055	0	True				
ANR	1666098	Identifier	false		1666055	0					
ANR	1666099	ExpressionStatement	i = rootT	186:1:5623:5632	1666055	3	True				
ANR	1666100	AssignmentExpression	i = rootT		1666055	0		=			
ANR	1666101	Identifier	i		1666055	0					
ANR	1666102	Identifier	rootT		1666055	1					
ANR	1666103	WhileStatement	while ( i >= 0 && i < size )		1666055	4					
ANR	1666104	Condition	i >= 0 && i < size	187:8:5685:5702	1666055	0	True				
ANR	1666105	AndExpression	i >= 0 && i < size		1666055	0		&&			
ANR	1666106	RelationalExpression	i >= 0		1666055	0		>=			
ANR	1666107	Identifier	i		1666055	0					
ANR	1666108	PrimaryExpression	0		1666055	1					
ANR	1666109	RelationalExpression	i < size		1666055	1		<			
ANR	1666110	Identifier	i		1666055	0					
ANR	1666111	Identifier	size		1666055	1					
ANR	1666112	CompoundStatement		11:29:254:254	1666055	1					
ANR	1666113	IfStatement	if ( nodes [ i ] . nodeValue > r )		1666055	0					
ANR	1666114	Condition	nodes [ i ] . nodeValue > r	188:6:5714:5735	1666055	0	True				
ANR	1666115	RelationalExpression	nodes [ i ] . nodeValue > r		1666055	0		>			
ANR	1666116	MemberAccess	nodes [ i ] . nodeValue		1666055	0					
ANR	1666117	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666118	Identifier	nodes		1666055	0					
ANR	1666119	Identifier	i		1666055	1					
ANR	1666120	Identifier	nodeValue		1666055	1					
ANR	1666121	Identifier	r		1666055	1					
ANR	1666122	CompoundStatement		12:31:287:287	1666055	1					
ANR	1666123	ExpressionStatement	i = nodes [ i ] . LT	189:3:5744:5759	1666055	0	True				
ANR	1666124	AssignmentExpression	i = nodes [ i ] . LT		1666055	0		=			
ANR	1666125	Identifier	i		1666055	0					
ANR	1666126	MemberAccess	nodes [ i ] . LT		1666055	1					
ANR	1666127	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666128	Identifier	nodes		1666055	0					
ANR	1666129	Identifier	i		1666055	1					
ANR	1666130	Identifier	LT		1666055	1					
ANR	1666131	ContinueStatement	continue ;	190:3:5764:5772	1666055	1	True				
ANR	1666132	IfStatement	if ( nodes [ i ] . nodeValue < l )		1666055	1					
ANR	1666133	Condition	nodes [ i ] . nodeValue < l	192:6:5784:5805	1666055	0	True				
ANR	1666134	RelationalExpression	nodes [ i ] . nodeValue < l		1666055	0		<			
ANR	1666135	MemberAccess	nodes [ i ] . nodeValue		1666055	0					
ANR	1666136	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666137	Identifier	nodes		1666055	0					
ANR	1666138	Identifier	i		1666055	1					
ANR	1666139	Identifier	nodeValue		1666055	1					
ANR	1666140	Identifier	l		1666055	1					
ANR	1666141	CompoundStatement		16:31:357:357	1666055	1					
ANR	1666142	ExpressionStatement	i = nodes [ i ] . RT	193:3:5814:5829	1666055	0	True				
ANR	1666143	AssignmentExpression	i = nodes [ i ] . RT		1666055	0		=			
ANR	1666144	Identifier	i		1666055	0					
ANR	1666145	MemberAccess	nodes [ i ] . RT		1666055	1					
ANR	1666146	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666147	Identifier	nodes		1666055	0					
ANR	1666148	Identifier	i		1666055	1					
ANR	1666149	Identifier	RT		1666055	1					
ANR	1666150	ContinueStatement	continue ;	194:3:5834:5842	1666055	1	True				
ANR	1666151	IfStatement	if ( l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue )		1666055	2					
ANR	1666152	Condition	l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue	196:6:5854:5903	1666055	0	True				
ANR	1666153	AndExpression	l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue		1666055	0		&&			
ANR	1666154	RelationalExpression	l <= nodes [ i ] . nodeValue		1666055	0		<=			
ANR	1666155	Identifier	l		1666055	0					
ANR	1666156	MemberAccess	nodes [ i ] . nodeValue		1666055	1					
ANR	1666157	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666158	Identifier	nodes		1666055	0					
ANR	1666159	Identifier	i		1666055	1					
ANR	1666160	Identifier	nodeValue		1666055	1					
ANR	1666161	RelationalExpression	r >= nodes [ i ] . nodeValue		1666055	1		>=			
ANR	1666162	Identifier	r		1666055	0					
ANR	1666163	MemberAccess	nodes [ i ] . nodeValue		1666055	1					
ANR	1666164	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666165	Identifier	nodes		1666055	0					
ANR	1666166	Identifier	i		1666055	1					
ANR	1666167	Identifier	nodeValue		1666055	1					
ANR	1666168	CompoundStatement		20:59:455:455	1666055	1					
ANR	1666169	BreakStatement	break ;	197:3:5912:5917	1666055	0	True				
ANR	1666170	IfStatement	if ( i < 0 || i >= size )		1666055	5					
ANR	1666171	Condition	i < 0 || i >= size	201:5:5961:5978	1666055	0	True				
ANR	1666172	OrExpression	i < 0 || i >= size		1666055	0		||			
ANR	1666173	RelationalExpression	i < 0		1666055	0		<			
ANR	1666174	Identifier	i		1666055	0					
ANR	1666175	PrimaryExpression	0		1666055	1					
ANR	1666176	RelationalExpression	i >= size		1666055	1		>=			
ANR	1666177	Identifier	i		1666055	0					
ANR	1666178	Identifier	size		1666055	1					
ANR	1666179	CompoundStatement		25:26:530:530	1666055	1					
ANR	1666180	ExpressionStatement	"printf ( ""Error:  No such interval [%f, %f] in tree!\\n"" , l , r )"	202:2:5986:6048	1666055	0	True				
ANR	1666181	CallExpression	"printf ( ""Error:  No such interval [%f, %f] in tree!\\n"" , l , r )"		1666055	0					
ANR	1666182	Callee	printf		1666055	0					
ANR	1666183	Identifier	printf		1666055	0					
ANR	1666184	ArgumentList	"""Error:  No such interval [%f, %f] in tree!\\n"""		1666055	1					
ANR	1666185	Argument	"""Error:  No such interval [%f, %f] in tree!\\n"""		1666055	0					
ANR	1666186	PrimaryExpression	"""Error:  No such interval [%f, %f] in tree!\\n"""		1666055	0					
ANR	1666187	Argument	l		1666055	1					
ANR	1666188	Identifier	l		1666055	0					
ANR	1666189	Argument	r		1666055	2					
ANR	1666190	Identifier	r		1666055	0					
ANR	1666191	ReturnStatement	return ( false ) ;	203:2:6052:6067	1666055	1	True				
ANR	1666192	Identifier	false		1666055	0					
ANR	1666193	IfStatement	"if ( ! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false ) )"		1666055	6					
ANR	1666194	Condition	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"	207:5:6115:6220	1666055	0	True				
ANR	1666195	OrExpression	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		1666055	0		||			
ANR	1666196	UnaryOperationExpression	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true )"		1666055	0					
ANR	1666197	UnaryOperator	!		1666055	0					
ANR	1666198	CallExpression	"DeleteFromSecondary ( nodes [ i ] . LS , key , l , true )"		1666055	1					
ANR	1666199	Callee	DeleteFromSecondary		1666055	0					
ANR	1666200	Identifier	DeleteFromSecondary		1666055	0					
ANR	1666201	ArgumentList	nodes [ i ] . LS		1666055	1					
ANR	1666202	Argument	nodes [ i ] . LS		1666055	0					
ANR	1666203	MemberAccess	nodes [ i ] . LS		1666055	0					
ANR	1666204	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666205	Identifier	nodes		1666055	0					
ANR	1666206	Identifier	i		1666055	1					
ANR	1666207	Identifier	LS		1666055	1					
ANR	1666208	Argument	key		1666055	1					
ANR	1666209	Identifier	key		1666055	0					
ANR	1666210	Argument	l		1666055	2					
ANR	1666211	Identifier	l		1666055	0					
ANR	1666212	Argument	true		1666055	3					
ANR	1666213	Identifier	true		1666055	0					
ANR	1666214	UnaryOperationExpression	"! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		1666055	1					
ANR	1666215	UnaryOperator	!		1666055	0					
ANR	1666216	CallExpression	"DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		1666055	1					
ANR	1666217	Callee	DeleteFromSecondary		1666055	0					
ANR	1666218	Identifier	DeleteFromSecondary		1666055	0					
ANR	1666219	ArgumentList	nodes [ i ] . RS		1666055	1					
ANR	1666220	Argument	nodes [ i ] . RS		1666055	0					
ANR	1666221	MemberAccess	nodes [ i ] . RS		1666055	0					
ANR	1666222	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666223	Identifier	nodes		1666055	0					
ANR	1666224	Identifier	i		1666055	1					
ANR	1666225	Identifier	RS		1666055	1					
ANR	1666226	Argument	key		1666055	1					
ANR	1666227	Identifier	key		1666055	0					
ANR	1666228	Argument	r		1666055	2					
ANR	1666229	Identifier	r		1666055	0					
ANR	1666230	Argument	false		1666055	3					
ANR	1666231	Identifier	false		1666055	0					
ANR	1666232	CompoundStatement		32:56:772:772	1666055	1					
ANR	1666233	ExpressionStatement	"printf ( ""Failed to delete from secondary\\n"" )"	209:2:6228:6273	1666055	0	True				
ANR	1666234	CallExpression	"printf ( ""Failed to delete from secondary\\n"" )"		1666055	0					
ANR	1666235	Callee	printf		1666055	0					
ANR	1666236	Identifier	printf		1666055	0					
ANR	1666237	ArgumentList	"""Failed to delete from secondary\\n"""		1666055	1					
ANR	1666238	Argument	"""Failed to delete from secondary\\n"""		1666055	0					
ANR	1666239	PrimaryExpression	"""Failed to delete from secondary\\n"""		1666055	0					
ANR	1666240	ReturnStatement	return ( false ) ;	210:2:6277:6292	1666055	1	True				
ANR	1666241	Identifier	false		1666055	0					
ANR	1666242	IdentifierDeclStatement	"int indexL , indexR ;"	214:1:6374:6393	1666055	7	True				
ANR	1666243	IdentifierDecl	indexL		1666055	0					
ANR	1666244	IdentifierDeclType	int		1666055	0					
ANR	1666245	Identifier	indexL		1666055	1					
ANR	1666246	IdentifierDecl	indexR		1666055	1					
ANR	1666247	IdentifierDeclType	int		1666055	0					
ANR	1666248	Identifier	indexR		1666055	1					
ANR	1666249	IdentifierDeclStatement	bool nowActive ;	215:1:6396:6411	1666055	8	True				
ANR	1666250	IdentifierDecl	nowActive		1666055	0					
ANR	1666251	IdentifierDeclType	bool		1666055	0					
ANR	1666252	Identifier	nowActive		1666055	1					
ANR	1666253	WhileStatement	while ( 1 )		1666055	9					
ANR	1666254	Condition	1	216:8:6421:6421	1666055	0	True				
ANR	1666255	PrimaryExpression	1		1666055	0					
ANR	1666256	CompoundStatement		40:12:973:973	1666055	1					
ANR	1666257	ExpressionStatement	indexL = 2 * i + 1	217:2:6429:6443	1666055	0	True				
ANR	1666258	AssignmentExpression	indexL = 2 * i + 1		1666055	0		=			
ANR	1666259	Identifier	indexL		1666055	0					
ANR	1666260	AdditiveExpression	2 * i + 1		1666055	1		+			
ANR	1666261	MultiplicativeExpression	2 * i		1666055	0		*			
ANR	1666262	PrimaryExpression	2		1666055	0					
ANR	1666263	Identifier	i		1666055	1					
ANR	1666264	PrimaryExpression	1		1666055	1					
ANR	1666265	ExpressionStatement	indexR = 2 * i + 2	218:2:6448:6462	1666055	1	True				
ANR	1666266	AssignmentExpression	indexR = 2 * i + 2		1666055	0		=			
ANR	1666267	Identifier	indexR		1666055	0					
ANR	1666268	AdditiveExpression	2 * i + 2		1666055	1		+			
ANR	1666269	MultiplicativeExpression	2 * i		1666055	0		*			
ANR	1666270	PrimaryExpression	2		1666055	0					
ANR	1666271	Identifier	i		1666055	1					
ANR	1666272	PrimaryExpression	2		1666055	1					
ANR	1666273	ExpressionStatement	nowActive = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )	219:2:6466:6654	1666055	2	True				
ANR	1666274	AssignmentExpression	nowActive = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		1666055	0		=			
ANR	1666275	Identifier	nowActive		1666055	0					
ANR	1666276	OrExpression	( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		1666055	1		||			
ANR	1666277	OrExpression	nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL		1666055	0		||			
ANR	1666278	EqualityExpression	nodes [ i ] . LS != NULL		1666055	0		!=			
ANR	1666279	MemberAccess	nodes [ i ] . LS		1666055	0					
ANR	1666280	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666281	Identifier	nodes		1666055	0					
ANR	1666282	Identifier	i		1666055	1					
ANR	1666283	Identifier	LS		1666055	1					
ANR	1666284	Identifier	NULL		1666055	1					
ANR	1666285	EqualityExpression	nodes [ i ] . RS != NULL		1666055	1		!=			
ANR	1666286	MemberAccess	nodes [ i ] . RS		1666055	0					
ANR	1666287	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666288	Identifier	nodes		1666055	0					
ANR	1666289	Identifier	i		1666055	1					
ANR	1666290	Identifier	RS		1666055	1					
ANR	1666291	Identifier	NULL		1666055	1					
ANR	1666292	AndExpression	indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666293	RelationalExpression	indexL >= 0		1666055	0		>=			
ANR	1666294	Identifier	indexL		1666055	0					
ANR	1666295	PrimaryExpression	0		1666055	1					
ANR	1666296	AndExpression	indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666297	RelationalExpression	indexL < size		1666055	0		<			
ANR	1666298	Identifier	indexL		1666055	0					
ANR	1666299	Identifier	size		1666055	1					
ANR	1666300	AndExpression	indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666301	RelationalExpression	indexR >= 0		1666055	0		>=			
ANR	1666302	Identifier	indexR		1666055	0					
ANR	1666303	PrimaryExpression	0		1666055	1					
ANR	1666304	AndExpression	indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666305	RelationalExpression	indexR < size		1666055	0		<			
ANR	1666306	Identifier	indexR		1666055	0					
ANR	1666307	Identifier	size		1666055	1					
ANR	1666308	AndExpression	nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666309	MemberAccess	nodes [ indexL ] . activeDesc		1666055	0					
ANR	1666310	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666311	Identifier	nodes		1666055	0					
ANR	1666312	Identifier	indexL		1666055	1					
ANR	1666313	Identifier	activeDesc		1666055	1					
ANR	1666314	MemberAccess	nodes [ indexR ] . activeDesc		1666055	1					
ANR	1666315	ArrayIndexing	nodes [ indexR ]		1666055	0					
ANR	1666316	Identifier	nodes		1666055	0					
ANR	1666317	Identifier	indexR		1666055	1					
ANR	1666318	Identifier	activeDesc		1666055	1					
ANR	1666319	IfStatement	if ( nowActive && nodes [ i ] . active == nowActive )		1666055	3					
ANR	1666320	Condition	nowActive && nodes [ i ] . active == nowActive	222:6:6662:6702	1666055	0	True				
ANR	1666321	AndExpression	nowActive && nodes [ i ] . active == nowActive		1666055	0		&&			
ANR	1666322	Identifier	nowActive		1666055	0					
ANR	1666323	EqualityExpression	nodes [ i ] . active == nowActive		1666055	1		==			
ANR	1666324	MemberAccess	nodes [ i ] . active		1666055	0					
ANR	1666325	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666326	Identifier	nodes		1666055	0					
ANR	1666327	Identifier	i		1666055	1					
ANR	1666328	Identifier	active		1666055	1					
ANR	1666329	Identifier	nowActive		1666055	1					
ANR	1666330	CompoundStatement		46:50:1254:1254	1666055	1					
ANR	1666331	ExpressionStatement	nodes [ i ] . active = true	225:3:6763:6785	1666055	0	True				
ANR	1666332	AssignmentExpression	nodes [ i ] . active = true		1666055	0		=			
ANR	1666333	MemberAccess	nodes [ i ] . active		1666055	0					
ANR	1666334	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666335	Identifier	nodes		1666055	0					
ANR	1666336	Identifier	i		1666055	1					
ANR	1666337	Identifier	active		1666055	1					
ANR	1666338	Identifier	true		1666055	1					
ANR	1666339	ExpressionStatement	nodes [ i ] . activeDesc = true	226:3:6790:6816	1666055	1	True				
ANR	1666340	AssignmentExpression	nodes [ i ] . activeDesc = true		1666055	0		=			
ANR	1666341	MemberAccess	nodes [ i ] . activeDesc		1666055	0					
ANR	1666342	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666343	Identifier	nodes		1666055	0					
ANR	1666344	Identifier	i		1666055	1					
ANR	1666345	Identifier	activeDesc		1666055	1					
ANR	1666346	Identifier	true		1666055	1					
ANR	1666347	ExpressionStatement	nodes [ i ] . closestActive = i	227:3:6821:6847	1666055	2	True				
ANR	1666348	AssignmentExpression	nodes [ i ] . closestActive = i		1666055	0		=			
ANR	1666349	MemberAccess	nodes [ i ] . closestActive		1666055	0					
ANR	1666350	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666351	Identifier	nodes		1666055	0					
ANR	1666352	Identifier	i		1666055	1					
ANR	1666353	Identifier	closestActive		1666055	1					
ANR	1666354	Identifier	i		1666055	1					
ANR	1666355	ExpressionStatement	nodes [ i ] . LT = nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive	230:3:6920:6987	1666055	3	True				
ANR	1666356	AssignmentExpression	nodes [ i ] . LT = nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive		1666055	0		=			
ANR	1666357	MemberAccess	nodes [ i ] . LT		1666055	0					
ANR	1666358	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666359	Identifier	nodes		1666055	0					
ANR	1666360	Identifier	i		1666055	1					
ANR	1666361	Identifier	LT		1666055	1					
ANR	1666362	ConditionalExpression	nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive		1666055	1					
ANR	1666363	Condition	nodes [ indexL ] . active		1666055	0					
ANR	1666364	MemberAccess	nodes [ indexL ] . active		1666055	0					
ANR	1666365	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666366	Identifier	nodes		1666055	0					
ANR	1666367	Identifier	indexL		1666055	1					
ANR	1666368	Identifier	active		1666055	1					
ANR	1666369	Identifier	indexL		1666055	1					
ANR	1666370	MemberAccess	nodes [ indexL ] . closestActive		1666055	2					
ANR	1666371	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666372	Identifier	nodes		1666055	0					
ANR	1666373	Identifier	indexL		1666055	1					
ANR	1666374	Identifier	closestActive		1666055	1					
ANR	1666375	ExpressionStatement	nodes [ i ] . RT = nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive	231:3:6992:7059	1666055	4	True				
ANR	1666376	AssignmentExpression	nodes [ i ] . RT = nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive		1666055	0		=			
ANR	1666377	MemberAccess	nodes [ i ] . RT		1666055	0					
ANR	1666378	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666379	Identifier	nodes		1666055	0					
ANR	1666380	Identifier	i		1666055	1					
ANR	1666381	Identifier	RT		1666055	1					
ANR	1666382	ConditionalExpression	nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive		1666055	1					
ANR	1666383	Condition	nodes [ indexR ] . active		1666055	0					
ANR	1666384	MemberAccess	nodes [ indexR ] . active		1666055	0					
ANR	1666385	ArrayIndexing	nodes [ indexR ]		1666055	0					
ANR	1666386	Identifier	nodes		1666055	0					
ANR	1666387	Identifier	indexR		1666055	1					
ANR	1666388	Identifier	active		1666055	1					
ANR	1666389	Identifier	indexR		1666055	1					
ANR	1666390	MemberAccess	nodes [ indexR ] . closestActive		1666055	2					
ANR	1666391	ArrayIndexing	nodes [ indexR ]		1666055	0					
ANR	1666392	Identifier	nodes		1666055	0					
ANR	1666393	Identifier	indexR		1666055	1					
ANR	1666394	Identifier	closestActive		1666055	1					
ANR	1666395	ReturnStatement	return ( true ) ;	234:3:7077:7091	1666055	5	True				
ANR	1666396	Identifier	true		1666055	0					
ANR	1666397	IfStatement	if ( ! nodes [ i ] . active && nowActive )		1666055	4					
ANR	1666398	Condition	! nodes [ i ] . active && nowActive	238:6:7150:7178	1666055	0	True				
ANR	1666399	AndExpression	! nodes [ i ] . active && nowActive		1666055	0		&&			
ANR	1666400	UnaryOperationExpression	! nodes [ i ] . active		1666055	0					
ANR	1666401	UnaryOperator	!		1666055	0					
ANR	1666402	MemberAccess	nodes [ i ] . active		1666055	1					
ANR	1666403	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666404	Identifier	nodes		1666055	0					
ANR	1666405	Identifier	i		1666055	1					
ANR	1666406	Identifier	active		1666055	1					
ANR	1666407	Identifier	nowActive		1666055	1					
ANR	1666408	CompoundStatement		62:38:1730:1730	1666055	1					
ANR	1666409	ExpressionStatement	"printf ( ""Error:  Gone from inactive to active when deleting\\n"" )"	239:3:7187:7250	1666055	0	True				
ANR	1666410	CallExpression	"printf ( ""Error:  Gone from inactive to active when deleting\\n"" )"		1666055	0					
ANR	1666411	Callee	printf		1666055	0					
ANR	1666412	Identifier	printf		1666055	0					
ANR	1666413	ArgumentList	"""Error:  Gone from inactive to active when deleting\\n"""		1666055	1					
ANR	1666414	Argument	"""Error:  Gone from inactive to active when deleting\\n"""		1666055	0					
ANR	1666415	PrimaryExpression	"""Error:  Gone from inactive to active when deleting\\n"""		1666055	0					
ANR	1666416	ReturnStatement	return ( false ) ;	240:3:7255:7270	1666055	1	True				
ANR	1666417	Identifier	false		1666055	0					
ANR	1666418	ExpressionStatement	nodes [ i ] . active = false	242:2:7278:7301	1666055	5	True				
ANR	1666419	AssignmentExpression	nodes [ i ] . active = false		1666055	0		=			
ANR	1666420	MemberAccess	nodes [ i ] . active		1666055	0					
ANR	1666421	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666422	Identifier	nodes		1666055	0					
ANR	1666423	Identifier	i		1666055	1					
ANR	1666424	Identifier	active		1666055	1					
ANR	1666425	Identifier	false		1666055	1					
ANR	1666426	ExpressionStatement	nodes [ i ] . LT = nodes [ i ] . RT = - 1	243:2:7305:7335	1666055	6	True				
ANR	1666427	AssignmentExpression	nodes [ i ] . LT = nodes [ i ] . RT = - 1		1666055	0		=			
ANR	1666428	MemberAccess	nodes [ i ] . LT		1666055	0					
ANR	1666429	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666430	Identifier	nodes		1666055	0					
ANR	1666431	Identifier	i		1666055	1					
ANR	1666432	Identifier	LT		1666055	1					
ANR	1666433	AssignmentExpression	nodes [ i ] . RT = - 1		1666055	1		=			
ANR	1666434	MemberAccess	nodes [ i ] . RT		1666055	0					
ANR	1666435	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666436	Identifier	nodes		1666055	0					
ANR	1666437	Identifier	i		1666055	1					
ANR	1666438	Identifier	RT		1666055	1					
ANR	1666439	UnaryOperationExpression	- 1		1666055	1					
ANR	1666440	UnaryOperator	-		1666055	0					
ANR	1666441	PrimaryExpression	1		1666055	1					
ANR	1666442	IfStatement	if ( ( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc ) )		1666055	7					
ANR	1666443	Condition	( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc )	246:6:7411:7539	1666055	0	True				
ANR	1666444	OrExpression	( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc )		1666055	0		||			
ANR	1666445	AndExpression	indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc		1666055	0		&&			
ANR	1666446	RelationalExpression	indexL >= 0		1666055	0		>=			
ANR	1666447	Identifier	indexL		1666055	0					
ANR	1666448	PrimaryExpression	0		1666055	1					
ANR	1666449	AndExpression	indexL < size && nodes [ indexL ] . activeDesc		1666055	1		&&			
ANR	1666450	RelationalExpression	indexL < size		1666055	0		<			
ANR	1666451	Identifier	indexL		1666055	0					
ANR	1666452	Identifier	size		1666055	1					
ANR	1666453	MemberAccess	nodes [ indexL ] . activeDesc		1666055	1					
ANR	1666454	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666455	Identifier	nodes		1666055	0					
ANR	1666456	Identifier	indexL		1666055	1					
ANR	1666457	Identifier	activeDesc		1666055	1					
ANR	1666458	AndExpression	indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666459	RelationalExpression	indexR >= 0		1666055	0		>=			
ANR	1666460	Identifier	indexR		1666055	0					
ANR	1666461	PrimaryExpression	0		1666055	1					
ANR	1666462	AndExpression	indexR < size && nodes [ indexR ] . activeDesc		1666055	1		&&			
ANR	1666463	RelationalExpression	indexR < size		1666055	0		<			
ANR	1666464	Identifier	indexR		1666055	0					
ANR	1666465	Identifier	size		1666055	1					
ANR	1666466	MemberAccess	nodes [ indexR ] . activeDesc		1666055	1					
ANR	1666467	ArrayIndexing	nodes [ indexR ]		1666055	0					
ANR	1666468	Identifier	nodes		1666055	0					
ANR	1666469	Identifier	indexR		1666055	1					
ANR	1666470	Identifier	activeDesc		1666055	1					
ANR	1666471	CompoundStatement		71:67:2091:2091	1666055	1					
ANR	1666472	ExpressionStatement	nodes [ i ] . activeDesc = true	248:3:7548:7574	1666055	0	True				
ANR	1666473	AssignmentExpression	nodes [ i ] . activeDesc = true		1666055	0		=			
ANR	1666474	MemberAccess	nodes [ i ] . activeDesc		1666055	0					
ANR	1666475	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666476	Identifier	nodes		1666055	0					
ANR	1666477	Identifier	i		1666055	1					
ANR	1666478	Identifier	activeDesc		1666055	1					
ANR	1666479	Identifier	true		1666055	1					
ANR	1666480	ExpressionStatement	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive	249:3:7579:7692	1666055	1	True				
ANR	1666481	AssignmentExpression	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		1666055	0		=			
ANR	1666482	MemberAccess	nodes [ i ] . closestActive		1666055	0					
ANR	1666483	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666484	Identifier	nodes		1666055	0					
ANR	1666485	Identifier	i		1666055	1					
ANR	1666486	Identifier	closestActive		1666055	1					
ANR	1666487	ConditionalExpression	nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		1666055	1					
ANR	1666488	Condition	nodes [ indexL ] . activeDesc		1666055	0					
ANR	1666489	MemberAccess	nodes [ indexL ] . activeDesc		1666055	0					
ANR	1666490	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666491	Identifier	nodes		1666055	0					
ANR	1666492	Identifier	indexL		1666055	1					
ANR	1666493	Identifier	activeDesc		1666055	1					
ANR	1666494	MemberAccess	nodes [ indexL ] . closestActive		1666055	1					
ANR	1666495	ArrayIndexing	nodes [ indexL ]		1666055	0					
ANR	1666496	Identifier	nodes		1666055	0					
ANR	1666497	Identifier	indexL		1666055	1					
ANR	1666498	Identifier	closestActive		1666055	1					
ANR	1666499	MemberAccess	nodes [ indexR ] . closestActive		1666055	2					
ANR	1666500	ArrayIndexing	nodes [ indexR ]		1666055	0					
ANR	1666501	Identifier	nodes		1666055	0					
ANR	1666502	Identifier	indexR		1666055	1					
ANR	1666503	Identifier	closestActive		1666055	1					
ANR	1666504	ElseStatement	else		1666055	0					
ANR	1666505	CompoundStatement		75:9:2251:2251	1666055	0					
ANR	1666506	ExpressionStatement	nodes [ i ] . activeDesc = false	252:3:7708:7735	1666055	0	True				
ANR	1666507	AssignmentExpression	nodes [ i ] . activeDesc = false		1666055	0		=			
ANR	1666508	MemberAccess	nodes [ i ] . activeDesc		1666055	0					
ANR	1666509	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666510	Identifier	nodes		1666055	0					
ANR	1666511	Identifier	i		1666055	1					
ANR	1666512	Identifier	activeDesc		1666055	1					
ANR	1666513	Identifier	false		1666055	1					
ANR	1666514	ExpressionStatement	nodes [ i ] . closestActive = - 1	253:3:7740:7767	1666055	1	True				
ANR	1666515	AssignmentExpression	nodes [ i ] . closestActive = - 1		1666055	0		=			
ANR	1666516	MemberAccess	nodes [ i ] . closestActive		1666055	0					
ANR	1666517	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666518	Identifier	nodes		1666055	0					
ANR	1666519	Identifier	i		1666055	1					
ANR	1666520	Identifier	closestActive		1666055	1					
ANR	1666521	UnaryOperationExpression	- 1		1666055	1					
ANR	1666522	UnaryOperator	-		1666055	0					
ANR	1666523	PrimaryExpression	1		1666055	1					
ANR	1666524	IfStatement	if ( i == rootT )		1666055	8					
ANR	1666525	Condition	i == rootT	257:6:7847:7856	1666055	0	True				
ANR	1666526	EqualityExpression	i == rootT		1666055	0		==			
ANR	1666527	Identifier	i		1666055	0					
ANR	1666528	Identifier	rootT		1666055	1					
ANR	1666529	CompoundStatement		81:19:2408:2408	1666055	1					
ANR	1666530	ExpressionStatement	rootT = nodes [ i ] . closestActive	258:3:7865:7895	1666055	0	True				
ANR	1666531	AssignmentExpression	rootT = nodes [ i ] . closestActive		1666055	0		=			
ANR	1666532	Identifier	rootT		1666055	0					
ANR	1666533	MemberAccess	nodes [ i ] . closestActive		1666055	1					
ANR	1666534	ArrayIndexing	nodes [ i ]		1666055	0					
ANR	1666535	Identifier	nodes		1666055	0					
ANR	1666536	Identifier	i		1666055	1					
ANR	1666537	Identifier	closestActive		1666055	1					
ANR	1666538	IfStatement	if ( rootT < 0 )		1666055	1					
ANR	1666539	Condition	rootT < 0	259:7:7904:7912	1666055	0	True				
ANR	1666540	RelationalExpression	rootT < 0		1666055	0		<			
ANR	1666541	Identifier	rootT		1666055	0					
ANR	1666542	PrimaryExpression	0		1666055	1					
ANR	1666543	ExpressionStatement	rootT = 0	259:19:7916:7925	1666055	1	True				
ANR	1666544	AssignmentExpression	rootT = 0		1666055	0		=			
ANR	1666545	Identifier	rootT		1666055	0					
ANR	1666546	PrimaryExpression	0		1666055	1					
ANR	1666547	ReturnStatement	return ( true ) ;	260:3:7930:7944	1666055	2	True				
ANR	1666548	Identifier	true		1666055	0					
ANR	1666549	ExpressionStatement	i = ( i - 1 ) / 2	263:2:7953:7966	1666055	9	True				
ANR	1666550	AssignmentExpression	i = ( i - 1 ) / 2		1666055	0		=			
ANR	1666551	Identifier	i		1666055	0					
ANR	1666552	MultiplicativeExpression	( i - 1 ) / 2		1666055	1		/			
ANR	1666553	AdditiveExpression	i - 1		1666055	0		-			
ANR	1666554	Identifier	i		1666055	0					
ANR	1666555	PrimaryExpression	1		1666055	1					
ANR	1666556	PrimaryExpression	2		1666055	1					
ANR	1666557	ReturnStatement	return ( true ) ;	266:1:7973:7987	1666055	10	True				
ANR	1666558	Identifier	true		1666055	0					
ANR	1666559	ReturnType	bool		1666055	1					
ANR	1666560	Identifier	IntervalTree :: DeleteInterval		1666055	2					
ANR	1666561	ParameterList	"const int & key , const Interval & interval"		1666055	3					
ANR	1666562	Parameter	const int & key	176:16:5408:5421	1666055	0	True				
ANR	1666563	ParameterType	const int &		1666055	0					
ANR	1666564	Identifier	key		1666055	1					
ANR	1666565	Parameter	const Interval & interval	176:32:5424:5447	1666055	1	True				
ANR	1666566	ParameterType	const Interval &		1666055	0					
ANR	1666567	Identifier	interval		1666055	1					
ANR	1666568	CFGEntryNode	ENTRY		1666055		True				
ANR	1666569	CFGExitNode	EXIT		1666055		True				
ANR	1666570	Symbol	rootT		1666055						
ANR	1666571	Symbol	nodes [ indexL ] . active		1666055						
ANR	1666572	Symbol	nodes [ indexR ] . closestActive		1666055						
ANR	1666573	Symbol	nodes [ i ] . activeDesc		1666055						
ANR	1666574	Symbol	interval . lower . IsNumber		1666055						
ANR	1666575	Symbol	nodes [ indexL ] . closestActive		1666055						
ANR	1666576	Symbol	* indexL		1666055						
ANR	1666577	Symbol	indexL		1666055						
ANR	1666578	Symbol	* indexR		1666055						
ANR	1666579	Symbol	nodes [ i ] . active		1666055						
ANR	1666580	Symbol	DeleteFromSecondary		1666055						
ANR	1666581	Symbol	nowActive		1666055						
ANR	1666582	Symbol	* nodes		1666055						
ANR	1666583	Symbol	interval . upper . IsNumber		1666055						
ANR	1666584	Symbol	interval . upper		1666055						
ANR	1666585	Symbol	key		1666055						
ANR	1666586	Symbol	nodes [ indexL ] . activeDesc		1666055						
ANR	1666587	Symbol	NULL		1666055						
ANR	1666588	Symbol	false		1666055						
ANR	1666589	Symbol	nodes [ indexR ] . active		1666055						
ANR	1666590	Symbol	i		1666055						
ANR	1666591	Symbol	indexR		1666055						
ANR	1666592	Symbol	l		1666055						
ANR	1666593	Symbol	r		1666055						
ANR	1666594	Symbol	nodes [ i ] . closestActive		1666055						
ANR	1666595	Symbol	* i		1666055						
ANR	1666596	Symbol	nodes		1666055						
ANR	1666597	Symbol	size		1666055						
ANR	1666598	Symbol	nodes [ i ] . LT		1666055						
ANR	1666599	Symbol	true		1666055						
ANR	1666600	Symbol	nodes [ i ] . LS		1666055						
ANR	1666601	Symbol	interval		1666055						
ANR	1666602	Symbol	nodes [ i ] . RT		1666055						
ANR	1666603	Symbol	interval . lower		1666055						
ANR	1666604	Symbol	nodes [ i ] . nodeValue		1666055						
ANR	1666605	Symbol	nodes [ i ] . RS		1666055						
ANR	1666606	Symbol	nodes [ indexR ] . activeDesc		1666055						
ANR	1666607	Function	IntervalTree :: InsertInLeftSecondary	270:0:7993:8540							
ANR	1666608	FunctionDef	"IntervalTree :: InsertInLeftSecondary (Secondary * & list , const int & key , double val , bool open)"		1666607	0					
ANR	1666609	CompoundStatement		272:0:8094:8540	1666607	0					
ANR	1666610	Statement	Secondary	273:1:8097:8105	1666607	0	True				
ANR	1666611	Statement	*	273:11:8107:8107	1666607	1	True				
ANR	1666612	Statement	tmp	273:12:8108:8110	1666607	2	True				
ANR	1666613	Statement	","	273:15:8111:8111	1666607	3	True				
ANR	1666614	Statement	*	273:17:8113:8113	1666607	4	True				
ANR	1666615	Statement	sec	273:18:8114:8116	1666607	5	True				
ANR	1666616	Statement	=	273:22:8118:8118	1666607	6	True				
ANR	1666617	Statement	new	273:24:8120:8122	1666607	7	True				
ANR	1666618	ExpressionStatement	Secondary	273:28:8124:8133	1666607	8	True				
ANR	1666619	Identifier	Secondary		1666607	0					
ANR	1666620	IfStatement	if ( ! sec )		1666607	9					
ANR	1666621	Condition	! sec	274:5:8140:8143	1666607	0	True				
ANR	1666622	UnaryOperationExpression	! sec		1666607	0					
ANR	1666623	UnaryOperator	!		1666607	0					
ANR	1666624	Identifier	sec		1666607	1					
ANR	1666625	ReturnStatement	return ( false ) ;	274:12:8147:8162	1666607	1	True				
ANR	1666626	Identifier	false		1666607	0					
ANR	1666627	ExpressionStatement	sec -> value = val	275:1:8165:8182	1666607	10	True				
ANR	1666628	AssignmentExpression	sec -> value = val		1666607	0		=			
ANR	1666629	PtrMemberAccess	sec -> value		1666607	0					
ANR	1666630	Identifier	sec		1666607	0					
ANR	1666631	Identifier	value		1666607	1					
ANR	1666632	Identifier	val		1666607	1					
ANR	1666633	ExpressionStatement	sec -> key = key	276:1:8185:8199	1666607	11	True				
ANR	1666634	AssignmentExpression	sec -> key = key		1666607	0		=			
ANR	1666635	PtrMemberAccess	sec -> key		1666607	0					
ANR	1666636	Identifier	sec		1666607	0					
ANR	1666637	Identifier	key		1666607	1					
ANR	1666638	Identifier	key		1666607	1					
ANR	1666639	ExpressionStatement	sec -> open = open	277:1:8202:8219	1666607	12	True				
ANR	1666640	AssignmentExpression	sec -> open = open		1666607	0		=			
ANR	1666641	PtrMemberAccess	sec -> open		1666607	0					
ANR	1666642	Identifier	sec		1666607	0					
ANR	1666643	Identifier	open		1666607	1					
ANR	1666644	Identifier	open		1666607	1					
ANR	1666645	IfStatement	if ( list == NULL || list -> value > val || ( list -> value == val && open ) )		1666607	13					
ANR	1666646	Condition	list == NULL || list -> value > val || ( list -> value == val && open )	279:5:8228:8286	1666607	0	True				
ANR	1666647	OrExpression	list == NULL || list -> value > val || ( list -> value == val && open )		1666607	0		||			
ANR	1666648	EqualityExpression	list == NULL		1666607	0		==			
ANR	1666649	Identifier	list		1666607	0					
ANR	1666650	Identifier	NULL		1666607	1					
ANR	1666651	OrExpression	list -> value > val || ( list -> value == val && open )		1666607	1		||			
ANR	1666652	RelationalExpression	list -> value > val		1666607	0		>			
ANR	1666653	PtrMemberAccess	list -> value		1666607	0					
ANR	1666654	Identifier	list		1666607	0					
ANR	1666655	Identifier	value		1666607	1					
ANR	1666656	Identifier	val		1666607	1					
ANR	1666657	AndExpression	list -> value == val && open		1666607	1		&&			
ANR	1666658	EqualityExpression	list -> value == val		1666607	0		==			
ANR	1666659	PtrMemberAccess	list -> value		1666607	0					
ANR	1666660	Identifier	list		1666607	0					
ANR	1666661	Identifier	value		1666607	1					
ANR	1666662	Identifier	val		1666607	1					
ANR	1666663	Identifier	open		1666607	1					
ANR	1666664	CompoundStatement		8:67:195:195	1666607	1					
ANR	1666665	ExpressionStatement	sec -> next = list	280:2:8294:8310	1666607	0	True				
ANR	1666666	AssignmentExpression	sec -> next = list		1666607	0		=			
ANR	1666667	PtrMemberAccess	sec -> next		1666607	0					
ANR	1666668	Identifier	sec		1666607	0					
ANR	1666669	Identifier	next		1666607	1					
ANR	1666670	Identifier	list		1666607	1					
ANR	1666671	ExpressionStatement	list = sec	281:2:8314:8324	1666607	1	True				
ANR	1666672	AssignmentExpression	list = sec		1666607	0		=			
ANR	1666673	Identifier	list		1666607	0					
ANR	1666674	Identifier	sec		1666607	1					
ANR	1666675	ReturnStatement	return ( true ) ;	282:2:8328:8342	1666607	2	True				
ANR	1666676	Identifier	true		1666607	0					
ANR	1666677	ExpressionStatement	tmp = list	285:1:8349:8359	1666607	14	True				
ANR	1666678	AssignmentExpression	tmp = list		1666607	0		=			
ANR	1666679	Identifier	tmp		1666607	0					
ANR	1666680	Identifier	list		1666607	1					
ANR	1666681	WhileStatement	while ( tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open ) )		1666607	15					
ANR	1666682	Condition	tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open )	286:8:8369:8453	1666607	0	True				
ANR	1666683	AndExpression	tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open )		1666607	0		&&			
ANR	1666684	PtrMemberAccess	tmp -> next		1666607	0					
ANR	1666685	Identifier	tmp		1666607	0					
ANR	1666686	Identifier	next		1666607	1					
ANR	1666687	OrExpression	tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open		1666607	1		||			
ANR	1666688	RelationalExpression	tmp -> next -> value < val		1666607	0		<			
ANR	1666689	PtrMemberAccess	tmp -> next -> value		1666607	0					
ANR	1666690	PtrMemberAccess	tmp -> next		1666607	0					
ANR	1666691	Identifier	tmp		1666607	0					
ANR	1666692	Identifier	next		1666607	1					
ANR	1666693	Identifier	value		1666607	1					
ANR	1666694	Identifier	val		1666607	1					
ANR	1666695	AndExpression	tmp -> next -> value == val && tmp -> next -> open		1666607	1		&&			
ANR	1666696	EqualityExpression	tmp -> next -> value == val		1666607	0		==			
ANR	1666697	PtrMemberAccess	tmp -> next -> value		1666607	0					
ANR	1666698	PtrMemberAccess	tmp -> next		1666607	0					
ANR	1666699	Identifier	tmp		1666607	0					
ANR	1666700	Identifier	next		1666607	1					
ANR	1666701	Identifier	value		1666607	1					
ANR	1666702	Identifier	val		1666607	1					
ANR	1666703	PtrMemberAccess	tmp -> next -> open		1666607	1					
ANR	1666704	PtrMemberAccess	tmp -> next		1666607	0					
ANR	1666705	Identifier	tmp		1666607	0					
ANR	1666706	Identifier	next		1666607	1					
ANR	1666707	Identifier	open		1666607	1					
ANR	1666708	CompoundStatement		16:23:362:362	1666607	1					
ANR	1666709	ExpressionStatement	tmp = tmp -> next	288:2:8461:8476	1666607	0	True				
ANR	1666710	AssignmentExpression	tmp = tmp -> next		1666607	0		=			
ANR	1666711	Identifier	tmp		1666607	0					
ANR	1666712	PtrMemberAccess	tmp -> next		1666607	1					
ANR	1666713	Identifier	tmp		1666607	0					
ANR	1666714	Identifier	next		1666607	1					
ANR	1666715	ExpressionStatement	sec -> next = tmp -> next	290:1:8482:8503	1666607	16	True				
ANR	1666716	AssignmentExpression	sec -> next = tmp -> next		1666607	0		=			
ANR	1666717	PtrMemberAccess	sec -> next		1666607	0					
ANR	1666718	Identifier	sec		1666607	0					
ANR	1666719	Identifier	next		1666607	1					
ANR	1666720	PtrMemberAccess	tmp -> next		1666607	1					
ANR	1666721	Identifier	tmp		1666607	0					
ANR	1666722	Identifier	next		1666607	1					
ANR	1666723	ExpressionStatement	tmp -> next = sec	291:1:8506:8521	1666607	17	True				
ANR	1666724	AssignmentExpression	tmp -> next = sec		1666607	0		=			
ANR	1666725	PtrMemberAccess	tmp -> next		1666607	0					
ANR	1666726	Identifier	tmp		1666607	0					
ANR	1666727	Identifier	next		1666607	1					
ANR	1666728	Identifier	sec		1666607	1					
ANR	1666729	ReturnStatement	return ( true ) ;	292:1:8524:8538	1666607	18	True				
ANR	1666730	Identifier	true		1666607	0					
ANR	1666731	ReturnType	bool		1666607	1					
ANR	1666732	Identifier	IntervalTree :: InsertInLeftSecondary		1666607	2					
ANR	1666733	ParameterList	"Secondary * & list , const int & key , double val , bool open"		1666607	3					
ANR	1666734	Parameter	Secondary * & list	271:23:8036:8051	1666607	0	True				
ANR	1666735	ParameterType	Secondary * &		1666607	0					
ANR	1666736	Identifier	list		1666607	1					
ANR	1666737	Parameter	const int & key	271:41:8054:8067	1666607	1	True				
ANR	1666738	ParameterType	const int &		1666607	0					
ANR	1666739	Identifier	key		1666607	1					
ANR	1666740	Parameter	double val	271:57:8070:8079	1666607	2	True				
ANR	1666741	ParameterType	double		1666607	0					
ANR	1666742	Identifier	val		1666607	1					
ANR	1666743	Parameter	bool open	271:69:8082:8090	1666607	3	True				
ANR	1666744	ParameterType	bool		1666607	0					
ANR	1666745	Identifier	open		1666607	1					
ANR	1666746	CFGEntryNode	ENTRY		1666607		True				
ANR	1666747	CFGExitNode	EXIT		1666607		True				
ANR	1666748	Symbol	val		1666607						
ANR	1666749	Symbol	* tmp		1666607						
ANR	1666750	Symbol	sec -> key		1666607						
ANR	1666751	Symbol	NULL		1666607						
ANR	1666752	Symbol	sec -> open		1666607						
ANR	1666753	Symbol	false		1666607						
ANR	1666754	Symbol	* tmp -> next		1666607						
ANR	1666755	Symbol	sec -> value		1666607						
ANR	1666756	Symbol	* * tmp		1666607						
ANR	1666757	Symbol	list		1666607						
ANR	1666758	Symbol	tmp -> next		1666607						
ANR	1666759	Symbol	sec		1666607						
ANR	1666760	Symbol	tmp -> next -> value		1666607						
ANR	1666761	Symbol	* list		1666607						
ANR	1666762	Symbol	tmp		1666607						
ANR	1666763	Symbol	list -> value		1666607						
ANR	1666764	Symbol	true		1666607						
ANR	1666765	Symbol	tmp -> next -> open		1666607						
ANR	1666766	Symbol	* sec		1666607						
ANR	1666767	Symbol	key		1666607						
ANR	1666768	Symbol	open		1666607						
ANR	1666769	Symbol	sec -> next		1666607						
ANR	1666770	Function	IntervalTree :: InsertInRightSecondary	296:0:8544:9092							
ANR	1666771	FunctionDef	"IntervalTree :: InsertInRightSecondary (Secondary * & list , const int & key , double val , bool open)"		1666770	0					
ANR	1666772	CompoundStatement		298:0:8644:9092	1666770	0					
ANR	1666773	Statement	Secondary	299:1:8647:8655	1666770	0	True				
ANR	1666774	Statement	*	299:11:8657:8657	1666770	1	True				
ANR	1666775	Statement	tmp	299:12:8658:8660	1666770	2	True				
ANR	1666776	Statement	","	299:15:8661:8661	1666770	3	True				
ANR	1666777	Statement	*	299:17:8663:8663	1666770	4	True				
ANR	1666778	Statement	sec	299:18:8664:8666	1666770	5	True				
ANR	1666779	Statement	=	299:22:8668:8668	1666770	6	True				
ANR	1666780	Statement	new	299:24:8670:8672	1666770	7	True				
ANR	1666781	ExpressionStatement	Secondary	299:28:8674:8683	1666770	8	True				
ANR	1666782	Identifier	Secondary		1666770	0					
ANR	1666783	IfStatement	if ( ! sec )		1666770	9					
ANR	1666784	Condition	! sec	300:5:8690:8693	1666770	0	True				
ANR	1666785	UnaryOperationExpression	! sec		1666770	0					
ANR	1666786	UnaryOperator	!		1666770	0					
ANR	1666787	Identifier	sec		1666770	1					
ANR	1666788	ReturnStatement	return ( false ) ;	300:12:8697:8712	1666770	1	True				
ANR	1666789	Identifier	false		1666770	0					
ANR	1666790	ExpressionStatement	sec -> value = val	301:1:8715:8732	1666770	10	True				
ANR	1666791	AssignmentExpression	sec -> value = val		1666770	0		=			
ANR	1666792	PtrMemberAccess	sec -> value		1666770	0					
ANR	1666793	Identifier	sec		1666770	0					
ANR	1666794	Identifier	value		1666770	1					
ANR	1666795	Identifier	val		1666770	1					
ANR	1666796	ExpressionStatement	sec -> key = key	302:1:8735:8749	1666770	11	True				
ANR	1666797	AssignmentExpression	sec -> key = key		1666770	0		=			
ANR	1666798	PtrMemberAccess	sec -> key		1666770	0					
ANR	1666799	Identifier	sec		1666770	0					
ANR	1666800	Identifier	key		1666770	1					
ANR	1666801	Identifier	key		1666770	1					
ANR	1666802	ExpressionStatement	sec -> open = open	303:1:8752:8769	1666770	12	True				
ANR	1666803	AssignmentExpression	sec -> open = open		1666770	0		=			
ANR	1666804	PtrMemberAccess	sec -> open		1666770	0					
ANR	1666805	Identifier	sec		1666770	0					
ANR	1666806	Identifier	open		1666770	1					
ANR	1666807	Identifier	open		1666770	1					
ANR	1666808	IfStatement	if ( list == NULL || list -> value < val || ( list -> value == val && ! open ) )		1666770	13					
ANR	1666809	Condition	list == NULL || list -> value < val || ( list -> value == val && ! open )	305:5:8778:8837	1666770	0	True				
ANR	1666810	OrExpression	list == NULL || list -> value < val || ( list -> value == val && ! open )		1666770	0		||			
ANR	1666811	EqualityExpression	list == NULL		1666770	0		==			
ANR	1666812	Identifier	list		1666770	0					
ANR	1666813	Identifier	NULL		1666770	1					
ANR	1666814	OrExpression	list -> value < val || ( list -> value == val && ! open )		1666770	1		||			
ANR	1666815	RelationalExpression	list -> value < val		1666770	0		<			
ANR	1666816	PtrMemberAccess	list -> value		1666770	0					
ANR	1666817	Identifier	list		1666770	0					
ANR	1666818	Identifier	value		1666770	1					
ANR	1666819	Identifier	val		1666770	1					
ANR	1666820	AndExpression	list -> value == val && ! open		1666770	1		&&			
ANR	1666821	EqualityExpression	list -> value == val		1666770	0		==			
ANR	1666822	PtrMemberAccess	list -> value		1666770	0					
ANR	1666823	Identifier	list		1666770	0					
ANR	1666824	Identifier	value		1666770	1					
ANR	1666825	Identifier	val		1666770	1					
ANR	1666826	UnaryOperationExpression	! open		1666770	1					
ANR	1666827	UnaryOperator	!		1666770	0					
ANR	1666828	Identifier	open		1666770	1					
ANR	1666829	CompoundStatement		8:68:196:196	1666770	1					
ANR	1666830	ExpressionStatement	sec -> next = list	306:2:8845:8861	1666770	0	True				
ANR	1666831	AssignmentExpression	sec -> next = list		1666770	0		=			
ANR	1666832	PtrMemberAccess	sec -> next		1666770	0					
ANR	1666833	Identifier	sec		1666770	0					
ANR	1666834	Identifier	next		1666770	1					
ANR	1666835	Identifier	list		1666770	1					
ANR	1666836	ExpressionStatement	list = sec	307:2:8865:8875	1666770	1	True				
ANR	1666837	AssignmentExpression	list = sec		1666770	0		=			
ANR	1666838	Identifier	list		1666770	0					
ANR	1666839	Identifier	sec		1666770	1					
ANR	1666840	ReturnStatement	return ( true ) ;	308:2:8879:8893	1666770	2	True				
ANR	1666841	Identifier	true		1666770	0					
ANR	1666842	ExpressionStatement	tmp = list	311:1:8900:8910	1666770	14	True				
ANR	1666843	AssignmentExpression	tmp = list		1666770	0		=			
ANR	1666844	Identifier	tmp		1666770	0					
ANR	1666845	Identifier	list		1666770	1					
ANR	1666846	WhileStatement	while ( tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open ) )		1666770	15					
ANR	1666847	Condition	tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open )	312:8:8920:9005	1666770	0	True				
ANR	1666848	AndExpression	tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open )		1666770	0		&&			
ANR	1666849	PtrMemberAccess	tmp -> next		1666770	0					
ANR	1666850	Identifier	tmp		1666770	0					
ANR	1666851	Identifier	next		1666770	1					
ANR	1666852	OrExpression	tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open		1666770	1		||			
ANR	1666853	RelationalExpression	tmp -> next -> value > val		1666770	0		>			
ANR	1666854	PtrMemberAccess	tmp -> next -> value		1666770	0					
ANR	1666855	PtrMemberAccess	tmp -> next		1666770	0					
ANR	1666856	Identifier	tmp		1666770	0					
ANR	1666857	Identifier	next		1666770	1					
ANR	1666858	Identifier	value		1666770	1					
ANR	1666859	Identifier	val		1666770	1					
ANR	1666860	AndExpression	tmp -> next -> value == val && ! tmp -> next -> open		1666770	1		&&			
ANR	1666861	EqualityExpression	tmp -> next -> value == val		1666770	0		==			
ANR	1666862	PtrMemberAccess	tmp -> next -> value		1666770	0					
ANR	1666863	PtrMemberAccess	tmp -> next		1666770	0					
ANR	1666864	Identifier	tmp		1666770	0					
ANR	1666865	Identifier	next		1666770	1					
ANR	1666866	Identifier	value		1666770	1					
ANR	1666867	Identifier	val		1666770	1					
ANR	1666868	UnaryOperationExpression	! tmp -> next -> open		1666770	1					
ANR	1666869	UnaryOperator	!		1666770	0					
ANR	1666870	PtrMemberAccess	tmp -> next -> open		1666770	1					
ANR	1666871	PtrMemberAccess	tmp -> next		1666770	0					
ANR	1666872	Identifier	tmp		1666770	0					
ANR	1666873	Identifier	next		1666770	1					
ANR	1666874	Identifier	open		1666770	1					
ANR	1666875	CompoundStatement		16:24:364:364	1666770	1					
ANR	1666876	ExpressionStatement	tmp = tmp -> next	314:2:9013:9028	1666770	0	True				
ANR	1666877	AssignmentExpression	tmp = tmp -> next		1666770	0		=			
ANR	1666878	Identifier	tmp		1666770	0					
ANR	1666879	PtrMemberAccess	tmp -> next		1666770	1					
ANR	1666880	Identifier	tmp		1666770	0					
ANR	1666881	Identifier	next		1666770	1					
ANR	1666882	ExpressionStatement	sec -> next = tmp -> next	316:1:9034:9055	1666770	16	True				
ANR	1666883	AssignmentExpression	sec -> next = tmp -> next		1666770	0		=			
ANR	1666884	PtrMemberAccess	sec -> next		1666770	0					
ANR	1666885	Identifier	sec		1666770	0					
ANR	1666886	Identifier	next		1666770	1					
ANR	1666887	PtrMemberAccess	tmp -> next		1666770	1					
ANR	1666888	Identifier	tmp		1666770	0					
ANR	1666889	Identifier	next		1666770	1					
ANR	1666890	ExpressionStatement	tmp -> next = sec	317:1:9058:9073	1666770	17	True				
ANR	1666891	AssignmentExpression	tmp -> next = sec		1666770	0		=			
ANR	1666892	PtrMemberAccess	tmp -> next		1666770	0					
ANR	1666893	Identifier	tmp		1666770	0					
ANR	1666894	Identifier	next		1666770	1					
ANR	1666895	Identifier	sec		1666770	1					
ANR	1666896	ReturnStatement	return ( true ) ;	318:1:9076:9090	1666770	18	True				
ANR	1666897	Identifier	true		1666770	0					
ANR	1666898	ReturnType	bool		1666770	1					
ANR	1666899	Identifier	IntervalTree :: InsertInRightSecondary		1666770	2					
ANR	1666900	ParameterList	"Secondary * & list , const int & key , double val , bool open"		1666770	3					
ANR	1666901	Parameter	Secondary * & list	297:23:8587:8602	1666770	0	True				
ANR	1666902	ParameterType	Secondary * &		1666770	0					
ANR	1666903	Identifier	list		1666770	1					
ANR	1666904	Parameter	const int & key	297:41:8605:8618	1666770	1	True				
ANR	1666905	ParameterType	const int &		1666770	0					
ANR	1666906	Identifier	key		1666770	1					
ANR	1666907	Parameter	double val	297:57:8621:8630	1666770	2	True				
ANR	1666908	ParameterType	double		1666770	0					
ANR	1666909	Identifier	val		1666770	1					
ANR	1666910	Parameter	bool open	297:69:8633:8641	1666770	3	True				
ANR	1666911	ParameterType	bool		1666770	0					
ANR	1666912	Identifier	open		1666770	1					
ANR	1666913	CFGEntryNode	ENTRY		1666770		True				
ANR	1666914	CFGExitNode	EXIT		1666770		True				
ANR	1666915	Symbol	val		1666770						
ANR	1666916	Symbol	* tmp		1666770						
ANR	1666917	Symbol	sec -> key		1666770						
ANR	1666918	Symbol	NULL		1666770						
ANR	1666919	Symbol	sec -> open		1666770						
ANR	1666920	Symbol	false		1666770						
ANR	1666921	Symbol	* tmp -> next		1666770						
ANR	1666922	Symbol	sec -> value		1666770						
ANR	1666923	Symbol	* * tmp		1666770						
ANR	1666924	Symbol	list		1666770						
ANR	1666925	Symbol	tmp -> next		1666770						
ANR	1666926	Symbol	sec		1666770						
ANR	1666927	Symbol	tmp -> next -> value		1666770						
ANR	1666928	Symbol	* list		1666770						
ANR	1666929	Symbol	tmp		1666770						
ANR	1666930	Symbol	list -> value		1666770						
ANR	1666931	Symbol	true		1666770						
ANR	1666932	Symbol	tmp -> next -> open		1666770						
ANR	1666933	Symbol	* sec		1666770						
ANR	1666934	Symbol	key		1666770						
ANR	1666935	Symbol	open		1666770						
ANR	1666936	Symbol	sec -> next		1666770						
ANR	1666937	Function	IntervalTree :: DeleteFromSecondary	322:0:9096:9720							
ANR	1666938	FunctionDef	"IntervalTree :: DeleteFromSecondary (Secondary * & list , const int & key , double val , bool less)"		1666937	0					
ANR	1666939	CompoundStatement		324:0:9193:9720	1666937	0					
ANR	1666940	IdentifierDeclStatement	"Secondary * tmp , * sec = list ;"	325:1:9196:9223	1666937	0	True				
ANR	1666941	IdentifierDecl	* tmp		1666937	0					
ANR	1666942	IdentifierDeclType	Secondary *		1666937	0					
ANR	1666943	Identifier	tmp		1666937	1					
ANR	1666944	IdentifierDecl	* sec = list		1666937	1					
ANR	1666945	IdentifierDeclType	Secondary *		1666937	0					
ANR	1666946	Identifier	sec		1666937	1					
ANR	1666947	AssignmentExpression	* sec = list		1666937	2		=			
ANR	1666948	Identifier	list		1666937	0					
ANR	1666949	Identifier	list		1666937	1					
ANR	1666950	IfStatement	if ( sec == NULL )		1666937	1					
ANR	1666951	Condition	sec == NULL	327:5:9231:9241	1666937	0	True				
ANR	1666952	EqualityExpression	sec == NULL		1666937	0		==			
ANR	1666953	Identifier	sec		1666937	0					
ANR	1666954	Identifier	NULL		1666937	1					
ANR	1666955	ReturnStatement	return ( false ) ;	327:19:9245:9260	1666937	1	True				
ANR	1666956	Identifier	false		1666937	0					
ANR	1666957	IfStatement	if ( sec -> value == val && sec -> key == key )		1666937	2					
ANR	1666958	Condition	sec -> value == val && sec -> key == key	328:5:9267:9298	1666937	0	True				
ANR	1666959	AndExpression	sec -> value == val && sec -> key == key		1666937	0		&&			
ANR	1666960	EqualityExpression	sec -> value == val		1666937	0		==			
ANR	1666961	PtrMemberAccess	sec -> value		1666937	0					
ANR	1666962	Identifier	sec		1666937	0					
ANR	1666963	Identifier	value		1666937	1					
ANR	1666964	Identifier	val		1666937	1					
ANR	1666965	EqualityExpression	sec -> key == key		1666937	1		==			
ANR	1666966	PtrMemberAccess	sec -> key		1666937	0					
ANR	1666967	Identifier	sec		1666937	0					
ANR	1666968	Identifier	key		1666937	1					
ANR	1666969	Identifier	key		1666937	1					
ANR	1666970	CompoundStatement		5:40:108:108	1666937	1					
ANR	1666971	ExpressionStatement	list = sec -> next	329:2:9306:9322	1666937	0	True				
ANR	1666972	AssignmentExpression	list = sec -> next		1666937	0		=			
ANR	1666973	Identifier	list		1666937	0					
ANR	1666974	PtrMemberAccess	sec -> next		1666937	1					
ANR	1666975	Identifier	sec		1666937	0					
ANR	1666976	Identifier	next		1666937	1					
ANR	1666977	Statement	delete	330:2:9326:9331	1666937	1	True				
ANR	1666978	ExpressionStatement	sec	330:9:9333:9336	1666937	2	True				
ANR	1666979	Identifier	sec		1666937	0					
ANR	1666980	ReturnStatement	return ( true ) ;	331:2:9340:9354	1666937	3	True				
ANR	1666981	Identifier	true		1666937	0					
ANR	1666982	ExpressionStatement	tmp = list	334:1:9361:9371	1666937	3	True				
ANR	1666983	AssignmentExpression	tmp = list		1666937	0		=			
ANR	1666984	Identifier	tmp		1666937	0					
ANR	1666985	Identifier	list		1666937	1					
ANR	1666986	ExpressionStatement	sec = list -> next	335:1:9374:9390	1666937	4	True				
ANR	1666987	AssignmentExpression	sec = list -> next		1666937	0		=			
ANR	1666988	Identifier	sec		1666937	0					
ANR	1666989	PtrMemberAccess	list -> next		1666937	1					
ANR	1666990	Identifier	list		1666937	0					
ANR	1666991	Identifier	next		1666937	1					
ANR	1666992	WhileStatement	while ( sec && ( less ? sec -> value < val : sec -> value > val ) )		1666937	5					
ANR	1666993	Condition	sec && ( less ? sec -> value < val : sec -> value > val )	336:8:9400:9452	1666937	0	True				
ANR	1666994	AndExpression	sec && ( less ? sec -> value < val : sec -> value > val )		1666937	0		&&			
ANR	1666995	Identifier	sec		1666937	0					
ANR	1666996	ConditionalExpression	less ? sec -> value < val : sec -> value > val		1666937	1					
ANR	1666997	Condition	less		1666937	0					
ANR	1666998	Identifier	less		1666937	0					
ANR	1666999	RelationalExpression	sec -> value < val		1666937	1		<			
ANR	1667000	PtrMemberAccess	sec -> value		1666937	0					
ANR	1667001	Identifier	sec		1666937	0					
ANR	1667002	Identifier	value		1666937	1					
ANR	1667003	Identifier	val		1666937	1					
ANR	1667004	RelationalExpression	sec -> value > val		1666937	2		>			
ANR	1667005	PtrMemberAccess	sec -> value		1666937	0					
ANR	1667006	Identifier	sec		1666937	0					
ANR	1667007	Identifier	value		1666937	1					
ANR	1667008	Identifier	val		1666937	1					
ANR	1667009	CompoundStatement		13:64:262:262	1666937	1					
ANR	1667010	ExpressionStatement	tmp = sec	337:2:9460:9469	1666937	0	True				
ANR	1667011	AssignmentExpression	tmp = sec		1666937	0		=			
ANR	1667012	Identifier	tmp		1666937	0					
ANR	1667013	Identifier	sec		1666937	1					
ANR	1667014	ExpressionStatement	sec = sec -> next	338:2:9473:9488	1666937	1	True				
ANR	1667015	AssignmentExpression	sec = sec -> next		1666937	0		=			
ANR	1667016	Identifier	sec		1666937	0					
ANR	1667017	PtrMemberAccess	sec -> next		1666937	1					
ANR	1667018	Identifier	sec		1666937	0					
ANR	1667019	Identifier	next		1666937	1					
ANR	1667020	IfStatement	if ( ! sec )		1666937	6					
ANR	1667021	Condition	! sec	340:5:9498:9501	1666937	0	True				
ANR	1667022	UnaryOperationExpression	! sec		1666937	0					
ANR	1667023	UnaryOperator	!		1666937	0					
ANR	1667024	Identifier	sec		1666937	1					
ANR	1667025	ReturnStatement	return ( false ) ;	340:12:9505:9520	1666937	1	True				
ANR	1667026	Identifier	false		1666937	0					
ANR	1667027	WhileStatement	while ( sec && sec -> value == val )		1666937	7					
ANR	1667028	Condition	sec && sec -> value == val	342:8:9531:9554	1666937	0	True				
ANR	1667029	AndExpression	sec && sec -> value == val		1666937	0		&&			
ANR	1667030	Identifier	sec		1666937	0					
ANR	1667031	EqualityExpression	sec -> value == val		1666937	1		==			
ANR	1667032	PtrMemberAccess	sec -> value		1666937	0					
ANR	1667033	Identifier	sec		1666937	0					
ANR	1667034	Identifier	value		1666937	1					
ANR	1667035	Identifier	val		1666937	1					
ANR	1667036	CompoundStatement		19:35:364:364	1666937	1					
ANR	1667037	IfStatement	if ( sec -> key == key )		1666937	0					
ANR	1667038	Condition	sec -> key == key	343:6:9566:9580	1666937	0	True				
ANR	1667039	EqualityExpression	sec -> key == key		1666937	0		==			
ANR	1667040	PtrMemberAccess	sec -> key		1666937	0					
ANR	1667041	Identifier	sec		1666937	0					
ANR	1667042	Identifier	key		1666937	1					
ANR	1667043	Identifier	key		1666937	1					
ANR	1667044	CompoundStatement		20:24:390:390	1666937	1					
ANR	1667045	ExpressionStatement	tmp -> next = sec -> next	344:3:9589:9610	1666937	0	True				
ANR	1667046	AssignmentExpression	tmp -> next = sec -> next		1666937	0		=			
ANR	1667047	PtrMemberAccess	tmp -> next		1666937	0					
ANR	1667048	Identifier	tmp		1666937	0					
ANR	1667049	Identifier	next		1666937	1					
ANR	1667050	PtrMemberAccess	sec -> next		1666937	1					
ANR	1667051	Identifier	sec		1666937	0					
ANR	1667052	Identifier	next		1666937	1					
ANR	1667053	Statement	delete	345:3:9615:9620	1666937	1	True				
ANR	1667054	ExpressionStatement	sec	345:10:9622:9625	1666937	2	True				
ANR	1667055	Identifier	sec		1666937	0					
ANR	1667056	ReturnStatement	return ( true ) ;	346:3:9630:9644	1666937	3	True				
ANR	1667057	Identifier	true		1666937	0					
ANR	1667058	ExpressionStatement	tmp = sec	348:2:9652:9661	1666937	1	True				
ANR	1667059	AssignmentExpression	tmp = sec		1666937	0		=			
ANR	1667060	Identifier	tmp		1666937	0					
ANR	1667061	Identifier	sec		1666937	1					
ANR	1667062	ExpressionStatement	sec = sec -> next	349:2:9665:9680	1666937	2	True				
ANR	1667063	AssignmentExpression	sec = sec -> next		1666937	0		=			
ANR	1667064	Identifier	sec		1666937	0					
ANR	1667065	PtrMemberAccess	sec -> next		1666937	1					
ANR	1667066	Identifier	sec		1666937	0					
ANR	1667067	Identifier	next		1666937	1					
ANR	1667068	ReturnStatement	return ( false ) ;	353:1:9703:9718	1666937	8	True				
ANR	1667069	Identifier	false		1666937	0					
ANR	1667070	ReturnType	bool		1666937	1					
ANR	1667071	Identifier	IntervalTree :: DeleteFromSecondary		1666937	2					
ANR	1667072	ParameterList	"Secondary * & list , const int & key , double val , bool less"		1666937	3					
ANR	1667073	Parameter	Secondary * & list	323:21:9137:9152	1666937	0	True				
ANR	1667074	ParameterType	Secondary * &		1666937	0					
ANR	1667075	Identifier	list		1666937	1					
ANR	1667076	Parameter	const int & key	323:38:9154:9167	1666937	1	True				
ANR	1667077	ParameterType	const int &		1666937	0					
ANR	1667078	Identifier	key		1666937	1					
ANR	1667079	Parameter	double val	323:53:9169:9178	1666937	2	True				
ANR	1667080	ParameterType	double		1666937	0					
ANR	1667081	Identifier	val		1666937	1					
ANR	1667082	Parameter	bool less	323:64:9180:9188	1666937	3	True				
ANR	1667083	ParameterType	bool		1666937	0					
ANR	1667084	Identifier	less		1666937	1					
ANR	1667085	CFGEntryNode	ENTRY		1666937		True				
ANR	1667086	CFGExitNode	EXIT		1666937		True				
ANR	1667087	Symbol	val		1666937						
ANR	1667088	Symbol	list -> next		1666937						
ANR	1667089	Symbol	* tmp		1666937						
ANR	1667090	Symbol	sec -> key		1666937						
ANR	1667091	Symbol	NULL		1666937						
ANR	1667092	Symbol	false		1666937						
ANR	1667093	Symbol	sec -> value		1666937						
ANR	1667094	Symbol	less		1666937						
ANR	1667095	Symbol	list		1666937						
ANR	1667096	Symbol	tmp -> next		1666937						
ANR	1667097	Symbol	sec		1666937						
ANR	1667098	Symbol	* list		1666937						
ANR	1667099	Symbol	tmp		1666937						
ANR	1667100	Symbol	true		1666937						
ANR	1667101	Symbol	* sec		1666937						
ANR	1667102	Symbol	key		1666937						
ANR	1667103	Symbol	sec -> next		1666937						
ANR	1667104	Function	IntervalTree :: WindowQuery	357:0:9724:12087							
ANR	1667105	FunctionDef	"IntervalTree :: WindowQuery (const Interval & interval , KeySet & keys)"		1667104	0					
ANR	1667106	CompoundStatement		359:0:9798:12087	1667104	0					
ANR	1667107	IdentifierDeclStatement	"double l , r ;"	360:1:9801:9813	1667104	0	True				
ANR	1667108	IdentifierDecl	l		1667104	0					
ANR	1667109	IdentifierDeclType	double		1667104	0					
ANR	1667110	Identifier	l		1667104	1					
ANR	1667111	IdentifierDecl	r		1667104	1					
ANR	1667112	IdentifierDeclType	double		1667104	0					
ANR	1667113	Identifier	r		1667104	1					
ANR	1667114	IdentifierDeclStatement	"bool o_l , o_r ;"	361:1:9816:9830	1667104	1	True				
ANR	1667115	IdentifierDecl	o_l		1667104	0					
ANR	1667116	IdentifierDeclType	bool		1667104	0					
ANR	1667117	Identifier	o_l		1667104	1					
ANR	1667118	IdentifierDecl	o_r		1667104	1					
ANR	1667119	IdentifierDeclType	bool		1667104	0					
ANR	1667120	Identifier	o_r		1667104	1					
ANR	1667121	IdentifierDeclStatement	"int i , v ;"	362:1:9833:9843	1667104	2	True				
ANR	1667122	IdentifierDecl	i		1667104	0					
ANR	1667123	IdentifierDeclType	int		1667104	0					
ANR	1667124	Identifier	i		1667104	1					
ANR	1667125	IdentifierDecl	v		1667104	1					
ANR	1667126	IdentifierDeclType	int		1667104	0					
ANR	1667127	Identifier	v		1667104	1					
ANR	1667128	IdentifierDeclStatement	Secondary * sec ;	363:1:9846:9860	1667104	3	True				
ANR	1667129	IdentifierDecl	* sec		1667104	0					
ANR	1667130	IdentifierDeclType	Secondary *		1667104	0					
ANR	1667131	Identifier	sec		1667104	1					
ANR	1667132	IfStatement	if ( ! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r ) )		1667104	4					
ANR	1667133	Condition	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )	365:5:9868:9929	1667104	0	True				
ANR	1667134	OrExpression	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )		1667104	0		||			
ANR	1667135	UnaryOperationExpression	! interval . lower . IsNumber ( l )		1667104	0					
ANR	1667136	UnaryOperator	!		1667104	0					
ANR	1667137	CallExpression	interval . lower . IsNumber ( l )		1667104	1					
ANR	1667138	Callee	interval . lower . IsNumber		1667104	0					
ANR	1667139	MemberAccess	interval . lower . IsNumber		1667104	0					
ANR	1667140	MemberAccess	interval . lower		1667104	0					
ANR	1667141	Identifier	interval		1667104	0					
ANR	1667142	Identifier	lower		1667104	1					
ANR	1667143	Identifier	IsNumber		1667104	1					
ANR	1667144	ArgumentList	l		1667104	1					
ANR	1667145	Argument	l		1667104	0					
ANR	1667146	Identifier	l		1667104	0					
ANR	1667147	UnaryOperationExpression	! interval . upper . IsNumber ( r )		1667104	1					
ANR	1667148	UnaryOperator	!		1667104	0					
ANR	1667149	CallExpression	interval . upper . IsNumber ( r )		1667104	1					
ANR	1667150	Callee	interval . upper . IsNumber		1667104	0					
ANR	1667151	MemberAccess	interval . upper . IsNumber		1667104	0					
ANR	1667152	MemberAccess	interval . upper		1667104	0					
ANR	1667153	Identifier	interval		1667104	0					
ANR	1667154	Identifier	upper		1667104	1					
ANR	1667155	Identifier	IsNumber		1667104	1					
ANR	1667156	ArgumentList	r		1667104	1					
ANR	1667157	Argument	r		1667104	0					
ANR	1667158	Identifier	r		1667104	0					
ANR	1667159	CompoundStatement		7:70:134:134	1667104	1					
ANR	1667160	ReturnStatement	return ( false ) ;	366:2:9937:9952	1667104	0	True				
ANR	1667161	Identifier	false		1667104	0					
ANR	1667162	ExpressionStatement	o_l = interval . openLower	368:1:9958:9982	1667104	5	True				
ANR	1667163	AssignmentExpression	o_l = interval . openLower		1667104	0		=			
ANR	1667164	Identifier	o_l		1667104	0					
ANR	1667165	MemberAccess	interval . openLower		1667104	1					
ANR	1667166	Identifier	interval		1667104	0					
ANR	1667167	Identifier	openLower		1667104	1					
ANR	1667168	ExpressionStatement	o_r = interval . openUpper	369:1:9985:10009	1667104	6	True				
ANR	1667169	AssignmentExpression	o_r = interval . openUpper		1667104	0		=			
ANR	1667170	Identifier	o_r		1667104	0					
ANR	1667171	MemberAccess	interval . openUpper		1667104	1					
ANR	1667172	Identifier	interval		1667104	0					
ANR	1667173	Identifier	openUpper		1667104	1					
ANR	1667174	ExpressionStatement	i = rootT	372:1:10060:10069	1667104	7	True				
ANR	1667175	AssignmentExpression	i = rootT		1667104	0		=			
ANR	1667176	Identifier	i		1667104	0					
ANR	1667177	Identifier	rootT		1667104	1					
ANR	1667178	WhileStatement	while ( 1 )		1667104	8					
ANR	1667179	Condition	1	373:8:10079:10079	1667104	0	True				
ANR	1667180	PrimaryExpression	1		1667104	0					
ANR	1667181	CompoundStatement		15:12:284:284	1667104	1					
ANR	1667182	IfStatement	if ( i < 0 || i >= size )		1667104	0					
ANR	1667183	Condition	i < 0 || i >= size	374:6:10091:10108	1667104	0	True				
ANR	1667184	OrExpression	i < 0 || i >= size		1667104	0		||			
ANR	1667185	RelationalExpression	i < 0		1667104	0		<			
ANR	1667186	Identifier	i		1667104	0					
ANR	1667187	PrimaryExpression	0		1667104	1					
ANR	1667188	RelationalExpression	i >= size		1667104	1		>=			
ANR	1667189	Identifier	i		1667104	0					
ANR	1667190	Identifier	size		1667104	1					
ANR	1667191	CompoundStatement		16:27:313:313	1667104	1					
ANR	1667192	ReturnStatement	return ( true ) ;	375:3:10117:10131	1667104	0	True				
ANR	1667193	Identifier	true		1667104	0					
ANR	1667194	ElseStatement	else		1667104	0					
ANR	1667195	IfStatement	if ( nodes [ i ] . nodeValue <= l )		1667104	0					
ANR	1667196	Condition	nodes [ i ] . nodeValue <= l	376:13:10146:10168	1667104	0	True				
ANR	1667197	RelationalExpression	nodes [ i ] . nodeValue <= l		1667104	0		<=			
ANR	1667198	MemberAccess	nodes [ i ] . nodeValue		1667104	0					
ANR	1667199	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667200	Identifier	nodes		1667104	0					
ANR	1667201	Identifier	i		1667104	1					
ANR	1667202	Identifier	nodeValue		1667104	1					
ANR	1667203	Identifier	l		1667104	1					
ANR	1667204	CompoundStatement		18:39:373:373	1667104	1					
ANR	1667205	ExpressionStatement	sec = nodes [ i ] . RS	377:3:10177:10194	1667104	0	True				
ANR	1667206	AssignmentExpression	sec = nodes [ i ] . RS		1667104	0		=			
ANR	1667207	Identifier	sec		1667104	0					
ANR	1667208	MemberAccess	nodes [ i ] . RS		1667104	1					
ANR	1667209	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667210	Identifier	nodes		1667104	0					
ANR	1667211	Identifier	i		1667104	1					
ANR	1667212	Identifier	RS		1667104	1					
ANR	1667213	WhileStatement	while ( sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) ) )		1667104	1					
ANR	1667214	Condition	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )	378:9:10205:10264	1667104	0	True				
ANR	1667215	AndExpression	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )		1667104	0		&&			
ANR	1667216	Identifier	sec		1667104	0					
ANR	1667217	OrExpression	sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l )		1667104	1		||			
ANR	1667218	RelationalExpression	sec -> value > l		1667104	0		>			
ANR	1667219	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667220	Identifier	sec		1667104	0					
ANR	1667221	Identifier	value		1667104	1					
ANR	1667222	Identifier	l		1667104	1					
ANR	1667223	AndExpression	sec -> value == l && ! sec -> open && ! o_l		1667104	1		&&			
ANR	1667224	EqualityExpression	sec -> value == l		1667104	0		==			
ANR	1667225	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667226	Identifier	sec		1667104	0					
ANR	1667227	Identifier	value		1667104	1					
ANR	1667228	Identifier	l		1667104	1					
ANR	1667229	AndExpression	! sec -> open && ! o_l		1667104	1		&&			
ANR	1667230	UnaryOperationExpression	! sec -> open		1667104	0					
ANR	1667231	UnaryOperator	!		1667104	0					
ANR	1667232	PtrMemberAccess	sec -> open		1667104	1					
ANR	1667233	Identifier	sec		1667104	0					
ANR	1667234	Identifier	open		1667104	1					
ANR	1667235	UnaryOperationExpression	! o_l		1667104	1					
ANR	1667236	UnaryOperator	!		1667104	0					
ANR	1667237	Identifier	o_l		1667104	1					
ANR	1667238	CompoundStatement		20:70:467:467	1667104	1					
ANR	1667239	ExpressionStatement	keys . Insert ( sec -> key )	379:4:10272:10295	1667104	0	True				
ANR	1667240	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667241	Callee	keys . Insert		1667104	0					
ANR	1667242	MemberAccess	keys . Insert		1667104	0					
ANR	1667243	Identifier	keys		1667104	0					
ANR	1667244	Identifier	Insert		1667104	1					
ANR	1667245	ArgumentList	sec -> key		1667104	1					
ANR	1667246	Argument	sec -> key		1667104	0					
ANR	1667247	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667248	Identifier	sec		1667104	0					
ANR	1667249	Identifier	key		1667104	1					
ANR	1667250	ExpressionStatement	sec = sec -> next	380:4:10301:10316	1667104	1	True				
ANR	1667251	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667252	Identifier	sec		1667104	0					
ANR	1667253	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667254	Identifier	sec		1667104	0					
ANR	1667255	Identifier	next		1667104	1					
ANR	1667256	ExpressionStatement	i = nodes [ i ] . RT	383:3:10373:10388	1667104	2	True				
ANR	1667257	AssignmentExpression	i = nodes [ i ] . RT		1667104	0		=			
ANR	1667258	Identifier	i		1667104	0					
ANR	1667259	MemberAccess	nodes [ i ] . RT		1667104	1					
ANR	1667260	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667261	Identifier	nodes		1667104	0					
ANR	1667262	Identifier	i		1667104	1					
ANR	1667263	Identifier	RT		1667104	1					
ANR	1667264	ElseStatement	else		1667104	0					
ANR	1667265	IfStatement	if ( r <= nodes [ i ] . nodeValue )		1667104	0					
ANR	1667266	Condition	r <= nodes [ i ] . nodeValue	384:13:10403:10425	1667104	0	True				
ANR	1667267	RelationalExpression	r <= nodes [ i ] . nodeValue		1667104	0		<=			
ANR	1667268	Identifier	r		1667104	0					
ANR	1667269	MemberAccess	nodes [ i ] . nodeValue		1667104	1					
ANR	1667270	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667271	Identifier	nodes		1667104	0					
ANR	1667272	Identifier	i		1667104	1					
ANR	1667273	Identifier	nodeValue		1667104	1					
ANR	1667274	CompoundStatement		26:39:630:630	1667104	1					
ANR	1667275	ExpressionStatement	sec = nodes [ i ] . LS	385:3:10434:10451	1667104	0	True				
ANR	1667276	AssignmentExpression	sec = nodes [ i ] . LS		1667104	0		=			
ANR	1667277	Identifier	sec		1667104	0					
ANR	1667278	MemberAccess	nodes [ i ] . LS		1667104	1					
ANR	1667279	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667280	Identifier	nodes		1667104	0					
ANR	1667281	Identifier	i		1667104	1					
ANR	1667282	Identifier	LS		1667104	1					
ANR	1667283	WhileStatement	while ( sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) ) )		1667104	1					
ANR	1667284	Condition	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )	386:9:10462:10521	1667104	0	True				
ANR	1667285	AndExpression	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )		1667104	0		&&			
ANR	1667286	Identifier	sec		1667104	0					
ANR	1667287	OrExpression	sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r )		1667104	1		||			
ANR	1667288	RelationalExpression	sec -> value < r		1667104	0		<			
ANR	1667289	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667290	Identifier	sec		1667104	0					
ANR	1667291	Identifier	value		1667104	1					
ANR	1667292	Identifier	r		1667104	1					
ANR	1667293	AndExpression	sec -> value == r && ! sec -> open && ! o_r		1667104	1		&&			
ANR	1667294	EqualityExpression	sec -> value == r		1667104	0		==			
ANR	1667295	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667296	Identifier	sec		1667104	0					
ANR	1667297	Identifier	value		1667104	1					
ANR	1667298	Identifier	r		1667104	1					
ANR	1667299	AndExpression	! sec -> open && ! o_r		1667104	1		&&			
ANR	1667300	UnaryOperationExpression	! sec -> open		1667104	0					
ANR	1667301	UnaryOperator	!		1667104	0					
ANR	1667302	PtrMemberAccess	sec -> open		1667104	1					
ANR	1667303	Identifier	sec		1667104	0					
ANR	1667304	Identifier	open		1667104	1					
ANR	1667305	UnaryOperationExpression	! o_r		1667104	1					
ANR	1667306	UnaryOperator	!		1667104	0					
ANR	1667307	Identifier	o_r		1667104	1					
ANR	1667308	CompoundStatement		28:70:724:724	1667104	1					
ANR	1667309	ExpressionStatement	keys . Insert ( sec -> key )	387:4:10529:10552	1667104	0	True				
ANR	1667310	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667311	Callee	keys . Insert		1667104	0					
ANR	1667312	MemberAccess	keys . Insert		1667104	0					
ANR	1667313	Identifier	keys		1667104	0					
ANR	1667314	Identifier	Insert		1667104	1					
ANR	1667315	ArgumentList	sec -> key		1667104	1					
ANR	1667316	Argument	sec -> key		1667104	0					
ANR	1667317	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667318	Identifier	sec		1667104	0					
ANR	1667319	Identifier	key		1667104	1					
ANR	1667320	ExpressionStatement	sec = sec -> next	388:4:10558:10573	1667104	1	True				
ANR	1667321	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667322	Identifier	sec		1667104	0					
ANR	1667323	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667324	Identifier	sec		1667104	0					
ANR	1667325	Identifier	next		1667104	1					
ANR	1667326	ExpressionStatement	i = nodes [ i ] . LT	391:3:10629:10644	1667104	2	True				
ANR	1667327	AssignmentExpression	i = nodes [ i ] . LT		1667104	0		=			
ANR	1667328	Identifier	i		1667104	0					
ANR	1667329	MemberAccess	nodes [ i ] . LT		1667104	1					
ANR	1667330	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667331	Identifier	nodes		1667104	0					
ANR	1667332	Identifier	i		1667104	1					
ANR	1667333	Identifier	LT		1667104	1					
ANR	1667334	ElseStatement	else		1667104	0					
ANR	1667335	IfStatement	if ( l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r )		1667104	0					
ANR	1667336	Condition	l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r	392:13:10659:10706	1667104	0	True				
ANR	1667337	AndExpression	l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r		1667104	0		&&			
ANR	1667338	RelationalExpression	l < nodes [ i ] . nodeValue		1667104	0		<			
ANR	1667339	Identifier	l		1667104	0					
ANR	1667340	MemberAccess	nodes [ i ] . nodeValue		1667104	1					
ANR	1667341	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667342	Identifier	nodes		1667104	0					
ANR	1667343	Identifier	i		1667104	1					
ANR	1667344	Identifier	nodeValue		1667104	1					
ANR	1667345	RelationalExpression	nodes [ i ] . nodeValue < r		1667104	1		<			
ANR	1667346	MemberAccess	nodes [ i ] . nodeValue		1667104	0					
ANR	1667347	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667348	Identifier	nodes		1667104	0					
ANR	1667349	Identifier	i		1667104	1					
ANR	1667350	Identifier	nodeValue		1667104	1					
ANR	1667351	Identifier	r		1667104	1					
ANR	1667352	CompoundStatement		34:64:911:911	1667104	1					
ANR	1667353	BreakStatement	break ;	393:3:10715:10720	1667104	0	True				
ANR	1667354	ElseStatement	else		1667104	0					
ANR	1667355	CompoundStatement		36:9:932:932	1667104	0					
ANR	1667356	ExpressionStatement	"printf ( ""Error:  failed to find split node\\n"" )"	395:3:10736:10783	1667104	0	True				
ANR	1667357	CallExpression	"printf ( ""Error:  failed to find split node\\n"" )"		1667104	0					
ANR	1667358	Callee	printf		1667104	0					
ANR	1667359	Identifier	printf		1667104	0					
ANR	1667360	ArgumentList	"""Error:  failed to find split node\\n"""		1667104	1					
ANR	1667361	Argument	"""Error:  failed to find split node\\n"""		1667104	0					
ANR	1667362	PrimaryExpression	"""Error:  failed to find split node\\n"""		1667104	0					
ANR	1667363	ExpressionStatement	exit ( 1 )	396:3:10788:10797	1667104	1	True				
ANR	1667364	CallExpression	exit ( 1 )		1667104	0					
ANR	1667365	Callee	exit		1667104	0					
ANR	1667366	Identifier	exit		1667104	0					
ANR	1667367	ArgumentList	1		1667104	1					
ANR	1667368	Argument	1		1667104	0					
ANR	1667369	PrimaryExpression	1		1667104	0					
ANR	1667370	ExpressionStatement	v = i	399:1:10807:10812	1667104	9	True				
ANR	1667371	AssignmentExpression	v = i		1667104	0		=			
ANR	1667372	Identifier	v		1667104	0					
ANR	1667373	Identifier	i		1667104	1					
ANR	1667374	ExpressionStatement	sec = nodes [ i ] . LS	400:1:10876:10893	1667104	10	True				
ANR	1667375	AssignmentExpression	sec = nodes [ i ] . LS		1667104	0		=			
ANR	1667376	Identifier	sec		1667104	0					
ANR	1667377	MemberAccess	nodes [ i ] . LS		1667104	1					
ANR	1667378	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667379	Identifier	nodes		1667104	0					
ANR	1667380	Identifier	i		1667104	1					
ANR	1667381	Identifier	LS		1667104	1					
ANR	1667382	WhileStatement	while ( sec )		1667104	11					
ANR	1667383	Condition	sec	401:8:10903:10905	1667104	0	True				
ANR	1667384	Identifier	sec		1667104	0					
ANR	1667385	CompoundStatement		43:14:1110:1110	1667104	1					
ANR	1667386	ExpressionStatement	keys . Insert ( sec -> key )	402:2:10913:10936	1667104	0	True				
ANR	1667387	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667388	Callee	keys . Insert		1667104	0					
ANR	1667389	MemberAccess	keys . Insert		1667104	0					
ANR	1667390	Identifier	keys		1667104	0					
ANR	1667391	Identifier	Insert		1667104	1					
ANR	1667392	ArgumentList	sec -> key		1667104	1					
ANR	1667393	Argument	sec -> key		1667104	0					
ANR	1667394	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667395	Identifier	sec		1667104	0					
ANR	1667396	Identifier	key		1667104	1					
ANR	1667397	ExpressionStatement	sec = sec -> next	403:2:10940:10955	1667104	1	True				
ANR	1667398	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667399	Identifier	sec		1667104	0					
ANR	1667400	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667401	Identifier	sec		1667104	0					
ANR	1667402	Identifier	next		1667104	1					
ANR	1667403	ExpressionStatement	i = nodes [ v ] . LT	408:1:11041:11056	1667104	12	True				
ANR	1667404	AssignmentExpression	i = nodes [ v ] . LT		1667104	0		=			
ANR	1667405	Identifier	i		1667104	0					
ANR	1667406	MemberAccess	nodes [ v ] . LT		1667104	1					
ANR	1667407	ArrayIndexing	nodes [ v ]		1667104	0					
ANR	1667408	Identifier	nodes		1667104	0					
ANR	1667409	Identifier	v		1667104	1					
ANR	1667410	Identifier	LT		1667104	1					
ANR	1667411	WhileStatement	while ( i >= 0 && i < size )		1667104	13					
ANR	1667412	Condition	i >= 0 && i < size	409:8:11066:11083	1667104	0	True				
ANR	1667413	AndExpression	i >= 0 && i < size		1667104	0		&&			
ANR	1667414	RelationalExpression	i >= 0		1667104	0		>=			
ANR	1667415	Identifier	i		1667104	0					
ANR	1667416	PrimaryExpression	0		1667104	1					
ANR	1667417	RelationalExpression	i < size		1667104	1		<			
ANR	1667418	Identifier	i		1667104	0					
ANR	1667419	Identifier	size		1667104	1					
ANR	1667420	CompoundStatement		51:29:1288:1288	1667104	1					
ANR	1667421	IfStatement	if ( l < nodes [ i ] . nodeValue )		1667104	0					
ANR	1667422	Condition	l < nodes [ i ] . nodeValue	410:6:11095:11116	1667104	0	True				
ANR	1667423	RelationalExpression	l < nodes [ i ] . nodeValue		1667104	0		<			
ANR	1667424	Identifier	l		1667104	0					
ANR	1667425	MemberAccess	nodes [ i ] . nodeValue		1667104	1					
ANR	1667426	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667427	Identifier	nodes		1667104	0					
ANR	1667428	Identifier	i		1667104	1					
ANR	1667429	Identifier	nodeValue		1667104	1					
ANR	1667430	CompoundStatement		52:31:1321:1321	1667104	1					
ANR	1667431	ExpressionStatement	sec = nodes [ i ] . RS	412:3:11173:11190	1667104	0	True				
ANR	1667432	AssignmentExpression	sec = nodes [ i ] . RS		1667104	0		=			
ANR	1667433	Identifier	sec		1667104	0					
ANR	1667434	MemberAccess	nodes [ i ] . RS		1667104	1					
ANR	1667435	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667436	Identifier	nodes		1667104	0					
ANR	1667437	Identifier	i		1667104	1					
ANR	1667438	Identifier	RS		1667104	1					
ANR	1667439	WhileStatement	while ( sec )		1667104	1					
ANR	1667440	Condition	sec	413:10:11202:11204	1667104	0	True				
ANR	1667441	Identifier	sec		1667104	0					
ANR	1667442	CompoundStatement		55:16:1409:1409	1667104	1					
ANR	1667443	ExpressionStatement	keys . Insert ( sec -> key )	414:4:11214:11237	1667104	0	True				
ANR	1667444	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667445	Callee	keys . Insert		1667104	0					
ANR	1667446	MemberAccess	keys . Insert		1667104	0					
ANR	1667447	Identifier	keys		1667104	0					
ANR	1667448	Identifier	Insert		1667104	1					
ANR	1667449	ArgumentList	sec -> key		1667104	1					
ANR	1667450	Argument	sec -> key		1667104	0					
ANR	1667451	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667452	Identifier	sec		1667104	0					
ANR	1667453	Identifier	key		1667104	1					
ANR	1667454	ExpressionStatement	sec = sec -> next	415:4:11243:11258	1667104	1	True				
ANR	1667455	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667456	Identifier	sec		1667104	0					
ANR	1667457	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667458	Identifier	sec		1667104	0					
ANR	1667459	Identifier	next		1667104	1					
ANR	1667460	ExpressionStatement	"VisitActive ( nodes [ i ] . RT , keys )"	417:3:11268:11300	1667104	2	True				
ANR	1667461	CallExpression	"VisitActive ( nodes [ i ] . RT , keys )"		1667104	0					
ANR	1667462	Callee	VisitActive		1667104	0					
ANR	1667463	Identifier	VisitActive		1667104	0					
ANR	1667464	ArgumentList	nodes [ i ] . RT		1667104	1					
ANR	1667465	Argument	nodes [ i ] . RT		1667104	0					
ANR	1667466	MemberAccess	nodes [ i ] . RT		1667104	0					
ANR	1667467	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667468	Identifier	nodes		1667104	0					
ANR	1667469	Identifier	i		1667104	1					
ANR	1667470	Identifier	RT		1667104	1					
ANR	1667471	Argument	keys		1667104	1					
ANR	1667472	Identifier	keys		1667104	0					
ANR	1667473	ExpressionStatement	i = nodes [ i ] . LT	418:3:11305:11320	1667104	3	True				
ANR	1667474	AssignmentExpression	i = nodes [ i ] . LT		1667104	0		=			
ANR	1667475	Identifier	i		1667104	0					
ANR	1667476	MemberAccess	nodes [ i ] . LT		1667104	1					
ANR	1667477	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667478	Identifier	nodes		1667104	0					
ANR	1667479	Identifier	i		1667104	1					
ANR	1667480	Identifier	LT		1667104	1					
ANR	1667481	ElseStatement	else		1667104	0					
ANR	1667482	CompoundStatement		61:9:1532:1532	1667104	0					
ANR	1667483	ExpressionStatement	sec = nodes [ i ] . RS	420:3:11336:11353	1667104	0	True				
ANR	1667484	AssignmentExpression	sec = nodes [ i ] . RS		1667104	0		=			
ANR	1667485	Identifier	sec		1667104	0					
ANR	1667486	MemberAccess	nodes [ i ] . RS		1667104	1					
ANR	1667487	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667488	Identifier	nodes		1667104	0					
ANR	1667489	Identifier	i		1667104	1					
ANR	1667490	Identifier	RS		1667104	1					
ANR	1667491	WhileStatement	while ( sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) ) )		1667104	1					
ANR	1667492	Condition	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )	421:9:11364:11423	1667104	0	True				
ANR	1667493	AndExpression	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )		1667104	0		&&			
ANR	1667494	Identifier	sec		1667104	0					
ANR	1667495	OrExpression	sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l )		1667104	1		||			
ANR	1667496	RelationalExpression	sec -> value > l		1667104	0		>			
ANR	1667497	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667498	Identifier	sec		1667104	0					
ANR	1667499	Identifier	value		1667104	1					
ANR	1667500	Identifier	l		1667104	1					
ANR	1667501	AndExpression	sec -> value == l && ! sec -> open && ! o_l		1667104	1		&&			
ANR	1667502	EqualityExpression	sec -> value == l		1667104	0		==			
ANR	1667503	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667504	Identifier	sec		1667104	0					
ANR	1667505	Identifier	value		1667104	1					
ANR	1667506	Identifier	l		1667104	1					
ANR	1667507	AndExpression	! sec -> open && ! o_l		1667104	1		&&			
ANR	1667508	UnaryOperationExpression	! sec -> open		1667104	0					
ANR	1667509	UnaryOperator	!		1667104	0					
ANR	1667510	PtrMemberAccess	sec -> open		1667104	1					
ANR	1667511	Identifier	sec		1667104	0					
ANR	1667512	Identifier	open		1667104	1					
ANR	1667513	UnaryOperationExpression	! o_l		1667104	1					
ANR	1667514	UnaryOperator	!		1667104	0					
ANR	1667515	Identifier	o_l		1667104	1					
ANR	1667516	CompoundStatement		63:70:1626:1626	1667104	1					
ANR	1667517	ExpressionStatement	keys . Insert ( sec -> key )	422:4:11431:11454	1667104	0	True				
ANR	1667518	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667519	Callee	keys . Insert		1667104	0					
ANR	1667520	MemberAccess	keys . Insert		1667104	0					
ANR	1667521	Identifier	keys		1667104	0					
ANR	1667522	Identifier	Insert		1667104	1					
ANR	1667523	ArgumentList	sec -> key		1667104	1					
ANR	1667524	Argument	sec -> key		1667104	0					
ANR	1667525	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667526	Identifier	sec		1667104	0					
ANR	1667527	Identifier	key		1667104	1					
ANR	1667528	ExpressionStatement	sec = sec -> next	423:4:11460:11475	1667104	1	True				
ANR	1667529	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667530	Identifier	sec		1667104	0					
ANR	1667531	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667532	Identifier	sec		1667104	0					
ANR	1667533	Identifier	next		1667104	1					
ANR	1667534	ExpressionStatement	i = nodes [ i ] . RT	425:3:11485:11500	1667104	2	True				
ANR	1667535	AssignmentExpression	i = nodes [ i ] . RT		1667104	0		=			
ANR	1667536	Identifier	i		1667104	0					
ANR	1667537	MemberAccess	nodes [ i ] . RT		1667104	1					
ANR	1667538	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667539	Identifier	nodes		1667104	0					
ANR	1667540	Identifier	i		1667104	1					
ANR	1667541	Identifier	RT		1667104	1					
ANR	1667542	ExpressionStatement	i = nodes [ v ] . RT	431:1:11591:11606	1667104	14	True				
ANR	1667543	AssignmentExpression	i = nodes [ v ] . RT		1667104	0		=			
ANR	1667544	Identifier	i		1667104	0					
ANR	1667545	MemberAccess	nodes [ v ] . RT		1667104	1					
ANR	1667546	ArrayIndexing	nodes [ v ]		1667104	0					
ANR	1667547	Identifier	nodes		1667104	0					
ANR	1667548	Identifier	v		1667104	1					
ANR	1667549	Identifier	RT		1667104	1					
ANR	1667550	WhileStatement	while ( i >= 0 && i < size )		1667104	15					
ANR	1667551	Condition	i >= 0 && i < size	432:8:11616:11633	1667104	0	True				
ANR	1667552	AndExpression	i >= 0 && i < size		1667104	0		&&			
ANR	1667553	RelationalExpression	i >= 0		1667104	0		>=			
ANR	1667554	Identifier	i		1667104	0					
ANR	1667555	PrimaryExpression	0		1667104	1					
ANR	1667556	RelationalExpression	i < size		1667104	1		<			
ANR	1667557	Identifier	i		1667104	0					
ANR	1667558	Identifier	size		1667104	1					
ANR	1667559	CompoundStatement		74:29:1838:1838	1667104	1					
ANR	1667560	IfStatement	if ( r > nodes [ i ] . nodeValue )		1667104	0					
ANR	1667561	Condition	r > nodes [ i ] . nodeValue	433:6:11645:11666	1667104	0	True				
ANR	1667562	RelationalExpression	r > nodes [ i ] . nodeValue		1667104	0		>			
ANR	1667563	Identifier	r		1667104	0					
ANR	1667564	MemberAccess	nodes [ i ] . nodeValue		1667104	1					
ANR	1667565	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667566	Identifier	nodes		1667104	0					
ANR	1667567	Identifier	i		1667104	1					
ANR	1667568	Identifier	nodeValue		1667104	1					
ANR	1667569	CompoundStatement		75:31:1871:1871	1667104	1					
ANR	1667570	ExpressionStatement	sec = nodes [ i ] . LS	435:3:11723:11740	1667104	0	True				
ANR	1667571	AssignmentExpression	sec = nodes [ i ] . LS		1667104	0		=			
ANR	1667572	Identifier	sec		1667104	0					
ANR	1667573	MemberAccess	nodes [ i ] . LS		1667104	1					
ANR	1667574	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667575	Identifier	nodes		1667104	0					
ANR	1667576	Identifier	i		1667104	1					
ANR	1667577	Identifier	LS		1667104	1					
ANR	1667578	WhileStatement	while ( sec )		1667104	1					
ANR	1667579	Condition	sec	436:10:11752:11754	1667104	0	True				
ANR	1667580	Identifier	sec		1667104	0					
ANR	1667581	CompoundStatement		78:16:1959:1959	1667104	1					
ANR	1667582	ExpressionStatement	keys . Insert ( sec -> key )	437:4:11764:11787	1667104	0	True				
ANR	1667583	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667584	Callee	keys . Insert		1667104	0					
ANR	1667585	MemberAccess	keys . Insert		1667104	0					
ANR	1667586	Identifier	keys		1667104	0					
ANR	1667587	Identifier	Insert		1667104	1					
ANR	1667588	ArgumentList	sec -> key		1667104	1					
ANR	1667589	Argument	sec -> key		1667104	0					
ANR	1667590	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667591	Identifier	sec		1667104	0					
ANR	1667592	Identifier	key		1667104	1					
ANR	1667593	ExpressionStatement	sec = sec -> next	438:4:11793:11808	1667104	1	True				
ANR	1667594	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667595	Identifier	sec		1667104	0					
ANR	1667596	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667597	Identifier	sec		1667104	0					
ANR	1667598	Identifier	next		1667104	1					
ANR	1667599	ExpressionStatement	"VisitActive ( nodes [ i ] . LT , keys )"	440:3:11818:11850	1667104	2	True				
ANR	1667600	CallExpression	"VisitActive ( nodes [ i ] . LT , keys )"		1667104	0					
ANR	1667601	Callee	VisitActive		1667104	0					
ANR	1667602	Identifier	VisitActive		1667104	0					
ANR	1667603	ArgumentList	nodes [ i ] . LT		1667104	1					
ANR	1667604	Argument	nodes [ i ] . LT		1667104	0					
ANR	1667605	MemberAccess	nodes [ i ] . LT		1667104	0					
ANR	1667606	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667607	Identifier	nodes		1667104	0					
ANR	1667608	Identifier	i		1667104	1					
ANR	1667609	Identifier	LT		1667104	1					
ANR	1667610	Argument	keys		1667104	1					
ANR	1667611	Identifier	keys		1667104	0					
ANR	1667612	ExpressionStatement	i = nodes [ i ] . RT	441:3:11855:11870	1667104	3	True				
ANR	1667613	AssignmentExpression	i = nodes [ i ] . RT		1667104	0		=			
ANR	1667614	Identifier	i		1667104	0					
ANR	1667615	MemberAccess	nodes [ i ] . RT		1667104	1					
ANR	1667616	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667617	Identifier	nodes		1667104	0					
ANR	1667618	Identifier	i		1667104	1					
ANR	1667619	Identifier	RT		1667104	1					
ANR	1667620	ElseStatement	else		1667104	0					
ANR	1667621	CompoundStatement		84:9:2082:2082	1667104	0					
ANR	1667622	ExpressionStatement	sec = nodes [ i ] . LS	443:3:11886:11903	1667104	0	True				
ANR	1667623	AssignmentExpression	sec = nodes [ i ] . LS		1667104	0		=			
ANR	1667624	Identifier	sec		1667104	0					
ANR	1667625	MemberAccess	nodes [ i ] . LS		1667104	1					
ANR	1667626	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667627	Identifier	nodes		1667104	0					
ANR	1667628	Identifier	i		1667104	1					
ANR	1667629	Identifier	LS		1667104	1					
ANR	1667630	WhileStatement	while ( sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) ) )		1667104	1					
ANR	1667631	Condition	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )	444:9:11914:11973	1667104	0	True				
ANR	1667632	AndExpression	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )		1667104	0		&&			
ANR	1667633	Identifier	sec		1667104	0					
ANR	1667634	OrExpression	sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r )		1667104	1		||			
ANR	1667635	RelationalExpression	sec -> value < r		1667104	0		<			
ANR	1667636	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667637	Identifier	sec		1667104	0					
ANR	1667638	Identifier	value		1667104	1					
ANR	1667639	Identifier	r		1667104	1					
ANR	1667640	AndExpression	sec -> value == r && ! sec -> open && ! o_r		1667104	1		&&			
ANR	1667641	EqualityExpression	sec -> value == r		1667104	0		==			
ANR	1667642	PtrMemberAccess	sec -> value		1667104	0					
ANR	1667643	Identifier	sec		1667104	0					
ANR	1667644	Identifier	value		1667104	1					
ANR	1667645	Identifier	r		1667104	1					
ANR	1667646	AndExpression	! sec -> open && ! o_r		1667104	1		&&			
ANR	1667647	UnaryOperationExpression	! sec -> open		1667104	0					
ANR	1667648	UnaryOperator	!		1667104	0					
ANR	1667649	PtrMemberAccess	sec -> open		1667104	1					
ANR	1667650	Identifier	sec		1667104	0					
ANR	1667651	Identifier	open		1667104	1					
ANR	1667652	UnaryOperationExpression	! o_r		1667104	1					
ANR	1667653	UnaryOperator	!		1667104	0					
ANR	1667654	Identifier	o_r		1667104	1					
ANR	1667655	CompoundStatement		86:70:2176:2176	1667104	1					
ANR	1667656	ExpressionStatement	keys . Insert ( sec -> key )	445:4:11981:12004	1667104	0	True				
ANR	1667657	CallExpression	keys . Insert ( sec -> key )		1667104	0					
ANR	1667658	Callee	keys . Insert		1667104	0					
ANR	1667659	MemberAccess	keys . Insert		1667104	0					
ANR	1667660	Identifier	keys		1667104	0					
ANR	1667661	Identifier	Insert		1667104	1					
ANR	1667662	ArgumentList	sec -> key		1667104	1					
ANR	1667663	Argument	sec -> key		1667104	0					
ANR	1667664	PtrMemberAccess	sec -> key		1667104	0					
ANR	1667665	Identifier	sec		1667104	0					
ANR	1667666	Identifier	key		1667104	1					
ANR	1667667	ExpressionStatement	sec = sec -> next	446:4:12010:12025	1667104	1	True				
ANR	1667668	AssignmentExpression	sec = sec -> next		1667104	0		=			
ANR	1667669	Identifier	sec		1667104	0					
ANR	1667670	PtrMemberAccess	sec -> next		1667104	1					
ANR	1667671	Identifier	sec		1667104	0					
ANR	1667672	Identifier	next		1667104	1					
ANR	1667673	ExpressionStatement	i = nodes [ i ] . LT	448:3:12035:12050	1667104	2	True				
ANR	1667674	AssignmentExpression	i = nodes [ i ] . LT		1667104	0		=			
ANR	1667675	Identifier	i		1667104	0					
ANR	1667676	MemberAccess	nodes [ i ] . LT		1667104	1					
ANR	1667677	ArrayIndexing	nodes [ i ]		1667104	0					
ANR	1667678	Identifier	nodes		1667104	0					
ANR	1667679	Identifier	i		1667104	1					
ANR	1667680	Identifier	LT		1667104	1					
ANR	1667681	ReturnStatement	return ( true ) ;	453:1:12071:12085	1667104	16	True				
ANR	1667682	Identifier	true		1667104	0					
ANR	1667683	ReturnType	bool		1667104	1					
ANR	1667684	Identifier	IntervalTree :: WindowQuery		1667104	2					
ANR	1667685	ParameterList	"const Interval & interval , KeySet & keys"		1667104	3					
ANR	1667686	Parameter	const Interval & interval	358:13:9757:9780	1667104	0	True				
ANR	1667687	ParameterType	const Interval &		1667104	0					
ANR	1667688	Identifier	interval		1667104	1					
ANR	1667689	Parameter	KeySet & keys	358:39:9783:9794	1667104	1	True				
ANR	1667690	ParameterType	KeySet &		1667104	0					
ANR	1667691	Identifier	keys		1667104	1					
ANR	1667692	CFGEntryNode	ENTRY		1667104		True				
ANR	1667693	CFGExitNode	EXIT		1667104		True				
ANR	1667694	Symbol	* v		1667104						
ANR	1667695	Symbol	sec -> key		1667104						
ANR	1667696	Symbol	sec -> open		1667104						
ANR	1667697	Symbol	keys		1667104						
ANR	1667698	Symbol	rootT		1667104						
ANR	1667699	Symbol	interval . lower . IsNumber		1667104						
ANR	1667700	Symbol	sec		1667104						
ANR	1667701	Symbol	* nodes		1667104						
ANR	1667702	Symbol	interval . upper . IsNumber		1667104						
ANR	1667703	Symbol	interval . upper		1667104						
ANR	1667704	Symbol	o_l		1667104						
ANR	1667705	Symbol	interval . openUpper		1667104						
ANR	1667706	Symbol	o_r		1667104						
ANR	1667707	Symbol	false		1667104						
ANR	1667708	Symbol	i		1667104						
ANR	1667709	Symbol	sec -> value		1667104						
ANR	1667710	Symbol	l		1667104						
ANR	1667711	Symbol	r		1667104						
ANR	1667712	Symbol	nodes		1667104						
ANR	1667713	Symbol	* i		1667104						
ANR	1667714	Symbol	size		1667104						
ANR	1667715	Symbol	nodes [ v ] . LT		1667104						
ANR	1667716	Symbol	v		1667104						
ANR	1667717	Symbol	nodes [ i ] . LT		1667104						
ANR	1667718	Symbol	true		1667104						
ANR	1667719	Symbol	nodes [ i ] . LS		1667104						
ANR	1667720	Symbol	interval		1667104						
ANR	1667721	Symbol	* sec		1667104						
ANR	1667722	Symbol	nodes [ v ] . RT		1667104						
ANR	1667723	Symbol	interval . openLower		1667104						
ANR	1667724	Symbol	nodes [ i ] . RT		1667104						
ANR	1667725	Symbol	interval . lower		1667104						
ANR	1667726	Symbol	nodes [ i ] . nodeValue		1667104						
ANR	1667727	Symbol	nodes [ i ] . RS		1667104						
ANR	1667728	Symbol	sec -> next		1667104						
ANR	1667729	Function	IntervalTree :: VisitActive	457:0:12091:12436							
ANR	1667730	FunctionDef	"IntervalTree :: VisitActive (int i , KeySet & keys)"		1667729	0					
ANR	1667731	CompoundStatement		459:0:12146:12436	1667729	0					
ANR	1667732	IfStatement	if ( i == - 1 || i >= size )		1667729	0					
ANR	1667733	Condition	i == - 1 || i >= size	460:5:12153:12168	1667729	0	True				
ANR	1667734	OrExpression	i == - 1 || i >= size		1667729	0		||			
ANR	1667735	EqualityExpression	i == - 1		1667729	0		==			
ANR	1667736	Identifier	i		1667729	0					
ANR	1667737	UnaryOperationExpression	- 1		1667729	1					
ANR	1667738	UnaryOperator	-		1667729	0					
ANR	1667739	PrimaryExpression	1		1667729	1					
ANR	1667740	RelationalExpression	i >= size		1667729	1		>=			
ANR	1667741	Identifier	i		1667729	0					
ANR	1667742	Identifier	size		1667729	1					
ANR	1667743	ReturnStatement	return ;	460:24:12172:12178	1667729	1	True				
ANR	1667744	IdentifierDeclStatement	Secondary * sec = nodes [ i ] . LS ;	463:1:12218:12247	1667729	1	True				
ANR	1667745	IdentifierDecl	* sec = nodes [ i ] . LS		1667729	0					
ANR	1667746	IdentifierDeclType	Secondary *		1667729	0					
ANR	1667747	Identifier	sec		1667729	1					
ANR	1667748	AssignmentExpression	* sec = nodes [ i ] . LS		1667729	2		=			
ANR	1667749	Identifier	sec		1667729	0					
ANR	1667750	MemberAccess	nodes [ i ] . LS		1667729	1					
ANR	1667751	ArrayIndexing	nodes [ i ]		1667729	0					
ANR	1667752	Identifier	nodes		1667729	0					
ANR	1667753	Identifier	i		1667729	1					
ANR	1667754	Identifier	LS		1667729	1					
ANR	1667755	WhileStatement	while ( sec )		1667729	2					
ANR	1667756	Condition	sec	464:8:12257:12259	1667729	0	True				
ANR	1667757	Identifier	sec		1667729	0					
ANR	1667758	CompoundStatement		6:14:116:116	1667729	1					
ANR	1667759	ExpressionStatement	keys . Insert ( sec -> key )	465:2:12267:12290	1667729	0	True				
ANR	1667760	CallExpression	keys . Insert ( sec -> key )		1667729	0					
ANR	1667761	Callee	keys . Insert		1667729	0					
ANR	1667762	MemberAccess	keys . Insert		1667729	0					
ANR	1667763	Identifier	keys		1667729	0					
ANR	1667764	Identifier	Insert		1667729	1					
ANR	1667765	ArgumentList	sec -> key		1667729	1					
ANR	1667766	Argument	sec -> key		1667729	0					
ANR	1667767	PtrMemberAccess	sec -> key		1667729	0					
ANR	1667768	Identifier	sec		1667729	0					
ANR	1667769	Identifier	key		1667729	1					
ANR	1667770	ExpressionStatement	sec = sec -> next	466:2:12294:12309	1667729	1	True				
ANR	1667771	AssignmentExpression	sec = sec -> next		1667729	0		=			
ANR	1667772	Identifier	sec		1667729	0					
ANR	1667773	PtrMemberAccess	sec -> next		1667729	1					
ANR	1667774	Identifier	sec		1667729	0					
ANR	1667775	Identifier	next		1667729	1					
ANR	1667776	ExpressionStatement	"VisitActive ( nodes [ i ] . LT , keys )"	470:1:12367:12399	1667729	3	True				
ANR	1667777	CallExpression	"VisitActive ( nodes [ i ] . LT , keys )"		1667729	0					
ANR	1667778	Callee	VisitActive		1667729	0					
ANR	1667779	Identifier	VisitActive		1667729	0					
ANR	1667780	ArgumentList	nodes [ i ] . LT		1667729	1					
ANR	1667781	Argument	nodes [ i ] . LT		1667729	0					
ANR	1667782	MemberAccess	nodes [ i ] . LT		1667729	0					
ANR	1667783	ArrayIndexing	nodes [ i ]		1667729	0					
ANR	1667784	Identifier	nodes		1667729	0					
ANR	1667785	Identifier	i		1667729	1					
ANR	1667786	Identifier	LT		1667729	1					
ANR	1667787	Argument	keys		1667729	1					
ANR	1667788	Identifier	keys		1667729	0					
ANR	1667789	ExpressionStatement	"VisitActive ( nodes [ i ] . RT , keys )"	471:1:12402:12434	1667729	4	True				
ANR	1667790	CallExpression	"VisitActive ( nodes [ i ] . RT , keys )"		1667729	0					
ANR	1667791	Callee	VisitActive		1667729	0					
ANR	1667792	Identifier	VisitActive		1667729	0					
ANR	1667793	ArgumentList	nodes [ i ] . RT		1667729	1					
ANR	1667794	Argument	nodes [ i ] . RT		1667729	0					
ANR	1667795	MemberAccess	nodes [ i ] . RT		1667729	0					
ANR	1667796	ArrayIndexing	nodes [ i ]		1667729	0					
ANR	1667797	Identifier	nodes		1667729	0					
ANR	1667798	Identifier	i		1667729	1					
ANR	1667799	Identifier	RT		1667729	1					
ANR	1667800	Argument	keys		1667729	1					
ANR	1667801	Identifier	keys		1667729	0					
ANR	1667802	ReturnType	void		1667729	1					
ANR	1667803	Identifier	IntervalTree :: VisitActive		1667729	2					
ANR	1667804	ParameterList	"int i , KeySet & keys"		1667729	3					
ANR	1667805	Parameter	int i	458:13:12124:12128	1667729	0	True				
ANR	1667806	ParameterType	int		1667729	0					
ANR	1667807	Identifier	i		1667729	1					
ANR	1667808	Parameter	KeySet & keys	458:20:12131:12142	1667729	1	True				
ANR	1667809	ParameterType	KeySet &		1667729	0					
ANR	1667810	Identifier	keys		1667729	1					
ANR	1667811	CFGEntryNode	ENTRY		1667729		True				
ANR	1667812	CFGExitNode	EXIT		1667729		True				
ANR	1667813	Symbol	sec -> key		1667729						
ANR	1667814	Symbol	keys		1667729						
ANR	1667815	Symbol	i		1667729						
ANR	1667816	Symbol	sec		1667729						
ANR	1667817	Symbol	* i		1667729						
ANR	1667818	Symbol	nodes		1667729						
ANR	1667819	Symbol	size		1667729						
ANR	1667820	Symbol	nodes [ i ] . LT		1667729						
ANR	1667821	Symbol	nodes [ i ] . LS		1667729						
ANR	1667822	Symbol	* nodes		1667729						
ANR	1667823	Symbol	* sec		1667729						
ANR	1667824	Symbol	nodes [ i ] . RT		1667729						
ANR	1667825	Symbol	sec -> next		1667729						
ANR	1667826	Function	IntervalTree :: Display	475:0:12440:13140							
ANR	1667827	FunctionDef	IntervalTree :: Display (FILE * fp)		1667826	0					
ANR	1667828	CompoundStatement		477:0:12480:13140	1667826	0					
ANR	1667829	IfStatement	if ( size <= 0 || ! nodes )		1667826	0					
ANR	1667830	Condition	size <= 0 || ! nodes	478:5:12487:12505	1667826	0	True				
ANR	1667831	OrExpression	size <= 0 || ! nodes		1667826	0		||			
ANR	1667832	RelationalExpression	size <= 0		1667826	0		<=			
ANR	1667833	Identifier	size		1667826	0					
ANR	1667834	PrimaryExpression	0		1667826	1					
ANR	1667835	UnaryOperationExpression	! nodes		1667826	1					
ANR	1667836	UnaryOperator	!		1667826	0					
ANR	1667837	Identifier	nodes		1667826	1					
ANR	1667838	CompoundStatement		2:27:28:28	1667826	1					
ANR	1667839	ExpressionStatement	"fprintf ( fp , ""<empty>\\n"" )"	479:2:12513:12539	1667826	0	True				
ANR	1667840	CallExpression	"fprintf ( fp , ""<empty>\\n"" )"		1667826	0					
ANR	1667841	Callee	fprintf		1667826	0					
ANR	1667842	Identifier	fprintf		1667826	0					
ANR	1667843	ArgumentList	fp		1667826	1					
ANR	1667844	Argument	fp		1667826	0					
ANR	1667845	Identifier	fp		1667826	0					
ANR	1667846	Argument	"""<empty>\\n"""		1667826	1					
ANR	1667847	PrimaryExpression	"""<empty>\\n"""		1667826	0					
ANR	1667848	ReturnStatement	return ;	480:2:12543:12549	1667826	1	True				
ANR	1667849	IdentifierDeclStatement	"int j = 1 , k = 1 ;"	483:1:12556:12574	1667826	1	True				
ANR	1667850	IdentifierDecl	j = 1		1667826	0					
ANR	1667851	IdentifierDeclType	int		1667826	0					
ANR	1667852	Identifier	j		1667826	1					
ANR	1667853	AssignmentExpression	j = 1		1667826	2		=			
ANR	1667854	Identifier	j		1667826	0					
ANR	1667855	PrimaryExpression	1		1667826	1					
ANR	1667856	IdentifierDecl	k = 1		1667826	1					
ANR	1667857	IdentifierDeclType	int		1667826	0					
ANR	1667858	Identifier	k		1667826	1					
ANR	1667859	AssignmentExpression	k = 1		1667826	2		=			
ANR	1667860	Identifier	k		1667826	0					
ANR	1667861	PrimaryExpression	1		1667826	1					
ANR	1667862	IdentifierDeclStatement	Secondary * sec ;	484:1:12577:12592	1667826	2	True				
ANR	1667863	IdentifierDecl	* sec		1667826	0					
ANR	1667864	IdentifierDeclType	Secondary *		1667826	0					
ANR	1667865	Identifier	sec		1667826	1					
ANR	1667866	ForStatement	for ( int i = 0 ; i < size ; i ++ )		1667826	3					
ANR	1667867	ForInit	int i = 0 ;	485:6:12600:12610	1667826	0	True				
ANR	1667868	IdentifierDeclStatement	int i = 0 ;		1667826	0					
ANR	1667869	IdentifierDecl	i = 0		1667826	0					
ANR	1667870	IdentifierDeclType	int		1667826	0					
ANR	1667871	Identifier	i		1667826	1					
ANR	1667872	AssignmentExpression	i = 0		1667826	2		=			
ANR	1667873	Identifier	i		1667826	0					
ANR	1667874	PrimaryExpression	0		1667826	1					
ANR	1667875	Condition	i < size	485:18:12612:12619	1667826	1	True				
ANR	1667876	RelationalExpression	i < size		1667826	0		<			
ANR	1667877	Identifier	i		1667826	0					
ANR	1667878	Identifier	size		1667826	1					
ANR	1667879	PostIncDecOperationExpression	i ++	485:28:12622:12624	1667826	2	True				
ANR	1667880	Identifier	i		1667826	0					
ANR	1667881	IncDec	++		1667826	1					
ANR	1667882	CompoundStatement		9:34:147:147	1667826	3					
ANR	1667883	ExpressionStatement	"fprintf ( fp , "" [%s%s%g:"" , i == rootT ? ""(*)"" : """" , nodes [ i ] . active ? ""(@)"" : """" , nodes [ i ] . nodeValue )"	486:2:12632:12726	1667826	0	True				
ANR	1667884	CallExpression	"fprintf ( fp , "" [%s%s%g:"" , i == rootT ? ""(*)"" : """" , nodes [ i ] . active ? ""(@)"" : """" , nodes [ i ] . nodeValue )"		1667826	0					
ANR	1667885	Callee	fprintf		1667826	0					
ANR	1667886	Identifier	fprintf		1667826	0					
ANR	1667887	ArgumentList	fp		1667826	1					
ANR	1667888	Argument	fp		1667826	0					
ANR	1667889	Identifier	fp		1667826	0					
ANR	1667890	Argument	""" [%s%s%g:"""		1667826	1					
ANR	1667891	PrimaryExpression	""" [%s%s%g:"""		1667826	0					
ANR	1667892	Argument	"i == rootT ? ""(*)"" : """""		1667826	2					
ANR	1667893	ConditionalExpression	"i == rootT ? ""(*)"" : """""		1667826	0					
ANR	1667894	Condition	i == rootT		1667826	0					
ANR	1667895	EqualityExpression	i == rootT		1667826	0		==			
ANR	1667896	Identifier	i		1667826	0					
ANR	1667897	Identifier	rootT		1667826	1					
ANR	1667898	PrimaryExpression	"""(*)"""		1667826	1					
ANR	1667899	PrimaryExpression	""""""		1667826	2					
ANR	1667900	Argument	"nodes [ i ] . active ? ""(@)"" : """""		1667826	3					
ANR	1667901	ConditionalExpression	"nodes [ i ] . active ? ""(@)"" : """""		1667826	0					
ANR	1667902	Condition	nodes [ i ] . active		1667826	0					
ANR	1667903	MemberAccess	nodes [ i ] . active		1667826	0					
ANR	1667904	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1667905	Identifier	nodes		1667826	0					
ANR	1667906	Identifier	i		1667826	1					
ANR	1667907	Identifier	active		1667826	1					
ANR	1667908	PrimaryExpression	"""(@)"""		1667826	1					
ANR	1667909	PrimaryExpression	""""""		1667826	2					
ANR	1667910	Argument	nodes [ i ] . nodeValue		1667826	4					
ANR	1667911	MemberAccess	nodes [ i ] . nodeValue		1667826	0					
ANR	1667912	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1667913	Identifier	nodes		1667826	0					
ANR	1667914	Identifier	i		1667826	1					
ANR	1667915	Identifier	nodeValue		1667826	1					
ANR	1667916	ForStatement	for ( sec = nodes [ i ] . LS ; sec != NULL ; sec = sec -> next )		1667826	1					
ANR	1667917	ForInit	sec = nodes [ i ] . LS ;	488:7:12735:12752	1667826	0	True				
ANR	1667918	AssignmentExpression	sec = nodes [ i ] . LS		1667826	0		=			
ANR	1667919	Identifier	sec		1667826	0					
ANR	1667920	MemberAccess	nodes [ i ] . LS		1667826	1					
ANR	1667921	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1667922	Identifier	nodes		1667826	0					
ANR	1667923	Identifier	i		1667826	1					
ANR	1667924	Identifier	LS		1667826	1					
ANR	1667925	Condition	sec != NULL	488:26:12754:12764	1667826	1	True				
ANR	1667926	EqualityExpression	sec != NULL		1667826	0		!=			
ANR	1667927	Identifier	sec		1667826	0					
ANR	1667928	Identifier	NULL		1667826	1					
ANR	1667929	AssignmentExpression	sec = sec -> next	488:39:12767:12781	1667826	2	True	=			
ANR	1667930	Identifier	sec		1667826	0					
ANR	1667931	PtrMemberAccess	sec -> next		1667826	1					
ANR	1667932	Identifier	sec		1667826	0					
ANR	1667933	Identifier	next		1667826	1					
ANR	1667934	CompoundStatement		12:57:304:304	1667826	3					
ANR	1667935	ExpressionStatement	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"	489:3:12790:12836	1667826	0	True				
ANR	1667936	CallExpression	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"		1667826	0					
ANR	1667937	Callee	fprintf		1667826	0					
ANR	1667938	Identifier	fprintf		1667826	0					
ANR	1667939	ArgumentList	fp		1667826	1					
ANR	1667940	Argument	fp		1667826	0					
ANR	1667941	Identifier	fp		1667826	0					
ANR	1667942	Argument	"""(%d=%g)"""		1667826	1					
ANR	1667943	PrimaryExpression	"""(%d=%g)"""		1667826	0					
ANR	1667944	Argument	sec -> key		1667826	2					
ANR	1667945	PtrMemberAccess	sec -> key		1667826	0					
ANR	1667946	Identifier	sec		1667826	0					
ANR	1667947	Identifier	key		1667826	1					
ANR	1667948	Argument	sec -> value		1667826	3					
ANR	1667949	PtrMemberAccess	sec -> value		1667826	0					
ANR	1667950	Identifier	sec		1667826	0					
ANR	1667951	Identifier	value		1667826	1					
ANR	1667952	ExpressionStatement	"putc ( ':' , fp )"	491:2:12844:12859	1667826	2	True				
ANR	1667953	CallExpression	"putc ( ':' , fp )"		1667826	0					
ANR	1667954	Callee	putc		1667826	0					
ANR	1667955	Identifier	putc		1667826	0					
ANR	1667956	ArgumentList	':'		1667826	1					
ANR	1667957	Argument	':'		1667826	0					
ANR	1667958	PrimaryExpression	':'		1667826	0					
ANR	1667959	Argument	fp		1667826	1					
ANR	1667960	Identifier	fp		1667826	0					
ANR	1667961	ForStatement	for ( sec = nodes [ i ] . RS ; sec != NULL ; sec = sec -> next )		1667826	3					
ANR	1667962	ForInit	sec = nodes [ i ] . RS ;	492:7:12868:12885	1667826	0	True				
ANR	1667963	AssignmentExpression	sec = nodes [ i ] . RS		1667826	0		=			
ANR	1667964	Identifier	sec		1667826	0					
ANR	1667965	MemberAccess	nodes [ i ] . RS		1667826	1					
ANR	1667966	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1667967	Identifier	nodes		1667826	0					
ANR	1667968	Identifier	i		1667826	1					
ANR	1667969	Identifier	RS		1667826	1					
ANR	1667970	Condition	sec != NULL	492:26:12887:12897	1667826	1	True				
ANR	1667971	EqualityExpression	sec != NULL		1667826	0		!=			
ANR	1667972	Identifier	sec		1667826	0					
ANR	1667973	Identifier	NULL		1667826	1					
ANR	1667974	AssignmentExpression	sec = sec -> next	492:39:12900:12914	1667826	2	True	=			
ANR	1667975	Identifier	sec		1667826	0					
ANR	1667976	PtrMemberAccess	sec -> next		1667826	1					
ANR	1667977	Identifier	sec		1667826	0					
ANR	1667978	Identifier	next		1667826	1					
ANR	1667979	CompoundStatement		16:57:437:437	1667826	3					
ANR	1667980	ExpressionStatement	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"	493:3:12923:12969	1667826	0	True				
ANR	1667981	CallExpression	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"		1667826	0					
ANR	1667982	Callee	fprintf		1667826	0					
ANR	1667983	Identifier	fprintf		1667826	0					
ANR	1667984	ArgumentList	fp		1667826	1					
ANR	1667985	Argument	fp		1667826	0					
ANR	1667986	Identifier	fp		1667826	0					
ANR	1667987	Argument	"""(%d=%g)"""		1667826	1					
ANR	1667988	PrimaryExpression	"""(%d=%g)"""		1667826	0					
ANR	1667989	Argument	sec -> key		1667826	2					
ANR	1667990	PtrMemberAccess	sec -> key		1667826	0					
ANR	1667991	Identifier	sec		1667826	0					
ANR	1667992	Identifier	key		1667826	1					
ANR	1667993	Argument	sec -> value		1667826	3					
ANR	1667994	PtrMemberAccess	sec -> value		1667826	0					
ANR	1667995	Identifier	sec		1667826	0					
ANR	1667996	Identifier	value		1667826	1					
ANR	1667997	ExpressionStatement	"fprintf ( fp , ""|%d,%d]  "" , nodes [ i ] . LT , nodes [ i ] . RT )"	495:2:12977:13029	1667826	4	True				
ANR	1667998	CallExpression	"fprintf ( fp , ""|%d,%d]  "" , nodes [ i ] . LT , nodes [ i ] . RT )"		1667826	0					
ANR	1667999	Callee	fprintf		1667826	0					
ANR	1668000	Identifier	fprintf		1667826	0					
ANR	1668001	ArgumentList	fp		1667826	1					
ANR	1668002	Argument	fp		1667826	0					
ANR	1668003	Identifier	fp		1667826	0					
ANR	1668004	Argument	"""|%d,%d]  """		1667826	1					
ANR	1668005	PrimaryExpression	"""|%d,%d]  """		1667826	0					
ANR	1668006	Argument	nodes [ i ] . LT		1667826	2					
ANR	1668007	MemberAccess	nodes [ i ] . LT		1667826	0					
ANR	1668008	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1668009	Identifier	nodes		1667826	0					
ANR	1668010	Identifier	i		1667826	1					
ANR	1668011	Identifier	LT		1667826	1					
ANR	1668012	Argument	nodes [ i ] . RT		1667826	3					
ANR	1668013	MemberAccess	nodes [ i ] . RT		1667826	0					
ANR	1668014	ArrayIndexing	nodes [ i ]		1667826	0					
ANR	1668015	Identifier	nodes		1667826	0					
ANR	1668016	Identifier	i		1667826	1					
ANR	1668017	Identifier	RT		1667826	1					
ANR	1668018	IfStatement	if ( j == k )		1667826	5					
ANR	1668019	Condition	j == k	497:6:13038:13043	1667826	0	True				
ANR	1668020	EqualityExpression	j == k		1667826	0		==			
ANR	1668021	Identifier	j		1667826	0					
ANR	1668022	Identifier	k		1667826	1					
ANR	1668023	CompoundStatement		21:15:566:566	1667826	1					
ANR	1668024	ExpressionStatement	"putc ( '\\n' , fp )"	498:3:13052:13068	1667826	0	True				
ANR	1668025	CallExpression	"putc ( '\\n' , fp )"		1667826	0					
ANR	1668026	Callee	putc		1667826	0					
ANR	1668027	Identifier	putc		1667826	0					
ANR	1668028	ArgumentList	'\\n'		1667826	1					
ANR	1668029	Argument	'\\n'		1667826	0					
ANR	1668030	PrimaryExpression	'\\n'		1667826	0					
ANR	1668031	Argument	fp		1667826	1					
ANR	1668032	Identifier	fp		1667826	0					
ANR	1668033	ExpressionStatement	k = k << 1	499:3:13073:13083	1667826	1	True				
ANR	1668034	AssignmentExpression	k = k << 1		1667826	0		=			
ANR	1668035	Identifier	k		1667826	0					
ANR	1668036	ShiftExpression	k << 1		1667826	1		<<			
ANR	1668037	Identifier	k		1667826	0					
ANR	1668038	PrimaryExpression	1		1667826	1					
ANR	1668039	ExpressionStatement	j = 1	500:3:13088:13093	1667826	2	True				
ANR	1668040	AssignmentExpression	j = 1		1667826	0		=			
ANR	1668041	Identifier	j		1667826	0					
ANR	1668042	PrimaryExpression	1		1667826	1					
ANR	1668043	ElseStatement	else		1667826	0					
ANR	1668044	CompoundStatement		25:9:623:623	1667826	0					
ANR	1668045	ExpressionStatement	j ++	502:3:13109:13112	1667826	0	True				
ANR	1668046	PostIncDecOperationExpression	j ++		1667826	0					
ANR	1668047	Identifier	j		1667826	0					
ANR	1668048	IncDec	++		1667826	1					
ANR	1668049	ExpressionStatement	"putc ( '\\n' , fp )"	505:1:13122:13138	1667826	4	True				
ANR	1668050	CallExpression	"putc ( '\\n' , fp )"		1667826	0					
ANR	1668051	Callee	putc		1667826	0					
ANR	1668052	Identifier	putc		1667826	0					
ANR	1668053	ArgumentList	'\\n'		1667826	1					
ANR	1668054	Argument	'\\n'		1667826	0					
ANR	1668055	PrimaryExpression	'\\n'		1667826	0					
ANR	1668056	Argument	fp		1667826	1					
ANR	1668057	Identifier	fp		1667826	0					
ANR	1668058	ReturnType	void		1667826	1					
ANR	1668059	Identifier	IntervalTree :: Display		1667826	2					
ANR	1668060	ParameterList	FILE * fp		1667826	3					
ANR	1668061	Parameter	FILE * fp	476:9:12469:12476	1667826	0	True				
ANR	1668062	ParameterType	FILE *		1667826	0					
ANR	1668063	Identifier	fp		1667826	1					
ANR	1668064	CFGEntryNode	ENTRY		1667826		True				
ANR	1668065	CFGExitNode	EXIT		1667826		True				
ANR	1668066	Symbol	sec -> key		1667826						
ANR	1668067	Symbol	NULL		1667826						
ANR	1668068	Symbol	rootT		1667826						
ANR	1668069	Symbol	i		1667826						
ANR	1668070	Symbol	fp		1667826						
ANR	1668071	Symbol	j		1667826						
ANR	1668072	Symbol	sec -> value		1667826						
ANR	1668073	Symbol	k		1667826						
ANR	1668074	Symbol	sec		1667826						
ANR	1668075	Symbol	nodes		1667826						
ANR	1668076	Symbol	* i		1667826						
ANR	1668077	Symbol	size		1667826						
ANR	1668078	Symbol	nodes [ i ] . active		1667826						
ANR	1668079	Symbol	nodes [ i ] . LT		1667826						
ANR	1668080	Symbol	nodes [ i ] . LS		1667826						
ANR	1668081	Symbol	* nodes		1667826						
ANR	1668082	Symbol	* sec		1667826						
ANR	1668083	Symbol	nodes [ i ] . RT		1667826						
ANR	1668084	Symbol	nodes [ i ] . nodeValue		1667826						
ANR	1668085	Symbol	sec -> next		1667826						
ANR	1668086	Symbol	nodes [ i ] . RS		1667826						
