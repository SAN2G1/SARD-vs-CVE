command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5019045	File	data/converged/CVE-2011-4930_htcondor/src_condor_vm-gahp_vmgahp.cpp								
ANR	5019046	DeclStmt									
ANR	5019047	Decl							const char	const char *	vmgahp_version
ANR	5019048	DeclStmt									
ANR	5019049	Decl							const char	const char * [ ]	support_vms_list
ANR	5019050	DeclStmt									
ANR	5019051	Decl							const char	const char * [ ]	commands_list
ANR	5019052	DeclStmt									
ANR	5019053	Decl							int	int	forwarding_pipe
ANR	5019054	DeclStmt									
ANR	5019055	Decl							const int	const int	FORWARD_BUFFER_SIZE
ANR	5019056	DeclStmt									
ANR	5019057	Decl							char	char [ FORWARD_BUFFER_SIZE ]	buf
ANR	5019058	DeclStmt									
ANR	5019059	Decl							int	int	bytes
ANR	5019060	DeclStmt									
ANR	5019061	Decl							char	char *	ptr
ANR	5019062	DeclStmt									
ANR	5019063	Decl							int	int	bytes_written
ANR	5019064	Function	VMGahp :: VMGahp	108:0:2935:3273							
ANR	5019065	FunctionDef	"VMGahp :: VMGahp (VMGahpConfig * config , const char * iwd)"		5019064	0					
ANR	5019066	CompoundStatement		110:0:3030:3273	5019064	0					
ANR	5019067	ExpressionStatement	m_async_mode = true	111:1:3033:3052	5019064	0	True				
ANR	5019068	AssignmentExpression	m_async_mode = true		5019064	0		=			
ANR	5019069	Identifier	m_async_mode		5019064	0					
ANR	5019070	Identifier	true		5019064	1					
ANR	5019071	ExpressionStatement	m_new_results_signaled = false	112:1:3055:3085	5019064	1	True				
ANR	5019072	AssignmentExpression	m_new_results_signaled = false		5019064	0		=			
ANR	5019073	Identifier	m_new_results_signaled		5019064	0					
ANR	5019074	Identifier	false		5019064	1					
ANR	5019075	ExpressionStatement	m_jobAd = NULL	113:1:3088:3102	5019064	2	True				
ANR	5019076	AssignmentExpression	m_jobAd = NULL		5019064	0		=			
ANR	5019077	Identifier	m_jobAd		5019064	0					
ANR	5019078	Identifier	NULL		5019064	1					
ANR	5019079	ExpressionStatement	m_inClassAd = false	114:1:3105:3124	5019064	3	True				
ANR	5019080	AssignmentExpression	m_inClassAd = false		5019064	0		=			
ANR	5019081	Identifier	m_inClassAd		5019064	0					
ANR	5019082	Identifier	false		5019064	1					
ANR	5019083	ExpressionStatement	m_gahp_config = config	115:1:3127:3149	5019064	4	True				
ANR	5019084	AssignmentExpression	m_gahp_config = config		5019064	0		=			
ANR	5019085	Identifier	m_gahp_config		5019064	0					
ANR	5019086	Identifier	config		5019064	1					
ANR	5019087	ExpressionStatement	m_workingdir = iwd	116:1:3152:3170	5019064	5	True				
ANR	5019088	AssignmentExpression	m_workingdir = iwd		5019064	0		=			
ANR	5019089	Identifier	m_workingdir		5019064	0					
ANR	5019090	Identifier	iwd		5019064	1					
ANR	5019091	ExpressionStatement	m_max_vm_id = 0	118:1:3174:3189	5019064	6	True				
ANR	5019092	AssignmentExpression	m_max_vm_id = 0		5019064	0		=			
ANR	5019093	Identifier	m_max_vm_id		5019064	0					
ANR	5019094	PrimaryExpression	0		5019064	1					
ANR	5019095	ExpressionStatement	m_need_output_for_quit = false	120:1:3193:3223	5019064	7	True				
ANR	5019096	AssignmentExpression	m_need_output_for_quit = false		5019064	0		=			
ANR	5019097	Identifier	m_need_output_for_quit		5019064	0					
ANR	5019098	Identifier	false		5019064	1					
ANR	5019099	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Constructed VMGahp\\n"" )"	121:1:3226:3271	5019064	8	True				
ANR	5019100	CallExpression	"vmprintf ( D_FULLDEBUG , ""Constructed VMGahp\\n"" )"		5019064	0					
ANR	5019101	Callee	vmprintf		5019064	0					
ANR	5019102	Identifier	vmprintf		5019064	0					
ANR	5019103	ArgumentList	D_FULLDEBUG		5019064	1					
ANR	5019104	Argument	D_FULLDEBUG		5019064	0					
ANR	5019105	Identifier	D_FULLDEBUG		5019064	0					
ANR	5019106	Argument	"""Constructed VMGahp\\n"""		5019064	1					
ANR	5019107	PrimaryExpression	"""Constructed VMGahp\\n"""		5019064	0					
ANR	5019108	Identifier	VMGahp :: VMGahp		5019064	1					
ANR	5019109	ParameterList	"VMGahpConfig * config , const char * iwd"		5019064	2					
ANR	5019110	Parameter	VMGahpConfig * config	108:15:2950:2969	5019064	0	True				
ANR	5019111	ParameterType	VMGahpConfig *		5019064	0					
ANR	5019112	Identifier	config		5019064	1					
ANR	5019113	Parameter	const char * iwd	108:37:2972:2986	5019064	1	True				
ANR	5019114	ParameterType	const char *		5019064	0					
ANR	5019115	Identifier	iwd		5019064	1					
ANR	5019116	CFGEntryNode	ENTRY		5019064		True				
ANR	5019117	CFGExitNode	EXIT		5019064		True				
ANR	5019118	Symbol	m_new_results_signaled		5019064						
ANR	5019119	Symbol	m_need_output_for_quit		5019064						
ANR	5019120	Symbol	NULL		5019064						
ANR	5019121	Symbol	m_jobAd		5019064						
ANR	5019122	Symbol	m_gahp_config		5019064						
ANR	5019123	Symbol	m_max_vm_id		5019064						
ANR	5019124	Symbol	false		5019064						
ANR	5019125	Symbol	m_inClassAd		5019064						
ANR	5019126	Symbol	D_FULLDEBUG		5019064						
ANR	5019127	Symbol	m_workingdir		5019064						
ANR	5019128	Symbol	m_async_mode		5019064						
ANR	5019129	Symbol	iwd		5019064						
ANR	5019130	Symbol	true		5019064						
ANR	5019131	Symbol	config		5019064						
ANR	5019132	Function	VMGahp :: ~VMGahp	124:0:3276:3396							
ANR	5019133	FunctionDef	VMGahp :: ~VMGahp ()		5019132	0					
ANR	5019134	CompoundStatement		125:0:3294:3396	5019132	0					
ANR	5019135	ExpressionStatement	cleanUp ( )	126:1:3297:3306	5019132	0	True				
ANR	5019136	CallExpression	cleanUp ( )		5019132	0					
ANR	5019137	Callee	cleanUp		5019132	0					
ANR	5019138	Identifier	cleanUp		5019132	0					
ANR	5019139	ArgumentList			5019132	1					
ANR	5019140	IfStatement	if ( m_gahp_config )		5019132	1					
ANR	5019141	Condition	m_gahp_config	127:5:3313:3325	5019132	0	True				
ANR	5019142	Identifier	m_gahp_config		5019132	0					
ANR	5019143	CompoundStatement		3:21:34:34	5019132	1					
ANR	5019144	Statement	delete	128:2:3333:3338	5019132	0	True				
ANR	5019145	ExpressionStatement	m_gahp_config	128:9:3340:3353	5019132	1	True				
ANR	5019146	Identifier	m_gahp_config		5019132	0					
ANR	5019147	IfStatement	if ( m_jobAd )		5019132	2					
ANR	5019148	Condition	m_jobAd	130:5:3363:3369	5019132	0	True				
ANR	5019149	Identifier	m_jobAd		5019132	0					
ANR	5019150	CompoundStatement		6:15:78:78	5019132	1					
ANR	5019151	Statement	delete	131:2:3377:3382	5019132	0	True				
ANR	5019152	ExpressionStatement	m_jobAd	131:9:3384:3391	5019132	1	True				
ANR	5019153	Identifier	m_jobAd		5019132	0					
ANR	5019154	Identifier	VMGahp :: ~VMGahp		5019132	1					
ANR	5019155	ParameterList			5019132	2					
ANR	5019156	CFGEntryNode	ENTRY		5019132		True				
ANR	5019157	CFGExitNode	EXIT		5019132		True				
ANR	5019158	Symbol	m_gahp_config		5019132						
ANR	5019159	Symbol	m_jobAd		5019132						
ANR	5019160	Function	VMGahp :: startUp	135:0:3399:5366							
ANR	5019161	FunctionDef	VMGahp :: startUp ()		5019160	0					
ANR	5019162	CompoundStatement		137:0:3422:5366	5019160	0					
ANR	5019163	IfStatement	if ( ( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE ) )		5019160	0					
ANR	5019164	Condition	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )	138:5:3429:3500	5019160	0	True				
ANR	5019165	OrExpression	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )		5019160	0		||			
ANR	5019166	EqualityExpression	vmgahp_mode == VMGAHP_TEST_MODE		5019160	0		==			
ANR	5019167	Identifier	vmgahp_mode		5019160	0					
ANR	5019168	Identifier	VMGAHP_TEST_MODE		5019160	1					
ANR	5019169	EqualityExpression	vmgahp_mode == VMGAHP_KILL_MODE		5019160	1		==			
ANR	5019170	Identifier	vmgahp_mode		5019160	0					
ANR	5019171	Identifier	VMGAHP_KILL_MODE		5019160	1					
ANR	5019172	CompoundStatement		3:37:80:80	5019160	1					
ANR	5019173	ReturnStatement	return ;	140:2:3507:3513	5019160	0	True				
ANR	5019174	IdentifierDeclStatement	int stdin_pipe = - 1 ;	144:1:3551:3570	5019160	1	True				
ANR	5019175	IdentifierDecl	stdin_pipe = - 1		5019160	0					
ANR	5019176	IdentifierDeclType	int		5019160	0					
ANR	5019177	Identifier	stdin_pipe		5019160	1					
ANR	5019178	AssignmentExpression	stdin_pipe = - 1		5019160	2		=			
ANR	5019179	Identifier	stdin_pipe		5019160	0					
ANR	5019180	UnaryOperationExpression	- 1		5019160	1					
ANR	5019181	UnaryOperator	-		5019160	0					
ANR	5019182	PrimaryExpression	1		5019160	1					
ANR	5019183	IfStatement	if ( daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL )		5019160	2					
ANR	5019184	Condition	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL	152:6:3840:3905	5019160	0	True				
ANR	5019185	EqualityExpression	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) ) == NULL		5019160	0		==			
ANR	5019186	CallExpression	daemonCore -> InfoCommandSinfulString ( daemonCore -> getppid ( ) )		5019160	0					
ANR	5019187	Callee	daemonCore -> InfoCommandSinfulString		5019160	0					
ANR	5019188	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		5019160	0					
ANR	5019189	Identifier	daemonCore		5019160	0					
ANR	5019190	Identifier	InfoCommandSinfulString		5019160	1					
ANR	5019191	ArgumentList	daemonCore -> getppid ( )		5019160	1					
ANR	5019192	Argument	daemonCore -> getppid ( )		5019160	0					
ANR	5019193	CallExpression	daemonCore -> getppid ( )		5019160	0					
ANR	5019194	Callee	daemonCore -> getppid		5019160	0					
ANR	5019195	PtrMemberAccess	daemonCore -> getppid		5019160	0					
ANR	5019196	Identifier	daemonCore		5019160	0					
ANR	5019197	Identifier	getppid		5019160	1					
ANR	5019198	ArgumentList			5019160	1					
ANR	5019199	Identifier	NULL		5019160	1					
ANR	5019200	CompoundStatement		27:2:770:1251	5019160	1					
ANR	5019201	Statement	vmprintf	154:2:3913:3920	5019160	0	True				
ANR	5019202	Statement	(	154:10:3921:3921	5019160	1	True				
ANR	5019203	Statement	D_ALWAYS	154:11:3922:3929	5019160	2	True				
ANR	5019204	Statement	","	154:19:3930:3930	5019160	3	True				
ANR	5019205	Statement	"""parent is not DaemonCore: """	154:21:3932:3959	5019160	4	True				
ANR	5019206	Statement	"""creating a forwarding thread\\n"""	155:4:3965:3996	5019160	5	True				
ANR	5019207	Statement	)	155:36:3997:3997	5019160	6	True				
ANR	5019208	ExpressionStatement		155:37:3998:3998	5019160	7	True				
ANR	5019209	IdentifierDeclStatement	int pipe_ends [ 2 ] ;	157:2:4003:4019	5019160	8	True				
ANR	5019210	IdentifierDecl	pipe_ends [ 2 ]		5019160	0					
ANR	5019211	IdentifierDeclType	int [ 2 ]		5019160	0					
ANR	5019212	Identifier	pipe_ends		5019160	1					
ANR	5019213	PrimaryExpression	2		5019160	2					
ANR	5019214	IfStatement	"if ( daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE )"		5019160	9					
ANR	5019215	Condition	"daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE"	158:6:4027:4075	5019160	0	True				
ANR	5019216	EqualityExpression	"daemonCore -> Create_Pipe ( pipe_ends , true ) == FALSE"		5019160	0		==			
ANR	5019217	CallExpression	"daemonCore -> Create_Pipe ( pipe_ends , true )"		5019160	0					
ANR	5019218	Callee	daemonCore -> Create_Pipe		5019160	0					
ANR	5019219	PtrMemberAccess	daemonCore -> Create_Pipe		5019160	0					
ANR	5019220	Identifier	daemonCore		5019160	0					
ANR	5019221	Identifier	Create_Pipe		5019160	1					
ANR	5019222	ArgumentList	pipe_ends		5019160	1					
ANR	5019223	Argument	pipe_ends		5019160	0					
ANR	5019224	Identifier	pipe_ends		5019160	0					
ANR	5019225	Argument	true		5019160	1					
ANR	5019226	Identifier	true		5019160	0					
ANR	5019227	Identifier	FALSE		5019160	1					
ANR	5019228	CompoundStatement		22:57:655:655	5019160	1					
ANR	5019229	ExpressionStatement	"vmprintf ( D_ALWAYS , ""failed to create forwarding pipe"" )"	159:3:4083:4136	5019160	0	True				
ANR	5019230	CallExpression	"vmprintf ( D_ALWAYS , ""failed to create forwarding pipe"" )"		5019160	0					
ANR	5019231	Callee	vmprintf		5019160	0					
ANR	5019232	Identifier	vmprintf		5019160	0					
ANR	5019233	ArgumentList	D_ALWAYS		5019160	1					
ANR	5019234	Argument	D_ALWAYS		5019160	0					
ANR	5019235	Identifier	D_ALWAYS		5019160	0					
ANR	5019236	Argument	"""failed to create forwarding pipe"""		5019160	1					
ANR	5019237	PrimaryExpression	"""failed to create forwarding pipe"""		5019160	0					
ANR	5019238	ExpressionStatement	DC_Exit ( 1 )	160:3:4141:4151	5019160	1	True				
ANR	5019239	CallExpression	DC_Exit ( 1 )		5019160	0					
ANR	5019240	Callee	DC_Exit		5019160	0					
ANR	5019241	Identifier	DC_Exit		5019160	0					
ANR	5019242	ArgumentList	1		5019160	1					
ANR	5019243	Argument	1		5019160	0					
ANR	5019244	PrimaryExpression	1		5019160	0					
ANR	5019245	ExpressionStatement	forwarding_pipe = pipe_ends [ 1 ]	162:2:4159:4189	5019160	10	True				
ANR	5019246	AssignmentExpression	forwarding_pipe = pipe_ends [ 1 ]		5019160	0		=			
ANR	5019247	Identifier	forwarding_pipe		5019160	0					
ANR	5019248	ArrayIndexing	pipe_ends [ 1 ]		5019160	1					
ANR	5019249	Identifier	pipe_ends		5019160	0					
ANR	5019250	PrimaryExpression	1		5019160	1					
ANR	5019251	IdentifierDeclStatement	"HANDLE thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL ) ;"	163:2:4193:4674	5019160	11	True				
ANR	5019252	IdentifierDecl	"thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5019160	0					
ANR	5019253	IdentifierDeclType	HANDLE		5019160	0					
ANR	5019254	Identifier	thread_handle		5019160	1					
ANR	5019255	AssignmentExpression	"thread_handle = ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5019160	2		=			
ANR	5019256	Identifier	thread_handle		5019160	0					
ANR	5019257	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5019160	1					
ANR	5019258	CastTarget	HANDLE		5019160	0					
ANR	5019259	CallExpression	"_beginthreadex ( NULL , 0 , pipe_forward_thread , NULL , 0 , NULL )"		5019160	1					
ANR	5019260	Callee	_beginthreadex		5019160	0					
ANR	5019261	Identifier	_beginthreadex		5019160	0					
ANR	5019262	ArgumentList	NULL		5019160	1					
ANR	5019263	Argument	NULL		5019160	0					
ANR	5019264	Identifier	NULL		5019160	0					
ANR	5019265	Argument	0		5019160	1					
ANR	5019266	PrimaryExpression	0		5019160	0					
ANR	5019267	Argument	pipe_forward_thread		5019160	2					
ANR	5019268	Identifier	pipe_forward_thread		5019160	0					
ANR	5019269	Argument	NULL		5019160	3					
ANR	5019270	Identifier	NULL		5019160	0					
ANR	5019271	Argument	0		5019160	4					
ANR	5019272	PrimaryExpression	0		5019160	0					
ANR	5019273	Argument	NULL		5019160	5					
ANR	5019274	Identifier	NULL		5019160	0					
ANR	5019275	IfStatement	if ( thread_handle == NULL )		5019160	12					
ANR	5019276	Condition	thread_handle == NULL	169:6:4726:4746	5019160	0	True				
ANR	5019277	EqualityExpression	thread_handle == NULL		5019160	0		==			
ANR	5019278	Identifier	thread_handle		5019160	0					
ANR	5019279	Identifier	NULL		5019160	1					
ANR	5019280	CompoundStatement		33:29:1326:1326	5019160	1					
ANR	5019281	ExpressionStatement	"vmprintf ( D_ALWAYS , ""failed to create forwarding thread"" )"	170:3:4754:4809	5019160	0	True				
ANR	5019282	CallExpression	"vmprintf ( D_ALWAYS , ""failed to create forwarding thread"" )"		5019160	0					
ANR	5019283	Callee	vmprintf		5019160	0					
ANR	5019284	Identifier	vmprintf		5019160	0					
ANR	5019285	ArgumentList	D_ALWAYS		5019160	1					
ANR	5019286	Argument	D_ALWAYS		5019160	0					
ANR	5019287	Identifier	D_ALWAYS		5019160	0					
ANR	5019288	Argument	"""failed to create forwarding thread"""		5019160	1					
ANR	5019289	PrimaryExpression	"""failed to create forwarding thread"""		5019160	0					
ANR	5019290	ExpressionStatement	DC_Exit ( 1 )	171:3:4814:4824	5019160	1	True				
ANR	5019291	CallExpression	DC_Exit ( 1 )		5019160	0					
ANR	5019292	Callee	DC_Exit		5019160	0					
ANR	5019293	Identifier	DC_Exit		5019160	0					
ANR	5019294	ArgumentList	1		5019160	1					
ANR	5019295	Argument	1		5019160	0					
ANR	5019296	PrimaryExpression	1		5019160	0					
ANR	5019297	ExpressionStatement	CloseHandle ( thread_handle )	173:2:4832:4858	5019160	13	True				
ANR	5019298	CallExpression	CloseHandle ( thread_handle )		5019160	0					
ANR	5019299	Callee	CloseHandle		5019160	0					
ANR	5019300	Identifier	CloseHandle		5019160	0					
ANR	5019301	ArgumentList	thread_handle		5019160	1					
ANR	5019302	Argument	thread_handle		5019160	0					
ANR	5019303	Identifier	thread_handle		5019160	0					
ANR	5019304	ExpressionStatement	stdin_pipe = pipe_ends [ 0 ]	174:2:4862:4887	5019160	14	True				
ANR	5019305	AssignmentExpression	stdin_pipe = pipe_ends [ 0 ]		5019160	0		=			
ANR	5019306	Identifier	stdin_pipe		5019160	0					
ANR	5019307	ArrayIndexing	pipe_ends [ 0 ]		5019160	1					
ANR	5019308	Identifier	pipe_ends		5019160	0					
ANR	5019309	PrimaryExpression	0		5019160	1					
ANR	5019310	IfStatement	if ( stdin_pipe == - 1 )		5019160	3					
ANR	5019311	Condition	stdin_pipe == - 1	178:5:4905:4920	5019160	0	True				
ANR	5019312	EqualityExpression	stdin_pipe == - 1		5019160	0		==			
ANR	5019313	Identifier	stdin_pipe		5019160	0					
ANR	5019314	UnaryOperationExpression	- 1		5019160	1					
ANR	5019315	UnaryOperator	-		5019160	0					
ANR	5019316	PrimaryExpression	1		5019160	1					
ANR	5019317	CompoundStatement		42:24:1501:1501	5019160	1					
ANR	5019318	ExpressionStatement	"stdin_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"	179:2:4928:5041	5019160	0	True				
ANR	5019319	AssignmentExpression	"stdin_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"		5019160	0		=			
ANR	5019320	Identifier	stdin_pipe		5019160	0					
ANR	5019321	CallExpression	"daemonCore -> Inherit_Pipe ( fileno ( stdin ) , false , true , false )"		5019160	1					
ANR	5019322	Callee	daemonCore -> Inherit_Pipe		5019160	0					
ANR	5019323	PtrMemberAccess	daemonCore -> Inherit_Pipe		5019160	0					
ANR	5019324	Identifier	daemonCore		5019160	0					
ANR	5019325	Identifier	Inherit_Pipe		5019160	1					
ANR	5019326	ArgumentList	fileno ( stdin )		5019160	1					
ANR	5019327	Argument	fileno ( stdin )		5019160	0					
ANR	5019328	CallExpression	fileno ( stdin )		5019160	0					
ANR	5019329	Callee	fileno		5019160	0					
ANR	5019330	Identifier	fileno		5019160	0					
ANR	5019331	ArgumentList	stdin		5019160	1					
ANR	5019332	Argument	stdin		5019160	0					
ANR	5019333	Identifier	stdin		5019160	0					
ANR	5019334	Argument	false		5019160	1					
ANR	5019335	Identifier	false		5019160	0					
ANR	5019336	Argument	true		5019160	2					
ANR	5019337	Identifier	true		5019160	0					
ANR	5019338	Argument	false		5019160	3					
ANR	5019339	Identifier	false		5019160	0					
ANR	5019340	IfStatement	if ( stdin_pipe == - 1 )		5019160	4					
ANR	5019341	Condition	stdin_pipe == - 1	185:5:5064:5079	5019160	0	True				
ANR	5019342	EqualityExpression	stdin_pipe == - 1		5019160	0		==			
ANR	5019343	Identifier	stdin_pipe		5019160	0					
ANR	5019344	UnaryOperationExpression	- 1		5019160	1					
ANR	5019345	UnaryOperator	-		5019160	0					
ANR	5019346	PrimaryExpression	1		5019160	1					
ANR	5019347	CompoundStatement		49:24:1660:1660	5019160	1					
ANR	5019348	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Can't get stdin pipe"" )"	186:3:5088:5129	5019160	0	True				
ANR	5019349	CallExpression	"vmprintf ( D_ALWAYS , ""Can't get stdin pipe"" )"		5019160	0					
ANR	5019350	Callee	vmprintf		5019160	0					
ANR	5019351	Identifier	vmprintf		5019160	0					
ANR	5019352	ArgumentList	D_ALWAYS		5019160	1					
ANR	5019353	Argument	D_ALWAYS		5019160	0					
ANR	5019354	Identifier	D_ALWAYS		5019160	0					
ANR	5019355	Argument	"""Can't get stdin pipe"""		5019160	1					
ANR	5019356	PrimaryExpression	"""Can't get stdin pipe"""		5019160	0					
ANR	5019357	ExpressionStatement	DC_Exit ( 1 )	187:3:5134:5144	5019160	1	True				
ANR	5019358	CallExpression	DC_Exit ( 1 )		5019160	0					
ANR	5019359	Callee	DC_Exit		5019160	0					
ANR	5019360	Identifier	DC_Exit		5019160	0					
ANR	5019361	ArgumentList	1		5019160	1					
ANR	5019362	Argument	1		5019160	0					
ANR	5019363	PrimaryExpression	1		5019160	0					
ANR	5019364	ExpressionStatement	m_request_buffer . setPipeEnd ( stdin_pipe )	190:1:5151:5190	5019160	5	True				
ANR	5019365	CallExpression	m_request_buffer . setPipeEnd ( stdin_pipe )		5019160	0					
ANR	5019366	Callee	m_request_buffer . setPipeEnd		5019160	0					
ANR	5019367	MemberAccess	m_request_buffer . setPipeEnd		5019160	0					
ANR	5019368	Identifier	m_request_buffer		5019160	0					
ANR	5019369	Identifier	setPipeEnd		5019160	1					
ANR	5019370	ArgumentList	stdin_pipe		5019160	1					
ANR	5019371	Argument	stdin_pipe		5019160	0					
ANR	5019372	Identifier	stdin_pipe		5019160	0					
ANR	5019373	ExpressionStatement	"( void ) daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"	191:1:5193:5364	5019160	6	True				
ANR	5019374	CastExpression	"( void ) daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"		5019160	0					
ANR	5019375	CastTarget	void		5019160	0					
ANR	5019376	CallExpression	"daemonCore -> Register_Pipe ( m_request_buffer . getPipeEnd ( ) , ""stdin_pipe"" , static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand ) , ""VMGahp::waitForCommand"" , this )"		5019160	1					
ANR	5019377	Callee	daemonCore -> Register_Pipe		5019160	0					
ANR	5019378	PtrMemberAccess	daemonCore -> Register_Pipe		5019160	0					
ANR	5019379	Identifier	daemonCore		5019160	0					
ANR	5019380	Identifier	Register_Pipe		5019160	1					
ANR	5019381	ArgumentList	m_request_buffer . getPipeEnd ( )		5019160	1					
ANR	5019382	Argument	m_request_buffer . getPipeEnd ( )		5019160	0					
ANR	5019383	CallExpression	m_request_buffer . getPipeEnd ( )		5019160	0					
ANR	5019384	Callee	m_request_buffer . getPipeEnd		5019160	0					
ANR	5019385	MemberAccess	m_request_buffer . getPipeEnd		5019160	0					
ANR	5019386	Identifier	m_request_buffer		5019160	0					
ANR	5019387	Identifier	getPipeEnd		5019160	1					
ANR	5019388	ArgumentList			5019160	1					
ANR	5019389	Argument	"""stdin_pipe"""		5019160	1					
ANR	5019390	PrimaryExpression	"""stdin_pipe"""		5019160	0					
ANR	5019391	Argument	static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand )		5019160	2					
ANR	5019392	RelationalExpression	static_cast < PipeHandlercpp > ( & VMGahp :: waitForCommand )		5019160	0		<			
ANR	5019393	Identifier	static_cast		5019160	0					
ANR	5019394	RelationalExpression	PipeHandlercpp > ( & VMGahp :: waitForCommand )		5019160	1		>			
ANR	5019395	Identifier	PipeHandlercpp		5019160	0					
ANR	5019396	UnaryOperationExpression	& VMGahp :: waitForCommand		5019160	1					
ANR	5019397	UnaryOperator	&		5019160	0					
ANR	5019398	Identifier	VMGahp :: waitForCommand		5019160	1					
ANR	5019399	Argument	"""VMGahp::waitForCommand"""		5019160	3					
ANR	5019400	PrimaryExpression	"""VMGahp::waitForCommand"""		5019160	0					
ANR	5019401	Argument	this		5019160	4					
ANR	5019402	Identifier	this		5019160	0					
ANR	5019403	ReturnType	void		5019160	1					
ANR	5019404	Identifier	VMGahp :: startUp		5019160	2					
ANR	5019405	ParameterList			5019160	3					
ANR	5019406	CFGEntryNode	ENTRY		5019160		True				
ANR	5019407	CFGExitNode	EXIT		5019160		True				
ANR	5019408	Symbol	stdin		5019160						
ANR	5019409	Symbol	m_request_buffer . getPipeEnd		5019160						
ANR	5019410	Symbol	_beginthreadex		5019160						
ANR	5019411	Symbol	thread_handle		5019160						
ANR	5019412	Symbol	stdin_pipe		5019160						
ANR	5019413	Symbol	* pipe_ends		5019160						
ANR	5019414	Symbol	PipeHandlercpp		5019160						
ANR	5019415	Symbol	vmgahp_mode		5019160						
ANR	5019416	Symbol	daemonCore		5019160						
ANR	5019417	Symbol	VMGAHP_KILL_MODE		5019160						
ANR	5019418	Symbol	pipe_ends		5019160						
ANR	5019419	Symbol	daemonCore -> InfoCommandSinfulString		5019160						
ANR	5019420	Symbol	pipe_forward_thread		5019160						
ANR	5019421	Symbol	NULL		5019160						
ANR	5019422	Symbol	forwarding_pipe		5019160						
ANR	5019423	Symbol	D_ALWAYS		5019160						
ANR	5019424	Symbol	false		5019160						
ANR	5019425	Symbol	this		5019160						
ANR	5019426	Symbol	daemonCore -> Inherit_Pipe		5019160						
ANR	5019427	Symbol	& VMGahp :: waitForCommand		5019160						
ANR	5019428	Symbol	static_cast		5019160						
ANR	5019429	Symbol	daemonCore -> getppid		5019160						
ANR	5019430	Symbol	fileno		5019160						
ANR	5019431	Symbol	* daemonCore		5019160						
ANR	5019432	Symbol	true		5019160						
ANR	5019433	Symbol	daemonCore -> Create_Pipe		5019160						
ANR	5019434	Symbol	FALSE		5019160						
ANR	5019435	Symbol	m_request_buffer		5019160						
ANR	5019436	Symbol	VMGAHP_TEST_MODE		5019160						
ANR	5019437	Function	VMGahp :: cleanUp	197:0:5369:6314							
ANR	5019438	FunctionDef	VMGahp :: cleanUp ()		5019437	0					
ANR	5019439	CompoundStatement		199:0:5392:6314	5019437	0					
ANR	5019440	Statement	static	200:1:5395:5400	5019437	0	True				
ANR	5019441	IdentifierDeclStatement	bool is_called = false ;	200:8:5402:5424	5019437	1	True				
ANR	5019442	IdentifierDecl	is_called = false		5019437	0					
ANR	5019443	IdentifierDeclType	bool		5019437	0					
ANR	5019444	Identifier	is_called		5019437	1					
ANR	5019445	AssignmentExpression	is_called = false		5019437	2		=			
ANR	5019446	Identifier	false		5019437	0					
ANR	5019447	Identifier	false		5019437	1					
ANR	5019448	IfStatement	if ( is_called )		5019437	2					
ANR	5019449	Condition	is_called	202:5:5432:5440	5019437	0	True				
ANR	5019450	Identifier	is_called		5019437	0					
ANR	5019451	CompoundStatement		4:17:51:51	5019437	1					
ANR	5019452	ReturnStatement	return ;	203:2:5448:5454	5019437	0	True				
ANR	5019453	ExpressionStatement	is_called = true	205:1:5460:5476	5019437	3	True				
ANR	5019454	AssignmentExpression	is_called = true		5019437	0		=			
ANR	5019455	Identifier	is_called		5019437	0					
ANR	5019456	Identifier	true		5019437	1					
ANR	5019457	IdentifierDeclStatement	int currentkey = 0 ;	208:1:5496:5514	5019437	4	True				
ANR	5019458	IdentifierDecl	currentkey = 0		5019437	0					
ANR	5019459	IdentifierDeclType	int		5019437	0					
ANR	5019460	Identifier	currentkey		5019437	1					
ANR	5019461	AssignmentExpression	currentkey = 0		5019437	2		=			
ANR	5019462	Identifier	currentkey		5019437	0					
ANR	5019463	PrimaryExpression	0		5019437	1					
ANR	5019464	IdentifierDeclStatement	VMRequest * req = NULL ;	209:1:5517:5538	5019437	5	True				
ANR	5019465	IdentifierDecl	* req = NULL		5019437	0					
ANR	5019466	IdentifierDeclType	VMRequest *		5019437	0					
ANR	5019467	Identifier	req		5019437	1					
ANR	5019468	AssignmentExpression	* req = NULL		5019437	2		=			
ANR	5019469	Identifier	NULL		5019437	0					
ANR	5019470	Identifier	NULL		5019437	1					
ANR	5019471	ExpressionStatement	m_pending_req_table . startIterations ( )	210:1:5541:5578	5019437	6	True				
ANR	5019472	CallExpression	m_pending_req_table . startIterations ( )		5019437	0					
ANR	5019473	Callee	m_pending_req_table . startIterations		5019437	0					
ANR	5019474	MemberAccess	m_pending_req_table . startIterations		5019437	0					
ANR	5019475	Identifier	m_pending_req_table		5019437	0					
ANR	5019476	Identifier	startIterations		5019437	1					
ANR	5019477	ArgumentList			5019437	1					
ANR	5019478	WhileStatement	"while ( m_pending_req_table . iterate ( currentkey , req ) != 0 )"		5019437	7					
ANR	5019479	Condition	"m_pending_req_table . iterate ( currentkey , req ) != 0"	211:8:5588:5636	5019437	0	True				
ANR	5019480	EqualityExpression	"m_pending_req_table . iterate ( currentkey , req ) != 0"		5019437	0		!=			
ANR	5019481	CallExpression	"m_pending_req_table . iterate ( currentkey , req )"		5019437	0					
ANR	5019482	Callee	m_pending_req_table . iterate		5019437	0					
ANR	5019483	MemberAccess	m_pending_req_table . iterate		5019437	0					
ANR	5019484	Identifier	m_pending_req_table		5019437	0					
ANR	5019485	Identifier	iterate		5019437	1					
ANR	5019486	ArgumentList	currentkey		5019437	1					
ANR	5019487	Argument	currentkey		5019437	0					
ANR	5019488	Identifier	currentkey		5019437	0					
ANR	5019489	Argument	req		5019437	1					
ANR	5019490	Identifier	req		5019437	0					
ANR	5019491	PrimaryExpression	0		5019437	1					
ANR	5019492	CompoundStatement		13:60:247:247	5019437	1					
ANR	5019493	IfStatement	if ( req )		5019437	0					
ANR	5019494	Condition	req	212:6:5648:5650	5019437	0	True				
ANR	5019495	Identifier	req		5019437	0					
ANR	5019496	CompoundStatement		14:12:261:261	5019437	1					
ANR	5019497	Statement	delete	213:3:5659:5664	5019437	0	True				
ANR	5019498	ExpressionStatement	req	213:10:5666:5669	5019437	1	True				
ANR	5019499	Identifier	req		5019437	0					
ANR	5019500	ExpressionStatement	m_pending_req_table . clear ( )	216:1:5679:5706	5019437	8	True				
ANR	5019501	CallExpression	m_pending_req_table . clear ( )		5019437	0					
ANR	5019502	Callee	m_pending_req_table . clear		5019437	0					
ANR	5019503	MemberAccess	m_pending_req_table . clear		5019437	0					
ANR	5019504	Identifier	m_pending_req_table		5019437	0					
ANR	5019505	Identifier	clear		5019437	1					
ANR	5019506	ArgumentList			5019437	1					
ANR	5019507	ExpressionStatement	m_result_list . clearAll ( )	218:1:5710:5734	5019437	9	True				
ANR	5019508	CallExpression	m_result_list . clearAll ( )		5019437	0					
ANR	5019509	Callee	m_result_list . clearAll		5019437	0					
ANR	5019510	MemberAccess	m_result_list . clearAll		5019437	0					
ANR	5019511	Identifier	m_result_list		5019437	0					
ANR	5019512	Identifier	clearAll		5019437	1					
ANR	5019513	ArgumentList			5019437	1					
ANR	5019514	IdentifierDeclStatement	VMType * vm = NULL ;	221:1:5753:5770	5019437	10	True				
ANR	5019515	IdentifierDecl	* vm = NULL		5019437	0					
ANR	5019516	IdentifierDeclType	VMType *		5019437	0					
ANR	5019517	Identifier	vm		5019437	1					
ANR	5019518	AssignmentExpression	* vm = NULL		5019437	2		=			
ANR	5019519	Identifier	NULL		5019437	0					
ANR	5019520	Identifier	NULL		5019437	1					
ANR	5019521	ExpressionStatement	m_vm_list . Rewind ( )	222:1:5773:5791	5019437	11	True				
ANR	5019522	CallExpression	m_vm_list . Rewind ( )		5019437	0					
ANR	5019523	Callee	m_vm_list . Rewind		5019437	0					
ANR	5019524	MemberAccess	m_vm_list . Rewind		5019437	0					
ANR	5019525	Identifier	m_vm_list		5019437	0					
ANR	5019526	Identifier	Rewind		5019437	1					
ANR	5019527	ArgumentList			5019437	1					
ANR	5019528	WhileStatement	while ( m_vm_list . Next ( vm ) )		5019437	12					
ANR	5019529	Condition	m_vm_list . Next ( vm )	223:8:5801:5818	5019437	0	True				
ANR	5019530	CallExpression	m_vm_list . Next ( vm )		5019437	0					
ANR	5019531	Callee	m_vm_list . Next		5019437	0					
ANR	5019532	MemberAccess	m_vm_list . Next		5019437	0					
ANR	5019533	Identifier	m_vm_list		5019437	0					
ANR	5019534	Identifier	Next		5019437	1					
ANR	5019535	ArgumentList	vm		5019437	1					
ANR	5019536	Argument	vm		5019437	0					
ANR	5019537	Identifier	vm		5019437	0					
ANR	5019538	CompoundStatement		25:29:429:429	5019437	1					
ANR	5019539	ExpressionStatement	m_vm_list . DeleteCurrent ( )	224:2:5826:5851	5019437	0	True				
ANR	5019540	CallExpression	m_vm_list . DeleteCurrent ( )		5019437	0					
ANR	5019541	Callee	m_vm_list . DeleteCurrent		5019437	0					
ANR	5019542	MemberAccess	m_vm_list . DeleteCurrent		5019437	0					
ANR	5019543	Identifier	m_vm_list		5019437	0					
ANR	5019544	Identifier	DeleteCurrent		5019437	1					
ANR	5019545	ArgumentList			5019437	1					
ANR	5019546	Statement	delete	225:2:5855:5860	5019437	1	True				
ANR	5019547	ExpressionStatement	vm	225:9:5862:5864	5019437	2	True				
ANR	5019548	Identifier	vm		5019437	0					
ANR	5019549	IfStatement	if ( vmgahp_stderr_tid != - 1 )		5019437	13					
ANR	5019550	Condition	vmgahp_stderr_tid != - 1	229:5:5904:5926	5019437	0	True				
ANR	5019551	EqualityExpression	vmgahp_stderr_tid != - 1		5019437	0		!=			
ANR	5019552	Identifier	vmgahp_stderr_tid		5019437	0					
ANR	5019553	UnaryOperationExpression	- 1		5019437	1					
ANR	5019554	UnaryOperator	-		5019437	0					
ANR	5019555	PrimaryExpression	1		5019437	1					
ANR	5019556	CompoundStatement		31:31:537:537	5019437	1					
ANR	5019557	IfStatement	if ( daemonCore )		5019437	0					
ANR	5019558	Condition	daemonCore	230:6:5938:5947	5019437	0	True				
ANR	5019559	Identifier	daemonCore		5019437	0					
ANR	5019560	CompoundStatement		32:19:558:558	5019437	1					
ANR	5019561	ExpressionStatement	daemonCore -> Cancel_Timer ( vmgahp_stderr_tid )	231:3:5956:5999	5019437	0	True				
ANR	5019562	CallExpression	daemonCore -> Cancel_Timer ( vmgahp_stderr_tid )		5019437	0					
ANR	5019563	Callee	daemonCore -> Cancel_Timer		5019437	0					
ANR	5019564	PtrMemberAccess	daemonCore -> Cancel_Timer		5019437	0					
ANR	5019565	Identifier	daemonCore		5019437	0					
ANR	5019566	Identifier	Cancel_Timer		5019437	1					
ANR	5019567	ArgumentList	vmgahp_stderr_tid		5019437	1					
ANR	5019568	Argument	vmgahp_stderr_tid		5019437	0					
ANR	5019569	Identifier	vmgahp_stderr_tid		5019437	0					
ANR	5019570	ExpressionStatement	vmgahp_stderr_tid = - 1	233:2:6007:6029	5019437	1	True				
ANR	5019571	AssignmentExpression	vmgahp_stderr_tid = - 1		5019437	0		=			
ANR	5019572	Identifier	vmgahp_stderr_tid		5019437	0					
ANR	5019573	UnaryOperationExpression	- 1		5019437	1					
ANR	5019574	UnaryOperator	-		5019437	0					
ANR	5019575	PrimaryExpression	1		5019437	1					
ANR	5019576	ExpressionStatement	m_request_buffer . setPipeEnd ( - 1 )	236:1:6036:6067	5019437	14	True				
ANR	5019577	CallExpression	m_request_buffer . setPipeEnd ( - 1 )		5019437	0					
ANR	5019578	Callee	m_request_buffer . setPipeEnd		5019437	0					
ANR	5019579	MemberAccess	m_request_buffer . setPipeEnd		5019437	0					
ANR	5019580	Identifier	m_request_buffer		5019437	0					
ANR	5019581	Identifier	setPipeEnd		5019437	1					
ANR	5019582	ArgumentList	- 1		5019437	1					
ANR	5019583	Argument	- 1		5019437	0					
ANR	5019584	UnaryOperationExpression	- 1		5019437	0					
ANR	5019585	UnaryOperator	-		5019437	0					
ANR	5019586	PrimaryExpression	1		5019437	1					
ANR	5019587	ExpressionStatement	vmgahp_stderr_pipe = - 1	237:1:6070:6093	5019437	15	True				
ANR	5019588	AssignmentExpression	vmgahp_stderr_pipe = - 1		5019437	0		=			
ANR	5019589	Identifier	vmgahp_stderr_pipe		5019437	0					
ANR	5019590	UnaryOperationExpression	- 1		5019437	1					
ANR	5019591	UnaryOperator	-		5019437	0					
ANR	5019592	PrimaryExpression	1		5019437	1					
ANR	5019593	ExpressionStatement	vmgahp_stderr_buffer . setPipeEnd ( - 1 )	238:1:6096:6131	5019437	16	True				
ANR	5019594	CallExpression	vmgahp_stderr_buffer . setPipeEnd ( - 1 )		5019437	0					
ANR	5019595	Callee	vmgahp_stderr_buffer . setPipeEnd		5019437	0					
ANR	5019596	MemberAccess	vmgahp_stderr_buffer . setPipeEnd		5019437	0					
ANR	5019597	Identifier	vmgahp_stderr_buffer		5019437	0					
ANR	5019598	Identifier	setPipeEnd		5019437	1					
ANR	5019599	ArgumentList	- 1		5019437	1					
ANR	5019600	Argument	- 1		5019437	0					
ANR	5019601	UnaryOperationExpression	- 1		5019437	0					
ANR	5019602	UnaryOperator	-		5019437	0					
ANR	5019603	PrimaryExpression	1		5019437	1					
ANR	5019604	ExpressionStatement	killAllProcess ( )	241:1:6190:6206	5019437	17	True				
ANR	5019605	CallExpression	killAllProcess ( )		5019437	0					
ANR	5019606	Callee	killAllProcess		5019437	0					
ANR	5019607	Identifier	killAllProcess		5019437	0					
ANR	5019608	ArgumentList			5019437	1					
ANR	5019609	IfStatement	if ( m_need_output_for_quit )		5019437	18					
ANR	5019610	Condition	m_need_output_for_quit	243:5:6214:6235	5019437	0	True				
ANR	5019611	Identifier	m_need_output_for_quit		5019437	0					
ANR	5019612	CompoundStatement		45:30:846:846	5019437	1					
ANR	5019613	ExpressionStatement	returnOutputSuccess ( )	244:2:6243:6264	5019437	0	True				
ANR	5019614	CallExpression	returnOutputSuccess ( )		5019437	0					
ANR	5019615	Callee	returnOutputSuccess		5019437	0					
ANR	5019616	Identifier	returnOutputSuccess		5019437	0					
ANR	5019617	ArgumentList			5019437	1					
ANR	5019618	ExpressionStatement	sleep ( 2 )	245:2:6268:6276	5019437	1	True				
ANR	5019619	CallExpression	sleep ( 2 )		5019437	0					
ANR	5019620	Callee	sleep		5019437	0					
ANR	5019621	Identifier	sleep		5019437	0					
ANR	5019622	ArgumentList	2		5019437	1					
ANR	5019623	Argument	2		5019437	0					
ANR	5019624	PrimaryExpression	2		5019437	0					
ANR	5019625	ExpressionStatement	m_need_output_for_quit = false	247:1:6282:6312	5019437	19	True				
ANR	5019626	AssignmentExpression	m_need_output_for_quit = false		5019437	0		=			
ANR	5019627	Identifier	m_need_output_for_quit		5019437	0					
ANR	5019628	Identifier	false		5019437	1					
ANR	5019629	ReturnType	void		5019437	1					
ANR	5019630	Identifier	VMGahp :: cleanUp		5019437	2					
ANR	5019631	ParameterList			5019437	3					
ANR	5019632	CFGEntryNode	ENTRY		5019437		True				
ANR	5019633	CFGExitNode	EXIT		5019437		True				
ANR	5019634	Symbol	vmgahp_stderr_buffer		5019437						
ANR	5019635	Symbol	m_result_list		5019437						
ANR	5019636	Symbol	m_need_output_for_quit		5019437						
ANR	5019637	Symbol	NULL		5019437						
ANR	5019638	Symbol	false		5019437						
ANR	5019639	Symbol	vmgahp_stderr_tid		5019437						
ANR	5019640	Symbol	m_vm_list		5019437						
ANR	5019641	Symbol	is_called		5019437						
ANR	5019642	Symbol	currentkey		5019437						
ANR	5019643	Symbol	m_pending_req_table . iterate		5019437						
ANR	5019644	Symbol	vm		5019437						
ANR	5019645	Symbol	daemonCore		5019437						
ANR	5019646	Symbol	vmgahp_stderr_pipe		5019437						
ANR	5019647	Symbol	true		5019437						
ANR	5019648	Symbol	m_pending_req_table		5019437						
ANR	5019649	Symbol	m_vm_list . Next		5019437						
ANR	5019650	Symbol	m_request_buffer		5019437						
ANR	5019651	Symbol	req		5019437						
ANR	5019652	Function	VMGahp :: getNewVMId	250:0:6317:6385							
ANR	5019653	FunctionDef	VMGahp :: getNewVMId ()		5019652	0					
ANR	5019654	CompoundStatement		252:0:6346:6385	5019652	0					
ANR	5019655	ExpressionStatement	m_max_vm_id ++	253:1:6349:6362	5019652	0	True				
ANR	5019656	PostIncDecOperationExpression	m_max_vm_id ++		5019652	0					
ANR	5019657	Identifier	m_max_vm_id		5019652	0					
ANR	5019658	IncDec	++		5019652	1					
ANR	5019659	ReturnStatement	return m_max_vm_id ;	254:1:6365:6383	5019652	1	True				
ANR	5019660	Identifier	m_max_vm_id		5019652	0					
ANR	5019661	ReturnType	int		5019652	1					
ANR	5019662	Identifier	VMGahp :: getNewVMId		5019652	2					
ANR	5019663	ParameterList			5019652	3					
ANR	5019664	CFGEntryNode	ENTRY		5019652		True				
ANR	5019665	CFGExitNode	EXIT		5019652		True				
ANR	5019666	Symbol	m_max_vm_id		5019652						
ANR	5019667	Function	VMGahp :: numOfVM	257:0:6388:6445							
ANR	5019668	FunctionDef	VMGahp :: numOfVM ()		5019667	0					
ANR	5019669	CompoundStatement		259:0:6414:6445	5019667	0					
ANR	5019670	ReturnStatement	return m_vm_list . Number ( ) ;	260:2:6418:6443	5019667	0	True				
ANR	5019671	CallExpression	m_vm_list . Number ( )		5019667	0					
ANR	5019672	Callee	m_vm_list . Number		5019667	0					
ANR	5019673	MemberAccess	m_vm_list . Number		5019667	0					
ANR	5019674	Identifier	m_vm_list		5019667	0					
ANR	5019675	Identifier	Number		5019667	1					
ANR	5019676	ArgumentList			5019667	1					
ANR	5019677	ReturnType	int		5019667	1					
ANR	5019678	Identifier	VMGahp :: numOfVM		5019667	2					
ANR	5019679	ParameterList			5019667	3					
ANR	5019680	CFGEntryNode	ENTRY		5019667		True				
ANR	5019681	CFGExitNode	EXIT		5019667		True				
ANR	5019682	Symbol	m_vm_list . Number		5019667						
ANR	5019683	Symbol	m_vm_list		5019667						
ANR	5019684	Function	VMGahp :: numOfReq	263:0:6448:6528							
ANR	5019685	FunctionDef	VMGahp :: numOfReq ()		5019684	0					
ANR	5019686	CompoundStatement		265:0:6475:6528	5019684	0					
ANR	5019687	ReturnStatement	return numOfPendingReq ( ) + numOfReqWithResult ( ) ;	266:2:6479:6526	5019684	0	True				
ANR	5019688	AdditiveExpression	numOfPendingReq ( ) + numOfReqWithResult ( )		5019684	0		+			
ANR	5019689	CallExpression	numOfPendingReq ( )		5019684	0					
ANR	5019690	Callee	numOfPendingReq		5019684	0					
ANR	5019691	Identifier	numOfPendingReq		5019684	0					
ANR	5019692	ArgumentList			5019684	1					
ANR	5019693	CallExpression	numOfReqWithResult ( )		5019684	1					
ANR	5019694	Callee	numOfReqWithResult		5019684	0					
ANR	5019695	Identifier	numOfReqWithResult		5019684	0					
ANR	5019696	ArgumentList			5019684	1					
ANR	5019697	ReturnType	int		5019684	1					
ANR	5019698	Identifier	VMGahp :: numOfReq		5019684	2					
ANR	5019699	ParameterList			5019684	3					
ANR	5019700	CFGEntryNode	ENTRY		5019684		True				
ANR	5019701	CFGExitNode	EXIT		5019684		True				
ANR	5019702	Symbol	numOfReqWithResult		5019684						
ANR	5019703	Symbol	numOfPendingReq		5019684						
ANR	5019704	Function	VMGahp :: numOfPendingReq	269:0:6531:6614							
ANR	5019705	FunctionDef	VMGahp :: numOfPendingReq ()		5019704	0					
ANR	5019706	CompoundStatement		271:0:6565:6614	5019704	0					
ANR	5019707	ReturnStatement	return m_pending_req_table . getNumElements ( ) ;	272:2:6569:6612	5019704	0	True				
ANR	5019708	CallExpression	m_pending_req_table . getNumElements ( )		5019704	0					
ANR	5019709	Callee	m_pending_req_table . getNumElements		5019704	0					
ANR	5019710	MemberAccess	m_pending_req_table . getNumElements		5019704	0					
ANR	5019711	Identifier	m_pending_req_table		5019704	0					
ANR	5019712	Identifier	getNumElements		5019704	1					
ANR	5019713	ArgumentList			5019704	1					
ANR	5019714	ReturnType	int		5019704	1					
ANR	5019715	Identifier	VMGahp :: numOfPendingReq		5019704	2					
ANR	5019716	ParameterList			5019704	3					
ANR	5019717	CFGEntryNode	ENTRY		5019704		True				
ANR	5019718	CFGExitNode	EXIT		5019704		True				
ANR	5019719	Symbol	m_pending_req_table . getNumElements		5019704						
ANR	5019720	Symbol	m_pending_req_table		5019704						
ANR	5019721	Function	VMGahp :: numOfReqWithResult	275:0:6617:6689							
ANR	5019722	FunctionDef	VMGahp :: numOfReqWithResult ()		5019721	0					
ANR	5019723	CompoundStatement		277:0:6654:6689	5019721	0					
ANR	5019724	ReturnStatement	return m_result_list . number ( ) ;	278:2:6658:6687	5019721	0	True				
ANR	5019725	CallExpression	m_result_list . number ( )		5019721	0					
ANR	5019726	Callee	m_result_list . number		5019721	0					
ANR	5019727	MemberAccess	m_result_list . number		5019721	0					
ANR	5019728	Identifier	m_result_list		5019721	0					
ANR	5019729	Identifier	number		5019721	1					
ANR	5019730	ArgumentList			5019721	1					
ANR	5019731	ReturnType	int		5019721	1					
ANR	5019732	Identifier	VMGahp :: numOfReqWithResult		5019721	2					
ANR	5019733	ParameterList			5019721	3					
ANR	5019734	CFGEntryNode	ENTRY		5019721		True				
ANR	5019735	CFGExitNode	EXIT		5019721		True				
ANR	5019736	Symbol	m_result_list		5019721						
ANR	5019737	Symbol	m_result_list . number		5019721						
ANR	5019738	Function	VMGahp :: addNewRequest	281:0:6692:6909							
ANR	5019739	FunctionDef	VMGahp :: addNewRequest (const char * cmd)		5019738	0					
ANR	5019740	CompoundStatement		283:0:6743:6909	5019738	0					
ANR	5019741	IfStatement	if ( ! cmd )		5019738	0					
ANR	5019742	Condition	! cmd	284:4:6749:6752	5019738	0	True				
ANR	5019743	UnaryOperationExpression	! cmd		5019738	0					
ANR	5019744	UnaryOperator	!		5019738	0					
ANR	5019745	Identifier	cmd		5019738	1					
ANR	5019746	CompoundStatement		2:10:11:11	5019738	1					
ANR	5019747	ReturnStatement	return NULL ;	285:2:6759:6770	5019738	0	True				
ANR	5019748	Identifier	NULL		5019738	0					
ANR	5019749	IdentifierDeclStatement	VMRequest * new_req = new VMRequest ( cmd ) ;	287:1:6776:6815	5019738	1	True				
ANR	5019750	IdentifierDecl	* new_req = new VMRequest ( cmd )		5019738	0					
ANR	5019751	IdentifierDeclType	VMRequest *		5019738	0					
ANR	5019752	Identifier	new_req		5019738	1					
ANR	5019753	AssignmentExpression	* new_req = new VMRequest ( cmd )		5019738	2		=			
ANR	5019754	Identifier	cmd		5019738	0					
ANR	5019755	Identifier	cmd		5019738	1					
ANR	5019756	ExpressionStatement	ASSERT ( new_req )	288:1:6818:6833	5019738	2	True				
ANR	5019757	CallExpression	ASSERT ( new_req )		5019738	0					
ANR	5019758	Callee	ASSERT		5019738	0					
ANR	5019759	Identifier	ASSERT		5019738	0					
ANR	5019760	ArgumentList	new_req		5019738	1					
ANR	5019761	Argument	new_req		5019738	0					
ANR	5019762	Identifier	new_req		5019738	0					
ANR	5019763	ExpressionStatement	"m_pending_req_table . insert ( new_req -> m_reqid , new_req )"	290:1:6837:6890	5019738	3	True				
ANR	5019764	CallExpression	"m_pending_req_table . insert ( new_req -> m_reqid , new_req )"		5019738	0					
ANR	5019765	Callee	m_pending_req_table . insert		5019738	0					
ANR	5019766	MemberAccess	m_pending_req_table . insert		5019738	0					
ANR	5019767	Identifier	m_pending_req_table		5019738	0					
ANR	5019768	Identifier	insert		5019738	1					
ANR	5019769	ArgumentList	new_req -> m_reqid		5019738	1					
ANR	5019770	Argument	new_req -> m_reqid		5019738	0					
ANR	5019771	PtrMemberAccess	new_req -> m_reqid		5019738	0					
ANR	5019772	Identifier	new_req		5019738	0					
ANR	5019773	Identifier	m_reqid		5019738	1					
ANR	5019774	Argument	new_req		5019738	1					
ANR	5019775	Identifier	new_req		5019738	0					
ANR	5019776	ReturnStatement	return new_req ;	291:1:6893:6907	5019738	4	True				
ANR	5019777	Identifier	new_req		5019738	0					
ANR	5019778	ReturnType	VMRequest *		5019738	1					
ANR	5019779	Identifier	VMGahp :: addNewRequest		5019738	2					
ANR	5019780	ParameterList	const char * cmd		5019738	3					
ANR	5019781	Parameter	const char * cmd	282:22:6726:6740	5019738	0	True				
ANR	5019782	ParameterType	const char *		5019738	0					
ANR	5019783	Identifier	cmd		5019738	1					
ANR	5019784	CFGEntryNode	ENTRY		5019738		True				
ANR	5019785	CFGExitNode	EXIT		5019738		True				
ANR	5019786	Symbol	NULL		5019738						
ANR	5019787	Symbol	new_req -> m_reqid		5019738						
ANR	5019788	Symbol	m_pending_req_table		5019738						
ANR	5019789	Symbol	* new_req		5019738						
ANR	5019790	Symbol	cmd		5019738						
ANR	5019791	Symbol	new_req		5019738						
ANR	5019792	Function	VMGahp :: removePendingRequest	294:0:6912:7092							
ANR	5019793	FunctionDef	VMGahp :: removePendingRequest (int req_id)		5019792	0					
ANR	5019794	CompoundStatement		296:0:6958:7092	5019792	0					
ANR	5019795	IdentifierDeclStatement	VMRequest * req = findPendingRequest ( req_id ) ;	297:1:6961:7004	5019792	0	True				
ANR	5019796	IdentifierDecl	* req = findPendingRequest ( req_id )		5019792	0					
ANR	5019797	IdentifierDeclType	VMRequest *		5019792	0					
ANR	5019798	Identifier	req		5019792	1					
ANR	5019799	AssignmentExpression	* req = findPendingRequest ( req_id )		5019792	2		=			
ANR	5019800	Identifier	req		5019792	0					
ANR	5019801	CallExpression	findPendingRequest ( req_id )		5019792	1					
ANR	5019802	Callee	findPendingRequest		5019792	0					
ANR	5019803	Identifier	findPendingRequest		5019792	0					
ANR	5019804	ArgumentList	req_id		5019792	1					
ANR	5019805	Argument	req_id		5019792	0					
ANR	5019806	Identifier	req_id		5019792	0					
ANR	5019807	IfStatement	if ( req != NULL )		5019792	1					
ANR	5019808	Condition	req != NULL	298:5:7011:7021	5019792	0	True				
ANR	5019809	EqualityExpression	req != NULL		5019792	0		!=			
ANR	5019810	Identifier	req		5019792	0					
ANR	5019811	Identifier	NULL		5019792	1					
ANR	5019812	CompoundStatement		3:19:66:66	5019792	1					
ANR	5019813	ExpressionStatement	m_pending_req_table . remove ( req_id )	299:2:7029:7063	5019792	0	True				
ANR	5019814	CallExpression	m_pending_req_table . remove ( req_id )		5019792	0					
ANR	5019815	Callee	m_pending_req_table . remove		5019792	0					
ANR	5019816	MemberAccess	m_pending_req_table . remove		5019792	0					
ANR	5019817	Identifier	m_pending_req_table		5019792	0					
ANR	5019818	Identifier	remove		5019792	1					
ANR	5019819	ArgumentList	req_id		5019792	1					
ANR	5019820	Argument	req_id		5019792	0					
ANR	5019821	Identifier	req_id		5019792	0					
ANR	5019822	Statement	delete	300:2:7067:7072	5019792	1	True				
ANR	5019823	ExpressionStatement	req	300:9:7074:7077	5019792	2	True				
ANR	5019824	Identifier	req		5019792	0					
ANR	5019825	ReturnStatement	return ;	301:2:7081:7087	5019792	3	True				
ANR	5019826	ReturnType	void		5019792	1					
ANR	5019827	Identifier	VMGahp :: removePendingRequest		5019792	2					
ANR	5019828	ParameterList	int req_id		5019792	3					
ANR	5019829	Parameter	int req_id	295:29:6946:6955	5019792	0	True				
ANR	5019830	ParameterType	int		5019792	0					
ANR	5019831	Identifier	req_id		5019792	1					
ANR	5019832	CFGEntryNode	ENTRY		5019792		True				
ANR	5019833	CFGExitNode	EXIT		5019792		True				
ANR	5019834	Symbol	req_id		5019792						
ANR	5019835	Symbol	findPendingRequest		5019792						
ANR	5019836	Symbol	NULL		5019792						
ANR	5019837	Symbol	m_pending_req_table		5019792						
ANR	5019838	Symbol	req		5019792						
ANR	5019839	Function	VMGahp :: removePendingRequest	305:0:7095:7237							
ANR	5019840	FunctionDef	VMGahp :: removePendingRequest (VMRequest * req)		5019839	0					
ANR	5019841	CompoundStatement		307:0:7145:7237	5019839	0					
ANR	5019842	IfStatement	if ( ! req )		5019839	0					
ANR	5019843	Condition	! req	308:4:7151:7154	5019839	0	True				
ANR	5019844	UnaryOperationExpression	! req		5019839	0					
ANR	5019845	UnaryOperator	!		5019839	0					
ANR	5019846	Identifier	req		5019839	1					
ANR	5019847	CompoundStatement		2:10:11:11	5019839	1					
ANR	5019848	ReturnStatement	return ;	309:2:7161:7167	5019839	0	True				
ANR	5019849	ExpressionStatement	m_pending_req_table . remove ( req -> m_reqid )	311:1:7173:7213	5019839	1	True				
ANR	5019850	CallExpression	m_pending_req_table . remove ( req -> m_reqid )		5019839	0					
ANR	5019851	Callee	m_pending_req_table . remove		5019839	0					
ANR	5019852	MemberAccess	m_pending_req_table . remove		5019839	0					
ANR	5019853	Identifier	m_pending_req_table		5019839	0					
ANR	5019854	Identifier	remove		5019839	1					
ANR	5019855	ArgumentList	req -> m_reqid		5019839	1					
ANR	5019856	Argument	req -> m_reqid		5019839	0					
ANR	5019857	PtrMemberAccess	req -> m_reqid		5019839	0					
ANR	5019858	Identifier	req		5019839	0					
ANR	5019859	Identifier	m_reqid		5019839	1					
ANR	5019860	Statement	delete	312:1:7216:7221	5019839	2	True				
ANR	5019861	ExpressionStatement	req	312:8:7223:7226	5019839	3	True				
ANR	5019862	Identifier	req		5019839	0					
ANR	5019863	ReturnStatement	return ;	313:1:7229:7235	5019839	4	True				
ANR	5019864	ReturnType	void		5019839	1					
ANR	5019865	Identifier	VMGahp :: removePendingRequest		5019839	2					
ANR	5019866	ParameterList	VMRequest * req		5019839	3					
ANR	5019867	Parameter	VMRequest * req	306:29:7129:7142	5019839	0	True				
ANR	5019868	ParameterType	VMRequest *		5019839	0					
ANR	5019869	Identifier	req		5019839	1					
ANR	5019870	CFGEntryNode	ENTRY		5019839		True				
ANR	5019871	CFGExitNode	EXIT		5019839		True				
ANR	5019872	Symbol	m_pending_req_table		5019839						
ANR	5019873	Symbol	* req		5019839						
ANR	5019874	Symbol	req -> m_reqid		5019839						
ANR	5019875	Symbol	req		5019839						
ANR	5019876	Function	VMGahp :: movePendingReqToResultList	316:0:7240:7397							
ANR	5019877	FunctionDef	VMGahp :: movePendingReqToResultList (VMRequest * req)		5019876	0					
ANR	5019878	CompoundStatement		318:0:7296:7397	5019876	0					
ANR	5019879	IfStatement	if ( ! req )		5019876	0					
ANR	5019880	Condition	! req	319:4:7302:7305	5019876	0	True				
ANR	5019881	UnaryOperationExpression	! req		5019876	0					
ANR	5019882	UnaryOperator	!		5019876	0					
ANR	5019883	Identifier	req		5019876	1					
ANR	5019884	CompoundStatement		2:10:11:11	5019876	1					
ANR	5019885	ReturnStatement	return ;	320:2:7312:7318	5019876	0	True				
ANR	5019886	ExpressionStatement	m_result_list . append ( make_result_line ( req ) )	322:1:7324:7367	5019876	1	True				
ANR	5019887	CallExpression	m_result_list . append ( make_result_line ( req ) )		5019876	0					
ANR	5019888	Callee	m_result_list . append		5019876	0					
ANR	5019889	MemberAccess	m_result_list . append		5019876	0					
ANR	5019890	Identifier	m_result_list		5019876	0					
ANR	5019891	Identifier	append		5019876	1					
ANR	5019892	ArgumentList	make_result_line ( req )		5019876	1					
ANR	5019893	Argument	make_result_line ( req )		5019876	0					
ANR	5019894	CallExpression	make_result_line ( req )		5019876	0					
ANR	5019895	Callee	make_result_line		5019876	0					
ANR	5019896	Identifier	make_result_line		5019876	0					
ANR	5019897	ArgumentList	req		5019876	1					
ANR	5019898	Argument	req		5019876	0					
ANR	5019899	Identifier	req		5019876	0					
ANR	5019900	ExpressionStatement	removePendingRequest ( req )	323:1:7370:7395	5019876	2	True				
ANR	5019901	CallExpression	removePendingRequest ( req )		5019876	0					
ANR	5019902	Callee	removePendingRequest		5019876	0					
ANR	5019903	Identifier	removePendingRequest		5019876	0					
ANR	5019904	ArgumentList	req		5019876	1					
ANR	5019905	Argument	req		5019876	0					
ANR	5019906	Identifier	req		5019876	0					
ANR	5019907	ReturnType	void		5019876	1					
ANR	5019908	Identifier	VMGahp :: movePendingReqToResultList		5019876	2					
ANR	5019909	ParameterList	VMRequest * req		5019876	3					
ANR	5019910	Parameter	VMRequest * req	317:35:7280:7293	5019876	0	True				
ANR	5019911	ParameterType	VMRequest *		5019876	0					
ANR	5019912	Identifier	req		5019876	1					
ANR	5019913	CFGEntryNode	ENTRY		5019876		True				
ANR	5019914	CFGExitNode	EXIT		5019876		True				
ANR	5019915	Symbol	m_result_list		5019876						
ANR	5019916	Symbol	make_result_line		5019876						
ANR	5019917	Symbol	req		5019876						
ANR	5019918	Function	VMGahp :: printAllReqsWithResult	326:0:7400:7727							
ANR	5019919	FunctionDef	VMGahp :: printAllReqsWithResult ()		5019918	0					
ANR	5019920	CompoundStatement		328:0:7438:7727	5019918	0					
ANR	5019921	IdentifierDeclStatement	char * one_result = NULL ;	329:1:7441:7464	5019918	0	True				
ANR	5019922	IdentifierDecl	* one_result = NULL		5019918	0					
ANR	5019923	IdentifierDeclType	char *		5019918	0					
ANR	5019924	Identifier	one_result		5019918	1					
ANR	5019925	AssignmentExpression	* one_result = NULL		5019918	2		=			
ANR	5019926	Identifier	NULL		5019918	0					
ANR	5019927	Identifier	NULL		5019918	1					
ANR	5019928	IdentifierDeclStatement	MyString output ;	330:1:7467:7482	5019918	1	True				
ANR	5019929	IdentifierDecl	output		5019918	0					
ANR	5019930	IdentifierDeclType	MyString		5019918	0					
ANR	5019931	Identifier	output		5019918	1					
ANR	5019932	ExpressionStatement	m_result_list . rewind ( )	331:1:7485:7507	5019918	2	True				
ANR	5019933	CallExpression	m_result_list . rewind ( )		5019918	0					
ANR	5019934	Callee	m_result_list . rewind		5019918	0					
ANR	5019935	MemberAccess	m_result_list . rewind		5019918	0					
ANR	5019936	Identifier	m_result_list		5019918	0					
ANR	5019937	Identifier	rewind		5019918	1					
ANR	5019938	ArgumentList			5019918	1					
ANR	5019939	WhileStatement	while ( ( one_result = m_result_list . next ( ) ) != NULL )		5019918	3					
ANR	5019940	Condition	( one_result = m_result_list . next ( ) ) != NULL	332:8:7517:7559	5019918	0	True				
ANR	5019941	EqualityExpression	( one_result = m_result_list . next ( ) ) != NULL		5019918	0		!=			
ANR	5019942	AssignmentExpression	one_result = m_result_list . next ( )		5019918	0		=			
ANR	5019943	Identifier	one_result		5019918	0					
ANR	5019944	CallExpression	m_result_list . next ( )		5019918	1					
ANR	5019945	Callee	m_result_list . next		5019918	0					
ANR	5019946	MemberAccess	m_result_list . next		5019918	0					
ANR	5019947	Identifier	m_result_list		5019918	0					
ANR	5019948	Identifier	next		5019918	1					
ANR	5019949	ArgumentList			5019918	1					
ANR	5019950	Identifier	NULL		5019918	1					
ANR	5019951	CompoundStatement		5:54:124:124	5019918	1					
ANR	5019952	ExpressionStatement	output = one_result	333:2:7567:7586	5019918	0	True				
ANR	5019953	AssignmentExpression	output = one_result		5019918	0		=			
ANR	5019954	Identifier	output		5019918	0					
ANR	5019955	Identifier	one_result		5019918	1					
ANR	5019956	ExpressionStatement	"output += ""\\n"""	334:2:7590:7604	5019918	1	True				
ANR	5019957	AssignmentExpression	"output += ""\\n"""		5019918	0		+=			
ANR	5019958	Identifier	output		5019918	0					
ANR	5019959	PrimaryExpression	"""\\n"""		5019918	1					
ANR	5019960	ExpressionStatement	"write_to_daemoncore_pipe ( vmgahp_stdout_pipe , output . Value ( ) , output . Length ( ) )"	335:2:7608:7689	5019918	2	True				
ANR	5019961	CallExpression	"write_to_daemoncore_pipe ( vmgahp_stdout_pipe , output . Value ( ) , output . Length ( ) )"		5019918	0					
ANR	5019962	Callee	write_to_daemoncore_pipe		5019918	0					
ANR	5019963	Identifier	write_to_daemoncore_pipe		5019918	0					
ANR	5019964	ArgumentList	vmgahp_stdout_pipe		5019918	1					
ANR	5019965	Argument	vmgahp_stdout_pipe		5019918	0					
ANR	5019966	Identifier	vmgahp_stdout_pipe		5019918	0					
ANR	5019967	Argument	output . Value ( )		5019918	1					
ANR	5019968	CallExpression	output . Value ( )		5019918	0					
ANR	5019969	Callee	output . Value		5019918	0					
ANR	5019970	MemberAccess	output . Value		5019918	0					
ANR	5019971	Identifier	output		5019918	0					
ANR	5019972	Identifier	Value		5019918	1					
ANR	5019973	ArgumentList			5019918	1					
ANR	5019974	Argument	output . Length ( )		5019918	2					
ANR	5019975	CallExpression	output . Length ( )		5019918	0					
ANR	5019976	Callee	output . Length		5019918	0					
ANR	5019977	MemberAccess	output . Length		5019918	0					
ANR	5019978	Identifier	output		5019918	0					
ANR	5019979	Identifier	Length		5019918	1					
ANR	5019980	ArgumentList			5019918	1					
ANR	5019981	ExpressionStatement	m_result_list . deleteCurrent ( )	337:2:7693:7722	5019918	3	True				
ANR	5019982	CallExpression	m_result_list . deleteCurrent ( )		5019918	0					
ANR	5019983	Callee	m_result_list . deleteCurrent		5019918	0					
ANR	5019984	MemberAccess	m_result_list . deleteCurrent		5019918	0					
ANR	5019985	Identifier	m_result_list		5019918	0					
ANR	5019986	Identifier	deleteCurrent		5019918	1					
ANR	5019987	ArgumentList			5019918	1					
ANR	5019988	ReturnType	void		5019918	1					
ANR	5019989	Identifier	VMGahp :: printAllReqsWithResult		5019918	2					
ANR	5019990	ParameterList			5019918	3					
ANR	5019991	CFGEntryNode	ENTRY		5019918		True				
ANR	5019992	CFGExitNode	EXIT		5019918		True				
ANR	5019993	Symbol	output		5019918						
ANR	5019994	Symbol	m_result_list		5019918						
ANR	5019995	Symbol	m_result_list . next		5019918						
ANR	5019996	Symbol	one_result		5019918						
ANR	5019997	Symbol	NULL		5019918						
ANR	5019998	Symbol	output . Length		5019918						
ANR	5019999	Symbol	output . Value		5019918						
ANR	5020000	Symbol	vmgahp_stdout_pipe		5019918						
ANR	5020001	Function	VMGahp :: findPendingRequest	341:0:7730:7864							
ANR	5020002	FunctionDef	VMGahp :: findPendingRequest (int req_id)		5020001	0					
ANR	5020003	CompoundStatement		343:0:7781:7864	5020001	0					
ANR	5020004	IdentifierDeclStatement	VMRequest * req = NULL ;	344:1:7784:7805	5020001	0	True				
ANR	5020005	IdentifierDecl	* req = NULL		5020001	0					
ANR	5020006	IdentifierDeclType	VMRequest *		5020001	0					
ANR	5020007	Identifier	req		5020001	1					
ANR	5020008	AssignmentExpression	* req = NULL		5020001	2		=			
ANR	5020009	Identifier	NULL		5020001	0					
ANR	5020010	Identifier	NULL		5020001	1					
ANR	5020011	ExpressionStatement	"m_pending_req_table . lookup ( req_id , req )"	346:1:7809:7848	5020001	1	True				
ANR	5020012	CallExpression	"m_pending_req_table . lookup ( req_id , req )"		5020001	0					
ANR	5020013	Callee	m_pending_req_table . lookup		5020001	0					
ANR	5020014	MemberAccess	m_pending_req_table . lookup		5020001	0					
ANR	5020015	Identifier	m_pending_req_table		5020001	0					
ANR	5020016	Identifier	lookup		5020001	1					
ANR	5020017	ArgumentList	req_id		5020001	1					
ANR	5020018	Argument	req_id		5020001	0					
ANR	5020019	Identifier	req_id		5020001	0					
ANR	5020020	Argument	req		5020001	1					
ANR	5020021	Identifier	req		5020001	0					
ANR	5020022	ReturnStatement	return req ;	348:1:7852:7862	5020001	2	True				
ANR	5020023	Identifier	req		5020001	0					
ANR	5020024	ReturnType	VMRequest *		5020001	1					
ANR	5020025	Identifier	VMGahp :: findPendingRequest		5020001	2					
ANR	5020026	ParameterList	int req_id		5020001	3					
ANR	5020027	Parameter	int req_id	342:27:7769:7778	5020001	0	True				
ANR	5020028	ParameterType	int		5020001	0					
ANR	5020029	Identifier	req_id		5020001	1					
ANR	5020030	CFGEntryNode	ENTRY		5020001		True				
ANR	5020031	CFGExitNode	EXIT		5020001		True				
ANR	5020032	Symbol	req_id		5020001						
ANR	5020033	Symbol	NULL		5020001						
ANR	5020034	Symbol	m_pending_req_table		5020001						
ANR	5020035	Symbol	req		5020001						
ANR	5020036	Function	VMGahp :: addVM	351:0:7867:7931							
ANR	5020037	FunctionDef	VMGahp :: addVM (VMType * new_vm)		5020036	0					
ANR	5020038	CompoundStatement		353:0:7902:7931	5020036	0					
ANR	5020039	ExpressionStatement	m_vm_list . Append ( new_vm )	354:1:7905:7929	5020036	0	True				
ANR	5020040	CallExpression	m_vm_list . Append ( new_vm )		5020036	0					
ANR	5020041	Callee	m_vm_list . Append		5020036	0					
ANR	5020042	MemberAccess	m_vm_list . Append		5020036	0					
ANR	5020043	Identifier	m_vm_list		5020036	0					
ANR	5020044	Identifier	Append		5020036	1					
ANR	5020045	ArgumentList	new_vm		5020036	1					
ANR	5020046	Argument	new_vm		5020036	0					
ANR	5020047	Identifier	new_vm		5020036	0					
ANR	5020048	ReturnType	void		5020036	1					
ANR	5020049	Identifier	VMGahp :: addVM		5020036	2					
ANR	5020050	ParameterList	VMType * new_vm		5020036	3					
ANR	5020051	Parameter	VMType * new_vm	352:14:7886:7899	5020036	0	True				
ANR	5020052	ParameterType	VMType *		5020036	0					
ANR	5020053	Identifier	new_vm		5020036	1					
ANR	5020054	CFGEntryNode	ENTRY		5020036		True				
ANR	5020055	CFGExitNode	EXIT		5020036		True				
ANR	5020056	Symbol	m_vm_list		5020036						
ANR	5020057	Symbol	new_vm		5020036						
ANR	5020058	Function	VMGahp :: removeVM	357:0:7934:8068							
ANR	5020059	FunctionDef	VMGahp :: removeVM (int vm_id)		5020058	0					
ANR	5020060	CompoundStatement		359:0:7967:8068	5020058	0					
ANR	5020061	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	360:1:7970:7996	5020058	0	True				
ANR	5020062	IdentifierDecl	* vm = findVM ( vm_id )		5020058	0					
ANR	5020063	IdentifierDeclType	VMType *		5020058	0					
ANR	5020064	Identifier	vm		5020058	1					
ANR	5020065	AssignmentExpression	* vm = findVM ( vm_id )		5020058	2		=			
ANR	5020066	Identifier	vm		5020058	0					
ANR	5020067	CallExpression	findVM ( vm_id )		5020058	1					
ANR	5020068	Callee	findVM		5020058	0					
ANR	5020069	Identifier	findVM		5020058	0					
ANR	5020070	ArgumentList	vm_id		5020058	1					
ANR	5020071	Argument	vm_id		5020058	0					
ANR	5020072	Identifier	vm_id		5020058	0					
ANR	5020073	IfStatement	if ( vm != NULL )		5020058	1					
ANR	5020074	Condition	vm != NULL	361:5:8003:8012	5020058	0	True				
ANR	5020075	EqualityExpression	vm != NULL		5020058	0		!=			
ANR	5020076	Identifier	vm		5020058	0					
ANR	5020077	Identifier	NULL		5020058	1					
ANR	5020078	CompoundStatement		3:18:48:48	5020058	1					
ANR	5020079	ExpressionStatement	m_vm_list . Delete ( vm )	362:2:8020:8040	5020058	0	True				
ANR	5020080	CallExpression	m_vm_list . Delete ( vm )		5020058	0					
ANR	5020081	Callee	m_vm_list . Delete		5020058	0					
ANR	5020082	MemberAccess	m_vm_list . Delete		5020058	0					
ANR	5020083	Identifier	m_vm_list		5020058	0					
ANR	5020084	Identifier	Delete		5020058	1					
ANR	5020085	ArgumentList	vm		5020058	1					
ANR	5020086	Argument	vm		5020058	0					
ANR	5020087	Identifier	vm		5020058	0					
ANR	5020088	Statement	delete	363:2:8044:8049	5020058	1	True				
ANR	5020089	ExpressionStatement	vm	363:9:8051:8053	5020058	2	True				
ANR	5020090	Identifier	vm		5020058	0					
ANR	5020091	ReturnStatement	return ;	364:2:8057:8063	5020058	3	True				
ANR	5020092	ReturnType	void		5020058	1					
ANR	5020093	Identifier	VMGahp :: removeVM		5020058	2					
ANR	5020094	ParameterList	int vm_id		5020058	3					
ANR	5020095	Parameter	int vm_id	358:17:7956:7964	5020058	0	True				
ANR	5020096	ParameterType	int		5020058	0					
ANR	5020097	Identifier	vm_id		5020058	1					
ANR	5020098	CFGEntryNode	ENTRY		5020058		True				
ANR	5020099	CFGExitNode	EXIT		5020058		True				
ANR	5020100	Symbol	vm_id		5020058						
ANR	5020101	Symbol	NULL		5020058						
ANR	5020102	Symbol	vm		5020058						
ANR	5020103	Symbol	findVM		5020058						
ANR	5020104	Symbol	m_vm_list		5020058						
ANR	5020105	Function	VMGahp :: removeVM	368:0:8071:8177							
ANR	5020106	FunctionDef	VMGahp :: removeVM (VMType * vm)		5020105	0					
ANR	5020107	CompoundStatement		370:0:8105:8177	5020105	0					
ANR	5020108	IfStatement	if ( ! vm )		5020105	0					
ANR	5020109	Condition	! vm	371:5:8112:8114	5020105	0	True				
ANR	5020110	UnaryOperationExpression	! vm		5020105	0					
ANR	5020111	UnaryOperator	!		5020105	0					
ANR	5020112	Identifier	vm		5020105	1					
ANR	5020113	CompoundStatement		2:11:12:12	5020105	1					
ANR	5020114	ReturnStatement	return ;	372:2:8122:8128	5020105	0	True				
ANR	5020115	ExpressionStatement	m_vm_list . Delete ( vm )	374:1:8134:8154	5020105	1	True				
ANR	5020116	CallExpression	m_vm_list . Delete ( vm )		5020105	0					
ANR	5020117	Callee	m_vm_list . Delete		5020105	0					
ANR	5020118	MemberAccess	m_vm_list . Delete		5020105	0					
ANR	5020119	Identifier	m_vm_list		5020105	0					
ANR	5020120	Identifier	Delete		5020105	1					
ANR	5020121	ArgumentList	vm		5020105	1					
ANR	5020122	Argument	vm		5020105	0					
ANR	5020123	Identifier	vm		5020105	0					
ANR	5020124	Statement	delete	375:1:8157:8162	5020105	2	True				
ANR	5020125	ExpressionStatement	vm	375:8:8164:8166	5020105	3	True				
ANR	5020126	Identifier	vm		5020105	0					
ANR	5020127	ReturnStatement	return ;	376:1:8169:8175	5020105	4	True				
ANR	5020128	ReturnType	void		5020105	1					
ANR	5020129	Identifier	VMGahp :: removeVM		5020105	2					
ANR	5020130	ParameterList	VMType * vm		5020105	3					
ANR	5020131	Parameter	VMType * vm	369:17:8093:8102	5020105	0	True				
ANR	5020132	ParameterType	VMType *		5020105	0					
ANR	5020133	Identifier	vm		5020105	1					
ANR	5020134	CFGEntryNode	ENTRY		5020105		True				
ANR	5020135	CFGExitNode	EXIT		5020105		True				
ANR	5020136	Symbol	vm		5020105						
ANR	5020137	Symbol	m_vm_list		5020105						
ANR	5020138	Function	VMGahp :: findVM	379:0:8180:8358							
ANR	5020139	FunctionDef	VMGahp :: findVM (int vm_id)		5020138	0					
ANR	5020140	CompoundStatement		381:0:8215:8358	5020138	0					
ANR	5020141	IdentifierDeclStatement	VMType * vm = NULL ;	382:1:8218:8235	5020138	0	True				
ANR	5020142	IdentifierDecl	* vm = NULL		5020138	0					
ANR	5020143	IdentifierDeclType	VMType *		5020138	0					
ANR	5020144	Identifier	vm		5020138	1					
ANR	5020145	AssignmentExpression	* vm = NULL		5020138	2		=			
ANR	5020146	Identifier	NULL		5020138	0					
ANR	5020147	Identifier	NULL		5020138	1					
ANR	5020148	ExpressionStatement	m_vm_list . Rewind ( )	384:1:8239:8257	5020138	1	True				
ANR	5020149	CallExpression	m_vm_list . Rewind ( )		5020138	0					
ANR	5020150	Callee	m_vm_list . Rewind		5020138	0					
ANR	5020151	MemberAccess	m_vm_list . Rewind		5020138	0					
ANR	5020152	Identifier	m_vm_list		5020138	0					
ANR	5020153	Identifier	Rewind		5020138	1					
ANR	5020154	ArgumentList			5020138	1					
ANR	5020155	WhileStatement	while ( m_vm_list . Next ( vm ) )		5020138	2					
ANR	5020156	Condition	m_vm_list . Next ( vm )	385:8:8267:8284	5020138	0	True				
ANR	5020157	CallExpression	m_vm_list . Next ( vm )		5020138	0					
ANR	5020158	Callee	m_vm_list . Next		5020138	0					
ANR	5020159	MemberAccess	m_vm_list . Next		5020138	0					
ANR	5020160	Identifier	m_vm_list		5020138	0					
ANR	5020161	Identifier	Next		5020138	1					
ANR	5020162	ArgumentList	vm		5020138	1					
ANR	5020163	Argument	vm		5020138	0					
ANR	5020164	Identifier	vm		5020138	0					
ANR	5020165	CompoundStatement		5:29:72:72	5020138	1					
ANR	5020166	IfStatement	if ( vm -> getVMId ( ) == vm_id )		5020138	0					
ANR	5020167	Condition	vm -> getVMId ( ) == vm_id	386:6:8296:8317	5020138	0	True				
ANR	5020168	EqualityExpression	vm -> getVMId ( ) == vm_id		5020138	0		==			
ANR	5020169	CallExpression	vm -> getVMId ( )		5020138	0					
ANR	5020170	Callee	vm -> getVMId		5020138	0					
ANR	5020171	PtrMemberAccess	vm -> getVMId		5020138	0					
ANR	5020172	Identifier	vm		5020138	0					
ANR	5020173	Identifier	getVMId		5020138	1					
ANR	5020174	ArgumentList			5020138	1					
ANR	5020175	Identifier	vm_id		5020138	1					
ANR	5020176	CompoundStatement		6:31:105:105	5020138	1					
ANR	5020177	ReturnStatement	return vm ;	387:3:8326:8335	5020138	0	True				
ANR	5020178	Identifier	vm		5020138	0					
ANR	5020179	ReturnStatement	return NULL ;	390:1:8345:8356	5020138	3	True				
ANR	5020180	Identifier	NULL		5020138	0					
ANR	5020181	ReturnType	VMType *		5020138	1					
ANR	5020182	Identifier	VMGahp :: findVM		5020138	2					
ANR	5020183	ParameterList	int vm_id		5020138	3					
ANR	5020184	Parameter	int vm_id	380:15:8204:8212	5020138	0	True				
ANR	5020185	ParameterType	int		5020138	0					
ANR	5020186	Identifier	vm_id		5020138	1					
ANR	5020187	CFGEntryNode	ENTRY		5020138		True				
ANR	5020188	CFGExitNode	EXIT		5020138		True				
ANR	5020189	Symbol	vm_id		5020138						
ANR	5020190	Symbol	NULL		5020138						
ANR	5020191	Symbol	vm -> getVMId		5020138						
ANR	5020192	Symbol	vm		5020138						
ANR	5020193	Symbol	m_vm_list . Next		5020138						
ANR	5020194	Symbol	m_vm_list		5020138						
ANR	5020195	Symbol	* vm		5020138						
ANR	5020196	Function	VMGahp :: waitForCommand	396:0:8364:9773							
ANR	5020197	FunctionDef	VMGahp :: waitForCommand (int pipe_end)		5020196	0					
ANR	5020198	CompoundStatement		398:0:8405:9773	5020196	0					
ANR	5020199	IdentifierDeclStatement	MyString * line = NULL ;	399:1:8408:8429	5020196	0	True				
ANR	5020200	IdentifierDecl	* line = NULL		5020196	0					
ANR	5020201	IdentifierDeclType	MyString *		5020196	0					
ANR	5020202	Identifier	line		5020196	1					
ANR	5020203	AssignmentExpression	* line = NULL		5020196	2		=			
ANR	5020204	Identifier	NULL		5020196	0					
ANR	5020205	Identifier	NULL		5020196	1					
ANR	5020206	WhileStatement	while ( ( line = m_request_buffer . GetNextLine ( ) ) != NULL )		5020196	1					
ANR	5020207	Condition	( line = m_request_buffer . GetNextLine ( ) ) != NULL	401:7:8439:8485	5020196	0	True				
ANR	5020208	EqualityExpression	( line = m_request_buffer . GetNextLine ( ) ) != NULL		5020196	0		!=			
ANR	5020209	AssignmentExpression	line = m_request_buffer . GetNextLine ( )		5020196	0		=			
ANR	5020210	Identifier	line		5020196	0					
ANR	5020211	CallExpression	m_request_buffer . GetNextLine ( )		5020196	1					
ANR	5020212	Callee	m_request_buffer . GetNextLine		5020196	0					
ANR	5020213	MemberAccess	m_request_buffer . GetNextLine		5020196	0					
ANR	5020214	Identifier	m_request_buffer		5020196	0					
ANR	5020215	Identifier	GetNextLine		5020196	1					
ANR	5020216	ArgumentList			5020196	1					
ANR	5020217	Identifier	NULL		5020196	1					
ANR	5020218	CompoundStatement		9:2:145:170	5020196	1					
ANR	5020219	IdentifierDeclStatement	const char * command = line -> Value ( ) ;	403:2:8493:8528	5020196	0	True				
ANR	5020220	IdentifierDecl	* command = line -> Value ( )		5020196	0					
ANR	5020221	IdentifierDeclType	const char *		5020196	0					
ANR	5020222	Identifier	command		5020196	1					
ANR	5020223	AssignmentExpression	* command = line -> Value ( )		5020196	2		=			
ANR	5020224	Identifier	command		5020196	0					
ANR	5020225	CallExpression	line -> Value ( )		5020196	1					
ANR	5020226	Callee	line -> Value		5020196	0					
ANR	5020227	PtrMemberAccess	line -> Value		5020196	0					
ANR	5020228	Identifier	line		5020196	0					
ANR	5020229	Identifier	Value		5020196	1					
ANR	5020230	ArgumentList			5020196	1					
ANR	5020231	IdentifierDeclStatement	Gahp_Args args ;	405:2:8533:8547	5020196	1	True				
ANR	5020232	IdentifierDecl	args		5020196	0					
ANR	5020233	IdentifierDeclType	Gahp_Args		5020196	0					
ANR	5020234	Identifier	args		5020196	1					
ANR	5020235	IdentifierDeclStatement	VMRequest * new_req = NULL ;	406:2:8551:8576	5020196	2	True				
ANR	5020236	IdentifierDecl	* new_req = NULL		5020196	0					
ANR	5020237	IdentifierDeclType	VMRequest *		5020196	0					
ANR	5020238	Identifier	new_req		5020196	1					
ANR	5020239	AssignmentExpression	* new_req = NULL		5020196	2		=			
ANR	5020240	Identifier	NULL		5020196	0					
ANR	5020241	Identifier	NULL		5020196	1					
ANR	5020242	IfStatement	if ( m_inClassAd )		5020196	3					
ANR	5020243	Condition	m_inClassAd	408:6:8585:8595	5020196	0	True				
ANR	5020244	Identifier	m_inClassAd		5020196	0					
ANR	5020245	CompoundStatement		11:21:194:194	5020196	1					
ANR	5020246	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5020196	0					
ANR	5020247	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"	409:7:8609:8660	5020196	0	True				
ANR	5020248	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020196	0		==			
ANR	5020249	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END )"		5020196	0					
ANR	5020250	Callee	strcasecmp		5020196	0					
ANR	5020251	Identifier	strcasecmp		5020196	0					
ANR	5020252	ArgumentList	command		5020196	1					
ANR	5020253	Argument	command		5020196	0					
ANR	5020254	Identifier	command		5020196	0					
ANR	5020255	Argument	VMGAHP_COMMAND_CLASSAD_END		5020196	1					
ANR	5020256	Identifier	VMGAHP_COMMAND_CLASSAD_END		5020196	0					
ANR	5020257	PrimaryExpression	0		5020196	1					
ANR	5020258	CompoundStatement		12:62:258:258	5020196	1					
ANR	5020259	ExpressionStatement	m_inClassAd = false	410:4:8670:8689	5020196	0	True				
ANR	5020260	AssignmentExpression	m_inClassAd = false		5020196	0		=			
ANR	5020261	Identifier	m_inClassAd		5020196	0					
ANR	5020262	Identifier	false		5020196	1					
ANR	5020263	ExpressionStatement	returnOutputSuccess ( )	413:4:8742:8763	5020196	1	True				
ANR	5020264	CallExpression	returnOutputSuccess ( )		5020196	0					
ANR	5020265	Callee	returnOutputSuccess		5020196	0					
ANR	5020266	Identifier	returnOutputSuccess		5020196	0					
ANR	5020267	ArgumentList			5020196	1					
ANR	5020268	ElseStatement	else		5020196	0					
ANR	5020269	CompoundStatement		17:9:368:368	5020196	0					
ANR	5020270	IfStatement	if ( ! m_jobAd -> Insert ( command ) )		5020196	0					
ANR	5020271	Condition	! m_jobAd -> Insert ( command )	415:8:8784:8808	5020196	0	True				
ANR	5020272	UnaryOperationExpression	! m_jobAd -> Insert ( command )		5020196	0					
ANR	5020273	UnaryOperator	!		5020196	0					
ANR	5020274	CallExpression	m_jobAd -> Insert ( command )		5020196	1					
ANR	5020275	Callee	m_jobAd -> Insert		5020196	0					
ANR	5020276	PtrMemberAccess	m_jobAd -> Insert		5020196	0					
ANR	5020277	Identifier	m_jobAd		5020196	0					
ANR	5020278	Identifier	Insert		5020196	1					
ANR	5020279	ArgumentList	command		5020196	1					
ANR	5020280	Argument	command		5020196	0					
ANR	5020281	Identifier	command		5020196	0					
ANR	5020282	CompoundStatement		18:36:406:406	5020196	1					
ANR	5020283	Statement	vmprintf	416:5:8819:8826	5020196	0	True				
ANR	5020284	Statement	(	416:13:8827:8827	5020196	1	True				
ANR	5020285	Statement	D_ALWAYS	416:14:8828:8835	5020196	2	True				
ANR	5020286	Statement	","	416:22:8836:8836	5020196	3	True				
ANR	5020287	Statement	"""Failed to insert \\""%s\\"" into classAd, """	416:24:8838:8877	5020196	4	True				
ANR	5020288	Statement	"""ignoring this attribute\\n"""	417:7:8886:8912	5020196	5	True				
ANR	5020289	Statement	","	417:34:8913:8913	5020196	6	True				
ANR	5020290	Statement	command	417:36:8915:8921	5020196	7	True				
ANR	5020291	Statement	)	417:43:8922:8922	5020196	8	True				
ANR	5020292	ExpressionStatement		417:44:8923:8923	5020196	9	True				
ANR	5020293	ElseStatement	else		5020196	0					
ANR	5020294	CompoundStatement		23:8:538:538	5020196	0					
ANR	5020295	IfStatement	"if ( parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc ) )"		5020196	0					
ANR	5020296	Condition	"parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc )"	421:6:8952:9030	5020196	0	True				
ANR	5020297	AndExpression	"parse_vmgahp_command ( command , args ) && verifyCommand ( args . argv , args . argc )"		5020196	0		&&			
ANR	5020298	CallExpression	"parse_vmgahp_command ( command , args )"		5020196	0					
ANR	5020299	Callee	parse_vmgahp_command		5020196	0					
ANR	5020300	Identifier	parse_vmgahp_command		5020196	0					
ANR	5020301	ArgumentList	command		5020196	1					
ANR	5020302	Argument	command		5020196	0					
ANR	5020303	Identifier	command		5020196	0					
ANR	5020304	Argument	args		5020196	1					
ANR	5020305	Identifier	args		5020196	0					
ANR	5020306	CallExpression	"verifyCommand ( args . argv , args . argc )"		5020196	1					
ANR	5020307	Callee	verifyCommand		5020196	0					
ANR	5020308	Identifier	verifyCommand		5020196	0					
ANR	5020309	ArgumentList	args . argv		5020196	1					
ANR	5020310	Argument	args . argv		5020196	0					
ANR	5020311	MemberAccess	args . argv		5020196	0					
ANR	5020312	Identifier	args		5020196	0					
ANR	5020313	Identifier	argv		5020196	1					
ANR	5020314	Argument	args . argc		5020196	1					
ANR	5020315	MemberAccess	args . argc		5020196	0					
ANR	5020316	Identifier	args		5020196	0					
ANR	5020317	Identifier	argc		5020196	1					
ANR	5020318	CompoundStatement		25:42:627:627	5020196	1					
ANR	5020319	ExpressionStatement	"new_req = preExecuteCommand ( command , & args )"	423:4:9039:9082	5020196	0	True				
ANR	5020320	AssignmentExpression	"new_req = preExecuteCommand ( command , & args )"		5020196	0		=			
ANR	5020321	Identifier	new_req		5020196	0					
ANR	5020322	CallExpression	"preExecuteCommand ( command , & args )"		5020196	1					
ANR	5020323	Callee	preExecuteCommand		5020196	0					
ANR	5020324	Identifier	preExecuteCommand		5020196	0					
ANR	5020325	ArgumentList	command		5020196	1					
ANR	5020326	Argument	command		5020196	0					
ANR	5020327	Identifier	command		5020196	0					
ANR	5020328	Argument	& args		5020196	1					
ANR	5020329	UnaryOperationExpression	& args		5020196	0					
ANR	5020330	UnaryOperator	&		5020196	0					
ANR	5020331	Identifier	args		5020196	1					
ANR	5020332	IfStatement	if ( new_req != NULL )		5020196	1					
ANR	5020333	Condition	new_req != NULL	425:8:9093:9107	5020196	0	True				
ANR	5020334	EqualityExpression	new_req != NULL		5020196	0		!=			
ANR	5020335	Identifier	new_req		5020196	0					
ANR	5020336	Identifier	NULL		5020196	1					
ANR	5020337	CompoundStatement		28:26:705:705	5020196	1					
ANR	5020338	ExpressionStatement	executeCommand ( new_req )	427:5:9150:9173	5020196	0	True				
ANR	5020339	CallExpression	executeCommand ( new_req )		5020196	0					
ANR	5020340	Callee	executeCommand		5020196	0					
ANR	5020341	Identifier	executeCommand		5020196	0					
ANR	5020342	ArgumentList	new_req		5020196	1					
ANR	5020343	Argument	new_req		5020196	0					
ANR	5020344	Identifier	new_req		5020196	0					
ANR	5020345	IfStatement	if ( new_req -> m_has_result )		5020196	1					
ANR	5020346	Condition	new_req -> m_has_result	428:8:9183:9203	5020196	0	True				
ANR	5020347	PtrMemberAccess	new_req -> m_has_result		5020196	0					
ANR	5020348	Identifier	new_req		5020196	0					
ANR	5020349	Identifier	m_has_result		5020196	1					
ANR	5020350	CompoundStatement		31:31:800:800	5020196	1					
ANR	5020351	ExpressionStatement	movePendingReqToResultList ( new_req )	429:6:9214:9249	5020196	0	True				
ANR	5020352	CallExpression	movePendingReqToResultList ( new_req )		5020196	0					
ANR	5020353	Callee	movePendingReqToResultList		5020196	0					
ANR	5020354	Identifier	movePendingReqToResultList		5020196	0					
ANR	5020355	ArgumentList	new_req		5020196	1					
ANR	5020356	Argument	new_req		5020196	0					
ANR	5020357	Identifier	new_req		5020196	0					
ANR	5020358	IfStatement	if ( m_async_mode )		5020196	1					
ANR	5020359	Condition	m_async_mode	430:10:9261:9272	5020196	0	True				
ANR	5020360	Identifier	m_async_mode		5020196	0					
ANR	5020361	CompoundStatement		33:24:869:869	5020196	1					
ANR	5020362	IfStatement	if ( ! m_new_results_signaled )		5020196	0					
ANR	5020363	Condition	! m_new_results_signaled	431:11:9288:9310	5020196	0	True				
ANR	5020364	UnaryOperationExpression	! m_new_results_signaled		5020196	0					
ANR	5020365	UnaryOperator	!		5020196	0					
ANR	5020366	Identifier	m_new_results_signaled		5020196	1					
ANR	5020367	CompoundStatement		34:36:907:907	5020196	1					
ANR	5020368	ExpressionStatement	"write_to_daemoncore_pipe ( ""R\\n"" )"	432:8:9323:9354	5020196	0	True				
ANR	5020369	CallExpression	"write_to_daemoncore_pipe ( ""R\\n"" )"		5020196	0					
ANR	5020370	Callee	write_to_daemoncore_pipe		5020196	0					
ANR	5020371	Identifier	write_to_daemoncore_pipe		5020196	0					
ANR	5020372	ArgumentList	"""R\\n"""		5020196	1					
ANR	5020373	Argument	"""R\\n"""		5020196	0					
ANR	5020374	PrimaryExpression	"""R\\n"""		5020196	0					
ANR	5020375	ExpressionStatement	m_new_results_signaled = true	435:7:9409:9438	5020196	1	True				
ANR	5020376	AssignmentExpression	m_new_results_signaled = true		5020196	0		=			
ANR	5020377	Identifier	m_new_results_signaled		5020196	0					
ANR	5020378	Identifier	true		5020196	1					
ANR	5020379	ElseStatement	else		5020196	0					
ANR	5020380	CompoundStatement		42:9:1064:1064	5020196	0					
ANR	5020381	ExpressionStatement	returnOutputError ( )	440:4:9476:9495	5020196	0	True				
ANR	5020382	CallExpression	returnOutputError ( )		5020196	0					
ANR	5020383	Callee	returnOutputError		5020196	0					
ANR	5020384	Identifier	returnOutputError		5020196	0					
ANR	5020385	ArgumentList			5020196	1					
ANR	5020386	Statement	delete	444:2:9509:9514	5020196	4	True				
ANR	5020387	ExpressionStatement	line	444:9:9516:9520	5020196	5	True				
ANR	5020388	Identifier	line		5020196	0					
ANR	5020389	ExpressionStatement	line = NULL	445:2:9524:9535	5020196	6	True				
ANR	5020390	AssignmentExpression	line = NULL		5020196	0		=			
ANR	5020391	Identifier	line		5020196	0					
ANR	5020392	Identifier	NULL		5020196	1					
ANR	5020393	IfStatement	if ( m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( ) )		5020196	2					
ANR	5020394	Condition	m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( )	449:4:9613:9666	5020196	0	True				
ANR	5020395	OrExpression	m_request_buffer . IsError ( ) || m_request_buffer . IsEOF ( )		5020196	0		||			
ANR	5020396	CallExpression	m_request_buffer . IsError ( )		5020196	0					
ANR	5020397	Callee	m_request_buffer . IsError		5020196	0					
ANR	5020398	MemberAccess	m_request_buffer . IsError		5020196	0					
ANR	5020399	Identifier	m_request_buffer		5020196	0					
ANR	5020400	Identifier	IsError		5020196	1					
ANR	5020401	ArgumentList			5020196	1					
ANR	5020402	CallExpression	m_request_buffer . IsEOF ( )		5020196	1					
ANR	5020403	Callee	m_request_buffer . IsEOF		5020196	0					
ANR	5020404	MemberAccess	m_request_buffer . IsEOF		5020196	0					
ANR	5020405	Identifier	m_request_buffer		5020196	0					
ANR	5020406	Identifier	IsEOF		5020196	1					
ANR	5020407	ArgumentList			5020196	1					
ANR	5020408	CompoundStatement		52:60:1263:1263	5020196	1					
ANR	5020409	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Request buffer closed, exiting\\n"" )"	450:2:9673:9727	5020196	0	True				
ANR	5020410	CallExpression	"vmprintf ( D_ALWAYS , ""Request buffer closed, exiting\\n"" )"		5020196	0					
ANR	5020411	Callee	vmprintf		5020196	0					
ANR	5020412	Identifier	vmprintf		5020196	0					
ANR	5020413	ArgumentList	D_ALWAYS		5020196	1					
ANR	5020414	Argument	D_ALWAYS		5020196	0					
ANR	5020415	Identifier	D_ALWAYS		5020196	0					
ANR	5020416	Argument	"""Request buffer closed, exiting\\n"""		5020196	1					
ANR	5020417	PrimaryExpression	"""Request buffer closed, exiting\\n"""		5020196	0					
ANR	5020418	ExpressionStatement	cleanUp ( )	451:2:9731:9740	5020196	1	True				
ANR	5020419	CallExpression	cleanUp ( )		5020196	0					
ANR	5020420	Callee	cleanUp		5020196	0					
ANR	5020421	Identifier	cleanUp		5020196	0					
ANR	5020422	ArgumentList			5020196	1					
ANR	5020423	ExpressionStatement	DC_Exit ( 0 )	452:2:9744:9754	5020196	2	True				
ANR	5020424	CallExpression	DC_Exit ( 0 )		5020196	0					
ANR	5020425	Callee	DC_Exit		5020196	0					
ANR	5020426	Identifier	DC_Exit		5020196	0					
ANR	5020427	ArgumentList	0		5020196	1					
ANR	5020428	Argument	0		5020196	0					
ANR	5020429	PrimaryExpression	0		5020196	0					
ANR	5020430	ReturnStatement	return true ;	454:1:9760:9771	5020196	3	True				
ANR	5020431	Identifier	true		5020196	0					
ANR	5020432	ReturnType	int		5020196	1					
ANR	5020433	Identifier	VMGahp :: waitForCommand		5020196	2					
ANR	5020434	ParameterList	int pipe_end		5020196	3					
ANR	5020435	Parameter	int pipe_end	397:23:8391:8402	5020196	0	True				
ANR	5020436	ParameterType	int		5020196	0					
ANR	5020437	Identifier	pipe_end		5020196	1					
ANR	5020438	CFGEntryNode	ENTRY		5020196		True				
ANR	5020439	CFGExitNode	EXIT		5020196		True				
ANR	5020440	Symbol	preExecuteCommand		5020196						
ANR	5020441	Symbol	m_jobAd		5020196						
ANR	5020442	Symbol	line -> Value		5020196						
ANR	5020443	Symbol	pipe_end		5020196						
ANR	5020444	Symbol	line		5020196						
ANR	5020445	Symbol	m_inClassAd		5020196						
ANR	5020446	Symbol	* line		5020196						
ANR	5020447	Symbol	parse_vmgahp_command		5020196						
ANR	5020448	Symbol	m_request_buffer . GetNextLine		5020196						
ANR	5020449	Symbol	verifyCommand		5020196						
ANR	5020450	Symbol	new_req -> m_has_result		5020196						
ANR	5020451	Symbol	m_async_mode		5020196						
ANR	5020452	Symbol	m_jobAd -> Insert		5020196						
ANR	5020453	Symbol	m_request_buffer . IsError		5020196						
ANR	5020454	Symbol	strcasecmp		5020196						
ANR	5020455	Symbol	VMGAHP_COMMAND_CLASSAD_END		5020196						
ANR	5020456	Symbol	& args		5020196						
ANR	5020457	Symbol	args . argc		5020196						
ANR	5020458	Symbol	m_new_results_signaled		5020196						
ANR	5020459	Symbol	NULL		5020196						
ANR	5020460	Symbol	m_request_buffer . IsEOF		5020196						
ANR	5020461	Symbol	false		5020196						
ANR	5020462	Symbol	D_ALWAYS		5020196						
ANR	5020463	Symbol	* new_req		5020196						
ANR	5020464	Symbol	command		5020196						
ANR	5020465	Symbol	args		5020196						
ANR	5020466	Symbol	* m_jobAd		5020196						
ANR	5020467	Symbol	args . argv		5020196						
ANR	5020468	Symbol	true		5020196						
ANR	5020469	Symbol	m_request_buffer		5020196						
ANR	5020470	Symbol	new_req		5020196						
ANR	5020471	Function	VMGahp :: verifyCommand	458:0:9822:11654							
ANR	5020472	FunctionDef	"VMGahp :: verifyCommand (char * * argv , int argc)"		5020471	0					
ANR	5020473	CompoundStatement		458:50:9872:11654	5020471	0					
ANR	5020474	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0 )"		5020471	0					
ANR	5020475	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0"	459:4:9878:9926	5020471	0	True				
ANR	5020476	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START ) == 0"		5020471	0		==			
ANR	5020477	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_START )"		5020471	0					
ANR	5020478	Callee	strcasecmp		5020471	0					
ANR	5020479	Identifier	strcasecmp		5020471	0					
ANR	5020480	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020481	Argument	argv [ 0 ]		5020471	0					
ANR	5020482	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020483	Identifier	argv		5020471	0					
ANR	5020484	PrimaryExpression	0		5020471	1					
ANR	5020485	Argument	VMGAHP_COMMAND_VM_START		5020471	1					
ANR	5020486	Identifier	VMGAHP_COMMAND_VM_START		5020471	0					
ANR	5020487	PrimaryExpression	0		5020471	1					
ANR	5020488	CompoundStatement		2:56:57:57	5020471	1					
ANR	5020489	ReturnStatement	"return verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] ) ;"	461:2:9990:10087	5020471	0	True				
ANR	5020490	AndExpression	"verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] )"		5020471	0		&&			
ANR	5020491	CallExpression	"verify_number_args ( argc , 3 )"		5020471	0					
ANR	5020492	Callee	verify_number_args		5020471	0					
ANR	5020493	Identifier	verify_number_args		5020471	0					
ANR	5020494	ArgumentList	argc		5020471	1					
ANR	5020495	Argument	argc		5020471	0					
ANR	5020496	Identifier	argc		5020471	0					
ANR	5020497	Argument	3		5020471	1					
ANR	5020498	PrimaryExpression	3		5020471	0					
ANR	5020499	AndExpression	verify_request_id ( argv [ 1 ] ) && verify_vm_type ( argv [ 2 ] )		5020471	1		&&			
ANR	5020500	CallExpression	verify_request_id ( argv [ 1 ] )		5020471	0					
ANR	5020501	Callee	verify_request_id		5020471	0					
ANR	5020502	Identifier	verify_request_id		5020471	0					
ANR	5020503	ArgumentList	argv [ 1 ]		5020471	1					
ANR	5020504	Argument	argv [ 1 ]		5020471	0					
ANR	5020505	ArrayIndexing	argv [ 1 ]		5020471	0					
ANR	5020506	Identifier	argv		5020471	0					
ANR	5020507	PrimaryExpression	1		5020471	1					
ANR	5020508	CallExpression	verify_vm_type ( argv [ 2 ] )		5020471	1					
ANR	5020509	Callee	verify_vm_type		5020471	0					
ANR	5020510	Identifier	verify_vm_type		5020471	0					
ANR	5020511	ArgumentList	argv [ 2 ]		5020471	1					
ANR	5020512	Argument	argv [ 2 ]		5020471	0					
ANR	5020513	ArrayIndexing	argv [ 2 ]		5020471	0					
ANR	5020514	Identifier	argv		5020471	0					
ANR	5020515	PrimaryExpression	2		5020471	1					
ANR	5020516	ElseStatement	else		5020471	0					
ANR	5020517	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0 )"		5020471	0					
ANR	5020518	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"	465:11:10101:10495	5020471	0	True				
ANR	5020519	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	0		||			
ANR	5020520	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP ) == 0"		5020471	0		==			
ANR	5020521	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STOP )"		5020471	0					
ANR	5020522	Callee	strcasecmp		5020471	0					
ANR	5020523	Identifier	strcasecmp		5020471	0					
ANR	5020524	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020525	Argument	argv [ 0 ]		5020471	0					
ANR	5020526	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020527	Identifier	argv		5020471	0					
ANR	5020528	PrimaryExpression	0		5020471	1					
ANR	5020529	Argument	VMGAHP_COMMAND_VM_STOP		5020471	1					
ANR	5020530	Identifier	VMGAHP_COMMAND_VM_STOP		5020471	0					
ANR	5020531	PrimaryExpression	0		5020471	1					
ANR	5020532	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		||			
ANR	5020533	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND ) == 0"		5020471	0		==			
ANR	5020534	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SUSPEND )"		5020471	0					
ANR	5020535	Callee	strcasecmp		5020471	0					
ANR	5020536	Identifier	strcasecmp		5020471	0					
ANR	5020537	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020538	Argument	argv [ 0 ]		5020471	0					
ANR	5020539	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020540	Identifier	argv		5020471	0					
ANR	5020541	PrimaryExpression	0		5020471	1					
ANR	5020542	Argument	VMGAHP_COMMAND_VM_SUSPEND		5020471	1					
ANR	5020543	Identifier	VMGAHP_COMMAND_VM_SUSPEND		5020471	0					
ANR	5020544	PrimaryExpression	0		5020471	1					
ANR	5020545	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		||			
ANR	5020546	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"		5020471	0		==			
ANR	5020547	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_SOFT_SUSPEND )"		5020471	0					
ANR	5020548	Callee	strcasecmp		5020471	0					
ANR	5020549	Identifier	strcasecmp		5020471	0					
ANR	5020550	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020551	Argument	argv [ 0 ]		5020471	0					
ANR	5020552	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020553	Identifier	argv		5020471	0					
ANR	5020554	PrimaryExpression	0		5020471	1					
ANR	5020555	Argument	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5020471	1					
ANR	5020556	Identifier	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5020471	0					
ANR	5020557	PrimaryExpression	0		5020471	1					
ANR	5020558	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		||			
ANR	5020559	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME ) == 0"		5020471	0		==			
ANR	5020560	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_RESUME )"		5020471	0					
ANR	5020561	Callee	strcasecmp		5020471	0					
ANR	5020562	Identifier	strcasecmp		5020471	0					
ANR	5020563	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020564	Argument	argv [ 0 ]		5020471	0					
ANR	5020565	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020566	Identifier	argv		5020471	0					
ANR	5020567	PrimaryExpression	0		5020471	1					
ANR	5020568	Argument	VMGAHP_COMMAND_VM_RESUME		5020471	1					
ANR	5020569	Identifier	VMGAHP_COMMAND_VM_RESUME		5020471	0					
ANR	5020570	PrimaryExpression	0		5020471	1					
ANR	5020571	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		||			
ANR	5020572	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"		5020471	0		==			
ANR	5020573	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_CHECKPOINT )"		5020471	0					
ANR	5020574	Callee	strcasecmp		5020471	0					
ANR	5020575	Identifier	strcasecmp		5020471	0					
ANR	5020576	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020577	Argument	argv [ 0 ]		5020471	0					
ANR	5020578	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020579	Identifier	argv		5020471	0					
ANR	5020580	PrimaryExpression	0		5020471	1					
ANR	5020581	Argument	VMGAHP_COMMAND_VM_CHECKPOINT		5020471	1					
ANR	5020582	Identifier	VMGAHP_COMMAND_VM_CHECKPOINT		5020471	0					
ANR	5020583	PrimaryExpression	0		5020471	1					
ANR	5020584	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		||			
ANR	5020585	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS ) == 0"		5020471	0		==			
ANR	5020586	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_STATUS )"		5020471	0					
ANR	5020587	Callee	strcasecmp		5020471	0					
ANR	5020588	Identifier	strcasecmp		5020471	0					
ANR	5020589	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020590	Argument	argv [ 0 ]		5020471	0					
ANR	5020591	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020592	Identifier	argv		5020471	0					
ANR	5020593	PrimaryExpression	0		5020471	1					
ANR	5020594	Argument	VMGAHP_COMMAND_VM_STATUS		5020471	1					
ANR	5020595	Identifier	VMGAHP_COMMAND_VM_STATUS		5020471	0					
ANR	5020596	PrimaryExpression	0		5020471	1					
ANR	5020597	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID ) == 0"		5020471	1		==			
ANR	5020598	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VM_GETPID )"		5020471	0					
ANR	5020599	Callee	strcasecmp		5020471	0					
ANR	5020600	Identifier	strcasecmp		5020471	0					
ANR	5020601	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020602	Argument	argv [ 0 ]		5020471	0					
ANR	5020603	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020604	Identifier	argv		5020471	0					
ANR	5020605	PrimaryExpression	0		5020471	1					
ANR	5020606	Argument	VMGAHP_COMMAND_VM_GETPID		5020471	1					
ANR	5020607	Identifier	VMGAHP_COMMAND_VM_GETPID		5020471	0					
ANR	5020608	PrimaryExpression	0		5020471	1					
ANR	5020609	CompoundStatement		14:54:625:625	5020471	1					
ANR	5020610	ReturnStatement	"return verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] ) ;"	480:2:10911:11006	5020471	0	True				
ANR	5020611	AndExpression	"verify_number_args ( argc , 3 ) && verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] )"		5020471	0		&&			
ANR	5020612	CallExpression	"verify_number_args ( argc , 3 )"		5020471	0					
ANR	5020613	Callee	verify_number_args		5020471	0					
ANR	5020614	Identifier	verify_number_args		5020471	0					
ANR	5020615	ArgumentList	argc		5020471	1					
ANR	5020616	Argument	argc		5020471	0					
ANR	5020617	Identifier	argc		5020471	0					
ANR	5020618	Argument	3		5020471	1					
ANR	5020619	PrimaryExpression	3		5020471	0					
ANR	5020620	AndExpression	verify_request_id ( argv [ 1 ] ) && verify_vm_id ( argv [ 2 ] )		5020471	1		&&			
ANR	5020621	CallExpression	verify_request_id ( argv [ 1 ] )		5020471	0					
ANR	5020622	Callee	verify_request_id		5020471	0					
ANR	5020623	Identifier	verify_request_id		5020471	0					
ANR	5020624	ArgumentList	argv [ 1 ]		5020471	1					
ANR	5020625	Argument	argv [ 1 ]		5020471	0					
ANR	5020626	ArrayIndexing	argv [ 1 ]		5020471	0					
ANR	5020627	Identifier	argv		5020471	0					
ANR	5020628	PrimaryExpression	1		5020471	1					
ANR	5020629	CallExpression	verify_vm_id ( argv [ 2 ] )		5020471	1					
ANR	5020630	Callee	verify_vm_id		5020471	0					
ANR	5020631	Identifier	verify_vm_id		5020471	0					
ANR	5020632	ArgumentList	argv [ 2 ]		5020471	1					
ANR	5020633	Argument	argv [ 2 ]		5020471	0					
ANR	5020634	ArrayIndexing	argv [ 2 ]		5020471	0					
ANR	5020635	Identifier	argv		5020471	0					
ANR	5020636	PrimaryExpression	2		5020471	1					
ANR	5020637	ElseStatement	else		5020471	0					
ANR	5020638	IfStatement	"if ( strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5020471	0					
ANR	5020639	Condition	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"	484:11:11020:11518	5020471	0	True				
ANR	5020640	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	0		||			
ANR	5020641	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5020471	0		==			
ANR	5020642	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_ON )"		5020471	0					
ANR	5020643	Callee	strcasecmp		5020471	0					
ANR	5020644	Identifier	strcasecmp		5020471	0					
ANR	5020645	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020646	Argument	argv [ 0 ]		5020471	0					
ANR	5020647	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020648	Identifier	argv		5020471	0					
ANR	5020649	PrimaryExpression	0		5020471	1					
ANR	5020650	Argument	VMGAHP_COMMAND_ASYNC_MODE_ON		5020471	1					
ANR	5020651	Identifier	VMGAHP_COMMAND_ASYNC_MODE_ON		5020471	0					
ANR	5020652	PrimaryExpression	0		5020471	1					
ANR	5020653	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020654	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5020471	0		==			
ANR	5020655	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_ASYNC_MODE_OFF )"		5020471	0					
ANR	5020656	Callee	strcasecmp		5020471	0					
ANR	5020657	Identifier	strcasecmp		5020471	0					
ANR	5020658	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020659	Argument	argv [ 0 ]		5020471	0					
ANR	5020660	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020661	Identifier	argv		5020471	0					
ANR	5020662	PrimaryExpression	0		5020471	1					
ANR	5020663	Argument	VMGAHP_COMMAND_ASYNC_MODE_OFF		5020471	1					
ANR	5020664	Identifier	VMGAHP_COMMAND_ASYNC_MODE_OFF		5020471	0					
ANR	5020665	PrimaryExpression	0		5020471	1					
ANR	5020666	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020667	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT ) == 0"		5020471	0		==			
ANR	5020668	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_QUIT )"		5020471	0					
ANR	5020669	Callee	strcasecmp		5020471	0					
ANR	5020670	Identifier	strcasecmp		5020471	0					
ANR	5020671	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020672	Argument	argv [ 0 ]		5020471	0					
ANR	5020673	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020674	Identifier	argv		5020471	0					
ANR	5020675	PrimaryExpression	0		5020471	1					
ANR	5020676	Argument	VMGAHP_COMMAND_QUIT		5020471	1					
ANR	5020677	Identifier	VMGAHP_COMMAND_QUIT		5020471	0					
ANR	5020678	PrimaryExpression	0		5020471	1					
ANR	5020679	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020680	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION ) == 0"		5020471	0		==			
ANR	5020681	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_VERSION )"		5020471	0					
ANR	5020682	Callee	strcasecmp		5020471	0					
ANR	5020683	Identifier	strcasecmp		5020471	0					
ANR	5020684	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020685	Argument	argv [ 0 ]		5020471	0					
ANR	5020686	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020687	Identifier	argv		5020471	0					
ANR	5020688	PrimaryExpression	0		5020471	1					
ANR	5020689	Argument	VMGAHP_COMMAND_VERSION		5020471	1					
ANR	5020690	Identifier	VMGAHP_COMMAND_VERSION		5020471	0					
ANR	5020691	PrimaryExpression	0		5020471	1					
ANR	5020692	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020693	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS ) == 0"		5020471	0		==			
ANR	5020694	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_COMMANDS )"		5020471	0					
ANR	5020695	Callee	strcasecmp		5020471	0					
ANR	5020696	Identifier	strcasecmp		5020471	0					
ANR	5020697	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020698	Argument	argv [ 0 ]		5020471	0					
ANR	5020699	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020700	Identifier	argv		5020471	0					
ANR	5020701	PrimaryExpression	0		5020471	1					
ANR	5020702	Argument	VMGAHP_COMMAND_COMMANDS		5020471	1					
ANR	5020703	Identifier	VMGAHP_COMMAND_COMMANDS		5020471	0					
ANR	5020704	PrimaryExpression	0		5020471	1					
ANR	5020705	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020706	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"		5020471	0		==			
ANR	5020707	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_SUPPORT_VMS )"		5020471	0					
ANR	5020708	Callee	strcasecmp		5020471	0					
ANR	5020709	Identifier	strcasecmp		5020471	0					
ANR	5020710	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020711	Argument	argv [ 0 ]		5020471	0					
ANR	5020712	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020713	Identifier	argv		5020471	0					
ANR	5020714	PrimaryExpression	0		5020471	1					
ANR	5020715	Argument	VMGAHP_COMMAND_SUPPORT_VMS		5020471	1					
ANR	5020716	Identifier	VMGAHP_COMMAND_SUPPORT_VMS		5020471	0					
ANR	5020717	PrimaryExpression	0		5020471	1					
ANR	5020718	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020719	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS ) == 0"		5020471	0		==			
ANR	5020720	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_RESULTS )"		5020471	0					
ANR	5020721	Callee	strcasecmp		5020471	0					
ANR	5020722	Identifier	strcasecmp		5020471	0					
ANR	5020723	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020724	Argument	argv [ 0 ]		5020471	0					
ANR	5020725	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020726	Identifier	argv		5020471	0					
ANR	5020727	PrimaryExpression	0		5020471	1					
ANR	5020728	Argument	VMGAHP_COMMAND_RESULTS		5020471	1					
ANR	5020729	Identifier	VMGAHP_COMMAND_RESULTS		5020471	0					
ANR	5020730	PrimaryExpression	0		5020471	1					
ANR	5020731	OrExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0 || strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		||			
ANR	5020732	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD ) == 0"		5020471	0		==			
ANR	5020733	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD )"		5020471	0					
ANR	5020734	Callee	strcasecmp		5020471	0					
ANR	5020735	Identifier	strcasecmp		5020471	0					
ANR	5020736	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020737	Argument	argv [ 0 ]		5020471	0					
ANR	5020738	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020739	Identifier	argv		5020471	0					
ANR	5020740	PrimaryExpression	0		5020471	1					
ANR	5020741	Argument	VMGAHP_COMMAND_CLASSAD		5020471	1					
ANR	5020742	Identifier	VMGAHP_COMMAND_CLASSAD		5020471	0					
ANR	5020743	PrimaryExpression	0		5020471	1					
ANR	5020744	EqualityExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5020471	1		==			
ANR	5020745	CallExpression	"strcasecmp ( argv [ 0 ] , VMGAHP_COMMAND_CLASSAD_END )"		5020471	0					
ANR	5020746	Callee	strcasecmp		5020471	0					
ANR	5020747	Identifier	strcasecmp		5020471	0					
ANR	5020748	ArgumentList	argv [ 0 ]		5020471	1					
ANR	5020749	Argument	argv [ 0 ]		5020471	0					
ANR	5020750	ArrayIndexing	argv [ 0 ]		5020471	0					
ANR	5020751	Identifier	argv		5020471	0					
ANR	5020752	PrimaryExpression	0		5020471	1					
ANR	5020753	Argument	VMGAHP_COMMAND_CLASSAD_END		5020471	1					
ANR	5020754	Identifier	VMGAHP_COMMAND_CLASSAD_END		5020471	0					
ANR	5020755	PrimaryExpression	0		5020471	1					
ANR	5020756	CompoundStatement		35:57:1649:1649	5020471	1					
ANR	5020757	ReturnStatement	"return verify_number_args ( argc , 1 ) ;"	494:2:11558:11591	5020471	0	True				
ANR	5020758	CallExpression	"verify_number_args ( argc , 1 )"		5020471	0					
ANR	5020759	Callee	verify_number_args		5020471	0					
ANR	5020760	Identifier	verify_number_args		5020471	0					
ANR	5020761	ArgumentList	argc		5020471	1					
ANR	5020762	Argument	argc		5020471	0					
ANR	5020763	Identifier	argc		5020471	0					
ANR	5020764	Argument	1		5020471	1					
ANR	5020765	PrimaryExpression	1		5020471	0					
ANR	5020766	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Unknown command\\n"" )"	497:1:11598:11637	5020471	1	True				
ANR	5020767	CallExpression	"vmprintf ( D_ALWAYS , ""Unknown command\\n"" )"		5020471	0					
ANR	5020768	Callee	vmprintf		5020471	0					
ANR	5020769	Identifier	vmprintf		5020471	0					
ANR	5020770	ArgumentList	D_ALWAYS		5020471	1					
ANR	5020771	Argument	D_ALWAYS		5020471	0					
ANR	5020772	Identifier	D_ALWAYS		5020471	0					
ANR	5020773	Argument	"""Unknown command\\n"""		5020471	1					
ANR	5020774	PrimaryExpression	"""Unknown command\\n"""		5020471	0					
ANR	5020775	ReturnStatement	return false ;	498:1:11640:11652	5020471	2	True				
ANR	5020776	Identifier	false		5020471	0					
ANR	5020777	ReturnType	bool		5020471	1					
ANR	5020778	Identifier	VMGahp :: verifyCommand		5020471	2					
ANR	5020779	ParameterList	"char * * argv , int argc"		5020471	3					
ANR	5020780	Parameter	char * * argv	458:27:9849:9859	5020471	0	True				
ANR	5020781	ParameterType	char * *		5020471	0					
ANR	5020782	Identifier	argv		5020471	1					
ANR	5020783	Parameter	int argc	458:40:9862:9869	5020471	1	True				
ANR	5020784	ParameterType	int		5020471	0					
ANR	5020785	Identifier	argc		5020471	1					
ANR	5020786	CFGEntryNode	ENTRY		5020471		True				
ANR	5020787	CFGExitNode	EXIT		5020471		True				
ANR	5020788	Symbol	VMGAHP_COMMAND_ASYNC_MODE_ON		5020471						
ANR	5020789	Symbol	VMGAHP_COMMAND_VM_STOP		5020471						
ANR	5020790	Symbol	VMGAHP_COMMAND_VERSION		5020471						
ANR	5020791	Symbol	* argv		5020471						
ANR	5020792	Symbol	argv		5020471						
ANR	5020793	Symbol	verify_request_id		5020471						
ANR	5020794	Symbol	VMGAHP_COMMAND_VM_GETPID		5020471						
ANR	5020795	Symbol	strcasecmp		5020471						
ANR	5020796	Symbol	VMGAHP_COMMAND_COMMANDS		5020471						
ANR	5020797	Symbol	VMGAHP_COMMAND_CLASSAD_END		5020471						
ANR	5020798	Symbol	VMGAHP_COMMAND_VM_STATUS		5020471						
ANR	5020799	Symbol	VMGAHP_COMMAND_SUPPORT_VMS		5020471						
ANR	5020800	Symbol	argc		5020471						
ANR	5020801	Symbol	VMGAHP_COMMAND_CLASSAD		5020471						
ANR	5020802	Symbol	VMGAHP_COMMAND_VM_RESUME		5020471						
ANR	5020803	Symbol	VMGAHP_COMMAND_ASYNC_MODE_OFF		5020471						
ANR	5020804	Symbol	verify_vm_id		5020471						
ANR	5020805	Symbol	D_ALWAYS		5020471						
ANR	5020806	Symbol	false		5020471						
ANR	5020807	Symbol	VMGAHP_COMMAND_VM_START		5020471						
ANR	5020808	Symbol	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5020471						
ANR	5020809	Symbol	VMGAHP_COMMAND_QUIT		5020471						
ANR	5020810	Symbol	verify_number_args		5020471						
ANR	5020811	Symbol	VMGAHP_COMMAND_VM_CHECKPOINT		5020471						
ANR	5020812	Symbol	verify_vm_type		5020471						
ANR	5020813	Symbol	VMGAHP_COMMAND_RESULTS		5020471						
ANR	5020814	Symbol	VMGAHP_COMMAND_VM_SUSPEND		5020471						
ANR	5020815	Function	VMGahp :: verify_request_id	501:0:11657:12098							
ANR	5020816	FunctionDef	VMGahp :: verify_request_id (const char * s)		5020815	0					
ANR	5020817	CompoundStatement		503:0:11703:12098	5020815	0					
ANR	5020818	IfStatement	if ( verify_digit_arg ( s ) == false )		5020815	0					
ANR	5020819	Condition	verify_digit_arg ( s ) == false	504:5:11710:11737	5020815	0	True				
ANR	5020820	EqualityExpression	verify_digit_arg ( s ) == false		5020815	0		==			
ANR	5020821	CallExpression	verify_digit_arg ( s )		5020815	0					
ANR	5020822	Callee	verify_digit_arg		5020815	0					
ANR	5020823	Identifier	verify_digit_arg		5020815	0					
ANR	5020824	ArgumentList	s		5020815	1					
ANR	5020825	Argument	s		5020815	0					
ANR	5020826	Identifier	s		5020815	0					
ANR	5020827	Identifier	false		5020815	1					
ANR	5020828	CompoundStatement		2:35:36:36	5020815	1					
ANR	5020829	ReturnStatement	return false ;	505:2:11744:11756	5020815	0	True				
ANR	5020830	Identifier	false		5020815	0					
ANR	5020831	IdentifierDeclStatement	"int req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 ) ;"	508:1:11763:11809	5020815	1	True				
ANR	5020832	IdentifierDecl	"req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 )"		5020815	0					
ANR	5020833	IdentifierDeclType	int		5020815	0					
ANR	5020834	Identifier	req_id		5020815	1					
ANR	5020835	AssignmentExpression	"req_id = ( int ) strtol ( s , ( char * * ) NULL , 10 )"		5020815	2		=			
ANR	5020836	Identifier	req_id		5020815	0					
ANR	5020837	CastExpression	"( int ) strtol ( s , ( char * * ) NULL , 10 )"		5020815	1					
ANR	5020838	CastTarget	int		5020815	0					
ANR	5020839	CallExpression	"strtol ( s , ( char * * ) NULL , 10 )"		5020815	1					
ANR	5020840	Callee	strtol		5020815	0					
ANR	5020841	Identifier	strtol		5020815	0					
ANR	5020842	ArgumentList	s		5020815	1					
ANR	5020843	Argument	s		5020815	0					
ANR	5020844	Identifier	s		5020815	0					
ANR	5020845	Argument	( char * * ) NULL		5020815	1					
ANR	5020846	CastExpression	( char * * ) NULL		5020815	0					
ANR	5020847	CastTarget	char * *		5020815	0					
ANR	5020848	Identifier	NULL		5020815	1					
ANR	5020849	Argument	10		5020815	2					
ANR	5020850	PrimaryExpression	10		5020815	0					
ANR	5020851	IfStatement	if ( req_id <= 0 )		5020815	2					
ANR	5020852	Condition	req_id <= 0	509:5:11816:11826	5020815	0	True				
ANR	5020853	RelationalExpression	req_id <= 0		5020815	0		<=			
ANR	5020854	Identifier	req_id		5020815	0					
ANR	5020855	PrimaryExpression	0		5020815	1					
ANR	5020856	CompoundStatement		7:19:126:126	5020815	1					
ANR	5020857	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Invalid Request id(%s)\\n"" , s )"	510:2:11834:11883	5020815	0	True				
ANR	5020858	CallExpression	"vmprintf ( D_ALWAYS , ""Invalid Request id(%s)\\n"" , s )"		5020815	0					
ANR	5020859	Callee	vmprintf		5020815	0					
ANR	5020860	Identifier	vmprintf		5020815	0					
ANR	5020861	ArgumentList	D_ALWAYS		5020815	1					
ANR	5020862	Argument	D_ALWAYS		5020815	0					
ANR	5020863	Identifier	D_ALWAYS		5020815	0					
ANR	5020864	Argument	"""Invalid Request id(%s)\\n"""		5020815	1					
ANR	5020865	PrimaryExpression	"""Invalid Request id(%s)\\n"""		5020815	0					
ANR	5020866	Argument	s		5020815	2					
ANR	5020867	Identifier	s		5020815	0					
ANR	5020868	ReturnStatement	return false ;	511:2:11887:11899	5020815	1	True				
ANR	5020869	Identifier	false		5020815	0					
ANR	5020870	IfStatement	if ( findPendingRequest ( req_id ) != NULL )		5020815	3					
ANR	5020871	Condition	findPendingRequest ( req_id ) != NULL	514:5:11937:11970	5020815	0	True				
ANR	5020872	EqualityExpression	findPendingRequest ( req_id ) != NULL		5020815	0		!=			
ANR	5020873	CallExpression	findPendingRequest ( req_id )		5020815	0					
ANR	5020874	Callee	findPendingRequest		5020815	0					
ANR	5020875	Identifier	findPendingRequest		5020815	0					
ANR	5020876	ArgumentList	req_id		5020815	1					
ANR	5020877	Argument	req_id		5020815	0					
ANR	5020878	Identifier	req_id		5020815	0					
ANR	5020879	Identifier	NULL		5020815	1					
ANR	5020880	CompoundStatement		12:42:270:270	5020815	1					
ANR	5020881	Statement	vmprintf	515:2:11978:11985	5020815	0	True				
ANR	5020882	Statement	(	515:10:11986:11986	5020815	1	True				
ANR	5020883	Statement	D_ALWAYS	515:11:11987:11994	5020815	2	True				
ANR	5020884	Statement	","	515:19:11995:11995	5020815	3	True				
ANR	5020885	Statement	"""Request id(%s) is conflict with """	515:21:11997:12030	5020815	4	True				
ANR	5020886	Statement	"""the existing one\\n"""	516:6:12038:12057	5020815	5	True				
ANR	5020887	Statement	","	516:26:12058:12058	5020815	6	True				
ANR	5020888	Statement	s	516:28:12060:12060	5020815	7	True				
ANR	5020889	Statement	)	516:29:12061:12061	5020815	8	True				
ANR	5020890	ExpressionStatement		516:30:12062:12062	5020815	9	True				
ANR	5020891	ReturnStatement	return false ;	517:2:12066:12078	5020815	10	True				
ANR	5020892	Identifier	false		5020815	0					
ANR	5020893	ReturnStatement	return true ;	520:1:12085:12096	5020815	4	True				
ANR	5020894	Identifier	true		5020815	0					
ANR	5020895	ReturnType	bool		5020815	1					
ANR	5020896	Identifier	VMGahp :: verify_request_id		5020815	2					
ANR	5020897	ParameterList	const char * s		5020815	3					
ANR	5020898	Parameter	const char * s	502:26:11688:11700	5020815	0	True				
ANR	5020899	ParameterType	const char *		5020815	0					
ANR	5020900	Identifier	s		5020815	1					
ANR	5020901	CFGEntryNode	ENTRY		5020815		True				
ANR	5020902	CFGExitNode	EXIT		5020815		True				
ANR	5020903	Symbol	req_id		5020815						
ANR	5020904	Symbol	s		5020815						
ANR	5020905	Symbol	NULL		5020815						
ANR	5020906	Symbol	findPendingRequest		5020815						
ANR	5020907	Symbol	strtol		5020815						
ANR	5020908	Symbol	false		5020815						
ANR	5020909	Symbol	D_ALWAYS		5020815						
ANR	5020910	Symbol	true		5020815						
ANR	5020911	Symbol	verify_digit_arg		5020815						
ANR	5020912	Function	VMGahp :: verify_vm_id	523:0:12101:12214							
ANR	5020913	FunctionDef	VMGahp :: verify_vm_id (const char * s)		5020912	0					
ANR	5020914	CompoundStatement		525:0:12142:12214	5020912	0					
ANR	5020915	IfStatement	if ( verify_digit_arg ( s ) == false )		5020912	0					
ANR	5020916	Condition	verify_digit_arg ( s ) == false	526:5:12149:12176	5020912	0	True				
ANR	5020917	EqualityExpression	verify_digit_arg ( s ) == false		5020912	0		==			
ANR	5020918	CallExpression	verify_digit_arg ( s )		5020912	0					
ANR	5020919	Callee	verify_digit_arg		5020912	0					
ANR	5020920	Identifier	verify_digit_arg		5020912	0					
ANR	5020921	ArgumentList	s		5020912	1					
ANR	5020922	Argument	s		5020912	0					
ANR	5020923	Identifier	s		5020912	0					
ANR	5020924	Identifier	false		5020912	1					
ANR	5020925	CompoundStatement		2:35:36:36	5020912	1					
ANR	5020926	ReturnStatement	return false ;	527:2:12183:12195	5020912	0	True				
ANR	5020927	Identifier	false		5020912	0					
ANR	5020928	ReturnStatement	return true ;	529:1:12201:12212	5020912	1	True				
ANR	5020929	Identifier	true		5020912	0					
ANR	5020930	ReturnType	bool		5020912	1					
ANR	5020931	Identifier	VMGahp :: verify_vm_id		5020912	2					
ANR	5020932	ParameterList	const char * s		5020912	3					
ANR	5020933	Parameter	const char * s	524:21:12127:12139	5020912	0	True				
ANR	5020934	ParameterType	const char *		5020912	0					
ANR	5020935	Identifier	s		5020912	1					
ANR	5020936	CFGEntryNode	ENTRY		5020912		True				
ANR	5020937	CFGExitNode	EXIT		5020912		True				
ANR	5020938	Symbol	s		5020912						
ANR	5020939	Symbol	false		5020912						
ANR	5020940	Symbol	true		5020912						
ANR	5020941	Symbol	verify_digit_arg		5020912						
ANR	5020942	Function	VMGahp :: returnOutput	533:0:12218:12468							
ANR	5020943	FunctionDef	"VMGahp :: returnOutput (const char * * results , const int count)"		5020942	0					
ANR	5020944	CompoundStatement		535:0:12283:12468	5020942	0					
ANR	5020945	IdentifierDeclStatement	int i = 0 ;	536:1:12286:12293	5020942	0	True				
ANR	5020946	IdentifierDecl	i = 0		5020942	0					
ANR	5020947	IdentifierDeclType	int		5020942	0					
ANR	5020948	Identifier	i		5020942	1					
ANR	5020949	AssignmentExpression	i = 0		5020942	2		=			
ANR	5020950	Identifier	i		5020942	0					
ANR	5020951	PrimaryExpression	0		5020942	1					
ANR	5020952	ForStatement	for ( i = 0 ; i < count ; i ++ )		5020942	1					
ANR	5020953	ForInit	i = 0 ;	538:6:12302:12305	5020942	0	True				
ANR	5020954	AssignmentExpression	i = 0		5020942	0		=			
ANR	5020955	Identifier	i		5020942	0					
ANR	5020956	PrimaryExpression	0		5020942	1					
ANR	5020957	Condition	i < count	538:11:12307:12313	5020942	1	True				
ANR	5020958	RelationalExpression	i < count		5020942	0		<			
ANR	5020959	Identifier	i		5020942	0					
ANR	5020960	Identifier	count		5020942	1					
ANR	5020961	PostIncDecOperationExpression	i ++	538:20:12316:12318	5020942	2	True				
ANR	5020962	Identifier	i		5020942	0					
ANR	5020963	IncDec	++		5020942	1					
ANR	5020964	CompoundStatement		4:25:37:37	5020942	3					
ANR	5020965	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s"" , results [ i ] )"	539:2:12325:12367	5020942	0	True				
ANR	5020966	CallExpression	"write_to_daemoncore_pipe ( ""%s"" , results [ i ] )"		5020942	0					
ANR	5020967	Callee	write_to_daemoncore_pipe		5020942	0					
ANR	5020968	Identifier	write_to_daemoncore_pipe		5020942	0					
ANR	5020969	ArgumentList	"""%s"""		5020942	1					
ANR	5020970	Argument	"""%s"""		5020942	0					
ANR	5020971	PrimaryExpression	"""%s"""		5020942	0					
ANR	5020972	Argument	results [ i ]		5020942	1					
ANR	5020973	ArrayIndexing	results [ i ]		5020942	0					
ANR	5020974	Identifier	results		5020942	0					
ANR	5020975	Identifier	i		5020942	1					
ANR	5020976	IfStatement	if ( i < ( count - 1 ) )		5020942	1					
ANR	5020977	Condition	i < ( count - 1 )	540:6:12375:12388	5020942	0	True				
ANR	5020978	RelationalExpression	i < ( count - 1 )		5020942	0		<			
ANR	5020979	Identifier	i		5020942	0					
ANR	5020980	AdditiveExpression	count - 1		5020942	1		-			
ANR	5020981	Identifier	count		5020942	0					
ANR	5020982	PrimaryExpression	1		5020942	1					
ANR	5020983	CompoundStatement		6:22:107:107	5020942	1					
ANR	5020984	ExpressionStatement	"write_to_daemoncore_pipe ( "" "" )"	541:3:12396:12425	5020942	0	True				
ANR	5020985	CallExpression	"write_to_daemoncore_pipe ( "" "" )"		5020942	0					
ANR	5020986	Callee	write_to_daemoncore_pipe		5020942	0					
ANR	5020987	Identifier	write_to_daemoncore_pipe		5020942	0					
ANR	5020988	ArgumentList	""" """		5020942	1					
ANR	5020989	Argument	""" """		5020942	0					
ANR	5020990	PrimaryExpression	""" """		5020942	0					
ANR	5020991	ExpressionStatement	"write_to_daemoncore_pipe ( ""\\n"" )"	545:1:12436:12466	5020942	2	True				
ANR	5020992	CallExpression	"write_to_daemoncore_pipe ( ""\\n"" )"		5020942	0					
ANR	5020993	Callee	write_to_daemoncore_pipe		5020942	0					
ANR	5020994	Identifier	write_to_daemoncore_pipe		5020942	0					
ANR	5020995	ArgumentList	"""\\n"""		5020942	1					
ANR	5020996	Argument	"""\\n"""		5020942	0					
ANR	5020997	PrimaryExpression	"""\\n"""		5020942	0					
ANR	5020998	ReturnType	void		5020942	1					
ANR	5020999	Identifier	VMGahp :: returnOutput		5020942	2					
ANR	5021000	ParameterList	"const char * * results , const int count"		5020942	3					
ANR	5021001	Parameter	const char * * results	534:21:12244:12263	5020942	0	True				
ANR	5021002	ParameterType	const char * *		5020942	0					
ANR	5021003	Identifier	results		5020942	1					
ANR	5021004	Parameter	const int count	534:43:12266:12280	5020942	1	True				
ANR	5021005	ParameterType	const int		5020942	0					
ANR	5021006	Identifier	count		5020942	1					
ANR	5021007	CFGEntryNode	ENTRY		5020942		True				
ANR	5021008	CFGExitNode	EXIT		5020942		True				
ANR	5021009	Symbol	* i		5020942						
ANR	5021010	Symbol	count		5020942						
ANR	5021011	Symbol	i		5020942						
ANR	5021012	Symbol	* results		5020942						
ANR	5021013	Symbol	results		5020942						
ANR	5021014	Function	VMGahp :: returnOutputSuccess	548:0:12471:12586							
ANR	5021015	FunctionDef	VMGahp :: returnOutputSuccess ()		5021014	0					
ANR	5021016	CompoundStatement		550:0:12510:12586	5021014	0					
ANR	5021017	IdentifierDeclStatement	const char * result [ ] = { VMGAHP_RESULT_SUCCESS } ;	551:1:12513:12559	5021014	0	True				
ANR	5021018	IdentifierDecl	* result [ ] = { VMGAHP_RESULT_SUCCESS }		5021014	0					
ANR	5021019	IdentifierDeclType	const char * [ ]		5021014	0					
ANR	5021020	Identifier	result		5021014	1					
ANR	5021021	AssignmentExpression	* result [ ] = { VMGAHP_RESULT_SUCCESS }		5021014	2		=			
ANR	5021022	Identifier	result		5021014	0					
ANR	5021023	InitializerList	VMGAHP_RESULT_SUCCESS		5021014	1					
ANR	5021024	Identifier	VMGAHP_RESULT_SUCCESS		5021014	0					
ANR	5021025	ExpressionStatement	"returnOutput ( result , 1 )"	552:1:12562:12584	5021014	1	True				
ANR	5021026	CallExpression	"returnOutput ( result , 1 )"		5021014	0					
ANR	5021027	Callee	returnOutput		5021014	0					
ANR	5021028	Identifier	returnOutput		5021014	0					
ANR	5021029	ArgumentList	result		5021014	1					
ANR	5021030	Argument	result		5021014	0					
ANR	5021031	Identifier	result		5021014	0					
ANR	5021032	Argument	1		5021014	1					
ANR	5021033	PrimaryExpression	1		5021014	0					
ANR	5021034	ReturnType	void		5021014	1					
ANR	5021035	Identifier	VMGahp :: returnOutputSuccess		5021014	2					
ANR	5021036	ParameterList			5021014	3					
ANR	5021037	CFGEntryNode	ENTRY		5021014		True				
ANR	5021038	CFGExitNode	EXIT		5021014		True				
ANR	5021039	Symbol	result		5021014						
ANR	5021040	Symbol	VMGAHP_RESULT_SUCCESS		5021014						
ANR	5021041	Function	VMGahp :: returnOutputError	555:0:12589:12700							
ANR	5021042	FunctionDef	VMGahp :: returnOutputError ()		5021041	0					
ANR	5021043	CompoundStatement		557:0:12626:12700	5021041	0					
ANR	5021044	IdentifierDeclStatement	const char * result [ ] = { VMGAHP_RESULT_ERROR } ;	558:1:12629:12673	5021041	0	True				
ANR	5021045	IdentifierDecl	* result [ ] = { VMGAHP_RESULT_ERROR }		5021041	0					
ANR	5021046	IdentifierDeclType	const char * [ ]		5021041	0					
ANR	5021047	Identifier	result		5021041	1					
ANR	5021048	AssignmentExpression	* result [ ] = { VMGAHP_RESULT_ERROR }		5021041	2		=			
ANR	5021049	Identifier	result		5021041	0					
ANR	5021050	InitializerList	VMGAHP_RESULT_ERROR		5021041	1					
ANR	5021051	Identifier	VMGAHP_RESULT_ERROR		5021041	0					
ANR	5021052	ExpressionStatement	"returnOutput ( result , 1 )"	559:1:12676:12698	5021041	1	True				
ANR	5021053	CallExpression	"returnOutput ( result , 1 )"		5021041	0					
ANR	5021054	Callee	returnOutput		5021041	0					
ANR	5021055	Identifier	returnOutput		5021041	0					
ANR	5021056	ArgumentList	result		5021041	1					
ANR	5021057	Argument	result		5021041	0					
ANR	5021058	Identifier	result		5021041	0					
ANR	5021059	Argument	1		5021041	1					
ANR	5021060	PrimaryExpression	1		5021041	0					
ANR	5021061	ReturnType	void		5021041	1					
ANR	5021062	Identifier	VMGahp :: returnOutputError		5021041	2					
ANR	5021063	ParameterList			5021041	3					
ANR	5021064	CFGEntryNode	ENTRY		5021041		True				
ANR	5021065	CFGExitNode	EXIT		5021041		True				
ANR	5021066	Symbol	result		5021041						
ANR	5021067	Symbol	VMGAHP_RESULT_ERROR		5021041						
ANR	5021068	Function	VMGahp :: preExecuteCommand	562:0:12703:14107							
ANR	5021069	FunctionDef	"VMGahp :: preExecuteCommand (const char * cmd , Gahp_Args * args)"		5021068	0					
ANR	5021070	CompoundStatement		564:0:12775:14107	5021068	0					
ANR	5021071	IdentifierDeclStatement	char * command = args -> argv [ 0 ] ;	565:1:12778:12807	5021068	0	True				
ANR	5021072	IdentifierDecl	* command = args -> argv [ 0 ]		5021068	0					
ANR	5021073	IdentifierDeclType	char *		5021068	0					
ANR	5021074	Identifier	command		5021068	1					
ANR	5021075	AssignmentExpression	* command = args -> argv [ 0 ]		5021068	2		=			
ANR	5021076	Identifier	command		5021068	0					
ANR	5021077	ArrayIndexing	args -> argv [ 0 ]		5021068	1					
ANR	5021078	PtrMemberAccess	args -> argv		5021068	0					
ANR	5021079	Identifier	args		5021068	0					
ANR	5021080	Identifier	argv		5021068	1					
ANR	5021081	PrimaryExpression	0		5021068	1					
ANR	5021082	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Command: %s\\n"" , command )"	567:1:12811:12858	5021068	1	True				
ANR	5021083	CallExpression	"vmprintf ( D_FULLDEBUG , ""Command: %s\\n"" , command )"		5021068	0					
ANR	5021084	Callee	vmprintf		5021068	0					
ANR	5021085	Identifier	vmprintf		5021068	0					
ANR	5021086	ArgumentList	D_FULLDEBUG		5021068	1					
ANR	5021087	Argument	D_FULLDEBUG		5021068	0					
ANR	5021088	Identifier	D_FULLDEBUG		5021068	0					
ANR	5021089	Argument	"""Command: %s\\n"""		5021068	1					
ANR	5021090	PrimaryExpression	"""Command: %s\\n"""		5021068	0					
ANR	5021091	Argument	command		5021068	2					
ANR	5021092	Identifier	command		5021068	0					
ANR	5021093	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0 )"		5021068	2					
ANR	5021094	Condition	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"	570:4:12892:12945	5021068	0	True				
ANR	5021095	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5021068	0		==			
ANR	5021096	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_ON )"		5021068	0					
ANR	5021097	Callee	strcasecmp		5021068	0					
ANR	5021098	Identifier	strcasecmp		5021068	0					
ANR	5021099	ArgumentList	command		5021068	1					
ANR	5021100	Argument	command		5021068	0					
ANR	5021101	Identifier	command		5021068	0					
ANR	5021102	Argument	VMGAHP_COMMAND_ASYNC_MODE_ON		5021068	1					
ANR	5021103	Identifier	VMGAHP_COMMAND_ASYNC_MODE_ON		5021068	0					
ANR	5021104	PrimaryExpression	0		5021068	1					
ANR	5021105	CompoundStatement		7:61:173:173	5021068	1					
ANR	5021106	ExpressionStatement	m_async_mode = true	571:2:12953:12972	5021068	0	True				
ANR	5021107	AssignmentExpression	m_async_mode = true		5021068	0		=			
ANR	5021108	Identifier	m_async_mode		5021068	0					
ANR	5021109	Identifier	true		5021068	1					
ANR	5021110	ExpressionStatement	m_new_results_signaled = false	572:2:12976:13006	5021068	1	True				
ANR	5021111	AssignmentExpression	m_new_results_signaled = false		5021068	0		=			
ANR	5021112	Identifier	m_new_results_signaled		5021068	0					
ANR	5021113	Identifier	false		5021068	1					
ANR	5021114	ExpressionStatement	returnOutputSuccess ( )	573:2:13010:13031	5021068	2	True				
ANR	5021115	CallExpression	returnOutputSuccess ( )		5021068	0					
ANR	5021116	Callee	returnOutputSuccess		5021068	0					
ANR	5021117	Identifier	returnOutputSuccess		5021068	0					
ANR	5021118	ArgumentList			5021068	1					
ANR	5021119	ElseStatement	else		5021068	0					
ANR	5021120	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0 )"		5021068	0					
ANR	5021121	Condition	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"	574:11:13044:13098	5021068	0	True				
ANR	5021122	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5021068	0		==			
ANR	5021123	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_ASYNC_MODE_OFF )"		5021068	0					
ANR	5021124	Callee	strcasecmp		5021068	0					
ANR	5021125	Identifier	strcasecmp		5021068	0					
ANR	5021126	ArgumentList	command		5021068	1					
ANR	5021127	Argument	command		5021068	0					
ANR	5021128	Identifier	command		5021068	0					
ANR	5021129	Argument	VMGAHP_COMMAND_ASYNC_MODE_OFF		5021068	1					
ANR	5021130	Identifier	VMGAHP_COMMAND_ASYNC_MODE_OFF		5021068	0					
ANR	5021131	PrimaryExpression	0		5021068	1					
ANR	5021132	CompoundStatement		11:69:326:326	5021068	1					
ANR	5021133	ExpressionStatement	m_async_mode = false	575:2:13106:13126	5021068	0	True				
ANR	5021134	AssignmentExpression	m_async_mode = false		5021068	0		=			
ANR	5021135	Identifier	m_async_mode		5021068	0					
ANR	5021136	Identifier	false		5021068	1					
ANR	5021137	ExpressionStatement	returnOutputSuccess ( )	576:2:13130:13151	5021068	1	True				
ANR	5021138	CallExpression	returnOutputSuccess ( )		5021068	0					
ANR	5021139	Callee	returnOutputSuccess		5021068	0					
ANR	5021140	Identifier	returnOutputSuccess		5021068	0					
ANR	5021141	ArgumentList			5021068	1					
ANR	5021142	ElseStatement	else		5021068	0					
ANR	5021143	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0 )"		5021068	0					
ANR	5021144	Condition	"strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0"	577:11:13164:13208	5021068	0	True				
ANR	5021145	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_QUIT ) == 0"		5021068	0		==			
ANR	5021146	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_QUIT )"		5021068	0					
ANR	5021147	Callee	strcasecmp		5021068	0					
ANR	5021148	Identifier	strcasecmp		5021068	0					
ANR	5021149	ArgumentList	command		5021068	1					
ANR	5021150	Argument	command		5021068	0					
ANR	5021151	Identifier	command		5021068	0					
ANR	5021152	Argument	VMGAHP_COMMAND_QUIT		5021068	1					
ANR	5021153	Identifier	VMGAHP_COMMAND_QUIT		5021068	0					
ANR	5021154	PrimaryExpression	0		5021068	1					
ANR	5021155	CompoundStatement		14:59:436:436	5021068	1					
ANR	5021156	ExpressionStatement	executeQuit ( )	578:2:13216:13229	5021068	0	True				
ANR	5021157	CallExpression	executeQuit ( )		5021068	0					
ANR	5021158	Callee	executeQuit		5021068	0					
ANR	5021159	Identifier	executeQuit		5021068	0					
ANR	5021160	ArgumentList			5021068	1					
ANR	5021161	ElseStatement	else		5021068	0					
ANR	5021162	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0 )"		5021068	0					
ANR	5021163	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0"	579:11:13242:13289	5021068	0	True				
ANR	5021164	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VERSION ) == 0"		5021068	0		==			
ANR	5021165	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VERSION )"		5021068	0					
ANR	5021166	Callee	strcasecmp		5021068	0					
ANR	5021167	Identifier	strcasecmp		5021068	0					
ANR	5021168	ArgumentList	command		5021068	1					
ANR	5021169	Argument	command		5021068	0					
ANR	5021170	Identifier	command		5021068	0					
ANR	5021171	Argument	VMGAHP_COMMAND_VERSION		5021068	1					
ANR	5021172	Identifier	VMGAHP_COMMAND_VERSION		5021068	0					
ANR	5021173	PrimaryExpression	0		5021068	1					
ANR	5021174	CompoundStatement		16:62:517:517	5021068	1					
ANR	5021175	ExpressionStatement	executeVersion ( )	580:2:13297:13313	5021068	0	True				
ANR	5021176	CallExpression	executeVersion ( )		5021068	0					
ANR	5021177	Callee	executeVersion		5021068	0					
ANR	5021178	Identifier	executeVersion		5021068	0					
ANR	5021179	ArgumentList			5021068	1					
ANR	5021180	ElseStatement	else		5021068	0					
ANR	5021181	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0 )"		5021068	0					
ANR	5021182	Condition	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0"	581:11:13326:13374	5021068	0	True				
ANR	5021183	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS ) == 0"		5021068	0		==			
ANR	5021184	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_COMMANDS )"		5021068	0					
ANR	5021185	Callee	strcasecmp		5021068	0					
ANR	5021186	Identifier	strcasecmp		5021068	0					
ANR	5021187	ArgumentList	command		5021068	1					
ANR	5021188	Argument	command		5021068	0					
ANR	5021189	Identifier	command		5021068	0					
ANR	5021190	Argument	VMGAHP_COMMAND_COMMANDS		5021068	1					
ANR	5021191	Identifier	VMGAHP_COMMAND_COMMANDS		5021068	0					
ANR	5021192	PrimaryExpression	0		5021068	1					
ANR	5021193	CompoundStatement		18:63:602:602	5021068	1					
ANR	5021194	ExpressionStatement	executeCommands ( )	582:2:13382:13399	5021068	0	True				
ANR	5021195	CallExpression	executeCommands ( )		5021068	0					
ANR	5021196	Callee	executeCommands		5021068	0					
ANR	5021197	Identifier	executeCommands		5021068	0					
ANR	5021198	ArgumentList			5021068	1					
ANR	5021199	ElseStatement	else		5021068	0					
ANR	5021200	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0 )"		5021068	0					
ANR	5021201	Condition	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"	583:11:13412:13463	5021068	0	True				
ANR	5021202	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS ) == 0"		5021068	0		==			
ANR	5021203	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_SUPPORT_VMS )"		5021068	0					
ANR	5021204	Callee	strcasecmp		5021068	0					
ANR	5021205	Identifier	strcasecmp		5021068	0					
ANR	5021206	ArgumentList	command		5021068	1					
ANR	5021207	Argument	command		5021068	0					
ANR	5021208	Identifier	command		5021068	0					
ANR	5021209	Argument	VMGAHP_COMMAND_SUPPORT_VMS		5021068	1					
ANR	5021210	Identifier	VMGAHP_COMMAND_SUPPORT_VMS		5021068	0					
ANR	5021211	PrimaryExpression	0		5021068	1					
ANR	5021212	CompoundStatement		20:66:691:691	5021068	1					
ANR	5021213	ExpressionStatement	executeSupportVMS ( )	584:2:13471:13490	5021068	0	True				
ANR	5021214	CallExpression	executeSupportVMS ( )		5021068	0					
ANR	5021215	Callee	executeSupportVMS		5021068	0					
ANR	5021216	Identifier	executeSupportVMS		5021068	0					
ANR	5021217	ArgumentList			5021068	1					
ANR	5021218	ElseStatement	else		5021068	0					
ANR	5021219	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0 )"		5021068	0					
ANR	5021220	Condition	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0"	585:11:13503:13550	5021068	0	True				
ANR	5021221	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS ) == 0"		5021068	0		==			
ANR	5021222	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_RESULTS )"		5021068	0					
ANR	5021223	Callee	strcasecmp		5021068	0					
ANR	5021224	Identifier	strcasecmp		5021068	0					
ANR	5021225	ArgumentList	command		5021068	1					
ANR	5021226	Argument	command		5021068	0					
ANR	5021227	Identifier	command		5021068	0					
ANR	5021228	Argument	VMGAHP_COMMAND_RESULTS		5021068	1					
ANR	5021229	Identifier	VMGAHP_COMMAND_RESULTS		5021068	0					
ANR	5021230	PrimaryExpression	0		5021068	1					
ANR	5021231	CompoundStatement		22:62:778:778	5021068	1					
ANR	5021232	ExpressionStatement	executeResults ( )	586:2:13558:13574	5021068	0	True				
ANR	5021233	CallExpression	executeResults ( )		5021068	0					
ANR	5021234	Callee	executeResults		5021068	0					
ANR	5021235	Identifier	executeResults		5021068	0					
ANR	5021236	ArgumentList			5021068	1					
ANR	5021237	ElseStatement	else		5021068	0					
ANR	5021238	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0 )"		5021068	0					
ANR	5021239	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0"	587:11:13587:13634	5021068	0	True				
ANR	5021240	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD ) == 0"		5021068	0		==			
ANR	5021241	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD )"		5021068	0					
ANR	5021242	Callee	strcasecmp		5021068	0					
ANR	5021243	Identifier	strcasecmp		5021068	0					
ANR	5021244	ArgumentList	command		5021068	1					
ANR	5021245	Argument	command		5021068	0					
ANR	5021246	Identifier	command		5021068	0					
ANR	5021247	Argument	VMGAHP_COMMAND_CLASSAD		5021068	1					
ANR	5021248	Identifier	VMGAHP_COMMAND_CLASSAD		5021068	0					
ANR	5021249	PrimaryExpression	0		5021068	1					
ANR	5021250	CompoundStatement		24:62:862:862	5021068	1					
ANR	5021251	IfStatement	if ( m_jobAd != NULL )		5021068	0					
ANR	5021252	Condition	m_jobAd != NULL	588:6:13646:13660	5021068	0	True				
ANR	5021253	EqualityExpression	m_jobAd != NULL		5021068	0		!=			
ANR	5021254	Identifier	m_jobAd		5021068	0					
ANR	5021255	Identifier	NULL		5021068	1					
ANR	5021256	CompoundStatement		25:24:888:888	5021068	1					
ANR	5021257	Statement	delete	589:3:13669:13674	5021068	0	True				
ANR	5021258	ExpressionStatement	m_jobAd	589:10:13676:13683	5021068	1	True				
ANR	5021259	Identifier	m_jobAd		5021068	0					
ANR	5021260	ExpressionStatement	m_jobAd = NULL	590:3:13688:13702	5021068	2	True				
ANR	5021261	AssignmentExpression	m_jobAd = NULL		5021068	0		=			
ANR	5021262	Identifier	m_jobAd		5021068	0					
ANR	5021263	Identifier	NULL		5021068	1					
ANR	5021264	Statement	m_jobAd	592:2:13710:13716	5021068	1	True				
ANR	5021265	Statement	=	592:10:13718:13718	5021068	2	True				
ANR	5021266	Statement	new	592:12:13720:13722	5021068	3	True				
ANR	5021267	ExpressionStatement	ClassAd	592:16:13724:13731	5021068	4	True				
ANR	5021268	Identifier	ClassAd		5021068	0					
ANR	5021269	ExpressionStatement	ASSERT ( m_jobAd )	593:2:13735:13750	5021068	5	True				
ANR	5021270	CallExpression	ASSERT ( m_jobAd )		5021068	0					
ANR	5021271	Callee	ASSERT		5021068	0					
ANR	5021272	Identifier	ASSERT		5021068	0					
ANR	5021273	ArgumentList	m_jobAd		5021068	1					
ANR	5021274	Argument	m_jobAd		5021068	0					
ANR	5021275	Identifier	m_jobAd		5021068	0					
ANR	5021276	ExpressionStatement	m_inClassAd = true	594:2:13754:13772	5021068	6	True				
ANR	5021277	AssignmentExpression	m_inClassAd = true		5021068	0		=			
ANR	5021278	Identifier	m_inClassAd		5021068	0					
ANR	5021279	Identifier	true		5021068	1					
ANR	5021280	ExpressionStatement	returnOutputSuccess ( )	595:2:13776:13797	5021068	7	True				
ANR	5021281	CallExpression	returnOutputSuccess ( )		5021068	0					
ANR	5021282	Callee	returnOutputSuccess		5021068	0					
ANR	5021283	Identifier	returnOutputSuccess		5021068	0					
ANR	5021284	ArgumentList			5021068	1					
ANR	5021285	ElseStatement	else		5021068	0					
ANR	5021286	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0 )"		5021068	0					
ANR	5021287	Condition	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"	596:11:13810:13861	5021068	0	True				
ANR	5021288	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END ) == 0"		5021068	0		==			
ANR	5021289	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_CLASSAD_END )"		5021068	0					
ANR	5021290	Callee	strcasecmp		5021068	0					
ANR	5021291	Identifier	strcasecmp		5021068	0					
ANR	5021292	ArgumentList	command		5021068	1					
ANR	5021293	Argument	command		5021068	0					
ANR	5021294	Identifier	command		5021068	0					
ANR	5021295	Argument	VMGAHP_COMMAND_CLASSAD_END		5021068	1					
ANR	5021296	Identifier	VMGAHP_COMMAND_CLASSAD_END		5021068	0					
ANR	5021297	PrimaryExpression	0		5021068	1					
ANR	5021298	CompoundStatement		33:66:1089:1089	5021068	1					
ANR	5021299	IfStatement	if ( m_jobAd != NULL )		5021068	0					
ANR	5021300	Condition	m_jobAd != NULL	597:6:13873:13887	5021068	0	True				
ANR	5021301	EqualityExpression	m_jobAd != NULL		5021068	0		!=			
ANR	5021302	Identifier	m_jobAd		5021068	0					
ANR	5021303	Identifier	NULL		5021068	1					
ANR	5021304	CompoundStatement		34:24:1115:1115	5021068	1					
ANR	5021305	Statement	delete	598:3:13896:13901	5021068	0	True				
ANR	5021306	ExpressionStatement	m_jobAd	598:10:13903:13910	5021068	1	True				
ANR	5021307	Identifier	m_jobAd		5021068	0					
ANR	5021308	ExpressionStatement	m_jobAd = NULL	599:3:13915:13929	5021068	2	True				
ANR	5021309	AssignmentExpression	m_jobAd = NULL		5021068	0		=			
ANR	5021310	Identifier	m_jobAd		5021068	0					
ANR	5021311	Identifier	NULL		5021068	1					
ANR	5021312	ExpressionStatement	m_inClassAd = false	601:2:13937:13956	5021068	1	True				
ANR	5021313	AssignmentExpression	m_inClassAd = false		5021068	0		=			
ANR	5021314	Identifier	m_inClassAd		5021068	0					
ANR	5021315	Identifier	false		5021068	1					
ANR	5021316	ExpressionStatement	returnOutputSuccess ( )	602:2:13960:13981	5021068	2	True				
ANR	5021317	CallExpression	returnOutputSuccess ( )		5021068	0					
ANR	5021318	Callee	returnOutputSuccess		5021068	0					
ANR	5021319	Identifier	returnOutputSuccess		5021068	0					
ANR	5021320	ArgumentList			5021068	1					
ANR	5021321	ElseStatement	else		5021068	0					
ANR	5021322	CompoundStatement		41:2:1219:1237	5021068	0					
ANR	5021323	IdentifierDeclStatement	VMRequest * new_req ;	604:2:13995:14013	5021068	0	True				
ANR	5021324	IdentifierDecl	* new_req		5021068	0					
ANR	5021325	IdentifierDeclType	VMRequest *		5021068	0					
ANR	5021326	Identifier	new_req		5021068	1					
ANR	5021327	ExpressionStatement	new_req = addNewRequest ( cmd )	605:2:14017:14045	5021068	1	True				
ANR	5021328	AssignmentExpression	new_req = addNewRequest ( cmd )		5021068	0		=			
ANR	5021329	Identifier	new_req		5021068	0					
ANR	5021330	CallExpression	addNewRequest ( cmd )		5021068	1					
ANR	5021331	Callee	addNewRequest		5021068	0					
ANR	5021332	Identifier	addNewRequest		5021068	0					
ANR	5021333	ArgumentList	cmd		5021068	1					
ANR	5021334	Argument	cmd		5021068	0					
ANR	5021335	Identifier	cmd		5021068	0					
ANR	5021336	ExpressionStatement	returnOutputSuccess ( )	606:2:14049:14070	5021068	2	True				
ANR	5021337	CallExpression	returnOutputSuccess ( )		5021068	0					
ANR	5021338	Callee	returnOutputSuccess		5021068	0					
ANR	5021339	Identifier	returnOutputSuccess		5021068	0					
ANR	5021340	ArgumentList			5021068	1					
ANR	5021341	ReturnStatement	return new_req ;	607:2:14074:14088	5021068	3	True				
ANR	5021342	Identifier	new_req		5021068	0					
ANR	5021343	ReturnStatement	return NULL ;	609:1:14094:14105	5021068	3	True				
ANR	5021344	Identifier	NULL		5021068	0					
ANR	5021345	ReturnType	VMRequest *		5021068	1					
ANR	5021346	Identifier	VMGahp :: preExecuteCommand		5021068	2					
ANR	5021347	ParameterList	"const char * cmd , Gahp_Args * args"		5021068	3					
ANR	5021348	Parameter	const char * cmd	563:26:12741:12755	5021068	0	True				
ANR	5021349	ParameterType	const char *		5021068	0					
ANR	5021350	Identifier	cmd		5021068	1					
ANR	5021351	Parameter	Gahp_Args * args	563:43:12758:12772	5021068	1	True				
ANR	5021352	ParameterType	Gahp_Args *		5021068	0					
ANR	5021353	Identifier	args		5021068	1					
ANR	5021354	CFGEntryNode	ENTRY		5021068		True				
ANR	5021355	CFGExitNode	EXIT		5021068		True				
ANR	5021356	Symbol	VMGAHP_COMMAND_ASYNC_MODE_ON		5021068						
ANR	5021357	Symbol	m_jobAd		5021068						
ANR	5021358	Symbol	VMGAHP_COMMAND_VERSION		5021068						
ANR	5021359	Symbol	m_inClassAd		5021068						
ANR	5021360	Symbol	* args		5021068						
ANR	5021361	Symbol	m_async_mode		5021068						
ANR	5021362	Symbol	* * args		5021068						
ANR	5021363	Symbol	strcasecmp		5021068						
ANR	5021364	Symbol	VMGAHP_COMMAND_COMMANDS		5021068						
ANR	5021365	Symbol	VMGAHP_COMMAND_CLASSAD_END		5021068						
ANR	5021366	Symbol	VMGAHP_COMMAND_SUPPORT_VMS		5021068						
ANR	5021367	Symbol	args -> argv		5021068						
ANR	5021368	Symbol	m_new_results_signaled		5021068						
ANR	5021369	Symbol	VMGAHP_COMMAND_CLASSAD		5021068						
ANR	5021370	Symbol	NULL		5021068						
ANR	5021371	Symbol	addNewRequest		5021068						
ANR	5021372	Symbol	VMGAHP_COMMAND_ASYNC_MODE_OFF		5021068						
ANR	5021373	Symbol	false		5021068						
ANR	5021374	Symbol	D_FULLDEBUG		5021068						
ANR	5021375	Symbol	VMGAHP_COMMAND_QUIT		5021068						
ANR	5021376	Symbol	command		5021068						
ANR	5021377	Symbol	args		5021068						
ANR	5021378	Symbol	VMGAHP_COMMAND_RESULTS		5021068						
ANR	5021379	Symbol	* args -> argv		5021068						
ANR	5021380	Symbol	true		5021068						
ANR	5021381	Symbol	cmd		5021068						
ANR	5021382	Symbol	new_req		5021068						
ANR	5021383	Function	VMGahp :: executeCommand	612:0:14110:15031							
ANR	5021384	FunctionDef	VMGahp :: executeCommand (VMRequest * req)		5021383	0					
ANR	5021385	CompoundStatement		614:0:14154:15031	5021383	0					
ANR	5021386	IdentifierDeclStatement	char * command = req -> m_args . argv [ 0 ] ;	615:1:14157:14192	5021383	0	True				
ANR	5021387	IdentifierDecl	* command = req -> m_args . argv [ 0 ]		5021383	0					
ANR	5021388	IdentifierDeclType	char *		5021383	0					
ANR	5021389	Identifier	command		5021383	1					
ANR	5021390	AssignmentExpression	* command = req -> m_args . argv [ 0 ]		5021383	2		=			
ANR	5021391	Identifier	command		5021383	0					
ANR	5021392	ArrayIndexing	req -> m_args . argv [ 0 ]		5021383	1					
ANR	5021393	MemberAccess	req -> m_args . argv		5021383	0					
ANR	5021394	PtrMemberAccess	req -> m_args		5021383	0					
ANR	5021395	Identifier	req		5021383	0					
ANR	5021396	Identifier	m_args		5021383	1					
ANR	5021397	Identifier	argv		5021383	1					
ANR	5021398	PrimaryExpression	0		5021383	1					
ANR	5021399	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	617:1:14196:14229	5021383	1	True				
ANR	5021400	IdentifierDecl	priv = set_user_priv ( )		5021383	0					
ANR	5021401	IdentifierDeclType	priv_state		5021383	0					
ANR	5021402	Identifier	priv		5021383	1					
ANR	5021403	AssignmentExpression	priv = set_user_priv ( )		5021383	2		=			
ANR	5021404	Identifier	priv		5021383	0					
ANR	5021405	CallExpression	set_user_priv ( )		5021383	1					
ANR	5021406	Callee	set_user_priv		5021383	0					
ANR	5021407	Identifier	set_user_priv		5021383	0					
ANR	5021408	ArgumentList			5021383	1					
ANR	5021409	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0 )"		5021383	2					
ANR	5021410	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0"	619:4:14236:14284	5021383	0	True				
ANR	5021411	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_START ) == 0"		5021383	0		==			
ANR	5021412	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_START )"		5021383	0					
ANR	5021413	Callee	strcasecmp		5021383	0					
ANR	5021414	Identifier	strcasecmp		5021383	0					
ANR	5021415	ArgumentList	command		5021383	1					
ANR	5021416	Argument	command		5021383	0					
ANR	5021417	Identifier	command		5021383	0					
ANR	5021418	Argument	VMGAHP_COMMAND_VM_START		5021383	1					
ANR	5021419	Identifier	VMGAHP_COMMAND_VM_START		5021383	0					
ANR	5021420	PrimaryExpression	0		5021383	1					
ANR	5021421	CompoundStatement		6:56:133:133	5021383	1					
ANR	5021422	ExpressionStatement	executeStart ( req )	620:2:14292:14309	5021383	0	True				
ANR	5021423	CallExpression	executeStart ( req )		5021383	0					
ANR	5021424	Callee	executeStart		5021383	0					
ANR	5021425	Identifier	executeStart		5021383	0					
ANR	5021426	ArgumentList	req		5021383	1					
ANR	5021427	Argument	req		5021383	0					
ANR	5021428	Identifier	req		5021383	0					
ANR	5021429	ElseStatement	else		5021383	0					
ANR	5021430	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0 )"		5021383	0					
ANR	5021431	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0"	621:11:14322:14369	5021383	0	True				
ANR	5021432	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP ) == 0"		5021383	0		==			
ANR	5021433	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STOP )"		5021383	0					
ANR	5021434	Callee	strcasecmp		5021383	0					
ANR	5021435	Identifier	strcasecmp		5021383	0					
ANR	5021436	ArgumentList	command		5021383	1					
ANR	5021437	Argument	command		5021383	0					
ANR	5021438	Identifier	command		5021383	0					
ANR	5021439	Argument	VMGAHP_COMMAND_VM_STOP		5021383	1					
ANR	5021440	Identifier	VMGAHP_COMMAND_VM_STOP		5021383	0					
ANR	5021441	PrimaryExpression	0		5021383	1					
ANR	5021442	CompoundStatement		8:62:218:218	5021383	1					
ANR	5021443	ExpressionStatement	executeStop ( req )	622:2:14377:14393	5021383	0	True				
ANR	5021444	CallExpression	executeStop ( req )		5021383	0					
ANR	5021445	Callee	executeStop		5021383	0					
ANR	5021446	Identifier	executeStop		5021383	0					
ANR	5021447	ArgumentList	req		5021383	1					
ANR	5021448	Argument	req		5021383	0					
ANR	5021449	Identifier	req		5021383	0					
ANR	5021450	ElseStatement	else		5021383	0					
ANR	5021451	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0 )"		5021383	0					
ANR	5021452	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0"	623:11:14406:14456	5021383	0	True				
ANR	5021453	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND ) == 0"		5021383	0		==			
ANR	5021454	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SUSPEND )"		5021383	0					
ANR	5021455	Callee	strcasecmp		5021383	0					
ANR	5021456	Identifier	strcasecmp		5021383	0					
ANR	5021457	ArgumentList	command		5021383	1					
ANR	5021458	Argument	command		5021383	0					
ANR	5021459	Identifier	command		5021383	0					
ANR	5021460	Argument	VMGAHP_COMMAND_VM_SUSPEND		5021383	1					
ANR	5021461	Identifier	VMGAHP_COMMAND_VM_SUSPEND		5021383	0					
ANR	5021462	PrimaryExpression	0		5021383	1					
ANR	5021463	CompoundStatement		10:65:305:305	5021383	1					
ANR	5021464	ExpressionStatement	executeSuspend ( req )	624:2:14464:14483	5021383	0	True				
ANR	5021465	CallExpression	executeSuspend ( req )		5021383	0					
ANR	5021466	Callee	executeSuspend		5021383	0					
ANR	5021467	Identifier	executeSuspend		5021383	0					
ANR	5021468	ArgumentList	req		5021383	1					
ANR	5021469	Argument	req		5021383	0					
ANR	5021470	Identifier	req		5021383	0					
ANR	5021471	ElseStatement	else		5021383	0					
ANR	5021472	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0 )"		5021383	0					
ANR	5021473	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"	625:11:14496:14551	5021383	0	True				
ANR	5021474	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND ) == 0"		5021383	0		==			
ANR	5021475	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_SOFT_SUSPEND )"		5021383	0					
ANR	5021476	Callee	strcasecmp		5021383	0					
ANR	5021477	Identifier	strcasecmp		5021383	0					
ANR	5021478	ArgumentList	command		5021383	1					
ANR	5021479	Argument	command		5021383	0					
ANR	5021480	Identifier	command		5021383	0					
ANR	5021481	Argument	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5021383	1					
ANR	5021482	Identifier	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5021383	0					
ANR	5021483	PrimaryExpression	0		5021383	1					
ANR	5021484	CompoundStatement		12:70:400:400	5021383	1					
ANR	5021485	ExpressionStatement	executeSoftSuspend ( req )	626:2:14559:14582	5021383	0	True				
ANR	5021486	CallExpression	executeSoftSuspend ( req )		5021383	0					
ANR	5021487	Callee	executeSoftSuspend		5021383	0					
ANR	5021488	Identifier	executeSoftSuspend		5021383	0					
ANR	5021489	ArgumentList	req		5021383	1					
ANR	5021490	Argument	req		5021383	0					
ANR	5021491	Identifier	req		5021383	0					
ANR	5021492	ElseStatement	else		5021383	0					
ANR	5021493	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0 )"		5021383	0					
ANR	5021494	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0"	627:11:14595:14644	5021383	0	True				
ANR	5021495	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME ) == 0"		5021383	0		==			
ANR	5021496	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_RESUME )"		5021383	0					
ANR	5021497	Callee	strcasecmp		5021383	0					
ANR	5021498	Identifier	strcasecmp		5021383	0					
ANR	5021499	ArgumentList	command		5021383	1					
ANR	5021500	Argument	command		5021383	0					
ANR	5021501	Identifier	command		5021383	0					
ANR	5021502	Argument	VMGAHP_COMMAND_VM_RESUME		5021383	1					
ANR	5021503	Identifier	VMGAHP_COMMAND_VM_RESUME		5021383	0					
ANR	5021504	PrimaryExpression	0		5021383	1					
ANR	5021505	CompoundStatement		14:64:493:493	5021383	1					
ANR	5021506	ExpressionStatement	executeResume ( req )	628:2:14652:14670	5021383	0	True				
ANR	5021507	CallExpression	executeResume ( req )		5021383	0					
ANR	5021508	Callee	executeResume		5021383	0					
ANR	5021509	Identifier	executeResume		5021383	0					
ANR	5021510	ArgumentList	req		5021383	1					
ANR	5021511	Argument	req		5021383	0					
ANR	5021512	Identifier	req		5021383	0					
ANR	5021513	ElseStatement	else		5021383	0					
ANR	5021514	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0 )"		5021383	0					
ANR	5021515	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"	629:11:14683:14736	5021383	0	True				
ANR	5021516	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT ) == 0"		5021383	0		==			
ANR	5021517	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_CHECKPOINT )"		5021383	0					
ANR	5021518	Callee	strcasecmp		5021383	0					
ANR	5021519	Identifier	strcasecmp		5021383	0					
ANR	5021520	ArgumentList	command		5021383	1					
ANR	5021521	Argument	command		5021383	0					
ANR	5021522	Identifier	command		5021383	0					
ANR	5021523	Argument	VMGAHP_COMMAND_VM_CHECKPOINT		5021383	1					
ANR	5021524	Identifier	VMGAHP_COMMAND_VM_CHECKPOINT		5021383	0					
ANR	5021525	PrimaryExpression	0		5021383	1					
ANR	5021526	CompoundStatement		16:68:585:585	5021383	1					
ANR	5021527	ExpressionStatement	executeCheckpoint ( req )	630:2:14744:14766	5021383	0	True				
ANR	5021528	CallExpression	executeCheckpoint ( req )		5021383	0					
ANR	5021529	Callee	executeCheckpoint		5021383	0					
ANR	5021530	Identifier	executeCheckpoint		5021383	0					
ANR	5021531	ArgumentList	req		5021383	1					
ANR	5021532	Argument	req		5021383	0					
ANR	5021533	Identifier	req		5021383	0					
ANR	5021534	ElseStatement	else		5021383	0					
ANR	5021535	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0 )"		5021383	0					
ANR	5021536	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0"	631:11:14779:14828	5021383	0	True				
ANR	5021537	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS ) == 0"		5021383	0		==			
ANR	5021538	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_STATUS )"		5021383	0					
ANR	5021539	Callee	strcasecmp		5021383	0					
ANR	5021540	Identifier	strcasecmp		5021383	0					
ANR	5021541	ArgumentList	command		5021383	1					
ANR	5021542	Argument	command		5021383	0					
ANR	5021543	Identifier	command		5021383	0					
ANR	5021544	Argument	VMGAHP_COMMAND_VM_STATUS		5021383	1					
ANR	5021545	Identifier	VMGAHP_COMMAND_VM_STATUS		5021383	0					
ANR	5021546	PrimaryExpression	0		5021383	1					
ANR	5021547	CompoundStatement		18:64:677:677	5021383	1					
ANR	5021548	ExpressionStatement	executeStatus ( req )	632:2:14836:14854	5021383	0	True				
ANR	5021549	CallExpression	executeStatus ( req )		5021383	0					
ANR	5021550	Callee	executeStatus		5021383	0					
ANR	5021551	Identifier	executeStatus		5021383	0					
ANR	5021552	ArgumentList	req		5021383	1					
ANR	5021553	Argument	req		5021383	0					
ANR	5021554	Identifier	req		5021383	0					
ANR	5021555	ElseStatement	else		5021383	0					
ANR	5021556	IfStatement	"if ( strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0 )"		5021383	0					
ANR	5021557	Condition	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0"	633:11:14867:14916	5021383	0	True				
ANR	5021558	EqualityExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID ) == 0"		5021383	0		==			
ANR	5021559	CallExpression	"strcasecmp ( command , VMGAHP_COMMAND_VM_GETPID )"		5021383	0					
ANR	5021560	Callee	strcasecmp		5021383	0					
ANR	5021561	Identifier	strcasecmp		5021383	0					
ANR	5021562	ArgumentList	command		5021383	1					
ANR	5021563	Argument	command		5021383	0					
ANR	5021564	Identifier	command		5021383	0					
ANR	5021565	Argument	VMGAHP_COMMAND_VM_GETPID		5021383	1					
ANR	5021566	Identifier	VMGAHP_COMMAND_VM_GETPID		5021383	0					
ANR	5021567	PrimaryExpression	0		5021383	1					
ANR	5021568	CompoundStatement		20:64:765:765	5021383	1					
ANR	5021569	ExpressionStatement	executeGetpid ( req )	634:2:14924:14942	5021383	0	True				
ANR	5021570	CallExpression	executeGetpid ( req )		5021383	0					
ANR	5021571	Callee	executeGetpid		5021383	0					
ANR	5021572	Identifier	executeGetpid		5021383	0					
ANR	5021573	ArgumentList	req		5021383	1					
ANR	5021574	Argument	req		5021383	0					
ANR	5021575	Identifier	req		5021383	0					
ANR	5021576	ElseStatement	else		5021383	0					
ANR	5021577	CompoundStatement		22:8:797:797	5021383	0					
ANR	5021578	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Unknown command(%s)\\n"" , command )"	636:2:14956:15008	5021383	0	True				
ANR	5021579	CallExpression	"vmprintf ( D_ALWAYS , ""Unknown command(%s)\\n"" , command )"		5021383	0					
ANR	5021580	Callee	vmprintf		5021383	0					
ANR	5021581	Identifier	vmprintf		5021383	0					
ANR	5021582	ArgumentList	D_ALWAYS		5021383	1					
ANR	5021583	Argument	D_ALWAYS		5021383	0					
ANR	5021584	Identifier	D_ALWAYS		5021383	0					
ANR	5021585	Argument	"""Unknown command(%s)\\n"""		5021383	1					
ANR	5021586	PrimaryExpression	"""Unknown command(%s)\\n"""		5021383	0					
ANR	5021587	Argument	command		5021383	2					
ANR	5021588	Identifier	command		5021383	0					
ANR	5021589	ExpressionStatement	set_priv ( priv )	639:1:15015:15029	5021383	3	True				
ANR	5021590	CallExpression	set_priv ( priv )		5021383	0					
ANR	5021591	Callee	set_priv		5021383	0					
ANR	5021592	Identifier	set_priv		5021383	0					
ANR	5021593	ArgumentList	priv		5021383	1					
ANR	5021594	Argument	priv		5021383	0					
ANR	5021595	Identifier	priv		5021383	0					
ANR	5021596	ReturnType	void		5021383	1					
ANR	5021597	Identifier	VMGahp :: executeCommand		5021383	2					
ANR	5021598	ParameterList	VMRequest * req		5021383	3					
ANR	5021599	Parameter	VMRequest * req	613:23:14138:14151	5021383	0	True				
ANR	5021600	ParameterType	VMRequest *		5021383	0					
ANR	5021601	Identifier	req		5021383	1					
ANR	5021602	CFGEntryNode	ENTRY		5021383		True				
ANR	5021603	CFGExitNode	EXIT		5021383		True				
ANR	5021604	Symbol	VMGAHP_COMMAND_VM_RESUME		5021383						
ANR	5021605	Symbol	VMGAHP_COMMAND_VM_STOP		5021383						
ANR	5021606	Symbol	* req		5021383						
ANR	5021607	Symbol	D_ALWAYS		5021383						
ANR	5021608	Symbol	set_user_priv		5021383						
ANR	5021609	Symbol	VMGAHP_COMMAND_VM_START		5021383						
ANR	5021610	Symbol	VMGAHP_COMMAND_VM_SOFT_SUSPEND		5021383						
ANR	5021611	Symbol	req -> m_args		5021383						
ANR	5021612	Symbol	VMGAHP_COMMAND_VM_CHECKPOINT		5021383						
ANR	5021613	Symbol	command		5021383						
ANR	5021614	Symbol	* req -> m_args		5021383						
ANR	5021615	Symbol	* * req		5021383						
ANR	5021616	Symbol	req -> m_args . argv		5021383						
ANR	5021617	Symbol	VMGAHP_COMMAND_VM_SUSPEND		5021383						
ANR	5021618	Symbol	VMGAHP_COMMAND_VM_GETPID		5021383						
ANR	5021619	Symbol	priv		5021383						
ANR	5021620	Symbol	strcasecmp		5021383						
ANR	5021621	Symbol	req		5021383						
ANR	5021622	Symbol	* req -> m_args . argv		5021383						
ANR	5021623	Symbol	VMGAHP_COMMAND_VM_STATUS		5021383						
ANR	5021624	Function	VMGahp :: executeStart	642:0:15034:18106							
ANR	5021625	FunctionDef	VMGahp :: executeStart (VMRequest * req)		5021624	0					
ANR	5021626	CompoundStatement		644:0:15076:18106	5021624	0					
ANR	5021627	IdentifierDeclStatement	char * vmtype = req -> m_args . argv [ 2 ] ;	646:1:15134:15168	5021624	0	True				
ANR	5021628	IdentifierDecl	* vmtype = req -> m_args . argv [ 2 ]		5021624	0					
ANR	5021629	IdentifierDeclType	char *		5021624	0					
ANR	5021630	Identifier	vmtype		5021624	1					
ANR	5021631	AssignmentExpression	* vmtype = req -> m_args . argv [ 2 ]		5021624	2		=			
ANR	5021632	Identifier	vmtype		5021624	0					
ANR	5021633	ArrayIndexing	req -> m_args . argv [ 2 ]		5021624	1					
ANR	5021634	MemberAccess	req -> m_args . argv		5021624	0					
ANR	5021635	PtrMemberAccess	req -> m_args		5021624	0					
ANR	5021636	Identifier	req		5021624	0					
ANR	5021637	Identifier	m_args		5021624	1					
ANR	5021638	Identifier	argv		5021624	1					
ANR	5021639	PrimaryExpression	2		5021624	1					
ANR	5021640	IfStatement	if ( m_jobAd == NULL )		5021624	1					
ANR	5021641	Condition	m_jobAd == NULL	648:5:15176:15190	5021624	0	True				
ANR	5021642	EqualityExpression	m_jobAd == NULL		5021624	0		==			
ANR	5021643	Identifier	m_jobAd		5021624	0					
ANR	5021644	Identifier	NULL		5021624	1					
ANR	5021645	CompoundStatement		5:23:117:117	5021624	1					
ANR	5021646	ExpressionStatement	req -> m_has_result = true	649:2:15198:15222	5021624	0	True				
ANR	5021647	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021648	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021649	Identifier	req		5021624	0					
ANR	5021650	Identifier	m_has_result		5021624	1					
ANR	5021651	Identifier	true		5021624	1					
ANR	5021652	ExpressionStatement	req -> m_is_success = false	650:2:15226:15251	5021624	1	True				
ANR	5021653	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021654	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021655	Identifier	req		5021624	0					
ANR	5021656	Identifier	m_is_success		5021624	1					
ANR	5021657	Identifier	false		5021624	1					
ANR	5021658	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	651:2:15255:15300	5021624	2	True				
ANR	5021659	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	0		=			
ANR	5021660	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5021661	Identifier	req		5021624	0					
ANR	5021662	Identifier	m_result		5021624	1					
ANR	5021663	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	1					
ANR	5021664	ReturnStatement	return ;	652:2:15304:15310	5021624	3	True				
ANR	5021665	IdentifierDeclStatement	MyString vmworkingdir ;	655:1:15317:15338	5021624	2	True				
ANR	5021666	IdentifierDecl	vmworkingdir		5021624	0					
ANR	5021667	IdentifierDeclType	MyString		5021624	0					
ANR	5021668	Identifier	vmworkingdir		5021624	1					
ANR	5021669	IfStatement	"if ( m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1 )"		5021624	3					
ANR	5021670	Condition	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1"	656:5:15345:15403	5021624	0	True				
ANR	5021671	EqualityExpression	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir ) != 1"		5021624	0		!=			
ANR	5021672	CallExpression	"m_jobAd -> LookupString ( ""VM_WORKING_DIR"" , vmworkingdir )"		5021624	0					
ANR	5021673	Callee	m_jobAd -> LookupString		5021624	0					
ANR	5021674	PtrMemberAccess	m_jobAd -> LookupString		5021624	0					
ANR	5021675	Identifier	m_jobAd		5021624	0					
ANR	5021676	Identifier	LookupString		5021624	1					
ANR	5021677	ArgumentList	"""VM_WORKING_DIR"""		5021624	1					
ANR	5021678	Argument	"""VM_WORKING_DIR"""		5021624	0					
ANR	5021679	PrimaryExpression	"""VM_WORKING_DIR"""		5021624	0					
ANR	5021680	Argument	vmworkingdir		5021624	1					
ANR	5021681	Identifier	vmworkingdir		5021624	0					
ANR	5021682	PrimaryExpression	1		5021624	1					
ANR	5021683	CompoundStatement		13:67:330:330	5021624	1					
ANR	5021684	ExpressionStatement	req -> m_has_result = true	657:2:15411:15435	5021624	0	True				
ANR	5021685	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021686	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021687	Identifier	req		5021624	0					
ANR	5021688	Identifier	m_has_result		5021624	1					
ANR	5021689	Identifier	true		5021624	1					
ANR	5021690	ExpressionStatement	req -> m_is_success = false	658:2:15439:15464	5021624	1	True				
ANR	5021691	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021692	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021693	Identifier	req		5021624	0					
ANR	5021694	Identifier	m_is_success		5021624	1					
ANR	5021695	Identifier	false		5021624	1					
ANR	5021696	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	659:2:15468:15513	5021624	2	True				
ANR	5021697	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	0		=			
ANR	5021698	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5021699	Identifier	req		5021624	0					
ANR	5021700	Identifier	m_result		5021624	1					
ANR	5021701	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	1					
ANR	5021702	ExpressionStatement	"vmprintf ( D_ALWAYS , ""VM_WORKING_DIR cannot be found in vm classAd\\n"" )"	660:2:15517:15585	5021624	3	True				
ANR	5021703	CallExpression	"vmprintf ( D_ALWAYS , ""VM_WORKING_DIR cannot be found in vm classAd\\n"" )"		5021624	0					
ANR	5021704	Callee	vmprintf		5021624	0					
ANR	5021705	Identifier	vmprintf		5021624	0					
ANR	5021706	ArgumentList	D_ALWAYS		5021624	1					
ANR	5021707	Argument	D_ALWAYS		5021624	0					
ANR	5021708	Identifier	D_ALWAYS		5021624	0					
ANR	5021709	Argument	"""VM_WORKING_DIR cannot be found in vm classAd\\n"""		5021624	1					
ANR	5021710	PrimaryExpression	"""VM_WORKING_DIR cannot be found in vm classAd\\n"""		5021624	0					
ANR	5021711	ReturnStatement	return ;	661:2:15589:15595	5021624	4	True				
ANR	5021712	IdentifierDeclStatement	MyString job_vmtype ;	664:1:15602:15621	5021624	4	True				
ANR	5021713	IdentifierDecl	job_vmtype		5021624	0					
ANR	5021714	IdentifierDeclType	MyString		5021624	0					
ANR	5021715	Identifier	job_vmtype		5021624	1					
ANR	5021716	IfStatement	"if ( m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1 )"		5021624	5					
ANR	5021717	Condition	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1"	665:5:15628:15684	5021624	0	True				
ANR	5021718	EqualityExpression	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype ) != 1"		5021624	0		!=			
ANR	5021719	CallExpression	"m_jobAd -> LookupString ( ATTR_JOB_VM_TYPE , job_vmtype )"		5021624	0					
ANR	5021720	Callee	m_jobAd -> LookupString		5021624	0					
ANR	5021721	PtrMemberAccess	m_jobAd -> LookupString		5021624	0					
ANR	5021722	Identifier	m_jobAd		5021624	0					
ANR	5021723	Identifier	LookupString		5021624	1					
ANR	5021724	ArgumentList	ATTR_JOB_VM_TYPE		5021624	1					
ANR	5021725	Argument	ATTR_JOB_VM_TYPE		5021624	0					
ANR	5021726	Identifier	ATTR_JOB_VM_TYPE		5021624	0					
ANR	5021727	Argument	job_vmtype		5021624	1					
ANR	5021728	Identifier	job_vmtype		5021624	0					
ANR	5021729	PrimaryExpression	1		5021624	1					
ANR	5021730	CompoundStatement		22:65:611:611	5021624	1					
ANR	5021731	ExpressionStatement	req -> m_has_result = true	666:2:15692:15716	5021624	0	True				
ANR	5021732	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021733	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021734	Identifier	req		5021624	0					
ANR	5021735	Identifier	m_has_result		5021624	1					
ANR	5021736	Identifier	true		5021624	1					
ANR	5021737	ExpressionStatement	req -> m_is_success = false	667:2:15720:15745	5021624	1	True				
ANR	5021738	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021739	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021740	Identifier	req		5021624	0					
ANR	5021741	Identifier	m_is_success		5021624	1					
ANR	5021742	Identifier	false		5021624	1					
ANR	5021743	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO	668:2:15749:15794	5021624	2	True				
ANR	5021744	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	0		=			
ANR	5021745	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5021746	Identifier	req		5021624	0					
ANR	5021747	Identifier	m_result		5021624	1					
ANR	5021748	Identifier	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624	1					
ANR	5021749	ExpressionStatement	"vmprintf ( D_ALWAYS , ""VM_TYPE('%s') cannot be found in vm classAd\\n"" , ATTR_JOB_VM_TYPE )"	669:2:15798:15890	5021624	3	True				
ANR	5021750	CallExpression	"vmprintf ( D_ALWAYS , ""VM_TYPE('%s') cannot be found in vm classAd\\n"" , ATTR_JOB_VM_TYPE )"		5021624	0					
ANR	5021751	Callee	vmprintf		5021624	0					
ANR	5021752	Identifier	vmprintf		5021624	0					
ANR	5021753	ArgumentList	D_ALWAYS		5021624	1					
ANR	5021754	Argument	D_ALWAYS		5021624	0					
ANR	5021755	Identifier	D_ALWAYS		5021624	0					
ANR	5021756	Argument	"""VM_TYPE('%s') cannot be found in vm classAd\\n"""		5021624	1					
ANR	5021757	PrimaryExpression	"""VM_TYPE('%s') cannot be found in vm classAd\\n"""		5021624	0					
ANR	5021758	Argument	ATTR_JOB_VM_TYPE		5021624	2					
ANR	5021759	Identifier	ATTR_JOB_VM_TYPE		5021624	0					
ANR	5021760	ReturnStatement	return ;	671:2:15894:15900	5021624	4	True				
ANR	5021761	IfStatement	"if ( strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0 )"		5021624	6					
ANR	5021762	Condition	"strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0"	674:4:15910:15952	5021624	0	True				
ANR	5021763	EqualityExpression	"strcasecmp ( vmtype , job_vmtype . Value ( ) ) != 0"		5021624	0		!=			
ANR	5021764	CallExpression	"strcasecmp ( vmtype , job_vmtype . Value ( ) )"		5021624	0					
ANR	5021765	Callee	strcasecmp		5021624	0					
ANR	5021766	Identifier	strcasecmp		5021624	0					
ANR	5021767	ArgumentList	vmtype		5021624	1					
ANR	5021768	Argument	vmtype		5021624	0					
ANR	5021769	Identifier	vmtype		5021624	0					
ANR	5021770	Argument	job_vmtype . Value ( )		5021624	1					
ANR	5021771	CallExpression	job_vmtype . Value ( )		5021624	0					
ANR	5021772	Callee	job_vmtype . Value		5021624	0					
ANR	5021773	MemberAccess	job_vmtype . Value		5021624	0					
ANR	5021774	Identifier	job_vmtype		5021624	0					
ANR	5021775	Identifier	Value		5021624	1					
ANR	5021776	ArgumentList			5021624	1					
ANR	5021777	PrimaryExpression	0		5021624	1					
ANR	5021778	CompoundStatement		31:50:879:879	5021624	1					
ANR	5021779	ExpressionStatement	req -> m_has_result = true	675:2:15960:15984	5021624	0	True				
ANR	5021780	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021781	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021782	Identifier	req		5021624	0					
ANR	5021783	Identifier	m_has_result		5021624	1					
ANR	5021784	Identifier	true		5021624	1					
ANR	5021785	ExpressionStatement	req -> m_is_success = false	676:2:15988:16013	5021624	1	True				
ANR	5021786	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021787	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021788	Identifier	req		5021624	0					
ANR	5021789	Identifier	m_is_success		5021624	1					
ANR	5021790	Identifier	false		5021624	1					
ANR	5021791	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	677:2:16017:16064	5021624	2	True				
ANR	5021792	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	0		=			
ANR	5021793	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5021794	Identifier	req		5021624	0					
ANR	5021795	Identifier	m_result		5021624	1					
ANR	5021796	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	1					
ANR	5021797	Statement	vmprintf	678:2:16068:16075	5021624	3	True				
ANR	5021798	Statement	(	678:10:16076:16076	5021624	4	True				
ANR	5021799	Statement	D_ALWAYS	678:11:16077:16084	5021624	5	True				
ANR	5021800	Statement	","	678:19:16085:16085	5021624	6	True				
ANR	5021801	Statement	"""Argument is %s but VM_TYPE in job classAD """	678:21:16087:16130	5021624	7	True				
ANR	5021802	Statement	"""is %s\\n"""	679:6:16138:16146	5021624	8	True				
ANR	5021803	Statement	","	679:15:16147:16147	5021624	9	True				
ANR	5021804	Statement	vmtype	679:17:16149:16154	5021624	10	True				
ANR	5021805	Statement	","	679:23:16155:16155	5021624	11	True				
ANR	5021806	Statement	job_vmtype	679:25:16157:16166	5021624	12	True				
ANR	5021807	Statement	.	679:35:16167:16167	5021624	13	True				
ANR	5021808	Statement	Value	679:36:16168:16172	5021624	14	True				
ANR	5021809	Statement	(	679:41:16173:16173	5021624	15	True				
ANR	5021810	Statement	)	679:42:16174:16174	5021624	16	True				
ANR	5021811	Statement	)	679:43:16175:16175	5021624	17	True				
ANR	5021812	ExpressionStatement		679:44:16176:16176	5021624	18	True				
ANR	5021813	ReturnStatement	return ;	680:2:16180:16186	5021624	19	True				
ANR	5021814	IfStatement	"if ( strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0 )"		5021624	7					
ANR	5021815	Condition	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0"	683:4:16196:16252	5021624	0	True				
ANR	5021816	EqualityExpression	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) ) != 0"		5021624	0		!=			
ANR	5021817	CallExpression	"strcasecmp ( vmtype , m_gahp_config -> m_vm_type . Value ( ) )"		5021624	0					
ANR	5021818	Callee	strcasecmp		5021624	0					
ANR	5021819	Identifier	strcasecmp		5021624	0					
ANR	5021820	ArgumentList	vmtype		5021624	1					
ANR	5021821	Argument	vmtype		5021624	0					
ANR	5021822	Identifier	vmtype		5021624	0					
ANR	5021823	Argument	m_gahp_config -> m_vm_type . Value ( )		5021624	1					
ANR	5021824	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5021624	0					
ANR	5021825	Callee	m_gahp_config -> m_vm_type . Value		5021624	0					
ANR	5021826	MemberAccess	m_gahp_config -> m_vm_type . Value		5021624	0					
ANR	5021827	PtrMemberAccess	m_gahp_config -> m_vm_type		5021624	0					
ANR	5021828	Identifier	m_gahp_config		5021624	0					
ANR	5021829	Identifier	m_vm_type		5021624	1					
ANR	5021830	Identifier	Value		5021624	1					
ANR	5021831	ArgumentList			5021624	1					
ANR	5021832	PrimaryExpression	0		5021624	1					
ANR	5021833	CompoundStatement		40:64:1179:1179	5021624	1					
ANR	5021834	ExpressionStatement	req -> m_has_result = true	684:2:16260:16284	5021624	0	True				
ANR	5021835	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021836	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021837	Identifier	req		5021624	0					
ANR	5021838	Identifier	m_has_result		5021624	1					
ANR	5021839	Identifier	true		5021624	1					
ANR	5021840	ExpressionStatement	req -> m_is_success = false	685:2:16288:16313	5021624	1	True				
ANR	5021841	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021842	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021843	Identifier	req		5021624	0					
ANR	5021844	Identifier	m_is_success		5021624	1					
ANR	5021845	Identifier	false		5021624	1					
ANR	5021846	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	686:2:16317:16364	5021624	2	True				
ANR	5021847	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	0		=			
ANR	5021848	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5021849	Identifier	req		5021624	0					
ANR	5021850	Identifier	m_result		5021624	1					
ANR	5021851	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	1					
ANR	5021852	ReturnStatement	return ;	687:2:16368:16374	5021624	3	True				
ANR	5021853	IdentifierDeclStatement	VMType * new_vm = NULL ;	690:1:16381:16402	5021624	8	True				
ANR	5021854	IdentifierDecl	* new_vm = NULL		5021624	0					
ANR	5021855	IdentifierDeclType	VMType *		5021624	0					
ANR	5021856	Identifier	new_vm		5021624	1					
ANR	5021857	AssignmentExpression	* new_vm = NULL		5021624	2		=			
ANR	5021858	Identifier	NULL		5021624	0					
ANR	5021859	Identifier	NULL		5021624	1					
ANR	5021860	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0 )"		5021624	9					
ANR	5021861	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0"	694:4:16519:16565	5021624	0	True				
ANR	5021862	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN ) == 0"		5021624	0		==			
ANR	5021863	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_XEN )"		5021624	0					
ANR	5021864	Callee	strcasecmp		5021624	0					
ANR	5021865	Identifier	strcasecmp		5021624	0					
ANR	5021866	ArgumentList	vmtype		5021624	1					
ANR	5021867	Argument	vmtype		5021624	0					
ANR	5021868	Identifier	vmtype		5021624	0					
ANR	5021869	Argument	CONDOR_VM_UNIVERSE_XEN		5021624	1					
ANR	5021870	Identifier	CONDOR_VM_UNIVERSE_XEN		5021624	0					
ANR	5021871	PrimaryExpression	0		5021624	1					
ANR	5021872	CompoundStatement		51:54:1492:1492	5021624	1					
ANR	5021873	ExpressionStatement	"new_vm = new XenType ( vmworkingdir . Value ( ) , m_jobAd )"	695:2:16573:16626	5021624	0	True				
ANR	5021874	AssignmentExpression	"new_vm = new XenType ( vmworkingdir . Value ( ) , m_jobAd )"		5021624	0		=			
ANR	5021875	Identifier	new_vm		5021624	0					
ANR	5021876	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5021624	1					
ANR	5021877	CallExpression	vmworkingdir . Value ( )		5021624	0					
ANR	5021878	Callee	vmworkingdir . Value		5021624	0					
ANR	5021879	MemberAccess	vmworkingdir . Value		5021624	0					
ANR	5021880	Identifier	vmworkingdir		5021624	0					
ANR	5021881	Identifier	Value		5021624	1					
ANR	5021882	ArgumentList			5021624	1					
ANR	5021883	Identifier	m_jobAd		5021624	1					
ANR	5021884	ExpressionStatement	ASSERT ( new_vm )	696:2:16630:16644	5021624	1	True				
ANR	5021885	CallExpression	ASSERT ( new_vm )		5021624	0					
ANR	5021886	Callee	ASSERT		5021624	0					
ANR	5021887	Identifier	ASSERT		5021624	0					
ANR	5021888	ArgumentList	new_vm		5021624	1					
ANR	5021889	Argument	new_vm		5021624	0					
ANR	5021890	Identifier	new_vm		5021624	0					
ANR	5021891	ElseStatement	else		5021624	0					
ANR	5021892	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5021624	0					
ANR	5021893	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0"	697:10:16656:16702	5021624	0	True				
ANR	5021894	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM ) == 0"		5021624	0		==			
ANR	5021895	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_KVM )"		5021624	0					
ANR	5021896	Callee	strcasecmp		5021624	0					
ANR	5021897	Identifier	strcasecmp		5021624	0					
ANR	5021898	ArgumentList	vmtype		5021624	1					
ANR	5021899	Argument	vmtype		5021624	0					
ANR	5021900	Identifier	vmtype		5021624	0					
ANR	5021901	Argument	CONDOR_VM_UNIVERSE_KVM		5021624	1					
ANR	5021902	Identifier	CONDOR_VM_UNIVERSE_KVM		5021624	0					
ANR	5021903	PrimaryExpression	0		5021624	1					
ANR	5021904	CompoundStatement		54:59:1628:1628	5021624	1					
ANR	5021905	ExpressionStatement	"new_vm = new KVMType ( vmworkingdir . Value ( ) , m_jobAd )"	698:3:16710:16766	5021624	0	True				
ANR	5021906	AssignmentExpression	"new_vm = new KVMType ( vmworkingdir . Value ( ) , m_jobAd )"		5021624	0		=			
ANR	5021907	Identifier	new_vm		5021624	0					
ANR	5021908	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5021624	1					
ANR	5021909	CallExpression	vmworkingdir . Value ( )		5021624	0					
ANR	5021910	Callee	vmworkingdir . Value		5021624	0					
ANR	5021911	MemberAccess	vmworkingdir . Value		5021624	0					
ANR	5021912	Identifier	vmworkingdir		5021624	0					
ANR	5021913	Identifier	Value		5021624	1					
ANR	5021914	ArgumentList			5021624	1					
ANR	5021915	Identifier	m_jobAd		5021624	1					
ANR	5021916	ExpressionStatement	ASSERT ( new_vm )	700:2:16770:16784	5021624	1	True				
ANR	5021917	CallExpression	ASSERT ( new_vm )		5021624	0					
ANR	5021918	Callee	ASSERT		5021624	0					
ANR	5021919	Identifier	ASSERT		5021624	0					
ANR	5021920	ArgumentList	new_vm		5021624	1					
ANR	5021921	Argument	new_vm		5021624	0					
ANR	5021922	Identifier	new_vm		5021624	0					
ANR	5021923	ElseStatement	else		5021624	0					
ANR	5021924	IfStatement	"if ( strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5021624	0					
ANR	5021925	Condition	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	703:4:16804:16853	5021624	0	True				
ANR	5021926	EqualityExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5021624	0		==			
ANR	5021927	CallExpression	"strcasecmp ( vmtype , CONDOR_VM_UNIVERSE_VMWARE )"		5021624	0					
ANR	5021928	Callee	strcasecmp		5021624	0					
ANR	5021929	Identifier	strcasecmp		5021624	0					
ANR	5021930	ArgumentList	vmtype		5021624	1					
ANR	5021931	Argument	vmtype		5021624	0					
ANR	5021932	Identifier	vmtype		5021624	0					
ANR	5021933	Argument	CONDOR_VM_UNIVERSE_VMWARE		5021624	1					
ANR	5021934	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5021624	0					
ANR	5021935	PrimaryExpression	0		5021624	1					
ANR	5021936	CompoundStatement		60:57:1780:1780	5021624	1					
ANR	5021937	ExpressionStatement	"new_vm = new VMwareType ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd )"	704:2:16861:17001	5021624	0	True				
ANR	5021938	AssignmentExpression	"new_vm = new VMwareType ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd )"		5021624	0		=			
ANR	5021939	Identifier	new_vm		5021624	0					
ANR	5021940	Expression	"m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd"		5021624	1					
ANR	5021941	CallExpression	m_gahp_config -> m_prog_for_script . Value ( )		5021624	0					
ANR	5021942	Callee	m_gahp_config -> m_prog_for_script . Value		5021624	0					
ANR	5021943	MemberAccess	m_gahp_config -> m_prog_for_script . Value		5021624	0					
ANR	5021944	PtrMemberAccess	m_gahp_config -> m_prog_for_script		5021624	0					
ANR	5021945	Identifier	m_gahp_config		5021624	0					
ANR	5021946	Identifier	m_prog_for_script		5021624	1					
ANR	5021947	Identifier	Value		5021624	1					
ANR	5021948	ArgumentList			5021624	1					
ANR	5021949	Expression	"m_gahp_config -> m_vm_script . Value ( ) , vmworkingdir . Value ( ) , m_jobAd"		5021624	1					
ANR	5021950	CallExpression	m_gahp_config -> m_vm_script . Value ( )		5021624	0					
ANR	5021951	Callee	m_gahp_config -> m_vm_script . Value		5021624	0					
ANR	5021952	MemberAccess	m_gahp_config -> m_vm_script . Value		5021624	0					
ANR	5021953	PtrMemberAccess	m_gahp_config -> m_vm_script		5021624	0					
ANR	5021954	Identifier	m_gahp_config		5021624	0					
ANR	5021955	Identifier	m_vm_script		5021624	1					
ANR	5021956	Identifier	Value		5021624	1					
ANR	5021957	ArgumentList			5021624	1					
ANR	5021958	Expression	"vmworkingdir . Value ( ) , m_jobAd"		5021624	1					
ANR	5021959	CallExpression	vmworkingdir . Value ( )		5021624	0					
ANR	5021960	Callee	vmworkingdir . Value		5021624	0					
ANR	5021961	MemberAccess	vmworkingdir . Value		5021624	0					
ANR	5021962	Identifier	vmworkingdir		5021624	0					
ANR	5021963	Identifier	Value		5021624	1					
ANR	5021964	ArgumentList			5021624	1					
ANR	5021965	Identifier	m_jobAd		5021624	1					
ANR	5021966	ExpressionStatement	ASSERT ( new_vm )	707:2:17005:17019	5021624	1	True				
ANR	5021967	CallExpression	ASSERT ( new_vm )		5021624	0					
ANR	5021968	Callee	ASSERT		5021624	0					
ANR	5021969	Identifier	ASSERT		5021624	0					
ANR	5021970	ArgumentList	new_vm		5021624	1					
ANR	5021971	Argument	new_vm		5021624	0					
ANR	5021972	Identifier	new_vm		5021624	0					
ANR	5021973	ElseStatement	else		5021624	0					
ANR	5021974	CompoundStatement		66:3:1954:1954	5021624	0					
ANR	5021975	ExpressionStatement	"vmprintf ( D_ALWAYS , ""vmtype(%s) is not yet implemented\\n"" , vmtype )"	711:2:17065:17130	5021624	0	True				
ANR	5021976	CallExpression	"vmprintf ( D_ALWAYS , ""vmtype(%s) is not yet implemented\\n"" , vmtype )"		5021624	0					
ANR	5021977	Callee	vmprintf		5021624	0					
ANR	5021978	Identifier	vmprintf		5021624	0					
ANR	5021979	ArgumentList	D_ALWAYS		5021624	1					
ANR	5021980	Argument	D_ALWAYS		5021624	0					
ANR	5021981	Identifier	D_ALWAYS		5021624	0					
ANR	5021982	Argument	"""vmtype(%s) is not yet implemented\\n"""		5021624	1					
ANR	5021983	PrimaryExpression	"""vmtype(%s) is not yet implemented\\n"""		5021624	0					
ANR	5021984	Argument	vmtype		5021624	2					
ANR	5021985	Identifier	vmtype		5021624	0					
ANR	5021986	ExpressionStatement	req -> m_has_result = true	712:2:17134:17158	5021624	1	True				
ANR	5021987	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5021988	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5021989	Identifier	req		5021624	0					
ANR	5021990	Identifier	m_has_result		5021624	1					
ANR	5021991	Identifier	true		5021624	1					
ANR	5021992	ExpressionStatement	req -> m_is_success = false	713:2:17162:17187	5021624	2	True				
ANR	5021993	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5021994	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5021995	Identifier	req		5021624	0					
ANR	5021996	Identifier	m_is_success		5021624	1					
ANR	5021997	Identifier	false		5021624	1					
ANR	5021998	ExpressionStatement	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE	714:2:17191:17238	5021624	3	True				
ANR	5021999	AssignmentExpression	req -> m_result = VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	0		=			
ANR	5022000	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5022001	Identifier	req		5021624	0					
ANR	5022002	Identifier	m_result		5021624	1					
ANR	5022003	Identifier	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624	1					
ANR	5022004	ReturnStatement	return ;	715:2:17242:17248	5021624	4	True				
ANR	5022005	ExpressionStatement	new_vm -> Config ( )	718:1:17255:17271	5021624	10	True				
ANR	5022006	CallExpression	new_vm -> Config ( )		5021624	0					
ANR	5022007	Callee	new_vm -> Config		5021624	0					
ANR	5022008	PtrMemberAccess	new_vm -> Config		5021624	0					
ANR	5022009	Identifier	new_vm		5021624	0					
ANR	5022010	Identifier	Config		5021624	1					
ANR	5022011	ArgumentList			5021624	1					
ANR	5022012	IfStatement	if ( new_vm -> CreateConfigFile ( ) == false )		5021624	11					
ANR	5022013	Condition	new_vm -> CreateConfigFile ( ) == false	719:5:17278:17312	5021624	0	True				
ANR	5022014	EqualityExpression	new_vm -> CreateConfigFile ( ) == false		5021624	0		==			
ANR	5022015	CallExpression	new_vm -> CreateConfigFile ( )		5021624	0					
ANR	5022016	Callee	new_vm -> CreateConfigFile		5021624	0					
ANR	5022017	PtrMemberAccess	new_vm -> CreateConfigFile		5021624	0					
ANR	5022018	Identifier	new_vm		5021624	0					
ANR	5022019	Identifier	CreateConfigFile		5021624	1					
ANR	5022020	ArgumentList			5021624	1					
ANR	5022021	Identifier	false		5021624	1					
ANR	5022022	CompoundStatement		76:43:2239:2239	5021624	1					
ANR	5022023	ExpressionStatement	req -> m_has_result = true	720:2:17320:17344	5021624	0	True				
ANR	5022024	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5022025	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5022026	Identifier	req		5021624	0					
ANR	5022027	Identifier	m_has_result		5021624	1					
ANR	5022028	Identifier	true		5021624	1					
ANR	5022029	ExpressionStatement	req -> m_is_success = false	721:2:17348:17373	5021624	1	True				
ANR	5022030	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5022031	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5022032	Identifier	req		5021624	0					
ANR	5022033	Identifier	m_is_success		5021624	1					
ANR	5022034	Identifier	false		5021624	1					
ANR	5022035	ExpressionStatement	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )	722:2:17377:17439	5021624	2	True				
ANR	5022036	AssignmentExpression	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5021624	0		=			
ANR	5022037	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5022038	Identifier	req		5021624	0					
ANR	5022039	Identifier	m_result		5021624	1					
ANR	5022040	CallExpression	makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5021624	1					
ANR	5022041	Callee	makeErrorMessage		5021624	0					
ANR	5022042	Identifier	makeErrorMessage		5021624	0					
ANR	5022043	ArgumentList	new_vm -> m_result_msg . Value ( )		5021624	1					
ANR	5022044	Argument	new_vm -> m_result_msg . Value ( )		5021624	0					
ANR	5022045	CallExpression	new_vm -> m_result_msg . Value ( )		5021624	0					
ANR	5022046	Callee	new_vm -> m_result_msg . Value		5021624	0					
ANR	5022047	MemberAccess	new_vm -> m_result_msg . Value		5021624	0					
ANR	5022048	PtrMemberAccess	new_vm -> m_result_msg		5021624	0					
ANR	5022049	Identifier	new_vm		5021624	0					
ANR	5022050	Identifier	m_result_msg		5021624	1					
ANR	5022051	Identifier	Value		5021624	1					
ANR	5022052	ArgumentList			5021624	1					
ANR	5022053	Statement	delete	723:2:17443:17448	5021624	3	True				
ANR	5022054	ExpressionStatement	new_vm	723:9:17450:17456	5021624	4	True				
ANR	5022055	Identifier	new_vm		5021624	0					
ANR	5022056	ExpressionStatement	new_vm = NULL	724:2:17460:17473	5021624	5	True				
ANR	5022057	AssignmentExpression	new_vm = NULL		5021624	0		=			
ANR	5022058	Identifier	new_vm		5021624	0					
ANR	5022059	Identifier	NULL		5021624	1					
ANR	5022060	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""CreateConfigFile fails in executeStart!\\n"" )"	725:2:17477:17543	5021624	6	True				
ANR	5022061	CallExpression	"vmprintf ( D_FULLDEBUG , ""CreateConfigFile fails in executeStart!\\n"" )"		5021624	0					
ANR	5022062	Callee	vmprintf		5021624	0					
ANR	5022063	Identifier	vmprintf		5021624	0					
ANR	5022064	ArgumentList	D_FULLDEBUG		5021624	1					
ANR	5022065	Argument	D_FULLDEBUG		5021624	0					
ANR	5022066	Identifier	D_FULLDEBUG		5021624	0					
ANR	5022067	Argument	"""CreateConfigFile fails in executeStart!\\n"""		5021624	1					
ANR	5022068	PrimaryExpression	"""CreateConfigFile fails in executeStart!\\n"""		5021624	0					
ANR	5022069	ReturnStatement	return ;	726:2:17547:17553	5021624	7	True				
ANR	5022070	IdentifierDeclStatement	int result = new_vm -> Start ( ) ;	729:1:17560:17588	5021624	12	True				
ANR	5022071	IdentifierDecl	result = new_vm -> Start ( )		5021624	0					
ANR	5022072	IdentifierDeclType	int		5021624	0					
ANR	5022073	Identifier	result		5021624	1					
ANR	5022074	AssignmentExpression	result = new_vm -> Start ( )		5021624	2		=			
ANR	5022075	Identifier	result		5021624	0					
ANR	5022076	CallExpression	new_vm -> Start ( )		5021624	1					
ANR	5022077	Callee	new_vm -> Start		5021624	0					
ANR	5022078	PtrMemberAccess	new_vm -> Start		5021624	0					
ANR	5022079	Identifier	new_vm		5021624	0					
ANR	5022080	Identifier	Start		5021624	1					
ANR	5022081	ArgumentList			5021624	1					
ANR	5022082	IfStatement	if ( result == false )		5021624	13					
ANR	5022083	Condition	result == false	731:4:17595:17609	5021624	0	True				
ANR	5022084	EqualityExpression	result == false		5021624	0		==			
ANR	5022085	Identifier	result		5021624	0					
ANR	5022086	Identifier	false		5021624	1					
ANR	5022087	CompoundStatement		88:21:2535:2535	5021624	1					
ANR	5022088	ExpressionStatement	req -> m_has_result = true	732:2:17616:17640	5021624	0	True				
ANR	5022089	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5022090	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5022091	Identifier	req		5021624	0					
ANR	5022092	Identifier	m_has_result		5021624	1					
ANR	5022093	Identifier	true		5021624	1					
ANR	5022094	ExpressionStatement	req -> m_is_success = false	733:2:17644:17669	5021624	1	True				
ANR	5022095	AssignmentExpression	req -> m_is_success = false		5021624	0		=			
ANR	5022096	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5022097	Identifier	req		5021624	0					
ANR	5022098	Identifier	m_is_success		5021624	1					
ANR	5022099	Identifier	false		5021624	1					
ANR	5022100	ExpressionStatement	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )	734:2:17673:17735	5021624	2	True				
ANR	5022101	AssignmentExpression	req -> m_result = makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5021624	0		=			
ANR	5022102	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5022103	Identifier	req		5021624	0					
ANR	5022104	Identifier	m_result		5021624	1					
ANR	5022105	CallExpression	makeErrorMessage ( new_vm -> m_result_msg . Value ( ) )		5021624	1					
ANR	5022106	Callee	makeErrorMessage		5021624	0					
ANR	5022107	Identifier	makeErrorMessage		5021624	0					
ANR	5022108	ArgumentList	new_vm -> m_result_msg . Value ( )		5021624	1					
ANR	5022109	Argument	new_vm -> m_result_msg . Value ( )		5021624	0					
ANR	5022110	CallExpression	new_vm -> m_result_msg . Value ( )		5021624	0					
ANR	5022111	Callee	new_vm -> m_result_msg . Value		5021624	0					
ANR	5022112	MemberAccess	new_vm -> m_result_msg . Value		5021624	0					
ANR	5022113	PtrMemberAccess	new_vm -> m_result_msg		5021624	0					
ANR	5022114	Identifier	new_vm		5021624	0					
ANR	5022115	Identifier	m_result_msg		5021624	1					
ANR	5022116	Identifier	Value		5021624	1					
ANR	5022117	ArgumentList			5021624	1					
ANR	5022118	Statement	delete	735:2:17739:17744	5021624	3	True				
ANR	5022119	ExpressionStatement	new_vm	735:9:17746:17752	5021624	4	True				
ANR	5022120	Identifier	new_vm		5021624	0					
ANR	5022121	ExpressionStatement	new_vm = NULL	736:2:17756:17769	5021624	5	True				
ANR	5022122	AssignmentExpression	new_vm = NULL		5021624	0		=			
ANR	5022123	Identifier	new_vm		5021624	0					
ANR	5022124	Identifier	NULL		5021624	1					
ANR	5022125	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStart fail!\\n"" )"	737:2:17773:17818	5021624	6	True				
ANR	5022126	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStart fail!\\n"" )"		5021624	0					
ANR	5022127	Callee	vmprintf		5021624	0					
ANR	5022128	Identifier	vmprintf		5021624	0					
ANR	5022129	ArgumentList	D_FULLDEBUG		5021624	1					
ANR	5022130	Argument	D_FULLDEBUG		5021624	0					
ANR	5022131	Identifier	D_FULLDEBUG		5021624	0					
ANR	5022132	Argument	"""executeStart fail!\\n"""		5021624	1					
ANR	5022133	PrimaryExpression	"""executeStart fail!\\n"""		5021624	0					
ANR	5022134	ReturnStatement	return ;	738:2:17822:17828	5021624	7	True				
ANR	5022135	ElseStatement	else		5021624	0					
ANR	5022136	CompoundStatement		96:8:2761:2761	5021624	0					
ANR	5022137	ExpressionStatement	req -> m_has_result = true	741:2:17874:17898	5021624	0	True				
ANR	5022138	AssignmentExpression	req -> m_has_result = true		5021624	0		=			
ANR	5022139	PtrMemberAccess	req -> m_has_result		5021624	0					
ANR	5022140	Identifier	req		5021624	0					
ANR	5022141	Identifier	m_has_result		5021624	1					
ANR	5022142	Identifier	true		5021624	1					
ANR	5022143	ExpressionStatement	req -> m_is_success = true	742:2:17902:17926	5021624	1	True				
ANR	5022144	AssignmentExpression	req -> m_is_success = true		5021624	0		=			
ANR	5022145	PtrMemberAccess	req -> m_is_success		5021624	0					
ANR	5022146	Identifier	req		5021624	0					
ANR	5022147	Identifier	m_is_success		5021624	1					
ANR	5022148	Identifier	true		5021624	1					
ANR	5022149	ExpressionStatement	"req -> m_result = """""	745:2:17965:17983	5021624	2	True				
ANR	5022150	AssignmentExpression	"req -> m_result = """""		5021624	0		=			
ANR	5022151	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5022152	Identifier	req		5021624	0					
ANR	5022153	Identifier	m_result		5021624	1					
ANR	5022154	PrimaryExpression	""""""		5021624	1					
ANR	5022155	ExpressionStatement	req -> m_result += new_vm -> getVMId ( )	746:2:17987:18021	5021624	3	True				
ANR	5022156	AssignmentExpression	req -> m_result += new_vm -> getVMId ( )		5021624	0		+=			
ANR	5022157	PtrMemberAccess	req -> m_result		5021624	0					
ANR	5022158	Identifier	req		5021624	0					
ANR	5022159	Identifier	m_result		5021624	1					
ANR	5022160	CallExpression	new_vm -> getVMId ( )		5021624	1					
ANR	5022161	Callee	new_vm -> getVMId		5021624	0					
ANR	5022162	PtrMemberAccess	new_vm -> getVMId		5021624	0					
ANR	5022163	Identifier	new_vm		5021624	0					
ANR	5022164	Identifier	getVMId		5021624	1					
ANR	5022165	ArgumentList			5021624	1					
ANR	5022166	ExpressionStatement	addVM ( new_vm )	748:2:18026:18039	5021624	4	True				
ANR	5022167	CallExpression	addVM ( new_vm )		5021624	0					
ANR	5022168	Callee	addVM		5021624	0					
ANR	5022169	Identifier	addVM		5021624	0					
ANR	5022170	ArgumentList	new_vm		5021624	1					
ANR	5022171	Argument	new_vm		5021624	0					
ANR	5022172	Identifier	new_vm		5021624	0					
ANR	5022173	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStart success!\\n"" )"	749:2:18043:18091	5021624	5	True				
ANR	5022174	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStart success!\\n"" )"		5021624	0					
ANR	5022175	Callee	vmprintf		5021624	0					
ANR	5022176	Identifier	vmprintf		5021624	0					
ANR	5022177	ArgumentList	D_FULLDEBUG		5021624	1					
ANR	5022178	Argument	D_FULLDEBUG		5021624	0					
ANR	5022179	Identifier	D_FULLDEBUG		5021624	0					
ANR	5022180	Argument	"""executeStart success!\\n"""		5021624	1					
ANR	5022181	PrimaryExpression	"""executeStart success!\\n"""		5021624	0					
ANR	5022182	ReturnStatement	return ;	750:2:18095:18101	5021624	6	True				
ANR	5022183	ReturnType	void		5021624	1					
ANR	5022184	Identifier	VMGahp :: executeStart		5021624	2					
ANR	5022185	ParameterList	VMRequest * req		5021624	3					
ANR	5022186	Parameter	VMRequest * req	643:21:15060:15073	5021624	0	True				
ANR	5022187	ParameterType	VMRequest *		5021624	0					
ANR	5022188	Identifier	req		5021624	1					
ANR	5022189	CFGEntryNode	ENTRY		5021624		True				
ANR	5022190	CFGExitNode	EXIT		5021624		True				
ANR	5022191	Symbol	VMGAHP_ERR_NO_JOBCLASSAD_INFO		5021624						
ANR	5022192	Symbol	new_vm -> m_result_msg . Value		5021624						
ANR	5022193	Symbol	m_jobAd		5021624						
ANR	5022194	Symbol	* req		5021624						
ANR	5022195	Symbol	vmworkingdir . Value		5021624						
ANR	5022196	Symbol	makeErrorMessage		5021624						
ANR	5022197	Symbol	vmworkingdir		5021624						
ANR	5022198	Symbol	m_gahp_config -> m_vm_type		5021624						
ANR	5022199	Symbol	new_vm		5021624						
ANR	5022200	Symbol	m_gahp_config -> m_vm_script . Value		5021624						
ANR	5022201	Symbol	new_vm -> CreateConfigFile		5021624						
ANR	5022202	Symbol	* req -> m_args		5021624						
ANR	5022203	Symbol	result		5021624						
ANR	5022204	Symbol	req -> m_args . argv		5021624						
ANR	5022205	Symbol	m_jobAd -> LookupString		5021624						
ANR	5022206	Symbol	req -> m_result		5021624						
ANR	5022207	Symbol	CONDOR_VM_UNIVERSE_KVM		5021624						
ANR	5022208	Symbol	CONDOR_VM_UNIVERSE_XEN		5021624						
ANR	5022209	Symbol	* new_vm		5021624						
ANR	5022210	Symbol	ATTR_JOB_VM_TYPE		5021624						
ANR	5022211	Symbol	strcasecmp		5021624						
ANR	5022212	Symbol	req		5021624						
ANR	5022213	Symbol	* req -> m_args . argv		5021624						
ANR	5022214	Symbol	new_vm -> getVMId		5021624						
ANR	5022215	Symbol	m_gahp_config -> m_vm_type . Value		5021624						
ANR	5022216	Symbol	vmtype		5021624						
ANR	5022217	Symbol	NULL		5021624						
ANR	5022218	Symbol	m_gahp_config		5021624						
ANR	5022219	Symbol	false		5021624						
ANR	5022220	Symbol	D_ALWAYS		5021624						
ANR	5022221	Symbol	new_vm -> Start		5021624						
ANR	5022222	Symbol	job_vmtype . Value		5021624						
ANR	5022223	Symbol	VMGAHP_ERR_NO_SUPPORTED_VM_TYPE		5021624						
ANR	5022224	Symbol	D_FULLDEBUG		5021624						
ANR	5022225	Symbol	m_gahp_config -> m_prog_for_script . Value		5021624						
ANR	5022226	Symbol	m_gahp_config -> m_prog_for_script		5021624						
ANR	5022227	Symbol	req -> m_args		5021624						
ANR	5022228	Symbol	m_gahp_config -> m_vm_script		5021624						
ANR	5022229	Symbol	* m_gahp_config		5021624						
ANR	5022230	Symbol	* * req		5021624						
ANR	5022231	Symbol	* m_jobAd		5021624						
ANR	5022232	Symbol	true		5021624						
ANR	5022233	Symbol	req -> m_has_result		5021624						
ANR	5022234	Symbol	job_vmtype		5021624						
ANR	5022235	Symbol	CONDOR_VM_UNIVERSE_VMWARE		5021624						
ANR	5022236	Symbol	req -> m_is_success		5021624						
ANR	5022237	Symbol	new_vm -> m_result_msg		5021624						
ANR	5022238	Function	VMGahp :: executeStop	754:0:18109:18966							
ANR	5022239	FunctionDef	VMGahp :: executeStop (VMRequest * req)		5022238	0					
ANR	5022240	CompoundStatement		756:0:18150:18966	5022238	0					
ANR	5022241	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	758:1:18207:18264	5022238	0	True				
ANR	5022242	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022238	0					
ANR	5022243	IdentifierDeclType	int		5022238	0					
ANR	5022244	Identifier	vm_id		5022238	1					
ANR	5022245	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022238	2		=			
ANR	5022246	Identifier	vm_id		5022238	0					
ANR	5022247	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022238	1					
ANR	5022248	Callee	strtol		5022238	0					
ANR	5022249	Identifier	strtol		5022238	0					
ANR	5022250	ArgumentList	req -> m_args . argv [ 2 ]		5022238	1					
ANR	5022251	Argument	req -> m_args . argv [ 2 ]		5022238	0					
ANR	5022252	ArrayIndexing	req -> m_args . argv [ 2 ]		5022238	0					
ANR	5022253	MemberAccess	req -> m_args . argv		5022238	0					
ANR	5022254	PtrMemberAccess	req -> m_args		5022238	0					
ANR	5022255	Identifier	req		5022238	0					
ANR	5022256	Identifier	m_args		5022238	1					
ANR	5022257	Identifier	argv		5022238	1					
ANR	5022258	PrimaryExpression	2		5022238	1					
ANR	5022259	Argument	( char * * ) NULL		5022238	1					
ANR	5022260	CastExpression	( char * * ) NULL		5022238	0					
ANR	5022261	CastTarget	char * *		5022238	0					
ANR	5022262	Identifier	NULL		5022238	1					
ANR	5022263	Argument	10		5022238	2					
ANR	5022264	PrimaryExpression	10		5022238	0					
ANR	5022265	IdentifierDeclStatement	MyString err_message ;	760:1:18268:18288	5022238	1	True				
ANR	5022266	IdentifierDecl	err_message		5022238	0					
ANR	5022267	IdentifierDeclType	MyString		5022238	0					
ANR	5022268	Identifier	err_message		5022238	1					
ANR	5022269	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	761:1:18291:18317	5022238	2	True				
ANR	5022270	IdentifierDecl	* vm = findVM ( vm_id )		5022238	0					
ANR	5022271	IdentifierDeclType	VMType *		5022238	0					
ANR	5022272	Identifier	vm		5022238	1					
ANR	5022273	AssignmentExpression	* vm = findVM ( vm_id )		5022238	2		=			
ANR	5022274	Identifier	vm		5022238	0					
ANR	5022275	CallExpression	findVM ( vm_id )		5022238	1					
ANR	5022276	Callee	findVM		5022238	0					
ANR	5022277	Identifier	findVM		5022238	0					
ANR	5022278	ArgumentList	vm_id		5022238	1					
ANR	5022279	Argument	vm_id		5022238	0					
ANR	5022280	Identifier	vm_id		5022238	0					
ANR	5022281	IfStatement	if ( vm == NULL )		5022238	3					
ANR	5022282	Condition	vm == NULL	763:4:18324:18333	5022238	0	True				
ANR	5022283	EqualityExpression	vm == NULL		5022238	0		==			
ANR	5022284	Identifier	vm		5022238	0					
ANR	5022285	Identifier	NULL		5022238	1					
ANR	5022286	CompoundStatement		8:16:185:185	5022238	1					
ANR	5022287	ExpressionStatement	req -> m_has_result = true	764:2:18340:18364	5022238	0	True				
ANR	5022288	AssignmentExpression	req -> m_has_result = true		5022238	0		=			
ANR	5022289	PtrMemberAccess	req -> m_has_result		5022238	0					
ANR	5022290	Identifier	req		5022238	0					
ANR	5022291	Identifier	m_has_result		5022238	1					
ANR	5022292	Identifier	true		5022238	1					
ANR	5022293	ExpressionStatement	req -> m_is_success = false	765:2:18368:18393	5022238	1	True				
ANR	5022294	AssignmentExpression	req -> m_is_success = false		5022238	0		=			
ANR	5022295	PtrMemberAccess	req -> m_is_success		5022238	0					
ANR	5022296	Identifier	req		5022238	0					
ANR	5022297	Identifier	m_is_success		5022238	1					
ANR	5022298	Identifier	false		5022238	1					
ANR	5022299	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	766:2:18397:18436	5022238	2	True				
ANR	5022300	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5022238	0		=			
ANR	5022301	PtrMemberAccess	req -> m_result		5022238	0					
ANR	5022302	Identifier	req		5022238	0					
ANR	5022303	Identifier	m_result		5022238	1					
ANR	5022304	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5022238	1					
ANR	5022305	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeStop\\n"" , vm_id )"	767:2:18440:18511	5022238	3	True				
ANR	5022306	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeStop\\n"" , vm_id )"		5022238	0					
ANR	5022307	Callee	vmprintf		5022238	0					
ANR	5022308	Identifier	vmprintf		5022238	0					
ANR	5022309	ArgumentList	D_FULLDEBUG		5022238	1					
ANR	5022310	Argument	D_FULLDEBUG		5022238	0					
ANR	5022311	Identifier	D_FULLDEBUG		5022238	0					
ANR	5022312	Argument	"""VM(id=%d) is not found in executeStop\\n"""		5022238	1					
ANR	5022313	PrimaryExpression	"""VM(id=%d) is not found in executeStop\\n"""		5022238	0					
ANR	5022314	Argument	vm_id		5022238	2					
ANR	5022315	Identifier	vm_id		5022238	0					
ANR	5022316	ReturnStatement	return ;	768:2:18515:18521	5022238	4	True				
ANR	5022317	ElseStatement	else		5022238	0					
ANR	5022318	CompoundStatement		15:2:383:410	5022238	0					
ANR	5022319	IdentifierDeclStatement	int result = vm -> Shutdown ( ) ;	770:2:18534:18561	5022238	0	True				
ANR	5022320	IdentifierDecl	result = vm -> Shutdown ( )		5022238	0					
ANR	5022321	IdentifierDeclType	int		5022238	0					
ANR	5022322	Identifier	result		5022238	1					
ANR	5022323	AssignmentExpression	result = vm -> Shutdown ( )		5022238	2		=			
ANR	5022324	Identifier	result		5022238	0					
ANR	5022325	CallExpression	vm -> Shutdown ( )		5022238	1					
ANR	5022326	Callee	vm -> Shutdown		5022238	0					
ANR	5022327	PtrMemberAccess	vm -> Shutdown		5022238	0					
ANR	5022328	Identifier	vm		5022238	0					
ANR	5022329	Identifier	Shutdown		5022238	1					
ANR	5022330	ArgumentList			5022238	1					
ANR	5022331	IfStatement	if ( result == false )		5022238	1					
ANR	5022332	Condition	result == false	772:5:18569:18583	5022238	0	True				
ANR	5022333	EqualityExpression	result == false		5022238	0		==			
ANR	5022334	Identifier	result		5022238	0					
ANR	5022335	Identifier	false		5022238	1					
ANR	5022336	CompoundStatement		17:22:435:435	5022238	1					
ANR	5022337	ExpressionStatement	req -> m_has_result = true	773:3:18591:18615	5022238	0	True				
ANR	5022338	AssignmentExpression	req -> m_has_result = true		5022238	0		=			
ANR	5022339	PtrMemberAccess	req -> m_has_result		5022238	0					
ANR	5022340	Identifier	req		5022238	0					
ANR	5022341	Identifier	m_has_result		5022238	1					
ANR	5022342	Identifier	true		5022238	1					
ANR	5022343	ExpressionStatement	req -> m_is_success = false	774:3:18620:18645	5022238	1	True				
ANR	5022344	AssignmentExpression	req -> m_is_success = false		5022238	0		=			
ANR	5022345	PtrMemberAccess	req -> m_is_success		5022238	0					
ANR	5022346	Identifier	req		5022238	0					
ANR	5022347	Identifier	m_is_success		5022238	1					
ANR	5022348	Identifier	false		5022238	1					
ANR	5022349	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	775:3:18650:18708	5022238	2	True				
ANR	5022350	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022238	0		=			
ANR	5022351	PtrMemberAccess	req -> m_result		5022238	0					
ANR	5022352	Identifier	req		5022238	0					
ANR	5022353	Identifier	m_result		5022238	1					
ANR	5022354	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022238	1					
ANR	5022355	Callee	makeErrorMessage		5022238	0					
ANR	5022356	Identifier	makeErrorMessage		5022238	0					
ANR	5022357	ArgumentList	vm -> m_result_msg . Value ( )		5022238	1					
ANR	5022358	Argument	vm -> m_result_msg . Value ( )		5022238	0					
ANR	5022359	CallExpression	vm -> m_result_msg . Value ( )		5022238	0					
ANR	5022360	Callee	vm -> m_result_msg . Value		5022238	0					
ANR	5022361	MemberAccess	vm -> m_result_msg . Value		5022238	0					
ANR	5022362	PtrMemberAccess	vm -> m_result_msg		5022238	0					
ANR	5022363	Identifier	vm		5022238	0					
ANR	5022364	Identifier	m_result_msg		5022238	1					
ANR	5022365	Identifier	Value		5022238	1					
ANR	5022366	ArgumentList			5022238	1					
ANR	5022367	ExpressionStatement	removeVM ( vm )	776:3:18713:18725	5022238	3	True				
ANR	5022368	CallExpression	removeVM ( vm )		5022238	0					
ANR	5022369	Callee	removeVM		5022238	0					
ANR	5022370	Identifier	removeVM		5022238	0					
ANR	5022371	ArgumentList	vm		5022238	1					
ANR	5022372	Argument	vm		5022238	0					
ANR	5022373	Identifier	vm		5022238	0					
ANR	5022374	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStop fail!\\n"" )"	777:3:18730:18774	5022238	4	True				
ANR	5022375	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStop fail!\\n"" )"		5022238	0					
ANR	5022376	Callee	vmprintf		5022238	0					
ANR	5022377	Identifier	vmprintf		5022238	0					
ANR	5022378	ArgumentList	D_FULLDEBUG		5022238	1					
ANR	5022379	Argument	D_FULLDEBUG		5022238	0					
ANR	5022380	Identifier	D_FULLDEBUG		5022238	0					
ANR	5022381	Argument	"""executeStop fail!\\n"""		5022238	1					
ANR	5022382	PrimaryExpression	"""executeStop fail!\\n"""		5022238	0					
ANR	5022383	ReturnStatement	return ;	778:3:18779:18785	5022238	5	True				
ANR	5022384	ElseStatement	else		5022238	0					
ANR	5022385	CompoundStatement		24:9:645:645	5022238	0					
ANR	5022386	ExpressionStatement	req -> m_has_result = true	780:3:18801:18825	5022238	0	True				
ANR	5022387	AssignmentExpression	req -> m_has_result = true		5022238	0		=			
ANR	5022388	PtrMemberAccess	req -> m_has_result		5022238	0					
ANR	5022389	Identifier	req		5022238	0					
ANR	5022390	Identifier	m_has_result		5022238	1					
ANR	5022391	Identifier	true		5022238	1					
ANR	5022392	ExpressionStatement	req -> m_is_success = true	781:3:18830:18854	5022238	1	True				
ANR	5022393	AssignmentExpression	req -> m_is_success = true		5022238	0		=			
ANR	5022394	PtrMemberAccess	req -> m_is_success		5022238	0					
ANR	5022395	Identifier	req		5022238	0					
ANR	5022396	Identifier	m_is_success		5022238	1					
ANR	5022397	Identifier	true		5022238	1					
ANR	5022398	ExpressionStatement	"req -> m_result = """""	782:3:18859:18877	5022238	2	True				
ANR	5022399	AssignmentExpression	"req -> m_result = """""		5022238	0		=			
ANR	5022400	PtrMemberAccess	req -> m_result		5022238	0					
ANR	5022401	Identifier	req		5022238	0					
ANR	5022402	Identifier	m_result		5022238	1					
ANR	5022403	PrimaryExpression	""""""		5022238	1					
ANR	5022404	ExpressionStatement	removeVM ( vm )	783:3:18882:18894	5022238	3	True				
ANR	5022405	CallExpression	removeVM ( vm )		5022238	0					
ANR	5022406	Callee	removeVM		5022238	0					
ANR	5022407	Identifier	removeVM		5022238	0					
ANR	5022408	ArgumentList	vm		5022238	1					
ANR	5022409	Argument	vm		5022238	0					
ANR	5022410	Identifier	vm		5022238	0					
ANR	5022411	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeStop success!\\n"" )"	784:3:18899:18946	5022238	4	True				
ANR	5022412	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeStop success!\\n"" )"		5022238	0					
ANR	5022413	Callee	vmprintf		5022238	0					
ANR	5022414	Identifier	vmprintf		5022238	0					
ANR	5022415	ArgumentList	D_FULLDEBUG		5022238	1					
ANR	5022416	Argument	D_FULLDEBUG		5022238	0					
ANR	5022417	Identifier	D_FULLDEBUG		5022238	0					
ANR	5022418	Argument	"""executeStop success!\\n"""		5022238	1					
ANR	5022419	PrimaryExpression	"""executeStop success!\\n"""		5022238	0					
ANR	5022420	ReturnStatement	return ;	785:3:18951:18957	5022238	5	True				
ANR	5022421	ReturnType	void		5022238	1					
ANR	5022422	Identifier	VMGahp :: executeStop		5022238	2					
ANR	5022423	ParameterList	VMRequest * req		5022238	3					
ANR	5022424	Parameter	VMRequest * req	755:20:18134:18147	5022238	0	True				
ANR	5022425	ParameterType	VMRequest *		5022238	0					
ANR	5022426	Identifier	req		5022238	1					
ANR	5022427	CFGEntryNode	ENTRY		5022238		True				
ANR	5022428	CFGExitNode	EXIT		5022238		True				
ANR	5022429	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5022238						
ANR	5022430	Symbol	* req		5022238						
ANR	5022431	Symbol	makeErrorMessage		5022238						
ANR	5022432	Symbol	* req -> m_args		5022238						
ANR	5022433	Symbol	err_message		5022238						
ANR	5022434	Symbol	result		5022238						
ANR	5022435	Symbol	vm_id		5022238						
ANR	5022436	Symbol	req -> m_args . argv		5022238						
ANR	5022437	Symbol	req -> m_result		5022238						
ANR	5022438	Symbol	strtol		5022238						
ANR	5022439	Symbol	vm -> Shutdown		5022238						
ANR	5022440	Symbol	req		5022238						
ANR	5022441	Symbol	* req -> m_args . argv		5022238						
ANR	5022442	Symbol	NULL		5022238						
ANR	5022443	Symbol	false		5022238						
ANR	5022444	Symbol	D_FULLDEBUG		5022238						
ANR	5022445	Symbol	req -> m_args		5022238						
ANR	5022446	Symbol	vm -> m_result_msg		5022238						
ANR	5022447	Symbol	* * req		5022238						
ANR	5022448	Symbol	vm -> m_result_msg . Value		5022238						
ANR	5022449	Symbol	vm		5022238						
ANR	5022450	Symbol	true		5022238						
ANR	5022451	Symbol	findVM		5022238						
ANR	5022452	Symbol	req -> m_has_result		5022238						
ANR	5022453	Symbol	req -> m_is_success		5022238						
ANR	5022454	Symbol	* vm		5022238						
ANR	5022455	Function	VMGahp :: executeSuspend	790:0:18969:19806							
ANR	5022456	FunctionDef	VMGahp :: executeSuspend (VMRequest * req)		5022455	0					
ANR	5022457	CompoundStatement		792:0:19013:19806	5022455	0					
ANR	5022458	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	794:1:19073:19130	5022455	0	True				
ANR	5022459	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022455	0					
ANR	5022460	IdentifierDeclType	int		5022455	0					
ANR	5022461	Identifier	vm_id		5022455	1					
ANR	5022462	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022455	2		=			
ANR	5022463	Identifier	vm_id		5022455	0					
ANR	5022464	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022455	1					
ANR	5022465	Callee	strtol		5022455	0					
ANR	5022466	Identifier	strtol		5022455	0					
ANR	5022467	ArgumentList	req -> m_args . argv [ 2 ]		5022455	1					
ANR	5022468	Argument	req -> m_args . argv [ 2 ]		5022455	0					
ANR	5022469	ArrayIndexing	req -> m_args . argv [ 2 ]		5022455	0					
ANR	5022470	MemberAccess	req -> m_args . argv		5022455	0					
ANR	5022471	PtrMemberAccess	req -> m_args		5022455	0					
ANR	5022472	Identifier	req		5022455	0					
ANR	5022473	Identifier	m_args		5022455	1					
ANR	5022474	Identifier	argv		5022455	1					
ANR	5022475	PrimaryExpression	2		5022455	1					
ANR	5022476	Argument	( char * * ) NULL		5022455	1					
ANR	5022477	CastExpression	( char * * ) NULL		5022455	0					
ANR	5022478	CastTarget	char * *		5022455	0					
ANR	5022479	Identifier	NULL		5022455	1					
ANR	5022480	Argument	10		5022455	2					
ANR	5022481	PrimaryExpression	10		5022455	0					
ANR	5022482	IdentifierDeclStatement	MyString err_message ;	796:1:19134:19154	5022455	1	True				
ANR	5022483	IdentifierDecl	err_message		5022455	0					
ANR	5022484	IdentifierDeclType	MyString		5022455	0					
ANR	5022485	Identifier	err_message		5022455	1					
ANR	5022486	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	797:1:19157:19183	5022455	2	True				
ANR	5022487	IdentifierDecl	* vm = findVM ( vm_id )		5022455	0					
ANR	5022488	IdentifierDeclType	VMType *		5022455	0					
ANR	5022489	Identifier	vm		5022455	1					
ANR	5022490	AssignmentExpression	* vm = findVM ( vm_id )		5022455	2		=			
ANR	5022491	Identifier	vm		5022455	0					
ANR	5022492	CallExpression	findVM ( vm_id )		5022455	1					
ANR	5022493	Callee	findVM		5022455	0					
ANR	5022494	Identifier	findVM		5022455	0					
ANR	5022495	ArgumentList	vm_id		5022455	1					
ANR	5022496	Argument	vm_id		5022455	0					
ANR	5022497	Identifier	vm_id		5022455	0					
ANR	5022498	IfStatement	if ( vm == NULL )		5022455	3					
ANR	5022499	Condition	vm == NULL	799:4:19190:19199	5022455	0	True				
ANR	5022500	EqualityExpression	vm == NULL		5022455	0		==			
ANR	5022501	Identifier	vm		5022455	0					
ANR	5022502	Identifier	NULL		5022455	1					
ANR	5022503	CompoundStatement		8:16:188:188	5022455	1					
ANR	5022504	ExpressionStatement	req -> m_has_result = true	800:2:19206:19230	5022455	0	True				
ANR	5022505	AssignmentExpression	req -> m_has_result = true		5022455	0		=			
ANR	5022506	PtrMemberAccess	req -> m_has_result		5022455	0					
ANR	5022507	Identifier	req		5022455	0					
ANR	5022508	Identifier	m_has_result		5022455	1					
ANR	5022509	Identifier	true		5022455	1					
ANR	5022510	ExpressionStatement	req -> m_is_success = false	801:2:19234:19259	5022455	1	True				
ANR	5022511	AssignmentExpression	req -> m_is_success = false		5022455	0		=			
ANR	5022512	PtrMemberAccess	req -> m_is_success		5022455	0					
ANR	5022513	Identifier	req		5022455	0					
ANR	5022514	Identifier	m_is_success		5022455	1					
ANR	5022515	Identifier	false		5022455	1					
ANR	5022516	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	802:2:19263:19302	5022455	2	True				
ANR	5022517	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5022455	0		=			
ANR	5022518	PtrMemberAccess	req -> m_result		5022455	0					
ANR	5022519	Identifier	req		5022455	0					
ANR	5022520	Identifier	m_result		5022455	1					
ANR	5022521	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5022455	1					
ANR	5022522	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSuspend\\n"" , vm_id )"	803:2:19306:19380	5022455	3	True				
ANR	5022523	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSuspend\\n"" , vm_id )"		5022455	0					
ANR	5022524	Callee	vmprintf		5022455	0					
ANR	5022525	Identifier	vmprintf		5022455	0					
ANR	5022526	ArgumentList	D_FULLDEBUG		5022455	1					
ANR	5022527	Argument	D_FULLDEBUG		5022455	0					
ANR	5022528	Identifier	D_FULLDEBUG		5022455	0					
ANR	5022529	Argument	"""VM(id=%d) is not found in executeSuspend\\n"""		5022455	1					
ANR	5022530	PrimaryExpression	"""VM(id=%d) is not found in executeSuspend\\n"""		5022455	0					
ANR	5022531	Argument	vm_id		5022455	2					
ANR	5022532	Identifier	vm_id		5022455	0					
ANR	5022533	ReturnStatement	return ;	804:2:19384:19390	5022455	4	True				
ANR	5022534	ElseStatement	else		5022455	0					
ANR	5022535	CompoundStatement		15:2:389:415	5022455	0					
ANR	5022536	IdentifierDeclStatement	int result = vm -> Suspend ( ) ;	806:2:19403:19429	5022455	0	True				
ANR	5022537	IdentifierDecl	result = vm -> Suspend ( )		5022455	0					
ANR	5022538	IdentifierDeclType	int		5022455	0					
ANR	5022539	Identifier	result		5022455	1					
ANR	5022540	AssignmentExpression	result = vm -> Suspend ( )		5022455	2		=			
ANR	5022541	Identifier	result		5022455	0					
ANR	5022542	CallExpression	vm -> Suspend ( )		5022455	1					
ANR	5022543	Callee	vm -> Suspend		5022455	0					
ANR	5022544	PtrMemberAccess	vm -> Suspend		5022455	0					
ANR	5022545	Identifier	vm		5022455	0					
ANR	5022546	Identifier	Suspend		5022455	1					
ANR	5022547	ArgumentList			5022455	1					
ANR	5022548	IfStatement	if ( result == false )		5022455	1					
ANR	5022549	Condition	result == false	808:5:19437:19451	5022455	0	True				
ANR	5022550	EqualityExpression	result == false		5022455	0		==			
ANR	5022551	Identifier	result		5022455	0					
ANR	5022552	Identifier	false		5022455	1					
ANR	5022553	CompoundStatement		17:22:440:440	5022455	1					
ANR	5022554	ExpressionStatement	req -> m_has_result = true	809:3:19459:19483	5022455	0	True				
ANR	5022555	AssignmentExpression	req -> m_has_result = true		5022455	0		=			
ANR	5022556	PtrMemberAccess	req -> m_has_result		5022455	0					
ANR	5022557	Identifier	req		5022455	0					
ANR	5022558	Identifier	m_has_result		5022455	1					
ANR	5022559	Identifier	true		5022455	1					
ANR	5022560	ExpressionStatement	req -> m_is_success = false	810:3:19488:19513	5022455	1	True				
ANR	5022561	AssignmentExpression	req -> m_is_success = false		5022455	0		=			
ANR	5022562	PtrMemberAccess	req -> m_is_success		5022455	0					
ANR	5022563	Identifier	req		5022455	0					
ANR	5022564	Identifier	m_is_success		5022455	1					
ANR	5022565	Identifier	false		5022455	1					
ANR	5022566	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	811:3:19518:19576	5022455	2	True				
ANR	5022567	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022455	0		=			
ANR	5022568	PtrMemberAccess	req -> m_result		5022455	0					
ANR	5022569	Identifier	req		5022455	0					
ANR	5022570	Identifier	m_result		5022455	1					
ANR	5022571	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022455	1					
ANR	5022572	Callee	makeErrorMessage		5022455	0					
ANR	5022573	Identifier	makeErrorMessage		5022455	0					
ANR	5022574	ArgumentList	vm -> m_result_msg . Value ( )		5022455	1					
ANR	5022575	Argument	vm -> m_result_msg . Value ( )		5022455	0					
ANR	5022576	CallExpression	vm -> m_result_msg . Value ( )		5022455	0					
ANR	5022577	Callee	vm -> m_result_msg . Value		5022455	0					
ANR	5022578	MemberAccess	vm -> m_result_msg . Value		5022455	0					
ANR	5022579	PtrMemberAccess	vm -> m_result_msg		5022455	0					
ANR	5022580	Identifier	vm		5022455	0					
ANR	5022581	Identifier	m_result_msg		5022455	1					
ANR	5022582	Identifier	Value		5022455	1					
ANR	5022583	ArgumentList			5022455	1					
ANR	5022584	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSuspend fail!\\n"" )"	812:3:19581:19628	5022455	3	True				
ANR	5022585	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSuspend fail!\\n"" )"		5022455	0					
ANR	5022586	Callee	vmprintf		5022455	0					
ANR	5022587	Identifier	vmprintf		5022455	0					
ANR	5022588	ArgumentList	D_FULLDEBUG		5022455	1					
ANR	5022589	Argument	D_FULLDEBUG		5022455	0					
ANR	5022590	Identifier	D_FULLDEBUG		5022455	0					
ANR	5022591	Argument	"""executeSuspend fail!\\n"""		5022455	1					
ANR	5022592	PrimaryExpression	"""executeSuspend fail!\\n"""		5022455	0					
ANR	5022593	ReturnStatement	return ;	813:3:19633:19639	5022455	4	True				
ANR	5022594	ElseStatement	else		5022455	0					
ANR	5022595	CompoundStatement		23:9:636:636	5022455	0					
ANR	5022596	ExpressionStatement	req -> m_has_result = true	815:3:19655:19679	5022455	0	True				
ANR	5022597	AssignmentExpression	req -> m_has_result = true		5022455	0		=			
ANR	5022598	PtrMemberAccess	req -> m_has_result		5022455	0					
ANR	5022599	Identifier	req		5022455	0					
ANR	5022600	Identifier	m_has_result		5022455	1					
ANR	5022601	Identifier	true		5022455	1					
ANR	5022602	ExpressionStatement	req -> m_is_success = true	816:3:19684:19708	5022455	1	True				
ANR	5022603	AssignmentExpression	req -> m_is_success = true		5022455	0		=			
ANR	5022604	PtrMemberAccess	req -> m_is_success		5022455	0					
ANR	5022605	Identifier	req		5022455	0					
ANR	5022606	Identifier	m_is_success		5022455	1					
ANR	5022607	Identifier	true		5022455	1					
ANR	5022608	ExpressionStatement	"req -> m_result = """""	817:3:19713:19731	5022455	2	True				
ANR	5022609	AssignmentExpression	"req -> m_result = """""		5022455	0		=			
ANR	5022610	PtrMemberAccess	req -> m_result		5022455	0					
ANR	5022611	Identifier	req		5022455	0					
ANR	5022612	Identifier	m_result		5022455	1					
ANR	5022613	PrimaryExpression	""""""		5022455	1					
ANR	5022614	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSuspend success!\\n"" )"	818:3:19736:19786	5022455	3	True				
ANR	5022615	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSuspend success!\\n"" )"		5022455	0					
ANR	5022616	Callee	vmprintf		5022455	0					
ANR	5022617	Identifier	vmprintf		5022455	0					
ANR	5022618	ArgumentList	D_FULLDEBUG		5022455	1					
ANR	5022619	Argument	D_FULLDEBUG		5022455	0					
ANR	5022620	Identifier	D_FULLDEBUG		5022455	0					
ANR	5022621	Argument	"""executeSuspend success!\\n"""		5022455	1					
ANR	5022622	PrimaryExpression	"""executeSuspend success!\\n"""		5022455	0					
ANR	5022623	ReturnStatement	return ;	819:3:19791:19797	5022455	4	True				
ANR	5022624	ReturnType	void		5022455	1					
ANR	5022625	Identifier	VMGahp :: executeSuspend		5022455	2					
ANR	5022626	ParameterList	VMRequest * req		5022455	3					
ANR	5022627	Parameter	VMRequest * req	791:23:18997:19010	5022455	0	True				
ANR	5022628	ParameterType	VMRequest *		5022455	0					
ANR	5022629	Identifier	req		5022455	1					
ANR	5022630	CFGEntryNode	ENTRY		5022455		True				
ANR	5022631	CFGExitNode	EXIT		5022455		True				
ANR	5022632	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5022455						
ANR	5022633	Symbol	* req		5022455						
ANR	5022634	Symbol	makeErrorMessage		5022455						
ANR	5022635	Symbol	* req -> m_args		5022455						
ANR	5022636	Symbol	err_message		5022455						
ANR	5022637	Symbol	result		5022455						
ANR	5022638	Symbol	req -> m_args . argv		5022455						
ANR	5022639	Symbol	vm_id		5022455						
ANR	5022640	Symbol	req -> m_result		5022455						
ANR	5022641	Symbol	strtol		5022455						
ANR	5022642	Symbol	req		5022455						
ANR	5022643	Symbol	* req -> m_args . argv		5022455						
ANR	5022644	Symbol	NULL		5022455						
ANR	5022645	Symbol	vm -> Suspend		5022455						
ANR	5022646	Symbol	false		5022455						
ANR	5022647	Symbol	D_FULLDEBUG		5022455						
ANR	5022648	Symbol	req -> m_args		5022455						
ANR	5022649	Symbol	vm -> m_result_msg		5022455						
ANR	5022650	Symbol	* * req		5022455						
ANR	5022651	Symbol	vm -> m_result_msg . Value		5022455						
ANR	5022652	Symbol	vm		5022455						
ANR	5022653	Symbol	true		5022455						
ANR	5022654	Symbol	findVM		5022455						
ANR	5022655	Symbol	req -> m_has_result		5022455						
ANR	5022656	Symbol	req -> m_is_success		5022455						
ANR	5022657	Symbol	* vm		5022455						
ANR	5022658	Function	VMGahp :: executeSoftSuspend	824:0:19809:20678							
ANR	5022659	FunctionDef	VMGahp :: executeSoftSuspend (VMRequest * req)		5022658	0					
ANR	5022660	CompoundStatement		826:0:19857:20678	5022658	0					
ANR	5022661	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	828:1:19922:19979	5022658	0	True				
ANR	5022662	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022658	0					
ANR	5022663	IdentifierDeclType	int		5022658	0					
ANR	5022664	Identifier	vm_id		5022658	1					
ANR	5022665	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022658	2		=			
ANR	5022666	Identifier	vm_id		5022658	0					
ANR	5022667	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022658	1					
ANR	5022668	Callee	strtol		5022658	0					
ANR	5022669	Identifier	strtol		5022658	0					
ANR	5022670	ArgumentList	req -> m_args . argv [ 2 ]		5022658	1					
ANR	5022671	Argument	req -> m_args . argv [ 2 ]		5022658	0					
ANR	5022672	ArrayIndexing	req -> m_args . argv [ 2 ]		5022658	0					
ANR	5022673	MemberAccess	req -> m_args . argv		5022658	0					
ANR	5022674	PtrMemberAccess	req -> m_args		5022658	0					
ANR	5022675	Identifier	req		5022658	0					
ANR	5022676	Identifier	m_args		5022658	1					
ANR	5022677	Identifier	argv		5022658	1					
ANR	5022678	PrimaryExpression	2		5022658	1					
ANR	5022679	Argument	( char * * ) NULL		5022658	1					
ANR	5022680	CastExpression	( char * * ) NULL		5022658	0					
ANR	5022681	CastTarget	char * *		5022658	0					
ANR	5022682	Identifier	NULL		5022658	1					
ANR	5022683	Argument	10		5022658	2					
ANR	5022684	PrimaryExpression	10		5022658	0					
ANR	5022685	IdentifierDeclStatement	MyString err_message ;	830:1:19983:20003	5022658	1	True				
ANR	5022686	IdentifierDecl	err_message		5022658	0					
ANR	5022687	IdentifierDeclType	MyString		5022658	0					
ANR	5022688	Identifier	err_message		5022658	1					
ANR	5022689	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	831:1:20006:20032	5022658	2	True				
ANR	5022690	IdentifierDecl	* vm = findVM ( vm_id )		5022658	0					
ANR	5022691	IdentifierDeclType	VMType *		5022658	0					
ANR	5022692	Identifier	vm		5022658	1					
ANR	5022693	AssignmentExpression	* vm = findVM ( vm_id )		5022658	2		=			
ANR	5022694	Identifier	vm		5022658	0					
ANR	5022695	CallExpression	findVM ( vm_id )		5022658	1					
ANR	5022696	Callee	findVM		5022658	0					
ANR	5022697	Identifier	findVM		5022658	0					
ANR	5022698	ArgumentList	vm_id		5022658	1					
ANR	5022699	Argument	vm_id		5022658	0					
ANR	5022700	Identifier	vm_id		5022658	0					
ANR	5022701	IfStatement	if ( vm == NULL )		5022658	3					
ANR	5022702	Condition	vm == NULL	833:4:20039:20048	5022658	0	True				
ANR	5022703	EqualityExpression	vm == NULL		5022658	0		==			
ANR	5022704	Identifier	vm		5022658	0					
ANR	5022705	Identifier	NULL		5022658	1					
ANR	5022706	CompoundStatement		8:16:193:193	5022658	1					
ANR	5022707	ExpressionStatement	req -> m_has_result = true	834:2:20055:20079	5022658	0	True				
ANR	5022708	AssignmentExpression	req -> m_has_result = true		5022658	0		=			
ANR	5022709	PtrMemberAccess	req -> m_has_result		5022658	0					
ANR	5022710	Identifier	req		5022658	0					
ANR	5022711	Identifier	m_has_result		5022658	1					
ANR	5022712	Identifier	true		5022658	1					
ANR	5022713	ExpressionStatement	req -> m_is_success = false	835:2:20083:20108	5022658	1	True				
ANR	5022714	AssignmentExpression	req -> m_is_success = false		5022658	0		=			
ANR	5022715	PtrMemberAccess	req -> m_is_success		5022658	0					
ANR	5022716	Identifier	req		5022658	0					
ANR	5022717	Identifier	m_is_success		5022658	1					
ANR	5022718	Identifier	false		5022658	1					
ANR	5022719	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	836:2:20112:20151	5022658	2	True				
ANR	5022720	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5022658	0		=			
ANR	5022721	PtrMemberAccess	req -> m_result		5022658	0					
ANR	5022722	Identifier	req		5022658	0					
ANR	5022723	Identifier	m_result		5022658	1					
ANR	5022724	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5022658	1					
ANR	5022725	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSoftSuspend\\n"" , vm_id )"	837:2:20155:20240	5022658	3	True				
ANR	5022726	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeSoftSuspend\\n"" , vm_id )"		5022658	0					
ANR	5022727	Callee	vmprintf		5022658	0					
ANR	5022728	Identifier	vmprintf		5022658	0					
ANR	5022729	ArgumentList	D_FULLDEBUG		5022658	1					
ANR	5022730	Argument	D_FULLDEBUG		5022658	0					
ANR	5022731	Identifier	D_FULLDEBUG		5022658	0					
ANR	5022732	Argument	"""VM(id=%d) is not found in executeSoftSuspend\\n"""		5022658	1					
ANR	5022733	PrimaryExpression	"""VM(id=%d) is not found in executeSoftSuspend\\n"""		5022658	0					
ANR	5022734	Argument	vm_id		5022658	2					
ANR	5022735	Identifier	vm_id		5022658	0					
ANR	5022736	ReturnStatement	return ;	839:2:20244:20250	5022658	4	True				
ANR	5022737	ElseStatement	else		5022658	0					
ANR	5022738	CompoundStatement		16:2:405:435	5022658	0					
ANR	5022739	IdentifierDeclStatement	int result = vm -> SoftSuspend ( ) ;	841:2:20263:20293	5022658	0	True				
ANR	5022740	IdentifierDecl	result = vm -> SoftSuspend ( )		5022658	0					
ANR	5022741	IdentifierDeclType	int		5022658	0					
ANR	5022742	Identifier	result		5022658	1					
ANR	5022743	AssignmentExpression	result = vm -> SoftSuspend ( )		5022658	2		=			
ANR	5022744	Identifier	result		5022658	0					
ANR	5022745	CallExpression	vm -> SoftSuspend ( )		5022658	1					
ANR	5022746	Callee	vm -> SoftSuspend		5022658	0					
ANR	5022747	PtrMemberAccess	vm -> SoftSuspend		5022658	0					
ANR	5022748	Identifier	vm		5022658	0					
ANR	5022749	Identifier	SoftSuspend		5022658	1					
ANR	5022750	ArgumentList			5022658	1					
ANR	5022751	IfStatement	if ( result == false )		5022658	1					
ANR	5022752	Condition	result == false	843:5:20301:20315	5022658	0	True				
ANR	5022753	EqualityExpression	result == false		5022658	0		==			
ANR	5022754	Identifier	result		5022658	0					
ANR	5022755	Identifier	false		5022658	1					
ANR	5022756	CompoundStatement		18:22:460:460	5022658	1					
ANR	5022757	ExpressionStatement	req -> m_has_result = true	844:3:20323:20347	5022658	0	True				
ANR	5022758	AssignmentExpression	req -> m_has_result = true		5022658	0		=			
ANR	5022759	PtrMemberAccess	req -> m_has_result		5022658	0					
ANR	5022760	Identifier	req		5022658	0					
ANR	5022761	Identifier	m_has_result		5022658	1					
ANR	5022762	Identifier	true		5022658	1					
ANR	5022763	ExpressionStatement	req -> m_is_success = false	845:3:20352:20377	5022658	1	True				
ANR	5022764	AssignmentExpression	req -> m_is_success = false		5022658	0		=			
ANR	5022765	PtrMemberAccess	req -> m_is_success		5022658	0					
ANR	5022766	Identifier	req		5022658	0					
ANR	5022767	Identifier	m_is_success		5022658	1					
ANR	5022768	Identifier	false		5022658	1					
ANR	5022769	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	846:3:20382:20440	5022658	2	True				
ANR	5022770	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022658	0		=			
ANR	5022771	PtrMemberAccess	req -> m_result		5022658	0					
ANR	5022772	Identifier	req		5022658	0					
ANR	5022773	Identifier	m_result		5022658	1					
ANR	5022774	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022658	1					
ANR	5022775	Callee	makeErrorMessage		5022658	0					
ANR	5022776	Identifier	makeErrorMessage		5022658	0					
ANR	5022777	ArgumentList	vm -> m_result_msg . Value ( )		5022658	1					
ANR	5022778	Argument	vm -> m_result_msg . Value ( )		5022658	0					
ANR	5022779	CallExpression	vm -> m_result_msg . Value ( )		5022658	0					
ANR	5022780	Callee	vm -> m_result_msg . Value		5022658	0					
ANR	5022781	MemberAccess	vm -> m_result_msg . Value		5022658	0					
ANR	5022782	PtrMemberAccess	vm -> m_result_msg		5022658	0					
ANR	5022783	Identifier	vm		5022658	0					
ANR	5022784	Identifier	m_result_msg		5022658	1					
ANR	5022785	Identifier	Value		5022658	1					
ANR	5022786	ArgumentList			5022658	1					
ANR	5022787	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend fail!\\n"" )"	847:3:20445:20496	5022658	3	True				
ANR	5022788	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend fail!\\n"" )"		5022658	0					
ANR	5022789	Callee	vmprintf		5022658	0					
ANR	5022790	Identifier	vmprintf		5022658	0					
ANR	5022791	ArgumentList	D_FULLDEBUG		5022658	1					
ANR	5022792	Argument	D_FULLDEBUG		5022658	0					
ANR	5022793	Identifier	D_FULLDEBUG		5022658	0					
ANR	5022794	Argument	"""executeSoftSuspend fail!\\n"""		5022658	1					
ANR	5022795	PrimaryExpression	"""executeSoftSuspend fail!\\n"""		5022658	0					
ANR	5022796	ReturnStatement	return ;	848:3:20501:20507	5022658	4	True				
ANR	5022797	ElseStatement	else		5022658	0					
ANR	5022798	CompoundStatement		24:9:660:660	5022658	0					
ANR	5022799	ExpressionStatement	req -> m_has_result = true	850:3:20523:20547	5022658	0	True				
ANR	5022800	AssignmentExpression	req -> m_has_result = true		5022658	0		=			
ANR	5022801	PtrMemberAccess	req -> m_has_result		5022658	0					
ANR	5022802	Identifier	req		5022658	0					
ANR	5022803	Identifier	m_has_result		5022658	1					
ANR	5022804	Identifier	true		5022658	1					
ANR	5022805	ExpressionStatement	req -> m_is_success = true	851:3:20552:20576	5022658	1	True				
ANR	5022806	AssignmentExpression	req -> m_is_success = true		5022658	0		=			
ANR	5022807	PtrMemberAccess	req -> m_is_success		5022658	0					
ANR	5022808	Identifier	req		5022658	0					
ANR	5022809	Identifier	m_is_success		5022658	1					
ANR	5022810	Identifier	true		5022658	1					
ANR	5022811	ExpressionStatement	"req -> m_result = """""	852:3:20581:20599	5022658	2	True				
ANR	5022812	AssignmentExpression	"req -> m_result = """""		5022658	0		=			
ANR	5022813	PtrMemberAccess	req -> m_result		5022658	0					
ANR	5022814	Identifier	req		5022658	0					
ANR	5022815	Identifier	m_result		5022658	1					
ANR	5022816	PrimaryExpression	""""""		5022658	1					
ANR	5022817	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend success!\\n"" )"	853:3:20604:20658	5022658	3	True				
ANR	5022818	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeSoftSuspend success!\\n"" )"		5022658	0					
ANR	5022819	Callee	vmprintf		5022658	0					
ANR	5022820	Identifier	vmprintf		5022658	0					
ANR	5022821	ArgumentList	D_FULLDEBUG		5022658	1					
ANR	5022822	Argument	D_FULLDEBUG		5022658	0					
ANR	5022823	Identifier	D_FULLDEBUG		5022658	0					
ANR	5022824	Argument	"""executeSoftSuspend success!\\n"""		5022658	1					
ANR	5022825	PrimaryExpression	"""executeSoftSuspend success!\\n"""		5022658	0					
ANR	5022826	ReturnStatement	return ;	854:3:20663:20669	5022658	4	True				
ANR	5022827	ReturnType	void		5022658	1					
ANR	5022828	Identifier	VMGahp :: executeSoftSuspend		5022658	2					
ANR	5022829	ParameterList	VMRequest * req		5022658	3					
ANR	5022830	Parameter	VMRequest * req	825:27:19841:19854	5022658	0	True				
ANR	5022831	ParameterType	VMRequest *		5022658	0					
ANR	5022832	Identifier	req		5022658	1					
ANR	5022833	CFGEntryNode	ENTRY		5022658		True				
ANR	5022834	CFGExitNode	EXIT		5022658		True				
ANR	5022835	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5022658						
ANR	5022836	Symbol	* req		5022658						
ANR	5022837	Symbol	makeErrorMessage		5022658						
ANR	5022838	Symbol	vm -> SoftSuspend		5022658						
ANR	5022839	Symbol	* req -> m_args		5022658						
ANR	5022840	Symbol	err_message		5022658						
ANR	5022841	Symbol	result		5022658						
ANR	5022842	Symbol	vm_id		5022658						
ANR	5022843	Symbol	req -> m_args . argv		5022658						
ANR	5022844	Symbol	req -> m_result		5022658						
ANR	5022845	Symbol	strtol		5022658						
ANR	5022846	Symbol	req		5022658						
ANR	5022847	Symbol	* req -> m_args . argv		5022658						
ANR	5022848	Symbol	NULL		5022658						
ANR	5022849	Symbol	false		5022658						
ANR	5022850	Symbol	D_FULLDEBUG		5022658						
ANR	5022851	Symbol	req -> m_args		5022658						
ANR	5022852	Symbol	vm -> m_result_msg		5022658						
ANR	5022853	Symbol	* * req		5022658						
ANR	5022854	Symbol	vm -> m_result_msg . Value		5022658						
ANR	5022855	Symbol	vm		5022658						
ANR	5022856	Symbol	true		5022658						
ANR	5022857	Symbol	findVM		5022658						
ANR	5022858	Symbol	req -> m_has_result		5022658						
ANR	5022859	Symbol	req -> m_is_success		5022658						
ANR	5022860	Symbol	* vm		5022658						
ANR	5022861	Function	VMGahp :: executeResume	859:0:20681:21517							
ANR	5022862	FunctionDef	VMGahp :: executeResume (VMRequest * req)		5022861	0					
ANR	5022863	CompoundStatement		861:0:20724:21517	5022861	0					
ANR	5022864	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	863:1:20783:20840	5022861	0	True				
ANR	5022865	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022861	0					
ANR	5022866	IdentifierDeclType	int		5022861	0					
ANR	5022867	Identifier	vm_id		5022861	1					
ANR	5022868	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022861	2		=			
ANR	5022869	Identifier	vm_id		5022861	0					
ANR	5022870	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5022861	1					
ANR	5022871	Callee	strtol		5022861	0					
ANR	5022872	Identifier	strtol		5022861	0					
ANR	5022873	ArgumentList	req -> m_args . argv [ 2 ]		5022861	1					
ANR	5022874	Argument	req -> m_args . argv [ 2 ]		5022861	0					
ANR	5022875	ArrayIndexing	req -> m_args . argv [ 2 ]		5022861	0					
ANR	5022876	MemberAccess	req -> m_args . argv		5022861	0					
ANR	5022877	PtrMemberAccess	req -> m_args		5022861	0					
ANR	5022878	Identifier	req		5022861	0					
ANR	5022879	Identifier	m_args		5022861	1					
ANR	5022880	Identifier	argv		5022861	1					
ANR	5022881	PrimaryExpression	2		5022861	1					
ANR	5022882	Argument	( char * * ) NULL		5022861	1					
ANR	5022883	CastExpression	( char * * ) NULL		5022861	0					
ANR	5022884	CastTarget	char * *		5022861	0					
ANR	5022885	Identifier	NULL		5022861	1					
ANR	5022886	Argument	10		5022861	2					
ANR	5022887	PrimaryExpression	10		5022861	0					
ANR	5022888	IdentifierDeclStatement	MyString err_message ;	865:1:20844:20864	5022861	1	True				
ANR	5022889	IdentifierDecl	err_message		5022861	0					
ANR	5022890	IdentifierDeclType	MyString		5022861	0					
ANR	5022891	Identifier	err_message		5022861	1					
ANR	5022892	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	866:1:20867:20893	5022861	2	True				
ANR	5022893	IdentifierDecl	* vm = findVM ( vm_id )		5022861	0					
ANR	5022894	IdentifierDeclType	VMType *		5022861	0					
ANR	5022895	Identifier	vm		5022861	1					
ANR	5022896	AssignmentExpression	* vm = findVM ( vm_id )		5022861	2		=			
ANR	5022897	Identifier	vm		5022861	0					
ANR	5022898	CallExpression	findVM ( vm_id )		5022861	1					
ANR	5022899	Callee	findVM		5022861	0					
ANR	5022900	Identifier	findVM		5022861	0					
ANR	5022901	ArgumentList	vm_id		5022861	1					
ANR	5022902	Argument	vm_id		5022861	0					
ANR	5022903	Identifier	vm_id		5022861	0					
ANR	5022904	IfStatement	if ( vm == NULL )		5022861	3					
ANR	5022905	Condition	vm == NULL	868:4:20900:20909	5022861	0	True				
ANR	5022906	EqualityExpression	vm == NULL		5022861	0		==			
ANR	5022907	Identifier	vm		5022861	0					
ANR	5022908	Identifier	NULL		5022861	1					
ANR	5022909	CompoundStatement		8:16:187:187	5022861	1					
ANR	5022910	ExpressionStatement	req -> m_has_result = true	869:2:20916:20940	5022861	0	True				
ANR	5022911	AssignmentExpression	req -> m_has_result = true		5022861	0		=			
ANR	5022912	PtrMemberAccess	req -> m_has_result		5022861	0					
ANR	5022913	Identifier	req		5022861	0					
ANR	5022914	Identifier	m_has_result		5022861	1					
ANR	5022915	Identifier	true		5022861	1					
ANR	5022916	ExpressionStatement	req -> m_is_success = false	870:2:20944:20969	5022861	1	True				
ANR	5022917	AssignmentExpression	req -> m_is_success = false		5022861	0		=			
ANR	5022918	PtrMemberAccess	req -> m_is_success		5022861	0					
ANR	5022919	Identifier	req		5022861	0					
ANR	5022920	Identifier	m_is_success		5022861	1					
ANR	5022921	Identifier	false		5022861	1					
ANR	5022922	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	871:2:20973:21012	5022861	2	True				
ANR	5022923	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5022861	0		=			
ANR	5022924	PtrMemberAccess	req -> m_result		5022861	0					
ANR	5022925	Identifier	req		5022861	0					
ANR	5022926	Identifier	m_result		5022861	1					
ANR	5022927	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5022861	1					
ANR	5022928	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeResume\\n"" , vm_id )"	872:2:21016:21094	5022861	3	True				
ANR	5022929	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeResume\\n"" , vm_id )"		5022861	0					
ANR	5022930	Callee	vmprintf		5022861	0					
ANR	5022931	Identifier	vmprintf		5022861	0					
ANR	5022932	ArgumentList	D_FULLDEBUG		5022861	1					
ANR	5022933	Argument	D_FULLDEBUG		5022861	0					
ANR	5022934	Identifier	D_FULLDEBUG		5022861	0					
ANR	5022935	Argument	"""VM(id=%d) is not found in executeResume\\n"""		5022861	1					
ANR	5022936	PrimaryExpression	"""VM(id=%d) is not found in executeResume\\n"""		5022861	0					
ANR	5022937	Argument	vm_id		5022861	2					
ANR	5022938	Identifier	vm_id		5022861	0					
ANR	5022939	ReturnStatement	return ;	874:2:21098:21104	5022861	4	True				
ANR	5022940	ElseStatement	else		5022861	0					
ANR	5022941	CompoundStatement		16:2:392:417	5022861	0					
ANR	5022942	IdentifierDeclStatement	int result = vm -> Resume ( ) ;	876:2:21117:21142	5022861	0	True				
ANR	5022943	IdentifierDecl	result = vm -> Resume ( )		5022861	0					
ANR	5022944	IdentifierDeclType	int		5022861	0					
ANR	5022945	Identifier	result		5022861	1					
ANR	5022946	AssignmentExpression	result = vm -> Resume ( )		5022861	2		=			
ANR	5022947	Identifier	result		5022861	0					
ANR	5022948	CallExpression	vm -> Resume ( )		5022861	1					
ANR	5022949	Callee	vm -> Resume		5022861	0					
ANR	5022950	PtrMemberAccess	vm -> Resume		5022861	0					
ANR	5022951	Identifier	vm		5022861	0					
ANR	5022952	Identifier	Resume		5022861	1					
ANR	5022953	ArgumentList			5022861	1					
ANR	5022954	IfStatement	if ( result == false )		5022861	1					
ANR	5022955	Condition	result == false	878:5:21150:21164	5022861	0	True				
ANR	5022956	EqualityExpression	result == false		5022861	0		==			
ANR	5022957	Identifier	result		5022861	0					
ANR	5022958	Identifier	false		5022861	1					
ANR	5022959	CompoundStatement		18:22:442:442	5022861	1					
ANR	5022960	ExpressionStatement	req -> m_has_result = true	879:3:21172:21196	5022861	0	True				
ANR	5022961	AssignmentExpression	req -> m_has_result = true		5022861	0		=			
ANR	5022962	PtrMemberAccess	req -> m_has_result		5022861	0					
ANR	5022963	Identifier	req		5022861	0					
ANR	5022964	Identifier	m_has_result		5022861	1					
ANR	5022965	Identifier	true		5022861	1					
ANR	5022966	ExpressionStatement	req -> m_is_success = false	880:3:21201:21226	5022861	1	True				
ANR	5022967	AssignmentExpression	req -> m_is_success = false		5022861	0		=			
ANR	5022968	PtrMemberAccess	req -> m_is_success		5022861	0					
ANR	5022969	Identifier	req		5022861	0					
ANR	5022970	Identifier	m_is_success		5022861	1					
ANR	5022971	Identifier	false		5022861	1					
ANR	5022972	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	881:3:21231:21289	5022861	2	True				
ANR	5022973	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022861	0		=			
ANR	5022974	PtrMemberAccess	req -> m_result		5022861	0					
ANR	5022975	Identifier	req		5022861	0					
ANR	5022976	Identifier	m_result		5022861	1					
ANR	5022977	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5022861	1					
ANR	5022978	Callee	makeErrorMessage		5022861	0					
ANR	5022979	Identifier	makeErrorMessage		5022861	0					
ANR	5022980	ArgumentList	vm -> m_result_msg . Value ( )		5022861	1					
ANR	5022981	Argument	vm -> m_result_msg . Value ( )		5022861	0					
ANR	5022982	CallExpression	vm -> m_result_msg . Value ( )		5022861	0					
ANR	5022983	Callee	vm -> m_result_msg . Value		5022861	0					
ANR	5022984	MemberAccess	vm -> m_result_msg . Value		5022861	0					
ANR	5022985	PtrMemberAccess	vm -> m_result_msg		5022861	0					
ANR	5022986	Identifier	vm		5022861	0					
ANR	5022987	Identifier	m_result_msg		5022861	1					
ANR	5022988	Identifier	Value		5022861	1					
ANR	5022989	ArgumentList			5022861	1					
ANR	5022990	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeResume fail!\\n"" )"	882:3:21294:21340	5022861	3	True				
ANR	5022991	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeResume fail!\\n"" )"		5022861	0					
ANR	5022992	Callee	vmprintf		5022861	0					
ANR	5022993	Identifier	vmprintf		5022861	0					
ANR	5022994	ArgumentList	D_FULLDEBUG		5022861	1					
ANR	5022995	Argument	D_FULLDEBUG		5022861	0					
ANR	5022996	Identifier	D_FULLDEBUG		5022861	0					
ANR	5022997	Argument	"""executeResume fail!\\n"""		5022861	1					
ANR	5022998	PrimaryExpression	"""executeResume fail!\\n"""		5022861	0					
ANR	5022999	ReturnStatement	return ;	883:3:21345:21351	5022861	4	True				
ANR	5023000	ElseStatement	else		5022861	0					
ANR	5023001	CompoundStatement		24:9:637:637	5022861	0					
ANR	5023002	ExpressionStatement	req -> m_has_result = true	885:3:21367:21391	5022861	0	True				
ANR	5023003	AssignmentExpression	req -> m_has_result = true		5022861	0		=			
ANR	5023004	PtrMemberAccess	req -> m_has_result		5022861	0					
ANR	5023005	Identifier	req		5022861	0					
ANR	5023006	Identifier	m_has_result		5022861	1					
ANR	5023007	Identifier	true		5022861	1					
ANR	5023008	ExpressionStatement	req -> m_is_success = true	886:3:21396:21420	5022861	1	True				
ANR	5023009	AssignmentExpression	req -> m_is_success = true		5022861	0		=			
ANR	5023010	PtrMemberAccess	req -> m_is_success		5022861	0					
ANR	5023011	Identifier	req		5022861	0					
ANR	5023012	Identifier	m_is_success		5022861	1					
ANR	5023013	Identifier	true		5022861	1					
ANR	5023014	ExpressionStatement	"req -> m_result = """""	887:3:21425:21443	5022861	2	True				
ANR	5023015	AssignmentExpression	"req -> m_result = """""		5022861	0		=			
ANR	5023016	PtrMemberAccess	req -> m_result		5022861	0					
ANR	5023017	Identifier	req		5022861	0					
ANR	5023018	Identifier	m_result		5022861	1					
ANR	5023019	PrimaryExpression	""""""		5022861	1					
ANR	5023020	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeResume success!\\n"" )"	888:3:21448:21497	5022861	3	True				
ANR	5023021	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeResume success!\\n"" )"		5022861	0					
ANR	5023022	Callee	vmprintf		5022861	0					
ANR	5023023	Identifier	vmprintf		5022861	0					
ANR	5023024	ArgumentList	D_FULLDEBUG		5022861	1					
ANR	5023025	Argument	D_FULLDEBUG		5022861	0					
ANR	5023026	Identifier	D_FULLDEBUG		5022861	0					
ANR	5023027	Argument	"""executeResume success!\\n"""		5022861	1					
ANR	5023028	PrimaryExpression	"""executeResume success!\\n"""		5022861	0					
ANR	5023029	ReturnStatement	return ;	889:3:21502:21508	5022861	4	True				
ANR	5023030	ReturnType	void		5022861	1					
ANR	5023031	Identifier	VMGahp :: executeResume		5022861	2					
ANR	5023032	ParameterList	VMRequest * req		5022861	3					
ANR	5023033	Parameter	VMRequest * req	860:22:20708:20721	5022861	0	True				
ANR	5023034	ParameterType	VMRequest *		5022861	0					
ANR	5023035	Identifier	req		5022861	1					
ANR	5023036	CFGEntryNode	ENTRY		5022861		True				
ANR	5023037	CFGExitNode	EXIT		5022861		True				
ANR	5023038	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5022861						
ANR	5023039	Symbol	* req		5022861						
ANR	5023040	Symbol	vm -> Resume		5022861						
ANR	5023041	Symbol	makeErrorMessage		5022861						
ANR	5023042	Symbol	* req -> m_args		5022861						
ANR	5023043	Symbol	err_message		5022861						
ANR	5023044	Symbol	result		5022861						
ANR	5023045	Symbol	req -> m_args . argv		5022861						
ANR	5023046	Symbol	vm_id		5022861						
ANR	5023047	Symbol	req -> m_result		5022861						
ANR	5023048	Symbol	strtol		5022861						
ANR	5023049	Symbol	req		5022861						
ANR	5023050	Symbol	* req -> m_args . argv		5022861						
ANR	5023051	Symbol	NULL		5022861						
ANR	5023052	Symbol	false		5022861						
ANR	5023053	Symbol	D_FULLDEBUG		5022861						
ANR	5023054	Symbol	req -> m_args		5022861						
ANR	5023055	Symbol	vm -> m_result_msg		5022861						
ANR	5023056	Symbol	* * req		5022861						
ANR	5023057	Symbol	vm -> m_result_msg . Value		5022861						
ANR	5023058	Symbol	vm		5022861						
ANR	5023059	Symbol	true		5022861						
ANR	5023060	Symbol	findVM		5022861						
ANR	5023061	Symbol	req -> m_has_result		5022861						
ANR	5023062	Symbol	req -> m_is_success		5022861						
ANR	5023063	Symbol	* vm		5022861						
ANR	5023064	Function	VMGahp :: executeCheckpoint	894:0:21520:22380							
ANR	5023065	FunctionDef	VMGahp :: executeCheckpoint (VMRequest * req)		5023064	0					
ANR	5023066	CompoundStatement		896:0:21567:22380	5023064	0					
ANR	5023067	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	898:1:21630:21687	5023064	0	True				
ANR	5023068	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023064	0					
ANR	5023069	IdentifierDeclType	int		5023064	0					
ANR	5023070	Identifier	vm_id		5023064	1					
ANR	5023071	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023064	2		=			
ANR	5023072	Identifier	vm_id		5023064	0					
ANR	5023073	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023064	1					
ANR	5023074	Callee	strtol		5023064	0					
ANR	5023075	Identifier	strtol		5023064	0					
ANR	5023076	ArgumentList	req -> m_args . argv [ 2 ]		5023064	1					
ANR	5023077	Argument	req -> m_args . argv [ 2 ]		5023064	0					
ANR	5023078	ArrayIndexing	req -> m_args . argv [ 2 ]		5023064	0					
ANR	5023079	MemberAccess	req -> m_args . argv		5023064	0					
ANR	5023080	PtrMemberAccess	req -> m_args		5023064	0					
ANR	5023081	Identifier	req		5023064	0					
ANR	5023082	Identifier	m_args		5023064	1					
ANR	5023083	Identifier	argv		5023064	1					
ANR	5023084	PrimaryExpression	2		5023064	1					
ANR	5023085	Argument	( char * * ) NULL		5023064	1					
ANR	5023086	CastExpression	( char * * ) NULL		5023064	0					
ANR	5023087	CastTarget	char * *		5023064	0					
ANR	5023088	Identifier	NULL		5023064	1					
ANR	5023089	Argument	10		5023064	2					
ANR	5023090	PrimaryExpression	10		5023064	0					
ANR	5023091	IdentifierDeclStatement	MyString err_message ;	900:1:21691:21711	5023064	1	True				
ANR	5023092	IdentifierDecl	err_message		5023064	0					
ANR	5023093	IdentifierDeclType	MyString		5023064	0					
ANR	5023094	Identifier	err_message		5023064	1					
ANR	5023095	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	901:1:21714:21740	5023064	2	True				
ANR	5023096	IdentifierDecl	* vm = findVM ( vm_id )		5023064	0					
ANR	5023097	IdentifierDeclType	VMType *		5023064	0					
ANR	5023098	Identifier	vm		5023064	1					
ANR	5023099	AssignmentExpression	* vm = findVM ( vm_id )		5023064	2		=			
ANR	5023100	Identifier	vm		5023064	0					
ANR	5023101	CallExpression	findVM ( vm_id )		5023064	1					
ANR	5023102	Callee	findVM		5023064	0					
ANR	5023103	Identifier	findVM		5023064	0					
ANR	5023104	ArgumentList	vm_id		5023064	1					
ANR	5023105	Argument	vm_id		5023064	0					
ANR	5023106	Identifier	vm_id		5023064	0					
ANR	5023107	IfStatement	if ( vm == NULL )		5023064	3					
ANR	5023108	Condition	vm == NULL	903:4:21747:21756	5023064	0	True				
ANR	5023109	EqualityExpression	vm == NULL		5023064	0		==			
ANR	5023110	Identifier	vm		5023064	0					
ANR	5023111	Identifier	NULL		5023064	1					
ANR	5023112	CompoundStatement		8:16:191:191	5023064	1					
ANR	5023113	ExpressionStatement	req -> m_has_result = true	904:2:21763:21787	5023064	0	True				
ANR	5023114	AssignmentExpression	req -> m_has_result = true		5023064	0		=			
ANR	5023115	PtrMemberAccess	req -> m_has_result		5023064	0					
ANR	5023116	Identifier	req		5023064	0					
ANR	5023117	Identifier	m_has_result		5023064	1					
ANR	5023118	Identifier	true		5023064	1					
ANR	5023119	ExpressionStatement	req -> m_is_success = false	905:2:21791:21816	5023064	1	True				
ANR	5023120	AssignmentExpression	req -> m_is_success = false		5023064	0		=			
ANR	5023121	PtrMemberAccess	req -> m_is_success		5023064	0					
ANR	5023122	Identifier	req		5023064	0					
ANR	5023123	Identifier	m_is_success		5023064	1					
ANR	5023124	Identifier	false		5023064	1					
ANR	5023125	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	906:2:21820:21859	5023064	2	True				
ANR	5023126	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5023064	0		=			
ANR	5023127	PtrMemberAccess	req -> m_result		5023064	0					
ANR	5023128	Identifier	req		5023064	0					
ANR	5023129	Identifier	m_result		5023064	1					
ANR	5023130	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5023064	1					
ANR	5023131	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeCheckpoint\\n"" , vm_id )"	907:2:21863:21945	5023064	3	True				
ANR	5023132	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeCheckpoint\\n"" , vm_id )"		5023064	0					
ANR	5023133	Callee	vmprintf		5023064	0					
ANR	5023134	Identifier	vmprintf		5023064	0					
ANR	5023135	ArgumentList	D_FULLDEBUG		5023064	1					
ANR	5023136	Argument	D_FULLDEBUG		5023064	0					
ANR	5023137	Identifier	D_FULLDEBUG		5023064	0					
ANR	5023138	Argument	"""VM(id=%d) is not found in executeCheckpoint\\n"""		5023064	1					
ANR	5023139	PrimaryExpression	"""VM(id=%d) is not found in executeCheckpoint\\n"""		5023064	0					
ANR	5023140	Argument	vm_id		5023064	2					
ANR	5023141	Identifier	vm_id		5023064	0					
ANR	5023142	ReturnStatement	return ;	909:2:21949:21955	5023064	4	True				
ANR	5023143	ElseStatement	else		5023064	0					
ANR	5023144	CompoundStatement		16:2:400:429	5023064	0					
ANR	5023145	IdentifierDeclStatement	int result = vm -> Checkpoint ( ) ;	911:2:21968:21997	5023064	0	True				
ANR	5023146	IdentifierDecl	result = vm -> Checkpoint ( )		5023064	0					
ANR	5023147	IdentifierDeclType	int		5023064	0					
ANR	5023148	Identifier	result		5023064	1					
ANR	5023149	AssignmentExpression	result = vm -> Checkpoint ( )		5023064	2		=			
ANR	5023150	Identifier	result		5023064	0					
ANR	5023151	CallExpression	vm -> Checkpoint ( )		5023064	1					
ANR	5023152	Callee	vm -> Checkpoint		5023064	0					
ANR	5023153	PtrMemberAccess	vm -> Checkpoint		5023064	0					
ANR	5023154	Identifier	vm		5023064	0					
ANR	5023155	Identifier	Checkpoint		5023064	1					
ANR	5023156	ArgumentList			5023064	1					
ANR	5023157	IfStatement	if ( result == false )		5023064	1					
ANR	5023158	Condition	result == false	913:5:22005:22019	5023064	0	True				
ANR	5023159	EqualityExpression	result == false		5023064	0		==			
ANR	5023160	Identifier	result		5023064	0					
ANR	5023161	Identifier	false		5023064	1					
ANR	5023162	CompoundStatement		18:22:454:454	5023064	1					
ANR	5023163	ExpressionStatement	req -> m_has_result = true	914:3:22027:22051	5023064	0	True				
ANR	5023164	AssignmentExpression	req -> m_has_result = true		5023064	0		=			
ANR	5023165	PtrMemberAccess	req -> m_has_result		5023064	0					
ANR	5023166	Identifier	req		5023064	0					
ANR	5023167	Identifier	m_has_result		5023064	1					
ANR	5023168	Identifier	true		5023064	1					
ANR	5023169	ExpressionStatement	req -> m_is_success = false	915:3:22056:22081	5023064	1	True				
ANR	5023170	AssignmentExpression	req -> m_is_success = false		5023064	0		=			
ANR	5023171	PtrMemberAccess	req -> m_is_success		5023064	0					
ANR	5023172	Identifier	req		5023064	0					
ANR	5023173	Identifier	m_is_success		5023064	1					
ANR	5023174	Identifier	false		5023064	1					
ANR	5023175	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	916:3:22086:22144	5023064	2	True				
ANR	5023176	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5023064	0		=			
ANR	5023177	PtrMemberAccess	req -> m_result		5023064	0					
ANR	5023178	Identifier	req		5023064	0					
ANR	5023179	Identifier	m_result		5023064	1					
ANR	5023180	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5023064	1					
ANR	5023181	Callee	makeErrorMessage		5023064	0					
ANR	5023182	Identifier	makeErrorMessage		5023064	0					
ANR	5023183	ArgumentList	vm -> m_result_msg . Value ( )		5023064	1					
ANR	5023184	Argument	vm -> m_result_msg . Value ( )		5023064	0					
ANR	5023185	CallExpression	vm -> m_result_msg . Value ( )		5023064	0					
ANR	5023186	Callee	vm -> m_result_msg . Value		5023064	0					
ANR	5023187	MemberAccess	vm -> m_result_msg . Value		5023064	0					
ANR	5023188	PtrMemberAccess	vm -> m_result_msg		5023064	0					
ANR	5023189	Identifier	vm		5023064	0					
ANR	5023190	Identifier	m_result_msg		5023064	1					
ANR	5023191	Identifier	Value		5023064	1					
ANR	5023192	ArgumentList			5023064	1					
ANR	5023193	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint fail!\\n"" )"	917:3:22149:22199	5023064	3	True				
ANR	5023194	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint fail!\\n"" )"		5023064	0					
ANR	5023195	Callee	vmprintf		5023064	0					
ANR	5023196	Identifier	vmprintf		5023064	0					
ANR	5023197	ArgumentList	D_FULLDEBUG		5023064	1					
ANR	5023198	Argument	D_FULLDEBUG		5023064	0					
ANR	5023199	Identifier	D_FULLDEBUG		5023064	0					
ANR	5023200	Argument	"""executeCheckpoint fail!\\n"""		5023064	1					
ANR	5023201	PrimaryExpression	"""executeCheckpoint fail!\\n"""		5023064	0					
ANR	5023202	ReturnStatement	return ;	918:3:22204:22210	5023064	4	True				
ANR	5023203	ElseStatement	else		5023064	0					
ANR	5023204	CompoundStatement		24:9:653:653	5023064	0					
ANR	5023205	ExpressionStatement	req -> m_has_result = true	920:3:22226:22250	5023064	0	True				
ANR	5023206	AssignmentExpression	req -> m_has_result = true		5023064	0		=			
ANR	5023207	PtrMemberAccess	req -> m_has_result		5023064	0					
ANR	5023208	Identifier	req		5023064	0					
ANR	5023209	Identifier	m_has_result		5023064	1					
ANR	5023210	Identifier	true		5023064	1					
ANR	5023211	ExpressionStatement	req -> m_is_success = true	921:3:22255:22279	5023064	1	True				
ANR	5023212	AssignmentExpression	req -> m_is_success = true		5023064	0		=			
ANR	5023213	PtrMemberAccess	req -> m_is_success		5023064	0					
ANR	5023214	Identifier	req		5023064	0					
ANR	5023215	Identifier	m_is_success		5023064	1					
ANR	5023216	Identifier	true		5023064	1					
ANR	5023217	ExpressionStatement	"req -> m_result = """""	922:3:22284:22302	5023064	2	True				
ANR	5023218	AssignmentExpression	"req -> m_result = """""		5023064	0		=			
ANR	5023219	PtrMemberAccess	req -> m_result		5023064	0					
ANR	5023220	Identifier	req		5023064	0					
ANR	5023221	Identifier	m_result		5023064	1					
ANR	5023222	PrimaryExpression	""""""		5023064	1					
ANR	5023223	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint success!\\n"" )"	923:3:22307:22360	5023064	3	True				
ANR	5023224	CallExpression	"vmprintf ( D_FULLDEBUG , ""executeCheckpoint success!\\n"" )"		5023064	0					
ANR	5023225	Callee	vmprintf		5023064	0					
ANR	5023226	Identifier	vmprintf		5023064	0					
ANR	5023227	ArgumentList	D_FULLDEBUG		5023064	1					
ANR	5023228	Argument	D_FULLDEBUG		5023064	0					
ANR	5023229	Identifier	D_FULLDEBUG		5023064	0					
ANR	5023230	Argument	"""executeCheckpoint success!\\n"""		5023064	1					
ANR	5023231	PrimaryExpression	"""executeCheckpoint success!\\n"""		5023064	0					
ANR	5023232	ReturnStatement	return ;	924:3:22365:22371	5023064	4	True				
ANR	5023233	ReturnType	void		5023064	1					
ANR	5023234	Identifier	VMGahp :: executeCheckpoint		5023064	2					
ANR	5023235	ParameterList	VMRequest * req		5023064	3					
ANR	5023236	Parameter	VMRequest * req	895:26:21551:21564	5023064	0	True				
ANR	5023237	ParameterType	VMRequest *		5023064	0					
ANR	5023238	Identifier	req		5023064	1					
ANR	5023239	CFGEntryNode	ENTRY		5023064		True				
ANR	5023240	CFGExitNode	EXIT		5023064		True				
ANR	5023241	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5023064						
ANR	5023242	Symbol	* req		5023064						
ANR	5023243	Symbol	makeErrorMessage		5023064						
ANR	5023244	Symbol	* req -> m_args		5023064						
ANR	5023245	Symbol	err_message		5023064						
ANR	5023246	Symbol	result		5023064						
ANR	5023247	Symbol	req -> m_args . argv		5023064						
ANR	5023248	Symbol	vm_id		5023064						
ANR	5023249	Symbol	req -> m_result		5023064						
ANR	5023250	Symbol	strtol		5023064						
ANR	5023251	Symbol	req		5023064						
ANR	5023252	Symbol	* req -> m_args . argv		5023064						
ANR	5023253	Symbol	NULL		5023064						
ANR	5023254	Symbol	false		5023064						
ANR	5023255	Symbol	D_FULLDEBUG		5023064						
ANR	5023256	Symbol	req -> m_args		5023064						
ANR	5023257	Symbol	vm -> Checkpoint		5023064						
ANR	5023258	Symbol	vm -> m_result_msg		5023064						
ANR	5023259	Symbol	* * req		5023064						
ANR	5023260	Symbol	vm -> m_result_msg . Value		5023064						
ANR	5023261	Symbol	vm		5023064						
ANR	5023262	Symbol	true		5023064						
ANR	5023263	Symbol	findVM		5023064						
ANR	5023264	Symbol	req -> m_has_result		5023064						
ANR	5023265	Symbol	req -> m_is_success		5023064						
ANR	5023266	Symbol	* vm		5023064						
ANR	5023267	Function	VMGahp :: executeStatus	929:0:22383:23105							
ANR	5023268	FunctionDef	VMGahp :: executeStatus (VMRequest * req)		5023267	0					
ANR	5023269	CompoundStatement		931:0:22426:23105	5023267	0					
ANR	5023270	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	933:1:22485:22542	5023267	0	True				
ANR	5023271	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023267	0					
ANR	5023272	IdentifierDeclType	int		5023267	0					
ANR	5023273	Identifier	vm_id		5023267	1					
ANR	5023274	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023267	2		=			
ANR	5023275	Identifier	vm_id		5023267	0					
ANR	5023276	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023267	1					
ANR	5023277	Callee	strtol		5023267	0					
ANR	5023278	Identifier	strtol		5023267	0					
ANR	5023279	ArgumentList	req -> m_args . argv [ 2 ]		5023267	1					
ANR	5023280	Argument	req -> m_args . argv [ 2 ]		5023267	0					
ANR	5023281	ArrayIndexing	req -> m_args . argv [ 2 ]		5023267	0					
ANR	5023282	MemberAccess	req -> m_args . argv		5023267	0					
ANR	5023283	PtrMemberAccess	req -> m_args		5023267	0					
ANR	5023284	Identifier	req		5023267	0					
ANR	5023285	Identifier	m_args		5023267	1					
ANR	5023286	Identifier	argv		5023267	1					
ANR	5023287	PrimaryExpression	2		5023267	1					
ANR	5023288	Argument	( char * * ) NULL		5023267	1					
ANR	5023289	CastExpression	( char * * ) NULL		5023267	0					
ANR	5023290	CastTarget	char * *		5023267	0					
ANR	5023291	Identifier	NULL		5023267	1					
ANR	5023292	Argument	10		5023267	2					
ANR	5023293	PrimaryExpression	10		5023267	0					
ANR	5023294	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	935:1:22546:22572	5023267	1	True				
ANR	5023295	IdentifierDecl	* vm = findVM ( vm_id )		5023267	0					
ANR	5023296	IdentifierDeclType	VMType *		5023267	0					
ANR	5023297	Identifier	vm		5023267	1					
ANR	5023298	AssignmentExpression	* vm = findVM ( vm_id )		5023267	2		=			
ANR	5023299	Identifier	vm		5023267	0					
ANR	5023300	CallExpression	findVM ( vm_id )		5023267	1					
ANR	5023301	Callee	findVM		5023267	0					
ANR	5023302	Identifier	findVM		5023267	0					
ANR	5023303	ArgumentList	vm_id		5023267	1					
ANR	5023304	Argument	vm_id		5023267	0					
ANR	5023305	Identifier	vm_id		5023267	0					
ANR	5023306	IfStatement	if ( vm == NULL )		5023267	2					
ANR	5023307	Condition	vm == NULL	937:4:22579:22588	5023267	0	True				
ANR	5023308	EqualityExpression	vm == NULL		5023267	0		==			
ANR	5023309	Identifier	vm		5023267	0					
ANR	5023310	Identifier	NULL		5023267	1					
ANR	5023311	CompoundStatement		7:16:164:164	5023267	1					
ANR	5023312	ExpressionStatement	req -> m_has_result = true	938:2:22595:22619	5023267	0	True				
ANR	5023313	AssignmentExpression	req -> m_has_result = true		5023267	0		=			
ANR	5023314	PtrMemberAccess	req -> m_has_result		5023267	0					
ANR	5023315	Identifier	req		5023267	0					
ANR	5023316	Identifier	m_has_result		5023267	1					
ANR	5023317	Identifier	true		5023267	1					
ANR	5023318	ExpressionStatement	req -> m_is_success = true	939:2:22623:22647	5023267	1	True				
ANR	5023319	AssignmentExpression	req -> m_is_success = true		5023267	0		=			
ANR	5023320	PtrMemberAccess	req -> m_is_success		5023267	0					
ANR	5023321	Identifier	req		5023267	0					
ANR	5023322	Identifier	m_is_success		5023267	1					
ANR	5023323	Identifier	true		5023267	1					
ANR	5023324	ExpressionStatement	"req -> m_result = ""Stopped"""	940:2:22651:22676	5023267	2	True				
ANR	5023325	AssignmentExpression	"req -> m_result = ""Stopped"""		5023267	0		=			
ANR	5023326	PtrMemberAccess	req -> m_result		5023267	0					
ANR	5023327	Identifier	req		5023267	0					
ANR	5023328	Identifier	m_result		5023267	1					
ANR	5023329	PrimaryExpression	"""Stopped"""		5023267	1					
ANR	5023330	ReturnStatement	return ;	941:2:22680:22686	5023267	3	True				
ANR	5023331	ElseStatement	else		5023267	0					
ANR	5023332	CompoundStatement		13:2:272:297	5023267	0					
ANR	5023333	IdentifierDeclStatement	int result = vm -> Status ( ) ;	943:2:22699:22724	5023267	0	True				
ANR	5023334	IdentifierDecl	result = vm -> Status ( )		5023267	0					
ANR	5023335	IdentifierDeclType	int		5023267	0					
ANR	5023336	Identifier	result		5023267	1					
ANR	5023337	AssignmentExpression	result = vm -> Status ( )		5023267	2		=			
ANR	5023338	Identifier	result		5023267	0					
ANR	5023339	CallExpression	vm -> Status ( )		5023267	1					
ANR	5023340	Callee	vm -> Status		5023267	0					
ANR	5023341	PtrMemberAccess	vm -> Status		5023267	0					
ANR	5023342	Identifier	vm		5023267	0					
ANR	5023343	Identifier	Status		5023267	1					
ANR	5023344	ArgumentList			5023267	1					
ANR	5023345	IfStatement	if ( result == false )		5023267	1					
ANR	5023346	Condition	result == false	945:5:22732:22746	5023267	0	True				
ANR	5023347	EqualityExpression	result == false		5023267	0		==			
ANR	5023348	Identifier	result		5023267	0					
ANR	5023349	Identifier	false		5023267	1					
ANR	5023350	CompoundStatement		15:22:322:322	5023267	1					
ANR	5023351	ExpressionStatement	req -> m_has_result = true	946:3:22754:22778	5023267	0	True				
ANR	5023352	AssignmentExpression	req -> m_has_result = true		5023267	0		=			
ANR	5023353	PtrMemberAccess	req -> m_has_result		5023267	0					
ANR	5023354	Identifier	req		5023267	0					
ANR	5023355	Identifier	m_has_result		5023267	1					
ANR	5023356	Identifier	true		5023267	1					
ANR	5023357	ExpressionStatement	req -> m_is_success = false	947:3:22783:22808	5023267	1	True				
ANR	5023358	AssignmentExpression	req -> m_is_success = false		5023267	0		=			
ANR	5023359	PtrMemberAccess	req -> m_is_success		5023267	0					
ANR	5023360	Identifier	req		5023267	0					
ANR	5023361	Identifier	m_is_success		5023267	1					
ANR	5023362	Identifier	false		5023267	1					
ANR	5023363	ExpressionStatement	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )	948:3:22813:22871	5023267	2	True				
ANR	5023364	AssignmentExpression	req -> m_result = makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5023267	0		=			
ANR	5023365	PtrMemberAccess	req -> m_result		5023267	0					
ANR	5023366	Identifier	req		5023267	0					
ANR	5023367	Identifier	m_result		5023267	1					
ANR	5023368	CallExpression	makeErrorMessage ( vm -> m_result_msg . Value ( ) )		5023267	1					
ANR	5023369	Callee	makeErrorMessage		5023267	0					
ANR	5023370	Identifier	makeErrorMessage		5023267	0					
ANR	5023371	ArgumentList	vm -> m_result_msg . Value ( )		5023267	1					
ANR	5023372	Argument	vm -> m_result_msg . Value ( )		5023267	0					
ANR	5023373	CallExpression	vm -> m_result_msg . Value ( )		5023267	0					
ANR	5023374	Callee	vm -> m_result_msg . Value		5023267	0					
ANR	5023375	MemberAccess	vm -> m_result_msg . Value		5023267	0					
ANR	5023376	PtrMemberAccess	vm -> m_result_msg		5023267	0					
ANR	5023377	Identifier	vm		5023267	0					
ANR	5023378	Identifier	m_result_msg		5023267	1					
ANR	5023379	Identifier	Value		5023267	1					
ANR	5023380	ArgumentList			5023267	1					
ANR	5023381	ReturnStatement	return ;	949:3:22876:22882	5023267	3	True				
ANR	5023382	ElseStatement	else		5023267	0					
ANR	5023383	CompoundStatement		20:9:466:466	5023267	0					
ANR	5023384	ExpressionStatement	req -> m_has_result = true	952:3:22899:22923	5023267	0	True				
ANR	5023385	AssignmentExpression	req -> m_has_result = true		5023267	0		=			
ANR	5023386	PtrMemberAccess	req -> m_has_result		5023267	0					
ANR	5023387	Identifier	req		5023267	0					
ANR	5023388	Identifier	m_has_result		5023267	1					
ANR	5023389	Identifier	true		5023267	1					
ANR	5023390	ExpressionStatement	req -> m_is_success = true	953:3:22928:22952	5023267	1	True				
ANR	5023391	AssignmentExpression	req -> m_is_success = true		5023267	0		=			
ANR	5023392	PtrMemberAccess	req -> m_is_success		5023267	0					
ANR	5023393	Identifier	req		5023267	0					
ANR	5023394	Identifier	m_is_success		5023267	1					
ANR	5023395	Identifier	true		5023267	1					
ANR	5023396	ExpressionStatement	req -> m_result = vm -> m_result_msg	954:3:22957:22989	5023267	2	True				
ANR	5023397	AssignmentExpression	req -> m_result = vm -> m_result_msg		5023267	0		=			
ANR	5023398	PtrMemberAccess	req -> m_result		5023267	0					
ANR	5023399	Identifier	req		5023267	0					
ANR	5023400	Identifier	m_result		5023267	1					
ANR	5023401	PtrMemberAccess	vm -> m_result_msg		5023267	1					
ANR	5023402	Identifier	vm		5023267	0					
ANR	5023403	Identifier	m_result_msg		5023267	1					
ANR	5023404	ExpressionStatement	vm -> setLastStatus ( req -> m_result . Value ( ) )	957:3:23045:23085	5023267	3	True				
ANR	5023405	CallExpression	vm -> setLastStatus ( req -> m_result . Value ( ) )		5023267	0					
ANR	5023406	Callee	vm -> setLastStatus		5023267	0					
ANR	5023407	PtrMemberAccess	vm -> setLastStatus		5023267	0					
ANR	5023408	Identifier	vm		5023267	0					
ANR	5023409	Identifier	setLastStatus		5023267	1					
ANR	5023410	ArgumentList	req -> m_result . Value ( )		5023267	1					
ANR	5023411	Argument	req -> m_result . Value ( )		5023267	0					
ANR	5023412	CallExpression	req -> m_result . Value ( )		5023267	0					
ANR	5023413	Callee	req -> m_result . Value		5023267	0					
ANR	5023414	MemberAccess	req -> m_result . Value		5023267	0					
ANR	5023415	PtrMemberAccess	req -> m_result		5023267	0					
ANR	5023416	Identifier	req		5023267	0					
ANR	5023417	Identifier	m_result		5023267	1					
ANR	5023418	Identifier	Value		5023267	1					
ANR	5023419	ArgumentList			5023267	1					
ANR	5023420	ReturnStatement	return ;	958:3:23090:23096	5023267	4	True				
ANR	5023421	ReturnType	void		5023267	1					
ANR	5023422	Identifier	VMGahp :: executeStatus		5023267	2					
ANR	5023423	ParameterList	VMRequest * req		5023267	3					
ANR	5023424	Parameter	VMRequest * req	930:22:22410:22423	5023267	0	True				
ANR	5023425	ParameterType	VMRequest *		5023267	0					
ANR	5023426	Identifier	req		5023267	1					
ANR	5023427	CFGEntryNode	ENTRY		5023267		True				
ANR	5023428	CFGExitNode	EXIT		5023267		True				
ANR	5023429	Symbol	vm -> Status		5023267						
ANR	5023430	Symbol	NULL		5023267						
ANR	5023431	Symbol	* req		5023267						
ANR	5023432	Symbol	false		5023267						
ANR	5023433	Symbol	req -> m_result . Value		5023267						
ANR	5023434	Symbol	makeErrorMessage		5023267						
ANR	5023435	Symbol	req -> m_args		5023267						
ANR	5023436	Symbol	* req -> m_args		5023267						
ANR	5023437	Symbol	result		5023267						
ANR	5023438	Symbol	vm -> m_result_msg		5023267						
ANR	5023439	Symbol	* * req		5023267						
ANR	5023440	Symbol	vm_id		5023267						
ANR	5023441	Symbol	req -> m_args . argv		5023267						
ANR	5023442	Symbol	req -> m_result		5023267						
ANR	5023443	Symbol	strtol		5023267						
ANR	5023444	Symbol	vm -> m_result_msg . Value		5023267						
ANR	5023445	Symbol	vm		5023267						
ANR	5023446	Symbol	true		5023267						
ANR	5023447	Symbol	findVM		5023267						
ANR	5023448	Symbol	req -> m_has_result		5023267						
ANR	5023449	Symbol	req -> m_is_success		5023267						
ANR	5023450	Symbol	* vm		5023267						
ANR	5023451	Symbol	req		5023267						
ANR	5023452	Symbol	* req -> m_args . argv		5023267						
ANR	5023453	Function	VMGahp :: executeGetpid	963:0:23108:23723							
ANR	5023454	FunctionDef	VMGahp :: executeGetpid (VMRequest * req)		5023453	0					
ANR	5023455	CompoundStatement		965:0:23151:23723	5023453	0					
ANR	5023456	IdentifierDeclStatement	"int vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 ) ;"	967:1:23210:23267	5023453	0	True				
ANR	5023457	IdentifierDecl	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023453	0					
ANR	5023458	IdentifierDeclType	int		5023453	0					
ANR	5023459	Identifier	vm_id		5023453	1					
ANR	5023460	AssignmentExpression	"vm_id = strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023453	2		=			
ANR	5023461	Identifier	vm_id		5023453	0					
ANR	5023462	CallExpression	"strtol ( req -> m_args . argv [ 2 ] , ( char * * ) NULL , 10 )"		5023453	1					
ANR	5023463	Callee	strtol		5023453	0					
ANR	5023464	Identifier	strtol		5023453	0					
ANR	5023465	ArgumentList	req -> m_args . argv [ 2 ]		5023453	1					
ANR	5023466	Argument	req -> m_args . argv [ 2 ]		5023453	0					
ANR	5023467	ArrayIndexing	req -> m_args . argv [ 2 ]		5023453	0					
ANR	5023468	MemberAccess	req -> m_args . argv		5023453	0					
ANR	5023469	PtrMemberAccess	req -> m_args		5023453	0					
ANR	5023470	Identifier	req		5023453	0					
ANR	5023471	Identifier	m_args		5023453	1					
ANR	5023472	Identifier	argv		5023453	1					
ANR	5023473	PrimaryExpression	2		5023453	1					
ANR	5023474	Argument	( char * * ) NULL		5023453	1					
ANR	5023475	CastExpression	( char * * ) NULL		5023453	0					
ANR	5023476	CastTarget	char * *		5023453	0					
ANR	5023477	Identifier	NULL		5023453	1					
ANR	5023478	Argument	10		5023453	2					
ANR	5023479	PrimaryExpression	10		5023453	0					
ANR	5023480	IdentifierDeclStatement	MyString err_message ;	969:1:23271:23291	5023453	1	True				
ANR	5023481	IdentifierDecl	err_message		5023453	0					
ANR	5023482	IdentifierDeclType	MyString		5023453	0					
ANR	5023483	Identifier	err_message		5023453	1					
ANR	5023484	IdentifierDeclStatement	VMType * vm = findVM ( vm_id ) ;	970:1:23294:23320	5023453	2	True				
ANR	5023485	IdentifierDecl	* vm = findVM ( vm_id )		5023453	0					
ANR	5023486	IdentifierDeclType	VMType *		5023453	0					
ANR	5023487	Identifier	vm		5023453	1					
ANR	5023488	AssignmentExpression	* vm = findVM ( vm_id )		5023453	2		=			
ANR	5023489	Identifier	vm		5023453	0					
ANR	5023490	CallExpression	findVM ( vm_id )		5023453	1					
ANR	5023491	Callee	findVM		5023453	0					
ANR	5023492	Identifier	findVM		5023453	0					
ANR	5023493	ArgumentList	vm_id		5023453	1					
ANR	5023494	Argument	vm_id		5023453	0					
ANR	5023495	Identifier	vm_id		5023453	0					
ANR	5023496	IfStatement	if ( vm == NULL )		5023453	3					
ANR	5023497	Condition	vm == NULL	972:4:23327:23336	5023453	0	True				
ANR	5023498	EqualityExpression	vm == NULL		5023453	0		==			
ANR	5023499	Identifier	vm		5023453	0					
ANR	5023500	Identifier	NULL		5023453	1					
ANR	5023501	CompoundStatement		8:16:187:187	5023453	1					
ANR	5023502	ExpressionStatement	req -> m_has_result = true	973:2:23343:23367	5023453	0	True				
ANR	5023503	AssignmentExpression	req -> m_has_result = true		5023453	0		=			
ANR	5023504	PtrMemberAccess	req -> m_has_result		5023453	0					
ANR	5023505	Identifier	req		5023453	0					
ANR	5023506	Identifier	m_has_result		5023453	1					
ANR	5023507	Identifier	true		5023453	1					
ANR	5023508	ExpressionStatement	req -> m_is_success = false	974:2:23371:23396	5023453	1	True				
ANR	5023509	AssignmentExpression	req -> m_is_success = false		5023453	0		=			
ANR	5023510	PtrMemberAccess	req -> m_is_success		5023453	0					
ANR	5023511	Identifier	req		5023453	0					
ANR	5023512	Identifier	m_is_success		5023453	1					
ANR	5023513	Identifier	false		5023453	1					
ANR	5023514	ExpressionStatement	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND	975:2:23400:23439	5023453	2	True				
ANR	5023515	AssignmentExpression	req -> m_result = VMGAHP_ERR_VM_NOT_FOUND		5023453	0		=			
ANR	5023516	PtrMemberAccess	req -> m_result		5023453	0					
ANR	5023517	Identifier	req		5023453	0					
ANR	5023518	Identifier	m_result		5023453	1					
ANR	5023519	Identifier	VMGAHP_ERR_VM_NOT_FOUND		5023453	1					
ANR	5023520	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeGetPid\\n"" , vm_id )"	976:2:23443:23521	5023453	3	True				
ANR	5023521	CallExpression	"vmprintf ( D_FULLDEBUG , ""VM(id=%d) is not found in executeGetPid\\n"" , vm_id )"		5023453	0					
ANR	5023522	Callee	vmprintf		5023453	0					
ANR	5023523	Identifier	vmprintf		5023453	0					
ANR	5023524	ArgumentList	D_FULLDEBUG		5023453	1					
ANR	5023525	Argument	D_FULLDEBUG		5023453	0					
ANR	5023526	Identifier	D_FULLDEBUG		5023453	0					
ANR	5023527	Argument	"""VM(id=%d) is not found in executeGetPid\\n"""		5023453	1					
ANR	5023528	PrimaryExpression	"""VM(id=%d) is not found in executeGetPid\\n"""		5023453	0					
ANR	5023529	Argument	vm_id		5023453	2					
ANR	5023530	Identifier	vm_id		5023453	0					
ANR	5023531	ReturnStatement	return ;	978:2:23525:23531	5023453	4	True				
ANR	5023532	ElseStatement	else		5023453	0					
ANR	5023533	CompoundStatement		15:7:388:388	5023453	0					
ANR	5023534	ExpressionStatement	req -> m_has_result = true	980:2:23544:23568	5023453	0	True				
ANR	5023535	AssignmentExpression	req -> m_has_result = true		5023453	0		=			
ANR	5023536	PtrMemberAccess	req -> m_has_result		5023453	0					
ANR	5023537	Identifier	req		5023453	0					
ANR	5023538	Identifier	m_has_result		5023453	1					
ANR	5023539	Identifier	true		5023453	1					
ANR	5023540	ExpressionStatement	req -> m_is_success = true	981:2:23572:23596	5023453	1	True				
ANR	5023541	AssignmentExpression	req -> m_is_success = true		5023453	0		=			
ANR	5023542	PtrMemberAccess	req -> m_is_success		5023453	0					
ANR	5023543	Identifier	req		5023453	0					
ANR	5023544	Identifier	m_is_success		5023453	1					
ANR	5023545	Identifier	true		5023453	1					
ANR	5023546	ExpressionStatement	"req -> m_result = """""	984:2:23656:23674	5023453	2	True				
ANR	5023547	AssignmentExpression	"req -> m_result = """""		5023453	0		=			
ANR	5023548	PtrMemberAccess	req -> m_result		5023453	0					
ANR	5023549	Identifier	req		5023453	0					
ANR	5023550	Identifier	m_result		5023453	1					
ANR	5023551	PrimaryExpression	""""""		5023453	1					
ANR	5023552	ExpressionStatement	req -> m_result += vm -> PidOfVM ( )	985:2:23678:23708	5023453	3	True				
ANR	5023553	AssignmentExpression	req -> m_result += vm -> PidOfVM ( )		5023453	0		+=			
ANR	5023554	PtrMemberAccess	req -> m_result		5023453	0					
ANR	5023555	Identifier	req		5023453	0					
ANR	5023556	Identifier	m_result		5023453	1					
ANR	5023557	CallExpression	vm -> PidOfVM ( )		5023453	1					
ANR	5023558	Callee	vm -> PidOfVM		5023453	0					
ANR	5023559	PtrMemberAccess	vm -> PidOfVM		5023453	0					
ANR	5023560	Identifier	vm		5023453	0					
ANR	5023561	Identifier	PidOfVM		5023453	1					
ANR	5023562	ArgumentList			5023453	1					
ANR	5023563	ReturnStatement	return ;	986:2:23712:23718	5023453	4	True				
ANR	5023564	ReturnType	void		5023453	1					
ANR	5023565	Identifier	VMGahp :: executeGetpid		5023453	2					
ANR	5023566	ParameterList	VMRequest * req		5023453	3					
ANR	5023567	Parameter	VMRequest * req	964:22:23135:23148	5023453	0	True				
ANR	5023568	ParameterType	VMRequest *		5023453	0					
ANR	5023569	Identifier	req		5023453	1					
ANR	5023570	CFGEntryNode	ENTRY		5023453		True				
ANR	5023571	CFGExitNode	EXIT		5023453		True				
ANR	5023572	Symbol	NULL		5023453						
ANR	5023573	Symbol	VMGAHP_ERR_VM_NOT_FOUND		5023453						
ANR	5023574	Symbol	* req		5023453						
ANR	5023575	Symbol	false		5023453						
ANR	5023576	Symbol	D_FULLDEBUG		5023453						
ANR	5023577	Symbol	req -> m_args		5023453						
ANR	5023578	Symbol	* req -> m_args		5023453						
ANR	5023579	Symbol	err_message		5023453						
ANR	5023580	Symbol	vm_id		5023453						
ANR	5023581	Symbol	* * req		5023453						
ANR	5023582	Symbol	req -> m_args . argv		5023453						
ANR	5023583	Symbol	req -> m_result		5023453						
ANR	5023584	Symbol	strtol		5023453						
ANR	5023585	Symbol	vm -> PidOfVM		5023453						
ANR	5023586	Symbol	vm		5023453						
ANR	5023587	Symbol	true		5023453						
ANR	5023588	Symbol	findVM		5023453						
ANR	5023589	Symbol	req -> m_has_result		5023453						
ANR	5023590	Symbol	req -> m_is_success		5023453						
ANR	5023591	Symbol	* vm		5023453						
ANR	5023592	Symbol	req		5023453						
ANR	5023593	Symbol	* req -> m_args . argv		5023453						
ANR	5023594	Function	VMGahp :: executeQuit	990:0:23726:23816							
ANR	5023595	FunctionDef	VMGahp :: executeQuit ()		5023594	0					
ANR	5023596	CompoundStatement		992:0:23757:23816	5023594	0					
ANR	5023597	ExpressionStatement	m_need_output_for_quit = true	993:1:23760:23789	5023594	0	True				
ANR	5023598	AssignmentExpression	m_need_output_for_quit = true		5023594	0		=			
ANR	5023599	Identifier	m_need_output_for_quit		5023594	0					
ANR	5023600	Identifier	true		5023594	1					
ANR	5023601	ExpressionStatement	cleanUp ( )	994:1:23792:23801	5023594	1	True				
ANR	5023602	CallExpression	cleanUp ( )		5023594	0					
ANR	5023603	Callee	cleanUp		5023594	0					
ANR	5023604	Identifier	cleanUp		5023594	0					
ANR	5023605	ArgumentList			5023594	1					
ANR	5023606	ExpressionStatement	DC_Exit ( 0 )	995:1:23804:23814	5023594	2	True				
ANR	5023607	CallExpression	DC_Exit ( 0 )		5023594	0					
ANR	5023608	Callee	DC_Exit		5023594	0					
ANR	5023609	Identifier	DC_Exit		5023594	0					
ANR	5023610	ArgumentList	0		5023594	1					
ANR	5023611	Argument	0		5023594	0					
ANR	5023612	PrimaryExpression	0		5023594	0					
ANR	5023613	ReturnType	void		5023594	1					
ANR	5023614	Identifier	VMGahp :: executeQuit		5023594	2					
ANR	5023615	ParameterList			5023594	3					
ANR	5023616	CFGEntryNode	ENTRY		5023594		True				
ANR	5023617	CFGExitNode	EXIT		5023594		True				
ANR	5023618	Symbol	m_need_output_for_quit		5023594						
ANR	5023619	Symbol	true		5023594						
ANR	5023620	Function	VMGahp :: executeVersion	998:0:23819:23908							
ANR	5023621	FunctionDef	VMGahp :: executeVersion ()		5023620	0					
ANR	5023622	CompoundStatement		1000:0:23853:23908	5023620	0					
ANR	5023623	ExpressionStatement	"write_to_daemoncore_pipe ( ""S %s\\n"" , vmgahp_version )"	1001:1:23856:23906	5023620	0	True				
ANR	5023624	CallExpression	"write_to_daemoncore_pipe ( ""S %s\\n"" , vmgahp_version )"		5023620	0					
ANR	5023625	Callee	write_to_daemoncore_pipe		5023620	0					
ANR	5023626	Identifier	write_to_daemoncore_pipe		5023620	0					
ANR	5023627	ArgumentList	"""S %s\\n"""		5023620	1					
ANR	5023628	Argument	"""S %s\\n"""		5023620	0					
ANR	5023629	PrimaryExpression	"""S %s\\n"""		5023620	0					
ANR	5023630	Argument	vmgahp_version		5023620	1					
ANR	5023631	Identifier	vmgahp_version		5023620	0					
ANR	5023632	ReturnType	void		5023620	1					
ANR	5023633	Identifier	VMGahp :: executeVersion		5023620	2					
ANR	5023634	ParameterList			5023620	3					
ANR	5023635	CFGEntryNode	ENTRY		5023620		True				
ANR	5023636	CFGExitNode	EXIT		5023620		True				
ANR	5023637	Symbol	vmgahp_version		5023620						
ANR	5023638	Function	VMGahp :: executeCommands	1004:0:23911:24139							
ANR	5023639	FunctionDef	VMGahp :: executeCommands ()		5023638	0					
ANR	5023640	CompoundStatement		1006:0:23946:24139	5023638	0					
ANR	5023641	IdentifierDeclStatement	MyString result ;	1007:1:23949:23964	5023638	0	True				
ANR	5023642	IdentifierDecl	result		5023638	0					
ANR	5023643	IdentifierDeclType	MyString		5023638	0					
ANR	5023644	Identifier	result		5023638	1					
ANR	5023645	ExpressionStatement	"result += ""S"""	1008:1:23967:23980	5023638	1	True				
ANR	5023646	AssignmentExpression	"result += ""S"""		5023638	0		+=			
ANR	5023647	Identifier	result		5023638	0					
ANR	5023648	PrimaryExpression	"""S"""		5023638	1					
ANR	5023649	IdentifierDeclStatement	int i = 0 ;	1010:1:23984:23993	5023638	2	True				
ANR	5023650	IdentifierDecl	i = 0		5023638	0					
ANR	5023651	IdentifierDeclType	int		5023638	0					
ANR	5023652	Identifier	i		5023638	1					
ANR	5023653	AssignmentExpression	i = 0		5023638	2		=			
ANR	5023654	Identifier	i		5023638	0					
ANR	5023655	PrimaryExpression	0		5023638	1					
ANR	5023656	WhileStatement	while ( commands_list [ i ] != NULL )		5023638	3					
ANR	5023657	Condition	commands_list [ i ] != NULL	1011:7:24002:24025	5023638	0	True				
ANR	5023658	EqualityExpression	commands_list [ i ] != NULL		5023638	0		!=			
ANR	5023659	ArrayIndexing	commands_list [ i ]		5023638	0					
ANR	5023660	Identifier	commands_list		5023638	0					
ANR	5023661	Identifier	i		5023638	1					
ANR	5023662	Identifier	NULL		5023638	1					
ANR	5023663	CompoundStatement		6:33:81:81	5023638	1					
ANR	5023664	ExpressionStatement	"result += "" """	1012:2:24032:24045	5023638	0	True				
ANR	5023665	AssignmentExpression	"result += "" """		5023638	0		+=			
ANR	5023666	Identifier	result		5023638	0					
ANR	5023667	PrimaryExpression	""" """		5023638	1					
ANR	5023668	ExpressionStatement	result += commands_list [ i ]	1013:2:24049:24075	5023638	1	True				
ANR	5023669	AssignmentExpression	result += commands_list [ i ]		5023638	0		+=			
ANR	5023670	Identifier	result		5023638	0					
ANR	5023671	ArrayIndexing	commands_list [ i ]		5023638	1					
ANR	5023672	Identifier	commands_list		5023638	0					
ANR	5023673	Identifier	i		5023638	1					
ANR	5023674	ExpressionStatement	i ++	1014:2:24079:24082	5023638	2	True				
ANR	5023675	PostIncDecOperationExpression	i ++		5023638	0					
ANR	5023676	Identifier	i		5023638	0					
ANR	5023677	IncDec	++		5023638	1					
ANR	5023678	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"	1017:1:24089:24137	5023638	4	True				
ANR	5023679	CallExpression	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"		5023638	0					
ANR	5023680	Callee	write_to_daemoncore_pipe		5023638	0					
ANR	5023681	Identifier	write_to_daemoncore_pipe		5023638	0					
ANR	5023682	ArgumentList	"""%s\\n"""		5023638	1					
ANR	5023683	Argument	"""%s\\n"""		5023638	0					
ANR	5023684	PrimaryExpression	"""%s\\n"""		5023638	0					
ANR	5023685	Argument	result . Value ( )		5023638	1					
ANR	5023686	CallExpression	result . Value ( )		5023638	0					
ANR	5023687	Callee	result . Value		5023638	0					
ANR	5023688	MemberAccess	result . Value		5023638	0					
ANR	5023689	Identifier	result		5023638	0					
ANR	5023690	Identifier	Value		5023638	1					
ANR	5023691	ArgumentList			5023638	1					
ANR	5023692	ReturnType	void		5023638	1					
ANR	5023693	Identifier	VMGahp :: executeCommands		5023638	2					
ANR	5023694	ParameterList			5023638	3					
ANR	5023695	CFGEntryNode	ENTRY		5023638		True				
ANR	5023696	CFGExitNode	EXIT		5023638		True				
ANR	5023697	Symbol	result		5023638						
ANR	5023698	Symbol	NULL		5023638						
ANR	5023699	Symbol	* i		5023638						
ANR	5023700	Symbol	result . Value		5023638						
ANR	5023701	Symbol	commands_list		5023638						
ANR	5023702	Symbol	* commands_list		5023638						
ANR	5023703	Symbol	i		5023638						
ANR	5023704	Function	VMGahp :: executeSupportVMS	1020:0:24142:24444							
ANR	5023705	FunctionDef	VMGahp :: executeSupportVMS ()		5023704	0					
ANR	5023706	CompoundStatement		1022:0:24179:24444	5023704	0					
ANR	5023707	IdentifierDeclStatement	MyString result ;	1023:1:24182:24197	5023704	0	True				
ANR	5023708	IdentifierDecl	result		5023704	0					
ANR	5023709	IdentifierDeclType	MyString		5023704	0					
ANR	5023710	Identifier	result		5023704	1					
ANR	5023711	ExpressionStatement	"result += ""S"""	1024:1:24200:24213	5023704	1	True				
ANR	5023712	AssignmentExpression	"result += ""S"""		5023704	0		+=			
ANR	5023713	Identifier	result		5023704	0					
ANR	5023714	PrimaryExpression	"""S"""		5023704	1					
ANR	5023715	IdentifierDeclStatement	int i = 0 ;	1026:1:24217:24226	5023704	2	True				
ANR	5023716	IdentifierDecl	i = 0		5023704	0					
ANR	5023717	IdentifierDeclType	int		5023704	0					
ANR	5023718	Identifier	i		5023704	1					
ANR	5023719	AssignmentExpression	i = 0		5023704	2		=			
ANR	5023720	Identifier	i		5023704	0					
ANR	5023721	PrimaryExpression	0		5023704	1					
ANR	5023722	WhileStatement	while ( support_vms_list [ i ] != NULL )		5023704	3					
ANR	5023723	Condition	support_vms_list [ i ] != NULL	1027:7:24235:24261	5023704	0	True				
ANR	5023724	EqualityExpression	support_vms_list [ i ] != NULL		5023704	0		!=			
ANR	5023725	ArrayIndexing	support_vms_list [ i ]		5023704	0					
ANR	5023726	Identifier	support_vms_list		5023704	0					
ANR	5023727	Identifier	i		5023704	1					
ANR	5023728	Identifier	NULL		5023704	1					
ANR	5023729	CompoundStatement		6:36:84:84	5023704	1					
ANR	5023730	ExpressionStatement	"result += "" """	1028:2:24268:24281	5023704	0	True				
ANR	5023731	AssignmentExpression	"result += "" """		5023704	0		+=			
ANR	5023732	Identifier	result		5023704	0					
ANR	5023733	PrimaryExpression	""" """		5023704	1					
ANR	5023734	ExpressionStatement	result += support_vms_list [ i ]	1029:2:24285:24314	5023704	1	True				
ANR	5023735	AssignmentExpression	result += support_vms_list [ i ]		5023704	0		+=			
ANR	5023736	Identifier	result		5023704	0					
ANR	5023737	ArrayIndexing	support_vms_list [ i ]		5023704	1					
ANR	5023738	Identifier	support_vms_list		5023704	0					
ANR	5023739	Identifier	i		5023704	1					
ANR	5023740	ExpressionStatement	i ++	1030:2:24318:24321	5023704	2	True				
ANR	5023741	PostIncDecOperationExpression	i ++		5023704	0					
ANR	5023742	Identifier	i		5023704	0					
ANR	5023743	IncDec	++		5023704	1					
ANR	5023744	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""Execute commands: %s\\n"" , result . Value ( ) )"	1033:1:24328:24391	5023704	4	True				
ANR	5023745	CallExpression	"vmprintf ( D_FULLDEBUG , ""Execute commands: %s\\n"" , result . Value ( ) )"		5023704	0					
ANR	5023746	Callee	vmprintf		5023704	0					
ANR	5023747	Identifier	vmprintf		5023704	0					
ANR	5023748	ArgumentList	D_FULLDEBUG		5023704	1					
ANR	5023749	Argument	D_FULLDEBUG		5023704	0					
ANR	5023750	Identifier	D_FULLDEBUG		5023704	0					
ANR	5023751	Argument	"""Execute commands: %s\\n"""		5023704	1					
ANR	5023752	PrimaryExpression	"""Execute commands: %s\\n"""		5023704	0					
ANR	5023753	Argument	result . Value ( )		5023704	2					
ANR	5023754	CallExpression	result . Value ( )		5023704	0					
ANR	5023755	Callee	result . Value		5023704	0					
ANR	5023756	MemberAccess	result . Value		5023704	0					
ANR	5023757	Identifier	result		5023704	0					
ANR	5023758	Identifier	Value		5023704	1					
ANR	5023759	ArgumentList			5023704	1					
ANR	5023760	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"	1034:1:24394:24442	5023704	5	True				
ANR	5023761	CallExpression	"write_to_daemoncore_pipe ( ""%s\\n"" , result . Value ( ) )"		5023704	0					
ANR	5023762	Callee	write_to_daemoncore_pipe		5023704	0					
ANR	5023763	Identifier	write_to_daemoncore_pipe		5023704	0					
ANR	5023764	ArgumentList	"""%s\\n"""		5023704	1					
ANR	5023765	Argument	"""%s\\n"""		5023704	0					
ANR	5023766	PrimaryExpression	"""%s\\n"""		5023704	0					
ANR	5023767	Argument	result . Value ( )		5023704	1					
ANR	5023768	CallExpression	result . Value ( )		5023704	0					
ANR	5023769	Callee	result . Value		5023704	0					
ANR	5023770	MemberAccess	result . Value		5023704	0					
ANR	5023771	Identifier	result		5023704	0					
ANR	5023772	Identifier	Value		5023704	1					
ANR	5023773	ArgumentList			5023704	1					
ANR	5023774	ReturnType	void		5023704	1					
ANR	5023775	Identifier	VMGahp :: executeSupportVMS		5023704	2					
ANR	5023776	ParameterList			5023704	3					
ANR	5023777	CFGEntryNode	ENTRY		5023704		True				
ANR	5023778	CFGExitNode	EXIT		5023704		True				
ANR	5023779	Symbol	result		5023704						
ANR	5023780	Symbol	support_vms_list		5023704						
ANR	5023781	Symbol	NULL		5023704						
ANR	5023782	Symbol	* i		5023704						
ANR	5023783	Symbol	result . Value		5023704						
ANR	5023784	Symbol	i		5023704						
ANR	5023785	Symbol	D_FULLDEBUG		5023704						
ANR	5023786	Symbol	* support_vms_list		5023704						
ANR	5023787	Function	VMGahp :: executeResults	1037:0:24447:24630							
ANR	5023788	FunctionDef	VMGahp :: executeResults ()		5023787	0					
ANR	5023789	CompoundStatement		1039:0:24481:24630	5023787	0					
ANR	5023790	ExpressionStatement	"write_to_daemoncore_pipe ( ""S %d\\n"" , numOfReqWithResult ( ) )"	1040:1:24484:24540	5023787	0	True				
ANR	5023791	CallExpression	"write_to_daemoncore_pipe ( ""S %d\\n"" , numOfReqWithResult ( ) )"		5023787	0					
ANR	5023792	Callee	write_to_daemoncore_pipe		5023787	0					
ANR	5023793	Identifier	write_to_daemoncore_pipe		5023787	0					
ANR	5023794	ArgumentList	"""S %d\\n"""		5023787	1					
ANR	5023795	Argument	"""S %d\\n"""		5023787	0					
ANR	5023796	PrimaryExpression	"""S %d\\n"""		5023787	0					
ANR	5023797	Argument	numOfReqWithResult ( )		5023787	1					
ANR	5023798	CallExpression	numOfReqWithResult ( )		5023787	0					
ANR	5023799	Callee	numOfReqWithResult		5023787	0					
ANR	5023800	Identifier	numOfReqWithResult		5023787	0					
ANR	5023801	ArgumentList			5023787	1					
ANR	5023802	ExpressionStatement	printAllReqsWithResult ( )	1043:1:24571:24595	5023787	1	True				
ANR	5023803	CallExpression	printAllReqsWithResult ( )		5023787	0					
ANR	5023804	Callee	printAllReqsWithResult		5023787	0					
ANR	5023805	Identifier	printAllReqsWithResult		5023787	0					
ANR	5023806	ArgumentList			5023787	1					
ANR	5023807	ExpressionStatement	m_new_results_signaled = false	1044:1:24598:24628	5023787	2	True				
ANR	5023808	AssignmentExpression	m_new_results_signaled = false		5023787	0		=			
ANR	5023809	Identifier	m_new_results_signaled		5023787	0					
ANR	5023810	Identifier	false		5023787	1					
ANR	5023811	ReturnType	void		5023787	1					
ANR	5023812	Identifier	VMGahp :: executeResults		5023787	2					
ANR	5023813	ParameterList			5023787	3					
ANR	5023814	CFGEntryNode	ENTRY		5023787		True				
ANR	5023815	CFGExitNode	EXIT		5023787		True				
ANR	5023816	Symbol	m_new_results_signaled		5023787						
ANR	5023817	Symbol	numOfReqWithResult		5023787						
ANR	5023818	Symbol	false		5023787						
ANR	5023819	Function	VMGahp :: make_result_line	1047:0:24633:25276							
ANR	5023820	FunctionDef	VMGahp :: make_result_line (VMRequest * req)		5023819	0					
ANR	5023821	CompoundStatement		1049:0:24686:25276	5023819	0					
ANR	5023822	Statement	static	1050:1:24689:24694	5023819	0	True				
ANR	5023823	IdentifierDeclStatement	MyString res_str ;	1050:8:24696:24712	5023819	1	True				
ANR	5023824	IdentifierDecl	res_str		5023819	0					
ANR	5023825	IdentifierDeclType	MyString		5023819	0					
ANR	5023826	Identifier	res_str		5023819	1					
ANR	5023827	ExpressionStatement	"res_str = """""	1051:1:24715:24727	5023819	2	True				
ANR	5023828	AssignmentExpression	"res_str = """""		5023819	0		=			
ANR	5023829	Identifier	res_str		5023819	0					
ANR	5023830	PrimaryExpression	""""""		5023819	1					
ANR	5023831	IfStatement	if ( req -> m_is_success )		5023819	3					
ANR	5023832	Condition	req -> m_is_success	1053:4:24734:24750	5023819	0	True				
ANR	5023833	PtrMemberAccess	req -> m_is_success		5023819	0					
ANR	5023834	Identifier	req		5023819	0					
ANR	5023835	Identifier	m_is_success		5023819	1					
ANR	5023836	CompoundStatement		5:23:66:66	5023819	1					
ANR	5023837	ExpressionStatement	res_str += req -> m_reqid	1056:2:24810:24833	5023819	0	True				
ANR	5023838	AssignmentExpression	res_str += req -> m_reqid		5023819	0		+=			
ANR	5023839	Identifier	res_str		5023819	0					
ANR	5023840	PtrMemberAccess	req -> m_reqid		5023819	1					
ANR	5023841	Identifier	req		5023819	0					
ANR	5023842	Identifier	m_reqid		5023819	1					
ANR	5023843	ExpressionStatement	"res_str += "" """	1057:2:24837:24851	5023819	1	True				
ANR	5023844	AssignmentExpression	"res_str += "" """		5023819	0		+=			
ANR	5023845	Identifier	res_str		5023819	0					
ANR	5023846	PrimaryExpression	""" """		5023819	1					
ANR	5023847	ExpressionStatement	res_str += 0	1058:2:24855:24867	5023819	2	True				
ANR	5023848	AssignmentExpression	res_str += 0		5023819	0		+=			
ANR	5023849	Identifier	res_str		5023819	0					
ANR	5023850	PrimaryExpression	0		5023819	1					
ANR	5023851	ExpressionStatement	"res_str += "" """	1059:2:24871:24885	5023819	3	True				
ANR	5023852	AssignmentExpression	"res_str += "" """		5023819	0		+=			
ANR	5023853	Identifier	res_str		5023819	0					
ANR	5023854	PrimaryExpression	""" """		5023819	1					
ANR	5023855	IfStatement	if ( req -> m_result . Length ( ) == 0 )		5023819	4					
ANR	5023856	Condition	req -> m_result . Length ( ) == 0	1060:6:24893:24919	5023819	0	True				
ANR	5023857	EqualityExpression	req -> m_result . Length ( ) == 0		5023819	0		==			
ANR	5023858	CallExpression	req -> m_result . Length ( )		5023819	0					
ANR	5023859	Callee	req -> m_result . Length		5023819	0					
ANR	5023860	MemberAccess	req -> m_result . Length		5023819	0					
ANR	5023861	PtrMemberAccess	req -> m_result		5023819	0					
ANR	5023862	Identifier	req		5023819	0					
ANR	5023863	Identifier	m_result		5023819	1					
ANR	5023864	Identifier	Length		5023819	1					
ANR	5023865	ArgumentList			5023819	1					
ANR	5023866	PrimaryExpression	0		5023819	1					
ANR	5023867	CompoundStatement		12:35:235:235	5023819	1					
ANR	5023868	ExpressionStatement	"res_str += ""NULL"""	1061:3:24927:24944	5023819	0	True				
ANR	5023869	AssignmentExpression	"res_str += ""NULL"""		5023819	0		+=			
ANR	5023870	Identifier	res_str		5023819	0					
ANR	5023871	PrimaryExpression	"""NULL"""		5023819	1					
ANR	5023872	ElseStatement	else		5023819	0					
ANR	5023873	CompoundStatement		14:9:268:268	5023819	0					
ANR	5023874	ExpressionStatement	res_str += req -> m_result . Value ( )	1063:3:24960:24992	5023819	0	True				
ANR	5023875	AssignmentExpression	res_str += req -> m_result . Value ( )		5023819	0		+=			
ANR	5023876	Identifier	res_str		5023819	0					
ANR	5023877	CallExpression	req -> m_result . Value ( )		5023819	1					
ANR	5023878	Callee	req -> m_result . Value		5023819	0					
ANR	5023879	MemberAccess	req -> m_result . Value		5023819	0					
ANR	5023880	PtrMemberAccess	req -> m_result		5023819	0					
ANR	5023881	Identifier	req		5023819	0					
ANR	5023882	Identifier	m_result		5023819	1					
ANR	5023883	Identifier	Value		5023819	1					
ANR	5023884	ArgumentList			5023819	1					
ANR	5023885	ElseStatement	else		5023819	0					
ANR	5023886	CompoundStatement		17:7:318:318	5023819	0					
ANR	5023887	ExpressionStatement	res_str += req -> m_reqid	1068:2:25060:25083	5023819	0	True				
ANR	5023888	AssignmentExpression	res_str += req -> m_reqid		5023819	0		+=			
ANR	5023889	Identifier	res_str		5023819	0					
ANR	5023890	PtrMemberAccess	req -> m_reqid		5023819	1					
ANR	5023891	Identifier	req		5023819	0					
ANR	5023892	Identifier	m_reqid		5023819	1					
ANR	5023893	ExpressionStatement	"res_str += "" """	1069:2:25087:25101	5023819	1	True				
ANR	5023894	AssignmentExpression	"res_str += "" """		5023819	0		+=			
ANR	5023895	Identifier	res_str		5023819	0					
ANR	5023896	PrimaryExpression	""" """		5023819	1					
ANR	5023897	ExpressionStatement	res_str += 1	1070:2:25105:25117	5023819	2	True				
ANR	5023898	AssignmentExpression	res_str += 1		5023819	0		+=			
ANR	5023899	Identifier	res_str		5023819	0					
ANR	5023900	PrimaryExpression	1		5023819	1					
ANR	5023901	ExpressionStatement	"res_str += "" """	1071:2:25121:25135	5023819	3	True				
ANR	5023902	AssignmentExpression	"res_str += "" """		5023819	0		+=			
ANR	5023903	Identifier	res_str		5023819	0					
ANR	5023904	PrimaryExpression	""" """		5023819	1					
ANR	5023905	IfStatement	if ( req -> m_result . Length ( ) == 0 )		5023819	4					
ANR	5023906	Condition	req -> m_result . Length ( ) == 0	1072:6:25143:25169	5023819	0	True				
ANR	5023907	EqualityExpression	req -> m_result . Length ( ) == 0		5023819	0		==			
ANR	5023908	CallExpression	req -> m_result . Length ( )		5023819	0					
ANR	5023909	Callee	req -> m_result . Length		5023819	0					
ANR	5023910	MemberAccess	req -> m_result . Length		5023819	0					
ANR	5023911	PtrMemberAccess	req -> m_result		5023819	0					
ANR	5023912	Identifier	req		5023819	0					
ANR	5023913	Identifier	m_result		5023819	1					
ANR	5023914	Identifier	Length		5023819	1					
ANR	5023915	ArgumentList			5023819	1					
ANR	5023916	PrimaryExpression	0		5023819	1					
ANR	5023917	CompoundStatement		24:35:485:485	5023819	1					
ANR	5023918	ExpressionStatement	"res_str += ""NULL"""	1073:3:25177:25194	5023819	0	True				
ANR	5023919	AssignmentExpression	"res_str += ""NULL"""		5023819	0		+=			
ANR	5023920	Identifier	res_str		5023819	0					
ANR	5023921	PrimaryExpression	"""NULL"""		5023819	1					
ANR	5023922	ElseStatement	else		5023819	0					
ANR	5023923	CompoundStatement		26:9:518:518	5023819	0					
ANR	5023924	ExpressionStatement	res_str += req -> m_result . Value ( )	1075:3:25210:25242	5023819	0	True				
ANR	5023925	AssignmentExpression	res_str += req -> m_result . Value ( )		5023819	0		+=			
ANR	5023926	Identifier	res_str		5023819	0					
ANR	5023927	CallExpression	req -> m_result . Value ( )		5023819	1					
ANR	5023928	Callee	req -> m_result . Value		5023819	0					
ANR	5023929	MemberAccess	req -> m_result . Value		5023819	0					
ANR	5023930	PtrMemberAccess	req -> m_result		5023819	0					
ANR	5023931	Identifier	req		5023819	0					
ANR	5023932	Identifier	m_result		5023819	1					
ANR	5023933	Identifier	Value		5023819	1					
ANR	5023934	ArgumentList			5023819	1					
ANR	5023935	ReturnStatement	return res_str . Value ( ) ;	1078:1:25252:25274	5023819	4	True				
ANR	5023936	CallExpression	res_str . Value ( )		5023819	0					
ANR	5023937	Callee	res_str . Value		5023819	0					
ANR	5023938	MemberAccess	res_str . Value		5023819	0					
ANR	5023939	Identifier	res_str		5023819	0					
ANR	5023940	Identifier	Value		5023819	1					
ANR	5023941	ArgumentList			5023819	1					
ANR	5023942	ReturnType	const char *		5023819	1					
ANR	5023943	Identifier	VMGahp :: make_result_line		5023819	2					
ANR	5023944	ParameterList	VMRequest * req		5023819	3					
ANR	5023945	Parameter	VMRequest * req	1048:25:24670:24683	5023819	0	True				
ANR	5023946	ParameterType	VMRequest *		5023819	0					
ANR	5023947	Identifier	req		5023819	1					
ANR	5023948	CFGEntryNode	ENTRY		5023819		True				
ANR	5023949	CFGExitNode	EXIT		5023819		True				
ANR	5023950	Symbol	res_str		5023819						
ANR	5023951	Symbol	req -> m_result		5023819						
ANR	5023952	Symbol	res_str . Value		5023819						
ANR	5023953	Symbol	* req		5023819						
ANR	5023954	Symbol	req -> m_result . Length		5023819						
ANR	5023955	Symbol	req -> m_result . Value		5023819						
ANR	5023956	Symbol	req -> m_reqid		5023819						
ANR	5023957	Symbol	req -> m_is_success		5023819						
ANR	5023958	Symbol	req		5023819						
ANR	5023959	Function	VMGahp :: quitFast	1081:0:25279:25343							
ANR	5023960	FunctionDef	VMGahp :: quitFast ()		5023959	0					
ANR	5023961	CompoundStatement		1083:0:25302:25343	5023959	0					
ANR	5023962	ExpressionStatement	cleanUp ( )	1084:1:25305:25314	5023959	0	True				
ANR	5023963	CallExpression	cleanUp ( )		5023959	0					
ANR	5023964	Callee	cleanUp		5023959	0					
ANR	5023965	Identifier	cleanUp		5023959	0					
ANR	5023966	ArgumentList			5023959	1					
ANR	5023967	ExpressionStatement	DC_Exit ( 0 )	1085:1:25317:25327	5023959	1	True				
ANR	5023968	CallExpression	DC_Exit ( 0 )		5023959	0					
ANR	5023969	Callee	DC_Exit		5023959	0					
ANR	5023970	Identifier	DC_Exit		5023959	0					
ANR	5023971	ArgumentList	0		5023959	1					
ANR	5023972	Argument	0		5023959	0					
ANR	5023973	PrimaryExpression	0		5023959	0					
ANR	5023974	ReturnStatement	return TRUE ;	1086:1:25330:25341	5023959	2	True				
ANR	5023975	Identifier	TRUE		5023959	0					
ANR	5023976	ReturnType	int		5023959	1					
ANR	5023977	Identifier	VMGahp :: quitFast		5023959	2					
ANR	5023978	ParameterList			5023959	3					
ANR	5023979	CFGEntryNode	ENTRY		5023959		True				
ANR	5023980	CFGExitNode	EXIT		5023959		True				
ANR	5023981	Symbol	TRUE		5023959						
ANR	5023982	Function	VMGahp :: killAllProcess	1089:0:25346:26685							
ANR	5023983	FunctionDef	VMGahp :: killAllProcess ()		5023982	0					
ANR	5023984	CompoundStatement		1091:0:25376:26685	5023982	0					
ANR	5023985	IfStatement	if ( ! m_jobAd )		5023982	0					
ANR	5023986	Condition	! m_jobAd	1092:5:25383:25390	5023982	0	True				
ANR	5023987	UnaryOperationExpression	! m_jobAd		5023982	0					
ANR	5023988	UnaryOperator	!		5023982	0					
ANR	5023989	Identifier	m_jobAd		5023982	1					
ANR	5023990	CompoundStatement		2:16:17:17	5023982	1					
ANR	5023991	ReturnStatement	return ;	1094:2:25446:25452	5023982	0	True				
ANR	5023992	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 )"		5023982	1					
ANR	5023993	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"	1098:5:25519:25596	5023982	0	True				
ANR	5023994	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5023982	0		==			
ANR	5023995	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5023982	0					
ANR	5023996	Callee	strcasecmp		5023982	0					
ANR	5023997	Identifier	strcasecmp		5023982	0					
ANR	5023998	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5023982	1					
ANR	5023999	Argument	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024000	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024001	Callee	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024002	MemberAccess	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024003	PtrMemberAccess	m_gahp_config -> m_vm_type		5023982	0					
ANR	5024004	Identifier	m_gahp_config		5023982	0					
ANR	5024005	Identifier	m_vm_type		5023982	1					
ANR	5024006	Identifier	Value		5023982	1					
ANR	5024007	ArgumentList			5023982	1					
ANR	5024008	Argument	CONDOR_VM_UNIVERSE_XEN		5023982	1					
ANR	5024009	Identifier	CONDOR_VM_UNIVERSE_XEN		5023982	0					
ANR	5024010	PrimaryExpression	0		5023982	1					
ANR	5024011	CompoundStatement		10:2:227:260	5023982	1					
ANR	5024012	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1100:2:25604:25637	5023982	0	True				
ANR	5024013	IdentifierDecl	priv = set_root_priv ( )		5023982	0					
ANR	5024014	IdentifierDeclType	priv_state		5023982	0					
ANR	5024015	Identifier	priv		5023982	1					
ANR	5024016	AssignmentExpression	priv = set_root_priv ( )		5023982	2		=			
ANR	5024017	Identifier	priv		5023982	0					
ANR	5024018	CallExpression	set_root_priv ( )		5023982	1					
ANR	5024019	Callee	set_root_priv		5023982	0					
ANR	5024020	Identifier	set_root_priv		5023982	0					
ANR	5024021	ArgumentList			5023982	1					
ANR	5024022	IfStatement	if ( m_jobAd && XenType :: checkXenParams ( m_gahp_config ) )		5023982	1					
ANR	5024023	Condition	m_jobAd && XenType :: checkXenParams ( m_gahp_config )	1101:6:25645:25693	5023982	0	True				
ANR	5024024	AndExpression	m_jobAd && XenType :: checkXenParams ( m_gahp_config )		5023982	0		&&			
ANR	5024025	Identifier	m_jobAd		5023982	0					
ANR	5024026	CallExpression	XenType :: checkXenParams ( m_gahp_config )		5023982	1					
ANR	5024027	Callee	XenType :: checkXenParams		5023982	0					
ANR	5024028	Identifier	XenType :: checkXenParams		5023982	0					
ANR	5024029	ArgumentList	m_gahp_config		5023982	1					
ANR	5024030	Argument	m_gahp_config		5023982	0					
ANR	5024031	Identifier	m_gahp_config		5023982	0					
ANR	5024032	CompoundStatement		12:3:325:340	5023982	1					
ANR	5024033	IdentifierDeclStatement	MyString vmname ;	1102:3:25702:25717	5023982	0	True				
ANR	5024034	IdentifierDecl	vmname		5023982	0					
ANR	5024035	IdentifierDeclType	MyString		5023982	0					
ANR	5024036	Identifier	vmname		5023982	1					
ANR	5024037	IfStatement	"if ( VMType :: createVMName ( m_jobAd , vmname ) )"		5023982	1					
ANR	5024038	Condition	"VMType :: createVMName ( m_jobAd , vmname )"	1103:7:25726:25762	5023982	0	True				
ANR	5024039	CallExpression	"VMType :: createVMName ( m_jobAd , vmname )"		5023982	0					
ANR	5024040	Callee	VMType :: createVMName		5023982	0					
ANR	5024041	Identifier	VMType :: createVMName		5023982	0					
ANR	5024042	ArgumentList	m_jobAd		5023982	1					
ANR	5024043	Argument	m_jobAd		5023982	0					
ANR	5024044	Identifier	m_jobAd		5023982	0					
ANR	5024045	Argument	vmname		5023982	1					
ANR	5024046	Identifier	vmname		5023982	0					
ANR	5024047	CompoundStatement		13:47:389:389	5023982	1					
ANR	5024048	ExpressionStatement	XenType :: killVMFast ( vmname . Value ( ) )	1104:4:25772:25807	5023982	0	True				
ANR	5024049	CallExpression	XenType :: killVMFast ( vmname . Value ( ) )		5023982	0					
ANR	5024050	Callee	XenType :: killVMFast		5023982	0					
ANR	5024051	Identifier	XenType :: killVMFast		5023982	0					
ANR	5024052	ArgumentList	vmname . Value ( )		5023982	1					
ANR	5024053	Argument	vmname . Value ( )		5023982	0					
ANR	5024054	CallExpression	vmname . Value ( )		5023982	0					
ANR	5024055	Callee	vmname . Value		5023982	0					
ANR	5024056	MemberAccess	vmname . Value		5023982	0					
ANR	5024057	Identifier	vmname		5023982	0					
ANR	5024058	Identifier	Value		5023982	1					
ANR	5024059	ArgumentList			5023982	1					
ANR	5024060	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1105:4:25813:25861	5023982	1	True				
ANR	5024061	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5023982	0					
ANR	5024062	Callee	vmprintf		5023982	0					
ANR	5024063	Identifier	vmprintf		5023982	0					
ANR	5024064	ArgumentList	D_FULLDEBUG		5023982	1					
ANR	5024065	Argument	D_FULLDEBUG		5023982	0					
ANR	5024066	Identifier	D_FULLDEBUG		5023982	0					
ANR	5024067	Argument	"""killVMFast is called\\n"""		5023982	1					
ANR	5024068	PrimaryExpression	"""killVMFast is called\\n"""		5023982	0					
ANR	5024069	ExpressionStatement	set_priv ( priv )	1108:2:25874:25888	5023982	2	True				
ANR	5024070	CallExpression	set_priv ( priv )		5023982	0					
ANR	5024071	Callee	set_priv		5023982	0					
ANR	5024072	Identifier	set_priv		5023982	0					
ANR	5024073	ArgumentList	priv		5023982	1					
ANR	5024074	Argument	priv		5023982	0					
ANR	5024075	Identifier	priv		5023982	0					
ANR	5024076	ElseStatement	else		5023982	0					
ANR	5024077	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5023982	0					
ANR	5024078	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"	1109:11:25901:25982	5023982	0	True				
ANR	5024079	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5023982	0		==			
ANR	5024080	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5023982	0					
ANR	5024081	Callee	strcasecmp		5023982	0					
ANR	5024082	Identifier	strcasecmp		5023982	0					
ANR	5024083	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5023982	1					
ANR	5024084	Argument	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024085	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024086	Callee	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024087	MemberAccess	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024088	PtrMemberAccess	m_gahp_config -> m_vm_type		5023982	0					
ANR	5024089	Identifier	m_gahp_config		5023982	0					
ANR	5024090	Identifier	m_vm_type		5023982	1					
ANR	5024091	Identifier	Value		5023982	1					
ANR	5024092	ArgumentList			5023982	1					
ANR	5024093	Argument	CONDOR_VM_UNIVERSE_KVM		5023982	1					
ANR	5024094	Identifier	CONDOR_VM_UNIVERSE_KVM		5023982	0					
ANR	5024095	PrimaryExpression	0		5023982	1					
ANR	5024096	CompoundStatement		21:2:613:646	5023982	1					
ANR	5024097	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	1111:2:25990:26023	5023982	0	True				
ANR	5024098	IdentifierDecl	priv = set_root_priv ( )		5023982	0					
ANR	5024099	IdentifierDeclType	priv_state		5023982	0					
ANR	5024100	Identifier	priv		5023982	1					
ANR	5024101	AssignmentExpression	priv = set_root_priv ( )		5023982	2		=			
ANR	5024102	Identifier	priv		5023982	0					
ANR	5024103	CallExpression	set_root_priv ( )		5023982	1					
ANR	5024104	Callee	set_root_priv		5023982	0					
ANR	5024105	Identifier	set_root_priv		5023982	0					
ANR	5024106	ArgumentList			5023982	1					
ANR	5024107	IfStatement	if ( m_jobAd && KVMType :: checkXenParams ( m_gahp_config ) )		5023982	1					
ANR	5024108	Condition	m_jobAd && KVMType :: checkXenParams ( m_gahp_config )	1112:6:26031:26079	5023982	0	True				
ANR	5024109	AndExpression	m_jobAd && KVMType :: checkXenParams ( m_gahp_config )		5023982	0		&&			
ANR	5024110	Identifier	m_jobAd		5023982	0					
ANR	5024111	CallExpression	KVMType :: checkXenParams ( m_gahp_config )		5023982	1					
ANR	5024112	Callee	KVMType :: checkXenParams		5023982	0					
ANR	5024113	Identifier	KVMType :: checkXenParams		5023982	0					
ANR	5024114	ArgumentList	m_gahp_config		5023982	1					
ANR	5024115	Argument	m_gahp_config		5023982	0					
ANR	5024116	Identifier	m_gahp_config		5023982	0					
ANR	5024117	CompoundStatement		23:3:711:726	5023982	1					
ANR	5024118	IdentifierDeclStatement	MyString vmname ;	1113:3:26088:26103	5023982	0	True				
ANR	5024119	IdentifierDecl	vmname		5023982	0					
ANR	5024120	IdentifierDeclType	MyString		5023982	0					
ANR	5024121	Identifier	vmname		5023982	1					
ANR	5024122	IfStatement	"if ( VMType :: createVMName ( m_jobAd , vmname ) )"		5023982	1					
ANR	5024123	Condition	"VMType :: createVMName ( m_jobAd , vmname )"	1114:7:26112:26148	5023982	0	True				
ANR	5024124	CallExpression	"VMType :: createVMName ( m_jobAd , vmname )"		5023982	0					
ANR	5024125	Callee	VMType :: createVMName		5023982	0					
ANR	5024126	Identifier	VMType :: createVMName		5023982	0					
ANR	5024127	ArgumentList	m_jobAd		5023982	1					
ANR	5024128	Argument	m_jobAd		5023982	0					
ANR	5024129	Identifier	m_jobAd		5023982	0					
ANR	5024130	Argument	vmname		5023982	1					
ANR	5024131	Identifier	vmname		5023982	0					
ANR	5024132	CompoundStatement		24:47:775:775	5023982	1					
ANR	5024133	ExpressionStatement	KVMType :: killVMFast ( vmname . Value ( ) )	1115:4:26158:26193	5023982	0	True				
ANR	5024134	CallExpression	KVMType :: killVMFast ( vmname . Value ( ) )		5023982	0					
ANR	5024135	Callee	KVMType :: killVMFast		5023982	0					
ANR	5024136	Identifier	KVMType :: killVMFast		5023982	0					
ANR	5024137	ArgumentList	vmname . Value ( )		5023982	1					
ANR	5024138	Argument	vmname . Value ( )		5023982	0					
ANR	5024139	CallExpression	vmname . Value ( )		5023982	0					
ANR	5024140	Callee	vmname . Value		5023982	0					
ANR	5024141	MemberAccess	vmname . Value		5023982	0					
ANR	5024142	Identifier	vmname		5023982	0					
ANR	5024143	Identifier	Value		5023982	1					
ANR	5024144	ArgumentList			5023982	1					
ANR	5024145	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1116:4:26199:26247	5023982	1	True				
ANR	5024146	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5023982	0					
ANR	5024147	Callee	vmprintf		5023982	0					
ANR	5024148	Identifier	vmprintf		5023982	0					
ANR	5024149	ArgumentList	D_FULLDEBUG		5023982	1					
ANR	5024150	Argument	D_FULLDEBUG		5023982	0					
ANR	5024151	Identifier	D_FULLDEBUG		5023982	0					
ANR	5024152	Argument	"""killVMFast is called\\n"""		5023982	1					
ANR	5024153	PrimaryExpression	"""killVMFast is called\\n"""		5023982	0					
ANR	5024154	ExpressionStatement	set_priv ( priv )	1119:2:26260:26274	5023982	2	True				
ANR	5024155	CallExpression	set_priv ( priv )		5023982	0					
ANR	5024156	Callee	set_priv		5023982	0					
ANR	5024157	Identifier	set_priv		5023982	0					
ANR	5024158	ArgumentList	priv		5023982	1					
ANR	5024159	Argument	priv		5023982	0					
ANR	5024160	Identifier	priv		5023982	0					
ANR	5024161	ElseStatement	else		5023982	0					
ANR	5024162	IfStatement	"if ( strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5023982	0					
ANR	5024163	Condition	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	1123:5:26297:26377	5023982	0	True				
ANR	5024164	EqualityExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5023982	0		==			
ANR	5024165	CallExpression	"strcasecmp ( m_gahp_config -> m_vm_type . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE )"		5023982	0					
ANR	5024166	Callee	strcasecmp		5023982	0					
ANR	5024167	Identifier	strcasecmp		5023982	0					
ANR	5024168	ArgumentList	m_gahp_config -> m_vm_type . Value ( )		5023982	1					
ANR	5024169	Argument	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024170	CallExpression	m_gahp_config -> m_vm_type . Value ( )		5023982	0					
ANR	5024171	Callee	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024172	MemberAccess	m_gahp_config -> m_vm_type . Value		5023982	0					
ANR	5024173	PtrMemberAccess	m_gahp_config -> m_vm_type		5023982	0					
ANR	5024174	Identifier	m_gahp_config		5023982	0					
ANR	5024175	Identifier	m_vm_type		5023982	1					
ANR	5024176	Identifier	Value		5023982	1					
ANR	5024177	ArgumentList			5023982	1					
ANR	5024178	Argument	CONDOR_VM_UNIVERSE_VMWARE		5023982	1					
ANR	5024179	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5023982	0					
ANR	5024180	PrimaryExpression	0		5023982	1					
ANR	5024181	CompoundStatement		35:2:1008:1041	5023982	1					
ANR	5024182	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	1125:2:26385:26418	5023982	0	True				
ANR	5024183	IdentifierDecl	priv = set_user_priv ( )		5023982	0					
ANR	5024184	IdentifierDeclType	priv_state		5023982	0					
ANR	5024185	Identifier	priv		5023982	1					
ANR	5024186	AssignmentExpression	priv = set_user_priv ( )		5023982	2		=			
ANR	5024187	Identifier	priv		5023982	0					
ANR	5024188	CallExpression	set_user_priv ( )		5023982	1					
ANR	5024189	Callee	set_user_priv		5023982	0					
ANR	5024190	Identifier	set_user_priv		5023982	0					
ANR	5024191	ArgumentList			5023982	1					
ANR	5024192	IfStatement	if ( VMwareType :: checkVMwareParams ( m_gahp_config ) )		5023982	1					
ANR	5024193	Condition	VMwareType :: checkVMwareParams ( m_gahp_config )	1126:6:26426:26469	5023982	0	True				
ANR	5024194	CallExpression	VMwareType :: checkVMwareParams ( m_gahp_config )		5023982	0					
ANR	5024195	Callee	VMwareType :: checkVMwareParams		5023982	0					
ANR	5024196	Identifier	VMwareType :: checkVMwareParams		5023982	0					
ANR	5024197	ArgumentList	m_gahp_config		5023982	1					
ANR	5024198	Argument	m_gahp_config		5023982	0					
ANR	5024199	Identifier	m_gahp_config		5023982	0					
ANR	5024200	CompoundStatement		36:53:1096:1096	5023982	1					
ANR	5024201	ExpressionStatement	"VMwareType :: killVMFast ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , m_workingdir . Value ( ) )"	1127:3:26478:26605	5023982	0	True				
ANR	5024202	CallExpression	"VMwareType :: killVMFast ( m_gahp_config -> m_prog_for_script . Value ( ) , m_gahp_config -> m_vm_script . Value ( ) , m_workingdir . Value ( ) )"		5023982	0					
ANR	5024203	Callee	VMwareType :: killVMFast		5023982	0					
ANR	5024204	Identifier	VMwareType :: killVMFast		5023982	0					
ANR	5024205	ArgumentList	m_gahp_config -> m_prog_for_script . Value ( )		5023982	1					
ANR	5024206	Argument	m_gahp_config -> m_prog_for_script . Value ( )		5023982	0					
ANR	5024207	CallExpression	m_gahp_config -> m_prog_for_script . Value ( )		5023982	0					
ANR	5024208	Callee	m_gahp_config -> m_prog_for_script . Value		5023982	0					
ANR	5024209	MemberAccess	m_gahp_config -> m_prog_for_script . Value		5023982	0					
ANR	5024210	PtrMemberAccess	m_gahp_config -> m_prog_for_script		5023982	0					
ANR	5024211	Identifier	m_gahp_config		5023982	0					
ANR	5024212	Identifier	m_prog_for_script		5023982	1					
ANR	5024213	Identifier	Value		5023982	1					
ANR	5024214	ArgumentList			5023982	1					
ANR	5024215	Argument	m_gahp_config -> m_vm_script . Value ( )		5023982	1					
ANR	5024216	CallExpression	m_gahp_config -> m_vm_script . Value ( )		5023982	0					
ANR	5024217	Callee	m_gahp_config -> m_vm_script . Value		5023982	0					
ANR	5024218	MemberAccess	m_gahp_config -> m_vm_script . Value		5023982	0					
ANR	5024219	PtrMemberAccess	m_gahp_config -> m_vm_script		5023982	0					
ANR	5024220	Identifier	m_gahp_config		5023982	0					
ANR	5024221	Identifier	m_vm_script		5023982	1					
ANR	5024222	Identifier	Value		5023982	1					
ANR	5024223	ArgumentList			5023982	1					
ANR	5024224	Argument	m_workingdir . Value ( )		5023982	2					
ANR	5024225	CallExpression	m_workingdir . Value ( )		5023982	0					
ANR	5024226	Callee	m_workingdir . Value		5023982	0					
ANR	5024227	MemberAccess	m_workingdir . Value		5023982	0					
ANR	5024228	Identifier	m_workingdir		5023982	0					
ANR	5024229	Identifier	Value		5023982	1					
ANR	5024230	ArgumentList			5023982	1					
ANR	5024231	ExpressionStatement	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"	1129:3:26610:26658	5023982	1	True				
ANR	5024232	CallExpression	"vmprintf ( D_FULLDEBUG , ""killVMFast is called\\n"" )"		5023982	0					
ANR	5024233	Callee	vmprintf		5023982	0					
ANR	5024234	Identifier	vmprintf		5023982	0					
ANR	5024235	ArgumentList	D_FULLDEBUG		5023982	1					
ANR	5024236	Argument	D_FULLDEBUG		5023982	0					
ANR	5024237	Identifier	D_FULLDEBUG		5023982	0					
ANR	5024238	Argument	"""killVMFast is called\\n"""		5023982	1					
ANR	5024239	PrimaryExpression	"""killVMFast is called\\n"""		5023982	0					
ANR	5024240	ExpressionStatement	set_priv ( priv )	1131:2:26666:26680	5023982	2	True				
ANR	5024241	CallExpression	set_priv ( priv )		5023982	0					
ANR	5024242	Callee	set_priv		5023982	0					
ANR	5024243	Identifier	set_priv		5023982	0					
ANR	5024244	ArgumentList	priv		5023982	1					
ANR	5024245	Argument	priv		5023982	0					
ANR	5024246	Identifier	priv		5023982	0					
ANR	5024247	ReturnType	void		5023982	1					
ANR	5024248	Identifier	VMGahp :: killAllProcess		5023982	2					
ANR	5024249	ParameterList			5023982	3					
ANR	5024250	CFGEntryNode	ENTRY		5023982		True				
ANR	5024251	CFGExitNode	EXIT		5023982		True				
ANR	5024252	Symbol	VMType :: createVMName		5023982						
ANR	5024253	Symbol	m_jobAd		5023982						
ANR	5024254	Symbol	set_user_priv		5023982						
ANR	5024255	Symbol	m_gahp_config -> m_vm_type		5023982						
ANR	5024256	Symbol	vmname		5023982						
ANR	5024257	Symbol	vmname . Value		5023982						
ANR	5024258	Symbol	m_gahp_config -> m_vm_script . Value		5023982						
ANR	5024259	Symbol	CONDOR_VM_UNIVERSE_KVM		5023982						
ANR	5024260	Symbol	CONDOR_VM_UNIVERSE_XEN		5023982						
ANR	5024261	Symbol	priv		5023982						
ANR	5024262	Symbol	strcasecmp		5023982						
ANR	5024263	Symbol	m_gahp_config -> m_vm_type . Value		5023982						
ANR	5024264	Symbol	m_gahp_config		5023982						
ANR	5024265	Symbol	VMwareType :: checkVMwareParams		5023982						
ANR	5024266	Symbol	set_root_priv		5023982						
ANR	5024267	Symbol	D_FULLDEBUG		5023982						
ANR	5024268	Symbol	KVMType :: checkXenParams		5023982						
ANR	5024269	Symbol	m_gahp_config -> m_prog_for_script		5023982						
ANR	5024270	Symbol	m_gahp_config -> m_prog_for_script . Value		5023982						
ANR	5024271	Symbol	m_gahp_config -> m_vm_script		5023982						
ANR	5024272	Symbol	* m_gahp_config		5023982						
ANR	5024273	Symbol	m_workingdir		5023982						
ANR	5024274	Symbol	m_workingdir . Value		5023982						
ANR	5024275	Symbol	XenType :: checkXenParams		5023982						
ANR	5024276	Symbol	CONDOR_VM_UNIVERSE_VMWARE		5023982						
