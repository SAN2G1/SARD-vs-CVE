command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5080724	File	data/converged/CVE-2011-4930_htcondor/src_ec2_gahp_io_loop_pthread.cpp								
ANR	5080725	DeclStmt									
ANR	5080726	Decl							int	int	RESULT_OUTBOX
ANR	5080727	DeclStmt									
ANR	5080728	Decl							int	int	REQUEST_INBOX
ANR	5080729	DeclStmt									
ANR	5080730	Decl							const char	const char *	version
ANR	5080731	DeclStmt									
ANR	5080732	Decl							IOProcess	IOProcess *	ioprocess
ANR	5080733	DeclStmt									
ANR	5080734	Decl							void	void ( )	gahp_output_return_error
ANR	5080735	DeclStmt									
ANR	5080736	Decl							void	void ( )	gahp_output_return_success
ANR	5080737	DeclStmt									
ANR	5080738	Decl							void	"void ( const char * * results , const int count )"	gahp_output_return
ANR	5080739	DeclStmt									
ANR	5080740	Decl							int	"int ( char * * argv , int argc )"	verify_gahp_command
ANR	5080741	DeclStmt									
ANR	5080742	Decl							void	void * ( void * ptr )	worker_function
ANR	5080743	DeclStmt									
ANR	5080744	Decl							pthread_mutex_t	pthread_mutex_t	global_big_mutex
ANR	5080745	Function	io_process_exit	63:0:2231:2294							
ANR	5080746	FunctionDef	io_process_exit (int exit_num)		5080745	0					
ANR	5080747	CompoundStatement		64:0:2273:2294	5080745	0					
ANR	5080748	ExpressionStatement	exit ( exit_num )	65:1:2276:2292	5080745	0	True				
ANR	5080749	CallExpression	exit ( exit_num )		5080745	0					
ANR	5080750	Callee	exit		5080745	0					
ANR	5080751	Identifier	exit		5080745	0					
ANR	5080752	ArgumentList	exit_num		5080745	1					
ANR	5080753	Argument	exit_num		5080745	0					
ANR	5080754	Identifier	exit_num		5080745	0					
ANR	5080755	ReturnType	static void		5080745	1					
ANR	5080756	Identifier	io_process_exit		5080745	2					
ANR	5080757	ParameterList	int exit_num		5080745	3					
ANR	5080758	Parameter	int exit_num	63:28:2259:2270	5080745	0	True				
ANR	5080759	ParameterType	int		5080745	0					
ANR	5080760	Identifier	exit_num		5080745	1					
ANR	5080761	CFGEntryNode	ENTRY		5080745		True				
ANR	5080762	CFGExitNode	EXIT		5080745		True				
ANR	5080763	Symbol	exit_num		5080745						
ANR	5080764	Function	usage	68:0:2297:2419							
ANR	5080765	FunctionDef	usage ()		5080764	0					
ANR	5080766	CompoundStatement		70:0:2310:2419	5080764	0					
ANR	5080767	ExpressionStatement	"dprintf ( D_ALWAYS , ""Usage: amazon_gahp -d debuglevel -w min_worker_nums -m max_worker_nums\\n"" )"	71:1:2313:2407	5080764	0	True				
ANR	5080768	CallExpression	"dprintf ( D_ALWAYS , ""Usage: amazon_gahp -d debuglevel -w min_worker_nums -m max_worker_nums\\n"" )"		5080764	0					
ANR	5080769	Callee	dprintf		5080764	0					
ANR	5080770	Identifier	dprintf		5080764	0					
ANR	5080771	ArgumentList	D_ALWAYS		5080764	1					
ANR	5080772	Argument	D_ALWAYS		5080764	0					
ANR	5080773	Identifier	D_ALWAYS		5080764	0					
ANR	5080774	Argument	"""Usage: amazon_gahp -d debuglevel -w min_worker_nums -m max_worker_nums\\n"""		5080764	1					
ANR	5080775	PrimaryExpression	"""Usage: amazon_gahp -d debuglevel -w min_worker_nums -m max_worker_nums\\n"""		5080764	0					
ANR	5080776	ExpressionStatement	exit ( 1 )	72:1:2410:2417	5080764	1	True				
ANR	5080777	CallExpression	exit ( 1 )		5080764	0					
ANR	5080778	Callee	exit		5080764	0					
ANR	5080779	Identifier	exit		5080764	0					
ANR	5080780	ArgumentList	1		5080764	1					
ANR	5080781	Argument	1		5080764	0					
ANR	5080782	PrimaryExpression	1		5080764	0					
ANR	5080783	ReturnType	void		5080764	1					
ANR	5080784	Identifier	usage		5080764	2					
ANR	5080785	ParameterList			5080764	3					
ANR	5080786	CFGEntryNode	ENTRY		5080764		True				
ANR	5080787	CFGExitNode	EXIT		5080764		True				
ANR	5080788	Symbol	D_ALWAYS		5080764						
ANR	5080789	Function	registerAllAmazonCommands	75:0:2422:6514							
ANR	5080790	FunctionDef	registerAllAmazonCommands ()		5080789	0					
ANR	5080791	CompoundStatement		77:0:2466:6514	5080789	0					
ANR	5080792	IfStatement	if ( numofAmazonCommands ( ) > 0 )		5080789	0					
ANR	5080793	Condition	numofAmazonCommands ( ) > 0	78:5:2473:2497	5080789	0	True				
ANR	5080794	RelationalExpression	numofAmazonCommands ( ) > 0		5080789	0		>			
ANR	5080795	CallExpression	numofAmazonCommands ( )		5080789	0					
ANR	5080796	Callee	numofAmazonCommands		5080789	0					
ANR	5080797	Identifier	numofAmazonCommands		5080789	0					
ANR	5080798	ArgumentList			5080789	1					
ANR	5080799	PrimaryExpression	0		5080789	1					
ANR	5080800	CompoundStatement		2:33:34:34	5080789	1					
ANR	5080801	ExpressionStatement	"dprintf ( D_ALWAYS , ""There are already registered commands\\n"" )"	79:2:2505:2565	5080789	0	True				
ANR	5080802	CallExpression	"dprintf ( D_ALWAYS , ""There are already registered commands\\n"" )"		5080789	0					
ANR	5080803	Callee	dprintf		5080789	0					
ANR	5080804	Identifier	dprintf		5080789	0					
ANR	5080805	ArgumentList	D_ALWAYS		5080789	1					
ANR	5080806	Argument	D_ALWAYS		5080789	0					
ANR	5080807	Identifier	D_ALWAYS		5080789	0					
ANR	5080808	Argument	"""There are already registered commands\\n"""		5080789	1					
ANR	5080809	PrimaryExpression	"""There are already registered commands\\n"""		5080789	0					
ANR	5080810	ReturnStatement	return false ;	80:2:2569:2581	5080789	1	True				
ANR	5080811	Identifier	false		5080789	0					
ANR	5080812	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_START , AmazonVMStart :: ioCheck , AmazonVMStart :: workerFunction )"	85:1:2606:2715	5080789	1	True				
ANR	5080813	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_START , AmazonVMStart :: ioCheck , AmazonVMStart :: workerFunction )"		5080789	0					
ANR	5080814	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080815	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080816	ArgumentList	AMAZON_COMMAND_VM_START		5080789	1					
ANR	5080817	Argument	AMAZON_COMMAND_VM_START		5080789	0					
ANR	5080818	Identifier	AMAZON_COMMAND_VM_START		5080789	0					
ANR	5080819	Argument	AmazonVMStart :: ioCheck		5080789	1					
ANR	5080820	Identifier	AmazonVMStart :: ioCheck		5080789	0					
ANR	5080821	Argument	AmazonVMStart :: workerFunction		5080789	2					
ANR	5080822	Identifier	AmazonVMStart :: workerFunction		5080789	0					
ANR	5080823	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STOP , AmazonVMStop :: ioCheck , AmazonVMStop :: workerFunction )"	88:1:2719:2825	5080789	2	True				
ANR	5080824	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STOP , AmazonVMStop :: ioCheck , AmazonVMStop :: workerFunction )"		5080789	0					
ANR	5080825	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080826	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080827	ArgumentList	AMAZON_COMMAND_VM_STOP		5080789	1					
ANR	5080828	Argument	AMAZON_COMMAND_VM_STOP		5080789	0					
ANR	5080829	Identifier	AMAZON_COMMAND_VM_STOP		5080789	0					
ANR	5080830	Argument	AmazonVMStop :: ioCheck		5080789	1					
ANR	5080831	Identifier	AmazonVMStop :: ioCheck		5080789	0					
ANR	5080832	Argument	AmazonVMStop :: workerFunction		5080789	2					
ANR	5080833	Identifier	AmazonVMStop :: workerFunction		5080789	0					
ANR	5080834	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STATUS , AmazonVMStatus :: ioCheck , AmazonVMStatus :: workerFunction )"	96:1:2953:3065	5080789	3	True				
ANR	5080835	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STATUS , AmazonVMStatus :: ioCheck , AmazonVMStatus :: workerFunction )"		5080789	0					
ANR	5080836	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080837	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080838	ArgumentList	AMAZON_COMMAND_VM_STATUS		5080789	1					
ANR	5080839	Argument	AMAZON_COMMAND_VM_STATUS		5080789	0					
ANR	5080840	Identifier	AMAZON_COMMAND_VM_STATUS		5080789	0					
ANR	5080841	Argument	AmazonVMStatus :: ioCheck		5080789	1					
ANR	5080842	Identifier	AmazonVMStatus :: ioCheck		5080789	0					
ANR	5080843	Argument	AmazonVMStatus :: workerFunction		5080789	2					
ANR	5080844	Identifier	AmazonVMStatus :: workerFunction		5080789	0					
ANR	5080845	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STATUS_ALL , AmazonVMStatusAll :: ioCheck , AmazonVMStatusAll :: workerFunction )"	99:1:3069:3191	5080789	4	True				
ANR	5080846	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_STATUS_ALL , AmazonVMStatusAll :: ioCheck , AmazonVMStatusAll :: workerFunction )"		5080789	0					
ANR	5080847	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080848	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080849	ArgumentList	AMAZON_COMMAND_VM_STATUS_ALL		5080789	1					
ANR	5080850	Argument	AMAZON_COMMAND_VM_STATUS_ALL		5080789	0					
ANR	5080851	Identifier	AMAZON_COMMAND_VM_STATUS_ALL		5080789	0					
ANR	5080852	Argument	AmazonVMStatusAll :: ioCheck		5080789	1					
ANR	5080853	Identifier	AmazonVMStatusAll :: ioCheck		5080789	0					
ANR	5080854	Argument	AmazonVMStatusAll :: workerFunction		5080789	2					
ANR	5080855	Identifier	AmazonVMStatusAll :: workerFunction		5080789	0					
ANR	5080856	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_RUNNING_KEYPAIR , AmazonVMRunningKeypair :: ioCheck , AmazonVMRunningKeypair :: workerFunction )"	102:1:3195:3332	5080789	5	True				
ANR	5080857	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_RUNNING_KEYPAIR , AmazonVMRunningKeypair :: ioCheck , AmazonVMRunningKeypair :: workerFunction )"		5080789	0					
ANR	5080858	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080859	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080860	ArgumentList	AMAZON_COMMAND_VM_RUNNING_KEYPAIR		5080789	1					
ANR	5080861	Argument	AMAZON_COMMAND_VM_RUNNING_KEYPAIR		5080789	0					
ANR	5080862	Identifier	AMAZON_COMMAND_VM_RUNNING_KEYPAIR		5080789	0					
ANR	5080863	Argument	AmazonVMRunningKeypair :: ioCheck		5080789	1					
ANR	5080864	Identifier	AmazonVMRunningKeypair :: ioCheck		5080789	0					
ANR	5080865	Argument	AmazonVMRunningKeypair :: workerFunction		5080789	2					
ANR	5080866	Identifier	AmazonVMRunningKeypair :: workerFunction		5080789	0					
ANR	5080867	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_CREATE_KEYPAIR , AmazonVMCreateKeypair :: ioCheck , AmazonVMCreateKeypair :: workerFunction )"	126:1:4139:4273	5080789	6	True				
ANR	5080868	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_CREATE_KEYPAIR , AmazonVMCreateKeypair :: ioCheck , AmazonVMCreateKeypair :: workerFunction )"		5080789	0					
ANR	5080869	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080870	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080871	ArgumentList	AMAZON_COMMAND_VM_CREATE_KEYPAIR		5080789	1					
ANR	5080872	Argument	AMAZON_COMMAND_VM_CREATE_KEYPAIR		5080789	0					
ANR	5080873	Identifier	AMAZON_COMMAND_VM_CREATE_KEYPAIR		5080789	0					
ANR	5080874	Argument	AmazonVMCreateKeypair :: ioCheck		5080789	1					
ANR	5080875	Identifier	AmazonVMCreateKeypair :: ioCheck		5080789	0					
ANR	5080876	Argument	AmazonVMCreateKeypair :: workerFunction		5080789	2					
ANR	5080877	Identifier	AmazonVMCreateKeypair :: workerFunction		5080789	0					
ANR	5080878	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_DESTROY_KEYPAIR , AmazonVMDestroyKeypair :: ioCheck , AmazonVMDestroyKeypair :: workerFunction )"	129:1:4277:4414	5080789	7	True				
ANR	5080879	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_DESTROY_KEYPAIR , AmazonVMDestroyKeypair :: ioCheck , AmazonVMDestroyKeypair :: workerFunction )"		5080789	0					
ANR	5080880	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080881	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080882	ArgumentList	AMAZON_COMMAND_VM_DESTROY_KEYPAIR		5080789	1					
ANR	5080883	Argument	AMAZON_COMMAND_VM_DESTROY_KEYPAIR		5080789	0					
ANR	5080884	Identifier	AMAZON_COMMAND_VM_DESTROY_KEYPAIR		5080789	0					
ANR	5080885	Argument	AmazonVMDestroyKeypair :: ioCheck		5080789	1					
ANR	5080886	Identifier	AmazonVMDestroyKeypair :: ioCheck		5080789	0					
ANR	5080887	Argument	AmazonVMDestroyKeypair :: workerFunction		5080789	2					
ANR	5080888	Identifier	AmazonVMDestroyKeypair :: workerFunction		5080789	0					
ANR	5080889	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_KEYPAIR_NAMES , AmazonVMKeypairNames :: ioCheck , AmazonVMKeypairNames :: workerFunction )"	132:1:4418:4549	5080789	8	True				
ANR	5080890	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_KEYPAIR_NAMES , AmazonVMKeypairNames :: ioCheck , AmazonVMKeypairNames :: workerFunction )"		5080789	0					
ANR	5080891	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080892	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080893	ArgumentList	AMAZON_COMMAND_VM_KEYPAIR_NAMES		5080789	1					
ANR	5080894	Argument	AMAZON_COMMAND_VM_KEYPAIR_NAMES		5080789	0					
ANR	5080895	Identifier	AMAZON_COMMAND_VM_KEYPAIR_NAMES		5080789	0					
ANR	5080896	Argument	AmazonVMKeypairNames :: ioCheck		5080789	1					
ANR	5080897	Identifier	AmazonVMKeypairNames :: ioCheck		5080789	0					
ANR	5080898	Argument	AmazonVMKeypairNames :: workerFunction		5080789	2					
ANR	5080899	Identifier	AmazonVMKeypairNames :: workerFunction		5080789	0					
ANR	5080900	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS , AmazonAssociateAddress :: ioCheck , AmazonAssociateAddress :: workerFunction )"	135:4:4560:4708	5080789	9	True				
ANR	5080901	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS , AmazonAssociateAddress :: ioCheck , AmazonAssociateAddress :: workerFunction )"		5080789	0					
ANR	5080902	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080903	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080904	ArgumentList	AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS		5080789	1					
ANR	5080905	Argument	AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS		5080789	0					
ANR	5080906	Identifier	AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS		5080789	0					
ANR	5080907	Argument	AmazonAssociateAddress :: ioCheck		5080789	1					
ANR	5080908	Identifier	AmazonAssociateAddress :: ioCheck		5080789	0					
ANR	5080909	Argument	AmazonAssociateAddress :: workerFunction		5080789	2					
ANR	5080910	Identifier	AmazonAssociateAddress :: workerFunction		5080789	0					
ANR	5080911	ExpressionStatement	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_ATTACH_VOLUME , AmazonAttachVolume :: ioCheck , AmazonAttachVolume :: workerFunction )"	138:2:4714:4850	5080789	10	True				
ANR	5080912	CallExpression	"registerAmazonGahpCommand ( AMAZON_COMMAND_VM_ATTACH_VOLUME , AmazonAttachVolume :: ioCheck , AmazonAttachVolume :: workerFunction )"		5080789	0					
ANR	5080913	Callee	registerAmazonGahpCommand		5080789	0					
ANR	5080914	Identifier	registerAmazonGahpCommand		5080789	0					
ANR	5080915	ArgumentList	AMAZON_COMMAND_VM_ATTACH_VOLUME		5080789	1					
ANR	5080916	Argument	AMAZON_COMMAND_VM_ATTACH_VOLUME		5080789	0					
ANR	5080917	Identifier	AMAZON_COMMAND_VM_ATTACH_VOLUME		5080789	0					
ANR	5080918	Argument	AmazonAttachVolume :: ioCheck		5080789	1					
ANR	5080919	Identifier	AmazonAttachVolume :: ioCheck		5080789	0					
ANR	5080920	Argument	AmazonAttachVolume :: workerFunction		5080789	2					
ANR	5080921	Identifier	AmazonAttachVolume :: workerFunction		5080789	0					
ANR	5080922	ReturnStatement	return true ;	183:1:6501:6512	5080789	11	True				
ANR	5080923	Identifier	true		5080789	0					
ANR	5080924	ReturnType	static bool		5080789	1					
ANR	5080925	Identifier	registerAllAmazonCommands		5080789	2					
ANR	5080926	ParameterList			5080789	3					
ANR	5080927	CFGEntryNode	ENTRY		5080789		True				
ANR	5080928	CFGExitNode	EXIT		5080789		True				
ANR	5080929	Symbol	AmazonAssociateAddress :: workerFunction		5080789						
ANR	5080930	Symbol	AMAZON_COMMAND_VM_STATUS_ALL		5080789						
ANR	5080931	Symbol	AmazonVMStop :: ioCheck		5080789						
ANR	5080932	Symbol	AMAZON_COMMAND_VM_CREATE_KEYPAIR		5080789						
ANR	5080933	Symbol	AmazonVMDestroyKeypair :: workerFunction		5080789						
ANR	5080934	Symbol	AMAZON_COMMAND_VM_STATUS		5080789						
ANR	5080935	Symbol	AmazonVMCreateKeypair :: ioCheck		5080789						
ANR	5080936	Symbol	AmazonVMKeypairNames :: workerFunction		5080789						
ANR	5080937	Symbol	numofAmazonCommands		5080789						
ANR	5080938	Symbol	AMAZON_COMMAND_VM_DESTROY_KEYPAIR		5080789						
ANR	5080939	Symbol	AmazonAttachVolume :: workerFunction		5080789						
ANR	5080940	Symbol	AMAZON_COMMAND_VM_ATTACH_VOLUME		5080789						
ANR	5080941	Symbol	AmazonVMDestroyKeypair :: ioCheck		5080789						
ANR	5080942	Symbol	AmazonVMStart :: ioCheck		5080789						
ANR	5080943	Symbol	AmazonVMStop :: workerFunction		5080789						
ANR	5080944	Symbol	AmazonVMStatus :: workerFunction		5080789						
ANR	5080945	Symbol	AMAZON_COMMAND_VM_START		5080789						
ANR	5080946	Symbol	AmazonVMCreateKeypair :: workerFunction		5080789						
ANR	5080947	Symbol	AMAZON_COMMAND_VM_ASSOCIATE_ADDRESS		5080789						
ANR	5080948	Symbol	AMAZON_COMMAND_VM_STOP		5080789						
ANR	5080949	Symbol	AmazonVMStatusAll :: workerFunction		5080789						
ANR	5080950	Symbol	AmazonVMStatusAll :: ioCheck		5080789						
ANR	5080951	Symbol	D_ALWAYS		5080789						
ANR	5080952	Symbol	false		5080789						
ANR	5080953	Symbol	AMAZON_COMMAND_VM_RUNNING_KEYPAIR		5080789						
ANR	5080954	Symbol	AmazonVMStatus :: ioCheck		5080789						
ANR	5080955	Symbol	AmazonVMStart :: workerFunction		5080789						
ANR	5080956	Symbol	AmazonAssociateAddress :: ioCheck		5080789						
ANR	5080957	Symbol	AmazonVMRunningKeypair :: workerFunction		5080789						
ANR	5080958	Symbol	true		5080789						
ANR	5080959	Symbol	AmazonVMRunningKeypair :: ioCheck		5080789						
ANR	5080960	Symbol	AmazonVMKeypairNames :: ioCheck		5080789						
ANR	5080961	Symbol	AMAZON_COMMAND_VM_KEYPAIR_NAMES		5080789						
ANR	5080962	Symbol	AmazonAttachVolume :: ioCheck		5080789						
ANR	5080963	Function	quit_on_signal	186:0:6517:6622							
ANR	5080964	FunctionDef	quit_on_signal (int sig)		5080963	0					
ANR	5080965	CompoundStatement		188:0:6546:6622	5080963	0					
ANR	5080966	ExpressionStatement	_exit ( sig )	190:1:6610:6620	5080963	0	True				
ANR	5080967	CallExpression	_exit ( sig )		5080963	0					
ANR	5080968	Callee	_exit		5080963	0					
ANR	5080969	Identifier	_exit		5080963	0					
ANR	5080970	ArgumentList	sig		5080963	1					
ANR	5080971	Argument	sig		5080963	0					
ANR	5080972	Identifier	sig		5080963	0					
ANR	5080973	ReturnType	void		5080963	1					
ANR	5080974	Identifier	quit_on_signal		5080963	2					
ANR	5080975	ParameterList	int sig		5080963	3					
ANR	5080976	Parameter	int sig	187:15:6537:6543	5080963	0	True				
ANR	5080977	ParameterType	int		5080963	0					
ANR	5080978	Identifier	sig		5080963	1					
ANR	5080979	CFGEntryNode	ENTRY		5080963		True				
ANR	5080980	CFGExitNode	EXIT		5080963		True				
ANR	5080981	Symbol	sig		5080963						
ANR	5080982	DeclStmt									
ANR	5080983	Decl							sigset_t	sigset_t	sigSet
ANR	5080984	DeclStmt									
ANR	5080985	Decl							struct sigaction	struct sigaction	act
ANR	5080986	DeclStmt									
ANR	5080987	Decl							const char	const char *	debug_string
ANR	5080988	DeclStmt									
ANR	5080989	Decl							int	int	min_workers
ANR	5080990	DeclStmt									
ANR	5080991	Decl							int	int	max_workers
ANR	5080992	DeclStmt									
ANR	5080993	Decl							int	int	c
ANR	5080994	DeclStmt									
ANR	5080995	Decl							const char	const char *	buff
ANR	5080996	Function	verify_gahp_command	311:0:9360:9905							
ANR	5080997	FunctionDef	"verify_gahp_command (char * * argv , int argc)"		5080996	0					
ANR	5080998	CompoundStatement		312:44:9415:9905	5080996	0					
ANR	5080999	IfStatement	"if ( strcasecmp ( argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0 )"		5080996	0					
ANR	5081000	Condition	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"	314:5:9449:9776	5080996	0	True				
ANR	5081001	OrExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	0		||			
ANR	5081002	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0"		5080996	0		==			
ANR	5081003	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_RESULTS )"		5080996	0					
ANR	5081004	Callee	strcasecmp		5080996	0					
ANR	5081005	Identifier	strcasecmp		5080996	0					
ANR	5081006	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081007	Argument	argv [ 0 ]		5080996	0					
ANR	5081008	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081009	Identifier	argv		5080996	0					
ANR	5081010	PrimaryExpression	0		5080996	1					
ANR	5081011	Argument	GAHP_COMMAND_RESULTS		5080996	1					
ANR	5081012	Identifier	GAHP_COMMAND_RESULTS		5080996	0					
ANR	5081013	PrimaryExpression	0		5080996	1					
ANR	5081014	OrExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	1		||			
ANR	5081015	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0"		5080996	0		==			
ANR	5081016	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_VERSION )"		5080996	0					
ANR	5081017	Callee	strcasecmp		5080996	0					
ANR	5081018	Identifier	strcasecmp		5080996	0					
ANR	5081019	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081020	Argument	argv [ 0 ]		5080996	0					
ANR	5081021	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081022	Identifier	argv		5080996	0					
ANR	5081023	PrimaryExpression	0		5080996	1					
ANR	5081024	Argument	GAHP_COMMAND_VERSION		5080996	1					
ANR	5081025	Identifier	GAHP_COMMAND_VERSION		5080996	0					
ANR	5081026	PrimaryExpression	0		5080996	1					
ANR	5081027	OrExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	1		||			
ANR	5081028	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0"		5080996	0		==			
ANR	5081029	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_COMMANDS )"		5080996	0					
ANR	5081030	Callee	strcasecmp		5080996	0					
ANR	5081031	Identifier	strcasecmp		5080996	0					
ANR	5081032	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081033	Argument	argv [ 0 ]		5080996	0					
ANR	5081034	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081035	Identifier	argv		5080996	0					
ANR	5081036	PrimaryExpression	0		5080996	1					
ANR	5081037	Argument	GAHP_COMMAND_COMMANDS		5080996	1					
ANR	5081038	Identifier	GAHP_COMMAND_COMMANDS		5080996	0					
ANR	5081039	PrimaryExpression	0		5080996	1					
ANR	5081040	OrExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	1		||			
ANR	5081041	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0"		5080996	0		==			
ANR	5081042	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_QUIT )"		5080996	0					
ANR	5081043	Callee	strcasecmp		5080996	0					
ANR	5081044	Identifier	strcasecmp		5080996	0					
ANR	5081045	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081046	Argument	argv [ 0 ]		5080996	0					
ANR	5081047	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081048	Identifier	argv		5080996	0					
ANR	5081049	PrimaryExpression	0		5080996	1					
ANR	5081050	Argument	GAHP_COMMAND_QUIT		5080996	1					
ANR	5081051	Identifier	GAHP_COMMAND_QUIT		5080996	0					
ANR	5081052	PrimaryExpression	0		5080996	1					
ANR	5081053	OrExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 || strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	1		||			
ANR	5081054	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5080996	0		==			
ANR	5081055	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON )"		5080996	0					
ANR	5081056	Callee	strcasecmp		5080996	0					
ANR	5081057	Identifier	strcasecmp		5080996	0					
ANR	5081058	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081059	Argument	argv [ 0 ]		5080996	0					
ANR	5081060	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081061	Identifier	argv		5080996	0					
ANR	5081062	PrimaryExpression	0		5080996	1					
ANR	5081063	Argument	GAHP_COMMAND_ASYNC_MODE_ON		5080996	1					
ANR	5081064	Identifier	GAHP_COMMAND_ASYNC_MODE_ON		5080996	0					
ANR	5081065	PrimaryExpression	0		5080996	1					
ANR	5081066	EqualityExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5080996	1		==			
ANR	5081067	CallExpression	"strcasecmp ( argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF )"		5080996	0					
ANR	5081068	Callee	strcasecmp		5080996	0					
ANR	5081069	Identifier	strcasecmp		5080996	0					
ANR	5081070	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081071	Argument	argv [ 0 ]		5080996	0					
ANR	5081072	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081073	Identifier	argv		5080996	0					
ANR	5081074	PrimaryExpression	0		5080996	1					
ANR	5081075	Argument	GAHP_COMMAND_ASYNC_MODE_OFF		5080996	1					
ANR	5081076	Identifier	GAHP_COMMAND_ASYNC_MODE_OFF		5080996	0					
ANR	5081077	PrimaryExpression	0		5080996	1					
ANR	5081078	CompoundStatement		8:59:363:363	5080996	1					
ANR	5081079	ReturnStatement	"return verify_number_args ( argc , 1 ) ;"	321:2:9814:9849	5080996	0	True				
ANR	5081080	CallExpression	"verify_number_args ( argc , 1 )"		5080996	0					
ANR	5081081	Callee	verify_number_args		5080996	0					
ANR	5081082	Identifier	verify_number_args		5080996	0					
ANR	5081083	ArgumentList	argc		5080996	1					
ANR	5081084	Argument	argc		5080996	0					
ANR	5081085	Identifier	argc		5080996	0					
ANR	5081086	Argument	1		5080996	1					
ANR	5081087	PrimaryExpression	1		5080996	0					
ANR	5081088	ReturnStatement	"return executeIOCheckFunc ( argv [ 0 ] , argv , argc ) ;"	324:1:9856:9902	5080996	1	True				
ANR	5081089	CallExpression	"executeIOCheckFunc ( argv [ 0 ] , argv , argc )"		5080996	0					
ANR	5081090	Callee	executeIOCheckFunc		5080996	0					
ANR	5081091	Identifier	executeIOCheckFunc		5080996	0					
ANR	5081092	ArgumentList	argv [ 0 ]		5080996	1					
ANR	5081093	Argument	argv [ 0 ]		5080996	0					
ANR	5081094	ArrayIndexing	argv [ 0 ]		5080996	0					
ANR	5081095	Identifier	argv		5080996	0					
ANR	5081096	PrimaryExpression	0		5080996	1					
ANR	5081097	Argument	argv		5080996	1					
ANR	5081098	Identifier	argv		5080996	0					
ANR	5081099	Argument	argc		5080996	2					
ANR	5081100	Identifier	argc		5080996	0					
ANR	5081101	ReturnType	static int		5080996	1					
ANR	5081102	Identifier	verify_gahp_command		5080996	2					
ANR	5081103	ParameterList	"char * * argv , int argc"		5080996	3					
ANR	5081104	Parameter	char * * argv	312:20:9391:9402	5080996	0	True				
ANR	5081105	ParameterType	char * *		5080996	0					
ANR	5081106	Identifier	argv		5080996	1					
ANR	5081107	Parameter	int argc	312:34:9405:9412	5080996	1	True				
ANR	5081108	ParameterType	int		5080996	0					
ANR	5081109	Identifier	argc		5080996	1					
ANR	5081110	CFGEntryNode	ENTRY		5080996		True				
ANR	5081111	CFGExitNode	EXIT		5080996		True				
ANR	5081112	Symbol	argc		5080996						
ANR	5081113	Symbol	GAHP_COMMAND_COMMANDS		5080996						
ANR	5081114	Symbol	GAHP_COMMAND_ASYNC_MODE_ON		5080996						
ANR	5081115	Symbol	GAHP_COMMAND_QUIT		5080996						
ANR	5081116	Symbol	executeIOCheckFunc		5080996						
ANR	5081117	Symbol	GAHP_COMMAND_ASYNC_MODE_OFF		5080996						
ANR	5081118	Symbol	* argv		5080996						
ANR	5081119	Symbol	GAHP_COMMAND_RESULTS		5080996						
ANR	5081120	Symbol	strcasecmp		5080996						
ANR	5081121	Symbol	verify_number_args		5080996						
ANR	5081122	Symbol	argv		5080996						
ANR	5081123	Symbol	GAHP_COMMAND_VERSION		5080996						
ANR	5081124	Function	gahp_output_return	327:0:9908:10181							
ANR	5081125	FunctionDef	"gahp_output_return (const char * * results , const int count)"		5081124	0					
ANR	5081126	CompoundStatement		328:60:9973:10181	5081124	0					
ANR	5081127	IdentifierDeclStatement	int i = 0 ;	331:1:10003:10010	5081124	0	True				
ANR	5081128	IdentifierDecl	i = 0		5081124	0					
ANR	5081129	IdentifierDeclType	int		5081124	0					
ANR	5081130	Identifier	i		5081124	1					
ANR	5081131	AssignmentExpression	i = 0		5081124	2		=			
ANR	5081132	Identifier	i		5081124	0					
ANR	5081133	PrimaryExpression	0		5081124	1					
ANR	5081134	ForStatement	for ( i = 0 ; i < count ; i ++ )		5081124	1					
ANR	5081135	ForInit	i = 0 ;	332:6:10018:10021	5081124	0	True				
ANR	5081136	AssignmentExpression	i = 0		5081124	0		=			
ANR	5081137	Identifier	i		5081124	0					
ANR	5081138	PrimaryExpression	0		5081124	1					
ANR	5081139	Condition	i < count	332:11:10023:10029	5081124	1	True				
ANR	5081140	RelationalExpression	i < count		5081124	0		<			
ANR	5081141	Identifier	i		5081124	0					
ANR	5081142	Identifier	count		5081124	1					
ANR	5081143	PostIncDecOperationExpression	i ++	332:20:10032:10034	5081124	2	True				
ANR	5081144	Identifier	i		5081124	0					
ANR	5081145	IncDec	++		5081124	1					
ANR	5081146	CompoundStatement		5:25:63:63	5081124	3					
ANR	5081147	ExpressionStatement	"printf ( ""%s"" , results [ i ] )"	333:2:10041:10066	5081124	0	True				
ANR	5081148	CallExpression	"printf ( ""%s"" , results [ i ] )"		5081124	0					
ANR	5081149	Callee	printf		5081124	0					
ANR	5081150	Identifier	printf		5081124	0					
ANR	5081151	ArgumentList	"""%s"""		5081124	1					
ANR	5081152	Argument	"""%s"""		5081124	0					
ANR	5081153	PrimaryExpression	"""%s"""		5081124	0					
ANR	5081154	Argument	results [ i ]		5081124	1					
ANR	5081155	ArrayIndexing	results [ i ]		5081124	0					
ANR	5081156	Identifier	results		5081124	0					
ANR	5081157	Identifier	i		5081124	1					
ANR	5081158	IfStatement	if ( i < ( count - 1 ) )		5081124	1					
ANR	5081159	Condition	i < ( count - 1 )	334:6:10074:10089	5081124	0	True				
ANR	5081160	RelationalExpression	i < ( count - 1 )		5081124	0		<			
ANR	5081161	Identifier	i		5081124	0					
ANR	5081162	AdditiveExpression	count - 1		5081124	1		-			
ANR	5081163	Identifier	count		5081124	0					
ANR	5081164	PrimaryExpression	1		5081124	1					
ANR	5081165	CompoundStatement		7:24:118:118	5081124	1					
ANR	5081166	ExpressionStatement	"printf ( "" "" )"	335:3:10097:10109	5081124	0	True				
ANR	5081167	CallExpression	"printf ( "" "" )"		5081124	0					
ANR	5081168	Callee	printf		5081124	0					
ANR	5081169	Identifier	printf		5081124	0					
ANR	5081170	ArgumentList	""" """		5081124	1					
ANR	5081171	Argument	""" """		5081124	0					
ANR	5081172	PrimaryExpression	""" """		5081124	0					
ANR	5081173	ExpressionStatement	"printf ( ""\\n"" )"	339:1:10120:10133	5081124	2	True				
ANR	5081174	CallExpression	"printf ( ""\\n"" )"		5081124	0					
ANR	5081175	Callee	printf		5081124	0					
ANR	5081176	Identifier	printf		5081124	0					
ANR	5081177	ArgumentList	"""\\n"""		5081124	1					
ANR	5081178	Argument	"""\\n"""		5081124	0					
ANR	5081179	PrimaryExpression	"""\\n"""		5081124	0					
ANR	5081180	ExpressionStatement	fflush ( stdout )	340:1:10136:10150	5081124	3	True				
ANR	5081181	CallExpression	fflush ( stdout )		5081124	0					
ANR	5081182	Callee	fflush		5081124	0					
ANR	5081183	Identifier	fflush		5081124	0					
ANR	5081184	ArgumentList	stdout		5081124	1					
ANR	5081185	Argument	stdout		5081124	0					
ANR	5081186	Identifier	stdout		5081124	0					
ANR	5081187	ReturnType	void		5081124	1					
ANR	5081188	Identifier	gahp_output_return		5081124	2					
ANR	5081189	ParameterList	"const char * * results , const int count"		5081124	3					
ANR	5081190	Parameter	const char * * results	328:20:9933:9953	5081124	0	True				
ANR	5081191	ParameterType	const char * *		5081124	0					
ANR	5081192	Identifier	results		5081124	1					
ANR	5081193	Parameter	const int count	328:43:9956:9970	5081124	1	True				
ANR	5081194	ParameterType	const int		5081124	0					
ANR	5081195	Identifier	count		5081124	1					
ANR	5081196	CFGEntryNode	ENTRY		5081124		True				
ANR	5081197	CFGExitNode	EXIT		5081124		True				
ANR	5081198	Symbol	* i		5081124						
ANR	5081199	Symbol	stdout		5081124						
ANR	5081200	Symbol	count		5081124						
ANR	5081201	Symbol	i		5081124						
ANR	5081202	Symbol	* results		5081124						
ANR	5081203	Symbol	results		5081124						
ANR	5081204	Function	gahp_output_return_success	345:0:10184:10307							
ANR	5081205	FunctionDef	gahp_output_return_success ()		5081204	0					
ANR	5081206	CompoundStatement		346:29:10225:10307	5081204	0					
ANR	5081207	IdentifierDeclStatement	const char * result [ ] = { GAHP_RESULT_SUCCESS } ;	347:1:10228:10272	5081204	0	True				
ANR	5081208	IdentifierDecl	* result [ ] = { GAHP_RESULT_SUCCESS }		5081204	0					
ANR	5081209	IdentifierDeclType	const char * [ ]		5081204	0					
ANR	5081210	Identifier	result		5081204	1					
ANR	5081211	AssignmentExpression	* result [ ] = { GAHP_RESULT_SUCCESS }		5081204	2		=			
ANR	5081212	Identifier	result		5081204	0					
ANR	5081213	InitializerList	GAHP_RESULT_SUCCESS		5081204	1					
ANR	5081214	Identifier	GAHP_RESULT_SUCCESS		5081204	0					
ANR	5081215	ExpressionStatement	"gahp_output_return ( result , 1 )"	348:1:10275:10305	5081204	1	True				
ANR	5081216	CallExpression	"gahp_output_return ( result , 1 )"		5081204	0					
ANR	5081217	Callee	gahp_output_return		5081204	0					
ANR	5081218	Identifier	gahp_output_return		5081204	0					
ANR	5081219	ArgumentList	result		5081204	1					
ANR	5081220	Argument	result		5081204	0					
ANR	5081221	Identifier	result		5081204	0					
ANR	5081222	Argument	1		5081204	1					
ANR	5081223	PrimaryExpression	1		5081204	0					
ANR	5081224	ReturnType	static void		5081204	1					
ANR	5081225	Identifier	gahp_output_return_success		5081204	2					
ANR	5081226	ParameterList			5081204	3					
ANR	5081227	CFGEntryNode	ENTRY		5081204		True				
ANR	5081228	CFGExitNode	EXIT		5081204		True				
ANR	5081229	Symbol	result		5081204						
ANR	5081230	Symbol	GAHP_RESULT_SUCCESS		5081204						
ANR	5081231	Function	gahp_output_return_error	351:0:10310:10429							
ANR	5081232	FunctionDef	gahp_output_return_error ()		5081231	0					
ANR	5081233	CompoundStatement		352:27:10349:10429	5081231	0					
ANR	5081234	IdentifierDeclStatement	const char * result [ ] = { GAHP_RESULT_ERROR } ;	353:1:10352:10394	5081231	0	True				
ANR	5081235	IdentifierDecl	* result [ ] = { GAHP_RESULT_ERROR }		5081231	0					
ANR	5081236	IdentifierDeclType	const char * [ ]		5081231	0					
ANR	5081237	Identifier	result		5081231	1					
ANR	5081238	AssignmentExpression	* result [ ] = { GAHP_RESULT_ERROR }		5081231	2		=			
ANR	5081239	Identifier	result		5081231	0					
ANR	5081240	InitializerList	GAHP_RESULT_ERROR		5081231	1					
ANR	5081241	Identifier	GAHP_RESULT_ERROR		5081231	0					
ANR	5081242	ExpressionStatement	"gahp_output_return ( result , 1 )"	354:1:10397:10427	5081231	1	True				
ANR	5081243	CallExpression	"gahp_output_return ( result , 1 )"		5081231	0					
ANR	5081244	Callee	gahp_output_return		5081231	0					
ANR	5081245	Identifier	gahp_output_return		5081231	0					
ANR	5081246	ArgumentList	result		5081231	1					
ANR	5081247	Argument	result		5081231	0					
ANR	5081248	Identifier	result		5081231	0					
ANR	5081249	Argument	1		5081231	1					
ANR	5081250	PrimaryExpression	1		5081231	0					
ANR	5081251	ReturnType	static void		5081231	1					
ANR	5081252	Identifier	gahp_output_return_error		5081231	2					
ANR	5081253	ParameterList			5081231	3					
ANR	5081254	CFGEntryNode	ENTRY		5081231		True				
ANR	5081255	CFGExitNode	EXIT		5081231		True				
ANR	5081256	Symbol	result		5081231						
ANR	5081257	Symbol	GAHP_RESULT_ERROR		5081231						
ANR	5081258	Function	Worker :: Worker	357:0:10432:10649							
ANR	5081259	FunctionDef	Worker :: Worker (int worker_id)		5081258	0					
ANR	5081260	CompoundStatement		358:0:10463:10649	5081258	0					
ANR	5081261	ExpressionStatement	m_id = worker_id	359:1:10466:10482	5081258	0	True				
ANR	5081262	AssignmentExpression	m_id = worker_id		5081258	0		=			
ANR	5081263	Identifier	m_id		5081258	0					
ANR	5081264	Identifier	worker_id		5081258	1					
ANR	5081265	ExpressionStatement	m_can_use = false	360:1:10485:10502	5081258	1	True				
ANR	5081266	AssignmentExpression	m_can_use = false		5081258	0		=			
ANR	5081267	Identifier	m_can_use		5081258	0					
ANR	5081268	Identifier	false		5081258	1					
ANR	5081269	ExpressionStatement	m_is_doing = false	361:1:10505:10523	5081258	2	True				
ANR	5081270	AssignmentExpression	m_is_doing = false		5081258	0		=			
ANR	5081271	Identifier	m_is_doing		5081258	0					
ANR	5081272	Identifier	false		5081258	1					
ANR	5081273	ExpressionStatement	m_is_waiting = false	362:1:10526:10546	5081258	3	True				
ANR	5081274	AssignmentExpression	m_is_waiting = false		5081258	0		=			
ANR	5081275	Identifier	m_is_waiting		5081258	0					
ANR	5081276	Identifier	false		5081258	1					
ANR	5081277	ExpressionStatement	m_must_be_alive = false	363:1:10549:10572	5081258	4	True				
ANR	5081278	AssignmentExpression	m_must_be_alive = false		5081258	0		=			
ANR	5081279	Identifier	m_must_be_alive		5081258	0					
ANR	5081280	Identifier	false		5081258	1					
ANR	5081281	ExpressionStatement	"pthread_cond_init ( & m_cond , NULL )"	366:1:10615:10647	5081258	5	True				
ANR	5081282	CallExpression	"pthread_cond_init ( & m_cond , NULL )"		5081258	0					
ANR	5081283	Callee	pthread_cond_init		5081258	0					
ANR	5081284	Identifier	pthread_cond_init		5081258	0					
ANR	5081285	ArgumentList	& m_cond		5081258	1					
ANR	5081286	Argument	& m_cond		5081258	0					
ANR	5081287	UnaryOperationExpression	& m_cond		5081258	0					
ANR	5081288	UnaryOperator	&		5081258	0					
ANR	5081289	Identifier	m_cond		5081258	1					
ANR	5081290	Argument	NULL		5081258	1					
ANR	5081291	Identifier	NULL		5081258	0					
ANR	5081292	Identifier	Worker :: Worker		5081258	1					
ANR	5081293	ParameterList	int worker_id		5081258	2					
ANR	5081294	Parameter	int worker_id	357:15:10447:10459	5081258	0	True				
ANR	5081295	ParameterType	int		5081258	0					
ANR	5081296	Identifier	worker_id		5081258	1					
ANR	5081297	CFGEntryNode	ENTRY		5081258		True				
ANR	5081298	CFGExitNode	EXIT		5081258		True				
ANR	5081299	Symbol	m_is_waiting		5081258						
ANR	5081300	Symbol	NULL		5081258						
ANR	5081301	Symbol	& m_cond		5081258						
ANR	5081302	Symbol	m_is_doing		5081258						
ANR	5081303	Symbol	false		5081258						
ANR	5081304	Symbol	m_can_use		5081258						
ANR	5081305	Symbol	m_must_be_alive		5081258						
ANR	5081306	Symbol	worker_id		5081258						
ANR	5081307	Symbol	m_id		5081258						
ANR	5081308	Function	Worker :: ~Worker	369:0:10652:10960							
ANR	5081309	FunctionDef	Worker :: ~Worker ()		5081308	0					
ANR	5081310	CompoundStatement		370:0:10671:10960	5081308	0					
ANR	5081311	IdentifierDeclStatement	Request * request = NULL ;	371:1:10674:10697	5081308	0	True				
ANR	5081312	IdentifierDecl	* request = NULL		5081308	0					
ANR	5081313	IdentifierDeclType	Request *		5081308	0					
ANR	5081314	Identifier	request		5081308	1					
ANR	5081315	AssignmentExpression	* request = NULL		5081308	2		=			
ANR	5081316	Identifier	NULL		5081308	0					
ANR	5081317	Identifier	NULL		5081308	1					
ANR	5081318	ExpressionStatement	m_request_list . Rewind ( )	374:1:10734:10757	5081308	1	True				
ANR	5081319	CallExpression	m_request_list . Rewind ( )		5081308	0					
ANR	5081320	Callee	m_request_list . Rewind		5081308	0					
ANR	5081321	MemberAccess	m_request_list . Rewind		5081308	0					
ANR	5081322	Identifier	m_request_list		5081308	0					
ANR	5081323	Identifier	Rewind		5081308	1					
ANR	5081324	ArgumentList			5081308	1					
ANR	5081325	WhileStatement	while ( m_request_list . Next ( request ) )		5081308	2					
ANR	5081326	Condition	m_request_list . Next ( request )	375:8:10767:10794	5081308	0	True				
ANR	5081327	CallExpression	m_request_list . Next ( request )		5081308	0					
ANR	5081328	Callee	m_request_list . Next		5081308	0					
ANR	5081329	MemberAccess	m_request_list . Next		5081308	0					
ANR	5081330	Identifier	m_request_list		5081308	0					
ANR	5081331	Identifier	Next		5081308	1					
ANR	5081332	ArgumentList	request		5081308	1					
ANR	5081333	Argument	request		5081308	0					
ANR	5081334	Identifier	request		5081308	0					
ANR	5081335	CompoundStatement		6:39:126:126	5081308	1					
ANR	5081336	ExpressionStatement	m_request_list . DeleteCurrent ( )	376:2:10802:10832	5081308	0	True				
ANR	5081337	CallExpression	m_request_list . DeleteCurrent ( )		5081308	0					
ANR	5081338	Callee	m_request_list . DeleteCurrent		5081308	0					
ANR	5081339	MemberAccess	m_request_list . DeleteCurrent		5081308	0					
ANR	5081340	Identifier	m_request_list		5081308	0					
ANR	5081341	Identifier	DeleteCurrent		5081308	1					
ANR	5081342	ArgumentList			5081308	1					
ANR	5081343	Statement	delete	377:2:10836:10841	5081308	1	True				
ANR	5081344	ExpressionStatement	request	377:9:10843:10850	5081308	2	True				
ANR	5081345	Identifier	request		5081308	0					
ANR	5081346	ExpressionStatement	pthread_cond_destroy ( & m_cond )	382:1:10893:10922	5081308	3	True				
ANR	5081347	CallExpression	pthread_cond_destroy ( & m_cond )		5081308	0					
ANR	5081348	Callee	pthread_cond_destroy		5081308	0					
ANR	5081349	Identifier	pthread_cond_destroy		5081308	0					
ANR	5081350	ArgumentList	& m_cond		5081308	1					
ANR	5081351	Argument	& m_cond		5081308	0					
ANR	5081352	UnaryOperationExpression	& m_cond		5081308	0					
ANR	5081353	UnaryOperator	&		5081308	0					
ANR	5081354	Identifier	m_cond		5081308	1					
ANR	5081355	Identifier	Worker :: ~Worker		5081308	1					
ANR	5081356	ParameterList			5081308	2					
ANR	5081357	CFGEntryNode	ENTRY		5081308		True				
ANR	5081358	CFGExitNode	EXIT		5081308		True				
ANR	5081359	Symbol	request		5081308						
ANR	5081360	Symbol	NULL		5081308						
ANR	5081361	Symbol	& m_cond		5081308						
ANR	5081362	Symbol	m_request_list		5081308						
ANR	5081363	Symbol	m_request_list . Next		5081308						
ANR	5081364	Function	Worker :: removeRequest	386:0:10963:11387							
ANR	5081365	FunctionDef	Worker :: removeRequest (int req_id)		5081364	0					
ANR	5081366	CompoundStatement		388:0:11002:11387	5081364	0					
ANR	5081367	IdentifierDeclStatement	Request * request = NULL ;	389:1:11005:11028	5081364	0	True				
ANR	5081368	IdentifierDecl	* request = NULL		5081364	0					
ANR	5081369	IdentifierDeclType	Request *		5081364	0					
ANR	5081370	Identifier	request		5081364	1					
ANR	5081371	AssignmentExpression	* request = NULL		5081364	2		=			
ANR	5081372	Identifier	NULL		5081364	0					
ANR	5081373	Identifier	NULL		5081364	1					
ANR	5081374	ExpressionStatement	m_request_list . Rewind ( )	392:1:11065:11088	5081364	1	True				
ANR	5081375	CallExpression	m_request_list . Rewind ( )		5081364	0					
ANR	5081376	Callee	m_request_list . Rewind		5081364	0					
ANR	5081377	MemberAccess	m_request_list . Rewind		5081364	0					
ANR	5081378	Identifier	m_request_list		5081364	0					
ANR	5081379	Identifier	Rewind		5081364	1					
ANR	5081380	ArgumentList			5081364	1					
ANR	5081381	WhileStatement	while ( m_request_list . Next ( request ) )		5081364	2					
ANR	5081382	Condition	m_request_list . Next ( request )	393:8:11098:11125	5081364	0	True				
ANR	5081383	CallExpression	m_request_list . Next ( request )		5081364	0					
ANR	5081384	Callee	m_request_list . Next		5081364	0					
ANR	5081385	MemberAccess	m_request_list . Next		5081364	0					
ANR	5081386	Identifier	m_request_list		5081364	0					
ANR	5081387	Identifier	Next		5081364	1					
ANR	5081388	ArgumentList	request		5081364	1					
ANR	5081389	Argument	request		5081364	0					
ANR	5081390	Identifier	request		5081364	0					
ANR	5081391	CompoundStatement		6:39:126:126	5081364	1					
ANR	5081392	IfStatement	if ( request -> m_reqid == req_id )		5081364	0					
ANR	5081393	Condition	request -> m_reqid == req_id	395:6:11138:11163	5081364	0	True				
ANR	5081394	EqualityExpression	request -> m_reqid == req_id		5081364	0		==			
ANR	5081395	PtrMemberAccess	request -> m_reqid		5081364	0					
ANR	5081396	Identifier	request		5081364	0					
ANR	5081397	Identifier	m_reqid		5081364	1					
ANR	5081398	Identifier	req_id		5081364	1					
ANR	5081399	CompoundStatement		8:35:164:164	5081364	1					
ANR	5081400	ExpressionStatement	m_request_list . DeleteCurrent ( )	397:3:11224:11254	5081364	0	True				
ANR	5081401	CallExpression	m_request_list . DeleteCurrent ( )		5081364	0					
ANR	5081402	Callee	m_request_list . DeleteCurrent		5081364	0					
ANR	5081403	MemberAccess	m_request_list . DeleteCurrent		5081364	0					
ANR	5081404	Identifier	m_request_list		5081364	0					
ANR	5081405	Identifier	DeleteCurrent		5081364	1					
ANR	5081406	ArgumentList			5081364	1					
ANR	5081407	Statement	delete	398:3:11259:11264	5081364	1	True				
ANR	5081408	ExpressionStatement	request	398:10:11266:11273	5081364	2	True				
ANR	5081409	Identifier	request		5081364	0					
ANR	5081410	ReturnStatement	return true ;	400:3:11315:11326	5081364	3	True				
ANR	5081411	Identifier	true		5081364	0					
ANR	5081412	ReturnStatement	return false ;	405:1:11373:11385	5081364	3	True				
ANR	5081413	Identifier	false		5081364	0					
ANR	5081414	ReturnType	bool		5081364	1					
ANR	5081415	Identifier	Worker :: removeRequest		5081364	2					
ANR	5081416	ParameterList	int req_id		5081364	3					
ANR	5081417	Parameter	int req_id	387:22:10990:10999	5081364	0	True				
ANR	5081418	ParameterType	int		5081364	0					
ANR	5081419	Identifier	req_id		5081364	1					
ANR	5081420	CFGEntryNode	ENTRY		5081364		True				
ANR	5081421	CFGExitNode	EXIT		5081364		True				
ANR	5081422	Symbol	req_id		5081364						
ANR	5081423	Symbol	request		5081364						
ANR	5081424	Symbol	NULL		5081364						
ANR	5081425	Symbol	* request		5081364						
ANR	5081426	Symbol	m_request_list		5081364						
ANR	5081427	Symbol	true		5081364						
ANR	5081428	Symbol	false		5081364						
ANR	5081429	Symbol	m_request_list . Next		5081364						
ANR	5081430	Symbol	request -> m_reqid		5081364						
ANR	5081431	Function	IOProcess :: IOProcess	410:0:11424:11838							
ANR	5081432	FunctionDef	IOProcess :: IOProcess ()		5081431	0					
ANR	5081433	CompoundStatement		412:0:11484:11838	5081431	0					
ANR	5081434	ExpressionStatement	m_async_mode = false	413:1:11487:11507	5081431	0	True				
ANR	5081435	AssignmentExpression	m_async_mode = false		5081431	0		=			
ANR	5081436	Identifier	m_async_mode		5081431	0					
ANR	5081437	Identifier	false		5081431	1					
ANR	5081438	ExpressionStatement	m_new_results_signaled = false	414:1:11510:11540	5081431	1	True				
ANR	5081439	AssignmentExpression	m_new_results_signaled = false		5081431	0		=			
ANR	5081440	Identifier	m_new_results_signaled		5081431	0					
ANR	5081441	Identifier	false		5081431	1					
ANR	5081442	ExpressionStatement	m_min_workers = MIN_NUMBER_WORKERS	416:1:11545:11579	5081431	2	True				
ANR	5081443	AssignmentExpression	m_min_workers = MIN_NUMBER_WORKERS		5081431	0		=			
ANR	5081444	Identifier	m_min_workers		5081431	0					
ANR	5081445	Identifier	MIN_NUMBER_WORKERS		5081431	1					
ANR	5081446	ExpressionStatement	m_max_workers = - 1	417:1:11582:11600	5081431	3	True				
ANR	5081447	AssignmentExpression	m_max_workers = - 1		5081431	0		=			
ANR	5081448	Identifier	m_max_workers		5081431	0					
ANR	5081449	UnaryOperationExpression	- 1		5081431	1					
ANR	5081450	UnaryOperator	-		5081431	0					
ANR	5081451	PrimaryExpression	1		5081431	1					
ANR	5081452	ExpressionStatement	m_next_worker_id = 0	419:1:11604:11624	5081431	4	True				
ANR	5081453	AssignmentExpression	m_next_worker_id = 0		5081431	0		=			
ANR	5081454	Identifier	m_next_worker_id		5081431	0					
ANR	5081455	PrimaryExpression	0		5081431	1					
ANR	5081456	ExpressionStatement	m_rotated_worker_ids = false	420:1:11627:11655	5081431	5	True				
ANR	5081457	AssignmentExpression	m_rotated_worker_ids = false		5081431	0		=			
ANR	5081458	Identifier	m_rotated_worker_ids		5081431	0					
ANR	5081459	Identifier	false		5081431	1					
ANR	5081460	ExpressionStatement	m_avail_workers_num = 0	422:1:11659:11682	5081431	6	True				
ANR	5081461	AssignmentExpression	m_avail_workers_num = 0		5081431	0		=			
ANR	5081462	Identifier	m_avail_workers_num		5081431	0					
ANR	5081463	PrimaryExpression	0		5081431	1					
ANR	5081464	Identifier	IOProcess :: IOProcess		5081431	1					
ANR	5081465	ParameterList			5081431	2					
ANR	5081466	CFGEntryNode	ENTRY		5081431		True				
ANR	5081467	CFGExitNode	EXIT		5081431		True				
ANR	5081468	Symbol	m_new_results_signaled		5081431						
ANR	5081469	Symbol	m_rotated_worker_ids		5081431						
ANR	5081470	Symbol	m_min_workers		5081431						
ANR	5081471	Symbol	m_next_worker_id		5081431						
ANR	5081472	Symbol	m_async_mode		5081431						
ANR	5081473	Symbol	false		5081431						
ANR	5081474	Symbol	m_avail_workers_num		5081431						
ANR	5081475	Symbol	m_max_workers		5081431						
ANR	5081476	Symbol	MIN_NUMBER_WORKERS		5081431						
ANR	5081477	Function	IOProcess :: ~IOProcess	429:0:11841:12011							
ANR	5081478	FunctionDef	IOProcess :: ~IOProcess ()		5081477	0					
ANR	5081479	CompoundStatement		430:0:11865:12011	5081477	0					
ANR	5081480	Identifier	IOProcess :: ~IOProcess		5081477	1					
ANR	5081481	ParameterList			5081477	2					
ANR	5081482	CFGEntryNode	ENTRY		5081477		True				
ANR	5081483	CFGExitNode	EXIT		5081477		True				
ANR	5081484	Function	IOProcess :: startUp	436:0:12014:12459							
ANR	5081485	FunctionDef	"IOProcess :: startUp (int stdin_pipe , int min_workers , int max_workers)"		5081484	0					
ANR	5081486	CompoundStatement		438:0:12088:12459	5081484	0					
ANR	5081487	ExpressionStatement	m_min_workers = min_workers	439:1:12091:12118	5081484	0	True				
ANR	5081488	AssignmentExpression	m_min_workers = min_workers		5081484	0		=			
ANR	5081489	Identifier	m_min_workers		5081484	0					
ANR	5081490	Identifier	min_workers		5081484	1					
ANR	5081491	ExpressionStatement	m_max_workers = max_workers	440:1:12121:12148	5081484	1	True				
ANR	5081492	AssignmentExpression	m_max_workers = max_workers		5081484	0		=			
ANR	5081493	Identifier	m_max_workers		5081484	0					
ANR	5081494	Identifier	max_workers		5081484	1					
ANR	5081495	ExpressionStatement	m_stdin_buffer . setPipeEnd ( stdin_pipe )	441:1:12151:12188	5081484	2	True				
ANR	5081496	CallExpression	m_stdin_buffer . setPipeEnd ( stdin_pipe )		5081484	0					
ANR	5081497	Callee	m_stdin_buffer . setPipeEnd		5081484	0					
ANR	5081498	MemberAccess	m_stdin_buffer . setPipeEnd		5081484	0					
ANR	5081499	Identifier	m_stdin_buffer		5081484	0					
ANR	5081500	Identifier	setPipeEnd		5081484	1					
ANR	5081501	ArgumentList	stdin_pipe		5081484	1					
ANR	5081502	Argument	stdin_pipe		5081484	0					
ANR	5081503	Identifier	stdin_pipe		5081484	0					
ANR	5081504	IdentifierDeclStatement	int i = 0 ;	444:1:12228:12237	5081484	3	True				
ANR	5081505	IdentifierDecl	i = 0		5081484	0					
ANR	5081506	IdentifierDeclType	int		5081484	0					
ANR	5081507	Identifier	i		5081484	1					
ANR	5081508	AssignmentExpression	i = 0		5081484	2		=			
ANR	5081509	Identifier	i		5081484	0					
ANR	5081510	PrimaryExpression	0		5081484	1					
ANR	5081511	ForStatement	for ( i = 0 ; i < m_min_workers ; i ++ )		5081484	4					
ANR	5081512	ForInit	i = 0 ;	445:6:12245:12250	5081484	0	True				
ANR	5081513	AssignmentExpression	i = 0		5081484	0		=			
ANR	5081514	Identifier	i		5081484	0					
ANR	5081515	PrimaryExpression	0		5081484	1					
ANR	5081516	Condition	i < m_min_workers	445:13:12252:12268	5081484	1	True				
ANR	5081517	RelationalExpression	i < m_min_workers		5081484	0		<			
ANR	5081518	Identifier	i		5081484	0					
ANR	5081519	Identifier	m_min_workers		5081484	1					
ANR	5081520	PostIncDecOperationExpression	i ++	445:32:12271:12273	5081484	2	True				
ANR	5081521	Identifier	i		5081484	0					
ANR	5081522	IncDec	++		5081484	1					
ANR	5081523	CompoundStatement		8:38:188:188	5081484	3					
ANR	5081524	IfStatement	if ( createNewWorker ( ) == NULL )		5081484	0					
ANR	5081525	Condition	createNewWorker ( ) == NULL	446:6:12285:12309	5081484	0	True				
ANR	5081526	EqualityExpression	createNewWorker ( ) == NULL		5081484	0		==			
ANR	5081527	CallExpression	createNewWorker ( )		5081484	0					
ANR	5081528	Callee	createNewWorker		5081484	0					
ANR	5081529	Identifier	createNewWorker		5081484	0					
ANR	5081530	ArgumentList			5081484	1					
ANR	5081531	Identifier	NULL		5081484	1					
ANR	5081532	CompoundStatement		9:34:224:224	5081484	1					
ANR	5081533	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to create initial workers\\n"" )"	447:3:12318:12373	5081484	0	True				
ANR	5081534	CallExpression	"dprintf ( D_ALWAYS , ""Failed to create initial workers\\n"" )"		5081484	0					
ANR	5081535	Callee	dprintf		5081484	0					
ANR	5081536	Identifier	dprintf		5081484	0					
ANR	5081537	ArgumentList	D_ALWAYS		5081484	1					
ANR	5081538	Argument	D_ALWAYS		5081484	0					
ANR	5081539	Identifier	D_ALWAYS		5081484	0					
ANR	5081540	Argument	"""Failed to create initial workers\\n"""		5081484	1					
ANR	5081541	PrimaryExpression	"""Failed to create initial workers\\n"""		5081484	0					
ANR	5081542	ExpressionStatement	"dprintf ( D_ALWAYS , ""Exiting....\\n"" )"	448:3:12378:12412	5081484	1	True				
ANR	5081543	CallExpression	"dprintf ( D_ALWAYS , ""Exiting....\\n"" )"		5081484	0					
ANR	5081544	Callee	dprintf		5081484	0					
ANR	5081545	Identifier	dprintf		5081484	0					
ANR	5081546	ArgumentList	D_ALWAYS		5081484	1					
ANR	5081547	Argument	D_ALWAYS		5081484	0					
ANR	5081548	Identifier	D_ALWAYS		5081484	0					
ANR	5081549	Argument	"""Exiting....\\n"""		5081484	1					
ANR	5081550	PrimaryExpression	"""Exiting....\\n"""		5081484	0					
ANR	5081551	ExpressionStatement	io_process_exit ( 1 )	449:3:12417:12435	5081484	2	True				
ANR	5081552	CallExpression	io_process_exit ( 1 )		5081484	0					
ANR	5081553	Callee	io_process_exit		5081484	0					
ANR	5081554	Identifier	io_process_exit		5081484	0					
ANR	5081555	ArgumentList	1		5081484	1					
ANR	5081556	Argument	1		5081484	0					
ANR	5081557	PrimaryExpression	1		5081484	0					
ANR	5081558	ReturnStatement	return true ;	453:1:12446:12457	5081484	5	True				
ANR	5081559	Identifier	true		5081484	0					
ANR	5081560	ReturnType	bool		5081484	1					
ANR	5081561	Identifier	IOProcess :: startUp		5081484	2					
ANR	5081562	ParameterList	"int stdin_pipe , int min_workers , int max_workers"		5081484	3					
ANR	5081563	Parameter	int stdin_pipe	437:19:12038:12051	5081484	0	True				
ANR	5081564	ParameterType	int		5081484	0					
ANR	5081565	Identifier	stdin_pipe		5081484	1					
ANR	5081566	Parameter	int min_workers	437:35:12054:12068	5081484	1	True				
ANR	5081567	ParameterType	int		5081484	0					
ANR	5081568	Identifier	min_workers		5081484	1					
ANR	5081569	Parameter	int max_workers	437:52:12071:12085	5081484	2	True				
ANR	5081570	ParameterType	int		5081484	0					
ANR	5081571	Identifier	max_workers		5081484	1					
ANR	5081572	CFGEntryNode	ENTRY		5081484		True				
ANR	5081573	CFGExitNode	EXIT		5081484		True				
ANR	5081574	Symbol	m_stdin_buffer		5081484						
ANR	5081575	Symbol	m_min_workers		5081484						
ANR	5081576	Symbol	NULL		5081484						
ANR	5081577	Symbol	max_workers		5081484						
ANR	5081578	Symbol	createNewWorker		5081484						
ANR	5081579	Symbol	min_workers		5081484						
ANR	5081580	Symbol	D_ALWAYS		5081484						
ANR	5081581	Symbol	true		5081484						
ANR	5081582	Symbol	i		5081484						
ANR	5081583	Symbol	stdin_pipe		5081484						
ANR	5081584	Symbol	m_max_workers		5081484						
ANR	5081585	Function	IOProcess :: stdinPipeHandler	456:0:12462:15269							
ANR	5081586	FunctionDef	IOProcess :: stdinPipeHandler ()		5081585	0					
ANR	5081587	CompoundStatement		458:0:12497:15269	5081585	0					
ANR	5081588	IdentifierDeclStatement	std :: string * line ;	459:1:12500:12517	5081585	0	True				
ANR	5081589	IdentifierDecl	* line		5081585	0					
ANR	5081590	IdentifierDeclType	std :: string *		5081585	0					
ANR	5081591	Identifier	line		5081585	1					
ANR	5081592	WhileStatement	while ( ( line = m_stdin_buffer . GetNextLine ( ) ) != NULL )		5081585	1					
ANR	5081593	Condition	( line = m_stdin_buffer . GetNextLine ( ) ) != NULL	460:8:12527:12571	5081585	0	True				
ANR	5081594	EqualityExpression	( line = m_stdin_buffer . GetNextLine ( ) ) != NULL		5081585	0		!=			
ANR	5081595	AssignmentExpression	line = m_stdin_buffer . GetNextLine ( )		5081585	0		=			
ANR	5081596	Identifier	line		5081585	0					
ANR	5081597	CallExpression	m_stdin_buffer . GetNextLine ( )		5081585	1					
ANR	5081598	Callee	m_stdin_buffer . GetNextLine		5081585	0					
ANR	5081599	MemberAccess	m_stdin_buffer . GetNextLine		5081585	0					
ANR	5081600	Identifier	m_stdin_buffer		5081585	0					
ANR	5081601	Identifier	GetNextLine		5081585	1					
ANR	5081602	ArgumentList			5081585	1					
ANR	5081603	Identifier	NULL		5081585	1					
ANR	5081604	CompoundStatement		9:2:175:189	5081585	1					
ANR	5081605	IdentifierDeclStatement	const char * command = line -> c_str ( ) ;	462:2:12579:12614	5081585	0	True				
ANR	5081606	IdentifierDecl	* command = line -> c_str ( )		5081585	0					
ANR	5081607	IdentifierDeclType	const char *		5081585	0					
ANR	5081608	Identifier	command		5081585	1					
ANR	5081609	AssignmentExpression	* command = line -> c_str ( )		5081585	2		=			
ANR	5081610	Identifier	command		5081585	0					
ANR	5081611	CallExpression	line -> c_str ( )		5081585	1					
ANR	5081612	Callee	line -> c_str		5081585	0					
ANR	5081613	PtrMemberAccess	line -> c_str		5081585	0					
ANR	5081614	Identifier	line		5081585	0					
ANR	5081615	Identifier	c_str		5081585	1					
ANR	5081616	ArgumentList			5081585	1					
ANR	5081617	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""got stdin: %s\\n"" , command )"	464:2:12619:12668	5081585	1	True				
ANR	5081618	CallExpression	"dprintf ( D_FULLDEBUG , ""got stdin: %s\\n"" , command )"		5081585	0					
ANR	5081619	Callee	dprintf		5081585	0					
ANR	5081620	Identifier	dprintf		5081585	0					
ANR	5081621	ArgumentList	D_FULLDEBUG		5081585	1					
ANR	5081622	Argument	D_FULLDEBUG		5081585	0					
ANR	5081623	Identifier	D_FULLDEBUG		5081585	0					
ANR	5081624	Argument	"""got stdin: %s\\n"""		5081585	1					
ANR	5081625	PrimaryExpression	"""got stdin: %s\\n"""		5081585	0					
ANR	5081626	Argument	command		5081585	2					
ANR	5081627	Identifier	command		5081585	0					
ANR	5081628	IdentifierDeclStatement	Gahp_Args args ;	466:2:12673:12687	5081585	2	True				
ANR	5081629	IdentifierDecl	args		5081585	0					
ANR	5081630	IdentifierDeclType	Gahp_Args		5081585	0					
ANR	5081631	Identifier	args		5081585	1					
ANR	5081632	IfStatement	"if ( parse_gahp_command ( command , & args ) && verify_gahp_command ( args . argv , args . argc ) )"		5081585	3					
ANR	5081633	Condition	"parse_gahp_command ( command , & args ) && verify_gahp_command ( args . argv , args . argc )"	468:6:12696:12779	5081585	0	True				
ANR	5081634	AndExpression	"parse_gahp_command ( command , & args ) && verify_gahp_command ( args . argv , args . argc )"		5081585	0		&&			
ANR	5081635	CallExpression	"parse_gahp_command ( command , & args )"		5081585	0					
ANR	5081636	Callee	parse_gahp_command		5081585	0					
ANR	5081637	Identifier	parse_gahp_command		5081585	0					
ANR	5081638	ArgumentList	command		5081585	1					
ANR	5081639	Argument	command		5081585	0					
ANR	5081640	Identifier	command		5081585	0					
ANR	5081641	Argument	& args		5081585	1					
ANR	5081642	UnaryOperationExpression	& args		5081585	0					
ANR	5081643	UnaryOperator	&		5081585	0					
ANR	5081644	Identifier	args		5081585	1					
ANR	5081645	CallExpression	"verify_gahp_command ( args . argv , args . argc )"		5081585	1					
ANR	5081646	Callee	verify_gahp_command		5081585	0					
ANR	5081647	Identifier	verify_gahp_command		5081585	0					
ANR	5081648	ArgumentList	args . argv		5081585	1					
ANR	5081649	Argument	args . argv		5081585	0					
ANR	5081650	MemberAccess	args . argv		5081585	0					
ANR	5081651	Identifier	args		5081585	0					
ANR	5081652	Identifier	argv		5081585	1					
ANR	5081653	Argument	args . argc		5081585	1					
ANR	5081654	MemberAccess	args . argc		5081585	0					
ANR	5081655	Identifier	args		5081585	0					
ANR	5081656	Identifier	argc		5081585	1					
ANR	5081657	CompoundStatement		12:47:284:284	5081585	1					
ANR	5081658	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0 )"		5081585	0					
ANR	5081659	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0"	472:7:12829:12880	5081585	0	True				
ANR	5081660	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_RESULTS ) == 0"		5081585	0		==			
ANR	5081661	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_RESULTS )"		5081585	0					
ANR	5081662	Callee	strcasecmp		5081585	0					
ANR	5081663	Identifier	strcasecmp		5081585	0					
ANR	5081664	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081665	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081666	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081667	MemberAccess	args . argv		5081585	0					
ANR	5081668	Identifier	args		5081585	0					
ANR	5081669	Identifier	argv		5081585	1					
ANR	5081670	PrimaryExpression	0		5081585	1					
ANR	5081671	Argument	GAHP_COMMAND_RESULTS		5081585	1					
ANR	5081672	Identifier	GAHP_COMMAND_RESULTS		5081585	0					
ANR	5081673	PrimaryExpression	0		5081585	1					
ANR	5081674	CompoundStatement		27:4:635:652	5081585	1					
ANR	5081675	ExpressionStatement	"printf ( ""%s %d\\n"" , GAHP_RESULT_SUCCESS , numOfResult ( ) )"	479:4:13024:13077	5081585	0	True				
ANR	5081676	CallExpression	"printf ( ""%s %d\\n"" , GAHP_RESULT_SUCCESS , numOfResult ( ) )"		5081585	0					
ANR	5081677	Callee	printf		5081585	0					
ANR	5081678	Identifier	printf		5081585	0					
ANR	5081679	ArgumentList	"""%s %d\\n"""		5081585	1					
ANR	5081680	Argument	"""%s %d\\n"""		5081585	0					
ANR	5081681	PrimaryExpression	"""%s %d\\n"""		5081585	0					
ANR	5081682	Argument	GAHP_RESULT_SUCCESS		5081585	1					
ANR	5081683	Identifier	GAHP_RESULT_SUCCESS		5081585	0					
ANR	5081684	Argument	numOfResult ( )		5081585	2					
ANR	5081685	CallExpression	numOfResult ( )		5081585	0					
ANR	5081686	Callee	numOfResult		5081585	0					
ANR	5081687	Identifier	numOfResult		5081585	0					
ANR	5081688	ArgumentList			5081585	1					
ANR	5081689	ExpressionStatement	fflush ( stdout )	480:4:13083:13097	5081585	1	True				
ANR	5081690	CallExpression	fflush ( stdout )		5081585	0					
ANR	5081691	Callee	fflush		5081585	0					
ANR	5081692	Identifier	fflush		5081585	0					
ANR	5081693	ArgumentList	stdout		5081585	1					
ANR	5081694	Argument	stdout		5081585	0					
ANR	5081695	Identifier	stdout		5081585	0					
ANR	5081696	ExpressionStatement	startResultIteration ( )	482:4:13104:13126	5081585	2	True				
ANR	5081697	CallExpression	startResultIteration ( )		5081585	0					
ANR	5081698	Callee	startResultIteration		5081585	0					
ANR	5081699	Identifier	startResultIteration		5081585	0					
ANR	5081700	ArgumentList			5081585	1					
ANR	5081701	IdentifierDeclStatement	char * next = NULL ;	484:4:13133:13150	5081585	3	True				
ANR	5081702	IdentifierDecl	* next = NULL		5081585	0					
ANR	5081703	IdentifierDeclType	char *		5081585	0					
ANR	5081704	Identifier	next		5081585	1					
ANR	5081705	AssignmentExpression	* next = NULL		5081585	2		=			
ANR	5081706	Identifier	NULL		5081585	0					
ANR	5081707	Identifier	NULL		5081585	1					
ANR	5081708	WhileStatement	while ( ( next = NextResult ( ) ) != NULL )		5081585	4					
ANR	5081709	Condition	( next = NextResult ( ) ) != NULL	485:11:13163:13191	5081585	0	True				
ANR	5081710	EqualityExpression	( next = NextResult ( ) ) != NULL		5081585	0		!=			
ANR	5081711	AssignmentExpression	next = NextResult ( )		5081585	0		=			
ANR	5081712	Identifier	next		5081585	0					
ANR	5081713	CallExpression	NextResult ( )		5081585	1					
ANR	5081714	Callee	NextResult		5081585	0					
ANR	5081715	Identifier	NextResult		5081585	0					
ANR	5081716	ArgumentList			5081585	1					
ANR	5081717	Identifier	NULL		5081585	1					
ANR	5081718	CompoundStatement		28:42:696:696	5081585	1					
ANR	5081719	ExpressionStatement	"printf ( ""%s"" , next )"	486:5:13201:13220	5081585	0	True				
ANR	5081720	CallExpression	"printf ( ""%s"" , next )"		5081585	0					
ANR	5081721	Callee	printf		5081585	0					
ANR	5081722	Identifier	printf		5081585	0					
ANR	5081723	ArgumentList	"""%s"""		5081585	1					
ANR	5081724	Argument	"""%s"""		5081585	0					
ANR	5081725	PrimaryExpression	"""%s"""		5081585	0					
ANR	5081726	Argument	next		5081585	1					
ANR	5081727	Identifier	next		5081585	0					
ANR	5081728	ExpressionStatement	fflush ( stdout )	487:5:13227:13241	5081585	1	True				
ANR	5081729	CallExpression	fflush ( stdout )		5081585	0					
ANR	5081730	Callee	fflush		5081585	0					
ANR	5081731	Identifier	fflush		5081585	0					
ANR	5081732	ArgumentList	stdout		5081585	1					
ANR	5081733	Argument	stdout		5081585	0					
ANR	5081734	Identifier	stdout		5081585	0					
ANR	5081735	ExpressionStatement	deleteCurrentResult ( )	488:5:13248:13269	5081585	2	True				
ANR	5081736	CallExpression	deleteCurrentResult ( )		5081585	0					
ANR	5081737	Callee	deleteCurrentResult		5081585	0					
ANR	5081738	Identifier	deleteCurrentResult		5081585	0					
ANR	5081739	ArgumentList			5081585	1					
ANR	5081740	ExpressionStatement	m_new_results_signaled = false	490:4:13281:13311	5081585	5	True				
ANR	5081741	AssignmentExpression	m_new_results_signaled = false		5081585	0		=			
ANR	5081742	Identifier	m_new_results_signaled		5081585	0					
ANR	5081743	Identifier	false		5081585	1					
ANR	5081744	ElseStatement	else		5081585	0					
ANR	5081745	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0 )"		5081585	0					
ANR	5081746	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0"	495:14:13416:13467	5081585	0	True				
ANR	5081747	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_VERSION ) == 0"		5081585	0		==			
ANR	5081748	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_VERSION )"		5081585	0					
ANR	5081749	Callee	strcasecmp		5081585	0					
ANR	5081750	Identifier	strcasecmp		5081585	0					
ANR	5081751	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081752	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081753	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081754	MemberAccess	args . argv		5081585	0					
ANR	5081755	Identifier	args		5081585	0					
ANR	5081756	Identifier	argv		5081585	1					
ANR	5081757	PrimaryExpression	0		5081585	1					
ANR	5081758	Argument	GAHP_COMMAND_VERSION		5081585	1					
ANR	5081759	Identifier	GAHP_COMMAND_VERSION		5081585	0					
ANR	5081760	PrimaryExpression	0		5081585	1					
ANR	5081761	CompoundStatement		38:68:972:972	5081585	1					
ANR	5081762	ExpressionStatement	"printf ( ""S %s\\n"" , version )"	498:4:13506:13532	5081585	0	True				
ANR	5081763	CallExpression	"printf ( ""S %s\\n"" , version )"		5081585	0					
ANR	5081764	Callee	printf		5081585	0					
ANR	5081765	Identifier	printf		5081585	0					
ANR	5081766	ArgumentList	"""S %s\\n"""		5081585	1					
ANR	5081767	Argument	"""S %s\\n"""		5081585	0					
ANR	5081768	PrimaryExpression	"""S %s\\n"""		5081585	0					
ANR	5081769	Argument	version		5081585	1					
ANR	5081770	Identifier	version		5081585	0					
ANR	5081771	ExpressionStatement	fflush ( stdout )	499:4:13538:13553	5081585	1	True				
ANR	5081772	CallExpression	fflush ( stdout )		5081585	0					
ANR	5081773	Callee	fflush		5081585	0					
ANR	5081774	Identifier	fflush		5081585	0					
ANR	5081775	ArgumentList	stdout		5081585	1					
ANR	5081776	Argument	stdout		5081585	0					
ANR	5081777	Identifier	stdout		5081585	0					
ANR	5081778	ElseStatement	else		5081585	0					
ANR	5081779	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0 )"		5081585	0					
ANR	5081780	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0"	502:14:13601:13649	5081585	0	True				
ANR	5081781	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_QUIT ) == 0"		5081585	0		==			
ANR	5081782	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_QUIT )"		5081585	0					
ANR	5081783	Callee	strcasecmp		5081585	0					
ANR	5081784	Identifier	strcasecmp		5081585	0					
ANR	5081785	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081786	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081787	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081788	MemberAccess	args . argv		5081585	0					
ANR	5081789	Identifier	args		5081585	0					
ANR	5081790	Identifier	argv		5081585	1					
ANR	5081791	PrimaryExpression	0		5081585	1					
ANR	5081792	Argument	GAHP_COMMAND_QUIT		5081585	1					
ANR	5081793	Identifier	GAHP_COMMAND_QUIT		5081585	0					
ANR	5081794	PrimaryExpression	0		5081585	1					
ANR	5081795	CompoundStatement		45:65:1154:1154	5081585	1					
ANR	5081796	ExpressionStatement	gahp_output_return_success ( )	503:4:13658:13686	5081585	0	True				
ANR	5081797	CallExpression	gahp_output_return_success ( )		5081585	0					
ANR	5081798	Callee	gahp_output_return_success		5081585	0					
ANR	5081799	Identifier	gahp_output_return_success		5081585	0					
ANR	5081800	ArgumentList			5081585	1					
ANR	5081801	ExpressionStatement	io_process_exit ( 0 )	504:4:13692:13710	5081585	1	True				
ANR	5081802	CallExpression	io_process_exit ( 0 )		5081585	0					
ANR	5081803	Callee	io_process_exit		5081585	0					
ANR	5081804	Identifier	io_process_exit		5081585	0					
ANR	5081805	ArgumentList	0		5081585	1					
ANR	5081806	Argument	0		5081585	0					
ANR	5081807	PrimaryExpression	0		5081585	0					
ANR	5081808	ElseStatement	else		5081585	0					
ANR	5081809	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0 )"		5081585	0					
ANR	5081810	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0"	505:14:13726:13783	5081585	0	True				
ANR	5081811	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON ) == 0"		5081585	0		==			
ANR	5081812	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_ON )"		5081585	0					
ANR	5081813	Callee	strcasecmp		5081585	0					
ANR	5081814	Identifier	strcasecmp		5081585	0					
ANR	5081815	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081816	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081817	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081818	MemberAccess	args . argv		5081585	0					
ANR	5081819	Identifier	args		5081585	0					
ANR	5081820	Identifier	argv		5081585	1					
ANR	5081821	PrimaryExpression	0		5081585	1					
ANR	5081822	Argument	GAHP_COMMAND_ASYNC_MODE_ON		5081585	1					
ANR	5081823	Identifier	GAHP_COMMAND_ASYNC_MODE_ON		5081585	0					
ANR	5081824	PrimaryExpression	0		5081585	1					
ANR	5081825	CompoundStatement		48:74:1288:1288	5081585	1					
ANR	5081826	ExpressionStatement	m_async_mode = true	506:4:13792:13811	5081585	0	True				
ANR	5081827	AssignmentExpression	m_async_mode = true		5081585	0		=			
ANR	5081828	Identifier	m_async_mode		5081585	0					
ANR	5081829	Identifier	true		5081585	1					
ANR	5081830	ExpressionStatement	m_new_results_signaled = false	507:4:13817:13847	5081585	1	True				
ANR	5081831	AssignmentExpression	m_new_results_signaled = false		5081585	0		=			
ANR	5081832	Identifier	m_new_results_signaled		5081585	0					
ANR	5081833	Identifier	false		5081585	1					
ANR	5081834	ExpressionStatement	gahp_output_return_success ( )	508:4:13853:13881	5081585	2	True				
ANR	5081835	CallExpression	gahp_output_return_success ( )		5081585	0					
ANR	5081836	Callee	gahp_output_return_success		5081585	0					
ANR	5081837	Identifier	gahp_output_return_success		5081585	0					
ANR	5081838	ArgumentList			5081585	1					
ANR	5081839	ElseStatement	else		5081585	0					
ANR	5081840	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0 )"		5081585	0					
ANR	5081841	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"	509:14:13897:13955	5081585	0	True				
ANR	5081842	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF ) == 0"		5081585	0		==			
ANR	5081843	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_ASYNC_MODE_OFF )"		5081585	0					
ANR	5081844	Callee	strcasecmp		5081585	0					
ANR	5081845	Identifier	strcasecmp		5081585	0					
ANR	5081846	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081847	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081848	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081849	MemberAccess	args . argv		5081585	0					
ANR	5081850	Identifier	args		5081585	0					
ANR	5081851	Identifier	argv		5081585	1					
ANR	5081852	PrimaryExpression	0		5081585	1					
ANR	5081853	Argument	GAHP_COMMAND_ASYNC_MODE_OFF		5081585	1					
ANR	5081854	Identifier	GAHP_COMMAND_ASYNC_MODE_OFF		5081585	0					
ANR	5081855	PrimaryExpression	0		5081585	1					
ANR	5081856	CompoundStatement		52:75:1460:1460	5081585	1					
ANR	5081857	ExpressionStatement	m_async_mode = false	510:4:13964:13984	5081585	0	True				
ANR	5081858	AssignmentExpression	m_async_mode = false		5081585	0		=			
ANR	5081859	Identifier	m_async_mode		5081585	0					
ANR	5081860	Identifier	false		5081585	1					
ANR	5081861	ExpressionStatement	gahp_output_return_success ( )	511:4:13990:14018	5081585	1	True				
ANR	5081862	CallExpression	gahp_output_return_success ( )		5081585	0					
ANR	5081863	Callee	gahp_output_return_success		5081585	0					
ANR	5081864	Identifier	gahp_output_return_success		5081585	0					
ANR	5081865	ArgumentList			5081585	1					
ANR	5081866	ElseStatement	else		5081585	0					
ANR	5081867	IfStatement	"if ( strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0 )"		5081585	0					
ANR	5081868	Condition	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0"	512:14:14034:14086	5081585	0	True				
ANR	5081869	EqualityExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_COMMANDS ) == 0"		5081585	0		==			
ANR	5081870	CallExpression	"strcasecmp ( args . argv [ 0 ] , GAHP_COMMAND_COMMANDS )"		5081585	0					
ANR	5081871	Callee	strcasecmp		5081585	0					
ANR	5081872	Identifier	strcasecmp		5081585	0					
ANR	5081873	ArgumentList	args . argv [ 0 ]		5081585	1					
ANR	5081874	Argument	args . argv [ 0 ]		5081585	0					
ANR	5081875	ArrayIndexing	args . argv [ 0 ]		5081585	0					
ANR	5081876	MemberAccess	args . argv		5081585	0					
ANR	5081877	Identifier	args		5081585	0					
ANR	5081878	Identifier	argv		5081585	1					
ANR	5081879	PrimaryExpression	0		5081585	1					
ANR	5081880	Argument	GAHP_COMMAND_COMMANDS		5081585	1					
ANR	5081881	Identifier	GAHP_COMMAND_COMMANDS		5081585	0					
ANR	5081882	PrimaryExpression	0		5081585	1					
ANR	5081883	CompoundStatement		73:4:2125:2156	5081585	1					
ANR	5081884	IdentifierDeclStatement	StringList amazon_commands ;	513:4:14095:14121	5081585	0	True				
ANR	5081885	IdentifierDecl	amazon_commands		5081585	0					
ANR	5081886	IdentifierDeclType	StringList		5081585	0					
ANR	5081887	Identifier	amazon_commands		5081585	1					
ANR	5081888	IdentifierDeclStatement	int num_commands = 0 ;	514:4:14127:14147	5081585	1	True				
ANR	5081889	IdentifierDecl	num_commands = 0		5081585	0					
ANR	5081890	IdentifierDeclType	int		5081585	0					
ANR	5081891	Identifier	num_commands		5081585	1					
ANR	5081892	AssignmentExpression	num_commands = 0		5081585	2		=			
ANR	5081893	Identifier	num_commands		5081585	0					
ANR	5081894	PrimaryExpression	0		5081585	1					
ANR	5081895	ExpressionStatement	num_commands = allAmazonCommands ( amazon_commands )	516:4:14154:14203	5081585	2	True				
ANR	5081896	AssignmentExpression	num_commands = allAmazonCommands ( amazon_commands )		5081585	0		=			
ANR	5081897	Identifier	num_commands		5081585	0					
ANR	5081898	CallExpression	allAmazonCommands ( amazon_commands )		5081585	1					
ANR	5081899	Callee	allAmazonCommands		5081585	0					
ANR	5081900	Identifier	allAmazonCommands		5081585	0					
ANR	5081901	ArgumentList	amazon_commands		5081585	1					
ANR	5081902	Argument	amazon_commands		5081585	0					
ANR	5081903	Identifier	amazon_commands		5081585	0					
ANR	5081904	ExpressionStatement	num_commands += 7	517:4:14209:14226	5081585	3	True				
ANR	5081905	AssignmentExpression	num_commands += 7		5081585	0		+=			
ANR	5081906	Identifier	num_commands		5081585	0					
ANR	5081907	PrimaryExpression	7		5081585	1					
ANR	5081908	IdentifierDeclStatement	const char * commands [ num_commands ] ;	519:4:14233:14267	5081585	4	True				
ANR	5081909	IdentifierDecl	* commands [ num_commands ]		5081585	0					
ANR	5081910	IdentifierDeclType	const char * [ num_commands ]		5081585	0					
ANR	5081911	Identifier	commands		5081585	1					
ANR	5081912	Identifier	num_commands		5081585	2					
ANR	5081913	IdentifierDeclStatement	int i = 0 ;	520:4:14273:14282	5081585	5	True				
ANR	5081914	IdentifierDecl	i = 0		5081585	0					
ANR	5081915	IdentifierDeclType	int		5081585	0					
ANR	5081916	Identifier	i		5081585	1					
ANR	5081917	AssignmentExpression	i = 0		5081585	2		=			
ANR	5081918	Identifier	i		5081585	0					
ANR	5081919	PrimaryExpression	0		5081585	1					
ANR	5081920	ExpressionStatement	commands [ i ++ ] = GAHP_RESULT_SUCCESS	521:4:14288:14323	5081585	6	True				
ANR	5081921	AssignmentExpression	commands [ i ++ ] = GAHP_RESULT_SUCCESS		5081585	0		=			
ANR	5081922	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081923	Identifier	commands		5081585	0					
ANR	5081924	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081925	Identifier	i		5081585	0					
ANR	5081926	IncDec	++		5081585	1					
ANR	5081927	Identifier	GAHP_RESULT_SUCCESS		5081585	1					
ANR	5081928	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_ASYNC_MODE_ON	522:4:14329:14371	5081585	7	True				
ANR	5081929	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_ASYNC_MODE_ON		5081585	0		=			
ANR	5081930	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081931	Identifier	commands		5081585	0					
ANR	5081932	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081933	Identifier	i		5081585	0					
ANR	5081934	IncDec	++		5081585	1					
ANR	5081935	Identifier	GAHP_COMMAND_ASYNC_MODE_ON		5081585	1					
ANR	5081936	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_ASYNC_MODE_OFF	523:4:14377:14420	5081585	8	True				
ANR	5081937	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_ASYNC_MODE_OFF		5081585	0		=			
ANR	5081938	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081939	Identifier	commands		5081585	0					
ANR	5081940	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081941	Identifier	i		5081585	0					
ANR	5081942	IncDec	++		5081585	1					
ANR	5081943	Identifier	GAHP_COMMAND_ASYNC_MODE_OFF		5081585	1					
ANR	5081944	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_RESULTS	524:4:14426:14462	5081585	9	True				
ANR	5081945	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_RESULTS		5081585	0		=			
ANR	5081946	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081947	Identifier	commands		5081585	0					
ANR	5081948	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081949	Identifier	i		5081585	0					
ANR	5081950	IncDec	++		5081585	1					
ANR	5081951	Identifier	GAHP_COMMAND_RESULTS		5081585	1					
ANR	5081952	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_QUIT	525:4:14468:14501	5081585	10	True				
ANR	5081953	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_QUIT		5081585	0		=			
ANR	5081954	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081955	Identifier	commands		5081585	0					
ANR	5081956	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081957	Identifier	i		5081585	0					
ANR	5081958	IncDec	++		5081585	1					
ANR	5081959	Identifier	GAHP_COMMAND_QUIT		5081585	1					
ANR	5081960	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_VERSION	526:4:14507:14543	5081585	11	True				
ANR	5081961	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_VERSION		5081585	0		=			
ANR	5081962	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081963	Identifier	commands		5081585	0					
ANR	5081964	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081965	Identifier	i		5081585	0					
ANR	5081966	IncDec	++		5081585	1					
ANR	5081967	Identifier	GAHP_COMMAND_VERSION		5081585	1					
ANR	5081968	ExpressionStatement	commands [ i ++ ] = GAHP_COMMAND_COMMANDS	527:4:14549:14586	5081585	12	True				
ANR	5081969	AssignmentExpression	commands [ i ++ ] = GAHP_COMMAND_COMMANDS		5081585	0		=			
ANR	5081970	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5081971	Identifier	commands		5081585	0					
ANR	5081972	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5081973	Identifier	i		5081585	0					
ANR	5081974	IncDec	++		5081585	1					
ANR	5081975	Identifier	GAHP_COMMAND_COMMANDS		5081585	1					
ANR	5081976	ExpressionStatement	amazon_commands . rewind ( )	529:4:14593:14617	5081585	13	True				
ANR	5081977	CallExpression	amazon_commands . rewind ( )		5081585	0					
ANR	5081978	Callee	amazon_commands . rewind		5081585	0					
ANR	5081979	MemberAccess	amazon_commands . rewind		5081585	0					
ANR	5081980	Identifier	amazon_commands		5081585	0					
ANR	5081981	Identifier	rewind		5081585	1					
ANR	5081982	ArgumentList			5081585	1					
ANR	5081983	IdentifierDeclStatement	char * one_amazon_command = NULL ;	530:4:14623:14654	5081585	14	True				
ANR	5081984	IdentifierDecl	* one_amazon_command = NULL		5081585	0					
ANR	5081985	IdentifierDeclType	char *		5081585	0					
ANR	5081986	Identifier	one_amazon_command		5081585	1					
ANR	5081987	AssignmentExpression	* one_amazon_command = NULL		5081585	2		=			
ANR	5081988	Identifier	NULL		5081585	0					
ANR	5081989	Identifier	NULL		5081585	1					
ANR	5081990	WhileStatement	while ( ( one_amazon_command = amazon_commands . next ( ) ) != NULL )		5081585	15					
ANR	5081991	Condition	( one_amazon_command = amazon_commands . next ( ) ) != NULL	532:11:14668:14721	5081585	0	True				
ANR	5081992	EqualityExpression	( one_amazon_command = amazon_commands . next ( ) ) != NULL		5081585	0		!=			
ANR	5081993	AssignmentExpression	one_amazon_command = amazon_commands . next ( )		5081585	0		=			
ANR	5081994	Identifier	one_amazon_command		5081585	0					
ANR	5081995	CallExpression	amazon_commands . next ( )		5081585	1					
ANR	5081996	Callee	amazon_commands . next		5081585	0					
ANR	5081997	MemberAccess	amazon_commands . next		5081585	0					
ANR	5081998	Identifier	amazon_commands		5081585	0					
ANR	5081999	Identifier	next		5081585	1					
ANR	5082000	ArgumentList			5081585	1					
ANR	5082001	Identifier	NULL		5081585	1					
ANR	5082002	CompoundStatement		75:68:2227:2227	5081585	1					
ANR	5082003	ExpressionStatement	commands [ i ++ ] = one_amazon_command	533:5:14732:14766	5081585	0	True				
ANR	5082004	AssignmentExpression	commands [ i ++ ] = one_amazon_command		5081585	0		=			
ANR	5082005	ArrayIndexing	commands [ i ++ ]		5081585	0					
ANR	5082006	Identifier	commands		5081585	0					
ANR	5082007	PostIncDecOperationExpression	i ++		5081585	1					
ANR	5082008	Identifier	i		5081585	0					
ANR	5082009	IncDec	++		5081585	1					
ANR	5082010	Identifier	one_amazon_command		5081585	1					
ANR	5082011	ExpressionStatement	"gahp_output_return ( commands , i )"	536:4:14779:14811	5081585	16	True				
ANR	5082012	CallExpression	"gahp_output_return ( commands , i )"		5081585	0					
ANR	5082013	Callee	gahp_output_return		5081585	0					
ANR	5082014	Identifier	gahp_output_return		5081585	0					
ANR	5082015	ArgumentList	commands		5081585	1					
ANR	5082016	Argument	commands		5081585	0					
ANR	5082017	Identifier	commands		5081585	0					
ANR	5082018	Argument	i		5081585	1					
ANR	5082019	Identifier	i		5081585	0					
ANR	5082020	ElseStatement	else		5081585	0					
ANR	5082021	CompoundStatement		80:10:2325:2325	5081585	0					
ANR	5082022	IfStatement	if ( ! addNewRequest ( command ) )		5081585	0					
ANR	5082023	Condition	! addNewRequest ( command )	539:8:14856:14878	5081585	0	True				
ANR	5082024	UnaryOperationExpression	! addNewRequest ( command )		5081585	0					
ANR	5082025	UnaryOperator	!		5081585	0					
ANR	5082026	CallExpression	addNewRequest ( command )		5081585	1					
ANR	5082027	Callee	addNewRequest		5081585	0					
ANR	5082028	Identifier	addNewRequest		5081585	0					
ANR	5082029	ArgumentList	command		5081585	1					
ANR	5082030	Argument	command		5081585	0					
ANR	5082031	Identifier	command		5081585	0					
ANR	5082032	CompoundStatement		82:34:2384:2384	5081585	1					
ANR	5082033	ExpressionStatement	gahp_output_return_error ( )	540:5:14889:14915	5081585	0	True				
ANR	5082034	CallExpression	gahp_output_return_error ( )		5081585	0					
ANR	5082035	Callee	gahp_output_return_error		5081585	0					
ANR	5082036	Identifier	gahp_output_return_error		5081585	0					
ANR	5082037	ArgumentList			5081585	1					
ANR	5082038	ElseStatement	else		5081585	0					
ANR	5082039	CompoundStatement		84:10:2429:2429	5081585	0					
ANR	5082040	ExpressionStatement	gahp_output_return_success ( )	542:5:14934:14962	5081585	0	True				
ANR	5082041	CallExpression	gahp_output_return_success ( )		5081585	0					
ANR	5082042	Callee	gahp_output_return_success		5081585	0					
ANR	5082043	Identifier	gahp_output_return_success		5081585	0					
ANR	5082044	ArgumentList			5081585	1					
ANR	5082045	ElseStatement	else		5081585	0					
ANR	5082046	CompoundStatement		89:9:2491:2491	5081585	0					
ANR	5082047	ExpressionStatement	gahp_output_return_error ( )	547:3:14994:15020	5081585	0	True				
ANR	5082048	CallExpression	gahp_output_return_error ( )		5081585	0					
ANR	5082049	Callee	gahp_output_return_error		5081585	0					
ANR	5082050	Identifier	gahp_output_return_error		5081585	0					
ANR	5082051	ArgumentList			5081585	1					
ANR	5082052	Statement	delete	550:2:15029:15034	5081585	4	True				
ANR	5082053	ExpressionStatement	line	550:9:15036:15040	5081585	5	True				
ANR	5082054	Identifier	line		5081585	0					
ANR	5082055	IfStatement	if ( m_stdin_buffer . IsError ( ) || m_stdin_buffer . IsEOF ( ) )		5081585	2					
ANR	5082056	Condition	m_stdin_buffer . IsError ( ) || m_stdin_buffer . IsEOF ( )	554:5:15119:15168	5081585	0	True				
ANR	5082057	OrExpression	m_stdin_buffer . IsError ( ) || m_stdin_buffer . IsEOF ( )		5081585	0		||			
ANR	5082058	CallExpression	m_stdin_buffer . IsError ( )		5081585	0					
ANR	5082059	Callee	m_stdin_buffer . IsError		5081585	0					
ANR	5082060	MemberAccess	m_stdin_buffer . IsError		5081585	0					
ANR	5082061	Identifier	m_stdin_buffer		5081585	0					
ANR	5082062	Identifier	IsError		5081585	1					
ANR	5082063	ArgumentList			5081585	1					
ANR	5082064	CallExpression	m_stdin_buffer . IsEOF ( )		5081585	1					
ANR	5082065	Callee	m_stdin_buffer . IsEOF		5081585	0					
ANR	5082066	MemberAccess	m_stdin_buffer . IsEOF		5081585	0					
ANR	5082067	Identifier	m_stdin_buffer		5081585	0					
ANR	5082068	Identifier	IsEOF		5081585	1					
ANR	5082069	ArgumentList			5081585	1					
ANR	5082070	CompoundStatement		97:57:2673:2673	5081585	1					
ANR	5082071	ExpressionStatement	"dprintf ( D_ALWAYS , ""stdin buffer closed, exiting\\n"" )"	555:2:15175:15227	5081585	0	True				
ANR	5082072	CallExpression	"dprintf ( D_ALWAYS , ""stdin buffer closed, exiting\\n"" )"		5081585	0					
ANR	5082073	Callee	dprintf		5081585	0					
ANR	5082074	Identifier	dprintf		5081585	0					
ANR	5082075	ArgumentList	D_ALWAYS		5081585	1					
ANR	5082076	Argument	D_ALWAYS		5081585	0					
ANR	5082077	Identifier	D_ALWAYS		5081585	0					
ANR	5082078	Argument	"""stdin buffer closed, exiting\\n"""		5081585	1					
ANR	5082079	PrimaryExpression	"""stdin buffer closed, exiting\\n"""		5081585	0					
ANR	5082080	ExpressionStatement	io_process_exit ( 1 )	556:2:15231:15249	5081585	1	True				
ANR	5082081	CallExpression	io_process_exit ( 1 )		5081585	0					
ANR	5082082	Callee	io_process_exit		5081585	0					
ANR	5082083	Identifier	io_process_exit		5081585	0					
ANR	5082084	ArgumentList	1		5081585	1					
ANR	5082085	Argument	1		5081585	0					
ANR	5082086	PrimaryExpression	1		5081585	0					
ANR	5082087	ReturnStatement	return TRUE ;	559:1:15256:15267	5081585	3	True				
ANR	5082088	Identifier	TRUE		5081585	0					
ANR	5082089	ReturnType	int		5081585	1					
ANR	5082090	Identifier	IOProcess :: stdinPipeHandler		5081585	2					
ANR	5082091	ParameterList			5081585	3					
ANR	5082092	CFGEntryNode	ENTRY		5081585		True				
ANR	5082093	CFGExitNode	EXIT		5081585		True				
ANR	5082094	Symbol	next		5081585						
ANR	5082095	Symbol	stdout		5081585						
ANR	5082096	Symbol	one_amazon_command		5081585						
ANR	5082097	Symbol	line		5081585						
ANR	5082098	Symbol	parse_gahp_command		5081585						
ANR	5082099	Symbol	* args . argv		5081585						
ANR	5082100	Symbol	* line		5081585						
ANR	5082101	Symbol	* commands		5081585						
ANR	5082102	Symbol	* args		5081585						
ANR	5082103	Symbol	GAHP_COMMAND_VERSION		5081585						
ANR	5082104	Symbol	line -> c_str		5081585						
ANR	5082105	Symbol	m_async_mode		5081585						
ANR	5082106	Symbol	numOfResult		5081585						
ANR	5082107	Symbol	GAHP_COMMAND_ASYNC_MODE_OFF		5081585						
ANR	5082108	Symbol	GAHP_COMMAND_RESULTS		5081585						
ANR	5082109	Symbol	strcasecmp		5081585						
ANR	5082110	Symbol	commands		5081585						
ANR	5082111	Symbol	m_stdin_buffer . IsError		5081585						
ANR	5082112	Symbol	& args		5081585						
ANR	5082113	Symbol	args . argc		5081585						
ANR	5082114	Symbol	m_stdin_buffer		5081585						
ANR	5082115	Symbol	NextResult		5081585						
ANR	5082116	Symbol	m_new_results_signaled		5081585						
ANR	5082117	Symbol	NULL		5081585						
ANR	5082118	Symbol	allAmazonCommands		5081585						
ANR	5082119	Symbol	addNewRequest		5081585						
ANR	5082120	Symbol	GAHP_COMMAND_QUIT		5081585						
ANR	5082121	Symbol	GAHP_COMMAND_ASYNC_MODE_ON		5081585						
ANR	5082122	Symbol	GAHP_COMMAND_COMMANDS		5081585						
ANR	5082123	Symbol	false		5081585						
ANR	5082124	Symbol	D_ALWAYS		5081585						
ANR	5082125	Symbol	i		5081585						
ANR	5082126	Symbol	TRUE		5081585						
ANR	5082127	Symbol	D_FULLDEBUG		5081585						
ANR	5082128	Symbol	version		5081585						
ANR	5082129	Symbol	command		5081585						
ANR	5082130	Symbol	args		5081585						
ANR	5082131	Symbol	amazon_commands		5081585						
ANR	5082132	Symbol	m_stdin_buffer . IsEOF		5081585						
ANR	5082133	Symbol	args . argv		5081585						
ANR	5082134	Symbol	GAHP_RESULT_SUCCESS		5081585						
ANR	5082135	Symbol	true		5081585						
ANR	5082136	Symbol	verify_gahp_command		5081585						
ANR	5082137	Symbol	num_commands		5081585						
ANR	5082138	Symbol	amazon_commands . next		5081585						
ANR	5082139	Symbol	m_stdin_buffer . GetNextLine		5081585						
ANR	5082140	Function	IOProcess :: createNewWorker	562:0:15272:16085							
ANR	5082141	FunctionDef	IOProcess :: createNewWorker ()		5082140	0					
ANR	5082142	CompoundStatement		564:0:15313:16085	5082140	0					
ANR	5082143	IdentifierDeclStatement	Worker * new_worker = NULL ;	565:1:15316:15341	5082140	0	True				
ANR	5082144	IdentifierDecl	* new_worker = NULL		5082140	0					
ANR	5082145	IdentifierDeclType	Worker *		5082140	0					
ANR	5082146	Identifier	new_worker		5082140	1					
ANR	5082147	AssignmentExpression	* new_worker = NULL		5082140	2		=			
ANR	5082148	Identifier	NULL		5082140	0					
ANR	5082149	Identifier	NULL		5082140	1					
ANR	5082150	ExpressionStatement	new_worker = new Worker ( newWorkerId ( ) )	566:1:15344:15382	5082140	1	True				
ANR	5082151	AssignmentExpression	new_worker = new Worker ( newWorkerId ( ) )		5082140	0		=			
ANR	5082152	Identifier	new_worker		5082140	0					
ANR	5082153	CallExpression	newWorkerId ( )		5082140	1					
ANR	5082154	Callee	newWorkerId		5082140	0					
ANR	5082155	Identifier	newWorkerId		5082140	0					
ANR	5082156	ArgumentList			5082140	1					
ANR	5082157	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""About to start a new thread\\n"" )"	568:1:15386:15440	5082140	2	True				
ANR	5082158	CallExpression	"dprintf ( D_FULLDEBUG , ""About to start a new thread\\n"" )"		5082140	0					
ANR	5082159	Callee	dprintf		5082140	0					
ANR	5082160	Identifier	dprintf		5082140	0					
ANR	5082161	ArgumentList	D_FULLDEBUG		5082140	1					
ANR	5082162	Argument	D_FULLDEBUG		5082140	0					
ANR	5082163	Identifier	D_FULLDEBUG		5082140	0					
ANR	5082164	Argument	"""About to start a new thread\\n"""		5082140	1					
ANR	5082165	PrimaryExpression	"""About to start a new thread\\n"""		5082140	0					
ANR	5082166	ExpressionStatement	new_worker -> m_can_use = true	571:1:15477:15505	5082140	3	True				
ANR	5082167	AssignmentExpression	new_worker -> m_can_use = true		5082140	0		=			
ANR	5082168	PtrMemberAccess	new_worker -> m_can_use		5082140	0					
ANR	5082169	Identifier	new_worker		5082140	0					
ANR	5082170	Identifier	m_can_use		5082140	1					
ANR	5082171	Identifier	true		5082140	1					
ANR	5082172	IdentifierDeclStatement	pthread_t thread ;	574:1:15529:15545	5082140	4	True				
ANR	5082173	IdentifierDecl	thread		5082140	0					
ANR	5082174	IdentifierDeclType	pthread_t		5082140	0					
ANR	5082175	Identifier	thread		5082140	1					
ANR	5082176	IfStatement	"if ( pthread_create ( & thread , NULL , worker_function , ( void * ) new_worker ) != 0 )"		5082140	5					
ANR	5082177	Condition	"pthread_create ( & thread , NULL , worker_function , ( void * ) new_worker ) != 0"	575:5:15552:15628	5082140	0	True				
ANR	5082178	EqualityExpression	"pthread_create ( & thread , NULL , worker_function , ( void * ) new_worker ) != 0"		5082140	0		!=			
ANR	5082179	CallExpression	"pthread_create ( & thread , NULL , worker_function , ( void * ) new_worker )"		5082140	0					
ANR	5082180	Callee	pthread_create		5082140	0					
ANR	5082181	Identifier	pthread_create		5082140	0					
ANR	5082182	ArgumentList	& thread		5082140	1					
ANR	5082183	Argument	& thread		5082140	0					
ANR	5082184	UnaryOperationExpression	& thread		5082140	0					
ANR	5082185	UnaryOperator	&		5082140	0					
ANR	5082186	Identifier	thread		5082140	1					
ANR	5082187	Argument	NULL		5082140	1					
ANR	5082188	Identifier	NULL		5082140	0					
ANR	5082189	Argument	worker_function		5082140	2					
ANR	5082190	Identifier	worker_function		5082140	0					
ANR	5082191	Argument	( void * ) new_worker		5082140	3					
ANR	5082192	CastExpression	( void * ) new_worker		5082140	0					
ANR	5082193	CastTarget	void *		5082140	0					
ANR	5082194	Identifier	new_worker		5082140	1					
ANR	5082195	PrimaryExpression	0		5082140	1					
ANR	5082196	CompoundStatement		13:49:318:318	5082140	1					
ANR	5082197	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to create a new thread\\n"" )"	577:2:15636:15688	5082140	0	True				
ANR	5082198	CallExpression	"dprintf ( D_ALWAYS , ""Failed to create a new thread\\n"" )"		5082140	0					
ANR	5082199	Callee	dprintf		5082140	0					
ANR	5082200	Identifier	dprintf		5082140	0					
ANR	5082201	ArgumentList	D_ALWAYS		5082140	1					
ANR	5082202	Argument	D_ALWAYS		5082140	0					
ANR	5082203	Identifier	D_ALWAYS		5082140	0					
ANR	5082204	Argument	"""Failed to create a new thread\\n"""		5082140	1					
ANR	5082205	PrimaryExpression	"""Failed to create a new thread\\n"""		5082140	0					
ANR	5082206	Statement	delete	579:2:15693:15698	5082140	1	True				
ANR	5082207	ExpressionStatement	new_worker	579:9:15700:15710	5082140	2	True				
ANR	5082208	Identifier	new_worker		5082140	0					
ANR	5082209	ReturnStatement	return NULL ;	580:2:15714:15725	5082140	3	True				
ANR	5082210	Identifier	NULL		5082140	0					
ANR	5082211	ExpressionStatement	pthread_detach ( thread )	584:1:15756:15778	5082140	6	True				
ANR	5082212	CallExpression	pthread_detach ( thread )		5082140	0					
ANR	5082213	Callee	pthread_detach		5082140	0					
ANR	5082214	Identifier	pthread_detach		5082140	0					
ANR	5082215	ArgumentList	thread		5082140	1					
ANR	5082216	Argument	thread		5082140	0					
ANR	5082217	Identifier	thread		5082140	0					
ANR	5082218	ExpressionStatement	"m_workers_list . insert ( new_worker -> m_id , new_worker )"	588:1:15864:15915	5082140	7	True				
ANR	5082219	CallExpression	"m_workers_list . insert ( new_worker -> m_id , new_worker )"		5082140	0					
ANR	5082220	Callee	m_workers_list . insert		5082140	0					
ANR	5082221	MemberAccess	m_workers_list . insert		5082140	0					
ANR	5082222	Identifier	m_workers_list		5082140	0					
ANR	5082223	Identifier	insert		5082140	1					
ANR	5082224	ArgumentList	new_worker -> m_id		5082140	1					
ANR	5082225	Argument	new_worker -> m_id		5082140	0					
ANR	5082226	PtrMemberAccess	new_worker -> m_id		5082140	0					
ANR	5082227	Identifier	new_worker		5082140	0					
ANR	5082228	Identifier	m_id		5082140	1					
ANR	5082229	Argument	new_worker		5082140	1					
ANR	5082230	Identifier	new_worker		5082140	0					
ANR	5082231	ExpressionStatement	m_avail_workers_num ++	589:1:15918:15939	5082140	8	True				
ANR	5082232	PostIncDecOperationExpression	m_avail_workers_num ++		5082140	0					
ANR	5082233	Identifier	m_avail_workers_num		5082140	0					
ANR	5082234	IncDec	++		5082140	1					
ANR	5082235	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""New Worker[id=%d] is created!\\n"" , new_worker -> m_id )"	592:1:15990:16063	5082140	9	True				
ANR	5082236	CallExpression	"dprintf ( D_FULLDEBUG , ""New Worker[id=%d] is created!\\n"" , new_worker -> m_id )"		5082140	0					
ANR	5082237	Callee	dprintf		5082140	0					
ANR	5082238	Identifier	dprintf		5082140	0					
ANR	5082239	ArgumentList	D_FULLDEBUG		5082140	1					
ANR	5082240	Argument	D_FULLDEBUG		5082140	0					
ANR	5082241	Identifier	D_FULLDEBUG		5082140	0					
ANR	5082242	Argument	"""New Worker[id=%d] is created!\\n"""		5082140	1					
ANR	5082243	PrimaryExpression	"""New Worker[id=%d] is created!\\n"""		5082140	0					
ANR	5082244	Argument	new_worker -> m_id		5082140	2					
ANR	5082245	PtrMemberAccess	new_worker -> m_id		5082140	0					
ANR	5082246	Identifier	new_worker		5082140	0					
ANR	5082247	Identifier	m_id		5082140	1					
ANR	5082248	ReturnStatement	return new_worker ;	593:1:16066:16083	5082140	10	True				
ANR	5082249	Identifier	new_worker		5082140	0					
ANR	5082250	ReturnType	Worker *		5082140	1					
ANR	5082251	Identifier	IOProcess :: createNewWorker		5082140	2					
ANR	5082252	ParameterList			5082140	3					
ANR	5082253	CFGEntryNode	ENTRY		5082140		True				
ANR	5082254	CFGExitNode	EXIT		5082140		True				
ANR	5082255	Symbol	NULL		5082140						
ANR	5082256	Symbol	new_worker -> m_id		5082140						
ANR	5082257	Symbol	D_ALWAYS		5082140						
ANR	5082258	Symbol	m_avail_workers_num		5082140						
ANR	5082259	Symbol	D_FULLDEBUG		5082140						
ANR	5082260	Symbol	thread		5082140						
ANR	5082261	Symbol	new_worker -> m_can_use		5082140						
ANR	5082262	Symbol	new_worker		5082140						
ANR	5082263	Symbol	& thread		5082140						
ANR	5082264	Symbol	true		5082140						
ANR	5082265	Symbol	m_workers_list		5082140						
ANR	5082266	Symbol	newWorkerId		5082140						
ANR	5082267	Symbol	* new_worker		5082140						
ANR	5082268	Symbol	worker_function		5082140						
ANR	5082269	Symbol	pthread_create		5082140						
ANR	5082270	Function	IOProcess :: findFreeWorker	596:0:16088:16676							
ANR	5082271	FunctionDef	IOProcess :: findFreeWorker ()		5082270	0					
ANR	5082272	CompoundStatement		598:0:16129:16676	5082270	0					
ANR	5082273	IdentifierDeclStatement	int currentkey = 0 ;	599:1:16132:16150	5082270	0	True				
ANR	5082274	IdentifierDecl	currentkey = 0		5082270	0					
ANR	5082275	IdentifierDeclType	int		5082270	0					
ANR	5082276	Identifier	currentkey		5082270	1					
ANR	5082277	AssignmentExpression	currentkey = 0		5082270	2		=			
ANR	5082278	Identifier	currentkey		5082270	0					
ANR	5082279	PrimaryExpression	0		5082270	1					
ANR	5082280	IdentifierDeclStatement	Worker * worker = NULL ;	600:1:16153:16174	5082270	1	True				
ANR	5082281	IdentifierDecl	* worker = NULL		5082270	0					
ANR	5082282	IdentifierDeclType	Worker *		5082270	0					
ANR	5082283	Identifier	worker		5082270	1					
ANR	5082284	AssignmentExpression	* worker = NULL		5082270	2		=			
ANR	5082285	Identifier	NULL		5082270	0					
ANR	5082286	Identifier	NULL		5082270	1					
ANR	5082287	ExpressionStatement	m_workers_list . startIterations ( )	603:1:16223:16255	5082270	2	True				
ANR	5082288	CallExpression	m_workers_list . startIterations ( )		5082270	0					
ANR	5082289	Callee	m_workers_list . startIterations		5082270	0					
ANR	5082290	MemberAccess	m_workers_list . startIterations		5082270	0					
ANR	5082291	Identifier	m_workers_list		5082270	0					
ANR	5082292	Identifier	startIterations		5082270	1					
ANR	5082293	ArgumentList			5082270	1					
ANR	5082294	WhileStatement	"while ( m_workers_list . iterate ( currentkey , worker ) != 0 )"		5082270	3					
ANR	5082295	Condition	"m_workers_list . iterate ( currentkey , worker ) != 0"	604:8:16265:16311	5082270	0	True				
ANR	5082296	EqualityExpression	"m_workers_list . iterate ( currentkey , worker ) != 0"		5082270	0		!=			
ANR	5082297	CallExpression	"m_workers_list . iterate ( currentkey , worker )"		5082270	0					
ANR	5082298	Callee	m_workers_list . iterate		5082270	0					
ANR	5082299	MemberAccess	m_workers_list . iterate		5082270	0					
ANR	5082300	Identifier	m_workers_list		5082270	0					
ANR	5082301	Identifier	iterate		5082270	1					
ANR	5082302	ArgumentList	currentkey		5082270	1					
ANR	5082303	Argument	currentkey		5082270	0					
ANR	5082304	Identifier	currentkey		5082270	0					
ANR	5082305	Argument	worker		5082270	1					
ANR	5082306	Identifier	worker		5082270	0					
ANR	5082307	PrimaryExpression	0		5082270	1					
ANR	5082308	CompoundStatement		7:58:185:185	5082270	1					
ANR	5082309	IfStatement	if ( ! worker -> m_is_doing && worker -> m_can_use )		5082270	0					
ANR	5082310	Condition	! worker -> m_is_doing && worker -> m_can_use	608:6:16367:16406	5082270	0	True				
ANR	5082311	AndExpression	! worker -> m_is_doing && worker -> m_can_use		5082270	0		&&			
ANR	5082312	UnaryOperationExpression	! worker -> m_is_doing		5082270	0					
ANR	5082313	UnaryOperator	!		5082270	0					
ANR	5082314	PtrMemberAccess	worker -> m_is_doing		5082270	1					
ANR	5082315	Identifier	worker		5082270	0					
ANR	5082316	Identifier	m_is_doing		5082270	1					
ANR	5082317	PtrMemberAccess	worker -> m_can_use		5082270	1					
ANR	5082318	Identifier	worker		5082270	0					
ANR	5082319	Identifier	m_can_use		5082270	1					
ANR	5082320	CompoundStatement		11:49:280:280	5082270	1					
ANR	5082321	ExpressionStatement	worker -> m_must_be_alive = true	609:3:16416:16446	5082270	0	True				
ANR	5082322	AssignmentExpression	worker -> m_must_be_alive = true		5082270	0		=			
ANR	5082323	PtrMemberAccess	worker -> m_must_be_alive		5082270	0					
ANR	5082324	Identifier	worker		5082270	0					
ANR	5082325	Identifier	m_must_be_alive		5082270	1					
ANR	5082326	Identifier	true		5082270	1					
ANR	5082327	ReturnStatement	return worker ;	614:3:16548:16561	5082270	1	True				
ANR	5082328	Identifier	worker		5082270	0					
ANR	5082329	ReturnStatement	return NULL ;	620:1:16663:16674	5082270	4	True				
ANR	5082330	Identifier	NULL		5082270	0					
ANR	5082331	ReturnType	Worker *		5082270	1					
ANR	5082332	Identifier	IOProcess :: findFreeWorker		5082270	2					
ANR	5082333	ParameterList			5082270	3					
ANR	5082334	CFGEntryNode	ENTRY		5082270		True				
ANR	5082335	CFGExitNode	EXIT		5082270		True				
ANR	5082336	Symbol	currentkey		5082270						
ANR	5082337	Symbol	NULL		5082270						
ANR	5082338	Symbol	worker -> m_is_doing		5082270						
ANR	5082339	Symbol	worker -> m_can_use		5082270						
ANR	5082340	Symbol	m_workers_list		5082270						
ANR	5082341	Symbol	true		5082270						
ANR	5082342	Symbol	worker -> m_must_be_alive		5082270						
ANR	5082343	Symbol	worker		5082270						
ANR	5082344	Symbol	m_workers_list . iterate		5082270						
ANR	5082345	Symbol	* worker		5082270						
ANR	5082346	Function	IOProcess :: findFirstAvailWorker	623:0:16679:17248							
ANR	5082347	FunctionDef	IOProcess :: findFirstAvailWorker ()		5082346	0					
ANR	5082348	CompoundStatement		625:0:16725:17248	5082346	0					
ANR	5082349	IdentifierDeclStatement	int currentkey = 0 ;	626:1:16728:16746	5082346	0	True				
ANR	5082350	IdentifierDecl	currentkey = 0		5082346	0					
ANR	5082351	IdentifierDeclType	int		5082346	0					
ANR	5082352	Identifier	currentkey		5082346	1					
ANR	5082353	AssignmentExpression	currentkey = 0		5082346	2		=			
ANR	5082354	Identifier	currentkey		5082346	0					
ANR	5082355	PrimaryExpression	0		5082346	1					
ANR	5082356	IdentifierDeclStatement	Worker * worker = NULL ;	627:1:16749:16770	5082346	1	True				
ANR	5082357	IdentifierDecl	* worker = NULL		5082346	0					
ANR	5082358	IdentifierDeclType	Worker *		5082346	0					
ANR	5082359	Identifier	worker		5082346	1					
ANR	5082360	AssignmentExpression	* worker = NULL		5082346	2		=			
ANR	5082361	Identifier	NULL		5082346	0					
ANR	5082362	Identifier	NULL		5082346	1					
ANR	5082363	ExpressionStatement	m_workers_list . startIterations ( )	631:1:16820:16852	5082346	2	True				
ANR	5082364	CallExpression	m_workers_list . startIterations ( )		5082346	0					
ANR	5082365	Callee	m_workers_list . startIterations		5082346	0					
ANR	5082366	MemberAccess	m_workers_list . startIterations		5082346	0					
ANR	5082367	Identifier	m_workers_list		5082346	0					
ANR	5082368	Identifier	startIterations		5082346	1					
ANR	5082369	ArgumentList			5082346	1					
ANR	5082370	WhileStatement	"while ( m_workers_list . iterate ( currentkey , worker ) != 0 )"		5082346	3					
ANR	5082371	Condition	"m_workers_list . iterate ( currentkey , worker ) != 0"	632:8:16862:16908	5082346	0	True				
ANR	5082372	EqualityExpression	"m_workers_list . iterate ( currentkey , worker ) != 0"		5082346	0		!=			
ANR	5082373	CallExpression	"m_workers_list . iterate ( currentkey , worker )"		5082346	0					
ANR	5082374	Callee	m_workers_list . iterate		5082346	0					
ANR	5082375	MemberAccess	m_workers_list . iterate		5082346	0					
ANR	5082376	Identifier	m_workers_list		5082346	0					
ANR	5082377	Identifier	iterate		5082346	1					
ANR	5082378	ArgumentList	currentkey		5082346	1					
ANR	5082379	Argument	currentkey		5082346	0					
ANR	5082380	Identifier	currentkey		5082346	0					
ANR	5082381	Argument	worker		5082346	1					
ANR	5082382	Identifier	worker		5082346	0					
ANR	5082383	PrimaryExpression	0		5082346	1					
ANR	5082384	CompoundStatement		8:58:186:186	5082346	1					
ANR	5082385	IfStatement	if ( worker -> m_can_use )		5082346	0					
ANR	5082386	Condition	worker -> m_can_use	636:6:16964:16980	5082346	0	True				
ANR	5082387	PtrMemberAccess	worker -> m_can_use		5082346	0					
ANR	5082388	Identifier	worker		5082346	0					
ANR	5082389	Identifier	m_can_use		5082346	1					
ANR	5082390	CompoundStatement		12:26:258:258	5082346	1					
ANR	5082391	ExpressionStatement	worker -> m_must_be_alive = true	637:3:16989:17019	5082346	0	True				
ANR	5082392	AssignmentExpression	worker -> m_must_be_alive = true		5082346	0		=			
ANR	5082393	PtrMemberAccess	worker -> m_must_be_alive		5082346	0					
ANR	5082394	Identifier	worker		5082346	0					
ANR	5082395	Identifier	m_must_be_alive		5082346	1					
ANR	5082396	Identifier	true		5082346	1					
ANR	5082397	ReturnStatement	return worker ;	641:3:17119:17132	5082346	1	True				
ANR	5082398	Identifier	worker		5082346	0					
ANR	5082399	ReturnStatement	return NULL ;	648:1:17235:17246	5082346	4	True				
ANR	5082400	Identifier	NULL		5082346	0					
ANR	5082401	ReturnType	Worker *		5082346	1					
ANR	5082402	Identifier	IOProcess :: findFirstAvailWorker		5082346	2					
ANR	5082403	ParameterList			5082346	3					
ANR	5082404	CFGEntryNode	ENTRY		5082346		True				
ANR	5082405	CFGExitNode	EXIT		5082346		True				
ANR	5082406	Symbol	currentkey		5082346						
ANR	5082407	Symbol	NULL		5082346						
ANR	5082408	Symbol	worker -> m_can_use		5082346						
ANR	5082409	Symbol	m_workers_list		5082346						
ANR	5082410	Symbol	true		5082346						
ANR	5082411	Symbol	worker -> m_must_be_alive		5082346						
ANR	5082412	Symbol	worker		5082346						
ANR	5082413	Symbol	m_workers_list . iterate		5082346						
ANR	5082414	Symbol	* worker		5082346						
ANR	5082415	Function	IOProcess :: findWorker	652:0:17252:17370							
ANR	5082416	FunctionDef	IOProcess :: findWorker (int id)		5082415	0					
ANR	5082417	CompoundStatement		654:0:17291:17370	5082415	0					
ANR	5082418	IdentifierDeclStatement	Worker * worker = NULL ;	655:1:17294:17315	5082415	0	True				
ANR	5082419	IdentifierDecl	* worker = NULL		5082415	0					
ANR	5082420	IdentifierDeclType	Worker *		5082415	0					
ANR	5082421	Identifier	worker		5082415	1					
ANR	5082422	AssignmentExpression	* worker = NULL		5082415	2		=			
ANR	5082423	Identifier	NULL		5082415	0					
ANR	5082424	Identifier	NULL		5082415	1					
ANR	5082425	ExpressionStatement	"m_workers_list . lookup ( id , worker )"	657:1:17319:17352	5082415	1	True				
ANR	5082426	CallExpression	"m_workers_list . lookup ( id , worker )"		5082415	0					
ANR	5082427	Callee	m_workers_list . lookup		5082415	0					
ANR	5082428	MemberAccess	m_workers_list . lookup		5082415	0					
ANR	5082429	Identifier	m_workers_list		5082415	0					
ANR	5082430	Identifier	lookup		5082415	1					
ANR	5082431	ArgumentList	id		5082415	1					
ANR	5082432	Argument	id		5082415	0					
ANR	5082433	Identifier	id		5082415	0					
ANR	5082434	Argument	worker		5082415	1					
ANR	5082435	Identifier	worker		5082415	0					
ANR	5082436	ReturnStatement	return worker ;	658:1:17355:17368	5082415	2	True				
ANR	5082437	Identifier	worker		5082415	0					
ANR	5082438	ReturnType	Worker *		5082415	1					
ANR	5082439	Identifier	IOProcess :: findWorker		5082415	2					
ANR	5082440	ParameterList	int id		5082415	3					
ANR	5082441	Parameter	int id	653:22:17283:17288	5082415	0	True				
ANR	5082442	ParameterType	int		5082415	0					
ANR	5082443	Identifier	id		5082415	1					
ANR	5082444	CFGEntryNode	ENTRY		5082415		True				
ANR	5082445	CFGExitNode	EXIT		5082415		True				
ANR	5082446	Symbol	NULL		5082415						
ANR	5082447	Symbol	m_workers_list		5082415						
ANR	5082448	Symbol	id		5082415						
ANR	5082449	Symbol	worker		5082415						
ANR	5082450	Function	IOProcess :: removeWorkerFromWorkerList	661:0:17373:17558							
ANR	5082451	FunctionDef	IOProcess :: removeWorkerFromWorkerList (int id)		5082450	0					
ANR	5082452	CompoundStatement		663:0:17425:17558	5082450	0					
ANR	5082453	IdentifierDeclStatement	Worker * worker = findWorker ( id ) ;	664:1:17428:17459	5082450	0	True				
ANR	5082454	IdentifierDecl	* worker = findWorker ( id )		5082450	0					
ANR	5082455	IdentifierDeclType	Worker *		5082450	0					
ANR	5082456	Identifier	worker		5082450	1					
ANR	5082457	AssignmentExpression	* worker = findWorker ( id )		5082450	2		=			
ANR	5082458	Identifier	worker		5082450	0					
ANR	5082459	CallExpression	findWorker ( id )		5082450	1					
ANR	5082460	Callee	findWorker		5082450	0					
ANR	5082461	Identifier	findWorker		5082450	0					
ANR	5082462	ArgumentList	id		5082450	1					
ANR	5082463	Argument	id		5082450	0					
ANR	5082464	Identifier	id		5082450	0					
ANR	5082465	IfStatement	if ( worker )		5082450	1					
ANR	5082466	Condition	worker	665:5:17466:17471	5082450	0	True				
ANR	5082467	Identifier	worker		5082450	0					
ANR	5082468	CompoundStatement		3:14:49:49	5082450	1					
ANR	5082469	ExpressionStatement	m_workers_list . remove ( id )	666:2:17479:17504	5082450	0	True				
ANR	5082470	CallExpression	m_workers_list . remove ( id )		5082450	0					
ANR	5082471	Callee	m_workers_list . remove		5082450	0					
ANR	5082472	MemberAccess	m_workers_list . remove		5082450	0					
ANR	5082473	Identifier	m_workers_list		5082450	0					
ANR	5082474	Identifier	remove		5082450	1					
ANR	5082475	ArgumentList	id		5082450	1					
ANR	5082476	Argument	id		5082450	0					
ANR	5082477	Identifier	id		5082450	0					
ANR	5082478	Statement	delete	668:2:17509:17514	5082450	1	True				
ANR	5082479	ExpressionStatement	worker	668:9:17516:17522	5082450	2	True				
ANR	5082480	Identifier	worker		5082450	0					
ANR	5082481	ReturnStatement	return true ;	669:2:17526:17537	5082450	3	True				
ANR	5082482	Identifier	true		5082450	0					
ANR	5082483	ReturnStatement	return false ;	672:1:17544:17556	5082450	2	True				
ANR	5082484	Identifier	false		5082450	0					
ANR	5082485	ReturnType	bool		5082450	1					
ANR	5082486	Identifier	IOProcess :: removeWorkerFromWorkerList		5082450	2					
ANR	5082487	ParameterList	int id		5082450	3					
ANR	5082488	Parameter	int id	662:38:17417:17422	5082450	0	True				
ANR	5082489	ParameterType	int		5082450	0					
ANR	5082490	Identifier	id		5082450	1					
ANR	5082491	CFGEntryNode	ENTRY		5082450		True				
ANR	5082492	CFGExitNode	EXIT		5082450		True				
ANR	5082493	Symbol	m_workers_list		5082450						
ANR	5082494	Symbol	true		5082450						
ANR	5082495	Symbol	false		5082450						
ANR	5082496	Symbol	id		5082450						
ANR	5082497	Symbol	findWorker		5082450						
ANR	5082498	Symbol	worker		5082450						
ANR	5082499	Function	IOProcess :: LockWorkerList	675:0:17561:17645							
ANR	5082500	FunctionDef	IOProcess :: LockWorkerList ()		5082499	0					
ANR	5082501	CompoundStatement		677:0:17598:17645	5082499	0					
ANR	5082502	ReturnType	void		5082499	1					
ANR	5082503	Identifier	IOProcess :: LockWorkerList		5082499	2					
ANR	5082504	ParameterList			5082499	3					
ANR	5082505	CFGEntryNode	ENTRY		5082499		True				
ANR	5082506	CFGExitNode	EXIT		5082499		True				
ANR	5082507	Function	IOProcess :: UnlockWorkerList	681:0:17648:17736							
ANR	5082508	FunctionDef	IOProcess :: UnlockWorkerList ()		5082507	0					
ANR	5082509	CompoundStatement		683:0:17687:17736	5082507	0					
ANR	5082510	ReturnType	void		5082507	1					
ANR	5082511	Identifier	IOProcess :: UnlockWorkerList		5082507	2					
ANR	5082512	ParameterList			5082507	3					
ANR	5082513	CFGEntryNode	ENTRY		5082507		True				
ANR	5082514	CFGExitNode	EXIT		5082507		True				
ANR	5082515	Function	IOProcess :: addNewRequest	687:0:17739:18182							
ANR	5082516	FunctionDef	IOProcess :: addNewRequest (const char * cmd)		5082515	0					
ANR	5082517	CompoundStatement		689:0:17791:18182	5082515	0					
ANR	5082518	IfStatement	if ( ! cmd )		5082515	0					
ANR	5082519	Condition	! cmd	690:5:17798:17801	5082515	0	True				
ANR	5082520	UnaryOperationExpression	! cmd		5082515	0					
ANR	5082521	UnaryOperator	!		5082515	0					
ANR	5082522	Identifier	cmd		5082515	1					
ANR	5082523	CompoundStatement		2:12:13:13	5082515	1					
ANR	5082524	ReturnStatement	return NULL ;	691:2:17809:17820	5082515	0	True				
ANR	5082525	Identifier	NULL		5082515	0					
ANR	5082526	IdentifierDeclStatement	Request * new_req = new Request ( cmd ) ;	694:1:17827:17862	5082515	1	True				
ANR	5082527	IdentifierDecl	* new_req = new Request ( cmd )		5082515	0					
ANR	5082528	IdentifierDeclType	Request *		5082515	0					
ANR	5082529	Identifier	new_req		5082515	1					
ANR	5082530	AssignmentExpression	* new_req = new Request ( cmd )		5082515	2		=			
ANR	5082531	Identifier	cmd		5082515	0					
ANR	5082532	Identifier	cmd		5082515	1					
ANR	5082533	ExpressionStatement	ASSERT ( new_req )	695:1:17865:17880	5082515	2	True				
ANR	5082534	CallExpression	ASSERT ( new_req )		5082515	0					
ANR	5082535	Callee	ASSERT		5082515	0					
ANR	5082536	Identifier	ASSERT		5082515	0					
ANR	5082537	ArgumentList	new_req		5082515	1					
ANR	5082538	Argument	new_req		5082515	0					
ANR	5082539	Identifier	new_req		5082515	0					
ANR	5082540	IdentifierDeclStatement	Worker * worker = findFreeWorker ( ) ;	698:1:17931:17964	5082515	3	True				
ANR	5082541	IdentifierDecl	* worker = findFreeWorker ( )		5082515	0					
ANR	5082542	IdentifierDeclType	Worker *		5082515	0					
ANR	5082543	Identifier	worker		5082515	1					
ANR	5082544	AssignmentExpression	* worker = findFreeWorker ( )		5082515	2		=			
ANR	5082545	Identifier	worker		5082515	0					
ANR	5082546	CallExpression	findFreeWorker ( )		5082515	1					
ANR	5082547	Callee	findFreeWorker		5082515	0					
ANR	5082548	Identifier	findFreeWorker		5082515	0					
ANR	5082549	ArgumentList			5082515	1					
ANR	5082550	IfStatement	if ( ! worker )		5082515	4					
ANR	5082551	Condition	! worker	700:5:17972:17978	5082515	0	True				
ANR	5082552	UnaryOperationExpression	! worker		5082515	0					
ANR	5082553	UnaryOperator	!		5082515	0					
ANR	5082554	Identifier	worker		5082515	1					
ANR	5082555	CompoundStatement		12:15:190:190	5082515	1					
ANR	5082556	IfStatement	if ( m_max_workers == - 1 || m_avail_workers_num < m_max_workers )		5082515	0					
ANR	5082557	Condition	m_max_workers == - 1 || m_avail_workers_num < m_max_workers	703:6:18025:18082	5082515	0	True				
ANR	5082558	OrExpression	m_max_workers == - 1 || m_avail_workers_num < m_max_workers		5082515	0		||			
ANR	5082559	EqualityExpression	m_max_workers == - 1		5082515	0		==			
ANR	5082560	Identifier	m_max_workers		5082515	0					
ANR	5082561	UnaryOperationExpression	- 1		5082515	1					
ANR	5082562	UnaryOperator	-		5082515	0					
ANR	5082563	PrimaryExpression	1		5082515	1					
ANR	5082564	RelationalExpression	m_avail_workers_num < m_max_workers		5082515	1		<			
ANR	5082565	Identifier	m_avail_workers_num		5082515	0					
ANR	5082566	Identifier	m_max_workers		5082515	1					
ANR	5082567	CompoundStatement		15:67:294:294	5082515	1					
ANR	5082568	ExpressionStatement	worker = createNewWorker ( )	704:3:18091:18117	5082515	0	True				
ANR	5082569	AssignmentExpression	worker = createNewWorker ( )		5082515	0		=			
ANR	5082570	Identifier	worker		5082515	0					
ANR	5082571	CallExpression	createNewWorker ( )		5082515	1					
ANR	5082572	Callee	createNewWorker		5082515	0					
ANR	5082573	Identifier	createNewWorker		5082515	0					
ANR	5082574	ArgumentList			5082515	1					
ANR	5082575	ExpressionStatement	"addRequestToWorker ( new_req , worker )"	708:1:18128:18163	5082515	5	True				
ANR	5082576	CallExpression	"addRequestToWorker ( new_req , worker )"		5082515	0					
ANR	5082577	Callee	addRequestToWorker		5082515	0					
ANR	5082578	Identifier	addRequestToWorker		5082515	0					
ANR	5082579	ArgumentList	new_req		5082515	1					
ANR	5082580	Argument	new_req		5082515	0					
ANR	5082581	Identifier	new_req		5082515	0					
ANR	5082582	Argument	worker		5082515	1					
ANR	5082583	Identifier	worker		5082515	0					
ANR	5082584	ReturnStatement	return new_req ;	709:1:18166:18180	5082515	6	True				
ANR	5082585	Identifier	new_req		5082515	0					
ANR	5082586	ReturnType	Request *		5082515	1					
ANR	5082587	Identifier	IOProcess :: addNewRequest		5082515	2					
ANR	5082588	ParameterList	const char * cmd		5082515	3					
ANR	5082589	Parameter	const char * cmd	688:25:17774:17788	5082515	0	True				
ANR	5082590	ParameterType	const char *		5082515	0					
ANR	5082591	Identifier	cmd		5082515	1					
ANR	5082592	CFGEntryNode	ENTRY		5082515		True				
ANR	5082593	CFGExitNode	EXIT		5082515		True				
ANR	5082594	Symbol	NULL		5082515						
ANR	5082595	Symbol	createNewWorker		5082515						
ANR	5082596	Symbol	m_avail_workers_num		5082515						
ANR	5082597	Symbol	cmd		5082515						
ANR	5082598	Symbol	findFreeWorker		5082515						
ANR	5082599	Symbol	worker		5082515						
ANR	5082600	Symbol	m_max_workers		5082515						
ANR	5082601	Symbol	new_req		5082515						
ANR	5082602	Function	IOProcess :: addResult	712:0:18185:18637							
ANR	5082603	FunctionDef	IOProcess :: addResult (const char * result)		5082602	0					
ANR	5082604	CompoundStatement		714:0:18232:18637	5082602	0					
ANR	5082605	IfStatement	if ( ! result )		5082602	0					
ANR	5082606	Condition	! result	715:5:18239:18245	5082602	0	True				
ANR	5082607	UnaryOperationExpression	! result		5082602	0					
ANR	5082608	UnaryOperator	!		5082602	0					
ANR	5082609	Identifier	result		5082602	1					
ANR	5082610	CompoundStatement		2:15:16:16	5082602	1					
ANR	5082611	ReturnStatement	return ;	716:2:18253:18259	5082602	0	True				
ANR	5082612	ExpressionStatement	m_result_list . append ( result )	723:1:18372:18400	5082602	1	True				
ANR	5082613	CallExpression	m_result_list . append ( result )		5082602	0					
ANR	5082614	Callee	m_result_list . append		5082602	0					
ANR	5082615	MemberAccess	m_result_list . append		5082602	0					
ANR	5082616	Identifier	m_result_list		5082602	0					
ANR	5082617	Identifier	append		5082602	1					
ANR	5082618	ArgumentList	result		5082602	1					
ANR	5082619	Argument	result		5082602	0					
ANR	5082620	Identifier	result		5082602	0					
ANR	5082621	IfStatement	if ( m_async_mode )		5082602	2					
ANR	5082622	Condition	m_async_mode	725:5:18408:18419	5082602	0	True				
ANR	5082623	Identifier	m_async_mode		5082602	0					
ANR	5082624	CompoundStatement		12:19:189:189	5082602	1					
ANR	5082625	IfStatement	if ( ! m_new_results_signaled )		5082602	0					
ANR	5082626	Condition	! m_new_results_signaled	726:6:18430:18452	5082602	0	True				
ANR	5082627	UnaryOperationExpression	! m_new_results_signaled		5082602	0					
ANR	5082628	UnaryOperator	!		5082602	0					
ANR	5082629	Identifier	m_new_results_signaled		5082602	1					
ANR	5082630	CompoundStatement		13:31:222:222	5082602	1					
ANR	5082631	ExpressionStatement	"printf ( ""R\\n"" )"	727:3:18460:18474	5082602	0	True				
ANR	5082632	CallExpression	"printf ( ""R\\n"" )"		5082602	0					
ANR	5082633	Callee	printf		5082602	0					
ANR	5082634	Identifier	printf		5082602	0					
ANR	5082635	ArgumentList	"""R\\n"""		5082602	1					
ANR	5082636	Argument	"""R\\n"""		5082602	0					
ANR	5082637	PrimaryExpression	"""R\\n"""		5082602	0					
ANR	5082638	ExpressionStatement	fflush ( stdout )	728:3:18479:18494	5082602	1	True				
ANR	5082639	CallExpression	fflush ( stdout )		5082602	0					
ANR	5082640	Callee	fflush		5082602	0					
ANR	5082641	Identifier	fflush		5082602	0					
ANR	5082642	ArgumentList	stdout		5082602	1					
ANR	5082643	Argument	stdout		5082602	0					
ANR	5082644	Identifier	stdout		5082602	0					
ANR	5082645	ExpressionStatement	m_new_results_signaled = true	730:2:18502:18531	5082602	1	True				
ANR	5082646	AssignmentExpression	m_new_results_signaled = true		5082602	0		=			
ANR	5082647	Identifier	m_new_results_signaled		5082602	0					
ANR	5082648	Identifier	true		5082602	1					
ANR	5082649	ReturnType	void		5082602	1					
ANR	5082650	Identifier	IOProcess :: addResult		5082602	2					
ANR	5082651	ParameterList	const char * result		5082602	3					
ANR	5082652	Parameter	const char * result	713:21:18212:18229	5082602	0	True				
ANR	5082653	ParameterType	const char *		5082602	0					
ANR	5082654	Identifier	result		5082602	1					
ANR	5082655	CFGEntryNode	ENTRY		5082602		True				
ANR	5082656	CFGExitNode	EXIT		5082602		True				
ANR	5082657	Symbol	result		5082602						
ANR	5082658	Symbol	m_result_list		5082602						
ANR	5082659	Symbol	m_new_results_signaled		5082602						
ANR	5082660	Symbol	m_async_mode		5082602						
ANR	5082661	Symbol	stdout		5082602						
ANR	5082662	Symbol	true		5082602						
ANR	5082663	Function	IOProcess :: newWorkerId	737:0:18640:19449							
ANR	5082664	FunctionDef	IOProcess :: newWorkerId ()		5082663	0					
ANR	5082665	CompoundStatement		739:0:18674:19449	5082663	0					
ANR	5082666	IdentifierDeclStatement	Worker * unused = NULL ;	740:1:18677:18698	5082663	0	True				
ANR	5082667	IdentifierDecl	* unused = NULL		5082663	0					
ANR	5082668	IdentifierDeclType	Worker *		5082663	0					
ANR	5082669	Identifier	unused		5082663	1					
ANR	5082670	AssignmentExpression	* unused = NULL		5082663	2		=			
ANR	5082671	Identifier	NULL		5082663	0					
ANR	5082672	Identifier	NULL		5082663	1					
ANR	5082673	IdentifierDeclStatement	int starting_worker_id = m_next_worker_id ++ ;	741:1:18701:18744	5082663	1	True				
ANR	5082674	IdentifierDecl	starting_worker_id = m_next_worker_id ++		5082663	0					
ANR	5082675	IdentifierDeclType	int		5082663	0					
ANR	5082676	Identifier	starting_worker_id		5082663	1					
ANR	5082677	AssignmentExpression	starting_worker_id = m_next_worker_id ++		5082663	2		=			
ANR	5082678	Identifier	starting_worker_id		5082663	0					
ANR	5082679	PostIncDecOperationExpression	m_next_worker_id ++		5082663	1					
ANR	5082680	Identifier	m_next_worker_id		5082663	0					
ANR	5082681	IncDec	++		5082663	1					
ANR	5082682	WhileStatement	while ( starting_worker_id != m_next_worker_id )		5082663	2					
ANR	5082683	Condition	starting_worker_id != m_next_worker_id	743:8:18755:18792	5082663	0	True				
ANR	5082684	EqualityExpression	starting_worker_id != m_next_worker_id		5082663	0		!=			
ANR	5082685	Identifier	starting_worker_id		5082663	0					
ANR	5082686	Identifier	m_next_worker_id		5082663	1					
ANR	5082687	CompoundStatement		5:49:121:121	5082663	1					
ANR	5082688	IfStatement	if ( m_next_worker_id > 990000000 )		5082663	0					
ANR	5082689	Condition	m_next_worker_id > 990000000	744:6:18804:18831	5082663	0	True				
ANR	5082690	RelationalExpression	m_next_worker_id > 990000000		5082663	0		>			
ANR	5082691	Identifier	m_next_worker_id		5082663	0					
ANR	5082692	PrimaryExpression	990000000		5082663	1					
ANR	5082693	CompoundStatement		6:37:160:160	5082663	1					
ANR	5082694	ExpressionStatement	m_next_worker_id = 1	745:3:18840:18860	5082663	0	True				
ANR	5082695	AssignmentExpression	m_next_worker_id = 1		5082663	0		=			
ANR	5082696	Identifier	m_next_worker_id		5082663	0					
ANR	5082697	PrimaryExpression	1		5082663	1					
ANR	5082698	ExpressionStatement	m_rotated_worker_ids = true	746:3:18865:18892	5082663	1	True				
ANR	5082699	AssignmentExpression	m_rotated_worker_ids = true		5082663	0		=			
ANR	5082700	Identifier	m_rotated_worker_ids		5082663	0					
ANR	5082701	Identifier	true		5082663	1					
ANR	5082702	IfStatement	if ( ! m_rotated_worker_ids )		5082663	1					
ANR	5082703	Condition	! m_rotated_worker_ids	749:6:18905:18925	5082663	0	True				
ANR	5082704	UnaryOperationExpression	! m_rotated_worker_ids		5082663	0					
ANR	5082705	UnaryOperator	!		5082663	0					
ANR	5082706	Identifier	m_rotated_worker_ids		5082663	1					
ANR	5082707	CompoundStatement		11:30:254:254	5082663	1					
ANR	5082708	ReturnStatement	return m_next_worker_id ;	750:3:18934:18957	5082663	0	True				
ANR	5082709	Identifier	m_next_worker_id		5082663	0					
ANR	5082710	IfStatement	"if ( m_workers_list . lookup ( m_next_worker_id , unused ) == - 1 )"		5082663	2					
ANR	5082711	Condition	"m_workers_list . lookup ( m_next_worker_id , unused ) == - 1"	755:6:19072:19124	5082663	0	True				
ANR	5082712	EqualityExpression	"m_workers_list . lookup ( m_next_worker_id , unused ) == - 1"		5082663	0		==			
ANR	5082713	CallExpression	"m_workers_list . lookup ( m_next_worker_id , unused )"		5082663	0					
ANR	5082714	Callee	m_workers_list . lookup		5082663	0					
ANR	5082715	MemberAccess	m_workers_list . lookup		5082663	0					
ANR	5082716	Identifier	m_workers_list		5082663	0					
ANR	5082717	Identifier	lookup		5082663	1					
ANR	5082718	ArgumentList	m_next_worker_id		5082663	1					
ANR	5082719	Argument	m_next_worker_id		5082663	0					
ANR	5082720	Identifier	m_next_worker_id		5082663	0					
ANR	5082721	Argument	unused		5082663	1					
ANR	5082722	Identifier	unused		5082663	0					
ANR	5082723	UnaryOperationExpression	- 1		5082663	1					
ANR	5082724	UnaryOperator	-		5082663	0					
ANR	5082725	PrimaryExpression	1		5082663	1					
ANR	5082726	CompoundStatement		17:62:453:453	5082663	1					
ANR	5082727	ReturnStatement	return m_next_worker_id ;	758:3:19212:19235	5082663	0	True				
ANR	5082728	Identifier	m_next_worker_id		5082663	0					
ANR	5082729	ExpressionStatement	m_next_worker_id ++	762:2:19292:19310	5082663	3	True				
ANR	5082730	PostIncDecOperationExpression	m_next_worker_id ++		5082663	0					
ANR	5082731	Identifier	m_next_worker_id		5082663	0					
ANR	5082732	IncDec	++		5082663	1					
ANR	5082733	ExpressionStatement	"dprintf ( D_ALWAYS , ""Gahp Server Error - out of worker ids !!!?!?!?\\n"" )"	766:1:19366:19435	5082663	3	True				
ANR	5082734	CallExpression	"dprintf ( D_ALWAYS , ""Gahp Server Error - out of worker ids !!!?!?!?\\n"" )"		5082663	0					
ANR	5082735	Callee	dprintf		5082663	0					
ANR	5082736	Identifier	dprintf		5082663	0					
ANR	5082737	ArgumentList	D_ALWAYS		5082663	1					
ANR	5082738	Argument	D_ALWAYS		5082663	0					
ANR	5082739	Identifier	D_ALWAYS		5082663	0					
ANR	5082740	Argument	"""Gahp Server Error - out of worker ids !!!?!?!?\\n"""		5082663	1					
ANR	5082741	PrimaryExpression	"""Gahp Server Error - out of worker ids !!!?!?!?\\n"""		5082663	0					
ANR	5082742	ReturnStatement	return - 1 ;	767:1:19438:19447	5082663	4	True				
ANR	5082743	UnaryOperationExpression	- 1		5082663	0					
ANR	5082744	UnaryOperator	-		5082663	0					
ANR	5082745	PrimaryExpression	1		5082663	1					
ANR	5082746	ReturnType	int		5082663	1					
ANR	5082747	Identifier	IOProcess :: newWorkerId		5082663	2					
ANR	5082748	ParameterList			5082663	3					
ANR	5082749	CFGEntryNode	ENTRY		5082663		True				
ANR	5082750	CFGExitNode	EXIT		5082663		True				
ANR	5082751	Symbol	m_workers_list . lookup		5082663						
ANR	5082752	Symbol	m_rotated_worker_ids		5082663						
ANR	5082753	Symbol	NULL		5082663						
ANR	5082754	Symbol	m_next_worker_id		5082663						
ANR	5082755	Symbol	true		5082663						
ANR	5082756	Symbol	m_workers_list		5082663						
ANR	5082757	Symbol	D_ALWAYS		5082663						
ANR	5082758	Symbol	unused		5082663						
ANR	5082759	Symbol	starting_worker_id		5082663						
ANR	5082760	Function	IOProcess :: addRequestToWorker	770:0:19452:20304							
ANR	5082761	FunctionDef	"IOProcess :: addRequestToWorker (Request * request , Worker * worker)"		5082760	0					
ANR	5082762	CompoundStatement		772:0:19521:20304	5082760	0					
ANR	5082763	IfStatement	if ( ! request )		5082760	0					
ANR	5082764	Condition	! request	773:5:19528:19535	5082760	0	True				
ANR	5082765	UnaryOperationExpression	! request		5082760	0					
ANR	5082766	UnaryOperator	!		5082760	0					
ANR	5082767	Identifier	request		5082760	1					
ANR	5082768	CompoundStatement		2:16:17:17	5082760	1					
ANR	5082769	ReturnStatement	return ;	774:2:19543:19549	5082760	0	True				
ANR	5082770	IfStatement	if ( worker )		5082760	1					
ANR	5082771	Condition	worker	777:5:19560:19565	5082760	0	True				
ANR	5082772	Identifier	worker		5082760	0					
ANR	5082773	CompoundStatement		6:14:47:47	5082760	1					
ANR	5082774	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Sending %s to worker %d\\n"" , request -> m_raw_cmd . c_str ( ) , worker -> m_id )"	778:2:19574:19671	5082760	0	True				
ANR	5082775	CallExpression	"dprintf ( D_FULLDEBUG , ""Sending %s to worker %d\\n"" , request -> m_raw_cmd . c_str ( ) , worker -> m_id )"		5082760	0					
ANR	5082776	Callee	dprintf		5082760	0					
ANR	5082777	Identifier	dprintf		5082760	0					
ANR	5082778	ArgumentList	D_FULLDEBUG		5082760	1					
ANR	5082779	Argument	D_FULLDEBUG		5082760	0					
ANR	5082780	Identifier	D_FULLDEBUG		5082760	0					
ANR	5082781	Argument	"""Sending %s to worker %d\\n"""		5082760	1					
ANR	5082782	PrimaryExpression	"""Sending %s to worker %d\\n"""		5082760	0					
ANR	5082783	Argument	request -> m_raw_cmd . c_str ( )		5082760	2					
ANR	5082784	CallExpression	request -> m_raw_cmd . c_str ( )		5082760	0					
ANR	5082785	Callee	request -> m_raw_cmd . c_str		5082760	0					
ANR	5082786	MemberAccess	request -> m_raw_cmd . c_str		5082760	0					
ANR	5082787	PtrMemberAccess	request -> m_raw_cmd		5082760	0					
ANR	5082788	Identifier	request		5082760	0					
ANR	5082789	Identifier	m_raw_cmd		5082760	1					
ANR	5082790	Identifier	c_str		5082760	1					
ANR	5082791	ArgumentList			5082760	1					
ANR	5082792	Argument	worker -> m_id		5082760	3					
ANR	5082793	PtrMemberAccess	worker -> m_id		5082760	0					
ANR	5082794	Identifier	worker		5082760	0					
ANR	5082795	Identifier	m_id		5082760	1					
ANR	5082796	ExpressionStatement	request -> m_worker = worker	783:2:19719:19745	5082760	1	True				
ANR	5082797	AssignmentExpression	request -> m_worker = worker		5082760	0		=			
ANR	5082798	PtrMemberAccess	request -> m_worker		5082760	0					
ANR	5082799	Identifier	request		5082760	0					
ANR	5082800	Identifier	m_worker		5082760	1					
ANR	5082801	Identifier	worker		5082760	1					
ANR	5082802	ExpressionStatement	worker -> m_request_list . Append ( request )	784:2:19749:19787	5082760	2	True				
ANR	5082803	CallExpression	worker -> m_request_list . Append ( request )		5082760	0					
ANR	5082804	Callee	worker -> m_request_list . Append		5082760	0					
ANR	5082805	MemberAccess	worker -> m_request_list . Append		5082760	0					
ANR	5082806	PtrMemberAccess	worker -> m_request_list		5082760	0					
ANR	5082807	Identifier	worker		5082760	0					
ANR	5082808	Identifier	m_request_list		5082760	1					
ANR	5082809	Identifier	Append		5082760	1					
ANR	5082810	ArgumentList	request		5082760	1					
ANR	5082811	Argument	request		5082760	0					
ANR	5082812	Identifier	request		5082760	0					
ANR	5082813	ExpressionStatement	worker -> m_is_doing = true	785:2:19791:19816	5082760	3	True				
ANR	5082814	AssignmentExpression	worker -> m_is_doing = true		5082760	0		=			
ANR	5082815	PtrMemberAccess	worker -> m_is_doing		5082760	0					
ANR	5082816	Identifier	worker		5082760	0					
ANR	5082817	Identifier	m_is_doing		5082760	1					
ANR	5082818	Identifier	true		5082760	1					
ANR	5082819	IfStatement	if ( worker -> m_is_waiting )		5082760	4					
ANR	5082820	Condition	worker -> m_is_waiting	787:6:19825:19844	5082760	0	True				
ANR	5082821	PtrMemberAccess	worker -> m_is_waiting		5082760	0					
ANR	5082822	Identifier	worker		5082760	0					
ANR	5082823	Identifier	m_is_waiting		5082760	1					
ANR	5082824	CompoundStatement		16:29:326:326	5082760	1					
ANR	5082825	ExpressionStatement	pthread_cond_signal ( & worker -> m_cond )	788:3:19853:19889	5082760	0	True				
ANR	5082826	CallExpression	pthread_cond_signal ( & worker -> m_cond )		5082760	0					
ANR	5082827	Callee	pthread_cond_signal		5082760	0					
ANR	5082828	Identifier	pthread_cond_signal		5082760	0					
ANR	5082829	ArgumentList	& worker -> m_cond		5082760	1					
ANR	5082830	Argument	& worker -> m_cond		5082760	0					
ANR	5082831	UnaryOperationExpression	& worker -> m_cond		5082760	0					
ANR	5082832	UnaryOperator	&		5082760	0					
ANR	5082833	PtrMemberAccess	worker -> m_cond		5082760	1					
ANR	5082834	Identifier	worker		5082760	0					
ANR	5082835	Identifier	m_cond		5082760	1					
ANR	5082836	ElseStatement	else		5082760	0					
ANR	5082837	CompoundStatement		21:7:425:425	5082760	0					
ANR	5082838	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Appending %s to global pending request list\\n"" , request -> m_raw_cmd . c_str ( ) )"	795:2:20053:20156	5082760	0	True				
ANR	5082839	CallExpression	"dprintf ( D_FULLDEBUG , ""Appending %s to global pending request list\\n"" , request -> m_raw_cmd . c_str ( ) )"		5082760	0					
ANR	5082840	Callee	dprintf		5082760	0					
ANR	5082841	Identifier	dprintf		5082760	0					
ANR	5082842	ArgumentList	D_FULLDEBUG		5082760	1					
ANR	5082843	Argument	D_FULLDEBUG		5082760	0					
ANR	5082844	Identifier	D_FULLDEBUG		5082760	0					
ANR	5082845	Argument	"""Appending %s to global pending request list\\n"""		5082760	1					
ANR	5082846	PrimaryExpression	"""Appending %s to global pending request list\\n"""		5082760	0					
ANR	5082847	Argument	request -> m_raw_cmd . c_str ( )		5082760	2					
ANR	5082848	CallExpression	request -> m_raw_cmd . c_str ( )		5082760	0					
ANR	5082849	Callee	request -> m_raw_cmd . c_str		5082760	0					
ANR	5082850	MemberAccess	request -> m_raw_cmd . c_str		5082760	0					
ANR	5082851	PtrMemberAccess	request -> m_raw_cmd		5082760	0					
ANR	5082852	Identifier	request		5082760	0					
ANR	5082853	Identifier	m_raw_cmd		5082760	1					
ANR	5082854	Identifier	c_str		5082760	1					
ANR	5082855	ArgumentList			5082760	1					
ANR	5082856	ExpressionStatement	m_pending_req_list . Append ( request )	799:2:20212:20246	5082760	1	True				
ANR	5082857	CallExpression	m_pending_req_list . Append ( request )		5082760	0					
ANR	5082858	Callee	m_pending_req_list . Append		5082760	0					
ANR	5082859	MemberAccess	m_pending_req_list . Append		5082760	0					
ANR	5082860	Identifier	m_pending_req_list		5082760	0					
ANR	5082861	Identifier	Append		5082760	1					
ANR	5082862	ArgumentList	request		5082760	1					
ANR	5082863	Argument	request		5082760	0					
ANR	5082864	Identifier	request		5082760	0					
ANR	5082865	ReturnType	void		5082760	1					
ANR	5082866	Identifier	IOProcess :: addRequestToWorker		5082760	2					
ANR	5082867	ParameterList	"Request * request , Worker * worker"		5082760	3					
ANR	5082868	Parameter	Request * request	771:30:19487:19502	5082760	0	True				
ANR	5082869	ParameterType	Request *		5082760	0					
ANR	5082870	Identifier	request		5082760	1					
ANR	5082871	Parameter	Worker * worker	771:48:19505:19518	5082760	1	True				
ANR	5082872	ParameterType	Worker *		5082760	0					
ANR	5082873	Identifier	worker		5082760	1					
ANR	5082874	CFGEntryNode	ENTRY		5082760		True				
ANR	5082875	CFGExitNode	EXIT		5082760		True				
ANR	5082876	Symbol	request -> m_raw_cmd		5082760						
ANR	5082877	Symbol	request		5082760						
ANR	5082878	Symbol	& worker -> m_cond		5082760						
ANR	5082879	Symbol	worker -> m_is_waiting		5082760						
ANR	5082880	Symbol	D_FULLDEBUG		5082760						
ANR	5082881	Symbol	m_pending_req_list		5082760						
ANR	5082882	Symbol	worker -> m_request_list		5082760						
ANR	5082883	Symbol	* worker		5082760						
ANR	5082884	Symbol	request -> m_raw_cmd . c_str		5082760						
ANR	5082885	Symbol	worker -> m_id		5082760						
ANR	5082886	Symbol	worker -> m_is_doing		5082760						
ANR	5082887	Symbol	* request		5082760						
ANR	5082888	Symbol	request -> m_worker		5082760						
ANR	5082889	Symbol	true		5082760						
ANR	5082890	Symbol	worker		5082760						
ANR	5082891	Function	IOProcess :: numOfPendingRequest	804:0:20307:20517							
ANR	5082892	FunctionDef	IOProcess :: numOfPendingRequest ()		5082891	0					
ANR	5082893	CompoundStatement		806:0:20349:20517	5082891	0					
ANR	5082894	IdentifierDeclStatement	int num = 0 ;	807:1:20352:20363	5082891	0	True				
ANR	5082895	IdentifierDecl	num = 0		5082891	0					
ANR	5082896	IdentifierDeclType	int		5082891	0					
ANR	5082897	Identifier	num		5082891	1					
ANR	5082898	AssignmentExpression	num = 0		5082891	2		=			
ANR	5082899	Identifier	num		5082891	0					
ANR	5082900	PrimaryExpression	0		5082891	1					
ANR	5082901	ExpressionStatement	num = m_pending_req_list . Number ( )	809:1:20416:20449	5082891	1	True				
ANR	5082902	AssignmentExpression	num = m_pending_req_list . Number ( )		5082891	0		=			
ANR	5082903	Identifier	num		5082891	0					
ANR	5082904	CallExpression	m_pending_req_list . Number ( )		5082891	1					
ANR	5082905	Callee	m_pending_req_list . Number		5082891	0					
ANR	5082906	MemberAccess	m_pending_req_list . Number		5082891	0					
ANR	5082907	Identifier	m_pending_req_list		5082891	0					
ANR	5082908	Identifier	Number		5082891	1					
ANR	5082909	ArgumentList			5082891	1					
ANR	5082910	ReturnStatement	return num ;	812:1:20505:20515	5082891	2	True				
ANR	5082911	Identifier	num		5082891	0					
ANR	5082912	ReturnType	int		5082891	1					
ANR	5082913	Identifier	IOProcess :: numOfPendingRequest		5082891	2					
ANR	5082914	ParameterList			5082891	3					
ANR	5082915	CFGEntryNode	ENTRY		5082891		True				
ANR	5082916	CFGExitNode	EXIT		5082891		True				
ANR	5082917	Symbol	m_pending_req_list . Number		5082891						
ANR	5082918	Symbol	num		5082891						
ANR	5082919	Symbol	m_pending_req_list		5082891						
ANR	5082920	Function	IOProcess :: popPendingRequest	815:0:20520:20853							
ANR	5082921	FunctionDef	IOProcess :: popPendingRequest ()		5082920	0					
ANR	5082922	CompoundStatement		817:0:20565:20853	5082920	0					
ANR	5082923	IdentifierDeclStatement	Request * new_request = NULL ;	818:1:20568:20595	5082920	0	True				
ANR	5082924	IdentifierDecl	* new_request = NULL		5082920	0					
ANR	5082925	IdentifierDeclType	Request *		5082920	0					
ANR	5082926	Identifier	new_request		5082920	1					
ANR	5082927	AssignmentExpression	* new_request = NULL		5082920	2		=			
ANR	5082928	Identifier	NULL		5082920	0					
ANR	5082929	Identifier	NULL		5082920	1					
ANR	5082930	ExpressionStatement	m_pending_req_list . Rewind ( )	821:1:20649:20676	5082920	1	True				
ANR	5082931	CallExpression	m_pending_req_list . Rewind ( )		5082920	0					
ANR	5082932	Callee	m_pending_req_list . Rewind		5082920	0					
ANR	5082933	MemberAccess	m_pending_req_list . Rewind		5082920	0					
ANR	5082934	Identifier	m_pending_req_list		5082920	0					
ANR	5082935	Identifier	Rewind		5082920	1					
ANR	5082936	ArgumentList			5082920	1					
ANR	5082937	ExpressionStatement	m_pending_req_list . Next ( new_request )	822:1:20679:20715	5082920	2	True				
ANR	5082938	CallExpression	m_pending_req_list . Next ( new_request )		5082920	0					
ANR	5082939	Callee	m_pending_req_list . Next		5082920	0					
ANR	5082940	MemberAccess	m_pending_req_list . Next		5082920	0					
ANR	5082941	Identifier	m_pending_req_list		5082920	0					
ANR	5082942	Identifier	Next		5082920	1					
ANR	5082943	ArgumentList	new_request		5082920	1					
ANR	5082944	Argument	new_request		5082920	0					
ANR	5082945	Identifier	new_request		5082920	0					
ANR	5082946	IfStatement	if ( new_request )		5082920	3					
ANR	5082947	Condition	new_request	823:5:20722:20732	5082920	0	True				
ANR	5082948	Identifier	new_request		5082920	0					
ANR	5082949	CompoundStatement		7:19:170:170	5082920	1					
ANR	5082950	ExpressionStatement	m_pending_req_list . DeleteCurrent ( )	824:2:20740:20774	5082920	0	True				
ANR	5082951	CallExpression	m_pending_req_list . DeleteCurrent ( )		5082920	0					
ANR	5082952	Callee	m_pending_req_list . DeleteCurrent		5082920	0					
ANR	5082953	MemberAccess	m_pending_req_list . DeleteCurrent		5082920	0					
ANR	5082954	Identifier	m_pending_req_list		5082920	0					
ANR	5082955	Identifier	DeleteCurrent		5082920	1					
ANR	5082956	ArgumentList			5082920	1					
ANR	5082957	ReturnStatement	return new_request ;	828:1:20833:20851	5082920	4	True				
ANR	5082958	Identifier	new_request		5082920	0					
ANR	5082959	ReturnType	Request *		5082920	1					
ANR	5082960	Identifier	IOProcess :: popPendingRequest		5082920	2					
ANR	5082961	ParameterList			5082920	3					
ANR	5082962	CFGEntryNode	ENTRY		5082920		True				
ANR	5082963	CFGExitNode	EXIT		5082920		True				
ANR	5082964	Symbol	NULL		5082920						
ANR	5082965	Symbol	m_pending_req_list		5082920						
ANR	5082966	Symbol	new_request		5082920						
ANR	5082967	Function	popRequest	831:0:20856:21436							
ANR	5082968	FunctionDef	popRequest (Worker * worker)		5082967	0					
ANR	5082969	CompoundStatement		832:0:20892:21436	5082967	0					
ANR	5082970	IdentifierDeclStatement	Request * new_request = NULL ;	833:1:20895:20922	5082967	0	True				
ANR	5082971	IdentifierDecl	* new_request = NULL		5082967	0					
ANR	5082972	IdentifierDeclType	Request *		5082967	0					
ANR	5082973	Identifier	new_request		5082967	1					
ANR	5082974	AssignmentExpression	* new_request = NULL		5082967	2		=			
ANR	5082975	Identifier	NULL		5082967	0					
ANR	5082976	Identifier	NULL		5082967	1					
ANR	5082977	IfStatement	if ( ! worker )		5082967	1					
ANR	5082978	Condition	! worker	834:5:20929:20935	5082967	0	True				
ANR	5082979	UnaryOperationExpression	! worker		5082967	0					
ANR	5082980	UnaryOperator	!		5082967	0					
ANR	5082981	Identifier	worker		5082967	1					
ANR	5082982	CompoundStatement		3:15:46:46	5082967	1					
ANR	5082983	ReturnStatement	return NULL ;	835:2:20943:20954	5082967	0	True				
ANR	5082984	Identifier	NULL		5082967	0					
ANR	5082985	ExpressionStatement	worker -> m_request_list . Rewind ( )	838:1:20961:20992	5082967	2	True				
ANR	5082986	CallExpression	worker -> m_request_list . Rewind ( )		5082967	0					
ANR	5082987	Callee	worker -> m_request_list . Rewind		5082967	0					
ANR	5082988	MemberAccess	worker -> m_request_list . Rewind		5082967	0					
ANR	5082989	PtrMemberAccess	worker -> m_request_list		5082967	0					
ANR	5082990	Identifier	worker		5082967	0					
ANR	5082991	Identifier	m_request_list		5082967	1					
ANR	5082992	Identifier	Rewind		5082967	1					
ANR	5082993	ArgumentList			5082967	1					
ANR	5082994	ExpressionStatement	worker -> m_request_list . Next ( new_request )	839:1:20995:21035	5082967	3	True				
ANR	5082995	CallExpression	worker -> m_request_list . Next ( new_request )		5082967	0					
ANR	5082996	Callee	worker -> m_request_list . Next		5082967	0					
ANR	5082997	MemberAccess	worker -> m_request_list . Next		5082967	0					
ANR	5082998	PtrMemberAccess	worker -> m_request_list		5082967	0					
ANR	5082999	Identifier	worker		5082967	0					
ANR	5083000	Identifier	m_request_list		5082967	1					
ANR	5083001	Identifier	Next		5082967	1					
ANR	5083002	ArgumentList	new_request		5082967	1					
ANR	5083003	Argument	new_request		5082967	0					
ANR	5083004	Identifier	new_request		5082967	0					
ANR	5083005	IfStatement	if ( new_request )		5082967	4					
ANR	5083006	Condition	new_request	841:5:21043:21053	5082967	0	True				
ANR	5083007	Identifier	new_request		5082967	0					
ANR	5083008	CompoundStatement		10:19:164:164	5082967	1					
ANR	5083009	ExpressionStatement	worker -> m_request_list . DeleteCurrent ( )	843:2:21112:21150	5082967	0	True				
ANR	5083010	CallExpression	worker -> m_request_list . DeleteCurrent ( )		5082967	0					
ANR	5083011	Callee	worker -> m_request_list . DeleteCurrent		5082967	0					
ANR	5083012	MemberAccess	worker -> m_request_list . DeleteCurrent		5082967	0					
ANR	5083013	PtrMemberAccess	worker -> m_request_list		5082967	0					
ANR	5083014	Identifier	worker		5082967	0					
ANR	5083015	Identifier	m_request_list		5082967	1					
ANR	5083016	Identifier	DeleteCurrent		5082967	1					
ANR	5083017	ArgumentList			5082967	1					
ANR	5083018	ElseStatement	else		5082967	0					
ANR	5083019	CompoundStatement		13:7:266:266	5082967	0					
ANR	5083020	IfStatement	if ( ioprocess )		5082967	0					
ANR	5083021	Condition	ioprocess	845:6:21167:21175	5082967	0	True				
ANR	5083022	Identifier	ioprocess		5082967	0					
ANR	5083023	CompoundStatement		14:18:286:286	5082967	1					
ANR	5083024	ExpressionStatement	new_request = ioprocess -> popPendingRequest ( )	846:3:21184:21228	5082967	0	True				
ANR	5083025	AssignmentExpression	new_request = ioprocess -> popPendingRequest ( )		5082967	0		=			
ANR	5083026	Identifier	new_request		5082967	0					
ANR	5083027	CallExpression	ioprocess -> popPendingRequest ( )		5082967	1					
ANR	5083028	Callee	ioprocess -> popPendingRequest		5082967	0					
ANR	5083029	PtrMemberAccess	ioprocess -> popPendingRequest		5082967	0					
ANR	5083030	Identifier	ioprocess		5082967	0					
ANR	5083031	Identifier	popPendingRequest		5082967	1					
ANR	5083032	ArgumentList			5082967	1					
ANR	5083033	IfStatement	if ( new_request )		5082967	1					
ANR	5083034	Condition	new_request	848:7:21238:21248	5082967	0	True				
ANR	5083035	Identifier	new_request		5082967	0					
ANR	5083036	CompoundStatement		17:21:359:359	5082967	1					
ANR	5083037	ExpressionStatement	new_request -> m_worker = worker	849:4:21258:21288	5082967	0	True				
ANR	5083038	AssignmentExpression	new_request -> m_worker = worker		5082967	0		=			
ANR	5083039	PtrMemberAccess	new_request -> m_worker		5082967	0					
ANR	5083040	Identifier	new_request		5082967	0					
ANR	5083041	Identifier	m_worker		5082967	1					
ANR	5083042	Identifier	worker		5082967	1					
ANR	5083043	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Assigning %s to worker %d\\n"" , new_request -> m_raw_cmd . c_str ( ) , worker -> m_id )"	851:4:21295:21400	5082967	1	True				
ANR	5083044	CallExpression	"dprintf ( D_FULLDEBUG , ""Assigning %s to worker %d\\n"" , new_request -> m_raw_cmd . c_str ( ) , worker -> m_id )"		5082967	0					
ANR	5083045	Callee	dprintf		5082967	0					
ANR	5083046	Identifier	dprintf		5082967	0					
ANR	5083047	ArgumentList	D_FULLDEBUG		5082967	1					
ANR	5083048	Argument	D_FULLDEBUG		5082967	0					
ANR	5083049	Identifier	D_FULLDEBUG		5082967	0					
ANR	5083050	Argument	"""Assigning %s to worker %d\\n"""		5082967	1					
ANR	5083051	PrimaryExpression	"""Assigning %s to worker %d\\n"""		5082967	0					
ANR	5083052	Argument	new_request -> m_raw_cmd . c_str ( )		5082967	2					
ANR	5083053	CallExpression	new_request -> m_raw_cmd . c_str ( )		5082967	0					
ANR	5083054	Callee	new_request -> m_raw_cmd . c_str		5082967	0					
ANR	5083055	MemberAccess	new_request -> m_raw_cmd . c_str		5082967	0					
ANR	5083056	PtrMemberAccess	new_request -> m_raw_cmd		5082967	0					
ANR	5083057	Identifier	new_request		5082967	0					
ANR	5083058	Identifier	m_raw_cmd		5082967	1					
ANR	5083059	Identifier	c_str		5082967	1					
ANR	5083060	ArgumentList			5082967	1					
ANR	5083061	Argument	worker -> m_id		5082967	3					
ANR	5083062	PtrMemberAccess	worker -> m_id		5082967	0					
ANR	5083063	Identifier	worker		5082967	0					
ANR	5083064	Identifier	m_id		5082967	1					
ANR	5083065	ReturnStatement	return new_request ;	857:1:21416:21434	5082967	5	True				
ANR	5083066	Identifier	new_request		5082967	0					
ANR	5083067	ReturnType	Request *		5082967	1					
ANR	5083068	Identifier	popRequest		5082967	2					
ANR	5083069	ParameterList	Worker * worker		5082967	3					
ANR	5083070	Parameter	Worker * worker	831:20:20876:20889	5082967	0	True				
ANR	5083071	ParameterType	Worker *		5082967	0					
ANR	5083072	Identifier	worker		5082967	1					
ANR	5083073	CFGEntryNode	ENTRY		5082967		True				
ANR	5083074	CFGExitNode	EXIT		5082967		True				
ANR	5083075	Symbol	new_request -> m_raw_cmd . c_str		5082967						
ANR	5083076	Symbol	NULL		5082967						
ANR	5083077	Symbol	ioprocess -> popPendingRequest		5082967						
ANR	5083078	Symbol	* ioprocess		5082967						
ANR	5083079	Symbol	ioprocess		5082967						
ANR	5083080	Symbol	D_FULLDEBUG		5082967						
ANR	5083081	Symbol	worker -> m_request_list		5082967						
ANR	5083082	Symbol	new_request -> m_raw_cmd		5082967						
ANR	5083083	Symbol	* worker		5082967						
ANR	5083084	Symbol	worker -> m_id		5082967						
ANR	5083085	Symbol	* new_request		5082967						
ANR	5083086	Symbol	worker		5082967						
ANR	5083087	Symbol	new_request		5082967						
ANR	5083088	Symbol	new_request -> m_worker		5082967						
ANR	5083089	Function	enqueue_result	860:0:21439:21615							
ANR	5083090	FunctionDef	enqueue_result (Request * request)		5083089	0					
ANR	5083091	CompoundStatement		862:0:21484:21615	5083089	0					
ANR	5083092	IfStatement	if ( ! request || request -> m_result . empty ( ) || ! ioprocess )		5083089	0					
ANR	5083093	Condition	! request || request -> m_result . empty ( ) || ! ioprocess	863:5:21491:21545	5083089	0	True				
ANR	5083094	OrExpression	! request || request -> m_result . empty ( ) || ! ioprocess		5083089	0		||			
ANR	5083095	UnaryOperationExpression	! request		5083089	0					
ANR	5083096	UnaryOperator	!		5083089	0					
ANR	5083097	Identifier	request		5083089	1					
ANR	5083098	OrExpression	request -> m_result . empty ( ) || ! ioprocess		5083089	1		||			
ANR	5083099	CallExpression	request -> m_result . empty ( )		5083089	0					
ANR	5083100	Callee	request -> m_result . empty		5083089	0					
ANR	5083101	MemberAccess	request -> m_result . empty		5083089	0					
ANR	5083102	PtrMemberAccess	request -> m_result		5083089	0					
ANR	5083103	Identifier	request		5083089	0					
ANR	5083104	Identifier	m_result		5083089	1					
ANR	5083105	Identifier	empty		5083089	1					
ANR	5083106	ArgumentList			5083089	1					
ANR	5083107	UnaryOperationExpression	! ioprocess		5083089	1					
ANR	5083108	UnaryOperator	!		5083089	0					
ANR	5083109	Identifier	ioprocess		5083089	1					
ANR	5083110	CompoundStatement		3:19:64:64	5083089	1					
ANR	5083111	ReturnStatement	return ;	865:2:21553:21559	5083089	0	True				
ANR	5083112	ExpressionStatement	ioprocess -> addResult ( request -> m_result . c_str ( ) )	868:1:21566:21613	5083089	1	True				
ANR	5083113	CallExpression	ioprocess -> addResult ( request -> m_result . c_str ( ) )		5083089	0					
ANR	5083114	Callee	ioprocess -> addResult		5083089	0					
ANR	5083115	PtrMemberAccess	ioprocess -> addResult		5083089	0					
ANR	5083116	Identifier	ioprocess		5083089	0					
ANR	5083117	Identifier	addResult		5083089	1					
ANR	5083118	ArgumentList	request -> m_result . c_str ( )		5083089	1					
ANR	5083119	Argument	request -> m_result . c_str ( )		5083089	0					
ANR	5083120	CallExpression	request -> m_result . c_str ( )		5083089	0					
ANR	5083121	Callee	request -> m_result . c_str		5083089	0					
ANR	5083122	MemberAccess	request -> m_result . c_str		5083089	0					
ANR	5083123	PtrMemberAccess	request -> m_result		5083089	0					
ANR	5083124	Identifier	request		5083089	0					
ANR	5083125	Identifier	m_result		5083089	1					
ANR	5083126	Identifier	c_str		5083089	1					
ANR	5083127	ArgumentList			5083089	1					
ANR	5083128	ReturnType	static void		5083089	1					
ANR	5083129	Identifier	enqueue_result		5083089	2					
ANR	5083130	ParameterList	Request * request		5083089	3					
ANR	5083131	Parameter	Request * request	861:15:21466:21481	5083089	0	True				
ANR	5083132	ParameterType	Request *		5083089	0					
ANR	5083133	Identifier	request		5083089	1					
ANR	5083134	CFGEntryNode	ENTRY		5083089		True				
ANR	5083135	CFGExitNode	EXIT		5083089		True				
ANR	5083136	Symbol	request		5083089						
ANR	5083137	Symbol	* request		5083089						
ANR	5083138	Symbol	ioprocess		5083089						
ANR	5083139	Symbol	request -> m_result . empty		5083089						
ANR	5083140	Symbol	request -> m_result		5083089						
ANR	5083141	Symbol	request -> m_result . c_str		5083089						
ANR	5083142	Function	handle_gahp_command	871:0:21618:22160							
ANR	5083143	FunctionDef	handle_gahp_command (Request * request)		5083142	0					
ANR	5083144	CompoundStatement		873:0:21668:22160	5083142	0					
ANR	5083145	IfStatement	if ( ! request )		5083142	0					
ANR	5083146	Condition	! request	874:5:21675:21682	5083142	0	True				
ANR	5083147	UnaryOperationExpression	! request		5083142	0					
ANR	5083148	UnaryOperator	!		5083142	0					
ANR	5083149	Identifier	request		5083142	1					
ANR	5083150	CompoundStatement		2:16:17:17	5083142	1					
ANR	5083151	ReturnStatement	return false ;	875:2:21690:21702	5083142	0	True				
ANR	5083152	Identifier	false		5083142	0					
ANR	5083153	IdentifierDeclStatement	char * * argv = request -> m_args . argv ;	877:1:21708:21743	5083142	1	True				
ANR	5083154	IdentifierDecl	* * argv = request -> m_args . argv		5083142	0					
ANR	5083155	IdentifierDeclType	char * *		5083142	0					
ANR	5083156	Identifier	argv		5083142	1					
ANR	5083157	AssignmentExpression	* * argv = request -> m_args . argv		5083142	2		=			
ANR	5083158	Identifier	argv		5083142	0					
ANR	5083159	MemberAccess	request -> m_args . argv		5083142	1					
ANR	5083160	PtrMemberAccess	request -> m_args		5083142	0					
ANR	5083161	Identifier	request		5083142	0					
ANR	5083162	Identifier	m_args		5083142	1					
ANR	5083163	Identifier	argv		5083142	1					
ANR	5083164	IdentifierDeclStatement	int argc = request -> m_args . argc ;	878:1:21746:21777	5083142	2	True				
ANR	5083165	IdentifierDecl	argc = request -> m_args . argc		5083142	0					
ANR	5083166	IdentifierDeclType	int		5083142	0					
ANR	5083167	Identifier	argc		5083142	1					
ANR	5083168	AssignmentExpression	argc = request -> m_args . argc		5083142	2		=			
ANR	5083169	Identifier	argc		5083142	0					
ANR	5083170	MemberAccess	request -> m_args . argc		5083142	1					
ANR	5083171	PtrMemberAccess	request -> m_args		5083142	0					
ANR	5083172	Identifier	request		5083142	0					
ANR	5083173	Identifier	m_args		5083142	1					
ANR	5083174	Identifier	argc		5083142	1					
ANR	5083175	IfStatement	if ( argc < 2 )		5083142	3					
ANR	5083176	Condition	argc < 2	881:5:21815:21822	5083142	0	True				
ANR	5083177	RelationalExpression	argc < 2		5083142	0		<			
ANR	5083178	Identifier	argc		5083142	0					
ANR	5083179	PrimaryExpression	2		5083142	1					
ANR	5083180	CompoundStatement		9:16:157:157	5083142	1					
ANR	5083181	ExpressionStatement	"dprintf ( D_ALWAYS , ""Invalid request\\n"" )"	882:2:21830:21869	5083142	0	True				
ANR	5083182	CallExpression	"dprintf ( D_ALWAYS , ""Invalid request\\n"" )"		5083142	0					
ANR	5083183	Callee	dprintf		5083142	0					
ANR	5083184	Identifier	dprintf		5083142	0					
ANR	5083185	ArgumentList	D_ALWAYS		5083142	1					
ANR	5083186	Argument	D_ALWAYS		5083142	0					
ANR	5083187	Identifier	D_ALWAYS		5083142	0					
ANR	5083188	Argument	"""Invalid request\\n"""		5083142	1					
ANR	5083189	PrimaryExpression	"""Invalid request\\n"""		5083142	0					
ANR	5083190	ReturnStatement	return false ;	883:2:21873:21885	5083142	1	True				
ANR	5083191	Identifier	false		5083142	0					
ANR	5083192	IfStatement	if ( ! verify_request_id ( argv [ 1 ] ) )		5083142	4					
ANR	5083193	Condition	! verify_request_id ( argv [ 1 ] )	886:5:21896:21922	5083142	0	True				
ANR	5083194	UnaryOperationExpression	! verify_request_id ( argv [ 1 ] )		5083142	0					
ANR	5083195	UnaryOperator	!		5083142	0					
ANR	5083196	CallExpression	verify_request_id ( argv [ 1 ] )		5083142	1					
ANR	5083197	Callee	verify_request_id		5083142	0					
ANR	5083198	Identifier	verify_request_id		5083142	0					
ANR	5083199	ArgumentList	argv [ 1 ]		5083142	1					
ANR	5083200	Argument	argv [ 1 ]		5083142	0					
ANR	5083201	ArrayIndexing	argv [ 1 ]		5083142	0					
ANR	5083202	Identifier	argv		5083142	0					
ANR	5083203	PrimaryExpression	1		5083142	1					
ANR	5083204	CompoundStatement		14:35:257:257	5083142	1					
ANR	5083205	ExpressionStatement	"dprintf ( D_ALWAYS , ""Invalid request ID\\n"" )"	887:2:21930:21972	5083142	0	True				
ANR	5083206	CallExpression	"dprintf ( D_ALWAYS , ""Invalid request ID\\n"" )"		5083142	0					
ANR	5083207	Callee	dprintf		5083142	0					
ANR	5083208	Identifier	dprintf		5083142	0					
ANR	5083209	ArgumentList	D_ALWAYS		5083142	1					
ANR	5083210	Argument	D_ALWAYS		5083142	0					
ANR	5083211	Identifier	D_ALWAYS		5083142	0					
ANR	5083212	Argument	"""Invalid request ID\\n"""		5083142	1					
ANR	5083213	PrimaryExpression	"""Invalid request ID\\n"""		5083142	0					
ANR	5083214	ReturnStatement	return false ;	888:2:21976:21988	5083142	1	True				
ANR	5083215	Identifier	false		5083142	0					
ANR	5083216	IdentifierDeclStatement	"bool result = executeWorkerFunc ( argv [ 0 ] , argv , argc , request -> m_result ) ;"	891:1:21995:22066	5083142	5	True				
ANR	5083217	IdentifierDecl	"result = executeWorkerFunc ( argv [ 0 ] , argv , argc , request -> m_result )"		5083142	0					
ANR	5083218	IdentifierDeclType	bool		5083142	0					
ANR	5083219	Identifier	result		5083142	1					
ANR	5083220	AssignmentExpression	"result = executeWorkerFunc ( argv [ 0 ] , argv , argc , request -> m_result )"		5083142	2		=			
ANR	5083221	Identifier	result		5083142	0					
ANR	5083222	CallExpression	"executeWorkerFunc ( argv [ 0 ] , argv , argc , request -> m_result )"		5083142	1					
ANR	5083223	Callee	executeWorkerFunc		5083142	0					
ANR	5083224	Identifier	executeWorkerFunc		5083142	0					
ANR	5083225	ArgumentList	argv [ 0 ]		5083142	1					
ANR	5083226	Argument	argv [ 0 ]		5083142	0					
ANR	5083227	ArrayIndexing	argv [ 0 ]		5083142	0					
ANR	5083228	Identifier	argv		5083142	0					
ANR	5083229	PrimaryExpression	0		5083142	1					
ANR	5083230	Argument	argv		5083142	1					
ANR	5083231	Identifier	argv		5083142	0					
ANR	5083232	Argument	argc		5083142	2					
ANR	5083233	Identifier	argc		5083142	0					
ANR	5083234	Argument	request -> m_result		5083142	3					
ANR	5083235	PtrMemberAccess	request -> m_result		5083142	0					
ANR	5083236	Identifier	request		5083142	0					
ANR	5083237	Identifier	m_result		5083142	1					
ANR	5083238	IfStatement	if ( request -> m_result . empty ( ) == false )		5083142	6					
ANR	5083239	Condition	request -> m_result . empty ( ) == false	893:5:22074:22107	5083142	0	True				
ANR	5083240	EqualityExpression	request -> m_result . empty ( ) == false		5083142	0		==			
ANR	5083241	CallExpression	request -> m_result . empty ( )		5083142	0					
ANR	5083242	Callee	request -> m_result . empty		5083142	0					
ANR	5083243	MemberAccess	request -> m_result . empty		5083142	0					
ANR	5083244	PtrMemberAccess	request -> m_result		5083142	0					
ANR	5083245	Identifier	request		5083142	0					
ANR	5083246	Identifier	m_result		5083142	1					
ANR	5083247	Identifier	empty		5083142	1					
ANR	5083248	ArgumentList			5083142	1					
ANR	5083249	Identifier	false		5083142	1					
ANR	5083250	CompoundStatement		21:42:442:442	5083142	1					
ANR	5083251	ExpressionStatement	enqueue_result ( request )	894:2:22115:22138	5083142	0	True				
ANR	5083252	CallExpression	enqueue_result ( request )		5083142	0					
ANR	5083253	Callee	enqueue_result		5083142	0					
ANR	5083254	Identifier	enqueue_result		5083142	0					
ANR	5083255	ArgumentList	request		5083142	1					
ANR	5083256	Argument	request		5083142	0					
ANR	5083257	Identifier	request		5083142	0					
ANR	5083258	ReturnStatement	return result ;	897:1:22145:22158	5083142	7	True				
ANR	5083259	Identifier	result		5083142	0					
ANR	5083260	ReturnType	static bool		5083142	1					
ANR	5083261	Identifier	handle_gahp_command		5083142	2					
ANR	5083262	ParameterList	Request * request		5083142	3					
ANR	5083263	Parameter	Request * request	872:20:21650:21665	5083142	0	True				
ANR	5083264	ParameterType	Request *		5083142	0					
ANR	5083265	Identifier	request		5083142	1					
ANR	5083266	CFGEntryNode	ENTRY		5083142		True				
ANR	5083267	CFGExitNode	EXIT		5083142		True				
ANR	5083268	Symbol	argc		5083142						
ANR	5083269	Symbol	request		5083142						
ANR	5083270	Symbol	request -> m_args . argv		5083142						
ANR	5083271	Symbol	false		5083142						
ANR	5083272	Symbol	D_ALWAYS		5083142						
ANR	5083273	Symbol	request -> m_result . empty		5083142						
ANR	5083274	Symbol	* argv		5083142						
ANR	5083275	Symbol	request -> m_result		5083142						
ANR	5083276	Symbol	argv		5083142						
ANR	5083277	Symbol	executeWorkerFunc		5083142						
ANR	5083278	Symbol	result		5083142						
ANR	5083279	Symbol	request -> m_args . argc		5083142						
ANR	5083280	Symbol	* request		5083142						
ANR	5083281	Symbol	verify_request_id		5083142						
ANR	5083282	Symbol	request -> m_args		5083142						
ANR	5083283	Function	worker_exit	900:0:22163:23249							
ANR	5083284	FunctionDef	"worker_exit (Worker * worker , bool force)"		5083283	0					
ANR	5083285	CompoundStatement		901:0:22215:23249	5083283	0					
ANR	5083286	IfStatement	if ( ! worker )		5083283	0					
ANR	5083287	Condition	! worker	902:5:22222:22228	5083283	0	True				
ANR	5083288	UnaryOperationExpression	! worker		5083283	0					
ANR	5083289	UnaryOperator	!		5083283	0					
ANR	5083290	Identifier	worker		5083283	1					
ANR	5083291	CompoundStatement		2:15:16:16	5083283	1					
ANR	5083292	ReturnStatement	return ;	903:2:22236:22242	5083283	0	True				
ANR	5083293	IdentifierDeclStatement	int worker_id = worker -> m_id ;	906:1:22249:22277	5083283	1	True				
ANR	5083294	IdentifierDecl	worker_id = worker -> m_id		5083283	0					
ANR	5083295	IdentifierDeclType	int		5083283	0					
ANR	5083296	Identifier	worker_id		5083283	1					
ANR	5083297	AssignmentExpression	worker_id = worker -> m_id		5083283	2		=			
ANR	5083298	Identifier	worker_id		5083283	0					
ANR	5083299	PtrMemberAccess	worker -> m_id		5083283	1					
ANR	5083300	Identifier	worker		5083283	0					
ANR	5083301	Identifier	m_id		5083283	1					
ANR	5083302	IdentifierDeclStatement	bool need_remove = force ;	908:1:22281:22305	5083283	2	True				
ANR	5083303	IdentifierDecl	need_remove = force		5083283	0					
ANR	5083304	IdentifierDeclType	bool		5083283	0					
ANR	5083305	Identifier	need_remove		5083283	1					
ANR	5083306	AssignmentExpression	need_remove = force		5083283	2		=			
ANR	5083307	Identifier	force		5083283	0					
ANR	5083308	Identifier	force		5083283	1					
ANR	5083309	IfStatement	if ( ioprocess )		5083283	3					
ANR	5083310	Condition	ioprocess	909:5:22312:22320	5083283	0	True				
ANR	5083311	Identifier	ioprocess		5083283	0					
ANR	5083312	CompoundStatement		9:17:108:108	5083283	1					
ANR	5083313	ExpressionStatement	ioprocess -> LockWorkerList ( )	910:2:22328:22355	5083283	0	True				
ANR	5083314	CallExpression	ioprocess -> LockWorkerList ( )		5083283	0					
ANR	5083315	Callee	ioprocess -> LockWorkerList		5083283	0					
ANR	5083316	PtrMemberAccess	ioprocess -> LockWorkerList		5083283	0					
ANR	5083317	Identifier	ioprocess		5083283	0					
ANR	5083318	Identifier	LockWorkerList		5083283	1					
ANR	5083319	ArgumentList			5083283	1					
ANR	5083320	IfStatement	if ( need_remove == false )		5083283	1					
ANR	5083321	Condition	need_remove == false	912:6:22364:22383	5083283	0	True				
ANR	5083322	EqualityExpression	need_remove == false		5083283	0		==			
ANR	5083323	Identifier	need_remove		5083283	0					
ANR	5083324	Identifier	false		5083283	1					
ANR	5083325	CompoundStatement		12:29:171:171	5083283	1					
ANR	5083326	IfStatement	if ( ioprocess -> m_avail_workers_num > ioprocess -> m_min_workers )		5083283	0					
ANR	5083327	Condition	ioprocess -> m_avail_workers_num > ioprocess -> m_min_workers	913:7:22396:22452	5083283	0	True				
ANR	5083328	RelationalExpression	ioprocess -> m_avail_workers_num > ioprocess -> m_min_workers		5083283	0		>			
ANR	5083329	PtrMemberAccess	ioprocess -> m_avail_workers_num		5083283	0					
ANR	5083330	Identifier	ioprocess		5083283	0					
ANR	5083331	Identifier	m_avail_workers_num		5083283	1					
ANR	5083332	PtrMemberAccess	ioprocess -> m_min_workers		5083283	1					
ANR	5083333	Identifier	ioprocess		5083283	0					
ANR	5083334	Identifier	m_min_workers		5083283	1					
ANR	5083335	CompoundStatement		13:67:240:240	5083283	1					
ANR	5083336	ExpressionStatement	need_remove = true	914:4:22462:22480	5083283	0	True				
ANR	5083337	AssignmentExpression	need_remove = true		5083283	0		=			
ANR	5083338	Identifier	need_remove		5083283	0					
ANR	5083339	Identifier	true		5083283	1					
ANR	5083340	IfStatement	if ( need_remove )		5083283	2					
ANR	5083341	Condition	need_remove	918:6:22498:22508	5083283	0	True				
ANR	5083342	Identifier	need_remove		5083283	0					
ANR	5083343	CompoundStatement		18:20:296:296	5083283	1					
ANR	5083344	ExpressionStatement	ioprocess -> removeWorkerFromWorkerList ( worker -> m_id )	920:3:22580:22631	5083283	0	True				
ANR	5083345	CallExpression	ioprocess -> removeWorkerFromWorkerList ( worker -> m_id )		5083283	0					
ANR	5083346	Callee	ioprocess -> removeWorkerFromWorkerList		5083283	0					
ANR	5083347	PtrMemberAccess	ioprocess -> removeWorkerFromWorkerList		5083283	0					
ANR	5083348	Identifier	ioprocess		5083283	0					
ANR	5083349	Identifier	removeWorkerFromWorkerList		5083283	1					
ANR	5083350	ArgumentList	worker -> m_id		5083283	1					
ANR	5083351	Argument	worker -> m_id		5083283	0					
ANR	5083352	PtrMemberAccess	worker -> m_id		5083283	0					
ANR	5083353	Identifier	worker		5083283	0					
ANR	5083354	Identifier	m_id		5083283	1					
ANR	5083355	ExpressionStatement	worker = NULL	921:3:22636:22649	5083283	1	True				
ANR	5083356	AssignmentExpression	worker = NULL		5083283	0		=			
ANR	5083357	Identifier	worker		5083283	0					
ANR	5083358	Identifier	NULL		5083283	1					
ANR	5083359	ExpressionStatement	ioprocess -> m_avail_workers_num --	922:3:22654:22686	5083283	2	True				
ANR	5083360	PostIncDecOperationExpression	ioprocess -> m_avail_workers_num --		5083283	0					
ANR	5083361	PtrMemberAccess	ioprocess -> m_avail_workers_num		5083283	0					
ANR	5083362	Identifier	ioprocess		5083283	0					
ANR	5083363	Identifier	m_avail_workers_num		5083283	1					
ANR	5083364	IncDec	--		5083283	1					
ANR	5083365	ExpressionStatement	ioprocess -> UnlockWorkerList ( )	925:2:22695:22724	5083283	3	True				
ANR	5083366	CallExpression	ioprocess -> UnlockWorkerList ( )		5083283	0					
ANR	5083367	Callee	ioprocess -> UnlockWorkerList		5083283	0					
ANR	5083368	PtrMemberAccess	ioprocess -> UnlockWorkerList		5083283	0					
ANR	5083369	Identifier	ioprocess		5083283	0					
ANR	5083370	Identifier	UnlockWorkerList		5083283	1					
ANR	5083371	ArgumentList			5083283	1					
ANR	5083372	IfStatement	if ( need_remove )		5083283	4					
ANR	5083373	Condition	need_remove	928:5:22735:22745	5083283	0	True				
ANR	5083374	Identifier	need_remove		5083283	0					
ANR	5083375	CompoundStatement		31:2:604:618	5083283	1					
ANR	5083376	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Thread(%d) is exiting...\\n"" , worker_id )"	929:2:22753:22814	5083283	0	True				
ANR	5083377	CallExpression	"dprintf ( D_FULLDEBUG , ""Thread(%d) is exiting...\\n"" , worker_id )"		5083283	0					
ANR	5083378	Callee	dprintf		5083283	0					
ANR	5083379	Identifier	dprintf		5083283	0					
ANR	5083380	ArgumentList	D_FULLDEBUG		5083283	1					
ANR	5083381	Argument	D_FULLDEBUG		5083283	0					
ANR	5083382	Identifier	D_FULLDEBUG		5083283	0					
ANR	5083383	Argument	"""Thread(%d) is exiting...\\n"""		5083283	1					
ANR	5083384	PrimaryExpression	"""Thread(%d) is exiting...\\n"""		5083283	0					
ANR	5083385	Argument	worker_id		5083283	2					
ANR	5083386	Identifier	worker_id		5083283	0					
ANR	5083387	IdentifierDeclStatement	int retval = 0 ;	931:2:22820:22834	5083283	1	True				
ANR	5083388	IdentifierDecl	retval = 0		5083283	0					
ANR	5083389	IdentifierDeclType	int		5083283	0					
ANR	5083390	Identifier	retval		5083283	1					
ANR	5083391	AssignmentExpression	retval = 0		5083283	2		=			
ANR	5083392	Identifier	retval		5083283	0					
ANR	5083393	PrimaryExpression	0		5083283	1					
ANR	5083394	ExpressionStatement	amazon_gahp_release_big_mutex ( )	932:2:22838:22869	5083283	2	True				
ANR	5083395	CallExpression	amazon_gahp_release_big_mutex ( )		5083283	0					
ANR	5083396	Callee	amazon_gahp_release_big_mutex		5083283	0					
ANR	5083397	Identifier	amazon_gahp_release_big_mutex		5083283	0					
ANR	5083398	ArgumentList			5083283	1					
ANR	5083399	ExpressionStatement	pthread_exit ( & retval )	933:2:22873:22894	5083283	3	True				
ANR	5083400	CallExpression	pthread_exit ( & retval )		5083283	0					
ANR	5083401	Callee	pthread_exit		5083283	0					
ANR	5083402	Identifier	pthread_exit		5083283	0					
ANR	5083403	ArgumentList	& retval		5083283	1					
ANR	5083404	Argument	& retval		5083283	0					
ANR	5083405	UnaryOperationExpression	& retval		5083283	0					
ANR	5083406	UnaryOperator	&		5083283	0					
ANR	5083407	Identifier	retval		5083283	1					
ANR	5083408	ElseStatement	else		5083283	0					
ANR	5083409	CompoundStatement		34:7:687:687	5083283	0					
ANR	5083410	ExpressionStatement	worker -> m_can_use = true	941:2:23077:23101	5083283	0	True				
ANR	5083411	AssignmentExpression	worker -> m_can_use = true		5083283	0		=			
ANR	5083412	PtrMemberAccess	worker -> m_can_use		5083283	0					
ANR	5083413	Identifier	worker		5083283	0					
ANR	5083414	Identifier	m_can_use		5083283	1					
ANR	5083415	Identifier	true		5083283	1					
ANR	5083416	ExpressionStatement	worker -> m_is_doing = false	943:2:23106:23132	5083283	1	True				
ANR	5083417	AssignmentExpression	worker -> m_is_doing = false		5083283	0		=			
ANR	5083418	PtrMemberAccess	worker -> m_is_doing		5083283	0					
ANR	5083419	Identifier	worker		5083283	0					
ANR	5083420	Identifier	m_is_doing		5083283	1					
ANR	5083421	Identifier	false		5083283	1					
ANR	5083422	ExpressionStatement	worker -> m_is_waiting = false	944:2:23136:23164	5083283	2	True				
ANR	5083423	AssignmentExpression	worker -> m_is_waiting = false		5083283	0		=			
ANR	5083424	PtrMemberAccess	worker -> m_is_waiting		5083283	0					
ANR	5083425	Identifier	worker		5083283	0					
ANR	5083426	Identifier	m_is_waiting		5083283	1					
ANR	5083427	Identifier	false		5083283	1					
ANR	5083428	ExpressionStatement	worker -> m_must_be_alive = false	945:2:23168:23199	5083283	3	True				
ANR	5083429	AssignmentExpression	worker -> m_must_be_alive = false		5083283	0		=			
ANR	5083430	PtrMemberAccess	worker -> m_must_be_alive		5083283	0					
ANR	5083431	Identifier	worker		5083283	0					
ANR	5083432	Identifier	m_must_be_alive		5083283	1					
ANR	5083433	Identifier	false		5083283	1					
ANR	5083434	ReturnType	static void		5083283	1					
ANR	5083435	Identifier	worker_exit		5083283	2					
ANR	5083436	ParameterList	"Worker * worker , bool force"		5083283	3					
ANR	5083437	Parameter	Worker * worker	900:24:22187:22200	5083283	0	True				
ANR	5083438	ParameterType	Worker *		5083283	0					
ANR	5083439	Identifier	worker		5083283	1					
ANR	5083440	Parameter	bool force	900:40:22203:22212	5083283	1	True				
ANR	5083441	ParameterType	bool		5083283	0					
ANR	5083442	Identifier	force		5083283	1					
ANR	5083443	CFGEntryNode	ENTRY		5083283		True				
ANR	5083444	CFGExitNode	EXIT		5083283		True				
ANR	5083445	Symbol	need_remove		5083283						
ANR	5083446	Symbol	NULL		5083283						
ANR	5083447	Symbol	worker -> m_is_waiting		5083283						
ANR	5083448	Symbol	* ioprocess		5083283						
ANR	5083449	Symbol	ioprocess -> m_min_workers		5083283						
ANR	5083450	Symbol	ioprocess -> m_avail_workers_num		5083283						
ANR	5083451	Symbol	ioprocess		5083283						
ANR	5083452	Symbol	false		5083283						
ANR	5083453	Symbol	D_FULLDEBUG		5083283						
ANR	5083454	Symbol	worker -> m_must_be_alive		5083283						
ANR	5083455	Symbol	retval		5083283						
ANR	5083456	Symbol	worker_id		5083283						
ANR	5083457	Symbol	* worker		5083283						
ANR	5083458	Symbol	worker -> m_id		5083283						
ANR	5083459	Symbol	worker -> m_is_doing		5083283						
ANR	5083460	Symbol	worker -> m_can_use		5083283						
ANR	5083461	Symbol	true		5083283						
ANR	5083462	Symbol	& retval		5083283						
ANR	5083463	Symbol	force		5083283						
ANR	5083464	Symbol	worker		5083283						
ANR	5083465	Function	worker_function	951:0:23252:26239							
ANR	5083466	FunctionDef	worker_function (void * ptr)		5083465	0					
ANR	5083467	CompoundStatement		952:0:23295:26239	5083465	0					
ANR	5083468	IdentifierDeclStatement	Worker * worker = ( Worker * ) ptr ;	953:1:23298:23328	5083465	0	True				
ANR	5083469	IdentifierDecl	* worker = ( Worker * ) ptr		5083465	0					
ANR	5083470	IdentifierDeclType	Worker *		5083465	0					
ANR	5083471	Identifier	worker		5083465	1					
ANR	5083472	AssignmentExpression	* worker = ( Worker * ) ptr		5083465	2		=			
ANR	5083473	Identifier	worker		5083465	0					
ANR	5083474	CastExpression	( Worker * ) ptr		5083465	1					
ANR	5083475	CastTarget	Worker *		5083465	0					
ANR	5083476	Identifier	ptr		5083465	1					
ANR	5083477	ExpressionStatement	amazon_gahp_grab_big_mutex ( )	960:1:23497:23525	5083465	1	True				
ANR	5083478	CallExpression	amazon_gahp_grab_big_mutex ( )		5083465	0					
ANR	5083479	Callee	amazon_gahp_grab_big_mutex		5083465	0					
ANR	5083480	Identifier	amazon_gahp_grab_big_mutex		5083465	0					
ANR	5083481	ArgumentList			5083465	1					
ANR	5083482	IfStatement	if ( ! worker )		5083465	2					
ANR	5083483	Condition	! worker	962:5:23533:23539	5083465	0	True				
ANR	5083484	UnaryOperationExpression	! worker		5083465	0					
ANR	5083485	UnaryOperator	!		5083465	0					
ANR	5083486	Identifier	worker		5083465	1					
ANR	5083487	CompoundStatement		11:15:247:247	5083465	1					
ANR	5083488	ExpressionStatement	"dprintf ( D_ALWAYS , ""Ooops!! No input Data in worker thread\\n"" )"	963:2:23547:23609	5083465	0	True				
ANR	5083489	CallExpression	"dprintf ( D_ALWAYS , ""Ooops!! No input Data in worker thread\\n"" )"		5083465	0					
ANR	5083490	Callee	dprintf		5083465	0					
ANR	5083491	Identifier	dprintf		5083465	0					
ANR	5083492	ArgumentList	D_ALWAYS		5083465	1					
ANR	5083493	Argument	D_ALWAYS		5083465	0					
ANR	5083494	Identifier	D_ALWAYS		5083465	0					
ANR	5083495	Argument	"""Ooops!! No input Data in worker thread\\n"""		5083465	1					
ANR	5083496	PrimaryExpression	"""Ooops!! No input Data in worker thread\\n"""		5083465	0					
ANR	5083497	ExpressionStatement	amazon_gahp_release_big_mutex ( )	964:2:23613:23644	5083465	1	True				
ANR	5083498	CallExpression	amazon_gahp_release_big_mutex ( )		5083465	0					
ANR	5083499	Callee	amazon_gahp_release_big_mutex		5083465	0					
ANR	5083500	Identifier	amazon_gahp_release_big_mutex		5083465	0					
ANR	5083501	ArgumentList			5083465	1					
ANR	5083502	ReturnStatement	return NULL ;	965:2:23648:23659	5083465	2	True				
ANR	5083503	Identifier	NULL		5083465	0					
ANR	5083504	IdentifierDeclStatement	Request * new_request = NULL ;	969:1:23683:23710	5083465	3	True				
ANR	5083505	IdentifierDecl	* new_request = NULL		5083465	0					
ANR	5083506	IdentifierDeclType	Request *		5083465	0					
ANR	5083507	Identifier	new_request		5083465	1					
ANR	5083508	AssignmentExpression	* new_request = NULL		5083465	2		=			
ANR	5083509	Identifier	NULL		5083465	0					
ANR	5083510	Identifier	NULL		5083465	1					
ANR	5083511	IdentifierDeclStatement	struct timespec ts ;	970:1:23713:23731	5083465	4	True				
ANR	5083512	IdentifierDecl	ts		5083465	0					
ANR	5083513	IdentifierDeclType	struct timespec		5083465	0					
ANR	5083514	Identifier	ts		5083465	1					
ANR	5083515	IdentifierDeclStatement	struct timeval tp ;	971:1:23734:23751	5083465	5	True				
ANR	5083516	IdentifierDecl	tp		5083465	0					
ANR	5083517	IdentifierDeclType	struct timeval		5083465	0					
ANR	5083518	Identifier	tp		5083465	1					
ANR	5083519	WhileStatement	while ( 1 )		5083465	6					
ANR	5083520	Condition	1	973:7:23761:23761	5083465	0	True				
ANR	5083521	PrimaryExpression	1		5083465	0					
ANR	5083522	CompoundStatement		22:10:468:468	5083465	1					
ANR	5083523	ExpressionStatement	worker -> m_is_doing = false	977:2:23812:23838	5083465	0	True				
ANR	5083524	AssignmentExpression	worker -> m_is_doing = false		5083465	0		=			
ANR	5083525	PtrMemberAccess	worker -> m_is_doing		5083465	0					
ANR	5083526	Identifier	worker		5083465	0					
ANR	5083527	Identifier	m_is_doing		5083465	1					
ANR	5083528	Identifier	false		5083465	1					
ANR	5083529	ExpressionStatement	worker -> m_is_waiting = false	978:2:23842:23870	5083465	1	True				
ANR	5083530	AssignmentExpression	worker -> m_is_waiting = false		5083465	0		=			
ANR	5083531	PtrMemberAccess	worker -> m_is_waiting		5083465	0					
ANR	5083532	Identifier	worker		5083465	0					
ANR	5083533	Identifier	m_is_waiting		5083465	1					
ANR	5083534	Identifier	false		5083465	1					
ANR	5083535	IfStatement	if ( worker -> m_can_use == false )		5083465	2					
ANR	5083536	Condition	worker -> m_can_use == false	980:6:23879:23904	5083465	0	True				
ANR	5083537	EqualityExpression	worker -> m_can_use == false		5083465	0		==			
ANR	5083538	PtrMemberAccess	worker -> m_can_use		5083465	0					
ANR	5083539	Identifier	worker		5083465	0					
ANR	5083540	Identifier	m_can_use		5083465	1					
ANR	5083541	Identifier	false		5083465	1					
ANR	5083542	CompoundStatement		29:35:612:612	5083465	1					
ANR	5083543	ExpressionStatement	"worker_exit ( worker , true )"	983:3:23976:24001	5083465	0	True				
ANR	5083544	CallExpression	"worker_exit ( worker , true )"		5083465	0					
ANR	5083545	Callee	worker_exit		5083465	0					
ANR	5083546	Identifier	worker_exit		5083465	0					
ANR	5083547	ArgumentList	worker		5083465	1					
ANR	5083548	Argument	worker		5083465	0					
ANR	5083549	Identifier	worker		5083465	0					
ANR	5083550	Argument	true		5083465	1					
ANR	5083551	Identifier	true		5083465	0					
ANR	5083552	WhileStatement	while ( ( new_request = popRequest ( worker ) ) == NULL )		5083465	3					
ANR	5083553	Condition	( new_request = popRequest ( worker ) ) == NULL	986:9:24017:24058	5083465	0	True				
ANR	5083554	EqualityExpression	( new_request = popRequest ( worker ) ) == NULL		5083465	0		==			
ANR	5083555	AssignmentExpression	new_request = popRequest ( worker )		5083465	0		=			
ANR	5083556	Identifier	new_request		5083465	0					
ANR	5083557	CallExpression	popRequest ( worker )		5083465	1					
ANR	5083558	Callee	popRequest		5083465	0					
ANR	5083559	Identifier	popRequest		5083465	0					
ANR	5083560	ArgumentList	worker		5083465	1					
ANR	5083561	Argument	worker		5083465	0					
ANR	5083562	Identifier	worker		5083465	0					
ANR	5083563	Identifier	NULL		5083465	1					
ANR	5083564	CompoundStatement		60:3:1403:1485	5083465	1					
ANR	5083565	ExpressionStatement	worker -> m_is_waiting = true	988:3:24068:24095	5083465	0	True				
ANR	5083566	AssignmentExpression	worker -> m_is_waiting = true		5083465	0		=			
ANR	5083567	PtrMemberAccess	worker -> m_is_waiting		5083465	0					
ANR	5083568	Identifier	worker		5083465	0					
ANR	5083569	Identifier	m_is_waiting		5083465	1					
ANR	5083570	Identifier	true		5083465	1					
ANR	5083571	ExpressionStatement	"gettimeofday ( & tp , NULL )"	991:3:24124:24147	5083465	1	True				
ANR	5083572	CallExpression	"gettimeofday ( & tp , NULL )"		5083465	0					
ANR	5083573	Callee	gettimeofday		5083465	0					
ANR	5083574	Identifier	gettimeofday		5083465	0					
ANR	5083575	ArgumentList	& tp		5083465	1					
ANR	5083576	Argument	& tp		5083465	0					
ANR	5083577	UnaryOperationExpression	& tp		5083465	0					
ANR	5083578	UnaryOperator	&		5083465	0					
ANR	5083579	Identifier	tp		5083465	1					
ANR	5083580	Argument	NULL		5083465	1					
ANR	5083581	Identifier	NULL		5083465	0					
ANR	5083582	ExpressionStatement	ts . tv_sec = tp . tv_sec	994:3:24195:24216	5083465	2	True				
ANR	5083583	AssignmentExpression	ts . tv_sec = tp . tv_sec		5083465	0		=			
ANR	5083584	MemberAccess	ts . tv_sec		5083465	0					
ANR	5083585	Identifier	ts		5083465	0					
ANR	5083586	Identifier	tv_sec		5083465	1					
ANR	5083587	MemberAccess	tp . tv_sec		5083465	1					
ANR	5083588	Identifier	tp		5083465	0					
ANR	5083589	Identifier	tv_sec		5083465	1					
ANR	5083590	ExpressionStatement	ts . tv_nsec = tp . tv_usec * 1000	995:3:24221:24251	5083465	3	True				
ANR	5083591	AssignmentExpression	ts . tv_nsec = tp . tv_usec * 1000		5083465	0		=			
ANR	5083592	MemberAccess	ts . tv_nsec		5083465	0					
ANR	5083593	Identifier	ts		5083465	0					
ANR	5083594	Identifier	tv_nsec		5083465	1					
ANR	5083595	MultiplicativeExpression	tp . tv_usec * 1000		5083465	1		*			
ANR	5083596	MemberAccess	tp . tv_usec		5083465	0					
ANR	5083597	Identifier	tp		5083465	0					
ANR	5083598	Identifier	tv_usec		5083465	1					
ANR	5083599	PrimaryExpression	1000		5083465	1					
ANR	5083600	ExpressionStatement	ts . tv_sec += WORKER_MANAGER_TIMER_INTERVAL	996:3:24256:24298	5083465	4	True				
ANR	5083601	AssignmentExpression	ts . tv_sec += WORKER_MANAGER_TIMER_INTERVAL		5083465	0		+=			
ANR	5083602	MemberAccess	ts . tv_sec		5083465	0					
ANR	5083603	Identifier	ts		5083465	0					
ANR	5083604	Identifier	tv_sec		5083465	1					
ANR	5083605	Identifier	WORKER_MANAGER_TIMER_INTERVAL		5083465	1					
ANR	5083606	IfStatement	if ( ioprocess )		5083465	5					
ANR	5083607	Condition	ioprocess	998:7:24308:24316	5083465	0	True				
ANR	5083608	Identifier	ioprocess		5083465	0					
ANR	5083609	CompoundStatement		47:19:1024:1024	5083465	1					
ANR	5083610	IfStatement	if ( ioprocess -> numOfPendingRequest ( ) > 0 )		5083465	0					
ANR	5083611	Condition	ioprocess -> numOfPendingRequest ( ) > 0	999:8:24330:24365	5083465	0	True				
ANR	5083612	RelationalExpression	ioprocess -> numOfPendingRequest ( ) > 0		5083465	0		>			
ANR	5083613	CallExpression	ioprocess -> numOfPendingRequest ( )		5083465	0					
ANR	5083614	Callee	ioprocess -> numOfPendingRequest		5083465	0					
ANR	5083615	PtrMemberAccess	ioprocess -> numOfPendingRequest		5083465	0					
ANR	5083616	Identifier	ioprocess		5083465	0					
ANR	5083617	Identifier	numOfPendingRequest		5083465	1					
ANR	5083618	ArgumentList			5083465	1					
ANR	5083619	PrimaryExpression	0		5083465	1					
ANR	5083620	CompoundStatement		48:47:1073:1073	5083465	1					
ANR	5083621	ContinueStatement	continue ;	1000:5:24376:24384	5083465	0	True				
ANR	5083622	IdentifierDeclStatement	"int retval = pthread_cond_timedwait ( & worker -> m_cond , & global_big_mutex , & ts ) ;"	1011:3:24699:24781	5083465	6	True				
ANR	5083623	IdentifierDecl	"retval = pthread_cond_timedwait ( & worker -> m_cond , & global_big_mutex , & ts )"		5083465	0					
ANR	5083624	IdentifierDeclType	int		5083465	0					
ANR	5083625	Identifier	retval		5083465	1					
ANR	5083626	AssignmentExpression	"retval = pthread_cond_timedwait ( & worker -> m_cond , & global_big_mutex , & ts )"		5083465	2		=			
ANR	5083627	Identifier	retval		5083465	0					
ANR	5083628	CallExpression	"pthread_cond_timedwait ( & worker -> m_cond , & global_big_mutex , & ts )"		5083465	1					
ANR	5083629	Callee	pthread_cond_timedwait		5083465	0					
ANR	5083630	Identifier	pthread_cond_timedwait		5083465	0					
ANR	5083631	ArgumentList	& worker -> m_cond		5083465	1					
ANR	5083632	Argument	& worker -> m_cond		5083465	0					
ANR	5083633	UnaryOperationExpression	& worker -> m_cond		5083465	0					
ANR	5083634	UnaryOperator	&		5083465	0					
ANR	5083635	PtrMemberAccess	worker -> m_cond		5083465	1					
ANR	5083636	Identifier	worker		5083465	0					
ANR	5083637	Identifier	m_cond		5083465	1					
ANR	5083638	Argument	& global_big_mutex		5083465	1					
ANR	5083639	UnaryOperationExpression	& global_big_mutex		5083465	0					
ANR	5083640	UnaryOperator	&		5083465	0					
ANR	5083641	Identifier	global_big_mutex		5083465	1					
ANR	5083642	Argument	& ts		5083465	2					
ANR	5083643	UnaryOperationExpression	& ts		5083465	0					
ANR	5083644	UnaryOperator	&		5083465	0					
ANR	5083645	Identifier	ts		5083465	1					
ANR	5083646	IfStatement	if ( worker -> m_can_use == false )		5083465	7					
ANR	5083647	Condition	worker -> m_can_use == false	1015:7:24826:24851	5083465	0	True				
ANR	5083648	EqualityExpression	worker -> m_can_use == false		5083465	0		==			
ANR	5083649	PtrMemberAccess	worker -> m_can_use		5083465	0					
ANR	5083650	Identifier	worker		5083465	0					
ANR	5083651	Identifier	m_can_use		5083465	1					
ANR	5083652	Identifier	false		5083465	1					
ANR	5083653	CompoundStatement		64:36:1559:1559	5083465	1					
ANR	5083654	ExpressionStatement	worker -> m_is_waiting = false	1017:4:24880:24908	5083465	0	True				
ANR	5083655	AssignmentExpression	worker -> m_is_waiting = false		5083465	0		=			
ANR	5083656	PtrMemberAccess	worker -> m_is_waiting		5083465	0					
ANR	5083657	Identifier	worker		5083465	0					
ANR	5083658	Identifier	m_is_waiting		5083465	1					
ANR	5083659	Identifier	false		5083465	1					
ANR	5083660	ExpressionStatement	"worker_exit ( worker , true )"	1020:4:24962:24987	5083465	1	True				
ANR	5083661	CallExpression	"worker_exit ( worker , true )"		5083465	0					
ANR	5083662	Callee	worker_exit		5083465	0					
ANR	5083663	Identifier	worker_exit		5083465	0					
ANR	5083664	ArgumentList	worker		5083465	1					
ANR	5083665	Argument	worker		5083465	0					
ANR	5083666	Identifier	worker		5083465	0					
ANR	5083667	Argument	true		5083465	1					
ANR	5083668	Identifier	true		5083465	0					
ANR	5083669	ElseStatement	else		5083465	0					
ANR	5083670	CompoundStatement		70:9:1702:1702	5083465	0					
ANR	5083671	IfStatement	if ( retval == ETIMEDOUT )		5083465	0					
ANR	5083672	Condition	retval == ETIMEDOUT	1023:8:25066:25084	5083465	0	True				
ANR	5083673	EqualityExpression	retval == ETIMEDOUT		5083465	0		==			
ANR	5083674	Identifier	retval		5083465	0					
ANR	5083675	Identifier	ETIMEDOUT		5083465	1					
ANR	5083676	CompoundStatement		72:30:1792:1792	5083465	1					
ANR	5083677	IfStatement	if ( ioprocess )		5083465	0					
ANR	5083678	Condition	ioprocess	1027:9:25186:25194	5083465	0	True				
ANR	5083679	Identifier	ioprocess		5083465	0					
ANR	5083680	CompoundStatement		76:21:1902:1902	5083465	1					
ANR	5083681	IfStatement	if ( ioprocess -> numOfPendingRequest ( ) > 0 )		5083465	0					
ANR	5083682	Condition	ioprocess -> numOfPendingRequest ( ) > 0	1028:10:25210:25245	5083465	0	True				
ANR	5083683	RelationalExpression	ioprocess -> numOfPendingRequest ( ) > 0		5083465	0		>			
ANR	5083684	CallExpression	ioprocess -> numOfPendingRequest ( )		5083465	0					
ANR	5083685	Callee	ioprocess -> numOfPendingRequest		5083465	0					
ANR	5083686	PtrMemberAccess	ioprocess -> numOfPendingRequest		5083465	0					
ANR	5083687	Identifier	ioprocess		5083465	0					
ANR	5083688	Identifier	numOfPendingRequest		5083465	1					
ANR	5083689	ArgumentList			5083465	1					
ANR	5083690	PrimaryExpression	0		5083465	1					
ANR	5083691	CompoundStatement		77:49:1953:1953	5083465	1					
ANR	5083692	ContinueStatement	continue ;	1029:7:25258:25266	5083465	0	True				
ANR	5083693	IfStatement	if ( ! worker -> m_must_be_alive )		5083465	1					
ANR	5083694	Condition	! worker -> m_must_be_alive	1033:9:25293:25316	5083465	0	True				
ANR	5083695	UnaryOperationExpression	! worker -> m_must_be_alive		5083465	0					
ANR	5083696	UnaryOperator	!		5083465	0					
ANR	5083697	PtrMemberAccess	worker -> m_must_be_alive		5083465	1					
ANR	5083698	Identifier	worker		5083465	0					
ANR	5083699	Identifier	m_must_be_alive		5083465	1					
ANR	5083700	CompoundStatement		82:36:2024:2024	5083465	1					
ANR	5083701	ExpressionStatement	worker -> m_is_waiting = false	1036:6:25389:25417	5083465	0	True				
ANR	5083702	AssignmentExpression	worker -> m_is_waiting = false		5083465	0		=			
ANR	5083703	PtrMemberAccess	worker -> m_is_waiting		5083465	0					
ANR	5083704	Identifier	worker		5083465	0					
ANR	5083705	Identifier	m_is_waiting		5083465	1					
ANR	5083706	Identifier	false		5083465	1					
ANR	5083707	ExpressionStatement	worker -> m_can_use = false	1037:6:25426:25451	5083465	1	True				
ANR	5083708	AssignmentExpression	worker -> m_can_use = false		5083465	0		=			
ANR	5083709	PtrMemberAccess	worker -> m_can_use		5083465	0					
ANR	5083710	Identifier	worker		5083465	0					
ANR	5083711	Identifier	m_can_use		5083465	1					
ANR	5083712	Identifier	false		5083465	1					
ANR	5083713	ExpressionStatement	"worker_exit ( worker , false )"	1040:6:25508:25534	5083465	2	True				
ANR	5083714	CallExpression	"worker_exit ( worker , false )"		5083465	0					
ANR	5083715	Callee	worker_exit		5083465	0					
ANR	5083716	Identifier	worker_exit		5083465	0					
ANR	5083717	ArgumentList	worker		5083465	1					
ANR	5083718	Argument	worker		5083465	0					
ANR	5083719	Identifier	worker		5083465	0					
ANR	5083720	Argument	false		5083465	1					
ANR	5083721	Identifier	false		5083465	0					
ANR	5083722	ElseStatement	else		5083465	0					
ANR	5083723	CompoundStatement		90:11:2251:2251	5083465	0					
ANR	5083724	Statement	dprintf	1042:6:25555:25561	5083465	0	True				
ANR	5083725	Statement	(	1042:13:25562:25562	5083465	1	True				
ANR	5083726	Statement	D_FULLDEBUG	1042:14:25563:25573	5083465	2	True				
ANR	5083727	Statement	","	1042:25:25574:25574	5083465	3	True				
ANR	5083728	Statement	"""Thread(%d) must be alive for """	1042:27:25576:25606	5083465	4	True				
ANR	5083729	Statement	"""another request\\n"""	1043:8:25616:25634	5083465	5	True				
ANR	5083730	Statement	","	1043:27:25635:25635	5083465	6	True				
ANR	5083731	Statement	worker	1043:29:25637:25642	5083465	7	True				
ANR	5083732	Statement	->	1043:35:25643:25644	5083465	8	True				
ANR	5083733	Statement	m_id	1043:37:25645:25648	5083465	9	True				
ANR	5083734	Statement	)	1043:41:25649:25649	5083465	10	True				
ANR	5083735	ExpressionStatement		1043:42:25650:25650	5083465	11	True				
ANR	5083736	ExpressionStatement	worker -> m_is_doing = true	1049:2:25677:25702	5083465	4	True				
ANR	5083737	AssignmentExpression	worker -> m_is_doing = true		5083465	0		=			
ANR	5083738	PtrMemberAccess	worker -> m_is_doing		5083465	0					
ANR	5083739	Identifier	worker		5083465	0					
ANR	5083740	Identifier	m_is_doing		5083465	1					
ANR	5083741	Identifier	true		5083465	1					
ANR	5083742	ExpressionStatement	worker -> m_is_waiting = false	1050:2:25706:25734	5083465	5	True				
ANR	5083743	AssignmentExpression	worker -> m_is_waiting = false		5083465	0		=			
ANR	5083744	PtrMemberAccess	worker -> m_is_waiting		5083465	0					
ANR	5083745	Identifier	worker		5083465	0					
ANR	5083746	Identifier	m_is_waiting		5083465	1					
ANR	5083747	Identifier	false		5083465	1					
ANR	5083748	ExpressionStatement	worker -> m_must_be_alive = false	1051:2:25738:25769	5083465	6	True				
ANR	5083749	AssignmentExpression	worker -> m_must_be_alive = false		5083465	0		=			
ANR	5083750	PtrMemberAccess	worker -> m_must_be_alive		5083465	0					
ANR	5083751	Identifier	worker		5083465	0					
ANR	5083752	Identifier	m_must_be_alive		5083465	1					
ANR	5083753	Identifier	false		5083465	1					
ANR	5083754	IfStatement	if ( ! handle_gahp_command ( new_request ) )		5083465	7					
ANR	5083755	Condition	! handle_gahp_command ( new_request )	1055:5:25822:25854	5083465	0	True				
ANR	5083756	UnaryOperationExpression	! handle_gahp_command ( new_request )		5083465	0					
ANR	5083757	UnaryOperator	!		5083465	0					
ANR	5083758	CallExpression	handle_gahp_command ( new_request )		5083465	1					
ANR	5083759	Callee	handle_gahp_command		5083465	0					
ANR	5083760	Identifier	handle_gahp_command		5083465	0					
ANR	5083761	ArgumentList	new_request		5083465	1					
ANR	5083762	Argument	new_request		5083465	0					
ANR	5083763	Identifier	new_request		5083465	0					
ANR	5083764	CompoundStatement		104:41:2562:2562	5083465	1					
ANR	5083765	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR (io_loop) processing %s\\n"" , new_request -> m_raw_cmd . c_str ( ) )"	1056:3:25863:25953	5083465	0	True				
ANR	5083766	CallExpression	"dprintf ( D_ALWAYS , ""ERROR (io_loop) processing %s\\n"" , new_request -> m_raw_cmd . c_str ( ) )"		5083465	0					
ANR	5083767	Callee	dprintf		5083465	0					
ANR	5083768	Identifier	dprintf		5083465	0					
ANR	5083769	ArgumentList	D_ALWAYS		5083465	1					
ANR	5083770	Argument	D_ALWAYS		5083465	0					
ANR	5083771	Identifier	D_ALWAYS		5083465	0					
ANR	5083772	Argument	"""ERROR (io_loop) processing %s\\n"""		5083465	1					
ANR	5083773	PrimaryExpression	"""ERROR (io_loop) processing %s\\n"""		5083465	0					
ANR	5083774	Argument	new_request -> m_raw_cmd . c_str ( )		5083465	2					
ANR	5083775	CallExpression	new_request -> m_raw_cmd . c_str ( )		5083465	0					
ANR	5083776	Callee	new_request -> m_raw_cmd . c_str		5083465	0					
ANR	5083777	MemberAccess	new_request -> m_raw_cmd . c_str		5083465	0					
ANR	5083778	PtrMemberAccess	new_request -> m_raw_cmd		5083465	0					
ANR	5083779	Identifier	new_request		5083465	0					
ANR	5083780	Identifier	m_raw_cmd		5083465	1					
ANR	5083781	Identifier	c_str		5083465	1					
ANR	5083782	ArgumentList			5083465	1					
ANR	5083783	ElseStatement	else		5083465	0					
ANR	5083784	CompoundStatement		107:8:2667:2667	5083465	0					
ANR	5083785	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""CMD(\\""%s\\"") is done with result %s"" , new_request -> m_raw_cmd . c_str ( ) , new_request -> m_result . c_str ( ) )"	1059:3:25968:26100	5083465	0	True				
ANR	5083786	CallExpression	"dprintf ( D_FULLDEBUG , ""CMD(\\""%s\\"") is done with result %s"" , new_request -> m_raw_cmd . c_str ( ) , new_request -> m_result . c_str ( ) )"		5083465	0					
ANR	5083787	Callee	dprintf		5083465	0					
ANR	5083788	Identifier	dprintf		5083465	0					
ANR	5083789	ArgumentList	D_FULLDEBUG		5083465	1					
ANR	5083790	Argument	D_FULLDEBUG		5083465	0					
ANR	5083791	Identifier	D_FULLDEBUG		5083465	0					
ANR	5083792	Argument	"""CMD(\\""%s\\"") is done with result %s"""		5083465	1					
ANR	5083793	PrimaryExpression	"""CMD(\\""%s\\"") is done with result %s"""		5083465	0					
ANR	5083794	Argument	new_request -> m_raw_cmd . c_str ( )		5083465	2					
ANR	5083795	CallExpression	new_request -> m_raw_cmd . c_str ( )		5083465	0					
ANR	5083796	Callee	new_request -> m_raw_cmd . c_str		5083465	0					
ANR	5083797	MemberAccess	new_request -> m_raw_cmd . c_str		5083465	0					
ANR	5083798	PtrMemberAccess	new_request -> m_raw_cmd		5083465	0					
ANR	5083799	Identifier	new_request		5083465	0					
ANR	5083800	Identifier	m_raw_cmd		5083465	1					
ANR	5083801	Identifier	c_str		5083465	1					
ANR	5083802	ArgumentList			5083465	1					
ANR	5083803	Argument	new_request -> m_result . c_str ( )		5083465	3					
ANR	5083804	CallExpression	new_request -> m_result . c_str ( )		5083465	0					
ANR	5083805	Callee	new_request -> m_result . c_str		5083465	0					
ANR	5083806	MemberAccess	new_request -> m_result . c_str		5083465	0					
ANR	5083807	PtrMemberAccess	new_request -> m_result		5083465	0					
ANR	5083808	Identifier	new_request		5083465	0					
ANR	5083809	Identifier	m_result		5083465	1					
ANR	5083810	Identifier	c_str		5083465	1					
ANR	5083811	ArgumentList			5083465	1					
ANR	5083812	Statement	delete	1065:2:26144:26149	5083465	8	True				
ANR	5083813	ExpressionStatement	new_request	1065:9:26151:26162	5083465	9	True				
ANR	5083814	Identifier	new_request		5083465	0					
ANR	5083815	ExpressionStatement	new_request = NULL	1066:2:26166:26184	5083465	10	True				
ANR	5083816	AssignmentExpression	new_request = NULL		5083465	0		=			
ANR	5083817	Identifier	new_request		5083465	0					
ANR	5083818	Identifier	NULL		5083465	1					
ANR	5083819	ExpressionStatement	amazon_gahp_release_big_mutex ( )	1070:1:26192:26223	5083465	7	True				
ANR	5083820	CallExpression	amazon_gahp_release_big_mutex ( )		5083465	0					
ANR	5083821	Callee	amazon_gahp_release_big_mutex		5083465	0					
ANR	5083822	Identifier	amazon_gahp_release_big_mutex		5083465	0					
ANR	5083823	ArgumentList			5083465	1					
ANR	5083824	ReturnStatement	return NULL ;	1071:1:26226:26237	5083465	8	True				
ANR	5083825	Identifier	NULL		5083465	0					
ANR	5083826	ReturnType	static void *		5083465	1					
ANR	5083827	Identifier	worker_function		5083465	2					
ANR	5083828	ParameterList	void * ptr		5083465	3					
ANR	5083829	Parameter	void * ptr	951:30:23282:23290	5083465	0	True				
ANR	5083830	ParameterType	void *		5083465	0					
ANR	5083831	Identifier	ptr		5083465	1					
ANR	5083832	CFGEntryNode	ENTRY		5083465		True				
ANR	5083833	CFGExitNode	EXIT		5083465		True				
ANR	5083834	Symbol	new_request -> m_raw_cmd . c_str		5083465						
ANR	5083835	Symbol	tp . tv_sec		5083465						
ANR	5083836	Symbol	ioprocess		5083465						
ANR	5083837	Symbol	worker -> m_must_be_alive		5083465						
ANR	5083838	Symbol	pthread_cond_timedwait		5083465						
ANR	5083839	Symbol	tp . tv_usec		5083465						
ANR	5083840	Symbol	ts . tv_sec		5083465						
ANR	5083841	Symbol	worker -> m_is_doing		5083465						
ANR	5083842	Symbol	ts . tv_nsec		5083465						
ANR	5083843	Symbol	& global_big_mutex		5083465						
ANR	5083844	Symbol	* new_request		5083465						
ANR	5083845	Symbol	worker		5083465						
ANR	5083846	Symbol	new_request		5083465						
ANR	5083847	Symbol	handle_gahp_command		5083465						
ANR	5083848	Symbol	& worker -> m_cond		5083465						
ANR	5083849	Symbol	NULL		5083465						
ANR	5083850	Symbol	worker -> m_is_waiting		5083465						
ANR	5083851	Symbol	popRequest		5083465						
ANR	5083852	Symbol	& tp		5083465						
ANR	5083853	Symbol	* ioprocess		5083465						
ANR	5083854	Symbol	D_ALWAYS		5083465						
ANR	5083855	Symbol	false		5083465						
ANR	5083856	Symbol	& ts		5083465						
ANR	5083857	Symbol	new_request -> m_result . c_str		5083465						
ANR	5083858	Symbol	D_FULLDEBUG		5083465						
ANR	5083859	Symbol	retval		5083465						
ANR	5083860	Symbol	new_request -> m_raw_cmd		5083465						
ANR	5083861	Symbol	ptr		5083465						
ANR	5083862	Symbol	* worker		5083465						
ANR	5083863	Symbol	WORKER_MANAGER_TIMER_INTERVAL		5083465						
ANR	5083864	Symbol	ETIMEDOUT		5083465						
ANR	5083865	Symbol	new_request -> m_result		5083465						
ANR	5083866	Symbol	worker -> m_can_use		5083465						
ANR	5083867	Symbol	ioprocess -> numOfPendingRequest		5083465						
ANR	5083868	Symbol	true		5083465						
ANR	5083869	Symbol	tp		5083465						
ANR	5083870	Symbol	ts		5083465						
