command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2585733	File	data/converged/CVE-2011-4930_htcondor/src_classad_support_intervalTree.cpp								
ANR	2585734	Function	IntervalTree :: IntervalTree	31:0:956:1004							
ANR	2585735	FunctionDef	IntervalTree :: IntervalTree ()		2585734	0					
ANR	2585736	CompoundStatement		33:0:987:1004	2585734	0					
ANR	2585737	ExpressionStatement	nodes = NULL	34:1:990:1002	2585734	0	True				
ANR	2585738	AssignmentExpression	nodes = NULL		2585734	0		=			
ANR	2585739	Identifier	nodes		2585734	0					
ANR	2585740	Identifier	NULL		2585734	1					
ANR	2585741	Identifier	IntervalTree :: IntervalTree		2585734	1					
ANR	2585742	ParameterList			2585734	2					
ANR	2585743	CFGEntryNode	ENTRY		2585734		True				
ANR	2585744	CFGExitNode	EXIT		2585734		True				
ANR	2585745	Symbol	NULL		2585734						
ANR	2585746	Symbol	nodes		2585734						
ANR	2585747	Function	IntervalTree :: ~IntervalTree	37:0:1007:1071							
ANR	2585748	FunctionDef	IntervalTree :: ~IntervalTree ()		2585747	0					
ANR	2585749	CompoundStatement		39:0:1039:1071	2585747	0					
ANR	2585750	IfStatement	if ( nodes )		2585747	0					
ANR	2585751	Condition	nodes	40:5:1046:1050	2585747	0	True				
ANR	2585752	Identifier	nodes		2585747	0					
ANR	2585753	Statement	delete	40:13:1054:1059	2585747	1	True				
ANR	2585754	Statement	[	40:20:1061:1061	2585747	1	True				
ANR	2585755	Statement	]	40:21:1062:1062	2585747	2	True				
ANR	2585756	ExpressionStatement	nodes	40:23:1064:1069	2585747	3	True				
ANR	2585757	Identifier	nodes		2585747	0					
ANR	2585758	Identifier	IntervalTree :: ~IntervalTree		2585747	1					
ANR	2585759	ParameterList			2585747	2					
ANR	2585760	CFGEntryNode	ENTRY		2585747		True				
ANR	2585761	CFGExitNode	EXIT		2585747		True				
ANR	2585762	Symbol	nodes		2585747						
ANR	2585763	Function	IntervalTree :: MakeIntervalTree	43:0:1074:5368							
ANR	2585764	FunctionDef	IntervalTree :: MakeIntervalTree (const OneDimension & intervals)		2585763	0					
ANR	2585765	CompoundStatement		45:0:1153:5368	2585763	0					
ANR	2585766	IdentifierDeclStatement	OneDimension :: const_iterator itr ;	46:1:1156:1188	2585763	0	True				
ANR	2585767	IdentifierDecl	itr		2585763	0					
ANR	2585768	IdentifierDeclType	OneDimension :: const_iterator		2585763	0					
ANR	2585769	Identifier	itr		2585763	1					
ANR	2585770	IdentifierDeclStatement	set < double > endPoints ;	47:1:1191:1217	2585763	1	True				
ANR	2585771	IdentifierDecl	endPoints		2585763	0					
ANR	2585772	IdentifierDeclType	set < double >		2585763	0					
ANR	2585773	Identifier	endPoints		2585763	1					
ANR	2585774	IdentifierDeclStatement	"double tmpL , tmpR ;"	48:1:1220:1243	2585763	2	True				
ANR	2585775	IdentifierDecl	tmpL		2585763	0					
ANR	2585776	IdentifierDeclType	double		2585763	0					
ANR	2585777	Identifier	tmpL		2585763	1					
ANR	2585778	IdentifierDecl	tmpR		2585763	1					
ANR	2585779	IdentifierDeclType	double		2585763	0					
ANR	2585780	Identifier	tmpR		2585763	1					
ANR	2585781	ForStatement	for ( itr = intervals . begin ( ) ; itr != intervals . end ( ) ; itr ++ )		2585763	3					
ANR	2585782	ForInit	itr = intervals . begin ( ) ;	51:6:1303:1327	2585763	0	True				
ANR	2585783	AssignmentExpression	itr = intervals . begin ( )		2585763	0		=			
ANR	2585784	Identifier	itr		2585763	0					
ANR	2585785	CallExpression	intervals . begin ( )		2585763	1					
ANR	2585786	Callee	intervals . begin		2585763	0					
ANR	2585787	MemberAccess	intervals . begin		2585763	0					
ANR	2585788	Identifier	intervals		2585763	0					
ANR	2585789	Identifier	begin		2585763	1					
ANR	2585790	ArgumentList			2585763	1					
ANR	2585791	Condition	itr != intervals . end ( )	51:32:1329:1351	2585763	1	True				
ANR	2585792	EqualityExpression	itr != intervals . end ( )		2585763	0		!=			
ANR	2585793	Identifier	itr		2585763	0					
ANR	2585794	CallExpression	intervals . end ( )		2585763	1					
ANR	2585795	Callee	intervals . end		2585763	0					
ANR	2585796	MemberAccess	intervals . end		2585763	0					
ANR	2585797	Identifier	intervals		2585763	0					
ANR	2585798	Identifier	end		2585763	1					
ANR	2585799	ArgumentList			2585763	1					
ANR	2585800	PostIncDecOperationExpression	itr ++	51:57:1354:1358	2585763	2	True				
ANR	2585801	Identifier	itr		2585763	0					
ANR	2585802	IncDec	++		2585763	1					
ANR	2585803	CompoundStatement		7:65:208:208	2585763	3					
ANR	2585804	ExpressionStatement	itr -> second . lower . IsNumber ( tmpL )	52:2:1366:1400	2585763	0	True				
ANR	2585805	CallExpression	itr -> second . lower . IsNumber ( tmpL )		2585763	0					
ANR	2585806	Callee	itr -> second . lower . IsNumber		2585763	0					
ANR	2585807	MemberAccess	itr -> second . lower . IsNumber		2585763	0					
ANR	2585808	MemberAccess	itr -> second . lower		2585763	0					
ANR	2585809	PtrMemberAccess	itr -> second		2585763	0					
ANR	2585810	Identifier	itr		2585763	0					
ANR	2585811	Identifier	second		2585763	1					
ANR	2585812	Identifier	lower		2585763	1					
ANR	2585813	Identifier	IsNumber		2585763	1					
ANR	2585814	ArgumentList	tmpL		2585763	1					
ANR	2585815	Argument	tmpL		2585763	0					
ANR	2585816	Identifier	tmpL		2585763	0					
ANR	2585817	ExpressionStatement	endPoints . insert ( tmpL )	53:2:1404:1428	2585763	1	True				
ANR	2585818	CallExpression	endPoints . insert ( tmpL )		2585763	0					
ANR	2585819	Callee	endPoints . insert		2585763	0					
ANR	2585820	MemberAccess	endPoints . insert		2585763	0					
ANR	2585821	Identifier	endPoints		2585763	0					
ANR	2585822	Identifier	insert		2585763	1					
ANR	2585823	ArgumentList	tmpL		2585763	1					
ANR	2585824	Argument	tmpL		2585763	0					
ANR	2585825	Identifier	tmpL		2585763	0					
ANR	2585826	ExpressionStatement	itr -> second . upper . IsNumber ( tmpR )	54:2:1432:1466	2585763	2	True				
ANR	2585827	CallExpression	itr -> second . upper . IsNumber ( tmpR )		2585763	0					
ANR	2585828	Callee	itr -> second . upper . IsNumber		2585763	0					
ANR	2585829	MemberAccess	itr -> second . upper . IsNumber		2585763	0					
ANR	2585830	MemberAccess	itr -> second . upper		2585763	0					
ANR	2585831	PtrMemberAccess	itr -> second		2585763	0					
ANR	2585832	Identifier	itr		2585763	0					
ANR	2585833	Identifier	second		2585763	1					
ANR	2585834	Identifier	upper		2585763	1					
ANR	2585835	Identifier	IsNumber		2585763	1					
ANR	2585836	ArgumentList	tmpR		2585763	1					
ANR	2585837	Argument	tmpR		2585763	0					
ANR	2585838	Identifier	tmpR		2585763	0					
ANR	2585839	ExpressionStatement	endPoints . insert ( tmpR )	55:2:1470:1494	2585763	3	True				
ANR	2585840	CallExpression	endPoints . insert ( tmpR )		2585763	0					
ANR	2585841	Callee	endPoints . insert		2585763	0					
ANR	2585842	MemberAccess	endPoints . insert		2585763	0					
ANR	2585843	Identifier	endPoints		2585763	0					
ANR	2585844	Identifier	insert		2585763	1					
ANR	2585845	ArgumentList	tmpR		2585763	1					
ANR	2585846	Argument	tmpR		2585763	0					
ANR	2585847	Identifier	tmpR		2585763	0					
ANR	2585848	IdentifierDeclStatement	unsigned int numPoints = endPoints . size ( ) ;	57:1:1500:1542	2585763	4	True				
ANR	2585849	IdentifierDecl	numPoints = endPoints . size ( )		2585763	0					
ANR	2585850	IdentifierDeclType	unsigned int		2585763	0					
ANR	2585851	Identifier	numPoints		2585763	1					
ANR	2585852	AssignmentExpression	numPoints = endPoints . size ( )		2585763	2		=			
ANR	2585853	Identifier	numPoints		2585763	0					
ANR	2585854	CallExpression	endPoints . size ( )		2585763	1					
ANR	2585855	Callee	endPoints . size		2585763	0					
ANR	2585856	MemberAccess	endPoints . size		2585763	0					
ANR	2585857	Identifier	endPoints		2585763	0					
ANR	2585858	Identifier	size		2585763	1					
ANR	2585859	ArgumentList			2585763	1					
ANR	2585860	IdentifierDeclStatement	"int depth , overflow , retain , size , frontStart , backStart ;"	60:1:1612:1668	2585763	5	True				
ANR	2585861	IdentifierDecl	depth		2585763	0					
ANR	2585862	IdentifierDeclType	int		2585763	0					
ANR	2585863	Identifier	depth		2585763	1					
ANR	2585864	IdentifierDecl	overflow		2585763	1					
ANR	2585865	IdentifierDeclType	int		2585763	0					
ANR	2585866	Identifier	overflow		2585763	1					
ANR	2585867	IdentifierDecl	retain		2585763	2					
ANR	2585868	IdentifierDeclType	int		2585763	0					
ANR	2585869	Identifier	retain		2585763	1					
ANR	2585870	IdentifierDecl	size		2585763	3					
ANR	2585871	IdentifierDeclType	int		2585763	0					
ANR	2585872	Identifier	size		2585763	1					
ANR	2585873	IdentifierDecl	frontStart		2585763	4					
ANR	2585874	IdentifierDeclType	int		2585763	0					
ANR	2585875	Identifier	frontStart		2585763	1					
ANR	2585876	IdentifierDecl	backStart		2585763	5					
ANR	2585877	IdentifierDeclType	int		2585763	0					
ANR	2585878	Identifier	backStart		2585763	1					
ANR	2585879	ExpressionStatement	depth = 1	63:1:1727:1736	2585763	6	True				
ANR	2585880	AssignmentExpression	depth = 1		2585763	0		=			
ANR	2585881	Identifier	depth		2585763	0					
ANR	2585882	PrimaryExpression	1		2585763	1					
ANR	2585883	WhileStatement	while ( numPoints >> depth )		2585763	7					
ANR	2585884	Condition	numPoints >> depth	64:8:1746:1763	2585763	0	True				
ANR	2585885	ShiftExpression	numPoints >> depth		2585763	0		>>			
ANR	2585886	Identifier	numPoints		2585763	0					
ANR	2585887	Identifier	depth		2585763	1					
ANR	2585888	ExpressionStatement	depth ++	64:29:1767:1774	2585763	1	True				
ANR	2585889	PostIncDecOperationExpression	depth ++		2585763	0					
ANR	2585890	Identifier	depth		2585763	0					
ANR	2585891	IncDec	++		2585763	1					
ANR	2585892	Statement	overflow	67:1:1844:1851	2585763	8	True				
ANR	2585893	Statement	=	67:10:1853:1853	2585763	9	True				
ANR	2585894	Statement	2	67:12:1855:1855	2585763	10	True				
ANR	2585895	Statement	*	67:14:1857:1857	2585763	11	True				
ANR	2585896	Statement	(	67:16:1859:1859	2585763	12	True				
ANR	2585897	Statement	numPoints	67:18:1861:1869	2585763	13	True				
ANR	2585898	Statement	-	67:28:1871:1871	2585763	14	True				
ANR	2585899	Statement	unsigned	67:30:1873:1880	2585763	15	True				
ANR	2585900	Statement	(	67:38:1881:1881	2585763	16	True				
ANR	2585901	Statement	1	67:40:1883:1883	2585763	17	True				
ANR	2585902	Statement	<<	67:41:1884:1885	2585763	18	True				
ANR	2585903	Statement	(	67:43:1886:1886	2585763	19	True				
ANR	2585904	Statement	depth	67:44:1887:1891	2585763	20	True				
ANR	2585905	Statement	-	67:49:1892:1892	2585763	21	True				
ANR	2585906	Statement	1	67:50:1893:1893	2585763	22	True				
ANR	2585907	Statement	)	67:51:1894:1894	2585763	23	True				
ANR	2585908	Statement	)	67:53:1896:1896	2585763	24	True				
ANR	2585909	Statement	)	67:55:1898:1898	2585763	25	True				
ANR	2585910	ExpressionStatement		67:56:1899:1899	2585763	26	True				
ANR	2585911	ExpressionStatement	retain = numPoints - overflow	68:1:1902:1931	2585763	27	True				
ANR	2585912	AssignmentExpression	retain = numPoints - overflow		2585763	0		=			
ANR	2585913	Identifier	retain		2585763	0					
ANR	2585914	AdditiveExpression	numPoints - overflow		2585763	1		-			
ANR	2585915	Identifier	numPoints		2585763	0					
ANR	2585916	Identifier	overflow		2585763	1					
ANR	2585917	ExpressionStatement	frontStart = ( 1 << depth ) - 1	71:1:2004:2035	2585763	28	True				
ANR	2585918	AssignmentExpression	frontStart = ( 1 << depth ) - 1		2585763	0		=			
ANR	2585919	Identifier	frontStart		2585763	0					
ANR	2585920	AdditiveExpression	( 1 << depth ) - 1		2585763	1		-			
ANR	2585921	ShiftExpression	1 << depth		2585763	0		<<			
ANR	2585922	PrimaryExpression	1		2585763	0					
ANR	2585923	Identifier	depth		2585763	1					
ANR	2585924	PrimaryExpression	1		2585763	1					
ANR	2585925	ExpressionStatement	backStart = frontStart - retain	72:1:2038:2069	2585763	29	True				
ANR	2585926	AssignmentExpression	backStart = frontStart - retain		2585763	0		=			
ANR	2585927	Identifier	backStart		2585763	0					
ANR	2585928	AdditiveExpression	frontStart - retain		2585763	1		-			
ANR	2585929	Identifier	frontStart		2585763	0					
ANR	2585930	Identifier	retain		2585763	1					
ANR	2585931	ExpressionStatement	size = frontStart + overflow	73:1:2072:2100	2585763	30	True				
ANR	2585932	AssignmentExpression	size = frontStart + overflow		2585763	0		=			
ANR	2585933	Identifier	size		2585763	0					
ANR	2585934	AdditiveExpression	frontStart + overflow		2585763	1		+			
ANR	2585935	Identifier	frontStart		2585763	0					
ANR	2585936	Identifier	overflow		2585763	1					
ANR	2585937	Statement	IntervalTree	76:1:2150:2161	2585763	31	True				
ANR	2585938	Statement	*	76:14:2163:2163	2585763	32	True				
ANR	2585939	Statement	intTree	76:15:2164:2170	2585763	33	True				
ANR	2585940	Statement	=	76:23:2172:2172	2585763	34	True				
ANR	2585941	Statement	new	76:25:2174:2176	2585763	35	True				
ANR	2585942	ExpressionStatement	IntervalTree	76:29:2178:2190	2585763	36	True				
ANR	2585943	Identifier	IntervalTree		2585763	0					
ANR	2585944	IdentifierDeclStatement	IntervalTreeNode * nodes = new IntervalTreeNode [ size ] ;	77:1:2193:2247	2585763	37	True				
ANR	2585945	IdentifierDecl	* nodes = new IntervalTreeNode [ size ]		2585763	0					
ANR	2585946	IdentifierDeclType	IntervalTreeNode *		2585763	0					
ANR	2585947	Identifier	nodes		2585763	1					
ANR	2585948	AssignmentExpression	* nodes = new IntervalTreeNode [ size ]		2585763	2		=			
ANR	2585949	Identifier	size		2585763	0					
ANR	2585950	Identifier	size		2585763	1					
ANR	2585951	ExpressionStatement	intTree -> size = size	78:1:2250:2270	2585763	38	True				
ANR	2585952	AssignmentExpression	intTree -> size = size		2585763	0		=			
ANR	2585953	PtrMemberAccess	intTree -> size		2585763	0					
ANR	2585954	Identifier	intTree		2585763	0					
ANR	2585955	Identifier	size		2585763	1					
ANR	2585956	Identifier	size		2585763	1					
ANR	2585957	ExpressionStatement	intTree -> nodes = nodes	79:1:2273:2295	2585763	39	True				
ANR	2585958	AssignmentExpression	intTree -> nodes = nodes		2585763	0		=			
ANR	2585959	PtrMemberAccess	intTree -> nodes		2585763	0					
ANR	2585960	Identifier	intTree		2585763	0					
ANR	2585961	Identifier	nodes		2585763	1					
ANR	2585962	Identifier	nodes		2585763	1					
ANR	2585963	IdentifierDeclStatement	set < double > :: iterator sitr = endPoints . begin ( ) ;	82:1:2346:2393	2585763	40	True				
ANR	2585964	IdentifierDecl	sitr = endPoints . begin ( )		2585763	0					
ANR	2585965	IdentifierDeclType	set < double > :: iterator		2585763	0					
ANR	2585966	Identifier	sitr		2585763	1					
ANR	2585967	AssignmentExpression	sitr = endPoints . begin ( )		2585763	2		=			
ANR	2585968	Identifier	sitr		2585763	0					
ANR	2585969	CallExpression	endPoints . begin ( )		2585763	1					
ANR	2585970	Callee	endPoints . begin		2585763	0					
ANR	2585971	MemberAccess	endPoints . begin		2585763	0					
ANR	2585972	Identifier	endPoints		2585763	0					
ANR	2585973	Identifier	begin		2585763	1					
ANR	2585974	ArgumentList			2585763	1					
ANR	2585975	ForStatement	"for ( int i = frontStart ; i < frontStart + overflow ; i ++ , sitr ++ )"		2585763	41					
ANR	2585976	ForInit	int i = frontStart ;	83:6:2401:2420	2585763	0	True				
ANR	2585977	IdentifierDeclStatement	int i = frontStart ;		2585763	0					
ANR	2585978	IdentifierDecl	i = frontStart		2585763	0					
ANR	2585979	IdentifierDeclType	int		2585763	0					
ANR	2585980	Identifier	i		2585763	1					
ANR	2585981	AssignmentExpression	i = frontStart		2585763	2		=			
ANR	2585982	Identifier	frontStart		2585763	0					
ANR	2585983	Identifier	frontStart		2585763	1					
ANR	2585984	Condition	i < frontStart + overflow	83:27:2422:2444	2585763	1	True				
ANR	2585985	RelationalExpression	i < frontStart + overflow		2585763	0		<			
ANR	2585986	Identifier	i		2585763	0					
ANR	2585987	AdditiveExpression	frontStart + overflow		2585763	1		+			
ANR	2585988	Identifier	frontStart		2585763	0					
ANR	2585989	Identifier	overflow		2585763	1					
ANR	2585990	Expression	"i ++ , sitr ++"	83:53:2448:2458	2585763	2	True				
ANR	2585991	PostIncDecOperationExpression	i ++		2585763	0					
ANR	2585992	Identifier	i		2585763	0					
ANR	2585993	IncDec	++		2585763	1					
ANR	2585994	PostIncDecOperationExpression	sitr ++		2585763	1					
ANR	2585995	Identifier	sitr		2585763	0					
ANR	2585996	IncDec	++		2585763	1					
ANR	2585997	CompoundStatement		39:67:1308:1308	2585763	3					
ANR	2585998	ExpressionStatement	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr	84:2:2466:2522	2585763	0	True				
ANR	2585999	AssignmentExpression	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		2585763	0		=			
ANR	2586000	MemberAccess	nodes [ i ] . max		2585763	0					
ANR	2586001	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586002	Identifier	nodes		2585763	0					
ANR	2586003	Identifier	i		2585763	1					
ANR	2586004	Identifier	max		2585763	1					
ANR	2586005	AssignmentExpression	nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		2585763	1		=			
ANR	2586006	MemberAccess	nodes [ i ] . min		2585763	0					
ANR	2586007	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586008	Identifier	nodes		2585763	0					
ANR	2586009	Identifier	i		2585763	1					
ANR	2586010	Identifier	min		2585763	1					
ANR	2586011	AssignmentExpression	nodes [ i ] . nodeValue = * sitr		2585763	1		=			
ANR	2586012	MemberAccess	nodes [ i ] . nodeValue		2585763	0					
ANR	2586013	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586014	Identifier	nodes		2585763	0					
ANR	2586015	Identifier	i		2585763	1					
ANR	2586016	Identifier	nodeValue		2585763	1					
ANR	2586017	UnaryOperationExpression	* sitr		2585763	1					
ANR	2586018	UnaryOperator	*		2585763	0					
ANR	2586019	Identifier	sitr		2585763	1					
ANR	2586020	ForStatement	"for ( int i = backStart ; i < backStart + retain ; i ++ , sitr ++ )"		2585763	42					
ANR	2586021	ForInit	int i = backStart ;	88:6:2579:2597	2585763	0	True				
ANR	2586022	IdentifierDeclStatement	int i = backStart ;		2585763	0					
ANR	2586023	IdentifierDecl	i = backStart		2585763	0					
ANR	2586024	IdentifierDeclType	int		2585763	0					
ANR	2586025	Identifier	i		2585763	1					
ANR	2586026	AssignmentExpression	i = backStart		2585763	2		=			
ANR	2586027	Identifier	backStart		2585763	0					
ANR	2586028	Identifier	backStart		2585763	1					
ANR	2586029	Condition	i < backStart + retain	88:26:2599:2618	2585763	1	True				
ANR	2586030	RelationalExpression	i < backStart + retain		2585763	0		<			
ANR	2586031	Identifier	i		2585763	0					
ANR	2586032	AdditiveExpression	backStart + retain		2585763	1		+			
ANR	2586033	Identifier	backStart		2585763	0					
ANR	2586034	Identifier	retain		2585763	1					
ANR	2586035	Expression	"i ++ , sitr ++"	88:49:2622:2632	2585763	2	True				
ANR	2586036	PostIncDecOperationExpression	i ++		2585763	0					
ANR	2586037	Identifier	i		2585763	0					
ANR	2586038	IncDec	++		2585763	1					
ANR	2586039	PostIncDecOperationExpression	sitr ++		2585763	1					
ANR	2586040	Identifier	sitr		2585763	0					
ANR	2586041	IncDec	++		2585763	1					
ANR	2586042	CompoundStatement		44:63:1482:1482	2585763	3					
ANR	2586043	ExpressionStatement	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr	89:2:2640:2696	2585763	0	True				
ANR	2586044	AssignmentExpression	nodes [ i ] . max = nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		2585763	0		=			
ANR	2586045	MemberAccess	nodes [ i ] . max		2585763	0					
ANR	2586046	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586047	Identifier	nodes		2585763	0					
ANR	2586048	Identifier	i		2585763	1					
ANR	2586049	Identifier	max		2585763	1					
ANR	2586050	AssignmentExpression	nodes [ i ] . min = nodes [ i ] . nodeValue = * sitr		2585763	1		=			
ANR	2586051	MemberAccess	nodes [ i ] . min		2585763	0					
ANR	2586052	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586053	Identifier	nodes		2585763	0					
ANR	2586054	Identifier	i		2585763	1					
ANR	2586055	Identifier	min		2585763	1					
ANR	2586056	AssignmentExpression	nodes [ i ] . nodeValue = * sitr		2585763	1		=			
ANR	2586057	MemberAccess	nodes [ i ] . nodeValue		2585763	0					
ANR	2586058	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586059	Identifier	nodes		2585763	0					
ANR	2586060	Identifier	i		2585763	1					
ANR	2586061	Identifier	nodeValue		2585763	1					
ANR	2586062	UnaryOperationExpression	* sitr		2585763	1					
ANR	2586063	UnaryOperator	*		2585763	0					
ANR	2586064	Identifier	sitr		2585763	1					
ANR	2586065	ForStatement	for ( int i = backStart - 1 ; i >= 0 ; i -- )		2585763	43					
ANR	2586066	ForInit	int i = backStart - 1 ;	93:6:2761:2783	2585763	0	True				
ANR	2586067	IdentifierDeclStatement	int i = backStart - 1 ;		2585763	0					
ANR	2586068	IdentifierDecl	i = backStart - 1		2585763	0					
ANR	2586069	IdentifierDeclType	int		2585763	0					
ANR	2586070	Identifier	i		2585763	1					
ANR	2586071	AssignmentExpression	i = backStart - 1		2585763	2		=			
ANR	2586072	Identifier	i		2585763	0					
ANR	2586073	AdditiveExpression	backStart - 1		2585763	1		-			
ANR	2586074	Identifier	backStart		2585763	0					
ANR	2586075	PrimaryExpression	1		2585763	1					
ANR	2586076	Condition	i >= 0	93:30:2785:2790	2585763	1	True				
ANR	2586077	RelationalExpression	i >= 0		2585763	0		>=			
ANR	2586078	Identifier	i		2585763	0					
ANR	2586079	PrimaryExpression	0		2585763	1					
ANR	2586080	PostIncDecOperationExpression	i --	93:39:2794:2796	2585763	2	True				
ANR	2586081	Identifier	i		2585763	0					
ANR	2586082	IncDec	--		2585763	1					
ANR	2586083	CompoundStatement		49:45:1646:1646	2585763	3					
ANR	2586084	ExpressionStatement	nodes [ i ] . nodeValue = ( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2	94:2:2804:2868	2585763	0	True				
ANR	2586085	AssignmentExpression	nodes [ i ] . nodeValue = ( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2		2585763	0		=			
ANR	2586086	MemberAccess	nodes [ i ] . nodeValue		2585763	0					
ANR	2586087	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586088	Identifier	nodes		2585763	0					
ANR	2586089	Identifier	i		2585763	1					
ANR	2586090	Identifier	nodeValue		2585763	1					
ANR	2586091	MultiplicativeExpression	( nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min ) / 2		2585763	1		/			
ANR	2586092	AdditiveExpression	nodes [ 2 * i + 1 ] . max + nodes [ 2 * i + 2 ] . min		2585763	0		+			
ANR	2586093	MemberAccess	nodes [ 2 * i + 1 ] . max		2585763	0					
ANR	2586094	ArrayIndexing	nodes [ 2 * i + 1 ]		2585763	0					
ANR	2586095	Identifier	nodes		2585763	0					
ANR	2586096	AdditiveExpression	2 * i + 1		2585763	1		+			
ANR	2586097	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586098	PrimaryExpression	2		2585763	0					
ANR	2586099	Identifier	i		2585763	1					
ANR	2586100	PrimaryExpression	1		2585763	1					
ANR	2586101	Identifier	max		2585763	1					
ANR	2586102	MemberAccess	nodes [ 2 * i + 2 ] . min		2585763	1					
ANR	2586103	ArrayIndexing	nodes [ 2 * i + 2 ]		2585763	0					
ANR	2586104	Identifier	nodes		2585763	0					
ANR	2586105	AdditiveExpression	2 * i + 2		2585763	1		+			
ANR	2586106	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586107	PrimaryExpression	2		2585763	0					
ANR	2586108	Identifier	i		2585763	1					
ANR	2586109	PrimaryExpression	2		2585763	1					
ANR	2586110	Identifier	min		2585763	1					
ANR	2586111	PrimaryExpression	2		2585763	1					
ANR	2586112	ExpressionStatement	tmpL = nodes [ 2 * i + 1 ] . max	95:2:2872:2895	2585763	1	True				
ANR	2586113	AssignmentExpression	tmpL = nodes [ 2 * i + 1 ] . max		2585763	0		=			
ANR	2586114	Identifier	tmpL		2585763	0					
ANR	2586115	MemberAccess	nodes [ 2 * i + 1 ] . max		2585763	1					
ANR	2586116	ArrayIndexing	nodes [ 2 * i + 1 ]		2585763	0					
ANR	2586117	Identifier	nodes		2585763	0					
ANR	2586118	AdditiveExpression	2 * i + 1		2585763	1		+			
ANR	2586119	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586120	PrimaryExpression	2		2585763	0					
ANR	2586121	Identifier	i		2585763	1					
ANR	2586122	PrimaryExpression	1		2585763	1					
ANR	2586123	Identifier	max		2585763	1					
ANR	2586124	ExpressionStatement	tmpR = nodes [ 2 * i + 2 ] . max	95:27:2897:2920	2585763	2	True				
ANR	2586125	AssignmentExpression	tmpR = nodes [ 2 * i + 2 ] . max		2585763	0		=			
ANR	2586126	Identifier	tmpR		2585763	0					
ANR	2586127	MemberAccess	nodes [ 2 * i + 2 ] . max		2585763	1					
ANR	2586128	ArrayIndexing	nodes [ 2 * i + 2 ]		2585763	0					
ANR	2586129	Identifier	nodes		2585763	0					
ANR	2586130	AdditiveExpression	2 * i + 2		2585763	1		+			
ANR	2586131	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586132	PrimaryExpression	2		2585763	0					
ANR	2586133	Identifier	i		2585763	1					
ANR	2586134	PrimaryExpression	2		2585763	1					
ANR	2586135	Identifier	max		2585763	1					
ANR	2586136	ExpressionStatement	nodes [ i ] . max = tmpL > tmpR ? tmpL : tmpR	96:2:2924:2964	2585763	3	True				
ANR	2586137	AssignmentExpression	nodes [ i ] . max = tmpL > tmpR ? tmpL : tmpR		2585763	0		=			
ANR	2586138	MemberAccess	nodes [ i ] . max		2585763	0					
ANR	2586139	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586140	Identifier	nodes		2585763	0					
ANR	2586141	Identifier	i		2585763	1					
ANR	2586142	Identifier	max		2585763	1					
ANR	2586143	ConditionalExpression	tmpL > tmpR ? tmpL : tmpR		2585763	1					
ANR	2586144	Condition	tmpL > tmpR		2585763	0					
ANR	2586145	RelationalExpression	tmpL > tmpR		2585763	0		>			
ANR	2586146	Identifier	tmpL		2585763	0					
ANR	2586147	Identifier	tmpR		2585763	1					
ANR	2586148	Identifier	tmpL		2585763	1					
ANR	2586149	Identifier	tmpR		2585763	2					
ANR	2586150	ExpressionStatement	tmpL = nodes [ 2 * i + 1 ] . min	97:2:2968:2991	2585763	4	True				
ANR	2586151	AssignmentExpression	tmpL = nodes [ 2 * i + 1 ] . min		2585763	0		=			
ANR	2586152	Identifier	tmpL		2585763	0					
ANR	2586153	MemberAccess	nodes [ 2 * i + 1 ] . min		2585763	1					
ANR	2586154	ArrayIndexing	nodes [ 2 * i + 1 ]		2585763	0					
ANR	2586155	Identifier	nodes		2585763	0					
ANR	2586156	AdditiveExpression	2 * i + 1		2585763	1		+			
ANR	2586157	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586158	PrimaryExpression	2		2585763	0					
ANR	2586159	Identifier	i		2585763	1					
ANR	2586160	PrimaryExpression	1		2585763	1					
ANR	2586161	Identifier	min		2585763	1					
ANR	2586162	ExpressionStatement	tmpR = nodes [ 2 * i + 2 ] . min	97:27:2993:3016	2585763	5	True				
ANR	2586163	AssignmentExpression	tmpR = nodes [ 2 * i + 2 ] . min		2585763	0		=			
ANR	2586164	Identifier	tmpR		2585763	0					
ANR	2586165	MemberAccess	nodes [ 2 * i + 2 ] . min		2585763	1					
ANR	2586166	ArrayIndexing	nodes [ 2 * i + 2 ]		2585763	0					
ANR	2586167	Identifier	nodes		2585763	0					
ANR	2586168	AdditiveExpression	2 * i + 2		2585763	1		+			
ANR	2586169	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586170	PrimaryExpression	2		2585763	0					
ANR	2586171	Identifier	i		2585763	1					
ANR	2586172	PrimaryExpression	2		2585763	1					
ANR	2586173	Identifier	min		2585763	1					
ANR	2586174	ExpressionStatement	nodes [ i ] . min = tmpL < tmpR ? tmpL : tmpR	98:2:3020:3060	2585763	6	True				
ANR	2586175	AssignmentExpression	nodes [ i ] . min = tmpL < tmpR ? tmpL : tmpR		2585763	0		=			
ANR	2586176	MemberAccess	nodes [ i ] . min		2585763	0					
ANR	2586177	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586178	Identifier	nodes		2585763	0					
ANR	2586179	Identifier	i		2585763	1					
ANR	2586180	Identifier	min		2585763	1					
ANR	2586181	ConditionalExpression	tmpL < tmpR ? tmpL : tmpR		2585763	1					
ANR	2586182	Condition	tmpL < tmpR		2585763	0					
ANR	2586183	RelationalExpression	tmpL < tmpR		2585763	0		<			
ANR	2586184	Identifier	tmpL		2585763	0					
ANR	2586185	Identifier	tmpR		2585763	1					
ANR	2586186	Identifier	tmpL		2585763	1					
ANR	2586187	Identifier	tmpR		2585763	2					
ANR	2586188	ForStatement	for ( itr = intervals . begin ( ) ; itr != intervals . end ( ) ; itr ++ )		2585763	44					
ANR	2586189	ForInit	itr = intervals . begin ( ) ;	103:6:3122:3146	2585763	0	True				
ANR	2586190	AssignmentExpression	itr = intervals . begin ( )		2585763	0		=			
ANR	2586191	Identifier	itr		2585763	0					
ANR	2586192	CallExpression	intervals . begin ( )		2585763	1					
ANR	2586193	Callee	intervals . begin		2585763	0					
ANR	2586194	MemberAccess	intervals . begin		2585763	0					
ANR	2586195	Identifier	intervals		2585763	0					
ANR	2586196	Identifier	begin		2585763	1					
ANR	2586197	ArgumentList			2585763	1					
ANR	2586198	Condition	itr != intervals . end ( )	103:32:3148:3170	2585763	1	True				
ANR	2586199	EqualityExpression	itr != intervals . end ( )		2585763	0		!=			
ANR	2586200	Identifier	itr		2585763	0					
ANR	2586201	CallExpression	intervals . end ( )		2585763	1					
ANR	2586202	Callee	intervals . end		2585763	0					
ANR	2586203	MemberAccess	intervals . end		2585763	0					
ANR	2586204	Identifier	intervals		2585763	0					
ANR	2586205	Identifier	end		2585763	1					
ANR	2586206	ArgumentList			2585763	1					
ANR	2586207	PostIncDecOperationExpression	itr ++	103:57:3173:3177	2585763	2	True				
ANR	2586208	Identifier	itr		2585763	0					
ANR	2586209	IncDec	++		2585763	1					
ANR	2586210	CompoundStatement		60:2:2031:2044	2585763	3					
ANR	2586211	IdentifierDeclStatement	int index = 0 ;	104:2:3185:3198	2585763	0	True				
ANR	2586212	IdentifierDecl	index = 0		2585763	0					
ANR	2586213	IdentifierDeclType	int		2585763	0					
ANR	2586214	Identifier	index		2585763	1					
ANR	2586215	AssignmentExpression	index = 0		2585763	2		=			
ANR	2586216	Identifier	index		2585763	0					
ANR	2586217	PrimaryExpression	0		2585763	1					
ANR	2586218	ExpressionStatement	itr -> second . lower . IsNumber ( tmpL )	105:2:3219:3253	2585763	1	True				
ANR	2586219	CallExpression	itr -> second . lower . IsNumber ( tmpL )		2585763	0					
ANR	2586220	Callee	itr -> second . lower . IsNumber		2585763	0					
ANR	2586221	MemberAccess	itr -> second . lower . IsNumber		2585763	0					
ANR	2586222	MemberAccess	itr -> second . lower		2585763	0					
ANR	2586223	PtrMemberAccess	itr -> second		2585763	0					
ANR	2586224	Identifier	itr		2585763	0					
ANR	2586225	Identifier	second		2585763	1					
ANR	2586226	Identifier	lower		2585763	1					
ANR	2586227	Identifier	IsNumber		2585763	1					
ANR	2586228	ArgumentList	tmpL		2585763	1					
ANR	2586229	Argument	tmpL		2585763	0					
ANR	2586230	Identifier	tmpL		2585763	0					
ANR	2586231	ExpressionStatement	itr -> second . upper . IsNumber ( tmpR )	106:2:3257:3291	2585763	2	True				
ANR	2586232	CallExpression	itr -> second . upper . IsNumber ( tmpR )		2585763	0					
ANR	2586233	Callee	itr -> second . upper . IsNumber		2585763	0					
ANR	2586234	MemberAccess	itr -> second . upper . IsNumber		2585763	0					
ANR	2586235	MemberAccess	itr -> second . upper		2585763	0					
ANR	2586236	PtrMemberAccess	itr -> second		2585763	0					
ANR	2586237	Identifier	itr		2585763	0					
ANR	2586238	Identifier	second		2585763	1					
ANR	2586239	Identifier	upper		2585763	1					
ANR	2586240	Identifier	IsNumber		2585763	1					
ANR	2586241	ArgumentList	tmpR		2585763	1					
ANR	2586242	Argument	tmpR		2585763	0					
ANR	2586243	Identifier	tmpR		2585763	0					
ANR	2586244	WhileStatement	while ( 1 )		2585763	3					
ANR	2586245	Condition	1	107:9:3302:3302	2585763	0	True				
ANR	2586246	PrimaryExpression	1		2585763	0					
ANR	2586247	CompoundStatement		63:13:2152:2152	2585763	1					
ANR	2586248	IfStatement	if ( index > size )		2585763	0					
ANR	2586249	Condition	index > size	108:7:3315:3326	2585763	0	True				
ANR	2586250	RelationalExpression	index > size		2585763	0		>			
ANR	2586251	Identifier	index		2585763	0					
ANR	2586252	Identifier	size		2585763	1					
ANR	2586253	CompoundStatement		64:22:2176:2176	2585763	1					
ANR	2586254	ExpressionStatement	"printf ( ""Fell out of the primary structure"" )"	109:4:3336:3381	2585763	0	True				
ANR	2586255	CallExpression	"printf ( ""Fell out of the primary structure"" )"		2585763	0					
ANR	2586256	Callee	printf		2585763	0					
ANR	2586257	Identifier	printf		2585763	0					
ANR	2586258	ArgumentList	"""Fell out of the primary structure"""		2585763	1					
ANR	2586259	Argument	"""Fell out of the primary structure"""		2585763	0					
ANR	2586260	PrimaryExpression	"""Fell out of the primary structure"""		2585763	0					
ANR	2586261	ExpressionStatement	exit ( 1 )	110:4:3387:3396	2585763	1	True				
ANR	2586262	CallExpression	exit ( 1 )		2585763	0					
ANR	2586263	Callee	exit		2585763	0					
ANR	2586264	Identifier	exit		2585763	0					
ANR	2586265	ArgumentList	1		2585763	1					
ANR	2586266	Argument	1		2585763	0					
ANR	2586267	PrimaryExpression	1		2585763	0					
ANR	2586268	IfStatement	if ( tmpR < nodes [ index ] . nodeValue )		2585763	1					
ANR	2586269	Condition	tmpR < nodes [ index ] . nodeValue	112:7:3410:3438	2585763	0	True				
ANR	2586270	RelationalExpression	tmpR < nodes [ index ] . nodeValue		2585763	0		<			
ANR	2586271	Identifier	tmpR		2585763	0					
ANR	2586272	MemberAccess	nodes [ index ] . nodeValue		2585763	1					
ANR	2586273	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586274	Identifier	nodes		2585763	0					
ANR	2586275	Identifier	index		2585763	1					
ANR	2586276	Identifier	nodeValue		2585763	1					
ANR	2586277	CompoundStatement		68:39:2288:2288	2585763	1					
ANR	2586278	ExpressionStatement	index = index * 2 + 1	113:4:3448:3467	2585763	0	True				
ANR	2586279	AssignmentExpression	index = index * 2 + 1		2585763	0		=			
ANR	2586280	Identifier	index		2585763	0					
ANR	2586281	AdditiveExpression	index * 2 + 1		2585763	1		+			
ANR	2586282	MultiplicativeExpression	index * 2		2585763	0		*			
ANR	2586283	Identifier	index		2585763	0					
ANR	2586284	PrimaryExpression	2		2585763	1					
ANR	2586285	PrimaryExpression	1		2585763	1					
ANR	2586286	ContinueStatement	continue ;	114:4:3473:3481	2585763	1	True				
ANR	2586287	IfStatement	if ( tmpL > nodes [ index ] . nodeValue )		2585763	2					
ANR	2586288	Condition	tmpL > nodes [ index ] . nodeValue	116:7:3496:3524	2585763	0	True				
ANR	2586289	RelationalExpression	tmpL > nodes [ index ] . nodeValue		2585763	0		>			
ANR	2586290	Identifier	tmpL		2585763	0					
ANR	2586291	MemberAccess	nodes [ index ] . nodeValue		2585763	1					
ANR	2586292	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586293	Identifier	nodes		2585763	0					
ANR	2586294	Identifier	index		2585763	1					
ANR	2586295	Identifier	nodeValue		2585763	1					
ANR	2586296	CompoundStatement		72:39:2374:2374	2585763	1					
ANR	2586297	ExpressionStatement	index = index * 2 + 2	117:4:3534:3553	2585763	0	True				
ANR	2586298	AssignmentExpression	index = index * 2 + 2		2585763	0		=			
ANR	2586299	Identifier	index		2585763	0					
ANR	2586300	AdditiveExpression	index * 2 + 2		2585763	1		+			
ANR	2586301	MultiplicativeExpression	index * 2		2585763	0		*			
ANR	2586302	Identifier	index		2585763	0					
ANR	2586303	PrimaryExpression	2		2585763	1					
ANR	2586304	PrimaryExpression	2		2585763	1					
ANR	2586305	ContinueStatement	continue ;	118:4:3559:3567	2585763	1	True				
ANR	2586306	IfStatement	if ( tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue )		2585763	3					
ANR	2586307	Condition	tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue	120:7:3582:3641	2585763	0	True				
ANR	2586308	AndExpression	tmpL <= nodes [ index ] . nodeValue && tmpR >= nodes [ index ] . nodeValue		2585763	0		&&			
ANR	2586309	RelationalExpression	tmpL <= nodes [ index ] . nodeValue		2585763	0		<=			
ANR	2586310	Identifier	tmpL		2585763	0					
ANR	2586311	MemberAccess	nodes [ index ] . nodeValue		2585763	1					
ANR	2586312	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586313	Identifier	nodes		2585763	0					
ANR	2586314	Identifier	index		2585763	1					
ANR	2586315	Identifier	nodeValue		2585763	1					
ANR	2586316	RelationalExpression	tmpR >= nodes [ index ] . nodeValue		2585763	1		>=			
ANR	2586317	Identifier	tmpR		2585763	0					
ANR	2586318	MemberAccess	nodes [ index ] . nodeValue		2585763	1					
ANR	2586319	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586320	Identifier	nodes		2585763	0					
ANR	2586321	Identifier	index		2585763	1					
ANR	2586322	Identifier	nodeValue		2585763	1					
ANR	2586323	CompoundStatement		76:70:2491:2491	2585763	1					
ANR	2586324	IfStatement	"if ( ! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper ) )"		2585763	0					
ANR	2586325	Condition	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"	121:8:3655:3832	2585763	0	True				
ANR	2586326	OrExpression	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower ) || ! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		2585763	0		||			
ANR	2586327	UnaryOperationExpression	"! InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower )"		2585763	0					
ANR	2586328	UnaryOperator	!		2585763	0					
ANR	2586329	CallExpression	"InsertInLeftSecondary ( nodes [ index ] . LS , itr -> first , tmpL , itr -> second . openLower )"		2585763	1					
ANR	2586330	Callee	InsertInLeftSecondary		2585763	0					
ANR	2586331	Identifier	InsertInLeftSecondary		2585763	0					
ANR	2586332	ArgumentList	nodes [ index ] . LS		2585763	1					
ANR	2586333	Argument	nodes [ index ] . LS		2585763	0					
ANR	2586334	MemberAccess	nodes [ index ] . LS		2585763	0					
ANR	2586335	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586336	Identifier	nodes		2585763	0					
ANR	2586337	Identifier	index		2585763	1					
ANR	2586338	Identifier	LS		2585763	1					
ANR	2586339	Argument	itr -> first		2585763	1					
ANR	2586340	PtrMemberAccess	itr -> first		2585763	0					
ANR	2586341	Identifier	itr		2585763	0					
ANR	2586342	Identifier	first		2585763	1					
ANR	2586343	Argument	tmpL		2585763	2					
ANR	2586344	Identifier	tmpL		2585763	0					
ANR	2586345	Argument	itr -> second . openLower		2585763	3					
ANR	2586346	MemberAccess	itr -> second . openLower		2585763	0					
ANR	2586347	PtrMemberAccess	itr -> second		2585763	0					
ANR	2586348	Identifier	itr		2585763	0					
ANR	2586349	Identifier	second		2585763	1					
ANR	2586350	Identifier	openLower		2585763	1					
ANR	2586351	UnaryOperationExpression	"! InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		2585763	1					
ANR	2586352	UnaryOperator	!		2585763	0					
ANR	2586353	CallExpression	"InsertInRightSecondary ( nodes [ index ] . RS , itr -> first , tmpR , itr -> second . openUpper )"		2585763	1					
ANR	2586354	Callee	InsertInRightSecondary		2585763	0					
ANR	2586355	Identifier	InsertInRightSecondary		2585763	0					
ANR	2586356	ArgumentList	nodes [ index ] . RS		2585763	1					
ANR	2586357	Argument	nodes [ index ] . RS		2585763	0					
ANR	2586358	MemberAccess	nodes [ index ] . RS		2585763	0					
ANR	2586359	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586360	Identifier	nodes		2585763	0					
ANR	2586361	Identifier	index		2585763	1					
ANR	2586362	Identifier	RS		2585763	1					
ANR	2586363	Argument	itr -> first		2585763	1					
ANR	2586364	PtrMemberAccess	itr -> first		2585763	0					
ANR	2586365	Identifier	itr		2585763	0					
ANR	2586366	Identifier	first		2585763	1					
ANR	2586367	Argument	tmpR		2585763	2					
ANR	2586368	Identifier	tmpR		2585763	0					
ANR	2586369	Argument	itr -> second . openUpper		2585763	3					
ANR	2586370	MemberAccess	itr -> second . openUpper		2585763	0					
ANR	2586371	PtrMemberAccess	itr -> second		2585763	0					
ANR	2586372	Identifier	itr		2585763	0					
ANR	2586373	Identifier	second		2585763	1					
ANR	2586374	Identifier	openUpper		2585763	1					
ANR	2586375	CompoundStatement		80:30:2681:2681	2585763	1					
ANR	2586376	ExpressionStatement	"printf ( ""Failed to insert in secondary list"" )"	125:5:3842:3888	2585763	0	True				
ANR	2586377	CallExpression	"printf ( ""Failed to insert in secondary list"" )"		2585763	0					
ANR	2586378	Callee	printf		2585763	0					
ANR	2586379	Identifier	printf		2585763	0					
ANR	2586380	ArgumentList	"""Failed to insert in secondary list"""		2585763	1					
ANR	2586381	Argument	"""Failed to insert in secondary list"""		2585763	0					
ANR	2586382	PrimaryExpression	"""Failed to insert in secondary list"""		2585763	0					
ANR	2586383	ExpressionStatement	exit ( 1 )	126:5:3895:3904	2585763	1	True				
ANR	2586384	CallExpression	exit ( 1 )		2585763	0					
ANR	2586385	Callee	exit		2585763	0					
ANR	2586386	Identifier	exit		2585763	0					
ANR	2586387	ArgumentList	1		2585763	1					
ANR	2586388	Argument	1		2585763	0					
ANR	2586389	PrimaryExpression	1		2585763	0					
ANR	2586390	ExpressionStatement	nodes [ index ] . active = true	132:4:4147:4173	2585763	1	True				
ANR	2586391	AssignmentExpression	nodes [ index ] . active = true		2585763	0		=			
ANR	2586392	MemberAccess	nodes [ index ] . active		2585763	0					
ANR	2586393	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586394	Identifier	nodes		2585763	0					
ANR	2586395	Identifier	index		2585763	1					
ANR	2586396	Identifier	active		2585763	1					
ANR	2586397	Identifier	true		2585763	1					
ANR	2586398	ExpressionStatement	nodes [ index ] . activeDesc = true	133:4:4179:4209	2585763	2	True				
ANR	2586399	AssignmentExpression	nodes [ index ] . activeDesc = true		2585763	0		=			
ANR	2586400	MemberAccess	nodes [ index ] . activeDesc		2585763	0					
ANR	2586401	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586402	Identifier	nodes		2585763	0					
ANR	2586403	Identifier	index		2585763	1					
ANR	2586404	Identifier	activeDesc		2585763	1					
ANR	2586405	Identifier	true		2585763	1					
ANR	2586406	ExpressionStatement	nodes [ index ] . closestActive = index	134:4:4215:4249	2585763	3	True				
ANR	2586407	AssignmentExpression	nodes [ index ] . closestActive = index		2585763	0		=			
ANR	2586408	MemberAccess	nodes [ index ] . closestActive		2585763	0					
ANR	2586409	ArrayIndexing	nodes [ index ]		2585763	0					
ANR	2586410	Identifier	nodes		2585763	0					
ANR	2586411	Identifier	index		2585763	1					
ANR	2586412	Identifier	closestActive		2585763	1					
ANR	2586413	Identifier	index		2585763	1					
ANR	2586414	BreakStatement	break ;	135:4:4255:4260	2585763	4	True				
ANR	2586415	IdentifierDeclStatement	"int indexL , indexR ;"	141:1:4330:4348	2585763	45	True				
ANR	2586416	IdentifierDecl	indexL		2585763	0					
ANR	2586417	IdentifierDeclType	int		2585763	0					
ANR	2586418	Identifier	indexL		2585763	1					
ANR	2586419	IdentifierDecl	indexR		2585763	1					
ANR	2586420	IdentifierDeclType	int		2585763	0					
ANR	2586421	Identifier	indexR		2585763	1					
ANR	2586422	ExpressionStatement	intTree -> rootT = 0	142:1:4351:4369	2585763	46	True				
ANR	2586423	AssignmentExpression	intTree -> rootT = 0		2585763	0		=			
ANR	2586424	PtrMemberAccess	intTree -> rootT		2585763	0					
ANR	2586425	Identifier	intTree		2585763	0					
ANR	2586426	Identifier	rootT		2585763	1					
ANR	2586427	PrimaryExpression	0		2585763	1					
ANR	2586428	ForStatement	for ( int i = backStart - 1 ; i >= 0 ; i -- )		2585763	47					
ANR	2586429	ForInit	int i = backStart - 1 ;	143:6:4377:4398	2585763	0	True				
ANR	2586430	IdentifierDeclStatement	int i = backStart - 1 ;		2585763	0					
ANR	2586431	IdentifierDecl	i = backStart - 1		2585763	0					
ANR	2586432	IdentifierDeclType	int		2585763	0					
ANR	2586433	Identifier	i		2585763	1					
ANR	2586434	AssignmentExpression	i = backStart - 1		2585763	2		=			
ANR	2586435	Identifier	i		2585763	0					
ANR	2586436	AdditiveExpression	backStart - 1		2585763	1		-			
ANR	2586437	Identifier	backStart		2585763	0					
ANR	2586438	PrimaryExpression	1		2585763	1					
ANR	2586439	Condition	i >= 0	143:29:4400:4405	2585763	1	True				
ANR	2586440	RelationalExpression	i >= 0		2585763	0		>=			
ANR	2586441	Identifier	i		2585763	0					
ANR	2586442	PrimaryExpression	0		2585763	1					
ANR	2586443	PostIncDecOperationExpression	i --	143:38:4409:4411	2585763	2	True				
ANR	2586444	Identifier	i		2585763	0					
ANR	2586445	IncDec	--		2585763	1					
ANR	2586446	CompoundStatement		99:44:3261:3261	2585763	3					
ANR	2586447	ExpressionStatement	indexL = 2 * i + 1	144:2:4419:4435	2585763	0	True				
ANR	2586448	AssignmentExpression	indexL = 2 * i + 1		2585763	0		=			
ANR	2586449	Identifier	indexL		2585763	0					
ANR	2586450	AdditiveExpression	2 * i + 1		2585763	1		+			
ANR	2586451	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586452	PrimaryExpression	2		2585763	0					
ANR	2586453	Identifier	i		2585763	1					
ANR	2586454	PrimaryExpression	1		2585763	1					
ANR	2586455	ExpressionStatement	indexR = 2 * i + 2	145:2:4439:4455	2585763	1	True				
ANR	2586456	AssignmentExpression	indexR = 2 * i + 2		2585763	0		=			
ANR	2586457	Identifier	indexR		2585763	0					
ANR	2586458	AdditiveExpression	2 * i + 2		2585763	1		+			
ANR	2586459	MultiplicativeExpression	2 * i		2585763	0		*			
ANR	2586460	PrimaryExpression	2		2585763	0					
ANR	2586461	Identifier	i		2585763	1					
ANR	2586462	PrimaryExpression	2		2585763	1					
ANR	2586463	ExpressionStatement	nodes [ i ] . active = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )	147:2:4511:4634	2585763	2	True				
ANR	2586464	AssignmentExpression	nodes [ i ] . active = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		2585763	0		=			
ANR	2586465	MemberAccess	nodes [ i ] . active		2585763	0					
ANR	2586466	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586467	Identifier	nodes		2585763	0					
ANR	2586468	Identifier	i		2585763	1					
ANR	2586469	Identifier	active		2585763	1					
ANR	2586470	OrExpression	( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		2585763	1		||			
ANR	2586471	OrExpression	nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL		2585763	0		||			
ANR	2586472	EqualityExpression	nodes [ i ] . LS != NULL		2585763	0		!=			
ANR	2586473	MemberAccess	nodes [ i ] . LS		2585763	0					
ANR	2586474	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586475	Identifier	nodes		2585763	0					
ANR	2586476	Identifier	i		2585763	1					
ANR	2586477	Identifier	LS		2585763	1					
ANR	2586478	Identifier	NULL		2585763	1					
ANR	2586479	EqualityExpression	nodes [ i ] . RS != NULL		2585763	1		!=			
ANR	2586480	MemberAccess	nodes [ i ] . RS		2585763	0					
ANR	2586481	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586482	Identifier	nodes		2585763	0					
ANR	2586483	Identifier	i		2585763	1					
ANR	2586484	Identifier	RS		2585763	1					
ANR	2586485	Identifier	NULL		2585763	1					
ANR	2586486	AndExpression	nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2585763	1		&&			
ANR	2586487	MemberAccess	nodes [ indexL ] . activeDesc		2585763	0					
ANR	2586488	ArrayIndexing	nodes [ indexL ]		2585763	0					
ANR	2586489	Identifier	nodes		2585763	0					
ANR	2586490	Identifier	indexL		2585763	1					
ANR	2586491	Identifier	activeDesc		2585763	1					
ANR	2586492	MemberAccess	nodes [ indexR ] . activeDesc		2585763	1					
ANR	2586493	ArrayIndexing	nodes [ indexR ]		2585763	0					
ANR	2586494	Identifier	nodes		2585763	0					
ANR	2586495	Identifier	indexR		2585763	1					
ANR	2586496	Identifier	activeDesc		2585763	1					
ANR	2586497	IfStatement	if ( nodes [ i ] . active )		2585763	3					
ANR	2586498	Condition	nodes [ i ] . active	151:6:4703:4717	2585763	0	True				
ANR	2586499	MemberAccess	nodes [ i ] . active		2585763	0					
ANR	2586500	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586501	Identifier	nodes		2585763	0					
ANR	2586502	Identifier	i		2585763	1					
ANR	2586503	Identifier	active		2585763	1					
ANR	2586504	CompoundStatement		107:24:3567:3567	2585763	1					
ANR	2586505	ExpressionStatement	nodes [ i ] . LT = nodes [ indexL ] . closestActive	152:3:4726:4767	2585763	0	True				
ANR	2586506	AssignmentExpression	nodes [ i ] . LT = nodes [ indexL ] . closestActive		2585763	0		=			
ANR	2586507	MemberAccess	nodes [ i ] . LT		2585763	0					
ANR	2586508	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586509	Identifier	nodes		2585763	0					
ANR	2586510	Identifier	i		2585763	1					
ANR	2586511	Identifier	LT		2585763	1					
ANR	2586512	MemberAccess	nodes [ indexL ] . closestActive		2585763	1					
ANR	2586513	ArrayIndexing	nodes [ indexL ]		2585763	0					
ANR	2586514	Identifier	nodes		2585763	0					
ANR	2586515	Identifier	indexL		2585763	1					
ANR	2586516	Identifier	closestActive		2585763	1					
ANR	2586517	ExpressionStatement	nodes [ i ] . RT = nodes [ indexR ] . closestActive	153:3:4772:4813	2585763	1	True				
ANR	2586518	AssignmentExpression	nodes [ i ] . RT = nodes [ indexR ] . closestActive		2585763	0		=			
ANR	2586519	MemberAccess	nodes [ i ] . RT		2585763	0					
ANR	2586520	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586521	Identifier	nodes		2585763	0					
ANR	2586522	Identifier	i		2585763	1					
ANR	2586523	Identifier	RT		2585763	1					
ANR	2586524	MemberAccess	nodes [ indexR ] . closestActive		2585763	1					
ANR	2586525	ArrayIndexing	nodes [ indexR ]		2585763	0					
ANR	2586526	Identifier	nodes		2585763	0					
ANR	2586527	Identifier	indexR		2585763	1					
ANR	2586528	Identifier	closestActive		2585763	1					
ANR	2586529	ExpressionStatement	nodes [ i ] . activeDesc = true	155:3:4872:4898	2585763	2	True				
ANR	2586530	AssignmentExpression	nodes [ i ] . activeDesc = true		2585763	0		=			
ANR	2586531	MemberAccess	nodes [ i ] . activeDesc		2585763	0					
ANR	2586532	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586533	Identifier	nodes		2585763	0					
ANR	2586534	Identifier	i		2585763	1					
ANR	2586535	Identifier	activeDesc		2585763	1					
ANR	2586536	Identifier	true		2585763	1					
ANR	2586537	ExpressionStatement	nodes [ i ] . closestActive = i	156:3:4903:4929	2585763	3	True				
ANR	2586538	AssignmentExpression	nodes [ i ] . closestActive = i		2585763	0		=			
ANR	2586539	MemberAccess	nodes [ i ] . closestActive		2585763	0					
ANR	2586540	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586541	Identifier	nodes		2585763	0					
ANR	2586542	Identifier	i		2585763	1					
ANR	2586543	Identifier	closestActive		2585763	1					
ANR	2586544	Identifier	i		2585763	1					
ANR	2586545	ExpressionStatement	intTree -> rootT = i	158:3:5001:5019	2585763	4	True				
ANR	2586546	AssignmentExpression	intTree -> rootT = i		2585763	0		=			
ANR	2586547	PtrMemberAccess	intTree -> rootT		2585763	0					
ANR	2586548	Identifier	intTree		2585763	0					
ANR	2586549	Identifier	rootT		2585763	1					
ANR	2586550	Identifier	i		2585763	1					
ANR	2586551	ElseStatement	else		2585763	0					
ANR	2586552	CompoundStatement		115:9:3876:3876	2585763	0					
ANR	2586553	ExpressionStatement	nodes [ i ] . activeDesc = nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc	162:3:5130:5209	2585763	0	True				
ANR	2586554	AssignmentExpression	nodes [ i ] . activeDesc = nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc		2585763	0		=			
ANR	2586555	MemberAccess	nodes [ i ] . activeDesc		2585763	0					
ANR	2586556	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586557	Identifier	nodes		2585763	0					
ANR	2586558	Identifier	i		2585763	1					
ANR	2586559	Identifier	activeDesc		2585763	1					
ANR	2586560	OrExpression	nodes [ indexL ] . activeDesc || nodes [ indexR ] . activeDesc		2585763	1		||			
ANR	2586561	MemberAccess	nodes [ indexL ] . activeDesc		2585763	0					
ANR	2586562	ArrayIndexing	nodes [ indexL ]		2585763	0					
ANR	2586563	Identifier	nodes		2585763	0					
ANR	2586564	Identifier	indexL		2585763	1					
ANR	2586565	Identifier	activeDesc		2585763	1					
ANR	2586566	MemberAccess	nodes [ indexR ] . activeDesc		2585763	1					
ANR	2586567	ArrayIndexing	nodes [ indexR ]		2585763	0					
ANR	2586568	Identifier	nodes		2585763	0					
ANR	2586569	Identifier	indexR		2585763	1					
ANR	2586570	Identifier	activeDesc		2585763	1					
ANR	2586571	ExpressionStatement	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive	164:3:5214:5327	2585763	1	True				
ANR	2586572	AssignmentExpression	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		2585763	0		=			
ANR	2586573	MemberAccess	nodes [ i ] . closestActive		2585763	0					
ANR	2586574	ArrayIndexing	nodes [ i ]		2585763	0					
ANR	2586575	Identifier	nodes		2585763	0					
ANR	2586576	Identifier	i		2585763	1					
ANR	2586577	Identifier	closestActive		2585763	1					
ANR	2586578	ConditionalExpression	nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		2585763	1					
ANR	2586579	Condition	nodes [ indexL ] . activeDesc		2585763	0					
ANR	2586580	MemberAccess	nodes [ indexL ] . activeDesc		2585763	0					
ANR	2586581	ArrayIndexing	nodes [ indexL ]		2585763	0					
ANR	2586582	Identifier	nodes		2585763	0					
ANR	2586583	Identifier	indexL		2585763	1					
ANR	2586584	Identifier	activeDesc		2585763	1					
ANR	2586585	MemberAccess	nodes [ indexL ] . closestActive		2585763	1					
ANR	2586586	ArrayIndexing	nodes [ indexL ]		2585763	0					
ANR	2586587	Identifier	nodes		2585763	0					
ANR	2586588	Identifier	indexL		2585763	1					
ANR	2586589	Identifier	closestActive		2585763	1					
ANR	2586590	MemberAccess	nodes [ indexR ] . closestActive		2585763	2					
ANR	2586591	ArrayIndexing	nodes [ indexR ]		2585763	0					
ANR	2586592	Identifier	nodes		2585763	0					
ANR	2586593	Identifier	indexR		2585763	1					
ANR	2586594	Identifier	closestActive		2585763	1					
ANR	2586595	ReturnStatement	return ( intTree ) ;	171:1:5349:5366	2585763	48	True				
ANR	2586596	Identifier	intTree		2585763	0					
ANR	2586597	ReturnType	IntervalTree *		2585763	1					
ANR	2586598	Identifier	IntervalTree :: MakeIntervalTree		2585763	2					
ANR	2586599	ParameterList	const OneDimension & intervals		2585763	3					
ANR	2586600	Parameter	const OneDimension & intervals	44:18:1121:1149	2585763	0	True				
ANR	2586601	ParameterType	const OneDimension &		2585763	0					
ANR	2586602	Identifier	intervals		2585763	1					
ANR	2586603	CFGEntryNode	ENTRY		2585763		True				
ANR	2586604	CFGExitNode	EXIT		2585763		True				
ANR	2586605	Symbol	intTree		2585763						
ANR	2586606	Symbol	* index		2585763						
ANR	2586607	Symbol	InsertInRightSecondary		2585763						
ANR	2586608	Symbol	nodes [ indexR ] . closestActive		2585763						
ANR	2586609	Symbol	nodes [ i ] . activeDesc		2585763						
ANR	2586610	Symbol	nodes [ indexL ] . closestActive		2585763						
ANR	2586611	Symbol	itr -> second . openLower		2585763						
ANR	2586612	Symbol	itr -> second . upper		2585763						
ANR	2586613	Symbol	overflow		2585763						
ANR	2586614	Symbol	nodes [ i ] . active		2585763						
ANR	2586615	Symbol	* nodes		2585763						
ANR	2586616	Symbol	nodes [ index ] . nodeValue		2585763						
ANR	2586617	Symbol	InsertInLeftSecondary		2585763						
ANR	2586618	Symbol	endPoints		2585763						
ANR	2586619	Symbol	itr -> second		2585763						
ANR	2586620	Symbol	nodes [ index ] . RS		2585763						
ANR	2586621	Symbol	numPoints		2585763						
ANR	2586622	Symbol	tmpL		2585763						
ANR	2586623	Symbol	NULL		2585763						
ANR	2586624	Symbol	itr		2585763						
ANR	2586625	Symbol	nodes [ index ] . closestActive		2585763						
ANR	2586626	Symbol	index		2585763						
ANR	2586627	Symbol	indexR		2585763						
ANR	2586628	Symbol	nodes [ 2 * i + 1 ] . max		2585763						
ANR	2586629	Symbol	tmpR		2585763						
ANR	2586630	Symbol	* sitr		2585763						
ANR	2586631	Symbol	itr -> second . openUpper		2585763						
ANR	2586632	Symbol	intervals		2585763						
ANR	2586633	Symbol	nodes [ i ] . closestActive		2585763						
ANR	2586634	Symbol	size		2585763						
ANR	2586635	Symbol	intTree -> size		2585763						
ANR	2586636	Symbol	true		2585763						
ANR	2586637	Symbol	nodes [ i ] . min		2585763						
ANR	2586638	Symbol	* intTree		2585763						
ANR	2586639	Symbol	nodes [ 2 * i + 1 ] . min		2585763						
ANR	2586640	Symbol	nodes [ i ] . RT		2585763						
ANR	2586641	Symbol	intTree -> nodes		2585763						
ANR	2586642	Symbol	nodes [ i ] . nodeValue		2585763						
ANR	2586643	Symbol	nodes [ i ] . RS		2585763						
ANR	2586644	Symbol	frontStart		2585763						
ANR	2586645	Symbol	nodes [ indexR ] . activeDesc		2585763						
ANR	2586646	Symbol	endPoints . size		2585763						
ANR	2586647	Symbol	retain		2585763						
ANR	2586648	Symbol	nodes [ i ] . max		2585763						
ANR	2586649	Symbol	backStart		2585763						
ANR	2586650	Symbol	nodes [ index ] . activeDesc		2585763						
ANR	2586651	Symbol	* indexL		2585763						
ANR	2586652	Symbol	nodes [ index ] . active		2585763						
ANR	2586653	Symbol	indexL		2585763						
ANR	2586654	Symbol	* indexR		2585763						
ANR	2586655	Symbol	endPoints . begin		2585763						
ANR	2586656	Symbol	nodes [ index ] . LS		2585763						
ANR	2586657	Symbol	itr -> first		2585763						
ANR	2586658	Symbol	sitr		2585763						
ANR	2586659	Symbol	nodes [ indexL ] . activeDesc		2585763						
ANR	2586660	Symbol	intervals . end		2585763						
ANR	2586661	Symbol	nodes [ 2 * i + 2 ] . max		2585763						
ANR	2586662	Symbol	i		2585763						
ANR	2586663	Symbol	* itr		2585763						
ANR	2586664	Symbol	itr -> second . lower		2585763						
ANR	2586665	Symbol	intervals . begin		2585763						
ANR	2586666	Symbol	depth		2585763						
ANR	2586667	Symbol	nodes		2585763						
ANR	2586668	Symbol	* i		2585763						
ANR	2586669	Symbol	intTree -> rootT		2585763						
ANR	2586670	Symbol	nodes [ i ] . LT		2585763						
ANR	2586671	Symbol	nodes [ i ] . LS		2585763						
ANR	2586672	Symbol	nodes [ 2 * i + 2 ] . min		2585763						
ANR	2586673	Function	IntervalTree :: DeleteInterval	175:0:5372:7989							
ANR	2586674	FunctionDef	"IntervalTree :: DeleteInterval (const int & key , const Interval & interval)"		2586673	0					
ANR	2586675	CompoundStatement		177:0:5451:7989	2586673	0					
ANR	2586676	IdentifierDeclStatement	"double l , r ;"	178:1:5454:5465	2586673	0	True				
ANR	2586677	IdentifierDecl	l		2586673	0					
ANR	2586678	IdentifierDeclType	double		2586673	0					
ANR	2586679	Identifier	l		2586673	1					
ANR	2586680	IdentifierDecl	r		2586673	1					
ANR	2586681	IdentifierDeclType	double		2586673	0					
ANR	2586682	Identifier	r		2586673	1					
ANR	2586683	IdentifierDeclStatement	int i ;	179:1:5468:5474	2586673	1	True				
ANR	2586684	IdentifierDecl	i		2586673	0					
ANR	2586685	IdentifierDeclType	int		2586673	0					
ANR	2586686	Identifier	i		2586673	1					
ANR	2586687	IfStatement	if ( ! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r ) )		2586673	2					
ANR	2586688	Condition	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )	181:5:5482:5543	2586673	0	True				
ANR	2586689	OrExpression	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )		2586673	0		||			
ANR	2586690	UnaryOperationExpression	! interval . lower . IsNumber ( l )		2586673	0					
ANR	2586691	UnaryOperator	!		2586673	0					
ANR	2586692	CallExpression	interval . lower . IsNumber ( l )		2586673	1					
ANR	2586693	Callee	interval . lower . IsNumber		2586673	0					
ANR	2586694	MemberAccess	interval . lower . IsNumber		2586673	0					
ANR	2586695	MemberAccess	interval . lower		2586673	0					
ANR	2586696	Identifier	interval		2586673	0					
ANR	2586697	Identifier	lower		2586673	1					
ANR	2586698	Identifier	IsNumber		2586673	1					
ANR	2586699	ArgumentList	l		2586673	1					
ANR	2586700	Argument	l		2586673	0					
ANR	2586701	Identifier	l		2586673	0					
ANR	2586702	UnaryOperationExpression	! interval . upper . IsNumber ( r )		2586673	1					
ANR	2586703	UnaryOperator	!		2586673	0					
ANR	2586704	CallExpression	interval . upper . IsNumber ( r )		2586673	1					
ANR	2586705	Callee	interval . upper . IsNumber		2586673	0					
ANR	2586706	MemberAccess	interval . upper . IsNumber		2586673	0					
ANR	2586707	MemberAccess	interval . upper		2586673	0					
ANR	2586708	Identifier	interval		2586673	0					
ANR	2586709	Identifier	upper		2586673	1					
ANR	2586710	Identifier	IsNumber		2586673	1					
ANR	2586711	ArgumentList	r		2586673	1					
ANR	2586712	Argument	r		2586673	0					
ANR	2586713	Identifier	r		2586673	0					
ANR	2586714	CompoundStatement		5:70:95:95	2586673	1					
ANR	2586715	ReturnStatement	return ( false ) ;	182:2:5551:5566	2586673	0	True				
ANR	2586716	Identifier	false		2586673	0					
ANR	2586717	ExpressionStatement	i = rootT	186:1:5623:5632	2586673	3	True				
ANR	2586718	AssignmentExpression	i = rootT		2586673	0		=			
ANR	2586719	Identifier	i		2586673	0					
ANR	2586720	Identifier	rootT		2586673	1					
ANR	2586721	WhileStatement	while ( i >= 0 && i < size )		2586673	4					
ANR	2586722	Condition	i >= 0 && i < size	187:8:5685:5702	2586673	0	True				
ANR	2586723	AndExpression	i >= 0 && i < size		2586673	0		&&			
ANR	2586724	RelationalExpression	i >= 0		2586673	0		>=			
ANR	2586725	Identifier	i		2586673	0					
ANR	2586726	PrimaryExpression	0		2586673	1					
ANR	2586727	RelationalExpression	i < size		2586673	1		<			
ANR	2586728	Identifier	i		2586673	0					
ANR	2586729	Identifier	size		2586673	1					
ANR	2586730	CompoundStatement		11:29:254:254	2586673	1					
ANR	2586731	IfStatement	if ( nodes [ i ] . nodeValue > r )		2586673	0					
ANR	2586732	Condition	nodes [ i ] . nodeValue > r	188:6:5714:5735	2586673	0	True				
ANR	2586733	RelationalExpression	nodes [ i ] . nodeValue > r		2586673	0		>			
ANR	2586734	MemberAccess	nodes [ i ] . nodeValue		2586673	0					
ANR	2586735	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586736	Identifier	nodes		2586673	0					
ANR	2586737	Identifier	i		2586673	1					
ANR	2586738	Identifier	nodeValue		2586673	1					
ANR	2586739	Identifier	r		2586673	1					
ANR	2586740	CompoundStatement		12:31:287:287	2586673	1					
ANR	2586741	ExpressionStatement	i = nodes [ i ] . LT	189:3:5744:5759	2586673	0	True				
ANR	2586742	AssignmentExpression	i = nodes [ i ] . LT		2586673	0		=			
ANR	2586743	Identifier	i		2586673	0					
ANR	2586744	MemberAccess	nodes [ i ] . LT		2586673	1					
ANR	2586745	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586746	Identifier	nodes		2586673	0					
ANR	2586747	Identifier	i		2586673	1					
ANR	2586748	Identifier	LT		2586673	1					
ANR	2586749	ContinueStatement	continue ;	190:3:5764:5772	2586673	1	True				
ANR	2586750	IfStatement	if ( nodes [ i ] . nodeValue < l )		2586673	1					
ANR	2586751	Condition	nodes [ i ] . nodeValue < l	192:6:5784:5805	2586673	0	True				
ANR	2586752	RelationalExpression	nodes [ i ] . nodeValue < l		2586673	0		<			
ANR	2586753	MemberAccess	nodes [ i ] . nodeValue		2586673	0					
ANR	2586754	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586755	Identifier	nodes		2586673	0					
ANR	2586756	Identifier	i		2586673	1					
ANR	2586757	Identifier	nodeValue		2586673	1					
ANR	2586758	Identifier	l		2586673	1					
ANR	2586759	CompoundStatement		16:31:357:357	2586673	1					
ANR	2586760	ExpressionStatement	i = nodes [ i ] . RT	193:3:5814:5829	2586673	0	True				
ANR	2586761	AssignmentExpression	i = nodes [ i ] . RT		2586673	0		=			
ANR	2586762	Identifier	i		2586673	0					
ANR	2586763	MemberAccess	nodes [ i ] . RT		2586673	1					
ANR	2586764	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586765	Identifier	nodes		2586673	0					
ANR	2586766	Identifier	i		2586673	1					
ANR	2586767	Identifier	RT		2586673	1					
ANR	2586768	ContinueStatement	continue ;	194:3:5834:5842	2586673	1	True				
ANR	2586769	IfStatement	if ( l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue )		2586673	2					
ANR	2586770	Condition	l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue	196:6:5854:5903	2586673	0	True				
ANR	2586771	AndExpression	l <= nodes [ i ] . nodeValue && r >= nodes [ i ] . nodeValue		2586673	0		&&			
ANR	2586772	RelationalExpression	l <= nodes [ i ] . nodeValue		2586673	0		<=			
ANR	2586773	Identifier	l		2586673	0					
ANR	2586774	MemberAccess	nodes [ i ] . nodeValue		2586673	1					
ANR	2586775	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586776	Identifier	nodes		2586673	0					
ANR	2586777	Identifier	i		2586673	1					
ANR	2586778	Identifier	nodeValue		2586673	1					
ANR	2586779	RelationalExpression	r >= nodes [ i ] . nodeValue		2586673	1		>=			
ANR	2586780	Identifier	r		2586673	0					
ANR	2586781	MemberAccess	nodes [ i ] . nodeValue		2586673	1					
ANR	2586782	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586783	Identifier	nodes		2586673	0					
ANR	2586784	Identifier	i		2586673	1					
ANR	2586785	Identifier	nodeValue		2586673	1					
ANR	2586786	CompoundStatement		20:59:455:455	2586673	1					
ANR	2586787	BreakStatement	break ;	197:3:5912:5917	2586673	0	True				
ANR	2586788	IfStatement	if ( i < 0 || i >= size )		2586673	5					
ANR	2586789	Condition	i < 0 || i >= size	201:5:5961:5978	2586673	0	True				
ANR	2586790	OrExpression	i < 0 || i >= size		2586673	0		||			
ANR	2586791	RelationalExpression	i < 0		2586673	0		<			
ANR	2586792	Identifier	i		2586673	0					
ANR	2586793	PrimaryExpression	0		2586673	1					
ANR	2586794	RelationalExpression	i >= size		2586673	1		>=			
ANR	2586795	Identifier	i		2586673	0					
ANR	2586796	Identifier	size		2586673	1					
ANR	2586797	CompoundStatement		25:26:530:530	2586673	1					
ANR	2586798	ExpressionStatement	"printf ( ""Error:  No such interval [%f, %f] in tree!\\n"" , l , r )"	202:2:5986:6048	2586673	0	True				
ANR	2586799	CallExpression	"printf ( ""Error:  No such interval [%f, %f] in tree!\\n"" , l , r )"		2586673	0					
ANR	2586800	Callee	printf		2586673	0					
ANR	2586801	Identifier	printf		2586673	0					
ANR	2586802	ArgumentList	"""Error:  No such interval [%f, %f] in tree!\\n"""		2586673	1					
ANR	2586803	Argument	"""Error:  No such interval [%f, %f] in tree!\\n"""		2586673	0					
ANR	2586804	PrimaryExpression	"""Error:  No such interval [%f, %f] in tree!\\n"""		2586673	0					
ANR	2586805	Argument	l		2586673	1					
ANR	2586806	Identifier	l		2586673	0					
ANR	2586807	Argument	r		2586673	2					
ANR	2586808	Identifier	r		2586673	0					
ANR	2586809	ReturnStatement	return ( false ) ;	203:2:6052:6067	2586673	1	True				
ANR	2586810	Identifier	false		2586673	0					
ANR	2586811	IfStatement	"if ( ! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false ) )"		2586673	6					
ANR	2586812	Condition	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"	207:5:6115:6220	2586673	0	True				
ANR	2586813	OrExpression	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true ) || ! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		2586673	0		||			
ANR	2586814	UnaryOperationExpression	"! DeleteFromSecondary ( nodes [ i ] . LS , key , l , true )"		2586673	0					
ANR	2586815	UnaryOperator	!		2586673	0					
ANR	2586816	CallExpression	"DeleteFromSecondary ( nodes [ i ] . LS , key , l , true )"		2586673	1					
ANR	2586817	Callee	DeleteFromSecondary		2586673	0					
ANR	2586818	Identifier	DeleteFromSecondary		2586673	0					
ANR	2586819	ArgumentList	nodes [ i ] . LS		2586673	1					
ANR	2586820	Argument	nodes [ i ] . LS		2586673	0					
ANR	2586821	MemberAccess	nodes [ i ] . LS		2586673	0					
ANR	2586822	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586823	Identifier	nodes		2586673	0					
ANR	2586824	Identifier	i		2586673	1					
ANR	2586825	Identifier	LS		2586673	1					
ANR	2586826	Argument	key		2586673	1					
ANR	2586827	Identifier	key		2586673	0					
ANR	2586828	Argument	l		2586673	2					
ANR	2586829	Identifier	l		2586673	0					
ANR	2586830	Argument	true		2586673	3					
ANR	2586831	Identifier	true		2586673	0					
ANR	2586832	UnaryOperationExpression	"! DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		2586673	1					
ANR	2586833	UnaryOperator	!		2586673	0					
ANR	2586834	CallExpression	"DeleteFromSecondary ( nodes [ i ] . RS , key , r , false )"		2586673	1					
ANR	2586835	Callee	DeleteFromSecondary		2586673	0					
ANR	2586836	Identifier	DeleteFromSecondary		2586673	0					
ANR	2586837	ArgumentList	nodes [ i ] . RS		2586673	1					
ANR	2586838	Argument	nodes [ i ] . RS		2586673	0					
ANR	2586839	MemberAccess	nodes [ i ] . RS		2586673	0					
ANR	2586840	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586841	Identifier	nodes		2586673	0					
ANR	2586842	Identifier	i		2586673	1					
ANR	2586843	Identifier	RS		2586673	1					
ANR	2586844	Argument	key		2586673	1					
ANR	2586845	Identifier	key		2586673	0					
ANR	2586846	Argument	r		2586673	2					
ANR	2586847	Identifier	r		2586673	0					
ANR	2586848	Argument	false		2586673	3					
ANR	2586849	Identifier	false		2586673	0					
ANR	2586850	CompoundStatement		32:56:772:772	2586673	1					
ANR	2586851	ExpressionStatement	"printf ( ""Failed to delete from secondary\\n"" )"	209:2:6228:6273	2586673	0	True				
ANR	2586852	CallExpression	"printf ( ""Failed to delete from secondary\\n"" )"		2586673	0					
ANR	2586853	Callee	printf		2586673	0					
ANR	2586854	Identifier	printf		2586673	0					
ANR	2586855	ArgumentList	"""Failed to delete from secondary\\n"""		2586673	1					
ANR	2586856	Argument	"""Failed to delete from secondary\\n"""		2586673	0					
ANR	2586857	PrimaryExpression	"""Failed to delete from secondary\\n"""		2586673	0					
ANR	2586858	ReturnStatement	return ( false ) ;	210:2:6277:6292	2586673	1	True				
ANR	2586859	Identifier	false		2586673	0					
ANR	2586860	IdentifierDeclStatement	"int indexL , indexR ;"	214:1:6374:6393	2586673	7	True				
ANR	2586861	IdentifierDecl	indexL		2586673	0					
ANR	2586862	IdentifierDeclType	int		2586673	0					
ANR	2586863	Identifier	indexL		2586673	1					
ANR	2586864	IdentifierDecl	indexR		2586673	1					
ANR	2586865	IdentifierDeclType	int		2586673	0					
ANR	2586866	Identifier	indexR		2586673	1					
ANR	2586867	IdentifierDeclStatement	bool nowActive ;	215:1:6396:6411	2586673	8	True				
ANR	2586868	IdentifierDecl	nowActive		2586673	0					
ANR	2586869	IdentifierDeclType	bool		2586673	0					
ANR	2586870	Identifier	nowActive		2586673	1					
ANR	2586871	WhileStatement	while ( 1 )		2586673	9					
ANR	2586872	Condition	1	216:8:6421:6421	2586673	0	True				
ANR	2586873	PrimaryExpression	1		2586673	0					
ANR	2586874	CompoundStatement		40:12:973:973	2586673	1					
ANR	2586875	ExpressionStatement	indexL = 2 * i + 1	217:2:6429:6443	2586673	0	True				
ANR	2586876	AssignmentExpression	indexL = 2 * i + 1		2586673	0		=			
ANR	2586877	Identifier	indexL		2586673	0					
ANR	2586878	AdditiveExpression	2 * i + 1		2586673	1		+			
ANR	2586879	MultiplicativeExpression	2 * i		2586673	0		*			
ANR	2586880	PrimaryExpression	2		2586673	0					
ANR	2586881	Identifier	i		2586673	1					
ANR	2586882	PrimaryExpression	1		2586673	1					
ANR	2586883	ExpressionStatement	indexR = 2 * i + 2	218:2:6448:6462	2586673	1	True				
ANR	2586884	AssignmentExpression	indexR = 2 * i + 2		2586673	0		=			
ANR	2586885	Identifier	indexR		2586673	0					
ANR	2586886	AdditiveExpression	2 * i + 2		2586673	1		+			
ANR	2586887	MultiplicativeExpression	2 * i		2586673	0		*			
ANR	2586888	PrimaryExpression	2		2586673	0					
ANR	2586889	Identifier	i		2586673	1					
ANR	2586890	PrimaryExpression	2		2586673	1					
ANR	2586891	ExpressionStatement	nowActive = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )	219:2:6466:6654	2586673	2	True				
ANR	2586892	AssignmentExpression	nowActive = ( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		2586673	0		=			
ANR	2586893	Identifier	nowActive		2586673	0					
ANR	2586894	OrExpression	( nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL ) || ( indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc )		2586673	1		||			
ANR	2586895	OrExpression	nodes [ i ] . LS != NULL || nodes [ i ] . RS != NULL		2586673	0		||			
ANR	2586896	EqualityExpression	nodes [ i ] . LS != NULL		2586673	0		!=			
ANR	2586897	MemberAccess	nodes [ i ] . LS		2586673	0					
ANR	2586898	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586899	Identifier	nodes		2586673	0					
ANR	2586900	Identifier	i		2586673	1					
ANR	2586901	Identifier	LS		2586673	1					
ANR	2586902	Identifier	NULL		2586673	1					
ANR	2586903	EqualityExpression	nodes [ i ] . RS != NULL		2586673	1		!=			
ANR	2586904	MemberAccess	nodes [ i ] . RS		2586673	0					
ANR	2586905	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586906	Identifier	nodes		2586673	0					
ANR	2586907	Identifier	i		2586673	1					
ANR	2586908	Identifier	RS		2586673	1					
ANR	2586909	Identifier	NULL		2586673	1					
ANR	2586910	AndExpression	indexL >= 0 && indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2586911	RelationalExpression	indexL >= 0		2586673	0		>=			
ANR	2586912	Identifier	indexL		2586673	0					
ANR	2586913	PrimaryExpression	0		2586673	1					
ANR	2586914	AndExpression	indexL < size && indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2586915	RelationalExpression	indexL < size		2586673	0		<			
ANR	2586916	Identifier	indexL		2586673	0					
ANR	2586917	Identifier	size		2586673	1					
ANR	2586918	AndExpression	indexR >= 0 && indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2586919	RelationalExpression	indexR >= 0		2586673	0		>=			
ANR	2586920	Identifier	indexR		2586673	0					
ANR	2586921	PrimaryExpression	0		2586673	1					
ANR	2586922	AndExpression	indexR < size && nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2586923	RelationalExpression	indexR < size		2586673	0		<			
ANR	2586924	Identifier	indexR		2586673	0					
ANR	2586925	Identifier	size		2586673	1					
ANR	2586926	AndExpression	nodes [ indexL ] . activeDesc && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2586927	MemberAccess	nodes [ indexL ] . activeDesc		2586673	0					
ANR	2586928	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2586929	Identifier	nodes		2586673	0					
ANR	2586930	Identifier	indexL		2586673	1					
ANR	2586931	Identifier	activeDesc		2586673	1					
ANR	2586932	MemberAccess	nodes [ indexR ] . activeDesc		2586673	1					
ANR	2586933	ArrayIndexing	nodes [ indexR ]		2586673	0					
ANR	2586934	Identifier	nodes		2586673	0					
ANR	2586935	Identifier	indexR		2586673	1					
ANR	2586936	Identifier	activeDesc		2586673	1					
ANR	2586937	IfStatement	if ( nowActive && nodes [ i ] . active == nowActive )		2586673	3					
ANR	2586938	Condition	nowActive && nodes [ i ] . active == nowActive	222:6:6662:6702	2586673	0	True				
ANR	2586939	AndExpression	nowActive && nodes [ i ] . active == nowActive		2586673	0		&&			
ANR	2586940	Identifier	nowActive		2586673	0					
ANR	2586941	EqualityExpression	nodes [ i ] . active == nowActive		2586673	1		==			
ANR	2586942	MemberAccess	nodes [ i ] . active		2586673	0					
ANR	2586943	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586944	Identifier	nodes		2586673	0					
ANR	2586945	Identifier	i		2586673	1					
ANR	2586946	Identifier	active		2586673	1					
ANR	2586947	Identifier	nowActive		2586673	1					
ANR	2586948	CompoundStatement		46:50:1254:1254	2586673	1					
ANR	2586949	ExpressionStatement	nodes [ i ] . active = true	225:3:6763:6785	2586673	0	True				
ANR	2586950	AssignmentExpression	nodes [ i ] . active = true		2586673	0		=			
ANR	2586951	MemberAccess	nodes [ i ] . active		2586673	0					
ANR	2586952	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586953	Identifier	nodes		2586673	0					
ANR	2586954	Identifier	i		2586673	1					
ANR	2586955	Identifier	active		2586673	1					
ANR	2586956	Identifier	true		2586673	1					
ANR	2586957	ExpressionStatement	nodes [ i ] . activeDesc = true	226:3:6790:6816	2586673	1	True				
ANR	2586958	AssignmentExpression	nodes [ i ] . activeDesc = true		2586673	0		=			
ANR	2586959	MemberAccess	nodes [ i ] . activeDesc		2586673	0					
ANR	2586960	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586961	Identifier	nodes		2586673	0					
ANR	2586962	Identifier	i		2586673	1					
ANR	2586963	Identifier	activeDesc		2586673	1					
ANR	2586964	Identifier	true		2586673	1					
ANR	2586965	ExpressionStatement	nodes [ i ] . closestActive = i	227:3:6821:6847	2586673	2	True				
ANR	2586966	AssignmentExpression	nodes [ i ] . closestActive = i		2586673	0		=			
ANR	2586967	MemberAccess	nodes [ i ] . closestActive		2586673	0					
ANR	2586968	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586969	Identifier	nodes		2586673	0					
ANR	2586970	Identifier	i		2586673	1					
ANR	2586971	Identifier	closestActive		2586673	1					
ANR	2586972	Identifier	i		2586673	1					
ANR	2586973	ExpressionStatement	nodes [ i ] . LT = nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive	230:3:6920:6987	2586673	3	True				
ANR	2586974	AssignmentExpression	nodes [ i ] . LT = nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive		2586673	0		=			
ANR	2586975	MemberAccess	nodes [ i ] . LT		2586673	0					
ANR	2586976	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586977	Identifier	nodes		2586673	0					
ANR	2586978	Identifier	i		2586673	1					
ANR	2586979	Identifier	LT		2586673	1					
ANR	2586980	ConditionalExpression	nodes [ indexL ] . active ? indexL : nodes [ indexL ] . closestActive		2586673	1					
ANR	2586981	Condition	nodes [ indexL ] . active		2586673	0					
ANR	2586982	MemberAccess	nodes [ indexL ] . active		2586673	0					
ANR	2586983	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2586984	Identifier	nodes		2586673	0					
ANR	2586985	Identifier	indexL		2586673	1					
ANR	2586986	Identifier	active		2586673	1					
ANR	2586987	Identifier	indexL		2586673	1					
ANR	2586988	MemberAccess	nodes [ indexL ] . closestActive		2586673	2					
ANR	2586989	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2586990	Identifier	nodes		2586673	0					
ANR	2586991	Identifier	indexL		2586673	1					
ANR	2586992	Identifier	closestActive		2586673	1					
ANR	2586993	ExpressionStatement	nodes [ i ] . RT = nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive	231:3:6992:7059	2586673	4	True				
ANR	2586994	AssignmentExpression	nodes [ i ] . RT = nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive		2586673	0		=			
ANR	2586995	MemberAccess	nodes [ i ] . RT		2586673	0					
ANR	2586996	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2586997	Identifier	nodes		2586673	0					
ANR	2586998	Identifier	i		2586673	1					
ANR	2586999	Identifier	RT		2586673	1					
ANR	2587000	ConditionalExpression	nodes [ indexR ] . active ? indexR : nodes [ indexR ] . closestActive		2586673	1					
ANR	2587001	Condition	nodes [ indexR ] . active		2586673	0					
ANR	2587002	MemberAccess	nodes [ indexR ] . active		2586673	0					
ANR	2587003	ArrayIndexing	nodes [ indexR ]		2586673	0					
ANR	2587004	Identifier	nodes		2586673	0					
ANR	2587005	Identifier	indexR		2586673	1					
ANR	2587006	Identifier	active		2586673	1					
ANR	2587007	Identifier	indexR		2586673	1					
ANR	2587008	MemberAccess	nodes [ indexR ] . closestActive		2586673	2					
ANR	2587009	ArrayIndexing	nodes [ indexR ]		2586673	0					
ANR	2587010	Identifier	nodes		2586673	0					
ANR	2587011	Identifier	indexR		2586673	1					
ANR	2587012	Identifier	closestActive		2586673	1					
ANR	2587013	ReturnStatement	return ( true ) ;	234:3:7077:7091	2586673	5	True				
ANR	2587014	Identifier	true		2586673	0					
ANR	2587015	IfStatement	if ( ! nodes [ i ] . active && nowActive )		2586673	4					
ANR	2587016	Condition	! nodes [ i ] . active && nowActive	238:6:7150:7178	2586673	0	True				
ANR	2587017	AndExpression	! nodes [ i ] . active && nowActive		2586673	0		&&			
ANR	2587018	UnaryOperationExpression	! nodes [ i ] . active		2586673	0					
ANR	2587019	UnaryOperator	!		2586673	0					
ANR	2587020	MemberAccess	nodes [ i ] . active		2586673	1					
ANR	2587021	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587022	Identifier	nodes		2586673	0					
ANR	2587023	Identifier	i		2586673	1					
ANR	2587024	Identifier	active		2586673	1					
ANR	2587025	Identifier	nowActive		2586673	1					
ANR	2587026	CompoundStatement		62:38:1730:1730	2586673	1					
ANR	2587027	ExpressionStatement	"printf ( ""Error:  Gone from inactive to active when deleting\\n"" )"	239:3:7187:7250	2586673	0	True				
ANR	2587028	CallExpression	"printf ( ""Error:  Gone from inactive to active when deleting\\n"" )"		2586673	0					
ANR	2587029	Callee	printf		2586673	0					
ANR	2587030	Identifier	printf		2586673	0					
ANR	2587031	ArgumentList	"""Error:  Gone from inactive to active when deleting\\n"""		2586673	1					
ANR	2587032	Argument	"""Error:  Gone from inactive to active when deleting\\n"""		2586673	0					
ANR	2587033	PrimaryExpression	"""Error:  Gone from inactive to active when deleting\\n"""		2586673	0					
ANR	2587034	ReturnStatement	return ( false ) ;	240:3:7255:7270	2586673	1	True				
ANR	2587035	Identifier	false		2586673	0					
ANR	2587036	ExpressionStatement	nodes [ i ] . active = false	242:2:7278:7301	2586673	5	True				
ANR	2587037	AssignmentExpression	nodes [ i ] . active = false		2586673	0		=			
ANR	2587038	MemberAccess	nodes [ i ] . active		2586673	0					
ANR	2587039	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587040	Identifier	nodes		2586673	0					
ANR	2587041	Identifier	i		2586673	1					
ANR	2587042	Identifier	active		2586673	1					
ANR	2587043	Identifier	false		2586673	1					
ANR	2587044	ExpressionStatement	nodes [ i ] . LT = nodes [ i ] . RT = - 1	243:2:7305:7335	2586673	6	True				
ANR	2587045	AssignmentExpression	nodes [ i ] . LT = nodes [ i ] . RT = - 1		2586673	0		=			
ANR	2587046	MemberAccess	nodes [ i ] . LT		2586673	0					
ANR	2587047	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587048	Identifier	nodes		2586673	0					
ANR	2587049	Identifier	i		2586673	1					
ANR	2587050	Identifier	LT		2586673	1					
ANR	2587051	AssignmentExpression	nodes [ i ] . RT = - 1		2586673	1		=			
ANR	2587052	MemberAccess	nodes [ i ] . RT		2586673	0					
ANR	2587053	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587054	Identifier	nodes		2586673	0					
ANR	2587055	Identifier	i		2586673	1					
ANR	2587056	Identifier	RT		2586673	1					
ANR	2587057	UnaryOperationExpression	- 1		2586673	1					
ANR	2587058	UnaryOperator	-		2586673	0					
ANR	2587059	PrimaryExpression	1		2586673	1					
ANR	2587060	IfStatement	if ( ( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc ) )		2586673	7					
ANR	2587061	Condition	( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc )	246:6:7411:7539	2586673	0	True				
ANR	2587062	OrExpression	( indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc ) || ( indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc )		2586673	0		||			
ANR	2587063	AndExpression	indexL >= 0 && indexL < size && nodes [ indexL ] . activeDesc		2586673	0		&&			
ANR	2587064	RelationalExpression	indexL >= 0		2586673	0		>=			
ANR	2587065	Identifier	indexL		2586673	0					
ANR	2587066	PrimaryExpression	0		2586673	1					
ANR	2587067	AndExpression	indexL < size && nodes [ indexL ] . activeDesc		2586673	1		&&			
ANR	2587068	RelationalExpression	indexL < size		2586673	0		<			
ANR	2587069	Identifier	indexL		2586673	0					
ANR	2587070	Identifier	size		2586673	1					
ANR	2587071	MemberAccess	nodes [ indexL ] . activeDesc		2586673	1					
ANR	2587072	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2587073	Identifier	nodes		2586673	0					
ANR	2587074	Identifier	indexL		2586673	1					
ANR	2587075	Identifier	activeDesc		2586673	1					
ANR	2587076	AndExpression	indexR >= 0 && indexR < size && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2587077	RelationalExpression	indexR >= 0		2586673	0		>=			
ANR	2587078	Identifier	indexR		2586673	0					
ANR	2587079	PrimaryExpression	0		2586673	1					
ANR	2587080	AndExpression	indexR < size && nodes [ indexR ] . activeDesc		2586673	1		&&			
ANR	2587081	RelationalExpression	indexR < size		2586673	0		<			
ANR	2587082	Identifier	indexR		2586673	0					
ANR	2587083	Identifier	size		2586673	1					
ANR	2587084	MemberAccess	nodes [ indexR ] . activeDesc		2586673	1					
ANR	2587085	ArrayIndexing	nodes [ indexR ]		2586673	0					
ANR	2587086	Identifier	nodes		2586673	0					
ANR	2587087	Identifier	indexR		2586673	1					
ANR	2587088	Identifier	activeDesc		2586673	1					
ANR	2587089	CompoundStatement		71:67:2091:2091	2586673	1					
ANR	2587090	ExpressionStatement	nodes [ i ] . activeDesc = true	248:3:7548:7574	2586673	0	True				
ANR	2587091	AssignmentExpression	nodes [ i ] . activeDesc = true		2586673	0		=			
ANR	2587092	MemberAccess	nodes [ i ] . activeDesc		2586673	0					
ANR	2587093	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587094	Identifier	nodes		2586673	0					
ANR	2587095	Identifier	i		2586673	1					
ANR	2587096	Identifier	activeDesc		2586673	1					
ANR	2587097	Identifier	true		2586673	1					
ANR	2587098	ExpressionStatement	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive	249:3:7579:7692	2586673	1	True				
ANR	2587099	AssignmentExpression	nodes [ i ] . closestActive = nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		2586673	0		=			
ANR	2587100	MemberAccess	nodes [ i ] . closestActive		2586673	0					
ANR	2587101	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587102	Identifier	nodes		2586673	0					
ANR	2587103	Identifier	i		2586673	1					
ANR	2587104	Identifier	closestActive		2586673	1					
ANR	2587105	ConditionalExpression	nodes [ indexL ] . activeDesc ? nodes [ indexL ] . closestActive : nodes [ indexR ] . closestActive		2586673	1					
ANR	2587106	Condition	nodes [ indexL ] . activeDesc		2586673	0					
ANR	2587107	MemberAccess	nodes [ indexL ] . activeDesc		2586673	0					
ANR	2587108	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2587109	Identifier	nodes		2586673	0					
ANR	2587110	Identifier	indexL		2586673	1					
ANR	2587111	Identifier	activeDesc		2586673	1					
ANR	2587112	MemberAccess	nodes [ indexL ] . closestActive		2586673	1					
ANR	2587113	ArrayIndexing	nodes [ indexL ]		2586673	0					
ANR	2587114	Identifier	nodes		2586673	0					
ANR	2587115	Identifier	indexL		2586673	1					
ANR	2587116	Identifier	closestActive		2586673	1					
ANR	2587117	MemberAccess	nodes [ indexR ] . closestActive		2586673	2					
ANR	2587118	ArrayIndexing	nodes [ indexR ]		2586673	0					
ANR	2587119	Identifier	nodes		2586673	0					
ANR	2587120	Identifier	indexR		2586673	1					
ANR	2587121	Identifier	closestActive		2586673	1					
ANR	2587122	ElseStatement	else		2586673	0					
ANR	2587123	CompoundStatement		75:9:2251:2251	2586673	0					
ANR	2587124	ExpressionStatement	nodes [ i ] . activeDesc = false	252:3:7708:7735	2586673	0	True				
ANR	2587125	AssignmentExpression	nodes [ i ] . activeDesc = false		2586673	0		=			
ANR	2587126	MemberAccess	nodes [ i ] . activeDesc		2586673	0					
ANR	2587127	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587128	Identifier	nodes		2586673	0					
ANR	2587129	Identifier	i		2586673	1					
ANR	2587130	Identifier	activeDesc		2586673	1					
ANR	2587131	Identifier	false		2586673	1					
ANR	2587132	ExpressionStatement	nodes [ i ] . closestActive = - 1	253:3:7740:7767	2586673	1	True				
ANR	2587133	AssignmentExpression	nodes [ i ] . closestActive = - 1		2586673	0		=			
ANR	2587134	MemberAccess	nodes [ i ] . closestActive		2586673	0					
ANR	2587135	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587136	Identifier	nodes		2586673	0					
ANR	2587137	Identifier	i		2586673	1					
ANR	2587138	Identifier	closestActive		2586673	1					
ANR	2587139	UnaryOperationExpression	- 1		2586673	1					
ANR	2587140	UnaryOperator	-		2586673	0					
ANR	2587141	PrimaryExpression	1		2586673	1					
ANR	2587142	IfStatement	if ( i == rootT )		2586673	8					
ANR	2587143	Condition	i == rootT	257:6:7847:7856	2586673	0	True				
ANR	2587144	EqualityExpression	i == rootT		2586673	0		==			
ANR	2587145	Identifier	i		2586673	0					
ANR	2587146	Identifier	rootT		2586673	1					
ANR	2587147	CompoundStatement		81:19:2408:2408	2586673	1					
ANR	2587148	ExpressionStatement	rootT = nodes [ i ] . closestActive	258:3:7865:7895	2586673	0	True				
ANR	2587149	AssignmentExpression	rootT = nodes [ i ] . closestActive		2586673	0		=			
ANR	2587150	Identifier	rootT		2586673	0					
ANR	2587151	MemberAccess	nodes [ i ] . closestActive		2586673	1					
ANR	2587152	ArrayIndexing	nodes [ i ]		2586673	0					
ANR	2587153	Identifier	nodes		2586673	0					
ANR	2587154	Identifier	i		2586673	1					
ANR	2587155	Identifier	closestActive		2586673	1					
ANR	2587156	IfStatement	if ( rootT < 0 )		2586673	1					
ANR	2587157	Condition	rootT < 0	259:7:7904:7912	2586673	0	True				
ANR	2587158	RelationalExpression	rootT < 0		2586673	0		<			
ANR	2587159	Identifier	rootT		2586673	0					
ANR	2587160	PrimaryExpression	0		2586673	1					
ANR	2587161	ExpressionStatement	rootT = 0	259:19:7916:7925	2586673	1	True				
ANR	2587162	AssignmentExpression	rootT = 0		2586673	0		=			
ANR	2587163	Identifier	rootT		2586673	0					
ANR	2587164	PrimaryExpression	0		2586673	1					
ANR	2587165	ReturnStatement	return ( true ) ;	260:3:7930:7944	2586673	2	True				
ANR	2587166	Identifier	true		2586673	0					
ANR	2587167	ExpressionStatement	i = ( i - 1 ) / 2	263:2:7953:7966	2586673	9	True				
ANR	2587168	AssignmentExpression	i = ( i - 1 ) / 2		2586673	0		=			
ANR	2587169	Identifier	i		2586673	0					
ANR	2587170	MultiplicativeExpression	( i - 1 ) / 2		2586673	1		/			
ANR	2587171	AdditiveExpression	i - 1		2586673	0		-			
ANR	2587172	Identifier	i		2586673	0					
ANR	2587173	PrimaryExpression	1		2586673	1					
ANR	2587174	PrimaryExpression	2		2586673	1					
ANR	2587175	ReturnStatement	return ( true ) ;	266:1:7973:7987	2586673	10	True				
ANR	2587176	Identifier	true		2586673	0					
ANR	2587177	ReturnType	bool		2586673	1					
ANR	2587178	Identifier	IntervalTree :: DeleteInterval		2586673	2					
ANR	2587179	ParameterList	"const int & key , const Interval & interval"		2586673	3					
ANR	2587180	Parameter	const int & key	176:16:5408:5421	2586673	0	True				
ANR	2587181	ParameterType	const int &		2586673	0					
ANR	2587182	Identifier	key		2586673	1					
ANR	2587183	Parameter	const Interval & interval	176:32:5424:5447	2586673	1	True				
ANR	2587184	ParameterType	const Interval &		2586673	0					
ANR	2587185	Identifier	interval		2586673	1					
ANR	2587186	CFGEntryNode	ENTRY		2586673		True				
ANR	2587187	CFGExitNode	EXIT		2586673		True				
ANR	2587188	Symbol	rootT		2586673						
ANR	2587189	Symbol	nodes [ indexL ] . active		2586673						
ANR	2587190	Symbol	nodes [ indexR ] . closestActive		2586673						
ANR	2587191	Symbol	nodes [ i ] . activeDesc		2586673						
ANR	2587192	Symbol	interval . lower . IsNumber		2586673						
ANR	2587193	Symbol	nodes [ indexL ] . closestActive		2586673						
ANR	2587194	Symbol	* indexL		2586673						
ANR	2587195	Symbol	indexL		2586673						
ANR	2587196	Symbol	* indexR		2586673						
ANR	2587197	Symbol	nodes [ i ] . active		2586673						
ANR	2587198	Symbol	DeleteFromSecondary		2586673						
ANR	2587199	Symbol	nowActive		2586673						
ANR	2587200	Symbol	* nodes		2586673						
ANR	2587201	Symbol	interval . upper . IsNumber		2586673						
ANR	2587202	Symbol	interval . upper		2586673						
ANR	2587203	Symbol	key		2586673						
ANR	2587204	Symbol	nodes [ indexL ] . activeDesc		2586673						
ANR	2587205	Symbol	NULL		2586673						
ANR	2587206	Symbol	false		2586673						
ANR	2587207	Symbol	nodes [ indexR ] . active		2586673						
ANR	2587208	Symbol	i		2586673						
ANR	2587209	Symbol	indexR		2586673						
ANR	2587210	Symbol	l		2586673						
ANR	2587211	Symbol	r		2586673						
ANR	2587212	Symbol	nodes [ i ] . closestActive		2586673						
ANR	2587213	Symbol	* i		2586673						
ANR	2587214	Symbol	nodes		2586673						
ANR	2587215	Symbol	size		2586673						
ANR	2587216	Symbol	nodes [ i ] . LT		2586673						
ANR	2587217	Symbol	true		2586673						
ANR	2587218	Symbol	nodes [ i ] . LS		2586673						
ANR	2587219	Symbol	interval		2586673						
ANR	2587220	Symbol	nodes [ i ] . RT		2586673						
ANR	2587221	Symbol	interval . lower		2586673						
ANR	2587222	Symbol	nodes [ i ] . nodeValue		2586673						
ANR	2587223	Symbol	nodes [ i ] . RS		2586673						
ANR	2587224	Symbol	nodes [ indexR ] . activeDesc		2586673						
ANR	2587225	Function	IntervalTree :: InsertInLeftSecondary	270:0:7993:8540							
ANR	2587226	FunctionDef	"IntervalTree :: InsertInLeftSecondary (Secondary * & list , const int & key , double val , bool open)"		2587225	0					
ANR	2587227	CompoundStatement		272:0:8094:8540	2587225	0					
ANR	2587228	Statement	Secondary	273:1:8097:8105	2587225	0	True				
ANR	2587229	Statement	*	273:11:8107:8107	2587225	1	True				
ANR	2587230	Statement	tmp	273:12:8108:8110	2587225	2	True				
ANR	2587231	Statement	","	273:15:8111:8111	2587225	3	True				
ANR	2587232	Statement	*	273:17:8113:8113	2587225	4	True				
ANR	2587233	Statement	sec	273:18:8114:8116	2587225	5	True				
ANR	2587234	Statement	=	273:22:8118:8118	2587225	6	True				
ANR	2587235	Statement	new	273:24:8120:8122	2587225	7	True				
ANR	2587236	ExpressionStatement	Secondary	273:28:8124:8133	2587225	8	True				
ANR	2587237	Identifier	Secondary		2587225	0					
ANR	2587238	IfStatement	if ( ! sec )		2587225	9					
ANR	2587239	Condition	! sec	274:5:8140:8143	2587225	0	True				
ANR	2587240	UnaryOperationExpression	! sec		2587225	0					
ANR	2587241	UnaryOperator	!		2587225	0					
ANR	2587242	Identifier	sec		2587225	1					
ANR	2587243	ReturnStatement	return ( false ) ;	274:12:8147:8162	2587225	1	True				
ANR	2587244	Identifier	false		2587225	0					
ANR	2587245	ExpressionStatement	sec -> value = val	275:1:8165:8182	2587225	10	True				
ANR	2587246	AssignmentExpression	sec -> value = val		2587225	0		=			
ANR	2587247	PtrMemberAccess	sec -> value		2587225	0					
ANR	2587248	Identifier	sec		2587225	0					
ANR	2587249	Identifier	value		2587225	1					
ANR	2587250	Identifier	val		2587225	1					
ANR	2587251	ExpressionStatement	sec -> key = key	276:1:8185:8199	2587225	11	True				
ANR	2587252	AssignmentExpression	sec -> key = key		2587225	0		=			
ANR	2587253	PtrMemberAccess	sec -> key		2587225	0					
ANR	2587254	Identifier	sec		2587225	0					
ANR	2587255	Identifier	key		2587225	1					
ANR	2587256	Identifier	key		2587225	1					
ANR	2587257	ExpressionStatement	sec -> open = open	277:1:8202:8219	2587225	12	True				
ANR	2587258	AssignmentExpression	sec -> open = open		2587225	0		=			
ANR	2587259	PtrMemberAccess	sec -> open		2587225	0					
ANR	2587260	Identifier	sec		2587225	0					
ANR	2587261	Identifier	open		2587225	1					
ANR	2587262	Identifier	open		2587225	1					
ANR	2587263	IfStatement	if ( list == NULL || list -> value > val || ( list -> value == val && open ) )		2587225	13					
ANR	2587264	Condition	list == NULL || list -> value > val || ( list -> value == val && open )	279:5:8228:8286	2587225	0	True				
ANR	2587265	OrExpression	list == NULL || list -> value > val || ( list -> value == val && open )		2587225	0		||			
ANR	2587266	EqualityExpression	list == NULL		2587225	0		==			
ANR	2587267	Identifier	list		2587225	0					
ANR	2587268	Identifier	NULL		2587225	1					
ANR	2587269	OrExpression	list -> value > val || ( list -> value == val && open )		2587225	1		||			
ANR	2587270	RelationalExpression	list -> value > val		2587225	0		>			
ANR	2587271	PtrMemberAccess	list -> value		2587225	0					
ANR	2587272	Identifier	list		2587225	0					
ANR	2587273	Identifier	value		2587225	1					
ANR	2587274	Identifier	val		2587225	1					
ANR	2587275	AndExpression	list -> value == val && open		2587225	1		&&			
ANR	2587276	EqualityExpression	list -> value == val		2587225	0		==			
ANR	2587277	PtrMemberAccess	list -> value		2587225	0					
ANR	2587278	Identifier	list		2587225	0					
ANR	2587279	Identifier	value		2587225	1					
ANR	2587280	Identifier	val		2587225	1					
ANR	2587281	Identifier	open		2587225	1					
ANR	2587282	CompoundStatement		8:67:195:195	2587225	1					
ANR	2587283	ExpressionStatement	sec -> next = list	280:2:8294:8310	2587225	0	True				
ANR	2587284	AssignmentExpression	sec -> next = list		2587225	0		=			
ANR	2587285	PtrMemberAccess	sec -> next		2587225	0					
ANR	2587286	Identifier	sec		2587225	0					
ANR	2587287	Identifier	next		2587225	1					
ANR	2587288	Identifier	list		2587225	1					
ANR	2587289	ExpressionStatement	list = sec	281:2:8314:8324	2587225	1	True				
ANR	2587290	AssignmentExpression	list = sec		2587225	0		=			
ANR	2587291	Identifier	list		2587225	0					
ANR	2587292	Identifier	sec		2587225	1					
ANR	2587293	ReturnStatement	return ( true ) ;	282:2:8328:8342	2587225	2	True				
ANR	2587294	Identifier	true		2587225	0					
ANR	2587295	ExpressionStatement	tmp = list	285:1:8349:8359	2587225	14	True				
ANR	2587296	AssignmentExpression	tmp = list		2587225	0		=			
ANR	2587297	Identifier	tmp		2587225	0					
ANR	2587298	Identifier	list		2587225	1					
ANR	2587299	WhileStatement	while ( tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open ) )		2587225	15					
ANR	2587300	Condition	tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open )	286:8:8369:8453	2587225	0	True				
ANR	2587301	AndExpression	tmp -> next && ( tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open )		2587225	0		&&			
ANR	2587302	PtrMemberAccess	tmp -> next		2587225	0					
ANR	2587303	Identifier	tmp		2587225	0					
ANR	2587304	Identifier	next		2587225	1					
ANR	2587305	OrExpression	tmp -> next -> value < val || tmp -> next -> value == val && tmp -> next -> open		2587225	1		||			
ANR	2587306	RelationalExpression	tmp -> next -> value < val		2587225	0		<			
ANR	2587307	PtrMemberAccess	tmp -> next -> value		2587225	0					
ANR	2587308	PtrMemberAccess	tmp -> next		2587225	0					
ANR	2587309	Identifier	tmp		2587225	0					
ANR	2587310	Identifier	next		2587225	1					
ANR	2587311	Identifier	value		2587225	1					
ANR	2587312	Identifier	val		2587225	1					
ANR	2587313	AndExpression	tmp -> next -> value == val && tmp -> next -> open		2587225	1		&&			
ANR	2587314	EqualityExpression	tmp -> next -> value == val		2587225	0		==			
ANR	2587315	PtrMemberAccess	tmp -> next -> value		2587225	0					
ANR	2587316	PtrMemberAccess	tmp -> next		2587225	0					
ANR	2587317	Identifier	tmp		2587225	0					
ANR	2587318	Identifier	next		2587225	1					
ANR	2587319	Identifier	value		2587225	1					
ANR	2587320	Identifier	val		2587225	1					
ANR	2587321	PtrMemberAccess	tmp -> next -> open		2587225	1					
ANR	2587322	PtrMemberAccess	tmp -> next		2587225	0					
ANR	2587323	Identifier	tmp		2587225	0					
ANR	2587324	Identifier	next		2587225	1					
ANR	2587325	Identifier	open		2587225	1					
ANR	2587326	CompoundStatement		16:23:362:362	2587225	1					
ANR	2587327	ExpressionStatement	tmp = tmp -> next	288:2:8461:8476	2587225	0	True				
ANR	2587328	AssignmentExpression	tmp = tmp -> next		2587225	0		=			
ANR	2587329	Identifier	tmp		2587225	0					
ANR	2587330	PtrMemberAccess	tmp -> next		2587225	1					
ANR	2587331	Identifier	tmp		2587225	0					
ANR	2587332	Identifier	next		2587225	1					
ANR	2587333	ExpressionStatement	sec -> next = tmp -> next	290:1:8482:8503	2587225	16	True				
ANR	2587334	AssignmentExpression	sec -> next = tmp -> next		2587225	0		=			
ANR	2587335	PtrMemberAccess	sec -> next		2587225	0					
ANR	2587336	Identifier	sec		2587225	0					
ANR	2587337	Identifier	next		2587225	1					
ANR	2587338	PtrMemberAccess	tmp -> next		2587225	1					
ANR	2587339	Identifier	tmp		2587225	0					
ANR	2587340	Identifier	next		2587225	1					
ANR	2587341	ExpressionStatement	tmp -> next = sec	291:1:8506:8521	2587225	17	True				
ANR	2587342	AssignmentExpression	tmp -> next = sec		2587225	0		=			
ANR	2587343	PtrMemberAccess	tmp -> next		2587225	0					
ANR	2587344	Identifier	tmp		2587225	0					
ANR	2587345	Identifier	next		2587225	1					
ANR	2587346	Identifier	sec		2587225	1					
ANR	2587347	ReturnStatement	return ( true ) ;	292:1:8524:8538	2587225	18	True				
ANR	2587348	Identifier	true		2587225	0					
ANR	2587349	ReturnType	bool		2587225	1					
ANR	2587350	Identifier	IntervalTree :: InsertInLeftSecondary		2587225	2					
ANR	2587351	ParameterList	"Secondary * & list , const int & key , double val , bool open"		2587225	3					
ANR	2587352	Parameter	Secondary * & list	271:23:8036:8051	2587225	0	True				
ANR	2587353	ParameterType	Secondary * &		2587225	0					
ANR	2587354	Identifier	list		2587225	1					
ANR	2587355	Parameter	const int & key	271:41:8054:8067	2587225	1	True				
ANR	2587356	ParameterType	const int &		2587225	0					
ANR	2587357	Identifier	key		2587225	1					
ANR	2587358	Parameter	double val	271:57:8070:8079	2587225	2	True				
ANR	2587359	ParameterType	double		2587225	0					
ANR	2587360	Identifier	val		2587225	1					
ANR	2587361	Parameter	bool open	271:69:8082:8090	2587225	3	True				
ANR	2587362	ParameterType	bool		2587225	0					
ANR	2587363	Identifier	open		2587225	1					
ANR	2587364	CFGEntryNode	ENTRY		2587225		True				
ANR	2587365	CFGExitNode	EXIT		2587225		True				
ANR	2587366	Symbol	val		2587225						
ANR	2587367	Symbol	* tmp		2587225						
ANR	2587368	Symbol	sec -> key		2587225						
ANR	2587369	Symbol	NULL		2587225						
ANR	2587370	Symbol	sec -> open		2587225						
ANR	2587371	Symbol	false		2587225						
ANR	2587372	Symbol	* tmp -> next		2587225						
ANR	2587373	Symbol	sec -> value		2587225						
ANR	2587374	Symbol	* * tmp		2587225						
ANR	2587375	Symbol	list		2587225						
ANR	2587376	Symbol	tmp -> next		2587225						
ANR	2587377	Symbol	sec		2587225						
ANR	2587378	Symbol	tmp -> next -> value		2587225						
ANR	2587379	Symbol	* list		2587225						
ANR	2587380	Symbol	tmp		2587225						
ANR	2587381	Symbol	list -> value		2587225						
ANR	2587382	Symbol	true		2587225						
ANR	2587383	Symbol	tmp -> next -> open		2587225						
ANR	2587384	Symbol	* sec		2587225						
ANR	2587385	Symbol	key		2587225						
ANR	2587386	Symbol	open		2587225						
ANR	2587387	Symbol	sec -> next		2587225						
ANR	2587388	Function	IntervalTree :: InsertInRightSecondary	296:0:8544:9092							
ANR	2587389	FunctionDef	"IntervalTree :: InsertInRightSecondary (Secondary * & list , const int & key , double val , bool open)"		2587388	0					
ANR	2587390	CompoundStatement		298:0:8644:9092	2587388	0					
ANR	2587391	Statement	Secondary	299:1:8647:8655	2587388	0	True				
ANR	2587392	Statement	*	299:11:8657:8657	2587388	1	True				
ANR	2587393	Statement	tmp	299:12:8658:8660	2587388	2	True				
ANR	2587394	Statement	","	299:15:8661:8661	2587388	3	True				
ANR	2587395	Statement	*	299:17:8663:8663	2587388	4	True				
ANR	2587396	Statement	sec	299:18:8664:8666	2587388	5	True				
ANR	2587397	Statement	=	299:22:8668:8668	2587388	6	True				
ANR	2587398	Statement	new	299:24:8670:8672	2587388	7	True				
ANR	2587399	ExpressionStatement	Secondary	299:28:8674:8683	2587388	8	True				
ANR	2587400	Identifier	Secondary		2587388	0					
ANR	2587401	IfStatement	if ( ! sec )		2587388	9					
ANR	2587402	Condition	! sec	300:5:8690:8693	2587388	0	True				
ANR	2587403	UnaryOperationExpression	! sec		2587388	0					
ANR	2587404	UnaryOperator	!		2587388	0					
ANR	2587405	Identifier	sec		2587388	1					
ANR	2587406	ReturnStatement	return ( false ) ;	300:12:8697:8712	2587388	1	True				
ANR	2587407	Identifier	false		2587388	0					
ANR	2587408	ExpressionStatement	sec -> value = val	301:1:8715:8732	2587388	10	True				
ANR	2587409	AssignmentExpression	sec -> value = val		2587388	0		=			
ANR	2587410	PtrMemberAccess	sec -> value		2587388	0					
ANR	2587411	Identifier	sec		2587388	0					
ANR	2587412	Identifier	value		2587388	1					
ANR	2587413	Identifier	val		2587388	1					
ANR	2587414	ExpressionStatement	sec -> key = key	302:1:8735:8749	2587388	11	True				
ANR	2587415	AssignmentExpression	sec -> key = key		2587388	0		=			
ANR	2587416	PtrMemberAccess	sec -> key		2587388	0					
ANR	2587417	Identifier	sec		2587388	0					
ANR	2587418	Identifier	key		2587388	1					
ANR	2587419	Identifier	key		2587388	1					
ANR	2587420	ExpressionStatement	sec -> open = open	303:1:8752:8769	2587388	12	True				
ANR	2587421	AssignmentExpression	sec -> open = open		2587388	0		=			
ANR	2587422	PtrMemberAccess	sec -> open		2587388	0					
ANR	2587423	Identifier	sec		2587388	0					
ANR	2587424	Identifier	open		2587388	1					
ANR	2587425	Identifier	open		2587388	1					
ANR	2587426	IfStatement	if ( list == NULL || list -> value < val || ( list -> value == val && ! open ) )		2587388	13					
ANR	2587427	Condition	list == NULL || list -> value < val || ( list -> value == val && ! open )	305:5:8778:8837	2587388	0	True				
ANR	2587428	OrExpression	list == NULL || list -> value < val || ( list -> value == val && ! open )		2587388	0		||			
ANR	2587429	EqualityExpression	list == NULL		2587388	0		==			
ANR	2587430	Identifier	list		2587388	0					
ANR	2587431	Identifier	NULL		2587388	1					
ANR	2587432	OrExpression	list -> value < val || ( list -> value == val && ! open )		2587388	1		||			
ANR	2587433	RelationalExpression	list -> value < val		2587388	0		<			
ANR	2587434	PtrMemberAccess	list -> value		2587388	0					
ANR	2587435	Identifier	list		2587388	0					
ANR	2587436	Identifier	value		2587388	1					
ANR	2587437	Identifier	val		2587388	1					
ANR	2587438	AndExpression	list -> value == val && ! open		2587388	1		&&			
ANR	2587439	EqualityExpression	list -> value == val		2587388	0		==			
ANR	2587440	PtrMemberAccess	list -> value		2587388	0					
ANR	2587441	Identifier	list		2587388	0					
ANR	2587442	Identifier	value		2587388	1					
ANR	2587443	Identifier	val		2587388	1					
ANR	2587444	UnaryOperationExpression	! open		2587388	1					
ANR	2587445	UnaryOperator	!		2587388	0					
ANR	2587446	Identifier	open		2587388	1					
ANR	2587447	CompoundStatement		8:68:196:196	2587388	1					
ANR	2587448	ExpressionStatement	sec -> next = list	306:2:8845:8861	2587388	0	True				
ANR	2587449	AssignmentExpression	sec -> next = list		2587388	0		=			
ANR	2587450	PtrMemberAccess	sec -> next		2587388	0					
ANR	2587451	Identifier	sec		2587388	0					
ANR	2587452	Identifier	next		2587388	1					
ANR	2587453	Identifier	list		2587388	1					
ANR	2587454	ExpressionStatement	list = sec	307:2:8865:8875	2587388	1	True				
ANR	2587455	AssignmentExpression	list = sec		2587388	0		=			
ANR	2587456	Identifier	list		2587388	0					
ANR	2587457	Identifier	sec		2587388	1					
ANR	2587458	ReturnStatement	return ( true ) ;	308:2:8879:8893	2587388	2	True				
ANR	2587459	Identifier	true		2587388	0					
ANR	2587460	ExpressionStatement	tmp = list	311:1:8900:8910	2587388	14	True				
ANR	2587461	AssignmentExpression	tmp = list		2587388	0		=			
ANR	2587462	Identifier	tmp		2587388	0					
ANR	2587463	Identifier	list		2587388	1					
ANR	2587464	WhileStatement	while ( tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open ) )		2587388	15					
ANR	2587465	Condition	tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open )	312:8:8920:9005	2587388	0	True				
ANR	2587466	AndExpression	tmp -> next && ( tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open )		2587388	0		&&			
ANR	2587467	PtrMemberAccess	tmp -> next		2587388	0					
ANR	2587468	Identifier	tmp		2587388	0					
ANR	2587469	Identifier	next		2587388	1					
ANR	2587470	OrExpression	tmp -> next -> value > val || tmp -> next -> value == val && ! tmp -> next -> open		2587388	1		||			
ANR	2587471	RelationalExpression	tmp -> next -> value > val		2587388	0		>			
ANR	2587472	PtrMemberAccess	tmp -> next -> value		2587388	0					
ANR	2587473	PtrMemberAccess	tmp -> next		2587388	0					
ANR	2587474	Identifier	tmp		2587388	0					
ANR	2587475	Identifier	next		2587388	1					
ANR	2587476	Identifier	value		2587388	1					
ANR	2587477	Identifier	val		2587388	1					
ANR	2587478	AndExpression	tmp -> next -> value == val && ! tmp -> next -> open		2587388	1		&&			
ANR	2587479	EqualityExpression	tmp -> next -> value == val		2587388	0		==			
ANR	2587480	PtrMemberAccess	tmp -> next -> value		2587388	0					
ANR	2587481	PtrMemberAccess	tmp -> next		2587388	0					
ANR	2587482	Identifier	tmp		2587388	0					
ANR	2587483	Identifier	next		2587388	1					
ANR	2587484	Identifier	value		2587388	1					
ANR	2587485	Identifier	val		2587388	1					
ANR	2587486	UnaryOperationExpression	! tmp -> next -> open		2587388	1					
ANR	2587487	UnaryOperator	!		2587388	0					
ANR	2587488	PtrMemberAccess	tmp -> next -> open		2587388	1					
ANR	2587489	PtrMemberAccess	tmp -> next		2587388	0					
ANR	2587490	Identifier	tmp		2587388	0					
ANR	2587491	Identifier	next		2587388	1					
ANR	2587492	Identifier	open		2587388	1					
ANR	2587493	CompoundStatement		16:24:364:364	2587388	1					
ANR	2587494	ExpressionStatement	tmp = tmp -> next	314:2:9013:9028	2587388	0	True				
ANR	2587495	AssignmentExpression	tmp = tmp -> next		2587388	0		=			
ANR	2587496	Identifier	tmp		2587388	0					
ANR	2587497	PtrMemberAccess	tmp -> next		2587388	1					
ANR	2587498	Identifier	tmp		2587388	0					
ANR	2587499	Identifier	next		2587388	1					
ANR	2587500	ExpressionStatement	sec -> next = tmp -> next	316:1:9034:9055	2587388	16	True				
ANR	2587501	AssignmentExpression	sec -> next = tmp -> next		2587388	0		=			
ANR	2587502	PtrMemberAccess	sec -> next		2587388	0					
ANR	2587503	Identifier	sec		2587388	0					
ANR	2587504	Identifier	next		2587388	1					
ANR	2587505	PtrMemberAccess	tmp -> next		2587388	1					
ANR	2587506	Identifier	tmp		2587388	0					
ANR	2587507	Identifier	next		2587388	1					
ANR	2587508	ExpressionStatement	tmp -> next = sec	317:1:9058:9073	2587388	17	True				
ANR	2587509	AssignmentExpression	tmp -> next = sec		2587388	0		=			
ANR	2587510	PtrMemberAccess	tmp -> next		2587388	0					
ANR	2587511	Identifier	tmp		2587388	0					
ANR	2587512	Identifier	next		2587388	1					
ANR	2587513	Identifier	sec		2587388	1					
ANR	2587514	ReturnStatement	return ( true ) ;	318:1:9076:9090	2587388	18	True				
ANR	2587515	Identifier	true		2587388	0					
ANR	2587516	ReturnType	bool		2587388	1					
ANR	2587517	Identifier	IntervalTree :: InsertInRightSecondary		2587388	2					
ANR	2587518	ParameterList	"Secondary * & list , const int & key , double val , bool open"		2587388	3					
ANR	2587519	Parameter	Secondary * & list	297:23:8587:8602	2587388	0	True				
ANR	2587520	ParameterType	Secondary * &		2587388	0					
ANR	2587521	Identifier	list		2587388	1					
ANR	2587522	Parameter	const int & key	297:41:8605:8618	2587388	1	True				
ANR	2587523	ParameterType	const int &		2587388	0					
ANR	2587524	Identifier	key		2587388	1					
ANR	2587525	Parameter	double val	297:57:8621:8630	2587388	2	True				
ANR	2587526	ParameterType	double		2587388	0					
ANR	2587527	Identifier	val		2587388	1					
ANR	2587528	Parameter	bool open	297:69:8633:8641	2587388	3	True				
ANR	2587529	ParameterType	bool		2587388	0					
ANR	2587530	Identifier	open		2587388	1					
ANR	2587531	CFGEntryNode	ENTRY		2587388		True				
ANR	2587532	CFGExitNode	EXIT		2587388		True				
ANR	2587533	Symbol	val		2587388						
ANR	2587534	Symbol	* tmp		2587388						
ANR	2587535	Symbol	sec -> key		2587388						
ANR	2587536	Symbol	NULL		2587388						
ANR	2587537	Symbol	sec -> open		2587388						
ANR	2587538	Symbol	false		2587388						
ANR	2587539	Symbol	* tmp -> next		2587388						
ANR	2587540	Symbol	sec -> value		2587388						
ANR	2587541	Symbol	* * tmp		2587388						
ANR	2587542	Symbol	list		2587388						
ANR	2587543	Symbol	tmp -> next		2587388						
ANR	2587544	Symbol	sec		2587388						
ANR	2587545	Symbol	tmp -> next -> value		2587388						
ANR	2587546	Symbol	* list		2587388						
ANR	2587547	Symbol	tmp		2587388						
ANR	2587548	Symbol	list -> value		2587388						
ANR	2587549	Symbol	true		2587388						
ANR	2587550	Symbol	tmp -> next -> open		2587388						
ANR	2587551	Symbol	* sec		2587388						
ANR	2587552	Symbol	key		2587388						
ANR	2587553	Symbol	open		2587388						
ANR	2587554	Symbol	sec -> next		2587388						
ANR	2587555	Function	IntervalTree :: DeleteFromSecondary	322:0:9096:9720							
ANR	2587556	FunctionDef	"IntervalTree :: DeleteFromSecondary (Secondary * & list , const int & key , double val , bool less)"		2587555	0					
ANR	2587557	CompoundStatement		324:0:9193:9720	2587555	0					
ANR	2587558	IdentifierDeclStatement	"Secondary * tmp , * sec = list ;"	325:1:9196:9223	2587555	0	True				
ANR	2587559	IdentifierDecl	* tmp		2587555	0					
ANR	2587560	IdentifierDeclType	Secondary *		2587555	0					
ANR	2587561	Identifier	tmp		2587555	1					
ANR	2587562	IdentifierDecl	* sec = list		2587555	1					
ANR	2587563	IdentifierDeclType	Secondary *		2587555	0					
ANR	2587564	Identifier	sec		2587555	1					
ANR	2587565	AssignmentExpression	* sec = list		2587555	2		=			
ANR	2587566	Identifier	list		2587555	0					
ANR	2587567	Identifier	list		2587555	1					
ANR	2587568	IfStatement	if ( sec == NULL )		2587555	1					
ANR	2587569	Condition	sec == NULL	327:5:9231:9241	2587555	0	True				
ANR	2587570	EqualityExpression	sec == NULL		2587555	0		==			
ANR	2587571	Identifier	sec		2587555	0					
ANR	2587572	Identifier	NULL		2587555	1					
ANR	2587573	ReturnStatement	return ( false ) ;	327:19:9245:9260	2587555	1	True				
ANR	2587574	Identifier	false		2587555	0					
ANR	2587575	IfStatement	if ( sec -> value == val && sec -> key == key )		2587555	2					
ANR	2587576	Condition	sec -> value == val && sec -> key == key	328:5:9267:9298	2587555	0	True				
ANR	2587577	AndExpression	sec -> value == val && sec -> key == key		2587555	0		&&			
ANR	2587578	EqualityExpression	sec -> value == val		2587555	0		==			
ANR	2587579	PtrMemberAccess	sec -> value		2587555	0					
ANR	2587580	Identifier	sec		2587555	0					
ANR	2587581	Identifier	value		2587555	1					
ANR	2587582	Identifier	val		2587555	1					
ANR	2587583	EqualityExpression	sec -> key == key		2587555	1		==			
ANR	2587584	PtrMemberAccess	sec -> key		2587555	0					
ANR	2587585	Identifier	sec		2587555	0					
ANR	2587586	Identifier	key		2587555	1					
ANR	2587587	Identifier	key		2587555	1					
ANR	2587588	CompoundStatement		5:40:108:108	2587555	1					
ANR	2587589	ExpressionStatement	list = sec -> next	329:2:9306:9322	2587555	0	True				
ANR	2587590	AssignmentExpression	list = sec -> next		2587555	0		=			
ANR	2587591	Identifier	list		2587555	0					
ANR	2587592	PtrMemberAccess	sec -> next		2587555	1					
ANR	2587593	Identifier	sec		2587555	0					
ANR	2587594	Identifier	next		2587555	1					
ANR	2587595	Statement	delete	330:2:9326:9331	2587555	1	True				
ANR	2587596	ExpressionStatement	sec	330:9:9333:9336	2587555	2	True				
ANR	2587597	Identifier	sec		2587555	0					
ANR	2587598	ReturnStatement	return ( true ) ;	331:2:9340:9354	2587555	3	True				
ANR	2587599	Identifier	true		2587555	0					
ANR	2587600	ExpressionStatement	tmp = list	334:1:9361:9371	2587555	3	True				
ANR	2587601	AssignmentExpression	tmp = list		2587555	0		=			
ANR	2587602	Identifier	tmp		2587555	0					
ANR	2587603	Identifier	list		2587555	1					
ANR	2587604	ExpressionStatement	sec = list -> next	335:1:9374:9390	2587555	4	True				
ANR	2587605	AssignmentExpression	sec = list -> next		2587555	0		=			
ANR	2587606	Identifier	sec		2587555	0					
ANR	2587607	PtrMemberAccess	list -> next		2587555	1					
ANR	2587608	Identifier	list		2587555	0					
ANR	2587609	Identifier	next		2587555	1					
ANR	2587610	WhileStatement	while ( sec && ( less ? sec -> value < val : sec -> value > val ) )		2587555	5					
ANR	2587611	Condition	sec && ( less ? sec -> value < val : sec -> value > val )	336:8:9400:9452	2587555	0	True				
ANR	2587612	AndExpression	sec && ( less ? sec -> value < val : sec -> value > val )		2587555	0		&&			
ANR	2587613	Identifier	sec		2587555	0					
ANR	2587614	ConditionalExpression	less ? sec -> value < val : sec -> value > val		2587555	1					
ANR	2587615	Condition	less		2587555	0					
ANR	2587616	Identifier	less		2587555	0					
ANR	2587617	RelationalExpression	sec -> value < val		2587555	1		<			
ANR	2587618	PtrMemberAccess	sec -> value		2587555	0					
ANR	2587619	Identifier	sec		2587555	0					
ANR	2587620	Identifier	value		2587555	1					
ANR	2587621	Identifier	val		2587555	1					
ANR	2587622	RelationalExpression	sec -> value > val		2587555	2		>			
ANR	2587623	PtrMemberAccess	sec -> value		2587555	0					
ANR	2587624	Identifier	sec		2587555	0					
ANR	2587625	Identifier	value		2587555	1					
ANR	2587626	Identifier	val		2587555	1					
ANR	2587627	CompoundStatement		13:64:262:262	2587555	1					
ANR	2587628	ExpressionStatement	tmp = sec	337:2:9460:9469	2587555	0	True				
ANR	2587629	AssignmentExpression	tmp = sec		2587555	0		=			
ANR	2587630	Identifier	tmp		2587555	0					
ANR	2587631	Identifier	sec		2587555	1					
ANR	2587632	ExpressionStatement	sec = sec -> next	338:2:9473:9488	2587555	1	True				
ANR	2587633	AssignmentExpression	sec = sec -> next		2587555	0		=			
ANR	2587634	Identifier	sec		2587555	0					
ANR	2587635	PtrMemberAccess	sec -> next		2587555	1					
ANR	2587636	Identifier	sec		2587555	0					
ANR	2587637	Identifier	next		2587555	1					
ANR	2587638	IfStatement	if ( ! sec )		2587555	6					
ANR	2587639	Condition	! sec	340:5:9498:9501	2587555	0	True				
ANR	2587640	UnaryOperationExpression	! sec		2587555	0					
ANR	2587641	UnaryOperator	!		2587555	0					
ANR	2587642	Identifier	sec		2587555	1					
ANR	2587643	ReturnStatement	return ( false ) ;	340:12:9505:9520	2587555	1	True				
ANR	2587644	Identifier	false		2587555	0					
ANR	2587645	WhileStatement	while ( sec && sec -> value == val )		2587555	7					
ANR	2587646	Condition	sec && sec -> value == val	342:8:9531:9554	2587555	0	True				
ANR	2587647	AndExpression	sec && sec -> value == val		2587555	0		&&			
ANR	2587648	Identifier	sec		2587555	0					
ANR	2587649	EqualityExpression	sec -> value == val		2587555	1		==			
ANR	2587650	PtrMemberAccess	sec -> value		2587555	0					
ANR	2587651	Identifier	sec		2587555	0					
ANR	2587652	Identifier	value		2587555	1					
ANR	2587653	Identifier	val		2587555	1					
ANR	2587654	CompoundStatement		19:35:364:364	2587555	1					
ANR	2587655	IfStatement	if ( sec -> key == key )		2587555	0					
ANR	2587656	Condition	sec -> key == key	343:6:9566:9580	2587555	0	True				
ANR	2587657	EqualityExpression	sec -> key == key		2587555	0		==			
ANR	2587658	PtrMemberAccess	sec -> key		2587555	0					
ANR	2587659	Identifier	sec		2587555	0					
ANR	2587660	Identifier	key		2587555	1					
ANR	2587661	Identifier	key		2587555	1					
ANR	2587662	CompoundStatement		20:24:390:390	2587555	1					
ANR	2587663	ExpressionStatement	tmp -> next = sec -> next	344:3:9589:9610	2587555	0	True				
ANR	2587664	AssignmentExpression	tmp -> next = sec -> next		2587555	0		=			
ANR	2587665	PtrMemberAccess	tmp -> next		2587555	0					
ANR	2587666	Identifier	tmp		2587555	0					
ANR	2587667	Identifier	next		2587555	1					
ANR	2587668	PtrMemberAccess	sec -> next		2587555	1					
ANR	2587669	Identifier	sec		2587555	0					
ANR	2587670	Identifier	next		2587555	1					
ANR	2587671	Statement	delete	345:3:9615:9620	2587555	1	True				
ANR	2587672	ExpressionStatement	sec	345:10:9622:9625	2587555	2	True				
ANR	2587673	Identifier	sec		2587555	0					
ANR	2587674	ReturnStatement	return ( true ) ;	346:3:9630:9644	2587555	3	True				
ANR	2587675	Identifier	true		2587555	0					
ANR	2587676	ExpressionStatement	tmp = sec	348:2:9652:9661	2587555	1	True				
ANR	2587677	AssignmentExpression	tmp = sec		2587555	0		=			
ANR	2587678	Identifier	tmp		2587555	0					
ANR	2587679	Identifier	sec		2587555	1					
ANR	2587680	ExpressionStatement	sec = sec -> next	349:2:9665:9680	2587555	2	True				
ANR	2587681	AssignmentExpression	sec = sec -> next		2587555	0		=			
ANR	2587682	Identifier	sec		2587555	0					
ANR	2587683	PtrMemberAccess	sec -> next		2587555	1					
ANR	2587684	Identifier	sec		2587555	0					
ANR	2587685	Identifier	next		2587555	1					
ANR	2587686	ReturnStatement	return ( false ) ;	353:1:9703:9718	2587555	8	True				
ANR	2587687	Identifier	false		2587555	0					
ANR	2587688	ReturnType	bool		2587555	1					
ANR	2587689	Identifier	IntervalTree :: DeleteFromSecondary		2587555	2					
ANR	2587690	ParameterList	"Secondary * & list , const int & key , double val , bool less"		2587555	3					
ANR	2587691	Parameter	Secondary * & list	323:21:9137:9152	2587555	0	True				
ANR	2587692	ParameterType	Secondary * &		2587555	0					
ANR	2587693	Identifier	list		2587555	1					
ANR	2587694	Parameter	const int & key	323:38:9154:9167	2587555	1	True				
ANR	2587695	ParameterType	const int &		2587555	0					
ANR	2587696	Identifier	key		2587555	1					
ANR	2587697	Parameter	double val	323:53:9169:9178	2587555	2	True				
ANR	2587698	ParameterType	double		2587555	0					
ANR	2587699	Identifier	val		2587555	1					
ANR	2587700	Parameter	bool less	323:64:9180:9188	2587555	3	True				
ANR	2587701	ParameterType	bool		2587555	0					
ANR	2587702	Identifier	less		2587555	1					
ANR	2587703	CFGEntryNode	ENTRY		2587555		True				
ANR	2587704	CFGExitNode	EXIT		2587555		True				
ANR	2587705	Symbol	val		2587555						
ANR	2587706	Symbol	list -> next		2587555						
ANR	2587707	Symbol	* tmp		2587555						
ANR	2587708	Symbol	sec -> key		2587555						
ANR	2587709	Symbol	NULL		2587555						
ANR	2587710	Symbol	false		2587555						
ANR	2587711	Symbol	sec -> value		2587555						
ANR	2587712	Symbol	less		2587555						
ANR	2587713	Symbol	list		2587555						
ANR	2587714	Symbol	tmp -> next		2587555						
ANR	2587715	Symbol	sec		2587555						
ANR	2587716	Symbol	* list		2587555						
ANR	2587717	Symbol	tmp		2587555						
ANR	2587718	Symbol	true		2587555						
ANR	2587719	Symbol	* sec		2587555						
ANR	2587720	Symbol	key		2587555						
ANR	2587721	Symbol	sec -> next		2587555						
ANR	2587722	Function	IntervalTree :: WindowQuery	357:0:9724:12087							
ANR	2587723	FunctionDef	"IntervalTree :: WindowQuery (const Interval & interval , KeySet & keys)"		2587722	0					
ANR	2587724	CompoundStatement		359:0:9798:12087	2587722	0					
ANR	2587725	IdentifierDeclStatement	"double l , r ;"	360:1:9801:9813	2587722	0	True				
ANR	2587726	IdentifierDecl	l		2587722	0					
ANR	2587727	IdentifierDeclType	double		2587722	0					
ANR	2587728	Identifier	l		2587722	1					
ANR	2587729	IdentifierDecl	r		2587722	1					
ANR	2587730	IdentifierDeclType	double		2587722	0					
ANR	2587731	Identifier	r		2587722	1					
ANR	2587732	IdentifierDeclStatement	"bool o_l , o_r ;"	361:1:9816:9830	2587722	1	True				
ANR	2587733	IdentifierDecl	o_l		2587722	0					
ANR	2587734	IdentifierDeclType	bool		2587722	0					
ANR	2587735	Identifier	o_l		2587722	1					
ANR	2587736	IdentifierDecl	o_r		2587722	1					
ANR	2587737	IdentifierDeclType	bool		2587722	0					
ANR	2587738	Identifier	o_r		2587722	1					
ANR	2587739	IdentifierDeclStatement	"int i , v ;"	362:1:9833:9843	2587722	2	True				
ANR	2587740	IdentifierDecl	i		2587722	0					
ANR	2587741	IdentifierDeclType	int		2587722	0					
ANR	2587742	Identifier	i		2587722	1					
ANR	2587743	IdentifierDecl	v		2587722	1					
ANR	2587744	IdentifierDeclType	int		2587722	0					
ANR	2587745	Identifier	v		2587722	1					
ANR	2587746	IdentifierDeclStatement	Secondary * sec ;	363:1:9846:9860	2587722	3	True				
ANR	2587747	IdentifierDecl	* sec		2587722	0					
ANR	2587748	IdentifierDeclType	Secondary *		2587722	0					
ANR	2587749	Identifier	sec		2587722	1					
ANR	2587750	IfStatement	if ( ! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r ) )		2587722	4					
ANR	2587751	Condition	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )	365:5:9868:9929	2587722	0	True				
ANR	2587752	OrExpression	! interval . lower . IsNumber ( l ) || ! interval . upper . IsNumber ( r )		2587722	0		||			
ANR	2587753	UnaryOperationExpression	! interval . lower . IsNumber ( l )		2587722	0					
ANR	2587754	UnaryOperator	!		2587722	0					
ANR	2587755	CallExpression	interval . lower . IsNumber ( l )		2587722	1					
ANR	2587756	Callee	interval . lower . IsNumber		2587722	0					
ANR	2587757	MemberAccess	interval . lower . IsNumber		2587722	0					
ANR	2587758	MemberAccess	interval . lower		2587722	0					
ANR	2587759	Identifier	interval		2587722	0					
ANR	2587760	Identifier	lower		2587722	1					
ANR	2587761	Identifier	IsNumber		2587722	1					
ANR	2587762	ArgumentList	l		2587722	1					
ANR	2587763	Argument	l		2587722	0					
ANR	2587764	Identifier	l		2587722	0					
ANR	2587765	UnaryOperationExpression	! interval . upper . IsNumber ( r )		2587722	1					
ANR	2587766	UnaryOperator	!		2587722	0					
ANR	2587767	CallExpression	interval . upper . IsNumber ( r )		2587722	1					
ANR	2587768	Callee	interval . upper . IsNumber		2587722	0					
ANR	2587769	MemberAccess	interval . upper . IsNumber		2587722	0					
ANR	2587770	MemberAccess	interval . upper		2587722	0					
ANR	2587771	Identifier	interval		2587722	0					
ANR	2587772	Identifier	upper		2587722	1					
ANR	2587773	Identifier	IsNumber		2587722	1					
ANR	2587774	ArgumentList	r		2587722	1					
ANR	2587775	Argument	r		2587722	0					
ANR	2587776	Identifier	r		2587722	0					
ANR	2587777	CompoundStatement		7:70:134:134	2587722	1					
ANR	2587778	ReturnStatement	return ( false ) ;	366:2:9937:9952	2587722	0	True				
ANR	2587779	Identifier	false		2587722	0					
ANR	2587780	ExpressionStatement	o_l = interval . openLower	368:1:9958:9982	2587722	5	True				
ANR	2587781	AssignmentExpression	o_l = interval . openLower		2587722	0		=			
ANR	2587782	Identifier	o_l		2587722	0					
ANR	2587783	MemberAccess	interval . openLower		2587722	1					
ANR	2587784	Identifier	interval		2587722	0					
ANR	2587785	Identifier	openLower		2587722	1					
ANR	2587786	ExpressionStatement	o_r = interval . openUpper	369:1:9985:10009	2587722	6	True				
ANR	2587787	AssignmentExpression	o_r = interval . openUpper		2587722	0		=			
ANR	2587788	Identifier	o_r		2587722	0					
ANR	2587789	MemberAccess	interval . openUpper		2587722	1					
ANR	2587790	Identifier	interval		2587722	0					
ANR	2587791	Identifier	openUpper		2587722	1					
ANR	2587792	ExpressionStatement	i = rootT	372:1:10060:10069	2587722	7	True				
ANR	2587793	AssignmentExpression	i = rootT		2587722	0		=			
ANR	2587794	Identifier	i		2587722	0					
ANR	2587795	Identifier	rootT		2587722	1					
ANR	2587796	WhileStatement	while ( 1 )		2587722	8					
ANR	2587797	Condition	1	373:8:10079:10079	2587722	0	True				
ANR	2587798	PrimaryExpression	1		2587722	0					
ANR	2587799	CompoundStatement		15:12:284:284	2587722	1					
ANR	2587800	IfStatement	if ( i < 0 || i >= size )		2587722	0					
ANR	2587801	Condition	i < 0 || i >= size	374:6:10091:10108	2587722	0	True				
ANR	2587802	OrExpression	i < 0 || i >= size		2587722	0		||			
ANR	2587803	RelationalExpression	i < 0		2587722	0		<			
ANR	2587804	Identifier	i		2587722	0					
ANR	2587805	PrimaryExpression	0		2587722	1					
ANR	2587806	RelationalExpression	i >= size		2587722	1		>=			
ANR	2587807	Identifier	i		2587722	0					
ANR	2587808	Identifier	size		2587722	1					
ANR	2587809	CompoundStatement		16:27:313:313	2587722	1					
ANR	2587810	ReturnStatement	return ( true ) ;	375:3:10117:10131	2587722	0	True				
ANR	2587811	Identifier	true		2587722	0					
ANR	2587812	ElseStatement	else		2587722	0					
ANR	2587813	IfStatement	if ( nodes [ i ] . nodeValue <= l )		2587722	0					
ANR	2587814	Condition	nodes [ i ] . nodeValue <= l	376:13:10146:10168	2587722	0	True				
ANR	2587815	RelationalExpression	nodes [ i ] . nodeValue <= l		2587722	0		<=			
ANR	2587816	MemberAccess	nodes [ i ] . nodeValue		2587722	0					
ANR	2587817	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587818	Identifier	nodes		2587722	0					
ANR	2587819	Identifier	i		2587722	1					
ANR	2587820	Identifier	nodeValue		2587722	1					
ANR	2587821	Identifier	l		2587722	1					
ANR	2587822	CompoundStatement		18:39:373:373	2587722	1					
ANR	2587823	ExpressionStatement	sec = nodes [ i ] . RS	377:3:10177:10194	2587722	0	True				
ANR	2587824	AssignmentExpression	sec = nodes [ i ] . RS		2587722	0		=			
ANR	2587825	Identifier	sec		2587722	0					
ANR	2587826	MemberAccess	nodes [ i ] . RS		2587722	1					
ANR	2587827	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587828	Identifier	nodes		2587722	0					
ANR	2587829	Identifier	i		2587722	1					
ANR	2587830	Identifier	RS		2587722	1					
ANR	2587831	WhileStatement	while ( sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) ) )		2587722	1					
ANR	2587832	Condition	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )	378:9:10205:10264	2587722	0	True				
ANR	2587833	AndExpression	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )		2587722	0		&&			
ANR	2587834	Identifier	sec		2587722	0					
ANR	2587835	OrExpression	sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l )		2587722	1		||			
ANR	2587836	RelationalExpression	sec -> value > l		2587722	0		>			
ANR	2587837	PtrMemberAccess	sec -> value		2587722	0					
ANR	2587838	Identifier	sec		2587722	0					
ANR	2587839	Identifier	value		2587722	1					
ANR	2587840	Identifier	l		2587722	1					
ANR	2587841	AndExpression	sec -> value == l && ! sec -> open && ! o_l		2587722	1		&&			
ANR	2587842	EqualityExpression	sec -> value == l		2587722	0		==			
ANR	2587843	PtrMemberAccess	sec -> value		2587722	0					
ANR	2587844	Identifier	sec		2587722	0					
ANR	2587845	Identifier	value		2587722	1					
ANR	2587846	Identifier	l		2587722	1					
ANR	2587847	AndExpression	! sec -> open && ! o_l		2587722	1		&&			
ANR	2587848	UnaryOperationExpression	! sec -> open		2587722	0					
ANR	2587849	UnaryOperator	!		2587722	0					
ANR	2587850	PtrMemberAccess	sec -> open		2587722	1					
ANR	2587851	Identifier	sec		2587722	0					
ANR	2587852	Identifier	open		2587722	1					
ANR	2587853	UnaryOperationExpression	! o_l		2587722	1					
ANR	2587854	UnaryOperator	!		2587722	0					
ANR	2587855	Identifier	o_l		2587722	1					
ANR	2587856	CompoundStatement		20:70:467:467	2587722	1					
ANR	2587857	ExpressionStatement	keys . Insert ( sec -> key )	379:4:10272:10295	2587722	0	True				
ANR	2587858	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2587859	Callee	keys . Insert		2587722	0					
ANR	2587860	MemberAccess	keys . Insert		2587722	0					
ANR	2587861	Identifier	keys		2587722	0					
ANR	2587862	Identifier	Insert		2587722	1					
ANR	2587863	ArgumentList	sec -> key		2587722	1					
ANR	2587864	Argument	sec -> key		2587722	0					
ANR	2587865	PtrMemberAccess	sec -> key		2587722	0					
ANR	2587866	Identifier	sec		2587722	0					
ANR	2587867	Identifier	key		2587722	1					
ANR	2587868	ExpressionStatement	sec = sec -> next	380:4:10301:10316	2587722	1	True				
ANR	2587869	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2587870	Identifier	sec		2587722	0					
ANR	2587871	PtrMemberAccess	sec -> next		2587722	1					
ANR	2587872	Identifier	sec		2587722	0					
ANR	2587873	Identifier	next		2587722	1					
ANR	2587874	ExpressionStatement	i = nodes [ i ] . RT	383:3:10373:10388	2587722	2	True				
ANR	2587875	AssignmentExpression	i = nodes [ i ] . RT		2587722	0		=			
ANR	2587876	Identifier	i		2587722	0					
ANR	2587877	MemberAccess	nodes [ i ] . RT		2587722	1					
ANR	2587878	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587879	Identifier	nodes		2587722	0					
ANR	2587880	Identifier	i		2587722	1					
ANR	2587881	Identifier	RT		2587722	1					
ANR	2587882	ElseStatement	else		2587722	0					
ANR	2587883	IfStatement	if ( r <= nodes [ i ] . nodeValue )		2587722	0					
ANR	2587884	Condition	r <= nodes [ i ] . nodeValue	384:13:10403:10425	2587722	0	True				
ANR	2587885	RelationalExpression	r <= nodes [ i ] . nodeValue		2587722	0		<=			
ANR	2587886	Identifier	r		2587722	0					
ANR	2587887	MemberAccess	nodes [ i ] . nodeValue		2587722	1					
ANR	2587888	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587889	Identifier	nodes		2587722	0					
ANR	2587890	Identifier	i		2587722	1					
ANR	2587891	Identifier	nodeValue		2587722	1					
ANR	2587892	CompoundStatement		26:39:630:630	2587722	1					
ANR	2587893	ExpressionStatement	sec = nodes [ i ] . LS	385:3:10434:10451	2587722	0	True				
ANR	2587894	AssignmentExpression	sec = nodes [ i ] . LS		2587722	0		=			
ANR	2587895	Identifier	sec		2587722	0					
ANR	2587896	MemberAccess	nodes [ i ] . LS		2587722	1					
ANR	2587897	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587898	Identifier	nodes		2587722	0					
ANR	2587899	Identifier	i		2587722	1					
ANR	2587900	Identifier	LS		2587722	1					
ANR	2587901	WhileStatement	while ( sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) ) )		2587722	1					
ANR	2587902	Condition	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )	386:9:10462:10521	2587722	0	True				
ANR	2587903	AndExpression	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )		2587722	0		&&			
ANR	2587904	Identifier	sec		2587722	0					
ANR	2587905	OrExpression	sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r )		2587722	1		||			
ANR	2587906	RelationalExpression	sec -> value < r		2587722	0		<			
ANR	2587907	PtrMemberAccess	sec -> value		2587722	0					
ANR	2587908	Identifier	sec		2587722	0					
ANR	2587909	Identifier	value		2587722	1					
ANR	2587910	Identifier	r		2587722	1					
ANR	2587911	AndExpression	sec -> value == r && ! sec -> open && ! o_r		2587722	1		&&			
ANR	2587912	EqualityExpression	sec -> value == r		2587722	0		==			
ANR	2587913	PtrMemberAccess	sec -> value		2587722	0					
ANR	2587914	Identifier	sec		2587722	0					
ANR	2587915	Identifier	value		2587722	1					
ANR	2587916	Identifier	r		2587722	1					
ANR	2587917	AndExpression	! sec -> open && ! o_r		2587722	1		&&			
ANR	2587918	UnaryOperationExpression	! sec -> open		2587722	0					
ANR	2587919	UnaryOperator	!		2587722	0					
ANR	2587920	PtrMemberAccess	sec -> open		2587722	1					
ANR	2587921	Identifier	sec		2587722	0					
ANR	2587922	Identifier	open		2587722	1					
ANR	2587923	UnaryOperationExpression	! o_r		2587722	1					
ANR	2587924	UnaryOperator	!		2587722	0					
ANR	2587925	Identifier	o_r		2587722	1					
ANR	2587926	CompoundStatement		28:70:724:724	2587722	1					
ANR	2587927	ExpressionStatement	keys . Insert ( sec -> key )	387:4:10529:10552	2587722	0	True				
ANR	2587928	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2587929	Callee	keys . Insert		2587722	0					
ANR	2587930	MemberAccess	keys . Insert		2587722	0					
ANR	2587931	Identifier	keys		2587722	0					
ANR	2587932	Identifier	Insert		2587722	1					
ANR	2587933	ArgumentList	sec -> key		2587722	1					
ANR	2587934	Argument	sec -> key		2587722	0					
ANR	2587935	PtrMemberAccess	sec -> key		2587722	0					
ANR	2587936	Identifier	sec		2587722	0					
ANR	2587937	Identifier	key		2587722	1					
ANR	2587938	ExpressionStatement	sec = sec -> next	388:4:10558:10573	2587722	1	True				
ANR	2587939	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2587940	Identifier	sec		2587722	0					
ANR	2587941	PtrMemberAccess	sec -> next		2587722	1					
ANR	2587942	Identifier	sec		2587722	0					
ANR	2587943	Identifier	next		2587722	1					
ANR	2587944	ExpressionStatement	i = nodes [ i ] . LT	391:3:10629:10644	2587722	2	True				
ANR	2587945	AssignmentExpression	i = nodes [ i ] . LT		2587722	0		=			
ANR	2587946	Identifier	i		2587722	0					
ANR	2587947	MemberAccess	nodes [ i ] . LT		2587722	1					
ANR	2587948	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587949	Identifier	nodes		2587722	0					
ANR	2587950	Identifier	i		2587722	1					
ANR	2587951	Identifier	LT		2587722	1					
ANR	2587952	ElseStatement	else		2587722	0					
ANR	2587953	IfStatement	if ( l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r )		2587722	0					
ANR	2587954	Condition	l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r	392:13:10659:10706	2587722	0	True				
ANR	2587955	AndExpression	l < nodes [ i ] . nodeValue && nodes [ i ] . nodeValue < r		2587722	0		&&			
ANR	2587956	RelationalExpression	l < nodes [ i ] . nodeValue		2587722	0		<			
ANR	2587957	Identifier	l		2587722	0					
ANR	2587958	MemberAccess	nodes [ i ] . nodeValue		2587722	1					
ANR	2587959	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587960	Identifier	nodes		2587722	0					
ANR	2587961	Identifier	i		2587722	1					
ANR	2587962	Identifier	nodeValue		2587722	1					
ANR	2587963	RelationalExpression	nodes [ i ] . nodeValue < r		2587722	1		<			
ANR	2587964	MemberAccess	nodes [ i ] . nodeValue		2587722	0					
ANR	2587965	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587966	Identifier	nodes		2587722	0					
ANR	2587967	Identifier	i		2587722	1					
ANR	2587968	Identifier	nodeValue		2587722	1					
ANR	2587969	Identifier	r		2587722	1					
ANR	2587970	CompoundStatement		34:64:911:911	2587722	1					
ANR	2587971	BreakStatement	break ;	393:3:10715:10720	2587722	0	True				
ANR	2587972	ElseStatement	else		2587722	0					
ANR	2587973	CompoundStatement		36:9:932:932	2587722	0					
ANR	2587974	ExpressionStatement	"printf ( ""Error:  failed to find split node\\n"" )"	395:3:10736:10783	2587722	0	True				
ANR	2587975	CallExpression	"printf ( ""Error:  failed to find split node\\n"" )"		2587722	0					
ANR	2587976	Callee	printf		2587722	0					
ANR	2587977	Identifier	printf		2587722	0					
ANR	2587978	ArgumentList	"""Error:  failed to find split node\\n"""		2587722	1					
ANR	2587979	Argument	"""Error:  failed to find split node\\n"""		2587722	0					
ANR	2587980	PrimaryExpression	"""Error:  failed to find split node\\n"""		2587722	0					
ANR	2587981	ExpressionStatement	exit ( 1 )	396:3:10788:10797	2587722	1	True				
ANR	2587982	CallExpression	exit ( 1 )		2587722	0					
ANR	2587983	Callee	exit		2587722	0					
ANR	2587984	Identifier	exit		2587722	0					
ANR	2587985	ArgumentList	1		2587722	1					
ANR	2587986	Argument	1		2587722	0					
ANR	2587987	PrimaryExpression	1		2587722	0					
ANR	2587988	ExpressionStatement	v = i	399:1:10807:10812	2587722	9	True				
ANR	2587989	AssignmentExpression	v = i		2587722	0		=			
ANR	2587990	Identifier	v		2587722	0					
ANR	2587991	Identifier	i		2587722	1					
ANR	2587992	ExpressionStatement	sec = nodes [ i ] . LS	400:1:10876:10893	2587722	10	True				
ANR	2587993	AssignmentExpression	sec = nodes [ i ] . LS		2587722	0		=			
ANR	2587994	Identifier	sec		2587722	0					
ANR	2587995	MemberAccess	nodes [ i ] . LS		2587722	1					
ANR	2587996	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2587997	Identifier	nodes		2587722	0					
ANR	2587998	Identifier	i		2587722	1					
ANR	2587999	Identifier	LS		2587722	1					
ANR	2588000	WhileStatement	while ( sec )		2587722	11					
ANR	2588001	Condition	sec	401:8:10903:10905	2587722	0	True				
ANR	2588002	Identifier	sec		2587722	0					
ANR	2588003	CompoundStatement		43:14:1110:1110	2587722	1					
ANR	2588004	ExpressionStatement	keys . Insert ( sec -> key )	402:2:10913:10936	2587722	0	True				
ANR	2588005	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2588006	Callee	keys . Insert		2587722	0					
ANR	2588007	MemberAccess	keys . Insert		2587722	0					
ANR	2588008	Identifier	keys		2587722	0					
ANR	2588009	Identifier	Insert		2587722	1					
ANR	2588010	ArgumentList	sec -> key		2587722	1					
ANR	2588011	Argument	sec -> key		2587722	0					
ANR	2588012	PtrMemberAccess	sec -> key		2587722	0					
ANR	2588013	Identifier	sec		2587722	0					
ANR	2588014	Identifier	key		2587722	1					
ANR	2588015	ExpressionStatement	sec = sec -> next	403:2:10940:10955	2587722	1	True				
ANR	2588016	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2588017	Identifier	sec		2587722	0					
ANR	2588018	PtrMemberAccess	sec -> next		2587722	1					
ANR	2588019	Identifier	sec		2587722	0					
ANR	2588020	Identifier	next		2587722	1					
ANR	2588021	ExpressionStatement	i = nodes [ v ] . LT	408:1:11041:11056	2587722	12	True				
ANR	2588022	AssignmentExpression	i = nodes [ v ] . LT		2587722	0		=			
ANR	2588023	Identifier	i		2587722	0					
ANR	2588024	MemberAccess	nodes [ v ] . LT		2587722	1					
ANR	2588025	ArrayIndexing	nodes [ v ]		2587722	0					
ANR	2588026	Identifier	nodes		2587722	0					
ANR	2588027	Identifier	v		2587722	1					
ANR	2588028	Identifier	LT		2587722	1					
ANR	2588029	WhileStatement	while ( i >= 0 && i < size )		2587722	13					
ANR	2588030	Condition	i >= 0 && i < size	409:8:11066:11083	2587722	0	True				
ANR	2588031	AndExpression	i >= 0 && i < size		2587722	0		&&			
ANR	2588032	RelationalExpression	i >= 0		2587722	0		>=			
ANR	2588033	Identifier	i		2587722	0					
ANR	2588034	PrimaryExpression	0		2587722	1					
ANR	2588035	RelationalExpression	i < size		2587722	1		<			
ANR	2588036	Identifier	i		2587722	0					
ANR	2588037	Identifier	size		2587722	1					
ANR	2588038	CompoundStatement		51:29:1288:1288	2587722	1					
ANR	2588039	IfStatement	if ( l < nodes [ i ] . nodeValue )		2587722	0					
ANR	2588040	Condition	l < nodes [ i ] . nodeValue	410:6:11095:11116	2587722	0	True				
ANR	2588041	RelationalExpression	l < nodes [ i ] . nodeValue		2587722	0		<			
ANR	2588042	Identifier	l		2587722	0					
ANR	2588043	MemberAccess	nodes [ i ] . nodeValue		2587722	1					
ANR	2588044	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588045	Identifier	nodes		2587722	0					
ANR	2588046	Identifier	i		2587722	1					
ANR	2588047	Identifier	nodeValue		2587722	1					
ANR	2588048	CompoundStatement		52:31:1321:1321	2587722	1					
ANR	2588049	ExpressionStatement	sec = nodes [ i ] . RS	412:3:11173:11190	2587722	0	True				
ANR	2588050	AssignmentExpression	sec = nodes [ i ] . RS		2587722	0		=			
ANR	2588051	Identifier	sec		2587722	0					
ANR	2588052	MemberAccess	nodes [ i ] . RS		2587722	1					
ANR	2588053	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588054	Identifier	nodes		2587722	0					
ANR	2588055	Identifier	i		2587722	1					
ANR	2588056	Identifier	RS		2587722	1					
ANR	2588057	WhileStatement	while ( sec )		2587722	1					
ANR	2588058	Condition	sec	413:10:11202:11204	2587722	0	True				
ANR	2588059	Identifier	sec		2587722	0					
ANR	2588060	CompoundStatement		55:16:1409:1409	2587722	1					
ANR	2588061	ExpressionStatement	keys . Insert ( sec -> key )	414:4:11214:11237	2587722	0	True				
ANR	2588062	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2588063	Callee	keys . Insert		2587722	0					
ANR	2588064	MemberAccess	keys . Insert		2587722	0					
ANR	2588065	Identifier	keys		2587722	0					
ANR	2588066	Identifier	Insert		2587722	1					
ANR	2588067	ArgumentList	sec -> key		2587722	1					
ANR	2588068	Argument	sec -> key		2587722	0					
ANR	2588069	PtrMemberAccess	sec -> key		2587722	0					
ANR	2588070	Identifier	sec		2587722	0					
ANR	2588071	Identifier	key		2587722	1					
ANR	2588072	ExpressionStatement	sec = sec -> next	415:4:11243:11258	2587722	1	True				
ANR	2588073	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2588074	Identifier	sec		2587722	0					
ANR	2588075	PtrMemberAccess	sec -> next		2587722	1					
ANR	2588076	Identifier	sec		2587722	0					
ANR	2588077	Identifier	next		2587722	1					
ANR	2588078	ExpressionStatement	"VisitActive ( nodes [ i ] . RT , keys )"	417:3:11268:11300	2587722	2	True				
ANR	2588079	CallExpression	"VisitActive ( nodes [ i ] . RT , keys )"		2587722	0					
ANR	2588080	Callee	VisitActive		2587722	0					
ANR	2588081	Identifier	VisitActive		2587722	0					
ANR	2588082	ArgumentList	nodes [ i ] . RT		2587722	1					
ANR	2588083	Argument	nodes [ i ] . RT		2587722	0					
ANR	2588084	MemberAccess	nodes [ i ] . RT		2587722	0					
ANR	2588085	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588086	Identifier	nodes		2587722	0					
ANR	2588087	Identifier	i		2587722	1					
ANR	2588088	Identifier	RT		2587722	1					
ANR	2588089	Argument	keys		2587722	1					
ANR	2588090	Identifier	keys		2587722	0					
ANR	2588091	ExpressionStatement	i = nodes [ i ] . LT	418:3:11305:11320	2587722	3	True				
ANR	2588092	AssignmentExpression	i = nodes [ i ] . LT		2587722	0		=			
ANR	2588093	Identifier	i		2587722	0					
ANR	2588094	MemberAccess	nodes [ i ] . LT		2587722	1					
ANR	2588095	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588096	Identifier	nodes		2587722	0					
ANR	2588097	Identifier	i		2587722	1					
ANR	2588098	Identifier	LT		2587722	1					
ANR	2588099	ElseStatement	else		2587722	0					
ANR	2588100	CompoundStatement		61:9:1532:1532	2587722	0					
ANR	2588101	ExpressionStatement	sec = nodes [ i ] . RS	420:3:11336:11353	2587722	0	True				
ANR	2588102	AssignmentExpression	sec = nodes [ i ] . RS		2587722	0		=			
ANR	2588103	Identifier	sec		2587722	0					
ANR	2588104	MemberAccess	nodes [ i ] . RS		2587722	1					
ANR	2588105	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588106	Identifier	nodes		2587722	0					
ANR	2588107	Identifier	i		2587722	1					
ANR	2588108	Identifier	RS		2587722	1					
ANR	2588109	WhileStatement	while ( sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) ) )		2587722	1					
ANR	2588110	Condition	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )	421:9:11364:11423	2587722	0	True				
ANR	2588111	AndExpression	sec && ( sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l ) )		2587722	0		&&			
ANR	2588112	Identifier	sec		2587722	0					
ANR	2588113	OrExpression	sec -> value > l || ( sec -> value == l && ! sec -> open && ! o_l )		2587722	1		||			
ANR	2588114	RelationalExpression	sec -> value > l		2587722	0		>			
ANR	2588115	PtrMemberAccess	sec -> value		2587722	0					
ANR	2588116	Identifier	sec		2587722	0					
ANR	2588117	Identifier	value		2587722	1					
ANR	2588118	Identifier	l		2587722	1					
ANR	2588119	AndExpression	sec -> value == l && ! sec -> open && ! o_l		2587722	1		&&			
ANR	2588120	EqualityExpression	sec -> value == l		2587722	0		==			
ANR	2588121	PtrMemberAccess	sec -> value		2587722	0					
ANR	2588122	Identifier	sec		2587722	0					
ANR	2588123	Identifier	value		2587722	1					
ANR	2588124	Identifier	l		2587722	1					
ANR	2588125	AndExpression	! sec -> open && ! o_l		2587722	1		&&			
ANR	2588126	UnaryOperationExpression	! sec -> open		2587722	0					
ANR	2588127	UnaryOperator	!		2587722	0					
ANR	2588128	PtrMemberAccess	sec -> open		2587722	1					
ANR	2588129	Identifier	sec		2587722	0					
ANR	2588130	Identifier	open		2587722	1					
ANR	2588131	UnaryOperationExpression	! o_l		2587722	1					
ANR	2588132	UnaryOperator	!		2587722	0					
ANR	2588133	Identifier	o_l		2587722	1					
ANR	2588134	CompoundStatement		63:70:1626:1626	2587722	1					
ANR	2588135	ExpressionStatement	keys . Insert ( sec -> key )	422:4:11431:11454	2587722	0	True				
ANR	2588136	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2588137	Callee	keys . Insert		2587722	0					
ANR	2588138	MemberAccess	keys . Insert		2587722	0					
ANR	2588139	Identifier	keys		2587722	0					
ANR	2588140	Identifier	Insert		2587722	1					
ANR	2588141	ArgumentList	sec -> key		2587722	1					
ANR	2588142	Argument	sec -> key		2587722	0					
ANR	2588143	PtrMemberAccess	sec -> key		2587722	0					
ANR	2588144	Identifier	sec		2587722	0					
ANR	2588145	Identifier	key		2587722	1					
ANR	2588146	ExpressionStatement	sec = sec -> next	423:4:11460:11475	2587722	1	True				
ANR	2588147	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2588148	Identifier	sec		2587722	0					
ANR	2588149	PtrMemberAccess	sec -> next		2587722	1					
ANR	2588150	Identifier	sec		2587722	0					
ANR	2588151	Identifier	next		2587722	1					
ANR	2588152	ExpressionStatement	i = nodes [ i ] . RT	425:3:11485:11500	2587722	2	True				
ANR	2588153	AssignmentExpression	i = nodes [ i ] . RT		2587722	0		=			
ANR	2588154	Identifier	i		2587722	0					
ANR	2588155	MemberAccess	nodes [ i ] . RT		2587722	1					
ANR	2588156	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588157	Identifier	nodes		2587722	0					
ANR	2588158	Identifier	i		2587722	1					
ANR	2588159	Identifier	RT		2587722	1					
ANR	2588160	ExpressionStatement	i = nodes [ v ] . RT	431:1:11591:11606	2587722	14	True				
ANR	2588161	AssignmentExpression	i = nodes [ v ] . RT		2587722	0		=			
ANR	2588162	Identifier	i		2587722	0					
ANR	2588163	MemberAccess	nodes [ v ] . RT		2587722	1					
ANR	2588164	ArrayIndexing	nodes [ v ]		2587722	0					
ANR	2588165	Identifier	nodes		2587722	0					
ANR	2588166	Identifier	v		2587722	1					
ANR	2588167	Identifier	RT		2587722	1					
ANR	2588168	WhileStatement	while ( i >= 0 && i < size )		2587722	15					
ANR	2588169	Condition	i >= 0 && i < size	432:8:11616:11633	2587722	0	True				
ANR	2588170	AndExpression	i >= 0 && i < size		2587722	0		&&			
ANR	2588171	RelationalExpression	i >= 0		2587722	0		>=			
ANR	2588172	Identifier	i		2587722	0					
ANR	2588173	PrimaryExpression	0		2587722	1					
ANR	2588174	RelationalExpression	i < size		2587722	1		<			
ANR	2588175	Identifier	i		2587722	0					
ANR	2588176	Identifier	size		2587722	1					
ANR	2588177	CompoundStatement		74:29:1838:1838	2587722	1					
ANR	2588178	IfStatement	if ( r > nodes [ i ] . nodeValue )		2587722	0					
ANR	2588179	Condition	r > nodes [ i ] . nodeValue	433:6:11645:11666	2587722	0	True				
ANR	2588180	RelationalExpression	r > nodes [ i ] . nodeValue		2587722	0		>			
ANR	2588181	Identifier	r		2587722	0					
ANR	2588182	MemberAccess	nodes [ i ] . nodeValue		2587722	1					
ANR	2588183	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588184	Identifier	nodes		2587722	0					
ANR	2588185	Identifier	i		2587722	1					
ANR	2588186	Identifier	nodeValue		2587722	1					
ANR	2588187	CompoundStatement		75:31:1871:1871	2587722	1					
ANR	2588188	ExpressionStatement	sec = nodes [ i ] . LS	435:3:11723:11740	2587722	0	True				
ANR	2588189	AssignmentExpression	sec = nodes [ i ] . LS		2587722	0		=			
ANR	2588190	Identifier	sec		2587722	0					
ANR	2588191	MemberAccess	nodes [ i ] . LS		2587722	1					
ANR	2588192	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588193	Identifier	nodes		2587722	0					
ANR	2588194	Identifier	i		2587722	1					
ANR	2588195	Identifier	LS		2587722	1					
ANR	2588196	WhileStatement	while ( sec )		2587722	1					
ANR	2588197	Condition	sec	436:10:11752:11754	2587722	0	True				
ANR	2588198	Identifier	sec		2587722	0					
ANR	2588199	CompoundStatement		78:16:1959:1959	2587722	1					
ANR	2588200	ExpressionStatement	keys . Insert ( sec -> key )	437:4:11764:11787	2587722	0	True				
ANR	2588201	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2588202	Callee	keys . Insert		2587722	0					
ANR	2588203	MemberAccess	keys . Insert		2587722	0					
ANR	2588204	Identifier	keys		2587722	0					
ANR	2588205	Identifier	Insert		2587722	1					
ANR	2588206	ArgumentList	sec -> key		2587722	1					
ANR	2588207	Argument	sec -> key		2587722	0					
ANR	2588208	PtrMemberAccess	sec -> key		2587722	0					
ANR	2588209	Identifier	sec		2587722	0					
ANR	2588210	Identifier	key		2587722	1					
ANR	2588211	ExpressionStatement	sec = sec -> next	438:4:11793:11808	2587722	1	True				
ANR	2588212	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2588213	Identifier	sec		2587722	0					
ANR	2588214	PtrMemberAccess	sec -> next		2587722	1					
ANR	2588215	Identifier	sec		2587722	0					
ANR	2588216	Identifier	next		2587722	1					
ANR	2588217	ExpressionStatement	"VisitActive ( nodes [ i ] . LT , keys )"	440:3:11818:11850	2587722	2	True				
ANR	2588218	CallExpression	"VisitActive ( nodes [ i ] . LT , keys )"		2587722	0					
ANR	2588219	Callee	VisitActive		2587722	0					
ANR	2588220	Identifier	VisitActive		2587722	0					
ANR	2588221	ArgumentList	nodes [ i ] . LT		2587722	1					
ANR	2588222	Argument	nodes [ i ] . LT		2587722	0					
ANR	2588223	MemberAccess	nodes [ i ] . LT		2587722	0					
ANR	2588224	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588225	Identifier	nodes		2587722	0					
ANR	2588226	Identifier	i		2587722	1					
ANR	2588227	Identifier	LT		2587722	1					
ANR	2588228	Argument	keys		2587722	1					
ANR	2588229	Identifier	keys		2587722	0					
ANR	2588230	ExpressionStatement	i = nodes [ i ] . RT	441:3:11855:11870	2587722	3	True				
ANR	2588231	AssignmentExpression	i = nodes [ i ] . RT		2587722	0		=			
ANR	2588232	Identifier	i		2587722	0					
ANR	2588233	MemberAccess	nodes [ i ] . RT		2587722	1					
ANR	2588234	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588235	Identifier	nodes		2587722	0					
ANR	2588236	Identifier	i		2587722	1					
ANR	2588237	Identifier	RT		2587722	1					
ANR	2588238	ElseStatement	else		2587722	0					
ANR	2588239	CompoundStatement		84:9:2082:2082	2587722	0					
ANR	2588240	ExpressionStatement	sec = nodes [ i ] . LS	443:3:11886:11903	2587722	0	True				
ANR	2588241	AssignmentExpression	sec = nodes [ i ] . LS		2587722	0		=			
ANR	2588242	Identifier	sec		2587722	0					
ANR	2588243	MemberAccess	nodes [ i ] . LS		2587722	1					
ANR	2588244	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588245	Identifier	nodes		2587722	0					
ANR	2588246	Identifier	i		2587722	1					
ANR	2588247	Identifier	LS		2587722	1					
ANR	2588248	WhileStatement	while ( sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) ) )		2587722	1					
ANR	2588249	Condition	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )	444:9:11914:11973	2587722	0	True				
ANR	2588250	AndExpression	sec && ( sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r ) )		2587722	0		&&			
ANR	2588251	Identifier	sec		2587722	0					
ANR	2588252	OrExpression	sec -> value < r || ( sec -> value == r && ! sec -> open && ! o_r )		2587722	1		||			
ANR	2588253	RelationalExpression	sec -> value < r		2587722	0		<			
ANR	2588254	PtrMemberAccess	sec -> value		2587722	0					
ANR	2588255	Identifier	sec		2587722	0					
ANR	2588256	Identifier	value		2587722	1					
ANR	2588257	Identifier	r		2587722	1					
ANR	2588258	AndExpression	sec -> value == r && ! sec -> open && ! o_r		2587722	1		&&			
ANR	2588259	EqualityExpression	sec -> value == r		2587722	0		==			
ANR	2588260	PtrMemberAccess	sec -> value		2587722	0					
ANR	2588261	Identifier	sec		2587722	0					
ANR	2588262	Identifier	value		2587722	1					
ANR	2588263	Identifier	r		2587722	1					
ANR	2588264	AndExpression	! sec -> open && ! o_r		2587722	1		&&			
ANR	2588265	UnaryOperationExpression	! sec -> open		2587722	0					
ANR	2588266	UnaryOperator	!		2587722	0					
ANR	2588267	PtrMemberAccess	sec -> open		2587722	1					
ANR	2588268	Identifier	sec		2587722	0					
ANR	2588269	Identifier	open		2587722	1					
ANR	2588270	UnaryOperationExpression	! o_r		2587722	1					
ANR	2588271	UnaryOperator	!		2587722	0					
ANR	2588272	Identifier	o_r		2587722	1					
ANR	2588273	CompoundStatement		86:70:2176:2176	2587722	1					
ANR	2588274	ExpressionStatement	keys . Insert ( sec -> key )	445:4:11981:12004	2587722	0	True				
ANR	2588275	CallExpression	keys . Insert ( sec -> key )		2587722	0					
ANR	2588276	Callee	keys . Insert		2587722	0					
ANR	2588277	MemberAccess	keys . Insert		2587722	0					
ANR	2588278	Identifier	keys		2587722	0					
ANR	2588279	Identifier	Insert		2587722	1					
ANR	2588280	ArgumentList	sec -> key		2587722	1					
ANR	2588281	Argument	sec -> key		2587722	0					
ANR	2588282	PtrMemberAccess	sec -> key		2587722	0					
ANR	2588283	Identifier	sec		2587722	0					
ANR	2588284	Identifier	key		2587722	1					
ANR	2588285	ExpressionStatement	sec = sec -> next	446:4:12010:12025	2587722	1	True				
ANR	2588286	AssignmentExpression	sec = sec -> next		2587722	0		=			
ANR	2588287	Identifier	sec		2587722	0					
ANR	2588288	PtrMemberAccess	sec -> next		2587722	1					
ANR	2588289	Identifier	sec		2587722	0					
ANR	2588290	Identifier	next		2587722	1					
ANR	2588291	ExpressionStatement	i = nodes [ i ] . LT	448:3:12035:12050	2587722	2	True				
ANR	2588292	AssignmentExpression	i = nodes [ i ] . LT		2587722	0		=			
ANR	2588293	Identifier	i		2587722	0					
ANR	2588294	MemberAccess	nodes [ i ] . LT		2587722	1					
ANR	2588295	ArrayIndexing	nodes [ i ]		2587722	0					
ANR	2588296	Identifier	nodes		2587722	0					
ANR	2588297	Identifier	i		2587722	1					
ANR	2588298	Identifier	LT		2587722	1					
ANR	2588299	ReturnStatement	return ( true ) ;	453:1:12071:12085	2587722	16	True				
ANR	2588300	Identifier	true		2587722	0					
ANR	2588301	ReturnType	bool		2587722	1					
ANR	2588302	Identifier	IntervalTree :: WindowQuery		2587722	2					
ANR	2588303	ParameterList	"const Interval & interval , KeySet & keys"		2587722	3					
ANR	2588304	Parameter	const Interval & interval	358:13:9757:9780	2587722	0	True				
ANR	2588305	ParameterType	const Interval &		2587722	0					
ANR	2588306	Identifier	interval		2587722	1					
ANR	2588307	Parameter	KeySet & keys	358:39:9783:9794	2587722	1	True				
ANR	2588308	ParameterType	KeySet &		2587722	0					
ANR	2588309	Identifier	keys		2587722	1					
ANR	2588310	CFGEntryNode	ENTRY		2587722		True				
ANR	2588311	CFGExitNode	EXIT		2587722		True				
ANR	2588312	Symbol	* v		2587722						
ANR	2588313	Symbol	sec -> key		2587722						
ANR	2588314	Symbol	sec -> open		2587722						
ANR	2588315	Symbol	keys		2587722						
ANR	2588316	Symbol	rootT		2587722						
ANR	2588317	Symbol	interval . lower . IsNumber		2587722						
ANR	2588318	Symbol	sec		2587722						
ANR	2588319	Symbol	* nodes		2587722						
ANR	2588320	Symbol	interval . upper . IsNumber		2587722						
ANR	2588321	Symbol	interval . upper		2587722						
ANR	2588322	Symbol	o_l		2587722						
ANR	2588323	Symbol	interval . openUpper		2587722						
ANR	2588324	Symbol	o_r		2587722						
ANR	2588325	Symbol	false		2587722						
ANR	2588326	Symbol	i		2587722						
ANR	2588327	Symbol	sec -> value		2587722						
ANR	2588328	Symbol	l		2587722						
ANR	2588329	Symbol	r		2587722						
ANR	2588330	Symbol	nodes		2587722						
ANR	2588331	Symbol	* i		2587722						
ANR	2588332	Symbol	size		2587722						
ANR	2588333	Symbol	nodes [ v ] . LT		2587722						
ANR	2588334	Symbol	v		2587722						
ANR	2588335	Symbol	nodes [ i ] . LT		2587722						
ANR	2588336	Symbol	true		2587722						
ANR	2588337	Symbol	nodes [ i ] . LS		2587722						
ANR	2588338	Symbol	interval		2587722						
ANR	2588339	Symbol	* sec		2587722						
ANR	2588340	Symbol	nodes [ v ] . RT		2587722						
ANR	2588341	Symbol	interval . openLower		2587722						
ANR	2588342	Symbol	nodes [ i ] . RT		2587722						
ANR	2588343	Symbol	interval . lower		2587722						
ANR	2588344	Symbol	nodes [ i ] . nodeValue		2587722						
ANR	2588345	Symbol	nodes [ i ] . RS		2587722						
ANR	2588346	Symbol	sec -> next		2587722						
ANR	2588347	Function	IntervalTree :: VisitActive	457:0:12091:12436							
ANR	2588348	FunctionDef	"IntervalTree :: VisitActive (int i , KeySet & keys)"		2588347	0					
ANR	2588349	CompoundStatement		459:0:12146:12436	2588347	0					
ANR	2588350	IfStatement	if ( i == - 1 || i >= size )		2588347	0					
ANR	2588351	Condition	i == - 1 || i >= size	460:5:12153:12168	2588347	0	True				
ANR	2588352	OrExpression	i == - 1 || i >= size		2588347	0		||			
ANR	2588353	EqualityExpression	i == - 1		2588347	0		==			
ANR	2588354	Identifier	i		2588347	0					
ANR	2588355	UnaryOperationExpression	- 1		2588347	1					
ANR	2588356	UnaryOperator	-		2588347	0					
ANR	2588357	PrimaryExpression	1		2588347	1					
ANR	2588358	RelationalExpression	i >= size		2588347	1		>=			
ANR	2588359	Identifier	i		2588347	0					
ANR	2588360	Identifier	size		2588347	1					
ANR	2588361	ReturnStatement	return ;	460:24:12172:12178	2588347	1	True				
ANR	2588362	IdentifierDeclStatement	Secondary * sec = nodes [ i ] . LS ;	463:1:12218:12247	2588347	1	True				
ANR	2588363	IdentifierDecl	* sec = nodes [ i ] . LS		2588347	0					
ANR	2588364	IdentifierDeclType	Secondary *		2588347	0					
ANR	2588365	Identifier	sec		2588347	1					
ANR	2588366	AssignmentExpression	* sec = nodes [ i ] . LS		2588347	2		=			
ANR	2588367	Identifier	sec		2588347	0					
ANR	2588368	MemberAccess	nodes [ i ] . LS		2588347	1					
ANR	2588369	ArrayIndexing	nodes [ i ]		2588347	0					
ANR	2588370	Identifier	nodes		2588347	0					
ANR	2588371	Identifier	i		2588347	1					
ANR	2588372	Identifier	LS		2588347	1					
ANR	2588373	WhileStatement	while ( sec )		2588347	2					
ANR	2588374	Condition	sec	464:8:12257:12259	2588347	0	True				
ANR	2588375	Identifier	sec		2588347	0					
ANR	2588376	CompoundStatement		6:14:116:116	2588347	1					
ANR	2588377	ExpressionStatement	keys . Insert ( sec -> key )	465:2:12267:12290	2588347	0	True				
ANR	2588378	CallExpression	keys . Insert ( sec -> key )		2588347	0					
ANR	2588379	Callee	keys . Insert		2588347	0					
ANR	2588380	MemberAccess	keys . Insert		2588347	0					
ANR	2588381	Identifier	keys		2588347	0					
ANR	2588382	Identifier	Insert		2588347	1					
ANR	2588383	ArgumentList	sec -> key		2588347	1					
ANR	2588384	Argument	sec -> key		2588347	0					
ANR	2588385	PtrMemberAccess	sec -> key		2588347	0					
ANR	2588386	Identifier	sec		2588347	0					
ANR	2588387	Identifier	key		2588347	1					
ANR	2588388	ExpressionStatement	sec = sec -> next	466:2:12294:12309	2588347	1	True				
ANR	2588389	AssignmentExpression	sec = sec -> next		2588347	0		=			
ANR	2588390	Identifier	sec		2588347	0					
ANR	2588391	PtrMemberAccess	sec -> next		2588347	1					
ANR	2588392	Identifier	sec		2588347	0					
ANR	2588393	Identifier	next		2588347	1					
ANR	2588394	ExpressionStatement	"VisitActive ( nodes [ i ] . LT , keys )"	470:1:12367:12399	2588347	3	True				
ANR	2588395	CallExpression	"VisitActive ( nodes [ i ] . LT , keys )"		2588347	0					
ANR	2588396	Callee	VisitActive		2588347	0					
ANR	2588397	Identifier	VisitActive		2588347	0					
ANR	2588398	ArgumentList	nodes [ i ] . LT		2588347	1					
ANR	2588399	Argument	nodes [ i ] . LT		2588347	0					
ANR	2588400	MemberAccess	nodes [ i ] . LT		2588347	0					
ANR	2588401	ArrayIndexing	nodes [ i ]		2588347	0					
ANR	2588402	Identifier	nodes		2588347	0					
ANR	2588403	Identifier	i		2588347	1					
ANR	2588404	Identifier	LT		2588347	1					
ANR	2588405	Argument	keys		2588347	1					
ANR	2588406	Identifier	keys		2588347	0					
ANR	2588407	ExpressionStatement	"VisitActive ( nodes [ i ] . RT , keys )"	471:1:12402:12434	2588347	4	True				
ANR	2588408	CallExpression	"VisitActive ( nodes [ i ] . RT , keys )"		2588347	0					
ANR	2588409	Callee	VisitActive		2588347	0					
ANR	2588410	Identifier	VisitActive		2588347	0					
ANR	2588411	ArgumentList	nodes [ i ] . RT		2588347	1					
ANR	2588412	Argument	nodes [ i ] . RT		2588347	0					
ANR	2588413	MemberAccess	nodes [ i ] . RT		2588347	0					
ANR	2588414	ArrayIndexing	nodes [ i ]		2588347	0					
ANR	2588415	Identifier	nodes		2588347	0					
ANR	2588416	Identifier	i		2588347	1					
ANR	2588417	Identifier	RT		2588347	1					
ANR	2588418	Argument	keys		2588347	1					
ANR	2588419	Identifier	keys		2588347	0					
ANR	2588420	ReturnType	void		2588347	1					
ANR	2588421	Identifier	IntervalTree :: VisitActive		2588347	2					
ANR	2588422	ParameterList	"int i , KeySet & keys"		2588347	3					
ANR	2588423	Parameter	int i	458:13:12124:12128	2588347	0	True				
ANR	2588424	ParameterType	int		2588347	0					
ANR	2588425	Identifier	i		2588347	1					
ANR	2588426	Parameter	KeySet & keys	458:20:12131:12142	2588347	1	True				
ANR	2588427	ParameterType	KeySet &		2588347	0					
ANR	2588428	Identifier	keys		2588347	1					
ANR	2588429	CFGEntryNode	ENTRY		2588347		True				
ANR	2588430	CFGExitNode	EXIT		2588347		True				
ANR	2588431	Symbol	sec -> key		2588347						
ANR	2588432	Symbol	keys		2588347						
ANR	2588433	Symbol	i		2588347						
ANR	2588434	Symbol	sec		2588347						
ANR	2588435	Symbol	* i		2588347						
ANR	2588436	Symbol	nodes		2588347						
ANR	2588437	Symbol	size		2588347						
ANR	2588438	Symbol	nodes [ i ] . LT		2588347						
ANR	2588439	Symbol	nodes [ i ] . LS		2588347						
ANR	2588440	Symbol	* nodes		2588347						
ANR	2588441	Symbol	* sec		2588347						
ANR	2588442	Symbol	nodes [ i ] . RT		2588347						
ANR	2588443	Symbol	sec -> next		2588347						
ANR	2588444	Function	IntervalTree :: Display	475:0:12440:13140							
ANR	2588445	FunctionDef	IntervalTree :: Display (FILE * fp)		2588444	0					
ANR	2588446	CompoundStatement		477:0:12480:13140	2588444	0					
ANR	2588447	IfStatement	if ( size <= 0 || ! nodes )		2588444	0					
ANR	2588448	Condition	size <= 0 || ! nodes	478:5:12487:12505	2588444	0	True				
ANR	2588449	OrExpression	size <= 0 || ! nodes		2588444	0		||			
ANR	2588450	RelationalExpression	size <= 0		2588444	0		<=			
ANR	2588451	Identifier	size		2588444	0					
ANR	2588452	PrimaryExpression	0		2588444	1					
ANR	2588453	UnaryOperationExpression	! nodes		2588444	1					
ANR	2588454	UnaryOperator	!		2588444	0					
ANR	2588455	Identifier	nodes		2588444	1					
ANR	2588456	CompoundStatement		2:27:28:28	2588444	1					
ANR	2588457	ExpressionStatement	"fprintf ( fp , ""<empty>\\n"" )"	479:2:12513:12539	2588444	0	True				
ANR	2588458	CallExpression	"fprintf ( fp , ""<empty>\\n"" )"		2588444	0					
ANR	2588459	Callee	fprintf		2588444	0					
ANR	2588460	Identifier	fprintf		2588444	0					
ANR	2588461	ArgumentList	fp		2588444	1					
ANR	2588462	Argument	fp		2588444	0					
ANR	2588463	Identifier	fp		2588444	0					
ANR	2588464	Argument	"""<empty>\\n"""		2588444	1					
ANR	2588465	PrimaryExpression	"""<empty>\\n"""		2588444	0					
ANR	2588466	ReturnStatement	return ;	480:2:12543:12549	2588444	1	True				
ANR	2588467	IdentifierDeclStatement	"int j = 1 , k = 1 ;"	483:1:12556:12574	2588444	1	True				
ANR	2588468	IdentifierDecl	j = 1		2588444	0					
ANR	2588469	IdentifierDeclType	int		2588444	0					
ANR	2588470	Identifier	j		2588444	1					
ANR	2588471	AssignmentExpression	j = 1		2588444	2		=			
ANR	2588472	Identifier	j		2588444	0					
ANR	2588473	PrimaryExpression	1		2588444	1					
ANR	2588474	IdentifierDecl	k = 1		2588444	1					
ANR	2588475	IdentifierDeclType	int		2588444	0					
ANR	2588476	Identifier	k		2588444	1					
ANR	2588477	AssignmentExpression	k = 1		2588444	2		=			
ANR	2588478	Identifier	k		2588444	0					
ANR	2588479	PrimaryExpression	1		2588444	1					
ANR	2588480	IdentifierDeclStatement	Secondary * sec ;	484:1:12577:12592	2588444	2	True				
ANR	2588481	IdentifierDecl	* sec		2588444	0					
ANR	2588482	IdentifierDeclType	Secondary *		2588444	0					
ANR	2588483	Identifier	sec		2588444	1					
ANR	2588484	ForStatement	for ( int i = 0 ; i < size ; i ++ )		2588444	3					
ANR	2588485	ForInit	int i = 0 ;	485:6:12600:12610	2588444	0	True				
ANR	2588486	IdentifierDeclStatement	int i = 0 ;		2588444	0					
ANR	2588487	IdentifierDecl	i = 0		2588444	0					
ANR	2588488	IdentifierDeclType	int		2588444	0					
ANR	2588489	Identifier	i		2588444	1					
ANR	2588490	AssignmentExpression	i = 0		2588444	2		=			
ANR	2588491	Identifier	i		2588444	0					
ANR	2588492	PrimaryExpression	0		2588444	1					
ANR	2588493	Condition	i < size	485:18:12612:12619	2588444	1	True				
ANR	2588494	RelationalExpression	i < size		2588444	0		<			
ANR	2588495	Identifier	i		2588444	0					
ANR	2588496	Identifier	size		2588444	1					
ANR	2588497	PostIncDecOperationExpression	i ++	485:28:12622:12624	2588444	2	True				
ANR	2588498	Identifier	i		2588444	0					
ANR	2588499	IncDec	++		2588444	1					
ANR	2588500	CompoundStatement		9:34:147:147	2588444	3					
ANR	2588501	ExpressionStatement	"fprintf ( fp , "" [%s%s%g:"" , i == rootT ? ""(*)"" : """" , nodes [ i ] . active ? ""(@)"" : """" , nodes [ i ] . nodeValue )"	486:2:12632:12726	2588444	0	True				
ANR	2588502	CallExpression	"fprintf ( fp , "" [%s%s%g:"" , i == rootT ? ""(*)"" : """" , nodes [ i ] . active ? ""(@)"" : """" , nodes [ i ] . nodeValue )"		2588444	0					
ANR	2588503	Callee	fprintf		2588444	0					
ANR	2588504	Identifier	fprintf		2588444	0					
ANR	2588505	ArgumentList	fp		2588444	1					
ANR	2588506	Argument	fp		2588444	0					
ANR	2588507	Identifier	fp		2588444	0					
ANR	2588508	Argument	""" [%s%s%g:"""		2588444	1					
ANR	2588509	PrimaryExpression	""" [%s%s%g:"""		2588444	0					
ANR	2588510	Argument	"i == rootT ? ""(*)"" : """""		2588444	2					
ANR	2588511	ConditionalExpression	"i == rootT ? ""(*)"" : """""		2588444	0					
ANR	2588512	Condition	i == rootT		2588444	0					
ANR	2588513	EqualityExpression	i == rootT		2588444	0		==			
ANR	2588514	Identifier	i		2588444	0					
ANR	2588515	Identifier	rootT		2588444	1					
ANR	2588516	PrimaryExpression	"""(*)"""		2588444	1					
ANR	2588517	PrimaryExpression	""""""		2588444	2					
ANR	2588518	Argument	"nodes [ i ] . active ? ""(@)"" : """""		2588444	3					
ANR	2588519	ConditionalExpression	"nodes [ i ] . active ? ""(@)"" : """""		2588444	0					
ANR	2588520	Condition	nodes [ i ] . active		2588444	0					
ANR	2588521	MemberAccess	nodes [ i ] . active		2588444	0					
ANR	2588522	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588523	Identifier	nodes		2588444	0					
ANR	2588524	Identifier	i		2588444	1					
ANR	2588525	Identifier	active		2588444	1					
ANR	2588526	PrimaryExpression	"""(@)"""		2588444	1					
ANR	2588527	PrimaryExpression	""""""		2588444	2					
ANR	2588528	Argument	nodes [ i ] . nodeValue		2588444	4					
ANR	2588529	MemberAccess	nodes [ i ] . nodeValue		2588444	0					
ANR	2588530	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588531	Identifier	nodes		2588444	0					
ANR	2588532	Identifier	i		2588444	1					
ANR	2588533	Identifier	nodeValue		2588444	1					
ANR	2588534	ForStatement	for ( sec = nodes [ i ] . LS ; sec != NULL ; sec = sec -> next )		2588444	1					
ANR	2588535	ForInit	sec = nodes [ i ] . LS ;	488:7:12735:12752	2588444	0	True				
ANR	2588536	AssignmentExpression	sec = nodes [ i ] . LS		2588444	0		=			
ANR	2588537	Identifier	sec		2588444	0					
ANR	2588538	MemberAccess	nodes [ i ] . LS		2588444	1					
ANR	2588539	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588540	Identifier	nodes		2588444	0					
ANR	2588541	Identifier	i		2588444	1					
ANR	2588542	Identifier	LS		2588444	1					
ANR	2588543	Condition	sec != NULL	488:26:12754:12764	2588444	1	True				
ANR	2588544	EqualityExpression	sec != NULL		2588444	0		!=			
ANR	2588545	Identifier	sec		2588444	0					
ANR	2588546	Identifier	NULL		2588444	1					
ANR	2588547	AssignmentExpression	sec = sec -> next	488:39:12767:12781	2588444	2	True	=			
ANR	2588548	Identifier	sec		2588444	0					
ANR	2588549	PtrMemberAccess	sec -> next		2588444	1					
ANR	2588550	Identifier	sec		2588444	0					
ANR	2588551	Identifier	next		2588444	1					
ANR	2588552	CompoundStatement		12:57:304:304	2588444	3					
ANR	2588553	ExpressionStatement	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"	489:3:12790:12836	2588444	0	True				
ANR	2588554	CallExpression	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"		2588444	0					
ANR	2588555	Callee	fprintf		2588444	0					
ANR	2588556	Identifier	fprintf		2588444	0					
ANR	2588557	ArgumentList	fp		2588444	1					
ANR	2588558	Argument	fp		2588444	0					
ANR	2588559	Identifier	fp		2588444	0					
ANR	2588560	Argument	"""(%d=%g)"""		2588444	1					
ANR	2588561	PrimaryExpression	"""(%d=%g)"""		2588444	0					
ANR	2588562	Argument	sec -> key		2588444	2					
ANR	2588563	PtrMemberAccess	sec -> key		2588444	0					
ANR	2588564	Identifier	sec		2588444	0					
ANR	2588565	Identifier	key		2588444	1					
ANR	2588566	Argument	sec -> value		2588444	3					
ANR	2588567	PtrMemberAccess	sec -> value		2588444	0					
ANR	2588568	Identifier	sec		2588444	0					
ANR	2588569	Identifier	value		2588444	1					
ANR	2588570	ExpressionStatement	"putc ( ':' , fp )"	491:2:12844:12859	2588444	2	True				
ANR	2588571	CallExpression	"putc ( ':' , fp )"		2588444	0					
ANR	2588572	Callee	putc		2588444	0					
ANR	2588573	Identifier	putc		2588444	0					
ANR	2588574	ArgumentList	':'		2588444	1					
ANR	2588575	Argument	':'		2588444	0					
ANR	2588576	PrimaryExpression	':'		2588444	0					
ANR	2588577	Argument	fp		2588444	1					
ANR	2588578	Identifier	fp		2588444	0					
ANR	2588579	ForStatement	for ( sec = nodes [ i ] . RS ; sec != NULL ; sec = sec -> next )		2588444	3					
ANR	2588580	ForInit	sec = nodes [ i ] . RS ;	492:7:12868:12885	2588444	0	True				
ANR	2588581	AssignmentExpression	sec = nodes [ i ] . RS		2588444	0		=			
ANR	2588582	Identifier	sec		2588444	0					
ANR	2588583	MemberAccess	nodes [ i ] . RS		2588444	1					
ANR	2588584	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588585	Identifier	nodes		2588444	0					
ANR	2588586	Identifier	i		2588444	1					
ANR	2588587	Identifier	RS		2588444	1					
ANR	2588588	Condition	sec != NULL	492:26:12887:12897	2588444	1	True				
ANR	2588589	EqualityExpression	sec != NULL		2588444	0		!=			
ANR	2588590	Identifier	sec		2588444	0					
ANR	2588591	Identifier	NULL		2588444	1					
ANR	2588592	AssignmentExpression	sec = sec -> next	492:39:12900:12914	2588444	2	True	=			
ANR	2588593	Identifier	sec		2588444	0					
ANR	2588594	PtrMemberAccess	sec -> next		2588444	1					
ANR	2588595	Identifier	sec		2588444	0					
ANR	2588596	Identifier	next		2588444	1					
ANR	2588597	CompoundStatement		16:57:437:437	2588444	3					
ANR	2588598	ExpressionStatement	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"	493:3:12923:12969	2588444	0	True				
ANR	2588599	CallExpression	"fprintf ( fp , ""(%d=%g)"" , sec -> key , sec -> value )"		2588444	0					
ANR	2588600	Callee	fprintf		2588444	0					
ANR	2588601	Identifier	fprintf		2588444	0					
ANR	2588602	ArgumentList	fp		2588444	1					
ANR	2588603	Argument	fp		2588444	0					
ANR	2588604	Identifier	fp		2588444	0					
ANR	2588605	Argument	"""(%d=%g)"""		2588444	1					
ANR	2588606	PrimaryExpression	"""(%d=%g)"""		2588444	0					
ANR	2588607	Argument	sec -> key		2588444	2					
ANR	2588608	PtrMemberAccess	sec -> key		2588444	0					
ANR	2588609	Identifier	sec		2588444	0					
ANR	2588610	Identifier	key		2588444	1					
ANR	2588611	Argument	sec -> value		2588444	3					
ANR	2588612	PtrMemberAccess	sec -> value		2588444	0					
ANR	2588613	Identifier	sec		2588444	0					
ANR	2588614	Identifier	value		2588444	1					
ANR	2588615	ExpressionStatement	"fprintf ( fp , ""|%d,%d]  "" , nodes [ i ] . LT , nodes [ i ] . RT )"	495:2:12977:13029	2588444	4	True				
ANR	2588616	CallExpression	"fprintf ( fp , ""|%d,%d]  "" , nodes [ i ] . LT , nodes [ i ] . RT )"		2588444	0					
ANR	2588617	Callee	fprintf		2588444	0					
ANR	2588618	Identifier	fprintf		2588444	0					
ANR	2588619	ArgumentList	fp		2588444	1					
ANR	2588620	Argument	fp		2588444	0					
ANR	2588621	Identifier	fp		2588444	0					
ANR	2588622	Argument	"""|%d,%d]  """		2588444	1					
ANR	2588623	PrimaryExpression	"""|%d,%d]  """		2588444	0					
ANR	2588624	Argument	nodes [ i ] . LT		2588444	2					
ANR	2588625	MemberAccess	nodes [ i ] . LT		2588444	0					
ANR	2588626	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588627	Identifier	nodes		2588444	0					
ANR	2588628	Identifier	i		2588444	1					
ANR	2588629	Identifier	LT		2588444	1					
ANR	2588630	Argument	nodes [ i ] . RT		2588444	3					
ANR	2588631	MemberAccess	nodes [ i ] . RT		2588444	0					
ANR	2588632	ArrayIndexing	nodes [ i ]		2588444	0					
ANR	2588633	Identifier	nodes		2588444	0					
ANR	2588634	Identifier	i		2588444	1					
ANR	2588635	Identifier	RT		2588444	1					
ANR	2588636	IfStatement	if ( j == k )		2588444	5					
ANR	2588637	Condition	j == k	497:6:13038:13043	2588444	0	True				
ANR	2588638	EqualityExpression	j == k		2588444	0		==			
ANR	2588639	Identifier	j		2588444	0					
ANR	2588640	Identifier	k		2588444	1					
ANR	2588641	CompoundStatement		21:15:566:566	2588444	1					
ANR	2588642	ExpressionStatement	"putc ( '\\n' , fp )"	498:3:13052:13068	2588444	0	True				
ANR	2588643	CallExpression	"putc ( '\\n' , fp )"		2588444	0					
ANR	2588644	Callee	putc		2588444	0					
ANR	2588645	Identifier	putc		2588444	0					
ANR	2588646	ArgumentList	'\\n'		2588444	1					
ANR	2588647	Argument	'\\n'		2588444	0					
ANR	2588648	PrimaryExpression	'\\n'		2588444	0					
ANR	2588649	Argument	fp		2588444	1					
ANR	2588650	Identifier	fp		2588444	0					
ANR	2588651	ExpressionStatement	k = k << 1	499:3:13073:13083	2588444	1	True				
ANR	2588652	AssignmentExpression	k = k << 1		2588444	0		=			
ANR	2588653	Identifier	k		2588444	0					
ANR	2588654	ShiftExpression	k << 1		2588444	1		<<			
ANR	2588655	Identifier	k		2588444	0					
ANR	2588656	PrimaryExpression	1		2588444	1					
ANR	2588657	ExpressionStatement	j = 1	500:3:13088:13093	2588444	2	True				
ANR	2588658	AssignmentExpression	j = 1		2588444	0		=			
ANR	2588659	Identifier	j		2588444	0					
ANR	2588660	PrimaryExpression	1		2588444	1					
ANR	2588661	ElseStatement	else		2588444	0					
ANR	2588662	CompoundStatement		25:9:623:623	2588444	0					
ANR	2588663	ExpressionStatement	j ++	502:3:13109:13112	2588444	0	True				
ANR	2588664	PostIncDecOperationExpression	j ++		2588444	0					
ANR	2588665	Identifier	j		2588444	0					
ANR	2588666	IncDec	++		2588444	1					
ANR	2588667	ExpressionStatement	"putc ( '\\n' , fp )"	505:1:13122:13138	2588444	4	True				
ANR	2588668	CallExpression	"putc ( '\\n' , fp )"		2588444	0					
ANR	2588669	Callee	putc		2588444	0					
ANR	2588670	Identifier	putc		2588444	0					
ANR	2588671	ArgumentList	'\\n'		2588444	1					
ANR	2588672	Argument	'\\n'		2588444	0					
ANR	2588673	PrimaryExpression	'\\n'		2588444	0					
ANR	2588674	Argument	fp		2588444	1					
ANR	2588675	Identifier	fp		2588444	0					
ANR	2588676	ReturnType	void		2588444	1					
ANR	2588677	Identifier	IntervalTree :: Display		2588444	2					
ANR	2588678	ParameterList	FILE * fp		2588444	3					
ANR	2588679	Parameter	FILE * fp	476:9:12469:12476	2588444	0	True				
ANR	2588680	ParameterType	FILE *		2588444	0					
ANR	2588681	Identifier	fp		2588444	1					
ANR	2588682	CFGEntryNode	ENTRY		2588444		True				
ANR	2588683	CFGExitNode	EXIT		2588444		True				
ANR	2588684	Symbol	sec -> key		2588444						
ANR	2588685	Symbol	NULL		2588444						
ANR	2588686	Symbol	rootT		2588444						
ANR	2588687	Symbol	i		2588444						
ANR	2588688	Symbol	fp		2588444						
ANR	2588689	Symbol	j		2588444						
ANR	2588690	Symbol	sec -> value		2588444						
ANR	2588691	Symbol	k		2588444						
ANR	2588692	Symbol	sec		2588444						
ANR	2588693	Symbol	nodes		2588444						
ANR	2588694	Symbol	* i		2588444						
ANR	2588695	Symbol	size		2588444						
ANR	2588696	Symbol	nodes [ i ] . active		2588444						
ANR	2588697	Symbol	nodes [ i ] . LT		2588444						
ANR	2588698	Symbol	nodes [ i ] . LS		2588444						
ANR	2588699	Symbol	* nodes		2588444						
ANR	2588700	Symbol	* sec		2588444						
ANR	2588701	Symbol	nodes [ i ] . RT		2588444						
ANR	2588702	Symbol	nodes [ i ] . nodeValue		2588444						
ANR	2588703	Symbol	sec -> next		2588444						
ANR	2588704	Symbol	nodes [ i ] . RS		2588444						
