command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5502082	File	data/converged/CVE-2011-4930_htcondor/unit_test_utils.cpp								
ANR	5502083	Function	utest_sock_eq_octet	28:0:968:1270							
ANR	5502084	FunctionDef	"utest_sock_eq_octet (struct in_addr * address , unsigned char oct1 , unsigned char oct2 , unsigned char oct3 , unsigned char oct4)"		5502083	0					
ANR	5502085	CompoundStatement		32:28:1129:1270	5502083	0					
ANR	5502086	IdentifierDeclStatement	unsigned char * byte = ( unsigned char * ) address ;	33:1:1132:1178	5502083	0	True				
ANR	5502087	IdentifierDecl	* byte = ( unsigned char * ) address		5502083	0					
ANR	5502088	IdentifierDeclType	unsigned char *		5502083	0					
ANR	5502089	Identifier	byte		5502083	1					
ANR	5502090	AssignmentExpression	* byte = ( unsigned char * ) address		5502083	2		=			
ANR	5502091	Identifier	byte		5502083	0					
ANR	5502092	CastExpression	( unsigned char * ) address		5502083	1					
ANR	5502093	CastTarget	unsigned char *		5502083	0					
ANR	5502094	Identifier	address		5502083	1					
ANR	5502095	ReturnStatement	return ( * byte == oct1 && * ( byte + 1 ) == oct2 && * ( byte + 2 ) == oct3 && * ( byte + 3 ) == oct4 ) ;	34:1:1181:1268	5502083	1	True				
ANR	5502096	AndExpression	* byte == oct1 && * ( byte + 1 ) == oct2 && * ( byte + 2 ) == oct3 && * ( byte + 3 ) == oct4		5502083	0		&&			
ANR	5502097	EqualityExpression	* byte == oct1		5502083	0		==			
ANR	5502098	UnaryOperationExpression	* byte		5502083	0					
ANR	5502099	UnaryOperator	*		5502083	0					
ANR	5502100	Identifier	byte		5502083	1					
ANR	5502101	Identifier	oct1		5502083	1					
ANR	5502102	AndExpression	* ( byte + 1 ) == oct2 && * ( byte + 2 ) == oct3 && * ( byte + 3 ) == oct4		5502083	1		&&			
ANR	5502103	EqualityExpression	* ( byte + 1 ) == oct2		5502083	0		==			
ANR	5502104	UnaryOperationExpression	* ( byte + 1 )		5502083	0					
ANR	5502105	UnaryOperator	*		5502083	0					
ANR	5502106	AdditiveExpression	byte + 1		5502083	1		+			
ANR	5502107	Identifier	byte		5502083	0					
ANR	5502108	PrimaryExpression	1		5502083	1					
ANR	5502109	Identifier	oct2		5502083	1					
ANR	5502110	AndExpression	* ( byte + 2 ) == oct3 && * ( byte + 3 ) == oct4		5502083	1		&&			
ANR	5502111	EqualityExpression	* ( byte + 2 ) == oct3		5502083	0		==			
ANR	5502112	UnaryOperationExpression	* ( byte + 2 )		5502083	0					
ANR	5502113	UnaryOperator	*		5502083	0					
ANR	5502114	AdditiveExpression	byte + 2		5502083	1		+			
ANR	5502115	Identifier	byte		5502083	0					
ANR	5502116	PrimaryExpression	2		5502083	1					
ANR	5502117	Identifier	oct3		5502083	1					
ANR	5502118	EqualityExpression	* ( byte + 3 ) == oct4		5502083	1		==			
ANR	5502119	UnaryOperationExpression	* ( byte + 3 )		5502083	0					
ANR	5502120	UnaryOperator	*		5502083	0					
ANR	5502121	AdditiveExpression	byte + 3		5502083	1		+			
ANR	5502122	Identifier	byte		5502083	0					
ANR	5502123	PrimaryExpression	3		5502083	1					
ANR	5502124	Identifier	oct4		5502083	1					
ANR	5502125	ReturnType	bool		5502083	1					
ANR	5502126	Identifier	utest_sock_eq_octet		5502083	2					
ANR	5502127	ParameterList	"struct in_addr * address , unsigned char oct1 , unsigned char oct2 , unsigned char oct3 , unsigned char oct4"		5502083	3					
ANR	5502128	Parameter	struct in_addr * address	28:27:995:1017	5502083	0	True				
ANR	5502129	ParameterType	struct in_addr *		5502083	0					
ANR	5502130	Identifier	address		5502083	1					
ANR	5502131	Parameter	unsigned char oct1	29:7:1027:1044	5502083	1	True				
ANR	5502132	ParameterType	unsigned char		5502083	0					
ANR	5502133	Identifier	oct1		5502083	1					
ANR	5502134	Parameter	unsigned char oct2	30:7:1054:1071	5502083	2	True				
ANR	5502135	ParameterType	unsigned char		5502083	0					
ANR	5502136	Identifier	oct2		5502083	1					
ANR	5502137	Parameter	unsigned char oct3	31:7:1081:1098	5502083	3	True				
ANR	5502138	ParameterType	unsigned char		5502083	0					
ANR	5502139	Identifier	oct3		5502083	1					
ANR	5502140	Parameter	unsigned char oct4	32:7:1108:1125	5502083	4	True				
ANR	5502141	ParameterType	unsigned char		5502083	0					
ANR	5502142	Identifier	oct4		5502083	1					
ANR	5502143	CFGEntryNode	ENTRY		5502083		True				
ANR	5502144	CFGExitNode	EXIT		5502083		True				
ANR	5502145	Symbol	oct3		5502083						
ANR	5502146	Symbol	oct2		5502083						
ANR	5502147	Symbol	oct1		5502083						
ANR	5502148	Symbol	* byte		5502083						
ANR	5502149	Symbol	address		5502083						
ANR	5502150	Symbol	byte		5502083						
ANR	5502151	Symbol	oct4		5502083						
ANR	5502152	Symbol	* ( byte + 3 )		5502083						
ANR	5502153	Symbol	* ( byte + 2 )		5502083						
ANR	5502154	Symbol	* ( byte + 1 )		5502083						
ANR	5502155	Function	tfstr	38:0:1337:1410							
ANR	5502156	FunctionDef	tfstr (bool var)		5502155	0					
ANR	5502157	CompoundStatement		38:30:1367:1410	5502155	0					
ANR	5502158	IfStatement	if ( var )		5502155	0					
ANR	5502159	Condition	var	39:4:1373:1375	5502155	0	True				
ANR	5502160	Identifier	var		5502155	0					
ANR	5502161	ReturnStatement	"return ""TRUE"" ;"	39:9:1378:1391	5502155	1	True				
ANR	5502162	PrimaryExpression	"""TRUE"""		5502155	0					
ANR	5502163	ReturnStatement	"return ""FALSE"" ;"	40:1:1394:1408	5502155	1	True				
ANR	5502164	PrimaryExpression	"""FALSE"""		5502155	0					
ANR	5502165	ReturnType	const char *		5502155	1					
ANR	5502166	Identifier	tfstr		5502155	2					
ANR	5502167	ParameterList	bool var		5502155	3					
ANR	5502168	Parameter	bool var	38:19:1356:1363	5502155	0	True				
ANR	5502169	ParameterType	bool		5502155	0					
ANR	5502170	Identifier	var		5502155	1					
ANR	5502171	CFGEntryNode	ENTRY		5502155		True				
ANR	5502172	CFGExitNode	EXIT		5502155		True				
ANR	5502173	Symbol	var		5502155						
ANR	5502174	Function	tfstr	44:0:1470:1550							
ANR	5502175	FunctionDef	tfstr (int var)		5502174	0					
ANR	5502176	CompoundStatement		44:29:1499:1550	5502174	0					
ANR	5502177	IfStatement	if ( var == TRUE )		5502174	0					
ANR	5502178	Condition	var == TRUE	45:4:1505:1515	5502174	0	True				
ANR	5502179	EqualityExpression	var == TRUE		5502174	0		==			
ANR	5502180	Identifier	var		5502174	0					
ANR	5502181	Identifier	TRUE		5502174	1					
ANR	5502182	ReturnStatement	"return ""TRUE"" ;"	45:17:1518:1531	5502174	1	True				
ANR	5502183	PrimaryExpression	"""TRUE"""		5502174	0					
ANR	5502184	ReturnStatement	"return ""FALSE"" ;"	46:1:1534:1548	5502174	1	True				
ANR	5502185	PrimaryExpression	"""FALSE"""		5502174	0					
ANR	5502186	ReturnType	const char *		5502174	1					
ANR	5502187	Identifier	tfstr		5502174	2					
ANR	5502188	ParameterList	int var		5502174	3					
ANR	5502189	Parameter	int var	44:19:1489:1495	5502174	0	True				
ANR	5502190	ParameterType	int		5502174	0					
ANR	5502191	Identifier	var		5502174	1					
ANR	5502192	CFGEntryNode	ENTRY		5502174		True				
ANR	5502193	CFGExitNode	EXIT		5502174		True				
ANR	5502194	Symbol	var		5502174						
ANR	5502195	Symbol	TRUE		5502174						
ANR	5502196	Function	tfnze	50:0:1611:1689							
ANR	5502197	FunctionDef	tfnze (int var)		5502196	0					
ANR	5502198	CompoundStatement		50:29:1640:1689	5502196	0					
ANR	5502199	IfStatement	if ( var != - 1 )		5502196	0					
ANR	5502200	Condition	var != - 1	51:4:1646:1654	5502196	0	True				
ANR	5502201	EqualityExpression	var != - 1		5502196	0		!=			
ANR	5502202	Identifier	var		5502196	0					
ANR	5502203	UnaryOperationExpression	- 1		5502196	1					
ANR	5502204	UnaryOperator	-		5502196	0					
ANR	5502205	PrimaryExpression	1		5502196	1					
ANR	5502206	ReturnStatement	"return ""TRUE"" ;"	51:15:1657:1670	5502196	1	True				
ANR	5502207	PrimaryExpression	"""TRUE"""		5502196	0					
ANR	5502208	ReturnStatement	"return ""FALSE"" ;"	52:1:1673:1687	5502196	1	True				
ANR	5502209	PrimaryExpression	"""FALSE"""		5502196	0					
ANR	5502210	ReturnType	const char *		5502196	1					
ANR	5502211	Identifier	tfnze		5502196	2					
ANR	5502212	ParameterList	int var		5502196	3					
ANR	5502213	Parameter	int var	50:19:1630:1636	5502196	0	True				
ANR	5502214	ParameterType	int		5502196	0					
ANR	5502215	Identifier	var		5502196	1					
ANR	5502216	CFGEntryNode	ENTRY		5502196		True				
ANR	5502217	CFGExitNode	EXIT		5502196		True				
ANR	5502218	Symbol	var		5502196						
ANR	5502219	Function	vsprintfHelper	55:0:1692:1886							
ANR	5502220	FunctionDef	"vsprintfHelper (MyString * str , const char * format)"		5502219	0					
ANR	5502221	CompoundStatement		55:60:1752:1886	5502219	0					
ANR	5502222	IdentifierDeclStatement	va_list args ;	56:1:1755:1767	5502219	0	True				
ANR	5502223	IdentifierDecl	args		5502219	0					
ANR	5502224	IdentifierDeclType	va_list		5502219	0					
ANR	5502225	Identifier	args		5502219	1					
ANR	5502226	IdentifierDeclStatement	bool toReturn ;	57:1:1770:1783	5502219	1	True				
ANR	5502227	IdentifierDecl	toReturn		5502219	0					
ANR	5502228	IdentifierDeclType	bool		5502219	0					
ANR	5502229	Identifier	toReturn		5502219	1					
ANR	5502230	ExpressionStatement	"va_start ( args , format )"	59:1:1787:1809	5502219	2	True				
ANR	5502231	CallExpression	"va_start ( args , format )"		5502219	0					
ANR	5502232	Callee	va_start		5502219	0					
ANR	5502233	Identifier	va_start		5502219	0					
ANR	5502234	ArgumentList	args		5502219	1					
ANR	5502235	Argument	args		5502219	0					
ANR	5502236	Identifier	args		5502219	0					
ANR	5502237	Argument	format		5502219	1					
ANR	5502238	Identifier	format		5502219	0					
ANR	5502239	ExpressionStatement	"toReturn = str -> vsprintf ( format , args )"	60:1:1812:1850	5502219	3	True				
ANR	5502240	AssignmentExpression	"toReturn = str -> vsprintf ( format , args )"		5502219	0		=			
ANR	5502241	Identifier	toReturn		5502219	0					
ANR	5502242	CallExpression	"str -> vsprintf ( format , args )"		5502219	1					
ANR	5502243	Callee	str -> vsprintf		5502219	0					
ANR	5502244	PtrMemberAccess	str -> vsprintf		5502219	0					
ANR	5502245	Identifier	str		5502219	0					
ANR	5502246	Identifier	vsprintf		5502219	1					
ANR	5502247	ArgumentList	format		5502219	1					
ANR	5502248	Argument	format		5502219	0					
ANR	5502249	Identifier	format		5502219	0					
ANR	5502250	Argument	args		5502219	1					
ANR	5502251	Identifier	args		5502219	0					
ANR	5502252	ExpressionStatement	va_end ( args )	61:1:1853:1865	5502219	4	True				
ANR	5502253	CallExpression	va_end ( args )		5502219	0					
ANR	5502254	Callee	va_end		5502219	0					
ANR	5502255	Identifier	va_end		5502219	0					
ANR	5502256	ArgumentList	args		5502219	1					
ANR	5502257	Argument	args		5502219	0					
ANR	5502258	Identifier	args		5502219	0					
ANR	5502259	ReturnStatement	return toReturn ;	63:1:1869:1884	5502219	5	True				
ANR	5502260	Identifier	toReturn		5502219	0					
ANR	5502261	ReturnType	bool		5502219	1					
ANR	5502262	Identifier	vsprintfHelper		5502219	2					
ANR	5502263	ParameterList	"MyString * str , const char * format"		5502219	3					
ANR	5502264	Parameter	MyString * str	55:20:1712:1724	5502219	0	True				
ANR	5502265	ParameterType	MyString *		5502219	0					
ANR	5502266	Identifier	str		5502219	1					
ANR	5502267	Parameter	const char * format	55:35:1727:1744	5502219	1	True				
ANR	5502268	ParameterType	const char *		5502219	0					
ANR	5502269	Identifier	format		5502219	1					
ANR	5502270	CFGEntryNode	ENTRY		5502219		True				
ANR	5502271	CFGExitNode	EXIT		5502219		True				
ANR	5502272	Symbol	str		5502219						
ANR	5502273	Symbol	args		5502219						
ANR	5502274	Symbol	str -> vsprintf		5502219						
ANR	5502275	Symbol	toReturn		5502219						
ANR	5502276	Symbol	format		5502219						
ANR	5502277	Symbol	* str		5502219						
ANR	5502278	Function	vsprintf_catHelper	66:0:1889:2091							
ANR	5502279	FunctionDef	"vsprintf_catHelper (MyString * str , const char * format)"		5502278	0					
ANR	5502280	CompoundStatement		66:64:1953:2091	5502278	0					
ANR	5502281	IdentifierDeclStatement	va_list args ;	67:1:1956:1968	5502278	0	True				
ANR	5502282	IdentifierDecl	args		5502278	0					
ANR	5502283	IdentifierDeclType	va_list		5502278	0					
ANR	5502284	Identifier	args		5502278	1					
ANR	5502285	IdentifierDeclStatement	bool toReturn ;	68:1:1971:1984	5502278	1	True				
ANR	5502286	IdentifierDecl	toReturn		5502278	0					
ANR	5502287	IdentifierDeclType	bool		5502278	0					
ANR	5502288	Identifier	toReturn		5502278	1					
ANR	5502289	ExpressionStatement	"va_start ( args , format )"	70:1:1988:2010	5502278	2	True				
ANR	5502290	CallExpression	"va_start ( args , format )"		5502278	0					
ANR	5502291	Callee	va_start		5502278	0					
ANR	5502292	Identifier	va_start		5502278	0					
ANR	5502293	ArgumentList	args		5502278	1					
ANR	5502294	Argument	args		5502278	0					
ANR	5502295	Identifier	args		5502278	0					
ANR	5502296	Argument	format		5502278	1					
ANR	5502297	Identifier	format		5502278	0					
ANR	5502298	ExpressionStatement	"toReturn = str -> vsprintf_cat ( format , args )"	71:1:2013:2055	5502278	3	True				
ANR	5502299	AssignmentExpression	"toReturn = str -> vsprintf_cat ( format , args )"		5502278	0		=			
ANR	5502300	Identifier	toReturn		5502278	0					
ANR	5502301	CallExpression	"str -> vsprintf_cat ( format , args )"		5502278	1					
ANR	5502302	Callee	str -> vsprintf_cat		5502278	0					
ANR	5502303	PtrMemberAccess	str -> vsprintf_cat		5502278	0					
ANR	5502304	Identifier	str		5502278	0					
ANR	5502305	Identifier	vsprintf_cat		5502278	1					
ANR	5502306	ArgumentList	format		5502278	1					
ANR	5502307	Argument	format		5502278	0					
ANR	5502308	Identifier	format		5502278	0					
ANR	5502309	Argument	args		5502278	1					
ANR	5502310	Identifier	args		5502278	0					
ANR	5502311	ExpressionStatement	va_end ( args )	72:1:2058:2070	5502278	4	True				
ANR	5502312	CallExpression	va_end ( args )		5502278	0					
ANR	5502313	Callee	va_end		5502278	0					
ANR	5502314	Identifier	va_end		5502278	0					
ANR	5502315	ArgumentList	args		5502278	1					
ANR	5502316	Argument	args		5502278	0					
ANR	5502317	Identifier	args		5502278	0					
ANR	5502318	ReturnStatement	return toReturn ;	74:1:2074:2089	5502278	5	True				
ANR	5502319	Identifier	toReturn		5502278	0					
ANR	5502320	ReturnType	bool		5502278	1					
ANR	5502321	Identifier	vsprintf_catHelper		5502278	2					
ANR	5502322	ParameterList	"MyString * str , const char * format"		5502278	3					
ANR	5502323	Parameter	MyString * str	66:24:1913:1925	5502278	0	True				
ANR	5502324	ParameterType	MyString *		5502278	0					
ANR	5502325	Identifier	str		5502278	1					
ANR	5502326	Parameter	const char * format	66:39:1928:1945	5502278	1	True				
ANR	5502327	ParameterType	const char *		5502278	0					
ANR	5502328	Identifier	format		5502278	1					
ANR	5502329	CFGEntryNode	ENTRY		5502278		True				
ANR	5502330	CFGExitNode	EXIT		5502278		True				
ANR	5502331	Symbol	str		5502278						
ANR	5502332	Symbol	args		5502278						
ANR	5502333	Symbol	str -> vsprintf_cat		5502278						
ANR	5502334	Symbol	toReturn		5502278						
ANR	5502335	Symbol	format		5502278						
ANR	5502336	Symbol	* str		5502278						
ANR	5502337	Function	nicePrint	78:0:2156:2233							
ANR	5502338	FunctionDef	nicePrint (const char * str)		5502337	0					
ANR	5502339	CompoundStatement		78:39:2195:2233	5502337	0					
ANR	5502340	IfStatement	if ( ! str )		5502337	0					
ANR	5502341	Condition	! str	79:4:2201:2204	5502337	0	True				
ANR	5502342	UnaryOperationExpression	! str		5502337	0					
ANR	5502343	UnaryOperator	!		5502337	0					
ANR	5502344	Identifier	str		5502337	1					
ANR	5502345	ReturnStatement	"return """" ;"	80:2:2209:2218	5502337	1	True				
ANR	5502346	PrimaryExpression	""""""		5502337	0					
ANR	5502347	ReturnStatement	return str ;	81:1:2221:2231	5502337	1	True				
ANR	5502348	Identifier	str		5502337	0					
ANR	5502349	ReturnType	const char *		5502337	1					
ANR	5502350	Identifier	nicePrint		5502337	2					
ANR	5502351	ParameterList	const char * str		5502337	3					
ANR	5502352	Parameter	const char * str	78:22:2178:2192	5502337	0	True				
ANR	5502353	ParameterType	const char *		5502337	0					
ANR	5502354	Identifier	str		5502337	1					
ANR	5502355	CFGEntryNode	ENTRY		5502337		True				
ANR	5502356	CFGExitNode	EXIT		5502337		True				
ANR	5502357	Symbol	str		5502337						
ANR	5502358	Function	niceStrCmp	85:0:2295:2534							
ANR	5502359	FunctionDef	"niceStrCmp (const char * str1 , const char * str2)"		5502358	0					
ANR	5502360	CompoundStatement		85:51:2346:2534	5502358	0					
ANR	5502361	IfStatement	if ( ! str1 )		5502358	0					
ANR	5502362	Condition	! str1	86:4:2352:2356	5502358	0	True				
ANR	5502363	UnaryOperationExpression	! str1		5502358	0					
ANR	5502364	UnaryOperator	!		5502358	0					
ANR	5502365	Identifier	str1		5502358	1					
ANR	5502366	CompoundStatement		2:11:12:12	5502358	1					
ANR	5502367	IfStatement	if ( ! str2 )		5502358	0					
ANR	5502368	Condition	! str2	87:5:2366:2370	5502358	0	True				
ANR	5502369	UnaryOperationExpression	! str2		5502358	0					
ANR	5502370	UnaryOperator	!		5502358	0					
ANR	5502371	Identifier	str2		5502358	1					
ANR	5502372	CompoundStatement		3:12:26:26	5502358	1					
ANR	5502373	ReturnStatement	return 0 ;	88:3:2378:2386	5502358	0	True				
ANR	5502374	PrimaryExpression	0		5502358	0					
ANR	5502375	ElseStatement	else		5502358	0					
ANR	5502376	CompoundStatement		5:9:62:62	5502358	0					
ANR	5502377	ReturnStatement	"return strcmp ( str2 , """" ) ;"	90:3:2414:2437	5502358	0	True				
ANR	5502378	CallExpression	"strcmp ( str2 , """" )"		5502358	0					
ANR	5502379	Callee	strcmp		5502358	0					
ANR	5502380	Identifier	strcmp		5502358	0					
ANR	5502381	ArgumentList	str2		5502358	1					
ANR	5502382	Argument	str2		5502358	0					
ANR	5502383	Identifier	str2		5502358	0					
ANR	5502384	Argument	""""""		5502358	1					
ANR	5502385	PrimaryExpression	""""""		5502358	0					
ANR	5502386	IfStatement	if ( ! str2 )		5502358	1					
ANR	5502387	Condition	! str2	93:4:2461:2465	5502358	0	True				
ANR	5502388	UnaryOperationExpression	! str2		5502358	0					
ANR	5502389	UnaryOperator	!		5502358	0					
ANR	5502390	Identifier	str2		5502358	1					
ANR	5502391	ReturnStatement	"return strcmp ( str1 , """" ) ;"	94:2:2470:2493	5502358	1	True				
ANR	5502392	CallExpression	"strcmp ( str1 , """" )"		5502358	0					
ANR	5502393	Callee	strcmp		5502358	0					
ANR	5502394	Identifier	strcmp		5502358	0					
ANR	5502395	ArgumentList	str1		5502358	1					
ANR	5502396	Argument	str1		5502358	0					
ANR	5502397	Identifier	str1		5502358	0					
ANR	5502398	Argument	""""""		5502358	1					
ANR	5502399	PrimaryExpression	""""""		5502358	0					
ANR	5502400	ReturnStatement	"return strcmp ( str1 , str2 ) ;"	95:1:2507:2532	5502358	2	True				
ANR	5502401	CallExpression	"strcmp ( str1 , str2 )"		5502358	0					
ANR	5502402	Callee	strcmp		5502358	0					
ANR	5502403	Identifier	strcmp		5502358	0					
ANR	5502404	ArgumentList	str1		5502358	1					
ANR	5502405	Argument	str1		5502358	0					
ANR	5502406	Identifier	str1		5502358	0					
ANR	5502407	Argument	str2		5502358	1					
ANR	5502408	Identifier	str2		5502358	0					
ANR	5502409	ReturnType	int		5502358	1					
ANR	5502410	Identifier	niceStrCmp		5502358	2					
ANR	5502411	ParameterList	"const char * str1 , const char * str2"		5502358	3					
ANR	5502412	Parameter	const char * str1	85:15:2310:2325	5502358	0	True				
ANR	5502413	ParameterType	const char *		5502358	0					
ANR	5502414	Identifier	str1		5502358	1					
ANR	5502415	Parameter	const char * str2	85:33:2328:2343	5502358	1	True				
ANR	5502416	ParameterType	const char *		5502358	0					
ANR	5502417	Identifier	str2		5502358	1					
ANR	5502418	CFGEntryNode	ENTRY		5502358		True				
ANR	5502419	CFGExitNode	EXIT		5502358		True				
ANR	5502420	Symbol	strcmp		5502358						
ANR	5502421	Symbol	str1		5502358						
ANR	5502422	Symbol	str2		5502358						
ANR	5502423	Function	string_compare_helper	101:0:2636:3012							
ANR	5502424	FunctionDef	"string_compare_helper (StringList * sl , int start)"		5502423	0					
ANR	5502425	CompoundStatement		101:56:2692:3012	5502423	0					
ANR	5502426	IfStatement	if ( start < 0 || start >= sl -> number ( ) )		5502423	0					
ANR	5502427	Condition	start < 0 || start >= sl -> number ( )	102:4:2698:2731	5502423	0	True				
ANR	5502428	OrExpression	start < 0 || start >= sl -> number ( )		5502423	0		||			
ANR	5502429	RelationalExpression	start < 0		5502423	0		<			
ANR	5502430	Identifier	start		5502423	0					
ANR	5502431	PrimaryExpression	0		5502423	1					
ANR	5502432	RelationalExpression	start >= sl -> number ( )		5502423	1		>=			
ANR	5502433	Identifier	start		5502423	0					
ANR	5502434	CallExpression	sl -> number ( )		5502423	1					
ANR	5502435	Callee	sl -> number		5502423	0					
ANR	5502436	PtrMemberAccess	sl -> number		5502423	0					
ANR	5502437	Identifier	sl		5502423	0					
ANR	5502438	Identifier	number		5502423	1					
ANR	5502439	ArgumentList			5502423	1					
ANR	5502440	ReturnStatement	return NULL ;	103:2:2736:2747	5502423	1	True				
ANR	5502441	Identifier	NULL		5502423	0					
ANR	5502442	IdentifierDeclStatement	"char * * list = ( char * * ) calloc ( sl -> number ( ) - start , sizeof ( char * ) ) ;"	105:1:2751:2817	5502423	1	True				
ANR	5502443	IdentifierDecl	"* * list = ( char * * ) calloc ( sl -> number ( ) - start , sizeof ( char * ) )"		5502423	0					
ANR	5502444	IdentifierDeclType	char * *		5502423	0					
ANR	5502445	Identifier	list		5502423	1					
ANR	5502446	AssignmentExpression	"* * list = ( char * * ) calloc ( sl -> number ( ) - start , sizeof ( char * ) )"		5502423	2		=			
ANR	5502447	Identifier	list		5502423	0					
ANR	5502448	CastExpression	"( char * * ) calloc ( sl -> number ( ) - start , sizeof ( char * ) )"		5502423	1					
ANR	5502449	CastTarget	char * *		5502423	0					
ANR	5502450	CallExpression	"calloc ( sl -> number ( ) - start , sizeof ( char * ) )"		5502423	1					
ANR	5502451	Callee	calloc		5502423	0					
ANR	5502452	Identifier	calloc		5502423	0					
ANR	5502453	ArgumentList	sl -> number ( ) - start		5502423	1					
ANR	5502454	Argument	sl -> number ( ) - start		5502423	0					
ANR	5502455	AdditiveExpression	sl -> number ( ) - start		5502423	0		-			
ANR	5502456	CallExpression	sl -> number ( )		5502423	0					
ANR	5502457	Callee	sl -> number		5502423	0					
ANR	5502458	PtrMemberAccess	sl -> number		5502423	0					
ANR	5502459	Identifier	sl		5502423	0					
ANR	5502460	Identifier	number		5502423	1					
ANR	5502461	ArgumentList			5502423	1					
ANR	5502462	Identifier	start		5502423	1					
ANR	5502463	Argument	sizeof ( char * )		5502423	1					
ANR	5502464	SizeofExpression	sizeof ( char * )		5502423	0					
ANR	5502465	Sizeof	sizeof		5502423	0					
ANR	5502466	SizeofOperand	char *		5502423	1					
ANR	5502467	IdentifierDeclStatement	char * str ;	106:1:2820:2829	5502423	2	True				
ANR	5502468	IdentifierDecl	* str		5502423	0					
ANR	5502469	IdentifierDeclType	char *		5502423	0					
ANR	5502470	Identifier	str		5502423	1					
ANR	5502471	IdentifierDeclStatement	int i ;	107:1:2832:2837	5502423	3	True				
ANR	5502472	IdentifierDecl	i		5502423	0					
ANR	5502473	IdentifierDeclType	int		5502423	0					
ANR	5502474	Identifier	i		5502423	1					
ANR	5502475	ForStatement	"for ( i = 0 , sl -> rewind ( ) ; i < start ; i ++ )"		5502423	4					
ANR	5502476	ForInit	"i = 0 , sl -> rewind ( ) ;"	109:5:2846:2865	5502423	0	True				
ANR	5502477	Expression	"i = 0 , sl -> rewind ( )"		5502423	0					
ANR	5502478	AssignmentExpression	i = 0		5502423	0		=			
ANR	5502479	Identifier	i		5502423	0					
ANR	5502480	PrimaryExpression	0		5502423	1					
ANR	5502481	CallExpression	sl -> rewind ( )		5502423	1					
ANR	5502482	Callee	sl -> rewind		5502423	0					
ANR	5502483	PtrMemberAccess	sl -> rewind		5502423	0					
ANR	5502484	Identifier	sl		5502423	0					
ANR	5502485	Identifier	rewind		5502423	1					
ANR	5502486	ArgumentList			5502423	1					
ANR	5502487	Condition	i < start	109:26:2867:2875	5502423	1	True				
ANR	5502488	RelationalExpression	i < start		5502423	0		<			
ANR	5502489	Identifier	i		5502423	0					
ANR	5502490	Identifier	start		5502423	1					
ANR	5502491	PostIncDecOperationExpression	i ++	109:37:2878:2880	5502423	2	True				
ANR	5502492	Identifier	i		5502423	0					
ANR	5502493	IncDec	++		5502423	1					
ANR	5502494	CompoundStatement		9:41:189:189	5502423	3					
ANR	5502495	ExpressionStatement	sl -> next ( )	110:2:2887:2897	5502423	0	True				
ANR	5502496	CallExpression	sl -> next ( )		5502423	0					
ANR	5502497	Callee	sl -> next		5502423	0					
ANR	5502498	PtrMemberAccess	sl -> next		5502423	0					
ANR	5502499	Identifier	sl		5502423	0					
ANR	5502500	Identifier	next		5502423	1					
ANR	5502501	ArgumentList			5502423	1					
ANR	5502502	ForStatement	for ( i = 0 ; i < sl -> number ( ) - start ; i ++ )		5502423	5					
ANR	5502503	ForInit	i = 0 ;	113:5:2910:2915	5502423	0	True				
ANR	5502504	AssignmentExpression	i = 0		5502423	0		=			
ANR	5502505	Identifier	i		5502423	0					
ANR	5502506	PrimaryExpression	0		5502423	1					
ANR	5502507	Condition	i < sl -> number ( ) - start	113:12:2917:2940	5502423	1	True				
ANR	5502508	RelationalExpression	i < sl -> number ( ) - start		5502423	0		<			
ANR	5502509	Identifier	i		5502423	0					
ANR	5502510	AdditiveExpression	sl -> number ( ) - start		5502423	1		-			
ANR	5502511	CallExpression	sl -> number ( )		5502423	0					
ANR	5502512	Callee	sl -> number		5502423	0					
ANR	5502513	PtrMemberAccess	sl -> number		5502423	0					
ANR	5502514	Identifier	sl		5502423	0					
ANR	5502515	Identifier	number		5502423	1					
ANR	5502516	ArgumentList			5502423	1					
ANR	5502517	Identifier	start		5502423	1					
ANR	5502518	PostIncDecOperationExpression	i ++	113:38:2943:2945	5502423	2	True				
ANR	5502519	Identifier	i		5502423	0					
ANR	5502520	IncDec	++		5502423	1					
ANR	5502521	CompoundStatement		13:43:255:255	5502423	3					
ANR	5502522	ExpressionStatement	str = sl -> next ( )	114:2:2952:2968	5502423	0	True				
ANR	5502523	AssignmentExpression	str = sl -> next ( )		5502423	0		=			
ANR	5502524	Identifier	str		5502423	0					
ANR	5502525	CallExpression	sl -> next ( )		5502423	1					
ANR	5502526	Callee	sl -> next		5502423	0					
ANR	5502527	PtrMemberAccess	sl -> next		5502423	0					
ANR	5502528	Identifier	sl		5502423	0					
ANR	5502529	Identifier	next		5502423	1					
ANR	5502530	ArgumentList			5502423	1					
ANR	5502531	ExpressionStatement	list [ i ] = strdup ( str )	115:2:2972:2993	5502423	1	True				
ANR	5502532	AssignmentExpression	list [ i ] = strdup ( str )		5502423	0		=			
ANR	5502533	ArrayIndexing	list [ i ]		5502423	0					
ANR	5502534	Identifier	list		5502423	0					
ANR	5502535	Identifier	i		5502423	1					
ANR	5502536	CallExpression	strdup ( str )		5502423	1					
ANR	5502537	Callee	strdup		5502423	0					
ANR	5502538	Identifier	strdup		5502423	0					
ANR	5502539	ArgumentList	str		5502423	1					
ANR	5502540	Argument	str		5502423	0					
ANR	5502541	Identifier	str		5502423	0					
ANR	5502542	ReturnStatement	return list ;	117:1:2999:3010	5502423	6	True				
ANR	5502543	Identifier	list		5502423	0					
ANR	5502544	ReturnType	char * *		5502423	1					
ANR	5502545	Identifier	string_compare_helper		5502423	2					
ANR	5502546	ParameterList	"StringList * sl , int start"		5502423	3					
ANR	5502547	Parameter	StringList * sl	101:29:2665:2678	5502423	0	True				
ANR	5502548	ParameterType	StringList *		5502423	0					
ANR	5502549	Identifier	sl		5502423	1					
ANR	5502550	Parameter	int start	101:45:2681:2689	5502423	1	True				
ANR	5502551	ParameterType	int		5502423	0					
ANR	5502552	Identifier	start		5502423	1					
ANR	5502553	CFGEntryNode	ENTRY		5502423		True				
ANR	5502554	CFGExitNode	EXIT		5502423		True				
ANR	5502555	Symbol	NULL		5502423						
ANR	5502556	Symbol	sl -> next		5502423						
ANR	5502557	Symbol	start		5502423						
ANR	5502558	Symbol	i		5502423						
ANR	5502559	Symbol	calloc		5502423						
ANR	5502560	Symbol	list		5502423						
ANR	5502561	Symbol	str		5502423						
ANR	5502562	Symbol	* i		5502423						
ANR	5502563	Symbol	* list		5502423						
ANR	5502564	Symbol	sl -> number		5502423						
ANR	5502565	Symbol	sl		5502423						
ANR	5502566	Symbol	strdup		5502423						
ANR	5502567	Symbol	* sl		5502423						
ANR	5502568	Function	free_helper	121:0:3036:3161							
ANR	5502569	FunctionDef	"free_helper (char * * array , int num_strs)"		5502568	0					
ANR	5502570	CompoundStatement		121:45:3081:3161	5502568	0					
ANR	5502571	IdentifierDeclStatement	int i ;	122:1:3084:3089	5502568	0	True				
ANR	5502572	IdentifierDecl	i		5502568	0					
ANR	5502573	IdentifierDeclType	int		5502568	0					
ANR	5502574	Identifier	i		5502568	1					
ANR	5502575	ForStatement	for ( i = 0 ; i < num_strs ; i ++ )		5502568	1					
ANR	5502576	ForInit	i = 0 ;	123:5:3096:3101	5502568	0	True				
ANR	5502577	AssignmentExpression	i = 0		5502568	0		=			
ANR	5502578	Identifier	i		5502568	0					
ANR	5502579	PrimaryExpression	0		5502568	1					
ANR	5502580	Condition	i < num_strs	123:12:3103:3114	5502568	1	True				
ANR	5502581	RelationalExpression	i < num_strs		5502568	0		<			
ANR	5502582	Identifier	i		5502568	0					
ANR	5502583	Identifier	num_strs		5502568	1					
ANR	5502584	PostIncDecOperationExpression	i ++	123:26:3117:3119	5502568	2	True				
ANR	5502585	Identifier	i		5502568	0					
ANR	5502586	IncDec	++		5502568	1					
ANR	5502587	CompoundStatement		3:31:40:40	5502568	3					
ANR	5502588	ExpressionStatement	free ( array [ i ] )	124:2:3126:3140	5502568	0	True				
ANR	5502589	CallExpression	free ( array [ i ] )		5502568	0					
ANR	5502590	Callee	free		5502568	0					
ANR	5502591	Identifier	free		5502568	0					
ANR	5502592	ArgumentList	array [ i ]		5502568	1					
ANR	5502593	Argument	array [ i ]		5502568	0					
ANR	5502594	ArrayIndexing	array [ i ]		5502568	0					
ANR	5502595	Identifier	array		5502568	0					
ANR	5502596	Identifier	i		5502568	1					
ANR	5502597	ExpressionStatement	free ( array )	126:1:3148:3159	5502568	2	True				
ANR	5502598	CallExpression	free ( array )		5502568	0					
ANR	5502599	Callee	free		5502568	0					
ANR	5502600	Identifier	free		5502568	0					
ANR	5502601	ArgumentList	array		5502568	1					
ANR	5502602	Argument	array		5502568	0					
ANR	5502603	Identifier	array		5502568	0					
ANR	5502604	ReturnType	void		5502568	1					
ANR	5502605	Identifier	free_helper		5502568	2					
ANR	5502606	ParameterList	"char * * array , int num_strs"		5502568	3					
ANR	5502607	Parameter	char * * array	121:17:3053:3064	5502568	0	True				
ANR	5502608	ParameterType	char * *		5502568	0					
ANR	5502609	Identifier	array		5502568	1					
ANR	5502610	Parameter	int num_strs	121:31:3067:3078	5502568	1	True				
ANR	5502611	ParameterType	int		5502568	0					
ANR	5502612	Identifier	num_strs		5502568	1					
ANR	5502613	CFGEntryNode	ENTRY		5502568		True				
ANR	5502614	CFGExitNode	EXIT		5502568		True				
ANR	5502615	Symbol	num_strs		5502568						
ANR	5502616	Symbol	* i		5502568						
ANR	5502617	Symbol	array		5502568						
ANR	5502618	Symbol	i		5502568						
ANR	5502619	Symbol	* array		5502568						
ANR	5502620	Function	make_big_string	133:0:3340:3797							
ANR	5502621	FunctionDef	"make_big_string (int length , char * * string , char * * quoted_string)"		5502620	0					
ANR	5502622	CompoundStatement		137:0:3516:3797	5502620	0					
ANR	5502623	ExpressionStatement	* string = ( char * ) malloc ( length + 1 )	138:1:3519:3556	5502620	0	True				
ANR	5502624	AssignmentExpression	* string = ( char * ) malloc ( length + 1 )		5502620	0		=			
ANR	5502625	UnaryOperationExpression	* string		5502620	0					
ANR	5502626	UnaryOperator	*		5502620	0					
ANR	5502627	Identifier	string		5502620	1					
ANR	5502628	CastExpression	( char * ) malloc ( length + 1 )		5502620	1					
ANR	5502629	CastTarget	char *		5502620	0					
ANR	5502630	CallExpression	malloc ( length + 1 )		5502620	1					
ANR	5502631	Callee	malloc		5502620	0					
ANR	5502632	Identifier	malloc		5502620	0					
ANR	5502633	ArgumentList	length + 1		5502620	1					
ANR	5502634	Argument	length + 1		5502620	0					
ANR	5502635	AdditiveExpression	length + 1		5502620	0		+			
ANR	5502636	Identifier	length		5502620	0					
ANR	5502637	PrimaryExpression	1		5502620	1					
ANR	5502638	ForStatement	for ( int i = 0 ; i < length ; i ++ )		5502620	1					
ANR	5502639	ForInit	int i = 0 ;	140:6:3565:3574	5502620	0	True				
ANR	5502640	IdentifierDeclStatement	int i = 0 ;		5502620	0					
ANR	5502641	IdentifierDecl	i = 0		5502620	0					
ANR	5502642	IdentifierDeclType	int		5502620	0					
ANR	5502643	Identifier	i		5502620	1					
ANR	5502644	AssignmentExpression	i = 0		5502620	2		=			
ANR	5502645	Identifier	i		5502620	0					
ANR	5502646	PrimaryExpression	0		5502620	1					
ANR	5502647	Condition	i < length	140:17:3576:3585	5502620	1	True				
ANR	5502648	RelationalExpression	i < length		5502620	0		<			
ANR	5502649	Identifier	i		5502620	0					
ANR	5502650	Identifier	length		5502620	1					
ANR	5502651	PostIncDecOperationExpression	i ++	140:29:3588:3590	5502620	2	True				
ANR	5502652	Identifier	i		5502620	0					
ANR	5502653	IncDec	++		5502620	1					
ANR	5502654	CompoundStatement		4:34:76:76	5502620	3					
ANR	5502655	ExpressionStatement	( * string ) [ i ] = ( rand ( ) % 26 ) + 97	141:2:3597:3630	5502620	0	True				
ANR	5502656	AssignmentExpression	( * string ) [ i ] = ( rand ( ) % 26 ) + 97		5502620	0		=			
ANR	5502657	ArrayIndexing	( * string ) [ i ]		5502620	0					
ANR	5502658	UnaryOperationExpression	* string		5502620	0					
ANR	5502659	UnaryOperator	*		5502620	0					
ANR	5502660	Identifier	string		5502620	1					
ANR	5502661	Identifier	i		5502620	1					
ANR	5502662	AdditiveExpression	( rand ( ) % 26 ) + 97		5502620	1		+			
ANR	5502663	MultiplicativeExpression	rand ( ) % 26		5502620	0		%			
ANR	5502664	CallExpression	rand ( )		5502620	0					
ANR	5502665	Callee	rand		5502620	0					
ANR	5502666	Identifier	rand		5502620	0					
ANR	5502667	ArgumentList			5502620	1					
ANR	5502668	PrimaryExpression	26		5502620	1					
ANR	5502669	PrimaryExpression	97		5502620	1					
ANR	5502670	ExpressionStatement	( * string ) [ length ] = 0	143:1:3636:3657	5502620	2	True				
ANR	5502671	AssignmentExpression	( * string ) [ length ] = 0		5502620	0		=			
ANR	5502672	ArrayIndexing	( * string ) [ length ]		5502620	0					
ANR	5502673	UnaryOperationExpression	* string		5502620	0					
ANR	5502674	UnaryOperator	*		5502620	0					
ANR	5502675	Identifier	string		5502620	1					
ANR	5502676	Identifier	length		5502620	1					
ANR	5502677	PrimaryExpression	0		5502620	1					
ANR	5502678	IfStatement	if ( quoted_string != NULL )		5502620	3					
ANR	5502679	Condition	quoted_string != NULL	145:5:3665:3685	5502620	0	True				
ANR	5502680	EqualityExpression	quoted_string != NULL		5502620	0		!=			
ANR	5502681	Identifier	quoted_string		5502620	0					
ANR	5502682	Identifier	NULL		5502620	1					
ANR	5502683	CompoundStatement		9:28:171:171	5502620	1					
ANR	5502684	ExpressionStatement	* quoted_string = ( char * ) malloc ( length + 3 )	146:2:3692:3736	5502620	0	True				
ANR	5502685	AssignmentExpression	* quoted_string = ( char * ) malloc ( length + 3 )		5502620	0		=			
ANR	5502686	UnaryOperationExpression	* quoted_string		5502620	0					
ANR	5502687	UnaryOperator	*		5502620	0					
ANR	5502688	Identifier	quoted_string		5502620	1					
ANR	5502689	CastExpression	( char * ) malloc ( length + 3 )		5502620	1					
ANR	5502690	CastTarget	char *		5502620	0					
ANR	5502691	CallExpression	malloc ( length + 3 )		5502620	1					
ANR	5502692	Callee	malloc		5502620	0					
ANR	5502693	Identifier	malloc		5502620	0					
ANR	5502694	ArgumentList	length + 3		5502620	1					
ANR	5502695	Argument	length + 3		5502620	0					
ANR	5502696	AdditiveExpression	length + 3		5502620	0		+			
ANR	5502697	Identifier	length		5502620	0					
ANR	5502698	PrimaryExpression	3		5502620	1					
ANR	5502699	ExpressionStatement	"sprintf ( * quoted_string , ""\\""%s\\"""" , * string )"	147:2:3740:3782	5502620	1	True				
ANR	5502700	CallExpression	"sprintf ( * quoted_string , ""\\""%s\\"""" , * string )"		5502620	0					
ANR	5502701	Callee	sprintf		5502620	0					
ANR	5502702	Identifier	sprintf		5502620	0					
ANR	5502703	ArgumentList	* quoted_string		5502620	1					
ANR	5502704	Argument	* quoted_string		5502620	0					
ANR	5502705	UnaryOperationExpression	* quoted_string		5502620	0					
ANR	5502706	UnaryOperator	*		5502620	0					
ANR	5502707	Identifier	quoted_string		5502620	1					
ANR	5502708	Argument	"""\\""%s\\"""""		5502620	1					
ANR	5502709	PrimaryExpression	"""\\""%s\\"""""		5502620	0					
ANR	5502710	Argument	* string		5502620	2					
ANR	5502711	UnaryOperationExpression	* string		5502620	0					
ANR	5502712	UnaryOperator	*		5502620	0					
ANR	5502713	Identifier	string		5502620	1					
ANR	5502714	ReturnStatement	return ;	149:1:3789:3795	5502620	4	True				
ANR	5502715	ReturnType	void		5502620	1					
ANR	5502716	Identifier	make_big_string		5502620	2					
ANR	5502717	ParameterList	"int length , char * * string , char * * quoted_string"		5502620	3					
ANR	5502718	Parameter	int length	134:1:3363:3372	5502620	0	True				
ANR	5502719	ParameterType	int		5502620	0					
ANR	5502720	Identifier	length		5502620	1					
ANR	5502721	Parameter	char * * string	135:1:3412:3424	5502620	1	True				
ANR	5502722	ParameterType	char * *		5502620	0					
ANR	5502723	Identifier	string		5502620	1					
ANR	5502724	Parameter	char * * quoted_string	136:1:3465:3484	5502620	2	True				
ANR	5502725	ParameterType	char * *		5502620	0					
ANR	5502726	Identifier	quoted_string		5502620	1					
ANR	5502727	CFGEntryNode	ENTRY		5502620		True				
ANR	5502728	CFGExitNode	EXIT		5502620		True				
ANR	5502729	Symbol	rand		5502620						
ANR	5502730	Symbol	malloc		5502620						
ANR	5502731	Symbol	* i		5502620						
ANR	5502732	Symbol	NULL		5502620						
ANR	5502733	Symbol	string		5502620						
ANR	5502734	Symbol	* * string		5502620						
ANR	5502735	Symbol	length		5502620						
ANR	5502736	Symbol	* quoted_string		5502620						
ANR	5502737	Symbol	quoted_string		5502620						
ANR	5502738	Symbol	* string		5502620						
ANR	5502739	Symbol	i		5502620						
ANR	5502740	Symbol	* length		5502620						
ANR	5502741	Function	get_classad_from_file	153:0:3856:4522							
ANR	5502742	FunctionDef	get_classad_from_file ()		5502741	0					
ANR	5502743	CompoundStatement		153:48:3904:4522	5502741	0					
ANR	5502744	IdentifierDeclStatement	FILE * classad_file ;	155:1:3908:3926	5502741	0	True				
ANR	5502745	IdentifierDecl	* classad_file		5502741	0					
ANR	5502746	IdentifierDeclType	FILE *		5502741	0					
ANR	5502747	Identifier	classad_file		5502741	1					
ANR	5502748	IdentifierDeclStatement	ClassAd * classad_from_file ;	156:1:3929:3955	5502741	1	True				
ANR	5502749	IdentifierDecl	* classad_from_file		5502741	0					
ANR	5502750	IdentifierDeclType	ClassAd *		5502741	0					
ANR	5502751	Identifier	classad_from_file		5502741	1					
ANR	5502752	Statement	const	157:1:3958:3962	5502741	2	True				
ANR	5502753	Statement	char	157:7:3964:3967	5502741	3	True				
ANR	5502754	Statement	*	157:11:3968:3968	5502741	4	True				
ANR	5502755	Statement	classad_string	157:13:3970:3983	5502741	5	True				
ANR	5502756	Statement	=	157:28:3985:3985	5502741	6	True				
ANR	5502757	Statement	"""A = 0.7\\n B=2\\n C = 3\\n D = \\""alain\\""\\n """	157:30:3987:4028	5502741	7	True				
ANR	5502758	ExpressionStatement	"""MyType=\\""foo\\""\\n TargetType=\\""blah\\"""""	158:2:4032:4070	5502741	8	True				
ANR	5502759	PrimaryExpression	"""MyType=\\""foo\\""\\n TargetType=\\""blah\\"""""		5502741	0					
ANR	5502760	IdentifierDeclStatement	compat_classad :: ClassAd classad ;	159:1:4073:4104	5502741	9	True				
ANR	5502761	IdentifierDecl	classad		5502741	0					
ANR	5502762	IdentifierDeclType	compat_classad :: ClassAd		5502741	0					
ANR	5502763	Identifier	classad		5502741	1					
ANR	5502764	ExpressionStatement	"classad . initFromString ( classad_string , NULL )"	160:1:4107:4151	5502741	10	True				
ANR	5502765	CallExpression	"classad . initFromString ( classad_string , NULL )"		5502741	0					
ANR	5502766	Callee	classad . initFromString		5502741	0					
ANR	5502767	MemberAccess	classad . initFromString		5502741	0					
ANR	5502768	Identifier	classad		5502741	0					
ANR	5502769	Identifier	initFromString		5502741	1					
ANR	5502770	ArgumentList	classad_string		5502741	1					
ANR	5502771	Argument	classad_string		5502741	0					
ANR	5502772	Identifier	classad_string		5502741	0					
ANR	5502773	Argument	NULL		5502741	1					
ANR	5502774	Identifier	NULL		5502741	0					
ANR	5502775	ExpressionStatement	"classad_file = safe_fopen_wrapper_follow ( ""classad_file"" , ""w"" )"	161:1:4154:4215	5502741	11	True				
ANR	5502776	AssignmentExpression	"classad_file = safe_fopen_wrapper_follow ( ""classad_file"" , ""w"" )"		5502741	0		=			
ANR	5502777	Identifier	classad_file		5502741	0					
ANR	5502778	CallExpression	"safe_fopen_wrapper_follow ( ""classad_file"" , ""w"" )"		5502741	1					
ANR	5502779	Callee	safe_fopen_wrapper_follow		5502741	0					
ANR	5502780	Identifier	safe_fopen_wrapper_follow		5502741	0					
ANR	5502781	ArgumentList	"""classad_file"""		5502741	1					
ANR	5502782	Argument	"""classad_file"""		5502741	0					
ANR	5502783	PrimaryExpression	"""classad_file"""		5502741	0					
ANR	5502784	Argument	"""w"""		5502741	1					
ANR	5502785	PrimaryExpression	"""w"""		5502741	0					
ANR	5502786	ExpressionStatement	classad . fPrint ( classad_file )	162:1:4218:4246	5502741	12	True				
ANR	5502787	CallExpression	classad . fPrint ( classad_file )		5502741	0					
ANR	5502788	Callee	classad . fPrint		5502741	0					
ANR	5502789	MemberAccess	classad . fPrint		5502741	0					
ANR	5502790	Identifier	classad		5502741	0					
ANR	5502791	Identifier	fPrint		5502741	1					
ANR	5502792	ArgumentList	classad_file		5502741	1					
ANR	5502793	Argument	classad_file		5502741	0					
ANR	5502794	Identifier	classad_file		5502741	0					
ANR	5502795	ExpressionStatement	"fprintf ( classad_file , ""***\\n"" )"	163:1:4249:4279	5502741	13	True				
ANR	5502796	CallExpression	"fprintf ( classad_file , ""***\\n"" )"		5502741	0					
ANR	5502797	Callee	fprintf		5502741	0					
ANR	5502798	Identifier	fprintf		5502741	0					
ANR	5502799	ArgumentList	classad_file		5502741	1					
ANR	5502800	Argument	classad_file		5502741	0					
ANR	5502801	Identifier	classad_file		5502741	0					
ANR	5502802	Argument	"""***\\n"""		5502741	1					
ANR	5502803	PrimaryExpression	"""***\\n"""		5502741	0					
ANR	5502804	ExpressionStatement	fclose ( classad_file )	164:1:4282:4302	5502741	14	True				
ANR	5502805	CallExpression	fclose ( classad_file )		5502741	0					
ANR	5502806	Callee	fclose		5502741	0					
ANR	5502807	Identifier	fclose		5502741	0					
ANR	5502808	ArgumentList	classad_file		5502741	1					
ANR	5502809	Argument	classad_file		5502741	0					
ANR	5502810	Identifier	classad_file		5502741	0					
ANR	5502811	IdentifierDeclStatement	"int iseof , error , empty ;"	166:1:4306:4329	5502741	15	True				
ANR	5502812	IdentifierDecl	iseof		5502741	0					
ANR	5502813	IdentifierDeclType	int		5502741	0					
ANR	5502814	Identifier	iseof		5502741	1					
ANR	5502815	IdentifierDecl	error		5502741	1					
ANR	5502816	IdentifierDeclType	int		5502741	0					
ANR	5502817	Identifier	error		5502741	1					
ANR	5502818	IdentifierDecl	empty		5502741	2					
ANR	5502819	IdentifierDeclType	int		5502741	0					
ANR	5502820	Identifier	empty		5502741	1					
ANR	5502821	ExpressionStatement	"classad_file = safe_fopen_wrapper_follow ( ""classad_file"" , ""r"" )"	167:1:4332:4393	5502741	16	True				
ANR	5502822	AssignmentExpression	"classad_file = safe_fopen_wrapper_follow ( ""classad_file"" , ""r"" )"		5502741	0		=			
ANR	5502823	Identifier	classad_file		5502741	0					
ANR	5502824	CallExpression	"safe_fopen_wrapper_follow ( ""classad_file"" , ""r"" )"		5502741	1					
ANR	5502825	Callee	safe_fopen_wrapper_follow		5502741	0					
ANR	5502826	Identifier	safe_fopen_wrapper_follow		5502741	0					
ANR	5502827	ArgumentList	"""classad_file"""		5502741	1					
ANR	5502828	Argument	"""classad_file"""		5502741	0					
ANR	5502829	PrimaryExpression	"""classad_file"""		5502741	0					
ANR	5502830	Argument	"""r"""		5502741	1					
ANR	5502831	PrimaryExpression	"""r"""		5502741	0					
ANR	5502832	ExpressionStatement	"classad_from_file = new ClassAd ( classad_file , ""***"" , iseof , error , empty )"	168:1:4396:4469	5502741	17	True				
ANR	5502833	AssignmentExpression	"classad_from_file = new ClassAd ( classad_file , ""***"" , iseof , error , empty )"		5502741	0		=			
ANR	5502834	Identifier	classad_from_file		5502741	0					
ANR	5502835	Expression	"classad_file , ""***"" , iseof , error , empty"		5502741	1					
ANR	5502836	Identifier	classad_file		5502741	0					
ANR	5502837	Expression	"""***"" , iseof , error , empty"		5502741	1					
ANR	5502838	PrimaryExpression	"""***"""		5502741	0					
ANR	5502839	Expression	"iseof , error , empty"		5502741	1					
ANR	5502840	Identifier	iseof		5502741	0					
ANR	5502841	Expression	"error , empty"		5502741	1					
ANR	5502842	Identifier	error		5502741	0					
ANR	5502843	Identifier	empty		5502741	1					
ANR	5502844	ExpressionStatement	fclose ( classad_file )	169:1:4472:4492	5502741	18	True				
ANR	5502845	CallExpression	fclose ( classad_file )		5502741	0					
ANR	5502846	Callee	fclose		5502741	0					
ANR	5502847	Identifier	fclose		5502741	0					
ANR	5502848	ArgumentList	classad_file		5502741	1					
ANR	5502849	Argument	classad_file		5502741	0					
ANR	5502850	Identifier	classad_file		5502741	0					
ANR	5502851	ReturnStatement	return classad_from_file ;	171:1:4496:4520	5502741	19	True				
ANR	5502852	Identifier	classad_from_file		5502741	0					
ANR	5502853	ReturnType	compat_classad :: ClassAd *		5502741	1					
ANR	5502854	Identifier	get_classad_from_file		5502741	2					
ANR	5502855	ParameterList			5502741	3					
ANR	5502856	CFGEntryNode	ENTRY		5502741		True				
ANR	5502857	CFGExitNode	EXIT		5502741		True				
ANR	5502858	Symbol	classad_file		5502741						
ANR	5502859	Symbol	NULL		5502741						
ANR	5502860	Symbol	classad_from_file		5502741						
ANR	5502861	Symbol	classad		5502741						
ANR	5502862	Symbol	classad_string		5502741						
ANR	5502863	Symbol	error		5502741						
ANR	5502864	Symbol	safe_fopen_wrapper_follow		5502741						
ANR	5502865	Symbol	iseof		5502741						
ANR	5502866	Symbol	empty		5502741						
ANR	5502867	Function	floats_close	175:0:4597:4760							
ANR	5502868	FunctionDef	"floats_close (float one , float two , float diff)"		5502867	0					
ANR	5502869	CompoundStatement		175:53:4650:4760	5502867	0					
ANR	5502870	IdentifierDeclStatement	float ftmp = fabs ( one ) - fabs ( two ) ;	176:1:4653:4687	5502867	0	True				
ANR	5502871	IdentifierDecl	ftmp = fabs ( one ) - fabs ( two )		5502867	0					
ANR	5502872	IdentifierDeclType	float		5502867	0					
ANR	5502873	Identifier	ftmp		5502867	1					
ANR	5502874	AssignmentExpression	ftmp = fabs ( one ) - fabs ( two )		5502867	2		=			
ANR	5502875	Identifier	ftmp		5502867	0					
ANR	5502876	AdditiveExpression	fabs ( one ) - fabs ( two )		5502867	1		-			
ANR	5502877	CallExpression	fabs ( one )		5502867	0					
ANR	5502878	Callee	fabs		5502867	0					
ANR	5502879	Identifier	fabs		5502867	0					
ANR	5502880	ArgumentList	one		5502867	1					
ANR	5502881	Argument	one		5502867	0					
ANR	5502882	Identifier	one		5502867	0					
ANR	5502883	CallExpression	fabs ( two )		5502867	1					
ANR	5502884	Callee	fabs		5502867	0					
ANR	5502885	Identifier	fabs		5502867	0					
ANR	5502886	ArgumentList	two		5502867	1					
ANR	5502887	Argument	two		5502867	0					
ANR	5502888	Identifier	two		5502867	0					
ANR	5502889	IfStatement	if ( fabs ( ftmp ) <= diff )		5502867	1					
ANR	5502890	Condition	fabs ( ftmp ) <= diff	177:4:4693:4710	5502867	0	True				
ANR	5502891	RelationalExpression	fabs ( ftmp ) <= diff		5502867	0		<=			
ANR	5502892	CallExpression	fabs ( ftmp )		5502867	0					
ANR	5502893	Callee	fabs		5502867	0					
ANR	5502894	Identifier	fabs		5502867	0					
ANR	5502895	ArgumentList	ftmp		5502867	1					
ANR	5502896	Argument	ftmp		5502867	0					
ANR	5502897	Identifier	ftmp		5502867	0					
ANR	5502898	Identifier	diff		5502867	1					
ANR	5502899	CompoundStatement		3:24:62:62	5502867	1					
ANR	5502900	ReturnStatement	return ( true ) ;	178:2:4717:4729	5502867	0	True				
ANR	5502901	Identifier	true		5502867	0					
ANR	5502902	ElseStatement	else		5502867	0					
ANR	5502903	CompoundStatement		5:8:88:88	5502867	0					
ANR	5502904	ReturnStatement	return ( true ) ;	180:2:4743:4755	5502867	0	True				
ANR	5502905	Identifier	true		5502867	0					
ANR	5502906	ReturnType	bool		5502867	1					
ANR	5502907	Identifier	floats_close		5502867	2					
ANR	5502908	ParameterList	"float one , float two , float diff"		5502867	3					
ANR	5502909	Parameter	float one	175:19:4616:4624	5502867	0	True				
ANR	5502910	ParameterType	float		5502867	0					
ANR	5502911	Identifier	one		5502867	1					
ANR	5502912	Parameter	float two	175:30:4627:4635	5502867	1	True				
ANR	5502913	ParameterType	float		5502867	0					
ANR	5502914	Identifier	two		5502867	1					
ANR	5502915	Parameter	float diff	175:41:4638:4647	5502867	2	True				
ANR	5502916	ParameterType	float		5502867	0					
ANR	5502917	Identifier	diff		5502867	1					
ANR	5502918	CFGEntryNode	ENTRY		5502867		True				
ANR	5502919	CFGExitNode	EXIT		5502867		True				
ANR	5502920	Symbol	ftmp		5502867						
ANR	5502921	Symbol	fabs		5502867						
ANR	5502922	Symbol	one		5502867						
ANR	5502923	Symbol	true		5502867						
ANR	5502924	Symbol	diff		5502867						
ANR	5502925	Symbol	two		5502867						
ANR	5502926	Function	strings_similar	184:0:4763:4916							
ANR	5502927	FunctionDef	"strings_similar (const MyString * str1 , const MyString * str2 , const char * delims)"		5502926	0					
ANR	5502928	CompoundStatement		186:0:4851:4916	5502926	0					
ANR	5502929	ReturnStatement	"return strings_similar ( str1 -> Value ( ) , str2 -> Value ( ) , delims ) ;"	187:1:4854:4914	5502926	0	True				
ANR	5502930	CallExpression	"strings_similar ( str1 -> Value ( ) , str2 -> Value ( ) , delims )"		5502926	0					
ANR	5502931	Callee	strings_similar		5502926	0					
ANR	5502932	Identifier	strings_similar		5502926	0					
ANR	5502933	ArgumentList	str1 -> Value ( )		5502926	1					
ANR	5502934	Argument	str1 -> Value ( )		5502926	0					
ANR	5502935	CallExpression	str1 -> Value ( )		5502926	0					
ANR	5502936	Callee	str1 -> Value		5502926	0					
ANR	5502937	PtrMemberAccess	str1 -> Value		5502926	0					
ANR	5502938	Identifier	str1		5502926	0					
ANR	5502939	Identifier	Value		5502926	1					
ANR	5502940	ArgumentList			5502926	1					
ANR	5502941	Argument	str2 -> Value ( )		5502926	1					
ANR	5502942	CallExpression	str2 -> Value ( )		5502926	0					
ANR	5502943	Callee	str2 -> Value		5502926	0					
ANR	5502944	PtrMemberAccess	str2 -> Value		5502926	0					
ANR	5502945	Identifier	str2		5502926	0					
ANR	5502946	Identifier	Value		5502926	1					
ANR	5502947	ArgumentList			5502926	1					
ANR	5502948	Argument	delims		5502926	2					
ANR	5502949	Identifier	delims		5502926	0					
ANR	5502950	ReturnType	bool		5502926	1					
ANR	5502951	Identifier	strings_similar		5502926	2					
ANR	5502952	ParameterList	"const MyString * str1 , const MyString * str2 , const char * delims"		5502926	3					
ANR	5502953	Parameter	const MyString * str1	184:21:4784:4803	5502926	0	True				
ANR	5502954	ParameterType	const MyString *		5502926	0					
ANR	5502955	Identifier	str1		5502926	1					
ANR	5502956	Parameter	const MyString * str2	184:43:4806:4825	5502926	1	True				
ANR	5502957	ParameterType	const MyString *		5502926	0					
ANR	5502958	Identifier	str2		5502926	1					
ANR	5502959	Parameter	const char * delims	185:1:4830:4847	5502926	2	True				
ANR	5502960	ParameterType	const char *		5502926	0					
ANR	5502961	Identifier	delims		5502926	1					
ANR	5502962	CFGEntryNode	ENTRY		5502926		True				
ANR	5502963	CFGExitNode	EXIT		5502926		True				
ANR	5502964	Symbol	strings_similar		5502926						
ANR	5502965	Symbol	delims		5502926						
ANR	5502966	Symbol	* str1		5502926						
ANR	5502967	Symbol	* str2		5502926						
ANR	5502968	Symbol	str2 -> Value		5502926						
ANR	5502969	Symbol	str1		5502926						
ANR	5502970	Symbol	str2		5502926						
ANR	5502971	Symbol	str1 -> Value		5502926						
ANR	5502972	Function	strings_similar	190:0:4919:5171							
ANR	5502973	FunctionDef	"strings_similar (const char * str1 , const char * str2 , const char * delims)"		5502972	0					
ANR	5502974	CompoundStatement		191:0:4997:5171	5502972	0					
ANR	5502975	IdentifierDeclStatement	"StringList sl1 ( str1 , delims ) ;"	192:1:5000:5028	5502972	0	True				
ANR	5502976	IdentifierDecl	"sl1 ( str1 , delims )"		5502972	0					
ANR	5502977	IdentifierDeclType	StringList		5502972	0					
ANR	5502978	Identifier	sl1		5502972	1					
ANR	5502979	Expression	"str1 , delims"		5502972	2					
ANR	5502980	Identifier	str1		5502972	0					
ANR	5502981	Identifier	delims		5502972	1					
ANR	5502982	IdentifierDeclStatement	"StringList sl2 ( str2 , delims ) ;"	193:1:5031:5059	5502972	1	True				
ANR	5502983	IdentifierDecl	"sl2 ( str2 , delims )"		5502972	0					
ANR	5502984	IdentifierDeclType	StringList		5502972	0					
ANR	5502985	Identifier	sl2		5502972	1					
ANR	5502986	Expression	"str2 , delims"		5502972	2					
ANR	5502987	Identifier	str2		5502972	0					
ANR	5502988	Identifier	delims		5502972	1					
ANR	5502989	ReturnStatement	"return sl1 . number ( ) == sl2 . number ( ) && sl1 . contains_list ( sl2 , false ) && sl2 . contains_list ( sl1 , false ) ;"	194:1:5062:5169	5502972	2	True				
ANR	5502990	AndExpression	"sl1 . number ( ) == sl2 . number ( ) && sl1 . contains_list ( sl2 , false ) && sl2 . contains_list ( sl1 , false )"		5502972	0		&&			
ANR	5502991	EqualityExpression	sl1 . number ( ) == sl2 . number ( )		5502972	0		==			
ANR	5502992	CallExpression	sl1 . number ( )		5502972	0					
ANR	5502993	Callee	sl1 . number		5502972	0					
ANR	5502994	MemberAccess	sl1 . number		5502972	0					
ANR	5502995	Identifier	sl1		5502972	0					
ANR	5502996	Identifier	number		5502972	1					
ANR	5502997	ArgumentList			5502972	1					
ANR	5502998	CallExpression	sl2 . number ( )		5502972	1					
ANR	5502999	Callee	sl2 . number		5502972	0					
ANR	5503000	MemberAccess	sl2 . number		5502972	0					
ANR	5503001	Identifier	sl2		5502972	0					
ANR	5503002	Identifier	number		5502972	1					
ANR	5503003	ArgumentList			5502972	1					
ANR	5503004	AndExpression	"sl1 . contains_list ( sl2 , false ) && sl2 . contains_list ( sl1 , false )"		5502972	1		&&			
ANR	5503005	CallExpression	"sl1 . contains_list ( sl2 , false )"		5502972	0					
ANR	5503006	Callee	sl1 . contains_list		5502972	0					
ANR	5503007	MemberAccess	sl1 . contains_list		5502972	0					
ANR	5503008	Identifier	sl1		5502972	0					
ANR	5503009	Identifier	contains_list		5502972	1					
ANR	5503010	ArgumentList	sl2		5502972	1					
ANR	5503011	Argument	sl2		5502972	0					
ANR	5503012	Identifier	sl2		5502972	0					
ANR	5503013	Argument	false		5502972	1					
ANR	5503014	Identifier	false		5502972	0					
ANR	5503015	CallExpression	"sl2 . contains_list ( sl1 , false )"		5502972	1					
ANR	5503016	Callee	sl2 . contains_list		5502972	0					
ANR	5503017	MemberAccess	sl2 . contains_list		5502972	0					
ANR	5503018	Identifier	sl2		5502972	0					
ANR	5503019	Identifier	contains_list		5502972	1					
ANR	5503020	ArgumentList	sl1		5502972	1					
ANR	5503021	Argument	sl1		5502972	0					
ANR	5503022	Identifier	sl1		5502972	0					
ANR	5503023	Argument	false		5502972	1					
ANR	5503024	Identifier	false		5502972	0					
ANR	5503025	ReturnType	bool		5502972	1					
ANR	5503026	Identifier	strings_similar		5502972	2					
ANR	5503027	ParameterList	"const char * str1 , const char * str2 , const char * delims"		5502972	3					
ANR	5503028	Parameter	const char * str1	190:21:4940:4955	5502972	0	True				
ANR	5503029	ParameterType	const char *		5502972	0					
ANR	5503030	Identifier	str1		5502972	1					
ANR	5503031	Parameter	const char * str2	190:39:4958:4973	5502972	1	True				
ANR	5503032	ParameterType	const char *		5502972	0					
ANR	5503033	Identifier	str2		5502972	1					
ANR	5503034	Parameter	const char * delims	190:57:4976:4993	5502972	2	True				
ANR	5503035	ParameterType	const char *		5502972	0					
ANR	5503036	Identifier	delims		5502972	1					
ANR	5503037	CFGEntryNode	ENTRY		5502972		True				
ANR	5503038	CFGExitNode	EXIT		5502972		True				
ANR	5503039	Symbol	sl2 . contains_list		5502972						
ANR	5503040	Symbol	delims		5502972						
ANR	5503041	Symbol	str1		5502972						
ANR	5503042	Symbol	sl2 . number		5502972						
ANR	5503043	Symbol	str2		5502972						
ANR	5503044	Symbol	sl2		5502972						
ANR	5503045	Symbol	sl1 . number		5502972						
ANR	5503046	Symbol	false		5502972						
ANR	5503047	Symbol	sl1		5502972						
ANR	5503048	Symbol	sl1 . contains_list		5502972						
ANR	5503049	Function	convert_string_array	199:0:5174:5403							
ANR	5503050	FunctionDef	"convert_string_array (char * * str , int size , const char * delim)"		5503049	0					
ANR	5503051	CompoundStatement		199:71:5245:5403	5503049	0					
ANR	5503052	Statement	MyString	200:1:5248:5255	5503049	0	True				
ANR	5503053	Statement	*	200:9:5256:5256	5503049	1	True				
ANR	5503054	Statement	toReturn	200:11:5258:5265	5503049	2	True				
ANR	5503055	Statement	=	200:20:5267:5267	5503049	3	True				
ANR	5503056	Statement	new	200:22:5269:5271	5503049	4	True				
ANR	5503057	ExpressionStatement	MyString	200:26:5273:5281	5503049	5	True				
ANR	5503058	Identifier	MyString		5503049	0					
ANR	5503059	ForStatement	for ( int i = 0 ; i < size && str [ i ] && str [ i ] [ 0 ] ; i ++ )		5503049	6					
ANR	5503060	ForInit	int i = 0 ;	202:5:5290:5299	5503049	0	True				
ANR	5503061	IdentifierDeclStatement	int i = 0 ;		5503049	0					
ANR	5503062	IdentifierDecl	i = 0		5503049	0					
ANR	5503063	IdentifierDeclType	int		5503049	0					
ANR	5503064	Identifier	i		5503049	1					
ANR	5503065	AssignmentExpression	i = 0		5503049	2		=			
ANR	5503066	Identifier	i		5503049	0					
ANR	5503067	PrimaryExpression	0		5503049	1					
ANR	5503068	Condition	i < size && str [ i ] && str [ i ] [ 0 ]	202:16:5301:5331	5503049	1	True				
ANR	5503069	AndExpression	i < size && str [ i ] && str [ i ] [ 0 ]		5503049	0		&&			
ANR	5503070	RelationalExpression	i < size		5503049	0		<			
ANR	5503071	Identifier	i		5503049	0					
ANR	5503072	Identifier	size		5503049	1					
ANR	5503073	AndExpression	str [ i ] && str [ i ] [ 0 ]		5503049	1		&&			
ANR	5503074	ArrayIndexing	str [ i ]		5503049	0					
ANR	5503075	Identifier	str		5503049	0					
ANR	5503076	Identifier	i		5503049	1					
ANR	5503077	ArrayIndexing	str [ i ] [ 0 ]		5503049	1					
ANR	5503078	ArrayIndexing	str [ i ]		5503049	0					
ANR	5503079	Identifier	str		5503049	0					
ANR	5503080	Identifier	i		5503049	1					
ANR	5503081	PrimaryExpression	0		5503049	1					
ANR	5503082	PostIncDecOperationExpression	i ++	202:49:5334:5336	5503049	2	True				
ANR	5503083	Identifier	i		5503049	0					
ANR	5503084	IncDec	++		5503049	1					
ANR	5503085	CompoundStatement		4:54:93:93	5503049	3					
ANR	5503086	ExpressionStatement	* toReturn += str [ i ]	203:2:5343:5360	5503049	0	True				
ANR	5503087	AssignmentExpression	* toReturn += str [ i ]		5503049	0		+=			
ANR	5503088	UnaryOperationExpression	* toReturn		5503049	0					
ANR	5503089	UnaryOperator	*		5503049	0					
ANR	5503090	Identifier	toReturn		5503049	1					
ANR	5503091	ArrayIndexing	str [ i ]		5503049	1					
ANR	5503092	Identifier	str		5503049	0					
ANR	5503093	Identifier	i		5503049	1					
ANR	5503094	ExpressionStatement	* toReturn += delim	204:2:5364:5380	5503049	1	True				
ANR	5503095	AssignmentExpression	* toReturn += delim		5503049	0		+=			
ANR	5503096	UnaryOperationExpression	* toReturn		5503049	0					
ANR	5503097	UnaryOperator	*		5503049	0					
ANR	5503098	Identifier	toReturn		5503049	1					
ANR	5503099	Identifier	delim		5503049	1					
ANR	5503100	ReturnStatement	return toReturn ;	206:1:5386:5401	5503049	7	True				
ANR	5503101	Identifier	toReturn		5503049	0					
ANR	5503102	ReturnType	MyString *		5503049	1					
ANR	5503103	Identifier	convert_string_array		5503049	2					
ANR	5503104	ParameterList	"char * * str , int size , const char * delim"		5503049	3					
ANR	5503105	Parameter	char * * str	199:31:5205:5214	5503049	0	True				
ANR	5503106	ParameterType	char * *		5503049	0					
ANR	5503107	Identifier	str		5503049	1					
ANR	5503108	Parameter	int size	199:43:5217:5224	5503049	1	True				
ANR	5503109	ParameterType	int		5503049	0					
ANR	5503110	Identifier	size		5503049	1					
ANR	5503111	Parameter	const char * delim	199:53:5227:5243	5503049	2	True				
ANR	5503112	ParameterType	const char *		5503049	0					
ANR	5503113	Identifier	delim		5503049	1					
ANR	5503114	CFGEntryNode	ENTRY		5503049		True				
ANR	5503115	CFGExitNode	EXIT		5503049		True				
ANR	5503116	Symbol	str		5503049						
ANR	5503117	Symbol	* * i		5503049						
ANR	5503118	Symbol	* i		5503049						
ANR	5503119	Symbol	size		5503049						
ANR	5503120	Symbol	toReturn		5503049						
ANR	5503121	Symbol	* * str		5503049						
ANR	5503122	Symbol	* toReturn		5503049						
ANR	5503123	Symbol	i		5503049						
ANR	5503124	Symbol	* str		5503049						
ANR	5503125	Symbol	delim		5503049						
ANR	5503126	Function	convert_string_array	209:0:5406:5641							
ANR	5503127	FunctionDef	"convert_string_array (const char * * str , int size , const char * delim)"		5503126	0					
ANR	5503128	CompoundStatement		209:77:5483:5641	5503126	0					
ANR	5503129	Statement	MyString	210:1:5486:5493	5503126	0	True				
ANR	5503130	Statement	*	210:9:5494:5494	5503126	1	True				
ANR	5503131	Statement	toReturn	210:11:5496:5503	5503126	2	True				
ANR	5503132	Statement	=	210:20:5505:5505	5503126	3	True				
ANR	5503133	Statement	new	210:22:5507:5509	5503126	4	True				
ANR	5503134	ExpressionStatement	MyString	210:26:5511:5519	5503126	5	True				
ANR	5503135	Identifier	MyString		5503126	0					
ANR	5503136	ForStatement	for ( int i = 0 ; i < size && str [ i ] && str [ i ] [ 0 ] ; i ++ )		5503126	6					
ANR	5503137	ForInit	int i = 0 ;	212:5:5528:5537	5503126	0	True				
ANR	5503138	IdentifierDeclStatement	int i = 0 ;		5503126	0					
ANR	5503139	IdentifierDecl	i = 0		5503126	0					
ANR	5503140	IdentifierDeclType	int		5503126	0					
ANR	5503141	Identifier	i		5503126	1					
ANR	5503142	AssignmentExpression	i = 0		5503126	2		=			
ANR	5503143	Identifier	i		5503126	0					
ANR	5503144	PrimaryExpression	0		5503126	1					
ANR	5503145	Condition	i < size && str [ i ] && str [ i ] [ 0 ]	212:16:5539:5569	5503126	1	True				
ANR	5503146	AndExpression	i < size && str [ i ] && str [ i ] [ 0 ]		5503126	0		&&			
ANR	5503147	RelationalExpression	i < size		5503126	0		<			
ANR	5503148	Identifier	i		5503126	0					
ANR	5503149	Identifier	size		5503126	1					
ANR	5503150	AndExpression	str [ i ] && str [ i ] [ 0 ]		5503126	1		&&			
ANR	5503151	ArrayIndexing	str [ i ]		5503126	0					
ANR	5503152	Identifier	str		5503126	0					
ANR	5503153	Identifier	i		5503126	1					
ANR	5503154	ArrayIndexing	str [ i ] [ 0 ]		5503126	1					
ANR	5503155	ArrayIndexing	str [ i ]		5503126	0					
ANR	5503156	Identifier	str		5503126	0					
ANR	5503157	Identifier	i		5503126	1					
ANR	5503158	PrimaryExpression	0		5503126	1					
ANR	5503159	PostIncDecOperationExpression	i ++	212:49:5572:5574	5503126	2	True				
ANR	5503160	Identifier	i		5503126	0					
ANR	5503161	IncDec	++		5503126	1					
ANR	5503162	CompoundStatement		4:54:93:93	5503126	3					
ANR	5503163	ExpressionStatement	* toReturn += str [ i ]	213:2:5581:5598	5503126	0	True				
ANR	5503164	AssignmentExpression	* toReturn += str [ i ]		5503126	0		+=			
ANR	5503165	UnaryOperationExpression	* toReturn		5503126	0					
ANR	5503166	UnaryOperator	*		5503126	0					
ANR	5503167	Identifier	toReturn		5503126	1					
ANR	5503168	ArrayIndexing	str [ i ]		5503126	1					
ANR	5503169	Identifier	str		5503126	0					
ANR	5503170	Identifier	i		5503126	1					
ANR	5503171	ExpressionStatement	* toReturn += delim	214:2:5602:5618	5503126	1	True				
ANR	5503172	AssignmentExpression	* toReturn += delim		5503126	0		+=			
ANR	5503173	UnaryOperationExpression	* toReturn		5503126	0					
ANR	5503174	UnaryOperator	*		5503126	0					
ANR	5503175	Identifier	toReturn		5503126	1					
ANR	5503176	Identifier	delim		5503126	1					
ANR	5503177	ReturnStatement	return toReturn ;	216:1:5624:5639	5503126	7	True				
ANR	5503178	Identifier	toReturn		5503126	0					
ANR	5503179	ReturnType	MyString *		5503126	1					
ANR	5503180	Identifier	convert_string_array		5503126	2					
ANR	5503181	ParameterList	"const char * * str , int size , const char * delim"		5503126	3					
ANR	5503182	Parameter	const char * * str	209:31:5437:5452	5503126	0	True				
ANR	5503183	ParameterType	const char * *		5503126	0					
ANR	5503184	Identifier	str		5503126	1					
ANR	5503185	Parameter	int size	209:49:5455:5462	5503126	1	True				
ANR	5503186	ParameterType	int		5503126	0					
ANR	5503187	Identifier	size		5503126	1					
ANR	5503188	Parameter	const char * delim	209:59:5465:5481	5503126	2	True				
ANR	5503189	ParameterType	const char *		5503126	0					
ANR	5503190	Identifier	delim		5503126	1					
ANR	5503191	CFGEntryNode	ENTRY		5503126		True				
ANR	5503192	CFGExitNode	EXIT		5503126		True				
ANR	5503193	Symbol	str		5503126						
ANR	5503194	Symbol	* * i		5503126						
ANR	5503195	Symbol	* i		5503126						
ANR	5503196	Symbol	size		5503126						
ANR	5503197	Symbol	toReturn		5503126						
ANR	5503198	Symbol	* * str		5503126						
ANR	5503199	Symbol	* toReturn		5503126						
ANR	5503200	Symbol	i		5503126						
ANR	5503201	Symbol	* str		5503126						
ANR	5503202	Symbol	delim		5503126						
ANR	5503203	Function	delete_helper	220:0:5667:5800							
ANR	5503204	FunctionDef	"delete_helper (char * * array , int num_strs)"		5503203	0					
ANR	5503205	CompoundStatement		220:47:5714:5800	5503203	0					
ANR	5503206	IdentifierDeclStatement	int i ;	221:1:5717:5722	5503203	0	True				
ANR	5503207	IdentifierDecl	i		5503203	0					
ANR	5503208	IdentifierDeclType	int		5503203	0					
ANR	5503209	Identifier	i		5503203	1					
ANR	5503210	ForStatement	for ( i = 0 ; i < num_strs ; i ++ )		5503203	1					
ANR	5503211	ForInit	i = 0 ;	222:5:5729:5734	5503203	0	True				
ANR	5503212	AssignmentExpression	i = 0		5503203	0		=			
ANR	5503213	Identifier	i		5503203	0					
ANR	5503214	PrimaryExpression	0		5503203	1					
ANR	5503215	Condition	i < num_strs	222:12:5736:5747	5503203	1	True				
ANR	5503216	RelationalExpression	i < num_strs		5503203	0		<			
ANR	5503217	Identifier	i		5503203	0					
ANR	5503218	Identifier	num_strs		5503203	1					
ANR	5503219	PostIncDecOperationExpression	i ++	222:26:5750:5752	5503203	2	True				
ANR	5503220	Identifier	i		5503203	0					
ANR	5503221	IncDec	++		5503203	1					
ANR	5503222	CompoundStatement		3:31:40:40	5503203	3					
ANR	5503223	Statement	delete	223:2:5759:5764	5503203	0	True				
ANR	5503224	Statement	[	223:8:5765:5765	5503203	1	True				
ANR	5503225	Statement	]	223:9:5766:5766	5503203	2	True				
ANR	5503226	ExpressionStatement	array [ i ]	223:11:5768:5776	5503203	3	True				
ANR	5503227	ArrayIndexing	array [ i ]		5503203	0					
ANR	5503228	Identifier	array		5503203	0					
ANR	5503229	Identifier	i		5503203	1					
ANR	5503230	Statement	delete	225:1:5784:5789	5503203	2	True				
ANR	5503231	Statement	[	225:7:5790:5790	5503203	3	True				
ANR	5503232	Statement	]	225:8:5791:5791	5503203	4	True				
ANR	5503233	ExpressionStatement	array	225:10:5793:5798	5503203	5	True				
ANR	5503234	Identifier	array		5503203	0					
ANR	5503235	ReturnType	void		5503203	1					
ANR	5503236	Identifier	delete_helper		5503203	2					
ANR	5503237	ParameterList	"char * * array , int num_strs"		5503203	3					
ANR	5503238	Parameter	char * * array	220:19:5686:5697	5503203	0	True				
ANR	5503239	ParameterType	char * *		5503203	0					
ANR	5503240	Identifier	array		5503203	1					
ANR	5503241	Parameter	int num_strs	220:33:5700:5711	5503203	1	True				
ANR	5503242	ParameterType	int		5503203	0					
ANR	5503243	Identifier	num_strs		5503203	1					
ANR	5503244	CFGEntryNode	ENTRY		5503203		True				
ANR	5503245	CFGExitNode	EXIT		5503203		True				
ANR	5503246	Symbol	num_strs		5503203						
ANR	5503247	Symbol	array		5503203						
ANR	5503248	Symbol	i		5503203						
ANR	5503249	Function	get_tm	228:0:5803:6250							
ANR	5503250	FunctionDef	"get_tm (ISO8601Type type , const struct tm & time , MyString * str)"		5503249	0					
ANR	5503251	CompoundStatement		229:0:5871:6250	5503249	0					
ANR	5503252	IfStatement	if ( str )		5503249	0					
ANR	5503253	Condition	str	230:4:5877:5879	5503249	0	True				
ANR	5503254	Identifier	str		5503249	0					
ANR	5503255	CompoundStatement		2:9:10:10	5503249	1					
ANR	5503256	IfStatement	if ( type == ISO8601_DateOnly )		5503249	0					
ANR	5503257	Condition	type == ISO8601_DateOnly	231:6:5890:5913	5503249	0	True				
ANR	5503258	EqualityExpression	type == ISO8601_DateOnly		5503249	0		==			
ANR	5503259	Identifier	type		5503249	0					
ANR	5503260	Identifier	ISO8601_DateOnly		5503249	1					
ANR	5503261	CompoundStatement		3:32:44:44	5503249	1					
ANR	5503262	ExpressionStatement	"str -> sprintf ( ""%d-%d-%d"" , time . tm_year , time . tm_mon , time . tm_mday )"	232:3:5921:5986	5503249	0	True				
ANR	5503263	CallExpression	"str -> sprintf ( ""%d-%d-%d"" , time . tm_year , time . tm_mon , time . tm_mday )"		5503249	0					
ANR	5503264	Callee	str -> sprintf		5503249	0					
ANR	5503265	PtrMemberAccess	str -> sprintf		5503249	0					
ANR	5503266	Identifier	str		5503249	0					
ANR	5503267	Identifier	sprintf		5503249	1					
ANR	5503268	ArgumentList	"""%d-%d-%d"""		5503249	1					
ANR	5503269	Argument	"""%d-%d-%d"""		5503249	0					
ANR	5503270	PrimaryExpression	"""%d-%d-%d"""		5503249	0					
ANR	5503271	Argument	time . tm_year		5503249	1					
ANR	5503272	MemberAccess	time . tm_year		5503249	0					
ANR	5503273	Identifier	time		5503249	0					
ANR	5503274	Identifier	tm_year		5503249	1					
ANR	5503275	Argument	time . tm_mon		5503249	2					
ANR	5503276	MemberAccess	time . tm_mon		5503249	0					
ANR	5503277	Identifier	time		5503249	0					
ANR	5503278	Identifier	tm_mon		5503249	1					
ANR	5503279	Argument	time . tm_mday		5503249	3					
ANR	5503280	MemberAccess	time . tm_mday		5503249	0					
ANR	5503281	Identifier	time		5503249	0					
ANR	5503282	Identifier	tm_mday		5503249	1					
ANR	5503283	ElseStatement	else		5503249	0					
ANR	5503284	IfStatement	if ( type == ISO8601_TimeOnly )		5503249	0					
ANR	5503285	Condition	type == ISO8601_TimeOnly	233:13:6001:6024	5503249	0	True				
ANR	5503286	EqualityExpression	type == ISO8601_TimeOnly		5503249	0		==			
ANR	5503287	Identifier	type		5503249	0					
ANR	5503288	Identifier	ISO8601_TimeOnly		5503249	1					
ANR	5503289	CompoundStatement		5:39:155:155	5503249	1					
ANR	5503290	ExpressionStatement	"str -> sprintf ( ""%d:%d:%d"" , time . tm_hour , time . tm_min , time . tm_sec )"	234:3:6032:6096	5503249	0	True				
ANR	5503291	CallExpression	"str -> sprintf ( ""%d:%d:%d"" , time . tm_hour , time . tm_min , time . tm_sec )"		5503249	0					
ANR	5503292	Callee	str -> sprintf		5503249	0					
ANR	5503293	PtrMemberAccess	str -> sprintf		5503249	0					
ANR	5503294	Identifier	str		5503249	0					
ANR	5503295	Identifier	sprintf		5503249	1					
ANR	5503296	ArgumentList	"""%d:%d:%d"""		5503249	1					
ANR	5503297	Argument	"""%d:%d:%d"""		5503249	0					
ANR	5503298	PrimaryExpression	"""%d:%d:%d"""		5503249	0					
ANR	5503299	Argument	time . tm_hour		5503249	1					
ANR	5503300	MemberAccess	time . tm_hour		5503249	0					
ANR	5503301	Identifier	time		5503249	0					
ANR	5503302	Identifier	tm_hour		5503249	1					
ANR	5503303	Argument	time . tm_min		5503249	2					
ANR	5503304	MemberAccess	time . tm_min		5503249	0					
ANR	5503305	Identifier	time		5503249	0					
ANR	5503306	Identifier	tm_min		5503249	1					
ANR	5503307	Argument	time . tm_sec		5503249	3					
ANR	5503308	MemberAccess	time . tm_sec		5503249	0					
ANR	5503309	Identifier	time		5503249	0					
ANR	5503310	Identifier	tm_sec		5503249	1					
ANR	5503311	ElseStatement	else		5503249	0					
ANR	5503312	CompoundStatement		7:9:235:235	5503249	0					
ANR	5503313	ExpressionStatement	"str -> sprintf ( ""%d-%d-%dT%d:%d:%d"" , time . tm_year , time . tm_mon , time . tm_mday , time . tm_hour , time . tm_min , time . tm_sec )"	236:3:6112:6240	5503249	0	True				
ANR	5503314	CallExpression	"str -> sprintf ( ""%d-%d-%dT%d:%d:%d"" , time . tm_year , time . tm_mon , time . tm_mday , time . tm_hour , time . tm_min , time . tm_sec )"		5503249	0					
ANR	5503315	Callee	str -> sprintf		5503249	0					
ANR	5503316	PtrMemberAccess	str -> sprintf		5503249	0					
ANR	5503317	Identifier	str		5503249	0					
ANR	5503318	Identifier	sprintf		5503249	1					
ANR	5503319	ArgumentList	"""%d-%d-%dT%d:%d:%d"""		5503249	1					
ANR	5503320	Argument	"""%d-%d-%dT%d:%d:%d"""		5503249	0					
ANR	5503321	PrimaryExpression	"""%d-%d-%dT%d:%d:%d"""		5503249	0					
ANR	5503322	Argument	time . tm_year		5503249	1					
ANR	5503323	MemberAccess	time . tm_year		5503249	0					
ANR	5503324	Identifier	time		5503249	0					
ANR	5503325	Identifier	tm_year		5503249	1					
ANR	5503326	Argument	time . tm_mon		5503249	2					
ANR	5503327	MemberAccess	time . tm_mon		5503249	0					
ANR	5503328	Identifier	time		5503249	0					
ANR	5503329	Identifier	tm_mon		5503249	1					
ANR	5503330	Argument	time . tm_mday		5503249	3					
ANR	5503331	MemberAccess	time . tm_mday		5503249	0					
ANR	5503332	Identifier	time		5503249	0					
ANR	5503333	Identifier	tm_mday		5503249	1					
ANR	5503334	Argument	time . tm_hour		5503249	4					
ANR	5503335	MemberAccess	time . tm_hour		5503249	0					
ANR	5503336	Identifier	time		5503249	0					
ANR	5503337	Identifier	tm_hour		5503249	1					
ANR	5503338	Argument	time . tm_min		5503249	5					
ANR	5503339	MemberAccess	time . tm_min		5503249	0					
ANR	5503340	Identifier	time		5503249	0					
ANR	5503341	Identifier	tm_min		5503249	1					
ANR	5503342	Argument	time . tm_sec		5503249	6					
ANR	5503343	MemberAccess	time . tm_sec		5503249	0					
ANR	5503344	Identifier	time		5503249	0					
ANR	5503345	Identifier	tm_sec		5503249	1					
ANR	5503346	ReturnType	void		5503249	1					
ANR	5503347	Identifier	get_tm		5503249	2					
ANR	5503348	ParameterList	"ISO8601Type type , const struct tm & time , MyString * str"		5503249	3					
ANR	5503349	Parameter	ISO8601Type type	228:12:5815:5830	5503249	0	True				
ANR	5503350	ParameterType	ISO8601Type		5503249	0					
ANR	5503351	Identifier	type		5503249	1					
ANR	5503352	Parameter	const struct tm & time	228:30:5833:5853	5503249	1	True				
ANR	5503353	ParameterType	const struct tm &		5503249	0					
ANR	5503354	Identifier	time		5503249	1					
ANR	5503355	Parameter	MyString * str	228:53:5856:5868	5503249	2	True				
ANR	5503356	ParameterType	MyString *		5503249	0					
ANR	5503357	Identifier	str		5503249	1					
ANR	5503358	CFGEntryNode	ENTRY		5503249		True				
ANR	5503359	CFGExitNode	EXIT		5503249		True				
ANR	5503360	Symbol	str		5503249						
ANR	5503361	Symbol	ISO8601_DateOnly		5503249						
ANR	5503362	Symbol	time . tm_mon		5503249						
ANR	5503363	Symbol	time		5503249						
ANR	5503364	Symbol	time . tm_mday		5503249						
ANR	5503365	Symbol	type		5503249						
ANR	5503366	Symbol	time . tm_hour		5503249						
ANR	5503367	Symbol	time . tm_year		5503249						
ANR	5503368	Symbol	ISO8601_TimeOnly		5503249						
ANR	5503369	Symbol	time . tm_min		5503249						
ANR	5503370	Symbol	time . tm_sec		5503249						
ANR	5503371	Function	user_policy_ad_checker	244:0:6253:7012							
ANR	5503372	FunctionDef	"user_policy_ad_checker (ClassAd * ad , bool periodic_hold , bool periodic_remove , bool periodic_release , bool hold_check , bool remove_check)"		5503371	0					
ANR	5503373	CompoundStatement		250:0:6432:7012	5503371	0					
ANR	5503374	IdentifierDeclStatement	"int val1 , val2 , val3 , val4 , val5 ;"	251:1:6435:6467	5503371	0	True				
ANR	5503375	IdentifierDecl	val1		5503371	0					
ANR	5503376	IdentifierDeclType	int		5503371	0					
ANR	5503377	Identifier	val1		5503371	1					
ANR	5503378	IdentifierDecl	val2		5503371	1					
ANR	5503379	IdentifierDeclType	int		5503371	0					
ANR	5503380	Identifier	val2		5503371	1					
ANR	5503381	IdentifierDecl	val3		5503371	2					
ANR	5503382	IdentifierDeclType	int		5503371	0					
ANR	5503383	Identifier	val3		5503371	1					
ANR	5503384	IdentifierDecl	val4		5503371	3					
ANR	5503385	IdentifierDeclType	int		5503371	0					
ANR	5503386	Identifier	val4		5503371	1					
ANR	5503387	IdentifierDecl	val5		5503371	4					
ANR	5503388	IdentifierDeclType	int		5503371	0					
ANR	5503389	Identifier	val5		5503371	1					
ANR	5503390	IdentifierDeclStatement	"bool found = ad -> EvalBool ( ATTR_PERIODIC_HOLD_CHECK , NULL , val1 ) && ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 ) && ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 ) ;"	252:1:6470:6774	5503371	1	True				
ANR	5503391	IdentifierDecl	"found = ad -> EvalBool ( ATTR_PERIODIC_HOLD_CHECK , NULL , val1 ) && ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 ) && ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	0					
ANR	5503392	IdentifierDeclType	bool		5503371	0					
ANR	5503393	Identifier	found		5503371	1					
ANR	5503394	AssignmentExpression	"found = ad -> EvalBool ( ATTR_PERIODIC_HOLD_CHECK , NULL , val1 ) && ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 ) && ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	2		=			
ANR	5503395	Identifier	found		5503371	0					
ANR	5503396	AndExpression	"ad -> EvalBool ( ATTR_PERIODIC_HOLD_CHECK , NULL , val1 ) && ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 ) && ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	1		&&			
ANR	5503397	CallExpression	"ad -> EvalBool ( ATTR_PERIODIC_HOLD_CHECK , NULL , val1 )"		5503371	0					
ANR	5503398	Callee	ad -> EvalBool		5503371	0					
ANR	5503399	PtrMemberAccess	ad -> EvalBool		5503371	0					
ANR	5503400	Identifier	ad		5503371	0					
ANR	5503401	Identifier	EvalBool		5503371	1					
ANR	5503402	ArgumentList	ATTR_PERIODIC_HOLD_CHECK		5503371	1					
ANR	5503403	Argument	ATTR_PERIODIC_HOLD_CHECK		5503371	0					
ANR	5503404	Identifier	ATTR_PERIODIC_HOLD_CHECK		5503371	0					
ANR	5503405	Argument	NULL		5503371	1					
ANR	5503406	Identifier	NULL		5503371	0					
ANR	5503407	Argument	val1		5503371	2					
ANR	5503408	Identifier	val1		5503371	0					
ANR	5503409	AndExpression	"ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 ) && ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	1		&&			
ANR	5503410	CallExpression	"ad -> EvalBool ( ATTR_PERIODIC_REMOVE_CHECK , NULL , val2 )"		5503371	0					
ANR	5503411	Callee	ad -> EvalBool		5503371	0					
ANR	5503412	PtrMemberAccess	ad -> EvalBool		5503371	0					
ANR	5503413	Identifier	ad		5503371	0					
ANR	5503414	Identifier	EvalBool		5503371	1					
ANR	5503415	ArgumentList	ATTR_PERIODIC_REMOVE_CHECK		5503371	1					
ANR	5503416	Argument	ATTR_PERIODIC_REMOVE_CHECK		5503371	0					
ANR	5503417	Identifier	ATTR_PERIODIC_REMOVE_CHECK		5503371	0					
ANR	5503418	Argument	NULL		5503371	1					
ANR	5503419	Identifier	NULL		5503371	0					
ANR	5503420	Argument	val2		5503371	2					
ANR	5503421	Identifier	val2		5503371	0					
ANR	5503422	AndExpression	"ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 ) && ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	1		&&			
ANR	5503423	CallExpression	"ad -> EvalBool ( ATTR_PERIODIC_RELEASE_CHECK , NULL , val3 )"		5503371	0					
ANR	5503424	Callee	ad -> EvalBool		5503371	0					
ANR	5503425	PtrMemberAccess	ad -> EvalBool		5503371	0					
ANR	5503426	Identifier	ad		5503371	0					
ANR	5503427	Identifier	EvalBool		5503371	1					
ANR	5503428	ArgumentList	ATTR_PERIODIC_RELEASE_CHECK		5503371	1					
ANR	5503429	Argument	ATTR_PERIODIC_RELEASE_CHECK		5503371	0					
ANR	5503430	Identifier	ATTR_PERIODIC_RELEASE_CHECK		5503371	0					
ANR	5503431	Argument	NULL		5503371	1					
ANR	5503432	Identifier	NULL		5503371	0					
ANR	5503433	Argument	val3		5503371	2					
ANR	5503434	Identifier	val3		5503371	0					
ANR	5503435	AndExpression	"ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 ) && ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	1		&&			
ANR	5503436	CallExpression	"ad -> EvalBool ( ATTR_ON_EXIT_HOLD_CHECK , NULL , val4 )"		5503371	0					
ANR	5503437	Callee	ad -> EvalBool		5503371	0					
ANR	5503438	PtrMemberAccess	ad -> EvalBool		5503371	0					
ANR	5503439	Identifier	ad		5503371	0					
ANR	5503440	Identifier	EvalBool		5503371	1					
ANR	5503441	ArgumentList	ATTR_ON_EXIT_HOLD_CHECK		5503371	1					
ANR	5503442	Argument	ATTR_ON_EXIT_HOLD_CHECK		5503371	0					
ANR	5503443	Identifier	ATTR_ON_EXIT_HOLD_CHECK		5503371	0					
ANR	5503444	Argument	NULL		5503371	1					
ANR	5503445	Identifier	NULL		5503371	0					
ANR	5503446	Argument	val4		5503371	2					
ANR	5503447	Identifier	val4		5503371	0					
ANR	5503448	CallExpression	"ad -> EvalBool ( ATTR_ON_EXIT_REMOVE_CHECK , NULL , val5 )"		5503371	1					
ANR	5503449	Callee	ad -> EvalBool		5503371	0					
ANR	5503450	PtrMemberAccess	ad -> EvalBool		5503371	0					
ANR	5503451	Identifier	ad		5503371	0					
ANR	5503452	Identifier	EvalBool		5503371	1					
ANR	5503453	ArgumentList	ATTR_ON_EXIT_REMOVE_CHECK		5503371	1					
ANR	5503454	Argument	ATTR_ON_EXIT_REMOVE_CHECK		5503371	0					
ANR	5503455	Identifier	ATTR_ON_EXIT_REMOVE_CHECK		5503371	0					
ANR	5503456	Argument	NULL		5503371	1					
ANR	5503457	Identifier	NULL		5503371	0					
ANR	5503458	Argument	val5		5503371	2					
ANR	5503459	Identifier	val5		5503371	0					
ANR	5503460	ReturnStatement	return found && ( ( val1 != 0 ) == periodic_hold ) && ( ( val2 != 0 ) == periodic_remove ) && ( ( val3 != 0 ) == periodic_release ) && ( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check ) ;	258:1:6779:7010	5503371	2	True				
ANR	5503461	AndExpression	found && ( ( val1 != 0 ) == periodic_hold ) && ( ( val2 != 0 ) == periodic_remove ) && ( ( val3 != 0 ) == periodic_release ) && ( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check )		5503371	0		&&			
ANR	5503462	Identifier	found		5503371	0					
ANR	5503463	AndExpression	( ( val1 != 0 ) == periodic_hold ) && ( ( val2 != 0 ) == periodic_remove ) && ( ( val3 != 0 ) == periodic_release ) && ( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check )		5503371	1		&&			
ANR	5503464	EqualityExpression	( val1 != 0 ) == periodic_hold		5503371	0		==			
ANR	5503465	EqualityExpression	val1 != 0		5503371	0		!=			
ANR	5503466	Identifier	val1		5503371	0					
ANR	5503467	PrimaryExpression	0		5503371	1					
ANR	5503468	Identifier	periodic_hold		5503371	1					
ANR	5503469	AndExpression	( ( val2 != 0 ) == periodic_remove ) && ( ( val3 != 0 ) == periodic_release ) && ( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check )		5503371	1		&&			
ANR	5503470	EqualityExpression	( val2 != 0 ) == periodic_remove		5503371	0		==			
ANR	5503471	EqualityExpression	val2 != 0		5503371	0		!=			
ANR	5503472	Identifier	val2		5503371	0					
ANR	5503473	PrimaryExpression	0		5503371	1					
ANR	5503474	Identifier	periodic_remove		5503371	1					
ANR	5503475	AndExpression	( ( val3 != 0 ) == periodic_release ) && ( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check )		5503371	1		&&			
ANR	5503476	EqualityExpression	( val3 != 0 ) == periodic_release		5503371	0		==			
ANR	5503477	EqualityExpression	val3 != 0		5503371	0		!=			
ANR	5503478	Identifier	val3		5503371	0					
ANR	5503479	PrimaryExpression	0		5503371	1					
ANR	5503480	Identifier	periodic_release		5503371	1					
ANR	5503481	AndExpression	( ( val4 != 0 ) == hold_check ) && ( ( val5 != 0 ) == remove_check )		5503371	1		&&			
ANR	5503482	EqualityExpression	( val4 != 0 ) == hold_check		5503371	0		==			
ANR	5503483	EqualityExpression	val4 != 0		5503371	0		!=			
ANR	5503484	Identifier	val4		5503371	0					
ANR	5503485	PrimaryExpression	0		5503371	1					
ANR	5503486	Identifier	hold_check		5503371	1					
ANR	5503487	EqualityExpression	( val5 != 0 ) == remove_check		5503371	1		==			
ANR	5503488	EqualityExpression	val5 != 0		5503371	0		!=			
ANR	5503489	Identifier	val5		5503371	0					
ANR	5503490	PrimaryExpression	0		5503371	1					
ANR	5503491	Identifier	remove_check		5503371	1					
ANR	5503492	ReturnType	bool		5503371	1					
ANR	5503493	Identifier	user_policy_ad_checker		5503371	2					
ANR	5503494	ParameterList	"ClassAd * ad , bool periodic_hold , bool periodic_remove , bool periodic_release , bool hold_check , bool remove_check"		5503371	3					
ANR	5503495	Parameter	ClassAd * ad	244:28:6281:6291	5503371	0	True				
ANR	5503496	ParameterType	ClassAd *		5503371	0					
ANR	5503497	Identifier	ad		5503371	1					
ANR	5503498	Parameter	bool periodic_hold	245:8:6302:6319	5503371	1	True				
ANR	5503499	ParameterType	bool		5503371	0					
ANR	5503500	Identifier	periodic_hold		5503371	1					
ANR	5503501	Parameter	bool periodic_remove	246:7:6329:6348	5503371	2	True				
ANR	5503502	ParameterType	bool		5503371	0					
ANR	5503503	Identifier	periodic_remove		5503371	1					
ANR	5503504	Parameter	bool periodic_release	247:7:6358:6378	5503371	3	True				
ANR	5503505	ParameterType	bool		5503371	0					
ANR	5503506	Identifier	periodic_release		5503371	1					
ANR	5503507	Parameter	bool hold_check	248:7:6388:6402	5503371	4	True				
ANR	5503508	ParameterType	bool		5503371	0					
ANR	5503509	Identifier	hold_check		5503371	1					
ANR	5503510	Parameter	bool remove_check	249:7:6412:6428	5503371	5	True				
ANR	5503511	ParameterType	bool		5503371	0					
ANR	5503512	Identifier	remove_check		5503371	1					
ANR	5503513	CFGEntryNode	ENTRY		5503371		True				
ANR	5503514	CFGExitNode	EXIT		5503371		True				
ANR	5503515	Symbol	ad		5503371						
ANR	5503516	Symbol	val5		5503371						
ANR	5503517	Symbol	NULL		5503371						
ANR	5503518	Symbol	periodic_release		5503371						
ANR	5503519	Symbol	val4		5503371						
ANR	5503520	Symbol	ATTR_PERIODIC_HOLD_CHECK		5503371						
ANR	5503521	Symbol	val3		5503371						
ANR	5503522	Symbol	val2		5503371						
ANR	5503523	Symbol	periodic_remove		5503371						
ANR	5503524	Symbol	val1		5503371						
ANR	5503525	Symbol	ad -> EvalBool		5503371						
ANR	5503526	Symbol	periodic_hold		5503371						
ANR	5503527	Symbol	ATTR_ON_EXIT_HOLD_CHECK		5503371						
ANR	5503528	Symbol	remove_check		5503371						
ANR	5503529	Symbol	* ad		5503371						
ANR	5503530	Symbol	ATTR_PERIODIC_REMOVE_CHECK		5503371						
ANR	5503531	Symbol	ATTR_PERIODIC_RELEASE_CHECK		5503371						
ANR	5503532	Symbol	found		5503371						
ANR	5503533	Symbol	ATTR_ON_EXIT_REMOVE_CHECK		5503371						
ANR	5503534	Symbol	hold_check		5503371						
ANR	5503535	Function	user_policy_ad_checker	266:0:7015:7503							
ANR	5503536	FunctionDef	"user_policy_ad_checker (ClassAd * ad , bool timer_remove , bool periodic_hold , bool periodic_remove , bool periodic_release , bool hold_check , bool remove_check)"		5503535	0					
ANR	5503537	CompoundStatement		273:0:7219:7503	5503535	0					
ANR	5503538	IdentifierDeclStatement	int val ;	274:1:7222:7229	5503535	0	True				
ANR	5503539	IdentifierDecl	val		5503535	0					
ANR	5503540	IdentifierDeclType	int		5503535	0					
ANR	5503541	Identifier	val		5503535	1					
ANR	5503542	IdentifierDeclStatement	"bool found = ad -> EvalBool ( ATTR_TIMER_REMOVE_CHECK , NULL , val ) ;"	275:1:7232:7293	5503535	1	True				
ANR	5503543	IdentifierDecl	"found = ad -> EvalBool ( ATTR_TIMER_REMOVE_CHECK , NULL , val )"		5503535	0					
ANR	5503544	IdentifierDeclType	bool		5503535	0					
ANR	5503545	Identifier	found		5503535	1					
ANR	5503546	AssignmentExpression	"found = ad -> EvalBool ( ATTR_TIMER_REMOVE_CHECK , NULL , val )"		5503535	2		=			
ANR	5503547	Identifier	found		5503535	0					
ANR	5503548	CallExpression	"ad -> EvalBool ( ATTR_TIMER_REMOVE_CHECK , NULL , val )"		5503535	1					
ANR	5503549	Callee	ad -> EvalBool		5503535	0					
ANR	5503550	PtrMemberAccess	ad -> EvalBool		5503535	0					
ANR	5503551	Identifier	ad		5503535	0					
ANR	5503552	Identifier	EvalBool		5503535	1					
ANR	5503553	ArgumentList	ATTR_TIMER_REMOVE_CHECK		5503535	1					
ANR	5503554	Argument	ATTR_TIMER_REMOVE_CHECK		5503535	0					
ANR	5503555	Identifier	ATTR_TIMER_REMOVE_CHECK		5503535	0					
ANR	5503556	Argument	NULL		5503535	1					
ANR	5503557	Identifier	NULL		5503535	0					
ANR	5503558	Argument	val		5503535	2					
ANR	5503559	Identifier	val		5503535	0					
ANR	5503560	ReturnStatement	"return found && ( ( val != 0 ) == timer_remove ) && user_policy_ad_checker ( ad , periodic_hold , periodic_remove , periodic_release , hold_check , remove_check ) ;"	277:1:7298:7501	5503535	2	True				
ANR	5503561	AndExpression	"found && ( ( val != 0 ) == timer_remove ) && user_policy_ad_checker ( ad , periodic_hold , periodic_remove , periodic_release , hold_check , remove_check )"		5503535	0		&&			
ANR	5503562	Identifier	found		5503535	0					
ANR	5503563	AndExpression	"( ( val != 0 ) == timer_remove ) && user_policy_ad_checker ( ad , periodic_hold , periodic_remove , periodic_release , hold_check , remove_check )"		5503535	1		&&			
ANR	5503564	EqualityExpression	( val != 0 ) == timer_remove		5503535	0		==			
ANR	5503565	EqualityExpression	val != 0		5503535	0		!=			
ANR	5503566	Identifier	val		5503535	0					
ANR	5503567	PrimaryExpression	0		5503535	1					
ANR	5503568	Identifier	timer_remove		5503535	1					
ANR	5503569	CallExpression	"user_policy_ad_checker ( ad , periodic_hold , periodic_remove , periodic_release , hold_check , remove_check )"		5503535	1					
ANR	5503570	Callee	user_policy_ad_checker		5503535	0					
ANR	5503571	Identifier	user_policy_ad_checker		5503535	0					
ANR	5503572	ArgumentList	ad		5503535	1					
ANR	5503573	Argument	ad		5503535	0					
ANR	5503574	Identifier	ad		5503535	0					
ANR	5503575	Argument	periodic_hold		5503535	1					
ANR	5503576	Identifier	periodic_hold		5503535	0					
ANR	5503577	Argument	periodic_remove		5503535	2					
ANR	5503578	Identifier	periodic_remove		5503535	0					
ANR	5503579	Argument	periodic_release		5503535	3					
ANR	5503580	Identifier	periodic_release		5503535	0					
ANR	5503581	Argument	hold_check		5503535	4					
ANR	5503582	Identifier	hold_check		5503535	0					
ANR	5503583	Argument	remove_check		5503535	5					
ANR	5503584	Identifier	remove_check		5503535	0					
ANR	5503585	ReturnType	bool		5503535	1					
ANR	5503586	Identifier	user_policy_ad_checker		5503535	2					
ANR	5503587	ParameterList	"ClassAd * ad , bool timer_remove , bool periodic_hold , bool periodic_remove , bool periodic_release , bool hold_check , bool remove_check"		5503535	3					
ANR	5503588	Parameter	ClassAd * ad	266:28:7043:7053	5503535	0	True				
ANR	5503589	ParameterType	ClassAd *		5503535	0					
ANR	5503590	Identifier	ad		5503535	1					
ANR	5503591	Parameter	bool timer_remove	267:7:7063:7079	5503535	1	True				
ANR	5503592	ParameterType	bool		5503535	0					
ANR	5503593	Identifier	timer_remove		5503535	1					
ANR	5503594	Parameter	bool periodic_hold	268:7:7089:7106	5503535	2	True				
ANR	5503595	ParameterType	bool		5503535	0					
ANR	5503596	Identifier	periodic_hold		5503535	1					
ANR	5503597	Parameter	bool periodic_remove	269:7:7116:7135	5503535	3	True				
ANR	5503598	ParameterType	bool		5503535	0					
ANR	5503599	Identifier	periodic_remove		5503535	1					
ANR	5503600	Parameter	bool periodic_release	270:7:7145:7165	5503535	4	True				
ANR	5503601	ParameterType	bool		5503535	0					
ANR	5503602	Identifier	periodic_release		5503535	1					
ANR	5503603	Parameter	bool hold_check	271:7:7175:7189	5503535	5	True				
ANR	5503604	ParameterType	bool		5503535	0					
ANR	5503605	Identifier	hold_check		5503535	1					
ANR	5503606	Parameter	bool remove_check	272:7:7199:7215	5503535	6	True				
ANR	5503607	ParameterType	bool		5503535	0					
ANR	5503608	Identifier	remove_check		5503535	1					
ANR	5503609	CFGEntryNode	ENTRY		5503535		True				
ANR	5503610	CFGExitNode	EXIT		5503535		True				
ANR	5503611	Symbol	val		5503535						
ANR	5503612	Symbol	ad		5503535						
ANR	5503613	Symbol	NULL		5503535						
ANR	5503614	Symbol	periodic_release		5503535						
ANR	5503615	Symbol	periodic_remove		5503535						
ANR	5503616	Symbol	ad -> EvalBool		5503535						
ANR	5503617	Symbol	periodic_hold		5503535						
ANR	5503618	Symbol	remove_check		5503535						
ANR	5503619	Symbol	* ad		5503535						
ANR	5503620	Symbol	timer_remove		5503535						
ANR	5503621	Symbol	ATTR_TIMER_REMOVE_CHECK		5503535						
ANR	5503622	Symbol	found		5503535						
ANR	5503623	Symbol	hold_check		5503535						
ANR	5503624	Symbol	user_policy_ad_checker		5503535						
ANR	5503625	Function	insert_into_ad	286:0:7506:7668							
ANR	5503626	FunctionDef	"insert_into_ad (ClassAd * ad , const char * attribute , const char * value)"		5503625	0					
ANR	5503627	CompoundStatement		286:75:7581:7668	5503625	0					
ANR	5503628	IdentifierDeclStatement	MyString buf ;	287:1:7584:7596	5503625	0	True				
ANR	5503629	IdentifierDecl	buf		5503625	0					
ANR	5503630	IdentifierDeclType	MyString		5503625	0					
ANR	5503631	Identifier	buf		5503625	1					
ANR	5503632	ExpressionStatement	"buf . sprintf ( ""%s = %s"" , attribute , value )"	289:1:7600:7640	5503625	1	True				
ANR	5503633	CallExpression	"buf . sprintf ( ""%s = %s"" , attribute , value )"		5503625	0					
ANR	5503634	Callee	buf . sprintf		5503625	0					
ANR	5503635	MemberAccess	buf . sprintf		5503625	0					
ANR	5503636	Identifier	buf		5503625	0					
ANR	5503637	Identifier	sprintf		5503625	1					
ANR	5503638	ArgumentList	"""%s = %s"""		5503625	1					
ANR	5503639	Argument	"""%s = %s"""		5503625	0					
ANR	5503640	PrimaryExpression	"""%s = %s"""		5503625	0					
ANR	5503641	Argument	attribute		5503625	1					
ANR	5503642	Identifier	attribute		5503625	0					
ANR	5503643	Argument	value		5503625	2					
ANR	5503644	Identifier	value		5503625	0					
ANR	5503645	ExpressionStatement	ad -> Insert ( buf . Value ( ) )	290:1:7643:7666	5503625	2	True				
ANR	5503646	CallExpression	ad -> Insert ( buf . Value ( ) )		5503625	0					
ANR	5503647	Callee	ad -> Insert		5503625	0					
ANR	5503648	PtrMemberAccess	ad -> Insert		5503625	0					
ANR	5503649	Identifier	ad		5503625	0					
ANR	5503650	Identifier	Insert		5503625	1					
ANR	5503651	ArgumentList	buf . Value ( )		5503625	1					
ANR	5503652	Argument	buf . Value ( )		5503625	0					
ANR	5503653	CallExpression	buf . Value ( )		5503625	0					
ANR	5503654	Callee	buf . Value		5503625	0					
ANR	5503655	MemberAccess	buf . Value		5503625	0					
ANR	5503656	Identifier	buf		5503625	0					
ANR	5503657	Identifier	Value		5503625	1					
ANR	5503658	ArgumentList			5503625	1					
ANR	5503659	ReturnType	void		5503625	1					
ANR	5503660	Identifier	insert_into_ad		5503625	2					
ANR	5503661	ParameterList	"ClassAd * ad , const char * attribute , const char * value"		5503625	3					
ANR	5503662	Parameter	ClassAd * ad	286:20:7526:7536	5503625	0	True				
ANR	5503663	ParameterType	ClassAd *		5503625	0					
ANR	5503664	Identifier	ad		5503625	1					
ANR	5503665	Parameter	const char * attribute	286:33:7539:7559	5503625	1	True				
ANR	5503666	ParameterType	const char *		5503625	0					
ANR	5503667	Identifier	attribute		5503625	1					
ANR	5503668	Parameter	const char * value	286:56:7562:7578	5503625	2	True				
ANR	5503669	ParameterType	const char *		5503625	0					
ANR	5503670	Identifier	value		5503625	1					
ANR	5503671	CFGEntryNode	ENTRY		5503625		True				
ANR	5503672	CFGExitNode	EXIT		5503625		True				
ANR	5503673	Symbol	buf		5503625						
ANR	5503674	Symbol	ad		5503625						
ANR	5503675	Symbol	buf . Value		5503625						
ANR	5503676	Symbol	attribute		5503625						
ANR	5503677	Symbol	value		5503625						
ANR	5503678	Function	cut_assert_z_impl	294:0:7739:8104							
ANR	5503679	FunctionDef	"cut_assert_z_impl (int value , const char * expr , const char * file , int line)"		5503678	0					
ANR	5503680	CompoundStatement		295:0:7819:8104	5503678	0					
ANR	5503681	IdentifierDeclStatement	int tmp_errno = errno ;	296:1:7822:7843	5503678	0	True				
ANR	5503682	IdentifierDecl	tmp_errno = errno		5503678	0					
ANR	5503683	IdentifierDeclType	int		5503678	0					
ANR	5503684	Identifier	tmp_errno		5503678	1					
ANR	5503685	AssignmentExpression	tmp_errno = errno		5503678	2		=			
ANR	5503686	Identifier	errno		5503678	0					
ANR	5503687	Identifier	errno		5503678	1					
ANR	5503688	IfStatement	if ( value != 0 )		5503678	1					
ANR	5503689	Condition	value != 0	298:5:7851:7860	5503678	0	True				
ANR	5503690	EqualityExpression	value != 0		5503678	0		!=			
ANR	5503691	Identifier	value		5503678	0					
ANR	5503692	PrimaryExpression	0		5503678	1					
ANR	5503693	CompoundStatement		4:17:43:43	5503678	1					
ANR	5503694	Statement	dprintf	299:2:7867:7873	5503678	0	True				
ANR	5503695	Statement	(	299:9:7874:7874	5503678	1	True				
ANR	5503696	Statement	D_ALWAYS	299:10:7875:7882	5503678	2	True				
ANR	5503697	Statement	","	299:18:7883:7883	5503678	3	True				
ANR	5503698	Statement	"""Failed cut_assert_z(%s) with value %d at line %d in """	299:20:7885:7938	5503678	4	True				
ANR	5503699	Statement	"""file %s.\\n"""	300:3:7943:7954	5503678	5	True				
ANR	5503700	Statement	","	300:15:7955:7955	5503678	6	True				
ANR	5503701	Statement	expr	300:17:7957:7960	5503678	7	True				
ANR	5503702	Statement	","	300:21:7961:7961	5503678	8	True				
ANR	5503703	Statement	value	300:23:7963:7967	5503678	9	True				
ANR	5503704	Statement	","	300:28:7968:7968	5503678	10	True				
ANR	5503705	Statement	line	300:30:7970:7973	5503678	11	True				
ANR	5503706	Statement	","	300:34:7974:7974	5503678	12	True				
ANR	5503707	Statement	file	300:36:7976:7979	5503678	13	True				
ANR	5503708	Statement	)	300:40:7980:7980	5503678	14	True				
ANR	5503709	ExpressionStatement		300:41:7981:7981	5503678	15	True				
ANR	5503710	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	301:2:7985:8077	5503678	16	True				
ANR	5503711	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5503678	0					
ANR	5503712	Callee	dprintf		5503678	0					
ANR	5503713	Identifier	dprintf		5503678	0					
ANR	5503714	ArgumentList	D_ALWAYS		5503678	1					
ANR	5503715	Argument	D_ALWAYS		5503678	0					
ANR	5503716	Identifier	D_ALWAYS		5503678	0					
ANR	5503717	Argument	"""A possibly useful errno is %d(%s).\\n"""		5503678	1					
ANR	5503718	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5503678	0					
ANR	5503719	Argument	tmp_errno		5503678	2					
ANR	5503720	Identifier	tmp_errno		5503678	0					
ANR	5503721	Argument	strerror ( tmp_errno )		5503678	3					
ANR	5503722	CallExpression	strerror ( tmp_errno )		5503678	0					
ANR	5503723	Callee	strerror		5503678	0					
ANR	5503724	Identifier	strerror		5503678	0					
ANR	5503725	ArgumentList	tmp_errno		5503678	1					
ANR	5503726	Argument	tmp_errno		5503678	0					
ANR	5503727	Identifier	tmp_errno		5503678	0					
ANR	5503728	ExpressionStatement	exit ( EXIT_FAILURE )	303:2:8081:8099	5503678	17	True				
ANR	5503729	CallExpression	exit ( EXIT_FAILURE )		5503678	0					
ANR	5503730	Callee	exit		5503678	0					
ANR	5503731	Identifier	exit		5503678	0					
ANR	5503732	ArgumentList	EXIT_FAILURE		5503678	1					
ANR	5503733	Argument	EXIT_FAILURE		5503678	0					
ANR	5503734	Identifier	EXIT_FAILURE		5503678	0					
ANR	5503735	ReturnType	void		5503678	1					
ANR	5503736	Identifier	cut_assert_z_impl		5503678	2					
ANR	5503737	ParameterList	"int value , const char * expr , const char * file , int line"		5503678	3					
ANR	5503738	Parameter	int value	294:23:7762:7770	5503678	0	True				
ANR	5503739	ParameterType	int		5503678	0					
ANR	5503740	Identifier	value		5503678	1					
ANR	5503741	Parameter	const char * expr	294:34:7773:7788	5503678	1	True				
ANR	5503742	ParameterType	const char *		5503678	0					
ANR	5503743	Identifier	expr		5503678	1					
ANR	5503744	Parameter	const char * file	294:52:7791:7806	5503678	2	True				
ANR	5503745	ParameterType	const char *		5503678	0					
ANR	5503746	Identifier	file		5503678	1					
ANR	5503747	Parameter	int line	294:70:7809:7816	5503678	3	True				
ANR	5503748	ParameterType	int		5503678	0					
ANR	5503749	Identifier	line		5503678	1					
ANR	5503750	CFGEntryNode	ENTRY		5503678		True				
ANR	5503751	CFGExitNode	EXIT		5503678		True				
ANR	5503752	Symbol	strerror		5503678						
ANR	5503753	Symbol	errno		5503678						
ANR	5503754	Symbol	file		5503678						
ANR	5503755	Symbol	tmp_errno		5503678						
ANR	5503756	Symbol	EXIT_FAILURE		5503678						
ANR	5503757	Symbol	line		5503678						
ANR	5503758	Symbol	D_ALWAYS		5503678						
ANR	5503759	Symbol	expr		5503678						
ANR	5503760	Symbol	value		5503678						
ANR	5503761	Function	cut_assert_nz_impl	307:0:8107:8479							
ANR	5503762	FunctionDef	"cut_assert_nz_impl (int value , const char * expr , const char * file , int line)"		5503761	0					
ANR	5503763	CompoundStatement		308:0:8187:8479	5503761	0					
ANR	5503764	IdentifierDeclStatement	int tmp_errno = errno ;	309:1:8190:8211	5503761	0	True				
ANR	5503765	IdentifierDecl	tmp_errno = errno		5503761	0					
ANR	5503766	IdentifierDeclType	int		5503761	0					
ANR	5503767	Identifier	tmp_errno		5503761	1					
ANR	5503768	AssignmentExpression	tmp_errno = errno		5503761	2		=			
ANR	5503769	Identifier	errno		5503761	0					
ANR	5503770	Identifier	errno		5503761	1					
ANR	5503771	IfStatement	if ( value == 0 )		5503761	1					
ANR	5503772	Condition	value == 0	311:5:8219:8228	5503761	0	True				
ANR	5503773	EqualityExpression	value == 0		5503761	0		==			
ANR	5503774	Identifier	value		5503761	0					
ANR	5503775	PrimaryExpression	0		5503761	1					
ANR	5503776	CompoundStatement		4:17:43:43	5503761	1					
ANR	5503777	Statement	dprintf	312:2:8235:8241	5503761	0	True				
ANR	5503778	Statement	(	312:9:8242:8242	5503761	1	True				
ANR	5503779	Statement	D_ALWAYS	312:10:8243:8250	5503761	2	True				
ANR	5503780	Statement	","	312:18:8251:8251	5503761	3	True				
ANR	5503781	Statement	"""Failed cut_assert_nz(%s) with value %d at %d in %s."""	312:20:8253:8305	5503761	4	True				
ANR	5503782	Statement	"""\\n"""	313:3:8310:8313	5503761	5	True				
ANR	5503783	Statement	","	313:7:8314:8314	5503761	6	True				
ANR	5503784	Statement	expr	313:9:8316:8319	5503761	7	True				
ANR	5503785	Statement	","	313:13:8320:8320	5503761	8	True				
ANR	5503786	Statement	value	313:15:8322:8326	5503761	9	True				
ANR	5503787	Statement	","	313:20:8327:8327	5503761	10	True				
ANR	5503788	Statement	line	313:22:8329:8332	5503761	11	True				
ANR	5503789	Statement	","	313:26:8333:8333	5503761	12	True				
ANR	5503790	Statement	file	313:28:8335:8338	5503761	13	True				
ANR	5503791	Statement	)	313:32:8339:8339	5503761	14	True				
ANR	5503792	ExpressionStatement		313:33:8340:8340	5503761	15	True				
ANR	5503793	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	314:2:8344:8436	5503761	16	True				
ANR	5503794	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5503761	0					
ANR	5503795	Callee	dprintf		5503761	0					
ANR	5503796	Identifier	dprintf		5503761	0					
ANR	5503797	ArgumentList	D_ALWAYS		5503761	1					
ANR	5503798	Argument	D_ALWAYS		5503761	0					
ANR	5503799	Identifier	D_ALWAYS		5503761	0					
ANR	5503800	Argument	"""A possibly useful errno is %d(%s).\\n"""		5503761	1					
ANR	5503801	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5503761	0					
ANR	5503802	Argument	tmp_errno		5503761	2					
ANR	5503803	Identifier	tmp_errno		5503761	0					
ANR	5503804	Argument	strerror ( tmp_errno )		5503761	3					
ANR	5503805	CallExpression	strerror ( tmp_errno )		5503761	0					
ANR	5503806	Callee	strerror		5503761	0					
ANR	5503807	Identifier	strerror		5503761	0					
ANR	5503808	ArgumentList	tmp_errno		5503761	1					
ANR	5503809	Argument	tmp_errno		5503761	0					
ANR	5503810	Identifier	tmp_errno		5503761	0					
ANR	5503811	ExpressionStatement	exit ( EXIT_FAILURE )	316:2:8440:8458	5503761	17	True				
ANR	5503812	CallExpression	exit ( EXIT_FAILURE )		5503761	0					
ANR	5503813	Callee	exit		5503761	0					
ANR	5503814	Identifier	exit		5503761	0					
ANR	5503815	ArgumentList	EXIT_FAILURE		5503761	1					
ANR	5503816	Argument	EXIT_FAILURE		5503761	0					
ANR	5503817	Identifier	EXIT_FAILURE		5503761	0					
ANR	5503818	ReturnStatement	return value ;	319:1:8465:8477	5503761	2	True				
ANR	5503819	Identifier	value		5503761	0					
ANR	5503820	ReturnType	int		5503761	1					
ANR	5503821	Identifier	cut_assert_nz_impl		5503761	2					
ANR	5503822	ParameterList	"int value , const char * expr , const char * file , int line"		5503761	3					
ANR	5503823	Parameter	int value	307:23:8130:8138	5503761	0	True				
ANR	5503824	ParameterType	int		5503761	0					
ANR	5503825	Identifier	value		5503761	1					
ANR	5503826	Parameter	const char * expr	307:34:8141:8156	5503761	1	True				
ANR	5503827	ParameterType	const char *		5503761	0					
ANR	5503828	Identifier	expr		5503761	1					
ANR	5503829	Parameter	const char * file	307:52:8159:8174	5503761	2	True				
ANR	5503830	ParameterType	const char *		5503761	0					
ANR	5503831	Identifier	file		5503761	1					
ANR	5503832	Parameter	int line	307:70:8177:8184	5503761	3	True				
ANR	5503833	ParameterType	int		5503761	0					
ANR	5503834	Identifier	line		5503761	1					
ANR	5503835	CFGEntryNode	ENTRY		5503761		True				
ANR	5503836	CFGExitNode	EXIT		5503761		True				
ANR	5503837	Symbol	strerror		5503761						
ANR	5503838	Symbol	errno		5503761						
ANR	5503839	Symbol	file		5503761						
ANR	5503840	Symbol	tmp_errno		5503761						
ANR	5503841	Symbol	EXIT_FAILURE		5503761						
ANR	5503842	Symbol	line		5503761						
ANR	5503843	Symbol	D_ALWAYS		5503761						
ANR	5503844	Symbol	expr		5503761						
ANR	5503845	Symbol	value		5503761						
ANR	5503846	Function	cut_assert_gz_impl	322:0:8482:8854							
ANR	5503847	FunctionDef	"cut_assert_gz_impl (int value , const char * expr , const char * file , int line)"		5503846	0					
ANR	5503848	CompoundStatement		323:0:8562:8854	5503846	0					
ANR	5503849	IdentifierDeclStatement	int tmp_errno = errno ;	324:1:8565:8586	5503846	0	True				
ANR	5503850	IdentifierDecl	tmp_errno = errno		5503846	0					
ANR	5503851	IdentifierDeclType	int		5503846	0					
ANR	5503852	Identifier	tmp_errno		5503846	1					
ANR	5503853	AssignmentExpression	tmp_errno = errno		5503846	2		=			
ANR	5503854	Identifier	errno		5503846	0					
ANR	5503855	Identifier	errno		5503846	1					
ANR	5503856	IfStatement	if ( value <= 0 )		5503846	1					
ANR	5503857	Condition	value <= 0	326:5:8594:8603	5503846	0	True				
ANR	5503858	RelationalExpression	value <= 0		5503846	0		<=			
ANR	5503859	Identifier	value		5503846	0					
ANR	5503860	PrimaryExpression	0		5503846	1					
ANR	5503861	CompoundStatement		4:17:43:43	5503846	1					
ANR	5503862	Statement	dprintf	327:2:8610:8616	5503846	0	True				
ANR	5503863	Statement	(	327:9:8617:8617	5503846	1	True				
ANR	5503864	Statement	D_ALWAYS	327:10:8618:8625	5503846	2	True				
ANR	5503865	Statement	","	327:18:8626:8626	5503846	3	True				
ANR	5503866	Statement	"""Failed cut_assert_gz(%s) with value %d at %d in %s."""	327:20:8628:8680	5503846	4	True				
ANR	5503867	Statement	"""\\n"""	328:3:8685:8688	5503846	5	True				
ANR	5503868	Statement	","	328:7:8689:8689	5503846	6	True				
ANR	5503869	Statement	expr	328:9:8691:8694	5503846	7	True				
ANR	5503870	Statement	","	328:13:8695:8695	5503846	8	True				
ANR	5503871	Statement	value	328:15:8697:8701	5503846	9	True				
ANR	5503872	Statement	","	328:20:8702:8702	5503846	10	True				
ANR	5503873	Statement	line	328:22:8704:8707	5503846	11	True				
ANR	5503874	Statement	","	328:26:8708:8708	5503846	12	True				
ANR	5503875	Statement	file	328:28:8710:8713	5503846	13	True				
ANR	5503876	Statement	)	328:32:8714:8714	5503846	14	True				
ANR	5503877	ExpressionStatement		328:33:8715:8715	5503846	15	True				
ANR	5503878	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	329:2:8719:8811	5503846	16	True				
ANR	5503879	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5503846	0					
ANR	5503880	Callee	dprintf		5503846	0					
ANR	5503881	Identifier	dprintf		5503846	0					
ANR	5503882	ArgumentList	D_ALWAYS		5503846	1					
ANR	5503883	Argument	D_ALWAYS		5503846	0					
ANR	5503884	Identifier	D_ALWAYS		5503846	0					
ANR	5503885	Argument	"""A possibly useful errno is %d(%s).\\n"""		5503846	1					
ANR	5503886	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5503846	0					
ANR	5503887	Argument	tmp_errno		5503846	2					
ANR	5503888	Identifier	tmp_errno		5503846	0					
ANR	5503889	Argument	strerror ( tmp_errno )		5503846	3					
ANR	5503890	CallExpression	strerror ( tmp_errno )		5503846	0					
ANR	5503891	Callee	strerror		5503846	0					
ANR	5503892	Identifier	strerror		5503846	0					
ANR	5503893	ArgumentList	tmp_errno		5503846	1					
ANR	5503894	Argument	tmp_errno		5503846	0					
ANR	5503895	Identifier	tmp_errno		5503846	0					
ANR	5503896	ExpressionStatement	exit ( EXIT_FAILURE )	331:2:8815:8833	5503846	17	True				
ANR	5503897	CallExpression	exit ( EXIT_FAILURE )		5503846	0					
ANR	5503898	Callee	exit		5503846	0					
ANR	5503899	Identifier	exit		5503846	0					
ANR	5503900	ArgumentList	EXIT_FAILURE		5503846	1					
ANR	5503901	Argument	EXIT_FAILURE		5503846	0					
ANR	5503902	Identifier	EXIT_FAILURE		5503846	0					
ANR	5503903	ReturnStatement	return value ;	334:1:8840:8852	5503846	2	True				
ANR	5503904	Identifier	value		5503846	0					
ANR	5503905	ReturnType	int		5503846	1					
ANR	5503906	Identifier	cut_assert_gz_impl		5503846	2					
ANR	5503907	ParameterList	"int value , const char * expr , const char * file , int line"		5503846	3					
ANR	5503908	Parameter	int value	322:23:8505:8513	5503846	0	True				
ANR	5503909	ParameterType	int		5503846	0					
ANR	5503910	Identifier	value		5503846	1					
ANR	5503911	Parameter	const char * expr	322:34:8516:8531	5503846	1	True				
ANR	5503912	ParameterType	const char *		5503846	0					
ANR	5503913	Identifier	expr		5503846	1					
ANR	5503914	Parameter	const char * file	322:52:8534:8549	5503846	2	True				
ANR	5503915	ParameterType	const char *		5503846	0					
ANR	5503916	Identifier	file		5503846	1					
ANR	5503917	Parameter	int line	322:70:8552:8559	5503846	3	True				
ANR	5503918	ParameterType	int		5503846	0					
ANR	5503919	Identifier	line		5503846	1					
ANR	5503920	CFGEntryNode	ENTRY		5503846		True				
ANR	5503921	CFGExitNode	EXIT		5503846		True				
ANR	5503922	Symbol	strerror		5503846						
ANR	5503923	Symbol	errno		5503846						
ANR	5503924	Symbol	file		5503846						
ANR	5503925	Symbol	tmp_errno		5503846						
ANR	5503926	Symbol	EXIT_FAILURE		5503846						
ANR	5503927	Symbol	line		5503846						
ANR	5503928	Symbol	D_ALWAYS		5503846						
ANR	5503929	Symbol	expr		5503846						
ANR	5503930	Symbol	value		5503846						
ANR	5503931	Function	cut_assert_lz_impl	337:0:8857:9229							
ANR	5503932	FunctionDef	"cut_assert_lz_impl (int value , const char * expr , const char * file , int line)"		5503931	0					
ANR	5503933	CompoundStatement		338:0:8937:9229	5503931	0					
ANR	5503934	IdentifierDeclStatement	int tmp_errno = errno ;	339:1:8940:8961	5503931	0	True				
ANR	5503935	IdentifierDecl	tmp_errno = errno		5503931	0					
ANR	5503936	IdentifierDeclType	int		5503931	0					
ANR	5503937	Identifier	tmp_errno		5503931	1					
ANR	5503938	AssignmentExpression	tmp_errno = errno		5503931	2		=			
ANR	5503939	Identifier	errno		5503931	0					
ANR	5503940	Identifier	errno		5503931	1					
ANR	5503941	IfStatement	if ( value >= 0 )		5503931	1					
ANR	5503942	Condition	value >= 0	341:5:8969:8978	5503931	0	True				
ANR	5503943	RelationalExpression	value >= 0		5503931	0		>=			
ANR	5503944	Identifier	value		5503931	0					
ANR	5503945	PrimaryExpression	0		5503931	1					
ANR	5503946	CompoundStatement		4:17:43:43	5503931	1					
ANR	5503947	Statement	dprintf	342:2:8985:8991	5503931	0	True				
ANR	5503948	Statement	(	342:9:8992:8992	5503931	1	True				
ANR	5503949	Statement	D_ALWAYS	342:10:8993:9000	5503931	2	True				
ANR	5503950	Statement	","	342:18:9001:9001	5503931	3	True				
ANR	5503951	Statement	"""Failed cut_assert_lz(%s) with value %d at %d in %s."""	342:20:9003:9055	5503931	4	True				
ANR	5503952	Statement	"""\\n"""	343:3:9060:9063	5503931	5	True				
ANR	5503953	Statement	","	343:7:9064:9064	5503931	6	True				
ANR	5503954	Statement	expr	343:9:9066:9069	5503931	7	True				
ANR	5503955	Statement	","	343:13:9070:9070	5503931	8	True				
ANR	5503956	Statement	value	343:15:9072:9076	5503931	9	True				
ANR	5503957	Statement	","	343:20:9077:9077	5503931	10	True				
ANR	5503958	Statement	line	343:22:9079:9082	5503931	11	True				
ANR	5503959	Statement	","	343:26:9083:9083	5503931	12	True				
ANR	5503960	Statement	file	343:28:9085:9088	5503931	13	True				
ANR	5503961	Statement	)	343:32:9089:9089	5503931	14	True				
ANR	5503962	ExpressionStatement		343:33:9090:9090	5503931	15	True				
ANR	5503963	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	344:2:9094:9186	5503931	16	True				
ANR	5503964	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5503931	0					
ANR	5503965	Callee	dprintf		5503931	0					
ANR	5503966	Identifier	dprintf		5503931	0					
ANR	5503967	ArgumentList	D_ALWAYS		5503931	1					
ANR	5503968	Argument	D_ALWAYS		5503931	0					
ANR	5503969	Identifier	D_ALWAYS		5503931	0					
ANR	5503970	Argument	"""A possibly useful errno is %d(%s).\\n"""		5503931	1					
ANR	5503971	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5503931	0					
ANR	5503972	Argument	tmp_errno		5503931	2					
ANR	5503973	Identifier	tmp_errno		5503931	0					
ANR	5503974	Argument	strerror ( tmp_errno )		5503931	3					
ANR	5503975	CallExpression	strerror ( tmp_errno )		5503931	0					
ANR	5503976	Callee	strerror		5503931	0					
ANR	5503977	Identifier	strerror		5503931	0					
ANR	5503978	ArgumentList	tmp_errno		5503931	1					
ANR	5503979	Argument	tmp_errno		5503931	0					
ANR	5503980	Identifier	tmp_errno		5503931	0					
ANR	5503981	ExpressionStatement	exit ( EXIT_FAILURE )	346:2:9190:9208	5503931	17	True				
ANR	5503982	CallExpression	exit ( EXIT_FAILURE )		5503931	0					
ANR	5503983	Callee	exit		5503931	0					
ANR	5503984	Identifier	exit		5503931	0					
ANR	5503985	ArgumentList	EXIT_FAILURE		5503931	1					
ANR	5503986	Argument	EXIT_FAILURE		5503931	0					
ANR	5503987	Identifier	EXIT_FAILURE		5503931	0					
ANR	5503988	ReturnStatement	return value ;	349:1:9215:9227	5503931	2	True				
ANR	5503989	Identifier	value		5503931	0					
ANR	5503990	ReturnType	int		5503931	1					
ANR	5503991	Identifier	cut_assert_lz_impl		5503931	2					
ANR	5503992	ParameterList	"int value , const char * expr , const char * file , int line"		5503931	3					
ANR	5503993	Parameter	int value	337:23:8880:8888	5503931	0	True				
ANR	5503994	ParameterType	int		5503931	0					
ANR	5503995	Identifier	value		5503931	1					
ANR	5503996	Parameter	const char * expr	337:34:8891:8906	5503931	1	True				
ANR	5503997	ParameterType	const char *		5503931	0					
ANR	5503998	Identifier	expr		5503931	1					
ANR	5503999	Parameter	const char * file	337:52:8909:8924	5503931	2	True				
ANR	5504000	ParameterType	const char *		5503931	0					
ANR	5504001	Identifier	file		5503931	1					
ANR	5504002	Parameter	int line	337:70:8927:8934	5503931	3	True				
ANR	5504003	ParameterType	int		5503931	0					
ANR	5504004	Identifier	line		5503931	1					
ANR	5504005	CFGEntryNode	ENTRY		5503931		True				
ANR	5504006	CFGExitNode	EXIT		5503931		True				
ANR	5504007	Symbol	strerror		5503931						
ANR	5504008	Symbol	errno		5503931						
ANR	5504009	Symbol	file		5503931						
ANR	5504010	Symbol	tmp_errno		5503931						
ANR	5504011	Symbol	EXIT_FAILURE		5503931						
ANR	5504012	Symbol	line		5503931						
ANR	5504013	Symbol	D_ALWAYS		5503931						
ANR	5504014	Symbol	expr		5503931						
ANR	5504015	Symbol	value		5503931						
ANR	5504016	Function	cut_assert_gez_impl	352:0:9232:9605							
ANR	5504017	FunctionDef	"cut_assert_gez_impl (int value , const char * expr , const char * file , int line)"		5504016	0					
ANR	5504018	CompoundStatement		353:0:9313:9605	5504016	0					
ANR	5504019	IdentifierDeclStatement	int tmp_errno = errno ;	354:1:9316:9337	5504016	0	True				
ANR	5504020	IdentifierDecl	tmp_errno = errno		5504016	0					
ANR	5504021	IdentifierDeclType	int		5504016	0					
ANR	5504022	Identifier	tmp_errno		5504016	1					
ANR	5504023	AssignmentExpression	tmp_errno = errno		5504016	2		=			
ANR	5504024	Identifier	errno		5504016	0					
ANR	5504025	Identifier	errno		5504016	1					
ANR	5504026	IfStatement	if ( value < 0 )		5504016	1					
ANR	5504027	Condition	value < 0	356:5:9345:9353	5504016	0	True				
ANR	5504028	RelationalExpression	value < 0		5504016	0		<			
ANR	5504029	Identifier	value		5504016	0					
ANR	5504030	PrimaryExpression	0		5504016	1					
ANR	5504031	CompoundStatement		4:16:42:42	5504016	1					
ANR	5504032	Statement	dprintf	357:2:9360:9366	5504016	0	True				
ANR	5504033	Statement	(	357:9:9367:9367	5504016	1	True				
ANR	5504034	Statement	D_ALWAYS	357:10:9368:9375	5504016	2	True				
ANR	5504035	Statement	","	357:18:9376:9376	5504016	3	True				
ANR	5504036	Statement	"""Failed cut_assert_gez(%s) with value %d at %d in %s."""	357:20:9378:9431	5504016	4	True				
ANR	5504037	Statement	"""\\n"""	358:3:9436:9439	5504016	5	True				
ANR	5504038	Statement	","	358:7:9440:9440	5504016	6	True				
ANR	5504039	Statement	expr	358:9:9442:9445	5504016	7	True				
ANR	5504040	Statement	","	358:13:9446:9446	5504016	8	True				
ANR	5504041	Statement	value	358:15:9448:9452	5504016	9	True				
ANR	5504042	Statement	","	358:20:9453:9453	5504016	10	True				
ANR	5504043	Statement	line	358:22:9455:9458	5504016	11	True				
ANR	5504044	Statement	","	358:26:9459:9459	5504016	12	True				
ANR	5504045	Statement	file	358:28:9461:9464	5504016	13	True				
ANR	5504046	Statement	)	358:32:9465:9465	5504016	14	True				
ANR	5504047	ExpressionStatement		358:33:9466:9466	5504016	15	True				
ANR	5504048	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	359:2:9470:9562	5504016	16	True				
ANR	5504049	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504016	0					
ANR	5504050	Callee	dprintf		5504016	0					
ANR	5504051	Identifier	dprintf		5504016	0					
ANR	5504052	ArgumentList	D_ALWAYS		5504016	1					
ANR	5504053	Argument	D_ALWAYS		5504016	0					
ANR	5504054	Identifier	D_ALWAYS		5504016	0					
ANR	5504055	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504016	1					
ANR	5504056	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504016	0					
ANR	5504057	Argument	tmp_errno		5504016	2					
ANR	5504058	Identifier	tmp_errno		5504016	0					
ANR	5504059	Argument	strerror ( tmp_errno )		5504016	3					
ANR	5504060	CallExpression	strerror ( tmp_errno )		5504016	0					
ANR	5504061	Callee	strerror		5504016	0					
ANR	5504062	Identifier	strerror		5504016	0					
ANR	5504063	ArgumentList	tmp_errno		5504016	1					
ANR	5504064	Argument	tmp_errno		5504016	0					
ANR	5504065	Identifier	tmp_errno		5504016	0					
ANR	5504066	ExpressionStatement	exit ( EXIT_FAILURE )	361:2:9566:9584	5504016	17	True				
ANR	5504067	CallExpression	exit ( EXIT_FAILURE )		5504016	0					
ANR	5504068	Callee	exit		5504016	0					
ANR	5504069	Identifier	exit		5504016	0					
ANR	5504070	ArgumentList	EXIT_FAILURE		5504016	1					
ANR	5504071	Argument	EXIT_FAILURE		5504016	0					
ANR	5504072	Identifier	EXIT_FAILURE		5504016	0					
ANR	5504073	ReturnStatement	return value ;	364:1:9591:9603	5504016	2	True				
ANR	5504074	Identifier	value		5504016	0					
ANR	5504075	ReturnType	int		5504016	1					
ANR	5504076	Identifier	cut_assert_gez_impl		5504016	2					
ANR	5504077	ParameterList	"int value , const char * expr , const char * file , int line"		5504016	3					
ANR	5504078	Parameter	int value	352:24:9256:9264	5504016	0	True				
ANR	5504079	ParameterType	int		5504016	0					
ANR	5504080	Identifier	value		5504016	1					
ANR	5504081	Parameter	const char * expr	352:35:9267:9282	5504016	1	True				
ANR	5504082	ParameterType	const char *		5504016	0					
ANR	5504083	Identifier	expr		5504016	1					
ANR	5504084	Parameter	const char * file	352:53:9285:9300	5504016	2	True				
ANR	5504085	ParameterType	const char *		5504016	0					
ANR	5504086	Identifier	file		5504016	1					
ANR	5504087	Parameter	int line	352:71:9303:9310	5504016	3	True				
ANR	5504088	ParameterType	int		5504016	0					
ANR	5504089	Identifier	line		5504016	1					
ANR	5504090	CFGEntryNode	ENTRY		5504016		True				
ANR	5504091	CFGExitNode	EXIT		5504016		True				
ANR	5504092	Symbol	strerror		5504016						
ANR	5504093	Symbol	errno		5504016						
ANR	5504094	Symbol	file		5504016						
ANR	5504095	Symbol	tmp_errno		5504016						
ANR	5504096	Symbol	EXIT_FAILURE		5504016						
ANR	5504097	Symbol	line		5504016						
ANR	5504098	Symbol	D_ALWAYS		5504016						
ANR	5504099	Symbol	expr		5504016						
ANR	5504100	Symbol	value		5504016						
ANR	5504101	Function	cut_assert_lez_impl	367:0:9608:9981							
ANR	5504102	FunctionDef	"cut_assert_lez_impl (int value , const char * expr , const char * file , int line)"		5504101	0					
ANR	5504103	CompoundStatement		368:0:9689:9981	5504101	0					
ANR	5504104	IdentifierDeclStatement	int tmp_errno = errno ;	369:1:9692:9713	5504101	0	True				
ANR	5504105	IdentifierDecl	tmp_errno = errno		5504101	0					
ANR	5504106	IdentifierDeclType	int		5504101	0					
ANR	5504107	Identifier	tmp_errno		5504101	1					
ANR	5504108	AssignmentExpression	tmp_errno = errno		5504101	2		=			
ANR	5504109	Identifier	errno		5504101	0					
ANR	5504110	Identifier	errno		5504101	1					
ANR	5504111	IfStatement	if ( value > 0 )		5504101	1					
ANR	5504112	Condition	value > 0	371:5:9721:9729	5504101	0	True				
ANR	5504113	RelationalExpression	value > 0		5504101	0		>			
ANR	5504114	Identifier	value		5504101	0					
ANR	5504115	PrimaryExpression	0		5504101	1					
ANR	5504116	CompoundStatement		4:16:42:42	5504101	1					
ANR	5504117	Statement	dprintf	372:2:9736:9742	5504101	0	True				
ANR	5504118	Statement	(	372:9:9743:9743	5504101	1	True				
ANR	5504119	Statement	D_ALWAYS	372:10:9744:9751	5504101	2	True				
ANR	5504120	Statement	","	372:18:9752:9752	5504101	3	True				
ANR	5504121	Statement	"""Failed cut_assert_lez(%s) with value %d at %d in %s."""	372:20:9754:9807	5504101	4	True				
ANR	5504122	Statement	"""\\n"""	373:3:9812:9815	5504101	5	True				
ANR	5504123	Statement	","	373:7:9816:9816	5504101	6	True				
ANR	5504124	Statement	expr	373:9:9818:9821	5504101	7	True				
ANR	5504125	Statement	","	373:13:9822:9822	5504101	8	True				
ANR	5504126	Statement	value	373:15:9824:9828	5504101	9	True				
ANR	5504127	Statement	","	373:20:9829:9829	5504101	10	True				
ANR	5504128	Statement	line	373:22:9831:9834	5504101	11	True				
ANR	5504129	Statement	","	373:26:9835:9835	5504101	12	True				
ANR	5504130	Statement	file	373:28:9837:9840	5504101	13	True				
ANR	5504131	Statement	)	373:32:9841:9841	5504101	14	True				
ANR	5504132	ExpressionStatement		373:33:9842:9842	5504101	15	True				
ANR	5504133	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	374:2:9846:9938	5504101	16	True				
ANR	5504134	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504101	0					
ANR	5504135	Callee	dprintf		5504101	0					
ANR	5504136	Identifier	dprintf		5504101	0					
ANR	5504137	ArgumentList	D_ALWAYS		5504101	1					
ANR	5504138	Argument	D_ALWAYS		5504101	0					
ANR	5504139	Identifier	D_ALWAYS		5504101	0					
ANR	5504140	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504101	1					
ANR	5504141	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504101	0					
ANR	5504142	Argument	tmp_errno		5504101	2					
ANR	5504143	Identifier	tmp_errno		5504101	0					
ANR	5504144	Argument	strerror ( tmp_errno )		5504101	3					
ANR	5504145	CallExpression	strerror ( tmp_errno )		5504101	0					
ANR	5504146	Callee	strerror		5504101	0					
ANR	5504147	Identifier	strerror		5504101	0					
ANR	5504148	ArgumentList	tmp_errno		5504101	1					
ANR	5504149	Argument	tmp_errno		5504101	0					
ANR	5504150	Identifier	tmp_errno		5504101	0					
ANR	5504151	ExpressionStatement	exit ( EXIT_FAILURE )	376:2:9942:9960	5504101	17	True				
ANR	5504152	CallExpression	exit ( EXIT_FAILURE )		5504101	0					
ANR	5504153	Callee	exit		5504101	0					
ANR	5504154	Identifier	exit		5504101	0					
ANR	5504155	ArgumentList	EXIT_FAILURE		5504101	1					
ANR	5504156	Argument	EXIT_FAILURE		5504101	0					
ANR	5504157	Identifier	EXIT_FAILURE		5504101	0					
ANR	5504158	ReturnStatement	return value ;	379:1:9967:9979	5504101	2	True				
ANR	5504159	Identifier	value		5504101	0					
ANR	5504160	ReturnType	int		5504101	1					
ANR	5504161	Identifier	cut_assert_lez_impl		5504101	2					
ANR	5504162	ParameterList	"int value , const char * expr , const char * file , int line"		5504101	3					
ANR	5504163	Parameter	int value	367:24:9632:9640	5504101	0	True				
ANR	5504164	ParameterType	int		5504101	0					
ANR	5504165	Identifier	value		5504101	1					
ANR	5504166	Parameter	const char * expr	367:35:9643:9658	5504101	1	True				
ANR	5504167	ParameterType	const char *		5504101	0					
ANR	5504168	Identifier	expr		5504101	1					
ANR	5504169	Parameter	const char * file	367:53:9661:9676	5504101	2	True				
ANR	5504170	ParameterType	const char *		5504101	0					
ANR	5504171	Identifier	file		5504101	1					
ANR	5504172	Parameter	int line	367:71:9679:9686	5504101	3	True				
ANR	5504173	ParameterType	int		5504101	0					
ANR	5504174	Identifier	line		5504101	1					
ANR	5504175	CFGEntryNode	ENTRY		5504101		True				
ANR	5504176	CFGExitNode	EXIT		5504101		True				
ANR	5504177	Symbol	strerror		5504101						
ANR	5504178	Symbol	errno		5504101						
ANR	5504179	Symbol	file		5504101						
ANR	5504180	Symbol	tmp_errno		5504101						
ANR	5504181	Symbol	EXIT_FAILURE		5504101						
ANR	5504182	Symbol	line		5504101						
ANR	5504183	Symbol	D_ALWAYS		5504101						
ANR	5504184	Symbol	expr		5504101						
ANR	5504185	Symbol	value		5504101						
ANR	5504186	Function	cut_assert_true_impl	382:0:9984:10365							
ANR	5504187	FunctionDef	"cut_assert_true_impl (bool value , const char * expr , const char * file , int line)"		5504186	0					
ANR	5504188	CompoundStatement		383:0:10068:10365	5504186	0					
ANR	5504189	IdentifierDeclStatement	int tmp_errno = errno ;	384:1:10071:10092	5504186	0	True				
ANR	5504190	IdentifierDecl	tmp_errno = errno		5504186	0					
ANR	5504191	IdentifierDeclType	int		5504186	0					
ANR	5504192	Identifier	tmp_errno		5504186	1					
ANR	5504193	AssignmentExpression	tmp_errno = errno		5504186	2		=			
ANR	5504194	Identifier	errno		5504186	0					
ANR	5504195	Identifier	errno		5504186	1					
ANR	5504196	IfStatement	if ( ! value )		5504186	1					
ANR	5504197	Condition	! value	386:5:10100:10105	5504186	0	True				
ANR	5504198	UnaryOperationExpression	! value		5504186	0					
ANR	5504199	UnaryOperator	!		5504186	0					
ANR	5504200	Identifier	value		5504186	1					
ANR	5504201	CompoundStatement		4:13:39:39	5504186	1					
ANR	5504202	Statement	dprintf	387:2:10112:10118	5504186	0	True				
ANR	5504203	Statement	(	387:9:10119:10119	5504186	1	True				
ANR	5504204	Statement	D_ALWAYS	387:10:10120:10127	5504186	2	True				
ANR	5504205	Statement	","	387:18:10128:10128	5504186	3	True				
ANR	5504206	Statement	"""Failed cut_assert_true(%s) with value %s at %d in %s"""	387:20:10130:10183	5504186	4	True				
ANR	5504207	Statement	""".\\n"""	388:3:10188:10192	5504186	5	True				
ANR	5504208	Statement	","	388:8:10193:10193	5504186	6	True				
ANR	5504209	Statement	expr	388:10:10195:10198	5504186	7	True				
ANR	5504210	Statement	","	388:14:10199:10199	5504186	8	True				
ANR	5504211	Statement	tfstr	388:16:10201:10205	5504186	9	True				
ANR	5504212	Statement	(	388:21:10206:10206	5504186	10	True				
ANR	5504213	Statement	value	388:22:10207:10211	5504186	11	True				
ANR	5504214	Statement	)	388:27:10212:10212	5504186	12	True				
ANR	5504215	Statement	","	388:28:10213:10213	5504186	13	True				
ANR	5504216	Statement	line	388:30:10215:10218	5504186	14	True				
ANR	5504217	Statement	","	388:34:10219:10219	5504186	15	True				
ANR	5504218	Statement	file	388:36:10221:10224	5504186	16	True				
ANR	5504219	Statement	)	388:40:10225:10225	5504186	17	True				
ANR	5504220	ExpressionStatement		388:41:10226:10226	5504186	18	True				
ANR	5504221	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	389:2:10230:10322	5504186	19	True				
ANR	5504222	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504186	0					
ANR	5504223	Callee	dprintf		5504186	0					
ANR	5504224	Identifier	dprintf		5504186	0					
ANR	5504225	ArgumentList	D_ALWAYS		5504186	1					
ANR	5504226	Argument	D_ALWAYS		5504186	0					
ANR	5504227	Identifier	D_ALWAYS		5504186	0					
ANR	5504228	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504186	1					
ANR	5504229	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504186	0					
ANR	5504230	Argument	tmp_errno		5504186	2					
ANR	5504231	Identifier	tmp_errno		5504186	0					
ANR	5504232	Argument	strerror ( tmp_errno )		5504186	3					
ANR	5504233	CallExpression	strerror ( tmp_errno )		5504186	0					
ANR	5504234	Callee	strerror		5504186	0					
ANR	5504235	Identifier	strerror		5504186	0					
ANR	5504236	ArgumentList	tmp_errno		5504186	1					
ANR	5504237	Argument	tmp_errno		5504186	0					
ANR	5504238	Identifier	tmp_errno		5504186	0					
ANR	5504239	ExpressionStatement	exit ( EXIT_FAILURE )	391:2:10326:10344	5504186	20	True				
ANR	5504240	CallExpression	exit ( EXIT_FAILURE )		5504186	0					
ANR	5504241	Callee	exit		5504186	0					
ANR	5504242	Identifier	exit		5504186	0					
ANR	5504243	ArgumentList	EXIT_FAILURE		5504186	1					
ANR	5504244	Argument	EXIT_FAILURE		5504186	0					
ANR	5504245	Identifier	EXIT_FAILURE		5504186	0					
ANR	5504246	ReturnStatement	return value ;	394:1:10351:10363	5504186	2	True				
ANR	5504247	Identifier	value		5504186	0					
ANR	5504248	ReturnType	bool		5504186	1					
ANR	5504249	Identifier	cut_assert_true_impl		5504186	2					
ANR	5504250	ParameterList	"bool value , const char * expr , const char * file , int line"		5504186	3					
ANR	5504251	Parameter	bool value	382:26:10010:10019	5504186	0	True				
ANR	5504252	ParameterType	bool		5504186	0					
ANR	5504253	Identifier	value		5504186	1					
ANR	5504254	Parameter	const char * expr	382:38:10022:10037	5504186	1	True				
ANR	5504255	ParameterType	const char *		5504186	0					
ANR	5504256	Identifier	expr		5504186	1					
ANR	5504257	Parameter	const char * file	382:56:10040:10055	5504186	2	True				
ANR	5504258	ParameterType	const char *		5504186	0					
ANR	5504259	Identifier	file		5504186	1					
ANR	5504260	Parameter	int line	382:74:10058:10065	5504186	3	True				
ANR	5504261	ParameterType	int		5504186	0					
ANR	5504262	Identifier	line		5504186	1					
ANR	5504263	CFGEntryNode	ENTRY		5504186		True				
ANR	5504264	CFGExitNode	EXIT		5504186		True				
ANR	5504265	Symbol	strerror		5504186						
ANR	5504266	Symbol	errno		5504186						
ANR	5504267	Symbol	file		5504186						
ANR	5504268	Symbol	tmp_errno		5504186						
ANR	5504269	Symbol	EXIT_FAILURE		5504186						
ANR	5504270	Symbol	line		5504186						
ANR	5504271	Symbol	D_ALWAYS		5504186						
ANR	5504272	Symbol	expr		5504186						
ANR	5504273	Symbol	value		5504186						
ANR	5504274	Function	cut_assert_false_impl	397:0:10368:10750							
ANR	5504275	FunctionDef	"cut_assert_false_impl (bool value , const char * expr , const char * file , int line)"		5504274	0					
ANR	5504276	CompoundStatement		398:0:10453:10750	5504274	0					
ANR	5504277	IdentifierDeclStatement	int tmp_errno = errno ;	399:1:10456:10477	5504274	0	True				
ANR	5504278	IdentifierDecl	tmp_errno = errno		5504274	0					
ANR	5504279	IdentifierDeclType	int		5504274	0					
ANR	5504280	Identifier	tmp_errno		5504274	1					
ANR	5504281	AssignmentExpression	tmp_errno = errno		5504274	2		=			
ANR	5504282	Identifier	errno		5504274	0					
ANR	5504283	Identifier	errno		5504274	1					
ANR	5504284	IfStatement	if ( value )		5504274	1					
ANR	5504285	Condition	value	401:5:10485:10489	5504274	0	True				
ANR	5504286	Identifier	value		5504274	0					
ANR	5504287	CompoundStatement		4:12:38:38	5504274	1					
ANR	5504288	Statement	dprintf	402:2:10496:10502	5504274	0	True				
ANR	5504289	Statement	(	402:9:10503:10503	5504274	1	True				
ANR	5504290	Statement	D_ALWAYS	402:10:10504:10511	5504274	2	True				
ANR	5504291	Statement	","	402:18:10512:10512	5504274	3	True				
ANR	5504292	Statement	"""Failed cut_assert_false(%s) with value %s at %d in """	402:20:10514:10566	5504274	4	True				
ANR	5504293	Statement	"""%s.\\n"""	403:3:10571:10577	5504274	5	True				
ANR	5504294	Statement	","	403:10:10578:10578	5504274	6	True				
ANR	5504295	Statement	expr	403:12:10580:10583	5504274	7	True				
ANR	5504296	Statement	","	403:16:10584:10584	5504274	8	True				
ANR	5504297	Statement	tfstr	403:18:10586:10590	5504274	9	True				
ANR	5504298	Statement	(	403:23:10591:10591	5504274	10	True				
ANR	5504299	Statement	value	403:24:10592:10596	5504274	11	True				
ANR	5504300	Statement	)	403:29:10597:10597	5504274	12	True				
ANR	5504301	Statement	","	403:30:10598:10598	5504274	13	True				
ANR	5504302	Statement	line	403:32:10600:10603	5504274	14	True				
ANR	5504303	Statement	","	403:36:10604:10604	5504274	15	True				
ANR	5504304	Statement	file	403:38:10606:10609	5504274	16	True				
ANR	5504305	Statement	)	403:42:10610:10610	5504274	17	True				
ANR	5504306	ExpressionStatement		403:43:10611:10611	5504274	18	True				
ANR	5504307	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	404:2:10615:10707	5504274	19	True				
ANR	5504308	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504274	0					
ANR	5504309	Callee	dprintf		5504274	0					
ANR	5504310	Identifier	dprintf		5504274	0					
ANR	5504311	ArgumentList	D_ALWAYS		5504274	1					
ANR	5504312	Argument	D_ALWAYS		5504274	0					
ANR	5504313	Identifier	D_ALWAYS		5504274	0					
ANR	5504314	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504274	1					
ANR	5504315	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504274	0					
ANR	5504316	Argument	tmp_errno		5504274	2					
ANR	5504317	Identifier	tmp_errno		5504274	0					
ANR	5504318	Argument	strerror ( tmp_errno )		5504274	3					
ANR	5504319	CallExpression	strerror ( tmp_errno )		5504274	0					
ANR	5504320	Callee	strerror		5504274	0					
ANR	5504321	Identifier	strerror		5504274	0					
ANR	5504322	ArgumentList	tmp_errno		5504274	1					
ANR	5504323	Argument	tmp_errno		5504274	0					
ANR	5504324	Identifier	tmp_errno		5504274	0					
ANR	5504325	ExpressionStatement	exit ( EXIT_FAILURE )	406:2:10711:10729	5504274	20	True				
ANR	5504326	CallExpression	exit ( EXIT_FAILURE )		5504274	0					
ANR	5504327	Callee	exit		5504274	0					
ANR	5504328	Identifier	exit		5504274	0					
ANR	5504329	ArgumentList	EXIT_FAILURE		5504274	1					
ANR	5504330	Argument	EXIT_FAILURE		5504274	0					
ANR	5504331	Identifier	EXIT_FAILURE		5504274	0					
ANR	5504332	ReturnStatement	return value ;	409:1:10736:10748	5504274	2	True				
ANR	5504333	Identifier	value		5504274	0					
ANR	5504334	ReturnType	bool		5504274	1					
ANR	5504335	Identifier	cut_assert_false_impl		5504274	2					
ANR	5504336	ParameterList	"bool value , const char * expr , const char * file , int line"		5504274	3					
ANR	5504337	Parameter	bool value	397:27:10395:10404	5504274	0	True				
ANR	5504338	ParameterType	bool		5504274	0					
ANR	5504339	Identifier	value		5504274	1					
ANR	5504340	Parameter	const char * expr	397:39:10407:10422	5504274	1	True				
ANR	5504341	ParameterType	const char *		5504274	0					
ANR	5504342	Identifier	expr		5504274	1					
ANR	5504343	Parameter	const char * file	397:57:10425:10440	5504274	2	True				
ANR	5504344	ParameterType	const char *		5504274	0					
ANR	5504345	Identifier	file		5504274	1					
ANR	5504346	Parameter	int line	397:75:10443:10450	5504274	3	True				
ANR	5504347	ParameterType	int		5504274	0					
ANR	5504348	Identifier	line		5504274	1					
ANR	5504349	CFGEntryNode	ENTRY		5504274		True				
ANR	5504350	CFGExitNode	EXIT		5504274		True				
ANR	5504351	Symbol	strerror		5504274						
ANR	5504352	Symbol	errno		5504274						
ANR	5504353	Symbol	file		5504274						
ANR	5504354	Symbol	tmp_errno		5504274						
ANR	5504355	Symbol	EXIT_FAILURE		5504274						
ANR	5504356	Symbol	line		5504274						
ANR	5504357	Symbol	D_ALWAYS		5504274						
ANR	5504358	Symbol	expr		5504274						
ANR	5504359	Symbol	value		5504274						
ANR	5504360	Function	cut_assert_not_null_impl	412:0:10753:11144							
ANR	5504361	FunctionDef	"cut_assert_not_null_impl (void * value , const char * expr , const char * file , int line)"		5504360	0					
ANR	5504362	CompoundStatement		412:90:10843:11144	5504360	0					
ANR	5504363	IdentifierDeclStatement	int tmp_errno = errno ;	413:1:10846:10867	5504360	0	True				
ANR	5504364	IdentifierDecl	tmp_errno = errno		5504360	0					
ANR	5504365	IdentifierDeclType	int		5504360	0					
ANR	5504366	Identifier	tmp_errno		5504360	1					
ANR	5504367	AssignmentExpression	tmp_errno = errno		5504360	2		=			
ANR	5504368	Identifier	errno		5504360	0					
ANR	5504369	Identifier	errno		5504360	1					
ANR	5504370	IfStatement	if ( value == NULL )		5504360	1					
ANR	5504371	Condition	value == NULL	415:5:10875:10887	5504360	0	True				
ANR	5504372	EqualityExpression	value == NULL		5504360	0		==			
ANR	5504373	Identifier	value		5504360	0					
ANR	5504374	Identifier	NULL		5504360	1					
ANR	5504375	CompoundStatement		4:20:46:46	5504360	1					
ANR	5504376	Statement	dprintf	416:2:10894:10900	5504360	0	True				
ANR	5504377	Statement	(	416:9:10901:10901	5504360	1	True				
ANR	5504378	Statement	D_ALWAYS	416:10:10902:10909	5504360	2	True				
ANR	5504379	Statement	","	416:18:10910:10910	5504360	3	True				
ANR	5504380	Statement	"""Failed cut_assert_not_null(%s) with value %p at %d """	416:20:10912:10964	5504360	4	True				
ANR	5504381	Statement	"""in %s.\\n"""	417:3:10969:10978	5504360	5	True				
ANR	5504382	Statement	","	417:13:10979:10979	5504360	6	True				
ANR	5504383	Statement	expr	417:15:10981:10984	5504360	7	True				
ANR	5504384	Statement	","	417:19:10985:10985	5504360	8	True				
ANR	5504385	Statement	value	417:21:10987:10991	5504360	9	True				
ANR	5504386	Statement	","	417:26:10992:10992	5504360	10	True				
ANR	5504387	Statement	line	417:28:10994:10997	5504360	11	True				
ANR	5504388	Statement	","	417:32:10998:10998	5504360	12	True				
ANR	5504389	Statement	file	417:34:11000:11003	5504360	13	True				
ANR	5504390	Statement	)	417:38:11004:11004	5504360	14	True				
ANR	5504391	ExpressionStatement		417:39:11005:11005	5504360	15	True				
ANR	5504392	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	418:2:11009:11101	5504360	16	True				
ANR	5504393	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504360	0					
ANR	5504394	Callee	dprintf		5504360	0					
ANR	5504395	Identifier	dprintf		5504360	0					
ANR	5504396	ArgumentList	D_ALWAYS		5504360	1					
ANR	5504397	Argument	D_ALWAYS		5504360	0					
ANR	5504398	Identifier	D_ALWAYS		5504360	0					
ANR	5504399	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504360	1					
ANR	5504400	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504360	0					
ANR	5504401	Argument	tmp_errno		5504360	2					
ANR	5504402	Identifier	tmp_errno		5504360	0					
ANR	5504403	Argument	strerror ( tmp_errno )		5504360	3					
ANR	5504404	CallExpression	strerror ( tmp_errno )		5504360	0					
ANR	5504405	Callee	strerror		5504360	0					
ANR	5504406	Identifier	strerror		5504360	0					
ANR	5504407	ArgumentList	tmp_errno		5504360	1					
ANR	5504408	Argument	tmp_errno		5504360	0					
ANR	5504409	Identifier	tmp_errno		5504360	0					
ANR	5504410	ExpressionStatement	exit ( EXIT_FAILURE )	420:2:11105:11123	5504360	17	True				
ANR	5504411	CallExpression	exit ( EXIT_FAILURE )		5504360	0					
ANR	5504412	Callee	exit		5504360	0					
ANR	5504413	Identifier	exit		5504360	0					
ANR	5504414	ArgumentList	EXIT_FAILURE		5504360	1					
ANR	5504415	Argument	EXIT_FAILURE		5504360	0					
ANR	5504416	Identifier	EXIT_FAILURE		5504360	0					
ANR	5504417	ReturnStatement	return value ;	423:1:11130:11142	5504360	2	True				
ANR	5504418	Identifier	value		5504360	0					
ANR	5504419	ReturnType	void *		5504360	1					
ANR	5504420	Identifier	cut_assert_not_null_impl		5504360	2					
ANR	5504421	ParameterList	"void * value , const char * expr , const char * file , int line"		5504360	3					
ANR	5504422	Parameter	void * value	412:31:10784:10794	5504360	0	True				
ANR	5504423	ParameterType	void *		5504360	0					
ANR	5504424	Identifier	value		5504360	1					
ANR	5504425	Parameter	const char * expr	412:44:10797:10812	5504360	1	True				
ANR	5504426	ParameterType	const char *		5504360	0					
ANR	5504427	Identifier	expr		5504360	1					
ANR	5504428	Parameter	const char * file	412:62:10815:10830	5504360	2	True				
ANR	5504429	ParameterType	const char *		5504360	0					
ANR	5504430	Identifier	file		5504360	1					
ANR	5504431	Parameter	int line	412:80:10833:10840	5504360	3	True				
ANR	5504432	ParameterType	int		5504360	0					
ANR	5504433	Identifier	line		5504360	1					
ANR	5504434	CFGEntryNode	ENTRY		5504360		True				
ANR	5504435	CFGExitNode	EXIT		5504360		True				
ANR	5504436	Symbol	strerror		5504360						
ANR	5504437	Symbol	errno		5504360						
ANR	5504438	Symbol	file		5504360						
ANR	5504439	Symbol	tmp_errno		5504360						
ANR	5504440	Symbol	NULL		5504360						
ANR	5504441	Symbol	EXIT_FAILURE		5504360						
ANR	5504442	Symbol	line		5504360						
ANR	5504443	Symbol	D_ALWAYS		5504360						
ANR	5504444	Symbol	expr		5504360						
ANR	5504445	Symbol	value		5504360						
ANR	5504446	Function	cut_assert_null_impl	427:0:11218:11589							
ANR	5504447	FunctionDef	"cut_assert_null_impl (void * value , const char * expr , const char * file , int line)"		5504446	0					
ANR	5504448	CompoundStatement		427:85:11303:11589	5504446	0					
ANR	5504449	IdentifierDeclStatement	int tmp_errno = errno ;	428:1:11306:11327	5504446	0	True				
ANR	5504450	IdentifierDecl	tmp_errno = errno		5504446	0					
ANR	5504451	IdentifierDeclType	int		5504446	0					
ANR	5504452	Identifier	tmp_errno		5504446	1					
ANR	5504453	AssignmentExpression	tmp_errno = errno		5504446	2		=			
ANR	5504454	Identifier	errno		5504446	0					
ANR	5504455	Identifier	errno		5504446	1					
ANR	5504456	IfStatement	if ( value != NULL )		5504446	1					
ANR	5504457	Condition	value != NULL	430:5:11335:11347	5504446	0	True				
ANR	5504458	EqualityExpression	value != NULL		5504446	0		!=			
ANR	5504459	Identifier	value		5504446	0					
ANR	5504460	Identifier	NULL		5504446	1					
ANR	5504461	CompoundStatement		4:20:46:46	5504446	1					
ANR	5504462	Statement	dprintf	431:2:11354:11360	5504446	0	True				
ANR	5504463	Statement	(	431:9:11361:11361	5504446	1	True				
ANR	5504464	Statement	D_ALWAYS	431:10:11362:11369	5504446	2	True				
ANR	5504465	Statement	","	431:18:11370:11370	5504446	3	True				
ANR	5504466	Statement	"""Failed cut_assert_not_null(%s) with value %p at %d """	431:20:11372:11424	5504446	4	True				
ANR	5504467	Statement	"""in %s.\\n"""	432:3:11429:11438	5504446	5	True				
ANR	5504468	Statement	","	432:13:11439:11439	5504446	6	True				
ANR	5504469	Statement	expr	432:15:11441:11444	5504446	7	True				
ANR	5504470	Statement	","	432:19:11445:11445	5504446	8	True				
ANR	5504471	Statement	value	432:21:11447:11451	5504446	9	True				
ANR	5504472	Statement	","	432:26:11452:11452	5504446	10	True				
ANR	5504473	Statement	line	432:28:11454:11457	5504446	11	True				
ANR	5504474	Statement	","	432:32:11458:11458	5504446	12	True				
ANR	5504475	Statement	file	432:34:11460:11463	5504446	13	True				
ANR	5504476	Statement	)	432:38:11464:11464	5504446	14	True				
ANR	5504477	ExpressionStatement		432:39:11465:11465	5504446	15	True				
ANR	5504478	ExpressionStatement	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"	433:2:11469:11561	5504446	16	True				
ANR	5504479	CallExpression	"dprintf ( D_ALWAYS , ""A possibly useful errno is %d(%s).\\n"" , tmp_errno , strerror ( tmp_errno ) )"		5504446	0					
ANR	5504480	Callee	dprintf		5504446	0					
ANR	5504481	Identifier	dprintf		5504446	0					
ANR	5504482	ArgumentList	D_ALWAYS		5504446	1					
ANR	5504483	Argument	D_ALWAYS		5504446	0					
ANR	5504484	Identifier	D_ALWAYS		5504446	0					
ANR	5504485	Argument	"""A possibly useful errno is %d(%s).\\n"""		5504446	1					
ANR	5504486	PrimaryExpression	"""A possibly useful errno is %d(%s).\\n"""		5504446	0					
ANR	5504487	Argument	tmp_errno		5504446	2					
ANR	5504488	Identifier	tmp_errno		5504446	0					
ANR	5504489	Argument	strerror ( tmp_errno )		5504446	3					
ANR	5504490	CallExpression	strerror ( tmp_errno )		5504446	0					
ANR	5504491	Callee	strerror		5504446	0					
ANR	5504492	Identifier	strerror		5504446	0					
ANR	5504493	ArgumentList	tmp_errno		5504446	1					
ANR	5504494	Argument	tmp_errno		5504446	0					
ANR	5504495	Identifier	tmp_errno		5504446	0					
ANR	5504496	ExpressionStatement	exit ( EXIT_FAILURE )	435:2:11565:11583	5504446	17	True				
ANR	5504497	CallExpression	exit ( EXIT_FAILURE )		5504446	0					
ANR	5504498	Callee	exit		5504446	0					
ANR	5504499	Identifier	exit		5504446	0					
ANR	5504500	ArgumentList	EXIT_FAILURE		5504446	1					
ANR	5504501	Argument	EXIT_FAILURE		5504446	0					
ANR	5504502	Identifier	EXIT_FAILURE		5504446	0					
ANR	5504503	ReturnType	void		5504446	1					
ANR	5504504	Identifier	cut_assert_null_impl		5504446	2					
ANR	5504505	ParameterList	"void * value , const char * expr , const char * file , int line"		5504446	3					
ANR	5504506	Parameter	void * value	427:26:11244:11254	5504446	0	True				
ANR	5504507	ParameterType	void *		5504446	0					
ANR	5504508	Identifier	value		5504446	1					
ANR	5504509	Parameter	const char * expr	427:39:11257:11272	5504446	1	True				
ANR	5504510	ParameterType	const char *		5504446	0					
ANR	5504511	Identifier	expr		5504446	1					
ANR	5504512	Parameter	const char * file	427:57:11275:11290	5504446	2	True				
ANR	5504513	ParameterType	const char *		5504446	0					
ANR	5504514	Identifier	file		5504446	1					
ANR	5504515	Parameter	int line	427:75:11293:11300	5504446	3	True				
ANR	5504516	ParameterType	int		5504446	0					
ANR	5504517	Identifier	line		5504446	1					
ANR	5504518	CFGEntryNode	ENTRY		5504446		True				
ANR	5504519	CFGExitNode	EXIT		5504446		True				
ANR	5504520	Symbol	strerror		5504446						
ANR	5504521	Symbol	errno		5504446						
ANR	5504522	Symbol	file		5504446						
ANR	5504523	Symbol	tmp_errno		5504446						
ANR	5504524	Symbol	NULL		5504446						
ANR	5504525	Symbol	EXIT_FAILURE		5504446						
ANR	5504526	Symbol	line		5504446						
ANR	5504527	Symbol	D_ALWAYS		5504446						
ANR	5504528	Symbol	expr		5504446						
ANR	5504529	Symbol	value		5504446						
ANR	5504530	Function	create_empty_file	441:0:11627:11782							
ANR	5504531	FunctionDef	create_empty_file (const char * file)		5504530	0					
ANR	5504532	CompoundStatement		442:0:11668:11782	5504530	0					
ANR	5504533	IdentifierDeclStatement	FILE * f = NULL ;	443:1:11671:11685	5504530	0	True				
ANR	5504534	IdentifierDecl	* f = NULL		5504530	0					
ANR	5504535	IdentifierDeclType	FILE *		5504530	0					
ANR	5504536	Identifier	f		5504530	1					
ANR	5504537	AssignmentExpression	* f = NULL		5504530	2		=			
ANR	5504538	Identifier	NULL		5504530	0					
ANR	5504539	Identifier	NULL		5504530	1					
ANR	5504540	ExpressionStatement	"cut_assert_not_null ( f = safe_fopen_wrapper_follow ( file , ""w+"" ) )"	444:1:11688:11752	5504530	1	True				
ANR	5504541	CallExpression	"cut_assert_not_null ( f = safe_fopen_wrapper_follow ( file , ""w+"" ) )"		5504530	0					
ANR	5504542	Callee	cut_assert_not_null		5504530	0					
ANR	5504543	Identifier	cut_assert_not_null		5504530	0					
ANR	5504544	ArgumentList	"f = safe_fopen_wrapper_follow ( file , ""w+"" )"		5504530	1					
ANR	5504545	Argument	"f = safe_fopen_wrapper_follow ( file , ""w+"" )"		5504530	0					
ANR	5504546	AssignmentExpression	"f = safe_fopen_wrapper_follow ( file , ""w+"" )"		5504530	0		=			
ANR	5504547	Identifier	f		5504530	0					
ANR	5504548	CallExpression	"safe_fopen_wrapper_follow ( file , ""w+"" )"		5504530	1					
ANR	5504549	Callee	safe_fopen_wrapper_follow		5504530	0					
ANR	5504550	Identifier	safe_fopen_wrapper_follow		5504530	0					
ANR	5504551	ArgumentList	file		5504530	1					
ANR	5504552	Argument	file		5504530	0					
ANR	5504553	Identifier	file		5504530	0					
ANR	5504554	Argument	"""w+"""		5504530	1					
ANR	5504555	PrimaryExpression	"""w+"""		5504530	0					
ANR	5504556	ExpressionStatement	cut_assert_z ( fclose ( f ) )	445:1:11755:11780	5504530	2	True				
ANR	5504557	CallExpression	cut_assert_z ( fclose ( f ) )		5504530	0					
ANR	5504558	Callee	cut_assert_z		5504530	0					
ANR	5504559	Identifier	cut_assert_z		5504530	0					
ANR	5504560	ArgumentList	fclose ( f )		5504530	1					
ANR	5504561	Argument	fclose ( f )		5504530	0					
ANR	5504562	CallExpression	fclose ( f )		5504530	0					
ANR	5504563	Callee	fclose		5504530	0					
ANR	5504564	Identifier	fclose		5504530	0					
ANR	5504565	ArgumentList	f		5504530	1					
ANR	5504566	Argument	f		5504530	0					
ANR	5504567	Identifier	f		5504530	0					
ANR	5504568	ReturnType	void		5504530	1					
ANR	5504569	Identifier	create_empty_file		5504530	2					
ANR	5504570	ParameterList	const char * file		5504530	3					
ANR	5504571	Parameter	const char * file	441:23:11650:11665	5504530	0	True				
ANR	5504572	ParameterType	const char *		5504530	0					
ANR	5504573	Identifier	file		5504530	1					
ANR	5504574	CFGEntryNode	ENTRY		5504530		True				
ANR	5504575	CFGExitNode	EXIT		5504530		True				
ANR	5504576	Symbol	file		5504530						
ANR	5504577	Symbol	NULL		5504530						
ANR	5504578	Symbol	f		5504530						
ANR	5504579	Symbol	fclose		5504530						
ANR	5504580	Symbol	safe_fopen_wrapper_follow		5504530						
ANR	5504581	Function	gettimeofday	449:0:11798:12461							
ANR	5504582	FunctionDef	"gettimeofday (struct timeval * tv , struct timezone * tz)"		5504581	0					
ANR	5504583	CompoundStatement		450:0:11857:12461	5504581	0					
ANR	5504584	IdentifierDeclStatement	FILETIME ft ;	451:1:11861:11872	5504581	0	True				
ANR	5504585	IdentifierDecl	ft		5504581	0					
ANR	5504586	IdentifierDeclType	FILETIME		5504581	0					
ANR	5504587	Identifier	ft		5504581	1					
ANR	5504588	IdentifierDeclStatement	unsigned __int64 tmpres = 0 ;	452:1:11876:11903	5504581	1	True				
ANR	5504589	IdentifierDecl	tmpres = 0		5504581	0					
ANR	5504590	IdentifierDeclType	unsigned __int64		5504581	0					
ANR	5504591	Identifier	tmpres		5504581	1					
ANR	5504592	AssignmentExpression	tmpres = 0		5504581	2		=			
ANR	5504593	Identifier	tmpres		5504581	0					
ANR	5504594	PrimaryExpression	0		5504581	1					
ANR	5504595	Statement	static	453:1:11907:11912	5504581	2	True				
ANR	5504596	IdentifierDeclStatement	int tzflag ;	453:8:11914:11924	5504581	3	True				
ANR	5504597	IdentifierDecl	tzflag		5504581	0					
ANR	5504598	IdentifierDeclType	int		5504581	0					
ANR	5504599	Identifier	tzflag		5504581	1					
ANR	5504600	IfStatement	if ( NULL != tv )		5504581	4					
ANR	5504601	Condition	NULL != tv	455:5:11934:11943	5504581	0	True				
ANR	5504602	EqualityExpression	NULL != tv		5504581	0		!=			
ANR	5504603	Identifier	NULL		5504581	0					
ANR	5504604	Identifier	tv		5504581	1					
ANR	5504605	CompoundStatement		7:1:90:90	5504581	1					
ANR	5504606	ExpressionStatement	GetSystemTimeAsFileTime ( & ft )	457:2:11953:11981	5504581	0	True				
ANR	5504607	CallExpression	GetSystemTimeAsFileTime ( & ft )		5504581	0					
ANR	5504608	Callee	GetSystemTimeAsFileTime		5504581	0					
ANR	5504609	Identifier	GetSystemTimeAsFileTime		5504581	0					
ANR	5504610	ArgumentList	& ft		5504581	1					
ANR	5504611	Argument	& ft		5504581	0					
ANR	5504612	UnaryOperationExpression	& ft		5504581	0					
ANR	5504613	UnaryOperator	&		5504581	0					
ANR	5504614	Identifier	ft		5504581	1					
ANR	5504615	ExpressionStatement	tmpres |= ft . dwHighDateTime	459:2:11988:12015	5504581	1	True				
ANR	5504616	AssignmentExpression	tmpres |= ft . dwHighDateTime		5504581	0		|=			
ANR	5504617	Identifier	tmpres		5504581	0					
ANR	5504618	MemberAccess	ft . dwHighDateTime		5504581	1					
ANR	5504619	Identifier	ft		5504581	0					
ANR	5504620	Identifier	dwHighDateTime		5504581	1					
ANR	5504621	ExpressionStatement	tmpres <<= 32	460:2:12020:12033	5504581	2	True				
ANR	5504622	AssignmentExpression	tmpres <<= 32		5504581	0		<<=			
ANR	5504623	Identifier	tmpres		5504581	0					
ANR	5504624	PrimaryExpression	32		5504581	1					
ANR	5504625	ExpressionStatement	tmpres |= ft . dwLowDateTime	461:2:12038:12064	5504581	3	True				
ANR	5504626	AssignmentExpression	tmpres |= ft . dwLowDateTime		5504581	0		|=			
ANR	5504627	Identifier	tmpres		5504581	0					
ANR	5504628	MemberAccess	ft . dwLowDateTime		5504581	1					
ANR	5504629	Identifier	ft		5504581	0					
ANR	5504630	Identifier	dwLowDateTime		5504581	1					
ANR	5504631	ExpressionStatement	tmpres -= DELTA_EPOCH_IN_MICROSECS	464:2:12113:12147	5504581	4	True				
ANR	5504632	AssignmentExpression	tmpres -= DELTA_EPOCH_IN_MICROSECS		5504581	0		-=			
ANR	5504633	Identifier	tmpres		5504581	0					
ANR	5504634	Identifier	DELTA_EPOCH_IN_MICROSECS		5504581	1					
ANR	5504635	ExpressionStatement	tmpres /= 10	465:2:12153:12165	5504581	5	True				
ANR	5504636	AssignmentExpression	tmpres /= 10		5504581	0		/=			
ANR	5504637	Identifier	tmpres		5504581	0					
ANR	5504638	PrimaryExpression	10		5504581	1					
ANR	5504639	ExpressionStatement	tv -> tv_sec = ( long ) ( tmpres / 1000000UL )	466:2:12201:12240	5504581	6	True				
ANR	5504640	AssignmentExpression	tv -> tv_sec = ( long ) ( tmpres / 1000000UL )		5504581	0		=			
ANR	5504641	PtrMemberAccess	tv -> tv_sec		5504581	0					
ANR	5504642	Identifier	tv		5504581	0					
ANR	5504643	Identifier	tv_sec		5504581	1					
ANR	5504644	CastExpression	( long ) ( tmpres / 1000000UL )		5504581	1					
ANR	5504645	CastTarget	long		5504581	0					
ANR	5504646	MultiplicativeExpression	tmpres / 1000000UL		5504581	1		/			
ANR	5504647	Identifier	tmpres		5504581	0					
ANR	5504648	PrimaryExpression	1000000UL		5504581	1					
ANR	5504649	ExpressionStatement	tv -> tv_usec = ( long ) ( tmpres % 1000000UL )	467:2:12245:12285	5504581	7	True				
ANR	5504650	AssignmentExpression	tv -> tv_usec = ( long ) ( tmpres % 1000000UL )		5504581	0		=			
ANR	5504651	PtrMemberAccess	tv -> tv_usec		5504581	0					
ANR	5504652	Identifier	tv		5504581	0					
ANR	5504653	Identifier	tv_usec		5504581	1					
ANR	5504654	CastExpression	( long ) ( tmpres % 1000000UL )		5504581	1					
ANR	5504655	CastTarget	long		5504581	0					
ANR	5504656	MultiplicativeExpression	tmpres % 1000000UL		5504581	1		%			
ANR	5504657	Identifier	tmpres		5504581	0					
ANR	5504658	PrimaryExpression	1000000UL		5504581	1					
ANR	5504659	IfStatement	if ( NULL != tz )		5504581	5					
ANR	5504660	Condition	NULL != tz	470:5:12300:12309	5504581	0	True				
ANR	5504661	EqualityExpression	NULL != tz		5504581	0		!=			
ANR	5504662	Identifier	NULL		5504581	0					
ANR	5504663	Identifier	tz		5504581	1					
ANR	5504664	CompoundStatement		22:1:456:456	5504581	1					
ANR	5504665	IfStatement	if ( ! tzflag )		5504581	0					
ANR	5504666	Condition	! tzflag	472:6:12323:12329	5504581	0	True				
ANR	5504667	UnaryOperationExpression	! tzflag		5504581	0					
ANR	5504668	UnaryOperator	!		5504581	0					
ANR	5504669	Identifier	tzflag		5504581	1					
ANR	5504670	CompoundStatement		24:2:477:477	5504581	1					
ANR	5504671	ExpressionStatement	_tzset ( )	474:3:12341:12349	5504581	0	True				
ANR	5504672	CallExpression	_tzset ( )		5504581	0					
ANR	5504673	Callee	_tzset		5504581	0					
ANR	5504674	Identifier	_tzset		5504581	0					
ANR	5504675	ArgumentList			5504581	1					
ANR	5504676	ExpressionStatement	tzflag ++	475:3:12355:12363	5504581	1	True				
ANR	5504677	PostIncDecOperationExpression	tzflag ++		5504581	0					
ANR	5504678	Identifier	tzflag		5504581	0					
ANR	5504679	IncDec	++		5504581	1					
ANR	5504680	ExpressionStatement	tz -> tz_minuteswest = _timezone / 60	477:2:12373:12408	5504581	1	True				
ANR	5504681	AssignmentExpression	tz -> tz_minuteswest = _timezone / 60		5504581	0		=			
ANR	5504682	PtrMemberAccess	tz -> tz_minuteswest		5504581	0					
ANR	5504683	Identifier	tz		5504581	0					
ANR	5504684	Identifier	tz_minuteswest		5504581	1					
ANR	5504685	MultiplicativeExpression	_timezone / 60		5504581	1		/			
ANR	5504686	Identifier	_timezone		5504581	0					
ANR	5504687	PrimaryExpression	60		5504581	1					
ANR	5504688	ExpressionStatement	tz -> tz_dsttime = _daylight	478:2:12413:12439	5504581	2	True				
ANR	5504689	AssignmentExpression	tz -> tz_dsttime = _daylight		5504581	0		=			
ANR	5504690	PtrMemberAccess	tz -> tz_dsttime		5504581	0					
ANR	5504691	Identifier	tz		5504581	0					
ANR	5504692	Identifier	tz_dsttime		5504581	1					
ANR	5504693	Identifier	_daylight		5504581	1					
ANR	5504694	ReturnStatement	return 0 ;	481:1:12450:12458	5504581	6	True				
ANR	5504695	PrimaryExpression	0		5504581	0					
ANR	5504696	ReturnType	int		5504581	1					
ANR	5504697	Identifier	gettimeofday		5504581	2					
ANR	5504698	ParameterList	"struct timeval * tv , struct timezone * tz"		5504581	3					
ANR	5504699	Parameter	struct timeval * tv	449:17:11815:11832	5504581	0	True				
ANR	5504700	ParameterType	struct timeval *		5504581	0					
ANR	5504701	Identifier	tv		5504581	1					
ANR	5504702	Parameter	struct timezone * tz	449:37:11835:11853	5504581	1	True				
ANR	5504703	ParameterType	struct timezone *		5504581	0					
ANR	5504704	Identifier	tz		5504581	1					
ANR	5504705	CFGEntryNode	ENTRY		5504581		True				
ANR	5504706	CFGExitNode	EXIT		5504581		True				
ANR	5504707	Symbol	tv		5504581						
ANR	5504708	Symbol	NULL		5504581						
ANR	5504709	Symbol	tz		5504581						
ANR	5504710	Symbol	ft . dwLowDateTime		5504581						
ANR	5504711	Symbol	tv -> tv_sec		5504581						
ANR	5504712	Symbol	tzflag		5504581						
ANR	5504713	Symbol	* tv		5504581						
ANR	5504714	Symbol	tz -> tz_minuteswest		5504581						
ANR	5504715	Symbol	_daylight		5504581						
ANR	5504716	Symbol	ft		5504581						
ANR	5504717	Symbol	ft . dwHighDateTime		5504581						
ANR	5504718	Symbol	DELTA_EPOCH_IN_MICROSECS		5504581						
ANR	5504719	Symbol	tz -> tz_dsttime		5504581						
ANR	5504720	Symbol	tmpres		5504581						
ANR	5504721	Symbol	* tz		5504581						
ANR	5504722	Symbol	tv -> tv_usec		5504581						
ANR	5504723	Symbol	& ft		5504581						
ANR	5504724	Symbol	_timezone		5504581						
