command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1099322	File	data/converged/CVE-2011-4930_htcondor/daemon_core_main.cpp								
ANR	1099323	DeclStmt									
ANR	1099324	Decl							extern DLL_IMPORT_MAGIC char	extern DLL_IMPORT_MAGIC char * *	environ
ANR	1099325	DeclStmt									
ANR	1099326	Decl							"void ( * ) ( int argc , char * argv [ ] )"	"void ( * ) ( int argc , char * argv [ ] )"	dc_main_init
ANR	1099327	DeclStmt									
ANR	1099328	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_config
ANR	1099329	DeclStmt									
ANR	1099330	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_shutdown_fast
ANR	1099331	DeclStmt									
ANR	1099332	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_shutdown_graceful
ANR	1099333	DeclStmt									
ANR	1099334	Decl							"void ( * ) ( int argc , char * argv [ ] )"	"void ( * ) ( int argc , char * argv [ ] )"	dc_main_pre_dc_init
ANR	1099335	DeclStmt									
ANR	1099336	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_pre_command_sock_init
ANR	1099337	DeclStmt									
ANR	1099338	Decl							void	void ( )	dc_reconfig
ANR	1099339	DeclStmt									
ANR	1099340	Decl							void	void ( )	dc_config_auth
ANR	1099341	DeclStmt									
ANR	1099342	Decl							int	"int ( ReliSock * s , char * name )"	handle_fetch_log_history
ANR	1099343	DeclStmt									
ANR	1099344	Decl							int	"int ( ReliSock * s , char * name )"	handle_fetch_log_history_dir
ANR	1099345	DeclStmt									
ANR	1099346	Decl							int	int ( ReliSock * s )	handle_fetch_log_history_purge
ANR	1099347	DeclStmt									
ANR	1099348	Decl							int	int	Foreground
ANR	1099349	DeclStmt									
ANR	1099350	Decl							const char	const char *	myName
ANR	1099351	DeclStmt									
ANR	1099352	Decl							char	char *	_condor_myServiceName
ANR	1099353	DeclStmt									
ANR	1099354	Decl							char	char *	myFullName
ANR	1099355	DeclStmt									
ANR	1099356	Decl							DaemonCore	DaemonCore *	daemonCore
ANR	1099357	DeclStmt									
ANR	1099358	Decl							char	char *	logDir
ANR	1099359	DeclStmt									
ANR	1099360	Decl							char	char *	pidFile
ANR	1099361	DeclStmt									
ANR	1099362	Decl							char	char *	addrFile
ANR	1099363	DeclStmt									
ANR	1099364	Decl							char	char *	logAppend
ANR	1099365	DeclStmt									
ANR	1099366	Decl							char	char *	core_dir
ANR	1099367	DeclStmt									
ANR	1099368	Decl							int	int	condor_main_argc
ANR	1099369	DeclStmt									
ANR	1099370	Decl							char	char * *	condor_main_argv
ANR	1099371	DeclStmt									
ANR	1099372	Decl							time_t	time_t	daemon_stop_time
ANR	1099373	DeclStmt									
ANR	1099374	Decl							extern FILESQL	extern FILESQL *	FILEObj
ANR	1099375	DeclStmt									
ANR	1099376	Decl							extern FILEXML	extern FILEXML *	XMLObj
ANR	1099377	DeclStmt									
ANR	1099378	Decl							int	int	line_where_service_stopped
ANR	1099379	DeclStmt									
ANR	1099380	Decl							bool	bool	DynamicDirs
ANR	1099381	DeclStmt									
ANR	1099382	Decl							int	int	runfor
ANR	1099383	DeclStmt									
ANR	1099384	Decl							bool	bool	doAuthInit
ANR	1099385	DeclStmt									
ANR	1099386	Decl							bool	bool	doCoreInit
ANR	1099387	Function	check_parent	134:0:4292:4580							
ANR	1099388	FunctionDef	check_parent ()		1099387	0					
ANR	1099389	CompoundStatement		136:0:4313:4580	1099387	0					
ANR	1099390	IfStatement	if ( daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE )		1099387	0					
ANR	1099391	Condition	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE	137:6:4321:4378	1099387	0	True				
ANR	1099392	EqualityExpression	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE		1099387	0		==			
ANR	1099393	CallExpression	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) )		1099387	0					
ANR	1099394	Callee	daemonCore -> Is_Pid_Alive		1099387	0					
ANR	1099395	PtrMemberAccess	daemonCore -> Is_Pid_Alive		1099387	0					
ANR	1099396	Identifier	daemonCore		1099387	0					
ANR	1099397	Identifier	Is_Pid_Alive		1099387	1					
ANR	1099398	ArgumentList	daemonCore -> getppid ( )		1099387	1					
ANR	1099399	Argument	daemonCore -> getppid ( )		1099387	0					
ANR	1099400	CallExpression	daemonCore -> getppid ( )		1099387	0					
ANR	1099401	Callee	daemonCore -> getppid		1099387	0					
ANR	1099402	PtrMemberAccess	daemonCore -> getppid		1099387	0					
ANR	1099403	Identifier	daemonCore		1099387	0					
ANR	1099404	Identifier	getppid		1099387	1					
ANR	1099405	ArgumentList			1099387	1					
ANR	1099406	Identifier	FALSE		1099387	1					
ANR	1099407	CompoundStatement		2:67:68:68	1099387	1					
ANR	1099408	ExpressionStatement	"dprintf ( D_ALWAYS , ""Our parent process (pid %d) went away; shutting down\\n"" , daemonCore -> getppid ( ) )"	139:2:4411:4515	1099387	0	True				
ANR	1099409	CallExpression	"dprintf ( D_ALWAYS , ""Our parent process (pid %d) went away; shutting down\\n"" , daemonCore -> getppid ( ) )"		1099387	0					
ANR	1099410	Callee	dprintf		1099387	0					
ANR	1099411	Identifier	dprintf		1099387	0					
ANR	1099412	ArgumentList	D_ALWAYS		1099387	1					
ANR	1099413	Argument	D_ALWAYS		1099387	0					
ANR	1099414	Identifier	D_ALWAYS		1099387	0					
ANR	1099415	Argument	"""Our parent process (pid %d) went away; shutting down\\n"""		1099387	1					
ANR	1099416	PrimaryExpression	"""Our parent process (pid %d) went away; shutting down\\n"""		1099387	0					
ANR	1099417	Argument	daemonCore -> getppid ( )		1099387	2					
ANR	1099418	CallExpression	daemonCore -> getppid ( )		1099387	0					
ANR	1099419	Callee	daemonCore -> getppid		1099387	0					
ANR	1099420	PtrMemberAccess	daemonCore -> getppid		1099387	0					
ANR	1099421	Identifier	daemonCore		1099387	0					
ANR	1099422	Identifier	getppid		1099387	1					
ANR	1099423	ArgumentList			1099387	1					
ANR	1099424	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"	142:2:4519:4575	1099387	1	True				
ANR	1099425	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"		1099387	0					
ANR	1099426	Callee	daemonCore -> Send_Signal		1099387	0					
ANR	1099427	PtrMemberAccess	daemonCore -> Send_Signal		1099387	0					
ANR	1099428	Identifier	daemonCore		1099387	0					
ANR	1099429	Identifier	Send_Signal		1099387	1					
ANR	1099430	ArgumentList	daemonCore -> getpid ( )		1099387	1					
ANR	1099431	Argument	daemonCore -> getpid ( )		1099387	0					
ANR	1099432	CallExpression	daemonCore -> getpid ( )		1099387	0					
ANR	1099433	Callee	daemonCore -> getpid		1099387	0					
ANR	1099434	PtrMemberAccess	daemonCore -> getpid		1099387	0					
ANR	1099435	Identifier	daemonCore		1099387	0					
ANR	1099436	Identifier	getpid		1099387	1					
ANR	1099437	ArgumentList			1099387	1					
ANR	1099438	Argument	SIGTERM		1099387	1					
ANR	1099439	Identifier	SIGTERM		1099387	0					
ANR	1099440	ReturnType	void		1099387	1					
ANR	1099441	Identifier	check_parent		1099387	2					
ANR	1099442	ParameterList			1099387	3					
ANR	1099443	CFGEntryNode	ENTRY		1099387		True				
ANR	1099444	CFGExitNode	EXIT		1099387		True				
ANR	1099445	Symbol	daemonCore -> getppid		1099387						
ANR	1099446	Symbol	daemonCore -> Is_Pid_Alive		1099387						
ANR	1099447	Symbol	* daemonCore		1099387						
ANR	1099448	Symbol	daemonCore		1099387						
ANR	1099449	Symbol	D_ALWAYS		1099387						
ANR	1099450	Symbol	daemonCore -> getpid		1099387						
ANR	1099451	Symbol	FALSE		1099387						
ANR	1099452	Symbol	SIGTERM		1099387						
ANR	1099453	Function	check_session_cache	148:0:4646:4728							
ANR	1099454	FunctionDef	check_session_cache ()		1099453	0					
ANR	1099455	CompoundStatement		150:0:4674:4728	1099453	0					
ANR	1099456	ExpressionStatement	daemonCore -> getSecMan ( ) -> invalidateExpiredCache ( )	151:1:4677:4726	1099453	0	True				
ANR	1099457	CallExpression	daemonCore -> getSecMan ( ) -> invalidateExpiredCache ( )		1099453	0					
ANR	1099458	Callee	daemonCore -> getSecMan ( ) -> invalidateExpiredCache		1099453	0					
ANR	1099459	PtrMemberAccess	daemonCore -> getSecMan ( ) -> invalidateExpiredCache		1099453	0					
ANR	1099460	CallExpression	daemonCore -> getSecMan ( )		1099453	0					
ANR	1099461	Callee	daemonCore -> getSecMan		1099453	0					
ANR	1099462	PtrMemberAccess	daemonCore -> getSecMan		1099453	0					
ANR	1099463	Identifier	daemonCore		1099453	0					
ANR	1099464	Identifier	getSecMan		1099453	1					
ANR	1099465	ArgumentList			1099453	1					
ANR	1099466	Identifier	invalidateExpiredCache		1099453	1					
ANR	1099467	ArgumentList			1099453	1					
ANR	1099468	ReturnType	void		1099453	1					
ANR	1099469	Identifier	check_session_cache		1099453	2					
ANR	1099470	ParameterList			1099453	3					
ANR	1099471	CFGEntryNode	ENTRY		1099453		True				
ANR	1099472	CFGExitNode	EXIT		1099453		True				
ANR	1099473	Symbol	* daemonCore		1099453						
ANR	1099474	Symbol	daemonCore		1099453						
ANR	1099475	Symbol	daemonCore -> getSecMan		1099453						
ANR	1099476	Function	global_dc_set_cookie	154:0:4731:4881							
ANR	1099477	FunctionDef	"global_dc_set_cookie (int len , unsigned char * data)"		1099476	0					
ANR	1099478	CompoundStatement		154:56:4787:4881	1099476	0					
ANR	1099479	IfStatement	if ( daemonCore )		1099476	0					
ANR	1099480	Condition	daemonCore	155:5:4794:4803	1099476	0	True				
ANR	1099481	Identifier	daemonCore		1099476	0					
ANR	1099482	CompoundStatement		2:17:18:18	1099476	1					
ANR	1099483	ReturnStatement	"return daemonCore -> set_cookie ( len , data ) ;"	156:2:4810:4850	1099476	0	True				
ANR	1099484	CallExpression	"daemonCore -> set_cookie ( len , data )"		1099476	0					
ANR	1099485	Callee	daemonCore -> set_cookie		1099476	0					
ANR	1099486	PtrMemberAccess	daemonCore -> set_cookie		1099476	0					
ANR	1099487	Identifier	daemonCore		1099476	0					
ANR	1099488	Identifier	set_cookie		1099476	1					
ANR	1099489	ArgumentList	len		1099476	1					
ANR	1099490	Argument	len		1099476	0					
ANR	1099491	Identifier	len		1099476	0					
ANR	1099492	Argument	data		1099476	1					
ANR	1099493	Identifier	data		1099476	0					
ANR	1099494	ElseStatement	else		1099476	0					
ANR	1099495	CompoundStatement		4:8:72:72	1099476	0					
ANR	1099496	ReturnStatement	return false ;	158:2:4864:4876	1099476	0	True				
ANR	1099497	Identifier	false		1099476	0					
ANR	1099498	ReturnType	bool		1099476	1					
ANR	1099499	Identifier	global_dc_set_cookie		1099476	2					
ANR	1099500	ParameterList	"int len , unsigned char * data"		1099476	3					
ANR	1099501	Parameter	int len	154:26:4757:4763	1099476	0	True				
ANR	1099502	ParameterType	int		1099476	0					
ANR	1099503	Identifier	len		1099476	1					
ANR	1099504	Parameter	unsigned char * data	154:35:4766:4784	1099476	1	True				
ANR	1099505	ParameterType	unsigned char *		1099476	0					
ANR	1099506	Identifier	data		1099476	1					
ANR	1099507	CFGEntryNode	ENTRY		1099476		True				
ANR	1099508	CFGExitNode	EXIT		1099476		True				
ANR	1099509	Symbol	len		1099476						
ANR	1099510	Symbol	data		1099476						
ANR	1099511	Symbol	* daemonCore		1099476						
ANR	1099512	Symbol	daemonCore		1099476						
ANR	1099513	Symbol	false		1099476						
ANR	1099514	Symbol	daemonCore -> set_cookie		1099476						
ANR	1099515	Function	global_dc_get_cookie	162:0:4884:5036							
ANR	1099516	FunctionDef	"global_dc_get_cookie (int & len , unsigned char * & data)"		1099515	0					
ANR	1099517	CompoundStatement		162:58:4942:5036	1099515	0					
ANR	1099518	IfStatement	if ( daemonCore )		1099515	0					
ANR	1099519	Condition	daemonCore	163:5:4949:4958	1099515	0	True				
ANR	1099520	Identifier	daemonCore		1099515	0					
ANR	1099521	CompoundStatement		2:17:18:18	1099515	1					
ANR	1099522	ReturnStatement	"return daemonCore -> get_cookie ( len , data ) ;"	164:2:4965:5005	1099515	0	True				
ANR	1099523	CallExpression	"daemonCore -> get_cookie ( len , data )"		1099515	0					
ANR	1099524	Callee	daemonCore -> get_cookie		1099515	0					
ANR	1099525	PtrMemberAccess	daemonCore -> get_cookie		1099515	0					
ANR	1099526	Identifier	daemonCore		1099515	0					
ANR	1099527	Identifier	get_cookie		1099515	1					
ANR	1099528	ArgumentList	len		1099515	1					
ANR	1099529	Argument	len		1099515	0					
ANR	1099530	Identifier	len		1099515	0					
ANR	1099531	Argument	data		1099515	1					
ANR	1099532	Identifier	data		1099515	0					
ANR	1099533	ElseStatement	else		1099515	0					
ANR	1099534	CompoundStatement		4:8:72:72	1099515	0					
ANR	1099535	ReturnStatement	return false ;	166:2:5019:5031	1099515	0	True				
ANR	1099536	Identifier	false		1099515	0					
ANR	1099537	ReturnType	bool		1099515	1					
ANR	1099538	Identifier	global_dc_get_cookie		1099515	2					
ANR	1099539	ParameterList	"int & len , unsigned char * & data"		1099515	3					
ANR	1099540	Parameter	int & len	162:26:4910:4917	1099515	0	True				
ANR	1099541	ParameterType	int &		1099515	0					
ANR	1099542	Identifier	len		1099515	1					
ANR	1099543	Parameter	unsigned char * & data	162:36:4920:4939	1099515	1	True				
ANR	1099544	ParameterType	unsigned char * &		1099515	0					
ANR	1099545	Identifier	data		1099515	1					
ANR	1099546	CFGEntryNode	ENTRY		1099515		True				
ANR	1099547	CFGExitNode	EXIT		1099515		True				
ANR	1099548	Symbol	len		1099515						
ANR	1099549	Symbol	data		1099515						
ANR	1099550	Symbol	* daemonCore		1099515						
ANR	1099551	Symbol	daemonCore -> get_cookie		1099515						
ANR	1099552	Symbol	daemonCore		1099515						
ANR	1099553	Symbol	false		1099515						
ANR	1099554	Function	handle_cookie_refresh	170:0:5039:5380							
ANR	1099555	FunctionDef	handle_cookie_refresh ()		1099554	0					
ANR	1099556	CompoundStatement		172:0:5069:5380	1099554	0					
ANR	1099557	IdentifierDeclStatement	unsigned char randomjunk [ 256 ] ;	173:1:5072:5101	1099554	0	True				
ANR	1099558	IdentifierDecl	randomjunk [ 256 ]		1099554	0					
ANR	1099559	IdentifierDeclType	unsigned char [ 256 ]		1099554	0					
ANR	1099560	Identifier	randomjunk		1099554	1					
ANR	1099561	PrimaryExpression	256		1099554	2					
ANR	1099562	IdentifierDeclStatement	"char symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ;"	174:1:5104:5207	1099554	1	True				
ANR	1099563	IdentifierDecl	"symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' }"		1099554	0					
ANR	1099564	IdentifierDeclType	char [ 16 ]		1099554	0					
ANR	1099565	Identifier	symbols		1099554	1					
ANR	1099566	PrimaryExpression	16		1099554	2					
ANR	1099567	AssignmentExpression	"symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' }"		1099554	3		=			
ANR	1099568	Identifier	symbols		1099554	0					
ANR	1099569	InitializerList	'0'		1099554	1					
ANR	1099570	PrimaryExpression	'0'		1099554	0					
ANR	1099571	PrimaryExpression	'1'		1099554	1					
ANR	1099572	PrimaryExpression	'2'		1099554	2					
ANR	1099573	PrimaryExpression	'3'		1099554	3					
ANR	1099574	PrimaryExpression	'4'		1099554	4					
ANR	1099575	PrimaryExpression	'5'		1099554	5					
ANR	1099576	PrimaryExpression	'6'		1099554	6					
ANR	1099577	PrimaryExpression	'7'		1099554	7					
ANR	1099578	PrimaryExpression	'8'		1099554	8					
ANR	1099579	PrimaryExpression	'9'		1099554	9					
ANR	1099580	PrimaryExpression	'A'		1099554	10					
ANR	1099581	PrimaryExpression	'B'		1099554	11					
ANR	1099582	PrimaryExpression	'C'		1099554	12					
ANR	1099583	PrimaryExpression	'D'		1099554	13					
ANR	1099584	PrimaryExpression	'E'		1099554	14					
ANR	1099585	PrimaryExpression	'F'		1099554	15					
ANR	1099586	ForStatement	for ( int i = 0 ; i < 128 ; i ++ )		1099554	2					
ANR	1099587	ForInit	int i = 0 ;	176:6:5215:5224	1099554	0	True				
ANR	1099588	IdentifierDeclStatement	int i = 0 ;		1099554	0					
ANR	1099589	IdentifierDecl	i = 0		1099554	0					
ANR	1099590	IdentifierDeclType	int		1099554	0					
ANR	1099591	Identifier	i		1099554	1					
ANR	1099592	AssignmentExpression	i = 0		1099554	2		=			
ANR	1099593	Identifier	i		1099554	0					
ANR	1099594	PrimaryExpression	0		1099554	1					
ANR	1099595	Condition	i < 128	176:17:5226:5232	1099554	1	True				
ANR	1099596	RelationalExpression	i < 128		1099554	0		<			
ANR	1099597	Identifier	i		1099554	0					
ANR	1099598	PrimaryExpression	128		1099554	1					
ANR	1099599	PostIncDecOperationExpression	i ++	176:26:5235:5237	1099554	2	True				
ANR	1099600	Identifier	i		1099554	0					
ANR	1099601	IncDec	++		1099554	1					
ANR	1099602	CompoundStatement		5:31:170:170	1099554	3					
ANR	1099603	ExpressionStatement	randomjunk [ i ] = symbols [ rand ( ) % 16 ]	177:2:5244:5280	1099554	0	True				
ANR	1099604	AssignmentExpression	randomjunk [ i ] = symbols [ rand ( ) % 16 ]		1099554	0		=			
ANR	1099605	ArrayIndexing	randomjunk [ i ]		1099554	0					
ANR	1099606	Identifier	randomjunk		1099554	0					
ANR	1099607	Identifier	i		1099554	1					
ANR	1099608	ArrayIndexing	symbols [ rand ( ) % 16 ]		1099554	1					
ANR	1099609	Identifier	symbols		1099554	0					
ANR	1099610	MultiplicativeExpression	rand ( ) % 16		1099554	1		%			
ANR	1099611	CallExpression	rand ( )		1099554	0					
ANR	1099612	Callee	rand		1099554	0					
ANR	1099613	Identifier	rand		1099554	0					
ANR	1099614	ArgumentList			1099554	1					
ANR	1099615	PrimaryExpression	16		1099554	1					
ANR	1099616	ExpressionStatement	randomjunk [ 127 ] = 0	181:1:5316:5335	1099554	3	True				
ANR	1099617	AssignmentExpression	randomjunk [ 127 ] = 0		1099554	0		=			
ANR	1099618	ArrayIndexing	randomjunk [ 127 ]		1099554	0					
ANR	1099619	Identifier	randomjunk		1099554	0					
ANR	1099620	PrimaryExpression	127		1099554	1					
ANR	1099621	PrimaryExpression	0		1099554	1					
ANR	1099622	ExpressionStatement	"global_dc_set_cookie ( 128 , randomjunk )"	183:1:5339:5377	1099554	4	True				
ANR	1099623	CallExpression	"global_dc_set_cookie ( 128 , randomjunk )"		1099554	0					
ANR	1099624	Callee	global_dc_set_cookie		1099554	0					
ANR	1099625	Identifier	global_dc_set_cookie		1099554	0					
ANR	1099626	ArgumentList	128		1099554	1					
ANR	1099627	Argument	128		1099554	0					
ANR	1099628	PrimaryExpression	128		1099554	0					
ANR	1099629	Argument	randomjunk		1099554	1					
ANR	1099630	Identifier	randomjunk		1099554	0					
ANR	1099631	ReturnType	void		1099554	1					
ANR	1099632	Identifier	handle_cookie_refresh		1099554	2					
ANR	1099633	ParameterList			1099554	3					
ANR	1099634	CFGEntryNode	ENTRY		1099554		True				
ANR	1099635	CFGExitNode	EXIT		1099554		True				
ANR	1099636	Symbol	rand		1099554						
ANR	1099637	Symbol	* symbols		1099554						
ANR	1099638	Symbol	* i		1099554						
ANR	1099639	Symbol	randomjunk		1099554						
ANR	1099640	Symbol	* rand		1099554						
ANR	1099641	Symbol	i		1099554						
ANR	1099642	Symbol	* randomjunk		1099554						
ANR	1099643	Symbol	symbols		1099554						
ANR	1099644	Function	global_dc_sinful	186:0:5383:5511							
ANR	1099645	FunctionDef	global_dc_sinful ()		1099644	0					
ANR	1099646	CompoundStatement		186:31:5414:5511	1099644	0					
ANR	1099647	IfStatement	if ( daemonCore )		1099644	0					
ANR	1099648	Condition	daemonCore	187:5:5421:5430	1099644	0	True				
ANR	1099649	Identifier	daemonCore		1099644	0					
ANR	1099650	CompoundStatement		2:17:18:18	1099644	1					
ANR	1099651	ReturnStatement	return daemonCore -> InfoCommandSinfulString ( ) ;	188:2:5437:5481	1099644	0	True				
ANR	1099652	CallExpression	daemonCore -> InfoCommandSinfulString ( )		1099644	0					
ANR	1099653	Callee	daemonCore -> InfoCommandSinfulString		1099644	0					
ANR	1099654	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		1099644	0					
ANR	1099655	Identifier	daemonCore		1099644	0					
ANR	1099656	Identifier	InfoCommandSinfulString		1099644	1					
ANR	1099657	ArgumentList			1099644	1					
ANR	1099658	ElseStatement	else		1099644	0					
ANR	1099659	CompoundStatement		4:8:76:76	1099644	0					
ANR	1099660	ReturnStatement	return NULL ;	190:2:5495:5506	1099644	0	True				
ANR	1099661	Identifier	NULL		1099644	0					
ANR	1099662	ReturnType	char const *		1099644	1					
ANR	1099663	Identifier	global_dc_sinful		1099644	2					
ANR	1099664	ParameterList			1099644	3					
ANR	1099665	CFGEntryNode	ENTRY		1099644		True				
ANR	1099666	CFGExitNode	EXIT		1099644		True				
ANR	1099667	Symbol	daemonCore -> InfoCommandSinfulString		1099644						
ANR	1099668	Symbol	NULL		1099644						
ANR	1099669	Symbol	* daemonCore		1099644						
ANR	1099670	Symbol	daemonCore		1099644						
ANR	1099671	Function	clean_files	194:0:5514:6714							
ANR	1099672	FunctionDef	clean_files ()		1099671	0					
ANR	1099673	CompoundStatement		195:0:5533:6714	1099671	0					
ANR	1099674	IfStatement	if ( pidFile )		1099671	0					
ANR	1099675	Condition	pidFile	197:5:5582:5588	1099671	0	True				
ANR	1099676	Identifier	pidFile		1099671	0					
ANR	1099677	CompoundStatement		3:15:58:58	1099671	1					
ANR	1099678	IfStatement	if ( unlink ( pidFile ) < 0 )		1099671	0					
ANR	1099679	Condition	unlink ( pidFile ) < 0	198:6:5600:5618	1099671	0	True				
ANR	1099680	RelationalExpression	unlink ( pidFile ) < 0		1099671	0		<			
ANR	1099681	CallExpression	unlink ( pidFile )		1099671	0					
ANR	1099682	Callee	unlink		1099671	0					
ANR	1099683	Identifier	unlink		1099671	0					
ANR	1099684	ArgumentList	pidFile		1099671	1					
ANR	1099685	Argument	pidFile		1099671	0					
ANR	1099686	Identifier	pidFile		1099671	0					
ANR	1099687	PrimaryExpression	0		1099671	1					
ANR	1099688	CompoundStatement		4:28:88:88	1099671	1					
ANR	1099689	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete pid file %s\\n"" , pidFile )"	199:3:5627:5717	1099671	0	True				
ANR	1099690	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete pid file %s\\n"" , pidFile )"		1099671	0					
ANR	1099691	Callee	dprintf		1099671	0					
ANR	1099692	Identifier	dprintf		1099671	0					
ANR	1099693	ArgumentList	D_ALWAYS		1099671	1					
ANR	1099694	Argument	D_ALWAYS		1099671	0					
ANR	1099695	Identifier	D_ALWAYS		1099671	0					
ANR	1099696	Argument	"""DaemonCore: ERROR: Can't delete pid file %s\\n"""		1099671	1					
ANR	1099697	PrimaryExpression	"""DaemonCore: ERROR: Can't delete pid file %s\\n"""		1099671	0					
ANR	1099698	Argument	pidFile		1099671	2					
ANR	1099699	Identifier	pidFile		1099671	0					
ANR	1099700	ElseStatement	else		1099671	0					
ANR	1099701	CompoundStatement		8:9:194:194	1099671	0					
ANR	1099702	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		1099671	0					
ANR	1099703	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	203:7:5737:5777	1099671	0	True				
ANR	1099704	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		1099671	0		&			
ANR	1099705	Identifier	DebugFlags		1099671	0					
ANR	1099706	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1099671	1		|			
ANR	1099707	Identifier	D_FULLDEBUG		1099671	0					
ANR	1099708	Identifier	D_DAEMONCORE		1099671	1					
ANR	1099709	CompoundStatement		9:51:247:247	1099671	1					
ANR	1099710	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed pid file %s\\n"" , pidFile )"	204:4:5787:5844	1099671	0	True				
ANR	1099711	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed pid file %s\\n"" , pidFile )"		1099671	0					
ANR	1099712	Callee	dprintf		1099671	0					
ANR	1099713	Identifier	dprintf		1099671	0					
ANR	1099714	ArgumentList	D_DAEMONCORE		1099671	1					
ANR	1099715	Argument	D_DAEMONCORE		1099671	0					
ANR	1099716	Identifier	D_DAEMONCORE		1099671	0					
ANR	1099717	Argument	"""Removed pid file %s\\n"""		1099671	1					
ANR	1099718	PrimaryExpression	"""Removed pid file %s\\n"""		1099671	0					
ANR	1099719	Argument	pidFile		1099671	2					
ANR	1099720	Identifier	pidFile		1099671	0					
ANR	1099721	IfStatement	if ( addrFile )		1099671	1					
ANR	1099722	Condition	addrFile	209:5:5864:5871	1099671	0	True				
ANR	1099723	Identifier	addrFile		1099671	0					
ANR	1099724	CompoundStatement		15:16:341:341	1099671	1					
ANR	1099725	IfStatement	if ( unlink ( addrFile ) < 0 )		1099671	0					
ANR	1099726	Condition	unlink ( addrFile ) < 0	210:6:5883:5902	1099671	0	True				
ANR	1099727	RelationalExpression	unlink ( addrFile ) < 0		1099671	0		<			
ANR	1099728	CallExpression	unlink ( addrFile )		1099671	0					
ANR	1099729	Callee	unlink		1099671	0					
ANR	1099730	Identifier	unlink		1099671	0					
ANR	1099731	ArgumentList	addrFile		1099671	1					
ANR	1099732	Argument	addrFile		1099671	0					
ANR	1099733	Identifier	addrFile		1099671	0					
ANR	1099734	PrimaryExpression	0		1099671	1					
ANR	1099735	CompoundStatement		16:29:372:372	1099671	1					
ANR	1099736	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete address file %s\\n"" , addrFile )"	211:3:5911:6006	1099671	0	True				
ANR	1099737	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete address file %s\\n"" , addrFile )"		1099671	0					
ANR	1099738	Callee	dprintf		1099671	0					
ANR	1099739	Identifier	dprintf		1099671	0					
ANR	1099740	ArgumentList	D_ALWAYS		1099671	1					
ANR	1099741	Argument	D_ALWAYS		1099671	0					
ANR	1099742	Identifier	D_ALWAYS		1099671	0					
ANR	1099743	Argument	"""DaemonCore: ERROR: Can't delete address file %s\\n"""		1099671	1					
ANR	1099744	PrimaryExpression	"""DaemonCore: ERROR: Can't delete address file %s\\n"""		1099671	0					
ANR	1099745	Argument	addrFile		1099671	2					
ANR	1099746	Identifier	addrFile		1099671	0					
ANR	1099747	ElseStatement	else		1099671	0					
ANR	1099748	CompoundStatement		20:9:483:483	1099671	0					
ANR	1099749	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		1099671	0					
ANR	1099750	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	215:7:6026:6066	1099671	0	True				
ANR	1099751	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		1099671	0		&			
ANR	1099752	Identifier	DebugFlags		1099671	0					
ANR	1099753	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1099671	1		|			
ANR	1099754	Identifier	D_FULLDEBUG		1099671	0					
ANR	1099755	Identifier	D_DAEMONCORE		1099671	1					
ANR	1099756	CompoundStatement		21:51:536:536	1099671	1					
ANR	1099757	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed address file %s\\n"" , addrFile )"	216:4:6076:6146	1099671	0	True				
ANR	1099758	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed address file %s\\n"" , addrFile )"		1099671	0					
ANR	1099759	Callee	dprintf		1099671	0					
ANR	1099760	Identifier	dprintf		1099671	0					
ANR	1099761	ArgumentList	D_DAEMONCORE		1099671	1					
ANR	1099762	Argument	D_DAEMONCORE		1099671	0					
ANR	1099763	Identifier	D_DAEMONCORE		1099671	0					
ANR	1099764	Argument	"""Removed address file %s\\n"""		1099671	1					
ANR	1099765	PrimaryExpression	"""Removed address file %s\\n"""		1099671	0					
ANR	1099766	Argument	addrFile		1099671	2					
ANR	1099767	Identifier	addrFile		1099671	0					
ANR	1099768	ExpressionStatement	free ( addrFile )	221:2:6219:6235	1099671	1	True				
ANR	1099769	CallExpression	free ( addrFile )		1099671	0					
ANR	1099770	Callee	free		1099671	0					
ANR	1099771	Identifier	free		1099671	0					
ANR	1099772	ArgumentList	addrFile		1099671	1					
ANR	1099773	Argument	addrFile		1099671	0					
ANR	1099774	Identifier	addrFile		1099671	0					
ANR	1099775	IfStatement	if ( daemonCore )		1099671	2					
ANR	1099776	Condition	daemonCore	224:4:6246:6255	1099671	0	True				
ANR	1099777	Identifier	daemonCore		1099671	0					
ANR	1099778	CompoundStatement		30:16:724:724	1099671	1					
ANR	1099779	IfStatement	if ( daemonCore -> localAdFile )		1099671	0					
ANR	1099780	Condition	daemonCore -> localAdFile	225:6:6266:6288	1099671	0	True				
ANR	1099781	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099782	Identifier	daemonCore		1099671	0					
ANR	1099783	Identifier	localAdFile		1099671	1					
ANR	1099784	CompoundStatement		31:32:758:758	1099671	1					
ANR	1099785	IfStatement	if ( unlink ( daemonCore -> localAdFile ) < 0 )		1099671	0					
ANR	1099786	Condition	unlink ( daemonCore -> localAdFile ) < 0	226:7:6301:6335	1099671	0	True				
ANR	1099787	RelationalExpression	unlink ( daemonCore -> localAdFile ) < 0		1099671	0		<			
ANR	1099788	CallExpression	unlink ( daemonCore -> localAdFile )		1099671	0					
ANR	1099789	Callee	unlink		1099671	0					
ANR	1099790	Identifier	unlink		1099671	0					
ANR	1099791	ArgumentList	daemonCore -> localAdFile		1099671	1					
ANR	1099792	Argument	daemonCore -> localAdFile		1099671	0					
ANR	1099793	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099794	Identifier	daemonCore		1099671	0					
ANR	1099795	Identifier	localAdFile		1099671	1					
ANR	1099796	PrimaryExpression	0		1099671	1					
ANR	1099797	CompoundStatement		32:45:805:805	1099671	1					
ANR	1099798	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete classad file %s\\n"" , daemonCore -> localAdFile )"	227:4:6345:6457	1099671	0	True				
ANR	1099799	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete classad file %s\\n"" , daemonCore -> localAdFile )"		1099671	0					
ANR	1099800	Callee	dprintf		1099671	0					
ANR	1099801	Identifier	dprintf		1099671	0					
ANR	1099802	ArgumentList	D_ALWAYS		1099671	1					
ANR	1099803	Argument	D_ALWAYS		1099671	0					
ANR	1099804	Identifier	D_ALWAYS		1099671	0					
ANR	1099805	Argument	"""DaemonCore: ERROR: Can't delete classad file %s\\n"""		1099671	1					
ANR	1099806	PrimaryExpression	"""DaemonCore: ERROR: Can't delete classad file %s\\n"""		1099671	0					
ANR	1099807	Argument	daemonCore -> localAdFile		1099671	2					
ANR	1099808	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099809	Identifier	daemonCore		1099671	0					
ANR	1099810	Identifier	localAdFile		1099671	1					
ANR	1099811	ElseStatement	else		1099671	0					
ANR	1099812	CompoundStatement		36:10:935:935	1099671	0					
ANR	1099813	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		1099671	0					
ANR	1099814	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	231:8:6479:6519	1099671	0	True				
ANR	1099815	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		1099671	0		&			
ANR	1099816	Identifier	DebugFlags		1099671	0					
ANR	1099817	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1099671	1		|			
ANR	1099818	Identifier	D_FULLDEBUG		1099671	0					
ANR	1099819	Identifier	D_DAEMONCORE		1099671	1					
ANR	1099820	CompoundStatement		37:52:989:989	1099671	1					
ANR	1099821	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed local classad file %s\\n"" , daemonCore -> localAdFile )"	232:5:6530:6622	1099671	0	True				
ANR	1099822	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed local classad file %s\\n"" , daemonCore -> localAdFile )"		1099671	0					
ANR	1099823	Callee	dprintf		1099671	0					
ANR	1099824	Identifier	dprintf		1099671	0					
ANR	1099825	ArgumentList	D_DAEMONCORE		1099671	1					
ANR	1099826	Argument	D_DAEMONCORE		1099671	0					
ANR	1099827	Identifier	D_DAEMONCORE		1099671	0					
ANR	1099828	Argument	"""Removed local classad file %s\\n"""		1099671	1					
ANR	1099829	PrimaryExpression	"""Removed local classad file %s\\n"""		1099671	0					
ANR	1099830	Argument	daemonCore -> localAdFile		1099671	2					
ANR	1099831	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099832	Identifier	daemonCore		1099671	0					
ANR	1099833	Identifier	localAdFile		1099671	1					
ANR	1099834	ExpressionStatement	free ( daemonCore -> localAdFile )	236:3:6638:6669	1099671	1	True				
ANR	1099835	CallExpression	free ( daemonCore -> localAdFile )		1099671	0					
ANR	1099836	Callee	free		1099671	0					
ANR	1099837	Identifier	free		1099671	0					
ANR	1099838	ArgumentList	daemonCore -> localAdFile		1099671	1					
ANR	1099839	Argument	daemonCore -> localAdFile		1099671	0					
ANR	1099840	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099841	Identifier	daemonCore		1099671	0					
ANR	1099842	Identifier	localAdFile		1099671	1					
ANR	1099843	ExpressionStatement	daemonCore -> localAdFile = NULL	237:3:6674:6704	1099671	2	True				
ANR	1099844	AssignmentExpression	daemonCore -> localAdFile = NULL		1099671	0		=			
ANR	1099845	PtrMemberAccess	daemonCore -> localAdFile		1099671	0					
ANR	1099846	Identifier	daemonCore		1099671	0					
ANR	1099847	Identifier	localAdFile		1099671	1					
ANR	1099848	Identifier	NULL		1099671	1					
ANR	1099849	ReturnType	void		1099671	1					
ANR	1099850	Identifier	clean_files		1099671	2					
ANR	1099851	ParameterList			1099671	3					
ANR	1099852	CFGEntryNode	ENTRY		1099671		True				
ANR	1099853	CFGExitNode	EXIT		1099671		True				
ANR	1099854	Symbol	addrFile		1099671						
ANR	1099855	Symbol	NULL		1099671						
ANR	1099856	Symbol	unlink		1099671						
ANR	1099857	Symbol	D_DAEMONCORE		1099671						
ANR	1099858	Symbol	* daemonCore		1099671						
ANR	1099859	Symbol	daemonCore		1099671						
ANR	1099860	Symbol	D_ALWAYS		1099671						
ANR	1099861	Symbol	D_FULLDEBUG		1099671						
ANR	1099862	Symbol	DebugFlags		1099671						
ANR	1099863	Symbol	daemonCore -> localAdFile		1099671						
ANR	1099864	Symbol	pidFile		1099671						
ANR	1099865	Function	DC_Exit	246:0:6844:9887							
ANR	1099866	FunctionDef	"DC_Exit (int status , const char * shutdown_program)"		1099865	0					
ANR	1099867	CompoundStatement		248:0:6901:9887	1099865	0					
ANR	1099868	ExpressionStatement	clean_files ( )	251:1:7000:7013	1099865	0	True				
ANR	1099869	CallExpression	clean_files ( )		1099865	0					
ANR	1099870	Callee	clean_files		1099865	0					
ANR	1099871	Identifier	clean_files		1099865	0					
ANR	1099872	ArgumentList			1099865	1					
ANR	1099873	IfStatement	if ( FILEObj )		1099865	1					
ANR	1099874	Condition	FILEObj	253:4:7020:7026	1099865	0	True				
ANR	1099875	Identifier	FILEObj		1099865	0					
ANR	1099876	CompoundStatement		6:13:127:127	1099865	1					
ANR	1099877	Statement	delete	254:2:7033:7038	1099865	0	True				
ANR	1099878	ExpressionStatement	FILEObj	254:9:7040:7047	1099865	1	True				
ANR	1099879	Identifier	FILEObj		1099865	0					
ANR	1099880	ExpressionStatement	FILEObj = NULL	255:2:7051:7065	1099865	2	True				
ANR	1099881	AssignmentExpression	FILEObj = NULL		1099865	0		=			
ANR	1099882	Identifier	FILEObj		1099865	0					
ANR	1099883	Identifier	NULL		1099865	1					
ANR	1099884	IfStatement	if ( XMLObj )		1099865	2					
ANR	1099885	Condition	XMLObj	257:4:7074:7079	1099865	0	True				
ANR	1099886	Identifier	XMLObj		1099865	0					
ANR	1099887	CompoundStatement		10:12:180:180	1099865	1					
ANR	1099888	Statement	delete	258:2:7086:7091	1099865	0	True				
ANR	1099889	ExpressionStatement	XMLObj	258:9:7093:7099	1099865	1	True				
ANR	1099890	Identifier	XMLObj		1099865	0					
ANR	1099891	ExpressionStatement	XMLObj = NULL	259:2:7103:7116	1099865	2	True				
ANR	1099892	AssignmentExpression	XMLObj = NULL		1099865	0		=			
ANR	1099893	Identifier	XMLObj		1099865	0					
ANR	1099894	Identifier	NULL		1099865	1					
ANR	1099895	IdentifierDeclStatement	int exit_status ;	266:1:7300:7315	1099865	3	True				
ANR	1099896	IdentifierDecl	exit_status		1099865	0					
ANR	1099897	IdentifierDeclType	int		1099865	0					
ANR	1099898	Identifier	exit_status		1099865	1					
ANR	1099899	IfStatement	if ( daemonCore == NULL || daemonCore -> wantsRestart ( ) )		1099865	4					
ANR	1099900	Condition	daemonCore == NULL || daemonCore -> wantsRestart ( )	267:5:7322:7369	1099865	0	True				
ANR	1099901	OrExpression	daemonCore == NULL || daemonCore -> wantsRestart ( )		1099865	0		||			
ANR	1099902	EqualityExpression	daemonCore == NULL		1099865	0		==			
ANR	1099903	Identifier	daemonCore		1099865	0					
ANR	1099904	Identifier	NULL		1099865	1					
ANR	1099905	CallExpression	daemonCore -> wantsRestart ( )		1099865	1					
ANR	1099906	Callee	daemonCore -> wantsRestart		1099865	0					
ANR	1099907	PtrMemberAccess	daemonCore -> wantsRestart		1099865	0					
ANR	1099908	Identifier	daemonCore		1099865	0					
ANR	1099909	Identifier	wantsRestart		1099865	1					
ANR	1099910	ArgumentList			1099865	1					
ANR	1099911	CompoundStatement		20:55:470:470	1099865	1					
ANR	1099912	ExpressionStatement	exit_status = status	268:2:7376:7396	1099865	0	True				
ANR	1099913	AssignmentExpression	exit_status = status		1099865	0		=			
ANR	1099914	Identifier	exit_status		1099865	0					
ANR	1099915	Identifier	status		1099865	1					
ANR	1099916	ElseStatement	else		1099865	0					
ANR	1099917	CompoundStatement		23:6:505:505	1099865	0					
ANR	1099918	ExpressionStatement	exit_status = DAEMON_NO_RESTART	271:2:7411:7442	1099865	0	True				
ANR	1099919	AssignmentExpression	exit_status = DAEMON_NO_RESTART		1099865	0		=			
ANR	1099920	Identifier	exit_status		1099865	0					
ANR	1099921	Identifier	DAEMON_NO_RESTART		1099865	1					
ANR	1099922	ExpressionStatement	"install_sig_handler ( SIGCHLD , SIG_DFL )"	277:1:7574:7610	1099865	5	True				
ANR	1099923	CallExpression	"install_sig_handler ( SIGCHLD , SIG_DFL )"		1099865	0					
ANR	1099924	Callee	install_sig_handler		1099865	0					
ANR	1099925	Identifier	install_sig_handler		1099865	0					
ANR	1099926	ArgumentList	SIGCHLD		1099865	1					
ANR	1099927	Argument	SIGCHLD		1099865	0					
ANR	1099928	Identifier	SIGCHLD		1099865	0					
ANR	1099929	Argument	SIG_DFL		1099865	1					
ANR	1099930	Identifier	SIG_DFL		1099865	0					
ANR	1099931	ExpressionStatement	"install_sig_handler ( SIGHUP , SIG_DFL )"	278:1:7613:7648	1099865	6	True				
ANR	1099932	CallExpression	"install_sig_handler ( SIGHUP , SIG_DFL )"		1099865	0					
ANR	1099933	Callee	install_sig_handler		1099865	0					
ANR	1099934	Identifier	install_sig_handler		1099865	0					
ANR	1099935	ArgumentList	SIGHUP		1099865	1					
ANR	1099936	Argument	SIGHUP		1099865	0					
ANR	1099937	Identifier	SIGHUP		1099865	0					
ANR	1099938	Argument	SIG_DFL		1099865	1					
ANR	1099939	Identifier	SIG_DFL		1099865	0					
ANR	1099940	ExpressionStatement	"install_sig_handler ( SIGTERM , SIG_DFL )"	279:1:7651:7687	1099865	7	True				
ANR	1099941	CallExpression	"install_sig_handler ( SIGTERM , SIG_DFL )"		1099865	0					
ANR	1099942	Callee	install_sig_handler		1099865	0					
ANR	1099943	Identifier	install_sig_handler		1099865	0					
ANR	1099944	ArgumentList	SIGTERM		1099865	1					
ANR	1099945	Argument	SIGTERM		1099865	0					
ANR	1099946	Identifier	SIGTERM		1099865	0					
ANR	1099947	Argument	SIG_DFL		1099865	1					
ANR	1099948	Identifier	SIG_DFL		1099865	0					
ANR	1099949	ExpressionStatement	"install_sig_handler ( SIGQUIT , SIG_DFL )"	280:1:7690:7726	1099865	8	True				
ANR	1099950	CallExpression	"install_sig_handler ( SIGQUIT , SIG_DFL )"		1099865	0					
ANR	1099951	Callee	install_sig_handler		1099865	0					
ANR	1099952	Identifier	install_sig_handler		1099865	0					
ANR	1099953	ArgumentList	SIGQUIT		1099865	1					
ANR	1099954	Argument	SIGQUIT		1099865	0					
ANR	1099955	Identifier	SIGQUIT		1099865	0					
ANR	1099956	Argument	SIG_DFL		1099865	1					
ANR	1099957	Identifier	SIG_DFL		1099865	0					
ANR	1099958	ExpressionStatement	"install_sig_handler ( SIGUSR1 , SIG_DFL )"	281:1:7729:7765	1099865	9	True				
ANR	1099959	CallExpression	"install_sig_handler ( SIGUSR1 , SIG_DFL )"		1099865	0					
ANR	1099960	Callee	install_sig_handler		1099865	0					
ANR	1099961	Identifier	install_sig_handler		1099865	0					
ANR	1099962	ArgumentList	SIGUSR1		1099865	1					
ANR	1099963	Argument	SIGUSR1		1099865	0					
ANR	1099964	Identifier	SIGUSR1		1099865	0					
ANR	1099965	Argument	SIG_DFL		1099865	1					
ANR	1099966	Identifier	SIG_DFL		1099865	0					
ANR	1099967	ExpressionStatement	"install_sig_handler ( SIGUSR2 , SIG_DFL )"	282:1:7768:7804	1099865	10	True				
ANR	1099968	CallExpression	"install_sig_handler ( SIGUSR2 , SIG_DFL )"		1099865	0					
ANR	1099969	Callee	install_sig_handler		1099865	0					
ANR	1099970	Identifier	install_sig_handler		1099865	0					
ANR	1099971	ArgumentList	SIGUSR2		1099865	1					
ANR	1099972	Argument	SIGUSR2		1099865	0					
ANR	1099973	Identifier	SIGUSR2		1099865	0					
ANR	1099974	Argument	SIG_DFL		1099865	1					
ANR	1099975	Identifier	SIG_DFL		1099865	0					
ANR	1099976	IdentifierDeclStatement	unsigned long pid = 0 ;	286:1:7893:7914	1099865	11	True				
ANR	1099977	IdentifierDecl	pid = 0		1099865	0					
ANR	1099978	IdentifierDeclType	unsigned long		1099865	0					
ANR	1099979	Identifier	pid		1099865	1					
ANR	1099980	AssignmentExpression	pid = 0		1099865	2		=			
ANR	1099981	Identifier	pid		1099865	0					
ANR	1099982	PrimaryExpression	0		1099865	1					
ANR	1099983	IfStatement	if ( daemonCore )		1099865	12					
ANR	1099984	Condition	daemonCore	287:5:7921:7930	1099865	0	True				
ANR	1099985	Identifier	daemonCore		1099865	0					
ANR	1099986	CompoundStatement		40:17:1031:1031	1099865	1					
ANR	1099987	ExpressionStatement	pid = daemonCore -> getpid ( )	288:2:7937:7964	1099865	0	True				
ANR	1099988	AssignmentExpression	pid = daemonCore -> getpid ( )		1099865	0		=			
ANR	1099989	Identifier	pid		1099865	0					
ANR	1099990	CallExpression	daemonCore -> getpid ( )		1099865	1					
ANR	1099991	Callee	daemonCore -> getpid		1099865	0					
ANR	1099992	PtrMemberAccess	daemonCore -> getpid		1099865	0					
ANR	1099993	Identifier	daemonCore		1099865	0					
ANR	1099994	Identifier	getpid		1099865	1					
ANR	1099995	ArgumentList			1099865	1					
ANR	1099996	Statement	delete	289:2:7968:7973	1099865	1	True				
ANR	1099997	ExpressionStatement	daemonCore	289:9:7975:7985	1099865	2	True				
ANR	1099998	Identifier	daemonCore		1099865	0					
ANR	1099999	ExpressionStatement	daemonCore = NULL	290:2:7989:8006	1099865	3	True				
ANR	1100000	AssignmentExpression	daemonCore = NULL		1099865	0		=			
ANR	1100001	Identifier	daemonCore		1099865	0					
ANR	1100002	Identifier	NULL		1099865	1					
ANR	1100003	ExpressionStatement	clear_config ( )	294:1:8070:8084	1099865	13	True				
ANR	1100004	CallExpression	clear_config ( )		1099865	0					
ANR	1100005	Callee	clear_config		1099865	0					
ANR	1100006	Identifier	clear_config		1099865	0					
ANR	1100007	ArgumentList			1099865	1					
ANR	1100008	ExpressionStatement	delete_passwd_cache ( )	297:1:8150:8171	1099865	14	True				
ANR	1100009	CallExpression	delete_passwd_cache ( )		1099865	0					
ANR	1100010	Callee	delete_passwd_cache		1099865	0					
ANR	1100011	Identifier	delete_passwd_cache		1099865	0					
ANR	1100012	ArgumentList			1099865	1					
ANR	1100013	IfStatement	if ( core_dir )		1099865	15					
ANR	1100014	Condition	core_dir	299:6:8180:8187	1099865	0	True				
ANR	1100015	Identifier	core_dir		1099865	0					
ANR	1100016	CompoundStatement		52:17:1289:1289	1099865	1					
ANR	1100017	ExpressionStatement	free ( core_dir )	300:2:8195:8211	1099865	0	True				
ANR	1100018	CallExpression	free ( core_dir )		1099865	0					
ANR	1100019	Callee	free		1099865	0					
ANR	1100020	Identifier	free		1099865	0					
ANR	1100021	ArgumentList	core_dir		1099865	1					
ANR	1100022	Argument	core_dir		1099865	0					
ANR	1100023	Identifier	core_dir		1099865	0					
ANR	1100024	ExpressionStatement	core_dir = NULL	301:2:8215:8230	1099865	1	True				
ANR	1100025	AssignmentExpression	core_dir = NULL		1099865	0		=			
ANR	1100026	Identifier	core_dir		1099865	0					
ANR	1100027	Identifier	NULL		1099865	1					
ANR	1100028	IfStatement	if ( shutdown_program )		1099865	16					
ANR	1100029	Condition	shutdown_program	313:6:8687:8702	1099865	0	True				
ANR	1100030	Identifier	shutdown_program		1099865	0					
ANR	1100031	CompoundStatement		82:2:2448:2515	1099865	1					
ANR	1100032	IfStatement	if ( HAVE_EXECL )		1099865	0					
ANR	1100033	Condition	HAVE_EXECL	314:10:8718:8727	1099865	0	True				
ANR	1100034	Identifier	HAVE_EXECL		1099865	0					
ANR	1100035	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"	315:2:8732:8890	1099865	1	True				
ANR	1100036	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		1099865	0					
ANR	1100037	Callee	dprintf		1099865	0					
ANR	1100038	Identifier	dprintf		1099865	0					
ANR	1100039	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100040	Argument	D_ALWAYS		1099865	0					
ANR	1100041	Identifier	D_ALWAYS		1099865	0					
ANR	1100042	Argument	"""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"""		1099865	1					
ANR	1100043	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"""		1099865	0					
ANR	1100044	Argument	myName		1099865	2					
ANR	1100045	Identifier	myName		1099865	0					
ANR	1100046	Argument	myDistro -> Get ( )		1099865	3					
ANR	1100047	CallExpression	myDistro -> Get ( )		1099865	0					
ANR	1100048	Callee	myDistro -> Get		1099865	0					
ANR	1100049	PtrMemberAccess	myDistro -> Get		1099865	0					
ANR	1100050	Identifier	myDistro		1099865	0					
ANR	1100051	Identifier	Get		1099865	1					
ANR	1100052	ArgumentList			1099865	1					
ANR	1100053	Argument	get_mySubSystem ( ) -> getName ( )		1099865	4					
ANR	1100054	CallExpression	get_mySubSystem ( ) -> getName ( )		1099865	0					
ANR	1100055	Callee	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100056	PtrMemberAccess	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100057	CallExpression	get_mySubSystem ( )		1099865	0					
ANR	1100058	Callee	get_mySubSystem		1099865	0					
ANR	1100059	Identifier	get_mySubSystem		1099865	0					
ANR	1100060	ArgumentList			1099865	1					
ANR	1100061	Identifier	getName		1099865	1					
ANR	1100062	ArgumentList			1099865	1					
ANR	1100063	Argument	pid		1099865	5					
ANR	1100064	Identifier	pid		1099865	0					
ANR	1100065	Argument	shutdown_program		1099865	6					
ANR	1100066	Identifier	shutdown_program		1099865	0					
ANR	1100067	IdentifierDeclStatement	priv_state p = set_root_priv ( ) ;	318:2:8894:8925	1099865	1	True				
ANR	1100068	IdentifierDecl	p = set_root_priv ( )		1099865	0					
ANR	1100069	IdentifierDeclType	priv_state		1099865	0					
ANR	1100070	Identifier	p		1099865	1					
ANR	1100071	AssignmentExpression	p = set_root_priv ( )		1099865	2		=			
ANR	1100072	Identifier	p		1099865	0					
ANR	1100073	CallExpression	set_root_priv ( )		1099865	1					
ANR	1100074	Callee	set_root_priv		1099865	0					
ANR	1100075	Identifier	set_root_priv		1099865	0					
ANR	1100076	ArgumentList			1099865	1					
ANR	1100077	IdentifierDeclStatement	"int exec_status = execl ( shutdown_program , shutdown_program , NULL ) ;"	319:2:8929:8996	1099865	2	True				
ANR	1100078	IdentifierDecl	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		1099865	0					
ANR	1100079	IdentifierDeclType	int		1099865	0					
ANR	1100080	Identifier	exec_status		1099865	1					
ANR	1100081	AssignmentExpression	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		1099865	2		=			
ANR	1100082	Identifier	exec_status		1099865	0					
ANR	1100083	CallExpression	"execl ( shutdown_program , shutdown_program , NULL )"		1099865	1					
ANR	1100084	Callee	execl		1099865	0					
ANR	1100085	Identifier	execl		1099865	0					
ANR	1100086	ArgumentList	shutdown_program		1099865	1					
ANR	1100087	Argument	shutdown_program		1099865	0					
ANR	1100088	Identifier	shutdown_program		1099865	0					
ANR	1100089	Argument	shutdown_program		1099865	1					
ANR	1100090	Identifier	shutdown_program		1099865	0					
ANR	1100091	Argument	NULL		1099865	2					
ANR	1100092	Identifier	NULL		1099865	0					
ANR	1100093	ExpressionStatement	set_priv ( p )	320:2:9000:9013	1099865	3	True				
ANR	1100094	CallExpression	set_priv ( p )		1099865	0					
ANR	1100095	Callee	set_priv		1099865	0					
ANR	1100096	Identifier	set_priv		1099865	0					
ANR	1100097	ArgumentList	p		1099865	1					
ANR	1100098	Argument	p		1099865	0					
ANR	1100099	Identifier	p		1099865	0					
ANR	1100100	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"	321:2:9017:9112	1099865	4	True				
ANR	1100101	CallExpression	"dprintf ( D_ALWAYS , ""**** execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"		1099865	0					
ANR	1100102	Callee	dprintf		1099865	0					
ANR	1100103	Identifier	dprintf		1099865	0					
ANR	1100104	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100105	Argument	D_ALWAYS		1099865	0					
ANR	1100106	Identifier	D_ALWAYS		1099865	0					
ANR	1100107	Argument	"""**** execl() FAILED %d %d %s\\n"""		1099865	1					
ANR	1100108	PrimaryExpression	"""**** execl() FAILED %d %d %s\\n"""		1099865	0					
ANR	1100109	Argument	exec_status		1099865	2					
ANR	1100110	Identifier	exec_status		1099865	0					
ANR	1100111	Argument	errno		1099865	3					
ANR	1100112	Identifier	errno		1099865	0					
ANR	1100113	Argument	strerror ( errno )		1099865	4					
ANR	1100114	CallExpression	strerror ( errno )		1099865	0					
ANR	1100115	Callee	strerror		1099865	0					
ANR	1100116	Identifier	strerror		1099865	0					
ANR	1100117	ArgumentList	errno		1099865	1					
ANR	1100118	Argument	errno		1099865	0					
ANR	1100119	Identifier	errno		1099865	0					
ANR	1100120	Statement	elif	323:6:9120:9123	1099865	5	True				
ANR	1100121	Statement	defined	323:11:9125:9131	1099865	6	True				
ANR	1100122	ExpressionStatement	"( WIN32 ) dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"	323:18:9132:9311	1099865	7	True				
ANR	1100123	CastExpression	"( WIN32 ) dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		1099865	0					
ANR	1100124	CastTarget	WIN32		1099865	0					
ANR	1100125	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		1099865	1					
ANR	1100126	Callee	dprintf		1099865	0					
ANR	1100127	Identifier	dprintf		1099865	0					
ANR	1100128	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100129	Argument	D_ALWAYS		1099865	0					
ANR	1100130	Identifier	D_ALWAYS		1099865	0					
ANR	1100131	Argument	"""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"""		1099865	1					
ANR	1100132	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"""		1099865	0					
ANR	1100133	Argument	myName		1099865	2					
ANR	1100134	Identifier	myName		1099865	0					
ANR	1100135	Argument	myDistro -> Get ( )		1099865	3					
ANR	1100136	CallExpression	myDistro -> Get ( )		1099865	0					
ANR	1100137	Callee	myDistro -> Get		1099865	0					
ANR	1100138	PtrMemberAccess	myDistro -> Get		1099865	0					
ANR	1100139	Identifier	myDistro		1099865	0					
ANR	1100140	Identifier	Get		1099865	1					
ANR	1100141	ArgumentList			1099865	1					
ANR	1100142	Argument	get_mySubSystem ( ) -> getName ( )		1099865	4					
ANR	1100143	CallExpression	get_mySubSystem ( ) -> getName ( )		1099865	0					
ANR	1100144	Callee	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100145	PtrMemberAccess	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100146	CallExpression	get_mySubSystem ( )		1099865	0					
ANR	1100147	Callee	get_mySubSystem		1099865	0					
ANR	1100148	Identifier	get_mySubSystem		1099865	0					
ANR	1100149	ArgumentList			1099865	1					
ANR	1100150	Identifier	getName		1099865	1					
ANR	1100151	ArgumentList			1099865	1					
ANR	1100152	Argument	pid		1099865	5					
ANR	1100153	Identifier	pid		1099865	0					
ANR	1100154	Argument	shutdown_program		1099865	6					
ANR	1100155	Identifier	shutdown_program		1099865	0					
ANR	1100156	IdentifierDeclStatement	priv_state p = set_root_priv ( ) ;	328:2:9315:9346	1099865	8	True				
ANR	1100157	IdentifierDecl	p = set_root_priv ( )		1099865	0					
ANR	1100158	IdentifierDeclType	priv_state		1099865	0					
ANR	1100159	Identifier	p		1099865	1					
ANR	1100160	AssignmentExpression	p = set_root_priv ( )		1099865	2		=			
ANR	1100161	Identifier	p		1099865	0					
ANR	1100162	CallExpression	set_root_priv ( )		1099865	1					
ANR	1100163	Callee	set_root_priv		1099865	0					
ANR	1100164	Identifier	set_root_priv		1099865	0					
ANR	1100165	ArgumentList			1099865	1					
ANR	1100166	IdentifierDeclStatement	"int exec_status = execl ( shutdown_program , shutdown_program , NULL ) ;"	329:2:9350:9417	1099865	9	True				
ANR	1100167	IdentifierDecl	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		1099865	0					
ANR	1100168	IdentifierDeclType	int		1099865	0					
ANR	1100169	Identifier	exec_status		1099865	1					
ANR	1100170	AssignmentExpression	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		1099865	2		=			
ANR	1100171	Identifier	exec_status		1099865	0					
ANR	1100172	CallExpression	"execl ( shutdown_program , shutdown_program , NULL )"		1099865	1					
ANR	1100173	Callee	execl		1099865	0					
ANR	1100174	Identifier	execl		1099865	0					
ANR	1100175	ArgumentList	shutdown_program		1099865	1					
ANR	1100176	Argument	shutdown_program		1099865	0					
ANR	1100177	Identifier	shutdown_program		1099865	0					
ANR	1100178	Argument	shutdown_program		1099865	1					
ANR	1100179	Identifier	shutdown_program		1099865	0					
ANR	1100180	Argument	NULL		1099865	2					
ANR	1100181	Identifier	NULL		1099865	0					
ANR	1100182	ExpressionStatement	set_priv ( p )	330:2:9421:9434	1099865	10	True				
ANR	1100183	CallExpression	set_priv ( p )		1099865	0					
ANR	1100184	Callee	set_priv		1099865	0					
ANR	1100185	Identifier	set_priv		1099865	0					
ANR	1100186	ArgumentList	p		1099865	1					
ANR	1100187	Argument	p		1099865	0					
ANR	1100188	Identifier	p		1099865	0					
ANR	1100189	IfStatement	if ( exec_status )		1099865	11					
ANR	1100190	Condition	exec_status	331:7:9443:9453	1099865	0	True				
ANR	1100191	Identifier	exec_status		1099865	0					
ANR	1100192	CompoundStatement		84:21:2555:2555	1099865	1					
ANR	1100193	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** _execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"	332:3:9462:9559	1099865	0	True				
ANR	1100194	CallExpression	"dprintf ( D_ALWAYS , ""**** _execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"		1099865	0					
ANR	1100195	Callee	dprintf		1099865	0					
ANR	1100196	Identifier	dprintf		1099865	0					
ANR	1100197	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100198	Argument	D_ALWAYS		1099865	0					
ANR	1100199	Identifier	D_ALWAYS		1099865	0					
ANR	1100200	Argument	"""**** _execl() FAILED %d %d %s\\n"""		1099865	1					
ANR	1100201	PrimaryExpression	"""**** _execl() FAILED %d %d %s\\n"""		1099865	0					
ANR	1100202	Argument	exec_status		1099865	2					
ANR	1100203	Identifier	exec_status		1099865	0					
ANR	1100204	Argument	errno		1099865	3					
ANR	1100205	Identifier	errno		1099865	0					
ANR	1100206	Argument	strerror ( errno )		1099865	4					
ANR	1100207	CallExpression	strerror ( errno )		1099865	0					
ANR	1100208	Callee	strerror		1099865	0					
ANR	1100209	Identifier	strerror		1099865	0					
ANR	1100210	ArgumentList	errno		1099865	1					
ANR	1100211	Argument	errno		1099865	0					
ANR	1100212	Identifier	errno		1099865	0					
ANR	1100213	ElseStatement	else		1099865	0					
ANR	1100214	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** execl() not available on this system\\n"" )"	336:2:9578:9644	1099865	0	True				
ANR	1100215	CallExpression	"dprintf ( D_ALWAYS , ""**** execl() not available on this system\\n"" )"		1099865	0					
ANR	1100216	Callee	dprintf		1099865	0					
ANR	1100217	Identifier	dprintf		1099865	0					
ANR	1100218	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100219	Argument	D_ALWAYS		1099865	0					
ANR	1100220	Identifier	D_ALWAYS		1099865	0					
ANR	1100221	Argument	"""**** execl() not available on this system\\n"""		1099865	1					
ANR	1100222	PrimaryExpression	"""**** execl() not available on this system\\n"""		1099865	0					
ANR	1100223	Statement	endif	337:6:9652:9656	1099865	12	True				
ANR	1100224	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , exit_status )"	339:1:9662:9814	1099865	17	True				
ANR	1100225	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , exit_status )"		1099865	0					
ANR	1100226	Callee	dprintf		1099865	0					
ANR	1100227	Identifier	dprintf		1099865	0					
ANR	1100228	ArgumentList	D_ALWAYS		1099865	1					
ANR	1100229	Argument	D_ALWAYS		1099865	0					
ANR	1100230	Identifier	D_ALWAYS		1099865	0					
ANR	1100231	Argument	"""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"""		1099865	1					
ANR	1100232	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"""		1099865	0					
ANR	1100233	Argument	myName		1099865	2					
ANR	1100234	Identifier	myName		1099865	0					
ANR	1100235	Argument	myDistro -> Get ( )		1099865	3					
ANR	1100236	CallExpression	myDistro -> Get ( )		1099865	0					
ANR	1100237	Callee	myDistro -> Get		1099865	0					
ANR	1100238	PtrMemberAccess	myDistro -> Get		1099865	0					
ANR	1100239	Identifier	myDistro		1099865	0					
ANR	1100240	Identifier	Get		1099865	1					
ANR	1100241	ArgumentList			1099865	1					
ANR	1100242	Argument	get_mySubSystem ( ) -> getName ( )		1099865	4					
ANR	1100243	CallExpression	get_mySubSystem ( ) -> getName ( )		1099865	0					
ANR	1100244	Callee	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100245	PtrMemberAccess	get_mySubSystem ( ) -> getName		1099865	0					
ANR	1100246	CallExpression	get_mySubSystem ( )		1099865	0					
ANR	1100247	Callee	get_mySubSystem		1099865	0					
ANR	1100248	Identifier	get_mySubSystem		1099865	0					
ANR	1100249	ArgumentList			1099865	1					
ANR	1100250	Identifier	getName		1099865	1					
ANR	1100251	ArgumentList			1099865	1					
ANR	1100252	Argument	pid		1099865	5					
ANR	1100253	Identifier	pid		1099865	0					
ANR	1100254	Argument	exit_status		1099865	6					
ANR	1100255	Identifier	exit_status		1099865	0					
ANR	1100256	ExpressionStatement	exit ( exit_status )	344:1:9866:9885	1099865	18	True				
ANR	1100257	CallExpression	exit ( exit_status )		1099865	0					
ANR	1100258	Callee	exit		1099865	0					
ANR	1100259	Identifier	exit		1099865	0					
ANR	1100260	ArgumentList	exit_status		1099865	1					
ANR	1100261	Argument	exit_status		1099865	0					
ANR	1100262	Identifier	exit_status		1099865	0					
ANR	1100263	ReturnType	void		1099865	1					
ANR	1100264	Identifier	DC_Exit		1099865	2					
ANR	1100265	ParameterList	"int status , const char * shutdown_program"		1099865	3					
ANR	1100266	Parameter	int status	247:9:6858:6867	1099865	0	True				
ANR	1100267	ParameterType	int		1099865	0					
ANR	1100268	Identifier	status		1099865	1					
ANR	1100269	Parameter	const char * shutdown_program	247:21:6870:6897	1099865	1	True				
ANR	1100270	ParameterType	const char *		1099865	0					
ANR	1100271	Identifier	shutdown_program		1099865	1					
ANR	1100272	CFGEntryNode	ENTRY		1099865		True				
ANR	1100273	CFGExitNode	EXIT		1099865		True				
ANR	1100274	Symbol	core_dir		1099865						
ANR	1100275	Symbol	shutdown_program		1099865						
ANR	1100276	Symbol	SIGQUIT		1099865						
ANR	1100277	Symbol	daemonCore -> getpid		1099865						
ANR	1100278	Symbol	HAVE_EXECL		1099865						
ANR	1100279	Symbol	pid		1099865						
ANR	1100280	Symbol	XMLObj		1099865						
ANR	1100281	Symbol	daemonCore -> wantsRestart		1099865						
ANR	1100282	Symbol	exit_status		1099865						
ANR	1100283	Symbol	myDistro -> Get		1099865						
ANR	1100284	Symbol	FILEObj		1099865						
ANR	1100285	Symbol	myDistro		1099865						
ANR	1100286	Symbol	daemonCore		1099865						
ANR	1100287	Symbol	myName		1099865						
ANR	1100288	Symbol	exec_status		1099865						
ANR	1100289	Symbol	SIGHUP		1099865						
ANR	1100290	Symbol	SIGTERM		1099865						
ANR	1100291	Symbol	errno		1099865						
ANR	1100292	Symbol	NULL		1099865						
ANR	1100293	Symbol	get_mySubSystem ( ) -> getName		1099865						
ANR	1100294	Symbol	* get_mySubSystem		1099865						
ANR	1100295	Symbol	SIGUSR2		1099865						
ANR	1100296	Symbol	D_ALWAYS		1099865						
ANR	1100297	Symbol	SIGUSR1		1099865						
ANR	1100298	Symbol	set_root_priv		1099865						
ANR	1100299	Symbol	p		1099865						
ANR	1100300	Symbol	strerror		1099865						
ANR	1100301	Symbol	SIGCHLD		1099865						
ANR	1100302	Symbol	* daemonCore		1099865						
ANR	1100303	Symbol	* myDistro		1099865						
ANR	1100304	Symbol	SIG_DFL		1099865						
ANR	1100305	Symbol	execl		1099865						
ANR	1100306	Symbol	get_mySubSystem		1099865						
ANR	1100307	Symbol	status		1099865						
ANR	1100308	Symbol	DAEMON_NO_RESTART		1099865						
ANR	1100309	Function	DC_Skip_Auth_Init	348:0:9891:9939							
ANR	1100310	FunctionDef	DC_Skip_Auth_Init ()		1100309	0					
ANR	1100311	CompoundStatement		350:0:9916:9939	1100309	0					
ANR	1100312	ExpressionStatement	doAuthInit = false	351:1:9919:9937	1100309	0	True				
ANR	1100313	AssignmentExpression	doAuthInit = false		1100309	0		=			
ANR	1100314	Identifier	doAuthInit		1100309	0					
ANR	1100315	Identifier	false		1100309	1					
ANR	1100316	ReturnType	void		1100309	1					
ANR	1100317	Identifier	DC_Skip_Auth_Init		1100309	2					
ANR	1100318	ParameterList			1100309	3					
ANR	1100319	CFGEntryNode	ENTRY		1100309		True				
ANR	1100320	CFGExitNode	EXIT		1100309		True				
ANR	1100321	Symbol	doAuthInit		1100309						
ANR	1100322	Symbol	false		1100309						
ANR	1100323	Function	DC_Skip_Core_Init	354:0:9942:9990							
ANR	1100324	FunctionDef	DC_Skip_Core_Init ()		1100323	0					
ANR	1100325	CompoundStatement		356:0:9967:9990	1100323	0					
ANR	1100326	ExpressionStatement	doCoreInit = false	357:1:9970:9988	1100323	0	True				
ANR	1100327	AssignmentExpression	doCoreInit = false		1100323	0		=			
ANR	1100328	Identifier	doCoreInit		1100323	0					
ANR	1100329	Identifier	false		1100323	1					
ANR	1100330	ReturnType	void		1100323	1					
ANR	1100331	Identifier	DC_Skip_Core_Init		1100323	2					
ANR	1100332	ParameterList			1100323	3					
ANR	1100333	CFGEntryNode	ENTRY		1100323		True				
ANR	1100334	CFGExitNode	EXIT		1100323		True				
ANR	1100335	Symbol	doCoreInit		1100323						
ANR	1100336	Symbol	false		1100323						
ANR	1100337	Function	kill_daemon_ad_file	360:0:9993:10236							
ANR	1100338	FunctionDef	kill_daemon_ad_file ()		1100337	0					
ANR	1100339	CompoundStatement		362:0:10027:10236	1100337	0					
ANR	1100340	IdentifierDeclStatement	MyString param_name ;	363:1:10030:10049	1100337	0	True				
ANR	1100341	IdentifierDecl	param_name		1100337	0					
ANR	1100342	IdentifierDeclType	MyString		1100337	0					
ANR	1100343	Identifier	param_name		1100337	1					
ANR	1100344	ExpressionStatement	"param_name . sprintf ( ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	364:1:10052:10123	1100337	1	True				
ANR	1100345	CallExpression	"param_name . sprintf ( ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		1100337	0					
ANR	1100346	Callee	param_name . sprintf		1100337	0					
ANR	1100347	MemberAccess	param_name . sprintf		1100337	0					
ANR	1100348	Identifier	param_name		1100337	0					
ANR	1100349	Identifier	sprintf		1100337	1					
ANR	1100350	ArgumentList	"""%s_DAEMON_AD_FILE"""		1100337	1					
ANR	1100351	Argument	"""%s_DAEMON_AD_FILE"""		1100337	0					
ANR	1100352	PrimaryExpression	"""%s_DAEMON_AD_FILE"""		1100337	0					
ANR	1100353	Argument	get_mySubSystem ( ) -> getName ( )		1100337	1					
ANR	1100354	CallExpression	get_mySubSystem ( ) -> getName ( )		1100337	0					
ANR	1100355	Callee	get_mySubSystem ( ) -> getName		1100337	0					
ANR	1100356	PtrMemberAccess	get_mySubSystem ( ) -> getName		1100337	0					
ANR	1100357	CallExpression	get_mySubSystem ( )		1100337	0					
ANR	1100358	Callee	get_mySubSystem		1100337	0					
ANR	1100359	Identifier	get_mySubSystem		1100337	0					
ANR	1100360	ArgumentList			1100337	1					
ANR	1100361	Identifier	getName		1100337	1					
ANR	1100362	ArgumentList			1100337	1					
ANR	1100363	IdentifierDeclStatement	char * ad_file = param ( param_name . Value ( ) ) ;	365:1:10126:10167	1100337	2	True				
ANR	1100364	IdentifierDecl	* ad_file = param ( param_name . Value ( ) )		1100337	0					
ANR	1100365	IdentifierDeclType	char *		1100337	0					
ANR	1100366	Identifier	ad_file		1100337	1					
ANR	1100367	AssignmentExpression	* ad_file = param ( param_name . Value ( ) )		1100337	2		=			
ANR	1100368	Identifier	ad_file		1100337	0					
ANR	1100369	CallExpression	param ( param_name . Value ( ) )		1100337	1					
ANR	1100370	Callee	param		1100337	0					
ANR	1100371	Identifier	param		1100337	0					
ANR	1100372	ArgumentList	param_name . Value ( )		1100337	1					
ANR	1100373	Argument	param_name . Value ( )		1100337	0					
ANR	1100374	CallExpression	param_name . Value ( )		1100337	0					
ANR	1100375	Callee	param_name . Value		1100337	0					
ANR	1100376	MemberAccess	param_name . Value		1100337	0					
ANR	1100377	Identifier	param_name		1100337	0					
ANR	1100378	Identifier	Value		1100337	1					
ANR	1100379	ArgumentList			1100337	1					
ANR	1100380	IfStatement	if ( ! ad_file )		1100337	3					
ANR	1100381	Condition	! ad_file	366:5:10174:10181	1100337	0	True				
ANR	1100382	UnaryOperationExpression	! ad_file		1100337	0					
ANR	1100383	UnaryOperator	!		1100337	0					
ANR	1100384	Identifier	ad_file		1100337	1					
ANR	1100385	CompoundStatement		5:16:157:157	1100337	1					
ANR	1100386	ReturnStatement	return ;	367:2:10189:10195	1100337	0	True				
ANR	1100387	ExpressionStatement	unlink ( ad_file )	370:1:10202:10217	1100337	4	True				
ANR	1100388	CallExpression	unlink ( ad_file )		1100337	0					
ANR	1100389	Callee	unlink		1100337	0					
ANR	1100390	Identifier	unlink		1100337	0					
ANR	1100391	ArgumentList	ad_file		1100337	1					
ANR	1100392	Argument	ad_file		1100337	0					
ANR	1100393	Identifier	ad_file		1100337	0					
ANR	1100394	ExpressionStatement	free ( ad_file )	372:1:10221:10234	1100337	5	True				
ANR	1100395	CallExpression	free ( ad_file )		1100337	0					
ANR	1100396	Callee	free		1100337	0					
ANR	1100397	Identifier	free		1100337	0					
ANR	1100398	ArgumentList	ad_file		1100337	1					
ANR	1100399	Argument	ad_file		1100337	0					
ANR	1100400	Identifier	ad_file		1100337	0					
ANR	1100401	ReturnType	static void		1100337	1					
ANR	1100402	Identifier	kill_daemon_ad_file		1100337	2					
ANR	1100403	ParameterList			1100337	3					
ANR	1100404	CFGEntryNode	ENTRY		1100337		True				
ANR	1100405	CFGExitNode	EXIT		1100337		True				
ANR	1100406	Symbol	ad_file		1100337						
ANR	1100407	Symbol	get_mySubSystem ( ) -> getName		1100337						
ANR	1100408	Symbol	* get_mySubSystem		1100337						
ANR	1100409	Symbol	param		1100337						
ANR	1100410	Symbol	param_name		1100337						
ANR	1100411	Symbol	get_mySubSystem		1100337						
ANR	1100412	Symbol	param_name . Value		1100337						
ANR	1100413	Function	drop_addr_file	375:0:10239:11317							
ANR	1100414	FunctionDef	drop_addr_file ()		1100413	0					
ANR	1100415	CompoundStatement		377:0:10261:11317	1100413	0					
ANR	1100416	IdentifierDeclStatement	FILE * ADDR_FILE ;	378:1:10264:10279	1100413	0	True				
ANR	1100417	IdentifierDecl	* ADDR_FILE		1100413	0					
ANR	1100418	IdentifierDeclType	FILE *		1100413	0					
ANR	1100419	Identifier	ADDR_FILE		1100413	1					
ANR	1100420	IdentifierDeclStatement	char addr_file [ 100 ] ;	379:1:10282:10301	1100413	1	True				
ANR	1100421	IdentifierDecl	addr_file [ 100 ]		1100413	0					
ANR	1100422	IdentifierDeclType	char [ 100 ]		1100413	0					
ANR	1100423	Identifier	addr_file		1100413	1					
ANR	1100424	PrimaryExpression	100		1100413	2					
ANR	1100425	ExpressionStatement	"sprintf ( addr_file , ""%s_ADDRESS_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	381:1:10305:10374	1100413	2	True				
ANR	1100426	CallExpression	"sprintf ( addr_file , ""%s_ADDRESS_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		1100413	0					
ANR	1100427	Callee	sprintf		1100413	0					
ANR	1100428	Identifier	sprintf		1100413	0					
ANR	1100429	ArgumentList	addr_file		1100413	1					
ANR	1100430	Argument	addr_file		1100413	0					
ANR	1100431	Identifier	addr_file		1100413	0					
ANR	1100432	Argument	"""%s_ADDRESS_FILE"""		1100413	1					
ANR	1100433	PrimaryExpression	"""%s_ADDRESS_FILE"""		1100413	0					
ANR	1100434	Argument	get_mySubSystem ( ) -> getName ( )		1100413	2					
ANR	1100435	CallExpression	get_mySubSystem ( ) -> getName ( )		1100413	0					
ANR	1100436	Callee	get_mySubSystem ( ) -> getName		1100413	0					
ANR	1100437	PtrMemberAccess	get_mySubSystem ( ) -> getName		1100413	0					
ANR	1100438	CallExpression	get_mySubSystem ( )		1100413	0					
ANR	1100439	Callee	get_mySubSystem		1100413	0					
ANR	1100440	Identifier	get_mySubSystem		1100413	0					
ANR	1100441	ArgumentList			1100413	1					
ANR	1100442	Identifier	getName		1100413	1					
ANR	1100443	ArgumentList			1100413	1					
ANR	1100444	IfStatement	if ( addrFile )		1100413	3					
ANR	1100445	Condition	addrFile	383:5:10382:10389	1100413	0	True				
ANR	1100446	Identifier	addrFile		1100413	0					
ANR	1100447	CompoundStatement		7:16:131:131	1100413	1					
ANR	1100448	ExpressionStatement	free ( addrFile )	384:2:10397:10413	1100413	0	True				
ANR	1100449	CallExpression	free ( addrFile )		1100413	0					
ANR	1100450	Callee	free		1100413	0					
ANR	1100451	Identifier	free		1100413	0					
ANR	1100452	ArgumentList	addrFile		1100413	1					
ANR	1100453	Argument	addrFile		1100413	0					
ANR	1100454	Identifier	addrFile		1100413	0					
ANR	1100455	ExpressionStatement	addrFile = param ( addr_file )	386:1:10419:10448	1100413	4	True				
ANR	1100456	AssignmentExpression	addrFile = param ( addr_file )		1100413	0		=			
ANR	1100457	Identifier	addrFile		1100413	0					
ANR	1100458	CallExpression	param ( addr_file )		1100413	1					
ANR	1100459	Callee	param		1100413	0					
ANR	1100460	Identifier	param		1100413	0					
ANR	1100461	ArgumentList	addr_file		1100413	1					
ANR	1100462	Argument	addr_file		1100413	0					
ANR	1100463	Identifier	addr_file		1100413	0					
ANR	1100464	IfStatement	if ( addrFile )		1100413	5					
ANR	1100465	Condition	addrFile	388:5:10456:10463	1100413	0	True				
ANR	1100466	Identifier	addrFile		1100413	0					
ANR	1100467	CompoundStatement		13:2:209:229	1100413	1					
ANR	1100468	IdentifierDeclStatement	MyString newAddrFile ;	389:2:10471:10491	1100413	0	True				
ANR	1100469	IdentifierDecl	newAddrFile		1100413	0					
ANR	1100470	IdentifierDeclType	MyString		1100413	0					
ANR	1100471	Identifier	newAddrFile		1100413	1					
ANR	1100472	ExpressionStatement	"newAddrFile . sprintf ( ""%s.new"" , addrFile )"	390:2:10495:10533	1100413	1	True				
ANR	1100473	CallExpression	"newAddrFile . sprintf ( ""%s.new"" , addrFile )"		1100413	0					
ANR	1100474	Callee	newAddrFile . sprintf		1100413	0					
ANR	1100475	MemberAccess	newAddrFile . sprintf		1100413	0					
ANR	1100476	Identifier	newAddrFile		1100413	0					
ANR	1100477	Identifier	sprintf		1100413	1					
ANR	1100478	ArgumentList	"""%s.new"""		1100413	1					
ANR	1100479	Argument	"""%s.new"""		1100413	0					
ANR	1100480	PrimaryExpression	"""%s.new"""		1100413	0					
ANR	1100481	Argument	addrFile		1100413	1					
ANR	1100482	Identifier	addrFile		1100413	0					
ANR	1100483	IfStatement	"if ( ( ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" ) ) )"		1100413	2					
ANR	1100484	Condition	"ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"	391:6:10541:10605	1100413	0	True				
ANR	1100485	AssignmentExpression	"ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"		1100413	0		=			
ANR	1100486	Identifier	ADDR_FILE		1100413	0					
ANR	1100487	CallExpression	"safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"		1100413	1					
ANR	1100488	Callee	safe_fopen_wrapper_follow		1100413	0					
ANR	1100489	Identifier	safe_fopen_wrapper_follow		1100413	0					
ANR	1100490	ArgumentList	newAddrFile . Value ( )		1100413	1					
ANR	1100491	Argument	newAddrFile . Value ( )		1100413	0					
ANR	1100492	CallExpression	newAddrFile . Value ( )		1100413	0					
ANR	1100493	Callee	newAddrFile . Value		1100413	0					
ANR	1100494	MemberAccess	newAddrFile . Value		1100413	0					
ANR	1100495	Identifier	newAddrFile		1100413	0					
ANR	1100496	Identifier	Value		1100413	1					
ANR	1100497	ArgumentList			1100413	1					
ANR	1100498	Argument	"""w"""		1100413	1					
ANR	1100499	PrimaryExpression	"""w"""		1100413	0					
ANR	1100500	CompoundStatement		17:3:412:465	1100413	1					
ANR	1100501	IdentifierDeclStatement	const char * addr = daemonCore -> privateNetworkIpAddr ( ) ;	393:3:10674:10727	1100413	0	True				
ANR	1100502	IdentifierDecl	* addr = daemonCore -> privateNetworkIpAddr ( )		1100413	0					
ANR	1100503	IdentifierDeclType	const char *		1100413	0					
ANR	1100504	Identifier	addr		1100413	1					
ANR	1100505	AssignmentExpression	* addr = daemonCore -> privateNetworkIpAddr ( )		1100413	2		=			
ANR	1100506	Identifier	addr		1100413	0					
ANR	1100507	CallExpression	daemonCore -> privateNetworkIpAddr ( )		1100413	1					
ANR	1100508	Callee	daemonCore -> privateNetworkIpAddr		1100413	0					
ANR	1100509	PtrMemberAccess	daemonCore -> privateNetworkIpAddr		1100413	0					
ANR	1100510	Identifier	daemonCore		1100413	0					
ANR	1100511	Identifier	privateNetworkIpAddr		1100413	1					
ANR	1100512	ArgumentList			1100413	1					
ANR	1100513	IfStatement	if ( ! addr )		1100413	1					
ANR	1100514	Condition	! addr	394:7:10736:10740	1100413	0	True				
ANR	1100515	UnaryOperationExpression	! addr		1100413	0					
ANR	1100516	UnaryOperator	!		1100413	0					
ANR	1100517	Identifier	addr		1100413	1					
ANR	1100518	CompoundStatement		18:14:481:481	1100413	1					
ANR	1100519	ExpressionStatement	addr = daemonCore -> publicNetworkIpAddr ( )	396:4:10793:10833	1100413	0	True				
ANR	1100520	AssignmentExpression	addr = daemonCore -> publicNetworkIpAddr ( )		1100413	0		=			
ANR	1100521	Identifier	addr		1100413	0					
ANR	1100522	CallExpression	daemonCore -> publicNetworkIpAddr ( )		1100413	1					
ANR	1100523	Callee	daemonCore -> publicNetworkIpAddr		1100413	0					
ANR	1100524	PtrMemberAccess	daemonCore -> publicNetworkIpAddr		1100413	0					
ANR	1100525	Identifier	daemonCore		1100413	0					
ANR	1100526	Identifier	publicNetworkIpAddr		1100413	1					
ANR	1100527	ArgumentList			1100413	1					
ANR	1100528	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , addr )"	398:3:10843:10877	1100413	2	True				
ANR	1100529	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , addr )"		1100413	0					
ANR	1100530	Callee	fprintf		1100413	0					
ANR	1100531	Identifier	fprintf		1100413	0					
ANR	1100532	ArgumentList	ADDR_FILE		1100413	1					
ANR	1100533	Argument	ADDR_FILE		1100413	0					
ANR	1100534	Identifier	ADDR_FILE		1100413	0					
ANR	1100535	Argument	"""%s\\n"""		1100413	1					
ANR	1100536	PrimaryExpression	"""%s\\n"""		1100413	0					
ANR	1100537	Argument	addr		1100413	2					
ANR	1100538	Identifier	addr		1100413	0					
ANR	1100539	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorVersion ( ) )"	399:3:10882:10927	1100413	3	True				
ANR	1100540	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorVersion ( ) )"		1100413	0					
ANR	1100541	Callee	fprintf		1100413	0					
ANR	1100542	Identifier	fprintf		1100413	0					
ANR	1100543	ArgumentList	ADDR_FILE		1100413	1					
ANR	1100544	Argument	ADDR_FILE		1100413	0					
ANR	1100545	Identifier	ADDR_FILE		1100413	0					
ANR	1100546	Argument	"""%s\\n"""		1100413	1					
ANR	1100547	PrimaryExpression	"""%s\\n"""		1100413	0					
ANR	1100548	Argument	CondorVersion ( )		1100413	2					
ANR	1100549	CallExpression	CondorVersion ( )		1100413	0					
ANR	1100550	Callee	CondorVersion		1100413	0					
ANR	1100551	Identifier	CondorVersion		1100413	0					
ANR	1100552	ArgumentList			1100413	1					
ANR	1100553	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorPlatform ( ) )"	400:3:10932:10978	1100413	4	True				
ANR	1100554	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorPlatform ( ) )"		1100413	0					
ANR	1100555	Callee	fprintf		1100413	0					
ANR	1100556	Identifier	fprintf		1100413	0					
ANR	1100557	ArgumentList	ADDR_FILE		1100413	1					
ANR	1100558	Argument	ADDR_FILE		1100413	0					
ANR	1100559	Identifier	ADDR_FILE		1100413	0					
ANR	1100560	Argument	"""%s\\n"""		1100413	1					
ANR	1100561	PrimaryExpression	"""%s\\n"""		1100413	0					
ANR	1100562	Argument	CondorPlatform ( )		1100413	2					
ANR	1100563	CallExpression	CondorPlatform ( )		1100413	0					
ANR	1100564	Callee	CondorPlatform		1100413	0					
ANR	1100565	Identifier	CondorPlatform		1100413	0					
ANR	1100566	ArgumentList			1100413	1					
ANR	1100567	ExpressionStatement	fclose ( ADDR_FILE )	401:3:10983:11002	1100413	5	True				
ANR	1100568	CallExpression	fclose ( ADDR_FILE )		1100413	0					
ANR	1100569	Callee	fclose		1100413	0					
ANR	1100570	Identifier	fclose		1100413	0					
ANR	1100571	ArgumentList	ADDR_FILE		1100413	1					
ANR	1100572	Argument	ADDR_FILE		1100413	0					
ANR	1100573	Identifier	ADDR_FILE		1100413	0					
ANR	1100574	IfStatement	"if ( rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0 )"		1100413	6					
ANR	1100575	Condition	"rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0"	402:7:11011:11054	1100413	0	True				
ANR	1100576	EqualityExpression	"rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0"		1100413	0		!=			
ANR	1100577	CallExpression	"rotate_file ( newAddrFile . Value ( ) , addrFile )"		1100413	0					
ANR	1100578	Callee	rotate_file		1100413	0					
ANR	1100579	Identifier	rotate_file		1100413	0					
ANR	1100580	ArgumentList	newAddrFile . Value ( )		1100413	1					
ANR	1100581	Argument	newAddrFile . Value ( )		1100413	0					
ANR	1100582	CallExpression	newAddrFile . Value ( )		1100413	0					
ANR	1100583	Callee	newAddrFile . Value		1100413	0					
ANR	1100584	MemberAccess	newAddrFile . Value		1100413	0					
ANR	1100585	Identifier	newAddrFile		1100413	0					
ANR	1100586	Identifier	Value		1100413	1					
ANR	1100587	ArgumentList			1100413	1					
ANR	1100588	Argument	addrFile		1100413	1					
ANR	1100589	Identifier	addrFile		1100413	0					
ANR	1100590	PrimaryExpression	0		1100413	1					
ANR	1100591	CompoundStatement		26:54:796:796	1100413	1					
ANR	1100592	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: failed to rotate %s to %s\\n"" , newAddrFile . Value ( ) , addrFile )"	403:4:11064:11184	1100413	0	True				
ANR	1100593	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: failed to rotate %s to %s\\n"" , newAddrFile . Value ( ) , addrFile )"		1100413	0					
ANR	1100594	Callee	dprintf		1100413	0					
ANR	1100595	Identifier	dprintf		1100413	0					
ANR	1100596	ArgumentList	D_ALWAYS		1100413	1					
ANR	1100597	Argument	D_ALWAYS		1100413	0					
ANR	1100598	Identifier	D_ALWAYS		1100413	0					
ANR	1100599	Argument	"""DaemonCore: ERROR: failed to rotate %s to %s\\n"""		1100413	1					
ANR	1100600	PrimaryExpression	"""DaemonCore: ERROR: failed to rotate %s to %s\\n"""		1100413	0					
ANR	1100601	Argument	newAddrFile . Value ( )		1100413	2					
ANR	1100602	CallExpression	newAddrFile . Value ( )		1100413	0					
ANR	1100603	Callee	newAddrFile . Value		1100413	0					
ANR	1100604	MemberAccess	newAddrFile . Value		1100413	0					
ANR	1100605	Identifier	newAddrFile		1100413	0					
ANR	1100606	Identifier	Value		1100413	1					
ANR	1100607	ArgumentList			1100413	1					
ANR	1100608	Argument	addrFile		1100413	3					
ANR	1100609	Identifier	addrFile		1100413	0					
ANR	1100610	ElseStatement	else		1100413	0					
ANR	1100611	CompoundStatement		32:9:938:938	1100413	0					
ANR	1100612	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open address file %s\\n"" , newAddrFile . Value ( ) )"	409:3:11205:11308	1100413	0	True				
ANR	1100613	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open address file %s\\n"" , newAddrFile . Value ( ) )"		1100413	0					
ANR	1100614	Callee	dprintf		1100413	0					
ANR	1100615	Identifier	dprintf		1100413	0					
ANR	1100616	ArgumentList	D_ALWAYS		1100413	1					
ANR	1100617	Argument	D_ALWAYS		1100413	0					
ANR	1100618	Identifier	D_ALWAYS		1100413	0					
ANR	1100619	Argument	"""DaemonCore: ERROR: Can't open address file %s\\n"""		1100413	1					
ANR	1100620	PrimaryExpression	"""DaemonCore: ERROR: Can't open address file %s\\n"""		1100413	0					
ANR	1100621	Argument	newAddrFile . Value ( )		1100413	2					
ANR	1100622	CallExpression	newAddrFile . Value ( )		1100413	0					
ANR	1100623	Callee	newAddrFile . Value		1100413	0					
ANR	1100624	MemberAccess	newAddrFile . Value		1100413	0					
ANR	1100625	Identifier	newAddrFile		1100413	0					
ANR	1100626	Identifier	Value		1100413	1					
ANR	1100627	ArgumentList			1100413	1					
ANR	1100628	ReturnType	void		1100413	1					
ANR	1100629	Identifier	drop_addr_file		1100413	2					
ANR	1100630	ParameterList			1100413	3					
ANR	1100631	CFGEntryNode	ENTRY		1100413		True				
ANR	1100632	CFGExitNode	EXIT		1100413		True				
ANR	1100633	Symbol	addrFile		1100413						
ANR	1100634	Symbol	get_mySubSystem ( ) -> getName		1100413						
ANR	1100635	Symbol	* get_mySubSystem		1100413						
ANR	1100636	Symbol	D_ALWAYS		1100413						
ANR	1100637	Symbol	ADDR_FILE		1100413						
ANR	1100638	Symbol	daemonCore -> publicNetworkIpAddr		1100413						
ANR	1100639	Symbol	addr_file		1100413						
ANR	1100640	Symbol	param		1100413						
ANR	1100641	Symbol	newAddrFile . Value		1100413						
ANR	1100642	Symbol	CondorVersion		1100413						
ANR	1100643	Symbol	* daemonCore		1100413						
ANR	1100644	Symbol	daemonCore		1100413						
ANR	1100645	Symbol	CondorPlatform		1100413						
ANR	1100646	Symbol	daemonCore -> privateNetworkIpAddr		1100413						
ANR	1100647	Symbol	rotate_file		1100413						
ANR	1100648	Symbol	newAddrFile		1100413						
ANR	1100649	Symbol	addr		1100413						
ANR	1100650	Symbol	get_mySubSystem		1100413						
ANR	1100651	Symbol	safe_fopen_wrapper_follow		1100413						
ANR	1100652	Function	drop_pid_file	416:0:11320:11691							
ANR	1100653	FunctionDef	drop_pid_file ()		1100652	0					
ANR	1100654	CompoundStatement		418:0:11342:11691	1100652	0					
ANR	1100655	IdentifierDeclStatement	FILE * PID_FILE ;	419:1:11345:11359	1100652	0	True				
ANR	1100656	IdentifierDecl	* PID_FILE		1100652	0					
ANR	1100657	IdentifierDeclType	FILE *		1100652	0					
ANR	1100658	Identifier	PID_FILE		1100652	1					
ANR	1100659	IfStatement	if ( ! pidFile )		1100652	1					
ANR	1100660	Condition	! pidFile	421:5:11367:11374	1100652	0	True				
ANR	1100661	UnaryOperationExpression	! pidFile		1100652	0					
ANR	1100662	UnaryOperator	!		1100652	0					
ANR	1100663	Identifier	pidFile		1100652	1					
ANR	1100664	CompoundStatement		4:16:35:35	1100652	1					
ANR	1100665	ReturnStatement	return ;	423:2:11417:11423	1100652	0	True				
ANR	1100666	IfStatement	"if ( ( PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" ) ) )"		1100652	2					
ANR	1100667	Condition	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" )"	426:5:11434:11485	1100652	0	True				
ANR	1100668	AssignmentExpression	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" )"		1100652	0		=			
ANR	1100669	Identifier	PID_FILE		1100652	0					
ANR	1100670	CallExpression	"safe_fopen_wrapper_follow ( pidFile , ""w"" )"		1100652	1					
ANR	1100671	Callee	safe_fopen_wrapper_follow		1100652	0					
ANR	1100672	Identifier	safe_fopen_wrapper_follow		1100652	0					
ANR	1100673	ArgumentList	pidFile		1100652	1					
ANR	1100674	Argument	pidFile		1100652	0					
ANR	1100675	Identifier	pidFile		1100652	0					
ANR	1100676	Argument	"""w"""		1100652	1					
ANR	1100677	PrimaryExpression	"""w"""		1100652	0					
ANR	1100678	CompoundStatement		9:60:146:146	1100652	1					
ANR	1100679	ExpressionStatement	"fprintf ( PID_FILE , ""%lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"	427:2:11493:11564	1100652	0	True				
ANR	1100680	CallExpression	"fprintf ( PID_FILE , ""%lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"		1100652	0					
ANR	1100681	Callee	fprintf		1100652	0					
ANR	1100682	Identifier	fprintf		1100652	0					
ANR	1100683	ArgumentList	PID_FILE		1100652	1					
ANR	1100684	Argument	PID_FILE		1100652	0					
ANR	1100685	Identifier	PID_FILE		1100652	0					
ANR	1100686	Argument	"""%lu\\n"""		1100652	1					
ANR	1100687	PrimaryExpression	"""%lu\\n"""		1100652	0					
ANR	1100688	Argument	( unsigned long ) daemonCore -> getpid ( )		1100652	2					
ANR	1100689	CastExpression	( unsigned long ) daemonCore -> getpid ( )		1100652	0					
ANR	1100690	CastTarget	unsigned long		1100652	0					
ANR	1100691	CallExpression	daemonCore -> getpid ( )		1100652	1					
ANR	1100692	Callee	daemonCore -> getpid		1100652	0					
ANR	1100693	PtrMemberAccess	daemonCore -> getpid		1100652	0					
ANR	1100694	Identifier	daemonCore		1100652	0					
ANR	1100695	Identifier	getpid		1100652	1					
ANR	1100696	ArgumentList			1100652	1					
ANR	1100697	ExpressionStatement	fclose ( PID_FILE )	429:2:11569:11587	1100652	1	True				
ANR	1100698	CallExpression	fclose ( PID_FILE )		1100652	0					
ANR	1100699	Callee	fclose		1100652	0					
ANR	1100700	Identifier	fclose		1100652	0					
ANR	1100701	ArgumentList	PID_FILE		1100652	1					
ANR	1100702	Argument	PID_FILE		1100652	0					
ANR	1100703	Identifier	PID_FILE		1100652	0					
ANR	1100704	ElseStatement	else		1100652	0					
ANR	1100705	CompoundStatement		13:8:254:254	1100652	0					
ANR	1100706	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open pid file %s\\n"" , pidFile )"	431:2:11601:11686	1100652	0	True				
ANR	1100707	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open pid file %s\\n"" , pidFile )"		1100652	0					
ANR	1100708	Callee	dprintf		1100652	0					
ANR	1100709	Identifier	dprintf		1100652	0					
ANR	1100710	ArgumentList	D_ALWAYS		1100652	1					
ANR	1100711	Argument	D_ALWAYS		1100652	0					
ANR	1100712	Identifier	D_ALWAYS		1100652	0					
ANR	1100713	Argument	"""DaemonCore: ERROR: Can't open pid file %s\\n"""		1100652	1					
ANR	1100714	PrimaryExpression	"""DaemonCore: ERROR: Can't open pid file %s\\n"""		1100652	0					
ANR	1100715	Argument	pidFile		1100652	2					
ANR	1100716	Identifier	pidFile		1100652	0					
ANR	1100717	ReturnType	void		1100652	1					
ANR	1100718	Identifier	drop_pid_file		1100652	2					
ANR	1100719	ParameterList			1100652	3					
ANR	1100720	CFGEntryNode	ENTRY		1100652		True				
ANR	1100721	CFGExitNode	EXIT		1100652		True				
ANR	1100722	Symbol	* daemonCore		1100652						
ANR	1100723	Symbol	daemonCore		1100652						
ANR	1100724	Symbol	daemonCore -> getpid		1100652						
ANR	1100725	Symbol	D_ALWAYS		1100652						
ANR	1100726	Symbol	PID_FILE		1100652						
ANR	1100727	Symbol	safe_fopen_wrapper_follow		1100652						
ANR	1100728	Symbol	pidFile		1100652						
ANR	1100729	Function	do_kill	438:0:11695:13235							
ANR	1100730	FunctionDef	do_kill ()		1100729	0					
ANR	1100731	CompoundStatement		440:0:11711:13235	1100729	0					
ANR	1100732	IdentifierDeclStatement	FILE * PID_FILE ;	442:1:11728:11742	1100729	0	True				
ANR	1100733	IdentifierDecl	* PID_FILE		1100729	0					
ANR	1100734	IdentifierDeclType	FILE *		1100729	0					
ANR	1100735	Identifier	PID_FILE		1100729	1					
ANR	1100736	IdentifierDeclStatement	pid_t pid = 0 ;	443:1:11745:11759	1100729	1	True				
ANR	1100737	IdentifierDecl	pid = 0		1100729	0					
ANR	1100738	IdentifierDeclType	pid_t		1100729	0					
ANR	1100739	Identifier	pid		1100729	1					
ANR	1100740	AssignmentExpression	pid = 0		1100729	2		=			
ANR	1100741	Identifier	pid		1100729	0					
ANR	1100742	PrimaryExpression	0		1100729	1					
ANR	1100743	IdentifierDeclStatement	unsigned long tmp_ul_int = 0 ;	444:1:11762:11790	1100729	2	True				
ANR	1100744	IdentifierDecl	tmp_ul_int = 0		1100729	0					
ANR	1100745	IdentifierDeclType	unsigned long		1100729	0					
ANR	1100746	Identifier	tmp_ul_int		1100729	1					
ANR	1100747	AssignmentExpression	tmp_ul_int = 0		1100729	2		=			
ANR	1100748	Identifier	tmp_ul_int		1100729	0					
ANR	1100749	PrimaryExpression	0		1100729	1					
ANR	1100750	IdentifierDeclStatement	"char * log , * tmp ;"	445:1:11793:11808	1100729	3	True				
ANR	1100751	IdentifierDecl	* log		1100729	0					
ANR	1100752	IdentifierDeclType	char *		1100729	0					
ANR	1100753	Identifier	log		1100729	1					
ANR	1100754	IdentifierDecl	* tmp		1100729	1					
ANR	1100755	IdentifierDeclType	char *		1100729	0					
ANR	1100756	Identifier	tmp		1100729	1					
ANR	1100757	IfStatement	if ( ! pidFile )		1100729	4					
ANR	1100758	Condition	! pidFile	447:5:11816:11823	1100729	0	True				
ANR	1100759	UnaryOperationExpression	! pidFile		1100729	0					
ANR	1100760	UnaryOperator	!		1100729	0					
ANR	1100761	Identifier	pidFile		1100729	1					
ANR	1100762	CompoundStatement		8:16:115:115	1100729	1					
ANR	1100763	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: no pidfile specified for -kill\\n"" )"	448:2:11831:11909	1100729	0	True				
ANR	1100764	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: no pidfile specified for -kill\\n"" )"		1100729	0					
ANR	1100765	Callee	fprintf		1100729	0					
ANR	1100766	Identifier	fprintf		1100729	0					
ANR	1100767	ArgumentList	stderr		1100729	1					
ANR	1100768	Argument	stderr		1100729	0					
ANR	1100769	Identifier	stderr		1100729	0					
ANR	1100770	Argument	"""DaemonCore: ERROR: no pidfile specified for -kill\\n"""		1100729	1					
ANR	1100771	PrimaryExpression	"""DaemonCore: ERROR: no pidfile specified for -kill\\n"""		1100729	0					
ANR	1100772	ExpressionStatement	exit ( 1 )	450:2:11913:11922	1100729	1	True				
ANR	1100773	CallExpression	exit ( 1 )		1100729	0					
ANR	1100774	Callee	exit		1100729	0					
ANR	1100775	Identifier	exit		1100729	0					
ANR	1100776	ArgumentList	1		1100729	1					
ANR	1100777	Argument	1		1100729	0					
ANR	1100778	PrimaryExpression	1		1100729	0					
ANR	1100779	IfStatement	if ( pidFile [ 0 ] != '/' )		1100729	5					
ANR	1100780	Condition	pidFile [ 0 ] != '/'	452:5:11932:11948	1100729	0	True				
ANR	1100781	EqualityExpression	pidFile [ 0 ] != '/'		1100729	0		!=			
ANR	1100782	ArrayIndexing	pidFile [ 0 ]		1100729	0					
ANR	1100783	Identifier	pidFile		1100729	0					
ANR	1100784	PrimaryExpression	0		1100729	1					
ANR	1100785	PrimaryExpression	'/'		1100729	1					
ANR	1100786	CompoundStatement		13:25:240:240	1100729	1					
ANR	1100787	IfStatement	"if ( ( log = param ( ""LOG"" ) ) )"		1100729	0					
ANR	1100788	Condition	"log = param ( ""LOG"" )"	454:6:12017:12036	1100729	0	True				
ANR	1100789	AssignmentExpression	"log = param ( ""LOG"" )"		1100729	0		=			
ANR	1100790	Identifier	log		1100729	0					
ANR	1100791	CallExpression	"param ( ""LOG"" )"		1100729	1					
ANR	1100792	Callee	param		1100729	0					
ANR	1100793	Identifier	param		1100729	0					
ANR	1100794	ArgumentList	"""LOG"""		1100729	1					
ANR	1100795	Argument	"""LOG"""		1100729	0					
ANR	1100796	PrimaryExpression	"""LOG"""		1100729	0					
ANR	1100797	CompoundStatement		15:29:328:328	1100729	1					
ANR	1100798	ExpressionStatement	tmp = ( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )	455:3:12045:12128	1100729	0	True				
ANR	1100799	AssignmentExpression	tmp = ( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		1100729	0		=			
ANR	1100800	Identifier	tmp		1100729	0					
ANR	1100801	CastExpression	( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		1100729	1					
ANR	1100802	CastTarget	char *		1100729	0					
ANR	1100803	CallExpression	malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		1100729	1					
ANR	1100804	Callee	malloc		1100729	0					
ANR	1100805	Identifier	malloc		1100729	0					
ANR	1100806	ArgumentList	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		1100729	1					
ANR	1100807	Argument	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		1100729	0					
ANR	1100808	MultiplicativeExpression	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		1100729	0		*			
ANR	1100809	AdditiveExpression	strlen ( log ) + strlen ( pidFile ) + 2		1100729	0		+			
ANR	1100810	CallExpression	strlen ( log )		1100729	0					
ANR	1100811	Callee	strlen		1100729	0					
ANR	1100812	Identifier	strlen		1100729	0					
ANR	1100813	ArgumentList	log		1100729	1					
ANR	1100814	Argument	log		1100729	0					
ANR	1100815	Identifier	log		1100729	0					
ANR	1100816	AdditiveExpression	strlen ( pidFile ) + 2		1100729	1		+			
ANR	1100817	CallExpression	strlen ( pidFile )		1100729	0					
ANR	1100818	Callee	strlen		1100729	0					
ANR	1100819	Identifier	strlen		1100729	0					
ANR	1100820	ArgumentList	pidFile		1100729	1					
ANR	1100821	Argument	pidFile		1100729	0					
ANR	1100822	Identifier	pidFile		1100729	0					
ANR	1100823	PrimaryExpression	2		1100729	1					
ANR	1100824	SizeofExpression	sizeof ( char )		1100729	1					
ANR	1100825	Sizeof	sizeof		1100729	0					
ANR	1100826	SizeofOperand	char		1100729	1					
ANR	1100827	ExpressionStatement	"sprintf ( tmp , ""%s/%s"" , log , pidFile )"	457:3:12133:12170	1100729	1	True				
ANR	1100828	CallExpression	"sprintf ( tmp , ""%s/%s"" , log , pidFile )"		1100729	0					
ANR	1100829	Callee	sprintf		1100729	0					
ANR	1100830	Identifier	sprintf		1100729	0					
ANR	1100831	ArgumentList	tmp		1100729	1					
ANR	1100832	Argument	tmp		1100729	0					
ANR	1100833	Identifier	tmp		1100729	0					
ANR	1100834	Argument	"""%s/%s"""		1100729	1					
ANR	1100835	PrimaryExpression	"""%s/%s"""		1100729	0					
ANR	1100836	Argument	log		1100729	2					
ANR	1100837	Identifier	log		1100729	0					
ANR	1100838	Argument	pidFile		1100729	3					
ANR	1100839	Identifier	pidFile		1100729	0					
ANR	1100840	ExpressionStatement	free ( log )	458:3:12175:12186	1100729	2	True				
ANR	1100841	CallExpression	free ( log )		1100729	0					
ANR	1100842	Callee	free		1100729	0					
ANR	1100843	Identifier	free		1100729	0					
ANR	1100844	ArgumentList	log		1100729	1					
ANR	1100845	Argument	log		1100729	0					
ANR	1100846	Identifier	log		1100729	0					
ANR	1100847	ExpressionStatement	pidFile = tmp	459:3:12191:12204	1100729	3	True				
ANR	1100848	AssignmentExpression	pidFile = tmp		1100729	0		=			
ANR	1100849	Identifier	pidFile		1100729	0					
ANR	1100850	Identifier	tmp		1100729	1					
ANR	1100851	IfStatement	"if ( ( PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" ) ) )"		1100729	6					
ANR	1100852	Condition	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" )"	462:5:12218:12269	1100729	0	True				
ANR	1100853	AssignmentExpression	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" )"		1100729	0		=			
ANR	1100854	Identifier	PID_FILE		1100729	0					
ANR	1100855	CallExpression	"safe_fopen_wrapper_follow ( pidFile , ""r"" )"		1100729	1					
ANR	1100856	Callee	safe_fopen_wrapper_follow		1100729	0					
ANR	1100857	Identifier	safe_fopen_wrapper_follow		1100729	0					
ANR	1100858	ArgumentList	pidFile		1100729	1					
ANR	1100859	Argument	pidFile		1100729	0					
ANR	1100860	Identifier	pidFile		1100729	0					
ANR	1100861	Argument	"""r"""		1100729	1					
ANR	1100862	PrimaryExpression	"""r"""		1100729	0					
ANR	1100863	CompoundStatement		23:60:561:561	1100729	1					
ANR	1100864	ExpressionStatement	"fscanf ( PID_FILE , ""%lu"" , & tmp_ul_int )"	463:2:12277:12315	1100729	0	True				
ANR	1100865	CallExpression	"fscanf ( PID_FILE , ""%lu"" , & tmp_ul_int )"		1100729	0					
ANR	1100866	Callee	fscanf		1100729	0					
ANR	1100867	Identifier	fscanf		1100729	0					
ANR	1100868	ArgumentList	PID_FILE		1100729	1					
ANR	1100869	Argument	PID_FILE		1100729	0					
ANR	1100870	Identifier	PID_FILE		1100729	0					
ANR	1100871	Argument	"""%lu"""		1100729	1					
ANR	1100872	PrimaryExpression	"""%lu"""		1100729	0					
ANR	1100873	Argument	& tmp_ul_int		1100729	2					
ANR	1100874	UnaryOperationExpression	& tmp_ul_int		1100729	0					
ANR	1100875	UnaryOperator	&		1100729	0					
ANR	1100876	Identifier	tmp_ul_int		1100729	1					
ANR	1100877	ExpressionStatement	pid = ( pid_t ) tmp_ul_int	464:2:12320:12343	1100729	1	True				
ANR	1100878	AssignmentExpression	pid = ( pid_t ) tmp_ul_int		1100729	0		=			
ANR	1100879	Identifier	pid		1100729	0					
ANR	1100880	CastExpression	( pid_t ) tmp_ul_int		1100729	1					
ANR	1100881	CastTarget	pid_t		1100729	0					
ANR	1100882	Identifier	tmp_ul_int		1100729	1					
ANR	1100883	ExpressionStatement	fclose ( PID_FILE )	465:2:12347:12365	1100729	2	True				
ANR	1100884	CallExpression	fclose ( PID_FILE )		1100729	0					
ANR	1100885	Callee	fclose		1100729	0					
ANR	1100886	Identifier	fclose		1100729	0					
ANR	1100887	ArgumentList	PID_FILE		1100729	1					
ANR	1100888	Argument	PID_FILE		1100729	0					
ANR	1100889	Identifier	PID_FILE		1100729	0					
ANR	1100890	ElseStatement	else		1100729	0					
ANR	1100891	CompoundStatement		27:8:663:663	1100729	0					
ANR	1100892	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: Can't open pid file %s for reading\\n"" , pidFile )"	467:2:12379:12475	1100729	0	True				
ANR	1100893	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: Can't open pid file %s for reading\\n"" , pidFile )"		1100729	0					
ANR	1100894	Callee	fprintf		1100729	0					
ANR	1100895	Identifier	fprintf		1100729	0					
ANR	1100896	ArgumentList	stderr		1100729	1					
ANR	1100897	Argument	stderr		1100729	0					
ANR	1100898	Identifier	stderr		1100729	0					
ANR	1100899	Argument	"""DaemonCore: ERROR: Can't open pid file %s for reading\\n"""		1100729	1					
ANR	1100900	PrimaryExpression	"""DaemonCore: ERROR: Can't open pid file %s for reading\\n"""		1100729	0					
ANR	1100901	Argument	pidFile		1100729	2					
ANR	1100902	Identifier	pidFile		1100729	0					
ANR	1100903	ExpressionStatement	exit ( 1 )	470:2:12479:12488	1100729	1	True				
ANR	1100904	CallExpression	exit ( 1 )		1100729	0					
ANR	1100905	Callee	exit		1100729	0					
ANR	1100906	Identifier	exit		1100729	0					
ANR	1100907	ArgumentList	1		1100729	1					
ANR	1100908	Argument	1		1100729	0					
ANR	1100909	PrimaryExpression	1		1100729	0					
ANR	1100910	IfStatement	if ( pid > 0 )		1100729	7					
ANR	1100911	Condition	pid > 0	472:5:12498:12504	1100729	0	True				
ANR	1100912	RelationalExpression	pid > 0		1100729	0		>			
ANR	1100913	Identifier	pid		1100729	0					
ANR	1100914	PrimaryExpression	0		1100729	1					
ANR	1100915	CompoundStatement		33:15:796:796	1100729	1					
ANR	1100916	IfStatement	"if ( kill ( pid , SIGTERM ) < 0 )"		1100729	0					
ANR	1100917	Condition	"kill ( pid , SIGTERM ) < 0"	474:6:12559:12580	1100729	0	True				
ANR	1100918	RelationalExpression	"kill ( pid , SIGTERM ) < 0"		1100729	0		<			
ANR	1100919	CallExpression	"kill ( pid , SIGTERM )"		1100729	0					
ANR	1100920	Callee	kill		1100729	0					
ANR	1100921	Identifier	kill		1100729	0					
ANR	1100922	ArgumentList	pid		1100729	1					
ANR	1100923	Argument	pid		1100729	0					
ANR	1100924	Identifier	pid		1100729	0					
ANR	1100925	Argument	SIGTERM		1100729	1					
ANR	1100926	Identifier	SIGTERM		1100729	0					
ANR	1100927	PrimaryExpression	0		1100729	1					
ANR	1100928	CompoundStatement		35:31:872:872	1100729	1					
ANR	1100929	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"" , ( unsigned long ) pid )"	475:3:12589:12697	1100729	0	True				
ANR	1100930	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"" , ( unsigned long ) pid )"		1100729	0					
ANR	1100931	Callee	fprintf		1100729	0					
ANR	1100932	Identifier	fprintf		1100729	0					
ANR	1100933	ArgumentList	stderr		1100729	1					
ANR	1100934	Argument	stderr		1100729	0					
ANR	1100935	Identifier	stderr		1100729	0					
ANR	1100936	Argument	"""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"""		1100729	1					
ANR	1100937	PrimaryExpression	"""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"""		1100729	0					
ANR	1100938	Argument	( unsigned long ) pid		1100729	2					
ANR	1100939	CastExpression	( unsigned long ) pid		1100729	0					
ANR	1100940	CastTarget	unsigned long		1100729	0					
ANR	1100941	Identifier	pid		1100729	1					
ANR	1100942	ExpressionStatement	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"	478:3:12702:12772	1100729	1	True				
ANR	1100943	CallExpression	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"		1100729	0					
ANR	1100944	Callee	fprintf		1100729	0					
ANR	1100945	Identifier	fprintf		1100729	0					
ANR	1100946	ArgumentList	stderr		1100729	1					
ANR	1100947	Argument	stderr		1100729	0					
ANR	1100948	Identifier	stderr		1100729	0					
ANR	1100949	Argument	"""\\terrno: %d (%s)\\n"""		1100729	1					
ANR	1100950	PrimaryExpression	"""\\terrno: %d (%s)\\n"""		1100729	0					
ANR	1100951	Argument	errno		1100729	2					
ANR	1100952	Identifier	errno		1100729	0					
ANR	1100953	Argument	strerror ( errno )		1100729	3					
ANR	1100954	CallExpression	strerror ( errno )		1100729	0					
ANR	1100955	Callee	strerror		1100729	0					
ANR	1100956	Identifier	strerror		1100729	0					
ANR	1100957	ArgumentList	errno		1100729	1					
ANR	1100958	Argument	errno		1100729	0					
ANR	1100959	Identifier	errno		1100729	0					
ANR	1100960	ExpressionStatement	exit ( 1 )	480:3:12777:12786	1100729	2	True				
ANR	1100961	CallExpression	exit ( 1 )		1100729	0					
ANR	1100962	Callee	exit		1100729	0					
ANR	1100963	Identifier	exit		1100729	0					
ANR	1100964	ArgumentList	1		1100729	1					
ANR	1100965	Argument	1		1100729	0					
ANR	1100966	PrimaryExpression	1		1100729	0					
ANR	1100967	WhileStatement	"while ( kill ( pid , 0 ) == 0 )"		1100729	1					
ANR	1100968	Condition	"kill ( pid , 0 ) == 0"	485:9:12946:12962	1100729	0	True				
ANR	1100969	EqualityExpression	"kill ( pid , 0 ) == 0"		1100729	0		==			
ANR	1100970	CallExpression	"kill ( pid , 0 )"		1100729	0					
ANR	1100971	Callee	kill		1100729	0					
ANR	1100972	Identifier	kill		1100729	0					
ANR	1100973	ArgumentList	pid		1100729	1					
ANR	1100974	Argument	pid		1100729	0					
ANR	1100975	Identifier	pid		1100729	0					
ANR	1100976	Argument	0		1100729	1					
ANR	1100977	PrimaryExpression	0		1100729	0					
ANR	1100978	PrimaryExpression	0		1100729	1					
ANR	1100979	CompoundStatement		46:29:1254:1254	1100729	1					
ANR	1100980	ExpressionStatement	sleep ( 3 )	486:3:12971:12981	1100729	0	True				
ANR	1100981	CallExpression	sleep ( 3 )		1100729	0					
ANR	1100982	Callee	sleep		1100729	0					
ANR	1100983	Identifier	sleep		1100729	0					
ANR	1100984	ArgumentList	3		1100729	1					
ANR	1100985	Argument	3		1100729	0					
ANR	1100986	PrimaryExpression	3		1100729	0					
ANR	1100987	ExpressionStatement	exit ( 0 )	489:2:13029:13038	1100729	2	True				
ANR	1100988	CallExpression	exit ( 0 )		1100729	0					
ANR	1100989	Callee	exit		1100729	0					
ANR	1100990	Identifier	exit		1100729	0					
ANR	1100991	ArgumentList	0		1100729	1					
ANR	1100992	Argument	0		1100729	0					
ANR	1100993	PrimaryExpression	0		1100729	0					
ANR	1100994	ElseStatement	else		1100729	0					
ANR	1100995	CompoundStatement		51:8:1336:1336	1100729	0					
ANR	1100996	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"" , ( unsigned long ) pid , pidFile )"	491:2:13069:13189	1100729	0	True				
ANR	1100997	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"" , ( unsigned long ) pid , pidFile )"		1100729	0					
ANR	1100998	Callee	fprintf		1100729	0					
ANR	1100999	Identifier	fprintf		1100729	0					
ANR	1101000	ArgumentList	stderr		1100729	1					
ANR	1101001	Argument	stderr		1100729	0					
ANR	1101002	Identifier	stderr		1100729	0					
ANR	1101003	Argument	"""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"""		1100729	1					
ANR	1101004	PrimaryExpression	"""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"""		1100729	0					
ANR	1101005	Argument	( unsigned long ) pid		1100729	2					
ANR	1101006	CastExpression	( unsigned long ) pid		1100729	0					
ANR	1101007	CastTarget	unsigned long		1100729	0					
ANR	1101008	Identifier	pid		1100729	1					
ANR	1101009	Argument	pidFile		1100729	3					
ANR	1101010	Identifier	pidFile		1100729	0					
ANR	1101011	ExpressionStatement	exit ( 1 )	494:2:13194:13203	1100729	1	True				
ANR	1101012	CallExpression	exit ( 1 )		1100729	0					
ANR	1101013	Callee	exit		1100729	0					
ANR	1101014	Identifier	exit		1100729	0					
ANR	1101015	ArgumentList	1		1100729	1					
ANR	1101016	Argument	1		1100729	0					
ANR	1101017	PrimaryExpression	1		1100729	0					
ANR	1101018	ReturnType	void		1100729	1					
ANR	1101019	Identifier	do_kill		1100729	2					
ANR	1101020	ParameterList			1100729	3					
ANR	1101021	CFGEntryNode	ENTRY		1100729		True				
ANR	1101022	CFGExitNode	EXIT		1100729		True				
ANR	1101023	Symbol	malloc		1100729						
ANR	1101024	Symbol	errno		1100729						
ANR	1101025	Symbol	log		1100729						
ANR	1101026	Symbol	pid		1100729						
ANR	1101027	Symbol	tmp_ul_int		1100729						
ANR	1101028	Symbol	stderr		1100729						
ANR	1101029	Symbol	kill		1100729						
ANR	1101030	Symbol	pidFile		1100729						
ANR	1101031	Symbol	strerror		1100729						
ANR	1101032	Symbol	strlen		1100729						
ANR	1101033	Symbol	& tmp_ul_int		1100729						
ANR	1101034	Symbol	param		1100729						
ANR	1101035	Symbol	tmp		1100729						
ANR	1101036	Symbol	* pidFile		1100729						
ANR	1101037	Symbol	PID_FILE		1100729						
ANR	1101038	Symbol	SIGTERM		1100729						
ANR	1101039	Symbol	safe_fopen_wrapper_follow		1100729						
ANR	1101040	Function	make_dir	501:0:13307:13833							
ANR	1101041	FunctionDef	make_dir (const char * logdir)		1101040	0					
ANR	1101042	CompoundStatement		503:0:13343:13833	1101040	0					
ANR	1101043	IdentifierDeclStatement	mode_t mode = S_IRWXU | S_IRWXG | S_IRWXO ;	504:1:13346:13387	1101040	0	True				
ANR	1101044	IdentifierDecl	mode = S_IRWXU | S_IRWXG | S_IRWXO		1101040	0					
ANR	1101045	IdentifierDeclType	mode_t		1101040	0					
ANR	1101046	Identifier	mode		1101040	1					
ANR	1101047	AssignmentExpression	mode = S_IRWXU | S_IRWXG | S_IRWXO		1101040	2		=			
ANR	1101048	Identifier	mode		1101040	0					
ANR	1101049	InclusiveOrExpression	S_IRWXU | S_IRWXG | S_IRWXO		1101040	1		|			
ANR	1101050	Identifier	S_IRWXU		1101040	0					
ANR	1101051	InclusiveOrExpression	S_IRWXG | S_IRWXO		1101040	1		|			
ANR	1101052	Identifier	S_IRWXG		1101040	0					
ANR	1101053	Identifier	S_IRWXO		1101040	1					
ANR	1101054	IdentifierDeclStatement	struct stat stats ;	505:1:13390:13407	1101040	1	True				
ANR	1101055	IdentifierDecl	stats		1101040	0					
ANR	1101056	IdentifierDeclType	struct stat		1101040	0					
ANR	1101057	Identifier	stats		1101040	1					
ANR	1101058	IfStatement	"if ( stat ( logdir , & stats ) >= 0 )"		1101040	2					
ANR	1101059	Condition	"stat ( logdir , & stats ) >= 0"	506:5:13414:13438	1101040	0	True				
ANR	1101060	RelationalExpression	"stat ( logdir , & stats ) >= 0"		1101040	0		>=			
ANR	1101061	CallExpression	"stat ( logdir , & stats )"		1101040	0					
ANR	1101062	Callee	stat		1101040	0					
ANR	1101063	Identifier	stat		1101040	0					
ANR	1101064	ArgumentList	logdir		1101040	1					
ANR	1101065	Argument	logdir		1101040	0					
ANR	1101066	Identifier	logdir		1101040	0					
ANR	1101067	Argument	& stats		1101040	1					
ANR	1101068	UnaryOperationExpression	& stats		1101040	0					
ANR	1101069	UnaryOperator	&		1101040	0					
ANR	1101070	Identifier	stats		1101040	1					
ANR	1101071	PrimaryExpression	0		1101040	1					
ANR	1101072	CompoundStatement		4:33:98:98	1101040	1					
ANR	1101073	IfStatement	if ( ! S_ISDIR ( stats . st_mode ) )		1101040	0					
ANR	1101074	Condition	! S_ISDIR ( stats . st_mode )	507:6:13450:13473	1101040	0	True				
ANR	1101075	UnaryOperationExpression	! S_ISDIR ( stats . st_mode )		1101040	0					
ANR	1101076	UnaryOperator	!		1101040	0					
ANR	1101077	CallExpression	S_ISDIR ( stats . st_mode )		1101040	1					
ANR	1101078	Callee	S_ISDIR		1101040	0					
ANR	1101079	Identifier	S_ISDIR		1101040	0					
ANR	1101080	ArgumentList	stats . st_mode		1101040	1					
ANR	1101081	Argument	stats . st_mode		1101040	0					
ANR	1101082	MemberAccess	stats . st_mode		1101040	0					
ANR	1101083	Identifier	stats		1101040	0					
ANR	1101084	Identifier	st_mode		1101040	1					
ANR	1101085	CompoundStatement		5:33:133:133	1101040	1					
ANR	1101086	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: %s exists and is not a directory.\\n"" , logdir )"	508:3:13482:13579	1101040	0	True				
ANR	1101087	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: %s exists and is not a directory.\\n"" , logdir )"		1101040	0					
ANR	1101088	Callee	fprintf		1101040	0					
ANR	1101089	Identifier	fprintf		1101040	0					
ANR	1101090	ArgumentList	stderr		1101040	1					
ANR	1101091	Argument	stderr		1101040	0					
ANR	1101092	Identifier	stderr		1101040	0					
ANR	1101093	Argument	"""DaemonCore: ERROR: %s exists and is not a directory.\\n"""		1101040	1					
ANR	1101094	PrimaryExpression	"""DaemonCore: ERROR: %s exists and is not a directory.\\n"""		1101040	0					
ANR	1101095	Argument	logdir		1101040	2					
ANR	1101096	Identifier	logdir		1101040	0					
ANR	1101097	ExpressionStatement	exit ( 1 )	511:3:13584:13593	1101040	1	True				
ANR	1101098	CallExpression	exit ( 1 )		1101040	0					
ANR	1101099	Callee	exit		1101040	0					
ANR	1101100	Identifier	exit		1101040	0					
ANR	1101101	ArgumentList	1		1101040	1					
ANR	1101102	Argument	1		1101040	0					
ANR	1101103	PrimaryExpression	1		1101040	0					
ANR	1101104	ElseStatement	else		1101040	0					
ANR	1101105	CompoundStatement		11:8:263:263	1101040	0					
ANR	1101106	IfStatement	"if ( mkdir ( logdir , mode ) < 0 )"		1101040	0					
ANR	1101107	Condition	"mkdir ( logdir , mode ) < 0"	514:6:13615:13637	1101040	0	True				
ANR	1101108	RelationalExpression	"mkdir ( logdir , mode ) < 0"		1101040	0		<			
ANR	1101109	CallExpression	"mkdir ( logdir , mode )"		1101040	0					
ANR	1101110	Callee	mkdir		1101040	0					
ANR	1101111	Identifier	mkdir		1101040	0					
ANR	1101112	ArgumentList	logdir		1101040	1					
ANR	1101113	Argument	logdir		1101040	0					
ANR	1101114	Identifier	logdir		1101040	0					
ANR	1101115	Argument	mode		1101040	1					
ANR	1101116	Identifier	mode		1101040	0					
ANR	1101117	PrimaryExpression	0		1101040	1					
ANR	1101118	CompoundStatement		12:32:297:297	1101040	1					
ANR	1101119	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: can't create directory %s\\n"" , logdir )"	515:3:13646:13735	1101040	0	True				
ANR	1101120	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: can't create directory %s\\n"" , logdir )"		1101040	0					
ANR	1101121	Callee	fprintf		1101040	0					
ANR	1101122	Identifier	fprintf		1101040	0					
ANR	1101123	ArgumentList	stderr		1101040	1					
ANR	1101124	Argument	stderr		1101040	0					
ANR	1101125	Identifier	stderr		1101040	0					
ANR	1101126	Argument	"""DaemonCore: ERROR: can't create directory %s\\n"""		1101040	1					
ANR	1101127	PrimaryExpression	"""DaemonCore: ERROR: can't create directory %s\\n"""		1101040	0					
ANR	1101128	Argument	logdir		1101040	2					
ANR	1101129	Identifier	logdir		1101040	0					
ANR	1101130	ExpressionStatement	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"	518:3:13740:13810	1101040	1	True				
ANR	1101131	CallExpression	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"		1101040	0					
ANR	1101132	Callee	fprintf		1101040	0					
ANR	1101133	Identifier	fprintf		1101040	0					
ANR	1101134	ArgumentList	stderr		1101040	1					
ANR	1101135	Argument	stderr		1101040	0					
ANR	1101136	Identifier	stderr		1101040	0					
ANR	1101137	Argument	"""\\terrno: %d (%s)\\n"""		1101040	1					
ANR	1101138	PrimaryExpression	"""\\terrno: %d (%s)\\n"""		1101040	0					
ANR	1101139	Argument	errno		1101040	2					
ANR	1101140	Identifier	errno		1101040	0					
ANR	1101141	Argument	strerror ( errno )		1101040	3					
ANR	1101142	CallExpression	strerror ( errno )		1101040	0					
ANR	1101143	Callee	strerror		1101040	0					
ANR	1101144	Identifier	strerror		1101040	0					
ANR	1101145	ArgumentList	errno		1101040	1					
ANR	1101146	Argument	errno		1101040	0					
ANR	1101147	Identifier	errno		1101040	0					
ANR	1101148	ExpressionStatement	exit ( 1 )	520:3:13815:13824	1101040	2	True				
ANR	1101149	CallExpression	exit ( 1 )		1101040	0					
ANR	1101150	Callee	exit		1101040	0					
ANR	1101151	Identifier	exit		1101040	0					
ANR	1101152	ArgumentList	1		1101040	1					
ANR	1101153	Argument	1		1101040	0					
ANR	1101154	PrimaryExpression	1		1101040	0					
ANR	1101155	ReturnType	void		1101040	1					
ANR	1101156	Identifier	make_dir		1101040	2					
ANR	1101157	ParameterList	const char * logdir		1101040	3					
ANR	1101158	Parameter	const char * logdir	502:10:13322:13339	1101040	0	True				
ANR	1101159	ParameterType	const char *		1101040	0					
ANR	1101160	Identifier	logdir		1101040	1					
ANR	1101161	CFGEntryNode	ENTRY		1101040		True				
ANR	1101162	CFGExitNode	EXIT		1101040		True				
ANR	1101163	Symbol	stat		1101040						
ANR	1101164	Symbol	errno		1101040						
ANR	1101165	Symbol	stderr		1101040						
ANR	1101166	Symbol	mode		1101040						
ANR	1101167	Symbol	strerror		1101040						
ANR	1101168	Symbol	S_IRWXU		1101040						
ANR	1101169	Symbol	stats . st_mode		1101040						
ANR	1101170	Symbol	S_IRWXO		1101040						
ANR	1101171	Symbol	stats		1101040						
ANR	1101172	Symbol	& stats		1101040						
ANR	1101173	Symbol	S_ISDIR		1101040						
ANR	1101174	Symbol	S_IRWXG		1101040						
ANR	1101175	Symbol	mkdir		1101040						
ANR	1101176	Symbol	logdir		1101040						
ANR	1101177	Function	set_log_dir	527:0:13903:14008							
ANR	1101178	FunctionDef	set_log_dir ()		1101177	0					
ANR	1101179	CompoundStatement		529:0:13922:14008	1101177	0					
ANR	1101180	IfStatement	if ( ! logDir )		1101177	0					
ANR	1101181	Condition	! logDir	530:5:13929:13935	1101177	0	True				
ANR	1101182	UnaryOperationExpression	! logDir		1101177	0					
ANR	1101183	UnaryOperator	!		1101177	0					
ANR	1101184	Identifier	logDir		1101177	1					
ANR	1101185	CompoundStatement		2:15:16:16	1101177	1					
ANR	1101186	ReturnStatement	return ;	531:2:13943:13949	1101177	0	True				
ANR	1101187	ExpressionStatement	"config_insert ( ""LOG"" , logDir )"	533:1:13955:13985	1101177	1	True				
ANR	1101188	CallExpression	"config_insert ( ""LOG"" , logDir )"		1101177	0					
ANR	1101189	Callee	config_insert		1101177	0					
ANR	1101190	Identifier	config_insert		1101177	0					
ANR	1101191	ArgumentList	"""LOG"""		1101177	1					
ANR	1101192	Argument	"""LOG"""		1101177	0					
ANR	1101193	PrimaryExpression	"""LOG"""		1101177	0					
ANR	1101194	Argument	logDir		1101177	1					
ANR	1101195	Identifier	logDir		1101177	0					
ANR	1101196	ExpressionStatement	make_dir ( logDir )	534:1:13988:14006	1101177	2	True				
ANR	1101197	CallExpression	make_dir ( logDir )		1101177	0					
ANR	1101198	Callee	make_dir		1101177	0					
ANR	1101199	Identifier	make_dir		1101177	0					
ANR	1101200	ArgumentList	logDir		1101177	1					
ANR	1101201	Argument	logDir		1101177	0					
ANR	1101202	Identifier	logDir		1101177	0					
ANR	1101203	ReturnType	void		1101177	1					
ANR	1101204	Identifier	set_log_dir		1101177	2					
ANR	1101205	ParameterList			1101177	3					
ANR	1101206	CFGEntryNode	ENTRY		1101177		True				
ANR	1101207	CFGExitNode	EXIT		1101177		True				
ANR	1101208	Symbol	logDir		1101177						
ANR	1101209	Function	handle_log_append	538:0:14012:14497							
ANR	1101210	FunctionDef	handle_log_append (char * append_str)		1101209	0					
ANR	1101211	CompoundStatement		540:0:14055:14497	1101209	0					
ANR	1101212	IfStatement	if ( ! append_str )		1101209	0					
ANR	1101213	Condition	! append_str	541:5:14062:14073	1101209	0	True				
ANR	1101214	UnaryOperationExpression	! append_str		1101209	0					
ANR	1101215	UnaryOperator	!		1101209	0					
ANR	1101216	Identifier	append_str		1101209	1					
ANR	1101217	CompoundStatement		2:20:21:21	1101209	1					
ANR	1101218	ReturnStatement	return ;	542:2:14081:14087	1101209	0	True				
ANR	1101219	IdentifierDeclStatement	"char * tmp1 , * tmp2 ;"	544:1:14093:14110	1101209	1	True				
ANR	1101220	IdentifierDecl	* tmp1		1101209	0					
ANR	1101221	IdentifierDeclType	char *		1101209	0					
ANR	1101222	Identifier	tmp1		1101209	1					
ANR	1101223	IdentifierDecl	* tmp2		1101209	1					
ANR	1101224	IdentifierDeclType	char *		1101209	0					
ANR	1101225	Identifier	tmp2		1101209	1					
ANR	1101226	IdentifierDeclStatement	char buf [ 100 ] ;	545:1:14113:14126	1101209	2	True				
ANR	1101227	IdentifierDecl	buf [ 100 ]		1101209	0					
ANR	1101228	IdentifierDeclType	char [ 100 ]		1101209	0					
ANR	1101229	Identifier	buf		1101209	1					
ANR	1101230	PrimaryExpression	100		1101209	2					
ANR	1101231	ExpressionStatement	"sprintf ( buf , ""%s_LOG"" , get_mySubSystem ( ) -> getName ( ) )"	546:1:14129:14183	1101209	3	True				
ANR	1101232	CallExpression	"sprintf ( buf , ""%s_LOG"" , get_mySubSystem ( ) -> getName ( ) )"		1101209	0					
ANR	1101233	Callee	sprintf		1101209	0					
ANR	1101234	Identifier	sprintf		1101209	0					
ANR	1101235	ArgumentList	buf		1101209	1					
ANR	1101236	Argument	buf		1101209	0					
ANR	1101237	Identifier	buf		1101209	0					
ANR	1101238	Argument	"""%s_LOG"""		1101209	1					
ANR	1101239	PrimaryExpression	"""%s_LOG"""		1101209	0					
ANR	1101240	Argument	get_mySubSystem ( ) -> getName ( )		1101209	2					
ANR	1101241	CallExpression	get_mySubSystem ( ) -> getName ( )		1101209	0					
ANR	1101242	Callee	get_mySubSystem ( ) -> getName		1101209	0					
ANR	1101243	PtrMemberAccess	get_mySubSystem ( ) -> getName		1101209	0					
ANR	1101244	CallExpression	get_mySubSystem ( )		1101209	0					
ANR	1101245	Callee	get_mySubSystem		1101209	0					
ANR	1101246	Identifier	get_mySubSystem		1101209	0					
ANR	1101247	ArgumentList			1101209	1					
ANR	1101248	Identifier	getName		1101209	1					
ANR	1101249	ArgumentList			1101209	1					
ANR	1101250	IfStatement	if ( ! ( tmp1 = param ( buf ) ) )		1101209	4					
ANR	1101251	Condition	! ( tmp1 = param ( buf ) )	547:5:14190:14209	1101209	0	True				
ANR	1101252	UnaryOperationExpression	! ( tmp1 = param ( buf ) )		1101209	0					
ANR	1101253	UnaryOperator	!		1101209	0					
ANR	1101254	AssignmentExpression	tmp1 = param ( buf )		1101209	1		=			
ANR	1101255	Identifier	tmp1		1101209	0					
ANR	1101256	CallExpression	param ( buf )		1101209	1					
ANR	1101257	Callee	param		1101209	0					
ANR	1101258	Identifier	param		1101209	0					
ANR	1101259	ArgumentList	buf		1101209	1					
ANR	1101260	Argument	buf		1101209	0					
ANR	1101261	Identifier	buf		1101209	0					
ANR	1101262	CompoundStatement		8:28:157:157	1101209	1					
ANR	1101263	ExpressionStatement	"EXCEPT ( ""%s not defined!"" , buf )"	548:2:14218:14250	1101209	0	True				
ANR	1101264	CallExpression	"EXCEPT ( ""%s not defined!"" , buf )"		1101209	0					
ANR	1101265	Callee	EXCEPT		1101209	0					
ANR	1101266	Identifier	EXCEPT		1101209	0					
ANR	1101267	ArgumentList	"""%s not defined!"""		1101209	1					
ANR	1101268	Argument	"""%s not defined!"""		1101209	0					
ANR	1101269	PrimaryExpression	"""%s not defined!"""		1101209	0					
ANR	1101270	Argument	buf		1101209	1					
ANR	1101271	Identifier	buf		1101209	0					
ANR	1101272	ExpressionStatement	tmp2 = ( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )	550:1:14256:14342	1101209	5	True				
ANR	1101273	AssignmentExpression	tmp2 = ( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		1101209	0		=			
ANR	1101274	Identifier	tmp2		1101209	0					
ANR	1101275	CastExpression	( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		1101209	1					
ANR	1101276	CastTarget	char *		1101209	0					
ANR	1101277	CallExpression	malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		1101209	1					
ANR	1101278	Callee	malloc		1101209	0					
ANR	1101279	Identifier	malloc		1101209	0					
ANR	1101280	ArgumentList	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		1101209	1					
ANR	1101281	Argument	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		1101209	0					
ANR	1101282	MultiplicativeExpression	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		1101209	0		*			
ANR	1101283	AdditiveExpression	strlen ( tmp1 ) + strlen ( append_str ) + 2		1101209	0		+			
ANR	1101284	CallExpression	strlen ( tmp1 )		1101209	0					
ANR	1101285	Callee	strlen		1101209	0					
ANR	1101286	Identifier	strlen		1101209	0					
ANR	1101287	ArgumentList	tmp1		1101209	1					
ANR	1101288	Argument	tmp1		1101209	0					
ANR	1101289	Identifier	tmp1		1101209	0					
ANR	1101290	AdditiveExpression	strlen ( append_str ) + 2		1101209	1		+			
ANR	1101291	CallExpression	strlen ( append_str )		1101209	0					
ANR	1101292	Callee	strlen		1101209	0					
ANR	1101293	Identifier	strlen		1101209	0					
ANR	1101294	ArgumentList	append_str		1101209	1					
ANR	1101295	Argument	append_str		1101209	0					
ANR	1101296	Identifier	append_str		1101209	0					
ANR	1101297	PrimaryExpression	2		1101209	1					
ANR	1101298	SizeofExpression	sizeof ( char )		1101209	1					
ANR	1101299	Sizeof	sizeof		1101209	0					
ANR	1101300	SizeofOperand	char		1101209	1					
ANR	1101301	IfStatement	if ( ! tmp2 )		1101209	6					
ANR	1101302	Condition	! tmp2	552:5:14349:14353	1101209	0	True				
ANR	1101303	UnaryOperationExpression	! tmp2		1101209	0					
ANR	1101304	UnaryOperator	!		1101209	0					
ANR	1101305	Identifier	tmp2		1101209	1					
ANR	1101306	CompoundStatement		13:13:301:301	1101209	1					
ANR	1101307	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	553:2:14362:14388	1101209	0	True				
ANR	1101308	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1101209	0					
ANR	1101309	Callee	EXCEPT		1101209	0					
ANR	1101310	Identifier	EXCEPT		1101209	0					
ANR	1101311	ArgumentList	"""Out of memory!"""		1101209	1					
ANR	1101312	Argument	"""Out of memory!"""		1101209	0					
ANR	1101313	PrimaryExpression	"""Out of memory!"""		1101209	0					
ANR	1101314	ExpressionStatement	"sprintf ( tmp2 , ""%s.%s"" , tmp1 , append_str )"	555:1:14394:14436	1101209	7	True				
ANR	1101315	CallExpression	"sprintf ( tmp2 , ""%s.%s"" , tmp1 , append_str )"		1101209	0					
ANR	1101316	Callee	sprintf		1101209	0					
ANR	1101317	Identifier	sprintf		1101209	0					
ANR	1101318	ArgumentList	tmp2		1101209	1					
ANR	1101319	Argument	tmp2		1101209	0					
ANR	1101320	Identifier	tmp2		1101209	0					
ANR	1101321	Argument	"""%s.%s"""		1101209	1					
ANR	1101322	PrimaryExpression	"""%s.%s"""		1101209	0					
ANR	1101323	Argument	tmp1		1101209	2					
ANR	1101324	Identifier	tmp1		1101209	0					
ANR	1101325	Argument	append_str		1101209	3					
ANR	1101326	Identifier	append_str		1101209	0					
ANR	1101327	ExpressionStatement	"config_insert ( buf , tmp2 )"	556:1:14439:14465	1101209	8	True				
ANR	1101328	CallExpression	"config_insert ( buf , tmp2 )"		1101209	0					
ANR	1101329	Callee	config_insert		1101209	0					
ANR	1101330	Identifier	config_insert		1101209	0					
ANR	1101331	ArgumentList	buf		1101209	1					
ANR	1101332	Argument	buf		1101209	0					
ANR	1101333	Identifier	buf		1101209	0					
ANR	1101334	Argument	tmp2		1101209	1					
ANR	1101335	Identifier	tmp2		1101209	0					
ANR	1101336	ExpressionStatement	free ( tmp1 )	557:1:14468:14480	1101209	9	True				
ANR	1101337	CallExpression	free ( tmp1 )		1101209	0					
ANR	1101338	Callee	free		1101209	0					
ANR	1101339	Identifier	free		1101209	0					
ANR	1101340	ArgumentList	tmp1		1101209	1					
ANR	1101341	Argument	tmp1		1101209	0					
ANR	1101342	Identifier	tmp1		1101209	0					
ANR	1101343	ExpressionStatement	free ( tmp2 )	558:1:14483:14495	1101209	10	True				
ANR	1101344	CallExpression	free ( tmp2 )		1101209	0					
ANR	1101345	Callee	free		1101209	0					
ANR	1101346	Identifier	free		1101209	0					
ANR	1101347	ArgumentList	tmp2		1101209	1					
ANR	1101348	Argument	tmp2		1101209	0					
ANR	1101349	Identifier	tmp2		1101209	0					
ANR	1101350	ReturnType	void		1101209	1					
ANR	1101351	Identifier	handle_log_append		1101209	2					
ANR	1101352	ParameterList	char * append_str		1101209	3					
ANR	1101353	Parameter	char * append_str	539:19:14036:14051	1101209	0	True				
ANR	1101354	ParameterType	char *		1101209	0					
ANR	1101355	Identifier	append_str		1101209	1					
ANR	1101356	CFGEntryNode	ENTRY		1101209		True				
ANR	1101357	CFGExitNode	EXIT		1101209		True				
ANR	1101358	Symbol	strlen		1101209						
ANR	1101359	Symbol	malloc		1101209						
ANR	1101360	Symbol	buf		1101209						
ANR	1101361	Symbol	get_mySubSystem ( ) -> getName		1101209						
ANR	1101362	Symbol	* get_mySubSystem		1101209						
ANR	1101363	Symbol	param		1101209						
ANR	1101364	Symbol	append_str		1101209						
ANR	1101365	Symbol	tmp1		1101209						
ANR	1101366	Symbol	tmp2		1101209						
ANR	1101367	Symbol	get_mySubSystem		1101209						
ANR	1101368	Function	dc_touch_log_file	562:0:14501:14670							
ANR	1101369	FunctionDef	dc_touch_log_file ()		1101368	0					
ANR	1101370	CompoundStatement		564:0:14527:14670	1101368	0					
ANR	1101371	ExpressionStatement	dprintf_touch_log ( )	565:1:14530:14549	1101368	0	True				
ANR	1101372	CallExpression	dprintf_touch_log ( )		1101368	0					
ANR	1101373	Callee	dprintf_touch_log		1101368	0					
ANR	1101374	Identifier	dprintf_touch_log		1101368	0					
ANR	1101375	ArgumentList			1101368	1					
ANR	1101376	ExpressionStatement	"daemonCore -> Register_Timer ( param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 ) , dc_touch_log_file , ""dc_touch_log_file"" )"	567:1:14553:14668	1101368	1	True				
ANR	1101377	CallExpression	"daemonCore -> Register_Timer ( param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 ) , dc_touch_log_file , ""dc_touch_log_file"" )"		1101368	0					
ANR	1101378	Callee	daemonCore -> Register_Timer		1101368	0					
ANR	1101379	PtrMemberAccess	daemonCore -> Register_Timer		1101368	0					
ANR	1101380	Identifier	daemonCore		1101368	0					
ANR	1101381	Identifier	Register_Timer		1101368	1					
ANR	1101382	ArgumentList	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		1101368	1					
ANR	1101383	Argument	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		1101368	0					
ANR	1101384	CallExpression	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		1101368	0					
ANR	1101385	Callee	param_integer		1101368	0					
ANR	1101386	Identifier	param_integer		1101368	0					
ANR	1101387	ArgumentList	"""TOUCH_LOG_INTERVAL"""		1101368	1					
ANR	1101388	Argument	"""TOUCH_LOG_INTERVAL"""		1101368	0					
ANR	1101389	PrimaryExpression	"""TOUCH_LOG_INTERVAL"""		1101368	0					
ANR	1101390	Argument	60		1101368	1					
ANR	1101391	PrimaryExpression	60		1101368	0					
ANR	1101392	Argument	dc_touch_log_file		1101368	1					
ANR	1101393	Identifier	dc_touch_log_file		1101368	0					
ANR	1101394	Argument	"""dc_touch_log_file"""		1101368	2					
ANR	1101395	PrimaryExpression	"""dc_touch_log_file"""		1101368	0					
ANR	1101396	ReturnType	void		1101368	1					
ANR	1101397	Identifier	dc_touch_log_file		1101368	2					
ANR	1101398	ParameterList			1101368	3					
ANR	1101399	CFGEntryNode	ENTRY		1101368		True				
ANR	1101400	CFGExitNode	EXIT		1101368		True				
ANR	1101401	Symbol	daemonCore		1101368						
ANR	1101402	Symbol	param_integer		1101368						
ANR	1101403	Symbol	dc_touch_log_file		1101368						
ANR	1101404	Function	dc_touch_lock_files	571:0:14673:15391							
ANR	1101405	FunctionDef	dc_touch_lock_files ()		1101404	0					
ANR	1101406	CompoundStatement		573:0:14701:15391	1101404	0					
ANR	1101407	IdentifierDeclStatement	priv_state p ;	574:1:14704:14716	1101404	0	True				
ANR	1101408	IdentifierDecl	p		1101404	0					
ANR	1101409	IdentifierDeclType	priv_state		1101404	0					
ANR	1101410	Identifier	p		1101404	1					
ANR	1101411	ExpressionStatement	p = set_condor_priv ( )	583:1:15111:15132	1101404	1	True				
ANR	1101412	AssignmentExpression	p = set_condor_priv ( )		1101404	0		=			
ANR	1101413	Identifier	p		1101404	0					
ANR	1101414	CallExpression	set_condor_priv ( )		1101404	1					
ANR	1101415	Callee	set_condor_priv		1101404	0					
ANR	1101416	Identifier	set_condor_priv		1101404	0					
ANR	1101417	ArgumentList			1101404	1					
ANR	1101418	ExpressionStatement	FileLock :: updateAllLockTimestamps ( )	585:1:15136:15171	1101404	2	True				
ANR	1101419	CallExpression	FileLock :: updateAllLockTimestamps ( )		1101404	0					
ANR	1101420	Callee	FileLock :: updateAllLockTimestamps		1101404	0					
ANR	1101421	Identifier	FileLock :: updateAllLockTimestamps		1101404	0					
ANR	1101422	ArgumentList			1101404	1					
ANR	1101423	ExpressionStatement	set_priv ( p )	587:1:15175:15186	1101404	3	True				
ANR	1101424	CallExpression	set_priv ( p )		1101404	0					
ANR	1101425	Callee	set_priv		1101404	0					
ANR	1101426	Identifier	set_priv		1101404	0					
ANR	1101427	ArgumentList	p		1101404	1					
ANR	1101428	Argument	p		1101404	0					
ANR	1101429	Identifier	p		1101404	0					
ANR	1101430	ExpressionStatement	"daemonCore -> Register_Timer ( param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX ) , dc_touch_lock_files , ""dc_touch_lock_files"" )"	590:1:15246:15389	1101404	4	True				
ANR	1101431	CallExpression	"daemonCore -> Register_Timer ( param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX ) , dc_touch_lock_files , ""dc_touch_lock_files"" )"		1101404	0					
ANR	1101432	Callee	daemonCore -> Register_Timer		1101404	0					
ANR	1101433	PtrMemberAccess	daemonCore -> Register_Timer		1101404	0					
ANR	1101434	Identifier	daemonCore		1101404	0					
ANR	1101435	Identifier	Register_Timer		1101404	1					
ANR	1101436	ArgumentList	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		1101404	1					
ANR	1101437	Argument	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		1101404	0					
ANR	1101438	CallExpression	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		1101404	0					
ANR	1101439	Callee	param_integer		1101404	0					
ANR	1101440	Identifier	param_integer		1101404	0					
ANR	1101441	ArgumentList	"""LOCK_FILE_UPDATE_INTERVAL"""		1101404	1					
ANR	1101442	Argument	"""LOCK_FILE_UPDATE_INTERVAL"""		1101404	0					
ANR	1101443	PrimaryExpression	"""LOCK_FILE_UPDATE_INTERVAL"""		1101404	0					
ANR	1101444	Argument	3600 * 8		1101404	1					
ANR	1101445	MultiplicativeExpression	3600 * 8		1101404	0		*			
ANR	1101446	PrimaryExpression	3600		1101404	0					
ANR	1101447	PrimaryExpression	8		1101404	1					
ANR	1101448	Argument	60		1101404	2					
ANR	1101449	PrimaryExpression	60		1101404	0					
ANR	1101450	Argument	INT_MAX		1101404	3					
ANR	1101451	Identifier	INT_MAX		1101404	0					
ANR	1101452	Argument	dc_touch_lock_files		1101404	1					
ANR	1101453	Identifier	dc_touch_lock_files		1101404	0					
ANR	1101454	Argument	"""dc_touch_lock_files"""		1101404	2					
ANR	1101455	PrimaryExpression	"""dc_touch_lock_files"""		1101404	0					
ANR	1101456	ReturnType	void		1101404	1					
ANR	1101457	Identifier	dc_touch_lock_files		1101404	2					
ANR	1101458	ParameterList			1101404	3					
ANR	1101459	CFGEntryNode	ENTRY		1101404		True				
ANR	1101460	CFGExitNode	EXIT		1101404		True				
ANR	1101461	Symbol	p		1101404						
ANR	1101462	Symbol	set_condor_priv		1101404						
ANR	1101463	Symbol	dc_touch_lock_files		1101404						
ANR	1101464	Symbol	daemonCore		1101404						
ANR	1101465	Symbol	INT_MAX		1101404						
ANR	1101466	Symbol	param_integer		1101404						
ANR	1101467	Function	set_dynamic_dir	596:0:15395:16327							
ANR	1101468	FunctionDef	"set_dynamic_dir (const char * param_name , const char * append_str)"		1101467	0					
ANR	1101469	CompoundStatement		598:0:15466:16327	1101467	0					
ANR	1101470	IdentifierDeclStatement	char * val ;	599:1:15469:15478	1101467	0	True				
ANR	1101471	IdentifierDecl	* val		1101467	0					
ANR	1101472	IdentifierDeclType	char *		1101467	0					
ANR	1101473	Identifier	val		1101467	1					
ANR	1101474	IdentifierDeclStatement	MyString newdir ;	600:1:15481:15496	1101467	1	True				
ANR	1101475	IdentifierDecl	newdir		1101467	0					
ANR	1101476	IdentifierDeclType	MyString		1101467	0					
ANR	1101477	Identifier	newdir		1101467	1					
ANR	1101478	ExpressionStatement	val = param ( param_name )	602:1:15500:15525	1101467	2	True				
ANR	1101479	AssignmentExpression	val = param ( param_name )		1101467	0		=			
ANR	1101480	Identifier	val		1101467	0					
ANR	1101481	CallExpression	param ( param_name )		1101467	1					
ANR	1101482	Callee	param		1101467	0					
ANR	1101483	Identifier	param		1101467	0					
ANR	1101484	ArgumentList	param_name		1101467	1					
ANR	1101485	Argument	param_name		1101467	0					
ANR	1101486	Identifier	param_name		1101467	0					
ANR	1101487	IfStatement	if ( ! val )		1101467	3					
ANR	1101488	Condition	! val	603:5:15532:15536	1101467	0	True				
ANR	1101489	UnaryOperationExpression	! val		1101467	0					
ANR	1101490	UnaryOperator	!		1101467	0					
ANR	1101491	Identifier	val		1101467	1					
ANR	1101492	CompoundStatement		6:13:73:73	1101467	1					
ANR	1101493	ReturnStatement	return ;	605:2:15564:15570	1101467	0	True				
ANR	1101494	ExpressionStatement	"newdir . sprintf ( ""%s.%s"" , val , append_str )"	609:1:15610:15652	1101467	4	True				
ANR	1101495	CallExpression	"newdir . sprintf ( ""%s.%s"" , val , append_str )"		1101467	0					
ANR	1101496	Callee	newdir . sprintf		1101467	0					
ANR	1101497	MemberAccess	newdir . sprintf		1101467	0					
ANR	1101498	Identifier	newdir		1101467	0					
ANR	1101499	Identifier	sprintf		1101467	1					
ANR	1101500	ArgumentList	"""%s.%s"""		1101467	1					
ANR	1101501	Argument	"""%s.%s"""		1101467	0					
ANR	1101502	PrimaryExpression	"""%s.%s"""		1101467	0					
ANR	1101503	Argument	val		1101467	1					
ANR	1101504	Identifier	val		1101467	0					
ANR	1101505	Argument	append_str		1101467	2					
ANR	1101506	Identifier	append_str		1101467	0					
ANR	1101507	ExpressionStatement	make_dir ( newdir . Value ( ) )	613:1:15737:15763	1101467	5	True				
ANR	1101508	CallExpression	make_dir ( newdir . Value ( ) )		1101467	0					
ANR	1101509	Callee	make_dir		1101467	0					
ANR	1101510	Identifier	make_dir		1101467	0					
ANR	1101511	ArgumentList	newdir . Value ( )		1101467	1					
ANR	1101512	Argument	newdir . Value ( )		1101467	0					
ANR	1101513	CallExpression	newdir . Value ( )		1101467	0					
ANR	1101514	Callee	newdir . Value		1101467	0					
ANR	1101515	MemberAccess	newdir . Value		1101467	0					
ANR	1101516	Identifier	newdir		1101467	0					
ANR	1101517	Identifier	Value		1101467	1					
ANR	1101518	ArgumentList			1101467	1					
ANR	1101519	ExpressionStatement	"config_insert ( param_name , newdir . Value ( ) )"	617:1:15855:15898	1101467	6	True				
ANR	1101520	CallExpression	"config_insert ( param_name , newdir . Value ( ) )"		1101467	0					
ANR	1101521	Callee	config_insert		1101467	0					
ANR	1101522	Identifier	config_insert		1101467	0					
ANR	1101523	ArgumentList	param_name		1101467	1					
ANR	1101524	Argument	param_name		1101467	0					
ANR	1101525	Identifier	param_name		1101467	0					
ANR	1101526	Argument	newdir . Value ( )		1101467	1					
ANR	1101527	CallExpression	newdir . Value ( )		1101467	0					
ANR	1101528	Callee	newdir . Value		1101467	0					
ANR	1101529	MemberAccess	newdir . Value		1101467	0					
ANR	1101530	Identifier	newdir		1101467	0					
ANR	1101531	Identifier	Value		1101467	1					
ANR	1101532	ArgumentList			1101467	1					
ANR	1101533	IdentifierDeclStatement	"MyString env_str ( ""_"" ) ;"	621:1:16018:16041	1101467	7	True				
ANR	1101534	IdentifierDecl	"env_str ( ""_"" )"		1101467	0					
ANR	1101535	IdentifierDeclType	MyString		1101467	0					
ANR	1101536	Identifier	env_str		1101467	1					
ANR	1101537	PrimaryExpression	"""_"""		1101467	2					
ANR	1101538	ExpressionStatement	env_str += myDistro -> Get ( )	622:1:16044:16070	1101467	8	True				
ANR	1101539	AssignmentExpression	env_str += myDistro -> Get ( )		1101467	0		+=			
ANR	1101540	Identifier	env_str		1101467	0					
ANR	1101541	CallExpression	myDistro -> Get ( )		1101467	1					
ANR	1101542	Callee	myDistro -> Get		1101467	0					
ANR	1101543	PtrMemberAccess	myDistro -> Get		1101467	0					
ANR	1101544	Identifier	myDistro		1101467	0					
ANR	1101545	Identifier	Get		1101467	1					
ANR	1101546	ArgumentList			1101467	1					
ANR	1101547	ExpressionStatement	"env_str += ""_"""	623:1:16073:16087	1101467	9	True				
ANR	1101548	AssignmentExpression	"env_str += ""_"""		1101467	0		+=			
ANR	1101549	Identifier	env_str		1101467	0					
ANR	1101550	PrimaryExpression	"""_"""		1101467	1					
ANR	1101551	ExpressionStatement	env_str += param_name	624:1:16090:16111	1101467	10	True				
ANR	1101552	AssignmentExpression	env_str += param_name		1101467	0		+=			
ANR	1101553	Identifier	env_str		1101467	0					
ANR	1101554	Identifier	param_name		1101467	1					
ANR	1101555	ExpressionStatement	"env_str += ""="""	625:1:16114:16128	1101467	11	True				
ANR	1101556	AssignmentExpression	"env_str += ""="""		1101467	0		+=			
ANR	1101557	Identifier	env_str		1101467	0					
ANR	1101558	PrimaryExpression	"""="""		1101467	1					
ANR	1101559	ExpressionStatement	env_str += newdir	626:1:16131:16148	1101467	12	True				
ANR	1101560	AssignmentExpression	env_str += newdir		1101467	0		+=			
ANR	1101561	Identifier	env_str		1101467	0					
ANR	1101562	Identifier	newdir		1101467	1					
ANR	1101563	IdentifierDeclStatement	char * env_cstr = strdup ( env_str . Value ( ) ) ;	627:1:16151:16193	1101467	13	True				
ANR	1101564	IdentifierDecl	* env_cstr = strdup ( env_str . Value ( ) )		1101467	0					
ANR	1101565	IdentifierDeclType	char *		1101467	0					
ANR	1101566	Identifier	env_cstr		1101467	1					
ANR	1101567	AssignmentExpression	* env_cstr = strdup ( env_str . Value ( ) )		1101467	2		=			
ANR	1101568	Identifier	env_cstr		1101467	0					
ANR	1101569	CallExpression	strdup ( env_str . Value ( ) )		1101467	1					
ANR	1101570	Callee	strdup		1101467	0					
ANR	1101571	Identifier	strdup		1101467	0					
ANR	1101572	ArgumentList	env_str . Value ( )		1101467	1					
ANR	1101573	Argument	env_str . Value ( )		1101467	0					
ANR	1101574	CallExpression	env_str . Value ( )		1101467	0					
ANR	1101575	Callee	env_str . Value		1101467	0					
ANR	1101576	MemberAccess	env_str . Value		1101467	0					
ANR	1101577	Identifier	env_str		1101467	0					
ANR	1101578	Identifier	Value		1101467	1					
ANR	1101579	ArgumentList			1101467	1					
ANR	1101580	IfStatement	if ( SetEnv ( env_cstr ) != TRUE )		1101467	14					
ANR	1101581	Condition	SetEnv ( env_cstr ) != TRUE	628:5:16200:16223	1101467	0	True				
ANR	1101582	EqualityExpression	SetEnv ( env_cstr ) != TRUE		1101467	0		!=			
ANR	1101583	CallExpression	SetEnv ( env_cstr )		1101467	0					
ANR	1101584	Callee	SetEnv		1101467	0					
ANR	1101585	Identifier	SetEnv		1101467	0					
ANR	1101586	ArgumentList	env_cstr		1101467	1					
ANR	1101587	Argument	env_cstr		1101467	0					
ANR	1101588	Identifier	env_cstr		1101467	0					
ANR	1101589	Identifier	TRUE		1101467	1					
ANR	1101590	CompoundStatement		31:32:760:760	1101467	1					
ANR	1101591	ExpressionStatement	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_cstr )"	629:2:16231:16309	1101467	0	True				
ANR	1101592	CallExpression	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_cstr )"		1101467	0					
ANR	1101593	Callee	fprintf		1101467	0					
ANR	1101594	Identifier	fprintf		1101467	0					
ANR	1101595	ArgumentList	stderr		1101467	1					
ANR	1101596	Argument	stderr		1101467	0					
ANR	1101597	Identifier	stderr		1101467	0					
ANR	1101598	Argument	"""ERROR: Can't add %s to the environment!\\n"""		1101467	1					
ANR	1101599	PrimaryExpression	"""ERROR: Can't add %s to the environment!\\n"""		1101467	0					
ANR	1101600	Argument	env_cstr		1101467	2					
ANR	1101601	Identifier	env_cstr		1101467	0					
ANR	1101602	ExpressionStatement	exit ( 4 )	631:2:16313:16322	1101467	1	True				
ANR	1101603	CallExpression	exit ( 4 )		1101467	0					
ANR	1101604	Callee	exit		1101467	0					
ANR	1101605	Identifier	exit		1101467	0					
ANR	1101606	ArgumentList	4		1101467	1					
ANR	1101607	Argument	4		1101467	0					
ANR	1101608	PrimaryExpression	4		1101467	0					
ANR	1101609	ReturnType	void		1101467	1					
ANR	1101610	Identifier	set_dynamic_dir		1101467	2					
ANR	1101611	ParameterList	"const char * param_name , const char * append_str"		1101467	3					
ANR	1101612	Parameter	const char * param_name	597:17:15417:15438	1101467	0	True				
ANR	1101613	ParameterType	const char *		1101467	0					
ANR	1101614	Identifier	param_name		1101467	1					
ANR	1101615	Parameter	const char * append_str	597:41:15441:15462	1101467	1	True				
ANR	1101616	ParameterType	const char *		1101467	0					
ANR	1101617	Identifier	append_str		1101467	1					
ANR	1101618	CFGEntryNode	ENTRY		1101467		True				
ANR	1101619	CFGExitNode	EXIT		1101467		True				
ANR	1101620	Symbol	val		1101467						
ANR	1101621	Symbol	newdir . Value		1101467						
ANR	1101622	Symbol	env_str		1101467						
ANR	1101623	Symbol	env_cstr		1101467						
ANR	1101624	Symbol	TRUE		1101467						
ANR	1101625	Symbol	env_str . Value		1101467						
ANR	1101626	Symbol	append_str		1101467						
ANR	1101627	Symbol	SetEnv		1101467						
ANR	1101628	Symbol	stderr		1101467						
ANR	1101629	Symbol	myDistro -> Get		1101467						
ANR	1101630	Symbol	param		1101467						
ANR	1101631	Symbol	newdir		1101467						
ANR	1101632	Symbol	* myDistro		1101467						
ANR	1101633	Symbol	myDistro		1101467						
ANR	1101634	Symbol	strdup		1101467						
ANR	1101635	Symbol	param_name		1101467						
ANR	1101636	Function	handle_dynamic_dirs	636:0:16331:17186							
ANR	1101637	FunctionDef	handle_dynamic_dirs ()		1101636	0					
ANR	1101638	CompoundStatement		638:0:16358:17186	1101636	0					
ANR	1101639	IfStatement	if ( ! DynamicDirs )		1101636	0					
ANR	1101640	Condition	! DynamicDirs	643:5:16575:16587	1101636	0	True				
ANR	1101641	UnaryOperationExpression	! DynamicDirs		1101636	0					
ANR	1101642	UnaryOperator	!		1101636	0					
ANR	1101643	Identifier	DynamicDirs		1101636	1					
ANR	1101644	CompoundStatement		6:21:232:232	1101636	1					
ANR	1101645	ReturnStatement	return ;	644:2:16595:16601	1101636	0	True				
ANR	1101646	IdentifierDeclStatement	int mypid = daemonCore -> getpid ( ) ;	646:1:16607:16639	1101636	1	True				
ANR	1101647	IdentifierDecl	mypid = daemonCore -> getpid ( )		1101636	0					
ANR	1101648	IdentifierDeclType	int		1101636	0					
ANR	1101649	Identifier	mypid		1101636	1					
ANR	1101650	AssignmentExpression	mypid = daemonCore -> getpid ( )		1101636	2		=			
ANR	1101651	Identifier	mypid		1101636	0					
ANR	1101652	CallExpression	daemonCore -> getpid ( )		1101636	1					
ANR	1101653	Callee	daemonCore -> getpid		1101636	0					
ANR	1101654	PtrMemberAccess	daemonCore -> getpid		1101636	0					
ANR	1101655	Identifier	daemonCore		1101636	0					
ANR	1101656	Identifier	getpid		1101636	1					
ANR	1101657	ArgumentList			1101636	1					
ANR	1101658	IdentifierDeclStatement	char buf [ 256 ] ;	647:1:16642:16655	1101636	2	True				
ANR	1101659	IdentifierDecl	buf [ 256 ]		1101636	0					
ANR	1101660	IdentifierDeclType	char [ 256 ]		1101636	0					
ANR	1101661	Identifier	buf		1101636	1					
ANR	1101662	PrimaryExpression	256		1101636	2					
ANR	1101663	ExpressionStatement	"sprintf ( buf , ""%s-%d"" , get_local_ipaddr ( ) . to_ip_string ( ) . Value ( ) , mypid )"	648:1:16658:16731	1101636	3	True				
ANR	1101664	CallExpression	"sprintf ( buf , ""%s-%d"" , get_local_ipaddr ( ) . to_ip_string ( ) . Value ( ) , mypid )"		1101636	0					
ANR	1101665	Callee	sprintf		1101636	0					
ANR	1101666	Identifier	sprintf		1101636	0					
ANR	1101667	ArgumentList	buf		1101636	1					
ANR	1101668	Argument	buf		1101636	0					
ANR	1101669	Identifier	buf		1101636	0					
ANR	1101670	Argument	"""%s-%d"""		1101636	1					
ANR	1101671	PrimaryExpression	"""%s-%d"""		1101636	0					
ANR	1101672	Argument	get_local_ipaddr ( ) . to_ip_string ( ) . Value ( )		1101636	2					
ANR	1101673	CallExpression	get_local_ipaddr ( ) . to_ip_string ( ) . Value ( )		1101636	0					
ANR	1101674	Callee	get_local_ipaddr ( ) . to_ip_string ( ) . Value		1101636	0					
ANR	1101675	MemberAccess	get_local_ipaddr ( ) . to_ip_string ( ) . Value		1101636	0					
ANR	1101676	CallExpression	get_local_ipaddr ( ) . to_ip_string ( )		1101636	0					
ANR	1101677	Callee	get_local_ipaddr ( ) . to_ip_string		1101636	0					
ANR	1101678	MemberAccess	get_local_ipaddr ( ) . to_ip_string		1101636	0					
ANR	1101679	CallExpression	get_local_ipaddr ( )		1101636	0					
ANR	1101680	Callee	get_local_ipaddr		1101636	0					
ANR	1101681	Identifier	get_local_ipaddr		1101636	0					
ANR	1101682	ArgumentList			1101636	1					
ANR	1101683	Identifier	to_ip_string		1101636	1					
ANR	1101684	ArgumentList			1101636	1					
ANR	1101685	Identifier	Value		1101636	1					
ANR	1101686	ArgumentList			1101636	1					
ANR	1101687	Argument	mypid		1101636	3					
ANR	1101688	Identifier	mypid		1101636	0					
ANR	1101689	ExpressionStatement	"set_dynamic_dir ( ""LOG"" , buf )"	650:1:16735:16764	1101636	4	True				
ANR	1101690	CallExpression	"set_dynamic_dir ( ""LOG"" , buf )"		1101636	0					
ANR	1101691	Callee	set_dynamic_dir		1101636	0					
ANR	1101692	Identifier	set_dynamic_dir		1101636	0					
ANR	1101693	ArgumentList	"""LOG"""		1101636	1					
ANR	1101694	Argument	"""LOG"""		1101636	0					
ANR	1101695	PrimaryExpression	"""LOG"""		1101636	0					
ANR	1101696	Argument	buf		1101636	1					
ANR	1101697	Identifier	buf		1101636	0					
ANR	1101698	ExpressionStatement	"set_dynamic_dir ( ""SPOOL"" , buf )"	651:1:16767:16798	1101636	5	True				
ANR	1101699	CallExpression	"set_dynamic_dir ( ""SPOOL"" , buf )"		1101636	0					
ANR	1101700	Callee	set_dynamic_dir		1101636	0					
ANR	1101701	Identifier	set_dynamic_dir		1101636	0					
ANR	1101702	ArgumentList	"""SPOOL"""		1101636	1					
ANR	1101703	Argument	"""SPOOL"""		1101636	0					
ANR	1101704	PrimaryExpression	"""SPOOL"""		1101636	0					
ANR	1101705	Argument	buf		1101636	1					
ANR	1101706	Identifier	buf		1101636	0					
ANR	1101707	ExpressionStatement	"set_dynamic_dir ( ""EXECUTE"" , buf )"	652:1:16801:16834	1101636	6	True				
ANR	1101708	CallExpression	"set_dynamic_dir ( ""EXECUTE"" , buf )"		1101636	0					
ANR	1101709	Callee	set_dynamic_dir		1101636	0					
ANR	1101710	Identifier	set_dynamic_dir		1101636	0					
ANR	1101711	ArgumentList	"""EXECUTE"""		1101636	1					
ANR	1101712	Argument	"""EXECUTE"""		1101636	0					
ANR	1101713	PrimaryExpression	"""EXECUTE"""		1101636	0					
ANR	1101714	Argument	buf		1101636	1					
ANR	1101715	Identifier	buf		1101636	0					
ANR	1101716	ExpressionStatement	"sprintf ( buf , ""_%s_STARTD_NAME=%d"" , myDistro -> Get ( ) , mypid )"	656:1:16962:17022	1101636	7	True				
ANR	1101717	CallExpression	"sprintf ( buf , ""_%s_STARTD_NAME=%d"" , myDistro -> Get ( ) , mypid )"		1101636	0					
ANR	1101718	Callee	sprintf		1101636	0					
ANR	1101719	Identifier	sprintf		1101636	0					
ANR	1101720	ArgumentList	buf		1101636	1					
ANR	1101721	Argument	buf		1101636	0					
ANR	1101722	Identifier	buf		1101636	0					
ANR	1101723	Argument	"""_%s_STARTD_NAME=%d"""		1101636	1					
ANR	1101724	PrimaryExpression	"""_%s_STARTD_NAME=%d"""		1101636	0					
ANR	1101725	Argument	myDistro -> Get ( )		1101636	2					
ANR	1101726	CallExpression	myDistro -> Get ( )		1101636	0					
ANR	1101727	Callee	myDistro -> Get		1101636	0					
ANR	1101728	PtrMemberAccess	myDistro -> Get		1101636	0					
ANR	1101729	Identifier	myDistro		1101636	0					
ANR	1101730	Identifier	Get		1101636	1					
ANR	1101731	ArgumentList			1101636	1					
ANR	1101732	Argument	mypid		1101636	3					
ANR	1101733	Identifier	mypid		1101636	0					
ANR	1101734	IdentifierDeclStatement	char * env_str = strdup ( buf ) ;	657:1:17025:17054	1101636	8	True				
ANR	1101735	IdentifierDecl	* env_str = strdup ( buf )		1101636	0					
ANR	1101736	IdentifierDeclType	char *		1101636	0					
ANR	1101737	Identifier	env_str		1101636	1					
ANR	1101738	AssignmentExpression	* env_str = strdup ( buf )		1101636	2		=			
ANR	1101739	Identifier	env_str		1101636	0					
ANR	1101740	CallExpression	strdup ( buf )		1101636	1					
ANR	1101741	Callee	strdup		1101636	0					
ANR	1101742	Identifier	strdup		1101636	0					
ANR	1101743	ArgumentList	buf		1101636	1					
ANR	1101744	Argument	buf		1101636	0					
ANR	1101745	Identifier	buf		1101636	0					
ANR	1101746	IfStatement	if ( SetEnv ( env_str ) != TRUE )		1101636	9					
ANR	1101747	Condition	SetEnv ( env_str ) != TRUE	658:5:17061:17083	1101636	0	True				
ANR	1101748	EqualityExpression	SetEnv ( env_str ) != TRUE		1101636	0		!=			
ANR	1101749	CallExpression	SetEnv ( env_str )		1101636	0					
ANR	1101750	Callee	SetEnv		1101636	0					
ANR	1101751	Identifier	SetEnv		1101636	0					
ANR	1101752	ArgumentList	env_str		1101636	1					
ANR	1101753	Argument	env_str		1101636	0					
ANR	1101754	Identifier	env_str		1101636	0					
ANR	1101755	Identifier	TRUE		1101636	1					
ANR	1101756	CompoundStatement		21:31:728:728	1101636	1					
ANR	1101757	ExpressionStatement	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_str )"	659:2:17091:17168	1101636	0	True				
ANR	1101758	CallExpression	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_str )"		1101636	0					
ANR	1101759	Callee	fprintf		1101636	0					
ANR	1101760	Identifier	fprintf		1101636	0					
ANR	1101761	ArgumentList	stderr		1101636	1					
ANR	1101762	Argument	stderr		1101636	0					
ANR	1101763	Identifier	stderr		1101636	0					
ANR	1101764	Argument	"""ERROR: Can't add %s to the environment!\\n"""		1101636	1					
ANR	1101765	PrimaryExpression	"""ERROR: Can't add %s to the environment!\\n"""		1101636	0					
ANR	1101766	Argument	env_str		1101636	2					
ANR	1101767	Identifier	env_str		1101636	0					
ANR	1101768	ExpressionStatement	exit ( 4 )	661:2:17172:17181	1101636	1	True				
ANR	1101769	CallExpression	exit ( 4 )		1101636	0					
ANR	1101770	Callee	exit		1101636	0					
ANR	1101771	Identifier	exit		1101636	0					
ANR	1101772	ArgumentList	4		1101636	1					
ANR	1101773	Argument	4		1101636	0					
ANR	1101774	PrimaryExpression	4		1101636	0					
ANR	1101775	ReturnType	void		1101636	1					
ANR	1101776	Identifier	handle_dynamic_dirs		1101636	2					
ANR	1101777	ParameterList			1101636	3					
ANR	1101778	CFGEntryNode	ENTRY		1101636		True				
ANR	1101779	CFGExitNode	EXIT		1101636		True				
ANR	1101780	Symbol	mypid		1101636						
ANR	1101781	Symbol	daemonCore -> getpid		1101636						
ANR	1101782	Symbol	env_str		1101636						
ANR	1101783	Symbol	TRUE		1101636						
ANR	1101784	Symbol	SetEnv		1101636						
ANR	1101785	Symbol	stderr		1101636						
ANR	1101786	Symbol	myDistro -> Get		1101636						
ANR	1101787	Symbol	get_local_ipaddr ( ) . to_ip_string		1101636						
ANR	1101788	Symbol	DynamicDirs		1101636						
ANR	1101789	Symbol	buf		1101636						
ANR	1101790	Symbol	* daemonCore		1101636						
ANR	1101791	Symbol	get_local_ipaddr		1101636						
ANR	1101792	Symbol	get_local_ipaddr ( ) . to_ip_string ( ) . Value		1101636						
ANR	1101793	Symbol	myDistro		1101636						
ANR	1101794	Symbol	* myDistro		1101636						
ANR	1101795	Symbol	daemonCore		1101636						
ANR	1101796	Symbol	strdup		1101636						
ANR	1101797	Function	linux_sig_coredump	666:0:17213:18673							
ANR	1101798	FunctionDef	linux_sig_coredump (int signum)		1101797	0					
ANR	1101799	CompoundStatement		668:0:17249:18673	1101797	0					
ANR	1101800	IdentifierDeclStatement	struct sigaction sa ;	669:1:17252:17271	1101797	0	True				
ANR	1101801	IdentifierDecl	sa		1101797	0					
ANR	1101802	IdentifierDeclType	struct sigaction		1101797	0					
ANR	1101803	Identifier	sa		1101797	1					
ANR	1101804	Statement	static	670:1:17274:17279	1101797	1	True				
ANR	1101805	IdentifierDeclStatement	bool down = false ;	670:8:17281:17298	1101797	2	True				
ANR	1101806	IdentifierDecl	down = false		1101797	0					
ANR	1101807	IdentifierDeclType	bool		1101797	0					
ANR	1101808	Identifier	down		1101797	1					
ANR	1101809	AssignmentExpression	down = false		1101797	2		=			
ANR	1101810	Identifier	false		1101797	0					
ANR	1101811	Identifier	false		1101797	1					
ANR	1101812	IfStatement	if ( down == true )		1101797	3					
ANR	1101813	Condition	down == true	686:5:18024:18035	1101797	0	True				
ANR	1101814	EqualityExpression	down == true		1101797	0		==			
ANR	1101815	Identifier	down		1101797	0					
ANR	1101816	Identifier	true		1101797	1					
ANR	1101817	CompoundStatement		19:19:788:788	1101797	1					
ANR	1101818	ReturnStatement	return ;	687:2:18042:18048	1101797	0	True				
ANR	1101819	ExpressionStatement	down = true	689:1:18054:18065	1101797	4	True				
ANR	1101820	AssignmentExpression	down = true		1101797	0		=			
ANR	1101821	Identifier	down		1101797	0					
ANR	1101822	Identifier	true		1101797	1					
ANR	1101823	ExpressionStatement	dprintf_dump_stack ( )	691:1:18069:18089	1101797	5	True				
ANR	1101824	CallExpression	dprintf_dump_stack ( )		1101797	0					
ANR	1101825	Callee	dprintf_dump_stack		1101797	0					
ANR	1101826	Identifier	dprintf_dump_stack		1101797	0					
ANR	1101827	ArgumentList			1101797	1					
ANR	1101828	ExpressionStatement	setuid ( 0 )	694:1:18145:18154	1101797	6	True				
ANR	1101829	CallExpression	setuid ( 0 )		1101797	0					
ANR	1101830	Callee	setuid		1101797	0					
ANR	1101831	Identifier	setuid		1101797	0					
ANR	1101832	ArgumentList	0		1101797	1					
ANR	1101833	Argument	0		1101797	0					
ANR	1101834	PrimaryExpression	0		1101797	0					
ANR	1101835	ExpressionStatement	setgid ( 0 )	695:1:18157:18166	1101797	7	True				
ANR	1101836	CallExpression	setgid ( 0 )		1101797	0					
ANR	1101837	Callee	setgid		1101797	0					
ANR	1101838	Identifier	setgid		1101797	0					
ANR	1101839	ArgumentList	0		1101797	1					
ANR	1101840	Argument	0		1101797	0					
ANR	1101841	PrimaryExpression	0		1101797	0					
ANR	1101842	IfStatement	if ( core_dir != NULL )		1101797	8					
ANR	1101843	Condition	core_dir != NULL	697:5:18174:18189	1101797	0	True				
ANR	1101844	EqualityExpression	core_dir != NULL		1101797	0		!=			
ANR	1101845	Identifier	core_dir		1101797	0					
ANR	1101846	Identifier	NULL		1101797	1					
ANR	1101847	CompoundStatement		30:23:942:942	1101797	1					
ANR	1101848	ExpressionStatement	chdir ( core_dir )	698:2:18196:18211	1101797	0	True				
ANR	1101849	CallExpression	chdir ( core_dir )		1101797	0					
ANR	1101850	Callee	chdir		1101797	0					
ANR	1101851	Identifier	chdir		1101797	0					
ANR	1101852	ArgumentList	core_dir		1101797	1					
ANR	1101853	Argument	core_dir		1101797	0					
ANR	1101854	Identifier	core_dir		1101797	0					
ANR	1101855	ExpressionStatement	"WriteCoreDump ( ""core"" )"	701:1:18218:18239	1101797	9	True				
ANR	1101856	CallExpression	"WriteCoreDump ( ""core"" )"		1101797	0					
ANR	1101857	Callee	WriteCoreDump		1101797	0					
ANR	1101858	Identifier	WriteCoreDump		1101797	0					
ANR	1101859	ArgumentList	"""core"""		1101797	1					
ANR	1101860	Argument	"""core"""		1101797	0					
ANR	1101861	PrimaryExpression	"""core"""		1101797	0					
ANR	1101862	ExpressionStatement	sa . sa_handler = SIG_DFL	704:1:18314:18337	1101797	10	True				
ANR	1101863	AssignmentExpression	sa . sa_handler = SIG_DFL		1101797	0		=			
ANR	1101864	MemberAccess	sa . sa_handler		1101797	0					
ANR	1101865	Identifier	sa		1101797	0					
ANR	1101866	Identifier	sa_handler		1101797	1					
ANR	1101867	Identifier	SIG_DFL		1101797	1					
ANR	1101868	ExpressionStatement	sigemptyset ( & sa . sa_mask )	705:1:18340:18364	1101797	11	True				
ANR	1101869	CallExpression	sigemptyset ( & sa . sa_mask )		1101797	0					
ANR	1101870	Callee	sigemptyset		1101797	0					
ANR	1101871	Identifier	sigemptyset		1101797	0					
ANR	1101872	ArgumentList	& sa . sa_mask		1101797	1					
ANR	1101873	Argument	& sa . sa_mask		1101797	0					
ANR	1101874	UnaryOperationExpression	& sa . sa_mask		1101797	0					
ANR	1101875	UnaryOperator	&		1101797	0					
ANR	1101876	MemberAccess	sa . sa_mask		1101797	1					
ANR	1101877	Identifier	sa		1101797	0					
ANR	1101878	Identifier	sa_mask		1101797	1					
ANR	1101879	ExpressionStatement	sa . sa_flags = 0	706:1:18367:18382	1101797	12	True				
ANR	1101880	AssignmentExpression	sa . sa_flags = 0		1101797	0		=			
ANR	1101881	MemberAccess	sa . sa_flags		1101797	0					
ANR	1101882	Identifier	sa		1101797	0					
ANR	1101883	Identifier	sa_flags		1101797	1					
ANR	1101884	PrimaryExpression	0		1101797	1					
ANR	1101885	ExpressionStatement	"sigaction ( signum , & sa , NULL )"	707:1:18385:18413	1101797	13	True				
ANR	1101886	CallExpression	"sigaction ( signum , & sa , NULL )"		1101797	0					
ANR	1101887	Callee	sigaction		1101797	0					
ANR	1101888	Identifier	sigaction		1101797	0					
ANR	1101889	ArgumentList	signum		1101797	1					
ANR	1101890	Argument	signum		1101797	0					
ANR	1101891	Identifier	signum		1101797	0					
ANR	1101892	Argument	& sa		1101797	1					
ANR	1101893	UnaryOperationExpression	& sa		1101797	0					
ANR	1101894	UnaryOperator	&		1101797	0					
ANR	1101895	Identifier	sa		1101797	1					
ANR	1101896	Argument	NULL		1101797	2					
ANR	1101897	Identifier	NULL		1101797	0					
ANR	1101898	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & sa . sa_mask , NULL )"	708:1:18416:18459	1101797	14	True				
ANR	1101899	CallExpression	"sigprocmask ( SIG_SETMASK , & sa . sa_mask , NULL )"		1101797	0					
ANR	1101900	Callee	sigprocmask		1101797	0					
ANR	1101901	Identifier	sigprocmask		1101797	0					
ANR	1101902	ArgumentList	SIG_SETMASK		1101797	1					
ANR	1101903	Argument	SIG_SETMASK		1101797	0					
ANR	1101904	Identifier	SIG_SETMASK		1101797	0					
ANR	1101905	Argument	& sa . sa_mask		1101797	1					
ANR	1101906	UnaryOperationExpression	& sa . sa_mask		1101797	0					
ANR	1101907	UnaryOperator	&		1101797	0					
ANR	1101908	MemberAccess	sa . sa_mask		1101797	1					
ANR	1101909	Identifier	sa		1101797	0					
ANR	1101910	Identifier	sa_mask		1101797	1					
ANR	1101911	Argument	NULL		1101797	2					
ANR	1101912	Identifier	NULL		1101797	0					
ANR	1101913	ExpressionStatement	raise ( signum )	710:1:18463:18476	1101797	15	True				
ANR	1101914	CallExpression	raise ( signum )		1101797	0					
ANR	1101915	Callee	raise		1101797	0					
ANR	1101916	Identifier	raise		1101797	0					
ANR	1101917	ArgumentList	signum		1101797	1					
ANR	1101918	Argument	signum		1101797	0					
ANR	1101919	Identifier	signum		1101797	0					
ANR	1101920	ExpressionStatement	exit ( 1 )	715:1:18664:18671	1101797	16	True				
ANR	1101921	CallExpression	exit ( 1 )		1101797	0					
ANR	1101922	Callee	exit		1101797	0					
ANR	1101923	Identifier	exit		1101797	0					
ANR	1101924	ArgumentList	1		1101797	1					
ANR	1101925	Argument	1		1101797	0					
ANR	1101926	PrimaryExpression	1		1101797	0					
ANR	1101927	ReturnType	void		1101797	1					
ANR	1101928	Identifier	linux_sig_coredump		1101797	2					
ANR	1101929	ParameterList	int signum		1101797	3					
ANR	1101930	Parameter	int signum	667:19:17237:17246	1101797	0	True				
ANR	1101931	ParameterType	int		1101797	0					
ANR	1101932	Identifier	signum		1101797	1					
ANR	1101933	CFGEntryNode	ENTRY		1101797		True				
ANR	1101934	CFGExitNode	EXIT		1101797		True				
ANR	1101935	Symbol	signum		1101797						
ANR	1101936	Symbol	core_dir		1101797						
ANR	1101937	Symbol	NULL		1101797						
ANR	1101938	Symbol	false		1101797						
ANR	1101939	Symbol	sa . sa_flags		1101797						
ANR	1101940	Symbol	SIG_SETMASK		1101797						
ANR	1101941	Symbol	down		1101797						
ANR	1101942	Symbol	sa		1101797						
ANR	1101943	Symbol	& sa . sa_mask		1101797						
ANR	1101944	Symbol	SIG_DFL		1101797						
ANR	1101945	Symbol	true		1101797						
ANR	1101946	Symbol	& sa		1101797						
ANR	1101947	Symbol	sa . sa_handler		1101797						
ANR	1101948	Function	install_core_dump_handler	720:0:18684:19352							
ANR	1101949	FunctionDef	install_core_dump_handler ()		1101948	0					
ANR	1101950	CompoundStatement		722:0:18717:19352	1101948	0					
ANR	1101951	IfStatement	if ( getuid ( ) == 0 )		1101948	0					
ANR	1101952	Condition	getuid ( ) == 0	725:6:18793:18805	1101948	0	True				
ANR	1101953	EqualityExpression	getuid ( ) == 0		1101948	0		==			
ANR	1101954	CallExpression	getuid ( )		1101948	0					
ANR	1101955	Callee	getuid		1101948	0					
ANR	1101956	Identifier	getuid		1101948	0					
ANR	1101957	ArgumentList			1101948	1					
ANR	1101958	PrimaryExpression	0		1101948	1					
ANR	1101959	CompoundStatement		6:3:183:199	1101948	1					
ANR	1101960	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Running as root.  Enabling specialized core dump routines\\n"" )"	726:3:18813:18896	1101948	0	True				
ANR	1101961	CallExpression	"dprintf ( D_FULLDEBUG , ""Running as root.  Enabling specialized core dump routines\\n"" )"		1101948	0					
ANR	1101962	Callee	dprintf		1101948	0					
ANR	1101963	Identifier	dprintf		1101948	0					
ANR	1101964	ArgumentList	D_FULLDEBUG		1101948	1					
ANR	1101965	Argument	D_FULLDEBUG		1101948	0					
ANR	1101966	Identifier	D_FULLDEBUG		1101948	0					
ANR	1101967	Argument	"""Running as root.  Enabling specialized core dump routines\\n"""		1101948	1					
ANR	1101968	PrimaryExpression	"""Running as root.  Enabling specialized core dump routines\\n"""		1101948	0					
ANR	1101969	IdentifierDeclStatement	sigset_t fullset ;	727:3:18901:18917	1101948	1	True				
ANR	1101970	IdentifierDecl	fullset		1101948	0					
ANR	1101971	IdentifierDeclType	sigset_t		1101948	0					
ANR	1101972	Identifier	fullset		1101948	1					
ANR	1101973	ExpressionStatement	sigfillset ( & fullset )	728:3:18922:18944	1101948	2	True				
ANR	1101974	CallExpression	sigfillset ( & fullset )		1101948	0					
ANR	1101975	Callee	sigfillset		1101948	0					
ANR	1101976	Identifier	sigfillset		1101948	0					
ANR	1101977	ArgumentList	& fullset		1101948	1					
ANR	1101978	Argument	& fullset		1101948	0					
ANR	1101979	UnaryOperationExpression	& fullset		1101948	0					
ANR	1101980	UnaryOperator	&		1101948	0					
ANR	1101981	Identifier	fullset		1101948	1					
ANR	1101982	ExpressionStatement	"install_sig_handler_with_mask ( SIGSEGV , & fullset , linux_sig_coredump )"	729:3:18949:19017	1101948	3	True				
ANR	1101983	CallExpression	"install_sig_handler_with_mask ( SIGSEGV , & fullset , linux_sig_coredump )"		1101948	0					
ANR	1101984	Callee	install_sig_handler_with_mask		1101948	0					
ANR	1101985	Identifier	install_sig_handler_with_mask		1101948	0					
ANR	1101986	ArgumentList	SIGSEGV		1101948	1					
ANR	1101987	Argument	SIGSEGV		1101948	0					
ANR	1101988	Identifier	SIGSEGV		1101948	0					
ANR	1101989	Argument	& fullset		1101948	1					
ANR	1101990	UnaryOperationExpression	& fullset		1101948	0					
ANR	1101991	UnaryOperator	&		1101948	0					
ANR	1101992	Identifier	fullset		1101948	1					
ANR	1101993	Argument	linux_sig_coredump		1101948	2					
ANR	1101994	Identifier	linux_sig_coredump		1101948	0					
ANR	1101995	ExpressionStatement	"install_sig_handler_with_mask ( SIGABRT , & fullset , linux_sig_coredump )"	730:3:19022:19090	1101948	4	True				
ANR	1101996	CallExpression	"install_sig_handler_with_mask ( SIGABRT , & fullset , linux_sig_coredump )"		1101948	0					
ANR	1101997	Callee	install_sig_handler_with_mask		1101948	0					
ANR	1101998	Identifier	install_sig_handler_with_mask		1101948	0					
ANR	1101999	ArgumentList	SIGABRT		1101948	1					
ANR	1102000	Argument	SIGABRT		1101948	0					
ANR	1102001	Identifier	SIGABRT		1101948	0					
ANR	1102002	Argument	& fullset		1101948	1					
ANR	1102003	UnaryOperationExpression	& fullset		1101948	0					
ANR	1102004	UnaryOperator	&		1101948	0					
ANR	1102005	Identifier	fullset		1101948	1					
ANR	1102006	Argument	linux_sig_coredump		1101948	2					
ANR	1102007	Identifier	linux_sig_coredump		1101948	0					
ANR	1102008	ExpressionStatement	"install_sig_handler_with_mask ( SIGILL , & fullset , linux_sig_coredump )"	731:3:19095:19162	1101948	5	True				
ANR	1102009	CallExpression	"install_sig_handler_with_mask ( SIGILL , & fullset , linux_sig_coredump )"		1101948	0					
ANR	1102010	Callee	install_sig_handler_with_mask		1101948	0					
ANR	1102011	Identifier	install_sig_handler_with_mask		1101948	0					
ANR	1102012	ArgumentList	SIGILL		1101948	1					
ANR	1102013	Argument	SIGILL		1101948	0					
ANR	1102014	Identifier	SIGILL		1101948	0					
ANR	1102015	Argument	& fullset		1101948	1					
ANR	1102016	UnaryOperationExpression	& fullset		1101948	0					
ANR	1102017	UnaryOperator	&		1101948	0					
ANR	1102018	Identifier	fullset		1101948	1					
ANR	1102019	Argument	linux_sig_coredump		1101948	2					
ANR	1102020	Identifier	linux_sig_coredump		1101948	0					
ANR	1102021	ExpressionStatement	"install_sig_handler_with_mask ( SIGFPE , & fullset , linux_sig_coredump )"	732:3:19167:19234	1101948	6	True				
ANR	1102022	CallExpression	"install_sig_handler_with_mask ( SIGFPE , & fullset , linux_sig_coredump )"		1101948	0					
ANR	1102023	Callee	install_sig_handler_with_mask		1101948	0					
ANR	1102024	Identifier	install_sig_handler_with_mask		1101948	0					
ANR	1102025	ArgumentList	SIGFPE		1101948	1					
ANR	1102026	Argument	SIGFPE		1101948	0					
ANR	1102027	Identifier	SIGFPE		1101948	0					
ANR	1102028	Argument	& fullset		1101948	1					
ANR	1102029	UnaryOperationExpression	& fullset		1101948	0					
ANR	1102030	UnaryOperator	&		1101948	0					
ANR	1102031	Identifier	fullset		1101948	1					
ANR	1102032	Argument	linux_sig_coredump		1101948	2					
ANR	1102033	Identifier	linux_sig_coredump		1101948	0					
ANR	1102034	ExpressionStatement	"install_sig_handler_with_mask ( SIGBUS , & fullset , linux_sig_coredump )"	733:3:19239:19306	1101948	7	True				
ANR	1102035	CallExpression	"install_sig_handler_with_mask ( SIGBUS , & fullset , linux_sig_coredump )"		1101948	0					
ANR	1102036	Callee	install_sig_handler_with_mask		1101948	0					
ANR	1102037	Identifier	install_sig_handler_with_mask		1101948	0					
ANR	1102038	ArgumentList	SIGBUS		1101948	1					
ANR	1102039	Argument	SIGBUS		1101948	0					
ANR	1102040	Identifier	SIGBUS		1101948	0					
ANR	1102041	Argument	& fullset		1101948	1					
ANR	1102042	UnaryOperationExpression	& fullset		1101948	0					
ANR	1102043	UnaryOperator	&		1101948	0					
ANR	1102044	Identifier	fullset		1101948	1					
ANR	1102045	Argument	linux_sig_coredump		1101948	2					
ANR	1102046	Identifier	linux_sig_coredump		1101948	0					
ANR	1102047	Statement	endif	735:2:19314:19318	1101948	1	True				
ANR	1102048	ReturnType	void		1101948	1					
ANR	1102049	Identifier	install_core_dump_handler		1101948	2					
ANR	1102050	ParameterList			1101948	3					
ANR	1102051	CFGEntryNode	ENTRY		1101948		True				
ANR	1102052	CFGExitNode	EXIT		1101948		True				
ANR	1102053	Symbol	SIGILL		1101948						
ANR	1102054	Symbol	linux_sig_coredump		1101948						
ANR	1102055	Symbol	getuid		1101948						
ANR	1102056	Symbol	SIGFPE		1101948						
ANR	1102057	Symbol	fullset		1101948						
ANR	1102058	Symbol	SIGSEGV		1101948						
ANR	1102059	Symbol	SIGBUS		1101948						
ANR	1102060	Symbol	D_FULLDEBUG		1101948						
ANR	1102061	Symbol	SIGABRT		1101948						
ANR	1102062	Symbol	& fullset		1101948						
ANR	1102063	Function	drop_core_in_log	738:0:19355:20822							
ANR	1102064	FunctionDef	drop_core_in_log ()		1102063	0					
ANR	1102065	CompoundStatement		740:0:19385:20822	1102063	0					
ANR	1102066	IdentifierDeclStatement	"char * ptmp = param ( ""LOG"" ) ;"	745:1:19580:19605	1102063	0	True				
ANR	1102067	IdentifierDecl	"* ptmp = param ( ""LOG"" )"		1102063	0					
ANR	1102068	IdentifierDeclType	char *		1102063	0					
ANR	1102069	Identifier	ptmp		1102063	1					
ANR	1102070	AssignmentExpression	"* ptmp = param ( ""LOG"" )"		1102063	2		=			
ANR	1102071	Identifier	ptmp		1102063	0					
ANR	1102072	CallExpression	"param ( ""LOG"" )"		1102063	1					
ANR	1102073	Callee	param		1102063	0					
ANR	1102074	Identifier	param		1102063	0					
ANR	1102075	ArgumentList	"""LOG"""		1102063	1					
ANR	1102076	Argument	"""LOG"""		1102063	0					
ANR	1102077	PrimaryExpression	"""LOG"""		1102063	0					
ANR	1102078	IfStatement	if ( ptmp )		1102063	1					
ANR	1102079	Condition	ptmp	746:6:19613:19616	1102063	0	True				
ANR	1102080	Identifier	ptmp		1102063	0					
ANR	1102081	CompoundStatement		7:13:234:234	1102063	1					
ANR	1102082	IfStatement	if ( chdir ( ptmp ) < 0 )		1102063	0					
ANR	1102083	Condition	chdir ( ptmp ) < 0	747:7:19629:19643	1102063	0	True				
ANR	1102084	RelationalExpression	chdir ( ptmp ) < 0		1102063	0		<			
ANR	1102085	CallExpression	chdir ( ptmp )		1102063	0					
ANR	1102086	Callee	chdir		1102063	0					
ANR	1102087	Identifier	chdir		1102063	0					
ANR	1102088	ArgumentList	ptmp		1102063	1					
ANR	1102089	Argument	ptmp		1102063	0					
ANR	1102090	Identifier	ptmp		1102063	0					
ANR	1102091	PrimaryExpression	0		1102063	1					
ANR	1102092	CompoundStatement		8:25:261:261	1102063	1					
ANR	1102093	IfStatement	"if ( MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		1102063	0					
ANR	1102094	Condition	"MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"	749:7:19669:19722	1102063	0	True				
ANR	1102095	EqualityExpression	"MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		1102063	0		==			
ANR	1102096	Identifier	MATCH		1102063	0					
ANR	1102097	CallExpression	"strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		1102063	1					
ANR	1102098	Callee	strcmpi		1102063	0					
ANR	1102099	Identifier	strcmpi		1102063	0					
ANR	1102100	ArgumentList	get_mySubSystem ( ) -> getName ( )		1102063	1					
ANR	1102101	Argument	get_mySubSystem ( ) -> getName ( )		1102063	0					
ANR	1102102	CallExpression	get_mySubSystem ( ) -> getName ( )		1102063	0					
ANR	1102103	Callee	get_mySubSystem ( ) -> getName		1102063	0					
ANR	1102104	PtrMemberAccess	get_mySubSystem ( ) -> getName		1102063	0					
ANR	1102105	CallExpression	get_mySubSystem ( )		1102063	0					
ANR	1102106	Callee	get_mySubSystem		1102063	0					
ANR	1102107	Identifier	get_mySubSystem		1102063	0					
ANR	1102108	ArgumentList			1102063	1					
ANR	1102109	Identifier	getName		1102063	1					
ANR	1102110	ArgumentList			1102063	1					
ANR	1102111	Argument	"""KBDD"""		1102063	1					
ANR	1102112	PrimaryExpression	"""KBDD"""		1102063	0					
ANR	1102113	CompoundStatement		10:63:339:339	1102063	1					
ANR	1102114	Statement	dprintf	750:4:19731:19737	1102063	0	True				
ANR	1102115	Statement	(	750:12:19739:19739	1102063	1	True				
ANR	1102116	Statement	D_FULLDEBUG	750:13:19740:19750	1102063	2	True				
ANR	1102117	Statement	","	750:24:19751:19751	1102063	3	True				
ANR	1102118	Statement	"""chdir() to LOG directory failed for KBDD, """	750:26:19753:19796	1102063	4	True				
ANR	1102119	Statement	"""cannot drop core in LOG dir\\n"""	751:10:19808:19838	1102063	5	True				
ANR	1102120	Statement	)	751:41:19839:19839	1102063	6	True				
ANR	1102121	ExpressionStatement		751:42:19840:19840	1102063	7	True				
ANR	1102122	ReturnStatement	return ;	752:4:19846:19852	1102063	8	True				
ANR	1102123	ExpressionStatement	"EXCEPT ( ""cannot chdir to dir <%s>"" , ptmp )"	755:5:19871:19910	1102063	1	True				
ANR	1102124	CallExpression	"EXCEPT ( ""cannot chdir to dir <%s>"" , ptmp )"		1102063	0					
ANR	1102125	Callee	EXCEPT		1102063	0					
ANR	1102126	Identifier	EXCEPT		1102063	0					
ANR	1102127	ArgumentList	"""cannot chdir to dir <%s>"""		1102063	1					
ANR	1102128	Argument	"""cannot chdir to dir <%s>"""		1102063	0					
ANR	1102129	PrimaryExpression	"""cannot chdir to dir <%s>"""		1102063	0					
ANR	1102130	Argument	ptmp		1102063	1					
ANR	1102131	Identifier	ptmp		1102063	0					
ANR	1102132	ElseStatement	else		1102063	0					
ANR	1102133	CompoundStatement		18:8:538:538	1102063	0					
ANR	1102134	Statement	dprintf	758:2:19928:19934	1102063	0	True				
ANR	1102135	Statement	(	758:9:19935:19935	1102063	1	True				
ANR	1102136	Statement	D_FULLDEBUG	758:11:19937:19947	1102063	2	True				
ANR	1102137	Statement	","	758:22:19948:19948	1102063	3	True				
ANR	1102138	Statement	"""No LOG directory specified in config file(s), """	759:5:19956:20003	1102063	4	True				
ANR	1102139	Statement	"""not calling chdir()\\n"""	760:5:20010:20032	1102063	5	True				
ANR	1102140	Statement	)	760:29:20034:20034	1102063	6	True				
ANR	1102141	ExpressionStatement		760:30:20035:20035	1102063	7	True				
ANR	1102142	ReturnStatement	return ;	761:2:20039:20045	1102063	8	True				
ANR	1102143	IfStatement	if ( core_dir )		1102063	2					
ANR	1102144	Condition	core_dir	764:6:20057:20064	1102063	0	True				
ANR	1102145	Identifier	core_dir		1102063	0					
ANR	1102146	CompoundStatement		25:17:682:682	1102063	1					
ANR	1102147	ExpressionStatement	free ( core_dir )	765:2:20072:20088	1102063	0	True				
ANR	1102148	CallExpression	free ( core_dir )		1102063	0					
ANR	1102149	Callee	free		1102063	0					
ANR	1102150	Identifier	free		1102063	0					
ANR	1102151	ArgumentList	core_dir		1102063	1					
ANR	1102152	Argument	core_dir		1102063	0					
ANR	1102153	Identifier	core_dir		1102063	0					
ANR	1102154	ExpressionStatement	core_dir = NULL	766:2:20092:20107	1102063	1	True				
ANR	1102155	AssignmentExpression	core_dir = NULL		1102063	0		=			
ANR	1102156	Identifier	core_dir		1102063	0					
ANR	1102157	Identifier	NULL		1102063	1					
ANR	1102158	ExpressionStatement	core_dir = strdup ( ptmp )	768:1:20113:20136	1102063	3	True				
ANR	1102159	AssignmentExpression	core_dir = strdup ( ptmp )		1102063	0		=			
ANR	1102160	Identifier	core_dir		1102063	0					
ANR	1102161	CallExpression	strdup ( ptmp )		1102063	1					
ANR	1102162	Callee	strdup		1102063	0					
ANR	1102163	Identifier	strdup		1102063	0					
ANR	1102164	ArgumentList	ptmp		1102063	1					
ANR	1102165	Argument	ptmp		1102063	0					
ANR	1102166	Identifier	ptmp		1102063	0					
ANR	1102167	ExpressionStatement	install_core_dump_handler ( )	772:1:20220:20247	1102063	4	True				
ANR	1102168	CallExpression	install_core_dump_handler ( )		1102063	0					
ANR	1102169	Callee	install_core_dump_handler		1102063	0					
ANR	1102170	Identifier	install_core_dump_handler		1102063	0					
ANR	1102171	ArgumentList			1102063	1					
ANR	1102172	CompoundStatement		45:2:1215:1243	1102063	5					
ANR	1102173	IdentifierDeclStatement	char pseudoCoreFileName [ MAX_PATH ] ;	777:2:20335:20368	1102063	0	True				
ANR	1102174	IdentifierDecl	pseudoCoreFileName [ MAX_PATH ]		1102063	0					
ANR	1102175	IdentifierDeclType	char [ MAX_PATH ]		1102063	0					
ANR	1102176	Identifier	pseudoCoreFileName		1102063	1					
ANR	1102177	Identifier	MAX_PATH		1102063	2					
ANR	1102178	ExpressionStatement	"sprintf ( pseudoCoreFileName , ""%s\\\\core.%s.WIN32"" , ptmp , get_mySubSystem ( ) -> getName ( ) )"	778:2:20372:20459	1102063	1	True				
ANR	1102179	CallExpression	"sprintf ( pseudoCoreFileName , ""%s\\\\core.%s.WIN32"" , ptmp , get_mySubSystem ( ) -> getName ( ) )"		1102063	0					
ANR	1102180	Callee	sprintf		1102063	0					
ANR	1102181	Identifier	sprintf		1102063	0					
ANR	1102182	ArgumentList	pseudoCoreFileName		1102063	1					
ANR	1102183	Argument	pseudoCoreFileName		1102063	0					
ANR	1102184	Identifier	pseudoCoreFileName		1102063	0					
ANR	1102185	Argument	"""%s\\\\core.%s.WIN32"""		1102063	1					
ANR	1102186	PrimaryExpression	"""%s\\\\core.%s.WIN32"""		1102063	0					
ANR	1102187	Argument	ptmp		1102063	2					
ANR	1102188	Identifier	ptmp		1102063	0					
ANR	1102189	Argument	get_mySubSystem ( ) -> getName ( )		1102063	3					
ANR	1102190	CallExpression	get_mySubSystem ( ) -> getName ( )		1102063	0					
ANR	1102191	Callee	get_mySubSystem ( ) -> getName		1102063	0					
ANR	1102192	PtrMemberAccess	get_mySubSystem ( ) -> getName		1102063	0					
ANR	1102193	CallExpression	get_mySubSystem ( )		1102063	0					
ANR	1102194	Callee	get_mySubSystem		1102063	0					
ANR	1102195	Identifier	get_mySubSystem		1102063	0					
ANR	1102196	ArgumentList			1102063	1					
ANR	1102197	Identifier	getName		1102063	1					
ANR	1102198	ArgumentList			1102063	1					
ANR	1102199	ExpressionStatement	g_ExceptionHandler . SetLogFileName ( pseudoCoreFileName )	780:2:20463:20516	1102063	2	True				
ANR	1102200	CallExpression	g_ExceptionHandler . SetLogFileName ( pseudoCoreFileName )		1102063	0					
ANR	1102201	Callee	g_ExceptionHandler . SetLogFileName		1102063	0					
ANR	1102202	MemberAccess	g_ExceptionHandler . SetLogFileName		1102063	0					
ANR	1102203	Identifier	g_ExceptionHandler		1102063	0					
ANR	1102204	Identifier	SetLogFileName		1102063	1					
ANR	1102205	ArgumentList	pseudoCoreFileName		1102063	1					
ANR	1102206	Argument	pseudoCoreFileName		1102063	0					
ANR	1102207	Identifier	pseudoCoreFileName		1102063	0					
ANR	1102208	IdentifierDeclStatement	"char * binpath = param ( ""BIN"" ) ;"	784:2:20601:20629	1102063	3	True				
ANR	1102209	IdentifierDecl	"* binpath = param ( ""BIN"" )"		1102063	0					
ANR	1102210	IdentifierDeclType	char *		1102063	0					
ANR	1102211	Identifier	binpath		1102063	1					
ANR	1102212	AssignmentExpression	"* binpath = param ( ""BIN"" )"		1102063	2		=			
ANR	1102213	Identifier	binpath		1102063	0					
ANR	1102214	CallExpression	"param ( ""BIN"" )"		1102063	1					
ANR	1102215	Callee	param		1102063	0					
ANR	1102216	Identifier	param		1102063	0					
ANR	1102217	ArgumentList	"""BIN"""		1102063	1					
ANR	1102218	Argument	"""BIN"""		1102063	0					
ANR	1102219	PrimaryExpression	"""BIN"""		1102063	0					
ANR	1102220	IfStatement	if ( binpath )		1102063	4					
ANR	1102221	Condition	binpath	785:7:20638:20644	1102063	0	True				
ANR	1102222	Identifier	binpath		1102063	0					
ANR	1102223	CompoundStatement		46:17:1262:1262	1102063	1					
ANR	1102224	ExpressionStatement	"SetEnv ( ""_NT_SYMBOL_PATH"" , binpath )"	786:3:20653:20689	1102063	0	True				
ANR	1102225	CallExpression	"SetEnv ( ""_NT_SYMBOL_PATH"" , binpath )"		1102063	0					
ANR	1102226	Callee	SetEnv		1102063	0					
ANR	1102227	Identifier	SetEnv		1102063	0					
ANR	1102228	ArgumentList	"""_NT_SYMBOL_PATH"""		1102063	1					
ANR	1102229	Argument	"""_NT_SYMBOL_PATH"""		1102063	0					
ANR	1102230	PrimaryExpression	"""_NT_SYMBOL_PATH"""		1102063	0					
ANR	1102231	Argument	binpath		1102063	1					
ANR	1102232	Identifier	binpath		1102063	0					
ANR	1102233	ExpressionStatement	free ( binpath )	787:3:20694:20707	1102063	1	True				
ANR	1102234	CallExpression	free ( binpath )		1102063	0					
ANR	1102235	Callee	free		1102063	0					
ANR	1102236	Identifier	free		1102063	0					
ANR	1102237	ArgumentList	binpath		1102063	1					
ANR	1102238	Argument	binpath		1102063	0					
ANR	1102239	Identifier	binpath		1102063	0					
ANR	1102240	ExpressionStatement	g_ExceptionHandler . SetPID ( daemonCore -> getpid ( ) )	791:2:20746:20797	1102063	5	True				
ANR	1102241	CallExpression	g_ExceptionHandler . SetPID ( daemonCore -> getpid ( ) )		1102063	0					
ANR	1102242	Callee	g_ExceptionHandler . SetPID		1102063	0					
ANR	1102243	MemberAccess	g_ExceptionHandler . SetPID		1102063	0					
ANR	1102244	Identifier	g_ExceptionHandler		1102063	0					
ANR	1102245	Identifier	SetPID		1102063	1					
ANR	1102246	ArgumentList	daemonCore -> getpid ( )		1102063	1					
ANR	1102247	Argument	daemonCore -> getpid ( )		1102063	0					
ANR	1102248	CallExpression	daemonCore -> getpid ( )		1102063	0					
ANR	1102249	Callee	daemonCore -> getpid		1102063	0					
ANR	1102250	PtrMemberAccess	daemonCore -> getpid		1102063	0					
ANR	1102251	Identifier	daemonCore		1102063	0					
ANR	1102252	Identifier	getpid		1102063	1					
ANR	1102253	ArgumentList			1102063	1					
ANR	1102254	ExpressionStatement	free ( ptmp )	794:1:20810:20820	1102063	6	True				
ANR	1102255	CallExpression	free ( ptmp )		1102063	0					
ANR	1102256	Callee	free		1102063	0					
ANR	1102257	Identifier	free		1102063	0					
ANR	1102258	ArgumentList	ptmp		1102063	1					
ANR	1102259	Argument	ptmp		1102063	0					
ANR	1102260	Identifier	ptmp		1102063	0					
ANR	1102261	ReturnType	void		1102063	1					
ANR	1102262	Identifier	drop_core_in_log		1102063	2					
ANR	1102263	ParameterList			1102063	3					
ANR	1102264	CFGEntryNode	ENTRY		1102063		True				
ANR	1102265	CFGExitNode	EXIT		1102063		True				
ANR	1102266	Symbol	pseudoCoreFileName		1102063						
ANR	1102267	Symbol	core_dir		1102063						
ANR	1102268	Symbol	NULL		1102063						
ANR	1102269	Symbol	get_mySubSystem ( ) -> getName		1102063						
ANR	1102270	Symbol	* get_mySubSystem		1102063						
ANR	1102271	Symbol	strcmpi		1102063						
ANR	1102272	Symbol	daemonCore -> getpid		1102063						
ANR	1102273	Symbol	chdir		1102063						
ANR	1102274	Symbol	ptmp		1102063						
ANR	1102275	Symbol	param		1102063						
ANR	1102276	Symbol	g_ExceptionHandler		1102063						
ANR	1102277	Symbol	* daemonCore		1102063						
ANR	1102278	Symbol	daemonCore		1102063						
ANR	1102279	Symbol	strdup		1102063						
ANR	1102280	Symbol	get_mySubSystem		1102063						
ANR	1102281	Symbol	MATCH		1102063						
ANR	1102282	Symbol	binpath		1102063						
ANR	1102283	Function	check_core_files	804:0:21210:21862							
ANR	1102284	FunctionDef	check_core_files ()		1102283	0					
ANR	1102285	CompoundStatement		806:0:21234:21862	1102283	0					
ANR	1102286	IdentifierDeclStatement	"bool want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true ) ;"	807:1:21237:21311	1102283	0	True				
ANR	1102287	IdentifierDecl	"want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		1102283	0					
ANR	1102288	IdentifierDeclType	bool		1102283	0					
ANR	1102289	Identifier	want_set_error_mode		1102283	1					
ANR	1102290	AssignmentExpression	"want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		1102283	2		=			
ANR	1102291	Identifier	want_set_error_mode		1102283	0					
ANR	1102292	CallExpression	"param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		1102283	1					
ANR	1102293	Callee	param_boolean_crufty		1102283	0					
ANR	1102294	Identifier	param_boolean_crufty		1102283	0					
ANR	1102295	ArgumentList	"""CREATE_CORE_FILES"""		1102283	1					
ANR	1102296	Argument	"""CREATE_CORE_FILES"""		1102283	0					
ANR	1102297	PrimaryExpression	"""CREATE_CORE_FILES"""		1102283	0					
ANR	1102298	Argument	true		1102283	1					
ANR	1102299	Identifier	true		1102283	0					
ANR	1102300	IfStatement	if ( want_set_error_mode )		1102283	1					
ANR	1102301	Condition	want_set_error_mode	810:5:21333:21351	1102283	0	True				
ANR	1102302	Identifier	want_set_error_mode		1102283	0					
ANR	1102303	CompoundStatement		5:27:120:120	1102283	1					
ANR	1102304	ExpressionStatement	"limit ( RLIMIT_CORE , RLIM_INFINITY , CONDOR_SOFT_LIMIT , ""max core size"" )"	811:2:21359:21429	1102283	0	True				
ANR	1102305	CallExpression	"limit ( RLIMIT_CORE , RLIM_INFINITY , CONDOR_SOFT_LIMIT , ""max core size"" )"		1102283	0					
ANR	1102306	Callee	limit		1102283	0					
ANR	1102307	Identifier	limit		1102283	0					
ANR	1102308	ArgumentList	RLIMIT_CORE		1102283	1					
ANR	1102309	Argument	RLIMIT_CORE		1102283	0					
ANR	1102310	Identifier	RLIMIT_CORE		1102283	0					
ANR	1102311	Argument	RLIM_INFINITY		1102283	1					
ANR	1102312	Identifier	RLIM_INFINITY		1102283	0					
ANR	1102313	Argument	CONDOR_SOFT_LIMIT		1102283	2					
ANR	1102314	Identifier	CONDOR_SOFT_LIMIT		1102283	0					
ANR	1102315	Argument	"""max core size"""		1102283	3					
ANR	1102316	PrimaryExpression	"""max core size"""		1102283	0					
ANR	1102317	ElseStatement	else		1102283	0					
ANR	1102318	CompoundStatement		7:8:204:204	1102283	0					
ANR	1102319	ExpressionStatement	"limit ( RLIMIT_CORE , 0 , CONDOR_SOFT_LIMIT , ""max core size"" )"	813:2:21443:21501	1102283	0	True				
ANR	1102320	CallExpression	"limit ( RLIMIT_CORE , 0 , CONDOR_SOFT_LIMIT , ""max core size"" )"		1102283	0					
ANR	1102321	Callee	limit		1102283	0					
ANR	1102322	Identifier	limit		1102283	0					
ANR	1102323	ArgumentList	RLIMIT_CORE		1102283	1					
ANR	1102324	Argument	RLIMIT_CORE		1102283	0					
ANR	1102325	Identifier	RLIMIT_CORE		1102283	0					
ANR	1102326	Argument	0		1102283	1					
ANR	1102327	PrimaryExpression	0		1102283	0					
ANR	1102328	Argument	CONDOR_SOFT_LIMIT		1102283	2					
ANR	1102329	Identifier	CONDOR_SOFT_LIMIT		1102283	0					
ANR	1102330	Argument	"""max core size"""		1102283	3					
ANR	1102331	PrimaryExpression	"""max core size"""		1102283	0					
ANR	1102332	IfStatement	if ( want_set_error_mode )		1102283	2					
ANR	1102333	Condition	want_set_error_mode	820:6:21634:21652	1102283	0	True				
ANR	1102334	Identifier	want_set_error_mode		1102283	0					
ANR	1102335	CompoundStatement		15:28:421:421	1102283	1					
ANR	1102336	Statement	::	821:2:21660:21661	1102283	0	True				
ANR	1102337	ExpressionStatement	SetErrorMode ( SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX )	821:4:21662:21753	1102283	1	True				
ANR	1102338	CallExpression	SetErrorMode ( SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX )		1102283	0					
ANR	1102339	Callee	SetErrorMode		1102283	0					
ANR	1102340	Identifier	SetErrorMode		1102283	0					
ANR	1102341	ArgumentList	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		1102283	1					
ANR	1102342	Argument	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		1102283	0					
ANR	1102343	InclusiveOrExpression	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		1102283	0		|			
ANR	1102344	Identifier	SEM_NOGPFAULTERRORBOX		1102283	0					
ANR	1102345	InclusiveOrExpression	SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		1102283	1		|			
ANR	1102346	Identifier	SEM_FAILCRITICALERRORS		1102283	0					
ANR	1102347	Identifier	SEM_NOOPENFILEERRORBOX		1102283	1					
ANR	1102348	ExpressionStatement	g_ExceptionHandler . TurnOn ( )	823:2:21757:21784	1102283	2	True				
ANR	1102349	CallExpression	g_ExceptionHandler . TurnOn ( )		1102283	0					
ANR	1102350	Callee	g_ExceptionHandler . TurnOn		1102283	0					
ANR	1102351	MemberAccess	g_ExceptionHandler . TurnOn		1102283	0					
ANR	1102352	Identifier	g_ExceptionHandler		1102283	0					
ANR	1102353	Identifier	TurnOn		1102283	1					
ANR	1102354	ArgumentList			1102283	1					
ANR	1102355	ElseStatement	else		1102283	0					
ANR	1102356	CompoundStatement		19:8:559:559	1102283	0					
ANR	1102357	Statement	::	825:2:21798:21799	1102283	0	True				
ANR	1102358	ExpressionStatement	SetErrorMode ( 0 )	825:4:21800:21817	1102283	1	True				
ANR	1102359	CallExpression	SetErrorMode ( 0 )		1102283	0					
ANR	1102360	Callee	SetErrorMode		1102283	0					
ANR	1102361	Identifier	SetErrorMode		1102283	0					
ANR	1102362	ArgumentList	0		1102283	1					
ANR	1102363	Argument	0		1102283	0					
ANR	1102364	PrimaryExpression	0		1102283	0					
ANR	1102365	ExpressionStatement	g_ExceptionHandler . TurnOff ( )	826:2:21821:21849	1102283	2	True				
ANR	1102366	CallExpression	g_ExceptionHandler . TurnOff ( )		1102283	0					
ANR	1102367	Callee	g_ExceptionHandler . TurnOff		1102283	0					
ANR	1102368	MemberAccess	g_ExceptionHandler . TurnOff		1102283	0					
ANR	1102369	Identifier	g_ExceptionHandler		1102283	0					
ANR	1102370	Identifier	TurnOff		1102283	1					
ANR	1102371	ArgumentList			1102283	1					
ANR	1102372	ReturnType	void		1102283	1					
ANR	1102373	Identifier	check_core_files		1102283	2					
ANR	1102374	ParameterList			1102283	3					
ANR	1102375	CFGEntryNode	ENTRY		1102283		True				
ANR	1102376	CFGExitNode	EXIT		1102283		True				
ANR	1102377	Symbol	RLIMIT_CORE		1102283						
ANR	1102378	Symbol	SEM_FAILCRITICALERRORS		1102283						
ANR	1102379	Symbol	SEM_NOGPFAULTERRORBOX		1102283						
ANR	1102380	Symbol	SEM_NOOPENFILEERRORBOX		1102283						
ANR	1102381	Symbol	g_ExceptionHandler		1102283						
ANR	1102382	Symbol	want_set_error_mode		1102283						
ANR	1102383	Symbol	true		1102283						
ANR	1102384	Symbol	param_boolean_crufty		1102283						
ANR	1102385	Symbol	RLIM_INFINITY		1102283						
ANR	1102386	Symbol	CONDOR_SOFT_LIMIT		1102283						
ANR	1102387	DeclStmt									
ANR	1102388	Decl							char	char *	name
ANR	1102389	DeclStmt									
ANR	1102390	Decl							int	int	total_bytes
ANR	1102391	DeclStmt									
ANR	1102392	Decl							int	int	result
ANR	1102393	DeclStmt									
ANR	1102394	Decl							int	int	type
ANR	1102395	DeclStmt									
ANR	1102396	Decl							char	char *	pname
ANR	1102397	DeclStmt									
ANR	1102398	Decl							char	char *	ext
ANR	1102399	DeclStmt									
ANR	1102400	Decl							char	char *	filename
ANR	1102401	DeclStmt									
ANR	1102402	Decl							MyString	MyString	full_filename
ANR	1102403	DeclStmt									
ANR	1102404	Decl							int	int	fd
ANR	1102405	DeclStmt									
ANR	1102406	Decl							filesize_t	filesize_t	size
ANR	1102407	Function	handle_fetch_log_history	1014:0:26361:27432							
ANR	1102408	FunctionDef	"handle_fetch_log_history (ReliSock * stream , char * name)"		1102407	0					
ANR	1102409	CompoundStatement		1015:55:26420:27432	1102407	0					
ANR	1102410	IdentifierDeclStatement	int result = DC_FETCH_LOG_RESULT_BAD_TYPE ;	1016:1:26423:26464	1102407	0	True				
ANR	1102411	IdentifierDecl	result = DC_FETCH_LOG_RESULT_BAD_TYPE		1102407	0					
ANR	1102412	IdentifierDeclType	int		1102407	0					
ANR	1102413	Identifier	result		1102407	1					
ANR	1102414	AssignmentExpression	result = DC_FETCH_LOG_RESULT_BAD_TYPE		1102407	2		=			
ANR	1102415	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		1102407	0					
ANR	1102416	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		1102407	1					
ANR	1102417	IdentifierDeclStatement	"const char * history_file_param = ""HISTORY"" ;"	1018:1:26468:26510	1102407	1	True				
ANR	1102418	IdentifierDecl	"* history_file_param = ""HISTORY"""		1102407	0					
ANR	1102419	IdentifierDeclType	const char *		1102407	0					
ANR	1102420	Identifier	history_file_param		1102407	1					
ANR	1102421	AssignmentExpression	"* history_file_param = ""HISTORY"""		1102407	2		=			
ANR	1102422	Identifier	history_file_param		1102407	0					
ANR	1102423	PrimaryExpression	"""HISTORY"""		1102407	1					
ANR	1102424	IfStatement	"if ( strcmp ( name , ""STARTD_HISTORY"" ) == 0 )"		1102407	2					
ANR	1102425	Condition	"strcmp ( name , ""STARTD_HISTORY"" ) == 0"	1019:5:26517:26551	1102407	0	True				
ANR	1102426	EqualityExpression	"strcmp ( name , ""STARTD_HISTORY"" ) == 0"		1102407	0		==			
ANR	1102427	CallExpression	"strcmp ( name , ""STARTD_HISTORY"" )"		1102407	0					
ANR	1102428	Callee	strcmp		1102407	0					
ANR	1102429	Identifier	strcmp		1102407	0					
ANR	1102430	ArgumentList	name		1102407	1					
ANR	1102431	Argument	name		1102407	0					
ANR	1102432	Identifier	name		1102407	0					
ANR	1102433	Argument	"""STARTD_HISTORY"""		1102407	1					
ANR	1102434	PrimaryExpression	"""STARTD_HISTORY"""		1102407	0					
ANR	1102435	PrimaryExpression	0		1102407	1					
ANR	1102436	CompoundStatement		5:42:133:133	1102407	1					
ANR	1102437	ExpressionStatement	"history_file_param = ""STARTD_HISTORY"""	1020:2:26558:26595	1102407	0	True				
ANR	1102438	AssignmentExpression	"history_file_param = ""STARTD_HISTORY"""		1102407	0		=			
ANR	1102439	Identifier	history_file_param		1102407	0					
ANR	1102440	PrimaryExpression	"""STARTD_HISTORY"""		1102407	1					
ANR	1102441	ExpressionStatement	free ( name )	1023:1:26602:26612	1102407	3	True				
ANR	1102442	CallExpression	free ( name )		1102407	0					
ANR	1102443	Callee	free		1102407	0					
ANR	1102444	Identifier	free		1102407	0					
ANR	1102445	ArgumentList	name		1102407	1					
ANR	1102446	Argument	name		1102407	0					
ANR	1102447	Identifier	name		1102407	0					
ANR	1102448	IdentifierDeclStatement	char * history_file = param ( history_file_param ) ;	1024:1:26615:26661	1102407	4	True				
ANR	1102449	IdentifierDecl	* history_file = param ( history_file_param )		1102407	0					
ANR	1102450	IdentifierDeclType	char *		1102407	0					
ANR	1102451	Identifier	history_file		1102407	1					
ANR	1102452	AssignmentExpression	* history_file = param ( history_file_param )		1102407	2		=			
ANR	1102453	Identifier	history_file		1102407	0					
ANR	1102454	CallExpression	param ( history_file_param )		1102407	1					
ANR	1102455	Callee	param		1102407	0					
ANR	1102456	Identifier	param		1102407	0					
ANR	1102457	ArgumentList	history_file_param		1102407	1					
ANR	1102458	Argument	history_file_param		1102407	0					
ANR	1102459	Identifier	history_file_param		1102407	0					
ANR	1102460	IfStatement	if ( ! history_file )		1102407	5					
ANR	1102461	Condition	! history_file	1026:5:26669:26681	1102407	0	True				
ANR	1102462	UnaryOperationExpression	! history_file		1102407	0					
ANR	1102463	UnaryOperator	!		1102407	0					
ANR	1102464	Identifier	history_file		1102407	1					
ANR	1102465	CompoundStatement		12:20:263:263	1102407	1					
ANR	1102466	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"" , history_file_param )"	1027:2:26688:26791	1102407	0	True				
ANR	1102467	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"" , history_file_param )"		1102407	0					
ANR	1102468	Callee	dprintf		1102407	0					
ANR	1102469	Identifier	dprintf		1102407	0					
ANR	1102470	ArgumentList	D_ALWAYS		1102407	1					
ANR	1102471	Argument	D_ALWAYS		1102407	0					
ANR	1102472	Identifier	D_ALWAYS		1102407	0					
ANR	1102473	Argument	"""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"""		1102407	1					
ANR	1102474	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"""		1102407	0					
ANR	1102475	Argument	history_file_param		1102407	2					
ANR	1102476	Identifier	history_file_param		1102407	0					
ANR	1102477	ExpressionStatement	stream -> code ( result )	1028:2:26795:26815	1102407	1	True				
ANR	1102478	CallExpression	stream -> code ( result )		1102407	0					
ANR	1102479	Callee	stream -> code		1102407	0					
ANR	1102480	PtrMemberAccess	stream -> code		1102407	0					
ANR	1102481	Identifier	stream		1102407	0					
ANR	1102482	Identifier	code		1102407	1					
ANR	1102483	ArgumentList	result		1102407	1					
ANR	1102484	Argument	result		1102407	0					
ANR	1102485	Identifier	result		1102407	0					
ANR	1102486	ExpressionStatement	stream -> end_of_message ( )	1029:2:26819:26843	1102407	2	True				
ANR	1102487	CallExpression	stream -> end_of_message ( )		1102407	0					
ANR	1102488	Callee	stream -> end_of_message		1102407	0					
ANR	1102489	PtrMemberAccess	stream -> end_of_message		1102407	0					
ANR	1102490	Identifier	stream		1102407	0					
ANR	1102491	Identifier	end_of_message		1102407	1					
ANR	1102492	ArgumentList			1102407	1					
ANR	1102493	ReturnStatement	return FALSE ;	1030:2:26847:26859	1102407	3	True				
ANR	1102494	Identifier	FALSE		1102407	0					
ANR	1102495	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( history_file , O_RDONLY ) ;"	1032:1:26865:26921	1102407	6	True				
ANR	1102496	IdentifierDecl	"fd = safe_open_wrapper_follow ( history_file , O_RDONLY )"		1102407	0					
ANR	1102497	IdentifierDeclType	int		1102407	0					
ANR	1102498	Identifier	fd		1102407	1					
ANR	1102499	AssignmentExpression	"fd = safe_open_wrapper_follow ( history_file , O_RDONLY )"		1102407	2		=			
ANR	1102500	Identifier	fd		1102407	0					
ANR	1102501	CallExpression	"safe_open_wrapper_follow ( history_file , O_RDONLY )"		1102407	1					
ANR	1102502	Callee	safe_open_wrapper_follow		1102407	0					
ANR	1102503	Identifier	safe_open_wrapper_follow		1102407	0					
ANR	1102504	ArgumentList	history_file		1102407	1					
ANR	1102505	Argument	history_file		1102407	0					
ANR	1102506	Identifier	history_file		1102407	0					
ANR	1102507	Argument	O_RDONLY		1102407	1					
ANR	1102508	Identifier	O_RDONLY		1102407	0					
ANR	1102509	ExpressionStatement	free ( history_file )	1033:1:26924:26942	1102407	7	True				
ANR	1102510	CallExpression	free ( history_file )		1102407	0					
ANR	1102511	Callee	free		1102407	0					
ANR	1102512	Identifier	free		1102407	0					
ANR	1102513	ArgumentList	history_file		1102407	1					
ANR	1102514	Argument	history_file		1102407	0					
ANR	1102515	Identifier	history_file		1102407	0					
ANR	1102516	IfStatement	if ( fd < 0 )		1102407	8					
ANR	1102517	Condition	fd < 0	1034:4:26948:26951	1102407	0	True				
ANR	1102518	RelationalExpression	fd < 0		1102407	0		<			
ANR	1102519	Identifier	fd		1102407	0					
ANR	1102520	PrimaryExpression	0		1102407	1					
ANR	1102521	CompoundStatement		20:10:533:533	1102407	1					
ANR	1102522	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: can't open history file\\n"" )"	1035:2:26958:27043	1102407	0	True				
ANR	1102523	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: can't open history file\\n"" )"		1102407	0					
ANR	1102524	Callee	dprintf		1102407	0					
ANR	1102525	Identifier	dprintf		1102407	0					
ANR	1102526	ArgumentList	D_ALWAYS		1102407	1					
ANR	1102527	Argument	D_ALWAYS		1102407	0					
ANR	1102528	Identifier	D_ALWAYS		1102407	0					
ANR	1102529	Argument	"""DaemonCore: handle_fetch_log_history: can't open history file\\n"""		1102407	1					
ANR	1102530	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: can't open history file\\n"""		1102407	0					
ANR	1102531	ExpressionStatement	result = DC_FETCH_LOG_RESULT_CANT_OPEN	1036:2:27047:27085	1102407	1	True				
ANR	1102532	AssignmentExpression	result = DC_FETCH_LOG_RESULT_CANT_OPEN		1102407	0		=			
ANR	1102533	Identifier	result		1102407	0					
ANR	1102534	Identifier	DC_FETCH_LOG_RESULT_CANT_OPEN		1102407	1					
ANR	1102535	ExpressionStatement	stream -> code ( result )	1037:2:27089:27109	1102407	2	True				
ANR	1102536	CallExpression	stream -> code ( result )		1102407	0					
ANR	1102537	Callee	stream -> code		1102407	0					
ANR	1102538	PtrMemberAccess	stream -> code		1102407	0					
ANR	1102539	Identifier	stream		1102407	0					
ANR	1102540	Identifier	code		1102407	1					
ANR	1102541	ArgumentList	result		1102407	1					
ANR	1102542	Argument	result		1102407	0					
ANR	1102543	Identifier	result		1102407	0					
ANR	1102544	ExpressionStatement	stream -> end_of_message ( )	1038:2:27113:27137	1102407	3	True				
ANR	1102545	CallExpression	stream -> end_of_message ( )		1102407	0					
ANR	1102546	Callee	stream -> end_of_message		1102407	0					
ANR	1102547	PtrMemberAccess	stream -> end_of_message		1102407	0					
ANR	1102548	Identifier	stream		1102407	0					
ANR	1102549	Identifier	end_of_message		1102407	1					
ANR	1102550	ArgumentList			1102407	1					
ANR	1102551	ReturnStatement	return FALSE ;	1039:2:27141:27153	1102407	4	True				
ANR	1102552	Identifier	FALSE		1102407	0					
ANR	1102553	ExpressionStatement	result = DC_FETCH_LOG_RESULT_SUCCESS	1042:1:27160:27196	1102407	9	True				
ANR	1102554	AssignmentExpression	result = DC_FETCH_LOG_RESULT_SUCCESS		1102407	0		=			
ANR	1102555	Identifier	result		1102407	0					
ANR	1102556	Identifier	DC_FETCH_LOG_RESULT_SUCCESS		1102407	1					
ANR	1102557	ExpressionStatement	stream -> code ( result )	1043:1:27199:27219	1102407	10	True				
ANR	1102558	CallExpression	stream -> code ( result )		1102407	0					
ANR	1102559	Callee	stream -> code		1102407	0					
ANR	1102560	PtrMemberAccess	stream -> code		1102407	0					
ANR	1102561	Identifier	stream		1102407	0					
ANR	1102562	Identifier	code		1102407	1					
ANR	1102563	ArgumentList	result		1102407	1					
ANR	1102564	Argument	result		1102407	0					
ANR	1102565	Identifier	result		1102407	0					
ANR	1102566	IdentifierDeclStatement	filesize_t size ;	1045:1:27223:27238	1102407	11	True				
ANR	1102567	IdentifierDecl	size		1102407	0					
ANR	1102568	IdentifierDeclType	filesize_t		1102407	0					
ANR	1102569	Identifier	size		1102407	1					
ANR	1102570	ExpressionStatement	"stream -> put_file ( & size , fd )"	1046:1:27241:27268	1102407	12	True				
ANR	1102571	CallExpression	"stream -> put_file ( & size , fd )"		1102407	0					
ANR	1102572	Callee	stream -> put_file		1102407	0					
ANR	1102573	PtrMemberAccess	stream -> put_file		1102407	0					
ANR	1102574	Identifier	stream		1102407	0					
ANR	1102575	Identifier	put_file		1102407	1					
ANR	1102576	ArgumentList	& size		1102407	1					
ANR	1102577	Argument	& size		1102407	0					
ANR	1102578	UnaryOperationExpression	& size		1102407	0					
ANR	1102579	UnaryOperator	&		1102407	0					
ANR	1102580	Identifier	size		1102407	1					
ANR	1102581	Argument	fd		1102407	1					
ANR	1102582	Identifier	fd		1102407	0					
ANR	1102583	ExpressionStatement	stream -> end_of_message ( )	1048:1:27272:27296	1102407	13	True				
ANR	1102584	CallExpression	stream -> end_of_message ( )		1102407	0					
ANR	1102585	Callee	stream -> end_of_message		1102407	0					
ANR	1102586	PtrMemberAccess	stream -> end_of_message		1102407	0					
ANR	1102587	Identifier	stream		1102407	0					
ANR	1102588	Identifier	end_of_message		1102407	1					
ANR	1102589	ArgumentList			1102407	1					
ANR	1102590	IfStatement	if ( size < 0 )		1102407	14					
ANR	1102591	Condition	size < 0	1050:4:27303:27308	1102407	0	True				
ANR	1102592	RelationalExpression	size < 0		1102407	0		<			
ANR	1102593	Identifier	size		1102407	0					
ANR	1102594	PrimaryExpression	0		1102407	1					
ANR	1102595	CompoundStatement		36:12:890:890	1102407	1					
ANR	1102596	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"" )"	1051:2:27315:27400	1102407	0	True				
ANR	1102597	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"" )"		1102407	0					
ANR	1102598	Callee	dprintf		1102407	0					
ANR	1102599	Identifier	dprintf		1102407	0					
ANR	1102600	ArgumentList	D_ALWAYS		1102407	1					
ANR	1102601	Argument	D_ALWAYS		1102407	0					
ANR	1102602	Identifier	D_ALWAYS		1102407	0					
ANR	1102603	Argument	"""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"""		1102407	1					
ANR	1102604	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"""		1102407	0					
ANR	1102605	ExpressionStatement	close ( fd )	1054:1:27407:27416	1102407	15	True				
ANR	1102606	CallExpression	close ( fd )		1102407	0					
ANR	1102607	Callee	close		1102407	0					
ANR	1102608	Identifier	close		1102407	0					
ANR	1102609	ArgumentList	fd		1102407	1					
ANR	1102610	Argument	fd		1102407	0					
ANR	1102611	Identifier	fd		1102407	0					
ANR	1102612	ReturnStatement	return TRUE ;	1055:1:27419:27430	1102407	16	True				
ANR	1102613	Identifier	TRUE		1102407	0					
ANR	1102614	ReturnType	int		1102407	1					
ANR	1102615	Identifier	handle_fetch_log_history		1102407	2					
ANR	1102616	ParameterList	"ReliSock * stream , char * name"		1102407	3					
ANR	1102617	Parameter	ReliSock * stream	1015:25:26390:26405	1102407	0	True				
ANR	1102618	ParameterType	ReliSock *		1102407	0					
ANR	1102619	Identifier	stream		1102407	1					
ANR	1102620	Parameter	char * name	1015:43:26408:26417	1102407	1	True				
ANR	1102621	ParameterType	char *		1102407	0					
ANR	1102622	Identifier	name		1102407	1					
ANR	1102623	CFGEntryNode	ENTRY		1102407		True				
ANR	1102624	CFGExitNode	EXIT		1102407		True				
ANR	1102625	Symbol	strcmp		1102407						
ANR	1102626	Symbol	history_file		1102407						
ANR	1102627	Symbol	safe_open_wrapper_follow		1102407						
ANR	1102628	Symbol	D_ALWAYS		1102407						
ANR	1102629	Symbol	TRUE		1102407						
ANR	1102630	Symbol	& size		1102407						
ANR	1102631	Symbol	history_file_param		1102407						
ANR	1102632	Symbol	result		1102407						
ANR	1102633	Symbol	DC_FETCH_LOG_RESULT_CANT_OPEN		1102407						
ANR	1102634	Symbol	O_RDONLY		1102407						
ANR	1102635	Symbol	size		1102407						
ANR	1102636	Symbol	stream		1102407						
ANR	1102637	Symbol	param		1102407						
ANR	1102638	Symbol	name		1102407						
ANR	1102639	Symbol	FALSE		1102407						
ANR	1102640	Symbol	DC_FETCH_LOG_RESULT_BAD_TYPE		1102407						
ANR	1102641	Symbol	DC_FETCH_LOG_RESULT_SUCCESS		1102407						
ANR	1102642	Symbol	fd		1102407						
ANR	1102643	Function	handle_fetch_log_history_dir	1058:0:27435:28276							
ANR	1102644	FunctionDef	"handle_fetch_log_history_dir (ReliSock * stream , char * paramName)"		1102643	0					
ANR	1102645	CompoundStatement		1059:64:27503:28276	1102643	0					
ANR	1102646	IdentifierDeclStatement	int result = DC_FETCH_LOG_RESULT_BAD_TYPE ;	1060:1:27506:27547	1102643	0	True				
ANR	1102647	IdentifierDecl	result = DC_FETCH_LOG_RESULT_BAD_TYPE		1102643	0					
ANR	1102648	IdentifierDeclType	int		1102643	0					
ANR	1102649	Identifier	result		1102643	1					
ANR	1102650	AssignmentExpression	result = DC_FETCH_LOG_RESULT_BAD_TYPE		1102643	2		=			
ANR	1102651	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		1102643	0					
ANR	1102652	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		1102643	1					
ANR	1102653	ExpressionStatement	free ( paramName )	1062:1:27551:27566	1102643	1	True				
ANR	1102654	CallExpression	free ( paramName )		1102643	0					
ANR	1102655	Callee	free		1102643	0					
ANR	1102656	Identifier	free		1102643	0					
ANR	1102657	ArgumentList	paramName		1102643	1					
ANR	1102658	Argument	paramName		1102643	0					
ANR	1102659	Identifier	paramName		1102643	0					
ANR	1102660	IdentifierDeclStatement	"char * dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" ) ;"	1063:1:27569:27620	1102643	2	True				
ANR	1102661	IdentifierDecl	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102643	0					
ANR	1102662	IdentifierDeclType	char *		1102643	0					
ANR	1102663	Identifier	dirName		1102643	1					
ANR	1102664	AssignmentExpression	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102643	2		=			
ANR	1102665	Identifier	dirName		1102643	0					
ANR	1102666	CallExpression	"param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102643	1					
ANR	1102667	Callee	param		1102643	0					
ANR	1102668	Identifier	param		1102643	0					
ANR	1102669	ArgumentList	"""STARTD.PER_JOB_HISTORY_DIR"""		1102643	1					
ANR	1102670	Argument	"""STARTD.PER_JOB_HISTORY_DIR"""		1102643	0					
ANR	1102671	PrimaryExpression	"""STARTD.PER_JOB_HISTORY_DIR"""		1102643	0					
ANR	1102672	IfStatement	if ( ! dirName )		1102643	3					
ANR	1102673	Condition	! dirName	1064:5:27628:27635	1102643	0	True				
ANR	1102674	UnaryOperationExpression	! dirName		1102643	0					
ANR	1102675	UnaryOperator	!		1102643	0					
ANR	1102676	Identifier	dirName		1102643	1					
ANR	1102677	CompoundStatement		6:15:134:134	1102643	1					
ANR	1102678	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"	1065:2:27642:27734	1102643	0	True				
ANR	1102679	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"		1102643	0					
ANR	1102680	Callee	dprintf		1102643	0					
ANR	1102681	Identifier	dprintf		1102643	0					
ANR	1102682	ArgumentList	D_ALWAYS		1102643	1					
ANR	1102683	Argument	D_ALWAYS		1102643	0					
ANR	1102684	Identifier	D_ALWAYS		1102643	0					
ANR	1102685	Argument	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		1102643	1					
ANR	1102686	PrimaryExpression	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		1102643	0					
ANR	1102687	ExpressionStatement	stream -> code ( result )	1066:2:27738:27758	1102643	1	True				
ANR	1102688	CallExpression	stream -> code ( result )		1102643	0					
ANR	1102689	Callee	stream -> code		1102643	0					
ANR	1102690	PtrMemberAccess	stream -> code		1102643	0					
ANR	1102691	Identifier	stream		1102643	0					
ANR	1102692	Identifier	code		1102643	1					
ANR	1102693	ArgumentList	result		1102643	1					
ANR	1102694	Argument	result		1102643	0					
ANR	1102695	Identifier	result		1102643	0					
ANR	1102696	ExpressionStatement	stream -> end_of_message ( )	1067:2:27762:27786	1102643	2	True				
ANR	1102697	CallExpression	stream -> end_of_message ( )		1102643	0					
ANR	1102698	Callee	stream -> end_of_message		1102643	0					
ANR	1102699	PtrMemberAccess	stream -> end_of_message		1102643	0					
ANR	1102700	Identifier	stream		1102643	0					
ANR	1102701	Identifier	end_of_message		1102643	1					
ANR	1102702	ArgumentList			1102643	1					
ANR	1102703	ReturnStatement	return FALSE ;	1068:2:27790:27802	1102643	3	True				
ANR	1102704	Identifier	FALSE		1102643	0					
ANR	1102705	IdentifierDeclStatement	Directory d ( dirName ) ;	1071:1:27809:27829	1102643	4	True				
ANR	1102706	IdentifierDecl	d ( dirName )		1102643	0					
ANR	1102707	IdentifierDeclType	Directory		1102643	0					
ANR	1102708	Identifier	d		1102643	1					
ANR	1102709	Identifier	dirName		1102643	2					
ANR	1102710	IdentifierDeclStatement	const char * filename ;	1072:1:27832:27852	1102643	5	True				
ANR	1102711	IdentifierDecl	* filename		1102643	0					
ANR	1102712	IdentifierDeclType	const char *		1102643	0					
ANR	1102713	Identifier	filename		1102643	1					
ANR	1102714	IdentifierDeclStatement	int one = 1 ;	1073:1:27855:27864	1102643	6	True				
ANR	1102715	IdentifierDecl	one = 1		1102643	0					
ANR	1102716	IdentifierDeclType	int		1102643	0					
ANR	1102717	Identifier	one		1102643	1					
ANR	1102718	AssignmentExpression	one = 1		1102643	2		=			
ANR	1102719	Identifier	one		1102643	0					
ANR	1102720	PrimaryExpression	1		1102643	1					
ANR	1102721	IdentifierDeclStatement	int zero = 0 ;	1074:1:27867:27877	1102643	7	True				
ANR	1102722	IdentifierDecl	zero = 0		1102643	0					
ANR	1102723	IdentifierDeclType	int		1102643	0					
ANR	1102724	Identifier	zero		1102643	1					
ANR	1102725	AssignmentExpression	zero = 0		1102643	2		=			
ANR	1102726	Identifier	zero		1102643	0					
ANR	1102727	PrimaryExpression	0		1102643	1					
ANR	1102728	WhileStatement	while ( ( filename = d . Next ( ) ) )		1102643	8					
ANR	1102729	Condition	filename = d . Next ( )	1075:8:27887:27907	1102643	0	True				
ANR	1102730	AssignmentExpression	filename = d . Next ( )		1102643	0		=			
ANR	1102731	Identifier	filename		1102643	0					
ANR	1102732	CallExpression	d . Next ( )		1102643	1					
ANR	1102733	Callee	d . Next		1102643	0					
ANR	1102734	MemberAccess	d . Next		1102643	0					
ANR	1102735	Identifier	d		1102643	0					
ANR	1102736	Identifier	Next		1102643	1					
ANR	1102737	ArgumentList			1102643	1					
ANR	1102738	CompoundStatement		23:2:542:602	1102643	1					
ANR	1102739	ExpressionStatement	stream -> code ( one )	1076:2:27914:27931	1102643	0	True				
ANR	1102740	CallExpression	stream -> code ( one )		1102643	0					
ANR	1102741	Callee	stream -> code		1102643	0					
ANR	1102742	PtrMemberAccess	stream -> code		1102643	0					
ANR	1102743	Identifier	stream		1102643	0					
ANR	1102744	Identifier	code		1102643	1					
ANR	1102745	ArgumentList	one		1102643	1					
ANR	1102746	Argument	one		1102643	0					
ANR	1102747	Identifier	one		1102643	0					
ANR	1102748	ExpressionStatement	stream -> put ( filename )	1077:2:27948:27969	1102643	1	True				
ANR	1102749	CallExpression	stream -> put ( filename )		1102643	0					
ANR	1102750	Callee	stream -> put		1102643	0					
ANR	1102751	PtrMemberAccess	stream -> put		1102643	0					
ANR	1102752	Identifier	stream		1102643	0					
ANR	1102753	Identifier	put		1102643	1					
ANR	1102754	ArgumentList	filename		1102643	1					
ANR	1102755	Argument	filename		1102643	0					
ANR	1102756	Identifier	filename		1102643	0					
ANR	1102757	IdentifierDeclStatement	MyString fullPath ( dirName ) ;	1078:2:27973:27999	1102643	2	True				
ANR	1102758	IdentifierDecl	fullPath ( dirName )		1102643	0					
ANR	1102759	IdentifierDeclType	MyString		1102643	0					
ANR	1102760	Identifier	fullPath		1102643	1					
ANR	1102761	Identifier	dirName		1102643	2					
ANR	1102762	ExpressionStatement	"fullPath += ""/"""	1079:2:28003:28018	1102643	3	True				
ANR	1102763	AssignmentExpression	"fullPath += ""/"""		1102643	0		+=			
ANR	1102764	Identifier	fullPath		1102643	0					
ANR	1102765	PrimaryExpression	"""/"""		1102643	1					
ANR	1102766	ExpressionStatement	fullPath += filename	1080:2:28022:28042	1102643	4	True				
ANR	1102767	AssignmentExpression	fullPath += filename		1102643	0		+=			
ANR	1102768	Identifier	fullPath		1102643	0					
ANR	1102769	Identifier	filename		1102643	1					
ANR	1102770	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY ) ;"	1081:2:28046:28106	1102643	5	True				
ANR	1102771	IdentifierDecl	"fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		1102643	0					
ANR	1102772	IdentifierDeclType	int		1102643	0					
ANR	1102773	Identifier	fd		1102643	1					
ANR	1102774	AssignmentExpression	"fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		1102643	2		=			
ANR	1102775	Identifier	fd		1102643	0					
ANR	1102776	CallExpression	"safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		1102643	1					
ANR	1102777	Callee	safe_open_wrapper_follow		1102643	0					
ANR	1102778	Identifier	safe_open_wrapper_follow		1102643	0					
ANR	1102779	ArgumentList	fullPath . Value ( )		1102643	1					
ANR	1102780	Argument	fullPath . Value ( )		1102643	0					
ANR	1102781	CallExpression	fullPath . Value ( )		1102643	0					
ANR	1102782	Callee	fullPath . Value		1102643	0					
ANR	1102783	MemberAccess	fullPath . Value		1102643	0					
ANR	1102784	Identifier	fullPath		1102643	0					
ANR	1102785	Identifier	Value		1102643	1					
ANR	1102786	ArgumentList			1102643	1					
ANR	1102787	Argument	O_RDONLY		1102643	1					
ANR	1102788	Identifier	O_RDONLY		1102643	0					
ANR	1102789	IfStatement	if ( fd > 0 )		1102643	6					
ANR	1102790	Condition	fd > 0	1082:6:28114:28119	1102643	0	True				
ANR	1102791	RelationalExpression	fd > 0		1102643	0		>			
ANR	1102792	Identifier	fd		1102643	0					
ANR	1102793	PrimaryExpression	0		1102643	1					
ANR	1102794	CompoundStatement		25:3:623:638	1102643	1					
ANR	1102795	IdentifierDeclStatement	filesize_t size ;	1083:3:28127:28142	1102643	0	True				
ANR	1102796	IdentifierDecl	size		1102643	0					
ANR	1102797	IdentifierDeclType	filesize_t		1102643	0					
ANR	1102798	Identifier	size		1102643	1					
ANR	1102799	ExpressionStatement	"stream -> put_file ( & size , fd )"	1084:3:28147:28174	1102643	1	True				
ANR	1102800	CallExpression	"stream -> put_file ( & size , fd )"		1102643	0					
ANR	1102801	Callee	stream -> put_file		1102643	0					
ANR	1102802	PtrMemberAccess	stream -> put_file		1102643	0					
ANR	1102803	Identifier	stream		1102643	0					
ANR	1102804	Identifier	put_file		1102643	1					
ANR	1102805	ArgumentList	& size		1102643	1					
ANR	1102806	Argument	& size		1102643	0					
ANR	1102807	UnaryOperationExpression	& size		1102643	0					
ANR	1102808	UnaryOperator	&		1102643	0					
ANR	1102809	Identifier	size		1102643	1					
ANR	1102810	Argument	fd		1102643	1					
ANR	1102811	Identifier	fd		1102643	0					
ANR	1102812	ExpressionStatement	free ( dirName )	1088:1:28185:28198	1102643	9	True				
ANR	1102813	CallExpression	free ( dirName )		1102643	0					
ANR	1102814	Callee	free		1102643	0					
ANR	1102815	Identifier	free		1102643	0					
ANR	1102816	ArgumentList	dirName		1102643	1					
ANR	1102817	Argument	dirName		1102643	0					
ANR	1102818	Identifier	dirName		1102643	0					
ANR	1102819	ExpressionStatement	stream -> code ( zero )	1090:1:28202:28220	1102643	10	True				
ANR	1102820	CallExpression	stream -> code ( zero )		1102643	0					
ANR	1102821	Callee	stream -> code		1102643	0					
ANR	1102822	PtrMemberAccess	stream -> code		1102643	0					
ANR	1102823	Identifier	stream		1102643	0					
ANR	1102824	Identifier	code		1102643	1					
ANR	1102825	ArgumentList	zero		1102643	1					
ANR	1102826	Argument	zero		1102643	0					
ANR	1102827	Identifier	zero		1102643	0					
ANR	1102828	ExpressionStatement	stream -> end_of_message ( )	1091:1:28239:28263	1102643	11	True				
ANR	1102829	CallExpression	stream -> end_of_message ( )		1102643	0					
ANR	1102830	Callee	stream -> end_of_message		1102643	0					
ANR	1102831	PtrMemberAccess	stream -> end_of_message		1102643	0					
ANR	1102832	Identifier	stream		1102643	0					
ANR	1102833	Identifier	end_of_message		1102643	1					
ANR	1102834	ArgumentList			1102643	1					
ANR	1102835	ReturnStatement	return 0 ;	1092:1:28266:28274	1102643	12	True				
ANR	1102836	PrimaryExpression	0		1102643	0					
ANR	1102837	ReturnType	int		1102643	1					
ANR	1102838	Identifier	handle_fetch_log_history_dir		1102643	2					
ANR	1102839	ParameterList	"ReliSock * stream , char * paramName"		1102643	3					
ANR	1102840	Parameter	ReliSock * stream	1059:29:27468:27483	1102643	0	True				
ANR	1102841	ParameterType	ReliSock *		1102643	0					
ANR	1102842	Identifier	stream		1102643	1					
ANR	1102843	Parameter	char * paramName	1059:47:27486:27500	1102643	1	True				
ANR	1102844	ParameterType	char *		1102643	0					
ANR	1102845	Identifier	paramName		1102643	1					
ANR	1102846	CFGEntryNode	ENTRY		1102643		True				
ANR	1102847	CFGExitNode	EXIT		1102643		True				
ANR	1102848	Symbol	fullPath		1102643						
ANR	1102849	Symbol	d . Next		1102643						
ANR	1102850	Symbol	safe_open_wrapper_follow		1102643						
ANR	1102851	Symbol	d		1102643						
ANR	1102852	Symbol	one		1102643						
ANR	1102853	Symbol	D_ALWAYS		1102643						
ANR	1102854	Symbol	paramName		1102643						
ANR	1102855	Symbol	& size		1102643						
ANR	1102856	Symbol	result		1102643						
ANR	1102857	Symbol	zero		1102643						
ANR	1102858	Symbol	filename		1102643						
ANR	1102859	Symbol	O_RDONLY		1102643						
ANR	1102860	Symbol	size		1102643						
ANR	1102861	Symbol	stream		1102643						
ANR	1102862	Symbol	param		1102643						
ANR	1102863	Symbol	fullPath . Value		1102643						
ANR	1102864	Symbol	FALSE		1102643						
ANR	1102865	Symbol	DC_FETCH_LOG_RESULT_BAD_TYPE		1102643						
ANR	1102866	Symbol	fd		1102643						
ANR	1102867	Symbol	dirName		1102643						
ANR	1102868	Function	handle_fetch_log_history_purge	1095:0:28279:28900							
ANR	1102869	FunctionDef	handle_fetch_log_history_purge (ReliSock * s)		1102868	0					
ANR	1102870	CompoundStatement		1096:44:28327:28900	1102868	0					
ANR	1102871	IdentifierDeclStatement	int result = 0 ;	1098:1:28331:28345	1102868	0	True				
ANR	1102872	IdentifierDecl	result = 0		1102868	0					
ANR	1102873	IdentifierDeclType	int		1102868	0					
ANR	1102874	Identifier	result		1102868	1					
ANR	1102875	AssignmentExpression	result = 0		1102868	2		=			
ANR	1102876	Identifier	result		1102868	0					
ANR	1102877	PrimaryExpression	0		1102868	1					
ANR	1102878	IdentifierDeclStatement	time_t cutoff = 0 ;	1099:1:28348:28365	1102868	1	True				
ANR	1102879	IdentifierDecl	cutoff = 0		1102868	0					
ANR	1102880	IdentifierDeclType	time_t		1102868	0					
ANR	1102881	Identifier	cutoff		1102868	1					
ANR	1102882	AssignmentExpression	cutoff = 0		1102868	2		=			
ANR	1102883	Identifier	cutoff		1102868	0					
ANR	1102884	PrimaryExpression	0		1102868	1					
ANR	1102885	ExpressionStatement	s -> code ( cutoff )	1100:1:28368:28383	1102868	2	True				
ANR	1102886	CallExpression	s -> code ( cutoff )		1102868	0					
ANR	1102887	Callee	s -> code		1102868	0					
ANR	1102888	PtrMemberAccess	s -> code		1102868	0					
ANR	1102889	Identifier	s		1102868	0					
ANR	1102890	Identifier	code		1102868	1					
ANR	1102891	ArgumentList	cutoff		1102868	1					
ANR	1102892	Argument	cutoff		1102868	0					
ANR	1102893	Identifier	cutoff		1102868	0					
ANR	1102894	ExpressionStatement	s -> end_of_message ( )	1101:1:28386:28405	1102868	3	True				
ANR	1102895	CallExpression	s -> end_of_message ( )		1102868	0					
ANR	1102896	Callee	s -> end_of_message		1102868	0					
ANR	1102897	PtrMemberAccess	s -> end_of_message		1102868	0					
ANR	1102898	Identifier	s		1102868	0					
ANR	1102899	Identifier	end_of_message		1102868	1					
ANR	1102900	ArgumentList			1102868	1					
ANR	1102901	ExpressionStatement	s -> encode ( )	1103:1:28409:28420	1102868	4	True				
ANR	1102902	CallExpression	s -> encode ( )		1102868	0					
ANR	1102903	Callee	s -> encode		1102868	0					
ANR	1102904	PtrMemberAccess	s -> encode		1102868	0					
ANR	1102905	Identifier	s		1102868	0					
ANR	1102906	Identifier	encode		1102868	1					
ANR	1102907	ArgumentList			1102868	1					
ANR	1102908	IdentifierDeclStatement	"char * dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" ) ;"	1105:1:28424:28475	1102868	5	True				
ANR	1102909	IdentifierDecl	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102868	0					
ANR	1102910	IdentifierDeclType	char *		1102868	0					
ANR	1102911	Identifier	dirName		1102868	1					
ANR	1102912	AssignmentExpression	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102868	2		=			
ANR	1102913	Identifier	dirName		1102868	0					
ANR	1102914	CallExpression	"param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		1102868	1					
ANR	1102915	Callee	param		1102868	0					
ANR	1102916	Identifier	param		1102868	0					
ANR	1102917	ArgumentList	"""STARTD.PER_JOB_HISTORY_DIR"""		1102868	1					
ANR	1102918	Argument	"""STARTD.PER_JOB_HISTORY_DIR"""		1102868	0					
ANR	1102919	PrimaryExpression	"""STARTD.PER_JOB_HISTORY_DIR"""		1102868	0					
ANR	1102920	IfStatement	if ( ! dirName )		1102868	6					
ANR	1102921	Condition	! dirName	1106:5:28483:28490	1102868	0	True				
ANR	1102922	UnaryOperationExpression	! dirName		1102868	0					
ANR	1102923	UnaryOperator	!		1102868	0					
ANR	1102924	Identifier	dirName		1102868	1					
ANR	1102925	CompoundStatement		11:15:165:165	1102868	1					
ANR	1102926	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"	1107:2:28497:28589	1102868	0	True				
ANR	1102927	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"		1102868	0					
ANR	1102928	Callee	dprintf		1102868	0					
ANR	1102929	Identifier	dprintf		1102868	0					
ANR	1102930	ArgumentList	D_ALWAYS		1102868	1					
ANR	1102931	Argument	D_ALWAYS		1102868	0					
ANR	1102932	Identifier	D_ALWAYS		1102868	0					
ANR	1102933	Argument	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		1102868	1					
ANR	1102934	PrimaryExpression	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		1102868	0					
ANR	1102935	ExpressionStatement	s -> code ( result )	1108:2:28593:28608	1102868	1	True				
ANR	1102936	CallExpression	s -> code ( result )		1102868	0					
ANR	1102937	Callee	s -> code		1102868	0					
ANR	1102938	PtrMemberAccess	s -> code		1102868	0					
ANR	1102939	Identifier	s		1102868	0					
ANR	1102940	Identifier	code		1102868	1					
ANR	1102941	ArgumentList	result		1102868	1					
ANR	1102942	Argument	result		1102868	0					
ANR	1102943	Identifier	result		1102868	0					
ANR	1102944	ExpressionStatement	s -> end_of_message ( )	1109:2:28612:28631	1102868	2	True				
ANR	1102945	CallExpression	s -> end_of_message ( )		1102868	0					
ANR	1102946	Callee	s -> end_of_message		1102868	0					
ANR	1102947	PtrMemberAccess	s -> end_of_message		1102868	0					
ANR	1102948	Identifier	s		1102868	0					
ANR	1102949	Identifier	end_of_message		1102868	1					
ANR	1102950	ArgumentList			1102868	1					
ANR	1102951	ReturnStatement	return FALSE ;	1110:2:28635:28647	1102868	3	True				
ANR	1102952	Identifier	FALSE		1102868	0					
ANR	1102953	IdentifierDeclStatement	Directory d ( dirName ) ;	1113:1:28654:28674	1102868	7	True				
ANR	1102954	IdentifierDecl	d ( dirName )		1102868	0					
ANR	1102955	IdentifierDeclType	Directory		1102868	0					
ANR	1102956	Identifier	d		1102868	1					
ANR	1102957	Identifier	dirName		1102868	2					
ANR	1102958	ExpressionStatement	result = 1	1115:1:28678:28688	1102868	8	True				
ANR	1102959	AssignmentExpression	result = 1		1102868	0		=			
ANR	1102960	Identifier	result		1102868	0					
ANR	1102961	PrimaryExpression	1		1102868	1					
ANR	1102962	WhileStatement	while ( d . Next ( ) )		1102868	9					
ANR	1102963	Condition	d . Next ( )	1116:8:28698:28705	1102868	0	True				
ANR	1102964	CallExpression	d . Next ( )		1102868	0					
ANR	1102965	Callee	d . Next		1102868	0					
ANR	1102966	MemberAccess	d . Next		1102868	0					
ANR	1102967	Identifier	d		1102868	0					
ANR	1102968	Identifier	Next		1102868	1					
ANR	1102969	ArgumentList			1102868	1					
ANR	1102970	CompoundStatement		22:2:384:415	1102868	1					
ANR	1102971	IdentifierDeclStatement	time_t last = d . GetModifyTime ( ) ;	1117:2:28712:28743	1102868	0	True				
ANR	1102972	IdentifierDecl	last = d . GetModifyTime ( )		1102868	0					
ANR	1102973	IdentifierDeclType	time_t		1102868	0					
ANR	1102974	Identifier	last		1102868	1					
ANR	1102975	AssignmentExpression	last = d . GetModifyTime ( )		1102868	2		=			
ANR	1102976	Identifier	last		1102868	0					
ANR	1102977	CallExpression	d . GetModifyTime ( )		1102868	1					
ANR	1102978	Callee	d . GetModifyTime		1102868	0					
ANR	1102979	MemberAccess	d . GetModifyTime		1102868	0					
ANR	1102980	Identifier	d		1102868	0					
ANR	1102981	Identifier	GetModifyTime		1102868	1					
ANR	1102982	ArgumentList			1102868	1					
ANR	1102983	IfStatement	if ( last < cutoff )		1102868	1					
ANR	1102984	Condition	last < cutoff	1118:6:28751:28763	1102868	0	True				
ANR	1102985	RelationalExpression	last < cutoff		1102868	0		<			
ANR	1102986	Identifier	last		1102868	0					
ANR	1102987	Identifier	cutoff		1102868	1					
ANR	1102988	CompoundStatement		23:21:438:438	1102868	1					
ANR	1102989	ExpressionStatement	d . Remove_Current_File ( )	1119:3:28771:28794	1102868	0	True				
ANR	1102990	CallExpression	d . Remove_Current_File ( )		1102868	0					
ANR	1102991	Callee	d . Remove_Current_File		1102868	0					
ANR	1102992	MemberAccess	d . Remove_Current_File		1102868	0					
ANR	1102993	Identifier	d		1102868	0					
ANR	1102994	Identifier	Remove_Current_File		1102868	1					
ANR	1102995	ArgumentList			1102868	1					
ANR	1102996	ExpressionStatement	free ( dirName )	1123:4:28808:28821	1102868	10	True				
ANR	1102997	CallExpression	free ( dirName )		1102868	0					
ANR	1102998	Callee	free		1102868	0					
ANR	1102999	Identifier	free		1102868	0					
ANR	1103000	ArgumentList	dirName		1102868	1					
ANR	1103001	Argument	dirName		1102868	0					
ANR	1103002	Identifier	dirName		1102868	0					
ANR	1103003	ExpressionStatement	s -> code ( result )	1125:4:28828:28843	1102868	11	True				
ANR	1103004	CallExpression	s -> code ( result )		1102868	0					
ANR	1103005	Callee	s -> code		1102868	0					
ANR	1103006	PtrMemberAccess	s -> code		1102868	0					
ANR	1103007	Identifier	s		1102868	0					
ANR	1103008	Identifier	code		1102868	1					
ANR	1103009	ArgumentList	result		1102868	1					
ANR	1103010	Argument	result		1102868	0					
ANR	1103011	Identifier	result		1102868	0					
ANR	1103012	ExpressionStatement	s -> end_of_message ( )	1126:4:28865:28884	1102868	12	True				
ANR	1103013	CallExpression	s -> end_of_message ( )		1102868	0					
ANR	1103014	Callee	s -> end_of_message		1102868	0					
ANR	1103015	PtrMemberAccess	s -> end_of_message		1102868	0					
ANR	1103016	Identifier	s		1102868	0					
ANR	1103017	Identifier	end_of_message		1102868	1					
ANR	1103018	ArgumentList			1102868	1					
ANR	1103019	ReturnStatement	return 0 ;	1127:4:28890:28898	1102868	13	True				
ANR	1103020	PrimaryExpression	0		1102868	0					
ANR	1103021	ReturnType	int		1102868	1					
ANR	1103022	Identifier	handle_fetch_log_history_purge		1102868	2					
ANR	1103023	ParameterList	ReliSock * s		1102868	3					
ANR	1103024	Parameter	ReliSock * s	1096:31:28314:28324	1102868	0	True				
ANR	1103025	ParameterType	ReliSock *		1102868	0					
ANR	1103026	Identifier	s		1102868	1					
ANR	1103027	CFGEntryNode	ENTRY		1102868		True				
ANR	1103028	CFGExitNode	EXIT		1102868		True				
ANR	1103029	Symbol	result		1102868						
ANR	1103030	Symbol	d . Next		1102868						
ANR	1103031	Symbol	s		1102868						
ANR	1103032	Symbol	d		1102868						
ANR	1103033	Symbol	last		1102868						
ANR	1103034	Symbol	param		1102868						
ANR	1103035	Symbol	D_ALWAYS		1102868						
ANR	1103036	Symbol	FALSE		1102868						
ANR	1103037	Symbol	cutoff		1102868						
ANR	1103038	Symbol	dirName		1102868						
ANR	1103039	Symbol	d . GetModifyTime		1102868						
ANR	1103040	DeclStmt									
ANR	1103041	Decl							int	int	result
ANR	1103042	DeclStmt									
ANR	1103043	Decl							char	char *	key_id
ANR	1103044	DeclStmt									
ANR	1103045	Decl							char	char *	param_name
ANR	1103046	Decl							char	char *	tmp
ANR	1103047	DeclStmt									
ANR	1103048	Decl							char	char *	admin
ANR	1103049	Decl							char	char *	config
ANR	1103050	DeclStmt									
ANR	1103051	Decl							char	char *	to_check
ANR	1103052	DeclStmt									
ANR	1103053	Decl							int	int	rval
ANR	1103054	DeclStmt									
ANR	1103055	Decl							bool	bool	failed
ANR	1103056	Function	dc_reconfig	1360:0:33516:35651							
ANR	1103057	FunctionDef	dc_reconfig ()		1103056	0					
ANR	1103058	CompoundStatement		1362:0:33535:35651	1103056	0					
ANR	1103059	ExpressionStatement	daemonCore -> refreshDNS ( )	1364:1:33594:33618	1103056	0	True				
ANR	1103060	CallExpression	daemonCore -> refreshDNS ( )		1103056	0					
ANR	1103061	Callee	daemonCore -> refreshDNS		1103056	0					
ANR	1103062	PtrMemberAccess	daemonCore -> refreshDNS		1103056	0					
ANR	1103063	Identifier	daemonCore		1103056	0					
ANR	1103064	Identifier	refreshDNS		1103056	1					
ANR	1103065	ArgumentList			1103056	1					
ANR	1103066	ExpressionStatement	config ( 0 )	1376:1:34141:34150	1103056	1	True				
ANR	1103067	CallExpression	config ( 0 )		1103056	0					
ANR	1103068	Callee	config		1103056	0					
ANR	1103069	Identifier	config		1103056	0					
ANR	1103070	ArgumentList	0		1103056	1					
ANR	1103071	Argument	0		1103056	0					
ANR	1103072	PrimaryExpression	0		1103056	0					
ANR	1103073	IfStatement	if ( doCoreInit )		1103056	2					
ANR	1103074	Condition	doCoreInit	1379:6:34219:34228	1103056	0	True				
ANR	1103075	Identifier	doCoreInit		1103056	0					
ANR	1103076	CompoundStatement		18:19:696:696	1103056	1					
ANR	1103077	ExpressionStatement	check_core_files ( )	1380:2:34236:34254	1103056	0	True				
ANR	1103078	CallExpression	check_core_files ( )		1103056	0					
ANR	1103079	Callee	check_core_files		1103056	0					
ANR	1103080	Identifier	check_core_files		1103056	0					
ANR	1103081	ArgumentList			1103056	1					
ANR	1103082	IfStatement	if ( logDir )		1103056	3					
ANR	1103083	Condition	logDir	1384:5:34336:34341	1103056	0	True				
ANR	1103084	Identifier	logDir		1103056	0					
ANR	1103085	CompoundStatement		23:14:809:809	1103056	1					
ANR	1103086	ExpressionStatement	set_log_dir ( )	1385:2:34349:34362	1103056	0	True				
ANR	1103087	CallExpression	set_log_dir ( )		1103056	0					
ANR	1103088	Callee	set_log_dir		1103056	0					
ANR	1103089	Identifier	set_log_dir		1103056	0					
ANR	1103090	ArgumentList			1103056	1					
ANR	1103091	IfStatement	if ( logAppend )		1103056	4					
ANR	1103092	Condition	logAppend	1388:5:34373:34381	1103056	0	True				
ANR	1103093	Identifier	logAppend		1103056	0					
ANR	1103094	CompoundStatement		27:17:849:849	1103056	1					
ANR	1103095	ExpressionStatement	handle_log_append ( logAppend )	1389:2:34389:34419	1103056	0	True				
ANR	1103096	CallExpression	handle_log_append ( logAppend )		1103056	0					
ANR	1103097	Callee	handle_log_append		1103056	0					
ANR	1103098	Identifier	handle_log_append		1103056	0					
ANR	1103099	ArgumentList	logAppend		1103056	1					
ANR	1103100	Argument	logAppend		1103056	0					
ANR	1103101	Identifier	logAppend		1103056	0					
ANR	1103102	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	1393:1:34497:34564	1103056	5	True				
ANR	1103103	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		1103056	0					
ANR	1103104	Callee	dprintf_config		1103056	0					
ANR	1103105	Identifier	dprintf_config		1103056	0					
ANR	1103106	ArgumentList	get_mySubSystem ( ) -> getName ( )		1103056	1					
ANR	1103107	Argument	get_mySubSystem ( ) -> getName ( )		1103056	0					
ANR	1103108	CallExpression	get_mySubSystem ( ) -> getName ( )		1103056	0					
ANR	1103109	Callee	get_mySubSystem ( ) -> getName		1103056	0					
ANR	1103110	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103056	0					
ANR	1103111	CallExpression	get_mySubSystem ( )		1103056	0					
ANR	1103112	Callee	get_mySubSystem		1103056	0					
ANR	1103113	Identifier	get_mySubSystem		1103056	0					
ANR	1103114	ArgumentList			1103056	1					
ANR	1103115	Identifier	getName		1103056	1					
ANR	1103116	ArgumentList			1103056	1					
ANR	1103117	Argument	get_param_functions ( )		1103056	1					
ANR	1103118	CallExpression	get_param_functions ( )		1103056	0					
ANR	1103119	Callee	get_param_functions		1103056	0					
ANR	1103120	Identifier	get_param_functions		1103056	0					
ANR	1103121	ArgumentList			1103056	1					
ANR	1103122	ExpressionStatement	drop_core_in_log ( )	1397:1:34711:34729	1103056	6	True				
ANR	1103123	CallExpression	drop_core_in_log ( )		1103056	0					
ANR	1103124	Callee	drop_core_in_log		1103056	0					
ANR	1103125	Identifier	drop_core_in_log		1103056	0					
ANR	1103126	ArgumentList			1103056	1					
ANR	1103127	ExpressionStatement	daemonCore -> reconfig ( )	1401:1:34845:34867	1103056	7	True				
ANR	1103128	CallExpression	daemonCore -> reconfig ( )		1103056	0					
ANR	1103129	Callee	daemonCore -> reconfig		1103056	0					
ANR	1103130	PtrMemberAccess	daemonCore -> reconfig		1103056	0					
ANR	1103131	Identifier	daemonCore		1103056	0					
ANR	1103132	Identifier	reconfig		1103056	1					
ANR	1103133	ArgumentList			1103056	1					
ANR	1103134	ExpressionStatement	clear_passwd_cache ( )	1404:1:34903:34923	1103056	8	True				
ANR	1103135	CallExpression	clear_passwd_cache ( )		1103056	0					
ANR	1103136	Callee	clear_passwd_cache		1103056	0					
ANR	1103137	Identifier	clear_passwd_cache		1103056	0					
ANR	1103138	ArgumentList			1103056	1					
ANR	1103139	ExpressionStatement	drop_addr_file ( )	1407:1:34991:35007	1103056	9	True				
ANR	1103140	CallExpression	drop_addr_file ( )		1103056	0					
ANR	1103141	Callee	drop_addr_file		1103056	0					
ANR	1103142	Identifier	drop_addr_file		1103056	0					
ANR	1103143	ArgumentList			1103056	1					
ANR	1103144	IfStatement	if ( pidFile )		1103056	10					
ANR	1103145	Condition	pidFile	1410:5:35078:35084	1103056	0	True				
ANR	1103146	Identifier	pidFile		1103056	0					
ANR	1103147	CompoundStatement		49:15:1552:1552	1103056	1					
ANR	1103148	ExpressionStatement	drop_pid_file ( )	1411:2:35092:35107	1103056	0	True				
ANR	1103149	CallExpression	drop_pid_file ( )		1103056	0					
ANR	1103150	Callee	drop_pid_file		1103056	0					
ANR	1103151	Identifier	drop_pid_file		1103056	0					
ANR	1103152	ArgumentList			1103056	1					
ANR	1103153	IdentifierDeclStatement	char * ptmp ;	1416:1:35234:35244	1103056	11	True				
ANR	1103154	IdentifierDecl	* ptmp		1103056	0					
ANR	1103155	IdentifierDeclType	char *		1103056	0					
ANR	1103156	Identifier	ptmp		1103056	1					
ANR	1103157	IfStatement	"if ( param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false ) )"		1103056	12					
ANR	1103158	Condition	"param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false )"	1417:6:35252:35303	1103056	0	True				
ANR	1103159	CallExpression	"param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false )"		1103056	0					
ANR	1103160	Callee	param_boolean_crufty		1103056	0					
ANR	1103161	Identifier	param_boolean_crufty		1103056	0					
ANR	1103162	ArgumentList	"""DROP_CORE_ON_RECONFIG"""		1103056	1					
ANR	1103163	Argument	"""DROP_CORE_ON_RECONFIG"""		1103056	0					
ANR	1103164	PrimaryExpression	"""DROP_CORE_ON_RECONFIG"""		1103056	0					
ANR	1103165	Argument	false		1103056	1					
ANR	1103166	Identifier	false		1103056	0					
ANR	1103167	CompoundStatement		59:3:1837:1850	1103056	1					
ANR	1103168	ExpressionStatement	ptmp = NULL	1419:3:35357:35368	1103056	0	True				
ANR	1103169	AssignmentExpression	ptmp = NULL		1103056	0		=			
ANR	1103170	Identifier	ptmp		1103056	0					
ANR	1103171	Identifier	NULL		1103056	1					
ANR	1103172	IdentifierDeclStatement	char segfault ;	1420:3:35373:35386	1103056	1	True				
ANR	1103173	IdentifierDecl	segfault		1103056	0					
ANR	1103174	IdentifierDeclType	char		1103056	0					
ANR	1103175	Identifier	segfault		1103056	1					
ANR	1103176	ExpressionStatement	segfault = * ptmp	1421:3:35392:35408	1103056	2	True				
ANR	1103177	AssignmentExpression	segfault = * ptmp		1103056	0		=			
ANR	1103178	Identifier	segfault		1103056	0					
ANR	1103179	UnaryOperationExpression	* ptmp		1103056	1					
ANR	1103180	UnaryOperator	*		1103056	0					
ANR	1103181	Identifier	ptmp		1103056	1					
ANR	1103182	IfStatement	if ( segfault )		1103056	3					
ANR	1103183	Condition	segfault	1422:7:35440:35447	1103056	0	True				
ANR	1103184	Identifier	segfault		1103056	0					
ANR	1103185	CompoundStatement		61:17:1914:1914	1103056	1					
ANR	1103186	ExpressionStatement	ptmp [ 0 ] = 'a'	1423:3:35492:35505	1103056	4	True				
ANR	1103187	AssignmentExpression	ptmp [ 0 ] = 'a'		1103056	0		=			
ANR	1103188	ArrayIndexing	ptmp [ 0 ]		1103056	0					
ANR	1103189	Identifier	ptmp		1103056	0					
ANR	1103190	PrimaryExpression	0		1103056	1					
ANR	1103191	PrimaryExpression	'a'		1103056	1					
ANR	1103192	ExpressionStatement	"EXCEPT ( ""FAILED TO DROP CORE"" )"	1426:3:35550:35579	1103056	5	True				
ANR	1103193	CallExpression	"EXCEPT ( ""FAILED TO DROP CORE"" )"		1103056	0					
ANR	1103194	Callee	EXCEPT		1103056	0					
ANR	1103195	Identifier	EXCEPT		1103056	0					
ANR	1103196	ArgumentList	"""FAILED TO DROP CORE"""		1103056	1					
ANR	1103197	Argument	"""FAILED TO DROP CORE"""		1103056	0					
ANR	1103198	PrimaryExpression	"""FAILED TO DROP CORE"""		1103056	0					
ANR	1103199	ExpressionStatement	dc_main_config ( )	1430:1:35633:35649	1103056	13	True				
ANR	1103200	CallExpression	dc_main_config ( )		1103056	0					
ANR	1103201	Callee	dc_main_config		1103056	0					
ANR	1103202	Identifier	dc_main_config		1103056	0					
ANR	1103203	ArgumentList			1103056	1					
ANR	1103204	ReturnType	void		1103056	1					
ANR	1103205	Identifier	dc_reconfig		1103056	2					
ANR	1103206	ParameterList			1103056	3					
ANR	1103207	CFGEntryNode	ENTRY		1103056		True				
ANR	1103208	CFGExitNode	EXIT		1103056		True				
ANR	1103209	Symbol	doCoreInit		1103056						
ANR	1103210	Symbol	NULL		1103056						
ANR	1103211	Symbol	get_mySubSystem ( ) -> getName		1103056						
ANR	1103212	Symbol	* get_mySubSystem		1103056						
ANR	1103213	Symbol	get_param_functions		1103056						
ANR	1103214	Symbol	segfault		1103056						
ANR	1103215	Symbol	false		1103056						
ANR	1103216	Symbol	pidFile		1103056						
ANR	1103217	Symbol	logAppend		1103056						
ANR	1103218	Symbol	ptmp		1103056						
ANR	1103219	Symbol	daemonCore		1103056						
ANR	1103220	Symbol	param_boolean_crufty		1103056						
ANR	1103221	Symbol	get_mySubSystem		1103056						
ANR	1103222	Symbol	logDir		1103056						
ANR	1103223	Symbol	* ptmp		1103056						
ANR	1103224	Function	TimerHandler_main_shutdown_fast	1442:0:35793:35860							
ANR	1103225	FunctionDef	TimerHandler_main_shutdown_fast ()		1103224	0					
ANR	1103226	CompoundStatement		1444:0:35832:35860	1103224	0					
ANR	1103227	ExpressionStatement	dc_main_shutdown_fast ( )	1445:1:35835:35858	1103224	0	True				
ANR	1103228	CallExpression	dc_main_shutdown_fast ( )		1103224	0					
ANR	1103229	Callee	dc_main_shutdown_fast		1103224	0					
ANR	1103230	Identifier	dc_main_shutdown_fast		1103224	0					
ANR	1103231	ArgumentList			1103224	1					
ANR	1103232	ReturnType	void		1103224	1					
ANR	1103233	Identifier	TimerHandler_main_shutdown_fast		1103224	2					
ANR	1103234	ParameterList			1103224	3					
ANR	1103235	CFGEntryNode	ENTRY		1103224		True				
ANR	1103236	CFGExitNode	EXIT		1103224		True				
ANR	1103237	DeclStmt									
ANR	1103238	Decl							int	int	been_here
ANR	1103239	DeclStmt									
ANR	1103240	Decl							int	int	timeout
ANR	1103241	Function	TimerHandler_dc_sigterm	1486:0:36819:36887							
ANR	1103242	FunctionDef	TimerHandler_dc_sigterm ()		1103241	0					
ANR	1103243	CompoundStatement		1488:0:36850:36887	1103241	0					
ANR	1103244	ExpressionStatement	"handle_dc_sigterm ( NULL , SIGTERM )"	1489:1:36853:36885	1103241	0	True				
ANR	1103245	CallExpression	"handle_dc_sigterm ( NULL , SIGTERM )"		1103241	0					
ANR	1103246	Callee	handle_dc_sigterm		1103241	0					
ANR	1103247	Identifier	handle_dc_sigterm		1103241	0					
ANR	1103248	ArgumentList	NULL		1103241	1					
ANR	1103249	Argument	NULL		1103241	0					
ANR	1103250	Identifier	NULL		1103241	0					
ANR	1103251	Argument	SIGTERM		1103241	1					
ANR	1103252	Identifier	SIGTERM		1103241	0					
ANR	1103253	ReturnType	void		1103241	1					
ANR	1103254	Identifier	TimerHandler_dc_sigterm		1103241	2					
ANR	1103255	ParameterList			1103241	3					
ANR	1103256	CFGEntryNode	ENTRY		1103241		True				
ANR	1103257	CFGExitNode	EXIT		1103241		True				
ANR	1103258	Symbol	NULL		1103241						
ANR	1103259	Symbol	SIGTERM		1103241						
ANR	1103260	DeclStmt									
ANR	1103261	Decl							int	int	been_here
ANR	1103262	Function	handle_gcb_recovery_failed	1509:0:37227:37404							
ANR	1103263	FunctionDef	handle_gcb_recovery_failed ()		1103262	0					
ANR	1103264	CompoundStatement		1511:0:37262:37404	1103262	0					
ANR	1103265	Statement	dprintf	1512:1:37265:37271	1103262	0	True				
ANR	1103266	Statement	(	1512:8:37272:37272	1103262	1	True				
ANR	1103267	Statement	D_ALWAYS	1512:10:37274:37281	1103262	2	True				
ANR	1103268	Statement	","	1512:18:37282:37282	1103262	3	True				
ANR	1103269	Statement	"""GCB failed to recover from a failure with the """	1512:20:37284:37331	1103262	4	True				
ANR	1103270	Statement	"""Broker. Performing fast shutdown.\\n"""	1513:4:37337:37373	1103262	5	True				
ANR	1103271	Statement	)	1513:42:37375:37375	1103262	6	True				
ANR	1103272	ExpressionStatement		1513:43:37376:37376	1103262	7	True				
ANR	1103273	ExpressionStatement	dc_main_shutdown_fast ( )	1514:1:37379:37402	1103262	8	True				
ANR	1103274	CallExpression	dc_main_shutdown_fast ( )		1103262	0					
ANR	1103275	Callee	dc_main_shutdown_fast		1103262	0					
ANR	1103276	Identifier	dc_main_shutdown_fast		1103262	0					
ANR	1103277	ArgumentList			1103262	1					
ANR	1103278	ReturnType	void		1103262	1					
ANR	1103279	Identifier	handle_gcb_recovery_failed		1103262	2					
ANR	1103280	ParameterList			1103262	3					
ANR	1103281	CFGEntryNode	ENTRY		1103262		True				
ANR	1103282	CFGExitNode	EXIT		1103262		True				
ANR	1103283	Function	gcb_recovery_failed_callback	1518:0:37424:37784							
ANR	1103284	FunctionDef	gcb_recovery_failed_callback ()		1103283	0					
ANR	1103285	CompoundStatement		1520:0:37467:37784	1103283	0					
ANR	1103286	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , handle_gcb_recovery_failed , ""handle_gcb_recovery_failed"" )"	1525:1:37685:37782	1103283	0	True				
ANR	1103287	CallExpression	"daemonCore -> Register_Timer ( 0 , handle_gcb_recovery_failed , ""handle_gcb_recovery_failed"" )"		1103283	0					
ANR	1103288	Callee	daemonCore -> Register_Timer		1103283	0					
ANR	1103289	PtrMemberAccess	daemonCore -> Register_Timer		1103283	0					
ANR	1103290	Identifier	daemonCore		1103283	0					
ANR	1103291	Identifier	Register_Timer		1103283	1					
ANR	1103292	ArgumentList	0		1103283	1					
ANR	1103293	Argument	0		1103283	0					
ANR	1103294	PrimaryExpression	0		1103283	0					
ANR	1103295	Argument	handle_gcb_recovery_failed		1103283	1					
ANR	1103296	Identifier	handle_gcb_recovery_failed		1103283	0					
ANR	1103297	Argument	"""handle_gcb_recovery_failed"""		1103283	2					
ANR	1103298	PrimaryExpression	"""handle_gcb_recovery_failed"""		1103283	0					
ANR	1103299	ReturnType	static void		1103283	1					
ANR	1103300	Identifier	gcb_recovery_failed_callback		1103283	2					
ANR	1103301	ParameterList			1103283	3					
ANR	1103302	CFGEntryNode	ENTRY		1103283		True				
ANR	1103303	CFGExitNode	EXIT		1103283		True				
ANR	1103304	Symbol	daemonCore		1103283						
ANR	1103305	Symbol	handle_gcb_recovery_failed		1103283						
ANR	1103306	Function	dc_main	1534:0:38034:65150							
ANR	1103307	FunctionDef	"dc_main (int argc , char * * argv)"		1103306	0					
ANR	1103308	CompoundStatement		1535:0:38071:65150	1103306	0					
ANR	1103309	IdentifierDeclStatement	char * * ptr ;	1536:1:38074:38084	1103306	0	True				
ANR	1103310	IdentifierDecl	* * ptr		1103306	0					
ANR	1103311	IdentifierDeclType	char * *		1103306	0					
ANR	1103312	Identifier	ptr		1103306	1					
ANR	1103313	IdentifierDeclStatement	int command_port = - 1 ;	1537:1:38087:38109	1103306	1	True				
ANR	1103314	IdentifierDecl	command_port = - 1		1103306	0					
ANR	1103315	IdentifierDeclType	int		1103306	0					
ANR	1103316	Identifier	command_port		1103306	1					
ANR	1103317	AssignmentExpression	command_port = - 1		1103306	2		=			
ANR	1103318	Identifier	command_port		1103306	0					
ANR	1103319	UnaryOperationExpression	- 1		1103306	1					
ANR	1103320	UnaryOperator	-		1103306	0					
ANR	1103321	PrimaryExpression	1		1103306	1					
ANR	1103322	IdentifierDeclStatement	char const * daemon_sock_name = NULL ;	1538:1:38112:38147	1103306	2	True				
ANR	1103323	IdentifierDecl	* daemon_sock_name = NULL		1103306	0					
ANR	1103324	IdentifierDeclType	char const *		1103306	0					
ANR	1103325	Identifier	daemon_sock_name		1103306	1					
ANR	1103326	AssignmentExpression	* daemon_sock_name = NULL		1103306	2		=			
ANR	1103327	Identifier	NULL		1103306	0					
ANR	1103328	Identifier	NULL		1103306	1					
ANR	1103329	IdentifierDeclStatement	int dcargs = 0 ;	1539:1:38150:38165	1103306	3	True				
ANR	1103330	IdentifierDecl	dcargs = 0		1103306	0					
ANR	1103331	IdentifierDeclType	int		1103306	0					
ANR	1103332	Identifier	dcargs		1103306	1					
ANR	1103333	AssignmentExpression	dcargs = 0		1103306	2		=			
ANR	1103334	Identifier	dcargs		1103306	0					
ANR	1103335	PrimaryExpression	0		1103306	1					
ANR	1103336	IdentifierDeclStatement	"char * ptmp , * ptmp1 ;"	1540:1:38218:38236	1103306	4	True				
ANR	1103337	IdentifierDecl	* ptmp		1103306	0					
ANR	1103338	IdentifierDeclType	char *		1103306	0					
ANR	1103339	Identifier	ptmp		1103306	1					
ANR	1103340	IdentifierDecl	* ptmp1		1103306	1					
ANR	1103341	IdentifierDeclType	char *		1103306	0					
ANR	1103342	Identifier	ptmp1		1103306	1					
ANR	1103343	IdentifierDeclStatement	int i ;	1541:1:38239:38245	1103306	5	True				
ANR	1103344	IdentifierDecl	i		1103306	0					
ANR	1103345	IdentifierDeclType	int		1103306	0					
ANR	1103346	Identifier	i		1103306	1					
ANR	1103347	IdentifierDeclStatement	"int wantsKill = FALSE , wantsQuiet = FALSE ;"	1542:1:38248:38290	1103306	6	True				
ANR	1103348	IdentifierDecl	wantsKill = FALSE		1103306	0					
ANR	1103349	IdentifierDeclType	int		1103306	0					
ANR	1103350	Identifier	wantsKill		1103306	1					
ANR	1103351	AssignmentExpression	wantsKill = FALSE		1103306	2		=			
ANR	1103352	Identifier	FALSE		1103306	0					
ANR	1103353	Identifier	FALSE		1103306	1					
ANR	1103354	IdentifierDecl	wantsQuiet = FALSE		1103306	1					
ANR	1103355	IdentifierDeclType	int		1103306	0					
ANR	1103356	Identifier	wantsQuiet		1103306	1					
ANR	1103357	AssignmentExpression	wantsQuiet = FALSE		1103306	2		=			
ANR	1103358	Identifier	FALSE		1103306	0					
ANR	1103359	Identifier	FALSE		1103306	1					
ANR	1103360	IdentifierDeclStatement	bool done ;	1543:1:38293:38302	1103306	7	True				
ANR	1103361	IdentifierDecl	done		1103306	0					
ANR	1103362	IdentifierDeclType	bool		1103306	0					
ANR	1103363	Identifier	done		1103306	1					
ANR	1103364	ExpressionStatement	condor_main_argc = argc	1546:1:38307:38330	1103306	8	True				
ANR	1103365	AssignmentExpression	condor_main_argc = argc		1103306	0		=			
ANR	1103366	Identifier	condor_main_argc		1103306	0					
ANR	1103367	Identifier	argc		1103306	1					
ANR	1103368	ExpressionStatement	condor_main_argv = ( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )	1547:1:38333:38392	1103306	9	True				
ANR	1103369	AssignmentExpression	condor_main_argv = ( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )		1103306	0		=			
ANR	1103370	Identifier	condor_main_argv		1103306	0					
ANR	1103371	CastExpression	( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )		1103306	1					
ANR	1103372	CastTarget	char * *		1103306	0					
ANR	1103373	CallExpression	malloc ( ( argc + 1 ) * sizeof ( char * ) )		1103306	1					
ANR	1103374	Callee	malloc		1103306	0					
ANR	1103375	Identifier	malloc		1103306	0					
ANR	1103376	ArgumentList	( argc + 1 ) * sizeof ( char * )		1103306	1					
ANR	1103377	Argument	( argc + 1 ) * sizeof ( char * )		1103306	0					
ANR	1103378	MultiplicativeExpression	( argc + 1 ) * sizeof ( char * )		1103306	0		*			
ANR	1103379	AdditiveExpression	argc + 1		1103306	0		+			
ANR	1103380	Identifier	argc		1103306	0					
ANR	1103381	PrimaryExpression	1		1103306	1					
ANR	1103382	SizeofExpression	sizeof ( char * )		1103306	1					
ANR	1103383	Sizeof	sizeof		1103306	0					
ANR	1103384	SizeofOperand	char *		1103306	1					
ANR	1103385	ForStatement	for ( i = 0 ; i < argc ; i ++ )		1103306	10					
ANR	1103386	ForInit	i = 0 ;	1548:5:38399:38402	1103306	0	True				
ANR	1103387	AssignmentExpression	i = 0		1103306	0		=			
ANR	1103388	Identifier	i		1103306	0					
ANR	1103389	PrimaryExpression	0		1103306	1					
ANR	1103390	Condition	i < argc	1548:9:38403:38408	1103306	1	True				
ANR	1103391	RelationalExpression	i < argc		1103306	0		<			
ANR	1103392	Identifier	i		1103306	0					
ANR	1103393	Identifier	argc		1103306	1					
ANR	1103394	PostIncDecOperationExpression	i ++	1548:16:38410:38412	1103306	2	True				
ANR	1103395	Identifier	i		1103306	0					
ANR	1103396	IncDec	++		1103306	1					
ANR	1103397	CompoundStatement		14:21:343:343	1103306	3					
ANR	1103398	ExpressionStatement	condor_main_argv [ i ] = strdup ( argv [ i ] )	1549:2:38419:38456	1103306	0	True				
ANR	1103399	AssignmentExpression	condor_main_argv [ i ] = strdup ( argv [ i ] )		1103306	0		=			
ANR	1103400	ArrayIndexing	condor_main_argv [ i ]		1103306	0					
ANR	1103401	Identifier	condor_main_argv		1103306	0					
ANR	1103402	Identifier	i		1103306	1					
ANR	1103403	CallExpression	strdup ( argv [ i ] )		1103306	1					
ANR	1103404	Callee	strdup		1103306	0					
ANR	1103405	Identifier	strdup		1103306	0					
ANR	1103406	ArgumentList	argv [ i ]		1103306	1					
ANR	1103407	Argument	argv [ i ]		1103306	0					
ANR	1103408	ArrayIndexing	argv [ i ]		1103306	0					
ANR	1103409	Identifier	argv		1103306	0					
ANR	1103410	Identifier	i		1103306	1					
ANR	1103411	ExpressionStatement	condor_main_argv [ i ] = NULL	1551:1:38462:38488	1103306	11	True				
ANR	1103412	AssignmentExpression	condor_main_argv [ i ] = NULL		1103306	0		=			
ANR	1103413	ArrayIndexing	condor_main_argv [ i ]		1103306	0					
ANR	1103414	Identifier	condor_main_argv		1103306	0					
ANR	1103415	Identifier	i		1103306	1					
ANR	1103416	Identifier	NULL		1103306	1					
ANR	1103417	ExpressionStatement	_set_printf_count_output ( TRUE )	1556:1:38583:38613	1103306	12	True				
ANR	1103418	CallExpression	_set_printf_count_output ( TRUE )		1103306	0					
ANR	1103419	Callee	_set_printf_count_output		1103306	0					
ANR	1103420	Identifier	_set_printf_count_output		1103306	0					
ANR	1103421	ArgumentList	TRUE		1103306	1					
ANR	1103422	Argument	TRUE		1103306	0					
ANR	1103423	Identifier	TRUE		1103306	0					
ANR	1103424	ExpressionStatement	umask ( 022 )	1562:1:38765:38777	1103306	13	True				
ANR	1103425	CallExpression	umask ( 022 )		1103306	0					
ANR	1103426	Callee	umask		1103306	0					
ANR	1103427	Identifier	umask		1103306	0					
ANR	1103428	ArgumentList	022		1103306	1					
ANR	1103429	Argument	022		1103306	0					
ANR	1103430	PrimaryExpression	022		1103306	0					
ANR	1103431	IdentifierDeclStatement	sigset_t fullset ;	1567:1:38890:38906	1103306	14	True				
ANR	1103432	IdentifierDecl	fullset		1103306	0					
ANR	1103433	IdentifierDeclType	sigset_t		1103306	0					
ANR	1103434	Identifier	fullset		1103306	1					
ANR	1103435	ExpressionStatement	sigfillset ( & fullset )	1568:1:38909:38931	1103306	15	True				
ANR	1103436	CallExpression	sigfillset ( & fullset )		1103306	0					
ANR	1103437	Callee	sigfillset		1103306	0					
ANR	1103438	Identifier	sigfillset		1103306	0					
ANR	1103439	ArgumentList	& fullset		1103306	1					
ANR	1103440	Argument	& fullset		1103306	0					
ANR	1103441	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103442	UnaryOperator	&		1103306	0					
ANR	1103443	Identifier	fullset		1103306	1					
ANR	1103444	ExpressionStatement	"sigdelset ( & fullset , SIGSEGV )"	1570:4:38992:39020	1103306	16	True				
ANR	1103445	CallExpression	"sigdelset ( & fullset , SIGSEGV )"		1103306	0					
ANR	1103446	Callee	sigdelset		1103306	0					
ANR	1103447	Identifier	sigdelset		1103306	0					
ANR	1103448	ArgumentList	& fullset		1103306	1					
ANR	1103449	Argument	& fullset		1103306	0					
ANR	1103450	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103451	UnaryOperator	&		1103306	0					
ANR	1103452	Identifier	fullset		1103306	1					
ANR	1103453	Argument	SIGSEGV		1103306	1					
ANR	1103454	Identifier	SIGSEGV		1103306	0					
ANR	1103455	ExpressionStatement	"sigdelset ( & fullset , SIGABRT )"	1571:4:39057:39085	1103306	17	True				
ANR	1103456	CallExpression	"sigdelset ( & fullset , SIGABRT )"		1103306	0					
ANR	1103457	Callee	sigdelset		1103306	0					
ANR	1103458	Identifier	sigdelset		1103306	0					
ANR	1103459	ArgumentList	& fullset		1103306	1					
ANR	1103460	Argument	& fullset		1103306	0					
ANR	1103461	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103462	UnaryOperator	&		1103306	0					
ANR	1103463	Identifier	fullset		1103306	1					
ANR	1103464	Argument	SIGABRT		1103306	1					
ANR	1103465	Identifier	SIGABRT		1103306	0					
ANR	1103466	ExpressionStatement	"sigdelset ( & fullset , SIGILL )"	1572:4:39136:39163	1103306	18	True				
ANR	1103467	CallExpression	"sigdelset ( & fullset , SIGILL )"		1103306	0					
ANR	1103468	Callee	sigdelset		1103306	0					
ANR	1103469	Identifier	sigdelset		1103306	0					
ANR	1103470	ArgumentList	& fullset		1103306	1					
ANR	1103471	Argument	& fullset		1103306	0					
ANR	1103472	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103473	UnaryOperator	&		1103306	0					
ANR	1103474	Identifier	fullset		1103306	1					
ANR	1103475	Argument	SIGILL		1103306	1					
ANR	1103476	Identifier	SIGILL		1103306	0					
ANR	1103477	ExpressionStatement	"sigdelset ( & fullset , SIGBUS )"	1573:4:39201:39228	1103306	19	True				
ANR	1103478	CallExpression	"sigdelset ( & fullset , SIGBUS )"		1103306	0					
ANR	1103479	Callee	sigdelset		1103306	0					
ANR	1103480	Identifier	sigdelset		1103306	0					
ANR	1103481	ArgumentList	& fullset		1103306	1					
ANR	1103482	Argument	& fullset		1103306	0					
ANR	1103483	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103484	UnaryOperator	&		1103306	0					
ANR	1103485	Identifier	fullset		1103306	1					
ANR	1103486	Argument	SIGBUS		1103306	1					
ANR	1103487	Identifier	SIGBUS		1103306	0					
ANR	1103488	ExpressionStatement	"sigdelset ( & fullset , SIGFPE )"	1574:4:39266:39293	1103306	20	True				
ANR	1103489	CallExpression	"sigdelset ( & fullset , SIGFPE )"		1103306	0					
ANR	1103490	Callee	sigdelset		1103306	0					
ANR	1103491	Identifier	sigdelset		1103306	0					
ANR	1103492	ArgumentList	& fullset		1103306	1					
ANR	1103493	Argument	& fullset		1103306	0					
ANR	1103494	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103495	UnaryOperator	&		1103306	0					
ANR	1103496	Identifier	fullset		1103306	1					
ANR	1103497	Argument	SIGFPE		1103306	1					
ANR	1103498	Identifier	SIGFPE		1103306	0					
ANR	1103499	ExpressionStatement	"sigdelset ( & fullset , SIGTRAP )"	1575:4:39331:39359	1103306	21	True				
ANR	1103500	CallExpression	"sigdelset ( & fullset , SIGTRAP )"		1103306	0					
ANR	1103501	Callee	sigdelset		1103306	0					
ANR	1103502	Identifier	sigdelset		1103306	0					
ANR	1103503	ArgumentList	& fullset		1103306	1					
ANR	1103504	Argument	& fullset		1103306	0					
ANR	1103505	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103506	UnaryOperator	&		1103306	0					
ANR	1103507	Identifier	fullset		1103306	1					
ANR	1103508	Argument	SIGTRAP		1103306	1					
ANR	1103509	Identifier	SIGTRAP		1103306	0					
ANR	1103510	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"	1576:1:39399:39441	1103306	22	True				
ANR	1103511	CallExpression	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"		1103306	0					
ANR	1103512	Callee	sigprocmask		1103306	0					
ANR	1103513	Identifier	sigprocmask		1103306	0					
ANR	1103514	ArgumentList	SIG_SETMASK		1103306	1					
ANR	1103515	Argument	SIG_SETMASK		1103306	0					
ANR	1103516	Identifier	SIG_SETMASK		1103306	0					
ANR	1103517	Argument	& fullset		1103306	1					
ANR	1103518	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103519	UnaryOperator	&		1103306	0					
ANR	1103520	Identifier	fullset		1103306	1					
ANR	1103521	Argument	NULL		1103306	2					
ANR	1103522	Identifier	NULL		1103306	0					
ANR	1103523	ExpressionStatement	"install_sig_handler_with_mask ( SIGQUIT , & fullset , unix_sigquit )"	1580:1:39556:39618	1103306	23	True				
ANR	1103524	CallExpression	"install_sig_handler_with_mask ( SIGQUIT , & fullset , unix_sigquit )"		1103306	0					
ANR	1103525	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103526	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103527	ArgumentList	SIGQUIT		1103306	1					
ANR	1103528	Argument	SIGQUIT		1103306	0					
ANR	1103529	Identifier	SIGQUIT		1103306	0					
ANR	1103530	Argument	& fullset		1103306	1					
ANR	1103531	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103532	UnaryOperator	&		1103306	0					
ANR	1103533	Identifier	fullset		1103306	1					
ANR	1103534	Argument	unix_sigquit		1103306	2					
ANR	1103535	Identifier	unix_sigquit		1103306	0					
ANR	1103536	ExpressionStatement	"install_sig_handler_with_mask ( SIGHUP , & fullset , unix_sighup )"	1581:1:39621:39681	1103306	24	True				
ANR	1103537	CallExpression	"install_sig_handler_with_mask ( SIGHUP , & fullset , unix_sighup )"		1103306	0					
ANR	1103538	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103539	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103540	ArgumentList	SIGHUP		1103306	1					
ANR	1103541	Argument	SIGHUP		1103306	0					
ANR	1103542	Identifier	SIGHUP		1103306	0					
ANR	1103543	Argument	& fullset		1103306	1					
ANR	1103544	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103545	UnaryOperator	&		1103306	0					
ANR	1103546	Identifier	fullset		1103306	1					
ANR	1103547	Argument	unix_sighup		1103306	2					
ANR	1103548	Identifier	unix_sighup		1103306	0					
ANR	1103549	ExpressionStatement	"install_sig_handler_with_mask ( SIGTERM , & fullset , unix_sigterm )"	1582:1:39684:39746	1103306	25	True				
ANR	1103550	CallExpression	"install_sig_handler_with_mask ( SIGTERM , & fullset , unix_sigterm )"		1103306	0					
ANR	1103551	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103552	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103553	ArgumentList	SIGTERM		1103306	1					
ANR	1103554	Argument	SIGTERM		1103306	0					
ANR	1103555	Identifier	SIGTERM		1103306	0					
ANR	1103556	Argument	& fullset		1103306	1					
ANR	1103557	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103558	UnaryOperator	&		1103306	0					
ANR	1103559	Identifier	fullset		1103306	1					
ANR	1103560	Argument	unix_sigterm		1103306	2					
ANR	1103561	Identifier	unix_sigterm		1103306	0					
ANR	1103562	ExpressionStatement	"install_sig_handler_with_mask ( SIGCHLD , & fullset , unix_sigchld )"	1583:1:39749:39811	1103306	26	True				
ANR	1103563	CallExpression	"install_sig_handler_with_mask ( SIGCHLD , & fullset , unix_sigchld )"		1103306	0					
ANR	1103564	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103565	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103566	ArgumentList	SIGCHLD		1103306	1					
ANR	1103567	Argument	SIGCHLD		1103306	0					
ANR	1103568	Identifier	SIGCHLD		1103306	0					
ANR	1103569	Argument	& fullset		1103306	1					
ANR	1103570	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103571	UnaryOperator	&		1103306	0					
ANR	1103572	Identifier	fullset		1103306	1					
ANR	1103573	Argument	unix_sigchld		1103306	2					
ANR	1103574	Identifier	unix_sigchld		1103306	0					
ANR	1103575	ExpressionStatement	"install_sig_handler_with_mask ( SIGUSR1 , & fullset , unix_sigusr1 )"	1584:1:39814:39876	1103306	27	True				
ANR	1103576	CallExpression	"install_sig_handler_with_mask ( SIGUSR1 , & fullset , unix_sigusr1 )"		1103306	0					
ANR	1103577	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103578	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103579	ArgumentList	SIGUSR1		1103306	1					
ANR	1103580	Argument	SIGUSR1		1103306	0					
ANR	1103581	Identifier	SIGUSR1		1103306	0					
ANR	1103582	Argument	& fullset		1103306	1					
ANR	1103583	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103584	UnaryOperator	&		1103306	0					
ANR	1103585	Identifier	fullset		1103306	1					
ANR	1103586	Argument	unix_sigusr1		1103306	2					
ANR	1103587	Identifier	unix_sigusr1		1103306	0					
ANR	1103588	ExpressionStatement	"install_sig_handler_with_mask ( SIGUSR2 , & fullset , unix_sigusr2 )"	1585:1:39879:39941	1103306	28	True				
ANR	1103589	CallExpression	"install_sig_handler_with_mask ( SIGUSR2 , & fullset , unix_sigusr2 )"		1103306	0					
ANR	1103590	Callee	install_sig_handler_with_mask		1103306	0					
ANR	1103591	Identifier	install_sig_handler_with_mask		1103306	0					
ANR	1103592	ArgumentList	SIGUSR2		1103306	1					
ANR	1103593	Argument	SIGUSR2		1103306	0					
ANR	1103594	Identifier	SIGUSR2		1103306	0					
ANR	1103595	Argument	& fullset		1103306	1					
ANR	1103596	UnaryOperationExpression	& fullset		1103306	0					
ANR	1103597	UnaryOperator	&		1103306	0					
ANR	1103598	Identifier	fullset		1103306	1					
ANR	1103599	Argument	unix_sigusr2		1103306	2					
ANR	1103600	Identifier	unix_sigusr2		1103306	0					
ANR	1103601	ExpressionStatement	"install_sig_handler ( SIGPIPE , SIG_IGN )"	1586:1:39944:39982	1103306	29	True				
ANR	1103602	CallExpression	"install_sig_handler ( SIGPIPE , SIG_IGN )"		1103306	0					
ANR	1103603	Callee	install_sig_handler		1103306	0					
ANR	1103604	Identifier	install_sig_handler		1103306	0					
ANR	1103605	ArgumentList	SIGPIPE		1103306	1					
ANR	1103606	Argument	SIGPIPE		1103306	0					
ANR	1103607	Identifier	SIGPIPE		1103306	0					
ANR	1103608	Argument	SIG_IGN		1103306	1					
ANR	1103609	Identifier	SIG_IGN		1103306	0					
ANR	1103610	ExpressionStatement	_condor_myServiceName = argv [ 0 ]	1590:1:40013:40044	1103306	30	True				
ANR	1103611	AssignmentExpression	_condor_myServiceName = argv [ 0 ]		1103306	0		=			
ANR	1103612	Identifier	_condor_myServiceName		1103306	0					
ANR	1103613	ArrayIndexing	argv [ 0 ]		1103306	1					
ANR	1103614	Identifier	argv		1103306	0					
ANR	1103615	PrimaryExpression	0		1103306	1					
ANR	1103616	ExpressionStatement	myName = condor_basename ( argv [ 0 ] )	1592:1:40103:40136	1103306	31	True				
ANR	1103617	AssignmentExpression	myName = condor_basename ( argv [ 0 ] )		1103306	0		=			
ANR	1103618	Identifier	myName		1103306	0					
ANR	1103619	CallExpression	condor_basename ( argv [ 0 ] )		1103306	1					
ANR	1103620	Callee	condor_basename		1103306	0					
ANR	1103621	Identifier	condor_basename		1103306	0					
ANR	1103622	ArgumentList	argv [ 0 ]		1103306	1					
ANR	1103623	Argument	argv [ 0 ]		1103306	0					
ANR	1103624	ArrayIndexing	argv [ 0 ]		1103306	0					
ANR	1103625	Identifier	argv		1103306	0					
ANR	1103626	PrimaryExpression	0		1103306	1					
ANR	1103627	ExpressionStatement	myFullName = getExecPath ( )	1593:1:40139:40165	1103306	32	True				
ANR	1103628	AssignmentExpression	myFullName = getExecPath ( )		1103306	0		=			
ANR	1103629	Identifier	myFullName		1103306	0					
ANR	1103630	CallExpression	getExecPath ( )		1103306	1					
ANR	1103631	Callee	getExecPath		1103306	0					
ANR	1103632	Identifier	getExecPath		1103306	0					
ANR	1103633	ArgumentList			1103306	1					
ANR	1103634	IfStatement	if ( ! myFullName )		1103306	33					
ANR	1103635	Condition	! myFullName	1594:5:40172:40183	1103306	0	True				
ANR	1103636	UnaryOperationExpression	! myFullName		1103306	0					
ANR	1103637	UnaryOperator	!		1103306	0					
ANR	1103638	Identifier	myFullName		1103306	1					
ANR	1103639	CompoundStatement		60:20:2115:2115	1103306	1					
ANR	1103640	IfStatement	if ( argv [ 0 ] [ 0 ] == '/' )		1103306	0					
ANR	1103641	Condition	argv [ 0 ] [ 0 ] == '/'	1597:6:40303:40319	1103306	0	True				
ANR	1103642	EqualityExpression	argv [ 0 ] [ 0 ] == '/'		1103306	0		==			
ANR	1103643	ArrayIndexing	argv [ 0 ] [ 0 ]		1103306	0					
ANR	1103644	ArrayIndexing	argv [ 0 ]		1103306	0					
ANR	1103645	Identifier	argv		1103306	0					
ANR	1103646	PrimaryExpression	0		1103306	1					
ANR	1103647	PrimaryExpression	0		1103306	1					
ANR	1103648	PrimaryExpression	'/'		1103306	1					
ANR	1103649	CompoundStatement		63:26:2251:2251	1103306	1					
ANR	1103650	ExpressionStatement	myFullName = strdup ( argv [ 0 ] )	1599:3:40367:40395	1103306	0	True				
ANR	1103651	AssignmentExpression	myFullName = strdup ( argv [ 0 ] )		1103306	0		=			
ANR	1103652	Identifier	myFullName		1103306	0					
ANR	1103653	CallExpression	strdup ( argv [ 0 ] )		1103306	1					
ANR	1103654	Callee	strdup		1103306	0					
ANR	1103655	Identifier	strdup		1103306	0					
ANR	1103656	ArgumentList	argv [ 0 ]		1103306	1					
ANR	1103657	Argument	argv [ 0 ]		1103306	0					
ANR	1103658	ArrayIndexing	argv [ 0 ]		1103306	0					
ANR	1103659	Identifier	argv		1103306	0					
ANR	1103660	PrimaryExpression	0		1103306	1					
ANR	1103661	ElseStatement	else		1103306	0					
ANR	1103662	CompoundStatement		66:9:2334:2334	1103306	0					
ANR	1103663	ExpressionStatement	myFullName = NULL	1602:3:40467:40484	1103306	0	True				
ANR	1103664	AssignmentExpression	myFullName = NULL		1103306	0		=			
ANR	1103665	Identifier	myFullName		1103306	0					
ANR	1103666	Identifier	NULL		1103306	1					
ANR	1103667	ExpressionStatement	"myDistro -> Init ( argc , argv )"	1606:1:40495:40523	1103306	34	True				
ANR	1103668	CallExpression	"myDistro -> Init ( argc , argv )"		1103306	0					
ANR	1103669	Callee	myDistro -> Init		1103306	0					
ANR	1103670	PtrMemberAccess	myDistro -> Init		1103306	0					
ANR	1103671	Identifier	myDistro		1103306	0					
ANR	1103672	Identifier	Init		1103306	1					
ANR	1103673	ArgumentList	argc		1103306	1					
ANR	1103674	Argument	argc		1103306	0					
ANR	1103675	Identifier	argc		1103306	0					
ANR	1103676	Argument	argv		1103306	1					
ANR	1103677	Identifier	argv		1103306	0					
ANR	1103678	IfStatement	if ( EnvInit ( ) < 0 )		1103306	35					
ANR	1103679	Condition	EnvInit ( ) < 0	1607:6:40531:40543	1103306	0	True				
ANR	1103680	RelationalExpression	EnvInit ( ) < 0		1103306	0		<			
ANR	1103681	CallExpression	EnvInit ( )		1103306	0					
ANR	1103682	Callee	EnvInit		1103306	0					
ANR	1103683	Identifier	EnvInit		1103306	0					
ANR	1103684	ArgumentList			1103306	1					
ANR	1103685	PrimaryExpression	0		1103306	1					
ANR	1103686	CompoundStatement		73:22:2475:2475	1103306	1					
ANR	1103687	ExpressionStatement	exit ( 1 )	1608:2:40551:40560	1103306	0	True				
ANR	1103688	CallExpression	exit ( 1 )		1103306	0					
ANR	1103689	Callee	exit		1103306	0					
ANR	1103690	Identifier	exit		1103306	0					
ANR	1103691	ArgumentList	1		1103306	1					
ANR	1103692	Argument	1		1103306	0					
ANR	1103693	PrimaryExpression	1		1103306	0					
ANR	1103694	IfStatement	if ( dc_main_pre_dc_init )		1103306	36					
ANR	1103695	Condition	dc_main_pre_dc_init	1614:6:40724:40742	1103306	0	True				
ANR	1103696	Identifier	dc_main_pre_dc_init		1103306	0					
ANR	1103697	CompoundStatement		80:28:2674:2674	1103306	1					
ANR	1103698	ExpressionStatement	"dc_main_pre_dc_init ( argc , argv )"	1615:2:40750:40783	1103306	0	True				
ANR	1103699	CallExpression	"dc_main_pre_dc_init ( argc , argv )"		1103306	0					
ANR	1103700	Callee	dc_main_pre_dc_init		1103306	0					
ANR	1103701	Identifier	dc_main_pre_dc_init		1103306	0					
ANR	1103702	ArgumentList	argc		1103306	1					
ANR	1103703	Argument	argc		1103306	0					
ANR	1103704	Identifier	argc		1103306	0					
ANR	1103705	Argument	argv		1103306	1					
ANR	1103706	Identifier	argv		1103306	0					
ANR	1103707	IfStatement	if ( ! get_mySubSystem ( ) )		1103306	37					
ANR	1103708	Condition	! get_mySubSystem ( )	1621:5:40957:40975	1103306	0	True				
ANR	1103709	UnaryOperationExpression	! get_mySubSystem ( )		1103306	0					
ANR	1103710	UnaryOperator	!		1103306	0					
ANR	1103711	CallExpression	get_mySubSystem ( )		1103306	1					
ANR	1103712	Callee	get_mySubSystem		1103306	0					
ANR	1103713	Identifier	get_mySubSystem		1103306	0					
ANR	1103714	ArgumentList			1103306	1					
ANR	1103715	CompoundStatement		87:27:2907:2907	1103306	1					
ANR	1103716	ExpressionStatement	"EXCEPT ( ""Programmer error: get_mySubSystem() is NULL!"" )"	1622:2:40983:41039	1103306	0	True				
ANR	1103717	CallExpression	"EXCEPT ( ""Programmer error: get_mySubSystem() is NULL!"" )"		1103306	0					
ANR	1103718	Callee	EXCEPT		1103306	0					
ANR	1103719	Identifier	EXCEPT		1103306	0					
ANR	1103720	ArgumentList	"""Programmer error: get_mySubSystem() is NULL!"""		1103306	1					
ANR	1103721	Argument	"""Programmer error: get_mySubSystem() is NULL!"""		1103306	0					
ANR	1103722	PrimaryExpression	"""Programmer error: get_mySubSystem() is NULL!"""		1103306	0					
ANR	1103723	IfStatement	if ( ! get_mySubSystem ( ) -> isValid ( ) )		1103306	38					
ANR	1103724	Condition	! get_mySubSystem ( ) -> isValid ( )	1624:5:41049:41077	1103306	0	True				
ANR	1103725	UnaryOperationExpression	! get_mySubSystem ( ) -> isValid ( )		1103306	0					
ANR	1103726	UnaryOperator	!		1103306	0					
ANR	1103727	CallExpression	get_mySubSystem ( ) -> isValid ( )		1103306	1					
ANR	1103728	Callee	get_mySubSystem ( ) -> isValid		1103306	0					
ANR	1103729	PtrMemberAccess	get_mySubSystem ( ) -> isValid		1103306	0					
ANR	1103730	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1103731	Callee	get_mySubSystem		1103306	0					
ANR	1103732	Identifier	get_mySubSystem		1103306	0					
ANR	1103733	ArgumentList			1103306	1					
ANR	1103734	Identifier	isValid		1103306	1					
ANR	1103735	ArgumentList			1103306	1					
ANR	1103736	CompoundStatement		90:37:3009:3009	1103306	1					
ANR	1103737	ExpressionStatement	get_mySubSystem ( ) -> printf ( )	1625:2:41085:41113	1103306	0	True				
ANR	1103738	CallExpression	get_mySubSystem ( ) -> printf ( )		1103306	0					
ANR	1103739	Callee	get_mySubSystem ( ) -> printf		1103306	0					
ANR	1103740	PtrMemberAccess	get_mySubSystem ( ) -> printf		1103306	0					
ANR	1103741	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1103742	Callee	get_mySubSystem		1103306	0					
ANR	1103743	Identifier	get_mySubSystem		1103306	0					
ANR	1103744	ArgumentList			1103306	1					
ANR	1103745	Identifier	printf		1103306	1					
ANR	1103746	ArgumentList			1103306	1					
ANR	1103747	ExpressionStatement	"EXCEPT ( ""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getType ( ) , get_mySubSystem ( ) -> getTypeName ( ) )"	1626:2:41117:41297	1103306	1	True				
ANR	1103748	CallExpression	"EXCEPT ( ""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getType ( ) , get_mySubSystem ( ) -> getTypeName ( ) )"		1103306	0					
ANR	1103749	Callee	EXCEPT		1103306	0					
ANR	1103750	Identifier	EXCEPT		1103306	0					
ANR	1103751	ArgumentList	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		1103306	1					
ANR	1103752	Argument	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		1103306	0					
ANR	1103753	PrimaryExpression	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		1103306	0					
ANR	1103754	Argument	get_mySubSystem ( ) -> getName ( )		1103306	1					
ANR	1103755	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1103756	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1103757	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1103758	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1103759	Callee	get_mySubSystem		1103306	0					
ANR	1103760	Identifier	get_mySubSystem		1103306	0					
ANR	1103761	ArgumentList			1103306	1					
ANR	1103762	Identifier	getName		1103306	1					
ANR	1103763	ArgumentList			1103306	1					
ANR	1103764	Argument	get_mySubSystem ( ) -> getType ( )		1103306	2					
ANR	1103765	CallExpression	get_mySubSystem ( ) -> getType ( )		1103306	0					
ANR	1103766	Callee	get_mySubSystem ( ) -> getType		1103306	0					
ANR	1103767	PtrMemberAccess	get_mySubSystem ( ) -> getType		1103306	0					
ANR	1103768	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1103769	Callee	get_mySubSystem		1103306	0					
ANR	1103770	Identifier	get_mySubSystem		1103306	0					
ANR	1103771	ArgumentList			1103306	1					
ANR	1103772	Identifier	getType		1103306	1					
ANR	1103773	ArgumentList			1103306	1					
ANR	1103774	Argument	get_mySubSystem ( ) -> getTypeName ( )		1103306	3					
ANR	1103775	CallExpression	get_mySubSystem ( ) -> getTypeName ( )		1103306	0					
ANR	1103776	Callee	get_mySubSystem ( ) -> getTypeName		1103306	0					
ANR	1103777	PtrMemberAccess	get_mySubSystem ( ) -> getTypeName		1103306	0					
ANR	1103778	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1103779	Callee	get_mySubSystem		1103306	0					
ANR	1103780	Identifier	get_mySubSystem		1103306	0					
ANR	1103781	ArgumentList			1103306	1					
ANR	1103782	Identifier	getTypeName		1103306	1					
ANR	1103783	ArgumentList			1103306	1					
ANR	1103784	IfStatement	if ( ! dc_main_init )		1103306	39					
ANR	1103785	Condition	! dc_main_init	1632:6:41309:41321	1103306	0	True				
ANR	1103786	UnaryOperationExpression	! dc_main_init		1103306	0					
ANR	1103787	UnaryOperator	!		1103306	0					
ANR	1103788	Identifier	dc_main_init		1103306	1					
ANR	1103789	CompoundStatement		98:22:3253:3253	1103306	1					
ANR	1103790	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_init is NULL!"" )"	1633:2:41329:41380	1103306	0	True				
ANR	1103791	CallExpression	"EXCEPT ( ""Programmer error: dc_main_init is NULL!"" )"		1103306	0					
ANR	1103792	Callee	EXCEPT		1103306	0					
ANR	1103793	Identifier	EXCEPT		1103306	0					
ANR	1103794	ArgumentList	"""Programmer error: dc_main_init is NULL!"""		1103306	1					
ANR	1103795	Argument	"""Programmer error: dc_main_init is NULL!"""		1103306	0					
ANR	1103796	PrimaryExpression	"""Programmer error: dc_main_init is NULL!"""		1103306	0					
ANR	1103797	IfStatement	if ( ! dc_main_config )		1103306	40					
ANR	1103798	Condition	! dc_main_config	1635:6:41391:41405	1103306	0	True				
ANR	1103799	UnaryOperationExpression	! dc_main_config		1103306	0					
ANR	1103800	UnaryOperator	!		1103306	0					
ANR	1103801	Identifier	dc_main_config		1103306	1					
ANR	1103802	CompoundStatement		101:24:3337:3337	1103306	1					
ANR	1103803	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_config is NULL!"" )"	1636:2:41413:41466	1103306	0	True				
ANR	1103804	CallExpression	"EXCEPT ( ""Programmer error: dc_main_config is NULL!"" )"		1103306	0					
ANR	1103805	Callee	EXCEPT		1103306	0					
ANR	1103806	Identifier	EXCEPT		1103306	0					
ANR	1103807	ArgumentList	"""Programmer error: dc_main_config is NULL!"""		1103306	1					
ANR	1103808	Argument	"""Programmer error: dc_main_config is NULL!"""		1103306	0					
ANR	1103809	PrimaryExpression	"""Programmer error: dc_main_config is NULL!"""		1103306	0					
ANR	1103810	IfStatement	if ( ! dc_main_shutdown_fast )		1103306	41					
ANR	1103811	Condition	! dc_main_shutdown_fast	1638:6:41477:41498	1103306	0	True				
ANR	1103812	UnaryOperationExpression	! dc_main_shutdown_fast		1103306	0					
ANR	1103813	UnaryOperator	!		1103306	0					
ANR	1103814	Identifier	dc_main_shutdown_fast		1103306	1					
ANR	1103815	CompoundStatement		104:31:3430:3430	1103306	1					
ANR	1103816	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_shutdown_fast is NULL!"" )"	1639:2:41506:41566	1103306	0	True				
ANR	1103817	CallExpression	"EXCEPT ( ""Programmer error: dc_main_shutdown_fast is NULL!"" )"		1103306	0					
ANR	1103818	Callee	EXCEPT		1103306	0					
ANR	1103819	Identifier	EXCEPT		1103306	0					
ANR	1103820	ArgumentList	"""Programmer error: dc_main_shutdown_fast is NULL!"""		1103306	1					
ANR	1103821	Argument	"""Programmer error: dc_main_shutdown_fast is NULL!"""		1103306	0					
ANR	1103822	PrimaryExpression	"""Programmer error: dc_main_shutdown_fast is NULL!"""		1103306	0					
ANR	1103823	IfStatement	if ( ! dc_main_shutdown_graceful )		1103306	42					
ANR	1103824	Condition	! dc_main_shutdown_graceful	1641:6:41577:41602	1103306	0	True				
ANR	1103825	UnaryOperationExpression	! dc_main_shutdown_graceful		1103306	0					
ANR	1103826	UnaryOperator	!		1103306	0					
ANR	1103827	Identifier	dc_main_shutdown_graceful		1103306	1					
ANR	1103828	CompoundStatement		107:35:3534:3534	1103306	1					
ANR	1103829	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_shutdown_graceful is NULL!"" )"	1642:2:41610:41674	1103306	0	True				
ANR	1103830	CallExpression	"EXCEPT ( ""Programmer error: dc_main_shutdown_graceful is NULL!"" )"		1103306	0					
ANR	1103831	Callee	EXCEPT		1103306	0					
ANR	1103832	Identifier	EXCEPT		1103306	0					
ANR	1103833	ArgumentList	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		1103306	1					
ANR	1103834	Argument	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		1103306	0					
ANR	1103835	PrimaryExpression	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		1103306	0					
ANR	1103836	ExpressionStatement	i = 0	1647:1:41783:41788	1103306	43	True				
ANR	1103837	AssignmentExpression	i = 0		1103306	0		=			
ANR	1103838	Identifier	i		1103306	0					
ANR	1103839	PrimaryExpression	0		1103306	1					
ANR	1103840	ExpressionStatement	done = false	1648:1:41791:41803	1103306	44	True				
ANR	1103841	AssignmentExpression	done = false		1103306	0		=			
ANR	1103842	Identifier	done		1103306	0					
ANR	1103843	Identifier	false		1103306	1					
ANR	1103844	ForStatement	"for ( ptr = argv + 1 ; * ptr && ( i < argc - 1 ) ; ptr ++ , i ++ )"		1103306	45					
ANR	1103845	ForInit	ptr = argv + 1 ;	1650:5:41811:41825	1103306	0	True				
ANR	1103846	AssignmentExpression	ptr = argv + 1		1103306	0		=			
ANR	1103847	Identifier	ptr		1103306	0					
ANR	1103848	AdditiveExpression	argv + 1		1103306	1		+			
ANR	1103849	Identifier	argv		1103306	0					
ANR	1103850	PrimaryExpression	1		1103306	1					
ANR	1103851	Condition	* ptr && ( i < argc - 1 )	1650:21:41827:41848	1103306	1	True				
ANR	1103852	AndExpression	* ptr && ( i < argc - 1 )		1103306	0		&&			
ANR	1103853	UnaryOperationExpression	* ptr		1103306	0					
ANR	1103854	UnaryOperator	*		1103306	0					
ANR	1103855	Identifier	ptr		1103306	1					
ANR	1103856	RelationalExpression	i < argc - 1		1103306	1		<			
ANR	1103857	Identifier	i		1103306	0					
ANR	1103858	AdditiveExpression	argc - 1		1103306	1		-			
ANR	1103859	Identifier	argc		1103306	0					
ANR	1103860	PrimaryExpression	1		1103306	1					
ANR	1103861	Expression	"ptr ++ , i ++"	1650:45:41851:41859	1103306	2	True				
ANR	1103862	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1103863	Identifier	ptr		1103306	0					
ANR	1103864	IncDec	++		1103306	1					
ANR	1103865	PostIncDecOperationExpression	i ++		1103306	1					
ANR	1103866	Identifier	i		1103306	0					
ANR	1103867	IncDec	++		1103306	1					
ANR	1103868	CompoundStatement		116:56:3790:3790	1103306	3					
ANR	1103869	IfStatement	if ( ptr [ 0 ] [ 0 ] != '-' )		1103306	0					
ANR	1103870	Condition	ptr [ 0 ] [ 0 ] != '-'	1651:5:41869:41884	1103306	0	True				
ANR	1103871	EqualityExpression	ptr [ 0 ] [ 0 ] != '-'		1103306	0		!=			
ANR	1103872	ArrayIndexing	ptr [ 0 ] [ 0 ]		1103306	0					
ANR	1103873	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1103874	Identifier	ptr		1103306	0					
ANR	1103875	PrimaryExpression	0		1103306	1					
ANR	1103876	PrimaryExpression	0		1103306	1					
ANR	1103877	PrimaryExpression	'-'		1103306	1					
ANR	1103878	CompoundStatement		117:23:3815:3815	1103306	1					
ANR	1103879	BreakStatement	break ;	1652:3:41892:41897	1103306	0	True				
ANR	1103880	SwitchStatement	switch ( ptr [ 0 ] [ 1 ] )		1103306	1					
ANR	1103881	Condition	ptr [ 0 ] [ 1 ]	1667:9:42511:42519	1103306	0	True				
ANR	1103882	ArrayIndexing	ptr [ 0 ] [ 1 ]		1103306	0					
ANR	1103883	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1103884	Identifier	ptr		1103306	0					
ANR	1103885	PrimaryExpression	0		1103306	1					
ANR	1103886	PrimaryExpression	1		1103306	1					
ANR	1103887	CompoundStatement		133:20:4450:4450	1103306	1					
ANR	1103888	Label	case 'a' :	1668:2:42526:42534	1103306	0	True				
ANR	1103889	ExpressionStatement	ptr ++	1669:3:42572:42577	1103306	1	True				
ANR	1103890	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1103891	Identifier	ptr		1103306	0					
ANR	1103892	IncDec	++		1103306	1					
ANR	1103893	IfStatement	if ( ptr && * ptr )		1103306	2					
ANR	1103894	Condition	ptr && * ptr	1670:7:42586:42596	1103306	0	True				
ANR	1103895	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1103896	Identifier	ptr		1103306	0					
ANR	1103897	UnaryOperationExpression	* ptr		1103306	1					
ANR	1103898	UnaryOperator	*		1103306	0					
ANR	1103899	Identifier	ptr		1103306	1					
ANR	1103900	CompoundStatement		136:21:4528:4528	1103306	1					
ANR	1103901	ExpressionStatement	logAppend = * ptr	1671:4:42606:42622	1103306	0	True				
ANR	1103902	AssignmentExpression	logAppend = * ptr		1103306	0		=			
ANR	1103903	Identifier	logAppend		1103306	0					
ANR	1103904	UnaryOperationExpression	* ptr		1103306	1					
ANR	1103905	UnaryOperator	*		1103306	0					
ANR	1103906	Identifier	ptr		1103306	1					
ANR	1103907	ExpressionStatement	dcargs += 2	1672:4:42628:42639	1103306	1	True				
ANR	1103908	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1103909	Identifier	dcargs		1103306	0					
ANR	1103910	PrimaryExpression	2		1103306	1					
ANR	1103911	ElseStatement	else		1103306	0					
ANR	1103912	CompoundStatement		139:10:4579:4579	1103306	0					
ANR	1103913	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -append needs another argument.\\n"" )"	1674:4:42657:42738	1103306	0	True				
ANR	1103914	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -append needs another argument.\\n"" )"		1103306	0					
ANR	1103915	Callee	fprintf		1103306	0					
ANR	1103916	Identifier	fprintf		1103306	0					
ANR	1103917	ArgumentList	stderr		1103306	1					
ANR	1103918	Argument	stderr		1103306	0					
ANR	1103919	Identifier	stderr		1103306	0					
ANR	1103920	Argument	"""DaemonCore: ERROR: -append needs another argument.\\n"""		1103306	1					
ANR	1103921	PrimaryExpression	"""DaemonCore: ERROR: -append needs another argument.\\n"""		1103306	0					
ANR	1103922	ExpressionStatement	"fprintf ( stderr , ""   Please specify a string to append to our log's filename.\\n"" )"	1676:4:42744:42833	1103306	1	True				
ANR	1103923	CallExpression	"fprintf ( stderr , ""   Please specify a string to append to our log's filename.\\n"" )"		1103306	0					
ANR	1103924	Callee	fprintf		1103306	0					
ANR	1103925	Identifier	fprintf		1103306	0					
ANR	1103926	ArgumentList	stderr		1103306	1					
ANR	1103927	Argument	stderr		1103306	0					
ANR	1103928	Identifier	stderr		1103306	0					
ANR	1103929	Argument	"""   Please specify a string to append to our log's filename.\\n"""		1103306	1					
ANR	1103930	PrimaryExpression	"""   Please specify a string to append to our log's filename.\\n"""		1103306	0					
ANR	1103931	ExpressionStatement	exit ( 1 )	1678:4:42839:42848	1103306	2	True				
ANR	1103932	CallExpression	exit ( 1 )		1103306	0					
ANR	1103933	Callee	exit		1103306	0					
ANR	1103934	Identifier	exit		1103306	0					
ANR	1103935	ArgumentList	1		1103306	1					
ANR	1103936	Argument	1		1103306	0					
ANR	1103937	PrimaryExpression	1		1103306	0					
ANR	1103938	BreakStatement	break ;	1680:3:42858:42863	1103306	3	True				
ANR	1103939	Label	case 'b' :	1681:2:42867:42875	1103306	4	True				
ANR	1103940	ExpressionStatement	Foreground = 0	1682:3:42912:42926	1103306	5	True				
ANR	1103941	AssignmentExpression	Foreground = 0		1103306	0		=			
ANR	1103942	Identifier	Foreground		1103306	0					
ANR	1103943	PrimaryExpression	0		1103306	1					
ANR	1103944	ExpressionStatement	dcargs ++	1683:3:42931:42939	1103306	6	True				
ANR	1103945	PostIncDecOperationExpression	dcargs ++		1103306	0					
ANR	1103946	Identifier	dcargs		1103306	0					
ANR	1103947	IncDec	++		1103306	1					
ANR	1103948	BreakStatement	break ;	1684:3:42944:42949	1103306	7	True				
ANR	1103949	Label	case 'c' :	1685:2:42953:42961	1103306	8	True				
ANR	1103950	ExpressionStatement	ptr ++	1686:3:43012:43017	1103306	9	True				
ANR	1103951	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1103952	Identifier	ptr		1103306	0					
ANR	1103953	IncDec	++		1103306	1					
ANR	1103954	IfStatement	if ( ptr && * ptr )		1103306	10					
ANR	1103955	Condition	ptr && * ptr	1687:7:43026:43036	1103306	0	True				
ANR	1103956	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1103957	Identifier	ptr		1103306	0					
ANR	1103958	UnaryOperationExpression	* ptr		1103306	1					
ANR	1103959	UnaryOperator	*		1103306	0					
ANR	1103960	Identifier	ptr		1103306	1					
ANR	1103961	CompoundStatement		153:21:4968:4968	1103306	1					
ANR	1103962	ExpressionStatement	ptmp = * ptr	1688:4:43046:43057	1103306	0	True				
ANR	1103963	AssignmentExpression	ptmp = * ptr		1103306	0		=			
ANR	1103964	Identifier	ptmp		1103306	0					
ANR	1103965	UnaryOperationExpression	* ptr		1103306	1					
ANR	1103966	UnaryOperator	*		1103306	0					
ANR	1103967	Identifier	ptr		1103306	1					
ANR	1103968	ExpressionStatement	dcargs += 2	1689:4:43063:43074	1103306	1	True				
ANR	1103969	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1103970	Identifier	dcargs		1103306	0					
ANR	1103971	PrimaryExpression	2		1103306	1					
ANR	1103972	ExpressionStatement	ptmp1 = ( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )	1691:4:43081:43151	1103306	2	True				
ANR	1103973	AssignmentExpression	ptmp1 = ( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		1103306	0		=			
ANR	1103974	Identifier	ptmp1		1103306	0					
ANR	1103975	CastExpression	( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		1103306	1					
ANR	1103976	CastTarget	char *		1103306	0					
ANR	1103977	CallExpression	malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		1103306	1					
ANR	1103978	Callee	malloc		1103306	0					
ANR	1103979	Identifier	malloc		1103306	0					
ANR	1103980	ArgumentList	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		1103306	1					
ANR	1103981	Argument	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		1103306	0					
ANR	1103982	AdditiveExpression	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		1103306	0		+			
ANR	1103983	CallExpression	strlen ( ptmp )		1103306	0					
ANR	1103984	Callee	strlen		1103306	0					
ANR	1103985	Identifier	strlen		1103306	0					
ANR	1103986	ArgumentList	ptmp		1103306	1					
ANR	1103987	Argument	ptmp		1103306	0					
ANR	1103988	Identifier	ptmp		1103306	0					
ANR	1103989	AdditiveExpression	myDistro -> GetLen ( ) + 10		1103306	1		+			
ANR	1103990	CallExpression	myDistro -> GetLen ( )		1103306	0					
ANR	1103991	Callee	myDistro -> GetLen		1103306	0					
ANR	1103992	PtrMemberAccess	myDistro -> GetLen		1103306	0					
ANR	1103993	Identifier	myDistro		1103306	0					
ANR	1103994	Identifier	GetLen		1103306	1					
ANR	1103995	ArgumentList			1103306	1					
ANR	1103996	PrimaryExpression	10		1103306	1					
ANR	1103997	IfStatement	if ( ptmp1 )		1103306	3					
ANR	1103998	Condition	ptmp1	1693:9:43162:43166	1103306	0	True				
ANR	1103999	Identifier	ptmp1		1103306	0					
ANR	1104000	CompoundStatement		159:17:5098:5098	1103306	1					
ANR	1104001	ExpressionStatement	"sprintf ( ptmp1 , ""%s_CONFIG=%s"" , myDistro -> GetUc ( ) , ptmp )"	1694:5:43177:43231	1103306	0	True				
ANR	1104002	CallExpression	"sprintf ( ptmp1 , ""%s_CONFIG=%s"" , myDistro -> GetUc ( ) , ptmp )"		1103306	0					
ANR	1104003	Callee	sprintf		1103306	0					
ANR	1104004	Identifier	sprintf		1103306	0					
ANR	1104005	ArgumentList	ptmp1		1103306	1					
ANR	1104006	Argument	ptmp1		1103306	0					
ANR	1104007	Identifier	ptmp1		1103306	0					
ANR	1104008	Argument	"""%s_CONFIG=%s"""		1103306	1					
ANR	1104009	PrimaryExpression	"""%s_CONFIG=%s"""		1103306	0					
ANR	1104010	Argument	myDistro -> GetUc ( )		1103306	2					
ANR	1104011	CallExpression	myDistro -> GetUc ( )		1103306	0					
ANR	1104012	Callee	myDistro -> GetUc		1103306	0					
ANR	1104013	PtrMemberAccess	myDistro -> GetUc		1103306	0					
ANR	1104014	Identifier	myDistro		1103306	0					
ANR	1104015	Identifier	GetUc		1103306	1					
ANR	1104016	ArgumentList			1103306	1					
ANR	1104017	Argument	ptmp		1103306	3					
ANR	1104018	Identifier	ptmp		1103306	0					
ANR	1104019	ExpressionStatement	SetEnv ( ptmp1 )	1695:5:43238:43251	1103306	1	True				
ANR	1104020	CallExpression	SetEnv ( ptmp1 )		1103306	0					
ANR	1104021	Callee	SetEnv		1103306	0					
ANR	1104022	Identifier	SetEnv		1103306	0					
ANR	1104023	ArgumentList	ptmp1		1103306	1					
ANR	1104024	Argument	ptmp1		1103306	0					
ANR	1104025	Identifier	ptmp1		1103306	0					
ANR	1104026	ElseStatement	else		1103306	0					
ANR	1104027	CompoundStatement		163:10:5197:5197	1103306	0					
ANR	1104028	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -config needs another argument.\\n"" )"	1698:4:43275:43356	1103306	0	True				
ANR	1104029	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -config needs another argument.\\n"" )"		1103306	0					
ANR	1104030	Callee	fprintf		1103306	0					
ANR	1104031	Identifier	fprintf		1103306	0					
ANR	1104032	ArgumentList	stderr		1103306	1					
ANR	1104033	Argument	stderr		1103306	0					
ANR	1104034	Identifier	stderr		1103306	0					
ANR	1104035	Argument	"""DaemonCore: ERROR: -config needs another argument.\\n"""		1103306	1					
ANR	1104036	PrimaryExpression	"""DaemonCore: ERROR: -config needs another argument.\\n"""		1103306	0					
ANR	1104037	ExpressionStatement	"fprintf ( stderr , ""   Please specify the filename of the config file.\\n"" )"	1700:4:43362:43443	1103306	1	True				
ANR	1104038	CallExpression	"fprintf ( stderr , ""   Please specify the filename of the config file.\\n"" )"		1103306	0					
ANR	1104039	Callee	fprintf		1103306	0					
ANR	1104040	Identifier	fprintf		1103306	0					
ANR	1104041	ArgumentList	stderr		1103306	1					
ANR	1104042	Argument	stderr		1103306	0					
ANR	1104043	Identifier	stderr		1103306	0					
ANR	1104044	Argument	"""   Please specify the filename of the config file.\\n"""		1103306	1					
ANR	1104045	PrimaryExpression	"""   Please specify the filename of the config file.\\n"""		1103306	0					
ANR	1104046	ExpressionStatement	exit ( 1 )	1702:4:43449:43458	1103306	2	True				
ANR	1104047	CallExpression	exit ( 1 )		1103306	0					
ANR	1104048	Callee	exit		1103306	0					
ANR	1104049	Identifier	exit		1103306	0					
ANR	1104050	ArgumentList	1		1103306	1					
ANR	1104051	Argument	1		1103306	0					
ANR	1104052	PrimaryExpression	1		1103306	0					
ANR	1104053	BreakStatement	break ;	1704:3:43474:43479	1103306	11	True				
ANR	1104054	Label	case 'd' :	1705:2:43483:43491	1103306	12	True				
ANR	1104055	ExpressionStatement	DynamicDirs = true	1706:3:43526:43544	1103306	13	True				
ANR	1104056	AssignmentExpression	DynamicDirs = true		1103306	0		=			
ANR	1104057	Identifier	DynamicDirs		1103306	0					
ANR	1104058	Identifier	true		1103306	1					
ANR	1104059	ExpressionStatement	dcargs ++	1707:3:43549:43557	1103306	14	True				
ANR	1104060	PostIncDecOperationExpression	dcargs ++		1103306	0					
ANR	1104061	Identifier	dcargs		1103306	0					
ANR	1104062	IncDec	++		1103306	1					
ANR	1104063	BreakStatement	break ;	1708:3:43562:43567	1103306	15	True				
ANR	1104064	Label	case 'f' :	1709:2:43571:43579	1103306	16	True				
ANR	1104065	ExpressionStatement	Foreground = 1	1710:3:43606:43620	1103306	17	True				
ANR	1104066	AssignmentExpression	Foreground = 1		1103306	0		=			
ANR	1104067	Identifier	Foreground		1103306	0					
ANR	1104068	PrimaryExpression	1		1103306	1					
ANR	1104069	ExpressionStatement	dcargs ++	1711:3:43625:43633	1103306	18	True				
ANR	1104070	PostIncDecOperationExpression	dcargs ++		1103306	0					
ANR	1104071	Identifier	dcargs		1103306	0					
ANR	1104072	IncDec	++		1103306	1					
ANR	1104073	BreakStatement	break ;	1712:3:43638:43643	1103306	19	True				
ANR	1104074	Label	case 'k' :	1714:2:43661:43669	1103306	20	True				
ANR	1104075	ExpressionStatement	ptr ++	1715:3:43713:43718	1103306	21	True				
ANR	1104076	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104077	Identifier	ptr		1103306	0					
ANR	1104078	IncDec	++		1103306	1					
ANR	1104079	IfStatement	if ( ptr && * ptr )		1103306	22					
ANR	1104080	Condition	ptr && * ptr	1716:7:43727:43737	1103306	0	True				
ANR	1104081	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104082	Identifier	ptr		1103306	0					
ANR	1104083	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104084	UnaryOperator	*		1103306	0					
ANR	1104085	Identifier	ptr		1103306	1					
ANR	1104086	CompoundStatement		182:21:5669:5669	1103306	1					
ANR	1104087	ExpressionStatement	pidFile = * ptr	1717:4:43747:43761	1103306	0	True				
ANR	1104088	AssignmentExpression	pidFile = * ptr		1103306	0		=			
ANR	1104089	Identifier	pidFile		1103306	0					
ANR	1104090	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104091	UnaryOperator	*		1103306	0					
ANR	1104092	Identifier	ptr		1103306	1					
ANR	1104093	ExpressionStatement	wantsKill = TRUE	1718:4:43767:43783	1103306	1	True				
ANR	1104094	AssignmentExpression	wantsKill = TRUE		1103306	0		=			
ANR	1104095	Identifier	wantsKill		1103306	0					
ANR	1104096	Identifier	TRUE		1103306	1					
ANR	1104097	ExpressionStatement	dcargs += 2	1719:4:43789:43800	1103306	2	True				
ANR	1104098	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104099	Identifier	dcargs		1103306	0					
ANR	1104100	PrimaryExpression	2		1103306	1					
ANR	1104101	ElseStatement	else		1103306	0					
ANR	1104102	CompoundStatement		186:10:5740:5740	1103306	0					
ANR	1104103	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -kill needs another argument.\\n"" )"	1721:4:43818:43897	1103306	0	True				
ANR	1104104	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -kill needs another argument.\\n"" )"		1103306	0					
ANR	1104105	Callee	fprintf		1103306	0					
ANR	1104106	Identifier	fprintf		1103306	0					
ANR	1104107	ArgumentList	stderr		1103306	1					
ANR	1104108	Argument	stderr		1103306	0					
ANR	1104109	Identifier	stderr		1103306	0					
ANR	1104110	Argument	"""DaemonCore: ERROR: -kill needs another argument.\\n"""		1103306	1					
ANR	1104111	PrimaryExpression	"""DaemonCore: ERROR: -kill needs another argument.\\n"""		1103306	0					
ANR	1104112	ExpressionStatement	"fprintf ( stderr , ""   Please specify a file that holds the pid you want to kill.\\n"" )"	1723:4:43903:43994	1103306	1	True				
ANR	1104113	CallExpression	"fprintf ( stderr , ""   Please specify a file that holds the pid you want to kill.\\n"" )"		1103306	0					
ANR	1104114	Callee	fprintf		1103306	0					
ANR	1104115	Identifier	fprintf		1103306	0					
ANR	1104116	ArgumentList	stderr		1103306	1					
ANR	1104117	Argument	stderr		1103306	0					
ANR	1104118	Identifier	stderr		1103306	0					
ANR	1104119	Argument	"""   Please specify a file that holds the pid you want to kill.\\n"""		1103306	1					
ANR	1104120	PrimaryExpression	"""   Please specify a file that holds the pid you want to kill.\\n"""		1103306	0					
ANR	1104121	ExpressionStatement	exit ( 1 )	1725:4:44000:44009	1103306	2	True				
ANR	1104122	CallExpression	exit ( 1 )		1103306	0					
ANR	1104123	Callee	exit		1103306	0					
ANR	1104124	Identifier	exit		1103306	0					
ANR	1104125	ArgumentList	1		1103306	1					
ANR	1104126	Argument	1		1103306	0					
ANR	1104127	PrimaryExpression	1		1103306	0					
ANR	1104128	BreakStatement	break ;	1727:3:44019:44024	1103306	23	True				
ANR	1104129	Label	case 'l' :	1729:2:44035:44043	1103306	24	True				
ANR	1104130	IfStatement	"if ( strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0 )"		1103306	25					
ANR	1104131	Condition	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0"	1731:8:44101:44139	1103306	0	True				
ANR	1104132	EqualityExpression	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0"		1103306	0		==			
ANR	1104133	CallExpression	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" )"		1103306	0					
ANR	1104134	Callee	strcmp		1103306	0					
ANR	1104135	Identifier	strcmp		1103306	0					
ANR	1104136	ArgumentList	& ptr [ 0 ] [ 1 ]		1103306	1					
ANR	1104137	Argument	& ptr [ 0 ] [ 1 ]		1103306	0					
ANR	1104138	UnaryOperationExpression	& ptr [ 0 ] [ 1 ]		1103306	0					
ANR	1104139	UnaryOperator	&		1103306	0					
ANR	1104140	ArrayIndexing	ptr [ 0 ] [ 1 ]		1103306	1					
ANR	1104141	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1104142	Identifier	ptr		1103306	0					
ANR	1104143	PrimaryExpression	0		1103306	1					
ANR	1104144	PrimaryExpression	1		1103306	1					
ANR	1104145	Argument	"""local-name"""		1103306	1					
ANR	1104146	PrimaryExpression	"""local-name"""		1103306	0					
ANR	1104147	PrimaryExpression	0		1103306	1					
ANR	1104148	CompoundStatement		197:50:6071:6071	1103306	1					
ANR	1104149	ExpressionStatement	ptr ++	1732:4:44149:44154	1103306	0	True				
ANR	1104150	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104151	Identifier	ptr		1103306	0					
ANR	1104152	IncDec	++		1103306	1					
ANR	1104153	IfStatement	if ( ptr && * ptr )		1103306	1					
ANR	1104154	Condition	ptr && * ptr	1733:8:44164:44174	1103306	0	True				
ANR	1104155	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104156	Identifier	ptr		1103306	0					
ANR	1104157	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104158	UnaryOperator	*		1103306	0					
ANR	1104159	Identifier	ptr		1103306	1					
ANR	1104160	CompoundStatement		199:22:6106:6106	1103306	1					
ANR	1104161	ExpressionStatement	get_mySubSystem ( ) -> setLocalName ( * ptr )	1734:5:44185:44224	1103306	0	True				
ANR	1104162	CallExpression	get_mySubSystem ( ) -> setLocalName ( * ptr )		1103306	0					
ANR	1104163	Callee	get_mySubSystem ( ) -> setLocalName		1103306	0					
ANR	1104164	PtrMemberAccess	get_mySubSystem ( ) -> setLocalName		1103306	0					
ANR	1104165	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104166	Callee	get_mySubSystem		1103306	0					
ANR	1104167	Identifier	get_mySubSystem		1103306	0					
ANR	1104168	ArgumentList			1103306	1					
ANR	1104169	Identifier	setLocalName		1103306	1					
ANR	1104170	ArgumentList	* ptr		1103306	1					
ANR	1104171	Argument	* ptr		1103306	0					
ANR	1104172	UnaryOperationExpression	* ptr		1103306	0					
ANR	1104173	UnaryOperator	*		1103306	0					
ANR	1104174	Identifier	ptr		1103306	1					
ANR	1104175	ExpressionStatement	dcargs += 2	1735:5:44231:44242	1103306	1	True				
ANR	1104176	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104177	Identifier	dcargs		1103306	0					
ANR	1104178	PrimaryExpression	2		1103306	1					
ANR	1104179	ElseStatement	else		1103306	0					
ANR	1104180	CompoundStatement		203:9:6187:6187	1103306	0					
ANR	1104181	Statement	fprintf	1738:5:44266:44272	1103306	0	True				
ANR	1104182	Statement	(	1738:12:44273:44273	1103306	1	True				
ANR	1104183	Statement	stderr	1738:14:44275:44280	1103306	2	True				
ANR	1104184	Statement	","	1738:20:44281:44281	1103306	3	True				
ANR	1104185	Statement	"""DaemonCore: ERROR: """	1738:22:44283:44303	1103306	4	True				
ANR	1104186	Statement	"""-local-name needs another argument.\\n"""	1739:8:44313:44351	1103306	5	True				
ANR	1104187	Statement	)	1739:48:44353:44353	1103306	6	True				
ANR	1104188	ExpressionStatement		1739:49:44354:44354	1103306	7	True				
ANR	1104189	ExpressionStatement	"fprintf ( stderr , ""   Please specify the local config to use.\\n"" )"	1740:5:44361:44435	1103306	8	True				
ANR	1104190	CallExpression	"fprintf ( stderr , ""   Please specify the local config to use.\\n"" )"		1103306	0					
ANR	1104191	Callee	fprintf		1103306	0					
ANR	1104192	Identifier	fprintf		1103306	0					
ANR	1104193	ArgumentList	stderr		1103306	1					
ANR	1104194	Argument	stderr		1103306	0					
ANR	1104195	Identifier	stderr		1103306	0					
ANR	1104196	Argument	"""   Please specify the local config to use.\\n"""		1103306	1					
ANR	1104197	PrimaryExpression	"""   Please specify the local config to use.\\n"""		1103306	0					
ANR	1104198	ExpressionStatement	exit ( 1 )	1742:5:44442:44451	1103306	9	True				
ANR	1104199	CallExpression	exit ( 1 )		1103306	0					
ANR	1104200	Callee	exit		1103306	0					
ANR	1104201	Identifier	exit		1103306	0					
ANR	1104202	ArgumentList	1		1103306	1					
ANR	1104203	Argument	1		1103306	0					
ANR	1104204	PrimaryExpression	1		1103306	0					
ANR	1104205	ElseStatement	else		1103306	0					
ANR	1104206	CompoundStatement		213:8:6430:6430	1103306	0					
ANR	1104207	ExpressionStatement	ptr ++	1748:4:44508:44513	1103306	0	True				
ANR	1104208	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104209	Identifier	ptr		1103306	0					
ANR	1104210	IncDec	++		1103306	1					
ANR	1104211	IfStatement	if ( ptr && * ptr )		1103306	1					
ANR	1104212	Condition	ptr && * ptr	1749:8:44523:44533	1103306	0	True				
ANR	1104213	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104214	Identifier	ptr		1103306	0					
ANR	1104215	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104216	UnaryOperator	*		1103306	0					
ANR	1104217	Identifier	ptr		1103306	1					
ANR	1104218	CompoundStatement		215:22:6465:6465	1103306	1					
ANR	1104219	ExpressionStatement	logDir = * ptr	1750:5:44544:44557	1103306	0	True				
ANR	1104220	AssignmentExpression	logDir = * ptr		1103306	0		=			
ANR	1104221	Identifier	logDir		1103306	0					
ANR	1104222	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104223	UnaryOperator	*		1103306	0					
ANR	1104224	Identifier	ptr		1103306	1					
ANR	1104225	ExpressionStatement	dcargs += 2	1751:5:44564:44575	1103306	1	True				
ANR	1104226	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104227	Identifier	dcargs		1103306	0					
ANR	1104228	PrimaryExpression	2		1103306	1					
ANR	1104229	ElseStatement	else		1103306	0					
ANR	1104230	CompoundStatement		218:11:6516:6516	1103306	0					
ANR	1104231	Statement	fprintf	1753:5:44595:44601	1103306	0	True				
ANR	1104232	Statement	(	1753:12:44602:44602	1103306	1	True				
ANR	1104233	Statement	stderr	1753:14:44604:44609	1103306	2	True				
ANR	1104234	Statement	","	1753:20:44610:44610	1103306	3	True				
ANR	1104235	Statement	"""DaemonCore: ERROR: -log needs another """	1753:22:44612:44651	1103306	4	True				
ANR	1104236	Statement	"""argument\\n"""	1754:8:44661:44672	1103306	5	True				
ANR	1104237	Statement	)	1754:21:44674:44674	1103306	6	True				
ANR	1104238	ExpressionStatement		1754:22:44675:44675	1103306	7	True				
ANR	1104239	ExpressionStatement	exit ( 1 )	1755:5:44682:44691	1103306	8	True				
ANR	1104240	CallExpression	exit ( 1 )		1103306	0					
ANR	1104241	Callee	exit		1103306	0					
ANR	1104242	Identifier	exit		1103306	0					
ANR	1104243	ArgumentList	1		1103306	1					
ANR	1104244	Argument	1		1103306	0					
ANR	1104245	PrimaryExpression	1		1103306	0					
ANR	1104246	BreakStatement	break ;	1758:3:44707:44712	1103306	26	True				
ANR	1104247	Label	case 'h' :	1760:2:44717:44725	1103306	27	True				
ANR	1104248	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't' )		1103306	28					
ANR	1104249	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'	1761:8:44794:44822	1103306	0	True				
ANR	1104250	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'		1103306	0		&&			
ANR	1104251	ArrayIndexing	ptr [ 0 ] [ 2 ]		1103306	0					
ANR	1104252	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1104253	Identifier	ptr		1103306	0					
ANR	1104254	PrimaryExpression	0		1103306	1					
ANR	1104255	PrimaryExpression	2		1103306	1					
ANR	1104256	EqualityExpression	ptr [ 0 ] [ 2 ] == 't'		1103306	1		==			
ANR	1104257	ArrayIndexing	ptr [ 0 ] [ 2 ]		1103306	0					
ANR	1104258	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1104259	Identifier	ptr		1103306	0					
ANR	1104260	PrimaryExpression	0		1103306	1					
ANR	1104261	PrimaryExpression	2		1103306	1					
ANR	1104262	PrimaryExpression	't'		1103306	1					
ANR	1104263	CompoundStatement		227:40:6754:6754	1103306	1					
ANR	1104264	ExpressionStatement	ptr ++	1763:4:44861:44866	1103306	0	True				
ANR	1104265	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104266	Identifier	ptr		1103306	0					
ANR	1104267	IncDec	++		1103306	1					
ANR	1104268	IfStatement	if ( ptr && * ptr )		1103306	1					
ANR	1104269	Condition	ptr && * ptr	1764:8:44876:44886	1103306	0	True				
ANR	1104270	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104271	Identifier	ptr		1103306	0					
ANR	1104272	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104273	UnaryOperator	*		1103306	0					
ANR	1104274	Identifier	ptr		1103306	1					
ANR	1104275	CompoundStatement		230:22:6818:6818	1103306	1					
ANR	1104276	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -http no longer accepted.\\n"" )"	1765:5:44897:44973	1103306	0	True				
ANR	1104277	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -http no longer accepted.\\n"" )"		1103306	0					
ANR	1104278	Callee	fprintf		1103306	0					
ANR	1104279	Identifier	fprintf		1103306	0					
ANR	1104280	ArgumentList	stderr		1103306	1					
ANR	1104281	Argument	stderr		1103306	0					
ANR	1104282	Identifier	stderr		1103306	0					
ANR	1104283	Argument	"""DaemonCore: ERROR: -http no longer accepted.\\n"""		1103306	1					
ANR	1104284	PrimaryExpression	"""DaemonCore: ERROR: -http no longer accepted.\\n"""		1103306	0					
ANR	1104285	ExpressionStatement	exit ( 1 )	1767:5:44980:44989	1103306	1	True				
ANR	1104286	CallExpression	exit ( 1 )		1103306	0					
ANR	1104287	Callee	exit		1103306	0					
ANR	1104288	Identifier	exit		1103306	0					
ANR	1104289	ArgumentList	1		1103306	1					
ANR	1104290	Argument	1		1103306	0					
ANR	1104291	PrimaryExpression	1		1103306	0					
ANR	1104292	ElseStatement	else		1103306	0					
ANR	1104293	CompoundStatement		235:10:6935:6935	1103306	0					
ANR	1104294	ExpressionStatement	done = true	1773:4:45163:45174	1103306	0	True				
ANR	1104295	AssignmentExpression	done = true		1103306	0		=			
ANR	1104296	Identifier	done		1103306	0					
ANR	1104297	Identifier	true		1103306	1					
ANR	1104298	BreakStatement	break ;	1775:3:45184:45189	1103306	29	True				
ANR	1104299	Label	case 'p' :	1776:2:45193:45201	1103306	30	True				
ANR	1104300	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i' )		1103306	31					
ANR	1104301	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i'	1778:7:45312:45340	1103306	0	True				
ANR	1104302	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i'		1103306	0		&&			
ANR	1104303	ArrayIndexing	ptr [ 0 ] [ 2 ]		1103306	0					
ANR	1104304	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1104305	Identifier	ptr		1103306	0					
ANR	1104306	PrimaryExpression	0		1103306	1					
ANR	1104307	PrimaryExpression	2		1103306	1					
ANR	1104308	EqualityExpression	ptr [ 0 ] [ 2 ] == 'i'		1103306	1		==			
ANR	1104309	ArrayIndexing	ptr [ 0 ] [ 2 ]		1103306	0					
ANR	1104310	ArrayIndexing	ptr [ 0 ]		1103306	0					
ANR	1104311	Identifier	ptr		1103306	0					
ANR	1104312	PrimaryExpression	0		1103306	1					
ANR	1104313	PrimaryExpression	2		1103306	1					
ANR	1104314	PrimaryExpression	'i'		1103306	1					
ANR	1104315	CompoundStatement		244:39:7272:7272	1103306	1					
ANR	1104316	ExpressionStatement	ptr ++	1780:4:45376:45381	1103306	0	True				
ANR	1104317	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104318	Identifier	ptr		1103306	0					
ANR	1104319	IncDec	++		1103306	1					
ANR	1104320	IfStatement	if ( ptr && * ptr )		1103306	1					
ANR	1104321	Condition	ptr && * ptr	1781:8:45391:45401	1103306	0	True				
ANR	1104322	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104323	Identifier	ptr		1103306	0					
ANR	1104324	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104325	UnaryOperator	*		1103306	0					
ANR	1104326	Identifier	ptr		1103306	1					
ANR	1104327	CompoundStatement		247:22:7333:7333	1103306	1					
ANR	1104328	ExpressionStatement	pidFile = * ptr	1782:5:45412:45426	1103306	0	True				
ANR	1104329	AssignmentExpression	pidFile = * ptr		1103306	0		=			
ANR	1104330	Identifier	pidFile		1103306	0					
ANR	1104331	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104332	UnaryOperator	*		1103306	0					
ANR	1104333	Identifier	ptr		1103306	1					
ANR	1104334	ExpressionStatement	dcargs += 2	1783:5:45433:45444	1103306	1	True				
ANR	1104335	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104336	Identifier	dcargs		1103306	0					
ANR	1104337	PrimaryExpression	2		1103306	1					
ANR	1104338	ElseStatement	else		1103306	0					
ANR	1104339	CompoundStatement		250:11:7385:7385	1103306	0					
ANR	1104340	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -pidfile needs another argument.\\n"" )"	1785:5:45464:45547	1103306	0	True				
ANR	1104341	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -pidfile needs another argument.\\n"" )"		1103306	0					
ANR	1104342	Callee	fprintf		1103306	0					
ANR	1104343	Identifier	fprintf		1103306	0					
ANR	1104344	ArgumentList	stderr		1103306	1					
ANR	1104345	Argument	stderr		1103306	0					
ANR	1104346	Identifier	stderr		1103306	0					
ANR	1104347	Argument	"""DaemonCore: ERROR: -pidfile needs another argument.\\n"""		1103306	1					
ANR	1104348	PrimaryExpression	"""DaemonCore: ERROR: -pidfile needs another argument.\\n"""		1103306	0					
ANR	1104349	ExpressionStatement	"fprintf ( stderr , ""   Please specify a filename to store the pid.\\n"" )"	1787:5:45554:45632	1103306	1	True				
ANR	1104350	CallExpression	"fprintf ( stderr , ""   Please specify a filename to store the pid.\\n"" )"		1103306	0					
ANR	1104351	Callee	fprintf		1103306	0					
ANR	1104352	Identifier	fprintf		1103306	0					
ANR	1104353	ArgumentList	stderr		1103306	1					
ANR	1104354	Argument	stderr		1103306	0					
ANR	1104355	Identifier	stderr		1103306	0					
ANR	1104356	Argument	"""   Please specify a filename to store the pid.\\n"""		1103306	1					
ANR	1104357	PrimaryExpression	"""   Please specify a filename to store the pid.\\n"""		1103306	0					
ANR	1104358	ExpressionStatement	exit ( 1 )	1789:5:45639:45648	1103306	2	True				
ANR	1104359	CallExpression	exit ( 1 )		1103306	0					
ANR	1104360	Callee	exit		1103306	0					
ANR	1104361	Identifier	exit		1103306	0					
ANR	1104362	ArgumentList	1		1103306	1					
ANR	1104363	Argument	1		1103306	0					
ANR	1104364	PrimaryExpression	1		1103306	0					
ANR	1104365	ElseStatement	else		1103306	0					
ANR	1104366	CompoundStatement		257:10:7594:7594	1103306	0					
ANR	1104367	ExpressionStatement	ptr ++	1794:4:45770:45775	1103306	0	True				
ANR	1104368	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104369	Identifier	ptr		1103306	0					
ANR	1104370	IncDec	++		1103306	1					
ANR	1104371	IfStatement	if ( ptr && * ptr )		1103306	1					
ANR	1104372	Condition	ptr && * ptr	1795:8:45785:45795	1103306	0	True				
ANR	1104373	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104374	Identifier	ptr		1103306	0					
ANR	1104375	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104376	UnaryOperator	*		1103306	0					
ANR	1104377	Identifier	ptr		1103306	1					
ANR	1104378	CompoundStatement		261:22:7727:7727	1103306	1					
ANR	1104379	ExpressionStatement	command_port = atoi ( * ptr )	1796:5:45806:45833	1103306	0	True				
ANR	1104380	AssignmentExpression	command_port = atoi ( * ptr )		1103306	0		=			
ANR	1104381	Identifier	command_port		1103306	0					
ANR	1104382	CallExpression	atoi ( * ptr )		1103306	1					
ANR	1104383	Callee	atoi		1103306	0					
ANR	1104384	Identifier	atoi		1103306	0					
ANR	1104385	ArgumentList	* ptr		1103306	1					
ANR	1104386	Argument	* ptr		1103306	0					
ANR	1104387	UnaryOperationExpression	* ptr		1103306	0					
ANR	1104388	UnaryOperator	*		1103306	0					
ANR	1104389	Identifier	ptr		1103306	1					
ANR	1104390	ExpressionStatement	dcargs += 2	1797:5:45840:45851	1103306	1	True				
ANR	1104391	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104392	Identifier	dcargs		1103306	0					
ANR	1104393	PrimaryExpression	2		1103306	1					
ANR	1104394	ElseStatement	else		1103306	0					
ANR	1104395	CompoundStatement		264:11:7792:7792	1103306	0					
ANR	1104396	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -port needs another argument.\\n"" )"	1799:5:45871:45951	1103306	0	True				
ANR	1104397	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -port needs another argument.\\n"" )"		1103306	0					
ANR	1104398	Callee	fprintf		1103306	0					
ANR	1104399	Identifier	fprintf		1103306	0					
ANR	1104400	ArgumentList	stderr		1103306	1					
ANR	1104401	Argument	stderr		1103306	0					
ANR	1104402	Identifier	stderr		1103306	0					
ANR	1104403	Argument	"""DaemonCore: ERROR: -port needs another argument.\\n"""		1103306	1					
ANR	1104404	PrimaryExpression	"""DaemonCore: ERROR: -port needs another argument.\\n"""		1103306	0					
ANR	1104405	ExpressionStatement	"fprintf ( stderr , ""   Please specify the port to use for the command socket.\\n"" )"	1801:5:45958:46047	1103306	1	True				
ANR	1104406	CallExpression	"fprintf ( stderr , ""   Please specify the port to use for the command socket.\\n"" )"		1103306	0					
ANR	1104407	Callee	fprintf		1103306	0					
ANR	1104408	Identifier	fprintf		1103306	0					
ANR	1104409	ArgumentList	stderr		1103306	1					
ANR	1104410	Argument	stderr		1103306	0					
ANR	1104411	Identifier	stderr		1103306	0					
ANR	1104412	Argument	"""   Please specify the port to use for the command socket.\\n"""		1103306	1					
ANR	1104413	PrimaryExpression	"""   Please specify the port to use for the command socket.\\n"""		1103306	0					
ANR	1104414	ExpressionStatement	exit ( 1 )	1804:5:46055:46064	1103306	2	True				
ANR	1104415	CallExpression	exit ( 1 )		1103306	0					
ANR	1104416	Callee	exit		1103306	0					
ANR	1104417	Identifier	exit		1103306	0					
ANR	1104418	ArgumentList	1		1103306	1					
ANR	1104419	Argument	1		1103306	0					
ANR	1104420	PrimaryExpression	1		1103306	0					
ANR	1104421	BreakStatement	break ;	1807:3:46080:46085	1103306	32	True				
ANR	1104422	Label	case 'q' :	1808:2:46089:46097	1103306	33	True				
ANR	1104423	ExpressionStatement	wantsQuiet = TRUE	1809:3:46119:46136	1103306	34	True				
ANR	1104424	AssignmentExpression	wantsQuiet = TRUE		1103306	0		=			
ANR	1104425	Identifier	wantsQuiet		1103306	0					
ANR	1104426	Identifier	TRUE		1103306	1					
ANR	1104427	ExpressionStatement	dcargs ++	1810:3:46141:46149	1103306	35	True				
ANR	1104428	PostIncDecOperationExpression	dcargs ++		1103306	0					
ANR	1104429	Identifier	dcargs		1103306	0					
ANR	1104430	IncDec	++		1103306	1					
ANR	1104431	BreakStatement	break ;	1811:3:46154:46159	1103306	36	True				
ANR	1104432	Label	case 'r' :	1812:2:46166:46174	1103306	37	True				
ANR	1104433	ExpressionStatement	ptr ++	1813:3:46229:46234	1103306	38	True				
ANR	1104434	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104435	Identifier	ptr		1103306	0					
ANR	1104436	IncDec	++		1103306	1					
ANR	1104437	IfStatement	if ( ptr && * ptr )		1103306	39					
ANR	1104438	Condition	ptr && * ptr	1814:7:46243:46253	1103306	0	True				
ANR	1104439	AndExpression	ptr && * ptr		1103306	0		&&			
ANR	1104440	Identifier	ptr		1103306	0					
ANR	1104441	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104442	UnaryOperator	*		1103306	0					
ANR	1104443	Identifier	ptr		1103306	1					
ANR	1104444	CompoundStatement		280:21:8185:8185	1103306	1					
ANR	1104445	ExpressionStatement	runfor = atoi ( * ptr )	1815:4:46263:46284	1103306	0	True				
ANR	1104446	AssignmentExpression	runfor = atoi ( * ptr )		1103306	0		=			
ANR	1104447	Identifier	runfor		1103306	0					
ANR	1104448	CallExpression	atoi ( * ptr )		1103306	1					
ANR	1104449	Callee	atoi		1103306	0					
ANR	1104450	Identifier	atoi		1103306	0					
ANR	1104451	ArgumentList	* ptr		1103306	1					
ANR	1104452	Argument	* ptr		1103306	0					
ANR	1104453	UnaryOperationExpression	* ptr		1103306	0					
ANR	1104454	UnaryOperator	*		1103306	0					
ANR	1104455	Identifier	ptr		1103306	1					
ANR	1104456	ExpressionStatement	dcargs += 2	1816:4:46290:46301	1103306	1	True				
ANR	1104457	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104458	Identifier	dcargs		1103306	0					
ANR	1104459	PrimaryExpression	2		1103306	1					
ANR	1104460	ElseStatement	else		1103306	0					
ANR	1104461	CompoundStatement		284:8:8244:8244	1103306	0					
ANR	1104462	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -runfor needs another argument.\\n"" )"	1819:4:46322:46403	1103306	0	True				
ANR	1104463	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -runfor needs another argument.\\n"" )"		1103306	0					
ANR	1104464	Callee	fprintf		1103306	0					
ANR	1104465	Identifier	fprintf		1103306	0					
ANR	1104466	ArgumentList	stderr		1103306	1					
ANR	1104467	Argument	stderr		1103306	0					
ANR	1104468	Identifier	stderr		1103306	0					
ANR	1104469	Argument	"""DaemonCore: ERROR: -runfor needs another argument.\\n"""		1103306	1					
ANR	1104470	PrimaryExpression	"""DaemonCore: ERROR: -runfor needs another argument.\\n"""		1103306	0					
ANR	1104471	ExpressionStatement	"fprintf ( stderr , ""   Please specify the number of minutes to run for.\\n"" )"	1821:4:46409:46491	1103306	1	True				
ANR	1104472	CallExpression	"fprintf ( stderr , ""   Please specify the number of minutes to run for.\\n"" )"		1103306	0					
ANR	1104473	Callee	fprintf		1103306	0					
ANR	1104474	Identifier	fprintf		1103306	0					
ANR	1104475	ArgumentList	stderr		1103306	1					
ANR	1104476	Argument	stderr		1103306	0					
ANR	1104477	Identifier	stderr		1103306	0					
ANR	1104478	Argument	"""   Please specify the number of minutes to run for.\\n"""		1103306	1					
ANR	1104479	PrimaryExpression	"""   Please specify the number of minutes to run for.\\n"""		1103306	0					
ANR	1104480	ExpressionStatement	exit ( 1 )	1824:4:46498:46507	1103306	2	True				
ANR	1104481	CallExpression	exit ( 1 )		1103306	0					
ANR	1104482	Callee	exit		1103306	0					
ANR	1104483	Identifier	exit		1103306	0					
ANR	1104484	ArgumentList	1		1103306	1					
ANR	1104485	Argument	1		1103306	0					
ANR	1104486	PrimaryExpression	1		1103306	0					
ANR	1104487	BreakStatement	break ;	1827:3:46568:46573	1103306	40	True				
ANR	1104488	Label	case 's' :	1828:2:46577:46585	1103306	41	True				
ANR	1104489	IfStatement	"if ( strcmp ( ""-sock"" , * ptr ) )"		1103306	42					
ANR	1104490	Condition	"strcmp ( ""-sock"" , * ptr )"	1831:7:46695:46714	1103306	0	True				
ANR	1104491	CallExpression	"strcmp ( ""-sock"" , * ptr )"		1103306	0					
ANR	1104492	Callee	strcmp		1103306	0					
ANR	1104493	Identifier	strcmp		1103306	0					
ANR	1104494	ArgumentList	"""-sock"""		1103306	1					
ANR	1104495	Argument	"""-sock"""		1103306	0					
ANR	1104496	PrimaryExpression	"""-sock"""		1103306	0					
ANR	1104497	Argument	* ptr		1103306	1					
ANR	1104498	UnaryOperationExpression	* ptr		1103306	0					
ANR	1104499	UnaryOperator	*		1103306	0					
ANR	1104500	Identifier	ptr		1103306	1					
ANR	1104501	CompoundStatement		297:30:8646:8646	1103306	1					
ANR	1104502	ExpressionStatement	done = true	1832:4:46724:46735	1103306	0	True				
ANR	1104503	AssignmentExpression	done = true		1103306	0		=			
ANR	1104504	Identifier	done		1103306	0					
ANR	1104505	Identifier	true		1103306	1					
ANR	1104506	BreakStatement	break ;	1833:4:46741:46746	1103306	1	True				
ANR	1104507	ElseStatement	else		1103306	0					
ANR	1104508	CompoundStatement		301:8:8689:8689	1103306	0					
ANR	1104509	ExpressionStatement	ptr ++	1836:4:46767:46772	1103306	0	True				
ANR	1104510	PostIncDecOperationExpression	ptr ++		1103306	0					
ANR	1104511	Identifier	ptr		1103306	0					
ANR	1104512	IncDec	++		1103306	1					
ANR	1104513	IfStatement	if ( * ptr )		1103306	1					
ANR	1104514	Condition	* ptr	1837:8:46782:46785	1103306	0	True				
ANR	1104515	UnaryOperationExpression	* ptr		1103306	0					
ANR	1104516	UnaryOperator	*		1103306	0					
ANR	1104517	Identifier	ptr		1103306	1					
ANR	1104518	CompoundStatement		303:15:8717:8717	1103306	1					
ANR	1104519	ExpressionStatement	daemon_sock_name = * ptr	1838:5:46796:46819	1103306	0	True				
ANR	1104520	AssignmentExpression	daemon_sock_name = * ptr		1103306	0		=			
ANR	1104521	Identifier	daemon_sock_name		1103306	0					
ANR	1104522	UnaryOperationExpression	* ptr		1103306	1					
ANR	1104523	UnaryOperator	*		1103306	0					
ANR	1104524	Identifier	ptr		1103306	1					
ANR	1104525	ExpressionStatement	dcargs += 2	1839:5:46826:46837	1103306	1	True				
ANR	1104526	AssignmentExpression	dcargs += 2		1103306	0		+=			
ANR	1104527	Identifier	dcargs		1103306	0					
ANR	1104528	PrimaryExpression	2		1103306	1					
ANR	1104529	ElseStatement	else		1103306	0					
ANR	1104530	CompoundStatement		306:11:8778:8778	1103306	0					
ANR	1104531	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -sock needs another argument.\\n"" )"	1841:5:46857:46937	1103306	0	True				
ANR	1104532	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -sock needs another argument.\\n"" )"		1103306	0					
ANR	1104533	Callee	fprintf		1103306	0					
ANR	1104534	Identifier	fprintf		1103306	0					
ANR	1104535	ArgumentList	stderr		1103306	1					
ANR	1104536	Argument	stderr		1103306	0					
ANR	1104537	Identifier	stderr		1103306	0					
ANR	1104538	Argument	"""DaemonCore: ERROR: -sock needs another argument.\\n"""		1103306	1					
ANR	1104539	PrimaryExpression	"""DaemonCore: ERROR: -sock needs another argument.\\n"""		1103306	0					
ANR	1104540	ExpressionStatement	"fprintf ( stderr , ""   Please specify a socket name.\\n"" )"	1843:5:46944:47008	1103306	1	True				
ANR	1104541	CallExpression	"fprintf ( stderr , ""   Please specify a socket name.\\n"" )"		1103306	0					
ANR	1104542	Callee	fprintf		1103306	0					
ANR	1104543	Identifier	fprintf		1103306	0					
ANR	1104544	ArgumentList	stderr		1103306	1					
ANR	1104545	Argument	stderr		1103306	0					
ANR	1104546	Identifier	stderr		1103306	0					
ANR	1104547	Argument	"""   Please specify a socket name.\\n"""		1103306	1					
ANR	1104548	PrimaryExpression	"""   Please specify a socket name.\\n"""		1103306	0					
ANR	1104549	ExpressionStatement	exit ( 1 )	1845:5:47015:47024	1103306	2	True				
ANR	1104550	CallExpression	exit ( 1 )		1103306	0					
ANR	1104551	Callee	exit		1103306	0					
ANR	1104552	Identifier	exit		1103306	0					
ANR	1104553	ArgumentList	1		1103306	1					
ANR	1104554	Argument	1		1103306	0					
ANR	1104555	PrimaryExpression	1		1103306	0					
ANR	1104556	BreakStatement	break ;	1848:3:47040:47045	1103306	43	True				
ANR	1104557	Label	case 't' :	1849:2:47049:47057	1103306	44	True				
ANR	1104558	ExpressionStatement	Termlog = 1	1850:3:47091:47102	1103306	45	True				
ANR	1104559	AssignmentExpression	Termlog = 1		1103306	0		=			
ANR	1104560	Identifier	Termlog		1103306	0					
ANR	1104561	PrimaryExpression	1		1103306	1					
ANR	1104562	ExpressionStatement	dcargs ++	1851:3:47107:47115	1103306	46	True				
ANR	1104563	PostIncDecOperationExpression	dcargs ++		1103306	0					
ANR	1104564	Identifier	dcargs		1103306	0					
ANR	1104565	IncDec	++		1103306	1					
ANR	1104566	BreakStatement	break ;	1852:3:47120:47125	1103306	47	True				
ANR	1104567	Label	case 'v' :	1853:2:47129:47137	1103306	48	True				
ANR	1104568	ExpressionStatement	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"	1854:3:47176:47231	1103306	49	True				
ANR	1104569	CallExpression	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"		1103306	0					
ANR	1104570	Callee	printf		1103306	0					
ANR	1104571	Identifier	printf		1103306	0					
ANR	1104572	ArgumentList	"""%s\\n%s\\n"""		1103306	1					
ANR	1104573	Argument	"""%s\\n%s\\n"""		1103306	0					
ANR	1104574	PrimaryExpression	"""%s\\n%s\\n"""		1103306	0					
ANR	1104575	Argument	CondorVersion ( )		1103306	1					
ANR	1104576	CallExpression	CondorVersion ( )		1103306	0					
ANR	1104577	Callee	CondorVersion		1103306	0					
ANR	1104578	Identifier	CondorVersion		1103306	0					
ANR	1104579	ArgumentList			1103306	1					
ANR	1104580	Argument	CondorPlatform ( )		1103306	2					
ANR	1104581	CallExpression	CondorPlatform ( )		1103306	0					
ANR	1104582	Callee	CondorPlatform		1103306	0					
ANR	1104583	Identifier	CondorPlatform		1103306	0					
ANR	1104584	ArgumentList			1103306	1					
ANR	1104585	ExpressionStatement	exit ( 0 )	1855:3:47236:47243	1103306	50	True				
ANR	1104586	CallExpression	exit ( 0 )		1103306	0					
ANR	1104587	Callee	exit		1103306	0					
ANR	1104588	Identifier	exit		1103306	0					
ANR	1104589	ArgumentList	0		1103306	1					
ANR	1104590	Argument	0		1103306	0					
ANR	1104591	PrimaryExpression	0		1103306	0					
ANR	1104592	BreakStatement	break ;	1856:3:47248:47253	1103306	51	True				
ANR	1104593	Label	default :	1857:2:47257:47264	1103306	52	True				
ANR	1104594	Identifier	default		1103306	0					
ANR	1104595	ExpressionStatement	done = true	1858:3:47269:47280	1103306	53	True				
ANR	1104596	AssignmentExpression	done = true		1103306	0		=			
ANR	1104597	Identifier	done		1103306	0					
ANR	1104598	Identifier	true		1103306	1					
ANR	1104599	BreakStatement	break ;	1859:3:47285:47290	1103306	54	True				
ANR	1104600	IfStatement	if ( done )		1103306	2					
ANR	1104601	Condition	done	1861:7:47304:47307	1103306	0	True				
ANR	1104602	Identifier	done		1103306	0					
ANR	1104603	CompoundStatement		327:14:9239:9239	1103306	1					
ANR	1104604	BreakStatement	break ;	1862:3:47316:47321	1103306	0	True				
ANR	1104605	IfStatement	if ( Termlog )		1103306	46					
ANR	1104606	Condition	Termlog	1867:6:47443:47449	1103306	0	True				
ANR	1104607	Identifier	Termlog		1103306	0					
ANR	1104608	CompoundStatement		333:16:9381:9381	1103306	1					
ANR	1104609	ExpressionStatement	Foreground = 1	1868:2:47457:47471	1103306	0	True				
ANR	1104610	AssignmentExpression	Foreground = 1		1103306	0		=			
ANR	1104611	Identifier	Foreground		1103306	0					
ANR	1104612	PrimaryExpression	1		1103306	1					
ANR	1104613	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW ) )		1103306	47					
ANR	1104614	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )	1872:6:47524:47571	1103306	0	True				
ANR	1104615	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )		1103306	0					
ANR	1104616	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1104617	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1104618	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104619	Callee	get_mySubSystem		1103306	0					
ANR	1104620	Identifier	get_mySubSystem		1103306	0					
ANR	1104621	ArgumentList			1103306	1					
ANR	1104622	Identifier	isType		1103306	1					
ANR	1104623	ArgumentList	SUBSYSTEM_TYPE_SHADOW		1103306	1					
ANR	1104624	Argument	SUBSYSTEM_TYPE_SHADOW		1103306	0					
ANR	1104625	Identifier	SUBSYSTEM_TYPE_SHADOW		1103306	0					
ANR	1104626	CompoundStatement		338:57:9503:9503	1103306	1					
ANR	1104627	ExpressionStatement	"config ( wantsQuiet , false , false )"	1875:2:47675:47709	1103306	0	True				
ANR	1104628	CallExpression	"config ( wantsQuiet , false , false )"		1103306	0					
ANR	1104629	Callee	config		1103306	0					
ANR	1104630	Identifier	config		1103306	0					
ANR	1104631	ArgumentList	wantsQuiet		1103306	1					
ANR	1104632	Argument	wantsQuiet		1103306	0					
ANR	1104633	Identifier	wantsQuiet		1103306	0					
ANR	1104634	Argument	false		1103306	1					
ANR	1104635	Identifier	false		1103306	0					
ANR	1104636	Argument	false		1103306	2					
ANR	1104637	Identifier	false		1103306	0					
ANR	1104638	ElseStatement	else		1103306	0					
ANR	1104639	CompoundStatement		342:8:9647:9647	1103306	0					
ANR	1104640	ExpressionStatement	"config ( wantsQuiet , false , true )"	1877:2:47723:47756	1103306	0	True				
ANR	1104641	CallExpression	"config ( wantsQuiet , false , true )"		1103306	0					
ANR	1104642	Callee	config		1103306	0					
ANR	1104643	Identifier	config		1103306	0					
ANR	1104644	ArgumentList	wantsQuiet		1103306	1					
ANR	1104645	Argument	wantsQuiet		1103306	0					
ANR	1104646	Identifier	wantsQuiet		1103306	0					
ANR	1104647	Argument	false		1103306	1					
ANR	1104648	Identifier	false		1103306	0					
ANR	1104649	Argument	true		1103306	2					
ANR	1104650	Identifier	true		1103306	0					
ANR	1104651	IfStatement	if ( doAuthInit )		1103306	48					
ANR	1104652	Condition	doAuthInit	1883:6:47878:47887	1103306	0	True				
ANR	1104653	Identifier	doAuthInit		1103306	0					
ANR	1104654	CompoundStatement		349:19:9819:9819	1103306	1					
ANR	1104655	ExpressionStatement	condor_auth_config ( true )	1884:2:47895:47921	1103306	0	True				
ANR	1104656	CallExpression	condor_auth_config ( true )		1103306	0					
ANR	1104657	Callee	condor_auth_config		1103306	0					
ANR	1104658	Identifier	condor_auth_config		1103306	0					
ANR	1104659	ArgumentList	true		1103306	1					
ANR	1104660	Argument	true		1103306	0					
ANR	1104661	Identifier	true		1103306	0					
ANR	1104662	IfStatement	if ( doCoreInit )		1103306	49					
ANR	1104663	Condition	doCoreInit	1888:6:47993:48002	1103306	0	True				
ANR	1104664	Identifier	doCoreInit		1103306	0					
ANR	1104665	CompoundStatement		354:19:9934:9934	1103306	1					
ANR	1104666	ExpressionStatement	check_core_files ( )	1889:2:48010:48028	1103306	0	True				
ANR	1104667	CallExpression	check_core_files ( )		1103306	0					
ANR	1104668	Callee	check_core_files		1103306	0					
ANR	1104669	Identifier	check_core_files		1103306	0					
ANR	1104670	ArgumentList			1103306	1					
ANR	1104671	IfStatement	if ( wantsKill )		1103306	50					
ANR	1104672	Condition	wantsKill	1893:5:48087:48095	1103306	0	True				
ANR	1104673	Identifier	wantsKill		1103306	0					
ANR	1104674	CompoundStatement		359:17:10027:10027	1103306	1					
ANR	1104675	ExpressionStatement	do_kill ( )	1894:2:48103:48112	1103306	0	True				
ANR	1104676	CallExpression	do_kill ( )		1103306	0					
ANR	1104677	Callee	do_kill		1103306	0					
ANR	1104678	Identifier	do_kill		1103306	0					
ANR	1104679	ArgumentList			1103306	1					
ANR	1104680	IfStatement	if ( ! DynamicDirs )		1103306	51					
ANR	1104681	Condition	! DynamicDirs	1897:5:48123:48135	1103306	0	True				
ANR	1104682	UnaryOperationExpression	! DynamicDirs		1103306	0					
ANR	1104683	UnaryOperator	!		1103306	0					
ANR	1104684	Identifier	DynamicDirs		1103306	1					
ANR	1104685	CompoundStatement		363:21:10067:10067	1103306	1					
ANR	1104686	IfStatement	if ( logDir )		1103306	0					
ANR	1104687	Condition	logDir	1908:6:48633:48638	1103306	0	True				
ANR	1104688	Identifier	logDir		1103306	0					
ANR	1104689	CompoundStatement		374:15:10570:10570	1103306	1					
ANR	1104690	ExpressionStatement	set_log_dir ( )	1909:3:48647:48660	1103306	0	True				
ANR	1104691	CallExpression	set_log_dir ( )		1103306	0					
ANR	1104692	Callee	set_log_dir		1103306	0					
ANR	1104693	Identifier	set_log_dir		1103306	0					
ANR	1104694	ArgumentList			1103306	1					
ANR	1104695	IfStatement	if ( logAppend )		1103306	1					
ANR	1104696	Condition	logAppend	1916:6:48875:48883	1103306	0	True				
ANR	1104697	Identifier	logAppend		1103306	0					
ANR	1104698	CompoundStatement		382:18:10815:10815	1103306	1					
ANR	1104699	ExpressionStatement	handle_log_append ( logAppend )	1917:3:48892:48922	1103306	0	True				
ANR	1104700	CallExpression	handle_log_append ( logAppend )		1103306	0					
ANR	1104701	Callee	handle_log_append		1103306	0					
ANR	1104702	Identifier	handle_log_append		1103306	0					
ANR	1104703	ArgumentList	logAppend		1103306	1					
ANR	1104704	Argument	logAppend		1103306	0					
ANR	1104705	Identifier	logAppend		1103306	0					
ANR	1104706	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	1921:2:48964:49031	1103306	2	True				
ANR	1104707	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		1103306	0					
ANR	1104708	Callee	dprintf_config		1103306	0					
ANR	1104709	Identifier	dprintf_config		1103306	0					
ANR	1104710	ArgumentList	get_mySubSystem ( ) -> getName ( )		1103306	1					
ANR	1104711	Argument	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104712	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104713	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104714	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104715	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104716	Callee	get_mySubSystem		1103306	0					
ANR	1104717	Identifier	get_mySubSystem		1103306	0					
ANR	1104718	ArgumentList			1103306	1					
ANR	1104719	Identifier	getName		1103306	1					
ANR	1104720	ArgumentList			1103306	1					
ANR	1104721	Argument	get_param_functions ( )		1103306	1					
ANR	1104722	CallExpression	get_param_functions ( )		1103306	0					
ANR	1104723	Callee	get_param_functions		1103306	0					
ANR	1104724	Identifier	get_param_functions		1103306	0					
ANR	1104725	ArgumentList			1103306	1					
ANR	1104726	ExpressionStatement	set_condor_priv ( )	1925:1:49096:49113	1103306	52	True				
ANR	1104727	CallExpression	set_condor_priv ( )		1103306	0					
ANR	1104728	Callee	set_condor_priv		1103306	0					
ANR	1104729	Identifier	set_condor_priv		1103306	0					
ANR	1104730	ArgumentList			1103306	1					
ANR	1104731	ExpressionStatement	ptmp = argv [ 0 ]	1928:1:49167:49181	1103306	53	True				
ANR	1104732	AssignmentExpression	ptmp = argv [ 0 ]		1103306	0		=			
ANR	1104733	Identifier	ptmp		1103306	0					
ANR	1104734	ArrayIndexing	argv [ 0 ]		1103306	1					
ANR	1104735	Identifier	argv		1103306	0					
ANR	1104736	PrimaryExpression	0		1103306	1					
ANR	1104737	ExpressionStatement	argv = -- ptr	1929:1:49220:49232	1103306	54	True				
ANR	1104738	AssignmentExpression	argv = -- ptr		1103306	0		=			
ANR	1104739	Identifier	argv		1103306	0					
ANR	1104740	UnaryExpression	-- ptr		1103306	1					
ANR	1104741	IncDec	--		1103306	0					
ANR	1104742	Identifier	ptr		1103306	1					
ANR	1104743	ExpressionStatement	argv [ 0 ] = ptmp	1930:1:49263:49277	1103306	55	True				
ANR	1104744	AssignmentExpression	argv [ 0 ] = ptmp		1103306	0		=			
ANR	1104745	ArrayIndexing	argv [ 0 ]		1103306	0					
ANR	1104746	Identifier	argv		1103306	0					
ANR	1104747	PrimaryExpression	0		1103306	1					
ANR	1104748	Identifier	ptmp		1103306	1					
ANR	1104749	ExpressionStatement	argc -= dcargs	1931:1:49297:49311	1103306	56	True				
ANR	1104750	AssignmentExpression	argc -= dcargs		1103306	0		-=			
ANR	1104751	Identifier	argc		1103306	0					
ANR	1104752	Identifier	dcargs		1103306	1					
ANR	1104753	IfStatement	if ( argc < 1 )		1103306	57					
ANR	1104754	Condition	argc < 1	1932:6:49319:49326	1103306	0	True				
ANR	1104755	RelationalExpression	argc < 1		1103306	0		<			
ANR	1104756	Identifier	argc		1103306	0					
ANR	1104757	PrimaryExpression	1		1103306	1					
ANR	1104758	ExpressionStatement	argc = 1	1933:2:49332:49340	1103306	1	True				
ANR	1104759	AssignmentExpression	argc = 1		1103306	0		=			
ANR	1104760	Identifier	argc		1103306	0					
ANR	1104761	PrimaryExpression	1		1103306	1					
ANR	1104762	IfStatement	if ( ! Foreground )		1103306	58					
ANR	1104763	Condition	! Foreground	1938:5:49510:49520	1103306	0	True				
ANR	1104764	UnaryOperationExpression	! Foreground		1103306	0					
ANR	1104765	UnaryOperator	!		1103306	0					
ANR	1104766	Identifier	Foreground		1103306	1					
ANR	1104767	CompoundStatement		404:18:11451:11451	1103306	1					
ANR	1104768	ExpressionStatement	FreeConsole ( )	1941:2:49573:49586	1103306	0	True				
ANR	1104769	CallExpression	FreeConsole ( )		1103306	0					
ANR	1104770	Callee	FreeConsole		1103306	0					
ANR	1104771	Identifier	FreeConsole		1103306	0					
ANR	1104772	ArgumentList			1103306	1					
ANR	1104773	IdentifierDeclStatement	MyString debug_wait_param ;	2008:1:52126:52151	1103306	59	True				
ANR	1104774	IdentifierDecl	debug_wait_param		1103306	0					
ANR	1104775	IdentifierDeclType	MyString		1103306	0					
ANR	1104776	Identifier	debug_wait_param		1103306	1					
ANR	1104777	ExpressionStatement	"debug_wait_param . sprintf ( ""%s_DEBUG_WAIT"" , get_mySubSystem ( ) -> getName ( ) )"	2009:1:52154:52226	1103306	60	True				
ANR	1104778	CallExpression	"debug_wait_param . sprintf ( ""%s_DEBUG_WAIT"" , get_mySubSystem ( ) -> getName ( ) )"		1103306	0					
ANR	1104779	Callee	debug_wait_param . sprintf		1103306	0					
ANR	1104780	MemberAccess	debug_wait_param . sprintf		1103306	0					
ANR	1104781	Identifier	debug_wait_param		1103306	0					
ANR	1104782	Identifier	sprintf		1103306	1					
ANR	1104783	ArgumentList	"""%s_DEBUG_WAIT"""		1103306	1					
ANR	1104784	Argument	"""%s_DEBUG_WAIT"""		1103306	0					
ANR	1104785	PrimaryExpression	"""%s_DEBUG_WAIT"""		1103306	0					
ANR	1104786	Argument	get_mySubSystem ( ) -> getName ( )		1103306	1					
ANR	1104787	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104788	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104789	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104790	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104791	Callee	get_mySubSystem		1103306	0					
ANR	1104792	Identifier	get_mySubSystem		1103306	0					
ANR	1104793	ArgumentList			1103306	1					
ANR	1104794	Identifier	getName		1103306	1					
ANR	1104795	ArgumentList			1103306	1					
ANR	1104796	IfStatement	"if ( param_boolean ( debug_wait_param . Value ( ) , false , false ) )"		1103306	61					
ANR	1104797	Condition	"param_boolean ( debug_wait_param . Value ( ) , false , false )"	2010:5:52233:52285	1103306	0	True				
ANR	1104798	CallExpression	"param_boolean ( debug_wait_param . Value ( ) , false , false )"		1103306	0					
ANR	1104799	Callee	param_boolean		1103306	0					
ANR	1104800	Identifier	param_boolean		1103306	0					
ANR	1104801	ArgumentList	debug_wait_param . Value ( )		1103306	1					
ANR	1104802	Argument	debug_wait_param . Value ( )		1103306	0					
ANR	1104803	CallExpression	debug_wait_param . Value ( )		1103306	0					
ANR	1104804	Callee	debug_wait_param . Value		1103306	0					
ANR	1104805	MemberAccess	debug_wait_param . Value		1103306	0					
ANR	1104806	Identifier	debug_wait_param		1103306	0					
ANR	1104807	Identifier	Value		1103306	1					
ANR	1104808	ArgumentList			1103306	1					
ANR	1104809	Argument	false		1103306	1					
ANR	1104810	Identifier	false		1103306	0					
ANR	1104811	Argument	false		1103306	2					
ANR	1104812	Identifier	false		1103306	0					
ANR	1104813	CompoundStatement		477:2:14220:14238	1103306	1					
ANR	1104814	IdentifierDeclStatement	int debug_wait = 1 ;	2011:2:52292:52310	1103306	0	True				
ANR	1104815	IdentifierDecl	debug_wait = 1		1103306	0					
ANR	1104816	IdentifierDeclType	int		1103306	0					
ANR	1104817	Identifier	debug_wait		1103306	1					
ANR	1104818	AssignmentExpression	debug_wait = 1		1103306	2		=			
ANR	1104819	Identifier	debug_wait		1103306	0					
ANR	1104820	PrimaryExpression	1		1103306	1					
ANR	1104821	Statement	dprintf	2012:2:52314:52320	1103306	1	True				
ANR	1104822	Statement	(	2012:9:52321:52321	1103306	2	True				
ANR	1104823	Statement	D_ALWAYS	2012:10:52322:52329	1103306	3	True				
ANR	1104824	Statement	","	2012:18:52330:52330	1103306	4	True				
ANR	1104825	Statement	"""%s is TRUE, waiting for debugger to attach to pid %d.\\n"""	2013:4:52336:52392	1103306	5	True				
ANR	1104826	Statement	","	2013:61:52393:52393	1103306	6	True				
ANR	1104827	Statement	debug_wait_param	2014:4:52400:52415	1103306	7	True				
ANR	1104828	Statement	.	2014:20:52416:52416	1103306	8	True				
ANR	1104829	Statement	Value	2014:21:52417:52421	1103306	9	True				
ANR	1104830	Statement	(	2014:26:52422:52422	1103306	10	True				
ANR	1104831	Statement	)	2014:27:52423:52423	1103306	11	True				
ANR	1104832	Statement	","	2014:28:52424:52424	1103306	12	True				
ANR	1104833	Statement	(	2014:30:52426:52426	1103306	13	True				
ANR	1104834	Statement	int	2014:31:52427:52429	1103306	14	True				
ANR	1104835	Statement	)	2014:34:52430:52430	1103306	15	True				
ANR	1104836	Statement	::	2014:35:52431:52432	1103306	16	True				
ANR	1104837	Statement	getpid	2014:37:52433:52438	1103306	17	True				
ANR	1104838	Statement	(	2014:43:52439:52439	1103306	18	True				
ANR	1104839	Statement	)	2014:44:52440:52440	1103306	19	True				
ANR	1104840	Statement	)	2014:45:52441:52441	1103306	20	True				
ANR	1104841	ExpressionStatement		2014:46:52442:52442	1103306	21	True				
ANR	1104842	WhileStatement	while ( debug_wait )		1103306	22					
ANR	1104843	Condition	debug_wait	2015:9:52453:52462	1103306	0	True				
ANR	1104844	Identifier	debug_wait		1103306	0					
ANR	1104845	CompoundStatement		481:21:14393:14393	1103306	1					
ANR	1104846	ExpressionStatement	sleep ( 1 )	2016:3:52470:52478	1103306	0	True				
ANR	1104847	CallExpression	sleep ( 1 )		1103306	0					
ANR	1104848	Callee	sleep		1103306	0					
ANR	1104849	Identifier	sleep		1103306	0					
ANR	1104850	ArgumentList	1		1103306	1					
ANR	1104851	Argument	1		1103306	0					
ANR	1104852	PrimaryExpression	1		1103306	0					
ANR	1104853	ExpressionStatement	daemonCore = new DaemonCore ( )	2023:1:52628:52657	1103306	62	True				
ANR	1104854	AssignmentExpression	daemonCore = new DaemonCore ( )		1103306	0		=			
ANR	1104855	Identifier	daemonCore		1103306	0					
ANR	1104856	UnaryExpression	new DaemonCore ( )		1103306	1					
ANR	1104857	IfStatement	if ( DynamicDirs )		1103306	63					
ANR	1104858	Condition	DynamicDirs	2025:5:52665:52675	1103306	0	True				
ANR	1104859	Identifier	DynamicDirs		1103306	0					
ANR	1104860	CompoundStatement		491:19:14607:14607	1103306	1					
ANR	1104861	ExpressionStatement	handle_dynamic_dirs ( )	2030:2:52832:52853	1103306	0	True				
ANR	1104862	CallExpression	handle_dynamic_dirs ( )		1103306	0					
ANR	1104863	Callee	handle_dynamic_dirs		1103306	0					
ANR	1104864	Identifier	handle_dynamic_dirs		1103306	0					
ANR	1104865	ArgumentList			1103306	1					
ANR	1104866	IfStatement	if ( logAppend )		1103306	1					
ANR	1104867	Condition	logAppend	2032:6:52862:52870	1103306	0	True				
ANR	1104868	Identifier	logAppend		1103306	0					
ANR	1104869	CompoundStatement		498:18:14802:14802	1103306	1					
ANR	1104870	ExpressionStatement	handle_log_append ( logAppend )	2033:3:52879:52909	1103306	0	True				
ANR	1104871	CallExpression	handle_log_append ( logAppend )		1103306	0					
ANR	1104872	Callee	handle_log_append		1103306	0					
ANR	1104873	Identifier	handle_log_append		1103306	0					
ANR	1104874	ArgumentList	logAppend		1103306	1					
ANR	1104875	Argument	logAppend		1103306	0					
ANR	1104876	Identifier	logAppend		1103306	0					
ANR	1104877	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	2037:2:52951:53018	1103306	2	True				
ANR	1104878	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		1103306	0					
ANR	1104879	Callee	dprintf_config		1103306	0					
ANR	1104880	Identifier	dprintf_config		1103306	0					
ANR	1104881	ArgumentList	get_mySubSystem ( ) -> getName ( )		1103306	1					
ANR	1104882	Argument	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104883	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104884	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104885	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104886	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104887	Callee	get_mySubSystem		1103306	0					
ANR	1104888	Identifier	get_mySubSystem		1103306	0					
ANR	1104889	ArgumentList			1103306	1					
ANR	1104890	Identifier	getName		1103306	1					
ANR	1104891	ArgumentList			1103306	1					
ANR	1104892	Argument	get_param_functions ( )		1103306	1					
ANR	1104893	CallExpression	get_param_functions ( )		1103306	0					
ANR	1104894	Callee	get_param_functions		1103306	0					
ANR	1104895	Identifier	get_param_functions		1103306	0					
ANR	1104896	ArgumentList			1103306	1					
ANR	1104897	ExpressionStatement	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"	2044:1:53259:53335	1103306	64	True				
ANR	1104898	CallExpression	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"		1103306	0					
ANR	1104899	Callee	dprintf		1103306	0					
ANR	1104900	Identifier	dprintf		1103306	0					
ANR	1104901	ArgumentList	D_ALWAYS		1103306	1					
ANR	1104902	Argument	D_ALWAYS		1103306	0					
ANR	1104903	Identifier	D_ALWAYS		1103306	0					
ANR	1104904	Argument	"""******************************************************\\n"""		1103306	1					
ANR	1104905	PrimaryExpression	"""******************************************************\\n"""		1103306	0					
ANR	1104906	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s (%s_%s) STARTING UP\\n"" , myName , myDistro -> GetUc ( ) , get_mySubSystem ( ) -> getName ( ) )"	2045:1:53338:53445	1103306	65	True				
ANR	1104907	CallExpression	"dprintf ( D_ALWAYS , ""** %s (%s_%s) STARTING UP\\n"" , myName , myDistro -> GetUc ( ) , get_mySubSystem ( ) -> getName ( ) )"		1103306	0					
ANR	1104908	Callee	dprintf		1103306	0					
ANR	1104909	Identifier	dprintf		1103306	0					
ANR	1104910	ArgumentList	D_ALWAYS		1103306	1					
ANR	1104911	Argument	D_ALWAYS		1103306	0					
ANR	1104912	Identifier	D_ALWAYS		1103306	0					
ANR	1104913	Argument	"""** %s (%s_%s) STARTING UP\\n"""		1103306	1					
ANR	1104914	PrimaryExpression	"""** %s (%s_%s) STARTING UP\\n"""		1103306	0					
ANR	1104915	Argument	myName		1103306	2					
ANR	1104916	Identifier	myName		1103306	0					
ANR	1104917	Argument	myDistro -> GetUc ( )		1103306	3					
ANR	1104918	CallExpression	myDistro -> GetUc ( )		1103306	0					
ANR	1104919	Callee	myDistro -> GetUc		1103306	0					
ANR	1104920	PtrMemberAccess	myDistro -> GetUc		1103306	0					
ANR	1104921	Identifier	myDistro		1103306	0					
ANR	1104922	Identifier	GetUc		1103306	1					
ANR	1104923	ArgumentList			1103306	1					
ANR	1104924	Argument	get_mySubSystem ( ) -> getName ( )		1103306	4					
ANR	1104925	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104926	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104927	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104928	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104929	Callee	get_mySubSystem		1103306	0					
ANR	1104930	Identifier	get_mySubSystem		1103306	0					
ANR	1104931	ArgumentList			1103306	1					
ANR	1104932	Identifier	getName		1103306	1					
ANR	1104933	ArgumentList			1103306	1					
ANR	1104934	IfStatement	if ( myFullName )		1103306	66					
ANR	1104935	Condition	myFullName	2047:5:53452:53461	1103306	0	True				
ANR	1104936	Identifier	myFullName		1103306	0					
ANR	1104937	CompoundStatement		513:18:15393:15393	1103306	1					
ANR	1104938	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , myFullName )"	2048:2:53469:53511	1103306	0	True				
ANR	1104939	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , myFullName )"		1103306	0					
ANR	1104940	Callee	dprintf		1103306	0					
ANR	1104941	Identifier	dprintf		1103306	0					
ANR	1104942	ArgumentList	D_ALWAYS		1103306	1					
ANR	1104943	Argument	D_ALWAYS		1103306	0					
ANR	1104944	Identifier	D_ALWAYS		1103306	0					
ANR	1104945	Argument	"""** %s\\n"""		1103306	1					
ANR	1104946	PrimaryExpression	"""** %s\\n"""		1103306	0					
ANR	1104947	Argument	myFullName		1103306	2					
ANR	1104948	Identifier	myFullName		1103306	0					
ANR	1104949	ExpressionStatement	free ( myFullName )	2049:2:53515:53533	1103306	1	True				
ANR	1104950	CallExpression	free ( myFullName )		1103306	0					
ANR	1104951	Callee	free		1103306	0					
ANR	1104952	Identifier	free		1103306	0					
ANR	1104953	ArgumentList	myFullName		1103306	1					
ANR	1104954	Argument	myFullName		1103306	0					
ANR	1104955	Identifier	myFullName		1103306	0					
ANR	1104956	ExpressionStatement	myFullName = NULL	2050:2:53537:53554	1103306	2	True				
ANR	1104957	AssignmentExpression	myFullName = NULL		1103306	0		=			
ANR	1104958	Identifier	myFullName		1103306	0					
ANR	1104959	Identifier	NULL		1103306	1					
ANR	1104960	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , get_mySubSystem ( ) -> getString ( ) )"	2052:1:53560:53620	1103306	67	True				
ANR	1104961	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , get_mySubSystem ( ) -> getString ( ) )"		1103306	0					
ANR	1104962	Callee	dprintf		1103306	0					
ANR	1104963	Identifier	dprintf		1103306	0					
ANR	1104964	ArgumentList	D_ALWAYS		1103306	1					
ANR	1104965	Argument	D_ALWAYS		1103306	0					
ANR	1104966	Identifier	D_ALWAYS		1103306	0					
ANR	1104967	Argument	"""** %s\\n"""		1103306	1					
ANR	1104968	PrimaryExpression	"""** %s\\n"""		1103306	0					
ANR	1104969	Argument	get_mySubSystem ( ) -> getString ( )		1103306	2					
ANR	1104970	CallExpression	get_mySubSystem ( ) -> getString ( )		1103306	0					
ANR	1104971	Callee	get_mySubSystem ( ) -> getString		1103306	0					
ANR	1104972	PtrMemberAccess	get_mySubSystem ( ) -> getString		1103306	0					
ANR	1104973	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104974	Callee	get_mySubSystem		1103306	0					
ANR	1104975	Identifier	get_mySubSystem		1103306	0					
ANR	1104976	ArgumentList			1103306	1					
ANR	1104977	Identifier	getString		1103306	1					
ANR	1104978	ArgumentList			1103306	1					
ANR	1104979	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Configuration: subsystem:%s local:%s class:%s\\n"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" ) , get_mySubSystem ( ) -> getClassName ( ) )"	2053:1:53623:53815	1103306	68	True				
ANR	1104980	CallExpression	"dprintf ( D_ALWAYS , ""** Configuration: subsystem:%s local:%s class:%s\\n"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" ) , get_mySubSystem ( ) -> getClassName ( ) )"		1103306	0					
ANR	1104981	Callee	dprintf		1103306	0					
ANR	1104982	Identifier	dprintf		1103306	0					
ANR	1104983	ArgumentList	D_ALWAYS		1103306	1					
ANR	1104984	Argument	D_ALWAYS		1103306	0					
ANR	1104985	Identifier	D_ALWAYS		1103306	0					
ANR	1104986	Argument	"""** Configuration: subsystem:%s local:%s class:%s\\n"""		1103306	1					
ANR	1104987	PrimaryExpression	"""** Configuration: subsystem:%s local:%s class:%s\\n"""		1103306	0					
ANR	1104988	Argument	get_mySubSystem ( ) -> getName ( )		1103306	2					
ANR	1104989	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1104990	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104991	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1104992	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1104993	Callee	get_mySubSystem		1103306	0					
ANR	1104994	Identifier	get_mySubSystem		1103306	0					
ANR	1104995	ArgumentList			1103306	1					
ANR	1104996	Identifier	getName		1103306	1					
ANR	1104997	ArgumentList			1103306	1					
ANR	1104998	Argument	"get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" )"		1103306	3					
ANR	1104999	CallExpression	"get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" )"		1103306	0					
ANR	1105000	Callee	get_mySubSystem ( ) -> getLocalName		1103306	0					
ANR	1105001	PtrMemberAccess	get_mySubSystem ( ) -> getLocalName		1103306	0					
ANR	1105002	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105003	Callee	get_mySubSystem		1103306	0					
ANR	1105004	Identifier	get_mySubSystem		1103306	0					
ANR	1105005	ArgumentList			1103306	1					
ANR	1105006	Identifier	getLocalName		1103306	1					
ANR	1105007	ArgumentList	"""<NONE>"""		1103306	1					
ANR	1105008	Argument	"""<NONE>"""		1103306	0					
ANR	1105009	PrimaryExpression	"""<NONE>"""		1103306	0					
ANR	1105010	Argument	get_mySubSystem ( ) -> getClassName ( )		1103306	4					
ANR	1105011	CallExpression	get_mySubSystem ( ) -> getClassName ( )		1103306	0					
ANR	1105012	Callee	get_mySubSystem ( ) -> getClassName		1103306	0					
ANR	1105013	PtrMemberAccess	get_mySubSystem ( ) -> getClassName		1103306	0					
ANR	1105014	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105015	Callee	get_mySubSystem		1103306	0					
ANR	1105016	Identifier	get_mySubSystem		1103306	0					
ANR	1105017	ArgumentList			1103306	1					
ANR	1105018	Identifier	getClassName		1103306	1					
ANR	1105019	ArgumentList			1103306	1					
ANR	1105020	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorVersion ( ) )"	2058:1:53818:53862	1103306	69	True				
ANR	1105021	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorVersion ( ) )"		1103306	0					
ANR	1105022	Callee	dprintf		1103306	0					
ANR	1105023	Identifier	dprintf		1103306	0					
ANR	1105024	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105025	Argument	D_ALWAYS		1103306	0					
ANR	1105026	Identifier	D_ALWAYS		1103306	0					
ANR	1105027	Argument	"""** %s\\n"""		1103306	1					
ANR	1105028	PrimaryExpression	"""** %s\\n"""		1103306	0					
ANR	1105029	Argument	CondorVersion ( )		1103306	2					
ANR	1105030	CallExpression	CondorVersion ( )		1103306	0					
ANR	1105031	Callee	CondorVersion		1103306	0					
ANR	1105032	Identifier	CondorVersion		1103306	0					
ANR	1105033	ArgumentList			1103306	1					
ANR	1105034	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorPlatform ( ) )"	2059:1:53865:53910	1103306	70	True				
ANR	1105035	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorPlatform ( ) )"		1103306	0					
ANR	1105036	Callee	dprintf		1103306	0					
ANR	1105037	Identifier	dprintf		1103306	0					
ANR	1105038	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105039	Argument	D_ALWAYS		1103306	0					
ANR	1105040	Identifier	D_ALWAYS		1103306	0					
ANR	1105041	Argument	"""** %s\\n"""		1103306	1					
ANR	1105042	PrimaryExpression	"""** %s\\n"""		1103306	0					
ANR	1105043	Argument	CondorPlatform ( )		1103306	2					
ANR	1105044	CallExpression	CondorPlatform ( )		1103306	0					
ANR	1105045	Callee	CondorPlatform		1103306	0					
ANR	1105046	Identifier	CondorPlatform		1103306	0					
ANR	1105047	ArgumentList			1103306	1					
ANR	1105048	ExpressionStatement	"dprintf ( D_ALWAYS , ""** PID = %lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"	2060:1:53913:53985	1103306	71	True				
ANR	1105049	CallExpression	"dprintf ( D_ALWAYS , ""** PID = %lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"		1103306	0					
ANR	1105050	Callee	dprintf		1103306	0					
ANR	1105051	Identifier	dprintf		1103306	0					
ANR	1105052	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105053	Argument	D_ALWAYS		1103306	0					
ANR	1105054	Identifier	D_ALWAYS		1103306	0					
ANR	1105055	Argument	"""** PID = %lu\\n"""		1103306	1					
ANR	1105056	PrimaryExpression	"""** PID = %lu\\n"""		1103306	0					
ANR	1105057	Argument	( unsigned long ) daemonCore -> getpid ( )		1103306	2					
ANR	1105058	CastExpression	( unsigned long ) daemonCore -> getpid ( )		1103306	0					
ANR	1105059	CastTarget	unsigned long		1103306	0					
ANR	1105060	CallExpression	daemonCore -> getpid ( )		1103306	1					
ANR	1105061	Callee	daemonCore -> getpid		1103306	0					
ANR	1105062	PtrMemberAccess	daemonCore -> getpid		1103306	0					
ANR	1105063	Identifier	daemonCore		1103306	0					
ANR	1105064	Identifier	getpid		1103306	1					
ANR	1105065	ArgumentList			1103306	1					
ANR	1105066	IdentifierDeclStatement	time_t log_last_mod_time = dprintf_last_modification ( ) ;	2061:1:53988:54042	1103306	72	True				
ANR	1105067	IdentifierDecl	log_last_mod_time = dprintf_last_modification ( )		1103306	0					
ANR	1105068	IdentifierDeclType	time_t		1103306	0					
ANR	1105069	Identifier	log_last_mod_time		1103306	1					
ANR	1105070	AssignmentExpression	log_last_mod_time = dprintf_last_modification ( )		1103306	2		=			
ANR	1105071	Identifier	log_last_mod_time		1103306	0					
ANR	1105072	CallExpression	dprintf_last_modification ( )		1103306	1					
ANR	1105073	Callee	dprintf_last_modification		1103306	0					
ANR	1105074	Identifier	dprintf_last_modification		1103306	0					
ANR	1105075	ArgumentList			1103306	1					
ANR	1105076	IfStatement	if ( log_last_mod_time <= 0 )		1103306	73					
ANR	1105077	Condition	log_last_mod_time <= 0	2062:6:54050:54071	1103306	0	True				
ANR	1105078	RelationalExpression	log_last_mod_time <= 0		1103306	0		<=			
ANR	1105079	Identifier	log_last_mod_time		1103306	0					
ANR	1105080	PrimaryExpression	0		1103306	1					
ANR	1105081	CompoundStatement		528:31:16003:16003	1103306	1					
ANR	1105082	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Log last touched time unavailable (%s)\\n"" , strerror ( - log_last_mod_time ) )"	2063:2:54079:54176	1103306	0	True				
ANR	1105083	CallExpression	"dprintf ( D_ALWAYS , ""** Log last touched time unavailable (%s)\\n"" , strerror ( - log_last_mod_time ) )"		1103306	0					
ANR	1105084	Callee	dprintf		1103306	0					
ANR	1105085	Identifier	dprintf		1103306	0					
ANR	1105086	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105087	Argument	D_ALWAYS		1103306	0					
ANR	1105088	Identifier	D_ALWAYS		1103306	0					
ANR	1105089	Argument	"""** Log last touched time unavailable (%s)\\n"""		1103306	1					
ANR	1105090	PrimaryExpression	"""** Log last touched time unavailable (%s)\\n"""		1103306	0					
ANR	1105091	Argument	strerror ( - log_last_mod_time )		1103306	2					
ANR	1105092	CallExpression	strerror ( - log_last_mod_time )		1103306	0					
ANR	1105093	Callee	strerror		1103306	0					
ANR	1105094	Identifier	strerror		1103306	0					
ANR	1105095	ArgumentList	- log_last_mod_time		1103306	1					
ANR	1105096	Argument	- log_last_mod_time		1103306	0					
ANR	1105097	UnaryOperationExpression	- log_last_mod_time		1103306	0					
ANR	1105098	UnaryOperator	-		1103306	0					
ANR	1105099	Identifier	log_last_mod_time		1103306	1					
ANR	1105100	ElseStatement	else		1103306	0					
ANR	1105101	CompoundStatement		532:2:16118:16165	1103306	0					
ANR	1105102	IdentifierDeclStatement	struct tm * tm = localtime ( & log_last_mod_time ) ;	2066:2:54190:54237	1103306	0	True				
ANR	1105103	IdentifierDecl	* tm = localtime ( & log_last_mod_time )		1103306	0					
ANR	1105104	IdentifierDeclType	struct tm *		1103306	0					
ANR	1105105	Identifier	tm		1103306	1					
ANR	1105106	AssignmentExpression	* tm = localtime ( & log_last_mod_time )		1103306	2		=			
ANR	1105107	Identifier	tm		1103306	0					
ANR	1105108	CallExpression	localtime ( & log_last_mod_time )		1103306	1					
ANR	1105109	Callee	localtime		1103306	0					
ANR	1105110	Identifier	localtime		1103306	0					
ANR	1105111	ArgumentList	& log_last_mod_time		1103306	1					
ANR	1105112	Argument	& log_last_mod_time		1103306	0					
ANR	1105113	UnaryOperationExpression	& log_last_mod_time		1103306	0					
ANR	1105114	UnaryOperator	&		1103306	0					
ANR	1105115	Identifier	log_last_mod_time		1103306	1					
ANR	1105116	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Log last touched %d/%d %02d:%02d:%02d\\n"" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"	2067:2:54241:54377	1103306	1	True				
ANR	1105117	CallExpression	"dprintf ( D_ALWAYS , ""** Log last touched %d/%d %02d:%02d:%02d\\n"" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"		1103306	0					
ANR	1105118	Callee	dprintf		1103306	0					
ANR	1105119	Identifier	dprintf		1103306	0					
ANR	1105120	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105121	Argument	D_ALWAYS		1103306	0					
ANR	1105122	Identifier	D_ALWAYS		1103306	0					
ANR	1105123	Argument	"""** Log last touched %d/%d %02d:%02d:%02d\\n"""		1103306	1					
ANR	1105124	PrimaryExpression	"""** Log last touched %d/%d %02d:%02d:%02d\\n"""		1103306	0					
ANR	1105125	Argument	tm -> tm_mon + 1		1103306	2					
ANR	1105126	AdditiveExpression	tm -> tm_mon + 1		1103306	0		+			
ANR	1105127	PtrMemberAccess	tm -> tm_mon		1103306	0					
ANR	1105128	Identifier	tm		1103306	0					
ANR	1105129	Identifier	tm_mon		1103306	1					
ANR	1105130	PrimaryExpression	1		1103306	1					
ANR	1105131	Argument	tm -> tm_mday		1103306	3					
ANR	1105132	PtrMemberAccess	tm -> tm_mday		1103306	0					
ANR	1105133	Identifier	tm		1103306	0					
ANR	1105134	Identifier	tm_mday		1103306	1					
ANR	1105135	Argument	tm -> tm_hour		1103306	4					
ANR	1105136	PtrMemberAccess	tm -> tm_hour		1103306	0					
ANR	1105137	Identifier	tm		1103306	0					
ANR	1105138	Identifier	tm_hour		1103306	1					
ANR	1105139	Argument	tm -> tm_min		1103306	5					
ANR	1105140	PtrMemberAccess	tm -> tm_min		1103306	0					
ANR	1105141	Identifier	tm		1103306	0					
ANR	1105142	Identifier	tm_min		1103306	1					
ANR	1105143	Argument	tm -> tm_sec		1103306	6					
ANR	1105144	PtrMemberAccess	tm -> tm_sec		1103306	0					
ANR	1105145	Identifier	tm		1103306	0					
ANR	1105146	Identifier	tm_sec		1103306	1					
ANR	1105147	IfStatement	if ( getuid ( ) )		1103306	74					
ANR	1105148	Condition	getuid ( )	2076:5:54547:54554	1103306	0	True				
ANR	1105149	CallExpression	getuid ( )		1103306	0					
ANR	1105150	Callee	getuid		1103306	0					
ANR	1105151	Identifier	getuid		1103306	0					
ANR	1105152	ArgumentList			1103306	1					
ANR	1105153	CompoundStatement		542:16:16486:16486	1103306	1					
ANR	1105154	ExpressionStatement	"dprintf ( D_PRIV , ""** Running as non-root: No privilege switching\\n"" )"	2077:2:54562:54629	1103306	0	True				
ANR	1105155	CallExpression	"dprintf ( D_PRIV , ""** Running as non-root: No privilege switching\\n"" )"		1103306	0					
ANR	1105156	Callee	dprintf		1103306	0					
ANR	1105157	Identifier	dprintf		1103306	0					
ANR	1105158	ArgumentList	D_PRIV		1103306	1					
ANR	1105159	Argument	D_PRIV		1103306	0					
ANR	1105160	Identifier	D_PRIV		1103306	0					
ANR	1105161	Argument	"""** Running as non-root: No privilege switching\\n"""		1103306	1					
ANR	1105162	PrimaryExpression	"""** Running as non-root: No privilege switching\\n"""		1103306	0					
ANR	1105163	ElseStatement	else		1103306	0					
ANR	1105164	CompoundStatement		544:8:16567:16567	1103306	0					
ANR	1105165	ExpressionStatement	"dprintf ( D_PRIV , ""** Running as root: Privilege switching in effect\\n"" )"	2079:2:54643:54713	1103306	0	True				
ANR	1105166	CallExpression	"dprintf ( D_PRIV , ""** Running as root: Privilege switching in effect\\n"" )"		1103306	0					
ANR	1105167	Callee	dprintf		1103306	0					
ANR	1105168	Identifier	dprintf		1103306	0					
ANR	1105169	ArgumentList	D_PRIV		1103306	1					
ANR	1105170	Argument	D_PRIV		1103306	0					
ANR	1105171	Identifier	D_PRIV		1103306	0					
ANR	1105172	Argument	"""** Running as root: Privilege switching in effect\\n"""		1103306	1					
ANR	1105173	PrimaryExpression	"""** Running as root: Privilege switching in effect\\n"""		1103306	0					
ANR	1105174	ExpressionStatement	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"	2083:1:54727:54803	1103306	75	True				
ANR	1105175	CallExpression	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"		1103306	0					
ANR	1105176	Callee	dprintf		1103306	0					
ANR	1105177	Identifier	dprintf		1103306	0					
ANR	1105178	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105179	Argument	D_ALWAYS		1103306	0					
ANR	1105180	Identifier	D_ALWAYS		1103306	0					
ANR	1105181	Argument	"""******************************************************\\n"""		1103306	1					
ANR	1105182	PrimaryExpression	"""******************************************************\\n"""		1103306	0					
ANR	1105183	IfStatement	"if ( global_config_source != """" )"		1103306	76					
ANR	1105184	Condition	"global_config_source != """""	2085:5:54811:54836	1103306	0	True				
ANR	1105185	EqualityExpression	"global_config_source != """""		1103306	0		!=			
ANR	1105186	Identifier	global_config_source		1103306	0					
ANR	1105187	PrimaryExpression	""""""		1103306	1					
ANR	1105188	CompoundStatement		551:33:16767:16767	1103306	1					
ANR	1105189	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using config source: %s\\n"" , global_config_source . Value ( ) )"	2086:2:54843:54924	1103306	0	True				
ANR	1105190	CallExpression	"dprintf ( D_ALWAYS , ""Using config source: %s\\n"" , global_config_source . Value ( ) )"		1103306	0					
ANR	1105191	Callee	dprintf		1103306	0					
ANR	1105192	Identifier	dprintf		1103306	0					
ANR	1105193	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105194	Argument	D_ALWAYS		1103306	0					
ANR	1105195	Identifier	D_ALWAYS		1103306	0					
ANR	1105196	Argument	"""Using config source: %s\\n"""		1103306	1					
ANR	1105197	PrimaryExpression	"""Using config source: %s\\n"""		1103306	0					
ANR	1105198	Argument	global_config_source . Value ( )		1103306	2					
ANR	1105199	CallExpression	global_config_source . Value ( )		1103306	0					
ANR	1105200	Callee	global_config_source . Value		1103306	0					
ANR	1105201	MemberAccess	global_config_source . Value		1103306	0					
ANR	1105202	Identifier	global_config_source		1103306	0					
ANR	1105203	Identifier	Value		1103306	1					
ANR	1105204	ArgumentList			1103306	1					
ANR	1105205	ElseStatement	else		1103306	0					
ANR	1105206	CompoundStatement		556:2:16917:16947	1103306	0					
ANR	1105207	IdentifierDeclStatement	const char * env_name = EnvGetName ( ENV_CONFIG ) ;	2089:2:54938:54985	1103306	0	True				
ANR	1105208	IdentifierDecl	* env_name = EnvGetName ( ENV_CONFIG )		1103306	0					
ANR	1105209	IdentifierDeclType	const char *		1103306	0					
ANR	1105210	Identifier	env_name		1103306	1					
ANR	1105211	AssignmentExpression	* env_name = EnvGetName ( ENV_CONFIG )		1103306	2		=			
ANR	1105212	Identifier	env_name		1103306	0					
ANR	1105213	CallExpression	EnvGetName ( ENV_CONFIG )		1103306	1					
ANR	1105214	Callee	EnvGetName		1103306	0					
ANR	1105215	Identifier	EnvGetName		1103306	0					
ANR	1105216	ArgumentList	ENV_CONFIG		1103306	1					
ANR	1105217	Argument	ENV_CONFIG		1103306	0					
ANR	1105218	Identifier	ENV_CONFIG		1103306	0					
ANR	1105219	IdentifierDeclStatement	char * env = getenv ( env_name ) ;	2090:2:54989:55019	1103306	1	True				
ANR	1105220	IdentifierDecl	* env = getenv ( env_name )		1103306	0					
ANR	1105221	IdentifierDeclType	char *		1103306	0					
ANR	1105222	Identifier	env		1103306	1					
ANR	1105223	AssignmentExpression	* env = getenv ( env_name )		1103306	2		=			
ANR	1105224	Identifier	env		1103306	0					
ANR	1105225	CallExpression	getenv ( env_name )		1103306	1					
ANR	1105226	Callee	getenv		1103306	0					
ANR	1105227	Identifier	getenv		1103306	0					
ANR	1105228	ArgumentList	env_name		1103306	1					
ANR	1105229	Argument	env_name		1103306	0					
ANR	1105230	Identifier	env_name		1103306	0					
ANR	1105231	IfStatement	if ( env )		1103306	2					
ANR	1105232	Condition	env	2091:6:55027:55029	1103306	0	True				
ANR	1105233	Identifier	env		1103306	0					
ANR	1105234	CompoundStatement		557:12:16961:16961	1103306	1					
ANR	1105235	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s is set to '%s', not reading a config file\\n"" , env_name , env )"	2092:3:55038:55132	1103306	0	True				
ANR	1105236	CallExpression	"dprintf ( D_ALWAYS , ""%s is set to '%s', not reading a config file\\n"" , env_name , env )"		1103306	0					
ANR	1105237	Callee	dprintf		1103306	0					
ANR	1105238	Identifier	dprintf		1103306	0					
ANR	1105239	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105240	Argument	D_ALWAYS		1103306	0					
ANR	1105241	Identifier	D_ALWAYS		1103306	0					
ANR	1105242	Argument	"""%s is set to '%s', not reading a config file\\n"""		1103306	1					
ANR	1105243	PrimaryExpression	"""%s is set to '%s', not reading a config file\\n"""		1103306	0					
ANR	1105244	Argument	env_name		1103306	2					
ANR	1105245	Identifier	env_name		1103306	0					
ANR	1105246	Argument	env		1103306	3					
ANR	1105247	Identifier	env		1103306	0					
ANR	1105248	IfStatement	if ( ! local_config_sources . isEmpty ( ) )		1103306	77					
ANR	1105249	Condition	! local_config_sources . isEmpty ( )	2098:5:55147:55177	1103306	0	True				
ANR	1105250	UnaryOperationExpression	! local_config_sources . isEmpty ( )		1103306	0					
ANR	1105251	UnaryOperator	!		1103306	0					
ANR	1105252	CallExpression	local_config_sources . isEmpty ( )		1103306	1					
ANR	1105253	Callee	local_config_sources . isEmpty		1103306	0					
ANR	1105254	MemberAccess	local_config_sources . isEmpty		1103306	0					
ANR	1105255	Identifier	local_config_sources		1103306	0					
ANR	1105256	Identifier	isEmpty		1103306	1					
ANR	1105257	ArgumentList			1103306	1					
ANR	1105258	CompoundStatement		567:2:17200:17212	1103306	1					
ANR	1105259	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using local config sources: \\n"" )"	2099:2:55184:55235	1103306	0	True				
ANR	1105260	CallExpression	"dprintf ( D_ALWAYS , ""Using local config sources: \\n"" )"		1103306	0					
ANR	1105261	Callee	dprintf		1103306	0					
ANR	1105262	Identifier	dprintf		1103306	0					
ANR	1105263	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105264	Argument	D_ALWAYS		1103306	0					
ANR	1105265	Identifier	D_ALWAYS		1103306	0					
ANR	1105266	Argument	"""Using local config sources: \\n"""		1103306	1					
ANR	1105267	PrimaryExpression	"""Using local config sources: \\n"""		1103306	0					
ANR	1105268	ExpressionStatement	local_config_sources . rewind ( )	2100:2:55239:55268	1103306	1	True				
ANR	1105269	CallExpression	local_config_sources . rewind ( )		1103306	0					
ANR	1105270	Callee	local_config_sources . rewind		1103306	0					
ANR	1105271	MemberAccess	local_config_sources . rewind		1103306	0					
ANR	1105272	Identifier	local_config_sources		1103306	0					
ANR	1105273	Identifier	rewind		1103306	1					
ANR	1105274	ArgumentList			1103306	1					
ANR	1105275	IdentifierDeclStatement	char * source ;	2101:2:55272:55284	1103306	2	True				
ANR	1105276	IdentifierDecl	* source		1103306	0					
ANR	1105277	IdentifierDeclType	char *		1103306	0					
ANR	1105278	Identifier	source		1103306	1					
ANR	1105279	WhileStatement	while ( ( source = local_config_sources . next ( ) ) != NULL )		1103306	3					
ANR	1105280	Condition	( source = local_config_sources . next ( ) ) != NULL	2102:9:55295:55340	1103306	0	True				
ANR	1105281	EqualityExpression	( source = local_config_sources . next ( ) ) != NULL		1103306	0		!=			
ANR	1105282	AssignmentExpression	source = local_config_sources . next ( )		1103306	0		=			
ANR	1105283	Identifier	source		1103306	0					
ANR	1105284	CallExpression	local_config_sources . next ( )		1103306	1					
ANR	1105285	Callee	local_config_sources . next		1103306	0					
ANR	1105286	MemberAccess	local_config_sources . next		1103306	0					
ANR	1105287	Identifier	local_config_sources		1103306	0					
ANR	1105288	Identifier	next		1103306	1					
ANR	1105289	ArgumentList			1103306	1					
ANR	1105290	Identifier	NULL		1103306	1					
ANR	1105291	CompoundStatement		568:58:17272:17272	1103306	1					
ANR	1105292	ExpressionStatement	"dprintf ( D_ALWAYS , ""   %s\\n"" , source )"	2103:3:55349:55386	1103306	0	True				
ANR	1105293	CallExpression	"dprintf ( D_ALWAYS , ""   %s\\n"" , source )"		1103306	0					
ANR	1105294	Callee	dprintf		1103306	0					
ANR	1105295	Identifier	dprintf		1103306	0					
ANR	1105296	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105297	Argument	D_ALWAYS		1103306	0					
ANR	1105298	Identifier	D_ALWAYS		1103306	0					
ANR	1105299	Argument	"""   %s\\n"""		1103306	1					
ANR	1105300	PrimaryExpression	"""   %s\\n"""		1103306	0					
ANR	1105301	Argument	source		1103306	2					
ANR	1105302	Identifier	source		1103306	0					
ANR	1105303	ExpressionStatement	drop_core_in_log ( )	2108:1:55523:55541	1103306	78	True				
ANR	1105304	CallExpression	drop_core_in_log ( )		1103306	0					
ANR	1105305	Callee	drop_core_in_log		1103306	0					
ANR	1105306	Identifier	drop_core_in_log		1103306	0					
ANR	1105307	ArgumentList			1103306	1					
ANR	1105308	IdentifierDeclStatement	"BOOL is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) ) ;"	2121:1:56117:56183	1103306	79	True				
ANR	1105309	IdentifierDecl	"is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		1103306	0					
ANR	1105310	IdentifierDeclType	BOOL		1103306	0					
ANR	1105311	Identifier	is_kbdd		1103306	1					
ANR	1105312	AssignmentExpression	"is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		1103306	2		=			
ANR	1105313	Identifier	is_kbdd		1103306	0					
ANR	1105314	EqualityExpression	"0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		1103306	1		==			
ANR	1105315	PrimaryExpression	0		1103306	0					
ANR	1105316	CallExpression	"strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		1103306	1					
ANR	1105317	Callee	strcmp		1103306	0					
ANR	1105318	Identifier	strcmp		1103306	0					
ANR	1105319	ArgumentList	get_mySubSystem ( ) -> getName ( )		1103306	1					
ANR	1105320	Argument	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1105321	CallExpression	get_mySubSystem ( ) -> getName ( )		1103306	0					
ANR	1105322	Callee	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1105323	PtrMemberAccess	get_mySubSystem ( ) -> getName		1103306	0					
ANR	1105324	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105325	Callee	get_mySubSystem		1103306	0					
ANR	1105326	Identifier	get_mySubSystem		1103306	0					
ANR	1105327	ArgumentList			1103306	1					
ANR	1105328	Identifier	getName		1103306	1					
ANR	1105329	ArgumentList			1103306	1					
ANR	1105330	Argument	"""KBDD"""		1103306	1					
ANR	1105331	PrimaryExpression	"""KBDD"""		1103306	0					
ANR	1105332	IfStatement	if ( ! is_kbdd )		1103306	80					
ANR	1105333	Condition	! is_kbdd	2122:4:56189:56196	1103306	0	True				
ANR	1105334	UnaryOperationExpression	! is_kbdd		1103306	0					
ANR	1105335	UnaryOperator	!		1103306	0					
ANR	1105336	Identifier	is_kbdd		1103306	1					
ANR	1105337	ExpressionStatement	AllocConsole ( )	2123:2:56201:56215	1103306	1	True				
ANR	1105338	CallExpression	AllocConsole ( )		1103306	0					
ANR	1105339	Callee	AllocConsole		1103306	0					
ANR	1105340	Identifier	AllocConsole		1103306	0					
ANR	1105341	ArgumentList			1103306	1					
ANR	1105342	IfStatement	"if ( pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1 )"		1103306	81					
ANR	1105343	Condition	"pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"	2130:6:56433:56594	1103306	0	True				
ANR	1105344	OrExpression	"pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		1103306	0		||			
ANR	1105345	EqualityExpression	pipe ( daemonCore -> async_pipe ) == - 1		1103306	0		==			
ANR	1105346	CallExpression	pipe ( daemonCore -> async_pipe )		1103306	0					
ANR	1105347	Callee	pipe		1103306	0					
ANR	1105348	Identifier	pipe		1103306	0					
ANR	1105349	ArgumentList	daemonCore -> async_pipe		1103306	1					
ANR	1105350	Argument	daemonCore -> async_pipe		1103306	0					
ANR	1105351	PtrMemberAccess	daemonCore -> async_pipe		1103306	0					
ANR	1105352	Identifier	daemonCore		1103306	0					
ANR	1105353	Identifier	async_pipe		1103306	1					
ANR	1105354	UnaryOperationExpression	- 1		1103306	1					
ANR	1105355	UnaryOperator	-		1103306	0					
ANR	1105356	PrimaryExpression	1		1103306	1					
ANR	1105357	OrExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		1103306	1		||			
ANR	1105358	EqualityExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1"		1103306	0		==			
ANR	1105359	CallExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK )"		1103306	0					
ANR	1105360	Callee	fcntl		1103306	0					
ANR	1105361	Identifier	fcntl		1103306	0					
ANR	1105362	ArgumentList	daemonCore -> async_pipe [ 0 ]		1103306	1					
ANR	1105363	Argument	daemonCore -> async_pipe [ 0 ]		1103306	0					
ANR	1105364	ArrayIndexing	daemonCore -> async_pipe [ 0 ]		1103306	0					
ANR	1105365	PtrMemberAccess	daemonCore -> async_pipe		1103306	0					
ANR	1105366	Identifier	daemonCore		1103306	0					
ANR	1105367	Identifier	async_pipe		1103306	1					
ANR	1105368	PrimaryExpression	0		1103306	1					
ANR	1105369	Argument	F_SETFL		1103306	1					
ANR	1105370	Identifier	F_SETFL		1103306	0					
ANR	1105371	Argument	O_NONBLOCK		1103306	2					
ANR	1105372	Identifier	O_NONBLOCK		1103306	0					
ANR	1105373	UnaryOperationExpression	- 1		1103306	1					
ANR	1105374	UnaryOperator	-		1103306	0					
ANR	1105375	PrimaryExpression	1		1103306	1					
ANR	1105376	EqualityExpression	"fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		1103306	1		==			
ANR	1105377	CallExpression	"fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK )"		1103306	0					
ANR	1105378	Callee	fcntl		1103306	0					
ANR	1105379	Identifier	fcntl		1103306	0					
ANR	1105380	ArgumentList	daemonCore -> async_pipe [ 1 ]		1103306	1					
ANR	1105381	Argument	daemonCore -> async_pipe [ 1 ]		1103306	0					
ANR	1105382	ArrayIndexing	daemonCore -> async_pipe [ 1 ]		1103306	0					
ANR	1105383	PtrMemberAccess	daemonCore -> async_pipe		1103306	0					
ANR	1105384	Identifier	daemonCore		1103306	0					
ANR	1105385	Identifier	async_pipe		1103306	1					
ANR	1105386	PrimaryExpression	1		1103306	1					
ANR	1105387	Argument	F_SETFL		1103306	1					
ANR	1105388	Identifier	F_SETFL		1103306	0					
ANR	1105389	Argument	O_NONBLOCK		1103306	2					
ANR	1105390	Identifier	O_NONBLOCK		1103306	0					
ANR	1105391	UnaryOperationExpression	- 1		1103306	1					
ANR	1105392	UnaryOperator	-		1103306	0					
ANR	1105393	PrimaryExpression	1		1103306	1					
ANR	1105394	CompoundStatement		598:63:18526:18526	1103306	1					
ANR	1105395	ExpressionStatement	"EXCEPT ( ""Failed to create async pipe"" )"	2133:3:56603:56640	1103306	0	True				
ANR	1105396	CallExpression	"EXCEPT ( ""Failed to create async pipe"" )"		1103306	0					
ANR	1105397	Callee	EXCEPT		1103306	0					
ANR	1105398	Identifier	EXCEPT		1103306	0					
ANR	1105399	ArgumentList	"""Failed to create async pipe"""		1103306	1					
ANR	1105400	Argument	"""Failed to create async pipe"""		1103306	0					
ANR	1105401	PrimaryExpression	"""Failed to create async pipe"""		1103306	0					
ANR	1105402	ExpressionStatement	GCB_Recovery_failed_callback_set ( gcb_recovery_failed_callback )	2144:1:56860:56924	1103306	82	True				
ANR	1105403	CallExpression	GCB_Recovery_failed_callback_set ( gcb_recovery_failed_callback )		1103306	0					
ANR	1105404	Callee	GCB_Recovery_failed_callback_set		1103306	0					
ANR	1105405	Identifier	GCB_Recovery_failed_callback_set		1103306	0					
ANR	1105406	ArgumentList	gcb_recovery_failed_callback		1103306	1					
ANR	1105407	Argument	gcb_recovery_failed_callback		1103306	0					
ANR	1105408	Identifier	gcb_recovery_failed_callback		1103306	0					
ANR	1105409	IfStatement	if ( dc_main_pre_command_sock_init )		1103306	83					
ANR	1105410	Condition	dc_main_pre_command_sock_init	2147:6:56940:56968	1103306	0	True				
ANR	1105411	Identifier	dc_main_pre_command_sock_init		1103306	0					
ANR	1105412	CompoundStatement		613:38:18900:18900	1103306	1					
ANR	1105413	ExpressionStatement	dc_main_pre_command_sock_init ( )	2148:2:56976:57007	1103306	0	True				
ANR	1105414	CallExpression	dc_main_pre_command_sock_init ( )		1103306	0					
ANR	1105415	Callee	dc_main_pre_command_sock_init		1103306	0					
ANR	1105416	Identifier	dc_main_pre_command_sock_init		1103306	0					
ANR	1105417	ArgumentList			1103306	1					
ANR	1105418	IfStatement	if ( pidFile )		1103306	84					
ANR	1105419	Condition	pidFile	2172:5:57815:57821	1103306	0	True				
ANR	1105420	Identifier	pidFile		1103306	0					
ANR	1105421	CompoundStatement		638:15:19753:19753	1103306	1					
ANR	1105422	ExpressionStatement	drop_pid_file ( )	2173:2:57829:57844	1103306	0	True				
ANR	1105423	CallExpression	drop_pid_file ( )		1103306	0					
ANR	1105424	Callee	drop_pid_file		1103306	0					
ANR	1105425	Identifier	drop_pid_file		1103306	0					
ANR	1105426	ArgumentList			1103306	1					
ANR	1105427	ExpressionStatement	kill_daemon_ad_file ( )	2179:1:58059:58080	1103306	85	True				
ANR	1105428	CallExpression	kill_daemon_ad_file ( )		1103306	0					
ANR	1105429	Callee	kill_daemon_ad_file		1103306	0					
ANR	1105430	Identifier	kill_daemon_ad_file		1103306	0					
ANR	1105431	ArgumentList			1103306	1					
ANR	1105432	ExpressionStatement	daemonCore -> SetDaemonSockName ( daemon_sock_name )	2183:1:58111:58160	1103306	86	True				
ANR	1105433	CallExpression	daemonCore -> SetDaemonSockName ( daemon_sock_name )		1103306	0					
ANR	1105434	Callee	daemonCore -> SetDaemonSockName		1103306	0					
ANR	1105435	PtrMemberAccess	daemonCore -> SetDaemonSockName		1103306	0					
ANR	1105436	Identifier	daemonCore		1103306	0					
ANR	1105437	Identifier	SetDaemonSockName		1103306	1					
ANR	1105438	ArgumentList	daemon_sock_name		1103306	1					
ANR	1105439	Argument	daemon_sock_name		1103306	0					
ANR	1105440	Identifier	daemon_sock_name		1103306	0					
ANR	1105441	ExpressionStatement	daemonCore -> InitDCCommandSocket ( command_port )	2184:1:58163:58210	1103306	87	True				
ANR	1105442	CallExpression	daemonCore -> InitDCCommandSocket ( command_port )		1103306	0					
ANR	1105443	Callee	daemonCore -> InitDCCommandSocket		1103306	0					
ANR	1105444	PtrMemberAccess	daemonCore -> InitDCCommandSocket		1103306	0					
ANR	1105445	Identifier	daemonCore		1103306	0					
ANR	1105446	Identifier	InitDCCommandSocket		1103306	1					
ANR	1105447	ArgumentList	command_port		1103306	1					
ANR	1105448	Argument	command_port		1103306	0					
ANR	1105449	Identifier	command_port		1103306	0					
ANR	1105450	ExpressionStatement	"daemonCore -> Register_Signal ( SIGHUP , ""SIGHUP"" , ( SignalHandler ) handle_dc_sighup , ""handle_dc_sighup()"" )"	2187:1:58277:58398	1103306	88	True				
ANR	1105451	CallExpression	"daemonCore -> Register_Signal ( SIGHUP , ""SIGHUP"" , ( SignalHandler ) handle_dc_sighup , ""handle_dc_sighup()"" )"		1103306	0					
ANR	1105452	Callee	daemonCore -> Register_Signal		1103306	0					
ANR	1105453	PtrMemberAccess	daemonCore -> Register_Signal		1103306	0					
ANR	1105454	Identifier	daemonCore		1103306	0					
ANR	1105455	Identifier	Register_Signal		1103306	1					
ANR	1105456	ArgumentList	SIGHUP		1103306	1					
ANR	1105457	Argument	SIGHUP		1103306	0					
ANR	1105458	Identifier	SIGHUP		1103306	0					
ANR	1105459	Argument	"""SIGHUP"""		1103306	1					
ANR	1105460	PrimaryExpression	"""SIGHUP"""		1103306	0					
ANR	1105461	Argument	( SignalHandler ) handle_dc_sighup		1103306	2					
ANR	1105462	CastExpression	( SignalHandler ) handle_dc_sighup		1103306	0					
ANR	1105463	CastTarget	SignalHandler		1103306	0					
ANR	1105464	Identifier	handle_dc_sighup		1103306	1					
ANR	1105465	Argument	"""handle_dc_sighup()"""		1103306	3					
ANR	1105466	PrimaryExpression	"""handle_dc_sighup()"""		1103306	0					
ANR	1105467	ExpressionStatement	"daemonCore -> Register_Signal ( SIGQUIT , ""SIGQUIT"" , ( SignalHandler ) handle_dc_sigquit , ""handle_dc_sigquit()"" )"	2190:1:58401:58526	1103306	89	True				
ANR	1105468	CallExpression	"daemonCore -> Register_Signal ( SIGQUIT , ""SIGQUIT"" , ( SignalHandler ) handle_dc_sigquit , ""handle_dc_sigquit()"" )"		1103306	0					
ANR	1105469	Callee	daemonCore -> Register_Signal		1103306	0					
ANR	1105470	PtrMemberAccess	daemonCore -> Register_Signal		1103306	0					
ANR	1105471	Identifier	daemonCore		1103306	0					
ANR	1105472	Identifier	Register_Signal		1103306	1					
ANR	1105473	ArgumentList	SIGQUIT		1103306	1					
ANR	1105474	Argument	SIGQUIT		1103306	0					
ANR	1105475	Identifier	SIGQUIT		1103306	0					
ANR	1105476	Argument	"""SIGQUIT"""		1103306	1					
ANR	1105477	PrimaryExpression	"""SIGQUIT"""		1103306	0					
ANR	1105478	Argument	( SignalHandler ) handle_dc_sigquit		1103306	2					
ANR	1105479	CastExpression	( SignalHandler ) handle_dc_sigquit		1103306	0					
ANR	1105480	CastTarget	SignalHandler		1103306	0					
ANR	1105481	Identifier	handle_dc_sigquit		1103306	1					
ANR	1105482	Argument	"""handle_dc_sigquit()"""		1103306	3					
ANR	1105483	PrimaryExpression	"""handle_dc_sigquit()"""		1103306	0					
ANR	1105484	ExpressionStatement	"daemonCore -> Register_Signal ( SIGTERM , ""SIGTERM"" , ( SignalHandler ) handle_dc_sigterm , ""handle_dc_sigterm()"" )"	2193:1:58529:58654	1103306	90	True				
ANR	1105485	CallExpression	"daemonCore -> Register_Signal ( SIGTERM , ""SIGTERM"" , ( SignalHandler ) handle_dc_sigterm , ""handle_dc_sigterm()"" )"		1103306	0					
ANR	1105486	Callee	daemonCore -> Register_Signal		1103306	0					
ANR	1105487	PtrMemberAccess	daemonCore -> Register_Signal		1103306	0					
ANR	1105488	Identifier	daemonCore		1103306	0					
ANR	1105489	Identifier	Register_Signal		1103306	1					
ANR	1105490	ArgumentList	SIGTERM		1103306	1					
ANR	1105491	Argument	SIGTERM		1103306	0					
ANR	1105492	Identifier	SIGTERM		1103306	0					
ANR	1105493	Argument	"""SIGTERM"""		1103306	1					
ANR	1105494	PrimaryExpression	"""SIGTERM"""		1103306	0					
ANR	1105495	Argument	( SignalHandler ) handle_dc_sigterm		1103306	2					
ANR	1105496	CastExpression	( SignalHandler ) handle_dc_sigterm		1103306	0					
ANR	1105497	CastTarget	SignalHandler		1103306	0					
ANR	1105498	Identifier	handle_dc_sigterm		1103306	1					
ANR	1105499	Argument	"""handle_dc_sigterm()"""		1103306	3					
ANR	1105500	PrimaryExpression	"""handle_dc_sigterm()"""		1103306	0					
ANR	1105501	ExpressionStatement	"daemonCore -> Register_Signal ( DC_SERVICEWAITPIDS , ""DC_SERVICEWAITPIDS"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS , ""HandleDC_SERVICEWAITPIDS()"" , daemonCore )"	2197:1:58658:58842	1103306	91	True				
ANR	1105502	CallExpression	"daemonCore -> Register_Signal ( DC_SERVICEWAITPIDS , ""DC_SERVICEWAITPIDS"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS , ""HandleDC_SERVICEWAITPIDS()"" , daemonCore )"		1103306	0					
ANR	1105503	Callee	daemonCore -> Register_Signal		1103306	0					
ANR	1105504	PtrMemberAccess	daemonCore -> Register_Signal		1103306	0					
ANR	1105505	Identifier	daemonCore		1103306	0					
ANR	1105506	Identifier	Register_Signal		1103306	1					
ANR	1105507	ArgumentList	DC_SERVICEWAITPIDS		1103306	1					
ANR	1105508	Argument	DC_SERVICEWAITPIDS		1103306	0					
ANR	1105509	Identifier	DC_SERVICEWAITPIDS		1103306	0					
ANR	1105510	Argument	"""DC_SERVICEWAITPIDS"""		1103306	1					
ANR	1105511	PrimaryExpression	"""DC_SERVICEWAITPIDS"""		1103306	0					
ANR	1105512	Argument	( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS		1103306	2					
ANR	1105513	CastExpression	( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS		1103306	0					
ANR	1105514	CastTarget	SignalHandlercpp		1103306	0					
ANR	1105515	UnaryOperationExpression	& DaemonCore :: HandleDC_SERVICEWAITPIDS		1103306	1					
ANR	1105516	UnaryOperator	&		1103306	0					
ANR	1105517	Identifier	DaemonCore :: HandleDC_SERVICEWAITPIDS		1103306	1					
ANR	1105518	Argument	"""HandleDC_SERVICEWAITPIDS()"""		1103306	3					
ANR	1105519	PrimaryExpression	"""HandleDC_SERVICEWAITPIDS()"""		1103306	0					
ANR	1105520	Argument	daemonCore		1103306	4					
ANR	1105521	Identifier	daemonCore		1103306	0					
ANR	1105522	ExpressionStatement	"daemonCore -> Register_Signal ( SIGCHLD , ""SIGCHLD"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD , ""HandleDC_SIGCHLD()"" , daemonCore )"	2201:1:58859:59007	1103306	92	True				
ANR	1105523	CallExpression	"daemonCore -> Register_Signal ( SIGCHLD , ""SIGCHLD"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD , ""HandleDC_SIGCHLD()"" , daemonCore )"		1103306	0					
ANR	1105524	Callee	daemonCore -> Register_Signal		1103306	0					
ANR	1105525	PtrMemberAccess	daemonCore -> Register_Signal		1103306	0					
ANR	1105526	Identifier	daemonCore		1103306	0					
ANR	1105527	Identifier	Register_Signal		1103306	1					
ANR	1105528	ArgumentList	SIGCHLD		1103306	1					
ANR	1105529	Argument	SIGCHLD		1103306	0					
ANR	1105530	Identifier	SIGCHLD		1103306	0					
ANR	1105531	Argument	"""SIGCHLD"""		1103306	1					
ANR	1105532	PrimaryExpression	"""SIGCHLD"""		1103306	0					
ANR	1105533	Argument	( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD		1103306	2					
ANR	1105534	CastExpression	( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD		1103306	0					
ANR	1105535	CastTarget	SignalHandlercpp		1103306	0					
ANR	1105536	UnaryOperationExpression	& DaemonCore :: HandleDC_SIGCHLD		1103306	1					
ANR	1105537	UnaryOperator	&		1103306	0					
ANR	1105538	Identifier	DaemonCore :: HandleDC_SIGCHLD		1103306	1					
ANR	1105539	Argument	"""HandleDC_SIGCHLD()"""		1103306	3					
ANR	1105540	PrimaryExpression	"""HandleDC_SIGCHLD()"""		1103306	0					
ANR	1105541	Argument	daemonCore		1103306	4					
ANR	1105542	Identifier	daemonCore		1103306	0					
ANR	1105543	IfStatement	if ( runfor )		1103306	93					
ANR	1105544	Condition	runfor	2209:6:59141:59146	1103306	0	True				
ANR	1105545	Identifier	runfor		1103306	0					
ANR	1105546	CompoundStatement		675:15:21078:21078	1103306	1					
ANR	1105547	ExpressionStatement	daemon_stop_time = time ( NULL ) + runfor * 60	2210:2:59154:59193	1103306	0	True				
ANR	1105548	AssignmentExpression	daemon_stop_time = time ( NULL ) + runfor * 60		1103306	0		=			
ANR	1105549	Identifier	daemon_stop_time		1103306	0					
ANR	1105550	AdditiveExpression	time ( NULL ) + runfor * 60		1103306	1		+			
ANR	1105551	CallExpression	time ( NULL )		1103306	0					
ANR	1105552	Callee	time		1103306	0					
ANR	1105553	Identifier	time		1103306	0					
ANR	1105554	ArgumentList	NULL		1103306	1					
ANR	1105555	Argument	NULL		1103306	0					
ANR	1105556	Identifier	NULL		1103306	0					
ANR	1105557	MultiplicativeExpression	runfor * 60		1103306	1		*			
ANR	1105558	Identifier	runfor		1103306	0					
ANR	1105559	PrimaryExpression	60		1103306	1					
ANR	1105560	ExpressionStatement	"daemonCore -> Register_Timer ( runfor * 60 , 0 , TimerHandler_dc_sigterm , ""handle_dc_sigterm"" )"	2211:2:59197:59292	1103306	1	True				
ANR	1105561	CallExpression	"daemonCore -> Register_Timer ( runfor * 60 , 0 , TimerHandler_dc_sigterm , ""handle_dc_sigterm"" )"		1103306	0					
ANR	1105562	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105563	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105564	Identifier	daemonCore		1103306	0					
ANR	1105565	Identifier	Register_Timer		1103306	1					
ANR	1105566	ArgumentList	runfor * 60		1103306	1					
ANR	1105567	Argument	runfor * 60		1103306	0					
ANR	1105568	MultiplicativeExpression	runfor * 60		1103306	0		*			
ANR	1105569	Identifier	runfor		1103306	0					
ANR	1105570	PrimaryExpression	60		1103306	1					
ANR	1105571	Argument	0		1103306	1					
ANR	1105572	PrimaryExpression	0		1103306	0					
ANR	1105573	Argument	TimerHandler_dc_sigterm		1103306	2					
ANR	1105574	Identifier	TimerHandler_dc_sigterm		1103306	0					
ANR	1105575	Argument	"""handle_dc_sigterm"""		1103306	3					
ANR	1105576	PrimaryExpression	"""handle_dc_sigterm"""		1103306	0					
ANR	1105577	ExpressionStatement	"dprintf ( D_ALWAYS , ""Registered Timer for graceful shutdown in %d minutes\\n"" , runfor )"	2213:2:59296:59383	1103306	2	True				
ANR	1105578	CallExpression	"dprintf ( D_ALWAYS , ""Registered Timer for graceful shutdown in %d minutes\\n"" , runfor )"		1103306	0					
ANR	1105579	Callee	dprintf		1103306	0					
ANR	1105580	Identifier	dprintf		1103306	0					
ANR	1105581	ArgumentList	D_ALWAYS		1103306	1					
ANR	1105582	Argument	D_ALWAYS		1103306	0					
ANR	1105583	Identifier	D_ALWAYS		1103306	0					
ANR	1105584	Argument	"""Registered Timer for graceful shutdown in %d minutes\\n"""		1103306	1					
ANR	1105585	PrimaryExpression	"""Registered Timer for graceful shutdown in %d minutes\\n"""		1103306	0					
ANR	1105586	Argument	runfor		1103306	2					
ANR	1105587	Identifier	runfor		1103306	0					
ANR	1105588	ElseStatement	else		1103306	0					
ANR	1105589	CompoundStatement		682:6:21322:21322	1103306	0					
ANR	1105590	ExpressionStatement	daemon_stop_time = 0	2217:2:59398:59418	1103306	0	True				
ANR	1105591	AssignmentExpression	daemon_stop_time = 0		1103306	0		=			
ANR	1105592	Identifier	daemon_stop_time		1103306	0					
ANR	1105593	PrimaryExpression	0		1103306	1					
ANR	1105594	IfStatement	if ( ! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) )		1103306	94					
ANR	1105595	Condition	! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )	2224:6:59660:59709	1103306	0	True				
ANR	1105596	UnaryOperationExpression	! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		1103306	0					
ANR	1105597	UnaryOperator	!		1103306	0					
ANR	1105598	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		1103306	1					
ANR	1105599	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105600	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105601	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105602	Callee	get_mySubSystem		1103306	0					
ANR	1105603	Identifier	get_mySubSystem		1103306	0					
ANR	1105604	ArgumentList			1103306	1					
ANR	1105605	Identifier	isType		1103306	1					
ANR	1105606	ArgumentList	SUBSYSTEM_TYPE_MASTER		1103306	1					
ANR	1105607	Argument	SUBSYSTEM_TYPE_MASTER		1103306	0					
ANR	1105608	Identifier	SUBSYSTEM_TYPE_MASTER		1103306	0					
ANR	1105609	CompoundStatement		690:59:21641:21641	1103306	1					
ANR	1105610	ExpressionStatement	"daemonCore -> Register_Timer ( 15 , 120 , check_parent , ""check_parent"" )"	2225:2:59717:59789	1103306	0	True				
ANR	1105611	CallExpression	"daemonCore -> Register_Timer ( 15 , 120 , check_parent , ""check_parent"" )"		1103306	0					
ANR	1105612	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105613	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105614	Identifier	daemonCore		1103306	0					
ANR	1105615	Identifier	Register_Timer		1103306	1					
ANR	1105616	ArgumentList	15		1103306	1					
ANR	1105617	Argument	15		1103306	0					
ANR	1105618	PrimaryExpression	15		1103306	0					
ANR	1105619	Argument	120		1103306	1					
ANR	1105620	PrimaryExpression	120		1103306	0					
ANR	1105621	Argument	check_parent		1103306	2					
ANR	1105622	Identifier	check_parent		1103306	0					
ANR	1105623	Argument	"""check_parent"""		1103306	3					
ANR	1105624	PrimaryExpression	"""check_parent"""		1103306	0					
ANR	1105625	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , dc_touch_log_file , ""dc_touch_log_file"" )"	2230:1:59803:59878	1103306	95	True				
ANR	1105626	CallExpression	"daemonCore -> Register_Timer ( 0 , dc_touch_log_file , ""dc_touch_log_file"" )"		1103306	0					
ANR	1105627	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105628	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105629	Identifier	daemonCore		1103306	0					
ANR	1105630	Identifier	Register_Timer		1103306	1					
ANR	1105631	ArgumentList	0		1103306	1					
ANR	1105632	Argument	0		1103306	0					
ANR	1105633	PrimaryExpression	0		1103306	0					
ANR	1105634	Argument	dc_touch_log_file		1103306	1					
ANR	1105635	Identifier	dc_touch_log_file		1103306	0					
ANR	1105636	Argument	"""dc_touch_log_file"""		1103306	2					
ANR	1105637	PrimaryExpression	"""dc_touch_log_file"""		1103306	0					
ANR	1105638	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , dc_touch_lock_files , ""dc_touch_lock_files"" )"	2233:1:59882:59961	1103306	96	True				
ANR	1105639	CallExpression	"daemonCore -> Register_Timer ( 0 , dc_touch_lock_files , ""dc_touch_lock_files"" )"		1103306	0					
ANR	1105640	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105641	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105642	Identifier	daemonCore		1103306	0					
ANR	1105643	Identifier	Register_Timer		1103306	1					
ANR	1105644	ArgumentList	0		1103306	1					
ANR	1105645	Argument	0		1103306	0					
ANR	1105646	PrimaryExpression	0		1103306	0					
ANR	1105647	Argument	dc_touch_lock_files		1103306	1					
ANR	1105648	Identifier	dc_touch_lock_files		1103306	0					
ANR	1105649	Argument	"""dc_touch_lock_files"""		1103306	2					
ANR	1105650	PrimaryExpression	"""dc_touch_lock_files"""		1103306	0					
ANR	1105651	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , 5 * 60 , check_session_cache , ""check_session_cache"" )"	2236:1:59965:60052	1103306	97	True				
ANR	1105652	CallExpression	"daemonCore -> Register_Timer ( 0 , 5 * 60 , check_session_cache , ""check_session_cache"" )"		1103306	0					
ANR	1105653	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105654	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105655	Identifier	daemonCore		1103306	0					
ANR	1105656	Identifier	Register_Timer		1103306	1					
ANR	1105657	ArgumentList	0		1103306	1					
ANR	1105658	Argument	0		1103306	0					
ANR	1105659	PrimaryExpression	0		1103306	0					
ANR	1105660	Argument	5 * 60		1103306	1					
ANR	1105661	MultiplicativeExpression	5 * 60		1103306	0		*			
ANR	1105662	PrimaryExpression	5		1103306	0					
ANR	1105663	PrimaryExpression	60		1103306	1					
ANR	1105664	Argument	check_session_cache		1103306	2					
ANR	1105665	Identifier	check_session_cache		1103306	0					
ANR	1105666	Argument	"""check_session_cache"""		1103306	3					
ANR	1105667	PrimaryExpression	"""check_session_cache"""		1103306	0					
ANR	1105668	IdentifierDeclStatement	"int cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1 ;"	2243:1:60187:60265	1103306	98	True				
ANR	1105669	IdentifierDecl	"cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		1103306	0					
ANR	1105670	IdentifierDeclType	int		1103306	0					
ANR	1105671	Identifier	cookie_refresh		1103306	1					
ANR	1105672	AssignmentExpression	"cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		1103306	2		=			
ANR	1105673	Identifier	cookie_refresh		1103306	0					
ANR	1105674	AdditiveExpression	"( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		1103306	1		+			
ANR	1105675	MultiplicativeExpression	"param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2"		1103306	0		/			
ANR	1105676	CallExpression	"param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 )"		1103306	0					
ANR	1105677	Callee	param_integer		1103306	0					
ANR	1105678	Identifier	param_integer		1103306	0					
ANR	1105679	ArgumentList	"""SEC_DEFAULT_SESSION_DURATION"""		1103306	1					
ANR	1105680	Argument	"""SEC_DEFAULT_SESSION_DURATION"""		1103306	0					
ANR	1105681	PrimaryExpression	"""SEC_DEFAULT_SESSION_DURATION"""		1103306	0					
ANR	1105682	Argument	3600		1103306	1					
ANR	1105683	PrimaryExpression	3600		1103306	0					
ANR	1105684	PrimaryExpression	2		1103306	1					
ANR	1105685	PrimaryExpression	1		1103306	1					
ANR	1105686	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , cookie_refresh , handle_cookie_refresh , ""handle_cookie_refresh"" )"	2245:1:60269:60368	1103306	99	True				
ANR	1105687	CallExpression	"daemonCore -> Register_Timer ( 0 , cookie_refresh , handle_cookie_refresh , ""handle_cookie_refresh"" )"		1103306	0					
ANR	1105688	Callee	daemonCore -> Register_Timer		1103306	0					
ANR	1105689	PtrMemberAccess	daemonCore -> Register_Timer		1103306	0					
ANR	1105690	Identifier	daemonCore		1103306	0					
ANR	1105691	Identifier	Register_Timer		1103306	1					
ANR	1105692	ArgumentList	0		1103306	1					
ANR	1105693	Argument	0		1103306	0					
ANR	1105694	PrimaryExpression	0		1103306	0					
ANR	1105695	Argument	cookie_refresh		1103306	1					
ANR	1105696	Identifier	cookie_refresh		1103306	0					
ANR	1105697	Argument	handle_cookie_refresh		1103306	2					
ANR	1105698	Identifier	handle_cookie_refresh		1103306	0					
ANR	1105699	Argument	"""handle_cookie_refresh"""		1103306	3					
ANR	1105700	PrimaryExpression	"""handle_cookie_refresh"""		1103306	0					
ANR	1105701	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD ) )		1103306	100					
ANR	1105702	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )	2249:5:60378:60658	1103306	0	True				
ANR	1105703	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		1103306	0		||			
ANR	1105704	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		1103306	0					
ANR	1105705	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105706	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105707	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105708	Callee	get_mySubSystem		1103306	0					
ANR	1105709	Identifier	get_mySubSystem		1103306	0					
ANR	1105710	ArgumentList			1103306	1					
ANR	1105711	Identifier	isType		1103306	1					
ANR	1105712	ArgumentList	SUBSYSTEM_TYPE_MASTER		1103306	1					
ANR	1105713	Argument	SUBSYSTEM_TYPE_MASTER		1103306	0					
ANR	1105714	Identifier	SUBSYSTEM_TYPE_MASTER		1103306	0					
ANR	1105715	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		1103306	1		||			
ANR	1105716	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )		1103306	0					
ANR	1105717	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105718	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105719	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105720	Callee	get_mySubSystem		1103306	0					
ANR	1105721	Identifier	get_mySubSystem		1103306	0					
ANR	1105722	ArgumentList			1103306	1					
ANR	1105723	Identifier	isType		1103306	1					
ANR	1105724	ArgumentList	SUBSYSTEM_TYPE_COLLECTOR		1103306	1					
ANR	1105725	Argument	SUBSYSTEM_TYPE_COLLECTOR		1103306	0					
ANR	1105726	Identifier	SUBSYSTEM_TYPE_COLLECTOR		1103306	0					
ANR	1105727	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		1103306	1		||			
ANR	1105728	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR )		1103306	0					
ANR	1105729	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105730	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105731	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105732	Callee	get_mySubSystem		1103306	0					
ANR	1105733	Identifier	get_mySubSystem		1103306	0					
ANR	1105734	ArgumentList			1103306	1					
ANR	1105735	Identifier	isType		1103306	1					
ANR	1105736	ArgumentList	SUBSYSTEM_TYPE_NEGOTIATOR		1103306	1					
ANR	1105737	Argument	SUBSYSTEM_TYPE_NEGOTIATOR		1103306	0					
ANR	1105738	Identifier	SUBSYSTEM_TYPE_NEGOTIATOR		1103306	0					
ANR	1105739	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		1103306	1		||			
ANR	1105740	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD )		1103306	0					
ANR	1105741	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105742	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105743	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105744	Callee	get_mySubSystem		1103306	0					
ANR	1105745	Identifier	get_mySubSystem		1103306	0					
ANR	1105746	ArgumentList			1103306	1					
ANR	1105747	Identifier	isType		1103306	1					
ANR	1105748	ArgumentList	SUBSYSTEM_TYPE_SCHEDD		1103306	1					
ANR	1105749	Argument	SUBSYSTEM_TYPE_SCHEDD		1103306	0					
ANR	1105750	Identifier	SUBSYSTEM_TYPE_SCHEDD		1103306	0					
ANR	1105751	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		1103306	1					
ANR	1105752	Callee	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105753	PtrMemberAccess	get_mySubSystem ( ) -> isType		1103306	0					
ANR	1105754	CallExpression	get_mySubSystem ( )		1103306	0					
ANR	1105755	Callee	get_mySubSystem		1103306	0					
ANR	1105756	Identifier	get_mySubSystem		1103306	0					
ANR	1105757	ArgumentList			1103306	1					
ANR	1105758	Identifier	isType		1103306	1					
ANR	1105759	ArgumentList	SUBSYSTEM_TYPE_STARTD		1103306	1					
ANR	1105760	Argument	SUBSYSTEM_TYPE_STARTD		1103306	0					
ANR	1105761	Identifier	SUBSYSTEM_TYPE_STARTD		1103306	0					
ANR	1105762	CompoundStatement		719:55:22590:22590	1103306	1					
ANR	1105763	ExpressionStatement	daemonCore -> monitor_data . EnableMonitoring ( )	2254:8:60672:60715	1103306	0	True				
ANR	1105764	CallExpression	daemonCore -> monitor_data . EnableMonitoring ( )		1103306	0					
ANR	1105765	Callee	daemonCore -> monitor_data . EnableMonitoring		1103306	0					
ANR	1105766	MemberAccess	daemonCore -> monitor_data . EnableMonitoring		1103306	0					
ANR	1105767	PtrMemberAccess	daemonCore -> monitor_data		1103306	0					
ANR	1105768	Identifier	daemonCore		1103306	0					
ANR	1105769	Identifier	monitor_data		1103306	1					
ANR	1105770	Identifier	EnableMonitoring		1103306	1					
ANR	1105771	ArgumentList			1103306	1					
ANR	1105772	ExpressionStatement	"daemonCore -> Register_Command ( DC_RECONFIG , ""DC_RECONFIG"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"	2258:1:60789:60931	1103306	101	True				
ANR	1105773	CallExpression	"daemonCore -> Register_Command ( DC_RECONFIG , ""DC_RECONFIG"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"		1103306	0					
ANR	1105774	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105775	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105776	Identifier	daemonCore		1103306	0					
ANR	1105777	Identifier	Register_Command		1103306	1					
ANR	1105778	ArgumentList	DC_RECONFIG		1103306	1					
ANR	1105779	Argument	DC_RECONFIG		1103306	0					
ANR	1105780	Identifier	DC_RECONFIG		1103306	0					
ANR	1105781	Argument	"""DC_RECONFIG"""		1103306	1					
ANR	1105782	PrimaryExpression	"""DC_RECONFIG"""		1103306	0					
ANR	1105783	Argument	( CommandHandler ) handle_reconfig		1103306	2					
ANR	1105784	CastExpression	( CommandHandler ) handle_reconfig		1103306	0					
ANR	1105785	CastTarget	CommandHandler		1103306	0					
ANR	1105786	Identifier	handle_reconfig		1103306	1					
ANR	1105787	Argument	"""handle_reconfig()"""		1103306	3					
ANR	1105788	PrimaryExpression	"""handle_reconfig()"""		1103306	0					
ANR	1105789	Argument	0		1103306	4					
ANR	1105790	PrimaryExpression	0		1103306	0					
ANR	1105791	Argument	WRITE		1103306	5					
ANR	1105792	Identifier	WRITE		1103306	0					
ANR	1105793	ExpressionStatement	"daemonCore -> Register_Command ( DC_RECONFIG_FULL , ""DC_RECONFIG_FULL"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"	2262:1:60935:61087	1103306	102	True				
ANR	1105794	CallExpression	"daemonCore -> Register_Command ( DC_RECONFIG_FULL , ""DC_RECONFIG_FULL"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"		1103306	0					
ANR	1105795	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105796	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105797	Identifier	daemonCore		1103306	0					
ANR	1105798	Identifier	Register_Command		1103306	1					
ANR	1105799	ArgumentList	DC_RECONFIG_FULL		1103306	1					
ANR	1105800	Argument	DC_RECONFIG_FULL		1103306	0					
ANR	1105801	Identifier	DC_RECONFIG_FULL		1103306	0					
ANR	1105802	Argument	"""DC_RECONFIG_FULL"""		1103306	1					
ANR	1105803	PrimaryExpression	"""DC_RECONFIG_FULL"""		1103306	0					
ANR	1105804	Argument	( CommandHandler ) handle_reconfig		1103306	2					
ANR	1105805	CastExpression	( CommandHandler ) handle_reconfig		1103306	0					
ANR	1105806	CastTarget	CommandHandler		1103306	0					
ANR	1105807	Identifier	handle_reconfig		1103306	1					
ANR	1105808	Argument	"""handle_reconfig()"""		1103306	3					
ANR	1105809	PrimaryExpression	"""handle_reconfig()"""		1103306	0					
ANR	1105810	Argument	0		1103306	4					
ANR	1105811	PrimaryExpression	0		1103306	0					
ANR	1105812	Argument	WRITE		1103306	5					
ANR	1105813	Identifier	WRITE		1103306	0					
ANR	1105814	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_VAL , ""DC_CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"	2266:1:61091:61240	1103306	103	True				
ANR	1105815	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_VAL , ""DC_CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"		1103306	0					
ANR	1105816	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105817	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105818	Identifier	daemonCore		1103306	0					
ANR	1105819	Identifier	Register_Command		1103306	1					
ANR	1105820	ArgumentList	DC_CONFIG_VAL		1103306	1					
ANR	1105821	Argument	DC_CONFIG_VAL		1103306	0					
ANR	1105822	Identifier	DC_CONFIG_VAL		1103306	0					
ANR	1105823	Argument	"""DC_CONFIG_VAL"""		1103306	1					
ANR	1105824	PrimaryExpression	"""DC_CONFIG_VAL"""		1103306	0					
ANR	1105825	Argument	( CommandHandler ) handle_config_val		1103306	2					
ANR	1105826	CastExpression	( CommandHandler ) handle_config_val		1103306	0					
ANR	1105827	CastTarget	CommandHandler		1103306	0					
ANR	1105828	Identifier	handle_config_val		1103306	1					
ANR	1105829	Argument	"""handle_config_val()"""		1103306	3					
ANR	1105830	PrimaryExpression	"""handle_config_val()"""		1103306	0					
ANR	1105831	Argument	0		1103306	4					
ANR	1105832	PrimaryExpression	0		1103306	0					
ANR	1105833	Argument	READ		1103306	5					
ANR	1105834	Identifier	READ		1103306	0					
ANR	1105835	ExpressionStatement	"daemonCore -> Register_Command ( CONFIG_VAL , ""CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"	2270:1:61272:61415	1103306	104	True				
ANR	1105836	CallExpression	"daemonCore -> Register_Command ( CONFIG_VAL , ""CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"		1103306	0					
ANR	1105837	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105838	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105839	Identifier	daemonCore		1103306	0					
ANR	1105840	Identifier	Register_Command		1103306	1					
ANR	1105841	ArgumentList	CONFIG_VAL		1103306	1					
ANR	1105842	Argument	CONFIG_VAL		1103306	0					
ANR	1105843	Identifier	CONFIG_VAL		1103306	0					
ANR	1105844	Argument	"""CONFIG_VAL"""		1103306	1					
ANR	1105845	PrimaryExpression	"""CONFIG_VAL"""		1103306	0					
ANR	1105846	Argument	( CommandHandler ) handle_config_val		1103306	2					
ANR	1105847	CastExpression	( CommandHandler ) handle_config_val		1103306	0					
ANR	1105848	CastTarget	CommandHandler		1103306	0					
ANR	1105849	Identifier	handle_config_val		1103306	1					
ANR	1105850	Argument	"""handle_config_val()"""		1103306	3					
ANR	1105851	PrimaryExpression	"""handle_config_val()"""		1103306	0					
ANR	1105852	Argument	0		1103306	4					
ANR	1105853	PrimaryExpression	0		1103306	0					
ANR	1105854	Argument	READ		1103306	5					
ANR	1105855	Identifier	READ		1103306	0					
ANR	1105856	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_PERSIST , ""DC_CONFIG_PERSIST"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"	2277:1:61597:61747	1103306	105	True				
ANR	1105857	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_PERSIST , ""DC_CONFIG_PERSIST"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"		1103306	0					
ANR	1105858	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105859	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105860	Identifier	daemonCore		1103306	0					
ANR	1105861	Identifier	Register_Command		1103306	1					
ANR	1105862	ArgumentList	DC_CONFIG_PERSIST		1103306	1					
ANR	1105863	Argument	DC_CONFIG_PERSIST		1103306	0					
ANR	1105864	Identifier	DC_CONFIG_PERSIST		1103306	0					
ANR	1105865	Argument	"""DC_CONFIG_PERSIST"""		1103306	1					
ANR	1105866	PrimaryExpression	"""DC_CONFIG_PERSIST"""		1103306	0					
ANR	1105867	Argument	( CommandHandler ) handle_config		1103306	2					
ANR	1105868	CastExpression	( CommandHandler ) handle_config		1103306	0					
ANR	1105869	CastTarget	CommandHandler		1103306	0					
ANR	1105870	Identifier	handle_config		1103306	1					
ANR	1105871	Argument	"""handle_config()"""		1103306	3					
ANR	1105872	PrimaryExpression	"""handle_config()"""		1103306	0					
ANR	1105873	Argument	0		1103306	4					
ANR	1105874	PrimaryExpression	0		1103306	0					
ANR	1105875	Argument	ALLOW		1103306	5					
ANR	1105876	Identifier	ALLOW		1103306	0					
ANR	1105877	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_RUNTIME , ""DC_CONFIG_RUNTIME"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"	2281:1:61751:61901	1103306	106	True				
ANR	1105878	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_RUNTIME , ""DC_CONFIG_RUNTIME"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"		1103306	0					
ANR	1105879	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105880	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105881	Identifier	daemonCore		1103306	0					
ANR	1105882	Identifier	Register_Command		1103306	1					
ANR	1105883	ArgumentList	DC_CONFIG_RUNTIME		1103306	1					
ANR	1105884	Argument	DC_CONFIG_RUNTIME		1103306	0					
ANR	1105885	Identifier	DC_CONFIG_RUNTIME		1103306	0					
ANR	1105886	Argument	"""DC_CONFIG_RUNTIME"""		1103306	1					
ANR	1105887	PrimaryExpression	"""DC_CONFIG_RUNTIME"""		1103306	0					
ANR	1105888	Argument	( CommandHandler ) handle_config		1103306	2					
ANR	1105889	CastExpression	( CommandHandler ) handle_config		1103306	0					
ANR	1105890	CastTarget	CommandHandler		1103306	0					
ANR	1105891	Identifier	handle_config		1103306	1					
ANR	1105892	Argument	"""handle_config()"""		1103306	3					
ANR	1105893	PrimaryExpression	"""handle_config()"""		1103306	0					
ANR	1105894	Argument	0		1103306	4					
ANR	1105895	PrimaryExpression	0		1103306	0					
ANR	1105896	Argument	ALLOW		1103306	5					
ANR	1105897	Identifier	ALLOW		1103306	0					
ANR	1105898	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_FAST , ""DC_OFF_FAST"" , ( CommandHandler ) handle_off_fast , ""handle_off_fast()"" , 0 , ADMINISTRATOR )"	2285:1:61905:62055	1103306	107	True				
ANR	1105899	CallExpression	"daemonCore -> Register_Command ( DC_OFF_FAST , ""DC_OFF_FAST"" , ( CommandHandler ) handle_off_fast , ""handle_off_fast()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1105900	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105901	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105902	Identifier	daemonCore		1103306	0					
ANR	1105903	Identifier	Register_Command		1103306	1					
ANR	1105904	ArgumentList	DC_OFF_FAST		1103306	1					
ANR	1105905	Argument	DC_OFF_FAST		1103306	0					
ANR	1105906	Identifier	DC_OFF_FAST		1103306	0					
ANR	1105907	Argument	"""DC_OFF_FAST"""		1103306	1					
ANR	1105908	PrimaryExpression	"""DC_OFF_FAST"""		1103306	0					
ANR	1105909	Argument	( CommandHandler ) handle_off_fast		1103306	2					
ANR	1105910	CastExpression	( CommandHandler ) handle_off_fast		1103306	0					
ANR	1105911	CastTarget	CommandHandler		1103306	0					
ANR	1105912	Identifier	handle_off_fast		1103306	1					
ANR	1105913	Argument	"""handle_off_fast()"""		1103306	3					
ANR	1105914	PrimaryExpression	"""handle_off_fast()"""		1103306	0					
ANR	1105915	Argument	0		1103306	4					
ANR	1105916	PrimaryExpression	0		1103306	0					
ANR	1105917	Argument	ADMINISTRATOR		1103306	5					
ANR	1105918	Identifier	ADMINISTRATOR		1103306	0					
ANR	1105919	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_GRACEFUL , ""DC_OFF_GRACEFUL"" , ( CommandHandler ) handle_off_graceful , ""handle_off_graceful()"" , 0 , ADMINISTRATOR )"	2289:1:62059:62225	1103306	108	True				
ANR	1105920	CallExpression	"daemonCore -> Register_Command ( DC_OFF_GRACEFUL , ""DC_OFF_GRACEFUL"" , ( CommandHandler ) handle_off_graceful , ""handle_off_graceful()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1105921	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105922	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105923	Identifier	daemonCore		1103306	0					
ANR	1105924	Identifier	Register_Command		1103306	1					
ANR	1105925	ArgumentList	DC_OFF_GRACEFUL		1103306	1					
ANR	1105926	Argument	DC_OFF_GRACEFUL		1103306	0					
ANR	1105927	Identifier	DC_OFF_GRACEFUL		1103306	0					
ANR	1105928	Argument	"""DC_OFF_GRACEFUL"""		1103306	1					
ANR	1105929	PrimaryExpression	"""DC_OFF_GRACEFUL"""		1103306	0					
ANR	1105930	Argument	( CommandHandler ) handle_off_graceful		1103306	2					
ANR	1105931	CastExpression	( CommandHandler ) handle_off_graceful		1103306	0					
ANR	1105932	CastTarget	CommandHandler		1103306	0					
ANR	1105933	Identifier	handle_off_graceful		1103306	1					
ANR	1105934	Argument	"""handle_off_graceful()"""		1103306	3					
ANR	1105935	PrimaryExpression	"""handle_off_graceful()"""		1103306	0					
ANR	1105936	Argument	0		1103306	4					
ANR	1105937	PrimaryExpression	0		1103306	0					
ANR	1105938	Argument	ADMINISTRATOR		1103306	5					
ANR	1105939	Identifier	ADMINISTRATOR		1103306	0					
ANR	1105940	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_PEACEFUL , ""DC_OFF_PEACEFUL"" , ( CommandHandler ) handle_off_peaceful , ""handle_off_peaceful()"" , 0 , ADMINISTRATOR )"	2293:1:62229:62395	1103306	109	True				
ANR	1105941	CallExpression	"daemonCore -> Register_Command ( DC_OFF_PEACEFUL , ""DC_OFF_PEACEFUL"" , ( CommandHandler ) handle_off_peaceful , ""handle_off_peaceful()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1105942	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105943	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105944	Identifier	daemonCore		1103306	0					
ANR	1105945	Identifier	Register_Command		1103306	1					
ANR	1105946	ArgumentList	DC_OFF_PEACEFUL		1103306	1					
ANR	1105947	Argument	DC_OFF_PEACEFUL		1103306	0					
ANR	1105948	Identifier	DC_OFF_PEACEFUL		1103306	0					
ANR	1105949	Argument	"""DC_OFF_PEACEFUL"""		1103306	1					
ANR	1105950	PrimaryExpression	"""DC_OFF_PEACEFUL"""		1103306	0					
ANR	1105951	Argument	( CommandHandler ) handle_off_peaceful		1103306	2					
ANR	1105952	CastExpression	( CommandHandler ) handle_off_peaceful		1103306	0					
ANR	1105953	CastTarget	CommandHandler		1103306	0					
ANR	1105954	Identifier	handle_off_peaceful		1103306	1					
ANR	1105955	Argument	"""handle_off_peaceful()"""		1103306	3					
ANR	1105956	PrimaryExpression	"""handle_off_peaceful()"""		1103306	0					
ANR	1105957	Argument	0		1103306	4					
ANR	1105958	PrimaryExpression	0		1103306	0					
ANR	1105959	Argument	ADMINISTRATOR		1103306	5					
ANR	1105960	Identifier	ADMINISTRATOR		1103306	0					
ANR	1105961	ExpressionStatement	"daemonCore -> Register_Command ( DC_SET_PEACEFUL_SHUTDOWN , ""DC_SET_PEACEFUL_SHUTDOWN"" , ( CommandHandler ) handle_set_peaceful_shutdown , ""handle_set_peaceful_shutdown()"" , 0 , ADMINISTRATOR )"	2297:1:62399:62601	1103306	110	True				
ANR	1105962	CallExpression	"daemonCore -> Register_Command ( DC_SET_PEACEFUL_SHUTDOWN , ""DC_SET_PEACEFUL_SHUTDOWN"" , ( CommandHandler ) handle_set_peaceful_shutdown , ""handle_set_peaceful_shutdown()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1105963	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105964	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105965	Identifier	daemonCore		1103306	0					
ANR	1105966	Identifier	Register_Command		1103306	1					
ANR	1105967	ArgumentList	DC_SET_PEACEFUL_SHUTDOWN		1103306	1					
ANR	1105968	Argument	DC_SET_PEACEFUL_SHUTDOWN		1103306	0					
ANR	1105969	Identifier	DC_SET_PEACEFUL_SHUTDOWN		1103306	0					
ANR	1105970	Argument	"""DC_SET_PEACEFUL_SHUTDOWN"""		1103306	1					
ANR	1105971	PrimaryExpression	"""DC_SET_PEACEFUL_SHUTDOWN"""		1103306	0					
ANR	1105972	Argument	( CommandHandler ) handle_set_peaceful_shutdown		1103306	2					
ANR	1105973	CastExpression	( CommandHandler ) handle_set_peaceful_shutdown		1103306	0					
ANR	1105974	CastTarget	CommandHandler		1103306	0					
ANR	1105975	Identifier	handle_set_peaceful_shutdown		1103306	1					
ANR	1105976	Argument	"""handle_set_peaceful_shutdown()"""		1103306	3					
ANR	1105977	PrimaryExpression	"""handle_set_peaceful_shutdown()"""		1103306	0					
ANR	1105978	Argument	0		1103306	4					
ANR	1105979	PrimaryExpression	0		1103306	0					
ANR	1105980	Argument	ADMINISTRATOR		1103306	5					
ANR	1105981	Identifier	ADMINISTRATOR		1103306	0					
ANR	1105982	ExpressionStatement	"daemonCore -> Register_Command ( DC_NOP , ""DC_NOP"" , ( CommandHandler ) handle_nop , ""handle_nop()"" , 0 , ALLOW )"	2305:1:62835:62957	1103306	111	True				
ANR	1105983	CallExpression	"daemonCore -> Register_Command ( DC_NOP , ""DC_NOP"" , ( CommandHandler ) handle_nop , ""handle_nop()"" , 0 , ALLOW )"		1103306	0					
ANR	1105984	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1105985	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1105986	Identifier	daemonCore		1103306	0					
ANR	1105987	Identifier	Register_Command		1103306	1					
ANR	1105988	ArgumentList	DC_NOP		1103306	1					
ANR	1105989	Argument	DC_NOP		1103306	0					
ANR	1105990	Identifier	DC_NOP		1103306	0					
ANR	1105991	Argument	"""DC_NOP"""		1103306	1					
ANR	1105992	PrimaryExpression	"""DC_NOP"""		1103306	0					
ANR	1105993	Argument	( CommandHandler ) handle_nop		1103306	2					
ANR	1105994	CastExpression	( CommandHandler ) handle_nop		1103306	0					
ANR	1105995	CastTarget	CommandHandler		1103306	0					
ANR	1105996	Identifier	handle_nop		1103306	1					
ANR	1105997	Argument	"""handle_nop()"""		1103306	3					
ANR	1105998	PrimaryExpression	"""handle_nop()"""		1103306	0					
ANR	1105999	Argument	0		1103306	4					
ANR	1106000	PrimaryExpression	0		1103306	0					
ANR	1106001	Argument	ALLOW		1103306	5					
ANR	1106002	Identifier	ALLOW		1103306	0					
ANR	1106003	ExpressionStatement	"daemonCore -> Register_Command ( DC_FETCH_LOG , ""DC_FETCH_LOG"" , ( CommandHandler ) handle_fetch_log , ""handle_fetch_log()"" , 0 , ADMINISTRATOR )"	2309:1:62961:63115	1103306	112	True				
ANR	1106004	CallExpression	"daemonCore -> Register_Command ( DC_FETCH_LOG , ""DC_FETCH_LOG"" , ( CommandHandler ) handle_fetch_log , ""handle_fetch_log()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1106005	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1106006	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1106007	Identifier	daemonCore		1103306	0					
ANR	1106008	Identifier	Register_Command		1103306	1					
ANR	1106009	ArgumentList	DC_FETCH_LOG		1103306	1					
ANR	1106010	Argument	DC_FETCH_LOG		1103306	0					
ANR	1106011	Identifier	DC_FETCH_LOG		1103306	0					
ANR	1106012	Argument	"""DC_FETCH_LOG"""		1103306	1					
ANR	1106013	PrimaryExpression	"""DC_FETCH_LOG"""		1103306	0					
ANR	1106014	Argument	( CommandHandler ) handle_fetch_log		1103306	2					
ANR	1106015	CastExpression	( CommandHandler ) handle_fetch_log		1103306	0					
ANR	1106016	CastTarget	CommandHandler		1103306	0					
ANR	1106017	Identifier	handle_fetch_log		1103306	1					
ANR	1106018	Argument	"""handle_fetch_log()"""		1103306	3					
ANR	1106019	PrimaryExpression	"""handle_fetch_log()"""		1103306	0					
ANR	1106020	Argument	0		1103306	4					
ANR	1106021	PrimaryExpression	0		1103306	0					
ANR	1106022	Argument	ADMINISTRATOR		1103306	5					
ANR	1106023	Identifier	ADMINISTRATOR		1103306	0					
ANR	1106024	ExpressionStatement	"daemonCore -> Register_Command ( DC_PURGE_LOG , ""DC_PURGE_LOG"" , ( CommandHandler ) handle_fetch_log_history_purge , ""handle_fetch_log_history_purge()"" , 0 , ADMINISTRATOR )"	2313:1:63119:63301	1103306	113	True				
ANR	1106025	CallExpression	"daemonCore -> Register_Command ( DC_PURGE_LOG , ""DC_PURGE_LOG"" , ( CommandHandler ) handle_fetch_log_history_purge , ""handle_fetch_log_history_purge()"" , 0 , ADMINISTRATOR )"		1103306	0					
ANR	1106026	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1106027	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1106028	Identifier	daemonCore		1103306	0					
ANR	1106029	Identifier	Register_Command		1103306	1					
ANR	1106030	ArgumentList	DC_PURGE_LOG		1103306	1					
ANR	1106031	Argument	DC_PURGE_LOG		1103306	0					
ANR	1106032	Identifier	DC_PURGE_LOG		1103306	0					
ANR	1106033	Argument	"""DC_PURGE_LOG"""		1103306	1					
ANR	1106034	PrimaryExpression	"""DC_PURGE_LOG"""		1103306	0					
ANR	1106035	Argument	( CommandHandler ) handle_fetch_log_history_purge		1103306	2					
ANR	1106036	CastExpression	( CommandHandler ) handle_fetch_log_history_purge		1103306	0					
ANR	1106037	CastTarget	CommandHandler		1103306	0					
ANR	1106038	Identifier	handle_fetch_log_history_purge		1103306	1					
ANR	1106039	Argument	"""handle_fetch_log_history_purge()"""		1103306	3					
ANR	1106040	PrimaryExpression	"""handle_fetch_log_history_purge()"""		1103306	0					
ANR	1106041	Argument	0		1103306	4					
ANR	1106042	PrimaryExpression	0		1103306	0					
ANR	1106043	Argument	ADMINISTRATOR		1103306	5					
ANR	1106044	Identifier	ADMINISTRATOR		1103306	0					
ANR	1106045	ExpressionStatement	"daemonCore -> Register_Command ( DC_INVALIDATE_KEY , ""DC_INVALIDATE_KEY"" , ( CommandHandler ) handle_invalidate_key , ""handle_invalidate_key()"" , 0 , ALLOW )"	2317:1:63305:63471	1103306	114	True				
ANR	1106046	CallExpression	"daemonCore -> Register_Command ( DC_INVALIDATE_KEY , ""DC_INVALIDATE_KEY"" , ( CommandHandler ) handle_invalidate_key , ""handle_invalidate_key()"" , 0 , ALLOW )"		1103306	0					
ANR	1106047	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1106048	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1106049	Identifier	daemonCore		1103306	0					
ANR	1106050	Identifier	Register_Command		1103306	1					
ANR	1106051	ArgumentList	DC_INVALIDATE_KEY		1103306	1					
ANR	1106052	Argument	DC_INVALIDATE_KEY		1103306	0					
ANR	1106053	Identifier	DC_INVALIDATE_KEY		1103306	0					
ANR	1106054	Argument	"""DC_INVALIDATE_KEY"""		1103306	1					
ANR	1106055	PrimaryExpression	"""DC_INVALIDATE_KEY"""		1103306	0					
ANR	1106056	Argument	( CommandHandler ) handle_invalidate_key		1103306	2					
ANR	1106057	CastExpression	( CommandHandler ) handle_invalidate_key		1103306	0					
ANR	1106058	CastTarget	CommandHandler		1103306	0					
ANR	1106059	Identifier	handle_invalidate_key		1103306	1					
ANR	1106060	Argument	"""handle_invalidate_key()"""		1103306	3					
ANR	1106061	PrimaryExpression	"""handle_invalidate_key()"""		1103306	0					
ANR	1106062	Argument	0		1103306	4					
ANR	1106063	PrimaryExpression	0		1103306	0					
ANR	1106064	Argument	ALLOW		1103306	5					
ANR	1106065	Identifier	ALLOW		1103306	0					
ANR	1106066	ExpressionStatement	"daemonCore -> Register_Command ( DC_TIME_OFFSET , ""DC_TIME_OFFSET"" , ( CommandHandler ) time_offset_receive_cedar_stub , ""time_offset_cedar_stub"" , 0 , DAEMON )"	2326:1:63651:63820	1103306	115	True				
ANR	1106067	CallExpression	"daemonCore -> Register_Command ( DC_TIME_OFFSET , ""DC_TIME_OFFSET"" , ( CommandHandler ) time_offset_receive_cedar_stub , ""time_offset_cedar_stub"" , 0 , DAEMON )"		1103306	0					
ANR	1106068	Callee	daemonCore -> Register_Command		1103306	0					
ANR	1106069	PtrMemberAccess	daemonCore -> Register_Command		1103306	0					
ANR	1106070	Identifier	daemonCore		1103306	0					
ANR	1106071	Identifier	Register_Command		1103306	1					
ANR	1106072	ArgumentList	DC_TIME_OFFSET		1103306	1					
ANR	1106073	Argument	DC_TIME_OFFSET		1103306	0					
ANR	1106074	Identifier	DC_TIME_OFFSET		1103306	0					
ANR	1106075	Argument	"""DC_TIME_OFFSET"""		1103306	1					
ANR	1106076	PrimaryExpression	"""DC_TIME_OFFSET"""		1103306	0					
ANR	1106077	Argument	( CommandHandler ) time_offset_receive_cedar_stub		1103306	2					
ANR	1106078	CastExpression	( CommandHandler ) time_offset_receive_cedar_stub		1103306	0					
ANR	1106079	CastTarget	CommandHandler		1103306	0					
ANR	1106080	Identifier	time_offset_receive_cedar_stub		1103306	1					
ANR	1106081	Argument	"""time_offset_cedar_stub"""		1103306	3					
ANR	1106082	PrimaryExpression	"""time_offset_cedar_stub"""		1103306	0					
ANR	1106083	Argument	0		1103306	4					
ANR	1106084	PrimaryExpression	0		1103306	0					
ANR	1106085	Argument	DAEMON		1103306	5					
ANR	1106086	Identifier	DAEMON		1103306	0					
ANR	1106087	ExpressionStatement	daemonCore -> reconfig ( )	2333:1:63981:64003	1103306	116	True				
ANR	1106088	CallExpression	daemonCore -> reconfig ( )		1103306	0					
ANR	1106089	Callee	daemonCore -> reconfig		1103306	0					
ANR	1106090	PtrMemberAccess	daemonCore -> reconfig		1103306	0					
ANR	1106091	Identifier	daemonCore		1103306	0					
ANR	1106092	Identifier	reconfig		1103306	1					
ANR	1106093	ArgumentList			1103306	1					
ANR	1106094	IdentifierDeclStatement	const char * envName = EnvGetName ( ENV_PARENT_ID ) ;	2337:1:64057:64107	1103306	117	True				
ANR	1106095	IdentifierDecl	* envName = EnvGetName ( ENV_PARENT_ID )		1103306	0					
ANR	1106096	IdentifierDeclType	const char *		1103306	0					
ANR	1106097	Identifier	envName		1103306	1					
ANR	1106098	AssignmentExpression	* envName = EnvGetName ( ENV_PARENT_ID )		1103306	2		=			
ANR	1106099	Identifier	envName		1103306	0					
ANR	1106100	CallExpression	EnvGetName ( ENV_PARENT_ID )		1103306	1					
ANR	1106101	Callee	EnvGetName		1103306	0					
ANR	1106102	Identifier	EnvGetName		1103306	0					
ANR	1106103	ArgumentList	ENV_PARENT_ID		1103306	1					
ANR	1106104	Argument	ENV_PARENT_ID		1103306	0					
ANR	1106105	Identifier	ENV_PARENT_ID		1103306	0					
ANR	1106106	IdentifierDeclStatement	MyString parent_id ;	2338:1:64110:64128	1103306	118	True				
ANR	1106107	IdentifierDecl	parent_id		1103306	0					
ANR	1106108	IdentifierDeclType	MyString		1103306	0					
ANR	1106109	Identifier	parent_id		1103306	1					
ANR	1106110	ExpressionStatement	"GetEnv ( envName , parent_id )"	2340:1:64132:64160	1103306	119	True				
ANR	1106111	CallExpression	"GetEnv ( envName , parent_id )"		1103306	0					
ANR	1106112	Callee	GetEnv		1103306	0					
ANR	1106113	Identifier	GetEnv		1103306	0					
ANR	1106114	ArgumentList	envName		1103306	1					
ANR	1106115	Argument	envName		1103306	0					
ANR	1106116	Identifier	envName		1103306	0					
ANR	1106117	Argument	parent_id		1103306	1					
ANR	1106118	Identifier	parent_id		1103306	0					
ANR	1106119	ExpressionStatement	daemonCore -> sec_man -> set_parent_unique_id ( parent_id . Value ( ) )	2345:1:64305:64365	1103306	120	True				
ANR	1106120	CallExpression	daemonCore -> sec_man -> set_parent_unique_id ( parent_id . Value ( ) )		1103306	0					
ANR	1106121	Callee	daemonCore -> sec_man -> set_parent_unique_id		1103306	0					
ANR	1106122	PtrMemberAccess	daemonCore -> sec_man -> set_parent_unique_id		1103306	0					
ANR	1106123	PtrMemberAccess	daemonCore -> sec_man		1103306	0					
ANR	1106124	Identifier	daemonCore		1103306	0					
ANR	1106125	Identifier	sec_man		1103306	1					
ANR	1106126	Identifier	set_parent_unique_id		1103306	1					
ANR	1106127	ArgumentList	parent_id . Value ( )		1103306	1					
ANR	1106128	Argument	parent_id . Value ( )		1103306	0					
ANR	1106129	CallExpression	parent_id . Value ( )		1103306	0					
ANR	1106130	Callee	parent_id . Value		1103306	0					
ANR	1106131	MemberAccess	parent_id . Value		1103306	0					
ANR	1106132	Identifier	parent_id		1103306	0					
ANR	1106133	Identifier	Value		1103306	1					
ANR	1106134	ArgumentList			1103306	1					
ANR	1106135	ExpressionStatement	"SetEnv ( envName , daemonCore -> sec_man -> my_unique_id ( ) )"	2349:1:64465:64519	1103306	121	True				
ANR	1106136	CallExpression	"SetEnv ( envName , daemonCore -> sec_man -> my_unique_id ( ) )"		1103306	0					
ANR	1106137	Callee	SetEnv		1103306	0					
ANR	1106138	Identifier	SetEnv		1103306	0					
ANR	1106139	ArgumentList	envName		1103306	1					
ANR	1106140	Argument	envName		1103306	0					
ANR	1106141	Identifier	envName		1103306	0					
ANR	1106142	Argument	daemonCore -> sec_man -> my_unique_id ( )		1103306	1					
ANR	1106143	CallExpression	daemonCore -> sec_man -> my_unique_id ( )		1103306	0					
ANR	1106144	Callee	daemonCore -> sec_man -> my_unique_id		1103306	0					
ANR	1106145	PtrMemberAccess	daemonCore -> sec_man -> my_unique_id		1103306	0					
ANR	1106146	PtrMemberAccess	daemonCore -> sec_man		1103306	0					
ANR	1106147	Identifier	daemonCore		1103306	0					
ANR	1106148	Identifier	sec_man		1103306	1					
ANR	1106149	Identifier	my_unique_id		1103306	1					
ANR	1106150	ArgumentList			1103306	1					
ANR	1106151	IdentifierDeclStatement	"bool use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false ) ;"	2356:1:64720:64782	1103306	122	True				
ANR	1106152	IdentifierDecl	"use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		1103306	0					
ANR	1106153	IdentifierDeclType	bool		1103306	0					
ANR	1106154	Identifier	use_sql_log		1103306	1					
ANR	1106155	AssignmentExpression	"use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		1103306	2		=			
ANR	1106156	Identifier	use_sql_log		1103306	0					
ANR	1106157	CallExpression	"param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		1103306	1					
ANR	1106158	Callee	param_boolean		1103306	0					
ANR	1106159	Identifier	param_boolean		1103306	0					
ANR	1106160	ArgumentList	"""QUILL_USE_SQL_LOG"""		1103306	1					
ANR	1106161	Argument	"""QUILL_USE_SQL_LOG"""		1103306	0					
ANR	1106162	PrimaryExpression	"""QUILL_USE_SQL_LOG"""		1103306	0					
ANR	1106163	Argument	false		1103306	1					
ANR	1106164	Identifier	false		1103306	0					
ANR	1106165	ExpressionStatement	FILEObj = FILESQL :: createInstance ( use_sql_log )	2358:1:64786:64832	1103306	123	True				
ANR	1106166	AssignmentExpression	FILEObj = FILESQL :: createInstance ( use_sql_log )		1103306	0		=			
ANR	1106167	Identifier	FILEObj		1103306	0					
ANR	1106168	CallExpression	FILESQL :: createInstance ( use_sql_log )		1103306	1					
ANR	1106169	Callee	FILESQL :: createInstance		1103306	0					
ANR	1106170	Identifier	FILESQL :: createInstance		1103306	0					
ANR	1106171	ArgumentList	use_sql_log		1103306	1					
ANR	1106172	Argument	use_sql_log		1103306	0					
ANR	1106173	Identifier	use_sql_log		1103306	0					
ANR	1106174	ExpressionStatement	XMLObj = FILEXML :: createInstanceXML ( )	2360:4:64871:64908	1103306	124	True				
ANR	1106175	AssignmentExpression	XMLObj = FILEXML :: createInstanceXML ( )		1103306	0		=			
ANR	1106176	Identifier	XMLObj		1103306	0					
ANR	1106177	CallExpression	FILEXML :: createInstanceXML ( )		1103306	1					
ANR	1106178	Callee	FILEXML :: createInstanceXML		1103306	0					
ANR	1106179	Identifier	FILEXML :: createInstanceXML		1103306	0					
ANR	1106180	ArgumentList			1103306	1					
ANR	1106181	ExpressionStatement	"dc_main_init ( argc , argv )"	2363:1:64946:64972	1103306	125	True				
ANR	1106182	CallExpression	"dc_main_init ( argc , argv )"		1103306	0					
ANR	1106183	Callee	dc_main_init		1103306	0					
ANR	1106184	Identifier	dc_main_init		1103306	0					
ANR	1106185	ArgumentList	argc		1103306	1					
ANR	1106186	Argument	argc		1103306	0					
ANR	1106187	Identifier	argc		1103306	0					
ANR	1106188	Argument	argv		1103306	1					
ANR	1106189	Identifier	argv		1103306	0					
ANR	1106190	ExpressionStatement	daemonCore -> Driver ( )	2366:1:65051:65071	1103306	126	True				
ANR	1106191	CallExpression	daemonCore -> Driver ( )		1103306	0					
ANR	1106192	Callee	daemonCore -> Driver		1103306	0					
ANR	1106193	PtrMemberAccess	daemonCore -> Driver		1103306	0					
ANR	1106194	Identifier	daemonCore		1103306	0					
ANR	1106195	Identifier	Driver		1103306	1					
ANR	1106196	ArgumentList			1103306	1					
ANR	1106197	ExpressionStatement	"EXCEPT ( ""returned from Driver()"" )"	2369:1:65101:65133	1103306	127	True				
ANR	1106198	CallExpression	"EXCEPT ( ""returned from Driver()"" )"		1103306	0					
ANR	1106199	Callee	EXCEPT		1103306	0					
ANR	1106200	Identifier	EXCEPT		1103306	0					
ANR	1106201	ArgumentList	"""returned from Driver()"""		1103306	1					
ANR	1106202	Argument	"""returned from Driver()"""		1103306	0					
ANR	1106203	PrimaryExpression	"""returned from Driver()"""		1103306	0					
ANR	1106204	ReturnStatement	return FALSE ;	2370:1:65136:65148	1103306	128	True				
ANR	1106205	Identifier	FALSE		1103306	0					
ANR	1106206	ReturnType	int		1103306	1					
ANR	1106207	Identifier	dc_main		1103306	2					
ANR	1106208	ParameterList	"int argc , char * * argv"		1103306	3					
ANR	1106209	Parameter	int argc	1534:13:38047:38054	1103306	0	True				
ANR	1106210	ParameterType	int		1103306	0					
ANR	1106211	Identifier	argc		1103306	1					
ANR	1106212	Parameter	char * * argv	1534:23:38057:38067	1103306	1	True				
ANR	1106213	ParameterType	char * *		1103306	0					
ANR	1106214	Identifier	argv		1103306	1					
ANR	1106215	CFGEntryNode	ENTRY		1103306		True				
ANR	1106216	CFGExitNode	EXIT		1103306		True				
ANR	1106217	Symbol	check_session_cache		1103306						
ANR	1106218	Symbol	unix_sigusr1		1103306						
ANR	1106219	Symbol	DC_SERVICEWAITPIDS		1103306						
ANR	1106220	Symbol	CONFIG_VAL		1103306						
ANR	1106221	Symbol	ptmp1		1103306						
ANR	1106222	Symbol	unix_sigusr2		1103306						
ANR	1106223	Symbol	dc_main_init		1103306						
ANR	1106224	Symbol	get_mySubSystem ( ) -> getLocalName		1103306						
ANR	1106225	Symbol	FILEObj		1103306						
ANR	1106226	Symbol	DC_OFF_PEACEFUL		1103306						
ANR	1106227	Symbol	logAppend		1103306						
ANR	1106228	Symbol	dc_touch_lock_files		1103306						
ANR	1106229	Symbol	is_kbdd		1103306						
ANR	1106230	Symbol	SIGTRAP		1103306						
ANR	1106231	Symbol	DC_TIME_OFFSET		1103306						
ANR	1106232	Symbol	handle_config_val		1103306						
ANR	1106233	Symbol	* daemonCore -> async_pipe		1103306						
ANR	1106234	Symbol	SIGUSR2		1103306						
ANR	1106235	Symbol	SIGUSR1		1103306						
ANR	1106236	Symbol	handle_cookie_refresh		1103306						
ANR	1106237	Symbol	tm -> tm_mon		1103306						
ANR	1106238	Symbol	myDistro -> GetUc		1103306						
ANR	1106239	Symbol	pidFile		1103306						
ANR	1106240	Symbol	gcb_recovery_failed_callback		1103306						
ANR	1106241	Symbol	* myDistro		1103306						
ANR	1106242	Symbol	* daemonCore		1103306						
ANR	1106243	Symbol	envName		1103306						
ANR	1106244	Symbol	dc_main_config		1103306						
ANR	1106245	Symbol	get_mySubSystem ( ) -> getString		1103306						
ANR	1106246	Symbol	handle_dc_sighup		1103306						
ANR	1106247	Symbol	param_integer		1103306						
ANR	1106248	Symbol	* tm		1103306						
ANR	1106249	Symbol	get_mySubSystem		1103306						
ANR	1106250	Symbol	condor_basename		1103306						
ANR	1106251	Symbol	logDir		1103306						
ANR	1106252	Symbol	* * ptr		1103306						
ANR	1106253	Symbol	getExecPath		1103306						
ANR	1106254	Symbol	handle_nop		1103306						
ANR	1106255	Symbol	fcntl		1103306						
ANR	1106256	Symbol	daemonCore -> getpid		1103306						
ANR	1106257	Symbol	condor_main_argv		1103306						
ANR	1106258	Symbol	debug_wait_param		1103306						
ANR	1106259	Symbol	global_config_source		1103306						
ANR	1106260	Symbol	handle_invalidate_key		1103306						
ANR	1106261	Symbol	daemonCore		1103306						
ANR	1106262	Symbol	daemonCore -> monitor_data		1103306						
ANR	1106263	Symbol	time_offset_receive_cedar_stub		1103306						
ANR	1106264	Symbol	global_config_source . Value		1103306						
ANR	1106265	Symbol	getenv		1103306						
ANR	1106266	Symbol	dc_main_pre_dc_init		1103306						
ANR	1106267	Symbol	get_mySubSystem ( ) -> isType		1103306						
ANR	1106268	Symbol	handle_set_peaceful_shutdown		1103306						
ANR	1106269	Symbol	& DaemonCore :: HandleDC_SIGCHLD		1103306						
ANR	1106270	Symbol	i		1103306						
ANR	1106271	Symbol	command_port		1103306						
ANR	1106272	Symbol	ADMINISTRATOR		1103306						
ANR	1106273	Symbol	unix_sighup		1103306						
ANR	1106274	Symbol	ENV_CONFIG		1103306						
ANR	1106275	Symbol	Foreground		1103306						
ANR	1106276	Symbol	tm		1103306						
ANR	1106277	Symbol	handle_fetch_log		1103306						
ANR	1106278	Symbol	condor_main_argc		1103306						
ANR	1106279	Symbol	handle_reconfig		1103306						
ANR	1106280	Symbol	localtime		1103306						
ANR	1106281	Symbol	_condor_myServiceName		1103306						
ANR	1106282	Symbol	check_parent		1103306						
ANR	1106283	Symbol	DC_FETCH_LOG		1103306						
ANR	1106284	Symbol	* argv		1103306						
ANR	1106285	Symbol	source		1103306						
ANR	1106286	Symbol	F_SETFL		1103306						
ANR	1106287	Symbol	get_mySubSystem ( ) -> getType		1103306						
ANR	1106288	Symbol	strlen		1103306						
ANR	1106289	Symbol	DC_OFF_FAST		1103306						
ANR	1106290	Symbol	ptmp		1103306						
ANR	1106291	Symbol	dc_main_shutdown_fast		1103306						
ANR	1106292	Symbol	myDistro		1103306						
ANR	1106293	Symbol	myName		1103306						
ANR	1106294	Symbol	* * argv		1103306						
ANR	1106295	Symbol	SIGPIPE		1103306						
ANR	1106296	Symbol	unix_sigchld		1103306						
ANR	1106297	Symbol	ALLOW		1103306						
ANR	1106298	Symbol	doCoreInit		1103306						
ANR	1106299	Symbol	D_PRIV		1103306						
ANR	1106300	Symbol	get_param_functions		1103306						
ANR	1106301	Symbol	param_boolean		1103306						
ANR	1106302	Symbol	DC_RECONFIG		1103306						
ANR	1106303	Symbol	& fullset		1103306						
ANR	1106304	Symbol	stderr		1103306						
ANR	1106305	Symbol	strerror		1103306						
ANR	1106306	Symbol	FILESQL :: createInstance		1103306						
ANR	1106307	Symbol	getuid		1103306						
ANR	1106308	Symbol	unix_sigterm		1103306						
ANR	1106309	Symbol	* * daemonCore		1103306						
ANR	1106310	Symbol	debug_wait_param . Value		1103306						
ANR	1106311	Symbol	dprintf_last_modification		1103306						
ANR	1106312	Symbol	DC_OFF_GRACEFUL		1103306						
ANR	1106313	Symbol	DC_CONFIG_PERSIST		1103306						
ANR	1106314	Symbol	get_mySubSystem ( ) -> getTypeName		1103306						
ANR	1106315	Symbol	handle_dc_sigquit		1103306						
ANR	1106316	Symbol	argv		1103306						
ANR	1106317	Symbol	EnvGetName		1103306						
ANR	1106318	Symbol	ENV_PARENT_ID		1103306						
ANR	1106319	Symbol	handle_config		1103306						
ANR	1106320	Symbol	argc		1103306						
ANR	1106321	Symbol	daemonCore -> sec_man -> my_unique_id		1103306						
ANR	1106322	Symbol	false		1103306						
ANR	1106323	Symbol	D_ALWAYS		1103306						
ANR	1106324	Symbol	handle_dc_sigterm		1103306						
ANR	1106325	Symbol	env		1103306						
ANR	1106326	Symbol	ptr		1103306						
ANR	1106327	Symbol	* condor_main_argv		1103306						
ANR	1106328	Symbol	SIGILL		1103306						
ANR	1106329	Symbol	daemon_stop_time		1103306						
ANR	1106330	Symbol	fullset		1103306						
ANR	1106331	Symbol	FALSE		1103306						
ANR	1106332	Symbol	strdup		1103306						
ANR	1106333	Symbol	time		1103306						
ANR	1106334	Symbol	SUBSYSTEM_TYPE_SHADOW		1103306						
ANR	1106335	Symbol	DC_NOP		1103306						
ANR	1106336	Symbol	dc_touch_log_file		1103306						
ANR	1106337	Symbol	XMLObj		1103306						
ANR	1106338	Symbol	SUBSYSTEM_TYPE_COLLECTOR		1103306						
ANR	1106339	Symbol	doAuthInit		1103306						
ANR	1106340	Symbol	env_name		1103306						
ANR	1106341	Symbol	CondorVersion		1103306						
ANR	1106342	Symbol	wantsKill		1103306						
ANR	1106343	Symbol	EnvInit		1103306						
ANR	1106344	Symbol	SUBSYSTEM_TYPE_NEGOTIATOR		1103306						
ANR	1106345	Symbol	local_config_sources . isEmpty		1103306						
ANR	1106346	Symbol	local_config_sources . next		1103306						
ANR	1106347	Symbol	SIG_IGN		1103306						
ANR	1106348	Symbol	SUBSYSTEM_TYPE_MASTER		1103306						
ANR	1106349	Symbol	TimerHandler_dc_sigterm		1103306						
ANR	1106350	Symbol	DAEMON		1103306						
ANR	1106351	Symbol	myDistro -> GetLen		1103306						
ANR	1106352	Symbol	O_NONBLOCK		1103306						
ANR	1106353	Symbol	daemon_sock_name		1103306						
ANR	1106354	Symbol	myFullName		1103306						
ANR	1106355	Symbol	WRITE		1103306						
ANR	1106356	Symbol	CondorPlatform		1103306						
ANR	1106357	Symbol	tm -> tm_mday		1103306						
ANR	1106358	Symbol	SIGHUP		1103306						
ANR	1106359	Symbol	unix_sigquit		1103306						
ANR	1106360	Symbol	atoi		1103306						
ANR	1106361	Symbol	malloc		1103306						
ANR	1106362	Symbol	Termlog		1103306						
ANR	1106363	Symbol	SIG_SETMASK		1103306						
ANR	1106364	Symbol	SIGABRT		1103306						
ANR	1106365	Symbol	handle_off_graceful		1103306						
ANR	1106366	Symbol	runfor		1103306						
ANR	1106367	Symbol	tm -> tm_min		1103306						
ANR	1106368	Symbol	tm -> tm_sec		1103306						
ANR	1106369	Symbol	tm -> tm_hour		1103306						
ANR	1106370	Symbol	DC_INVALIDATE_KEY		1103306						
ANR	1106371	Symbol	dc_main_pre_command_sock_init		1103306						
ANR	1106372	Symbol	SUBSYSTEM_TYPE_STARTD		1103306						
ANR	1106373	Symbol	cookie_refresh		1103306						
ANR	1106374	Symbol	* ptr		1103306						
ANR	1106375	Symbol	dcargs		1103306						
ANR	1106376	Symbol	pipe		1103306						
ANR	1106377	Symbol	daemonCore -> sec_man		1103306						
ANR	1106378	Symbol	wantsQuiet		1103306						
ANR	1106379	Symbol	strcmp		1103306						
ANR	1106380	Symbol	FILEXML :: createInstanceXML		1103306						
ANR	1106381	Symbol	& DaemonCore :: HandleDC_SERVICEWAITPIDS		1103306						
ANR	1106382	Symbol	handle_off_peaceful		1103306						
ANR	1106383	Symbol	SIGFPE		1103306						
ANR	1106384	Symbol	NULL		1103306						
ANR	1106385	Symbol	TRUE		1103306						
ANR	1106386	Symbol	done		1103306						
ANR	1106387	Symbol	local_config_sources		1103306						
ANR	1106388	Symbol	debug_wait		1103306						
ANR	1106389	Symbol	READ		1103306						
ANR	1106390	Symbol	DynamicDirs		1103306						
ANR	1106391	Symbol	SIGSEGV		1103306						
ANR	1106392	Symbol	parent_id		1103306						
ANR	1106393	Symbol	true		1103306						
ANR	1106394	Symbol	get_mySubSystem ( ) -> getClassName		1103306						
ANR	1106395	Symbol	* daemonCore -> sec_man		1103306						
ANR	1106396	Symbol	SIGQUIT		1103306						
ANR	1106397	Symbol	SIGBUS		1103306						
ANR	1106398	Symbol	DC_SET_PEACEFUL_SHUTDOWN		1103306						
ANR	1106399	Symbol	get_mySubSystem ( ) -> isValid		1103306						
ANR	1106400	Symbol	SUBSYSTEM_TYPE_SCHEDD		1103306						
ANR	1106401	Symbol	parent_id . Value		1103306						
ANR	1106402	Symbol	SIGTERM		1103306						
ANR	1106403	Symbol	dc_main_shutdown_graceful		1103306						
ANR	1106404	Symbol	DC_PURGE_LOG		1103306						
ANR	1106405	Symbol	get_mySubSystem ( ) -> getName		1103306						
ANR	1106406	Symbol	* get_mySubSystem		1103306						
ANR	1106407	Symbol	use_sql_log		1103306						
ANR	1106408	Symbol	handle_off_fast		1103306						
ANR	1106409	Symbol	DC_CONFIG_RUNTIME		1103306						
ANR	1106410	Symbol	handle_fetch_log_history_purge		1103306						
ANR	1106411	Symbol	SIGCHLD		1103306						
ANR	1106412	Symbol	daemonCore -> async_pipe		1103306						
ANR	1106413	Symbol	* i		1103306						
ANR	1106414	Symbol	& log_last_mod_time		1103306						
ANR	1106415	Symbol	DC_CONFIG_VAL		1103306						
ANR	1106416	Symbol	DC_RECONFIG_FULL		1103306						
ANR	1106417	Symbol	log_last_mod_time		1103306						
ANR	1106418	Function	dc_args_is_background	2377:0:65402:67205							
ANR	1106419	FunctionDef	"dc_args_is_background (int argc , char * * argv)"		1106418	0					
ANR	1106420	CompoundStatement		2378:0:65452:67205	1106418	0					
ANR	1106421	IdentifierDeclStatement	bool Foreground = false ;	2379:4:65458:65481	1106418	0	True				
ANR	1106422	IdentifierDecl	Foreground = false		1106418	0					
ANR	1106423	IdentifierDeclType	bool		1106418	0					
ANR	1106424	Identifier	Foreground		1106418	1					
ANR	1106425	AssignmentExpression	Foreground = false		1106418	2		=			
ANR	1106426	Identifier	false		1106418	0					
ANR	1106427	Identifier	false		1106418	1					
ANR	1106428	IdentifierDeclStatement	int i = 0 ;	2383:1:65642:65651	1106418	1	True				
ANR	1106429	IdentifierDecl	i = 0		1106418	0					
ANR	1106430	IdentifierDeclType	int		1106418	0					
ANR	1106431	Identifier	i		1106418	1					
ANR	1106432	AssignmentExpression	i = 0		1106418	2		=			
ANR	1106433	Identifier	i		1106418	0					
ANR	1106434	PrimaryExpression	0		1106418	1					
ANR	1106435	IdentifierDeclStatement	bool done = false ;	2384:1:65654:65671	1106418	2	True				
ANR	1106436	IdentifierDecl	done = false		1106418	0					
ANR	1106437	IdentifierDeclType	bool		1106418	0					
ANR	1106438	Identifier	done		1106418	1					
ANR	1106439	AssignmentExpression	done = false		1106418	2		=			
ANR	1106440	Identifier	false		1106418	0					
ANR	1106441	Identifier	false		1106418	1					
ANR	1106442	ForStatement	"for ( char * * ptr = argv + 1 ; * ptr && ( i < argc - 1 ) ; ptr ++ , i ++ )"		1106418	3					
ANR	1106443	ForInit	char * * ptr = argv + 1 ;	2385:5:65678:65700	1106418	0	True				
ANR	1106444	IdentifierDeclStatement	char * * ptr = argv + 1 ;		1106418	0					
ANR	1106445	IdentifierDecl	* * ptr = argv + 1		1106418	0					
ANR	1106446	IdentifierDeclType	char * *		1106418	0					
ANR	1106447	Identifier	ptr		1106418	1					
ANR	1106448	AssignmentExpression	* * ptr = argv + 1		1106418	2		=			
ANR	1106449	Identifier	ptr		1106418	0					
ANR	1106450	AdditiveExpression	argv + 1		1106418	1		+			
ANR	1106451	Identifier	argv		1106418	0					
ANR	1106452	PrimaryExpression	1		1106418	1					
ANR	1106453	Condition	* ptr && ( i < argc - 1 )	2385:29:65702:65723	1106418	1	True				
ANR	1106454	AndExpression	* ptr && ( i < argc - 1 )		1106418	0		&&			
ANR	1106455	UnaryOperationExpression	* ptr		1106418	0					
ANR	1106456	UnaryOperator	*		1106418	0					
ANR	1106457	Identifier	ptr		1106418	1					
ANR	1106458	RelationalExpression	i < argc - 1		1106418	1		<			
ANR	1106459	Identifier	i		1106418	0					
ANR	1106460	AdditiveExpression	argc - 1		1106418	1		-			
ANR	1106461	Identifier	argc		1106418	0					
ANR	1106462	PrimaryExpression	1		1106418	1					
ANR	1106463	Expression	"ptr ++ , i ++"	2385:53:65726:65734	1106418	2	True				
ANR	1106464	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106465	Identifier	ptr		1106418	0					
ANR	1106466	IncDec	++		1106418	1					
ANR	1106467	PostIncDecOperationExpression	i ++		1106418	1					
ANR	1106468	Identifier	i		1106418	0					
ANR	1106469	IncDec	++		1106418	1					
ANR	1106470	CompoundStatement		9:1:285:285	1106418	3					
ANR	1106471	IfStatement	if ( ptr [ 0 ] [ 0 ] != '-' )		1106418	0					
ANR	1106472	Condition	ptr [ 0 ] [ 0 ] != '-'	2387:6:65746:65761	1106418	0	True				
ANR	1106473	EqualityExpression	ptr [ 0 ] [ 0 ] != '-'		1106418	0		!=			
ANR	1106474	ArrayIndexing	ptr [ 0 ] [ 0 ]		1106418	0					
ANR	1106475	ArrayIndexing	ptr [ 0 ]		1106418	0					
ANR	1106476	Identifier	ptr		1106418	0					
ANR	1106477	PrimaryExpression	0		1106418	1					
ANR	1106478	PrimaryExpression	0		1106418	1					
ANR	1106479	PrimaryExpression	'-'		1106418	1					
ANR	1106480	CompoundStatement		10:25:312:312	1106418	1					
ANR	1106481	BreakStatement	break ;	2388:3:65770:65775	1106418	0	True				
ANR	1106482	SwitchStatement	switch ( ptr [ 0 ] [ 1 ] )		1106418	1					
ANR	1106483	Condition	ptr [ 0 ] [ 1 ]	2390:10:65791:65799	1106418	0	True				
ANR	1106484	ArrayIndexing	ptr [ 0 ] [ 1 ]		1106418	0					
ANR	1106485	ArrayIndexing	ptr [ 0 ]		1106418	0					
ANR	1106486	Identifier	ptr		1106418	0					
ANR	1106487	PrimaryExpression	0		1106418	1					
ANR	1106488	PrimaryExpression	1		1106418	1					
ANR	1106489	CompoundStatement		13:22:350:350	1106418	1					
ANR	1106490	Label	case 'a' :	2391:2:65807:65815	1106418	0	True				
ANR	1106491	ExpressionStatement	ptr ++	2392:3:65853:65858	1106418	1	True				
ANR	1106492	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106493	Identifier	ptr		1106418	0					
ANR	1106494	IncDec	++		1106418	1					
ANR	1106495	BreakStatement	break ;	2393:3:65863:65868	1106418	2	True				
ANR	1106496	Label	case 'b' :	2394:2:65872:65880	1106418	3	True				
ANR	1106497	ExpressionStatement	Foreground = false	2395:3:65917:65935	1106418	4	True				
ANR	1106498	AssignmentExpression	Foreground = false		1106418	0		=			
ANR	1106499	Identifier	Foreground		1106418	0					
ANR	1106500	Identifier	false		1106418	1					
ANR	1106501	BreakStatement	break ;	2396:3:65940:65945	1106418	5	True				
ANR	1106502	Label	case 'c' :	2397:2:65949:65957	1106418	6	True				
ANR	1106503	ExpressionStatement	ptr ++	2398:3:66008:66013	1106418	7	True				
ANR	1106504	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106505	Identifier	ptr		1106418	0					
ANR	1106506	IncDec	++		1106418	1					
ANR	1106507	BreakStatement	break ;	2399:3:66018:66023	1106418	8	True				
ANR	1106508	Label	case 'd' :	2400:2:66027:66035	1106418	9	True				
ANR	1106509	BreakStatement	break ;	2401:3:66070:66075	1106418	10	True				
ANR	1106510	Label	case 't' :	2402:2:66079:66087	1106418	11	True				
ANR	1106511	Label	case 'f' :	2403:2:66132:66140	1106418	12	True				
ANR	1106512	ExpressionStatement	Foreground = true	2404:3:66167:66184	1106418	13	True				
ANR	1106513	AssignmentExpression	Foreground = true		1106418	0		=			
ANR	1106514	Identifier	Foreground		1106418	0					
ANR	1106515	Identifier	true		1106418	1					
ANR	1106516	BreakStatement	break ;	2405:3:66189:66194	1106418	14	True				
ANR	1106517	Label	case 'h' :	2406:2:66198:66206	1106418	15	True				
ANR	1106518	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't' )		1106418	16					
ANR	1106519	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'	2407:8:66226:66254	1106418	0	True				
ANR	1106520	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'		1106418	0		&&			
ANR	1106521	ArrayIndexing	ptr [ 0 ] [ 2 ]		1106418	0					
ANR	1106522	ArrayIndexing	ptr [ 0 ]		1106418	0					
ANR	1106523	Identifier	ptr		1106418	0					
ANR	1106524	PrimaryExpression	0		1106418	1					
ANR	1106525	PrimaryExpression	2		1106418	1					
ANR	1106526	EqualityExpression	ptr [ 0 ] [ 2 ] == 't'		1106418	1		==			
ANR	1106527	ArrayIndexing	ptr [ 0 ] [ 2 ]		1106418	0					
ANR	1106528	ArrayIndexing	ptr [ 0 ]		1106418	0					
ANR	1106529	Identifier	ptr		1106418	0					
ANR	1106530	PrimaryExpression	0		1106418	1					
ANR	1106531	PrimaryExpression	2		1106418	1					
ANR	1106532	PrimaryExpression	't'		1106418	1					
ANR	1106533	CompoundStatement		30:40:805:805	1106418	1					
ANR	1106534	ExpressionStatement	ptr ++	2409:4:66293:66298	1106418	0	True				
ANR	1106535	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106536	Identifier	ptr		1106418	0					
ANR	1106537	IncDec	++		1106418	1					
ANR	1106538	ElseStatement	else		1106418	0					
ANR	1106539	CompoundStatement		33:10:857:857	1106418	0					
ANR	1106540	ExpressionStatement	done = true	2411:4:66316:66327	1106418	0	True				
ANR	1106541	AssignmentExpression	done = true		1106418	0		=			
ANR	1106542	Identifier	done		1106418	0					
ANR	1106543	Identifier	true		1106418	1					
ANR	1106544	BreakStatement	break ;	2413:12:66346:66351	1106418	17	True				
ANR	1106545	Label	case 'k' :	2415:2:66369:66377	1106418	18	True				
ANR	1106546	ExpressionStatement	ptr ++	2416:3:66421:66426	1106418	19	True				
ANR	1106547	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106548	Identifier	ptr		1106418	0					
ANR	1106549	IncDec	++		1106418	1					
ANR	1106550	BreakStatement	break ;	2417:3:66431:66436	1106418	20	True				
ANR	1106551	Label	case 'l' :	2419:2:66447:66455	1106418	21	True				
ANR	1106552	ExpressionStatement	ptr ++	2420:4:66487:66492	1106418	22	True				
ANR	1106553	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106554	Identifier	ptr		1106418	0					
ANR	1106555	IncDec	++		1106418	1					
ANR	1106556	BreakStatement	break ;	2421:4:66498:66503	1106418	23	True				
ANR	1106557	Label	case 'p' :	2422:2:66507:66515	1106418	24	True				
ANR	1106558	ExpressionStatement	ptr ++	2423:3:66564:66569	1106418	25	True				
ANR	1106559	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106560	Identifier	ptr		1106418	0					
ANR	1106561	IncDec	++		1106418	1					
ANR	1106562	BreakStatement	break ;	2424:3:66620:66625	1106418	26	True				
ANR	1106563	Label	case 'q' :	2425:2:66677:66685	1106418	27	True				
ANR	1106564	BreakStatement	break ;	2426:3:66707:66712	1106418	28	True				
ANR	1106565	Label	case 'r' :	2427:2:66716:66724	1106418	29	True				
ANR	1106566	ExpressionStatement	ptr ++	2428:3:66777:66782	1106418	30	True				
ANR	1106567	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106568	Identifier	ptr		1106418	0					
ANR	1106569	IncDec	++		1106418	1					
ANR	1106570	BreakStatement	break ;	2429:3:66787:66792	1106418	31	True				
ANR	1106571	Label	case 's' :	2430:2:66796:66804	1106418	32	True				
ANR	1106572	IfStatement	"if ( 0 == strcmp ( ""-sock"" , * ptr ) )"		1106418	33					
ANR	1106573	Condition	"0 == strcmp ( ""-sock"" , * ptr )"	2432:6:66917:66941	1106418	0	True				
ANR	1106574	EqualityExpression	"0 == strcmp ( ""-sock"" , * ptr )"		1106418	0		==			
ANR	1106575	PrimaryExpression	0		1106418	0					
ANR	1106576	CallExpression	"strcmp ( ""-sock"" , * ptr )"		1106418	1					
ANR	1106577	Callee	strcmp		1106418	0					
ANR	1106578	Identifier	strcmp		1106418	0					
ANR	1106579	ArgumentList	"""-sock"""		1106418	1					
ANR	1106580	Argument	"""-sock"""		1106418	0					
ANR	1106581	PrimaryExpression	"""-sock"""		1106418	0					
ANR	1106582	Argument	* ptr		1106418	1					
ANR	1106583	UnaryOperationExpression	* ptr		1106418	0					
ANR	1106584	UnaryOperator	*		1106418	0					
ANR	1106585	Identifier	ptr		1106418	1					
ANR	1106586	CompoundStatement		55:33:1491:1491	1106418	1					
ANR	1106587	ExpressionStatement	ptr ++	2433:4:66950:66955	1106418	0	True				
ANR	1106588	PostIncDecOperationExpression	ptr ++		1106418	0					
ANR	1106589	Identifier	ptr		1106418	0					
ANR	1106590	IncDec	++		1106418	1					
ANR	1106591	ElseStatement	else		1106418	0					
ANR	1106592	CompoundStatement		57:10:1514:1514	1106418	0					
ANR	1106593	ExpressionStatement	done = true	2435:4:66973:66984	1106418	0	True				
ANR	1106594	AssignmentExpression	done = true		1106418	0		=			
ANR	1106595	Identifier	done		1106418	0					
ANR	1106596	Identifier	true		1106418	1					
ANR	1106597	BreakStatement	break ;	2437:3:66994:66999	1106418	34	True				
ANR	1106598	Label	case 'v' :	2438:2:67003:67011	1106418	35	True				
ANR	1106599	ExpressionStatement	Foreground = true	2439:3:67050:67067	1106418	36	True				
ANR	1106600	AssignmentExpression	Foreground = true		1106418	0		=			
ANR	1106601	Identifier	Foreground		1106418	0					
ANR	1106602	Identifier	true		1106418	1					
ANR	1106603	BreakStatement	break ;	2440:3:67072:67077	1106418	37	True				
ANR	1106604	Label	default :	2441:2:67081:67088	1106418	38	True				
ANR	1106605	Identifier	default		1106418	0					
ANR	1106606	ExpressionStatement	done = true	2442:3:67093:67104	1106418	39	True				
ANR	1106607	AssignmentExpression	done = true		1106418	0		=			
ANR	1106608	Identifier	done		1106418	0					
ANR	1106609	Identifier	true		1106418	1					
ANR	1106610	BreakStatement	break ;	2443:3:67109:67114	1106418	40	True				
ANR	1106611	IfStatement	if ( done )		1106418	2					
ANR	1106612	Condition	done	2445:6:67127:67130	1106418	0	True				
ANR	1106613	Identifier	done		1106418	0					
ANR	1106614	CompoundStatement		68:13:1681:1681	1106418	1					
ANR	1106615	BreakStatement	break ;	2446:3:67139:67144	1106418	0	True				
ANR	1106616	ReturnStatement	return ! Foreground ;	2450:4:67184:67203	1106418	4	True				
ANR	1106617	UnaryOperationExpression	! Foreground		1106418	0					
ANR	1106618	UnaryOperator	!		1106418	0					
ANR	1106619	Identifier	Foreground		1106418	1					
ANR	1106620	ReturnType	bool		1106418	1					
ANR	1106621	Identifier	dc_args_is_background		1106418	2					
ANR	1106622	ParameterList	"int argc , char * * argv"		1106418	3					
ANR	1106623	Parameter	int argc	2377:27:65429:65436	1106418	0	True				
ANR	1106624	ParameterType	int		1106418	0					
ANR	1106625	Identifier	argc		1106418	1					
ANR	1106626	Parameter	char * * argv	2377:37:65439:65449	1106418	1	True				
ANR	1106627	ParameterType	char * *		1106418	0					
ANR	1106628	Identifier	argv		1106418	1					
ANR	1106629	CFGEntryNode	ENTRY		1106418		True				
ANR	1106630	CFGExitNode	EXIT		1106418		True				
ANR	1106631	Symbol	argc		1106418						
ANR	1106632	Symbol	strcmp		1106418						
ANR	1106633	Symbol	* * ptr		1106418						
ANR	1106634	Symbol	false		1106418						
ANR	1106635	Symbol	* ptr		1106418						
ANR	1106636	Symbol	true		1106418						
ANR	1106637	Symbol	Foreground		1106418						
ANR	1106638	Symbol	i		1106418						
ANR	1106639	Symbol	argv		1106418						
ANR	1106640	Symbol	done		1106418						
ANR	1106641	Symbol	ptr		1106418						
