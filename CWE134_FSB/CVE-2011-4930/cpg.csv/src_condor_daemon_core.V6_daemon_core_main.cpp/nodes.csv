command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3077286	File	data/converged/CVE-2011-4930_htcondor/src_condor_daemon_core.V6_daemon_core_main.cpp								
ANR	3077287	DeclStmt									
ANR	3077288	Decl							extern DLL_IMPORT_MAGIC char	extern DLL_IMPORT_MAGIC char * *	environ
ANR	3077289	DeclStmt									
ANR	3077290	Decl							"void ( * ) ( int argc , char * argv [ ] )"	"void ( * ) ( int argc , char * argv [ ] )"	dc_main_init
ANR	3077291	DeclStmt									
ANR	3077292	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_config
ANR	3077293	DeclStmt									
ANR	3077294	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_shutdown_fast
ANR	3077295	DeclStmt									
ANR	3077296	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_shutdown_graceful
ANR	3077297	DeclStmt									
ANR	3077298	Decl							"void ( * ) ( int argc , char * argv [ ] )"	"void ( * ) ( int argc , char * argv [ ] )"	dc_main_pre_dc_init
ANR	3077299	DeclStmt									
ANR	3077300	Decl							void ( * ) ( )	void ( * ) ( )	dc_main_pre_command_sock_init
ANR	3077301	DeclStmt									
ANR	3077302	Decl							void	void ( )	dc_reconfig
ANR	3077303	DeclStmt									
ANR	3077304	Decl							void	void ( )	dc_config_auth
ANR	3077305	DeclStmt									
ANR	3077306	Decl							int	"int ( ReliSock * s , char * name )"	handle_fetch_log_history
ANR	3077307	DeclStmt									
ANR	3077308	Decl							int	"int ( ReliSock * s , char * name )"	handle_fetch_log_history_dir
ANR	3077309	DeclStmt									
ANR	3077310	Decl							int	int ( ReliSock * s )	handle_fetch_log_history_purge
ANR	3077311	DeclStmt									
ANR	3077312	Decl							int	int	Foreground
ANR	3077313	DeclStmt									
ANR	3077314	Decl							const char	const char *	myName
ANR	3077315	DeclStmt									
ANR	3077316	Decl							char	char *	_condor_myServiceName
ANR	3077317	DeclStmt									
ANR	3077318	Decl							char	char *	myFullName
ANR	3077319	DeclStmt									
ANR	3077320	Decl							DaemonCore	DaemonCore *	daemonCore
ANR	3077321	DeclStmt									
ANR	3077322	Decl							char	char *	logDir
ANR	3077323	DeclStmt									
ANR	3077324	Decl							char	char *	pidFile
ANR	3077325	DeclStmt									
ANR	3077326	Decl							char	char *	addrFile
ANR	3077327	DeclStmt									
ANR	3077328	Decl							char	char *	logAppend
ANR	3077329	DeclStmt									
ANR	3077330	Decl							char	char *	core_dir
ANR	3077331	DeclStmt									
ANR	3077332	Decl							int	int	condor_main_argc
ANR	3077333	DeclStmt									
ANR	3077334	Decl							char	char * *	condor_main_argv
ANR	3077335	DeclStmt									
ANR	3077336	Decl							time_t	time_t	daemon_stop_time
ANR	3077337	DeclStmt									
ANR	3077338	Decl							extern FILESQL	extern FILESQL *	FILEObj
ANR	3077339	DeclStmt									
ANR	3077340	Decl							extern FILEXML	extern FILEXML *	XMLObj
ANR	3077341	DeclStmt									
ANR	3077342	Decl							int	int	line_where_service_stopped
ANR	3077343	DeclStmt									
ANR	3077344	Decl							bool	bool	DynamicDirs
ANR	3077345	DeclStmt									
ANR	3077346	Decl							int	int	runfor
ANR	3077347	DeclStmt									
ANR	3077348	Decl							bool	bool	doAuthInit
ANR	3077349	DeclStmt									
ANR	3077350	Decl							bool	bool	doCoreInit
ANR	3077351	Function	check_parent	134:0:4292:4580							
ANR	3077352	FunctionDef	check_parent ()		3077351	0					
ANR	3077353	CompoundStatement		136:0:4313:4580	3077351	0					
ANR	3077354	IfStatement	if ( daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE )		3077351	0					
ANR	3077355	Condition	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE	137:6:4321:4378	3077351	0	True				
ANR	3077356	EqualityExpression	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) ) == FALSE		3077351	0		==			
ANR	3077357	CallExpression	daemonCore -> Is_Pid_Alive ( daemonCore -> getppid ( ) )		3077351	0					
ANR	3077358	Callee	daemonCore -> Is_Pid_Alive		3077351	0					
ANR	3077359	PtrMemberAccess	daemonCore -> Is_Pid_Alive		3077351	0					
ANR	3077360	Identifier	daemonCore		3077351	0					
ANR	3077361	Identifier	Is_Pid_Alive		3077351	1					
ANR	3077362	ArgumentList	daemonCore -> getppid ( )		3077351	1					
ANR	3077363	Argument	daemonCore -> getppid ( )		3077351	0					
ANR	3077364	CallExpression	daemonCore -> getppid ( )		3077351	0					
ANR	3077365	Callee	daemonCore -> getppid		3077351	0					
ANR	3077366	PtrMemberAccess	daemonCore -> getppid		3077351	0					
ANR	3077367	Identifier	daemonCore		3077351	0					
ANR	3077368	Identifier	getppid		3077351	1					
ANR	3077369	ArgumentList			3077351	1					
ANR	3077370	Identifier	FALSE		3077351	1					
ANR	3077371	CompoundStatement		2:67:68:68	3077351	1					
ANR	3077372	ExpressionStatement	"dprintf ( D_ALWAYS , ""Our parent process (pid %d) went away; shutting down\\n"" , daemonCore -> getppid ( ) )"	139:2:4411:4515	3077351	0	True				
ANR	3077373	CallExpression	"dprintf ( D_ALWAYS , ""Our parent process (pid %d) went away; shutting down\\n"" , daemonCore -> getppid ( ) )"		3077351	0					
ANR	3077374	Callee	dprintf		3077351	0					
ANR	3077375	Identifier	dprintf		3077351	0					
ANR	3077376	ArgumentList	D_ALWAYS		3077351	1					
ANR	3077377	Argument	D_ALWAYS		3077351	0					
ANR	3077378	Identifier	D_ALWAYS		3077351	0					
ANR	3077379	Argument	"""Our parent process (pid %d) went away; shutting down\\n"""		3077351	1					
ANR	3077380	PrimaryExpression	"""Our parent process (pid %d) went away; shutting down\\n"""		3077351	0					
ANR	3077381	Argument	daemonCore -> getppid ( )		3077351	2					
ANR	3077382	CallExpression	daemonCore -> getppid ( )		3077351	0					
ANR	3077383	Callee	daemonCore -> getppid		3077351	0					
ANR	3077384	PtrMemberAccess	daemonCore -> getppid		3077351	0					
ANR	3077385	Identifier	daemonCore		3077351	0					
ANR	3077386	Identifier	getppid		3077351	1					
ANR	3077387	ArgumentList			3077351	1					
ANR	3077388	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"	142:2:4519:4575	3077351	1	True				
ANR	3077389	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"		3077351	0					
ANR	3077390	Callee	daemonCore -> Send_Signal		3077351	0					
ANR	3077391	PtrMemberAccess	daemonCore -> Send_Signal		3077351	0					
ANR	3077392	Identifier	daemonCore		3077351	0					
ANR	3077393	Identifier	Send_Signal		3077351	1					
ANR	3077394	ArgumentList	daemonCore -> getpid ( )		3077351	1					
ANR	3077395	Argument	daemonCore -> getpid ( )		3077351	0					
ANR	3077396	CallExpression	daemonCore -> getpid ( )		3077351	0					
ANR	3077397	Callee	daemonCore -> getpid		3077351	0					
ANR	3077398	PtrMemberAccess	daemonCore -> getpid		3077351	0					
ANR	3077399	Identifier	daemonCore		3077351	0					
ANR	3077400	Identifier	getpid		3077351	1					
ANR	3077401	ArgumentList			3077351	1					
ANR	3077402	Argument	SIGTERM		3077351	1					
ANR	3077403	Identifier	SIGTERM		3077351	0					
ANR	3077404	ReturnType	void		3077351	1					
ANR	3077405	Identifier	check_parent		3077351	2					
ANR	3077406	ParameterList			3077351	3					
ANR	3077407	CFGEntryNode	ENTRY		3077351		True				
ANR	3077408	CFGExitNode	EXIT		3077351		True				
ANR	3077409	Symbol	daemonCore -> Is_Pid_Alive		3077351						
ANR	3077410	Symbol	daemonCore -> getppid		3077351						
ANR	3077411	Symbol	* daemonCore		3077351						
ANR	3077412	Symbol	daemonCore		3077351						
ANR	3077413	Symbol	D_ALWAYS		3077351						
ANR	3077414	Symbol	daemonCore -> getpid		3077351						
ANR	3077415	Symbol	FALSE		3077351						
ANR	3077416	Symbol	SIGTERM		3077351						
ANR	3077417	Function	check_session_cache	148:0:4646:4728							
ANR	3077418	FunctionDef	check_session_cache ()		3077417	0					
ANR	3077419	CompoundStatement		150:0:4674:4728	3077417	0					
ANR	3077420	ExpressionStatement	daemonCore -> getSecMan ( ) -> invalidateExpiredCache ( )	151:1:4677:4726	3077417	0	True				
ANR	3077421	CallExpression	daemonCore -> getSecMan ( ) -> invalidateExpiredCache ( )		3077417	0					
ANR	3077422	Callee	daemonCore -> getSecMan ( ) -> invalidateExpiredCache		3077417	0					
ANR	3077423	PtrMemberAccess	daemonCore -> getSecMan ( ) -> invalidateExpiredCache		3077417	0					
ANR	3077424	CallExpression	daemonCore -> getSecMan ( )		3077417	0					
ANR	3077425	Callee	daemonCore -> getSecMan		3077417	0					
ANR	3077426	PtrMemberAccess	daemonCore -> getSecMan		3077417	0					
ANR	3077427	Identifier	daemonCore		3077417	0					
ANR	3077428	Identifier	getSecMan		3077417	1					
ANR	3077429	ArgumentList			3077417	1					
ANR	3077430	Identifier	invalidateExpiredCache		3077417	1					
ANR	3077431	ArgumentList			3077417	1					
ANR	3077432	ReturnType	void		3077417	1					
ANR	3077433	Identifier	check_session_cache		3077417	2					
ANR	3077434	ParameterList			3077417	3					
ANR	3077435	CFGEntryNode	ENTRY		3077417		True				
ANR	3077436	CFGExitNode	EXIT		3077417		True				
ANR	3077437	Symbol	* daemonCore		3077417						
ANR	3077438	Symbol	daemonCore		3077417						
ANR	3077439	Symbol	daemonCore -> getSecMan		3077417						
ANR	3077440	Function	global_dc_set_cookie	154:0:4731:4881							
ANR	3077441	FunctionDef	"global_dc_set_cookie (int len , unsigned char * data)"		3077440	0					
ANR	3077442	CompoundStatement		154:56:4787:4881	3077440	0					
ANR	3077443	IfStatement	if ( daemonCore )		3077440	0					
ANR	3077444	Condition	daemonCore	155:5:4794:4803	3077440	0	True				
ANR	3077445	Identifier	daemonCore		3077440	0					
ANR	3077446	CompoundStatement		2:17:18:18	3077440	1					
ANR	3077447	ReturnStatement	"return daemonCore -> set_cookie ( len , data ) ;"	156:2:4810:4850	3077440	0	True				
ANR	3077448	CallExpression	"daemonCore -> set_cookie ( len , data )"		3077440	0					
ANR	3077449	Callee	daemonCore -> set_cookie		3077440	0					
ANR	3077450	PtrMemberAccess	daemonCore -> set_cookie		3077440	0					
ANR	3077451	Identifier	daemonCore		3077440	0					
ANR	3077452	Identifier	set_cookie		3077440	1					
ANR	3077453	ArgumentList	len		3077440	1					
ANR	3077454	Argument	len		3077440	0					
ANR	3077455	Identifier	len		3077440	0					
ANR	3077456	Argument	data		3077440	1					
ANR	3077457	Identifier	data		3077440	0					
ANR	3077458	ElseStatement	else		3077440	0					
ANR	3077459	CompoundStatement		4:8:72:72	3077440	0					
ANR	3077460	ReturnStatement	return false ;	158:2:4864:4876	3077440	0	True				
ANR	3077461	Identifier	false		3077440	0					
ANR	3077462	ReturnType	bool		3077440	1					
ANR	3077463	Identifier	global_dc_set_cookie		3077440	2					
ANR	3077464	ParameterList	"int len , unsigned char * data"		3077440	3					
ANR	3077465	Parameter	int len	154:26:4757:4763	3077440	0	True				
ANR	3077466	ParameterType	int		3077440	0					
ANR	3077467	Identifier	len		3077440	1					
ANR	3077468	Parameter	unsigned char * data	154:35:4766:4784	3077440	1	True				
ANR	3077469	ParameterType	unsigned char *		3077440	0					
ANR	3077470	Identifier	data		3077440	1					
ANR	3077471	CFGEntryNode	ENTRY		3077440		True				
ANR	3077472	CFGExitNode	EXIT		3077440		True				
ANR	3077473	Symbol	len		3077440						
ANR	3077474	Symbol	data		3077440						
ANR	3077475	Symbol	* daemonCore		3077440						
ANR	3077476	Symbol	daemonCore		3077440						
ANR	3077477	Symbol	false		3077440						
ANR	3077478	Symbol	daemonCore -> set_cookie		3077440						
ANR	3077479	Function	global_dc_get_cookie	162:0:4884:5036							
ANR	3077480	FunctionDef	"global_dc_get_cookie (int & len , unsigned char * & data)"		3077479	0					
ANR	3077481	CompoundStatement		162:58:4942:5036	3077479	0					
ANR	3077482	IfStatement	if ( daemonCore )		3077479	0					
ANR	3077483	Condition	daemonCore	163:5:4949:4958	3077479	0	True				
ANR	3077484	Identifier	daemonCore		3077479	0					
ANR	3077485	CompoundStatement		2:17:18:18	3077479	1					
ANR	3077486	ReturnStatement	"return daemonCore -> get_cookie ( len , data ) ;"	164:2:4965:5005	3077479	0	True				
ANR	3077487	CallExpression	"daemonCore -> get_cookie ( len , data )"		3077479	0					
ANR	3077488	Callee	daemonCore -> get_cookie		3077479	0					
ANR	3077489	PtrMemberAccess	daemonCore -> get_cookie		3077479	0					
ANR	3077490	Identifier	daemonCore		3077479	0					
ANR	3077491	Identifier	get_cookie		3077479	1					
ANR	3077492	ArgumentList	len		3077479	1					
ANR	3077493	Argument	len		3077479	0					
ANR	3077494	Identifier	len		3077479	0					
ANR	3077495	Argument	data		3077479	1					
ANR	3077496	Identifier	data		3077479	0					
ANR	3077497	ElseStatement	else		3077479	0					
ANR	3077498	CompoundStatement		4:8:72:72	3077479	0					
ANR	3077499	ReturnStatement	return false ;	166:2:5019:5031	3077479	0	True				
ANR	3077500	Identifier	false		3077479	0					
ANR	3077501	ReturnType	bool		3077479	1					
ANR	3077502	Identifier	global_dc_get_cookie		3077479	2					
ANR	3077503	ParameterList	"int & len , unsigned char * & data"		3077479	3					
ANR	3077504	Parameter	int & len	162:26:4910:4917	3077479	0	True				
ANR	3077505	ParameterType	int &		3077479	0					
ANR	3077506	Identifier	len		3077479	1					
ANR	3077507	Parameter	unsigned char * & data	162:36:4920:4939	3077479	1	True				
ANR	3077508	ParameterType	unsigned char * &		3077479	0					
ANR	3077509	Identifier	data		3077479	1					
ANR	3077510	CFGEntryNode	ENTRY		3077479		True				
ANR	3077511	CFGExitNode	EXIT		3077479		True				
ANR	3077512	Symbol	len		3077479						
ANR	3077513	Symbol	data		3077479						
ANR	3077514	Symbol	daemonCore -> get_cookie		3077479						
ANR	3077515	Symbol	* daemonCore		3077479						
ANR	3077516	Symbol	daemonCore		3077479						
ANR	3077517	Symbol	false		3077479						
ANR	3077518	Function	handle_cookie_refresh	170:0:5039:5380							
ANR	3077519	FunctionDef	handle_cookie_refresh ()		3077518	0					
ANR	3077520	CompoundStatement		172:0:5069:5380	3077518	0					
ANR	3077521	IdentifierDeclStatement	unsigned char randomjunk [ 256 ] ;	173:1:5072:5101	3077518	0	True				
ANR	3077522	IdentifierDecl	randomjunk [ 256 ]		3077518	0					
ANR	3077523	IdentifierDeclType	unsigned char [ 256 ]		3077518	0					
ANR	3077524	Identifier	randomjunk		3077518	1					
ANR	3077525	PrimaryExpression	256		3077518	2					
ANR	3077526	IdentifierDeclStatement	"char symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' } ;"	174:1:5104:5207	3077518	1	True				
ANR	3077527	IdentifierDecl	"symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' }"		3077518	0					
ANR	3077528	IdentifierDeclType	char [ 16 ]		3077518	0					
ANR	3077529	Identifier	symbols		3077518	1					
ANR	3077530	PrimaryExpression	16		3077518	2					
ANR	3077531	AssignmentExpression	"symbols [ 16 ] = { '0' , '1' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , 'A' , 'B' , 'C' , 'D' , 'E' , 'F' }"		3077518	3		=			
ANR	3077532	Identifier	symbols		3077518	0					
ANR	3077533	InitializerList	'0'		3077518	1					
ANR	3077534	PrimaryExpression	'0'		3077518	0					
ANR	3077535	PrimaryExpression	'1'		3077518	1					
ANR	3077536	PrimaryExpression	'2'		3077518	2					
ANR	3077537	PrimaryExpression	'3'		3077518	3					
ANR	3077538	PrimaryExpression	'4'		3077518	4					
ANR	3077539	PrimaryExpression	'5'		3077518	5					
ANR	3077540	PrimaryExpression	'6'		3077518	6					
ANR	3077541	PrimaryExpression	'7'		3077518	7					
ANR	3077542	PrimaryExpression	'8'		3077518	8					
ANR	3077543	PrimaryExpression	'9'		3077518	9					
ANR	3077544	PrimaryExpression	'A'		3077518	10					
ANR	3077545	PrimaryExpression	'B'		3077518	11					
ANR	3077546	PrimaryExpression	'C'		3077518	12					
ANR	3077547	PrimaryExpression	'D'		3077518	13					
ANR	3077548	PrimaryExpression	'E'		3077518	14					
ANR	3077549	PrimaryExpression	'F'		3077518	15					
ANR	3077550	ForStatement	for ( int i = 0 ; i < 128 ; i ++ )		3077518	2					
ANR	3077551	ForInit	int i = 0 ;	176:6:5215:5224	3077518	0	True				
ANR	3077552	IdentifierDeclStatement	int i = 0 ;		3077518	0					
ANR	3077553	IdentifierDecl	i = 0		3077518	0					
ANR	3077554	IdentifierDeclType	int		3077518	0					
ANR	3077555	Identifier	i		3077518	1					
ANR	3077556	AssignmentExpression	i = 0		3077518	2		=			
ANR	3077557	Identifier	i		3077518	0					
ANR	3077558	PrimaryExpression	0		3077518	1					
ANR	3077559	Condition	i < 128	176:17:5226:5232	3077518	1	True				
ANR	3077560	RelationalExpression	i < 128		3077518	0		<			
ANR	3077561	Identifier	i		3077518	0					
ANR	3077562	PrimaryExpression	128		3077518	1					
ANR	3077563	PostIncDecOperationExpression	i ++	176:26:5235:5237	3077518	2	True				
ANR	3077564	Identifier	i		3077518	0					
ANR	3077565	IncDec	++		3077518	1					
ANR	3077566	CompoundStatement		5:31:170:170	3077518	3					
ANR	3077567	ExpressionStatement	randomjunk [ i ] = symbols [ rand ( ) % 16 ]	177:2:5244:5280	3077518	0	True				
ANR	3077568	AssignmentExpression	randomjunk [ i ] = symbols [ rand ( ) % 16 ]		3077518	0		=			
ANR	3077569	ArrayIndexing	randomjunk [ i ]		3077518	0					
ANR	3077570	Identifier	randomjunk		3077518	0					
ANR	3077571	Identifier	i		3077518	1					
ANR	3077572	ArrayIndexing	symbols [ rand ( ) % 16 ]		3077518	1					
ANR	3077573	Identifier	symbols		3077518	0					
ANR	3077574	MultiplicativeExpression	rand ( ) % 16		3077518	1		%			
ANR	3077575	CallExpression	rand ( )		3077518	0					
ANR	3077576	Callee	rand		3077518	0					
ANR	3077577	Identifier	rand		3077518	0					
ANR	3077578	ArgumentList			3077518	1					
ANR	3077579	PrimaryExpression	16		3077518	1					
ANR	3077580	ExpressionStatement	randomjunk [ 127 ] = 0	181:1:5316:5335	3077518	3	True				
ANR	3077581	AssignmentExpression	randomjunk [ 127 ] = 0		3077518	0		=			
ANR	3077582	ArrayIndexing	randomjunk [ 127 ]		3077518	0					
ANR	3077583	Identifier	randomjunk		3077518	0					
ANR	3077584	PrimaryExpression	127		3077518	1					
ANR	3077585	PrimaryExpression	0		3077518	1					
ANR	3077586	ExpressionStatement	"global_dc_set_cookie ( 128 , randomjunk )"	183:1:5339:5377	3077518	4	True				
ANR	3077587	CallExpression	"global_dc_set_cookie ( 128 , randomjunk )"		3077518	0					
ANR	3077588	Callee	global_dc_set_cookie		3077518	0					
ANR	3077589	Identifier	global_dc_set_cookie		3077518	0					
ANR	3077590	ArgumentList	128		3077518	1					
ANR	3077591	Argument	128		3077518	0					
ANR	3077592	PrimaryExpression	128		3077518	0					
ANR	3077593	Argument	randomjunk		3077518	1					
ANR	3077594	Identifier	randomjunk		3077518	0					
ANR	3077595	ReturnType	void		3077518	1					
ANR	3077596	Identifier	handle_cookie_refresh		3077518	2					
ANR	3077597	ParameterList			3077518	3					
ANR	3077598	CFGEntryNode	ENTRY		3077518		True				
ANR	3077599	CFGExitNode	EXIT		3077518		True				
ANR	3077600	Symbol	* symbols		3077518						
ANR	3077601	Symbol	rand		3077518						
ANR	3077602	Symbol	* i		3077518						
ANR	3077603	Symbol	randomjunk		3077518						
ANR	3077604	Symbol	* rand		3077518						
ANR	3077605	Symbol	i		3077518						
ANR	3077606	Symbol	* randomjunk		3077518						
ANR	3077607	Symbol	symbols		3077518						
ANR	3077608	Function	global_dc_sinful	186:0:5383:5511							
ANR	3077609	FunctionDef	global_dc_sinful ()		3077608	0					
ANR	3077610	CompoundStatement		186:31:5414:5511	3077608	0					
ANR	3077611	IfStatement	if ( daemonCore )		3077608	0					
ANR	3077612	Condition	daemonCore	187:5:5421:5430	3077608	0	True				
ANR	3077613	Identifier	daemonCore		3077608	0					
ANR	3077614	CompoundStatement		2:17:18:18	3077608	1					
ANR	3077615	ReturnStatement	return daemonCore -> InfoCommandSinfulString ( ) ;	188:2:5437:5481	3077608	0	True				
ANR	3077616	CallExpression	daemonCore -> InfoCommandSinfulString ( )		3077608	0					
ANR	3077617	Callee	daemonCore -> InfoCommandSinfulString		3077608	0					
ANR	3077618	PtrMemberAccess	daemonCore -> InfoCommandSinfulString		3077608	0					
ANR	3077619	Identifier	daemonCore		3077608	0					
ANR	3077620	Identifier	InfoCommandSinfulString		3077608	1					
ANR	3077621	ArgumentList			3077608	1					
ANR	3077622	ElseStatement	else		3077608	0					
ANR	3077623	CompoundStatement		4:8:76:76	3077608	0					
ANR	3077624	ReturnStatement	return NULL ;	190:2:5495:5506	3077608	0	True				
ANR	3077625	Identifier	NULL		3077608	0					
ANR	3077626	ReturnType	char const *		3077608	1					
ANR	3077627	Identifier	global_dc_sinful		3077608	2					
ANR	3077628	ParameterList			3077608	3					
ANR	3077629	CFGEntryNode	ENTRY		3077608		True				
ANR	3077630	CFGExitNode	EXIT		3077608		True				
ANR	3077631	Symbol	daemonCore -> InfoCommandSinfulString		3077608						
ANR	3077632	Symbol	NULL		3077608						
ANR	3077633	Symbol	* daemonCore		3077608						
ANR	3077634	Symbol	daemonCore		3077608						
ANR	3077635	Function	clean_files	194:0:5514:6714							
ANR	3077636	FunctionDef	clean_files ()		3077635	0					
ANR	3077637	CompoundStatement		195:0:5533:6714	3077635	0					
ANR	3077638	IfStatement	if ( pidFile )		3077635	0					
ANR	3077639	Condition	pidFile	197:5:5582:5588	3077635	0	True				
ANR	3077640	Identifier	pidFile		3077635	0					
ANR	3077641	CompoundStatement		3:15:58:58	3077635	1					
ANR	3077642	IfStatement	if ( unlink ( pidFile ) < 0 )		3077635	0					
ANR	3077643	Condition	unlink ( pidFile ) < 0	198:6:5600:5618	3077635	0	True				
ANR	3077644	RelationalExpression	unlink ( pidFile ) < 0		3077635	0		<			
ANR	3077645	CallExpression	unlink ( pidFile )		3077635	0					
ANR	3077646	Callee	unlink		3077635	0					
ANR	3077647	Identifier	unlink		3077635	0					
ANR	3077648	ArgumentList	pidFile		3077635	1					
ANR	3077649	Argument	pidFile		3077635	0					
ANR	3077650	Identifier	pidFile		3077635	0					
ANR	3077651	PrimaryExpression	0		3077635	1					
ANR	3077652	CompoundStatement		4:28:88:88	3077635	1					
ANR	3077653	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete pid file %s\\n"" , pidFile )"	199:3:5627:5717	3077635	0	True				
ANR	3077654	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete pid file %s\\n"" , pidFile )"		3077635	0					
ANR	3077655	Callee	dprintf		3077635	0					
ANR	3077656	Identifier	dprintf		3077635	0					
ANR	3077657	ArgumentList	D_ALWAYS		3077635	1					
ANR	3077658	Argument	D_ALWAYS		3077635	0					
ANR	3077659	Identifier	D_ALWAYS		3077635	0					
ANR	3077660	Argument	"""DaemonCore: ERROR: Can't delete pid file %s\\n"""		3077635	1					
ANR	3077661	PrimaryExpression	"""DaemonCore: ERROR: Can't delete pid file %s\\n"""		3077635	0					
ANR	3077662	Argument	pidFile		3077635	2					
ANR	3077663	Identifier	pidFile		3077635	0					
ANR	3077664	ElseStatement	else		3077635	0					
ANR	3077665	CompoundStatement		8:9:194:194	3077635	0					
ANR	3077666	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		3077635	0					
ANR	3077667	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	203:7:5737:5777	3077635	0	True				
ANR	3077668	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		3077635	0		&			
ANR	3077669	Identifier	DebugFlags		3077635	0					
ANR	3077670	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3077635	1		|			
ANR	3077671	Identifier	D_FULLDEBUG		3077635	0					
ANR	3077672	Identifier	D_DAEMONCORE		3077635	1					
ANR	3077673	CompoundStatement		9:51:247:247	3077635	1					
ANR	3077674	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed pid file %s\\n"" , pidFile )"	204:4:5787:5844	3077635	0	True				
ANR	3077675	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed pid file %s\\n"" , pidFile )"		3077635	0					
ANR	3077676	Callee	dprintf		3077635	0					
ANR	3077677	Identifier	dprintf		3077635	0					
ANR	3077678	ArgumentList	D_DAEMONCORE		3077635	1					
ANR	3077679	Argument	D_DAEMONCORE		3077635	0					
ANR	3077680	Identifier	D_DAEMONCORE		3077635	0					
ANR	3077681	Argument	"""Removed pid file %s\\n"""		3077635	1					
ANR	3077682	PrimaryExpression	"""Removed pid file %s\\n"""		3077635	0					
ANR	3077683	Argument	pidFile		3077635	2					
ANR	3077684	Identifier	pidFile		3077635	0					
ANR	3077685	IfStatement	if ( addrFile )		3077635	1					
ANR	3077686	Condition	addrFile	209:5:5864:5871	3077635	0	True				
ANR	3077687	Identifier	addrFile		3077635	0					
ANR	3077688	CompoundStatement		15:16:341:341	3077635	1					
ANR	3077689	IfStatement	if ( unlink ( addrFile ) < 0 )		3077635	0					
ANR	3077690	Condition	unlink ( addrFile ) < 0	210:6:5883:5902	3077635	0	True				
ANR	3077691	RelationalExpression	unlink ( addrFile ) < 0		3077635	0		<			
ANR	3077692	CallExpression	unlink ( addrFile )		3077635	0					
ANR	3077693	Callee	unlink		3077635	0					
ANR	3077694	Identifier	unlink		3077635	0					
ANR	3077695	ArgumentList	addrFile		3077635	1					
ANR	3077696	Argument	addrFile		3077635	0					
ANR	3077697	Identifier	addrFile		3077635	0					
ANR	3077698	PrimaryExpression	0		3077635	1					
ANR	3077699	CompoundStatement		16:29:372:372	3077635	1					
ANR	3077700	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete address file %s\\n"" , addrFile )"	211:3:5911:6006	3077635	0	True				
ANR	3077701	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete address file %s\\n"" , addrFile )"		3077635	0					
ANR	3077702	Callee	dprintf		3077635	0					
ANR	3077703	Identifier	dprintf		3077635	0					
ANR	3077704	ArgumentList	D_ALWAYS		3077635	1					
ANR	3077705	Argument	D_ALWAYS		3077635	0					
ANR	3077706	Identifier	D_ALWAYS		3077635	0					
ANR	3077707	Argument	"""DaemonCore: ERROR: Can't delete address file %s\\n"""		3077635	1					
ANR	3077708	PrimaryExpression	"""DaemonCore: ERROR: Can't delete address file %s\\n"""		3077635	0					
ANR	3077709	Argument	addrFile		3077635	2					
ANR	3077710	Identifier	addrFile		3077635	0					
ANR	3077711	ElseStatement	else		3077635	0					
ANR	3077712	CompoundStatement		20:9:483:483	3077635	0					
ANR	3077713	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		3077635	0					
ANR	3077714	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	215:7:6026:6066	3077635	0	True				
ANR	3077715	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		3077635	0		&			
ANR	3077716	Identifier	DebugFlags		3077635	0					
ANR	3077717	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3077635	1		|			
ANR	3077718	Identifier	D_FULLDEBUG		3077635	0					
ANR	3077719	Identifier	D_DAEMONCORE		3077635	1					
ANR	3077720	CompoundStatement		21:51:536:536	3077635	1					
ANR	3077721	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed address file %s\\n"" , addrFile )"	216:4:6076:6146	3077635	0	True				
ANR	3077722	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed address file %s\\n"" , addrFile )"		3077635	0					
ANR	3077723	Callee	dprintf		3077635	0					
ANR	3077724	Identifier	dprintf		3077635	0					
ANR	3077725	ArgumentList	D_DAEMONCORE		3077635	1					
ANR	3077726	Argument	D_DAEMONCORE		3077635	0					
ANR	3077727	Identifier	D_DAEMONCORE		3077635	0					
ANR	3077728	Argument	"""Removed address file %s\\n"""		3077635	1					
ANR	3077729	PrimaryExpression	"""Removed address file %s\\n"""		3077635	0					
ANR	3077730	Argument	addrFile		3077635	2					
ANR	3077731	Identifier	addrFile		3077635	0					
ANR	3077732	ExpressionStatement	free ( addrFile )	221:2:6219:6235	3077635	1	True				
ANR	3077733	CallExpression	free ( addrFile )		3077635	0					
ANR	3077734	Callee	free		3077635	0					
ANR	3077735	Identifier	free		3077635	0					
ANR	3077736	ArgumentList	addrFile		3077635	1					
ANR	3077737	Argument	addrFile		3077635	0					
ANR	3077738	Identifier	addrFile		3077635	0					
ANR	3077739	IfStatement	if ( daemonCore )		3077635	2					
ANR	3077740	Condition	daemonCore	224:4:6246:6255	3077635	0	True				
ANR	3077741	Identifier	daemonCore		3077635	0					
ANR	3077742	CompoundStatement		30:16:724:724	3077635	1					
ANR	3077743	IfStatement	if ( daemonCore -> localAdFile )		3077635	0					
ANR	3077744	Condition	daemonCore -> localAdFile	225:6:6266:6288	3077635	0	True				
ANR	3077745	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077746	Identifier	daemonCore		3077635	0					
ANR	3077747	Identifier	localAdFile		3077635	1					
ANR	3077748	CompoundStatement		31:32:758:758	3077635	1					
ANR	3077749	IfStatement	if ( unlink ( daemonCore -> localAdFile ) < 0 )		3077635	0					
ANR	3077750	Condition	unlink ( daemonCore -> localAdFile ) < 0	226:7:6301:6335	3077635	0	True				
ANR	3077751	RelationalExpression	unlink ( daemonCore -> localAdFile ) < 0		3077635	0		<			
ANR	3077752	CallExpression	unlink ( daemonCore -> localAdFile )		3077635	0					
ANR	3077753	Callee	unlink		3077635	0					
ANR	3077754	Identifier	unlink		3077635	0					
ANR	3077755	ArgumentList	daemonCore -> localAdFile		3077635	1					
ANR	3077756	Argument	daemonCore -> localAdFile		3077635	0					
ANR	3077757	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077758	Identifier	daemonCore		3077635	0					
ANR	3077759	Identifier	localAdFile		3077635	1					
ANR	3077760	PrimaryExpression	0		3077635	1					
ANR	3077761	CompoundStatement		32:45:805:805	3077635	1					
ANR	3077762	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete classad file %s\\n"" , daemonCore -> localAdFile )"	227:4:6345:6457	3077635	0	True				
ANR	3077763	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't delete classad file %s\\n"" , daemonCore -> localAdFile )"		3077635	0					
ANR	3077764	Callee	dprintf		3077635	0					
ANR	3077765	Identifier	dprintf		3077635	0					
ANR	3077766	ArgumentList	D_ALWAYS		3077635	1					
ANR	3077767	Argument	D_ALWAYS		3077635	0					
ANR	3077768	Identifier	D_ALWAYS		3077635	0					
ANR	3077769	Argument	"""DaemonCore: ERROR: Can't delete classad file %s\\n"""		3077635	1					
ANR	3077770	PrimaryExpression	"""DaemonCore: ERROR: Can't delete classad file %s\\n"""		3077635	0					
ANR	3077771	Argument	daemonCore -> localAdFile		3077635	2					
ANR	3077772	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077773	Identifier	daemonCore		3077635	0					
ANR	3077774	Identifier	localAdFile		3077635	1					
ANR	3077775	ElseStatement	else		3077635	0					
ANR	3077776	CompoundStatement		36:10:935:935	3077635	0					
ANR	3077777	IfStatement	if ( DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE ) )		3077635	0					
ANR	3077778	Condition	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )	231:8:6479:6519	3077635	0	True				
ANR	3077779	BitAndExpression	DebugFlags & ( D_FULLDEBUG | D_DAEMONCORE )		3077635	0		&			
ANR	3077780	Identifier	DebugFlags		3077635	0					
ANR	3077781	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		3077635	1		|			
ANR	3077782	Identifier	D_FULLDEBUG		3077635	0					
ANR	3077783	Identifier	D_DAEMONCORE		3077635	1					
ANR	3077784	CompoundStatement		37:52:989:989	3077635	1					
ANR	3077785	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removed local classad file %s\\n"" , daemonCore -> localAdFile )"	232:5:6530:6622	3077635	0	True				
ANR	3077786	CallExpression	"dprintf ( D_DAEMONCORE , ""Removed local classad file %s\\n"" , daemonCore -> localAdFile )"		3077635	0					
ANR	3077787	Callee	dprintf		3077635	0					
ANR	3077788	Identifier	dprintf		3077635	0					
ANR	3077789	ArgumentList	D_DAEMONCORE		3077635	1					
ANR	3077790	Argument	D_DAEMONCORE		3077635	0					
ANR	3077791	Identifier	D_DAEMONCORE		3077635	0					
ANR	3077792	Argument	"""Removed local classad file %s\\n"""		3077635	1					
ANR	3077793	PrimaryExpression	"""Removed local classad file %s\\n"""		3077635	0					
ANR	3077794	Argument	daemonCore -> localAdFile		3077635	2					
ANR	3077795	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077796	Identifier	daemonCore		3077635	0					
ANR	3077797	Identifier	localAdFile		3077635	1					
ANR	3077798	ExpressionStatement	free ( daemonCore -> localAdFile )	236:3:6638:6669	3077635	1	True				
ANR	3077799	CallExpression	free ( daemonCore -> localAdFile )		3077635	0					
ANR	3077800	Callee	free		3077635	0					
ANR	3077801	Identifier	free		3077635	0					
ANR	3077802	ArgumentList	daemonCore -> localAdFile		3077635	1					
ANR	3077803	Argument	daemonCore -> localAdFile		3077635	0					
ANR	3077804	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077805	Identifier	daemonCore		3077635	0					
ANR	3077806	Identifier	localAdFile		3077635	1					
ANR	3077807	ExpressionStatement	daemonCore -> localAdFile = NULL	237:3:6674:6704	3077635	2	True				
ANR	3077808	AssignmentExpression	daemonCore -> localAdFile = NULL		3077635	0		=			
ANR	3077809	PtrMemberAccess	daemonCore -> localAdFile		3077635	0					
ANR	3077810	Identifier	daemonCore		3077635	0					
ANR	3077811	Identifier	localAdFile		3077635	1					
ANR	3077812	Identifier	NULL		3077635	1					
ANR	3077813	ReturnType	void		3077635	1					
ANR	3077814	Identifier	clean_files		3077635	2					
ANR	3077815	ParameterList			3077635	3					
ANR	3077816	CFGEntryNode	ENTRY		3077635		True				
ANR	3077817	CFGExitNode	EXIT		3077635		True				
ANR	3077818	Symbol	addrFile		3077635						
ANR	3077819	Symbol	NULL		3077635						
ANR	3077820	Symbol	unlink		3077635						
ANR	3077821	Symbol	D_DAEMONCORE		3077635						
ANR	3077822	Symbol	* daemonCore		3077635						
ANR	3077823	Symbol	daemonCore		3077635						
ANR	3077824	Symbol	D_ALWAYS		3077635						
ANR	3077825	Symbol	DebugFlags		3077635						
ANR	3077826	Symbol	D_FULLDEBUG		3077635						
ANR	3077827	Symbol	daemonCore -> localAdFile		3077635						
ANR	3077828	Symbol	pidFile		3077635						
ANR	3077829	Function	DC_Exit	246:0:6844:9887							
ANR	3077830	FunctionDef	"DC_Exit (int status , const char * shutdown_program)"		3077829	0					
ANR	3077831	CompoundStatement		248:0:6901:9887	3077829	0					
ANR	3077832	ExpressionStatement	clean_files ( )	251:1:7000:7013	3077829	0	True				
ANR	3077833	CallExpression	clean_files ( )		3077829	0					
ANR	3077834	Callee	clean_files		3077829	0					
ANR	3077835	Identifier	clean_files		3077829	0					
ANR	3077836	ArgumentList			3077829	1					
ANR	3077837	IfStatement	if ( FILEObj )		3077829	1					
ANR	3077838	Condition	FILEObj	253:4:7020:7026	3077829	0	True				
ANR	3077839	Identifier	FILEObj		3077829	0					
ANR	3077840	CompoundStatement		6:13:127:127	3077829	1					
ANR	3077841	Statement	delete	254:2:7033:7038	3077829	0	True				
ANR	3077842	ExpressionStatement	FILEObj	254:9:7040:7047	3077829	1	True				
ANR	3077843	Identifier	FILEObj		3077829	0					
ANR	3077844	ExpressionStatement	FILEObj = NULL	255:2:7051:7065	3077829	2	True				
ANR	3077845	AssignmentExpression	FILEObj = NULL		3077829	0		=			
ANR	3077846	Identifier	FILEObj		3077829	0					
ANR	3077847	Identifier	NULL		3077829	1					
ANR	3077848	IfStatement	if ( XMLObj )		3077829	2					
ANR	3077849	Condition	XMLObj	257:4:7074:7079	3077829	0	True				
ANR	3077850	Identifier	XMLObj		3077829	0					
ANR	3077851	CompoundStatement		10:12:180:180	3077829	1					
ANR	3077852	Statement	delete	258:2:7086:7091	3077829	0	True				
ANR	3077853	ExpressionStatement	XMLObj	258:9:7093:7099	3077829	1	True				
ANR	3077854	Identifier	XMLObj		3077829	0					
ANR	3077855	ExpressionStatement	XMLObj = NULL	259:2:7103:7116	3077829	2	True				
ANR	3077856	AssignmentExpression	XMLObj = NULL		3077829	0		=			
ANR	3077857	Identifier	XMLObj		3077829	0					
ANR	3077858	Identifier	NULL		3077829	1					
ANR	3077859	IdentifierDeclStatement	int exit_status ;	266:1:7300:7315	3077829	3	True				
ANR	3077860	IdentifierDecl	exit_status		3077829	0					
ANR	3077861	IdentifierDeclType	int		3077829	0					
ANR	3077862	Identifier	exit_status		3077829	1					
ANR	3077863	IfStatement	if ( daemonCore == NULL || daemonCore -> wantsRestart ( ) )		3077829	4					
ANR	3077864	Condition	daemonCore == NULL || daemonCore -> wantsRestart ( )	267:5:7322:7369	3077829	0	True				
ANR	3077865	OrExpression	daemonCore == NULL || daemonCore -> wantsRestart ( )		3077829	0		||			
ANR	3077866	EqualityExpression	daemonCore == NULL		3077829	0		==			
ANR	3077867	Identifier	daemonCore		3077829	0					
ANR	3077868	Identifier	NULL		3077829	1					
ANR	3077869	CallExpression	daemonCore -> wantsRestart ( )		3077829	1					
ANR	3077870	Callee	daemonCore -> wantsRestart		3077829	0					
ANR	3077871	PtrMemberAccess	daemonCore -> wantsRestart		3077829	0					
ANR	3077872	Identifier	daemonCore		3077829	0					
ANR	3077873	Identifier	wantsRestart		3077829	1					
ANR	3077874	ArgumentList			3077829	1					
ANR	3077875	CompoundStatement		20:55:470:470	3077829	1					
ANR	3077876	ExpressionStatement	exit_status = status	268:2:7376:7396	3077829	0	True				
ANR	3077877	AssignmentExpression	exit_status = status		3077829	0		=			
ANR	3077878	Identifier	exit_status		3077829	0					
ANR	3077879	Identifier	status		3077829	1					
ANR	3077880	ElseStatement	else		3077829	0					
ANR	3077881	CompoundStatement		23:6:505:505	3077829	0					
ANR	3077882	ExpressionStatement	exit_status = DAEMON_NO_RESTART	271:2:7411:7442	3077829	0	True				
ANR	3077883	AssignmentExpression	exit_status = DAEMON_NO_RESTART		3077829	0		=			
ANR	3077884	Identifier	exit_status		3077829	0					
ANR	3077885	Identifier	DAEMON_NO_RESTART		3077829	1					
ANR	3077886	ExpressionStatement	"install_sig_handler ( SIGCHLD , SIG_DFL )"	277:1:7574:7610	3077829	5	True				
ANR	3077887	CallExpression	"install_sig_handler ( SIGCHLD , SIG_DFL )"		3077829	0					
ANR	3077888	Callee	install_sig_handler		3077829	0					
ANR	3077889	Identifier	install_sig_handler		3077829	0					
ANR	3077890	ArgumentList	SIGCHLD		3077829	1					
ANR	3077891	Argument	SIGCHLD		3077829	0					
ANR	3077892	Identifier	SIGCHLD		3077829	0					
ANR	3077893	Argument	SIG_DFL		3077829	1					
ANR	3077894	Identifier	SIG_DFL		3077829	0					
ANR	3077895	ExpressionStatement	"install_sig_handler ( SIGHUP , SIG_DFL )"	278:1:7613:7648	3077829	6	True				
ANR	3077896	CallExpression	"install_sig_handler ( SIGHUP , SIG_DFL )"		3077829	0					
ANR	3077897	Callee	install_sig_handler		3077829	0					
ANR	3077898	Identifier	install_sig_handler		3077829	0					
ANR	3077899	ArgumentList	SIGHUP		3077829	1					
ANR	3077900	Argument	SIGHUP		3077829	0					
ANR	3077901	Identifier	SIGHUP		3077829	0					
ANR	3077902	Argument	SIG_DFL		3077829	1					
ANR	3077903	Identifier	SIG_DFL		3077829	0					
ANR	3077904	ExpressionStatement	"install_sig_handler ( SIGTERM , SIG_DFL )"	279:1:7651:7687	3077829	7	True				
ANR	3077905	CallExpression	"install_sig_handler ( SIGTERM , SIG_DFL )"		3077829	0					
ANR	3077906	Callee	install_sig_handler		3077829	0					
ANR	3077907	Identifier	install_sig_handler		3077829	0					
ANR	3077908	ArgumentList	SIGTERM		3077829	1					
ANR	3077909	Argument	SIGTERM		3077829	0					
ANR	3077910	Identifier	SIGTERM		3077829	0					
ANR	3077911	Argument	SIG_DFL		3077829	1					
ANR	3077912	Identifier	SIG_DFL		3077829	0					
ANR	3077913	ExpressionStatement	"install_sig_handler ( SIGQUIT , SIG_DFL )"	280:1:7690:7726	3077829	8	True				
ANR	3077914	CallExpression	"install_sig_handler ( SIGQUIT , SIG_DFL )"		3077829	0					
ANR	3077915	Callee	install_sig_handler		3077829	0					
ANR	3077916	Identifier	install_sig_handler		3077829	0					
ANR	3077917	ArgumentList	SIGQUIT		3077829	1					
ANR	3077918	Argument	SIGQUIT		3077829	0					
ANR	3077919	Identifier	SIGQUIT		3077829	0					
ANR	3077920	Argument	SIG_DFL		3077829	1					
ANR	3077921	Identifier	SIG_DFL		3077829	0					
ANR	3077922	ExpressionStatement	"install_sig_handler ( SIGUSR1 , SIG_DFL )"	281:1:7729:7765	3077829	9	True				
ANR	3077923	CallExpression	"install_sig_handler ( SIGUSR1 , SIG_DFL )"		3077829	0					
ANR	3077924	Callee	install_sig_handler		3077829	0					
ANR	3077925	Identifier	install_sig_handler		3077829	0					
ANR	3077926	ArgumentList	SIGUSR1		3077829	1					
ANR	3077927	Argument	SIGUSR1		3077829	0					
ANR	3077928	Identifier	SIGUSR1		3077829	0					
ANR	3077929	Argument	SIG_DFL		3077829	1					
ANR	3077930	Identifier	SIG_DFL		3077829	0					
ANR	3077931	ExpressionStatement	"install_sig_handler ( SIGUSR2 , SIG_DFL )"	282:1:7768:7804	3077829	10	True				
ANR	3077932	CallExpression	"install_sig_handler ( SIGUSR2 , SIG_DFL )"		3077829	0					
ANR	3077933	Callee	install_sig_handler		3077829	0					
ANR	3077934	Identifier	install_sig_handler		3077829	0					
ANR	3077935	ArgumentList	SIGUSR2		3077829	1					
ANR	3077936	Argument	SIGUSR2		3077829	0					
ANR	3077937	Identifier	SIGUSR2		3077829	0					
ANR	3077938	Argument	SIG_DFL		3077829	1					
ANR	3077939	Identifier	SIG_DFL		3077829	0					
ANR	3077940	IdentifierDeclStatement	unsigned long pid = 0 ;	286:1:7893:7914	3077829	11	True				
ANR	3077941	IdentifierDecl	pid = 0		3077829	0					
ANR	3077942	IdentifierDeclType	unsigned long		3077829	0					
ANR	3077943	Identifier	pid		3077829	1					
ANR	3077944	AssignmentExpression	pid = 0		3077829	2		=			
ANR	3077945	Identifier	pid		3077829	0					
ANR	3077946	PrimaryExpression	0		3077829	1					
ANR	3077947	IfStatement	if ( daemonCore )		3077829	12					
ANR	3077948	Condition	daemonCore	287:5:7921:7930	3077829	0	True				
ANR	3077949	Identifier	daemonCore		3077829	0					
ANR	3077950	CompoundStatement		40:17:1031:1031	3077829	1					
ANR	3077951	ExpressionStatement	pid = daemonCore -> getpid ( )	288:2:7937:7964	3077829	0	True				
ANR	3077952	AssignmentExpression	pid = daemonCore -> getpid ( )		3077829	0		=			
ANR	3077953	Identifier	pid		3077829	0					
ANR	3077954	CallExpression	daemonCore -> getpid ( )		3077829	1					
ANR	3077955	Callee	daemonCore -> getpid		3077829	0					
ANR	3077956	PtrMemberAccess	daemonCore -> getpid		3077829	0					
ANR	3077957	Identifier	daemonCore		3077829	0					
ANR	3077958	Identifier	getpid		3077829	1					
ANR	3077959	ArgumentList			3077829	1					
ANR	3077960	Statement	delete	289:2:7968:7973	3077829	1	True				
ANR	3077961	ExpressionStatement	daemonCore	289:9:7975:7985	3077829	2	True				
ANR	3077962	Identifier	daemonCore		3077829	0					
ANR	3077963	ExpressionStatement	daemonCore = NULL	290:2:7989:8006	3077829	3	True				
ANR	3077964	AssignmentExpression	daemonCore = NULL		3077829	0		=			
ANR	3077965	Identifier	daemonCore		3077829	0					
ANR	3077966	Identifier	NULL		3077829	1					
ANR	3077967	ExpressionStatement	clear_config ( )	294:1:8070:8084	3077829	13	True				
ANR	3077968	CallExpression	clear_config ( )		3077829	0					
ANR	3077969	Callee	clear_config		3077829	0					
ANR	3077970	Identifier	clear_config		3077829	0					
ANR	3077971	ArgumentList			3077829	1					
ANR	3077972	ExpressionStatement	delete_passwd_cache ( )	297:1:8150:8171	3077829	14	True				
ANR	3077973	CallExpression	delete_passwd_cache ( )		3077829	0					
ANR	3077974	Callee	delete_passwd_cache		3077829	0					
ANR	3077975	Identifier	delete_passwd_cache		3077829	0					
ANR	3077976	ArgumentList			3077829	1					
ANR	3077977	IfStatement	if ( core_dir )		3077829	15					
ANR	3077978	Condition	core_dir	299:6:8180:8187	3077829	0	True				
ANR	3077979	Identifier	core_dir		3077829	0					
ANR	3077980	CompoundStatement		52:17:1289:1289	3077829	1					
ANR	3077981	ExpressionStatement	free ( core_dir )	300:2:8195:8211	3077829	0	True				
ANR	3077982	CallExpression	free ( core_dir )		3077829	0					
ANR	3077983	Callee	free		3077829	0					
ANR	3077984	Identifier	free		3077829	0					
ANR	3077985	ArgumentList	core_dir		3077829	1					
ANR	3077986	Argument	core_dir		3077829	0					
ANR	3077987	Identifier	core_dir		3077829	0					
ANR	3077988	ExpressionStatement	core_dir = NULL	301:2:8215:8230	3077829	1	True				
ANR	3077989	AssignmentExpression	core_dir = NULL		3077829	0		=			
ANR	3077990	Identifier	core_dir		3077829	0					
ANR	3077991	Identifier	NULL		3077829	1					
ANR	3077992	IfStatement	if ( shutdown_program )		3077829	16					
ANR	3077993	Condition	shutdown_program	313:6:8687:8702	3077829	0	True				
ANR	3077994	Identifier	shutdown_program		3077829	0					
ANR	3077995	CompoundStatement		82:2:2448:2515	3077829	1					
ANR	3077996	IfStatement	if ( HAVE_EXECL )		3077829	0					
ANR	3077997	Condition	HAVE_EXECL	314:10:8718:8727	3077829	0	True				
ANR	3077998	Identifier	HAVE_EXECL		3077829	0					
ANR	3077999	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"	315:2:8732:8890	3077829	1	True				
ANR	3078000	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		3077829	0					
ANR	3078001	Callee	dprintf		3077829	0					
ANR	3078002	Identifier	dprintf		3077829	0					
ANR	3078003	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078004	Argument	D_ALWAYS		3077829	0					
ANR	3078005	Identifier	D_ALWAYS		3077829	0					
ANR	3078006	Argument	"""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"""		3077829	1					
ANR	3078007	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXITING BY EXECING %s\\n"""		3077829	0					
ANR	3078008	Argument	myName		3077829	2					
ANR	3078009	Identifier	myName		3077829	0					
ANR	3078010	Argument	myDistro -> Get ( )		3077829	3					
ANR	3078011	CallExpression	myDistro -> Get ( )		3077829	0					
ANR	3078012	Callee	myDistro -> Get		3077829	0					
ANR	3078013	PtrMemberAccess	myDistro -> Get		3077829	0					
ANR	3078014	Identifier	myDistro		3077829	0					
ANR	3078015	Identifier	Get		3077829	1					
ANR	3078016	ArgumentList			3077829	1					
ANR	3078017	Argument	get_mySubSystem ( ) -> getName ( )		3077829	4					
ANR	3078018	CallExpression	get_mySubSystem ( ) -> getName ( )		3077829	0					
ANR	3078019	Callee	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078020	PtrMemberAccess	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078021	CallExpression	get_mySubSystem ( )		3077829	0					
ANR	3078022	Callee	get_mySubSystem		3077829	0					
ANR	3078023	Identifier	get_mySubSystem		3077829	0					
ANR	3078024	ArgumentList			3077829	1					
ANR	3078025	Identifier	getName		3077829	1					
ANR	3078026	ArgumentList			3077829	1					
ANR	3078027	Argument	pid		3077829	5					
ANR	3078028	Identifier	pid		3077829	0					
ANR	3078029	Argument	shutdown_program		3077829	6					
ANR	3078030	Identifier	shutdown_program		3077829	0					
ANR	3078031	IdentifierDeclStatement	priv_state p = set_root_priv ( ) ;	318:2:8894:8925	3077829	1	True				
ANR	3078032	IdentifierDecl	p = set_root_priv ( )		3077829	0					
ANR	3078033	IdentifierDeclType	priv_state		3077829	0					
ANR	3078034	Identifier	p		3077829	1					
ANR	3078035	AssignmentExpression	p = set_root_priv ( )		3077829	2		=			
ANR	3078036	Identifier	p		3077829	0					
ANR	3078037	CallExpression	set_root_priv ( )		3077829	1					
ANR	3078038	Callee	set_root_priv		3077829	0					
ANR	3078039	Identifier	set_root_priv		3077829	0					
ANR	3078040	ArgumentList			3077829	1					
ANR	3078041	IdentifierDeclStatement	"int exec_status = execl ( shutdown_program , shutdown_program , NULL ) ;"	319:2:8929:8996	3077829	2	True				
ANR	3078042	IdentifierDecl	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		3077829	0					
ANR	3078043	IdentifierDeclType	int		3077829	0					
ANR	3078044	Identifier	exec_status		3077829	1					
ANR	3078045	AssignmentExpression	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		3077829	2		=			
ANR	3078046	Identifier	exec_status		3077829	0					
ANR	3078047	CallExpression	"execl ( shutdown_program , shutdown_program , NULL )"		3077829	1					
ANR	3078048	Callee	execl		3077829	0					
ANR	3078049	Identifier	execl		3077829	0					
ANR	3078050	ArgumentList	shutdown_program		3077829	1					
ANR	3078051	Argument	shutdown_program		3077829	0					
ANR	3078052	Identifier	shutdown_program		3077829	0					
ANR	3078053	Argument	shutdown_program		3077829	1					
ANR	3078054	Identifier	shutdown_program		3077829	0					
ANR	3078055	Argument	NULL		3077829	2					
ANR	3078056	Identifier	NULL		3077829	0					
ANR	3078057	ExpressionStatement	set_priv ( p )	320:2:9000:9013	3077829	3	True				
ANR	3078058	CallExpression	set_priv ( p )		3077829	0					
ANR	3078059	Callee	set_priv		3077829	0					
ANR	3078060	Identifier	set_priv		3077829	0					
ANR	3078061	ArgumentList	p		3077829	1					
ANR	3078062	Argument	p		3077829	0					
ANR	3078063	Identifier	p		3077829	0					
ANR	3078064	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"	321:2:9017:9112	3077829	4	True				
ANR	3078065	CallExpression	"dprintf ( D_ALWAYS , ""**** execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"		3077829	0					
ANR	3078066	Callee	dprintf		3077829	0					
ANR	3078067	Identifier	dprintf		3077829	0					
ANR	3078068	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078069	Argument	D_ALWAYS		3077829	0					
ANR	3078070	Identifier	D_ALWAYS		3077829	0					
ANR	3078071	Argument	"""**** execl() FAILED %d %d %s\\n"""		3077829	1					
ANR	3078072	PrimaryExpression	"""**** execl() FAILED %d %d %s\\n"""		3077829	0					
ANR	3078073	Argument	exec_status		3077829	2					
ANR	3078074	Identifier	exec_status		3077829	0					
ANR	3078075	Argument	errno		3077829	3					
ANR	3078076	Identifier	errno		3077829	0					
ANR	3078077	Argument	strerror ( errno )		3077829	4					
ANR	3078078	CallExpression	strerror ( errno )		3077829	0					
ANR	3078079	Callee	strerror		3077829	0					
ANR	3078080	Identifier	strerror		3077829	0					
ANR	3078081	ArgumentList	errno		3077829	1					
ANR	3078082	Argument	errno		3077829	0					
ANR	3078083	Identifier	errno		3077829	0					
ANR	3078084	Statement	elif	323:6:9120:9123	3077829	5	True				
ANR	3078085	Statement	defined	323:11:9125:9131	3077829	6	True				
ANR	3078086	ExpressionStatement	"( WIN32 ) dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"	323:18:9132:9311	3077829	7	True				
ANR	3078087	CastExpression	"( WIN32 ) dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		3077829	0					
ANR	3078088	CastTarget	WIN32		3077829	0					
ANR	3078089	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , shutdown_program )"		3077829	1					
ANR	3078090	Callee	dprintf		3077829	0					
ANR	3078091	Identifier	dprintf		3077829	0					
ANR	3078092	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078093	Argument	D_ALWAYS		3077829	0					
ANR	3078094	Identifier	D_ALWAYS		3077829	0					
ANR	3078095	Argument	"""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"""		3077829	1					
ANR	3078096	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXECING SHUTDOWN PROGRAM %s\\n"""		3077829	0					
ANR	3078097	Argument	myName		3077829	2					
ANR	3078098	Identifier	myName		3077829	0					
ANR	3078099	Argument	myDistro -> Get ( )		3077829	3					
ANR	3078100	CallExpression	myDistro -> Get ( )		3077829	0					
ANR	3078101	Callee	myDistro -> Get		3077829	0					
ANR	3078102	PtrMemberAccess	myDistro -> Get		3077829	0					
ANR	3078103	Identifier	myDistro		3077829	0					
ANR	3078104	Identifier	Get		3077829	1					
ANR	3078105	ArgumentList			3077829	1					
ANR	3078106	Argument	get_mySubSystem ( ) -> getName ( )		3077829	4					
ANR	3078107	CallExpression	get_mySubSystem ( ) -> getName ( )		3077829	0					
ANR	3078108	Callee	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078109	PtrMemberAccess	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078110	CallExpression	get_mySubSystem ( )		3077829	0					
ANR	3078111	Callee	get_mySubSystem		3077829	0					
ANR	3078112	Identifier	get_mySubSystem		3077829	0					
ANR	3078113	ArgumentList			3077829	1					
ANR	3078114	Identifier	getName		3077829	1					
ANR	3078115	ArgumentList			3077829	1					
ANR	3078116	Argument	pid		3077829	5					
ANR	3078117	Identifier	pid		3077829	0					
ANR	3078118	Argument	shutdown_program		3077829	6					
ANR	3078119	Identifier	shutdown_program		3077829	0					
ANR	3078120	IdentifierDeclStatement	priv_state p = set_root_priv ( ) ;	328:2:9315:9346	3077829	8	True				
ANR	3078121	IdentifierDecl	p = set_root_priv ( )		3077829	0					
ANR	3078122	IdentifierDeclType	priv_state		3077829	0					
ANR	3078123	Identifier	p		3077829	1					
ANR	3078124	AssignmentExpression	p = set_root_priv ( )		3077829	2		=			
ANR	3078125	Identifier	p		3077829	0					
ANR	3078126	CallExpression	set_root_priv ( )		3077829	1					
ANR	3078127	Callee	set_root_priv		3077829	0					
ANR	3078128	Identifier	set_root_priv		3077829	0					
ANR	3078129	ArgumentList			3077829	1					
ANR	3078130	IdentifierDeclStatement	"int exec_status = execl ( shutdown_program , shutdown_program , NULL ) ;"	329:2:9350:9417	3077829	9	True				
ANR	3078131	IdentifierDecl	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		3077829	0					
ANR	3078132	IdentifierDeclType	int		3077829	0					
ANR	3078133	Identifier	exec_status		3077829	1					
ANR	3078134	AssignmentExpression	"exec_status = execl ( shutdown_program , shutdown_program , NULL )"		3077829	2		=			
ANR	3078135	Identifier	exec_status		3077829	0					
ANR	3078136	CallExpression	"execl ( shutdown_program , shutdown_program , NULL )"		3077829	1					
ANR	3078137	Callee	execl		3077829	0					
ANR	3078138	Identifier	execl		3077829	0					
ANR	3078139	ArgumentList	shutdown_program		3077829	1					
ANR	3078140	Argument	shutdown_program		3077829	0					
ANR	3078141	Identifier	shutdown_program		3077829	0					
ANR	3078142	Argument	shutdown_program		3077829	1					
ANR	3078143	Identifier	shutdown_program		3077829	0					
ANR	3078144	Argument	NULL		3077829	2					
ANR	3078145	Identifier	NULL		3077829	0					
ANR	3078146	ExpressionStatement	set_priv ( p )	330:2:9421:9434	3077829	10	True				
ANR	3078147	CallExpression	set_priv ( p )		3077829	0					
ANR	3078148	Callee	set_priv		3077829	0					
ANR	3078149	Identifier	set_priv		3077829	0					
ANR	3078150	ArgumentList	p		3077829	1					
ANR	3078151	Argument	p		3077829	0					
ANR	3078152	Identifier	p		3077829	0					
ANR	3078153	IfStatement	if ( exec_status )		3077829	11					
ANR	3078154	Condition	exec_status	331:7:9443:9453	3077829	0	True				
ANR	3078155	Identifier	exec_status		3077829	0					
ANR	3078156	CompoundStatement		84:21:2555:2555	3077829	1					
ANR	3078157	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** _execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"	332:3:9462:9559	3077829	0	True				
ANR	3078158	CallExpression	"dprintf ( D_ALWAYS , ""**** _execl() FAILED %d %d %s\\n"" , exec_status , errno , strerror ( errno ) )"		3077829	0					
ANR	3078159	Callee	dprintf		3077829	0					
ANR	3078160	Identifier	dprintf		3077829	0					
ANR	3078161	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078162	Argument	D_ALWAYS		3077829	0					
ANR	3078163	Identifier	D_ALWAYS		3077829	0					
ANR	3078164	Argument	"""**** _execl() FAILED %d %d %s\\n"""		3077829	1					
ANR	3078165	PrimaryExpression	"""**** _execl() FAILED %d %d %s\\n"""		3077829	0					
ANR	3078166	Argument	exec_status		3077829	2					
ANR	3078167	Identifier	exec_status		3077829	0					
ANR	3078168	Argument	errno		3077829	3					
ANR	3078169	Identifier	errno		3077829	0					
ANR	3078170	Argument	strerror ( errno )		3077829	4					
ANR	3078171	CallExpression	strerror ( errno )		3077829	0					
ANR	3078172	Callee	strerror		3077829	0					
ANR	3078173	Identifier	strerror		3077829	0					
ANR	3078174	ArgumentList	errno		3077829	1					
ANR	3078175	Argument	errno		3077829	0					
ANR	3078176	Identifier	errno		3077829	0					
ANR	3078177	ElseStatement	else		3077829	0					
ANR	3078178	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** execl() not available on this system\\n"" )"	336:2:9578:9644	3077829	0	True				
ANR	3078179	CallExpression	"dprintf ( D_ALWAYS , ""**** execl() not available on this system\\n"" )"		3077829	0					
ANR	3078180	Callee	dprintf		3077829	0					
ANR	3078181	Identifier	dprintf		3077829	0					
ANR	3078182	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078183	Argument	D_ALWAYS		3077829	0					
ANR	3078184	Identifier	D_ALWAYS		3077829	0					
ANR	3078185	Argument	"""**** execl() not available on this system\\n"""		3077829	1					
ANR	3078186	PrimaryExpression	"""**** execl() not available on this system\\n"""		3077829	0					
ANR	3078187	Statement	endif	337:6:9652:9656	3077829	12	True				
ANR	3078188	ExpressionStatement	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , exit_status )"	339:1:9662:9814	3077829	17	True				
ANR	3078189	CallExpression	"dprintf ( D_ALWAYS , ""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"" , myName , myDistro -> Get ( ) , get_mySubSystem ( ) -> getName ( ) , pid , exit_status )"		3077829	0					
ANR	3078190	Callee	dprintf		3077829	0					
ANR	3078191	Identifier	dprintf		3077829	0					
ANR	3078192	ArgumentList	D_ALWAYS		3077829	1					
ANR	3078193	Argument	D_ALWAYS		3077829	0					
ANR	3078194	Identifier	D_ALWAYS		3077829	0					
ANR	3078195	Argument	"""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"""		3077829	1					
ANR	3078196	PrimaryExpression	"""**** %s (%s_%s) pid %lu EXITING WITH STATUS %d\\n"""		3077829	0					
ANR	3078197	Argument	myName		3077829	2					
ANR	3078198	Identifier	myName		3077829	0					
ANR	3078199	Argument	myDistro -> Get ( )		3077829	3					
ANR	3078200	CallExpression	myDistro -> Get ( )		3077829	0					
ANR	3078201	Callee	myDistro -> Get		3077829	0					
ANR	3078202	PtrMemberAccess	myDistro -> Get		3077829	0					
ANR	3078203	Identifier	myDistro		3077829	0					
ANR	3078204	Identifier	Get		3077829	1					
ANR	3078205	ArgumentList			3077829	1					
ANR	3078206	Argument	get_mySubSystem ( ) -> getName ( )		3077829	4					
ANR	3078207	CallExpression	get_mySubSystem ( ) -> getName ( )		3077829	0					
ANR	3078208	Callee	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078209	PtrMemberAccess	get_mySubSystem ( ) -> getName		3077829	0					
ANR	3078210	CallExpression	get_mySubSystem ( )		3077829	0					
ANR	3078211	Callee	get_mySubSystem		3077829	0					
ANR	3078212	Identifier	get_mySubSystem		3077829	0					
ANR	3078213	ArgumentList			3077829	1					
ANR	3078214	Identifier	getName		3077829	1					
ANR	3078215	ArgumentList			3077829	1					
ANR	3078216	Argument	pid		3077829	5					
ANR	3078217	Identifier	pid		3077829	0					
ANR	3078218	Argument	exit_status		3077829	6					
ANR	3078219	Identifier	exit_status		3077829	0					
ANR	3078220	ExpressionStatement	exit ( exit_status )	344:1:9866:9885	3077829	18	True				
ANR	3078221	CallExpression	exit ( exit_status )		3077829	0					
ANR	3078222	Callee	exit		3077829	0					
ANR	3078223	Identifier	exit		3077829	0					
ANR	3078224	ArgumentList	exit_status		3077829	1					
ANR	3078225	Argument	exit_status		3077829	0					
ANR	3078226	Identifier	exit_status		3077829	0					
ANR	3078227	ReturnType	void		3077829	1					
ANR	3078228	Identifier	DC_Exit		3077829	2					
ANR	3078229	ParameterList	"int status , const char * shutdown_program"		3077829	3					
ANR	3078230	Parameter	int status	247:9:6858:6867	3077829	0	True				
ANR	3078231	ParameterType	int		3077829	0					
ANR	3078232	Identifier	status		3077829	1					
ANR	3078233	Parameter	const char * shutdown_program	247:21:6870:6897	3077829	1	True				
ANR	3078234	ParameterType	const char *		3077829	0					
ANR	3078235	Identifier	shutdown_program		3077829	1					
ANR	3078236	CFGEntryNode	ENTRY		3077829		True				
ANR	3078237	CFGExitNode	EXIT		3077829		True				
ANR	3078238	Symbol	core_dir		3077829						
ANR	3078239	Symbol	shutdown_program		3077829						
ANR	3078240	Symbol	SIGQUIT		3077829						
ANR	3078241	Symbol	daemonCore -> getpid		3077829						
ANR	3078242	Symbol	HAVE_EXECL		3077829						
ANR	3078243	Symbol	pid		3077829						
ANR	3078244	Symbol	XMLObj		3077829						
ANR	3078245	Symbol	daemonCore -> wantsRestart		3077829						
ANR	3078246	Symbol	exit_status		3077829						
ANR	3078247	Symbol	myDistro -> Get		3077829						
ANR	3078248	Symbol	FILEObj		3077829						
ANR	3078249	Symbol	myDistro		3077829						
ANR	3078250	Symbol	daemonCore		3077829						
ANR	3078251	Symbol	myName		3077829						
ANR	3078252	Symbol	exec_status		3077829						
ANR	3078253	Symbol	SIGHUP		3077829						
ANR	3078254	Symbol	SIGTERM		3077829						
ANR	3078255	Symbol	errno		3077829						
ANR	3078256	Symbol	NULL		3077829						
ANR	3078257	Symbol	get_mySubSystem ( ) -> getName		3077829						
ANR	3078258	Symbol	* get_mySubSystem		3077829						
ANR	3078259	Symbol	SIGUSR2		3077829						
ANR	3078260	Symbol	D_ALWAYS		3077829						
ANR	3078261	Symbol	SIGUSR1		3077829						
ANR	3078262	Symbol	set_root_priv		3077829						
ANR	3078263	Symbol	p		3077829						
ANR	3078264	Symbol	strerror		3077829						
ANR	3078265	Symbol	SIGCHLD		3077829						
ANR	3078266	Symbol	* daemonCore		3077829						
ANR	3078267	Symbol	* myDistro		3077829						
ANR	3078268	Symbol	SIG_DFL		3077829						
ANR	3078269	Symbol	execl		3077829						
ANR	3078270	Symbol	get_mySubSystem		3077829						
ANR	3078271	Symbol	status		3077829						
ANR	3078272	Symbol	DAEMON_NO_RESTART		3077829						
ANR	3078273	Function	DC_Skip_Auth_Init	348:0:9891:9939							
ANR	3078274	FunctionDef	DC_Skip_Auth_Init ()		3078273	0					
ANR	3078275	CompoundStatement		350:0:9916:9939	3078273	0					
ANR	3078276	ExpressionStatement	doAuthInit = false	351:1:9919:9937	3078273	0	True				
ANR	3078277	AssignmentExpression	doAuthInit = false		3078273	0		=			
ANR	3078278	Identifier	doAuthInit		3078273	0					
ANR	3078279	Identifier	false		3078273	1					
ANR	3078280	ReturnType	void		3078273	1					
ANR	3078281	Identifier	DC_Skip_Auth_Init		3078273	2					
ANR	3078282	ParameterList			3078273	3					
ANR	3078283	CFGEntryNode	ENTRY		3078273		True				
ANR	3078284	CFGExitNode	EXIT		3078273		True				
ANR	3078285	Symbol	doAuthInit		3078273						
ANR	3078286	Symbol	false		3078273						
ANR	3078287	Function	DC_Skip_Core_Init	354:0:9942:9990							
ANR	3078288	FunctionDef	DC_Skip_Core_Init ()		3078287	0					
ANR	3078289	CompoundStatement		356:0:9967:9990	3078287	0					
ANR	3078290	ExpressionStatement	doCoreInit = false	357:1:9970:9988	3078287	0	True				
ANR	3078291	AssignmentExpression	doCoreInit = false		3078287	0		=			
ANR	3078292	Identifier	doCoreInit		3078287	0					
ANR	3078293	Identifier	false		3078287	1					
ANR	3078294	ReturnType	void		3078287	1					
ANR	3078295	Identifier	DC_Skip_Core_Init		3078287	2					
ANR	3078296	ParameterList			3078287	3					
ANR	3078297	CFGEntryNode	ENTRY		3078287		True				
ANR	3078298	CFGExitNode	EXIT		3078287		True				
ANR	3078299	Symbol	doCoreInit		3078287						
ANR	3078300	Symbol	false		3078287						
ANR	3078301	Function	kill_daemon_ad_file	360:0:9993:10236							
ANR	3078302	FunctionDef	kill_daemon_ad_file ()		3078301	0					
ANR	3078303	CompoundStatement		362:0:10027:10236	3078301	0					
ANR	3078304	IdentifierDeclStatement	MyString param_name ;	363:1:10030:10049	3078301	0	True				
ANR	3078305	IdentifierDecl	param_name		3078301	0					
ANR	3078306	IdentifierDeclType	MyString		3078301	0					
ANR	3078307	Identifier	param_name		3078301	1					
ANR	3078308	ExpressionStatement	"param_name . sprintf ( ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	364:1:10052:10123	3078301	1	True				
ANR	3078309	CallExpression	"param_name . sprintf ( ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		3078301	0					
ANR	3078310	Callee	param_name . sprintf		3078301	0					
ANR	3078311	MemberAccess	param_name . sprintf		3078301	0					
ANR	3078312	Identifier	param_name		3078301	0					
ANR	3078313	Identifier	sprintf		3078301	1					
ANR	3078314	ArgumentList	"""%s_DAEMON_AD_FILE"""		3078301	1					
ANR	3078315	Argument	"""%s_DAEMON_AD_FILE"""		3078301	0					
ANR	3078316	PrimaryExpression	"""%s_DAEMON_AD_FILE"""		3078301	0					
ANR	3078317	Argument	get_mySubSystem ( ) -> getName ( )		3078301	1					
ANR	3078318	CallExpression	get_mySubSystem ( ) -> getName ( )		3078301	0					
ANR	3078319	Callee	get_mySubSystem ( ) -> getName		3078301	0					
ANR	3078320	PtrMemberAccess	get_mySubSystem ( ) -> getName		3078301	0					
ANR	3078321	CallExpression	get_mySubSystem ( )		3078301	0					
ANR	3078322	Callee	get_mySubSystem		3078301	0					
ANR	3078323	Identifier	get_mySubSystem		3078301	0					
ANR	3078324	ArgumentList			3078301	1					
ANR	3078325	Identifier	getName		3078301	1					
ANR	3078326	ArgumentList			3078301	1					
ANR	3078327	IdentifierDeclStatement	char * ad_file = param ( param_name . Value ( ) ) ;	365:1:10126:10167	3078301	2	True				
ANR	3078328	IdentifierDecl	* ad_file = param ( param_name . Value ( ) )		3078301	0					
ANR	3078329	IdentifierDeclType	char *		3078301	0					
ANR	3078330	Identifier	ad_file		3078301	1					
ANR	3078331	AssignmentExpression	* ad_file = param ( param_name . Value ( ) )		3078301	2		=			
ANR	3078332	Identifier	ad_file		3078301	0					
ANR	3078333	CallExpression	param ( param_name . Value ( ) )		3078301	1					
ANR	3078334	Callee	param		3078301	0					
ANR	3078335	Identifier	param		3078301	0					
ANR	3078336	ArgumentList	param_name . Value ( )		3078301	1					
ANR	3078337	Argument	param_name . Value ( )		3078301	0					
ANR	3078338	CallExpression	param_name . Value ( )		3078301	0					
ANR	3078339	Callee	param_name . Value		3078301	0					
ANR	3078340	MemberAccess	param_name . Value		3078301	0					
ANR	3078341	Identifier	param_name		3078301	0					
ANR	3078342	Identifier	Value		3078301	1					
ANR	3078343	ArgumentList			3078301	1					
ANR	3078344	IfStatement	if ( ! ad_file )		3078301	3					
ANR	3078345	Condition	! ad_file	366:5:10174:10181	3078301	0	True				
ANR	3078346	UnaryOperationExpression	! ad_file		3078301	0					
ANR	3078347	UnaryOperator	!		3078301	0					
ANR	3078348	Identifier	ad_file		3078301	1					
ANR	3078349	CompoundStatement		5:16:157:157	3078301	1					
ANR	3078350	ReturnStatement	return ;	367:2:10189:10195	3078301	0	True				
ANR	3078351	ExpressionStatement	unlink ( ad_file )	370:1:10202:10217	3078301	4	True				
ANR	3078352	CallExpression	unlink ( ad_file )		3078301	0					
ANR	3078353	Callee	unlink		3078301	0					
ANR	3078354	Identifier	unlink		3078301	0					
ANR	3078355	ArgumentList	ad_file		3078301	1					
ANR	3078356	Argument	ad_file		3078301	0					
ANR	3078357	Identifier	ad_file		3078301	0					
ANR	3078358	ExpressionStatement	free ( ad_file )	372:1:10221:10234	3078301	5	True				
ANR	3078359	CallExpression	free ( ad_file )		3078301	0					
ANR	3078360	Callee	free		3078301	0					
ANR	3078361	Identifier	free		3078301	0					
ANR	3078362	ArgumentList	ad_file		3078301	1					
ANR	3078363	Argument	ad_file		3078301	0					
ANR	3078364	Identifier	ad_file		3078301	0					
ANR	3078365	ReturnType	static void		3078301	1					
ANR	3078366	Identifier	kill_daemon_ad_file		3078301	2					
ANR	3078367	ParameterList			3078301	3					
ANR	3078368	CFGEntryNode	ENTRY		3078301		True				
ANR	3078369	CFGExitNode	EXIT		3078301		True				
ANR	3078370	Symbol	ad_file		3078301						
ANR	3078371	Symbol	get_mySubSystem ( ) -> getName		3078301						
ANR	3078372	Symbol	* get_mySubSystem		3078301						
ANR	3078373	Symbol	param		3078301						
ANR	3078374	Symbol	param_name		3078301						
ANR	3078375	Symbol	get_mySubSystem		3078301						
ANR	3078376	Symbol	param_name . Value		3078301						
ANR	3078377	Function	drop_addr_file	375:0:10239:11317							
ANR	3078378	FunctionDef	drop_addr_file ()		3078377	0					
ANR	3078379	CompoundStatement		377:0:10261:11317	3078377	0					
ANR	3078380	IdentifierDeclStatement	FILE * ADDR_FILE ;	378:1:10264:10279	3078377	0	True				
ANR	3078381	IdentifierDecl	* ADDR_FILE		3078377	0					
ANR	3078382	IdentifierDeclType	FILE *		3078377	0					
ANR	3078383	Identifier	ADDR_FILE		3078377	1					
ANR	3078384	IdentifierDeclStatement	char addr_file [ 100 ] ;	379:1:10282:10301	3078377	1	True				
ANR	3078385	IdentifierDecl	addr_file [ 100 ]		3078377	0					
ANR	3078386	IdentifierDeclType	char [ 100 ]		3078377	0					
ANR	3078387	Identifier	addr_file		3078377	1					
ANR	3078388	PrimaryExpression	100		3078377	2					
ANR	3078389	ExpressionStatement	"sprintf ( addr_file , ""%s_ADDRESS_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	381:1:10305:10374	3078377	2	True				
ANR	3078390	CallExpression	"sprintf ( addr_file , ""%s_ADDRESS_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		3078377	0					
ANR	3078391	Callee	sprintf		3078377	0					
ANR	3078392	Identifier	sprintf		3078377	0					
ANR	3078393	ArgumentList	addr_file		3078377	1					
ANR	3078394	Argument	addr_file		3078377	0					
ANR	3078395	Identifier	addr_file		3078377	0					
ANR	3078396	Argument	"""%s_ADDRESS_FILE"""		3078377	1					
ANR	3078397	PrimaryExpression	"""%s_ADDRESS_FILE"""		3078377	0					
ANR	3078398	Argument	get_mySubSystem ( ) -> getName ( )		3078377	2					
ANR	3078399	CallExpression	get_mySubSystem ( ) -> getName ( )		3078377	0					
ANR	3078400	Callee	get_mySubSystem ( ) -> getName		3078377	0					
ANR	3078401	PtrMemberAccess	get_mySubSystem ( ) -> getName		3078377	0					
ANR	3078402	CallExpression	get_mySubSystem ( )		3078377	0					
ANR	3078403	Callee	get_mySubSystem		3078377	0					
ANR	3078404	Identifier	get_mySubSystem		3078377	0					
ANR	3078405	ArgumentList			3078377	1					
ANR	3078406	Identifier	getName		3078377	1					
ANR	3078407	ArgumentList			3078377	1					
ANR	3078408	IfStatement	if ( addrFile )		3078377	3					
ANR	3078409	Condition	addrFile	383:5:10382:10389	3078377	0	True				
ANR	3078410	Identifier	addrFile		3078377	0					
ANR	3078411	CompoundStatement		7:16:131:131	3078377	1					
ANR	3078412	ExpressionStatement	free ( addrFile )	384:2:10397:10413	3078377	0	True				
ANR	3078413	CallExpression	free ( addrFile )		3078377	0					
ANR	3078414	Callee	free		3078377	0					
ANR	3078415	Identifier	free		3078377	0					
ANR	3078416	ArgumentList	addrFile		3078377	1					
ANR	3078417	Argument	addrFile		3078377	0					
ANR	3078418	Identifier	addrFile		3078377	0					
ANR	3078419	ExpressionStatement	addrFile = param ( addr_file )	386:1:10419:10448	3078377	4	True				
ANR	3078420	AssignmentExpression	addrFile = param ( addr_file )		3078377	0		=			
ANR	3078421	Identifier	addrFile		3078377	0					
ANR	3078422	CallExpression	param ( addr_file )		3078377	1					
ANR	3078423	Callee	param		3078377	0					
ANR	3078424	Identifier	param		3078377	0					
ANR	3078425	ArgumentList	addr_file		3078377	1					
ANR	3078426	Argument	addr_file		3078377	0					
ANR	3078427	Identifier	addr_file		3078377	0					
ANR	3078428	IfStatement	if ( addrFile )		3078377	5					
ANR	3078429	Condition	addrFile	388:5:10456:10463	3078377	0	True				
ANR	3078430	Identifier	addrFile		3078377	0					
ANR	3078431	CompoundStatement		13:2:209:229	3078377	1					
ANR	3078432	IdentifierDeclStatement	MyString newAddrFile ;	389:2:10471:10491	3078377	0	True				
ANR	3078433	IdentifierDecl	newAddrFile		3078377	0					
ANR	3078434	IdentifierDeclType	MyString		3078377	0					
ANR	3078435	Identifier	newAddrFile		3078377	1					
ANR	3078436	ExpressionStatement	"newAddrFile . sprintf ( ""%s.new"" , addrFile )"	390:2:10495:10533	3078377	1	True				
ANR	3078437	CallExpression	"newAddrFile . sprintf ( ""%s.new"" , addrFile )"		3078377	0					
ANR	3078438	Callee	newAddrFile . sprintf		3078377	0					
ANR	3078439	MemberAccess	newAddrFile . sprintf		3078377	0					
ANR	3078440	Identifier	newAddrFile		3078377	0					
ANR	3078441	Identifier	sprintf		3078377	1					
ANR	3078442	ArgumentList	"""%s.new"""		3078377	1					
ANR	3078443	Argument	"""%s.new"""		3078377	0					
ANR	3078444	PrimaryExpression	"""%s.new"""		3078377	0					
ANR	3078445	Argument	addrFile		3078377	1					
ANR	3078446	Identifier	addrFile		3078377	0					
ANR	3078447	IfStatement	"if ( ( ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" ) ) )"		3078377	2					
ANR	3078448	Condition	"ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"	391:6:10541:10605	3078377	0	True				
ANR	3078449	AssignmentExpression	"ADDR_FILE = safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"		3078377	0		=			
ANR	3078450	Identifier	ADDR_FILE		3078377	0					
ANR	3078451	CallExpression	"safe_fopen_wrapper_follow ( newAddrFile . Value ( ) , ""w"" )"		3078377	1					
ANR	3078452	Callee	safe_fopen_wrapper_follow		3078377	0					
ANR	3078453	Identifier	safe_fopen_wrapper_follow		3078377	0					
ANR	3078454	ArgumentList	newAddrFile . Value ( )		3078377	1					
ANR	3078455	Argument	newAddrFile . Value ( )		3078377	0					
ANR	3078456	CallExpression	newAddrFile . Value ( )		3078377	0					
ANR	3078457	Callee	newAddrFile . Value		3078377	0					
ANR	3078458	MemberAccess	newAddrFile . Value		3078377	0					
ANR	3078459	Identifier	newAddrFile		3078377	0					
ANR	3078460	Identifier	Value		3078377	1					
ANR	3078461	ArgumentList			3078377	1					
ANR	3078462	Argument	"""w"""		3078377	1					
ANR	3078463	PrimaryExpression	"""w"""		3078377	0					
ANR	3078464	CompoundStatement		17:3:412:465	3078377	1					
ANR	3078465	IdentifierDeclStatement	const char * addr = daemonCore -> privateNetworkIpAddr ( ) ;	393:3:10674:10727	3078377	0	True				
ANR	3078466	IdentifierDecl	* addr = daemonCore -> privateNetworkIpAddr ( )		3078377	0					
ANR	3078467	IdentifierDeclType	const char *		3078377	0					
ANR	3078468	Identifier	addr		3078377	1					
ANR	3078469	AssignmentExpression	* addr = daemonCore -> privateNetworkIpAddr ( )		3078377	2		=			
ANR	3078470	Identifier	addr		3078377	0					
ANR	3078471	CallExpression	daemonCore -> privateNetworkIpAddr ( )		3078377	1					
ANR	3078472	Callee	daemonCore -> privateNetworkIpAddr		3078377	0					
ANR	3078473	PtrMemberAccess	daemonCore -> privateNetworkIpAddr		3078377	0					
ANR	3078474	Identifier	daemonCore		3078377	0					
ANR	3078475	Identifier	privateNetworkIpAddr		3078377	1					
ANR	3078476	ArgumentList			3078377	1					
ANR	3078477	IfStatement	if ( ! addr )		3078377	1					
ANR	3078478	Condition	! addr	394:7:10736:10740	3078377	0	True				
ANR	3078479	UnaryOperationExpression	! addr		3078377	0					
ANR	3078480	UnaryOperator	!		3078377	0					
ANR	3078481	Identifier	addr		3078377	1					
ANR	3078482	CompoundStatement		18:14:481:481	3078377	1					
ANR	3078483	ExpressionStatement	addr = daemonCore -> publicNetworkIpAddr ( )	396:4:10793:10833	3078377	0	True				
ANR	3078484	AssignmentExpression	addr = daemonCore -> publicNetworkIpAddr ( )		3078377	0		=			
ANR	3078485	Identifier	addr		3078377	0					
ANR	3078486	CallExpression	daemonCore -> publicNetworkIpAddr ( )		3078377	1					
ANR	3078487	Callee	daemonCore -> publicNetworkIpAddr		3078377	0					
ANR	3078488	PtrMemberAccess	daemonCore -> publicNetworkIpAddr		3078377	0					
ANR	3078489	Identifier	daemonCore		3078377	0					
ANR	3078490	Identifier	publicNetworkIpAddr		3078377	1					
ANR	3078491	ArgumentList			3078377	1					
ANR	3078492	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , addr )"	398:3:10843:10877	3078377	2	True				
ANR	3078493	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , addr )"		3078377	0					
ANR	3078494	Callee	fprintf		3078377	0					
ANR	3078495	Identifier	fprintf		3078377	0					
ANR	3078496	ArgumentList	ADDR_FILE		3078377	1					
ANR	3078497	Argument	ADDR_FILE		3078377	0					
ANR	3078498	Identifier	ADDR_FILE		3078377	0					
ANR	3078499	Argument	"""%s\\n"""		3078377	1					
ANR	3078500	PrimaryExpression	"""%s\\n"""		3078377	0					
ANR	3078501	Argument	addr		3078377	2					
ANR	3078502	Identifier	addr		3078377	0					
ANR	3078503	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorVersion ( ) )"	399:3:10882:10927	3078377	3	True				
ANR	3078504	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorVersion ( ) )"		3078377	0					
ANR	3078505	Callee	fprintf		3078377	0					
ANR	3078506	Identifier	fprintf		3078377	0					
ANR	3078507	ArgumentList	ADDR_FILE		3078377	1					
ANR	3078508	Argument	ADDR_FILE		3078377	0					
ANR	3078509	Identifier	ADDR_FILE		3078377	0					
ANR	3078510	Argument	"""%s\\n"""		3078377	1					
ANR	3078511	PrimaryExpression	"""%s\\n"""		3078377	0					
ANR	3078512	Argument	CondorVersion ( )		3078377	2					
ANR	3078513	CallExpression	CondorVersion ( )		3078377	0					
ANR	3078514	Callee	CondorVersion		3078377	0					
ANR	3078515	Identifier	CondorVersion		3078377	0					
ANR	3078516	ArgumentList			3078377	1					
ANR	3078517	ExpressionStatement	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorPlatform ( ) )"	400:3:10932:10978	3078377	4	True				
ANR	3078518	CallExpression	"fprintf ( ADDR_FILE , ""%s\\n"" , CondorPlatform ( ) )"		3078377	0					
ANR	3078519	Callee	fprintf		3078377	0					
ANR	3078520	Identifier	fprintf		3078377	0					
ANR	3078521	ArgumentList	ADDR_FILE		3078377	1					
ANR	3078522	Argument	ADDR_FILE		3078377	0					
ANR	3078523	Identifier	ADDR_FILE		3078377	0					
ANR	3078524	Argument	"""%s\\n"""		3078377	1					
ANR	3078525	PrimaryExpression	"""%s\\n"""		3078377	0					
ANR	3078526	Argument	CondorPlatform ( )		3078377	2					
ANR	3078527	CallExpression	CondorPlatform ( )		3078377	0					
ANR	3078528	Callee	CondorPlatform		3078377	0					
ANR	3078529	Identifier	CondorPlatform		3078377	0					
ANR	3078530	ArgumentList			3078377	1					
ANR	3078531	ExpressionStatement	fclose ( ADDR_FILE )	401:3:10983:11002	3078377	5	True				
ANR	3078532	CallExpression	fclose ( ADDR_FILE )		3078377	0					
ANR	3078533	Callee	fclose		3078377	0					
ANR	3078534	Identifier	fclose		3078377	0					
ANR	3078535	ArgumentList	ADDR_FILE		3078377	1					
ANR	3078536	Argument	ADDR_FILE		3078377	0					
ANR	3078537	Identifier	ADDR_FILE		3078377	0					
ANR	3078538	IfStatement	"if ( rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0 )"		3078377	6					
ANR	3078539	Condition	"rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0"	402:7:11011:11054	3078377	0	True				
ANR	3078540	EqualityExpression	"rotate_file ( newAddrFile . Value ( ) , addrFile ) != 0"		3078377	0		!=			
ANR	3078541	CallExpression	"rotate_file ( newAddrFile . Value ( ) , addrFile )"		3078377	0					
ANR	3078542	Callee	rotate_file		3078377	0					
ANR	3078543	Identifier	rotate_file		3078377	0					
ANR	3078544	ArgumentList	newAddrFile . Value ( )		3078377	1					
ANR	3078545	Argument	newAddrFile . Value ( )		3078377	0					
ANR	3078546	CallExpression	newAddrFile . Value ( )		3078377	0					
ANR	3078547	Callee	newAddrFile . Value		3078377	0					
ANR	3078548	MemberAccess	newAddrFile . Value		3078377	0					
ANR	3078549	Identifier	newAddrFile		3078377	0					
ANR	3078550	Identifier	Value		3078377	1					
ANR	3078551	ArgumentList			3078377	1					
ANR	3078552	Argument	addrFile		3078377	1					
ANR	3078553	Identifier	addrFile		3078377	0					
ANR	3078554	PrimaryExpression	0		3078377	1					
ANR	3078555	CompoundStatement		26:54:796:796	3078377	1					
ANR	3078556	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: failed to rotate %s to %s\\n"" , newAddrFile . Value ( ) , addrFile )"	403:4:11064:11184	3078377	0	True				
ANR	3078557	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: failed to rotate %s to %s\\n"" , newAddrFile . Value ( ) , addrFile )"		3078377	0					
ANR	3078558	Callee	dprintf		3078377	0					
ANR	3078559	Identifier	dprintf		3078377	0					
ANR	3078560	ArgumentList	D_ALWAYS		3078377	1					
ANR	3078561	Argument	D_ALWAYS		3078377	0					
ANR	3078562	Identifier	D_ALWAYS		3078377	0					
ANR	3078563	Argument	"""DaemonCore: ERROR: failed to rotate %s to %s\\n"""		3078377	1					
ANR	3078564	PrimaryExpression	"""DaemonCore: ERROR: failed to rotate %s to %s\\n"""		3078377	0					
ANR	3078565	Argument	newAddrFile . Value ( )		3078377	2					
ANR	3078566	CallExpression	newAddrFile . Value ( )		3078377	0					
ANR	3078567	Callee	newAddrFile . Value		3078377	0					
ANR	3078568	MemberAccess	newAddrFile . Value		3078377	0					
ANR	3078569	Identifier	newAddrFile		3078377	0					
ANR	3078570	Identifier	Value		3078377	1					
ANR	3078571	ArgumentList			3078377	1					
ANR	3078572	Argument	addrFile		3078377	3					
ANR	3078573	Identifier	addrFile		3078377	0					
ANR	3078574	ElseStatement	else		3078377	0					
ANR	3078575	CompoundStatement		32:9:938:938	3078377	0					
ANR	3078576	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open address file %s\\n"" , newAddrFile . Value ( ) )"	409:3:11205:11308	3078377	0	True				
ANR	3078577	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open address file %s\\n"" , newAddrFile . Value ( ) )"		3078377	0					
ANR	3078578	Callee	dprintf		3078377	0					
ANR	3078579	Identifier	dprintf		3078377	0					
ANR	3078580	ArgumentList	D_ALWAYS		3078377	1					
ANR	3078581	Argument	D_ALWAYS		3078377	0					
ANR	3078582	Identifier	D_ALWAYS		3078377	0					
ANR	3078583	Argument	"""DaemonCore: ERROR: Can't open address file %s\\n"""		3078377	1					
ANR	3078584	PrimaryExpression	"""DaemonCore: ERROR: Can't open address file %s\\n"""		3078377	0					
ANR	3078585	Argument	newAddrFile . Value ( )		3078377	2					
ANR	3078586	CallExpression	newAddrFile . Value ( )		3078377	0					
ANR	3078587	Callee	newAddrFile . Value		3078377	0					
ANR	3078588	MemberAccess	newAddrFile . Value		3078377	0					
ANR	3078589	Identifier	newAddrFile		3078377	0					
ANR	3078590	Identifier	Value		3078377	1					
ANR	3078591	ArgumentList			3078377	1					
ANR	3078592	ReturnType	void		3078377	1					
ANR	3078593	Identifier	drop_addr_file		3078377	2					
ANR	3078594	ParameterList			3078377	3					
ANR	3078595	CFGEntryNode	ENTRY		3078377		True				
ANR	3078596	CFGExitNode	EXIT		3078377		True				
ANR	3078597	Symbol	addrFile		3078377						
ANR	3078598	Symbol	get_mySubSystem ( ) -> getName		3078377						
ANR	3078599	Symbol	* get_mySubSystem		3078377						
ANR	3078600	Symbol	D_ALWAYS		3078377						
ANR	3078601	Symbol	ADDR_FILE		3078377						
ANR	3078602	Symbol	daemonCore -> publicNetworkIpAddr		3078377						
ANR	3078603	Symbol	addr_file		3078377						
ANR	3078604	Symbol	param		3078377						
ANR	3078605	Symbol	newAddrFile . Value		3078377						
ANR	3078606	Symbol	CondorVersion		3078377						
ANR	3078607	Symbol	* daemonCore		3078377						
ANR	3078608	Symbol	daemonCore		3078377						
ANR	3078609	Symbol	CondorPlatform		3078377						
ANR	3078610	Symbol	daemonCore -> privateNetworkIpAddr		3078377						
ANR	3078611	Symbol	rotate_file		3078377						
ANR	3078612	Symbol	newAddrFile		3078377						
ANR	3078613	Symbol	addr		3078377						
ANR	3078614	Symbol	get_mySubSystem		3078377						
ANR	3078615	Symbol	safe_fopen_wrapper_follow		3078377						
ANR	3078616	Function	drop_pid_file	416:0:11320:11691							
ANR	3078617	FunctionDef	drop_pid_file ()		3078616	0					
ANR	3078618	CompoundStatement		418:0:11342:11691	3078616	0					
ANR	3078619	IdentifierDeclStatement	FILE * PID_FILE ;	419:1:11345:11359	3078616	0	True				
ANR	3078620	IdentifierDecl	* PID_FILE		3078616	0					
ANR	3078621	IdentifierDeclType	FILE *		3078616	0					
ANR	3078622	Identifier	PID_FILE		3078616	1					
ANR	3078623	IfStatement	if ( ! pidFile )		3078616	1					
ANR	3078624	Condition	! pidFile	421:5:11367:11374	3078616	0	True				
ANR	3078625	UnaryOperationExpression	! pidFile		3078616	0					
ANR	3078626	UnaryOperator	!		3078616	0					
ANR	3078627	Identifier	pidFile		3078616	1					
ANR	3078628	CompoundStatement		4:16:35:35	3078616	1					
ANR	3078629	ReturnStatement	return ;	423:2:11417:11423	3078616	0	True				
ANR	3078630	IfStatement	"if ( ( PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" ) ) )"		3078616	2					
ANR	3078631	Condition	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" )"	426:5:11434:11485	3078616	0	True				
ANR	3078632	AssignmentExpression	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""w"" )"		3078616	0		=			
ANR	3078633	Identifier	PID_FILE		3078616	0					
ANR	3078634	CallExpression	"safe_fopen_wrapper_follow ( pidFile , ""w"" )"		3078616	1					
ANR	3078635	Callee	safe_fopen_wrapper_follow		3078616	0					
ANR	3078636	Identifier	safe_fopen_wrapper_follow		3078616	0					
ANR	3078637	ArgumentList	pidFile		3078616	1					
ANR	3078638	Argument	pidFile		3078616	0					
ANR	3078639	Identifier	pidFile		3078616	0					
ANR	3078640	Argument	"""w"""		3078616	1					
ANR	3078641	PrimaryExpression	"""w"""		3078616	0					
ANR	3078642	CompoundStatement		9:60:146:146	3078616	1					
ANR	3078643	ExpressionStatement	"fprintf ( PID_FILE , ""%lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"	427:2:11493:11564	3078616	0	True				
ANR	3078644	CallExpression	"fprintf ( PID_FILE , ""%lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"		3078616	0					
ANR	3078645	Callee	fprintf		3078616	0					
ANR	3078646	Identifier	fprintf		3078616	0					
ANR	3078647	ArgumentList	PID_FILE		3078616	1					
ANR	3078648	Argument	PID_FILE		3078616	0					
ANR	3078649	Identifier	PID_FILE		3078616	0					
ANR	3078650	Argument	"""%lu\\n"""		3078616	1					
ANR	3078651	PrimaryExpression	"""%lu\\n"""		3078616	0					
ANR	3078652	Argument	( unsigned long ) daemonCore -> getpid ( )		3078616	2					
ANR	3078653	CastExpression	( unsigned long ) daemonCore -> getpid ( )		3078616	0					
ANR	3078654	CastTarget	unsigned long		3078616	0					
ANR	3078655	CallExpression	daemonCore -> getpid ( )		3078616	1					
ANR	3078656	Callee	daemonCore -> getpid		3078616	0					
ANR	3078657	PtrMemberAccess	daemonCore -> getpid		3078616	0					
ANR	3078658	Identifier	daemonCore		3078616	0					
ANR	3078659	Identifier	getpid		3078616	1					
ANR	3078660	ArgumentList			3078616	1					
ANR	3078661	ExpressionStatement	fclose ( PID_FILE )	429:2:11569:11587	3078616	1	True				
ANR	3078662	CallExpression	fclose ( PID_FILE )		3078616	0					
ANR	3078663	Callee	fclose		3078616	0					
ANR	3078664	Identifier	fclose		3078616	0					
ANR	3078665	ArgumentList	PID_FILE		3078616	1					
ANR	3078666	Argument	PID_FILE		3078616	0					
ANR	3078667	Identifier	PID_FILE		3078616	0					
ANR	3078668	ElseStatement	else		3078616	0					
ANR	3078669	CompoundStatement		13:8:254:254	3078616	0					
ANR	3078670	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open pid file %s\\n"" , pidFile )"	431:2:11601:11686	3078616	0	True				
ANR	3078671	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open pid file %s\\n"" , pidFile )"		3078616	0					
ANR	3078672	Callee	dprintf		3078616	0					
ANR	3078673	Identifier	dprintf		3078616	0					
ANR	3078674	ArgumentList	D_ALWAYS		3078616	1					
ANR	3078675	Argument	D_ALWAYS		3078616	0					
ANR	3078676	Identifier	D_ALWAYS		3078616	0					
ANR	3078677	Argument	"""DaemonCore: ERROR: Can't open pid file %s\\n"""		3078616	1					
ANR	3078678	PrimaryExpression	"""DaemonCore: ERROR: Can't open pid file %s\\n"""		3078616	0					
ANR	3078679	Argument	pidFile		3078616	2					
ANR	3078680	Identifier	pidFile		3078616	0					
ANR	3078681	ReturnType	void		3078616	1					
ANR	3078682	Identifier	drop_pid_file		3078616	2					
ANR	3078683	ParameterList			3078616	3					
ANR	3078684	CFGEntryNode	ENTRY		3078616		True				
ANR	3078685	CFGExitNode	EXIT		3078616		True				
ANR	3078686	Symbol	* daemonCore		3078616						
ANR	3078687	Symbol	daemonCore		3078616						
ANR	3078688	Symbol	daemonCore -> getpid		3078616						
ANR	3078689	Symbol	D_ALWAYS		3078616						
ANR	3078690	Symbol	PID_FILE		3078616						
ANR	3078691	Symbol	safe_fopen_wrapper_follow		3078616						
ANR	3078692	Symbol	pidFile		3078616						
ANR	3078693	Function	do_kill	438:0:11695:13235							
ANR	3078694	FunctionDef	do_kill ()		3078693	0					
ANR	3078695	CompoundStatement		440:0:11711:13235	3078693	0					
ANR	3078696	IdentifierDeclStatement	FILE * PID_FILE ;	442:1:11728:11742	3078693	0	True				
ANR	3078697	IdentifierDecl	* PID_FILE		3078693	0					
ANR	3078698	IdentifierDeclType	FILE *		3078693	0					
ANR	3078699	Identifier	PID_FILE		3078693	1					
ANR	3078700	IdentifierDeclStatement	pid_t pid = 0 ;	443:1:11745:11759	3078693	1	True				
ANR	3078701	IdentifierDecl	pid = 0		3078693	0					
ANR	3078702	IdentifierDeclType	pid_t		3078693	0					
ANR	3078703	Identifier	pid		3078693	1					
ANR	3078704	AssignmentExpression	pid = 0		3078693	2		=			
ANR	3078705	Identifier	pid		3078693	0					
ANR	3078706	PrimaryExpression	0		3078693	1					
ANR	3078707	IdentifierDeclStatement	unsigned long tmp_ul_int = 0 ;	444:1:11762:11790	3078693	2	True				
ANR	3078708	IdentifierDecl	tmp_ul_int = 0		3078693	0					
ANR	3078709	IdentifierDeclType	unsigned long		3078693	0					
ANR	3078710	Identifier	tmp_ul_int		3078693	1					
ANR	3078711	AssignmentExpression	tmp_ul_int = 0		3078693	2		=			
ANR	3078712	Identifier	tmp_ul_int		3078693	0					
ANR	3078713	PrimaryExpression	0		3078693	1					
ANR	3078714	IdentifierDeclStatement	"char * log , * tmp ;"	445:1:11793:11808	3078693	3	True				
ANR	3078715	IdentifierDecl	* log		3078693	0					
ANR	3078716	IdentifierDeclType	char *		3078693	0					
ANR	3078717	Identifier	log		3078693	1					
ANR	3078718	IdentifierDecl	* tmp		3078693	1					
ANR	3078719	IdentifierDeclType	char *		3078693	0					
ANR	3078720	Identifier	tmp		3078693	1					
ANR	3078721	IfStatement	if ( ! pidFile )		3078693	4					
ANR	3078722	Condition	! pidFile	447:5:11816:11823	3078693	0	True				
ANR	3078723	UnaryOperationExpression	! pidFile		3078693	0					
ANR	3078724	UnaryOperator	!		3078693	0					
ANR	3078725	Identifier	pidFile		3078693	1					
ANR	3078726	CompoundStatement		8:16:115:115	3078693	1					
ANR	3078727	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: no pidfile specified for -kill\\n"" )"	448:2:11831:11909	3078693	0	True				
ANR	3078728	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: no pidfile specified for -kill\\n"" )"		3078693	0					
ANR	3078729	Callee	fprintf		3078693	0					
ANR	3078730	Identifier	fprintf		3078693	0					
ANR	3078731	ArgumentList	stderr		3078693	1					
ANR	3078732	Argument	stderr		3078693	0					
ANR	3078733	Identifier	stderr		3078693	0					
ANR	3078734	Argument	"""DaemonCore: ERROR: no pidfile specified for -kill\\n"""		3078693	1					
ANR	3078735	PrimaryExpression	"""DaemonCore: ERROR: no pidfile specified for -kill\\n"""		3078693	0					
ANR	3078736	ExpressionStatement	exit ( 1 )	450:2:11913:11922	3078693	1	True				
ANR	3078737	CallExpression	exit ( 1 )		3078693	0					
ANR	3078738	Callee	exit		3078693	0					
ANR	3078739	Identifier	exit		3078693	0					
ANR	3078740	ArgumentList	1		3078693	1					
ANR	3078741	Argument	1		3078693	0					
ANR	3078742	PrimaryExpression	1		3078693	0					
ANR	3078743	IfStatement	if ( pidFile [ 0 ] != '/' )		3078693	5					
ANR	3078744	Condition	pidFile [ 0 ] != '/'	452:5:11932:11948	3078693	0	True				
ANR	3078745	EqualityExpression	pidFile [ 0 ] != '/'		3078693	0		!=			
ANR	3078746	ArrayIndexing	pidFile [ 0 ]		3078693	0					
ANR	3078747	Identifier	pidFile		3078693	0					
ANR	3078748	PrimaryExpression	0		3078693	1					
ANR	3078749	PrimaryExpression	'/'		3078693	1					
ANR	3078750	CompoundStatement		13:25:240:240	3078693	1					
ANR	3078751	IfStatement	"if ( ( log = param ( ""LOG"" ) ) )"		3078693	0					
ANR	3078752	Condition	"log = param ( ""LOG"" )"	454:6:12017:12036	3078693	0	True				
ANR	3078753	AssignmentExpression	"log = param ( ""LOG"" )"		3078693	0		=			
ANR	3078754	Identifier	log		3078693	0					
ANR	3078755	CallExpression	"param ( ""LOG"" )"		3078693	1					
ANR	3078756	Callee	param		3078693	0					
ANR	3078757	Identifier	param		3078693	0					
ANR	3078758	ArgumentList	"""LOG"""		3078693	1					
ANR	3078759	Argument	"""LOG"""		3078693	0					
ANR	3078760	PrimaryExpression	"""LOG"""		3078693	0					
ANR	3078761	CompoundStatement		15:29:328:328	3078693	1					
ANR	3078762	ExpressionStatement	tmp = ( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )	455:3:12045:12128	3078693	0	True				
ANR	3078763	AssignmentExpression	tmp = ( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		3078693	0		=			
ANR	3078764	Identifier	tmp		3078693	0					
ANR	3078765	CastExpression	( char * ) malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		3078693	1					
ANR	3078766	CastTarget	char *		3078693	0					
ANR	3078767	CallExpression	malloc ( ( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char ) )		3078693	1					
ANR	3078768	Callee	malloc		3078693	0					
ANR	3078769	Identifier	malloc		3078693	0					
ANR	3078770	ArgumentList	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		3078693	1					
ANR	3078771	Argument	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		3078693	0					
ANR	3078772	MultiplicativeExpression	( strlen ( log ) + strlen ( pidFile ) + 2 ) * sizeof ( char )		3078693	0		*			
ANR	3078773	AdditiveExpression	strlen ( log ) + strlen ( pidFile ) + 2		3078693	0		+			
ANR	3078774	CallExpression	strlen ( log )		3078693	0					
ANR	3078775	Callee	strlen		3078693	0					
ANR	3078776	Identifier	strlen		3078693	0					
ANR	3078777	ArgumentList	log		3078693	1					
ANR	3078778	Argument	log		3078693	0					
ANR	3078779	Identifier	log		3078693	0					
ANR	3078780	AdditiveExpression	strlen ( pidFile ) + 2		3078693	1		+			
ANR	3078781	CallExpression	strlen ( pidFile )		3078693	0					
ANR	3078782	Callee	strlen		3078693	0					
ANR	3078783	Identifier	strlen		3078693	0					
ANR	3078784	ArgumentList	pidFile		3078693	1					
ANR	3078785	Argument	pidFile		3078693	0					
ANR	3078786	Identifier	pidFile		3078693	0					
ANR	3078787	PrimaryExpression	2		3078693	1					
ANR	3078788	SizeofExpression	sizeof ( char )		3078693	1					
ANR	3078789	Sizeof	sizeof		3078693	0					
ANR	3078790	SizeofOperand	char		3078693	1					
ANR	3078791	ExpressionStatement	"sprintf ( tmp , ""%s/%s"" , log , pidFile )"	457:3:12133:12170	3078693	1	True				
ANR	3078792	CallExpression	"sprintf ( tmp , ""%s/%s"" , log , pidFile )"		3078693	0					
ANR	3078793	Callee	sprintf		3078693	0					
ANR	3078794	Identifier	sprintf		3078693	0					
ANR	3078795	ArgumentList	tmp		3078693	1					
ANR	3078796	Argument	tmp		3078693	0					
ANR	3078797	Identifier	tmp		3078693	0					
ANR	3078798	Argument	"""%s/%s"""		3078693	1					
ANR	3078799	PrimaryExpression	"""%s/%s"""		3078693	0					
ANR	3078800	Argument	log		3078693	2					
ANR	3078801	Identifier	log		3078693	0					
ANR	3078802	Argument	pidFile		3078693	3					
ANR	3078803	Identifier	pidFile		3078693	0					
ANR	3078804	ExpressionStatement	free ( log )	458:3:12175:12186	3078693	2	True				
ANR	3078805	CallExpression	free ( log )		3078693	0					
ANR	3078806	Callee	free		3078693	0					
ANR	3078807	Identifier	free		3078693	0					
ANR	3078808	ArgumentList	log		3078693	1					
ANR	3078809	Argument	log		3078693	0					
ANR	3078810	Identifier	log		3078693	0					
ANR	3078811	ExpressionStatement	pidFile = tmp	459:3:12191:12204	3078693	3	True				
ANR	3078812	AssignmentExpression	pidFile = tmp		3078693	0		=			
ANR	3078813	Identifier	pidFile		3078693	0					
ANR	3078814	Identifier	tmp		3078693	1					
ANR	3078815	IfStatement	"if ( ( PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" ) ) )"		3078693	6					
ANR	3078816	Condition	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" )"	462:5:12218:12269	3078693	0	True				
ANR	3078817	AssignmentExpression	"PID_FILE = safe_fopen_wrapper_follow ( pidFile , ""r"" )"		3078693	0		=			
ANR	3078818	Identifier	PID_FILE		3078693	0					
ANR	3078819	CallExpression	"safe_fopen_wrapper_follow ( pidFile , ""r"" )"		3078693	1					
ANR	3078820	Callee	safe_fopen_wrapper_follow		3078693	0					
ANR	3078821	Identifier	safe_fopen_wrapper_follow		3078693	0					
ANR	3078822	ArgumentList	pidFile		3078693	1					
ANR	3078823	Argument	pidFile		3078693	0					
ANR	3078824	Identifier	pidFile		3078693	0					
ANR	3078825	Argument	"""r"""		3078693	1					
ANR	3078826	PrimaryExpression	"""r"""		3078693	0					
ANR	3078827	CompoundStatement		23:60:561:561	3078693	1					
ANR	3078828	ExpressionStatement	"fscanf ( PID_FILE , ""%lu"" , & tmp_ul_int )"	463:2:12277:12315	3078693	0	True				
ANR	3078829	CallExpression	"fscanf ( PID_FILE , ""%lu"" , & tmp_ul_int )"		3078693	0					
ANR	3078830	Callee	fscanf		3078693	0					
ANR	3078831	Identifier	fscanf		3078693	0					
ANR	3078832	ArgumentList	PID_FILE		3078693	1					
ANR	3078833	Argument	PID_FILE		3078693	0					
ANR	3078834	Identifier	PID_FILE		3078693	0					
ANR	3078835	Argument	"""%lu"""		3078693	1					
ANR	3078836	PrimaryExpression	"""%lu"""		3078693	0					
ANR	3078837	Argument	& tmp_ul_int		3078693	2					
ANR	3078838	UnaryOperationExpression	& tmp_ul_int		3078693	0					
ANR	3078839	UnaryOperator	&		3078693	0					
ANR	3078840	Identifier	tmp_ul_int		3078693	1					
ANR	3078841	ExpressionStatement	pid = ( pid_t ) tmp_ul_int	464:2:12320:12343	3078693	1	True				
ANR	3078842	AssignmentExpression	pid = ( pid_t ) tmp_ul_int		3078693	0		=			
ANR	3078843	Identifier	pid		3078693	0					
ANR	3078844	CastExpression	( pid_t ) tmp_ul_int		3078693	1					
ANR	3078845	CastTarget	pid_t		3078693	0					
ANR	3078846	Identifier	tmp_ul_int		3078693	1					
ANR	3078847	ExpressionStatement	fclose ( PID_FILE )	465:2:12347:12365	3078693	2	True				
ANR	3078848	CallExpression	fclose ( PID_FILE )		3078693	0					
ANR	3078849	Callee	fclose		3078693	0					
ANR	3078850	Identifier	fclose		3078693	0					
ANR	3078851	ArgumentList	PID_FILE		3078693	1					
ANR	3078852	Argument	PID_FILE		3078693	0					
ANR	3078853	Identifier	PID_FILE		3078693	0					
ANR	3078854	ElseStatement	else		3078693	0					
ANR	3078855	CompoundStatement		27:8:663:663	3078693	0					
ANR	3078856	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: Can't open pid file %s for reading\\n"" , pidFile )"	467:2:12379:12475	3078693	0	True				
ANR	3078857	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: Can't open pid file %s for reading\\n"" , pidFile )"		3078693	0					
ANR	3078858	Callee	fprintf		3078693	0					
ANR	3078859	Identifier	fprintf		3078693	0					
ANR	3078860	ArgumentList	stderr		3078693	1					
ANR	3078861	Argument	stderr		3078693	0					
ANR	3078862	Identifier	stderr		3078693	0					
ANR	3078863	Argument	"""DaemonCore: ERROR: Can't open pid file %s for reading\\n"""		3078693	1					
ANR	3078864	PrimaryExpression	"""DaemonCore: ERROR: Can't open pid file %s for reading\\n"""		3078693	0					
ANR	3078865	Argument	pidFile		3078693	2					
ANR	3078866	Identifier	pidFile		3078693	0					
ANR	3078867	ExpressionStatement	exit ( 1 )	470:2:12479:12488	3078693	1	True				
ANR	3078868	CallExpression	exit ( 1 )		3078693	0					
ANR	3078869	Callee	exit		3078693	0					
ANR	3078870	Identifier	exit		3078693	0					
ANR	3078871	ArgumentList	1		3078693	1					
ANR	3078872	Argument	1		3078693	0					
ANR	3078873	PrimaryExpression	1		3078693	0					
ANR	3078874	IfStatement	if ( pid > 0 )		3078693	7					
ANR	3078875	Condition	pid > 0	472:5:12498:12504	3078693	0	True				
ANR	3078876	RelationalExpression	pid > 0		3078693	0		>			
ANR	3078877	Identifier	pid		3078693	0					
ANR	3078878	PrimaryExpression	0		3078693	1					
ANR	3078879	CompoundStatement		33:15:796:796	3078693	1					
ANR	3078880	IfStatement	"if ( kill ( pid , SIGTERM ) < 0 )"		3078693	0					
ANR	3078881	Condition	"kill ( pid , SIGTERM ) < 0"	474:6:12559:12580	3078693	0	True				
ANR	3078882	RelationalExpression	"kill ( pid , SIGTERM ) < 0"		3078693	0		<			
ANR	3078883	CallExpression	"kill ( pid , SIGTERM )"		3078693	0					
ANR	3078884	Callee	kill		3078693	0					
ANR	3078885	Identifier	kill		3078693	0					
ANR	3078886	ArgumentList	pid		3078693	1					
ANR	3078887	Argument	pid		3078693	0					
ANR	3078888	Identifier	pid		3078693	0					
ANR	3078889	Argument	SIGTERM		3078693	1					
ANR	3078890	Identifier	SIGTERM		3078693	0					
ANR	3078891	PrimaryExpression	0		3078693	1					
ANR	3078892	CompoundStatement		35:31:872:872	3078693	1					
ANR	3078893	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"" , ( unsigned long ) pid )"	475:3:12589:12697	3078693	0	True				
ANR	3078894	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"" , ( unsigned long ) pid )"		3078693	0					
ANR	3078895	Callee	fprintf		3078693	0					
ANR	3078896	Identifier	fprintf		3078693	0					
ANR	3078897	ArgumentList	stderr		3078693	1					
ANR	3078898	Argument	stderr		3078693	0					
ANR	3078899	Identifier	stderr		3078693	0					
ANR	3078900	Argument	"""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"""		3078693	1					
ANR	3078901	PrimaryExpression	"""DaemonCore: ERROR: can't send SIGTERM to pid (%lu)\\n"""		3078693	0					
ANR	3078902	Argument	( unsigned long ) pid		3078693	2					
ANR	3078903	CastExpression	( unsigned long ) pid		3078693	0					
ANR	3078904	CastTarget	unsigned long		3078693	0					
ANR	3078905	Identifier	pid		3078693	1					
ANR	3078906	ExpressionStatement	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"	478:3:12702:12772	3078693	1	True				
ANR	3078907	CallExpression	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"		3078693	0					
ANR	3078908	Callee	fprintf		3078693	0					
ANR	3078909	Identifier	fprintf		3078693	0					
ANR	3078910	ArgumentList	stderr		3078693	1					
ANR	3078911	Argument	stderr		3078693	0					
ANR	3078912	Identifier	stderr		3078693	0					
ANR	3078913	Argument	"""\\terrno: %d (%s)\\n"""		3078693	1					
ANR	3078914	PrimaryExpression	"""\\terrno: %d (%s)\\n"""		3078693	0					
ANR	3078915	Argument	errno		3078693	2					
ANR	3078916	Identifier	errno		3078693	0					
ANR	3078917	Argument	strerror ( errno )		3078693	3					
ANR	3078918	CallExpression	strerror ( errno )		3078693	0					
ANR	3078919	Callee	strerror		3078693	0					
ANR	3078920	Identifier	strerror		3078693	0					
ANR	3078921	ArgumentList	errno		3078693	1					
ANR	3078922	Argument	errno		3078693	0					
ANR	3078923	Identifier	errno		3078693	0					
ANR	3078924	ExpressionStatement	exit ( 1 )	480:3:12777:12786	3078693	2	True				
ANR	3078925	CallExpression	exit ( 1 )		3078693	0					
ANR	3078926	Callee	exit		3078693	0					
ANR	3078927	Identifier	exit		3078693	0					
ANR	3078928	ArgumentList	1		3078693	1					
ANR	3078929	Argument	1		3078693	0					
ANR	3078930	PrimaryExpression	1		3078693	0					
ANR	3078931	WhileStatement	"while ( kill ( pid , 0 ) == 0 )"		3078693	1					
ANR	3078932	Condition	"kill ( pid , 0 ) == 0"	485:9:12946:12962	3078693	0	True				
ANR	3078933	EqualityExpression	"kill ( pid , 0 ) == 0"		3078693	0		==			
ANR	3078934	CallExpression	"kill ( pid , 0 )"		3078693	0					
ANR	3078935	Callee	kill		3078693	0					
ANR	3078936	Identifier	kill		3078693	0					
ANR	3078937	ArgumentList	pid		3078693	1					
ANR	3078938	Argument	pid		3078693	0					
ANR	3078939	Identifier	pid		3078693	0					
ANR	3078940	Argument	0		3078693	1					
ANR	3078941	PrimaryExpression	0		3078693	0					
ANR	3078942	PrimaryExpression	0		3078693	1					
ANR	3078943	CompoundStatement		46:29:1254:1254	3078693	1					
ANR	3078944	ExpressionStatement	sleep ( 3 )	486:3:12971:12981	3078693	0	True				
ANR	3078945	CallExpression	sleep ( 3 )		3078693	0					
ANR	3078946	Callee	sleep		3078693	0					
ANR	3078947	Identifier	sleep		3078693	0					
ANR	3078948	ArgumentList	3		3078693	1					
ANR	3078949	Argument	3		3078693	0					
ANR	3078950	PrimaryExpression	3		3078693	0					
ANR	3078951	ExpressionStatement	exit ( 0 )	489:2:13029:13038	3078693	2	True				
ANR	3078952	CallExpression	exit ( 0 )		3078693	0					
ANR	3078953	Callee	exit		3078693	0					
ANR	3078954	Identifier	exit		3078693	0					
ANR	3078955	ArgumentList	0		3078693	1					
ANR	3078956	Argument	0		3078693	0					
ANR	3078957	PrimaryExpression	0		3078693	0					
ANR	3078958	ElseStatement	else		3078693	0					
ANR	3078959	CompoundStatement		51:8:1336:1336	3078693	0					
ANR	3078960	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"" , ( unsigned long ) pid , pidFile )"	491:2:13069:13189	3078693	0	True				
ANR	3078961	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"" , ( unsigned long ) pid , pidFile )"		3078693	0					
ANR	3078962	Callee	fprintf		3078693	0					
ANR	3078963	Identifier	fprintf		3078693	0					
ANR	3078964	ArgumentList	stderr		3078693	1					
ANR	3078965	Argument	stderr		3078693	0					
ANR	3078966	Identifier	stderr		3078693	0					
ANR	3078967	Argument	"""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"""		3078693	1					
ANR	3078968	PrimaryExpression	"""DaemonCore: ERROR: pid (%lu) in pid file (%s) is invalid.\\n"""		3078693	0					
ANR	3078969	Argument	( unsigned long ) pid		3078693	2					
ANR	3078970	CastExpression	( unsigned long ) pid		3078693	0					
ANR	3078971	CastTarget	unsigned long		3078693	0					
ANR	3078972	Identifier	pid		3078693	1					
ANR	3078973	Argument	pidFile		3078693	3					
ANR	3078974	Identifier	pidFile		3078693	0					
ANR	3078975	ExpressionStatement	exit ( 1 )	494:2:13194:13203	3078693	1	True				
ANR	3078976	CallExpression	exit ( 1 )		3078693	0					
ANR	3078977	Callee	exit		3078693	0					
ANR	3078978	Identifier	exit		3078693	0					
ANR	3078979	ArgumentList	1		3078693	1					
ANR	3078980	Argument	1		3078693	0					
ANR	3078981	PrimaryExpression	1		3078693	0					
ANR	3078982	ReturnType	void		3078693	1					
ANR	3078983	Identifier	do_kill		3078693	2					
ANR	3078984	ParameterList			3078693	3					
ANR	3078985	CFGEntryNode	ENTRY		3078693		True				
ANR	3078986	CFGExitNode	EXIT		3078693		True				
ANR	3078987	Symbol	malloc		3078693						
ANR	3078988	Symbol	errno		3078693						
ANR	3078989	Symbol	log		3078693						
ANR	3078990	Symbol	pid		3078693						
ANR	3078991	Symbol	tmp_ul_int		3078693						
ANR	3078992	Symbol	stderr		3078693						
ANR	3078993	Symbol	kill		3078693						
ANR	3078994	Symbol	pidFile		3078693						
ANR	3078995	Symbol	strerror		3078693						
ANR	3078996	Symbol	strlen		3078693						
ANR	3078997	Symbol	& tmp_ul_int		3078693						
ANR	3078998	Symbol	param		3078693						
ANR	3078999	Symbol	tmp		3078693						
ANR	3079000	Symbol	* pidFile		3078693						
ANR	3079001	Symbol	PID_FILE		3078693						
ANR	3079002	Symbol	SIGTERM		3078693						
ANR	3079003	Symbol	safe_fopen_wrapper_follow		3078693						
ANR	3079004	Function	make_dir	501:0:13307:13833							
ANR	3079005	FunctionDef	make_dir (const char * logdir)		3079004	0					
ANR	3079006	CompoundStatement		503:0:13343:13833	3079004	0					
ANR	3079007	IdentifierDeclStatement	mode_t mode = S_IRWXU | S_IRWXG | S_IRWXO ;	504:1:13346:13387	3079004	0	True				
ANR	3079008	IdentifierDecl	mode = S_IRWXU | S_IRWXG | S_IRWXO		3079004	0					
ANR	3079009	IdentifierDeclType	mode_t		3079004	0					
ANR	3079010	Identifier	mode		3079004	1					
ANR	3079011	AssignmentExpression	mode = S_IRWXU | S_IRWXG | S_IRWXO		3079004	2		=			
ANR	3079012	Identifier	mode		3079004	0					
ANR	3079013	InclusiveOrExpression	S_IRWXU | S_IRWXG | S_IRWXO		3079004	1		|			
ANR	3079014	Identifier	S_IRWXU		3079004	0					
ANR	3079015	InclusiveOrExpression	S_IRWXG | S_IRWXO		3079004	1		|			
ANR	3079016	Identifier	S_IRWXG		3079004	0					
ANR	3079017	Identifier	S_IRWXO		3079004	1					
ANR	3079018	IdentifierDeclStatement	struct stat stats ;	505:1:13390:13407	3079004	1	True				
ANR	3079019	IdentifierDecl	stats		3079004	0					
ANR	3079020	IdentifierDeclType	struct stat		3079004	0					
ANR	3079021	Identifier	stats		3079004	1					
ANR	3079022	IfStatement	"if ( stat ( logdir , & stats ) >= 0 )"		3079004	2					
ANR	3079023	Condition	"stat ( logdir , & stats ) >= 0"	506:5:13414:13438	3079004	0	True				
ANR	3079024	RelationalExpression	"stat ( logdir , & stats ) >= 0"		3079004	0		>=			
ANR	3079025	CallExpression	"stat ( logdir , & stats )"		3079004	0					
ANR	3079026	Callee	stat		3079004	0					
ANR	3079027	Identifier	stat		3079004	0					
ANR	3079028	ArgumentList	logdir		3079004	1					
ANR	3079029	Argument	logdir		3079004	0					
ANR	3079030	Identifier	logdir		3079004	0					
ANR	3079031	Argument	& stats		3079004	1					
ANR	3079032	UnaryOperationExpression	& stats		3079004	0					
ANR	3079033	UnaryOperator	&		3079004	0					
ANR	3079034	Identifier	stats		3079004	1					
ANR	3079035	PrimaryExpression	0		3079004	1					
ANR	3079036	CompoundStatement		4:33:98:98	3079004	1					
ANR	3079037	IfStatement	if ( ! S_ISDIR ( stats . st_mode ) )		3079004	0					
ANR	3079038	Condition	! S_ISDIR ( stats . st_mode )	507:6:13450:13473	3079004	0	True				
ANR	3079039	UnaryOperationExpression	! S_ISDIR ( stats . st_mode )		3079004	0					
ANR	3079040	UnaryOperator	!		3079004	0					
ANR	3079041	CallExpression	S_ISDIR ( stats . st_mode )		3079004	1					
ANR	3079042	Callee	S_ISDIR		3079004	0					
ANR	3079043	Identifier	S_ISDIR		3079004	0					
ANR	3079044	ArgumentList	stats . st_mode		3079004	1					
ANR	3079045	Argument	stats . st_mode		3079004	0					
ANR	3079046	MemberAccess	stats . st_mode		3079004	0					
ANR	3079047	Identifier	stats		3079004	0					
ANR	3079048	Identifier	st_mode		3079004	1					
ANR	3079049	CompoundStatement		5:33:133:133	3079004	1					
ANR	3079050	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: %s exists and is not a directory.\\n"" , logdir )"	508:3:13482:13579	3079004	0	True				
ANR	3079051	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: %s exists and is not a directory.\\n"" , logdir )"		3079004	0					
ANR	3079052	Callee	fprintf		3079004	0					
ANR	3079053	Identifier	fprintf		3079004	0					
ANR	3079054	ArgumentList	stderr		3079004	1					
ANR	3079055	Argument	stderr		3079004	0					
ANR	3079056	Identifier	stderr		3079004	0					
ANR	3079057	Argument	"""DaemonCore: ERROR: %s exists and is not a directory.\\n"""		3079004	1					
ANR	3079058	PrimaryExpression	"""DaemonCore: ERROR: %s exists and is not a directory.\\n"""		3079004	0					
ANR	3079059	Argument	logdir		3079004	2					
ANR	3079060	Identifier	logdir		3079004	0					
ANR	3079061	ExpressionStatement	exit ( 1 )	511:3:13584:13593	3079004	1	True				
ANR	3079062	CallExpression	exit ( 1 )		3079004	0					
ANR	3079063	Callee	exit		3079004	0					
ANR	3079064	Identifier	exit		3079004	0					
ANR	3079065	ArgumentList	1		3079004	1					
ANR	3079066	Argument	1		3079004	0					
ANR	3079067	PrimaryExpression	1		3079004	0					
ANR	3079068	ElseStatement	else		3079004	0					
ANR	3079069	CompoundStatement		11:8:263:263	3079004	0					
ANR	3079070	IfStatement	"if ( mkdir ( logdir , mode ) < 0 )"		3079004	0					
ANR	3079071	Condition	"mkdir ( logdir , mode ) < 0"	514:6:13615:13637	3079004	0	True				
ANR	3079072	RelationalExpression	"mkdir ( logdir , mode ) < 0"		3079004	0		<			
ANR	3079073	CallExpression	"mkdir ( logdir , mode )"		3079004	0					
ANR	3079074	Callee	mkdir		3079004	0					
ANR	3079075	Identifier	mkdir		3079004	0					
ANR	3079076	ArgumentList	logdir		3079004	1					
ANR	3079077	Argument	logdir		3079004	0					
ANR	3079078	Identifier	logdir		3079004	0					
ANR	3079079	Argument	mode		3079004	1					
ANR	3079080	Identifier	mode		3079004	0					
ANR	3079081	PrimaryExpression	0		3079004	1					
ANR	3079082	CompoundStatement		12:32:297:297	3079004	1					
ANR	3079083	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: can't create directory %s\\n"" , logdir )"	515:3:13646:13735	3079004	0	True				
ANR	3079084	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: can't create directory %s\\n"" , logdir )"		3079004	0					
ANR	3079085	Callee	fprintf		3079004	0					
ANR	3079086	Identifier	fprintf		3079004	0					
ANR	3079087	ArgumentList	stderr		3079004	1					
ANR	3079088	Argument	stderr		3079004	0					
ANR	3079089	Identifier	stderr		3079004	0					
ANR	3079090	Argument	"""DaemonCore: ERROR: can't create directory %s\\n"""		3079004	1					
ANR	3079091	PrimaryExpression	"""DaemonCore: ERROR: can't create directory %s\\n"""		3079004	0					
ANR	3079092	Argument	logdir		3079004	2					
ANR	3079093	Identifier	logdir		3079004	0					
ANR	3079094	ExpressionStatement	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"	518:3:13740:13810	3079004	1	True				
ANR	3079095	CallExpression	"fprintf ( stderr , ""\\terrno: %d (%s)\\n"" , errno , strerror ( errno ) )"		3079004	0					
ANR	3079096	Callee	fprintf		3079004	0					
ANR	3079097	Identifier	fprintf		3079004	0					
ANR	3079098	ArgumentList	stderr		3079004	1					
ANR	3079099	Argument	stderr		3079004	0					
ANR	3079100	Identifier	stderr		3079004	0					
ANR	3079101	Argument	"""\\terrno: %d (%s)\\n"""		3079004	1					
ANR	3079102	PrimaryExpression	"""\\terrno: %d (%s)\\n"""		3079004	0					
ANR	3079103	Argument	errno		3079004	2					
ANR	3079104	Identifier	errno		3079004	0					
ANR	3079105	Argument	strerror ( errno )		3079004	3					
ANR	3079106	CallExpression	strerror ( errno )		3079004	0					
ANR	3079107	Callee	strerror		3079004	0					
ANR	3079108	Identifier	strerror		3079004	0					
ANR	3079109	ArgumentList	errno		3079004	1					
ANR	3079110	Argument	errno		3079004	0					
ANR	3079111	Identifier	errno		3079004	0					
ANR	3079112	ExpressionStatement	exit ( 1 )	520:3:13815:13824	3079004	2	True				
ANR	3079113	CallExpression	exit ( 1 )		3079004	0					
ANR	3079114	Callee	exit		3079004	0					
ANR	3079115	Identifier	exit		3079004	0					
ANR	3079116	ArgumentList	1		3079004	1					
ANR	3079117	Argument	1		3079004	0					
ANR	3079118	PrimaryExpression	1		3079004	0					
ANR	3079119	ReturnType	void		3079004	1					
ANR	3079120	Identifier	make_dir		3079004	2					
ANR	3079121	ParameterList	const char * logdir		3079004	3					
ANR	3079122	Parameter	const char * logdir	502:10:13322:13339	3079004	0	True				
ANR	3079123	ParameterType	const char *		3079004	0					
ANR	3079124	Identifier	logdir		3079004	1					
ANR	3079125	CFGEntryNode	ENTRY		3079004		True				
ANR	3079126	CFGExitNode	EXIT		3079004		True				
ANR	3079127	Symbol	stat		3079004						
ANR	3079128	Symbol	errno		3079004						
ANR	3079129	Symbol	stderr		3079004						
ANR	3079130	Symbol	mode		3079004						
ANR	3079131	Symbol	strerror		3079004						
ANR	3079132	Symbol	S_IRWXU		3079004						
ANR	3079133	Symbol	stats . st_mode		3079004						
ANR	3079134	Symbol	S_IRWXO		3079004						
ANR	3079135	Symbol	stats		3079004						
ANR	3079136	Symbol	& stats		3079004						
ANR	3079137	Symbol	S_ISDIR		3079004						
ANR	3079138	Symbol	S_IRWXG		3079004						
ANR	3079139	Symbol	mkdir		3079004						
ANR	3079140	Symbol	logdir		3079004						
ANR	3079141	Function	set_log_dir	527:0:13903:14008							
ANR	3079142	FunctionDef	set_log_dir ()		3079141	0					
ANR	3079143	CompoundStatement		529:0:13922:14008	3079141	0					
ANR	3079144	IfStatement	if ( ! logDir )		3079141	0					
ANR	3079145	Condition	! logDir	530:5:13929:13935	3079141	0	True				
ANR	3079146	UnaryOperationExpression	! logDir		3079141	0					
ANR	3079147	UnaryOperator	!		3079141	0					
ANR	3079148	Identifier	logDir		3079141	1					
ANR	3079149	CompoundStatement		2:15:16:16	3079141	1					
ANR	3079150	ReturnStatement	return ;	531:2:13943:13949	3079141	0	True				
ANR	3079151	ExpressionStatement	"config_insert ( ""LOG"" , logDir )"	533:1:13955:13985	3079141	1	True				
ANR	3079152	CallExpression	"config_insert ( ""LOG"" , logDir )"		3079141	0					
ANR	3079153	Callee	config_insert		3079141	0					
ANR	3079154	Identifier	config_insert		3079141	0					
ANR	3079155	ArgumentList	"""LOG"""		3079141	1					
ANR	3079156	Argument	"""LOG"""		3079141	0					
ANR	3079157	PrimaryExpression	"""LOG"""		3079141	0					
ANR	3079158	Argument	logDir		3079141	1					
ANR	3079159	Identifier	logDir		3079141	0					
ANR	3079160	ExpressionStatement	make_dir ( logDir )	534:1:13988:14006	3079141	2	True				
ANR	3079161	CallExpression	make_dir ( logDir )		3079141	0					
ANR	3079162	Callee	make_dir		3079141	0					
ANR	3079163	Identifier	make_dir		3079141	0					
ANR	3079164	ArgumentList	logDir		3079141	1					
ANR	3079165	Argument	logDir		3079141	0					
ANR	3079166	Identifier	logDir		3079141	0					
ANR	3079167	ReturnType	void		3079141	1					
ANR	3079168	Identifier	set_log_dir		3079141	2					
ANR	3079169	ParameterList			3079141	3					
ANR	3079170	CFGEntryNode	ENTRY		3079141		True				
ANR	3079171	CFGExitNode	EXIT		3079141		True				
ANR	3079172	Symbol	logDir		3079141						
ANR	3079173	Function	handle_log_append	538:0:14012:14497							
ANR	3079174	FunctionDef	handle_log_append (char * append_str)		3079173	0					
ANR	3079175	CompoundStatement		540:0:14055:14497	3079173	0					
ANR	3079176	IfStatement	if ( ! append_str )		3079173	0					
ANR	3079177	Condition	! append_str	541:5:14062:14073	3079173	0	True				
ANR	3079178	UnaryOperationExpression	! append_str		3079173	0					
ANR	3079179	UnaryOperator	!		3079173	0					
ANR	3079180	Identifier	append_str		3079173	1					
ANR	3079181	CompoundStatement		2:20:21:21	3079173	1					
ANR	3079182	ReturnStatement	return ;	542:2:14081:14087	3079173	0	True				
ANR	3079183	IdentifierDeclStatement	"char * tmp1 , * tmp2 ;"	544:1:14093:14110	3079173	1	True				
ANR	3079184	IdentifierDecl	* tmp1		3079173	0					
ANR	3079185	IdentifierDeclType	char *		3079173	0					
ANR	3079186	Identifier	tmp1		3079173	1					
ANR	3079187	IdentifierDecl	* tmp2		3079173	1					
ANR	3079188	IdentifierDeclType	char *		3079173	0					
ANR	3079189	Identifier	tmp2		3079173	1					
ANR	3079190	IdentifierDeclStatement	char buf [ 100 ] ;	545:1:14113:14126	3079173	2	True				
ANR	3079191	IdentifierDecl	buf [ 100 ]		3079173	0					
ANR	3079192	IdentifierDeclType	char [ 100 ]		3079173	0					
ANR	3079193	Identifier	buf		3079173	1					
ANR	3079194	PrimaryExpression	100		3079173	2					
ANR	3079195	ExpressionStatement	"sprintf ( buf , ""%s_LOG"" , get_mySubSystem ( ) -> getName ( ) )"	546:1:14129:14183	3079173	3	True				
ANR	3079196	CallExpression	"sprintf ( buf , ""%s_LOG"" , get_mySubSystem ( ) -> getName ( ) )"		3079173	0					
ANR	3079197	Callee	sprintf		3079173	0					
ANR	3079198	Identifier	sprintf		3079173	0					
ANR	3079199	ArgumentList	buf		3079173	1					
ANR	3079200	Argument	buf		3079173	0					
ANR	3079201	Identifier	buf		3079173	0					
ANR	3079202	Argument	"""%s_LOG"""		3079173	1					
ANR	3079203	PrimaryExpression	"""%s_LOG"""		3079173	0					
ANR	3079204	Argument	get_mySubSystem ( ) -> getName ( )		3079173	2					
ANR	3079205	CallExpression	get_mySubSystem ( ) -> getName ( )		3079173	0					
ANR	3079206	Callee	get_mySubSystem ( ) -> getName		3079173	0					
ANR	3079207	PtrMemberAccess	get_mySubSystem ( ) -> getName		3079173	0					
ANR	3079208	CallExpression	get_mySubSystem ( )		3079173	0					
ANR	3079209	Callee	get_mySubSystem		3079173	0					
ANR	3079210	Identifier	get_mySubSystem		3079173	0					
ANR	3079211	ArgumentList			3079173	1					
ANR	3079212	Identifier	getName		3079173	1					
ANR	3079213	ArgumentList			3079173	1					
ANR	3079214	IfStatement	if ( ! ( tmp1 = param ( buf ) ) )		3079173	4					
ANR	3079215	Condition	! ( tmp1 = param ( buf ) )	547:5:14190:14209	3079173	0	True				
ANR	3079216	UnaryOperationExpression	! ( tmp1 = param ( buf ) )		3079173	0					
ANR	3079217	UnaryOperator	!		3079173	0					
ANR	3079218	AssignmentExpression	tmp1 = param ( buf )		3079173	1		=			
ANR	3079219	Identifier	tmp1		3079173	0					
ANR	3079220	CallExpression	param ( buf )		3079173	1					
ANR	3079221	Callee	param		3079173	0					
ANR	3079222	Identifier	param		3079173	0					
ANR	3079223	ArgumentList	buf		3079173	1					
ANR	3079224	Argument	buf		3079173	0					
ANR	3079225	Identifier	buf		3079173	0					
ANR	3079226	CompoundStatement		8:28:157:157	3079173	1					
ANR	3079227	ExpressionStatement	"EXCEPT ( ""%s not defined!"" , buf )"	548:2:14218:14250	3079173	0	True				
ANR	3079228	CallExpression	"EXCEPT ( ""%s not defined!"" , buf )"		3079173	0					
ANR	3079229	Callee	EXCEPT		3079173	0					
ANR	3079230	Identifier	EXCEPT		3079173	0					
ANR	3079231	ArgumentList	"""%s not defined!"""		3079173	1					
ANR	3079232	Argument	"""%s not defined!"""		3079173	0					
ANR	3079233	PrimaryExpression	"""%s not defined!"""		3079173	0					
ANR	3079234	Argument	buf		3079173	1					
ANR	3079235	Identifier	buf		3079173	0					
ANR	3079236	ExpressionStatement	tmp2 = ( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )	550:1:14256:14342	3079173	5	True				
ANR	3079237	AssignmentExpression	tmp2 = ( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		3079173	0		=			
ANR	3079238	Identifier	tmp2		3079173	0					
ANR	3079239	CastExpression	( char * ) malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		3079173	1					
ANR	3079240	CastTarget	char *		3079173	0					
ANR	3079241	CallExpression	malloc ( ( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char ) )		3079173	1					
ANR	3079242	Callee	malloc		3079173	0					
ANR	3079243	Identifier	malloc		3079173	0					
ANR	3079244	ArgumentList	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		3079173	1					
ANR	3079245	Argument	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		3079173	0					
ANR	3079246	MultiplicativeExpression	( strlen ( tmp1 ) + strlen ( append_str ) + 2 ) * sizeof ( char )		3079173	0		*			
ANR	3079247	AdditiveExpression	strlen ( tmp1 ) + strlen ( append_str ) + 2		3079173	0		+			
ANR	3079248	CallExpression	strlen ( tmp1 )		3079173	0					
ANR	3079249	Callee	strlen		3079173	0					
ANR	3079250	Identifier	strlen		3079173	0					
ANR	3079251	ArgumentList	tmp1		3079173	1					
ANR	3079252	Argument	tmp1		3079173	0					
ANR	3079253	Identifier	tmp1		3079173	0					
ANR	3079254	AdditiveExpression	strlen ( append_str ) + 2		3079173	1		+			
ANR	3079255	CallExpression	strlen ( append_str )		3079173	0					
ANR	3079256	Callee	strlen		3079173	0					
ANR	3079257	Identifier	strlen		3079173	0					
ANR	3079258	ArgumentList	append_str		3079173	1					
ANR	3079259	Argument	append_str		3079173	0					
ANR	3079260	Identifier	append_str		3079173	0					
ANR	3079261	PrimaryExpression	2		3079173	1					
ANR	3079262	SizeofExpression	sizeof ( char )		3079173	1					
ANR	3079263	Sizeof	sizeof		3079173	0					
ANR	3079264	SizeofOperand	char		3079173	1					
ANR	3079265	IfStatement	if ( ! tmp2 )		3079173	6					
ANR	3079266	Condition	! tmp2	552:5:14349:14353	3079173	0	True				
ANR	3079267	UnaryOperationExpression	! tmp2		3079173	0					
ANR	3079268	UnaryOperator	!		3079173	0					
ANR	3079269	Identifier	tmp2		3079173	1					
ANR	3079270	CompoundStatement		13:13:301:301	3079173	1					
ANR	3079271	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	553:2:14362:14388	3079173	0	True				
ANR	3079272	CallExpression	"EXCEPT ( ""Out of memory!"" )"		3079173	0					
ANR	3079273	Callee	EXCEPT		3079173	0					
ANR	3079274	Identifier	EXCEPT		3079173	0					
ANR	3079275	ArgumentList	"""Out of memory!"""		3079173	1					
ANR	3079276	Argument	"""Out of memory!"""		3079173	0					
ANR	3079277	PrimaryExpression	"""Out of memory!"""		3079173	0					
ANR	3079278	ExpressionStatement	"sprintf ( tmp2 , ""%s.%s"" , tmp1 , append_str )"	555:1:14394:14436	3079173	7	True				
ANR	3079279	CallExpression	"sprintf ( tmp2 , ""%s.%s"" , tmp1 , append_str )"		3079173	0					
ANR	3079280	Callee	sprintf		3079173	0					
ANR	3079281	Identifier	sprintf		3079173	0					
ANR	3079282	ArgumentList	tmp2		3079173	1					
ANR	3079283	Argument	tmp2		3079173	0					
ANR	3079284	Identifier	tmp2		3079173	0					
ANR	3079285	Argument	"""%s.%s"""		3079173	1					
ANR	3079286	PrimaryExpression	"""%s.%s"""		3079173	0					
ANR	3079287	Argument	tmp1		3079173	2					
ANR	3079288	Identifier	tmp1		3079173	0					
ANR	3079289	Argument	append_str		3079173	3					
ANR	3079290	Identifier	append_str		3079173	0					
ANR	3079291	ExpressionStatement	"config_insert ( buf , tmp2 )"	556:1:14439:14465	3079173	8	True				
ANR	3079292	CallExpression	"config_insert ( buf , tmp2 )"		3079173	0					
ANR	3079293	Callee	config_insert		3079173	0					
ANR	3079294	Identifier	config_insert		3079173	0					
ANR	3079295	ArgumentList	buf		3079173	1					
ANR	3079296	Argument	buf		3079173	0					
ANR	3079297	Identifier	buf		3079173	0					
ANR	3079298	Argument	tmp2		3079173	1					
ANR	3079299	Identifier	tmp2		3079173	0					
ANR	3079300	ExpressionStatement	free ( tmp1 )	557:1:14468:14480	3079173	9	True				
ANR	3079301	CallExpression	free ( tmp1 )		3079173	0					
ANR	3079302	Callee	free		3079173	0					
ANR	3079303	Identifier	free		3079173	0					
ANR	3079304	ArgumentList	tmp1		3079173	1					
ANR	3079305	Argument	tmp1		3079173	0					
ANR	3079306	Identifier	tmp1		3079173	0					
ANR	3079307	ExpressionStatement	free ( tmp2 )	558:1:14483:14495	3079173	10	True				
ANR	3079308	CallExpression	free ( tmp2 )		3079173	0					
ANR	3079309	Callee	free		3079173	0					
ANR	3079310	Identifier	free		3079173	0					
ANR	3079311	ArgumentList	tmp2		3079173	1					
ANR	3079312	Argument	tmp2		3079173	0					
ANR	3079313	Identifier	tmp2		3079173	0					
ANR	3079314	ReturnType	void		3079173	1					
ANR	3079315	Identifier	handle_log_append		3079173	2					
ANR	3079316	ParameterList	char * append_str		3079173	3					
ANR	3079317	Parameter	char * append_str	539:19:14036:14051	3079173	0	True				
ANR	3079318	ParameterType	char *		3079173	0					
ANR	3079319	Identifier	append_str		3079173	1					
ANR	3079320	CFGEntryNode	ENTRY		3079173		True				
ANR	3079321	CFGExitNode	EXIT		3079173		True				
ANR	3079322	Symbol	strlen		3079173						
ANR	3079323	Symbol	malloc		3079173						
ANR	3079324	Symbol	buf		3079173						
ANR	3079325	Symbol	get_mySubSystem ( ) -> getName		3079173						
ANR	3079326	Symbol	* get_mySubSystem		3079173						
ANR	3079327	Symbol	param		3079173						
ANR	3079328	Symbol	append_str		3079173						
ANR	3079329	Symbol	tmp1		3079173						
ANR	3079330	Symbol	tmp2		3079173						
ANR	3079331	Symbol	get_mySubSystem		3079173						
ANR	3079332	Function	dc_touch_log_file	562:0:14501:14670							
ANR	3079333	FunctionDef	dc_touch_log_file ()		3079332	0					
ANR	3079334	CompoundStatement		564:0:14527:14670	3079332	0					
ANR	3079335	ExpressionStatement	dprintf_touch_log ( )	565:1:14530:14549	3079332	0	True				
ANR	3079336	CallExpression	dprintf_touch_log ( )		3079332	0					
ANR	3079337	Callee	dprintf_touch_log		3079332	0					
ANR	3079338	Identifier	dprintf_touch_log		3079332	0					
ANR	3079339	ArgumentList			3079332	1					
ANR	3079340	ExpressionStatement	"daemonCore -> Register_Timer ( param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 ) , dc_touch_log_file , ""dc_touch_log_file"" )"	567:1:14553:14668	3079332	1	True				
ANR	3079341	CallExpression	"daemonCore -> Register_Timer ( param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 ) , dc_touch_log_file , ""dc_touch_log_file"" )"		3079332	0					
ANR	3079342	Callee	daemonCore -> Register_Timer		3079332	0					
ANR	3079343	PtrMemberAccess	daemonCore -> Register_Timer		3079332	0					
ANR	3079344	Identifier	daemonCore		3079332	0					
ANR	3079345	Identifier	Register_Timer		3079332	1					
ANR	3079346	ArgumentList	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		3079332	1					
ANR	3079347	Argument	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		3079332	0					
ANR	3079348	CallExpression	"param_integer ( ""TOUCH_LOG_INTERVAL"" , 60 )"		3079332	0					
ANR	3079349	Callee	param_integer		3079332	0					
ANR	3079350	Identifier	param_integer		3079332	0					
ANR	3079351	ArgumentList	"""TOUCH_LOG_INTERVAL"""		3079332	1					
ANR	3079352	Argument	"""TOUCH_LOG_INTERVAL"""		3079332	0					
ANR	3079353	PrimaryExpression	"""TOUCH_LOG_INTERVAL"""		3079332	0					
ANR	3079354	Argument	60		3079332	1					
ANR	3079355	PrimaryExpression	60		3079332	0					
ANR	3079356	Argument	dc_touch_log_file		3079332	1					
ANR	3079357	Identifier	dc_touch_log_file		3079332	0					
ANR	3079358	Argument	"""dc_touch_log_file"""		3079332	2					
ANR	3079359	PrimaryExpression	"""dc_touch_log_file"""		3079332	0					
ANR	3079360	ReturnType	void		3079332	1					
ANR	3079361	Identifier	dc_touch_log_file		3079332	2					
ANR	3079362	ParameterList			3079332	3					
ANR	3079363	CFGEntryNode	ENTRY		3079332		True				
ANR	3079364	CFGExitNode	EXIT		3079332		True				
ANR	3079365	Symbol	daemonCore		3079332						
ANR	3079366	Symbol	param_integer		3079332						
ANR	3079367	Symbol	dc_touch_log_file		3079332						
ANR	3079368	Function	dc_touch_lock_files	571:0:14673:15391							
ANR	3079369	FunctionDef	dc_touch_lock_files ()		3079368	0					
ANR	3079370	CompoundStatement		573:0:14701:15391	3079368	0					
ANR	3079371	IdentifierDeclStatement	priv_state p ;	574:1:14704:14716	3079368	0	True				
ANR	3079372	IdentifierDecl	p		3079368	0					
ANR	3079373	IdentifierDeclType	priv_state		3079368	0					
ANR	3079374	Identifier	p		3079368	1					
ANR	3079375	ExpressionStatement	p = set_condor_priv ( )	583:1:15111:15132	3079368	1	True				
ANR	3079376	AssignmentExpression	p = set_condor_priv ( )		3079368	0		=			
ANR	3079377	Identifier	p		3079368	0					
ANR	3079378	CallExpression	set_condor_priv ( )		3079368	1					
ANR	3079379	Callee	set_condor_priv		3079368	0					
ANR	3079380	Identifier	set_condor_priv		3079368	0					
ANR	3079381	ArgumentList			3079368	1					
ANR	3079382	ExpressionStatement	FileLock :: updateAllLockTimestamps ( )	585:1:15136:15171	3079368	2	True				
ANR	3079383	CallExpression	FileLock :: updateAllLockTimestamps ( )		3079368	0					
ANR	3079384	Callee	FileLock :: updateAllLockTimestamps		3079368	0					
ANR	3079385	Identifier	FileLock :: updateAllLockTimestamps		3079368	0					
ANR	3079386	ArgumentList			3079368	1					
ANR	3079387	ExpressionStatement	set_priv ( p )	587:1:15175:15186	3079368	3	True				
ANR	3079388	CallExpression	set_priv ( p )		3079368	0					
ANR	3079389	Callee	set_priv		3079368	0					
ANR	3079390	Identifier	set_priv		3079368	0					
ANR	3079391	ArgumentList	p		3079368	1					
ANR	3079392	Argument	p		3079368	0					
ANR	3079393	Identifier	p		3079368	0					
ANR	3079394	ExpressionStatement	"daemonCore -> Register_Timer ( param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX ) , dc_touch_lock_files , ""dc_touch_lock_files"" )"	590:1:15246:15389	3079368	4	True				
ANR	3079395	CallExpression	"daemonCore -> Register_Timer ( param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX ) , dc_touch_lock_files , ""dc_touch_lock_files"" )"		3079368	0					
ANR	3079396	Callee	daemonCore -> Register_Timer		3079368	0					
ANR	3079397	PtrMemberAccess	daemonCore -> Register_Timer		3079368	0					
ANR	3079398	Identifier	daemonCore		3079368	0					
ANR	3079399	Identifier	Register_Timer		3079368	1					
ANR	3079400	ArgumentList	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		3079368	1					
ANR	3079401	Argument	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		3079368	0					
ANR	3079402	CallExpression	"param_integer ( ""LOCK_FILE_UPDATE_INTERVAL"" , 3600 * 8 , 60 , INT_MAX )"		3079368	0					
ANR	3079403	Callee	param_integer		3079368	0					
ANR	3079404	Identifier	param_integer		3079368	0					
ANR	3079405	ArgumentList	"""LOCK_FILE_UPDATE_INTERVAL"""		3079368	1					
ANR	3079406	Argument	"""LOCK_FILE_UPDATE_INTERVAL"""		3079368	0					
ANR	3079407	PrimaryExpression	"""LOCK_FILE_UPDATE_INTERVAL"""		3079368	0					
ANR	3079408	Argument	3600 * 8		3079368	1					
ANR	3079409	MultiplicativeExpression	3600 * 8		3079368	0		*			
ANR	3079410	PrimaryExpression	3600		3079368	0					
ANR	3079411	PrimaryExpression	8		3079368	1					
ANR	3079412	Argument	60		3079368	2					
ANR	3079413	PrimaryExpression	60		3079368	0					
ANR	3079414	Argument	INT_MAX		3079368	3					
ANR	3079415	Identifier	INT_MAX		3079368	0					
ANR	3079416	Argument	dc_touch_lock_files		3079368	1					
ANR	3079417	Identifier	dc_touch_lock_files		3079368	0					
ANR	3079418	Argument	"""dc_touch_lock_files"""		3079368	2					
ANR	3079419	PrimaryExpression	"""dc_touch_lock_files"""		3079368	0					
ANR	3079420	ReturnType	void		3079368	1					
ANR	3079421	Identifier	dc_touch_lock_files		3079368	2					
ANR	3079422	ParameterList			3079368	3					
ANR	3079423	CFGEntryNode	ENTRY		3079368		True				
ANR	3079424	CFGExitNode	EXIT		3079368		True				
ANR	3079425	Symbol	p		3079368						
ANR	3079426	Symbol	set_condor_priv		3079368						
ANR	3079427	Symbol	dc_touch_lock_files		3079368						
ANR	3079428	Symbol	daemonCore		3079368						
ANR	3079429	Symbol	INT_MAX		3079368						
ANR	3079430	Symbol	param_integer		3079368						
ANR	3079431	Function	set_dynamic_dir	596:0:15395:16327							
ANR	3079432	FunctionDef	"set_dynamic_dir (const char * param_name , const char * append_str)"		3079431	0					
ANR	3079433	CompoundStatement		598:0:15466:16327	3079431	0					
ANR	3079434	IdentifierDeclStatement	char * val ;	599:1:15469:15478	3079431	0	True				
ANR	3079435	IdentifierDecl	* val		3079431	0					
ANR	3079436	IdentifierDeclType	char *		3079431	0					
ANR	3079437	Identifier	val		3079431	1					
ANR	3079438	IdentifierDeclStatement	MyString newdir ;	600:1:15481:15496	3079431	1	True				
ANR	3079439	IdentifierDecl	newdir		3079431	0					
ANR	3079440	IdentifierDeclType	MyString		3079431	0					
ANR	3079441	Identifier	newdir		3079431	1					
ANR	3079442	ExpressionStatement	val = param ( param_name )	602:1:15500:15525	3079431	2	True				
ANR	3079443	AssignmentExpression	val = param ( param_name )		3079431	0		=			
ANR	3079444	Identifier	val		3079431	0					
ANR	3079445	CallExpression	param ( param_name )		3079431	1					
ANR	3079446	Callee	param		3079431	0					
ANR	3079447	Identifier	param		3079431	0					
ANR	3079448	ArgumentList	param_name		3079431	1					
ANR	3079449	Argument	param_name		3079431	0					
ANR	3079450	Identifier	param_name		3079431	0					
ANR	3079451	IfStatement	if ( ! val )		3079431	3					
ANR	3079452	Condition	! val	603:5:15532:15536	3079431	0	True				
ANR	3079453	UnaryOperationExpression	! val		3079431	0					
ANR	3079454	UnaryOperator	!		3079431	0					
ANR	3079455	Identifier	val		3079431	1					
ANR	3079456	CompoundStatement		6:13:73:73	3079431	1					
ANR	3079457	ReturnStatement	return ;	605:2:15564:15570	3079431	0	True				
ANR	3079458	ExpressionStatement	"newdir . sprintf ( ""%s.%s"" , val , append_str )"	609:1:15610:15652	3079431	4	True				
ANR	3079459	CallExpression	"newdir . sprintf ( ""%s.%s"" , val , append_str )"		3079431	0					
ANR	3079460	Callee	newdir . sprintf		3079431	0					
ANR	3079461	MemberAccess	newdir . sprintf		3079431	0					
ANR	3079462	Identifier	newdir		3079431	0					
ANR	3079463	Identifier	sprintf		3079431	1					
ANR	3079464	ArgumentList	"""%s.%s"""		3079431	1					
ANR	3079465	Argument	"""%s.%s"""		3079431	0					
ANR	3079466	PrimaryExpression	"""%s.%s"""		3079431	0					
ANR	3079467	Argument	val		3079431	1					
ANR	3079468	Identifier	val		3079431	0					
ANR	3079469	Argument	append_str		3079431	2					
ANR	3079470	Identifier	append_str		3079431	0					
ANR	3079471	ExpressionStatement	make_dir ( newdir . Value ( ) )	613:1:15737:15763	3079431	5	True				
ANR	3079472	CallExpression	make_dir ( newdir . Value ( ) )		3079431	0					
ANR	3079473	Callee	make_dir		3079431	0					
ANR	3079474	Identifier	make_dir		3079431	0					
ANR	3079475	ArgumentList	newdir . Value ( )		3079431	1					
ANR	3079476	Argument	newdir . Value ( )		3079431	0					
ANR	3079477	CallExpression	newdir . Value ( )		3079431	0					
ANR	3079478	Callee	newdir . Value		3079431	0					
ANR	3079479	MemberAccess	newdir . Value		3079431	0					
ANR	3079480	Identifier	newdir		3079431	0					
ANR	3079481	Identifier	Value		3079431	1					
ANR	3079482	ArgumentList			3079431	1					
ANR	3079483	ExpressionStatement	"config_insert ( param_name , newdir . Value ( ) )"	617:1:15855:15898	3079431	6	True				
ANR	3079484	CallExpression	"config_insert ( param_name , newdir . Value ( ) )"		3079431	0					
ANR	3079485	Callee	config_insert		3079431	0					
ANR	3079486	Identifier	config_insert		3079431	0					
ANR	3079487	ArgumentList	param_name		3079431	1					
ANR	3079488	Argument	param_name		3079431	0					
ANR	3079489	Identifier	param_name		3079431	0					
ANR	3079490	Argument	newdir . Value ( )		3079431	1					
ANR	3079491	CallExpression	newdir . Value ( )		3079431	0					
ANR	3079492	Callee	newdir . Value		3079431	0					
ANR	3079493	MemberAccess	newdir . Value		3079431	0					
ANR	3079494	Identifier	newdir		3079431	0					
ANR	3079495	Identifier	Value		3079431	1					
ANR	3079496	ArgumentList			3079431	1					
ANR	3079497	IdentifierDeclStatement	"MyString env_str ( ""_"" ) ;"	621:1:16018:16041	3079431	7	True				
ANR	3079498	IdentifierDecl	"env_str ( ""_"" )"		3079431	0					
ANR	3079499	IdentifierDeclType	MyString		3079431	0					
ANR	3079500	Identifier	env_str		3079431	1					
ANR	3079501	PrimaryExpression	"""_"""		3079431	2					
ANR	3079502	ExpressionStatement	env_str += myDistro -> Get ( )	622:1:16044:16070	3079431	8	True				
ANR	3079503	AssignmentExpression	env_str += myDistro -> Get ( )		3079431	0		+=			
ANR	3079504	Identifier	env_str		3079431	0					
ANR	3079505	CallExpression	myDistro -> Get ( )		3079431	1					
ANR	3079506	Callee	myDistro -> Get		3079431	0					
ANR	3079507	PtrMemberAccess	myDistro -> Get		3079431	0					
ANR	3079508	Identifier	myDistro		3079431	0					
ANR	3079509	Identifier	Get		3079431	1					
ANR	3079510	ArgumentList			3079431	1					
ANR	3079511	ExpressionStatement	"env_str += ""_"""	623:1:16073:16087	3079431	9	True				
ANR	3079512	AssignmentExpression	"env_str += ""_"""		3079431	0		+=			
ANR	3079513	Identifier	env_str		3079431	0					
ANR	3079514	PrimaryExpression	"""_"""		3079431	1					
ANR	3079515	ExpressionStatement	env_str += param_name	624:1:16090:16111	3079431	10	True				
ANR	3079516	AssignmentExpression	env_str += param_name		3079431	0		+=			
ANR	3079517	Identifier	env_str		3079431	0					
ANR	3079518	Identifier	param_name		3079431	1					
ANR	3079519	ExpressionStatement	"env_str += ""="""	625:1:16114:16128	3079431	11	True				
ANR	3079520	AssignmentExpression	"env_str += ""="""		3079431	0		+=			
ANR	3079521	Identifier	env_str		3079431	0					
ANR	3079522	PrimaryExpression	"""="""		3079431	1					
ANR	3079523	ExpressionStatement	env_str += newdir	626:1:16131:16148	3079431	12	True				
ANR	3079524	AssignmentExpression	env_str += newdir		3079431	0		+=			
ANR	3079525	Identifier	env_str		3079431	0					
ANR	3079526	Identifier	newdir		3079431	1					
ANR	3079527	IdentifierDeclStatement	char * env_cstr = strdup ( env_str . Value ( ) ) ;	627:1:16151:16193	3079431	13	True				
ANR	3079528	IdentifierDecl	* env_cstr = strdup ( env_str . Value ( ) )		3079431	0					
ANR	3079529	IdentifierDeclType	char *		3079431	0					
ANR	3079530	Identifier	env_cstr		3079431	1					
ANR	3079531	AssignmentExpression	* env_cstr = strdup ( env_str . Value ( ) )		3079431	2		=			
ANR	3079532	Identifier	env_cstr		3079431	0					
ANR	3079533	CallExpression	strdup ( env_str . Value ( ) )		3079431	1					
ANR	3079534	Callee	strdup		3079431	0					
ANR	3079535	Identifier	strdup		3079431	0					
ANR	3079536	ArgumentList	env_str . Value ( )		3079431	1					
ANR	3079537	Argument	env_str . Value ( )		3079431	0					
ANR	3079538	CallExpression	env_str . Value ( )		3079431	0					
ANR	3079539	Callee	env_str . Value		3079431	0					
ANR	3079540	MemberAccess	env_str . Value		3079431	0					
ANR	3079541	Identifier	env_str		3079431	0					
ANR	3079542	Identifier	Value		3079431	1					
ANR	3079543	ArgumentList			3079431	1					
ANR	3079544	IfStatement	if ( SetEnv ( env_cstr ) != TRUE )		3079431	14					
ANR	3079545	Condition	SetEnv ( env_cstr ) != TRUE	628:5:16200:16223	3079431	0	True				
ANR	3079546	EqualityExpression	SetEnv ( env_cstr ) != TRUE		3079431	0		!=			
ANR	3079547	CallExpression	SetEnv ( env_cstr )		3079431	0					
ANR	3079548	Callee	SetEnv		3079431	0					
ANR	3079549	Identifier	SetEnv		3079431	0					
ANR	3079550	ArgumentList	env_cstr		3079431	1					
ANR	3079551	Argument	env_cstr		3079431	0					
ANR	3079552	Identifier	env_cstr		3079431	0					
ANR	3079553	Identifier	TRUE		3079431	1					
ANR	3079554	CompoundStatement		31:32:760:760	3079431	1					
ANR	3079555	ExpressionStatement	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_cstr )"	629:2:16231:16309	3079431	0	True				
ANR	3079556	CallExpression	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_cstr )"		3079431	0					
ANR	3079557	Callee	fprintf		3079431	0					
ANR	3079558	Identifier	fprintf		3079431	0					
ANR	3079559	ArgumentList	stderr		3079431	1					
ANR	3079560	Argument	stderr		3079431	0					
ANR	3079561	Identifier	stderr		3079431	0					
ANR	3079562	Argument	"""ERROR: Can't add %s to the environment!\\n"""		3079431	1					
ANR	3079563	PrimaryExpression	"""ERROR: Can't add %s to the environment!\\n"""		3079431	0					
ANR	3079564	Argument	env_cstr		3079431	2					
ANR	3079565	Identifier	env_cstr		3079431	0					
ANR	3079566	ExpressionStatement	exit ( 4 )	631:2:16313:16322	3079431	1	True				
ANR	3079567	CallExpression	exit ( 4 )		3079431	0					
ANR	3079568	Callee	exit		3079431	0					
ANR	3079569	Identifier	exit		3079431	0					
ANR	3079570	ArgumentList	4		3079431	1					
ANR	3079571	Argument	4		3079431	0					
ANR	3079572	PrimaryExpression	4		3079431	0					
ANR	3079573	ReturnType	void		3079431	1					
ANR	3079574	Identifier	set_dynamic_dir		3079431	2					
ANR	3079575	ParameterList	"const char * param_name , const char * append_str"		3079431	3					
ANR	3079576	Parameter	const char * param_name	597:17:15417:15438	3079431	0	True				
ANR	3079577	ParameterType	const char *		3079431	0					
ANR	3079578	Identifier	param_name		3079431	1					
ANR	3079579	Parameter	const char * append_str	597:41:15441:15462	3079431	1	True				
ANR	3079580	ParameterType	const char *		3079431	0					
ANR	3079581	Identifier	append_str		3079431	1					
ANR	3079582	CFGEntryNode	ENTRY		3079431		True				
ANR	3079583	CFGExitNode	EXIT		3079431		True				
ANR	3079584	Symbol	val		3079431						
ANR	3079585	Symbol	newdir . Value		3079431						
ANR	3079586	Symbol	env_str		3079431						
ANR	3079587	Symbol	env_cstr		3079431						
ANR	3079588	Symbol	TRUE		3079431						
ANR	3079589	Symbol	env_str . Value		3079431						
ANR	3079590	Symbol	append_str		3079431						
ANR	3079591	Symbol	SetEnv		3079431						
ANR	3079592	Symbol	stderr		3079431						
ANR	3079593	Symbol	myDistro -> Get		3079431						
ANR	3079594	Symbol	param		3079431						
ANR	3079595	Symbol	newdir		3079431						
ANR	3079596	Symbol	myDistro		3079431						
ANR	3079597	Symbol	* myDistro		3079431						
ANR	3079598	Symbol	strdup		3079431						
ANR	3079599	Symbol	param_name		3079431						
ANR	3079600	Function	handle_dynamic_dirs	636:0:16331:17186							
ANR	3079601	FunctionDef	handle_dynamic_dirs ()		3079600	0					
ANR	3079602	CompoundStatement		638:0:16358:17186	3079600	0					
ANR	3079603	IfStatement	if ( ! DynamicDirs )		3079600	0					
ANR	3079604	Condition	! DynamicDirs	643:5:16575:16587	3079600	0	True				
ANR	3079605	UnaryOperationExpression	! DynamicDirs		3079600	0					
ANR	3079606	UnaryOperator	!		3079600	0					
ANR	3079607	Identifier	DynamicDirs		3079600	1					
ANR	3079608	CompoundStatement		6:21:232:232	3079600	1					
ANR	3079609	ReturnStatement	return ;	644:2:16595:16601	3079600	0	True				
ANR	3079610	IdentifierDeclStatement	int mypid = daemonCore -> getpid ( ) ;	646:1:16607:16639	3079600	1	True				
ANR	3079611	IdentifierDecl	mypid = daemonCore -> getpid ( )		3079600	0					
ANR	3079612	IdentifierDeclType	int		3079600	0					
ANR	3079613	Identifier	mypid		3079600	1					
ANR	3079614	AssignmentExpression	mypid = daemonCore -> getpid ( )		3079600	2		=			
ANR	3079615	Identifier	mypid		3079600	0					
ANR	3079616	CallExpression	daemonCore -> getpid ( )		3079600	1					
ANR	3079617	Callee	daemonCore -> getpid		3079600	0					
ANR	3079618	PtrMemberAccess	daemonCore -> getpid		3079600	0					
ANR	3079619	Identifier	daemonCore		3079600	0					
ANR	3079620	Identifier	getpid		3079600	1					
ANR	3079621	ArgumentList			3079600	1					
ANR	3079622	IdentifierDeclStatement	char buf [ 256 ] ;	647:1:16642:16655	3079600	2	True				
ANR	3079623	IdentifierDecl	buf [ 256 ]		3079600	0					
ANR	3079624	IdentifierDeclType	char [ 256 ]		3079600	0					
ANR	3079625	Identifier	buf		3079600	1					
ANR	3079626	PrimaryExpression	256		3079600	2					
ANR	3079627	ExpressionStatement	"sprintf ( buf , ""%s-%d"" , get_local_ipaddr ( ) . to_ip_string ( ) . Value ( ) , mypid )"	648:1:16658:16731	3079600	3	True				
ANR	3079628	CallExpression	"sprintf ( buf , ""%s-%d"" , get_local_ipaddr ( ) . to_ip_string ( ) . Value ( ) , mypid )"		3079600	0					
ANR	3079629	Callee	sprintf		3079600	0					
ANR	3079630	Identifier	sprintf		3079600	0					
ANR	3079631	ArgumentList	buf		3079600	1					
ANR	3079632	Argument	buf		3079600	0					
ANR	3079633	Identifier	buf		3079600	0					
ANR	3079634	Argument	"""%s-%d"""		3079600	1					
ANR	3079635	PrimaryExpression	"""%s-%d"""		3079600	0					
ANR	3079636	Argument	get_local_ipaddr ( ) . to_ip_string ( ) . Value ( )		3079600	2					
ANR	3079637	CallExpression	get_local_ipaddr ( ) . to_ip_string ( ) . Value ( )		3079600	0					
ANR	3079638	Callee	get_local_ipaddr ( ) . to_ip_string ( ) . Value		3079600	0					
ANR	3079639	MemberAccess	get_local_ipaddr ( ) . to_ip_string ( ) . Value		3079600	0					
ANR	3079640	CallExpression	get_local_ipaddr ( ) . to_ip_string ( )		3079600	0					
ANR	3079641	Callee	get_local_ipaddr ( ) . to_ip_string		3079600	0					
ANR	3079642	MemberAccess	get_local_ipaddr ( ) . to_ip_string		3079600	0					
ANR	3079643	CallExpression	get_local_ipaddr ( )		3079600	0					
ANR	3079644	Callee	get_local_ipaddr		3079600	0					
ANR	3079645	Identifier	get_local_ipaddr		3079600	0					
ANR	3079646	ArgumentList			3079600	1					
ANR	3079647	Identifier	to_ip_string		3079600	1					
ANR	3079648	ArgumentList			3079600	1					
ANR	3079649	Identifier	Value		3079600	1					
ANR	3079650	ArgumentList			3079600	1					
ANR	3079651	Argument	mypid		3079600	3					
ANR	3079652	Identifier	mypid		3079600	0					
ANR	3079653	ExpressionStatement	"set_dynamic_dir ( ""LOG"" , buf )"	650:1:16735:16764	3079600	4	True				
ANR	3079654	CallExpression	"set_dynamic_dir ( ""LOG"" , buf )"		3079600	0					
ANR	3079655	Callee	set_dynamic_dir		3079600	0					
ANR	3079656	Identifier	set_dynamic_dir		3079600	0					
ANR	3079657	ArgumentList	"""LOG"""		3079600	1					
ANR	3079658	Argument	"""LOG"""		3079600	0					
ANR	3079659	PrimaryExpression	"""LOG"""		3079600	0					
ANR	3079660	Argument	buf		3079600	1					
ANR	3079661	Identifier	buf		3079600	0					
ANR	3079662	ExpressionStatement	"set_dynamic_dir ( ""SPOOL"" , buf )"	651:1:16767:16798	3079600	5	True				
ANR	3079663	CallExpression	"set_dynamic_dir ( ""SPOOL"" , buf )"		3079600	0					
ANR	3079664	Callee	set_dynamic_dir		3079600	0					
ANR	3079665	Identifier	set_dynamic_dir		3079600	0					
ANR	3079666	ArgumentList	"""SPOOL"""		3079600	1					
ANR	3079667	Argument	"""SPOOL"""		3079600	0					
ANR	3079668	PrimaryExpression	"""SPOOL"""		3079600	0					
ANR	3079669	Argument	buf		3079600	1					
ANR	3079670	Identifier	buf		3079600	0					
ANR	3079671	ExpressionStatement	"set_dynamic_dir ( ""EXECUTE"" , buf )"	652:1:16801:16834	3079600	6	True				
ANR	3079672	CallExpression	"set_dynamic_dir ( ""EXECUTE"" , buf )"		3079600	0					
ANR	3079673	Callee	set_dynamic_dir		3079600	0					
ANR	3079674	Identifier	set_dynamic_dir		3079600	0					
ANR	3079675	ArgumentList	"""EXECUTE"""		3079600	1					
ANR	3079676	Argument	"""EXECUTE"""		3079600	0					
ANR	3079677	PrimaryExpression	"""EXECUTE"""		3079600	0					
ANR	3079678	Argument	buf		3079600	1					
ANR	3079679	Identifier	buf		3079600	0					
ANR	3079680	ExpressionStatement	"sprintf ( buf , ""_%s_STARTD_NAME=%d"" , myDistro -> Get ( ) , mypid )"	656:1:16962:17022	3079600	7	True				
ANR	3079681	CallExpression	"sprintf ( buf , ""_%s_STARTD_NAME=%d"" , myDistro -> Get ( ) , mypid )"		3079600	0					
ANR	3079682	Callee	sprintf		3079600	0					
ANR	3079683	Identifier	sprintf		3079600	0					
ANR	3079684	ArgumentList	buf		3079600	1					
ANR	3079685	Argument	buf		3079600	0					
ANR	3079686	Identifier	buf		3079600	0					
ANR	3079687	Argument	"""_%s_STARTD_NAME=%d"""		3079600	1					
ANR	3079688	PrimaryExpression	"""_%s_STARTD_NAME=%d"""		3079600	0					
ANR	3079689	Argument	myDistro -> Get ( )		3079600	2					
ANR	3079690	CallExpression	myDistro -> Get ( )		3079600	0					
ANR	3079691	Callee	myDistro -> Get		3079600	0					
ANR	3079692	PtrMemberAccess	myDistro -> Get		3079600	0					
ANR	3079693	Identifier	myDistro		3079600	0					
ANR	3079694	Identifier	Get		3079600	1					
ANR	3079695	ArgumentList			3079600	1					
ANR	3079696	Argument	mypid		3079600	3					
ANR	3079697	Identifier	mypid		3079600	0					
ANR	3079698	IdentifierDeclStatement	char * env_str = strdup ( buf ) ;	657:1:17025:17054	3079600	8	True				
ANR	3079699	IdentifierDecl	* env_str = strdup ( buf )		3079600	0					
ANR	3079700	IdentifierDeclType	char *		3079600	0					
ANR	3079701	Identifier	env_str		3079600	1					
ANR	3079702	AssignmentExpression	* env_str = strdup ( buf )		3079600	2		=			
ANR	3079703	Identifier	env_str		3079600	0					
ANR	3079704	CallExpression	strdup ( buf )		3079600	1					
ANR	3079705	Callee	strdup		3079600	0					
ANR	3079706	Identifier	strdup		3079600	0					
ANR	3079707	ArgumentList	buf		3079600	1					
ANR	3079708	Argument	buf		3079600	0					
ANR	3079709	Identifier	buf		3079600	0					
ANR	3079710	IfStatement	if ( SetEnv ( env_str ) != TRUE )		3079600	9					
ANR	3079711	Condition	SetEnv ( env_str ) != TRUE	658:5:17061:17083	3079600	0	True				
ANR	3079712	EqualityExpression	SetEnv ( env_str ) != TRUE		3079600	0		!=			
ANR	3079713	CallExpression	SetEnv ( env_str )		3079600	0					
ANR	3079714	Callee	SetEnv		3079600	0					
ANR	3079715	Identifier	SetEnv		3079600	0					
ANR	3079716	ArgumentList	env_str		3079600	1					
ANR	3079717	Argument	env_str		3079600	0					
ANR	3079718	Identifier	env_str		3079600	0					
ANR	3079719	Identifier	TRUE		3079600	1					
ANR	3079720	CompoundStatement		21:31:728:728	3079600	1					
ANR	3079721	ExpressionStatement	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_str )"	659:2:17091:17168	3079600	0	True				
ANR	3079722	CallExpression	"fprintf ( stderr , ""ERROR: Can't add %s to the environment!\\n"" , env_str )"		3079600	0					
ANR	3079723	Callee	fprintf		3079600	0					
ANR	3079724	Identifier	fprintf		3079600	0					
ANR	3079725	ArgumentList	stderr		3079600	1					
ANR	3079726	Argument	stderr		3079600	0					
ANR	3079727	Identifier	stderr		3079600	0					
ANR	3079728	Argument	"""ERROR: Can't add %s to the environment!\\n"""		3079600	1					
ANR	3079729	PrimaryExpression	"""ERROR: Can't add %s to the environment!\\n"""		3079600	0					
ANR	3079730	Argument	env_str		3079600	2					
ANR	3079731	Identifier	env_str		3079600	0					
ANR	3079732	ExpressionStatement	exit ( 4 )	661:2:17172:17181	3079600	1	True				
ANR	3079733	CallExpression	exit ( 4 )		3079600	0					
ANR	3079734	Callee	exit		3079600	0					
ANR	3079735	Identifier	exit		3079600	0					
ANR	3079736	ArgumentList	4		3079600	1					
ANR	3079737	Argument	4		3079600	0					
ANR	3079738	PrimaryExpression	4		3079600	0					
ANR	3079739	ReturnType	void		3079600	1					
ANR	3079740	Identifier	handle_dynamic_dirs		3079600	2					
ANR	3079741	ParameterList			3079600	3					
ANR	3079742	CFGEntryNode	ENTRY		3079600		True				
ANR	3079743	CFGExitNode	EXIT		3079600		True				
ANR	3079744	Symbol	mypid		3079600						
ANR	3079745	Symbol	daemonCore -> getpid		3079600						
ANR	3079746	Symbol	env_str		3079600						
ANR	3079747	Symbol	TRUE		3079600						
ANR	3079748	Symbol	SetEnv		3079600						
ANR	3079749	Symbol	stderr		3079600						
ANR	3079750	Symbol	myDistro -> Get		3079600						
ANR	3079751	Symbol	get_local_ipaddr ( ) . to_ip_string		3079600						
ANR	3079752	Symbol	DynamicDirs		3079600						
ANR	3079753	Symbol	buf		3079600						
ANR	3079754	Symbol	* daemonCore		3079600						
ANR	3079755	Symbol	get_local_ipaddr ( ) . to_ip_string ( ) . Value		3079600						
ANR	3079756	Symbol	get_local_ipaddr		3079600						
ANR	3079757	Symbol	* myDistro		3079600						
ANR	3079758	Symbol	myDistro		3079600						
ANR	3079759	Symbol	daemonCore		3079600						
ANR	3079760	Symbol	strdup		3079600						
ANR	3079761	Function	linux_sig_coredump	666:0:17213:18673							
ANR	3079762	FunctionDef	linux_sig_coredump (int signum)		3079761	0					
ANR	3079763	CompoundStatement		668:0:17249:18673	3079761	0					
ANR	3079764	IdentifierDeclStatement	struct sigaction sa ;	669:1:17252:17271	3079761	0	True				
ANR	3079765	IdentifierDecl	sa		3079761	0					
ANR	3079766	IdentifierDeclType	struct sigaction		3079761	0					
ANR	3079767	Identifier	sa		3079761	1					
ANR	3079768	Statement	static	670:1:17274:17279	3079761	1	True				
ANR	3079769	IdentifierDeclStatement	bool down = false ;	670:8:17281:17298	3079761	2	True				
ANR	3079770	IdentifierDecl	down = false		3079761	0					
ANR	3079771	IdentifierDeclType	bool		3079761	0					
ANR	3079772	Identifier	down		3079761	1					
ANR	3079773	AssignmentExpression	down = false		3079761	2		=			
ANR	3079774	Identifier	false		3079761	0					
ANR	3079775	Identifier	false		3079761	1					
ANR	3079776	IfStatement	if ( down == true )		3079761	3					
ANR	3079777	Condition	down == true	686:5:18024:18035	3079761	0	True				
ANR	3079778	EqualityExpression	down == true		3079761	0		==			
ANR	3079779	Identifier	down		3079761	0					
ANR	3079780	Identifier	true		3079761	1					
ANR	3079781	CompoundStatement		19:19:788:788	3079761	1					
ANR	3079782	ReturnStatement	return ;	687:2:18042:18048	3079761	0	True				
ANR	3079783	ExpressionStatement	down = true	689:1:18054:18065	3079761	4	True				
ANR	3079784	AssignmentExpression	down = true		3079761	0		=			
ANR	3079785	Identifier	down		3079761	0					
ANR	3079786	Identifier	true		3079761	1					
ANR	3079787	ExpressionStatement	dprintf_dump_stack ( )	691:1:18069:18089	3079761	5	True				
ANR	3079788	CallExpression	dprintf_dump_stack ( )		3079761	0					
ANR	3079789	Callee	dprintf_dump_stack		3079761	0					
ANR	3079790	Identifier	dprintf_dump_stack		3079761	0					
ANR	3079791	ArgumentList			3079761	1					
ANR	3079792	ExpressionStatement	setuid ( 0 )	694:1:18145:18154	3079761	6	True				
ANR	3079793	CallExpression	setuid ( 0 )		3079761	0					
ANR	3079794	Callee	setuid		3079761	0					
ANR	3079795	Identifier	setuid		3079761	0					
ANR	3079796	ArgumentList	0		3079761	1					
ANR	3079797	Argument	0		3079761	0					
ANR	3079798	PrimaryExpression	0		3079761	0					
ANR	3079799	ExpressionStatement	setgid ( 0 )	695:1:18157:18166	3079761	7	True				
ANR	3079800	CallExpression	setgid ( 0 )		3079761	0					
ANR	3079801	Callee	setgid		3079761	0					
ANR	3079802	Identifier	setgid		3079761	0					
ANR	3079803	ArgumentList	0		3079761	1					
ANR	3079804	Argument	0		3079761	0					
ANR	3079805	PrimaryExpression	0		3079761	0					
ANR	3079806	IfStatement	if ( core_dir != NULL )		3079761	8					
ANR	3079807	Condition	core_dir != NULL	697:5:18174:18189	3079761	0	True				
ANR	3079808	EqualityExpression	core_dir != NULL		3079761	0		!=			
ANR	3079809	Identifier	core_dir		3079761	0					
ANR	3079810	Identifier	NULL		3079761	1					
ANR	3079811	CompoundStatement		30:23:942:942	3079761	1					
ANR	3079812	ExpressionStatement	chdir ( core_dir )	698:2:18196:18211	3079761	0	True				
ANR	3079813	CallExpression	chdir ( core_dir )		3079761	0					
ANR	3079814	Callee	chdir		3079761	0					
ANR	3079815	Identifier	chdir		3079761	0					
ANR	3079816	ArgumentList	core_dir		3079761	1					
ANR	3079817	Argument	core_dir		3079761	0					
ANR	3079818	Identifier	core_dir		3079761	0					
ANR	3079819	ExpressionStatement	"WriteCoreDump ( ""core"" )"	701:1:18218:18239	3079761	9	True				
ANR	3079820	CallExpression	"WriteCoreDump ( ""core"" )"		3079761	0					
ANR	3079821	Callee	WriteCoreDump		3079761	0					
ANR	3079822	Identifier	WriteCoreDump		3079761	0					
ANR	3079823	ArgumentList	"""core"""		3079761	1					
ANR	3079824	Argument	"""core"""		3079761	0					
ANR	3079825	PrimaryExpression	"""core"""		3079761	0					
ANR	3079826	ExpressionStatement	sa . sa_handler = SIG_DFL	704:1:18314:18337	3079761	10	True				
ANR	3079827	AssignmentExpression	sa . sa_handler = SIG_DFL		3079761	0		=			
ANR	3079828	MemberAccess	sa . sa_handler		3079761	0					
ANR	3079829	Identifier	sa		3079761	0					
ANR	3079830	Identifier	sa_handler		3079761	1					
ANR	3079831	Identifier	SIG_DFL		3079761	1					
ANR	3079832	ExpressionStatement	sigemptyset ( & sa . sa_mask )	705:1:18340:18364	3079761	11	True				
ANR	3079833	CallExpression	sigemptyset ( & sa . sa_mask )		3079761	0					
ANR	3079834	Callee	sigemptyset		3079761	0					
ANR	3079835	Identifier	sigemptyset		3079761	0					
ANR	3079836	ArgumentList	& sa . sa_mask		3079761	1					
ANR	3079837	Argument	& sa . sa_mask		3079761	0					
ANR	3079838	UnaryOperationExpression	& sa . sa_mask		3079761	0					
ANR	3079839	UnaryOperator	&		3079761	0					
ANR	3079840	MemberAccess	sa . sa_mask		3079761	1					
ANR	3079841	Identifier	sa		3079761	0					
ANR	3079842	Identifier	sa_mask		3079761	1					
ANR	3079843	ExpressionStatement	sa . sa_flags = 0	706:1:18367:18382	3079761	12	True				
ANR	3079844	AssignmentExpression	sa . sa_flags = 0		3079761	0		=			
ANR	3079845	MemberAccess	sa . sa_flags		3079761	0					
ANR	3079846	Identifier	sa		3079761	0					
ANR	3079847	Identifier	sa_flags		3079761	1					
ANR	3079848	PrimaryExpression	0		3079761	1					
ANR	3079849	ExpressionStatement	"sigaction ( signum , & sa , NULL )"	707:1:18385:18413	3079761	13	True				
ANR	3079850	CallExpression	"sigaction ( signum , & sa , NULL )"		3079761	0					
ANR	3079851	Callee	sigaction		3079761	0					
ANR	3079852	Identifier	sigaction		3079761	0					
ANR	3079853	ArgumentList	signum		3079761	1					
ANR	3079854	Argument	signum		3079761	0					
ANR	3079855	Identifier	signum		3079761	0					
ANR	3079856	Argument	& sa		3079761	1					
ANR	3079857	UnaryOperationExpression	& sa		3079761	0					
ANR	3079858	UnaryOperator	&		3079761	0					
ANR	3079859	Identifier	sa		3079761	1					
ANR	3079860	Argument	NULL		3079761	2					
ANR	3079861	Identifier	NULL		3079761	0					
ANR	3079862	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & sa . sa_mask , NULL )"	708:1:18416:18459	3079761	14	True				
ANR	3079863	CallExpression	"sigprocmask ( SIG_SETMASK , & sa . sa_mask , NULL )"		3079761	0					
ANR	3079864	Callee	sigprocmask		3079761	0					
ANR	3079865	Identifier	sigprocmask		3079761	0					
ANR	3079866	ArgumentList	SIG_SETMASK		3079761	1					
ANR	3079867	Argument	SIG_SETMASK		3079761	0					
ANR	3079868	Identifier	SIG_SETMASK		3079761	0					
ANR	3079869	Argument	& sa . sa_mask		3079761	1					
ANR	3079870	UnaryOperationExpression	& sa . sa_mask		3079761	0					
ANR	3079871	UnaryOperator	&		3079761	0					
ANR	3079872	MemberAccess	sa . sa_mask		3079761	1					
ANR	3079873	Identifier	sa		3079761	0					
ANR	3079874	Identifier	sa_mask		3079761	1					
ANR	3079875	Argument	NULL		3079761	2					
ANR	3079876	Identifier	NULL		3079761	0					
ANR	3079877	ExpressionStatement	raise ( signum )	710:1:18463:18476	3079761	15	True				
ANR	3079878	CallExpression	raise ( signum )		3079761	0					
ANR	3079879	Callee	raise		3079761	0					
ANR	3079880	Identifier	raise		3079761	0					
ANR	3079881	ArgumentList	signum		3079761	1					
ANR	3079882	Argument	signum		3079761	0					
ANR	3079883	Identifier	signum		3079761	0					
ANR	3079884	ExpressionStatement	exit ( 1 )	715:1:18664:18671	3079761	16	True				
ANR	3079885	CallExpression	exit ( 1 )		3079761	0					
ANR	3079886	Callee	exit		3079761	0					
ANR	3079887	Identifier	exit		3079761	0					
ANR	3079888	ArgumentList	1		3079761	1					
ANR	3079889	Argument	1		3079761	0					
ANR	3079890	PrimaryExpression	1		3079761	0					
ANR	3079891	ReturnType	void		3079761	1					
ANR	3079892	Identifier	linux_sig_coredump		3079761	2					
ANR	3079893	ParameterList	int signum		3079761	3					
ANR	3079894	Parameter	int signum	667:19:17237:17246	3079761	0	True				
ANR	3079895	ParameterType	int		3079761	0					
ANR	3079896	Identifier	signum		3079761	1					
ANR	3079897	CFGEntryNode	ENTRY		3079761		True				
ANR	3079898	CFGExitNode	EXIT		3079761		True				
ANR	3079899	Symbol	signum		3079761						
ANR	3079900	Symbol	core_dir		3079761						
ANR	3079901	Symbol	NULL		3079761						
ANR	3079902	Symbol	false		3079761						
ANR	3079903	Symbol	sa . sa_flags		3079761						
ANR	3079904	Symbol	SIG_SETMASK		3079761						
ANR	3079905	Symbol	down		3079761						
ANR	3079906	Symbol	sa		3079761						
ANR	3079907	Symbol	& sa . sa_mask		3079761						
ANR	3079908	Symbol	SIG_DFL		3079761						
ANR	3079909	Symbol	true		3079761						
ANR	3079910	Symbol	& sa		3079761						
ANR	3079911	Symbol	sa . sa_handler		3079761						
ANR	3079912	Function	install_core_dump_handler	720:0:18684:19352							
ANR	3079913	FunctionDef	install_core_dump_handler ()		3079912	0					
ANR	3079914	CompoundStatement		722:0:18717:19352	3079912	0					
ANR	3079915	IfStatement	if ( getuid ( ) == 0 )		3079912	0					
ANR	3079916	Condition	getuid ( ) == 0	725:6:18793:18805	3079912	0	True				
ANR	3079917	EqualityExpression	getuid ( ) == 0		3079912	0		==			
ANR	3079918	CallExpression	getuid ( )		3079912	0					
ANR	3079919	Callee	getuid		3079912	0					
ANR	3079920	Identifier	getuid		3079912	0					
ANR	3079921	ArgumentList			3079912	1					
ANR	3079922	PrimaryExpression	0		3079912	1					
ANR	3079923	CompoundStatement		6:3:183:199	3079912	1					
ANR	3079924	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Running as root.  Enabling specialized core dump routines\\n"" )"	726:3:18813:18896	3079912	0	True				
ANR	3079925	CallExpression	"dprintf ( D_FULLDEBUG , ""Running as root.  Enabling specialized core dump routines\\n"" )"		3079912	0					
ANR	3079926	Callee	dprintf		3079912	0					
ANR	3079927	Identifier	dprintf		3079912	0					
ANR	3079928	ArgumentList	D_FULLDEBUG		3079912	1					
ANR	3079929	Argument	D_FULLDEBUG		3079912	0					
ANR	3079930	Identifier	D_FULLDEBUG		3079912	0					
ANR	3079931	Argument	"""Running as root.  Enabling specialized core dump routines\\n"""		3079912	1					
ANR	3079932	PrimaryExpression	"""Running as root.  Enabling specialized core dump routines\\n"""		3079912	0					
ANR	3079933	IdentifierDeclStatement	sigset_t fullset ;	727:3:18901:18917	3079912	1	True				
ANR	3079934	IdentifierDecl	fullset		3079912	0					
ANR	3079935	IdentifierDeclType	sigset_t		3079912	0					
ANR	3079936	Identifier	fullset		3079912	1					
ANR	3079937	ExpressionStatement	sigfillset ( & fullset )	728:3:18922:18944	3079912	2	True				
ANR	3079938	CallExpression	sigfillset ( & fullset )		3079912	0					
ANR	3079939	Callee	sigfillset		3079912	0					
ANR	3079940	Identifier	sigfillset		3079912	0					
ANR	3079941	ArgumentList	& fullset		3079912	1					
ANR	3079942	Argument	& fullset		3079912	0					
ANR	3079943	UnaryOperationExpression	& fullset		3079912	0					
ANR	3079944	UnaryOperator	&		3079912	0					
ANR	3079945	Identifier	fullset		3079912	1					
ANR	3079946	ExpressionStatement	"install_sig_handler_with_mask ( SIGSEGV , & fullset , linux_sig_coredump )"	729:3:18949:19017	3079912	3	True				
ANR	3079947	CallExpression	"install_sig_handler_with_mask ( SIGSEGV , & fullset , linux_sig_coredump )"		3079912	0					
ANR	3079948	Callee	install_sig_handler_with_mask		3079912	0					
ANR	3079949	Identifier	install_sig_handler_with_mask		3079912	0					
ANR	3079950	ArgumentList	SIGSEGV		3079912	1					
ANR	3079951	Argument	SIGSEGV		3079912	0					
ANR	3079952	Identifier	SIGSEGV		3079912	0					
ANR	3079953	Argument	& fullset		3079912	1					
ANR	3079954	UnaryOperationExpression	& fullset		3079912	0					
ANR	3079955	UnaryOperator	&		3079912	0					
ANR	3079956	Identifier	fullset		3079912	1					
ANR	3079957	Argument	linux_sig_coredump		3079912	2					
ANR	3079958	Identifier	linux_sig_coredump		3079912	0					
ANR	3079959	ExpressionStatement	"install_sig_handler_with_mask ( SIGABRT , & fullset , linux_sig_coredump )"	730:3:19022:19090	3079912	4	True				
ANR	3079960	CallExpression	"install_sig_handler_with_mask ( SIGABRT , & fullset , linux_sig_coredump )"		3079912	0					
ANR	3079961	Callee	install_sig_handler_with_mask		3079912	0					
ANR	3079962	Identifier	install_sig_handler_with_mask		3079912	0					
ANR	3079963	ArgumentList	SIGABRT		3079912	1					
ANR	3079964	Argument	SIGABRT		3079912	0					
ANR	3079965	Identifier	SIGABRT		3079912	0					
ANR	3079966	Argument	& fullset		3079912	1					
ANR	3079967	UnaryOperationExpression	& fullset		3079912	0					
ANR	3079968	UnaryOperator	&		3079912	0					
ANR	3079969	Identifier	fullset		3079912	1					
ANR	3079970	Argument	linux_sig_coredump		3079912	2					
ANR	3079971	Identifier	linux_sig_coredump		3079912	0					
ANR	3079972	ExpressionStatement	"install_sig_handler_with_mask ( SIGILL , & fullset , linux_sig_coredump )"	731:3:19095:19162	3079912	5	True				
ANR	3079973	CallExpression	"install_sig_handler_with_mask ( SIGILL , & fullset , linux_sig_coredump )"		3079912	0					
ANR	3079974	Callee	install_sig_handler_with_mask		3079912	0					
ANR	3079975	Identifier	install_sig_handler_with_mask		3079912	0					
ANR	3079976	ArgumentList	SIGILL		3079912	1					
ANR	3079977	Argument	SIGILL		3079912	0					
ANR	3079978	Identifier	SIGILL		3079912	0					
ANR	3079979	Argument	& fullset		3079912	1					
ANR	3079980	UnaryOperationExpression	& fullset		3079912	0					
ANR	3079981	UnaryOperator	&		3079912	0					
ANR	3079982	Identifier	fullset		3079912	1					
ANR	3079983	Argument	linux_sig_coredump		3079912	2					
ANR	3079984	Identifier	linux_sig_coredump		3079912	0					
ANR	3079985	ExpressionStatement	"install_sig_handler_with_mask ( SIGFPE , & fullset , linux_sig_coredump )"	732:3:19167:19234	3079912	6	True				
ANR	3079986	CallExpression	"install_sig_handler_with_mask ( SIGFPE , & fullset , linux_sig_coredump )"		3079912	0					
ANR	3079987	Callee	install_sig_handler_with_mask		3079912	0					
ANR	3079988	Identifier	install_sig_handler_with_mask		3079912	0					
ANR	3079989	ArgumentList	SIGFPE		3079912	1					
ANR	3079990	Argument	SIGFPE		3079912	0					
ANR	3079991	Identifier	SIGFPE		3079912	0					
ANR	3079992	Argument	& fullset		3079912	1					
ANR	3079993	UnaryOperationExpression	& fullset		3079912	0					
ANR	3079994	UnaryOperator	&		3079912	0					
ANR	3079995	Identifier	fullset		3079912	1					
ANR	3079996	Argument	linux_sig_coredump		3079912	2					
ANR	3079997	Identifier	linux_sig_coredump		3079912	0					
ANR	3079998	ExpressionStatement	"install_sig_handler_with_mask ( SIGBUS , & fullset , linux_sig_coredump )"	733:3:19239:19306	3079912	7	True				
ANR	3079999	CallExpression	"install_sig_handler_with_mask ( SIGBUS , & fullset , linux_sig_coredump )"		3079912	0					
ANR	3080000	Callee	install_sig_handler_with_mask		3079912	0					
ANR	3080001	Identifier	install_sig_handler_with_mask		3079912	0					
ANR	3080002	ArgumentList	SIGBUS		3079912	1					
ANR	3080003	Argument	SIGBUS		3079912	0					
ANR	3080004	Identifier	SIGBUS		3079912	0					
ANR	3080005	Argument	& fullset		3079912	1					
ANR	3080006	UnaryOperationExpression	& fullset		3079912	0					
ANR	3080007	UnaryOperator	&		3079912	0					
ANR	3080008	Identifier	fullset		3079912	1					
ANR	3080009	Argument	linux_sig_coredump		3079912	2					
ANR	3080010	Identifier	linux_sig_coredump		3079912	0					
ANR	3080011	Statement	endif	735:2:19314:19318	3079912	1	True				
ANR	3080012	ReturnType	void		3079912	1					
ANR	3080013	Identifier	install_core_dump_handler		3079912	2					
ANR	3080014	ParameterList			3079912	3					
ANR	3080015	CFGEntryNode	ENTRY		3079912		True				
ANR	3080016	CFGExitNode	EXIT		3079912		True				
ANR	3080017	Symbol	SIGILL		3079912						
ANR	3080018	Symbol	linux_sig_coredump		3079912						
ANR	3080019	Symbol	getuid		3079912						
ANR	3080020	Symbol	SIGFPE		3079912						
ANR	3080021	Symbol	fullset		3079912						
ANR	3080022	Symbol	SIGSEGV		3079912						
ANR	3080023	Symbol	SIGBUS		3079912						
ANR	3080024	Symbol	D_FULLDEBUG		3079912						
ANR	3080025	Symbol	SIGABRT		3079912						
ANR	3080026	Symbol	& fullset		3079912						
ANR	3080027	Function	drop_core_in_log	738:0:19355:20822							
ANR	3080028	FunctionDef	drop_core_in_log ()		3080027	0					
ANR	3080029	CompoundStatement		740:0:19385:20822	3080027	0					
ANR	3080030	IdentifierDeclStatement	"char * ptmp = param ( ""LOG"" ) ;"	745:1:19580:19605	3080027	0	True				
ANR	3080031	IdentifierDecl	"* ptmp = param ( ""LOG"" )"		3080027	0					
ANR	3080032	IdentifierDeclType	char *		3080027	0					
ANR	3080033	Identifier	ptmp		3080027	1					
ANR	3080034	AssignmentExpression	"* ptmp = param ( ""LOG"" )"		3080027	2		=			
ANR	3080035	Identifier	ptmp		3080027	0					
ANR	3080036	CallExpression	"param ( ""LOG"" )"		3080027	1					
ANR	3080037	Callee	param		3080027	0					
ANR	3080038	Identifier	param		3080027	0					
ANR	3080039	ArgumentList	"""LOG"""		3080027	1					
ANR	3080040	Argument	"""LOG"""		3080027	0					
ANR	3080041	PrimaryExpression	"""LOG"""		3080027	0					
ANR	3080042	IfStatement	if ( ptmp )		3080027	1					
ANR	3080043	Condition	ptmp	746:6:19613:19616	3080027	0	True				
ANR	3080044	Identifier	ptmp		3080027	0					
ANR	3080045	CompoundStatement		7:13:234:234	3080027	1					
ANR	3080046	IfStatement	if ( chdir ( ptmp ) < 0 )		3080027	0					
ANR	3080047	Condition	chdir ( ptmp ) < 0	747:7:19629:19643	3080027	0	True				
ANR	3080048	RelationalExpression	chdir ( ptmp ) < 0		3080027	0		<			
ANR	3080049	CallExpression	chdir ( ptmp )		3080027	0					
ANR	3080050	Callee	chdir		3080027	0					
ANR	3080051	Identifier	chdir		3080027	0					
ANR	3080052	ArgumentList	ptmp		3080027	1					
ANR	3080053	Argument	ptmp		3080027	0					
ANR	3080054	Identifier	ptmp		3080027	0					
ANR	3080055	PrimaryExpression	0		3080027	1					
ANR	3080056	CompoundStatement		8:25:261:261	3080027	1					
ANR	3080057	IfStatement	"if ( MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		3080027	0					
ANR	3080058	Condition	"MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"	749:7:19669:19722	3080027	0	True				
ANR	3080059	EqualityExpression	"MATCH == strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		3080027	0		==			
ANR	3080060	Identifier	MATCH		3080027	0					
ANR	3080061	CallExpression	"strcmpi ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		3080027	1					
ANR	3080062	Callee	strcmpi		3080027	0					
ANR	3080063	Identifier	strcmpi		3080027	0					
ANR	3080064	ArgumentList	get_mySubSystem ( ) -> getName ( )		3080027	1					
ANR	3080065	Argument	get_mySubSystem ( ) -> getName ( )		3080027	0					
ANR	3080066	CallExpression	get_mySubSystem ( ) -> getName ( )		3080027	0					
ANR	3080067	Callee	get_mySubSystem ( ) -> getName		3080027	0					
ANR	3080068	PtrMemberAccess	get_mySubSystem ( ) -> getName		3080027	0					
ANR	3080069	CallExpression	get_mySubSystem ( )		3080027	0					
ANR	3080070	Callee	get_mySubSystem		3080027	0					
ANR	3080071	Identifier	get_mySubSystem		3080027	0					
ANR	3080072	ArgumentList			3080027	1					
ANR	3080073	Identifier	getName		3080027	1					
ANR	3080074	ArgumentList			3080027	1					
ANR	3080075	Argument	"""KBDD"""		3080027	1					
ANR	3080076	PrimaryExpression	"""KBDD"""		3080027	0					
ANR	3080077	CompoundStatement		10:63:339:339	3080027	1					
ANR	3080078	Statement	dprintf	750:4:19731:19737	3080027	0	True				
ANR	3080079	Statement	(	750:12:19739:19739	3080027	1	True				
ANR	3080080	Statement	D_FULLDEBUG	750:13:19740:19750	3080027	2	True				
ANR	3080081	Statement	","	750:24:19751:19751	3080027	3	True				
ANR	3080082	Statement	"""chdir() to LOG directory failed for KBDD, """	750:26:19753:19796	3080027	4	True				
ANR	3080083	Statement	"""cannot drop core in LOG dir\\n"""	751:10:19808:19838	3080027	5	True				
ANR	3080084	Statement	)	751:41:19839:19839	3080027	6	True				
ANR	3080085	ExpressionStatement		751:42:19840:19840	3080027	7	True				
ANR	3080086	ReturnStatement	return ;	752:4:19846:19852	3080027	8	True				
ANR	3080087	ExpressionStatement	"EXCEPT ( ""cannot chdir to dir <%s>"" , ptmp )"	755:5:19871:19910	3080027	1	True				
ANR	3080088	CallExpression	"EXCEPT ( ""cannot chdir to dir <%s>"" , ptmp )"		3080027	0					
ANR	3080089	Callee	EXCEPT		3080027	0					
ANR	3080090	Identifier	EXCEPT		3080027	0					
ANR	3080091	ArgumentList	"""cannot chdir to dir <%s>"""		3080027	1					
ANR	3080092	Argument	"""cannot chdir to dir <%s>"""		3080027	0					
ANR	3080093	PrimaryExpression	"""cannot chdir to dir <%s>"""		3080027	0					
ANR	3080094	Argument	ptmp		3080027	1					
ANR	3080095	Identifier	ptmp		3080027	0					
ANR	3080096	ElseStatement	else		3080027	0					
ANR	3080097	CompoundStatement		18:8:538:538	3080027	0					
ANR	3080098	Statement	dprintf	758:2:19928:19934	3080027	0	True				
ANR	3080099	Statement	(	758:9:19935:19935	3080027	1	True				
ANR	3080100	Statement	D_FULLDEBUG	758:11:19937:19947	3080027	2	True				
ANR	3080101	Statement	","	758:22:19948:19948	3080027	3	True				
ANR	3080102	Statement	"""No LOG directory specified in config file(s), """	759:5:19956:20003	3080027	4	True				
ANR	3080103	Statement	"""not calling chdir()\\n"""	760:5:20010:20032	3080027	5	True				
ANR	3080104	Statement	)	760:29:20034:20034	3080027	6	True				
ANR	3080105	ExpressionStatement		760:30:20035:20035	3080027	7	True				
ANR	3080106	ReturnStatement	return ;	761:2:20039:20045	3080027	8	True				
ANR	3080107	IfStatement	if ( core_dir )		3080027	2					
ANR	3080108	Condition	core_dir	764:6:20057:20064	3080027	0	True				
ANR	3080109	Identifier	core_dir		3080027	0					
ANR	3080110	CompoundStatement		25:17:682:682	3080027	1					
ANR	3080111	ExpressionStatement	free ( core_dir )	765:2:20072:20088	3080027	0	True				
ANR	3080112	CallExpression	free ( core_dir )		3080027	0					
ANR	3080113	Callee	free		3080027	0					
ANR	3080114	Identifier	free		3080027	0					
ANR	3080115	ArgumentList	core_dir		3080027	1					
ANR	3080116	Argument	core_dir		3080027	0					
ANR	3080117	Identifier	core_dir		3080027	0					
ANR	3080118	ExpressionStatement	core_dir = NULL	766:2:20092:20107	3080027	1	True				
ANR	3080119	AssignmentExpression	core_dir = NULL		3080027	0		=			
ANR	3080120	Identifier	core_dir		3080027	0					
ANR	3080121	Identifier	NULL		3080027	1					
ANR	3080122	ExpressionStatement	core_dir = strdup ( ptmp )	768:1:20113:20136	3080027	3	True				
ANR	3080123	AssignmentExpression	core_dir = strdup ( ptmp )		3080027	0		=			
ANR	3080124	Identifier	core_dir		3080027	0					
ANR	3080125	CallExpression	strdup ( ptmp )		3080027	1					
ANR	3080126	Callee	strdup		3080027	0					
ANR	3080127	Identifier	strdup		3080027	0					
ANR	3080128	ArgumentList	ptmp		3080027	1					
ANR	3080129	Argument	ptmp		3080027	0					
ANR	3080130	Identifier	ptmp		3080027	0					
ANR	3080131	ExpressionStatement	install_core_dump_handler ( )	772:1:20220:20247	3080027	4	True				
ANR	3080132	CallExpression	install_core_dump_handler ( )		3080027	0					
ANR	3080133	Callee	install_core_dump_handler		3080027	0					
ANR	3080134	Identifier	install_core_dump_handler		3080027	0					
ANR	3080135	ArgumentList			3080027	1					
ANR	3080136	CompoundStatement		45:2:1215:1243	3080027	5					
ANR	3080137	IdentifierDeclStatement	char pseudoCoreFileName [ MAX_PATH ] ;	777:2:20335:20368	3080027	0	True				
ANR	3080138	IdentifierDecl	pseudoCoreFileName [ MAX_PATH ]		3080027	0					
ANR	3080139	IdentifierDeclType	char [ MAX_PATH ]		3080027	0					
ANR	3080140	Identifier	pseudoCoreFileName		3080027	1					
ANR	3080141	Identifier	MAX_PATH		3080027	2					
ANR	3080142	ExpressionStatement	"sprintf ( pseudoCoreFileName , ""%s\\\\core.%s.WIN32"" , ptmp , get_mySubSystem ( ) -> getName ( ) )"	778:2:20372:20459	3080027	1	True				
ANR	3080143	CallExpression	"sprintf ( pseudoCoreFileName , ""%s\\\\core.%s.WIN32"" , ptmp , get_mySubSystem ( ) -> getName ( ) )"		3080027	0					
ANR	3080144	Callee	sprintf		3080027	0					
ANR	3080145	Identifier	sprintf		3080027	0					
ANR	3080146	ArgumentList	pseudoCoreFileName		3080027	1					
ANR	3080147	Argument	pseudoCoreFileName		3080027	0					
ANR	3080148	Identifier	pseudoCoreFileName		3080027	0					
ANR	3080149	Argument	"""%s\\\\core.%s.WIN32"""		3080027	1					
ANR	3080150	PrimaryExpression	"""%s\\\\core.%s.WIN32"""		3080027	0					
ANR	3080151	Argument	ptmp		3080027	2					
ANR	3080152	Identifier	ptmp		3080027	0					
ANR	3080153	Argument	get_mySubSystem ( ) -> getName ( )		3080027	3					
ANR	3080154	CallExpression	get_mySubSystem ( ) -> getName ( )		3080027	0					
ANR	3080155	Callee	get_mySubSystem ( ) -> getName		3080027	0					
ANR	3080156	PtrMemberAccess	get_mySubSystem ( ) -> getName		3080027	0					
ANR	3080157	CallExpression	get_mySubSystem ( )		3080027	0					
ANR	3080158	Callee	get_mySubSystem		3080027	0					
ANR	3080159	Identifier	get_mySubSystem		3080027	0					
ANR	3080160	ArgumentList			3080027	1					
ANR	3080161	Identifier	getName		3080027	1					
ANR	3080162	ArgumentList			3080027	1					
ANR	3080163	ExpressionStatement	g_ExceptionHandler . SetLogFileName ( pseudoCoreFileName )	780:2:20463:20516	3080027	2	True				
ANR	3080164	CallExpression	g_ExceptionHandler . SetLogFileName ( pseudoCoreFileName )		3080027	0					
ANR	3080165	Callee	g_ExceptionHandler . SetLogFileName		3080027	0					
ANR	3080166	MemberAccess	g_ExceptionHandler . SetLogFileName		3080027	0					
ANR	3080167	Identifier	g_ExceptionHandler		3080027	0					
ANR	3080168	Identifier	SetLogFileName		3080027	1					
ANR	3080169	ArgumentList	pseudoCoreFileName		3080027	1					
ANR	3080170	Argument	pseudoCoreFileName		3080027	0					
ANR	3080171	Identifier	pseudoCoreFileName		3080027	0					
ANR	3080172	IdentifierDeclStatement	"char * binpath = param ( ""BIN"" ) ;"	784:2:20601:20629	3080027	3	True				
ANR	3080173	IdentifierDecl	"* binpath = param ( ""BIN"" )"		3080027	0					
ANR	3080174	IdentifierDeclType	char *		3080027	0					
ANR	3080175	Identifier	binpath		3080027	1					
ANR	3080176	AssignmentExpression	"* binpath = param ( ""BIN"" )"		3080027	2		=			
ANR	3080177	Identifier	binpath		3080027	0					
ANR	3080178	CallExpression	"param ( ""BIN"" )"		3080027	1					
ANR	3080179	Callee	param		3080027	0					
ANR	3080180	Identifier	param		3080027	0					
ANR	3080181	ArgumentList	"""BIN"""		3080027	1					
ANR	3080182	Argument	"""BIN"""		3080027	0					
ANR	3080183	PrimaryExpression	"""BIN"""		3080027	0					
ANR	3080184	IfStatement	if ( binpath )		3080027	4					
ANR	3080185	Condition	binpath	785:7:20638:20644	3080027	0	True				
ANR	3080186	Identifier	binpath		3080027	0					
ANR	3080187	CompoundStatement		46:17:1262:1262	3080027	1					
ANR	3080188	ExpressionStatement	"SetEnv ( ""_NT_SYMBOL_PATH"" , binpath )"	786:3:20653:20689	3080027	0	True				
ANR	3080189	CallExpression	"SetEnv ( ""_NT_SYMBOL_PATH"" , binpath )"		3080027	0					
ANR	3080190	Callee	SetEnv		3080027	0					
ANR	3080191	Identifier	SetEnv		3080027	0					
ANR	3080192	ArgumentList	"""_NT_SYMBOL_PATH"""		3080027	1					
ANR	3080193	Argument	"""_NT_SYMBOL_PATH"""		3080027	0					
ANR	3080194	PrimaryExpression	"""_NT_SYMBOL_PATH"""		3080027	0					
ANR	3080195	Argument	binpath		3080027	1					
ANR	3080196	Identifier	binpath		3080027	0					
ANR	3080197	ExpressionStatement	free ( binpath )	787:3:20694:20707	3080027	1	True				
ANR	3080198	CallExpression	free ( binpath )		3080027	0					
ANR	3080199	Callee	free		3080027	0					
ANR	3080200	Identifier	free		3080027	0					
ANR	3080201	ArgumentList	binpath		3080027	1					
ANR	3080202	Argument	binpath		3080027	0					
ANR	3080203	Identifier	binpath		3080027	0					
ANR	3080204	ExpressionStatement	g_ExceptionHandler . SetPID ( daemonCore -> getpid ( ) )	791:2:20746:20797	3080027	5	True				
ANR	3080205	CallExpression	g_ExceptionHandler . SetPID ( daemonCore -> getpid ( ) )		3080027	0					
ANR	3080206	Callee	g_ExceptionHandler . SetPID		3080027	0					
ANR	3080207	MemberAccess	g_ExceptionHandler . SetPID		3080027	0					
ANR	3080208	Identifier	g_ExceptionHandler		3080027	0					
ANR	3080209	Identifier	SetPID		3080027	1					
ANR	3080210	ArgumentList	daemonCore -> getpid ( )		3080027	1					
ANR	3080211	Argument	daemonCore -> getpid ( )		3080027	0					
ANR	3080212	CallExpression	daemonCore -> getpid ( )		3080027	0					
ANR	3080213	Callee	daemonCore -> getpid		3080027	0					
ANR	3080214	PtrMemberAccess	daemonCore -> getpid		3080027	0					
ANR	3080215	Identifier	daemonCore		3080027	0					
ANR	3080216	Identifier	getpid		3080027	1					
ANR	3080217	ArgumentList			3080027	1					
ANR	3080218	ExpressionStatement	free ( ptmp )	794:1:20810:20820	3080027	6	True				
ANR	3080219	CallExpression	free ( ptmp )		3080027	0					
ANR	3080220	Callee	free		3080027	0					
ANR	3080221	Identifier	free		3080027	0					
ANR	3080222	ArgumentList	ptmp		3080027	1					
ANR	3080223	Argument	ptmp		3080027	0					
ANR	3080224	Identifier	ptmp		3080027	0					
ANR	3080225	ReturnType	void		3080027	1					
ANR	3080226	Identifier	drop_core_in_log		3080027	2					
ANR	3080227	ParameterList			3080027	3					
ANR	3080228	CFGEntryNode	ENTRY		3080027		True				
ANR	3080229	CFGExitNode	EXIT		3080027		True				
ANR	3080230	Symbol	pseudoCoreFileName		3080027						
ANR	3080231	Symbol	core_dir		3080027						
ANR	3080232	Symbol	NULL		3080027						
ANR	3080233	Symbol	get_mySubSystem ( ) -> getName		3080027						
ANR	3080234	Symbol	* get_mySubSystem		3080027						
ANR	3080235	Symbol	strcmpi		3080027						
ANR	3080236	Symbol	daemonCore -> getpid		3080027						
ANR	3080237	Symbol	chdir		3080027						
ANR	3080238	Symbol	ptmp		3080027						
ANR	3080239	Symbol	param		3080027						
ANR	3080240	Symbol	g_ExceptionHandler		3080027						
ANR	3080241	Symbol	* daemonCore		3080027						
ANR	3080242	Symbol	daemonCore		3080027						
ANR	3080243	Symbol	strdup		3080027						
ANR	3080244	Symbol	get_mySubSystem		3080027						
ANR	3080245	Symbol	MATCH		3080027						
ANR	3080246	Symbol	binpath		3080027						
ANR	3080247	Function	check_core_files	804:0:21210:21862							
ANR	3080248	FunctionDef	check_core_files ()		3080247	0					
ANR	3080249	CompoundStatement		806:0:21234:21862	3080247	0					
ANR	3080250	IdentifierDeclStatement	"bool want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true ) ;"	807:1:21237:21311	3080247	0	True				
ANR	3080251	IdentifierDecl	"want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		3080247	0					
ANR	3080252	IdentifierDeclType	bool		3080247	0					
ANR	3080253	Identifier	want_set_error_mode		3080247	1					
ANR	3080254	AssignmentExpression	"want_set_error_mode = param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		3080247	2		=			
ANR	3080255	Identifier	want_set_error_mode		3080247	0					
ANR	3080256	CallExpression	"param_boolean_crufty ( ""CREATE_CORE_FILES"" , true )"		3080247	1					
ANR	3080257	Callee	param_boolean_crufty		3080247	0					
ANR	3080258	Identifier	param_boolean_crufty		3080247	0					
ANR	3080259	ArgumentList	"""CREATE_CORE_FILES"""		3080247	1					
ANR	3080260	Argument	"""CREATE_CORE_FILES"""		3080247	0					
ANR	3080261	PrimaryExpression	"""CREATE_CORE_FILES"""		3080247	0					
ANR	3080262	Argument	true		3080247	1					
ANR	3080263	Identifier	true		3080247	0					
ANR	3080264	IfStatement	if ( want_set_error_mode )		3080247	1					
ANR	3080265	Condition	want_set_error_mode	810:5:21333:21351	3080247	0	True				
ANR	3080266	Identifier	want_set_error_mode		3080247	0					
ANR	3080267	CompoundStatement		5:27:120:120	3080247	1					
ANR	3080268	ExpressionStatement	"limit ( RLIMIT_CORE , RLIM_INFINITY , CONDOR_SOFT_LIMIT , ""max core size"" )"	811:2:21359:21429	3080247	0	True				
ANR	3080269	CallExpression	"limit ( RLIMIT_CORE , RLIM_INFINITY , CONDOR_SOFT_LIMIT , ""max core size"" )"		3080247	0					
ANR	3080270	Callee	limit		3080247	0					
ANR	3080271	Identifier	limit		3080247	0					
ANR	3080272	ArgumentList	RLIMIT_CORE		3080247	1					
ANR	3080273	Argument	RLIMIT_CORE		3080247	0					
ANR	3080274	Identifier	RLIMIT_CORE		3080247	0					
ANR	3080275	Argument	RLIM_INFINITY		3080247	1					
ANR	3080276	Identifier	RLIM_INFINITY		3080247	0					
ANR	3080277	Argument	CONDOR_SOFT_LIMIT		3080247	2					
ANR	3080278	Identifier	CONDOR_SOFT_LIMIT		3080247	0					
ANR	3080279	Argument	"""max core size"""		3080247	3					
ANR	3080280	PrimaryExpression	"""max core size"""		3080247	0					
ANR	3080281	ElseStatement	else		3080247	0					
ANR	3080282	CompoundStatement		7:8:204:204	3080247	0					
ANR	3080283	ExpressionStatement	"limit ( RLIMIT_CORE , 0 , CONDOR_SOFT_LIMIT , ""max core size"" )"	813:2:21443:21501	3080247	0	True				
ANR	3080284	CallExpression	"limit ( RLIMIT_CORE , 0 , CONDOR_SOFT_LIMIT , ""max core size"" )"		3080247	0					
ANR	3080285	Callee	limit		3080247	0					
ANR	3080286	Identifier	limit		3080247	0					
ANR	3080287	ArgumentList	RLIMIT_CORE		3080247	1					
ANR	3080288	Argument	RLIMIT_CORE		3080247	0					
ANR	3080289	Identifier	RLIMIT_CORE		3080247	0					
ANR	3080290	Argument	0		3080247	1					
ANR	3080291	PrimaryExpression	0		3080247	0					
ANR	3080292	Argument	CONDOR_SOFT_LIMIT		3080247	2					
ANR	3080293	Identifier	CONDOR_SOFT_LIMIT		3080247	0					
ANR	3080294	Argument	"""max core size"""		3080247	3					
ANR	3080295	PrimaryExpression	"""max core size"""		3080247	0					
ANR	3080296	IfStatement	if ( want_set_error_mode )		3080247	2					
ANR	3080297	Condition	want_set_error_mode	820:6:21634:21652	3080247	0	True				
ANR	3080298	Identifier	want_set_error_mode		3080247	0					
ANR	3080299	CompoundStatement		15:28:421:421	3080247	1					
ANR	3080300	Statement	::	821:2:21660:21661	3080247	0	True				
ANR	3080301	ExpressionStatement	SetErrorMode ( SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX )	821:4:21662:21753	3080247	1	True				
ANR	3080302	CallExpression	SetErrorMode ( SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX )		3080247	0					
ANR	3080303	Callee	SetErrorMode		3080247	0					
ANR	3080304	Identifier	SetErrorMode		3080247	0					
ANR	3080305	ArgumentList	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		3080247	1					
ANR	3080306	Argument	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		3080247	0					
ANR	3080307	InclusiveOrExpression	SEM_NOGPFAULTERRORBOX | SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		3080247	0		|			
ANR	3080308	Identifier	SEM_NOGPFAULTERRORBOX		3080247	0					
ANR	3080309	InclusiveOrExpression	SEM_FAILCRITICALERRORS | SEM_NOOPENFILEERRORBOX		3080247	1		|			
ANR	3080310	Identifier	SEM_FAILCRITICALERRORS		3080247	0					
ANR	3080311	Identifier	SEM_NOOPENFILEERRORBOX		3080247	1					
ANR	3080312	ExpressionStatement	g_ExceptionHandler . TurnOn ( )	823:2:21757:21784	3080247	2	True				
ANR	3080313	CallExpression	g_ExceptionHandler . TurnOn ( )		3080247	0					
ANR	3080314	Callee	g_ExceptionHandler . TurnOn		3080247	0					
ANR	3080315	MemberAccess	g_ExceptionHandler . TurnOn		3080247	0					
ANR	3080316	Identifier	g_ExceptionHandler		3080247	0					
ANR	3080317	Identifier	TurnOn		3080247	1					
ANR	3080318	ArgumentList			3080247	1					
ANR	3080319	ElseStatement	else		3080247	0					
ANR	3080320	CompoundStatement		19:8:559:559	3080247	0					
ANR	3080321	Statement	::	825:2:21798:21799	3080247	0	True				
ANR	3080322	ExpressionStatement	SetErrorMode ( 0 )	825:4:21800:21817	3080247	1	True				
ANR	3080323	CallExpression	SetErrorMode ( 0 )		3080247	0					
ANR	3080324	Callee	SetErrorMode		3080247	0					
ANR	3080325	Identifier	SetErrorMode		3080247	0					
ANR	3080326	ArgumentList	0		3080247	1					
ANR	3080327	Argument	0		3080247	0					
ANR	3080328	PrimaryExpression	0		3080247	0					
ANR	3080329	ExpressionStatement	g_ExceptionHandler . TurnOff ( )	826:2:21821:21849	3080247	2	True				
ANR	3080330	CallExpression	g_ExceptionHandler . TurnOff ( )		3080247	0					
ANR	3080331	Callee	g_ExceptionHandler . TurnOff		3080247	0					
ANR	3080332	MemberAccess	g_ExceptionHandler . TurnOff		3080247	0					
ANR	3080333	Identifier	g_ExceptionHandler		3080247	0					
ANR	3080334	Identifier	TurnOff		3080247	1					
ANR	3080335	ArgumentList			3080247	1					
ANR	3080336	ReturnType	void		3080247	1					
ANR	3080337	Identifier	check_core_files		3080247	2					
ANR	3080338	ParameterList			3080247	3					
ANR	3080339	CFGEntryNode	ENTRY		3080247		True				
ANR	3080340	CFGExitNode	EXIT		3080247		True				
ANR	3080341	Symbol	RLIMIT_CORE		3080247						
ANR	3080342	Symbol	SEM_FAILCRITICALERRORS		3080247						
ANR	3080343	Symbol	SEM_NOGPFAULTERRORBOX		3080247						
ANR	3080344	Symbol	SEM_NOOPENFILEERRORBOX		3080247						
ANR	3080345	Symbol	g_ExceptionHandler		3080247						
ANR	3080346	Symbol	want_set_error_mode		3080247						
ANR	3080347	Symbol	true		3080247						
ANR	3080348	Symbol	param_boolean_crufty		3080247						
ANR	3080349	Symbol	RLIM_INFINITY		3080247						
ANR	3080350	Symbol	CONDOR_SOFT_LIMIT		3080247						
ANR	3080351	DeclStmt									
ANR	3080352	Decl							char	char *	name
ANR	3080353	DeclStmt									
ANR	3080354	Decl							int	int	total_bytes
ANR	3080355	DeclStmt									
ANR	3080356	Decl							int	int	result
ANR	3080357	DeclStmt									
ANR	3080358	Decl							int	int	type
ANR	3080359	DeclStmt									
ANR	3080360	Decl							char	char *	pname
ANR	3080361	DeclStmt									
ANR	3080362	Decl							char	char *	ext
ANR	3080363	DeclStmt									
ANR	3080364	Decl							char	char *	filename
ANR	3080365	DeclStmt									
ANR	3080366	Decl							MyString	MyString	full_filename
ANR	3080367	DeclStmt									
ANR	3080368	Decl							int	int	fd
ANR	3080369	DeclStmt									
ANR	3080370	Decl							filesize_t	filesize_t	size
ANR	3080371	Function	handle_fetch_log_history	1014:0:26361:27432							
ANR	3080372	FunctionDef	"handle_fetch_log_history (ReliSock * stream , char * name)"		3080371	0					
ANR	3080373	CompoundStatement		1015:55:26420:27432	3080371	0					
ANR	3080374	IdentifierDeclStatement	int result = DC_FETCH_LOG_RESULT_BAD_TYPE ;	1016:1:26423:26464	3080371	0	True				
ANR	3080375	IdentifierDecl	result = DC_FETCH_LOG_RESULT_BAD_TYPE		3080371	0					
ANR	3080376	IdentifierDeclType	int		3080371	0					
ANR	3080377	Identifier	result		3080371	1					
ANR	3080378	AssignmentExpression	result = DC_FETCH_LOG_RESULT_BAD_TYPE		3080371	2		=			
ANR	3080379	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		3080371	0					
ANR	3080380	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		3080371	1					
ANR	3080381	IdentifierDeclStatement	"const char * history_file_param = ""HISTORY"" ;"	1018:1:26468:26510	3080371	1	True				
ANR	3080382	IdentifierDecl	"* history_file_param = ""HISTORY"""		3080371	0					
ANR	3080383	IdentifierDeclType	const char *		3080371	0					
ANR	3080384	Identifier	history_file_param		3080371	1					
ANR	3080385	AssignmentExpression	"* history_file_param = ""HISTORY"""		3080371	2		=			
ANR	3080386	Identifier	history_file_param		3080371	0					
ANR	3080387	PrimaryExpression	"""HISTORY"""		3080371	1					
ANR	3080388	IfStatement	"if ( strcmp ( name , ""STARTD_HISTORY"" ) == 0 )"		3080371	2					
ANR	3080389	Condition	"strcmp ( name , ""STARTD_HISTORY"" ) == 0"	1019:5:26517:26551	3080371	0	True				
ANR	3080390	EqualityExpression	"strcmp ( name , ""STARTD_HISTORY"" ) == 0"		3080371	0		==			
ANR	3080391	CallExpression	"strcmp ( name , ""STARTD_HISTORY"" )"		3080371	0					
ANR	3080392	Callee	strcmp		3080371	0					
ANR	3080393	Identifier	strcmp		3080371	0					
ANR	3080394	ArgumentList	name		3080371	1					
ANR	3080395	Argument	name		3080371	0					
ANR	3080396	Identifier	name		3080371	0					
ANR	3080397	Argument	"""STARTD_HISTORY"""		3080371	1					
ANR	3080398	PrimaryExpression	"""STARTD_HISTORY"""		3080371	0					
ANR	3080399	PrimaryExpression	0		3080371	1					
ANR	3080400	CompoundStatement		5:42:133:133	3080371	1					
ANR	3080401	ExpressionStatement	"history_file_param = ""STARTD_HISTORY"""	1020:2:26558:26595	3080371	0	True				
ANR	3080402	AssignmentExpression	"history_file_param = ""STARTD_HISTORY"""		3080371	0		=			
ANR	3080403	Identifier	history_file_param		3080371	0					
ANR	3080404	PrimaryExpression	"""STARTD_HISTORY"""		3080371	1					
ANR	3080405	ExpressionStatement	free ( name )	1023:1:26602:26612	3080371	3	True				
ANR	3080406	CallExpression	free ( name )		3080371	0					
ANR	3080407	Callee	free		3080371	0					
ANR	3080408	Identifier	free		3080371	0					
ANR	3080409	ArgumentList	name		3080371	1					
ANR	3080410	Argument	name		3080371	0					
ANR	3080411	Identifier	name		3080371	0					
ANR	3080412	IdentifierDeclStatement	char * history_file = param ( history_file_param ) ;	1024:1:26615:26661	3080371	4	True				
ANR	3080413	IdentifierDecl	* history_file = param ( history_file_param )		3080371	0					
ANR	3080414	IdentifierDeclType	char *		3080371	0					
ANR	3080415	Identifier	history_file		3080371	1					
ANR	3080416	AssignmentExpression	* history_file = param ( history_file_param )		3080371	2		=			
ANR	3080417	Identifier	history_file		3080371	0					
ANR	3080418	CallExpression	param ( history_file_param )		3080371	1					
ANR	3080419	Callee	param		3080371	0					
ANR	3080420	Identifier	param		3080371	0					
ANR	3080421	ArgumentList	history_file_param		3080371	1					
ANR	3080422	Argument	history_file_param		3080371	0					
ANR	3080423	Identifier	history_file_param		3080371	0					
ANR	3080424	IfStatement	if ( ! history_file )		3080371	5					
ANR	3080425	Condition	! history_file	1026:5:26669:26681	3080371	0	True				
ANR	3080426	UnaryOperationExpression	! history_file		3080371	0					
ANR	3080427	UnaryOperator	!		3080371	0					
ANR	3080428	Identifier	history_file		3080371	1					
ANR	3080429	CompoundStatement		12:20:263:263	3080371	1					
ANR	3080430	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"" , history_file_param )"	1027:2:26688:26791	3080371	0	True				
ANR	3080431	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"" , history_file_param )"		3080371	0					
ANR	3080432	Callee	dprintf		3080371	0					
ANR	3080433	Identifier	dprintf		3080371	0					
ANR	3080434	ArgumentList	D_ALWAYS		3080371	1					
ANR	3080435	Argument	D_ALWAYS		3080371	0					
ANR	3080436	Identifier	D_ALWAYS		3080371	0					
ANR	3080437	Argument	"""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"""		3080371	1					
ANR	3080438	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: no parameter named %s\\n"""		3080371	0					
ANR	3080439	Argument	history_file_param		3080371	2					
ANR	3080440	Identifier	history_file_param		3080371	0					
ANR	3080441	ExpressionStatement	stream -> code ( result )	1028:2:26795:26815	3080371	1	True				
ANR	3080442	CallExpression	stream -> code ( result )		3080371	0					
ANR	3080443	Callee	stream -> code		3080371	0					
ANR	3080444	PtrMemberAccess	stream -> code		3080371	0					
ANR	3080445	Identifier	stream		3080371	0					
ANR	3080446	Identifier	code		3080371	1					
ANR	3080447	ArgumentList	result		3080371	1					
ANR	3080448	Argument	result		3080371	0					
ANR	3080449	Identifier	result		3080371	0					
ANR	3080450	ExpressionStatement	stream -> end_of_message ( )	1029:2:26819:26843	3080371	2	True				
ANR	3080451	CallExpression	stream -> end_of_message ( )		3080371	0					
ANR	3080452	Callee	stream -> end_of_message		3080371	0					
ANR	3080453	PtrMemberAccess	stream -> end_of_message		3080371	0					
ANR	3080454	Identifier	stream		3080371	0					
ANR	3080455	Identifier	end_of_message		3080371	1					
ANR	3080456	ArgumentList			3080371	1					
ANR	3080457	ReturnStatement	return FALSE ;	1030:2:26847:26859	3080371	3	True				
ANR	3080458	Identifier	FALSE		3080371	0					
ANR	3080459	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( history_file , O_RDONLY ) ;"	1032:1:26865:26921	3080371	6	True				
ANR	3080460	IdentifierDecl	"fd = safe_open_wrapper_follow ( history_file , O_RDONLY )"		3080371	0					
ANR	3080461	IdentifierDeclType	int		3080371	0					
ANR	3080462	Identifier	fd		3080371	1					
ANR	3080463	AssignmentExpression	"fd = safe_open_wrapper_follow ( history_file , O_RDONLY )"		3080371	2		=			
ANR	3080464	Identifier	fd		3080371	0					
ANR	3080465	CallExpression	"safe_open_wrapper_follow ( history_file , O_RDONLY )"		3080371	1					
ANR	3080466	Callee	safe_open_wrapper_follow		3080371	0					
ANR	3080467	Identifier	safe_open_wrapper_follow		3080371	0					
ANR	3080468	ArgumentList	history_file		3080371	1					
ANR	3080469	Argument	history_file		3080371	0					
ANR	3080470	Identifier	history_file		3080371	0					
ANR	3080471	Argument	O_RDONLY		3080371	1					
ANR	3080472	Identifier	O_RDONLY		3080371	0					
ANR	3080473	ExpressionStatement	free ( history_file )	1033:1:26924:26942	3080371	7	True				
ANR	3080474	CallExpression	free ( history_file )		3080371	0					
ANR	3080475	Callee	free		3080371	0					
ANR	3080476	Identifier	free		3080371	0					
ANR	3080477	ArgumentList	history_file		3080371	1					
ANR	3080478	Argument	history_file		3080371	0					
ANR	3080479	Identifier	history_file		3080371	0					
ANR	3080480	IfStatement	if ( fd < 0 )		3080371	8					
ANR	3080481	Condition	fd < 0	1034:4:26948:26951	3080371	0	True				
ANR	3080482	RelationalExpression	fd < 0		3080371	0		<			
ANR	3080483	Identifier	fd		3080371	0					
ANR	3080484	PrimaryExpression	0		3080371	1					
ANR	3080485	CompoundStatement		20:10:533:533	3080371	1					
ANR	3080486	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: can't open history file\\n"" )"	1035:2:26958:27043	3080371	0	True				
ANR	3080487	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: can't open history file\\n"" )"		3080371	0					
ANR	3080488	Callee	dprintf		3080371	0					
ANR	3080489	Identifier	dprintf		3080371	0					
ANR	3080490	ArgumentList	D_ALWAYS		3080371	1					
ANR	3080491	Argument	D_ALWAYS		3080371	0					
ANR	3080492	Identifier	D_ALWAYS		3080371	0					
ANR	3080493	Argument	"""DaemonCore: handle_fetch_log_history: can't open history file\\n"""		3080371	1					
ANR	3080494	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: can't open history file\\n"""		3080371	0					
ANR	3080495	ExpressionStatement	result = DC_FETCH_LOG_RESULT_CANT_OPEN	1036:2:27047:27085	3080371	1	True				
ANR	3080496	AssignmentExpression	result = DC_FETCH_LOG_RESULT_CANT_OPEN		3080371	0		=			
ANR	3080497	Identifier	result		3080371	0					
ANR	3080498	Identifier	DC_FETCH_LOG_RESULT_CANT_OPEN		3080371	1					
ANR	3080499	ExpressionStatement	stream -> code ( result )	1037:2:27089:27109	3080371	2	True				
ANR	3080500	CallExpression	stream -> code ( result )		3080371	0					
ANR	3080501	Callee	stream -> code		3080371	0					
ANR	3080502	PtrMemberAccess	stream -> code		3080371	0					
ANR	3080503	Identifier	stream		3080371	0					
ANR	3080504	Identifier	code		3080371	1					
ANR	3080505	ArgumentList	result		3080371	1					
ANR	3080506	Argument	result		3080371	0					
ANR	3080507	Identifier	result		3080371	0					
ANR	3080508	ExpressionStatement	stream -> end_of_message ( )	1038:2:27113:27137	3080371	3	True				
ANR	3080509	CallExpression	stream -> end_of_message ( )		3080371	0					
ANR	3080510	Callee	stream -> end_of_message		3080371	0					
ANR	3080511	PtrMemberAccess	stream -> end_of_message		3080371	0					
ANR	3080512	Identifier	stream		3080371	0					
ANR	3080513	Identifier	end_of_message		3080371	1					
ANR	3080514	ArgumentList			3080371	1					
ANR	3080515	ReturnStatement	return FALSE ;	1039:2:27141:27153	3080371	4	True				
ANR	3080516	Identifier	FALSE		3080371	0					
ANR	3080517	ExpressionStatement	result = DC_FETCH_LOG_RESULT_SUCCESS	1042:1:27160:27196	3080371	9	True				
ANR	3080518	AssignmentExpression	result = DC_FETCH_LOG_RESULT_SUCCESS		3080371	0		=			
ANR	3080519	Identifier	result		3080371	0					
ANR	3080520	Identifier	DC_FETCH_LOG_RESULT_SUCCESS		3080371	1					
ANR	3080521	ExpressionStatement	stream -> code ( result )	1043:1:27199:27219	3080371	10	True				
ANR	3080522	CallExpression	stream -> code ( result )		3080371	0					
ANR	3080523	Callee	stream -> code		3080371	0					
ANR	3080524	PtrMemberAccess	stream -> code		3080371	0					
ANR	3080525	Identifier	stream		3080371	0					
ANR	3080526	Identifier	code		3080371	1					
ANR	3080527	ArgumentList	result		3080371	1					
ANR	3080528	Argument	result		3080371	0					
ANR	3080529	Identifier	result		3080371	0					
ANR	3080530	IdentifierDeclStatement	filesize_t size ;	1045:1:27223:27238	3080371	11	True				
ANR	3080531	IdentifierDecl	size		3080371	0					
ANR	3080532	IdentifierDeclType	filesize_t		3080371	0					
ANR	3080533	Identifier	size		3080371	1					
ANR	3080534	ExpressionStatement	"stream -> put_file ( & size , fd )"	1046:1:27241:27268	3080371	12	True				
ANR	3080535	CallExpression	"stream -> put_file ( & size , fd )"		3080371	0					
ANR	3080536	Callee	stream -> put_file		3080371	0					
ANR	3080537	PtrMemberAccess	stream -> put_file		3080371	0					
ANR	3080538	Identifier	stream		3080371	0					
ANR	3080539	Identifier	put_file		3080371	1					
ANR	3080540	ArgumentList	& size		3080371	1					
ANR	3080541	Argument	& size		3080371	0					
ANR	3080542	UnaryOperationExpression	& size		3080371	0					
ANR	3080543	UnaryOperator	&		3080371	0					
ANR	3080544	Identifier	size		3080371	1					
ANR	3080545	Argument	fd		3080371	1					
ANR	3080546	Identifier	fd		3080371	0					
ANR	3080547	ExpressionStatement	stream -> end_of_message ( )	1048:1:27272:27296	3080371	13	True				
ANR	3080548	CallExpression	stream -> end_of_message ( )		3080371	0					
ANR	3080549	Callee	stream -> end_of_message		3080371	0					
ANR	3080550	PtrMemberAccess	stream -> end_of_message		3080371	0					
ANR	3080551	Identifier	stream		3080371	0					
ANR	3080552	Identifier	end_of_message		3080371	1					
ANR	3080553	ArgumentList			3080371	1					
ANR	3080554	IfStatement	if ( size < 0 )		3080371	14					
ANR	3080555	Condition	size < 0	1050:4:27303:27308	3080371	0	True				
ANR	3080556	RelationalExpression	size < 0		3080371	0		<			
ANR	3080557	Identifier	size		3080371	0					
ANR	3080558	PrimaryExpression	0		3080371	1					
ANR	3080559	CompoundStatement		36:12:890:890	3080371	1					
ANR	3080560	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"" )"	1051:2:27315:27400	3080371	0	True				
ANR	3080561	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"" )"		3080371	0					
ANR	3080562	Callee	dprintf		3080371	0					
ANR	3080563	Identifier	dprintf		3080371	0					
ANR	3080564	ArgumentList	D_ALWAYS		3080371	1					
ANR	3080565	Argument	D_ALWAYS		3080371	0					
ANR	3080566	Identifier	D_ALWAYS		3080371	0					
ANR	3080567	Argument	"""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"""		3080371	1					
ANR	3080568	PrimaryExpression	"""DaemonCore: handle_fetch_log_history: couldn't send all data!\\n"""		3080371	0					
ANR	3080569	ExpressionStatement	close ( fd )	1054:1:27407:27416	3080371	15	True				
ANR	3080570	CallExpression	close ( fd )		3080371	0					
ANR	3080571	Callee	close		3080371	0					
ANR	3080572	Identifier	close		3080371	0					
ANR	3080573	ArgumentList	fd		3080371	1					
ANR	3080574	Argument	fd		3080371	0					
ANR	3080575	Identifier	fd		3080371	0					
ANR	3080576	ReturnStatement	return TRUE ;	1055:1:27419:27430	3080371	16	True				
ANR	3080577	Identifier	TRUE		3080371	0					
ANR	3080578	ReturnType	int		3080371	1					
ANR	3080579	Identifier	handle_fetch_log_history		3080371	2					
ANR	3080580	ParameterList	"ReliSock * stream , char * name"		3080371	3					
ANR	3080581	Parameter	ReliSock * stream	1015:25:26390:26405	3080371	0	True				
ANR	3080582	ParameterType	ReliSock *		3080371	0					
ANR	3080583	Identifier	stream		3080371	1					
ANR	3080584	Parameter	char * name	1015:43:26408:26417	3080371	1	True				
ANR	3080585	ParameterType	char *		3080371	0					
ANR	3080586	Identifier	name		3080371	1					
ANR	3080587	CFGEntryNode	ENTRY		3080371		True				
ANR	3080588	CFGExitNode	EXIT		3080371		True				
ANR	3080589	Symbol	strcmp		3080371						
ANR	3080590	Symbol	history_file		3080371						
ANR	3080591	Symbol	safe_open_wrapper_follow		3080371						
ANR	3080592	Symbol	D_ALWAYS		3080371						
ANR	3080593	Symbol	TRUE		3080371						
ANR	3080594	Symbol	& size		3080371						
ANR	3080595	Symbol	history_file_param		3080371						
ANR	3080596	Symbol	result		3080371						
ANR	3080597	Symbol	DC_FETCH_LOG_RESULT_CANT_OPEN		3080371						
ANR	3080598	Symbol	O_RDONLY		3080371						
ANR	3080599	Symbol	size		3080371						
ANR	3080600	Symbol	stream		3080371						
ANR	3080601	Symbol	param		3080371						
ANR	3080602	Symbol	name		3080371						
ANR	3080603	Symbol	FALSE		3080371						
ANR	3080604	Symbol	DC_FETCH_LOG_RESULT_BAD_TYPE		3080371						
ANR	3080605	Symbol	DC_FETCH_LOG_RESULT_SUCCESS		3080371						
ANR	3080606	Symbol	fd		3080371						
ANR	3080607	Function	handle_fetch_log_history_dir	1058:0:27435:28276							
ANR	3080608	FunctionDef	"handle_fetch_log_history_dir (ReliSock * stream , char * paramName)"		3080607	0					
ANR	3080609	CompoundStatement		1059:64:27503:28276	3080607	0					
ANR	3080610	IdentifierDeclStatement	int result = DC_FETCH_LOG_RESULT_BAD_TYPE ;	1060:1:27506:27547	3080607	0	True				
ANR	3080611	IdentifierDecl	result = DC_FETCH_LOG_RESULT_BAD_TYPE		3080607	0					
ANR	3080612	IdentifierDeclType	int		3080607	0					
ANR	3080613	Identifier	result		3080607	1					
ANR	3080614	AssignmentExpression	result = DC_FETCH_LOG_RESULT_BAD_TYPE		3080607	2		=			
ANR	3080615	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		3080607	0					
ANR	3080616	Identifier	DC_FETCH_LOG_RESULT_BAD_TYPE		3080607	1					
ANR	3080617	ExpressionStatement	free ( paramName )	1062:1:27551:27566	3080607	1	True				
ANR	3080618	CallExpression	free ( paramName )		3080607	0					
ANR	3080619	Callee	free		3080607	0					
ANR	3080620	Identifier	free		3080607	0					
ANR	3080621	ArgumentList	paramName		3080607	1					
ANR	3080622	Argument	paramName		3080607	0					
ANR	3080623	Identifier	paramName		3080607	0					
ANR	3080624	IdentifierDeclStatement	"char * dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" ) ;"	1063:1:27569:27620	3080607	2	True				
ANR	3080625	IdentifierDecl	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080607	0					
ANR	3080626	IdentifierDeclType	char *		3080607	0					
ANR	3080627	Identifier	dirName		3080607	1					
ANR	3080628	AssignmentExpression	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080607	2		=			
ANR	3080629	Identifier	dirName		3080607	0					
ANR	3080630	CallExpression	"param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080607	1					
ANR	3080631	Callee	param		3080607	0					
ANR	3080632	Identifier	param		3080607	0					
ANR	3080633	ArgumentList	"""STARTD.PER_JOB_HISTORY_DIR"""		3080607	1					
ANR	3080634	Argument	"""STARTD.PER_JOB_HISTORY_DIR"""		3080607	0					
ANR	3080635	PrimaryExpression	"""STARTD.PER_JOB_HISTORY_DIR"""		3080607	0					
ANR	3080636	IfStatement	if ( ! dirName )		3080607	3					
ANR	3080637	Condition	! dirName	1064:5:27628:27635	3080607	0	True				
ANR	3080638	UnaryOperationExpression	! dirName		3080607	0					
ANR	3080639	UnaryOperator	!		3080607	0					
ANR	3080640	Identifier	dirName		3080607	1					
ANR	3080641	CompoundStatement		6:15:134:134	3080607	1					
ANR	3080642	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"	1065:2:27642:27734	3080607	0	True				
ANR	3080643	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"		3080607	0					
ANR	3080644	Callee	dprintf		3080607	0					
ANR	3080645	Identifier	dprintf		3080607	0					
ANR	3080646	ArgumentList	D_ALWAYS		3080607	1					
ANR	3080647	Argument	D_ALWAYS		3080607	0					
ANR	3080648	Identifier	D_ALWAYS		3080607	0					
ANR	3080649	Argument	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		3080607	1					
ANR	3080650	PrimaryExpression	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		3080607	0					
ANR	3080651	ExpressionStatement	stream -> code ( result )	1066:2:27738:27758	3080607	1	True				
ANR	3080652	CallExpression	stream -> code ( result )		3080607	0					
ANR	3080653	Callee	stream -> code		3080607	0					
ANR	3080654	PtrMemberAccess	stream -> code		3080607	0					
ANR	3080655	Identifier	stream		3080607	0					
ANR	3080656	Identifier	code		3080607	1					
ANR	3080657	ArgumentList	result		3080607	1					
ANR	3080658	Argument	result		3080607	0					
ANR	3080659	Identifier	result		3080607	0					
ANR	3080660	ExpressionStatement	stream -> end_of_message ( )	1067:2:27762:27786	3080607	2	True				
ANR	3080661	CallExpression	stream -> end_of_message ( )		3080607	0					
ANR	3080662	Callee	stream -> end_of_message		3080607	0					
ANR	3080663	PtrMemberAccess	stream -> end_of_message		3080607	0					
ANR	3080664	Identifier	stream		3080607	0					
ANR	3080665	Identifier	end_of_message		3080607	1					
ANR	3080666	ArgumentList			3080607	1					
ANR	3080667	ReturnStatement	return FALSE ;	1068:2:27790:27802	3080607	3	True				
ANR	3080668	Identifier	FALSE		3080607	0					
ANR	3080669	IdentifierDeclStatement	Directory d ( dirName ) ;	1071:1:27809:27829	3080607	4	True				
ANR	3080670	IdentifierDecl	d ( dirName )		3080607	0					
ANR	3080671	IdentifierDeclType	Directory		3080607	0					
ANR	3080672	Identifier	d		3080607	1					
ANR	3080673	Identifier	dirName		3080607	2					
ANR	3080674	IdentifierDeclStatement	const char * filename ;	1072:1:27832:27852	3080607	5	True				
ANR	3080675	IdentifierDecl	* filename		3080607	0					
ANR	3080676	IdentifierDeclType	const char *		3080607	0					
ANR	3080677	Identifier	filename		3080607	1					
ANR	3080678	IdentifierDeclStatement	int one = 1 ;	1073:1:27855:27864	3080607	6	True				
ANR	3080679	IdentifierDecl	one = 1		3080607	0					
ANR	3080680	IdentifierDeclType	int		3080607	0					
ANR	3080681	Identifier	one		3080607	1					
ANR	3080682	AssignmentExpression	one = 1		3080607	2		=			
ANR	3080683	Identifier	one		3080607	0					
ANR	3080684	PrimaryExpression	1		3080607	1					
ANR	3080685	IdentifierDeclStatement	int zero = 0 ;	1074:1:27867:27877	3080607	7	True				
ANR	3080686	IdentifierDecl	zero = 0		3080607	0					
ANR	3080687	IdentifierDeclType	int		3080607	0					
ANR	3080688	Identifier	zero		3080607	1					
ANR	3080689	AssignmentExpression	zero = 0		3080607	2		=			
ANR	3080690	Identifier	zero		3080607	0					
ANR	3080691	PrimaryExpression	0		3080607	1					
ANR	3080692	WhileStatement	while ( ( filename = d . Next ( ) ) )		3080607	8					
ANR	3080693	Condition	filename = d . Next ( )	1075:8:27887:27907	3080607	0	True				
ANR	3080694	AssignmentExpression	filename = d . Next ( )		3080607	0		=			
ANR	3080695	Identifier	filename		3080607	0					
ANR	3080696	CallExpression	d . Next ( )		3080607	1					
ANR	3080697	Callee	d . Next		3080607	0					
ANR	3080698	MemberAccess	d . Next		3080607	0					
ANR	3080699	Identifier	d		3080607	0					
ANR	3080700	Identifier	Next		3080607	1					
ANR	3080701	ArgumentList			3080607	1					
ANR	3080702	CompoundStatement		23:2:542:602	3080607	1					
ANR	3080703	ExpressionStatement	stream -> code ( one )	1076:2:27914:27931	3080607	0	True				
ANR	3080704	CallExpression	stream -> code ( one )		3080607	0					
ANR	3080705	Callee	stream -> code		3080607	0					
ANR	3080706	PtrMemberAccess	stream -> code		3080607	0					
ANR	3080707	Identifier	stream		3080607	0					
ANR	3080708	Identifier	code		3080607	1					
ANR	3080709	ArgumentList	one		3080607	1					
ANR	3080710	Argument	one		3080607	0					
ANR	3080711	Identifier	one		3080607	0					
ANR	3080712	ExpressionStatement	stream -> put ( filename )	1077:2:27948:27969	3080607	1	True				
ANR	3080713	CallExpression	stream -> put ( filename )		3080607	0					
ANR	3080714	Callee	stream -> put		3080607	0					
ANR	3080715	PtrMemberAccess	stream -> put		3080607	0					
ANR	3080716	Identifier	stream		3080607	0					
ANR	3080717	Identifier	put		3080607	1					
ANR	3080718	ArgumentList	filename		3080607	1					
ANR	3080719	Argument	filename		3080607	0					
ANR	3080720	Identifier	filename		3080607	0					
ANR	3080721	IdentifierDeclStatement	MyString fullPath ( dirName ) ;	1078:2:27973:27999	3080607	2	True				
ANR	3080722	IdentifierDecl	fullPath ( dirName )		3080607	0					
ANR	3080723	IdentifierDeclType	MyString		3080607	0					
ANR	3080724	Identifier	fullPath		3080607	1					
ANR	3080725	Identifier	dirName		3080607	2					
ANR	3080726	ExpressionStatement	"fullPath += ""/"""	1079:2:28003:28018	3080607	3	True				
ANR	3080727	AssignmentExpression	"fullPath += ""/"""		3080607	0		+=			
ANR	3080728	Identifier	fullPath		3080607	0					
ANR	3080729	PrimaryExpression	"""/"""		3080607	1					
ANR	3080730	ExpressionStatement	fullPath += filename	1080:2:28022:28042	3080607	4	True				
ANR	3080731	AssignmentExpression	fullPath += filename		3080607	0		+=			
ANR	3080732	Identifier	fullPath		3080607	0					
ANR	3080733	Identifier	filename		3080607	1					
ANR	3080734	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY ) ;"	1081:2:28046:28106	3080607	5	True				
ANR	3080735	IdentifierDecl	"fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		3080607	0					
ANR	3080736	IdentifierDeclType	int		3080607	0					
ANR	3080737	Identifier	fd		3080607	1					
ANR	3080738	AssignmentExpression	"fd = safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		3080607	2		=			
ANR	3080739	Identifier	fd		3080607	0					
ANR	3080740	CallExpression	"safe_open_wrapper_follow ( fullPath . Value ( ) , O_RDONLY )"		3080607	1					
ANR	3080741	Callee	safe_open_wrapper_follow		3080607	0					
ANR	3080742	Identifier	safe_open_wrapper_follow		3080607	0					
ANR	3080743	ArgumentList	fullPath . Value ( )		3080607	1					
ANR	3080744	Argument	fullPath . Value ( )		3080607	0					
ANR	3080745	CallExpression	fullPath . Value ( )		3080607	0					
ANR	3080746	Callee	fullPath . Value		3080607	0					
ANR	3080747	MemberAccess	fullPath . Value		3080607	0					
ANR	3080748	Identifier	fullPath		3080607	0					
ANR	3080749	Identifier	Value		3080607	1					
ANR	3080750	ArgumentList			3080607	1					
ANR	3080751	Argument	O_RDONLY		3080607	1					
ANR	3080752	Identifier	O_RDONLY		3080607	0					
ANR	3080753	IfStatement	if ( fd > 0 )		3080607	6					
ANR	3080754	Condition	fd > 0	1082:6:28114:28119	3080607	0	True				
ANR	3080755	RelationalExpression	fd > 0		3080607	0		>			
ANR	3080756	Identifier	fd		3080607	0					
ANR	3080757	PrimaryExpression	0		3080607	1					
ANR	3080758	CompoundStatement		25:3:623:638	3080607	1					
ANR	3080759	IdentifierDeclStatement	filesize_t size ;	1083:3:28127:28142	3080607	0	True				
ANR	3080760	IdentifierDecl	size		3080607	0					
ANR	3080761	IdentifierDeclType	filesize_t		3080607	0					
ANR	3080762	Identifier	size		3080607	1					
ANR	3080763	ExpressionStatement	"stream -> put_file ( & size , fd )"	1084:3:28147:28174	3080607	1	True				
ANR	3080764	CallExpression	"stream -> put_file ( & size , fd )"		3080607	0					
ANR	3080765	Callee	stream -> put_file		3080607	0					
ANR	3080766	PtrMemberAccess	stream -> put_file		3080607	0					
ANR	3080767	Identifier	stream		3080607	0					
ANR	3080768	Identifier	put_file		3080607	1					
ANR	3080769	ArgumentList	& size		3080607	1					
ANR	3080770	Argument	& size		3080607	0					
ANR	3080771	UnaryOperationExpression	& size		3080607	0					
ANR	3080772	UnaryOperator	&		3080607	0					
ANR	3080773	Identifier	size		3080607	1					
ANR	3080774	Argument	fd		3080607	1					
ANR	3080775	Identifier	fd		3080607	0					
ANR	3080776	ExpressionStatement	free ( dirName )	1088:1:28185:28198	3080607	9	True				
ANR	3080777	CallExpression	free ( dirName )		3080607	0					
ANR	3080778	Callee	free		3080607	0					
ANR	3080779	Identifier	free		3080607	0					
ANR	3080780	ArgumentList	dirName		3080607	1					
ANR	3080781	Argument	dirName		3080607	0					
ANR	3080782	Identifier	dirName		3080607	0					
ANR	3080783	ExpressionStatement	stream -> code ( zero )	1090:1:28202:28220	3080607	10	True				
ANR	3080784	CallExpression	stream -> code ( zero )		3080607	0					
ANR	3080785	Callee	stream -> code		3080607	0					
ANR	3080786	PtrMemberAccess	stream -> code		3080607	0					
ANR	3080787	Identifier	stream		3080607	0					
ANR	3080788	Identifier	code		3080607	1					
ANR	3080789	ArgumentList	zero		3080607	1					
ANR	3080790	Argument	zero		3080607	0					
ANR	3080791	Identifier	zero		3080607	0					
ANR	3080792	ExpressionStatement	stream -> end_of_message ( )	1091:1:28239:28263	3080607	11	True				
ANR	3080793	CallExpression	stream -> end_of_message ( )		3080607	0					
ANR	3080794	Callee	stream -> end_of_message		3080607	0					
ANR	3080795	PtrMemberAccess	stream -> end_of_message		3080607	0					
ANR	3080796	Identifier	stream		3080607	0					
ANR	3080797	Identifier	end_of_message		3080607	1					
ANR	3080798	ArgumentList			3080607	1					
ANR	3080799	ReturnStatement	return 0 ;	1092:1:28266:28274	3080607	12	True				
ANR	3080800	PrimaryExpression	0		3080607	0					
ANR	3080801	ReturnType	int		3080607	1					
ANR	3080802	Identifier	handle_fetch_log_history_dir		3080607	2					
ANR	3080803	ParameterList	"ReliSock * stream , char * paramName"		3080607	3					
ANR	3080804	Parameter	ReliSock * stream	1059:29:27468:27483	3080607	0	True				
ANR	3080805	ParameterType	ReliSock *		3080607	0					
ANR	3080806	Identifier	stream		3080607	1					
ANR	3080807	Parameter	char * paramName	1059:47:27486:27500	3080607	1	True				
ANR	3080808	ParameterType	char *		3080607	0					
ANR	3080809	Identifier	paramName		3080607	1					
ANR	3080810	CFGEntryNode	ENTRY		3080607		True				
ANR	3080811	CFGExitNode	EXIT		3080607		True				
ANR	3080812	Symbol	fullPath		3080607						
ANR	3080813	Symbol	d . Next		3080607						
ANR	3080814	Symbol	safe_open_wrapper_follow		3080607						
ANR	3080815	Symbol	d		3080607						
ANR	3080816	Symbol	one		3080607						
ANR	3080817	Symbol	D_ALWAYS		3080607						
ANR	3080818	Symbol	paramName		3080607						
ANR	3080819	Symbol	& size		3080607						
ANR	3080820	Symbol	result		3080607						
ANR	3080821	Symbol	zero		3080607						
ANR	3080822	Symbol	filename		3080607						
ANR	3080823	Symbol	O_RDONLY		3080607						
ANR	3080824	Symbol	size		3080607						
ANR	3080825	Symbol	stream		3080607						
ANR	3080826	Symbol	param		3080607						
ANR	3080827	Symbol	fullPath . Value		3080607						
ANR	3080828	Symbol	FALSE		3080607						
ANR	3080829	Symbol	DC_FETCH_LOG_RESULT_BAD_TYPE		3080607						
ANR	3080830	Symbol	fd		3080607						
ANR	3080831	Symbol	dirName		3080607						
ANR	3080832	Function	handle_fetch_log_history_purge	1095:0:28279:28900							
ANR	3080833	FunctionDef	handle_fetch_log_history_purge (ReliSock * s)		3080832	0					
ANR	3080834	CompoundStatement		1096:44:28327:28900	3080832	0					
ANR	3080835	IdentifierDeclStatement	int result = 0 ;	1098:1:28331:28345	3080832	0	True				
ANR	3080836	IdentifierDecl	result = 0		3080832	0					
ANR	3080837	IdentifierDeclType	int		3080832	0					
ANR	3080838	Identifier	result		3080832	1					
ANR	3080839	AssignmentExpression	result = 0		3080832	2		=			
ANR	3080840	Identifier	result		3080832	0					
ANR	3080841	PrimaryExpression	0		3080832	1					
ANR	3080842	IdentifierDeclStatement	time_t cutoff = 0 ;	1099:1:28348:28365	3080832	1	True				
ANR	3080843	IdentifierDecl	cutoff = 0		3080832	0					
ANR	3080844	IdentifierDeclType	time_t		3080832	0					
ANR	3080845	Identifier	cutoff		3080832	1					
ANR	3080846	AssignmentExpression	cutoff = 0		3080832	2		=			
ANR	3080847	Identifier	cutoff		3080832	0					
ANR	3080848	PrimaryExpression	0		3080832	1					
ANR	3080849	ExpressionStatement	s -> code ( cutoff )	1100:1:28368:28383	3080832	2	True				
ANR	3080850	CallExpression	s -> code ( cutoff )		3080832	0					
ANR	3080851	Callee	s -> code		3080832	0					
ANR	3080852	PtrMemberAccess	s -> code		3080832	0					
ANR	3080853	Identifier	s		3080832	0					
ANR	3080854	Identifier	code		3080832	1					
ANR	3080855	ArgumentList	cutoff		3080832	1					
ANR	3080856	Argument	cutoff		3080832	0					
ANR	3080857	Identifier	cutoff		3080832	0					
ANR	3080858	ExpressionStatement	s -> end_of_message ( )	1101:1:28386:28405	3080832	3	True				
ANR	3080859	CallExpression	s -> end_of_message ( )		3080832	0					
ANR	3080860	Callee	s -> end_of_message		3080832	0					
ANR	3080861	PtrMemberAccess	s -> end_of_message		3080832	0					
ANR	3080862	Identifier	s		3080832	0					
ANR	3080863	Identifier	end_of_message		3080832	1					
ANR	3080864	ArgumentList			3080832	1					
ANR	3080865	ExpressionStatement	s -> encode ( )	1103:1:28409:28420	3080832	4	True				
ANR	3080866	CallExpression	s -> encode ( )		3080832	0					
ANR	3080867	Callee	s -> encode		3080832	0					
ANR	3080868	PtrMemberAccess	s -> encode		3080832	0					
ANR	3080869	Identifier	s		3080832	0					
ANR	3080870	Identifier	encode		3080832	1					
ANR	3080871	ArgumentList			3080832	1					
ANR	3080872	IdentifierDeclStatement	"char * dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" ) ;"	1105:1:28424:28475	3080832	5	True				
ANR	3080873	IdentifierDecl	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080832	0					
ANR	3080874	IdentifierDeclType	char *		3080832	0					
ANR	3080875	Identifier	dirName		3080832	1					
ANR	3080876	AssignmentExpression	"* dirName = param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080832	2		=			
ANR	3080877	Identifier	dirName		3080832	0					
ANR	3080878	CallExpression	"param ( ""STARTD.PER_JOB_HISTORY_DIR"" )"		3080832	1					
ANR	3080879	Callee	param		3080832	0					
ANR	3080880	Identifier	param		3080832	0					
ANR	3080881	ArgumentList	"""STARTD.PER_JOB_HISTORY_DIR"""		3080832	1					
ANR	3080882	Argument	"""STARTD.PER_JOB_HISTORY_DIR"""		3080832	0					
ANR	3080883	PrimaryExpression	"""STARTD.PER_JOB_HISTORY_DIR"""		3080832	0					
ANR	3080884	IfStatement	if ( ! dirName )		3080832	6					
ANR	3080885	Condition	! dirName	1106:5:28483:28490	3080832	0	True				
ANR	3080886	UnaryOperationExpression	! dirName		3080832	0					
ANR	3080887	UnaryOperator	!		3080832	0					
ANR	3080888	Identifier	dirName		3080832	1					
ANR	3080889	CompoundStatement		11:15:165:165	3080832	1					
ANR	3080890	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"	1107:2:28497:28589	3080832	0	True				
ANR	3080891	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"" )"		3080832	0					
ANR	3080892	Callee	dprintf		3080832	0					
ANR	3080893	Identifier	dprintf		3080832	0					
ANR	3080894	ArgumentList	D_ALWAYS		3080832	1					
ANR	3080895	Argument	D_ALWAYS		3080832	0					
ANR	3080896	Identifier	D_ALWAYS		3080832	0					
ANR	3080897	Argument	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		3080832	1					
ANR	3080898	PrimaryExpression	"""DaemonCore: handle_fetch_log_history_dir: no parameter named PER_JOB\\n"""		3080832	0					
ANR	3080899	ExpressionStatement	s -> code ( result )	1108:2:28593:28608	3080832	1	True				
ANR	3080900	CallExpression	s -> code ( result )		3080832	0					
ANR	3080901	Callee	s -> code		3080832	0					
ANR	3080902	PtrMemberAccess	s -> code		3080832	0					
ANR	3080903	Identifier	s		3080832	0					
ANR	3080904	Identifier	code		3080832	1					
ANR	3080905	ArgumentList	result		3080832	1					
ANR	3080906	Argument	result		3080832	0					
ANR	3080907	Identifier	result		3080832	0					
ANR	3080908	ExpressionStatement	s -> end_of_message ( )	1109:2:28612:28631	3080832	2	True				
ANR	3080909	CallExpression	s -> end_of_message ( )		3080832	0					
ANR	3080910	Callee	s -> end_of_message		3080832	0					
ANR	3080911	PtrMemberAccess	s -> end_of_message		3080832	0					
ANR	3080912	Identifier	s		3080832	0					
ANR	3080913	Identifier	end_of_message		3080832	1					
ANR	3080914	ArgumentList			3080832	1					
ANR	3080915	ReturnStatement	return FALSE ;	1110:2:28635:28647	3080832	3	True				
ANR	3080916	Identifier	FALSE		3080832	0					
ANR	3080917	IdentifierDeclStatement	Directory d ( dirName ) ;	1113:1:28654:28674	3080832	7	True				
ANR	3080918	IdentifierDecl	d ( dirName )		3080832	0					
ANR	3080919	IdentifierDeclType	Directory		3080832	0					
ANR	3080920	Identifier	d		3080832	1					
ANR	3080921	Identifier	dirName		3080832	2					
ANR	3080922	ExpressionStatement	result = 1	1115:1:28678:28688	3080832	8	True				
ANR	3080923	AssignmentExpression	result = 1		3080832	0		=			
ANR	3080924	Identifier	result		3080832	0					
ANR	3080925	PrimaryExpression	1		3080832	1					
ANR	3080926	WhileStatement	while ( d . Next ( ) )		3080832	9					
ANR	3080927	Condition	d . Next ( )	1116:8:28698:28705	3080832	0	True				
ANR	3080928	CallExpression	d . Next ( )		3080832	0					
ANR	3080929	Callee	d . Next		3080832	0					
ANR	3080930	MemberAccess	d . Next		3080832	0					
ANR	3080931	Identifier	d		3080832	0					
ANR	3080932	Identifier	Next		3080832	1					
ANR	3080933	ArgumentList			3080832	1					
ANR	3080934	CompoundStatement		22:2:384:415	3080832	1					
ANR	3080935	IdentifierDeclStatement	time_t last = d . GetModifyTime ( ) ;	1117:2:28712:28743	3080832	0	True				
ANR	3080936	IdentifierDecl	last = d . GetModifyTime ( )		3080832	0					
ANR	3080937	IdentifierDeclType	time_t		3080832	0					
ANR	3080938	Identifier	last		3080832	1					
ANR	3080939	AssignmentExpression	last = d . GetModifyTime ( )		3080832	2		=			
ANR	3080940	Identifier	last		3080832	0					
ANR	3080941	CallExpression	d . GetModifyTime ( )		3080832	1					
ANR	3080942	Callee	d . GetModifyTime		3080832	0					
ANR	3080943	MemberAccess	d . GetModifyTime		3080832	0					
ANR	3080944	Identifier	d		3080832	0					
ANR	3080945	Identifier	GetModifyTime		3080832	1					
ANR	3080946	ArgumentList			3080832	1					
ANR	3080947	IfStatement	if ( last < cutoff )		3080832	1					
ANR	3080948	Condition	last < cutoff	1118:6:28751:28763	3080832	0	True				
ANR	3080949	RelationalExpression	last < cutoff		3080832	0		<			
ANR	3080950	Identifier	last		3080832	0					
ANR	3080951	Identifier	cutoff		3080832	1					
ANR	3080952	CompoundStatement		23:21:438:438	3080832	1					
ANR	3080953	ExpressionStatement	d . Remove_Current_File ( )	1119:3:28771:28794	3080832	0	True				
ANR	3080954	CallExpression	d . Remove_Current_File ( )		3080832	0					
ANR	3080955	Callee	d . Remove_Current_File		3080832	0					
ANR	3080956	MemberAccess	d . Remove_Current_File		3080832	0					
ANR	3080957	Identifier	d		3080832	0					
ANR	3080958	Identifier	Remove_Current_File		3080832	1					
ANR	3080959	ArgumentList			3080832	1					
ANR	3080960	ExpressionStatement	free ( dirName )	1123:4:28808:28821	3080832	10	True				
ANR	3080961	CallExpression	free ( dirName )		3080832	0					
ANR	3080962	Callee	free		3080832	0					
ANR	3080963	Identifier	free		3080832	0					
ANR	3080964	ArgumentList	dirName		3080832	1					
ANR	3080965	Argument	dirName		3080832	0					
ANR	3080966	Identifier	dirName		3080832	0					
ANR	3080967	ExpressionStatement	s -> code ( result )	1125:4:28828:28843	3080832	11	True				
ANR	3080968	CallExpression	s -> code ( result )		3080832	0					
ANR	3080969	Callee	s -> code		3080832	0					
ANR	3080970	PtrMemberAccess	s -> code		3080832	0					
ANR	3080971	Identifier	s		3080832	0					
ANR	3080972	Identifier	code		3080832	1					
ANR	3080973	ArgumentList	result		3080832	1					
ANR	3080974	Argument	result		3080832	0					
ANR	3080975	Identifier	result		3080832	0					
ANR	3080976	ExpressionStatement	s -> end_of_message ( )	1126:4:28865:28884	3080832	12	True				
ANR	3080977	CallExpression	s -> end_of_message ( )		3080832	0					
ANR	3080978	Callee	s -> end_of_message		3080832	0					
ANR	3080979	PtrMemberAccess	s -> end_of_message		3080832	0					
ANR	3080980	Identifier	s		3080832	0					
ANR	3080981	Identifier	end_of_message		3080832	1					
ANR	3080982	ArgumentList			3080832	1					
ANR	3080983	ReturnStatement	return 0 ;	1127:4:28890:28898	3080832	13	True				
ANR	3080984	PrimaryExpression	0		3080832	0					
ANR	3080985	ReturnType	int		3080832	1					
ANR	3080986	Identifier	handle_fetch_log_history_purge		3080832	2					
ANR	3080987	ParameterList	ReliSock * s		3080832	3					
ANR	3080988	Parameter	ReliSock * s	1096:31:28314:28324	3080832	0	True				
ANR	3080989	ParameterType	ReliSock *		3080832	0					
ANR	3080990	Identifier	s		3080832	1					
ANR	3080991	CFGEntryNode	ENTRY		3080832		True				
ANR	3080992	CFGExitNode	EXIT		3080832		True				
ANR	3080993	Symbol	result		3080832						
ANR	3080994	Symbol	d . Next		3080832						
ANR	3080995	Symbol	s		3080832						
ANR	3080996	Symbol	d		3080832						
ANR	3080997	Symbol	last		3080832						
ANR	3080998	Symbol	param		3080832						
ANR	3080999	Symbol	D_ALWAYS		3080832						
ANR	3081000	Symbol	FALSE		3080832						
ANR	3081001	Symbol	cutoff		3080832						
ANR	3081002	Symbol	dirName		3080832						
ANR	3081003	Symbol	d . GetModifyTime		3080832						
ANR	3081004	DeclStmt									
ANR	3081005	Decl							int	int	result
ANR	3081006	DeclStmt									
ANR	3081007	Decl							char	char *	key_id
ANR	3081008	DeclStmt									
ANR	3081009	Decl							char	char *	param_name
ANR	3081010	Decl							char	char *	tmp
ANR	3081011	DeclStmt									
ANR	3081012	Decl							char	char *	admin
ANR	3081013	Decl							char	char *	config
ANR	3081014	DeclStmt									
ANR	3081015	Decl							char	char *	to_check
ANR	3081016	DeclStmt									
ANR	3081017	Decl							int	int	rval
ANR	3081018	DeclStmt									
ANR	3081019	Decl							bool	bool	failed
ANR	3081020	Function	dc_reconfig	1360:0:33516:35651							
ANR	3081021	FunctionDef	dc_reconfig ()		3081020	0					
ANR	3081022	CompoundStatement		1362:0:33535:35651	3081020	0					
ANR	3081023	ExpressionStatement	daemonCore -> refreshDNS ( )	1364:1:33594:33618	3081020	0	True				
ANR	3081024	CallExpression	daemonCore -> refreshDNS ( )		3081020	0					
ANR	3081025	Callee	daemonCore -> refreshDNS		3081020	0					
ANR	3081026	PtrMemberAccess	daemonCore -> refreshDNS		3081020	0					
ANR	3081027	Identifier	daemonCore		3081020	0					
ANR	3081028	Identifier	refreshDNS		3081020	1					
ANR	3081029	ArgumentList			3081020	1					
ANR	3081030	ExpressionStatement	config ( 0 )	1376:1:34141:34150	3081020	1	True				
ANR	3081031	CallExpression	config ( 0 )		3081020	0					
ANR	3081032	Callee	config		3081020	0					
ANR	3081033	Identifier	config		3081020	0					
ANR	3081034	ArgumentList	0		3081020	1					
ANR	3081035	Argument	0		3081020	0					
ANR	3081036	PrimaryExpression	0		3081020	0					
ANR	3081037	IfStatement	if ( doCoreInit )		3081020	2					
ANR	3081038	Condition	doCoreInit	1379:6:34219:34228	3081020	0	True				
ANR	3081039	Identifier	doCoreInit		3081020	0					
ANR	3081040	CompoundStatement		18:19:696:696	3081020	1					
ANR	3081041	ExpressionStatement	check_core_files ( )	1380:2:34236:34254	3081020	0	True				
ANR	3081042	CallExpression	check_core_files ( )		3081020	0					
ANR	3081043	Callee	check_core_files		3081020	0					
ANR	3081044	Identifier	check_core_files		3081020	0					
ANR	3081045	ArgumentList			3081020	1					
ANR	3081046	IfStatement	if ( logDir )		3081020	3					
ANR	3081047	Condition	logDir	1384:5:34336:34341	3081020	0	True				
ANR	3081048	Identifier	logDir		3081020	0					
ANR	3081049	CompoundStatement		23:14:809:809	3081020	1					
ANR	3081050	ExpressionStatement	set_log_dir ( )	1385:2:34349:34362	3081020	0	True				
ANR	3081051	CallExpression	set_log_dir ( )		3081020	0					
ANR	3081052	Callee	set_log_dir		3081020	0					
ANR	3081053	Identifier	set_log_dir		3081020	0					
ANR	3081054	ArgumentList			3081020	1					
ANR	3081055	IfStatement	if ( logAppend )		3081020	4					
ANR	3081056	Condition	logAppend	1388:5:34373:34381	3081020	0	True				
ANR	3081057	Identifier	logAppend		3081020	0					
ANR	3081058	CompoundStatement		27:17:849:849	3081020	1					
ANR	3081059	ExpressionStatement	handle_log_append ( logAppend )	1389:2:34389:34419	3081020	0	True				
ANR	3081060	CallExpression	handle_log_append ( logAppend )		3081020	0					
ANR	3081061	Callee	handle_log_append		3081020	0					
ANR	3081062	Identifier	handle_log_append		3081020	0					
ANR	3081063	ArgumentList	logAppend		3081020	1					
ANR	3081064	Argument	logAppend		3081020	0					
ANR	3081065	Identifier	logAppend		3081020	0					
ANR	3081066	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	1393:1:34497:34564	3081020	5	True				
ANR	3081067	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		3081020	0					
ANR	3081068	Callee	dprintf_config		3081020	0					
ANR	3081069	Identifier	dprintf_config		3081020	0					
ANR	3081070	ArgumentList	get_mySubSystem ( ) -> getName ( )		3081020	1					
ANR	3081071	Argument	get_mySubSystem ( ) -> getName ( )		3081020	0					
ANR	3081072	CallExpression	get_mySubSystem ( ) -> getName ( )		3081020	0					
ANR	3081073	Callee	get_mySubSystem ( ) -> getName		3081020	0					
ANR	3081074	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081020	0					
ANR	3081075	CallExpression	get_mySubSystem ( )		3081020	0					
ANR	3081076	Callee	get_mySubSystem		3081020	0					
ANR	3081077	Identifier	get_mySubSystem		3081020	0					
ANR	3081078	ArgumentList			3081020	1					
ANR	3081079	Identifier	getName		3081020	1					
ANR	3081080	ArgumentList			3081020	1					
ANR	3081081	Argument	get_param_functions ( )		3081020	1					
ANR	3081082	CallExpression	get_param_functions ( )		3081020	0					
ANR	3081083	Callee	get_param_functions		3081020	0					
ANR	3081084	Identifier	get_param_functions		3081020	0					
ANR	3081085	ArgumentList			3081020	1					
ANR	3081086	ExpressionStatement	drop_core_in_log ( )	1397:1:34711:34729	3081020	6	True				
ANR	3081087	CallExpression	drop_core_in_log ( )		3081020	0					
ANR	3081088	Callee	drop_core_in_log		3081020	0					
ANR	3081089	Identifier	drop_core_in_log		3081020	0					
ANR	3081090	ArgumentList			3081020	1					
ANR	3081091	ExpressionStatement	daemonCore -> reconfig ( )	1401:1:34845:34867	3081020	7	True				
ANR	3081092	CallExpression	daemonCore -> reconfig ( )		3081020	0					
ANR	3081093	Callee	daemonCore -> reconfig		3081020	0					
ANR	3081094	PtrMemberAccess	daemonCore -> reconfig		3081020	0					
ANR	3081095	Identifier	daemonCore		3081020	0					
ANR	3081096	Identifier	reconfig		3081020	1					
ANR	3081097	ArgumentList			3081020	1					
ANR	3081098	ExpressionStatement	clear_passwd_cache ( )	1404:1:34903:34923	3081020	8	True				
ANR	3081099	CallExpression	clear_passwd_cache ( )		3081020	0					
ANR	3081100	Callee	clear_passwd_cache		3081020	0					
ANR	3081101	Identifier	clear_passwd_cache		3081020	0					
ANR	3081102	ArgumentList			3081020	1					
ANR	3081103	ExpressionStatement	drop_addr_file ( )	1407:1:34991:35007	3081020	9	True				
ANR	3081104	CallExpression	drop_addr_file ( )		3081020	0					
ANR	3081105	Callee	drop_addr_file		3081020	0					
ANR	3081106	Identifier	drop_addr_file		3081020	0					
ANR	3081107	ArgumentList			3081020	1					
ANR	3081108	IfStatement	if ( pidFile )		3081020	10					
ANR	3081109	Condition	pidFile	1410:5:35078:35084	3081020	0	True				
ANR	3081110	Identifier	pidFile		3081020	0					
ANR	3081111	CompoundStatement		49:15:1552:1552	3081020	1					
ANR	3081112	ExpressionStatement	drop_pid_file ( )	1411:2:35092:35107	3081020	0	True				
ANR	3081113	CallExpression	drop_pid_file ( )		3081020	0					
ANR	3081114	Callee	drop_pid_file		3081020	0					
ANR	3081115	Identifier	drop_pid_file		3081020	0					
ANR	3081116	ArgumentList			3081020	1					
ANR	3081117	IdentifierDeclStatement	char * ptmp ;	1416:1:35234:35244	3081020	11	True				
ANR	3081118	IdentifierDecl	* ptmp		3081020	0					
ANR	3081119	IdentifierDeclType	char *		3081020	0					
ANR	3081120	Identifier	ptmp		3081020	1					
ANR	3081121	IfStatement	"if ( param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false ) )"		3081020	12					
ANR	3081122	Condition	"param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false )"	1417:6:35252:35303	3081020	0	True				
ANR	3081123	CallExpression	"param_boolean_crufty ( ""DROP_CORE_ON_RECONFIG"" , false )"		3081020	0					
ANR	3081124	Callee	param_boolean_crufty		3081020	0					
ANR	3081125	Identifier	param_boolean_crufty		3081020	0					
ANR	3081126	ArgumentList	"""DROP_CORE_ON_RECONFIG"""		3081020	1					
ANR	3081127	Argument	"""DROP_CORE_ON_RECONFIG"""		3081020	0					
ANR	3081128	PrimaryExpression	"""DROP_CORE_ON_RECONFIG"""		3081020	0					
ANR	3081129	Argument	false		3081020	1					
ANR	3081130	Identifier	false		3081020	0					
ANR	3081131	CompoundStatement		59:3:1837:1850	3081020	1					
ANR	3081132	ExpressionStatement	ptmp = NULL	1419:3:35357:35368	3081020	0	True				
ANR	3081133	AssignmentExpression	ptmp = NULL		3081020	0		=			
ANR	3081134	Identifier	ptmp		3081020	0					
ANR	3081135	Identifier	NULL		3081020	1					
ANR	3081136	IdentifierDeclStatement	char segfault ;	1420:3:35373:35386	3081020	1	True				
ANR	3081137	IdentifierDecl	segfault		3081020	0					
ANR	3081138	IdentifierDeclType	char		3081020	0					
ANR	3081139	Identifier	segfault		3081020	1					
ANR	3081140	ExpressionStatement	segfault = * ptmp	1421:3:35392:35408	3081020	2	True				
ANR	3081141	AssignmentExpression	segfault = * ptmp		3081020	0		=			
ANR	3081142	Identifier	segfault		3081020	0					
ANR	3081143	UnaryOperationExpression	* ptmp		3081020	1					
ANR	3081144	UnaryOperator	*		3081020	0					
ANR	3081145	Identifier	ptmp		3081020	1					
ANR	3081146	IfStatement	if ( segfault )		3081020	3					
ANR	3081147	Condition	segfault	1422:7:35440:35447	3081020	0	True				
ANR	3081148	Identifier	segfault		3081020	0					
ANR	3081149	CompoundStatement		61:17:1914:1914	3081020	1					
ANR	3081150	ExpressionStatement	ptmp [ 0 ] = 'a'	1423:3:35492:35505	3081020	4	True				
ANR	3081151	AssignmentExpression	ptmp [ 0 ] = 'a'		3081020	0		=			
ANR	3081152	ArrayIndexing	ptmp [ 0 ]		3081020	0					
ANR	3081153	Identifier	ptmp		3081020	0					
ANR	3081154	PrimaryExpression	0		3081020	1					
ANR	3081155	PrimaryExpression	'a'		3081020	1					
ANR	3081156	ExpressionStatement	"EXCEPT ( ""FAILED TO DROP CORE"" )"	1426:3:35550:35579	3081020	5	True				
ANR	3081157	CallExpression	"EXCEPT ( ""FAILED TO DROP CORE"" )"		3081020	0					
ANR	3081158	Callee	EXCEPT		3081020	0					
ANR	3081159	Identifier	EXCEPT		3081020	0					
ANR	3081160	ArgumentList	"""FAILED TO DROP CORE"""		3081020	1					
ANR	3081161	Argument	"""FAILED TO DROP CORE"""		3081020	0					
ANR	3081162	PrimaryExpression	"""FAILED TO DROP CORE"""		3081020	0					
ANR	3081163	ExpressionStatement	dc_main_config ( )	1430:1:35633:35649	3081020	13	True				
ANR	3081164	CallExpression	dc_main_config ( )		3081020	0					
ANR	3081165	Callee	dc_main_config		3081020	0					
ANR	3081166	Identifier	dc_main_config		3081020	0					
ANR	3081167	ArgumentList			3081020	1					
ANR	3081168	ReturnType	void		3081020	1					
ANR	3081169	Identifier	dc_reconfig		3081020	2					
ANR	3081170	ParameterList			3081020	3					
ANR	3081171	CFGEntryNode	ENTRY		3081020		True				
ANR	3081172	CFGExitNode	EXIT		3081020		True				
ANR	3081173	Symbol	doCoreInit		3081020						
ANR	3081174	Symbol	NULL		3081020						
ANR	3081175	Symbol	get_mySubSystem ( ) -> getName		3081020						
ANR	3081176	Symbol	* get_mySubSystem		3081020						
ANR	3081177	Symbol	get_param_functions		3081020						
ANR	3081178	Symbol	segfault		3081020						
ANR	3081179	Symbol	false		3081020						
ANR	3081180	Symbol	pidFile		3081020						
ANR	3081181	Symbol	logAppend		3081020						
ANR	3081182	Symbol	ptmp		3081020						
ANR	3081183	Symbol	daemonCore		3081020						
ANR	3081184	Symbol	param_boolean_crufty		3081020						
ANR	3081185	Symbol	get_mySubSystem		3081020						
ANR	3081186	Symbol	logDir		3081020						
ANR	3081187	Symbol	* ptmp		3081020						
ANR	3081188	Function	TimerHandler_main_shutdown_fast	1442:0:35793:35860							
ANR	3081189	FunctionDef	TimerHandler_main_shutdown_fast ()		3081188	0					
ANR	3081190	CompoundStatement		1444:0:35832:35860	3081188	0					
ANR	3081191	ExpressionStatement	dc_main_shutdown_fast ( )	1445:1:35835:35858	3081188	0	True				
ANR	3081192	CallExpression	dc_main_shutdown_fast ( )		3081188	0					
ANR	3081193	Callee	dc_main_shutdown_fast		3081188	0					
ANR	3081194	Identifier	dc_main_shutdown_fast		3081188	0					
ANR	3081195	ArgumentList			3081188	1					
ANR	3081196	ReturnType	void		3081188	1					
ANR	3081197	Identifier	TimerHandler_main_shutdown_fast		3081188	2					
ANR	3081198	ParameterList			3081188	3					
ANR	3081199	CFGEntryNode	ENTRY		3081188		True				
ANR	3081200	CFGExitNode	EXIT		3081188		True				
ANR	3081201	DeclStmt									
ANR	3081202	Decl							int	int	been_here
ANR	3081203	DeclStmt									
ANR	3081204	Decl							int	int	timeout
ANR	3081205	Function	TimerHandler_dc_sigterm	1486:0:36819:36887							
ANR	3081206	FunctionDef	TimerHandler_dc_sigterm ()		3081205	0					
ANR	3081207	CompoundStatement		1488:0:36850:36887	3081205	0					
ANR	3081208	ExpressionStatement	"handle_dc_sigterm ( NULL , SIGTERM )"	1489:1:36853:36885	3081205	0	True				
ANR	3081209	CallExpression	"handle_dc_sigterm ( NULL , SIGTERM )"		3081205	0					
ANR	3081210	Callee	handle_dc_sigterm		3081205	0					
ANR	3081211	Identifier	handle_dc_sigterm		3081205	0					
ANR	3081212	ArgumentList	NULL		3081205	1					
ANR	3081213	Argument	NULL		3081205	0					
ANR	3081214	Identifier	NULL		3081205	0					
ANR	3081215	Argument	SIGTERM		3081205	1					
ANR	3081216	Identifier	SIGTERM		3081205	0					
ANR	3081217	ReturnType	void		3081205	1					
ANR	3081218	Identifier	TimerHandler_dc_sigterm		3081205	2					
ANR	3081219	ParameterList			3081205	3					
ANR	3081220	CFGEntryNode	ENTRY		3081205		True				
ANR	3081221	CFGExitNode	EXIT		3081205		True				
ANR	3081222	Symbol	NULL		3081205						
ANR	3081223	Symbol	SIGTERM		3081205						
ANR	3081224	DeclStmt									
ANR	3081225	Decl							int	int	been_here
ANR	3081226	Function	handle_gcb_recovery_failed	1509:0:37227:37404							
ANR	3081227	FunctionDef	handle_gcb_recovery_failed ()		3081226	0					
ANR	3081228	CompoundStatement		1511:0:37262:37404	3081226	0					
ANR	3081229	Statement	dprintf	1512:1:37265:37271	3081226	0	True				
ANR	3081230	Statement	(	1512:8:37272:37272	3081226	1	True				
ANR	3081231	Statement	D_ALWAYS	1512:10:37274:37281	3081226	2	True				
ANR	3081232	Statement	","	1512:18:37282:37282	3081226	3	True				
ANR	3081233	Statement	"""GCB failed to recover from a failure with the """	1512:20:37284:37331	3081226	4	True				
ANR	3081234	Statement	"""Broker. Performing fast shutdown.\\n"""	1513:4:37337:37373	3081226	5	True				
ANR	3081235	Statement	)	1513:42:37375:37375	3081226	6	True				
ANR	3081236	ExpressionStatement		1513:43:37376:37376	3081226	7	True				
ANR	3081237	ExpressionStatement	dc_main_shutdown_fast ( )	1514:1:37379:37402	3081226	8	True				
ANR	3081238	CallExpression	dc_main_shutdown_fast ( )		3081226	0					
ANR	3081239	Callee	dc_main_shutdown_fast		3081226	0					
ANR	3081240	Identifier	dc_main_shutdown_fast		3081226	0					
ANR	3081241	ArgumentList			3081226	1					
ANR	3081242	ReturnType	void		3081226	1					
ANR	3081243	Identifier	handle_gcb_recovery_failed		3081226	2					
ANR	3081244	ParameterList			3081226	3					
ANR	3081245	CFGEntryNode	ENTRY		3081226		True				
ANR	3081246	CFGExitNode	EXIT		3081226		True				
ANR	3081247	Function	gcb_recovery_failed_callback	1518:0:37424:37784							
ANR	3081248	FunctionDef	gcb_recovery_failed_callback ()		3081247	0					
ANR	3081249	CompoundStatement		1520:0:37467:37784	3081247	0					
ANR	3081250	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , handle_gcb_recovery_failed , ""handle_gcb_recovery_failed"" )"	1525:1:37685:37782	3081247	0	True				
ANR	3081251	CallExpression	"daemonCore -> Register_Timer ( 0 , handle_gcb_recovery_failed , ""handle_gcb_recovery_failed"" )"		3081247	0					
ANR	3081252	Callee	daemonCore -> Register_Timer		3081247	0					
ANR	3081253	PtrMemberAccess	daemonCore -> Register_Timer		3081247	0					
ANR	3081254	Identifier	daemonCore		3081247	0					
ANR	3081255	Identifier	Register_Timer		3081247	1					
ANR	3081256	ArgumentList	0		3081247	1					
ANR	3081257	Argument	0		3081247	0					
ANR	3081258	PrimaryExpression	0		3081247	0					
ANR	3081259	Argument	handle_gcb_recovery_failed		3081247	1					
ANR	3081260	Identifier	handle_gcb_recovery_failed		3081247	0					
ANR	3081261	Argument	"""handle_gcb_recovery_failed"""		3081247	2					
ANR	3081262	PrimaryExpression	"""handle_gcb_recovery_failed"""		3081247	0					
ANR	3081263	ReturnType	static void		3081247	1					
ANR	3081264	Identifier	gcb_recovery_failed_callback		3081247	2					
ANR	3081265	ParameterList			3081247	3					
ANR	3081266	CFGEntryNode	ENTRY		3081247		True				
ANR	3081267	CFGExitNode	EXIT		3081247		True				
ANR	3081268	Symbol	daemonCore		3081247						
ANR	3081269	Symbol	handle_gcb_recovery_failed		3081247						
ANR	3081270	Function	dc_main	1534:0:38034:65150							
ANR	3081271	FunctionDef	"dc_main (int argc , char * * argv)"		3081270	0					
ANR	3081272	CompoundStatement		1535:0:38071:65150	3081270	0					
ANR	3081273	IdentifierDeclStatement	char * * ptr ;	1536:1:38074:38084	3081270	0	True				
ANR	3081274	IdentifierDecl	* * ptr		3081270	0					
ANR	3081275	IdentifierDeclType	char * *		3081270	0					
ANR	3081276	Identifier	ptr		3081270	1					
ANR	3081277	IdentifierDeclStatement	int command_port = - 1 ;	1537:1:38087:38109	3081270	1	True				
ANR	3081278	IdentifierDecl	command_port = - 1		3081270	0					
ANR	3081279	IdentifierDeclType	int		3081270	0					
ANR	3081280	Identifier	command_port		3081270	1					
ANR	3081281	AssignmentExpression	command_port = - 1		3081270	2		=			
ANR	3081282	Identifier	command_port		3081270	0					
ANR	3081283	UnaryOperationExpression	- 1		3081270	1					
ANR	3081284	UnaryOperator	-		3081270	0					
ANR	3081285	PrimaryExpression	1		3081270	1					
ANR	3081286	IdentifierDeclStatement	char const * daemon_sock_name = NULL ;	1538:1:38112:38147	3081270	2	True				
ANR	3081287	IdentifierDecl	* daemon_sock_name = NULL		3081270	0					
ANR	3081288	IdentifierDeclType	char const *		3081270	0					
ANR	3081289	Identifier	daemon_sock_name		3081270	1					
ANR	3081290	AssignmentExpression	* daemon_sock_name = NULL		3081270	2		=			
ANR	3081291	Identifier	NULL		3081270	0					
ANR	3081292	Identifier	NULL		3081270	1					
ANR	3081293	IdentifierDeclStatement	int dcargs = 0 ;	1539:1:38150:38165	3081270	3	True				
ANR	3081294	IdentifierDecl	dcargs = 0		3081270	0					
ANR	3081295	IdentifierDeclType	int		3081270	0					
ANR	3081296	Identifier	dcargs		3081270	1					
ANR	3081297	AssignmentExpression	dcargs = 0		3081270	2		=			
ANR	3081298	Identifier	dcargs		3081270	0					
ANR	3081299	PrimaryExpression	0		3081270	1					
ANR	3081300	IdentifierDeclStatement	"char * ptmp , * ptmp1 ;"	1540:1:38218:38236	3081270	4	True				
ANR	3081301	IdentifierDecl	* ptmp		3081270	0					
ANR	3081302	IdentifierDeclType	char *		3081270	0					
ANR	3081303	Identifier	ptmp		3081270	1					
ANR	3081304	IdentifierDecl	* ptmp1		3081270	1					
ANR	3081305	IdentifierDeclType	char *		3081270	0					
ANR	3081306	Identifier	ptmp1		3081270	1					
ANR	3081307	IdentifierDeclStatement	int i ;	1541:1:38239:38245	3081270	5	True				
ANR	3081308	IdentifierDecl	i		3081270	0					
ANR	3081309	IdentifierDeclType	int		3081270	0					
ANR	3081310	Identifier	i		3081270	1					
ANR	3081311	IdentifierDeclStatement	"int wantsKill = FALSE , wantsQuiet = FALSE ;"	1542:1:38248:38290	3081270	6	True				
ANR	3081312	IdentifierDecl	wantsKill = FALSE		3081270	0					
ANR	3081313	IdentifierDeclType	int		3081270	0					
ANR	3081314	Identifier	wantsKill		3081270	1					
ANR	3081315	AssignmentExpression	wantsKill = FALSE		3081270	2		=			
ANR	3081316	Identifier	FALSE		3081270	0					
ANR	3081317	Identifier	FALSE		3081270	1					
ANR	3081318	IdentifierDecl	wantsQuiet = FALSE		3081270	1					
ANR	3081319	IdentifierDeclType	int		3081270	0					
ANR	3081320	Identifier	wantsQuiet		3081270	1					
ANR	3081321	AssignmentExpression	wantsQuiet = FALSE		3081270	2		=			
ANR	3081322	Identifier	FALSE		3081270	0					
ANR	3081323	Identifier	FALSE		3081270	1					
ANR	3081324	IdentifierDeclStatement	bool done ;	1543:1:38293:38302	3081270	7	True				
ANR	3081325	IdentifierDecl	done		3081270	0					
ANR	3081326	IdentifierDeclType	bool		3081270	0					
ANR	3081327	Identifier	done		3081270	1					
ANR	3081328	ExpressionStatement	condor_main_argc = argc	1546:1:38307:38330	3081270	8	True				
ANR	3081329	AssignmentExpression	condor_main_argc = argc		3081270	0		=			
ANR	3081330	Identifier	condor_main_argc		3081270	0					
ANR	3081331	Identifier	argc		3081270	1					
ANR	3081332	ExpressionStatement	condor_main_argv = ( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )	1547:1:38333:38392	3081270	9	True				
ANR	3081333	AssignmentExpression	condor_main_argv = ( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )		3081270	0		=			
ANR	3081334	Identifier	condor_main_argv		3081270	0					
ANR	3081335	CastExpression	( char * * ) malloc ( ( argc + 1 ) * sizeof ( char * ) )		3081270	1					
ANR	3081336	CastTarget	char * *		3081270	0					
ANR	3081337	CallExpression	malloc ( ( argc + 1 ) * sizeof ( char * ) )		3081270	1					
ANR	3081338	Callee	malloc		3081270	0					
ANR	3081339	Identifier	malloc		3081270	0					
ANR	3081340	ArgumentList	( argc + 1 ) * sizeof ( char * )		3081270	1					
ANR	3081341	Argument	( argc + 1 ) * sizeof ( char * )		3081270	0					
ANR	3081342	MultiplicativeExpression	( argc + 1 ) * sizeof ( char * )		3081270	0		*			
ANR	3081343	AdditiveExpression	argc + 1		3081270	0		+			
ANR	3081344	Identifier	argc		3081270	0					
ANR	3081345	PrimaryExpression	1		3081270	1					
ANR	3081346	SizeofExpression	sizeof ( char * )		3081270	1					
ANR	3081347	Sizeof	sizeof		3081270	0					
ANR	3081348	SizeofOperand	char *		3081270	1					
ANR	3081349	ForStatement	for ( i = 0 ; i < argc ; i ++ )		3081270	10					
ANR	3081350	ForInit	i = 0 ;	1548:5:38399:38402	3081270	0	True				
ANR	3081351	AssignmentExpression	i = 0		3081270	0		=			
ANR	3081352	Identifier	i		3081270	0					
ANR	3081353	PrimaryExpression	0		3081270	1					
ANR	3081354	Condition	i < argc	1548:9:38403:38408	3081270	1	True				
ANR	3081355	RelationalExpression	i < argc		3081270	0		<			
ANR	3081356	Identifier	i		3081270	0					
ANR	3081357	Identifier	argc		3081270	1					
ANR	3081358	PostIncDecOperationExpression	i ++	1548:16:38410:38412	3081270	2	True				
ANR	3081359	Identifier	i		3081270	0					
ANR	3081360	IncDec	++		3081270	1					
ANR	3081361	CompoundStatement		14:21:343:343	3081270	3					
ANR	3081362	ExpressionStatement	condor_main_argv [ i ] = strdup ( argv [ i ] )	1549:2:38419:38456	3081270	0	True				
ANR	3081363	AssignmentExpression	condor_main_argv [ i ] = strdup ( argv [ i ] )		3081270	0		=			
ANR	3081364	ArrayIndexing	condor_main_argv [ i ]		3081270	0					
ANR	3081365	Identifier	condor_main_argv		3081270	0					
ANR	3081366	Identifier	i		3081270	1					
ANR	3081367	CallExpression	strdup ( argv [ i ] )		3081270	1					
ANR	3081368	Callee	strdup		3081270	0					
ANR	3081369	Identifier	strdup		3081270	0					
ANR	3081370	ArgumentList	argv [ i ]		3081270	1					
ANR	3081371	Argument	argv [ i ]		3081270	0					
ANR	3081372	ArrayIndexing	argv [ i ]		3081270	0					
ANR	3081373	Identifier	argv		3081270	0					
ANR	3081374	Identifier	i		3081270	1					
ANR	3081375	ExpressionStatement	condor_main_argv [ i ] = NULL	1551:1:38462:38488	3081270	11	True				
ANR	3081376	AssignmentExpression	condor_main_argv [ i ] = NULL		3081270	0		=			
ANR	3081377	ArrayIndexing	condor_main_argv [ i ]		3081270	0					
ANR	3081378	Identifier	condor_main_argv		3081270	0					
ANR	3081379	Identifier	i		3081270	1					
ANR	3081380	Identifier	NULL		3081270	1					
ANR	3081381	ExpressionStatement	_set_printf_count_output ( TRUE )	1556:1:38583:38613	3081270	12	True				
ANR	3081382	CallExpression	_set_printf_count_output ( TRUE )		3081270	0					
ANR	3081383	Callee	_set_printf_count_output		3081270	0					
ANR	3081384	Identifier	_set_printf_count_output		3081270	0					
ANR	3081385	ArgumentList	TRUE		3081270	1					
ANR	3081386	Argument	TRUE		3081270	0					
ANR	3081387	Identifier	TRUE		3081270	0					
ANR	3081388	ExpressionStatement	umask ( 022 )	1562:1:38765:38777	3081270	13	True				
ANR	3081389	CallExpression	umask ( 022 )		3081270	0					
ANR	3081390	Callee	umask		3081270	0					
ANR	3081391	Identifier	umask		3081270	0					
ANR	3081392	ArgumentList	022		3081270	1					
ANR	3081393	Argument	022		3081270	0					
ANR	3081394	PrimaryExpression	022		3081270	0					
ANR	3081395	IdentifierDeclStatement	sigset_t fullset ;	1567:1:38890:38906	3081270	14	True				
ANR	3081396	IdentifierDecl	fullset		3081270	0					
ANR	3081397	IdentifierDeclType	sigset_t		3081270	0					
ANR	3081398	Identifier	fullset		3081270	1					
ANR	3081399	ExpressionStatement	sigfillset ( & fullset )	1568:1:38909:38931	3081270	15	True				
ANR	3081400	CallExpression	sigfillset ( & fullset )		3081270	0					
ANR	3081401	Callee	sigfillset		3081270	0					
ANR	3081402	Identifier	sigfillset		3081270	0					
ANR	3081403	ArgumentList	& fullset		3081270	1					
ANR	3081404	Argument	& fullset		3081270	0					
ANR	3081405	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081406	UnaryOperator	&		3081270	0					
ANR	3081407	Identifier	fullset		3081270	1					
ANR	3081408	ExpressionStatement	"sigdelset ( & fullset , SIGSEGV )"	1570:4:38992:39020	3081270	16	True				
ANR	3081409	CallExpression	"sigdelset ( & fullset , SIGSEGV )"		3081270	0					
ANR	3081410	Callee	sigdelset		3081270	0					
ANR	3081411	Identifier	sigdelset		3081270	0					
ANR	3081412	ArgumentList	& fullset		3081270	1					
ANR	3081413	Argument	& fullset		3081270	0					
ANR	3081414	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081415	UnaryOperator	&		3081270	0					
ANR	3081416	Identifier	fullset		3081270	1					
ANR	3081417	Argument	SIGSEGV		3081270	1					
ANR	3081418	Identifier	SIGSEGV		3081270	0					
ANR	3081419	ExpressionStatement	"sigdelset ( & fullset , SIGABRT )"	1571:4:39057:39085	3081270	17	True				
ANR	3081420	CallExpression	"sigdelset ( & fullset , SIGABRT )"		3081270	0					
ANR	3081421	Callee	sigdelset		3081270	0					
ANR	3081422	Identifier	sigdelset		3081270	0					
ANR	3081423	ArgumentList	& fullset		3081270	1					
ANR	3081424	Argument	& fullset		3081270	0					
ANR	3081425	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081426	UnaryOperator	&		3081270	0					
ANR	3081427	Identifier	fullset		3081270	1					
ANR	3081428	Argument	SIGABRT		3081270	1					
ANR	3081429	Identifier	SIGABRT		3081270	0					
ANR	3081430	ExpressionStatement	"sigdelset ( & fullset , SIGILL )"	1572:4:39136:39163	3081270	18	True				
ANR	3081431	CallExpression	"sigdelset ( & fullset , SIGILL )"		3081270	0					
ANR	3081432	Callee	sigdelset		3081270	0					
ANR	3081433	Identifier	sigdelset		3081270	0					
ANR	3081434	ArgumentList	& fullset		3081270	1					
ANR	3081435	Argument	& fullset		3081270	0					
ANR	3081436	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081437	UnaryOperator	&		3081270	0					
ANR	3081438	Identifier	fullset		3081270	1					
ANR	3081439	Argument	SIGILL		3081270	1					
ANR	3081440	Identifier	SIGILL		3081270	0					
ANR	3081441	ExpressionStatement	"sigdelset ( & fullset , SIGBUS )"	1573:4:39201:39228	3081270	19	True				
ANR	3081442	CallExpression	"sigdelset ( & fullset , SIGBUS )"		3081270	0					
ANR	3081443	Callee	sigdelset		3081270	0					
ANR	3081444	Identifier	sigdelset		3081270	0					
ANR	3081445	ArgumentList	& fullset		3081270	1					
ANR	3081446	Argument	& fullset		3081270	0					
ANR	3081447	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081448	UnaryOperator	&		3081270	0					
ANR	3081449	Identifier	fullset		3081270	1					
ANR	3081450	Argument	SIGBUS		3081270	1					
ANR	3081451	Identifier	SIGBUS		3081270	0					
ANR	3081452	ExpressionStatement	"sigdelset ( & fullset , SIGFPE )"	1574:4:39266:39293	3081270	20	True				
ANR	3081453	CallExpression	"sigdelset ( & fullset , SIGFPE )"		3081270	0					
ANR	3081454	Callee	sigdelset		3081270	0					
ANR	3081455	Identifier	sigdelset		3081270	0					
ANR	3081456	ArgumentList	& fullset		3081270	1					
ANR	3081457	Argument	& fullset		3081270	0					
ANR	3081458	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081459	UnaryOperator	&		3081270	0					
ANR	3081460	Identifier	fullset		3081270	1					
ANR	3081461	Argument	SIGFPE		3081270	1					
ANR	3081462	Identifier	SIGFPE		3081270	0					
ANR	3081463	ExpressionStatement	"sigdelset ( & fullset , SIGTRAP )"	1575:4:39331:39359	3081270	21	True				
ANR	3081464	CallExpression	"sigdelset ( & fullset , SIGTRAP )"		3081270	0					
ANR	3081465	Callee	sigdelset		3081270	0					
ANR	3081466	Identifier	sigdelset		3081270	0					
ANR	3081467	ArgumentList	& fullset		3081270	1					
ANR	3081468	Argument	& fullset		3081270	0					
ANR	3081469	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081470	UnaryOperator	&		3081270	0					
ANR	3081471	Identifier	fullset		3081270	1					
ANR	3081472	Argument	SIGTRAP		3081270	1					
ANR	3081473	Identifier	SIGTRAP		3081270	0					
ANR	3081474	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"	1576:1:39399:39441	3081270	22	True				
ANR	3081475	CallExpression	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"		3081270	0					
ANR	3081476	Callee	sigprocmask		3081270	0					
ANR	3081477	Identifier	sigprocmask		3081270	0					
ANR	3081478	ArgumentList	SIG_SETMASK		3081270	1					
ANR	3081479	Argument	SIG_SETMASK		3081270	0					
ANR	3081480	Identifier	SIG_SETMASK		3081270	0					
ANR	3081481	Argument	& fullset		3081270	1					
ANR	3081482	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081483	UnaryOperator	&		3081270	0					
ANR	3081484	Identifier	fullset		3081270	1					
ANR	3081485	Argument	NULL		3081270	2					
ANR	3081486	Identifier	NULL		3081270	0					
ANR	3081487	ExpressionStatement	"install_sig_handler_with_mask ( SIGQUIT , & fullset , unix_sigquit )"	1580:1:39556:39618	3081270	23	True				
ANR	3081488	CallExpression	"install_sig_handler_with_mask ( SIGQUIT , & fullset , unix_sigquit )"		3081270	0					
ANR	3081489	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081490	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081491	ArgumentList	SIGQUIT		3081270	1					
ANR	3081492	Argument	SIGQUIT		3081270	0					
ANR	3081493	Identifier	SIGQUIT		3081270	0					
ANR	3081494	Argument	& fullset		3081270	1					
ANR	3081495	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081496	UnaryOperator	&		3081270	0					
ANR	3081497	Identifier	fullset		3081270	1					
ANR	3081498	Argument	unix_sigquit		3081270	2					
ANR	3081499	Identifier	unix_sigquit		3081270	0					
ANR	3081500	ExpressionStatement	"install_sig_handler_with_mask ( SIGHUP , & fullset , unix_sighup )"	1581:1:39621:39681	3081270	24	True				
ANR	3081501	CallExpression	"install_sig_handler_with_mask ( SIGHUP , & fullset , unix_sighup )"		3081270	0					
ANR	3081502	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081503	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081504	ArgumentList	SIGHUP		3081270	1					
ANR	3081505	Argument	SIGHUP		3081270	0					
ANR	3081506	Identifier	SIGHUP		3081270	0					
ANR	3081507	Argument	& fullset		3081270	1					
ANR	3081508	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081509	UnaryOperator	&		3081270	0					
ANR	3081510	Identifier	fullset		3081270	1					
ANR	3081511	Argument	unix_sighup		3081270	2					
ANR	3081512	Identifier	unix_sighup		3081270	0					
ANR	3081513	ExpressionStatement	"install_sig_handler_with_mask ( SIGTERM , & fullset , unix_sigterm )"	1582:1:39684:39746	3081270	25	True				
ANR	3081514	CallExpression	"install_sig_handler_with_mask ( SIGTERM , & fullset , unix_sigterm )"		3081270	0					
ANR	3081515	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081516	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081517	ArgumentList	SIGTERM		3081270	1					
ANR	3081518	Argument	SIGTERM		3081270	0					
ANR	3081519	Identifier	SIGTERM		3081270	0					
ANR	3081520	Argument	& fullset		3081270	1					
ANR	3081521	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081522	UnaryOperator	&		3081270	0					
ANR	3081523	Identifier	fullset		3081270	1					
ANR	3081524	Argument	unix_sigterm		3081270	2					
ANR	3081525	Identifier	unix_sigterm		3081270	0					
ANR	3081526	ExpressionStatement	"install_sig_handler_with_mask ( SIGCHLD , & fullset , unix_sigchld )"	1583:1:39749:39811	3081270	26	True				
ANR	3081527	CallExpression	"install_sig_handler_with_mask ( SIGCHLD , & fullset , unix_sigchld )"		3081270	0					
ANR	3081528	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081529	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081530	ArgumentList	SIGCHLD		3081270	1					
ANR	3081531	Argument	SIGCHLD		3081270	0					
ANR	3081532	Identifier	SIGCHLD		3081270	0					
ANR	3081533	Argument	& fullset		3081270	1					
ANR	3081534	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081535	UnaryOperator	&		3081270	0					
ANR	3081536	Identifier	fullset		3081270	1					
ANR	3081537	Argument	unix_sigchld		3081270	2					
ANR	3081538	Identifier	unix_sigchld		3081270	0					
ANR	3081539	ExpressionStatement	"install_sig_handler_with_mask ( SIGUSR1 , & fullset , unix_sigusr1 )"	1584:1:39814:39876	3081270	27	True				
ANR	3081540	CallExpression	"install_sig_handler_with_mask ( SIGUSR1 , & fullset , unix_sigusr1 )"		3081270	0					
ANR	3081541	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081542	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081543	ArgumentList	SIGUSR1		3081270	1					
ANR	3081544	Argument	SIGUSR1		3081270	0					
ANR	3081545	Identifier	SIGUSR1		3081270	0					
ANR	3081546	Argument	& fullset		3081270	1					
ANR	3081547	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081548	UnaryOperator	&		3081270	0					
ANR	3081549	Identifier	fullset		3081270	1					
ANR	3081550	Argument	unix_sigusr1		3081270	2					
ANR	3081551	Identifier	unix_sigusr1		3081270	0					
ANR	3081552	ExpressionStatement	"install_sig_handler_with_mask ( SIGUSR2 , & fullset , unix_sigusr2 )"	1585:1:39879:39941	3081270	28	True				
ANR	3081553	CallExpression	"install_sig_handler_with_mask ( SIGUSR2 , & fullset , unix_sigusr2 )"		3081270	0					
ANR	3081554	Callee	install_sig_handler_with_mask		3081270	0					
ANR	3081555	Identifier	install_sig_handler_with_mask		3081270	0					
ANR	3081556	ArgumentList	SIGUSR2		3081270	1					
ANR	3081557	Argument	SIGUSR2		3081270	0					
ANR	3081558	Identifier	SIGUSR2		3081270	0					
ANR	3081559	Argument	& fullset		3081270	1					
ANR	3081560	UnaryOperationExpression	& fullset		3081270	0					
ANR	3081561	UnaryOperator	&		3081270	0					
ANR	3081562	Identifier	fullset		3081270	1					
ANR	3081563	Argument	unix_sigusr2		3081270	2					
ANR	3081564	Identifier	unix_sigusr2		3081270	0					
ANR	3081565	ExpressionStatement	"install_sig_handler ( SIGPIPE , SIG_IGN )"	1586:1:39944:39982	3081270	29	True				
ANR	3081566	CallExpression	"install_sig_handler ( SIGPIPE , SIG_IGN )"		3081270	0					
ANR	3081567	Callee	install_sig_handler		3081270	0					
ANR	3081568	Identifier	install_sig_handler		3081270	0					
ANR	3081569	ArgumentList	SIGPIPE		3081270	1					
ANR	3081570	Argument	SIGPIPE		3081270	0					
ANR	3081571	Identifier	SIGPIPE		3081270	0					
ANR	3081572	Argument	SIG_IGN		3081270	1					
ANR	3081573	Identifier	SIG_IGN		3081270	0					
ANR	3081574	ExpressionStatement	_condor_myServiceName = argv [ 0 ]	1590:1:40013:40044	3081270	30	True				
ANR	3081575	AssignmentExpression	_condor_myServiceName = argv [ 0 ]		3081270	0		=			
ANR	3081576	Identifier	_condor_myServiceName		3081270	0					
ANR	3081577	ArrayIndexing	argv [ 0 ]		3081270	1					
ANR	3081578	Identifier	argv		3081270	0					
ANR	3081579	PrimaryExpression	0		3081270	1					
ANR	3081580	ExpressionStatement	myName = condor_basename ( argv [ 0 ] )	1592:1:40103:40136	3081270	31	True				
ANR	3081581	AssignmentExpression	myName = condor_basename ( argv [ 0 ] )		3081270	0		=			
ANR	3081582	Identifier	myName		3081270	0					
ANR	3081583	CallExpression	condor_basename ( argv [ 0 ] )		3081270	1					
ANR	3081584	Callee	condor_basename		3081270	0					
ANR	3081585	Identifier	condor_basename		3081270	0					
ANR	3081586	ArgumentList	argv [ 0 ]		3081270	1					
ANR	3081587	Argument	argv [ 0 ]		3081270	0					
ANR	3081588	ArrayIndexing	argv [ 0 ]		3081270	0					
ANR	3081589	Identifier	argv		3081270	0					
ANR	3081590	PrimaryExpression	0		3081270	1					
ANR	3081591	ExpressionStatement	myFullName = getExecPath ( )	1593:1:40139:40165	3081270	32	True				
ANR	3081592	AssignmentExpression	myFullName = getExecPath ( )		3081270	0		=			
ANR	3081593	Identifier	myFullName		3081270	0					
ANR	3081594	CallExpression	getExecPath ( )		3081270	1					
ANR	3081595	Callee	getExecPath		3081270	0					
ANR	3081596	Identifier	getExecPath		3081270	0					
ANR	3081597	ArgumentList			3081270	1					
ANR	3081598	IfStatement	if ( ! myFullName )		3081270	33					
ANR	3081599	Condition	! myFullName	1594:5:40172:40183	3081270	0	True				
ANR	3081600	UnaryOperationExpression	! myFullName		3081270	0					
ANR	3081601	UnaryOperator	!		3081270	0					
ANR	3081602	Identifier	myFullName		3081270	1					
ANR	3081603	CompoundStatement		60:20:2115:2115	3081270	1					
ANR	3081604	IfStatement	if ( argv [ 0 ] [ 0 ] == '/' )		3081270	0					
ANR	3081605	Condition	argv [ 0 ] [ 0 ] == '/'	1597:6:40303:40319	3081270	0	True				
ANR	3081606	EqualityExpression	argv [ 0 ] [ 0 ] == '/'		3081270	0		==			
ANR	3081607	ArrayIndexing	argv [ 0 ] [ 0 ]		3081270	0					
ANR	3081608	ArrayIndexing	argv [ 0 ]		3081270	0					
ANR	3081609	Identifier	argv		3081270	0					
ANR	3081610	PrimaryExpression	0		3081270	1					
ANR	3081611	PrimaryExpression	0		3081270	1					
ANR	3081612	PrimaryExpression	'/'		3081270	1					
ANR	3081613	CompoundStatement		63:26:2251:2251	3081270	1					
ANR	3081614	ExpressionStatement	myFullName = strdup ( argv [ 0 ] )	1599:3:40367:40395	3081270	0	True				
ANR	3081615	AssignmentExpression	myFullName = strdup ( argv [ 0 ] )		3081270	0		=			
ANR	3081616	Identifier	myFullName		3081270	0					
ANR	3081617	CallExpression	strdup ( argv [ 0 ] )		3081270	1					
ANR	3081618	Callee	strdup		3081270	0					
ANR	3081619	Identifier	strdup		3081270	0					
ANR	3081620	ArgumentList	argv [ 0 ]		3081270	1					
ANR	3081621	Argument	argv [ 0 ]		3081270	0					
ANR	3081622	ArrayIndexing	argv [ 0 ]		3081270	0					
ANR	3081623	Identifier	argv		3081270	0					
ANR	3081624	PrimaryExpression	0		3081270	1					
ANR	3081625	ElseStatement	else		3081270	0					
ANR	3081626	CompoundStatement		66:9:2334:2334	3081270	0					
ANR	3081627	ExpressionStatement	myFullName = NULL	1602:3:40467:40484	3081270	0	True				
ANR	3081628	AssignmentExpression	myFullName = NULL		3081270	0		=			
ANR	3081629	Identifier	myFullName		3081270	0					
ANR	3081630	Identifier	NULL		3081270	1					
ANR	3081631	ExpressionStatement	"myDistro -> Init ( argc , argv )"	1606:1:40495:40523	3081270	34	True				
ANR	3081632	CallExpression	"myDistro -> Init ( argc , argv )"		3081270	0					
ANR	3081633	Callee	myDistro -> Init		3081270	0					
ANR	3081634	PtrMemberAccess	myDistro -> Init		3081270	0					
ANR	3081635	Identifier	myDistro		3081270	0					
ANR	3081636	Identifier	Init		3081270	1					
ANR	3081637	ArgumentList	argc		3081270	1					
ANR	3081638	Argument	argc		3081270	0					
ANR	3081639	Identifier	argc		3081270	0					
ANR	3081640	Argument	argv		3081270	1					
ANR	3081641	Identifier	argv		3081270	0					
ANR	3081642	IfStatement	if ( EnvInit ( ) < 0 )		3081270	35					
ANR	3081643	Condition	EnvInit ( ) < 0	1607:6:40531:40543	3081270	0	True				
ANR	3081644	RelationalExpression	EnvInit ( ) < 0		3081270	0		<			
ANR	3081645	CallExpression	EnvInit ( )		3081270	0					
ANR	3081646	Callee	EnvInit		3081270	0					
ANR	3081647	Identifier	EnvInit		3081270	0					
ANR	3081648	ArgumentList			3081270	1					
ANR	3081649	PrimaryExpression	0		3081270	1					
ANR	3081650	CompoundStatement		73:22:2475:2475	3081270	1					
ANR	3081651	ExpressionStatement	exit ( 1 )	1608:2:40551:40560	3081270	0	True				
ANR	3081652	CallExpression	exit ( 1 )		3081270	0					
ANR	3081653	Callee	exit		3081270	0					
ANR	3081654	Identifier	exit		3081270	0					
ANR	3081655	ArgumentList	1		3081270	1					
ANR	3081656	Argument	1		3081270	0					
ANR	3081657	PrimaryExpression	1		3081270	0					
ANR	3081658	IfStatement	if ( dc_main_pre_dc_init )		3081270	36					
ANR	3081659	Condition	dc_main_pre_dc_init	1614:6:40724:40742	3081270	0	True				
ANR	3081660	Identifier	dc_main_pre_dc_init		3081270	0					
ANR	3081661	CompoundStatement		80:28:2674:2674	3081270	1					
ANR	3081662	ExpressionStatement	"dc_main_pre_dc_init ( argc , argv )"	1615:2:40750:40783	3081270	0	True				
ANR	3081663	CallExpression	"dc_main_pre_dc_init ( argc , argv )"		3081270	0					
ANR	3081664	Callee	dc_main_pre_dc_init		3081270	0					
ANR	3081665	Identifier	dc_main_pre_dc_init		3081270	0					
ANR	3081666	ArgumentList	argc		3081270	1					
ANR	3081667	Argument	argc		3081270	0					
ANR	3081668	Identifier	argc		3081270	0					
ANR	3081669	Argument	argv		3081270	1					
ANR	3081670	Identifier	argv		3081270	0					
ANR	3081671	IfStatement	if ( ! get_mySubSystem ( ) )		3081270	37					
ANR	3081672	Condition	! get_mySubSystem ( )	1621:5:40957:40975	3081270	0	True				
ANR	3081673	UnaryOperationExpression	! get_mySubSystem ( )		3081270	0					
ANR	3081674	UnaryOperator	!		3081270	0					
ANR	3081675	CallExpression	get_mySubSystem ( )		3081270	1					
ANR	3081676	Callee	get_mySubSystem		3081270	0					
ANR	3081677	Identifier	get_mySubSystem		3081270	0					
ANR	3081678	ArgumentList			3081270	1					
ANR	3081679	CompoundStatement		87:27:2907:2907	3081270	1					
ANR	3081680	ExpressionStatement	"EXCEPT ( ""Programmer error: get_mySubSystem() is NULL!"" )"	1622:2:40983:41039	3081270	0	True				
ANR	3081681	CallExpression	"EXCEPT ( ""Programmer error: get_mySubSystem() is NULL!"" )"		3081270	0					
ANR	3081682	Callee	EXCEPT		3081270	0					
ANR	3081683	Identifier	EXCEPT		3081270	0					
ANR	3081684	ArgumentList	"""Programmer error: get_mySubSystem() is NULL!"""		3081270	1					
ANR	3081685	Argument	"""Programmer error: get_mySubSystem() is NULL!"""		3081270	0					
ANR	3081686	PrimaryExpression	"""Programmer error: get_mySubSystem() is NULL!"""		3081270	0					
ANR	3081687	IfStatement	if ( ! get_mySubSystem ( ) -> isValid ( ) )		3081270	38					
ANR	3081688	Condition	! get_mySubSystem ( ) -> isValid ( )	1624:5:41049:41077	3081270	0	True				
ANR	3081689	UnaryOperationExpression	! get_mySubSystem ( ) -> isValid ( )		3081270	0					
ANR	3081690	UnaryOperator	!		3081270	0					
ANR	3081691	CallExpression	get_mySubSystem ( ) -> isValid ( )		3081270	1					
ANR	3081692	Callee	get_mySubSystem ( ) -> isValid		3081270	0					
ANR	3081693	PtrMemberAccess	get_mySubSystem ( ) -> isValid		3081270	0					
ANR	3081694	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3081695	Callee	get_mySubSystem		3081270	0					
ANR	3081696	Identifier	get_mySubSystem		3081270	0					
ANR	3081697	ArgumentList			3081270	1					
ANR	3081698	Identifier	isValid		3081270	1					
ANR	3081699	ArgumentList			3081270	1					
ANR	3081700	CompoundStatement		90:37:3009:3009	3081270	1					
ANR	3081701	ExpressionStatement	get_mySubSystem ( ) -> printf ( )	1625:2:41085:41113	3081270	0	True				
ANR	3081702	CallExpression	get_mySubSystem ( ) -> printf ( )		3081270	0					
ANR	3081703	Callee	get_mySubSystem ( ) -> printf		3081270	0					
ANR	3081704	PtrMemberAccess	get_mySubSystem ( ) -> printf		3081270	0					
ANR	3081705	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3081706	Callee	get_mySubSystem		3081270	0					
ANR	3081707	Identifier	get_mySubSystem		3081270	0					
ANR	3081708	ArgumentList			3081270	1					
ANR	3081709	Identifier	printf		3081270	1					
ANR	3081710	ArgumentList			3081270	1					
ANR	3081711	ExpressionStatement	"EXCEPT ( ""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getType ( ) , get_mySubSystem ( ) -> getTypeName ( ) )"	1626:2:41117:41297	3081270	1	True				
ANR	3081712	CallExpression	"EXCEPT ( ""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getType ( ) , get_mySubSystem ( ) -> getTypeName ( ) )"		3081270	0					
ANR	3081713	Callee	EXCEPT		3081270	0					
ANR	3081714	Identifier	EXCEPT		3081270	0					
ANR	3081715	ArgumentList	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		3081270	1					
ANR	3081716	Argument	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		3081270	0					
ANR	3081717	PrimaryExpression	"""Programmer error: get_mySubSystem() info is invalid(%s,%d,%s)!"""		3081270	0					
ANR	3081718	Argument	get_mySubSystem ( ) -> getName ( )		3081270	1					
ANR	3081719	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3081720	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3081721	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3081722	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3081723	Callee	get_mySubSystem		3081270	0					
ANR	3081724	Identifier	get_mySubSystem		3081270	0					
ANR	3081725	ArgumentList			3081270	1					
ANR	3081726	Identifier	getName		3081270	1					
ANR	3081727	ArgumentList			3081270	1					
ANR	3081728	Argument	get_mySubSystem ( ) -> getType ( )		3081270	2					
ANR	3081729	CallExpression	get_mySubSystem ( ) -> getType ( )		3081270	0					
ANR	3081730	Callee	get_mySubSystem ( ) -> getType		3081270	0					
ANR	3081731	PtrMemberAccess	get_mySubSystem ( ) -> getType		3081270	0					
ANR	3081732	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3081733	Callee	get_mySubSystem		3081270	0					
ANR	3081734	Identifier	get_mySubSystem		3081270	0					
ANR	3081735	ArgumentList			3081270	1					
ANR	3081736	Identifier	getType		3081270	1					
ANR	3081737	ArgumentList			3081270	1					
ANR	3081738	Argument	get_mySubSystem ( ) -> getTypeName ( )		3081270	3					
ANR	3081739	CallExpression	get_mySubSystem ( ) -> getTypeName ( )		3081270	0					
ANR	3081740	Callee	get_mySubSystem ( ) -> getTypeName		3081270	0					
ANR	3081741	PtrMemberAccess	get_mySubSystem ( ) -> getTypeName		3081270	0					
ANR	3081742	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3081743	Callee	get_mySubSystem		3081270	0					
ANR	3081744	Identifier	get_mySubSystem		3081270	0					
ANR	3081745	ArgumentList			3081270	1					
ANR	3081746	Identifier	getTypeName		3081270	1					
ANR	3081747	ArgumentList			3081270	1					
ANR	3081748	IfStatement	if ( ! dc_main_init )		3081270	39					
ANR	3081749	Condition	! dc_main_init	1632:6:41309:41321	3081270	0	True				
ANR	3081750	UnaryOperationExpression	! dc_main_init		3081270	0					
ANR	3081751	UnaryOperator	!		3081270	0					
ANR	3081752	Identifier	dc_main_init		3081270	1					
ANR	3081753	CompoundStatement		98:22:3253:3253	3081270	1					
ANR	3081754	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_init is NULL!"" )"	1633:2:41329:41380	3081270	0	True				
ANR	3081755	CallExpression	"EXCEPT ( ""Programmer error: dc_main_init is NULL!"" )"		3081270	0					
ANR	3081756	Callee	EXCEPT		3081270	0					
ANR	3081757	Identifier	EXCEPT		3081270	0					
ANR	3081758	ArgumentList	"""Programmer error: dc_main_init is NULL!"""		3081270	1					
ANR	3081759	Argument	"""Programmer error: dc_main_init is NULL!"""		3081270	0					
ANR	3081760	PrimaryExpression	"""Programmer error: dc_main_init is NULL!"""		3081270	0					
ANR	3081761	IfStatement	if ( ! dc_main_config )		3081270	40					
ANR	3081762	Condition	! dc_main_config	1635:6:41391:41405	3081270	0	True				
ANR	3081763	UnaryOperationExpression	! dc_main_config		3081270	0					
ANR	3081764	UnaryOperator	!		3081270	0					
ANR	3081765	Identifier	dc_main_config		3081270	1					
ANR	3081766	CompoundStatement		101:24:3337:3337	3081270	1					
ANR	3081767	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_config is NULL!"" )"	1636:2:41413:41466	3081270	0	True				
ANR	3081768	CallExpression	"EXCEPT ( ""Programmer error: dc_main_config is NULL!"" )"		3081270	0					
ANR	3081769	Callee	EXCEPT		3081270	0					
ANR	3081770	Identifier	EXCEPT		3081270	0					
ANR	3081771	ArgumentList	"""Programmer error: dc_main_config is NULL!"""		3081270	1					
ANR	3081772	Argument	"""Programmer error: dc_main_config is NULL!"""		3081270	0					
ANR	3081773	PrimaryExpression	"""Programmer error: dc_main_config is NULL!"""		3081270	0					
ANR	3081774	IfStatement	if ( ! dc_main_shutdown_fast )		3081270	41					
ANR	3081775	Condition	! dc_main_shutdown_fast	1638:6:41477:41498	3081270	0	True				
ANR	3081776	UnaryOperationExpression	! dc_main_shutdown_fast		3081270	0					
ANR	3081777	UnaryOperator	!		3081270	0					
ANR	3081778	Identifier	dc_main_shutdown_fast		3081270	1					
ANR	3081779	CompoundStatement		104:31:3430:3430	3081270	1					
ANR	3081780	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_shutdown_fast is NULL!"" )"	1639:2:41506:41566	3081270	0	True				
ANR	3081781	CallExpression	"EXCEPT ( ""Programmer error: dc_main_shutdown_fast is NULL!"" )"		3081270	0					
ANR	3081782	Callee	EXCEPT		3081270	0					
ANR	3081783	Identifier	EXCEPT		3081270	0					
ANR	3081784	ArgumentList	"""Programmer error: dc_main_shutdown_fast is NULL!"""		3081270	1					
ANR	3081785	Argument	"""Programmer error: dc_main_shutdown_fast is NULL!"""		3081270	0					
ANR	3081786	PrimaryExpression	"""Programmer error: dc_main_shutdown_fast is NULL!"""		3081270	0					
ANR	3081787	IfStatement	if ( ! dc_main_shutdown_graceful )		3081270	42					
ANR	3081788	Condition	! dc_main_shutdown_graceful	1641:6:41577:41602	3081270	0	True				
ANR	3081789	UnaryOperationExpression	! dc_main_shutdown_graceful		3081270	0					
ANR	3081790	UnaryOperator	!		3081270	0					
ANR	3081791	Identifier	dc_main_shutdown_graceful		3081270	1					
ANR	3081792	CompoundStatement		107:35:3534:3534	3081270	1					
ANR	3081793	ExpressionStatement	"EXCEPT ( ""Programmer error: dc_main_shutdown_graceful is NULL!"" )"	1642:2:41610:41674	3081270	0	True				
ANR	3081794	CallExpression	"EXCEPT ( ""Programmer error: dc_main_shutdown_graceful is NULL!"" )"		3081270	0					
ANR	3081795	Callee	EXCEPT		3081270	0					
ANR	3081796	Identifier	EXCEPT		3081270	0					
ANR	3081797	ArgumentList	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		3081270	1					
ANR	3081798	Argument	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		3081270	0					
ANR	3081799	PrimaryExpression	"""Programmer error: dc_main_shutdown_graceful is NULL!"""		3081270	0					
ANR	3081800	ExpressionStatement	i = 0	1647:1:41783:41788	3081270	43	True				
ANR	3081801	AssignmentExpression	i = 0		3081270	0		=			
ANR	3081802	Identifier	i		3081270	0					
ANR	3081803	PrimaryExpression	0		3081270	1					
ANR	3081804	ExpressionStatement	done = false	1648:1:41791:41803	3081270	44	True				
ANR	3081805	AssignmentExpression	done = false		3081270	0		=			
ANR	3081806	Identifier	done		3081270	0					
ANR	3081807	Identifier	false		3081270	1					
ANR	3081808	ForStatement	"for ( ptr = argv + 1 ; * ptr && ( i < argc - 1 ) ; ptr ++ , i ++ )"		3081270	45					
ANR	3081809	ForInit	ptr = argv + 1 ;	1650:5:41811:41825	3081270	0	True				
ANR	3081810	AssignmentExpression	ptr = argv + 1		3081270	0		=			
ANR	3081811	Identifier	ptr		3081270	0					
ANR	3081812	AdditiveExpression	argv + 1		3081270	1		+			
ANR	3081813	Identifier	argv		3081270	0					
ANR	3081814	PrimaryExpression	1		3081270	1					
ANR	3081815	Condition	* ptr && ( i < argc - 1 )	1650:21:41827:41848	3081270	1	True				
ANR	3081816	AndExpression	* ptr && ( i < argc - 1 )		3081270	0		&&			
ANR	3081817	UnaryOperationExpression	* ptr		3081270	0					
ANR	3081818	UnaryOperator	*		3081270	0					
ANR	3081819	Identifier	ptr		3081270	1					
ANR	3081820	RelationalExpression	i < argc - 1		3081270	1		<			
ANR	3081821	Identifier	i		3081270	0					
ANR	3081822	AdditiveExpression	argc - 1		3081270	1		-			
ANR	3081823	Identifier	argc		3081270	0					
ANR	3081824	PrimaryExpression	1		3081270	1					
ANR	3081825	Expression	"ptr ++ , i ++"	1650:45:41851:41859	3081270	2	True				
ANR	3081826	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3081827	Identifier	ptr		3081270	0					
ANR	3081828	IncDec	++		3081270	1					
ANR	3081829	PostIncDecOperationExpression	i ++		3081270	1					
ANR	3081830	Identifier	i		3081270	0					
ANR	3081831	IncDec	++		3081270	1					
ANR	3081832	CompoundStatement		116:56:3790:3790	3081270	3					
ANR	3081833	IfStatement	if ( ptr [ 0 ] [ 0 ] != '-' )		3081270	0					
ANR	3081834	Condition	ptr [ 0 ] [ 0 ] != '-'	1651:5:41869:41884	3081270	0	True				
ANR	3081835	EqualityExpression	ptr [ 0 ] [ 0 ] != '-'		3081270	0		!=			
ANR	3081836	ArrayIndexing	ptr [ 0 ] [ 0 ]		3081270	0					
ANR	3081837	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3081838	Identifier	ptr		3081270	0					
ANR	3081839	PrimaryExpression	0		3081270	1					
ANR	3081840	PrimaryExpression	0		3081270	1					
ANR	3081841	PrimaryExpression	'-'		3081270	1					
ANR	3081842	CompoundStatement		117:23:3815:3815	3081270	1					
ANR	3081843	BreakStatement	break ;	1652:3:41892:41897	3081270	0	True				
ANR	3081844	SwitchStatement	switch ( ptr [ 0 ] [ 1 ] )		3081270	1					
ANR	3081845	Condition	ptr [ 0 ] [ 1 ]	1667:9:42511:42519	3081270	0	True				
ANR	3081846	ArrayIndexing	ptr [ 0 ] [ 1 ]		3081270	0					
ANR	3081847	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3081848	Identifier	ptr		3081270	0					
ANR	3081849	PrimaryExpression	0		3081270	1					
ANR	3081850	PrimaryExpression	1		3081270	1					
ANR	3081851	CompoundStatement		133:20:4450:4450	3081270	1					
ANR	3081852	Label	case 'a' :	1668:2:42526:42534	3081270	0	True				
ANR	3081853	ExpressionStatement	ptr ++	1669:3:42572:42577	3081270	1	True				
ANR	3081854	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3081855	Identifier	ptr		3081270	0					
ANR	3081856	IncDec	++		3081270	1					
ANR	3081857	IfStatement	if ( ptr && * ptr )		3081270	2					
ANR	3081858	Condition	ptr && * ptr	1670:7:42586:42596	3081270	0	True				
ANR	3081859	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3081860	Identifier	ptr		3081270	0					
ANR	3081861	UnaryOperationExpression	* ptr		3081270	1					
ANR	3081862	UnaryOperator	*		3081270	0					
ANR	3081863	Identifier	ptr		3081270	1					
ANR	3081864	CompoundStatement		136:21:4528:4528	3081270	1					
ANR	3081865	ExpressionStatement	logAppend = * ptr	1671:4:42606:42622	3081270	0	True				
ANR	3081866	AssignmentExpression	logAppend = * ptr		3081270	0		=			
ANR	3081867	Identifier	logAppend		3081270	0					
ANR	3081868	UnaryOperationExpression	* ptr		3081270	1					
ANR	3081869	UnaryOperator	*		3081270	0					
ANR	3081870	Identifier	ptr		3081270	1					
ANR	3081871	ExpressionStatement	dcargs += 2	1672:4:42628:42639	3081270	1	True				
ANR	3081872	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3081873	Identifier	dcargs		3081270	0					
ANR	3081874	PrimaryExpression	2		3081270	1					
ANR	3081875	ElseStatement	else		3081270	0					
ANR	3081876	CompoundStatement		139:10:4579:4579	3081270	0					
ANR	3081877	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -append needs another argument.\\n"" )"	1674:4:42657:42738	3081270	0	True				
ANR	3081878	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -append needs another argument.\\n"" )"		3081270	0					
ANR	3081879	Callee	fprintf		3081270	0					
ANR	3081880	Identifier	fprintf		3081270	0					
ANR	3081881	ArgumentList	stderr		3081270	1					
ANR	3081882	Argument	stderr		3081270	0					
ANR	3081883	Identifier	stderr		3081270	0					
ANR	3081884	Argument	"""DaemonCore: ERROR: -append needs another argument.\\n"""		3081270	1					
ANR	3081885	PrimaryExpression	"""DaemonCore: ERROR: -append needs another argument.\\n"""		3081270	0					
ANR	3081886	ExpressionStatement	"fprintf ( stderr , ""   Please specify a string to append to our log's filename.\\n"" )"	1676:4:42744:42833	3081270	1	True				
ANR	3081887	CallExpression	"fprintf ( stderr , ""   Please specify a string to append to our log's filename.\\n"" )"		3081270	0					
ANR	3081888	Callee	fprintf		3081270	0					
ANR	3081889	Identifier	fprintf		3081270	0					
ANR	3081890	ArgumentList	stderr		3081270	1					
ANR	3081891	Argument	stderr		3081270	0					
ANR	3081892	Identifier	stderr		3081270	0					
ANR	3081893	Argument	"""   Please specify a string to append to our log's filename.\\n"""		3081270	1					
ANR	3081894	PrimaryExpression	"""   Please specify a string to append to our log's filename.\\n"""		3081270	0					
ANR	3081895	ExpressionStatement	exit ( 1 )	1678:4:42839:42848	3081270	2	True				
ANR	3081896	CallExpression	exit ( 1 )		3081270	0					
ANR	3081897	Callee	exit		3081270	0					
ANR	3081898	Identifier	exit		3081270	0					
ANR	3081899	ArgumentList	1		3081270	1					
ANR	3081900	Argument	1		3081270	0					
ANR	3081901	PrimaryExpression	1		3081270	0					
ANR	3081902	BreakStatement	break ;	1680:3:42858:42863	3081270	3	True				
ANR	3081903	Label	case 'b' :	1681:2:42867:42875	3081270	4	True				
ANR	3081904	ExpressionStatement	Foreground = 0	1682:3:42912:42926	3081270	5	True				
ANR	3081905	AssignmentExpression	Foreground = 0		3081270	0		=			
ANR	3081906	Identifier	Foreground		3081270	0					
ANR	3081907	PrimaryExpression	0		3081270	1					
ANR	3081908	ExpressionStatement	dcargs ++	1683:3:42931:42939	3081270	6	True				
ANR	3081909	PostIncDecOperationExpression	dcargs ++		3081270	0					
ANR	3081910	Identifier	dcargs		3081270	0					
ANR	3081911	IncDec	++		3081270	1					
ANR	3081912	BreakStatement	break ;	1684:3:42944:42949	3081270	7	True				
ANR	3081913	Label	case 'c' :	1685:2:42953:42961	3081270	8	True				
ANR	3081914	ExpressionStatement	ptr ++	1686:3:43012:43017	3081270	9	True				
ANR	3081915	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3081916	Identifier	ptr		3081270	0					
ANR	3081917	IncDec	++		3081270	1					
ANR	3081918	IfStatement	if ( ptr && * ptr )		3081270	10					
ANR	3081919	Condition	ptr && * ptr	1687:7:43026:43036	3081270	0	True				
ANR	3081920	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3081921	Identifier	ptr		3081270	0					
ANR	3081922	UnaryOperationExpression	* ptr		3081270	1					
ANR	3081923	UnaryOperator	*		3081270	0					
ANR	3081924	Identifier	ptr		3081270	1					
ANR	3081925	CompoundStatement		153:21:4968:4968	3081270	1					
ANR	3081926	ExpressionStatement	ptmp = * ptr	1688:4:43046:43057	3081270	0	True				
ANR	3081927	AssignmentExpression	ptmp = * ptr		3081270	0		=			
ANR	3081928	Identifier	ptmp		3081270	0					
ANR	3081929	UnaryOperationExpression	* ptr		3081270	1					
ANR	3081930	UnaryOperator	*		3081270	0					
ANR	3081931	Identifier	ptr		3081270	1					
ANR	3081932	ExpressionStatement	dcargs += 2	1689:4:43063:43074	3081270	1	True				
ANR	3081933	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3081934	Identifier	dcargs		3081270	0					
ANR	3081935	PrimaryExpression	2		3081270	1					
ANR	3081936	ExpressionStatement	ptmp1 = ( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )	1691:4:43081:43151	3081270	2	True				
ANR	3081937	AssignmentExpression	ptmp1 = ( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		3081270	0		=			
ANR	3081938	Identifier	ptmp1		3081270	0					
ANR	3081939	CastExpression	( char * ) malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		3081270	1					
ANR	3081940	CastTarget	char *		3081270	0					
ANR	3081941	CallExpression	malloc ( strlen ( ptmp ) + myDistro -> GetLen ( ) + 10 )		3081270	1					
ANR	3081942	Callee	malloc		3081270	0					
ANR	3081943	Identifier	malloc		3081270	0					
ANR	3081944	ArgumentList	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		3081270	1					
ANR	3081945	Argument	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		3081270	0					
ANR	3081946	AdditiveExpression	strlen ( ptmp ) + myDistro -> GetLen ( ) + 10		3081270	0		+			
ANR	3081947	CallExpression	strlen ( ptmp )		3081270	0					
ANR	3081948	Callee	strlen		3081270	0					
ANR	3081949	Identifier	strlen		3081270	0					
ANR	3081950	ArgumentList	ptmp		3081270	1					
ANR	3081951	Argument	ptmp		3081270	0					
ANR	3081952	Identifier	ptmp		3081270	0					
ANR	3081953	AdditiveExpression	myDistro -> GetLen ( ) + 10		3081270	1		+			
ANR	3081954	CallExpression	myDistro -> GetLen ( )		3081270	0					
ANR	3081955	Callee	myDistro -> GetLen		3081270	0					
ANR	3081956	PtrMemberAccess	myDistro -> GetLen		3081270	0					
ANR	3081957	Identifier	myDistro		3081270	0					
ANR	3081958	Identifier	GetLen		3081270	1					
ANR	3081959	ArgumentList			3081270	1					
ANR	3081960	PrimaryExpression	10		3081270	1					
ANR	3081961	IfStatement	if ( ptmp1 )		3081270	3					
ANR	3081962	Condition	ptmp1	1693:9:43162:43166	3081270	0	True				
ANR	3081963	Identifier	ptmp1		3081270	0					
ANR	3081964	CompoundStatement		159:17:5098:5098	3081270	1					
ANR	3081965	ExpressionStatement	"sprintf ( ptmp1 , ""%s_CONFIG=%s"" , myDistro -> GetUc ( ) , ptmp )"	1694:5:43177:43231	3081270	0	True				
ANR	3081966	CallExpression	"sprintf ( ptmp1 , ""%s_CONFIG=%s"" , myDistro -> GetUc ( ) , ptmp )"		3081270	0					
ANR	3081967	Callee	sprintf		3081270	0					
ANR	3081968	Identifier	sprintf		3081270	0					
ANR	3081969	ArgumentList	ptmp1		3081270	1					
ANR	3081970	Argument	ptmp1		3081270	0					
ANR	3081971	Identifier	ptmp1		3081270	0					
ANR	3081972	Argument	"""%s_CONFIG=%s"""		3081270	1					
ANR	3081973	PrimaryExpression	"""%s_CONFIG=%s"""		3081270	0					
ANR	3081974	Argument	myDistro -> GetUc ( )		3081270	2					
ANR	3081975	CallExpression	myDistro -> GetUc ( )		3081270	0					
ANR	3081976	Callee	myDistro -> GetUc		3081270	0					
ANR	3081977	PtrMemberAccess	myDistro -> GetUc		3081270	0					
ANR	3081978	Identifier	myDistro		3081270	0					
ANR	3081979	Identifier	GetUc		3081270	1					
ANR	3081980	ArgumentList			3081270	1					
ANR	3081981	Argument	ptmp		3081270	3					
ANR	3081982	Identifier	ptmp		3081270	0					
ANR	3081983	ExpressionStatement	SetEnv ( ptmp1 )	1695:5:43238:43251	3081270	1	True				
ANR	3081984	CallExpression	SetEnv ( ptmp1 )		3081270	0					
ANR	3081985	Callee	SetEnv		3081270	0					
ANR	3081986	Identifier	SetEnv		3081270	0					
ANR	3081987	ArgumentList	ptmp1		3081270	1					
ANR	3081988	Argument	ptmp1		3081270	0					
ANR	3081989	Identifier	ptmp1		3081270	0					
ANR	3081990	ElseStatement	else		3081270	0					
ANR	3081991	CompoundStatement		163:10:5197:5197	3081270	0					
ANR	3081992	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -config needs another argument.\\n"" )"	1698:4:43275:43356	3081270	0	True				
ANR	3081993	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -config needs another argument.\\n"" )"		3081270	0					
ANR	3081994	Callee	fprintf		3081270	0					
ANR	3081995	Identifier	fprintf		3081270	0					
ANR	3081996	ArgumentList	stderr		3081270	1					
ANR	3081997	Argument	stderr		3081270	0					
ANR	3081998	Identifier	stderr		3081270	0					
ANR	3081999	Argument	"""DaemonCore: ERROR: -config needs another argument.\\n"""		3081270	1					
ANR	3082000	PrimaryExpression	"""DaemonCore: ERROR: -config needs another argument.\\n"""		3081270	0					
ANR	3082001	ExpressionStatement	"fprintf ( stderr , ""   Please specify the filename of the config file.\\n"" )"	1700:4:43362:43443	3081270	1	True				
ANR	3082002	CallExpression	"fprintf ( stderr , ""   Please specify the filename of the config file.\\n"" )"		3081270	0					
ANR	3082003	Callee	fprintf		3081270	0					
ANR	3082004	Identifier	fprintf		3081270	0					
ANR	3082005	ArgumentList	stderr		3081270	1					
ANR	3082006	Argument	stderr		3081270	0					
ANR	3082007	Identifier	stderr		3081270	0					
ANR	3082008	Argument	"""   Please specify the filename of the config file.\\n"""		3081270	1					
ANR	3082009	PrimaryExpression	"""   Please specify the filename of the config file.\\n"""		3081270	0					
ANR	3082010	ExpressionStatement	exit ( 1 )	1702:4:43449:43458	3081270	2	True				
ANR	3082011	CallExpression	exit ( 1 )		3081270	0					
ANR	3082012	Callee	exit		3081270	0					
ANR	3082013	Identifier	exit		3081270	0					
ANR	3082014	ArgumentList	1		3081270	1					
ANR	3082015	Argument	1		3081270	0					
ANR	3082016	PrimaryExpression	1		3081270	0					
ANR	3082017	BreakStatement	break ;	1704:3:43474:43479	3081270	11	True				
ANR	3082018	Label	case 'd' :	1705:2:43483:43491	3081270	12	True				
ANR	3082019	ExpressionStatement	DynamicDirs = true	1706:3:43526:43544	3081270	13	True				
ANR	3082020	AssignmentExpression	DynamicDirs = true		3081270	0		=			
ANR	3082021	Identifier	DynamicDirs		3081270	0					
ANR	3082022	Identifier	true		3081270	1					
ANR	3082023	ExpressionStatement	dcargs ++	1707:3:43549:43557	3081270	14	True				
ANR	3082024	PostIncDecOperationExpression	dcargs ++		3081270	0					
ANR	3082025	Identifier	dcargs		3081270	0					
ANR	3082026	IncDec	++		3081270	1					
ANR	3082027	BreakStatement	break ;	1708:3:43562:43567	3081270	15	True				
ANR	3082028	Label	case 'f' :	1709:2:43571:43579	3081270	16	True				
ANR	3082029	ExpressionStatement	Foreground = 1	1710:3:43606:43620	3081270	17	True				
ANR	3082030	AssignmentExpression	Foreground = 1		3081270	0		=			
ANR	3082031	Identifier	Foreground		3081270	0					
ANR	3082032	PrimaryExpression	1		3081270	1					
ANR	3082033	ExpressionStatement	dcargs ++	1711:3:43625:43633	3081270	18	True				
ANR	3082034	PostIncDecOperationExpression	dcargs ++		3081270	0					
ANR	3082035	Identifier	dcargs		3081270	0					
ANR	3082036	IncDec	++		3081270	1					
ANR	3082037	BreakStatement	break ;	1712:3:43638:43643	3081270	19	True				
ANR	3082038	Label	case 'k' :	1714:2:43661:43669	3081270	20	True				
ANR	3082039	ExpressionStatement	ptr ++	1715:3:43713:43718	3081270	21	True				
ANR	3082040	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082041	Identifier	ptr		3081270	0					
ANR	3082042	IncDec	++		3081270	1					
ANR	3082043	IfStatement	if ( ptr && * ptr )		3081270	22					
ANR	3082044	Condition	ptr && * ptr	1716:7:43727:43737	3081270	0	True				
ANR	3082045	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082046	Identifier	ptr		3081270	0					
ANR	3082047	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082048	UnaryOperator	*		3081270	0					
ANR	3082049	Identifier	ptr		3081270	1					
ANR	3082050	CompoundStatement		182:21:5669:5669	3081270	1					
ANR	3082051	ExpressionStatement	pidFile = * ptr	1717:4:43747:43761	3081270	0	True				
ANR	3082052	AssignmentExpression	pidFile = * ptr		3081270	0		=			
ANR	3082053	Identifier	pidFile		3081270	0					
ANR	3082054	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082055	UnaryOperator	*		3081270	0					
ANR	3082056	Identifier	ptr		3081270	1					
ANR	3082057	ExpressionStatement	wantsKill = TRUE	1718:4:43767:43783	3081270	1	True				
ANR	3082058	AssignmentExpression	wantsKill = TRUE		3081270	0		=			
ANR	3082059	Identifier	wantsKill		3081270	0					
ANR	3082060	Identifier	TRUE		3081270	1					
ANR	3082061	ExpressionStatement	dcargs += 2	1719:4:43789:43800	3081270	2	True				
ANR	3082062	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082063	Identifier	dcargs		3081270	0					
ANR	3082064	PrimaryExpression	2		3081270	1					
ANR	3082065	ElseStatement	else		3081270	0					
ANR	3082066	CompoundStatement		186:10:5740:5740	3081270	0					
ANR	3082067	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -kill needs another argument.\\n"" )"	1721:4:43818:43897	3081270	0	True				
ANR	3082068	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -kill needs another argument.\\n"" )"		3081270	0					
ANR	3082069	Callee	fprintf		3081270	0					
ANR	3082070	Identifier	fprintf		3081270	0					
ANR	3082071	ArgumentList	stderr		3081270	1					
ANR	3082072	Argument	stderr		3081270	0					
ANR	3082073	Identifier	stderr		3081270	0					
ANR	3082074	Argument	"""DaemonCore: ERROR: -kill needs another argument.\\n"""		3081270	1					
ANR	3082075	PrimaryExpression	"""DaemonCore: ERROR: -kill needs another argument.\\n"""		3081270	0					
ANR	3082076	ExpressionStatement	"fprintf ( stderr , ""   Please specify a file that holds the pid you want to kill.\\n"" )"	1723:4:43903:43994	3081270	1	True				
ANR	3082077	CallExpression	"fprintf ( stderr , ""   Please specify a file that holds the pid you want to kill.\\n"" )"		3081270	0					
ANR	3082078	Callee	fprintf		3081270	0					
ANR	3082079	Identifier	fprintf		3081270	0					
ANR	3082080	ArgumentList	stderr		3081270	1					
ANR	3082081	Argument	stderr		3081270	0					
ANR	3082082	Identifier	stderr		3081270	0					
ANR	3082083	Argument	"""   Please specify a file that holds the pid you want to kill.\\n"""		3081270	1					
ANR	3082084	PrimaryExpression	"""   Please specify a file that holds the pid you want to kill.\\n"""		3081270	0					
ANR	3082085	ExpressionStatement	exit ( 1 )	1725:4:44000:44009	3081270	2	True				
ANR	3082086	CallExpression	exit ( 1 )		3081270	0					
ANR	3082087	Callee	exit		3081270	0					
ANR	3082088	Identifier	exit		3081270	0					
ANR	3082089	ArgumentList	1		3081270	1					
ANR	3082090	Argument	1		3081270	0					
ANR	3082091	PrimaryExpression	1		3081270	0					
ANR	3082092	BreakStatement	break ;	1727:3:44019:44024	3081270	23	True				
ANR	3082093	Label	case 'l' :	1729:2:44035:44043	3081270	24	True				
ANR	3082094	IfStatement	"if ( strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0 )"		3081270	25					
ANR	3082095	Condition	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0"	1731:8:44101:44139	3081270	0	True				
ANR	3082096	EqualityExpression	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" ) == 0"		3081270	0		==			
ANR	3082097	CallExpression	"strcmp ( & ptr [ 0 ] [ 1 ] , ""local-name"" )"		3081270	0					
ANR	3082098	Callee	strcmp		3081270	0					
ANR	3082099	Identifier	strcmp		3081270	0					
ANR	3082100	ArgumentList	& ptr [ 0 ] [ 1 ]		3081270	1					
ANR	3082101	Argument	& ptr [ 0 ] [ 1 ]		3081270	0					
ANR	3082102	UnaryOperationExpression	& ptr [ 0 ] [ 1 ]		3081270	0					
ANR	3082103	UnaryOperator	&		3081270	0					
ANR	3082104	ArrayIndexing	ptr [ 0 ] [ 1 ]		3081270	1					
ANR	3082105	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3082106	Identifier	ptr		3081270	0					
ANR	3082107	PrimaryExpression	0		3081270	1					
ANR	3082108	PrimaryExpression	1		3081270	1					
ANR	3082109	Argument	"""local-name"""		3081270	1					
ANR	3082110	PrimaryExpression	"""local-name"""		3081270	0					
ANR	3082111	PrimaryExpression	0		3081270	1					
ANR	3082112	CompoundStatement		197:50:6071:6071	3081270	1					
ANR	3082113	ExpressionStatement	ptr ++	1732:4:44149:44154	3081270	0	True				
ANR	3082114	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082115	Identifier	ptr		3081270	0					
ANR	3082116	IncDec	++		3081270	1					
ANR	3082117	IfStatement	if ( ptr && * ptr )		3081270	1					
ANR	3082118	Condition	ptr && * ptr	1733:8:44164:44174	3081270	0	True				
ANR	3082119	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082120	Identifier	ptr		3081270	0					
ANR	3082121	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082122	UnaryOperator	*		3081270	0					
ANR	3082123	Identifier	ptr		3081270	1					
ANR	3082124	CompoundStatement		199:22:6106:6106	3081270	1					
ANR	3082125	ExpressionStatement	get_mySubSystem ( ) -> setLocalName ( * ptr )	1734:5:44185:44224	3081270	0	True				
ANR	3082126	CallExpression	get_mySubSystem ( ) -> setLocalName ( * ptr )		3081270	0					
ANR	3082127	Callee	get_mySubSystem ( ) -> setLocalName		3081270	0					
ANR	3082128	PtrMemberAccess	get_mySubSystem ( ) -> setLocalName		3081270	0					
ANR	3082129	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082130	Callee	get_mySubSystem		3081270	0					
ANR	3082131	Identifier	get_mySubSystem		3081270	0					
ANR	3082132	ArgumentList			3081270	1					
ANR	3082133	Identifier	setLocalName		3081270	1					
ANR	3082134	ArgumentList	* ptr		3081270	1					
ANR	3082135	Argument	* ptr		3081270	0					
ANR	3082136	UnaryOperationExpression	* ptr		3081270	0					
ANR	3082137	UnaryOperator	*		3081270	0					
ANR	3082138	Identifier	ptr		3081270	1					
ANR	3082139	ExpressionStatement	dcargs += 2	1735:5:44231:44242	3081270	1	True				
ANR	3082140	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082141	Identifier	dcargs		3081270	0					
ANR	3082142	PrimaryExpression	2		3081270	1					
ANR	3082143	ElseStatement	else		3081270	0					
ANR	3082144	CompoundStatement		203:9:6187:6187	3081270	0					
ANR	3082145	Statement	fprintf	1738:5:44266:44272	3081270	0	True				
ANR	3082146	Statement	(	1738:12:44273:44273	3081270	1	True				
ANR	3082147	Statement	stderr	1738:14:44275:44280	3081270	2	True				
ANR	3082148	Statement	","	1738:20:44281:44281	3081270	3	True				
ANR	3082149	Statement	"""DaemonCore: ERROR: """	1738:22:44283:44303	3081270	4	True				
ANR	3082150	Statement	"""-local-name needs another argument.\\n"""	1739:8:44313:44351	3081270	5	True				
ANR	3082151	Statement	)	1739:48:44353:44353	3081270	6	True				
ANR	3082152	ExpressionStatement		1739:49:44354:44354	3081270	7	True				
ANR	3082153	ExpressionStatement	"fprintf ( stderr , ""   Please specify the local config to use.\\n"" )"	1740:5:44361:44435	3081270	8	True				
ANR	3082154	CallExpression	"fprintf ( stderr , ""   Please specify the local config to use.\\n"" )"		3081270	0					
ANR	3082155	Callee	fprintf		3081270	0					
ANR	3082156	Identifier	fprintf		3081270	0					
ANR	3082157	ArgumentList	stderr		3081270	1					
ANR	3082158	Argument	stderr		3081270	0					
ANR	3082159	Identifier	stderr		3081270	0					
ANR	3082160	Argument	"""   Please specify the local config to use.\\n"""		3081270	1					
ANR	3082161	PrimaryExpression	"""   Please specify the local config to use.\\n"""		3081270	0					
ANR	3082162	ExpressionStatement	exit ( 1 )	1742:5:44442:44451	3081270	9	True				
ANR	3082163	CallExpression	exit ( 1 )		3081270	0					
ANR	3082164	Callee	exit		3081270	0					
ANR	3082165	Identifier	exit		3081270	0					
ANR	3082166	ArgumentList	1		3081270	1					
ANR	3082167	Argument	1		3081270	0					
ANR	3082168	PrimaryExpression	1		3081270	0					
ANR	3082169	ElseStatement	else		3081270	0					
ANR	3082170	CompoundStatement		213:8:6430:6430	3081270	0					
ANR	3082171	ExpressionStatement	ptr ++	1748:4:44508:44513	3081270	0	True				
ANR	3082172	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082173	Identifier	ptr		3081270	0					
ANR	3082174	IncDec	++		3081270	1					
ANR	3082175	IfStatement	if ( ptr && * ptr )		3081270	1					
ANR	3082176	Condition	ptr && * ptr	1749:8:44523:44533	3081270	0	True				
ANR	3082177	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082178	Identifier	ptr		3081270	0					
ANR	3082179	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082180	UnaryOperator	*		3081270	0					
ANR	3082181	Identifier	ptr		3081270	1					
ANR	3082182	CompoundStatement		215:22:6465:6465	3081270	1					
ANR	3082183	ExpressionStatement	logDir = * ptr	1750:5:44544:44557	3081270	0	True				
ANR	3082184	AssignmentExpression	logDir = * ptr		3081270	0		=			
ANR	3082185	Identifier	logDir		3081270	0					
ANR	3082186	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082187	UnaryOperator	*		3081270	0					
ANR	3082188	Identifier	ptr		3081270	1					
ANR	3082189	ExpressionStatement	dcargs += 2	1751:5:44564:44575	3081270	1	True				
ANR	3082190	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082191	Identifier	dcargs		3081270	0					
ANR	3082192	PrimaryExpression	2		3081270	1					
ANR	3082193	ElseStatement	else		3081270	0					
ANR	3082194	CompoundStatement		218:11:6516:6516	3081270	0					
ANR	3082195	Statement	fprintf	1753:5:44595:44601	3081270	0	True				
ANR	3082196	Statement	(	1753:12:44602:44602	3081270	1	True				
ANR	3082197	Statement	stderr	1753:14:44604:44609	3081270	2	True				
ANR	3082198	Statement	","	1753:20:44610:44610	3081270	3	True				
ANR	3082199	Statement	"""DaemonCore: ERROR: -log needs another """	1753:22:44612:44651	3081270	4	True				
ANR	3082200	Statement	"""argument\\n"""	1754:8:44661:44672	3081270	5	True				
ANR	3082201	Statement	)	1754:21:44674:44674	3081270	6	True				
ANR	3082202	ExpressionStatement		1754:22:44675:44675	3081270	7	True				
ANR	3082203	ExpressionStatement	exit ( 1 )	1755:5:44682:44691	3081270	8	True				
ANR	3082204	CallExpression	exit ( 1 )		3081270	0					
ANR	3082205	Callee	exit		3081270	0					
ANR	3082206	Identifier	exit		3081270	0					
ANR	3082207	ArgumentList	1		3081270	1					
ANR	3082208	Argument	1		3081270	0					
ANR	3082209	PrimaryExpression	1		3081270	0					
ANR	3082210	BreakStatement	break ;	1758:3:44707:44712	3081270	26	True				
ANR	3082211	Label	case 'h' :	1760:2:44717:44725	3081270	27	True				
ANR	3082212	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't' )		3081270	28					
ANR	3082213	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'	1761:8:44794:44822	3081270	0	True				
ANR	3082214	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'		3081270	0		&&			
ANR	3082215	ArrayIndexing	ptr [ 0 ] [ 2 ]		3081270	0					
ANR	3082216	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3082217	Identifier	ptr		3081270	0					
ANR	3082218	PrimaryExpression	0		3081270	1					
ANR	3082219	PrimaryExpression	2		3081270	1					
ANR	3082220	EqualityExpression	ptr [ 0 ] [ 2 ] == 't'		3081270	1		==			
ANR	3082221	ArrayIndexing	ptr [ 0 ] [ 2 ]		3081270	0					
ANR	3082222	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3082223	Identifier	ptr		3081270	0					
ANR	3082224	PrimaryExpression	0		3081270	1					
ANR	3082225	PrimaryExpression	2		3081270	1					
ANR	3082226	PrimaryExpression	't'		3081270	1					
ANR	3082227	CompoundStatement		227:40:6754:6754	3081270	1					
ANR	3082228	ExpressionStatement	ptr ++	1763:4:44861:44866	3081270	0	True				
ANR	3082229	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082230	Identifier	ptr		3081270	0					
ANR	3082231	IncDec	++		3081270	1					
ANR	3082232	IfStatement	if ( ptr && * ptr )		3081270	1					
ANR	3082233	Condition	ptr && * ptr	1764:8:44876:44886	3081270	0	True				
ANR	3082234	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082235	Identifier	ptr		3081270	0					
ANR	3082236	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082237	UnaryOperator	*		3081270	0					
ANR	3082238	Identifier	ptr		3081270	1					
ANR	3082239	CompoundStatement		230:22:6818:6818	3081270	1					
ANR	3082240	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -http no longer accepted.\\n"" )"	1765:5:44897:44973	3081270	0	True				
ANR	3082241	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -http no longer accepted.\\n"" )"		3081270	0					
ANR	3082242	Callee	fprintf		3081270	0					
ANR	3082243	Identifier	fprintf		3081270	0					
ANR	3082244	ArgumentList	stderr		3081270	1					
ANR	3082245	Argument	stderr		3081270	0					
ANR	3082246	Identifier	stderr		3081270	0					
ANR	3082247	Argument	"""DaemonCore: ERROR: -http no longer accepted.\\n"""		3081270	1					
ANR	3082248	PrimaryExpression	"""DaemonCore: ERROR: -http no longer accepted.\\n"""		3081270	0					
ANR	3082249	ExpressionStatement	exit ( 1 )	1767:5:44980:44989	3081270	1	True				
ANR	3082250	CallExpression	exit ( 1 )		3081270	0					
ANR	3082251	Callee	exit		3081270	0					
ANR	3082252	Identifier	exit		3081270	0					
ANR	3082253	ArgumentList	1		3081270	1					
ANR	3082254	Argument	1		3081270	0					
ANR	3082255	PrimaryExpression	1		3081270	0					
ANR	3082256	ElseStatement	else		3081270	0					
ANR	3082257	CompoundStatement		235:10:6935:6935	3081270	0					
ANR	3082258	ExpressionStatement	done = true	1773:4:45163:45174	3081270	0	True				
ANR	3082259	AssignmentExpression	done = true		3081270	0		=			
ANR	3082260	Identifier	done		3081270	0					
ANR	3082261	Identifier	true		3081270	1					
ANR	3082262	BreakStatement	break ;	1775:3:45184:45189	3081270	29	True				
ANR	3082263	Label	case 'p' :	1776:2:45193:45201	3081270	30	True				
ANR	3082264	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i' )		3081270	31					
ANR	3082265	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i'	1778:7:45312:45340	3081270	0	True				
ANR	3082266	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 'i'		3081270	0		&&			
ANR	3082267	ArrayIndexing	ptr [ 0 ] [ 2 ]		3081270	0					
ANR	3082268	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3082269	Identifier	ptr		3081270	0					
ANR	3082270	PrimaryExpression	0		3081270	1					
ANR	3082271	PrimaryExpression	2		3081270	1					
ANR	3082272	EqualityExpression	ptr [ 0 ] [ 2 ] == 'i'		3081270	1		==			
ANR	3082273	ArrayIndexing	ptr [ 0 ] [ 2 ]		3081270	0					
ANR	3082274	ArrayIndexing	ptr [ 0 ]		3081270	0					
ANR	3082275	Identifier	ptr		3081270	0					
ANR	3082276	PrimaryExpression	0		3081270	1					
ANR	3082277	PrimaryExpression	2		3081270	1					
ANR	3082278	PrimaryExpression	'i'		3081270	1					
ANR	3082279	CompoundStatement		244:39:7272:7272	3081270	1					
ANR	3082280	ExpressionStatement	ptr ++	1780:4:45376:45381	3081270	0	True				
ANR	3082281	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082282	Identifier	ptr		3081270	0					
ANR	3082283	IncDec	++		3081270	1					
ANR	3082284	IfStatement	if ( ptr && * ptr )		3081270	1					
ANR	3082285	Condition	ptr && * ptr	1781:8:45391:45401	3081270	0	True				
ANR	3082286	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082287	Identifier	ptr		3081270	0					
ANR	3082288	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082289	UnaryOperator	*		3081270	0					
ANR	3082290	Identifier	ptr		3081270	1					
ANR	3082291	CompoundStatement		247:22:7333:7333	3081270	1					
ANR	3082292	ExpressionStatement	pidFile = * ptr	1782:5:45412:45426	3081270	0	True				
ANR	3082293	AssignmentExpression	pidFile = * ptr		3081270	0		=			
ANR	3082294	Identifier	pidFile		3081270	0					
ANR	3082295	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082296	UnaryOperator	*		3081270	0					
ANR	3082297	Identifier	ptr		3081270	1					
ANR	3082298	ExpressionStatement	dcargs += 2	1783:5:45433:45444	3081270	1	True				
ANR	3082299	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082300	Identifier	dcargs		3081270	0					
ANR	3082301	PrimaryExpression	2		3081270	1					
ANR	3082302	ElseStatement	else		3081270	0					
ANR	3082303	CompoundStatement		250:11:7385:7385	3081270	0					
ANR	3082304	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -pidfile needs another argument.\\n"" )"	1785:5:45464:45547	3081270	0	True				
ANR	3082305	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -pidfile needs another argument.\\n"" )"		3081270	0					
ANR	3082306	Callee	fprintf		3081270	0					
ANR	3082307	Identifier	fprintf		3081270	0					
ANR	3082308	ArgumentList	stderr		3081270	1					
ANR	3082309	Argument	stderr		3081270	0					
ANR	3082310	Identifier	stderr		3081270	0					
ANR	3082311	Argument	"""DaemonCore: ERROR: -pidfile needs another argument.\\n"""		3081270	1					
ANR	3082312	PrimaryExpression	"""DaemonCore: ERROR: -pidfile needs another argument.\\n"""		3081270	0					
ANR	3082313	ExpressionStatement	"fprintf ( stderr , ""   Please specify a filename to store the pid.\\n"" )"	1787:5:45554:45632	3081270	1	True				
ANR	3082314	CallExpression	"fprintf ( stderr , ""   Please specify a filename to store the pid.\\n"" )"		3081270	0					
ANR	3082315	Callee	fprintf		3081270	0					
ANR	3082316	Identifier	fprintf		3081270	0					
ANR	3082317	ArgumentList	stderr		3081270	1					
ANR	3082318	Argument	stderr		3081270	0					
ANR	3082319	Identifier	stderr		3081270	0					
ANR	3082320	Argument	"""   Please specify a filename to store the pid.\\n"""		3081270	1					
ANR	3082321	PrimaryExpression	"""   Please specify a filename to store the pid.\\n"""		3081270	0					
ANR	3082322	ExpressionStatement	exit ( 1 )	1789:5:45639:45648	3081270	2	True				
ANR	3082323	CallExpression	exit ( 1 )		3081270	0					
ANR	3082324	Callee	exit		3081270	0					
ANR	3082325	Identifier	exit		3081270	0					
ANR	3082326	ArgumentList	1		3081270	1					
ANR	3082327	Argument	1		3081270	0					
ANR	3082328	PrimaryExpression	1		3081270	0					
ANR	3082329	ElseStatement	else		3081270	0					
ANR	3082330	CompoundStatement		257:10:7594:7594	3081270	0					
ANR	3082331	ExpressionStatement	ptr ++	1794:4:45770:45775	3081270	0	True				
ANR	3082332	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082333	Identifier	ptr		3081270	0					
ANR	3082334	IncDec	++		3081270	1					
ANR	3082335	IfStatement	if ( ptr && * ptr )		3081270	1					
ANR	3082336	Condition	ptr && * ptr	1795:8:45785:45795	3081270	0	True				
ANR	3082337	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082338	Identifier	ptr		3081270	0					
ANR	3082339	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082340	UnaryOperator	*		3081270	0					
ANR	3082341	Identifier	ptr		3081270	1					
ANR	3082342	CompoundStatement		261:22:7727:7727	3081270	1					
ANR	3082343	ExpressionStatement	command_port = atoi ( * ptr )	1796:5:45806:45833	3081270	0	True				
ANR	3082344	AssignmentExpression	command_port = atoi ( * ptr )		3081270	0		=			
ANR	3082345	Identifier	command_port		3081270	0					
ANR	3082346	CallExpression	atoi ( * ptr )		3081270	1					
ANR	3082347	Callee	atoi		3081270	0					
ANR	3082348	Identifier	atoi		3081270	0					
ANR	3082349	ArgumentList	* ptr		3081270	1					
ANR	3082350	Argument	* ptr		3081270	0					
ANR	3082351	UnaryOperationExpression	* ptr		3081270	0					
ANR	3082352	UnaryOperator	*		3081270	0					
ANR	3082353	Identifier	ptr		3081270	1					
ANR	3082354	ExpressionStatement	dcargs += 2	1797:5:45840:45851	3081270	1	True				
ANR	3082355	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082356	Identifier	dcargs		3081270	0					
ANR	3082357	PrimaryExpression	2		3081270	1					
ANR	3082358	ElseStatement	else		3081270	0					
ANR	3082359	CompoundStatement		264:11:7792:7792	3081270	0					
ANR	3082360	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -port needs another argument.\\n"" )"	1799:5:45871:45951	3081270	0	True				
ANR	3082361	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -port needs another argument.\\n"" )"		3081270	0					
ANR	3082362	Callee	fprintf		3081270	0					
ANR	3082363	Identifier	fprintf		3081270	0					
ANR	3082364	ArgumentList	stderr		3081270	1					
ANR	3082365	Argument	stderr		3081270	0					
ANR	3082366	Identifier	stderr		3081270	0					
ANR	3082367	Argument	"""DaemonCore: ERROR: -port needs another argument.\\n"""		3081270	1					
ANR	3082368	PrimaryExpression	"""DaemonCore: ERROR: -port needs another argument.\\n"""		3081270	0					
ANR	3082369	ExpressionStatement	"fprintf ( stderr , ""   Please specify the port to use for the command socket.\\n"" )"	1801:5:45958:46047	3081270	1	True				
ANR	3082370	CallExpression	"fprintf ( stderr , ""   Please specify the port to use for the command socket.\\n"" )"		3081270	0					
ANR	3082371	Callee	fprintf		3081270	0					
ANR	3082372	Identifier	fprintf		3081270	0					
ANR	3082373	ArgumentList	stderr		3081270	1					
ANR	3082374	Argument	stderr		3081270	0					
ANR	3082375	Identifier	stderr		3081270	0					
ANR	3082376	Argument	"""   Please specify the port to use for the command socket.\\n"""		3081270	1					
ANR	3082377	PrimaryExpression	"""   Please specify the port to use for the command socket.\\n"""		3081270	0					
ANR	3082378	ExpressionStatement	exit ( 1 )	1804:5:46055:46064	3081270	2	True				
ANR	3082379	CallExpression	exit ( 1 )		3081270	0					
ANR	3082380	Callee	exit		3081270	0					
ANR	3082381	Identifier	exit		3081270	0					
ANR	3082382	ArgumentList	1		3081270	1					
ANR	3082383	Argument	1		3081270	0					
ANR	3082384	PrimaryExpression	1		3081270	0					
ANR	3082385	BreakStatement	break ;	1807:3:46080:46085	3081270	32	True				
ANR	3082386	Label	case 'q' :	1808:2:46089:46097	3081270	33	True				
ANR	3082387	ExpressionStatement	wantsQuiet = TRUE	1809:3:46119:46136	3081270	34	True				
ANR	3082388	AssignmentExpression	wantsQuiet = TRUE		3081270	0		=			
ANR	3082389	Identifier	wantsQuiet		3081270	0					
ANR	3082390	Identifier	TRUE		3081270	1					
ANR	3082391	ExpressionStatement	dcargs ++	1810:3:46141:46149	3081270	35	True				
ANR	3082392	PostIncDecOperationExpression	dcargs ++		3081270	0					
ANR	3082393	Identifier	dcargs		3081270	0					
ANR	3082394	IncDec	++		3081270	1					
ANR	3082395	BreakStatement	break ;	1811:3:46154:46159	3081270	36	True				
ANR	3082396	Label	case 'r' :	1812:2:46166:46174	3081270	37	True				
ANR	3082397	ExpressionStatement	ptr ++	1813:3:46229:46234	3081270	38	True				
ANR	3082398	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082399	Identifier	ptr		3081270	0					
ANR	3082400	IncDec	++		3081270	1					
ANR	3082401	IfStatement	if ( ptr && * ptr )		3081270	39					
ANR	3082402	Condition	ptr && * ptr	1814:7:46243:46253	3081270	0	True				
ANR	3082403	AndExpression	ptr && * ptr		3081270	0		&&			
ANR	3082404	Identifier	ptr		3081270	0					
ANR	3082405	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082406	UnaryOperator	*		3081270	0					
ANR	3082407	Identifier	ptr		3081270	1					
ANR	3082408	CompoundStatement		280:21:8185:8185	3081270	1					
ANR	3082409	ExpressionStatement	runfor = atoi ( * ptr )	1815:4:46263:46284	3081270	0	True				
ANR	3082410	AssignmentExpression	runfor = atoi ( * ptr )		3081270	0		=			
ANR	3082411	Identifier	runfor		3081270	0					
ANR	3082412	CallExpression	atoi ( * ptr )		3081270	1					
ANR	3082413	Callee	atoi		3081270	0					
ANR	3082414	Identifier	atoi		3081270	0					
ANR	3082415	ArgumentList	* ptr		3081270	1					
ANR	3082416	Argument	* ptr		3081270	0					
ANR	3082417	UnaryOperationExpression	* ptr		3081270	0					
ANR	3082418	UnaryOperator	*		3081270	0					
ANR	3082419	Identifier	ptr		3081270	1					
ANR	3082420	ExpressionStatement	dcargs += 2	1816:4:46290:46301	3081270	1	True				
ANR	3082421	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082422	Identifier	dcargs		3081270	0					
ANR	3082423	PrimaryExpression	2		3081270	1					
ANR	3082424	ElseStatement	else		3081270	0					
ANR	3082425	CompoundStatement		284:8:8244:8244	3081270	0					
ANR	3082426	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -runfor needs another argument.\\n"" )"	1819:4:46322:46403	3081270	0	True				
ANR	3082427	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -runfor needs another argument.\\n"" )"		3081270	0					
ANR	3082428	Callee	fprintf		3081270	0					
ANR	3082429	Identifier	fprintf		3081270	0					
ANR	3082430	ArgumentList	stderr		3081270	1					
ANR	3082431	Argument	stderr		3081270	0					
ANR	3082432	Identifier	stderr		3081270	0					
ANR	3082433	Argument	"""DaemonCore: ERROR: -runfor needs another argument.\\n"""		3081270	1					
ANR	3082434	PrimaryExpression	"""DaemonCore: ERROR: -runfor needs another argument.\\n"""		3081270	0					
ANR	3082435	ExpressionStatement	"fprintf ( stderr , ""   Please specify the number of minutes to run for.\\n"" )"	1821:4:46409:46491	3081270	1	True				
ANR	3082436	CallExpression	"fprintf ( stderr , ""   Please specify the number of minutes to run for.\\n"" )"		3081270	0					
ANR	3082437	Callee	fprintf		3081270	0					
ANR	3082438	Identifier	fprintf		3081270	0					
ANR	3082439	ArgumentList	stderr		3081270	1					
ANR	3082440	Argument	stderr		3081270	0					
ANR	3082441	Identifier	stderr		3081270	0					
ANR	3082442	Argument	"""   Please specify the number of minutes to run for.\\n"""		3081270	1					
ANR	3082443	PrimaryExpression	"""   Please specify the number of minutes to run for.\\n"""		3081270	0					
ANR	3082444	ExpressionStatement	exit ( 1 )	1824:4:46498:46507	3081270	2	True				
ANR	3082445	CallExpression	exit ( 1 )		3081270	0					
ANR	3082446	Callee	exit		3081270	0					
ANR	3082447	Identifier	exit		3081270	0					
ANR	3082448	ArgumentList	1		3081270	1					
ANR	3082449	Argument	1		3081270	0					
ANR	3082450	PrimaryExpression	1		3081270	0					
ANR	3082451	BreakStatement	break ;	1827:3:46568:46573	3081270	40	True				
ANR	3082452	Label	case 's' :	1828:2:46577:46585	3081270	41	True				
ANR	3082453	IfStatement	"if ( strcmp ( ""-sock"" , * ptr ) )"		3081270	42					
ANR	3082454	Condition	"strcmp ( ""-sock"" , * ptr )"	1831:7:46695:46714	3081270	0	True				
ANR	3082455	CallExpression	"strcmp ( ""-sock"" , * ptr )"		3081270	0					
ANR	3082456	Callee	strcmp		3081270	0					
ANR	3082457	Identifier	strcmp		3081270	0					
ANR	3082458	ArgumentList	"""-sock"""		3081270	1					
ANR	3082459	Argument	"""-sock"""		3081270	0					
ANR	3082460	PrimaryExpression	"""-sock"""		3081270	0					
ANR	3082461	Argument	* ptr		3081270	1					
ANR	3082462	UnaryOperationExpression	* ptr		3081270	0					
ANR	3082463	UnaryOperator	*		3081270	0					
ANR	3082464	Identifier	ptr		3081270	1					
ANR	3082465	CompoundStatement		297:30:8646:8646	3081270	1					
ANR	3082466	ExpressionStatement	done = true	1832:4:46724:46735	3081270	0	True				
ANR	3082467	AssignmentExpression	done = true		3081270	0		=			
ANR	3082468	Identifier	done		3081270	0					
ANR	3082469	Identifier	true		3081270	1					
ANR	3082470	BreakStatement	break ;	1833:4:46741:46746	3081270	1	True				
ANR	3082471	ElseStatement	else		3081270	0					
ANR	3082472	CompoundStatement		301:8:8689:8689	3081270	0					
ANR	3082473	ExpressionStatement	ptr ++	1836:4:46767:46772	3081270	0	True				
ANR	3082474	PostIncDecOperationExpression	ptr ++		3081270	0					
ANR	3082475	Identifier	ptr		3081270	0					
ANR	3082476	IncDec	++		3081270	1					
ANR	3082477	IfStatement	if ( * ptr )		3081270	1					
ANR	3082478	Condition	* ptr	1837:8:46782:46785	3081270	0	True				
ANR	3082479	UnaryOperationExpression	* ptr		3081270	0					
ANR	3082480	UnaryOperator	*		3081270	0					
ANR	3082481	Identifier	ptr		3081270	1					
ANR	3082482	CompoundStatement		303:15:8717:8717	3081270	1					
ANR	3082483	ExpressionStatement	daemon_sock_name = * ptr	1838:5:46796:46819	3081270	0	True				
ANR	3082484	AssignmentExpression	daemon_sock_name = * ptr		3081270	0		=			
ANR	3082485	Identifier	daemon_sock_name		3081270	0					
ANR	3082486	UnaryOperationExpression	* ptr		3081270	1					
ANR	3082487	UnaryOperator	*		3081270	0					
ANR	3082488	Identifier	ptr		3081270	1					
ANR	3082489	ExpressionStatement	dcargs += 2	1839:5:46826:46837	3081270	1	True				
ANR	3082490	AssignmentExpression	dcargs += 2		3081270	0		+=			
ANR	3082491	Identifier	dcargs		3081270	0					
ANR	3082492	PrimaryExpression	2		3081270	1					
ANR	3082493	ElseStatement	else		3081270	0					
ANR	3082494	CompoundStatement		306:11:8778:8778	3081270	0					
ANR	3082495	ExpressionStatement	"fprintf ( stderr , ""DaemonCore: ERROR: -sock needs another argument.\\n"" )"	1841:5:46857:46937	3081270	0	True				
ANR	3082496	CallExpression	"fprintf ( stderr , ""DaemonCore: ERROR: -sock needs another argument.\\n"" )"		3081270	0					
ANR	3082497	Callee	fprintf		3081270	0					
ANR	3082498	Identifier	fprintf		3081270	0					
ANR	3082499	ArgumentList	stderr		3081270	1					
ANR	3082500	Argument	stderr		3081270	0					
ANR	3082501	Identifier	stderr		3081270	0					
ANR	3082502	Argument	"""DaemonCore: ERROR: -sock needs another argument.\\n"""		3081270	1					
ANR	3082503	PrimaryExpression	"""DaemonCore: ERROR: -sock needs another argument.\\n"""		3081270	0					
ANR	3082504	ExpressionStatement	"fprintf ( stderr , ""   Please specify a socket name.\\n"" )"	1843:5:46944:47008	3081270	1	True				
ANR	3082505	CallExpression	"fprintf ( stderr , ""   Please specify a socket name.\\n"" )"		3081270	0					
ANR	3082506	Callee	fprintf		3081270	0					
ANR	3082507	Identifier	fprintf		3081270	0					
ANR	3082508	ArgumentList	stderr		3081270	1					
ANR	3082509	Argument	stderr		3081270	0					
ANR	3082510	Identifier	stderr		3081270	0					
ANR	3082511	Argument	"""   Please specify a socket name.\\n"""		3081270	1					
ANR	3082512	PrimaryExpression	"""   Please specify a socket name.\\n"""		3081270	0					
ANR	3082513	ExpressionStatement	exit ( 1 )	1845:5:47015:47024	3081270	2	True				
ANR	3082514	CallExpression	exit ( 1 )		3081270	0					
ANR	3082515	Callee	exit		3081270	0					
ANR	3082516	Identifier	exit		3081270	0					
ANR	3082517	ArgumentList	1		3081270	1					
ANR	3082518	Argument	1		3081270	0					
ANR	3082519	PrimaryExpression	1		3081270	0					
ANR	3082520	BreakStatement	break ;	1848:3:47040:47045	3081270	43	True				
ANR	3082521	Label	case 't' :	1849:2:47049:47057	3081270	44	True				
ANR	3082522	ExpressionStatement	Termlog = 1	1850:3:47091:47102	3081270	45	True				
ANR	3082523	AssignmentExpression	Termlog = 1		3081270	0		=			
ANR	3082524	Identifier	Termlog		3081270	0					
ANR	3082525	PrimaryExpression	1		3081270	1					
ANR	3082526	ExpressionStatement	dcargs ++	1851:3:47107:47115	3081270	46	True				
ANR	3082527	PostIncDecOperationExpression	dcargs ++		3081270	0					
ANR	3082528	Identifier	dcargs		3081270	0					
ANR	3082529	IncDec	++		3081270	1					
ANR	3082530	BreakStatement	break ;	1852:3:47120:47125	3081270	47	True				
ANR	3082531	Label	case 'v' :	1853:2:47129:47137	3081270	48	True				
ANR	3082532	ExpressionStatement	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"	1854:3:47176:47231	3081270	49	True				
ANR	3082533	CallExpression	"printf ( ""%s\\n%s\\n"" , CondorVersion ( ) , CondorPlatform ( ) )"		3081270	0					
ANR	3082534	Callee	printf		3081270	0					
ANR	3082535	Identifier	printf		3081270	0					
ANR	3082536	ArgumentList	"""%s\\n%s\\n"""		3081270	1					
ANR	3082537	Argument	"""%s\\n%s\\n"""		3081270	0					
ANR	3082538	PrimaryExpression	"""%s\\n%s\\n"""		3081270	0					
ANR	3082539	Argument	CondorVersion ( )		3081270	1					
ANR	3082540	CallExpression	CondorVersion ( )		3081270	0					
ANR	3082541	Callee	CondorVersion		3081270	0					
ANR	3082542	Identifier	CondorVersion		3081270	0					
ANR	3082543	ArgumentList			3081270	1					
ANR	3082544	Argument	CondorPlatform ( )		3081270	2					
ANR	3082545	CallExpression	CondorPlatform ( )		3081270	0					
ANR	3082546	Callee	CondorPlatform		3081270	0					
ANR	3082547	Identifier	CondorPlatform		3081270	0					
ANR	3082548	ArgumentList			3081270	1					
ANR	3082549	ExpressionStatement	exit ( 0 )	1855:3:47236:47243	3081270	50	True				
ANR	3082550	CallExpression	exit ( 0 )		3081270	0					
ANR	3082551	Callee	exit		3081270	0					
ANR	3082552	Identifier	exit		3081270	0					
ANR	3082553	ArgumentList	0		3081270	1					
ANR	3082554	Argument	0		3081270	0					
ANR	3082555	PrimaryExpression	0		3081270	0					
ANR	3082556	BreakStatement	break ;	1856:3:47248:47253	3081270	51	True				
ANR	3082557	Label	default :	1857:2:47257:47264	3081270	52	True				
ANR	3082558	Identifier	default		3081270	0					
ANR	3082559	ExpressionStatement	done = true	1858:3:47269:47280	3081270	53	True				
ANR	3082560	AssignmentExpression	done = true		3081270	0		=			
ANR	3082561	Identifier	done		3081270	0					
ANR	3082562	Identifier	true		3081270	1					
ANR	3082563	BreakStatement	break ;	1859:3:47285:47290	3081270	54	True				
ANR	3082564	IfStatement	if ( done )		3081270	2					
ANR	3082565	Condition	done	1861:7:47304:47307	3081270	0	True				
ANR	3082566	Identifier	done		3081270	0					
ANR	3082567	CompoundStatement		327:14:9239:9239	3081270	1					
ANR	3082568	BreakStatement	break ;	1862:3:47316:47321	3081270	0	True				
ANR	3082569	IfStatement	if ( Termlog )		3081270	46					
ANR	3082570	Condition	Termlog	1867:6:47443:47449	3081270	0	True				
ANR	3082571	Identifier	Termlog		3081270	0					
ANR	3082572	CompoundStatement		333:16:9381:9381	3081270	1					
ANR	3082573	ExpressionStatement	Foreground = 1	1868:2:47457:47471	3081270	0	True				
ANR	3082574	AssignmentExpression	Foreground = 1		3081270	0		=			
ANR	3082575	Identifier	Foreground		3081270	0					
ANR	3082576	PrimaryExpression	1		3081270	1					
ANR	3082577	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW ) )		3081270	47					
ANR	3082578	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )	1872:6:47524:47571	3081270	0	True				
ANR	3082579	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )		3081270	0					
ANR	3082580	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3082581	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3082582	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082583	Callee	get_mySubSystem		3081270	0					
ANR	3082584	Identifier	get_mySubSystem		3081270	0					
ANR	3082585	ArgumentList			3081270	1					
ANR	3082586	Identifier	isType		3081270	1					
ANR	3082587	ArgumentList	SUBSYSTEM_TYPE_SHADOW		3081270	1					
ANR	3082588	Argument	SUBSYSTEM_TYPE_SHADOW		3081270	0					
ANR	3082589	Identifier	SUBSYSTEM_TYPE_SHADOW		3081270	0					
ANR	3082590	CompoundStatement		338:57:9503:9503	3081270	1					
ANR	3082591	ExpressionStatement	"config ( wantsQuiet , false , false )"	1875:2:47675:47709	3081270	0	True				
ANR	3082592	CallExpression	"config ( wantsQuiet , false , false )"		3081270	0					
ANR	3082593	Callee	config		3081270	0					
ANR	3082594	Identifier	config		3081270	0					
ANR	3082595	ArgumentList	wantsQuiet		3081270	1					
ANR	3082596	Argument	wantsQuiet		3081270	0					
ANR	3082597	Identifier	wantsQuiet		3081270	0					
ANR	3082598	Argument	false		3081270	1					
ANR	3082599	Identifier	false		3081270	0					
ANR	3082600	Argument	false		3081270	2					
ANR	3082601	Identifier	false		3081270	0					
ANR	3082602	ElseStatement	else		3081270	0					
ANR	3082603	CompoundStatement		342:8:9647:9647	3081270	0					
ANR	3082604	ExpressionStatement	"config ( wantsQuiet , false , true )"	1877:2:47723:47756	3081270	0	True				
ANR	3082605	CallExpression	"config ( wantsQuiet , false , true )"		3081270	0					
ANR	3082606	Callee	config		3081270	0					
ANR	3082607	Identifier	config		3081270	0					
ANR	3082608	ArgumentList	wantsQuiet		3081270	1					
ANR	3082609	Argument	wantsQuiet		3081270	0					
ANR	3082610	Identifier	wantsQuiet		3081270	0					
ANR	3082611	Argument	false		3081270	1					
ANR	3082612	Identifier	false		3081270	0					
ANR	3082613	Argument	true		3081270	2					
ANR	3082614	Identifier	true		3081270	0					
ANR	3082615	IfStatement	if ( doAuthInit )		3081270	48					
ANR	3082616	Condition	doAuthInit	1883:6:47878:47887	3081270	0	True				
ANR	3082617	Identifier	doAuthInit		3081270	0					
ANR	3082618	CompoundStatement		349:19:9819:9819	3081270	1					
ANR	3082619	ExpressionStatement	condor_auth_config ( true )	1884:2:47895:47921	3081270	0	True				
ANR	3082620	CallExpression	condor_auth_config ( true )		3081270	0					
ANR	3082621	Callee	condor_auth_config		3081270	0					
ANR	3082622	Identifier	condor_auth_config		3081270	0					
ANR	3082623	ArgumentList	true		3081270	1					
ANR	3082624	Argument	true		3081270	0					
ANR	3082625	Identifier	true		3081270	0					
ANR	3082626	IfStatement	if ( doCoreInit )		3081270	49					
ANR	3082627	Condition	doCoreInit	1888:6:47993:48002	3081270	0	True				
ANR	3082628	Identifier	doCoreInit		3081270	0					
ANR	3082629	CompoundStatement		354:19:9934:9934	3081270	1					
ANR	3082630	ExpressionStatement	check_core_files ( )	1889:2:48010:48028	3081270	0	True				
ANR	3082631	CallExpression	check_core_files ( )		3081270	0					
ANR	3082632	Callee	check_core_files		3081270	0					
ANR	3082633	Identifier	check_core_files		3081270	0					
ANR	3082634	ArgumentList			3081270	1					
ANR	3082635	IfStatement	if ( wantsKill )		3081270	50					
ANR	3082636	Condition	wantsKill	1893:5:48087:48095	3081270	0	True				
ANR	3082637	Identifier	wantsKill		3081270	0					
ANR	3082638	CompoundStatement		359:17:10027:10027	3081270	1					
ANR	3082639	ExpressionStatement	do_kill ( )	1894:2:48103:48112	3081270	0	True				
ANR	3082640	CallExpression	do_kill ( )		3081270	0					
ANR	3082641	Callee	do_kill		3081270	0					
ANR	3082642	Identifier	do_kill		3081270	0					
ANR	3082643	ArgumentList			3081270	1					
ANR	3082644	IfStatement	if ( ! DynamicDirs )		3081270	51					
ANR	3082645	Condition	! DynamicDirs	1897:5:48123:48135	3081270	0	True				
ANR	3082646	UnaryOperationExpression	! DynamicDirs		3081270	0					
ANR	3082647	UnaryOperator	!		3081270	0					
ANR	3082648	Identifier	DynamicDirs		3081270	1					
ANR	3082649	CompoundStatement		363:21:10067:10067	3081270	1					
ANR	3082650	IfStatement	if ( logDir )		3081270	0					
ANR	3082651	Condition	logDir	1908:6:48633:48638	3081270	0	True				
ANR	3082652	Identifier	logDir		3081270	0					
ANR	3082653	CompoundStatement		374:15:10570:10570	3081270	1					
ANR	3082654	ExpressionStatement	set_log_dir ( )	1909:3:48647:48660	3081270	0	True				
ANR	3082655	CallExpression	set_log_dir ( )		3081270	0					
ANR	3082656	Callee	set_log_dir		3081270	0					
ANR	3082657	Identifier	set_log_dir		3081270	0					
ANR	3082658	ArgumentList			3081270	1					
ANR	3082659	IfStatement	if ( logAppend )		3081270	1					
ANR	3082660	Condition	logAppend	1916:6:48875:48883	3081270	0	True				
ANR	3082661	Identifier	logAppend		3081270	0					
ANR	3082662	CompoundStatement		382:18:10815:10815	3081270	1					
ANR	3082663	ExpressionStatement	handle_log_append ( logAppend )	1917:3:48892:48922	3081270	0	True				
ANR	3082664	CallExpression	handle_log_append ( logAppend )		3081270	0					
ANR	3082665	Callee	handle_log_append		3081270	0					
ANR	3082666	Identifier	handle_log_append		3081270	0					
ANR	3082667	ArgumentList	logAppend		3081270	1					
ANR	3082668	Argument	logAppend		3081270	0					
ANR	3082669	Identifier	logAppend		3081270	0					
ANR	3082670	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	1921:2:48964:49031	3081270	2	True				
ANR	3082671	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		3081270	0					
ANR	3082672	Callee	dprintf_config		3081270	0					
ANR	3082673	Identifier	dprintf_config		3081270	0					
ANR	3082674	ArgumentList	get_mySubSystem ( ) -> getName ( )		3081270	1					
ANR	3082675	Argument	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082676	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082677	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082678	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082679	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082680	Callee	get_mySubSystem		3081270	0					
ANR	3082681	Identifier	get_mySubSystem		3081270	0					
ANR	3082682	ArgumentList			3081270	1					
ANR	3082683	Identifier	getName		3081270	1					
ANR	3082684	ArgumentList			3081270	1					
ANR	3082685	Argument	get_param_functions ( )		3081270	1					
ANR	3082686	CallExpression	get_param_functions ( )		3081270	0					
ANR	3082687	Callee	get_param_functions		3081270	0					
ANR	3082688	Identifier	get_param_functions		3081270	0					
ANR	3082689	ArgumentList			3081270	1					
ANR	3082690	ExpressionStatement	set_condor_priv ( )	1925:1:49096:49113	3081270	52	True				
ANR	3082691	CallExpression	set_condor_priv ( )		3081270	0					
ANR	3082692	Callee	set_condor_priv		3081270	0					
ANR	3082693	Identifier	set_condor_priv		3081270	0					
ANR	3082694	ArgumentList			3081270	1					
ANR	3082695	ExpressionStatement	ptmp = argv [ 0 ]	1928:1:49167:49181	3081270	53	True				
ANR	3082696	AssignmentExpression	ptmp = argv [ 0 ]		3081270	0		=			
ANR	3082697	Identifier	ptmp		3081270	0					
ANR	3082698	ArrayIndexing	argv [ 0 ]		3081270	1					
ANR	3082699	Identifier	argv		3081270	0					
ANR	3082700	PrimaryExpression	0		3081270	1					
ANR	3082701	ExpressionStatement	argv = -- ptr	1929:1:49220:49232	3081270	54	True				
ANR	3082702	AssignmentExpression	argv = -- ptr		3081270	0		=			
ANR	3082703	Identifier	argv		3081270	0					
ANR	3082704	UnaryExpression	-- ptr		3081270	1					
ANR	3082705	IncDec	--		3081270	0					
ANR	3082706	Identifier	ptr		3081270	1					
ANR	3082707	ExpressionStatement	argv [ 0 ] = ptmp	1930:1:49263:49277	3081270	55	True				
ANR	3082708	AssignmentExpression	argv [ 0 ] = ptmp		3081270	0		=			
ANR	3082709	ArrayIndexing	argv [ 0 ]		3081270	0					
ANR	3082710	Identifier	argv		3081270	0					
ANR	3082711	PrimaryExpression	0		3081270	1					
ANR	3082712	Identifier	ptmp		3081270	1					
ANR	3082713	ExpressionStatement	argc -= dcargs	1931:1:49297:49311	3081270	56	True				
ANR	3082714	AssignmentExpression	argc -= dcargs		3081270	0		-=			
ANR	3082715	Identifier	argc		3081270	0					
ANR	3082716	Identifier	dcargs		3081270	1					
ANR	3082717	IfStatement	if ( argc < 1 )		3081270	57					
ANR	3082718	Condition	argc < 1	1932:6:49319:49326	3081270	0	True				
ANR	3082719	RelationalExpression	argc < 1		3081270	0		<			
ANR	3082720	Identifier	argc		3081270	0					
ANR	3082721	PrimaryExpression	1		3081270	1					
ANR	3082722	ExpressionStatement	argc = 1	1933:2:49332:49340	3081270	1	True				
ANR	3082723	AssignmentExpression	argc = 1		3081270	0		=			
ANR	3082724	Identifier	argc		3081270	0					
ANR	3082725	PrimaryExpression	1		3081270	1					
ANR	3082726	IfStatement	if ( ! Foreground )		3081270	58					
ANR	3082727	Condition	! Foreground	1938:5:49510:49520	3081270	0	True				
ANR	3082728	UnaryOperationExpression	! Foreground		3081270	0					
ANR	3082729	UnaryOperator	!		3081270	0					
ANR	3082730	Identifier	Foreground		3081270	1					
ANR	3082731	CompoundStatement		404:18:11451:11451	3081270	1					
ANR	3082732	ExpressionStatement	FreeConsole ( )	1941:2:49573:49586	3081270	0	True				
ANR	3082733	CallExpression	FreeConsole ( )		3081270	0					
ANR	3082734	Callee	FreeConsole		3081270	0					
ANR	3082735	Identifier	FreeConsole		3081270	0					
ANR	3082736	ArgumentList			3081270	1					
ANR	3082737	IdentifierDeclStatement	MyString debug_wait_param ;	2008:1:52126:52151	3081270	59	True				
ANR	3082738	IdentifierDecl	debug_wait_param		3081270	0					
ANR	3082739	IdentifierDeclType	MyString		3081270	0					
ANR	3082740	Identifier	debug_wait_param		3081270	1					
ANR	3082741	ExpressionStatement	"debug_wait_param . sprintf ( ""%s_DEBUG_WAIT"" , get_mySubSystem ( ) -> getName ( ) )"	2009:1:52154:52226	3081270	60	True				
ANR	3082742	CallExpression	"debug_wait_param . sprintf ( ""%s_DEBUG_WAIT"" , get_mySubSystem ( ) -> getName ( ) )"		3081270	0					
ANR	3082743	Callee	debug_wait_param . sprintf		3081270	0					
ANR	3082744	MemberAccess	debug_wait_param . sprintf		3081270	0					
ANR	3082745	Identifier	debug_wait_param		3081270	0					
ANR	3082746	Identifier	sprintf		3081270	1					
ANR	3082747	ArgumentList	"""%s_DEBUG_WAIT"""		3081270	1					
ANR	3082748	Argument	"""%s_DEBUG_WAIT"""		3081270	0					
ANR	3082749	PrimaryExpression	"""%s_DEBUG_WAIT"""		3081270	0					
ANR	3082750	Argument	get_mySubSystem ( ) -> getName ( )		3081270	1					
ANR	3082751	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082752	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082753	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082754	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082755	Callee	get_mySubSystem		3081270	0					
ANR	3082756	Identifier	get_mySubSystem		3081270	0					
ANR	3082757	ArgumentList			3081270	1					
ANR	3082758	Identifier	getName		3081270	1					
ANR	3082759	ArgumentList			3081270	1					
ANR	3082760	IfStatement	"if ( param_boolean ( debug_wait_param . Value ( ) , false , false ) )"		3081270	61					
ANR	3082761	Condition	"param_boolean ( debug_wait_param . Value ( ) , false , false )"	2010:5:52233:52285	3081270	0	True				
ANR	3082762	CallExpression	"param_boolean ( debug_wait_param . Value ( ) , false , false )"		3081270	0					
ANR	3082763	Callee	param_boolean		3081270	0					
ANR	3082764	Identifier	param_boolean		3081270	0					
ANR	3082765	ArgumentList	debug_wait_param . Value ( )		3081270	1					
ANR	3082766	Argument	debug_wait_param . Value ( )		3081270	0					
ANR	3082767	CallExpression	debug_wait_param . Value ( )		3081270	0					
ANR	3082768	Callee	debug_wait_param . Value		3081270	0					
ANR	3082769	MemberAccess	debug_wait_param . Value		3081270	0					
ANR	3082770	Identifier	debug_wait_param		3081270	0					
ANR	3082771	Identifier	Value		3081270	1					
ANR	3082772	ArgumentList			3081270	1					
ANR	3082773	Argument	false		3081270	1					
ANR	3082774	Identifier	false		3081270	0					
ANR	3082775	Argument	false		3081270	2					
ANR	3082776	Identifier	false		3081270	0					
ANR	3082777	CompoundStatement		477:2:14220:14238	3081270	1					
ANR	3082778	IdentifierDeclStatement	int debug_wait = 1 ;	2011:2:52292:52310	3081270	0	True				
ANR	3082779	IdentifierDecl	debug_wait = 1		3081270	0					
ANR	3082780	IdentifierDeclType	int		3081270	0					
ANR	3082781	Identifier	debug_wait		3081270	1					
ANR	3082782	AssignmentExpression	debug_wait = 1		3081270	2		=			
ANR	3082783	Identifier	debug_wait		3081270	0					
ANR	3082784	PrimaryExpression	1		3081270	1					
ANR	3082785	Statement	dprintf	2012:2:52314:52320	3081270	1	True				
ANR	3082786	Statement	(	2012:9:52321:52321	3081270	2	True				
ANR	3082787	Statement	D_ALWAYS	2012:10:52322:52329	3081270	3	True				
ANR	3082788	Statement	","	2012:18:52330:52330	3081270	4	True				
ANR	3082789	Statement	"""%s is TRUE, waiting for debugger to attach to pid %d.\\n"""	2013:4:52336:52392	3081270	5	True				
ANR	3082790	Statement	","	2013:61:52393:52393	3081270	6	True				
ANR	3082791	Statement	debug_wait_param	2014:4:52400:52415	3081270	7	True				
ANR	3082792	Statement	.	2014:20:52416:52416	3081270	8	True				
ANR	3082793	Statement	Value	2014:21:52417:52421	3081270	9	True				
ANR	3082794	Statement	(	2014:26:52422:52422	3081270	10	True				
ANR	3082795	Statement	)	2014:27:52423:52423	3081270	11	True				
ANR	3082796	Statement	","	2014:28:52424:52424	3081270	12	True				
ANR	3082797	Statement	(	2014:30:52426:52426	3081270	13	True				
ANR	3082798	Statement	int	2014:31:52427:52429	3081270	14	True				
ANR	3082799	Statement	)	2014:34:52430:52430	3081270	15	True				
ANR	3082800	Statement	::	2014:35:52431:52432	3081270	16	True				
ANR	3082801	Statement	getpid	2014:37:52433:52438	3081270	17	True				
ANR	3082802	Statement	(	2014:43:52439:52439	3081270	18	True				
ANR	3082803	Statement	)	2014:44:52440:52440	3081270	19	True				
ANR	3082804	Statement	)	2014:45:52441:52441	3081270	20	True				
ANR	3082805	ExpressionStatement		2014:46:52442:52442	3081270	21	True				
ANR	3082806	WhileStatement	while ( debug_wait )		3081270	22					
ANR	3082807	Condition	debug_wait	2015:9:52453:52462	3081270	0	True				
ANR	3082808	Identifier	debug_wait		3081270	0					
ANR	3082809	CompoundStatement		481:21:14393:14393	3081270	1					
ANR	3082810	ExpressionStatement	sleep ( 1 )	2016:3:52470:52478	3081270	0	True				
ANR	3082811	CallExpression	sleep ( 1 )		3081270	0					
ANR	3082812	Callee	sleep		3081270	0					
ANR	3082813	Identifier	sleep		3081270	0					
ANR	3082814	ArgumentList	1		3081270	1					
ANR	3082815	Argument	1		3081270	0					
ANR	3082816	PrimaryExpression	1		3081270	0					
ANR	3082817	ExpressionStatement	daemonCore = new DaemonCore ( )	2023:1:52628:52657	3081270	62	True				
ANR	3082818	AssignmentExpression	daemonCore = new DaemonCore ( )		3081270	0		=			
ANR	3082819	Identifier	daemonCore		3081270	0					
ANR	3082820	UnaryExpression	new DaemonCore ( )		3081270	1					
ANR	3082821	IfStatement	if ( DynamicDirs )		3081270	63					
ANR	3082822	Condition	DynamicDirs	2025:5:52665:52675	3081270	0	True				
ANR	3082823	Identifier	DynamicDirs		3081270	0					
ANR	3082824	CompoundStatement		491:19:14607:14607	3081270	1					
ANR	3082825	ExpressionStatement	handle_dynamic_dirs ( )	2030:2:52832:52853	3081270	0	True				
ANR	3082826	CallExpression	handle_dynamic_dirs ( )		3081270	0					
ANR	3082827	Callee	handle_dynamic_dirs		3081270	0					
ANR	3082828	Identifier	handle_dynamic_dirs		3081270	0					
ANR	3082829	ArgumentList			3081270	1					
ANR	3082830	IfStatement	if ( logAppend )		3081270	1					
ANR	3082831	Condition	logAppend	2032:6:52862:52870	3081270	0	True				
ANR	3082832	Identifier	logAppend		3081270	0					
ANR	3082833	CompoundStatement		498:18:14802:14802	3081270	1					
ANR	3082834	ExpressionStatement	handle_log_append ( logAppend )	2033:3:52879:52909	3081270	0	True				
ANR	3082835	CallExpression	handle_log_append ( logAppend )		3081270	0					
ANR	3082836	Callee	handle_log_append		3081270	0					
ANR	3082837	Identifier	handle_log_append		3081270	0					
ANR	3082838	ArgumentList	logAppend		3081270	1					
ANR	3082839	Argument	logAppend		3081270	0					
ANR	3082840	Identifier	logAppend		3081270	0					
ANR	3082841	ExpressionStatement	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"	2037:2:52951:53018	3081270	2	True				
ANR	3082842	CallExpression	"dprintf_config ( get_mySubSystem ( ) -> getName ( ) , get_param_functions ( ) )"		3081270	0					
ANR	3082843	Callee	dprintf_config		3081270	0					
ANR	3082844	Identifier	dprintf_config		3081270	0					
ANR	3082845	ArgumentList	get_mySubSystem ( ) -> getName ( )		3081270	1					
ANR	3082846	Argument	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082847	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082848	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082849	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082850	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082851	Callee	get_mySubSystem		3081270	0					
ANR	3082852	Identifier	get_mySubSystem		3081270	0					
ANR	3082853	ArgumentList			3081270	1					
ANR	3082854	Identifier	getName		3081270	1					
ANR	3082855	ArgumentList			3081270	1					
ANR	3082856	Argument	get_param_functions ( )		3081270	1					
ANR	3082857	CallExpression	get_param_functions ( )		3081270	0					
ANR	3082858	Callee	get_param_functions		3081270	0					
ANR	3082859	Identifier	get_param_functions		3081270	0					
ANR	3082860	ArgumentList			3081270	1					
ANR	3082861	ExpressionStatement	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"	2044:1:53259:53335	3081270	64	True				
ANR	3082862	CallExpression	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"		3081270	0					
ANR	3082863	Callee	dprintf		3081270	0					
ANR	3082864	Identifier	dprintf		3081270	0					
ANR	3082865	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082866	Argument	D_ALWAYS		3081270	0					
ANR	3082867	Identifier	D_ALWAYS		3081270	0					
ANR	3082868	Argument	"""******************************************************\\n"""		3081270	1					
ANR	3082869	PrimaryExpression	"""******************************************************\\n"""		3081270	0					
ANR	3082870	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s (%s_%s) STARTING UP\\n"" , myName , myDistro -> GetUc ( ) , get_mySubSystem ( ) -> getName ( ) )"	2045:1:53338:53445	3081270	65	True				
ANR	3082871	CallExpression	"dprintf ( D_ALWAYS , ""** %s (%s_%s) STARTING UP\\n"" , myName , myDistro -> GetUc ( ) , get_mySubSystem ( ) -> getName ( ) )"		3081270	0					
ANR	3082872	Callee	dprintf		3081270	0					
ANR	3082873	Identifier	dprintf		3081270	0					
ANR	3082874	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082875	Argument	D_ALWAYS		3081270	0					
ANR	3082876	Identifier	D_ALWAYS		3081270	0					
ANR	3082877	Argument	"""** %s (%s_%s) STARTING UP\\n"""		3081270	1					
ANR	3082878	PrimaryExpression	"""** %s (%s_%s) STARTING UP\\n"""		3081270	0					
ANR	3082879	Argument	myName		3081270	2					
ANR	3082880	Identifier	myName		3081270	0					
ANR	3082881	Argument	myDistro -> GetUc ( )		3081270	3					
ANR	3082882	CallExpression	myDistro -> GetUc ( )		3081270	0					
ANR	3082883	Callee	myDistro -> GetUc		3081270	0					
ANR	3082884	PtrMemberAccess	myDistro -> GetUc		3081270	0					
ANR	3082885	Identifier	myDistro		3081270	0					
ANR	3082886	Identifier	GetUc		3081270	1					
ANR	3082887	ArgumentList			3081270	1					
ANR	3082888	Argument	get_mySubSystem ( ) -> getName ( )		3081270	4					
ANR	3082889	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082890	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082891	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082892	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082893	Callee	get_mySubSystem		3081270	0					
ANR	3082894	Identifier	get_mySubSystem		3081270	0					
ANR	3082895	ArgumentList			3081270	1					
ANR	3082896	Identifier	getName		3081270	1					
ANR	3082897	ArgumentList			3081270	1					
ANR	3082898	IfStatement	if ( myFullName )		3081270	66					
ANR	3082899	Condition	myFullName	2047:5:53452:53461	3081270	0	True				
ANR	3082900	Identifier	myFullName		3081270	0					
ANR	3082901	CompoundStatement		513:18:15393:15393	3081270	1					
ANR	3082902	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , myFullName )"	2048:2:53469:53511	3081270	0	True				
ANR	3082903	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , myFullName )"		3081270	0					
ANR	3082904	Callee	dprintf		3081270	0					
ANR	3082905	Identifier	dprintf		3081270	0					
ANR	3082906	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082907	Argument	D_ALWAYS		3081270	0					
ANR	3082908	Identifier	D_ALWAYS		3081270	0					
ANR	3082909	Argument	"""** %s\\n"""		3081270	1					
ANR	3082910	PrimaryExpression	"""** %s\\n"""		3081270	0					
ANR	3082911	Argument	myFullName		3081270	2					
ANR	3082912	Identifier	myFullName		3081270	0					
ANR	3082913	ExpressionStatement	free ( myFullName )	2049:2:53515:53533	3081270	1	True				
ANR	3082914	CallExpression	free ( myFullName )		3081270	0					
ANR	3082915	Callee	free		3081270	0					
ANR	3082916	Identifier	free		3081270	0					
ANR	3082917	ArgumentList	myFullName		3081270	1					
ANR	3082918	Argument	myFullName		3081270	0					
ANR	3082919	Identifier	myFullName		3081270	0					
ANR	3082920	ExpressionStatement	myFullName = NULL	2050:2:53537:53554	3081270	2	True				
ANR	3082921	AssignmentExpression	myFullName = NULL		3081270	0		=			
ANR	3082922	Identifier	myFullName		3081270	0					
ANR	3082923	Identifier	NULL		3081270	1					
ANR	3082924	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , get_mySubSystem ( ) -> getString ( ) )"	2052:1:53560:53620	3081270	67	True				
ANR	3082925	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , get_mySubSystem ( ) -> getString ( ) )"		3081270	0					
ANR	3082926	Callee	dprintf		3081270	0					
ANR	3082927	Identifier	dprintf		3081270	0					
ANR	3082928	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082929	Argument	D_ALWAYS		3081270	0					
ANR	3082930	Identifier	D_ALWAYS		3081270	0					
ANR	3082931	Argument	"""** %s\\n"""		3081270	1					
ANR	3082932	PrimaryExpression	"""** %s\\n"""		3081270	0					
ANR	3082933	Argument	get_mySubSystem ( ) -> getString ( )		3081270	2					
ANR	3082934	CallExpression	get_mySubSystem ( ) -> getString ( )		3081270	0					
ANR	3082935	Callee	get_mySubSystem ( ) -> getString		3081270	0					
ANR	3082936	PtrMemberAccess	get_mySubSystem ( ) -> getString		3081270	0					
ANR	3082937	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082938	Callee	get_mySubSystem		3081270	0					
ANR	3082939	Identifier	get_mySubSystem		3081270	0					
ANR	3082940	ArgumentList			3081270	1					
ANR	3082941	Identifier	getString		3081270	1					
ANR	3082942	ArgumentList			3081270	1					
ANR	3082943	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Configuration: subsystem:%s local:%s class:%s\\n"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" ) , get_mySubSystem ( ) -> getClassName ( ) )"	2053:1:53623:53815	3081270	68	True				
ANR	3082944	CallExpression	"dprintf ( D_ALWAYS , ""** Configuration: subsystem:%s local:%s class:%s\\n"" , get_mySubSystem ( ) -> getName ( ) , get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" ) , get_mySubSystem ( ) -> getClassName ( ) )"		3081270	0					
ANR	3082945	Callee	dprintf		3081270	0					
ANR	3082946	Identifier	dprintf		3081270	0					
ANR	3082947	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082948	Argument	D_ALWAYS		3081270	0					
ANR	3082949	Identifier	D_ALWAYS		3081270	0					
ANR	3082950	Argument	"""** Configuration: subsystem:%s local:%s class:%s\\n"""		3081270	1					
ANR	3082951	PrimaryExpression	"""** Configuration: subsystem:%s local:%s class:%s\\n"""		3081270	0					
ANR	3082952	Argument	get_mySubSystem ( ) -> getName ( )		3081270	2					
ANR	3082953	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3082954	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082955	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3082956	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082957	Callee	get_mySubSystem		3081270	0					
ANR	3082958	Identifier	get_mySubSystem		3081270	0					
ANR	3082959	ArgumentList			3081270	1					
ANR	3082960	Identifier	getName		3081270	1					
ANR	3082961	ArgumentList			3081270	1					
ANR	3082962	Argument	"get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" )"		3081270	3					
ANR	3082963	CallExpression	"get_mySubSystem ( ) -> getLocalName ( ""<NONE>"" )"		3081270	0					
ANR	3082964	Callee	get_mySubSystem ( ) -> getLocalName		3081270	0					
ANR	3082965	PtrMemberAccess	get_mySubSystem ( ) -> getLocalName		3081270	0					
ANR	3082966	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082967	Callee	get_mySubSystem		3081270	0					
ANR	3082968	Identifier	get_mySubSystem		3081270	0					
ANR	3082969	ArgumentList			3081270	1					
ANR	3082970	Identifier	getLocalName		3081270	1					
ANR	3082971	ArgumentList	"""<NONE>"""		3081270	1					
ANR	3082972	Argument	"""<NONE>"""		3081270	0					
ANR	3082973	PrimaryExpression	"""<NONE>"""		3081270	0					
ANR	3082974	Argument	get_mySubSystem ( ) -> getClassName ( )		3081270	4					
ANR	3082975	CallExpression	get_mySubSystem ( ) -> getClassName ( )		3081270	0					
ANR	3082976	Callee	get_mySubSystem ( ) -> getClassName		3081270	0					
ANR	3082977	PtrMemberAccess	get_mySubSystem ( ) -> getClassName		3081270	0					
ANR	3082978	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3082979	Callee	get_mySubSystem		3081270	0					
ANR	3082980	Identifier	get_mySubSystem		3081270	0					
ANR	3082981	ArgumentList			3081270	1					
ANR	3082982	Identifier	getClassName		3081270	1					
ANR	3082983	ArgumentList			3081270	1					
ANR	3082984	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorVersion ( ) )"	2058:1:53818:53862	3081270	69	True				
ANR	3082985	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorVersion ( ) )"		3081270	0					
ANR	3082986	Callee	dprintf		3081270	0					
ANR	3082987	Identifier	dprintf		3081270	0					
ANR	3082988	ArgumentList	D_ALWAYS		3081270	1					
ANR	3082989	Argument	D_ALWAYS		3081270	0					
ANR	3082990	Identifier	D_ALWAYS		3081270	0					
ANR	3082991	Argument	"""** %s\\n"""		3081270	1					
ANR	3082992	PrimaryExpression	"""** %s\\n"""		3081270	0					
ANR	3082993	Argument	CondorVersion ( )		3081270	2					
ANR	3082994	CallExpression	CondorVersion ( )		3081270	0					
ANR	3082995	Callee	CondorVersion		3081270	0					
ANR	3082996	Identifier	CondorVersion		3081270	0					
ANR	3082997	ArgumentList			3081270	1					
ANR	3082998	ExpressionStatement	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorPlatform ( ) )"	2059:1:53865:53910	3081270	70	True				
ANR	3082999	CallExpression	"dprintf ( D_ALWAYS , ""** %s\\n"" , CondorPlatform ( ) )"		3081270	0					
ANR	3083000	Callee	dprintf		3081270	0					
ANR	3083001	Identifier	dprintf		3081270	0					
ANR	3083002	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083003	Argument	D_ALWAYS		3081270	0					
ANR	3083004	Identifier	D_ALWAYS		3081270	0					
ANR	3083005	Argument	"""** %s\\n"""		3081270	1					
ANR	3083006	PrimaryExpression	"""** %s\\n"""		3081270	0					
ANR	3083007	Argument	CondorPlatform ( )		3081270	2					
ANR	3083008	CallExpression	CondorPlatform ( )		3081270	0					
ANR	3083009	Callee	CondorPlatform		3081270	0					
ANR	3083010	Identifier	CondorPlatform		3081270	0					
ANR	3083011	ArgumentList			3081270	1					
ANR	3083012	ExpressionStatement	"dprintf ( D_ALWAYS , ""** PID = %lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"	2060:1:53913:53985	3081270	71	True				
ANR	3083013	CallExpression	"dprintf ( D_ALWAYS , ""** PID = %lu\\n"" , ( unsigned long ) daemonCore -> getpid ( ) )"		3081270	0					
ANR	3083014	Callee	dprintf		3081270	0					
ANR	3083015	Identifier	dprintf		3081270	0					
ANR	3083016	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083017	Argument	D_ALWAYS		3081270	0					
ANR	3083018	Identifier	D_ALWAYS		3081270	0					
ANR	3083019	Argument	"""** PID = %lu\\n"""		3081270	1					
ANR	3083020	PrimaryExpression	"""** PID = %lu\\n"""		3081270	0					
ANR	3083021	Argument	( unsigned long ) daemonCore -> getpid ( )		3081270	2					
ANR	3083022	CastExpression	( unsigned long ) daemonCore -> getpid ( )		3081270	0					
ANR	3083023	CastTarget	unsigned long		3081270	0					
ANR	3083024	CallExpression	daemonCore -> getpid ( )		3081270	1					
ANR	3083025	Callee	daemonCore -> getpid		3081270	0					
ANR	3083026	PtrMemberAccess	daemonCore -> getpid		3081270	0					
ANR	3083027	Identifier	daemonCore		3081270	0					
ANR	3083028	Identifier	getpid		3081270	1					
ANR	3083029	ArgumentList			3081270	1					
ANR	3083030	IdentifierDeclStatement	time_t log_last_mod_time = dprintf_last_modification ( ) ;	2061:1:53988:54042	3081270	72	True				
ANR	3083031	IdentifierDecl	log_last_mod_time = dprintf_last_modification ( )		3081270	0					
ANR	3083032	IdentifierDeclType	time_t		3081270	0					
ANR	3083033	Identifier	log_last_mod_time		3081270	1					
ANR	3083034	AssignmentExpression	log_last_mod_time = dprintf_last_modification ( )		3081270	2		=			
ANR	3083035	Identifier	log_last_mod_time		3081270	0					
ANR	3083036	CallExpression	dprintf_last_modification ( )		3081270	1					
ANR	3083037	Callee	dprintf_last_modification		3081270	0					
ANR	3083038	Identifier	dprintf_last_modification		3081270	0					
ANR	3083039	ArgumentList			3081270	1					
ANR	3083040	IfStatement	if ( log_last_mod_time <= 0 )		3081270	73					
ANR	3083041	Condition	log_last_mod_time <= 0	2062:6:54050:54071	3081270	0	True				
ANR	3083042	RelationalExpression	log_last_mod_time <= 0		3081270	0		<=			
ANR	3083043	Identifier	log_last_mod_time		3081270	0					
ANR	3083044	PrimaryExpression	0		3081270	1					
ANR	3083045	CompoundStatement		528:31:16003:16003	3081270	1					
ANR	3083046	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Log last touched time unavailable (%s)\\n"" , strerror ( - log_last_mod_time ) )"	2063:2:54079:54176	3081270	0	True				
ANR	3083047	CallExpression	"dprintf ( D_ALWAYS , ""** Log last touched time unavailable (%s)\\n"" , strerror ( - log_last_mod_time ) )"		3081270	0					
ANR	3083048	Callee	dprintf		3081270	0					
ANR	3083049	Identifier	dprintf		3081270	0					
ANR	3083050	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083051	Argument	D_ALWAYS		3081270	0					
ANR	3083052	Identifier	D_ALWAYS		3081270	0					
ANR	3083053	Argument	"""** Log last touched time unavailable (%s)\\n"""		3081270	1					
ANR	3083054	PrimaryExpression	"""** Log last touched time unavailable (%s)\\n"""		3081270	0					
ANR	3083055	Argument	strerror ( - log_last_mod_time )		3081270	2					
ANR	3083056	CallExpression	strerror ( - log_last_mod_time )		3081270	0					
ANR	3083057	Callee	strerror		3081270	0					
ANR	3083058	Identifier	strerror		3081270	0					
ANR	3083059	ArgumentList	- log_last_mod_time		3081270	1					
ANR	3083060	Argument	- log_last_mod_time		3081270	0					
ANR	3083061	UnaryOperationExpression	- log_last_mod_time		3081270	0					
ANR	3083062	UnaryOperator	-		3081270	0					
ANR	3083063	Identifier	log_last_mod_time		3081270	1					
ANR	3083064	ElseStatement	else		3081270	0					
ANR	3083065	CompoundStatement		532:2:16118:16165	3081270	0					
ANR	3083066	IdentifierDeclStatement	struct tm * tm = localtime ( & log_last_mod_time ) ;	2066:2:54190:54237	3081270	0	True				
ANR	3083067	IdentifierDecl	* tm = localtime ( & log_last_mod_time )		3081270	0					
ANR	3083068	IdentifierDeclType	struct tm *		3081270	0					
ANR	3083069	Identifier	tm		3081270	1					
ANR	3083070	AssignmentExpression	* tm = localtime ( & log_last_mod_time )		3081270	2		=			
ANR	3083071	Identifier	tm		3081270	0					
ANR	3083072	CallExpression	localtime ( & log_last_mod_time )		3081270	1					
ANR	3083073	Callee	localtime		3081270	0					
ANR	3083074	Identifier	localtime		3081270	0					
ANR	3083075	ArgumentList	& log_last_mod_time		3081270	1					
ANR	3083076	Argument	& log_last_mod_time		3081270	0					
ANR	3083077	UnaryOperationExpression	& log_last_mod_time		3081270	0					
ANR	3083078	UnaryOperator	&		3081270	0					
ANR	3083079	Identifier	log_last_mod_time		3081270	1					
ANR	3083080	ExpressionStatement	"dprintf ( D_ALWAYS , ""** Log last touched %d/%d %02d:%02d:%02d\\n"" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"	2067:2:54241:54377	3081270	1	True				
ANR	3083081	CallExpression	"dprintf ( D_ALWAYS , ""** Log last touched %d/%d %02d:%02d:%02d\\n"" , tm -> tm_mon + 1 , tm -> tm_mday , tm -> tm_hour , tm -> tm_min , tm -> tm_sec )"		3081270	0					
ANR	3083082	Callee	dprintf		3081270	0					
ANR	3083083	Identifier	dprintf		3081270	0					
ANR	3083084	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083085	Argument	D_ALWAYS		3081270	0					
ANR	3083086	Identifier	D_ALWAYS		3081270	0					
ANR	3083087	Argument	"""** Log last touched %d/%d %02d:%02d:%02d\\n"""		3081270	1					
ANR	3083088	PrimaryExpression	"""** Log last touched %d/%d %02d:%02d:%02d\\n"""		3081270	0					
ANR	3083089	Argument	tm -> tm_mon + 1		3081270	2					
ANR	3083090	AdditiveExpression	tm -> tm_mon + 1		3081270	0		+			
ANR	3083091	PtrMemberAccess	tm -> tm_mon		3081270	0					
ANR	3083092	Identifier	tm		3081270	0					
ANR	3083093	Identifier	tm_mon		3081270	1					
ANR	3083094	PrimaryExpression	1		3081270	1					
ANR	3083095	Argument	tm -> tm_mday		3081270	3					
ANR	3083096	PtrMemberAccess	tm -> tm_mday		3081270	0					
ANR	3083097	Identifier	tm		3081270	0					
ANR	3083098	Identifier	tm_mday		3081270	1					
ANR	3083099	Argument	tm -> tm_hour		3081270	4					
ANR	3083100	PtrMemberAccess	tm -> tm_hour		3081270	0					
ANR	3083101	Identifier	tm		3081270	0					
ANR	3083102	Identifier	tm_hour		3081270	1					
ANR	3083103	Argument	tm -> tm_min		3081270	5					
ANR	3083104	PtrMemberAccess	tm -> tm_min		3081270	0					
ANR	3083105	Identifier	tm		3081270	0					
ANR	3083106	Identifier	tm_min		3081270	1					
ANR	3083107	Argument	tm -> tm_sec		3081270	6					
ANR	3083108	PtrMemberAccess	tm -> tm_sec		3081270	0					
ANR	3083109	Identifier	tm		3081270	0					
ANR	3083110	Identifier	tm_sec		3081270	1					
ANR	3083111	IfStatement	if ( getuid ( ) )		3081270	74					
ANR	3083112	Condition	getuid ( )	2076:5:54547:54554	3081270	0	True				
ANR	3083113	CallExpression	getuid ( )		3081270	0					
ANR	3083114	Callee	getuid		3081270	0					
ANR	3083115	Identifier	getuid		3081270	0					
ANR	3083116	ArgumentList			3081270	1					
ANR	3083117	CompoundStatement		542:16:16486:16486	3081270	1					
ANR	3083118	ExpressionStatement	"dprintf ( D_PRIV , ""** Running as non-root: No privilege switching\\n"" )"	2077:2:54562:54629	3081270	0	True				
ANR	3083119	CallExpression	"dprintf ( D_PRIV , ""** Running as non-root: No privilege switching\\n"" )"		3081270	0					
ANR	3083120	Callee	dprintf		3081270	0					
ANR	3083121	Identifier	dprintf		3081270	0					
ANR	3083122	ArgumentList	D_PRIV		3081270	1					
ANR	3083123	Argument	D_PRIV		3081270	0					
ANR	3083124	Identifier	D_PRIV		3081270	0					
ANR	3083125	Argument	"""** Running as non-root: No privilege switching\\n"""		3081270	1					
ANR	3083126	PrimaryExpression	"""** Running as non-root: No privilege switching\\n"""		3081270	0					
ANR	3083127	ElseStatement	else		3081270	0					
ANR	3083128	CompoundStatement		544:8:16567:16567	3081270	0					
ANR	3083129	ExpressionStatement	"dprintf ( D_PRIV , ""** Running as root: Privilege switching in effect\\n"" )"	2079:2:54643:54713	3081270	0	True				
ANR	3083130	CallExpression	"dprintf ( D_PRIV , ""** Running as root: Privilege switching in effect\\n"" )"		3081270	0					
ANR	3083131	Callee	dprintf		3081270	0					
ANR	3083132	Identifier	dprintf		3081270	0					
ANR	3083133	ArgumentList	D_PRIV		3081270	1					
ANR	3083134	Argument	D_PRIV		3081270	0					
ANR	3083135	Identifier	D_PRIV		3081270	0					
ANR	3083136	Argument	"""** Running as root: Privilege switching in effect\\n"""		3081270	1					
ANR	3083137	PrimaryExpression	"""** Running as root: Privilege switching in effect\\n"""		3081270	0					
ANR	3083138	ExpressionStatement	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"	2083:1:54727:54803	3081270	75	True				
ANR	3083139	CallExpression	"dprintf ( D_ALWAYS , ""******************************************************\\n"" )"		3081270	0					
ANR	3083140	Callee	dprintf		3081270	0					
ANR	3083141	Identifier	dprintf		3081270	0					
ANR	3083142	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083143	Argument	D_ALWAYS		3081270	0					
ANR	3083144	Identifier	D_ALWAYS		3081270	0					
ANR	3083145	Argument	"""******************************************************\\n"""		3081270	1					
ANR	3083146	PrimaryExpression	"""******************************************************\\n"""		3081270	0					
ANR	3083147	IfStatement	"if ( global_config_source != """" )"		3081270	76					
ANR	3083148	Condition	"global_config_source != """""	2085:5:54811:54836	3081270	0	True				
ANR	3083149	EqualityExpression	"global_config_source != """""		3081270	0		!=			
ANR	3083150	Identifier	global_config_source		3081270	0					
ANR	3083151	PrimaryExpression	""""""		3081270	1					
ANR	3083152	CompoundStatement		551:33:16767:16767	3081270	1					
ANR	3083153	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using config source: %s\\n"" , global_config_source . Value ( ) )"	2086:2:54843:54924	3081270	0	True				
ANR	3083154	CallExpression	"dprintf ( D_ALWAYS , ""Using config source: %s\\n"" , global_config_source . Value ( ) )"		3081270	0					
ANR	3083155	Callee	dprintf		3081270	0					
ANR	3083156	Identifier	dprintf		3081270	0					
ANR	3083157	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083158	Argument	D_ALWAYS		3081270	0					
ANR	3083159	Identifier	D_ALWAYS		3081270	0					
ANR	3083160	Argument	"""Using config source: %s\\n"""		3081270	1					
ANR	3083161	PrimaryExpression	"""Using config source: %s\\n"""		3081270	0					
ANR	3083162	Argument	global_config_source . Value ( )		3081270	2					
ANR	3083163	CallExpression	global_config_source . Value ( )		3081270	0					
ANR	3083164	Callee	global_config_source . Value		3081270	0					
ANR	3083165	MemberAccess	global_config_source . Value		3081270	0					
ANR	3083166	Identifier	global_config_source		3081270	0					
ANR	3083167	Identifier	Value		3081270	1					
ANR	3083168	ArgumentList			3081270	1					
ANR	3083169	ElseStatement	else		3081270	0					
ANR	3083170	CompoundStatement		556:2:16917:16947	3081270	0					
ANR	3083171	IdentifierDeclStatement	const char * env_name = EnvGetName ( ENV_CONFIG ) ;	2089:2:54938:54985	3081270	0	True				
ANR	3083172	IdentifierDecl	* env_name = EnvGetName ( ENV_CONFIG )		3081270	0					
ANR	3083173	IdentifierDeclType	const char *		3081270	0					
ANR	3083174	Identifier	env_name		3081270	1					
ANR	3083175	AssignmentExpression	* env_name = EnvGetName ( ENV_CONFIG )		3081270	2		=			
ANR	3083176	Identifier	env_name		3081270	0					
ANR	3083177	CallExpression	EnvGetName ( ENV_CONFIG )		3081270	1					
ANR	3083178	Callee	EnvGetName		3081270	0					
ANR	3083179	Identifier	EnvGetName		3081270	0					
ANR	3083180	ArgumentList	ENV_CONFIG		3081270	1					
ANR	3083181	Argument	ENV_CONFIG		3081270	0					
ANR	3083182	Identifier	ENV_CONFIG		3081270	0					
ANR	3083183	IdentifierDeclStatement	char * env = getenv ( env_name ) ;	2090:2:54989:55019	3081270	1	True				
ANR	3083184	IdentifierDecl	* env = getenv ( env_name )		3081270	0					
ANR	3083185	IdentifierDeclType	char *		3081270	0					
ANR	3083186	Identifier	env		3081270	1					
ANR	3083187	AssignmentExpression	* env = getenv ( env_name )		3081270	2		=			
ANR	3083188	Identifier	env		3081270	0					
ANR	3083189	CallExpression	getenv ( env_name )		3081270	1					
ANR	3083190	Callee	getenv		3081270	0					
ANR	3083191	Identifier	getenv		3081270	0					
ANR	3083192	ArgumentList	env_name		3081270	1					
ANR	3083193	Argument	env_name		3081270	0					
ANR	3083194	Identifier	env_name		3081270	0					
ANR	3083195	IfStatement	if ( env )		3081270	2					
ANR	3083196	Condition	env	2091:6:55027:55029	3081270	0	True				
ANR	3083197	Identifier	env		3081270	0					
ANR	3083198	CompoundStatement		557:12:16961:16961	3081270	1					
ANR	3083199	ExpressionStatement	"dprintf ( D_ALWAYS , ""%s is set to '%s', not reading a config file\\n"" , env_name , env )"	2092:3:55038:55132	3081270	0	True				
ANR	3083200	CallExpression	"dprintf ( D_ALWAYS , ""%s is set to '%s', not reading a config file\\n"" , env_name , env )"		3081270	0					
ANR	3083201	Callee	dprintf		3081270	0					
ANR	3083202	Identifier	dprintf		3081270	0					
ANR	3083203	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083204	Argument	D_ALWAYS		3081270	0					
ANR	3083205	Identifier	D_ALWAYS		3081270	0					
ANR	3083206	Argument	"""%s is set to '%s', not reading a config file\\n"""		3081270	1					
ANR	3083207	PrimaryExpression	"""%s is set to '%s', not reading a config file\\n"""		3081270	0					
ANR	3083208	Argument	env_name		3081270	2					
ANR	3083209	Identifier	env_name		3081270	0					
ANR	3083210	Argument	env		3081270	3					
ANR	3083211	Identifier	env		3081270	0					
ANR	3083212	IfStatement	if ( ! local_config_sources . isEmpty ( ) )		3081270	77					
ANR	3083213	Condition	! local_config_sources . isEmpty ( )	2098:5:55147:55177	3081270	0	True				
ANR	3083214	UnaryOperationExpression	! local_config_sources . isEmpty ( )		3081270	0					
ANR	3083215	UnaryOperator	!		3081270	0					
ANR	3083216	CallExpression	local_config_sources . isEmpty ( )		3081270	1					
ANR	3083217	Callee	local_config_sources . isEmpty		3081270	0					
ANR	3083218	MemberAccess	local_config_sources . isEmpty		3081270	0					
ANR	3083219	Identifier	local_config_sources		3081270	0					
ANR	3083220	Identifier	isEmpty		3081270	1					
ANR	3083221	ArgumentList			3081270	1					
ANR	3083222	CompoundStatement		567:2:17200:17212	3081270	1					
ANR	3083223	ExpressionStatement	"dprintf ( D_ALWAYS , ""Using local config sources: \\n"" )"	2099:2:55184:55235	3081270	0	True				
ANR	3083224	CallExpression	"dprintf ( D_ALWAYS , ""Using local config sources: \\n"" )"		3081270	0					
ANR	3083225	Callee	dprintf		3081270	0					
ANR	3083226	Identifier	dprintf		3081270	0					
ANR	3083227	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083228	Argument	D_ALWAYS		3081270	0					
ANR	3083229	Identifier	D_ALWAYS		3081270	0					
ANR	3083230	Argument	"""Using local config sources: \\n"""		3081270	1					
ANR	3083231	PrimaryExpression	"""Using local config sources: \\n"""		3081270	0					
ANR	3083232	ExpressionStatement	local_config_sources . rewind ( )	2100:2:55239:55268	3081270	1	True				
ANR	3083233	CallExpression	local_config_sources . rewind ( )		3081270	0					
ANR	3083234	Callee	local_config_sources . rewind		3081270	0					
ANR	3083235	MemberAccess	local_config_sources . rewind		3081270	0					
ANR	3083236	Identifier	local_config_sources		3081270	0					
ANR	3083237	Identifier	rewind		3081270	1					
ANR	3083238	ArgumentList			3081270	1					
ANR	3083239	IdentifierDeclStatement	char * source ;	2101:2:55272:55284	3081270	2	True				
ANR	3083240	IdentifierDecl	* source		3081270	0					
ANR	3083241	IdentifierDeclType	char *		3081270	0					
ANR	3083242	Identifier	source		3081270	1					
ANR	3083243	WhileStatement	while ( ( source = local_config_sources . next ( ) ) != NULL )		3081270	3					
ANR	3083244	Condition	( source = local_config_sources . next ( ) ) != NULL	2102:9:55295:55340	3081270	0	True				
ANR	3083245	EqualityExpression	( source = local_config_sources . next ( ) ) != NULL		3081270	0		!=			
ANR	3083246	AssignmentExpression	source = local_config_sources . next ( )		3081270	0		=			
ANR	3083247	Identifier	source		3081270	0					
ANR	3083248	CallExpression	local_config_sources . next ( )		3081270	1					
ANR	3083249	Callee	local_config_sources . next		3081270	0					
ANR	3083250	MemberAccess	local_config_sources . next		3081270	0					
ANR	3083251	Identifier	local_config_sources		3081270	0					
ANR	3083252	Identifier	next		3081270	1					
ANR	3083253	ArgumentList			3081270	1					
ANR	3083254	Identifier	NULL		3081270	1					
ANR	3083255	CompoundStatement		568:58:17272:17272	3081270	1					
ANR	3083256	ExpressionStatement	"dprintf ( D_ALWAYS , ""   %s\\n"" , source )"	2103:3:55349:55386	3081270	0	True				
ANR	3083257	CallExpression	"dprintf ( D_ALWAYS , ""   %s\\n"" , source )"		3081270	0					
ANR	3083258	Callee	dprintf		3081270	0					
ANR	3083259	Identifier	dprintf		3081270	0					
ANR	3083260	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083261	Argument	D_ALWAYS		3081270	0					
ANR	3083262	Identifier	D_ALWAYS		3081270	0					
ANR	3083263	Argument	"""   %s\\n"""		3081270	1					
ANR	3083264	PrimaryExpression	"""   %s\\n"""		3081270	0					
ANR	3083265	Argument	source		3081270	2					
ANR	3083266	Identifier	source		3081270	0					
ANR	3083267	ExpressionStatement	drop_core_in_log ( )	2108:1:55523:55541	3081270	78	True				
ANR	3083268	CallExpression	drop_core_in_log ( )		3081270	0					
ANR	3083269	Callee	drop_core_in_log		3081270	0					
ANR	3083270	Identifier	drop_core_in_log		3081270	0					
ANR	3083271	ArgumentList			3081270	1					
ANR	3083272	IdentifierDeclStatement	"BOOL is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) ) ;"	2121:1:56117:56183	3081270	79	True				
ANR	3083273	IdentifierDecl	"is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		3081270	0					
ANR	3083274	IdentifierDeclType	BOOL		3081270	0					
ANR	3083275	Identifier	is_kbdd		3081270	1					
ANR	3083276	AssignmentExpression	"is_kbdd = ( 0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" ) )"		3081270	2		=			
ANR	3083277	Identifier	is_kbdd		3081270	0					
ANR	3083278	EqualityExpression	"0 == strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		3081270	1		==			
ANR	3083279	PrimaryExpression	0		3081270	0					
ANR	3083280	CallExpression	"strcmp ( get_mySubSystem ( ) -> getName ( ) , ""KBDD"" )"		3081270	1					
ANR	3083281	Callee	strcmp		3081270	0					
ANR	3083282	Identifier	strcmp		3081270	0					
ANR	3083283	ArgumentList	get_mySubSystem ( ) -> getName ( )		3081270	1					
ANR	3083284	Argument	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3083285	CallExpression	get_mySubSystem ( ) -> getName ( )		3081270	0					
ANR	3083286	Callee	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3083287	PtrMemberAccess	get_mySubSystem ( ) -> getName		3081270	0					
ANR	3083288	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083289	Callee	get_mySubSystem		3081270	0					
ANR	3083290	Identifier	get_mySubSystem		3081270	0					
ANR	3083291	ArgumentList			3081270	1					
ANR	3083292	Identifier	getName		3081270	1					
ANR	3083293	ArgumentList			3081270	1					
ANR	3083294	Argument	"""KBDD"""		3081270	1					
ANR	3083295	PrimaryExpression	"""KBDD"""		3081270	0					
ANR	3083296	IfStatement	if ( ! is_kbdd )		3081270	80					
ANR	3083297	Condition	! is_kbdd	2122:4:56189:56196	3081270	0	True				
ANR	3083298	UnaryOperationExpression	! is_kbdd		3081270	0					
ANR	3083299	UnaryOperator	!		3081270	0					
ANR	3083300	Identifier	is_kbdd		3081270	1					
ANR	3083301	ExpressionStatement	AllocConsole ( )	2123:2:56201:56215	3081270	1	True				
ANR	3083302	CallExpression	AllocConsole ( )		3081270	0					
ANR	3083303	Callee	AllocConsole		3081270	0					
ANR	3083304	Identifier	AllocConsole		3081270	0					
ANR	3083305	ArgumentList			3081270	1					
ANR	3083306	IfStatement	"if ( pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1 )"		3081270	81					
ANR	3083307	Condition	"pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"	2130:6:56433:56594	3081270	0	True				
ANR	3083308	OrExpression	"pipe ( daemonCore -> async_pipe ) == - 1 || fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		3081270	0		||			
ANR	3083309	EqualityExpression	pipe ( daemonCore -> async_pipe ) == - 1		3081270	0		==			
ANR	3083310	CallExpression	pipe ( daemonCore -> async_pipe )		3081270	0					
ANR	3083311	Callee	pipe		3081270	0					
ANR	3083312	Identifier	pipe		3081270	0					
ANR	3083313	ArgumentList	daemonCore -> async_pipe		3081270	1					
ANR	3083314	Argument	daemonCore -> async_pipe		3081270	0					
ANR	3083315	PtrMemberAccess	daemonCore -> async_pipe		3081270	0					
ANR	3083316	Identifier	daemonCore		3081270	0					
ANR	3083317	Identifier	async_pipe		3081270	1					
ANR	3083318	UnaryOperationExpression	- 1		3081270	1					
ANR	3083319	UnaryOperator	-		3081270	0					
ANR	3083320	PrimaryExpression	1		3081270	1					
ANR	3083321	OrExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1 || fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		3081270	1		||			
ANR	3083322	EqualityExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK ) == - 1"		3081270	0		==			
ANR	3083323	CallExpression	"fcntl ( daemonCore -> async_pipe [ 0 ] , F_SETFL , O_NONBLOCK )"		3081270	0					
ANR	3083324	Callee	fcntl		3081270	0					
ANR	3083325	Identifier	fcntl		3081270	0					
ANR	3083326	ArgumentList	daemonCore -> async_pipe [ 0 ]		3081270	1					
ANR	3083327	Argument	daemonCore -> async_pipe [ 0 ]		3081270	0					
ANR	3083328	ArrayIndexing	daemonCore -> async_pipe [ 0 ]		3081270	0					
ANR	3083329	PtrMemberAccess	daemonCore -> async_pipe		3081270	0					
ANR	3083330	Identifier	daemonCore		3081270	0					
ANR	3083331	Identifier	async_pipe		3081270	1					
ANR	3083332	PrimaryExpression	0		3081270	1					
ANR	3083333	Argument	F_SETFL		3081270	1					
ANR	3083334	Identifier	F_SETFL		3081270	0					
ANR	3083335	Argument	O_NONBLOCK		3081270	2					
ANR	3083336	Identifier	O_NONBLOCK		3081270	0					
ANR	3083337	UnaryOperationExpression	- 1		3081270	1					
ANR	3083338	UnaryOperator	-		3081270	0					
ANR	3083339	PrimaryExpression	1		3081270	1					
ANR	3083340	EqualityExpression	"fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK ) == - 1"		3081270	1		==			
ANR	3083341	CallExpression	"fcntl ( daemonCore -> async_pipe [ 1 ] , F_SETFL , O_NONBLOCK )"		3081270	0					
ANR	3083342	Callee	fcntl		3081270	0					
ANR	3083343	Identifier	fcntl		3081270	0					
ANR	3083344	ArgumentList	daemonCore -> async_pipe [ 1 ]		3081270	1					
ANR	3083345	Argument	daemonCore -> async_pipe [ 1 ]		3081270	0					
ANR	3083346	ArrayIndexing	daemonCore -> async_pipe [ 1 ]		3081270	0					
ANR	3083347	PtrMemberAccess	daemonCore -> async_pipe		3081270	0					
ANR	3083348	Identifier	daemonCore		3081270	0					
ANR	3083349	Identifier	async_pipe		3081270	1					
ANR	3083350	PrimaryExpression	1		3081270	1					
ANR	3083351	Argument	F_SETFL		3081270	1					
ANR	3083352	Identifier	F_SETFL		3081270	0					
ANR	3083353	Argument	O_NONBLOCK		3081270	2					
ANR	3083354	Identifier	O_NONBLOCK		3081270	0					
ANR	3083355	UnaryOperationExpression	- 1		3081270	1					
ANR	3083356	UnaryOperator	-		3081270	0					
ANR	3083357	PrimaryExpression	1		3081270	1					
ANR	3083358	CompoundStatement		598:63:18526:18526	3081270	1					
ANR	3083359	ExpressionStatement	"EXCEPT ( ""Failed to create async pipe"" )"	2133:3:56603:56640	3081270	0	True				
ANR	3083360	CallExpression	"EXCEPT ( ""Failed to create async pipe"" )"		3081270	0					
ANR	3083361	Callee	EXCEPT		3081270	0					
ANR	3083362	Identifier	EXCEPT		3081270	0					
ANR	3083363	ArgumentList	"""Failed to create async pipe"""		3081270	1					
ANR	3083364	Argument	"""Failed to create async pipe"""		3081270	0					
ANR	3083365	PrimaryExpression	"""Failed to create async pipe"""		3081270	0					
ANR	3083366	ExpressionStatement	GCB_Recovery_failed_callback_set ( gcb_recovery_failed_callback )	2144:1:56860:56924	3081270	82	True				
ANR	3083367	CallExpression	GCB_Recovery_failed_callback_set ( gcb_recovery_failed_callback )		3081270	0					
ANR	3083368	Callee	GCB_Recovery_failed_callback_set		3081270	0					
ANR	3083369	Identifier	GCB_Recovery_failed_callback_set		3081270	0					
ANR	3083370	ArgumentList	gcb_recovery_failed_callback		3081270	1					
ANR	3083371	Argument	gcb_recovery_failed_callback		3081270	0					
ANR	3083372	Identifier	gcb_recovery_failed_callback		3081270	0					
ANR	3083373	IfStatement	if ( dc_main_pre_command_sock_init )		3081270	83					
ANR	3083374	Condition	dc_main_pre_command_sock_init	2147:6:56940:56968	3081270	0	True				
ANR	3083375	Identifier	dc_main_pre_command_sock_init		3081270	0					
ANR	3083376	CompoundStatement		613:38:18900:18900	3081270	1					
ANR	3083377	ExpressionStatement	dc_main_pre_command_sock_init ( )	2148:2:56976:57007	3081270	0	True				
ANR	3083378	CallExpression	dc_main_pre_command_sock_init ( )		3081270	0					
ANR	3083379	Callee	dc_main_pre_command_sock_init		3081270	0					
ANR	3083380	Identifier	dc_main_pre_command_sock_init		3081270	0					
ANR	3083381	ArgumentList			3081270	1					
ANR	3083382	IfStatement	if ( pidFile )		3081270	84					
ANR	3083383	Condition	pidFile	2172:5:57815:57821	3081270	0	True				
ANR	3083384	Identifier	pidFile		3081270	0					
ANR	3083385	CompoundStatement		638:15:19753:19753	3081270	1					
ANR	3083386	ExpressionStatement	drop_pid_file ( )	2173:2:57829:57844	3081270	0	True				
ANR	3083387	CallExpression	drop_pid_file ( )		3081270	0					
ANR	3083388	Callee	drop_pid_file		3081270	0					
ANR	3083389	Identifier	drop_pid_file		3081270	0					
ANR	3083390	ArgumentList			3081270	1					
ANR	3083391	ExpressionStatement	kill_daemon_ad_file ( )	2179:1:58059:58080	3081270	85	True				
ANR	3083392	CallExpression	kill_daemon_ad_file ( )		3081270	0					
ANR	3083393	Callee	kill_daemon_ad_file		3081270	0					
ANR	3083394	Identifier	kill_daemon_ad_file		3081270	0					
ANR	3083395	ArgumentList			3081270	1					
ANR	3083396	ExpressionStatement	daemonCore -> SetDaemonSockName ( daemon_sock_name )	2183:1:58111:58160	3081270	86	True				
ANR	3083397	CallExpression	daemonCore -> SetDaemonSockName ( daemon_sock_name )		3081270	0					
ANR	3083398	Callee	daemonCore -> SetDaemonSockName		3081270	0					
ANR	3083399	PtrMemberAccess	daemonCore -> SetDaemonSockName		3081270	0					
ANR	3083400	Identifier	daemonCore		3081270	0					
ANR	3083401	Identifier	SetDaemonSockName		3081270	1					
ANR	3083402	ArgumentList	daemon_sock_name		3081270	1					
ANR	3083403	Argument	daemon_sock_name		3081270	0					
ANR	3083404	Identifier	daemon_sock_name		3081270	0					
ANR	3083405	ExpressionStatement	daemonCore -> InitDCCommandSocket ( command_port )	2184:1:58163:58210	3081270	87	True				
ANR	3083406	CallExpression	daemonCore -> InitDCCommandSocket ( command_port )		3081270	0					
ANR	3083407	Callee	daemonCore -> InitDCCommandSocket		3081270	0					
ANR	3083408	PtrMemberAccess	daemonCore -> InitDCCommandSocket		3081270	0					
ANR	3083409	Identifier	daemonCore		3081270	0					
ANR	3083410	Identifier	InitDCCommandSocket		3081270	1					
ANR	3083411	ArgumentList	command_port		3081270	1					
ANR	3083412	Argument	command_port		3081270	0					
ANR	3083413	Identifier	command_port		3081270	0					
ANR	3083414	ExpressionStatement	"daemonCore -> Register_Signal ( SIGHUP , ""SIGHUP"" , ( SignalHandler ) handle_dc_sighup , ""handle_dc_sighup()"" )"	2187:1:58277:58398	3081270	88	True				
ANR	3083415	CallExpression	"daemonCore -> Register_Signal ( SIGHUP , ""SIGHUP"" , ( SignalHandler ) handle_dc_sighup , ""handle_dc_sighup()"" )"		3081270	0					
ANR	3083416	Callee	daemonCore -> Register_Signal		3081270	0					
ANR	3083417	PtrMemberAccess	daemonCore -> Register_Signal		3081270	0					
ANR	3083418	Identifier	daemonCore		3081270	0					
ANR	3083419	Identifier	Register_Signal		3081270	1					
ANR	3083420	ArgumentList	SIGHUP		3081270	1					
ANR	3083421	Argument	SIGHUP		3081270	0					
ANR	3083422	Identifier	SIGHUP		3081270	0					
ANR	3083423	Argument	"""SIGHUP"""		3081270	1					
ANR	3083424	PrimaryExpression	"""SIGHUP"""		3081270	0					
ANR	3083425	Argument	( SignalHandler ) handle_dc_sighup		3081270	2					
ANR	3083426	CastExpression	( SignalHandler ) handle_dc_sighup		3081270	0					
ANR	3083427	CastTarget	SignalHandler		3081270	0					
ANR	3083428	Identifier	handle_dc_sighup		3081270	1					
ANR	3083429	Argument	"""handle_dc_sighup()"""		3081270	3					
ANR	3083430	PrimaryExpression	"""handle_dc_sighup()"""		3081270	0					
ANR	3083431	ExpressionStatement	"daemonCore -> Register_Signal ( SIGQUIT , ""SIGQUIT"" , ( SignalHandler ) handle_dc_sigquit , ""handle_dc_sigquit()"" )"	2190:1:58401:58526	3081270	89	True				
ANR	3083432	CallExpression	"daemonCore -> Register_Signal ( SIGQUIT , ""SIGQUIT"" , ( SignalHandler ) handle_dc_sigquit , ""handle_dc_sigquit()"" )"		3081270	0					
ANR	3083433	Callee	daemonCore -> Register_Signal		3081270	0					
ANR	3083434	PtrMemberAccess	daemonCore -> Register_Signal		3081270	0					
ANR	3083435	Identifier	daemonCore		3081270	0					
ANR	3083436	Identifier	Register_Signal		3081270	1					
ANR	3083437	ArgumentList	SIGQUIT		3081270	1					
ANR	3083438	Argument	SIGQUIT		3081270	0					
ANR	3083439	Identifier	SIGQUIT		3081270	0					
ANR	3083440	Argument	"""SIGQUIT"""		3081270	1					
ANR	3083441	PrimaryExpression	"""SIGQUIT"""		3081270	0					
ANR	3083442	Argument	( SignalHandler ) handle_dc_sigquit		3081270	2					
ANR	3083443	CastExpression	( SignalHandler ) handle_dc_sigquit		3081270	0					
ANR	3083444	CastTarget	SignalHandler		3081270	0					
ANR	3083445	Identifier	handle_dc_sigquit		3081270	1					
ANR	3083446	Argument	"""handle_dc_sigquit()"""		3081270	3					
ANR	3083447	PrimaryExpression	"""handle_dc_sigquit()"""		3081270	0					
ANR	3083448	ExpressionStatement	"daemonCore -> Register_Signal ( SIGTERM , ""SIGTERM"" , ( SignalHandler ) handle_dc_sigterm , ""handle_dc_sigterm()"" )"	2193:1:58529:58654	3081270	90	True				
ANR	3083449	CallExpression	"daemonCore -> Register_Signal ( SIGTERM , ""SIGTERM"" , ( SignalHandler ) handle_dc_sigterm , ""handle_dc_sigterm()"" )"		3081270	0					
ANR	3083450	Callee	daemonCore -> Register_Signal		3081270	0					
ANR	3083451	PtrMemberAccess	daemonCore -> Register_Signal		3081270	0					
ANR	3083452	Identifier	daemonCore		3081270	0					
ANR	3083453	Identifier	Register_Signal		3081270	1					
ANR	3083454	ArgumentList	SIGTERM		3081270	1					
ANR	3083455	Argument	SIGTERM		3081270	0					
ANR	3083456	Identifier	SIGTERM		3081270	0					
ANR	3083457	Argument	"""SIGTERM"""		3081270	1					
ANR	3083458	PrimaryExpression	"""SIGTERM"""		3081270	0					
ANR	3083459	Argument	( SignalHandler ) handle_dc_sigterm		3081270	2					
ANR	3083460	CastExpression	( SignalHandler ) handle_dc_sigterm		3081270	0					
ANR	3083461	CastTarget	SignalHandler		3081270	0					
ANR	3083462	Identifier	handle_dc_sigterm		3081270	1					
ANR	3083463	Argument	"""handle_dc_sigterm()"""		3081270	3					
ANR	3083464	PrimaryExpression	"""handle_dc_sigterm()"""		3081270	0					
ANR	3083465	ExpressionStatement	"daemonCore -> Register_Signal ( DC_SERVICEWAITPIDS , ""DC_SERVICEWAITPIDS"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS , ""HandleDC_SERVICEWAITPIDS()"" , daemonCore )"	2197:1:58658:58842	3081270	91	True				
ANR	3083466	CallExpression	"daemonCore -> Register_Signal ( DC_SERVICEWAITPIDS , ""DC_SERVICEWAITPIDS"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS , ""HandleDC_SERVICEWAITPIDS()"" , daemonCore )"		3081270	0					
ANR	3083467	Callee	daemonCore -> Register_Signal		3081270	0					
ANR	3083468	PtrMemberAccess	daemonCore -> Register_Signal		3081270	0					
ANR	3083469	Identifier	daemonCore		3081270	0					
ANR	3083470	Identifier	Register_Signal		3081270	1					
ANR	3083471	ArgumentList	DC_SERVICEWAITPIDS		3081270	1					
ANR	3083472	Argument	DC_SERVICEWAITPIDS		3081270	0					
ANR	3083473	Identifier	DC_SERVICEWAITPIDS		3081270	0					
ANR	3083474	Argument	"""DC_SERVICEWAITPIDS"""		3081270	1					
ANR	3083475	PrimaryExpression	"""DC_SERVICEWAITPIDS"""		3081270	0					
ANR	3083476	Argument	( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS		3081270	2					
ANR	3083477	CastExpression	( SignalHandlercpp ) & DaemonCore :: HandleDC_SERVICEWAITPIDS		3081270	0					
ANR	3083478	CastTarget	SignalHandlercpp		3081270	0					
ANR	3083479	UnaryOperationExpression	& DaemonCore :: HandleDC_SERVICEWAITPIDS		3081270	1					
ANR	3083480	UnaryOperator	&		3081270	0					
ANR	3083481	Identifier	DaemonCore :: HandleDC_SERVICEWAITPIDS		3081270	1					
ANR	3083482	Argument	"""HandleDC_SERVICEWAITPIDS()"""		3081270	3					
ANR	3083483	PrimaryExpression	"""HandleDC_SERVICEWAITPIDS()"""		3081270	0					
ANR	3083484	Argument	daemonCore		3081270	4					
ANR	3083485	Identifier	daemonCore		3081270	0					
ANR	3083486	ExpressionStatement	"daemonCore -> Register_Signal ( SIGCHLD , ""SIGCHLD"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD , ""HandleDC_SIGCHLD()"" , daemonCore )"	2201:1:58859:59007	3081270	92	True				
ANR	3083487	CallExpression	"daemonCore -> Register_Signal ( SIGCHLD , ""SIGCHLD"" , ( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD , ""HandleDC_SIGCHLD()"" , daemonCore )"		3081270	0					
ANR	3083488	Callee	daemonCore -> Register_Signal		3081270	0					
ANR	3083489	PtrMemberAccess	daemonCore -> Register_Signal		3081270	0					
ANR	3083490	Identifier	daemonCore		3081270	0					
ANR	3083491	Identifier	Register_Signal		3081270	1					
ANR	3083492	ArgumentList	SIGCHLD		3081270	1					
ANR	3083493	Argument	SIGCHLD		3081270	0					
ANR	3083494	Identifier	SIGCHLD		3081270	0					
ANR	3083495	Argument	"""SIGCHLD"""		3081270	1					
ANR	3083496	PrimaryExpression	"""SIGCHLD"""		3081270	0					
ANR	3083497	Argument	( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD		3081270	2					
ANR	3083498	CastExpression	( SignalHandlercpp ) & DaemonCore :: HandleDC_SIGCHLD		3081270	0					
ANR	3083499	CastTarget	SignalHandlercpp		3081270	0					
ANR	3083500	UnaryOperationExpression	& DaemonCore :: HandleDC_SIGCHLD		3081270	1					
ANR	3083501	UnaryOperator	&		3081270	0					
ANR	3083502	Identifier	DaemonCore :: HandleDC_SIGCHLD		3081270	1					
ANR	3083503	Argument	"""HandleDC_SIGCHLD()"""		3081270	3					
ANR	3083504	PrimaryExpression	"""HandleDC_SIGCHLD()"""		3081270	0					
ANR	3083505	Argument	daemonCore		3081270	4					
ANR	3083506	Identifier	daemonCore		3081270	0					
ANR	3083507	IfStatement	if ( runfor )		3081270	93					
ANR	3083508	Condition	runfor	2209:6:59141:59146	3081270	0	True				
ANR	3083509	Identifier	runfor		3081270	0					
ANR	3083510	CompoundStatement		675:15:21078:21078	3081270	1					
ANR	3083511	ExpressionStatement	daemon_stop_time = time ( NULL ) + runfor * 60	2210:2:59154:59193	3081270	0	True				
ANR	3083512	AssignmentExpression	daemon_stop_time = time ( NULL ) + runfor * 60		3081270	0		=			
ANR	3083513	Identifier	daemon_stop_time		3081270	0					
ANR	3083514	AdditiveExpression	time ( NULL ) + runfor * 60		3081270	1		+			
ANR	3083515	CallExpression	time ( NULL )		3081270	0					
ANR	3083516	Callee	time		3081270	0					
ANR	3083517	Identifier	time		3081270	0					
ANR	3083518	ArgumentList	NULL		3081270	1					
ANR	3083519	Argument	NULL		3081270	0					
ANR	3083520	Identifier	NULL		3081270	0					
ANR	3083521	MultiplicativeExpression	runfor * 60		3081270	1		*			
ANR	3083522	Identifier	runfor		3081270	0					
ANR	3083523	PrimaryExpression	60		3081270	1					
ANR	3083524	ExpressionStatement	"daemonCore -> Register_Timer ( runfor * 60 , 0 , TimerHandler_dc_sigterm , ""handle_dc_sigterm"" )"	2211:2:59197:59292	3081270	1	True				
ANR	3083525	CallExpression	"daemonCore -> Register_Timer ( runfor * 60 , 0 , TimerHandler_dc_sigterm , ""handle_dc_sigterm"" )"		3081270	0					
ANR	3083526	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083527	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083528	Identifier	daemonCore		3081270	0					
ANR	3083529	Identifier	Register_Timer		3081270	1					
ANR	3083530	ArgumentList	runfor * 60		3081270	1					
ANR	3083531	Argument	runfor * 60		3081270	0					
ANR	3083532	MultiplicativeExpression	runfor * 60		3081270	0		*			
ANR	3083533	Identifier	runfor		3081270	0					
ANR	3083534	PrimaryExpression	60		3081270	1					
ANR	3083535	Argument	0		3081270	1					
ANR	3083536	PrimaryExpression	0		3081270	0					
ANR	3083537	Argument	TimerHandler_dc_sigterm		3081270	2					
ANR	3083538	Identifier	TimerHandler_dc_sigterm		3081270	0					
ANR	3083539	Argument	"""handle_dc_sigterm"""		3081270	3					
ANR	3083540	PrimaryExpression	"""handle_dc_sigterm"""		3081270	0					
ANR	3083541	ExpressionStatement	"dprintf ( D_ALWAYS , ""Registered Timer for graceful shutdown in %d minutes\\n"" , runfor )"	2213:2:59296:59383	3081270	2	True				
ANR	3083542	CallExpression	"dprintf ( D_ALWAYS , ""Registered Timer for graceful shutdown in %d minutes\\n"" , runfor )"		3081270	0					
ANR	3083543	Callee	dprintf		3081270	0					
ANR	3083544	Identifier	dprintf		3081270	0					
ANR	3083545	ArgumentList	D_ALWAYS		3081270	1					
ANR	3083546	Argument	D_ALWAYS		3081270	0					
ANR	3083547	Identifier	D_ALWAYS		3081270	0					
ANR	3083548	Argument	"""Registered Timer for graceful shutdown in %d minutes\\n"""		3081270	1					
ANR	3083549	PrimaryExpression	"""Registered Timer for graceful shutdown in %d minutes\\n"""		3081270	0					
ANR	3083550	Argument	runfor		3081270	2					
ANR	3083551	Identifier	runfor		3081270	0					
ANR	3083552	ElseStatement	else		3081270	0					
ANR	3083553	CompoundStatement		682:6:21322:21322	3081270	0					
ANR	3083554	ExpressionStatement	daemon_stop_time = 0	2217:2:59398:59418	3081270	0	True				
ANR	3083555	AssignmentExpression	daemon_stop_time = 0		3081270	0		=			
ANR	3083556	Identifier	daemon_stop_time		3081270	0					
ANR	3083557	PrimaryExpression	0		3081270	1					
ANR	3083558	IfStatement	if ( ! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) )		3081270	94					
ANR	3083559	Condition	! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )	2224:6:59660:59709	3081270	0	True				
ANR	3083560	UnaryOperationExpression	! get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		3081270	0					
ANR	3083561	UnaryOperator	!		3081270	0					
ANR	3083562	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		3081270	1					
ANR	3083563	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083564	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083565	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083566	Callee	get_mySubSystem		3081270	0					
ANR	3083567	Identifier	get_mySubSystem		3081270	0					
ANR	3083568	ArgumentList			3081270	1					
ANR	3083569	Identifier	isType		3081270	1					
ANR	3083570	ArgumentList	SUBSYSTEM_TYPE_MASTER		3081270	1					
ANR	3083571	Argument	SUBSYSTEM_TYPE_MASTER		3081270	0					
ANR	3083572	Identifier	SUBSYSTEM_TYPE_MASTER		3081270	0					
ANR	3083573	CompoundStatement		690:59:21641:21641	3081270	1					
ANR	3083574	ExpressionStatement	"daemonCore -> Register_Timer ( 15 , 120 , check_parent , ""check_parent"" )"	2225:2:59717:59789	3081270	0	True				
ANR	3083575	CallExpression	"daemonCore -> Register_Timer ( 15 , 120 , check_parent , ""check_parent"" )"		3081270	0					
ANR	3083576	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083577	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083578	Identifier	daemonCore		3081270	0					
ANR	3083579	Identifier	Register_Timer		3081270	1					
ANR	3083580	ArgumentList	15		3081270	1					
ANR	3083581	Argument	15		3081270	0					
ANR	3083582	PrimaryExpression	15		3081270	0					
ANR	3083583	Argument	120		3081270	1					
ANR	3083584	PrimaryExpression	120		3081270	0					
ANR	3083585	Argument	check_parent		3081270	2					
ANR	3083586	Identifier	check_parent		3081270	0					
ANR	3083587	Argument	"""check_parent"""		3081270	3					
ANR	3083588	PrimaryExpression	"""check_parent"""		3081270	0					
ANR	3083589	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , dc_touch_log_file , ""dc_touch_log_file"" )"	2230:1:59803:59878	3081270	95	True				
ANR	3083590	CallExpression	"daemonCore -> Register_Timer ( 0 , dc_touch_log_file , ""dc_touch_log_file"" )"		3081270	0					
ANR	3083591	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083592	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083593	Identifier	daemonCore		3081270	0					
ANR	3083594	Identifier	Register_Timer		3081270	1					
ANR	3083595	ArgumentList	0		3081270	1					
ANR	3083596	Argument	0		3081270	0					
ANR	3083597	PrimaryExpression	0		3081270	0					
ANR	3083598	Argument	dc_touch_log_file		3081270	1					
ANR	3083599	Identifier	dc_touch_log_file		3081270	0					
ANR	3083600	Argument	"""dc_touch_log_file"""		3081270	2					
ANR	3083601	PrimaryExpression	"""dc_touch_log_file"""		3081270	0					
ANR	3083602	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , dc_touch_lock_files , ""dc_touch_lock_files"" )"	2233:1:59882:59961	3081270	96	True				
ANR	3083603	CallExpression	"daemonCore -> Register_Timer ( 0 , dc_touch_lock_files , ""dc_touch_lock_files"" )"		3081270	0					
ANR	3083604	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083605	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083606	Identifier	daemonCore		3081270	0					
ANR	3083607	Identifier	Register_Timer		3081270	1					
ANR	3083608	ArgumentList	0		3081270	1					
ANR	3083609	Argument	0		3081270	0					
ANR	3083610	PrimaryExpression	0		3081270	0					
ANR	3083611	Argument	dc_touch_lock_files		3081270	1					
ANR	3083612	Identifier	dc_touch_lock_files		3081270	0					
ANR	3083613	Argument	"""dc_touch_lock_files"""		3081270	2					
ANR	3083614	PrimaryExpression	"""dc_touch_lock_files"""		3081270	0					
ANR	3083615	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , 5 * 60 , check_session_cache , ""check_session_cache"" )"	2236:1:59965:60052	3081270	97	True				
ANR	3083616	CallExpression	"daemonCore -> Register_Timer ( 0 , 5 * 60 , check_session_cache , ""check_session_cache"" )"		3081270	0					
ANR	3083617	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083618	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083619	Identifier	daemonCore		3081270	0					
ANR	3083620	Identifier	Register_Timer		3081270	1					
ANR	3083621	ArgumentList	0		3081270	1					
ANR	3083622	Argument	0		3081270	0					
ANR	3083623	PrimaryExpression	0		3081270	0					
ANR	3083624	Argument	5 * 60		3081270	1					
ANR	3083625	MultiplicativeExpression	5 * 60		3081270	0		*			
ANR	3083626	PrimaryExpression	5		3081270	0					
ANR	3083627	PrimaryExpression	60		3081270	1					
ANR	3083628	Argument	check_session_cache		3081270	2					
ANR	3083629	Identifier	check_session_cache		3081270	0					
ANR	3083630	Argument	"""check_session_cache"""		3081270	3					
ANR	3083631	PrimaryExpression	"""check_session_cache"""		3081270	0					
ANR	3083632	IdentifierDeclStatement	"int cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1 ;"	2243:1:60187:60265	3081270	98	True				
ANR	3083633	IdentifierDecl	"cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		3081270	0					
ANR	3083634	IdentifierDeclType	int		3081270	0					
ANR	3083635	Identifier	cookie_refresh		3081270	1					
ANR	3083636	AssignmentExpression	"cookie_refresh = ( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		3081270	2		=			
ANR	3083637	Identifier	cookie_refresh		3081270	0					
ANR	3083638	AdditiveExpression	"( param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2 ) + 1"		3081270	1		+			
ANR	3083639	MultiplicativeExpression	"param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 ) / 2"		3081270	0		/			
ANR	3083640	CallExpression	"param_integer ( ""SEC_DEFAULT_SESSION_DURATION"" , 3600 )"		3081270	0					
ANR	3083641	Callee	param_integer		3081270	0					
ANR	3083642	Identifier	param_integer		3081270	0					
ANR	3083643	ArgumentList	"""SEC_DEFAULT_SESSION_DURATION"""		3081270	1					
ANR	3083644	Argument	"""SEC_DEFAULT_SESSION_DURATION"""		3081270	0					
ANR	3083645	PrimaryExpression	"""SEC_DEFAULT_SESSION_DURATION"""		3081270	0					
ANR	3083646	Argument	3600		3081270	1					
ANR	3083647	PrimaryExpression	3600		3081270	0					
ANR	3083648	PrimaryExpression	2		3081270	1					
ANR	3083649	PrimaryExpression	1		3081270	1					
ANR	3083650	ExpressionStatement	"daemonCore -> Register_Timer ( 0 , cookie_refresh , handle_cookie_refresh , ""handle_cookie_refresh"" )"	2245:1:60269:60368	3081270	99	True				
ANR	3083651	CallExpression	"daemonCore -> Register_Timer ( 0 , cookie_refresh , handle_cookie_refresh , ""handle_cookie_refresh"" )"		3081270	0					
ANR	3083652	Callee	daemonCore -> Register_Timer		3081270	0					
ANR	3083653	PtrMemberAccess	daemonCore -> Register_Timer		3081270	0					
ANR	3083654	Identifier	daemonCore		3081270	0					
ANR	3083655	Identifier	Register_Timer		3081270	1					
ANR	3083656	ArgumentList	0		3081270	1					
ANR	3083657	Argument	0		3081270	0					
ANR	3083658	PrimaryExpression	0		3081270	0					
ANR	3083659	Argument	cookie_refresh		3081270	1					
ANR	3083660	Identifier	cookie_refresh		3081270	0					
ANR	3083661	Argument	handle_cookie_refresh		3081270	2					
ANR	3083662	Identifier	handle_cookie_refresh		3081270	0					
ANR	3083663	Argument	"""handle_cookie_refresh"""		3081270	3					
ANR	3083664	PrimaryExpression	"""handle_cookie_refresh"""		3081270	0					
ANR	3083665	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD ) )		3081270	100					
ANR	3083666	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )	2249:5:60378:60658	3081270	0	True				
ANR	3083667	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		3081270	0		||			
ANR	3083668	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_MASTER )		3081270	0					
ANR	3083669	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083670	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083671	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083672	Callee	get_mySubSystem		3081270	0					
ANR	3083673	Identifier	get_mySubSystem		3081270	0					
ANR	3083674	ArgumentList			3081270	1					
ANR	3083675	Identifier	isType		3081270	1					
ANR	3083676	ArgumentList	SUBSYSTEM_TYPE_MASTER		3081270	1					
ANR	3083677	Argument	SUBSYSTEM_TYPE_MASTER		3081270	0					
ANR	3083678	Identifier	SUBSYSTEM_TYPE_MASTER		3081270	0					
ANR	3083679	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		3081270	1		||			
ANR	3083680	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )		3081270	0					
ANR	3083681	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083682	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083683	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083684	Callee	get_mySubSystem		3081270	0					
ANR	3083685	Identifier	get_mySubSystem		3081270	0					
ANR	3083686	ArgumentList			3081270	1					
ANR	3083687	Identifier	isType		3081270	1					
ANR	3083688	ArgumentList	SUBSYSTEM_TYPE_COLLECTOR		3081270	1					
ANR	3083689	Argument	SUBSYSTEM_TYPE_COLLECTOR		3081270	0					
ANR	3083690	Identifier	SUBSYSTEM_TYPE_COLLECTOR		3081270	0					
ANR	3083691	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		3081270	1		||			
ANR	3083692	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_NEGOTIATOR )		3081270	0					
ANR	3083693	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083694	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083695	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083696	Callee	get_mySubSystem		3081270	0					
ANR	3083697	Identifier	get_mySubSystem		3081270	0					
ANR	3083698	ArgumentList			3081270	1					
ANR	3083699	Identifier	isType		3081270	1					
ANR	3083700	ArgumentList	SUBSYSTEM_TYPE_NEGOTIATOR		3081270	1					
ANR	3083701	Argument	SUBSYSTEM_TYPE_NEGOTIATOR		3081270	0					
ANR	3083702	Identifier	SUBSYSTEM_TYPE_NEGOTIATOR		3081270	0					
ANR	3083703	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		3081270	1		||			
ANR	3083704	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD )		3081270	0					
ANR	3083705	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083706	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083707	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083708	Callee	get_mySubSystem		3081270	0					
ANR	3083709	Identifier	get_mySubSystem		3081270	0					
ANR	3083710	ArgumentList			3081270	1					
ANR	3083711	Identifier	isType		3081270	1					
ANR	3083712	ArgumentList	SUBSYSTEM_TYPE_SCHEDD		3081270	1					
ANR	3083713	Argument	SUBSYSTEM_TYPE_SCHEDD		3081270	0					
ANR	3083714	Identifier	SUBSYSTEM_TYPE_SCHEDD		3081270	0					
ANR	3083715	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTD )		3081270	1					
ANR	3083716	Callee	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083717	PtrMemberAccess	get_mySubSystem ( ) -> isType		3081270	0					
ANR	3083718	CallExpression	get_mySubSystem ( )		3081270	0					
ANR	3083719	Callee	get_mySubSystem		3081270	0					
ANR	3083720	Identifier	get_mySubSystem		3081270	0					
ANR	3083721	ArgumentList			3081270	1					
ANR	3083722	Identifier	isType		3081270	1					
ANR	3083723	ArgumentList	SUBSYSTEM_TYPE_STARTD		3081270	1					
ANR	3083724	Argument	SUBSYSTEM_TYPE_STARTD		3081270	0					
ANR	3083725	Identifier	SUBSYSTEM_TYPE_STARTD		3081270	0					
ANR	3083726	CompoundStatement		719:55:22590:22590	3081270	1					
ANR	3083727	ExpressionStatement	daemonCore -> monitor_data . EnableMonitoring ( )	2254:8:60672:60715	3081270	0	True				
ANR	3083728	CallExpression	daemonCore -> monitor_data . EnableMonitoring ( )		3081270	0					
ANR	3083729	Callee	daemonCore -> monitor_data . EnableMonitoring		3081270	0					
ANR	3083730	MemberAccess	daemonCore -> monitor_data . EnableMonitoring		3081270	0					
ANR	3083731	PtrMemberAccess	daemonCore -> monitor_data		3081270	0					
ANR	3083732	Identifier	daemonCore		3081270	0					
ANR	3083733	Identifier	monitor_data		3081270	1					
ANR	3083734	Identifier	EnableMonitoring		3081270	1					
ANR	3083735	ArgumentList			3081270	1					
ANR	3083736	ExpressionStatement	"daemonCore -> Register_Command ( DC_RECONFIG , ""DC_RECONFIG"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"	2258:1:60789:60931	3081270	101	True				
ANR	3083737	CallExpression	"daemonCore -> Register_Command ( DC_RECONFIG , ""DC_RECONFIG"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"		3081270	0					
ANR	3083738	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083739	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083740	Identifier	daemonCore		3081270	0					
ANR	3083741	Identifier	Register_Command		3081270	1					
ANR	3083742	ArgumentList	DC_RECONFIG		3081270	1					
ANR	3083743	Argument	DC_RECONFIG		3081270	0					
ANR	3083744	Identifier	DC_RECONFIG		3081270	0					
ANR	3083745	Argument	"""DC_RECONFIG"""		3081270	1					
ANR	3083746	PrimaryExpression	"""DC_RECONFIG"""		3081270	0					
ANR	3083747	Argument	( CommandHandler ) handle_reconfig		3081270	2					
ANR	3083748	CastExpression	( CommandHandler ) handle_reconfig		3081270	0					
ANR	3083749	CastTarget	CommandHandler		3081270	0					
ANR	3083750	Identifier	handle_reconfig		3081270	1					
ANR	3083751	Argument	"""handle_reconfig()"""		3081270	3					
ANR	3083752	PrimaryExpression	"""handle_reconfig()"""		3081270	0					
ANR	3083753	Argument	0		3081270	4					
ANR	3083754	PrimaryExpression	0		3081270	0					
ANR	3083755	Argument	WRITE		3081270	5					
ANR	3083756	Identifier	WRITE		3081270	0					
ANR	3083757	ExpressionStatement	"daemonCore -> Register_Command ( DC_RECONFIG_FULL , ""DC_RECONFIG_FULL"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"	2262:1:60935:61087	3081270	102	True				
ANR	3083758	CallExpression	"daemonCore -> Register_Command ( DC_RECONFIG_FULL , ""DC_RECONFIG_FULL"" , ( CommandHandler ) handle_reconfig , ""handle_reconfig()"" , 0 , WRITE )"		3081270	0					
ANR	3083759	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083760	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083761	Identifier	daemonCore		3081270	0					
ANR	3083762	Identifier	Register_Command		3081270	1					
ANR	3083763	ArgumentList	DC_RECONFIG_FULL		3081270	1					
ANR	3083764	Argument	DC_RECONFIG_FULL		3081270	0					
ANR	3083765	Identifier	DC_RECONFIG_FULL		3081270	0					
ANR	3083766	Argument	"""DC_RECONFIG_FULL"""		3081270	1					
ANR	3083767	PrimaryExpression	"""DC_RECONFIG_FULL"""		3081270	0					
ANR	3083768	Argument	( CommandHandler ) handle_reconfig		3081270	2					
ANR	3083769	CastExpression	( CommandHandler ) handle_reconfig		3081270	0					
ANR	3083770	CastTarget	CommandHandler		3081270	0					
ANR	3083771	Identifier	handle_reconfig		3081270	1					
ANR	3083772	Argument	"""handle_reconfig()"""		3081270	3					
ANR	3083773	PrimaryExpression	"""handle_reconfig()"""		3081270	0					
ANR	3083774	Argument	0		3081270	4					
ANR	3083775	PrimaryExpression	0		3081270	0					
ANR	3083776	Argument	WRITE		3081270	5					
ANR	3083777	Identifier	WRITE		3081270	0					
ANR	3083778	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_VAL , ""DC_CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"	2266:1:61091:61240	3081270	103	True				
ANR	3083779	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_VAL , ""DC_CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"		3081270	0					
ANR	3083780	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083781	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083782	Identifier	daemonCore		3081270	0					
ANR	3083783	Identifier	Register_Command		3081270	1					
ANR	3083784	ArgumentList	DC_CONFIG_VAL		3081270	1					
ANR	3083785	Argument	DC_CONFIG_VAL		3081270	0					
ANR	3083786	Identifier	DC_CONFIG_VAL		3081270	0					
ANR	3083787	Argument	"""DC_CONFIG_VAL"""		3081270	1					
ANR	3083788	PrimaryExpression	"""DC_CONFIG_VAL"""		3081270	0					
ANR	3083789	Argument	( CommandHandler ) handle_config_val		3081270	2					
ANR	3083790	CastExpression	( CommandHandler ) handle_config_val		3081270	0					
ANR	3083791	CastTarget	CommandHandler		3081270	0					
ANR	3083792	Identifier	handle_config_val		3081270	1					
ANR	3083793	Argument	"""handle_config_val()"""		3081270	3					
ANR	3083794	PrimaryExpression	"""handle_config_val()"""		3081270	0					
ANR	3083795	Argument	0		3081270	4					
ANR	3083796	PrimaryExpression	0		3081270	0					
ANR	3083797	Argument	READ		3081270	5					
ANR	3083798	Identifier	READ		3081270	0					
ANR	3083799	ExpressionStatement	"daemonCore -> Register_Command ( CONFIG_VAL , ""CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"	2270:1:61272:61415	3081270	104	True				
ANR	3083800	CallExpression	"daemonCore -> Register_Command ( CONFIG_VAL , ""CONFIG_VAL"" , ( CommandHandler ) handle_config_val , ""handle_config_val()"" , 0 , READ )"		3081270	0					
ANR	3083801	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083802	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083803	Identifier	daemonCore		3081270	0					
ANR	3083804	Identifier	Register_Command		3081270	1					
ANR	3083805	ArgumentList	CONFIG_VAL		3081270	1					
ANR	3083806	Argument	CONFIG_VAL		3081270	0					
ANR	3083807	Identifier	CONFIG_VAL		3081270	0					
ANR	3083808	Argument	"""CONFIG_VAL"""		3081270	1					
ANR	3083809	PrimaryExpression	"""CONFIG_VAL"""		3081270	0					
ANR	3083810	Argument	( CommandHandler ) handle_config_val		3081270	2					
ANR	3083811	CastExpression	( CommandHandler ) handle_config_val		3081270	0					
ANR	3083812	CastTarget	CommandHandler		3081270	0					
ANR	3083813	Identifier	handle_config_val		3081270	1					
ANR	3083814	Argument	"""handle_config_val()"""		3081270	3					
ANR	3083815	PrimaryExpression	"""handle_config_val()"""		3081270	0					
ANR	3083816	Argument	0		3081270	4					
ANR	3083817	PrimaryExpression	0		3081270	0					
ANR	3083818	Argument	READ		3081270	5					
ANR	3083819	Identifier	READ		3081270	0					
ANR	3083820	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_PERSIST , ""DC_CONFIG_PERSIST"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"	2277:1:61597:61747	3081270	105	True				
ANR	3083821	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_PERSIST , ""DC_CONFIG_PERSIST"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"		3081270	0					
ANR	3083822	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083823	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083824	Identifier	daemonCore		3081270	0					
ANR	3083825	Identifier	Register_Command		3081270	1					
ANR	3083826	ArgumentList	DC_CONFIG_PERSIST		3081270	1					
ANR	3083827	Argument	DC_CONFIG_PERSIST		3081270	0					
ANR	3083828	Identifier	DC_CONFIG_PERSIST		3081270	0					
ANR	3083829	Argument	"""DC_CONFIG_PERSIST"""		3081270	1					
ANR	3083830	PrimaryExpression	"""DC_CONFIG_PERSIST"""		3081270	0					
ANR	3083831	Argument	( CommandHandler ) handle_config		3081270	2					
ANR	3083832	CastExpression	( CommandHandler ) handle_config		3081270	0					
ANR	3083833	CastTarget	CommandHandler		3081270	0					
ANR	3083834	Identifier	handle_config		3081270	1					
ANR	3083835	Argument	"""handle_config()"""		3081270	3					
ANR	3083836	PrimaryExpression	"""handle_config()"""		3081270	0					
ANR	3083837	Argument	0		3081270	4					
ANR	3083838	PrimaryExpression	0		3081270	0					
ANR	3083839	Argument	ALLOW		3081270	5					
ANR	3083840	Identifier	ALLOW		3081270	0					
ANR	3083841	ExpressionStatement	"daemonCore -> Register_Command ( DC_CONFIG_RUNTIME , ""DC_CONFIG_RUNTIME"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"	2281:1:61751:61901	3081270	106	True				
ANR	3083842	CallExpression	"daemonCore -> Register_Command ( DC_CONFIG_RUNTIME , ""DC_CONFIG_RUNTIME"" , ( CommandHandler ) handle_config , ""handle_config()"" , 0 , ALLOW )"		3081270	0					
ANR	3083843	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083844	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083845	Identifier	daemonCore		3081270	0					
ANR	3083846	Identifier	Register_Command		3081270	1					
ANR	3083847	ArgumentList	DC_CONFIG_RUNTIME		3081270	1					
ANR	3083848	Argument	DC_CONFIG_RUNTIME		3081270	0					
ANR	3083849	Identifier	DC_CONFIG_RUNTIME		3081270	0					
ANR	3083850	Argument	"""DC_CONFIG_RUNTIME"""		3081270	1					
ANR	3083851	PrimaryExpression	"""DC_CONFIG_RUNTIME"""		3081270	0					
ANR	3083852	Argument	( CommandHandler ) handle_config		3081270	2					
ANR	3083853	CastExpression	( CommandHandler ) handle_config		3081270	0					
ANR	3083854	CastTarget	CommandHandler		3081270	0					
ANR	3083855	Identifier	handle_config		3081270	1					
ANR	3083856	Argument	"""handle_config()"""		3081270	3					
ANR	3083857	PrimaryExpression	"""handle_config()"""		3081270	0					
ANR	3083858	Argument	0		3081270	4					
ANR	3083859	PrimaryExpression	0		3081270	0					
ANR	3083860	Argument	ALLOW		3081270	5					
ANR	3083861	Identifier	ALLOW		3081270	0					
ANR	3083862	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_FAST , ""DC_OFF_FAST"" , ( CommandHandler ) handle_off_fast , ""handle_off_fast()"" , 0 , ADMINISTRATOR )"	2285:1:61905:62055	3081270	107	True				
ANR	3083863	CallExpression	"daemonCore -> Register_Command ( DC_OFF_FAST , ""DC_OFF_FAST"" , ( CommandHandler ) handle_off_fast , ""handle_off_fast()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083864	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083865	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083866	Identifier	daemonCore		3081270	0					
ANR	3083867	Identifier	Register_Command		3081270	1					
ANR	3083868	ArgumentList	DC_OFF_FAST		3081270	1					
ANR	3083869	Argument	DC_OFF_FAST		3081270	0					
ANR	3083870	Identifier	DC_OFF_FAST		3081270	0					
ANR	3083871	Argument	"""DC_OFF_FAST"""		3081270	1					
ANR	3083872	PrimaryExpression	"""DC_OFF_FAST"""		3081270	0					
ANR	3083873	Argument	( CommandHandler ) handle_off_fast		3081270	2					
ANR	3083874	CastExpression	( CommandHandler ) handle_off_fast		3081270	0					
ANR	3083875	CastTarget	CommandHandler		3081270	0					
ANR	3083876	Identifier	handle_off_fast		3081270	1					
ANR	3083877	Argument	"""handle_off_fast()"""		3081270	3					
ANR	3083878	PrimaryExpression	"""handle_off_fast()"""		3081270	0					
ANR	3083879	Argument	0		3081270	4					
ANR	3083880	PrimaryExpression	0		3081270	0					
ANR	3083881	Argument	ADMINISTRATOR		3081270	5					
ANR	3083882	Identifier	ADMINISTRATOR		3081270	0					
ANR	3083883	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_GRACEFUL , ""DC_OFF_GRACEFUL"" , ( CommandHandler ) handle_off_graceful , ""handle_off_graceful()"" , 0 , ADMINISTRATOR )"	2289:1:62059:62225	3081270	108	True				
ANR	3083884	CallExpression	"daemonCore -> Register_Command ( DC_OFF_GRACEFUL , ""DC_OFF_GRACEFUL"" , ( CommandHandler ) handle_off_graceful , ""handle_off_graceful()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083885	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083886	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083887	Identifier	daemonCore		3081270	0					
ANR	3083888	Identifier	Register_Command		3081270	1					
ANR	3083889	ArgumentList	DC_OFF_GRACEFUL		3081270	1					
ANR	3083890	Argument	DC_OFF_GRACEFUL		3081270	0					
ANR	3083891	Identifier	DC_OFF_GRACEFUL		3081270	0					
ANR	3083892	Argument	"""DC_OFF_GRACEFUL"""		3081270	1					
ANR	3083893	PrimaryExpression	"""DC_OFF_GRACEFUL"""		3081270	0					
ANR	3083894	Argument	( CommandHandler ) handle_off_graceful		3081270	2					
ANR	3083895	CastExpression	( CommandHandler ) handle_off_graceful		3081270	0					
ANR	3083896	CastTarget	CommandHandler		3081270	0					
ANR	3083897	Identifier	handle_off_graceful		3081270	1					
ANR	3083898	Argument	"""handle_off_graceful()"""		3081270	3					
ANR	3083899	PrimaryExpression	"""handle_off_graceful()"""		3081270	0					
ANR	3083900	Argument	0		3081270	4					
ANR	3083901	PrimaryExpression	0		3081270	0					
ANR	3083902	Argument	ADMINISTRATOR		3081270	5					
ANR	3083903	Identifier	ADMINISTRATOR		3081270	0					
ANR	3083904	ExpressionStatement	"daemonCore -> Register_Command ( DC_OFF_PEACEFUL , ""DC_OFF_PEACEFUL"" , ( CommandHandler ) handle_off_peaceful , ""handle_off_peaceful()"" , 0 , ADMINISTRATOR )"	2293:1:62229:62395	3081270	109	True				
ANR	3083905	CallExpression	"daemonCore -> Register_Command ( DC_OFF_PEACEFUL , ""DC_OFF_PEACEFUL"" , ( CommandHandler ) handle_off_peaceful , ""handle_off_peaceful()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083906	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083907	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083908	Identifier	daemonCore		3081270	0					
ANR	3083909	Identifier	Register_Command		3081270	1					
ANR	3083910	ArgumentList	DC_OFF_PEACEFUL		3081270	1					
ANR	3083911	Argument	DC_OFF_PEACEFUL		3081270	0					
ANR	3083912	Identifier	DC_OFF_PEACEFUL		3081270	0					
ANR	3083913	Argument	"""DC_OFF_PEACEFUL"""		3081270	1					
ANR	3083914	PrimaryExpression	"""DC_OFF_PEACEFUL"""		3081270	0					
ANR	3083915	Argument	( CommandHandler ) handle_off_peaceful		3081270	2					
ANR	3083916	CastExpression	( CommandHandler ) handle_off_peaceful		3081270	0					
ANR	3083917	CastTarget	CommandHandler		3081270	0					
ANR	3083918	Identifier	handle_off_peaceful		3081270	1					
ANR	3083919	Argument	"""handle_off_peaceful()"""		3081270	3					
ANR	3083920	PrimaryExpression	"""handle_off_peaceful()"""		3081270	0					
ANR	3083921	Argument	0		3081270	4					
ANR	3083922	PrimaryExpression	0		3081270	0					
ANR	3083923	Argument	ADMINISTRATOR		3081270	5					
ANR	3083924	Identifier	ADMINISTRATOR		3081270	0					
ANR	3083925	ExpressionStatement	"daemonCore -> Register_Command ( DC_SET_PEACEFUL_SHUTDOWN , ""DC_SET_PEACEFUL_SHUTDOWN"" , ( CommandHandler ) handle_set_peaceful_shutdown , ""handle_set_peaceful_shutdown()"" , 0 , ADMINISTRATOR )"	2297:1:62399:62601	3081270	110	True				
ANR	3083926	CallExpression	"daemonCore -> Register_Command ( DC_SET_PEACEFUL_SHUTDOWN , ""DC_SET_PEACEFUL_SHUTDOWN"" , ( CommandHandler ) handle_set_peaceful_shutdown , ""handle_set_peaceful_shutdown()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083927	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083928	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083929	Identifier	daemonCore		3081270	0					
ANR	3083930	Identifier	Register_Command		3081270	1					
ANR	3083931	ArgumentList	DC_SET_PEACEFUL_SHUTDOWN		3081270	1					
ANR	3083932	Argument	DC_SET_PEACEFUL_SHUTDOWN		3081270	0					
ANR	3083933	Identifier	DC_SET_PEACEFUL_SHUTDOWN		3081270	0					
ANR	3083934	Argument	"""DC_SET_PEACEFUL_SHUTDOWN"""		3081270	1					
ANR	3083935	PrimaryExpression	"""DC_SET_PEACEFUL_SHUTDOWN"""		3081270	0					
ANR	3083936	Argument	( CommandHandler ) handle_set_peaceful_shutdown		3081270	2					
ANR	3083937	CastExpression	( CommandHandler ) handle_set_peaceful_shutdown		3081270	0					
ANR	3083938	CastTarget	CommandHandler		3081270	0					
ANR	3083939	Identifier	handle_set_peaceful_shutdown		3081270	1					
ANR	3083940	Argument	"""handle_set_peaceful_shutdown()"""		3081270	3					
ANR	3083941	PrimaryExpression	"""handle_set_peaceful_shutdown()"""		3081270	0					
ANR	3083942	Argument	0		3081270	4					
ANR	3083943	PrimaryExpression	0		3081270	0					
ANR	3083944	Argument	ADMINISTRATOR		3081270	5					
ANR	3083945	Identifier	ADMINISTRATOR		3081270	0					
ANR	3083946	ExpressionStatement	"daemonCore -> Register_Command ( DC_NOP , ""DC_NOP"" , ( CommandHandler ) handle_nop , ""handle_nop()"" , 0 , ALLOW )"	2305:1:62835:62957	3081270	111	True				
ANR	3083947	CallExpression	"daemonCore -> Register_Command ( DC_NOP , ""DC_NOP"" , ( CommandHandler ) handle_nop , ""handle_nop()"" , 0 , ALLOW )"		3081270	0					
ANR	3083948	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083949	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083950	Identifier	daemonCore		3081270	0					
ANR	3083951	Identifier	Register_Command		3081270	1					
ANR	3083952	ArgumentList	DC_NOP		3081270	1					
ANR	3083953	Argument	DC_NOP		3081270	0					
ANR	3083954	Identifier	DC_NOP		3081270	0					
ANR	3083955	Argument	"""DC_NOP"""		3081270	1					
ANR	3083956	PrimaryExpression	"""DC_NOP"""		3081270	0					
ANR	3083957	Argument	( CommandHandler ) handle_nop		3081270	2					
ANR	3083958	CastExpression	( CommandHandler ) handle_nop		3081270	0					
ANR	3083959	CastTarget	CommandHandler		3081270	0					
ANR	3083960	Identifier	handle_nop		3081270	1					
ANR	3083961	Argument	"""handle_nop()"""		3081270	3					
ANR	3083962	PrimaryExpression	"""handle_nop()"""		3081270	0					
ANR	3083963	Argument	0		3081270	4					
ANR	3083964	PrimaryExpression	0		3081270	0					
ANR	3083965	Argument	ALLOW		3081270	5					
ANR	3083966	Identifier	ALLOW		3081270	0					
ANR	3083967	ExpressionStatement	"daemonCore -> Register_Command ( DC_FETCH_LOG , ""DC_FETCH_LOG"" , ( CommandHandler ) handle_fetch_log , ""handle_fetch_log()"" , 0 , ADMINISTRATOR )"	2309:1:62961:63115	3081270	112	True				
ANR	3083968	CallExpression	"daemonCore -> Register_Command ( DC_FETCH_LOG , ""DC_FETCH_LOG"" , ( CommandHandler ) handle_fetch_log , ""handle_fetch_log()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083969	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083970	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083971	Identifier	daemonCore		3081270	0					
ANR	3083972	Identifier	Register_Command		3081270	1					
ANR	3083973	ArgumentList	DC_FETCH_LOG		3081270	1					
ANR	3083974	Argument	DC_FETCH_LOG		3081270	0					
ANR	3083975	Identifier	DC_FETCH_LOG		3081270	0					
ANR	3083976	Argument	"""DC_FETCH_LOG"""		3081270	1					
ANR	3083977	PrimaryExpression	"""DC_FETCH_LOG"""		3081270	0					
ANR	3083978	Argument	( CommandHandler ) handle_fetch_log		3081270	2					
ANR	3083979	CastExpression	( CommandHandler ) handle_fetch_log		3081270	0					
ANR	3083980	CastTarget	CommandHandler		3081270	0					
ANR	3083981	Identifier	handle_fetch_log		3081270	1					
ANR	3083982	Argument	"""handle_fetch_log()"""		3081270	3					
ANR	3083983	PrimaryExpression	"""handle_fetch_log()"""		3081270	0					
ANR	3083984	Argument	0		3081270	4					
ANR	3083985	PrimaryExpression	0		3081270	0					
ANR	3083986	Argument	ADMINISTRATOR		3081270	5					
ANR	3083987	Identifier	ADMINISTRATOR		3081270	0					
ANR	3083988	ExpressionStatement	"daemonCore -> Register_Command ( DC_PURGE_LOG , ""DC_PURGE_LOG"" , ( CommandHandler ) handle_fetch_log_history_purge , ""handle_fetch_log_history_purge()"" , 0 , ADMINISTRATOR )"	2313:1:63119:63301	3081270	113	True				
ANR	3083989	CallExpression	"daemonCore -> Register_Command ( DC_PURGE_LOG , ""DC_PURGE_LOG"" , ( CommandHandler ) handle_fetch_log_history_purge , ""handle_fetch_log_history_purge()"" , 0 , ADMINISTRATOR )"		3081270	0					
ANR	3083990	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3083991	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3083992	Identifier	daemonCore		3081270	0					
ANR	3083993	Identifier	Register_Command		3081270	1					
ANR	3083994	ArgumentList	DC_PURGE_LOG		3081270	1					
ANR	3083995	Argument	DC_PURGE_LOG		3081270	0					
ANR	3083996	Identifier	DC_PURGE_LOG		3081270	0					
ANR	3083997	Argument	"""DC_PURGE_LOG"""		3081270	1					
ANR	3083998	PrimaryExpression	"""DC_PURGE_LOG"""		3081270	0					
ANR	3083999	Argument	( CommandHandler ) handle_fetch_log_history_purge		3081270	2					
ANR	3084000	CastExpression	( CommandHandler ) handle_fetch_log_history_purge		3081270	0					
ANR	3084001	CastTarget	CommandHandler		3081270	0					
ANR	3084002	Identifier	handle_fetch_log_history_purge		3081270	1					
ANR	3084003	Argument	"""handle_fetch_log_history_purge()"""		3081270	3					
ANR	3084004	PrimaryExpression	"""handle_fetch_log_history_purge()"""		3081270	0					
ANR	3084005	Argument	0		3081270	4					
ANR	3084006	PrimaryExpression	0		3081270	0					
ANR	3084007	Argument	ADMINISTRATOR		3081270	5					
ANR	3084008	Identifier	ADMINISTRATOR		3081270	0					
ANR	3084009	ExpressionStatement	"daemonCore -> Register_Command ( DC_INVALIDATE_KEY , ""DC_INVALIDATE_KEY"" , ( CommandHandler ) handle_invalidate_key , ""handle_invalidate_key()"" , 0 , ALLOW )"	2317:1:63305:63471	3081270	114	True				
ANR	3084010	CallExpression	"daemonCore -> Register_Command ( DC_INVALIDATE_KEY , ""DC_INVALIDATE_KEY"" , ( CommandHandler ) handle_invalidate_key , ""handle_invalidate_key()"" , 0 , ALLOW )"		3081270	0					
ANR	3084011	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3084012	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3084013	Identifier	daemonCore		3081270	0					
ANR	3084014	Identifier	Register_Command		3081270	1					
ANR	3084015	ArgumentList	DC_INVALIDATE_KEY		3081270	1					
ANR	3084016	Argument	DC_INVALIDATE_KEY		3081270	0					
ANR	3084017	Identifier	DC_INVALIDATE_KEY		3081270	0					
ANR	3084018	Argument	"""DC_INVALIDATE_KEY"""		3081270	1					
ANR	3084019	PrimaryExpression	"""DC_INVALIDATE_KEY"""		3081270	0					
ANR	3084020	Argument	( CommandHandler ) handle_invalidate_key		3081270	2					
ANR	3084021	CastExpression	( CommandHandler ) handle_invalidate_key		3081270	0					
ANR	3084022	CastTarget	CommandHandler		3081270	0					
ANR	3084023	Identifier	handle_invalidate_key		3081270	1					
ANR	3084024	Argument	"""handle_invalidate_key()"""		3081270	3					
ANR	3084025	PrimaryExpression	"""handle_invalidate_key()"""		3081270	0					
ANR	3084026	Argument	0		3081270	4					
ANR	3084027	PrimaryExpression	0		3081270	0					
ANR	3084028	Argument	ALLOW		3081270	5					
ANR	3084029	Identifier	ALLOW		3081270	0					
ANR	3084030	ExpressionStatement	"daemonCore -> Register_Command ( DC_TIME_OFFSET , ""DC_TIME_OFFSET"" , ( CommandHandler ) time_offset_receive_cedar_stub , ""time_offset_cedar_stub"" , 0 , DAEMON )"	2326:1:63651:63820	3081270	115	True				
ANR	3084031	CallExpression	"daemonCore -> Register_Command ( DC_TIME_OFFSET , ""DC_TIME_OFFSET"" , ( CommandHandler ) time_offset_receive_cedar_stub , ""time_offset_cedar_stub"" , 0 , DAEMON )"		3081270	0					
ANR	3084032	Callee	daemonCore -> Register_Command		3081270	0					
ANR	3084033	PtrMemberAccess	daemonCore -> Register_Command		3081270	0					
ANR	3084034	Identifier	daemonCore		3081270	0					
ANR	3084035	Identifier	Register_Command		3081270	1					
ANR	3084036	ArgumentList	DC_TIME_OFFSET		3081270	1					
ANR	3084037	Argument	DC_TIME_OFFSET		3081270	0					
ANR	3084038	Identifier	DC_TIME_OFFSET		3081270	0					
ANR	3084039	Argument	"""DC_TIME_OFFSET"""		3081270	1					
ANR	3084040	PrimaryExpression	"""DC_TIME_OFFSET"""		3081270	0					
ANR	3084041	Argument	( CommandHandler ) time_offset_receive_cedar_stub		3081270	2					
ANR	3084042	CastExpression	( CommandHandler ) time_offset_receive_cedar_stub		3081270	0					
ANR	3084043	CastTarget	CommandHandler		3081270	0					
ANR	3084044	Identifier	time_offset_receive_cedar_stub		3081270	1					
ANR	3084045	Argument	"""time_offset_cedar_stub"""		3081270	3					
ANR	3084046	PrimaryExpression	"""time_offset_cedar_stub"""		3081270	0					
ANR	3084047	Argument	0		3081270	4					
ANR	3084048	PrimaryExpression	0		3081270	0					
ANR	3084049	Argument	DAEMON		3081270	5					
ANR	3084050	Identifier	DAEMON		3081270	0					
ANR	3084051	ExpressionStatement	daemonCore -> reconfig ( )	2333:1:63981:64003	3081270	116	True				
ANR	3084052	CallExpression	daemonCore -> reconfig ( )		3081270	0					
ANR	3084053	Callee	daemonCore -> reconfig		3081270	0					
ANR	3084054	PtrMemberAccess	daemonCore -> reconfig		3081270	0					
ANR	3084055	Identifier	daemonCore		3081270	0					
ANR	3084056	Identifier	reconfig		3081270	1					
ANR	3084057	ArgumentList			3081270	1					
ANR	3084058	IdentifierDeclStatement	const char * envName = EnvGetName ( ENV_PARENT_ID ) ;	2337:1:64057:64107	3081270	117	True				
ANR	3084059	IdentifierDecl	* envName = EnvGetName ( ENV_PARENT_ID )		3081270	0					
ANR	3084060	IdentifierDeclType	const char *		3081270	0					
ANR	3084061	Identifier	envName		3081270	1					
ANR	3084062	AssignmentExpression	* envName = EnvGetName ( ENV_PARENT_ID )		3081270	2		=			
ANR	3084063	Identifier	envName		3081270	0					
ANR	3084064	CallExpression	EnvGetName ( ENV_PARENT_ID )		3081270	1					
ANR	3084065	Callee	EnvGetName		3081270	0					
ANR	3084066	Identifier	EnvGetName		3081270	0					
ANR	3084067	ArgumentList	ENV_PARENT_ID		3081270	1					
ANR	3084068	Argument	ENV_PARENT_ID		3081270	0					
ANR	3084069	Identifier	ENV_PARENT_ID		3081270	0					
ANR	3084070	IdentifierDeclStatement	MyString parent_id ;	2338:1:64110:64128	3081270	118	True				
ANR	3084071	IdentifierDecl	parent_id		3081270	0					
ANR	3084072	IdentifierDeclType	MyString		3081270	0					
ANR	3084073	Identifier	parent_id		3081270	1					
ANR	3084074	ExpressionStatement	"GetEnv ( envName , parent_id )"	2340:1:64132:64160	3081270	119	True				
ANR	3084075	CallExpression	"GetEnv ( envName , parent_id )"		3081270	0					
ANR	3084076	Callee	GetEnv		3081270	0					
ANR	3084077	Identifier	GetEnv		3081270	0					
ANR	3084078	ArgumentList	envName		3081270	1					
ANR	3084079	Argument	envName		3081270	0					
ANR	3084080	Identifier	envName		3081270	0					
ANR	3084081	Argument	parent_id		3081270	1					
ANR	3084082	Identifier	parent_id		3081270	0					
ANR	3084083	ExpressionStatement	daemonCore -> sec_man -> set_parent_unique_id ( parent_id . Value ( ) )	2345:1:64305:64365	3081270	120	True				
ANR	3084084	CallExpression	daemonCore -> sec_man -> set_parent_unique_id ( parent_id . Value ( ) )		3081270	0					
ANR	3084085	Callee	daemonCore -> sec_man -> set_parent_unique_id		3081270	0					
ANR	3084086	PtrMemberAccess	daemonCore -> sec_man -> set_parent_unique_id		3081270	0					
ANR	3084087	PtrMemberAccess	daemonCore -> sec_man		3081270	0					
ANR	3084088	Identifier	daemonCore		3081270	0					
ANR	3084089	Identifier	sec_man		3081270	1					
ANR	3084090	Identifier	set_parent_unique_id		3081270	1					
ANR	3084091	ArgumentList	parent_id . Value ( )		3081270	1					
ANR	3084092	Argument	parent_id . Value ( )		3081270	0					
ANR	3084093	CallExpression	parent_id . Value ( )		3081270	0					
ANR	3084094	Callee	parent_id . Value		3081270	0					
ANR	3084095	MemberAccess	parent_id . Value		3081270	0					
ANR	3084096	Identifier	parent_id		3081270	0					
ANR	3084097	Identifier	Value		3081270	1					
ANR	3084098	ArgumentList			3081270	1					
ANR	3084099	ExpressionStatement	"SetEnv ( envName , daemonCore -> sec_man -> my_unique_id ( ) )"	2349:1:64465:64519	3081270	121	True				
ANR	3084100	CallExpression	"SetEnv ( envName , daemonCore -> sec_man -> my_unique_id ( ) )"		3081270	0					
ANR	3084101	Callee	SetEnv		3081270	0					
ANR	3084102	Identifier	SetEnv		3081270	0					
ANR	3084103	ArgumentList	envName		3081270	1					
ANR	3084104	Argument	envName		3081270	0					
ANR	3084105	Identifier	envName		3081270	0					
ANR	3084106	Argument	daemonCore -> sec_man -> my_unique_id ( )		3081270	1					
ANR	3084107	CallExpression	daemonCore -> sec_man -> my_unique_id ( )		3081270	0					
ANR	3084108	Callee	daemonCore -> sec_man -> my_unique_id		3081270	0					
ANR	3084109	PtrMemberAccess	daemonCore -> sec_man -> my_unique_id		3081270	0					
ANR	3084110	PtrMemberAccess	daemonCore -> sec_man		3081270	0					
ANR	3084111	Identifier	daemonCore		3081270	0					
ANR	3084112	Identifier	sec_man		3081270	1					
ANR	3084113	Identifier	my_unique_id		3081270	1					
ANR	3084114	ArgumentList			3081270	1					
ANR	3084115	IdentifierDeclStatement	"bool use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false ) ;"	2356:1:64720:64782	3081270	122	True				
ANR	3084116	IdentifierDecl	"use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		3081270	0					
ANR	3084117	IdentifierDeclType	bool		3081270	0					
ANR	3084118	Identifier	use_sql_log		3081270	1					
ANR	3084119	AssignmentExpression	"use_sql_log = param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		3081270	2		=			
ANR	3084120	Identifier	use_sql_log		3081270	0					
ANR	3084121	CallExpression	"param_boolean ( ""QUILL_USE_SQL_LOG"" , false )"		3081270	1					
ANR	3084122	Callee	param_boolean		3081270	0					
ANR	3084123	Identifier	param_boolean		3081270	0					
ANR	3084124	ArgumentList	"""QUILL_USE_SQL_LOG"""		3081270	1					
ANR	3084125	Argument	"""QUILL_USE_SQL_LOG"""		3081270	0					
ANR	3084126	PrimaryExpression	"""QUILL_USE_SQL_LOG"""		3081270	0					
ANR	3084127	Argument	false		3081270	1					
ANR	3084128	Identifier	false		3081270	0					
ANR	3084129	ExpressionStatement	FILEObj = FILESQL :: createInstance ( use_sql_log )	2358:1:64786:64832	3081270	123	True				
ANR	3084130	AssignmentExpression	FILEObj = FILESQL :: createInstance ( use_sql_log )		3081270	0		=			
ANR	3084131	Identifier	FILEObj		3081270	0					
ANR	3084132	CallExpression	FILESQL :: createInstance ( use_sql_log )		3081270	1					
ANR	3084133	Callee	FILESQL :: createInstance		3081270	0					
ANR	3084134	Identifier	FILESQL :: createInstance		3081270	0					
ANR	3084135	ArgumentList	use_sql_log		3081270	1					
ANR	3084136	Argument	use_sql_log		3081270	0					
ANR	3084137	Identifier	use_sql_log		3081270	0					
ANR	3084138	ExpressionStatement	XMLObj = FILEXML :: createInstanceXML ( )	2360:4:64871:64908	3081270	124	True				
ANR	3084139	AssignmentExpression	XMLObj = FILEXML :: createInstanceXML ( )		3081270	0		=			
ANR	3084140	Identifier	XMLObj		3081270	0					
ANR	3084141	CallExpression	FILEXML :: createInstanceXML ( )		3081270	1					
ANR	3084142	Callee	FILEXML :: createInstanceXML		3081270	0					
ANR	3084143	Identifier	FILEXML :: createInstanceXML		3081270	0					
ANR	3084144	ArgumentList			3081270	1					
ANR	3084145	ExpressionStatement	"dc_main_init ( argc , argv )"	2363:1:64946:64972	3081270	125	True				
ANR	3084146	CallExpression	"dc_main_init ( argc , argv )"		3081270	0					
ANR	3084147	Callee	dc_main_init		3081270	0					
ANR	3084148	Identifier	dc_main_init		3081270	0					
ANR	3084149	ArgumentList	argc		3081270	1					
ANR	3084150	Argument	argc		3081270	0					
ANR	3084151	Identifier	argc		3081270	0					
ANR	3084152	Argument	argv		3081270	1					
ANR	3084153	Identifier	argv		3081270	0					
ANR	3084154	ExpressionStatement	daemonCore -> Driver ( )	2366:1:65051:65071	3081270	126	True				
ANR	3084155	CallExpression	daemonCore -> Driver ( )		3081270	0					
ANR	3084156	Callee	daemonCore -> Driver		3081270	0					
ANR	3084157	PtrMemberAccess	daemonCore -> Driver		3081270	0					
ANR	3084158	Identifier	daemonCore		3081270	0					
ANR	3084159	Identifier	Driver		3081270	1					
ANR	3084160	ArgumentList			3081270	1					
ANR	3084161	ExpressionStatement	"EXCEPT ( ""returned from Driver()"" )"	2369:1:65101:65133	3081270	127	True				
ANR	3084162	CallExpression	"EXCEPT ( ""returned from Driver()"" )"		3081270	0					
ANR	3084163	Callee	EXCEPT		3081270	0					
ANR	3084164	Identifier	EXCEPT		3081270	0					
ANR	3084165	ArgumentList	"""returned from Driver()"""		3081270	1					
ANR	3084166	Argument	"""returned from Driver()"""		3081270	0					
ANR	3084167	PrimaryExpression	"""returned from Driver()"""		3081270	0					
ANR	3084168	ReturnStatement	return FALSE ;	2370:1:65136:65148	3081270	128	True				
ANR	3084169	Identifier	FALSE		3081270	0					
ANR	3084170	ReturnType	int		3081270	1					
ANR	3084171	Identifier	dc_main		3081270	2					
ANR	3084172	ParameterList	"int argc , char * * argv"		3081270	3					
ANR	3084173	Parameter	int argc	1534:13:38047:38054	3081270	0	True				
ANR	3084174	ParameterType	int		3081270	0					
ANR	3084175	Identifier	argc		3081270	1					
ANR	3084176	Parameter	char * * argv	1534:23:38057:38067	3081270	1	True				
ANR	3084177	ParameterType	char * *		3081270	0					
ANR	3084178	Identifier	argv		3081270	1					
ANR	3084179	CFGEntryNode	ENTRY		3081270		True				
ANR	3084180	CFGExitNode	EXIT		3081270		True				
ANR	3084181	Symbol	check_session_cache		3081270						
ANR	3084182	Symbol	unix_sigusr1		3081270						
ANR	3084183	Symbol	DC_SERVICEWAITPIDS		3081270						
ANR	3084184	Symbol	CONFIG_VAL		3081270						
ANR	3084185	Symbol	ptmp1		3081270						
ANR	3084186	Symbol	unix_sigusr2		3081270						
ANR	3084187	Symbol	dc_main_init		3081270						
ANR	3084188	Symbol	get_mySubSystem ( ) -> getLocalName		3081270						
ANR	3084189	Symbol	FILEObj		3081270						
ANR	3084190	Symbol	DC_OFF_PEACEFUL		3081270						
ANR	3084191	Symbol	logAppend		3081270						
ANR	3084192	Symbol	dc_touch_lock_files		3081270						
ANR	3084193	Symbol	is_kbdd		3081270						
ANR	3084194	Symbol	SIGTRAP		3081270						
ANR	3084195	Symbol	DC_TIME_OFFSET		3081270						
ANR	3084196	Symbol	handle_config_val		3081270						
ANR	3084197	Symbol	* daemonCore -> async_pipe		3081270						
ANR	3084198	Symbol	SIGUSR2		3081270						
ANR	3084199	Symbol	SIGUSR1		3081270						
ANR	3084200	Symbol	handle_cookie_refresh		3081270						
ANR	3084201	Symbol	tm -> tm_mon		3081270						
ANR	3084202	Symbol	myDistro -> GetUc		3081270						
ANR	3084203	Symbol	pidFile		3081270						
ANR	3084204	Symbol	gcb_recovery_failed_callback		3081270						
ANR	3084205	Symbol	* myDistro		3081270						
ANR	3084206	Symbol	* daemonCore		3081270						
ANR	3084207	Symbol	envName		3081270						
ANR	3084208	Symbol	dc_main_config		3081270						
ANR	3084209	Symbol	get_mySubSystem ( ) -> getString		3081270						
ANR	3084210	Symbol	handle_dc_sighup		3081270						
ANR	3084211	Symbol	param_integer		3081270						
ANR	3084212	Symbol	* tm		3081270						
ANR	3084213	Symbol	get_mySubSystem		3081270						
ANR	3084214	Symbol	condor_basename		3081270						
ANR	3084215	Symbol	logDir		3081270						
ANR	3084216	Symbol	* * ptr		3081270						
ANR	3084217	Symbol	getExecPath		3081270						
ANR	3084218	Symbol	handle_nop		3081270						
ANR	3084219	Symbol	fcntl		3081270						
ANR	3084220	Symbol	daemonCore -> getpid		3081270						
ANR	3084221	Symbol	condor_main_argv		3081270						
ANR	3084222	Symbol	debug_wait_param		3081270						
ANR	3084223	Symbol	global_config_source		3081270						
ANR	3084224	Symbol	handle_invalidate_key		3081270						
ANR	3084225	Symbol	daemonCore		3081270						
ANR	3084226	Symbol	daemonCore -> monitor_data		3081270						
ANR	3084227	Symbol	time_offset_receive_cedar_stub		3081270						
ANR	3084228	Symbol	global_config_source . Value		3081270						
ANR	3084229	Symbol	getenv		3081270						
ANR	3084230	Symbol	dc_main_pre_dc_init		3081270						
ANR	3084231	Symbol	get_mySubSystem ( ) -> isType		3081270						
ANR	3084232	Symbol	handle_set_peaceful_shutdown		3081270						
ANR	3084233	Symbol	& DaemonCore :: HandleDC_SIGCHLD		3081270						
ANR	3084234	Symbol	i		3081270						
ANR	3084235	Symbol	command_port		3081270						
ANR	3084236	Symbol	ADMINISTRATOR		3081270						
ANR	3084237	Symbol	unix_sighup		3081270						
ANR	3084238	Symbol	ENV_CONFIG		3081270						
ANR	3084239	Symbol	Foreground		3081270						
ANR	3084240	Symbol	tm		3081270						
ANR	3084241	Symbol	handle_fetch_log		3081270						
ANR	3084242	Symbol	condor_main_argc		3081270						
ANR	3084243	Symbol	handle_reconfig		3081270						
ANR	3084244	Symbol	localtime		3081270						
ANR	3084245	Symbol	_condor_myServiceName		3081270						
ANR	3084246	Symbol	check_parent		3081270						
ANR	3084247	Symbol	DC_FETCH_LOG		3081270						
ANR	3084248	Symbol	* argv		3081270						
ANR	3084249	Symbol	source		3081270						
ANR	3084250	Symbol	F_SETFL		3081270						
ANR	3084251	Symbol	get_mySubSystem ( ) -> getType		3081270						
ANR	3084252	Symbol	strlen		3081270						
ANR	3084253	Symbol	DC_OFF_FAST		3081270						
ANR	3084254	Symbol	ptmp		3081270						
ANR	3084255	Symbol	dc_main_shutdown_fast		3081270						
ANR	3084256	Symbol	myDistro		3081270						
ANR	3084257	Symbol	myName		3081270						
ANR	3084258	Symbol	* * argv		3081270						
ANR	3084259	Symbol	SIGPIPE		3081270						
ANR	3084260	Symbol	unix_sigchld		3081270						
ANR	3084261	Symbol	ALLOW		3081270						
ANR	3084262	Symbol	doCoreInit		3081270						
ANR	3084263	Symbol	D_PRIV		3081270						
ANR	3084264	Symbol	get_param_functions		3081270						
ANR	3084265	Symbol	param_boolean		3081270						
ANR	3084266	Symbol	DC_RECONFIG		3081270						
ANR	3084267	Symbol	& fullset		3081270						
ANR	3084268	Symbol	stderr		3081270						
ANR	3084269	Symbol	strerror		3081270						
ANR	3084270	Symbol	FILESQL :: createInstance		3081270						
ANR	3084271	Symbol	getuid		3081270						
ANR	3084272	Symbol	unix_sigterm		3081270						
ANR	3084273	Symbol	* * daemonCore		3081270						
ANR	3084274	Symbol	debug_wait_param . Value		3081270						
ANR	3084275	Symbol	dprintf_last_modification		3081270						
ANR	3084276	Symbol	DC_OFF_GRACEFUL		3081270						
ANR	3084277	Symbol	DC_CONFIG_PERSIST		3081270						
ANR	3084278	Symbol	get_mySubSystem ( ) -> getTypeName		3081270						
ANR	3084279	Symbol	handle_dc_sigquit		3081270						
ANR	3084280	Symbol	argv		3081270						
ANR	3084281	Symbol	EnvGetName		3081270						
ANR	3084282	Symbol	ENV_PARENT_ID		3081270						
ANR	3084283	Symbol	handle_config		3081270						
ANR	3084284	Symbol	argc		3081270						
ANR	3084285	Symbol	daemonCore -> sec_man -> my_unique_id		3081270						
ANR	3084286	Symbol	false		3081270						
ANR	3084287	Symbol	D_ALWAYS		3081270						
ANR	3084288	Symbol	handle_dc_sigterm		3081270						
ANR	3084289	Symbol	env		3081270						
ANR	3084290	Symbol	ptr		3081270						
ANR	3084291	Symbol	* condor_main_argv		3081270						
ANR	3084292	Symbol	SIGILL		3081270						
ANR	3084293	Symbol	daemon_stop_time		3081270						
ANR	3084294	Symbol	fullset		3081270						
ANR	3084295	Symbol	FALSE		3081270						
ANR	3084296	Symbol	strdup		3081270						
ANR	3084297	Symbol	time		3081270						
ANR	3084298	Symbol	SUBSYSTEM_TYPE_SHADOW		3081270						
ANR	3084299	Symbol	DC_NOP		3081270						
ANR	3084300	Symbol	dc_touch_log_file		3081270						
ANR	3084301	Symbol	XMLObj		3081270						
ANR	3084302	Symbol	SUBSYSTEM_TYPE_COLLECTOR		3081270						
ANR	3084303	Symbol	doAuthInit		3081270						
ANR	3084304	Symbol	env_name		3081270						
ANR	3084305	Symbol	CondorVersion		3081270						
ANR	3084306	Symbol	wantsKill		3081270						
ANR	3084307	Symbol	EnvInit		3081270						
ANR	3084308	Symbol	SUBSYSTEM_TYPE_NEGOTIATOR		3081270						
ANR	3084309	Symbol	local_config_sources . isEmpty		3081270						
ANR	3084310	Symbol	local_config_sources . next		3081270						
ANR	3084311	Symbol	SIG_IGN		3081270						
ANR	3084312	Symbol	SUBSYSTEM_TYPE_MASTER		3081270						
ANR	3084313	Symbol	TimerHandler_dc_sigterm		3081270						
ANR	3084314	Symbol	DAEMON		3081270						
ANR	3084315	Symbol	myDistro -> GetLen		3081270						
ANR	3084316	Symbol	O_NONBLOCK		3081270						
ANR	3084317	Symbol	daemon_sock_name		3081270						
ANR	3084318	Symbol	myFullName		3081270						
ANR	3084319	Symbol	WRITE		3081270						
ANR	3084320	Symbol	CondorPlatform		3081270						
ANR	3084321	Symbol	tm -> tm_mday		3081270						
ANR	3084322	Symbol	SIGHUP		3081270						
ANR	3084323	Symbol	unix_sigquit		3081270						
ANR	3084324	Symbol	atoi		3081270						
ANR	3084325	Symbol	malloc		3081270						
ANR	3084326	Symbol	Termlog		3081270						
ANR	3084327	Symbol	SIG_SETMASK		3081270						
ANR	3084328	Symbol	SIGABRT		3081270						
ANR	3084329	Symbol	handle_off_graceful		3081270						
ANR	3084330	Symbol	runfor		3081270						
ANR	3084331	Symbol	tm -> tm_sec		3081270						
ANR	3084332	Symbol	tm -> tm_min		3081270						
ANR	3084333	Symbol	tm -> tm_hour		3081270						
ANR	3084334	Symbol	DC_INVALIDATE_KEY		3081270						
ANR	3084335	Symbol	dc_main_pre_command_sock_init		3081270						
ANR	3084336	Symbol	SUBSYSTEM_TYPE_STARTD		3081270						
ANR	3084337	Symbol	cookie_refresh		3081270						
ANR	3084338	Symbol	* ptr		3081270						
ANR	3084339	Symbol	dcargs		3081270						
ANR	3084340	Symbol	pipe		3081270						
ANR	3084341	Symbol	daemonCore -> sec_man		3081270						
ANR	3084342	Symbol	wantsQuiet		3081270						
ANR	3084343	Symbol	strcmp		3081270						
ANR	3084344	Symbol	FILEXML :: createInstanceXML		3081270						
ANR	3084345	Symbol	& DaemonCore :: HandleDC_SERVICEWAITPIDS		3081270						
ANR	3084346	Symbol	handle_off_peaceful		3081270						
ANR	3084347	Symbol	SIGFPE		3081270						
ANR	3084348	Symbol	NULL		3081270						
ANR	3084349	Symbol	TRUE		3081270						
ANR	3084350	Symbol	done		3081270						
ANR	3084351	Symbol	local_config_sources		3081270						
ANR	3084352	Symbol	debug_wait		3081270						
ANR	3084353	Symbol	READ		3081270						
ANR	3084354	Symbol	DynamicDirs		3081270						
ANR	3084355	Symbol	SIGSEGV		3081270						
ANR	3084356	Symbol	parent_id		3081270						
ANR	3084357	Symbol	true		3081270						
ANR	3084358	Symbol	get_mySubSystem ( ) -> getClassName		3081270						
ANR	3084359	Symbol	* daemonCore -> sec_man		3081270						
ANR	3084360	Symbol	SIGQUIT		3081270						
ANR	3084361	Symbol	SIGBUS		3081270						
ANR	3084362	Symbol	DC_SET_PEACEFUL_SHUTDOWN		3081270						
ANR	3084363	Symbol	get_mySubSystem ( ) -> isValid		3081270						
ANR	3084364	Symbol	SUBSYSTEM_TYPE_SCHEDD		3081270						
ANR	3084365	Symbol	parent_id . Value		3081270						
ANR	3084366	Symbol	SIGTERM		3081270						
ANR	3084367	Symbol	dc_main_shutdown_graceful		3081270						
ANR	3084368	Symbol	DC_PURGE_LOG		3081270						
ANR	3084369	Symbol	get_mySubSystem ( ) -> getName		3081270						
ANR	3084370	Symbol	* get_mySubSystem		3081270						
ANR	3084371	Symbol	use_sql_log		3081270						
ANR	3084372	Symbol	handle_off_fast		3081270						
ANR	3084373	Symbol	DC_CONFIG_RUNTIME		3081270						
ANR	3084374	Symbol	handle_fetch_log_history_purge		3081270						
ANR	3084375	Symbol	SIGCHLD		3081270						
ANR	3084376	Symbol	daemonCore -> async_pipe		3081270						
ANR	3084377	Symbol	* i		3081270						
ANR	3084378	Symbol	& log_last_mod_time		3081270						
ANR	3084379	Symbol	DC_CONFIG_VAL		3081270						
ANR	3084380	Symbol	DC_RECONFIG_FULL		3081270						
ANR	3084381	Symbol	log_last_mod_time		3081270						
ANR	3084382	Function	dc_args_is_background	2377:0:65402:67205							
ANR	3084383	FunctionDef	"dc_args_is_background (int argc , char * * argv)"		3084382	0					
ANR	3084384	CompoundStatement		2378:0:65452:67205	3084382	0					
ANR	3084385	IdentifierDeclStatement	bool Foreground = false ;	2379:4:65458:65481	3084382	0	True				
ANR	3084386	IdentifierDecl	Foreground = false		3084382	0					
ANR	3084387	IdentifierDeclType	bool		3084382	0					
ANR	3084388	Identifier	Foreground		3084382	1					
ANR	3084389	AssignmentExpression	Foreground = false		3084382	2		=			
ANR	3084390	Identifier	false		3084382	0					
ANR	3084391	Identifier	false		3084382	1					
ANR	3084392	IdentifierDeclStatement	int i = 0 ;	2383:1:65642:65651	3084382	1	True				
ANR	3084393	IdentifierDecl	i = 0		3084382	0					
ANR	3084394	IdentifierDeclType	int		3084382	0					
ANR	3084395	Identifier	i		3084382	1					
ANR	3084396	AssignmentExpression	i = 0		3084382	2		=			
ANR	3084397	Identifier	i		3084382	0					
ANR	3084398	PrimaryExpression	0		3084382	1					
ANR	3084399	IdentifierDeclStatement	bool done = false ;	2384:1:65654:65671	3084382	2	True				
ANR	3084400	IdentifierDecl	done = false		3084382	0					
ANR	3084401	IdentifierDeclType	bool		3084382	0					
ANR	3084402	Identifier	done		3084382	1					
ANR	3084403	AssignmentExpression	done = false		3084382	2		=			
ANR	3084404	Identifier	false		3084382	0					
ANR	3084405	Identifier	false		3084382	1					
ANR	3084406	ForStatement	"for ( char * * ptr = argv + 1 ; * ptr && ( i < argc - 1 ) ; ptr ++ , i ++ )"		3084382	3					
ANR	3084407	ForInit	char * * ptr = argv + 1 ;	2385:5:65678:65700	3084382	0	True				
ANR	3084408	IdentifierDeclStatement	char * * ptr = argv + 1 ;		3084382	0					
ANR	3084409	IdentifierDecl	* * ptr = argv + 1		3084382	0					
ANR	3084410	IdentifierDeclType	char * *		3084382	0					
ANR	3084411	Identifier	ptr		3084382	1					
ANR	3084412	AssignmentExpression	* * ptr = argv + 1		3084382	2		=			
ANR	3084413	Identifier	ptr		3084382	0					
ANR	3084414	AdditiveExpression	argv + 1		3084382	1		+			
ANR	3084415	Identifier	argv		3084382	0					
ANR	3084416	PrimaryExpression	1		3084382	1					
ANR	3084417	Condition	* ptr && ( i < argc - 1 )	2385:29:65702:65723	3084382	1	True				
ANR	3084418	AndExpression	* ptr && ( i < argc - 1 )		3084382	0		&&			
ANR	3084419	UnaryOperationExpression	* ptr		3084382	0					
ANR	3084420	UnaryOperator	*		3084382	0					
ANR	3084421	Identifier	ptr		3084382	1					
ANR	3084422	RelationalExpression	i < argc - 1		3084382	1		<			
ANR	3084423	Identifier	i		3084382	0					
ANR	3084424	AdditiveExpression	argc - 1		3084382	1		-			
ANR	3084425	Identifier	argc		3084382	0					
ANR	3084426	PrimaryExpression	1		3084382	1					
ANR	3084427	Expression	"ptr ++ , i ++"	2385:53:65726:65734	3084382	2	True				
ANR	3084428	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084429	Identifier	ptr		3084382	0					
ANR	3084430	IncDec	++		3084382	1					
ANR	3084431	PostIncDecOperationExpression	i ++		3084382	1					
ANR	3084432	Identifier	i		3084382	0					
ANR	3084433	IncDec	++		3084382	1					
ANR	3084434	CompoundStatement		9:1:285:285	3084382	3					
ANR	3084435	IfStatement	if ( ptr [ 0 ] [ 0 ] != '-' )		3084382	0					
ANR	3084436	Condition	ptr [ 0 ] [ 0 ] != '-'	2387:6:65746:65761	3084382	0	True				
ANR	3084437	EqualityExpression	ptr [ 0 ] [ 0 ] != '-'		3084382	0		!=			
ANR	3084438	ArrayIndexing	ptr [ 0 ] [ 0 ]		3084382	0					
ANR	3084439	ArrayIndexing	ptr [ 0 ]		3084382	0					
ANR	3084440	Identifier	ptr		3084382	0					
ANR	3084441	PrimaryExpression	0		3084382	1					
ANR	3084442	PrimaryExpression	0		3084382	1					
ANR	3084443	PrimaryExpression	'-'		3084382	1					
ANR	3084444	CompoundStatement		10:25:312:312	3084382	1					
ANR	3084445	BreakStatement	break ;	2388:3:65770:65775	3084382	0	True				
ANR	3084446	SwitchStatement	switch ( ptr [ 0 ] [ 1 ] )		3084382	1					
ANR	3084447	Condition	ptr [ 0 ] [ 1 ]	2390:10:65791:65799	3084382	0	True				
ANR	3084448	ArrayIndexing	ptr [ 0 ] [ 1 ]		3084382	0					
ANR	3084449	ArrayIndexing	ptr [ 0 ]		3084382	0					
ANR	3084450	Identifier	ptr		3084382	0					
ANR	3084451	PrimaryExpression	0		3084382	1					
ANR	3084452	PrimaryExpression	1		3084382	1					
ANR	3084453	CompoundStatement		13:22:350:350	3084382	1					
ANR	3084454	Label	case 'a' :	2391:2:65807:65815	3084382	0	True				
ANR	3084455	ExpressionStatement	ptr ++	2392:3:65853:65858	3084382	1	True				
ANR	3084456	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084457	Identifier	ptr		3084382	0					
ANR	3084458	IncDec	++		3084382	1					
ANR	3084459	BreakStatement	break ;	2393:3:65863:65868	3084382	2	True				
ANR	3084460	Label	case 'b' :	2394:2:65872:65880	3084382	3	True				
ANR	3084461	ExpressionStatement	Foreground = false	2395:3:65917:65935	3084382	4	True				
ANR	3084462	AssignmentExpression	Foreground = false		3084382	0		=			
ANR	3084463	Identifier	Foreground		3084382	0					
ANR	3084464	Identifier	false		3084382	1					
ANR	3084465	BreakStatement	break ;	2396:3:65940:65945	3084382	5	True				
ANR	3084466	Label	case 'c' :	2397:2:65949:65957	3084382	6	True				
ANR	3084467	ExpressionStatement	ptr ++	2398:3:66008:66013	3084382	7	True				
ANR	3084468	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084469	Identifier	ptr		3084382	0					
ANR	3084470	IncDec	++		3084382	1					
ANR	3084471	BreakStatement	break ;	2399:3:66018:66023	3084382	8	True				
ANR	3084472	Label	case 'd' :	2400:2:66027:66035	3084382	9	True				
ANR	3084473	BreakStatement	break ;	2401:3:66070:66075	3084382	10	True				
ANR	3084474	Label	case 't' :	2402:2:66079:66087	3084382	11	True				
ANR	3084475	Label	case 'f' :	2403:2:66132:66140	3084382	12	True				
ANR	3084476	ExpressionStatement	Foreground = true	2404:3:66167:66184	3084382	13	True				
ANR	3084477	AssignmentExpression	Foreground = true		3084382	0		=			
ANR	3084478	Identifier	Foreground		3084382	0					
ANR	3084479	Identifier	true		3084382	1					
ANR	3084480	BreakStatement	break ;	2405:3:66189:66194	3084382	14	True				
ANR	3084481	Label	case 'h' :	2406:2:66198:66206	3084382	15	True				
ANR	3084482	IfStatement	if ( ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't' )		3084382	16					
ANR	3084483	Condition	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'	2407:8:66226:66254	3084382	0	True				
ANR	3084484	AndExpression	ptr [ 0 ] [ 2 ] && ptr [ 0 ] [ 2 ] == 't'		3084382	0		&&			
ANR	3084485	ArrayIndexing	ptr [ 0 ] [ 2 ]		3084382	0					
ANR	3084486	ArrayIndexing	ptr [ 0 ]		3084382	0					
ANR	3084487	Identifier	ptr		3084382	0					
ANR	3084488	PrimaryExpression	0		3084382	1					
ANR	3084489	PrimaryExpression	2		3084382	1					
ANR	3084490	EqualityExpression	ptr [ 0 ] [ 2 ] == 't'		3084382	1		==			
ANR	3084491	ArrayIndexing	ptr [ 0 ] [ 2 ]		3084382	0					
ANR	3084492	ArrayIndexing	ptr [ 0 ]		3084382	0					
ANR	3084493	Identifier	ptr		3084382	0					
ANR	3084494	PrimaryExpression	0		3084382	1					
ANR	3084495	PrimaryExpression	2		3084382	1					
ANR	3084496	PrimaryExpression	't'		3084382	1					
ANR	3084497	CompoundStatement		30:40:805:805	3084382	1					
ANR	3084498	ExpressionStatement	ptr ++	2409:4:66293:66298	3084382	0	True				
ANR	3084499	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084500	Identifier	ptr		3084382	0					
ANR	3084501	IncDec	++		3084382	1					
ANR	3084502	ElseStatement	else		3084382	0					
ANR	3084503	CompoundStatement		33:10:857:857	3084382	0					
ANR	3084504	ExpressionStatement	done = true	2411:4:66316:66327	3084382	0	True				
ANR	3084505	AssignmentExpression	done = true		3084382	0		=			
ANR	3084506	Identifier	done		3084382	0					
ANR	3084507	Identifier	true		3084382	1					
ANR	3084508	BreakStatement	break ;	2413:12:66346:66351	3084382	17	True				
ANR	3084509	Label	case 'k' :	2415:2:66369:66377	3084382	18	True				
ANR	3084510	ExpressionStatement	ptr ++	2416:3:66421:66426	3084382	19	True				
ANR	3084511	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084512	Identifier	ptr		3084382	0					
ANR	3084513	IncDec	++		3084382	1					
ANR	3084514	BreakStatement	break ;	2417:3:66431:66436	3084382	20	True				
ANR	3084515	Label	case 'l' :	2419:2:66447:66455	3084382	21	True				
ANR	3084516	ExpressionStatement	ptr ++	2420:4:66487:66492	3084382	22	True				
ANR	3084517	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084518	Identifier	ptr		3084382	0					
ANR	3084519	IncDec	++		3084382	1					
ANR	3084520	BreakStatement	break ;	2421:4:66498:66503	3084382	23	True				
ANR	3084521	Label	case 'p' :	2422:2:66507:66515	3084382	24	True				
ANR	3084522	ExpressionStatement	ptr ++	2423:3:66564:66569	3084382	25	True				
ANR	3084523	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084524	Identifier	ptr		3084382	0					
ANR	3084525	IncDec	++		3084382	1					
ANR	3084526	BreakStatement	break ;	2424:3:66620:66625	3084382	26	True				
ANR	3084527	Label	case 'q' :	2425:2:66677:66685	3084382	27	True				
ANR	3084528	BreakStatement	break ;	2426:3:66707:66712	3084382	28	True				
ANR	3084529	Label	case 'r' :	2427:2:66716:66724	3084382	29	True				
ANR	3084530	ExpressionStatement	ptr ++	2428:3:66777:66782	3084382	30	True				
ANR	3084531	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084532	Identifier	ptr		3084382	0					
ANR	3084533	IncDec	++		3084382	1					
ANR	3084534	BreakStatement	break ;	2429:3:66787:66792	3084382	31	True				
ANR	3084535	Label	case 's' :	2430:2:66796:66804	3084382	32	True				
ANR	3084536	IfStatement	"if ( 0 == strcmp ( ""-sock"" , * ptr ) )"		3084382	33					
ANR	3084537	Condition	"0 == strcmp ( ""-sock"" , * ptr )"	2432:6:66917:66941	3084382	0	True				
ANR	3084538	EqualityExpression	"0 == strcmp ( ""-sock"" , * ptr )"		3084382	0		==			
ANR	3084539	PrimaryExpression	0		3084382	0					
ANR	3084540	CallExpression	"strcmp ( ""-sock"" , * ptr )"		3084382	1					
ANR	3084541	Callee	strcmp		3084382	0					
ANR	3084542	Identifier	strcmp		3084382	0					
ANR	3084543	ArgumentList	"""-sock"""		3084382	1					
ANR	3084544	Argument	"""-sock"""		3084382	0					
ANR	3084545	PrimaryExpression	"""-sock"""		3084382	0					
ANR	3084546	Argument	* ptr		3084382	1					
ANR	3084547	UnaryOperationExpression	* ptr		3084382	0					
ANR	3084548	UnaryOperator	*		3084382	0					
ANR	3084549	Identifier	ptr		3084382	1					
ANR	3084550	CompoundStatement		55:33:1491:1491	3084382	1					
ANR	3084551	ExpressionStatement	ptr ++	2433:4:66950:66955	3084382	0	True				
ANR	3084552	PostIncDecOperationExpression	ptr ++		3084382	0					
ANR	3084553	Identifier	ptr		3084382	0					
ANR	3084554	IncDec	++		3084382	1					
ANR	3084555	ElseStatement	else		3084382	0					
ANR	3084556	CompoundStatement		57:10:1514:1514	3084382	0					
ANR	3084557	ExpressionStatement	done = true	2435:4:66973:66984	3084382	0	True				
ANR	3084558	AssignmentExpression	done = true		3084382	0		=			
ANR	3084559	Identifier	done		3084382	0					
ANR	3084560	Identifier	true		3084382	1					
ANR	3084561	BreakStatement	break ;	2437:3:66994:66999	3084382	34	True				
ANR	3084562	Label	case 'v' :	2438:2:67003:67011	3084382	35	True				
ANR	3084563	ExpressionStatement	Foreground = true	2439:3:67050:67067	3084382	36	True				
ANR	3084564	AssignmentExpression	Foreground = true		3084382	0		=			
ANR	3084565	Identifier	Foreground		3084382	0					
ANR	3084566	Identifier	true		3084382	1					
ANR	3084567	BreakStatement	break ;	2440:3:67072:67077	3084382	37	True				
ANR	3084568	Label	default :	2441:2:67081:67088	3084382	38	True				
ANR	3084569	Identifier	default		3084382	0					
ANR	3084570	ExpressionStatement	done = true	2442:3:67093:67104	3084382	39	True				
ANR	3084571	AssignmentExpression	done = true		3084382	0		=			
ANR	3084572	Identifier	done		3084382	0					
ANR	3084573	Identifier	true		3084382	1					
ANR	3084574	BreakStatement	break ;	2443:3:67109:67114	3084382	40	True				
ANR	3084575	IfStatement	if ( done )		3084382	2					
ANR	3084576	Condition	done	2445:6:67127:67130	3084382	0	True				
ANR	3084577	Identifier	done		3084382	0					
ANR	3084578	CompoundStatement		68:13:1681:1681	3084382	1					
ANR	3084579	BreakStatement	break ;	2446:3:67139:67144	3084382	0	True				
ANR	3084580	ReturnStatement	return ! Foreground ;	2450:4:67184:67203	3084382	4	True				
ANR	3084581	UnaryOperationExpression	! Foreground		3084382	0					
ANR	3084582	UnaryOperator	!		3084382	0					
ANR	3084583	Identifier	Foreground		3084382	1					
ANR	3084584	ReturnType	bool		3084382	1					
ANR	3084585	Identifier	dc_args_is_background		3084382	2					
ANR	3084586	ParameterList	"int argc , char * * argv"		3084382	3					
ANR	3084587	Parameter	int argc	2377:27:65429:65436	3084382	0	True				
ANR	3084588	ParameterType	int		3084382	0					
ANR	3084589	Identifier	argc		3084382	1					
ANR	3084590	Parameter	char * * argv	2377:37:65439:65449	3084382	1	True				
ANR	3084591	ParameterType	char * *		3084382	0					
ANR	3084592	Identifier	argv		3084382	1					
ANR	3084593	CFGEntryNode	ENTRY		3084382		True				
ANR	3084594	CFGExitNode	EXIT		3084382		True				
ANR	3084595	Symbol	argc		3084382						
ANR	3084596	Symbol	strcmp		3084382						
ANR	3084597	Symbol	* * ptr		3084382						
ANR	3084598	Symbol	false		3084382						
ANR	3084599	Symbol	* ptr		3084382						
ANR	3084600	Symbol	true		3084382						
ANR	3084601	Symbol	Foreground		3084382						
ANR	3084602	Symbol	i		3084382						
ANR	3084603	Symbol	argv		3084382						
ANR	3084604	Symbol	done		3084382						
ANR	3084605	Symbol	ptr		3084382						
