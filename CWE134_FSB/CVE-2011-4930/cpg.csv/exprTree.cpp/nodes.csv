command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1309017	File	data/converged/CVE-2011-4930_htcondor/exprTree.cpp								
ANR	1309018	DeclStmt									
ANR	1309019	Decl							const int	const int	MAX_CLASSAD_RECURSION
ANR	1309020	DeclStmt									
ANR	1309021	Decl							void ( * ) ( const char * )	void ( * ) ( const char * )	ExprTree :: user_debug_function
ANR	1309022	Function	ExprTree :: set_user_debug_function	35:13:1111:1209							
ANR	1309023	FunctionDef	ExprTree :: set_user_debug_function (void ( * dbf ) ( const char * ))		1309022	0					
ANR	1309024	CompoundStatement		36:62:1179:1209	1309022	0					
ANR	1309025	ExpressionStatement	user_debug_function = dbf	37:1:1182:1207	1309022	0	True				
ANR	1309026	AssignmentExpression	user_debug_function = dbf		1309022	0		=			
ANR	1309027	Identifier	user_debug_function		1309022	0					
ANR	1309028	Identifier	dbf		1309022	1					
ANR	1309029	ReturnType	void		1309022	1					
ANR	1309030	Identifier	ExprTree :: set_user_debug_function		1309022	2					
ANR	1309031	ParameterList	void ( * dbf ) ( const char * )		1309022	3					
ANR	1309032	Parameter	void ( * dbf ) ( const char * )	36:35:1152:1176	1309022	0	True				
ANR	1309033	ParameterType	(( const char * ) void) *		1309022	0					
ANR	1309034	Identifier	dbf		1309022	1					
ANR	1309035	CFGEntryNode	ENTRY		1309022		True				
ANR	1309036	CFGExitNode	EXIT		1309022		True				
ANR	1309037	Symbol	user_debug_function		1309022						
ANR	1309038	Symbol	dbf		1309022						
ANR	1309039	Function	ExprTree :: debug_print	40:0:1212:1336							
ANR	1309040	FunctionDef	ExprTree :: debug_print (const char * message)		1309039	0					
ANR	1309041	CompoundStatement		40:54:1266:1336	1309039	0					
ANR	1309042	IfStatement	if ( user_debug_function != 0 )		1309039	0					
ANR	1309043	Condition	user_debug_function != 0	41:5:1273:1296	1309039	0	True				
ANR	1309044	EqualityExpression	user_debug_function != 0		1309039	0		!=			
ANR	1309045	Identifier	user_debug_function		1309039	0					
ANR	1309046	PrimaryExpression	0		1309039	1					
ANR	1309047	CompoundStatement		2:31:32:32	1309039	1					
ANR	1309048	ExpressionStatement	user_debug_function ( message )	42:2:1303:1331	1309039	0	True				
ANR	1309049	CallExpression	user_debug_function ( message )		1309039	0					
ANR	1309050	Callee	user_debug_function		1309039	0					
ANR	1309051	Identifier	user_debug_function		1309039	0					
ANR	1309052	ArgumentList	message		1309039	1					
ANR	1309053	Argument	message		1309039	0					
ANR	1309054	Identifier	message		1309039	0					
ANR	1309055	ReturnType	void		1309039	1					
ANR	1309056	Identifier	ExprTree :: debug_print		1309039	2					
ANR	1309057	ParameterList	const char * message		1309039	3					
ANR	1309058	Parameter	const char * message	40:27:1239:1257	1309039	0	True				
ANR	1309059	ParameterType	const char *		1309039	0					
ANR	1309060	Identifier	message		1309039	1					
ANR	1309061	CFGEntryNode	ENTRY		1309039		True				
ANR	1309062	CFGExitNode	EXIT		1309039		True				
ANR	1309063	Symbol	user_debug_function		1309039						
ANR	1309064	Symbol	message		1309039						
ANR	1309065	Function	ExprTree :: debug_format_value	46:0:1339:2839							
ANR	1309066	FunctionDef	ExprTree :: debug_format_value (Value & value)		1309065	0					
ANR	1309067	CompoundStatement		46:54:1393:2839	1309065	0					
ANR	1309068	IdentifierDeclStatement	bool boolValue = false ;	47:2:1397:1419	1309065	0	True				
ANR	1309069	IdentifierDecl	boolValue = false		1309065	0					
ANR	1309070	IdentifierDeclType	bool		1309065	0					
ANR	1309071	Identifier	boolValue		1309065	1					
ANR	1309072	AssignmentExpression	boolValue = false		1309065	2		=			
ANR	1309073	Identifier	false		1309065	0					
ANR	1309074	Identifier	false		1309065	1					
ANR	1309075	IdentifierDeclStatement	int intValue = 0 ;	48:2:1423:1439	1309065	1	True				
ANR	1309076	IdentifierDecl	intValue = 0		1309065	0					
ANR	1309077	IdentifierDeclType	int		1309065	0					
ANR	1309078	Identifier	intValue		1309065	1					
ANR	1309079	AssignmentExpression	intValue = 0		1309065	2		=			
ANR	1309080	Identifier	intValue		1309065	0					
ANR	1309081	PrimaryExpression	0		1309065	1					
ANR	1309082	IdentifierDeclStatement	double doubleValue = 0 ;	49:2:1443:1465	1309065	2	True				
ANR	1309083	IdentifierDecl	doubleValue = 0		1309065	0					
ANR	1309084	IdentifierDeclType	double		1309065	0					
ANR	1309085	Identifier	doubleValue		1309065	1					
ANR	1309086	AssignmentExpression	doubleValue = 0		1309065	2		=			
ANR	1309087	Identifier	doubleValue		1309065	0					
ANR	1309088	PrimaryExpression	0		1309065	1					
ANR	1309089	IdentifierDeclStatement	"string stringValue = """" ;"	50:2:1469:1492	1309065	3	True				
ANR	1309090	IdentifierDecl	"stringValue = """""		1309065	0					
ANR	1309091	IdentifierDeclType	string		1309065	0					
ANR	1309092	Identifier	stringValue		1309065	1					
ANR	1309093	AssignmentExpression	"stringValue = """""		1309065	2		=			
ANR	1309094	Identifier	stringValue		1309065	0					
ANR	1309095	PrimaryExpression	""""""		1309065	1					
ANR	1309096	IdentifierDeclStatement	PrettyPrint unp ;	52:2:1497:1512	1309065	4	True				
ANR	1309097	IdentifierDecl	unp		1309065	0					
ANR	1309098	IdentifierDeclType	PrettyPrint		1309065	0					
ANR	1309099	Identifier	unp		1309065	1					
ANR	1309100	IdentifierDeclStatement	string buffer ;	53:2:1516:1530	1309065	5	True				
ANR	1309101	IdentifierDecl	buffer		1309065	0					
ANR	1309102	IdentifierDeclType	string		1309065	0					
ANR	1309103	Identifier	buffer		1309065	1					
ANR	1309104	ExpressionStatement	"unp . Unparse ( buffer , this )"	54:2:1534:1561	1309065	6	True				
ANR	1309105	CallExpression	"unp . Unparse ( buffer , this )"		1309065	0					
ANR	1309106	Callee	unp . Unparse		1309065	0					
ANR	1309107	MemberAccess	unp . Unparse		1309065	0					
ANR	1309108	Identifier	unp		1309065	0					
ANR	1309109	Identifier	Unparse		1309065	1					
ANR	1309110	ArgumentList	buffer		1309065	1					
ANR	1309111	Argument	buffer		1309065	0					
ANR	1309112	Identifier	buffer		1309065	0					
ANR	1309113	Argument	this		1309065	1					
ANR	1309114	Identifier	this		1309065	0					
ANR	1309115	IdentifierDeclStatement	"std :: string result ( ""Classad debug: "" ) ;"	56:2:1566:1603	1309065	7	True				
ANR	1309116	IdentifierDecl	"result ( ""Classad debug: "" )"		1309065	0					
ANR	1309117	IdentifierDeclType	std :: string		1309065	0					
ANR	1309118	Identifier	result		1309065	1					
ANR	1309119	PrimaryExpression	"""Classad debug: """		1309065	2					
ANR	1309120	ExpressionStatement	result += buffer	57:2:1607:1623	1309065	8	True				
ANR	1309121	AssignmentExpression	result += buffer		1309065	0		+=			
ANR	1309122	Identifier	result		1309065	0					
ANR	1309123	Identifier	buffer		1309065	1					
ANR	1309124	ExpressionStatement	"result += "" --> """	58:2:1627:1644	1309065	9	True				
ANR	1309125	AssignmentExpression	"result += "" --> """		1309065	0		+=			
ANR	1309126	Identifier	result		1309065	0					
ANR	1309127	PrimaryExpression	""" --> """		1309065	1					
ANR	1309128	SwitchStatement	switch ( value . GetType ( ) )		1309065	10					
ANR	1309129	Condition	value . GetType ( )	60:9:1656:1670	1309065	0	True				
ANR	1309130	CallExpression	value . GetType ( )		1309065	0					
ANR	1309131	Callee	value . GetType		1309065	0					
ANR	1309132	MemberAccess	value . GetType		1309065	0					
ANR	1309133	Identifier	value		1309065	0					
ANR	1309134	Identifier	GetType		1309065	1					
ANR	1309135	ArgumentList			1309065	1					
ANR	1309136	CompoundStatement		15:26:279:279	1309065	1					
ANR	1309137	Label	case Value :: NULL_VALUE :	61:3:1678:1700	1309065	0	True				
ANR	1309138	Identifier	Value :: NULL_VALUE		1309065	0					
ANR	1309139	ExpressionStatement	"result += ""NULL\\n"""	62:4:1706:1724	1309065	1	True				
ANR	1309140	AssignmentExpression	"result += ""NULL\\n"""		1309065	0		+=			
ANR	1309141	Identifier	result		1309065	0					
ANR	1309142	PrimaryExpression	"""NULL\\n"""		1309065	1					
ANR	1309143	BreakStatement	break ;	63:4:1730:1735	1309065	2	True				
ANR	1309144	Label	case Value :: ERROR_VALUE :	64:3:1740:1763	1309065	3	True				
ANR	1309145	Identifier	Value :: ERROR_VALUE		1309065	0					
ANR	1309146	ExpressionStatement	"result += ""ERROR\\n"""	65:4:1769:1788	1309065	4	True				
ANR	1309147	AssignmentExpression	"result += ""ERROR\\n"""		1309065	0		+=			
ANR	1309148	Identifier	result		1309065	0					
ANR	1309149	PrimaryExpression	"""ERROR\\n"""		1309065	1					
ANR	1309150	BreakStatement	break ;	66:4:1794:1799	1309065	5	True				
ANR	1309151	Label	case Value :: UNDEFINED_VALUE :	67:3:1804:1831	1309065	6	True				
ANR	1309152	Identifier	Value :: UNDEFINED_VALUE		1309065	0					
ANR	1309153	ExpressionStatement	"result += ""UNDEFINED\\n"""	68:4:1837:1860	1309065	7	True				
ANR	1309154	AssignmentExpression	"result += ""UNDEFINED\\n"""		1309065	0		+=			
ANR	1309155	Identifier	result		1309065	0					
ANR	1309156	PrimaryExpression	"""UNDEFINED\\n"""		1309065	1					
ANR	1309157	BreakStatement	break ;	69:4:1866:1871	1309065	8	True				
ANR	1309158	Label	case Value :: BOOLEAN_VALUE :	70:3:1876:1901	1309065	9	True				
ANR	1309159	Identifier	Value :: BOOLEAN_VALUE		1309065	0					
ANR	1309160	IfStatement	if ( value . IsBooleanValue ( boolValue ) )		1309065	10					
ANR	1309161	Condition	value . IsBooleanValue ( boolValue )	71:7:1910:1940	1309065	0	True				
ANR	1309162	CallExpression	value . IsBooleanValue ( boolValue )		1309065	0					
ANR	1309163	Callee	value . IsBooleanValue		1309065	0					
ANR	1309164	MemberAccess	value . IsBooleanValue		1309065	0					
ANR	1309165	Identifier	value		1309065	0					
ANR	1309166	Identifier	IsBooleanValue		1309065	1					
ANR	1309167	ArgumentList	boolValue		1309065	1					
ANR	1309168	Argument	boolValue		1309065	0					
ANR	1309169	Identifier	boolValue		1309065	0					
ANR	1309170	ExpressionStatement	"result += boolValue ? ""TRUE\\n"" : ""FALSE\\n"""	72:5:1948:1990	1309065	1	True				
ANR	1309171	AssignmentExpression	"result += boolValue ? ""TRUE\\n"" : ""FALSE\\n"""		1309065	0		+=			
ANR	1309172	Identifier	result		1309065	0					
ANR	1309173	ConditionalExpression	"boolValue ? ""TRUE\\n"" : ""FALSE\\n"""		1309065	1					
ANR	1309174	Condition	boolValue		1309065	0					
ANR	1309175	Identifier	boolValue		1309065	0					
ANR	1309176	PrimaryExpression	"""TRUE\\n"""		1309065	1					
ANR	1309177	PrimaryExpression	"""FALSE\\n"""		1309065	2					
ANR	1309178	BreakStatement	break ;	73:4:1996:2001	1309065	11	True				
ANR	1309179	Label	case Value :: INTEGER_VALUE :	74:3:2006:2031	1309065	12	True				
ANR	1309180	Identifier	Value :: INTEGER_VALUE		1309065	0					
ANR	1309181	IfStatement	if ( value . IsIntegerValue ( intValue ) )		1309065	13					
ANR	1309182	Condition	value . IsIntegerValue ( intValue )	75:7:2040:2069	1309065	0	True				
ANR	1309183	CallExpression	value . IsIntegerValue ( intValue )		1309065	0					
ANR	1309184	Callee	value . IsIntegerValue		1309065	0					
ANR	1309185	MemberAccess	value . IsIntegerValue		1309065	0					
ANR	1309186	Identifier	value		1309065	0					
ANR	1309187	Identifier	IsIntegerValue		1309065	1					
ANR	1309188	ArgumentList	intValue		1309065	1					
ANR	1309189	Argument	intValue		1309065	0					
ANR	1309190	Identifier	intValue		1309065	0					
ANR	1309191	CompoundStatement		31:5:685:697	1309065	1					
ANR	1309192	IdentifierDeclStatement	char buf [ 12 ] ;	76:5:2079:2091	1309065	0	True				
ANR	1309193	IdentifierDecl	buf [ 12 ]		1309065	0					
ANR	1309194	IdentifierDeclType	char [ 12 ]		1309065	0					
ANR	1309195	Identifier	buf		1309065	1					
ANR	1309196	PrimaryExpression	12		1309065	2					
ANR	1309197	ExpressionStatement	"sprintf ( buf , ""%d"" , intValue )"	77:5:2098:2126	1309065	1	True				
ANR	1309198	CallExpression	"sprintf ( buf , ""%d"" , intValue )"		1309065	0					
ANR	1309199	Callee	sprintf		1309065	0					
ANR	1309200	Identifier	sprintf		1309065	0					
ANR	1309201	ArgumentList	buf		1309065	1					
ANR	1309202	Argument	buf		1309065	0					
ANR	1309203	Identifier	buf		1309065	0					
ANR	1309204	Argument	"""%d"""		1309065	1					
ANR	1309205	PrimaryExpression	"""%d"""		1309065	0					
ANR	1309206	Argument	intValue		1309065	2					
ANR	1309207	Identifier	intValue		1309065	0					
ANR	1309208	ExpressionStatement	result += buf	78:5:2133:2146	1309065	2	True				
ANR	1309209	AssignmentExpression	result += buf		1309065	0		+=			
ANR	1309210	Identifier	result		1309065	0					
ANR	1309211	Identifier	buf		1309065	1					
ANR	1309212	ExpressionStatement	"result += ""\\n"""	79:5:2153:2167	1309065	3	True				
ANR	1309213	AssignmentExpression	"result += ""\\n"""		1309065	0		+=			
ANR	1309214	Identifier	result		1309065	0					
ANR	1309215	PrimaryExpression	"""\\n"""		1309065	1					
ANR	1309216	BreakStatement	break ;	81:4:2179:2184	1309065	14	True				
ANR	1309217	Label	case Value :: REAL_VALUE :	83:3:2195:2217	1309065	15	True				
ANR	1309218	Identifier	Value :: REAL_VALUE		1309065	0					
ANR	1309219	IfStatement	if ( value . IsRealValue ( doubleValue ) )		1309065	16					
ANR	1309220	Condition	value . IsRealValue ( doubleValue )	84:7:2226:2255	1309065	0	True				
ANR	1309221	CallExpression	value . IsRealValue ( doubleValue )		1309065	0					
ANR	1309222	Callee	value . IsRealValue		1309065	0					
ANR	1309223	MemberAccess	value . IsRealValue		1309065	0					
ANR	1309224	Identifier	value		1309065	0					
ANR	1309225	Identifier	IsRealValue		1309065	1					
ANR	1309226	ArgumentList	doubleValue		1309065	1					
ANR	1309227	Argument	doubleValue		1309065	0					
ANR	1309228	Identifier	doubleValue		1309065	0					
ANR	1309229	CompoundStatement		40:5:871:883	1309065	1					
ANR	1309230	IdentifierDeclStatement	char buf [ 24 ] ;	85:5:2265:2277	1309065	0	True				
ANR	1309231	IdentifierDecl	buf [ 24 ]		1309065	0					
ANR	1309232	IdentifierDeclType	char [ 24 ]		1309065	0					
ANR	1309233	Identifier	buf		1309065	1					
ANR	1309234	PrimaryExpression	24		1309065	2					
ANR	1309235	ExpressionStatement	"sprintf ( buf , ""%g"" , doubleValue )"	86:5:2284:2315	1309065	1	True				
ANR	1309236	CallExpression	"sprintf ( buf , ""%g"" , doubleValue )"		1309065	0					
ANR	1309237	Callee	sprintf		1309065	0					
ANR	1309238	Identifier	sprintf		1309065	0					
ANR	1309239	ArgumentList	buf		1309065	1					
ANR	1309240	Argument	buf		1309065	0					
ANR	1309241	Identifier	buf		1309065	0					
ANR	1309242	Argument	"""%g"""		1309065	1					
ANR	1309243	PrimaryExpression	"""%g"""		1309065	0					
ANR	1309244	Argument	doubleValue		1309065	2					
ANR	1309245	Identifier	doubleValue		1309065	0					
ANR	1309246	ExpressionStatement	result += buf	87:5:2322:2335	1309065	2	True				
ANR	1309247	AssignmentExpression	result += buf		1309065	0		+=			
ANR	1309248	Identifier	result		1309065	0					
ANR	1309249	Identifier	buf		1309065	1					
ANR	1309250	ExpressionStatement	"result += ""\\n"""	88:5:2342:2356	1309065	3	True				
ANR	1309251	AssignmentExpression	"result += ""\\n"""		1309065	0		+=			
ANR	1309252	Identifier	result		1309065	0					
ANR	1309253	PrimaryExpression	"""\\n"""		1309065	1					
ANR	1309254	BreakStatement	break ;	90:4:2368:2373	1309065	17	True				
ANR	1309255	Label	case Value :: RELATIVE_TIME_VALUE :	91:3:2378:2409	1309065	18	True				
ANR	1309256	Identifier	Value :: RELATIVE_TIME_VALUE		1309065	0					
ANR	1309257	ExpressionStatement	"result += ""RELATIVE TIME\\n"""	92:4:2415:2442	1309065	19	True				
ANR	1309258	AssignmentExpression	"result += ""RELATIVE TIME\\n"""		1309065	0		+=			
ANR	1309259	Identifier	result		1309065	0					
ANR	1309260	PrimaryExpression	"""RELATIVE TIME\\n"""		1309065	1					
ANR	1309261	BreakStatement	break ;	93:4:2448:2453	1309065	20	True				
ANR	1309262	Label	case Value :: ABSOLUTE_TIME_VALUE :	94:3:2458:2489	1309065	21	True				
ANR	1309263	Identifier	Value :: ABSOLUTE_TIME_VALUE		1309065	0					
ANR	1309264	ExpressionStatement	"result += ""ABSOLUTE TIME\\n"""	95:4:2495:2522	1309065	22	True				
ANR	1309265	AssignmentExpression	"result += ""ABSOLUTE TIME\\n"""		1309065	0		+=			
ANR	1309266	Identifier	result		1309065	0					
ANR	1309267	PrimaryExpression	"""ABSOLUTE TIME\\n"""		1309065	1					
ANR	1309268	BreakStatement	break ;	96:4:2528:2533	1309065	23	True				
ANR	1309269	Label	case Value :: STRING_VALUE :	97:3:2538:2562	1309065	24	True				
ANR	1309270	Identifier	Value :: STRING_VALUE		1309065	0					
ANR	1309271	IfStatement	if ( value . IsStringValue ( stringValue ) )		1309065	25					
ANR	1309272	Condition	value . IsStringValue ( stringValue )	98:7:2571:2602	1309065	0	True				
ANR	1309273	CallExpression	value . IsStringValue ( stringValue )		1309065	0					
ANR	1309274	Callee	value . IsStringValue		1309065	0					
ANR	1309275	MemberAccess	value . IsStringValue		1309065	0					
ANR	1309276	Identifier	value		1309065	0					
ANR	1309277	Identifier	IsStringValue		1309065	1					
ANR	1309278	ArgumentList	stringValue		1309065	1					
ANR	1309279	Argument	stringValue		1309065	0					
ANR	1309280	Identifier	stringValue		1309065	0					
ANR	1309281	CompoundStatement		53:41:1211:1211	1309065	1					
ANR	1309282	ExpressionStatement	result += stringValue	99:5:2612:2633	1309065	0	True				
ANR	1309283	AssignmentExpression	result += stringValue		1309065	0		+=			
ANR	1309284	Identifier	result		1309065	0					
ANR	1309285	Identifier	stringValue		1309065	1					
ANR	1309286	ExpressionStatement	"result += ""\\n"""	100:5:2641:2655	1309065	1	True				
ANR	1309287	AssignmentExpression	"result += ""\\n"""		1309065	0		+=			
ANR	1309288	Identifier	result		1309065	0					
ANR	1309289	PrimaryExpression	"""\\n"""		1309065	1					
ANR	1309290	BreakStatement	break ;	102:4:2667:2672	1309065	26	True				
ANR	1309291	Label	case Value :: CLASSAD_VALUE :	103:3:2677:2702	1309065	27	True				
ANR	1309292	Identifier	Value :: CLASSAD_VALUE		1309065	0					
ANR	1309293	ExpressionStatement	"result += ""CLASSAD\\n"""	104:4:2708:2729	1309065	28	True				
ANR	1309294	AssignmentExpression	"result += ""CLASSAD\\n"""		1309065	0		+=			
ANR	1309295	Identifier	result		1309065	0					
ANR	1309296	PrimaryExpression	"""CLASSAD\\n"""		1309065	1					
ANR	1309297	BreakStatement	break ;	105:4:2735:2740	1309065	29	True				
ANR	1309298	Label	case Value :: LIST_VALUE :	106:3:2745:2767	1309065	30	True				
ANR	1309299	Identifier	Value :: LIST_VALUE		1309065	0					
ANR	1309300	ExpressionStatement	"result += ""LIST\\n"""	107:4:2773:2791	1309065	31	True				
ANR	1309301	AssignmentExpression	"result += ""LIST\\n"""		1309065	0		+=			
ANR	1309302	Identifier	result		1309065	0					
ANR	1309303	PrimaryExpression	"""LIST\\n"""		1309065	1					
ANR	1309304	BreakStatement	break ;	108:4:2797:2802	1309065	32	True				
ANR	1309305	ExpressionStatement	debug_print ( result . c_str ( ) )	110:2:2810:2837	1309065	11	True				
ANR	1309306	CallExpression	debug_print ( result . c_str ( ) )		1309065	0					
ANR	1309307	Callee	debug_print		1309065	0					
ANR	1309308	Identifier	debug_print		1309065	0					
ANR	1309309	ArgumentList	result . c_str ( )		1309065	1					
ANR	1309310	Argument	result . c_str ( )		1309065	0					
ANR	1309311	CallExpression	result . c_str ( )		1309065	0					
ANR	1309312	Callee	result . c_str		1309065	0					
ANR	1309313	MemberAccess	result . c_str		1309065	0					
ANR	1309314	Identifier	result		1309065	0					
ANR	1309315	Identifier	c_str		1309065	1					
ANR	1309316	ArgumentList			1309065	1					
ANR	1309317	ReturnType	void		1309065	1					
ANR	1309318	Identifier	ExprTree :: debug_format_value		1309065	2					
ANR	1309319	ParameterList	Value & value		1309065	3					
ANR	1309320	Parameter	Value & value	46:34:1373:1384	1309065	0	True				
ANR	1309321	ParameterType	Value &		1309065	0					
ANR	1309322	Identifier	value		1309065	1					
ANR	1309323	CFGEntryNode	ENTRY		1309065		True				
ANR	1309324	CFGExitNode	EXIT		1309065		True				
ANR	1309325	Symbol	value . IsIntegerValue		1309065						
ANR	1309326	Symbol	result . c_str		1309065						
ANR	1309327	Symbol	intValue		1309065						
ANR	1309328	Symbol	false		1309065						
ANR	1309329	Symbol	this		1309065						
ANR	1309330	Symbol	doubleValue		1309065						
ANR	1309331	Symbol	result		1309065						
ANR	1309332	Symbol	value . IsBooleanValue		1309065						
ANR	1309333	Symbol	stringValue		1309065						
ANR	1309334	Symbol	buf		1309065						
ANR	1309335	Symbol	value . GetType		1309065						
ANR	1309336	Symbol	unp		1309065						
ANR	1309337	Symbol	boolValue		1309065						
ANR	1309338	Symbol	buffer		1309065						
ANR	1309339	Symbol	value . IsStringValue		1309065						
ANR	1309340	Symbol	value		1309065						
ANR	1309341	Symbol	value . IsRealValue		1309065						
ANR	1309342	Function	ExprTree :: ExprTree	113:0:2842:2888							
ANR	1309343	FunctionDef	ExprTree :: ExprTree ()		1309342	0					
ANR	1309344	CompoundStatement		115:0:2865:2888	1309342	0					
ANR	1309345	ExpressionStatement	parentScope = NULL	116:1:2868:2886	1309342	0	True				
ANR	1309346	AssignmentExpression	parentScope = NULL		1309342	0		=			
ANR	1309347	Identifier	parentScope		1309342	0					
ANR	1309348	Identifier	NULL		1309342	1					
ANR	1309349	Identifier	ExprTree :: ExprTree		1309342	1					
ANR	1309350	ParameterList			1309342	2					
ANR	1309351	CFGEntryNode	ENTRY		1309342		True				
ANR	1309352	CFGExitNode	EXIT		1309342		True				
ANR	1309353	Symbol	NULL		1309342						
ANR	1309354	Symbol	parentScope		1309342						
ANR	1309355	Function	ExprTree :: ~ExprTree	120:0:2892:2917							
ANR	1309356	FunctionDef	ExprTree :: ~ExprTree ()		1309355	0					
ANR	1309357	CompoundStatement		122:0:2915:2917	1309355	0					
ANR	1309358	Identifier	ExprTree :: ~ExprTree		1309355	1					
ANR	1309359	ParameterList			1309355	2					
ANR	1309360	CFGEntryNode	ENTRY		1309355		True				
ANR	1309361	CFGExitNode	EXIT		1309355		True				
ANR	1309362	Function	ExprTree :: CopyFrom	125:0:2920:3089							
ANR	1309363	FunctionDef	ExprTree :: CopyFrom (const ExprTree & tree)		1309362	0					
ANR	1309364	CompoundStatement		127:0:2967:3089	1309362	0					
ANR	1309365	IfStatement	if ( this != & tree )		1309362	0					
ANR	1309366	Condition	this != & tree	128:8:2977:2989	1309362	0	True				
ANR	1309367	EqualityExpression	this != & tree		1309362	0		!=			
ANR	1309368	Identifier	this		1309362	0					
ANR	1309369	UnaryOperationExpression	& tree		1309362	1					
ANR	1309370	UnaryOperator	&		1309362	0					
ANR	1309371	Identifier	tree		1309362	1					
ANR	1309372	CompoundStatement		2:23:24:24	1309362	1					
ANR	1309373	ExpressionStatement	parentScope = tree . parentScope	129:8:3002:3032	1309362	0	True				
ANR	1309374	AssignmentExpression	parentScope = tree . parentScope		1309362	0		=			
ANR	1309375	Identifier	parentScope		1309362	0					
ANR	1309376	MemberAccess	tree . parentScope		1309362	1					
ANR	1309377	Identifier	tree		1309362	0					
ANR	1309378	Identifier	parentScope		1309362	1					
ANR	1309379	ExpressionStatement	nodeKind = tree . nodeKind	130:8:3042:3069	1309362	1	True				
ANR	1309380	AssignmentExpression	nodeKind = tree . nodeKind		1309362	0		=			
ANR	1309381	Identifier	nodeKind		1309362	0					
ANR	1309382	MemberAccess	tree . nodeKind		1309362	1					
ANR	1309383	Identifier	tree		1309362	0					
ANR	1309384	Identifier	nodeKind		1309362	1					
ANR	1309385	ReturnStatement	return ;	132:4:3081:3087	1309362	1	True				
ANR	1309386	ReturnType	void		1309362	1					
ANR	1309387	Identifier	ExprTree :: CopyFrom		1309362	2					
ANR	1309388	ParameterList	const ExprTree & tree		1309362	3					
ANR	1309389	Parameter	const ExprTree & tree	126:9:2945:2964	1309362	0	True				
ANR	1309390	ParameterType	const ExprTree &		1309362	0					
ANR	1309391	Identifier	tree		1309362	1					
ANR	1309392	CFGEntryNode	ENTRY		1309362		True				
ANR	1309393	CFGExitNode	EXIT		1309362		True				
ANR	1309394	Symbol	tree . nodeKind		1309362						
ANR	1309395	Symbol	tree . parentScope		1309362						
ANR	1309396	Symbol	tree		1309362						
ANR	1309397	Symbol	this		1309362						
ANR	1309398	Symbol	parentScope		1309362						
ANR	1309399	Symbol	& tree		1309362						
ANR	1309400	Symbol	nodeKind		1309362						
ANR	1309401	Function	ExprTree :: Evaluate	135:0:3092:3336							
ANR	1309402	FunctionDef	"ExprTree :: Evaluate (EvalState & state , Value & val)"		1309401	0					
ANR	1309403	CompoundStatement		137:0:3154:3336	1309401	0					
ANR	1309404	IdentifierDeclStatement	"bool eval = _Evaluate ( state , val ) ;"	138:1:3157:3192	1309401	0	True				
ANR	1309405	IdentifierDecl	"eval = _Evaluate ( state , val )"		1309401	0					
ANR	1309406	IdentifierDeclType	bool		1309401	0					
ANR	1309407	Identifier	eval		1309401	1					
ANR	1309408	AssignmentExpression	"eval = _Evaluate ( state , val )"		1309401	2		=			
ANR	1309409	Identifier	eval		1309401	0					
ANR	1309410	CallExpression	"_Evaluate ( state , val )"		1309401	1					
ANR	1309411	Callee	_Evaluate		1309401	0					
ANR	1309412	Identifier	_Evaluate		1309401	0					
ANR	1309413	ArgumentList	state		1309401	1					
ANR	1309414	Argument	state		1309401	0					
ANR	1309415	Identifier	state		1309401	0					
ANR	1309416	Argument	val		1309401	1					
ANR	1309417	Identifier	val		1309401	0					
ANR	1309418	IfStatement	if ( state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE )		1309401	1					
ANR	1309419	Condition	state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE	140:4:3199:3285	1309401	0	True				
ANR	1309420	AndExpression	state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE		1309401	0		&&			
ANR	1309421	MemberAccess	state . debug		1309401	0					
ANR	1309422	Identifier	state		1309401	0					
ANR	1309423	Identifier	debug		1309401	1					
ANR	1309424	AndExpression	GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE		1309401	1		&&			
ANR	1309425	EqualityExpression	GetKind ( ) != ExprTree :: LITERAL_NODE		1309401	0		!=			
ANR	1309426	CallExpression	GetKind ( )		1309401	0					
ANR	1309427	Callee	GetKind		1309401	0					
ANR	1309428	Identifier	GetKind		1309401	0					
ANR	1309429	ArgumentList			1309401	1					
ANR	1309430	Identifier	ExprTree :: LITERAL_NODE		1309401	1					
ANR	1309431	EqualityExpression	GetKind ( ) != ExprTree :: OP_NODE		1309401	1		!=			
ANR	1309432	CallExpression	GetKind ( )		1309401	0					
ANR	1309433	Callee	GetKind		1309401	0					
ANR	1309434	Identifier	GetKind		1309401	0					
ANR	1309435	ArgumentList			1309401	1					
ANR	1309436	Identifier	ExprTree :: OP_NODE		1309401	1					
ANR	1309437	CompoundStatement		6:1:134:134	1309401	1					
ANR	1309438	ExpressionStatement	debug_format_value ( val )	143:2:3293:3316	1309401	0	True				
ANR	1309439	CallExpression	debug_format_value ( val )		1309401	0					
ANR	1309440	Callee	debug_format_value		1309401	0					
ANR	1309441	Identifier	debug_format_value		1309401	0					
ANR	1309442	ArgumentList	val		1309401	1					
ANR	1309443	Argument	val		1309401	0					
ANR	1309444	Identifier	val		1309401	0					
ANR	1309445	ReturnStatement	return eval ;	146:1:3323:3334	1309401	2	True				
ANR	1309446	Identifier	eval		1309401	0					
ANR	1309447	ReturnType	bool		1309401	1					
ANR	1309448	Identifier	ExprTree :: Evaluate		1309401	2					
ANR	1309449	ParameterList	"EvalState & state , Value & val"		1309401	3					
ANR	1309450	Parameter	EvalState & state	136:10:3118:3133	1309401	0	True				
ANR	1309451	ParameterType	EvalState &		1309401	0					
ANR	1309452	Identifier	state		1309401	1					
ANR	1309453	Parameter	Value & val	136:28:3136:3145	1309401	1	True				
ANR	1309454	ParameterType	Value &		1309401	0					
ANR	1309455	Identifier	val		1309401	1					
ANR	1309456	CFGEntryNode	ENTRY		1309401		True				
ANR	1309457	CFGExitNode	EXIT		1309401		True				
ANR	1309458	Symbol	val		1309401						
ANR	1309459	Symbol	GetKind		1309401						
ANR	1309460	Symbol	eval		1309401						
ANR	1309461	Symbol	ExprTree :: OP_NODE		1309401						
ANR	1309462	Symbol	ExprTree :: LITERAL_NODE		1309401						
ANR	1309463	Symbol	state		1309401						
ANR	1309464	Symbol	state . debug		1309401						
ANR	1309465	Symbol	_Evaluate		1309401						
ANR	1309466	Function	ExprTree :: Evaluate	149:0:3339:3605							
ANR	1309467	FunctionDef	"ExprTree :: Evaluate (EvalState & state , Value & val , ExprTree * & sig)"		1309466	0					
ANR	1309468	CompoundStatement		151:0:3418:3605	1309466	0					
ANR	1309469	IdentifierDeclStatement	"bool eval = _Evaluate ( state , val , sig ) ;"	152:1:3421:3461	1309466	0	True				
ANR	1309470	IdentifierDecl	"eval = _Evaluate ( state , val , sig )"		1309466	0					
ANR	1309471	IdentifierDeclType	bool		1309466	0					
ANR	1309472	Identifier	eval		1309466	1					
ANR	1309473	AssignmentExpression	"eval = _Evaluate ( state , val , sig )"		1309466	2		=			
ANR	1309474	Identifier	eval		1309466	0					
ANR	1309475	CallExpression	"_Evaluate ( state , val , sig )"		1309466	1					
ANR	1309476	Callee	_Evaluate		1309466	0					
ANR	1309477	Identifier	_Evaluate		1309466	0					
ANR	1309478	ArgumentList	state		1309466	1					
ANR	1309479	Argument	state		1309466	0					
ANR	1309480	Identifier	state		1309466	0					
ANR	1309481	Argument	val		1309466	1					
ANR	1309482	Identifier	val		1309466	0					
ANR	1309483	Argument	sig		1309466	2					
ANR	1309484	Identifier	sig		1309466	0					
ANR	1309485	IfStatement	if ( state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE )		1309466	1					
ANR	1309486	Condition	state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE	154:4:3468:3554	1309466	0	True				
ANR	1309487	AndExpression	state . debug && GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE		1309466	0		&&			
ANR	1309488	MemberAccess	state . debug		1309466	0					
ANR	1309489	Identifier	state		1309466	0					
ANR	1309490	Identifier	debug		1309466	1					
ANR	1309491	AndExpression	GetKind ( ) != ExprTree :: LITERAL_NODE && GetKind ( ) != ExprTree :: OP_NODE		1309466	1		&&			
ANR	1309492	EqualityExpression	GetKind ( ) != ExprTree :: LITERAL_NODE		1309466	0		!=			
ANR	1309493	CallExpression	GetKind ( )		1309466	0					
ANR	1309494	Callee	GetKind		1309466	0					
ANR	1309495	Identifier	GetKind		1309466	0					
ANR	1309496	ArgumentList			1309466	1					
ANR	1309497	Identifier	ExprTree :: LITERAL_NODE		1309466	1					
ANR	1309498	EqualityExpression	GetKind ( ) != ExprTree :: OP_NODE		1309466	1		!=			
ANR	1309499	CallExpression	GetKind ( )		1309466	0					
ANR	1309500	Callee	GetKind		1309466	0					
ANR	1309501	Identifier	GetKind		1309466	0					
ANR	1309502	ArgumentList			1309466	1					
ANR	1309503	Identifier	ExprTree :: OP_NODE		1309466	1					
ANR	1309504	CompoundStatement		6:1:139:139	1309466	1					
ANR	1309505	ExpressionStatement	debug_format_value ( val )	157:2:3562:3585	1309466	0	True				
ANR	1309506	CallExpression	debug_format_value ( val )		1309466	0					
ANR	1309507	Callee	debug_format_value		1309466	0					
ANR	1309508	Identifier	debug_format_value		1309466	0					
ANR	1309509	ArgumentList	val		1309466	1					
ANR	1309510	Argument	val		1309466	0					
ANR	1309511	Identifier	val		1309466	0					
ANR	1309512	ReturnStatement	return eval ;	160:1:3592:3603	1309466	2	True				
ANR	1309513	Identifier	eval		1309466	0					
ANR	1309514	ReturnType	bool		1309466	1					
ANR	1309515	Identifier	ExprTree :: Evaluate		1309466	2					
ANR	1309516	ParameterList	"EvalState & state , Value & val , ExprTree * & sig"		1309466	3					
ANR	1309517	Parameter	EvalState & state	150:10:3365:3380	1309466	0	True				
ANR	1309518	ParameterType	EvalState &		1309466	0					
ANR	1309519	Identifier	state		1309466	1					
ANR	1309520	Parameter	Value & val	150:28:3383:3392	1309466	1	True				
ANR	1309521	ParameterType	Value &		1309466	0					
ANR	1309522	Identifier	val		1309466	1					
ANR	1309523	Parameter	ExprTree * & sig	150:40:3395:3408	1309466	2	True				
ANR	1309524	ParameterType	ExprTree * &		1309466	0					
ANR	1309525	Identifier	sig		1309466	1					
ANR	1309526	CFGEntryNode	ENTRY		1309466		True				
ANR	1309527	CFGExitNode	EXIT		1309466		True				
ANR	1309528	Symbol	val		1309466						
ANR	1309529	Symbol	sig		1309466						
ANR	1309530	Symbol	GetKind		1309466						
ANR	1309531	Symbol	eval		1309466						
ANR	1309532	Symbol	ExprTree :: OP_NODE		1309466						
ANR	1309533	Symbol	ExprTree :: LITERAL_NODE		1309466						
ANR	1309534	Symbol	state		1309466						
ANR	1309535	Symbol	state . debug		1309466						
ANR	1309536	Symbol	_Evaluate		1309466						
ANR	1309537	Function	ExprTree :: SetParentScope	164:0:3609:3716							
ANR	1309538	FunctionDef	ExprTree :: SetParentScope (const ClassAd * scope)		1309537	0					
ANR	1309539	CompoundStatement		166:0:3665:3716	1309537	0					
ANR	1309540	ExpressionStatement	parentScope = scope	167:1:3668:3687	1309537	0	True				
ANR	1309541	AssignmentExpression	parentScope = scope		1309537	0		=			
ANR	1309542	Identifier	parentScope		1309537	0					
ANR	1309543	Identifier	scope		1309537	1					
ANR	1309544	ExpressionStatement	_SetParentScope ( scope )	168:1:3690:3714	1309537	1	True				
ANR	1309545	CallExpression	_SetParentScope ( scope )		1309537	0					
ANR	1309546	Callee	_SetParentScope		1309537	0					
ANR	1309547	Identifier	_SetParentScope		1309537	0					
ANR	1309548	ArgumentList	scope		1309537	1					
ANR	1309549	Argument	scope		1309537	0					
ANR	1309550	Identifier	scope		1309537	0					
ANR	1309551	ReturnType	void		1309537	1					
ANR	1309552	Identifier	ExprTree :: SetParentScope		1309537	2					
ANR	1309553	ParameterList	const ClassAd * scope		1309537	3					
ANR	1309554	Parameter	const ClassAd * scope	165:16:3641:3660	1309537	0	True				
ANR	1309555	ParameterType	const ClassAd *		1309537	0					
ANR	1309556	Identifier	scope		1309537	1					
ANR	1309557	CFGEntryNode	ENTRY		1309537		True				
ANR	1309558	CFGExitNode	EXIT		1309537		True				
ANR	1309559	Symbol	scope		1309537						
ANR	1309560	Symbol	parentScope		1309537						
ANR	1309561	Function	ExprTree :: Evaluate	172:0:3720:3937							
ANR	1309562	FunctionDef	ExprTree :: Evaluate (Value & val)		1309561	0					
ANR	1309563	CompoundStatement		174:0:3765:3937	1309561	0					
ANR	1309564	IdentifierDeclStatement	EvalState state ;	175:1:3768:3784	1309561	0	True				
ANR	1309565	IdentifierDecl	state		1309561	0					
ANR	1309566	IdentifierDeclType	EvalState		1309561	0					
ANR	1309567	Identifier	state		1309561	1					
ANR	1309568	IfStatement	if ( parentScope == NULL )		1309561	1					
ANR	1309569	Condition	parentScope == NULL	177:5:3792:3810	1309561	0	True				
ANR	1309570	EqualityExpression	parentScope == NULL		1309561	0		==			
ANR	1309571	Identifier	parentScope		1309561	0					
ANR	1309572	Identifier	NULL		1309561	1					
ANR	1309573	CompoundStatement		4:26:47:47	1309561	1					
ANR	1309574	ExpressionStatement	val . SetErrorValue ( )	178:2:3817:3836	1309561	0	True				
ANR	1309575	CallExpression	val . SetErrorValue ( )		1309561	0					
ANR	1309576	Callee	val . SetErrorValue		1309561	0					
ANR	1309577	MemberAccess	val . SetErrorValue		1309561	0					
ANR	1309578	Identifier	val		1309561	0					
ANR	1309579	Identifier	SetErrorValue		1309561	1					
ANR	1309580	ArgumentList			1309561	1					
ANR	1309581	ReturnStatement	return false ;	179:2:3840:3852	1309561	1	True				
ANR	1309582	Identifier	false		1309561	0					
ANR	1309583	ElseStatement	else		1309561	0					
ANR	1309584	CompoundStatement		7:8:96:96	1309561	0					
ANR	1309585	ExpressionStatement	state . SetScopes ( parentScope )	181:2:3866:3896	1309561	0	True				
ANR	1309586	CallExpression	state . SetScopes ( parentScope )		1309561	0					
ANR	1309587	Callee	state . SetScopes		1309561	0					
ANR	1309588	MemberAccess	state . SetScopes		1309561	0					
ANR	1309589	Identifier	state		1309561	0					
ANR	1309590	Identifier	SetScopes		1309561	1					
ANR	1309591	ArgumentList	parentScope		1309561	1					
ANR	1309592	Argument	parentScope		1309561	0					
ANR	1309593	Identifier	parentScope		1309561	0					
ANR	1309594	ReturnStatement	"return ( Evaluate ( state , val ) ) ;"	182:2:3900:3932	1309561	1	True				
ANR	1309595	CallExpression	"Evaluate ( state , val )"		1309561	0					
ANR	1309596	Callee	Evaluate		1309561	0					
ANR	1309597	Identifier	Evaluate		1309561	0					
ANR	1309598	ArgumentList	state		1309561	1					
ANR	1309599	Argument	state		1309561	0					
ANR	1309600	Identifier	state		1309561	0					
ANR	1309601	Argument	val		1309561	1					
ANR	1309602	Identifier	val		1309561	0					
ANR	1309603	ReturnType	bool		1309561	1					
ANR	1309604	Identifier	ExprTree :: Evaluate		1309561	2					
ANR	1309605	ParameterList	Value & val		1309561	3					
ANR	1309606	Parameter	Value & val	173:10:3746:3755	1309561	0	True				
ANR	1309607	ParameterType	Value &		1309561	0					
ANR	1309608	Identifier	val		1309561	1					
ANR	1309609	CFGEntryNode	ENTRY		1309561		True				
ANR	1309610	CFGExitNode	EXIT		1309561		True				
ANR	1309611	Symbol	val		1309561						
ANR	1309612	Symbol	NULL		1309561						
ANR	1309613	Symbol	Evaluate		1309561						
ANR	1309614	Symbol	parentScope		1309561						
ANR	1309615	Symbol	false		1309561						
ANR	1309616	Symbol	state		1309561						
ANR	1309617	Function	ExprTree :: Evaluate	187:0:3941:4098							
ANR	1309618	FunctionDef	"ExprTree :: Evaluate (Value & val , ExprTree * & sig)"		1309617	0					
ANR	1309619	CompoundStatement		189:0:4002:4098	1309617	0					
ANR	1309620	IdentifierDeclStatement	EvalState state ;	190:1:4005:4021	1309617	0	True				
ANR	1309621	IdentifierDecl	state		1309617	0					
ANR	1309622	IdentifierDeclType	EvalState		1309617	0					
ANR	1309623	Identifier	state		1309617	1					
ANR	1309624	ExpressionStatement	state . SetScopes ( parentScope )	192:1:4025:4055	1309617	1	True				
ANR	1309625	CallExpression	state . SetScopes ( parentScope )		1309617	0					
ANR	1309626	Callee	state . SetScopes		1309617	0					
ANR	1309627	MemberAccess	state . SetScopes		1309617	0					
ANR	1309628	Identifier	state		1309617	0					
ANR	1309629	Identifier	SetScopes		1309617	1					
ANR	1309630	ArgumentList	parentScope		1309617	1					
ANR	1309631	Argument	parentScope		1309617	0					
ANR	1309632	Identifier	parentScope		1309617	0					
ANR	1309633	ReturnStatement	"return ( Evaluate ( state , val , sig ) ) ;"	193:1:4058:4096	1309617	2	True				
ANR	1309634	CallExpression	"Evaluate ( state , val , sig )"		1309617	0					
ANR	1309635	Callee	Evaluate		1309617	0					
ANR	1309636	Identifier	Evaluate		1309617	0					
ANR	1309637	ArgumentList	state		1309617	1					
ANR	1309638	Argument	state		1309617	0					
ANR	1309639	Identifier	state		1309617	0					
ANR	1309640	Argument	val		1309617	1					
ANR	1309641	Identifier	val		1309617	0					
ANR	1309642	Argument	sig		1309617	2					
ANR	1309643	Identifier	sig		1309617	0					
ANR	1309644	ReturnType	bool		1309617	1					
ANR	1309645	Identifier	ExprTree :: Evaluate		1309617	2					
ANR	1309646	ParameterList	"Value & val , ExprTree * & sig"		1309617	3					
ANR	1309647	Parameter	Value & val	188:10:3967:3976	1309617	0	True				
ANR	1309648	ParameterType	Value &		1309617	0					
ANR	1309649	Identifier	val		1309617	1					
ANR	1309650	Parameter	ExprTree * & sig	188:22:3979:3992	1309617	1	True				
ANR	1309651	ParameterType	ExprTree * &		1309617	0					
ANR	1309652	Identifier	sig		1309617	1					
ANR	1309653	CFGEntryNode	ENTRY		1309617		True				
ANR	1309654	CFGExitNode	EXIT		1309617		True				
ANR	1309655	Symbol	val		1309617						
ANR	1309656	Symbol	sig		1309617						
ANR	1309657	Symbol	Evaluate		1309617						
ANR	1309658	Symbol	parentScope		1309617						
ANR	1309659	Symbol	state		1309617						
ANR	1309660	Function	ExprTree :: Flatten	197:0:4102:4257							
ANR	1309661	FunctionDef	"ExprTree :: Flatten (Value & val , ExprTree * & tree)"		1309660	0					
ANR	1309662	CompoundStatement		199:0:4163:4257	1309660	0					
ANR	1309663	IdentifierDeclStatement	EvalState state ;	200:1:4166:4181	1309660	0	True				
ANR	1309664	IdentifierDecl	state		1309660	0					
ANR	1309665	IdentifierDeclType	EvalState		1309660	0					
ANR	1309666	Identifier	state		1309660	1					
ANR	1309667	ExpressionStatement	state . SetScopes ( parentScope )	202:1:4185:4215	1309660	1	True				
ANR	1309668	CallExpression	state . SetScopes ( parentScope )		1309660	0					
ANR	1309669	Callee	state . SetScopes		1309660	0					
ANR	1309670	MemberAccess	state . SetScopes		1309660	0					
ANR	1309671	Identifier	state		1309660	0					
ANR	1309672	Identifier	SetScopes		1309660	1					
ANR	1309673	ArgumentList	parentScope		1309660	1					
ANR	1309674	Argument	parentScope		1309660	0					
ANR	1309675	Identifier	parentScope		1309660	0					
ANR	1309676	ReturnStatement	"return ( Flatten ( state , val , tree ) ) ;"	203:1:4218:4255	1309660	2	True				
ANR	1309677	CallExpression	"Flatten ( state , val , tree )"		1309660	0					
ANR	1309678	Callee	Flatten		1309660	0					
ANR	1309679	Identifier	Flatten		1309660	0					
ANR	1309680	ArgumentList	state		1309660	1					
ANR	1309681	Argument	state		1309660	0					
ANR	1309682	Identifier	state		1309660	0					
ANR	1309683	Argument	val		1309660	1					
ANR	1309684	Identifier	val		1309660	0					
ANR	1309685	Argument	tree		1309660	2					
ANR	1309686	Identifier	tree		1309660	0					
ANR	1309687	ReturnType	bool		1309660	1					
ANR	1309688	Identifier	ExprTree :: Flatten		1309660	2					
ANR	1309689	ParameterList	"Value & val , ExprTree * & tree"		1309660	3					
ANR	1309690	Parameter	Value & val	198:9:4127:4136	1309660	0	True				
ANR	1309691	ParameterType	Value &		1309660	0					
ANR	1309692	Identifier	val		1309660	1					
ANR	1309693	Parameter	ExprTree * & tree	198:21:4139:4153	1309660	1	True				
ANR	1309694	ParameterType	ExprTree * &		1309660	0					
ANR	1309695	Identifier	tree		1309660	1					
ANR	1309696	CFGEntryNode	ENTRY		1309660		True				
ANR	1309697	CFGExitNode	EXIT		1309660		True				
ANR	1309698	Symbol	val		1309660						
ANR	1309699	Symbol	tree		1309660						
ANR	1309700	Symbol	parentScope		1309660						
ANR	1309701	Symbol	Flatten		1309660						
ANR	1309702	Symbol	state		1309660						
ANR	1309703	Function	ExprTree :: Flatten	207:0:4261:4395							
ANR	1309704	FunctionDef	"ExprTree :: Flatten (EvalState & state , Value & val , ExprTree * & tree , int * op)"		1309703	0					
ANR	1309705	CompoundStatement		209:0:4348:4395	1309703	0					
ANR	1309706	ReturnStatement	"return ( _Flatten ( state , val , tree , op ) ) ;"	210:1:4351:4393	1309703	0	True				
ANR	1309707	CallExpression	"_Flatten ( state , val , tree , op )"		1309703	0					
ANR	1309708	Callee	_Flatten		1309703	0					
ANR	1309709	Identifier	_Flatten		1309703	0					
ANR	1309710	ArgumentList	state		1309703	1					
ANR	1309711	Argument	state		1309703	0					
ANR	1309712	Identifier	state		1309703	0					
ANR	1309713	Argument	val		1309703	1					
ANR	1309714	Identifier	val		1309703	0					
ANR	1309715	Argument	tree		1309703	2					
ANR	1309716	Identifier	tree		1309703	0					
ANR	1309717	Argument	op		1309703	3					
ANR	1309718	Identifier	op		1309703	0					
ANR	1309719	ReturnType	bool		1309703	1					
ANR	1309720	Identifier	ExprTree :: Flatten		1309703	2					
ANR	1309721	ParameterList	"EvalState & state , Value & val , ExprTree * & tree , int * op"		1309703	3					
ANR	1309722	Parameter	EvalState & state	208:9:4286:4301	1309703	0	True				
ANR	1309723	ParameterType	EvalState &		1309703	0					
ANR	1309724	Identifier	state		1309703	1					
ANR	1309725	Parameter	Value & val	208:27:4304:4313	1309703	1	True				
ANR	1309726	ParameterType	Value &		1309703	0					
ANR	1309727	Identifier	val		1309703	1					
ANR	1309728	Parameter	ExprTree * & tree	208:39:4316:4330	1309703	2	True				
ANR	1309729	ParameterType	ExprTree * &		1309703	0					
ANR	1309730	Identifier	tree		1309703	1					
ANR	1309731	Parameter	int * op	208:56:4333:4339	1309703	3	True				
ANR	1309732	ParameterType	int *		1309703	0					
ANR	1309733	Identifier	op		1309703	1					
ANR	1309734	CFGEntryNode	ENTRY		1309703		True				
ANR	1309735	CFGExitNode	EXIT		1309703		True				
ANR	1309736	Symbol	val		1309703						
ANR	1309737	Symbol	op		1309703						
ANR	1309738	Symbol	tree		1309703						
ANR	1309739	Symbol	_Flatten		1309703						
ANR	1309740	Symbol	state		1309703						
ANR	1309741	Function	ExprTree :: Puke	214:0:4399:4533							
ANR	1309742	FunctionDef	ExprTree :: Puke ()		1309741	0					
ANR	1309743	CompoundStatement		216:0:4429:4533	1309741	0					
ANR	1309744	IdentifierDeclStatement	PrettyPrint unp ;	217:1:4432:4447	1309741	0	True				
ANR	1309745	IdentifierDecl	unp		1309741	0					
ANR	1309746	IdentifierDeclType	PrettyPrint		1309741	0					
ANR	1309747	Identifier	unp		1309741	1					
ANR	1309748	IdentifierDeclStatement	string buffer ;	218:1:4450:4464	1309741	1	True				
ANR	1309749	IdentifierDecl	buffer		1309741	0					
ANR	1309750	IdentifierDeclType	string		1309741	0					
ANR	1309751	Identifier	buffer		1309741	1					
ANR	1309752	ExpressionStatement	"unp . Unparse ( buffer , this )"	220:1:4468:4495	1309741	2	True				
ANR	1309753	CallExpression	"unp . Unparse ( buffer , this )"		1309741	0					
ANR	1309754	Callee	unp . Unparse		1309741	0					
ANR	1309755	MemberAccess	unp . Unparse		1309741	0					
ANR	1309756	Identifier	unp		1309741	0					
ANR	1309757	Identifier	Unparse		1309741	1					
ANR	1309758	ArgumentList	buffer		1309741	1					
ANR	1309759	Argument	buffer		1309741	0					
ANR	1309760	Identifier	buffer		1309741	0					
ANR	1309761	Argument	this		1309741	1					
ANR	1309762	Identifier	this		1309741	0					
ANR	1309763	ExpressionStatement	"printf ( ""%s\\n"" , buffer . c_str ( ) )"	221:1:4498:4531	1309741	3	True				
ANR	1309764	CallExpression	"printf ( ""%s\\n"" , buffer . c_str ( ) )"		1309741	0					
ANR	1309765	Callee	printf		1309741	0					
ANR	1309766	Identifier	printf		1309741	0					
ANR	1309767	ArgumentList	"""%s\\n"""		1309741	1					
ANR	1309768	Argument	"""%s\\n"""		1309741	0					
ANR	1309769	PrimaryExpression	"""%s\\n"""		1309741	0					
ANR	1309770	Argument	buffer . c_str ( )		1309741	1					
ANR	1309771	CallExpression	buffer . c_str ( )		1309741	0					
ANR	1309772	Callee	buffer . c_str		1309741	0					
ANR	1309773	MemberAccess	buffer . c_str		1309741	0					
ANR	1309774	Identifier	buffer		1309741	0					
ANR	1309775	Identifier	c_str		1309741	1					
ANR	1309776	ArgumentList			1309741	1					
ANR	1309777	ReturnType	void		1309741	1					
ANR	1309778	Identifier	ExprTree :: Puke		1309741	2					
ANR	1309779	ParameterList			1309741	3					
ANR	1309780	CFGEntryNode	ENTRY		1309741		True				
ANR	1309781	CFGExitNode	EXIT		1309741		True				
ANR	1309782	Symbol	buffer . c_str		1309741						
ANR	1309783	Symbol	unp		1309741						
ANR	1309784	Symbol	this		1309741						
ANR	1309785	Symbol	buffer		1309741						
ANR	1309786	DeclStmt									
ANR	1309787	Decl							unsigned char	unsigned char *	ptr
ANR	1309788	DeclStmt									
ANR	1309789	Decl							int	int	result
ANR	1309790	DeclStmt									
ANR	1309791	Decl							int	int	i
ANR	1309792	Function	EvalState :: EvalState	237:0:4770:4922							
ANR	1309793	FunctionDef	EvalState :: EvalState ()		1309792	0					
ANR	1309794	CompoundStatement		239:0:4795:4922	1309792	0					
ANR	1309795	ExpressionStatement	rootAd = NULL	240:1:4798:4811	1309792	0	True				
ANR	1309796	AssignmentExpression	rootAd = NULL		1309792	0		=			
ANR	1309797	Identifier	rootAd		1309792	0					
ANR	1309798	Identifier	NULL		1309792	1					
ANR	1309799	ExpressionStatement	curAd = NULL	241:1:4814:4827	1309792	1	True				
ANR	1309800	AssignmentExpression	curAd = NULL		1309792	0		=			
ANR	1309801	Identifier	curAd		1309792	0					
ANR	1309802	Identifier	NULL		1309792	1					
ANR	1309803	ExpressionStatement	depth_remaining = MAX_CLASSAD_RECURSION	243:1:4831:4870	1309792	2	True				
ANR	1309804	AssignmentExpression	depth_remaining = MAX_CLASSAD_RECURSION		1309792	0		=			
ANR	1309805	Identifier	depth_remaining		1309792	0					
ANR	1309806	Identifier	MAX_CLASSAD_RECURSION		1309792	1					
ANR	1309807	ExpressionStatement	flattenAndInline = false	244:1:4873:4897	1309792	3	True				
ANR	1309808	AssignmentExpression	flattenAndInline = false		1309792	0		=			
ANR	1309809	Identifier	flattenAndInline		1309792	0					
ANR	1309810	Identifier	false		1309792	1					
ANR	1309811	ExpressionStatement	debug = false	245:1:4907:4920	1309792	4	True				
ANR	1309812	AssignmentExpression	debug = false		1309792	0		=			
ANR	1309813	Identifier	debug		1309792	0					
ANR	1309814	Identifier	false		1309792	1					
ANR	1309815	Identifier	EvalState :: EvalState		1309792	1					
ANR	1309816	ParameterList			1309792	2					
ANR	1309817	CFGEntryNode	ENTRY		1309792		True				
ANR	1309818	CFGExitNode	EXIT		1309792		True				
ANR	1309819	Symbol	depth_remaining		1309792						
ANR	1309820	Symbol	NULL		1309792						
ANR	1309821	Symbol	debug		1309792						
ANR	1309822	Symbol	false		1309792						
ANR	1309823	Symbol	MAX_CLASSAD_RECURSION		1309792						
ANR	1309824	Symbol	curAd		1309792						
ANR	1309825	Symbol	rootAd		1309792						
ANR	1309826	Symbol	flattenAndInline		1309792						
ANR	1309827	Function	EvalState :: ~EvalState	248:0:4925:5216							
ANR	1309828	FunctionDef	EvalState :: ~EvalState ()		1309827	0					
ANR	1309829	CompoundStatement		250:0:4951:5216	1309827	0					
ANR	1309830	ReturnStatement	return ;	261:1:5208:5214	1309827	0	True				
ANR	1309831	Identifier	EvalState :: ~EvalState		1309827	1					
ANR	1309832	ParameterList			1309827	2					
ANR	1309833	CFGEntryNode	ENTRY		1309827		True				
ANR	1309834	CFGExitNode	EXIT		1309827		True				
ANR	1309835	Function	EvalState :: SetScopes	264:0:5219:5312							
ANR	1309836	FunctionDef	EvalState :: SetScopes (const ClassAd * curScope)		1309835	0					
ANR	1309837	CompoundStatement		266:0:5273:5312	1309835	0					
ANR	1309838	ExpressionStatement	curAd = curScope	267:1:5276:5292	1309835	0	True				
ANR	1309839	AssignmentExpression	curAd = curScope		1309835	0		=			
ANR	1309840	Identifier	curAd		1309835	0					
ANR	1309841	Identifier	curScope		1309835	1					
ANR	1309842	ExpressionStatement	SetRootScope ( )	268:1:5295:5310	1309835	1	True				
ANR	1309843	CallExpression	SetRootScope ( )		1309835	0					
ANR	1309844	Callee	SetRootScope		1309835	0					
ANR	1309845	Identifier	SetRootScope		1309835	0					
ANR	1309846	ArgumentList			1309835	1					
ANR	1309847	ReturnType	void		1309835	1					
ANR	1309848	Identifier	EvalState :: SetScopes		1309835	2					
ANR	1309849	ParameterList	const ClassAd * curScope		1309835	3					
ANR	1309850	Parameter	const ClassAd * curScope	265:11:5247:5269	1309835	0	True				
ANR	1309851	ParameterType	const ClassAd *		1309835	0					
ANR	1309852	Identifier	curScope		1309835	1					
ANR	1309853	CFGEntryNode	ENTRY		1309835		True				
ANR	1309854	CFGExitNode	EXIT		1309835		True				
ANR	1309855	Symbol	curScope		1309835						
ANR	1309856	Symbol	curAd		1309835						
ANR	1309857	Function	EvalState :: SetRootScope	272:0:5316:5808							
ANR	1309858	FunctionDef	EvalState :: SetRootScope ()		1309857	0					
ANR	1309859	CompoundStatement		274:0:5349:5808	1309857	0					
ANR	1309860	IdentifierDeclStatement	const ClassAd * prevScope = curAd ;	275:1:5352:5384	1309857	0	True				
ANR	1309861	IdentifierDecl	* prevScope = curAd		1309857	0					
ANR	1309862	IdentifierDeclType	const ClassAd *		1309857	0					
ANR	1309863	Identifier	prevScope		1309857	1					
ANR	1309864	AssignmentExpression	* prevScope = curAd		1309857	2		=			
ANR	1309865	Identifier	curAd		1309857	0					
ANR	1309866	Identifier	curAd		1309857	1					
ANR	1309867	IfStatement	if ( curAd == NULL )		1309857	1					
ANR	1309868	Condition	curAd == NULL	276:8:5394:5406	1309857	0	True				
ANR	1309869	EqualityExpression	curAd == NULL		1309857	0		==			
ANR	1309870	Identifier	curAd		1309857	0					
ANR	1309871	Identifier	NULL		1309857	1					
ANR	1309872	CompoundStatement		3:23:59:59	1309857	1					
ANR	1309873	ExpressionStatement	rootAd = NULL	277:8:5419:5432	1309857	0	True				
ANR	1309874	AssignmentExpression	rootAd = NULL		1309857	0		=			
ANR	1309875	Identifier	rootAd		1309857	0					
ANR	1309876	Identifier	NULL		1309857	1					
ANR	1309877	ElseStatement	else		1309857	0					
ANR	1309878	CompoundStatement		6:8:105:149	1309857	0					
ANR	1309879	IdentifierDeclStatement	const ClassAd * curScope = curAd -> parentScope ;	279:8:5455:5499	1309857	0	True				
ANR	1309880	IdentifierDecl	* curScope = curAd -> parentScope		1309857	0					
ANR	1309881	IdentifierDeclType	const ClassAd *		1309857	0					
ANR	1309882	Identifier	curScope		1309857	1					
ANR	1309883	AssignmentExpression	* curScope = curAd -> parentScope		1309857	2		=			
ANR	1309884	Identifier	curScope		1309857	0					
ANR	1309885	PtrMemberAccess	curAd -> parentScope		1309857	1					
ANR	1309886	Identifier	curAd		1309857	0					
ANR	1309887	Identifier	parentScope		1309857	1					
ANR	1309888	WhileStatement	while ( curScope )		1309857	1					
ANR	1309889	Condition	curScope	281:15:5525:5532	1309857	0	True				
ANR	1309890	Identifier	curScope		1309857	0					
ANR	1309891	CompoundStatement		8:26:186:186	1309857	1					
ANR	1309892	IfStatement	if ( curScope == curAd )		1309857	0					
ANR	1309893	Condition	curScope == curAd	282:16:5554:5570	1309857	0	True				
ANR	1309894	EqualityExpression	curScope == curAd		1309857	0		==			
ANR	1309895	Identifier	curScope		1309857	0					
ANR	1309896	Identifier	curAd		1309857	1					
ANR	1309897	CompoundStatement		9:36:224:224	1309857	1					
ANR	1309898	ReturnStatement	return ;	283:16:5616:5622	1309857	0	True				
ANR	1309899	ExpressionStatement	prevScope = curScope	285:12:5674:5694	1309857	1	True				
ANR	1309900	AssignmentExpression	prevScope = curScope		1309857	0		=			
ANR	1309901	Identifier	prevScope		1309857	0					
ANR	1309902	Identifier	curScope		1309857	1					
ANR	1309903	ExpressionStatement	curScope = curScope -> parentScope	286:12:5708:5741	1309857	2	True				
ANR	1309904	AssignmentExpression	curScope = curScope -> parentScope		1309857	0		=			
ANR	1309905	Identifier	curScope		1309857	0					
ANR	1309906	PtrMemberAccess	curScope -> parentScope		1309857	1					
ANR	1309907	Identifier	curScope		1309857	0					
ANR	1309908	Identifier	parentScope		1309857	1					
ANR	1309909	ExpressionStatement	rootAd = prevScope	289:8:5770:5788	1309857	2	True				
ANR	1309910	AssignmentExpression	rootAd = prevScope		1309857	0		=			
ANR	1309911	Identifier	rootAd		1309857	0					
ANR	1309912	Identifier	prevScope		1309857	1					
ANR	1309913	ReturnStatement	return ;	291:4:5800:5806	1309857	2	True				
ANR	1309914	ReturnType	void		1309857	1					
ANR	1309915	Identifier	EvalState :: SetRootScope		1309857	2					
ANR	1309916	ParameterList			1309857	3					
ANR	1309917	CFGEntryNode	ENTRY		1309857		True				
ANR	1309918	CFGExitNode	EXIT		1309857		True				
ANR	1309919	Symbol	curScope		1309857						
ANR	1309920	Symbol	NULL		1309857						
ANR	1309921	Symbol	* curAd		1309857						
ANR	1309922	Symbol	curScope -> parentScope		1309857						
ANR	1309923	Symbol	prevScope		1309857						
ANR	1309924	Symbol	curAd		1309857						
ANR	1309925	Symbol	* curScope		1309857						
ANR	1309926	Symbol	curAd -> parentScope		1309857						
ANR	1309927	Symbol	rootAd		1309857						
ANR	1309928	Function	operator <<	294:0:5811:6033							
ANR	1309929	FunctionDef	"operator << (ostream & stream , const ExprTree & expr)"		1309928	0					
ANR	1309930	CompoundStatement		295:0:5870:6033	1309928	0					
ANR	1309931	IdentifierDeclStatement	PrettyPrint unparser ;	296:1:5873:5893	1309928	0	True				
ANR	1309932	IdentifierDecl	unparser		1309928	0					
ANR	1309933	IdentifierDeclType	PrettyPrint		1309928	0					
ANR	1309934	Identifier	unparser		1309928	1					
ANR	1309935	IdentifierDeclStatement	string string_representation ;	297:1:5896:5929	1309928	1	True				
ANR	1309936	IdentifierDecl	string_representation		1309928	0					
ANR	1309937	IdentifierDeclType	string		1309928	0					
ANR	1309938	Identifier	string_representation		1309928	1					
ANR	1309939	ExpressionStatement	"unparser . Unparse ( string_representation , & expr )"	299:1:5933:5979	1309928	2	True				
ANR	1309940	CallExpression	"unparser . Unparse ( string_representation , & expr )"		1309928	0					
ANR	1309941	Callee	unparser . Unparse		1309928	0					
ANR	1309942	MemberAccess	unparser . Unparse		1309928	0					
ANR	1309943	Identifier	unparser		1309928	0					
ANR	1309944	Identifier	Unparse		1309928	1					
ANR	1309945	ArgumentList	string_representation		1309928	1					
ANR	1309946	Argument	string_representation		1309928	0					
ANR	1309947	Identifier	string_representation		1309928	0					
ANR	1309948	Argument	& expr		1309928	1					
ANR	1309949	UnaryOperationExpression	& expr		1309928	0					
ANR	1309950	UnaryOperator	&		1309928	0					
ANR	1309951	Identifier	expr		1309928	1					
ANR	1309952	ExpressionStatement	stream << string_representation	300:1:5982:6013	1309928	3	True				
ANR	1309953	ShiftExpression	stream << string_representation		1309928	0		<<			
ANR	1309954	Identifier	stream		1309928	0					
ANR	1309955	Identifier	string_representation		1309928	1					
ANR	1309956	ReturnStatement	return stream ;	302:1:6018:6031	1309928	4	True				
ANR	1309957	Identifier	stream		1309928	0					
ANR	1309958	ReturnType	ostream &		1309928	1					
ANR	1309959	Identifier	operator <<		1309928	2					
ANR	1309960	ParameterList	"ostream & stream , const ExprTree & expr"		1309928	3					
ANR	1309961	Parameter	ostream & stream	294:20:5831:5845	1309928	0	True				
ANR	1309962	ParameterType	ostream &		1309928	0					
ANR	1309963	Identifier	stream		1309928	1					
ANR	1309964	Parameter	const ExprTree & expr	294:37:5848:5867	1309928	1	True				
ANR	1309965	ParameterType	const ExprTree &		1309928	0					
ANR	1309966	Identifier	expr		1309928	1					
ANR	1309967	CFGEntryNode	ENTRY		1309928		True				
ANR	1309968	CFGExitNode	EXIT		1309928		True				
ANR	1309969	Symbol	string_representation		1309928						
ANR	1309970	Symbol	stream		1309928						
ANR	1309971	Symbol	& expr		1309928						
ANR	1309972	Symbol	expr		1309928						
ANR	1309973	Symbol	unparser		1309928						
ANR	1309974	Function	operator ==	305:0:6036:6133							
ANR	1309975	FunctionDef	"operator == (const ExprTree & tree1 , const ExprTree & tree2)"		1309974	0					
ANR	1309976	CompoundStatement		306:0:6098:6133	1309974	0					
ANR	1309977	ReturnStatement	return tree1 . SameAs ( & tree2 ) ;	307:4:6104:6131	1309974	0	True				
ANR	1309978	CallExpression	tree1 . SameAs ( & tree2 )		1309974	0					
ANR	1309979	Callee	tree1 . SameAs		1309974	0					
ANR	1309980	MemberAccess	tree1 . SameAs		1309974	0					
ANR	1309981	Identifier	tree1		1309974	0					
ANR	1309982	Identifier	SameAs		1309974	1					
ANR	1309983	ArgumentList	& tree2		1309974	1					
ANR	1309984	Argument	& tree2		1309974	0					
ANR	1309985	UnaryOperationExpression	& tree2		1309974	0					
ANR	1309986	UnaryOperator	&		1309974	0					
ANR	1309987	Identifier	tree2		1309974	1					
ANR	1309988	ReturnType	bool		1309974	1					
ANR	1309989	Identifier	operator ==		1309974	2					
ANR	1309990	ParameterList	"const ExprTree & tree1 , const ExprTree & tree2"		1309974	3					
ANR	1309991	Parameter	const ExprTree & tree1	305:16:6052:6072	1309974	0	True				
ANR	1309992	ParameterType	const ExprTree &		1309974	0					
ANR	1309993	Identifier	tree1		1309974	1					
ANR	1309994	Parameter	const ExprTree & tree2	305:39:6075:6095	1309974	1	True				
ANR	1309995	ParameterType	const ExprTree &		1309974	0					
ANR	1309996	Identifier	tree2		1309974	1					
ANR	1309997	CFGEntryNode	ENTRY		1309974		True				
ANR	1309998	CFGExitNode	EXIT		1309974		True				
ANR	1309999	Symbol	& tree2		1309974						
ANR	1310000	Symbol	tree1 . SameAs		1309974						
ANR	1310001	Symbol	tree1		1309974						
ANR	1310002	Symbol	tree2		1309974						
