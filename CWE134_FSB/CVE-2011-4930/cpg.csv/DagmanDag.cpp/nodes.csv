command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	170714	File	data/converged/CVE-2011-4930_htcondor/DagmanDag.cpp								
ANR	170715	Function	DagmanDag :: DagmanDag	48:0:1347:4480							
ANR	170716	FunctionDef	DagmanDag :: DagmanDag (const char * fileName)		170715	0					
ANR	170717	CompoundStatement		49:0:1390:4480	170715	0					
ANR	170718	Statement	define	50:1:1393:1398	170715	0	True				
ANR	170719	Statement	TAB_SIZE	50:8:1400:1407	170715	1	True				
ANR	170720	Statement	10000	50:17:1409:1413	170715	2	True				
ANR	170721	IdentifierDeclStatement	char tab [ TAB_SIZE ] ;	52:1:1452:1470	170715	3	True				
ANR	170722	IdentifierDecl	tab [ TAB_SIZE ]		170715	0					
ANR	170723	IdentifierDeclType	char [ TAB_SIZE ]		170715	0					
ANR	170724	Identifier	tab		170715	1					
ANR	170725	Identifier	TAB_SIZE		170715	2					
ANR	170726	IdentifierDeclStatement	int node ;	53:1:1473:1481	170715	4	True				
ANR	170727	IdentifierDecl	node		170715	0					
ANR	170728	IdentifierDeclType	int		170715	0					
ANR	170729	Identifier	node		170715	1					
ANR	170730	IdentifierDeclStatement	ResizableArray < int > parents ;	55:1:1485:1512	170715	5	True				
ANR	170731	IdentifierDecl	parents		170715	0					
ANR	170732	IdentifierDeclType	ResizableArray < int >		170715	0					
ANR	170733	Identifier	parents		170715	1					
ANR	170734	IdentifierDeclStatement	ResizableArray < int > children ;	56:1:1515:1543	170715	6	True				
ANR	170735	IdentifierDecl	children		170715	0					
ANR	170736	IdentifierDeclType	ResizableArray < int >		170715	0					
ANR	170737	Identifier	children		170715	1					
ANR	170738	IdentifierDeclStatement	StreamTokenizerWithCont * st ;	59:1:1584:1611	170715	7	True				
ANR	170739	IdentifierDecl	* st		170715	0					
ANR	170740	IdentifierDeclType	StreamTokenizerWithCont *		170715	0					
ANR	170741	Identifier	st		170715	1					
ANR	170742	ExpressionStatement	st = new StreamTokenizerWithCont ( fileName )	60:1:1614:1656	170715	8	True				
ANR	170743	AssignmentExpression	st = new StreamTokenizerWithCont ( fileName )		170715	0		=			
ANR	170744	Identifier	st		170715	0					
ANR	170745	Identifier	fileName		170715	1					
ANR	170746	IfStatement	if ( NULL == st )		170715	9					
ANR	170747	Condition	NULL == st	61:5:1663:1670	170715	0	True				
ANR	170748	EqualityExpression	NULL == st		170715	0		==			
ANR	170749	Identifier	NULL		170715	0					
ANR	170750	Identifier	st		170715	1					
ANR	170751	ThrowStatement	"throw ""DagmanDag::DagmanDag, st is NULL"" ;"	62:2:1676:1716	170715	1	True				
ANR	170752	PrimaryExpression	"""DagmanDag::DagmanDag, st is NULL"""		170715	0					
ANR	170753	WhileStatement	while ( ! st -> isEOF ( ) )		170715	10					
ANR	170754	Condition	! st -> isEOF ( )	64:8:1727:1739	170715	0	True				
ANR	170755	UnaryOperationExpression	! st -> isEOF ( )		170715	0					
ANR	170756	UnaryOperator	!		170715	0					
ANR	170757	CallExpression	st -> isEOF ( )		170715	1					
ANR	170758	Callee	st -> isEOF		170715	0					
ANR	170759	PtrMemberAccess	st -> isEOF		170715	0					
ANR	170760	Identifier	st		170715	0					
ANR	170761	Identifier	isEOF		170715	1					
ANR	170762	ArgumentList			170715	1					
ANR	170763	CompoundStatement		16:24:352:352	170715	1					
ANR	170764	IfStatement	"if ( 0 == st -> readToken ( tab , TAB_SIZE ) )"		170715	0					
ANR	170765	Condition	"0 == st -> readToken ( tab , TAB_SIZE )"	67:6:1774:1803	170715	0	True				
ANR	170766	EqualityExpression	"0 == st -> readToken ( tab , TAB_SIZE )"		170715	0		==			
ANR	170767	PrimaryExpression	0		170715	0					
ANR	170768	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		170715	1					
ANR	170769	Callee	st -> readToken		170715	0					
ANR	170770	PtrMemberAccess	st -> readToken		170715	0					
ANR	170771	Identifier	st		170715	0					
ANR	170772	Identifier	readToken		170715	1					
ANR	170773	ArgumentList	tab		170715	1					
ANR	170774	Argument	tab		170715	0					
ANR	170775	Identifier	tab		170715	0					
ANR	170776	Argument	TAB_SIZE		170715	1					
ANR	170777	Identifier	TAB_SIZE		170715	0					
ANR	170778	CompoundStatement		19:39:416:416	170715	1					
ANR	170779	ExpressionStatement	st -> skipLine ( )	68:3:1812:1826	170715	0	True				
ANR	170780	CallExpression	st -> skipLine ( )		170715	0					
ANR	170781	Callee	st -> skipLine		170715	0					
ANR	170782	PtrMemberAccess	st -> skipLine		170715	0					
ANR	170783	Identifier	st		170715	0					
ANR	170784	Identifier	skipLine		170715	1					
ANR	170785	ArgumentList			170715	1					
ANR	170786	ExpressionStatement	st -> resetRecentLine ( )	69:3:1831:1852	170715	1	True				
ANR	170787	CallExpression	st -> resetRecentLine ( )		170715	0					
ANR	170788	Callee	st -> resetRecentLine		170715	0					
ANR	170789	PtrMemberAccess	st -> resetRecentLine		170715	0					
ANR	170790	Identifier	st		170715	0					
ANR	170791	Identifier	resetRecentLine		170715	1					
ANR	170792	ArgumentList			170715	1					
ANR	170793	ContinueStatement	continue ;	70:3:1857:1865	170715	2	True				
ANR	170794	ExpressionStatement		71:3:1870:1870	170715	1	True				
ANR	170795	IfStatement	"if ( 0 == stricmp ( tab , ""JOB"" ) )"		170715	2					
ANR	170796	Condition	"0 == stricmp ( tab , ""JOB"" )"	73:6:1879:1901	170715	0	True				
ANR	170797	EqualityExpression	"0 == stricmp ( tab , ""JOB"" )"		170715	0		==			
ANR	170798	PrimaryExpression	0		170715	0					
ANR	170799	CallExpression	"stricmp ( tab , ""JOB"" )"		170715	1					
ANR	170800	Callee	stricmp		170715	0					
ANR	170801	Identifier	stricmp		170715	0					
ANR	170802	ArgumentList	tab		170715	1					
ANR	170803	Argument	tab		170715	0					
ANR	170804	Identifier	tab		170715	0					
ANR	170805	Argument	"""JOB"""		170715	1					
ANR	170806	PrimaryExpression	"""JOB"""		170715	0					
ANR	170807	CompoundStatement		48:3:1199:1222	170715	1					
ANR	170808	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		170715	0					
ANR	170809	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	75:7:1968:1997	170715	0	True				
ANR	170810	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		170715	0		!=			
ANR	170811	PrimaryExpression	1		170715	0					
ANR	170812	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		170715	1					
ANR	170813	Callee	st -> readToken		170715	0					
ANR	170814	PtrMemberAccess	st -> readToken		170715	0					
ANR	170815	Identifier	st		170715	0					
ANR	170816	Identifier	readToken		170715	1					
ANR	170817	ArgumentList	tab		170715	1					
ANR	170818	Argument	tab		170715	0					
ANR	170819	Identifier	tab		170715	0					
ANR	170820	Argument	TAB_SIZE		170715	1					
ANR	170821	Identifier	TAB_SIZE		170715	0					
ANR	170822	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 1"" ;"	76:4:2005:2054	170715	1	True				
ANR	170823	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 1"""		170715	0					
ANR	170824	ExpressionStatement	strlwr ( tab )	79:3:2100:2111	170715	1	True				
ANR	170825	CallExpression	strlwr ( tab )		170715	0					
ANR	170826	Callee	strlwr		170715	0					
ANR	170827	Identifier	strlwr		170715	0					
ANR	170828	ArgumentList	tab		170715	1					
ANR	170829	Argument	tab		170715	0					
ANR	170830	Identifier	tab		170715	0					
ANR	170831	ExpressionStatement	"printf ( ""we have a job %s "" , tab )"	82:3:2132:2163	170715	2	True				
ANR	170832	CallExpression	"printf ( ""we have a job %s "" , tab )"		170715	0					
ANR	170833	Callee	printf		170715	0					
ANR	170834	Identifier	printf		170715	0					
ANR	170835	ArgumentList	"""we have a job %s """		170715	1					
ANR	170836	Argument	"""we have a job %s """		170715	0					
ANR	170837	PrimaryExpression	"""we have a job %s """		170715	0					
ANR	170838	Argument	tab		170715	1					
ANR	170839	Identifier	tab		170715	0					
ANR	170840	IfStatement	if ( - 1 != getNode ( tab ) )		170715	3					
ANR	170841	Condition	- 1 != getNode ( tab )	84:7:2179:2196	170715	0	True				
ANR	170842	EqualityExpression	- 1 != getNode ( tab )		170715	0		!=			
ANR	170843	UnaryOperationExpression	- 1		170715	0					
ANR	170844	UnaryOperator	-		170715	0					
ANR	170845	PrimaryExpression	1		170715	1					
ANR	170846	CallExpression	getNode ( tab )		170715	1					
ANR	170847	Callee	getNode		170715	0					
ANR	170848	Identifier	getNode		170715	0					
ANR	170849	ArgumentList	tab		170715	1					
ANR	170850	Argument	tab		170715	0					
ANR	170851	Identifier	tab		170715	0					
ANR	170852	CompoundStatement		36:28:809:809	170715	1					
ANR	170853	ExpressionStatement	"printf ( ""job %s defined twice\\n"" , tab )"	85:4:2206:2242	170715	0	True				
ANR	170854	CallExpression	"printf ( ""job %s defined twice\\n"" , tab )"		170715	0					
ANR	170855	Callee	printf		170715	0					
ANR	170856	Identifier	printf		170715	0					
ANR	170857	ArgumentList	"""job %s defined twice\\n"""		170715	1					
ANR	170858	Argument	"""job %s defined twice\\n"""		170715	0					
ANR	170859	PrimaryExpression	"""job %s defined twice\\n"""		170715	0					
ANR	170860	Argument	tab		170715	1					
ANR	170861	Identifier	tab		170715	0					
ANR	170862	ThrowStatement	"throw ""DagmanDag::DagmanDag, job defined twice"" ;"	86:4:2248:2295	170715	1	True				
ANR	170863	PrimaryExpression	"""DagmanDag::DagmanDag, job defined twice"""		170715	0					
ANR	170864	ExpressionStatement		87:4:2301:2301	170715	4	True				
ANR	170865	IdentifierDeclStatement	int node = addNode ( ) ;	88:3:2306:2326	170715	5	True				
ANR	170866	IdentifierDecl	node = addNode ( )		170715	0					
ANR	170867	IdentifierDeclType	int		170715	0					
ANR	170868	Identifier	node		170715	1					
ANR	170869	AssignmentExpression	node = addNode ( )		170715	2		=			
ANR	170870	Identifier	node		170715	0					
ANR	170871	CallExpression	addNode ( )		170715	1					
ANR	170872	Callee	addNode		170715	0					
ANR	170873	Identifier	addNode		170715	0					
ANR	170874	ArgumentList			170715	1					
ANR	170875	ExpressionStatement	"setLabelString ( node , tab )"	89:3:2381:2405	170715	6	True				
ANR	170876	CallExpression	"setLabelString ( node , tab )"		170715	0					
ANR	170877	Callee	setLabelString		170715	0					
ANR	170878	Identifier	setLabelString		170715	0					
ANR	170879	ArgumentList	node		170715	1					
ANR	170880	Argument	node		170715	0					
ANR	170881	Identifier	node		170715	0					
ANR	170882	Argument	tab		170715	1					
ANR	170883	Identifier	tab		170715	0					
ANR	170884	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		170715	7					
ANR	170885	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	91:7:2415:2444	170715	0	True				
ANR	170886	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		170715	0		!=			
ANR	170887	PrimaryExpression	1		170715	0					
ANR	170888	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		170715	1					
ANR	170889	Callee	st -> readToken		170715	0					
ANR	170890	PtrMemberAccess	st -> readToken		170715	0					
ANR	170891	Identifier	st		170715	0					
ANR	170892	Identifier	readToken		170715	1					
ANR	170893	ArgumentList	tab		170715	1					
ANR	170894	Argument	tab		170715	0					
ANR	170895	Identifier	tab		170715	0					
ANR	170896	Argument	TAB_SIZE		170715	1					
ANR	170897	Identifier	TAB_SIZE		170715	0					
ANR	170898	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 2"" ;"	92:4:2452:2501	170715	1	True				
ANR	170899	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 2"""		170715	0					
ANR	170900	ExpressionStatement	"printf ( "" whose submit description file name is %s\\n"" , tab )"	94:3:2521:2578	170715	8	True				
ANR	170901	CallExpression	"printf ( "" whose submit description file name is %s\\n"" , tab )"		170715	0					
ANR	170902	Callee	printf		170715	0					
ANR	170903	Identifier	printf		170715	0					
ANR	170904	ArgumentList	""" whose submit description file name is %s\\n"""		170715	1					
ANR	170905	Argument	""" whose submit description file name is %s\\n"""		170715	0					
ANR	170906	PrimaryExpression	""" whose submit description file name is %s\\n"""		170715	0					
ANR	170907	Argument	tab		170715	1					
ANR	170908	Identifier	tab		170715	0					
ANR	170909	IdentifierDeclStatement	char * dup = strdup ( tab ) ;	96:3:2590:2613	170715	9	True				
ANR	170910	IdentifierDecl	* dup = strdup ( tab )		170715	0					
ANR	170911	IdentifierDeclType	char *		170715	0					
ANR	170912	Identifier	dup		170715	1					
ANR	170913	AssignmentExpression	* dup = strdup ( tab )		170715	2		=			
ANR	170914	Identifier	dup		170715	0					
ANR	170915	CallExpression	strdup ( tab )		170715	1					
ANR	170916	Callee	strdup		170715	0					
ANR	170917	Identifier	strdup		170715	0					
ANR	170918	ArgumentList	tab		170715	1					
ANR	170919	Argument	tab		170715	0					
ANR	170920	Identifier	tab		170715	0					
ANR	170921	IfStatement	if ( NULL == dup )		170715	10					
ANR	170922	Condition	NULL == dup	97:7:2622:2630	170715	0	True				
ANR	170923	EqualityExpression	NULL == dup		170715	0		==			
ANR	170924	Identifier	NULL		170715	0					
ANR	170925	Identifier	dup		170715	1					
ANR	170926	ThrowStatement	"throw ""DagmanDag::DagmanDag, dup is NULL"" ;"	98:4:2638:2679	170715	1	True				
ANR	170927	PrimaryExpression	"""DagmanDag::DagmanDag, dup is NULL"""		170715	0					
ANR	170928	ExpressionStatement	sdfName . append ( dup )	99:3:2684:2705	170715	11	True				
ANR	170929	CallExpression	sdfName . append ( dup )		170715	0					
ANR	170930	Callee	sdfName . append		170715	0					
ANR	170931	MemberAccess	sdfName . append		170715	0					
ANR	170932	Identifier	sdfName		170715	0					
ANR	170933	Identifier	append		170715	1					
ANR	170934	ArgumentList	dup		170715	1					
ANR	170935	Argument	dup		170715	0					
ANR	170936	Identifier	dup		170715	0					
ANR	170937	ElseStatement	else		170715	0					
ANR	170938	IfStatement	"if ( 0 == stricmp ( tab , ""PARENT"" ) )"		170715	0					
ANR	170939	Condition	"0 == stricmp ( tab , ""PARENT"" )"	102:11:2800:2825	170715	0	True				
ANR	170940	EqualityExpression	"0 == stricmp ( tab , ""PARENT"" )"		170715	0		==			
ANR	170941	PrimaryExpression	0		170715	0					
ANR	170942	CallExpression	"stricmp ( tab , ""PARENT"" )"		170715	1					
ANR	170943	Callee	stricmp		170715	0					
ANR	170944	Identifier	stricmp		170715	0					
ANR	170945	ArgumentList	tab		170715	1					
ANR	170946	Argument	tab		170715	0					
ANR	170947	Identifier	tab		170715	0					
ANR	170948	Argument	"""PARENT"""		170715	1					
ANR	170949	PrimaryExpression	"""PARENT"""		170715	0					
ANR	170950	CompoundStatement		54:40:1438:1438	170715	1					
ANR	170951	ExpressionStatement	"printf ( ""we have a list of parents\\n"" )"	106:3:2904:2941	170715	0	True				
ANR	170952	CallExpression	"printf ( ""we have a list of parents\\n"" )"		170715	0					
ANR	170953	Callee	printf		170715	0					
ANR	170954	Identifier	printf		170715	0					
ANR	170955	ArgumentList	"""we have a list of parents\\n"""		170715	1					
ANR	170956	Argument	"""we have a list of parents\\n"""		170715	0					
ANR	170957	PrimaryExpression	"""we have a list of parents\\n"""		170715	0					
ANR	170958	ExpressionStatement	parents . reset ( )	110:3:2977:2992	170715	1	True				
ANR	170959	CallExpression	parents . reset ( )		170715	0					
ANR	170960	Callee	parents . reset		170715	0					
ANR	170961	MemberAccess	parents . reset		170715	0					
ANR	170962	Identifier	parents		170715	0					
ANR	170963	Identifier	reset		170715	1					
ANR	170964	ArgumentList			170715	1					
ANR	170965	WhileStatement	while ( true )		170715	2					
ANR	170966	Condition	true	111:10:3004:3007	170715	0	True				
ANR	170967	Identifier	true		170715	0					
ANR	170968	CompoundStatement		63:17:1620:1620	170715	1					
ANR	170969	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		170715	0					
ANR	170970	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	112:8:3021:3050	170715	0	True				
ANR	170971	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		170715	0		!=			
ANR	170972	PrimaryExpression	1		170715	0					
ANR	170973	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		170715	1					
ANR	170974	Callee	st -> readToken		170715	0					
ANR	170975	PtrMemberAccess	st -> readToken		170715	0					
ANR	170976	Identifier	st		170715	0					
ANR	170977	Identifier	readToken		170715	1					
ANR	170978	ArgumentList	tab		170715	1					
ANR	170979	Argument	tab		170715	0					
ANR	170980	Identifier	tab		170715	0					
ANR	170981	Argument	TAB_SIZE		170715	1					
ANR	170982	Identifier	TAB_SIZE		170715	0					
ANR	170983	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 3"" ;"	113:5:3092:3141	170715	1	True				
ANR	170984	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 3"""		170715	0					
ANR	170985	IfStatement	"if ( 0 == stricmp ( tab , ""CHILD"" ) )"		170715	1					
ANR	170986	Condition	"0 == stricmp ( tab , ""CHILD"" )"	114:8:3151:3173	170715	0	True				
ANR	170987	EqualityExpression	"0 == stricmp ( tab , ""CHILD"" )"		170715	0		==			
ANR	170988	PrimaryExpression	0		170715	0					
ANR	170989	CallExpression	"stricmp ( tab , ""CHILD"" )"		170715	1					
ANR	170990	Callee	stricmp		170715	0					
ANR	170991	Identifier	stricmp		170715	0					
ANR	170992	ArgumentList	tab		170715	1					
ANR	170993	Argument	tab		170715	0					
ANR	170994	Identifier	tab		170715	0					
ANR	170995	Argument	"""CHILD"""		170715	1					
ANR	170996	PrimaryExpression	"""CHILD"""		170715	0					
ANR	170997	BreakStatement	break ;	115:5:3211:3216	170715	1	True				
ANR	170998	ExpressionStatement	strlwr ( tab )	118:4:3264:3275	170715	2	True				
ANR	170999	CallExpression	strlwr ( tab )		170715	0					
ANR	171000	Callee	strlwr		170715	0					
ANR	171001	Identifier	strlwr		170715	0					
ANR	171002	ArgumentList	tab		170715	1					
ANR	171003	Argument	tab		170715	0					
ANR	171004	Identifier	tab		170715	0					
ANR	171005	ExpressionStatement	"printf ( ""we have a parent %s\\n"" , tab )"	121:4:3297:3332	170715	3	True				
ANR	171006	CallExpression	"printf ( ""we have a parent %s\\n"" , tab )"		170715	0					
ANR	171007	Callee	printf		170715	0					
ANR	171008	Identifier	printf		170715	0					
ANR	171009	ArgumentList	"""we have a parent %s\\n"""		170715	1					
ANR	171010	Argument	"""we have a parent %s\\n"""		170715	0					
ANR	171011	PrimaryExpression	"""we have a parent %s\\n"""		170715	0					
ANR	171012	Argument	tab		170715	1					
ANR	171013	Identifier	tab		170715	0					
ANR	171014	ExpressionStatement	node = getNode ( tab )	123:4:3345:3364	170715	4	True				
ANR	171015	AssignmentExpression	node = getNode ( tab )		170715	0		=			
ANR	171016	Identifier	node		170715	0					
ANR	171017	CallExpression	getNode ( tab )		170715	1					
ANR	171018	Callee	getNode		170715	0					
ANR	171019	Identifier	getNode		170715	0					
ANR	171020	ArgumentList	tab		170715	1					
ANR	171021	Argument	tab		170715	0					
ANR	171022	Identifier	tab		170715	0					
ANR	171023	IfStatement	if ( - 1 == node )		170715	5					
ANR	171024	Condition	- 1 == node	124:8:3406:3415	170715	0	True				
ANR	171025	EqualityExpression	- 1 == node		170715	0		==			
ANR	171026	UnaryOperationExpression	- 1		170715	0					
ANR	171027	UnaryOperator	-		170715	0					
ANR	171028	PrimaryExpression	1		170715	1					
ANR	171029	Identifier	node		170715	1					
ANR	171030	ThrowStatement	"throw ""DagmanDag::DagmanDag, node is -1, 1"" ;"	125:5:3424:3467	170715	1	True				
ANR	171031	PrimaryExpression	"""DagmanDag::DagmanDag, node is -1, 1"""		170715	0					
ANR	171032	ExpressionStatement	parents . append ( node )	126:4:3473:3493	170715	6	True				
ANR	171033	CallExpression	parents . append ( node )		170715	0					
ANR	171034	Callee	parents . append		170715	0					
ANR	171035	MemberAccess	parents . append		170715	0					
ANR	171036	Identifier	parents		170715	0					
ANR	171037	Identifier	append		170715	1					
ANR	171038	ArgumentList	node		170715	1					
ANR	171039	Argument	node		170715	0					
ANR	171040	Identifier	node		170715	0					
ANR	171041	ExpressionStatement		127:4:3499:3499	170715	3	True				
ANR	171042	ExpressionStatement	"printf ( ""we have a list of children\\n"" )"	130:3:3520:3558	170715	4	True				
ANR	171043	CallExpression	"printf ( ""we have a list of children\\n"" )"		170715	0					
ANR	171044	Callee	printf		170715	0					
ANR	171045	Identifier	printf		170715	0					
ANR	171046	ArgumentList	"""we have a list of children\\n"""		170715	1					
ANR	171047	Argument	"""we have a list of children\\n"""		170715	0					
ANR	171048	PrimaryExpression	"""we have a list of children\\n"""		170715	0					
ANR	171049	ExpressionStatement	children . reset ( )	134:3:3595:3611	170715	5	True				
ANR	171050	CallExpression	children . reset ( )		170715	0					
ANR	171051	Callee	children . reset		170715	0					
ANR	171052	MemberAccess	children . reset		170715	0					
ANR	171053	Identifier	children		170715	0					
ANR	171054	Identifier	reset		170715	1					
ANR	171055	ArgumentList			170715	1					
ANR	171056	WhileStatement	while ( true )		170715	6					
ANR	171057	Condition	true	135:10:3623:3626	170715	0	True				
ANR	171058	Identifier	true		170715	0					
ANR	171059	CompoundStatement		87:17:2239:2239	170715	1					
ANR	171060	IfStatement	"if ( 0 == st -> readToken ( tab , TAB_SIZE ) )"		170715	0					
ANR	171061	Condition	"0 == st -> readToken ( tab , TAB_SIZE )"	136:8:3640:3669	170715	0	True				
ANR	171062	EqualityExpression	"0 == st -> readToken ( tab , TAB_SIZE )"		170715	0		==			
ANR	171063	PrimaryExpression	0		170715	0					
ANR	171064	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		170715	1					
ANR	171065	Callee	st -> readToken		170715	0					
ANR	171066	PtrMemberAccess	st -> readToken		170715	0					
ANR	171067	Identifier	st		170715	0					
ANR	171068	Identifier	readToken		170715	1					
ANR	171069	ArgumentList	tab		170715	1					
ANR	171070	Argument	tab		170715	0					
ANR	171071	Identifier	tab		170715	0					
ANR	171072	Argument	TAB_SIZE		170715	1					
ANR	171073	Identifier	TAB_SIZE		170715	0					
ANR	171074	CompoundStatement		88:41:2282:2282	170715	1					
ANR	171075	BreakStatement	break ;	138:5:3715:3720	170715	0	True				
ANR	171076	ExpressionStatement		139:5:3727:3727	170715	1	True				
ANR	171077	ExpressionStatement	strlwr ( tab )	142:4:3775:3786	170715	2	True				
ANR	171078	CallExpression	strlwr ( tab )		170715	0					
ANR	171079	Callee	strlwr		170715	0					
ANR	171080	Identifier	strlwr		170715	0					
ANR	171081	ArgumentList	tab		170715	1					
ANR	171082	Argument	tab		170715	0					
ANR	171083	Identifier	tab		170715	0					
ANR	171084	ExpressionStatement	"printf ( ""we have a child %s\\n"" , tab )"	145:4:3808:3842	170715	3	True				
ANR	171085	CallExpression	"printf ( ""we have a child %s\\n"" , tab )"		170715	0					
ANR	171086	Callee	printf		170715	0					
ANR	171087	Identifier	printf		170715	0					
ANR	171088	ArgumentList	"""we have a child %s\\n"""		170715	1					
ANR	171089	Argument	"""we have a child %s\\n"""		170715	0					
ANR	171090	PrimaryExpression	"""we have a child %s\\n"""		170715	0					
ANR	171091	Argument	tab		170715	1					
ANR	171092	Identifier	tab		170715	0					
ANR	171093	ExpressionStatement	node = getNode ( tab )	147:4:3855:3874	170715	4	True				
ANR	171094	AssignmentExpression	node = getNode ( tab )		170715	0		=			
ANR	171095	Identifier	node		170715	0					
ANR	171096	CallExpression	getNode ( tab )		170715	1					
ANR	171097	Callee	getNode		170715	0					
ANR	171098	Identifier	getNode		170715	0					
ANR	171099	ArgumentList	tab		170715	1					
ANR	171100	Argument	tab		170715	0					
ANR	171101	Identifier	tab		170715	0					
ANR	171102	IfStatement	if ( - 1 == node )		170715	5					
ANR	171103	Condition	- 1 == node	148:8:3884:3893	170715	0	True				
ANR	171104	EqualityExpression	- 1 == node		170715	0		==			
ANR	171105	UnaryOperationExpression	- 1		170715	0					
ANR	171106	UnaryOperator	-		170715	0					
ANR	171107	PrimaryExpression	1		170715	1					
ANR	171108	Identifier	node		170715	1					
ANR	171109	ThrowStatement	"throw ""DagmanDag::DagmanDag, node is -1, 2"" ;"	149:5:3903:3946	170715	1	True				
ANR	171110	PrimaryExpression	"""DagmanDag::DagmanDag, node is -1, 2"""		170715	0					
ANR	171111	ExpressionStatement	children . append ( node )	150:4:3952:3973	170715	6	True				
ANR	171112	CallExpression	children . append ( node )		170715	0					
ANR	171113	Callee	children . append		170715	0					
ANR	171114	MemberAccess	children . append		170715	0					
ANR	171115	Identifier	children		170715	0					
ANR	171116	Identifier	append		170715	1					
ANR	171117	ArgumentList	node		170715	1					
ANR	171118	Argument	node		170715	0					
ANR	171119	Identifier	node		170715	0					
ANR	171120	ExpressionStatement		151:4:3979:3979	170715	7	True				
ANR	171121	ForStatement	for ( int i = 0 ; i < parents . getNumElem ( ) ; i ++ )		170715	8					
ANR	171122	ForInit	int i = 0 ;	154:8:4040:4047	170715	0	True				
ANR	171123	IdentifierDeclStatement	int i = 0 ;		170715	0					
ANR	171124	IdentifierDecl	i = 0		170715	0					
ANR	171125	IdentifierDeclType	int		170715	0					
ANR	171126	Identifier	i		170715	1					
ANR	171127	AssignmentExpression	i = 0		170715	2		=			
ANR	171128	Identifier	i		170715	0					
ANR	171129	PrimaryExpression	0		170715	1					
ANR	171130	Condition	i < parents . getNumElem ( )	154:17:4049:4070	170715	1	True				
ANR	171131	RelationalExpression	i < parents . getNumElem ( )		170715	0		<			
ANR	171132	Identifier	i		170715	0					
ANR	171133	CallExpression	parents . getNumElem ( )		170715	1					
ANR	171134	Callee	parents . getNumElem		170715	0					
ANR	171135	MemberAccess	parents . getNumElem		170715	0					
ANR	171136	Identifier	parents		170715	0					
ANR	171137	Identifier	getNumElem		170715	1					
ANR	171138	ArgumentList			170715	1					
ANR	171139	PostIncDecOperationExpression	i ++	154:41:4073:4075	170715	2	True				
ANR	171140	Identifier	i		170715	0					
ANR	171141	IncDec	++		170715	1					
ANR	171142	CompoundStatement		107:4:2694:2720	170715	3					
ANR	171143	IdentifierDeclStatement	int u = parents . getElem ( i ) ;	155:4:4085:4111	170715	0	True				
ANR	171144	IdentifierDecl	u = parents . getElem ( i )		170715	0					
ANR	171145	IdentifierDeclType	int		170715	0					
ANR	171146	Identifier	u		170715	1					
ANR	171147	AssignmentExpression	u = parents . getElem ( i )		170715	2		=			
ANR	171148	Identifier	u		170715	0					
ANR	171149	CallExpression	parents . getElem ( i )		170715	1					
ANR	171150	Callee	parents . getElem		170715	0					
ANR	171151	MemberAccess	parents . getElem		170715	0					
ANR	171152	Identifier	parents		170715	0					
ANR	171153	Identifier	getElem		170715	1					
ANR	171154	ArgumentList	i		170715	1					
ANR	171155	Argument	i		170715	0					
ANR	171156	Identifier	i		170715	0					
ANR	171157	ForStatement	for ( int j = 0 ; j < children . getNumElem ( ) ; j ++ )		170715	1					
ANR	171158	ForInit	int j = 0 ;	156:9:4122:4129	170715	0	True				
ANR	171159	IdentifierDeclStatement	int j = 0 ;		170715	0					
ANR	171160	IdentifierDecl	j = 0		170715	0					
ANR	171161	IdentifierDeclType	int		170715	0					
ANR	171162	Identifier	j		170715	1					
ANR	171163	AssignmentExpression	j = 0		170715	2		=			
ANR	171164	Identifier	j		170715	0					
ANR	171165	PrimaryExpression	0		170715	1					
ANR	171166	Condition	j < children . getNumElem ( )	156:18:4131:4153	170715	1	True				
ANR	171167	RelationalExpression	j < children . getNumElem ( )		170715	0		<			
ANR	171168	Identifier	j		170715	0					
ANR	171169	CallExpression	children . getNumElem ( )		170715	1					
ANR	171170	Callee	children . getNumElem		170715	0					
ANR	171171	MemberAccess	children . getNumElem		170715	0					
ANR	171172	Identifier	children		170715	0					
ANR	171173	Identifier	getNumElem		170715	1					
ANR	171174	ArgumentList			170715	1					
ANR	171175	PostIncDecOperationExpression	j ++	156:43:4156:4158	170715	2	True				
ANR	171176	Identifier	j		170715	0					
ANR	171177	IncDec	++		170715	1					
ANR	171178	CompoundStatement		109:5:2778:2805	170715	3					
ANR	171179	IdentifierDeclStatement	int v = children . getElem ( j ) ;	157:5:4169:4196	170715	0	True				
ANR	171180	IdentifierDecl	v = children . getElem ( j )		170715	0					
ANR	171181	IdentifierDeclType	int		170715	0					
ANR	171182	Identifier	v		170715	1					
ANR	171183	AssignmentExpression	v = children . getElem ( j )		170715	2		=			
ANR	171184	Identifier	v		170715	0					
ANR	171185	CallExpression	children . getElem ( j )		170715	1					
ANR	171186	Callee	children . getElem		170715	0					
ANR	171187	MemberAccess	children . getElem		170715	0					
ANR	171188	Identifier	children		170715	0					
ANR	171189	Identifier	getElem		170715	1					
ANR	171190	ArgumentList	j		170715	1					
ANR	171191	Argument	j		170715	0					
ANR	171192	Identifier	j		170715	0					
ANR	171193	ExpressionStatement	"addArc ( u , v )"	158:5:4203:4214	170715	1	True				
ANR	171194	CallExpression	"addArc ( u , v )"		170715	0					
ANR	171195	Callee	addArc		170715	0					
ANR	171196	Identifier	addArc		170715	0					
ANR	171197	ArgumentList	u		170715	1					
ANR	171198	Argument	u		170715	0					
ANR	171199	Identifier	u		170715	0					
ANR	171200	Argument	v		170715	1					
ANR	171201	Identifier	v		170715	0					
ANR	171202	ExpressionStatement		159:5:4221:4221	170715	2	True				
ANR	171203	ExpressionStatement		160:4:4227:4227	170715	9	True				
ANR	171204	ExpressionStatement		162:3:4233:4233	170715	3	True				
ANR	171205	ExpressionStatement	st -> skipLine ( )	164:2:4238:4252	170715	4	True				
ANR	171206	CallExpression	st -> skipLine ( )		170715	0					
ANR	171207	Callee	st -> skipLine		170715	0					
ANR	171208	PtrMemberAccess	st -> skipLine		170715	0					
ANR	171209	Identifier	st		170715	0					
ANR	171210	Identifier	skipLine		170715	1					
ANR	171211	ArgumentList			170715	1					
ANR	171212	ExpressionStatement	st -> resetRecentLine ( )	165:2:4256:4277	170715	5	True				
ANR	171213	CallExpression	st -> resetRecentLine ( )		170715	0					
ANR	171214	Callee	st -> resetRecentLine		170715	0					
ANR	171215	PtrMemberAccess	st -> resetRecentLine		170715	0					
ANR	171216	Identifier	st		170715	0					
ANR	171217	Identifier	resetRecentLine		170715	1					
ANR	171218	ArgumentList			170715	1					
ANR	171219	ExpressionStatement		166:2:4281:4281	170715	11	True				
ANR	171220	ExpressionStatement	st -> resetRecentLine ( )	167:1:4284:4305	170715	12	True				
ANR	171221	CallExpression	st -> resetRecentLine ( )		170715	0					
ANR	171222	Callee	st -> resetRecentLine		170715	0					
ANR	171223	PtrMemberAccess	st -> resetRecentLine		170715	0					
ANR	171224	Identifier	st		170715	0					
ANR	171225	Identifier	resetRecentLine		170715	1					
ANR	171226	ArgumentList			170715	1					
ANR	171227	Statement	delete	168:1:4347:4352	170715	13	True				
ANR	171228	ExpressionStatement	st	168:8:4354:4356	170715	14	True				
ANR	171229	Identifier	st		170715	0					
ANR	171230	IfStatement	if ( ! isDag ( ) )		170715	15					
ANR	171231	Condition	! isDag ( )	171:5:4426:4433	170715	0	True				
ANR	171232	UnaryOperationExpression	! isDag ( )		170715	0					
ANR	171233	UnaryOperator	!		170715	0					
ANR	171234	CallExpression	isDag ( )		170715	1					
ANR	171235	Callee	isDag		170715	0					
ANR	171236	Identifier	isDag		170715	0					
ANR	171237	ArgumentList			170715	1					
ANR	171238	ThrowStatement	"throw ""DagmanDag::DagmanDag, not a dag"" ;"	172:2:4439:4478	170715	1	True				
ANR	171239	PrimaryExpression	"""DagmanDag::DagmanDag, not a dag"""		170715	0					
ANR	171240	Identifier	DagmanDag :: DagmanDag		170715	1					
ANR	171241	ParameterList	const char * fileName		170715	2					
ANR	171242	Parameter	const char * fileName	48:21:1368:1387	170715	0	True				
ANR	171243	ParameterType	const char *		170715	0					
ANR	171244	Identifier	fileName		170715	1					
ANR	171245	CFGEntryNode	ENTRY		170715		True				
ANR	171246	CFGExitNode	EXIT		170715		True				
ANR	171247	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171248	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171249	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171250	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171251	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171252	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171253	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171254	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171255	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171256	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171257	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171258	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171259	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171260	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171261	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171262	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171263	CFGExceptionNode	EXCEPTION		170715		True				
ANR	171264	Symbol	fileName		170715						
ANR	171265	Symbol	* st		170715						
ANR	171266	Symbol	addNode		170715						
ANR	171267	Symbol	parents . getElem		170715						
ANR	171268	Symbol	parents . getNumElem		170715						
ANR	171269	Symbol	TAB_SIZE		170715						
ANR	171270	Symbol	tab		170715						
ANR	171271	Symbol	children . getNumElem		170715						
ANR	171272	Symbol	children		170715						
ANR	171273	Symbol	st		170715						
ANR	171274	Symbol	st -> isEOF		170715						
ANR	171275	Symbol	NULL		170715						
ANR	171276	Symbol	i		170715						
ANR	171277	Symbol	j		170715						
ANR	171278	Symbol	node		170715						
ANR	171279	Symbol	st -> readToken		170715						
ANR	171280	Symbol	sdfName		170715						
ANR	171281	Symbol	children . getElem		170715						
ANR	171282	Symbol	u		170715						
ANR	171283	Symbol	v		170715						
ANR	171284	Symbol	stricmp		170715						
ANR	171285	Symbol	true		170715						
ANR	171286	Symbol	getNode		170715						
ANR	171287	Symbol	strdup		170715						
ANR	171288	Symbol	isDag		170715						
ANR	171289	Symbol	dup		170715						
ANR	171290	Symbol	parents		170715						
ANR	171291	Function	DagmanDag :: printLabels	192:0:4832:5050							
ANR	171292	FunctionDef	"DagmanDag :: printLabels (FILE * stream , int node)"		171291	0					
ANR	171293	CompoundStatement		193:0:4890:5050	171291	0					
ANR	171294	ExpressionStatement	"Graph :: printLabels ( stream , node )"	194:1:4893:4924	171291	0	True				
ANR	171295	CallExpression	"Graph :: printLabels ( stream , node )"		171291	0					
ANR	171296	Callee	Graph :: printLabels		171291	0					
ANR	171297	Identifier	Graph :: printLabels		171291	0					
ANR	171298	ArgumentList	stream		171291	1					
ANR	171299	Argument	stream		171291	0					
ANR	171300	Identifier	stream		171291	0					
ANR	171301	Argument	node		171291	1					
ANR	171302	Identifier	node		171291	0					
ANR	171303	IfStatement	if ( NULL == sdfName . getElem ( node ) )		171291	1					
ANR	171304	Condition	NULL == sdfName . getElem ( node )	195:5:4931:4957	171291	0	True				
ANR	171305	EqualityExpression	NULL == sdfName . getElem ( node )		171291	0		==			
ANR	171306	Identifier	NULL		171291	0					
ANR	171307	CallExpression	sdfName . getElem ( node )		171291	1					
ANR	171308	Callee	sdfName . getElem		171291	0					
ANR	171309	MemberAccess	sdfName . getElem		171291	0					
ANR	171310	Identifier	sdfName		171291	0					
ANR	171311	Identifier	getElem		171291	1					
ANR	171312	ArgumentList	node		171291	1					
ANR	171313	Argument	node		171291	0					
ANR	171314	Identifier	node		171291	0					
ANR	171315	ExpressionStatement	"fprintf ( stream , ""sdf NULL "" )"	196:2:4963:4990	171291	1	True				
ANR	171316	CallExpression	"fprintf ( stream , ""sdf NULL "" )"		171291	0					
ANR	171317	Callee	fprintf		171291	0					
ANR	171318	Identifier	fprintf		171291	0					
ANR	171319	ArgumentList	stream		171291	1					
ANR	171320	Argument	stream		171291	0					
ANR	171321	Identifier	stream		171291	0					
ANR	171322	Argument	"""sdf NULL """		171291	1					
ANR	171323	PrimaryExpression	"""sdf NULL """		171291	0					
ANR	171324	ElseStatement	else		171291	0					
ANR	171325	ExpressionStatement	"fprintf ( stream , ""sdf %s "" , sdfName . getElem ( node ) )"	198:2:5000:5048	171291	0	True				
ANR	171326	CallExpression	"fprintf ( stream , ""sdf %s "" , sdfName . getElem ( node ) )"		171291	0					
ANR	171327	Callee	fprintf		171291	0					
ANR	171328	Identifier	fprintf		171291	0					
ANR	171329	ArgumentList	stream		171291	1					
ANR	171330	Argument	stream		171291	0					
ANR	171331	Identifier	stream		171291	0					
ANR	171332	Argument	"""sdf %s """		171291	1					
ANR	171333	PrimaryExpression	"""sdf %s """		171291	0					
ANR	171334	Argument	sdfName . getElem ( node )		171291	2					
ANR	171335	CallExpression	sdfName . getElem ( node )		171291	0					
ANR	171336	Callee	sdfName . getElem		171291	0					
ANR	171337	MemberAccess	sdfName . getElem		171291	0					
ANR	171338	Identifier	sdfName		171291	0					
ANR	171339	Identifier	getElem		171291	1					
ANR	171340	ArgumentList	node		171291	1					
ANR	171341	Argument	node		171291	0					
ANR	171342	Identifier	node		171291	0					
ANR	171343	ReturnType	void		171291	1					
ANR	171344	Identifier	DagmanDag :: printLabels		171291	2					
ANR	171345	ParameterList	"FILE * stream , int node"		171291	3					
ANR	171346	Parameter	FILE * stream	192:28:4860:4871	171291	0	True				
ANR	171347	ParameterType	FILE *		171291	0					
ANR	171348	Identifier	stream		171291	1					
ANR	171349	Parameter	int node	192:42:4874:4881	171291	1	True				
ANR	171350	ParameterType	int		171291	0					
ANR	171351	Identifier	node		171291	1					
ANR	171352	CFGEntryNode	ENTRY		171291		True				
ANR	171353	CFGExitNode	EXIT		171291		True				
ANR	171354	Symbol	node		171291						
ANR	171355	Symbol	sdfName		171291						
ANR	171356	Symbol	NULL		171291						
ANR	171357	Symbol	stream		171291						
ANR	171358	Symbol	sdfName . getElem		171291						
ANR	171359	Function	DagmanDag :: getSdfName	216:0:5262:5345							
ANR	171360	FunctionDef	DagmanDag :: getSdfName (int node)		171359	0					
ANR	171361	CompoundStatement		217:0:5312:5345	171359	0					
ANR	171362	ReturnStatement	return sdfName . getElem ( node ) ;	218:1:5315:5343	171359	0	True				
ANR	171363	CallExpression	sdfName . getElem ( node )		171359	0					
ANR	171364	Callee	sdfName . getElem		171359	0					
ANR	171365	MemberAccess	sdfName . getElem		171359	0					
ANR	171366	Identifier	sdfName		171359	0					
ANR	171367	Identifier	getElem		171359	1					
ANR	171368	ArgumentList	node		171359	1					
ANR	171369	Argument	node		171359	0					
ANR	171370	Identifier	node		171359	0					
ANR	171371	ReturnType	const char *		171359	1					
ANR	171372	Identifier	DagmanDag :: getSdfName		171359	2					
ANR	171373	ParameterList	int node		171359	3					
ANR	171374	Parameter	int node	216:34:5296:5303	171359	0	True				
ANR	171375	ParameterType	int		171359	0					
ANR	171376	Identifier	node		171359	1					
ANR	171377	CFGEntryNode	ENTRY		171359		True				
ANR	171378	CFGExitNode	EXIT		171359		True				
ANR	171379	Symbol	node		171359						
ANR	171380	Symbol	sdfName		171359						
ANR	171381	Symbol	sdfName . getElem		171359						
ANR	171382	Function	DagmanDag :: ~DagmanDag	235:0:5515:5729							
ANR	171383	FunctionDef	DagmanDag :: ~DagmanDag ()		171382	0					
ANR	171384	CompoundStatement		236:0:5543:5729	171382	0					
ANR	171385	ForStatement	for ( int i = 0 ; i < sdfName . getNumElem ( ) ; i ++ )		171382	0					
ANR	171386	ForInit	int i = 0 ;	237:6:5551:5558	171382	0	True				
ANR	171387	IdentifierDeclStatement	int i = 0 ;		171382	0					
ANR	171388	IdentifierDecl	i = 0		171382	0					
ANR	171389	IdentifierDeclType	int		171382	0					
ANR	171390	Identifier	i		171382	1					
ANR	171391	AssignmentExpression	i = 0		171382	2		=			
ANR	171392	Identifier	i		171382	0					
ANR	171393	PrimaryExpression	0		171382	1					
ANR	171394	Condition	i < sdfName . getNumElem ( )	237:15:5560:5581	171382	1	True				
ANR	171395	RelationalExpression	i < sdfName . getNumElem ( )		171382	0		<			
ANR	171396	Identifier	i		171382	0					
ANR	171397	CallExpression	sdfName . getNumElem ( )		171382	1					
ANR	171398	Callee	sdfName . getNumElem		171382	0					
ANR	171399	MemberAccess	sdfName . getNumElem		171382	0					
ANR	171400	Identifier	sdfName		171382	0					
ANR	171401	Identifier	getNumElem		171382	1					
ANR	171402	ArgumentList			171382	1					
ANR	171403	PostIncDecOperationExpression	i ++	237:39:5584:5586	171382	2	True				
ANR	171404	Identifier	i		171382	0					
ANR	171405	IncDec	++		171382	1					
ANR	171406	CompoundStatement		2:45:46:46	171382	3					
ANR	171407	IfStatement	if ( NULL != sdfName . getElem ( i ) )		171382	0					
ANR	171408	Condition	NULL != sdfName . getElem ( i )	238:6:5598:5623	171382	0	True				
ANR	171409	EqualityExpression	NULL != sdfName . getElem ( i )		171382	0		!=			
ANR	171410	Identifier	NULL		171382	0					
ANR	171411	CallExpression	sdfName . getElem ( i )		171382	1					
ANR	171412	Callee	sdfName . getElem		171382	0					
ANR	171413	MemberAccess	sdfName . getElem		171382	0					
ANR	171414	Identifier	sdfName		171382	0					
ANR	171415	Identifier	getElem		171382	1					
ANR	171416	ArgumentList	i		171382	1					
ANR	171417	Argument	i		171382	0					
ANR	171418	Identifier	i		171382	0					
ANR	171419	Statement	delete	239:3:5630:5635	171382	1	True				
ANR	171420	ExpressionStatement	sdfName . getElem ( i )	239:10:5637:5655	171382	1	True				
ANR	171421	CallExpression	sdfName . getElem ( i )		171382	0					
ANR	171422	Callee	sdfName . getElem		171382	0					
ANR	171423	MemberAccess	sdfName . getElem		171382	0					
ANR	171424	Identifier	sdfName		171382	0					
ANR	171425	Identifier	getElem		171382	1					
ANR	171426	ArgumentList	i		171382	1					
ANR	171427	Argument	i		171382	0					
ANR	171428	Identifier	i		171382	0					
ANR	171429	ExpressionStatement		240:2:5727:5727	171382	1	True				
ANR	171430	Identifier	DagmanDag :: ~DagmanDag		171382	1					
ANR	171431	ParameterList			171382	2					
ANR	171432	CFGEntryNode	ENTRY		171382		True				
ANR	171433	CFGExitNode	EXIT		171382		True				
ANR	171434	Symbol	sdfName		171382						
ANR	171435	Symbol	NULL		171382						
ANR	171436	Symbol	sdfName . getElem		171382						
ANR	171437	Symbol	i		171382						
ANR	171438	Symbol	sdfName . getNumElem		171382						
ANR	171439	Function	DagmanDag_test	257:0:5885:5965							
ANR	171440	FunctionDef	DagmanDag_test ()		171439	0					
ANR	171441	CompoundStatement		258:0:5911:5965	171439	0					
ANR	171442	IdentifierDeclStatement	"DagmanDag d ( ""rundg_test-2.dag"" ) ;"	259:1:5914:5945	171439	0	True				
ANR	171443	IdentifierDecl	"d ( ""rundg_test-2.dag"" )"		171439	0					
ANR	171444	IdentifierDeclType	DagmanDag		171439	0					
ANR	171445	Identifier	d		171439	1					
ANR	171446	PrimaryExpression	"""rundg_test-2.dag"""		171439	2					
ANR	171447	ExpressionStatement	d . printAsText ( )	260:1:5948:5963	171439	1	True				
ANR	171448	CallExpression	d . printAsText ( )		171439	0					
ANR	171449	Callee	d . printAsText		171439	0					
ANR	171450	MemberAccess	d . printAsText		171439	0					
ANR	171451	Identifier	d		171439	0					
ANR	171452	Identifier	printAsText		171439	1					
ANR	171453	ArgumentList			171439	1					
ANR	171454	ReturnType	void		171439	1					
ANR	171455	Identifier	DagmanDag_test		171439	2					
ANR	171456	ParameterList			171439	3					
ANR	171457	CFGEntryNode	ENTRY		171439		True				
ANR	171458	CFGExitNode	EXIT		171439		True				
ANR	171459	Symbol	d		171439						
