command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5084025	File	data/converged/CVE-2011-4930_htcondor/src_ec2_gahp_queryAPI-sim.cpp								
ANR	5084026	DeclStmt									
ANR	5084027	Decl							"std :: map < std :: string , std :: string >"	"std :: map < std :: string , std :: string >"	AttributeValueMap
ANR	5084028	DeclStmt									
ANR	5084029	Decl							"bool ( * ) ( AttributeValueMap & avm , std :: string & reply , unsigned requestNumber )"	"bool ( * ) ( AttributeValueMap & avm , std :: string & reply , unsigned requestNumber )"	ActionHandler
ANR	5084030	DeclStmt									
ANR	5084031	Decl							"std :: map < std :: string , ActionHandler >"	"std :: map < std :: string , ActionHandler >"	ActionToHandlerMap
ANR	5084032	Function	operator ( )	47:8:1105:1215							
ANR	5084033	FunctionDef	operator ( ) (const std :: string & s)		5084032	0					
ANR	5084034	CompoundStatement		47:57:1154:1215	5084032	0					
ANR	5084035	ReturnStatement	return __stl_hash_string ( s . c_str ( ) ) ;	48:12:1168:1205	5084032	0	True				
ANR	5084036	CallExpression	__stl_hash_string ( s . c_str ( ) )		5084032	0					
ANR	5084037	Callee	__stl_hash_string		5084032	0					
ANR	5084038	Identifier	__stl_hash_string		5084032	0					
ANR	5084039	ArgumentList	s . c_str ( )		5084032	1					
ANR	5084040	Argument	s . c_str ( )		5084032	0					
ANR	5084041	CallExpression	s . c_str ( )		5084032	0					
ANR	5084042	Callee	s . c_str		5084032	0					
ANR	5084043	MemberAccess	s . c_str		5084032	0					
ANR	5084044	Identifier	s		5084032	0					
ANR	5084045	Identifier	c_str		5084032	1					
ANR	5084046	ArgumentList			5084032	1					
ANR	5084047	ReturnType	size_t		5084032	1					
ANR	5084048	Identifier	operator ( )		5084032	2					
ANR	5084049	ParameterList	const std :: string & s		5084032	3					
ANR	5084050	Parameter	const std :: string & s	47:27:1124:1144	5084032	0	True				
ANR	5084051	ParameterType	const std :: string &		5084032	0					
ANR	5084052	Identifier	s		5084032	1					
ANR	5084053	CFGEntryNode	ENTRY		5084032		True				
ANR	5084054	CFGExitNode	EXIT		5084032		True				
ANR	5084055	Symbol	s		5084032						
ANR	5084056	Symbol	__stl_hash_string		5084032						
ANR	5084057	Symbol	s . c_str		5084032						
ANR	5084058	Function	xmlTag	53:0:1227:1421							
ANR	5084059	FunctionDef	"xmlTag (const char * tagName , const std :: string & tagValue)"		5084058	0					
ANR	5084060	CompoundStatement		53:73:1300:1421	5084058	0					
ANR	5084061	IdentifierDeclStatement	std :: ostringstream os ;	54:4:1306:1327	5084058	0	True				
ANR	5084062	IdentifierDecl	os		5084058	0					
ANR	5084063	IdentifierDeclType	std :: ostringstream		5084058	0					
ANR	5084064	Identifier	os		5084058	1					
ANR	5084065	ExpressionStatement	"os << ""<"" << tagName << "">"" << tagValue << ""</"" << tagName << "">"""	55:4:1333:1398	5084058	1	True				
ANR	5084066	ShiftExpression	"os << ""<"" << tagName << "">"" << tagValue << ""</"" << tagName << "">"""		5084058	0		<<			
ANR	5084067	Identifier	os		5084058	0					
ANR	5084068	ShiftExpression	"""<"" << tagName << "">"" << tagValue << ""</"" << tagName << "">"""		5084058	1		<<			
ANR	5084069	PrimaryExpression	"""<"""		5084058	0					
ANR	5084070	ShiftExpression	"tagName << "">"" << tagValue << ""</"" << tagName << "">"""		5084058	1		<<			
ANR	5084071	Identifier	tagName		5084058	0					
ANR	5084072	ShiftExpression	""">"" << tagValue << ""</"" << tagName << "">"""		5084058	1		<<			
ANR	5084073	PrimaryExpression	""">"""		5084058	0					
ANR	5084074	ShiftExpression	"tagValue << ""</"" << tagName << "">"""		5084058	1		<<			
ANR	5084075	Identifier	tagValue		5084058	0					
ANR	5084076	ShiftExpression	"""</"" << tagName << "">"""		5084058	1		<<			
ANR	5084077	PrimaryExpression	"""</"""		5084058	0					
ANR	5084078	ShiftExpression	"tagName << "">"""		5084058	1		<<			
ANR	5084079	Identifier	tagName		5084058	0					
ANR	5084080	PrimaryExpression	""">"""		5084058	1					
ANR	5084081	ReturnStatement	return os . str ( ) ;	56:4:1404:1419	5084058	2	True				
ANR	5084082	CallExpression	os . str ( )		5084058	0					
ANR	5084083	Callee	os . str		5084058	0					
ANR	5084084	MemberAccess	os . str		5084058	0					
ANR	5084085	Identifier	os		5084058	0					
ANR	5084086	Identifier	str		5084058	1					
ANR	5084087	ArgumentList			5084058	1					
ANR	5084088	ReturnType	std :: string		5084058	1					
ANR	5084089	Identifier	xmlTag		5084058	2					
ANR	5084090	ParameterList	"const char * tagName , const std :: string & tagValue"		5084058	3					
ANR	5084091	Parameter	const char * tagName	53:20:1247:1266	5084058	0	True				
ANR	5084092	ParameterType	const char *		5084058	0					
ANR	5084093	Identifier	tagName		5084058	1					
ANR	5084094	Parameter	const std :: string & tagValue	53:42:1269:1296	5084058	1	True				
ANR	5084095	ParameterType	const std :: string &		5084058	0					
ANR	5084096	Identifier	tagValue		5084058	1					
ANR	5084097	CFGEntryNode	ENTRY		5084058		True				
ANR	5084098	CFGExitNode	EXIT		5084058		True				
ANR	5084099	Symbol	os . str		5084058						
ANR	5084100	Symbol	os		5084058						
ANR	5084101	Symbol	tagValue		5084058						
ANR	5084102	Symbol	tagName		5084058						
ANR	5084103	ClassDef	Group_t	59:8:1432:1564							
ANR	5084104	DeclStmt									
ANR	5084105	Decl							std :: string	std :: string	groupID
ANR	5084106	Function	Group_t	62:4:1483:1495							
ANR	5084107	FunctionDef	Group_t ()		5084106	1					
ANR	5084108	CompoundStatement		62:14:1493:1495	5084106	0					
ANR	5084109	Identifier	Group_t		5084106	1					
ANR	5084110	ParameterList			5084106	2					
ANR	5084111	CFGEntryNode	ENTRY		5084106		True				
ANR	5084112	CFGExitNode	EXIT		5084106		True				
ANR	5084113	Function	Group_t	63:4:1501:1555							
ANR	5084114	FunctionDef	Group_t (const std :: string & gID)		5084113	2					
ANR	5084115	CompoundStatement		63:56:1553:1555	5084113	0					
ANR	5084116	Identifier	Group_t		5084113	1					
ANR	5084117	ParameterList	const std :: string & gID		5084113	2					
ANR	5084118	Parameter	const std :: string & gID	63:13:1510:1532	5084113	0	True				
ANR	5084119	ParameterType	const std :: string &		5084113	0					
ANR	5084120	Identifier	gID		5084113	1					
ANR	5084121	CFGEntryNode	ENTRY		5084113		True				
ANR	5084122	CFGExitNode	EXIT		5084113		True				
ANR	5084123	Symbol	gID		5084113						
ANR	5084124	DeclStmt									
ANR	5084125	Decl							Group_t	Group_t	Group
ANR	5084126	DeclStmt									
ANR	5084127	Decl							"ext :: hash_map < std :: string , Group >"	"ext :: hash_map < std :: string , Group >"	NameToGroupMap
ANR	5084128	ClassDef	Keypair_t	67:8:1635:1960							
ANR	5084129	DeclStmt									
ANR	5084130	Decl							std :: string	std :: string	keyName
ANR	5084131	DeclStmt									
ANR	5084132	Decl							std :: string	std :: string	fingerprint
ANR	5084133	DeclStmt									
ANR	5084134	Decl							std :: string	std :: string	privateKey
ANR	5084135	Function	Keypair_t	72:4:1745:1759							
ANR	5084136	FunctionDef	Keypair_t ()		5084135	3					
ANR	5084137	CompoundStatement		72:16:1757:1759	5084135	0					
ANR	5084138	Identifier	Keypair_t		5084135	1					
ANR	5084139	ParameterList			5084135	2					
ANR	5084140	CFGEntryNode	ENTRY		5084135		True				
ANR	5084141	CFGExitNode	EXIT		5084135		True				
ANR	5084142	Function	Keypair_t	73:4:1765:1949							
ANR	5084143	FunctionDef	"Keypair_t (const std :: string & kn , const std :: string & fp , const std :: string & pk)"		5084142	4					
ANR	5084144	CompoundStatement		76:51:1947:1949	5084142	0					
ANR	5084145	Identifier	Keypair_t		5084142	1					
ANR	5084146	ParameterList	"const std :: string & kn , const std :: string & fp , const std :: string & pk"		5084142	2					
ANR	5084147	Parameter	const std :: string & kn	73:15:1776:1797	5084142	0	True				
ANR	5084148	ParameterType	const std :: string &		5084142	0					
ANR	5084149	Identifier	kn		5084142	1					
ANR	5084150	Parameter	const std :: string & fp	74:15:1815:1836	5084142	1	True				
ANR	5084151	ParameterType	const std :: string &		5084142	0					
ANR	5084152	Identifier	fp		5084142	1					
ANR	5084153	Parameter	const std :: string & pk	75:15:1854:1875	5084142	2	True				
ANR	5084154	ParameterType	const std :: string &		5084142	0					
ANR	5084155	Identifier	pk		5084142	1					
ANR	5084156	CFGEntryNode	ENTRY		5084142		True				
ANR	5084157	CFGExitNode	EXIT		5084142		True				
ANR	5084158	Symbol	kn		5084142						
ANR	5084159	Symbol	fp		5084142						
ANR	5084160	Symbol	pk		5084142						
ANR	5084161	DeclStmt									
ANR	5084162	Decl							Keypair_t	Keypair_t	Keypair
ANR	5084163	DeclStmt									
ANR	5084164	Decl							"ext :: hash_map < std :: string , Keypair >"	"ext :: hash_map < std :: string , Keypair >"	NameToKeypairMap
ANR	5084165	Function	operator <<	80:0:2027:2306							
ANR	5084166	FunctionDef	"operator << (std :: ostream & os , const Keypair & kp)"		5084165	0					
ANR	5084167	CompoundStatement		80:69:2096:2306	5084165	0					
ANR	5084168	ExpressionStatement	"os << ""<item>"" << std :: endl"	81:4:2102:2129	5084165	0	True				
ANR	5084169	ShiftExpression	"os << ""<item>"" << std :: endl"		5084165	0		<<			
ANR	5084170	Identifier	os		5084165	0					
ANR	5084171	ShiftExpression	"""<item>"" << std :: endl"		5084165	1		<<			
ANR	5084172	PrimaryExpression	"""<item>"""		5084165	0					
ANR	5084173	Identifier	std :: endl		5084165	1					
ANR	5084174	ExpressionStatement	"os << xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"	82:4:2135:2185	5084165	1	True				
ANR	5084175	ShiftExpression	"os << xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"		5084165	0		<<			
ANR	5084176	Identifier	os		5084165	0					
ANR	5084177	ShiftExpression	"xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"		5084165	1		<<			
ANR	5084178	CallExpression	"xmlTag ( ""keyName"" , kp . keyName )"		5084165	0					
ANR	5084179	Callee	xmlTag		5084165	0					
ANR	5084180	Identifier	xmlTag		5084165	0					
ANR	5084181	ArgumentList	"""keyName"""		5084165	1					
ANR	5084182	Argument	"""keyName"""		5084165	0					
ANR	5084183	PrimaryExpression	"""keyName"""		5084165	0					
ANR	5084184	Argument	kp . keyName		5084165	1					
ANR	5084185	MemberAccess	kp . keyName		5084165	0					
ANR	5084186	Identifier	kp		5084165	0					
ANR	5084187	Identifier	keyName		5084165	1					
ANR	5084188	Identifier	std :: endl		5084165	1					
ANR	5084189	ExpressionStatement	"os << xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"	83:4:2191:2252	5084165	2	True				
ANR	5084190	ShiftExpression	"os << xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"		5084165	0		<<			
ANR	5084191	Identifier	os		5084165	0					
ANR	5084192	ShiftExpression	"xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"		5084165	1		<<			
ANR	5084193	CallExpression	"xmlTag ( ""keyFingerprint"" , kp . fingerprint )"		5084165	0					
ANR	5084194	Callee	xmlTag		5084165	0					
ANR	5084195	Identifier	xmlTag		5084165	0					
ANR	5084196	ArgumentList	"""keyFingerprint"""		5084165	1					
ANR	5084197	Argument	"""keyFingerprint"""		5084165	0					
ANR	5084198	PrimaryExpression	"""keyFingerprint"""		5084165	0					
ANR	5084199	Argument	kp . fingerprint		5084165	1					
ANR	5084200	MemberAccess	kp . fingerprint		5084165	0					
ANR	5084201	Identifier	kp		5084165	0					
ANR	5084202	Identifier	fingerprint		5084165	1					
ANR	5084203	Identifier	std :: endl		5084165	1					
ANR	5084204	ExpressionStatement	"os << ""</item"" << std :: endl"	84:4:2262:2289	5084165	3	True				
ANR	5084205	ShiftExpression	"os << ""</item"" << std :: endl"		5084165	0		<<			
ANR	5084206	Identifier	os		5084165	0					
ANR	5084207	ShiftExpression	"""</item"" << std :: endl"		5084165	1		<<			
ANR	5084208	PrimaryExpression	"""</item"""		5084165	0					
ANR	5084209	Identifier	std :: endl		5084165	1					
ANR	5084210	ReturnStatement	return os ;	85:4:2295:2304	5084165	4	True				
ANR	5084211	Identifier	os		5084165	0					
ANR	5084212	ReturnType	std :: ostream &		5084165	1					
ANR	5084213	Identifier	operator <<		5084165	2					
ANR	5084214	ParameterList	"std :: ostream & os , const Keypair & kp"		5084165	3					
ANR	5084215	Parameter	std :: ostream & os	80:29:2056:2072	5084165	0	True				
ANR	5084216	ParameterType	std :: ostream &		5084165	0					
ANR	5084217	Identifier	os		5084165	1					
ANR	5084218	Parameter	const Keypair & kp	80:48:2075:2092	5084165	1	True				
ANR	5084219	ParameterType	const Keypair &		5084165	0					
ANR	5084220	Identifier	kp		5084165	1					
ANR	5084221	CFGEntryNode	ENTRY		5084165		True				
ANR	5084222	CFGExitNode	EXIT		5084165		True				
ANR	5084223	Symbol	os		5084165						
ANR	5084224	Symbol	kp		5084165						
ANR	5084225	Symbol	kp . fingerprint		5084165						
ANR	5084226	Symbol	kp . keyName		5084165						
ANR	5084227	ClassDef	InstanceState	88:0:2309:5133							
ANR	5084228	ClassDef	InstanceStatus	90:8:2351:2571							
ANR	5084229	Function	InstanceState	100:8:2583:2625							
ANR	5084230	FunctionDef	InstanceState ()		5084229	1					
ANR	5084231	CompoundStatement		100:48:2623:2625	5084229	0					
ANR	5084232	Identifier	InstanceState		5084229	1					
ANR	5084233	ParameterList			5084229	2					
ANR	5084234	CFGEntryNode	ENTRY		5084229		True				
ANR	5084235	CFGExitNode	EXIT		5084229		True				
ANR	5084236	Function	InstanceState	101:8:2635:2697							
ANR	5084237	FunctionDef	InstanceState (InstanceStatus state)		5084236	2					
ANR	5084238	CompoundStatement		101:68:2695:2697	5084236	0					
ANR	5084239	Identifier	InstanceState		5084236	1					
ANR	5084240	ParameterList	InstanceStatus state		5084236	2					
ANR	5084241	Parameter	InstanceStatus state	101:23:2650:2669	5084236	0	True				
ANR	5084242	ParameterType	InstanceStatus		5084236	0					
ANR	5084243	Identifier	state		5084236	1					
ANR	5084244	CFGEntryNode	ENTRY		5084236		True				
ANR	5084245	CFGExitNode	EXIT		5084236		True				
ANR	5084246	Symbol	state		5084236						
ANR	5084247	Function	InstanceState	102:8:2707:3268							
ANR	5084248	FunctionDef	InstanceState (const std :: string & state)		5084247	3					
ANR	5084249	CompoundStatement		102:51:2750:3268	5084247	0					
ANR	5084250	IfStatement	"if ( state == ""pending"" )"		5084247	0					
ANR	5084251	Condition	"state == ""pending"""	103:16:2768:2785	5084247	0	True				
ANR	5084252	EqualityExpression	"state == ""pending"""		5084247	0		==			
ANR	5084253	Identifier	state		5084247	0					
ANR	5084254	PrimaryExpression	"""pending"""		5084247	1					
ANR	5084255	CompoundStatement		2:37:38:38	5084247	1					
ANR	5084256	ExpressionStatement	this -> statusCode = PENDING	103:39:2791:2817	5084247	0	True				
ANR	5084257	AssignmentExpression	this -> statusCode = PENDING		5084247	0		=			
ANR	5084258	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084259	Identifier	this		5084247	0					
ANR	5084260	Identifier	statusCode		5084247	1					
ANR	5084261	Identifier	PENDING		5084247	1					
ANR	5084262	ElseStatement	else		5084247	0					
ANR	5084263	IfStatement	"if ( state == ""running"" )"		5084247	0					
ANR	5084264	Condition	"state == ""running"""	104:21:2842:2859	5084247	0	True				
ANR	5084265	EqualityExpression	"state == ""running"""		5084247	0		==			
ANR	5084266	Identifier	state		5084247	0					
ANR	5084267	PrimaryExpression	"""running"""		5084247	1					
ANR	5084268	CompoundStatement		3:42:112:112	5084247	1					
ANR	5084269	ExpressionStatement	this -> statusCode = RUNNING	104:44:2865:2891	5084247	0	True				
ANR	5084270	AssignmentExpression	this -> statusCode = RUNNING		5084247	0		=			
ANR	5084271	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084272	Identifier	this		5084247	0					
ANR	5084273	Identifier	statusCode		5084247	1					
ANR	5084274	Identifier	RUNNING		5084247	1					
ANR	5084275	ElseStatement	else		5084247	0					
ANR	5084276	IfStatement	"if ( state == ""shutting-down"" )"		5084247	0					
ANR	5084277	Condition	"state == ""shutting-down"""	105:21:2916:2939	5084247	0	True				
ANR	5084278	EqualityExpression	"state == ""shutting-down"""		5084247	0		==			
ANR	5084279	Identifier	state		5084247	0					
ANR	5084280	PrimaryExpression	"""shutting-down"""		5084247	1					
ANR	5084281	CompoundStatement		4:48:192:192	5084247	1					
ANR	5084282	ExpressionStatement	this -> statusCode = SHUTTING_DOWN	105:50:2945:2977	5084247	0	True				
ANR	5084283	AssignmentExpression	this -> statusCode = SHUTTING_DOWN		5084247	0		=			
ANR	5084284	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084285	Identifier	this		5084247	0					
ANR	5084286	Identifier	statusCode		5084247	1					
ANR	5084287	Identifier	SHUTTING_DOWN		5084247	1					
ANR	5084288	ElseStatement	else		5084247	0					
ANR	5084289	IfStatement	"if ( state == ""terminated"" )"		5084247	0					
ANR	5084290	Condition	"state == ""terminated"""	106:21:3002:3022	5084247	0	True				
ANR	5084291	EqualityExpression	"state == ""terminated"""		5084247	0		==			
ANR	5084292	Identifier	state		5084247	0					
ANR	5084293	PrimaryExpression	"""terminated"""		5084247	1					
ANR	5084294	CompoundStatement		5:45:275:275	5084247	1					
ANR	5084295	ExpressionStatement	this -> statusCode = TERMINATED	106:47:3028:3057	5084247	0	True				
ANR	5084296	AssignmentExpression	this -> statusCode = TERMINATED		5084247	0		=			
ANR	5084297	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084298	Identifier	this		5084247	0					
ANR	5084299	Identifier	statusCode		5084247	1					
ANR	5084300	Identifier	TERMINATED		5084247	1					
ANR	5084301	ElseStatement	else		5084247	0					
ANR	5084302	IfStatement	"if ( state == ""stopping"" )"		5084247	0					
ANR	5084303	Condition	"state == ""stopping"""	107:21:3082:3100	5084247	0	True				
ANR	5084304	EqualityExpression	"state == ""stopping"""		5084247	0		==			
ANR	5084305	Identifier	state		5084247	0					
ANR	5084306	PrimaryExpression	"""stopping"""		5084247	1					
ANR	5084307	CompoundStatement		6:43:353:353	5084247	1					
ANR	5084308	ExpressionStatement	this -> statusCode = STOPPING	107:45:3106:3133	5084247	0	True				
ANR	5084309	AssignmentExpression	this -> statusCode = STOPPING		5084247	0		=			
ANR	5084310	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084311	Identifier	this		5084247	0					
ANR	5084312	Identifier	statusCode		5084247	1					
ANR	5084313	Identifier	STOPPING		5084247	1					
ANR	5084314	ElseStatement	else		5084247	0					
ANR	5084315	IfStatement	"if ( state == ""stopped"" )"		5084247	0					
ANR	5084316	Condition	"state == ""stopped"""	108:21:3158:3175	5084247	0	True				
ANR	5084317	EqualityExpression	"state == ""stopped"""		5084247	0		==			
ANR	5084318	Identifier	state		5084247	0					
ANR	5084319	PrimaryExpression	"""stopped"""		5084247	1					
ANR	5084320	CompoundStatement		7:42:428:428	5084247	1					
ANR	5084321	ExpressionStatement	this -> statusCode = STOPPED	108:44:3181:3207	5084247	0	True				
ANR	5084322	AssignmentExpression	this -> statusCode = STOPPED		5084247	0		=			
ANR	5084323	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084324	Identifier	this		5084247	0					
ANR	5084325	Identifier	statusCode		5084247	1					
ANR	5084326	Identifier	STOPPED		5084247	1					
ANR	5084327	ElseStatement	else		5084247	0					
ANR	5084328	CompoundStatement		8:17:477:477	5084247	0					
ANR	5084329	ExpressionStatement	this -> statusCode = INVALID	109:19:3230:3256	5084247	0	True				
ANR	5084330	AssignmentExpression	this -> statusCode = INVALID		5084247	0		=			
ANR	5084331	PtrMemberAccess	this -> statusCode		5084247	0					
ANR	5084332	Identifier	this		5084247	0					
ANR	5084333	Identifier	statusCode		5084247	1					
ANR	5084334	Identifier	INVALID		5084247	1					
ANR	5084335	Identifier	InstanceState		5084247	1					
ANR	5084336	ParameterList	const std :: string & state		5084247	2					
ANR	5084337	Parameter	const std :: string & state	102:23:2722:2746	5084247	0	True				
ANR	5084338	ParameterType	const std :: string &		5084247	0					
ANR	5084339	Identifier	state		5084247	1					
ANR	5084340	CFGEntryNode	ENTRY		5084247		True				
ANR	5084341	CFGExitNode	EXIT		5084247		True				
ANR	5084342	Symbol	* this		5084247						
ANR	5084343	Symbol	SHUTTING_DOWN		5084247						
ANR	5084344	Symbol	this -> statusCode		5084247						
ANR	5084345	Symbol	RUNNING		5084247						
ANR	5084346	Symbol	TERMINATED		5084247						
ANR	5084347	Symbol	STOPPED		5084247						
ANR	5084348	Symbol	this		5084247						
ANR	5084349	Symbol	state		5084247						
ANR	5084350	Symbol	PENDING		5084247						
ANR	5084351	Symbol	STOPPING		5084247						
ANR	5084352	Symbol	INVALID		5084247						
ANR	5084353	Function	progress	112:8:3287:4370							
ANR	5084354	FunctionDef	progress ()		5084353	4					
ANR	5084355	CompoundStatement		112:24:3303:4370	5084353	0					
ANR	5084356	IfStatement	if ( rand ( ) % 2 )		5084353	0					
ANR	5084357	Condition	rand ( ) % 2	113:16:3321:3330	5084353	0	True				
ANR	5084358	MultiplicativeExpression	rand ( ) % 2		5084353	0		%			
ANR	5084359	CallExpression	rand ( )		5084353	0					
ANR	5084360	Callee	rand		5084353	0					
ANR	5084361	Identifier	rand		5084353	0					
ANR	5084362	ArgumentList			5084353	1					
ANR	5084363	PrimaryExpression	2		5084353	1					
ANR	5084364	CompoundStatement		2:29:30:30	5084353	1					
ANR	5084365	SwitchStatement	switch ( this -> statusCode )		5084353	0					
ANR	5084366	Condition	this -> statusCode	114:24:3360:3375	5084353	0	True				
ANR	5084367	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084368	Identifier	this		5084353	0					
ANR	5084369	Identifier	statusCode		5084353	1					
ANR	5084370	CompoundStatement		3:43:75:75	5084353	1					
ANR	5084371	Label	case PENDING :	115:20:3401:3413	5084353	0	True				
ANR	5084372	Identifier	PENDING		5084353	0					
ANR	5084373	ExpressionStatement	this -> statusCode = RUNNING	116:24:3439:3465	5084353	1	True				
ANR	5084374	AssignmentExpression	this -> statusCode = RUNNING		5084353	0		=			
ANR	5084375	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084376	Identifier	this		5084353	0					
ANR	5084377	Identifier	statusCode		5084353	1					
ANR	5084378	Identifier	RUNNING		5084353	1					
ANR	5084379	BreakStatement	break ;	117:24:3491:3496	5084353	2	True				
ANR	5084380	Label	case RUNNING :	118:20:3518:3530	5084353	3	True				
ANR	5084381	Identifier	RUNNING		5084353	0					
ANR	5084382	ExpressionStatement	this -> statusCode = SHUTTING_DOWN	119:24:3556:3588	5084353	4	True				
ANR	5084383	AssignmentExpression	this -> statusCode = SHUTTING_DOWN		5084353	0		=			
ANR	5084384	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084385	Identifier	this		5084353	0					
ANR	5084386	Identifier	statusCode		5084353	1					
ANR	5084387	Identifier	SHUTTING_DOWN		5084353	1					
ANR	5084388	BreakStatement	break ;	120:24:3614:3619	5084353	5	True				
ANR	5084389	Label	case SHUTTING_DOWN :	121:20:3641:3659	5084353	6	True				
ANR	5084390	Identifier	SHUTTING_DOWN		5084353	0					
ANR	5084391	ExpressionStatement	this -> statusCode = TERMINATED	122:24:3685:3714	5084353	7	True				
ANR	5084392	AssignmentExpression	this -> statusCode = TERMINATED		5084353	0		=			
ANR	5084393	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084394	Identifier	this		5084353	0					
ANR	5084395	Identifier	statusCode		5084353	1					
ANR	5084396	Identifier	TERMINATED		5084353	1					
ANR	5084397	BreakStatement	break ;	123:24:3740:3745	5084353	8	True				
ANR	5084398	Label	case TERMINATED :	124:20:3767:3782	5084353	9	True				
ANR	5084399	Identifier	TERMINATED		5084353	0					
ANR	5084400	ExpressionStatement	this -> statusCode = TERMINATED	125:24:3808:3837	5084353	10	True				
ANR	5084401	AssignmentExpression	this -> statusCode = TERMINATED		5084353	0		=			
ANR	5084402	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084403	Identifier	this		5084353	0					
ANR	5084404	Identifier	statusCode		5084353	1					
ANR	5084405	Identifier	TERMINATED		5084353	1					
ANR	5084406	BreakStatement	break ;	126:24:3863:3868	5084353	11	True				
ANR	5084407	Label	case STOPPING :	127:20:3890:3903	5084353	12	True				
ANR	5084408	Identifier	STOPPING		5084353	0					
ANR	5084409	ExpressionStatement	this -> statusCode = STOPPED	128:24:3929:3955	5084353	13	True				
ANR	5084410	AssignmentExpression	this -> statusCode = STOPPED		5084353	0		=			
ANR	5084411	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084412	Identifier	this		5084353	0					
ANR	5084413	Identifier	statusCode		5084353	1					
ANR	5084414	Identifier	STOPPED		5084353	1					
ANR	5084415	BreakStatement	break ;	129:24:4001:4006	5084353	14	True				
ANR	5084416	Label	case STOPPED :	130:20:4028:4040	5084353	15	True				
ANR	5084417	Identifier	STOPPED		5084353	0					
ANR	5084418	ExpressionStatement	this -> statusCode = STOPPED	131:24:4066:4092	5084353	16	True				
ANR	5084419	AssignmentExpression	this -> statusCode = STOPPED		5084353	0		=			
ANR	5084420	PtrMemberAccess	this -> statusCode		5084353	0					
ANR	5084421	Identifier	this		5084353	0					
ANR	5084422	Identifier	statusCode		5084353	1					
ANR	5084423	Identifier	STOPPED		5084353	1					
ANR	5084424	BreakStatement	break ;	132:24:4138:4143	5084353	17	True				
ANR	5084425	Label	case INVALID :	133:20:4165:4177	5084353	18	True				
ANR	5084426	Identifier	INVALID		5084353	0					
ANR	5084427	ExpressionStatement	"fprintf ( stderr , ""Attempting to progress the INVALID state implies a bug.\\n"" )"	134:24:4203:4281	5084353	19	True				
ANR	5084428	CallExpression	"fprintf ( stderr , ""Attempting to progress the INVALID state implies a bug.\\n"" )"		5084353	0					
ANR	5084429	Callee	fprintf		5084353	0					
ANR	5084430	Identifier	fprintf		5084353	0					
ANR	5084431	ArgumentList	stderr		5084353	1					
ANR	5084432	Argument	stderr		5084353	0					
ANR	5084433	Identifier	stderr		5084353	0					
ANR	5084434	Argument	"""Attempting to progress the INVALID state implies a bug.\\n"""		5084353	1					
ANR	5084435	PrimaryExpression	"""Attempting to progress the INVALID state implies a bug.\\n"""		5084353	0					
ANR	5084436	BreakStatement	break ;	135:24:4307:4312	5084353	20	True				
ANR	5084437	ReturnType	void		5084353	1					
ANR	5084438	Identifier	progress		5084353	2					
ANR	5084439	ParameterList			5084353	3					
ANR	5084440	CFGEntryNode	ENTRY		5084353		True				
ANR	5084441	CFGExitNode	EXIT		5084353		True				
ANR	5084442	Symbol	rand		5084353						
ANR	5084443	Symbol	* this		5084353						
ANR	5084444	Symbol	SHUTTING_DOWN		5084353						
ANR	5084445	Symbol	this -> statusCode		5084353						
ANR	5084446	Symbol	RUNNING		5084353						
ANR	5084447	Symbol	TERMINATED		5084353						
ANR	5084448	Symbol	STOPPED		5084353						
ANR	5084449	Symbol	this		5084353						
ANR	5084450	Symbol	stderr		5084353						
ANR	5084451	Function	code	140:8:4389:4444							
ANR	5084452	FunctionDef	code ()		5084451	5					
ANR	5084453	CompoundStatement		140:36:4417:4444	5084451	0					
ANR	5084454	ReturnStatement	return this -> statusCode ;	140:1:4419:4442	5084451	0	True				
ANR	5084455	PtrMemberAccess	this -> statusCode		5084451	0					
ANR	5084456	Identifier	this		5084451	0					
ANR	5084457	Identifier	statusCode		5084451	1					
ANR	5084458	ReturnType	InstanceStatus		5084451	1					
ANR	5084459	Identifier	code		5084451	2					
ANR	5084460	ParameterList			5084451	3					
ANR	5084461	CFGEntryNode	ENTRY		5084451		True				
ANR	5084462	CFGExitNode	EXIT		5084451		True				
ANR	5084463	Symbol	* this		5084451						
ANR	5084464	Symbol	this -> statusCode		5084451						
ANR	5084465	Symbol	this		5084451						
ANR	5084466	Function	name	142:8:4463:5074							
ANR	5084467	FunctionDef	name ()		5084466	6					
ANR	5084468	CompoundStatement		142:33:4488:5074	5084466	0					
ANR	5084469	SwitchStatement	switch ( this -> statusCode )		5084466	0					
ANR	5084470	Condition	this -> statusCode	143:20:4510:4525	5084466	0	True				
ANR	5084471	PtrMemberAccess	this -> statusCode		5084466	0					
ANR	5084472	Identifier	this		5084466	0					
ANR	5084473	Identifier	statusCode		5084466	1					
ANR	5084474	CompoundStatement		2:39:40:40	5084466	1					
ANR	5084475	Label	case PENDING :	144:16:4547:4559	5084466	0	True				
ANR	5084476	Identifier	PENDING		5084466	0					
ANR	5084477	ReturnStatement	"return ""pending"" ;"	145:20:4581:4597	5084466	1	True				
ANR	5084478	PrimaryExpression	"""pending"""		5084466	0					
ANR	5084479	Label	case RUNNING :	146:16:4615:4627	5084466	2	True				
ANR	5084480	Identifier	RUNNING		5084466	0					
ANR	5084481	ReturnStatement	"return ""running"" ;"	147:20:4649:4665	5084466	3	True				
ANR	5084482	PrimaryExpression	"""running"""		5084466	0					
ANR	5084483	Label	case SHUTTING_DOWN :	148:16:4683:4701	5084466	4	True				
ANR	5084484	Identifier	SHUTTING_DOWN		5084466	0					
ANR	5084485	ReturnStatement	"return ""shutting-down"" ;"	149:20:4723:4745	5084466	5	True				
ANR	5084486	PrimaryExpression	"""shutting-down"""		5084466	0					
ANR	5084487	Label	case TERMINATED :	150:16:4763:4778	5084466	6	True				
ANR	5084488	Identifier	TERMINATED		5084466	0					
ANR	5084489	ReturnStatement	"return ""terminated"" ;"	151:20:4800:4819	5084466	7	True				
ANR	5084490	PrimaryExpression	"""terminated"""		5084466	0					
ANR	5084491	Label	case STOPPING :	152:16:4837:4850	5084466	8	True				
ANR	5084492	Identifier	STOPPING		5084466	0					
ANR	5084493	ReturnStatement	"return ""stopping"" ;"	153:20:4872:4889	5084466	9	True				
ANR	5084494	PrimaryExpression	"""stopping"""		5084466	0					
ANR	5084495	Label	case STOPPED :	154:16:4907:4919	5084466	10	True				
ANR	5084496	Identifier	STOPPED		5084466	0					
ANR	5084497	ReturnStatement	"return ""stopped"" ;"	155:20:4941:4957	5084466	11	True				
ANR	5084498	PrimaryExpression	"""stopped"""		5084466	0					
ANR	5084499	Label	case INVALID :	156:16:4975:4987	5084466	12	True				
ANR	5084500	Identifier	INVALID		5084466	0					
ANR	5084501	Label	default :	157:16:5005:5012	5084466	13	True				
ANR	5084502	Identifier	default		5084466	0					
ANR	5084503	ReturnStatement	"return ""invalid"" ;"	158:20:5034:5050	5084466	14	True				
ANR	5084504	PrimaryExpression	"""invalid"""		5084466	0					
ANR	5084505	ReturnType	std :: string		5084466	1					
ANR	5084506	Identifier	name		5084466	2					
ANR	5084507	ParameterList			5084466	3					
ANR	5084508	CFGEntryNode	ENTRY		5084466		True				
ANR	5084509	CFGExitNode	EXIT		5084466		True				
ANR	5084510	Symbol	* this		5084466						
ANR	5084511	Symbol	this -> statusCode		5084466						
ANR	5084512	Symbol	this		5084466						
ANR	5084513	DeclStmt									
ANR	5084514	Decl							InstanceStatus	InstanceStatus	statusCode
ANR	5084515	Function	operator <<	166:0:5137:5340							
ANR	5084516	FunctionDef	"operator << (std :: ostream & os , const InstanceState & is)"		5084515	0					
ANR	5084517	CompoundStatement		166:75:5212:5340	5084515	0					
ANR	5084518	ExpressionStatement	"os << ""<code>"" << is . code ( ) << ""</code>"" << std :: endl"	167:4:5218:5271	5084515	0	True				
ANR	5084519	ShiftExpression	"os << ""<code>"" << is . code ( ) << ""</code>"" << std :: endl"		5084515	0		<<			
ANR	5084520	Identifier	os		5084515	0					
ANR	5084521	ShiftExpression	"""<code>"" << is . code ( ) << ""</code>"" << std :: endl"		5084515	1		<<			
ANR	5084522	PrimaryExpression	"""<code>"""		5084515	0					
ANR	5084523	ShiftExpression	"is . code ( ) << ""</code>"" << std :: endl"		5084515	1		<<			
ANR	5084524	CallExpression	is . code ( )		5084515	0					
ANR	5084525	Callee	is . code		5084515	0					
ANR	5084526	MemberAccess	is . code		5084515	0					
ANR	5084527	Identifier	is		5084515	0					
ANR	5084528	Identifier	code		5084515	1					
ANR	5084529	ArgumentList			5084515	1					
ANR	5084530	ShiftExpression	"""</code>"" << std :: endl"		5084515	1		<<			
ANR	5084531	PrimaryExpression	"""</code>"""		5084515	0					
ANR	5084532	Identifier	std :: endl		5084515	1					
ANR	5084533	ExpressionStatement	"os << xmlTag ( ""name"" , is . name ( ) ) << std :: endl"	168:4:5277:5323	5084515	1	True				
ANR	5084534	ShiftExpression	"os << xmlTag ( ""name"" , is . name ( ) ) << std :: endl"		5084515	0		<<			
ANR	5084535	Identifier	os		5084515	0					
ANR	5084536	ShiftExpression	"xmlTag ( ""name"" , is . name ( ) ) << std :: endl"		5084515	1		<<			
ANR	5084537	CallExpression	"xmlTag ( ""name"" , is . name ( ) )"		5084515	0					
ANR	5084538	Callee	xmlTag		5084515	0					
ANR	5084539	Identifier	xmlTag		5084515	0					
ANR	5084540	ArgumentList	"""name"""		5084515	1					
ANR	5084541	Argument	"""name"""		5084515	0					
ANR	5084542	PrimaryExpression	"""name"""		5084515	0					
ANR	5084543	Argument	is . name ( )		5084515	1					
ANR	5084544	CallExpression	is . name ( )		5084515	0					
ANR	5084545	Callee	is . name		5084515	0					
ANR	5084546	MemberAccess	is . name		5084515	0					
ANR	5084547	Identifier	is		5084515	0					
ANR	5084548	Identifier	name		5084515	1					
ANR	5084549	ArgumentList			5084515	1					
ANR	5084550	Identifier	std :: endl		5084515	1					
ANR	5084551	ReturnStatement	return os ;	169:4:5329:5338	5084515	2	True				
ANR	5084552	Identifier	os		5084515	0					
ANR	5084553	ReturnType	std :: ostream &		5084515	1					
ANR	5084554	Identifier	operator <<		5084515	2					
ANR	5084555	ParameterList	"std :: ostream & os , const InstanceState & is"		5084515	3					
ANR	5084556	Parameter	std :: ostream & os	166:29:5166:5182	5084515	0	True				
ANR	5084557	ParameterType	std :: ostream &		5084515	0					
ANR	5084558	Identifier	os		5084515	1					
ANR	5084559	Parameter	const InstanceState & is	166:48:5185:5208	5084515	1	True				
ANR	5084560	ParameterType	const InstanceState &		5084515	0					
ANR	5084561	Identifier	is		5084515	1					
ANR	5084562	CFGEntryNode	ENTRY		5084515		True				
ANR	5084563	CFGExitNode	EXIT		5084515		True				
ANR	5084564	Symbol	os		5084515						
ANR	5084565	Symbol	is . name		5084515						
ANR	5084566	Symbol	is		5084515						
ANR	5084567	ClassDef	Instance_t	172:8:5351:6157							
ANR	5084568	DeclStmt									
ANR	5084569	Decl							std :: string	std :: string	instanceID
ANR	5084570	DeclStmt									
ANR	5084571	Decl							std :: string	std :: string	imageID
ANR	5084572	DeclStmt									
ANR	5084573	Decl							std :: string	std :: string	privateDNSName
ANR	5084574	DeclStmt									
ANR	5084575	Decl							std :: string	std :: string	publicDNSName
ANR	5084576	DeclStmt									
ANR	5084577	Decl							std :: string	std :: string	instanceType
ANR	5084578	DeclStmt									
ANR	5084579	Decl							std :: string	std :: string	keyName
ANR	5084580	DeclStmt									
ANR	5084581	Decl							InstanceState	InstanceState	instanceState
ANR	5084582	DeclStmt									
ANR	5084583	Decl							std :: vector < std :: string >	std :: vector < std :: string >	groupNames
ANR	5084584	Function	Instance_t	184:4:5625:5640							
ANR	5084585	FunctionDef	Instance_t ()		5084584	8					
ANR	5084586	CompoundStatement		184:17:5638:5640	5084584	0					
ANR	5084587	Identifier	Instance_t		5084584	1					
ANR	5084588	ParameterList			5084584	2					
ANR	5084589	CFGEntryNode	ENTRY		5084584		True				
ANR	5084590	CFGExitNode	EXIT		5084584		True				
ANR	5084591	Function	Instance_t	185:4:5646:6145							
ANR	5084592	FunctionDef	"Instance_t (const std :: string & inID , const std :: string & imID , const std :: string & piDN , const std :: string & puDN , const std :: string & iT , const std :: string & iS , const std :: string & kN , const std :: vector < std :: string > & gN)"		5084591	9					
ANR	5084593	CompoundStatement		192:33:6143:6145	5084591	0					
ANR	5084594	Identifier	Instance_t		5084591	1					
ANR	5084595	ParameterList	"const std :: string & inID , const std :: string & imID , const std :: string & piDN , const std :: string & puDN , const std :: string & iT , const std :: string & iS , const std :: string & kN , const std :: vector < std :: string > & gN"		5084591	2					
ANR	5084596	Parameter	const std :: string & inID	185:16:5658:5681	5084591	0	True				
ANR	5084597	ParameterType	const std :: string &		5084591	0					
ANR	5084598	Identifier	inID		5084591	1					
ANR	5084599	Parameter	const std :: string & imID	185:42:5684:5707	5084591	1	True				
ANR	5084600	ParameterType	const std :: string &		5084591	0					
ANR	5084601	Identifier	imID		5084591	1					
ANR	5084602	Parameter	const std :: string & piDN	186:16:5726:5749	5084591	2	True				
ANR	5084603	ParameterType	const std :: string &		5084591	0					
ANR	5084604	Identifier	piDN		5084591	1					
ANR	5084605	Parameter	const std :: string & puDN	186:42:5752:5775	5084591	3	True				
ANR	5084606	ParameterType	const std :: string &		5084591	0					
ANR	5084607	Identifier	puDN		5084591	1					
ANR	5084608	Parameter	const std :: string & iT	187:16:5794:5815	5084591	4	True				
ANR	5084609	ParameterType	const std :: string &		5084591	0					
ANR	5084610	Identifier	iT		5084591	1					
ANR	5084611	Parameter	const std :: string & iS	187:42:5820:5841	5084591	5	True				
ANR	5084612	ParameterType	const std :: string &		5084591	0					
ANR	5084613	Identifier	iS		5084591	1					
ANR	5084614	Parameter	const std :: string & kN	188:16:5860:5881	5084591	6	True				
ANR	5084615	ParameterType	const std :: string &		5084591	0					
ANR	5084616	Identifier	kN		5084591	1					
ANR	5084617	Parameter	const std :: vector < std :: string > & gN	189:16:5900:5936	5084591	7	True				
ANR	5084618	ParameterType	const std :: vector < std :: string > &		5084591	0					
ANR	5084619	Identifier	gN		5084591	1					
ANR	5084620	CFGEntryNode	ENTRY		5084591		True				
ANR	5084621	CFGExitNode	EXIT		5084591		True				
ANR	5084622	Symbol	inID		5084591						
ANR	5084623	Symbol	kN		5084591						
ANR	5084624	Symbol	piDN		5084591						
ANR	5084625	Symbol	gN		5084591						
ANR	5084626	Symbol	iS		5084591						
ANR	5084627	Symbol	puDN		5084591						
ANR	5084628	Symbol	iT		5084591						
ANR	5084629	Symbol	imID		5084591						
ANR	5084630	DeclStmt									
ANR	5084631	Decl							Instance_t	Instance_t	Instance
ANR	5084632	DeclStmt									
ANR	5084633	Decl							"ext :: hash_map < std :: string , Instance >"	"ext :: hash_map < std :: string , Instance >"	InstanceIDToInstanceMap
ANR	5084634	Function	operator <<	196:0:6232:6920							
ANR	5084635	FunctionDef	"operator << (std :: ostream & os , const Instance & i)"		5084634	0					
ANR	5084636	CompoundStatement		196:69:6301:6920	5084634	0					
ANR	5084637	ExpressionStatement	"os << ""<item>"" << std :: endl"	197:4:6307:6334	5084634	0	True				
ANR	5084638	ShiftExpression	"os << ""<item>"" << std :: endl"		5084634	0		<<			
ANR	5084639	Identifier	os		5084634	0					
ANR	5084640	ShiftExpression	"""<item>"" << std :: endl"		5084634	1		<<			
ANR	5084641	PrimaryExpression	"""<item>"""		5084634	0					
ANR	5084642	Identifier	std :: endl		5084634	1					
ANR	5084643	ExpressionStatement	"os << xmlTag ( ""instanceId"" , i . instanceID ) << std :: endl"	198:8:6344:6399	5084634	1	True				
ANR	5084644	ShiftExpression	"os << xmlTag ( ""instanceId"" , i . instanceID ) << std :: endl"		5084634	0		<<			
ANR	5084645	Identifier	os		5084634	0					
ANR	5084646	ShiftExpression	"xmlTag ( ""instanceId"" , i . instanceID ) << std :: endl"		5084634	1		<<			
ANR	5084647	CallExpression	"xmlTag ( ""instanceId"" , i . instanceID )"		5084634	0					
ANR	5084648	Callee	xmlTag		5084634	0					
ANR	5084649	Identifier	xmlTag		5084634	0					
ANR	5084650	ArgumentList	"""instanceId"""		5084634	1					
ANR	5084651	Argument	"""instanceId"""		5084634	0					
ANR	5084652	PrimaryExpression	"""instanceId"""		5084634	0					
ANR	5084653	Argument	i . instanceID		5084634	1					
ANR	5084654	MemberAccess	i . instanceID		5084634	0					
ANR	5084655	Identifier	i		5084634	0					
ANR	5084656	Identifier	instanceID		5084634	1					
ANR	5084657	Identifier	std :: endl		5084634	1					
ANR	5084658	ExpressionStatement	"os << xmlTag ( ""imageId"" , i . imageID ) << std :: endl"	199:8:6409:6458	5084634	2	True				
ANR	5084659	ShiftExpression	"os << xmlTag ( ""imageId"" , i . imageID ) << std :: endl"		5084634	0		<<			
ANR	5084660	Identifier	os		5084634	0					
ANR	5084661	ShiftExpression	"xmlTag ( ""imageId"" , i . imageID ) << std :: endl"		5084634	1		<<			
ANR	5084662	CallExpression	"xmlTag ( ""imageId"" , i . imageID )"		5084634	0					
ANR	5084663	Callee	xmlTag		5084634	0					
ANR	5084664	Identifier	xmlTag		5084634	0					
ANR	5084665	ArgumentList	"""imageId"""		5084634	1					
ANR	5084666	Argument	"""imageId"""		5084634	0					
ANR	5084667	PrimaryExpression	"""imageId"""		5084634	0					
ANR	5084668	Argument	i . imageID		5084634	1					
ANR	5084669	MemberAccess	i . imageID		5084634	0					
ANR	5084670	Identifier	i		5084634	0					
ANR	5084671	Identifier	imageID		5084634	1					
ANR	5084672	Identifier	std :: endl		5084634	1					
ANR	5084673	ExpressionStatement	"os << xmlTag ( ""privateDnsName"" , i . privateDNSName ) << std :: endl"	200:8:6468:6531	5084634	3	True				
ANR	5084674	ShiftExpression	"os << xmlTag ( ""privateDnsName"" , i . privateDNSName ) << std :: endl"		5084634	0		<<			
ANR	5084675	Identifier	os		5084634	0					
ANR	5084676	ShiftExpression	"xmlTag ( ""privateDnsName"" , i . privateDNSName ) << std :: endl"		5084634	1		<<			
ANR	5084677	CallExpression	"xmlTag ( ""privateDnsName"" , i . privateDNSName )"		5084634	0					
ANR	5084678	Callee	xmlTag		5084634	0					
ANR	5084679	Identifier	xmlTag		5084634	0					
ANR	5084680	ArgumentList	"""privateDnsName"""		5084634	1					
ANR	5084681	Argument	"""privateDnsName"""		5084634	0					
ANR	5084682	PrimaryExpression	"""privateDnsName"""		5084634	0					
ANR	5084683	Argument	i . privateDNSName		5084634	1					
ANR	5084684	MemberAccess	i . privateDNSName		5084634	0					
ANR	5084685	Identifier	i		5084634	0					
ANR	5084686	Identifier	privateDNSName		5084634	1					
ANR	5084687	Identifier	std :: endl		5084634	1					
ANR	5084688	ExpressionStatement	"os << xmlTag ( ""dnsName"" , i . publicDNSName ) << std :: endl"	201:8:6541:6596	5084634	4	True				
ANR	5084689	ShiftExpression	"os << xmlTag ( ""dnsName"" , i . publicDNSName ) << std :: endl"		5084634	0		<<			
ANR	5084690	Identifier	os		5084634	0					
ANR	5084691	ShiftExpression	"xmlTag ( ""dnsName"" , i . publicDNSName ) << std :: endl"		5084634	1		<<			
ANR	5084692	CallExpression	"xmlTag ( ""dnsName"" , i . publicDNSName )"		5084634	0					
ANR	5084693	Callee	xmlTag		5084634	0					
ANR	5084694	Identifier	xmlTag		5084634	0					
ANR	5084695	ArgumentList	"""dnsName"""		5084634	1					
ANR	5084696	Argument	"""dnsName"""		5084634	0					
ANR	5084697	PrimaryExpression	"""dnsName"""		5084634	0					
ANR	5084698	Argument	i . publicDNSName		5084634	1					
ANR	5084699	MemberAccess	i . publicDNSName		5084634	0					
ANR	5084700	Identifier	i		5084634	0					
ANR	5084701	Identifier	publicDNSName		5084634	1					
ANR	5084702	Identifier	std :: endl		5084634	1					
ANR	5084703	ExpressionStatement	"os << xmlTag ( ""instanceType"" , i . instanceType ) << std :: endl"	202:8:6606:6665	5084634	5	True				
ANR	5084704	ShiftExpression	"os << xmlTag ( ""instanceType"" , i . instanceType ) << std :: endl"		5084634	0		<<			
ANR	5084705	Identifier	os		5084634	0					
ANR	5084706	ShiftExpression	"xmlTag ( ""instanceType"" , i . instanceType ) << std :: endl"		5084634	1		<<			
ANR	5084707	CallExpression	"xmlTag ( ""instanceType"" , i . instanceType )"		5084634	0					
ANR	5084708	Callee	xmlTag		5084634	0					
ANR	5084709	Identifier	xmlTag		5084634	0					
ANR	5084710	ArgumentList	"""instanceType"""		5084634	1					
ANR	5084711	Argument	"""instanceType"""		5084634	0					
ANR	5084712	PrimaryExpression	"""instanceType"""		5084634	0					
ANR	5084713	Argument	i . instanceType		5084634	1					
ANR	5084714	MemberAccess	i . instanceType		5084634	0					
ANR	5084715	Identifier	i		5084634	0					
ANR	5084716	Identifier	instanceType		5084634	1					
ANR	5084717	Identifier	std :: endl		5084634	1					
ANR	5084718	ExpressionStatement	"os << ""<instanceState>"" << std :: endl"	203:8:6675:6711	5084634	6	True				
ANR	5084719	ShiftExpression	"os << ""<instanceState>"" << std :: endl"		5084634	0		<<			
ANR	5084720	Identifier	os		5084634	0					
ANR	5084721	ShiftExpression	"""<instanceState>"" << std :: endl"		5084634	1		<<			
ANR	5084722	PrimaryExpression	"""<instanceState>"""		5084634	0					
ANR	5084723	Identifier	std :: endl		5084634	1					
ANR	5084724	ExpressionStatement	os << i . instanceState	204:12:6725:6746	5084634	7	True				
ANR	5084725	ShiftExpression	os << i . instanceState		5084634	0		<<			
ANR	5084726	Identifier	os		5084634	0					
ANR	5084727	MemberAccess	i . instanceState		5084634	1					
ANR	5084728	Identifier	i		5084634	0					
ANR	5084729	Identifier	instanceState		5084634	1					
ANR	5084730	ExpressionStatement	"os << ""</instanceState>"" << std :: endl"	205:8:6756:6793	5084634	8	True				
ANR	5084731	ShiftExpression	"os << ""</instanceState>"" << std :: endl"		5084634	0		<<			
ANR	5084732	Identifier	os		5084634	0					
ANR	5084733	ShiftExpression	"""</instanceState>"" << std :: endl"		5084634	1		<<			
ANR	5084734	PrimaryExpression	"""</instanceState>"""		5084634	0					
ANR	5084735	Identifier	std :: endl		5084634	1					
ANR	5084736	IfStatement	if ( ! i . keyName . empty ( ) )		5084634	9					
ANR	5084737	Condition	! i . keyName . empty ( )	206:12:6807:6825	5084634	0	True				
ANR	5084738	UnaryOperationExpression	! i . keyName . empty ( )		5084634	0					
ANR	5084739	UnaryOperator	!		5084634	0					
ANR	5084740	CallExpression	i . keyName . empty ( )		5084634	1					
ANR	5084741	Callee	i . keyName . empty		5084634	0					
ANR	5084742	MemberAccess	i . keyName . empty		5084634	0					
ANR	5084743	MemberAccess	i . keyName		5084634	0					
ANR	5084744	Identifier	i		5084634	0					
ANR	5084745	Identifier	keyName		5084634	1					
ANR	5084746	Identifier	empty		5084634	1					
ANR	5084747	ArgumentList			5084634	1					
ANR	5084748	CompoundStatement		11:34:527:527	5084634	1					
ANR	5084749	ExpressionStatement	"os << xmlTag ( ""keyName"" , i . keyName )"	206:36:6831:6867	5084634	0	True				
ANR	5084750	ShiftExpression	"os << xmlTag ( ""keyName"" , i . keyName )"		5084634	0		<<			
ANR	5084751	Identifier	os		5084634	0					
ANR	5084752	CallExpression	"xmlTag ( ""keyName"" , i . keyName )"		5084634	1					
ANR	5084753	Callee	xmlTag		5084634	0					
ANR	5084754	Identifier	xmlTag		5084634	0					
ANR	5084755	ArgumentList	"""keyName"""		5084634	1					
ANR	5084756	Argument	"""keyName"""		5084634	0					
ANR	5084757	PrimaryExpression	"""keyName"""		5084634	0					
ANR	5084758	Argument	i . keyName		5084634	1					
ANR	5084759	MemberAccess	i . keyName		5084634	0					
ANR	5084760	Identifier	i		5084634	0					
ANR	5084761	Identifier	keyName		5084634	1					
ANR	5084762	ExpressionStatement	"os << ""</item>"" << std :: endl"	207:4:6875:6903	5084634	10	True				
ANR	5084763	ShiftExpression	"os << ""</item>"" << std :: endl"		5084634	0		<<			
ANR	5084764	Identifier	os		5084634	0					
ANR	5084765	ShiftExpression	"""</item>"" << std :: endl"		5084634	1		<<			
ANR	5084766	PrimaryExpression	"""</item>"""		5084634	0					
ANR	5084767	Identifier	std :: endl		5084634	1					
ANR	5084768	ReturnStatement	return os ;	208:4:6909:6918	5084634	11	True				
ANR	5084769	Identifier	os		5084634	0					
ANR	5084770	ReturnType	std :: ostream &		5084634	1					
ANR	5084771	Identifier	operator <<		5084634	2					
ANR	5084772	ParameterList	"std :: ostream & os , const Instance & i"		5084634	3					
ANR	5084773	Parameter	std :: ostream & os	196:29:6261:6277	5084634	0	True				
ANR	5084774	ParameterType	std :: ostream &		5084634	0					
ANR	5084775	Identifier	os		5084634	1					
ANR	5084776	Parameter	const Instance & i	196:48:6280:6297	5084634	1	True				
ANR	5084777	ParameterType	const Instance &		5084634	0					
ANR	5084778	Identifier	i		5084634	1					
ANR	5084779	CFGEntryNode	ENTRY		5084634		True				
ANR	5084780	CFGExitNode	EXIT		5084634		True				
ANR	5084781	Symbol	os		5084634						
ANR	5084782	Symbol	i . publicDNSName		5084634						
ANR	5084783	Symbol	i . instanceID		5084634						
ANR	5084784	Symbol	i . privateDNSName		5084634						
ANR	5084785	Symbol	i		5084634						
ANR	5084786	Symbol	i . instanceType		5084634						
ANR	5084787	Symbol	i . keyName		5084634						
ANR	5084788	Symbol	i . keyName . empty		5084634						
ANR	5084789	Symbol	i . imageID		5084634						
ANR	5084790	ClassDef	<unnamed>	211:8:6931:7047							
ANR	5084791	DeclStmt									
ANR	5084792	Decl							NameToKeypairMap	NameToKeypairMap	keypairs
ANR	5084793	DeclStmt									
ANR	5084794	Decl							NameToGroupMap	NameToGroupMap	groups
ANR	5084795	DeclStmt									
ANR	5084796	Decl							InstanceIDToInstanceMap	InstanceIDToInstanceMap	instances
ANR	5084797	DeclStmt									
ANR	5084798	Decl									User
ANR	5084799	DeclStmt									
ANR	5084800	Decl							"ext :: hash_map < std :: string , User >"	"ext :: hash_map < std :: string , User >"	AccessKeyIDToUserMap
ANR	5084801	DeclStmt									
ANR	5084802	Decl							AccessKeyIDToUserMap	AccessKeyIDToUserMap	users
ANR	5084803	Function	registerTestUsers	222:0:7234:7715							
ANR	5084804	FunctionDef	registerTestUsers ()		5084803	0					
ANR	5084805	CompoundStatement		222:25:7259:7715	5084803	0					
ANR	5084806	ExpressionStatement	"users [ ""1"" ] = User ( )"	223:4:7265:7286	5084803	0	True				
ANR	5084807	AssignmentExpression	"users [ ""1"" ] = User ( )"		5084803	0		=			
ANR	5084808	ArrayIndexing	"users [ ""1"" ]"		5084803	0					
ANR	5084809	Identifier	users		5084803	0					
ANR	5084810	PrimaryExpression	"""1"""		5084803	1					
ANR	5084811	CallExpression	User ( )		5084803	1					
ANR	5084812	Callee	User		5084803	0					
ANR	5084813	Identifier	User		5084803	0					
ANR	5084814	ArgumentList			5084803	1					
ANR	5084815	ExpressionStatement	"users [ ""1"" ] . groups [ ""sg-name-1"" ] = Group ( ""sg-name-1"" )"	224:4:7292:7349	5084803	1	True				
ANR	5084816	AssignmentExpression	"users [ ""1"" ] . groups [ ""sg-name-1"" ] = Group ( ""sg-name-1"" )"		5084803	0		=			
ANR	5084817	ArrayIndexing	"users [ ""1"" ] . groups [ ""sg-name-1"" ]"		5084803	0					
ANR	5084818	MemberAccess	"users [ ""1"" ] . groups"		5084803	0					
ANR	5084819	ArrayIndexing	"users [ ""1"" ]"		5084803	0					
ANR	5084820	Identifier	users		5084803	0					
ANR	5084821	PrimaryExpression	"""1"""		5084803	1					
ANR	5084822	Identifier	groups		5084803	1					
ANR	5084823	PrimaryExpression	"""sg-name-1"""		5084803	1					
ANR	5084824	CallExpression	"Group ( ""sg-name-1"" )"		5084803	1					
ANR	5084825	Callee	Group		5084803	0					
ANR	5084826	Identifier	Group		5084803	0					
ANR	5084827	ArgumentList	"""sg-name-1"""		5084803	1					
ANR	5084828	Argument	"""sg-name-1"""		5084803	0					
ANR	5084829	PrimaryExpression	"""sg-name-1"""		5084803	0					
ANR	5084830	ExpressionStatement	"users [ ""1"" ] . groups [ ""sg-name-2"" ] = Group ( ""sg-name-2"" )"	225:4:7355:7412	5084803	2	True				
ANR	5084831	AssignmentExpression	"users [ ""1"" ] . groups [ ""sg-name-2"" ] = Group ( ""sg-name-2"" )"		5084803	0		=			
ANR	5084832	ArrayIndexing	"users [ ""1"" ] . groups [ ""sg-name-2"" ]"		5084803	0					
ANR	5084833	MemberAccess	"users [ ""1"" ] . groups"		5084803	0					
ANR	5084834	ArrayIndexing	"users [ ""1"" ]"		5084803	0					
ANR	5084835	Identifier	users		5084803	0					
ANR	5084836	PrimaryExpression	"""1"""		5084803	1					
ANR	5084837	Identifier	groups		5084803	1					
ANR	5084838	PrimaryExpression	"""sg-name-2"""		5084803	1					
ANR	5084839	CallExpression	"Group ( ""sg-name-2"" )"		5084803	1					
ANR	5084840	Callee	Group		5084803	0					
ANR	5084841	Identifier	Group		5084803	0					
ANR	5084842	ArgumentList	"""sg-name-2"""		5084803	1					
ANR	5084843	Argument	"""sg-name-2"""		5084803	0					
ANR	5084844	PrimaryExpression	"""sg-name-2"""		5084803	0					
ANR	5084845	ExpressionStatement	"users [ ""1"" ] . groups [ ""sg-name-3"" ] = Group ( ""sg-name-3"" )"	226:4:7418:7475	5084803	3	True				
ANR	5084846	AssignmentExpression	"users [ ""1"" ] . groups [ ""sg-name-3"" ] = Group ( ""sg-name-3"" )"		5084803	0		=			
ANR	5084847	ArrayIndexing	"users [ ""1"" ] . groups [ ""sg-name-3"" ]"		5084803	0					
ANR	5084848	MemberAccess	"users [ ""1"" ] . groups"		5084803	0					
ANR	5084849	ArrayIndexing	"users [ ""1"" ]"		5084803	0					
ANR	5084850	Identifier	users		5084803	0					
ANR	5084851	PrimaryExpression	"""1"""		5084803	1					
ANR	5084852	Identifier	groups		5084803	1					
ANR	5084853	PrimaryExpression	"""sg-name-3"""		5084803	1					
ANR	5084854	CallExpression	"Group ( ""sg-name-3"" )"		5084803	1					
ANR	5084855	Callee	Group		5084803	0					
ANR	5084856	Identifier	Group		5084803	0					
ANR	5084857	ArgumentList	"""sg-name-3"""		5084803	1					
ANR	5084858	Argument	"""sg-name-3"""		5084803	0					
ANR	5084859	PrimaryExpression	"""sg-name-3"""		5084803	0					
ANR	5084860	ExpressionStatement	"users [ ""1681MPTCV7E5BF6TWE02"" ] = User ( )"	229:4:7540:7580	5084803	4	True				
ANR	5084861	AssignmentExpression	"users [ ""1681MPTCV7E5BF6TWE02"" ] = User ( )"		5084803	0		=			
ANR	5084862	ArrayIndexing	"users [ ""1681MPTCV7E5BF6TWE02"" ]"		5084803	0					
ANR	5084863	Identifier	users		5084803	0					
ANR	5084864	PrimaryExpression	"""1681MPTCV7E5BF6TWE02"""		5084803	1					
ANR	5084865	CallExpression	User ( )		5084803	1					
ANR	5084866	Callee	User		5084803	0					
ANR	5084867	Identifier	User		5084803	0					
ANR	5084868	ArgumentList			5084803	1					
ANR	5084869	ExpressionStatement	"users [ ""HOq1jQmeoswWXoJTq44DbTuD8jchkWfXmbsEg"" ] = User ( )"	232:4:7656:7713	5084803	5	True				
ANR	5084870	AssignmentExpression	"users [ ""HOq1jQmeoswWXoJTq44DbTuD8jchkWfXmbsEg"" ] = User ( )"		5084803	0		=			
ANR	5084871	ArrayIndexing	"users [ ""HOq1jQmeoswWXoJTq44DbTuD8jchkWfXmbsEg"" ]"		5084803	0					
ANR	5084872	Identifier	users		5084803	0					
ANR	5084873	PrimaryExpression	"""HOq1jQmeoswWXoJTq44DbTuD8jchkWfXmbsEg"""		5084803	1					
ANR	5084874	CallExpression	User ( )		5084803	1					
ANR	5084875	Callee	User		5084803	0					
ANR	5084876	Identifier	User		5084803	0					
ANR	5084877	ArgumentList			5084803	1					
ANR	5084878	ReturnType	void		5084803	1					
ANR	5084879	Identifier	registerTestUsers		5084803	2					
ANR	5084880	ParameterList			5084803	3					
ANR	5084881	CFGEntryNode	ENTRY		5084803		True				
ANR	5084882	CFGExitNode	EXIT		5084803		True				
ANR	5084883	Symbol	Group		5084803						
ANR	5084884	Symbol	User		5084803						
ANR	5084885	Symbol	"users [ ""1"" ] . groups"		5084803						
ANR	5084886	Symbol	* users		5084803						
ANR	5084887	Symbol	"* users [ ""1"" ] . groups"		5084803						
ANR	5084888	Symbol	* * users		5084803						
ANR	5084889	Symbol	users		5084803						
ANR	5084890	Function	getObject	238:0:7938:8204							
ANR	5084891	FunctionDef	"getObject (const T & map , const K & key , bool & found)"		5084890	0					
ANR	5084892	CompoundStatement		238:96:8034:8204	5084890	0					
ANR	5084893	IdentifierDeclStatement	class T :: const_iterator ci = map . find ( key ) ;	239:4:8040:8084	5084890	0	True				
ANR	5084894	IdentifierDecl	ci = map . find ( key )		5084890	0					
ANR	5084895	IdentifierDeclType	class T :: const_iterator		5084890	0					
ANR	5084896	Identifier	ci		5084890	1					
ANR	5084897	AssignmentExpression	ci = map . find ( key )		5084890	2		=			
ANR	5084898	Identifier	ci		5084890	0					
ANR	5084899	CallExpression	map . find ( key )		5084890	1					
ANR	5084900	Callee	map . find		5084890	0					
ANR	5084901	MemberAccess	map . find		5084890	0					
ANR	5084902	Identifier	map		5084890	0					
ANR	5084903	Identifier	find		5084890	1					
ANR	5084904	ArgumentList	key		5084890	1					
ANR	5084905	Argument	key		5084890	0					
ANR	5084906	Identifier	key		5084890	0					
ANR	5084907	IfStatement	if ( map . end ( ) == ci )		5084890	1					
ANR	5084908	Condition	map . end ( ) == ci	240:8:8094:8108	5084890	0	True				
ANR	5084909	EqualityExpression	map . end ( ) == ci		5084890	0		==			
ANR	5084910	CallExpression	map . end ( )		5084890	0					
ANR	5084911	Callee	map . end		5084890	0					
ANR	5084912	MemberAccess	map . end		5084890	0					
ANR	5084913	Identifier	map		5084890	0					
ANR	5084914	Identifier	end		5084890	1					
ANR	5084915	ArgumentList			5084890	1					
ANR	5084916	Identifier	ci		5084890	1					
ANR	5084917	CompoundStatement		3:26:77:77	5084890	1					
ANR	5084918	ExpressionStatement	found = false	241:8:8122:8135	5084890	0	True				
ANR	5084919	AssignmentExpression	found = false		5084890	0		=			
ANR	5084920	Identifier	found		5084890	0					
ANR	5084921	Identifier	false		5084890	1					
ANR	5084922	ReturnStatement	return V ( ) ;	242:8:8145:8155	5084890	1	True				
ANR	5084923	CallExpression	V ( )		5084890	0					
ANR	5084924	Callee	V		5084890	0					
ANR	5084925	Identifier	V		5084890	0					
ANR	5084926	ArgumentList			5084890	1					
ANR	5084927	ExpressionStatement	found = true	244:4:8167:8179	5084890	2	True				
ANR	5084928	AssignmentExpression	found = true		5084890	0		=			
ANR	5084929	Identifier	found		5084890	0					
ANR	5084930	Identifier	true		5084890	1					
ANR	5084931	ReturnStatement	return ci -> second ;	245:4:8185:8202	5084890	3	True				
ANR	5084932	PtrMemberAccess	ci -> second		5084890	0					
ANR	5084933	Identifier	ci		5084890	0					
ANR	5084934	Identifier	second		5084890	1					
ANR	5084935	ReturnType	V		5084890	1					
ANR	5084936	Identifier	getObject		5084890	2					
ANR	5084937	ParameterList	"const T & map , const K & key , bool & found"		5084890	3					
ANR	5084938	Parameter	const T & map	238:51:7989:8001	5084890	0	True				
ANR	5084939	ParameterType	const T &		5084890	0					
ANR	5084940	Identifier	map		5084890	1					
ANR	5084941	Parameter	const K & key	238:66:8004:8016	5084890	1	True				
ANR	5084942	ParameterType	const K &		5084890	0					
ANR	5084943	Identifier	key		5084890	1					
ANR	5084944	Parameter	bool & found	238:81:8019:8030	5084890	2	True				
ANR	5084945	ParameterType	bool &		5084890	0					
ANR	5084946	Identifier	found		5084890	1					
ANR	5084947	CFGEntryNode	ENTRY		5084890		True				
ANR	5084948	CFGExitNode	EXIT		5084890		True				
ANR	5084949	Symbol	found		5084890						
ANR	5084950	Symbol	ci		5084890						
ANR	5084951	Symbol	V		5084890						
ANR	5084952	Symbol	map . end		5084890						
ANR	5084953	Symbol	false		5084890						
ANR	5084954	Symbol	true		5084890						
ANR	5084955	Symbol	ci -> second		5084890						
ANR	5084956	Symbol	map		5084890						
ANR	5084957	Symbol	key		5084890						
ANR	5084958	Symbol	map . find		5084890						
ANR	5084959	Symbol	* ci		5084890						
ANR	5084960	Function	getReference	248:0:8207:8505							
ANR	5084961	FunctionDef	"getReference (T & map , const K & key , bool & found)"		5084960	0					
ANR	5084962	CompoundStatement		248:95:8302:8505	5084960	0					
ANR	5084963	Statement	static	249:4:8308:8313	5084960	0	True				
ANR	5084964	IdentifierDeclStatement	V dummyValue = V ( ) ;	249:11:8315:8333	5084960	1	True				
ANR	5084965	IdentifierDecl	dummyValue = V ( )		5084960	0					
ANR	5084966	IdentifierDeclType	V		5084960	0					
ANR	5084967	Identifier	dummyValue		5084960	1					
ANR	5084968	AssignmentExpression	dummyValue = V ( )		5084960	2		=			
ANR	5084969	Identifier	dummyValue		5084960	0					
ANR	5084970	CallExpression	V ( )		5084960	1					
ANR	5084971	Callee	V		5084960	0					
ANR	5084972	Identifier	V		5084960	0					
ANR	5084973	ArgumentList			5084960	1					
ANR	5084974	IdentifierDeclStatement	class T :: iterator ci = map . find ( key ) ;	251:4:8340:8378	5084960	2	True				
ANR	5084975	IdentifierDecl	ci = map . find ( key )		5084960	0					
ANR	5084976	IdentifierDeclType	class T :: iterator		5084960	0					
ANR	5084977	Identifier	ci		5084960	1					
ANR	5084978	AssignmentExpression	ci = map . find ( key )		5084960	2		=			
ANR	5084979	Identifier	ci		5084960	0					
ANR	5084980	CallExpression	map . find ( key )		5084960	1					
ANR	5084981	Callee	map . find		5084960	0					
ANR	5084982	MemberAccess	map . find		5084960	0					
ANR	5084983	Identifier	map		5084960	0					
ANR	5084984	Identifier	find		5084960	1					
ANR	5084985	ArgumentList	key		5084960	1					
ANR	5084986	Argument	key		5084960	0					
ANR	5084987	Identifier	key		5084960	0					
ANR	5084988	IfStatement	if ( map . end ( ) == ci )		5084960	3					
ANR	5084989	Condition	map . end ( ) == ci	252:8:8388:8402	5084960	0	True				
ANR	5084990	EqualityExpression	map . end ( ) == ci		5084960	0		==			
ANR	5084991	CallExpression	map . end ( )		5084960	0					
ANR	5084992	Callee	map . end		5084960	0					
ANR	5084993	MemberAccess	map . end		5084960	0					
ANR	5084994	Identifier	map		5084960	0					
ANR	5084995	Identifier	end		5084960	1					
ANR	5084996	ArgumentList			5084960	1					
ANR	5084997	Identifier	ci		5084960	1					
ANR	5084998	CompoundStatement		5:26:103:103	5084960	1					
ANR	5084999	ExpressionStatement	found = false	253:8:8416:8429	5084960	0	True				
ANR	5085000	AssignmentExpression	found = false		5084960	0		=			
ANR	5085001	Identifier	found		5084960	0					
ANR	5085002	Identifier	false		5084960	1					
ANR	5085003	ReturnStatement	return dummyValue ;	254:8:8439:8456	5084960	1	True				
ANR	5085004	Identifier	dummyValue		5084960	0					
ANR	5085005	ExpressionStatement	found = true	256:4:8468:8480	5084960	4	True				
ANR	5085006	AssignmentExpression	found = true		5084960	0		=			
ANR	5085007	Identifier	found		5084960	0					
ANR	5085008	Identifier	true		5084960	1					
ANR	5085009	ReturnStatement	return map [ key ] ;	257:4:8486:8503	5084960	5	True				
ANR	5085010	ArrayIndexing	map [ key ]		5084960	0					
ANR	5085011	Identifier	map		5084960	0					
ANR	5085012	Identifier	key		5084960	1					
ANR	5085013	ReturnType	V &		5084960	1					
ANR	5085014	Identifier	getReference		5084960	2					
ANR	5085015	ParameterList	"T & map , const K & key , bool & found"		5084960	3					
ANR	5085016	Parameter	T & map	248:56:8263:8269	5084960	0	True				
ANR	5085017	ParameterType	T &		5084960	0					
ANR	5085018	Identifier	map		5084960	1					
ANR	5085019	Parameter	const K & key	248:65:8272:8284	5084960	1	True				
ANR	5085020	ParameterType	const K &		5084960	0					
ANR	5085021	Identifier	key		5084960	1					
ANR	5085022	Parameter	bool & found	248:80:8287:8298	5084960	2	True				
ANR	5085023	ParameterType	bool &		5084960	0					
ANR	5085024	Identifier	found		5084960	1					
ANR	5085025	CFGEntryNode	ENTRY		5084960		True				
ANR	5085026	CFGExitNode	EXIT		5084960		True				
ANR	5085027	Symbol	found		5084960						
ANR	5085028	Symbol	V		5084960						
ANR	5085029	Symbol	ci		5084960						
ANR	5085030	Symbol	* map		5084960						
ANR	5085031	Symbol	map . end		5084960						
ANR	5085032	Symbol	false		5084960						
ANR	5085033	Symbol	true		5084960						
ANR	5085034	Symbol	* key		5084960						
ANR	5085035	Symbol	dummyValue		5084960						
ANR	5085036	Symbol	map		5084960						
ANR	5085037	Symbol	key		5084960						
ANR	5085038	Symbol	map . find		5084960						
ANR	5085039	Function	validateAndAcquireUser	260:0:8508:9336							
ANR	5085040	FunctionDef	"validateAndAcquireUser (AttributeValueMap & avm , std :: string & userID , std :: string & reply , bool & found)"		5085039	0					
ANR	5085041	CompoundStatement		260:114:8622:9336	5085039	0					
ANR	5085042	Statement	static	261:4:8628:8633	5085039	0	True				
ANR	5085043	IdentifierDeclStatement	User dummyUser = User ( ) ;	261:11:8635:8658	5085039	1	True				
ANR	5085044	IdentifierDecl	dummyUser = User ( )		5085039	0					
ANR	5085045	IdentifierDeclType	User		5085039	0					
ANR	5085046	Identifier	dummyUser		5085039	1					
ANR	5085047	AssignmentExpression	dummyUser = User ( )		5085039	2		=			
ANR	5085048	Identifier	dummyUser		5085039	0					
ANR	5085049	CallExpression	User ( )		5085039	1					
ANR	5085050	Callee	User		5085039	0					
ANR	5085051	Identifier	User		5085039	0					
ANR	5085052	ArgumentList			5085039	1					
ANR	5085053	ExpressionStatement	"userID = getObject < std :: string > ( avm , ""AWSAccessKeyId"" , found )"	263:4:8673:8738	5085039	2	True				
ANR	5085054	AssignmentExpression	"userID = getObject < std :: string > ( avm , ""AWSAccessKeyId"" , found )"		5085039	0		=			
ANR	5085055	Identifier	userID		5085039	0					
ANR	5085056	RelationalExpression	"getObject < std :: string > ( avm , ""AWSAccessKeyId"" , found )"		5085039	1		<			
ANR	5085057	Identifier	getObject		5085039	0					
ANR	5085058	RelationalExpression	"std :: string > ( avm , ""AWSAccessKeyId"" , found )"		5085039	1		>			
ANR	5085059	Identifier	std :: string		5085039	0					
ANR	5085060	Expression	"avm , ""AWSAccessKeyId"" , found"		5085039	1					
ANR	5085061	Identifier	avm		5085039	0					
ANR	5085062	Expression	"""AWSAccessKeyId"" , found"		5085039	1					
ANR	5085063	PrimaryExpression	"""AWSAccessKeyId"""		5085039	0					
ANR	5085064	Identifier	found		5085039	1					
ANR	5085065	IfStatement	if ( ( ! found ) || userID . empty ( ) )		5085039	3					
ANR	5085066	Condition	( ! found ) || userID . empty ( )	264:8:8748:8774	5085039	0	True				
ANR	5085067	OrExpression	( ! found ) || userID . empty ( )		5085039	0		||			
ANR	5085068	UnaryOperationExpression	! found		5085039	0					
ANR	5085069	UnaryOperator	!		5085039	0					
ANR	5085070	Identifier	found		5085039	1					
ANR	5085071	CallExpression	userID . empty ( )		5085039	1					
ANR	5085072	Callee	userID . empty		5085039	0					
ANR	5085073	MemberAccess	userID . empty		5085039	0					
ANR	5085074	Identifier	userID		5085039	0					
ANR	5085075	Identifier	empty		5085039	1					
ANR	5085076	ArgumentList			5085039	1					
ANR	5085077	CompoundStatement		5:38:155:155	5085039	1					
ANR	5085078	ExpressionStatement	"fprintf ( stderr , ""Failed to find userID in query.\\n"" )"	265:8:8788:8842	5085039	0	True				
ANR	5085079	CallExpression	"fprintf ( stderr , ""Failed to find userID in query.\\n"" )"		5085039	0					
ANR	5085080	Callee	fprintf		5085039	0					
ANR	5085081	Identifier	fprintf		5085039	0					
ANR	5085082	ArgumentList	stderr		5085039	1					
ANR	5085083	Argument	stderr		5085039	0					
ANR	5085084	Identifier	stderr		5085039	0					
ANR	5085085	Argument	"""Failed to find userID in query.\\n"""		5085039	1					
ANR	5085086	PrimaryExpression	"""Failed to find userID in query.\\n"""		5085039	0					
ANR	5085087	ExpressionStatement	"reply = ""Required parameter 'AWSAccessKeyId' missing or empty.\\n"""	266:8:8852:8917	5085039	1	True				
ANR	5085088	AssignmentExpression	"reply = ""Required parameter 'AWSAccessKeyId' missing or empty.\\n"""		5085039	0		=			
ANR	5085089	Identifier	reply		5085039	0					
ANR	5085090	PrimaryExpression	"""Required parameter 'AWSAccessKeyId' missing or empty.\\n"""		5085039	1					
ANR	5085091	ExpressionStatement	found = false	267:8:8927:8940	5085039	2	True				
ANR	5085092	AssignmentExpression	found = false		5085039	0		=			
ANR	5085093	Identifier	found		5085039	0					
ANR	5085094	Identifier	false		5085039	1					
ANR	5085095	ReturnStatement	return dummyUser ;	268:8:8950:8966	5085039	3	True				
ANR	5085096	Identifier	dummyUser		5085039	0					
ANR	5085097	IdentifierDeclStatement	"User & user = getReference < User > ( users , userID , found ) ;"	271:4:8983:9041	5085039	4	True				
ANR	5085098	IdentifierDecl	"& user = getReference < User > ( users , userID , found )"		5085039	0					
ANR	5085099	IdentifierDeclType	User &		5085039	0					
ANR	5085100	Identifier	user		5085039	1					
ANR	5085101	AssignmentExpression	"& user = getReference < User > ( users , userID , found )"		5085039	2		=			
ANR	5085102	Identifier	user		5085039	0					
ANR	5085103	RelationalExpression	"getReference < User > ( users , userID , found )"		5085039	1		<			
ANR	5085104	Identifier	getReference		5085039	0					
ANR	5085105	RelationalExpression	"User > ( users , userID , found )"		5085039	1		>			
ANR	5085106	Identifier	User		5085039	0					
ANR	5085107	Expression	"users , userID , found"		5085039	1					
ANR	5085108	Identifier	users		5085039	0					
ANR	5085109	Expression	"userID , found"		5085039	1					
ANR	5085110	Identifier	userID		5085039	0					
ANR	5085111	Identifier	found		5085039	1					
ANR	5085112	IfStatement	if ( ! found )		5085039	5					
ANR	5085113	Condition	! found	272:8:9051:9057	5085039	0	True				
ANR	5085114	UnaryOperationExpression	! found		5085039	0					
ANR	5085115	UnaryOperator	!		5085039	0					
ANR	5085116	Identifier	found		5085039	1					
ANR	5085117	CompoundStatement		14:8:448:469	5085039	1					
ANR	5085118	IdentifierDeclStatement	std :: ostringstream os ;	273:8:9071:9092	5085039	0	True				
ANR	5085119	IdentifierDecl	os		5085039	0					
ANR	5085120	IdentifierDeclType	std :: ostringstream		5085039	0					
ANR	5085121	Identifier	os		5085039	1					
ANR	5085122	ExpressionStatement	"os << ""Unknown AWSAccessKeyId '"" << userID << ""'."" << std :: endl"	274:8:9102:9165	5085039	1	True				
ANR	5085123	ShiftExpression	"os << ""Unknown AWSAccessKeyId '"" << userID << ""'."" << std :: endl"		5085039	0		<<			
ANR	5085124	Identifier	os		5085039	0					
ANR	5085125	ShiftExpression	"""Unknown AWSAccessKeyId '"" << userID << ""'."" << std :: endl"		5085039	1		<<			
ANR	5085126	PrimaryExpression	"""Unknown AWSAccessKeyId '"""		5085039	0					
ANR	5085127	ShiftExpression	"userID << ""'."" << std :: endl"		5085039	1		<<			
ANR	5085128	Identifier	userID		5085039	0					
ANR	5085129	ShiftExpression	"""'."" << std :: endl"		5085039	1		<<			
ANR	5085130	PrimaryExpression	"""'."""		5085039	0					
ANR	5085131	Identifier	std :: endl		5085039	1					
ANR	5085132	ExpressionStatement	reply = os . str ( )	275:8:9175:9191	5085039	2	True				
ANR	5085133	AssignmentExpression	reply = os . str ( )		5085039	0		=			
ANR	5085134	Identifier	reply		5085039	0					
ANR	5085135	CallExpression	os . str ( )		5085039	1					
ANR	5085136	Callee	os . str		5085039	0					
ANR	5085137	MemberAccess	os . str		5085039	0					
ANR	5085138	Identifier	os		5085039	0					
ANR	5085139	Identifier	str		5085039	1					
ANR	5085140	ArgumentList			5085039	1					
ANR	5085141	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	276:8:9201:9239	5085039	3	True				
ANR	5085142	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5085039	0					
ANR	5085143	Callee	fprintf		5085039	0					
ANR	5085144	Identifier	fprintf		5085039	0					
ANR	5085145	ArgumentList	stderr		5085039	1					
ANR	5085146	Argument	stderr		5085039	0					
ANR	5085147	Identifier	stderr		5085039	0					
ANR	5085148	Argument	"""%s"""		5085039	1					
ANR	5085149	PrimaryExpression	"""%s"""		5085039	0					
ANR	5085150	Argument	reply . c_str ( )		5085039	2					
ANR	5085151	CallExpression	reply . c_str ( )		5085039	0					
ANR	5085152	Callee	reply . c_str		5085039	0					
ANR	5085153	MemberAccess	reply . c_str		5085039	0					
ANR	5085154	Identifier	reply		5085039	0					
ANR	5085155	Identifier	c_str		5085039	1					
ANR	5085156	ArgumentList			5085039	1					
ANR	5085157	ExpressionStatement	found = false	277:8:9249:9262	5085039	4	True				
ANR	5085158	AssignmentExpression	found = false		5085039	0		=			
ANR	5085159	Identifier	found		5085039	0					
ANR	5085160	Identifier	false		5085039	1					
ANR	5085161	ReturnStatement	return dummyUser ;	278:8:9272:9288	5085039	5	True				
ANR	5085162	Identifier	dummyUser		5085039	0					
ANR	5085163	ExpressionStatement	found = true	281:4:9305:9317	5085039	6	True				
ANR	5085164	AssignmentExpression	found = true		5085039	0		=			
ANR	5085165	Identifier	found		5085039	0					
ANR	5085166	Identifier	true		5085039	1					
ANR	5085167	ReturnStatement	return user ;	282:4:9323:9334	5085039	7	True				
ANR	5085168	Identifier	user		5085039	0					
ANR	5085169	ReturnType	User &		5085039	1					
ANR	5085170	Identifier	validateAndAcquireUser		5085039	2					
ANR	5085171	ParameterList	"AttributeValueMap & avm , std :: string & userID , std :: string & reply , bool & found"		5085039	3					
ANR	5085172	Parameter	AttributeValueMap & avm	260:31:8539:8561	5085039	0	True				
ANR	5085173	ParameterType	AttributeValueMap &		5085039	0					
ANR	5085174	Identifier	avm		5085039	1					
ANR	5085175	Parameter	std :: string & userID	260:56:8564:8583	5085039	1	True				
ANR	5085176	ParameterType	std :: string &		5085039	0					
ANR	5085177	Identifier	userID		5085039	1					
ANR	5085178	Parameter	std :: string & reply	260:78:8586:8604	5085039	2	True				
ANR	5085179	ParameterType	std :: string &		5085039	0					
ANR	5085180	Identifier	reply		5085039	1					
ANR	5085181	Parameter	bool & found	260:99:8607:8618	5085039	3	True				
ANR	5085182	ParameterType	bool &		5085039	0					
ANR	5085183	Identifier	found		5085039	1					
ANR	5085184	CFGEntryNode	ENTRY		5085039		True				
ANR	5085185	CFGExitNode	EXIT		5085039		True				
ANR	5085186	Symbol	os . str		5085039						
ANR	5085187	Symbol	getObject		5085039						
ANR	5085188	Symbol	User		5085039						
ANR	5085189	Symbol	os		5085039						
ANR	5085190	Symbol	userID . empty		5085039						
ANR	5085191	Symbol	false		5085039						
ANR	5085192	Symbol	stderr		5085039						
ANR	5085193	Symbol	userID		5085039						
ANR	5085194	Symbol	dummyUser		5085039						
ANR	5085195	Symbol	users		5085039						
ANR	5085196	Symbol	found		5085039						
ANR	5085197	Symbol	std :: string		5085039						
ANR	5085198	Symbol	true		5085039						
ANR	5085199	Symbol	avm		5085039						
ANR	5085200	Symbol	reply		5085039						
ANR	5085201	Symbol	user		5085039						
ANR	5085202	Symbol	getReference		5085039						
ANR	5085203	Symbol	reply . c_str		5085039						
ANR	5085204	Function	handleRunInstances	285:0:9339:14487							
ANR	5085205	FunctionDef	"handleRunInstances (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5085204	0					
ANR	5085206	CompoundStatement		285:96:9435:14487	5085204	0					
ANR	5085207	IdentifierDeclStatement	bool found = false ;	288:4:9494:9512	5085204	0	True				
ANR	5085208	IdentifierDecl	found = false		5085204	0					
ANR	5085209	IdentifierDeclType	bool		5085204	0					
ANR	5085210	Identifier	found		5085204	1					
ANR	5085211	AssignmentExpression	found = false		5085204	2		=			
ANR	5085212	Identifier	false		5085204	0					
ANR	5085213	Identifier	false		5085204	1					
ANR	5085214	IdentifierDeclStatement	std :: string userID ;	289:4:9518:9536	5085204	1	True				
ANR	5085215	IdentifierDecl	userID		5085204	0					
ANR	5085216	IdentifierDeclType	std :: string		5085204	0					
ANR	5085217	Identifier	userID		5085204	1					
ANR	5085218	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	290:4:9542:9607	5085204	2	True				
ANR	5085219	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5085204	0					
ANR	5085220	IdentifierDeclType	User &		5085204	0					
ANR	5085221	Identifier	user		5085204	1					
ANR	5085222	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5085204	2		=			
ANR	5085223	Identifier	user		5085204	0					
ANR	5085224	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5085204	1					
ANR	5085225	Callee	validateAndAcquireUser		5085204	0					
ANR	5085226	Identifier	validateAndAcquireUser		5085204	0					
ANR	5085227	ArgumentList	avm		5085204	1					
ANR	5085228	Argument	avm		5085204	0					
ANR	5085229	Identifier	avm		5085204	0					
ANR	5085230	Argument	userID		5085204	1					
ANR	5085231	Identifier	userID		5085204	0					
ANR	5085232	Argument	reply		5085204	2					
ANR	5085233	Identifier	reply		5085204	0					
ANR	5085234	Argument	found		5085204	3					
ANR	5085235	Identifier	found		5085204	0					
ANR	5085236	IfStatement	if ( ! found )		5085204	3					
ANR	5085237	Condition	! found	291:8:9617:9623	5085204	0	True				
ANR	5085238	UnaryOperationExpression	! found		5085204	0					
ANR	5085239	UnaryOperator	!		5085204	0					
ANR	5085240	Identifier	found		5085204	1					
ANR	5085241	CompoundStatement		7:18:191:191	5085204	1					
ANR	5085242	ReturnStatement	return false ;	291:20:9629:9641	5085204	0	True				
ANR	5085243	Identifier	false		5085204	0					
ANR	5085244	IdentifierDeclStatement	"std :: string imageID = getObject < std :: string > ( avm , ""ImageId"" , found ) ;"	298:4:9876:9947	5085204	4	True				
ANR	5085245	IdentifierDecl	"imageID = getObject < std :: string > ( avm , ""ImageId"" , found )"		5085204	0					
ANR	5085246	IdentifierDeclType	std :: string		5085204	0					
ANR	5085247	Identifier	imageID		5085204	1					
ANR	5085248	AssignmentExpression	"imageID = getObject < std :: string > ( avm , ""ImageId"" , found )"		5085204	2		=			
ANR	5085249	Identifier	imageID		5085204	0					
ANR	5085250	RelationalExpression	"getObject < std :: string > ( avm , ""ImageId"" , found )"		5085204	1		<			
ANR	5085251	Identifier	getObject		5085204	0					
ANR	5085252	RelationalExpression	"std :: string > ( avm , ""ImageId"" , found )"		5085204	1		>			
ANR	5085253	Identifier	std :: string		5085204	0					
ANR	5085254	Expression	"avm , ""ImageId"" , found"		5085204	1					
ANR	5085255	Identifier	avm		5085204	0					
ANR	5085256	Expression	"""ImageId"" , found"		5085204	1					
ANR	5085257	PrimaryExpression	"""ImageId"""		5085204	0					
ANR	5085258	Identifier	found		5085204	1					
ANR	5085259	IfStatement	if ( ( ! found ) || imageID . empty ( ) )		5085204	5					
ANR	5085260	Condition	( ! found ) || imageID . empty ( )	299:8:9957:9984	5085204	0	True				
ANR	5085261	OrExpression	( ! found ) || imageID . empty ( )		5085204	0		||			
ANR	5085262	UnaryOperationExpression	! found		5085204	0					
ANR	5085263	UnaryOperator	!		5085204	0					
ANR	5085264	Identifier	found		5085204	1					
ANR	5085265	CallExpression	imageID . empty ( )		5085204	1					
ANR	5085266	Callee	imageID . empty		5085204	0					
ANR	5085267	MemberAccess	imageID . empty		5085204	0					
ANR	5085268	Identifier	imageID		5085204	0					
ANR	5085269	Identifier	empty		5085204	1					
ANR	5085270	ArgumentList			5085204	1					
ANR	5085271	CompoundStatement		15:39:552:552	5085204	1					
ANR	5085272	ExpressionStatement	"fprintf ( stderr , ""Failed to find imageID in query.\\n"" )"	300:8:9998:10053	5085204	0	True				
ANR	5085273	CallExpression	"fprintf ( stderr , ""Failed to find imageID in query.\\n"" )"		5085204	0					
ANR	5085274	Callee	fprintf		5085204	0					
ANR	5085275	Identifier	fprintf		5085204	0					
ANR	5085276	ArgumentList	stderr		5085204	1					
ANR	5085277	Argument	stderr		5085204	0					
ANR	5085278	Identifier	stderr		5085204	0					
ANR	5085279	Argument	"""Failed to find imageID in query.\\n"""		5085204	1					
ANR	5085280	PrimaryExpression	"""Failed to find imageID in query.\\n"""		5085204	0					
ANR	5085281	ExpressionStatement	"reply = ""Required parameter ImageId missing or empty.\\n"""	301:8:10063:10119	5085204	1	True				
ANR	5085282	AssignmentExpression	"reply = ""Required parameter ImageId missing or empty.\\n"""		5085204	0		=			
ANR	5085283	Identifier	reply		5085204	0					
ANR	5085284	PrimaryExpression	"""Required parameter ImageId missing or empty.\\n"""		5085204	1					
ANR	5085285	ReturnStatement	return false ;	302:8:10129:10141	5085204	2	True				
ANR	5085286	Identifier	false		5085204	0					
ANR	5085287	IdentifierDeclStatement	"std :: string minCount = getObject < std :: string > ( avm , ""MinCount"" , found ) ;"	305:4:10154:10227	5085204	6	True				
ANR	5085288	IdentifierDecl	"minCount = getObject < std :: string > ( avm , ""MinCount"" , found )"		5085204	0					
ANR	5085289	IdentifierDeclType	std :: string		5085204	0					
ANR	5085290	Identifier	minCount		5085204	1					
ANR	5085291	AssignmentExpression	"minCount = getObject < std :: string > ( avm , ""MinCount"" , found )"		5085204	2		=			
ANR	5085292	Identifier	minCount		5085204	0					
ANR	5085293	RelationalExpression	"getObject < std :: string > ( avm , ""MinCount"" , found )"		5085204	1		<			
ANR	5085294	Identifier	getObject		5085204	0					
ANR	5085295	RelationalExpression	"std :: string > ( avm , ""MinCount"" , found )"		5085204	1		>			
ANR	5085296	Identifier	std :: string		5085204	0					
ANR	5085297	Expression	"avm , ""MinCount"" , found"		5085204	1					
ANR	5085298	Identifier	avm		5085204	0					
ANR	5085299	Expression	"""MinCount"" , found"		5085204	1					
ANR	5085300	PrimaryExpression	"""MinCount"""		5085204	0					
ANR	5085301	Identifier	found		5085204	1					
ANR	5085302	IfStatement	if ( ( ! found ) || minCount . empty ( ) )		5085204	7					
ANR	5085303	Condition	( ! found ) || minCount . empty ( )	306:8:10237:10265	5085204	0	True				
ANR	5085304	OrExpression	( ! found ) || minCount . empty ( )		5085204	0		||			
ANR	5085305	UnaryOperationExpression	! found		5085204	0					
ANR	5085306	UnaryOperator	!		5085204	0					
ANR	5085307	Identifier	found		5085204	1					
ANR	5085308	CallExpression	minCount . empty ( )		5085204	1					
ANR	5085309	Callee	minCount . empty		5085204	0					
ANR	5085310	MemberAccess	minCount . empty		5085204	0					
ANR	5085311	Identifier	minCount		5085204	0					
ANR	5085312	Identifier	empty		5085204	1					
ANR	5085313	ArgumentList			5085204	1					
ANR	5085314	CompoundStatement		22:40:833:833	5085204	1					
ANR	5085315	ExpressionStatement	"fprintf ( stderr , ""Failed to find minCount in query.\\n"" )"	307:8:10279:10335	5085204	0	True				
ANR	5085316	CallExpression	"fprintf ( stderr , ""Failed to find minCount in query.\\n"" )"		5085204	0					
ANR	5085317	Callee	fprintf		5085204	0					
ANR	5085318	Identifier	fprintf		5085204	0					
ANR	5085319	ArgumentList	stderr		5085204	1					
ANR	5085320	Argument	stderr		5085204	0					
ANR	5085321	Identifier	stderr		5085204	0					
ANR	5085322	Argument	"""Failed to find minCount in query.\\n"""		5085204	1					
ANR	5085323	PrimaryExpression	"""Failed to find minCount in query.\\n"""		5085204	0					
ANR	5085324	ExpressionStatement	"reply = ""Required parameter MinCount missing or empty.\\n"""	308:8:10345:10402	5085204	1	True				
ANR	5085325	AssignmentExpression	"reply = ""Required parameter MinCount missing or empty.\\n"""		5085204	0		=			
ANR	5085326	Identifier	reply		5085204	0					
ANR	5085327	PrimaryExpression	"""Required parameter MinCount missing or empty.\\n"""		5085204	1					
ANR	5085328	ReturnStatement	return false ;	309:8:10412:10424	5085204	2	True				
ANR	5085329	Identifier	false		5085204	0					
ANR	5085330	IdentifierDeclStatement	"std :: string maxCount = getObject < std :: string > ( avm , ""MaxCount"" , found ) ;"	312:4:10441:10514	5085204	8	True				
ANR	5085331	IdentifierDecl	"maxCount = getObject < std :: string > ( avm , ""MaxCount"" , found )"		5085204	0					
ANR	5085332	IdentifierDeclType	std :: string		5085204	0					
ANR	5085333	Identifier	maxCount		5085204	1					
ANR	5085334	AssignmentExpression	"maxCount = getObject < std :: string > ( avm , ""MaxCount"" , found )"		5085204	2		=			
ANR	5085335	Identifier	maxCount		5085204	0					
ANR	5085336	RelationalExpression	"getObject < std :: string > ( avm , ""MaxCount"" , found )"		5085204	1		<			
ANR	5085337	Identifier	getObject		5085204	0					
ANR	5085338	RelationalExpression	"std :: string > ( avm , ""MaxCount"" , found )"		5085204	1		>			
ANR	5085339	Identifier	std :: string		5085204	0					
ANR	5085340	Expression	"avm , ""MaxCount"" , found"		5085204	1					
ANR	5085341	Identifier	avm		5085204	0					
ANR	5085342	Expression	"""MaxCount"" , found"		5085204	1					
ANR	5085343	PrimaryExpression	"""MaxCount"""		5085204	0					
ANR	5085344	Identifier	found		5085204	1					
ANR	5085345	IfStatement	if ( ( ! found ) || maxCount . empty ( ) )		5085204	9					
ANR	5085346	Condition	( ! found ) || maxCount . empty ( )	313:8:10524:10552	5085204	0	True				
ANR	5085347	OrExpression	( ! found ) || maxCount . empty ( )		5085204	0		||			
ANR	5085348	UnaryOperationExpression	! found		5085204	0					
ANR	5085349	UnaryOperator	!		5085204	0					
ANR	5085350	Identifier	found		5085204	1					
ANR	5085351	CallExpression	maxCount . empty ( )		5085204	1					
ANR	5085352	Callee	maxCount . empty		5085204	0					
ANR	5085353	MemberAccess	maxCount . empty		5085204	0					
ANR	5085354	Identifier	maxCount		5085204	0					
ANR	5085355	Identifier	empty		5085204	1					
ANR	5085356	ArgumentList			5085204	1					
ANR	5085357	CompoundStatement		29:40:1120:1120	5085204	1					
ANR	5085358	ExpressionStatement	"fprintf ( stderr , ""Failed to find maxCount in query.\\n"" )"	314:8:10566:10622	5085204	0	True				
ANR	5085359	CallExpression	"fprintf ( stderr , ""Failed to find maxCount in query.\\n"" )"		5085204	0					
ANR	5085360	Callee	fprintf		5085204	0					
ANR	5085361	Identifier	fprintf		5085204	0					
ANR	5085362	ArgumentList	stderr		5085204	1					
ANR	5085363	Argument	stderr		5085204	0					
ANR	5085364	Identifier	stderr		5085204	0					
ANR	5085365	Argument	"""Failed to find maxCount in query.\\n"""		5085204	1					
ANR	5085366	PrimaryExpression	"""Failed to find maxCount in query.\\n"""		5085204	0					
ANR	5085367	ExpressionStatement	"reply = ""Required parameter MaxCount missing or empty.\\n"""	315:8:10632:10689	5085204	1	True				
ANR	5085368	AssignmentExpression	"reply = ""Required parameter MaxCount missing or empty.\\n"""		5085204	0		=			
ANR	5085369	Identifier	reply		5085204	0					
ANR	5085370	PrimaryExpression	"""Required parameter MaxCount missing or empty.\\n"""		5085204	1					
ANR	5085371	ReturnStatement	return false ;	316:8:10699:10711	5085204	2	True				
ANR	5085372	Identifier	false		5085204	0					
ANR	5085373	IfStatement	"if ( minCount != ""1"" || maxCount != ""1"" )"		5085204	10					
ANR	5085374	Condition	"minCount != ""1"" || maxCount != ""1"""	319:8:10732:10765	5085204	0	True				
ANR	5085375	OrExpression	"minCount != ""1"" || maxCount != ""1"""		5085204	0		||			
ANR	5085376	EqualityExpression	"minCount != ""1"""		5085204	0		!=			
ANR	5085377	Identifier	minCount		5085204	0					
ANR	5085378	PrimaryExpression	"""1"""		5085204	1					
ANR	5085379	EqualityExpression	"maxCount != ""1"""		5085204	1		!=			
ANR	5085380	Identifier	maxCount		5085204	0					
ANR	5085381	PrimaryExpression	"""1"""		5085204	1					
ANR	5085382	CompoundStatement		35:45:1333:1333	5085204	1					
ANR	5085383	ExpressionStatement	"fprintf ( stderr , ""The simulator presently only supports starting one instance at a time.\\n"" )"	320:8:10779:10872	5085204	0	True				
ANR	5085384	CallExpression	"fprintf ( stderr , ""The simulator presently only supports starting one instance at a time.\\n"" )"		5085204	0					
ANR	5085385	Callee	fprintf		5085204	0					
ANR	5085386	Identifier	fprintf		5085204	0					
ANR	5085387	ArgumentList	stderr		5085204	1					
ANR	5085388	Argument	stderr		5085204	0					
ANR	5085389	Identifier	stderr		5085204	0					
ANR	5085390	Argument	"""The simulator presently only supports starting one instance at a time.\\n"""		5085204	1					
ANR	5085391	PrimaryExpression	"""The simulator presently only supports starting one instance at a time.\\n"""		5085204	0					
ANR	5085392	ExpressionStatement	"reply = ""Counts must be '1' at present.\\n"""	321:8:10882:10924	5085204	1	True				
ANR	5085393	AssignmentExpression	"reply = ""Counts must be '1' at present.\\n"""		5085204	0		=			
ANR	5085394	Identifier	reply		5085204	0					
ANR	5085395	PrimaryExpression	"""Counts must be '1' at present.\\n"""		5085204	1					
ANR	5085396	ReturnStatement	return false ;	322:8:10934:10946	5085204	2	True				
ANR	5085397	Identifier	false		5085204	0					
ANR	5085398	IdentifierDeclStatement	"std :: string keyName = getObject < std :: string > ( avm , ""KeyName"" , found ) ;"	325:4:10962:11033	5085204	11	True				
ANR	5085399	IdentifierDecl	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5085204	0					
ANR	5085400	IdentifierDeclType	std :: string		5085204	0					
ANR	5085401	Identifier	keyName		5085204	1					
ANR	5085402	AssignmentExpression	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5085204	2		=			
ANR	5085403	Identifier	keyName		5085204	0					
ANR	5085404	RelationalExpression	"getObject < std :: string > ( avm , ""KeyName"" , found )"		5085204	1		<			
ANR	5085405	Identifier	getObject		5085204	0					
ANR	5085406	RelationalExpression	"std :: string > ( avm , ""KeyName"" , found )"		5085204	1		>			
ANR	5085407	Identifier	std :: string		5085204	0					
ANR	5085408	Expression	"avm , ""KeyName"" , found"		5085204	1					
ANR	5085409	Identifier	avm		5085204	0					
ANR	5085410	Expression	"""KeyName"" , found"		5085204	1					
ANR	5085411	PrimaryExpression	"""KeyName"""		5085204	0					
ANR	5085412	Identifier	found		5085204	1					
ANR	5085413	IfStatement	if ( ! keyName . empty ( ) )		5085204	12					
ANR	5085414	Condition	! keyName . empty ( )	326:8:11043:11059	5085204	0	True				
ANR	5085415	UnaryOperationExpression	! keyName . empty ( )		5085204	0					
ANR	5085416	UnaryOperator	!		5085204	0					
ANR	5085417	CallExpression	keyName . empty ( )		5085204	1					
ANR	5085418	Callee	keyName . empty		5085204	0					
ANR	5085419	MemberAccess	keyName . empty		5085204	0					
ANR	5085420	Identifier	keyName		5085204	0					
ANR	5085421	Identifier	empty		5085204	1					
ANR	5085422	ArgumentList			5085204	1					
ANR	5085423	CompoundStatement		43:8:1637:1703	5085204	1					
ANR	5085424	IdentifierDeclStatement	"Keypair kp = getObject < Keypair > ( user . keypairs , keyName , found ) ;"	327:8:11073:11139	5085204	0	True				
ANR	5085425	IdentifierDecl	"kp = getObject < Keypair > ( user . keypairs , keyName , found )"		5085204	0					
ANR	5085426	IdentifierDeclType	Keypair		5085204	0					
ANR	5085427	Identifier	kp		5085204	1					
ANR	5085428	AssignmentExpression	"kp = getObject < Keypair > ( user . keypairs , keyName , found )"		5085204	2		=			
ANR	5085429	Identifier	kp		5085204	0					
ANR	5085430	RelationalExpression	"getObject < Keypair > ( user . keypairs , keyName , found )"		5085204	1		<			
ANR	5085431	Identifier	getObject		5085204	0					
ANR	5085432	RelationalExpression	"Keypair > ( user . keypairs , keyName , found )"		5085204	1		>			
ANR	5085433	Identifier	Keypair		5085204	0					
ANR	5085434	Expression	"user . keypairs , keyName , found"		5085204	1					
ANR	5085435	MemberAccess	user . keypairs		5085204	0					
ANR	5085436	Identifier	user		5085204	0					
ANR	5085437	Identifier	keypairs		5085204	1					
ANR	5085438	Expression	"keyName , found"		5085204	1					
ANR	5085439	Identifier	keyName		5085204	0					
ANR	5085440	Identifier	found		5085204	1					
ANR	5085441	IfStatement	if ( ! found )		5085204	1					
ANR	5085442	Condition	! found	328:12:11153:11159	5085204	0	True				
ANR	5085443	UnaryOperationExpression	! found		5085204	0					
ANR	5085444	UnaryOperator	!		5085204	0					
ANR	5085445	Identifier	found		5085204	1					
ANR	5085446	CompoundStatement		45:12:1741:1765	5085204	1					
ANR	5085447	IdentifierDeclStatement	std :: ostringstream error ;	329:12:11177:11201	5085204	0	True				
ANR	5085448	IdentifierDecl	error		5085204	0					
ANR	5085449	IdentifierDeclType	std :: ostringstream		5085204	0					
ANR	5085450	Identifier	error		5085204	1					
ANR	5085451	ExpressionStatement	"error << ""The requested keypair, '"" << keyName << ""', does not exist."" << std :: endl"	330:12:11215:11298	5085204	1	True				
ANR	5085452	ShiftExpression	"error << ""The requested keypair, '"" << keyName << ""', does not exist."" << std :: endl"		5085204	0		<<			
ANR	5085453	Identifier	error		5085204	0					
ANR	5085454	ShiftExpression	"""The requested keypair, '"" << keyName << ""', does not exist."" << std :: endl"		5085204	1		<<			
ANR	5085455	PrimaryExpression	"""The requested keypair, '"""		5085204	0					
ANR	5085456	ShiftExpression	"keyName << ""', does not exist."" << std :: endl"		5085204	1		<<			
ANR	5085457	Identifier	keyName		5085204	0					
ANR	5085458	ShiftExpression	"""', does not exist."" << std :: endl"		5085204	1		<<			
ANR	5085459	PrimaryExpression	"""', does not exist."""		5085204	0					
ANR	5085460	Identifier	std :: endl		5085204	1					
ANR	5085461	ExpressionStatement	reply = error . str ( )	331:12:11312:11331	5085204	2	True				
ANR	5085462	AssignmentExpression	reply = error . str ( )		5085204	0		=			
ANR	5085463	Identifier	reply		5085204	0					
ANR	5085464	CallExpression	error . str ( )		5085204	1					
ANR	5085465	Callee	error . str		5085204	0					
ANR	5085466	MemberAccess	error . str		5085204	0					
ANR	5085467	Identifier	error		5085204	0					
ANR	5085468	Identifier	str		5085204	1					
ANR	5085469	ArgumentList			5085204	1					
ANR	5085470	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	332:12:11345:11383	5085204	3	True				
ANR	5085471	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5085204	0					
ANR	5085472	Callee	fprintf		5085204	0					
ANR	5085473	Identifier	fprintf		5085204	0					
ANR	5085474	ArgumentList	stderr		5085204	1					
ANR	5085475	Argument	stderr		5085204	0					
ANR	5085476	Identifier	stderr		5085204	0					
ANR	5085477	Argument	"""%s"""		5085204	1					
ANR	5085478	PrimaryExpression	"""%s"""		5085204	0					
ANR	5085479	Argument	reply . c_str ( )		5085204	2					
ANR	5085480	CallExpression	reply . c_str ( )		5085204	0					
ANR	5085481	Callee	reply . c_str		5085204	0					
ANR	5085482	MemberAccess	reply . c_str		5085204	0					
ANR	5085483	Identifier	reply		5085204	0					
ANR	5085484	Identifier	c_str		5085204	1					
ANR	5085485	ArgumentList			5085204	1					
ANR	5085486	ReturnStatement	return false ;	333:12:11397:11409	5085204	4	True				
ANR	5085487	Identifier	false		5085204	0					
ANR	5085488	IdentifierDeclStatement	"std :: string instanceType = getObject < std :: string > ( avm , ""InstanceType"" , found ) ;"	338:4:11488:11569	5085204	13	True				
ANR	5085489	IdentifierDecl	"instanceType = getObject < std :: string > ( avm , ""InstanceType"" , found )"		5085204	0					
ANR	5085490	IdentifierDeclType	std :: string		5085204	0					
ANR	5085491	Identifier	instanceType		5085204	1					
ANR	5085492	AssignmentExpression	"instanceType = getObject < std :: string > ( avm , ""InstanceType"" , found )"		5085204	2		=			
ANR	5085493	Identifier	instanceType		5085204	0					
ANR	5085494	RelationalExpression	"getObject < std :: string > ( avm , ""InstanceType"" , found )"		5085204	1		<			
ANR	5085495	Identifier	getObject		5085204	0					
ANR	5085496	RelationalExpression	"std :: string > ( avm , ""InstanceType"" , found )"		5085204	1		>			
ANR	5085497	Identifier	std :: string		5085204	0					
ANR	5085498	Expression	"avm , ""InstanceType"" , found"		5085204	1					
ANR	5085499	Identifier	avm		5085204	0					
ANR	5085500	Expression	"""InstanceType"" , found"		5085204	1					
ANR	5085501	PrimaryExpression	"""InstanceType"""		5085204	0					
ANR	5085502	Identifier	found		5085204	1					
ANR	5085503	IfStatement	if ( instanceType . empty ( ) )		5085204	14					
ANR	5085504	Condition	instanceType . empty ( )	339:8:11579:11598	5085204	0	True				
ANR	5085505	CallExpression	instanceType . empty ( )		5085204	0					
ANR	5085506	Callee	instanceType . empty		5085204	0					
ANR	5085507	MemberAccess	instanceType . empty		5085204	0					
ANR	5085508	Identifier	instanceType		5085204	0					
ANR	5085509	Identifier	empty		5085204	1					
ANR	5085510	ArgumentList			5085204	1					
ANR	5085511	CompoundStatement		55:31:2166:2166	5085204	1					
ANR	5085512	ExpressionStatement	"instanceType = ""m1.small"""	340:8:11612:11637	5085204	0	True				
ANR	5085513	AssignmentExpression	"instanceType = ""m1.small"""		5085204	0		=			
ANR	5085514	Identifier	instanceType		5085204	0					
ANR	5085515	PrimaryExpression	"""m1.small"""		5085204	1					
ANR	5085516	IdentifierDeclStatement	"std :: string userData = getObject < std :: string > ( avm , ""UserData"" , found ) ;"	343:4:11650:11723	5085204	15	True				
ANR	5085517	IdentifierDecl	"userData = getObject < std :: string > ( avm , ""UserData"" , found )"		5085204	0					
ANR	5085518	IdentifierDeclType	std :: string		5085204	0					
ANR	5085519	Identifier	userData		5085204	1					
ANR	5085520	AssignmentExpression	"userData = getObject < std :: string > ( avm , ""UserData"" , found )"		5085204	2		=			
ANR	5085521	Identifier	userData		5085204	0					
ANR	5085522	RelationalExpression	"getObject < std :: string > ( avm , ""UserData"" , found )"		5085204	1		<			
ANR	5085523	Identifier	getObject		5085204	0					
ANR	5085524	RelationalExpression	"std :: string > ( avm , ""UserData"" , found )"		5085204	1		>			
ANR	5085525	Identifier	std :: string		5085204	0					
ANR	5085526	Expression	"avm , ""UserData"" , found"		5085204	1					
ANR	5085527	Identifier	avm		5085204	0					
ANR	5085528	Expression	"""UserData"" , found"		5085204	1					
ANR	5085529	PrimaryExpression	"""UserData"""		5085204	0					
ANR	5085530	Identifier	found		5085204	1					
ANR	5085531	IfStatement	if ( ! userData . empty ( ) )		5085204	16					
ANR	5085532	Condition	! userData . empty ( )	344:8:11733:11750	5085204	0	True				
ANR	5085533	UnaryOperationExpression	! userData . empty ( )		5085204	0					
ANR	5085534	UnaryOperator	!		5085204	0					
ANR	5085535	CallExpression	userData . empty ( )		5085204	1					
ANR	5085536	Callee	userData . empty		5085204	0					
ANR	5085537	MemberAccess	userData . empty		5085204	0					
ANR	5085538	Identifier	userData		5085204	0					
ANR	5085539	Identifier	empty		5085204	1					
ANR	5085540	ArgumentList			5085204	1					
ANR	5085541	CompoundStatement		60:29:2318:2318	5085204	1					
ANR	5085542	IdentifierDeclStatement	std :: vector < std :: string > groupNames ;	348:4:11844:11881	5085204	17	True				
ANR	5085543	IdentifierDecl	groupNames		5085204	0					
ANR	5085544	IdentifierDeclType	std :: vector < std :: string >		5085204	0					
ANR	5085545	Identifier	groupNames		5085204	1					
ANR	5085546	ForStatement	for ( int i = 1 ; ; ++ i )		5085204	18					
ANR	5085547	ForInit	int i = 1 ;	349:9:11892:11901	5085204	0	True				
ANR	5085548	IdentifierDeclStatement	int i = 1 ;		5085204	0					
ANR	5085549	IdentifierDecl	i = 1		5085204	0					
ANR	5085550	IdentifierDeclType	int		5085204	0					
ANR	5085551	Identifier	i		5085204	1					
ANR	5085552	AssignmentExpression	i = 1		5085204	2		=			
ANR	5085553	Identifier	i		5085204	0					
ANR	5085554	PrimaryExpression	1		5085204	1					
ANR	5085555	UnaryExpression	++ i	349:22:11905:11907	5085204	1	True				
ANR	5085556	IncDec	++		5085204	0					
ANR	5085557	Identifier	i		5085204	1					
ANR	5085558	CompoundStatement		78:8:2995:3057	5085204	2					
ANR	5085559	IdentifierDeclStatement	std :: ostringstream sgParameterName ;	350:8:11921:11955	5085204	0	True				
ANR	5085560	IdentifierDecl	sgParameterName		5085204	0					
ANR	5085561	IdentifierDeclType	std :: ostringstream		5085204	0					
ANR	5085562	Identifier	sgParameterName		5085204	1					
ANR	5085563	ExpressionStatement	"sgParameterName << ""SecurityGroup."" << i"	351:8:11965:12005	5085204	1	True				
ANR	5085564	ShiftExpression	"sgParameterName << ""SecurityGroup."" << i"		5085204	0		<<			
ANR	5085565	Identifier	sgParameterName		5085204	0					
ANR	5085566	ShiftExpression	"""SecurityGroup."" << i"		5085204	1		<<			
ANR	5085567	PrimaryExpression	"""SecurityGroup."""		5085204	0					
ANR	5085568	Identifier	i		5085204	1					
ANR	5085569	IdentifierDeclStatement	"std :: string sgName = getObject < std :: string > ( avm , sgParameterName . str ( ) , found ) ;"	352:8:12015:12097	5085204	2	True				
ANR	5085570	IdentifierDecl	"sgName = getObject < std :: string > ( avm , sgParameterName . str ( ) , found )"		5085204	0					
ANR	5085571	IdentifierDeclType	std :: string		5085204	0					
ANR	5085572	Identifier	sgName		5085204	1					
ANR	5085573	AssignmentExpression	"sgName = getObject < std :: string > ( avm , sgParameterName . str ( ) , found )"		5085204	2		=			
ANR	5085574	Identifier	sgName		5085204	0					
ANR	5085575	RelationalExpression	"getObject < std :: string > ( avm , sgParameterName . str ( ) , found )"		5085204	1		<			
ANR	5085576	Identifier	getObject		5085204	0					
ANR	5085577	RelationalExpression	"std :: string > ( avm , sgParameterName . str ( ) , found )"		5085204	1		>			
ANR	5085578	Identifier	std :: string		5085204	0					
ANR	5085579	Expression	"avm , sgParameterName . str ( ) , found"		5085204	1					
ANR	5085580	Identifier	avm		5085204	0					
ANR	5085581	Expression	"sgParameterName . str ( ) , found"		5085204	1					
ANR	5085582	CallExpression	sgParameterName . str ( )		5085204	0					
ANR	5085583	Callee	sgParameterName . str		5085204	0					
ANR	5085584	MemberAccess	sgParameterName . str		5085204	0					
ANR	5085585	Identifier	sgParameterName		5085204	0					
ANR	5085586	Identifier	str		5085204	1					
ANR	5085587	ArgumentList			5085204	1					
ANR	5085588	Identifier	found		5085204	1					
ANR	5085589	IfStatement	if ( ! found )		5085204	3					
ANR	5085590	Condition	! found	353:12:12111:12117	5085204	0	True				
ANR	5085591	UnaryOperationExpression	! found		5085204	0					
ANR	5085592	UnaryOperator	!		5085204	0					
ANR	5085593	Identifier	found		5085204	1					
ANR	5085594	CompoundStatement		69:22:2685:2685	5085204	1					
ANR	5085595	BreakStatement	break ;	353:24:12123:12128	5085204	0	True				
ANR	5085596	IfStatement	if ( sgName . empty ( ) )		5085204	4					
ANR	5085597	Condition	sgName . empty ( )	354:12:12144:12157	5085204	0	True				
ANR	5085598	CallExpression	sgName . empty ( )		5085204	0					
ANR	5085599	Callee	sgName . empty		5085204	0					
ANR	5085600	MemberAccess	sgName . empty		5085204	0					
ANR	5085601	Identifier	sgName		5085204	0					
ANR	5085602	Identifier	empty		5085204	1					
ANR	5085603	ArgumentList			5085204	1					
ANR	5085604	CompoundStatement		71:12:2739:2763	5085204	1					
ANR	5085605	IdentifierDeclStatement	std :: ostringstream error ;	355:12:12175:12199	5085204	0	True				
ANR	5085606	IdentifierDecl	error		5085204	0					
ANR	5085607	IdentifierDeclType	std :: ostringstream		5085204	0					
ANR	5085608	Identifier	error		5085204	1					
ANR	5085609	ExpressionStatement	"error << ""Optional parameter "" << sgName << "" must not be empty."" << std :: endl"	356:12:12213:12291	5085204	1	True				
ANR	5085610	ShiftExpression	"error << ""Optional parameter "" << sgName << "" must not be empty."" << std :: endl"		5085204	0		<<			
ANR	5085611	Identifier	error		5085204	0					
ANR	5085612	ShiftExpression	"""Optional parameter "" << sgName << "" must not be empty."" << std :: endl"		5085204	1		<<			
ANR	5085613	PrimaryExpression	"""Optional parameter """		5085204	0					
ANR	5085614	ShiftExpression	"sgName << "" must not be empty."" << std :: endl"		5085204	1		<<			
ANR	5085615	Identifier	sgName		5085204	0					
ANR	5085616	ShiftExpression	""" must not be empty."" << std :: endl"		5085204	1		<<			
ANR	5085617	PrimaryExpression	""" must not be empty."""		5085204	0					
ANR	5085618	Identifier	std :: endl		5085204	1					
ANR	5085619	ExpressionStatement	reply = error . str ( )	357:12:12305:12324	5085204	2	True				
ANR	5085620	AssignmentExpression	reply = error . str ( )		5085204	0		=			
ANR	5085621	Identifier	reply		5085204	0					
ANR	5085622	CallExpression	error . str ( )		5085204	1					
ANR	5085623	Callee	error . str		5085204	0					
ANR	5085624	MemberAccess	error . str		5085204	0					
ANR	5085625	Identifier	error		5085204	0					
ANR	5085626	Identifier	str		5085204	1					
ANR	5085627	ArgumentList			5085204	1					
ANR	5085628	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	358:12:12338:12376	5085204	3	True				
ANR	5085629	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5085204	0					
ANR	5085630	Callee	fprintf		5085204	0					
ANR	5085631	Identifier	fprintf		5085204	0					
ANR	5085632	ArgumentList	stderr		5085204	1					
ANR	5085633	Argument	stderr		5085204	0					
ANR	5085634	Identifier	stderr		5085204	0					
ANR	5085635	Argument	"""%s"""		5085204	1					
ANR	5085636	PrimaryExpression	"""%s"""		5085204	0					
ANR	5085637	Argument	reply . c_str ( )		5085204	2					
ANR	5085638	CallExpression	reply . c_str ( )		5085204	0					
ANR	5085639	Callee	reply . c_str		5085204	0					
ANR	5085640	MemberAccess	reply . c_str		5085204	0					
ANR	5085641	Identifier	reply		5085204	0					
ANR	5085642	Identifier	c_str		5085204	1					
ANR	5085643	ArgumentList			5085204	1					
ANR	5085644	ReturnStatement	return false ;	359:12:12390:12402	5085204	4	True				
ANR	5085645	Identifier	false		5085204	0					
ANR	5085646	IdentifierDeclStatement	NameToGroupMap :: const_iterator ci = user . groups . find ( sgName ) ;	362:8:12431:12493	5085204	5	True				
ANR	5085647	IdentifierDecl	ci = user . groups . find ( sgName )		5085204	0					
ANR	5085648	IdentifierDeclType	NameToGroupMap :: const_iterator		5085204	0					
ANR	5085649	Identifier	ci		5085204	1					
ANR	5085650	AssignmentExpression	ci = user . groups . find ( sgName )		5085204	2		=			
ANR	5085651	Identifier	ci		5085204	0					
ANR	5085652	CallExpression	user . groups . find ( sgName )		5085204	1					
ANR	5085653	Callee	user . groups . find		5085204	0					
ANR	5085654	MemberAccess	user . groups . find		5085204	0					
ANR	5085655	MemberAccess	user . groups		5085204	0					
ANR	5085656	Identifier	user		5085204	0					
ANR	5085657	Identifier	groups		5085204	1					
ANR	5085658	Identifier	find		5085204	1					
ANR	5085659	ArgumentList	sgName		5085204	1					
ANR	5085660	Argument	sgName		5085204	0					
ANR	5085661	Identifier	sgName		5085204	0					
ANR	5085662	IfStatement	if ( ci != user . groups . end ( ) )		5085204	6					
ANR	5085663	Condition	ci != user . groups . end ( )	363:12:12507:12529	5085204	0	True				
ANR	5085664	EqualityExpression	ci != user . groups . end ( )		5085204	0		!=			
ANR	5085665	Identifier	ci		5085204	0					
ANR	5085666	CallExpression	user . groups . end ( )		5085204	1					
ANR	5085667	Callee	user . groups . end		5085204	0					
ANR	5085668	MemberAccess	user . groups . end		5085204	0					
ANR	5085669	MemberAccess	user . groups		5085204	0					
ANR	5085670	Identifier	user		5085204	0					
ANR	5085671	Identifier	groups		5085204	1					
ANR	5085672	Identifier	end		5085204	1					
ANR	5085673	ArgumentList			5085204	1					
ANR	5085674	CompoundStatement		79:38:3097:3097	5085204	1					
ANR	5085675	ExpressionStatement	groupNames . push_back ( sgName )	364:12:12547:12577	5085204	0	True				
ANR	5085676	CallExpression	groupNames . push_back ( sgName )		5085204	0					
ANR	5085677	Callee	groupNames . push_back		5085204	0					
ANR	5085678	MemberAccess	groupNames . push_back		5085204	0					
ANR	5085679	Identifier	groupNames		5085204	0					
ANR	5085680	Identifier	push_back		5085204	1					
ANR	5085681	ArgumentList	sgName		5085204	1					
ANR	5085682	Argument	sgName		5085204	0					
ANR	5085683	Identifier	sgName		5085204	0					
ANR	5085684	ElseStatement	else		5085204	0					
ANR	5085685	CompoundStatement		82:12:3172:3196	5085204	0					
ANR	5085686	IdentifierDeclStatement	std :: ostringstream error ;	366:12:12608:12632	5085204	0	True				
ANR	5085687	IdentifierDecl	error		5085204	0					
ANR	5085688	IdentifierDeclType	std :: ostringstream		5085204	0					
ANR	5085689	Identifier	error		5085204	1					
ANR	5085690	ExpressionStatement	"error << ""Group '"" << sgName << ""' does not exist.\\n"""	367:12:12646:12699	5085204	1	True				
ANR	5085691	ShiftExpression	"error << ""Group '"" << sgName << ""' does not exist.\\n"""		5085204	0		<<			
ANR	5085692	Identifier	error		5085204	0					
ANR	5085693	ShiftExpression	"""Group '"" << sgName << ""' does not exist.\\n"""		5085204	1		<<			
ANR	5085694	PrimaryExpression	"""Group '"""		5085204	0					
ANR	5085695	ShiftExpression	"sgName << ""' does not exist.\\n"""		5085204	1		<<			
ANR	5085696	Identifier	sgName		5085204	0					
ANR	5085697	PrimaryExpression	"""' does not exist.\\n"""		5085204	1					
ANR	5085698	ExpressionStatement	reply = error . str ( )	368:12:12713:12732	5085204	2	True				
ANR	5085699	AssignmentExpression	reply = error . str ( )		5085204	0		=			
ANR	5085700	Identifier	reply		5085204	0					
ANR	5085701	CallExpression	error . str ( )		5085204	1					
ANR	5085702	Callee	error . str		5085204	0					
ANR	5085703	MemberAccess	error . str		5085204	0					
ANR	5085704	Identifier	error		5085204	0					
ANR	5085705	Identifier	str		5085204	1					
ANR	5085706	ArgumentList			5085204	1					
ANR	5085707	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	369:12:12746:12784	5085204	3	True				
ANR	5085708	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5085204	0					
ANR	5085709	Callee	fprintf		5085204	0					
ANR	5085710	Identifier	fprintf		5085204	0					
ANR	5085711	ArgumentList	stderr		5085204	1					
ANR	5085712	Argument	stderr		5085204	0					
ANR	5085713	Identifier	stderr		5085204	0					
ANR	5085714	Argument	"""%s"""		5085204	1					
ANR	5085715	PrimaryExpression	"""%s"""		5085204	0					
ANR	5085716	Argument	reply . c_str ( )		5085204	2					
ANR	5085717	CallExpression	reply . c_str ( )		5085204	0					
ANR	5085718	Callee	reply . c_str		5085204	0					
ANR	5085719	MemberAccess	reply . c_str		5085204	0					
ANR	5085720	Identifier	reply		5085204	0					
ANR	5085721	Identifier	c_str		5085204	1					
ANR	5085722	ArgumentList			5085204	1					
ANR	5085723	ReturnStatement	return false ;	370:12:12798:12810	5085204	4	True				
ANR	5085724	Identifier	false		5085204	0					
ANR	5085725	IfStatement	if ( groupNames . empty ( ) )		5085204	19					
ANR	5085726	Condition	groupNames . empty ( )	374:8:12841:12858	5085204	0	True				
ANR	5085727	CallExpression	groupNames . empty ( )		5085204	0					
ANR	5085728	Callee	groupNames . empty		5085204	0					
ANR	5085729	MemberAccess	groupNames . empty		5085204	0					
ANR	5085730	Identifier	groupNames		5085204	0					
ANR	5085731	Identifier	empty		5085204	1					
ANR	5085732	ArgumentList			5085204	1					
ANR	5085733	CompoundStatement		90:29:3426:3426	5085204	1					
ANR	5085734	ExpressionStatement	"groupNames . push_back ( ""default"" )"	375:8:12872:12905	5085204	0	True				
ANR	5085735	CallExpression	"groupNames . push_back ( ""default"" )"		5085204	0					
ANR	5085736	Callee	groupNames . push_back		5085204	0					
ANR	5085737	MemberAccess	groupNames . push_back		5085204	0					
ANR	5085738	Identifier	groupNames		5085204	0					
ANR	5085739	Identifier	push_back		5085204	1					
ANR	5085740	ArgumentList	"""default"""		5085204	1					
ANR	5085741	Argument	"""default"""		5085204	0					
ANR	5085742	PrimaryExpression	"""default"""		5085204	0					
ANR	5085743	IdentifierDeclStatement	"char edh [ ] = ""12345678"" ;"	379:4:12969:12992	5085204	20	True				
ANR	5085744	IdentifierDecl	"edh [ ] = ""12345678"""		5085204	0					
ANR	5085745	IdentifierDeclType	char [ ]		5085204	0					
ANR	5085746	Identifier	edh		5085204	1					
ANR	5085747	AssignmentExpression	"edh [ ] = ""12345678"""		5085204	2		=			
ANR	5085748	Identifier	edh		5085204	0					
ANR	5085749	PrimaryExpression	"""12345678"""		5085204	1					
ANR	5085750	ExpressionStatement	"snprintf ( edh , sizeof ( edh ) , ""%.8x"" , ( unsigned ) user . instances . size ( ) )"	380:4:12998:13069	5085204	21	True				
ANR	5085751	CallExpression	"snprintf ( edh , sizeof ( edh ) , ""%.8x"" , ( unsigned ) user . instances . size ( ) )"		5085204	0					
ANR	5085752	Callee	snprintf		5085204	0					
ANR	5085753	Identifier	snprintf		5085204	0					
ANR	5085754	ArgumentList	edh		5085204	1					
ANR	5085755	Argument	edh		5085204	0					
ANR	5085756	Identifier	edh		5085204	0					
ANR	5085757	Argument	sizeof ( edh )		5085204	1					
ANR	5085758	SizeofExpression	sizeof ( edh )		5085204	0					
ANR	5085759	Sizeof	sizeof		5085204	0					
ANR	5085760	SizeofOperand	edh		5085204	1					
ANR	5085761	Argument	"""%.8x"""		5085204	2					
ANR	5085762	PrimaryExpression	"""%.8x"""		5085204	0					
ANR	5085763	Argument	( unsigned ) user . instances . size ( )		5085204	3					
ANR	5085764	CastExpression	( unsigned ) user . instances . size ( )		5085204	0					
ANR	5085765	CastTarget	unsigned		5085204	0					
ANR	5085766	CallExpression	user . instances . size ( )		5085204	1					
ANR	5085767	Callee	user . instances . size		5085204	0					
ANR	5085768	MemberAccess	user . instances . size		5085204	0					
ANR	5085769	MemberAccess	user . instances		5085204	0					
ANR	5085770	Identifier	user		5085204	0					
ANR	5085771	Identifier	instances		5085204	1					
ANR	5085772	Identifier	size		5085204	1					
ANR	5085773	ArgumentList			5085204	1					
ANR	5085774	IdentifierDeclStatement	"std :: string instanceID = ""i-"" ;"	382:4:13080:13109	5085204	22	True				
ANR	5085775	IdentifierDecl	"instanceID = ""i-"""		5085204	0					
ANR	5085776	IdentifierDeclType	std :: string		5085204	0					
ANR	5085777	Identifier	instanceID		5085204	1					
ANR	5085778	AssignmentExpression	"instanceID = ""i-"""		5085204	2		=			
ANR	5085779	Identifier	instanceID		5085204	0					
ANR	5085780	PrimaryExpression	"""i-"""		5085204	1					
ANR	5085781	ExpressionStatement	instanceID += edh	382:35:13111:13128	5085204	23	True				
ANR	5085782	AssignmentExpression	instanceID += edh		5085204	0		+=			
ANR	5085783	Identifier	instanceID		5085204	0					
ANR	5085784	Identifier	edh		5085204	1					
ANR	5085785	IdentifierDeclStatement	"std :: string privateDNSName = ""private.dns."" ;"	383:4:13134:13177	5085204	24	True				
ANR	5085786	IdentifierDecl	"privateDNSName = ""private.dns."""		5085204	0					
ANR	5085787	IdentifierDeclType	std :: string		5085204	0					
ANR	5085788	Identifier	privateDNSName		5085204	1					
ANR	5085789	AssignmentExpression	"privateDNSName = ""private.dns."""		5085204	2		=			
ANR	5085790	Identifier	privateDNSName		5085204	0					
ANR	5085791	PrimaryExpression	"""private.dns."""		5085204	1					
ANR	5085792	ExpressionStatement	privateDNSName += edh	383:49:13179:13200	5085204	25	True				
ANR	5085793	AssignmentExpression	privateDNSName += edh		5085204	0		+=			
ANR	5085794	Identifier	privateDNSName		5085204	0					
ANR	5085795	Identifier	edh		5085204	1					
ANR	5085796	IdentifierDeclStatement	"std :: string publicDNSName = ""public.dns."" ;"	384:4:13206:13247	5085204	26	True				
ANR	5085797	IdentifierDecl	"publicDNSName = ""public.dns."""		5085204	0					
ANR	5085798	IdentifierDeclType	std :: string		5085204	0					
ANR	5085799	Identifier	publicDNSName		5085204	1					
ANR	5085800	AssignmentExpression	"publicDNSName = ""public.dns."""		5085204	2		=			
ANR	5085801	Identifier	publicDNSName		5085204	0					
ANR	5085802	PrimaryExpression	"""public.dns."""		5085204	1					
ANR	5085803	ExpressionStatement	publicDNSName += edh	384:47:13249:13269	5085204	27	True				
ANR	5085804	AssignmentExpression	publicDNSName += edh		5085204	0		+=			
ANR	5085805	Identifier	publicDNSName		5085204	0					
ANR	5085806	Identifier	edh		5085204	1					
ANR	5085807	IdentifierDeclStatement	"std :: string instanceState = ""pending"" ;"	385:4:13275:13312	5085204	28	True				
ANR	5085808	IdentifierDecl	"instanceState = ""pending"""		5085204	0					
ANR	5085809	IdentifierDeclType	std :: string		5085204	0					
ANR	5085810	Identifier	instanceState		5085204	1					
ANR	5085811	AssignmentExpression	"instanceState = ""pending"""		5085204	2		=			
ANR	5085812	Identifier	instanceState		5085204	0					
ANR	5085813	PrimaryExpression	"""pending"""		5085204	1					
ANR	5085814	ExpressionStatement	"user . instances [ instanceID ] = Instance ( instanceID , imageID , privateDNSName , publicDNSName , instanceType , instanceState , keyName , groupNames )"	386:4:13318:13461	5085204	29	True				
ANR	5085815	AssignmentExpression	"user . instances [ instanceID ] = Instance ( instanceID , imageID , privateDNSName , publicDNSName , instanceType , instanceState , keyName , groupNames )"		5085204	0		=			
ANR	5085816	ArrayIndexing	user . instances [ instanceID ]		5085204	0					
ANR	5085817	MemberAccess	user . instances		5085204	0					
ANR	5085818	Identifier	user		5085204	0					
ANR	5085819	Identifier	instances		5085204	1					
ANR	5085820	Identifier	instanceID		5085204	1					
ANR	5085821	CallExpression	"Instance ( instanceID , imageID , privateDNSName , publicDNSName , instanceType , instanceState , keyName , groupNames )"		5085204	1					
ANR	5085822	Callee	Instance		5085204	0					
ANR	5085823	Identifier	Instance		5085204	0					
ANR	5085824	ArgumentList	instanceID		5085204	1					
ANR	5085825	Argument	instanceID		5085204	0					
ANR	5085826	Identifier	instanceID		5085204	0					
ANR	5085827	Argument	imageID		5085204	1					
ANR	5085828	Identifier	imageID		5085204	0					
ANR	5085829	Argument	privateDNSName		5085204	2					
ANR	5085830	Identifier	privateDNSName		5085204	0					
ANR	5085831	Argument	publicDNSName		5085204	3					
ANR	5085832	Identifier	publicDNSName		5085204	0					
ANR	5085833	Argument	instanceType		5085204	4					
ANR	5085834	Identifier	instanceType		5085204	0					
ANR	5085835	Argument	instanceState		5085204	5					
ANR	5085836	Identifier	instanceState		5085204	0					
ANR	5085837	Argument	keyName		5085204	6					
ANR	5085838	Identifier	keyName		5085204	0					
ANR	5085839	Argument	groupNames		5085204	7					
ANR	5085840	Identifier	groupNames		5085204	0					
ANR	5085841	IdentifierDeclStatement	"std :: string reservationID = ""r-"" ;"	387:4:13467:13499	5085204	30	True				
ANR	5085842	IdentifierDecl	"reservationID = ""r-"""		5085204	0					
ANR	5085843	IdentifierDeclType	std :: string		5085204	0					
ANR	5085844	Identifier	reservationID		5085204	1					
ANR	5085845	AssignmentExpression	"reservationID = ""r-"""		5085204	2		=			
ANR	5085846	Identifier	reservationID		5085204	0					
ANR	5085847	PrimaryExpression	"""r-"""		5085204	1					
ANR	5085848	ExpressionStatement	reservationID += edh	387:38:13501:13521	5085204	31	True				
ANR	5085849	AssignmentExpression	reservationID += edh		5085204	0		+=			
ANR	5085850	Identifier	reservationID		5085204	0					
ANR	5085851	Identifier	edh		5085204	1					
ANR	5085852	IdentifierDeclStatement	std :: ostringstream xml ;	390:4:13564:13586	5085204	32	True				
ANR	5085853	IdentifierDecl	xml		5085204	0					
ANR	5085854	IdentifierDeclType	std :: ostringstream		5085204	0					
ANR	5085855	Identifier	xml		5085204	1					
ANR	5085856	ExpressionStatement	"xml << ""<RunInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	391:4:13592:13687	5085204	33	True				
ANR	5085857	ShiftExpression	"xml << ""<RunInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5085204	0		<<			
ANR	5085858	Identifier	xml		5085204	0					
ANR	5085859	ShiftExpression	"""<RunInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5085204	1		<<			
ANR	5085860	PrimaryExpression	"""<RunInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5085204	0					
ANR	5085861	Identifier	std :: endl		5085204	1					
ANR	5085862	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	393:4:13694:13713	5085204	34	True				
ANR	5085863	IdentifierDecl	"rID [ ] = ""1234"""		5085204	0					
ANR	5085864	IdentifierDeclType	char [ ]		5085204	0					
ANR	5085865	Identifier	rID		5085204	1					
ANR	5085866	AssignmentExpression	"rID [ ] = ""1234"""		5085204	2		=			
ANR	5085867	Identifier	rID		5085204	0					
ANR	5085868	PrimaryExpression	"""1234"""		5085204	1					
ANR	5085869	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	394:4:13719:13772	5085204	35	True				
ANR	5085870	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5085204	0					
ANR	5085871	Callee	snprintf		5085204	0					
ANR	5085872	Identifier	snprintf		5085204	0					
ANR	5085873	ArgumentList	rID		5085204	1					
ANR	5085874	Argument	rID		5085204	0					
ANR	5085875	Identifier	rID		5085204	0					
ANR	5085876	Argument	sizeof ( rID )		5085204	1					
ANR	5085877	SizeofExpression	sizeof ( rID )		5085204	0					
ANR	5085878	Sizeof	sizeof		5085204	0					
ANR	5085879	SizeofOperand	rID		5085204	1					
ANR	5085880	Argument	"""%.4x"""		5085204	2					
ANR	5085881	PrimaryExpression	"""%.4x"""		5085204	0					
ANR	5085882	Argument	requestNumber		5085204	3					
ANR	5085883	Identifier	requestNumber		5085204	0					
ANR	5085884	IdentifierDeclStatement	std :: string requestID = rID ;	395:4:13778:13805	5085204	36	True				
ANR	5085885	IdentifierDecl	requestID = rID		5085204	0					
ANR	5085886	IdentifierDeclType	std :: string		5085204	0					
ANR	5085887	Identifier	requestID		5085204	1					
ANR	5085888	AssignmentExpression	requestID = rID		5085204	2		=			
ANR	5085889	Identifier	rID		5085204	0					
ANR	5085890	Identifier	rID		5085204	1					
ANR	5085891	ExpressionStatement	"xml << ""<requestId>"" << requestID << ""</requestId>"" << std :: endl"	397:4:13816:13880	5085204	37	True				
ANR	5085892	ShiftExpression	"xml << ""<requestId>"" << requestID << ""</requestId>"" << std :: endl"		5085204	0		<<			
ANR	5085893	Identifier	xml		5085204	0					
ANR	5085894	ShiftExpression	"""<requestId>"" << requestID << ""</requestId>"" << std :: endl"		5085204	1		<<			
ANR	5085895	PrimaryExpression	"""<requestId>"""		5085204	0					
ANR	5085896	ShiftExpression	"requestID << ""</requestId>"" << std :: endl"		5085204	1		<<			
ANR	5085897	Identifier	requestID		5085204	0					
ANR	5085898	ShiftExpression	"""</requestId>"" << std :: endl"		5085204	1		<<			
ANR	5085899	PrimaryExpression	"""</requestId>"""		5085204	0					
ANR	5085900	Identifier	std :: endl		5085204	1					
ANR	5085901	ExpressionStatement	"xml << ""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"	398:4:13886:13962	5085204	38	True				
ANR	5085902	ShiftExpression	"xml << ""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"		5085204	0		<<			
ANR	5085903	Identifier	xml		5085204	0					
ANR	5085904	ShiftExpression	"""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"		5085204	1		<<			
ANR	5085905	PrimaryExpression	"""<reservationId>"""		5085204	0					
ANR	5085906	ShiftExpression	"reservationID << ""</reservationId>"" << std :: endl"		5085204	1		<<			
ANR	5085907	Identifier	reservationID		5085204	0					
ANR	5085908	ShiftExpression	"""</reservationId>"" << std :: endl"		5085204	1		<<			
ANR	5085909	PrimaryExpression	"""</reservationId>"""		5085204	0					
ANR	5085910	Identifier	std :: endl		5085204	1					
ANR	5085911	ExpressionStatement	"xml << ""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"	399:4:13968:14025	5085204	39	True				
ANR	5085912	ShiftExpression	"xml << ""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"		5085204	0		<<			
ANR	5085913	Identifier	xml		5085204	0					
ANR	5085914	ShiftExpression	"""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"		5085204	1		<<			
ANR	5085915	PrimaryExpression	"""<ownerId>"""		5085204	0					
ANR	5085916	ShiftExpression	"userID << ""</ownerId>"" << std :: endl"		5085204	1		<<			
ANR	5085917	Identifier	userID		5085204	0					
ANR	5085918	ShiftExpression	"""</ownerId>"" << std :: endl"		5085204	1		<<			
ANR	5085919	PrimaryExpression	"""</ownerId>"""		5085204	0					
ANR	5085920	Identifier	std :: endl		5085204	1					
ANR	5085921	ExpressionStatement	"xml << ""<groupSet>"" << std :: endl"	401:4:14036:14068	5085204	40	True				
ANR	5085922	ShiftExpression	"xml << ""<groupSet>"" << std :: endl"		5085204	0		<<			
ANR	5085923	Identifier	xml		5085204	0					
ANR	5085924	ShiftExpression	"""<groupSet>"" << std :: endl"		5085204	1		<<			
ANR	5085925	PrimaryExpression	"""<groupSet>"""		5085204	0					
ANR	5085926	Identifier	std :: endl		5085204	1					
ANR	5085927	ForStatement	for ( unsigned i = 0 ; i < groupNames . size ( ) ; ++ i )		5085204	41					
ANR	5085928	ForInit	unsigned i = 0 ;	402:13:14083:14097	5085204	0	True				
ANR	5085929	IdentifierDeclStatement	unsigned i = 0 ;		5085204	0					
ANR	5085930	IdentifierDecl	i = 0		5085204	0					
ANR	5085931	IdentifierDeclType	unsigned		5085204	0					
ANR	5085932	Identifier	i		5085204	1					
ANR	5085933	AssignmentExpression	i = 0		5085204	2		=			
ANR	5085934	Identifier	i		5085204	0					
ANR	5085935	PrimaryExpression	0		5085204	1					
ANR	5085936	Condition	i < groupNames . size ( )	402:29:14099:14119	5085204	1	True				
ANR	5085937	RelationalExpression	i < groupNames . size ( )		5085204	0		<			
ANR	5085938	Identifier	i		5085204	0					
ANR	5085939	CallExpression	groupNames . size ( )		5085204	1					
ANR	5085940	Callee	groupNames . size		5085204	0					
ANR	5085941	MemberAccess	groupNames . size		5085204	0					
ANR	5085942	Identifier	groupNames		5085204	0					
ANR	5085943	Identifier	size		5085204	1					
ANR	5085944	ArgumentList			5085204	1					
ANR	5085945	UnaryExpression	++ i	402:52:14122:14124	5085204	2	True				
ANR	5085946	IncDec	++		5085204	0					
ANR	5085947	Identifier	i		5085204	1					
ANR	5085948	CompoundStatement		118:58:4692:4692	5085204	3					
ANR	5085949	ExpressionStatement	"xml << xmlTag ( ""item"" , xmlTag ( ""groupId"" , groupNames [ i ] ) ) << std :: endl"	403:12:14142:14214	5085204	0	True				
ANR	5085950	ShiftExpression	"xml << xmlTag ( ""item"" , xmlTag ( ""groupId"" , groupNames [ i ] ) ) << std :: endl"		5085204	0		<<			
ANR	5085951	Identifier	xml		5085204	0					
ANR	5085952	ShiftExpression	"xmlTag ( ""item"" , xmlTag ( ""groupId"" , groupNames [ i ] ) ) << std :: endl"		5085204	1		<<			
ANR	5085953	CallExpression	"xmlTag ( ""item"" , xmlTag ( ""groupId"" , groupNames [ i ] ) )"		5085204	0					
ANR	5085954	Callee	xmlTag		5085204	0					
ANR	5085955	Identifier	xmlTag		5085204	0					
ANR	5085956	ArgumentList	"""item"""		5085204	1					
ANR	5085957	Argument	"""item"""		5085204	0					
ANR	5085958	PrimaryExpression	"""item"""		5085204	0					
ANR	5085959	Argument	"xmlTag ( ""groupId"" , groupNames [ i ] )"		5085204	1					
ANR	5085960	CallExpression	"xmlTag ( ""groupId"" , groupNames [ i ] )"		5085204	0					
ANR	5085961	Callee	xmlTag		5085204	0					
ANR	5085962	Identifier	xmlTag		5085204	0					
ANR	5085963	ArgumentList	"""groupId"""		5085204	1					
ANR	5085964	Argument	"""groupId"""		5085204	0					
ANR	5085965	PrimaryExpression	"""groupId"""		5085204	0					
ANR	5085966	Argument	groupNames [ i ]		5085204	1					
ANR	5085967	ArrayIndexing	groupNames [ i ]		5085204	0					
ANR	5085968	Identifier	groupNames		5085204	0					
ANR	5085969	Identifier	i		5085204	1					
ANR	5085970	Identifier	std :: endl		5085204	1					
ANR	5085971	ExpressionStatement	"xml << ""</groupSet>"" << std :: endl"	405:4:14230:14263	5085204	42	True				
ANR	5085972	ShiftExpression	"xml << ""</groupSet>"" << std :: endl"		5085204	0		<<			
ANR	5085973	Identifier	xml		5085204	0					
ANR	5085974	ShiftExpression	"""</groupSet>"" << std :: endl"		5085204	1		<<			
ANR	5085975	PrimaryExpression	"""</groupSet>"""		5085204	0					
ANR	5085976	Identifier	std :: endl		5085204	1					
ANR	5085977	ExpressionStatement	"xml << ""<instancesSet>"" << std :: endl"	407:4:14270:14306	5085204	43	True				
ANR	5085978	ShiftExpression	"xml << ""<instancesSet>"" << std :: endl"		5085204	0		<<			
ANR	5085979	Identifier	xml		5085204	0					
ANR	5085980	ShiftExpression	"""<instancesSet>"" << std :: endl"		5085204	1		<<			
ANR	5085981	PrimaryExpression	"""<instancesSet>"""		5085204	0					
ANR	5085982	Identifier	std :: endl		5085204	1					
ANR	5085983	ExpressionStatement	xml << user . instances [ instanceID ]	408:8:14316:14349	5085204	44	True				
ANR	5085984	ShiftExpression	xml << user . instances [ instanceID ]		5085204	0		<<			
ANR	5085985	Identifier	xml		5085204	0					
ANR	5085986	ArrayIndexing	user . instances [ instanceID ]		5085204	1					
ANR	5085987	MemberAccess	user . instances		5085204	0					
ANR	5085988	Identifier	user		5085204	0					
ANR	5085989	Identifier	instances		5085204	1					
ANR	5085990	Identifier	instanceID		5085204	1					
ANR	5085991	ExpressionStatement	"xml << ""</instancesSet>"" << std :: endl"	409:4:14355:14392	5085204	45	True				
ANR	5085992	ShiftExpression	"xml << ""</instancesSet>"" << std :: endl"		5085204	0		<<			
ANR	5085993	Identifier	xml		5085204	0					
ANR	5085994	ShiftExpression	"""</instancesSet>"" << std :: endl"		5085204	1		<<			
ANR	5085995	PrimaryExpression	"""</instancesSet>"""		5085204	0					
ANR	5085996	Identifier	std :: endl		5085204	1					
ANR	5085997	ExpressionStatement	"xml << ""</RunInstancesResponse>"" << std :: endl"	411:4:14399:14444	5085204	46	True				
ANR	5085998	ShiftExpression	"xml << ""</RunInstancesResponse>"" << std :: endl"		5085204	0		<<			
ANR	5085999	Identifier	xml		5085204	0					
ANR	5086000	ShiftExpression	"""</RunInstancesResponse>"" << std :: endl"		5085204	1		<<			
ANR	5086001	PrimaryExpression	"""</RunInstancesResponse>"""		5085204	0					
ANR	5086002	Identifier	std :: endl		5085204	1					
ANR	5086003	ExpressionStatement	reply = xml . str ( )	413:4:14451:14468	5085204	47	True				
ANR	5086004	AssignmentExpression	reply = xml . str ( )		5085204	0		=			
ANR	5086005	Identifier	reply		5085204	0					
ANR	5086006	CallExpression	xml . str ( )		5085204	1					
ANR	5086007	Callee	xml . str		5085204	0					
ANR	5086008	MemberAccess	xml . str		5085204	0					
ANR	5086009	Identifier	xml		5085204	0					
ANR	5086010	Identifier	str		5085204	1					
ANR	5086011	ArgumentList			5085204	1					
ANR	5086012	ReturnStatement	return true ;	414:4:14474:14485	5085204	48	True				
ANR	5086013	Identifier	true		5085204	0					
ANR	5086014	ReturnType	bool		5085204	1					
ANR	5086015	Identifier	handleRunInstances		5085204	2					
ANR	5086016	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5085204	3					
ANR	5086017	Parameter	AttributeValueMap & avm	285:25:9364:9386	5085204	0	True				
ANR	5086018	ParameterType	AttributeValueMap &		5085204	0					
ANR	5086019	Identifier	avm		5085204	1					
ANR	5086020	Parameter	std :: string & reply	285:50:9389:9407	5085204	1	True				
ANR	5086021	ParameterType	std :: string &		5085204	0					
ANR	5086022	Identifier	reply		5085204	1					
ANR	5086023	Parameter	unsigned requestNumber	285:71:9410:9431	5085204	2	True				
ANR	5086024	ParameterType	unsigned		5085204	0					
ANR	5086025	Identifier	requestNumber		5085204	1					
ANR	5086026	CFGEntryNode	ENTRY		5085204		True				
ANR	5086027	CFGExitNode	EXIT		5085204		True				
ANR	5086028	InfiniteForNode	true		5085204		True				
ANR	5086029	Symbol	publicDNSName		5085204						
ANR	5086030	Symbol	userData		5085204						
ANR	5086031	Symbol	user . groups . find		5085204						
ANR	5086032	Symbol	* groupNames		5085204						
ANR	5086033	Symbol	rID		5085204						
ANR	5086034	Symbol	userID		5085204						
ANR	5086035	Symbol	requestNumber		5085204						
ANR	5086036	Symbol	instanceState		5085204						
ANR	5086037	Symbol	xml		5085204						
ANR	5086038	Symbol	* user . instances		5085204						
ANR	5086039	Symbol	reply		5085204						
ANR	5086040	Symbol	user . groups		5085204						
ANR	5086041	Symbol	privateDNSName		5085204						
ANR	5086042	Symbol	getObject		5085204						
ANR	5086043	Symbol	* user		5085204						
ANR	5086044	Symbol	minCount . empty		5085204						
ANR	5086045	Symbol	edh		5085204						
ANR	5086046	Symbol	validateAndAcquireUser		5085204						
ANR	5086047	Symbol	instanceType . empty		5085204						
ANR	5086048	Symbol	sgParameterName		5085204						
ANR	5086049	Symbol	stderr		5085204						
ANR	5086050	Symbol	Keypair		5085204						
ANR	5086051	Symbol	instanceID		5085204						
ANR	5086052	Symbol	std :: string		5085204						
ANR	5086053	Symbol	imageID . empty		5085204						
ANR	5086054	Symbol	requestID		5085204						
ANR	5086055	Symbol	true		5085204						
ANR	5086056	Symbol	maxCount . empty		5085204						
ANR	5086057	Symbol	groupNames . size		5085204						
ANR	5086058	Symbol	minCount		5085204						
ANR	5086059	Symbol	reply . c_str		5085204						
ANR	5086060	Symbol	xml . str		5085204						
ANR	5086061	Symbol	imageID		5085204						
ANR	5086062	Symbol	Instance		5085204						
ANR	5086063	Symbol	error		5085204						
ANR	5086064	Symbol	sgParameterName . str		5085204						
ANR	5086065	Symbol	maxCount		5085204						
ANR	5086066	Symbol	found		5085204						
ANR	5086067	Symbol	user . keypairs		5085204						
ANR	5086068	Symbol	userData . empty		5085204						
ANR	5086069	Symbol	keyName . empty		5085204						
ANR	5086070	Symbol	user . groups . end		5085204						
ANR	5086071	Symbol	user . instances . size		5085204						
ANR	5086072	Symbol	avm		5085204						
ANR	5086073	Symbol	* instanceID		5085204						
ANR	5086074	Symbol	groupNames . empty		5085204						
ANR	5086075	Symbol	error . str		5085204						
ANR	5086076	Symbol	kp		5085204						
ANR	5086077	Symbol	ci		5085204						
ANR	5086078	Symbol	instanceType		5085204						
ANR	5086079	Symbol	false		5085204						
ANR	5086080	Symbol	keyName		5085204						
ANR	5086081	Symbol	i		5085204						
ANR	5086082	Symbol	groupNames		5085204						
ANR	5086083	Symbol	sgName		5085204						
ANR	5086084	Symbol	sgName . empty		5085204						
ANR	5086085	Symbol	* i		5085204						
ANR	5086086	Symbol	reservationID		5085204						
ANR	5086087	Symbol	xmlTag		5085204						
ANR	5086088	Symbol	user . instances		5085204						
ANR	5086089	Symbol	user		5085204						
ANR	5086090	Function	handleTerminateInstances	417:0:14490:16593							
ANR	5086091	FunctionDef	"handleTerminateInstances (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5086090	0					
ANR	5086092	CompoundStatement		417:102:14592:16593	5086090	0					
ANR	5086093	IdentifierDeclStatement	bool found = false ;	420:4:14657:14675	5086090	0	True				
ANR	5086094	IdentifierDecl	found = false		5086090	0					
ANR	5086095	IdentifierDeclType	bool		5086090	0					
ANR	5086096	Identifier	found		5086090	1					
ANR	5086097	AssignmentExpression	found = false		5086090	2		=			
ANR	5086098	Identifier	false		5086090	0					
ANR	5086099	Identifier	false		5086090	1					
ANR	5086100	IdentifierDeclStatement	std :: string userID ;	421:4:14681:14699	5086090	1	True				
ANR	5086101	IdentifierDecl	userID		5086090	0					
ANR	5086102	IdentifierDeclType	std :: string		5086090	0					
ANR	5086103	Identifier	userID		5086090	1					
ANR	5086104	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	422:4:14705:14770	5086090	2	True				
ANR	5086105	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086090	0					
ANR	5086106	IdentifierDeclType	User &		5086090	0					
ANR	5086107	Identifier	user		5086090	1					
ANR	5086108	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086090	2		=			
ANR	5086109	Identifier	user		5086090	0					
ANR	5086110	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5086090	1					
ANR	5086111	Callee	validateAndAcquireUser		5086090	0					
ANR	5086112	Identifier	validateAndAcquireUser		5086090	0					
ANR	5086113	ArgumentList	avm		5086090	1					
ANR	5086114	Argument	avm		5086090	0					
ANR	5086115	Identifier	avm		5086090	0					
ANR	5086116	Argument	userID		5086090	1					
ANR	5086117	Identifier	userID		5086090	0					
ANR	5086118	Argument	reply		5086090	2					
ANR	5086119	Identifier	reply		5086090	0					
ANR	5086120	Argument	found		5086090	3					
ANR	5086121	Identifier	found		5086090	0					
ANR	5086122	IfStatement	if ( ! found )		5086090	3					
ANR	5086123	Condition	! found	423:8:14780:14786	5086090	0	True				
ANR	5086124	UnaryOperationExpression	! found		5086090	0					
ANR	5086125	UnaryOperator	!		5086090	0					
ANR	5086126	Identifier	found		5086090	1					
ANR	5086127	CompoundStatement		7:18:197:197	5086090	1					
ANR	5086128	ReturnStatement	return false ;	423:20:14792:14804	5086090	0	True				
ANR	5086129	Identifier	false		5086090	0					
ANR	5086130	IdentifierDeclStatement	"std :: string instanceID = getObject < std :: string > ( avm , ""InstanceId.1"" , found ) ;"	426:4:14871:14950	5086090	4	True				
ANR	5086131	IdentifierDecl	"instanceID = getObject < std :: string > ( avm , ""InstanceId.1"" , found )"		5086090	0					
ANR	5086132	IdentifierDeclType	std :: string		5086090	0					
ANR	5086133	Identifier	instanceID		5086090	1					
ANR	5086134	AssignmentExpression	"instanceID = getObject < std :: string > ( avm , ""InstanceId.1"" , found )"		5086090	2		=			
ANR	5086135	Identifier	instanceID		5086090	0					
ANR	5086136	RelationalExpression	"getObject < std :: string > ( avm , ""InstanceId.1"" , found )"		5086090	1		<			
ANR	5086137	Identifier	getObject		5086090	0					
ANR	5086138	RelationalExpression	"std :: string > ( avm , ""InstanceId.1"" , found )"		5086090	1		>			
ANR	5086139	Identifier	std :: string		5086090	0					
ANR	5086140	Expression	"avm , ""InstanceId.1"" , found"		5086090	1					
ANR	5086141	Identifier	avm		5086090	0					
ANR	5086142	Expression	"""InstanceId.1"" , found"		5086090	1					
ANR	5086143	PrimaryExpression	"""InstanceId.1"""		5086090	0					
ANR	5086144	Identifier	found		5086090	1					
ANR	5086145	IfStatement	if ( ( ! found ) || instanceID . empty ( ) )		5086090	5					
ANR	5086146	Condition	( ! found ) || instanceID . empty ( )	427:8:14960:14990	5086090	0	True				
ANR	5086147	OrExpression	( ! found ) || instanceID . empty ( )		5086090	0		||			
ANR	5086148	UnaryOperationExpression	! found		5086090	0					
ANR	5086149	UnaryOperator	!		5086090	0					
ANR	5086150	Identifier	found		5086090	1					
ANR	5086151	CallExpression	instanceID . empty ( )		5086090	1					
ANR	5086152	Callee	instanceID . empty		5086090	0					
ANR	5086153	MemberAccess	instanceID . empty		5086090	0					
ANR	5086154	Identifier	instanceID		5086090	0					
ANR	5086155	Identifier	empty		5086090	1					
ANR	5086156	ArgumentList			5086090	1					
ANR	5086157	CompoundStatement		11:42:401:401	5086090	1					
ANR	5086158	ExpressionStatement	"fprintf ( stderr , ""Failed to find instanceID in query.\\n"" )"	428:8:15004:15062	5086090	0	True				
ANR	5086159	CallExpression	"fprintf ( stderr , ""Failed to find instanceID in query.\\n"" )"		5086090	0					
ANR	5086160	Callee	fprintf		5086090	0					
ANR	5086161	Identifier	fprintf		5086090	0					
ANR	5086162	ArgumentList	stderr		5086090	1					
ANR	5086163	Argument	stderr		5086090	0					
ANR	5086164	Identifier	stderr		5086090	0					
ANR	5086165	Argument	"""Failed to find instanceID in query.\\n"""		5086090	1					
ANR	5086166	PrimaryExpression	"""Failed to find instanceID in query.\\n"""		5086090	0					
ANR	5086167	ExpressionStatement	"reply = ""Required parameter InstanceId.1 missing or empty.\\n"""	429:8:15072:15133	5086090	1	True				
ANR	5086168	AssignmentExpression	"reply = ""Required parameter InstanceId.1 missing or empty.\\n"""		5086090	0		=			
ANR	5086169	Identifier	reply		5086090	0					
ANR	5086170	PrimaryExpression	"""Required parameter InstanceId.1 missing or empty.\\n"""		5086090	1					
ANR	5086171	ReturnStatement	return false ;	430:8:15143:15155	5086090	2	True				
ANR	5086172	Identifier	false		5086090	0					
ANR	5086173	IdentifierDeclStatement	"Instance instance = getObject < Instance > ( user . instances , instanceID , found ) ;"	433:4:15172:15250	5086090	6	True				
ANR	5086174	IdentifierDecl	"instance = getObject < Instance > ( user . instances , instanceID , found )"		5086090	0					
ANR	5086175	IdentifierDeclType	Instance		5086090	0					
ANR	5086176	Identifier	instance		5086090	1					
ANR	5086177	AssignmentExpression	"instance = getObject < Instance > ( user . instances , instanceID , found )"		5086090	2		=			
ANR	5086178	Identifier	instance		5086090	0					
ANR	5086179	RelationalExpression	"getObject < Instance > ( user . instances , instanceID , found )"		5086090	1		<			
ANR	5086180	Identifier	getObject		5086090	0					
ANR	5086181	RelationalExpression	"Instance > ( user . instances , instanceID , found )"		5086090	1		>			
ANR	5086182	Identifier	Instance		5086090	0					
ANR	5086183	Expression	"user . instances , instanceID , found"		5086090	1					
ANR	5086184	MemberAccess	user . instances		5086090	0					
ANR	5086185	Identifier	user		5086090	0					
ANR	5086186	Identifier	instances		5086090	1					
ANR	5086187	Expression	"instanceID , found"		5086090	1					
ANR	5086188	Identifier	instanceID		5086090	0					
ANR	5086189	Identifier	found		5086090	1					
ANR	5086190	IfStatement	if ( ! found )		5086090	7					
ANR	5086191	Condition	! found	434:8:15260:15266	5086090	0	True				
ANR	5086192	UnaryOperationExpression	! found		5086090	0					
ANR	5086193	UnaryOperator	!		5086090	0					
ANR	5086194	Identifier	found		5086090	1					
ANR	5086195	CompoundStatement		19:8:687:711	5086090	1					
ANR	5086196	IdentifierDeclStatement	std :: ostringstream error ;	435:8:15280:15304	5086090	0	True				
ANR	5086197	IdentifierDecl	error		5086090	0					
ANR	5086198	IdentifierDeclType	std :: ostringstream		5086090	0					
ANR	5086199	Identifier	error		5086090	1					
ANR	5086200	ExpressionStatement	"error << ""Instance ID '"" << instanceID << ""' does not exist."" << std :: endl"	436:8:15314:15388	5086090	1	True				
ANR	5086201	ShiftExpression	"error << ""Instance ID '"" << instanceID << ""' does not exist."" << std :: endl"		5086090	0		<<			
ANR	5086202	Identifier	error		5086090	0					
ANR	5086203	ShiftExpression	"""Instance ID '"" << instanceID << ""' does not exist."" << std :: endl"		5086090	1		<<			
ANR	5086204	PrimaryExpression	"""Instance ID '"""		5086090	0					
ANR	5086205	ShiftExpression	"instanceID << ""' does not exist."" << std :: endl"		5086090	1		<<			
ANR	5086206	Identifier	instanceID		5086090	0					
ANR	5086207	ShiftExpression	"""' does not exist."" << std :: endl"		5086090	1		<<			
ANR	5086208	PrimaryExpression	"""' does not exist."""		5086090	0					
ANR	5086209	Identifier	std :: endl		5086090	1					
ANR	5086210	ExpressionStatement	reply = error . str ( )	437:8:15398:15417	5086090	2	True				
ANR	5086211	AssignmentExpression	reply = error . str ( )		5086090	0		=			
ANR	5086212	Identifier	reply		5086090	0					
ANR	5086213	CallExpression	error . str ( )		5086090	1					
ANR	5086214	Callee	error . str		5086090	0					
ANR	5086215	MemberAccess	error . str		5086090	0					
ANR	5086216	Identifier	error		5086090	0					
ANR	5086217	Identifier	str		5086090	1					
ANR	5086218	ArgumentList			5086090	1					
ANR	5086219	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	438:8:15427:15465	5086090	3	True				
ANR	5086220	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5086090	0					
ANR	5086221	Callee	fprintf		5086090	0					
ANR	5086222	Identifier	fprintf		5086090	0					
ANR	5086223	ArgumentList	stderr		5086090	1					
ANR	5086224	Argument	stderr		5086090	0					
ANR	5086225	Identifier	stderr		5086090	0					
ANR	5086226	Argument	"""%s"""		5086090	1					
ANR	5086227	PrimaryExpression	"""%s"""		5086090	0					
ANR	5086228	Argument	reply . c_str ( )		5086090	2					
ANR	5086229	CallExpression	reply . c_str ( )		5086090	0					
ANR	5086230	Callee	reply . c_str		5086090	0					
ANR	5086231	MemberAccess	reply . c_str		5086090	0					
ANR	5086232	Identifier	reply		5086090	0					
ANR	5086233	Identifier	c_str		5086090	1					
ANR	5086234	ArgumentList			5086090	1					
ANR	5086235	ReturnStatement	return false ;	439:8:15475:15487	5086090	4	True				
ANR	5086236	Identifier	false		5086090	0					
ANR	5086237	IdentifierDeclStatement	InstanceState oldInstanceState = instance . instanceState ;	443:4:15549:15604	5086090	8	True				
ANR	5086238	IdentifierDecl	oldInstanceState = instance . instanceState		5086090	0					
ANR	5086239	IdentifierDeclType	InstanceState		5086090	0					
ANR	5086240	Identifier	oldInstanceState		5086090	1					
ANR	5086241	AssignmentExpression	oldInstanceState = instance . instanceState		5086090	2		=			
ANR	5086242	Identifier	oldInstanceState		5086090	0					
ANR	5086243	MemberAccess	instance . instanceState		5086090	1					
ANR	5086244	Identifier	instance		5086090	0					
ANR	5086245	Identifier	instanceState		5086090	1					
ANR	5086246	IdentifierDeclStatement	"InstanceState newInstanceState = InstanceState ( ""terminated"" ) ;"	444:4:15610:15672	5086090	9	True				
ANR	5086247	IdentifierDecl	"newInstanceState = InstanceState ( ""terminated"" )"		5086090	0					
ANR	5086248	IdentifierDeclType	InstanceState		5086090	0					
ANR	5086249	Identifier	newInstanceState		5086090	1					
ANR	5086250	AssignmentExpression	"newInstanceState = InstanceState ( ""terminated"" )"		5086090	2		=			
ANR	5086251	Identifier	newInstanceState		5086090	0					
ANR	5086252	CallExpression	"InstanceState ( ""terminated"" )"		5086090	1					
ANR	5086253	Callee	InstanceState		5086090	0					
ANR	5086254	Identifier	InstanceState		5086090	0					
ANR	5086255	ArgumentList	"""terminated"""		5086090	1					
ANR	5086256	Argument	"""terminated"""		5086090	0					
ANR	5086257	PrimaryExpression	"""terminated"""		5086090	0					
ANR	5086258	ExpressionStatement	user . instances [ instanceID ] . instanceState = newInstanceState	445:4:15678:15739	5086090	10	True				
ANR	5086259	AssignmentExpression	user . instances [ instanceID ] . instanceState = newInstanceState		5086090	0		=			
ANR	5086260	MemberAccess	user . instances [ instanceID ] . instanceState		5086090	0					
ANR	5086261	ArrayIndexing	user . instances [ instanceID ]		5086090	0					
ANR	5086262	MemberAccess	user . instances		5086090	0					
ANR	5086263	Identifier	user		5086090	0					
ANR	5086264	Identifier	instances		5086090	1					
ANR	5086265	Identifier	instanceID		5086090	1					
ANR	5086266	Identifier	instanceState		5086090	1					
ANR	5086267	Identifier	newInstanceState		5086090	1					
ANR	5086268	IdentifierDeclStatement	std :: ostringstream xml ;	448:4:15778:15800	5086090	11	True				
ANR	5086269	IdentifierDecl	xml		5086090	0					
ANR	5086270	IdentifierDeclType	std :: ostringstream		5086090	0					
ANR	5086271	Identifier	xml		5086090	1					
ANR	5086272	ExpressionStatement	"xml << ""<TerminateInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	449:4:15806:15907	5086090	12	True				
ANR	5086273	ShiftExpression	"xml << ""<TerminateInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086090	0		<<			
ANR	5086274	Identifier	xml		5086090	0					
ANR	5086275	ShiftExpression	"""<TerminateInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086090	1		<<			
ANR	5086276	PrimaryExpression	"""<TerminateInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5086090	0					
ANR	5086277	Identifier	std :: endl		5086090	1					
ANR	5086278	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	451:4:15914:15933	5086090	13	True				
ANR	5086279	IdentifierDecl	"rID [ ] = ""1234"""		5086090	0					
ANR	5086280	IdentifierDeclType	char [ ]		5086090	0					
ANR	5086281	Identifier	rID		5086090	1					
ANR	5086282	AssignmentExpression	"rID [ ] = ""1234"""		5086090	2		=			
ANR	5086283	Identifier	rID		5086090	0					
ANR	5086284	PrimaryExpression	"""1234"""		5086090	1					
ANR	5086285	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	452:4:15939:15992	5086090	14	True				
ANR	5086286	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5086090	0					
ANR	5086287	Callee	snprintf		5086090	0					
ANR	5086288	Identifier	snprintf		5086090	0					
ANR	5086289	ArgumentList	rID		5086090	1					
ANR	5086290	Argument	rID		5086090	0					
ANR	5086291	Identifier	rID		5086090	0					
ANR	5086292	Argument	sizeof ( rID )		5086090	1					
ANR	5086293	SizeofExpression	sizeof ( rID )		5086090	0					
ANR	5086294	Sizeof	sizeof		5086090	0					
ANR	5086295	SizeofOperand	rID		5086090	1					
ANR	5086296	Argument	"""%.4x"""		5086090	2					
ANR	5086297	PrimaryExpression	"""%.4x"""		5086090	0					
ANR	5086298	Argument	requestNumber		5086090	3					
ANR	5086299	Identifier	requestNumber		5086090	0					
ANR	5086300	IdentifierDeclStatement	std :: string requestID = rID ;	453:4:15998:16025	5086090	15	True				
ANR	5086301	IdentifierDecl	requestID = rID		5086090	0					
ANR	5086302	IdentifierDeclType	std :: string		5086090	0					
ANR	5086303	Identifier	requestID		5086090	1					
ANR	5086304	AssignmentExpression	requestID = rID		5086090	2		=			
ANR	5086305	Identifier	rID		5086090	0					
ANR	5086306	Identifier	rID		5086090	1					
ANR	5086307	ExpressionStatement	"xml << xmlTag ( ""requestId"" , rID ) << std :: endl"	455:4:16032:16078	5086090	16	True				
ANR	5086308	ShiftExpression	"xml << xmlTag ( ""requestId"" , rID ) << std :: endl"		5086090	0		<<			
ANR	5086309	Identifier	xml		5086090	0					
ANR	5086310	ShiftExpression	"xmlTag ( ""requestId"" , rID ) << std :: endl"		5086090	1		<<			
ANR	5086311	CallExpression	"xmlTag ( ""requestId"" , rID )"		5086090	0					
ANR	5086312	Callee	xmlTag		5086090	0					
ANR	5086313	Identifier	xmlTag		5086090	0					
ANR	5086314	ArgumentList	"""requestId"""		5086090	1					
ANR	5086315	Argument	"""requestId"""		5086090	0					
ANR	5086316	PrimaryExpression	"""requestId"""		5086090	0					
ANR	5086317	Argument	rID		5086090	1					
ANR	5086318	Identifier	rID		5086090	0					
ANR	5086319	Identifier	std :: endl		5086090	1					
ANR	5086320	ExpressionStatement	"xml << ""<instancesSet>"" << std :: endl"	456:4:16084:16120	5086090	17	True				
ANR	5086321	ShiftExpression	"xml << ""<instancesSet>"" << std :: endl"		5086090	0		<<			
ANR	5086322	Identifier	xml		5086090	0					
ANR	5086323	ShiftExpression	"""<instancesSet>"" << std :: endl"		5086090	1		<<			
ANR	5086324	PrimaryExpression	"""<instancesSet>"""		5086090	0					
ANR	5086325	Identifier	std :: endl		5086090	1					
ANR	5086326	ExpressionStatement	"xml << xmlTag ( ""instanceId"" , instanceID ) << std :: endl"	457:8:16130:16184	5086090	18	True				
ANR	5086327	ShiftExpression	"xml << xmlTag ( ""instanceId"" , instanceID ) << std :: endl"		5086090	0		<<			
ANR	5086328	Identifier	xml		5086090	0					
ANR	5086329	ShiftExpression	"xmlTag ( ""instanceId"" , instanceID ) << std :: endl"		5086090	1		<<			
ANR	5086330	CallExpression	"xmlTag ( ""instanceId"" , instanceID )"		5086090	0					
ANR	5086331	Callee	xmlTag		5086090	0					
ANR	5086332	Identifier	xmlTag		5086090	0					
ANR	5086333	ArgumentList	"""instanceId"""		5086090	1					
ANR	5086334	Argument	"""instanceId"""		5086090	0					
ANR	5086335	PrimaryExpression	"""instanceId"""		5086090	0					
ANR	5086336	Argument	instanceID		5086090	1					
ANR	5086337	Identifier	instanceID		5086090	0					
ANR	5086338	Identifier	std :: endl		5086090	1					
ANR	5086339	ExpressionStatement	"xml << ""<currentState>"" << std :: endl"	458:8:16194:16230	5086090	19	True				
ANR	5086340	ShiftExpression	"xml << ""<currentState>"" << std :: endl"		5086090	0		<<			
ANR	5086341	Identifier	xml		5086090	0					
ANR	5086342	ShiftExpression	"""<currentState>"" << std :: endl"		5086090	1		<<			
ANR	5086343	PrimaryExpression	"""<currentState>"""		5086090	0					
ANR	5086344	Identifier	std :: endl		5086090	1					
ANR	5086345	ExpressionStatement	xml << newInstanceState	459:12:16244:16267	5086090	20	True				
ANR	5086346	ShiftExpression	xml << newInstanceState		5086090	0		<<			
ANR	5086347	Identifier	xml		5086090	0					
ANR	5086348	Identifier	newInstanceState		5086090	1					
ANR	5086349	ExpressionStatement	"xml << ""</currentState>"" << std :: endl"	460:8:16277:16314	5086090	21	True				
ANR	5086350	ShiftExpression	"xml << ""</currentState>"" << std :: endl"		5086090	0		<<			
ANR	5086351	Identifier	xml		5086090	0					
ANR	5086352	ShiftExpression	"""</currentState>"" << std :: endl"		5086090	1		<<			
ANR	5086353	PrimaryExpression	"""</currentState>"""		5086090	0					
ANR	5086354	Identifier	std :: endl		5086090	1					
ANR	5086355	ExpressionStatement	"xml << ""<previousState>"" << std :: endl"	461:8:16324:16361	5086090	22	True				
ANR	5086356	ShiftExpression	"xml << ""<previousState>"" << std :: endl"		5086090	0		<<			
ANR	5086357	Identifier	xml		5086090	0					
ANR	5086358	ShiftExpression	"""<previousState>"" << std :: endl"		5086090	1		<<			
ANR	5086359	PrimaryExpression	"""<previousState>"""		5086090	0					
ANR	5086360	Identifier	std :: endl		5086090	1					
ANR	5086361	ExpressionStatement	xml << oldInstanceState	462:12:16375:16398	5086090	23	True				
ANR	5086362	ShiftExpression	xml << oldInstanceState		5086090	0		<<			
ANR	5086363	Identifier	xml		5086090	0					
ANR	5086364	Identifier	oldInstanceState		5086090	1					
ANR	5086365	ExpressionStatement	"xml << ""</previousState>"" << std :: endl"	463:8:16408:16446	5086090	24	True				
ANR	5086366	ShiftExpression	"xml << ""</previousState>"" << std :: endl"		5086090	0		<<			
ANR	5086367	Identifier	xml		5086090	0					
ANR	5086368	ShiftExpression	"""</previousState>"" << std :: endl"		5086090	1		<<			
ANR	5086369	PrimaryExpression	"""</previousState>"""		5086090	0					
ANR	5086370	Identifier	std :: endl		5086090	1					
ANR	5086371	ExpressionStatement	"xml << ""</instancesSet>"" << std :: endl"	464:4:16452:16489	5086090	25	True				
ANR	5086372	ShiftExpression	"xml << ""</instancesSet>"" << std :: endl"		5086090	0		<<			
ANR	5086373	Identifier	xml		5086090	0					
ANR	5086374	ShiftExpression	"""</instancesSet>"" << std :: endl"		5086090	1		<<			
ANR	5086375	PrimaryExpression	"""</instancesSet>"""		5086090	0					
ANR	5086376	Identifier	std :: endl		5086090	1					
ANR	5086377	ExpressionStatement	"xml << ""</TerminateInstancesResponse>"" << std :: endl"	465:4:16495:16546	5086090	26	True				
ANR	5086378	ShiftExpression	"xml << ""</TerminateInstancesResponse>"" << std :: endl"		5086090	0		<<			
ANR	5086379	Identifier	xml		5086090	0					
ANR	5086380	ShiftExpression	"""</TerminateInstancesResponse>"" << std :: endl"		5086090	1		<<			
ANR	5086381	PrimaryExpression	"""</TerminateInstancesResponse>"""		5086090	0					
ANR	5086382	Identifier	std :: endl		5086090	1					
ANR	5086383	ExpressionStatement	reply = xml . str ( )	467:4:16557:16574	5086090	27	True				
ANR	5086384	AssignmentExpression	reply = xml . str ( )		5086090	0		=			
ANR	5086385	Identifier	reply		5086090	0					
ANR	5086386	CallExpression	xml . str ( )		5086090	1					
ANR	5086387	Callee	xml . str		5086090	0					
ANR	5086388	MemberAccess	xml . str		5086090	0					
ANR	5086389	Identifier	xml		5086090	0					
ANR	5086390	Identifier	str		5086090	1					
ANR	5086391	ArgumentList			5086090	1					
ANR	5086392	ReturnStatement	return true ;	468:4:16580:16591	5086090	28	True				
ANR	5086393	Identifier	true		5086090	0					
ANR	5086394	ReturnType	bool		5086090	1					
ANR	5086395	Identifier	handleTerminateInstances		5086090	2					
ANR	5086396	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5086090	3					
ANR	5086397	Parameter	AttributeValueMap & avm	417:31:14521:14543	5086090	0	True				
ANR	5086398	ParameterType	AttributeValueMap &		5086090	0					
ANR	5086399	Identifier	avm		5086090	1					
ANR	5086400	Parameter	std :: string & reply	417:56:14546:14564	5086090	1	True				
ANR	5086401	ParameterType	std :: string &		5086090	0					
ANR	5086402	Identifier	reply		5086090	1					
ANR	5086403	Parameter	unsigned requestNumber	417:77:14567:14588	5086090	2	True				
ANR	5086404	ParameterType	unsigned		5086090	0					
ANR	5086405	Identifier	requestNumber		5086090	1					
ANR	5086406	CFGEntryNode	ENTRY		5086090		True				
ANR	5086407	CFGExitNode	EXIT		5086090		True				
ANR	5086408	Symbol	instance		5086090						
ANR	5086409	Symbol	Instance		5086090						
ANR	5086410	Symbol	error		5086090						
ANR	5086411	Symbol	rID		5086090						
ANR	5086412	Symbol	userID		5086090						
ANR	5086413	Symbol	requestNumber		5086090						
ANR	5086414	Symbol	found		5086090						
ANR	5086415	Symbol	InstanceState		5086090						
ANR	5086416	Symbol	oldInstanceState		5086090						
ANR	5086417	Symbol	user . instances [ instanceID ] . instanceState		5086090						
ANR	5086418	Symbol	xml		5086090						
ANR	5086419	Symbol	avm		5086090						
ANR	5086420	Symbol	newInstanceState		5086090						
ANR	5086421	Symbol	* instanceID		5086090						
ANR	5086422	Symbol	* user . instances		5086090						
ANR	5086423	Symbol	reply		5086090						
ANR	5086424	Symbol	instanceID . empty		5086090						
ANR	5086425	Symbol	instance . instanceState		5086090						
ANR	5086426	Symbol	getObject		5086090						
ANR	5086427	Symbol	error . str		5086090						
ANR	5086428	Symbol	* user		5086090						
ANR	5086429	Symbol	false		5086090						
ANR	5086430	Symbol	validateAndAcquireUser		5086090						
ANR	5086431	Symbol	stderr		5086090						
ANR	5086432	Symbol	instanceID		5086090						
ANR	5086433	Symbol	std :: string		5086090						
ANR	5086434	Symbol	requestID		5086090						
ANR	5086435	Symbol	true		5086090						
ANR	5086436	Symbol	user . instances		5086090						
ANR	5086437	Symbol	user		5086090						
ANR	5086438	Symbol	reply . c_str		5086090						
ANR	5086439	Symbol	xml . str		5086090						
ANR	5086440	Function	handleDescribeInstances	471:0:16596:18750							
ANR	5086441	FunctionDef	"handleDescribeInstances (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5086440	0					
ANR	5086442	CompoundStatement		471:101:16697:18750	5086440	0					
ANR	5086443	IdentifierDeclStatement	bool found = false ;	474:4:16761:16779	5086440	0	True				
ANR	5086444	IdentifierDecl	found = false		5086440	0					
ANR	5086445	IdentifierDeclType	bool		5086440	0					
ANR	5086446	Identifier	found		5086440	1					
ANR	5086447	AssignmentExpression	found = false		5086440	2		=			
ANR	5086448	Identifier	false		5086440	0					
ANR	5086449	Identifier	false		5086440	1					
ANR	5086450	IdentifierDeclStatement	std :: string userID ;	475:4:16785:16803	5086440	1	True				
ANR	5086451	IdentifierDecl	userID		5086440	0					
ANR	5086452	IdentifierDeclType	std :: string		5086440	0					
ANR	5086453	Identifier	userID		5086440	1					
ANR	5086454	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	476:4:16809:16874	5086440	2	True				
ANR	5086455	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086440	0					
ANR	5086456	IdentifierDeclType	User &		5086440	0					
ANR	5086457	Identifier	user		5086440	1					
ANR	5086458	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086440	2		=			
ANR	5086459	Identifier	user		5086440	0					
ANR	5086460	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5086440	1					
ANR	5086461	Callee	validateAndAcquireUser		5086440	0					
ANR	5086462	Identifier	validateAndAcquireUser		5086440	0					
ANR	5086463	ArgumentList	avm		5086440	1					
ANR	5086464	Argument	avm		5086440	0					
ANR	5086465	Identifier	avm		5086440	0					
ANR	5086466	Argument	userID		5086440	1					
ANR	5086467	Identifier	userID		5086440	0					
ANR	5086468	Argument	reply		5086440	2					
ANR	5086469	Identifier	reply		5086440	0					
ANR	5086470	Argument	found		5086440	3					
ANR	5086471	Identifier	found		5086440	0					
ANR	5086472	IfStatement	if ( ! found )		5086440	3					
ANR	5086473	Condition	! found	477:8:16884:16890	5086440	0	True				
ANR	5086474	UnaryOperationExpression	! found		5086440	0					
ANR	5086475	UnaryOperator	!		5086440	0					
ANR	5086476	Identifier	found		5086440	1					
ANR	5086477	CompoundStatement		7:18:196:196	5086440	1					
ANR	5086478	ReturnStatement	return false ;	477:20:16896:16908	5086440	0	True				
ANR	5086479	Identifier	false		5086440	0					
ANR	5086480	IdentifierDeclStatement	std :: ostringstream xml ;	479:4:16917:16939	5086440	4	True				
ANR	5086481	IdentifierDecl	xml		5086440	0					
ANR	5086482	IdentifierDeclType	std :: ostringstream		5086440	0					
ANR	5086483	Identifier	xml		5086440	1					
ANR	5086484	ExpressionStatement	"xml << ""<DescribeInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	480:4:16945:17045	5086440	5	True				
ANR	5086485	ShiftExpression	"xml << ""<DescribeInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086440	0		<<			
ANR	5086486	Identifier	xml		5086440	0					
ANR	5086487	ShiftExpression	"""<DescribeInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086440	1		<<			
ANR	5086488	PrimaryExpression	"""<DescribeInstancesResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5086440	0					
ANR	5086489	Identifier	std :: endl		5086440	1					
ANR	5086490	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	482:4:17052:17071	5086440	6	True				
ANR	5086491	IdentifierDecl	"rID [ ] = ""1234"""		5086440	0					
ANR	5086492	IdentifierDeclType	char [ ]		5086440	0					
ANR	5086493	Identifier	rID		5086440	1					
ANR	5086494	AssignmentExpression	"rID [ ] = ""1234"""		5086440	2		=			
ANR	5086495	Identifier	rID		5086440	0					
ANR	5086496	PrimaryExpression	"""1234"""		5086440	1					
ANR	5086497	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	483:4:17077:17130	5086440	7	True				
ANR	5086498	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5086440	0					
ANR	5086499	Callee	snprintf		5086440	0					
ANR	5086500	Identifier	snprintf		5086440	0					
ANR	5086501	ArgumentList	rID		5086440	1					
ANR	5086502	Argument	rID		5086440	0					
ANR	5086503	Identifier	rID		5086440	0					
ANR	5086504	Argument	sizeof ( rID )		5086440	1					
ANR	5086505	SizeofExpression	sizeof ( rID )		5086440	0					
ANR	5086506	Sizeof	sizeof		5086440	0					
ANR	5086507	SizeofOperand	rID		5086440	1					
ANR	5086508	Argument	"""%.4x"""		5086440	2					
ANR	5086509	PrimaryExpression	"""%.4x"""		5086440	0					
ANR	5086510	Argument	requestNumber		5086440	3					
ANR	5086511	Identifier	requestNumber		5086440	0					
ANR	5086512	IdentifierDeclStatement	std :: string requestID = rID ;	484:4:17136:17163	5086440	8	True				
ANR	5086513	IdentifierDecl	requestID = rID		5086440	0					
ANR	5086514	IdentifierDeclType	std :: string		5086440	0					
ANR	5086515	Identifier	requestID		5086440	1					
ANR	5086516	AssignmentExpression	requestID = rID		5086440	2		=			
ANR	5086517	Identifier	rID		5086440	0					
ANR	5086518	Identifier	rID		5086440	1					
ANR	5086519	ForStatement	for ( InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ; i != user . instances . end ( ) ; ++ i )		5086440	9					
ANR	5086520	ForInit	InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ;	487:9:17213:17273	5086440	0	True				
ANR	5086521	IdentifierDeclStatement	InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ;		5086440	0					
ANR	5086522	IdentifierDecl	i = user . instances . begin ( )		5086440	0					
ANR	5086523	IdentifierDeclType	InstanceIDToInstanceMap :: iterator		5086440	0					
ANR	5086524	Identifier	i		5086440	1					
ANR	5086525	AssignmentExpression	i = user . instances . begin ( )		5086440	2		=			
ANR	5086526	Identifier	i		5086440	0					
ANR	5086527	CallExpression	user . instances . begin ( )		5086440	1					
ANR	5086528	Callee	user . instances . begin		5086440	0					
ANR	5086529	MemberAccess	user . instances . begin		5086440	0					
ANR	5086530	MemberAccess	user . instances		5086440	0					
ANR	5086531	Identifier	user		5086440	0					
ANR	5086532	Identifier	instances		5086440	1					
ANR	5086533	Identifier	begin		5086440	1					
ANR	5086534	ArgumentList			5086440	1					
ANR	5086535	Condition	i != user . instances . end ( )	487:71:17275:17299	5086440	1	True				
ANR	5086536	EqualityExpression	i != user . instances . end ( )		5086440	0		!=			
ANR	5086537	Identifier	i		5086440	0					
ANR	5086538	CallExpression	user . instances . end ( )		5086440	1					
ANR	5086539	Callee	user . instances . end		5086440	0					
ANR	5086540	MemberAccess	user . instances . end		5086440	0					
ANR	5086541	MemberAccess	user . instances		5086440	0					
ANR	5086542	Identifier	user		5086440	0					
ANR	5086543	Identifier	instances		5086440	1					
ANR	5086544	Identifier	end		5086440	1					
ANR	5086545	ArgumentList			5086440	1					
ANR	5086546	UnaryExpression	++ i	487:98:17302:17304	5086440	2	True				
ANR	5086547	IncDec	++		5086440	0					
ANR	5086548	Identifier	i		5086440	1					
ANR	5086549	CompoundStatement		17:104:610:610	5086440	3					
ANR	5086550	ExpressionStatement	user . instances [ i -> first ] . instanceState . progress ( )	488:8:17318:17369	5086440	0	True				
ANR	5086551	CallExpression	user . instances [ i -> first ] . instanceState . progress ( )		5086440	0					
ANR	5086552	Callee	user . instances [ i -> first ] . instanceState . progress		5086440	0					
ANR	5086553	MemberAccess	user . instances [ i -> first ] . instanceState . progress		5086440	0					
ANR	5086554	MemberAccess	user . instances [ i -> first ] . instanceState		5086440	0					
ANR	5086555	ArrayIndexing	user . instances [ i -> first ]		5086440	0					
ANR	5086556	MemberAccess	user . instances		5086440	0					
ANR	5086557	Identifier	user		5086440	0					
ANR	5086558	Identifier	instances		5086440	1					
ANR	5086559	PtrMemberAccess	i -> first		5086440	1					
ANR	5086560	Identifier	i		5086440	0					
ANR	5086561	Identifier	first		5086440	1					
ANR	5086562	Identifier	instanceState		5086440	1					
ANR	5086563	Identifier	progress		5086440	1					
ANR	5086564	ArgumentList			5086440	1					
ANR	5086565	ExpressionStatement	"xml << xmlTag ( ""requestID"" , rID ) << std :: endl"	493:4:17525:17571	5086440	10	True				
ANR	5086566	ShiftExpression	"xml << xmlTag ( ""requestID"" , rID ) << std :: endl"		5086440	0		<<			
ANR	5086567	Identifier	xml		5086440	0					
ANR	5086568	ShiftExpression	"xmlTag ( ""requestID"" , rID ) << std :: endl"		5086440	1		<<			
ANR	5086569	CallExpression	"xmlTag ( ""requestID"" , rID )"		5086440	0					
ANR	5086570	Callee	xmlTag		5086440	0					
ANR	5086571	Identifier	xmlTag		5086440	0					
ANR	5086572	ArgumentList	"""requestID"""		5086440	1					
ANR	5086573	Argument	"""requestID"""		5086440	0					
ANR	5086574	PrimaryExpression	"""requestID"""		5086440	0					
ANR	5086575	Argument	rID		5086440	1					
ANR	5086576	Identifier	rID		5086440	0					
ANR	5086577	Identifier	std :: endl		5086440	1					
ANR	5086578	ExpressionStatement	"xml << ""<reservationSet>"" << std :: endl"	494:4:17577:17615	5086440	11	True				
ANR	5086579	ShiftExpression	"xml << ""<reservationSet>"" << std :: endl"		5086440	0		<<			
ANR	5086580	Identifier	xml		5086440	0					
ANR	5086581	ShiftExpression	"""<reservationSet>"" << std :: endl"		5086440	1		<<			
ANR	5086582	PrimaryExpression	"""<reservationSet>"""		5086440	0					
ANR	5086583	Identifier	std :: endl		5086440	1					
ANR	5086584	ForStatement	for ( InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ; i != user . instances . end ( ) ; ++ i )		5086440	12					
ANR	5086585	ForInit	InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ;	496:9:17631:17691	5086440	0	True				
ANR	5086586	IdentifierDeclStatement	InstanceIDToInstanceMap :: iterator i = user . instances . begin ( ) ;		5086440	0					
ANR	5086587	IdentifierDecl	i = user . instances . begin ( )		5086440	0					
ANR	5086588	IdentifierDeclType	InstanceIDToInstanceMap :: iterator		5086440	0					
ANR	5086589	Identifier	i		5086440	1					
ANR	5086590	AssignmentExpression	i = user . instances . begin ( )		5086440	2		=			
ANR	5086591	Identifier	i		5086440	0					
ANR	5086592	CallExpression	user . instances . begin ( )		5086440	1					
ANR	5086593	Callee	user . instances . begin		5086440	0					
ANR	5086594	MemberAccess	user . instances . begin		5086440	0					
ANR	5086595	MemberAccess	user . instances		5086440	0					
ANR	5086596	Identifier	user		5086440	0					
ANR	5086597	Identifier	instances		5086440	1					
ANR	5086598	Identifier	begin		5086440	1					
ANR	5086599	ArgumentList			5086440	1					
ANR	5086600	Condition	i != user . instances . end ( )	496:71:17693:17717	5086440	1	True				
ANR	5086601	EqualityExpression	i != user . instances . end ( )		5086440	0		!=			
ANR	5086602	Identifier	i		5086440	0					
ANR	5086603	CallExpression	user . instances . end ( )		5086440	1					
ANR	5086604	Callee	user . instances . end		5086440	0					
ANR	5086605	MemberAccess	user . instances . end		5086440	0					
ANR	5086606	MemberAccess	user . instances		5086440	0					
ANR	5086607	Identifier	user		5086440	0					
ANR	5086608	Identifier	instances		5086440	1					
ANR	5086609	Identifier	end		5086440	1					
ANR	5086610	ArgumentList			5086440	1					
ANR	5086611	UnaryExpression	++ i	496:98:17720:17722	5086440	2	True				
ANR	5086612	IncDec	++		5086440	0					
ANR	5086613	Identifier	i		5086440	1					
ANR	5086614	CompoundStatement		28:8:1084:1160	5086440	3					
ANR	5086615	IdentifierDeclStatement	Instance currentInstance = i -> second ;	497:8:17736:17772	5086440	0	True				
ANR	5086616	IdentifierDecl	currentInstance = i -> second		5086440	0					
ANR	5086617	IdentifierDeclType	Instance		5086440	0					
ANR	5086618	Identifier	currentInstance		5086440	1					
ANR	5086619	AssignmentExpression	currentInstance = i -> second		5086440	2		=			
ANR	5086620	Identifier	currentInstance		5086440	0					
ANR	5086621	PtrMemberAccess	i -> second		5086440	1					
ANR	5086622	Identifier	i		5086440	0					
ANR	5086623	Identifier	second		5086440	1					
ANR	5086624	IdentifierDeclStatement	"std :: string reservationID = ""r-"" + currentInstance . instanceID . substr ( 2 , 8 ) ;"	498:8:17782:17858	5086440	1	True				
ANR	5086625	IdentifierDecl	"reservationID = ""r-"" + currentInstance . instanceID . substr ( 2 , 8 )"		5086440	0					
ANR	5086626	IdentifierDeclType	std :: string		5086440	0					
ANR	5086627	Identifier	reservationID		5086440	1					
ANR	5086628	AssignmentExpression	"reservationID = ""r-"" + currentInstance . instanceID . substr ( 2 , 8 )"		5086440	2		=			
ANR	5086629	Identifier	reservationID		5086440	0					
ANR	5086630	AdditiveExpression	"""r-"" + currentInstance . instanceID . substr ( 2 , 8 )"		5086440	1		+			
ANR	5086631	PrimaryExpression	"""r-"""		5086440	0					
ANR	5086632	CallExpression	"currentInstance . instanceID . substr ( 2 , 8 )"		5086440	1					
ANR	5086633	Callee	currentInstance . instanceID . substr		5086440	0					
ANR	5086634	MemberAccess	currentInstance . instanceID . substr		5086440	0					
ANR	5086635	MemberAccess	currentInstance . instanceID		5086440	0					
ANR	5086636	Identifier	currentInstance		5086440	0					
ANR	5086637	Identifier	instanceID		5086440	1					
ANR	5086638	Identifier	substr		5086440	1					
ANR	5086639	ArgumentList	2		5086440	1					
ANR	5086640	Argument	2		5086440	0					
ANR	5086641	PrimaryExpression	2		5086440	0					
ANR	5086642	Argument	8		5086440	1					
ANR	5086643	PrimaryExpression	8		5086440	0					
ANR	5086644	ExpressionStatement	"xml << ""<item>"" << std :: endl"	500:8:17869:17897	5086440	2	True				
ANR	5086645	ShiftExpression	"xml << ""<item>"" << std :: endl"		5086440	0		<<			
ANR	5086646	Identifier	xml		5086440	0					
ANR	5086647	ShiftExpression	"""<item>"" << std :: endl"		5086440	1		<<			
ANR	5086648	PrimaryExpression	"""<item>"""		5086440	0					
ANR	5086649	Identifier	std :: endl		5086440	1					
ANR	5086650	ExpressionStatement	"xml << ""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"	502:12:17920:17996	5086440	3	True				
ANR	5086651	ShiftExpression	"xml << ""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"		5086440	0		<<			
ANR	5086652	Identifier	xml		5086440	0					
ANR	5086653	ShiftExpression	"""<reservationId>"" << reservationID << ""</reservationId>"" << std :: endl"		5086440	1		<<			
ANR	5086654	PrimaryExpression	"""<reservationId>"""		5086440	0					
ANR	5086655	ShiftExpression	"reservationID << ""</reservationId>"" << std :: endl"		5086440	1		<<			
ANR	5086656	Identifier	reservationID		5086440	0					
ANR	5086657	ShiftExpression	"""</reservationId>"" << std :: endl"		5086440	1		<<			
ANR	5086658	PrimaryExpression	"""</reservationId>"""		5086440	0					
ANR	5086659	Identifier	std :: endl		5086440	1					
ANR	5086660	ExpressionStatement	"xml << ""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"	503:12:18010:18067	5086440	4	True				
ANR	5086661	ShiftExpression	"xml << ""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"		5086440	0		<<			
ANR	5086662	Identifier	xml		5086440	0					
ANR	5086663	ShiftExpression	"""<ownerId>"" << userID << ""</ownerId>"" << std :: endl"		5086440	1		<<			
ANR	5086664	PrimaryExpression	"""<ownerId>"""		5086440	0					
ANR	5086665	ShiftExpression	"userID << ""</ownerId>"" << std :: endl"		5086440	1		<<			
ANR	5086666	Identifier	userID		5086440	0					
ANR	5086667	ShiftExpression	"""</ownerId>"" << std :: endl"		5086440	1		<<			
ANR	5086668	PrimaryExpression	"""</ownerId>"""		5086440	0					
ANR	5086669	Identifier	std :: endl		5086440	1					
ANR	5086670	ExpressionStatement	"xml << ""<groupSet>"" << std :: endl"	505:12:18094:18126	5086440	5	True				
ANR	5086671	ShiftExpression	"xml << ""<groupSet>"" << std :: endl"		5086440	0		<<			
ANR	5086672	Identifier	xml		5086440	0					
ANR	5086673	ShiftExpression	"""<groupSet>"" << std :: endl"		5086440	1		<<			
ANR	5086674	PrimaryExpression	"""<groupSet>"""		5086440	0					
ANR	5086675	Identifier	std :: endl		5086440	1					
ANR	5086676	ForStatement	for ( unsigned j = 0 ; j < currentInstance . groupNames . size ( ) ; ++ j )		5086440	6					
ANR	5086677	ForInit	unsigned j = 0 ;	506:21:18149:18163	5086440	0	True				
ANR	5086678	IdentifierDeclStatement	unsigned j = 0 ;		5086440	0					
ANR	5086679	IdentifierDecl	j = 0		5086440	0					
ANR	5086680	IdentifierDeclType	unsigned		5086440	0					
ANR	5086681	Identifier	j		5086440	1					
ANR	5086682	AssignmentExpression	j = 0		5086440	2		=			
ANR	5086683	Identifier	j		5086440	0					
ANR	5086684	PrimaryExpression	0		5086440	1					
ANR	5086685	Condition	j < currentInstance . groupNames . size ( )	506:37:18165:18201	5086440	1	True				
ANR	5086686	RelationalExpression	j < currentInstance . groupNames . size ( )		5086440	0		<			
ANR	5086687	Identifier	j		5086440	0					
ANR	5086688	CallExpression	currentInstance . groupNames . size ( )		5086440	1					
ANR	5086689	Callee	currentInstance . groupNames . size		5086440	0					
ANR	5086690	MemberAccess	currentInstance . groupNames . size		5086440	0					
ANR	5086691	MemberAccess	currentInstance . groupNames		5086440	0					
ANR	5086692	Identifier	currentInstance		5086440	0					
ANR	5086693	Identifier	groupNames		5086440	1					
ANR	5086694	Identifier	size		5086440	1					
ANR	5086695	ArgumentList			5086440	1					
ANR	5086696	UnaryExpression	++ j	506:76:18204:18206	5086440	2	True				
ANR	5086697	IncDec	++		5086440	0					
ANR	5086698	Identifier	j		5086440	1					
ANR	5086699	CompoundStatement		36:82:1512:1512	5086440	3					
ANR	5086700	ExpressionStatement	"xml << xmlTag ( ""item"" , xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] ) ) << std :: endl"	507:20:18232:18320	5086440	0	True				
ANR	5086701	ShiftExpression	"xml << xmlTag ( ""item"" , xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] ) ) << std :: endl"		5086440	0		<<			
ANR	5086702	Identifier	xml		5086440	0					
ANR	5086703	ShiftExpression	"xmlTag ( ""item"" , xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] ) ) << std :: endl"		5086440	1		<<			
ANR	5086704	CallExpression	"xmlTag ( ""item"" , xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] ) )"		5086440	0					
ANR	5086705	Callee	xmlTag		5086440	0					
ANR	5086706	Identifier	xmlTag		5086440	0					
ANR	5086707	ArgumentList	"""item"""		5086440	1					
ANR	5086708	Argument	"""item"""		5086440	0					
ANR	5086709	PrimaryExpression	"""item"""		5086440	0					
ANR	5086710	Argument	"xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] )"		5086440	1					
ANR	5086711	CallExpression	"xmlTag ( ""groupId"" , currentInstance . groupNames [ j ] )"		5086440	0					
ANR	5086712	Callee	xmlTag		5086440	0					
ANR	5086713	Identifier	xmlTag		5086440	0					
ANR	5086714	ArgumentList	"""groupId"""		5086440	1					
ANR	5086715	Argument	"""groupId"""		5086440	0					
ANR	5086716	PrimaryExpression	"""groupId"""		5086440	0					
ANR	5086717	Argument	currentInstance . groupNames [ j ]		5086440	1					
ANR	5086718	ArrayIndexing	currentInstance . groupNames [ j ]		5086440	0					
ANR	5086719	MemberAccess	currentInstance . groupNames		5086440	0					
ANR	5086720	Identifier	currentInstance		5086440	0					
ANR	5086721	Identifier	groupNames		5086440	1					
ANR	5086722	Identifier	j		5086440	1					
ANR	5086723	Identifier	std :: endl		5086440	1					
ANR	5086724	ExpressionStatement	"xml << ""</groupSet>"" << std :: endl"	509:12:18352:18385	5086440	7	True				
ANR	5086725	ShiftExpression	"xml << ""</groupSet>"" << std :: endl"		5086440	0		<<			
ANR	5086726	Identifier	xml		5086440	0					
ANR	5086727	ShiftExpression	"""</groupSet>"" << std :: endl"		5086440	1		<<			
ANR	5086728	PrimaryExpression	"""</groupSet>"""		5086440	0					
ANR	5086729	Identifier	std :: endl		5086440	1					
ANR	5086730	ExpressionStatement	"xml << ""<instancesSet>"" << std :: endl"	511:12:18400:18436	5086440	8	True				
ANR	5086731	ShiftExpression	"xml << ""<instancesSet>"" << std :: endl"		5086440	0		<<			
ANR	5086732	Identifier	xml		5086440	0					
ANR	5086733	ShiftExpression	"""<instancesSet>"" << std :: endl"		5086440	1		<<			
ANR	5086734	PrimaryExpression	"""<instancesSet>"""		5086440	0					
ANR	5086735	Identifier	std :: endl		5086440	1					
ANR	5086736	ExpressionStatement	xml << currentInstance	512:16:18454:18476	5086440	9	True				
ANR	5086737	ShiftExpression	xml << currentInstance		5086440	0		<<			
ANR	5086738	Identifier	xml		5086440	0					
ANR	5086739	Identifier	currentInstance		5086440	1					
ANR	5086740	ExpressionStatement	"xml << ""</instancesSet>"" << std :: endl"	513:12:18490:18527	5086440	10	True				
ANR	5086741	ShiftExpression	"xml << ""</instancesSet>"" << std :: endl"		5086440	0		<<			
ANR	5086742	Identifier	xml		5086440	0					
ANR	5086743	ShiftExpression	"""</instancesSet>"" << std :: endl"		5086440	1		<<			
ANR	5086744	PrimaryExpression	"""</instancesSet>"""		5086440	0					
ANR	5086745	Identifier	std :: endl		5086440	1					
ANR	5086746	ExpressionStatement	"xml << ""</item>"" << std :: endl"	515:8:18546:18575	5086440	11	True				
ANR	5086747	ShiftExpression	"xml << ""</item>"" << std :: endl"		5086440	0		<<			
ANR	5086748	Identifier	xml		5086440	0					
ANR	5086749	ShiftExpression	"""</item>"" << std :: endl"		5086440	1		<<			
ANR	5086750	PrimaryExpression	"""</item>"""		5086440	0					
ANR	5086751	Identifier	std :: endl		5086440	1					
ANR	5086752	ExpressionStatement	"xml << ""</reservationSet>"" << std :: endl"	518:4:18608:18647	5086440	13	True				
ANR	5086753	ShiftExpression	"xml << ""</reservationSet>"" << std :: endl"		5086440	0		<<			
ANR	5086754	Identifier	xml		5086440	0					
ANR	5086755	ShiftExpression	"""</reservationSet>"" << std :: endl"		5086440	1		<<			
ANR	5086756	PrimaryExpression	"""</reservationSet>"""		5086440	0					
ANR	5086757	Identifier	std :: endl		5086440	1					
ANR	5086758	ExpressionStatement	"xml << ""</DescribeInstancesResponse>"" << std :: endl"	519:4:18653:18703	5086440	14	True				
ANR	5086759	ShiftExpression	"xml << ""</DescribeInstancesResponse>"" << std :: endl"		5086440	0		<<			
ANR	5086760	Identifier	xml		5086440	0					
ANR	5086761	ShiftExpression	"""</DescribeInstancesResponse>"" << std :: endl"		5086440	1		<<			
ANR	5086762	PrimaryExpression	"""</DescribeInstancesResponse>"""		5086440	0					
ANR	5086763	Identifier	std :: endl		5086440	1					
ANR	5086764	ExpressionStatement	reply = xml . str ( )	521:4:18714:18731	5086440	15	True				
ANR	5086765	AssignmentExpression	reply = xml . str ( )		5086440	0		=			
ANR	5086766	Identifier	reply		5086440	0					
ANR	5086767	CallExpression	xml . str ( )		5086440	1					
ANR	5086768	Callee	xml . str		5086440	0					
ANR	5086769	MemberAccess	xml . str		5086440	0					
ANR	5086770	Identifier	xml		5086440	0					
ANR	5086771	Identifier	str		5086440	1					
ANR	5086772	ArgumentList			5086440	1					
ANR	5086773	ReturnStatement	return true ;	522:4:18737:18748	5086440	16	True				
ANR	5086774	Identifier	true		5086440	0					
ANR	5086775	ReturnType	bool		5086440	1					
ANR	5086776	Identifier	handleDescribeInstances		5086440	2					
ANR	5086777	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5086440	3					
ANR	5086778	Parameter	AttributeValueMap & avm	471:30:16626:16648	5086440	0	True				
ANR	5086779	ParameterType	AttributeValueMap &		5086440	0					
ANR	5086780	Identifier	avm		5086440	1					
ANR	5086781	Parameter	std :: string & reply	471:55:16651:16669	5086440	1	True				
ANR	5086782	ParameterType	std :: string &		5086440	0					
ANR	5086783	Identifier	reply		5086440	1					
ANR	5086784	Parameter	unsigned requestNumber	471:76:16672:16693	5086440	2	True				
ANR	5086785	ParameterType	unsigned		5086440	0					
ANR	5086786	Identifier	requestNumber		5086440	1					
ANR	5086787	CFGEntryNode	ENTRY		5086440		True				
ANR	5086788	CFGExitNode	EXIT		5086440		True				
ANR	5086789	Symbol	i -> second		5086440						
ANR	5086790	Symbol	currentInstance		5086440						
ANR	5086791	Symbol	rID		5086440						
ANR	5086792	Symbol	userID		5086440						
ANR	5086793	Symbol	requestNumber		5086440						
ANR	5086794	Symbol	currentInstance . groupNames		5086440						
ANR	5086795	Symbol	found		5086440						
ANR	5086796	Symbol	currentInstance . instanceID . substr		5086440						
ANR	5086797	Symbol	user . instances . end		5086440						
ANR	5086798	Symbol	xml		5086440						
ANR	5086799	Symbol	avm		5086440						
ANR	5086800	Symbol	user . instances [ i -> first ] . instanceState		5086440						
ANR	5086801	Symbol	* user . instances		5086440						
ANR	5086802	Symbol	reply		5086440						
ANR	5086803	Symbol	currentInstance . instanceID		5086440						
ANR	5086804	Symbol	* * i		5086440						
ANR	5086805	Symbol	* user		5086440						
ANR	5086806	Symbol	* i -> first		5086440						
ANR	5086807	Symbol	false		5086440						
ANR	5086808	Symbol	i		5086440						
ANR	5086809	Symbol	j		5086440						
ANR	5086810	Symbol	validateAndAcquireUser		5086440						
ANR	5086811	Symbol	* currentInstance . groupNames		5086440						
ANR	5086812	Symbol	* i		5086440						
ANR	5086813	Symbol	reservationID		5086440						
ANR	5086814	Symbol	* j		5086440						
ANR	5086815	Symbol	xmlTag		5086440						
ANR	5086816	Symbol	currentInstance . groupNames . size		5086440						
ANR	5086817	Symbol	requestID		5086440						
ANR	5086818	Symbol	i -> first		5086440						
ANR	5086819	Symbol	true		5086440						
ANR	5086820	Symbol	* currentInstance		5086440						
ANR	5086821	Symbol	user . instances		5086440						
ANR	5086822	Symbol	user		5086440						
ANR	5086823	Symbol	user . instances . begin		5086440						
ANR	5086824	Symbol	xml . str		5086440						
ANR	5086825	Function	handleCreateKeyPair	525:0:18753:20031							
ANR	5086826	FunctionDef	"handleCreateKeyPair (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5086825	0					
ANR	5086827	CompoundStatement		525:97:18850:20031	5086825	0					
ANR	5086828	IdentifierDeclStatement	bool found = false ;	528:4:18910:18928	5086825	0	True				
ANR	5086829	IdentifierDecl	found = false		5086825	0					
ANR	5086830	IdentifierDeclType	bool		5086825	0					
ANR	5086831	Identifier	found		5086825	1					
ANR	5086832	AssignmentExpression	found = false		5086825	2		=			
ANR	5086833	Identifier	false		5086825	0					
ANR	5086834	Identifier	false		5086825	1					
ANR	5086835	IdentifierDeclStatement	std :: string userID ;	529:4:18934:18952	5086825	1	True				
ANR	5086836	IdentifierDecl	userID		5086825	0					
ANR	5086837	IdentifierDeclType	std :: string		5086825	0					
ANR	5086838	Identifier	userID		5086825	1					
ANR	5086839	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	530:4:18958:19023	5086825	2	True				
ANR	5086840	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086825	0					
ANR	5086841	IdentifierDeclType	User &		5086825	0					
ANR	5086842	Identifier	user		5086825	1					
ANR	5086843	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5086825	2		=			
ANR	5086844	Identifier	user		5086825	0					
ANR	5086845	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5086825	1					
ANR	5086846	Callee	validateAndAcquireUser		5086825	0					
ANR	5086847	Identifier	validateAndAcquireUser		5086825	0					
ANR	5086848	ArgumentList	avm		5086825	1					
ANR	5086849	Argument	avm		5086825	0					
ANR	5086850	Identifier	avm		5086825	0					
ANR	5086851	Argument	userID		5086825	1					
ANR	5086852	Identifier	userID		5086825	0					
ANR	5086853	Argument	reply		5086825	2					
ANR	5086854	Identifier	reply		5086825	0					
ANR	5086855	Argument	found		5086825	3					
ANR	5086856	Identifier	found		5086825	0					
ANR	5086857	IfStatement	if ( ! found )		5086825	3					
ANR	5086858	Condition	! found	531:8:19033:19039	5086825	0	True				
ANR	5086859	UnaryOperationExpression	! found		5086825	0					
ANR	5086860	UnaryOperator	!		5086825	0					
ANR	5086861	Identifier	found		5086825	1					
ANR	5086862	CompoundStatement		7:18:192:192	5086825	1					
ANR	5086863	ReturnStatement	return false ;	531:20:19045:19057	5086825	0	True				
ANR	5086864	Identifier	false		5086825	0					
ANR	5086865	IdentifierDeclStatement	"std :: string keyName = getObject < std :: string > ( avm , ""KeyName"" , found ) ;"	533:4:19066:19137	5086825	4	True				
ANR	5086866	IdentifierDecl	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5086825	0					
ANR	5086867	IdentifierDeclType	std :: string		5086825	0					
ANR	5086868	Identifier	keyName		5086825	1					
ANR	5086869	AssignmentExpression	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5086825	2		=			
ANR	5086870	Identifier	keyName		5086825	0					
ANR	5086871	RelationalExpression	"getObject < std :: string > ( avm , ""KeyName"" , found )"		5086825	1		<			
ANR	5086872	Identifier	getObject		5086825	0					
ANR	5086873	RelationalExpression	"std :: string > ( avm , ""KeyName"" , found )"		5086825	1		>			
ANR	5086874	Identifier	std :: string		5086825	0					
ANR	5086875	Expression	"avm , ""KeyName"" , found"		5086825	1					
ANR	5086876	Identifier	avm		5086825	0					
ANR	5086877	Expression	"""KeyName"" , found"		5086825	1					
ANR	5086878	PrimaryExpression	"""KeyName"""		5086825	0					
ANR	5086879	Identifier	found		5086825	1					
ANR	5086880	IfStatement	if ( ( ! found ) || keyName . empty ( ) )		5086825	5					
ANR	5086881	Condition	( ! found ) || keyName . empty ( )	534:8:19147:19174	5086825	0	True				
ANR	5086882	OrExpression	( ! found ) || keyName . empty ( )		5086825	0		||			
ANR	5086883	UnaryOperationExpression	! found		5086825	0					
ANR	5086884	UnaryOperator	!		5086825	0					
ANR	5086885	Identifier	found		5086825	1					
ANR	5086886	CallExpression	keyName . empty ( )		5086825	1					
ANR	5086887	Callee	keyName . empty		5086825	0					
ANR	5086888	MemberAccess	keyName . empty		5086825	0					
ANR	5086889	Identifier	keyName		5086825	0					
ANR	5086890	Identifier	empty		5086825	1					
ANR	5086891	ArgumentList			5086825	1					
ANR	5086892	CompoundStatement		10:39:327:327	5086825	1					
ANR	5086893	ExpressionStatement	"fprintf ( stderr , ""Failed to find KeyName in query.\\n"" )"	535:8:19188:19243	5086825	0	True				
ANR	5086894	CallExpression	"fprintf ( stderr , ""Failed to find KeyName in query.\\n"" )"		5086825	0					
ANR	5086895	Callee	fprintf		5086825	0					
ANR	5086896	Identifier	fprintf		5086825	0					
ANR	5086897	ArgumentList	stderr		5086825	1					
ANR	5086898	Argument	stderr		5086825	0					
ANR	5086899	Identifier	stderr		5086825	0					
ANR	5086900	Argument	"""Failed to find KeyName in query.\\n"""		5086825	1					
ANR	5086901	PrimaryExpression	"""Failed to find KeyName in query.\\n"""		5086825	0					
ANR	5086902	ExpressionStatement	"reply = ""Required parameter KeyName missing or empty.\\n"""	536:8:19253:19309	5086825	1	True				
ANR	5086903	AssignmentExpression	"reply = ""Required parameter KeyName missing or empty.\\n"""		5086825	0		=			
ANR	5086904	Identifier	reply		5086825	0					
ANR	5086905	PrimaryExpression	"""Required parameter KeyName missing or empty.\\n"""		5086825	1					
ANR	5086906	ReturnStatement	return false ;	537:8:19319:19331	5086825	2	True				
ANR	5086907	Identifier	false		5086825	0					
ANR	5086908	IdentifierDeclStatement	"Keypair kp ( keyName , ""key-fingerprint"" , ""private-key"" ) ;"	540:4:19348:19403	5086825	6	True				
ANR	5086909	IdentifierDecl	"kp ( keyName , ""key-fingerprint"" , ""private-key"" )"		5086825	0					
ANR	5086910	IdentifierDeclType	Keypair		5086825	0					
ANR	5086911	Identifier	kp		5086825	1					
ANR	5086912	Expression	"keyName , ""key-fingerprint"" , ""private-key"""		5086825	2					
ANR	5086913	Identifier	keyName		5086825	0					
ANR	5086914	Expression	"""key-fingerprint"" , ""private-key"""		5086825	1					
ANR	5086915	PrimaryExpression	"""key-fingerprint"""		5086825	0					
ANR	5086916	PrimaryExpression	"""private-key"""		5086825	1					
ANR	5086917	ExpressionStatement	user . keypairs [ keyName ] = kp	541:4:19409:19438	5086825	7	True				
ANR	5086918	AssignmentExpression	user . keypairs [ keyName ] = kp		5086825	0		=			
ANR	5086919	ArrayIndexing	user . keypairs [ keyName ]		5086825	0					
ANR	5086920	MemberAccess	user . keypairs		5086825	0					
ANR	5086921	Identifier	user		5086825	0					
ANR	5086922	Identifier	keypairs		5086825	1					
ANR	5086923	Identifier	keyName		5086825	1					
ANR	5086924	Identifier	kp		5086825	1					
ANR	5086925	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	543:4:19449:19468	5086825	8	True				
ANR	5086926	IdentifierDecl	"rID [ ] = ""1234"""		5086825	0					
ANR	5086927	IdentifierDeclType	char [ ]		5086825	0					
ANR	5086928	Identifier	rID		5086825	1					
ANR	5086929	AssignmentExpression	"rID [ ] = ""1234"""		5086825	2		=			
ANR	5086930	Identifier	rID		5086825	0					
ANR	5086931	PrimaryExpression	"""1234"""		5086825	1					
ANR	5086932	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	544:4:19474:19527	5086825	9	True				
ANR	5086933	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5086825	0					
ANR	5086934	Callee	snprintf		5086825	0					
ANR	5086935	Identifier	snprintf		5086825	0					
ANR	5086936	ArgumentList	rID		5086825	1					
ANR	5086937	Argument	rID		5086825	0					
ANR	5086938	Identifier	rID		5086825	0					
ANR	5086939	Argument	sizeof ( rID )		5086825	1					
ANR	5086940	SizeofExpression	sizeof ( rID )		5086825	0					
ANR	5086941	Sizeof	sizeof		5086825	0					
ANR	5086942	SizeofOperand	rID		5086825	1					
ANR	5086943	Argument	"""%.4x"""		5086825	2					
ANR	5086944	PrimaryExpression	"""%.4x"""		5086825	0					
ANR	5086945	Argument	requestNumber		5086825	3					
ANR	5086946	Identifier	requestNumber		5086825	0					
ANR	5086947	IdentifierDeclStatement	std :: string requestID = rID ;	545:4:19533:19560	5086825	10	True				
ANR	5086948	IdentifierDecl	requestID = rID		5086825	0					
ANR	5086949	IdentifierDeclType	std :: string		5086825	0					
ANR	5086950	Identifier	requestID		5086825	1					
ANR	5086951	AssignmentExpression	requestID = rID		5086825	2		=			
ANR	5086952	Identifier	rID		5086825	0					
ANR	5086953	Identifier	rID		5086825	1					
ANR	5086954	IdentifierDeclStatement	std :: ostringstream xml ;	547:4:19567:19589	5086825	11	True				
ANR	5086955	IdentifierDecl	xml		5086825	0					
ANR	5086956	IdentifierDeclType	std :: ostringstream		5086825	0					
ANR	5086957	Identifier	xml		5086825	1					
ANR	5086958	ExpressionStatement	"xml << ""<CreateKeyPairResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	548:4:19595:19691	5086825	12	True				
ANR	5086959	ShiftExpression	"xml << ""<CreateKeyPairResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086825	0		<<			
ANR	5086960	Identifier	xml		5086825	0					
ANR	5086961	ShiftExpression	"""<CreateKeyPairResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5086825	1		<<			
ANR	5086962	PrimaryExpression	"""<CreateKeyPairResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5086825	0					
ANR	5086963	Identifier	std :: endl		5086825	1					
ANR	5086964	ExpressionStatement	"xml << xmlTag ( ""requestId"" , rID ) << std :: endl"	549:4:19697:19743	5086825	13	True				
ANR	5086965	ShiftExpression	"xml << xmlTag ( ""requestId"" , rID ) << std :: endl"		5086825	0		<<			
ANR	5086966	Identifier	xml		5086825	0					
ANR	5086967	ShiftExpression	"xmlTag ( ""requestId"" , rID ) << std :: endl"		5086825	1		<<			
ANR	5086968	CallExpression	"xmlTag ( ""requestId"" , rID )"		5086825	0					
ANR	5086969	Callee	xmlTag		5086825	0					
ANR	5086970	Identifier	xmlTag		5086825	0					
ANR	5086971	ArgumentList	"""requestId"""		5086825	1					
ANR	5086972	Argument	"""requestId"""		5086825	0					
ANR	5086973	PrimaryExpression	"""requestId"""		5086825	0					
ANR	5086974	Argument	rID		5086825	1					
ANR	5086975	Identifier	rID		5086825	0					
ANR	5086976	Identifier	std :: endl		5086825	1					
ANR	5086977	ExpressionStatement	"xml << xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"	550:4:19749:19800	5086825	14	True				
ANR	5086978	ShiftExpression	"xml << xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"		5086825	0		<<			
ANR	5086979	Identifier	xml		5086825	0					
ANR	5086980	ShiftExpression	"xmlTag ( ""keyName"" , kp . keyName ) << std :: endl"		5086825	1		<<			
ANR	5086981	CallExpression	"xmlTag ( ""keyName"" , kp . keyName )"		5086825	0					
ANR	5086982	Callee	xmlTag		5086825	0					
ANR	5086983	Identifier	xmlTag		5086825	0					
ANR	5086984	ArgumentList	"""keyName"""		5086825	1					
ANR	5086985	Argument	"""keyName"""		5086825	0					
ANR	5086986	PrimaryExpression	"""keyName"""		5086825	0					
ANR	5086987	Argument	kp . keyName		5086825	1					
ANR	5086988	MemberAccess	kp . keyName		5086825	0					
ANR	5086989	Identifier	kp		5086825	0					
ANR	5086990	Identifier	keyName		5086825	1					
ANR	5086991	Identifier	std :: endl		5086825	1					
ANR	5086992	ExpressionStatement	"xml << xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"	551:4:19806:19868	5086825	15	True				
ANR	5086993	ShiftExpression	"xml << xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"		5086825	0		<<			
ANR	5086994	Identifier	xml		5086825	0					
ANR	5086995	ShiftExpression	"xmlTag ( ""keyFingerprint"" , kp . fingerprint ) << std :: endl"		5086825	1		<<			
ANR	5086996	CallExpression	"xmlTag ( ""keyFingerprint"" , kp . fingerprint )"		5086825	0					
ANR	5086997	Callee	xmlTag		5086825	0					
ANR	5086998	Identifier	xmlTag		5086825	0					
ANR	5086999	ArgumentList	"""keyFingerprint"""		5086825	1					
ANR	5087000	Argument	"""keyFingerprint"""		5086825	0					
ANR	5087001	PrimaryExpression	"""keyFingerprint"""		5086825	0					
ANR	5087002	Argument	kp . fingerprint		5086825	1					
ANR	5087003	MemberAccess	kp . fingerprint		5086825	0					
ANR	5087004	Identifier	kp		5086825	0					
ANR	5087005	Identifier	fingerprint		5086825	1					
ANR	5087006	Identifier	std :: endl		5086825	1					
ANR	5087007	ExpressionStatement	"xml << xmlTag ( ""keyMaterial"" , kp . privateKey ) << std :: endl"	552:4:19874:19932	5086825	16	True				
ANR	5087008	ShiftExpression	"xml << xmlTag ( ""keyMaterial"" , kp . privateKey ) << std :: endl"		5086825	0		<<			
ANR	5087009	Identifier	xml		5086825	0					
ANR	5087010	ShiftExpression	"xmlTag ( ""keyMaterial"" , kp . privateKey ) << std :: endl"		5086825	1		<<			
ANR	5087011	CallExpression	"xmlTag ( ""keyMaterial"" , kp . privateKey )"		5086825	0					
ANR	5087012	Callee	xmlTag		5086825	0					
ANR	5087013	Identifier	xmlTag		5086825	0					
ANR	5087014	ArgumentList	"""keyMaterial"""		5086825	1					
ANR	5087015	Argument	"""keyMaterial"""		5086825	0					
ANR	5087016	PrimaryExpression	"""keyMaterial"""		5086825	0					
ANR	5087017	Argument	kp . privateKey		5086825	1					
ANR	5087018	MemberAccess	kp . privateKey		5086825	0					
ANR	5087019	Identifier	kp		5086825	0					
ANR	5087020	Identifier	privateKey		5086825	1					
ANR	5087021	Identifier	std :: endl		5086825	1					
ANR	5087022	ExpressionStatement	"xml << ""/<CreateKeyPairResponse>"" << std :: endl"	553:4:19938:19984	5086825	17	True				
ANR	5087023	ShiftExpression	"xml << ""/<CreateKeyPairResponse>"" << std :: endl"		5086825	0		<<			
ANR	5087024	Identifier	xml		5086825	0					
ANR	5087025	ShiftExpression	"""/<CreateKeyPairResponse>"" << std :: endl"		5086825	1		<<			
ANR	5087026	PrimaryExpression	"""/<CreateKeyPairResponse>"""		5086825	0					
ANR	5087027	Identifier	std :: endl		5086825	1					
ANR	5087028	ExpressionStatement	reply = xml . str ( )	555:4:19995:20012	5086825	18	True				
ANR	5087029	AssignmentExpression	reply = xml . str ( )		5086825	0		=			
ANR	5087030	Identifier	reply		5086825	0					
ANR	5087031	CallExpression	xml . str ( )		5086825	1					
ANR	5087032	Callee	xml . str		5086825	0					
ANR	5087033	MemberAccess	xml . str		5086825	0					
ANR	5087034	Identifier	xml		5086825	0					
ANR	5087035	Identifier	str		5086825	1					
ANR	5087036	ArgumentList			5086825	1					
ANR	5087037	ReturnStatement	return true ;	556:4:20018:20029	5086825	19	True				
ANR	5087038	Identifier	true		5086825	0					
ANR	5087039	ReturnType	bool		5086825	1					
ANR	5087040	Identifier	handleCreateKeyPair		5086825	2					
ANR	5087041	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5086825	3					
ANR	5087042	Parameter	AttributeValueMap & avm	525:26:18779:18801	5086825	0	True				
ANR	5087043	ParameterType	AttributeValueMap &		5086825	0					
ANR	5087044	Identifier	avm		5086825	1					
ANR	5087045	Parameter	std :: string & reply	525:51:18804:18822	5086825	1	True				
ANR	5087046	ParameterType	std :: string &		5086825	0					
ANR	5087047	Identifier	reply		5086825	1					
ANR	5087048	Parameter	unsigned requestNumber	525:72:18825:18846	5086825	2	True				
ANR	5087049	ParameterType	unsigned		5086825	0					
ANR	5087050	Identifier	requestNumber		5086825	1					
ANR	5087051	CFGEntryNode	ENTRY		5086825		True				
ANR	5087052	CFGExitNode	EXIT		5086825		True				
ANR	5087053	Symbol	rID		5086825						
ANR	5087054	Symbol	userID		5086825						
ANR	5087055	Symbol	kp . keyName		5086825						
ANR	5087056	Symbol	requestNumber		5086825						
ANR	5087057	Symbol	found		5086825						
ANR	5087058	Symbol	user . keypairs		5086825						
ANR	5087059	Symbol	* keyName		5086825						
ANR	5087060	Symbol	xml		5086825						
ANR	5087061	Symbol	keyName . empty		5086825						
ANR	5087062	Symbol	avm		5086825						
ANR	5087063	Symbol	kp . fingerprint		5086825						
ANR	5087064	Symbol	reply		5086825						
ANR	5087065	Symbol	getObject		5086825						
ANR	5087066	Symbol	* user		5086825						
ANR	5087067	Symbol	kp . privateKey		5086825						
ANR	5087068	Symbol	kp		5086825						
ANR	5087069	Symbol	* user . keypairs		5086825						
ANR	5087070	Symbol	false		5086825						
ANR	5087071	Symbol	keyName		5086825						
ANR	5087072	Symbol	validateAndAcquireUser		5086825						
ANR	5087073	Symbol	stderr		5086825						
ANR	5087074	Symbol	std :: string		5086825						
ANR	5087075	Symbol	requestID		5086825						
ANR	5087076	Symbol	true		5086825						
ANR	5087077	Symbol	user		5086825						
ANR	5087078	Symbol	xml . str		5086825						
ANR	5087079	Function	handleDeleteKeyPair	559:0:20034:21586							
ANR	5087080	FunctionDef	"handleDeleteKeyPair (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5087079	0					
ANR	5087081	CompoundStatement		559:97:20131:21586	5087079	0					
ANR	5087082	IdentifierDeclStatement	bool found = false ;	562:4:20191:20209	5087079	0	True				
ANR	5087083	IdentifierDecl	found = false		5087079	0					
ANR	5087084	IdentifierDeclType	bool		5087079	0					
ANR	5087085	Identifier	found		5087079	1					
ANR	5087086	AssignmentExpression	found = false		5087079	2		=			
ANR	5087087	Identifier	false		5087079	0					
ANR	5087088	Identifier	false		5087079	1					
ANR	5087089	IdentifierDeclStatement	std :: string userID ;	563:4:20215:20233	5087079	1	True				
ANR	5087090	IdentifierDecl	userID		5087079	0					
ANR	5087091	IdentifierDeclType	std :: string		5087079	0					
ANR	5087092	Identifier	userID		5087079	1					
ANR	5087093	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	564:4:20239:20304	5087079	2	True				
ANR	5087094	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5087079	0					
ANR	5087095	IdentifierDeclType	User &		5087079	0					
ANR	5087096	Identifier	user		5087079	1					
ANR	5087097	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5087079	2		=			
ANR	5087098	Identifier	user		5087079	0					
ANR	5087099	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5087079	1					
ANR	5087100	Callee	validateAndAcquireUser		5087079	0					
ANR	5087101	Identifier	validateAndAcquireUser		5087079	0					
ANR	5087102	ArgumentList	avm		5087079	1					
ANR	5087103	Argument	avm		5087079	0					
ANR	5087104	Identifier	avm		5087079	0					
ANR	5087105	Argument	userID		5087079	1					
ANR	5087106	Identifier	userID		5087079	0					
ANR	5087107	Argument	reply		5087079	2					
ANR	5087108	Identifier	reply		5087079	0					
ANR	5087109	Argument	found		5087079	3					
ANR	5087110	Identifier	found		5087079	0					
ANR	5087111	IfStatement	if ( ! found )		5087079	3					
ANR	5087112	Condition	! found	565:8:20314:20320	5087079	0	True				
ANR	5087113	UnaryOperationExpression	! found		5087079	0					
ANR	5087114	UnaryOperator	!		5087079	0					
ANR	5087115	Identifier	found		5087079	1					
ANR	5087116	CompoundStatement		7:18:192:192	5087079	1					
ANR	5087117	ReturnStatement	return false ;	565:20:20326:20338	5087079	0	True				
ANR	5087118	Identifier	false		5087079	0					
ANR	5087119	IdentifierDeclStatement	"std :: string keyName = getObject < std :: string > ( avm , ""KeyName"" , found ) ;"	567:4:20347:20418	5087079	4	True				
ANR	5087120	IdentifierDecl	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5087079	0					
ANR	5087121	IdentifierDeclType	std :: string		5087079	0					
ANR	5087122	Identifier	keyName		5087079	1					
ANR	5087123	AssignmentExpression	"keyName = getObject < std :: string > ( avm , ""KeyName"" , found )"		5087079	2		=			
ANR	5087124	Identifier	keyName		5087079	0					
ANR	5087125	RelationalExpression	"getObject < std :: string > ( avm , ""KeyName"" , found )"		5087079	1		<			
ANR	5087126	Identifier	getObject		5087079	0					
ANR	5087127	RelationalExpression	"std :: string > ( avm , ""KeyName"" , found )"		5087079	1		>			
ANR	5087128	Identifier	std :: string		5087079	0					
ANR	5087129	Expression	"avm , ""KeyName"" , found"		5087079	1					
ANR	5087130	Identifier	avm		5087079	0					
ANR	5087131	Expression	"""KeyName"" , found"		5087079	1					
ANR	5087132	PrimaryExpression	"""KeyName"""		5087079	0					
ANR	5087133	Identifier	found		5087079	1					
ANR	5087134	IfStatement	if ( ( ! found ) || keyName . empty ( ) )		5087079	5					
ANR	5087135	Condition	( ! found ) || keyName . empty ( )	568:8:20428:20455	5087079	0	True				
ANR	5087136	OrExpression	( ! found ) || keyName . empty ( )		5087079	0		||			
ANR	5087137	UnaryOperationExpression	! found		5087079	0					
ANR	5087138	UnaryOperator	!		5087079	0					
ANR	5087139	Identifier	found		5087079	1					
ANR	5087140	CallExpression	keyName . empty ( )		5087079	1					
ANR	5087141	Callee	keyName . empty		5087079	0					
ANR	5087142	MemberAccess	keyName . empty		5087079	0					
ANR	5087143	Identifier	keyName		5087079	0					
ANR	5087144	Identifier	empty		5087079	1					
ANR	5087145	ArgumentList			5087079	1					
ANR	5087146	CompoundStatement		10:39:327:327	5087079	1					
ANR	5087147	ExpressionStatement	"fprintf ( stderr , ""Failed to find KeyName in query.\\n"" )"	569:8:20469:20524	5087079	0	True				
ANR	5087148	CallExpression	"fprintf ( stderr , ""Failed to find KeyName in query.\\n"" )"		5087079	0					
ANR	5087149	Callee	fprintf		5087079	0					
ANR	5087150	Identifier	fprintf		5087079	0					
ANR	5087151	ArgumentList	stderr		5087079	1					
ANR	5087152	Argument	stderr		5087079	0					
ANR	5087153	Identifier	stderr		5087079	0					
ANR	5087154	Argument	"""Failed to find KeyName in query.\\n"""		5087079	1					
ANR	5087155	PrimaryExpression	"""Failed to find KeyName in query.\\n"""		5087079	0					
ANR	5087156	ExpressionStatement	"reply = ""Required parameter KeyName missing or empty.\\n"""	570:8:20534:20590	5087079	1	True				
ANR	5087157	AssignmentExpression	"reply = ""Required parameter KeyName missing or empty.\\n"""		5087079	0		=			
ANR	5087158	Identifier	reply		5087079	0					
ANR	5087159	PrimaryExpression	"""Required parameter KeyName missing or empty.\\n"""		5087079	1					
ANR	5087160	ReturnStatement	return false ;	571:8:20600:20612	5087079	2	True				
ANR	5087161	Identifier	false		5087079	0					
ANR	5087162	IdentifierDeclStatement	"Keypair kp = getObject < Keypair > ( user . keypairs , keyName , found ) ;"	574:4:20629:20695	5087079	6	True				
ANR	5087163	IdentifierDecl	"kp = getObject < Keypair > ( user . keypairs , keyName , found )"		5087079	0					
ANR	5087164	IdentifierDeclType	Keypair		5087079	0					
ANR	5087165	Identifier	kp		5087079	1					
ANR	5087166	AssignmentExpression	"kp = getObject < Keypair > ( user . keypairs , keyName , found )"		5087079	2		=			
ANR	5087167	Identifier	kp		5087079	0					
ANR	5087168	RelationalExpression	"getObject < Keypair > ( user . keypairs , keyName , found )"		5087079	1		<			
ANR	5087169	Identifier	getObject		5087079	0					
ANR	5087170	RelationalExpression	"Keypair > ( user . keypairs , keyName , found )"		5087079	1		>			
ANR	5087171	Identifier	Keypair		5087079	0					
ANR	5087172	Expression	"user . keypairs , keyName , found"		5087079	1					
ANR	5087173	MemberAccess	user . keypairs		5087079	0					
ANR	5087174	Identifier	user		5087079	0					
ANR	5087175	Identifier	keypairs		5087079	1					
ANR	5087176	Expression	"keyName , found"		5087079	1					
ANR	5087177	Identifier	keyName		5087079	0					
ANR	5087178	Identifier	found		5087079	1					
ANR	5087179	IfStatement	if ( found )		5087079	7					
ANR	5087180	Condition	found	575:8:20705:20709	5087079	0	True				
ANR	5087181	Identifier	found		5087079	0					
ANR	5087182	CompoundStatement		17:16:581:581	5087079	1					
ANR	5087183	ExpressionStatement	user . keypairs . erase ( keyName )	576:8:20723:20753	5087079	0	True				
ANR	5087184	CallExpression	user . keypairs . erase ( keyName )		5087079	0					
ANR	5087185	Callee	user . keypairs . erase		5087079	0					
ANR	5087186	MemberAccess	user . keypairs . erase		5087079	0					
ANR	5087187	MemberAccess	user . keypairs		5087079	0					
ANR	5087188	Identifier	user		5087079	0					
ANR	5087189	Identifier	keypairs		5087079	1					
ANR	5087190	Identifier	erase		5087079	1					
ANR	5087191	ArgumentList	keyName		5087079	1					
ANR	5087192	Argument	keyName		5087079	0					
ANR	5087193	Identifier	keyName		5087079	0					
ANR	5087194	ElseStatement	else		5087079	0					
ANR	5087195	CompoundStatement		22:8:784:808	5087079	0					
ANR	5087196	IdentifierDeclStatement	std :: ostringstream error ;	580:8:20916:20940	5087079	0	True				
ANR	5087197	IdentifierDecl	error		5087079	0					
ANR	5087198	IdentifierDeclType	std :: ostringstream		5087079	0					
ANR	5087199	Identifier	error		5087079	1					
ANR	5087200	ExpressionStatement	"error << ""Keypair named '"" << keyName << ""' does not exist."" << std :: endl"	581:8:20950:21023	5087079	1	True				
ANR	5087201	ShiftExpression	"error << ""Keypair named '"" << keyName << ""' does not exist."" << std :: endl"		5087079	0		<<			
ANR	5087202	Identifier	error		5087079	0					
ANR	5087203	ShiftExpression	"""Keypair named '"" << keyName << ""' does not exist."" << std :: endl"		5087079	1		<<			
ANR	5087204	PrimaryExpression	"""Keypair named '"""		5087079	0					
ANR	5087205	ShiftExpression	"keyName << ""' does not exist."" << std :: endl"		5087079	1		<<			
ANR	5087206	Identifier	keyName		5087079	0					
ANR	5087207	ShiftExpression	"""' does not exist."" << std :: endl"		5087079	1		<<			
ANR	5087208	PrimaryExpression	"""' does not exist."""		5087079	0					
ANR	5087209	Identifier	std :: endl		5087079	1					
ANR	5087210	ExpressionStatement	reply = error . str ( )	582:8:21033:21052	5087079	2	True				
ANR	5087211	AssignmentExpression	reply = error . str ( )		5087079	0		=			
ANR	5087212	Identifier	reply		5087079	0					
ANR	5087213	CallExpression	error . str ( )		5087079	1					
ANR	5087214	Callee	error . str		5087079	0					
ANR	5087215	MemberAccess	error . str		5087079	0					
ANR	5087216	Identifier	error		5087079	0					
ANR	5087217	Identifier	str		5087079	1					
ANR	5087218	ArgumentList			5087079	1					
ANR	5087219	ExpressionStatement	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"	583:8:21062:21100	5087079	3	True				
ANR	5087220	CallExpression	"fprintf ( stderr , ""%s"" , reply . c_str ( ) )"		5087079	0					
ANR	5087221	Callee	fprintf		5087079	0					
ANR	5087222	Identifier	fprintf		5087079	0					
ANR	5087223	ArgumentList	stderr		5087079	1					
ANR	5087224	Argument	stderr		5087079	0					
ANR	5087225	Identifier	stderr		5087079	0					
ANR	5087226	Argument	"""%s"""		5087079	1					
ANR	5087227	PrimaryExpression	"""%s"""		5087079	0					
ANR	5087228	Argument	reply . c_str ( )		5087079	2					
ANR	5087229	CallExpression	reply . c_str ( )		5087079	0					
ANR	5087230	Callee	reply . c_str		5087079	0					
ANR	5087231	MemberAccess	reply . c_str		5087079	0					
ANR	5087232	Identifier	reply		5087079	0					
ANR	5087233	Identifier	c_str		5087079	1					
ANR	5087234	ArgumentList			5087079	1					
ANR	5087235	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	586:4:21125:21144	5087079	8	True				
ANR	5087236	IdentifierDecl	"rID [ ] = ""1234"""		5087079	0					
ANR	5087237	IdentifierDeclType	char [ ]		5087079	0					
ANR	5087238	Identifier	rID		5087079	1					
ANR	5087239	AssignmentExpression	"rID [ ] = ""1234"""		5087079	2		=			
ANR	5087240	Identifier	rID		5087079	0					
ANR	5087241	PrimaryExpression	"""1234"""		5087079	1					
ANR	5087242	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	587:4:21150:21203	5087079	9	True				
ANR	5087243	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5087079	0					
ANR	5087244	Callee	snprintf		5087079	0					
ANR	5087245	Identifier	snprintf		5087079	0					
ANR	5087246	ArgumentList	rID		5087079	1					
ANR	5087247	Argument	rID		5087079	0					
ANR	5087248	Identifier	rID		5087079	0					
ANR	5087249	Argument	sizeof ( rID )		5087079	1					
ANR	5087250	SizeofExpression	sizeof ( rID )		5087079	0					
ANR	5087251	Sizeof	sizeof		5087079	0					
ANR	5087252	SizeofOperand	rID		5087079	1					
ANR	5087253	Argument	"""%.4x"""		5087079	2					
ANR	5087254	PrimaryExpression	"""%.4x"""		5087079	0					
ANR	5087255	Argument	requestNumber		5087079	3					
ANR	5087256	Identifier	requestNumber		5087079	0					
ANR	5087257	IdentifierDeclStatement	std :: string requestID = rID ;	588:4:21209:21236	5087079	10	True				
ANR	5087258	IdentifierDecl	requestID = rID		5087079	0					
ANR	5087259	IdentifierDeclType	std :: string		5087079	0					
ANR	5087260	Identifier	requestID		5087079	1					
ANR	5087261	AssignmentExpression	requestID = rID		5087079	2		=			
ANR	5087262	Identifier	rID		5087079	0					
ANR	5087263	Identifier	rID		5087079	1					
ANR	5087264	IdentifierDeclStatement	std :: ostringstream xml ;	590:4:21251:21273	5087079	11	True				
ANR	5087265	IdentifierDecl	xml		5087079	0					
ANR	5087266	IdentifierDeclType	std :: ostringstream		5087079	0					
ANR	5087267	Identifier	xml		5087079	1					
ANR	5087268	ExpressionStatement	"xml << ""<DeleteKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	591:4:21279:21376	5087079	12	True				
ANR	5087269	ShiftExpression	"xml << ""<DeleteKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5087079	0		<<			
ANR	5087270	Identifier	xml		5087079	0					
ANR	5087271	ShiftExpression	"""<DeleteKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5087079	1		<<			
ANR	5087272	PrimaryExpression	"""<DeleteKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5087079	0					
ANR	5087273	Identifier	std :: endl		5087079	1					
ANR	5087274	ExpressionStatement	"xml << xmlTag ( ""requestId"" , requestID ) << std :: endl"	592:4:21382:21434	5087079	13	True				
ANR	5087275	ShiftExpression	"xml << xmlTag ( ""requestId"" , requestID ) << std :: endl"		5087079	0		<<			
ANR	5087276	Identifier	xml		5087079	0					
ANR	5087277	ShiftExpression	"xmlTag ( ""requestId"" , requestID ) << std :: endl"		5087079	1		<<			
ANR	5087278	CallExpression	"xmlTag ( ""requestId"" , requestID )"		5087079	0					
ANR	5087279	Callee	xmlTag		5087079	0					
ANR	5087280	Identifier	xmlTag		5087079	0					
ANR	5087281	ArgumentList	"""requestId"""		5087079	1					
ANR	5087282	Argument	"""requestId"""		5087079	0					
ANR	5087283	PrimaryExpression	"""requestId"""		5087079	0					
ANR	5087284	Argument	requestID		5087079	1					
ANR	5087285	Identifier	requestID		5087079	0					
ANR	5087286	Identifier	std :: endl		5087079	1					
ANR	5087287	ExpressionStatement	"xml << xmlTag ( ""return"" , ""true"" ) << std :: endl"	593:4:21440:21486	5087079	14	True				
ANR	5087288	ShiftExpression	"xml << xmlTag ( ""return"" , ""true"" ) << std :: endl"		5087079	0		<<			
ANR	5087289	Identifier	xml		5087079	0					
ANR	5087290	ShiftExpression	"xmlTag ( ""return"" , ""true"" ) << std :: endl"		5087079	1		<<			
ANR	5087291	CallExpression	"xmlTag ( ""return"" , ""true"" )"		5087079	0					
ANR	5087292	Callee	xmlTag		5087079	0					
ANR	5087293	Identifier	xmlTag		5087079	0					
ANR	5087294	ArgumentList	"""return"""		5087079	1					
ANR	5087295	Argument	"""return"""		5087079	0					
ANR	5087296	PrimaryExpression	"""return"""		5087079	0					
ANR	5087297	Argument	"""true"""		5087079	1					
ANR	5087298	PrimaryExpression	"""true"""		5087079	0					
ANR	5087299	Identifier	std :: endl		5087079	1					
ANR	5087300	ExpressionStatement	"xml << ""</DeleteKeyPairsResponse>"" << std :: endl"	594:4:21492:21539	5087079	15	True				
ANR	5087301	ShiftExpression	"xml << ""</DeleteKeyPairsResponse>"" << std :: endl"		5087079	0		<<			
ANR	5087302	Identifier	xml		5087079	0					
ANR	5087303	ShiftExpression	"""</DeleteKeyPairsResponse>"" << std :: endl"		5087079	1		<<			
ANR	5087304	PrimaryExpression	"""</DeleteKeyPairsResponse>"""		5087079	0					
ANR	5087305	Identifier	std :: endl		5087079	1					
ANR	5087306	ExpressionStatement	reply = xml . str ( )	596:4:21550:21567	5087079	16	True				
ANR	5087307	AssignmentExpression	reply = xml . str ( )		5087079	0		=			
ANR	5087308	Identifier	reply		5087079	0					
ANR	5087309	CallExpression	xml . str ( )		5087079	1					
ANR	5087310	Callee	xml . str		5087079	0					
ANR	5087311	MemberAccess	xml . str		5087079	0					
ANR	5087312	Identifier	xml		5087079	0					
ANR	5087313	Identifier	str		5087079	1					
ANR	5087314	ArgumentList			5087079	1					
ANR	5087315	ReturnStatement	return true ;	597:4:21573:21584	5087079	17	True				
ANR	5087316	Identifier	true		5087079	0					
ANR	5087317	ReturnType	bool		5087079	1					
ANR	5087318	Identifier	handleDeleteKeyPair		5087079	2					
ANR	5087319	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5087079	3					
ANR	5087320	Parameter	AttributeValueMap & avm	559:26:20060:20082	5087079	0	True				
ANR	5087321	ParameterType	AttributeValueMap &		5087079	0					
ANR	5087322	Identifier	avm		5087079	1					
ANR	5087323	Parameter	std :: string & reply	559:51:20085:20103	5087079	1	True				
ANR	5087324	ParameterType	std :: string &		5087079	0					
ANR	5087325	Identifier	reply		5087079	1					
ANR	5087326	Parameter	unsigned requestNumber	559:72:20106:20127	5087079	2	True				
ANR	5087327	ParameterType	unsigned		5087079	0					
ANR	5087328	Identifier	requestNumber		5087079	1					
ANR	5087329	CFGEntryNode	ENTRY		5087079		True				
ANR	5087330	CFGExitNode	EXIT		5087079		True				
ANR	5087331	Symbol	getObject		5087079						
ANR	5087332	Symbol	error . str		5087079						
ANR	5087333	Symbol	kp		5087079						
ANR	5087334	Symbol	false		5087079						
ANR	5087335	Symbol	keyName		5087079						
ANR	5087336	Symbol	validateAndAcquireUser		5087079						
ANR	5087337	Symbol	stderr		5087079						
ANR	5087338	Symbol	error		5087079						
ANR	5087339	Symbol	rID		5087079						
ANR	5087340	Symbol	userID		5087079						
ANR	5087341	Symbol	requestNumber		5087079						
ANR	5087342	Symbol	found		5087079						
ANR	5087343	Symbol	user . keypairs		5087079						
ANR	5087344	Symbol	Keypair		5087079						
ANR	5087345	Symbol	std :: string		5087079						
ANR	5087346	Symbol	requestID		5087079						
ANR	5087347	Symbol	xml		5087079						
ANR	5087348	Symbol	keyName . empty		5087079						
ANR	5087349	Symbol	true		5087079						
ANR	5087350	Symbol	avm		5087079						
ANR	5087351	Symbol	reply		5087079						
ANR	5087352	Symbol	user		5087079						
ANR	5087353	Symbol	reply . c_str		5087079						
ANR	5087354	Symbol	xml . str		5087079						
ANR	5087355	Function	handleDescribeKeyPairs	600:0:21589:22488							
ANR	5087356	FunctionDef	"handleDescribeKeyPairs (AttributeValueMap & avm , std :: string & reply , unsigned requestNumber)"		5087355	0					
ANR	5087357	CompoundStatement		600:100:21689:22488	5087355	0					
ANR	5087358	IdentifierDeclStatement	bool found = false ;	603:4:21752:21770	5087355	0	True				
ANR	5087359	IdentifierDecl	found = false		5087355	0					
ANR	5087360	IdentifierDeclType	bool		5087355	0					
ANR	5087361	Identifier	found		5087355	1					
ANR	5087362	AssignmentExpression	found = false		5087355	2		=			
ANR	5087363	Identifier	false		5087355	0					
ANR	5087364	Identifier	false		5087355	1					
ANR	5087365	IdentifierDeclStatement	std :: string userID ;	604:4:21776:21794	5087355	1	True				
ANR	5087366	IdentifierDecl	userID		5087355	0					
ANR	5087367	IdentifierDeclType	std :: string		5087355	0					
ANR	5087368	Identifier	userID		5087355	1					
ANR	5087369	IdentifierDeclStatement	"User & user = validateAndAcquireUser ( avm , userID , reply , found ) ;"	605:4:21800:21865	5087355	2	True				
ANR	5087370	IdentifierDecl	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5087355	0					
ANR	5087371	IdentifierDeclType	User &		5087355	0					
ANR	5087372	Identifier	user		5087355	1					
ANR	5087373	AssignmentExpression	"& user = validateAndAcquireUser ( avm , userID , reply , found )"		5087355	2		=			
ANR	5087374	Identifier	user		5087355	0					
ANR	5087375	CallExpression	"validateAndAcquireUser ( avm , userID , reply , found )"		5087355	1					
ANR	5087376	Callee	validateAndAcquireUser		5087355	0					
ANR	5087377	Identifier	validateAndAcquireUser		5087355	0					
ANR	5087378	ArgumentList	avm		5087355	1					
ANR	5087379	Argument	avm		5087355	0					
ANR	5087380	Identifier	avm		5087355	0					
ANR	5087381	Argument	userID		5087355	1					
ANR	5087382	Identifier	userID		5087355	0					
ANR	5087383	Argument	reply		5087355	2					
ANR	5087384	Identifier	reply		5087355	0					
ANR	5087385	Argument	found		5087355	3					
ANR	5087386	Identifier	found		5087355	0					
ANR	5087387	IfStatement	if ( ! found )		5087355	3					
ANR	5087388	Condition	! found	606:8:21875:21881	5087355	0	True				
ANR	5087389	UnaryOperationExpression	! found		5087355	0					
ANR	5087390	UnaryOperator	!		5087355	0					
ANR	5087391	Identifier	found		5087355	1					
ANR	5087392	CompoundStatement		7:18:195:195	5087355	1					
ANR	5087393	ReturnStatement	return false ;	606:20:21887:21899	5087355	0	True				
ANR	5087394	Identifier	false		5087355	0					
ANR	5087395	IdentifierDeclStatement	"char rID [ ] = ""1234"" ;"	608:4:21908:21927	5087355	4	True				
ANR	5087396	IdentifierDecl	"rID [ ] = ""1234"""		5087355	0					
ANR	5087397	IdentifierDeclType	char [ ]		5087355	0					
ANR	5087398	Identifier	rID		5087355	1					
ANR	5087399	AssignmentExpression	"rID [ ] = ""1234"""		5087355	2		=			
ANR	5087400	Identifier	rID		5087355	0					
ANR	5087401	PrimaryExpression	"""1234"""		5087355	1					
ANR	5087402	ExpressionStatement	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"	609:4:21933:21986	5087355	5	True				
ANR	5087403	CallExpression	"snprintf ( rID , sizeof ( rID ) , ""%.4x"" , requestNumber )"		5087355	0					
ANR	5087404	Callee	snprintf		5087355	0					
ANR	5087405	Identifier	snprintf		5087355	0					
ANR	5087406	ArgumentList	rID		5087355	1					
ANR	5087407	Argument	rID		5087355	0					
ANR	5087408	Identifier	rID		5087355	0					
ANR	5087409	Argument	sizeof ( rID )		5087355	1					
ANR	5087410	SizeofExpression	sizeof ( rID )		5087355	0					
ANR	5087411	Sizeof	sizeof		5087355	0					
ANR	5087412	SizeofOperand	rID		5087355	1					
ANR	5087413	Argument	"""%.4x"""		5087355	2					
ANR	5087414	PrimaryExpression	"""%.4x"""		5087355	0					
ANR	5087415	Argument	requestNumber		5087355	3					
ANR	5087416	Identifier	requestNumber		5087355	0					
ANR	5087417	IdentifierDeclStatement	std :: string requestID = rID ;	610:4:21992:22019	5087355	6	True				
ANR	5087418	IdentifierDecl	requestID = rID		5087355	0					
ANR	5087419	IdentifierDeclType	std :: string		5087355	0					
ANR	5087420	Identifier	requestID		5087355	1					
ANR	5087421	AssignmentExpression	requestID = rID		5087355	2		=			
ANR	5087422	Identifier	rID		5087355	0					
ANR	5087423	Identifier	rID		5087355	1					
ANR	5087424	IdentifierDeclStatement	std :: ostringstream xml ;	612:4:22034:22056	5087355	7	True				
ANR	5087425	IdentifierDecl	xml		5087355	0					
ANR	5087426	IdentifierDeclType	std :: ostringstream		5087355	0					
ANR	5087427	Identifier	xml		5087355	1					
ANR	5087428	ExpressionStatement	"xml << ""<DescribeKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"	614:4:22067:22166	5087355	8	True				
ANR	5087429	ShiftExpression	"xml << ""<DescribeKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5087355	0		<<			
ANR	5087430	Identifier	xml		5087355	0					
ANR	5087431	ShiftExpression	"""<DescribeKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"" << std :: endl"		5087355	1		<<			
ANR	5087432	PrimaryExpression	"""<DescribeKeyPairsResponse xmlns=\\""http://ec2.amazonaws.com/doc/2010-11-15/\\"">"""		5087355	0					
ANR	5087433	Identifier	std :: endl		5087355	1					
ANR	5087434	ExpressionStatement	"xml << ""<keySet>"" << std :: endl"	615:4:22172:22202	5087355	9	True				
ANR	5087435	ShiftExpression	"xml << ""<keySet>"" << std :: endl"		5087355	0		<<			
ANR	5087436	Identifier	xml		5087355	0					
ANR	5087437	ShiftExpression	"""<keySet>"" << std :: endl"		5087355	1		<<			
ANR	5087438	PrimaryExpression	"""<keySet>"""		5087355	0					
ANR	5087439	Identifier	std :: endl		5087355	1					
ANR	5087440	ForStatement	for ( NameToKeypairMap :: const_iterator i = user . keypairs . begin ( ) ; i != user . keypairs . end ( ) ; ++ i )		5087355	10					
ANR	5087441	ForInit	NameToKeypairMap :: const_iterator i = user . keypairs . begin ( ) ;	616:13:22217:22275	5087355	0	True				
ANR	5087442	IdentifierDeclStatement	NameToKeypairMap :: const_iterator i = user . keypairs . begin ( ) ;		5087355	0					
ANR	5087443	IdentifierDecl	i = user . keypairs . begin ( )		5087355	0					
ANR	5087444	IdentifierDeclType	NameToKeypairMap :: const_iterator		5087355	0					
ANR	5087445	Identifier	i		5087355	1					
ANR	5087446	AssignmentExpression	i = user . keypairs . begin ( )		5087355	2		=			
ANR	5087447	Identifier	i		5087355	0					
ANR	5087448	CallExpression	user . keypairs . begin ( )		5087355	1					
ANR	5087449	Callee	user . keypairs . begin		5087355	0					
ANR	5087450	MemberAccess	user . keypairs . begin		5087355	0					
ANR	5087451	MemberAccess	user . keypairs		5087355	0					
ANR	5087452	Identifier	user		5087355	0					
ANR	5087453	Identifier	keypairs		5087355	1					
ANR	5087454	Identifier	begin		5087355	1					
ANR	5087455	ArgumentList			5087355	1					
ANR	5087456	Condition	i != user . keypairs . end ( )	616:73:22277:22300	5087355	1	True				
ANR	5087457	EqualityExpression	i != user . keypairs . end ( )		5087355	0		!=			
ANR	5087458	Identifier	i		5087355	0					
ANR	5087459	CallExpression	user . keypairs . end ( )		5087355	1					
ANR	5087460	Callee	user . keypairs . end		5087355	0					
ANR	5087461	MemberAccess	user . keypairs . end		5087355	0					
ANR	5087462	MemberAccess	user . keypairs		5087355	0					
ANR	5087463	Identifier	user		5087355	0					
ANR	5087464	Identifier	keypairs		5087355	1					
ANR	5087465	Identifier	end		5087355	1					
ANR	5087466	ArgumentList			5087355	1					
ANR	5087467	UnaryExpression	++ i	616:99:22303:22305	5087355	2	True				
ANR	5087468	IncDec	++		5087355	0					
ANR	5087469	Identifier	i		5087355	1					
ANR	5087470	CompoundStatement		17:105:619:619	5087355	3					
ANR	5087471	ExpressionStatement	xml << i -> second	617:12:22323:22339	5087355	0	True				
ANR	5087472	ShiftExpression	xml << i -> second		5087355	0		<<			
ANR	5087473	Identifier	xml		5087355	0					
ANR	5087474	PtrMemberAccess	i -> second		5087355	1					
ANR	5087475	Identifier	i		5087355	0					
ANR	5087476	Identifier	second		5087355	1					
ANR	5087477	ExpressionStatement	"xml << ""</keySet>"" << std :: endl"	619:4:22355:22386	5087355	11	True				
ANR	5087478	ShiftExpression	"xml << ""</keySet>"" << std :: endl"		5087355	0		<<			
ANR	5087479	Identifier	xml		5087355	0					
ANR	5087480	ShiftExpression	"""</keySet>"" << std :: endl"		5087355	1		<<			
ANR	5087481	PrimaryExpression	"""</keySet>"""		5087355	0					
ANR	5087482	Identifier	std :: endl		5087355	1					
ANR	5087483	ExpressionStatement	"xml << ""</DescribeKeyPairsResponse>"" << std :: endl"	620:4:22392:22441	5087355	12	True				
ANR	5087484	ShiftExpression	"xml << ""</DescribeKeyPairsResponse>"" << std :: endl"		5087355	0		<<			
ANR	5087485	Identifier	xml		5087355	0					
ANR	5087486	ShiftExpression	"""</DescribeKeyPairsResponse>"" << std :: endl"		5087355	1		<<			
ANR	5087487	PrimaryExpression	"""</DescribeKeyPairsResponse>"""		5087355	0					
ANR	5087488	Identifier	std :: endl		5087355	1					
ANR	5087489	ExpressionStatement	reply = xml . str ( )	622:4:22452:22469	5087355	13	True				
ANR	5087490	AssignmentExpression	reply = xml . str ( )		5087355	0		=			
ANR	5087491	Identifier	reply		5087355	0					
ANR	5087492	CallExpression	xml . str ( )		5087355	1					
ANR	5087493	Callee	xml . str		5087355	0					
ANR	5087494	MemberAccess	xml . str		5087355	0					
ANR	5087495	Identifier	xml		5087355	0					
ANR	5087496	Identifier	str		5087355	1					
ANR	5087497	ArgumentList			5087355	1					
ANR	5087498	ReturnStatement	return true ;	623:4:22475:22486	5087355	14	True				
ANR	5087499	Identifier	true		5087355	0					
ANR	5087500	ReturnType	bool		5087355	1					
ANR	5087501	Identifier	handleDescribeKeyPairs		5087355	2					
ANR	5087502	ParameterList	"AttributeValueMap & avm , std :: string & reply , unsigned requestNumber"		5087355	3					
ANR	5087503	Parameter	AttributeValueMap & avm	600:29:21618:21640	5087355	0	True				
ANR	5087504	ParameterType	AttributeValueMap &		5087355	0					
ANR	5087505	Identifier	avm		5087355	1					
ANR	5087506	Parameter	std :: string & reply	600:54:21643:21661	5087355	1	True				
ANR	5087507	ParameterType	std :: string &		5087355	0					
ANR	5087508	Identifier	reply		5087355	1					
ANR	5087509	Parameter	unsigned requestNumber	600:75:21664:21685	5087355	2	True				
ANR	5087510	ParameterType	unsigned		5087355	0					
ANR	5087511	Identifier	requestNumber		5087355	1					
ANR	5087512	CFGEntryNode	ENTRY		5087355		True				
ANR	5087513	CFGExitNode	EXIT		5087355		True				
ANR	5087514	Symbol	user . keypairs . begin		5087355						
ANR	5087515	Symbol	false		5087355						
ANR	5087516	Symbol	i		5087355						
ANR	5087517	Symbol	validateAndAcquireUser		5087355						
ANR	5087518	Symbol	rID		5087355						
ANR	5087519	Symbol	userID		5087355						
ANR	5087520	Symbol	requestNumber		5087355						
ANR	5087521	Symbol	found		5087355						
ANR	5087522	Symbol	user . keypairs		5087355						
ANR	5087523	Symbol	user . keypairs . end		5087355						
ANR	5087524	Symbol	requestID		5087355						
ANR	5087525	Symbol	xml		5087355						
ANR	5087526	Symbol	true		5087355						
ANR	5087527	Symbol	avm		5087355						
ANR	5087528	Symbol	reply		5087355						
ANR	5087529	Symbol	user		5087355						
ANR	5087530	Symbol	xml . str		5087355						
ANR	5087531	DeclStmt									
ANR	5087532	Decl							ActionToHandlerMap	ActionToHandlerMap	simulatorActions
ANR	5087533	Function	registerAllHandlers	629:0:22546:22987							
ANR	5087534	FunctionDef	registerAllHandlers ()		5087533	0					
ANR	5087535	CompoundStatement		629:27:22573:22987	5087533	0					
ANR	5087536	ExpressionStatement	"simulatorActions [ ""RunInstances"" ] = & handleRunInstances"	630:4:22579:22636	5087533	0	True				
ANR	5087537	AssignmentExpression	"simulatorActions [ ""RunInstances"" ] = & handleRunInstances"		5087533	0		=			
ANR	5087538	ArrayIndexing	"simulatorActions [ ""RunInstances"" ]"		5087533	0					
ANR	5087539	Identifier	simulatorActions		5087533	0					
ANR	5087540	PrimaryExpression	"""RunInstances"""		5087533	1					
ANR	5087541	UnaryOperationExpression	& handleRunInstances		5087533	1					
ANR	5087542	UnaryOperator	&		5087533	0					
ANR	5087543	Identifier	handleRunInstances		5087533	1					
ANR	5087544	ExpressionStatement	"simulatorActions [ ""TerminateInstances"" ] = & handleTerminateInstances"	631:4:22642:22711	5087533	1	True				
ANR	5087545	AssignmentExpression	"simulatorActions [ ""TerminateInstances"" ] = & handleTerminateInstances"		5087533	0		=			
ANR	5087546	ArrayIndexing	"simulatorActions [ ""TerminateInstances"" ]"		5087533	0					
ANR	5087547	Identifier	simulatorActions		5087533	0					
ANR	5087548	PrimaryExpression	"""TerminateInstances"""		5087533	1					
ANR	5087549	UnaryOperationExpression	& handleTerminateInstances		5087533	1					
ANR	5087550	UnaryOperator	&		5087533	0					
ANR	5087551	Identifier	handleTerminateInstances		5087533	1					
ANR	5087552	ExpressionStatement	"simulatorActions [ ""DescribeInstances"" ] = & handleDescribeInstances"	632:4:22717:22784	5087533	2	True				
ANR	5087553	AssignmentExpression	"simulatorActions [ ""DescribeInstances"" ] = & handleDescribeInstances"		5087533	0		=			
ANR	5087554	ArrayIndexing	"simulatorActions [ ""DescribeInstances"" ]"		5087533	0					
ANR	5087555	Identifier	simulatorActions		5087533	0					
ANR	5087556	PrimaryExpression	"""DescribeInstances"""		5087533	1					
ANR	5087557	UnaryOperationExpression	& handleDescribeInstances		5087533	1					
ANR	5087558	UnaryOperator	&		5087533	0					
ANR	5087559	Identifier	handleDescribeInstances		5087533	1					
ANR	5087560	ExpressionStatement	"simulatorActions [ ""CreateKeyPair"" ] = & handleCreateKeyPair"	633:4:22790:22849	5087533	3	True				
ANR	5087561	AssignmentExpression	"simulatorActions [ ""CreateKeyPair"" ] = & handleCreateKeyPair"		5087533	0		=			
ANR	5087562	ArrayIndexing	"simulatorActions [ ""CreateKeyPair"" ]"		5087533	0					
ANR	5087563	Identifier	simulatorActions		5087533	0					
ANR	5087564	PrimaryExpression	"""CreateKeyPair"""		5087533	1					
ANR	5087565	UnaryOperationExpression	& handleCreateKeyPair		5087533	1					
ANR	5087566	UnaryOperator	&		5087533	0					
ANR	5087567	Identifier	handleCreateKeyPair		5087533	1					
ANR	5087568	ExpressionStatement	"simulatorActions [ ""DeleteKeyPair"" ] = & handleDeleteKeyPair"	634:4:22855:22914	5087533	4	True				
ANR	5087569	AssignmentExpression	"simulatorActions [ ""DeleteKeyPair"" ] = & handleDeleteKeyPair"		5087533	0		=			
ANR	5087570	ArrayIndexing	"simulatorActions [ ""DeleteKeyPair"" ]"		5087533	0					
ANR	5087571	Identifier	simulatorActions		5087533	0					
ANR	5087572	PrimaryExpression	"""DeleteKeyPair"""		5087533	1					
ANR	5087573	UnaryOperationExpression	& handleDeleteKeyPair		5087533	1					
ANR	5087574	UnaryOperator	&		5087533	0					
ANR	5087575	Identifier	handleDeleteKeyPair		5087533	1					
ANR	5087576	ExpressionStatement	"simulatorActions [ ""DescribeKeyPairs"" ] = & handleDescribeKeyPairs"	635:4:22920:22985	5087533	5	True				
ANR	5087577	AssignmentExpression	"simulatorActions [ ""DescribeKeyPairs"" ] = & handleDescribeKeyPairs"		5087533	0		=			
ANR	5087578	ArrayIndexing	"simulatorActions [ ""DescribeKeyPairs"" ]"		5087533	0					
ANR	5087579	Identifier	simulatorActions		5087533	0					
ANR	5087580	PrimaryExpression	"""DescribeKeyPairs"""		5087533	1					
ANR	5087581	UnaryOperationExpression	& handleDescribeKeyPairs		5087533	1					
ANR	5087582	UnaryOperator	&		5087533	0					
ANR	5087583	Identifier	handleDescribeKeyPairs		5087533	1					
ANR	5087584	ReturnType	void		5087533	1					
ANR	5087585	Identifier	registerAllHandlers		5087533	2					
ANR	5087586	ParameterList			5087533	3					
ANR	5087587	CFGEntryNode	ENTRY		5087533		True				
ANR	5087588	CFGExitNode	EXIT		5087533		True				
ANR	5087589	Symbol	& handleTerminateInstances		5087533						
ANR	5087590	Symbol	* simulatorActions		5087533						
ANR	5087591	Symbol	& handleRunInstances		5087533						
ANR	5087592	Symbol	simulatorActions		5087533						
ANR	5087593	Symbol	& handleDeleteKeyPair		5087533						
ANR	5087594	Symbol	& handleDescribeKeyPairs		5087533						
ANR	5087595	Symbol	& handleDescribeInstances		5087533						
ANR	5087596	Symbol	& handleCreateKeyPair		5087533						
ANR	5087597	Function	extractHost	639:0:23014:23624							
ANR	5087598	FunctionDef	"extractHost (const std :: string & request , std :: string & host)"		5087597	0					
ANR	5087599	CompoundStatement		639:68:23082:23624	5087597	0					
ANR	5087600	IdentifierDeclStatement	"std :: string :: size_type i = request . find ( ""\\r\\nHost: "" ) ;"	640:4:23088:23143	5087597	0	True				
ANR	5087601	IdentifierDecl	"i = request . find ( ""\\r\\nHost: "" )"		5087597	0					
ANR	5087602	IdentifierDeclType	std :: string :: size_type		5087597	0					
ANR	5087603	Identifier	i		5087597	1					
ANR	5087604	AssignmentExpression	"i = request . find ( ""\\r\\nHost: "" )"		5087597	2		=			
ANR	5087605	Identifier	i		5087597	0					
ANR	5087606	CallExpression	"request . find ( ""\\r\\nHost: "" )"		5087597	1					
ANR	5087607	Callee	request . find		5087597	0					
ANR	5087608	MemberAccess	request . find		5087597	0					
ANR	5087609	Identifier	request		5087597	0					
ANR	5087610	Identifier	find		5087597	1					
ANR	5087611	ArgumentList	"""\\r\\nHost: """		5087597	1					
ANR	5087612	Argument	"""\\r\\nHost: """		5087597	0					
ANR	5087613	PrimaryExpression	"""\\r\\nHost: """		5087597	0					
ANR	5087614	IfStatement	if ( std :: string :: npos == i )		5087597	1					
ANR	5087615	Condition	std :: string :: npos == i	641:8:23153:23174	5087597	0	True				
ANR	5087616	EqualityExpression	std :: string :: npos == i		5087597	0		==			
ANR	5087617	Identifier	std :: string :: npos		5087597	0					
ANR	5087618	Identifier	i		5087597	1					
ANR	5087619	CompoundStatement		3:33:95:95	5087597	1					
ANR	5087620	ExpressionStatement	"fprintf ( stderr , ""Malformed request '%s': contains no Host header; failing.\\n"" , request . c_str ( ) )"	642:8:23188:23285	5087597	0	True				
ANR	5087621	CallExpression	"fprintf ( stderr , ""Malformed request '%s': contains no Host header; failing.\\n"" , request . c_str ( ) )"		5087597	0					
ANR	5087622	Callee	fprintf		5087597	0					
ANR	5087623	Identifier	fprintf		5087597	0					
ANR	5087624	ArgumentList	stderr		5087597	1					
ANR	5087625	Argument	stderr		5087597	0					
ANR	5087626	Identifier	stderr		5087597	0					
ANR	5087627	Argument	"""Malformed request '%s': contains no Host header; failing.\\n"""		5087597	1					
ANR	5087628	PrimaryExpression	"""Malformed request '%s': contains no Host header; failing.\\n"""		5087597	0					
ANR	5087629	Argument	request . c_str ( )		5087597	2					
ANR	5087630	CallExpression	request . c_str ( )		5087597	0					
ANR	5087631	Callee	request . c_str		5087597	0					
ANR	5087632	MemberAccess	request . c_str		5087597	0					
ANR	5087633	Identifier	request		5087597	0					
ANR	5087634	Identifier	c_str		5087597	1					
ANR	5087635	ArgumentList			5087597	1					
ANR	5087636	ReturnStatement	return false ;	643:8:23295:23307	5087597	1	True				
ANR	5087637	Identifier	false		5087597	0					
ANR	5087638	IdentifierDeclStatement	"std :: string :: size_type j = request . find ( ""\\r\\n"" , i + 2 ) ;"	646:4:23320:23376	5087597	2	True				
ANR	5087639	IdentifierDecl	"j = request . find ( ""\\r\\n"" , i + 2 )"		5087597	0					
ANR	5087640	IdentifierDeclType	std :: string :: size_type		5087597	0					
ANR	5087641	Identifier	j		5087597	1					
ANR	5087642	AssignmentExpression	"j = request . find ( ""\\r\\n"" , i + 2 )"		5087597	2		=			
ANR	5087643	Identifier	j		5087597	0					
ANR	5087644	CallExpression	"request . find ( ""\\r\\n"" , i + 2 )"		5087597	1					
ANR	5087645	Callee	request . find		5087597	0					
ANR	5087646	MemberAccess	request . find		5087597	0					
ANR	5087647	Identifier	request		5087597	0					
ANR	5087648	Identifier	find		5087597	1					
ANR	5087649	ArgumentList	"""\\r\\n"""		5087597	1					
ANR	5087650	Argument	"""\\r\\n"""		5087597	0					
ANR	5087651	PrimaryExpression	"""\\r\\n"""		5087597	0					
ANR	5087652	Argument	i + 2		5087597	1					
ANR	5087653	AdditiveExpression	i + 2		5087597	0		+			
ANR	5087654	Identifier	i		5087597	0					
ANR	5087655	PrimaryExpression	2		5087597	1					
ANR	5087656	IfStatement	if ( std :: string :: npos == j )		5087597	3					
ANR	5087657	Condition	std :: string :: npos == j	647:8:23386:23407	5087597	0	True				
ANR	5087658	EqualityExpression	std :: string :: npos == j		5087597	0		==			
ANR	5087659	Identifier	std :: string :: npos		5087597	0					
ANR	5087660	Identifier	j		5087597	1					
ANR	5087661	CompoundStatement		9:33:328:328	5087597	1					
ANR	5087662	ExpressionStatement	"fprintf ( stderr , ""Malformed request '%s': Host field not CR/LF terminated; failing.\\n"" , request . c_str ( ) )"	648:8:23421:23526	5087597	0	True				
ANR	5087663	CallExpression	"fprintf ( stderr , ""Malformed request '%s': Host field not CR/LF terminated; failing.\\n"" , request . c_str ( ) )"		5087597	0					
ANR	5087664	Callee	fprintf		5087597	0					
ANR	5087665	Identifier	fprintf		5087597	0					
ANR	5087666	ArgumentList	stderr		5087597	1					
ANR	5087667	Argument	stderr		5087597	0					
ANR	5087668	Identifier	stderr		5087597	0					
ANR	5087669	Argument	"""Malformed request '%s': Host field not CR/LF terminated; failing.\\n"""		5087597	1					
ANR	5087670	PrimaryExpression	"""Malformed request '%s': Host field not CR/LF terminated; failing.\\n"""		5087597	0					
ANR	5087671	Argument	request . c_str ( )		5087597	2					
ANR	5087672	CallExpression	request . c_str ( )		5087597	0					
ANR	5087673	Callee	request . c_str		5087597	0					
ANR	5087674	MemberAccess	request . c_str		5087597	0					
ANR	5087675	Identifier	request		5087597	0					
ANR	5087676	Identifier	c_str		5087597	1					
ANR	5087677	ArgumentList			5087597	1					
ANR	5087678	ReturnStatement	return false ;	649:8:23536:23548	5087597	1	True				
ANR	5087679	Identifier	false		5087597	0					
ANR	5087680	ExpressionStatement	"host = request . substr ( i + 8 , j - ( i + 8 ) )"	652:4:23561:23605	5087597	4	True				
ANR	5087681	AssignmentExpression	"host = request . substr ( i + 8 , j - ( i + 8 ) )"		5087597	0		=			
ANR	5087682	Identifier	host		5087597	0					
ANR	5087683	CallExpression	"request . substr ( i + 8 , j - ( i + 8 ) )"		5087597	1					
ANR	5087684	Callee	request . substr		5087597	0					
ANR	5087685	MemberAccess	request . substr		5087597	0					
ANR	5087686	Identifier	request		5087597	0					
ANR	5087687	Identifier	substr		5087597	1					
ANR	5087688	ArgumentList	i + 8		5087597	1					
ANR	5087689	Argument	i + 8		5087597	0					
ANR	5087690	AdditiveExpression	i + 8		5087597	0		+			
ANR	5087691	Identifier	i		5087597	0					
ANR	5087692	PrimaryExpression	8		5087597	1					
ANR	5087693	Argument	j - ( i + 8 )		5087597	1					
ANR	5087694	AdditiveExpression	j - ( i + 8 )		5087597	0		-			
ANR	5087695	Identifier	j		5087597	0					
ANR	5087696	AdditiveExpression	i + 8		5087597	1		+			
ANR	5087697	Identifier	i		5087597	0					
ANR	5087698	PrimaryExpression	8		5087597	1					
ANR	5087699	ReturnStatement	return true ;	653:4:23611:23622	5087597	5	True				
ANR	5087700	Identifier	true		5087597	0					
ANR	5087701	ReturnType	bool		5087597	1					
ANR	5087702	Identifier	extractHost		5087597	2					
ANR	5087703	ParameterList	"const std :: string & request , std :: string & host"		5087597	3					
ANR	5087704	Parameter	const std :: string & request	639:18:23032:23058	5087597	0	True				
ANR	5087705	ParameterType	const std :: string &		5087597	0					
ANR	5087706	Identifier	request		5087597	1					
ANR	5087707	Parameter	std :: string & host	639:47:23061:23078	5087597	1	True				
ANR	5087708	ParameterType	std :: string &		5087597	0					
ANR	5087709	Identifier	host		5087597	1					
ANR	5087710	CFGEntryNode	ENTRY		5087597		True				
ANR	5087711	CFGExitNode	EXIT		5087597		True				
ANR	5087712	Symbol	request		5087597						
ANR	5087713	Symbol	std :: string :: npos		5087597						
ANR	5087714	Symbol	request . find		5087597						
ANR	5087715	Symbol	request . c_str		5087597						
ANR	5087716	Symbol	host		5087597						
ANR	5087717	Symbol	false		5087597						
ANR	5087718	Symbol	true		5087597						
ANR	5087719	Symbol	i		5087597						
ANR	5087720	Symbol	j		5087597						
ANR	5087721	Symbol	request . substr		5087597						
ANR	5087722	Symbol	stderr		5087597						
ANR	5087723	Function	extractURL	657:0:23649:23975							
ANR	5087724	FunctionDef	"extractURL (const std :: string & request , std :: string & URL)"		5087723	0					
ANR	5087725	CompoundStatement		657:66:23715:23975	5087723	0					
ANR	5087726	IfStatement	"if ( request . find ( ""GET "" ) != 0 )"		5087723	0					
ANR	5087727	Condition	"request . find ( ""GET "" ) != 0"	658:8:23725:23751	5087723	0	True				
ANR	5087728	EqualityExpression	"request . find ( ""GET "" ) != 0"		5087723	0		!=			
ANR	5087729	CallExpression	"request . find ( ""GET "" )"		5087723	0					
ANR	5087730	Callee	request . find		5087723	0					
ANR	5087731	MemberAccess	request . find		5087723	0					
ANR	5087732	Identifier	request		5087723	0					
ANR	5087733	Identifier	find		5087723	1					
ANR	5087734	ArgumentList	"""GET """		5087723	1					
ANR	5087735	Argument	"""GET """		5087723	0					
ANR	5087736	PrimaryExpression	"""GET """		5087723	0					
ANR	5087737	PrimaryExpression	0		5087723	1					
ANR	5087738	CompoundStatement		2:38:39:39	5087723	1					
ANR	5087739	ExpressionStatement	"fprintf ( stderr , ""Malformed request '%s': did not begin with 'GET '; failing.\\n"" , request . c_str ( ) )"	659:8:23765:23864	5087723	0	True				
ANR	5087740	CallExpression	"fprintf ( stderr , ""Malformed request '%s': did not begin with 'GET '; failing.\\n"" , request . c_str ( ) )"		5087723	0					
ANR	5087741	Callee	fprintf		5087723	0					
ANR	5087742	Identifier	fprintf		5087723	0					
ANR	5087743	ArgumentList	stderr		5087723	1					
ANR	5087744	Argument	stderr		5087723	0					
ANR	5087745	Identifier	stderr		5087723	0					
ANR	5087746	Argument	"""Malformed request '%s': did not begin with 'GET '; failing.\\n"""		5087723	1					
ANR	5087747	PrimaryExpression	"""Malformed request '%s': did not begin with 'GET '; failing.\\n"""		5087723	0					
ANR	5087748	Argument	request . c_str ( )		5087723	2					
ANR	5087749	CallExpression	request . c_str ( )		5087723	0					
ANR	5087750	Callee	request . c_str		5087723	0					
ANR	5087751	MemberAccess	request . c_str		5087723	0					
ANR	5087752	Identifier	request		5087723	0					
ANR	5087753	Identifier	c_str		5087723	1					
ANR	5087754	ArgumentList			5087723	1					
ANR	5087755	ReturnStatement	return false ;	660:8:23874:23886	5087723	1	True				
ANR	5087756	Identifier	false		5087723	0					
ANR	5087757	ExpressionStatement	"URL = request . substr ( 4 , request . find ( ""HTTP"" ) - 5 )"	663:4:23903:23956	5087723	1	True				
ANR	5087758	AssignmentExpression	"URL = request . substr ( 4 , request . find ( ""HTTP"" ) - 5 )"		5087723	0		=			
ANR	5087759	Identifier	URL		5087723	0					
ANR	5087760	CallExpression	"request . substr ( 4 , request . find ( ""HTTP"" ) - 5 )"		5087723	1					
ANR	5087761	Callee	request . substr		5087723	0					
ANR	5087762	MemberAccess	request . substr		5087723	0					
ANR	5087763	Identifier	request		5087723	0					
ANR	5087764	Identifier	substr		5087723	1					
ANR	5087765	ArgumentList	4		5087723	1					
ANR	5087766	Argument	4		5087723	0					
ANR	5087767	PrimaryExpression	4		5087723	0					
ANR	5087768	Argument	"request . find ( ""HTTP"" ) - 5"		5087723	1					
ANR	5087769	AdditiveExpression	"request . find ( ""HTTP"" ) - 5"		5087723	0		-			
ANR	5087770	CallExpression	"request . find ( ""HTTP"" )"		5087723	0					
ANR	5087771	Callee	request . find		5087723	0					
ANR	5087772	MemberAccess	request . find		5087723	0					
ANR	5087773	Identifier	request		5087723	0					
ANR	5087774	Identifier	find		5087723	1					
ANR	5087775	ArgumentList	"""HTTP"""		5087723	1					
ANR	5087776	Argument	"""HTTP"""		5087723	0					
ANR	5087777	PrimaryExpression	"""HTTP"""		5087723	0					
ANR	5087778	PrimaryExpression	5		5087723	1					
ANR	5087779	ReturnStatement	return true ;	664:4:23962:23973	5087723	2	True				
ANR	5087780	Identifier	true		5087723	0					
ANR	5087781	ReturnType	bool		5087723	1					
ANR	5087782	Identifier	extractURL		5087723	2					
ANR	5087783	ParameterList	"const std :: string & request , std :: string & URL"		5087723	3					
ANR	5087784	Parameter	const std :: string & request	657:17:23666:23692	5087723	0	True				
ANR	5087785	ParameterType	const std :: string &		5087723	0					
ANR	5087786	Identifier	request		5087723	1					
ANR	5087787	Parameter	std :: string & URL	657:46:23695:23711	5087723	1	True				
ANR	5087788	ParameterType	std :: string &		5087723	0					
ANR	5087789	Identifier	URL		5087723	1					
ANR	5087790	CFGEntryNode	ENTRY		5087723		True				
ANR	5087791	CFGExitNode	EXIT		5087723		True				
ANR	5087792	Symbol	request		5087723						
ANR	5087793	Symbol	request . find		5087723						
ANR	5087794	Symbol	request . c_str		5087723						
ANR	5087795	Symbol	false		5087723						
ANR	5087796	Symbol	true		5087723						
ANR	5087797	Symbol	request . substr		5087723						
ANR	5087798	Symbol	stderr		5087723						
ANR	5087799	Symbol	URL		5087723						
ANR	5087800	Function	constructReply	690:0:24672:25037							
ANR	5087801	FunctionDef	"constructReply (const std :: string & statusLine , const std :: string & response)"		5087800	0					
ANR	5087802	CompoundStatement		690:91:24763:25037	5087800	0					
ANR	5087803	IdentifierDeclStatement	std :: ostringstream reply ;	691:4:24769:24793	5087800	0	True				
ANR	5087804	IdentifierDecl	reply		5087800	0					
ANR	5087805	IdentifierDeclType	std :: ostringstream		5087800	0					
ANR	5087806	Identifier	reply		5087800	1					
ANR	5087807	ExpressionStatement	"reply << statusLine << ""\\r\\n"""	694:4:24854:24883	5087800	1	True				
ANR	5087808	ShiftExpression	"reply << statusLine << ""\\r\\n"""		5087800	0		<<			
ANR	5087809	Identifier	reply		5087800	0					
ANR	5087810	ShiftExpression	"statusLine << ""\\r\\n"""		5087800	1		<<			
ANR	5087811	Identifier	statusLine		5087800	0					
ANR	5087812	PrimaryExpression	"""\\r\\n"""		5087800	1					
ANR	5087813	ExpressionStatement	"reply << ""Content-Length: "" << response . size ( ) << ""\\r\\n"""	695:4:24889:24945	5087800	2	True				
ANR	5087814	ShiftExpression	"reply << ""Content-Length: "" << response . size ( ) << ""\\r\\n"""		5087800	0		<<			
ANR	5087815	Identifier	reply		5087800	0					
ANR	5087816	ShiftExpression	"""Content-Length: "" << response . size ( ) << ""\\r\\n"""		5087800	1		<<			
ANR	5087817	PrimaryExpression	"""Content-Length: """		5087800	0					
ANR	5087818	ShiftExpression	"response . size ( ) << ""\\r\\n"""		5087800	1		<<			
ANR	5087819	CallExpression	response . size ( )		5087800	0					
ANR	5087820	Callee	response . size		5087800	0					
ANR	5087821	MemberAccess	response . size		5087800	0					
ANR	5087822	Identifier	response		5087800	0					
ANR	5087823	Identifier	size		5087800	1					
ANR	5087824	ArgumentList			5087800	1					
ANR	5087825	PrimaryExpression	"""\\r\\n"""		5087800	1					
ANR	5087826	ExpressionStatement	"reply << ""\\r\\n"""	696:4:24951:24966	5087800	3	True				
ANR	5087827	ShiftExpression	"reply << ""\\r\\n"""		5087800	0		<<			
ANR	5087828	Identifier	reply		5087800	0					
ANR	5087829	PrimaryExpression	"""\\r\\n"""		5087800	1					
ANR	5087830	ExpressionStatement	reply << response	697:4:24972:24989	5087800	4	True				
ANR	5087831	ShiftExpression	reply << response		5087800	0		<<			
ANR	5087832	Identifier	reply		5087800	0					
ANR	5087833	Identifier	response		5087800	1					
ANR	5087834	ExpressionStatement	"reply << ""\\r\\n"""	698:4:24995:25010	5087800	5	True				
ANR	5087835	ShiftExpression	"reply << ""\\r\\n"""		5087800	0		<<			
ANR	5087836	Identifier	reply		5087800	0					
ANR	5087837	PrimaryExpression	"""\\r\\n"""		5087800	1					
ANR	5087838	ReturnStatement	return reply . str ( ) ;	700:4:25017:25035	5087800	6	True				
ANR	5087839	CallExpression	reply . str ( )		5087800	0					
ANR	5087840	Callee	reply . str		5087800	0					
ANR	5087841	MemberAccess	reply . str		5087800	0					
ANR	5087842	Identifier	reply		5087800	0					
ANR	5087843	Identifier	str		5087800	1					
ANR	5087844	ArgumentList			5087800	1					
ANR	5087845	ReturnType	std :: string		5087800	1					
ANR	5087846	Identifier	constructReply		5087800	2					
ANR	5087847	ParameterList	"const std :: string & statusLine , const std :: string & response"		5087800	3					
ANR	5087848	Parameter	const std :: string & statusLine	690:28:24700:24729	5087800	0	True				
ANR	5087849	ParameterType	const std :: string &		5087800	0					
ANR	5087850	Identifier	statusLine		5087800	1					
ANR	5087851	Parameter	const std :: string & response	690:60:24732:24759	5087800	1	True				
ANR	5087852	ParameterType	const std :: string &		5087800	0					
ANR	5087853	Identifier	response		5087800	1					
ANR	5087854	CFGEntryNode	ENTRY		5087800		True				
ANR	5087855	CFGExitNode	EXIT		5087800		True				
ANR	5087856	Symbol	statusLine		5087800						
ANR	5087857	Symbol	response		5087800						
ANR	5087858	Symbol	reply		5087800						
ANR	5087859	Symbol	reply . str		5087800						
ANR	5087860	Function	handleRequest	703:0:25040:27740							
ANR	5087861	FunctionDef	handleRequest (const std :: string & request)		5087860	0					
ANR	5087862	CompoundStatement		703:57:25097:27740	5087860	0					
ANR	5087863	Statement	static	704:4:25103:25108	5087860	0	True				
ANR	5087864	IdentifierDeclStatement	unsigned requestCount = - 1 ;	704:11:25110:25136	5087860	1	True				
ANR	5087865	IdentifierDecl	requestCount = - 1		5087860	0					
ANR	5087866	IdentifierDeclType	unsigned		5087860	0					
ANR	5087867	Identifier	requestCount		5087860	1					
ANR	5087868	AssignmentExpression	requestCount = - 1		5087860	2		=			
ANR	5087869	Identifier	requestCount		5087860	0					
ANR	5087870	UnaryOperationExpression	- 1		5087860	1					
ANR	5087871	UnaryOperator	-		5087860	0					
ANR	5087872	PrimaryExpression	1		5087860	1					
ANR	5087873	ExpressionStatement	++ requestCount	704:39:25138:25152	5087860	2	True				
ANR	5087874	UnaryExpression	++ requestCount		5087860	0					
ANR	5087875	IncDec	++		5087860	0					
ANR	5087876	Identifier	requestCount		5087860	1					
ANR	5087877	IdentifierDeclStatement	std :: string URL ;	706:4:25159:25174	5087860	3	True				
ANR	5087878	IdentifierDecl	URL		5087860	0					
ANR	5087879	IdentifierDeclType	std :: string		5087860	0					
ANR	5087880	Identifier	URL		5087860	1					
ANR	5087881	IfStatement	"if ( ! extractURL ( request , URL ) )"		5087860	4					
ANR	5087882	Condition	"! extractURL ( request , URL )"	707:8:25184:25211	5087860	0	True				
ANR	5087883	UnaryOperationExpression	"! extractURL ( request , URL )"		5087860	0					
ANR	5087884	UnaryOperator	!		5087860	0					
ANR	5087885	CallExpression	"extractURL ( request , URL )"		5087860	1					
ANR	5087886	Callee	extractURL		5087860	0					
ANR	5087887	Identifier	extractURL		5087860	0					
ANR	5087888	ArgumentList	request		5087860	1					
ANR	5087889	Argument	request		5087860	0					
ANR	5087890	Identifier	request		5087860	0					
ANR	5087891	Argument	URL		5087860	1					
ANR	5087892	Identifier	URL		5087860	0					
ANR	5087893	CompoundStatement		5:39:117:117	5087860	1					
ANR	5087894	ReturnStatement	"return constructReply ( ""HTTP/1.1 400 Bad Request"" , """" ) ;"	708:8:25225:25280	5087860	0	True				
ANR	5087895	CallExpression	"constructReply ( ""HTTP/1.1 400 Bad Request"" , """" )"		5087860	0					
ANR	5087896	Callee	constructReply		5087860	0					
ANR	5087897	Identifier	constructReply		5087860	0					
ANR	5087898	ArgumentList	"""HTTP/1.1 400 Bad Request"""		5087860	1					
ANR	5087899	Argument	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5087900	PrimaryExpression	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5087901	Argument	""""""		5087860	1					
ANR	5087902	PrimaryExpression	""""""		5087860	0					
ANR	5087903	IdentifierDeclStatement	std :: string host ;	711:4:25297:25313	5087860	5	True				
ANR	5087904	IdentifierDecl	host		5087860	0					
ANR	5087905	IdentifierDeclType	std :: string		5087860	0					
ANR	5087906	Identifier	host		5087860	1					
ANR	5087907	IfStatement	"if ( ! extractHost ( request , host ) )"		5087860	6					
ANR	5087908	Condition	"! extractHost ( request , host )"	712:8:25323:25352	5087860	0	True				
ANR	5087909	UnaryOperationExpression	"! extractHost ( request , host )"		5087860	0					
ANR	5087910	UnaryOperator	!		5087860	0					
ANR	5087911	CallExpression	"extractHost ( request , host )"		5087860	1					
ANR	5087912	Callee	extractHost		5087860	0					
ANR	5087913	Identifier	extractHost		5087860	0					
ANR	5087914	ArgumentList	request		5087860	1					
ANR	5087915	Argument	request		5087860	0					
ANR	5087916	Identifier	request		5087860	0					
ANR	5087917	Argument	host		5087860	1					
ANR	5087918	Identifier	host		5087860	0					
ANR	5087919	CompoundStatement		10:41:258:258	5087860	1					
ANR	5087920	ReturnStatement	"return constructReply ( ""HTTP/1.1 400 Bad Request"" , """" ) ;"	713:8:25366:25421	5087860	0	True				
ANR	5087921	CallExpression	"constructReply ( ""HTTP/1.1 400 Bad Request"" , """" )"		5087860	0					
ANR	5087922	Callee	constructReply		5087860	0					
ANR	5087923	Identifier	constructReply		5087860	0					
ANR	5087924	ArgumentList	"""HTTP/1.1 400 Bad Request"""		5087860	1					
ANR	5087925	Argument	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5087926	PrimaryExpression	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5087927	Argument	""""""		5087860	1					
ANR	5087928	PrimaryExpression	""""""		5087860	0					
ANR	5087929	ExpressionStatement	"std :: transform ( host . begin ( ) , host . end ( ) , host . begin ( ) , & tolower )"	715:4:25433:25500	5087860	7	True				
ANR	5087930	CallExpression	"std :: transform ( host . begin ( ) , host . end ( ) , host . begin ( ) , & tolower )"		5087860	0					
ANR	5087931	Callee	std :: transform		5087860	0					
ANR	5087932	Identifier	std :: transform		5087860	0					
ANR	5087933	ArgumentList	host . begin ( )		5087860	1					
ANR	5087934	Argument	host . begin ( )		5087860	0					
ANR	5087935	CallExpression	host . begin ( )		5087860	0					
ANR	5087936	Callee	host . begin		5087860	0					
ANR	5087937	MemberAccess	host . begin		5087860	0					
ANR	5087938	Identifier	host		5087860	0					
ANR	5087939	Identifier	begin		5087860	1					
ANR	5087940	ArgumentList			5087860	1					
ANR	5087941	Argument	host . end ( )		5087860	1					
ANR	5087942	CallExpression	host . end ( )		5087860	0					
ANR	5087943	Callee	host . end		5087860	0					
ANR	5087944	MemberAccess	host . end		5087860	0					
ANR	5087945	Identifier	host		5087860	0					
ANR	5087946	Identifier	end		5087860	1					
ANR	5087947	ArgumentList			5087860	1					
ANR	5087948	Argument	host . begin ( )		5087860	2					
ANR	5087949	CallExpression	host . begin ( )		5087860	0					
ANR	5087950	Callee	host . begin		5087860	0					
ANR	5087951	MemberAccess	host . begin		5087860	0					
ANR	5087952	Identifier	host		5087860	0					
ANR	5087953	Identifier	begin		5087860	1					
ANR	5087954	ArgumentList			5087860	1					
ANR	5087955	Argument	& tolower		5087860	3					
ANR	5087956	UnaryOperationExpression	& tolower		5087860	0					
ANR	5087957	UnaryOperator	&		5087860	0					
ANR	5087958	Identifier	tolower		5087860	1					
ANR	5087959	IdentifierDeclStatement	AttributeValueMap queryParameters ;	719:4:25601:25634	5087860	8	True				
ANR	5087960	IdentifierDecl	queryParameters		5087860	0					
ANR	5087961	IdentifierDeclType	AttributeValueMap		5087860	0					
ANR	5087962	Identifier	queryParameters		5087860	1					
ANR	5087963	IdentifierDeclStatement	"std :: string :: size_type i = URL . find ( ""?"" ) ;"	720:4:25640:25682	5087860	9	True				
ANR	5087964	IdentifierDecl	"i = URL . find ( ""?"" )"		5087860	0					
ANR	5087965	IdentifierDeclType	std :: string :: size_type		5087860	0					
ANR	5087966	Identifier	i		5087860	1					
ANR	5087967	AssignmentExpression	"i = URL . find ( ""?"" )"		5087860	2		=			
ANR	5087968	Identifier	i		5087860	0					
ANR	5087969	CallExpression	"URL . find ( ""?"" )"		5087860	1					
ANR	5087970	Callee	URL . find		5087860	0					
ANR	5087971	MemberAccess	URL . find		5087860	0					
ANR	5087972	Identifier	URL		5087860	0					
ANR	5087973	Identifier	find		5087860	1					
ANR	5087974	ArgumentList	"""?"""		5087860	1					
ANR	5087975	Argument	"""?"""		5087860	0					
ANR	5087976	PrimaryExpression	"""?"""		5087860	0					
ANR	5087977	WhileStatement	while ( i < URL . size ( ) )		5087860	10					
ANR	5087978	Condition	i < URL . size ( )	721:11:25695:25708	5087860	0	True				
ANR	5087979	RelationalExpression	i < URL . size ( )		5087860	0		<			
ANR	5087980	Identifier	i		5087860	0					
ANR	5087981	CallExpression	URL . size ( )		5087860	1					
ANR	5087982	Callee	URL . size		5087860	0					
ANR	5087983	MemberAccess	URL . size		5087860	0					
ANR	5087984	Identifier	URL		5087860	0					
ANR	5087985	Identifier	size		5087860	1					
ANR	5087986	ArgumentList			5087860	1					
ANR	5087987	CompoundStatement		35:8:1398:1478	5087860	1					
ANR	5087988	IdentifierDeclStatement	"std :: string :: size_type equalsIdx = URL . find ( ""="" , i + 1 ) ;"	724:8:25857:25914	5087860	0	True				
ANR	5087989	IdentifierDecl	"equalsIdx = URL . find ( ""="" , i + 1 )"		5087860	0					
ANR	5087990	IdentifierDeclType	std :: string :: size_type		5087860	0					
ANR	5087991	Identifier	equalsIdx		5087860	1					
ANR	5087992	AssignmentExpression	"equalsIdx = URL . find ( ""="" , i + 1 )"		5087860	2		=			
ANR	5087993	Identifier	equalsIdx		5087860	0					
ANR	5087994	CallExpression	"URL . find ( ""="" , i + 1 )"		5087860	1					
ANR	5087995	Callee	URL . find		5087860	0					
ANR	5087996	MemberAccess	URL . find		5087860	0					
ANR	5087997	Identifier	URL		5087860	0					
ANR	5087998	Identifier	find		5087860	1					
ANR	5087999	ArgumentList	"""="""		5087860	1					
ANR	5088000	Argument	"""="""		5087860	0					
ANR	5088001	PrimaryExpression	"""="""		5087860	0					
ANR	5088002	Argument	i + 1		5087860	1					
ANR	5088003	AdditiveExpression	i + 1		5087860	0		+			
ANR	5088004	Identifier	i		5087860	0					
ANR	5088005	PrimaryExpression	1		5087860	1					
ANR	5088006	IfStatement	if ( std :: string :: npos == equalsIdx )		5087860	1					
ANR	5088007	Condition	std :: string :: npos == equalsIdx	725:12:25928:25957	5087860	0	True				
ANR	5088008	EqualityExpression	std :: string :: npos == equalsIdx		5087860	0		==			
ANR	5088009	Identifier	std :: string :: npos		5087860	0					
ANR	5088010	Identifier	equalsIdx		5087860	1					
ANR	5088011	CompoundStatement		24:12:877:901	5087860	1					
ANR	5088012	IdentifierDeclStatement	std :: ostringstream error ;	726:12:25975:25999	5087860	0	True				
ANR	5088013	IdentifierDecl	error		5087860	0					
ANR	5088014	IdentifierDeclType	std :: ostringstream		5087860	0					
ANR	5088015	Identifier	error		5087860	1					
ANR	5088016	ExpressionStatement	"error << ""Malformed URL '"" << URL << ""': attribute without value; failing"" << std :: endl"	727:12:26013:26100	5087860	1	True				
ANR	5088017	ShiftExpression	"error << ""Malformed URL '"" << URL << ""': attribute without value; failing"" << std :: endl"		5087860	0		<<			
ANR	5088018	Identifier	error		5087860	0					
ANR	5088019	ShiftExpression	"""Malformed URL '"" << URL << ""': attribute without value; failing"" << std :: endl"		5087860	1		<<			
ANR	5088020	PrimaryExpression	"""Malformed URL '"""		5087860	0					
ANR	5088021	ShiftExpression	"URL << ""': attribute without value; failing"" << std :: endl"		5087860	1		<<			
ANR	5088022	Identifier	URL		5087860	0					
ANR	5088023	ShiftExpression	"""': attribute without value; failing"" << std :: endl"		5087860	1		<<			
ANR	5088024	PrimaryExpression	"""': attribute without value; failing"""		5087860	0					
ANR	5088025	Identifier	std :: endl		5087860	1					
ANR	5088026	ExpressionStatement	"fprintf ( stderr , error . str ( ) . c_str ( ) )"	728:12:26114:26152	5087860	2	True				
ANR	5088027	CallExpression	"fprintf ( stderr , error . str ( ) . c_str ( ) )"		5087860	0					
ANR	5088028	Callee	fprintf		5087860	0					
ANR	5088029	Identifier	fprintf		5087860	0					
ANR	5088030	ArgumentList	stderr		5087860	1					
ANR	5088031	Argument	stderr		5087860	0					
ANR	5088032	Identifier	stderr		5087860	0					
ANR	5088033	Argument	error . str ( ) . c_str ( )		5087860	1					
ANR	5088034	CallExpression	error . str ( ) . c_str ( )		5087860	0					
ANR	5088035	Callee	error . str ( ) . c_str		5087860	0					
ANR	5088036	MemberAccess	error . str ( ) . c_str		5087860	0					
ANR	5088037	CallExpression	error . str ( )		5087860	0					
ANR	5088038	Callee	error . str		5087860	0					
ANR	5088039	MemberAccess	error . str		5087860	0					
ANR	5088040	Identifier	error		5087860	0					
ANR	5088041	Identifier	str		5087860	1					
ANR	5088042	ArgumentList			5087860	1					
ANR	5088043	Identifier	c_str		5087860	1					
ANR	5088044	ArgumentList			5087860	1					
ANR	5088045	ReturnStatement	"return constructReply ( ""HTTP/1.1 400 Bad Request"" , error . str ( ) ) ;"	729:12:26166:26230	5087860	3	True				
ANR	5088046	CallExpression	"constructReply ( ""HTTP/1.1 400 Bad Request"" , error . str ( ) )"		5087860	0					
ANR	5088047	Callee	constructReply		5087860	0					
ANR	5088048	Identifier	constructReply		5087860	0					
ANR	5088049	ArgumentList	"""HTTP/1.1 400 Bad Request"""		5087860	1					
ANR	5088050	Argument	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5088051	PrimaryExpression	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5088052	Argument	error . str ( )		5087860	1					
ANR	5088053	CallExpression	error . str ( )		5087860	0					
ANR	5088054	Callee	error . str		5087860	0					
ANR	5088055	MemberAccess	error . str		5087860	0					
ANR	5088056	Identifier	error		5087860	0					
ANR	5088057	Identifier	str		5087860	1					
ANR	5088058	ArgumentList			5087860	1					
ANR	5088059	IdentifierDeclStatement	"std :: string :: size_type ampersandIdx = URL . find ( ""&"" , i + 1 ) ;"	731:8:26258:26318	5087860	2	True				
ANR	5088060	IdentifierDecl	"ampersandIdx = URL . find ( ""&"" , i + 1 )"		5087860	0					
ANR	5088061	IdentifierDeclType	std :: string :: size_type		5087860	0					
ANR	5088062	Identifier	ampersandIdx		5087860	1					
ANR	5088063	AssignmentExpression	"ampersandIdx = URL . find ( ""&"" , i + 1 )"		5087860	2		=			
ANR	5088064	Identifier	ampersandIdx		5087860	0					
ANR	5088065	CallExpression	"URL . find ( ""&"" , i + 1 )"		5087860	1					
ANR	5088066	Callee	URL . find		5087860	0					
ANR	5088067	MemberAccess	URL . find		5087860	0					
ANR	5088068	Identifier	URL		5087860	0					
ANR	5088069	Identifier	find		5087860	1					
ANR	5088070	ArgumentList	"""&"""		5087860	1					
ANR	5088071	Argument	"""&"""		5087860	0					
ANR	5088072	PrimaryExpression	"""&"""		5087860	0					
ANR	5088073	Argument	i + 1		5087860	1					
ANR	5088074	AdditiveExpression	i + 1		5087860	0		+			
ANR	5088075	Identifier	i		5087860	0					
ANR	5088076	PrimaryExpression	1		5087860	1					
ANR	5088077	IfStatement	if ( std :: string :: npos == ampersandIdx )		5087860	3					
ANR	5088078	Condition	std :: string :: npos == ampersandIdx	732:12:26332:26364	5087860	0	True				
ANR	5088079	EqualityExpression	std :: string :: npos == ampersandIdx		5087860	0		==			
ANR	5088080	Identifier	std :: string :: npos		5087860	0					
ANR	5088081	Identifier	ampersandIdx		5087860	1					
ANR	5088082	CompoundStatement		30:48:1270:1270	5087860	1					
ANR	5088083	ExpressionStatement	ampersandIdx = URL . size ( )	733:12:26382:26407	5087860	0	True				
ANR	5088084	AssignmentExpression	ampersandIdx = URL . size ( )		5087860	0		=			
ANR	5088085	Identifier	ampersandIdx		5087860	0					
ANR	5088086	CallExpression	URL . size ( )		5087860	1					
ANR	5088087	Callee	URL . size		5087860	0					
ANR	5088088	MemberAccess	URL . size		5087860	0					
ANR	5088089	Identifier	URL		5087860	0					
ANR	5088090	Identifier	size		5087860	1					
ANR	5088091	ArgumentList			5087860	1					
ANR	5088092	IdentifierDeclStatement	"std :: string key = URL . substr ( i + 1 , equalsIdx - ( i + 1 ) ) ;"	736:8:26428:26486	5087860	4	True				
ANR	5088093	IdentifierDecl	"key = URL . substr ( i + 1 , equalsIdx - ( i + 1 ) )"		5087860	0					
ANR	5088094	IdentifierDeclType	std :: string		5087860	0					
ANR	5088095	Identifier	key		5087860	1					
ANR	5088096	AssignmentExpression	"key = URL . substr ( i + 1 , equalsIdx - ( i + 1 ) )"		5087860	2		=			
ANR	5088097	Identifier	key		5087860	0					
ANR	5088098	CallExpression	"URL . substr ( i + 1 , equalsIdx - ( i + 1 ) )"		5087860	1					
ANR	5088099	Callee	URL . substr		5087860	0					
ANR	5088100	MemberAccess	URL . substr		5087860	0					
ANR	5088101	Identifier	URL		5087860	0					
ANR	5088102	Identifier	substr		5087860	1					
ANR	5088103	ArgumentList	i + 1		5087860	1					
ANR	5088104	Argument	i + 1		5087860	0					
ANR	5088105	AdditiveExpression	i + 1		5087860	0		+			
ANR	5088106	Identifier	i		5087860	0					
ANR	5088107	PrimaryExpression	1		5087860	1					
ANR	5088108	Argument	equalsIdx - ( i + 1 )		5087860	1					
ANR	5088109	AdditiveExpression	equalsIdx - ( i + 1 )		5087860	0		-			
ANR	5088110	Identifier	equalsIdx		5087860	0					
ANR	5088111	AdditiveExpression	i + 1		5087860	1		+			
ANR	5088112	Identifier	i		5087860	0					
ANR	5088113	PrimaryExpression	1		5087860	1					
ANR	5088114	IdentifierDeclStatement	"std :: string value = URL . substr ( equalsIdx + 1 , ampersandIdx - ( equalsIdx + 1 ) ) ;"	737:8:26496:26576	5087860	5	True				
ANR	5088115	IdentifierDecl	"value = URL . substr ( equalsIdx + 1 , ampersandIdx - ( equalsIdx + 1 ) )"		5087860	0					
ANR	5088116	IdentifierDeclType	std :: string		5087860	0					
ANR	5088117	Identifier	value		5087860	1					
ANR	5088118	AssignmentExpression	"value = URL . substr ( equalsIdx + 1 , ampersandIdx - ( equalsIdx + 1 ) )"		5087860	2		=			
ANR	5088119	Identifier	value		5087860	0					
ANR	5088120	CallExpression	"URL . substr ( equalsIdx + 1 , ampersandIdx - ( equalsIdx + 1 ) )"		5087860	1					
ANR	5088121	Callee	URL . substr		5087860	0					
ANR	5088122	MemberAccess	URL . substr		5087860	0					
ANR	5088123	Identifier	URL		5087860	0					
ANR	5088124	Identifier	substr		5087860	1					
ANR	5088125	ArgumentList	equalsIdx + 1		5087860	1					
ANR	5088126	Argument	equalsIdx + 1		5087860	0					
ANR	5088127	AdditiveExpression	equalsIdx + 1		5087860	0		+			
ANR	5088128	Identifier	equalsIdx		5087860	0					
ANR	5088129	PrimaryExpression	1		5087860	1					
ANR	5088130	Argument	ampersandIdx - ( equalsIdx + 1 )		5087860	1					
ANR	5088131	AdditiveExpression	ampersandIdx - ( equalsIdx + 1 )		5087860	0		-			
ANR	5088132	Identifier	ampersandIdx		5087860	0					
ANR	5088133	AdditiveExpression	equalsIdx + 1		5087860	1		+			
ANR	5088134	Identifier	equalsIdx		5087860	0					
ANR	5088135	PrimaryExpression	1		5087860	1					
ANR	5088136	ExpressionStatement	queryParameters [ key ] = value	739:8:26681:26711	5087860	6	True				
ANR	5088137	AssignmentExpression	queryParameters [ key ] = value		5087860	0		=			
ANR	5088138	ArrayIndexing	queryParameters [ key ]		5087860	0					
ANR	5088139	Identifier	queryParameters		5087860	0					
ANR	5088140	Identifier	key		5087860	1					
ANR	5088141	Identifier	value		5087860	1					
ANR	5088142	ExpressionStatement	i = ampersandIdx	741:8:26730:26746	5087860	7	True				
ANR	5088143	AssignmentExpression	i = ampersandIdx		5087860	0		=			
ANR	5088144	Identifier	i		5087860	0					
ANR	5088145	Identifier	ampersandIdx		5087860	1					
ANR	5088146	IdentifierDeclStatement	"std :: string method = ""GET"" ;"	744:4:26759:26785	5087860	11	True				
ANR	5088147	IdentifierDecl	"method = ""GET"""		5087860	0					
ANR	5088148	IdentifierDeclType	std :: string		5087860	0					
ANR	5088149	Identifier	method		5087860	1					
ANR	5088150	AssignmentExpression	"method = ""GET"""		5087860	2		=			
ANR	5088151	Identifier	method		5087860	0					
ANR	5088152	PrimaryExpression	"""GET"""		5087860	1					
ANR	5088153	IfStatement	"if ( ! validateSignature ( method , host , URL , queryParameters ) )"		5087860	12					
ANR	5088154	Condition	"! validateSignature ( method , host , URL , queryParameters )"	745:8:26795:26851	5087860	0	True				
ANR	5088155	UnaryOperationExpression	"! validateSignature ( method , host , URL , queryParameters )"		5087860	0					
ANR	5088156	UnaryOperator	!		5087860	0					
ANR	5088157	CallExpression	"validateSignature ( method , host , URL , queryParameters )"		5087860	1					
ANR	5088158	Callee	validateSignature		5087860	0					
ANR	5088159	Identifier	validateSignature		5087860	0					
ANR	5088160	ArgumentList	method		5087860	1					
ANR	5088161	Argument	method		5087860	0					
ANR	5088162	Identifier	method		5087860	0					
ANR	5088163	Argument	host		5087860	1					
ANR	5088164	Identifier	host		5087860	0					
ANR	5088165	Argument	URL		5087860	2					
ANR	5088166	Identifier	URL		5087860	0					
ANR	5088167	Argument	queryParameters		5087860	3					
ANR	5088168	Identifier	queryParameters		5087860	0					
ANR	5088169	CompoundStatement		43:68:1757:1757	5087860	1					
ANR	5088170	ReturnStatement	"return constructReply ( ""HTTP/1.1 401 Unauthorized"" , ""Failed signature validation."" ) ;"	746:8:26865:26949	5087860	0	True				
ANR	5088171	CallExpression	"constructReply ( ""HTTP/1.1 401 Unauthorized"" , ""Failed signature validation."" )"		5087860	0					
ANR	5088172	Callee	constructReply		5087860	0					
ANR	5088173	Identifier	constructReply		5087860	0					
ANR	5088174	ArgumentList	"""HTTP/1.1 401 Unauthorized"""		5087860	1					
ANR	5088175	Argument	"""HTTP/1.1 401 Unauthorized"""		5087860	0					
ANR	5088176	PrimaryExpression	"""HTTP/1.1 401 Unauthorized"""		5087860	0					
ANR	5088177	Argument	"""Failed signature validation."""		5087860	1					
ANR	5088178	PrimaryExpression	"""Failed signature validation."""		5087860	0					
ANR	5088179	IdentifierDeclStatement	"std :: string action = queryParameters [ ""Action"" ] ;"	749:4:26962:27010	5087860	13	True				
ANR	5088180	IdentifierDecl	"action = queryParameters [ ""Action"" ]"		5087860	0					
ANR	5088181	IdentifierDeclType	std :: string		5087860	0					
ANR	5088182	Identifier	action		5087860	1					
ANR	5088183	AssignmentExpression	"action = queryParameters [ ""Action"" ]"		5087860	2		=			
ANR	5088184	Identifier	action		5087860	0					
ANR	5088185	ArrayIndexing	"queryParameters [ ""Action"" ]"		5087860	1					
ANR	5088186	Identifier	queryParameters		5087860	0					
ANR	5088187	PrimaryExpression	"""Action"""		5087860	1					
ANR	5088188	IfStatement	if ( action . empty ( ) )		5087860	14					
ANR	5088189	Condition	action . empty ( )	750:8:27020:27033	5087860	0	True				
ANR	5088190	CallExpression	action . empty ( )		5087860	0					
ANR	5088191	Callee	action . empty		5087860	0					
ANR	5088192	MemberAccess	action . empty		5087860	0					
ANR	5088193	Identifier	action		5087860	0					
ANR	5088194	Identifier	empty		5087860	1					
ANR	5088195	ArgumentList			5087860	1					
ANR	5088196	CompoundStatement		48:25:1939:1939	5087860	1					
ANR	5088197	ReturnStatement	"return constructReply ( ""HTTP/1.1 400 Bad Request"" , ""No action specified."" ) ;"	751:8:27047:27122	5087860	0	True				
ANR	5088198	CallExpression	"constructReply ( ""HTTP/1.1 400 Bad Request"" , ""No action specified."" )"		5087860	0					
ANR	5088199	Callee	constructReply		5087860	0					
ANR	5088200	Identifier	constructReply		5087860	0					
ANR	5088201	ArgumentList	"""HTTP/1.1 400 Bad Request"""		5087860	1					
ANR	5088202	Argument	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5088203	PrimaryExpression	"""HTTP/1.1 400 Bad Request"""		5087860	0					
ANR	5088204	Argument	"""No action specified."""		5087860	1					
ANR	5088205	PrimaryExpression	"""No action specified."""		5087860	0					
ANR	5088206	IdentifierDeclStatement	std :: string response ;	754:4:27139:27159	5087860	15	True				
ANR	5088207	IdentifierDecl	response		5087860	0					
ANR	5088208	IdentifierDeclType	std :: string		5087860	0					
ANR	5088209	Identifier	response		5087860	1					
ANR	5088210	IdentifierDeclStatement	ActionToHandlerMap :: const_iterator ci = simulatorActions . find ( action ) ;	755:4:27165:27236	5087860	16	True				
ANR	5088211	IdentifierDecl	ci = simulatorActions . find ( action )		5087860	0					
ANR	5088212	IdentifierDeclType	ActionToHandlerMap :: const_iterator		5087860	0					
ANR	5088213	Identifier	ci		5087860	1					
ANR	5088214	AssignmentExpression	ci = simulatorActions . find ( action )		5087860	2		=			
ANR	5088215	Identifier	ci		5087860	0					
ANR	5088216	CallExpression	simulatorActions . find ( action )		5087860	1					
ANR	5088217	Callee	simulatorActions . find		5087860	0					
ANR	5088218	MemberAccess	simulatorActions . find		5087860	0					
ANR	5088219	Identifier	simulatorActions		5087860	0					
ANR	5088220	Identifier	find		5087860	1					
ANR	5088221	ArgumentList	action		5087860	1					
ANR	5088222	Argument	action		5087860	0					
ANR	5088223	Identifier	action		5087860	0					
ANR	5088224	IfStatement	if ( simulatorActions . end ( ) == ci )		5087860	17					
ANR	5088225	Condition	simulatorActions . end ( ) == ci	756:8:27246:27273	5087860	0	True				
ANR	5088226	EqualityExpression	simulatorActions . end ( ) == ci		5087860	0		==			
ANR	5088227	CallExpression	simulatorActions . end ( )		5087860	0					
ANR	5088228	Callee	simulatorActions . end		5087860	0					
ANR	5088229	MemberAccess	simulatorActions . end		5087860	0					
ANR	5088230	Identifier	simulatorActions		5087860	0					
ANR	5088231	Identifier	end		5087860	1					
ANR	5088232	ArgumentList			5087860	1					
ANR	5088233	Identifier	ci		5087860	1					
ANR	5088234	CompoundStatement		55:8:2189:2213	5087860	1					
ANR	5088235	IdentifierDeclStatement	std :: ostringstream error ;	757:8:27287:27311	5087860	0	True				
ANR	5088236	IdentifierDecl	error		5087860	0					
ANR	5088237	IdentifierDeclType	std :: ostringstream		5087860	0					
ANR	5088238	Identifier	error		5087860	1					
ANR	5088239	ExpressionStatement	"error << ""Action '"" << action << ""' not found."" << std :: endl"	758:8:27321:27381	5087860	1	True				
ANR	5088240	ShiftExpression	"error << ""Action '"" << action << ""' not found."" << std :: endl"		5087860	0		<<			
ANR	5088241	Identifier	error		5087860	0					
ANR	5088242	ShiftExpression	"""Action '"" << action << ""' not found."" << std :: endl"		5087860	1		<<			
ANR	5088243	PrimaryExpression	"""Action '"""		5087860	0					
ANR	5088244	ShiftExpression	"action << ""' not found."" << std :: endl"		5087860	1		<<			
ANR	5088245	Identifier	action		5087860	0					
ANR	5088246	ShiftExpression	"""' not found."" << std :: endl"		5087860	1		<<			
ANR	5088247	PrimaryExpression	"""' not found."""		5087860	0					
ANR	5088248	Identifier	std :: endl		5087860	1					
ANR	5088249	ExpressionStatement	"fprintf ( stderr , error . str ( ) . c_str ( ) )"	759:8:27391:27429	5087860	2	True				
ANR	5088250	CallExpression	"fprintf ( stderr , error . str ( ) . c_str ( ) )"		5087860	0					
ANR	5088251	Callee	fprintf		5087860	0					
ANR	5088252	Identifier	fprintf		5087860	0					
ANR	5088253	ArgumentList	stderr		5087860	1					
ANR	5088254	Argument	stderr		5087860	0					
ANR	5088255	Identifier	stderr		5087860	0					
ANR	5088256	Argument	error . str ( ) . c_str ( )		5087860	1					
ANR	5088257	CallExpression	error . str ( ) . c_str ( )		5087860	0					
ANR	5088258	Callee	error . str ( ) . c_str		5087860	0					
ANR	5088259	MemberAccess	error . str ( ) . c_str		5087860	0					
ANR	5088260	CallExpression	error . str ( )		5087860	0					
ANR	5088261	Callee	error . str		5087860	0					
ANR	5088262	MemberAccess	error . str		5087860	0					
ANR	5088263	Identifier	error		5087860	0					
ANR	5088264	Identifier	str		5087860	1					
ANR	5088265	ArgumentList			5087860	1					
ANR	5088266	Identifier	c_str		5087860	1					
ANR	5088267	ArgumentList			5087860	1					
ANR	5088268	ReturnStatement	"return constructReply ( ""HTTP/1.1 404 Not Found"" , error . str ( ) ) ;"	760:8:27439:27501	5087860	3	True				
ANR	5088269	CallExpression	"constructReply ( ""HTTP/1.1 404 Not Found"" , error . str ( ) )"		5087860	0					
ANR	5088270	Callee	constructReply		5087860	0					
ANR	5088271	Identifier	constructReply		5087860	0					
ANR	5088272	ArgumentList	"""HTTP/1.1 404 Not Found"""		5087860	1					
ANR	5088273	Argument	"""HTTP/1.1 404 Not Found"""		5087860	0					
ANR	5088274	PrimaryExpression	"""HTTP/1.1 404 Not Found"""		5087860	0					
ANR	5088275	Argument	error . str ( )		5087860	1					
ANR	5088276	CallExpression	error . str ( )		5087860	0					
ANR	5088277	Callee	error . str		5087860	0					
ANR	5088278	MemberAccess	error . str		5087860	0					
ANR	5088279	Identifier	error		5087860	0					
ANR	5088280	Identifier	str		5087860	1					
ANR	5088281	ArgumentList			5087860	1					
ANR	5088282	IfStatement	"if ( ( * ( ci -> second ) ) ( queryParameters , response , requestCount ) )"		5087860	18					
ANR	5088283	Condition	"( * ( ci -> second ) ) ( queryParameters , response , requestCount )"	763:8:27522:27579	5087860	0	True				
ANR	5088284	CallExpression	"( * ( ci -> second ) ) ( queryParameters , response , requestCount )"		5087860	0					
ANR	5088285	Callee	* ( ci -> second )		5087860	0					
ANR	5088286	UnaryOperationExpression	* ( ci -> second )		5087860	0					
ANR	5088287	UnaryOperator	*		5087860	0					
ANR	5088288	PtrMemberAccess	ci -> second		5087860	1					
ANR	5088289	Identifier	ci		5087860	0					
ANR	5088290	Identifier	second		5087860	1					
ANR	5088291	ArgumentList	queryParameters		5087860	1					
ANR	5088292	Argument	queryParameters		5087860	0					
ANR	5088293	Identifier	queryParameters		5087860	0					
ANR	5088294	Argument	response		5087860	1					
ANR	5088295	Identifier	response		5087860	0					
ANR	5088296	Argument	requestCount		5087860	2					
ANR	5088297	Identifier	requestCount		5087860	0					
ANR	5088298	CompoundStatement		61:69:2485:2485	5087860	1					
ANR	5088299	ReturnStatement	"return constructReply ( ""HTTP/1.1 200 OK"" , response ) ;"	764:8:27593:27645	5087860	0	True				
ANR	5088300	CallExpression	"constructReply ( ""HTTP/1.1 200 OK"" , response )"		5087860	0					
ANR	5088301	Callee	constructReply		5087860	0					
ANR	5088302	Identifier	constructReply		5087860	0					
ANR	5088303	ArgumentList	"""HTTP/1.1 200 OK"""		5087860	1					
ANR	5088304	Argument	"""HTTP/1.1 200 OK"""		5087860	0					
ANR	5088305	PrimaryExpression	"""HTTP/1.1 200 OK"""		5087860	0					
ANR	5088306	Argument	response		5087860	1					
ANR	5088307	Identifier	response		5087860	0					
ANR	5088308	ElseStatement	else		5087860	0					
ANR	5088309	CompoundStatement		63:11:2560:2560	5087860	0					
ANR	5088310	ReturnStatement	"return constructReply ( ""HTTP/1.1 406 Not Acceptable"" , response ) ;"	766:8:27668:27732	5087860	0	True				
ANR	5088311	CallExpression	"constructReply ( ""HTTP/1.1 406 Not Acceptable"" , response )"		5087860	0					
ANR	5088312	Callee	constructReply		5087860	0					
ANR	5088313	Identifier	constructReply		5087860	0					
ANR	5088314	ArgumentList	"""HTTP/1.1 406 Not Acceptable"""		5087860	1					
ANR	5088315	Argument	"""HTTP/1.1 406 Not Acceptable"""		5087860	0					
ANR	5088316	PrimaryExpression	"""HTTP/1.1 406 Not Acceptable"""		5087860	0					
ANR	5088317	Argument	response		5087860	1					
ANR	5088318	Identifier	response		5087860	0					
ANR	5088319	ReturnType	std :: string		5087860	1					
ANR	5088320	Identifier	handleRequest		5087860	2					
ANR	5088321	ParameterList	const std :: string & request		5087860	3					
ANR	5088322	Parameter	const std :: string & request	703:27:25067:25093	5087860	0	True				
ANR	5088323	ParameterType	const std :: string &		5087860	0					
ANR	5088324	Identifier	request		5087860	1					
ANR	5088325	CFGEntryNode	ENTRY		5087860		True				
ANR	5088326	CFGExitNode	EXIT		5087860		True				
ANR	5088327	Symbol	request		5087860						
ANR	5088328	Symbol	URL . size		5087860						
ANR	5088329	Symbol	ci -> second		5087860						
ANR	5088330	Symbol	* key		5087860						
ANR	5088331	Symbol	error		5087860						
ANR	5088332	Symbol	URL		5087860						
ANR	5088333	Symbol	ampersandIdx		5087860						
ANR	5088334	Symbol	* ci		5087860						
ANR	5088335	Symbol	* * ci		5087860						
ANR	5088336	Symbol	std :: string :: npos		5087860						
ANR	5088337	Symbol	action . empty		5087860						
ANR	5088338	Symbol	queryParameters		5087860						
ANR	5088339	Symbol	host		5087860						
ANR	5088340	Symbol	action		5087860						
ANR	5088341	Symbol	& tolower		5087860						
ANR	5088342	Symbol	value		5087860						
ANR	5088343	Symbol	host . end		5087860						
ANR	5088344	Symbol	key		5087860						
ANR	5088345	Symbol	validateSignature		5087860						
ANR	5088346	Symbol	* ( ci -> second )		5087860						
ANR	5088347	Symbol	requestCount		5087860						
ANR	5088348	Symbol	simulatorActions . end		5087860						
ANR	5088349	Symbol	error . str		5087860						
ANR	5088350	Symbol	method		5087860						
ANR	5088351	Symbol	simulatorActions . find		5087860						
ANR	5088352	Symbol	extractURL		5087860						
ANR	5088353	Symbol	URL . substr		5087860						
ANR	5088354	Symbol	ci		5087860						
ANR	5088355	Symbol	extractHost		5087860						
ANR	5088356	Symbol	i		5087860						
ANR	5088357	Symbol	stderr		5087860						
ANR	5088358	Symbol	constructReply		5087860						
ANR	5088359	Symbol	equalsIdx		5087860						
ANR	5088360	Symbol	response		5087860						
ANR	5088361	Symbol	host . begin		5087860						
ANR	5088362	Symbol	simulatorActions		5087860						
ANR	5088363	Symbol	error . str ( ) . c_str		5087860						
ANR	5088364	Symbol	* ci -> second		5087860						
ANR	5088365	Symbol	URL . find		5087860						
ANR	5088366	Symbol	* queryParameters		5087860						
ANR	5088367	Function	handleConnection	770:0:27743:30012							
ANR	5088368	FunctionDef	handleConnection (int sockfd)		5088367	0					
ANR	5088369	CompoundStatement		770:36:27779:30012	5088367	0					
ANR	5088370	IdentifierDeclStatement	ssize_t bytesRead ;	771:4:27785:27802	5088367	0	True				
ANR	5088371	IdentifierDecl	bytesRead		5088367	0					
ANR	5088372	IdentifierDeclType	ssize_t		5088367	0					
ANR	5088373	Identifier	bytesRead		5088367	1					
ANR	5088374	IdentifierDeclStatement	char buffer [ 1024 + 1 ] ;	772:4:27808:27827	5088367	1	True				
ANR	5088375	IdentifierDecl	buffer [ 1024 + 1 ]		5088367	0					
ANR	5088376	IdentifierDeclType	char [ 1024 + 1 ]		5088367	0					
ANR	5088377	Identifier	buffer		5088367	1					
ANR	5088378	AdditiveExpression	1024 + 1		5088367	2		+			
ANR	5088379	PrimaryExpression	1024		5088367	0					
ANR	5088380	PrimaryExpression	1		5088367	1					
ANR	5088381	IdentifierDeclStatement	std :: string request ;	773:4:27833:27852	5088367	2	True				
ANR	5088382	IdentifierDecl	request		5088367	0					
ANR	5088383	IdentifierDeclType	std :: string		5088367	0					
ANR	5088384	Identifier	request		5088367	1					
ANR	5088385	WhileStatement	while ( 1 )		5088367	3					
ANR	5088386	Condition	1	775:11:27866:27866	5088367	0	True				
ANR	5088387	PrimaryExpression	1		5088367	0					
ANR	5088388	CompoundStatement		28:8:786:843	5088367	1					
ANR	5088389	ExpressionStatement	"bytesRead = read ( sockfd , ( void * ) buffer , 1024 )"	776:8:27880:27929	5088367	0	True				
ANR	5088390	AssignmentExpression	"bytesRead = read ( sockfd , ( void * ) buffer , 1024 )"		5088367	0		=			
ANR	5088391	Identifier	bytesRead		5088367	0					
ANR	5088392	CallExpression	"read ( sockfd , ( void * ) buffer , 1024 )"		5088367	1					
ANR	5088393	Callee	read		5088367	0					
ANR	5088394	Identifier	read		5088367	0					
ANR	5088395	ArgumentList	sockfd		5088367	1					
ANR	5088396	Argument	sockfd		5088367	0					
ANR	5088397	Identifier	sockfd		5088367	0					
ANR	5088398	Argument	( void * ) buffer		5088367	1					
ANR	5088399	CastExpression	( void * ) buffer		5088367	0					
ANR	5088400	CastTarget	void *		5088367	0					
ANR	5088401	Identifier	buffer		5088367	1					
ANR	5088402	Argument	1024		5088367	2					
ANR	5088403	PrimaryExpression	1024		5088367	0					
ANR	5088404	IfStatement	if ( bytesRead == - 1 )		5088367	1					
ANR	5088405	Condition	bytesRead == - 1	778:12:27952:27966	5088367	0	True				
ANR	5088406	EqualityExpression	bytesRead == - 1		5088367	0		==			
ANR	5088407	Identifier	bytesRead		5088367	0					
ANR	5088408	UnaryOperationExpression	- 1		5088367	1					
ANR	5088409	UnaryOperator	-		5088367	0					
ANR	5088410	PrimaryExpression	1		5088367	1					
ANR	5088411	CompoundStatement		9:30:190:190	5088367	1					
ANR	5088412	IfStatement	if ( errno == EINTR )		5088367	0					
ANR	5088413	Condition	errno == EINTR	779:16:27988:28001	5088367	0	True				
ANR	5088414	EqualityExpression	errno == EINTR		5088367	0		==			
ANR	5088415	Identifier	errno		5088367	0					
ANR	5088416	Identifier	EINTR		5088367	1					
ANR	5088417	CompoundStatement		10:33:225:225	5088367	1					
ANR	5088418	ContinueStatement	continue ;	781:16:28096:28104	5088367	0	True				
ANR	5088419	ExpressionStatement	"fprintf ( stderr , ""read() failed (%d): '%s'\\n"" , errno , strerror ( errno ) )"	783:12:28132:28205	5088367	1	True				
ANR	5088420	CallExpression	"fprintf ( stderr , ""read() failed (%d): '%s'\\n"" , errno , strerror ( errno ) )"		5088367	0					
ANR	5088421	Callee	fprintf		5088367	0					
ANR	5088422	Identifier	fprintf		5088367	0					
ANR	5088423	ArgumentList	stderr		5088367	1					
ANR	5088424	Argument	stderr		5088367	0					
ANR	5088425	Identifier	stderr		5088367	0					
ANR	5088426	Argument	"""read() failed (%d): '%s'\\n"""		5088367	1					
ANR	5088427	PrimaryExpression	"""read() failed (%d): '%s'\\n"""		5088367	0					
ANR	5088428	Argument	errno		5088367	2					
ANR	5088429	Identifier	errno		5088367	0					
ANR	5088430	Argument	strerror ( errno )		5088367	3					
ANR	5088431	CallExpression	strerror ( errno )		5088367	0					
ANR	5088432	Callee	strerror		5088367	0					
ANR	5088433	Identifier	strerror		5088367	0					
ANR	5088434	ArgumentList	errno		5088367	1					
ANR	5088435	Argument	errno		5088367	0					
ANR	5088436	Identifier	errno		5088367	0					
ANR	5088437	ReturnStatement	return ;	784:12:28219:28225	5088367	2	True				
ANR	5088438	IfStatement	if ( bytesRead == 0 )		5088367	2					
ANR	5088439	Condition	bytesRead == 0	787:12:28258:28271	5088367	0	True				
ANR	5088440	EqualityExpression	bytesRead == 0		5088367	0		==			
ANR	5088441	Identifier	bytesRead		5088367	0					
ANR	5088442	PrimaryExpression	0		5088367	1					
ANR	5088443	CompoundStatement		18:29:495:495	5088367	1					
ANR	5088444	ExpressionStatement	close ( sockfd )	788:12:28289:28304	5088367	0	True				
ANR	5088445	CallExpression	close ( sockfd )		5088367	0					
ANR	5088446	Callee	close		5088367	0					
ANR	5088447	Identifier	close		5088367	0					
ANR	5088448	ArgumentList	sockfd		5088367	1					
ANR	5088449	Argument	sockfd		5088367	0					
ANR	5088450	Identifier	sockfd		5088367	0					
ANR	5088451	ReturnStatement	return ;	789:12:28318:28324	5088367	1	True				
ANR	5088452	ExpressionStatement	buffer [ bytesRead ] = '\\0'	792:8:28353:28377	5088367	3	True				
ANR	5088453	AssignmentExpression	buffer [ bytesRead ] = '\\0'		5088367	0		=			
ANR	5088454	ArrayIndexing	buffer [ bytesRead ]		5088367	0					
ANR	5088455	Identifier	buffer		5088367	0					
ANR	5088456	Identifier	bytesRead		5088367	1					
ANR	5088457	PrimaryExpression	'\\0'		5088367	1					
ANR	5088458	ExpressionStatement	request += buffer	793:8:28387:28404	5088367	4	True				
ANR	5088459	AssignmentExpression	request += buffer		5088367	0		+=			
ANR	5088460	Identifier	request		5088367	0					
ANR	5088461	Identifier	buffer		5088367	1					
ANR	5088462	IdentifierDeclStatement	"std :: string :: size_type index = request . find ( ""\\r\\n\\r\\n"" ) ;"	797:8:28566:28623	5088367	5	True				
ANR	5088463	IdentifierDecl	"index = request . find ( ""\\r\\n\\r\\n"" )"		5088367	0					
ANR	5088464	IdentifierDeclType	std :: string :: size_type		5088367	0					
ANR	5088465	Identifier	index		5088367	1					
ANR	5088466	AssignmentExpression	"index = request . find ( ""\\r\\n\\r\\n"" )"		5088367	2		=			
ANR	5088467	Identifier	index		5088367	0					
ANR	5088468	CallExpression	"request . find ( ""\\r\\n\\r\\n"" )"		5088367	1					
ANR	5088469	Callee	request . find		5088367	0					
ANR	5088470	MemberAccess	request . find		5088367	0					
ANR	5088471	Identifier	request		5088367	0					
ANR	5088472	Identifier	find		5088367	1					
ANR	5088473	ArgumentList	"""\\r\\n\\r\\n"""		5088367	1					
ANR	5088474	Argument	"""\\r\\n\\r\\n"""		5088367	0					
ANR	5088475	PrimaryExpression	"""\\r\\n\\r\\n"""		5088367	0					
ANR	5088476	WhileStatement	while ( index != std :: string :: npos )		5088367	6					
ANR	5088477	Condition	index != std :: string :: npos	798:15:28640:28665	5088367	0	True				
ANR	5088478	EqualityExpression	index != std :: string :: npos		5088367	0		!=			
ANR	5088479	Identifier	index		5088367	0					
ANR	5088480	Identifier	std :: string :: npos		5088367	1					
ANR	5088481	CompoundStatement		35:12:1242:1291	5088367	1					
ANR	5088482	IdentifierDeclStatement	"std :: string firstRequest = request . substr ( 0 , index + 4 ) ;"	799:12:28683:28740	5088367	0	True				
ANR	5088483	IdentifierDecl	"firstRequest = request . substr ( 0 , index + 4 )"		5088367	0					
ANR	5088484	IdentifierDeclType	std :: string		5088367	0					
ANR	5088485	Identifier	firstRequest		5088367	1					
ANR	5088486	AssignmentExpression	"firstRequest = request . substr ( 0 , index + 4 )"		5088367	2		=			
ANR	5088487	Identifier	firstRequest		5088367	0					
ANR	5088488	CallExpression	"request . substr ( 0 , index + 4 )"		5088367	1					
ANR	5088489	Callee	request . substr		5088367	0					
ANR	5088490	MemberAccess	request . substr		5088367	0					
ANR	5088491	Identifier	request		5088367	0					
ANR	5088492	Identifier	substr		5088367	1					
ANR	5088493	ArgumentList	0		5088367	1					
ANR	5088494	Argument	0		5088367	0					
ANR	5088495	PrimaryExpression	0		5088367	0					
ANR	5088496	Argument	index + 4		5088367	1					
ANR	5088497	AdditiveExpression	index + 4		5088367	0		+			
ANR	5088498	Identifier	index		5088367	0					
ANR	5088499	PrimaryExpression	4		5088367	1					
ANR	5088500	ExpressionStatement	request = request . substr ( index + 4 )	800:12:28754:28791	5088367	1	True				
ANR	5088501	AssignmentExpression	request = request . substr ( index + 4 )		5088367	0		=			
ANR	5088502	Identifier	request		5088367	0					
ANR	5088503	CallExpression	request . substr ( index + 4 )		5088367	1					
ANR	5088504	Callee	request . substr		5088367	0					
ANR	5088505	MemberAccess	request . substr		5088367	0					
ANR	5088506	Identifier	request		5088367	0					
ANR	5088507	Identifier	substr		5088367	1					
ANR	5088508	ArgumentList	index + 4		5088367	1					
ANR	5088509	Argument	index + 4		5088367	0					
ANR	5088510	AdditiveExpression	index + 4		5088367	0		+			
ANR	5088511	Identifier	index		5088367	0					
ANR	5088512	PrimaryExpression	4		5088367	1					
ANR	5088513	IdentifierDeclStatement	std :: string reply = handleRequest ( firstRequest ) ;	804:12:29022:29071	5088367	2	True				
ANR	5088514	IdentifierDecl	reply = handleRequest ( firstRequest )		5088367	0					
ANR	5088515	IdentifierDeclType	std :: string		5088367	0					
ANR	5088516	Identifier	reply		5088367	1					
ANR	5088517	AssignmentExpression	reply = handleRequest ( firstRequest )		5088367	2		=			
ANR	5088518	Identifier	reply		5088367	0					
ANR	5088519	CallExpression	handleRequest ( firstRequest )		5088367	1					
ANR	5088520	Callee	handleRequest		5088367	0					
ANR	5088521	Identifier	handleRequest		5088367	0					
ANR	5088522	ArgumentList	firstRequest		5088367	1					
ANR	5088523	Argument	firstRequest		5088367	0					
ANR	5088524	Identifier	firstRequest		5088367	0					
ANR	5088525	IfStatement	if ( ! reply . empty ( ) )		5088367	3					
ANR	5088526	Condition	! reply . empty ( )	805:16:29089:29103	5088367	0	True				
ANR	5088527	UnaryOperationExpression	! reply . empty ( )		5088367	0					
ANR	5088528	UnaryOperator	!		5088367	0					
ANR	5088529	CallExpression	reply . empty ( )		5088367	1					
ANR	5088530	Callee	reply . empty		5088367	0					
ANR	5088531	MemberAccess	reply . empty		5088367	0					
ANR	5088532	Identifier	reply		5088367	0					
ANR	5088533	Identifier	empty		5088367	1					
ANR	5088534	ArgumentList			5088367	1					
ANR	5088535	CompoundStatement		40:16:1529:1564	5088367	1					
ANR	5088536	IdentifierDeclStatement	ssize_t totalBytesWritten = 0 ;	807:16:29209:29238	5088367	0	True				
ANR	5088537	IdentifierDecl	totalBytesWritten = 0		5088367	0					
ANR	5088538	IdentifierDeclType	ssize_t		5088367	0					
ANR	5088539	Identifier	totalBytesWritten		5088367	1					
ANR	5088540	AssignmentExpression	totalBytesWritten = 0		5088367	2		=			
ANR	5088541	Identifier	totalBytesWritten		5088367	0					
ANR	5088542	PrimaryExpression	0		5088367	1					
ANR	5088543	IdentifierDeclStatement	ssize_t bytesToWrite = reply . size ( ) ;	808:16:29256:29291	5088367	1	True				
ANR	5088544	IdentifierDecl	bytesToWrite = reply . size ( )		5088367	0					
ANR	5088545	IdentifierDeclType	ssize_t		5088367	0					
ANR	5088546	Identifier	bytesToWrite		5088367	1					
ANR	5088547	AssignmentExpression	bytesToWrite = reply . size ( )		5088367	2		=			
ANR	5088548	Identifier	bytesToWrite		5088367	0					
ANR	5088549	CallExpression	reply . size ( )		5088367	1					
ANR	5088550	Callee	reply . size		5088367	0					
ANR	5088551	MemberAccess	reply . size		5088367	0					
ANR	5088552	Identifier	reply		5088367	0					
ANR	5088553	Identifier	size		5088367	1					
ANR	5088554	ArgumentList			5088367	1					
ANR	5088555	IdentifierDeclStatement	const char * outBuf = reply . c_str ( ) ;	809:16:29309:29344	5088367	2	True				
ANR	5088556	IdentifierDecl	* outBuf = reply . c_str ( )		5088367	0					
ANR	5088557	IdentifierDeclType	const char *		5088367	0					
ANR	5088558	Identifier	outBuf		5088367	1					
ANR	5088559	AssignmentExpression	* outBuf = reply . c_str ( )		5088367	2		=			
ANR	5088560	Identifier	outBuf		5088367	0					
ANR	5088561	CallExpression	reply . c_str ( )		5088367	1					
ANR	5088562	Callee	reply . c_str		5088367	0					
ANR	5088563	MemberAccess	reply . c_str		5088367	0					
ANR	5088564	Identifier	reply		5088367	0					
ANR	5088565	Identifier	c_str		5088367	1					
ANR	5088566	ArgumentList			5088367	1					
ANR	5088567	WhileStatement	while ( totalBytesWritten != bytesToWrite )		5088367	3					
ANR	5088568	Condition	totalBytesWritten != bytesToWrite	810:23:29369:29401	5088367	0	True				
ANR	5088569	EqualityExpression	totalBytesWritten != bytesToWrite		5088367	0		!=			
ANR	5088570	Identifier	totalBytesWritten		5088367	0					
ANR	5088571	Identifier	bytesToWrite		5088367	1					
ANR	5088572	CompoundStatement		42:20:1647:1795	5088367	1					
ANR	5088573	IdentifierDeclStatement	"ssize_t bytesWritten = write ( sockfd , outBuf + totalBytesWritten , bytesToWrite - totalBytesWritten ) ;"	811:20:29427:29575	5088367	0	True				
ANR	5088574	IdentifierDecl	"bytesWritten = write ( sockfd , outBuf + totalBytesWritten , bytesToWrite - totalBytesWritten )"		5088367	0					
ANR	5088575	IdentifierDeclType	ssize_t		5088367	0					
ANR	5088576	Identifier	bytesWritten		5088367	1					
ANR	5088577	AssignmentExpression	"bytesWritten = write ( sockfd , outBuf + totalBytesWritten , bytesToWrite - totalBytesWritten )"		5088367	2		=			
ANR	5088578	Identifier	bytesWritten		5088367	0					
ANR	5088579	CallExpression	"write ( sockfd , outBuf + totalBytesWritten , bytesToWrite - totalBytesWritten )"		5088367	1					
ANR	5088580	Callee	write		5088367	0					
ANR	5088581	Identifier	write		5088367	0					
ANR	5088582	ArgumentList	sockfd		5088367	1					
ANR	5088583	Argument	sockfd		5088367	0					
ANR	5088584	Identifier	sockfd		5088367	0					
ANR	5088585	Argument	outBuf + totalBytesWritten		5088367	1					
ANR	5088586	AdditiveExpression	outBuf + totalBytesWritten		5088367	0		+			
ANR	5088587	Identifier	outBuf		5088367	0					
ANR	5088588	Identifier	totalBytesWritten		5088367	1					
ANR	5088589	Argument	bytesToWrite - totalBytesWritten		5088367	2					
ANR	5088590	AdditiveExpression	bytesToWrite - totalBytesWritten		5088367	0		-			
ANR	5088591	Identifier	bytesToWrite		5088367	0					
ANR	5088592	Identifier	totalBytesWritten		5088367	1					
ANR	5088593	IfStatement	if ( bytesWritten == - 1 )		5088367	1					
ANR	5088594	Condition	bytesWritten == - 1	814:24:29601:29618	5088367	0	True				
ANR	5088595	EqualityExpression	bytesWritten == - 1		5088367	0		==			
ANR	5088596	Identifier	bytesWritten		5088367	0					
ANR	5088597	UnaryOperationExpression	- 1		5088367	1					
ANR	5088598	UnaryOperator	-		5088367	0					
ANR	5088599	PrimaryExpression	1		5088367	1					
ANR	5088600	CompoundStatement		45:45:1842:1842	5088367	1					
ANR	5088601	ExpressionStatement	"fprintf ( stderr , ""write() failed (%d), '%s'; aborting reply.\\n"" , errno , strerror ( errno ) )"	815:24:29648:29739	5088367	0	True				
ANR	5088602	CallExpression	"fprintf ( stderr , ""write() failed (%d), '%s'; aborting reply.\\n"" , errno , strerror ( errno ) )"		5088367	0					
ANR	5088603	Callee	fprintf		5088367	0					
ANR	5088604	Identifier	fprintf		5088367	0					
ANR	5088605	ArgumentList	stderr		5088367	1					
ANR	5088606	Argument	stderr		5088367	0					
ANR	5088607	Identifier	stderr		5088367	0					
ANR	5088608	Argument	"""write() failed (%d), '%s'; aborting reply.\\n"""		5088367	1					
ANR	5088609	PrimaryExpression	"""write() failed (%d), '%s'; aborting reply.\\n"""		5088367	0					
ANR	5088610	Argument	errno		5088367	2					
ANR	5088611	Identifier	errno		5088367	0					
ANR	5088612	Argument	strerror ( errno )		5088367	3					
ANR	5088613	CallExpression	strerror ( errno )		5088367	0					
ANR	5088614	Callee	strerror		5088367	0					
ANR	5088615	Identifier	strerror		5088367	0					
ANR	5088616	ArgumentList	errno		5088367	1					
ANR	5088617	Argument	errno		5088367	0					
ANR	5088618	Identifier	errno		5088367	0					
ANR	5088619	ExpressionStatement	close ( sockfd )	816:24:29765:29780	5088367	1	True				
ANR	5088620	CallExpression	close ( sockfd )		5088367	0					
ANR	5088621	Callee	close		5088367	0					
ANR	5088622	Identifier	close		5088367	0					
ANR	5088623	ArgumentList	sockfd		5088367	1					
ANR	5088624	Argument	sockfd		5088367	0					
ANR	5088625	Identifier	sockfd		5088367	0					
ANR	5088626	ReturnStatement	return ;	817:24:29806:29812	5088367	2	True				
ANR	5088627	ExpressionStatement	totalBytesWritten += bytesWritten	819:20:29856:29889	5088367	2	True				
ANR	5088628	AssignmentExpression	totalBytesWritten += bytesWritten		5088367	0		+=			
ANR	5088629	Identifier	totalBytesWritten		5088367	0					
ANR	5088630	Identifier	bytesWritten		5088367	1					
ANR	5088631	ExpressionStatement	"index = request . find ( ""\\r\\n\\r\\n"" )"	823:12:29948:29982	5088367	4	True				
ANR	5088632	AssignmentExpression	"index = request . find ( ""\\r\\n\\r\\n"" )"		5088367	0		=			
ANR	5088633	Identifier	index		5088367	0					
ANR	5088634	CallExpression	"request . find ( ""\\r\\n\\r\\n"" )"		5088367	1					
ANR	5088635	Callee	request . find		5088367	0					
ANR	5088636	MemberAccess	request . find		5088367	0					
ANR	5088637	Identifier	request		5088367	0					
ANR	5088638	Identifier	find		5088367	1					
ANR	5088639	ArgumentList	"""\\r\\n\\r\\n"""		5088367	1					
ANR	5088640	Argument	"""\\r\\n\\r\\n"""		5088367	0					
ANR	5088641	PrimaryExpression	"""\\r\\n\\r\\n"""		5088367	0					
ANR	5088642	ReturnType	void		5088367	1					
ANR	5088643	Identifier	handleConnection		5088367	2					
ANR	5088644	ParameterList	int sockfd		5088367	3					
ANR	5088645	Parameter	int sockfd	770:23:27766:27775	5088367	0	True				
ANR	5088646	ParameterType	int		5088367	0					
ANR	5088647	Identifier	sockfd		5088367	1					
ANR	5088648	CFGEntryNode	ENTRY		5088367		True				
ANR	5088649	CFGExitNode	EXIT		5088367		True				
ANR	5088650	Symbol	request		5088367						
ANR	5088651	Symbol	request . find		5088367						
ANR	5088652	Symbol	bytesToWrite		5088367						
ANR	5088653	Symbol	EINTR		5088367						
ANR	5088654	Symbol	sockfd		5088367						
ANR	5088655	Symbol	* bytesRead		5088367						
ANR	5088656	Symbol	std :: string :: npos		5088367						
ANR	5088657	Symbol	outBuf		5088367						
ANR	5088658	Symbol	reply . empty		5088367						
ANR	5088659	Symbol	buffer		5088367						
ANR	5088660	Symbol	request . substr		5088367						
ANR	5088661	Symbol	reply		5088367						
ANR	5088662	Symbol	totalBytesWritten		5088367						
ANR	5088663	Symbol	write		5088367						
ANR	5088664	Symbol	bytesWritten		5088367						
ANR	5088665	Symbol	errno		5088367						
ANR	5088666	Symbol	* buffer		5088367						
ANR	5088667	Symbol	read		5088367						
ANR	5088668	Symbol	firstRequest		5088367						
ANR	5088669	Symbol	bytesRead		5088367						
ANR	5088670	Symbol	index		5088367						
ANR	5088671	Symbol	reply . size		5088367						
ANR	5088672	Symbol	stderr		5088367						
ANR	5088673	Symbol	strerror		5088367						
ANR	5088674	Symbol	handleRequest		5088367						
ANR	5088675	Symbol	reply . c_str		5088367						
ANR	5088676	Function	printLeakSummary	828:0:30015:31130							
ANR	5088677	FunctionDef	printLeakSummary ()		5088676	0					
ANR	5088678	CompoundStatement		828:23:30038:31130	5088676	0					
ANR	5088679	IdentifierDeclStatement	int rv = 0 ;	829:4:30044:30054	5088676	0	True				
ANR	5088680	IdentifierDecl	rv = 0		5088676	0					
ANR	5088681	IdentifierDeclType	int		5088676	0					
ANR	5088682	Identifier	rv		5088676	1					
ANR	5088683	AssignmentExpression	rv = 0		5088676	2		=			
ANR	5088684	Identifier	rv		5088676	0					
ANR	5088685	PrimaryExpression	0		5088676	1					
ANR	5088686	IdentifierDeclStatement	AccessKeyIDToUserMap :: const_iterator u = users . begin ( ) ;	831:4:30065:30119	5088676	1	True				
ANR	5088687	IdentifierDecl	u = users . begin ( )		5088676	0					
ANR	5088688	IdentifierDeclType	AccessKeyIDToUserMap :: const_iterator		5088676	0					
ANR	5088689	Identifier	u		5088676	1					
ANR	5088690	AssignmentExpression	u = users . begin ( )		5088676	2		=			
ANR	5088691	Identifier	u		5088676	0					
ANR	5088692	CallExpression	users . begin ( )		5088676	1					
ANR	5088693	Callee	users . begin		5088676	0					
ANR	5088694	MemberAccess	users . begin		5088676	0					
ANR	5088695	Identifier	users		5088676	0					
ANR	5088696	Identifier	begin		5088676	1					
ANR	5088697	ArgumentList			5088676	1					
ANR	5088698	ForStatement	for ( ; u != users . end ( ) ; ++ u )		5088676	2					
ANR	5088699	Condition	u != users . end ( )	832:11:30132:30147	5088676	0	True				
ANR	5088700	EqualityExpression	u != users . end ( )		5088676	0		!=			
ANR	5088701	Identifier	u		5088676	0					
ANR	5088702	CallExpression	users . end ( )		5088676	1					
ANR	5088703	Callee	users . end		5088676	0					
ANR	5088704	MemberAccess	users . end		5088676	0					
ANR	5088705	Identifier	users		5088676	0					
ANR	5088706	Identifier	end		5088676	1					
ANR	5088707	ArgumentList			5088676	1					
ANR	5088708	UnaryExpression	++ u	832:29:30150:30152	5088676	1	True				
ANR	5088709	IncDec	++		5088676	0					
ANR	5088710	Identifier	u		5088676	1					
ANR	5088711	CompoundStatement		17:8:590:661	5088676	2					
ANR	5088712	IfStatement	if ( ! u -> second . keypairs . empty ( ) )		5088676	0					
ANR	5088713	Condition	! u -> second . keypairs . empty ( )	834:12:30202:30229	5088676	0	True				
ANR	5088714	UnaryOperationExpression	! u -> second . keypairs . empty ( )		5088676	0					
ANR	5088715	UnaryOperator	!		5088676	0					
ANR	5088716	CallExpression	u -> second . keypairs . empty ( )		5088676	1					
ANR	5088717	Callee	u -> second . keypairs . empty		5088676	0					
ANR	5088718	MemberAccess	u -> second . keypairs . empty		5088676	0					
ANR	5088719	MemberAccess	u -> second . keypairs		5088676	0					
ANR	5088720	PtrMemberAccess	u -> second		5088676	0					
ANR	5088721	Identifier	u		5088676	0					
ANR	5088722	Identifier	second		5088676	1					
ANR	5088723	Identifier	keypairs		5088676	1					
ANR	5088724	Identifier	empty		5088676	1					
ANR	5088725	ArgumentList			5088676	1					
ANR	5088726	CompoundStatement		7:43:194:194	5088676	1					
ANR	5088727	ExpressionStatement	"fprintf ( stdout , ""User '%s' leaked keys.\\n"" , u -> first . c_str ( ) )"	835:12:30247:30310	5088676	0	True				
ANR	5088728	CallExpression	"fprintf ( stdout , ""User '%s' leaked keys.\\n"" , u -> first . c_str ( ) )"		5088676	0					
ANR	5088729	Callee	fprintf		5088676	0					
ANR	5088730	Identifier	fprintf		5088676	0					
ANR	5088731	ArgumentList	stdout		5088676	1					
ANR	5088732	Argument	stdout		5088676	0					
ANR	5088733	Identifier	stdout		5088676	0					
ANR	5088734	Argument	"""User '%s' leaked keys.\\n"""		5088676	1					
ANR	5088735	PrimaryExpression	"""User '%s' leaked keys.\\n"""		5088676	0					
ANR	5088736	Argument	u -> first . c_str ( )		5088676	2					
ANR	5088737	CallExpression	u -> first . c_str ( )		5088676	0					
ANR	5088738	Callee	u -> first . c_str		5088676	0					
ANR	5088739	MemberAccess	u -> first . c_str		5088676	0					
ANR	5088740	PtrMemberAccess	u -> first		5088676	0					
ANR	5088741	Identifier	u		5088676	0					
ANR	5088742	Identifier	first		5088676	1					
ANR	5088743	Identifier	c_str		5088676	1					
ANR	5088744	ArgumentList			5088676	1					
ANR	5088745	ExpressionStatement	rv = 6	836:12:30324:30330	5088676	1	True				
ANR	5088746	AssignmentExpression	rv = 6		5088676	0		=			
ANR	5088747	Identifier	rv		5088676	0					
ANR	5088748	PrimaryExpression	6		5088676	1					
ANR	5088749	IdentifierDeclStatement	InstanceIDToInstanceMap :: const_iterator i = u -> second . instances . begin ( ) ;	844:8:30629:30700	5088676	1	True				
ANR	5088750	IdentifierDecl	i = u -> second . instances . begin ( )		5088676	0					
ANR	5088751	IdentifierDeclType	InstanceIDToInstanceMap :: const_iterator		5088676	0					
ANR	5088752	Identifier	i		5088676	1					
ANR	5088753	AssignmentExpression	i = u -> second . instances . begin ( )		5088676	2		=			
ANR	5088754	Identifier	i		5088676	0					
ANR	5088755	CallExpression	u -> second . instances . begin ( )		5088676	1					
ANR	5088756	Callee	u -> second . instances . begin		5088676	0					
ANR	5088757	MemberAccess	u -> second . instances . begin		5088676	0					
ANR	5088758	MemberAccess	u -> second . instances		5088676	0					
ANR	5088759	PtrMemberAccess	u -> second		5088676	0					
ANR	5088760	Identifier	u		5088676	0					
ANR	5088761	Identifier	second		5088676	1					
ANR	5088762	Identifier	instances		5088676	1					
ANR	5088763	Identifier	begin		5088676	1					
ANR	5088764	ArgumentList			5088676	1					
ANR	5088765	ForStatement	for ( ; i != u -> second . instances . end ( ) ; ++ i )		5088676	2					
ANR	5088766	Condition	i != u -> second . instances . end ( )	845:15:30717:30746	5088676	0	True				
ANR	5088767	EqualityExpression	i != u -> second . instances . end ( )		5088676	0		!=			
ANR	5088768	Identifier	i		5088676	0					
ANR	5088769	CallExpression	u -> second . instances . end ( )		5088676	1					
ANR	5088770	Callee	u -> second . instances . end		5088676	0					
ANR	5088771	MemberAccess	u -> second . instances . end		5088676	0					
ANR	5088772	MemberAccess	u -> second . instances		5088676	0					
ANR	5088773	PtrMemberAccess	u -> second		5088676	0					
ANR	5088774	Identifier	u		5088676	0					
ANR	5088775	Identifier	second		5088676	1					
ANR	5088776	Identifier	instances		5088676	1					
ANR	5088777	Identifier	end		5088676	1					
ANR	5088778	ArgumentList			5088676	1					
ANR	5088779	UnaryExpression	++ i	845:47:30749:30751	5088676	1	True				
ANR	5088780	IncDec	++		5088676	0					
ANR	5088781	Identifier	i		5088676	1					
ANR	5088782	CompoundStatement		18:53:716:716	5088676	2					
ANR	5088783	IfStatement	if ( i -> second . instanceState . code ( ) != InstanceState :: TERMINATED )		5088676	0					
ANR	5088784	Condition	i -> second . instanceState . code ( ) != InstanceState :: TERMINATED	846:16:30773:30831	5088676	0	True				
ANR	5088785	EqualityExpression	i -> second . instanceState . code ( ) != InstanceState :: TERMINATED		5088676	0		!=			
ANR	5088786	CallExpression	i -> second . instanceState . code ( )		5088676	0					
ANR	5088787	Callee	i -> second . instanceState . code		5088676	0					
ANR	5088788	MemberAccess	i -> second . instanceState . code		5088676	0					
ANR	5088789	MemberAccess	i -> second . instanceState		5088676	0					
ANR	5088790	PtrMemberAccess	i -> second		5088676	0					
ANR	5088791	Identifier	i		5088676	0					
ANR	5088792	Identifier	second		5088676	1					
ANR	5088793	Identifier	instanceState		5088676	1					
ANR	5088794	Identifier	code		5088676	1					
ANR	5088795	ArgumentList			5088676	1					
ANR	5088796	Identifier	InstanceState :: TERMINATED		5088676	1					
ANR	5088797	CompoundStatement		19:78:796:796	5088676	1					
ANR	5088798	ExpressionStatement	"fprintf ( stdout , ""Instance '%s' in in state '%s', not terminated.\\n"" , i -> second . instanceID . c_str ( ) , i -> second . instanceState . name ( ) . c_str ( ) )"	847:16:30853:30993	5088676	0	True				
ANR	5088799	CallExpression	"fprintf ( stdout , ""Instance '%s' in in state '%s', not terminated.\\n"" , i -> second . instanceID . c_str ( ) , i -> second . instanceState . name ( ) . c_str ( ) )"		5088676	0					
ANR	5088800	Callee	fprintf		5088676	0					
ANR	5088801	Identifier	fprintf		5088676	0					
ANR	5088802	ArgumentList	stdout		5088676	1					
ANR	5088803	Argument	stdout		5088676	0					
ANR	5088804	Identifier	stdout		5088676	0					
ANR	5088805	Argument	"""Instance '%s' in in state '%s', not terminated.\\n"""		5088676	1					
ANR	5088806	PrimaryExpression	"""Instance '%s' in in state '%s', not terminated.\\n"""		5088676	0					
ANR	5088807	Argument	i -> second . instanceID . c_str ( )		5088676	2					
ANR	5088808	CallExpression	i -> second . instanceID . c_str ( )		5088676	0					
ANR	5088809	Callee	i -> second . instanceID . c_str		5088676	0					
ANR	5088810	MemberAccess	i -> second . instanceID . c_str		5088676	0					
ANR	5088811	MemberAccess	i -> second . instanceID		5088676	0					
ANR	5088812	PtrMemberAccess	i -> second		5088676	0					
ANR	5088813	Identifier	i		5088676	0					
ANR	5088814	Identifier	second		5088676	1					
ANR	5088815	Identifier	instanceID		5088676	1					
ANR	5088816	Identifier	c_str		5088676	1					
ANR	5088817	ArgumentList			5088676	1					
ANR	5088818	Argument	i -> second . instanceState . name ( ) . c_str ( )		5088676	3					
ANR	5088819	CallExpression	i -> second . instanceState . name ( ) . c_str ( )		5088676	0					
ANR	5088820	Callee	i -> second . instanceState . name ( ) . c_str		5088676	0					
ANR	5088821	MemberAccess	i -> second . instanceState . name ( ) . c_str		5088676	0					
ANR	5088822	CallExpression	i -> second . instanceState . name ( )		5088676	0					
ANR	5088823	Callee	i -> second . instanceState . name		5088676	0					
ANR	5088824	MemberAccess	i -> second . instanceState . name		5088676	0					
ANR	5088825	MemberAccess	i -> second . instanceState		5088676	0					
ANR	5088826	PtrMemberAccess	i -> second		5088676	0					
ANR	5088827	Identifier	i		5088676	0					
ANR	5088828	Identifier	second		5088676	1					
ANR	5088829	Identifier	instanceState		5088676	1					
ANR	5088830	Identifier	name		5088676	1					
ANR	5088831	ArgumentList			5088676	1					
ANR	5088832	Identifier	c_str		5088676	1					
ANR	5088833	ArgumentList			5088676	1					
ANR	5088834	ExpressionStatement	rv = 6	848:16:31011:31017	5088676	1	True				
ANR	5088835	AssignmentExpression	rv = 6		5088676	0		=			
ANR	5088836	Identifier	rv		5088676	0					
ANR	5088837	PrimaryExpression	6		5088676	1					
ANR	5088838	IfStatement	if ( rv == 0 )		5088676	3					
ANR	5088839	Condition	rv == 0	853:8:31058:31064	5088676	0	True				
ANR	5088840	EqualityExpression	rv == 0		5088676	0		==			
ANR	5088841	Identifier	rv		5088676	0					
ANR	5088842	PrimaryExpression	0		5088676	1					
ANR	5088843	CompoundStatement		26:18:1029:1029	5088676	1					
ANR	5088844	ExpressionStatement	"fprintf ( stdout , ""No leaks detected.\\n"" )"	853:20:31070:31111	5088676	0	True				
ANR	5088845	CallExpression	"fprintf ( stdout , ""No leaks detected.\\n"" )"		5088676	0					
ANR	5088846	Callee	fprintf		5088676	0					
ANR	5088847	Identifier	fprintf		5088676	0					
ANR	5088848	ArgumentList	stdout		5088676	1					
ANR	5088849	Argument	stdout		5088676	0					
ANR	5088850	Identifier	stdout		5088676	0					
ANR	5088851	Argument	"""No leaks detected.\\n"""		5088676	1					
ANR	5088852	PrimaryExpression	"""No leaks detected.\\n"""		5088676	0					
ANR	5088853	ReturnStatement	return rv ;	854:4:31119:31128	5088676	4	True				
ANR	5088854	Identifier	rv		5088676	0					
ANR	5088855	ReturnType	int		5088676	1					
ANR	5088856	Identifier	printLeakSummary		5088676	2					
ANR	5088857	ParameterList			5088676	3					
ANR	5088858	CFGEntryNode	ENTRY		5088676		True				
ANR	5088859	CFGExitNode	EXIT		5088676		True				
ANR	5088860	Symbol	u -> second . instances . begin		5088676						
ANR	5088861	Symbol	i -> second		5088676						
ANR	5088862	Symbol	rv		5088676						
ANR	5088863	Symbol	stdout		5088676						
ANR	5088864	Symbol	u -> second . keypairs		5088676						
ANR	5088865	Symbol	u -> second . instances		5088676						
ANR	5088866	Symbol	i -> second . instanceID		5088676						
ANR	5088867	Symbol	i -> second . instanceState		5088676						
ANR	5088868	Symbol	users . begin		5088676						
ANR	5088869	Symbol	u -> first		5088676						
ANR	5088870	Symbol	InstanceState :: TERMINATED		5088676						
ANR	5088871	Symbol	i -> second . instanceID . c_str		5088676						
ANR	5088872	Symbol	i -> second . instanceState . code		5088676						
ANR	5088873	Symbol	u -> second		5088676						
ANR	5088874	Symbol	u -> first . c_str		5088676						
ANR	5088875	Symbol	i		5088676						
ANR	5088876	Symbol	users		5088676						
ANR	5088877	Symbol	i -> second . instanceState . name		5088676						
ANR	5088878	Symbol	u -> second . keypairs . empty		5088676						
ANR	5088879	Symbol	u -> second . instances . end		5088676						
ANR	5088880	Symbol	* i		5088676						
ANR	5088881	Symbol	u		5088676						
ANR	5088882	Symbol	users . end		5088676						
ANR	5088883	Symbol	i -> second . instanceState . name ( ) . c_str		5088676						
ANR	5088884	Symbol	* u		5088676						
ANR	5088885	Function	sigterm	857:0:31133:31251							
ANR	5088886	FunctionDef	sigterm (int sig)		5088885	0					
ANR	5088887	CompoundStatement		857:24:31157:31251	5088885	0					
ANR	5088888	ExpressionStatement	"fprintf ( stdout , ""Caught signal %d, exiting.\\n"" , sig )"	858:4:31163:31217	5088885	0	True				
ANR	5088889	CallExpression	"fprintf ( stdout , ""Caught signal %d, exiting.\\n"" , sig )"		5088885	0					
ANR	5088890	Callee	fprintf		5088885	0					
ANR	5088891	Identifier	fprintf		5088885	0					
ANR	5088892	ArgumentList	stdout		5088885	1					
ANR	5088893	Argument	stdout		5088885	0					
ANR	5088894	Identifier	stdout		5088885	0					
ANR	5088895	Argument	"""Caught signal %d, exiting.\\n"""		5088885	1					
ANR	5088896	PrimaryExpression	"""Caught signal %d, exiting.\\n"""		5088885	0					
ANR	5088897	Argument	sig		5088885	2					
ANR	5088898	Identifier	sig		5088885	0					
ANR	5088899	ExpressionStatement	exit ( printLeakSummary ( ) )	859:4:31223:31249	5088885	1	True				
ANR	5088900	CallExpression	exit ( printLeakSummary ( ) )		5088885	0					
ANR	5088901	Callee	exit		5088885	0					
ANR	5088902	Identifier	exit		5088885	0					
ANR	5088903	ArgumentList	printLeakSummary ( )		5088885	1					
ANR	5088904	Argument	printLeakSummary ( )		5088885	0					
ANR	5088905	CallExpression	printLeakSummary ( )		5088885	0					
ANR	5088906	Callee	printLeakSummary		5088885	0					
ANR	5088907	Identifier	printLeakSummary		5088885	0					
ANR	5088908	ArgumentList			5088885	1					
ANR	5088909	ReturnType	void		5088885	1					
ANR	5088910	Identifier	sigterm		5088885	2					
ANR	5088911	ParameterList	int sig		5088885	3					
ANR	5088912	Parameter	int sig	857:14:31147:31153	5088885	0	True				
ANR	5088913	ParameterType	int		5088885	0					
ANR	5088914	Identifier	sig		5088885	1					
ANR	5088915	CFGEntryNode	ENTRY		5088885		True				
ANR	5088916	CFGExitNode	EXIT		5088885		True				
ANR	5088917	Symbol	sig		5088885						
ANR	5088918	Symbol	stdout		5088885						
ANR	5088919	Symbol	printLeakSummary		5088885						
ANR	5088920	DeclStmt									
ANR	5088921	Decl							struct sigaction	struct sigaction	sa
ANR	5088922	DeclStmt									
ANR	5088923	Decl							int	int	rv
ANR	5088924	DeclStmt									
ANR	5088925	Decl							int	int	listenSocket
ANR	5088926	DeclStmt									
ANR	5088927	Decl							struct sockaddr_in	struct sockaddr_in	listenAddr
ANR	5088928	DeclStmt									
ANR	5088929	Decl							socklen_t	socklen_t	listenAddrLen
ANR	5088930	DeclStmt									
ANR	5088931	Decl							struct sockaddr_in	struct sockaddr_in	remoteAddr
ANR	5088932	DeclStmt									
ANR	5088933	Decl							socklen_t	socklen_t	raSize
ANR	5088934	DeclStmt									
ANR	5088935	Decl							int	int	remoteSocket
