command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1988582	File	data/converged/CVE-2011-4930_htcondor/portGraph.cpp								
ANR	1988583	Function	splitString	28:0:934:1179							
ANR	1988584	FunctionDef	"splitString (std :: string s , std :: string & label , std :: string & attr)"		1988583	0					
ANR	1988585	CompoundStatement		29:0:1007:1179	1988583	0					
ANR	1988586	IdentifierDeclStatement	unsigned int dotPos = s . find_first_of ( '.' ) ;	30:1:1010:1052	1988583	0	True				
ANR	1988587	IdentifierDecl	dotPos = s . find_first_of ( '.' )		1988583	0					
ANR	1988588	IdentifierDeclType	unsigned int		1988583	0					
ANR	1988589	Identifier	dotPos		1988583	1					
ANR	1988590	AssignmentExpression	dotPos = s . find_first_of ( '.' )		1988583	2		=			
ANR	1988591	Identifier	dotPos		1988583	0					
ANR	1988592	CallExpression	s . find_first_of ( '.' )		1988583	1					
ANR	1988593	Callee	s . find_first_of		1988583	0					
ANR	1988594	MemberAccess	s . find_first_of		1988583	0					
ANR	1988595	Identifier	s		1988583	0					
ANR	1988596	Identifier	find_first_of		1988583	1					
ANR	1988597	ArgumentList	'.'		1988583	1					
ANR	1988598	Argument	'.'		1988583	0					
ANR	1988599	PrimaryExpression	'.'		1988583	0					
ANR	1988600	IfStatement	if ( dotPos >= s . size ( ) )		1988583	1					
ANR	1988601	Condition	dotPos >= s . size ( )	31:5:1059:1077	1988583	0	True				
ANR	1988602	RelationalExpression	dotPos >= s . size ( )		1988583	0		>=			
ANR	1988603	Identifier	dotPos		1988583	0					
ANR	1988604	CallExpression	s . size ( )		1988583	1					
ANR	1988605	Callee	s . size		1988583	0					
ANR	1988606	MemberAccess	s . size		1988583	0					
ANR	1988607	Identifier	s		1988583	0					
ANR	1988608	Identifier	size		1988583	1					
ANR	1988609	ArgumentList			1988583	1					
ANR	1988610	CompoundStatement		3:27:73:73	1988583	1					
ANR	1988611	ReturnStatement	return false ;	32:2:1085:1097	1988583	0	True				
ANR	1988612	Identifier	false		1988583	0					
ANR	1988613	ExpressionStatement	"label = s . substr ( 0 , dotPos )"	34:1:1103:1132	1988583	2	True				
ANR	1988614	AssignmentExpression	"label = s . substr ( 0 , dotPos )"		1988583	0		=			
ANR	1988615	Identifier	label		1988583	0					
ANR	1988616	CallExpression	"s . substr ( 0 , dotPos )"		1988583	1					
ANR	1988617	Callee	s . substr		1988583	0					
ANR	1988618	MemberAccess	s . substr		1988583	0					
ANR	1988619	Identifier	s		1988583	0					
ANR	1988620	Identifier	substr		1988583	1					
ANR	1988621	ArgumentList	0		1988583	1					
ANR	1988622	Argument	0		1988583	0					
ANR	1988623	PrimaryExpression	0		1988583	0					
ANR	1988624	Argument	dotPos		1988583	1					
ANR	1988625	Identifier	dotPos		1988583	0					
ANR	1988626	ExpressionStatement	attr = s . substr ( dotPos + 1 )	35:1:1135:1163	1988583	3	True				
ANR	1988627	AssignmentExpression	attr = s . substr ( dotPos + 1 )		1988583	0		=			
ANR	1988628	Identifier	attr		1988583	0					
ANR	1988629	CallExpression	s . substr ( dotPos + 1 )		1988583	1					
ANR	1988630	Callee	s . substr		1988583	0					
ANR	1988631	MemberAccess	s . substr		1988583	0					
ANR	1988632	Identifier	s		1988583	0					
ANR	1988633	Identifier	substr		1988583	1					
ANR	1988634	ArgumentList	dotPos + 1		1988583	1					
ANR	1988635	Argument	dotPos + 1		1988583	0					
ANR	1988636	AdditiveExpression	dotPos + 1		1988583	0		+			
ANR	1988637	Identifier	dotPos		1988583	0					
ANR	1988638	PrimaryExpression	1		1988583	1					
ANR	1988639	ReturnStatement	return true ;	36:1:1166:1177	1988583	4	True				
ANR	1988640	Identifier	true		1988583	0					
ANR	1988641	ReturnType	bool		1988583	1					
ANR	1988642	Identifier	splitString		1988583	2					
ANR	1988643	ParameterList	"std :: string s , std :: string & label , std :: string & attr"		1988583	3					
ANR	1988644	Parameter	std :: string s	28:18:952:964	1988583	0	True				
ANR	1988645	ParameterType	std :: string		1988583	0					
ANR	1988646	Identifier	s		1988583	1					
ANR	1988647	Parameter	std :: string & label	28:33:967:984	1988583	1	True				
ANR	1988648	ParameterType	std :: string &		1988583	0					
ANR	1988649	Identifier	label		1988583	1					
ANR	1988650	Parameter	std :: string & attr	28:53:987:1003	1988583	2	True				
ANR	1988651	ParameterType	std :: string &		1988583	0					
ANR	1988652	Identifier	attr		1988583	1					
ANR	1988653	CFGEntryNode	ENTRY		1988583		True				
ANR	1988654	CFGExitNode	EXIT		1988583		True				
ANR	1988655	Symbol	s		1988583						
ANR	1988656	Symbol	s . substr		1988583						
ANR	1988657	Symbol	s . size		1988583						
ANR	1988658	Symbol	s . find_first_of		1988583						
ANR	1988659	Symbol	false		1988583						
ANR	1988660	Symbol	true		1988583						
ANR	1988661	Symbol	label		1988583						
ANR	1988662	Symbol	attr		1988583						
ANR	1988663	Symbol	dotPos		1988583						
ANR	1988664	DeclStmt									
ANR	1988665	Decl							int	int	ExtAttrNode :: nextENodeNum
ANR	1988666	Function	ExtAttrNode :: ExtAttrNode	43:0:1242:1455							
ANR	1988667	FunctionDef	"ExtAttrNode :: ExtAttrNode (PortNode * _parent , std :: string _attrName)"		1988666	0					
ANR	1988668	CompoundStatement		45:0:1312:1455	1988666	0					
ANR	1988669	ExpressionStatement	eNodeNum = nextENodeNum	46:1:1315:1338	1988666	0	True				
ANR	1988670	AssignmentExpression	eNodeNum = nextENodeNum		1988666	0		=			
ANR	1988671	Identifier	eNodeNum		1988666	0					
ANR	1988672	Identifier	nextENodeNum		1988666	1					
ANR	1988673	ExpressionStatement	nextENodeNum ++	47:1:1341:1355	1988666	1	True				
ANR	1988674	PostIncDecOperationExpression	nextENodeNum ++		1988666	0					
ANR	1988675	Identifier	nextENodeNum		1988666	0					
ANR	1988676	IncDec	++		1988666	1					
ANR	1988677	ExpressionStatement	parent = _parent	48:1:1358:1374	1988666	2	True				
ANR	1988678	AssignmentExpression	parent = _parent		1988666	0		=			
ANR	1988679	Identifier	parent		1988666	0					
ANR	1988680	Identifier	_parent		1988666	1					
ANR	1988681	ExpressionStatement	attrName = _attrName	49:1:1377:1397	1988666	3	True				
ANR	1988682	AssignmentExpression	attrName = _attrName		1988666	0		=			
ANR	1988683	Identifier	attrName		1988666	0					
ANR	1988684	Identifier	_attrName		1988666	1					
ANR	1988685	ExpressionStatement	visited = NULL	51:1:1401:1415	1988666	4	True				
ANR	1988686	AssignmentExpression	visited = NULL		1988666	0		=			
ANR	1988687	Identifier	visited		1988666	0					
ANR	1988688	Identifier	NULL		1988666	1					
ANR	1988689	ExpressionStatement	currEdgeAtNode = NULL	52:1:1418:1439	1988666	5	True				
ANR	1988690	AssignmentExpression	currEdgeAtNode = NULL		1988666	0		=			
ANR	1988691	Identifier	currEdgeAtNode		1988666	0					
ANR	1988692	Identifier	NULL		1988666	1					
ANR	1988693	ExpressionStatement	path = NULL	53:1:1442:1453	1988666	6	True				
ANR	1988694	AssignmentExpression	path = NULL		1988666	0		=			
ANR	1988695	Identifier	path		1988666	0					
ANR	1988696	Identifier	NULL		1988666	1					
ANR	1988697	Identifier	ExtAttrNode :: ExtAttrNode		1988666	1					
ANR	1988698	ParameterList	"PortNode * _parent , std :: string _attrName"		1988666	2					
ANR	1988699	Parameter	PortNode * _parent	44:13:1269:1285	1988666	0	True				
ANR	1988700	ParameterType	PortNode *		1988666	0					
ANR	1988701	Identifier	_parent		1988666	1					
ANR	1988702	Parameter	std :: string _attrName	44:32:1288:1308	1988666	1	True				
ANR	1988703	ParameterType	std :: string		1988666	0					
ANR	1988704	Identifier	_attrName		1988666	1					
ANR	1988705	CFGEntryNode	ENTRY		1988666		True				
ANR	1988706	CFGExitNode	EXIT		1988666		True				
ANR	1988707	Symbol	parent		1988666						
ANR	1988708	Symbol	path		1988666						
ANR	1988709	Symbol	_parent		1988666						
ANR	1988710	Symbol	nextENodeNum		1988666						
ANR	1988711	Symbol	NULL		1988666						
ANR	1988712	Symbol	currEdgeAtNode		1988666						
ANR	1988713	Symbol	visited		1988666						
ANR	1988714	Symbol	eNodeNum		1988666						
ANR	1988715	Symbol	_attrName		1988666						
ANR	1988716	Symbol	attrName		1988666						
ANR	1988717	Function	ExtAttrNode :: ~ExtAttrNode	57:0:1459:1619							
ANR	1988718	FunctionDef	ExtAttrNode :: ~ExtAttrNode ()		1988717	0					
ANR	1988719	CompoundStatement		59:0:1489:1619	1988717	0					
ANR	1988720	IfStatement	if ( visited )		1988717	0					
ANR	1988721	Condition	visited	60:5:1496:1502	1988717	0	True				
ANR	1988722	Identifier	visited		1988717	0					
ANR	1988723	CompoundStatement		2:15:16:16	1988717	1					
ANR	1988724	Statement	delete	61:2:1510:1515	1988717	0	True				
ANR	1988725	Statement	[	61:9:1517:1517	1988717	1	True				
ANR	1988726	Statement	]	61:10:1518:1518	1988717	2	True				
ANR	1988727	ExpressionStatement	visited	61:12:1520:1527	1988717	3	True				
ANR	1988728	Identifier	visited		1988717	0					
ANR	1988729	IfStatement	if ( currEdgeAtNode )		1988717	1					
ANR	1988730	Condition	currEdgeAtNode	63:5:1537:1550	1988717	0	True				
ANR	1988731	Identifier	currEdgeAtNode		1988717	0					
ANR	1988732	CompoundStatement		5:22:64:64	1988717	1					
ANR	1988733	Statement	delete	64:2:1558:1563	1988717	0	True				
ANR	1988734	Statement	[	64:9:1565:1565	1988717	1	True				
ANR	1988735	Statement	]	64:10:1566:1566	1988717	2	True				
ANR	1988736	ExpressionStatement	currEdgeAtNode	64:12:1568:1582	1988717	3	True				
ANR	1988737	Identifier	currEdgeAtNode		1988717	0					
ANR	1988738	IfStatement	if ( path )		1988717	2					
ANR	1988739	Condition	path	66:5:1592:1595	1988717	0	True				
ANR	1988740	Identifier	path		1988717	0					
ANR	1988741	CompoundStatement		8:12:109:109	1988717	1					
ANR	1988742	Statement	delete	67:2:1603:1608	1988717	0	True				
ANR	1988743	ExpressionStatement	path	67:9:1610:1614	1988717	1	True				
ANR	1988744	Identifier	path		1988717	0					
ANR	1988745	Identifier	ExtAttrNode :: ~ExtAttrNode		1988717	1					
ANR	1988746	ParameterList			1988717	2					
ANR	1988747	CFGEntryNode	ENTRY		1988717		True				
ANR	1988748	CFGExitNode	EXIT		1988717		True				
ANR	1988749	Symbol	path		1988717						
ANR	1988750	Symbol	currEdgeAtNode		1988717						
ANR	1988751	Symbol	visited		1988717						
ANR	1988752	Function	ExtAttrNode :: GetFirstPath	71:0:1622:2160							
ANR	1988753	FunctionDef	ExtAttrNode :: GetFirstPath ()		1988752	0					
ANR	1988754	CompoundStatement		73:0:1663:2160	1988752	0					
ANR	1988755	IfStatement	if ( ! visited )		1988752	0					
ANR	1988756	Condition	! visited	75:5:1726:1733	1988752	0	True				
ANR	1988757	UnaryOperationExpression	! visited		1988752	0					
ANR	1988758	UnaryOperator	!		1988752	0					
ANR	1988759	Identifier	visited		1988752	1					
ANR	1988760	CompoundStatement		3:16:73:73	1988752	1					
ANR	1988761	ExpressionStatement	visited = new bool [ nextENodeNum ]	76:2:1741:1773	1988752	0	True				
ANR	1988762	AssignmentExpression	visited = new bool [ nextENodeNum ]		1988752	0		=			
ANR	1988763	Identifier	visited		1988752	0					
ANR	1988764	Identifier	nextENodeNum		1988752	1					
ANR	1988765	IfStatement	if ( ! currEdgeAtNode )		1988752	1					
ANR	1988766	Condition	! currEdgeAtNode	78:5:1783:1797	1988752	0	True				
ANR	1988767	UnaryOperationExpression	! currEdgeAtNode		1988752	0					
ANR	1988768	UnaryOperator	!		1988752	0					
ANR	1988769	Identifier	currEdgeAtNode		1988752	1					
ANR	1988770	CompoundStatement		6:23:137:137	1988752	1					
ANR	1988771	ExpressionStatement	currEdgeAtNode = new unsigned int [ nextENodeNum ]	79:2:1805:1852	1988752	0	True				
ANR	1988772	AssignmentExpression	currEdgeAtNode = new unsigned int [ nextENodeNum ]		1988752	0		=			
ANR	1988773	Identifier	currEdgeAtNode		1988752	0					
ANR	1988774	Identifier	nextENodeNum		1988752	1					
ANR	1988775	ForStatement	for ( int i = 0 ; i < nextENodeNum ; i ++ )		1988752	2					
ANR	1988776	ForInit	int i = 0 ;	83:6:1934:1943	1988752	0	True				
ANR	1988777	IdentifierDeclStatement	int i = 0 ;		1988752	0					
ANR	1988778	IdentifierDecl	i = 0		1988752	0					
ANR	1988779	IdentifierDeclType	int		1988752	0					
ANR	1988780	Identifier	i		1988752	1					
ANR	1988781	AssignmentExpression	i = 0		1988752	2		=			
ANR	1988782	Identifier	i		1988752	0					
ANR	1988783	PrimaryExpression	0		1988752	1					
ANR	1988784	Condition	i < nextENodeNum	83:17:1945:1960	1988752	1	True				
ANR	1988785	RelationalExpression	i < nextENodeNum		1988752	0		<			
ANR	1988786	Identifier	i		1988752	0					
ANR	1988787	Identifier	nextENodeNum		1988752	1					
ANR	1988788	PostIncDecOperationExpression	i ++	83:35:1963:1965	1988752	2	True				
ANR	1988789	Identifier	i		1988752	0					
ANR	1988790	IncDec	++		1988752	1					
ANR	1988791	CompoundStatement		11:41:305:305	1988752	3					
ANR	1988792	ExpressionStatement	visited [ i ] = false	84:2:1973:1991	1988752	0	True				
ANR	1988793	AssignmentExpression	visited [ i ] = false		1988752	0		=			
ANR	1988794	ArrayIndexing	visited [ i ]		1988752	0					
ANR	1988795	Identifier	visited		1988752	0					
ANR	1988796	Identifier	i		1988752	1					
ANR	1988797	Identifier	false		1988752	1					
ANR	1988798	ExpressionStatement	currEdgeAtNode [ i ] = 0	85:2:1995:2016	1988752	1	True				
ANR	1988799	AssignmentExpression	currEdgeAtNode [ i ] = 0		1988752	0		=			
ANR	1988800	ArrayIndexing	currEdgeAtNode [ i ]		1988752	0					
ANR	1988801	Identifier	currEdgeAtNode		1988752	0					
ANR	1988802	Identifier	i		1988752	1					
ANR	1988803	PrimaryExpression	0		1988752	1					
ANR	1988804	ExpressionStatement	visited [ eNodeNum ] = true	87:1:2022:2046	1988752	3	True				
ANR	1988805	AssignmentExpression	visited [ eNodeNum ] = true		1988752	0		=			
ANR	1988806	ArrayIndexing	visited [ eNodeNum ]		1988752	0					
ANR	1988807	Identifier	visited		1988752	0					
ANR	1988808	Identifier	eNodeNum		1988752	1					
ANR	1988809	Identifier	true		1988752	1					
ANR	1988810	ExpressionStatement	nodeStack . push_back ( this )	88:1:2049:2076	1988752	4	True				
ANR	1988811	CallExpression	nodeStack . push_back ( this )		1988752	0					
ANR	1988812	Callee	nodeStack . push_back		1988752	0					
ANR	1988813	MemberAccess	nodeStack . push_back		1988752	0					
ANR	1988814	Identifier	nodeStack		1988752	0					
ANR	1988815	Identifier	push_back		1988752	1					
ANR	1988816	ArgumentList	this		1988752	1					
ANR	1988817	Argument	this		1988752	0					
ANR	1988818	Identifier	this		1988752	0					
ANR	1988819	IfStatement	if ( path )		1988752	5					
ANR	1988820	Condition	path	89:5:2083:2086	1988752	0	True				
ANR	1988821	Identifier	path		1988752	0					
ANR	1988822	CompoundStatement		17:12:426:426	1988752	1					
ANR	1988823	Statement	delete	90:2:2094:2099	1988752	0	True				
ANR	1988824	ExpressionStatement	path	90:9:2101:2105	1988752	1	True				
ANR	1988825	Identifier	path		1988752	0					
ANR	1988826	ExpressionStatement	path = new MatchPath ( )	92:1:2111:2134	1988752	6	True				
ANR	1988827	AssignmentExpression	path = new MatchPath ( )		1988752	0		=			
ANR	1988828	Identifier	path		1988752	0					
ANR	1988829	UnaryExpression	new MatchPath ( )		1988752	1					
ANR	1988830	ReturnStatement	return GetNextPath ( ) ;	93:1:2137:2158	1988752	7	True				
ANR	1988831	CallExpression	GetNextPath ( )		1988752	0					
ANR	1988832	Callee	GetNextPath		1988752	0					
ANR	1988833	Identifier	GetNextPath		1988752	0					
ANR	1988834	ArgumentList			1988752	1					
ANR	1988835	ReturnType	MatchPath *		1988752	1					
ANR	1988836	Identifier	ExtAttrNode :: GetFirstPath		1988752	2					
ANR	1988837	ParameterList			1988752	3					
ANR	1988838	CFGEntryNode	ENTRY		1988752		True				
ANR	1988839	CFGExitNode	EXIT		1988752		True				
ANR	1988840	Symbol	nextENodeNum		1988752						
ANR	1988841	Symbol	* eNodeNum		1988752						
ANR	1988842	Symbol	currEdgeAtNode		1988752						
ANR	1988843	Symbol	* visited		1988752						
ANR	1988844	Symbol	GetNextPath		1988752						
ANR	1988845	Symbol	* currEdgeAtNode		1988752						
ANR	1988846	Symbol	false		1988752						
ANR	1988847	Symbol	this		1988752						
ANR	1988848	Symbol	i		1988752						
ANR	1988849	Symbol	eNodeNum		1988752						
ANR	1988850	Symbol	path		1988752						
ANR	1988851	Symbol	* i		1988752						
ANR	1988852	Symbol	visited		1988752						
ANR	1988853	Symbol	true		1988752						
ANR	1988854	Symbol	nodeStack		1988752						
ANR	1988855	Function	ExtAttrNode :: GetNextPath	96:0:2165:6450							
ANR	1988856	FunctionDef	ExtAttrNode :: GetNextPath ()		1988855	0					
ANR	1988857	CompoundStatement		98:0:2205:6450	1988855	0					
ANR	1988858	IfStatement	if ( nodeStack . empty ( ) )		1988855	0					
ANR	1988859	Condition	nodeStack . empty ( )	99:5:2212:2229	1988855	0	True				
ANR	1988860	CallExpression	nodeStack . empty ( )		1988855	0					
ANR	1988861	Callee	nodeStack . empty		1988855	0					
ANR	1988862	MemberAccess	nodeStack . empty		1988855	0					
ANR	1988863	Identifier	nodeStack		1988855	0					
ANR	1988864	Identifier	empty		1988855	1					
ANR	1988865	ArgumentList			1988855	1					
ANR	1988866	CompoundStatement		2:26:27:27	1988855	1					
ANR	1988867	ReturnStatement	return GetFirstPath ( ) ;	100:2:2237:2259	1988855	0	True				
ANR	1988868	CallExpression	GetFirstPath ( )		1988855	0					
ANR	1988869	Callee	GetFirstPath		1988855	0					
ANR	1988870	Identifier	GetFirstPath		1988855	0					
ANR	1988871	ArgumentList			1988855	1					
ANR	1988872	IdentifierDeclStatement	ExtAttrNode * currNode = nodeStack [ nodeStack . size ( ) - 1 ] ;	102:1:2265:2321	1988855	1	True				
ANR	1988873	IdentifierDecl	* currNode = nodeStack [ nodeStack . size ( ) - 1 ]		1988855	0					
ANR	1988874	IdentifierDeclType	ExtAttrNode *		1988855	0					
ANR	1988875	Identifier	currNode		1988855	1					
ANR	1988876	AssignmentExpression	* currNode = nodeStack [ nodeStack . size ( ) - 1 ]		1988855	2		=			
ANR	1988877	Identifier	currNode		1988855	0					
ANR	1988878	ArrayIndexing	nodeStack [ nodeStack . size ( ) - 1 ]		1988855	1					
ANR	1988879	Identifier	nodeStack		1988855	0					
ANR	1988880	AdditiveExpression	nodeStack . size ( ) - 1		1988855	1		-			
ANR	1988881	CallExpression	nodeStack . size ( )		1988855	0					
ANR	1988882	Callee	nodeStack . size		1988855	0					
ANR	1988883	MemberAccess	nodeStack . size		1988855	0					
ANR	1988884	Identifier	nodeStack		1988855	0					
ANR	1988885	Identifier	size		1988855	1					
ANR	1988886	ArgumentList			1988855	1					
ANR	1988887	PrimaryExpression	1		1988855	1					
ANR	1988888	IdentifierDeclStatement	ExtAttrNode * nextNode = NULL ;	103:1:2324:2352	1988855	2	True				
ANR	1988889	IdentifierDecl	* nextNode = NULL		1988855	0					
ANR	1988890	IdentifierDeclType	ExtAttrNode *		1988855	0					
ANR	1988891	Identifier	nextNode		1988855	1					
ANR	1988892	AssignmentExpression	* nextNode = NULL		1988855	2		=			
ANR	1988893	Identifier	NULL		1988855	0					
ANR	1988894	Identifier	NULL		1988855	1					
ANR	1988895	IdentifierDeclStatement	AttrNode * attrNode = NULL ;	104:1:2355:2380	1988855	3	True				
ANR	1988896	IdentifierDecl	* attrNode = NULL		1988855	0					
ANR	1988897	IdentifierDeclType	AttrNode *		1988855	0					
ANR	1988898	Identifier	attrNode		1988855	1					
ANR	1988899	AssignmentExpression	* attrNode = NULL		1988855	2		=			
ANR	1988900	Identifier	NULL		1988855	0					
ANR	1988901	Identifier	NULL		1988855	1					
ANR	1988902	IdentifierDeclStatement	MatchEdge * edge = NULL ;	105:1:2383:2405	1988855	4	True				
ANR	1988903	IdentifierDecl	* edge = NULL		1988855	0					
ANR	1988904	IdentifierDeclType	MatchEdge *		1988855	0					
ANR	1988905	Identifier	edge		1988855	1					
ANR	1988906	AssignmentExpression	* edge = NULL		1988855	2		=			
ANR	1988907	Identifier	NULL		1988855	0					
ANR	1988908	Identifier	NULL		1988855	1					
ANR	1988909	IdentifierDeclStatement	MatchPath * pathCopy = NULL ;	106:1:2408:2434	1988855	5	True				
ANR	1988910	IdentifierDecl	* pathCopy = NULL		1988855	0					
ANR	1988911	IdentifierDeclType	MatchPath *		1988855	0					
ANR	1988912	Identifier	pathCopy		1988855	1					
ANR	1988913	AssignmentExpression	* pathCopy = NULL		1988855	2		=			
ANR	1988914	Identifier	NULL		1988855	0					
ANR	1988915	Identifier	NULL		1988855	1					
ANR	1988916	IdentifierDeclStatement	unsigned int numMatchEdges = 0 ;	107:1:2437:2467	1988855	6	True				
ANR	1988917	IdentifierDecl	numMatchEdges = 0		1988855	0					
ANR	1988918	IdentifierDeclType	unsigned int		1988855	0					
ANR	1988919	Identifier	numMatchEdges		1988855	1					
ANR	1988920	AssignmentExpression	numMatchEdges = 0		1988855	2		=			
ANR	1988921	Identifier	numMatchEdges		1988855	0					
ANR	1988922	PrimaryExpression	0		1988855	1					
ANR	1988923	IdentifierDeclStatement	unsigned int currEdgeNum = 0 ;	108:1:2470:2498	1988855	7	True				
ANR	1988924	IdentifierDecl	currEdgeNum = 0		1988855	0					
ANR	1988925	IdentifierDeclType	unsigned int		1988855	0					
ANR	1988926	Identifier	currEdgeNum		1988855	1					
ANR	1988927	AssignmentExpression	currEdgeNum = 0		1988855	2		=			
ANR	1988928	Identifier	currEdgeNum		1988855	0					
ANR	1988929	PrimaryExpression	0		1988855	1					
ANR	1988930	WhileStatement	while ( true )		1988855	8					
ANR	1988931	Condition	true	127:8:3080:3083	1988855	0	True				
ANR	1988932	Identifier	true		1988855	0					
ANR	1988933	CompoundStatement		30:15:881:881	1988855	1					
ANR	1988934	ExpressionStatement	numMatchEdges = currNode -> parent -> GetNumMatchEdges ( )	128:2:3092:3145	1988855	0	True				
ANR	1988935	AssignmentExpression	numMatchEdges = currNode -> parent -> GetNumMatchEdges ( )		1988855	0		=			
ANR	1988936	Identifier	numMatchEdges		1988855	0					
ANR	1988937	CallExpression	currNode -> parent -> GetNumMatchEdges ( )		1988855	1					
ANR	1988938	Callee	currNode -> parent -> GetNumMatchEdges		1988855	0					
ANR	1988939	PtrMemberAccess	currNode -> parent -> GetNumMatchEdges		1988855	0					
ANR	1988940	PtrMemberAccess	currNode -> parent		1988855	0					
ANR	1988941	Identifier	currNode		1988855	0					
ANR	1988942	Identifier	parent		1988855	1					
ANR	1988943	Identifier	GetNumMatchEdges		1988855	1					
ANR	1988944	ArgumentList			1988855	1					
ANR	1988945	ExpressionStatement	currEdgeNum = currEdgeAtNode [ currNode -> eNodeNum ]	130:2:3207:3255	1988855	1	True				
ANR	1988946	AssignmentExpression	currEdgeNum = currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0		=			
ANR	1988947	Identifier	currEdgeNum		1988855	0					
ANR	1988948	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	1					
ANR	1988949	Identifier	currEdgeAtNode		1988855	0					
ANR	1988950	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1988951	Identifier	currNode		1988855	0					
ANR	1988952	Identifier	eNodeNum		1988855	1					
ANR	1988953	IfStatement	if ( currEdgeNum >= numMatchEdges )		1988855	2					
ANR	1988954	Condition	currEdgeNum >= numMatchEdges	131:6:3263:3290	1988855	0	True				
ANR	1988955	RelationalExpression	currEdgeNum >= numMatchEdges		1988855	0		>=			
ANR	1988956	Identifier	currEdgeNum		1988855	0					
ANR	1988957	Identifier	numMatchEdges		1988855	1					
ANR	1988958	CompoundStatement		34:37:1088:1088	1988855	1					
ANR	1988959	IfStatement	if ( path -> Empty ( ) )		1988855	0					
ANR	1988960	Condition	path -> Empty ( )	134:7:3356:3369	1988855	0	True				
ANR	1988961	CallExpression	path -> Empty ( )		1988855	0					
ANR	1988962	Callee	path -> Empty		1988855	0					
ANR	1988963	PtrMemberAccess	path -> Empty		1988855	0					
ANR	1988964	Identifier	path		1988855	0					
ANR	1988965	Identifier	Empty		1988855	1					
ANR	1988966	ArgumentList			1988855	1					
ANR	1988967	CompoundStatement		37:24:1167:1167	1988855	1					
ANR	1988968	ReturnStatement	return NULL ;	138:4:3477:3488	1988855	0	True				
ANR	1988969	Identifier	NULL		1988855	0					
ANR	1988970	ElseStatement	else		1988855	0					
ANR	1988971	CompoundStatement		43:8:1297:1297	1988855	0					
ANR	1988972	ExpressionStatement	currEdgeAtNode [ currNode -> eNodeNum ] = 0	143:4:3538:3576	1988855	0	True				
ANR	1988973	AssignmentExpression	currEdgeAtNode [ currNode -> eNodeNum ] = 0		1988855	0		=			
ANR	1988974	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0					
ANR	1988975	Identifier	currEdgeAtNode		1988855	0					
ANR	1988976	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1988977	Identifier	currNode		1988855	0					
ANR	1988978	Identifier	eNodeNum		1988855	1					
ANR	1988979	PrimaryExpression	0		1988855	1					
ANR	1988980	ExpressionStatement	visited [ currNode -> eNodeNum ] = false	144:4:3582:3617	1988855	1	True				
ANR	1988981	AssignmentExpression	visited [ currNode -> eNodeNum ] = false		1988855	0		=			
ANR	1988982	ArrayIndexing	visited [ currNode -> eNodeNum ]		1988855	0					
ANR	1988983	Identifier	visited		1988855	0					
ANR	1988984	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1988985	Identifier	currNode		1988855	0					
ANR	1988986	Identifier	eNodeNum		1988855	1					
ANR	1988987	Identifier	false		1988855	1					
ANR	1988988	ExpressionStatement	path -> RemoveLastEdge ( )	149:4:3754:3777	1988855	2	True				
ANR	1988989	CallExpression	path -> RemoveLastEdge ( )		1988855	0					
ANR	1988990	Callee	path -> RemoveLastEdge		1988855	0					
ANR	1988991	PtrMemberAccess	path -> RemoveLastEdge		1988855	0					
ANR	1988992	Identifier	path		1988855	0					
ANR	1988993	Identifier	RemoveLastEdge		1988855	1					
ANR	1988994	ArgumentList			1988855	1					
ANR	1988995	ExpressionStatement	nodeStack . pop_back ( )	153:4:3880:3901	1988855	3	True				
ANR	1988996	CallExpression	nodeStack . pop_back ( )		1988855	0					
ANR	1988997	Callee	nodeStack . pop_back		1988855	0					
ANR	1988998	MemberAccess	nodeStack . pop_back		1988855	0					
ANR	1988999	Identifier	nodeStack		1988855	0					
ANR	1989000	Identifier	pop_back		1988855	1					
ANR	1989001	ArgumentList			1988855	1					
ANR	1989002	IfStatement	if ( nodeStack . empty ( ) )		1988855	4					
ANR	1989003	Condition	nodeStack . empty ( )	154:8:3911:3928	1988855	0	True				
ANR	1989004	CallExpression	nodeStack . empty ( )		1988855	0					
ANR	1989005	Callee	nodeStack . empty		1988855	0					
ANR	1989006	MemberAccess	nodeStack . empty		1988855	0					
ANR	1989007	Identifier	nodeStack		1988855	0					
ANR	1989008	Identifier	empty		1988855	1					
ANR	1989009	ArgumentList			1988855	1					
ANR	1989010	CompoundStatement		57:29:1726:1726	1988855	1					
ANR	1989011	ReturnStatement	return NULL ;	157:5:4025:4036	1988855	0	True				
ANR	1989012	Identifier	NULL		1988855	0					
ANR	1989013	ExpressionStatement	currNode = nodeStack [ nodeStack . size ( ) - 1 ]	159:4:4048:4091	1988855	5	True				
ANR	1989014	AssignmentExpression	currNode = nodeStack [ nodeStack . size ( ) - 1 ]		1988855	0		=			
ANR	1989015	Identifier	currNode		1988855	0					
ANR	1989016	ArrayIndexing	nodeStack [ nodeStack . size ( ) - 1 ]		1988855	1					
ANR	1989017	Identifier	nodeStack		1988855	0					
ANR	1989018	AdditiveExpression	nodeStack . size ( ) - 1		1988855	1		-			
ANR	1989019	CallExpression	nodeStack . size ( )		1988855	0					
ANR	1989020	Callee	nodeStack . size		1988855	0					
ANR	1989021	MemberAccess	nodeStack . size		1988855	0					
ANR	1989022	Identifier	nodeStack		1988855	0					
ANR	1989023	Identifier	size		1988855	1					
ANR	1989024	ArgumentList			1988855	1					
ANR	1989025	PrimaryExpression	1		1988855	1					
ANR	1989026	ExpressionStatement	currEdgeAtNode [ currNode -> eNodeNum ] ++	160:4:4097:4133	1988855	6	True				
ANR	1989027	PostIncDecOperationExpression	currEdgeAtNode [ currNode -> eNodeNum ] ++		1988855	0					
ANR	1989028	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0					
ANR	1989029	Identifier	currEdgeAtNode		1988855	0					
ANR	1989030	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1989031	Identifier	currNode		1988855	0					
ANR	1989032	Identifier	eNodeNum		1988855	1					
ANR	1989033	IncDec	++		1988855	1					
ANR	1989034	ElseStatement	else		1988855	0					
ANR	1989035	CompoundStatement		66:7:1945:1945	1988855	0					
ANR	1989036	ExpressionStatement	edge = currNode -> parent -> GetMatchEdge ( currEdgeNum )	166:3:4188:4240	1988855	0	True				
ANR	1989037	AssignmentExpression	edge = currNode -> parent -> GetMatchEdge ( currEdgeNum )		1988855	0		=			
ANR	1989038	Identifier	edge		1988855	0					
ANR	1989039	CallExpression	currNode -> parent -> GetMatchEdge ( currEdgeNum )		1988855	1					
ANR	1989040	Callee	currNode -> parent -> GetMatchEdge		1988855	0					
ANR	1989041	PtrMemberAccess	currNode -> parent -> GetMatchEdge		1988855	0					
ANR	1989042	PtrMemberAccess	currNode -> parent		1988855	0					
ANR	1989043	Identifier	currNode		1988855	0					
ANR	1989044	Identifier	parent		1988855	1					
ANR	1989045	Identifier	GetMatchEdge		1988855	1					
ANR	1989046	ArgumentList	currEdgeNum		1988855	1					
ANR	1989047	Argument	currEdgeNum		1988855	0					
ANR	1989048	Identifier	currEdgeNum		1988855	0					
ANR	1989049	ExpressionStatement	attrNode = edge -> GetTarget ( ) -> GetAttrNode ( currNode -> attrName )	173:3:4454:4518	1988855	1	True				
ANR	1989050	AssignmentExpression	attrNode = edge -> GetTarget ( ) -> GetAttrNode ( currNode -> attrName )		1988855	0		=			
ANR	1989051	Identifier	attrNode		1988855	0					
ANR	1989052	CallExpression	edge -> GetTarget ( ) -> GetAttrNode ( currNode -> attrName )		1988855	1					
ANR	1989053	Callee	edge -> GetTarget ( ) -> GetAttrNode		1988855	0					
ANR	1989054	PtrMemberAccess	edge -> GetTarget ( ) -> GetAttrNode		1988855	0					
ANR	1989055	CallExpression	edge -> GetTarget ( )		1988855	0					
ANR	1989056	Callee	edge -> GetTarget		1988855	0					
ANR	1989057	PtrMemberAccess	edge -> GetTarget		1988855	0					
ANR	1989058	Identifier	edge		1988855	0					
ANR	1989059	Identifier	GetTarget		1988855	1					
ANR	1989060	ArgumentList			1988855	1					
ANR	1989061	Identifier	GetAttrNode		1988855	1					
ANR	1989062	ArgumentList	currNode -> attrName		1988855	1					
ANR	1989063	Argument	currNode -> attrName		1988855	0					
ANR	1989064	PtrMemberAccess	currNode -> attrName		1988855	0					
ANR	1989065	Identifier	currNode		1988855	0					
ANR	1989066	Identifier	attrName		1988855	1					
ANR	1989067	IfStatement	if ( attrNode )		1988855	2					
ANR	1989068	Condition	attrNode	174:7:4527:4534	1988855	0	True				
ANR	1989069	Identifier	attrNode		1988855	0					
ANR	1989070	CompoundStatement		77:18:2332:2332	1988855	1					
ANR	1989071	ExpressionStatement	nextNode = attrNode -> GetDep ( )	177:4:4598:4628	1988855	0	True				
ANR	1989072	AssignmentExpression	nextNode = attrNode -> GetDep ( )		1988855	0		=			
ANR	1989073	Identifier	nextNode		1988855	0					
ANR	1989074	CallExpression	attrNode -> GetDep ( )		1988855	1					
ANR	1989075	Callee	attrNode -> GetDep		1988855	0					
ANR	1989076	PtrMemberAccess	attrNode -> GetDep		1988855	0					
ANR	1989077	Identifier	attrNode		1988855	0					
ANR	1989078	Identifier	GetDep		1988855	1					
ANR	1989079	ArgumentList			1988855	1					
ANR	1989080	IfStatement	if ( nextNode )		1988855	1					
ANR	1989081	Condition	nextNode	178:8:4638:4645	1988855	0	True				
ANR	1989082	Identifier	nextNode		1988855	0					
ANR	1989083	CompoundStatement		81:19:2443:2443	1988855	1					
ANR	1989084	IfStatement	if ( visited [ nextNode -> eNodeNum ] )		1988855	0					
ANR	1989085	Condition	visited [ nextNode -> eNodeNum ]	181:9:4708:4734	1988855	0	True				
ANR	1989086	ArrayIndexing	visited [ nextNode -> eNodeNum ]		1988855	0					
ANR	1989087	Identifier	visited		1988855	0					
ANR	1989088	PtrMemberAccess	nextNode -> eNodeNum		1988855	1					
ANR	1989089	Identifier	nextNode		1988855	0					
ANR	1989090	Identifier	eNodeNum		1988855	1					
ANR	1989091	CompoundStatement		84:39:2532:2532	1988855	1					
ANR	1989092	ExpressionStatement	currEdgeAtNode [ currNode -> eNodeNum ] ++	184:6:4805:4841	1988855	0	True				
ANR	1989093	PostIncDecOperationExpression	currEdgeAtNode [ currNode -> eNodeNum ] ++		1988855	0					
ANR	1989094	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0					
ANR	1989095	Identifier	currEdgeAtNode		1988855	0					
ANR	1989096	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1989097	Identifier	currNode		1988855	0					
ANR	1989098	Identifier	eNodeNum		1988855	1					
ANR	1989099	IncDec	++		1988855	1					
ANR	1989100	ElseStatement	else		1988855	0					
ANR	1989101	CompoundStatement		89:10:2654:2654	1988855	0					
ANR	1989102	ExpressionStatement	path -> AddMatchEdge ( edge )	191:6:4988:5014	1988855	0	True				
ANR	1989103	CallExpression	path -> AddMatchEdge ( edge )		1988855	0					
ANR	1989104	Callee	path -> AddMatchEdge		1988855	0					
ANR	1989105	PtrMemberAccess	path -> AddMatchEdge		1988855	0					
ANR	1989106	Identifier	path		1988855	0					
ANR	1989107	Identifier	AddMatchEdge		1988855	1					
ANR	1989108	ArgumentList	edge		1988855	1					
ANR	1989109	Argument	edge		1988855	0					
ANR	1989110	Identifier	edge		1988855	0					
ANR	1989111	ExpressionStatement	currNode = nextNode	195:6:5125:5144	1988855	1	True				
ANR	1989112	AssignmentExpression	currNode = nextNode		1988855	0		=			
ANR	1989113	Identifier	currNode		1988855	0					
ANR	1989114	Identifier	nextNode		1988855	1					
ANR	1989115	ExpressionStatement	nodeStack . push_back ( currNode )	196:6:5152:5183	1988855	2	True				
ANR	1989116	CallExpression	nodeStack . push_back ( currNode )		1988855	0					
ANR	1989117	Callee	nodeStack . push_back		1988855	0					
ANR	1989118	MemberAccess	nodeStack . push_back		1988855	0					
ANR	1989119	Identifier	nodeStack		1988855	0					
ANR	1989120	Identifier	push_back		1988855	1					
ANR	1989121	ArgumentList	currNode		1988855	1					
ANR	1989122	Argument	currNode		1988855	0					
ANR	1989123	Identifier	currNode		1988855	0					
ANR	1989124	ExpressionStatement	visited [ currNode -> eNodeNum ] = true	197:6:5191:5225	1988855	3	True				
ANR	1989125	AssignmentExpression	visited [ currNode -> eNodeNum ] = true		1988855	0		=			
ANR	1989126	ArrayIndexing	visited [ currNode -> eNodeNum ]		1988855	0					
ANR	1989127	Identifier	visited		1988855	0					
ANR	1989128	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1989129	Identifier	currNode		1988855	0					
ANR	1989130	Identifier	eNodeNum		1988855	1					
ANR	1989131	Identifier	true		1988855	1					
ANR	1989132	ElseStatement	else		1988855	0					
ANR	1989133	IfStatement	if ( attrNode -> IsLiteral ( ) )		1988855	0					
ANR	1989134	Condition	attrNode -> IsLiteral ( )	200:13:5253:5274	1988855	0	True				
ANR	1989135	CallExpression	attrNode -> IsLiteral ( )		1988855	0					
ANR	1989136	Callee	attrNode -> IsLiteral		1988855	0					
ANR	1989137	PtrMemberAccess	attrNode -> IsLiteral		1988855	0					
ANR	1989138	Identifier	attrNode		1988855	0					
ANR	1989139	Identifier	IsLiteral		1988855	1					
ANR	1989140	ArgumentList			1988855	1					
ANR	1989141	CompoundStatement		103:38:3072:3072	1988855	1					
ANR	1989142	ExpressionStatement	path -> AddMatchEdge ( edge )	205:5:5423:5449	1988855	0	True				
ANR	1989143	CallExpression	path -> AddMatchEdge ( edge )		1988855	0					
ANR	1989144	Callee	path -> AddMatchEdge		1988855	0					
ANR	1989145	PtrMemberAccess	path -> AddMatchEdge		1988855	0					
ANR	1989146	Identifier	path		1988855	0					
ANR	1989147	Identifier	AddMatchEdge		1988855	1					
ANR	1989148	ArgumentList	edge		1988855	1					
ANR	1989149	Argument	edge		1988855	0					
ANR	1989150	Identifier	edge		1988855	0					
ANR	1989151	ExpressionStatement	currEdgeAtNode [ currNode -> eNodeNum ] ++	211:5:5633:5669	1988855	1	True				
ANR	1989152	PostIncDecOperationExpression	currEdgeAtNode [ currNode -> eNodeNum ] ++		1988855	0					
ANR	1989153	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0					
ANR	1989154	Identifier	currEdgeAtNode		1988855	0					
ANR	1989155	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1989156	Identifier	currNode		1988855	0					
ANR	1989157	Identifier	eNodeNum		1988855	1					
ANR	1989158	IncDec	++		1988855	1					
ANR	1989159	ExpressionStatement	pathCopy = path -> Copy ( )	212:5:5676:5700	1988855	2	True				
ANR	1989160	AssignmentExpression	pathCopy = path -> Copy ( )		1988855	0		=			
ANR	1989161	Identifier	pathCopy		1988855	0					
ANR	1989162	CallExpression	path -> Copy ( )		1988855	1					
ANR	1989163	Callee	path -> Copy		1988855	0					
ANR	1989164	PtrMemberAccess	path -> Copy		1988855	0					
ANR	1989165	Identifier	path		1988855	0					
ANR	1989166	Identifier	Copy		1988855	1					
ANR	1989167	ArgumentList			1988855	1					
ANR	1989168	ExpressionStatement	path -> RemoveLastEdge ( )	213:5:5707:5730	1988855	3	True				
ANR	1989169	CallExpression	path -> RemoveLastEdge ( )		1988855	0					
ANR	1989170	Callee	path -> RemoveLastEdge		1988855	0					
ANR	1989171	PtrMemberAccess	path -> RemoveLastEdge		1988855	0					
ANR	1989172	Identifier	path		1988855	0					
ANR	1989173	Identifier	RemoveLastEdge		1988855	1					
ANR	1989174	ArgumentList			1988855	1					
ANR	1989175	ReturnStatement	return pathCopy ;	214:5:5737:5752	1988855	4	True				
ANR	1989176	Identifier	pathCopy		1988855	0					
ANR	1989177	ElseStatement	else		1988855	0					
ANR	1989178	CompoundStatement		122:5:3602:3625	1988855	0					
ANR	1989179	IdentifierDeclStatement	"std :: string buffer = """" ;"	219:5:5808:5831	1988855	0	True				
ANR	1989180	IdentifierDecl	"buffer = """""		1988855	0					
ANR	1989181	IdentifierDeclType	std :: string		1988855	0					
ANR	1989182	Identifier	buffer		1988855	1					
ANR	1989183	AssignmentExpression	"buffer = """""		1988855	2		=			
ANR	1989184	Identifier	buffer		1988855	0					
ANR	1989185	PrimaryExpression	""""""		1988855	1					
ANR	1989186	ExpressionStatement	attrNode -> ToString ( buffer )	220:5:5838:5866	1988855	1	True				
ANR	1989187	CallExpression	attrNode -> ToString ( buffer )		1988855	0					
ANR	1989188	Callee	attrNode -> ToString		1988855	0					
ANR	1989189	PtrMemberAccess	attrNode -> ToString		1988855	0					
ANR	1989190	Identifier	attrNode		1988855	0					
ANR	1989191	Identifier	ToString		1988855	1					
ANR	1989192	ArgumentList	buffer		1988855	1					
ANR	1989193	Argument	buffer		1988855	0					
ANR	1989194	Identifier	buffer		1988855	0					
ANR	1989195	ExpressionStatement	"cout << ""error: AttrNode "" << buffer << ""has no dependencies and no literal value"" << endl"	221:5:5873:5970	1988855	2	True				
ANR	1989196	ShiftExpression	"cout << ""error: AttrNode "" << buffer << ""has no dependencies and no literal value"" << endl"		1988855	0		<<			
ANR	1989197	Identifier	cout		1988855	0					
ANR	1989198	ShiftExpression	"""error: AttrNode "" << buffer << ""has no dependencies and no literal value"" << endl"		1988855	1		<<			
ANR	1989199	PrimaryExpression	"""error: AttrNode """		1988855	0					
ANR	1989200	ShiftExpression	"buffer << ""has no dependencies and no literal value"" << endl"		1988855	1		<<			
ANR	1989201	Identifier	buffer		1988855	0					
ANR	1989202	ShiftExpression	"""has no dependencies and no literal value"" << endl"		1988855	1		<<			
ANR	1989203	PrimaryExpression	"""has no dependencies and no literal value"""		1988855	0					
ANR	1989204	Identifier	endl		1988855	1					
ANR	1989205	ReturnStatement	return NULL ;	223:5:5977:5988	1988855	3	True				
ANR	1989206	Identifier	NULL		1988855	0					
ANR	1989207	ElseStatement	else		1988855	0					
ANR	1989208	CompoundStatement		129:8:3803:3803	1988855	0					
ANR	1989209	ExpressionStatement	currEdgeAtNode [ currNode -> eNodeNum ] ++	234:4:6310:6346	1988855	0	True				
ANR	1989210	PostIncDecOperationExpression	currEdgeAtNode [ currNode -> eNodeNum ] ++		1988855	0					
ANR	1989211	ArrayIndexing	currEdgeAtNode [ currNode -> eNodeNum ]		1988855	0					
ANR	1989212	Identifier	currEdgeAtNode		1988855	0					
ANR	1989213	PtrMemberAccess	currNode -> eNodeNum		1988855	1					
ANR	1989214	Identifier	currNode		1988855	0					
ANR	1989215	Identifier	eNodeNum		1988855	1					
ANR	1989216	IncDec	++		1988855	1					
ANR	1989217	ExpressionStatement	"cout << ""error: ExtAttrNode::GetNextPath exited loop abnormally"" << endl"	238:1:6361:6433	1988855	9	True				
ANR	1989218	ShiftExpression	"cout << ""error: ExtAttrNode::GetNextPath exited loop abnormally"" << endl"		1988855	0		<<			
ANR	1989219	Identifier	cout		1988855	0					
ANR	1989220	ShiftExpression	"""error: ExtAttrNode::GetNextPath exited loop abnormally"" << endl"		1988855	1		<<			
ANR	1989221	PrimaryExpression	"""error: ExtAttrNode::GetNextPath exited loop abnormally"""		1988855	0					
ANR	1989222	Identifier	endl		1988855	1					
ANR	1989223	ReturnStatement	return NULL ;	239:1:6437:6448	1988855	10	True				
ANR	1989224	Identifier	NULL		1988855	0					
ANR	1989225	ReturnType	MatchPath *		1988855	1					
ANR	1989226	Identifier	ExtAttrNode :: GetNextPath		1988855	2					
ANR	1989227	ParameterList			1988855	3					
ANR	1989228	CFGEntryNode	ENTRY		1988855		True				
ANR	1989229	CFGExitNode	EXIT		1988855		True				
ANR	1989230	Symbol	path -> Empty		1988855						
ANR	1989231	Symbol	edge -> GetTarget		1988855						
ANR	1989232	Symbol	currEdgeAtNode		1988855						
ANR	1989233	Symbol	* visited		1988855						
ANR	1989234	Symbol	currNode -> parent		1988855						
ANR	1989235	Symbol	currNode -> eNodeNum		1988855						
ANR	1989236	Symbol	edge -> GetTarget ( ) -> GetAttrNode		1988855						
ANR	1989237	Symbol	numMatchEdges		1988855						
ANR	1989238	Symbol	attrNode		1988855						
ANR	1989239	Symbol	* currNode		1988855						
ANR	1989240	Symbol	path		1988855						
ANR	1989241	Symbol	edge		1988855						
ANR	1989242	Symbol	* nextNode -> eNodeNum		1988855						
ANR	1989243	Symbol	* nodeStack . size		1988855						
ANR	1989244	Symbol	* attrNode		1988855						
ANR	1989245	Symbol	currNode		1988855						
ANR	1989246	Symbol	nodeStack . empty		1988855						
ANR	1989247	Symbol	currNode -> parent -> GetMatchEdge		1988855						
ANR	1989248	Symbol	* * currNode		1988855						
ANR	1989249	Symbol	attrNode -> IsLiteral		1988855						
ANR	1989250	Symbol	buffer		1988855						
ANR	1989251	Symbol	nextNode -> eNodeNum		1988855						
ANR	1989252	Symbol	* currNode -> parent		1988855						
ANR	1989253	Symbol	NULL		1988855						
ANR	1989254	Symbol	currNode -> attrName		1988855						
ANR	1989255	Symbol	* currNode -> eNodeNum		1988855						
ANR	1989256	Symbol	* currEdgeAtNode		1988855						
ANR	1989257	Symbol	false		1988855						
ANR	1989258	Symbol	path -> Copy		1988855						
ANR	1989259	Symbol	nodeStack . size		1988855						
ANR	1989260	Symbol	currNode -> parent -> GetNumMatchEdges		1988855						
ANR	1989261	Symbol	* edge		1988855						
ANR	1989262	Symbol	* edge -> GetTarget		1988855						
ANR	1989263	Symbol	pathCopy		1988855						
ANR	1989264	Symbol	* nextNode		1988855						
ANR	1989265	Symbol	nextNode		1988855						
ANR	1989266	Symbol	true		1988855						
ANR	1989267	Symbol	visited		1988855						
ANR	1989268	Symbol	* * nextNode		1988855						
ANR	1989269	Symbol	currEdgeNum		1988855						
ANR	1989270	Symbol	* path		1988855						
ANR	1989271	Symbol	attrNode -> GetDep		1988855						
ANR	1989272	Symbol	GetFirstPath		1988855						
ANR	1989273	Symbol	nodeStack		1988855						
ANR	1989274	Symbol	* nodeStack		1988855						
ANR	1989275	Symbol	* * edge		1988855						
ANR	1989276	Function	ExtAttrNode :: ToString	242:0:6453:6638							
ANR	1989277	FunctionDef	ExtAttrNode :: ToString (std :: string & buffer)		1989276	0					
ANR	1989278	CompoundStatement		244:0:6504:6638	1989276	0					
ANR	1989279	IdentifierDeclStatement	char tempBuf [ 512 ] ;	245:1:6507:6524	1989276	0	True				
ANR	1989280	IdentifierDecl	tempBuf [ 512 ]		1989276	0					
ANR	1989281	IdentifierDeclType	char [ 512 ]		1989276	0					
ANR	1989282	Identifier	tempBuf		1989276	1					
ANR	1989283	PrimaryExpression	512		1989276	2					
ANR	1989284	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , eNodeNum )"	246:1:6527:6561	1989276	1	True				
ANR	1989285	CallExpression	"sprintf ( tempBuf , ""%d"" , eNodeNum )"		1989276	0					
ANR	1989286	Callee	sprintf		1989276	0					
ANR	1989287	Identifier	sprintf		1989276	0					
ANR	1989288	ArgumentList	tempBuf		1989276	1					
ANR	1989289	Argument	tempBuf		1989276	0					
ANR	1989290	Identifier	tempBuf		1989276	0					
ANR	1989291	Argument	"""%d"""		1989276	1					
ANR	1989292	PrimaryExpression	"""%d"""		1989276	0					
ANR	1989293	Argument	eNodeNum		1989276	2					
ANR	1989294	Identifier	eNodeNum		1989276	0					
ANR	1989295	ExpressionStatement	"buffer += ""[eNodeNum:"""	247:1:6564:6586	1989276	2	True				
ANR	1989296	AssignmentExpression	"buffer += ""[eNodeNum:"""		1989276	0		+=			
ANR	1989297	Identifier	buffer		1989276	0					
ANR	1989298	PrimaryExpression	"""[eNodeNum:"""		1989276	1					
ANR	1989299	ExpressionStatement	buffer += tempBuf	248:1:6589:6606	1989276	3	True				
ANR	1989300	AssignmentExpression	buffer += tempBuf		1989276	0		+=			
ANR	1989301	Identifier	buffer		1989276	0					
ANR	1989302	Identifier	tempBuf		1989276	1					
ANR	1989303	ExpressionStatement	"buffer += ""]"""	249:1:6609:6622	1989276	4	True				
ANR	1989304	AssignmentExpression	"buffer += ""]"""		1989276	0		+=			
ANR	1989305	Identifier	buffer		1989276	0					
ANR	1989306	PrimaryExpression	"""]"""		1989276	1					
ANR	1989307	ReturnStatement	return true ;	250:1:6625:6636	1989276	5	True				
ANR	1989308	Identifier	true		1989276	0					
ANR	1989309	ReturnType	bool		1989276	1					
ANR	1989310	Identifier	ExtAttrNode :: ToString		1989276	2					
ANR	1989311	ParameterList	std :: string & buffer		1989276	3					
ANR	1989312	Parameter	std :: string & buffer	243:10:6482:6500	1989276	0	True				
ANR	1989313	ParameterType	std :: string &		1989276	0					
ANR	1989314	Identifier	buffer		1989276	1					
ANR	1989315	CFGEntryNode	ENTRY		1989276		True				
ANR	1989316	CFGExitNode	EXIT		1989276		True				
ANR	1989317	Symbol	true		1989276						
ANR	1989318	Symbol	eNodeNum		1989276						
ANR	1989319	Symbol	buffer		1989276						
ANR	1989320	Symbol	tempBuf		1989276						
ANR	1989321	Function	AttrNode :: AttrNode	254:0:6661:6720							
ANR	1989322	FunctionDef	AttrNode :: AttrNode ()		1989321	0					
ANR	1989323	CompoundStatement		256:0:6684:6720	1989321	0					
ANR	1989324	ExpressionStatement	literalVal = false	257:1:6687:6705	1989321	0	True				
ANR	1989325	AssignmentExpression	literalVal = false		1989321	0		=			
ANR	1989326	Identifier	literalVal		1989321	0					
ANR	1989327	Identifier	false		1989321	1					
ANR	1989328	ExpressionStatement	dep = NULL	258:1:6708:6718	1989321	1	True				
ANR	1989329	AssignmentExpression	dep = NULL		1989321	0		=			
ANR	1989330	Identifier	dep		1989321	0					
ANR	1989331	Identifier	NULL		1989321	1					
ANR	1989332	Identifier	AttrNode :: AttrNode		1989321	1					
ANR	1989333	ParameterList			1989321	2					
ANR	1989334	CFGEntryNode	ENTRY		1989321		True				
ANR	1989335	CFGExitNode	EXIT		1989321		True				
ANR	1989336	Symbol	NULL		1989321						
ANR	1989337	Symbol	false		1989321						
ANR	1989338	Symbol	literalVal		1989321						
ANR	1989339	Symbol	dep		1989321						
ANR	1989340	Function	AttrNode :: AttrNode	261:0:6723:6825							
ANR	1989341	FunctionDef	AttrNode :: AttrNode (classad :: Value & _val)		1989340	0					
ANR	1989342	CompoundStatement		263:0:6767:6825	1989340	0					
ANR	1989343	ExpressionStatement	literalVal = true	264:1:6770:6787	1989340	0	True				
ANR	1989344	AssignmentExpression	literalVal = true		1989340	0		=			
ANR	1989345	Identifier	literalVal		1989340	0					
ANR	1989346	Identifier	true		1989340	1					
ANR	1989347	ExpressionStatement	dep = NULL	265:1:6790:6800	1989340	1	True				
ANR	1989348	AssignmentExpression	dep = NULL		1989340	0		=			
ANR	1989349	Identifier	dep		1989340	0					
ANR	1989350	Identifier	NULL		1989340	1					
ANR	1989351	ExpressionStatement	val . CopyFrom ( _val )	266:1:6803:6823	1989340	2	True				
ANR	1989352	CallExpression	val . CopyFrom ( _val )		1989340	0					
ANR	1989353	Callee	val . CopyFrom		1989340	0					
ANR	1989354	MemberAccess	val . CopyFrom		1989340	0					
ANR	1989355	Identifier	val		1989340	0					
ANR	1989356	Identifier	CopyFrom		1989340	1					
ANR	1989357	ArgumentList	_val		1989340	1					
ANR	1989358	Argument	_val		1989340	0					
ANR	1989359	Identifier	_val		1989340	0					
ANR	1989360	Identifier	AttrNode :: AttrNode		1989340	1					
ANR	1989361	ParameterList	classad :: Value & _val		1989340	2					
ANR	1989362	Parameter	classad :: Value & _val	262:10:6744:6763	1989340	0	True				
ANR	1989363	ParameterType	classad :: Value &		1989340	0					
ANR	1989364	Identifier	_val		1989340	1					
ANR	1989365	CFGEntryNode	ENTRY		1989340		True				
ANR	1989366	CFGExitNode	EXIT		1989340		True				
ANR	1989367	Symbol	val		1989340						
ANR	1989368	Symbol	NULL		1989340						
ANR	1989369	Symbol	true		1989340						
ANR	1989370	Symbol	_val		1989340						
ANR	1989371	Symbol	literalVal		1989340						
ANR	1989372	Symbol	dep		1989340						
ANR	1989373	Function	AttrNode :: ~AttrNode	269:0:6828:6877							
ANR	1989374	FunctionDef	AttrNode :: ~AttrNode ()		1989373	0					
ANR	1989375	CompoundStatement		271:0:6852:6877	1989373	0					
ANR	1989376	IfStatement	if ( dep )		1989373	0					
ANR	1989377	Condition	dep	272:5:6859:6861	1989373	0	True				
ANR	1989378	Identifier	dep		1989373	0					
ANR	1989379	Statement	delete	272:11:6865:6870	1989373	1	True				
ANR	1989380	ExpressionStatement	dep	272:18:6872:6875	1989373	1	True				
ANR	1989381	Identifier	dep		1989373	0					
ANR	1989382	Identifier	AttrNode :: ~AttrNode		1989373	1					
ANR	1989383	ParameterList			1989373	2					
ANR	1989384	CFGEntryNode	ENTRY		1989373		True				
ANR	1989385	CFGExitNode	EXIT		1989373		True				
ANR	1989386	Symbol	dep		1989373						
ANR	1989387	Function	AttrNode :: AddDep	275:0:6880:6955							
ANR	1989388	FunctionDef	AttrNode :: AddDep (ExtAttrNode * eNode)		1989387	0					
ANR	1989389	CompoundStatement		277:0:6925:6955	1989387	0					
ANR	1989390	ExpressionStatement	dep = eNode	278:1:6928:6939	1989387	0	True				
ANR	1989391	AssignmentExpression	dep = eNode		1989387	0		=			
ANR	1989392	Identifier	dep		1989387	0					
ANR	1989393	Identifier	eNode		1989387	1					
ANR	1989394	ReturnStatement	return true ;	279:1:6942:6953	1989387	1	True				
ANR	1989395	Identifier	true		1989387	0					
ANR	1989396	ReturnType	bool		1989387	1					
ANR	1989397	Identifier	AttrNode :: AddDep		1989387	2					
ANR	1989398	ParameterList	ExtAttrNode * eNode		1989387	3					
ANR	1989399	Parameter	ExtAttrNode * eNode	276:8:6904:6921	1989387	0	True				
ANR	1989400	ParameterType	ExtAttrNode *		1989387	0					
ANR	1989401	Identifier	eNode		1989387	1					
ANR	1989402	CFGEntryNode	ENTRY		1989387		True				
ANR	1989403	CFGExitNode	EXIT		1989387		True				
ANR	1989404	Symbol	eNode		1989387						
ANR	1989405	Symbol	true		1989387						
ANR	1989406	Symbol	dep		1989387						
ANR	1989407	Function	AttrNode :: GetDep	282:0:6958:7007							
ANR	1989408	FunctionDef	AttrNode :: GetDep ()		1989407	0					
ANR	1989409	CompoundStatement		284:0:6992:7007	1989407	0					
ANR	1989410	ReturnStatement	return dep ;	285:1:6995:7005	1989407	0	True				
ANR	1989411	Identifier	dep		1989407	0					
ANR	1989412	ReturnType	ExtAttrNode *		1989407	1					
ANR	1989413	Identifier	AttrNode :: GetDep		1989407	2					
ANR	1989414	ParameterList			1989407	3					
ANR	1989415	CFGEntryNode	ENTRY		1989407		True				
ANR	1989416	CFGExitNode	EXIT		1989407		True				
ANR	1989417	Symbol	dep		1989407						
ANR	1989418	Function	AttrNode :: IsLiteral	288:0:7010:7061							
ANR	1989419	FunctionDef	AttrNode :: IsLiteral ()		1989418	0					
ANR	1989420	CompoundStatement		290:0:7039:7061	1989418	0					
ANR	1989421	ReturnStatement	return literalVal ;	291:1:7042:7059	1989418	0	True				
ANR	1989422	Identifier	literalVal		1989418	0					
ANR	1989423	ReturnType	bool		1989418	1					
ANR	1989424	Identifier	AttrNode :: IsLiteral		1989418	2					
ANR	1989425	ParameterList			1989418	3					
ANR	1989426	CFGEntryNode	ENTRY		1989418		True				
ANR	1989427	CFGExitNode	EXIT		1989418		True				
ANR	1989428	Symbol	literalVal		1989418						
ANR	1989429	Function	AttrNode :: ToString	294:0:7064:7368							
ANR	1989430	FunctionDef	AttrNode :: ToString (std :: string & buffer)		1989429	0					
ANR	1989431	CompoundStatement		296:0:7112:7368	1989429	0					
ANR	1989432	IdentifierDeclStatement	classad :: PrettyPrint pp ;	297:1:7115:7138	1989429	0	True				
ANR	1989433	IdentifierDecl	pp		1989429	0					
ANR	1989434	IdentifierDeclType	classad :: PrettyPrint		1989429	0					
ANR	1989435	Identifier	pp		1989429	1					
ANR	1989436	ExpressionStatement	"buffer += ""["""	298:1:7141:7154	1989429	1	True				
ANR	1989437	AssignmentExpression	"buffer += ""["""		1989429	0		+=			
ANR	1989438	Identifier	buffer		1989429	0					
ANR	1989439	PrimaryExpression	"""["""		1989429	1					
ANR	1989440	IfStatement	if ( literalVal )		1989429	2					
ANR	1989441	Condition	literalVal	299:5:7161:7170	1989429	0	True				
ANR	1989442	Identifier	literalVal		1989429	0					
ANR	1989443	CompoundStatement		4:18:61:61	1989429	1					
ANR	1989444	ExpressionStatement	"buffer += ""val:"""	300:2:7178:7194	1989429	0	True				
ANR	1989445	AssignmentExpression	"buffer += ""val:"""		1989429	0		+=			
ANR	1989446	Identifier	buffer		1989429	0					
ANR	1989447	PrimaryExpression	"""val:"""		1989429	1					
ANR	1989448	ExpressionStatement	"pp . Unparse ( buffer , val )"	301:2:7198:7223	1989429	1	True				
ANR	1989449	CallExpression	"pp . Unparse ( buffer , val )"		1989429	0					
ANR	1989450	Callee	pp . Unparse		1989429	0					
ANR	1989451	MemberAccess	pp . Unparse		1989429	0					
ANR	1989452	Identifier	pp		1989429	0					
ANR	1989453	Identifier	Unparse		1989429	1					
ANR	1989454	ArgumentList	buffer		1989429	1					
ANR	1989455	Argument	buffer		1989429	0					
ANR	1989456	Identifier	buffer		1989429	0					
ANR	1989457	Argument	val		1989429	1					
ANR	1989458	Identifier	val		1989429	0					
ANR	1989459	IfStatement	if ( literalVal && dep )		1989429	3					
ANR	1989460	Condition	literalVal && dep	303:5:7233:7249	1989429	0	True				
ANR	1989461	AndExpression	literalVal && dep		1989429	0		&&			
ANR	1989462	Identifier	literalVal		1989429	0					
ANR	1989463	Identifier	dep		1989429	1					
ANR	1989464	CompoundStatement		8:25:140:140	1989429	1					
ANR	1989465	ExpressionStatement	"buffer += "","""	304:2:7257:7270	1989429	0	True				
ANR	1989466	AssignmentExpression	"buffer += "","""		1989429	0		+=			
ANR	1989467	Identifier	buffer		1989429	0					
ANR	1989468	PrimaryExpression	""","""		1989429	1					
ANR	1989469	IfStatement	if ( dep )		1989429	4					
ANR	1989470	Condition	dep	306:5:7280:7282	1989429	0	True				
ANR	1989471	Identifier	dep		1989429	0					
ANR	1989472	CompoundStatement		11:11:173:173	1989429	1					
ANR	1989473	ExpressionStatement	"buffer += ""dep:"""	307:2:7290:7306	1989429	0	True				
ANR	1989474	AssignmentExpression	"buffer += ""dep:"""		1989429	0		+=			
ANR	1989475	Identifier	buffer		1989429	0					
ANR	1989476	PrimaryExpression	"""dep:"""		1989429	1					
ANR	1989477	ExpressionStatement	dep -> ToString ( buffer )	308:2:7310:7333	1989429	1	True				
ANR	1989478	CallExpression	dep -> ToString ( buffer )		1989429	0					
ANR	1989479	Callee	dep -> ToString		1989429	0					
ANR	1989480	PtrMemberAccess	dep -> ToString		1989429	0					
ANR	1989481	Identifier	dep		1989429	0					
ANR	1989482	Identifier	ToString		1989429	1					
ANR	1989483	ArgumentList	buffer		1989429	1					
ANR	1989484	Argument	buffer		1989429	0					
ANR	1989485	Identifier	buffer		1989429	0					
ANR	1989486	ExpressionStatement	"buffer += ""]"""	310:1:7339:7352	1989429	5	True				
ANR	1989487	AssignmentExpression	"buffer += ""]"""		1989429	0		+=			
ANR	1989488	Identifier	buffer		1989429	0					
ANR	1989489	PrimaryExpression	"""]"""		1989429	1					
ANR	1989490	ReturnStatement	return true ;	311:1:7355:7366	1989429	6	True				
ANR	1989491	Identifier	true		1989429	0					
ANR	1989492	ReturnType	bool		1989429	1					
ANR	1989493	Identifier	AttrNode :: ToString		1989429	2					
ANR	1989494	ParameterList	std :: string & buffer		1989429	3					
ANR	1989495	Parameter	std :: string & buffer	295:10:7090:7108	1989429	0	True				
ANR	1989496	ParameterType	std :: string &		1989429	0					
ANR	1989497	Identifier	buffer		1989429	1					
ANR	1989498	CFGEntryNode	ENTRY		1989429		True				
ANR	1989499	CFGExitNode	EXIT		1989429		True				
ANR	1989500	Symbol	pp		1989429						
ANR	1989501	Symbol	val		1989429						
ANR	1989502	Symbol	true		1989429						
ANR	1989503	Symbol	buffer		1989429						
ANR	1989504	Symbol	literalVal		1989429						
ANR	1989505	Symbol	dep		1989429						
ANR	1989506	Function	PortNode :: PortNode	315:0:7391:7462							
ANR	1989507	FunctionDef	PortNode :: PortNode ()		1989506	0					
ANR	1989508	CompoundStatement		317:0:7414:7462	1989506	0					
ANR	1989509	ExpressionStatement	parentAd = NULL	318:1:7417:7432	1989506	0	True				
ANR	1989510	AssignmentExpression	parentAd = NULL		1989506	0		=			
ANR	1989511	Identifier	parentAd		1989506	0					
ANR	1989512	Identifier	NULL		1989506	1					
ANR	1989513	ExpressionStatement	adNum = - 1	319:1:7435:7445	1989506	1	True				
ANR	1989514	AssignmentExpression	adNum = - 1		1989506	0		=			
ANR	1989515	Identifier	adNum		1989506	0					
ANR	1989516	UnaryOperationExpression	- 1		1989506	1					
ANR	1989517	UnaryOperator	-		1989506	0					
ANR	1989518	PrimaryExpression	1		1989506	1					
ANR	1989519	ExpressionStatement	portNum = - 1	320:1:7448:7460	1989506	2	True				
ANR	1989520	AssignmentExpression	portNum = - 1		1989506	0		=			
ANR	1989521	Identifier	portNum		1989506	0					
ANR	1989522	UnaryOperationExpression	- 1		1989506	1					
ANR	1989523	UnaryOperator	-		1989506	0					
ANR	1989524	PrimaryExpression	1		1989506	1					
ANR	1989525	Identifier	PortNode :: PortNode		1989506	1					
ANR	1989526	ParameterList			1989506	2					
ANR	1989527	CFGEntryNode	ENTRY		1989506		True				
ANR	1989528	CFGExitNode	EXIT		1989506		True				
ANR	1989529	Symbol	NULL		1989506						
ANR	1989530	Symbol	portNum		1989506						
ANR	1989531	Symbol	parentAd		1989506						
ANR	1989532	Symbol	adNum		1989506						
ANR	1989533	Function	PortNode :: PortNode	323:0:7465:7605							
ANR	1989534	FunctionDef	"PortNode :: PortNode (classad :: ClassAd * _parentAd , int _adNum , int _portNum)"		1989533	0					
ANR	1989535	CompoundStatement		325:0:7542:7605	1989533	0					
ANR	1989536	ExpressionStatement	parentAd = _parentAd	326:1:7545:7565	1989533	0	True				
ANR	1989537	AssignmentExpression	parentAd = _parentAd		1989533	0		=			
ANR	1989538	Identifier	parentAd		1989533	0					
ANR	1989539	Identifier	_parentAd		1989533	1					
ANR	1989540	ExpressionStatement	adNum = _adNum	327:1:7568:7582	1989533	1	True				
ANR	1989541	AssignmentExpression	adNum = _adNum		1989533	0		=			
ANR	1989542	Identifier	adNum		1989533	0					
ANR	1989543	Identifier	_adNum		1989533	1					
ANR	1989544	ExpressionStatement	portNum = _portNum	328:1:7585:7603	1989533	2	True				
ANR	1989545	AssignmentExpression	portNum = _portNum		1989533	0		=			
ANR	1989546	Identifier	portNum		1989533	0					
ANR	1989547	Identifier	_portNum		1989533	1					
ANR	1989548	Identifier	PortNode :: PortNode		1989533	1					
ANR	1989549	ParameterList	"classad :: ClassAd * _parentAd , int _adNum , int _portNum"		1989533	2					
ANR	1989550	Parameter	classad :: ClassAd * _parentAd	324:10:7486:7512	1989533	0	True				
ANR	1989551	ParameterType	classad :: ClassAd *		1989533	0					
ANR	1989552	Identifier	_parentAd		1989533	1					
ANR	1989553	Parameter	int _adNum	324:39:7515:7524	1989533	1	True				
ANR	1989554	ParameterType	int		1989533	0					
ANR	1989555	Identifier	_adNum		1989533	1					
ANR	1989556	Parameter	int _portNum	324:51:7527:7538	1989533	2	True				
ANR	1989557	ParameterType	int		1989533	0					
ANR	1989558	Identifier	_portNum		1989533	1					
ANR	1989559	CFGEntryNode	ENTRY		1989533		True				
ANR	1989560	CFGExitNode	EXIT		1989533		True				
ANR	1989561	Symbol	_adNum		1989533						
ANR	1989562	Symbol	portNum		1989533						
ANR	1989563	Symbol	parentAd		1989533						
ANR	1989564	Symbol	adNum		1989533						
ANR	1989565	Symbol	_portNum		1989533						
ANR	1989566	Symbol	_parentAd		1989533						
ANR	1989567	Function	PortNode :: ~PortNode	331:0:7608:7796							
ANR	1989568	FunctionDef	PortNode :: ~PortNode ()		1989567	0					
ANR	1989569	CompoundStatement		333:0:7632:7796	1989567	0					
ANR	1989570	IfStatement	if ( parentAd )		1989567	0					
ANR	1989571	Condition	parentAd	334:5:7639:7646	1989567	0	True				
ANR	1989572	Identifier	parentAd		1989567	0					
ANR	1989573	Statement	delete	334:16:7650:7655	1989567	1	True				
ANR	1989574	ExpressionStatement	parentAd	334:23:7657:7665	1989567	1	True				
ANR	1989575	Identifier	parentAd		1989567	0					
ANR	1989576	IdentifierDeclStatement	std :: vector < std :: vector < ExtAttrNode * > * > :: iterator r ;	335:1:7668:7719	1989567	2	True				
ANR	1989577	IdentifierDecl	r		1989567	0					
ANR	1989578	IdentifierDeclType	std :: vector < std :: vector < ExtAttrNode * > * > :: iterator		1989567	0					
ANR	1989579	Identifier	r		1989567	1					
ANR	1989580	ForStatement	for ( r = reqDeps . begin ( ) ; r != reqDeps . end ( ) ; r ++ )		1989567	3					
ANR	1989581	ForInit	r = reqDeps . begin ( ) ;	336:6:7727:7747	1989567	0	True				
ANR	1989582	AssignmentExpression	r = reqDeps . begin ( )		1989567	0		=			
ANR	1989583	Identifier	r		1989567	0					
ANR	1989584	CallExpression	reqDeps . begin ( )		1989567	1					
ANR	1989585	Callee	reqDeps . begin		1989567	0					
ANR	1989586	MemberAccess	reqDeps . begin		1989567	0					
ANR	1989587	Identifier	reqDeps		1989567	0					
ANR	1989588	Identifier	begin		1989567	1					
ANR	1989589	ArgumentList			1989567	1					
ANR	1989590	Condition	r != reqDeps . end ( )	336:28:7749:7767	1989567	1	True				
ANR	1989591	EqualityExpression	r != reqDeps . end ( )		1989567	0		!=			
ANR	1989592	Identifier	r		1989567	0					
ANR	1989593	CallExpression	reqDeps . end ( )		1989567	1					
ANR	1989594	Callee	reqDeps . end		1989567	0					
ANR	1989595	MemberAccess	reqDeps . end		1989567	0					
ANR	1989596	Identifier	reqDeps		1989567	0					
ANR	1989597	Identifier	end		1989567	1					
ANR	1989598	ArgumentList			1989567	1					
ANR	1989599	PostIncDecOperationExpression	r ++	336:49:7770:7772	1989567	2	True				
ANR	1989600	Identifier	r		1989567	0					
ANR	1989601	IncDec	++		1989567	1					
ANR	1989602	CompoundStatement		4:55:143:143	1989567	3					
ANR	1989603	Statement	delete	337:2:7780:7785	1989567	0	True				
ANR	1989604	ExpressionStatement	* r	337:9:7787:7791	1989567	1	True				
ANR	1989605	UnaryOperationExpression	* r		1989567	0					
ANR	1989606	UnaryOperator	*		1989567	0					
ANR	1989607	Identifier	r		1989567	1					
ANR	1989608	Identifier	PortNode :: ~PortNode		1989567	1					
ANR	1989609	ParameterList			1989567	2					
ANR	1989610	CFGEntryNode	ENTRY		1989567		True				
ANR	1989611	CFGExitNode	EXIT		1989567		True				
ANR	1989612	Symbol	reqDeps . begin		1989567						
ANR	1989613	Symbol	r		1989567						
ANR	1989614	Symbol	parentAd		1989567						
ANR	1989615	Symbol	reqDeps		1989567						
ANR	1989616	Symbol	reqDeps . end		1989567						
ANR	1989617	Function	PortNode :: GetAdNum	341:0:7799:7843							
ANR	1989618	FunctionDef	PortNode :: GetAdNum ()		1989617	0					
ANR	1989619	CompoundStatement		343:0:7826:7843	1989617	0					
ANR	1989620	ReturnStatement	return adNum ;	344:1:7829:7841	1989617	0	True				
ANR	1989621	Identifier	adNum		1989617	0					
ANR	1989622	ReturnType	int		1989617	1					
ANR	1989623	Identifier	PortNode :: GetAdNum		1989617	2					
ANR	1989624	ParameterList			1989617	3					
ANR	1989625	CFGEntryNode	ENTRY		1989617		True				
ANR	1989626	CFGExitNode	EXIT		1989617		True				
ANR	1989627	Symbol	adNum		1989617						
ANR	1989628	Function	PortNode :: GetPortNum	347:0:7846:7894							
ANR	1989629	FunctionDef	PortNode :: GetPortNum ()		1989628	0					
ANR	1989630	CompoundStatement		349:0:7875:7894	1989628	0					
ANR	1989631	ReturnStatement	return portNum ;	350:1:7878:7892	1989628	0	True				
ANR	1989632	Identifier	portNum		1989628	0					
ANR	1989633	ReturnType	int		1989628	1					
ANR	1989634	Identifier	PortNode :: GetPortNum		1989628	2					
ANR	1989635	ParameterList			1989628	3					
ANR	1989636	CFGEntryNode	ENTRY		1989628		True				
ANR	1989637	CFGExitNode	EXIT		1989628		True				
ANR	1989638	Symbol	portNum		1989628						
ANR	1989639	Function	PortNode :: GetReqDeps	353:0:7897:8170							
ANR	1989640	FunctionDef	"PortNode :: GetReqDeps (unsigned int clauseNum , std :: set < ExtAttrNode * > & deps)"		1989639	0					
ANR	1989641	CompoundStatement		355:0:7980:8170	1989639	0					
ANR	1989642	IfStatement	if ( clauseNum < reqDeps . size ( ) )		1989639	0					
ANR	1989643	Condition	clauseNum < reqDeps . size ( )	356:5:7987:8013	1989639	0	True				
ANR	1989644	RelationalExpression	clauseNum < reqDeps . size ( )		1989639	0		<			
ANR	1989645	Identifier	clauseNum		1989639	0					
ANR	1989646	CallExpression	reqDeps . size ( )		1989639	1					
ANR	1989647	Callee	reqDeps . size		1989639	0					
ANR	1989648	MemberAccess	reqDeps . size		1989639	0					
ANR	1989649	Identifier	reqDeps		1989639	0					
ANR	1989650	Identifier	size		1989639	1					
ANR	1989651	ArgumentList			1989639	1					
ANR	1989652	CompoundStatement		2:35:36:36	1989639	1					
ANR	1989653	ForStatement	for ( unsigned int i = 0 ; i < reqDeps [ clauseNum ] -> size ( ) ; i ++ )		1989639	0					
ANR	1989654	ForInit	unsigned int i = 0 ;	357:7:8026:8044	1989639	0	True				
ANR	1989655	IdentifierDeclStatement	unsigned int i = 0 ;		1989639	0					
ANR	1989656	IdentifierDecl	i = 0		1989639	0					
ANR	1989657	IdentifierDeclType	unsigned int		1989639	0					
ANR	1989658	Identifier	i		1989639	1					
ANR	1989659	AssignmentExpression	i = 0		1989639	2		=			
ANR	1989660	Identifier	i		1989639	0					
ANR	1989661	PrimaryExpression	0		1989639	1					
ANR	1989662	Condition	i < reqDeps [ clauseNum ] -> size ( )	357:27:8046:8076	1989639	1	True				
ANR	1989663	RelationalExpression	i < reqDeps [ clauseNum ] -> size ( )		1989639	0		<			
ANR	1989664	Identifier	i		1989639	0					
ANR	1989665	CallExpression	reqDeps [ clauseNum ] -> size ( )		1989639	1					
ANR	1989666	Callee	reqDeps [ clauseNum ] -> size		1989639	0					
ANR	1989667	PtrMemberAccess	reqDeps [ clauseNum ] -> size		1989639	0					
ANR	1989668	ArrayIndexing	reqDeps [ clauseNum ]		1989639	0					
ANR	1989669	Identifier	reqDeps		1989639	0					
ANR	1989670	Identifier	clauseNum		1989639	1					
ANR	1989671	Identifier	size		1989639	1					
ANR	1989672	ArgumentList			1989639	1					
ANR	1989673	PostIncDecOperationExpression	i ++	357:60:8079:8081	1989639	2	True				
ANR	1989674	Identifier	i		1989639	0					
ANR	1989675	IncDec	++		1989639	1					
ANR	1989676	CompoundStatement		3:66:104:104	1989639	3					
ANR	1989677	ExpressionStatement	deps . insert ( ( * ( reqDeps [ clauseNum ] ) ) [ i ] )	358:3:8090:8131	1989639	0	True				
ANR	1989678	CallExpression	deps . insert ( ( * ( reqDeps [ clauseNum ] ) ) [ i ] )		1989639	0					
ANR	1989679	Callee	deps . insert		1989639	0					
ANR	1989680	MemberAccess	deps . insert		1989639	0					
ANR	1989681	Identifier	deps		1989639	0					
ANR	1989682	Identifier	insert		1989639	1					
ANR	1989683	ArgumentList	( * ( reqDeps [ clauseNum ] ) ) [ i ]		1989639	1					
ANR	1989684	Argument	( * ( reqDeps [ clauseNum ] ) ) [ i ]		1989639	0					
ANR	1989685	ArrayIndexing	( * ( reqDeps [ clauseNum ] ) ) [ i ]		1989639	0					
ANR	1989686	UnaryOperationExpression	* ( reqDeps [ clauseNum ] )		1989639	0					
ANR	1989687	UnaryOperator	*		1989639	0					
ANR	1989688	ArrayIndexing	reqDeps [ clauseNum ]		1989639	1					
ANR	1989689	Identifier	reqDeps		1989639	0					
ANR	1989690	Identifier	clauseNum		1989639	1					
ANR	1989691	Identifier	i		1989639	1					
ANR	1989692	ReturnStatement	return true ;	360:2:8139:8150	1989639	1	True				
ANR	1989693	Identifier	true		1989639	0					
ANR	1989694	ReturnStatement	return false ;	362:1:8156:8168	1989639	1	True				
ANR	1989695	Identifier	false		1989639	0					
ANR	1989696	ReturnType	bool		1989639	1					
ANR	1989697	Identifier	PortNode :: GetReqDeps		1989639	2					
ANR	1989698	ParameterList	"unsigned int clauseNum , std :: set < ExtAttrNode * > & deps"		1989639	3					
ANR	1989699	Parameter	unsigned int clauseNum	354:12:7925:7946	1989639	0	True				
ANR	1989700	ParameterType	unsigned int		1989639	0					
ANR	1989701	Identifier	clauseNum		1989639	1					
ANR	1989702	Parameter	std :: set < ExtAttrNode * > & deps	354:36:7949:7976	1989639	1	True				
ANR	1989703	ParameterType	std :: set < ExtAttrNode * > &		1989639	0					
ANR	1989704	Identifier	deps		1989639	1					
ANR	1989705	CFGEntryNode	ENTRY		1989639		True				
ANR	1989706	CFGExitNode	EXIT		1989639		True				
ANR	1989707	Symbol	* ( reqDeps [ clauseNum ] )		1989639						
ANR	1989708	Symbol	false		1989639						
ANR	1989709	Symbol	i		1989639						
ANR	1989710	Symbol	* * * clauseNum		1989639						
ANR	1989711	Symbol	deps		1989639						
ANR	1989712	Symbol	clauseNum		1989639						
ANR	1989713	Symbol	* * clauseNum		1989639						
ANR	1989714	Symbol	* clauseNum		1989639						
ANR	1989715	Symbol	* i		1989639						
ANR	1989716	Symbol	* reqDeps		1989639						
ANR	1989717	Symbol	* * ( reqDeps [ clauseNum ] )		1989639						
ANR	1989718	Symbol	reqDeps [ clauseNum ] -> size		1989639						
ANR	1989719	Symbol	true		1989639						
ANR	1989720	Symbol	reqDeps		1989639						
ANR	1989721	Symbol	* * reqDeps		1989639						
ANR	1989722	Symbol	reqDeps . size		1989639						
ANR	1989723	Symbol	* * * reqDeps		1989639						
ANR	1989724	Function	PortNode :: GetAttrDeps	365:0:8173:8420							
ANR	1989725	FunctionDef	PortNode :: GetAttrDeps (std :: set < ExtAttrNode * > & deps)		1989724	0					
ANR	1989726	CompoundStatement		367:0:8233:8420	1989724	0					
ANR	1989727	IdentifierDeclStatement	AttrNodeMap :: const_iterator a ;	368:1:8236:8265	1989724	0	True				
ANR	1989728	IdentifierDecl	a		1989724	0					
ANR	1989729	IdentifierDeclType	AttrNodeMap :: const_iterator		1989724	0					
ANR	1989730	Identifier	a		1989724	1					
ANR	1989731	ForStatement	for ( a = attrNodes . begin ( ) ; a != attrNodes . end ( ) ; a ++ )		1989724	1					
ANR	1989732	ForInit	a = attrNodes . begin ( ) ;	369:6:8273:8295	1989724	0	True				
ANR	1989733	AssignmentExpression	a = attrNodes . begin ( )		1989724	0		=			
ANR	1989734	Identifier	a		1989724	0					
ANR	1989735	CallExpression	attrNodes . begin ( )		1989724	1					
ANR	1989736	Callee	attrNodes . begin		1989724	0					
ANR	1989737	MemberAccess	attrNodes . begin		1989724	0					
ANR	1989738	Identifier	attrNodes		1989724	0					
ANR	1989739	Identifier	begin		1989724	1					
ANR	1989740	ArgumentList			1989724	1					
ANR	1989741	Condition	a != attrNodes . end ( )	369:30:8297:8317	1989724	1	True				
ANR	1989742	EqualityExpression	a != attrNodes . end ( )		1989724	0		!=			
ANR	1989743	Identifier	a		1989724	0					
ANR	1989744	CallExpression	attrNodes . end ( )		1989724	1					
ANR	1989745	Callee	attrNodes . end		1989724	0					
ANR	1989746	MemberAccess	attrNodes . end		1989724	0					
ANR	1989747	Identifier	attrNodes		1989724	0					
ANR	1989748	Identifier	end		1989724	1					
ANR	1989749	ArgumentList			1989724	1					
ANR	1989750	PostIncDecOperationExpression	a ++	369:53:8320:8322	1989724	2	True				
ANR	1989751	Identifier	a		1989724	0					
ANR	1989752	IncDec	++		1989724	1					
ANR	1989753	CompoundStatement		3:59:92:92	1989724	3					
ANR	1989754	IfStatement	if ( a -> second -> GetDep ( ) )		1989724	0					
ANR	1989755	Condition	a -> second -> GetDep ( )	370:6:8334:8353	1989724	0	True				
ANR	1989756	CallExpression	a -> second -> GetDep ( )		1989724	0					
ANR	1989757	Callee	a -> second -> GetDep		1989724	0					
ANR	1989758	PtrMemberAccess	a -> second -> GetDep		1989724	0					
ANR	1989759	PtrMemberAccess	a -> second		1989724	0					
ANR	1989760	Identifier	a		1989724	0					
ANR	1989761	Identifier	second		1989724	1					
ANR	1989762	Identifier	GetDep		1989724	1					
ANR	1989763	ArgumentList			1989724	1					
ANR	1989764	CompoundStatement		4:29:123:123	1989724	1					
ANR	1989765	ExpressionStatement	deps . insert ( a -> second -> GetDep ( ) )	371:3:8362:8397	1989724	0	True				
ANR	1989766	CallExpression	deps . insert ( a -> second -> GetDep ( ) )		1989724	0					
ANR	1989767	Callee	deps . insert		1989724	0					
ANR	1989768	MemberAccess	deps . insert		1989724	0					
ANR	1989769	Identifier	deps		1989724	0					
ANR	1989770	Identifier	insert		1989724	1					
ANR	1989771	ArgumentList	a -> second -> GetDep ( )		1989724	1					
ANR	1989772	Argument	a -> second -> GetDep ( )		1989724	0					
ANR	1989773	CallExpression	a -> second -> GetDep ( )		1989724	0					
ANR	1989774	Callee	a -> second -> GetDep		1989724	0					
ANR	1989775	PtrMemberAccess	a -> second -> GetDep		1989724	0					
ANR	1989776	PtrMemberAccess	a -> second		1989724	0					
ANR	1989777	Identifier	a		1989724	0					
ANR	1989778	Identifier	second		1989724	1					
ANR	1989779	Identifier	GetDep		1989724	1					
ANR	1989780	ArgumentList			1989724	1					
ANR	1989781	ReturnStatement	return true ;	374:1:8407:8418	1989724	2	True				
ANR	1989782	Identifier	true		1989724	0					
ANR	1989783	ReturnType	bool		1989724	1					
ANR	1989784	Identifier	PortNode :: GetAttrDeps		1989724	2					
ANR	1989785	ParameterList	std :: set < ExtAttrNode * > & deps		1989724	3					
ANR	1989786	Parameter	std :: set < ExtAttrNode * > & deps	366:13:8202:8229	1989724	0	True				
ANR	1989787	ParameterType	std :: set < ExtAttrNode * > &		1989724	0					
ANR	1989788	Identifier	deps		1989724	1					
ANR	1989789	CFGEntryNode	ENTRY		1989724		True				
ANR	1989790	CFGExitNode	EXIT		1989724		True				
ANR	1989791	Symbol	attrNodes		1989724						
ANR	1989792	Symbol	a		1989724						
ANR	1989793	Symbol	a -> second -> GetDep		1989724						
ANR	1989794	Symbol	* a -> second		1989724						
ANR	1989795	Symbol	true		1989724						
ANR	1989796	Symbol	deps		1989724						
ANR	1989797	Symbol	* * a		1989724						
ANR	1989798	Symbol	* a		1989724						
ANR	1989799	Symbol	attrNodes . end		1989724						
ANR	1989800	Symbol	a -> second		1989724						
ANR	1989801	Symbol	attrNodes . begin		1989724						
ANR	1989802	Function	PortNode :: GetParentAd	377:0:8423:8487							
ANR	1989803	FunctionDef	PortNode :: GetParentAd ()		1989802	0					
ANR	1989804	CompoundStatement		379:0:8467:8487	1989802	0					
ANR	1989805	ReturnStatement	return parentAd ;	380:1:8470:8485	1989802	0	True				
ANR	1989806	Identifier	parentAd		1989802	0					
ANR	1989807	ReturnType	classad :: ClassAd *		1989802	1					
ANR	1989808	Identifier	PortNode :: GetParentAd		1989802	2					
ANR	1989809	ParameterList			1989802	3					
ANR	1989810	CFGEntryNode	ENTRY		1989802		True				
ANR	1989811	CFGExitNode	EXIT		1989802		True				
ANR	1989812	Symbol	parentAd		1989802						
ANR	1989813	Function	PortNode :: GetExtAttrNode	383:0:8490:8702							
ANR	1989814	FunctionDef	PortNode :: GetExtAttrNode (std :: string attr)		1989813	0					
ANR	1989815	CompoundStatement		385:0:8549:8702	1989813	0					
ANR	1989816	IdentifierDeclStatement	ExtAttrNodeMap :: const_iterator itr ;	386:1:8552:8586	1989813	0	True				
ANR	1989817	IdentifierDecl	itr		1989813	0					
ANR	1989818	IdentifierDeclType	ExtAttrNodeMap :: const_iterator		1989813	0					
ANR	1989819	Identifier	itr		1989813	1					
ANR	1989820	ExpressionStatement	itr = extAttrNodes . find ( attr )	387:1:8589:8620	1989813	1	True				
ANR	1989821	AssignmentExpression	itr = extAttrNodes . find ( attr )		1989813	0		=			
ANR	1989822	Identifier	itr		1989813	0					
ANR	1989823	CallExpression	extAttrNodes . find ( attr )		1989813	1					
ANR	1989824	Callee	extAttrNodes . find		1989813	0					
ANR	1989825	MemberAccess	extAttrNodes . find		1989813	0					
ANR	1989826	Identifier	extAttrNodes		1989813	0					
ANR	1989827	Identifier	find		1989813	1					
ANR	1989828	ArgumentList	attr		1989813	1					
ANR	1989829	Argument	attr		1989813	0					
ANR	1989830	Identifier	attr		1989813	0					
ANR	1989831	IfStatement	if ( itr != extAttrNodes . end ( ) )		1989813	2					
ANR	1989832	Condition	itr != extAttrNodes . end ( )	388:5:8627:8652	1989813	0	True				
ANR	1989833	EqualityExpression	itr != extAttrNodes . end ( )		1989813	0		!=			
ANR	1989834	Identifier	itr		1989813	0					
ANR	1989835	CallExpression	extAttrNodes . end ( )		1989813	1					
ANR	1989836	Callee	extAttrNodes . end		1989813	0					
ANR	1989837	MemberAccess	extAttrNodes . end		1989813	0					
ANR	1989838	Identifier	extAttrNodes		1989813	0					
ANR	1989839	Identifier	end		1989813	1					
ANR	1989840	ArgumentList			1989813	1					
ANR	1989841	CompoundStatement		4:34:106:106	1989813	1					
ANR	1989842	ReturnStatement	return itr -> second ;	389:2:8660:8678	1989813	0	True				
ANR	1989843	PtrMemberAccess	itr -> second		1989813	0					
ANR	1989844	Identifier	itr		1989813	0					
ANR	1989845	Identifier	second		1989813	1					
ANR	1989846	ElseStatement	else		1989813	0					
ANR	1989847	ReturnStatement	return NULL ;	391:6:8689:8700	1989813	0	True				
ANR	1989848	Identifier	NULL		1989813	0					
ANR	1989849	ReturnType	ExtAttrNode *		1989813	1					
ANR	1989850	Identifier	PortNode :: GetExtAttrNode		1989813	2					
ANR	1989851	ParameterList	std :: string attr		1989813	3					
ANR	1989852	Parameter	std :: string attr	384:16:8530:8545	1989813	0	True				
ANR	1989853	ParameterType	std :: string		1989813	0					
ANR	1989854	Identifier	attr		1989813	1					
ANR	1989855	CFGEntryNode	ENTRY		1989813		True				
ANR	1989856	CFGExitNode	EXIT		1989813		True				
ANR	1989857	Symbol	NULL		1989813						
ANR	1989858	Symbol	itr		1989813						
ANR	1989859	Symbol	extAttrNodes . find		1989813						
ANR	1989860	Symbol	extAttrNodes . end		1989813						
ANR	1989861	Symbol	extAttrNodes		1989813						
ANR	1989862	Symbol	attr		1989813						
ANR	1989863	Symbol	* itr		1989813						
ANR	1989864	Symbol	itr -> second		1989813						
ANR	1989865	Function	PortNode :: GetAttrNode	394:0:8705:8902							
ANR	1989866	FunctionDef	PortNode :: GetAttrNode (std :: string attr)		1989865	0					
ANR	1989867	CompoundStatement		396:0:8758:8902	1989865	0					
ANR	1989868	IdentifierDeclStatement	AttrNodeMap :: const_iterator itr ;	397:1:8761:8792	1989865	0	True				
ANR	1989869	IdentifierDecl	itr		1989865	0					
ANR	1989870	IdentifierDeclType	AttrNodeMap :: const_iterator		1989865	0					
ANR	1989871	Identifier	itr		1989865	1					
ANR	1989872	ExpressionStatement	itr = attrNodes . find ( attr )	398:1:8795:8823	1989865	1	True				
ANR	1989873	AssignmentExpression	itr = attrNodes . find ( attr )		1989865	0		=			
ANR	1989874	Identifier	itr		1989865	0					
ANR	1989875	CallExpression	attrNodes . find ( attr )		1989865	1					
ANR	1989876	Callee	attrNodes . find		1989865	0					
ANR	1989877	MemberAccess	attrNodes . find		1989865	0					
ANR	1989878	Identifier	attrNodes		1989865	0					
ANR	1989879	Identifier	find		1989865	1					
ANR	1989880	ArgumentList	attr		1989865	1					
ANR	1989881	Argument	attr		1989865	0					
ANR	1989882	Identifier	attr		1989865	0					
ANR	1989883	IfStatement	if ( itr != attrNodes . end ( ) )		1989865	2					
ANR	1989884	Condition	itr != attrNodes . end ( )	399:5:8830:8852	1989865	0	True				
ANR	1989885	EqualityExpression	itr != attrNodes . end ( )		1989865	0		!=			
ANR	1989886	Identifier	itr		1989865	0					
ANR	1989887	CallExpression	attrNodes . end ( )		1989865	1					
ANR	1989888	Callee	attrNodes . end		1989865	0					
ANR	1989889	MemberAccess	attrNodes . end		1989865	0					
ANR	1989890	Identifier	attrNodes		1989865	0					
ANR	1989891	Identifier	end		1989865	1					
ANR	1989892	ArgumentList			1989865	1					
ANR	1989893	CompoundStatement		4:31:97:97	1989865	1					
ANR	1989894	ReturnStatement	return itr -> second ;	400:2:8860:8878	1989865	0	True				
ANR	1989895	PtrMemberAccess	itr -> second		1989865	0					
ANR	1989896	Identifier	itr		1989865	0					
ANR	1989897	Identifier	second		1989865	1					
ANR	1989898	ElseStatement	else		1989865	0					
ANR	1989899	ReturnStatement	return NULL ;	402:6:8889:8900	1989865	0	True				
ANR	1989900	Identifier	NULL		1989865	0					
ANR	1989901	ReturnType	AttrNode *		1989865	1					
ANR	1989902	Identifier	PortNode :: GetAttrNode		1989865	2					
ANR	1989903	ParameterList	std :: string attr		1989865	3					
ANR	1989904	Parameter	std :: string attr	395:13:8739:8754	1989865	0	True				
ANR	1989905	ParameterType	std :: string		1989865	0					
ANR	1989906	Identifier	attr		1989865	1					
ANR	1989907	CFGEntryNode	ENTRY		1989865		True				
ANR	1989908	CFGExitNode	EXIT		1989865		True				
ANR	1989909	Symbol	attrNodes		1989865						
ANR	1989910	Symbol	NULL		1989865						
ANR	1989911	Symbol	itr		1989865						
ANR	1989912	Symbol	attrNodes . find		1989865						
ANR	1989913	Symbol	attr		1989865						
ANR	1989914	Symbol	attrNodes . end		1989865						
ANR	1989915	Symbol	* itr		1989865						
ANR	1989916	Symbol	itr -> second		1989865						
ANR	1989917	Function	PortNode :: GetMatchEdge	405:0:8905:9039							
ANR	1989918	FunctionDef	PortNode :: GetMatchEdge (unsigned int i)		1989917	0					
ANR	1989919	CompoundStatement		407:0:8958:9039	1989917	0					
ANR	1989920	IfStatement	if ( i >= matchEdges . size ( ) )		1989917	0					
ANR	1989921	Condition	i >= matchEdges . size ( )	408:5:8965:8987	1989917	0	True				
ANR	1989922	RelationalExpression	i >= matchEdges . size ( )		1989917	0		>=			
ANR	1989923	Identifier	i		1989917	0					
ANR	1989924	CallExpression	matchEdges . size ( )		1989917	1					
ANR	1989925	Callee	matchEdges . size		1989917	0					
ANR	1989926	MemberAccess	matchEdges . size		1989917	0					
ANR	1989927	Identifier	matchEdges		1989917	0					
ANR	1989928	Identifier	size		1989917	1					
ANR	1989929	ArgumentList			1989917	1					
ANR	1989930	CompoundStatement		2:31:32:32	1989917	1					
ANR	1989931	ReturnStatement	return NULL ;	409:2:8995:9006	1989917	0	True				
ANR	1989932	Identifier	NULL		1989917	0					
ANR	1989933	ElseStatement	else		1989917	0					
ANR	1989934	ReturnStatement	return matchEdges [ i ] ;	411:6:9017:9037	1989917	0	True				
ANR	1989935	ArrayIndexing	matchEdges [ i ]		1989917	0					
ANR	1989936	Identifier	matchEdges		1989917	0					
ANR	1989937	Identifier	i		1989917	1					
ANR	1989938	ReturnType	MatchEdge *		1989917	1					
ANR	1989939	Identifier	PortNode :: GetMatchEdge		1989917	2					
ANR	1989940	ParameterList	unsigned int i		1989917	3					
ANR	1989941	Parameter	unsigned int i	406:14:8941:8954	1989917	0	True				
ANR	1989942	ParameterType	unsigned int		1989917	0					
ANR	1989943	Identifier	i		1989917	1					
ANR	1989944	CFGEntryNode	ENTRY		1989917		True				
ANR	1989945	CFGExitNode	EXIT		1989917		True				
ANR	1989946	Symbol	NULL		1989917						
ANR	1989947	Symbol	* i		1989917						
ANR	1989948	Symbol	* matchEdges		1989917						
ANR	1989949	Symbol	matchEdges		1989917						
ANR	1989950	Symbol	i		1989917						
ANR	1989951	Symbol	matchEdges . size		1989917						
ANR	1989952	Function	PortNode :: GetNumMatchEdges	414:0:9042:9116							
ANR	1989953	FunctionDef	PortNode :: GetNumMatchEdges ()		1989952	0					
ANR	1989954	CompoundStatement		416:0:9086:9116	1989952	0					
ANR	1989955	ReturnStatement	return matchEdges . size ( ) ;	417:1:9089:9114	1989952	0	True				
ANR	1989956	CallExpression	matchEdges . size ( )		1989952	0					
ANR	1989957	Callee	matchEdges . size		1989952	0					
ANR	1989958	MemberAccess	matchEdges . size		1989952	0					
ANR	1989959	Identifier	matchEdges		1989952	0					
ANR	1989960	Identifier	size		1989952	1					
ANR	1989961	ArgumentList			1989952	1					
ANR	1989962	ReturnType	unsigned int		1989952	1					
ANR	1989963	Identifier	PortNode :: GetNumMatchEdges		1989952	2					
ANR	1989964	ParameterList			1989952	3					
ANR	1989965	CFGEntryNode	ENTRY		1989952		True				
ANR	1989966	CFGExitNode	EXIT		1989952		True				
ANR	1989967	Symbol	matchEdges		1989952						
ANR	1989968	Symbol	matchEdges . size		1989952						
ANR	1989969	Function	PortNode :: GetNumClauses	420:0:9119:9187							
ANR	1989970	FunctionDef	PortNode :: GetNumClauses ()		1989969	0					
ANR	1989971	CompoundStatement		422:0:9160:9187	1989969	0					
ANR	1989972	ReturnStatement	return reqDeps . size ( ) ;	423:1:9163:9185	1989969	0	True				
ANR	1989973	CallExpression	reqDeps . size ( )		1989969	0					
ANR	1989974	Callee	reqDeps . size		1989969	0					
ANR	1989975	MemberAccess	reqDeps . size		1989969	0					
ANR	1989976	Identifier	reqDeps		1989969	0					
ANR	1989977	Identifier	size		1989969	1					
ANR	1989978	ArgumentList			1989969	1					
ANR	1989979	ReturnType	unsigned int		1989969	1					
ANR	1989980	Identifier	PortNode :: GetNumClauses		1989969	2					
ANR	1989981	ParameterList			1989969	3					
ANR	1989982	CFGEntryNode	ENTRY		1989969		True				
ANR	1989983	CFGExitNode	EXIT		1989969		True				
ANR	1989984	Symbol	reqDeps		1989969						
ANR	1989985	Symbol	reqDeps . size		1989969						
ANR	1989986	Function	PortNode :: AddAttrNode	426:0:9190:9290							
ANR	1989987	FunctionDef	PortNode :: AddAttrNode (std :: string attr)		1989986	0					
ANR	1989988	CompoundStatement		428:0:9238:9290	1989986	0					
ANR	1989989	ExpressionStatement	attrNodes [ attr ] = new AttrNode ( )	429:1:9241:9274	1989986	0	True				
ANR	1989990	AssignmentExpression	attrNodes [ attr ] = new AttrNode ( )		1989986	0		=			
ANR	1989991	ArrayIndexing	attrNodes [ attr ]		1989986	0					
ANR	1989992	Identifier	attrNodes		1989986	0					
ANR	1989993	Identifier	attr		1989986	1					
ANR	1989994	UnaryExpression	new AttrNode ( )		1989986	1					
ANR	1989995	ReturnStatement	return true ;	430:1:9277:9288	1989986	1	True				
ANR	1989996	Identifier	true		1989986	0					
ANR	1989997	ReturnType	bool		1989986	1					
ANR	1989998	Identifier	PortNode :: AddAttrNode		1989986	2					
ANR	1989999	ParameterList	std :: string attr		1989986	3					
ANR	1990000	Parameter	std :: string attr	427:13:9219:9234	1989986	0	True				
ANR	1990001	ParameterType	std :: string		1989986	0					
ANR	1990002	Identifier	attr		1989986	1					
ANR	1990003	CFGEntryNode	ENTRY		1989986		True				
ANR	1990004	CFGExitNode	EXIT		1989986		True				
ANR	1990005	Symbol	attrNodes		1989986						
ANR	1990006	Symbol	true		1989986						
ANR	1990007	Symbol	* attr		1989986						
ANR	1990008	Symbol	attr		1989986						
ANR	1990009	Symbol	* attrNodes		1989986						
ANR	1990010	Function	PortNode :: AddAttrNode	433:0:9293:9418							
ANR	1990011	FunctionDef	"PortNode :: AddAttrNode (std :: string attr , classad :: Value & val)"		1990010	0					
ANR	1990012	CompoundStatement		435:0:9362:9418	1990010	0					
ANR	1990013	ExpressionStatement	attrNodes [ attr ] = new AttrNode ( val )	436:1:9365:9402	1990010	0	True				
ANR	1990014	AssignmentExpression	attrNodes [ attr ] = new AttrNode ( val )		1990010	0		=			
ANR	1990015	ArrayIndexing	attrNodes [ attr ]		1990010	0					
ANR	1990016	Identifier	attrNodes		1990010	0					
ANR	1990017	Identifier	attr		1990010	1					
ANR	1990018	Identifier	val		1990010	1					
ANR	1990019	ReturnStatement	return true ;	437:1:9405:9416	1990010	1	True				
ANR	1990020	Identifier	true		1990010	0					
ANR	1990021	ReturnType	bool		1990010	1					
ANR	1990022	Identifier	PortNode :: AddAttrNode		1990010	2					
ANR	1990023	ParameterList	"std :: string attr , classad :: Value & val"		1990010	3					
ANR	1990024	Parameter	std :: string attr	434:13:9322:9337	1990010	0	True				
ANR	1990025	ParameterType	std :: string		1990010	0					
ANR	1990026	Identifier	attr		1990010	1					
ANR	1990027	Parameter	classad :: Value & val	434:31:9340:9358	1990010	1	True				
ANR	1990028	ParameterType	classad :: Value &		1990010	0					
ANR	1990029	Identifier	val		1990010	1					
ANR	1990030	CFGEntryNode	ENTRY		1990010		True				
ANR	1990031	CFGExitNode	EXIT		1990010		True				
ANR	1990032	Symbol	val		1990010						
ANR	1990033	Symbol	attrNodes		1990010						
ANR	1990034	Symbol	true		1990010						
ANR	1990035	Symbol	* attr		1990010						
ANR	1990036	Symbol	attr		1990010						
ANR	1990037	Symbol	* attrNodes		1990010						
ANR	1990038	Function	PortNode :: AddExtAttrNode	440:0:9421:9541							
ANR	1990039	FunctionDef	PortNode :: AddExtAttrNode (std :: string attr)		1990038	0					
ANR	1990040	CompoundStatement		442:0:9472:9541	1990038	0					
ANR	1990041	ExpressionStatement	"extAttrNodes [ attr ] = new ExtAttrNode ( this , attr )"	443:1:9475:9525	1990038	0	True				
ANR	1990042	AssignmentExpression	"extAttrNodes [ attr ] = new ExtAttrNode ( this , attr )"		1990038	0		=			
ANR	1990043	ArrayIndexing	extAttrNodes [ attr ]		1990038	0					
ANR	1990044	Identifier	extAttrNodes		1990038	0					
ANR	1990045	Identifier	attr		1990038	1					
ANR	1990046	Expression	"this , attr"		1990038	1					
ANR	1990047	Identifier	this		1990038	0					
ANR	1990048	Identifier	attr		1990038	1					
ANR	1990049	ReturnStatement	return true ;	444:1:9528:9539	1990038	1	True				
ANR	1990050	Identifier	true		1990038	0					
ANR	1990051	ReturnType	bool		1990038	1					
ANR	1990052	Identifier	PortNode :: AddExtAttrNode		1990038	2					
ANR	1990053	ParameterList	std :: string attr		1990038	3					
ANR	1990054	Parameter	std :: string attr	441:16:9453:9468	1990038	0	True				
ANR	1990055	ParameterType	std :: string		1990038	0					
ANR	1990056	Identifier	attr		1990038	1					
ANR	1990057	CFGEntryNode	ENTRY		1990038		True				
ANR	1990058	CFGExitNode	EXIT		1990038		True				
ANR	1990059	Symbol	this		1990038						
ANR	1990060	Symbol	true		1990038						
ANR	1990061	Symbol	extAttrNodes		1990038						
ANR	1990062	Symbol	* attr		1990038						
ANR	1990063	Symbol	attr		1990038						
ANR	1990064	Symbol	* extAttrNodes		1990038						
ANR	1990065	Function	PortNode :: AddClause	447:0:9544:9713							
ANR	1990066	FunctionDef	PortNode :: AddClause ()		1990065	0					
ANR	1990067	CompoundStatement		449:0:9581:9713	1990065	0					
ANR	1990068	Statement	std	450:1:9584:9586	1990065	0	True				
ANR	1990069	Statement	::	450:4:9587:9588	1990065	1	True				
ANR	1990070	Statement	vector	450:6:9589:9594	1990065	2	True				
ANR	1990071	Statement	<	450:12:9595:9595	1990065	3	True				
ANR	1990072	Statement	ExtAttrNode	450:13:9596:9606	1990065	4	True				
ANR	1990073	Statement	*	450:24:9607:9607	1990065	5	True				
ANR	1990074	Statement	>	450:25:9608:9608	1990065	6	True				
ANR	1990075	Statement	*	450:27:9610:9610	1990065	7	True				
ANR	1990076	Statement	clause	450:28:9611:9616	1990065	8	True				
ANR	1990077	Statement	=	450:35:9618:9618	1990065	9	True				
ANR	1990078	Statement	new	450:37:9620:9622	1990065	10	True				
ANR	1990079	Statement	std	450:41:9624:9626	1990065	11	True				
ANR	1990080	Statement	::	450:44:9627:9628	1990065	12	True				
ANR	1990081	Statement	vector	450:46:9629:9634	1990065	13	True				
ANR	1990082	Statement	<	450:52:9635:9635	1990065	14	True				
ANR	1990083	Statement	ExtAttrNode	450:53:9636:9646	1990065	15	True				
ANR	1990084	Statement	*	450:64:9647:9647	1990065	16	True				
ANR	1990085	Statement	>	450:65:9648:9648	1990065	17	True				
ANR	1990086	ExpressionStatement		450:66:9649:9649	1990065	18	True				
ANR	1990087	ExpressionStatement	reqDeps . push_back ( clause )	451:1:9652:9679	1990065	19	True				
ANR	1990088	CallExpression	reqDeps . push_back ( clause )		1990065	0					
ANR	1990089	Callee	reqDeps . push_back		1990065	0					
ANR	1990090	MemberAccess	reqDeps . push_back		1990065	0					
ANR	1990091	Identifier	reqDeps		1990065	0					
ANR	1990092	Identifier	push_back		1990065	1					
ANR	1990093	ArgumentList	clause		1990065	1					
ANR	1990094	Argument	clause		1990065	0					
ANR	1990095	Identifier	clause		1990065	0					
ANR	1990096	ReturnStatement	return ( reqDeps . size ( ) - 1 ) ;	452:1:9682:9711	1990065	20	True				
ANR	1990097	AdditiveExpression	reqDeps . size ( ) - 1		1990065	0		-			
ANR	1990098	CallExpression	reqDeps . size ( )		1990065	0					
ANR	1990099	Callee	reqDeps . size		1990065	0					
ANR	1990100	MemberAccess	reqDeps . size		1990065	0					
ANR	1990101	Identifier	reqDeps		1990065	0					
ANR	1990102	Identifier	size		1990065	1					
ANR	1990103	ArgumentList			1990065	1					
ANR	1990104	PrimaryExpression	1		1990065	1					
ANR	1990105	ReturnType	unsigned int		1990065	1					
ANR	1990106	Identifier	PortNode :: AddClause		1990065	2					
ANR	1990107	ParameterList			1990065	3					
ANR	1990108	CFGEntryNode	ENTRY		1990065		True				
ANR	1990109	CFGExitNode	EXIT		1990065		True				
ANR	1990110	Symbol	clause		1990065						
ANR	1990111	Symbol	reqDeps		1990065						
ANR	1990112	Symbol	reqDeps . size		1990065						
ANR	1990113	Function	PortNode :: AddReqDep	455:0:9716:9911							
ANR	1990114	FunctionDef	"PortNode :: AddReqDep (unsigned int clauseNum , ExtAttrNode * eNode)"		1990113	0					
ANR	1990115	CompoundStatement		457:0:9788:9911	1990113	0					
ANR	1990116	IfStatement	if ( eNode || clauseNum < reqDeps . size ( ) )		1990113	0					
ANR	1990117	Condition	eNode || clauseNum < reqDeps . size ( )	458:5:9795:9830	1990113	0	True				
ANR	1990118	OrExpression	eNode || clauseNum < reqDeps . size ( )		1990113	0		||			
ANR	1990119	Identifier	eNode		1990113	0					
ANR	1990120	RelationalExpression	clauseNum < reqDeps . size ( )		1990113	1		<			
ANR	1990121	Identifier	clauseNum		1990113	0					
ANR	1990122	CallExpression	reqDeps . size ( )		1990113	1					
ANR	1990123	Callee	reqDeps . size		1990113	0					
ANR	1990124	MemberAccess	reqDeps . size		1990113	0					
ANR	1990125	Identifier	reqDeps		1990113	0					
ANR	1990126	Identifier	size		1990113	1					
ANR	1990127	ArgumentList			1990113	1					
ANR	1990128	CompoundStatement		2:44:45:45	1990113	1					
ANR	1990129	ExpressionStatement	reqDeps [ clauseNum ] -> push_back ( eNode )	459:2:9838:9876	1990113	0	True				
ANR	1990130	CallExpression	reqDeps [ clauseNum ] -> push_back ( eNode )		1990113	0					
ANR	1990131	Callee	reqDeps [ clauseNum ] -> push_back		1990113	0					
ANR	1990132	PtrMemberAccess	reqDeps [ clauseNum ] -> push_back		1990113	0					
ANR	1990133	ArrayIndexing	reqDeps [ clauseNum ]		1990113	0					
ANR	1990134	Identifier	reqDeps		1990113	0					
ANR	1990135	Identifier	clauseNum		1990113	1					
ANR	1990136	Identifier	push_back		1990113	1					
ANR	1990137	ArgumentList	eNode		1990113	1					
ANR	1990138	Argument	eNode		1990113	0					
ANR	1990139	Identifier	eNode		1990113	0					
ANR	1990140	ReturnStatement	return true ;	460:2:9880:9891	1990113	1	True				
ANR	1990141	Identifier	true		1990113	0					
ANR	1990142	ReturnStatement	return false ;	462:1:9897:9909	1990113	1	True				
ANR	1990143	Identifier	false		1990113	0					
ANR	1990144	ReturnType	bool		1990113	1					
ANR	1990145	Identifier	PortNode :: AddReqDep		1990113	2					
ANR	1990146	ParameterList	"unsigned int clauseNum , ExtAttrNode * eNode"		1990113	3					
ANR	1990147	Parameter	unsigned int clauseNum	456:11:9743:9764	1990113	0	True				
ANR	1990148	ParameterType	unsigned int		1990113	0					
ANR	1990149	Identifier	clauseNum		1990113	1					
ANR	1990150	Parameter	ExtAttrNode * eNode	456:35:9767:9784	1990113	1	True				
ANR	1990151	ParameterType	ExtAttrNode *		1990113	0					
ANR	1990152	Identifier	eNode		1990113	1					
ANR	1990153	CFGEntryNode	ENTRY		1990113		True				
ANR	1990154	CFGExitNode	EXIT		1990113		True				
ANR	1990155	Symbol	* clauseNum		1990113						
ANR	1990156	Symbol	eNode		1990113						
ANR	1990157	Symbol	* reqDeps		1990113						
ANR	1990158	Symbol	true		1990113						
ANR	1990159	Symbol	false		1990113						
ANR	1990160	Symbol	reqDeps		1990113						
ANR	1990161	Symbol	clauseNum		1990113						
ANR	1990162	Symbol	reqDeps . size		1990113						
ANR	1990163	Function	PortNode :: AddAttrDep	465:0:9914:10059							
ANR	1990164	FunctionDef	"PortNode :: AddAttrDep (std :: string attr , ExtAttrNode * eNode)"		1990163	0					
ANR	1990165	CompoundStatement		467:0:9981:10059	1990163	0					
ANR	1990166	IfStatement	if ( eNode )		1990163	0					
ANR	1990167	Condition	eNode	468:5:9988:9992	1990163	0	True				
ANR	1990168	Identifier	eNode		1990163	0					
ANR	1990169	CompoundStatement		2:13:14:14	1990163	1					
ANR	1990170	ReturnStatement	return attrNodes [ attr ] -> AddDep ( eNode ) ;	469:2:10000:10039	1990163	0	True				
ANR	1990171	CallExpression	attrNodes [ attr ] -> AddDep ( eNode )		1990163	0					
ANR	1990172	Callee	attrNodes [ attr ] -> AddDep		1990163	0					
ANR	1990173	PtrMemberAccess	attrNodes [ attr ] -> AddDep		1990163	0					
ANR	1990174	ArrayIndexing	attrNodes [ attr ]		1990163	0					
ANR	1990175	Identifier	attrNodes		1990163	0					
ANR	1990176	Identifier	attr		1990163	1					
ANR	1990177	Identifier	AddDep		1990163	1					
ANR	1990178	ArgumentList	eNode		1990163	1					
ANR	1990179	Argument	eNode		1990163	0					
ANR	1990180	Identifier	eNode		1990163	0					
ANR	1990181	ReturnStatement	return false ;	471:1:10045:10057	1990163	1	True				
ANR	1990182	Identifier	false		1990163	0					
ANR	1990183	ReturnType	bool		1990163	1					
ANR	1990184	Identifier	PortNode :: AddAttrDep		1990163	2					
ANR	1990185	ParameterList	"std :: string attr , ExtAttrNode * eNode"		1990163	3					
ANR	1990186	Parameter	std :: string attr	466:12:9942:9957	1990163	0	True				
ANR	1990187	ParameterType	std :: string		1990163	0					
ANR	1990188	Identifier	attr		1990163	1					
ANR	1990189	Parameter	ExtAttrNode * eNode	466:30:9960:9977	1990163	1	True				
ANR	1990190	ParameterType	ExtAttrNode *		1990163	0					
ANR	1990191	Identifier	eNode		1990163	1					
ANR	1990192	CFGEntryNode	ENTRY		1990163		True				
ANR	1990193	CFGExitNode	EXIT		1990163		True				
ANR	1990194	Symbol	attrNodes		1990163						
ANR	1990195	Symbol	eNode		1990163						
ANR	1990196	Symbol	attrNodes [ attr ] -> AddDep		1990163						
ANR	1990197	Symbol	* * attr		1990163						
ANR	1990198	Symbol	false		1990163						
ANR	1990199	Symbol	* attr		1990163						
ANR	1990200	Symbol	attr		1990163						
ANR	1990201	Symbol	* * attrNodes		1990163						
ANR	1990202	Symbol	* attrNodes		1990163						
ANR	1990203	Function	PortNode :: AddMatchEdge	474:0:10062:10763							
ANR	1990204	FunctionDef	"PortNode :: AddMatchEdge (int edgeNum , PortNode * target , std :: vector < MatchPath * > & annotations)"		1990203	0					
ANR	1990205	CompoundStatement		477:0:10168:10763	1990203	0					
ANR	1990206	IfStatement	if ( target )		1990203	0					
ANR	1990207	Condition	target	478:5:10175:10180	1990203	0	True				
ANR	1990208	Identifier	target		1990203	0					
ANR	1990209	CompoundStatement		12:2:287:356	1990203	1					
ANR	1990210	IdentifierDeclStatement	std :: vector < MatchEdge * > :: iterator m1 ;	479:2:10188:10224	1990203	0	True				
ANR	1990211	IdentifierDecl	m1		1990203	0					
ANR	1990212	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1990203	0					
ANR	1990213	Identifier	m1		1990203	1					
ANR	1990214	ForStatement	for ( m1 = matchEdges . begin ( ) ; m1 != matchEdges . end ( ) ; m1 ++ )		1990203	1					
ANR	1990215	ForInit	m1 = matchEdges . begin ( ) ;	480:7:10233:10257	1990203	0	True				
ANR	1990216	AssignmentExpression	m1 = matchEdges . begin ( )		1990203	0		=			
ANR	1990217	Identifier	m1		1990203	0					
ANR	1990218	CallExpression	matchEdges . begin ( )		1990203	1					
ANR	1990219	Callee	matchEdges . begin		1990203	0					
ANR	1990220	MemberAccess	matchEdges . begin		1990203	0					
ANR	1990221	Identifier	matchEdges		1990203	0					
ANR	1990222	Identifier	begin		1990203	1					
ANR	1990223	ArgumentList			1990203	1					
ANR	1990224	Condition	m1 != matchEdges . end ( )	480:33:10259:10281	1990203	1	True				
ANR	1990225	EqualityExpression	m1 != matchEdges . end ( )		1990203	0		!=			
ANR	1990226	Identifier	m1		1990203	0					
ANR	1990227	CallExpression	matchEdges . end ( )		1990203	1					
ANR	1990228	Callee	matchEdges . end		1990203	0					
ANR	1990229	MemberAccess	matchEdges . end		1990203	0					
ANR	1990230	Identifier	matchEdges		1990203	0					
ANR	1990231	Identifier	end		1990203	1					
ANR	1990232	ArgumentList			1990203	1					
ANR	1990233	PostIncDecOperationExpression	m1 ++	480:58:10284:10287	1990203	2	True				
ANR	1990234	Identifier	m1		1990203	0					
ANR	1990235	IncDec	++		1990203	1					
ANR	1990236	CompoundStatement		4:65:122:122	1990203	3					
ANR	1990237	IfStatement	if ( ( * m1 ) -> GetTarget ( ) == target )		1990203	0					
ANR	1990238	Condition	( * m1 ) -> GetTarget ( ) == target	481:7:10300:10328	1990203	0	True				
ANR	1990239	EqualityExpression	( * m1 ) -> GetTarget ( ) == target		1990203	0		==			
ANR	1990240	CallExpression	( * m1 ) -> GetTarget ( )		1990203	0					
ANR	1990241	Callee	( * m1 ) -> GetTarget		1990203	0					
ANR	1990242	PtrMemberAccess	( * m1 ) -> GetTarget		1990203	0					
ANR	1990243	UnaryOperationExpression	* m1		1990203	0					
ANR	1990244	UnaryOperator	*		1990203	0					
ANR	1990245	Identifier	m1		1990203	1					
ANR	1990246	Identifier	GetTarget		1990203	1					
ANR	1990247	ArgumentList			1990203	1					
ANR	1990248	Identifier	target		1990203	1					
ANR	1990249	CompoundStatement		5:39:163:163	1990203	1					
ANR	1990250	IfStatement	if ( ( * m1 ) -> HasNoAnnotations ( ) || ( * m1 ) -> SameAnnotations ( annotations ) )		1990203	0					
ANR	1990251	Condition	( * m1 ) -> HasNoAnnotations ( ) || ( * m1 ) -> SameAnnotations ( annotations )	482:8:10342:10414	1990203	0	True				
ANR	1990252	OrExpression	( * m1 ) -> HasNoAnnotations ( ) || ( * m1 ) -> SameAnnotations ( annotations )		1990203	0		||			
ANR	1990253	CallExpression	( * m1 ) -> HasNoAnnotations ( )		1990203	0					
ANR	1990254	Callee	( * m1 ) -> HasNoAnnotations		1990203	0					
ANR	1990255	PtrMemberAccess	( * m1 ) -> HasNoAnnotations		1990203	0					
ANR	1990256	UnaryOperationExpression	* m1		1990203	0					
ANR	1990257	UnaryOperator	*		1990203	0					
ANR	1990258	Identifier	m1		1990203	1					
ANR	1990259	Identifier	HasNoAnnotations		1990203	1					
ANR	1990260	ArgumentList			1990203	1					
ANR	1990261	CallExpression	( * m1 ) -> SameAnnotations ( annotations )		1990203	1					
ANR	1990262	Callee	( * m1 ) -> SameAnnotations		1990203	0					
ANR	1990263	PtrMemberAccess	( * m1 ) -> SameAnnotations		1990203	0					
ANR	1990264	UnaryOperationExpression	* m1		1990203	0					
ANR	1990265	UnaryOperator	*		1990203	0					
ANR	1990266	Identifier	m1		1990203	1					
ANR	1990267	Identifier	SameAnnotations		1990203	1					
ANR	1990268	ArgumentList	annotations		1990203	1					
ANR	1990269	Argument	annotations		1990203	0					
ANR	1990270	Identifier	annotations		1990203	0					
ANR	1990271	CompoundStatement		7:45:249:249	1990203	1					
ANR	1990272	ReturnStatement	return false ;	484:5:10425:10437	1990203	0	True				
ANR	1990273	Identifier	false		1990203	0					
ANR	1990274	IdentifierDeclStatement	"MatchEdge * edge = new MatchEdge ( edgeNum , this , target , annotations ) ;"	488:2:10456:10525	1990203	2	True				
ANR	1990275	IdentifierDecl	"* edge = new MatchEdge ( edgeNum , this , target , annotations )"		1990203	0					
ANR	1990276	IdentifierDeclType	MatchEdge *		1990203	0					
ANR	1990277	Identifier	edge		1990203	1					
ANR	1990278	AssignmentExpression	"* edge = new MatchEdge ( edgeNum , this , target , annotations )"		1990203	2		=			
ANR	1990279	Identifier	edge		1990203	0					
ANR	1990280	Expression	"edgeNum , this , target , annotations"		1990203	1					
ANR	1990281	Identifier	edgeNum		1990203	0					
ANR	1990282	Expression	"this , target , annotations"		1990203	1					
ANR	1990283	Identifier	this		1990203	0					
ANR	1990284	Expression	"target , annotations"		1990203	1					
ANR	1990285	Identifier	target		1990203	0					
ANR	1990286	Identifier	annotations		1990203	1					
ANR	1990287	ExpressionStatement	matchEdges . push_back ( edge )	489:2:10529:10557	1990203	3	True				
ANR	1990288	CallExpression	matchEdges . push_back ( edge )		1990203	0					
ANR	1990289	Callee	matchEdges . push_back		1990203	0					
ANR	1990290	MemberAccess	matchEdges . push_back		1990203	0					
ANR	1990291	Identifier	matchEdges		1990203	0					
ANR	1990292	Identifier	push_back		1990203	1					
ANR	1990293	ArgumentList	edge		1990203	1					
ANR	1990294	Argument	edge		1990203	0					
ANR	1990295	Identifier	edge		1990203	0					
ANR	1990296	ReturnStatement	return true ;	493:2:10732:10743	1990203	4	True				
ANR	1990297	Identifier	true		1990203	0					
ANR	1990298	ReturnStatement	return false ;	495:1:10749:10761	1990203	1	True				
ANR	1990299	Identifier	false		1990203	0					
ANR	1990300	ReturnType	bool		1990203	1					
ANR	1990301	Identifier	PortNode :: AddMatchEdge		1990203	2					
ANR	1990302	ParameterList	"int edgeNum , PortNode * target , std :: vector < MatchPath * > & annotations"		1990203	3					
ANR	1990303	Parameter	int edgeNum	475:14:10092:10102	1990203	0	True				
ANR	1990304	ParameterType	int		1990203	0					
ANR	1990305	Identifier	edgeNum		1990203	1					
ANR	1990306	Parameter	PortNode * target	475:27:10105:10120	1990203	1	True				
ANR	1990307	ParameterType	PortNode *		1990203	0					
ANR	1990308	Identifier	target		1990203	1					
ANR	1990309	Parameter	std :: vector < MatchPath * > & annotations	476:5:10129:10164	1990203	2	True				
ANR	1990310	ParameterType	std :: vector < MatchPath * > &		1990203	0					
ANR	1990311	Identifier	annotations		1990203	1					
ANR	1990312	CFGEntryNode	ENTRY		1990203		True				
ANR	1990313	CFGExitNode	EXIT		1990203		True				
ANR	1990314	Symbol	matchEdges . begin		1990203						
ANR	1990315	Symbol	m1		1990203						
ANR	1990316	Symbol	matchEdges		1990203						
ANR	1990317	Symbol	false		1990203						
ANR	1990318	Symbol	this		1990203						
ANR	1990319	Symbol	annotations		1990203						
ANR	1990320	Symbol	* m1		1990203						
ANR	1990321	Symbol	( * m1 ) -> GetTarget		1990203						
ANR	1990322	Symbol	target		1990203						
ANR	1990323	Symbol	matchEdges . end		1990203						
ANR	1990324	Symbol	* * m1		1990203						
ANR	1990325	Symbol	edge		1990203						
ANR	1990326	Symbol	true		1990203						
ANR	1990327	Symbol	( * m1 ) -> SameAnnotations		1990203						
ANR	1990328	Symbol	edgeNum		1990203						
ANR	1990329	Symbol	( * m1 ) -> HasNoAnnotations		1990203						
ANR	1990330	Function	PortNode :: ToString	499:0:10767:12182							
ANR	1990331	FunctionDef	PortNode :: ToString (std :: string & buffer)		1990330	0					
ANR	1990332	CompoundStatement		500:32:10815:12182	1990330	0					
ANR	1990333	IdentifierDeclStatement	char tempBuf [ 512 ] ;	501:1:10818:10835	1990330	0	True				
ANR	1990334	IdentifierDecl	tempBuf [ 512 ]		1990330	0					
ANR	1990335	IdentifierDeclType	char [ 512 ]		1990330	0					
ANR	1990336	Identifier	tempBuf		1990330	1					
ANR	1990337	PrimaryExpression	512		1990330	2					
ANR	1990338	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , adNum )"	502:1:10838:10869	1990330	1	True				
ANR	1990339	CallExpression	"sprintf ( tempBuf , ""%d"" , adNum )"		1990330	0					
ANR	1990340	Callee	sprintf		1990330	0					
ANR	1990341	Identifier	sprintf		1990330	0					
ANR	1990342	ArgumentList	tempBuf		1990330	1					
ANR	1990343	Argument	tempBuf		1990330	0					
ANR	1990344	Identifier	tempBuf		1990330	0					
ANR	1990345	Argument	"""%d"""		1990330	1					
ANR	1990346	PrimaryExpression	"""%d"""		1990330	0					
ANR	1990347	Argument	adNum		1990330	2					
ANR	1990348	Identifier	adNum		1990330	0					
ANR	1990349	ExpressionStatement	"buffer += ""[adNum:"""	503:1:10872:10891	1990330	2	True				
ANR	1990350	AssignmentExpression	"buffer += ""[adNum:"""		1990330	0		+=			
ANR	1990351	Identifier	buffer		1990330	0					
ANR	1990352	PrimaryExpression	"""[adNum:"""		1990330	1					
ANR	1990353	ExpressionStatement	buffer += tempBuf	504:1:10894:10911	1990330	3	True				
ANR	1990354	AssignmentExpression	buffer += tempBuf		1990330	0		+=			
ANR	1990355	Identifier	buffer		1990330	0					
ANR	1990356	Identifier	tempBuf		1990330	1					
ANR	1990357	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , portNum )"	505:1:10914:10947	1990330	4	True				
ANR	1990358	CallExpression	"sprintf ( tempBuf , ""%d"" , portNum )"		1990330	0					
ANR	1990359	Callee	sprintf		1990330	0					
ANR	1990360	Identifier	sprintf		1990330	0					
ANR	1990361	ArgumentList	tempBuf		1990330	1					
ANR	1990362	Argument	tempBuf		1990330	0					
ANR	1990363	Identifier	tempBuf		1990330	0					
ANR	1990364	Argument	"""%d"""		1990330	1					
ANR	1990365	PrimaryExpression	"""%d"""		1990330	0					
ANR	1990366	Argument	portNum		1990330	2					
ANR	1990367	Identifier	portNum		1990330	0					
ANR	1990368	ExpressionStatement	"buffer += "",portNum:"""	506:1:10950:10971	1990330	5	True				
ANR	1990369	AssignmentExpression	"buffer += "",portNum:"""		1990330	0		+=			
ANR	1990370	Identifier	buffer		1990330	0					
ANR	1990371	PrimaryExpression	""",portNum:"""		1990330	1					
ANR	1990372	ExpressionStatement	buffer += tempBuf	507:1:10974:10991	1990330	6	True				
ANR	1990373	AssignmentExpression	buffer += tempBuf		1990330	0		+=			
ANR	1990374	Identifier	buffer		1990330	0					
ANR	1990375	Identifier	tempBuf		1990330	1					
ANR	1990376	ExpressionStatement	"buffer += "",attrNodes:{"""	508:1:10994:11018	1990330	7	True				
ANR	1990377	AssignmentExpression	"buffer += "",attrNodes:{"""		1990330	0		+=			
ANR	1990378	Identifier	buffer		1990330	0					
ANR	1990379	PrimaryExpression	""",attrNodes:{"""		1990330	1					
ANR	1990380	IdentifierDeclStatement	AttrNodeMap :: const_iterator a ;	509:1:11021:11050	1990330	8	True				
ANR	1990381	IdentifierDecl	a		1990330	0					
ANR	1990382	IdentifierDeclType	AttrNodeMap :: const_iterator		1990330	0					
ANR	1990383	Identifier	a		1990330	1					
ANR	1990384	ForStatement	for ( a = attrNodes . begin ( ) ; a != attrNodes . end ( ) ; a ++ )		1990330	9					
ANR	1990385	ForInit	a = attrNodes . begin ( ) ;	510:6:11058:11080	1990330	0	True				
ANR	1990386	AssignmentExpression	a = attrNodes . begin ( )		1990330	0		=			
ANR	1990387	Identifier	a		1990330	0					
ANR	1990388	CallExpression	attrNodes . begin ( )		1990330	1					
ANR	1990389	Callee	attrNodes . begin		1990330	0					
ANR	1990390	MemberAccess	attrNodes . begin		1990330	0					
ANR	1990391	Identifier	attrNodes		1990330	0					
ANR	1990392	Identifier	begin		1990330	1					
ANR	1990393	ArgumentList			1990330	1					
ANR	1990394	Condition	a != attrNodes . end ( )	510:30:11082:11102	1990330	1	True				
ANR	1990395	EqualityExpression	a != attrNodes . end ( )		1990330	0		!=			
ANR	1990396	Identifier	a		1990330	0					
ANR	1990397	CallExpression	attrNodes . end ( )		1990330	1					
ANR	1990398	Callee	attrNodes . end		1990330	0					
ANR	1990399	MemberAccess	attrNodes . end		1990330	0					
ANR	1990400	Identifier	attrNodes		1990330	0					
ANR	1990401	Identifier	end		1990330	1					
ANR	1990402	ArgumentList			1990330	1					
ANR	1990403	PostIncDecOperationExpression	a ++	510:53:11105:11107	1990330	2	True				
ANR	1990404	Identifier	a		1990330	0					
ANR	1990405	IncDec	++		1990330	1					
ANR	1990406	CompoundStatement		11:59:295:295	1990330	3					
ANR	1990407	IfStatement	if ( a != attrNodes . begin ( ) )		1990330	0					
ANR	1990408	Condition	a != attrNodes . begin ( )	511:6:11119:11141	1990330	0	True				
ANR	1990409	EqualityExpression	a != attrNodes . begin ( )		1990330	0		!=			
ANR	1990410	Identifier	a		1990330	0					
ANR	1990411	CallExpression	attrNodes . begin ( )		1990330	1					
ANR	1990412	Callee	attrNodes . begin		1990330	0					
ANR	1990413	MemberAccess	attrNodes . begin		1990330	0					
ANR	1990414	Identifier	attrNodes		1990330	0					
ANR	1990415	Identifier	begin		1990330	1					
ANR	1990416	ArgumentList			1990330	1					
ANR	1990417	CompoundStatement		12:32:329:329	1990330	1					
ANR	1990418	ExpressionStatement	"buffer += "","""	512:3:11150:11163	1990330	0	True				
ANR	1990419	AssignmentExpression	"buffer += "","""		1990330	0		+=			
ANR	1990420	Identifier	buffer		1990330	0					
ANR	1990421	PrimaryExpression	""","""		1990330	1					
ANR	1990422	ExpressionStatement	buffer += a -> first	514:2:11171:11189	1990330	1	True				
ANR	1990423	AssignmentExpression	buffer += a -> first		1990330	0		+=			
ANR	1990424	Identifier	buffer		1990330	0					
ANR	1990425	PtrMemberAccess	a -> first		1990330	1					
ANR	1990426	Identifier	a		1990330	0					
ANR	1990427	Identifier	first		1990330	1					
ANR	1990428	ExpressionStatement	a -> second -> ToString ( buffer )	515:2:11193:11222	1990330	2	True				
ANR	1990429	CallExpression	a -> second -> ToString ( buffer )		1990330	0					
ANR	1990430	Callee	a -> second -> ToString		1990330	0					
ANR	1990431	PtrMemberAccess	a -> second -> ToString		1990330	0					
ANR	1990432	PtrMemberAccess	a -> second		1990330	0					
ANR	1990433	Identifier	a		1990330	0					
ANR	1990434	Identifier	second		1990330	1					
ANR	1990435	Identifier	ToString		1990330	1					
ANR	1990436	ArgumentList	buffer		1990330	1					
ANR	1990437	Argument	buffer		1990330	0					
ANR	1990438	Identifier	buffer		1990330	0					
ANR	1990439	ExpressionStatement	"buffer += ""},extAttrNodes:{"""	517:1:11229:11257	1990330	10	True				
ANR	1990440	AssignmentExpression	"buffer += ""},extAttrNodes:{"""		1990330	0		+=			
ANR	1990441	Identifier	buffer		1990330	0					
ANR	1990442	PrimaryExpression	"""},extAttrNodes:{"""		1990330	1					
ANR	1990443	IdentifierDeclStatement	ExtAttrNodeMap :: const_iterator e ;	518:1:11260:11292	1990330	11	True				
ANR	1990444	IdentifierDecl	e		1990330	0					
ANR	1990445	IdentifierDeclType	ExtAttrNodeMap :: const_iterator		1990330	0					
ANR	1990446	Identifier	e		1990330	1					
ANR	1990447	ForStatement	for ( e = extAttrNodes . begin ( ) ; e != extAttrNodes . end ( ) ; e ++ )		1990330	12					
ANR	1990448	ForInit	e = extAttrNodes . begin ( ) ;	519:6:11300:11325	1990330	0	True				
ANR	1990449	AssignmentExpression	e = extAttrNodes . begin ( )		1990330	0		=			
ANR	1990450	Identifier	e		1990330	0					
ANR	1990451	CallExpression	extAttrNodes . begin ( )		1990330	1					
ANR	1990452	Callee	extAttrNodes . begin		1990330	0					
ANR	1990453	MemberAccess	extAttrNodes . begin		1990330	0					
ANR	1990454	Identifier	extAttrNodes		1990330	0					
ANR	1990455	Identifier	begin		1990330	1					
ANR	1990456	ArgumentList			1990330	1					
ANR	1990457	Condition	e != extAttrNodes . end ( )	519:33:11327:11350	1990330	1	True				
ANR	1990458	EqualityExpression	e != extAttrNodes . end ( )		1990330	0		!=			
ANR	1990459	Identifier	e		1990330	0					
ANR	1990460	CallExpression	extAttrNodes . end ( )		1990330	1					
ANR	1990461	Callee	extAttrNodes . end		1990330	0					
ANR	1990462	MemberAccess	extAttrNodes . end		1990330	0					
ANR	1990463	Identifier	extAttrNodes		1990330	0					
ANR	1990464	Identifier	end		1990330	1					
ANR	1990465	ArgumentList			1990330	1					
ANR	1990466	PostIncDecOperationExpression	e ++	519:59:11353:11355	1990330	2	True				
ANR	1990467	Identifier	e		1990330	0					
ANR	1990468	IncDec	++		1990330	1					
ANR	1990469	CompoundStatement		20:65:543:543	1990330	3					
ANR	1990470	IfStatement	if ( e != extAttrNodes . begin ( ) )		1990330	0					
ANR	1990471	Condition	e != extAttrNodes . begin ( )	520:6:11367:11392	1990330	0	True				
ANR	1990472	EqualityExpression	e != extAttrNodes . begin ( )		1990330	0		!=			
ANR	1990473	Identifier	e		1990330	0					
ANR	1990474	CallExpression	extAttrNodes . begin ( )		1990330	1					
ANR	1990475	Callee	extAttrNodes . begin		1990330	0					
ANR	1990476	MemberAccess	extAttrNodes . begin		1990330	0					
ANR	1990477	Identifier	extAttrNodes		1990330	0					
ANR	1990478	Identifier	begin		1990330	1					
ANR	1990479	ArgumentList			1990330	1					
ANR	1990480	CompoundStatement		21:35:580:580	1990330	1					
ANR	1990481	ExpressionStatement	"buffer += "","""	521:3:11401:11414	1990330	0	True				
ANR	1990482	AssignmentExpression	"buffer += "","""		1990330	0		+=			
ANR	1990483	Identifier	buffer		1990330	0					
ANR	1990484	PrimaryExpression	""","""		1990330	1					
ANR	1990485	ExpressionStatement	buffer += e -> first	523:2:11422:11440	1990330	1	True				
ANR	1990486	AssignmentExpression	buffer += e -> first		1990330	0		+=			
ANR	1990487	Identifier	buffer		1990330	0					
ANR	1990488	PtrMemberAccess	e -> first		1990330	1					
ANR	1990489	Identifier	e		1990330	0					
ANR	1990490	Identifier	first		1990330	1					
ANR	1990491	ExpressionStatement	e -> second -> ToString ( buffer )	524:2:11444:11473	1990330	2	True				
ANR	1990492	CallExpression	e -> second -> ToString ( buffer )		1990330	0					
ANR	1990493	Callee	e -> second -> ToString		1990330	0					
ANR	1990494	PtrMemberAccess	e -> second -> ToString		1990330	0					
ANR	1990495	PtrMemberAccess	e -> second		1990330	0					
ANR	1990496	Identifier	e		1990330	0					
ANR	1990497	Identifier	second		1990330	1					
ANR	1990498	Identifier	ToString		1990330	1					
ANR	1990499	ArgumentList	buffer		1990330	1					
ANR	1990500	Argument	buffer		1990330	0					
ANR	1990501	Identifier	buffer		1990330	0					
ANR	1990502	ExpressionStatement	"buffer += ""},reqDeps:{"""	526:1:11479:11502	1990330	13	True				
ANR	1990503	AssignmentExpression	"buffer += ""},reqDeps:{"""		1990330	0		+=			
ANR	1990504	Identifier	buffer		1990330	0					
ANR	1990505	PrimaryExpression	"""},reqDeps:{"""		1990330	1					
ANR	1990506	IdentifierDeclStatement	std :: vector < std :: vector < ExtAttrNode * > * > :: iterator r ;	527:1:11505:11556	1990330	14	True				
ANR	1990507	IdentifierDecl	r		1990330	0					
ANR	1990508	IdentifierDeclType	std :: vector < std :: vector < ExtAttrNode * > * > :: iterator		1990330	0					
ANR	1990509	Identifier	r		1990330	1					
ANR	1990510	IdentifierDeclStatement	std :: vector < ExtAttrNode * > :: iterator rr ;	528:1:11559:11597	1990330	15	True				
ANR	1990511	IdentifierDecl	rr		1990330	0					
ANR	1990512	IdentifierDeclType	std :: vector < ExtAttrNode * > :: iterator		1990330	0					
ANR	1990513	Identifier	rr		1990330	1					
ANR	1990514	ForStatement	for ( r = reqDeps . begin ( ) ; r != reqDeps . end ( ) ; r ++ )		1990330	16					
ANR	1990515	ForInit	r = reqDeps . begin ( ) ;	529:6:11605:11625	1990330	0	True				
ANR	1990516	AssignmentExpression	r = reqDeps . begin ( )		1990330	0		=			
ANR	1990517	Identifier	r		1990330	0					
ANR	1990518	CallExpression	reqDeps . begin ( )		1990330	1					
ANR	1990519	Callee	reqDeps . begin		1990330	0					
ANR	1990520	MemberAccess	reqDeps . begin		1990330	0					
ANR	1990521	Identifier	reqDeps		1990330	0					
ANR	1990522	Identifier	begin		1990330	1					
ANR	1990523	ArgumentList			1990330	1					
ANR	1990524	Condition	r != reqDeps . end ( )	529:28:11627:11645	1990330	1	True				
ANR	1990525	EqualityExpression	r != reqDeps . end ( )		1990330	0		!=			
ANR	1990526	Identifier	r		1990330	0					
ANR	1990527	CallExpression	reqDeps . end ( )		1990330	1					
ANR	1990528	Callee	reqDeps . end		1990330	0					
ANR	1990529	MemberAccess	reqDeps . end		1990330	0					
ANR	1990530	Identifier	reqDeps		1990330	0					
ANR	1990531	Identifier	end		1990330	1					
ANR	1990532	ArgumentList			1990330	1					
ANR	1990533	PostIncDecOperationExpression	r ++	529:49:11648:11650	1990330	2	True				
ANR	1990534	Identifier	r		1990330	0					
ANR	1990535	IncDec	++		1990330	1					
ANR	1990536	CompoundStatement		30:55:838:838	1990330	3					
ANR	1990537	IfStatement	if ( r != reqDeps . begin ( ) )		1990330	0					
ANR	1990538	Condition	r != reqDeps . begin ( )	530:6:11662:11682	1990330	0	True				
ANR	1990539	EqualityExpression	r != reqDeps . begin ( )		1990330	0		!=			
ANR	1990540	Identifier	r		1990330	0					
ANR	1990541	CallExpression	reqDeps . begin ( )		1990330	1					
ANR	1990542	Callee	reqDeps . begin		1990330	0					
ANR	1990543	MemberAccess	reqDeps . begin		1990330	0					
ANR	1990544	Identifier	reqDeps		1990330	0					
ANR	1990545	Identifier	begin		1990330	1					
ANR	1990546	ArgumentList			1990330	1					
ANR	1990547	CompoundStatement		31:30:870:870	1990330	1					
ANR	1990548	ExpressionStatement	"buffer += "","""	531:3:11691:11704	1990330	0	True				
ANR	1990549	AssignmentExpression	"buffer += "","""		1990330	0		+=			
ANR	1990550	Identifier	buffer		1990330	0					
ANR	1990551	PrimaryExpression	""","""		1990330	1					
ANR	1990552	IfStatement	if ( ! ( * r ) -> empty ( ) )		1990330	1					
ANR	1990553	Condition	! ( * r ) -> empty ( )	533:6:11716:11730	1990330	0	True				
ANR	1990554	UnaryOperationExpression	! ( * r ) -> empty ( )		1990330	0					
ANR	1990555	UnaryOperator	!		1990330	0					
ANR	1990556	CallExpression	( * r ) -> empty ( )		1990330	1					
ANR	1990557	Callee	( * r ) -> empty		1990330	0					
ANR	1990558	PtrMemberAccess	( * r ) -> empty		1990330	0					
ANR	1990559	UnaryOperationExpression	* r		1990330	0					
ANR	1990560	UnaryOperator	*		1990330	0					
ANR	1990561	Identifier	r		1990330	1					
ANR	1990562	Identifier	empty		1990330	1					
ANR	1990563	ArgumentList			1990330	1					
ANR	1990564	CompoundStatement		34:24:918:918	1990330	1					
ANR	1990565	ExpressionStatement	"buffer += ""{"""	534:3:11739:11752	1990330	0	True				
ANR	1990566	AssignmentExpression	"buffer += ""{"""		1990330	0		+=			
ANR	1990567	Identifier	buffer		1990330	0					
ANR	1990568	PrimaryExpression	"""{"""		1990330	1					
ANR	1990569	ForStatement	for ( rr = ( * r ) -> begin ( ) ; rr != ( * r ) -> end ( ) ; rr ++ )		1990330	1					
ANR	1990570	ForInit	rr = ( * r ) -> begin ( ) ;	535:8:11762:11781	1990330	0	True				
ANR	1990571	AssignmentExpression	rr = ( * r ) -> begin ( )		1990330	0		=			
ANR	1990572	Identifier	rr		1990330	0					
ANR	1990573	CallExpression	( * r ) -> begin ( )		1990330	1					
ANR	1990574	Callee	( * r ) -> begin		1990330	0					
ANR	1990575	PtrMemberAccess	( * r ) -> begin		1990330	0					
ANR	1990576	UnaryOperationExpression	* r		1990330	0					
ANR	1990577	UnaryOperator	*		1990330	0					
ANR	1990578	Identifier	r		1990330	1					
ANR	1990579	Identifier	begin		1990330	1					
ANR	1990580	ArgumentList			1990330	1					
ANR	1990581	Condition	rr != ( * r ) -> end ( )	535:29:11783:11800	1990330	1	True				
ANR	1990582	EqualityExpression	rr != ( * r ) -> end ( )		1990330	0		!=			
ANR	1990583	Identifier	rr		1990330	0					
ANR	1990584	CallExpression	( * r ) -> end ( )		1990330	1					
ANR	1990585	Callee	( * r ) -> end		1990330	0					
ANR	1990586	PtrMemberAccess	( * r ) -> end		1990330	0					
ANR	1990587	UnaryOperationExpression	* r		1990330	0					
ANR	1990588	UnaryOperator	*		1990330	0					
ANR	1990589	Identifier	r		1990330	1					
ANR	1990590	Identifier	end		1990330	1					
ANR	1990591	ArgumentList			1990330	1					
ANR	1990592	PostIncDecOperationExpression	rr ++	535:49:11803:11806	1990330	2	True				
ANR	1990593	Identifier	rr		1990330	0					
ANR	1990594	IncDec	++		1990330	1					
ANR	1990595	CompoundStatement		36:56:994:994	1990330	3					
ANR	1990596	IfStatement	if ( rr != ( * r ) -> begin ( ) )		1990330	0					
ANR	1990597	Condition	rr != ( * r ) -> begin ( )	536:8:11820:11839	1990330	0	True				
ANR	1990598	EqualityExpression	rr != ( * r ) -> begin ( )		1990330	0		!=			
ANR	1990599	Identifier	rr		1990330	0					
ANR	1990600	CallExpression	( * r ) -> begin ( )		1990330	1					
ANR	1990601	Callee	( * r ) -> begin		1990330	0					
ANR	1990602	PtrMemberAccess	( * r ) -> begin		1990330	0					
ANR	1990603	UnaryOperationExpression	* r		1990330	0					
ANR	1990604	UnaryOperator	*		1990330	0					
ANR	1990605	Identifier	r		1990330	1					
ANR	1990606	Identifier	begin		1990330	1					
ANR	1990607	ArgumentList			1990330	1					
ANR	1990608	CompoundStatement		37:31:1027:1027	1990330	1					
ANR	1990609	ExpressionStatement	"buffer += "","""	537:5:11850:11863	1990330	0	True				
ANR	1990610	AssignmentExpression	"buffer += "","""		1990330	0		+=			
ANR	1990611	Identifier	buffer		1990330	0					
ANR	1990612	PrimaryExpression	""","""		1990330	1					
ANR	1990613	ExpressionStatement	( * rr ) -> ToString ( buffer )	539:4:11875:11900	1990330	1	True				
ANR	1990614	CallExpression	( * rr ) -> ToString ( buffer )		1990330	0					
ANR	1990615	Callee	( * rr ) -> ToString		1990330	0					
ANR	1990616	PtrMemberAccess	( * rr ) -> ToString		1990330	0					
ANR	1990617	UnaryOperationExpression	* rr		1990330	0					
ANR	1990618	UnaryOperator	*		1990330	0					
ANR	1990619	Identifier	rr		1990330	1					
ANR	1990620	Identifier	ToString		1990330	1					
ANR	1990621	ArgumentList	buffer		1990330	1					
ANR	1990622	Argument	buffer		1990330	0					
ANR	1990623	Identifier	buffer		1990330	0					
ANR	1990624	ExpressionStatement	"buffer += ""}"""	541:3:11910:11923	1990330	2	True				
ANR	1990625	AssignmentExpression	"buffer += ""}"""		1990330	0		+=			
ANR	1990626	Identifier	buffer		1990330	0					
ANR	1990627	PrimaryExpression	"""}"""		1990330	1					
ANR	1990628	ExpressionStatement	"buffer += ""},matchEdges:{"""	544:1:11933:11959	1990330	17	True				
ANR	1990629	AssignmentExpression	"buffer += ""},matchEdges:{"""		1990330	0		+=			
ANR	1990630	Identifier	buffer		1990330	0					
ANR	1990631	PrimaryExpression	"""},matchEdges:{"""		1990330	1					
ANR	1990632	IdentifierDeclStatement	std :: vector < MatchEdge * > :: iterator m ;	545:1:11962:11997	1990330	18	True				
ANR	1990633	IdentifierDecl	m		1990330	0					
ANR	1990634	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1990330	0					
ANR	1990635	Identifier	m		1990330	1					
ANR	1990636	ForStatement	for ( m = matchEdges . begin ( ) ; m != matchEdges . end ( ) ; m ++ )		1990330	19					
ANR	1990637	ForInit	m = matchEdges . begin ( ) ;	546:6:12005:12028	1990330	0	True				
ANR	1990638	AssignmentExpression	m = matchEdges . begin ( )		1990330	0		=			
ANR	1990639	Identifier	m		1990330	0					
ANR	1990640	CallExpression	matchEdges . begin ( )		1990330	1					
ANR	1990641	Callee	matchEdges . begin		1990330	0					
ANR	1990642	MemberAccess	matchEdges . begin		1990330	0					
ANR	1990643	Identifier	matchEdges		1990330	0					
ANR	1990644	Identifier	begin		1990330	1					
ANR	1990645	ArgumentList			1990330	1					
ANR	1990646	Condition	m != matchEdges . end ( )	546:31:12030:12051	1990330	1	True				
ANR	1990647	EqualityExpression	m != matchEdges . end ( )		1990330	0		!=			
ANR	1990648	Identifier	m		1990330	0					
ANR	1990649	CallExpression	matchEdges . end ( )		1990330	1					
ANR	1990650	Callee	matchEdges . end		1990330	0					
ANR	1990651	MemberAccess	matchEdges . end		1990330	0					
ANR	1990652	Identifier	matchEdges		1990330	0					
ANR	1990653	Identifier	end		1990330	1					
ANR	1990654	ArgumentList			1990330	1					
ANR	1990655	PostIncDecOperationExpression	m ++	546:55:12054:12056	1990330	2	True				
ANR	1990656	Identifier	m		1990330	0					
ANR	1990657	IncDec	++		1990330	1					
ANR	1990658	CompoundStatement		47:61:1244:1244	1990330	3					
ANR	1990659	IfStatement	if ( m != matchEdges . begin ( ) )		1990330	0					
ANR	1990660	Condition	m != matchEdges . begin ( )	547:6:12068:12091	1990330	0	True				
ANR	1990661	EqualityExpression	m != matchEdges . begin ( )		1990330	0		!=			
ANR	1990662	Identifier	m		1990330	0					
ANR	1990663	CallExpression	matchEdges . begin ( )		1990330	1					
ANR	1990664	Callee	matchEdges . begin		1990330	0					
ANR	1990665	MemberAccess	matchEdges . begin		1990330	0					
ANR	1990666	Identifier	matchEdges		1990330	0					
ANR	1990667	Identifier	begin		1990330	1					
ANR	1990668	ArgumentList			1990330	1					
ANR	1990669	CompoundStatement		48:33:1279:1279	1990330	1					
ANR	1990670	ExpressionStatement	"buffer += "","""	548:3:12100:12113	1990330	0	True				
ANR	1990671	AssignmentExpression	"buffer += "","""		1990330	0		+=			
ANR	1990672	Identifier	buffer		1990330	0					
ANR	1990673	PrimaryExpression	""","""		1990330	1					
ANR	1990674	ExpressionStatement	( * m ) -> ToString ( buffer )	550:2:12121:12145	1990330	1	True				
ANR	1990675	CallExpression	( * m ) -> ToString ( buffer )		1990330	0					
ANR	1990676	Callee	( * m ) -> ToString		1990330	0					
ANR	1990677	PtrMemberAccess	( * m ) -> ToString		1990330	0					
ANR	1990678	UnaryOperationExpression	* m		1990330	0					
ANR	1990679	UnaryOperator	*		1990330	0					
ANR	1990680	Identifier	m		1990330	1					
ANR	1990681	Identifier	ToString		1990330	1					
ANR	1990682	ArgumentList	buffer		1990330	1					
ANR	1990683	Argument	buffer		1990330	0					
ANR	1990684	Identifier	buffer		1990330	0					
ANR	1990685	ExpressionStatement	"buffer += ""}]"""	553:1:12152:12166	1990330	20	True				
ANR	1990686	AssignmentExpression	"buffer += ""}]"""		1990330	0		+=			
ANR	1990687	Identifier	buffer		1990330	0					
ANR	1990688	PrimaryExpression	"""}]"""		1990330	1					
ANR	1990689	ReturnStatement	return true ;	554:1:12169:12180	1990330	21	True				
ANR	1990690	Identifier	true		1990330	0					
ANR	1990691	ReturnType	bool		1990330	1					
ANR	1990692	Identifier	PortNode :: ToString		1990330	2					
ANR	1990693	ParameterList	std :: string & buffer		1990330	3					
ANR	1990694	Parameter	std :: string & buffer	500:10:10793:10811	1990330	0	True				
ANR	1990695	ParameterType	std :: string &		1990330	0					
ANR	1990696	Identifier	buffer		1990330	1					
ANR	1990697	CFGEntryNode	ENTRY		1990330		True				
ANR	1990698	CFGExitNode	EXIT		1990330		True				
ANR	1990699	Symbol	rr		1990330						
ANR	1990700	Symbol	a -> first		1990330						
ANR	1990701	Symbol	matchEdges . begin		1990330						
ANR	1990702	Symbol	extAttrNodes . end		1990330						
ANR	1990703	Symbol	extAttrNodes		1990330						
ANR	1990704	Symbol	reqDeps . end		1990330						
ANR	1990705	Symbol	attrNodes . begin		1990330						
ANR	1990706	Symbol	attrNodes		1990330						
ANR	1990707	Symbol	reqDeps . begin		1990330						
ANR	1990708	Symbol	e -> first		1990330						
ANR	1990709	Symbol	extAttrNodes . begin		1990330						
ANR	1990710	Symbol	* * r		1990330						
ANR	1990711	Symbol	buffer		1990330						
ANR	1990712	Symbol	attrNodes . end		1990330						
ANR	1990713	Symbol	tempBuf		1990330						
ANR	1990714	Symbol	a		1990330						
ANR	1990715	Symbol	( * r ) -> empty		1990330						
ANR	1990716	Symbol	portNum		1990330						
ANR	1990717	Symbol	e		1990330						
ANR	1990718	Symbol	* rr		1990330						
ANR	1990719	Symbol	adNum		1990330						
ANR	1990720	Symbol	matchEdges		1990330						
ANR	1990721	Symbol	( * r ) -> begin		1990330						
ANR	1990722	Symbol	* a		1990330						
ANR	1990723	Symbol	a -> second		1990330						
ANR	1990724	Symbol	m		1990330						
ANR	1990725	Symbol	* e		1990330						
ANR	1990726	Symbol	r		1990330						
ANR	1990727	Symbol	matchEdges . end		1990330						
ANR	1990728	Symbol	e -> second		1990330						
ANR	1990729	Symbol	* m		1990330						
ANR	1990730	Symbol	true		1990330						
ANR	1990731	Symbol	reqDeps		1990330						
ANR	1990732	Symbol	* r		1990330						
ANR	1990733	Symbol	( * r ) -> end		1990330						
ANR	1990734	Function	MatchEdge :: MatchEdge	559:0:12207:12259							
ANR	1990735	FunctionDef	MatchEdge :: MatchEdge ()		1990734	0					
ANR	1990736	CompoundStatement		561:0:12232:12259	1990734	0					
ANR	1990737	ExpressionStatement	source = target = NULL	562:1:12235:12257	1990734	0	True				
ANR	1990738	AssignmentExpression	source = target = NULL		1990734	0		=			
ANR	1990739	Identifier	source		1990734	0					
ANR	1990740	AssignmentExpression	target = NULL		1990734	1		=			
ANR	1990741	Identifier	target		1990734	0					
ANR	1990742	Identifier	NULL		1990734	1					
ANR	1990743	Identifier	MatchEdge :: MatchEdge		1990734	1					
ANR	1990744	ParameterList			1990734	2					
ANR	1990745	CFGEntryNode	ENTRY		1990734		True				
ANR	1990746	CFGExitNode	EXIT		1990734		True				
ANR	1990747	Symbol	NULL		1990734						
ANR	1990748	Symbol	source		1990734						
ANR	1990749	Symbol	target		1990734						
ANR	1990750	Function	MatchEdge :: MatchEdge	565:0:12262:12582							
ANR	1990751	FunctionDef	"MatchEdge :: MatchEdge (int _edgeNum , PortNode * _source , PortNode * _target , std :: vector < MatchPath * > & _annotations)"		1990750	0					
ANR	1990752	CompoundStatement		568:0:12382:12582	1990750	0					
ANR	1990753	ExpressionStatement	edgeNum = _edgeNum	569:1:12385:12403	1990750	0	True				
ANR	1990754	AssignmentExpression	edgeNum = _edgeNum		1990750	0		=			
ANR	1990755	Identifier	edgeNum		1990750	0					
ANR	1990756	Identifier	_edgeNum		1990750	1					
ANR	1990757	ExpressionStatement	source = _source	570:1:12406:12422	1990750	1	True				
ANR	1990758	AssignmentExpression	source = _source		1990750	0		=			
ANR	1990759	Identifier	source		1990750	0					
ANR	1990760	Identifier	_source		1990750	1					
ANR	1990761	ExpressionStatement	target = _target	571:1:12425:12441	1990750	2	True				
ANR	1990762	AssignmentExpression	target = _target		1990750	0		=			
ANR	1990763	Identifier	target		1990750	0					
ANR	1990764	Identifier	_target		1990750	1					
ANR	1990765	IdentifierDeclStatement	std :: vector < MatchPath * > :: iterator a ;	572:1:12444:12479	1990750	3	True				
ANR	1990766	IdentifierDecl	a		1990750	0					
ANR	1990767	IdentifierDeclType	std :: vector < MatchPath * > :: iterator		1990750	0					
ANR	1990768	Identifier	a		1990750	1					
ANR	1990769	ForStatement	for ( a = _annotations . begin ( ) ; a != _annotations . end ( ) ; a ++ )		1990750	4					
ANR	1990770	ForInit	a = _annotations . begin ( ) ;	573:6:12487:12512	1990750	0	True				
ANR	1990771	AssignmentExpression	a = _annotations . begin ( )		1990750	0		=			
ANR	1990772	Identifier	a		1990750	0					
ANR	1990773	CallExpression	_annotations . begin ( )		1990750	1					
ANR	1990774	Callee	_annotations . begin		1990750	0					
ANR	1990775	MemberAccess	_annotations . begin		1990750	0					
ANR	1990776	Identifier	_annotations		1990750	0					
ANR	1990777	Identifier	begin		1990750	1					
ANR	1990778	ArgumentList			1990750	1					
ANR	1990779	Condition	a != _annotations . end ( )	573:33:12514:12537	1990750	1	True				
ANR	1990780	EqualityExpression	a != _annotations . end ( )		1990750	0		!=			
ANR	1990781	Identifier	a		1990750	0					
ANR	1990782	CallExpression	_annotations . end ( )		1990750	1					
ANR	1990783	Callee	_annotations . end		1990750	0					
ANR	1990784	MemberAccess	_annotations . end		1990750	0					
ANR	1990785	Identifier	_annotations		1990750	0					
ANR	1990786	Identifier	end		1990750	1					
ANR	1990787	ArgumentList			1990750	1					
ANR	1990788	PostIncDecOperationExpression	a ++	573:59:12540:12542	1990750	2	True				
ANR	1990789	Identifier	a		1990750	0					
ANR	1990790	IncDec	++		1990750	1					
ANR	1990791	CompoundStatement		6:65:163:163	1990750	3					
ANR	1990792	ExpressionStatement	annotations . push_back ( * a )	574:2:12550:12577	1990750	0	True				
ANR	1990793	CallExpression	annotations . push_back ( * a )		1990750	0					
ANR	1990794	Callee	annotations . push_back		1990750	0					
ANR	1990795	MemberAccess	annotations . push_back		1990750	0					
ANR	1990796	Identifier	annotations		1990750	0					
ANR	1990797	Identifier	push_back		1990750	1					
ANR	1990798	ArgumentList	* a		1990750	1					
ANR	1990799	Argument	* a		1990750	0					
ANR	1990800	UnaryOperationExpression	* a		1990750	0					
ANR	1990801	UnaryOperator	*		1990750	0					
ANR	1990802	Identifier	a		1990750	1					
ANR	1990803	Identifier	MatchEdge :: MatchEdge		1990750	1					
ANR	1990804	ParameterList	"int _edgeNum , PortNode * _source , PortNode * _target , std :: vector < MatchPath * > & _annotations"		1990750	2					
ANR	1990805	Parameter	int _edgeNum	566:11:12285:12296	1990750	0	True				
ANR	1990806	ParameterType	int		1990750	0					
ANR	1990807	Identifier	_edgeNum		1990750	1					
ANR	1990808	Parameter	PortNode * _source	566:25:12299:12315	1990750	1	True				
ANR	1990809	ParameterType	PortNode *		1990750	0					
ANR	1990810	Identifier	_source		1990750	1					
ANR	1990811	Parameter	PortNode * _target	566:44:12318:12334	1990750	2	True				
ANR	1990812	ParameterType	PortNode *		1990750	0					
ANR	1990813	Identifier	_target		1990750	1					
ANR	1990814	Parameter	std :: vector < MatchPath * > & _annotations	567:5:12342:12378	1990750	3	True				
ANR	1990815	ParameterType	std :: vector < MatchPath * > &		1990750	0					
ANR	1990816	Identifier	_annotations		1990750	1					
ANR	1990817	CFGEntryNode	ENTRY		1990750		True				
ANR	1990818	CFGExitNode	EXIT		1990750		True				
ANR	1990819	Symbol	a		1990750						
ANR	1990820	Symbol	_annotations . end		1990750						
ANR	1990821	Symbol	_annotations . begin		1990750						
ANR	1990822	Symbol	annotations		1990750						
ANR	1990823	Symbol	_source		1990750						
ANR	1990824	Symbol	source		1990750						
ANR	1990825	Symbol	* a		1990750						
ANR	1990826	Symbol	_annotations		1990750						
ANR	1990827	Symbol	edgeNum		1990750						
ANR	1990828	Symbol	_edgeNum		1990750						
ANR	1990829	Symbol	_target		1990750						
ANR	1990830	Symbol	target		1990750						
ANR	1990831	Function	MatchEdge :: ~MatchEdge	578:0:12585:12613							
ANR	1990832	FunctionDef	MatchEdge :: ~MatchEdge ()		1990831	0					
ANR	1990833	CompoundStatement		580:0:12611:12613	1990831	0					
ANR	1990834	Identifier	MatchEdge :: ~MatchEdge		1990831	1					
ANR	1990835	ParameterList			1990831	2					
ANR	1990836	CFGEntryNode	ENTRY		1990831		True				
ANR	1990837	CFGExitNode	EXIT		1990831		True				
ANR	1990838	Function	MatchEdge :: GetSource	583:0:12616:12669							
ANR	1990839	FunctionDef	MatchEdge :: GetSource ()		1990838	0					
ANR	1990840	CompoundStatement		585:0:12651:12669	1990838	0					
ANR	1990841	ReturnStatement	return source ;	586:1:12654:12667	1990838	0	True				
ANR	1990842	Identifier	source		1990838	0					
ANR	1990843	ReturnType	PortNode *		1990838	1					
ANR	1990844	Identifier	MatchEdge :: GetSource		1990838	2					
ANR	1990845	ParameterList			1990838	3					
ANR	1990846	CFGEntryNode	ENTRY		1990838		True				
ANR	1990847	CFGExitNode	EXIT		1990838		True				
ANR	1990848	Symbol	source		1990838						
ANR	1990849	Function	MatchEdge :: GetTarget	589:0:12672:12725							
ANR	1990850	FunctionDef	MatchEdge :: GetTarget ()		1990849	0					
ANR	1990851	CompoundStatement		591:0:12707:12725	1990849	0					
ANR	1990852	ReturnStatement	return target ;	592:1:12710:12723	1990849	0	True				
ANR	1990853	Identifier	target		1990849	0					
ANR	1990854	ReturnType	PortNode *		1990849	1					
ANR	1990855	Identifier	MatchEdge :: GetTarget		1990849	2					
ANR	1990856	ParameterList			1990849	3					
ANR	1990857	CFGEntryNode	ENTRY		1990849		True				
ANR	1990858	CFGExitNode	EXIT		1990849		True				
ANR	1990859	Symbol	target		1990849						
ANR	1990860	Function	MatchEdge :: GetEdgeNum	595:0:12728:12777							
ANR	1990861	FunctionDef	MatchEdge :: GetEdgeNum ()		1990860	0					
ANR	1990862	CompoundStatement		597:0:12758:12777	1990860	0					
ANR	1990863	ReturnStatement	return edgeNum ;	598:1:12761:12775	1990860	0	True				
ANR	1990864	Identifier	edgeNum		1990860	0					
ANR	1990865	ReturnType	int		1990860	1					
ANR	1990866	Identifier	MatchEdge :: GetEdgeNum		1990860	2					
ANR	1990867	ParameterList			1990860	3					
ANR	1990868	CFGEntryNode	ENTRY		1990860		True				
ANR	1990869	CFGExitNode	EXIT		1990860		True				
ANR	1990870	Symbol	edgeNum		1990860						
ANR	1990871	Function	MatchEdge :: HasNoAnnotations	601:0:12780:12849							
ANR	1990872	FunctionDef	MatchEdge :: HasNoAnnotations ()		1990871	0					
ANR	1990873	CompoundStatement		603:0:12817:12849	1990871	0					
ANR	1990874	ReturnStatement	return annotations . empty ( ) ;	604:1:12820:12847	1990871	0	True				
ANR	1990875	CallExpression	annotations . empty ( )		1990871	0					
ANR	1990876	Callee	annotations . empty		1990871	0					
ANR	1990877	MemberAccess	annotations . empty		1990871	0					
ANR	1990878	Identifier	annotations		1990871	0					
ANR	1990879	Identifier	empty		1990871	1					
ANR	1990880	ArgumentList			1990871	1					
ANR	1990881	ReturnType	bool		1990871	1					
ANR	1990882	Identifier	MatchEdge :: HasNoAnnotations		1990871	2					
ANR	1990883	ParameterList			1990871	3					
ANR	1990884	CFGEntryNode	ENTRY		1990871		True				
ANR	1990885	CFGExitNode	EXIT		1990871		True				
ANR	1990886	Symbol	annotations		1990871						
ANR	1990887	Symbol	annotations . empty		1990871						
ANR	1990888	Function	MatchEdge :: SameAnnotations	607:0:12852:13135							
ANR	1990889	FunctionDef	MatchEdge :: SameAnnotations (std :: vector < MatchPath * > & mps)		1990888	0					
ANR	1990890	CompoundStatement		609:0:12917:13135	1990888	0					
ANR	1990891	IdentifierDeclStatement	"std :: vector < MatchPath * > :: iterator a , m ;"	610:1:12920:12958	1990888	0	True				
ANR	1990892	IdentifierDecl	a		1990888	0					
ANR	1990893	IdentifierDeclType	std :: vector < MatchPath * > :: iterator		1990888	0					
ANR	1990894	Identifier	a		1990888	1					
ANR	1990895	IdentifierDecl	m		1990888	1					
ANR	1990896	IdentifierDeclType	std :: vector < MatchPath * > :: iterator		1990888	0					
ANR	1990897	Identifier	m		1990888	1					
ANR	1990898	ExpressionStatement	m = mps . begin ( )	611:1:12961:12977	1990888	1	True				
ANR	1990899	AssignmentExpression	m = mps . begin ( )		1990888	0		=			
ANR	1990900	Identifier	m		1990888	0					
ANR	1990901	CallExpression	mps . begin ( )		1990888	1					
ANR	1990902	Callee	mps . begin		1990888	0					
ANR	1990903	MemberAccess	mps . begin		1990888	0					
ANR	1990904	Identifier	mps		1990888	0					
ANR	1990905	Identifier	begin		1990888	1					
ANR	1990906	ArgumentList			1990888	1					
ANR	1990907	ForStatement	for ( a = annotations . begin ( ) ; a != annotations . end ( ) ; a ++ )		1990888	2					
ANR	1990908	ForInit	a = annotations . begin ( ) ;	612:6:12985:13009	1990888	0	True				
ANR	1990909	AssignmentExpression	a = annotations . begin ( )		1990888	0		=			
ANR	1990910	Identifier	a		1990888	0					
ANR	1990911	CallExpression	annotations . begin ( )		1990888	1					
ANR	1990912	Callee	annotations . begin		1990888	0					
ANR	1990913	MemberAccess	annotations . begin		1990888	0					
ANR	1990914	Identifier	annotations		1990888	0					
ANR	1990915	Identifier	begin		1990888	1					
ANR	1990916	ArgumentList			1990888	1					
ANR	1990917	Condition	a != annotations . end ( )	612:32:13011:13033	1990888	1	True				
ANR	1990918	EqualityExpression	a != annotations . end ( )		1990888	0		!=			
ANR	1990919	Identifier	a		1990888	0					
ANR	1990920	CallExpression	annotations . end ( )		1990888	1					
ANR	1990921	Callee	annotations . end		1990888	0					
ANR	1990922	MemberAccess	annotations . end		1990888	0					
ANR	1990923	Identifier	annotations		1990888	0					
ANR	1990924	Identifier	end		1990888	1					
ANR	1990925	ArgumentList			1990888	1					
ANR	1990926	PostIncDecOperationExpression	a ++	612:57:13036:13038	1990888	2	True				
ANR	1990927	Identifier	a		1990888	0					
ANR	1990928	IncDec	++		1990888	1					
ANR	1990929	CompoundStatement		4:62:123:123	1990888	3					
ANR	1990930	IfStatement	if ( m == mps . end ( ) || ! ( * a ) -> SameAs ( * m ) )		1990888	0					
ANR	1990931	Condition	m == mps . end ( ) || ! ( * a ) -> SameAs ( * m )	613:6:13049:13084	1990888	0	True				
ANR	1990932	OrExpression	m == mps . end ( ) || ! ( * a ) -> SameAs ( * m )		1990888	0		||			
ANR	1990933	EqualityExpression	m == mps . end ( )		1990888	0		==			
ANR	1990934	Identifier	m		1990888	0					
ANR	1990935	CallExpression	mps . end ( )		1990888	1					
ANR	1990936	Callee	mps . end		1990888	0					
ANR	1990937	MemberAccess	mps . end		1990888	0					
ANR	1990938	Identifier	mps		1990888	0					
ANR	1990939	Identifier	end		1990888	1					
ANR	1990940	ArgumentList			1990888	1					
ANR	1990941	UnaryOperationExpression	! ( * a ) -> SameAs ( * m )		1990888	1					
ANR	1990942	UnaryOperator	!		1990888	0					
ANR	1990943	CallExpression	( * a ) -> SameAs ( * m )		1990888	1					
ANR	1990944	Callee	( * a ) -> SameAs		1990888	0					
ANR	1990945	PtrMemberAccess	( * a ) -> SameAs		1990888	0					
ANR	1990946	UnaryOperationExpression	* a		1990888	0					
ANR	1990947	UnaryOperator	*		1990888	0					
ANR	1990948	Identifier	a		1990888	1					
ANR	1990949	Identifier	SameAs		1990888	1					
ANR	1990950	ArgumentList	* m		1990888	1					
ANR	1990951	Argument	* m		1990888	0					
ANR	1990952	UnaryOperationExpression	* m		1990888	0					
ANR	1990953	UnaryOperator	*		1990888	0					
ANR	1990954	Identifier	m		1990888	1					
ANR	1990955	CompoundStatement		5:45:170:170	1990888	1					
ANR	1990956	ReturnStatement	return false ;	614:3:13093:13105	1990888	0	True				
ANR	1990957	Identifier	false		1990888	0					
ANR	1990958	ExpressionStatement	m ++	616:2:13113:13116	1990888	1	True				
ANR	1990959	PostIncDecOperationExpression	m ++		1990888	0					
ANR	1990960	Identifier	m		1990888	0					
ANR	1990961	IncDec	++		1990888	1					
ANR	1990962	ReturnStatement	return true ;	618:1:13122:13133	1990888	3	True				
ANR	1990963	Identifier	true		1990888	0					
ANR	1990964	ReturnType	bool		1990888	1					
ANR	1990965	Identifier	MatchEdge :: SameAnnotations		1990888	2					
ANR	1990966	ParameterList	std :: vector < MatchPath * > & mps		1990888	3					
ANR	1990967	Parameter	std :: vector < MatchPath * > & mps	608:17:12886:12913	1990888	0	True				
ANR	1990968	ParameterType	std :: vector < MatchPath * > &		1990888	0					
ANR	1990969	Identifier	mps		1990888	1					
ANR	1990970	CFGEntryNode	ENTRY		1990888		True				
ANR	1990971	CFGExitNode	EXIT		1990888		True				
ANR	1990972	Symbol	a		1990888						
ANR	1990973	Symbol	( * a ) -> SameAs		1990888						
ANR	1990974	Symbol	false		1990888						
ANR	1990975	Symbol	annotations		1990888						
ANR	1990976	Symbol	* * a		1990888						
ANR	1990977	Symbol	* a		1990888						
ANR	1990978	Symbol	m		1990888						
ANR	1990979	Symbol	annotations . begin		1990888						
ANR	1990980	Symbol	mps		1990888						
ANR	1990981	Symbol	mps . begin		1990888						
ANR	1990982	Symbol	annotations . end		1990888						
ANR	1990983	Symbol	* m		1990888						
ANR	1990984	Symbol	true		1990888						
ANR	1990985	Symbol	mps . end		1990888						
ANR	1990986	Function	MatchEdge :: ToString	621:0:13138:14128							
ANR	1990987	FunctionDef	MatchEdge :: ToString (std :: string & buffer)		1990986	0					
ANR	1990988	CompoundStatement		623:0:13187:14128	1990986	0					
ANR	1990989	IdentifierDeclStatement	char tempBuf [ 512 ] ;	624:1:13190:13207	1990986	0	True				
ANR	1990990	IdentifierDecl	tempBuf [ 512 ]		1990986	0					
ANR	1990991	IdentifierDeclType	char [ 512 ]		1990986	0					
ANR	1990992	Identifier	tempBuf		1990986	1					
ANR	1990993	PrimaryExpression	512		1990986	2					
ANR	1990994	ExpressionStatement	"buffer += ""[edgeNum:"""	625:1:13210:13231	1990986	1	True				
ANR	1990995	AssignmentExpression	"buffer += ""[edgeNum:"""		1990986	0		+=			
ANR	1990996	Identifier	buffer		1990986	0					
ANR	1990997	PrimaryExpression	"""[edgeNum:"""		1990986	1					
ANR	1990998	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , edgeNum )"	626:1:13234:13267	1990986	2	True				
ANR	1990999	CallExpression	"sprintf ( tempBuf , ""%d"" , edgeNum )"		1990986	0					
ANR	1991000	Callee	sprintf		1990986	0					
ANR	1991001	Identifier	sprintf		1990986	0					
ANR	1991002	ArgumentList	tempBuf		1990986	1					
ANR	1991003	Argument	tempBuf		1990986	0					
ANR	1991004	Identifier	tempBuf		1990986	0					
ANR	1991005	Argument	"""%d"""		1990986	1					
ANR	1991006	PrimaryExpression	"""%d"""		1990986	0					
ANR	1991007	Argument	edgeNum		1990986	2					
ANR	1991008	Identifier	edgeNum		1990986	0					
ANR	1991009	ExpressionStatement	buffer += tempBuf	627:1:13270:13287	1990986	3	True				
ANR	1991010	AssignmentExpression	buffer += tempBuf		1990986	0		+=			
ANR	1991011	Identifier	buffer		1990986	0					
ANR	1991012	Identifier	tempBuf		1990986	1					
ANR	1991013	IfStatement	if ( source || target )		1990986	4					
ANR	1991014	Condition	source || target	628:5:13294:13309	1990986	0	True				
ANR	1991015	OrExpression	source || target		1990986	0		||			
ANR	1991016	Identifier	source		1990986	0					
ANR	1991017	Identifier	target		1990986	1					
ANR	1991018	CompoundStatement		6:24:125:125	1990986	1					
ANR	1991019	ExpressionStatement	"buffer += "","""	629:2:13317:13330	1990986	0	True				
ANR	1991020	AssignmentExpression	"buffer += "","""		1990986	0		+=			
ANR	1991021	Identifier	buffer		1990986	0					
ANR	1991022	PrimaryExpression	""","""		1990986	1					
ANR	1991023	IfStatement	if ( source )		1990986	5					
ANR	1991024	Condition	source	631:5:13340:13345	1990986	0	True				
ANR	1991025	Identifier	source		1990986	0					
ANR	1991026	CompoundStatement		9:14:161:161	1990986	1					
ANR	1991027	ExpressionStatement	"buffer += ""source:{"""	632:2:13353:13373	1990986	0	True				
ANR	1991028	AssignmentExpression	"buffer += ""source:{"""		1990986	0		+=			
ANR	1991029	Identifier	buffer		1990986	0					
ANR	1991030	PrimaryExpression	"""source:{"""		1990986	1					
ANR	1991031	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , source -> GetAdNum ( ) )"	633:2:13377:13422	1990986	1	True				
ANR	1991032	CallExpression	"sprintf ( tempBuf , ""%d"" , source -> GetAdNum ( ) )"		1990986	0					
ANR	1991033	Callee	sprintf		1990986	0					
ANR	1991034	Identifier	sprintf		1990986	0					
ANR	1991035	ArgumentList	tempBuf		1990986	1					
ANR	1991036	Argument	tempBuf		1990986	0					
ANR	1991037	Identifier	tempBuf		1990986	0					
ANR	1991038	Argument	"""%d"""		1990986	1					
ANR	1991039	PrimaryExpression	"""%d"""		1990986	0					
ANR	1991040	Argument	source -> GetAdNum ( )		1990986	2					
ANR	1991041	CallExpression	source -> GetAdNum ( )		1990986	0					
ANR	1991042	Callee	source -> GetAdNum		1990986	0					
ANR	1991043	PtrMemberAccess	source -> GetAdNum		1990986	0					
ANR	1991044	Identifier	source		1990986	0					
ANR	1991045	Identifier	GetAdNum		1990986	1					
ANR	1991046	ArgumentList			1990986	1					
ANR	1991047	ExpressionStatement	buffer += tempBuf	634:2:13426:13443	1990986	2	True				
ANR	1991048	AssignmentExpression	buffer += tempBuf		1990986	0		+=			
ANR	1991049	Identifier	buffer		1990986	0					
ANR	1991050	Identifier	tempBuf		1990986	1					
ANR	1991051	ExpressionStatement	"buffer += "","""	635:2:13447:13460	1990986	3	True				
ANR	1991052	AssignmentExpression	"buffer += "","""		1990986	0		+=			
ANR	1991053	Identifier	buffer		1990986	0					
ANR	1991054	PrimaryExpression	""","""		1990986	1					
ANR	1991055	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , source -> GetPortNum ( ) )"	636:2:13464:13511	1990986	4	True				
ANR	1991056	CallExpression	"sprintf ( tempBuf , ""%d"" , source -> GetPortNum ( ) )"		1990986	0					
ANR	1991057	Callee	sprintf		1990986	0					
ANR	1991058	Identifier	sprintf		1990986	0					
ANR	1991059	ArgumentList	tempBuf		1990986	1					
ANR	1991060	Argument	tempBuf		1990986	0					
ANR	1991061	Identifier	tempBuf		1990986	0					
ANR	1991062	Argument	"""%d"""		1990986	1					
ANR	1991063	PrimaryExpression	"""%d"""		1990986	0					
ANR	1991064	Argument	source -> GetPortNum ( )		1990986	2					
ANR	1991065	CallExpression	source -> GetPortNum ( )		1990986	0					
ANR	1991066	Callee	source -> GetPortNum		1990986	0					
ANR	1991067	PtrMemberAccess	source -> GetPortNum		1990986	0					
ANR	1991068	Identifier	source		1990986	0					
ANR	1991069	Identifier	GetPortNum		1990986	1					
ANR	1991070	ArgumentList			1990986	1					
ANR	1991071	ExpressionStatement	buffer += tempBuf	637:2:13515:13532	1990986	5	True				
ANR	1991072	AssignmentExpression	buffer += tempBuf		1990986	0		+=			
ANR	1991073	Identifier	buffer		1990986	0					
ANR	1991074	Identifier	tempBuf		1990986	1					
ANR	1991075	ExpressionStatement	"buffer += ""}"""	638:2:13536:13549	1990986	6	True				
ANR	1991076	AssignmentExpression	"buffer += ""}"""		1990986	0		+=			
ANR	1991077	Identifier	buffer		1990986	0					
ANR	1991078	PrimaryExpression	"""}"""		1990986	1					
ANR	1991079	IfStatement	if ( source && target )		1990986	6					
ANR	1991080	Condition	source && target	640:5:13559:13574	1990986	0	True				
ANR	1991081	AndExpression	source && target		1990986	0		&&			
ANR	1991082	Identifier	source		1990986	0					
ANR	1991083	Identifier	target		1990986	1					
ANR	1991084	CompoundStatement		18:24:390:390	1990986	1					
ANR	1991085	ExpressionStatement	"buffer += "","""	641:2:13582:13595	1990986	0	True				
ANR	1991086	AssignmentExpression	"buffer += "","""		1990986	0		+=			
ANR	1991087	Identifier	buffer		1990986	0					
ANR	1991088	PrimaryExpression	""","""		1990986	1					
ANR	1991089	IfStatement	if ( target )		1990986	7					
ANR	1991090	Condition	target	643:5:13605:13610	1990986	0	True				
ANR	1991091	Identifier	target		1990986	0					
ANR	1991092	CompoundStatement		21:14:426:426	1990986	1					
ANR	1991093	ExpressionStatement	"buffer += ""target:{"""	644:2:13618:13638	1990986	0	True				
ANR	1991094	AssignmentExpression	"buffer += ""target:{"""		1990986	0		+=			
ANR	1991095	Identifier	buffer		1990986	0					
ANR	1991096	PrimaryExpression	"""target:{"""		1990986	1					
ANR	1991097	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , target -> GetAdNum ( ) )"	645:2:13642:13687	1990986	1	True				
ANR	1991098	CallExpression	"sprintf ( tempBuf , ""%d"" , target -> GetAdNum ( ) )"		1990986	0					
ANR	1991099	Callee	sprintf		1990986	0					
ANR	1991100	Identifier	sprintf		1990986	0					
ANR	1991101	ArgumentList	tempBuf		1990986	1					
ANR	1991102	Argument	tempBuf		1990986	0					
ANR	1991103	Identifier	tempBuf		1990986	0					
ANR	1991104	Argument	"""%d"""		1990986	1					
ANR	1991105	PrimaryExpression	"""%d"""		1990986	0					
ANR	1991106	Argument	target -> GetAdNum ( )		1990986	2					
ANR	1991107	CallExpression	target -> GetAdNum ( )		1990986	0					
ANR	1991108	Callee	target -> GetAdNum		1990986	0					
ANR	1991109	PtrMemberAccess	target -> GetAdNum		1990986	0					
ANR	1991110	Identifier	target		1990986	0					
ANR	1991111	Identifier	GetAdNum		1990986	1					
ANR	1991112	ArgumentList			1990986	1					
ANR	1991113	ExpressionStatement	buffer += tempBuf	646:2:13691:13708	1990986	2	True				
ANR	1991114	AssignmentExpression	buffer += tempBuf		1990986	0		+=			
ANR	1991115	Identifier	buffer		1990986	0					
ANR	1991116	Identifier	tempBuf		1990986	1					
ANR	1991117	ExpressionStatement	"buffer += "","""	647:2:13712:13725	1990986	3	True				
ANR	1991118	AssignmentExpression	"buffer += "","""		1990986	0		+=			
ANR	1991119	Identifier	buffer		1990986	0					
ANR	1991120	PrimaryExpression	""","""		1990986	1					
ANR	1991121	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , target -> GetPortNum ( ) )"	648:2:13729:13776	1990986	4	True				
ANR	1991122	CallExpression	"sprintf ( tempBuf , ""%d"" , target -> GetPortNum ( ) )"		1990986	0					
ANR	1991123	Callee	sprintf		1990986	0					
ANR	1991124	Identifier	sprintf		1990986	0					
ANR	1991125	ArgumentList	tempBuf		1990986	1					
ANR	1991126	Argument	tempBuf		1990986	0					
ANR	1991127	Identifier	tempBuf		1990986	0					
ANR	1991128	Argument	"""%d"""		1990986	1					
ANR	1991129	PrimaryExpression	"""%d"""		1990986	0					
ANR	1991130	Argument	target -> GetPortNum ( )		1990986	2					
ANR	1991131	CallExpression	target -> GetPortNum ( )		1990986	0					
ANR	1991132	Callee	target -> GetPortNum		1990986	0					
ANR	1991133	PtrMemberAccess	target -> GetPortNum		1990986	0					
ANR	1991134	Identifier	target		1990986	0					
ANR	1991135	Identifier	GetPortNum		1990986	1					
ANR	1991136	ArgumentList			1990986	1					
ANR	1991137	ExpressionStatement	buffer += tempBuf	649:2:13780:13797	1990986	5	True				
ANR	1991138	AssignmentExpression	buffer += tempBuf		1990986	0		+=			
ANR	1991139	Identifier	buffer		1990986	0					
ANR	1991140	Identifier	tempBuf		1990986	1					
ANR	1991141	ExpressionStatement	"buffer += ""}"""	650:2:13801:13814	1990986	6	True				
ANR	1991142	AssignmentExpression	"buffer += ""}"""		1990986	0		+=			
ANR	1991143	Identifier	buffer		1990986	0					
ANR	1991144	PrimaryExpression	"""}"""		1990986	1					
ANR	1991145	IfStatement	if ( ! annotations . empty ( ) )		1990986	8					
ANR	1991146	Condition	! annotations . empty ( )	652:5:13824:13844	1990986	0	True				
ANR	1991147	UnaryOperationExpression	! annotations . empty ( )		1990986	0					
ANR	1991148	UnaryOperator	!		1990986	0					
ANR	1991149	CallExpression	annotations . empty ( )		1990986	1					
ANR	1991150	Callee	annotations . empty		1990986	0					
ANR	1991151	MemberAccess	annotations . empty		1990986	0					
ANR	1991152	Identifier	annotations		1990986	0					
ANR	1991153	Identifier	empty		1990986	1					
ANR	1991154	ArgumentList			1990986	1					
ANR	1991155	CompoundStatement		31:2:664:699	1990986	1					
ANR	1991156	IdentifierDeclStatement	std :: vector < MatchPath * > :: iterator a ;	653:2:13852:13887	1990986	0	True				
ANR	1991157	IdentifierDecl	a		1990986	0					
ANR	1991158	IdentifierDeclType	std :: vector < MatchPath * > :: iterator		1990986	0					
ANR	1991159	Identifier	a		1990986	1					
ANR	1991160	ExpressionStatement	"buffer += ""annotations:{"""	654:2:13891:13916	1990986	1	True				
ANR	1991161	AssignmentExpression	"buffer += ""annotations:{"""		1990986	0		+=			
ANR	1991162	Identifier	buffer		1990986	0					
ANR	1991163	PrimaryExpression	"""annotations:{"""		1990986	1					
ANR	1991164	ForStatement	for ( a = annotations . begin ( ) ; a != annotations . end ( ) ; a ++ )		1990986	2					
ANR	1991165	ForInit	a = annotations . begin ( ) ;	655:7:13925:13949	1990986	0	True				
ANR	1991166	AssignmentExpression	a = annotations . begin ( )		1990986	0		=			
ANR	1991167	Identifier	a		1990986	0					
ANR	1991168	CallExpression	annotations . begin ( )		1990986	1					
ANR	1991169	Callee	annotations . begin		1990986	0					
ANR	1991170	MemberAccess	annotations . begin		1990986	0					
ANR	1991171	Identifier	annotations		1990986	0					
ANR	1991172	Identifier	begin		1990986	1					
ANR	1991173	ArgumentList			1990986	1					
ANR	1991174	Condition	a != annotations . end ( )	655:33:13951:13973	1990986	1	True				
ANR	1991175	EqualityExpression	a != annotations . end ( )		1990986	0		!=			
ANR	1991176	Identifier	a		1990986	0					
ANR	1991177	CallExpression	annotations . end ( )		1990986	1					
ANR	1991178	Callee	annotations . end		1990986	0					
ANR	1991179	MemberAccess	annotations . end		1990986	0					
ANR	1991180	Identifier	annotations		1990986	0					
ANR	1991181	Identifier	end		1990986	1					
ANR	1991182	ArgumentList			1990986	1					
ANR	1991183	PostIncDecOperationExpression	a ++	655:58:13976:13978	1990986	2	True				
ANR	1991184	Identifier	a		1990986	0					
ANR	1991185	IncDec	++		1990986	1					
ANR	1991186	CompoundStatement		33:64:794:794	1990986	3					
ANR	1991187	IfStatement	if ( a != annotations . begin ( ) )		1990986	0					
ANR	1991188	Condition	a != annotations . begin ( )	656:7:13991:14015	1990986	0	True				
ANR	1991189	EqualityExpression	a != annotations . begin ( )		1990986	0		!=			
ANR	1991190	Identifier	a		1990986	0					
ANR	1991191	CallExpression	annotations . begin ( )		1990986	1					
ANR	1991192	Callee	annotations . begin		1990986	0					
ANR	1991193	MemberAccess	annotations . begin		1990986	0					
ANR	1991194	Identifier	annotations		1990986	0					
ANR	1991195	Identifier	begin		1990986	1					
ANR	1991196	ArgumentList			1990986	1					
ANR	1991197	CompoundStatement		34:35:831:831	1990986	1					
ANR	1991198	ExpressionStatement	"buffer += "","""	657:4:14025:14038	1990986	0	True				
ANR	1991199	AssignmentExpression	"buffer += "","""		1990986	0		+=			
ANR	1991200	Identifier	buffer		1990986	0					
ANR	1991201	PrimaryExpression	""","""		1990986	1					
ANR	1991202	ExpressionStatement	( * a ) -> ToString ( buffer )	659:3:14048:14072	1990986	1	True				
ANR	1991203	CallExpression	( * a ) -> ToString ( buffer )		1990986	0					
ANR	1991204	Callee	( * a ) -> ToString		1990986	0					
ANR	1991205	PtrMemberAccess	( * a ) -> ToString		1990986	0					
ANR	1991206	UnaryOperationExpression	* a		1990986	0					
ANR	1991207	UnaryOperator	*		1990986	0					
ANR	1991208	Identifier	a		1990986	1					
ANR	1991209	Identifier	ToString		1990986	1					
ANR	1991210	ArgumentList	buffer		1990986	1					
ANR	1991211	Argument	buffer		1990986	0					
ANR	1991212	Identifier	buffer		1990986	0					
ANR	1991213	ExpressionStatement	"buffer += ""}"""	661:2:14080:14093	1990986	3	True				
ANR	1991214	AssignmentExpression	"buffer += ""}"""		1990986	0		+=			
ANR	1991215	Identifier	buffer		1990986	0					
ANR	1991216	PrimaryExpression	"""}"""		1990986	1					
ANR	1991217	ExpressionStatement	"buffer += ""]"""	663:1:14099:14112	1990986	9	True				
ANR	1991218	AssignmentExpression	"buffer += ""]"""		1990986	0		+=			
ANR	1991219	Identifier	buffer		1990986	0					
ANR	1991220	PrimaryExpression	"""]"""		1990986	1					
ANR	1991221	ReturnStatement	return true ;	664:1:14115:14126	1990986	10	True				
ANR	1991222	Identifier	true		1990986	0					
ANR	1991223	ReturnType	bool		1990986	1					
ANR	1991224	Identifier	MatchEdge :: ToString		1990986	2					
ANR	1991225	ParameterList	std :: string & buffer		1990986	3					
ANR	1991226	Parameter	std :: string & buffer	622:10:13165:13183	1990986	0	True				
ANR	1991227	ParameterType	std :: string &		1990986	0					
ANR	1991228	Identifier	buffer		1990986	1					
ANR	1991229	CFGEntryNode	ENTRY		1990986		True				
ANR	1991230	CFGExitNode	EXIT		1990986		True				
ANR	1991231	Symbol	a		1990986						
ANR	1991232	Symbol	source -> GetPortNum		1990986						
ANR	1991233	Symbol	target -> GetPortNum		1990986						
ANR	1991234	Symbol	annotations		1990986						
ANR	1991235	Symbol	source		1990986						
ANR	1991236	Symbol	* a		1990986						
ANR	1991237	Symbol	annotations . begin		1990986						
ANR	1991238	Symbol	target		1990986						
ANR	1991239	Symbol	* target		1990986						
ANR	1991240	Symbol	source -> GetAdNum		1990986						
ANR	1991241	Symbol	annotations . end		1990986						
ANR	1991242	Symbol	* source		1990986						
ANR	1991243	Symbol	true		1990986						
ANR	1991244	Symbol	buffer		1990986						
ANR	1991245	Symbol	annotations . empty		1990986						
ANR	1991246	Symbol	edgeNum		1990986						
ANR	1991247	Symbol	target -> GetAdNum		1990986						
ANR	1991248	Symbol	tempBuf		1990986						
ANR	1991249	Function	MatchPath :: MatchPath	668:0:14152:14179							
ANR	1991250	FunctionDef	MatchPath :: MatchPath ()		1991249	0					
ANR	1991251	CompoundStatement		670:0:14177:14179	1991249	0					
ANR	1991252	Identifier	MatchPath :: MatchPath		1991249	1					
ANR	1991253	ParameterList			1991249	2					
ANR	1991254	CFGEntryNode	ENTRY		1991249		True				
ANR	1991255	CFGExitNode	EXIT		1991249		True				
ANR	1991256	Function	MatchPath :: ~MatchPath	673:0:14182:14210							
ANR	1991257	FunctionDef	MatchPath :: ~MatchPath ()		1991256	0					
ANR	1991258	CompoundStatement		675:0:14208:14210	1991256	0					
ANR	1991259	Identifier	MatchPath :: ~MatchPath		1991256	1					
ANR	1991260	ParameterList			1991256	2					
ANR	1991261	CFGEntryNode	ENTRY		1991256		True				
ANR	1991262	CFGExitNode	EXIT		1991256		True				
ANR	1991263	Function	MatchPath :: AddMatchEdge	678:0:14213:14304							
ANR	1991264	FunctionDef	MatchPath :: AddMatchEdge (MatchEdge * edge)		1991263	0					
ANR	1991265	CompoundStatement		680:0:14262:14304	1991263	0					
ANR	1991266	ExpressionStatement	edges . push_back ( edge )	681:1:14265:14288	1991263	0	True				
ANR	1991267	CallExpression	edges . push_back ( edge )		1991263	0					
ANR	1991268	Callee	edges . push_back		1991263	0					
ANR	1991269	MemberAccess	edges . push_back		1991263	0					
ANR	1991270	Identifier	edges		1991263	0					
ANR	1991271	Identifier	push_back		1991263	1					
ANR	1991272	ArgumentList	edge		1991263	1					
ANR	1991273	Argument	edge		1991263	0					
ANR	1991274	Identifier	edge		1991263	0					
ANR	1991275	ReturnStatement	return true ;	682:1:14291:14302	1991263	1	True				
ANR	1991276	Identifier	true		1991263	0					
ANR	1991277	ReturnType	bool		1991263	1					
ANR	1991278	Identifier	MatchPath :: AddMatchEdge		1991263	2					
ANR	1991279	ParameterList	MatchEdge * edge		1991263	3					
ANR	1991280	Parameter	MatchEdge * edge	679:14:14244:14258	1991263	0	True				
ANR	1991281	ParameterType	MatchEdge *		1991263	0					
ANR	1991282	Identifier	edge		1991263	1					
ANR	1991283	CFGEntryNode	ENTRY		1991263		True				
ANR	1991284	CFGExitNode	EXIT		1991263		True				
ANR	1991285	Symbol	edge		1991263						
ANR	1991286	Symbol	edges		1991263						
ANR	1991287	Symbol	true		1991263						
ANR	1991288	Function	MatchPath :: Empty	685:0:14307:14359							
ANR	1991289	FunctionDef	MatchPath :: Empty ()		1991288	0					
ANR	1991290	CompoundStatement		687:0:14333:14359	1991288	0					
ANR	1991291	ReturnStatement	return edges . empty ( ) ;	688:1:14336:14357	1991288	0	True				
ANR	1991292	CallExpression	edges . empty ( )		1991288	0					
ANR	1991293	Callee	edges . empty		1991288	0					
ANR	1991294	MemberAccess	edges . empty		1991288	0					
ANR	1991295	Identifier	edges		1991288	0					
ANR	1991296	Identifier	empty		1991288	1					
ANR	1991297	ArgumentList			1991288	1					
ANR	1991298	ReturnType	bool		1991288	1					
ANR	1991299	Identifier	MatchPath :: Empty		1991288	2					
ANR	1991300	ParameterList			1991288	3					
ANR	1991301	CFGEntryNode	ENTRY		1991288		True				
ANR	1991302	CFGExitNode	EXIT		1991288		True				
ANR	1991303	Symbol	edges . empty		1991288						
ANR	1991304	Symbol	edges		1991288						
ANR	1991305	Function	MatchPath :: RemoveLastEdge	691:0:14362:14433							
ANR	1991306	FunctionDef	MatchPath :: RemoveLastEdge ()		1991305	0					
ANR	1991307	CompoundStatement		693:0:14397:14433	1991305	0					
ANR	1991308	ExpressionStatement	edges . pop_back ( )	694:1:14400:14417	1991305	0	True				
ANR	1991309	CallExpression	edges . pop_back ( )		1991305	0					
ANR	1991310	Callee	edges . pop_back		1991305	0					
ANR	1991311	MemberAccess	edges . pop_back		1991305	0					
ANR	1991312	Identifier	edges		1991305	0					
ANR	1991313	Identifier	pop_back		1991305	1					
ANR	1991314	ArgumentList			1991305	1					
ANR	1991315	ReturnStatement	return true ;	695:1:14420:14431	1991305	1	True				
ANR	1991316	Identifier	true		1991305	0					
ANR	1991317	ReturnType	bool		1991305	1					
ANR	1991318	Identifier	MatchPath :: RemoveLastEdge		1991305	2					
ANR	1991319	ParameterList			1991305	3					
ANR	1991320	CFGEntryNode	ENTRY		1991305		True				
ANR	1991321	CFGExitNode	EXIT		1991305		True				
ANR	1991322	Symbol	edges		1991305						
ANR	1991323	Symbol	true		1991305						
ANR	1991324	Function	MatchPath :: Copy	698:0:14436:14636							
ANR	1991325	FunctionDef	MatchPath :: Copy ()		1991324	0					
ANR	1991326	CompoundStatement		700:0:14467:14636	1991324	0					
ANR	1991327	IdentifierDeclStatement	MatchPath * mp = new MatchPath ( ) ;	701:1:14470:14502	1991324	0	True				
ANR	1991328	IdentifierDecl	* mp = new MatchPath ( )		1991324	0					
ANR	1991329	IdentifierDeclType	MatchPath *		1991324	0					
ANR	1991330	Identifier	mp		1991324	1					
ANR	1991331	AssignmentExpression	* mp = new MatchPath ( )		1991324	2		=			
ANR	1991332	Identifier	mp		1991324	0					
ANR	1991333	UnaryExpression	new MatchPath ( )		1991324	1					
ANR	1991334	IdentifierDeclStatement	std :: vector < MatchEdge * > :: iterator e ;	702:1:14505:14540	1991324	1	True				
ANR	1991335	IdentifierDecl	e		1991324	0					
ANR	1991336	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1991324	0					
ANR	1991337	Identifier	e		1991324	1					
ANR	1991338	ForStatement	for ( e = edges . begin ( ) ; e != edges . end ( ) ; e ++ )		1991324	2					
ANR	1991339	ForInit	e = edges . begin ( ) ;	703:6:14548:14566	1991324	0	True				
ANR	1991340	AssignmentExpression	e = edges . begin ( )		1991324	0		=			
ANR	1991341	Identifier	e		1991324	0					
ANR	1991342	CallExpression	edges . begin ( )		1991324	1					
ANR	1991343	Callee	edges . begin		1991324	0					
ANR	1991344	MemberAccess	edges . begin		1991324	0					
ANR	1991345	Identifier	edges		1991324	0					
ANR	1991346	Identifier	begin		1991324	1					
ANR	1991347	ArgumentList			1991324	1					
ANR	1991348	Condition	e != edges . end ( )	703:26:14568:14584	1991324	1	True				
ANR	1991349	EqualityExpression	e != edges . end ( )		1991324	0		!=			
ANR	1991350	Identifier	e		1991324	0					
ANR	1991351	CallExpression	edges . end ( )		1991324	1					
ANR	1991352	Callee	edges . end		1991324	0					
ANR	1991353	MemberAccess	edges . end		1991324	0					
ANR	1991354	Identifier	edges		1991324	0					
ANR	1991355	Identifier	end		1991324	1					
ANR	1991356	ArgumentList			1991324	1					
ANR	1991357	PostIncDecOperationExpression	e ++	703:45:14587:14589	1991324	2	True				
ANR	1991358	Identifier	e		1991324	0					
ANR	1991359	IncDec	++		1991324	1					
ANR	1991360	CompoundStatement		4:51:125:125	1991324	3					
ANR	1991361	ExpressionStatement	mp -> AddMatchEdge ( * e )	704:2:14597:14619	1991324	0	True				
ANR	1991362	CallExpression	mp -> AddMatchEdge ( * e )		1991324	0					
ANR	1991363	Callee	mp -> AddMatchEdge		1991324	0					
ANR	1991364	PtrMemberAccess	mp -> AddMatchEdge		1991324	0					
ANR	1991365	Identifier	mp		1991324	0					
ANR	1991366	Identifier	AddMatchEdge		1991324	1					
ANR	1991367	ArgumentList	* e		1991324	1					
ANR	1991368	Argument	* e		1991324	0					
ANR	1991369	UnaryOperationExpression	* e		1991324	0					
ANR	1991370	UnaryOperator	*		1991324	0					
ANR	1991371	Identifier	e		1991324	1					
ANR	1991372	ReturnStatement	return mp ;	706:1:14625:14634	1991324	3	True				
ANR	1991373	Identifier	mp		1991324	0					
ANR	1991374	ReturnType	MatchPath *		1991324	1					
ANR	1991375	Identifier	MatchPath :: Copy		1991324	2					
ANR	1991376	ParameterList			1991324	3					
ANR	1991377	CFGEntryNode	ENTRY		1991324		True				
ANR	1991378	CFGExitNode	EXIT		1991324		True				
ANR	1991379	Symbol	mp		1991324						
ANR	1991380	Symbol	e		1991324						
ANR	1991381	Symbol	edges . end		1991324						
ANR	1991382	Symbol	edges		1991324						
ANR	1991383	Symbol	edges . begin		1991324						
ANR	1991384	Symbol	* e		1991324						
ANR	1991385	Function	MatchPath :: SameAs	709:0:14639:14910							
ANR	1991386	FunctionDef	MatchPath :: SameAs (MatchPath * path)		1991385	0					
ANR	1991387	CompoundStatement		711:0:14682:14910	1991385	0					
ANR	1991388	IdentifierDeclStatement	"std :: vector < MatchEdge * > :: iterator e1 , e2 ;"	712:1:14685:14725	1991385	0	True				
ANR	1991389	IdentifierDecl	e1		1991385	0					
ANR	1991390	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1991385	0					
ANR	1991391	Identifier	e1		1991385	1					
ANR	1991392	IdentifierDecl	e2		1991385	1					
ANR	1991393	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1991385	0					
ANR	1991394	Identifier	e2		1991385	1					
ANR	1991395	ExpressionStatement	e2 = path -> edges . begin ( )	713:1:14728:14753	1991385	1	True				
ANR	1991396	AssignmentExpression	e2 = path -> edges . begin ( )		1991385	0		=			
ANR	1991397	Identifier	e2		1991385	0					
ANR	1991398	CallExpression	path -> edges . begin ( )		1991385	1					
ANR	1991399	Callee	path -> edges . begin		1991385	0					
ANR	1991400	MemberAccess	path -> edges . begin		1991385	0					
ANR	1991401	PtrMemberAccess	path -> edges		1991385	0					
ANR	1991402	Identifier	path		1991385	0					
ANR	1991403	Identifier	edges		1991385	1					
ANR	1991404	Identifier	begin		1991385	1					
ANR	1991405	ArgumentList			1991385	1					
ANR	1991406	ForStatement	for ( e1 = edges . begin ( ) ; e1 != edges . end ( ) ; e1 ++ )		1991385	2					
ANR	1991407	ForInit	e1 = edges . begin ( ) ;	714:6:14761:14780	1991385	0	True				
ANR	1991408	AssignmentExpression	e1 = edges . begin ( )		1991385	0		=			
ANR	1991409	Identifier	e1		1991385	0					
ANR	1991410	CallExpression	edges . begin ( )		1991385	1					
ANR	1991411	Callee	edges . begin		1991385	0					
ANR	1991412	MemberAccess	edges . begin		1991385	0					
ANR	1991413	Identifier	edges		1991385	0					
ANR	1991414	Identifier	begin		1991385	1					
ANR	1991415	ArgumentList			1991385	1					
ANR	1991416	Condition	e1 != edges . end ( )	714:27:14782:14799	1991385	1	True				
ANR	1991417	EqualityExpression	e1 != edges . end ( )		1991385	0		!=			
ANR	1991418	Identifier	e1		1991385	0					
ANR	1991419	CallExpression	edges . end ( )		1991385	1					
ANR	1991420	Callee	edges . end		1991385	0					
ANR	1991421	MemberAccess	edges . end		1991385	0					
ANR	1991422	Identifier	edges		1991385	0					
ANR	1991423	Identifier	end		1991385	1					
ANR	1991424	ArgumentList			1991385	1					
ANR	1991425	PostIncDecOperationExpression	e1 ++	714:47:14802:14805	1991385	2	True				
ANR	1991426	Identifier	e1		1991385	0					
ANR	1991427	IncDec	++		1991385	1					
ANR	1991428	CompoundStatement		4:54:126:126	1991385	3					
ANR	1991429	IfStatement	if ( e2 == path -> edges . end ( ) || ( * e1 ) != ( * e2 ) )		1991385	0					
ANR	1991430	Condition	e2 == path -> edges . end ( ) || ( * e1 ) != ( * e2 )	715:6:14817:14858	1991385	0	True				
ANR	1991431	OrExpression	e2 == path -> edges . end ( ) || ( * e1 ) != ( * e2 )		1991385	0		||			
ANR	1991432	EqualityExpression	e2 == path -> edges . end ( )		1991385	0		==			
ANR	1991433	Identifier	e2		1991385	0					
ANR	1991434	CallExpression	path -> edges . end ( )		1991385	1					
ANR	1991435	Callee	path -> edges . end		1991385	0					
ANR	1991436	MemberAccess	path -> edges . end		1991385	0					
ANR	1991437	PtrMemberAccess	path -> edges		1991385	0					
ANR	1991438	Identifier	path		1991385	0					
ANR	1991439	Identifier	edges		1991385	1					
ANR	1991440	Identifier	end		1991385	1					
ANR	1991441	ArgumentList			1991385	1					
ANR	1991442	EqualityExpression	( * e1 ) != ( * e2 )		1991385	1		!=			
ANR	1991443	UnaryOperationExpression	* e1		1991385	0					
ANR	1991444	UnaryOperator	*		1991385	0					
ANR	1991445	Identifier	e1		1991385	1					
ANR	1991446	UnaryOperationExpression	* e2		1991385	1					
ANR	1991447	UnaryOperator	*		1991385	0					
ANR	1991448	Identifier	e2		1991385	1					
ANR	1991449	CompoundStatement		5:51:179:179	1991385	1					
ANR	1991450	ReturnStatement	return false ;	716:3:14867:14879	1991385	0	True				
ANR	1991451	Identifier	false		1991385	0					
ANR	1991452	ExpressionStatement	e2 ++	718:2:14887:14891	1991385	1	True				
ANR	1991453	PostIncDecOperationExpression	e2 ++		1991385	0					
ANR	1991454	Identifier	e2		1991385	0					
ANR	1991455	IncDec	++		1991385	1					
ANR	1991456	ReturnStatement	return true ;	720:1:14897:14908	1991385	3	True				
ANR	1991457	Identifier	true		1991385	0					
ANR	1991458	ReturnType	bool		1991385	1					
ANR	1991459	Identifier	MatchPath :: SameAs		1991385	2					
ANR	1991460	ParameterList	MatchPath * path		1991385	3					
ANR	1991461	Parameter	MatchPath * path	710:8:14664:14678	1991385	0	True				
ANR	1991462	ParameterType	MatchPath *		1991385	0					
ANR	1991463	Identifier	path		1991385	1					
ANR	1991464	CFGEntryNode	ENTRY		1991385		True				
ANR	1991465	CFGExitNode	EXIT		1991385		True				
ANR	1991466	Symbol	edges		1991385						
ANR	1991467	Symbol	edges . begin		1991385						
ANR	1991468	Symbol	false		1991385						
ANR	1991469	Symbol	e1		1991385						
ANR	1991470	Symbol	e2		1991385						
ANR	1991471	Symbol	path -> edges . begin		1991385						
ANR	1991472	Symbol	* e2		1991385						
ANR	1991473	Symbol	path		1991385						
ANR	1991474	Symbol	* e1		1991385						
ANR	1991475	Symbol	path -> edges		1991385						
ANR	1991476	Symbol	edges . end		1991385						
ANR	1991477	Symbol	true		1991385						
ANR	1991478	Symbol	* path		1991385						
ANR	1991479	Symbol	path -> edges . end		1991385						
ANR	1991480	Function	MatchPath :: GetNumEdges	723:0:14913:14978							
ANR	1991481	FunctionDef	MatchPath :: GetNumEdges ()		1991480	0					
ANR	1991482	CompoundStatement		725:0:14953:14978	1991480	0					
ANR	1991483	ReturnStatement	return edges . size ( ) ;	726:1:14956:14976	1991480	0	True				
ANR	1991484	CallExpression	edges . size ( )		1991480	0					
ANR	1991485	Callee	edges . size		1991480	0					
ANR	1991486	MemberAccess	edges . size		1991480	0					
ANR	1991487	Identifier	edges		1991480	0					
ANR	1991488	Identifier	size		1991480	1					
ANR	1991489	ArgumentList			1991480	1					
ANR	1991490	ReturnType	unsigned int		1991480	1					
ANR	1991491	Identifier	MatchPath :: GetNumEdges		1991480	2					
ANR	1991492	ParameterList			1991480	3					
ANR	1991493	CFGEntryNode	ENTRY		1991480		True				
ANR	1991494	CFGExitNode	EXIT		1991480		True				
ANR	1991495	Symbol	edges . size		1991480						
ANR	1991496	Symbol	edges		1991480						
ANR	1991497	Function	MatchPath :: GetMatchEdge	729:0:14981:15112							
ANR	1991498	FunctionDef	MatchPath :: GetMatchEdge (unsigned int i)		1991497	0					
ANR	1991499	CompoundStatement		731:0:15035:15112	1991497	0					
ANR	1991500	IfStatement	if ( i < edges . size ( ) )		1991497	0					
ANR	1991501	Condition	i < edges . size ( )	732:5:15042:15058	1991497	0	True				
ANR	1991502	RelationalExpression	i < edges . size ( )		1991497	0		<			
ANR	1991503	Identifier	i		1991497	0					
ANR	1991504	CallExpression	edges . size ( )		1991497	1					
ANR	1991505	Callee	edges . size		1991497	0					
ANR	1991506	MemberAccess	edges . size		1991497	0					
ANR	1991507	Identifier	edges		1991497	0					
ANR	1991508	Identifier	size		1991497	1					
ANR	1991509	ArgumentList			1991497	1					
ANR	1991510	CompoundStatement		2:25:26:26	1991497	1					
ANR	1991511	ReturnStatement	return edges [ i ] ;	733:2:15066:15081	1991497	0	True				
ANR	1991512	ArrayIndexing	edges [ i ]		1991497	0					
ANR	1991513	Identifier	edges		1991497	0					
ANR	1991514	Identifier	i		1991497	1					
ANR	1991515	ElseStatement	else		1991497	0					
ANR	1991516	CompoundStatement		5:6:56:56	1991497	0					
ANR	1991517	ReturnStatement	return NULL ;	736:2:15096:15107	1991497	0	True				
ANR	1991518	Identifier	NULL		1991497	0					
ANR	1991519	ReturnType	MatchEdge *		1991497	1					
ANR	1991520	Identifier	MatchPath :: GetMatchEdge		1991497	2					
ANR	1991521	ParameterList	unsigned int i		1991497	3					
ANR	1991522	Parameter	unsigned int i	730:14:15018:15031	1991497	0	True				
ANR	1991523	ParameterType	unsigned int		1991497	0					
ANR	1991524	Identifier	i		1991497	1					
ANR	1991525	CFGEntryNode	ENTRY		1991497		True				
ANR	1991526	CFGExitNode	EXIT		1991497		True				
ANR	1991527	Symbol	edges . size		1991497						
ANR	1991528	Symbol	* i		1991497						
ANR	1991529	Symbol	NULL		1991497						
ANR	1991530	Symbol	edges		1991497						
ANR	1991531	Symbol	i		1991497						
ANR	1991532	Symbol	* edges		1991497						
ANR	1991533	Function	MatchPath :: ToString	740:0:15115:15450							
ANR	1991534	FunctionDef	MatchPath :: ToString (std :: string & buffer)		1991533	0					
ANR	1991535	CompoundStatement		742:0:15164:15450	1991533	0					
ANR	1991536	IdentifierDeclStatement	char tempBuf [ 512 ] ;	743:1:15167:15184	1991533	0	True				
ANR	1991537	IdentifierDecl	tempBuf [ 512 ]		1991533	0					
ANR	1991538	IdentifierDeclType	char [ 512 ]		1991533	0					
ANR	1991539	Identifier	tempBuf		1991533	1					
ANR	1991540	PrimaryExpression	512		1991533	2					
ANR	1991541	ExpressionStatement	"buffer += ""{"""	744:1:15187:15200	1991533	1	True				
ANR	1991542	AssignmentExpression	"buffer += ""{"""		1991533	0		+=			
ANR	1991543	Identifier	buffer		1991533	0					
ANR	1991544	PrimaryExpression	"""{"""		1991533	1					
ANR	1991545	IdentifierDeclStatement	std :: vector < MatchEdge * > :: iterator e ;	745:1:15203:15238	1991533	2	True				
ANR	1991546	IdentifierDecl	e		1991533	0					
ANR	1991547	IdentifierDeclType	std :: vector < MatchEdge * > :: iterator		1991533	0					
ANR	1991548	Identifier	e		1991533	1					
ANR	1991549	ForStatement	for ( e = edges . begin ( ) ; e != edges . end ( ) ; e ++ )		1991533	3					
ANR	1991550	ForInit	e = edges . begin ( ) ;	746:6:15246:15264	1991533	0	True				
ANR	1991551	AssignmentExpression	e = edges . begin ( )		1991533	0		=			
ANR	1991552	Identifier	e		1991533	0					
ANR	1991553	CallExpression	edges . begin ( )		1991533	1					
ANR	1991554	Callee	edges . begin		1991533	0					
ANR	1991555	MemberAccess	edges . begin		1991533	0					
ANR	1991556	Identifier	edges		1991533	0					
ANR	1991557	Identifier	begin		1991533	1					
ANR	1991558	ArgumentList			1991533	1					
ANR	1991559	Condition	e != edges . end ( )	746:26:15266:15282	1991533	1	True				
ANR	1991560	EqualityExpression	e != edges . end ( )		1991533	0		!=			
ANR	1991561	Identifier	e		1991533	0					
ANR	1991562	CallExpression	edges . end ( )		1991533	1					
ANR	1991563	Callee	edges . end		1991533	0					
ANR	1991564	MemberAccess	edges . end		1991533	0					
ANR	1991565	Identifier	edges		1991533	0					
ANR	1991566	Identifier	end		1991533	1					
ANR	1991567	ArgumentList			1991533	1					
ANR	1991568	PostIncDecOperationExpression	e ++	746:45:15285:15287	1991533	2	True				
ANR	1991569	Identifier	e		1991533	0					
ANR	1991570	IncDec	++		1991533	1					
ANR	1991571	CompoundStatement		5:51:126:126	1991533	3					
ANR	1991572	IfStatement	if ( e != edges . begin ( ) )		1991533	0					
ANR	1991573	Condition	e != edges . begin ( )	747:6:15299:15317	1991533	0	True				
ANR	1991574	EqualityExpression	e != edges . begin ( )		1991533	0		!=			
ANR	1991575	Identifier	e		1991533	0					
ANR	1991576	CallExpression	edges . begin ( )		1991533	1					
ANR	1991577	Callee	edges . begin		1991533	0					
ANR	1991578	MemberAccess	edges . begin		1991533	0					
ANR	1991579	Identifier	edges		1991533	0					
ANR	1991580	Identifier	begin		1991533	1					
ANR	1991581	ArgumentList			1991533	1					
ANR	1991582	CompoundStatement		6:28:156:156	1991533	1					
ANR	1991583	ExpressionStatement	"buffer += "","""	748:3:15326:15339	1991533	0	True				
ANR	1991584	AssignmentExpression	"buffer += "","""		1991533	0		+=			
ANR	1991585	Identifier	buffer		1991533	0					
ANR	1991586	PrimaryExpression	""","""		1991533	1					
ANR	1991587	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , ( * e ) -> GetEdgeNum ( ) )"	750:2:15347:15392	1991533	1	True				
ANR	1991588	CallExpression	"sprintf ( tempBuf , ""%d"" , ( * e ) -> GetEdgeNum ( ) )"		1991533	0					
ANR	1991589	Callee	sprintf		1991533	0					
ANR	1991590	Identifier	sprintf		1991533	0					
ANR	1991591	ArgumentList	tempBuf		1991533	1					
ANR	1991592	Argument	tempBuf		1991533	0					
ANR	1991593	Identifier	tempBuf		1991533	0					
ANR	1991594	Argument	"""%d"""		1991533	1					
ANR	1991595	PrimaryExpression	"""%d"""		1991533	0					
ANR	1991596	Argument	( * e ) -> GetEdgeNum ( )		1991533	2					
ANR	1991597	CallExpression	( * e ) -> GetEdgeNum ( )		1991533	0					
ANR	1991598	Callee	( * e ) -> GetEdgeNum		1991533	0					
ANR	1991599	PtrMemberAccess	( * e ) -> GetEdgeNum		1991533	0					
ANR	1991600	UnaryOperationExpression	* e		1991533	0					
ANR	1991601	UnaryOperator	*		1991533	0					
ANR	1991602	Identifier	e		1991533	1					
ANR	1991603	Identifier	GetEdgeNum		1991533	1					
ANR	1991604	ArgumentList			1991533	1					
ANR	1991605	ExpressionStatement	buffer += tempBuf	751:2:15396:15413	1991533	2	True				
ANR	1991606	AssignmentExpression	buffer += tempBuf		1991533	0		+=			
ANR	1991607	Identifier	buffer		1991533	0					
ANR	1991608	Identifier	tempBuf		1991533	1					
ANR	1991609	ExpressionStatement	"buffer += ""}"""	753:1:15421:15434	1991533	4	True				
ANR	1991610	AssignmentExpression	"buffer += ""}"""		1991533	0		+=			
ANR	1991611	Identifier	buffer		1991533	0					
ANR	1991612	PrimaryExpression	"""}"""		1991533	1					
ANR	1991613	ReturnStatement	return true ;	754:1:15437:15448	1991533	5	True				
ANR	1991614	Identifier	true		1991533	0					
ANR	1991615	ReturnType	bool		1991533	1					
ANR	1991616	Identifier	MatchPath :: ToString		1991533	2					
ANR	1991617	ParameterList	std :: string & buffer		1991533	3					
ANR	1991618	Parameter	std :: string & buffer	741:10:15142:15160	1991533	0	True				
ANR	1991619	ParameterType	std :: string &		1991533	0					
ANR	1991620	Identifier	buffer		1991533	1					
ANR	1991621	CFGEntryNode	ENTRY		1991533		True				
ANR	1991622	CFGExitNode	EXIT		1991533		True				
ANR	1991623	Symbol	e		1991533						
ANR	1991624	Symbol	edges . end		1991533						
ANR	1991625	Symbol	( * e ) -> GetEdgeNum		1991533						
ANR	1991626	Symbol	* * e		1991533						
ANR	1991627	Symbol	edges		1991533						
ANR	1991628	Symbol	edges . begin		1991533						
ANR	1991629	Symbol	true		1991533						
ANR	1991630	Symbol	buffer		1991533						
ANR	1991631	Symbol	tempBuf		1991533						
ANR	1991632	Symbol	* e		1991533						
ANR	1991633	Function	PortGraph :: PortGraph	758:0:15474:15543							
ANR	1991634	FunctionDef	PortGraph :: PortGraph ()		1991633	0					
ANR	1991635	CompoundStatement		760:0:15499:15543	1991633	0					
ANR	1991636	ExpressionStatement	nextMatchEdgeNum = 0	761:1:15502:15522	1991633	0	True				
ANR	1991637	AssignmentExpression	nextMatchEdgeNum = 0		1991633	0		=			
ANR	1991638	Identifier	nextMatchEdgeNum		1991633	0					
ANR	1991639	PrimaryExpression	0		1991633	1					
ANR	1991640	ExpressionStatement	numPortNodes = 0	762:1:15525:15541	1991633	1	True				
ANR	1991641	AssignmentExpression	numPortNodes = 0		1991633	0		=			
ANR	1991642	Identifier	numPortNodes		1991633	0					
ANR	1991643	PrimaryExpression	0		1991633	1					
ANR	1991644	Identifier	PortGraph :: PortGraph		1991633	1					
ANR	1991645	ParameterList			1991633	2					
ANR	1991646	CFGEntryNode	ENTRY		1991633		True				
ANR	1991647	CFGExitNode	EXIT		1991633		True				
ANR	1991648	Symbol	numPortNodes		1991633						
ANR	1991649	Symbol	nextMatchEdgeNum		1991633						
ANR	1991650	Function	PortGraph :: ~PortGraph	765:0:15546:15669							
ANR	1991651	FunctionDef	PortGraph :: ~PortGraph ()		1991650	0					
ANR	1991652	CompoundStatement		767:0:15572:15669	1991650	0					
ANR	1991653	Identifier	PortGraph :: ~PortGraph		1991650	1					
ANR	1991654	ParameterList			1991650	2					
ANR	1991655	CFGEntryNode	ENTRY		1991650		True				
ANR	1991656	CFGExitNode	EXIT		1991650		True				
ANR	1991657	Function	PortGraph :: Initialize	774:0:15724:21779							
ANR	1991658	FunctionDef	PortGraph :: Initialize (std :: vector < classad :: ClassAd * > & ads)		1991657	0					
ANR	1991659	CompoundStatement		776:0:15791:21779	1991657	0					
ANR	1991660	IdentifierDeclStatement	int adNum = 0 ;	777:1:15794:15836	1991657	0	True				
ANR	1991661	IdentifierDecl	adNum = 0		1991657	0					
ANR	1991662	IdentifierDeclType	int		1991657	0					
ANR	1991663	Identifier	adNum		1991657	1					
ANR	1991664	AssignmentExpression	adNum = 0		1991657	2		=			
ANR	1991665	Identifier	adNum		1991657	0					
ANR	1991666	PrimaryExpression	0		1991657	1					
ANR	1991667	IdentifierDeclStatement	int portNum = 0 ;	778:1:15839:15883	1991657	1	True				
ANR	1991668	IdentifierDecl	portNum = 0		1991657	0					
ANR	1991669	IdentifierDeclType	int		1991657	0					
ANR	1991670	Identifier	portNum		1991657	1					
ANR	1991671	AssignmentExpression	portNum = 0		1991657	2		=			
ANR	1991672	Identifier	portNum		1991657	0					
ANR	1991673	PrimaryExpression	0		1991657	1					
ANR	1991674	IdentifierDeclStatement	bool attrIsRequirements = false ;	779:1:15886:15945	1991657	2	True				
ANR	1991675	IdentifierDecl	attrIsRequirements = false		1991657	0					
ANR	1991676	IdentifierDeclType	bool		1991657	0					
ANR	1991677	Identifier	attrIsRequirements		1991657	1					
ANR	1991678	AssignmentExpression	attrIsRequirements = false		1991657	2		=			
ANR	1991679	Identifier	false		1991657	0					
ANR	1991680	Identifier	false		1991657	1					
ANR	1991681	IdentifierDeclStatement	std :: string attr ;	780:1:15948:15985	1991657	3	True				
ANR	1991682	IdentifierDecl	attr		1991657	0					
ANR	1991683	IdentifierDeclType	std :: string		1991657	0					
ANR	1991684	Identifier	attr		1991657	1					
ANR	1991685	IdentifierDeclStatement	std :: string label ;	781:1:15988:16026	1991657	4	True				
ANR	1991686	IdentifierDecl	label		1991657	0					
ANR	1991687	IdentifierDeclType	std :: string		1991657	0					
ANR	1991688	Identifier	label		1991657	1					
ANR	1991689	IdentifierDeclStatement	std :: string rLabel ;	782:1:16029:16068	1991657	5	True				
ANR	1991690	IdentifierDecl	rLabel		1991657	0					
ANR	1991691	IdentifierDeclType	std :: string		1991657	0					
ANR	1991692	Identifier	rLabel		1991657	1					
ANR	1991693	IdentifierDeclStatement	std :: string rAttr ;	783:1:16071:16109	1991657	6	True				
ANR	1991694	IdentifierDecl	rAttr		1991657	0					
ANR	1991695	IdentifierDeclType	std :: string		1991657	0					
ANR	1991696	Identifier	rAttr		1991657	1					
ANR	1991697	IdentifierDeclStatement	const classad :: ExprTree * expr ;	784:4:16115:16153	1991657	7	True				
ANR	1991698	IdentifierDecl	* expr		1991657	0					
ANR	1991699	IdentifierDeclType	const classad :: ExprTree *		1991657	0					
ANR	1991700	Identifier	expr		1991657	1					
ANR	1991701	IdentifierDeclStatement	classad :: ExprTree * flatExpr ;	785:4:16159:16201	1991657	8	True				
ANR	1991702	IdentifierDecl	* flatExpr		1991657	0					
ANR	1991703	IdentifierDeclType	classad :: ExprTree *		1991657	0					
ANR	1991704	Identifier	flatExpr		1991657	1					
ANR	1991705	IdentifierDeclStatement	classad :: ExprTree * reqExpr ;	786:1:16204:16245	1991657	9	True				
ANR	1991706	IdentifierDecl	* reqExpr		1991657	0					
ANR	1991707	IdentifierDeclType	classad :: ExprTree *		1991657	0					
ANR	1991708	Identifier	reqExpr		1991657	1					
ANR	1991709	IdentifierDeclStatement	const classad :: ExprList * el ;	787:4:16251:16287	1991657	10	True				
ANR	1991710	IdentifierDecl	* el		1991657	0					
ANR	1991711	IdentifierDeclType	const classad :: ExprList *		1991657	0					
ANR	1991712	Identifier	el		1991657	1					
ANR	1991713	IdentifierDeclStatement	classad :: References refs ;	788:1:16290:16327	1991657	11	True				
ANR	1991714	IdentifierDecl	refs		1991657	0					
ANR	1991715	IdentifierDeclType	classad :: References		1991657	0					
ANR	1991716	Identifier	refs		1991657	1					
ANR	1991717	IdentifierDeclStatement	classad :: ClassAd * ad ;	789:1:16330:16354	1991657	12	True				
ANR	1991718	IdentifierDecl	* ad		1991657	0					
ANR	1991719	IdentifierDeclType	classad :: ClassAd *		1991657	0					
ANR	1991720	Identifier	ad		1991657	1					
ANR	1991721	IdentifierDeclStatement	classad :: ClassAd * portAd ;	790:4:16360:16400	1991657	13	True				
ANR	1991722	IdentifierDecl	* portAd		1991657	0					
ANR	1991723	IdentifierDeclType	classad :: ClassAd *		1991657	0					
ANR	1991724	Identifier	portAd		1991657	1					
ANR	1991725	IdentifierDeclStatement	classad :: Value val ;	791:1:16403:16439	1991657	14	True				
ANR	1991726	IdentifierDecl	val		1991657	0					
ANR	1991727	IdentifierDeclType	classad :: Value		1991657	0					
ANR	1991728	Identifier	val		1991657	1					
ANR	1991729	IdentifierDeclStatement	classad :: References :: iterator r ;	792:4:16445:16479	1991657	15	True				
ANR	1991730	IdentifierDecl	r		1991657	0					
ANR	1991731	IdentifierDeclType	classad :: References :: iterator		1991657	0					
ANR	1991732	Identifier	r		1991657	1					
ANR	1991733	IdentifierDeclStatement	classad :: ExprListIterator l ;	793:4:16485:16519	1991657	16	True				
ANR	1991734	IdentifierDecl	l		1991657	0					
ANR	1991735	IdentifierDeclType	classad :: ExprListIterator		1991657	0					
ANR	1991736	Identifier	l		1991657	1					
ANR	1991737	IdentifierDeclStatement	classad :: ClassAdIterator c ;	794:1:16522:16556	1991657	17	True				
ANR	1991738	IdentifierDecl	c		1991657	0					
ANR	1991739	IdentifierDeclType	classad :: ClassAdIterator		1991657	0					
ANR	1991740	Identifier	c		1991657	1					
ANR	1991741	IdentifierDeclStatement	std :: vector < classad :: ClassAd * > :: iterator a ;	795:1:16559:16602	1991657	18	True				
ANR	1991742	IdentifierDecl	a		1991657	0					
ANR	1991743	IdentifierDeclType	std :: vector < classad :: ClassAd * > :: iterator		1991657	0					
ANR	1991744	Identifier	a		1991657	1					
ANR	1991745	IdentifierDeclStatement	PortNodeMap pNodes ;	796:1:16605:16644	1991657	19	True				
ANR	1991746	IdentifierDecl	pNodes		1991657	0					
ANR	1991747	IdentifierDeclType	PortNodeMap		1991657	0					
ANR	1991748	Identifier	pNodes		1991657	1					
ANR	1991749	IdentifierDeclStatement	PortNode * pNode ;	797:1:16647:16686	1991657	20	True				
ANR	1991750	IdentifierDecl	* pNode		1991657	0					
ANR	1991751	IdentifierDeclType	PortNode *		1991657	0					
ANR	1991752	Identifier	pNode		1991657	1					
ANR	1991753	IdentifierDeclStatement	PortNode * rPortNode ;	798:1:16689:16732	1991657	21	True				
ANR	1991754	IdentifierDecl	* rPortNode		1991657	0					
ANR	1991755	IdentifierDeclType	PortNode *		1991657	0					
ANR	1991756	Identifier	rPortNode		1991657	1					
ANR	1991757	IdentifierDeclStatement	ExtAttrNode * eNode ;	799:1:16735:16774	1991657	22	True				
ANR	1991758	IdentifierDecl	* eNode		1991657	0					
ANR	1991759	IdentifierDeclType	ExtAttrNode *		1991657	0					
ANR	1991760	Identifier	eNode		1991657	1					
ANR	1991761	IdentifierDeclStatement	MultiProfile * requirements ;	800:1:16777:16823	1991657	23	True				
ANR	1991762	IdentifierDecl	* requirements		1991657	0					
ANR	1991763	IdentifierDeclType	MultiProfile *		1991657	0					
ANR	1991764	Identifier	requirements		1991657	1					
ANR	1991765	IdentifierDeclStatement	Profile * profile = NULL ;	801:1:16826:16874	1991657	24	True				
ANR	1991766	IdentifierDecl	* profile = NULL		1991657	0					
ANR	1991767	IdentifierDeclType	Profile *		1991657	0					
ANR	1991768	Identifier	profile		1991657	1					
ANR	1991769	AssignmentExpression	* profile = NULL		1991657	2		=			
ANR	1991770	Identifier	NULL		1991657	0					
ANR	1991771	Identifier	NULL		1991657	1					
ANR	1991772	IdentifierDeclStatement	classad :: PrettyPrint pp ;	802:1:16877:16912	1991657	25	True				
ANR	1991773	IdentifierDecl	pp		1991657	0					
ANR	1991774	IdentifierDeclType	classad :: PrettyPrint		1991657	0					
ANR	1991775	Identifier	pp		1991657	1					
ANR	1991776	IdentifierDeclStatement	std :: string buffer ;	803:1:16915:16954	1991657	26	True				
ANR	1991777	IdentifierDecl	buffer		1991657	0					
ANR	1991778	IdentifierDeclType	std :: string		1991657	0					
ANR	1991779	Identifier	buffer		1991657	1					
ANR	1991780	IdentifierDeclStatement	unsigned int clauseNum ;	804:1:16957:16999	1991657	27	True				
ANR	1991781	IdentifierDecl	clauseNum		1991657	0					
ANR	1991782	IdentifierDeclType	unsigned int		1991657	0					
ANR	1991783	Identifier	clauseNum		1991657	1					
ANR	1991784	ForStatement	for ( a = ads . begin ( ) ; a != ads . end ( ) ; a ++ )		1991657	28					
ANR	1991785	ForInit	a = ads . begin ( ) ;	807:6:17032:17048	1991657	0	True				
ANR	1991786	AssignmentExpression	a = ads . begin ( )		1991657	0		=			
ANR	1991787	Identifier	a		1991657	0					
ANR	1991788	CallExpression	ads . begin ( )		1991657	1					
ANR	1991789	Callee	ads . begin		1991657	0					
ANR	1991790	MemberAccess	ads . begin		1991657	0					
ANR	1991791	Identifier	ads		1991657	0					
ANR	1991792	Identifier	begin		1991657	1					
ANR	1991793	ArgumentList			1991657	1					
ANR	1991794	Condition	a != ads . end ( )	807:25:17051:17065	1991657	1	True				
ANR	1991795	EqualityExpression	a != ads . end ( )		1991657	0		!=			
ANR	1991796	Identifier	a		1991657	0					
ANR	1991797	CallExpression	ads . end ( )		1991657	1					
ANR	1991798	Callee	ads . end		1991657	0					
ANR	1991799	MemberAccess	ads . end		1991657	0					
ANR	1991800	Identifier	ads		1991657	0					
ANR	1991801	Identifier	end		1991657	1					
ANR	1991802	ArgumentList			1991657	1					
ANR	1991803	PostIncDecOperationExpression	a ++	807:42:17068:17070	1991657	2	True				
ANR	1991804	Identifier	a		1991657	0					
ANR	1991805	IncDec	++		1991657	1					
ANR	1991806	CompoundStatement		32:48:1282:1282	1991657	3					
ANR	1991807	ExpressionStatement	ad = * a	808:2:17078:17085	1991657	0	True				
ANR	1991808	AssignmentExpression	ad = * a		1991657	0		=			
ANR	1991809	Identifier	ad		1991657	0					
ANR	1991810	UnaryOperationExpression	* a		1991657	1					
ANR	1991811	UnaryOperator	*		1991657	0					
ANR	1991812	Identifier	a		1991657	1					
ANR	1991813	IfStatement	"if ( ! ad -> EvaluateAttr ( ""Ports"" , val ) )"		1991657	1					
ANR	1991814	Condition	"! ad -> EvaluateAttr ( ""Ports"" , val )"	811:6:17151:17183	1991657	0	True				
ANR	1991815	UnaryOperationExpression	"! ad -> EvaluateAttr ( ""Ports"" , val )"		1991657	0					
ANR	1991816	UnaryOperator	!		1991657	0					
ANR	1991817	CallExpression	"ad -> EvaluateAttr ( ""Ports"" , val )"		1991657	1					
ANR	1991818	Callee	ad -> EvaluateAttr		1991657	0					
ANR	1991819	PtrMemberAccess	ad -> EvaluateAttr		1991657	0					
ANR	1991820	Identifier	ad		1991657	0					
ANR	1991821	Identifier	EvaluateAttr		1991657	1					
ANR	1991822	ArgumentList	"""Ports"""		1991657	1					
ANR	1991823	Argument	"""Ports"""		1991657	0					
ANR	1991824	PrimaryExpression	"""Ports"""		1991657	0					
ANR	1991825	Argument	val		1991657	1					
ANR	1991826	Identifier	val		1991657	0					
ANR	1991827	CompoundStatement		36:42:1395:1395	1991657	1					
ANR	1991828	ExpressionStatement	"cout << ""error: Failed to get 'Ports' attribute"" << endl"	812:3:17192:17248	1991657	0	True				
ANR	1991829	ShiftExpression	"cout << ""error: Failed to get 'Ports' attribute"" << endl"		1991657	0		<<			
ANR	1991830	Identifier	cout		1991657	0					
ANR	1991831	ShiftExpression	"""error: Failed to get 'Ports' attribute"" << endl"		1991657	1		<<			
ANR	1991832	PrimaryExpression	"""error: Failed to get 'Ports' attribute"""		1991657	0					
ANR	1991833	Identifier	endl		1991657	1					
ANR	1991834	ReturnStatement	return false ;	813:3:17253:17265	1991657	1	True				
ANR	1991835	Identifier	false		1991657	0					
ANR	1991836	IfStatement	if ( ! val . IsListValue ( el ) )		1991657	2					
ANR	1991837	Condition	! val . IsListValue ( el )	815:6:17277:17298	1991657	0	True				
ANR	1991838	UnaryOperationExpression	! val . IsListValue ( el )		1991657	0					
ANR	1991839	UnaryOperator	!		1991657	0					
ANR	1991840	CallExpression	val . IsListValue ( el )		1991657	1					
ANR	1991841	Callee	val . IsListValue		1991657	0					
ANR	1991842	MemberAccess	val . IsListValue		1991657	0					
ANR	1991843	Identifier	val		1991657	0					
ANR	1991844	Identifier	IsListValue		1991657	1					
ANR	1991845	ArgumentList	el		1991657	1					
ANR	1991846	Argument	el		1991657	0					
ANR	1991847	Identifier	el		1991657	0					
ANR	1991848	CompoundStatement		40:31:1510:1510	1991657	1					
ANR	1991849	ExpressionStatement	"cout << ""error: 'Ports' attribute not a list"" << endl"	816:3:17307:17360	1991657	0	True				
ANR	1991850	ShiftExpression	"cout << ""error: 'Ports' attribute not a list"" << endl"		1991657	0		<<			
ANR	1991851	Identifier	cout		1991657	0					
ANR	1991852	ShiftExpression	"""error: 'Ports' attribute not a list"" << endl"		1991657	1		<<			
ANR	1991853	PrimaryExpression	"""error: 'Ports' attribute not a list"""		1991657	0					
ANR	1991854	Identifier	endl		1991657	1					
ANR	1991855	ReturnStatement	return false ;	817:3:17365:17377	1991657	1	True				
ANR	1991856	Identifier	false		1991657	0					
ANR	1991857	ForStatement	for ( l . Initialize ( el ) ; ! l . IsAfterLast ( ) ; l . NextExpr ( ) )		1991657	3					
ANR	1991858	ForInit	l . Initialize ( el ) ;	821:7:17419:17438	1991657	0	True				
ANR	1991859	CallExpression	l . Initialize ( el )		1991657	0					
ANR	1991860	Callee	l . Initialize		1991657	0					
ANR	1991861	MemberAccess	l . Initialize		1991657	0					
ANR	1991862	Identifier	l		1991657	0					
ANR	1991863	Identifier	Initialize		1991657	1					
ANR	1991864	ArgumentList	el		1991657	1					
ANR	1991865	Argument	el		1991657	0					
ANR	1991866	Identifier	el		1991657	0					
ANR	1991867	Condition	! l . IsAfterLast ( )	821:28:17440:17456	1991657	1	True				
ANR	1991868	UnaryOperationExpression	! l . IsAfterLast ( )		1991657	0					
ANR	1991869	UnaryOperator	!		1991657	0					
ANR	1991870	CallExpression	l . IsAfterLast ( )		1991657	1					
ANR	1991871	Callee	l . IsAfterLast		1991657	0					
ANR	1991872	MemberAccess	l . IsAfterLast		1991657	0					
ANR	1991873	Identifier	l		1991657	0					
ANR	1991874	Identifier	IsAfterLast		1991657	1					
ANR	1991875	ArgumentList			1991657	1					
ANR	1991876	CallExpression	l . NextExpr ( )	821:47:17459:17471	1991657	2	True				
ANR	1991877	Callee	l . NextExpr		1991657	0					
ANR	1991878	MemberAccess	l . NextExpr		1991657	0					
ANR	1991879	Identifier	l		1991657	0					
ANR	1991880	Identifier	NextExpr		1991657	1					
ANR	1991881	ArgumentList			1991657	1					
ANR	1991882	CompoundStatement		46:63:1683:1683	1991657	3					
ANR	1991883	IfStatement	if ( ! ( expr = l . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE )		1991657	0					
ANR	1991884	Condition	! ( expr = l . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE	824:7:17526:17610	1991657	0	True				
ANR	1991885	OrExpression	! ( expr = l . CurrentExpr ( ) ) || expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE		1991657	0		||			
ANR	1991886	UnaryOperationExpression	! ( expr = l . CurrentExpr ( ) )		1991657	0					
ANR	1991887	UnaryOperator	!		1991657	0					
ANR	1991888	AssignmentExpression	expr = l . CurrentExpr ( )		1991657	1		=			
ANR	1991889	Identifier	expr		1991657	0					
ANR	1991890	CallExpression	l . CurrentExpr ( )		1991657	1					
ANR	1991891	Callee	l . CurrentExpr		1991657	0					
ANR	1991892	MemberAccess	l . CurrentExpr		1991657	0					
ANR	1991893	Identifier	l		1991657	0					
ANR	1991894	Identifier	CurrentExpr		1991657	1					
ANR	1991895	ArgumentList			1991657	1					
ANR	1991896	EqualityExpression	expr -> GetKind ( ) != classad :: ExprTree :: CLASSAD_NODE		1991657	1		!=			
ANR	1991897	CallExpression	expr -> GetKind ( )		1991657	0					
ANR	1991898	Callee	expr -> GetKind		1991657	0					
ANR	1991899	PtrMemberAccess	expr -> GetKind		1991657	0					
ANR	1991900	Identifier	expr		1991657	0					
ANR	1991901	Identifier	GetKind		1991657	1					
ANR	1991902	ArgumentList			1991657	1					
ANR	1991903	Identifier	classad :: ExprTree :: CLASSAD_NODE		1991657	1					
ANR	1991904	CompoundStatement		50:57:1822:1822	1991657	1					
ANR	1991905	ExpressionStatement	"cout << ""error: Port is not a classad\\n"" << endl"	826:4:17620:17668	1991657	0	True				
ANR	1991906	ShiftExpression	"cout << ""error: Port is not a classad\\n"" << endl"		1991657	0		<<			
ANR	1991907	Identifier	cout		1991657	0					
ANR	1991908	ShiftExpression	"""error: Port is not a classad\\n"" << endl"		1991657	1		<<			
ANR	1991909	PrimaryExpression	"""error: Port is not a classad\\n"""		1991657	0					
ANR	1991910	Identifier	endl		1991657	1					
ANR	1991911	ReturnStatement	return false ;	827:4:17674:17686	1991657	1	True				
ANR	1991912	Identifier	false		1991657	0					
ANR	1991913	ExpressionStatement	portAd = ( classad :: ClassAd * ) expr	831:3:17721:17755	1991657	1	True				
ANR	1991914	AssignmentExpression	portAd = ( classad :: ClassAd * ) expr		1991657	0		=			
ANR	1991915	Identifier	portAd		1991657	0					
ANR	1991916	CastExpression	( classad :: ClassAd * ) expr		1991657	1					
ANR	1991917	CastTarget	classad :: ClassAd *		1991657	0					
ANR	1991918	Identifier	expr		1991657	1					
ANR	1991919	ExpressionStatement	"pNode = new PortNode ( ad , adNum , portNum )"	832:3:17760:17802	1991657	2	True				
ANR	1991920	AssignmentExpression	"pNode = new PortNode ( ad , adNum , portNum )"		1991657	0		=			
ANR	1991921	Identifier	pNode		1991657	0					
ANR	1991922	Expression	"ad , adNum , portNum"		1991657	1					
ANR	1991923	Identifier	ad		1991657	0					
ANR	1991924	Expression	"adNum , portNum"		1991657	1					
ANR	1991925	Identifier	adNum		1991657	0					
ANR	1991926	Identifier	portNum		1991657	1					
ANR	1991927	IfStatement	"if ( ! portAd -> EvaluateAttrString ( ""label"" , label ) )"		1991657	3					
ANR	1991928	Condition	"! portAd -> EvaluateAttrString ( ""label"" , label )"	835:7:17873:17917	1991657	0	True				
ANR	1991929	UnaryOperationExpression	"! portAd -> EvaluateAttrString ( ""label"" , label )"		1991657	0					
ANR	1991930	UnaryOperator	!		1991657	0					
ANR	1991931	CallExpression	"portAd -> EvaluateAttrString ( ""label"" , label )"		1991657	1					
ANR	1991932	Callee	portAd -> EvaluateAttrString		1991657	0					
ANR	1991933	PtrMemberAccess	portAd -> EvaluateAttrString		1991657	0					
ANR	1991934	Identifier	portAd		1991657	0					
ANR	1991935	Identifier	EvaluateAttrString		1991657	1					
ANR	1991936	ArgumentList	"""label"""		1991657	1					
ANR	1991937	Argument	"""label"""		1991657	0					
ANR	1991938	PrimaryExpression	"""label"""		1991657	0					
ANR	1991939	Argument	label		1991657	1					
ANR	1991940	Identifier	label		1991657	0					
ANR	1991941	CompoundStatement		60:55:2129:2129	1991657	1					
ANR	1991942	ExpressionStatement	"cout << ""error: Bad or missing port label\\n"" << endl"	836:4:17927:17979	1991657	0	True				
ANR	1991943	ShiftExpression	"cout << ""error: Bad or missing port label\\n"" << endl"		1991657	0		<<			
ANR	1991944	Identifier	cout		1991657	0					
ANR	1991945	ShiftExpression	"""error: Bad or missing port label\\n"" << endl"		1991657	1		<<			
ANR	1991946	PrimaryExpression	"""error: Bad or missing port label\\n"""		1991657	0					
ANR	1991947	Identifier	endl		1991657	1					
ANR	1991948	ReturnStatement	return false ;	837:4:17985:17997	1991657	1	True				
ANR	1991949	Identifier	false		1991657	0					
ANR	1991950	ExpressionStatement	pNodes [ label ] = pNode	841:3:18037:18058	1991657	4	True				
ANR	1991951	AssignmentExpression	pNodes [ label ] = pNode		1991657	0		=			
ANR	1991952	ArrayIndexing	pNodes [ label ]		1991657	0					
ANR	1991953	Identifier	pNodes		1991657	0					
ANR	1991954	Identifier	label		1991657	1					
ANR	1991955	Identifier	pNode		1991657	1					
ANR	1991956	IfStatement	"if ( ! ( reqExpr = portAd -> Lookup ( ""Requirements"" ) ) )"		1991657	5					
ANR	1991957	Condition	"! ( reqExpr = portAd -> Lookup ( ""Requirements"" ) )"	845:7:18097:18143	1991657	0	True				
ANR	1991958	UnaryOperationExpression	"! ( reqExpr = portAd -> Lookup ( ""Requirements"" ) )"		1991657	0					
ANR	1991959	UnaryOperator	!		1991657	0					
ANR	1991960	AssignmentExpression	"reqExpr = portAd -> Lookup ( ""Requirements"" )"		1991657	1		=			
ANR	1991961	Identifier	reqExpr		1991657	0					
ANR	1991962	CallExpression	"portAd -> Lookup ( ""Requirements"" )"		1991657	1					
ANR	1991963	Callee	portAd -> Lookup		1991657	0					
ANR	1991964	PtrMemberAccess	portAd -> Lookup		1991657	0					
ANR	1991965	Identifier	portAd		1991657	0					
ANR	1991966	Identifier	Lookup		1991657	1					
ANR	1991967	ArgumentList	"""Requirements"""		1991657	1					
ANR	1991968	Argument	"""Requirements"""		1991657	0					
ANR	1991969	PrimaryExpression	"""Requirements"""		1991657	0					
ANR	1991970	CompoundStatement		70:57:2355:2355	1991657	1					
ANR	1991971	ExpressionStatement	"pp . Unparse ( buffer , portAd )"	846:4:18153:18181	1991657	0	True				
ANR	1991972	CallExpression	"pp . Unparse ( buffer , portAd )"		1991657	0					
ANR	1991973	Callee	pp . Unparse		1991657	0					
ANR	1991974	MemberAccess	pp . Unparse		1991657	0					
ANR	1991975	Identifier	pp		1991657	0					
ANR	1991976	Identifier	Unparse		1991657	1					
ANR	1991977	ArgumentList	buffer		1991657	1					
ANR	1991978	Argument	buffer		1991657	0					
ANR	1991979	Identifier	buffer		1991657	0					
ANR	1991980	Argument	portAd		1991657	1					
ANR	1991981	Identifier	portAd		1991657	0					
ANR	1991982	ExpressionStatement	"cout << ""error looking up Requirements expression in "" << buffer << endl"	847:4:18187:18265	1991657	1	True				
ANR	1991983	ShiftExpression	"cout << ""error looking up Requirements expression in "" << buffer << endl"		1991657	0		<<			
ANR	1991984	Identifier	cout		1991657	0					
ANR	1991985	ShiftExpression	"""error looking up Requirements expression in "" << buffer << endl"		1991657	1		<<			
ANR	1991986	PrimaryExpression	"""error looking up Requirements expression in """		1991657	0					
ANR	1991987	ShiftExpression	buffer << endl		1991657	1		<<			
ANR	1991988	Identifier	buffer		1991657	0					
ANR	1991989	Identifier	endl		1991657	1					
ANR	1991990	ReturnStatement	return false ;	849:4:18271:18283	1991657	2	True				
ANR	1991991	Identifier	false		1991657	0					
ANR	1991992	ExpressionStatement	requirements = new MultiProfile ( )	852:3:18297:18331	1991657	6	True				
ANR	1991993	AssignmentExpression	requirements = new MultiProfile ( )		1991657	0		=			
ANR	1991994	Identifier	requirements		1991657	0					
ANR	1991995	UnaryExpression	new MultiProfile ( )		1991657	1					
ANR	1991996	IfStatement	"if ( ! BoolExpr :: ExprToMultiProfile ( reqExpr , requirements ) )"		1991657	7					
ANR	1991997	Condition	"! BoolExpr :: ExprToMultiProfile ( reqExpr , requirements )"	853:7:18340:18393	1991657	0	True				
ANR	1991998	UnaryOperationExpression	"! BoolExpr :: ExprToMultiProfile ( reqExpr , requirements )"		1991657	0					
ANR	1991999	UnaryOperator	!		1991657	0					
ANR	1992000	CallExpression	"BoolExpr :: ExprToMultiProfile ( reqExpr , requirements )"		1991657	1					
ANR	1992001	Callee	BoolExpr :: ExprToMultiProfile		1991657	0					
ANR	1992002	Identifier	BoolExpr :: ExprToMultiProfile		1991657	0					
ANR	1992003	ArgumentList	reqExpr		1991657	1					
ANR	1992004	Argument	reqExpr		1991657	0					
ANR	1992005	Identifier	reqExpr		1991657	0					
ANR	1992006	Argument	requirements		1991657	1					
ANR	1992007	Identifier	requirements		1991657	0					
ANR	1992008	CompoundStatement		78:64:2605:2605	1991657	1					
ANR	1992009	ExpressionStatement	"pp . Unparse ( buffer , reqExpr )"	854:4:18403:18432	1991657	0	True				
ANR	1992010	CallExpression	"pp . Unparse ( buffer , reqExpr )"		1991657	0					
ANR	1992011	Callee	pp . Unparse		1991657	0					
ANR	1992012	MemberAccess	pp . Unparse		1991657	0					
ANR	1992013	Identifier	pp		1991657	0					
ANR	1992014	Identifier	Unparse		1991657	1					
ANR	1992015	ArgumentList	buffer		1991657	1					
ANR	1992016	Argument	buffer		1991657	0					
ANR	1992017	Identifier	buffer		1991657	0					
ANR	1992018	Argument	reqExpr		1991657	1					
ANR	1992019	Identifier	reqExpr		1991657	0					
ANR	1992020	ExpressionStatement	"cout << ""error calling ExprToMultiProfile on"" << buffer << endl"	855:4:18438:18507	1991657	1	True				
ANR	1992021	ShiftExpression	"cout << ""error calling ExprToMultiProfile on"" << buffer << endl"		1991657	0		<<			
ANR	1992022	Identifier	cout		1991657	0					
ANR	1992023	ShiftExpression	"""error calling ExprToMultiProfile on"" << buffer << endl"		1991657	1		<<			
ANR	1992024	PrimaryExpression	"""error calling ExprToMultiProfile on"""		1991657	0					
ANR	1992025	ShiftExpression	buffer << endl		1991657	1		<<			
ANR	1992026	Identifier	buffer		1991657	0					
ANR	1992027	Identifier	endl		1991657	1					
ANR	1992028	ReturnStatement	return false ;	857:4:18513:18525	1991657	2	True				
ANR	1992029	Identifier	false		1991657	0					
ANR	1992030	ExpressionStatement	requirements -> Rewind ( )	860:3:18536:18559	1991657	8	True				
ANR	1992031	CallExpression	requirements -> Rewind ( )		1991657	0					
ANR	1992032	Callee	requirements -> Rewind		1991657	0					
ANR	1992033	PtrMemberAccess	requirements -> Rewind		1991657	0					
ANR	1992034	Identifier	requirements		1991657	0					
ANR	1992035	Identifier	Rewind		1991657	1					
ANR	1992036	ArgumentList			1991657	1					
ANR	1992037	WhileStatement	while ( requirements -> NextProfile ( profile ) )		1991657	9					
ANR	1992038	Condition	requirements -> NextProfile ( profile )	861:10:18571:18606	1991657	0	True				
ANR	1992039	CallExpression	requirements -> NextProfile ( profile )		1991657	0					
ANR	1992040	Callee	requirements -> NextProfile		1991657	0					
ANR	1992041	PtrMemberAccess	requirements -> NextProfile		1991657	0					
ANR	1992042	Identifier	requirements		1991657	0					
ANR	1992043	Identifier	NextProfile		1991657	1					
ANR	1992044	ArgumentList	profile		1991657	1					
ANR	1992045	Argument	profile		1991657	0					
ANR	1992046	Identifier	profile		1991657	0					
ANR	1992047	CompoundStatement		86:49:2818:2818	1991657	1					
ANR	1992048	IfStatement	"if ( ! portAd -> FlattenAndInline ( profile -> GetExpr ( ) , val , flatExpr ) )"		1991657	0					
ANR	1992049	Condition	"! portAd -> FlattenAndInline ( profile -> GetExpr ( ) , val , flatExpr )"	863:8:18641:18718	1991657	0	True				
ANR	1992050	UnaryOperationExpression	"! portAd -> FlattenAndInline ( profile -> GetExpr ( ) , val , flatExpr )"		1991657	0					
ANR	1992051	UnaryOperator	!		1991657	0					
ANR	1992052	CallExpression	"portAd -> FlattenAndInline ( profile -> GetExpr ( ) , val , flatExpr )"		1991657	1					
ANR	1992053	Callee	portAd -> FlattenAndInline		1991657	0					
ANR	1992054	PtrMemberAccess	portAd -> FlattenAndInline		1991657	0					
ANR	1992055	Identifier	portAd		1991657	0					
ANR	1992056	Identifier	FlattenAndInline		1991657	1					
ANR	1992057	ArgumentList	profile -> GetExpr ( )		1991657	1					
ANR	1992058	Argument	profile -> GetExpr ( )		1991657	0					
ANR	1992059	CallExpression	profile -> GetExpr ( )		1991657	0					
ANR	1992060	Callee	profile -> GetExpr		1991657	0					
ANR	1992061	PtrMemberAccess	profile -> GetExpr		1991657	0					
ANR	1992062	Identifier	profile		1991657	0					
ANR	1992063	Identifier	GetExpr		1991657	1					
ANR	1992064	ArgumentList			1991657	1					
ANR	1992065	Argument	val		1991657	1					
ANR	1992066	Identifier	val		1991657	0					
ANR	1992067	Argument	flatExpr		1991657	2					
ANR	1992068	Identifier	flatExpr		1991657	0					
ANR	1992069	CompoundStatement		89:27:2930:2930	1991657	1					
ANR	1992070	ExpressionStatement	profile -> ToString ( buffer )	865:5:18729:18756	1991657	0	True				
ANR	1992071	CallExpression	profile -> ToString ( buffer )		1991657	0					
ANR	1992072	Callee	profile -> ToString		1991657	0					
ANR	1992073	PtrMemberAccess	profile -> ToString		1991657	0					
ANR	1992074	Identifier	profile		1991657	0					
ANR	1992075	Identifier	ToString		1991657	1					
ANR	1992076	ArgumentList	buffer		1991657	1					
ANR	1992077	Argument	buffer		1991657	0					
ANR	1992078	Identifier	buffer		1991657	0					
ANR	1992079	ExpressionStatement	"cout << ""error flattening expression: "" << buffer << ""in port"" << label << endl"	866:5:18763:18850	1991657	1	True				
ANR	1992080	ShiftExpression	"cout << ""error flattening expression: "" << buffer << ""in port"" << label << endl"		1991657	0		<<			
ANR	1992081	Identifier	cout		1991657	0					
ANR	1992082	ShiftExpression	"""error flattening expression: "" << buffer << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992083	PrimaryExpression	"""error flattening expression: """		1991657	0					
ANR	1992084	ShiftExpression	"buffer << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992085	Identifier	buffer		1991657	0					
ANR	1992086	ShiftExpression	"""in port"" << label << endl"		1991657	1		<<			
ANR	1992087	PrimaryExpression	"""in port"""		1991657	0					
ANR	1992088	ShiftExpression	label << endl		1991657	1		<<			
ANR	1992089	Identifier	label		1991657	0					
ANR	1992090	Identifier	endl		1991657	1					
ANR	1992091	ReturnStatement	return false ;	868:5:18857:18869	1991657	2	True				
ANR	1992092	Identifier	false		1991657	0					
ANR	1992093	IfStatement	"if ( ! ad -> GetExternalReferences ( flatExpr , refs , true ) )"		1991657	1					
ANR	1992094	Condition	"! ad -> GetExternalReferences ( flatExpr , refs , true )"	872:8:18930:18979	1991657	0	True				
ANR	1992095	UnaryOperationExpression	"! ad -> GetExternalReferences ( flatExpr , refs , true )"		1991657	0					
ANR	1992096	UnaryOperator	!		1991657	0					
ANR	1992097	CallExpression	"ad -> GetExternalReferences ( flatExpr , refs , true )"		1991657	1					
ANR	1992098	Callee	ad -> GetExternalReferences		1991657	0					
ANR	1992099	PtrMemberAccess	ad -> GetExternalReferences		1991657	0					
ANR	1992100	Identifier	ad		1991657	0					
ANR	1992101	Identifier	GetExternalReferences		1991657	1					
ANR	1992102	ArgumentList	flatExpr		1991657	1					
ANR	1992103	Argument	flatExpr		1991657	0					
ANR	1992104	Identifier	flatExpr		1991657	0					
ANR	1992105	Argument	refs		1991657	1					
ANR	1992106	Identifier	refs		1991657	0					
ANR	1992107	Argument	true		1991657	2					
ANR	1992108	Identifier	true		1991657	0					
ANR	1992109	CompoundStatement		97:61:3191:3191	1991657	1					
ANR	1992110	ExpressionStatement	"pp . Unparse ( buffer , flatExpr )"	873:5:18991:19021	1991657	0	True				
ANR	1992111	CallExpression	"pp . Unparse ( buffer , flatExpr )"		1991657	0					
ANR	1992112	Callee	pp . Unparse		1991657	0					
ANR	1992113	MemberAccess	pp . Unparse		1991657	0					
ANR	1992114	Identifier	pp		1991657	0					
ANR	1992115	Identifier	Unparse		1991657	1					
ANR	1992116	ArgumentList	buffer		1991657	1					
ANR	1992117	Argument	buffer		1991657	0					
ANR	1992118	Identifier	buffer		1991657	0					
ANR	1992119	Argument	flatExpr		1991657	1					
ANR	1992120	Identifier	flatExpr		1991657	0					
ANR	1992121	ExpressionStatement	"cout << ""error: Failed to get external refs in expression: "" << buffer << ""in port"" << label << endl"	874:5:19028:19143	1991657	1	True				
ANR	1992122	ShiftExpression	"cout << ""error: Failed to get external refs in expression: "" << buffer << ""in port"" << label << endl"		1991657	0		<<			
ANR	1992123	Identifier	cout		1991657	0					
ANR	1992124	ShiftExpression	"""error: Failed to get external refs in expression: "" << buffer << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992125	PrimaryExpression	"""error: Failed to get external refs in expression: """		1991657	0					
ANR	1992126	ShiftExpression	"buffer << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992127	Identifier	buffer		1991657	0					
ANR	1992128	ShiftExpression	"""in port"" << label << endl"		1991657	1		<<			
ANR	1992129	PrimaryExpression	"""in port"""		1991657	0					
ANR	1992130	ShiftExpression	label << endl		1991657	1		<<			
ANR	1992131	Identifier	label		1991657	0					
ANR	1992132	Identifier	endl		1991657	1					
ANR	1992133	ReturnStatement	return false ;	877:5:19150:19162	1991657	2	True				
ANR	1992134	Identifier	false		1991657	0					
ANR	1992135	ExpressionStatement	clauseNum = pNode -> AddClause ( )	880:4:19175:19206	1991657	2	True				
ANR	1992136	AssignmentExpression	clauseNum = pNode -> AddClause ( )		1991657	0		=			
ANR	1992137	Identifier	clauseNum		1991657	0					
ANR	1992138	CallExpression	pNode -> AddClause ( )		1991657	1					
ANR	1992139	Callee	pNode -> AddClause		1991657	0					
ANR	1992140	PtrMemberAccess	pNode -> AddClause		1991657	0					
ANR	1992141	Identifier	pNode		1991657	0					
ANR	1992142	Identifier	AddClause		1991657	1					
ANR	1992143	ArgumentList			1991657	1					
ANR	1992144	ForStatement	for ( r = refs . begin ( ) ; r != refs . end ( ) ; r ++ )		1991657	3					
ANR	1992145	ForInit	r = refs . begin ( ) ;	883:9:19243:19260	1991657	0	True				
ANR	1992146	AssignmentExpression	r = refs . begin ( )		1991657	0		=			
ANR	1992147	Identifier	r		1991657	0					
ANR	1992148	CallExpression	refs . begin ( )		1991657	1					
ANR	1992149	Callee	refs . begin		1991657	0					
ANR	1992150	MemberAccess	refs . begin		1991657	0					
ANR	1992151	Identifier	refs		1991657	0					
ANR	1992152	Identifier	begin		1991657	1					
ANR	1992153	ArgumentList			1991657	1					
ANR	1992154	Condition	r != refs . end ( )	883:28:19262:19277	1991657	1	True				
ANR	1992155	EqualityExpression	r != refs . end ( )		1991657	0		!=			
ANR	1992156	Identifier	r		1991657	0					
ANR	1992157	CallExpression	refs . end ( )		1991657	1					
ANR	1992158	Callee	refs . end		1991657	0					
ANR	1992159	MemberAccess	refs . end		1991657	0					
ANR	1992160	Identifier	refs		1991657	0					
ANR	1992161	Identifier	end		1991657	1					
ANR	1992162	ArgumentList			1991657	1					
ANR	1992163	PostIncDecOperationExpression	r ++	883:46:19280:19282	1991657	2	True				
ANR	1992164	Identifier	r		1991657	0					
ANR	1992165	IncDec	++		1991657	1					
ANR	1992166	CompoundStatement		108:52:3494:3494	1991657	3					
ANR	1992167	IfStatement	"if ( strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0 )"		1991657	0					
ANR	1992168	Condition	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0"	884:9:19297:19368	1991657	0	True				
ANR	1992169	EqualityExpression	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0"		1991657	0		==			
ANR	1992170	CallExpression	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) )"		1991657	0					
ANR	1992171	Callee	strncasecmp		1991657	0					
ANR	1992172	Identifier	strncasecmp		1991657	0					
ANR	1992173	ArgumentList	r -> c_str ( )		1991657	1					
ANR	1992174	Argument	r -> c_str ( )		1991657	0					
ANR	1992175	CallExpression	r -> c_str ( )		1991657	0					
ANR	1992176	Callee	r -> c_str		1991657	0					
ANR	1992177	PtrMemberAccess	r -> c_str		1991657	0					
ANR	1992178	Identifier	r		1991657	0					
ANR	1992179	Identifier	c_str		1991657	1					
ANR	1992180	ArgumentList			1991657	1					
ANR	1992181	Argument	label . c_str ( )		1991657	1					
ANR	1992182	CallExpression	label . c_str ( )		1991657	0					
ANR	1992183	Callee	label . c_str		1991657	0					
ANR	1992184	MemberAccess	label . c_str		1991657	0					
ANR	1992185	Identifier	label		1991657	0					
ANR	1992186	Identifier	c_str		1991657	1					
ANR	1992187	ArgumentList			1991657	1					
ANR	1992188	Argument	label . size ( )		1991657	2					
ANR	1992189	CallExpression	label . size ( )		1991657	0					
ANR	1992190	Callee	label . size		1991657	0					
ANR	1992191	MemberAccess	label . size		1991657	0					
ANR	1992192	Identifier	label		1991657	0					
ANR	1992193	Identifier	size		1991657	1					
ANR	1992194	ArgumentList			1991657	1					
ANR	1992195	PrimaryExpression	0		1991657	1					
ANR	1992196	CompoundStatement		110:33:3580:3580	1991657	1					
ANR	1992197	ElseStatement	else		1991657	0					
ANR	1992198	CompoundStatement		113:10:3657:3657	1991657	0					
ANR	1992199	ExpressionStatement	"rAttr = rLabel = """""	891:6:19556:19575	1991657	0	True				
ANR	1992200	AssignmentExpression	"rAttr = rLabel = """""		1991657	0		=			
ANR	1992201	Identifier	rAttr		1991657	0					
ANR	1992202	AssignmentExpression	"rLabel = """""		1991657	1		=			
ANR	1992203	Identifier	rLabel		1991657	0					
ANR	1992204	PrimaryExpression	""""""		1991657	1					
ANR	1992205	ExpressionStatement	"splitString ( * r , rLabel , rAttr )"	892:6:19583:19613	1991657	1	True				
ANR	1992206	CallExpression	"splitString ( * r , rLabel , rAttr )"		1991657	0					
ANR	1992207	Callee	splitString		1991657	0					
ANR	1992208	Identifier	splitString		1991657	0					
ANR	1992209	ArgumentList	* r		1991657	1					
ANR	1992210	Argument	* r		1991657	0					
ANR	1992211	UnaryOperationExpression	* r		1991657	0					
ANR	1992212	UnaryOperator	*		1991657	0					
ANR	1992213	Identifier	r		1991657	1					
ANR	1992214	Argument	rLabel		1991657	1					
ANR	1992215	Identifier	rLabel		1991657	0					
ANR	1992216	Argument	rAttr		1991657	2					
ANR	1992217	Identifier	rAttr		1991657	0					
ANR	1992218	ExpressionStatement	rPortNode = pNodes [ rLabel ]	893:6:19621:19647	1991657	2	True				
ANR	1992219	AssignmentExpression	rPortNode = pNodes [ rLabel ]		1991657	0		=			
ANR	1992220	Identifier	rPortNode		1991657	0					
ANR	1992221	ArrayIndexing	pNodes [ rLabel ]		1991657	1					
ANR	1992222	Identifier	pNodes		1991657	0					
ANR	1992223	Identifier	rLabel		1991657	1					
ANR	1992224	ExpressionStatement	rPortNode -> AddExtAttrNode ( rAttr )	894:6:19655:19689	1991657	3	True				
ANR	1992225	CallExpression	rPortNode -> AddExtAttrNode ( rAttr )		1991657	0					
ANR	1992226	Callee	rPortNode -> AddExtAttrNode		1991657	0					
ANR	1992227	PtrMemberAccess	rPortNode -> AddExtAttrNode		1991657	0					
ANR	1992228	Identifier	rPortNode		1991657	0					
ANR	1992229	Identifier	AddExtAttrNode		1991657	1					
ANR	1992230	ArgumentList	rAttr		1991657	1					
ANR	1992231	Argument	rAttr		1991657	0					
ANR	1992232	Identifier	rAttr		1991657	0					
ANR	1992233	ExpressionStatement	eNode = pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )	897:6:19743:19790	1991657	4	True				
ANR	1992234	AssignmentExpression	eNode = pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )		1991657	0		=			
ANR	1992235	Identifier	eNode		1991657	0					
ANR	1992236	CallExpression	pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )		1991657	1					
ANR	1992237	Callee	pNodes [ rLabel ] -> GetExtAttrNode		1991657	0					
ANR	1992238	PtrMemberAccess	pNodes [ rLabel ] -> GetExtAttrNode		1991657	0					
ANR	1992239	ArrayIndexing	pNodes [ rLabel ]		1991657	0					
ANR	1992240	Identifier	pNodes		1991657	0					
ANR	1992241	Identifier	rLabel		1991657	1					
ANR	1992242	Identifier	GetExtAttrNode		1991657	1					
ANR	1992243	ArgumentList	rAttr		1991657	1					
ANR	1992244	Argument	rAttr		1991657	0					
ANR	1992245	Identifier	rAttr		1991657	0					
ANR	1992246	ExpressionStatement	"pNode -> AddReqDep ( clauseNum , eNode )"	898:6:19798:19834	1991657	5	True				
ANR	1992247	CallExpression	"pNode -> AddReqDep ( clauseNum , eNode )"		1991657	0					
ANR	1992248	Callee	pNode -> AddReqDep		1991657	0					
ANR	1992249	PtrMemberAccess	pNode -> AddReqDep		1991657	0					
ANR	1992250	Identifier	pNode		1991657	0					
ANR	1992251	Identifier	AddReqDep		1991657	1					
ANR	1992252	ArgumentList	clauseNum		1991657	1					
ANR	1992253	Argument	clauseNum		1991657	0					
ANR	1992254	Identifier	clauseNum		1991657	0					
ANR	1992255	Argument	eNode		1991657	1					
ANR	1992256	Identifier	eNode		1991657	0					
ANR	1992257	ExpressionStatement	refs . clear ( )	901:4:19879:19891	1991657	4	True				
ANR	1992258	CallExpression	refs . clear ( )		1991657	0					
ANR	1992259	Callee	refs . clear		1991657	0					
ANR	1992260	MemberAccess	refs . clear		1991657	0					
ANR	1992261	Identifier	refs		1991657	0					
ANR	1992262	Identifier	clear		1991657	1					
ANR	1992263	ArgumentList			1991657	1					
ANR	1992264	ExpressionStatement	c . Initialize ( * portAd )	906:3:19944:19967	1991657	10	True				
ANR	1992265	CallExpression	c . Initialize ( * portAd )		1991657	0					
ANR	1992266	Callee	c . Initialize		1991657	0					
ANR	1992267	MemberAccess	c . Initialize		1991657	0					
ANR	1992268	Identifier	c		1991657	0					
ANR	1992269	Identifier	Initialize		1991657	1					
ANR	1992270	ArgumentList	* portAd		1991657	1					
ANR	1992271	Argument	* portAd		1991657	0					
ANR	1992272	UnaryOperationExpression	* portAd		1991657	0					
ANR	1992273	UnaryOperator	*		1991657	0					
ANR	1992274	Identifier	portAd		1991657	1					
ANR	1992275	ForStatement	"for ( ; ! c . IsAfterLast ( ) ; c . NextAttribute ( attr , expr ) )"		1991657	11					
ANR	1992276	Condition	! c . IsAfterLast ( )	907:10:19979:19995	1991657	0	True				
ANR	1992277	UnaryOperationExpression	! c . IsAfterLast ( )		1991657	0					
ANR	1992278	UnaryOperator	!		1991657	0					
ANR	1992279	CallExpression	c . IsAfterLast ( )		1991657	1					
ANR	1992280	Callee	c . IsAfterLast		1991657	0					
ANR	1992281	MemberAccess	c . IsAfterLast		1991657	0					
ANR	1992282	Identifier	c		1991657	0					
ANR	1992283	Identifier	IsAfterLast		1991657	1					
ANR	1992284	ArgumentList			1991657	1					
ANR	1992285	CallExpression	"c . NextAttribute ( attr , expr )"	907:30:19999:20027	1991657	1	True				
ANR	1992286	Callee	c . NextAttribute		1991657	0					
ANR	1992287	MemberAccess	c . NextAttribute		1991657	0					
ANR	1992288	Identifier	c		1991657	0					
ANR	1992289	Identifier	NextAttribute		1991657	1					
ANR	1992290	ArgumentList	attr		1991657	1					
ANR	1992291	Argument	attr		1991657	0					
ANR	1992292	Identifier	attr		1991657	0					
ANR	1992293	Argument	expr		1991657	1					
ANR	1992294	Identifier	expr		1991657	0					
ANR	1992295	CompoundStatement		132:62:4239:4239	1991657	2					
ANR	1992296	ExpressionStatement	"c . CurrentAttribute ( attr , expr )"	908:4:20037:20069	1991657	0	True				
ANR	1992297	CallExpression	"c . CurrentAttribute ( attr , expr )"		1991657	0					
ANR	1992298	Callee	c . CurrentAttribute		1991657	0					
ANR	1992299	MemberAccess	c . CurrentAttribute		1991657	0					
ANR	1992300	Identifier	c		1991657	0					
ANR	1992301	Identifier	CurrentAttribute		1991657	1					
ANR	1992302	ArgumentList	attr		1991657	1					
ANR	1992303	Argument	attr		1991657	0					
ANR	1992304	Identifier	attr		1991657	0					
ANR	1992305	Argument	expr		1991657	1					
ANR	1992306	Identifier	expr		1991657	0					
ANR	1992307	IfStatement	"if ( strcasecmp ( attr . c_str ( ) , ""Requirements"" ) != 0 )"		1991657	1					
ANR	1992308	Condition	"strcasecmp ( attr . c_str ( ) , ""Requirements"" ) != 0"	910:8:20080:20127	1991657	0	True				
ANR	1992309	EqualityExpression	"strcasecmp ( attr . c_str ( ) , ""Requirements"" ) != 0"		1991657	0		!=			
ANR	1992310	CallExpression	"strcasecmp ( attr . c_str ( ) , ""Requirements"" )"		1991657	0					
ANR	1992311	Callee	strcasecmp		1991657	0					
ANR	1992312	Identifier	strcasecmp		1991657	0					
ANR	1992313	ArgumentList	attr . c_str ( )		1991657	1					
ANR	1992314	Argument	attr . c_str ( )		1991657	0					
ANR	1992315	CallExpression	attr . c_str ( )		1991657	0					
ANR	1992316	Callee	attr . c_str		1991657	0					
ANR	1992317	MemberAccess	attr . c_str		1991657	0					
ANR	1992318	Identifier	attr		1991657	0					
ANR	1992319	Identifier	c_str		1991657	1					
ANR	1992320	ArgumentList			1991657	1					
ANR	1992321	Argument	"""Requirements"""		1991657	1					
ANR	1992322	PrimaryExpression	"""Requirements"""		1991657	0					
ANR	1992323	PrimaryExpression	0		1991657	1					
ANR	1992324	CompoundStatement		135:59:4339:4339	1991657	1					
ANR	1992325	IfStatement	"if ( ! portAd -> FlattenAndInline ( expr , val , flatExpr ) )"		1991657	0					
ANR	1992326	Condition	"! portAd -> FlattenAndInline ( expr , val , flatExpr )"	913:9:20165:20212	1991657	0	True				
ANR	1992327	UnaryOperationExpression	"! portAd -> FlattenAndInline ( expr , val , flatExpr )"		1991657	0					
ANR	1992328	UnaryOperator	!		1991657	0					
ANR	1992329	CallExpression	"portAd -> FlattenAndInline ( expr , val , flatExpr )"		1991657	1					
ANR	1992330	Callee	portAd -> FlattenAndInline		1991657	0					
ANR	1992331	PtrMemberAccess	portAd -> FlattenAndInline		1991657	0					
ANR	1992332	Identifier	portAd		1991657	0					
ANR	1992333	Identifier	FlattenAndInline		1991657	1					
ANR	1992334	ArgumentList	expr		1991657	1					
ANR	1992335	Argument	expr		1991657	0					
ANR	1992336	Identifier	expr		1991657	0					
ANR	1992337	Argument	val		1991657	1					
ANR	1992338	Identifier	val		1991657	0					
ANR	1992339	Argument	flatExpr		1991657	2					
ANR	1992340	Identifier	flatExpr		1991657	0					
ANR	1992341	CompoundStatement		138:60:4424:4424	1991657	1					
ANR	1992342	ExpressionStatement	"cout << ""error flattening expression for"" << attr << ""in port"" << label << endl"	914:6:20224:20312	1991657	0	True				
ANR	1992343	ShiftExpression	"cout << ""error flattening expression for"" << attr << ""in port"" << label << endl"		1991657	0		<<			
ANR	1992344	Identifier	cout		1991657	0					
ANR	1992345	ShiftExpression	"""error flattening expression for"" << attr << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992346	PrimaryExpression	"""error flattening expression for"""		1991657	0					
ANR	1992347	ShiftExpression	"attr << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992348	Identifier	attr		1991657	0					
ANR	1992349	ShiftExpression	"""in port"" << label << endl"		1991657	1		<<			
ANR	1992350	PrimaryExpression	"""in port"""		1991657	0					
ANR	1992351	ShiftExpression	label << endl		1991657	1		<<			
ANR	1992352	Identifier	label		1991657	0					
ANR	1992353	Identifier	endl		1991657	1					
ANR	1992354	ReturnStatement	return false ;	916:6:20320:20332	1991657	1	True				
ANR	1992355	Identifier	false		1991657	0					
ANR	1992356	IfStatement	if ( ! flatExpr )		1991657	1					
ANR	1992357	Condition	! flatExpr	920:9:20410:20418	1991657	0	True				
ANR	1992358	UnaryOperationExpression	! flatExpr		1991657	0					
ANR	1992359	UnaryOperator	!		1991657	0					
ANR	1992360	Identifier	flatExpr		1991657	1					
ANR	1992361	CompoundStatement		145:21:4630:4630	1991657	1					
ANR	1992362	IfStatement	if ( ! attrIsRequirements )		1991657	0					
ANR	1992363	Condition	! attrIsRequirements	921:10:20434:20452	1991657	0	True				
ANR	1992364	UnaryOperationExpression	! attrIsRequirements		1991657	0					
ANR	1992365	UnaryOperator	!		1991657	0					
ANR	1992366	Identifier	attrIsRequirements		1991657	1					
ANR	1992367	CompoundStatement		146:32:4664:4664	1991657	1					
ANR	1992368	ExpressionStatement	"pNode -> AddAttrNode ( attr , val )"	922:7:20465:20496	1991657	0	True				
ANR	1992369	CallExpression	"pNode -> AddAttrNode ( attr , val )"		1991657	0					
ANR	1992370	Callee	pNode -> AddAttrNode		1991657	0					
ANR	1992371	PtrMemberAccess	pNode -> AddAttrNode		1991657	0					
ANR	1992372	Identifier	pNode		1991657	0					
ANR	1992373	Identifier	AddAttrNode		1991657	1					
ANR	1992374	ArgumentList	attr		1991657	1					
ANR	1992375	Argument	attr		1991657	0					
ANR	1992376	Identifier	attr		1991657	0					
ANR	1992377	Argument	val		1991657	1					
ANR	1992378	Identifier	val		1991657	0					
ANR	1992379	ContinueStatement	continue ;	925:6:20571:20579	1991657	1	True				
ANR	1992380	ExpressionStatement	pNode -> AddAttrNode ( attr )	927:5:20593:20619	1991657	2	True				
ANR	1992381	CallExpression	pNode -> AddAttrNode ( attr )		1991657	0					
ANR	1992382	Callee	pNode -> AddAttrNode		1991657	0					
ANR	1992383	PtrMemberAccess	pNode -> AddAttrNode		1991657	0					
ANR	1992384	Identifier	pNode		1991657	0					
ANR	1992385	Identifier	AddAttrNode		1991657	1					
ANR	1992386	ArgumentList	attr		1991657	1					
ANR	1992387	Argument	attr		1991657	0					
ANR	1992388	Identifier	attr		1991657	0					
ANR	1992389	IfStatement	"if ( ! ad -> GetExternalReferences ( flatExpr , refs , true ) )"		1991657	3					
ANR	1992390	Condition	"! ad -> GetExternalReferences ( flatExpr , refs , true )"	930:9:20679:20728	1991657	0	True				
ANR	1992391	UnaryOperationExpression	"! ad -> GetExternalReferences ( flatExpr , refs , true )"		1991657	0					
ANR	1992392	UnaryOperator	!		1991657	0					
ANR	1992393	CallExpression	"ad -> GetExternalReferences ( flatExpr , refs , true )"		1991657	1					
ANR	1992394	Callee	ad -> GetExternalReferences		1991657	0					
ANR	1992395	PtrMemberAccess	ad -> GetExternalReferences		1991657	0					
ANR	1992396	Identifier	ad		1991657	0					
ANR	1992397	Identifier	GetExternalReferences		1991657	1					
ANR	1992398	ArgumentList	flatExpr		1991657	1					
ANR	1992399	Argument	flatExpr		1991657	0					
ANR	1992400	Identifier	flatExpr		1991657	0					
ANR	1992401	Argument	refs		1991657	1					
ANR	1992402	Identifier	refs		1991657	0					
ANR	1992403	Argument	true		1991657	2					
ANR	1992404	Identifier	true		1991657	0					
ANR	1992405	CompoundStatement		155:62:4940:4940	1991657	1					
ANR	1992406	ExpressionStatement	"cout << ""error: Failed to get external refs for"" << attr << ""in port"" << label << endl"	931:6:20740:20834	1991657	0	True				
ANR	1992407	ShiftExpression	"cout << ""error: Failed to get external refs for"" << attr << ""in port"" << label << endl"		1991657	0		<<			
ANR	1992408	Identifier	cout		1991657	0					
ANR	1992409	ShiftExpression	"""error: Failed to get external refs for"" << attr << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992410	PrimaryExpression	"""error: Failed to get external refs for"""		1991657	0					
ANR	1992411	ShiftExpression	"attr << ""in port"" << label << endl"		1991657	1		<<			
ANR	1992412	Identifier	attr		1991657	0					
ANR	1992413	ShiftExpression	"""in port"" << label << endl"		1991657	1		<<			
ANR	1992414	PrimaryExpression	"""in port"""		1991657	0					
ANR	1992415	ShiftExpression	label << endl		1991657	1		<<			
ANR	1992416	Identifier	label		1991657	0					
ANR	1992417	Identifier	endl		1991657	1					
ANR	1992418	ReturnStatement	return false ;	933:6:20842:20854	1991657	1	True				
ANR	1992419	Identifier	false		1991657	0					
ANR	1992420	ForStatement	for ( r = refs . begin ( ) ; r != refs . end ( ) ; r ++ )		1991657	4					
ANR	1992421	ForInit	r = refs . begin ( ) ;	937:10:20900:20917	1991657	0	True				
ANR	1992422	AssignmentExpression	r = refs . begin ( )		1991657	0		=			
ANR	1992423	Identifier	r		1991657	0					
ANR	1992424	CallExpression	refs . begin ( )		1991657	1					
ANR	1992425	Callee	refs . begin		1991657	0					
ANR	1992426	MemberAccess	refs . begin		1991657	0					
ANR	1992427	Identifier	refs		1991657	0					
ANR	1992428	Identifier	begin		1991657	1					
ANR	1992429	ArgumentList			1991657	1					
ANR	1992430	Condition	r != refs . end ( )	937:29:20919:20934	1991657	1	True				
ANR	1992431	EqualityExpression	r != refs . end ( )		1991657	0		!=			
ANR	1992432	Identifier	r		1991657	0					
ANR	1992433	CallExpression	refs . end ( )		1991657	1					
ANR	1992434	Callee	refs . end		1991657	0					
ANR	1992435	MemberAccess	refs . end		1991657	0					
ANR	1992436	Identifier	refs		1991657	0					
ANR	1992437	Identifier	end		1991657	1					
ANR	1992438	ArgumentList			1991657	1					
ANR	1992439	PostIncDecOperationExpression	r ++	937:47:20937:20939	1991657	2	True				
ANR	1992440	Identifier	r		1991657	0					
ANR	1992441	IncDec	++		1991657	1					
ANR	1992442	CompoundStatement		162:53:5151:5151	1991657	3					
ANR	1992443	IfStatement	"if ( strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0 )"		1991657	0					
ANR	1992444	Condition	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0"	938:10:20955:21027	1991657	0	True				
ANR	1992445	EqualityExpression	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) ) == 0"		1991657	0		==			
ANR	1992446	CallExpression	"strncasecmp ( r -> c_str ( ) , label . c_str ( ) , label . size ( ) )"		1991657	0					
ANR	1992447	Callee	strncasecmp		1991657	0					
ANR	1992448	Identifier	strncasecmp		1991657	0					
ANR	1992449	ArgumentList	r -> c_str ( )		1991657	1					
ANR	1992450	Argument	r -> c_str ( )		1991657	0					
ANR	1992451	CallExpression	r -> c_str ( )		1991657	0					
ANR	1992452	Callee	r -> c_str		1991657	0					
ANR	1992453	PtrMemberAccess	r -> c_str		1991657	0					
ANR	1992454	Identifier	r		1991657	0					
ANR	1992455	Identifier	c_str		1991657	1					
ANR	1992456	ArgumentList			1991657	1					
ANR	1992457	Argument	label . c_str ( )		1991657	1					
ANR	1992458	CallExpression	label . c_str ( )		1991657	0					
ANR	1992459	Callee	label . c_str		1991657	0					
ANR	1992460	MemberAccess	label . c_str		1991657	0					
ANR	1992461	Identifier	label		1991657	0					
ANR	1992462	Identifier	c_str		1991657	1					
ANR	1992463	ArgumentList			1991657	1					
ANR	1992464	Argument	label . size ( )		1991657	2					
ANR	1992465	CallExpression	label . size ( )		1991657	0					
ANR	1992466	Callee	label . size		1991657	0					
ANR	1992467	MemberAccess	label . size		1991657	0					
ANR	1992468	Identifier	label		1991657	0					
ANR	1992469	Identifier	size		1991657	1					
ANR	1992470	ArgumentList			1991657	1					
ANR	1992471	PrimaryExpression	0		1991657	1					
ANR	1992472	CompoundStatement		164:34:5239:5239	1991657	1					
ANR	1992473	ElseStatement	else		1991657	0					
ANR	1992474	CompoundStatement		167:11:5319:5319	1991657	0					
ANR	1992475	ExpressionStatement	"rAttr = rLabel = """""	945:7:21221:21240	1991657	0	True				
ANR	1992476	AssignmentExpression	"rAttr = rLabel = """""		1991657	0		=			
ANR	1992477	Identifier	rAttr		1991657	0					
ANR	1992478	AssignmentExpression	"rLabel = """""		1991657	1		=			
ANR	1992479	Identifier	rLabel		1991657	0					
ANR	1992480	PrimaryExpression	""""""		1991657	1					
ANR	1992481	ExpressionStatement	"splitString ( * r , rLabel , rAttr )"	946:7:21249:21279	1991657	1	True				
ANR	1992482	CallExpression	"splitString ( * r , rLabel , rAttr )"		1991657	0					
ANR	1992483	Callee	splitString		1991657	0					
ANR	1992484	Identifier	splitString		1991657	0					
ANR	1992485	ArgumentList	* r		1991657	1					
ANR	1992486	Argument	* r		1991657	0					
ANR	1992487	UnaryOperationExpression	* r		1991657	0					
ANR	1992488	UnaryOperator	*		1991657	0					
ANR	1992489	Identifier	r		1991657	1					
ANR	1992490	Argument	rLabel		1991657	1					
ANR	1992491	Identifier	rLabel		1991657	0					
ANR	1992492	Argument	rAttr		1991657	2					
ANR	1992493	Identifier	rAttr		1991657	0					
ANR	1992494	ExpressionStatement	rPortNode = pNodes [ rLabel ]	947:7:21288:21314	1991657	2	True				
ANR	1992495	AssignmentExpression	rPortNode = pNodes [ rLabel ]		1991657	0		=			
ANR	1992496	Identifier	rPortNode		1991657	0					
ANR	1992497	ArrayIndexing	pNodes [ rLabel ]		1991657	1					
ANR	1992498	Identifier	pNodes		1991657	0					
ANR	1992499	Identifier	rLabel		1991657	1					
ANR	1992500	ExpressionStatement	rPortNode -> AddExtAttrNode ( rAttr )	948:7:21323:21357	1991657	3	True				
ANR	1992501	CallExpression	rPortNode -> AddExtAttrNode ( rAttr )		1991657	0					
ANR	1992502	Callee	rPortNode -> AddExtAttrNode		1991657	0					
ANR	1992503	PtrMemberAccess	rPortNode -> AddExtAttrNode		1991657	0					
ANR	1992504	Identifier	rPortNode		1991657	0					
ANR	1992505	Identifier	AddExtAttrNode		1991657	1					
ANR	1992506	ArgumentList	rAttr		1991657	1					
ANR	1992507	Argument	rAttr		1991657	0					
ANR	1992508	Identifier	rAttr		1991657	0					
ANR	1992509	ExpressionStatement	eNode = pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )	951:7:21413:21460	1991657	4	True				
ANR	1992510	AssignmentExpression	eNode = pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )		1991657	0		=			
ANR	1992511	Identifier	eNode		1991657	0					
ANR	1992512	CallExpression	pNodes [ rLabel ] -> GetExtAttrNode ( rAttr )		1991657	1					
ANR	1992513	Callee	pNodes [ rLabel ] -> GetExtAttrNode		1991657	0					
ANR	1992514	PtrMemberAccess	pNodes [ rLabel ] -> GetExtAttrNode		1991657	0					
ANR	1992515	ArrayIndexing	pNodes [ rLabel ]		1991657	0					
ANR	1992516	Identifier	pNodes		1991657	0					
ANR	1992517	Identifier	rLabel		1991657	1					
ANR	1992518	Identifier	GetExtAttrNode		1991657	1					
ANR	1992519	ArgumentList	rAttr		1991657	1					
ANR	1992520	Argument	rAttr		1991657	0					
ANR	1992521	Identifier	rAttr		1991657	0					
ANR	1992522	ExpressionStatement	"pNode -> AddAttrDep ( attr , eNode )"	952:7:21469:21501	1991657	5	True				
ANR	1992523	CallExpression	"pNode -> AddAttrDep ( attr , eNode )"		1991657	0					
ANR	1992524	Callee	pNode -> AddAttrDep		1991657	0					
ANR	1992525	PtrMemberAccess	pNode -> AddAttrDep		1991657	0					
ANR	1992526	Identifier	pNode		1991657	0					
ANR	1992527	Identifier	AddAttrDep		1991657	1					
ANR	1992528	ArgumentList	attr		1991657	1					
ANR	1992529	Argument	attr		1991657	0					
ANR	1992530	Identifier	attr		1991657	0					
ANR	1992531	Argument	eNode		1991657	1					
ANR	1992532	Identifier	eNode		1991657	0					
ANR	1992533	ExpressionStatement	refs . clear ( )	956:4:21554:21566	1991657	2	True				
ANR	1992534	CallExpression	refs . clear ( )		1991657	0					
ANR	1992535	Callee	refs . clear		1991657	0					
ANR	1992536	MemberAccess	refs . clear		1991657	0					
ANR	1992537	Identifier	refs		1991657	0					
ANR	1992538	Identifier	clear		1991657	1					
ANR	1992539	ArgumentList			1991657	1					
ANR	1992540	ExpressionStatement	portNodes . push_back ( pNode )	958:3:21605:21633	1991657	12	True				
ANR	1992541	CallExpression	portNodes . push_back ( pNode )		1991657	0					
ANR	1992542	Callee	portNodes . push_back		1991657	0					
ANR	1992543	MemberAccess	portNodes . push_back		1991657	0					
ANR	1992544	Identifier	portNodes		1991657	0					
ANR	1992545	Identifier	push_back		1991657	1					
ANR	1992546	ArgumentList	pNode		1991657	1					
ANR	1992547	Argument	pNode		1991657	0					
ANR	1992548	Identifier	pNode		1991657	0					
ANR	1992549	ExpressionStatement	numPortNodes ++	959:3:21638:21652	1991657	13	True				
ANR	1992550	PostIncDecOperationExpression	numPortNodes ++		1991657	0					
ANR	1992551	Identifier	numPortNodes		1991657	0					
ANR	1992552	IncDec	++		1991657	1					
ANR	1992553	ExpressionStatement	portNum ++	960:3:21657:21666	1991657	14	True				
ANR	1992554	PostIncDecOperationExpression	portNum ++		1991657	0					
ANR	1992555	Identifier	portNum		1991657	0					
ANR	1992556	IncDec	++		1991657	1					
ANR	1992557	ExpressionStatement	pNodes . clear ( )	962:2:21695:21710	1991657	4	True				
ANR	1992558	CallExpression	pNodes . clear ( )		1991657	0					
ANR	1992559	Callee	pNodes . clear		1991657	0					
ANR	1992560	MemberAccess	pNodes . clear		1991657	0					
ANR	1992561	Identifier	pNodes		1991657	0					
ANR	1992562	Identifier	clear		1991657	1					
ANR	1992563	ArgumentList			1991657	1					
ANR	1992564	ExpressionStatement	portNum = 0	963:2:21714:21725	1991657	5	True				
ANR	1992565	AssignmentExpression	portNum = 0		1991657	0		=			
ANR	1992566	Identifier	portNum		1991657	0					
ANR	1992567	PrimaryExpression	0		1991657	1					
ANR	1992568	ExpressionStatement	adNum ++	964:2:21729:21736	1991657	6	True				
ANR	1992569	PostIncDecOperationExpression	adNum ++		1991657	0					
ANR	1992570	Identifier	adNum		1991657	0					
ANR	1992571	IncDec	++		1991657	1					
ANR	1992572	ReturnStatement	return true ;	966:1:21766:21777	1991657	29	True				
ANR	1992573	Identifier	true		1991657	0					
ANR	1992574	ReturnType	bool		1991657	1					
ANR	1992575	Identifier	PortGraph :: Initialize		1991657	2					
ANR	1992576	ParameterList	std :: vector < classad :: ClassAd * > & ads		1991657	3					
ANR	1992577	Parameter	std :: vector < classad :: ClassAd * > & ads	775:12:15753:15787	1991657	0	True				
ANR	1992578	ParameterType	std :: vector < classad :: ClassAd * > &		1991657	0					
ANR	1992579	Identifier	ads		1991657	1					
ANR	1992580	CFGEntryNode	ENTRY		1991657		True				
ANR	1992581	CFGExitNode	EXIT		1991657		True				
ANR	1992582	Symbol	pp		1991657						
ANR	1992583	Symbol	pNode -> AddClause		1991657						
ANR	1992584	Symbol	* pNodes		1991657						
ANR	1992585	Symbol	refs . end		1991657						
ANR	1992586	Symbol	reqExpr		1991657						
ANR	1992587	Symbol	l . CurrentExpr		1991657						
ANR	1992588	Symbol	label . c_str		1991657						
ANR	1992589	Symbol	rPortNode		1991657						
ANR	1992590	Symbol	ads . begin		1991657						
ANR	1992591	Symbol	* portAd		1991657						
ANR	1992592	Symbol	portAd -> FlattenAndInline		1991657						
ANR	1992593	Symbol	ad -> EvaluateAttr		1991657						
ANR	1992594	Symbol	buffer		1991657						
ANR	1992595	Symbol	strcasecmp		1991657						
ANR	1992596	Symbol	val		1991657						
ANR	1992597	Symbol	ad		1991657						
ANR	1992598	Symbol	NULL		1991657						
ANR	1992599	Symbol	el		1991657						
ANR	1992600	Symbol	profile		1991657						
ANR	1992601	Symbol	classad :: ExprTree :: CLASSAD_NODE		1991657						
ANR	1992602	Symbol	label . size		1991657						
ANR	1992603	Symbol	* pNode		1991657						
ANR	1992604	Symbol	BoolExpr :: ExprToMultiProfile		1991657						
ANR	1992605	Symbol	l . IsAfterLast		1991657						
ANR	1992606	Symbol	ads		1991657						
ANR	1992607	Symbol	eNode		1991657						
ANR	1992608	Symbol	* expr		1991657						
ANR	1992609	Symbol	* * rLabel		1991657						
ANR	1992610	Symbol	true		1991657						
ANR	1992611	Symbol	portNodes		1991657						
ANR	1992612	Symbol	pNodes		1991657						
ANR	1992613	Symbol	r -> c_str		1991657						
ANR	1992614	Symbol	ad -> GetExternalReferences		1991657						
ANR	1992615	Symbol	pNodes [ rLabel ] -> GetExtAttrNode		1991657						
ANR	1992616	Symbol	portAd -> Lookup		1991657						
ANR	1992617	Symbol	attr . c_str		1991657						
ANR	1992618	Symbol	* rLabel		1991657						
ANR	1992619	Symbol	rLabel		1991657						
ANR	1992620	Symbol	strncasecmp		1991657						
ANR	1992621	Symbol	* ad		1991657						
ANR	1992622	Symbol	clauseNum		1991657						
ANR	1992623	Symbol	attrIsRequirements		1991657						
ANR	1992624	Symbol	c . IsAfterLast		1991657						
ANR	1992625	Symbol	profile -> GetExpr		1991657						
ANR	1992626	Symbol	numPortNodes		1991657						
ANR	1992627	Symbol	expr		1991657						
ANR	1992628	Symbol	attr		1991657						
ANR	1992629	Symbol	val . IsListValue		1991657						
ANR	1992630	Symbol	pNode		1991657						
ANR	1992631	Symbol	* profile		1991657						
ANR	1992632	Symbol	refs . begin		1991657						
ANR	1992633	Symbol	a		1991657						
ANR	1992634	Symbol	expr -> GetKind		1991657						
ANR	1992635	Symbol	requirements		1991657						
ANR	1992636	Symbol	c		1991657						
ANR	1992637	Symbol	portNum		1991657						
ANR	1992638	Symbol	requirements -> NextProfile		1991657						
ANR	1992639	Symbol	adNum		1991657						
ANR	1992640	Symbol	rAttr		1991657						
ANR	1992641	Symbol	false		1991657						
ANR	1992642	Symbol	label		1991657						
ANR	1992643	Symbol	* a		1991657						
ANR	1992644	Symbol	flatExpr		1991657						
ANR	1992645	Symbol	l		1991657						
ANR	1992646	Symbol	portAd -> EvaluateAttrString		1991657						
ANR	1992647	Symbol	* requirements		1991657						
ANR	1992648	Symbol	r		1991657						
ANR	1992649	Symbol	portAd		1991657						
ANR	1992650	Symbol	refs		1991657						
ANR	1992651	Symbol	ads . end		1991657						
ANR	1992652	Symbol	* r		1991657						
ANR	1992653	Symbol	* * pNodes		1991657						
ANR	1992654	Symbol	* label		1991657						
ANR	1992655	Function	PortGraph :: Saturate	970:0:21831:22133							
ANR	1992656	FunctionDef	PortGraph :: Saturate ()		1992655	0					
ANR	1992657	CompoundStatement		972:0:21860:22133	1992655	0					
ANR	1992658	IdentifierDeclStatement	bool dirtyNodes = true ;	973:1:21863:21885	1992655	0	True				
ANR	1992659	IdentifierDecl	dirtyNodes = true		1992655	0					
ANR	1992660	IdentifierDeclType	bool		1992655	0					
ANR	1992661	Identifier	dirtyNodes		1992655	1					
ANR	1992662	AssignmentExpression	dirtyNodes = true		1992655	2		=			
ANR	1992663	Identifier	true		1992655	0					
ANR	1992664	Identifier	true		1992655	1					
ANR	1992665	WhileStatement	while ( dirtyNodes )		1992655	1					
ANR	1992666	Condition	dirtyNodes	974:8:21895:21904	1992655	0	True				
ANR	1992667	Identifier	dirtyNodes		1992655	0					
ANR	1992668	CompoundStatement		3:21:47:47	1992655	1					
ANR	1992669	ExpressionStatement	dirtyNodes = false	975:2:21912:21930	1992655	0	True				
ANR	1992670	AssignmentExpression	dirtyNodes = false		1992655	0		=			
ANR	1992671	Identifier	dirtyNodes		1992655	0					
ANR	1992672	Identifier	false		1992655	1					
ANR	1992673	ForStatement	for ( int i = 0 ; i < numPortNodes ; i ++ )		1992655	1					
ANR	1992674	ForInit	int i = 0 ;	976:7:21939:21948	1992655	0	True				
ANR	1992675	IdentifierDeclStatement	int i = 0 ;		1992655	0					
ANR	1992676	IdentifierDecl	i = 0		1992655	0					
ANR	1992677	IdentifierDeclType	int		1992655	0					
ANR	1992678	Identifier	i		1992655	1					
ANR	1992679	AssignmentExpression	i = 0		1992655	2		=			
ANR	1992680	Identifier	i		1992655	0					
ANR	1992681	PrimaryExpression	0		1992655	1					
ANR	1992682	Condition	i < numPortNodes	976:18:21950:21965	1992655	1	True				
ANR	1992683	RelationalExpression	i < numPortNodes		1992655	0		<			
ANR	1992684	Identifier	i		1992655	0					
ANR	1992685	Identifier	numPortNodes		1992655	1					
ANR	1992686	PostIncDecOperationExpression	i ++	976:36:21968:21970	1992655	2	True				
ANR	1992687	Identifier	i		1992655	0					
ANR	1992688	IncDec	++		1992655	1					
ANR	1992689	CompoundStatement		5:42:113:113	1992655	3					
ANR	1992690	ForStatement	for ( int j = 0 ; j < numPortNodes ; j ++ )		1992655	0					
ANR	1992691	ForInit	int j = 0 ;	977:8:21984:21993	1992655	0	True				
ANR	1992692	IdentifierDeclStatement	int j = 0 ;		1992655	0					
ANR	1992693	IdentifierDecl	j = 0		1992655	0					
ANR	1992694	IdentifierDeclType	int		1992655	0					
ANR	1992695	Identifier	j		1992655	1					
ANR	1992696	AssignmentExpression	j = 0		1992655	2		=			
ANR	1992697	Identifier	j		1992655	0					
ANR	1992698	PrimaryExpression	0		1992655	1					
ANR	1992699	Condition	j < numPortNodes	977:19:21995:22010	1992655	1	True				
ANR	1992700	RelationalExpression	j < numPortNodes		1992655	0		<			
ANR	1992701	Identifier	j		1992655	0					
ANR	1992702	Identifier	numPortNodes		1992655	1					
ANR	1992703	PostIncDecOperationExpression	j ++	977:37:22013:22015	1992655	2	True				
ANR	1992704	Identifier	j		1992655	0					
ANR	1992705	IncDec	++		1992655	1					
ANR	1992706	CompoundStatement		6:43:158:158	1992655	3					
ANR	1992707	IfStatement	"if ( AddMatchEdges ( portNodes [ i ] , portNodes [ j ] ) )"		1992655	0					
ANR	1992708	Condition	"AddMatchEdges ( portNodes [ i ] , portNodes [ j ] )"	978:8:22029:22071	1992655	0	True				
ANR	1992709	CallExpression	"AddMatchEdges ( portNodes [ i ] , portNodes [ j ] )"		1992655	0					
ANR	1992710	Callee	AddMatchEdges		1992655	0					
ANR	1992711	Identifier	AddMatchEdges		1992655	0					
ANR	1992712	ArgumentList	portNodes [ i ]		1992655	1					
ANR	1992713	Argument	portNodes [ i ]		1992655	0					
ANR	1992714	ArrayIndexing	portNodes [ i ]		1992655	0					
ANR	1992715	Identifier	portNodes		1992655	0					
ANR	1992716	Identifier	i		1992655	1					
ANR	1992717	Argument	portNodes [ j ]		1992655	1					
ANR	1992718	ArrayIndexing	portNodes [ j ]		1992655	0					
ANR	1992719	Identifier	portNodes		1992655	0					
ANR	1992720	Identifier	j		1992655	1					
ANR	1992721	CompoundStatement		7:54:214:214	1992655	1					
ANR	1992722	ExpressionStatement	dirtyNodes = true	979:5:22082:22099	1992655	0	True				
ANR	1992723	AssignmentExpression	dirtyNodes = true		1992655	0		=			
ANR	1992724	Identifier	dirtyNodes		1992655	0					
ANR	1992725	Identifier	true		1992655	1					
ANR	1992726	ReturnStatement	return true ;	984:1:22120:22131	1992655	2	True				
ANR	1992727	Identifier	true		1992655	0					
ANR	1992728	ReturnType	bool		1992655	1					
ANR	1992729	Identifier	PortGraph :: Saturate		1992655	2					
ANR	1992730	ParameterList			1992655	3					
ANR	1992731	CFGEntryNode	ENTRY		1992655		True				
ANR	1992732	CFGExitNode	EXIT		1992655		True				
ANR	1992733	Symbol	* i		1992655						
ANR	1992734	Symbol	* portNodes		1992655						
ANR	1992735	Symbol	* j		1992655						
ANR	1992736	Symbol	numPortNodes		1992655						
ANR	1992737	Symbol	true		1992655						
ANR	1992738	Symbol	false		1992655						
ANR	1992739	Symbol	i		1992655						
ANR	1992740	Symbol	j		1992655						
ANR	1992741	Symbol	portNodes		1992655						
ANR	1992742	Symbol	AddMatchEdges		1992655						
ANR	1992743	Symbol	dirtyNodes		1992655						
ANR	1992744	Function	PortGraph :: AddMatchEdges	987:0:22136:25338							
ANR	1992745	FunctionDef	"PortGraph :: AddMatchEdges (PortNode * p1 , PortNode * p2)"		1992744	0					
ANR	1992746	CompoundStatement		989:0:22197:25338	1992744	0					
ANR	1992747	IdentifierDeclStatement	bool success = false ;	995:1:22391:22411	1992744	0	True				
ANR	1992748	IdentifierDecl	success = false		1992744	0					
ANR	1992749	IdentifierDeclType	bool		1992744	0					
ANR	1992750	Identifier	success		1992744	1					
ANR	1992751	AssignmentExpression	success = false		1992744	2		=			
ANR	1992752	Identifier	false		1992744	0					
ANR	1992753	Identifier	false		1992744	1					
ANR	1992754	IdentifierDeclStatement	std :: set < ExtAttrNode * > depsSet ;	998:1:22463:22493	1992744	1	True				
ANR	1992755	IdentifierDecl	depsSet		1992744	0					
ANR	1992756	IdentifierDeclType	std :: set < ExtAttrNode * >		1992744	0					
ANR	1992757	Identifier	depsSet		1992744	1					
ANR	1992758	IdentifierDeclStatement	std :: vector < MatchPath * > paths ;	999:1:22496:22525	1992744	2	True				
ANR	1992759	IdentifierDecl	paths		1992744	0					
ANR	1992760	IdentifierDeclType	std :: vector < MatchPath * >		1992744	0					
ANR	1992761	Identifier	paths		1992744	1					
ANR	1992762	IdentifierDeclStatement	std :: vector < ExtAttrNode * > deps ;	1000:1:22528:22558	1992744	3	True				
ANR	1992763	IdentifierDecl	deps		1992744	0					
ANR	1992764	IdentifierDeclType	std :: vector < ExtAttrNode * >		1992744	0					
ANR	1992765	Identifier	deps		1992744	1					
ANR	1992766	IdentifierDeclStatement	std :: set < ExtAttrNode * > :: iterator d ;	1001:1:22561:22595	1992744	4	True				
ANR	1992767	IdentifierDecl	d		1992744	0					
ANR	1992768	IdentifierDeclType	std :: set < ExtAttrNode * > :: iterator		1992744	0					
ANR	1992769	Identifier	d		1992744	1					
ANR	1992770	ForStatement	for ( unsigned int clauseNum = 0 ; clauseNum < p1 -> GetNumClauses ( ) ; clauseNum ++ )		1992744	5					
ANR	1992771	ForInit	unsigned int clauseNum = 0 ;	1003:6:22604:22630	1992744	0	True				
ANR	1992772	IdentifierDeclStatement	unsigned int clauseNum = 0 ;		1992744	0					
ANR	1992773	IdentifierDecl	clauseNum = 0		1992744	0					
ANR	1992774	IdentifierDeclType	unsigned int		1992744	0					
ANR	1992775	Identifier	clauseNum		1992744	1					
ANR	1992776	AssignmentExpression	clauseNum = 0		1992744	2		=			
ANR	1992777	Identifier	clauseNum		1992744	0					
ANR	1992778	PrimaryExpression	0		1992744	1					
ANR	1992779	Condition	clauseNum < p1 -> GetNumClauses ( )	1003:34:22632:22663	1992744	1	True				
ANR	1992780	RelationalExpression	clauseNum < p1 -> GetNumClauses ( )		1992744	0		<			
ANR	1992781	Identifier	clauseNum		1992744	0					
ANR	1992782	CallExpression	p1 -> GetNumClauses ( )		1992744	1					
ANR	1992783	Callee	p1 -> GetNumClauses		1992744	0					
ANR	1992784	PtrMemberAccess	p1 -> GetNumClauses		1992744	0					
ANR	1992785	Identifier	p1		1992744	0					
ANR	1992786	Identifier	GetNumClauses		1992744	1					
ANR	1992787	ArgumentList			1992744	1					
ANR	1992788	PostIncDecOperationExpression	clauseNum ++	1004:3:22669:22679	1992744	2	True				
ANR	1992789	Identifier	clauseNum		1992744	0					
ANR	1992790	IncDec	++		1992744	1					
ANR	1992791	CompoundStatement		16:17:485:485	1992744	3					
ANR	1992792	ExpressionStatement	"p1 -> GetReqDeps ( clauseNum , depsSet )"	1005:2:22687:22723	1992744	0	True				
ANR	1992793	CallExpression	"p1 -> GetReqDeps ( clauseNum , depsSet )"		1992744	0					
ANR	1992794	Callee	p1 -> GetReqDeps		1992744	0					
ANR	1992795	PtrMemberAccess	p1 -> GetReqDeps		1992744	0					
ANR	1992796	Identifier	p1		1992744	0					
ANR	1992797	Identifier	GetReqDeps		1992744	1					
ANR	1992798	ArgumentList	clauseNum		1992744	1					
ANR	1992799	Argument	clauseNum		1992744	0					
ANR	1992800	Identifier	clauseNum		1992744	0					
ANR	1992801	Argument	depsSet		1992744	1					
ANR	1992802	Identifier	depsSet		1992744	0					
ANR	1992803	ExpressionStatement	p2 -> GetAttrDeps ( depsSet )	1006:2:22727:22753	1992744	1	True				
ANR	1992804	CallExpression	p2 -> GetAttrDeps ( depsSet )		1992744	0					
ANR	1992805	Callee	p2 -> GetAttrDeps		1992744	0					
ANR	1992806	PtrMemberAccess	p2 -> GetAttrDeps		1992744	0					
ANR	1992807	Identifier	p2		1992744	0					
ANR	1992808	Identifier	GetAttrDeps		1992744	1					
ANR	1992809	ArgumentList	depsSet		1992744	1					
ANR	1992810	Argument	depsSet		1992744	0					
ANR	1992811	Identifier	depsSet		1992744	0					
ANR	1992812	IfStatement	if ( depsSet . size ( ) == 0 )		1992744	2					
ANR	1992813	Condition	depsSet . size ( ) == 0	1007:6:22761:22780	1992744	0	True				
ANR	1992814	EqualityExpression	depsSet . size ( ) == 0		1992744	0		==			
ANR	1992815	CallExpression	depsSet . size ( )		1992744	0					
ANR	1992816	Callee	depsSet . size		1992744	0					
ANR	1992817	MemberAccess	depsSet . size		1992744	0					
ANR	1992818	Identifier	depsSet		1992744	0					
ANR	1992819	Identifier	size		1992744	1					
ANR	1992820	ArgumentList			1992744	1					
ANR	1992821	PrimaryExpression	0		1992744	1					
ANR	1992822	CompoundStatement		19:29:586:586	1992744	1					
ANR	1992823	IfStatement	"if ( EvalReqs ( p1 , p2 , paths ) )"		1992744	0					
ANR	1992824	Condition	"EvalReqs ( p1 , p2 , paths )"	1010:7:22852:22876	1992744	0	True				
ANR	1992825	CallExpression	"EvalReqs ( p1 , p2 , paths )"		1992744	0					
ANR	1992826	Callee	EvalReqs		1992744	0					
ANR	1992827	Identifier	EvalReqs		1992744	0					
ANR	1992828	ArgumentList	p1		1992744	1					
ANR	1992829	Argument	p1		1992744	0					
ANR	1992830	Identifier	p1		1992744	0					
ANR	1992831	Argument	p2		1992744	1					
ANR	1992832	Identifier	p2		1992744	0					
ANR	1992833	Argument	paths		1992744	2					
ANR	1992834	Identifier	paths		1992744	0					
ANR	1992835	CompoundStatement		22:35:682:682	1992744	1					
ANR	1992836	IfStatement	"if ( AddMatchEdge ( p1 , p2 , paths ) )"		1992744	0					
ANR	1992837	Condition	"AddMatchEdge ( p1 , p2 , paths )"	1011:8:22890:22918	1992744	0	True				
ANR	1992838	CallExpression	"AddMatchEdge ( p1 , p2 , paths )"		1992744	0					
ANR	1992839	Callee	AddMatchEdge		1992744	0					
ANR	1992840	Identifier	AddMatchEdge		1992744	0					
ANR	1992841	ArgumentList	p1		1992744	1					
ANR	1992842	Argument	p1		1992744	0					
ANR	1992843	Identifier	p1		1992744	0					
ANR	1992844	Argument	p2		1992744	1					
ANR	1992845	Identifier	p2		1992744	0					
ANR	1992846	Argument	paths		1992744	2					
ANR	1992847	Identifier	paths		1992744	0					
ANR	1992848	CompoundStatement		23:40:724:724	1992744	1					
ANR	1992849	ReturnStatement	return true ;	1012:5:22929:22940	1992744	0	True				
ANR	1992850	Identifier	true		1992744	0					
ANR	1992851	ReturnStatement	return false ;	1015:3:22957:22969	1992744	1	True				
ANR	1992852	Identifier	false		1992744	0					
ANR	1992853	ElseStatement	else		1992744	0					
ANR	1992854	CompoundStatement		51:3:1508:1526	1992744	0					
ANR	1992855	ForStatement	for ( d = depsSet . begin ( ) ; d != depsSet . end ( ) ; d ++ )		1992744	0					
ANR	1992856	ForInit	d = depsSet . begin ( ) ;	1021:8:23161:23181	1992744	0	True				
ANR	1992857	AssignmentExpression	d = depsSet . begin ( )		1992744	0		=			
ANR	1992858	Identifier	d		1992744	0					
ANR	1992859	CallExpression	depsSet . begin ( )		1992744	1					
ANR	1992860	Callee	depsSet . begin		1992744	0					
ANR	1992861	MemberAccess	depsSet . begin		1992744	0					
ANR	1992862	Identifier	depsSet		1992744	0					
ANR	1992863	Identifier	begin		1992744	1					
ANR	1992864	ArgumentList			1992744	1					
ANR	1992865	Condition	d != depsSet . end ( )	1021:30:23183:23201	1992744	1	True				
ANR	1992866	EqualityExpression	d != depsSet . end ( )		1992744	0		!=			
ANR	1992867	Identifier	d		1992744	0					
ANR	1992868	CallExpression	depsSet . end ( )		1992744	1					
ANR	1992869	Callee	depsSet . end		1992744	0					
ANR	1992870	MemberAccess	depsSet . end		1992744	0					
ANR	1992871	Identifier	depsSet		1992744	0					
ANR	1992872	Identifier	end		1992744	1					
ANR	1992873	ArgumentList			1992744	1					
ANR	1992874	PostIncDecOperationExpression	d ++	1021:51:23204:23206	1992744	2	True				
ANR	1992875	Identifier	d		1992744	0					
ANR	1992876	IncDec	++		1992744	1					
ANR	1992877	CompoundStatement		33:57:1012:1012	1992744	3					
ANR	1992878	ExpressionStatement	deps . push_back ( * d )	1022:4:23216:23236	1992744	0	True				
ANR	1992879	CallExpression	deps . push_back ( * d )		1992744	0					
ANR	1992880	Callee	deps . push_back		1992744	0					
ANR	1992881	MemberAccess	deps . push_back		1992744	0					
ANR	1992882	Identifier	deps		1992744	0					
ANR	1992883	Identifier	push_back		1992744	1					
ANR	1992884	ArgumentList	* d		1992744	1					
ANR	1992885	Argument	* d		1992744	0					
ANR	1992886	UnaryOperationExpression	* d		1992744	0					
ANR	1992887	UnaryOperator	*		1992744	0					
ANR	1992888	Identifier	d		1992744	1					
ANR	1992889	IdentifierDeclStatement	MatchPath * path = NULL ;	1028:3:23368:23390	1992744	1	True				
ANR	1992890	IdentifierDecl	* path = NULL		1992744	0					
ANR	1992891	IdentifierDeclType	MatchPath *		1992744	0					
ANR	1992892	Identifier	path		1992744	1					
ANR	1992893	AssignmentExpression	* path = NULL		1992744	2		=			
ANR	1992894	Identifier	NULL		1992744	0					
ANR	1992895	Identifier	NULL		1992744	1					
ANR	1992896	ForStatement	for ( unsigned int i = 0 ; i < deps . size ( ) ; i ++ )		1992744	2					
ANR	1992897	ForInit	unsigned int i = 0 ;	1029:8:23400:23418	1992744	0	True				
ANR	1992898	IdentifierDeclStatement	unsigned int i = 0 ;		1992744	0					
ANR	1992899	IdentifierDecl	i = 0		1992744	0					
ANR	1992900	IdentifierDeclType	unsigned int		1992744	0					
ANR	1992901	Identifier	i		1992744	1					
ANR	1992902	AssignmentExpression	i = 0		1992744	2		=			
ANR	1992903	Identifier	i		1992744	0					
ANR	1992904	PrimaryExpression	0		1992744	1					
ANR	1992905	Condition	i < deps . size ( )	1029:28:23420:23435	1992744	1	True				
ANR	1992906	RelationalExpression	i < deps . size ( )		1992744	0		<			
ANR	1992907	Identifier	i		1992744	0					
ANR	1992908	CallExpression	deps . size ( )		1992744	1					
ANR	1992909	Callee	deps . size		1992744	0					
ANR	1992910	MemberAccess	deps . size		1992744	0					
ANR	1992911	Identifier	deps		1992744	0					
ANR	1992912	Identifier	size		1992744	1					
ANR	1992913	ArgumentList			1992744	1					
ANR	1992914	PostIncDecOperationExpression	i ++	1029:46:23438:23441	1992744	2	True				
ANR	1992915	Identifier	i		1992744	0					
ANR	1992916	IncDec	++		1992744	1					
ANR	1992917	CompoundStatement		41:53:1247:1247	1992744	3					
ANR	1992918	ExpressionStatement	path = deps [ i ] -> GetFirstPath ( )	1030:4:23451:23482	1992744	0	True				
ANR	1992919	AssignmentExpression	path = deps [ i ] -> GetFirstPath ( )		1992744	0		=			
ANR	1992920	Identifier	path		1992744	0					
ANR	1992921	CallExpression	deps [ i ] -> GetFirstPath ( )		1992744	1					
ANR	1992922	Callee	deps [ i ] -> GetFirstPath		1992744	0					
ANR	1992923	PtrMemberAccess	deps [ i ] -> GetFirstPath		1992744	0					
ANR	1992924	ArrayIndexing	deps [ i ]		1992744	0					
ANR	1992925	Identifier	deps		1992744	0					
ANR	1992926	Identifier	i		1992744	1					
ANR	1992927	Identifier	GetFirstPath		1992744	1					
ANR	1992928	ArgumentList			1992744	1					
ANR	1992929	IfStatement	if ( path )		1992744	1					
ANR	1992930	Condition	path	1031:8:23492:23495	1992744	0	True				
ANR	1992931	Identifier	path		1992744	0					
ANR	1992932	CompoundStatement		43:15:1301:1301	1992744	1					
ANR	1992933	ExpressionStatement	paths . push_back ( path )	1032:5:23506:23529	1992744	0	True				
ANR	1992934	CallExpression	paths . push_back ( path )		1992744	0					
ANR	1992935	Callee	paths . push_back		1992744	0					
ANR	1992936	MemberAccess	paths . push_back		1992744	0					
ANR	1992937	Identifier	paths		1992744	0					
ANR	1992938	Identifier	push_back		1992744	1					
ANR	1992939	ArgumentList	path		1992744	1					
ANR	1992940	Argument	path		1992744	0					
ANR	1992941	Identifier	path		1992744	0					
ANR	1992942	IdentifierDeclStatement	bool moreCombos = true ;	1038:3:23679:23701	1992744	3	True				
ANR	1992943	IdentifierDecl	moreCombos = true		1992744	0					
ANR	1992944	IdentifierDeclType	bool		1992744	0					
ANR	1992945	Identifier	moreCombos		1992744	1					
ANR	1992946	AssignmentExpression	moreCombos = true		1992744	2		=			
ANR	1992947	Identifier	true		1992744	0					
ANR	1992948	Identifier	true		1992744	1					
ANR	1992949	IdentifierDeclStatement	unsigned int i = 0 ;	1039:3:23706:23724	1992744	4	True				
ANR	1992950	IdentifierDecl	i = 0		1992744	0					
ANR	1992951	IdentifierDeclType	unsigned int		1992744	0					
ANR	1992952	Identifier	i		1992744	1					
ANR	1992953	AssignmentExpression	i = 0		1992744	2		=			
ANR	1992954	Identifier	i		1992744	0					
ANR	1992955	PrimaryExpression	0		1992744	1					
ANR	1992956	WhileStatement	while ( moreCombos )		1992744	5					
ANR	1992957	Condition	moreCombos	1040:10:23736:23745	1992744	0	True				
ANR	1992958	Identifier	moreCombos		1992744	0					
ANR	1992959	CompoundStatement		71:4:2234:2253	1992744	1					
ANR	1992960	IfStatement	"if ( EvalReqs ( p1 , p2 , paths ) )"		1992744	0					
ANR	1992961	Condition	"EvalReqs ( p1 , p2 , paths )"	1047:8:24016:24040	1992744	0	True				
ANR	1992962	CallExpression	"EvalReqs ( p1 , p2 , paths )"		1992744	0					
ANR	1992963	Callee	EvalReqs		1992744	0					
ANR	1992964	Identifier	EvalReqs		1992744	0					
ANR	1992965	ArgumentList	p1		1992744	1					
ANR	1992966	Argument	p1		1992744	0					
ANR	1992967	Identifier	p1		1992744	0					
ANR	1992968	Argument	p2		1992744	1					
ANR	1992969	Identifier	p2		1992744	0					
ANR	1992970	Argument	paths		1992744	2					
ANR	1992971	Identifier	paths		1992744	0					
ANR	1992972	CompoundStatement		59:36:1846:1846	1992744	1					
ANR	1992973	IfStatement	"if ( AddMatchEdge ( p1 , p2 , paths ) )"		1992744	0					
ANR	1992974	Condition	"AddMatchEdge ( p1 , p2 , paths )"	1053:10:24262:24290	1992744	0	True				
ANR	1992975	CallExpression	"AddMatchEdge ( p1 , p2 , paths )"		1992744	0					
ANR	1992976	Callee	AddMatchEdge		1992744	0					
ANR	1992977	Identifier	AddMatchEdge		1992744	0					
ANR	1992978	ArgumentList	p1		1992744	1					
ANR	1992979	Argument	p1		1992744	0					
ANR	1992980	Identifier	p1		1992744	0					
ANR	1992981	Argument	p2		1992744	1					
ANR	1992982	Identifier	p2		1992744	0					
ANR	1992983	Argument	paths		1992744	2					
ANR	1992984	Identifier	paths		1992744	0					
ANR	1992985	CompoundStatement		65:42:2096:2096	1992744	1					
ANR	1992986	ExpressionStatement	success = true	1054:6:24302:24316	1992744	0	True				
ANR	1992987	AssignmentExpression	success = true		1992744	0		=			
ANR	1992988	Identifier	success		1992744	0					
ANR	1992989	Identifier	true		1992744	1					
ANR	1992990	IdentifierDeclStatement	bool incNext = true ;	1059:4:24432:24451	1992744	1	True				
ANR	1992991	IdentifierDecl	incNext = true		1992744	0					
ANR	1992992	IdentifierDeclType	bool		1992744	0					
ANR	1992993	Identifier	incNext		1992744	1					
ANR	1992994	AssignmentExpression	incNext = true		1992744	2		=			
ANR	1992995	Identifier	true		1992744	0					
ANR	1992996	Identifier	true		1992744	1					
ANR	1992997	WhileStatement	while ( incNext )		1992744	2					
ANR	1992998	Condition	incNext	1060:11:24464:24470	1992744	0	True				
ANR	1992999	Identifier	incNext		1992744	0					
ANR	1993000	CompoundStatement		72:21:2276:2276	1992744	1					
ANR	1993001	ExpressionStatement	path = deps [ i ] -> GetNextPath ( )	1061:5:24481:24511	1992744	0	True				
ANR	1993002	AssignmentExpression	path = deps [ i ] -> GetNextPath ( )		1992744	0		=			
ANR	1993003	Identifier	path		1992744	0					
ANR	1993004	CallExpression	deps [ i ] -> GetNextPath ( )		1992744	1					
ANR	1993005	Callee	deps [ i ] -> GetNextPath		1992744	0					
ANR	1993006	PtrMemberAccess	deps [ i ] -> GetNextPath		1992744	0					
ANR	1993007	ArrayIndexing	deps [ i ]		1992744	0					
ANR	1993008	Identifier	deps		1992744	0					
ANR	1993009	Identifier	i		1992744	1					
ANR	1993010	Identifier	GetNextPath		1992744	1					
ANR	1993011	ArgumentList			1992744	1					
ANR	1993012	IfStatement	if ( ! path )		1992744	1					
ANR	1993013	Condition	! path	1062:9:24522:24526	1992744	0	True				
ANR	1993014	UnaryOperationExpression	! path		1992744	0					
ANR	1993015	UnaryOperator	!		1992744	0					
ANR	1993016	Identifier	path		1992744	1					
ANR	1993017	CompoundStatement		74:17:2332:2332	1992744	1					
ANR	1993018	IfStatement	if ( i < deps . size ( ) - 1 )		1992744	0					
ANR	1993019	Condition	i < deps . size ( ) - 1	1067:10:24688:24707	1992744	0	True				
ANR	1993020	RelationalExpression	i < deps . size ( ) - 1		1992744	0		<			
ANR	1993021	Identifier	i		1992744	0					
ANR	1993022	AdditiveExpression	deps . size ( ) - 1		1992744	1		-			
ANR	1993023	CallExpression	deps . size ( )		1992744	0					
ANR	1993024	Callee	deps . size		1992744	0					
ANR	1993025	MemberAccess	deps . size		1992744	0					
ANR	1993026	Identifier	deps		1992744	0					
ANR	1993027	Identifier	size		1992744	1					
ANR	1993028	ArgumentList			1992744	1					
ANR	1993029	PrimaryExpression	1		1992744	1					
ANR	1993030	CompoundStatement		79:33:2513:2513	1992744	1					
ANR	1993031	ExpressionStatement	path = deps [ i ] -> GetFirstPath ( )	1070:7:24811:24842	1992744	0	True				
ANR	1993032	AssignmentExpression	path = deps [ i ] -> GetFirstPath ( )		1992744	0		=			
ANR	1993033	Identifier	path		1992744	0					
ANR	1993034	CallExpression	deps [ i ] -> GetFirstPath ( )		1992744	1					
ANR	1993035	Callee	deps [ i ] -> GetFirstPath		1992744	0					
ANR	1993036	PtrMemberAccess	deps [ i ] -> GetFirstPath		1992744	0					
ANR	1993037	ArrayIndexing	deps [ i ]		1992744	0					
ANR	1993038	Identifier	deps		1992744	0					
ANR	1993039	Identifier	i		1992744	1					
ANR	1993040	Identifier	GetFirstPath		1992744	1					
ANR	1993041	ArgumentList			1992744	1					
ANR	1993042	IfStatement	if ( ! path )		1992744	1					
ANR	1993043	Condition	! path	1071:11:24855:24859	1992744	0	True				
ANR	1993044	UnaryOperationExpression	! path		1992744	0					
ANR	1993045	UnaryOperator	!		1992744	0					
ANR	1993046	Identifier	path		1992744	1					
ANR	1993047	CompoundStatement		83:19:2665:2665	1992744	1					
ANR	1993048	ReturnStatement	return false ;	1072:8:24873:24885	1992744	0	True				
ANR	1993049	Identifier	false		1992744	0					
ANR	1993050	ExpressionStatement	paths [ i ] = path	1074:7:24903:24918	1992744	2	True				
ANR	1993051	AssignmentExpression	paths [ i ] = path		1992744	0		=			
ANR	1993052	ArrayIndexing	paths [ i ]		1992744	0					
ANR	1993053	Identifier	paths		1992744	0					
ANR	1993054	Identifier	i		1992744	1					
ANR	1993055	Identifier	path		1992744	1					
ANR	1993056	ExpressionStatement	i ++	1075:7:24927:24930	1992744	3	True				
ANR	1993057	PostIncDecOperationExpression	i ++		1992744	0					
ANR	1993058	Identifier	i		1992744	0					
ANR	1993059	IncDec	++		1992744	1					
ANR	1993060	ElseStatement	else		1992744	0					
ANR	1993061	CompoundStatement		89:11:2753:2753	1992744	0					
ANR	1993062	ExpressionStatement	incNext = false	1080:7:25056:25071	1992744	0	True				
ANR	1993063	AssignmentExpression	incNext = false		1992744	0		=			
ANR	1993064	Identifier	incNext		1992744	0					
ANR	1993065	Identifier	false		1992744	1					
ANR	1993066	ExpressionStatement	moreCombos = false	1081:7:25080:25098	1992744	1	True				
ANR	1993067	AssignmentExpression	moreCombos = false		1992744	0		=			
ANR	1993068	Identifier	moreCombos		1992744	0					
ANR	1993069	Identifier	false		1992744	1					
ANR	1993070	ElseStatement	else		1992744	0					
ANR	1993071	CompoundStatement		96:10:2927:2927	1992744	0					
ANR	1993072	ExpressionStatement	paths [ i ] = path	1085:6:25133:25148	1992744	0	True				
ANR	1993073	AssignmentExpression	paths [ i ] = path		1992744	0		=			
ANR	1993074	ArrayIndexing	paths [ i ]		1992744	0					
ANR	1993075	Identifier	paths		1992744	0					
ANR	1993076	Identifier	i		1992744	1					
ANR	1993077	Identifier	path		1992744	1					
ANR	1993078	ExpressionStatement	incNext = false	1086:6:25156:25171	1992744	1	True				
ANR	1993079	AssignmentExpression	incNext = false		1992744	0		=			
ANR	1993080	Identifier	incNext		1992744	0					
ANR	1993081	Identifier	false		1992744	1					
ANR	1993082	ExpressionStatement	depsSet . clear ( )	1091:2:25197:25213	1992744	3	True				
ANR	1993083	CallExpression	depsSet . clear ( )		1992744	0					
ANR	1993084	Callee	depsSet . clear		1992744	0					
ANR	1993085	MemberAccess	depsSet . clear		1992744	0					
ANR	1993086	Identifier	depsSet		1992744	0					
ANR	1993087	Identifier	clear		1992744	1					
ANR	1993088	ArgumentList			1992744	1					
ANR	1993089	ExpressionStatement	paths . clear ( )	1092:2:25217:25231	1992744	4	True				
ANR	1993090	CallExpression	paths . clear ( )		1992744	0					
ANR	1993091	Callee	paths . clear		1992744	0					
ANR	1993092	MemberAccess	paths . clear		1992744	0					
ANR	1993093	Identifier	paths		1992744	0					
ANR	1993094	Identifier	clear		1992744	1					
ANR	1993095	ArgumentList			1992744	1					
ANR	1993096	ExpressionStatement	deps . clear ( )	1093:2:25235:25248	1992744	5	True				
ANR	1993097	CallExpression	deps . clear ( )		1992744	0					
ANR	1993098	Callee	deps . clear		1992744	0					
ANR	1993099	MemberAccess	deps . clear		1992744	0					
ANR	1993100	Identifier	deps		1992744	0					
ANR	1993101	Identifier	clear		1992744	1					
ANR	1993102	ArgumentList			1992744	1					
ANR	1993103	ReturnStatement	return success ;	1097:1:25322:25336	1992744	6	True				
ANR	1993104	Identifier	success		1992744	0					
ANR	1993105	ReturnType	bool		1992744	1					
ANR	1993106	Identifier	PortGraph :: AddMatchEdges		1992744	2					
ANR	1993107	ParameterList	"PortNode * p1 , PortNode * p2"		1992744	3					
ANR	1993108	Parameter	PortNode * p1	988:15:22168:22179	1992744	0	True				
ANR	1993109	ParameterType	PortNode *		1992744	0					
ANR	1993110	Identifier	p1		1992744	1					
ANR	1993111	Parameter	PortNode * p2	988:29:22182:22193	1992744	1	True				
ANR	1993112	ParameterType	PortNode *		1992744	0					
ANR	1993113	Identifier	p2		1992744	1					
ANR	1993114	CFGEntryNode	ENTRY		1992744		True				
ANR	1993115	CFGExitNode	EXIT		1992744		True				
ANR	1993116	Symbol	* paths		1992744						
ANR	1993117	Symbol	p1		1992744						
ANR	1993118	Symbol	p2		1992744						
ANR	1993119	Symbol	AddMatchEdge		1992744						
ANR	1993120	Symbol	p1 -> GetNumClauses		1992744						
ANR	1993121	Symbol	depsSet . size		1992744						
ANR	1993122	Symbol	incNext		1992744						
ANR	1993123	Symbol	clauseNum		1992744						
ANR	1993124	Symbol	deps [ i ] -> GetFirstPath		1992744						
ANR	1993125	Symbol	path		1992744						
ANR	1993126	Symbol	depsSet		1992744						
ANR	1993127	Symbol	depsSet . end		1992744						
ANR	1993128	Symbol	EvalReqs		1992744						
ANR	1993129	Symbol	deps [ i ] -> GetNextPath		1992744						
ANR	1993130	Symbol	* * i		1992744						
ANR	1993131	Symbol	NULL		1992744						
ANR	1993132	Symbol	d		1992744						
ANR	1993133	Symbol	* p1		1992744						
ANR	1993134	Symbol	* * deps		1992744						
ANR	1993135	Symbol	* deps		1992744						
ANR	1993136	Symbol	false		1992744						
ANR	1993137	Symbol	deps . size		1992744						
ANR	1993138	Symbol	i		1992744						
ANR	1993139	Symbol	deps		1992744						
ANR	1993140	Symbol	moreCombos		1992744						
ANR	1993141	Symbol	* d		1992744						
ANR	1993142	Symbol	* i		1992744						
ANR	1993143	Symbol	success		1992744						
ANR	1993144	Symbol	paths		1992744						
ANR	1993145	Symbol	true		1992744						
ANR	1993146	Symbol	depsSet . begin		1992744						
ANR	1993147	Function	PortGraph :: EvalReqs	1100:0:25341:27855							
ANR	1993148	FunctionDef	"PortGraph :: EvalReqs (PortNode * p1 , PortNode * p2 , std :: vector < MatchPath * > & paths)"		1993147	0					
ANR	1993149	CompoundStatement		1102:0:25429:27855	1993147	0					
ANR	1993150	IdentifierDeclStatement	classad :: ClassAd * ad1 = ( classad :: ClassAd * ) p1 -> GetParentAd ( ) -> Copy ( ) ;	1104:1:25459:25529	1993147	0	True				
ANR	1993151	IdentifierDecl	* ad1 = ( classad :: ClassAd * ) p1 -> GetParentAd ( ) -> Copy ( )		1993147	0					
ANR	1993152	IdentifierDeclType	classad :: ClassAd *		1993147	0					
ANR	1993153	Identifier	ad1		1993147	1					
ANR	1993154	AssignmentExpression	* ad1 = ( classad :: ClassAd * ) p1 -> GetParentAd ( ) -> Copy ( )		1993147	2		=			
ANR	1993155	Identifier	ad1		1993147	0					
ANR	1993156	CastExpression	( classad :: ClassAd * ) p1 -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993157	CastTarget	classad :: ClassAd *		1993147	0					
ANR	1993158	CallExpression	p1 -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993159	Callee	p1 -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993160	PtrMemberAccess	p1 -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993161	CallExpression	p1 -> GetParentAd ( )		1993147	0					
ANR	1993162	Callee	p1 -> GetParentAd		1993147	0					
ANR	1993163	PtrMemberAccess	p1 -> GetParentAd		1993147	0					
ANR	1993164	Identifier	p1		1993147	0					
ANR	1993165	Identifier	GetParentAd		1993147	1					
ANR	1993166	ArgumentList			1993147	1					
ANR	1993167	Identifier	Copy		1993147	1					
ANR	1993168	ArgumentList			1993147	1					
ANR	1993169	IdentifierDeclStatement	classad :: ClassAd * ad2 = ( classad :: ClassAd * ) p2 -> GetParentAd ( ) -> Copy ( ) ;	1105:1:25532:25602	1993147	1	True				
ANR	1993170	IdentifierDecl	* ad2 = ( classad :: ClassAd * ) p2 -> GetParentAd ( ) -> Copy ( )		1993147	0					
ANR	1993171	IdentifierDeclType	classad :: ClassAd *		1993147	0					
ANR	1993172	Identifier	ad2		1993147	1					
ANR	1993173	AssignmentExpression	* ad2 = ( classad :: ClassAd * ) p2 -> GetParentAd ( ) -> Copy ( )		1993147	2		=			
ANR	1993174	Identifier	ad2		1993147	0					
ANR	1993175	CastExpression	( classad :: ClassAd * ) p2 -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993176	CastTarget	classad :: ClassAd *		1993147	0					
ANR	1993177	CallExpression	p2 -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993178	Callee	p2 -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993179	PtrMemberAccess	p2 -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993180	CallExpression	p2 -> GetParentAd ( )		1993147	0					
ANR	1993181	Callee	p2 -> GetParentAd		1993147	0					
ANR	1993182	PtrMemberAccess	p2 -> GetParentAd		1993147	0					
ANR	1993183	Identifier	p2		1993147	0					
ANR	1993184	Identifier	GetParentAd		1993147	1					
ANR	1993185	ArgumentList			1993147	1					
ANR	1993186	Identifier	Copy		1993147	1					
ANR	1993187	ArgumentList			1993147	1					
ANR	1993188	IdentifierDeclStatement	"GMR * gmr1 = GMR :: MakeGMR ( 0 , ad1 ) ;"	1106:1:25605:25639	1993147	2	True				
ANR	1993189	IdentifierDecl	"* gmr1 = GMR :: MakeGMR ( 0 , ad1 )"		1993147	0					
ANR	1993190	IdentifierDeclType	GMR *		1993147	0					
ANR	1993191	Identifier	gmr1		1993147	1					
ANR	1993192	AssignmentExpression	"* gmr1 = GMR :: MakeGMR ( 0 , ad1 )"		1993147	2		=			
ANR	1993193	Identifier	gmr1		1993147	0					
ANR	1993194	CallExpression	"GMR :: MakeGMR ( 0 , ad1 )"		1993147	1					
ANR	1993195	Callee	GMR :: MakeGMR		1993147	0					
ANR	1993196	Identifier	GMR :: MakeGMR		1993147	0					
ANR	1993197	ArgumentList	0		1993147	1					
ANR	1993198	Argument	0		1993147	0					
ANR	1993199	PrimaryExpression	0		1993147	0					
ANR	1993200	Argument	ad1		1993147	1					
ANR	1993201	Identifier	ad1		1993147	0					
ANR	1993202	IdentifierDeclStatement	"GMR * gmr2 = GMR :: MakeGMR ( 1 , ad2 ) ;"	1108:1:25670:25704	1993147	3	True				
ANR	1993203	IdentifierDecl	"* gmr2 = GMR :: MakeGMR ( 1 , ad2 )"		1993147	0					
ANR	1993204	IdentifierDeclType	GMR *		1993147	0					
ANR	1993205	Identifier	gmr2		1993147	1					
ANR	1993206	AssignmentExpression	"* gmr2 = GMR :: MakeGMR ( 1 , ad2 )"		1993147	2		=			
ANR	1993207	Identifier	gmr2		1993147	0					
ANR	1993208	CallExpression	"GMR :: MakeGMR ( 1 , ad2 )"		1993147	1					
ANR	1993209	Callee	GMR :: MakeGMR		1993147	0					
ANR	1993210	Identifier	GMR :: MakeGMR		1993147	0					
ANR	1993211	ArgumentList	1		1993147	1					
ANR	1993212	Argument	1		1993147	0					
ANR	1993213	PrimaryExpression	1		1993147	0					
ANR	1993214	Argument	ad2		1993147	1					
ANR	1993215	Identifier	ad2		1993147	0					
ANR	1993216	IdentifierDeclStatement	"Gangster gangster_p1 ( NULL , - 1 ) ;"	1112:1:25768:25800	1993147	4	True				
ANR	1993217	IdentifierDecl	"gangster_p1 ( NULL , - 1 )"		1993147	0					
ANR	1993218	IdentifierDeclType	Gangster		1993147	0					
ANR	1993219	Identifier	gangster_p1		1993147	1					
ANR	1993220	Expression	"NULL , - 1"		1993147	2					
ANR	1993221	Identifier	NULL		1993147	0					
ANR	1993222	UnaryOperationExpression	- 1		1993147	1					
ANR	1993223	UnaryOperator	-		1993147	0					
ANR	1993224	PrimaryExpression	1		1993147	1					
ANR	1993225	ExpressionStatement	gangster_p1 . assign ( gmr1 )	1113:1:25803:25829	1993147	5	True				
ANR	1993226	CallExpression	gangster_p1 . assign ( gmr1 )		1993147	0					
ANR	1993227	Callee	gangster_p1 . assign		1993147	0					
ANR	1993228	MemberAccess	gangster_p1 . assign		1993147	0					
ANR	1993229	Identifier	gangster_p1		1993147	0					
ANR	1993230	Identifier	assign		1993147	1					
ANR	1993231	ArgumentList	gmr1		1993147	1					
ANR	1993232	Argument	gmr1		1993147	0					
ANR	1993233	Identifier	gmr1		1993147	0					
ANR	1993234	IdentifierDeclStatement	"Gangster gangster_p2 ( & gangster_p1 , p1 -> GetPortNum ( ) ) ;"	1114:1:25832:25887	1993147	6	True				
ANR	1993235	IdentifierDecl	"gangster_p2 ( & gangster_p1 , p1 -> GetPortNum ( ) )"		1993147	0					
ANR	1993236	IdentifierDeclType	Gangster		1993147	0					
ANR	1993237	Identifier	gangster_p2		1993147	1					
ANR	1993238	Expression	"& gangster_p1 , p1 -> GetPortNum ( )"		1993147	2					
ANR	1993239	UnaryOperationExpression	& gangster_p1		1993147	0					
ANR	1993240	UnaryOperator	&		1993147	0					
ANR	1993241	Identifier	gangster_p1		1993147	1					
ANR	1993242	CallExpression	p1 -> GetPortNum ( )		1993147	1					
ANR	1993243	Callee	p1 -> GetPortNum		1993147	0					
ANR	1993244	PtrMemberAccess	p1 -> GetPortNum		1993147	0					
ANR	1993245	Identifier	p1		1993147	0					
ANR	1993246	Identifier	GetPortNum		1993147	1					
ANR	1993247	ArgumentList			1993147	1					
ANR	1993248	ExpressionStatement	gangster_p2 . assign ( gmr2 )	1115:1:25890:25916	1993147	7	True				
ANR	1993249	CallExpression	gangster_p2 . assign ( gmr2 )		1993147	0					
ANR	1993250	Callee	gangster_p2 . assign		1993147	0					
ANR	1993251	MemberAccess	gangster_p2 . assign		1993147	0					
ANR	1993252	Identifier	gangster_p2		1993147	0					
ANR	1993253	Identifier	assign		1993147	1					
ANR	1993254	ArgumentList	gmr2		1993147	1					
ANR	1993255	Argument	gmr2		1993147	0					
ANR	1993256	Identifier	gmr2		1993147	0					
ANR	1993257	ExpressionStatement	gangster_p2 . setupMatchBindings ( p2 -> GetPortNum ( ) )	1116:1:25919:25970	1993147	8	True				
ANR	1993258	CallExpression	gangster_p2 . setupMatchBindings ( p2 -> GetPortNum ( ) )		1993147	0					
ANR	1993259	Callee	gangster_p2 . setupMatchBindings		1993147	0					
ANR	1993260	MemberAccess	gangster_p2 . setupMatchBindings		1993147	0					
ANR	1993261	Identifier	gangster_p2		1993147	0					
ANR	1993262	Identifier	setupMatchBindings		1993147	1					
ANR	1993263	ArgumentList	p2 -> GetPortNum ( )		1993147	1					
ANR	1993264	Argument	p2 -> GetPortNum ( )		1993147	0					
ANR	1993265	CallExpression	p2 -> GetPortNum ( )		1993147	0					
ANR	1993266	Callee	p2 -> GetPortNum		1993147	0					
ANR	1993267	PtrMemberAccess	p2 -> GetPortNum		1993147	0					
ANR	1993268	Identifier	p2		1993147	0					
ANR	1993269	Identifier	GetPortNum		1993147	1					
ANR	1993270	ArgumentList			1993147	1					
ANR	1993271	IfStatement	if ( ! paths . empty ( ) )		1993147	9					
ANR	1993272	Condition	! paths . empty ( )	1119:5:26005:26019	1993147	0	True				
ANR	1993273	UnaryOperationExpression	! paths . empty ( )		1993147	0					
ANR	1993274	UnaryOperator	!		1993147	0					
ANR	1993275	CallExpression	paths . empty ( )		1993147	1					
ANR	1993276	Callee	paths . empty		1993147	0					
ANR	1993277	MemberAccess	paths . empty		1993147	0					
ANR	1993278	Identifier	paths		1993147	0					
ANR	1993279	Identifier	empty		1993147	1					
ANR	1993280	ArgumentList			1993147	1					
ANR	1993281	CompoundStatement		29:2:805:840	1993147	1					
ANR	1993282	IdentifierDeclStatement	"Gangster * curr_gangster , * next_gangster ;"	1120:2:26027:26066	1993147	0	True				
ANR	1993283	IdentifierDecl	* curr_gangster		1993147	0					
ANR	1993284	IdentifierDeclType	Gangster *		1993147	0					
ANR	1993285	Identifier	curr_gangster		1993147	1					
ANR	1993286	IdentifierDecl	* next_gangster		1993147	1					
ANR	1993287	IdentifierDeclType	Gangster *		1993147	0					
ANR	1993288	Identifier	next_gangster		1993147	1					
ANR	1993289	IdentifierDeclStatement	"PortNode * source , * target ;"	1121:2:26070:26095	1993147	1	True				
ANR	1993290	IdentifierDecl	* source		1993147	0					
ANR	1993291	IdentifierDeclType	PortNode *		1993147	0					
ANR	1993292	Identifier	source		1993147	1					
ANR	1993293	IdentifierDecl	* target		1993147	1					
ANR	1993294	IdentifierDeclType	PortNode *		1993147	0					
ANR	1993295	Identifier	target		1993147	1					
ANR	1993296	IdentifierDeclStatement	GMR * gmr ;	1122:2:26099:26107	1993147	2	True				
ANR	1993297	IdentifierDecl	* gmr		1993147	0					
ANR	1993298	IdentifierDeclType	GMR *		1993147	0					
ANR	1993299	Identifier	gmr		1993147	1					
ANR	1993300	IdentifierDeclStatement	MatchEdge * edge ;	1123:2:26111:26126	1993147	3	True				
ANR	1993301	IdentifierDecl	* edge		1993147	0					
ANR	1993302	IdentifierDeclType	MatchEdge *		1993147	0					
ANR	1993303	Identifier	edge		1993147	1					
ANR	1993304	IdentifierDeclStatement	classad :: ClassAd * ad ;	1124:2:26130:26150	1993147	4	True				
ANR	1993305	IdentifierDecl	* ad		1993147	0					
ANR	1993306	IdentifierDeclType	classad :: ClassAd *		1993147	0					
ANR	1993307	Identifier	ad		1993147	1					
ANR	1993308	IdentifierDeclStatement	int nextAdNum = 2 ;	1125:2:26154:26171	1993147	5	True				
ANR	1993309	IdentifierDecl	nextAdNum = 2		1993147	0					
ANR	1993310	IdentifierDeclType	int		1993147	0					
ANR	1993311	Identifier	nextAdNum		1993147	1					
ANR	1993312	AssignmentExpression	nextAdNum = 2		1993147	2		=			
ANR	1993313	Identifier	nextAdNum		1993147	0					
ANR	1993314	PrimaryExpression	2		1993147	1					
ANR	1993315	IdentifierDeclStatement	std :: vector < MatchPath * > :: iterator p ;	1130:2:26235:26270	1993147	6	True				
ANR	1993316	IdentifierDecl	p		1993147	0					
ANR	1993317	IdentifierDeclType	std :: vector < MatchPath * > :: iterator		1993147	0					
ANR	1993318	Identifier	p		1993147	1					
ANR	1993319	ForStatement	for ( p = paths . begin ( ) ; p != paths . end ( ) ; p ++ )		1993147	7					
ANR	1993320	ForInit	p = paths . begin ( ) ;	1131:7:26279:26297	1993147	0	True				
ANR	1993321	AssignmentExpression	p = paths . begin ( )		1993147	0		=			
ANR	1993322	Identifier	p		1993147	0					
ANR	1993323	CallExpression	paths . begin ( )		1993147	1					
ANR	1993324	Callee	paths . begin		1993147	0					
ANR	1993325	MemberAccess	paths . begin		1993147	0					
ANR	1993326	Identifier	paths		1993147	0					
ANR	1993327	Identifier	begin		1993147	1					
ANR	1993328	ArgumentList			1993147	1					
ANR	1993329	Condition	p != paths . end ( )	1131:27:26299:26315	1993147	1	True				
ANR	1993330	EqualityExpression	p != paths . end ( )		1993147	0		!=			
ANR	1993331	Identifier	p		1993147	0					
ANR	1993332	CallExpression	paths . end ( )		1993147	1					
ANR	1993333	Callee	paths . end		1993147	0					
ANR	1993334	MemberAccess	paths . end		1993147	0					
ANR	1993335	Identifier	paths		1993147	0					
ANR	1993336	Identifier	end		1993147	1					
ANR	1993337	ArgumentList			1993147	1					
ANR	1993338	PostIncDecOperationExpression	p ++	1131:46:26318:26320	1993147	2	True				
ANR	1993339	Identifier	p		1993147	0					
ANR	1993340	IncDec	++		1993147	1					
ANR	1993341	CompoundStatement		30:52:894:894	1993147	3					
ANR	1993342	IfStatement	if ( ( * p ) -> Empty ( ) )		1993147	0					
ANR	1993343	Condition	( * p ) -> Empty ( )	1137:7:26419:26432	1993147	0	True				
ANR	1993344	CallExpression	( * p ) -> Empty ( )		1993147	0					
ANR	1993345	Callee	( * p ) -> Empty		1993147	0					
ANR	1993346	PtrMemberAccess	( * p ) -> Empty		1993147	0					
ANR	1993347	UnaryOperationExpression	* p		1993147	0					
ANR	1993348	UnaryOperator	*		1993147	0					
ANR	1993349	Identifier	p		1993147	1					
ANR	1993350	Identifier	Empty		1993147	1					
ANR	1993351	ArgumentList			1993147	1					
ANR	1993352	CompoundStatement		36:24:1006:1006	1993147	1					
ANR	1993353	ExpressionStatement	"cout << ""error: MatchPath is empty"" << endl"	1138:4:26442:26485	1993147	0	True				
ANR	1993354	ShiftExpression	"cout << ""error: MatchPath is empty"" << endl"		1993147	0		<<			
ANR	1993355	Identifier	cout		1993147	0					
ANR	1993356	ShiftExpression	"""error: MatchPath is empty"" << endl"		1993147	1		<<			
ANR	1993357	PrimaryExpression	"""error: MatchPath is empty"""		1993147	0					
ANR	1993358	Identifier	endl		1993147	1					
ANR	1993359	ReturnStatement	return false ;	1139:4:26492:26504	1993147	1	True				
ANR	1993360	Identifier	false		1993147	0					
ANR	1993361	ExpressionStatement	edge = ( * p ) -> GetMatchEdge ( 0 )	1141:3:26514:26544	1993147	1	True				
ANR	1993362	AssignmentExpression	edge = ( * p ) -> GetMatchEdge ( 0 )		1993147	0		=			
ANR	1993363	Identifier	edge		1993147	0					
ANR	1993364	CallExpression	( * p ) -> GetMatchEdge ( 0 )		1993147	1					
ANR	1993365	Callee	( * p ) -> GetMatchEdge		1993147	0					
ANR	1993366	PtrMemberAccess	( * p ) -> GetMatchEdge		1993147	0					
ANR	1993367	UnaryOperationExpression	* p		1993147	0					
ANR	1993368	UnaryOperator	*		1993147	0					
ANR	1993369	Identifier	p		1993147	1					
ANR	1993370	Identifier	GetMatchEdge		1993147	1					
ANR	1993371	ArgumentList	0		1993147	1					
ANR	1993372	Argument	0		1993147	0					
ANR	1993373	PrimaryExpression	0		1993147	0					
ANR	1993374	ExpressionStatement	source = edge -> GetSource ( )	1142:3:26549:26576	1993147	2	True				
ANR	1993375	AssignmentExpression	source = edge -> GetSource ( )		1993147	0		=			
ANR	1993376	Identifier	source		1993147	0					
ANR	1993377	CallExpression	edge -> GetSource ( )		1993147	1					
ANR	1993378	Callee	edge -> GetSource		1993147	0					
ANR	1993379	PtrMemberAccess	edge -> GetSource		1993147	0					
ANR	1993380	Identifier	edge		1993147	0					
ANR	1993381	Identifier	GetSource		1993147	1					
ANR	1993382	ArgumentList			1993147	1					
ANR	1993383	IfStatement	if ( source -> GetAdNum ( ) == p1 -> GetAdNum ( ) )		1993147	3					
ANR	1993384	Condition	source -> GetAdNum ( ) == p1 -> GetAdNum ( )	1143:7:26585:26622	1993147	0	True				
ANR	1993385	EqualityExpression	source -> GetAdNum ( ) == p1 -> GetAdNum ( )		1993147	0		==			
ANR	1993386	CallExpression	source -> GetAdNum ( )		1993147	0					
ANR	1993387	Callee	source -> GetAdNum		1993147	0					
ANR	1993388	PtrMemberAccess	source -> GetAdNum		1993147	0					
ANR	1993389	Identifier	source		1993147	0					
ANR	1993390	Identifier	GetAdNum		1993147	1					
ANR	1993391	ArgumentList			1993147	1					
ANR	1993392	CallExpression	p1 -> GetAdNum ( )		1993147	1					
ANR	1993393	Callee	p1 -> GetAdNum		1993147	0					
ANR	1993394	PtrMemberAccess	p1 -> GetAdNum		1993147	0					
ANR	1993395	Identifier	p1		1993147	0					
ANR	1993396	Identifier	GetAdNum		1993147	1					
ANR	1993397	ArgumentList			1993147	1					
ANR	1993398	CompoundStatement		42:48:1196:1196	1993147	1					
ANR	1993399	ExpressionStatement	curr_gangster = & gangster_p1	1144:4:26632:26660	1993147	0	True				
ANR	1993400	AssignmentExpression	curr_gangster = & gangster_p1		1993147	0		=			
ANR	1993401	Identifier	curr_gangster		1993147	0					
ANR	1993402	UnaryOperationExpression	& gangster_p1		1993147	1					
ANR	1993403	UnaryOperator	&		1993147	0					
ANR	1993404	Identifier	gangster_p1		1993147	1					
ANR	1993405	ElseStatement	else		1993147	0					
ANR	1993406	IfStatement	if ( source -> GetAdNum ( ) == p2 -> GetAdNum ( ) )		1993147	0					
ANR	1993407	Condition	source -> GetAdNum ( ) == p2 -> GetAdNum ( )	1146:12:26679:26716	1993147	0	True				
ANR	1993408	EqualityExpression	source -> GetAdNum ( ) == p2 -> GetAdNum ( )		1993147	0		==			
ANR	1993409	CallExpression	source -> GetAdNum ( )		1993147	0					
ANR	1993410	Callee	source -> GetAdNum		1993147	0					
ANR	1993411	PtrMemberAccess	source -> GetAdNum		1993147	0					
ANR	1993412	Identifier	source		1993147	0					
ANR	1993413	Identifier	GetAdNum		1993147	1					
ANR	1993414	ArgumentList			1993147	1					
ANR	1993415	CallExpression	p2 -> GetAdNum ( )		1993147	1					
ANR	1993416	Callee	p2 -> GetAdNum		1993147	0					
ANR	1993417	PtrMemberAccess	p2 -> GetAdNum		1993147	0					
ANR	1993418	Identifier	p2		1993147	0					
ANR	1993419	Identifier	GetAdNum		1993147	1					
ANR	1993420	ArgumentList			1993147	1					
ANR	1993421	CompoundStatement		45:53:1290:1290	1993147	1					
ANR	1993422	ExpressionStatement	curr_gangster = & gangster_p2	1147:4:26726:26754	1993147	0	True				
ANR	1993423	AssignmentExpression	curr_gangster = & gangster_p2		1993147	0		=			
ANR	1993424	Identifier	curr_gangster		1993147	0					
ANR	1993425	UnaryOperationExpression	& gangster_p2		1993147	1					
ANR	1993426	UnaryOperator	&		1993147	0					
ANR	1993427	Identifier	gangster_p2		1993147	1					
ANR	1993428	ElseStatement	else		1993147	0					
ANR	1993429	CompoundStatement		48:8:1339:1339	1993147	0					
ANR	1993430	ExpressionStatement	"cout << ""error: MatchPath begins with port "" << source -> GetAdNum ( ) << ""."" << source -> GetPortNum ( ) << endl"	1150:4:26775:26894	1993147	0	True				
ANR	1993431	ShiftExpression	"cout << ""error: MatchPath begins with port "" << source -> GetAdNum ( ) << ""."" << source -> GetPortNum ( ) << endl"		1993147	0		<<			
ANR	1993432	Identifier	cout		1993147	0					
ANR	1993433	ShiftExpression	"""error: MatchPath begins with port "" << source -> GetAdNum ( ) << ""."" << source -> GetPortNum ( ) << endl"		1993147	1		<<			
ANR	1993434	PrimaryExpression	"""error: MatchPath begins with port """		1993147	0					
ANR	1993435	ShiftExpression	"source -> GetAdNum ( ) << ""."" << source -> GetPortNum ( ) << endl"		1993147	1		<<			
ANR	1993436	CallExpression	source -> GetAdNum ( )		1993147	0					
ANR	1993437	Callee	source -> GetAdNum		1993147	0					
ANR	1993438	PtrMemberAccess	source -> GetAdNum		1993147	0					
ANR	1993439	Identifier	source		1993147	0					
ANR	1993440	Identifier	GetAdNum		1993147	1					
ANR	1993441	ArgumentList			1993147	1					
ANR	1993442	ShiftExpression	"""."" << source -> GetPortNum ( ) << endl"		1993147	1		<<			
ANR	1993443	PrimaryExpression	"""."""		1993147	0					
ANR	1993444	ShiftExpression	source -> GetPortNum ( ) << endl		1993147	1		<<			
ANR	1993445	CallExpression	source -> GetPortNum ( )		1993147	0					
ANR	1993446	Callee	source -> GetPortNum		1993147	0					
ANR	1993447	PtrMemberAccess	source -> GetPortNum		1993147	0					
ANR	1993448	Identifier	source		1993147	0					
ANR	1993449	Identifier	GetPortNum		1993147	1					
ANR	1993450	ArgumentList			1993147	1					
ANR	1993451	Identifier	endl		1993147	1					
ANR	1993452	ExpressionStatement	"cout << ""       p1 = "" << p1 -> GetAdNum ( ) << ""."" << p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"	1153:7:26903:27048	1993147	1	True				
ANR	1993453	ShiftExpression	"cout << ""       p1 = "" << p1 -> GetAdNum ( ) << ""."" << p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	0		<<			
ANR	1993454	Identifier	cout		1993147	0					
ANR	1993455	ShiftExpression	"""       p1 = "" << p1 -> GetAdNum ( ) << ""."" << p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993456	PrimaryExpression	"""       p1 = """		1993147	0					
ANR	1993457	ShiftExpression	"p1 -> GetAdNum ( ) << ""."" << p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993458	CallExpression	p1 -> GetAdNum ( )		1993147	0					
ANR	1993459	Callee	p1 -> GetAdNum		1993147	0					
ANR	1993460	PtrMemberAccess	p1 -> GetAdNum		1993147	0					
ANR	1993461	Identifier	p1		1993147	0					
ANR	1993462	Identifier	GetAdNum		1993147	1					
ANR	1993463	ArgumentList			1993147	1					
ANR	1993464	ShiftExpression	"""."" << p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993465	PrimaryExpression	"""."""		1993147	0					
ANR	1993466	ShiftExpression	"p1 -> GetPortNum ( ) << ""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993467	CallExpression	p1 -> GetPortNum ( )		1993147	0					
ANR	1993468	Callee	p1 -> GetPortNum		1993147	0					
ANR	1993469	PtrMemberAccess	p1 -> GetPortNum		1993147	0					
ANR	1993470	Identifier	p1		1993147	0					
ANR	1993471	Identifier	GetPortNum		1993147	1					
ANR	1993472	ArgumentList			1993147	1					
ANR	1993473	ShiftExpression	"""p2 = "" << p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993474	PrimaryExpression	"""p2 = """		1993147	0					
ANR	1993475	ShiftExpression	"p2 -> GetAdNum ( ) << ""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993476	CallExpression	p2 -> GetAdNum ( )		1993147	0					
ANR	1993477	Callee	p2 -> GetAdNum		1993147	0					
ANR	1993478	PtrMemberAccess	p2 -> GetAdNum		1993147	0					
ANR	1993479	Identifier	p2		1993147	0					
ANR	1993480	Identifier	GetAdNum		1993147	1					
ANR	1993481	ArgumentList			1993147	1					
ANR	1993482	ShiftExpression	"""."" << p2 -> GetPortNum ( )"		1993147	1		<<			
ANR	1993483	PrimaryExpression	"""."""		1993147	0					
ANR	1993484	CallExpression	p2 -> GetPortNum ( )		1993147	1					
ANR	1993485	Callee	p2 -> GetPortNum		1993147	0					
ANR	1993486	PtrMemberAccess	p2 -> GetPortNum		1993147	0					
ANR	1993487	Identifier	p2		1993147	0					
ANR	1993488	Identifier	GetPortNum		1993147	1					
ANR	1993489	ArgumentList			1993147	1					
ANR	1993490	ForStatement	for ( unsigned int i = 0 ; i < ( * p ) -> GetNumEdges ( ) ; i ++ )		1993147	4					
ANR	1993491	ForInit	unsigned int i = 0 ;	1159:8:27064:27082	1993147	0	True				
ANR	1993492	IdentifierDeclStatement	unsigned int i = 0 ;		1993147	0					
ANR	1993493	IdentifierDecl	i = 0		1993147	0					
ANR	1993494	IdentifierDeclType	unsigned int		1993147	0					
ANR	1993495	Identifier	i		1993147	1					
ANR	1993496	AssignmentExpression	i = 0		1993147	2		=			
ANR	1993497	Identifier	i		1993147	0					
ANR	1993498	PrimaryExpression	0		1993147	1					
ANR	1993499	Condition	i < ( * p ) -> GetNumEdges ( )	1159:28:27084:27107	1993147	1	True				
ANR	1993500	RelationalExpression	i < ( * p ) -> GetNumEdges ( )		1993147	0		<			
ANR	1993501	Identifier	i		1993147	0					
ANR	1993502	CallExpression	( * p ) -> GetNumEdges ( )		1993147	1					
ANR	1993503	Callee	( * p ) -> GetNumEdges		1993147	0					
ANR	1993504	PtrMemberAccess	( * p ) -> GetNumEdges		1993147	0					
ANR	1993505	UnaryOperationExpression	* p		1993147	0					
ANR	1993506	UnaryOperator	*		1993147	0					
ANR	1993507	Identifier	p		1993147	1					
ANR	1993508	Identifier	GetNumEdges		1993147	1					
ANR	1993509	ArgumentList			1993147	1					
ANR	1993510	PostIncDecOperationExpression	i ++	1159:54:27110:27112	1993147	2	True				
ANR	1993511	Identifier	i		1993147	0					
ANR	1993512	IncDec	++		1993147	1					
ANR	1993513	CompoundStatement		58:60:1686:1686	1993147	3					
ANR	1993514	ExpressionStatement	edge = ( * p ) -> GetMatchEdge ( i )	1160:4:27122:27152	1993147	0	True				
ANR	1993515	AssignmentExpression	edge = ( * p ) -> GetMatchEdge ( i )		1993147	0		=			
ANR	1993516	Identifier	edge		1993147	0					
ANR	1993517	CallExpression	( * p ) -> GetMatchEdge ( i )		1993147	1					
ANR	1993518	Callee	( * p ) -> GetMatchEdge		1993147	0					
ANR	1993519	PtrMemberAccess	( * p ) -> GetMatchEdge		1993147	0					
ANR	1993520	UnaryOperationExpression	* p		1993147	0					
ANR	1993521	UnaryOperator	*		1993147	0					
ANR	1993522	Identifier	p		1993147	1					
ANR	1993523	Identifier	GetMatchEdge		1993147	1					
ANR	1993524	ArgumentList	i		1993147	1					
ANR	1993525	Argument	i		1993147	0					
ANR	1993526	Identifier	i		1993147	0					
ANR	1993527	ExpressionStatement	source = edge -> GetSource ( )	1161:4:27158:27185	1993147	1	True				
ANR	1993528	AssignmentExpression	source = edge -> GetSource ( )		1993147	0		=			
ANR	1993529	Identifier	source		1993147	0					
ANR	1993530	CallExpression	edge -> GetSource ( )		1993147	1					
ANR	1993531	Callee	edge -> GetSource		1993147	0					
ANR	1993532	PtrMemberAccess	edge -> GetSource		1993147	0					
ANR	1993533	Identifier	edge		1993147	0					
ANR	1993534	Identifier	GetSource		1993147	1					
ANR	1993535	ArgumentList			1993147	1					
ANR	1993536	ExpressionStatement	target = edge -> GetTarget ( )	1162:4:27191:27218	1993147	2	True				
ANR	1993537	AssignmentExpression	target = edge -> GetTarget ( )		1993147	0		=			
ANR	1993538	Identifier	target		1993147	0					
ANR	1993539	CallExpression	edge -> GetTarget ( )		1993147	1					
ANR	1993540	Callee	edge -> GetTarget		1993147	0					
ANR	1993541	PtrMemberAccess	edge -> GetTarget		1993147	0					
ANR	1993542	Identifier	edge		1993147	0					
ANR	1993543	Identifier	GetTarget		1993147	1					
ANR	1993544	ArgumentList			1993147	1					
ANR	1993545	ExpressionStatement	ad = ( classad :: ClassAd * ) target -> GetParentAd ( ) -> Copy ( )	1163:4:27224:27279	1993147	3	True				
ANR	1993546	AssignmentExpression	ad = ( classad :: ClassAd * ) target -> GetParentAd ( ) -> Copy ( )		1993147	0		=			
ANR	1993547	Identifier	ad		1993147	0					
ANR	1993548	CastExpression	( classad :: ClassAd * ) target -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993549	CastTarget	classad :: ClassAd *		1993147	0					
ANR	1993550	CallExpression	target -> GetParentAd ( ) -> Copy ( )		1993147	1					
ANR	1993551	Callee	target -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993552	PtrMemberAccess	target -> GetParentAd ( ) -> Copy		1993147	0					
ANR	1993553	CallExpression	target -> GetParentAd ( )		1993147	0					
ANR	1993554	Callee	target -> GetParentAd		1993147	0					
ANR	1993555	PtrMemberAccess	target -> GetParentAd		1993147	0					
ANR	1993556	Identifier	target		1993147	0					
ANR	1993557	Identifier	GetParentAd		1993147	1					
ANR	1993558	ArgumentList			1993147	1					
ANR	1993559	Identifier	Copy		1993147	1					
ANR	1993560	ArgumentList			1993147	1					
ANR	1993561	ExpressionStatement	"gmr = GMR :: MakeGMR ( nextAdNum , ad )"	1164:4:27285:27320	1993147	4	True				
ANR	1993562	AssignmentExpression	"gmr = GMR :: MakeGMR ( nextAdNum , ad )"		1993147	0		=			
ANR	1993563	Identifier	gmr		1993147	0					
ANR	1993564	CallExpression	"GMR :: MakeGMR ( nextAdNum , ad )"		1993147	1					
ANR	1993565	Callee	GMR :: MakeGMR		1993147	0					
ANR	1993566	Identifier	GMR :: MakeGMR		1993147	0					
ANR	1993567	ArgumentList	nextAdNum		1993147	1					
ANR	1993568	Argument	nextAdNum		1993147	0					
ANR	1993569	Identifier	nextAdNum		1993147	0					
ANR	1993570	Argument	ad		1993147	1					
ANR	1993571	Identifier	ad		1993147	0					
ANR	1993572	ExpressionStatement	nextAdNum ++	1165:4:27326:27337	1993147	5	True				
ANR	1993573	PostIncDecOperationExpression	nextAdNum ++		1993147	0					
ANR	1993574	Identifier	nextAdNum		1993147	0					
ANR	1993575	IncDec	++		1993147	1					
ANR	1993576	ExpressionStatement	"next_gangster = new Gangster ( curr_gangster , source -> GetPortNum ( ) )"	1166:4:27343:27424	1993147	6	True				
ANR	1993577	AssignmentExpression	"next_gangster = new Gangster ( curr_gangster , source -> GetPortNum ( ) )"		1993147	0		=			
ANR	1993578	Identifier	next_gangster		1993147	0					
ANR	1993579	Expression	"curr_gangster , source -> GetPortNum ( )"		1993147	1					
ANR	1993580	Identifier	curr_gangster		1993147	0					
ANR	1993581	CallExpression	source -> GetPortNum ( )		1993147	1					
ANR	1993582	Callee	source -> GetPortNum		1993147	0					
ANR	1993583	PtrMemberAccess	source -> GetPortNum		1993147	0					
ANR	1993584	Identifier	source		1993147	0					
ANR	1993585	Identifier	GetPortNum		1993147	1					
ANR	1993586	ArgumentList			1993147	1					
ANR	1993587	ExpressionStatement	next_gangster -> assign ( gmr )	1168:4:27431:27459	1993147	7	True				
ANR	1993588	CallExpression	next_gangster -> assign ( gmr )		1993147	0					
ANR	1993589	Callee	next_gangster -> assign		1993147	0					
ANR	1993590	PtrMemberAccess	next_gangster -> assign		1993147	0					
ANR	1993591	Identifier	next_gangster		1993147	0					
ANR	1993592	Identifier	assign		1993147	1					
ANR	1993593	ArgumentList	gmr		1993147	1					
ANR	1993594	Argument	gmr		1993147	0					
ANR	1993595	Identifier	gmr		1993147	0					
ANR	1993596	ExpressionStatement	next_gangster -> setupMatchBindings ( target -> GetPortNum ( ) )	1169:4:27465:27523	1993147	8	True				
ANR	1993597	CallExpression	next_gangster -> setupMatchBindings ( target -> GetPortNum ( ) )		1993147	0					
ANR	1993598	Callee	next_gangster -> setupMatchBindings		1993147	0					
ANR	1993599	PtrMemberAccess	next_gangster -> setupMatchBindings		1993147	0					
ANR	1993600	Identifier	next_gangster		1993147	0					
ANR	1993601	Identifier	setupMatchBindings		1993147	1					
ANR	1993602	ArgumentList	target -> GetPortNum ( )		1993147	1					
ANR	1993603	Argument	target -> GetPortNum ( )		1993147	0					
ANR	1993604	CallExpression	target -> GetPortNum ( )		1993147	0					
ANR	1993605	Callee	target -> GetPortNum		1993147	0					
ANR	1993606	PtrMemberAccess	target -> GetPortNum		1993147	0					
ANR	1993607	Identifier	target		1993147	0					
ANR	1993608	Identifier	GetPortNum		1993147	1					
ANR	1993609	ArgumentList			1993147	1					
ANR	1993610	ExpressionStatement	curr_gangster = next_gangster	1170:4:27529:27558	1993147	9	True				
ANR	1993611	AssignmentExpression	curr_gangster = next_gangster		1993147	0		=			
ANR	1993612	Identifier	curr_gangster		1993147	0					
ANR	1993613	Identifier	next_gangster		1993147	1					
ANR	1993614	IdentifierDeclStatement	classad :: Value resultV ;	1177:1:27637:27659	1993147	10	True				
ANR	1993615	IdentifierDecl	resultV		1993147	0					
ANR	1993616	IdentifierDeclType	classad :: Value		1993147	0					
ANR	1993617	Identifier	resultV		1993147	1					
ANR	1993618	IdentifierDeclStatement	bool result = false ;	1178:1:27662:27681	1993147	11	True				
ANR	1993619	IdentifierDecl	result = false		1993147	0					
ANR	1993620	IdentifierDeclType	bool		1993147	0					
ANR	1993621	Identifier	result		1993147	1					
ANR	1993622	AssignmentExpression	result = false		1993147	2		=			
ANR	1993623	Identifier	false		1993147	0					
ANR	1993624	Identifier	false		1993147	1					
ANR	1993625	ExpressionStatement	"gangster_p1 . testOneWayMatch ( p1 -> GetPortNum ( ) , resultV )"	1179:1:27684:27741	1993147	12	True				
ANR	1993626	CallExpression	"gangster_p1 . testOneWayMatch ( p1 -> GetPortNum ( ) , resultV )"		1993147	0					
ANR	1993627	Callee	gangster_p1 . testOneWayMatch		1993147	0					
ANR	1993628	MemberAccess	gangster_p1 . testOneWayMatch		1993147	0					
ANR	1993629	Identifier	gangster_p1		1993147	0					
ANR	1993630	Identifier	testOneWayMatch		1993147	1					
ANR	1993631	ArgumentList	p1 -> GetPortNum ( )		1993147	1					
ANR	1993632	Argument	p1 -> GetPortNum ( )		1993147	0					
ANR	1993633	CallExpression	p1 -> GetPortNum ( )		1993147	0					
ANR	1993634	Callee	p1 -> GetPortNum		1993147	0					
ANR	1993635	PtrMemberAccess	p1 -> GetPortNum		1993147	0					
ANR	1993636	Identifier	p1		1993147	0					
ANR	1993637	Identifier	GetPortNum		1993147	1					
ANR	1993638	ArgumentList			1993147	1					
ANR	1993639	Argument	resultV		1993147	1					
ANR	1993640	Identifier	resultV		1993147	0					
ANR	1993641	IfStatement	if ( resultV . IsBooleanValue ( result ) )		1993147	13					
ANR	1993642	Condition	resultV . IsBooleanValue ( result )	1182:5:27780:27811	1993147	0	True				
ANR	1993643	CallExpression	resultV . IsBooleanValue ( result )		1993147	0					
ANR	1993644	Callee	resultV . IsBooleanValue		1993147	0					
ANR	1993645	MemberAccess	resultV . IsBooleanValue		1993147	0					
ANR	1993646	Identifier	resultV		1993147	0					
ANR	1993647	Identifier	IsBooleanValue		1993147	1					
ANR	1993648	ArgumentList	result		1993147	1					
ANR	1993649	Argument	result		1993147	0					
ANR	1993650	Identifier	result		1993147	0					
ANR	1993651	ReturnStatement	return result ;	1183:2:27817:27830	1993147	1	True				
ANR	1993652	Identifier	result		1993147	0					
ANR	1993653	ElseStatement	else		1993147	0					
ANR	1993654	ReturnStatement	return false ;	1185:2:27841:27853	1993147	0	True				
ANR	1993655	Identifier	false		1993147	0					
ANR	1993656	ReturnType	bool		1993147	1					
ANR	1993657	Identifier	PortGraph :: EvalReqs		1993147	2					
ANR	1993658	ParameterList	"PortNode * p1 , PortNode * p2 , std :: vector < MatchPath * > & paths"		1993147	3					
ANR	1993659	Parameter	PortNode * p1	1101:10:25368:25379	1993147	0	True				
ANR	1993660	ParameterType	PortNode *		1993147	0					
ANR	1993661	Identifier	p1		1993147	1					
ANR	1993662	Parameter	PortNode * p2	1101:24:25382:25393	1993147	1	True				
ANR	1993663	ParameterType	PortNode *		1993147	0					
ANR	1993664	Identifier	p2		1993147	1					
ANR	1993665	Parameter	std :: vector < MatchPath * > & paths	1101:38:25396:25425	1993147	2	True				
ANR	1993666	ParameterType	std :: vector < MatchPath * > &		1993147	0					
ANR	1993667	Identifier	paths		1993147	1					
ANR	1993668	CFGEntryNode	ENTRY		1993147		True				
ANR	1993669	CFGExitNode	EXIT		1993147		True				
ANR	1993670	Symbol	next_gangster		1993147						
ANR	1993671	Symbol	p2 -> GetParentAd		1993147						
ANR	1993672	Symbol	* p1 -> GetParentAd		1993147						
ANR	1993673	Symbol	source		1993147						
ANR	1993674	Symbol	paths . begin		1993147						
ANR	1993675	Symbol	paths . empty		1993147						
ANR	1993676	Symbol	edge		1993147						
ANR	1993677	Symbol	source -> GetAdNum		1993147						
ANR	1993678	Symbol	* source		1993147						
ANR	1993679	Symbol	gangster_p2		1993147						
ANR	1993680	Symbol	* target -> GetParentAd		1993147						
ANR	1993681	Symbol	p2 -> GetAdNum		1993147						
ANR	1993682	Symbol	ad		1993147						
ANR	1993683	Symbol	gangster_p1		1993147						
ANR	1993684	Symbol	p1 -> GetAdNum		1993147						
ANR	1993685	Symbol	* * p2		1993147						
ANR	1993686	Symbol	* * target		1993147						
ANR	1993687	Symbol	* * p1		1993147						
ANR	1993688	Symbol	resultV		1993147						
ANR	1993689	Symbol	p1 -> GetPortNum		1993147						
ANR	1993690	Symbol	p1 -> GetParentAd ( ) -> Copy		1993147						
ANR	1993691	Symbol	paths		1993147						
ANR	1993692	Symbol	target -> GetParentAd		1993147						
ANR	1993693	Symbol	resultV . IsBooleanValue		1993147						
ANR	1993694	Symbol	edge -> GetTarget		1993147						
ANR	1993695	Symbol	p1		1993147						
ANR	1993696	Symbol	p2		1993147						
ANR	1993697	Symbol	source -> GetPortNum		1993147						
ANR	1993698	Symbol	& gangster_p2		1993147						
ANR	1993699	Symbol	& gangster_p1		1993147						
ANR	1993700	Symbol	edge -> GetSource		1993147						
ANR	1993701	Symbol	paths . end		1993147						
ANR	1993702	Symbol	gmr		1993147						
ANR	1993703	Symbol	( * p ) -> GetNumEdges		1993147						
ANR	1993704	Symbol	result		1993147						
ANR	1993705	Symbol	* p2 -> GetParentAd		1993147						
ANR	1993706	Symbol	gmr1		1993147						
ANR	1993707	Symbol	target -> GetParentAd ( ) -> Copy		1993147						
ANR	1993708	Symbol	gmr2		1993147						
ANR	1993709	Symbol	* * p		1993147						
ANR	1993710	Symbol	* p1		1993147						
ANR	1993711	Symbol	target -> GetPortNum		1993147						
ANR	1993712	Symbol	p2 -> GetPortNum		1993147						
ANR	1993713	Symbol	false		1993147						
ANR	1993714	Symbol	i		1993147						
ANR	1993715	Symbol	p2 -> GetParentAd ( ) -> Copy		1993147						
ANR	1993716	Symbol	* p2		1993147						
ANR	1993717	Symbol	ad2		1993147						
ANR	1993718	Symbol	nextAdNum		1993147						
ANR	1993719	Symbol	* edge		1993147						
ANR	1993720	Symbol	ad1		1993147						
ANR	1993721	Symbol	target		1993147						
ANR	1993722	Symbol	p		1993147						
ANR	1993723	Symbol	( * p ) -> GetMatchEdge		1993147						
ANR	1993724	Symbol	* target		1993147						
ANR	1993725	Symbol	p1 -> GetParentAd		1993147						
ANR	1993726	Symbol	curr_gangster		1993147						
ANR	1993727	Symbol	* p		1993147						
ANR	1993728	Symbol	GMR :: MakeGMR		1993147						
ANR	1993729	Symbol	( * p ) -> Empty		1993147						
ANR	1993730	Function	PortGraph :: AddMatchEdge	1188:0:27858:28069							
ANR	1993731	FunctionDef	"PortGraph :: AddMatchEdge (PortNode * p1 , PortNode * p2 , std :: vector < MatchPath * > & paths)"		1993730	0					
ANR	1993732	CompoundStatement		1190:0:27950:28069	1993730	0					
ANR	1993733	IfStatement	"if ( p1 -> AddMatchEdge ( nextMatchEdgeNum , p2 , paths ) )"		1993730	0					
ANR	1993734	Condition	"p1 -> AddMatchEdge ( nextMatchEdgeNum , p2 , paths )"	1191:5:27957:28003	1993730	0	True				
ANR	1993735	CallExpression	"p1 -> AddMatchEdge ( nextMatchEdgeNum , p2 , paths )"		1993730	0					
ANR	1993736	Callee	p1 -> AddMatchEdge		1993730	0					
ANR	1993737	PtrMemberAccess	p1 -> AddMatchEdge		1993730	0					
ANR	1993738	Identifier	p1		1993730	0					
ANR	1993739	Identifier	AddMatchEdge		1993730	1					
ANR	1993740	ArgumentList	nextMatchEdgeNum		1993730	1					
ANR	1993741	Argument	nextMatchEdgeNum		1993730	0					
ANR	1993742	Identifier	nextMatchEdgeNum		1993730	0					
ANR	1993743	Argument	p2		1993730	1					
ANR	1993744	Identifier	p2		1993730	0					
ANR	1993745	Argument	paths		1993730	2					
ANR	1993746	Identifier	paths		1993730	0					
ANR	1993747	CompoundStatement		2:55:56:56	1993730	1					
ANR	1993748	ExpressionStatement	nextMatchEdgeNum ++	1192:2:28011:28029	1993730	0	True				
ANR	1993749	PostIncDecOperationExpression	nextMatchEdgeNum ++		1993730	0					
ANR	1993750	Identifier	nextMatchEdgeNum		1993730	0					
ANR	1993751	IncDec	++		1993730	1					
ANR	1993752	ReturnStatement	return true ;	1193:2:28033:28044	1993730	1	True				
ANR	1993753	Identifier	true		1993730	0					
ANR	1993754	ElseStatement	else		1993730	0					
ANR	1993755	ReturnStatement	return false ;	1195:6:28055:28067	1993730	0	True				
ANR	1993756	Identifier	false		1993730	0					
ANR	1993757	ReturnType	bool		1993730	1					
ANR	1993758	Identifier	PortGraph :: AddMatchEdge		1993730	2					
ANR	1993759	ParameterList	"PortNode * p1 , PortNode * p2 , std :: vector < MatchPath * > & paths"		1993730	3					
ANR	1993760	Parameter	PortNode * p1	1189:14:27889:27900	1993730	0	True				
ANR	1993761	ParameterType	PortNode *		1993730	0					
ANR	1993762	Identifier	p1		1993730	1					
ANR	1993763	Parameter	PortNode * p2	1189:28:27903:27914	1993730	1	True				
ANR	1993764	ParameterType	PortNode *		1993730	0					
ANR	1993765	Identifier	p2		1993730	1					
ANR	1993766	Parameter	std :: vector < MatchPath * > & paths	1189:42:27917:27946	1993730	2	True				
ANR	1993767	ParameterType	std :: vector < MatchPath * > &		1993730	0					
ANR	1993768	Identifier	paths		1993730	1					
ANR	1993769	CFGEntryNode	ENTRY		1993730		True				
ANR	1993770	CFGExitNode	EXIT		1993730		True				
ANR	1993771	Symbol	p1		1993730						
ANR	1993772	Symbol	p1 -> AddMatchEdge		1993730						
ANR	1993773	Symbol	p2		1993730						
ANR	1993774	Symbol	* p1		1993730						
ANR	1993775	Symbol	paths		1993730						
ANR	1993776	Symbol	nextMatchEdgeNum		1993730						
ANR	1993777	Symbol	true		1993730						
ANR	1993778	Symbol	false		1993730						
ANR	1993779	Function	PortGraph :: ToString	1198:0:28072:28478							
ANR	1993780	FunctionDef	PortGraph :: ToString (std :: string & buffer)		1993779	0					
ANR	1993781	CompoundStatement		1200:0:28121:28478	1993779	0					
ANR	1993782	IdentifierDeclStatement	char tempBuf [ 512 ] ;	1201:1:28124:28141	1993779	0	True				
ANR	1993783	IdentifierDecl	tempBuf [ 512 ]		1993779	0					
ANR	1993784	IdentifierDeclType	char [ 512 ]		1993779	0					
ANR	1993785	Identifier	tempBuf		1993779	1					
ANR	1993786	PrimaryExpression	512		1993779	2					
ANR	1993787	ExpressionStatement	"sprintf ( tempBuf , ""%d"" , numPortNodes )"	1202:1:28144:28182	1993779	1	True				
ANR	1993788	CallExpression	"sprintf ( tempBuf , ""%d"" , numPortNodes )"		1993779	0					
ANR	1993789	Callee	sprintf		1993779	0					
ANR	1993790	Identifier	sprintf		1993779	0					
ANR	1993791	ArgumentList	tempBuf		1993779	1					
ANR	1993792	Argument	tempBuf		1993779	0					
ANR	1993793	Identifier	tempBuf		1993779	0					
ANR	1993794	Argument	"""%d"""		1993779	1					
ANR	1993795	PrimaryExpression	"""%d"""		1993779	0					
ANR	1993796	Argument	numPortNodes		1993779	2					
ANR	1993797	Identifier	numPortNodes		1993779	0					
ANR	1993798	ExpressionStatement	"buffer += ""[numPortNodes:"""	1203:1:28185:28211	1993779	2	True				
ANR	1993799	AssignmentExpression	"buffer += ""[numPortNodes:"""		1993779	0		+=			
ANR	1993800	Identifier	buffer		1993779	0					
ANR	1993801	PrimaryExpression	"""[numPortNodes:"""		1993779	1					
ANR	1993802	ExpressionStatement	buffer += tempBuf	1204:1:28214:28231	1993779	3	True				
ANR	1993803	AssignmentExpression	buffer += tempBuf		1993779	0		+=			
ANR	1993804	Identifier	buffer		1993779	0					
ANR	1993805	Identifier	tempBuf		1993779	1					
ANR	1993806	ExpressionStatement	"buffer += "",portNodes:{"""	1205:1:28234:28258	1993779	4	True				
ANR	1993807	AssignmentExpression	"buffer += "",portNodes:{"""		1993779	0		+=			
ANR	1993808	Identifier	buffer		1993779	0					
ANR	1993809	PrimaryExpression	""",portNodes:{"""		1993779	1					
ANR	1993810	IdentifierDeclStatement	std :: vector < PortNode * > :: iterator p ;	1206:1:28261:28295	1993779	5	True				
ANR	1993811	IdentifierDecl	p		1993779	0					
ANR	1993812	IdentifierDeclType	std :: vector < PortNode * > :: iterator		1993779	0					
ANR	1993813	Identifier	p		1993779	1					
ANR	1993814	ForStatement	for ( p = portNodes . begin ( ) ; p != portNodes . end ( ) ; p ++ )		1993779	6					
ANR	1993815	ForInit	p = portNodes . begin ( ) ;	1207:6:28303:28325	1993779	0	True				
ANR	1993816	AssignmentExpression	p = portNodes . begin ( )		1993779	0		=			
ANR	1993817	Identifier	p		1993779	0					
ANR	1993818	CallExpression	portNodes . begin ( )		1993779	1					
ANR	1993819	Callee	portNodes . begin		1993779	0					
ANR	1993820	MemberAccess	portNodes . begin		1993779	0					
ANR	1993821	Identifier	portNodes		1993779	0					
ANR	1993822	Identifier	begin		1993779	1					
ANR	1993823	ArgumentList			1993779	1					
ANR	1993824	Condition	p != portNodes . end ( )	1207:30:28327:28347	1993779	1	True				
ANR	1993825	EqualityExpression	p != portNodes . end ( )		1993779	0		!=			
ANR	1993826	Identifier	p		1993779	0					
ANR	1993827	CallExpression	portNodes . end ( )		1993779	1					
ANR	1993828	Callee	portNodes . end		1993779	0					
ANR	1993829	MemberAccess	portNodes . end		1993779	0					
ANR	1993830	Identifier	portNodes		1993779	0					
ANR	1993831	Identifier	end		1993779	1					
ANR	1993832	ArgumentList			1993779	1					
ANR	1993833	PostIncDecOperationExpression	p ++	1207:53:28350:28352	1993779	2	True				
ANR	1993834	Identifier	p		1993779	0					
ANR	1993835	IncDec	++		1993779	1					
ANR	1993836	CompoundStatement		8:59:234:234	1993779	3					
ANR	1993837	IfStatement	if ( p != portNodes . begin ( ) )		1993779	0					
ANR	1993838	Condition	p != portNodes . begin ( )	1208:6:28364:28386	1993779	0	True				
ANR	1993839	EqualityExpression	p != portNodes . begin ( )		1993779	0		!=			
ANR	1993840	Identifier	p		1993779	0					
ANR	1993841	CallExpression	portNodes . begin ( )		1993779	1					
ANR	1993842	Callee	portNodes . begin		1993779	0					
ANR	1993843	MemberAccess	portNodes . begin		1993779	0					
ANR	1993844	Identifier	portNodes		1993779	0					
ANR	1993845	Identifier	begin		1993779	1					
ANR	1993846	ArgumentList			1993779	1					
ANR	1993847	CompoundStatement		9:32:268:268	1993779	1					
ANR	1993848	ExpressionStatement	"buffer += "","""	1209:3:28395:28408	1993779	0	True				
ANR	1993849	AssignmentExpression	"buffer += "","""		1993779	0		+=			
ANR	1993850	Identifier	buffer		1993779	0					
ANR	1993851	PrimaryExpression	""","""		1993779	1					
ANR	1993852	ExpressionStatement	( * p ) -> ToString ( buffer )	1211:2:28416:28440	1993779	1	True				
ANR	1993853	CallExpression	( * p ) -> ToString ( buffer )		1993779	0					
ANR	1993854	Callee	( * p ) -> ToString		1993779	0					
ANR	1993855	PtrMemberAccess	( * p ) -> ToString		1993779	0					
ANR	1993856	UnaryOperationExpression	* p		1993779	0					
ANR	1993857	UnaryOperator	*		1993779	0					
ANR	1993858	Identifier	p		1993779	1					
ANR	1993859	Identifier	ToString		1993779	1					
ANR	1993860	ArgumentList	buffer		1993779	1					
ANR	1993861	Argument	buffer		1993779	0					
ANR	1993862	Identifier	buffer		1993779	0					
ANR	1993863	ExpressionStatement	"buffer += ""}]"""	1213:1:28446:28460	1993779	7	True				
ANR	1993864	AssignmentExpression	"buffer += ""}]"""		1993779	0		+=			
ANR	1993865	Identifier	buffer		1993779	0					
ANR	1993866	PrimaryExpression	"""}]"""		1993779	1					
ANR	1993867	ReturnStatement	return true ;	1215:1:28465:28476	1993779	8	True				
ANR	1993868	Identifier	true		1993779	0					
ANR	1993869	ReturnType	bool		1993779	1					
ANR	1993870	Identifier	PortGraph :: ToString		1993779	2					
ANR	1993871	ParameterList	std :: string & buffer		1993779	3					
ANR	1993872	Parameter	std :: string & buffer	1199:10:28099:28117	1993779	0	True				
ANR	1993873	ParameterType	std :: string &		1993779	0					
ANR	1993874	Identifier	buffer		1993779	1					
ANR	1993875	CFGEntryNode	ENTRY		1993779		True				
ANR	1993876	CFGExitNode	EXIT		1993779		True				
ANR	1993877	Symbol	p		1993779						
ANR	1993878	Symbol	portNodes . end		1993779						
ANR	1993879	Symbol	numPortNodes		1993779						
ANR	1993880	Symbol	true		1993779						
ANR	1993881	Symbol	portNodes		1993779						
ANR	1993882	Symbol	* p		1993779						
ANR	1993883	Symbol	buffer		1993779						
ANR	1993884	Symbol	tempBuf		1993779						
ANR	1993885	Symbol	portNodes . begin		1993779						
