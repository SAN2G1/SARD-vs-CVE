command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5005486	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_user_log_header.cpp								
ANR	5005487	Function	UserLogHeader :: UserLogHeader	35:0:1129:1334							
ANR	5005488	FunctionDef	UserLogHeader :: UserLogHeader ()		5005487	0					
ANR	5005489	CompoundStatement		36:0:1166:1334	5005487	0					
ANR	5005490	ExpressionStatement	m_sequence = 0	37:1:1169:1183	5005487	0	True				
ANR	5005491	AssignmentExpression	m_sequence = 0		5005487	0		=			
ANR	5005492	Identifier	m_sequence		5005487	0					
ANR	5005493	PrimaryExpression	0		5005487	1					
ANR	5005494	ExpressionStatement	m_ctime = 0	38:1:1186:1197	5005487	1	True				
ANR	5005495	AssignmentExpression	m_ctime = 0		5005487	0		=			
ANR	5005496	Identifier	m_ctime		5005487	0					
ANR	5005497	PrimaryExpression	0		5005487	1					
ANR	5005498	ExpressionStatement	m_size = 0	39:1:1200:1210	5005487	2	True				
ANR	5005499	AssignmentExpression	m_size = 0		5005487	0		=			
ANR	5005500	Identifier	m_size		5005487	0					
ANR	5005501	PrimaryExpression	0		5005487	1					
ANR	5005502	ExpressionStatement	m_num_events = 0	40:1:1213:1229	5005487	3	True				
ANR	5005503	AssignmentExpression	m_num_events = 0		5005487	0		=			
ANR	5005504	Identifier	m_num_events		5005487	0					
ANR	5005505	PrimaryExpression	0		5005487	1					
ANR	5005506	ExpressionStatement	m_file_offset = 0	41:1:1232:1249	5005487	4	True				
ANR	5005507	AssignmentExpression	m_file_offset = 0		5005487	0		=			
ANR	5005508	Identifier	m_file_offset		5005487	0					
ANR	5005509	PrimaryExpression	0		5005487	1					
ANR	5005510	ExpressionStatement	m_event_offset = 0	42:1:1252:1270	5005487	5	True				
ANR	5005511	AssignmentExpression	m_event_offset = 0		5005487	0		=			
ANR	5005512	Identifier	m_event_offset		5005487	0					
ANR	5005513	PrimaryExpression	0		5005487	1					
ANR	5005514	ExpressionStatement	m_max_rotation = - 1	43:1:1273:1292	5005487	6	True				
ANR	5005515	AssignmentExpression	m_max_rotation = - 1		5005487	0		=			
ANR	5005516	Identifier	m_max_rotation		5005487	0					
ANR	5005517	UnaryOperationExpression	- 1		5005487	1					
ANR	5005518	UnaryOperator	-		5005487	0					
ANR	5005519	PrimaryExpression	1		5005487	1					
ANR	5005520	ExpressionStatement	"m_creator_name = """""	44:1:1295:1314	5005487	7	True				
ANR	5005521	AssignmentExpression	"m_creator_name = """""		5005487	0		=			
ANR	5005522	Identifier	m_creator_name		5005487	0					
ANR	5005523	PrimaryExpression	""""""		5005487	1					
ANR	5005524	ExpressionStatement	m_valid = false	45:1:1317:1332	5005487	8	True				
ANR	5005525	AssignmentExpression	m_valid = false		5005487	0		=			
ANR	5005526	Identifier	m_valid		5005487	0					
ANR	5005527	Identifier	false		5005487	1					
ANR	5005528	Identifier	UserLogHeader :: UserLogHeader		5005487	1					
ANR	5005529	ParameterList			5005487	2					
ANR	5005530	CFGEntryNode	ENTRY		5005487		True				
ANR	5005531	CFGExitNode	EXIT		5005487		True				
ANR	5005532	Symbol	m_ctime		5005487						
ANR	5005533	Symbol	m_size		5005487						
ANR	5005534	Symbol	m_creator_name		5005487						
ANR	5005535	Symbol	m_file_offset		5005487						
ANR	5005536	Symbol	m_event_offset		5005487						
ANR	5005537	Symbol	false		5005487						
ANR	5005538	Symbol	m_sequence		5005487						
ANR	5005539	Symbol	m_valid		5005487						
ANR	5005540	Symbol	m_num_events		5005487						
ANR	5005541	Symbol	m_max_rotation		5005487						
ANR	5005542	Function	UserLogHeader :: UserLogHeader	49:0:1381:1831							
ANR	5005543	FunctionDef	UserLogHeader :: UserLogHeader (const UserLogHeader & other)		5005542	0					
ANR	5005544	CompoundStatement		50:0:1440:1831	5005542	0					
ANR	5005545	ExpressionStatement	setId ( other . getId ( ) )	51:1:1443:1474	5005542	0	True				
ANR	5005546	CallExpression	setId ( other . getId ( ) )		5005542	0					
ANR	5005547	Callee	setId		5005542	0					
ANR	5005548	Identifier	setId		5005542	0					
ANR	5005549	ArgumentList	other . getId ( )		5005542	1					
ANR	5005550	Argument	other . getId ( )		5005542	0					
ANR	5005551	CallExpression	other . getId ( )		5005542	0					
ANR	5005552	Callee	other . getId		5005542	0					
ANR	5005553	MemberAccess	other . getId		5005542	0					
ANR	5005554	Identifier	other		5005542	0					
ANR	5005555	Identifier	getId		5005542	1					
ANR	5005556	ArgumentList			5005542	1					
ANR	5005557	ExpressionStatement	setSequence ( other . getSequence ( ) )	52:1:1477:1514	5005542	1	True				
ANR	5005558	CallExpression	setSequence ( other . getSequence ( ) )		5005542	0					
ANR	5005559	Callee	setSequence		5005542	0					
ANR	5005560	Identifier	setSequence		5005542	0					
ANR	5005561	ArgumentList	other . getSequence ( )		5005542	1					
ANR	5005562	Argument	other . getSequence ( )		5005542	0					
ANR	5005563	CallExpression	other . getSequence ( )		5005542	0					
ANR	5005564	Callee	other . getSequence		5005542	0					
ANR	5005565	MemberAccess	other . getSequence		5005542	0					
ANR	5005566	Identifier	other		5005542	0					
ANR	5005567	Identifier	getSequence		5005542	1					
ANR	5005568	ArgumentList			5005542	1					
ANR	5005569	ExpressionStatement	setCtime ( other . getCtime ( ) )	53:1:1517:1551	5005542	2	True				
ANR	5005570	CallExpression	setCtime ( other . getCtime ( ) )		5005542	0					
ANR	5005571	Callee	setCtime		5005542	0					
ANR	5005572	Identifier	setCtime		5005542	0					
ANR	5005573	ArgumentList	other . getCtime ( )		5005542	1					
ANR	5005574	Argument	other . getCtime ( )		5005542	0					
ANR	5005575	CallExpression	other . getCtime ( )		5005542	0					
ANR	5005576	Callee	other . getCtime		5005542	0					
ANR	5005577	MemberAccess	other . getCtime		5005542	0					
ANR	5005578	Identifier	other		5005542	0					
ANR	5005579	Identifier	getCtime		5005542	1					
ANR	5005580	ArgumentList			5005542	1					
ANR	5005581	ExpressionStatement	setSize ( other . getSize ( ) )	54:1:1554:1587	5005542	3	True				
ANR	5005582	CallExpression	setSize ( other . getSize ( ) )		5005542	0					
ANR	5005583	Callee	setSize		5005542	0					
ANR	5005584	Identifier	setSize		5005542	0					
ANR	5005585	ArgumentList	other . getSize ( )		5005542	1					
ANR	5005586	Argument	other . getSize ( )		5005542	0					
ANR	5005587	CallExpression	other . getSize ( )		5005542	0					
ANR	5005588	Callee	other . getSize		5005542	0					
ANR	5005589	MemberAccess	other . getSize		5005542	0					
ANR	5005590	Identifier	other		5005542	0					
ANR	5005591	Identifier	getSize		5005542	1					
ANR	5005592	ArgumentList			5005542	1					
ANR	5005593	ExpressionStatement	setNumEvents ( other . getNumEvents ( ) )	55:1:1590:1628	5005542	4	True				
ANR	5005594	CallExpression	setNumEvents ( other . getNumEvents ( ) )		5005542	0					
ANR	5005595	Callee	setNumEvents		5005542	0					
ANR	5005596	Identifier	setNumEvents		5005542	0					
ANR	5005597	ArgumentList	other . getNumEvents ( )		5005542	1					
ANR	5005598	Argument	other . getNumEvents ( )		5005542	0					
ANR	5005599	CallExpression	other . getNumEvents ( )		5005542	0					
ANR	5005600	Callee	other . getNumEvents		5005542	0					
ANR	5005601	MemberAccess	other . getNumEvents		5005542	0					
ANR	5005602	Identifier	other		5005542	0					
ANR	5005603	Identifier	getNumEvents		5005542	1					
ANR	5005604	ArgumentList			5005542	1					
ANR	5005605	ExpressionStatement	setFileOffset ( other . getFileOffset ( ) )	56:1:1631:1670	5005542	5	True				
ANR	5005606	CallExpression	setFileOffset ( other . getFileOffset ( ) )		5005542	0					
ANR	5005607	Callee	setFileOffset		5005542	0					
ANR	5005608	Identifier	setFileOffset		5005542	0					
ANR	5005609	ArgumentList	other . getFileOffset ( )		5005542	1					
ANR	5005610	Argument	other . getFileOffset ( )		5005542	0					
ANR	5005611	CallExpression	other . getFileOffset ( )		5005542	0					
ANR	5005612	Callee	other . getFileOffset		5005542	0					
ANR	5005613	MemberAccess	other . getFileOffset		5005542	0					
ANR	5005614	Identifier	other		5005542	0					
ANR	5005615	Identifier	getFileOffset		5005542	1					
ANR	5005616	ArgumentList			5005542	1					
ANR	5005617	ExpressionStatement	setEventOffset ( other . getEventOffset ( ) )	57:1:1673:1713	5005542	6	True				
ANR	5005618	CallExpression	setEventOffset ( other . getEventOffset ( ) )		5005542	0					
ANR	5005619	Callee	setEventOffset		5005542	0					
ANR	5005620	Identifier	setEventOffset		5005542	0					
ANR	5005621	ArgumentList	other . getEventOffset ( )		5005542	1					
ANR	5005622	Argument	other . getEventOffset ( )		5005542	0					
ANR	5005623	CallExpression	other . getEventOffset ( )		5005542	0					
ANR	5005624	Callee	other . getEventOffset		5005542	0					
ANR	5005625	MemberAccess	other . getEventOffset		5005542	0					
ANR	5005626	Identifier	other		5005542	0					
ANR	5005627	Identifier	getEventOffset		5005542	1					
ANR	5005628	ArgumentList			5005542	1					
ANR	5005629	ExpressionStatement	setMaxRotation ( other . getMaxRotation ( ) )	58:1:1716:1756	5005542	7	True				
ANR	5005630	CallExpression	setMaxRotation ( other . getMaxRotation ( ) )		5005542	0					
ANR	5005631	Callee	setMaxRotation		5005542	0					
ANR	5005632	Identifier	setMaxRotation		5005542	0					
ANR	5005633	ArgumentList	other . getMaxRotation ( )		5005542	1					
ANR	5005634	Argument	other . getMaxRotation ( )		5005542	0					
ANR	5005635	CallExpression	other . getMaxRotation ( )		5005542	0					
ANR	5005636	Callee	other . getMaxRotation		5005542	0					
ANR	5005637	MemberAccess	other . getMaxRotation		5005542	0					
ANR	5005638	Identifier	other		5005542	0					
ANR	5005639	Identifier	getMaxRotation		5005542	1					
ANR	5005640	ArgumentList			5005542	1					
ANR	5005641	ExpressionStatement	setCreatorName ( other . getCreatorName ( ) )	59:1:1759:1799	5005542	8	True				
ANR	5005642	CallExpression	setCreatorName ( other . getCreatorName ( ) )		5005542	0					
ANR	5005643	Callee	setCreatorName		5005542	0					
ANR	5005644	Identifier	setCreatorName		5005542	0					
ANR	5005645	ArgumentList	other . getCreatorName ( )		5005542	1					
ANR	5005646	Argument	other . getCreatorName ( )		5005542	0					
ANR	5005647	CallExpression	other . getCreatorName ( )		5005542	0					
ANR	5005648	Callee	other . getCreatorName		5005542	0					
ANR	5005649	MemberAccess	other . getCreatorName		5005542	0					
ANR	5005650	Identifier	other		5005542	0					
ANR	5005651	Identifier	getCreatorName		5005542	1					
ANR	5005652	ArgumentList			5005542	1					
ANR	5005653	ExpressionStatement	m_valid = other . IsValid ( )	61:1:1803:1829	5005542	9	True				
ANR	5005654	AssignmentExpression	m_valid = other . IsValid ( )		5005542	0		=			
ANR	5005655	Identifier	m_valid		5005542	0					
ANR	5005656	CallExpression	other . IsValid ( )		5005542	1					
ANR	5005657	Callee	other . IsValid		5005542	0					
ANR	5005658	MemberAccess	other . IsValid		5005542	0					
ANR	5005659	Identifier	other		5005542	0					
ANR	5005660	Identifier	IsValid		5005542	1					
ANR	5005661	ArgumentList			5005542	1					
ANR	5005662	Identifier	UserLogHeader :: UserLogHeader		5005542	1					
ANR	5005663	ParameterList	const UserLogHeader & other		5005542	2					
ANR	5005664	Parameter	const UserLogHeader & other	49:30:1411:1436	5005542	0	True				
ANR	5005665	ParameterType	const UserLogHeader &		5005542	0					
ANR	5005666	Identifier	other		5005542	1					
ANR	5005667	CFGEntryNode	ENTRY		5005542		True				
ANR	5005668	CFGExitNode	EXIT		5005542		True				
ANR	5005669	Symbol	other		5005542						
ANR	5005670	Symbol	other . getNumEvents		5005542						
ANR	5005671	Symbol	other . getMaxRotation		5005542						
ANR	5005672	Symbol	other . getSequence		5005542						
ANR	5005673	Symbol	other . IsValid		5005542						
ANR	5005674	Symbol	other . getFileOffset		5005542						
ANR	5005675	Symbol	other . getSize		5005542						
ANR	5005676	Symbol	other . getEventOffset		5005542						
ANR	5005677	Symbol	m_valid		5005542						
ANR	5005678	Symbol	other . getId		5005542						
ANR	5005679	Symbol	other . getCtime		5005542						
ANR	5005680	Symbol	other . getCreatorName		5005542						
ANR	5005681	Function	UserLogHeader :: ExtractEvent	65:0:1864:3495							
ANR	5005682	FunctionDef	UserLogHeader :: ExtractEvent (const ULogEvent * event)		5005681	0					
ANR	5005683	CompoundStatement		67:0:1922:3495	5005681	0					
ANR	5005684	IfStatement	if ( ULOG_GENERIC != event -> eventNumber )		5005681	0					
ANR	5005685	Condition	ULOG_GENERIC != event -> eventNumber	69:6:1967:2000	5005681	0	True				
ANR	5005686	EqualityExpression	ULOG_GENERIC != event -> eventNumber		5005681	0		!=			
ANR	5005687	Identifier	ULOG_GENERIC		5005681	0					
ANR	5005688	PtrMemberAccess	event -> eventNumber		5005681	1					
ANR	5005689	Identifier	event		5005681	0					
ANR	5005690	Identifier	eventNumber		5005681	1					
ANR	5005691	CompoundStatement		3:43:81:81	5005681	1					
ANR	5005692	ReturnStatement	return ULOG_NO_EVENT ;	70:2:2008:2028	5005681	0	True				
ANR	5005693	Identifier	ULOG_NO_EVENT		5005681	0					
ANR	5005694	Statement	const	73:1:2035:2039	5005681	1	True				
ANR	5005695	Statement	GenericEvent	73:7:2041:2052	5005681	2	True				
ANR	5005696	Statement	*	73:20:2054:2054	5005681	3	True				
ANR	5005697	Statement	generic	73:21:2055:2061	5005681	4	True				
ANR	5005698	Statement	=	73:29:2063:2063	5005681	5	True				
ANR	5005699	Statement	dynamic_cast	73:31:2065:2076	5005681	6	True				
ANR	5005700	Statement	<	73:44:2078:2078	5005681	7	True				
ANR	5005701	Statement	const	73:45:2079:2083	5005681	8	True				
ANR	5005702	Statement	GenericEvent	73:51:2085:2096	5005681	9	True				
ANR	5005703	Statement	*	73:63:2097:2097	5005681	10	True				
ANR	5005704	Statement	>	73:64:2098:2098	5005681	11	True				
ANR	5005705	ExpressionStatement	event	73:65:2099:2108	5005681	12	True				
ANR	5005706	Identifier	event		5005681	0					
ANR	5005707	IfStatement	if ( ! generic )		5005681	13					
ANR	5005708	Condition	! generic	74:6:2116:2124	5005681	0	True				
ANR	5005709	UnaryOperationExpression	! generic		5005681	0					
ANR	5005710	UnaryOperator	!		5005681	0					
ANR	5005711	Identifier	generic		5005681	1					
ANR	5005712	CompoundStatement		8:18:205:205	5005681	1					
ANR	5005713	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't pointer cast generic event!\\n"" )"	75:2:2132:2190	5005681	0	True				
ANR	5005714	CallExpression	"dprintf ( D_ALWAYS , ""Can't pointer cast generic event!\\n"" )"		5005681	0					
ANR	5005715	Callee	dprintf		5005681	0					
ANR	5005716	Identifier	dprintf		5005681	0					
ANR	5005717	ArgumentList	D_ALWAYS		5005681	1					
ANR	5005718	Argument	D_ALWAYS		5005681	0					
ANR	5005719	Identifier	D_ALWAYS		5005681	0					
ANR	5005720	Argument	"""Can't pointer cast generic event!\\n"""		5005681	1					
ANR	5005721	PrimaryExpression	"""Can't pointer cast generic event!\\n"""		5005681	0					
ANR	5005722	ReturnStatement	return ULOG_UNK_ERROR ;	76:2:2194:2215	5005681	1	True				
ANR	5005723	Identifier	ULOG_UNK_ERROR		5005681	0					
ANR	5005724	CompoundStatement		16:2:401:425	5005681	14					
ANR	5005725	IdentifierDeclStatement	char buf [ 1024 ] ;	79:2:2225:2239	5005681	0	True				
ANR	5005726	IdentifierDecl	buf [ 1024 ]		5005681	0					
ANR	5005727	IdentifierDeclType	char [ 1024 ]		5005681	0					
ANR	5005728	Identifier	buf		5005681	1					
ANR	5005729	PrimaryExpression	1024		5005681	2					
ANR	5005730	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	80:2:2243:2272	5005681	1	True				
ANR	5005731	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		5005681	0					
ANR	5005732	Callee	memset		5005681	0					
ANR	5005733	Identifier	memset		5005681	0					
ANR	5005734	ArgumentList	buf		5005681	1					
ANR	5005735	Argument	buf		5005681	0					
ANR	5005736	Identifier	buf		5005681	0					
ANR	5005737	Argument	0		5005681	1					
ANR	5005738	PrimaryExpression	0		5005681	0					
ANR	5005739	Argument	sizeof ( buf )		5005681	2					
ANR	5005740	SizeofExpression	sizeof ( buf )		5005681	0					
ANR	5005741	Sizeof	sizeof		5005681	0					
ANR	5005742	SizeofOperand	buf		5005681	1					
ANR	5005743	ExpressionStatement	"strncpy ( buf , generic -> info , sizeof ( buf ) - 1 )"	81:2:2276:2320	5005681	2	True				
ANR	5005744	CallExpression	"strncpy ( buf , generic -> info , sizeof ( buf ) - 1 )"		5005681	0					
ANR	5005745	Callee	strncpy		5005681	0					
ANR	5005746	Identifier	strncpy		5005681	0					
ANR	5005747	ArgumentList	buf		5005681	1					
ANR	5005748	Argument	buf		5005681	0					
ANR	5005749	Identifier	buf		5005681	0					
ANR	5005750	Argument	generic -> info		5005681	1					
ANR	5005751	PtrMemberAccess	generic -> info		5005681	0					
ANR	5005752	Identifier	generic		5005681	0					
ANR	5005753	Identifier	info		5005681	1					
ANR	5005754	Argument	sizeof ( buf ) - 1		5005681	2					
ANR	5005755	AdditiveExpression	sizeof ( buf ) - 1		5005681	0		-			
ANR	5005756	SizeofExpression	sizeof ( buf )		5005681	0					
ANR	5005757	Sizeof	sizeof		5005681	0					
ANR	5005758	SizeofOperand	buf		5005681	1					
ANR	5005759	PrimaryExpression	1		5005681	1					
ANR	5005760	IdentifierDeclStatement	int size = strlen ( buf ) ;	82:2:2324:2348	5005681	3	True				
ANR	5005761	IdentifierDecl	size = strlen ( buf )		5005681	0					
ANR	5005762	IdentifierDeclType	int		5005681	0					
ANR	5005763	Identifier	size		5005681	1					
ANR	5005764	AssignmentExpression	size = strlen ( buf )		5005681	2		=			
ANR	5005765	Identifier	size		5005681	0					
ANR	5005766	CallExpression	strlen ( buf )		5005681	1					
ANR	5005767	Callee	strlen		5005681	0					
ANR	5005768	Identifier	strlen		5005681	0					
ANR	5005769	ArgumentList	buf		5005681	1					
ANR	5005770	Argument	buf		5005681	0					
ANR	5005771	Identifier	buf		5005681	0					
ANR	5005772	WhileStatement	while ( isspace ( buf [ size - 1 ] ) )		5005681	4					
ANR	5005773	Condition	isspace ( buf [ size - 1 ] )	83:9:2359:2378	5005681	0	True				
ANR	5005774	CallExpression	isspace ( buf [ size - 1 ] )		5005681	0					
ANR	5005775	Callee	isspace		5005681	0					
ANR	5005776	Identifier	isspace		5005681	0					
ANR	5005777	ArgumentList	buf [ size - 1 ]		5005681	1					
ANR	5005778	Argument	buf [ size - 1 ]		5005681	0					
ANR	5005779	ArrayIndexing	buf [ size - 1 ]		5005681	0					
ANR	5005780	Identifier	buf		5005681	0					
ANR	5005781	AdditiveExpression	size - 1		5005681	1		-			
ANR	5005782	Identifier	size		5005681	0					
ANR	5005783	PrimaryExpression	1		5005681	1					
ANR	5005784	ExpressionStatement	buf [ -- size ] = '\\0'	84:3:2385:2403	5005681	1	True				
ANR	5005785	AssignmentExpression	buf [ -- size ] = '\\0'		5005681	0		=			
ANR	5005786	ArrayIndexing	buf [ -- size ]		5005681	0					
ANR	5005787	Identifier	buf		5005681	0					
ANR	5005788	UnaryExpression	-- size		5005681	1					
ANR	5005789	IncDec	--		5005681	0					
ANR	5005790	Identifier	size		5005681	1					
ANR	5005791	PrimaryExpression	'\\0'		5005681	1					
ANR	5005792	Statement	::	85:2:2407:2408	5005681	5	True				
ANR	5005793	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): parsing '%s'\\n"" , buf )"	85:4:2409:2499	5005681	6	True				
ANR	5005794	CallExpression	"dprintf ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): parsing '%s'\\n"" , buf )"		5005681	0					
ANR	5005795	Callee	dprintf		5005681	0					
ANR	5005796	Identifier	dprintf		5005681	0					
ANR	5005797	ArgumentList	D_FULLDEBUG		5005681	1					
ANR	5005798	Argument	D_FULLDEBUG		5005681	0					
ANR	5005799	Identifier	D_FULLDEBUG		5005681	0					
ANR	5005800	Argument	"""UserLogHeader::ExtractEvent(): parsing '%s'\\n"""		5005681	1					
ANR	5005801	PrimaryExpression	"""UserLogHeader::ExtractEvent(): parsing '%s'\\n"""		5005681	0					
ANR	5005802	Argument	buf		5005681	2					
ANR	5005803	Identifier	buf		5005681	0					
ANR	5005804	IdentifierDeclStatement	char id [ 256 ] ;	90:1:2506:2520	5005681	15	True				
ANR	5005805	IdentifierDecl	id [ 256 ]		5005681	0					
ANR	5005806	IdentifierDeclType	char [ 256 ]		5005681	0					
ANR	5005807	Identifier	id		5005681	1					
ANR	5005808	PrimaryExpression	256		5005681	2					
ANR	5005809	IdentifierDeclStatement	char name [ 256 ] ;	91:1:2523:2539	5005681	16	True				
ANR	5005810	IdentifierDecl	name [ 256 ]		5005681	0					
ANR	5005811	IdentifierDeclType	char [ 256 ]		5005681	0					
ANR	5005812	Identifier	name		5005681	1					
ANR	5005813	PrimaryExpression	256		5005681	2					
ANR	5005814	IdentifierDeclStatement	int ctime ;	92:1:2542:2554	5005681	17	True				
ANR	5005815	IdentifierDecl	ctime		5005681	0					
ANR	5005816	IdentifierDeclType	int		5005681	0					
ANR	5005817	Identifier	ctime		5005681	1					
ANR	5005818	ExpressionStatement	id [ 0 ] = '\\0'	94:1:2558:2570	5005681	18	True				
ANR	5005819	AssignmentExpression	id [ 0 ] = '\\0'		5005681	0		=			
ANR	5005820	ArrayIndexing	id [ 0 ]		5005681	0					
ANR	5005821	Identifier	id		5005681	0					
ANR	5005822	PrimaryExpression	0		5005681	1					
ANR	5005823	PrimaryExpression	'\\0'		5005681	1					
ANR	5005824	ExpressionStatement	name [ 0 ] = '\\0'	95:1:2573:2587	5005681	19	True				
ANR	5005825	AssignmentExpression	name [ 0 ] = '\\0'		5005681	0		=			
ANR	5005826	ArrayIndexing	name [ 0 ]		5005681	0					
ANR	5005827	Identifier	name		5005681	0					
ANR	5005828	PrimaryExpression	0		5005681	1					
ANR	5005829	PrimaryExpression	'\\0'		5005681	1					
ANR	5005830	Statement	int	96:1:2590:2592	5005681	20	True				
ANR	5005831	Statement	n	96:5:2594:2594	5005681	21	True				
ANR	5005832	Statement	=	96:7:2596:2596	5005681	22	True				
ANR	5005833	Statement	sscanf	96:9:2598:2603	5005681	23	True				
ANR	5005834	Statement	(	96:15:2604:2604	5005681	24	True				
ANR	5005835	Statement	generic	96:17:2606:2612	5005681	25	True				
ANR	5005836	Statement	->	96:24:2613:2614	5005681	26	True				
ANR	5005837	Statement	info	96:26:2615:2618	5005681	27	True				
ANR	5005838	Statement	","	96:30:2619:2619	5005681	28	True				
ANR	5005839	Statement	"""Global JobLog:"""	97:5:2626:2641	5005681	29	True				
ANR	5005840	Statement	""" ctime=%d"""	98:5:2648:2658	5005681	30	True				
ANR	5005841	Statement	""" id=%255s"""	99:5:2665:2675	5005681	31	True				
ANR	5005842	Statement	""" sequence=%d"""	100:5:2682:2695	5005681	32	True				
ANR	5005843	Statement	""" size="""	101:5:2702:2709	5005681	33	True				
ANR	5005844	Statement	FILESIZE_T_FORMAT	101:13:2710:2726	5005681	34	True				
ANR	5005845	Statement	""""""	101:30:2727:2728	5005681	35	True				
ANR	5005846	Statement	""" events=%"""	102:5:2735:2745	5005681	36	True				
ANR	5005847	Statement	PRId64	102:16:2746:2751	5005681	37	True				
ANR	5005848	Statement	""""""	102:22:2752:2753	5005681	38	True				
ANR	5005849	Statement	""" offset="""	103:5:2760:2769	5005681	39	True				
ANR	5005850	Statement	FILESIZE_T_FORMAT	103:15:2770:2786	5005681	40	True				
ANR	5005851	Statement	""""""	103:32:2787:2788	5005681	41	True				
ANR	5005852	Statement	""" event_off=%"""	104:5:2795:2808	5005681	42	True				
ANR	5005853	Statement	PRId64	104:19:2809:2814	5005681	43	True				
ANR	5005854	Statement	""""""	104:25:2815:2816	5005681	44	True				
ANR	5005855	Statement	""" max_rotation=%d"""	105:5:2823:2840	5005681	45	True				
ANR	5005856	Statement	""" creator_name=<%255[^>]>"""	106:5:2847:2872	5005681	46	True				
ANR	5005857	Statement	","	106:31:2873:2873	5005681	47	True				
ANR	5005858	Statement	&	107:5:2880:2880	5005681	48	True				
ANR	5005859	Statement	ctime	107:6:2881:2885	5005681	49	True				
ANR	5005860	Statement	","	107:11:2886:2886	5005681	50	True				
ANR	5005861	Statement	id	108:5:2893:2894	5005681	51	True				
ANR	5005862	Statement	","	108:7:2895:2895	5005681	52	True				
ANR	5005863	Statement	&	109:5:2902:2902	5005681	53	True				
ANR	5005864	Statement	m_sequence	109:6:2903:2912	5005681	54	True				
ANR	5005865	Statement	","	109:16:2913:2913	5005681	55	True				
ANR	5005866	Statement	&	110:5:2920:2920	5005681	56	True				
ANR	5005867	Statement	m_size	110:6:2921:2926	5005681	57	True				
ANR	5005868	Statement	","	110:12:2927:2927	5005681	58	True				
ANR	5005869	Statement	&	111:5:2934:2934	5005681	59	True				
ANR	5005870	Statement	m_num_events	111:6:2935:2946	5005681	60	True				
ANR	5005871	Statement	","	111:18:2947:2947	5005681	61	True				
ANR	5005872	Statement	&	112:5:2954:2954	5005681	62	True				
ANR	5005873	Statement	m_file_offset	112:6:2955:2967	5005681	63	True				
ANR	5005874	Statement	","	112:19:2968:2968	5005681	64	True				
ANR	5005875	Statement	&	113:5:2975:2975	5005681	65	True				
ANR	5005876	Statement	m_event_offset	113:6:2976:2989	5005681	66	True				
ANR	5005877	Statement	","	113:20:2990:2990	5005681	67	True				
ANR	5005878	Statement	&	114:5:2997:2997	5005681	68	True				
ANR	5005879	Statement	m_max_rotation	114:6:2998:3011	5005681	69	True				
ANR	5005880	Statement	","	114:20:3012:3012	5005681	70	True				
ANR	5005881	Statement	name	115:5:3019:3022	5005681	71	True				
ANR	5005882	Statement	)	116:5:3029:3029	5005681	72	True				
ANR	5005883	ExpressionStatement		116:6:3030:3030	5005681	73	True				
ANR	5005884	IfStatement	if ( n >= 3 )		5005681	74					
ANR	5005885	Condition	n >= 3	117:6:3038:3043	5005681	0	True				
ANR	5005886	RelationalExpression	n >= 3		5005681	0		>=			
ANR	5005887	Identifier	n		5005681	0					
ANR	5005888	PrimaryExpression	3		5005681	1					
ANR	5005889	CompoundStatement		51:15:1124:1124	5005681	1					
ANR	5005890	ExpressionStatement	m_ctime = ctime	118:2:3051:3066	5005681	0	True				
ANR	5005891	AssignmentExpression	m_ctime = ctime		5005681	0		=			
ANR	5005892	Identifier	m_ctime		5005681	0					
ANR	5005893	Identifier	ctime		5005681	1					
ANR	5005894	ExpressionStatement	m_id = id	119:2:3070:3079	5005681	1	True				
ANR	5005895	AssignmentExpression	m_id = id		5005681	0		=			
ANR	5005896	Identifier	m_id		5005681	0					
ANR	5005897	Identifier	id		5005681	1					
ANR	5005898	ExpressionStatement	m_valid = true	120:2:3083:3097	5005681	2	True				
ANR	5005899	AssignmentExpression	m_valid = true		5005681	0		=			
ANR	5005900	Identifier	m_valid		5005681	0					
ANR	5005901	Identifier	true		5005681	1					
ANR	5005902	IfStatement	if ( n >= 8 )		5005681	3					
ANR	5005903	Condition	n >= 8	122:7:3107:3112	5005681	0	True				
ANR	5005904	RelationalExpression	n >= 8		5005681	0		>=			
ANR	5005905	Identifier	n		5005681	0					
ANR	5005906	PrimaryExpression	8		5005681	1					
ANR	5005907	CompoundStatement		56:16:1193:1193	5005681	1					
ANR	5005908	ExpressionStatement	m_creator_name = name	123:3:3121:3142	5005681	0	True				
ANR	5005909	AssignmentExpression	m_creator_name = name		5005681	0		=			
ANR	5005910	Identifier	m_creator_name		5005681	0					
ANR	5005911	Identifier	name		5005681	1					
ANR	5005912	ElseStatement	else		5005681	0					
ANR	5005913	CompoundStatement		59:7:1232:1232	5005681	0					
ANR	5005914	ExpressionStatement	"m_creator_name = """""	126:3:3160:3179	5005681	0	True				
ANR	5005915	AssignmentExpression	"m_creator_name = """""		5005681	0		=			
ANR	5005916	Identifier	m_creator_name		5005681	0					
ANR	5005917	PrimaryExpression	""""""		5005681	1					
ANR	5005918	ExpressionStatement	m_max_rotation = - 1	127:3:3184:3203	5005681	1	True				
ANR	5005919	AssignmentExpression	m_max_rotation = - 1		5005681	0		=			
ANR	5005920	Identifier	m_max_rotation		5005681	0					
ANR	5005921	UnaryOperationExpression	- 1		5005681	1					
ANR	5005922	UnaryOperator	-		5005681	0					
ANR	5005923	PrimaryExpression	1		5005681	1					
ANR	5005924	IfStatement	if ( DebugFlags & D_FULLDEBUG )		5005681	4					
ANR	5005925	Condition	DebugFlags & D_FULLDEBUG	130:7:3217:3240	5005681	0	True				
ANR	5005926	BitAndExpression	DebugFlags & D_FULLDEBUG		5005681	0		&			
ANR	5005927	Identifier	DebugFlags		5005681	0					
ANR	5005928	Identifier	D_FULLDEBUG		5005681	1					
ANR	5005929	CompoundStatement		64:34:1321:1321	5005681	1					
ANR	5005930	ExpressionStatement	"dprint ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): parsed ->"" )"	131:3:3249:3314	5005681	0	True				
ANR	5005931	CallExpression	"dprint ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): parsed ->"" )"		5005681	0					
ANR	5005932	Callee	dprint		5005681	0					
ANR	5005933	Identifier	dprint		5005681	0					
ANR	5005934	ArgumentList	D_FULLDEBUG		5005681	1					
ANR	5005935	Argument	D_FULLDEBUG		5005681	0					
ANR	5005936	Identifier	D_FULLDEBUG		5005681	0					
ANR	5005937	Argument	"""UserLogHeader::ExtractEvent(): parsed ->"""		5005681	1					
ANR	5005938	PrimaryExpression	"""UserLogHeader::ExtractEvent(): parsed ->"""		5005681	0					
ANR	5005939	ReturnStatement	return ULOG_OK ;	133:2:3322:3336	5005681	5	True				
ANR	5005940	Identifier	ULOG_OK		5005681	0					
ANR	5005941	ElseStatement	else		5005681	0					
ANR	5005942	CompoundStatement		69:6:1424:1424	5005681	0					
ANR	5005943	Statement	::	136:2:3351:3352	5005681	0	True				
ANR	5005944	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): can't parse '%s' => %d\\n"" , generic -> info , n )"	136:4:3353:3466	5005681	1	True				
ANR	5005945	CallExpression	"dprintf ( D_FULLDEBUG , ""UserLogHeader::ExtractEvent(): can't parse '%s' => %d\\n"" , generic -> info , n )"		5005681	0					
ANR	5005946	Callee	dprintf		5005681	0					
ANR	5005947	Identifier	dprintf		5005681	0					
ANR	5005948	ArgumentList	D_FULLDEBUG		5005681	1					
ANR	5005949	Argument	D_FULLDEBUG		5005681	0					
ANR	5005950	Identifier	D_FULLDEBUG		5005681	0					
ANR	5005951	Argument	"""UserLogHeader::ExtractEvent(): can't parse '%s' => %d\\n"""		5005681	1					
ANR	5005952	PrimaryExpression	"""UserLogHeader::ExtractEvent(): can't parse '%s' => %d\\n"""		5005681	0					
ANR	5005953	Argument	generic -> info		5005681	2					
ANR	5005954	PtrMemberAccess	generic -> info		5005681	0					
ANR	5005955	Identifier	generic		5005681	0					
ANR	5005956	Identifier	info		5005681	1					
ANR	5005957	Argument	n		5005681	3					
ANR	5005958	Identifier	n		5005681	0					
ANR	5005959	ReturnStatement	return ULOG_NO_EVENT ;	139:2:3470:3490	5005681	2	True				
ANR	5005960	Identifier	ULOG_NO_EVENT		5005681	0					
ANR	5005961	ReturnType	int		5005681	1					
ANR	5005962	Identifier	UserLogHeader :: ExtractEvent		5005681	2					
ANR	5005963	ParameterList	const ULogEvent * event		5005681	3					
ANR	5005964	Parameter	const ULogEvent * event	66:29:1897:1918	5005681	0	True				
ANR	5005965	ParameterType	const ULogEvent *		5005681	0					
ANR	5005966	Identifier	event		5005681	1					
ANR	5005967	CFGEntryNode	ENTRY		5005681		True				
ANR	5005968	CFGExitNode	EXIT		5005681		True				
ANR	5005969	Symbol	ULOG_NO_EVENT		5005681						
ANR	5005970	Symbol	* id		5005681						
ANR	5005971	Symbol	* event		5005681						
ANR	5005972	Symbol	m_creator_name		5005681						
ANR	5005973	Symbol	ULOG_UNK_ERROR		5005681						
ANR	5005974	Symbol	generic -> info		5005681						
ANR	5005975	Symbol	m_max_rotation		5005681						
ANR	5005976	Symbol	strlen		5005681						
ANR	5005977	Symbol	* size		5005681						
ANR	5005978	Symbol	m_ctime		5005681						
ANR	5005979	Symbol	ctime		5005681						
ANR	5005980	Symbol	id		5005681						
ANR	5005981	Symbol	event		5005681						
ANR	5005982	Symbol	event -> eventNumber		5005681						
ANR	5005983	Symbol	m_id		5005681						
ANR	5005984	Symbol	* name		5005681						
ANR	5005985	Symbol	* buf		5005681						
ANR	5005986	Symbol	D_ALWAYS		5005681						
ANR	5005987	Symbol	isspace		5005681						
ANR	5005988	Symbol	D_FULLDEBUG		5005681						
ANR	5005989	Symbol	DebugFlags		5005681						
ANR	5005990	Symbol	generic		5005681						
ANR	5005991	Symbol	n		5005681						
ANR	5005992	Symbol	ULOG_OK		5005681						
ANR	5005993	Symbol	buf		5005681						
ANR	5005994	Symbol	size		5005681						
ANR	5005995	Symbol	name		5005681						
ANR	5005996	Symbol	true		5005681						
ANR	5005997	Symbol	* generic		5005681						
ANR	5005998	Symbol	m_valid		5005681						
ANR	5005999	Symbol	ULOG_GENERIC		5005681						
ANR	5006000	Function	UserLogHeader :: sprint_cat	144:0:3518:4087							
ANR	5006001	FunctionDef	UserLogHeader :: sprint_cat (MyString & buf)		5006000	0					
ANR	5006002	CompoundStatement		146:0:3572:4087	5006000	0					
ANR	5006003	IfStatement	if ( m_valid )		5006000	0					
ANR	5006004	Condition	m_valid	147:6:3580:3586	5006000	0	True				
ANR	5006005	Identifier	m_valid		5006000	0					
ANR	5006006	CompoundStatement		2:16:17:17	5006000	1					
ANR	5006007	Statement	buf	148:2:3594:3596	5006000	0	True				
ANR	5006008	Statement	.	148:5:3597:3597	5006000	1	True				
ANR	5006009	Statement	sprintf_cat	148:6:3598:3608	5006000	2	True				
ANR	5006010	Statement	(	148:17:3609:3609	5006000	3	True				
ANR	5006011	Statement	"""id=%s"""	148:19:3611:3617	5006000	4	True				
ANR	5006012	Statement	""" seq=%d"""	149:7:3626:3634	5006000	5	True				
ANR	5006013	Statement	""" ctime=%lu"""	150:7:3643:3654	5006000	6	True				
ANR	5006014	Statement	""" size="""	151:7:3663:3670	5006000	7	True				
ANR	5006015	Statement	FILESIZE_T_FORMAT	151:15:3671:3687	5006000	8	True				
ANR	5006016	Statement	""" num=%"""	152:7:3696:3703	5006000	9	True				
ANR	5006017	Statement	PRIi64	152:15:3704:3709	5006000	10	True				
ANR	5006018	Statement	""" file_offset="""	153:7:3718:3732	5006000	11	True				
ANR	5006019	Statement	FILESIZE_T_FORMAT	153:22:3733:3749	5006000	12	True				
ANR	5006020	Statement	""" event_offset=%"""	154:7:3758:3774	5006000	13	True				
ANR	5006021	Statement	PRIi64	154:24:3775:3780	5006000	14	True				
ANR	5006022	Statement	""" max_rotation=%d"""	155:7:3789:3806	5006000	15	True				
ANR	5006023	Statement	""" creator_name=<%s>"""	156:7:3815:3834	5006000	16	True				
ANR	5006024	Statement	","	156:27:3835:3835	5006000	17	True				
ANR	5006025	Statement	m_id	157:7:3844:3847	5006000	18	True				
ANR	5006026	Statement	.	157:11:3848:3848	5006000	19	True				
ANR	5006027	Statement	Value	157:12:3849:3853	5006000	20	True				
ANR	5006028	Statement	(	157:17:3854:3854	5006000	21	True				
ANR	5006029	Statement	)	157:18:3855:3855	5006000	22	True				
ANR	5006030	Statement	","	157:19:3856:3856	5006000	23	True				
ANR	5006031	Statement	m_sequence	158:7:3865:3874	5006000	24	True				
ANR	5006032	Statement	","	158:17:3875:3875	5006000	25	True				
ANR	5006033	Statement	(	159:7:3884:3884	5006000	26	True				
ANR	5006034	Statement	unsigned	159:8:3885:3892	5006000	27	True				
ANR	5006035	Statement	long	159:17:3894:3897	5006000	28	True				
ANR	5006036	Statement	)	159:21:3898:3898	5006000	29	True				
ANR	5006037	Statement	m_ctime	159:23:3900:3906	5006000	30	True				
ANR	5006038	Statement	","	159:30:3907:3907	5006000	31	True				
ANR	5006039	Statement	m_size	160:7:3916:3921	5006000	32	True				
ANR	5006040	Statement	","	160:13:3922:3922	5006000	33	True				
ANR	5006041	Statement	m_num_events	161:7:3931:3942	5006000	34	True				
ANR	5006042	Statement	","	161:19:3943:3943	5006000	35	True				
ANR	5006043	Statement	m_file_offset	162:7:3952:3964	5006000	36	True				
ANR	5006044	Statement	","	162:20:3965:3965	5006000	37	True				
ANR	5006045	Statement	m_event_offset	163:7:3974:3987	5006000	38	True				
ANR	5006046	Statement	","	163:21:3988:3988	5006000	39	True				
ANR	5006047	Statement	m_max_rotation	164:7:3997:4010	5006000	40	True				
ANR	5006048	Statement	","	164:21:4011:4011	5006000	41	True				
ANR	5006049	Statement	m_creator_name	165:7:4020:4033	5006000	42	True				
ANR	5006050	Statement	.	165:21:4034:4034	5006000	43	True				
ANR	5006051	Statement	Value	165:22:4035:4039	5006000	44	True				
ANR	5006052	Statement	(	165:27:4040:4040	5006000	45	True				
ANR	5006053	Statement	)	165:28:4041:4041	5006000	46	True				
ANR	5006054	Statement	)	166:7:4050:4050	5006000	47	True				
ANR	5006055	ExpressionStatement		166:8:4051:4051	5006000	48	True				
ANR	5006056	ElseStatement	else		5006000	0					
ANR	5006057	CompoundStatement		23:6:489:489	5006000	0					
ANR	5006058	ExpressionStatement	"buf += ""invalid"""	169:2:4066:4082	5006000	0	True				
ANR	5006059	AssignmentExpression	"buf += ""invalid"""		5006000	0		+=			
ANR	5006060	Identifier	buf		5006000	0					
ANR	5006061	PrimaryExpression	"""invalid"""		5006000	1					
ANR	5006062	ReturnType	void		5006000	1					
ANR	5006063	Identifier	UserLogHeader :: sprint_cat		5006000	2					
ANR	5006064	ParameterList	MyString & buf		5006000	3					
ANR	5006065	Parameter	MyString & buf	145:27:3550:3562	5006000	0	True				
ANR	5006066	ParameterType	MyString &		5006000	0					
ANR	5006067	Identifier	buf		5006000	1					
ANR	5006068	CFGEntryNode	ENTRY		5006000		True				
ANR	5006069	CFGExitNode	EXIT		5006000		True				
ANR	5006070	Symbol	buf		5006000						
ANR	5006071	Symbol	m_valid		5006000						
ANR	5006072	Function	UserLogHeader :: dprint	174:0:4109:4286							
ANR	5006073	FunctionDef	"UserLogHeader :: dprint (int level , MyString & buf)"		5006072	0					
ANR	5006074	CompoundStatement		176:0:4170:4286	5006072	0					
ANR	5006075	IfStatement	if ( 0 == ( level & DebugFlags ) )		5006072	0					
ANR	5006076	Condition	0 == ( level & DebugFlags )	177:6:4178:4204	5006072	0	True				
ANR	5006077	EqualityExpression	0 == ( level & DebugFlags )		5006072	0		==			
ANR	5006078	PrimaryExpression	0		5006072	0					
ANR	5006079	BitAndExpression	level & DebugFlags		5006072	1		&			
ANR	5006080	Identifier	level		5006072	0					
ANR	5006081	Identifier	DebugFlags		5006072	1					
ANR	5006082	CompoundStatement		2:36:37:37	5006072	1					
ANR	5006083	ReturnStatement	return ;	178:2:4212:4218	5006072	0	True				
ANR	5006084	ExpressionStatement	sprint_cat ( buf )	181:1:4225:4242	5006072	1	True				
ANR	5006085	CallExpression	sprint_cat ( buf )		5006072	0					
ANR	5006086	Callee	sprint_cat		5006072	0					
ANR	5006087	Identifier	sprint_cat		5006072	0					
ANR	5006088	ArgumentList	buf		5006072	1					
ANR	5006089	Argument	buf		5006072	0					
ANR	5006090	Identifier	buf		5006072	0					
ANR	5006091	Statement	::	182:1:4245:4246	5006072	2	True				
ANR	5006092	ExpressionStatement	"dprintf ( level , ""%s\\n"" , buf . Value ( ) )"	182:3:4247:4284	5006072	3	True				
ANR	5006093	CallExpression	"dprintf ( level , ""%s\\n"" , buf . Value ( ) )"		5006072	0					
ANR	5006094	Callee	dprintf		5006072	0					
ANR	5006095	Identifier	dprintf		5006072	0					
ANR	5006096	ArgumentList	level		5006072	1					
ANR	5006097	Argument	level		5006072	0					
ANR	5006098	Identifier	level		5006072	0					
ANR	5006099	Argument	"""%s\\n"""		5006072	1					
ANR	5006100	PrimaryExpression	"""%s\\n"""		5006072	0					
ANR	5006101	Argument	buf . Value ( )		5006072	2					
ANR	5006102	CallExpression	buf . Value ( )		5006072	0					
ANR	5006103	Callee	buf . Value		5006072	0					
ANR	5006104	MemberAccess	buf . Value		5006072	0					
ANR	5006105	Identifier	buf		5006072	0					
ANR	5006106	Identifier	Value		5006072	1					
ANR	5006107	ArgumentList			5006072	1					
ANR	5006108	ReturnType	void		5006072	1					
ANR	5006109	Identifier	UserLogHeader :: dprint		5006072	2					
ANR	5006110	ParameterList	"int level , MyString & buf"		5006072	3					
ANR	5006111	Parameter	int level	175:23:4137:4145	5006072	0	True				
ANR	5006112	ParameterType	int		5006072	0					
ANR	5006113	Identifier	level		5006072	1					
ANR	5006114	Parameter	MyString & buf	175:34:4148:4160	5006072	1	True				
ANR	5006115	ParameterType	MyString &		5006072	0					
ANR	5006116	Identifier	buf		5006072	1					
ANR	5006117	CFGEntryNode	ENTRY		5006072		True				
ANR	5006118	CFGExitNode	EXIT		5006072		True				
ANR	5006119	Symbol	buf		5006072						
ANR	5006120	Symbol	level		5006072						
ANR	5006121	Symbol	buf . Value		5006072						
ANR	5006122	Symbol	DebugFlags		5006072						
ANR	5006123	Function	UserLogHeader :: dprint	186:0:4308:4550							
ANR	5006124	FunctionDef	"UserLogHeader :: dprint (int level , const char * label)"		5006123	0					
ANR	5006125	CompoundStatement		188:0:4373:4550	5006123	0					
ANR	5006126	IfStatement	if ( 0 == ( level & DebugFlags ) )		5006123	0					
ANR	5006127	Condition	0 == ( level & DebugFlags )	189:6:4381:4407	5006123	0	True				
ANR	5006128	EqualityExpression	0 == ( level & DebugFlags )		5006123	0		==			
ANR	5006129	PrimaryExpression	0		5006123	0					
ANR	5006130	BitAndExpression	level & DebugFlags		5006123	1		&			
ANR	5006131	Identifier	level		5006123	0					
ANR	5006132	Identifier	DebugFlags		5006123	1					
ANR	5006133	CompoundStatement		2:36:37:37	5006123	1					
ANR	5006134	ReturnStatement	return ;	190:2:4415:4421	5006123	0	True				
ANR	5006135	IfStatement	if ( NULL == label )		5006123	1					
ANR	5006136	Condition	NULL == label	193:6:4433:4445	5006123	0	True				
ANR	5006137	EqualityExpression	NULL == label		5006123	0		==			
ANR	5006138	Identifier	NULL		5006123	0					
ANR	5006139	Identifier	label		5006123	1					
ANR	5006140	CompoundStatement		6:22:75:75	5006123	1					
ANR	5006141	ExpressionStatement	"label = """""	194:2:4453:4463	5006123	0	True				
ANR	5006142	AssignmentExpression	"label = """""		5006123	0		=			
ANR	5006143	Identifier	label		5006123	0					
ANR	5006144	PrimaryExpression	""""""		5006123	1					
ANR	5006145	IdentifierDeclStatement	MyString buf ;	197:1:4470:4482	5006123	2	True				
ANR	5006146	IdentifierDecl	buf		5006123	0					
ANR	5006147	IdentifierDeclType	MyString		5006123	0					
ANR	5006148	Identifier	buf		5006123	1					
ANR	5006149	ExpressionStatement	"buf . sprintf ( ""%s header:"" , label )"	198:1:4485:4519	5006123	3	True				
ANR	5006150	CallExpression	"buf . sprintf ( ""%s header:"" , label )"		5006123	0					
ANR	5006151	Callee	buf . sprintf		5006123	0					
ANR	5006152	MemberAccess	buf . sprintf		5006123	0					
ANR	5006153	Identifier	buf		5006123	0					
ANR	5006154	Identifier	sprintf		5006123	1					
ANR	5006155	ArgumentList	"""%s header:"""		5006123	1					
ANR	5006156	Argument	"""%s header:"""		5006123	0					
ANR	5006157	PrimaryExpression	"""%s header:"""		5006123	0					
ANR	5006158	Argument	label		5006123	1					
ANR	5006159	Identifier	label		5006123	0					
ANR	5006160	ExpressionStatement	"this -> dprint ( level , buf )"	199:1:4522:4548	5006123	4	True				
ANR	5006161	CallExpression	"this -> dprint ( level , buf )"		5006123	0					
ANR	5006162	Callee	this -> dprint		5006123	0					
ANR	5006163	PtrMemberAccess	this -> dprint		5006123	0					
ANR	5006164	Identifier	this		5006123	0					
ANR	5006165	Identifier	dprint		5006123	1					
ANR	5006166	ArgumentList	level		5006123	1					
ANR	5006167	Argument	level		5006123	0					
ANR	5006168	Identifier	level		5006123	0					
ANR	5006169	Argument	buf		5006123	1					
ANR	5006170	Identifier	buf		5006123	0					
ANR	5006171	ReturnType	void		5006123	1					
ANR	5006172	Identifier	UserLogHeader :: dprint		5006123	2					
ANR	5006173	ParameterList	"int level , const char * label"		5006123	3					
ANR	5006174	Parameter	int level	187:23:4336:4344	5006123	0	True				
ANR	5006175	ParameterType	int		5006123	0					
ANR	5006176	Identifier	level		5006123	1					
ANR	5006177	Parameter	const char * label	187:34:4347:4363	5006123	1	True				
ANR	5006178	ParameterType	const char *		5006123	0					
ANR	5006179	Identifier	label		5006123	1					
ANR	5006180	CFGEntryNode	ENTRY		5006123		True				
ANR	5006181	CFGExitNode	EXIT		5006123		True				
ANR	5006182	Symbol	buf		5006123						
ANR	5006183	Symbol	NULL		5006123						
ANR	5006184	Symbol	level		5006123						
ANR	5006185	Symbol	this		5006123						
ANR	5006186	Symbol	DebugFlags		5006123						
ANR	5006187	Symbol	label		5006123						
ANR	5006188	Function	ReadUserLogHeader :: Read	206:0:4589:5315							
ANR	5006189	FunctionDef	ReadUserLogHeader :: Read (ReadUserLog & reader)		5006188	0					
ANR	5006190	CompoundStatement		209:0:4641:5315	5006188	0					
ANR	5006191	IdentifierDeclStatement	ULogEvent * event = NULL ;	212:1:4676:4701	5006188	0	True				
ANR	5006192	IdentifierDecl	* event = NULL		5006188	0					
ANR	5006193	IdentifierDeclType	ULogEvent *		5006188	0					
ANR	5006194	Identifier	event		5006188	1					
ANR	5006195	AssignmentExpression	* event = NULL		5006188	2		=			
ANR	5006196	Identifier	NULL		5006188	0					
ANR	5006197	Identifier	NULL		5006188	1					
ANR	5006198	IdentifierDeclStatement	ULogEventOutcome outcome = reader . readEvent ( event ) ;	213:1:4704:4756	5006188	1	True				
ANR	5006199	IdentifierDecl	outcome = reader . readEvent ( event )		5006188	0					
ANR	5006200	IdentifierDeclType	ULogEventOutcome		5006188	0					
ANR	5006201	Identifier	outcome		5006188	1					
ANR	5006202	AssignmentExpression	outcome = reader . readEvent ( event )		5006188	2		=			
ANR	5006203	Identifier	outcome		5006188	0					
ANR	5006204	CallExpression	reader . readEvent ( event )		5006188	1					
ANR	5006205	Callee	reader . readEvent		5006188	0					
ANR	5006206	MemberAccess	reader . readEvent		5006188	0					
ANR	5006207	Identifier	reader		5006188	0					
ANR	5006208	Identifier	readEvent		5006188	1					
ANR	5006209	ArgumentList	event		5006188	1					
ANR	5006210	Argument	event		5006188	0					
ANR	5006211	Identifier	event		5006188	0					
ANR	5006212	IfStatement	if ( ULOG_OK != outcome )		5006188	2					
ANR	5006213	Condition	ULOG_OK != outcome	215:6:4765:4782	5006188	0	True				
ANR	5006214	EqualityExpression	ULOG_OK != outcome		5006188	0		!=			
ANR	5006215	Identifier	ULOG_OK		5006188	0					
ANR	5006216	Identifier	outcome		5006188	1					
ANR	5006217	CompoundStatement		7:27:144:144	5006188	1					
ANR	5006218	Statement	::	216:2:4790:4791	5006188	0	True				
ANR	5006219	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): readEvent() failed\\n"" )"	216:4:4792:4872	5006188	1	True				
ANR	5006220	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): readEvent() failed\\n"" )"		5006188	0					
ANR	5006221	Callee	dprintf		5006188	0					
ANR	5006222	Identifier	dprintf		5006188	0					
ANR	5006223	ArgumentList	D_FULLDEBUG		5006188	1					
ANR	5006224	Argument	D_FULLDEBUG		5006188	0					
ANR	5006225	Identifier	D_FULLDEBUG		5006188	0					
ANR	5006226	Argument	"""ReadUserLogHeader::Read(): readEvent() failed\\n"""		5006188	1					
ANR	5006227	PrimaryExpression	"""ReadUserLogHeader::Read(): readEvent() failed\\n"""		5006188	0					
ANR	5006228	Statement	delete	218:2:4876:4881	5006188	2	True				
ANR	5006229	ExpressionStatement	event	218:9:4883:4888	5006188	3	True				
ANR	5006230	Identifier	event		5006188	0					
ANR	5006231	ReturnStatement	return outcome ;	219:2:4892:4906	5006188	4	True				
ANR	5006232	Identifier	outcome		5006188	0					
ANR	5006233	IfStatement	if ( ULOG_GENERIC != event -> eventNumber )		5006188	3					
ANR	5006234	Condition	ULOG_GENERIC != event -> eventNumber	221:6:4917:4950	5006188	0	True				
ANR	5006235	EqualityExpression	ULOG_GENERIC != event -> eventNumber		5006188	0		!=			
ANR	5006236	Identifier	ULOG_GENERIC		5006188	0					
ANR	5006237	PtrMemberAccess	event -> eventNumber		5006188	1					
ANR	5006238	Identifier	event		5006188	0					
ANR	5006239	Identifier	eventNumber		5006188	1					
ANR	5006240	CompoundStatement		13:43:312:312	5006188	1					
ANR	5006241	Statement	::	222:2:4958:4959	5006188	0	True				
ANR	5006242	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): event #%d should be %d\\n"" , event -> eventNumber , ULOG_GENERIC )"	222:4:4960:5085	5006188	1	True				
ANR	5006243	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): event #%d should be %d\\n"" , event -> eventNumber , ULOG_GENERIC )"		5006188	0					
ANR	5006244	Callee	dprintf		5006188	0					
ANR	5006245	Identifier	dprintf		5006188	0					
ANR	5006246	ArgumentList	D_FULLDEBUG		5006188	1					
ANR	5006247	Argument	D_FULLDEBUG		5006188	0					
ANR	5006248	Identifier	D_FULLDEBUG		5006188	0					
ANR	5006249	Argument	"""ReadUserLogHeader::Read(): event #%d should be %d\\n"""		5006188	1					
ANR	5006250	PrimaryExpression	"""ReadUserLogHeader::Read(): event #%d should be %d\\n"""		5006188	0					
ANR	5006251	Argument	event -> eventNumber		5006188	2					
ANR	5006252	PtrMemberAccess	event -> eventNumber		5006188	0					
ANR	5006253	Identifier	event		5006188	0					
ANR	5006254	Identifier	eventNumber		5006188	1					
ANR	5006255	Argument	ULOG_GENERIC		5006188	3					
ANR	5006256	Identifier	ULOG_GENERIC		5006188	0					
ANR	5006257	Statement	delete	225:2:5089:5094	5006188	2	True				
ANR	5006258	ExpressionStatement	event	225:9:5096:5101	5006188	3	True				
ANR	5006259	Identifier	event		5006188	0					
ANR	5006260	ReturnStatement	return ULOG_NO_EVENT ;	226:2:5105:5125	5006188	4	True				
ANR	5006261	Identifier	ULOG_NO_EVENT		5006188	0					
ANR	5006262	IdentifierDeclStatement	int rval = ExtractEvent ( event ) ;	229:1:5132:5164	5006188	4	True				
ANR	5006263	IdentifierDecl	rval = ExtractEvent ( event )		5006188	0					
ANR	5006264	IdentifierDeclType	int		5006188	0					
ANR	5006265	Identifier	rval		5006188	1					
ANR	5006266	AssignmentExpression	rval = ExtractEvent ( event )		5006188	2		=			
ANR	5006267	Identifier	rval		5006188	0					
ANR	5006268	CallExpression	ExtractEvent ( event )		5006188	1					
ANR	5006269	Callee	ExtractEvent		5006188	0					
ANR	5006270	Identifier	ExtractEvent		5006188	0					
ANR	5006271	ArgumentList	event		5006188	1					
ANR	5006272	Argument	event		5006188	0					
ANR	5006273	Identifier	event		5006188	0					
ANR	5006274	Statement	delete	230:1:5167:5172	5006188	5	True				
ANR	5006275	ExpressionStatement	event	230:8:5174:5179	5006188	6	True				
ANR	5006276	Identifier	event		5006188	0					
ANR	5006277	IfStatement	if ( rval != ULOG_OK )		5006188	7					
ANR	5006278	Condition	rval != ULOG_OK	232:6:5188:5202	5006188	0	True				
ANR	5006279	EqualityExpression	rval != ULOG_OK		5006188	0		!=			
ANR	5006280	Identifier	rval		5006188	0					
ANR	5006281	Identifier	ULOG_OK		5006188	1					
ANR	5006282	CompoundStatement		24:23:563:563	5006188	1					
ANR	5006283	Statement	::	233:2:5209:5210	5006188	0	True				
ANR	5006284	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): failed to extract event\\n"" )"	233:4:5211:5296	5006188	1	True				
ANR	5006285	CallExpression	"dprintf ( D_FULLDEBUG , ""ReadUserLogHeader::Read(): failed to extract event\\n"" )"		5006188	0					
ANR	5006286	Callee	dprintf		5006188	0					
ANR	5006287	Identifier	dprintf		5006188	0					
ANR	5006288	ArgumentList	D_FULLDEBUG		5006188	1					
ANR	5006289	Argument	D_FULLDEBUG		5006188	0					
ANR	5006290	Identifier	D_FULLDEBUG		5006188	0					
ANR	5006291	Argument	"""ReadUserLogHeader::Read(): failed to extract event\\n"""		5006188	1					
ANR	5006292	PrimaryExpression	"""ReadUserLogHeader::Read(): failed to extract event\\n"""		5006188	0					
ANR	5006293	ReturnStatement	return rval ;	236:1:5302:5313	5006188	8	True				
ANR	5006294	Identifier	rval		5006188	0					
ANR	5006295	ReturnType	int		5006188	1					
ANR	5006296	Identifier	ReadUserLogHeader :: Read		5006188	2					
ANR	5006297	ParameterList	ReadUserLog & reader		5006188	3					
ANR	5006298	Parameter	ReadUserLog & reader	208:1:4619:4637	5006188	0	True				
ANR	5006299	ParameterType	ReadUserLog &		5006188	0					
ANR	5006300	Identifier	reader		5006188	1					
ANR	5006301	CFGEntryNode	ENTRY		5006188		True				
ANR	5006302	CFGExitNode	EXIT		5006188		True				
ANR	5006303	Symbol	ULOG_NO_EVENT		5006188						
ANR	5006304	Symbol	NULL		5006188						
ANR	5006305	Symbol	* event		5006188						
ANR	5006306	Symbol	reader		5006188						
ANR	5006307	Symbol	D_FULLDEBUG		5006188						
ANR	5006308	Symbol	reader . readEvent		5006188						
ANR	5006309	Symbol	ULOG_OK		5006188						
ANR	5006310	Symbol	rval		5006188						
ANR	5006311	Symbol	event		5006188						
ANR	5006312	Symbol	event -> eventNumber		5006188						
ANR	5006313	Symbol	outcome		5006188						
ANR	5006314	Symbol	ULOG_GENERIC		5006188						
ANR	5006315	Symbol	ExtractEvent		5006188						
ANR	5006316	Function	WriteUserLogHeader :: Write	245:0:5380:5634							
ANR	5006317	FunctionDef	"WriteUserLogHeader :: Write (WriteUserLog & writer , FILE * fp)"		5006316	0					
ANR	5006318	CompoundStatement		247:0:5444:5634	5006316	0					
ANR	5006319	IdentifierDeclStatement	GenericEvent event ;	248:1:5447:5465	5006316	0	True				
ANR	5006320	IdentifierDecl	event		5006316	0					
ANR	5006321	IdentifierDeclType	GenericEvent		5006316	0					
ANR	5006322	Identifier	event		5006316	1					
ANR	5006323	IfStatement	if ( 0 == m_ctime )		5006316	1					
ANR	5006324	Condition	0 == m_ctime	250:6:5474:5485	5006316	0	True				
ANR	5006325	EqualityExpression	0 == m_ctime		5006316	0		==			
ANR	5006326	PrimaryExpression	0		5006316	0					
ANR	5006327	Identifier	m_ctime		5006316	1					
ANR	5006328	CompoundStatement		4:21:44:44	5006316	1					
ANR	5006329	ExpressionStatement	m_ctime = time ( NULL )	251:2:5493:5515	5006316	0	True				
ANR	5006330	AssignmentExpression	m_ctime = time ( NULL )		5006316	0		=			
ANR	5006331	Identifier	m_ctime		5006316	0					
ANR	5006332	CallExpression	time ( NULL )		5006316	1					
ANR	5006333	Callee	time		5006316	0					
ANR	5006334	Identifier	time		5006316	0					
ANR	5006335	ArgumentList	NULL		5006316	1					
ANR	5006336	Argument	NULL		5006316	0					
ANR	5006337	Identifier	NULL		5006316	0					
ANR	5006338	IfStatement	if ( ! GenerateEvent ( event ) )		5006316	2					
ANR	5006339	Condition	! GenerateEvent ( event )	253:6:5526:5548	5006316	0	True				
ANR	5006340	UnaryOperationExpression	! GenerateEvent ( event )		5006316	0					
ANR	5006341	UnaryOperator	!		5006316	0					
ANR	5006342	CallExpression	GenerateEvent ( event )		5006316	1					
ANR	5006343	Callee	GenerateEvent		5006316	0					
ANR	5006344	Identifier	GenerateEvent		5006316	0					
ANR	5006345	ArgumentList	event		5006316	1					
ANR	5006346	Argument	event		5006316	0					
ANR	5006347	Identifier	event		5006316	0					
ANR	5006348	CompoundStatement		7:32:107:107	5006316	1					
ANR	5006349	ReturnStatement	return ULOG_UNK_ERROR ;	254:2:5556:5577	5006316	0	True				
ANR	5006350	Identifier	ULOG_UNK_ERROR		5006316	0					
ANR	5006351	ReturnStatement	"return writer . writeGlobalEvent ( event , fp , true ) ;"	256:1:5583:5632	5006316	3	True				
ANR	5006352	CallExpression	"writer . writeGlobalEvent ( event , fp , true )"		5006316	0					
ANR	5006353	Callee	writer . writeGlobalEvent		5006316	0					
ANR	5006354	MemberAccess	writer . writeGlobalEvent		5006316	0					
ANR	5006355	Identifier	writer		5006316	0					
ANR	5006356	Identifier	writeGlobalEvent		5006316	1					
ANR	5006357	ArgumentList	event		5006316	1					
ANR	5006358	Argument	event		5006316	0					
ANR	5006359	Identifier	event		5006316	0					
ANR	5006360	Argument	fp		5006316	1					
ANR	5006361	Identifier	fp		5006316	0					
ANR	5006362	Argument	true		5006316	2					
ANR	5006363	Identifier	true		5006316	0					
ANR	5006364	ReturnType	int		5006316	1					
ANR	5006365	Identifier	WriteUserLogHeader :: Write		5006316	2					
ANR	5006366	ParameterList	"WriteUserLog & writer , FILE * fp"		5006316	3					
ANR	5006367	Parameter	WriteUserLog & writer	246:27:5411:5430	5006316	0	True				
ANR	5006368	ParameterType	WriteUserLog &		5006316	0					
ANR	5006369	Identifier	writer		5006316	1					
ANR	5006370	Parameter	FILE * fp	246:49:5433:5440	5006316	1	True				
ANR	5006371	ParameterType	FILE *		5006316	0					
ANR	5006372	Identifier	fp		5006316	1					
ANR	5006373	CFGEntryNode	ENTRY		5006316		True				
ANR	5006374	CFGExitNode	EXIT		5006316		True				
ANR	5006375	Symbol	m_ctime		5006316						
ANR	5006376	Symbol	NULL		5006316						
ANR	5006377	Symbol	GenerateEvent		5006316						
ANR	5006378	Symbol	writer . writeGlobalEvent		5006316						
ANR	5006379	Symbol	true		5006316						
ANR	5006380	Symbol	fp		5006316						
ANR	5006381	Symbol	ULOG_UNK_ERROR		5006316						
ANR	5006382	Symbol	writer		5006316						
ANR	5006383	Symbol	time		5006316						
ANR	5006384	Symbol	event		5006316						
ANR	5006385	Function	WriteUserLogHeader :: GenerateEvent	260:0:5664:6407							
ANR	5006386	FunctionDef	WriteUserLogHeader :: GenerateEvent (GenericEvent & event)		5006385	0					
ANR	5006387	CompoundStatement		262:0:5726:6407	5006385	0					
ANR	5006388	Statement	snprintf	263:1:5729:5736	5006385	0	True				
ANR	5006389	Statement	(	263:9:5737:5737	5006385	1	True				
ANR	5006390	Statement	event	263:11:5739:5743	5006385	2	True				
ANR	5006391	Statement	.	263:16:5744:5744	5006385	3	True				
ANR	5006392	Statement	info	263:17:5745:5748	5006385	4	True				
ANR	5006393	Statement	","	263:21:5749:5749	5006385	5	True				
ANR	5006394	Statement	sizeof	263:23:5751:5756	5006385	6	True				
ANR	5006395	Statement	(	263:29:5757:5757	5006385	7	True				
ANR	5006396	Statement	event	263:30:5758:5762	5006385	8	True				
ANR	5006397	Statement	.	263:35:5763:5763	5006385	9	True				
ANR	5006398	Statement	info	263:36:5764:5767	5006385	10	True				
ANR	5006399	Statement	)	263:40:5768:5768	5006385	11	True				
ANR	5006400	Statement	","	263:41:5769:5769	5006385	12	True				
ANR	5006401	Statement	"""Global JobLog:"""	264:5:5776:5791	5006385	13	True				
ANR	5006402	Statement	""" ctime=%d"""	265:5:5798:5808	5006385	14	True				
ANR	5006403	Statement	""" id=%s"""	266:5:5815:5822	5006385	15	True				
ANR	5006404	Statement	""" sequence=%d"""	267:5:5829:5842	5006385	16	True				
ANR	5006405	Statement	""" size="""	268:5:5849:5856	5006385	17	True				
ANR	5006406	Statement	FILESIZE_T_FORMAT	268:13:5857:5873	5006385	18	True				
ANR	5006407	Statement	""""""	268:30:5874:5875	5006385	19	True				
ANR	5006408	Statement	""" events=%"""	269:5:5882:5892	5006385	20	True				
ANR	5006409	Statement	PRId64	269:16:5893:5898	5006385	21	True				
ANR	5006410	Statement	""""""	269:22:5899:5900	5006385	22	True				
ANR	5006411	Statement	""" offset="""	270:5:5907:5916	5006385	23	True				
ANR	5006412	Statement	FILESIZE_T_FORMAT	270:15:5917:5933	5006385	24	True				
ANR	5006413	Statement	""""""	270:32:5934:5935	5006385	25	True				
ANR	5006414	Statement	""" event_off=%"""	271:5:5942:5955	5006385	26	True				
ANR	5006415	Statement	PRId64	271:19:5956:5961	5006385	27	True				
ANR	5006416	Statement	""""""	271:25:5962:5963	5006385	28	True				
ANR	5006417	Statement	""" max_rotation=%d"""	272:5:5970:5987	5006385	29	True				
ANR	5006418	Statement	""" creator_name=<%s>"""	273:5:5994:6013	5006385	30	True				
ANR	5006419	Statement	","	273:25:6014:6014	5006385	31	True				
ANR	5006420	Statement	(	274:5:6021:6021	5006385	32	True				
ANR	5006421	Statement	int	274:6:6022:6024	5006385	33	True				
ANR	5006422	Statement	)	274:9:6025:6025	5006385	34	True				
ANR	5006423	Statement	getCtime	274:11:6027:6034	5006385	35	True				
ANR	5006424	Statement	(	274:19:6035:6035	5006385	36	True				
ANR	5006425	Statement	)	274:20:6036:6036	5006385	37	True				
ANR	5006426	Statement	","	274:21:6037:6037	5006385	38	True				
ANR	5006427	Statement	getId	275:5:6044:6048	5006385	39	True				
ANR	5006428	Statement	(	275:10:6049:6049	5006385	40	True				
ANR	5006429	Statement	)	275:11:6050:6050	5006385	41	True				
ANR	5006430	Statement	.	275:12:6051:6051	5006385	42	True				
ANR	5006431	Statement	Value	275:13:6052:6056	5006385	43	True				
ANR	5006432	Statement	(	275:18:6057:6057	5006385	44	True				
ANR	5006433	Statement	)	275:19:6058:6058	5006385	45	True				
ANR	5006434	Statement	","	275:20:6059:6059	5006385	46	True				
ANR	5006435	Statement	getSequence	276:5:6066:6076	5006385	47	True				
ANR	5006436	Statement	(	276:16:6077:6077	5006385	48	True				
ANR	5006437	Statement	)	276:17:6078:6078	5006385	49	True				
ANR	5006438	Statement	","	276:18:6079:6079	5006385	50	True				
ANR	5006439	Statement	getSize	277:5:6086:6092	5006385	51	True				
ANR	5006440	Statement	(	277:12:6093:6093	5006385	52	True				
ANR	5006441	Statement	)	277:13:6094:6094	5006385	53	True				
ANR	5006442	Statement	","	277:14:6095:6095	5006385	54	True				
ANR	5006443	Statement	getNumEvents	278:5:6102:6113	5006385	55	True				
ANR	5006444	Statement	(	278:17:6114:6114	5006385	56	True				
ANR	5006445	Statement	)	278:18:6115:6115	5006385	57	True				
ANR	5006446	Statement	","	278:19:6116:6116	5006385	58	True				
ANR	5006447	Statement	getFileOffset	279:5:6123:6135	5006385	59	True				
ANR	5006448	Statement	(	279:18:6136:6136	5006385	60	True				
ANR	5006449	Statement	)	279:19:6137:6137	5006385	61	True				
ANR	5006450	Statement	","	279:20:6138:6138	5006385	62	True				
ANR	5006451	Statement	getEventOffset	280:5:6145:6158	5006385	63	True				
ANR	5006452	Statement	(	280:19:6159:6159	5006385	64	True				
ANR	5006453	Statement	)	280:20:6160:6160	5006385	65	True				
ANR	5006454	Statement	","	280:21:6161:6161	5006385	66	True				
ANR	5006455	Statement	getMaxRotation	281:5:6168:6181	5006385	67	True				
ANR	5006456	Statement	(	281:19:6182:6182	5006385	68	True				
ANR	5006457	Statement	)	281:20:6183:6183	5006385	69	True				
ANR	5006458	Statement	","	281:21:6184:6184	5006385	70	True				
ANR	5006459	Statement	getCreatorName	282:5:6191:6204	5006385	71	True				
ANR	5006460	Statement	(	282:19:6205:6205	5006385	72	True				
ANR	5006461	Statement	)	282:20:6206:6206	5006385	73	True				
ANR	5006462	Statement	.	282:21:6207:6207	5006385	74	True				
ANR	5006463	Statement	Value	282:22:6208:6212	5006385	75	True				
ANR	5006464	Statement	(	282:27:6213:6213	5006385	76	True				
ANR	5006465	Statement	)	282:28:6214:6214	5006385	77	True				
ANR	5006466	Statement	)	283:5:6221:6221	5006385	78	True				
ANR	5006467	ExpressionStatement		283:6:6222:6222	5006385	79	True				
ANR	5006468	Statement	::	284:1:6225:6226	5006385	80	True				
ANR	5006469	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Generated log header: '%s'\\n"" , event . info )"	284:3:6227:6293	5006385	81	True				
ANR	5006470	CallExpression	"dprintf ( D_FULLDEBUG , ""Generated log header: '%s'\\n"" , event . info )"		5006385	0					
ANR	5006471	Callee	dprintf		5006385	0					
ANR	5006472	Identifier	dprintf		5006385	0					
ANR	5006473	ArgumentList	D_FULLDEBUG		5006385	1					
ANR	5006474	Argument	D_FULLDEBUG		5006385	0					
ANR	5006475	Identifier	D_FULLDEBUG		5006385	0					
ANR	5006476	Argument	"""Generated log header: '%s'\\n"""		5006385	1					
ANR	5006477	PrimaryExpression	"""Generated log header: '%s'\\n"""		5006385	0					
ANR	5006478	Argument	event . info		5006385	2					
ANR	5006479	MemberAccess	event . info		5006385	0					
ANR	5006480	Identifier	event		5006385	0					
ANR	5006481	Identifier	info		5006385	1					
ANR	5006482	IdentifierDeclStatement	int len = strlen ( event . info ) ;	285:1:6296:6327	5006385	82	True				
ANR	5006483	IdentifierDecl	len = strlen ( event . info )		5006385	0					
ANR	5006484	IdentifierDeclType	int		5006385	0					
ANR	5006485	Identifier	len		5006385	1					
ANR	5006486	AssignmentExpression	len = strlen ( event . info )		5006385	2		=			
ANR	5006487	Identifier	len		5006385	0					
ANR	5006488	CallExpression	strlen ( event . info )		5006385	1					
ANR	5006489	Callee	strlen		5006385	0					
ANR	5006490	Identifier	strlen		5006385	0					
ANR	5006491	ArgumentList	event . info		5006385	1					
ANR	5006492	Argument	event . info		5006385	0					
ANR	5006493	MemberAccess	event . info		5006385	0					
ANR	5006494	Identifier	event		5006385	0					
ANR	5006495	Identifier	info		5006385	1					
ANR	5006496	WhileStatement	while ( len < 256 )		5006385	83					
ANR	5006497	Condition	len < 256	286:8:6337:6345	5006385	0	True				
ANR	5006498	RelationalExpression	len < 256		5006385	0		<			
ANR	5006499	Identifier	len		5006385	0					
ANR	5006500	PrimaryExpression	256		5006385	1					
ANR	5006501	CompoundStatement		25:20:622:622	5006385	1					
ANR	5006502	ExpressionStatement	"strcat ( event . info , "" "" )"	287:2:6353:6378	5006385	0	True				
ANR	5006503	CallExpression	"strcat ( event . info , "" "" )"		5006385	0					
ANR	5006504	Callee	strcat		5006385	0					
ANR	5006505	Identifier	strcat		5006385	0					
ANR	5006506	ArgumentList	event . info		5006385	1					
ANR	5006507	Argument	event . info		5006385	0					
ANR	5006508	MemberAccess	event . info		5006385	0					
ANR	5006509	Identifier	event		5006385	0					
ANR	5006510	Identifier	info		5006385	1					
ANR	5006511	Argument	""" """		5006385	1					
ANR	5006512	PrimaryExpression	""" """		5006385	0					
ANR	5006513	ExpressionStatement	len ++	288:2:6382:6387	5006385	1	True				
ANR	5006514	PostIncDecOperationExpression	len ++		5006385	0					
ANR	5006515	Identifier	len		5006385	0					
ANR	5006516	IncDec	++		5006385	1					
ANR	5006517	ReturnStatement	return true ;	291:1:6394:6405	5006385	84	True				
ANR	5006518	Identifier	true		5006385	0					
ANR	5006519	ReturnType	bool		5006385	1					
ANR	5006520	Identifier	WriteUserLogHeader :: GenerateEvent		5006385	2					
ANR	5006521	ParameterList	GenericEvent & event		5006385	3					
ANR	5006522	Parameter	GenericEvent & event	261:35:5704:5722	5006385	0	True				
ANR	5006523	ParameterType	GenericEvent &		5006385	0					
ANR	5006524	Identifier	event		5006385	1					
ANR	5006525	CFGEntryNode	ENTRY		5006385		True				
ANR	5006526	CFGExitNode	EXIT		5006385		True				
ANR	5006527	Symbol	strlen		5006385						
ANR	5006528	Symbol	event . info		5006385						
ANR	5006529	Symbol	len		5006385						
ANR	5006530	Symbol	true		5006385						
ANR	5006531	Symbol	D_FULLDEBUG		5006385						
ANR	5006532	Symbol	event		5006385						
