command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4896534	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_stl_string_utils.cpp								
ANR	4896535	Function	assign	26:0:924:1000							
ANR	4896536	FunctionDef	"assign (std :: string & dst , const MyString & src)"		4896535	0					
ANR	4896537	CompoundStatement		26:51:975:1000	4896535	0					
ANR	4896538	ExpressionStatement	dst = src . Value ( )	27:4:981:998	4896535	0	True				
ANR	4896539	AssignmentExpression	dst = src . Value ( )		4896535	0		=			
ANR	4896540	Identifier	dst		4896535	0					
ANR	4896541	CallExpression	src . Value ( )		4896535	1					
ANR	4896542	Callee	src . Value		4896535	0					
ANR	4896543	MemberAccess	src . Value		4896535	0					
ANR	4896544	Identifier	src		4896535	0					
ANR	4896545	Identifier	Value		4896535	1					
ANR	4896546	ArgumentList			4896535	1					
ANR	4896547	ReturnType	void		4896535	1					
ANR	4896548	Identifier	assign		4896535	2					
ANR	4896549	ParameterList	"std :: string & dst , const MyString & src"		4896535	3					
ANR	4896550	Parameter	std :: string & dst	26:12:936:951	4896535	0	True				
ANR	4896551	ParameterType	std :: string &		4896535	0					
ANR	4896552	Identifier	dst		4896535	1					
ANR	4896553	Parameter	const MyString & src	26:30:954:972	4896535	1	True				
ANR	4896554	ParameterType	const MyString &		4896535	0					
ANR	4896555	Identifier	src		4896535	1					
ANR	4896556	CFGEntryNode	ENTRY		4896535		True				
ANR	4896557	CFGExitNode	EXIT		4896535		True				
ANR	4896558	Symbol	src . Value		4896535						
ANR	4896559	Symbol	dst		4896535						
ANR	4896560	Symbol	src		4896535						
ANR	4896561	Function	assign	29:0:1002:1078							
ANR	4896562	FunctionDef	"assign (MyString & dst , const std :: string & src)"		4896561	0					
ANR	4896563	CompoundStatement		29:51:1053:1078	4896561	0					
ANR	4896564	ExpressionStatement	dst = src . c_str ( )	30:4:1059:1076	4896561	0	True				
ANR	4896565	AssignmentExpression	dst = src . c_str ( )		4896561	0		=			
ANR	4896566	Identifier	dst		4896561	0					
ANR	4896567	CallExpression	src . c_str ( )		4896561	1					
ANR	4896568	Callee	src . c_str		4896561	0					
ANR	4896569	MemberAccess	src . c_str		4896561	0					
ANR	4896570	Identifier	src		4896561	0					
ANR	4896571	Identifier	c_str		4896561	1					
ANR	4896572	ArgumentList			4896561	1					
ANR	4896573	ReturnType	void		4896561	1					
ANR	4896574	Identifier	assign		4896561	2					
ANR	4896575	ParameterList	"MyString & dst , const std :: string & src"		4896561	3					
ANR	4896576	Parameter	MyString & dst	29:12:1014:1026	4896561	0	True				
ANR	4896577	ParameterType	MyString &		4896561	0					
ANR	4896578	Identifier	dst		4896561	1					
ANR	4896579	Parameter	const std :: string & src	29:27:1029:1050	4896561	1	True				
ANR	4896580	ParameterType	const std :: string &		4896561	0					
ANR	4896581	Identifier	src		4896561	1					
ANR	4896582	CFGEntryNode	ENTRY		4896561		True				
ANR	4896583	CFGExitNode	EXIT		4896561		True				
ANR	4896584	Symbol	src . c_str		4896561						
ANR	4896585	Symbol	dst		4896561						
ANR	4896586	Symbol	src		4896561						
ANR	4896587	Function	operator ==	33:0:1081:1163							
ANR	4896588	FunctionDef	"operator == (const MyString & L , const std :: string & R)"		4896587	0					
ANR	4896589	CompoundStatement		33:57:1138:1163	4896587	0					
ANR	4896590	ReturnStatement	return R == L . Value ( ) ;	33:1:1140:1161	4896587	0	True				
ANR	4896591	EqualityExpression	R == L . Value ( )		4896587	0		==			
ANR	4896592	Identifier	R		4896587	0					
ANR	4896593	CallExpression	L . Value ( )		4896587	1					
ANR	4896594	Callee	L . Value		4896587	0					
ANR	4896595	MemberAccess	L . Value		4896587	0					
ANR	4896596	Identifier	L		4896587	0					
ANR	4896597	Identifier	Value		4896587	1					
ANR	4896598	ArgumentList			4896587	1					
ANR	4896599	ReturnType	bool		4896587	1					
ANR	4896600	Identifier	operator ==		4896587	2					
ANR	4896601	ParameterList	"const MyString & L , const std :: string & R"		4896587	3					
ANR	4896602	Parameter	const MyString & L	33:16:1097:1113	4896587	0	True				
ANR	4896603	ParameterType	const MyString &		4896587	0					
ANR	4896604	Identifier	L		4896587	1					
ANR	4896605	Parameter	const std :: string & R	33:35:1116:1135	4896587	1	True				
ANR	4896606	ParameterType	const std :: string &		4896587	0					
ANR	4896607	Identifier	R		4896587	1					
ANR	4896608	CFGEntryNode	ENTRY		4896587		True				
ANR	4896609	CFGExitNode	EXIT		4896587		True				
ANR	4896610	Symbol	R		4896587						
ANR	4896611	Symbol	L . Value		4896587						
ANR	4896612	Symbol	L		4896587						
ANR	4896613	Function	operator ==	34:0:1165:1247							
ANR	4896614	FunctionDef	"operator == (const std :: string & L , const MyString & R)"		4896613	0					
ANR	4896615	CompoundStatement		34:57:1222:1247	4896613	0					
ANR	4896616	ReturnStatement	return L == R . Value ( ) ;	34:1:1224:1245	4896613	0	True				
ANR	4896617	EqualityExpression	L == R . Value ( )		4896613	0		==			
ANR	4896618	Identifier	L		4896613	0					
ANR	4896619	CallExpression	R . Value ( )		4896613	1					
ANR	4896620	Callee	R . Value		4896613	0					
ANR	4896621	MemberAccess	R . Value		4896613	0					
ANR	4896622	Identifier	R		4896613	0					
ANR	4896623	Identifier	Value		4896613	1					
ANR	4896624	ArgumentList			4896613	1					
ANR	4896625	ReturnType	bool		4896613	1					
ANR	4896626	Identifier	operator ==		4896613	2					
ANR	4896627	ParameterList	"const std :: string & L , const MyString & R"		4896613	3					
ANR	4896628	Parameter	const std :: string & L	34:16:1181:1200	4896613	0	True				
ANR	4896629	ParameterType	const std :: string &		4896613	0					
ANR	4896630	Identifier	L		4896613	1					
ANR	4896631	Parameter	const MyString & R	34:38:1203:1219	4896613	1	True				
ANR	4896632	ParameterType	const MyString &		4896613	0					
ANR	4896633	Identifier	R		4896613	1					
ANR	4896634	CFGEntryNode	ENTRY		4896613		True				
ANR	4896635	CFGExitNode	EXIT		4896613		True				
ANR	4896636	Symbol	R		4896613						
ANR	4896637	Symbol	R . Value		4896613						
ANR	4896638	Symbol	L		4896613						
ANR	4896639	Function	operator !=	35:0:1249:1331							
ANR	4896640	FunctionDef	"operator != (const MyString & L , const std :: string & R)"		4896639	0					
ANR	4896641	CompoundStatement		35:57:1306:1331	4896639	0					
ANR	4896642	ReturnStatement	return R != L . Value ( ) ;	35:1:1308:1329	4896639	0	True				
ANR	4896643	EqualityExpression	R != L . Value ( )		4896639	0		!=			
ANR	4896644	Identifier	R		4896639	0					
ANR	4896645	CallExpression	L . Value ( )		4896639	1					
ANR	4896646	Callee	L . Value		4896639	0					
ANR	4896647	MemberAccess	L . Value		4896639	0					
ANR	4896648	Identifier	L		4896639	0					
ANR	4896649	Identifier	Value		4896639	1					
ANR	4896650	ArgumentList			4896639	1					
ANR	4896651	ReturnType	bool		4896639	1					
ANR	4896652	Identifier	operator !=		4896639	2					
ANR	4896653	ParameterList	"const MyString & L , const std :: string & R"		4896639	3					
ANR	4896654	Parameter	const MyString & L	35:16:1265:1281	4896639	0	True				
ANR	4896655	ParameterType	const MyString &		4896639	0					
ANR	4896656	Identifier	L		4896639	1					
ANR	4896657	Parameter	const std :: string & R	35:35:1284:1303	4896639	1	True				
ANR	4896658	ParameterType	const std :: string &		4896639	0					
ANR	4896659	Identifier	R		4896639	1					
ANR	4896660	CFGEntryNode	ENTRY		4896639		True				
ANR	4896661	CFGExitNode	EXIT		4896639		True				
ANR	4896662	Symbol	R		4896639						
ANR	4896663	Symbol	L . Value		4896639						
ANR	4896664	Symbol	L		4896639						
ANR	4896665	Function	operator !=	36:0:1333:1415							
ANR	4896666	FunctionDef	"operator != (const std :: string & L , const MyString & R)"		4896665	0					
ANR	4896667	CompoundStatement		36:57:1390:1415	4896665	0					
ANR	4896668	ReturnStatement	return L != R . Value ( ) ;	36:1:1392:1413	4896665	0	True				
ANR	4896669	EqualityExpression	L != R . Value ( )		4896665	0		!=			
ANR	4896670	Identifier	L		4896665	0					
ANR	4896671	CallExpression	R . Value ( )		4896665	1					
ANR	4896672	Callee	R . Value		4896665	0					
ANR	4896673	MemberAccess	R . Value		4896665	0					
ANR	4896674	Identifier	R		4896665	0					
ANR	4896675	Identifier	Value		4896665	1					
ANR	4896676	ArgumentList			4896665	1					
ANR	4896677	ReturnType	bool		4896665	1					
ANR	4896678	Identifier	operator !=		4896665	2					
ANR	4896679	ParameterList	"const std :: string & L , const MyString & R"		4896665	3					
ANR	4896680	Parameter	const std :: string & L	36:16:1349:1368	4896665	0	True				
ANR	4896681	ParameterType	const std :: string &		4896665	0					
ANR	4896682	Identifier	L		4896665	1					
ANR	4896683	Parameter	const MyString & R	36:38:1371:1387	4896665	1	True				
ANR	4896684	ParameterType	const MyString &		4896665	0					
ANR	4896685	Identifier	R		4896665	1					
ANR	4896686	CFGEntryNode	ENTRY		4896665		True				
ANR	4896687	CFGExitNode	EXIT		4896665		True				
ANR	4896688	Symbol	R		4896665						
ANR	4896689	Symbol	R . Value		4896665						
ANR	4896690	Symbol	L		4896665						
ANR	4896691	Function	operator <	37:0:1417:1497							
ANR	4896692	FunctionDef	"operator < (const MyString & L , const std :: string & R)"		4896691	0					
ANR	4896693	CompoundStatement		37:56:1473:1497	4896691	0					
ANR	4896694	ReturnStatement	return R > L . Value ( ) ;	37:1:1475:1495	4896691	0	True				
ANR	4896695	RelationalExpression	R > L . Value ( )		4896691	0		>			
ANR	4896696	Identifier	R		4896691	0					
ANR	4896697	CallExpression	L . Value ( )		4896691	1					
ANR	4896698	Callee	L . Value		4896691	0					
ANR	4896699	MemberAccess	L . Value		4896691	0					
ANR	4896700	Identifier	L		4896691	0					
ANR	4896701	Identifier	Value		4896691	1					
ANR	4896702	ArgumentList			4896691	1					
ANR	4896703	ReturnType	bool		4896691	1					
ANR	4896704	Identifier	operator <		4896691	2					
ANR	4896705	ParameterList	"const MyString & L , const std :: string & R"		4896691	3					
ANR	4896706	Parameter	const MyString & L	37:15:1432:1448	4896691	0	True				
ANR	4896707	ParameterType	const MyString &		4896691	0					
ANR	4896708	Identifier	L		4896691	1					
ANR	4896709	Parameter	const std :: string & R	37:34:1451:1470	4896691	1	True				
ANR	4896710	ParameterType	const std :: string &		4896691	0					
ANR	4896711	Identifier	R		4896691	1					
ANR	4896712	CFGEntryNode	ENTRY		4896691		True				
ANR	4896713	CFGExitNode	EXIT		4896691		True				
ANR	4896714	Symbol	R		4896691						
ANR	4896715	Symbol	L . Value		4896691						
ANR	4896716	Symbol	L		4896691						
ANR	4896717	Function	operator <	38:0:1499:1579							
ANR	4896718	FunctionDef	"operator < (const std :: string & L , const MyString & R)"		4896717	0					
ANR	4896719	CompoundStatement		38:56:1555:1579	4896717	0					
ANR	4896720	ReturnStatement	return L < R . Value ( ) ;	38:1:1557:1577	4896717	0	True				
ANR	4896721	RelationalExpression	L < R . Value ( )		4896717	0		<			
ANR	4896722	Identifier	L		4896717	0					
ANR	4896723	CallExpression	R . Value ( )		4896717	1					
ANR	4896724	Callee	R . Value		4896717	0					
ANR	4896725	MemberAccess	R . Value		4896717	0					
ANR	4896726	Identifier	R		4896717	0					
ANR	4896727	Identifier	Value		4896717	1					
ANR	4896728	ArgumentList			4896717	1					
ANR	4896729	ReturnType	bool		4896717	1					
ANR	4896730	Identifier	operator <		4896717	2					
ANR	4896731	ParameterList	"const std :: string & L , const MyString & R"		4896717	3					
ANR	4896732	Parameter	const std :: string & L	38:15:1514:1533	4896717	0	True				
ANR	4896733	ParameterType	const std :: string &		4896717	0					
ANR	4896734	Identifier	L		4896717	1					
ANR	4896735	Parameter	const MyString & R	38:37:1536:1552	4896717	1	True				
ANR	4896736	ParameterType	const MyString &		4896717	0					
ANR	4896737	Identifier	R		4896717	1					
ANR	4896738	CFGEntryNode	ENTRY		4896717		True				
ANR	4896739	CFGExitNode	EXIT		4896717		True				
ANR	4896740	Symbol	R		4896717						
ANR	4896741	Symbol	R . Value		4896717						
ANR	4896742	Symbol	L		4896717						
ANR	4896743	Function	operator >	39:0:1581:1661							
ANR	4896744	FunctionDef	"operator > (const MyString & L , const std :: string & R)"		4896743	0					
ANR	4896745	CompoundStatement		39:56:1637:1661	4896743	0					
ANR	4896746	ReturnStatement	return R < L . Value ( ) ;	39:1:1639:1659	4896743	0	True				
ANR	4896747	RelationalExpression	R < L . Value ( )		4896743	0		<			
ANR	4896748	Identifier	R		4896743	0					
ANR	4896749	CallExpression	L . Value ( )		4896743	1					
ANR	4896750	Callee	L . Value		4896743	0					
ANR	4896751	MemberAccess	L . Value		4896743	0					
ANR	4896752	Identifier	L		4896743	0					
ANR	4896753	Identifier	Value		4896743	1					
ANR	4896754	ArgumentList			4896743	1					
ANR	4896755	ReturnType	bool		4896743	1					
ANR	4896756	Identifier	operator >		4896743	2					
ANR	4896757	ParameterList	"const MyString & L , const std :: string & R"		4896743	3					
ANR	4896758	Parameter	const MyString & L	39:15:1596:1612	4896743	0	True				
ANR	4896759	ParameterType	const MyString &		4896743	0					
ANR	4896760	Identifier	L		4896743	1					
ANR	4896761	Parameter	const std :: string & R	39:34:1615:1634	4896743	1	True				
ANR	4896762	ParameterType	const std :: string &		4896743	0					
ANR	4896763	Identifier	R		4896743	1					
ANR	4896764	CFGEntryNode	ENTRY		4896743		True				
ANR	4896765	CFGExitNode	EXIT		4896743		True				
ANR	4896766	Symbol	R		4896743						
ANR	4896767	Symbol	L . Value		4896743						
ANR	4896768	Symbol	L		4896743						
ANR	4896769	Function	operator >	40:0:1663:1743							
ANR	4896770	FunctionDef	"operator > (const std :: string & L , const MyString & R)"		4896769	0					
ANR	4896771	CompoundStatement		40:56:1719:1743	4896769	0					
ANR	4896772	ReturnStatement	return L > R . Value ( ) ;	40:1:1721:1741	4896769	0	True				
ANR	4896773	RelationalExpression	L > R . Value ( )		4896769	0		>			
ANR	4896774	Identifier	L		4896769	0					
ANR	4896775	CallExpression	R . Value ( )		4896769	1					
ANR	4896776	Callee	R . Value		4896769	0					
ANR	4896777	MemberAccess	R . Value		4896769	0					
ANR	4896778	Identifier	R		4896769	0					
ANR	4896779	Identifier	Value		4896769	1					
ANR	4896780	ArgumentList			4896769	1					
ANR	4896781	ReturnType	bool		4896769	1					
ANR	4896782	Identifier	operator >		4896769	2					
ANR	4896783	ParameterList	"const std :: string & L , const MyString & R"		4896769	3					
ANR	4896784	Parameter	const std :: string & L	40:15:1678:1697	4896769	0	True				
ANR	4896785	ParameterType	const std :: string &		4896769	0					
ANR	4896786	Identifier	L		4896769	1					
ANR	4896787	Parameter	const MyString & R	40:37:1700:1716	4896769	1	True				
ANR	4896788	ParameterType	const MyString &		4896769	0					
ANR	4896789	Identifier	R		4896769	1					
ANR	4896790	CFGEntryNode	ENTRY		4896769		True				
ANR	4896791	CFGExitNode	EXIT		4896769		True				
ANR	4896792	Symbol	R		4896769						
ANR	4896793	Symbol	R . Value		4896769						
ANR	4896794	Symbol	L		4896769						
ANR	4896795	Function	operator <=	41:0:1745:1827							
ANR	4896796	FunctionDef	"operator <= (const MyString & L , const std :: string & R)"		4896795	0					
ANR	4896797	CompoundStatement		41:57:1802:1827	4896795	0					
ANR	4896798	ReturnStatement	return R >= L . Value ( ) ;	41:1:1804:1825	4896795	0	True				
ANR	4896799	RelationalExpression	R >= L . Value ( )		4896795	0		>=			
ANR	4896800	Identifier	R		4896795	0					
ANR	4896801	CallExpression	L . Value ( )		4896795	1					
ANR	4896802	Callee	L . Value		4896795	0					
ANR	4896803	MemberAccess	L . Value		4896795	0					
ANR	4896804	Identifier	L		4896795	0					
ANR	4896805	Identifier	Value		4896795	1					
ANR	4896806	ArgumentList			4896795	1					
ANR	4896807	ReturnType	bool		4896795	1					
ANR	4896808	Identifier	operator <=		4896795	2					
ANR	4896809	ParameterList	"const MyString & L , const std :: string & R"		4896795	3					
ANR	4896810	Parameter	const MyString & L	41:16:1761:1777	4896795	0	True				
ANR	4896811	ParameterType	const MyString &		4896795	0					
ANR	4896812	Identifier	L		4896795	1					
ANR	4896813	Parameter	const std :: string & R	41:35:1780:1799	4896795	1	True				
ANR	4896814	ParameterType	const std :: string &		4896795	0					
ANR	4896815	Identifier	R		4896795	1					
ANR	4896816	CFGEntryNode	ENTRY		4896795		True				
ANR	4896817	CFGExitNode	EXIT		4896795		True				
ANR	4896818	Symbol	R		4896795						
ANR	4896819	Symbol	L . Value		4896795						
ANR	4896820	Symbol	L		4896795						
ANR	4896821	Function	operator <=	42:0:1829:1911							
ANR	4896822	FunctionDef	"operator <= (const std :: string & L , const MyString & R)"		4896821	0					
ANR	4896823	CompoundStatement		42:57:1886:1911	4896821	0					
ANR	4896824	ReturnStatement	return L <= R . Value ( ) ;	42:1:1888:1909	4896821	0	True				
ANR	4896825	RelationalExpression	L <= R . Value ( )		4896821	0		<=			
ANR	4896826	Identifier	L		4896821	0					
ANR	4896827	CallExpression	R . Value ( )		4896821	1					
ANR	4896828	Callee	R . Value		4896821	0					
ANR	4896829	MemberAccess	R . Value		4896821	0					
ANR	4896830	Identifier	R		4896821	0					
ANR	4896831	Identifier	Value		4896821	1					
ANR	4896832	ArgumentList			4896821	1					
ANR	4896833	ReturnType	bool		4896821	1					
ANR	4896834	Identifier	operator <=		4896821	2					
ANR	4896835	ParameterList	"const std :: string & L , const MyString & R"		4896821	3					
ANR	4896836	Parameter	const std :: string & L	42:16:1845:1864	4896821	0	True				
ANR	4896837	ParameterType	const std :: string &		4896821	0					
ANR	4896838	Identifier	L		4896821	1					
ANR	4896839	Parameter	const MyString & R	42:38:1867:1883	4896821	1	True				
ANR	4896840	ParameterType	const MyString &		4896821	0					
ANR	4896841	Identifier	R		4896821	1					
ANR	4896842	CFGEntryNode	ENTRY		4896821		True				
ANR	4896843	CFGExitNode	EXIT		4896821		True				
ANR	4896844	Symbol	R		4896821						
ANR	4896845	Symbol	R . Value		4896821						
ANR	4896846	Symbol	L		4896821						
ANR	4896847	Function	operator >=	43:0:1913:1995							
ANR	4896848	FunctionDef	"operator >= (const MyString & L , const std :: string & R)"		4896847	0					
ANR	4896849	CompoundStatement		43:57:1970:1995	4896847	0					
ANR	4896850	ReturnStatement	return R <= L . Value ( ) ;	43:1:1972:1993	4896847	0	True				
ANR	4896851	RelationalExpression	R <= L . Value ( )		4896847	0		<=			
ANR	4896852	Identifier	R		4896847	0					
ANR	4896853	CallExpression	L . Value ( )		4896847	1					
ANR	4896854	Callee	L . Value		4896847	0					
ANR	4896855	MemberAccess	L . Value		4896847	0					
ANR	4896856	Identifier	L		4896847	0					
ANR	4896857	Identifier	Value		4896847	1					
ANR	4896858	ArgumentList			4896847	1					
ANR	4896859	ReturnType	bool		4896847	1					
ANR	4896860	Identifier	operator >=		4896847	2					
ANR	4896861	ParameterList	"const MyString & L , const std :: string & R"		4896847	3					
ANR	4896862	Parameter	const MyString & L	43:16:1929:1945	4896847	0	True				
ANR	4896863	ParameterType	const MyString &		4896847	0					
ANR	4896864	Identifier	L		4896847	1					
ANR	4896865	Parameter	const std :: string & R	43:35:1948:1967	4896847	1	True				
ANR	4896866	ParameterType	const std :: string &		4896847	0					
ANR	4896867	Identifier	R		4896847	1					
ANR	4896868	CFGEntryNode	ENTRY		4896847		True				
ANR	4896869	CFGExitNode	EXIT		4896847		True				
ANR	4896870	Symbol	R		4896847						
ANR	4896871	Symbol	L . Value		4896847						
ANR	4896872	Symbol	L		4896847						
ANR	4896873	Function	operator >=	44:0:1997:2079							
ANR	4896874	FunctionDef	"operator >= (const std :: string & L , const MyString & R)"		4896873	0					
ANR	4896875	CompoundStatement		44:57:2054:2079	4896873	0					
ANR	4896876	ReturnStatement	return L >= R . Value ( ) ;	44:1:2056:2077	4896873	0	True				
ANR	4896877	RelationalExpression	L >= R . Value ( )		4896873	0		>=			
ANR	4896878	Identifier	L		4896873	0					
ANR	4896879	CallExpression	R . Value ( )		4896873	1					
ANR	4896880	Callee	R . Value		4896873	0					
ANR	4896881	MemberAccess	R . Value		4896873	0					
ANR	4896882	Identifier	R		4896873	0					
ANR	4896883	Identifier	Value		4896873	1					
ANR	4896884	ArgumentList			4896873	1					
ANR	4896885	ReturnType	bool		4896873	1					
ANR	4896886	Identifier	operator >=		4896873	2					
ANR	4896887	ParameterList	"const std :: string & L , const MyString & R"		4896873	3					
ANR	4896888	Parameter	const std :: string & L	44:16:2013:2032	4896873	0	True				
ANR	4896889	ParameterType	const std :: string &		4896873	0					
ANR	4896890	Identifier	L		4896873	1					
ANR	4896891	Parameter	const MyString & R	44:38:2035:2051	4896873	1	True				
ANR	4896892	ParameterType	const MyString &		4896873	0					
ANR	4896893	Identifier	R		4896873	1					
ANR	4896894	CFGEntryNode	ENTRY		4896873		True				
ANR	4896895	CFGExitNode	EXIT		4896873		True				
ANR	4896896	Symbol	R		4896873						
ANR	4896897	Symbol	R . Value		4896873						
ANR	4896898	Symbol	L		4896873						
ANR	4896899	Function	vsprintf	47:0:2083:3720							
ANR	4896900	FunctionDef	"vsprintf (std :: string & s , const char * format , va_list pargs)"		4896899	0					
ANR	4896901	CompoundStatement		47:64:2147:3720	4896899	0					
ANR	4896902	IdentifierDeclStatement	char fixbuf [ STL_STRING_UTILS_FIXBUF ] ;	48:4:2153:2189	4896899	0	True				
ANR	4896903	IdentifierDecl	fixbuf [ STL_STRING_UTILS_FIXBUF ]		4896899	0					
ANR	4896904	IdentifierDeclType	char [ STL_STRING_UTILS_FIXBUF ]		4896899	0					
ANR	4896905	Identifier	fixbuf		4896899	1					
ANR	4896906	Identifier	STL_STRING_UTILS_FIXBUF		4896899	2					
ANR	4896907	IdentifierDeclStatement	const int fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] ) ;	49:4:2195:2246	4896899	1	True				
ANR	4896908	IdentifierDecl	fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		4896899	0					
ANR	4896909	IdentifierDeclType	const int		4896899	0					
ANR	4896910	Identifier	fixlen		4896899	1					
ANR	4896911	AssignmentExpression	fixlen = sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		4896899	2		=			
ANR	4896912	Identifier	fixlen		4896899	0					
ANR	4896913	MultiplicativeExpression	sizeof ( fixbuf ) / sizeof ( fixbuf [ 0 ] )		4896899	1		/			
ANR	4896914	SizeofExpression	sizeof ( fixbuf )		4896899	0					
ANR	4896915	Sizeof	sizeof		4896899	0					
ANR	4896916	SizeofOperand	fixbuf		4896899	1					
ANR	4896917	SizeofExpression	sizeof ( fixbuf [ 0 ] )		4896899	1					
ANR	4896918	Sizeof	sizeof		4896899	0					
ANR	4896919	ArrayIndexing	fixbuf [ 0 ]		4896899	1					
ANR	4896920	Identifier	fixbuf		4896899	0					
ANR	4896921	PrimaryExpression	0		4896899	1					
ANR	4896922	IdentifierDeclStatement	int n ;	50:1:2249:2254	4896899	2	True				
ANR	4896923	IdentifierDecl	n		4896899	0					
ANR	4896924	IdentifierDeclType	int		4896899	0					
ANR	4896925	Identifier	n		4896899	1					
ANR	4896926	IdentifierDeclStatement	va_list args ;	51:1:2257:2270	4896899	3	True				
ANR	4896927	IdentifierDecl	args		4896899	0					
ANR	4896928	IdentifierDeclType	va_list		4896899	0					
ANR	4896929	Identifier	args		4896899	1					
ANR	4896930	ExpressionStatement	"n = vsnprintf ( fixbuf , fixlen , format , pargs )"	57:1:2465:2509	4896899	4	True				
ANR	4896931	AssignmentExpression	"n = vsnprintf ( fixbuf , fixlen , format , pargs )"		4896899	0		=			
ANR	4896932	Identifier	n		4896899	0					
ANR	4896933	CallExpression	"vsnprintf ( fixbuf , fixlen , format , pargs )"		4896899	1					
ANR	4896934	Callee	vsnprintf		4896899	0					
ANR	4896935	Identifier	vsnprintf		4896899	0					
ANR	4896936	ArgumentList	fixbuf		4896899	1					
ANR	4896937	Argument	fixbuf		4896899	0					
ANR	4896938	Identifier	fixbuf		4896899	0					
ANR	4896939	Argument	fixlen		4896899	1					
ANR	4896940	Identifier	fixlen		4896899	0					
ANR	4896941	Argument	format		4896899	2					
ANR	4896942	Identifier	format		4896899	0					
ANR	4896943	Argument	pargs		4896899	3					
ANR	4896944	Identifier	pargs		4896899	0					
ANR	4896945	IfStatement	if ( n < fixlen )		4896899	5					
ANR	4896946	Condition	n < fixlen	66:8:2724:2733	4896899	0	True				
ANR	4896947	RelationalExpression	n < fixlen		4896899	0		<			
ANR	4896948	Identifier	n		4896899	0					
ANR	4896949	Identifier	fixlen		4896899	1					
ANR	4896950	CompoundStatement		20:20:588:588	4896899	1					
ANR	4896951	ExpressionStatement	s = fixbuf	67:8:2746:2756	4896899	0	True				
ANR	4896952	AssignmentExpression	s = fixbuf		4896899	0		=			
ANR	4896953	Identifier	s		4896899	0					
ANR	4896954	Identifier	fixbuf		4896899	1					
ANR	4896955	ReturnStatement	return n ;	68:8:2766:2774	4896899	1	True				
ANR	4896956	Identifier	n		4896899	0					
ANR	4896957	ExpressionStatement	n += 1	73:4:2918:2924	4896899	6	True				
ANR	4896958	AssignmentExpression	n += 1		4896899	0		+=			
ANR	4896959	Identifier	n		4896899	0					
ANR	4896960	PrimaryExpression	1		4896899	1					
ANR	4896961	IdentifierDeclStatement	char * varbuf = NULL ;	74:4:2930:2949	4896899	7	True				
ANR	4896962	IdentifierDecl	* varbuf = NULL		4896899	0					
ANR	4896963	IdentifierDeclType	char *		4896899	0					
ANR	4896964	Identifier	varbuf		4896899	1					
ANR	4896965	AssignmentExpression	* varbuf = NULL		4896899	2		=			
ANR	4896966	Identifier	NULL		4896899	0					
ANR	4896967	Identifier	NULL		4896899	1					
ANR	4896968	TryStatement	try		4896899	8					
ANR	4896969	CompoundStatement		30:8:885:885	4896899	0					
ANR	4896970	ExpressionStatement	varbuf = new char [ n ]		4896899	0					
ANR	4896971	AssignmentExpression	varbuf = new char [ n ]		4896899	0		=			
ANR	4896972	Identifier	varbuf		4896899	0					
ANR	4896973	Identifier	n		4896899	1					
ANR	4896974	CatchList			4896899	1					
ANR	4896975	CatchStatement	catch ( ... )		4896899	0					
ANR	4896976	CompoundStatement		32:18:935:935	4896899	0					
ANR	4896977	ExpressionStatement	varbuf = NULL	79:8:3093:3106	4896899	0	True				
ANR	4896978	AssignmentExpression	varbuf = NULL		4896899	0		=			
ANR	4896979	Identifier	varbuf		4896899	0					
ANR	4896980	Identifier	NULL		4896899	1					
ANR	4896981	IfStatement	if ( NULL == varbuf )		4896899	9					
ANR	4896982	Condition	NULL == varbuf	81:8:3122:3135	4896899	0	True				
ANR	4896983	EqualityExpression	NULL == varbuf		4896899	0		==			
ANR	4896984	Identifier	NULL		4896899	0					
ANR	4896985	Identifier	varbuf		4896899	1					
ANR	4896986	ExpressionStatement	"EXCEPT ( ""Failed to allocate char buffer of %d chars"" , n )"	81:24:3138:3193	4896899	1	True				
ANR	4896987	CallExpression	"EXCEPT ( ""Failed to allocate char buffer of %d chars"" , n )"		4896899	0					
ANR	4896988	Callee	EXCEPT		4896899	0					
ANR	4896989	Identifier	EXCEPT		4896899	0					
ANR	4896990	ArgumentList	"""Failed to allocate char buffer of %d chars"""		4896899	1					
ANR	4896991	Argument	"""Failed to allocate char buffer of %d chars"""		4896899	0					
ANR	4896992	PrimaryExpression	"""Failed to allocate char buffer of %d chars"""		4896899	0					
ANR	4896993	Argument	n		4896899	1					
ANR	4896994	Identifier	n		4896899	0					
ANR	4896995	IdentifierDeclStatement	"int nn = vsnprintf ( varbuf , n , format , pargs ) ;"	85:1:3268:3312	4896899	10	True				
ANR	4896996	IdentifierDecl	"nn = vsnprintf ( varbuf , n , format , pargs )"		4896899	0					
ANR	4896997	IdentifierDeclType	int		4896899	0					
ANR	4896998	Identifier	nn		4896899	1					
ANR	4896999	AssignmentExpression	"nn = vsnprintf ( varbuf , n , format , pargs )"		4896899	2		=			
ANR	4897000	Identifier	nn		4896899	0					
ANR	4897001	CallExpression	"vsnprintf ( varbuf , n , format , pargs )"		4896899	1					
ANR	4897002	Callee	vsnprintf		4896899	0					
ANR	4897003	Identifier	vsnprintf		4896899	0					
ANR	4897004	ArgumentList	varbuf		4896899	1					
ANR	4897005	Argument	varbuf		4896899	0					
ANR	4897006	Identifier	varbuf		4896899	0					
ANR	4897007	Argument	n		4896899	1					
ANR	4897008	Identifier	n		4896899	0					
ANR	4897009	Argument	format		4896899	2					
ANR	4897010	Identifier	format		4896899	0					
ANR	4897011	Argument	pargs		4896899	3					
ANR	4897012	Identifier	pargs		4896899	0					
ANR	4897013	IfStatement	if ( nn >= n )		4896899	11					
ANR	4897014	Condition	nn >= n	93:8:3475:3481	4896899	0	True				
ANR	4897015	RelationalExpression	nn >= n		4896899	0		>=			
ANR	4897016	Identifier	nn		4896899	0					
ANR	4897017	Identifier	n		4896899	1					
ANR	4897018	ExpressionStatement	"EXCEPT ( ""Insufficient buffer size (%d) for printing %d chars"" , n , nn )"	93:17:3484:3552	4896899	1	True				
ANR	4897019	CallExpression	"EXCEPT ( ""Insufficient buffer size (%d) for printing %d chars"" , n , nn )"		4896899	0					
ANR	4897020	Callee	EXCEPT		4896899	0					
ANR	4897021	Identifier	EXCEPT		4896899	0					
ANR	4897022	ArgumentList	"""Insufficient buffer size (%d) for printing %d chars"""		4896899	1					
ANR	4897023	Argument	"""Insufficient buffer size (%d) for printing %d chars"""		4896899	0					
ANR	4897024	PrimaryExpression	"""Insufficient buffer size (%d) for printing %d chars"""		4896899	0					
ANR	4897025	Argument	n		4896899	1					
ANR	4897026	Identifier	n		4896899	0					
ANR	4897027	Argument	nn		4896899	2					
ANR	4897028	Identifier	nn		4896899	0					
ANR	4897029	ExpressionStatement	s = varbuf	96:4:3595:3605	4896899	12	True				
ANR	4897030	AssignmentExpression	s = varbuf		4896899	0		=			
ANR	4897031	Identifier	s		4896899	0					
ANR	4897032	Identifier	varbuf		4896899	1					
ANR	4897033	Statement	delete	99:4:3649:3654	4896899	13	True				
ANR	4897034	Statement	[	99:10:3655:3655	4896899	14	True				
ANR	4897035	Statement	]	99:11:3656:3656	4896899	15	True				
ANR	4897036	ExpressionStatement	varbuf	99:13:3658:3664	4896899	16	True				
ANR	4897037	Identifier	varbuf		4896899	0					
ANR	4897038	ReturnStatement	return nn ;	102:4:3709:3718	4896899	17	True				
ANR	4897039	Identifier	nn		4896899	0					
ANR	4897040	ReturnType	int		4896899	1					
ANR	4897041	Identifier	vsprintf		4896899	2					
ANR	4897042	ParameterList	"std :: string & s , const char * format , va_list pargs"		4896899	3					
ANR	4897043	Parameter	std :: string & s	47:13:2096:2109	4896899	0	True				
ANR	4897044	ParameterType	std :: string &		4896899	0					
ANR	4897045	Identifier	s		4896899	1					
ANR	4897046	Parameter	const char * format	47:29:2112:2129	4896899	1	True				
ANR	4897047	ParameterType	const char *		4896899	0					
ANR	4897048	Identifier	format		4896899	1					
ANR	4897049	Parameter	va_list pargs	47:49:2132:2144	4896899	2	True				
ANR	4897050	ParameterType	va_list		4896899	0					
ANR	4897051	Identifier	pargs		4896899	1					
ANR	4897052	CFGEntryNode	ENTRY		4896899		True				
ANR	4897053	CFGExitNode	EXIT		4896899		True				
ANR	4897054	CFGErrorNode	ERROR		4896899		True				
ANR	4897055	Symbol	args		4896899						
ANR	4897056	Symbol	nn		4896899						
ANR	4897057	Symbol	* fixbuf		4896899						
ANR	4897058	Symbol	s		4896899						
ANR	4897059	Symbol	fixbuf		4896899						
ANR	4897060	Symbol	NULL		4896899						
ANR	4897061	Symbol	varbuf		4896899						
ANR	4897062	Symbol	pargs		4896899						
ANR	4897063	Symbol	format		4896899						
ANR	4897064	Symbol	vsnprintf		4896899						
ANR	4897065	Symbol	fixlen		4896899						
ANR	4897066	Symbol	n		4896899						
ANR	4897067	Function	sprintf	105:0:3723:3895							
ANR	4897068	FunctionDef	"sprintf (std :: string & s , const char * format)"		4897067	0					
ANR	4897069	CompoundStatement		105:53:3776:3895	4897067	0					
ANR	4897070	IdentifierDeclStatement	va_list args ;	106:4:3782:3794	4897067	0	True				
ANR	4897071	IdentifierDecl	args		4897067	0					
ANR	4897072	IdentifierDeclType	va_list		4897067	0					
ANR	4897073	Identifier	args		4897067	1					
ANR	4897074	ExpressionStatement	"va_start ( args , format )"	107:4:3800:3822	4897067	1	True				
ANR	4897075	CallExpression	"va_start ( args , format )"		4897067	0					
ANR	4897076	Callee	va_start		4897067	0					
ANR	4897077	Identifier	va_start		4897067	0					
ANR	4897078	ArgumentList	args		4897067	1					
ANR	4897079	Argument	args		4897067	0					
ANR	4897080	Identifier	args		4897067	0					
ANR	4897081	Argument	format		4897067	1					
ANR	4897082	Identifier	format		4897067	0					
ANR	4897083	IdentifierDeclStatement	"int r = vsprintf ( s , format , args ) ;"	108:4:3828:3861	4897067	2	True				
ANR	4897084	IdentifierDecl	"r = vsprintf ( s , format , args )"		4897067	0					
ANR	4897085	IdentifierDeclType	int		4897067	0					
ANR	4897086	Identifier	r		4897067	1					
ANR	4897087	AssignmentExpression	"r = vsprintf ( s , format , args )"		4897067	2		=			
ANR	4897088	Identifier	r		4897067	0					
ANR	4897089	CallExpression	"vsprintf ( s , format , args )"		4897067	1					
ANR	4897090	Callee	vsprintf		4897067	0					
ANR	4897091	Identifier	vsprintf		4897067	0					
ANR	4897092	ArgumentList	s		4897067	1					
ANR	4897093	Argument	s		4897067	0					
ANR	4897094	Identifier	s		4897067	0					
ANR	4897095	Argument	format		4897067	1					
ANR	4897096	Identifier	format		4897067	0					
ANR	4897097	Argument	args		4897067	2					
ANR	4897098	Identifier	args		4897067	0					
ANR	4897099	ExpressionStatement	va_end ( args )	109:4:3867:3879	4897067	3	True				
ANR	4897100	CallExpression	va_end ( args )		4897067	0					
ANR	4897101	Callee	va_end		4897067	0					
ANR	4897102	Identifier	va_end		4897067	0					
ANR	4897103	ArgumentList	args		4897067	1					
ANR	4897104	Argument	args		4897067	0					
ANR	4897105	Identifier	args		4897067	0					
ANR	4897106	ReturnStatement	return r ;	110:4:3885:3893	4897067	4	True				
ANR	4897107	Identifier	r		4897067	0					
ANR	4897108	ReturnType	int		4897067	1					
ANR	4897109	Identifier	sprintf		4897067	2					
ANR	4897110	ParameterList	"std :: string & s , const char * format"		4897067	3					
ANR	4897111	Parameter	std :: string & s	105:12:3735:3748	4897067	0	True				
ANR	4897112	ParameterType	std :: string &		4897067	0					
ANR	4897113	Identifier	s		4897067	1					
ANR	4897114	Parameter	const char * format	105:28:3751:3768	4897067	1	True				
ANR	4897115	ParameterType	const char *		4897067	0					
ANR	4897116	Identifier	format		4897067	1					
ANR	4897117	CFGEntryNode	ENTRY		4897067		True				
ANR	4897118	CFGExitNode	EXIT		4897067		True				
ANR	4897119	Symbol	args		4897067						
ANR	4897120	Symbol	r		4897067						
ANR	4897121	Symbol	s		4897067						
ANR	4897122	Symbol	format		4897067						
ANR	4897123	Symbol	vsprintf		4897067						
ANR	4897124	Function	sprintf	113:0:3898:4176							
ANR	4897125	FunctionDef	"sprintf (MyString & s , const char * format)"		4897124	0					
ANR	4897126	CompoundStatement		113:50:3948:4176	4897124	0					
ANR	4897127	IdentifierDeclStatement	va_list args ;	114:4:3954:3966	4897124	0	True				
ANR	4897128	IdentifierDecl	args		4897124	0					
ANR	4897129	IdentifierDeclType	va_list		4897124	0					
ANR	4897130	Identifier	args		4897124	1					
ANR	4897131	IdentifierDeclStatement	std :: string t ;	115:4:3972:3985	4897124	1	True				
ANR	4897132	IdentifierDecl	t		4897124	0					
ANR	4897133	IdentifierDeclType	std :: string		4897124	0					
ANR	4897134	Identifier	t		4897124	1					
ANR	4897135	ExpressionStatement	"va_start ( args , format )"	116:4:3991:4013	4897124	2	True				
ANR	4897136	CallExpression	"va_start ( args , format )"		4897124	0					
ANR	4897137	Callee	va_start		4897124	0					
ANR	4897138	Identifier	va_start		4897124	0					
ANR	4897139	ArgumentList	args		4897124	1					
ANR	4897140	Argument	args		4897124	0					
ANR	4897141	Identifier	args		4897124	0					
ANR	4897142	Argument	format		4897124	1					
ANR	4897143	Identifier	format		4897124	0					
ANR	4897144	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	118:4:4091:4124	4897124	3	True				
ANR	4897145	IdentifierDecl	"r = vsprintf ( t , format , args )"		4897124	0					
ANR	4897146	IdentifierDeclType	int		4897124	0					
ANR	4897147	Identifier	r		4897124	1					
ANR	4897148	AssignmentExpression	"r = vsprintf ( t , format , args )"		4897124	2		=			
ANR	4897149	Identifier	r		4897124	0					
ANR	4897150	CallExpression	"vsprintf ( t , format , args )"		4897124	1					
ANR	4897151	Callee	vsprintf		4897124	0					
ANR	4897152	Identifier	vsprintf		4897124	0					
ANR	4897153	ArgumentList	t		4897124	1					
ANR	4897154	Argument	t		4897124	0					
ANR	4897155	Identifier	t		4897124	0					
ANR	4897156	Argument	format		4897124	1					
ANR	4897157	Identifier	format		4897124	0					
ANR	4897158	Argument	args		4897124	2					
ANR	4897159	Identifier	args		4897124	0					
ANR	4897160	ExpressionStatement	va_end ( args )	119:4:4130:4142	4897124	4	True				
ANR	4897161	CallExpression	va_end ( args )		4897124	0					
ANR	4897162	Callee	va_end		4897124	0					
ANR	4897163	Identifier	va_end		4897124	0					
ANR	4897164	ArgumentList	args		4897124	1					
ANR	4897165	Argument	args		4897124	0					
ANR	4897166	Identifier	args		4897124	0					
ANR	4897167	ExpressionStatement	"assign ( s , t )"	120:4:4148:4160	4897124	5	True				
ANR	4897168	CallExpression	"assign ( s , t )"		4897124	0					
ANR	4897169	Callee	assign		4897124	0					
ANR	4897170	Identifier	assign		4897124	0					
ANR	4897171	ArgumentList	s		4897124	1					
ANR	4897172	Argument	s		4897124	0					
ANR	4897173	Identifier	s		4897124	0					
ANR	4897174	Argument	t		4897124	1					
ANR	4897175	Identifier	t		4897124	0					
ANR	4897176	ReturnStatement	return r ;	121:4:4166:4174	4897124	6	True				
ANR	4897177	Identifier	r		4897124	0					
ANR	4897178	ReturnType	int		4897124	1					
ANR	4897179	Identifier	sprintf		4897124	2					
ANR	4897180	ParameterList	"MyString & s , const char * format"		4897124	3					
ANR	4897181	Parameter	MyString & s	113:12:3910:3920	4897124	0	True				
ANR	4897182	ParameterType	MyString &		4897124	0					
ANR	4897183	Identifier	s		4897124	1					
ANR	4897184	Parameter	const char * format	113:25:3923:3940	4897124	1	True				
ANR	4897185	ParameterType	const char *		4897124	0					
ANR	4897186	Identifier	format		4897124	1					
ANR	4897187	CFGEntryNode	ENTRY		4897124		True				
ANR	4897188	CFGExitNode	EXIT		4897124		True				
ANR	4897189	Symbol	args		4897124						
ANR	4897190	Symbol	r		4897124						
ANR	4897191	Symbol	s		4897124						
ANR	4897192	Symbol	t		4897124						
ANR	4897193	Symbol	format		4897124						
ANR	4897194	Symbol	vsprintf		4897124						
ANR	4897195	Function	sprintf_cat	124:0:4179:4386							
ANR	4897196	FunctionDef	"sprintf_cat (std :: string & s , const char * format)"		4897195	0					
ANR	4897197	CompoundStatement		124:57:4236:4386	4897195	0					
ANR	4897198	IdentifierDeclStatement	va_list args ;	125:4:4242:4254	4897195	0	True				
ANR	4897199	IdentifierDecl	args		4897195	0					
ANR	4897200	IdentifierDeclType	va_list		4897195	0					
ANR	4897201	Identifier	args		4897195	1					
ANR	4897202	IdentifierDeclStatement	std :: string t ;	126:4:4260:4273	4897195	1	True				
ANR	4897203	IdentifierDecl	t		4897195	0					
ANR	4897204	IdentifierDeclType	std :: string		4897195	0					
ANR	4897205	Identifier	t		4897195	1					
ANR	4897206	ExpressionStatement	"va_start ( args , format )"	127:4:4279:4301	4897195	2	True				
ANR	4897207	CallExpression	"va_start ( args , format )"		4897195	0					
ANR	4897208	Callee	va_start		4897195	0					
ANR	4897209	Identifier	va_start		4897195	0					
ANR	4897210	ArgumentList	args		4897195	1					
ANR	4897211	Argument	args		4897195	0					
ANR	4897212	Identifier	args		4897195	0					
ANR	4897213	Argument	format		4897195	1					
ANR	4897214	Identifier	format		4897195	0					
ANR	4897215	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	128:4:4307:4340	4897195	3	True				
ANR	4897216	IdentifierDecl	"r = vsprintf ( t , format , args )"		4897195	0					
ANR	4897217	IdentifierDeclType	int		4897195	0					
ANR	4897218	Identifier	r		4897195	1					
ANR	4897219	AssignmentExpression	"r = vsprintf ( t , format , args )"		4897195	2		=			
ANR	4897220	Identifier	r		4897195	0					
ANR	4897221	CallExpression	"vsprintf ( t , format , args )"		4897195	1					
ANR	4897222	Callee	vsprintf		4897195	0					
ANR	4897223	Identifier	vsprintf		4897195	0					
ANR	4897224	ArgumentList	t		4897195	1					
ANR	4897225	Argument	t		4897195	0					
ANR	4897226	Identifier	t		4897195	0					
ANR	4897227	Argument	format		4897195	1					
ANR	4897228	Identifier	format		4897195	0					
ANR	4897229	Argument	args		4897195	2					
ANR	4897230	Identifier	args		4897195	0					
ANR	4897231	ExpressionStatement	va_end ( args )	129:4:4346:4358	4897195	4	True				
ANR	4897232	CallExpression	va_end ( args )		4897195	0					
ANR	4897233	Callee	va_end		4897195	0					
ANR	4897234	Identifier	va_end		4897195	0					
ANR	4897235	ArgumentList	args		4897195	1					
ANR	4897236	Argument	args		4897195	0					
ANR	4897237	Identifier	args		4897195	0					
ANR	4897238	ExpressionStatement	s += t	130:4:4364:4370	4897195	5	True				
ANR	4897239	AssignmentExpression	s += t		4897195	0		+=			
ANR	4897240	Identifier	s		4897195	0					
ANR	4897241	Identifier	t		4897195	1					
ANR	4897242	ReturnStatement	return r ;	131:4:4376:4384	4897195	6	True				
ANR	4897243	Identifier	r		4897195	0					
ANR	4897244	ReturnType	int		4897195	1					
ANR	4897245	Identifier	sprintf_cat		4897195	2					
ANR	4897246	ParameterList	"std :: string & s , const char * format"		4897195	3					
ANR	4897247	Parameter	std :: string & s	124:16:4195:4208	4897195	0	True				
ANR	4897248	ParameterType	std :: string &		4897195	0					
ANR	4897249	Identifier	s		4897195	1					
ANR	4897250	Parameter	const char * format	124:32:4211:4228	4897195	1	True				
ANR	4897251	ParameterType	const char *		4897195	0					
ANR	4897252	Identifier	format		4897195	1					
ANR	4897253	CFGEntryNode	ENTRY		4897195		True				
ANR	4897254	CFGExitNode	EXIT		4897195		True				
ANR	4897255	Symbol	args		4897195						
ANR	4897256	Symbol	r		4897195						
ANR	4897257	Symbol	s		4897195						
ANR	4897258	Symbol	t		4897195						
ANR	4897259	Symbol	format		4897195						
ANR	4897260	Symbol	vsprintf		4897195						
ANR	4897261	Function	sprintf_cat	134:0:4389:4601							
ANR	4897262	FunctionDef	"sprintf_cat (MyString & s , const char * format)"		4897261	0					
ANR	4897263	CompoundStatement		134:54:4443:4601	4897261	0					
ANR	4897264	IdentifierDeclStatement	va_list args ;	135:4:4449:4461	4897261	0	True				
ANR	4897265	IdentifierDecl	args		4897261	0					
ANR	4897266	IdentifierDeclType	va_list		4897261	0					
ANR	4897267	Identifier	args		4897261	1					
ANR	4897268	IdentifierDeclStatement	std :: string t ;	136:4:4467:4480	4897261	1	True				
ANR	4897269	IdentifierDecl	t		4897261	0					
ANR	4897270	IdentifierDeclType	std :: string		4897261	0					
ANR	4897271	Identifier	t		4897261	1					
ANR	4897272	ExpressionStatement	"va_start ( args , format )"	137:4:4486:4508	4897261	2	True				
ANR	4897273	CallExpression	"va_start ( args , format )"		4897261	0					
ANR	4897274	Callee	va_start		4897261	0					
ANR	4897275	Identifier	va_start		4897261	0					
ANR	4897276	ArgumentList	args		4897261	1					
ANR	4897277	Argument	args		4897261	0					
ANR	4897278	Identifier	args		4897261	0					
ANR	4897279	Argument	format		4897261	1					
ANR	4897280	Identifier	format		4897261	0					
ANR	4897281	IdentifierDeclStatement	"int r = vsprintf ( t , format , args ) ;"	138:4:4514:4547	4897261	3	True				
ANR	4897282	IdentifierDecl	"r = vsprintf ( t , format , args )"		4897261	0					
ANR	4897283	IdentifierDeclType	int		4897261	0					
ANR	4897284	Identifier	r		4897261	1					
ANR	4897285	AssignmentExpression	"r = vsprintf ( t , format , args )"		4897261	2		=			
ANR	4897286	Identifier	r		4897261	0					
ANR	4897287	CallExpression	"vsprintf ( t , format , args )"		4897261	1					
ANR	4897288	Callee	vsprintf		4897261	0					
ANR	4897289	Identifier	vsprintf		4897261	0					
ANR	4897290	ArgumentList	t		4897261	1					
ANR	4897291	Argument	t		4897261	0					
ANR	4897292	Identifier	t		4897261	0					
ANR	4897293	Argument	format		4897261	1					
ANR	4897294	Identifier	format		4897261	0					
ANR	4897295	Argument	args		4897261	2					
ANR	4897296	Identifier	args		4897261	0					
ANR	4897297	ExpressionStatement	va_end ( args )	139:4:4553:4565	4897261	4	True				
ANR	4897298	CallExpression	va_end ( args )		4897261	0					
ANR	4897299	Callee	va_end		4897261	0					
ANR	4897300	Identifier	va_end		4897261	0					
ANR	4897301	ArgumentList	args		4897261	1					
ANR	4897302	Argument	args		4897261	0					
ANR	4897303	Identifier	args		4897261	0					
ANR	4897304	ExpressionStatement	s += t . c_str ( )	140:4:4571:4585	4897261	5	True				
ANR	4897305	AssignmentExpression	s += t . c_str ( )		4897261	0		+=			
ANR	4897306	Identifier	s		4897261	0					
ANR	4897307	CallExpression	t . c_str ( )		4897261	1					
ANR	4897308	Callee	t . c_str		4897261	0					
ANR	4897309	MemberAccess	t . c_str		4897261	0					
ANR	4897310	Identifier	t		4897261	0					
ANR	4897311	Identifier	c_str		4897261	1					
ANR	4897312	ArgumentList			4897261	1					
ANR	4897313	ReturnStatement	return r ;	141:4:4591:4599	4897261	6	True				
ANR	4897314	Identifier	r		4897261	0					
ANR	4897315	ReturnType	int		4897261	1					
ANR	4897316	Identifier	sprintf_cat		4897261	2					
ANR	4897317	ParameterList	"MyString & s , const char * format"		4897261	3					
ANR	4897318	Parameter	MyString & s	134:16:4405:4415	4897261	0	True				
ANR	4897319	ParameterType	MyString &		4897261	0					
ANR	4897320	Identifier	s		4897261	1					
ANR	4897321	Parameter	const char * format	134:29:4418:4435	4897261	1	True				
ANR	4897322	ParameterType	const char *		4897261	0					
ANR	4897323	Identifier	format		4897261	1					
ANR	4897324	CFGEntryNode	ENTRY		4897261		True				
ANR	4897325	CFGExitNode	EXIT		4897261		True				
ANR	4897326	Symbol	args		4897261						
ANR	4897327	Symbol	r		4897261						
ANR	4897328	Symbol	s		4897261						
ANR	4897329	Symbol	t		4897261						
ANR	4897330	Symbol	t . c_str		4897261						
ANR	4897331	Symbol	format		4897261						
ANR	4897332	Symbol	vsprintf		4897261						
ANR	4897333	Function	chomp	144:0:4604:4904							
ANR	4897334	FunctionDef	chomp (std :: string & str)		4897333	0					
ANR	4897335	CompoundStatement		145:0:4633:4904	4897333	0					
ANR	4897336	IdentifierDeclStatement	bool chomped = false ;	146:1:4636:4656	4897333	0	True				
ANR	4897337	IdentifierDecl	chomped = false		4897333	0					
ANR	4897338	IdentifierDeclType	bool		4897333	0					
ANR	4897339	Identifier	chomped		4897333	1					
ANR	4897340	AssignmentExpression	chomped = false		4897333	2		=			
ANR	4897341	Identifier	false		4897333	0					
ANR	4897342	Identifier	false		4897333	1					
ANR	4897343	IfStatement	if ( str . empty ( ) )		4897333	1					
ANR	4897344	Condition	str . empty ( )	147:5:4663:4673	4897333	0	True				
ANR	4897345	CallExpression	str . empty ( )		4897333	0					
ANR	4897346	Callee	str . empty		4897333	0					
ANR	4897347	MemberAccess	str . empty		4897333	0					
ANR	4897348	Identifier	str		4897333	0					
ANR	4897349	Identifier	empty		4897333	1					
ANR	4897350	ArgumentList			4897333	1					
ANR	4897351	CompoundStatement		3:19:43:43	4897333	1					
ANR	4897352	ReturnStatement	return chomped ;	148:2:4681:4695	4897333	0	True				
ANR	4897353	Identifier	chomped		4897333	0					
ANR	4897354	IfStatement	if ( str [ str . length ( ) - 1 ] == '\\n' )		4897333	2					
ANR	4897355	Condition	str [ str . length ( ) - 1 ] == '\\n'	150:5:4705:4731	4897333	0	True				
ANR	4897356	EqualityExpression	str [ str . length ( ) - 1 ] == '\\n'		4897333	0		==			
ANR	4897357	ArrayIndexing	str [ str . length ( ) - 1 ]		4897333	0					
ANR	4897358	Identifier	str		4897333	0					
ANR	4897359	AdditiveExpression	str . length ( ) - 1		4897333	1		-			
ANR	4897360	CallExpression	str . length ( )		4897333	0					
ANR	4897361	Callee	str . length		4897333	0					
ANR	4897362	MemberAccess	str . length		4897333	0					
ANR	4897363	Identifier	str		4897333	0					
ANR	4897364	Identifier	length		4897333	1					
ANR	4897365	ArgumentList			4897333	1					
ANR	4897366	PrimaryExpression	1		4897333	1					
ANR	4897367	PrimaryExpression	'\\n'		4897333	1					
ANR	4897368	CompoundStatement		6:35:101:101	4897333	1					
ANR	4897369	ExpressionStatement	str . erase ( str . length ( ) - 1 )	151:2:4739:4764	4897333	0	True				
ANR	4897370	CallExpression	str . erase ( str . length ( ) - 1 )		4897333	0					
ANR	4897371	Callee	str . erase		4897333	0					
ANR	4897372	MemberAccess	str . erase		4897333	0					
ANR	4897373	Identifier	str		4897333	0					
ANR	4897374	Identifier	erase		4897333	1					
ANR	4897375	ArgumentList	str . length ( ) - 1		4897333	1					
ANR	4897376	Argument	str . length ( ) - 1		4897333	0					
ANR	4897377	AdditiveExpression	str . length ( ) - 1		4897333	0		-			
ANR	4897378	CallExpression	str . length ( )		4897333	0					
ANR	4897379	Callee	str . length		4897333	0					
ANR	4897380	MemberAccess	str . length		4897333	0					
ANR	4897381	Identifier	str		4897333	0					
ANR	4897382	Identifier	length		4897333	1					
ANR	4897383	ArgumentList			4897333	1					
ANR	4897384	PrimaryExpression	1		4897333	1					
ANR	4897385	ExpressionStatement	chomped = true	152:2:4768:4782	4897333	1	True				
ANR	4897386	AssignmentExpression	chomped = true		4897333	0		=			
ANR	4897387	Identifier	chomped		4897333	0					
ANR	4897388	Identifier	true		4897333	1					
ANR	4897389	IfStatement	if ( ( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' ) )		4897333	2					
ANR	4897390	Condition	( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' )	153:6:4790:4844	4897333	0	True				
ANR	4897391	AndExpression	( str . length ( ) > 0 ) && ( str [ str . length ( ) - 1 ] == '\\r' )		4897333	0		&&			
ANR	4897392	RelationalExpression	str . length ( ) > 0		4897333	0		>			
ANR	4897393	CallExpression	str . length ( )		4897333	0					
ANR	4897394	Callee	str . length		4897333	0					
ANR	4897395	MemberAccess	str . length		4897333	0					
ANR	4897396	Identifier	str		4897333	0					
ANR	4897397	Identifier	length		4897333	1					
ANR	4897398	ArgumentList			4897333	1					
ANR	4897399	PrimaryExpression	0		4897333	1					
ANR	4897400	EqualityExpression	str [ str . length ( ) - 1 ] == '\\r'		4897333	1		==			
ANR	4897401	ArrayIndexing	str [ str . length ( ) - 1 ]		4897333	0					
ANR	4897402	Identifier	str		4897333	0					
ANR	4897403	AdditiveExpression	str . length ( ) - 1		4897333	1		-			
ANR	4897404	CallExpression	str . length ( )		4897333	0					
ANR	4897405	Callee	str . length		4897333	0					
ANR	4897406	MemberAccess	str . length		4897333	0					
ANR	4897407	Identifier	str		4897333	0					
ANR	4897408	Identifier	length		4897333	1					
ANR	4897409	ArgumentList			4897333	1					
ANR	4897410	PrimaryExpression	1		4897333	1					
ANR	4897411	PrimaryExpression	'\\r'		4897333	1					
ANR	4897412	CompoundStatement		9:64:214:214	4897333	1					
ANR	4897413	ExpressionStatement	str . erase ( str . length ( ) - 1 )	154:3:4853:4878	4897333	0	True				
ANR	4897414	CallExpression	str . erase ( str . length ( ) - 1 )		4897333	0					
ANR	4897415	Callee	str . erase		4897333	0					
ANR	4897416	MemberAccess	str . erase		4897333	0					
ANR	4897417	Identifier	str		4897333	0					
ANR	4897418	Identifier	erase		4897333	1					
ANR	4897419	ArgumentList	str . length ( ) - 1		4897333	1					
ANR	4897420	Argument	str . length ( ) - 1		4897333	0					
ANR	4897421	AdditiveExpression	str . length ( ) - 1		4897333	0		-			
ANR	4897422	CallExpression	str . length ( )		4897333	0					
ANR	4897423	Callee	str . length		4897333	0					
ANR	4897424	MemberAccess	str . length		4897333	0					
ANR	4897425	Identifier	str		4897333	0					
ANR	4897426	Identifier	length		4897333	1					
ANR	4897427	ArgumentList			4897333	1					
ANR	4897428	PrimaryExpression	1		4897333	1					
ANR	4897429	ReturnStatement	return chomped ;	157:1:4888:4902	4897333	3	True				
ANR	4897430	Identifier	chomped		4897333	0					
ANR	4897431	ReturnType	bool		4897333	1					
ANR	4897432	Identifier	chomp		4897333	2					
ANR	4897433	ParameterList	std :: string & str		4897333	3					
ANR	4897434	Parameter	std :: string & str	144:11:4615:4630	4897333	0	True				
ANR	4897435	ParameterType	std :: string &		4897333	0					
ANR	4897436	Identifier	str		4897333	1					
ANR	4897437	CFGEntryNode	ENTRY		4897333		True				
ANR	4897438	CFGExitNode	EXIT		4897333		True				
ANR	4897439	Symbol	str		4897333						
ANR	4897440	Symbol	str . empty		4897333						
ANR	4897441	Symbol	false		4897333						
ANR	4897442	Symbol	true		4897333						
ANR	4897443	Symbol	str . length		4897333						
ANR	4897444	Symbol	* str		4897333						
ANR	4897445	Symbol	chomped		4897333						
ANR	4897446	Symbol	* str . length		4897333						
ANR	4897447	Function	trim	160:0:4907:5257							
ANR	4897448	FunctionDef	trim (std :: string & str)		4897447	0					
ANR	4897449	CompoundStatement		161:0:4937:5257	4897447	0					
ANR	4897450	IfStatement	if ( str . empty ( ) )		4897447	0					
ANR	4897451	Condition	str . empty ( )	162:5:4944:4954	4897447	0	True				
ANR	4897452	CallExpression	str . empty ( )		4897447	0					
ANR	4897453	Callee	str . empty		4897447	0					
ANR	4897454	MemberAccess	str . empty		4897447	0					
ANR	4897455	Identifier	str		4897447	0					
ANR	4897456	Identifier	empty		4897447	1					
ANR	4897457	ArgumentList			4897447	1					
ANR	4897458	CompoundStatement		2:19:20:20	4897447	1					
ANR	4897459	ReturnStatement	return ;	163:2:4962:4968	4897447	0	True				
ANR	4897460	IdentifierDeclStatement	unsigned begin = 0 ;	165:1:4974:4992	4897447	1	True				
ANR	4897461	IdentifierDecl	begin = 0		4897447	0					
ANR	4897462	IdentifierDeclType	unsigned		4897447	0					
ANR	4897463	Identifier	begin		4897447	1					
ANR	4897464	AssignmentExpression	begin = 0		4897447	2		=			
ANR	4897465	Identifier	begin		4897447	0					
ANR	4897466	PrimaryExpression	0		4897447	1					
ANR	4897467	WhileStatement	while ( begin < str . length ( ) && isspace ( str [ begin ] ) )		4897447	2					
ANR	4897468	Condition	begin < str . length ( ) && isspace ( str [ begin ] )	166:9:5003:5045	4897447	0	True				
ANR	4897469	AndExpression	begin < str . length ( ) && isspace ( str [ begin ] )		4897447	0		&&			
ANR	4897470	RelationalExpression	begin < str . length ( )		4897447	0		<			
ANR	4897471	Identifier	begin		4897447	0					
ANR	4897472	CallExpression	str . length ( )		4897447	1					
ANR	4897473	Callee	str . length		4897447	0					
ANR	4897474	MemberAccess	str . length		4897447	0					
ANR	4897475	Identifier	str		4897447	0					
ANR	4897476	Identifier	length		4897447	1					
ANR	4897477	ArgumentList			4897447	1					
ANR	4897478	CallExpression	isspace ( str [ begin ] )		4897447	1					
ANR	4897479	Callee	isspace		4897447	0					
ANR	4897480	Identifier	isspace		4897447	0					
ANR	4897481	ArgumentList	str [ begin ]		4897447	1					
ANR	4897482	Argument	str [ begin ]		4897447	0					
ANR	4897483	ArrayIndexing	str [ begin ]		4897447	0					
ANR	4897484	Identifier	str		4897447	0					
ANR	4897485	Identifier	begin		4897447	1					
ANR	4897486	CompoundStatement		6:55:111:111	4897447	1					
ANR	4897487	ExpressionStatement	++ begin	167:2:5053:5060	4897447	0	True				
ANR	4897488	UnaryExpression	++ begin		4897447	0					
ANR	4897489	IncDec	++		4897447	0					
ANR	4897490	Identifier	begin		4897447	1					
ANR	4897491	IdentifierDeclStatement	int end = str . length ( ) - 1 ;	170:1:5067:5095	4897447	3	True				
ANR	4897492	IdentifierDecl	end = str . length ( ) - 1		4897447	0					
ANR	4897493	IdentifierDeclType	int		4897447	0					
ANR	4897494	Identifier	end		4897447	1					
ANR	4897495	AssignmentExpression	end = str . length ( ) - 1		4897447	2		=			
ANR	4897496	Identifier	end		4897447	0					
ANR	4897497	AdditiveExpression	str . length ( ) - 1		4897447	1		-			
ANR	4897498	CallExpression	str . length ( )		4897447	0					
ANR	4897499	Callee	str . length		4897447	0					
ANR	4897500	MemberAccess	str . length		4897447	0					
ANR	4897501	Identifier	str		4897447	0					
ANR	4897502	Identifier	length		4897447	1					
ANR	4897503	ArgumentList			4897447	1					
ANR	4897504	PrimaryExpression	1		4897447	1					
ANR	4897505	WhileStatement	while ( end >= 0 && isspace ( str [ end ] ) )		4897447	4					
ANR	4897506	Condition	end >= 0 && isspace ( str [ end ] )	171:9:5106:5134	4897447	0	True				
ANR	4897507	AndExpression	end >= 0 && isspace ( str [ end ] )		4897447	0		&&			
ANR	4897508	RelationalExpression	end >= 0		4897447	0		>=			
ANR	4897509	Identifier	end		4897447	0					
ANR	4897510	PrimaryExpression	0		4897447	1					
ANR	4897511	CallExpression	isspace ( str [ end ] )		4897447	1					
ANR	4897512	Callee	isspace		4897447	0					
ANR	4897513	Identifier	isspace		4897447	0					
ANR	4897514	ArgumentList	str [ end ]		4897447	1					
ANR	4897515	Argument	str [ end ]		4897447	0					
ANR	4897516	ArrayIndexing	str [ end ]		4897447	0					
ANR	4897517	Identifier	str		4897447	0					
ANR	4897518	Identifier	end		4897447	1					
ANR	4897519	CompoundStatement		11:41:200:200	4897447	1					
ANR	4897520	ExpressionStatement	-- end	172:2:5142:5147	4897447	0	True				
ANR	4897521	UnaryExpression	-- end		4897447	0					
ANR	4897522	IncDec	--		4897447	0					
ANR	4897523	Identifier	end		4897447	1					
ANR	4897524	IfStatement	if ( begin != 0 || end != ( int ) ( str . length ( ) ) - 1 )		4897447	5					
ANR	4897525	Condition	begin != 0 || end != ( int ) ( str . length ( ) ) - 1	175:6:5159:5202	4897447	0	True				
ANR	4897526	OrExpression	begin != 0 || end != ( int ) ( str . length ( ) ) - 1		4897447	0		||			
ANR	4897527	EqualityExpression	begin != 0		4897447	0		!=			
ANR	4897528	Identifier	begin		4897447	0					
ANR	4897529	PrimaryExpression	0		4897447	1					
ANR	4897530	EqualityExpression	end != ( int ) ( str . length ( ) ) - 1		4897447	1		!=			
ANR	4897531	Identifier	end		4897447	0					
ANR	4897532	AdditiveExpression	( int ) ( str . length ( ) ) - 1		4897447	1		-			
ANR	4897533	CastExpression	( int ) ( str . length ( ) )		4897447	0					
ANR	4897534	CastTarget	int		4897447	0					
ANR	4897535	CallExpression	str . length ( )		4897447	1					
ANR	4897536	Callee	str . length		4897447	0					
ANR	4897537	MemberAccess	str . length		4897447	0					
ANR	4897538	Identifier	str		4897447	0					
ANR	4897539	Identifier	length		4897447	1					
ANR	4897540	ArgumentList			4897447	1					
ANR	4897541	PrimaryExpression	1		4897447	1					
ANR	4897542	CompoundStatement		15:53:268:268	4897447	1					
ANR	4897543	ExpressionStatement	"str = str . substr ( begin , ( end - begin ) + 1 )"	176:2:5210:5252	4897447	0	True				
ANR	4897544	AssignmentExpression	"str = str . substr ( begin , ( end - begin ) + 1 )"		4897447	0		=			
ANR	4897545	Identifier	str		4897447	0					
ANR	4897546	CallExpression	"str . substr ( begin , ( end - begin ) + 1 )"		4897447	1					
ANR	4897547	Callee	str . substr		4897447	0					
ANR	4897548	MemberAccess	str . substr		4897447	0					
ANR	4897549	Identifier	str		4897447	0					
ANR	4897550	Identifier	substr		4897447	1					
ANR	4897551	ArgumentList	begin		4897447	1					
ANR	4897552	Argument	begin		4897447	0					
ANR	4897553	Identifier	begin		4897447	0					
ANR	4897554	Argument	( end - begin ) + 1		4897447	1					
ANR	4897555	AdditiveExpression	( end - begin ) + 1		4897447	0		+			
ANR	4897556	AdditiveExpression	end - begin		4897447	0		-			
ANR	4897557	Identifier	end		4897447	0					
ANR	4897558	Identifier	begin		4897447	1					
ANR	4897559	PrimaryExpression	1		4897447	1					
ANR	4897560	ReturnType	void		4897447	1					
ANR	4897561	Identifier	trim		4897447	2					
ANR	4897562	ParameterList	std :: string & str		4897447	3					
ANR	4897563	Parameter	std :: string & str	160:11:4918:4933	4897447	0	True				
ANR	4897564	ParameterType	std :: string &		4897447	0					
ANR	4897565	Identifier	str		4897447	1					
ANR	4897566	CFGEntryNode	ENTRY		4897447		True				
ANR	4897567	CFGExitNode	EXIT		4897447		True				
ANR	4897568	Symbol	str		4897447						
ANR	4897569	Symbol	str . empty		4897447						
ANR	4897570	Symbol	* begin		4897447						
ANR	4897571	Symbol	isspace		4897447						
ANR	4897572	Symbol	str . substr		4897447						
ANR	4897573	Symbol	end		4897447						
ANR	4897574	Symbol	* end		4897447						
ANR	4897575	Symbol	str . length		4897447						
ANR	4897576	Symbol	* str		4897447						
ANR	4897577	Symbol	begin		4897447						
ANR	4897578	Function	upper_case	188:0:5386:5539							
ANR	4897579	FunctionDef	upper_case (std :: string & str)		4897578	0					
ANR	4897580	CompoundStatement		189:0:5422:5539	4897578	0					
ANR	4897581	ForStatement	for ( int i = 0 ; str [ i ] ; i ++ )		4897578	0					
ANR	4897582	ForInit	int i = 0 ;	190:7:5431:5440	4897578	0	True				
ANR	4897583	IdentifierDeclStatement	int i = 0 ;		4897578	0					
ANR	4897584	IdentifierDecl	i = 0		4897578	0					
ANR	4897585	IdentifierDeclType	int		4897578	0					
ANR	4897586	Identifier	i		4897578	1					
ANR	4897587	AssignmentExpression	i = 0		4897578	2		=			
ANR	4897588	Identifier	i		4897578	0					
ANR	4897589	PrimaryExpression	0		4897578	1					
ANR	4897590	Condition	str [ i ]	190:18:5442:5447	4897578	1	True				
ANR	4897591	ArrayIndexing	str [ i ]		4897578	0					
ANR	4897592	Identifier	str		4897578	0					
ANR	4897593	Identifier	i		4897578	1					
ANR	4897594	PostIncDecOperationExpression	i ++	190:26:5450:5452	4897578	2	True				
ANR	4897595	Identifier	i		4897578	0					
ANR	4897596	IncDec	++		4897578	1					
ANR	4897597	CompoundStatement		2:32:33:33	4897578	3					
ANR	4897598	IfStatement	if ( str [ i ] >= 'a' && str [ i ] <= 'z' )		4897578	0					
ANR	4897599	Condition	str [ i ] >= 'a' && str [ i ] <= 'z'	191:7:5465:5494	4897578	0	True				
ANR	4897600	AndExpression	str [ i ] >= 'a' && str [ i ] <= 'z'		4897578	0		&&			
ANR	4897601	RelationalExpression	str [ i ] >= 'a'		4897578	0		>=			
ANR	4897602	ArrayIndexing	str [ i ]		4897578	0					
ANR	4897603	Identifier	str		4897578	0					
ANR	4897604	Identifier	i		4897578	1					
ANR	4897605	PrimaryExpression	'a'		4897578	1					
ANR	4897606	RelationalExpression	str [ i ] <= 'z'		4897578	1		<=			
ANR	4897607	ArrayIndexing	str [ i ]		4897578	0					
ANR	4897608	Identifier	str		4897578	0					
ANR	4897609	Identifier	i		4897578	1					
ANR	4897610	PrimaryExpression	'z'		4897578	1					
ANR	4897611	CompoundStatement		3:40:75:75	4897578	1					
ANR	4897612	ExpressionStatement	str [ i ] = _toupper ( str [ i ] )	192:3:5503:5530	4897578	0	True				
ANR	4897613	AssignmentExpression	str [ i ] = _toupper ( str [ i ] )		4897578	0		=			
ANR	4897614	ArrayIndexing	str [ i ]		4897578	0					
ANR	4897615	Identifier	str		4897578	0					
ANR	4897616	Identifier	i		4897578	1					
ANR	4897617	CallExpression	_toupper ( str [ i ] )		4897578	1					
ANR	4897618	Callee	_toupper		4897578	0					
ANR	4897619	Identifier	_toupper		4897578	0					
ANR	4897620	ArgumentList	str [ i ]		4897578	1					
ANR	4897621	Argument	str [ i ]		4897578	0					
ANR	4897622	ArrayIndexing	str [ i ]		4897578	0					
ANR	4897623	Identifier	str		4897578	0					
ANR	4897624	Identifier	i		4897578	1					
ANR	4897625	ReturnType	void		4897578	1					
ANR	4897626	Identifier	upper_case		4897578	2					
ANR	4897627	ParameterList	std :: string & str		4897578	3					
ANR	4897628	Parameter	std :: string & str	188:17:5403:5418	4897578	0	True				
ANR	4897629	ParameterType	std :: string &		4897578	0					
ANR	4897630	Identifier	str		4897578	1					
ANR	4897631	CFGEntryNode	ENTRY		4897578		True				
ANR	4897632	CFGExitNode	EXIT		4897578		True				
ANR	4897633	Symbol	str		4897578						
ANR	4897634	Symbol	* i		4897578						
ANR	4897635	Symbol	i		4897578						
ANR	4897636	Symbol	_toupper		4897578						
ANR	4897637	Symbol	* str		4897578						
ANR	4897638	Function	lower_case	197:0:5542:5695							
ANR	4897639	FunctionDef	lower_case (std :: string & str)		4897638	0					
ANR	4897640	CompoundStatement		198:0:5578:5695	4897638	0					
ANR	4897641	ForStatement	for ( int i = 0 ; str [ i ] ; i ++ )		4897638	0					
ANR	4897642	ForInit	int i = 0 ;	199:7:5587:5596	4897638	0	True				
ANR	4897643	IdentifierDeclStatement	int i = 0 ;		4897638	0					
ANR	4897644	IdentifierDecl	i = 0		4897638	0					
ANR	4897645	IdentifierDeclType	int		4897638	0					
ANR	4897646	Identifier	i		4897638	1					
ANR	4897647	AssignmentExpression	i = 0		4897638	2		=			
ANR	4897648	Identifier	i		4897638	0					
ANR	4897649	PrimaryExpression	0		4897638	1					
ANR	4897650	Condition	str [ i ]	199:18:5598:5603	4897638	1	True				
ANR	4897651	ArrayIndexing	str [ i ]		4897638	0					
ANR	4897652	Identifier	str		4897638	0					
ANR	4897653	Identifier	i		4897638	1					
ANR	4897654	PostIncDecOperationExpression	i ++	199:26:5606:5608	4897638	2	True				
ANR	4897655	Identifier	i		4897638	0					
ANR	4897656	IncDec	++		4897638	1					
ANR	4897657	CompoundStatement		2:32:33:33	4897638	3					
ANR	4897658	IfStatement	if ( str [ i ] >= 'A' && str [ i ] <= 'Z' )		4897638	0					
ANR	4897659	Condition	str [ i ] >= 'A' && str [ i ] <= 'Z'	200:7:5621:5650	4897638	0	True				
ANR	4897660	AndExpression	str [ i ] >= 'A' && str [ i ] <= 'Z'		4897638	0		&&			
ANR	4897661	RelationalExpression	str [ i ] >= 'A'		4897638	0		>=			
ANR	4897662	ArrayIndexing	str [ i ]		4897638	0					
ANR	4897663	Identifier	str		4897638	0					
ANR	4897664	Identifier	i		4897638	1					
ANR	4897665	PrimaryExpression	'A'		4897638	1					
ANR	4897666	RelationalExpression	str [ i ] <= 'Z'		4897638	1		<=			
ANR	4897667	ArrayIndexing	str [ i ]		4897638	0					
ANR	4897668	Identifier	str		4897638	0					
ANR	4897669	Identifier	i		4897638	1					
ANR	4897670	PrimaryExpression	'Z'		4897638	1					
ANR	4897671	CompoundStatement		3:40:75:75	4897638	1					
ANR	4897672	ExpressionStatement	str [ i ] = _tolower ( str [ i ] )	201:3:5659:5686	4897638	0	True				
ANR	4897673	AssignmentExpression	str [ i ] = _tolower ( str [ i ] )		4897638	0		=			
ANR	4897674	ArrayIndexing	str [ i ]		4897638	0					
ANR	4897675	Identifier	str		4897638	0					
ANR	4897676	Identifier	i		4897638	1					
ANR	4897677	CallExpression	_tolower ( str [ i ] )		4897638	1					
ANR	4897678	Callee	_tolower		4897638	0					
ANR	4897679	Identifier	_tolower		4897638	0					
ANR	4897680	ArgumentList	str [ i ]		4897638	1					
ANR	4897681	Argument	str [ i ]		4897638	0					
ANR	4897682	ArrayIndexing	str [ i ]		4897638	0					
ANR	4897683	Identifier	str		4897638	0					
ANR	4897684	Identifier	i		4897638	1					
ANR	4897685	ReturnType	void		4897638	1					
ANR	4897686	Identifier	lower_case		4897638	2					
ANR	4897687	ParameterList	std :: string & str		4897638	3					
ANR	4897688	Parameter	std :: string & str	197:17:5559:5574	4897638	0	True				
ANR	4897689	ParameterType	std :: string &		4897638	0					
ANR	4897690	Identifier	str		4897638	1					
ANR	4897691	CFGEntryNode	ENTRY		4897638		True				
ANR	4897692	CFGExitNode	EXIT		4897638		True				
ANR	4897693	Symbol	str		4897638						
ANR	4897694	Symbol	* i		4897638						
ANR	4897695	Symbol	_tolower		4897638						
ANR	4897696	Symbol	i		4897638						
ANR	4897697	Symbol	* str		4897638						
ANR	4897698	DeclStmt									
ANR	4897699	Decl							char	char *	tokenBuf
ANR	4897700	DeclStmt									
ANR	4897701	Decl							char	char *	nextToken
ANR	4897702	Function	Tokenize	209:0:5760:5823							
ANR	4897703	FunctionDef	Tokenize (const MyString & str)		4897702	0					
ANR	4897704	CompoundStatement		210:0:5795:5823	4897702	0					
ANR	4897705	ExpressionStatement	Tokenize ( str . Value ( ) )	211:1:5798:5821	4897702	0	True				
ANR	4897706	CallExpression	Tokenize ( str . Value ( ) )		4897702	0					
ANR	4897707	Callee	Tokenize		4897702	0					
ANR	4897708	Identifier	Tokenize		4897702	0					
ANR	4897709	ArgumentList	str . Value ( )		4897702	1					
ANR	4897710	Argument	str . Value ( )		4897702	0					
ANR	4897711	CallExpression	str . Value ( )		4897702	0					
ANR	4897712	Callee	str . Value		4897702	0					
ANR	4897713	MemberAccess	str . Value		4897702	0					
ANR	4897714	Identifier	str		4897702	0					
ANR	4897715	Identifier	Value		4897702	1					
ANR	4897716	ArgumentList			4897702	1					
ANR	4897717	ReturnType	void		4897702	1					
ANR	4897718	Identifier	Tokenize		4897702	2					
ANR	4897719	ParameterList	const MyString & str		4897702	3					
ANR	4897720	Parameter	const MyString & str	209:14:5774:5792	4897702	0	True				
ANR	4897721	ParameterType	const MyString &		4897702	0					
ANR	4897722	Identifier	str		4897702	1					
ANR	4897723	CFGEntryNode	ENTRY		4897702		True				
ANR	4897724	CFGExitNode	EXIT		4897702		True				
ANR	4897725	Symbol	str		4897702						
ANR	4897726	Symbol	str . Value		4897702						
ANR	4897727	Function	Tokenize	214:0:5826:5892							
ANR	4897728	FunctionDef	Tokenize (const std :: string & str)		4897727	0					
ANR	4897729	CompoundStatement		215:0:5864:5892	4897727	0					
ANR	4897730	ExpressionStatement	Tokenize ( str . c_str ( ) )	216:1:5867:5890	4897727	0	True				
ANR	4897731	CallExpression	Tokenize ( str . c_str ( ) )		4897727	0					
ANR	4897732	Callee	Tokenize		4897727	0					
ANR	4897733	Identifier	Tokenize		4897727	0					
ANR	4897734	ArgumentList	str . c_str ( )		4897727	1					
ANR	4897735	Argument	str . c_str ( )		4897727	0					
ANR	4897736	CallExpression	str . c_str ( )		4897727	0					
ANR	4897737	Callee	str . c_str		4897727	0					
ANR	4897738	MemberAccess	str . c_str		4897727	0					
ANR	4897739	Identifier	str		4897727	0					
ANR	4897740	Identifier	c_str		4897727	1					
ANR	4897741	ArgumentList			4897727	1					
ANR	4897742	ReturnType	void		4897727	1					
ANR	4897743	Identifier	Tokenize		4897727	2					
ANR	4897744	ParameterList	const std :: string & str		4897727	3					
ANR	4897745	Parameter	const std :: string & str	214:14:5840:5861	4897727	0	True				
ANR	4897746	ParameterType	const std :: string &		4897727	0					
ANR	4897747	Identifier	str		4897727	1					
ANR	4897748	CFGEntryNode	ENTRY		4897727		True				
ANR	4897749	CFGExitNode	EXIT		4897727		True				
ANR	4897750	Symbol	str		4897727						
ANR	4897751	Symbol	str . c_str		4897727						
ANR	4897752	Function	Tokenize	219:0:5895:6092							
ANR	4897753	FunctionDef	Tokenize (const char * str)		4897752	0					
ANR	4897754	CompoundStatement		220:0:5926:6092	4897752	0					
ANR	4897755	ExpressionStatement	free ( tokenBuf )	221:1:5929:5945	4897752	0	True				
ANR	4897756	CallExpression	free ( tokenBuf )		4897752	0					
ANR	4897757	Callee	free		4897752	0					
ANR	4897758	Identifier	free		4897752	0					
ANR	4897759	ArgumentList	tokenBuf		4897752	1					
ANR	4897760	Argument	tokenBuf		4897752	0					
ANR	4897761	Identifier	tokenBuf		4897752	0					
ANR	4897762	ExpressionStatement	tokenBuf = NULL	222:1:5948:5963	4897752	1	True				
ANR	4897763	AssignmentExpression	tokenBuf = NULL		4897752	0		=			
ANR	4897764	Identifier	tokenBuf		4897752	0					
ANR	4897765	Identifier	NULL		4897752	1					
ANR	4897766	ExpressionStatement	nextToken = NULL	223:1:5966:5982	4897752	2	True				
ANR	4897767	AssignmentExpression	nextToken = NULL		4897752	0		=			
ANR	4897768	Identifier	nextToken		4897752	0					
ANR	4897769	Identifier	NULL		4897752	1					
ANR	4897770	IfStatement	if ( str )		4897752	3					
ANR	4897771	Condition	str	224:6:5990:5992	4897752	0	True				
ANR	4897772	Identifier	str		4897752	0					
ANR	4897773	CompoundStatement		5:12:69:69	4897752	1					
ANR	4897774	ExpressionStatement	tokenBuf = strdup ( str )	225:2:6000:6024	4897752	0	True				
ANR	4897775	AssignmentExpression	tokenBuf = strdup ( str )		4897752	0		=			
ANR	4897776	Identifier	tokenBuf		4897752	0					
ANR	4897777	CallExpression	strdup ( str )		4897752	1					
ANR	4897778	Callee	strdup		4897752	0					
ANR	4897779	Identifier	strdup		4897752	0					
ANR	4897780	ArgumentList	str		4897752	1					
ANR	4897781	Argument	str		4897752	0					
ANR	4897782	Identifier	str		4897752	0					
ANR	4897783	IfStatement	if ( strlen ( tokenBuf ) > 0 )		4897752	1					
ANR	4897784	Condition	strlen ( tokenBuf ) > 0	226:7:6033:6054	4897752	0	True				
ANR	4897785	RelationalExpression	strlen ( tokenBuf ) > 0		4897752	0		>			
ANR	4897786	CallExpression	strlen ( tokenBuf )		4897752	0					
ANR	4897787	Callee	strlen		4897752	0					
ANR	4897788	Identifier	strlen		4897752	0					
ANR	4897789	ArgumentList	tokenBuf		4897752	1					
ANR	4897790	Argument	tokenBuf		4897752	0					
ANR	4897791	Identifier	tokenBuf		4897752	0					
ANR	4897792	PrimaryExpression	0		4897752	1					
ANR	4897793	CompoundStatement		7:32:131:131	4897752	1					
ANR	4897794	ExpressionStatement	nextToken = tokenBuf	227:3:6063:6083	4897752	0	True				
ANR	4897795	AssignmentExpression	nextToken = tokenBuf		4897752	0		=			
ANR	4897796	Identifier	nextToken		4897752	0					
ANR	4897797	Identifier	tokenBuf		4897752	1					
ANR	4897798	ReturnType	void		4897752	1					
ANR	4897799	Identifier	Tokenize		4897752	2					
ANR	4897800	ParameterList	const char * str		4897752	3					
ANR	4897801	Parameter	const char * str	219:14:5909:5923	4897752	0	True				
ANR	4897802	ParameterType	const char *		4897752	0					
ANR	4897803	Identifier	str		4897752	1					
ANR	4897804	CFGEntryNode	ENTRY		4897752		True				
ANR	4897805	CFGExitNode	EXIT		4897752		True				
ANR	4897806	Symbol	str		4897752						
ANR	4897807	Symbol	strlen		4897752						
ANR	4897808	Symbol	NULL		4897752						
ANR	4897809	Symbol	nextToken		4897752						
ANR	4897810	Symbol	strdup		4897752						
ANR	4897811	Symbol	tokenBuf		4897752						
ANR	4897812	Function	GetNextToken	232:0:6095:6608							
ANR	4897813	FunctionDef	"GetNextToken (const char * delim , bool skipBlankTokens)"		4897812	0					
ANR	4897814	CompoundStatement		233:0:6161:6608	4897812	0					
ANR	4897815	IdentifierDeclStatement	const char * result = nextToken ;	234:1:6164:6194	4897812	0	True				
ANR	4897816	IdentifierDecl	* result = nextToken		4897812	0					
ANR	4897817	IdentifierDeclType	const char *		4897812	0					
ANR	4897818	Identifier	result		4897812	1					
ANR	4897819	AssignmentExpression	* result = nextToken		4897812	2		=			
ANR	4897820	Identifier	nextToken		4897812	0					
ANR	4897821	Identifier	nextToken		4897812	1					
ANR	4897822	IfStatement	if ( ! delim || strlen ( delim ) == 0 )		4897812	1					
ANR	4897823	Condition	! delim || strlen ( delim ) == 0	236:6:6203:6230	4897812	0	True				
ANR	4897824	OrExpression	! delim || strlen ( delim ) == 0		4897812	0		||			
ANR	4897825	UnaryOperationExpression	! delim		4897812	0					
ANR	4897826	UnaryOperator	!		4897812	0					
ANR	4897827	Identifier	delim		4897812	1					
ANR	4897828	EqualityExpression	strlen ( delim ) == 0		4897812	1		==			
ANR	4897829	CallExpression	strlen ( delim )		4897812	0					
ANR	4897830	Callee	strlen		4897812	0					
ANR	4897831	Identifier	strlen		4897812	0					
ANR	4897832	ArgumentList	delim		4897812	1					
ANR	4897833	Argument	delim		4897812	0					
ANR	4897834	Identifier	delim		4897812	0					
ANR	4897835	PrimaryExpression	0		4897812	1					
ANR	4897836	CompoundStatement		4:37:72:72	4897812	1					
ANR	4897837	ExpressionStatement	result = NULL	237:2:6238:6251	4897812	0	True				
ANR	4897838	AssignmentExpression	result = NULL		4897812	0		=			
ANR	4897839	Identifier	result		4897812	0					
ANR	4897840	Identifier	NULL		4897812	1					
ANR	4897841	IfStatement	if ( result != NULL )		4897812	2					
ANR	4897842	Condition	result != NULL	240:6:6263:6276	4897812	0	True				
ANR	4897843	EqualityExpression	result != NULL		4897812	0		!=			
ANR	4897844	Identifier	result		4897812	0					
ANR	4897845	Identifier	NULL		4897812	1					
ANR	4897846	CompoundStatement		8:23:118:118	4897812	1					
ANR	4897847	WhileStatement	"while ( * nextToken != '\\0' && index ( delim , * nextToken ) == NULL )"		4897812	0					
ANR	4897848	Condition	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"	241:10:6292:6345	4897812	0	True				
ANR	4897849	AndExpression	"* nextToken != '\\0' && index ( delim , * nextToken ) == NULL"		4897812	0		&&			
ANR	4897850	EqualityExpression	* nextToken != '\\0'		4897812	0		!=			
ANR	4897851	UnaryOperationExpression	* nextToken		4897812	0					
ANR	4897852	UnaryOperator	*		4897812	0					
ANR	4897853	Identifier	nextToken		4897812	1					
ANR	4897854	PrimaryExpression	'\\0'		4897812	1					
ANR	4897855	EqualityExpression	"index ( delim , * nextToken ) == NULL"		4897812	1		==			
ANR	4897856	CallExpression	"index ( delim , * nextToken )"		4897812	0					
ANR	4897857	Callee	index		4897812	0					
ANR	4897858	Identifier	index		4897812	0					
ANR	4897859	ArgumentList	delim		4897812	1					
ANR	4897860	Argument	delim		4897812	0					
ANR	4897861	Identifier	delim		4897812	0					
ANR	4897862	Argument	* nextToken		4897812	1					
ANR	4897863	UnaryOperationExpression	* nextToken		4897812	0					
ANR	4897864	UnaryOperator	*		4897812	0					
ANR	4897865	Identifier	nextToken		4897812	1					
ANR	4897866	Identifier	NULL		4897812	1					
ANR	4897867	CompoundStatement		9:67:187:187	4897812	1					
ANR	4897868	ExpressionStatement	nextToken ++	242:3:6354:6365	4897812	0	True				
ANR	4897869	PostIncDecOperationExpression	nextToken ++		4897812	0					
ANR	4897870	Identifier	nextToken		4897812	0					
ANR	4897871	IncDec	++		4897812	1					
ANR	4897872	IfStatement	if ( * nextToken != '\\0' )		4897812	1					
ANR	4897873	Condition	* nextToken != '\\0'	245:7:6379:6396	4897812	0	True				
ANR	4897874	EqualityExpression	* nextToken != '\\0'		4897812	0		!=			
ANR	4897875	UnaryOperationExpression	* nextToken		4897812	0					
ANR	4897876	UnaryOperator	*		4897812	0					
ANR	4897877	Identifier	nextToken		4897812	1					
ANR	4897878	PrimaryExpression	'\\0'		4897812	1					
ANR	4897879	CompoundStatement		13:28:238:238	4897812	1					
ANR	4897880	ExpressionStatement	* nextToken = '\\0'	246:3:6405:6422	4897812	0	True				
ANR	4897881	AssignmentExpression	* nextToken = '\\0'		4897812	0		=			
ANR	4897882	UnaryOperationExpression	* nextToken		4897812	0					
ANR	4897883	UnaryOperator	*		4897812	0					
ANR	4897884	Identifier	nextToken		4897812	1					
ANR	4897885	PrimaryExpression	'\\0'		4897812	1					
ANR	4897886	ExpressionStatement	nextToken ++	247:3:6427:6438	4897812	1	True				
ANR	4897887	PostIncDecOperationExpression	nextToken ++		4897812	0					
ANR	4897888	Identifier	nextToken		4897812	0					
ANR	4897889	IncDec	++		4897812	1					
ANR	4897890	ElseStatement	else		4897812	0					
ANR	4897891	CompoundStatement		16:9:287:287	4897812	0					
ANR	4897892	ExpressionStatement	nextToken = NULL	249:3:6454:6470	4897812	0	True				
ANR	4897893	AssignmentExpression	nextToken = NULL		4897812	0		=			
ANR	4897894	Identifier	nextToken		4897812	0					
ANR	4897895	Identifier	NULL		4897812	1					
ANR	4897896	IfStatement	if ( skipBlankTokens && result && strlen ( result ) == 0 )		4897812	3					
ANR	4897897	Condition	skipBlankTokens && result && strlen ( result ) == 0	253:6:6486:6533	4897812	0	True				
ANR	4897898	AndExpression	skipBlankTokens && result && strlen ( result ) == 0		4897812	0		&&			
ANR	4897899	Identifier	skipBlankTokens		4897812	0					
ANR	4897900	AndExpression	result && strlen ( result ) == 0		4897812	1		&&			
ANR	4897901	Identifier	result		4897812	0					
ANR	4897902	EqualityExpression	strlen ( result ) == 0		4897812	1		==			
ANR	4897903	CallExpression	strlen ( result )		4897812	0					
ANR	4897904	Callee	strlen		4897812	0					
ANR	4897905	Identifier	strlen		4897812	0					
ANR	4897906	ArgumentList	result		4897812	1					
ANR	4897907	Argument	result		4897812	0					
ANR	4897908	Identifier	result		4897812	0					
ANR	4897909	PrimaryExpression	0		4897812	1					
ANR	4897910	CompoundStatement		21:57:375:375	4897812	1					
ANR	4897911	ExpressionStatement	"result = GetNextToken ( delim , skipBlankTokens )"	254:2:6541:6586	4897812	0	True				
ANR	4897912	AssignmentExpression	"result = GetNextToken ( delim , skipBlankTokens )"		4897812	0		=			
ANR	4897913	Identifier	result		4897812	0					
ANR	4897914	CallExpression	"GetNextToken ( delim , skipBlankTokens )"		4897812	1					
ANR	4897915	Callee	GetNextToken		4897812	0					
ANR	4897916	Identifier	GetNextToken		4897812	0					
ANR	4897917	ArgumentList	delim		4897812	1					
ANR	4897918	Argument	delim		4897812	0					
ANR	4897919	Identifier	delim		4897812	0					
ANR	4897920	Argument	skipBlankTokens		4897812	1					
ANR	4897921	Identifier	skipBlankTokens		4897812	0					
ANR	4897922	ReturnStatement	return result ;	257:1:6593:6606	4897812	4	True				
ANR	4897923	Identifier	result		4897812	0					
ANR	4897924	ReturnType	const char *		4897812	1					
ANR	4897925	Identifier	GetNextToken		4897812	2					
ANR	4897926	ParameterList	"const char * delim , bool skipBlankTokens"		4897812	3					
ANR	4897927	Parameter	const char * delim	232:25:6120:6136	4897812	0	True				
ANR	4897928	ParameterType	const char *		4897812	0					
ANR	4897929	Identifier	delim		4897812	1					
ANR	4897930	Parameter	bool skipBlankTokens	232:44:6139:6158	4897812	1	True				
ANR	4897931	ParameterType	bool		4897812	0					
ANR	4897932	Identifier	skipBlankTokens		4897812	1					
ANR	4897933	CFGEntryNode	ENTRY		4897812		True				
ANR	4897934	CFGExitNode	EXIT		4897812		True				
ANR	4897935	Symbol	result		4897812						
ANR	4897936	Symbol	strlen		4897812						
ANR	4897937	Symbol	NULL		4897812						
ANR	4897938	Symbol	* nextToken		4897812						
ANR	4897939	Symbol	skipBlankTokens		4897812						
ANR	4897940	Symbol	nextToken		4897812						
ANR	4897941	Symbol	GetNextToken		4897812						
ANR	4897942	Symbol	index		4897812						
ANR	4897943	Symbol	delim		4897812						
ANR	4897944	Function	join	260:0:6611:6853							
ANR	4897945	FunctionDef	"join (std :: vector < std :: string > & v , char const * delim , std :: string & result)"		4897944	0					
ANR	4897946	CompoundStatement		261:0:6692:6853	4897944	0					
ANR	4897947	IdentifierDeclStatement	std :: vector < std :: string > :: iterator it ;	262:1:6695:6732	4897944	0	True				
ANR	4897948	IdentifierDecl	it		4897944	0					
ANR	4897949	IdentifierDeclType	std :: vector < std :: string > :: iterator		4897944	0					
ANR	4897950	Identifier	it		4897944	1					
ANR	4897951	ForStatement	for ( it = v . begin ( ) ; it != v . end ( ) ; it ++ )		4897944	1					
ANR	4897952	ForInit	it = v . begin ( ) ;	263:5:6739:6753	4897944	0	True				
ANR	4897953	AssignmentExpression	it = v . begin ( )		4897944	0		=			
ANR	4897954	Identifier	it		4897944	0					
ANR	4897955	CallExpression	v . begin ( )		4897944	1					
ANR	4897956	Callee	v . begin		4897944	0					
ANR	4897957	MemberAccess	v . begin		4897944	0					
ANR	4897958	Identifier	v		4897944	0					
ANR	4897959	Identifier	begin		4897944	1					
ANR	4897960	ArgumentList			4897944	1					
ANR	4897961	Condition	it != v . end ( )	264:2:6757:6769	4897944	1	True				
ANR	4897962	EqualityExpression	it != v . end ( )		4897944	0		!=			
ANR	4897963	Identifier	it		4897944	0					
ANR	4897964	CallExpression	v . end ( )		4897944	1					
ANR	4897965	Callee	v . end		4897944	0					
ANR	4897966	MemberAccess	v . end		4897944	0					
ANR	4897967	Identifier	v		4897944	0					
ANR	4897968	Identifier	end		4897944	1					
ANR	4897969	ArgumentList			4897944	1					
ANR	4897970	PostIncDecOperationExpression	it ++	265:2:6774:6777	4897944	2	True				
ANR	4897971	Identifier	it		4897944	0					
ANR	4897972	IncDec	++		4897944	1					
ANR	4897973	CompoundStatement		6:1:88:88	4897944	3					
ANR	4897974	IfStatement	if ( result . size ( ) )		4897944	0					
ANR	4897975	Condition	result . size ( )	267:6:6789:6801	4897944	0	True				
ANR	4897976	CallExpression	result . size ( )		4897944	0					
ANR	4897977	Callee	result . size		4897944	0					
ANR	4897978	MemberAccess	result . size		4897944	0					
ANR	4897979	Identifier	result		4897944	0					
ANR	4897980	Identifier	size		4897944	1					
ANR	4897981	ArgumentList			4897944	1					
ANR	4897982	CompoundStatement		7:22:112:112	4897944	1					
ANR	4897983	ExpressionStatement	result += delim	268:3:6810:6825	4897944	0	True				
ANR	4897984	AssignmentExpression	result += delim		4897944	0		+=			
ANR	4897985	Identifier	result		4897944	0					
ANR	4897986	Identifier	delim		4897944	1					
ANR	4897987	ExpressionStatement	result += ( * it )	270:2:6833:6848	4897944	1	True				
ANR	4897988	AssignmentExpression	result += ( * it )		4897944	0		+=			
ANR	4897989	Identifier	result		4897944	0					
ANR	4897990	UnaryOperationExpression	* it		4897944	1					
ANR	4897991	UnaryOperator	*		4897944	0					
ANR	4897992	Identifier	it		4897944	1					
ANR	4897993	ReturnType	void		4897944	1					
ANR	4897994	Identifier	join		4897944	2					
ANR	4897995	ParameterList	"std :: vector < std :: string > & v , char const * delim , std :: string & result"		4897944	3					
ANR	4897996	Parameter	std :: vector < std :: string > & v	260:10:6621:6649	4897944	0	True				
ANR	4897997	ParameterType	std :: vector < std :: string > &		4897944	0					
ANR	4897998	Identifier	v		4897944	1					
ANR	4897999	Parameter	char const * delim	260:41:6652:6668	4897944	1	True				
ANR	4898000	ParameterType	char const *		4897944	0					
ANR	4898001	Identifier	delim		4897944	1					
ANR	4898002	Parameter	std :: string & result	260:60:6671:6689	4897944	2	True				
ANR	4898003	ParameterType	std :: string &		4897944	0					
ANR	4898004	Identifier	result		4897944	1					
ANR	4898005	CFGEntryNode	ENTRY		4897944		True				
ANR	4898006	CFGExitNode	EXIT		4897944		True				
ANR	4898007	Symbol	result		4897944						
ANR	4898008	Symbol	* it		4897944						
ANR	4898009	Symbol	v . begin		4897944						
ANR	4898010	Symbol	result . size		4897944						
ANR	4898011	Symbol	v		4897944						
ANR	4898012	Symbol	it		4897944						
ANR	4898013	Symbol	v . end		4897944						
ANR	4898014	Symbol	delim		4897944						
