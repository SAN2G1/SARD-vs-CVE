command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2550197	File	data/converged/CVE-2011-4930_htcondor/src_classad_lexer.cpp								
ANR	2550198	Function	Lexer :: Lexer	32:0:986:1264							
ANR	2550199	FunctionDef	Lexer :: Lexer ()		2550198	0					
ANR	2550200	CompoundStatement		34:0:1003:1264	2550198	0					
ANR	2550201	ExpressionStatement	tokenType = LEX_END_OF_INPUT	36:1:1057:1085	2550198	0	True				
ANR	2550202	AssignmentExpression	tokenType = LEX_END_OF_INPUT		2550198	0		=			
ANR	2550203	Identifier	tokenType		2550198	0					
ANR	2550204	Identifier	LEX_END_OF_INPUT		2550198	1					
ANR	2550205	ExpressionStatement	lexBufferCount = 0	37:1:1088:1106	2550198	1	True				
ANR	2550206	AssignmentExpression	lexBufferCount = 0		2550198	0		=			
ANR	2550207	Identifier	lexBufferCount		2550198	0					
ANR	2550208	PrimaryExpression	0		2550198	1					
ANR	2550209	ExpressionStatement	savedChar = 0	38:1:1109:1122	2550198	2	True				
ANR	2550210	AssignmentExpression	savedChar = 0		2550198	0		=			
ANR	2550211	Identifier	savedChar		2550198	0					
ANR	2550212	PrimaryExpression	0		2550198	1					
ANR	2550213	ExpressionStatement	ch = 0	39:1:1125:1131	2550198	3	True				
ANR	2550214	AssignmentExpression	ch = 0		2550198	0		=			
ANR	2550215	Identifier	ch		2550198	0					
ANR	2550216	PrimaryExpression	0		2550198	1					
ANR	2550217	ExpressionStatement	inString = false	40:1:1134:1150	2550198	4	True				
ANR	2550218	AssignmentExpression	inString = false		2550198	0		=			
ANR	2550219	Identifier	inString		2550198	0					
ANR	2550220	Identifier	false		2550198	1					
ANR	2550221	ExpressionStatement	tokenConsumed = true	41:1:1153:1173	2550198	5	True				
ANR	2550222	AssignmentExpression	tokenConsumed = true		2550198	0		=			
ANR	2550223	Identifier	tokenConsumed		2550198	0					
ANR	2550224	Identifier	true		2550198	1					
ANR	2550225	ExpressionStatement	accumulating = false	42:1:1176:1196	2550198	6	True				
ANR	2550226	AssignmentExpression	accumulating = false		2550198	0		=			
ANR	2550227	Identifier	accumulating		2550198	0					
ANR	2550228	Identifier	false		2550198	1					
ANR	2550229	ExpressionStatement	initialized = false	43:4:1202:1221	2550198	7	True				
ANR	2550230	AssignmentExpression	initialized = false		2550198	0		=			
ANR	2550231	Identifier	initialized		2550198	0					
ANR	2550232	Identifier	false		2550198	1					
ANR	2550233	ExpressionStatement	debug = false	46:1:1240:1253	2550198	8	True				
ANR	2550234	AssignmentExpression	debug = false		2550198	0		=			
ANR	2550235	Identifier	debug		2550198	0					
ANR	2550236	Identifier	false		2550198	1					
ANR	2550237	ReturnStatement	return ;	47:1:1256:1262	2550198	9	True				
ANR	2550238	Identifier	Lexer :: Lexer		2550198	1					
ANR	2550239	ParameterList			2550198	2					
ANR	2550240	CFGEntryNode	ENTRY		2550198		True				
ANR	2550241	CFGExitNode	EXIT		2550198		True				
ANR	2550242	Symbol	tokenConsumed		2550198						
ANR	2550243	Symbol	debug		2550198						
ANR	2550244	Symbol	savedChar		2550198						
ANR	2550245	Symbol	ch		2550198						
ANR	2550246	Symbol	inString		2550198						
ANR	2550247	Symbol	false		2550198						
ANR	2550248	Symbol	true		2550198						
ANR	2550249	Symbol	initialized		2550198						
ANR	2550250	Symbol	LEX_END_OF_INPUT		2550198						
ANR	2550251	Symbol	tokenType		2550198						
ANR	2550252	Symbol	lexBufferCount		2550198						
ANR	2550253	Symbol	accumulating		2550198						
ANR	2550254	Function	Lexer :: ~Lexer	52:0:1276:1296							
ANR	2550255	FunctionDef	Lexer :: ~Lexer ()		2550254	0					
ANR	2550256	CompoundStatement		54:0:1294:1296	2550254	0					
ANR	2550257	Identifier	Lexer :: ~Lexer		2550254	1					
ANR	2550258	ParameterList			2550254	2					
ANR	2550259	CFGEntryNode	ENTRY		2550254		True				
ANR	2550260	CFGExitNode	EXIT		2550254		True				
ANR	2550261	Function	Lexer :: Initialize	60:0:1411:1686							
ANR	2550262	FunctionDef	Lexer :: Initialize (LexerSource * source)		2550261	0					
ANR	2550263	CompoundStatement		62:0:1456:1686	2550261	0					
ANR	2550264	ExpressionStatement	lexSource = source	63:1:1459:1477	2550261	0	True				
ANR	2550265	AssignmentExpression	lexSource = source		2550261	0		=			
ANR	2550266	Identifier	lexSource		2550261	0					
ANR	2550267	Identifier	source		2550261	1					
ANR	2550268	ExpressionStatement	ch = lexSource -> ReadCharacter ( )	64:1:1480:1511	2550261	1	True				
ANR	2550269	AssignmentExpression	ch = lexSource -> ReadCharacter ( )		2550261	0		=			
ANR	2550270	Identifier	ch		2550261	0					
ANR	2550271	CallExpression	lexSource -> ReadCharacter ( )		2550261	1					
ANR	2550272	Callee	lexSource -> ReadCharacter		2550261	0					
ANR	2550273	PtrMemberAccess	lexSource -> ReadCharacter		2550261	0					
ANR	2550274	Identifier	lexSource		2550261	0					
ANR	2550275	Identifier	ReadCharacter		2550261	1					
ANR	2550276	ArgumentList			2550261	1					
ANR	2550277	ExpressionStatement	lexBuffer = ch	67:1:1546:1560	2550261	2	True				
ANR	2550278	AssignmentExpression	lexBuffer = ch		2550261	0		=			
ANR	2550279	Identifier	lexBuffer		2550261	0					
ANR	2550280	Identifier	ch		2550261	1					
ANR	2550281	ExpressionStatement	lexBufferCount = 0	68:1:1563:1581	2550261	3	True				
ANR	2550282	AssignmentExpression	lexBufferCount = 0		2550261	0		=			
ANR	2550283	Identifier	lexBufferCount		2550261	0					
ANR	2550284	PrimaryExpression	0		2550261	1					
ANR	2550285	ExpressionStatement	inString = false	69:1:1584:1600	2550261	4	True				
ANR	2550286	AssignmentExpression	inString = false		2550261	0		=			
ANR	2550287	Identifier	inString		2550261	0					
ANR	2550288	Identifier	false		2550261	1					
ANR	2550289	ExpressionStatement	tokenConsumed = true	70:1:1603:1623	2550261	5	True				
ANR	2550290	AssignmentExpression	tokenConsumed = true		2550261	0		=			
ANR	2550291	Identifier	tokenConsumed		2550261	0					
ANR	2550292	Identifier	true		2550261	1					
ANR	2550293	ExpressionStatement	accumulating = false	71:1:1626:1646	2550261	6	True				
ANR	2550294	AssignmentExpression	accumulating = false		2550261	0		=			
ANR	2550295	Identifier	accumulating		2550261	0					
ANR	2550296	Identifier	false		2550261	1					
ANR	2550297	ExpressionStatement	initialized = true	72:4:1652:1670	2550261	7	True				
ANR	2550298	AssignmentExpression	initialized = true		2550261	0		=			
ANR	2550299	Identifier	initialized		2550261	0					
ANR	2550300	Identifier	true		2550261	1					
ANR	2550301	ReturnStatement	return true ;	73:1:1673:1684	2550261	8	True				
ANR	2550302	Identifier	true		2550261	0					
ANR	2550303	ReturnType	bool		2550261	1					
ANR	2550304	Identifier	Lexer :: Initialize		2550261	2					
ANR	2550305	ParameterList	LexerSource * source		2550261	3					
ANR	2550306	Parameter	LexerSource * source	61:11:1435:1453	2550261	0	True				
ANR	2550307	ParameterType	LexerSource *		2550261	0					
ANR	2550308	Identifier	source		2550261	1					
ANR	2550309	CFGEntryNode	ENTRY		2550261		True				
ANR	2550310	CFGExitNode	EXIT		2550261		True				
ANR	2550311	Symbol	tokenConsumed		2550261						
ANR	2550312	Symbol	ch		2550261						
ANR	2550313	Symbol	false		2550261						
ANR	2550314	Symbol	source		2550261						
ANR	2550315	Symbol	lexSource		2550261						
ANR	2550316	Symbol	* lexSource		2550261						
ANR	2550317	Symbol	lexSource -> ReadCharacter		2550261						
ANR	2550318	Symbol	inString		2550261						
ANR	2550319	Symbol	true		2550261						
ANR	2550320	Symbol	initialized		2550261						
ANR	2550321	Symbol	lexBufferCount		2550261						
ANR	2550322	Symbol	lexBuffer		2550261						
ANR	2550323	Symbol	accumulating		2550261						
ANR	2550324	Function	Lexer :: Reinitialize	77:0:1690:1907							
ANR	2550325	FunctionDef	Lexer :: Reinitialize ()		2550324	0					
ANR	2550326	CompoundStatement		79:0:1722:1907	2550324	0					
ANR	2550327	ExpressionStatement	ch = lexSource -> ReadCharacter ( )	80:1:1725:1756	2550324	0	True				
ANR	2550328	AssignmentExpression	ch = lexSource -> ReadCharacter ( )		2550324	0		=			
ANR	2550329	Identifier	ch		2550324	0					
ANR	2550330	CallExpression	lexSource -> ReadCharacter ( )		2550324	1					
ANR	2550331	Callee	lexSource -> ReadCharacter		2550324	0					
ANR	2550332	PtrMemberAccess	lexSource -> ReadCharacter		2550324	0					
ANR	2550333	Identifier	lexSource		2550324	0					
ANR	2550334	Identifier	ReadCharacter		2550324	1					
ANR	2550335	ArgumentList			2550324	1					
ANR	2550336	ExpressionStatement	lexBuffer = ch	82:1:1790:1804	2550324	1	True				
ANR	2550337	AssignmentExpression	lexBuffer = ch		2550324	0		=			
ANR	2550338	Identifier	lexBuffer		2550324	0					
ANR	2550339	Identifier	ch		2550324	1					
ANR	2550340	ExpressionStatement	lexBufferCount = 0	83:1:1807:1825	2550324	2	True				
ANR	2550341	AssignmentExpression	lexBufferCount = 0		2550324	0		=			
ANR	2550342	Identifier	lexBufferCount		2550324	0					
ANR	2550343	PrimaryExpression	0		2550324	1					
ANR	2550344	ExpressionStatement	inString = false	84:1:1828:1844	2550324	3	True				
ANR	2550345	AssignmentExpression	inString = false		2550324	0		=			
ANR	2550346	Identifier	inString		2550324	0					
ANR	2550347	Identifier	false		2550324	1					
ANR	2550348	ExpressionStatement	tokenConsumed = true	85:1:1847:1867	2550324	4	True				
ANR	2550349	AssignmentExpression	tokenConsumed = true		2550324	0		=			
ANR	2550350	Identifier	tokenConsumed		2550324	0					
ANR	2550351	Identifier	true		2550324	1					
ANR	2550352	ExpressionStatement	accumulating = false	86:1:1870:1890	2550324	5	True				
ANR	2550353	AssignmentExpression	accumulating = false		2550324	0		=			
ANR	2550354	Identifier	accumulating		2550324	0					
ANR	2550355	Identifier	false		2550324	1					
ANR	2550356	ReturnStatement	return true ;	88:1:1894:1905	2550324	6	True				
ANR	2550357	Identifier	true		2550324	0					
ANR	2550358	ReturnType	bool		2550324	1					
ANR	2550359	Identifier	Lexer :: Reinitialize		2550324	2					
ANR	2550360	ParameterList			2550324	3					
ANR	2550361	CFGEntryNode	ENTRY		2550324		True				
ANR	2550362	CFGExitNode	EXIT		2550324		True				
ANR	2550363	Symbol	tokenConsumed		2550324						
ANR	2550364	Symbol	ch		2550324						
ANR	2550365	Symbol	inString		2550324						
ANR	2550366	Symbol	false		2550324						
ANR	2550367	Symbol	true		2550324						
ANR	2550368	Symbol	lexSource		2550324						
ANR	2550369	Symbol	lexBufferCount		2550324						
ANR	2550370	Symbol	* lexSource		2550324						
ANR	2550371	Symbol	lexBuffer		2550324						
ANR	2550372	Symbol	lexSource -> ReadCharacter		2550324						
ANR	2550373	Symbol	accumulating		2550324						
ANR	2550374	Function	Lexer :: WasInitialized	91:0:1910:1970							
ANR	2550375	FunctionDef	Lexer :: WasInitialized ()		2550374	0					
ANR	2550376	CompoundStatement		93:0:1944:1970	2550374	0					
ANR	2550377	ReturnStatement	return initialized ;	94:4:1950:1968	2550374	0	True				
ANR	2550378	Identifier	initialized		2550374	0					
ANR	2550379	ReturnType	bool		2550374	1					
ANR	2550380	Identifier	Lexer :: WasInitialized		2550374	2					
ANR	2550381	ParameterList			2550374	3					
ANR	2550382	CFGEntryNode	ENTRY		2550374		True				
ANR	2550383	CFGExitNode	EXIT		2550374		True				
ANR	2550384	Symbol	initialized		2550374						
ANR	2550385	Function	Lexer :: FinishedParse	101:0:2210:2274							
ANR	2550386	FunctionDef	Lexer :: FinishedParse ()		2550385	0					
ANR	2550387	CompoundStatement		103:0:2240:2274	2550385	0					
ANR	2550388	ExpressionStatement	accumulating = false	104:1:2243:2263	2550385	0	True				
ANR	2550389	AssignmentExpression	accumulating = false		2550385	0		=			
ANR	2550390	Identifier	accumulating		2550385	0					
ANR	2550391	Identifier	false		2550385	1					
ANR	2550392	ReturnStatement	return ;	105:1:2266:2272	2550385	1	True				
ANR	2550393	ReturnType	void		2550385	1					
ANR	2550394	Identifier	Lexer :: FinishedParse		2550385	2					
ANR	2550395	ParameterList			2550385	3					
ANR	2550396	CFGEntryNode	ENTRY		2550385		True				
ANR	2550397	CFGExitNode	EXIT		2550385		True				
ANR	2550398	Symbol	false		2550385						
ANR	2550399	Symbol	accumulating		2550385						
ANR	2550400	Function	Lexer :: mark	110:0:2354:2450							
ANR	2550401	FunctionDef	Lexer :: mark ()		2550400	0					
ANR	2550402	CompoundStatement		112:0:2379:2450	2550400	0					
ANR	2550403	ExpressionStatement	lexBuffer = ch	113:1:2382:2396	2550400	0	True				
ANR	2550404	AssignmentExpression	lexBuffer = ch		2550400	0		=			
ANR	2550405	Identifier	lexBuffer		2550400	0					
ANR	2550406	Identifier	ch		2550400	1					
ANR	2550407	ExpressionStatement	lexBufferCount = 0	114:1:2399:2417	2550400	1	True				
ANR	2550408	AssignmentExpression	lexBufferCount = 0		2550400	0		=			
ANR	2550409	Identifier	lexBufferCount		2550400	0					
ANR	2550410	PrimaryExpression	0		2550400	1					
ANR	2550411	ExpressionStatement	accumulating = true	115:1:2420:2439	2550400	2	True				
ANR	2550412	AssignmentExpression	accumulating = true		2550400	0		=			
ANR	2550413	Identifier	accumulating		2550400	0					
ANR	2550414	Identifier	true		2550400	1					
ANR	2550415	ReturnStatement	return ;	116:1:2442:2448	2550400	3	True				
ANR	2550416	ReturnType	void		2550400	1					
ANR	2550417	Identifier	Lexer :: mark		2550400	2					
ANR	2550418	ParameterList			2550400	3					
ANR	2550419	CFGEntryNode	ENTRY		2550400		True				
ANR	2550420	CFGExitNode	EXIT		2550400		True				
ANR	2550421	Symbol	ch		2550400						
ANR	2550422	Symbol	true		2550400						
ANR	2550423	Symbol	lexBufferCount		2550400						
ANR	2550424	Symbol	lexBuffer		2550400						
ANR	2550425	Symbol	accumulating		2550400						
ANR	2550426	Function	Lexer :: cut	121:0:2523:2617							
ANR	2550427	FunctionDef	Lexer :: cut ()		2550426	0					
ANR	2550428	CompoundStatement		123:0:2548:2617	2550426	0					
ANR	2550429	ExpressionStatement	lexBuffer [ lexBufferCount ] = '\\0'	124:1:2551:2583	2550426	0	True				
ANR	2550430	AssignmentExpression	lexBuffer [ lexBufferCount ] = '\\0'		2550426	0		=			
ANR	2550431	ArrayIndexing	lexBuffer [ lexBufferCount ]		2550426	0					
ANR	2550432	Identifier	lexBuffer		2550426	0					
ANR	2550433	Identifier	lexBufferCount		2550426	1					
ANR	2550434	PrimaryExpression	'\\0'		2550426	1					
ANR	2550435	ExpressionStatement	accumulating = false	125:1:2586:2606	2550426	1	True				
ANR	2550436	AssignmentExpression	accumulating = false		2550426	0		=			
ANR	2550437	Identifier	accumulating		2550426	0					
ANR	2550438	Identifier	false		2550426	1					
ANR	2550439	ReturnStatement	return ;	126:1:2609:2615	2550426	2	True				
ANR	2550440	ReturnType	void		2550426	1					
ANR	2550441	Identifier	Lexer :: cut		2550426	2					
ANR	2550442	ParameterList			2550426	3					
ANR	2550443	CFGEntryNode	ENTRY		2550426		True				
ANR	2550444	CFGExitNode	EXIT		2550426		True				
ANR	2550445	Symbol	false		2550426						
ANR	2550446	Symbol	* lexBuffer		2550426						
ANR	2550447	Symbol	lexBufferCount		2550426						
ANR	2550448	Symbol	* lexBufferCount		2550426						
ANR	2550449	Symbol	lexBuffer		2550426						
ANR	2550450	Symbol	accumulating		2550426						
ANR	2550451	Function	Lexer :: wind	132:0:2774:2954							
ANR	2550452	FunctionDef	Lexer :: wind ()		2550451	0					
ANR	2550453	CompoundStatement		134:0:2799:2954	2550451	0					
ANR	2550454	IfStatement	if ( ch == - 1 )		2550451	0					
ANR	2550455	Condition	ch == - 1	135:4:2805:2812	2550451	0	True				
ANR	2550456	EqualityExpression	ch == - 1		2550451	0		==			
ANR	2550457	Identifier	ch		2550451	0					
ANR	2550458	UnaryOperationExpression	- 1		2550451	1					
ANR	2550459	UnaryOperator	-		2550451	0					
ANR	2550460	PrimaryExpression	1		2550451	1					
ANR	2550461	ReturnStatement	return ;	135:14:2815:2821	2550451	1	True				
ANR	2550462	ExpressionStatement	ch = lexSource -> ReadCharacter ( )	136:1:2824:2855	2550451	1	True				
ANR	2550463	AssignmentExpression	ch = lexSource -> ReadCharacter ( )		2550451	0		=			
ANR	2550464	Identifier	ch		2550451	0					
ANR	2550465	CallExpression	lexSource -> ReadCharacter ( )		2550451	1					
ANR	2550466	Callee	lexSource -> ReadCharacter		2550451	0					
ANR	2550467	PtrMemberAccess	lexSource -> ReadCharacter		2550451	0					
ANR	2550468	Identifier	lexSource		2550451	0					
ANR	2550469	Identifier	ReadCharacter		2550451	1					
ANR	2550470	ArgumentList			2550451	1					
ANR	2550471	ExpressionStatement	++ lexBufferCount	137:1:2858:2874	2550451	2	True				
ANR	2550472	UnaryExpression	++ lexBufferCount		2550451	0					
ANR	2550473	IncDec	++		2550451	0					
ANR	2550474	Identifier	lexBufferCount		2550451	1					
ANR	2550475	IfStatement	if ( ch == - 1 )		2550451	3					
ANR	2550476	Condition	ch == - 1	138:5:2881:2888	2550451	0	True				
ANR	2550477	EqualityExpression	ch == - 1		2550451	0		==			
ANR	2550478	Identifier	ch		2550451	0					
ANR	2550479	UnaryOperationExpression	- 1		2550451	1					
ANR	2550480	UnaryOperator	-		2550451	0					
ANR	2550481	PrimaryExpression	1		2550451	1					
ANR	2550482	ReturnStatement	return ;	138:16:2892:2898	2550451	1	True				
ANR	2550483	IfStatement	if ( accumulating )		2550451	4					
ANR	2550484	Condition	accumulating	139:5:2905:2916	2550451	0	True				
ANR	2550485	Identifier	accumulating		2550451	0					
ANR	2550486	CompoundStatement		6:20:120:120	2550451	1					
ANR	2550487	ExpressionStatement	lexBuffer += ch	140:2:2924:2939	2550451	0	True				
ANR	2550488	AssignmentExpression	lexBuffer += ch		2550451	0		+=			
ANR	2550489	Identifier	lexBuffer		2550451	0					
ANR	2550490	Identifier	ch		2550451	1					
ANR	2550491	ReturnStatement	return ;	142:1:2946:2952	2550451	5	True				
ANR	2550492	ReturnType	void		2550451	1					
ANR	2550493	Identifier	Lexer :: wind		2550451	2					
ANR	2550494	ParameterList			2550451	3					
ANR	2550495	CFGEntryNode	ENTRY		2550451		True				
ANR	2550496	CFGExitNode	EXIT		2550451		True				
ANR	2550497	Symbol	ch		2550451						
ANR	2550498	Symbol	lexSource		2550451						
ANR	2550499	Symbol	* lexSource		2550451						
ANR	2550500	Symbol	lexBuffer		2550451						
ANR	2550501	Symbol	lexSource -> ReadCharacter		2550451						
ANR	2550502	Symbol	accumulating		2550451						
ANR	2550503	Function	Lexer :: ConsumeToken	146:0:2961:3273							
ANR	2550504	FunctionDef	Lexer :: ConsumeToken (TokenValue * lvalp)		2550503	0					
ANR	2550505	CompoundStatement		148:0:3019:3273	2550503	0					
ANR	2550506	IfStatement	if ( lvalp )		2550503	0					
ANR	2550507	Condition	lvalp	149:5:3026:3030	2550503	0	True				
ANR	2550508	Identifier	lvalp		2550503	0					
ANR	2550509	ExpressionStatement	lvalp -> CopyFrom ( yylval )	149:12:3033:3058	2550503	1	True				
ANR	2550510	CallExpression	lvalp -> CopyFrom ( yylval )		2550503	0					
ANR	2550511	Callee	lvalp -> CopyFrom		2550503	0					
ANR	2550512	PtrMemberAccess	lvalp -> CopyFrom		2550503	0					
ANR	2550513	Identifier	lvalp		2550503	0					
ANR	2550514	Identifier	CopyFrom		2550503	1					
ANR	2550515	ArgumentList	yylval		2550503	1					
ANR	2550516	Argument	yylval		2550503	0					
ANR	2550517	Identifier	yylval		2550503	0					
ANR	2550518	IfStatement	if ( tokenConsumed )		2550503	1					
ANR	2550519	Condition	tokenConsumed	152:5:3126:3138	2550503	0	True				
ANR	2550520	Identifier	tokenConsumed		2550503	0					
ANR	2550521	ExpressionStatement	PeekToken ( lvalp )	152:20:3141:3158	2550503	1	True				
ANR	2550522	CallExpression	PeekToken ( lvalp )		2550503	0					
ANR	2550523	Callee	PeekToken		2550503	0					
ANR	2550524	Identifier	PeekToken		2550503	0					
ANR	2550525	ArgumentList	lvalp		2550503	1					
ANR	2550526	Argument	lvalp		2550503	0					
ANR	2550527	Identifier	lvalp		2550503	0					
ANR	2550528	IfStatement	if ( debug )		2550503	2					
ANR	2550529	Condition	debug	154:5:3166:3170	2550503	0	True				
ANR	2550530	Identifier	debug		2550503	0					
ANR	2550531	CompoundStatement		7:12:153:153	2550503	1					
ANR	2550532	ExpressionStatement	"printf ( ""Consume: %s\\n"" , strLexToken ( tokenType ) )"	155:2:3177:3225	2550503	0	True				
ANR	2550533	CallExpression	"printf ( ""Consume: %s\\n"" , strLexToken ( tokenType ) )"		2550503	0					
ANR	2550534	Callee	printf		2550503	0					
ANR	2550535	Identifier	printf		2550503	0					
ANR	2550536	ArgumentList	"""Consume: %s\\n"""		2550503	1					
ANR	2550537	Argument	"""Consume: %s\\n"""		2550503	0					
ANR	2550538	PrimaryExpression	"""Consume: %s\\n"""		2550503	0					
ANR	2550539	Argument	strLexToken ( tokenType )		2550503	1					
ANR	2550540	CallExpression	strLexToken ( tokenType )		2550503	0					
ANR	2550541	Callee	strLexToken		2550503	0					
ANR	2550542	Identifier	strLexToken		2550503	0					
ANR	2550543	ArgumentList	tokenType		2550503	1					
ANR	2550544	Argument	tokenType		2550503	0					
ANR	2550545	Identifier	tokenType		2550503	0					
ANR	2550546	ExpressionStatement	tokenConsumed = true	158:1:3232:3252	2550503	3	True				
ANR	2550547	AssignmentExpression	tokenConsumed = true		2550503	0		=			
ANR	2550548	Identifier	tokenConsumed		2550503	0					
ANR	2550549	Identifier	true		2550503	1					
ANR	2550550	ReturnStatement	return tokenType ;	159:1:3255:3271	2550503	4	True				
ANR	2550551	Identifier	tokenType		2550503	0					
ANR	2550552	ReturnType	Lexer :: TokenType		2550503	1					
ANR	2550553	Identifier	Lexer :: ConsumeToken		2550503	2					
ANR	2550554	ParameterList	TokenValue * lvalp		2550503	3					
ANR	2550555	Parameter	TokenValue * lvalp	147:14:3000:3016	2550503	0	True				
ANR	2550556	ParameterType	TokenValue *		2550503	0					
ANR	2550557	Identifier	lvalp		2550503	1					
ANR	2550558	CFGEntryNode	ENTRY		2550503		True				
ANR	2550559	CFGExitNode	EXIT		2550503		True				
ANR	2550560	Symbol	tokenConsumed		2550503						
ANR	2550561	Symbol	lvalp		2550503						
ANR	2550562	Symbol	yylval		2550503						
ANR	2550563	Symbol	debug		2550503						
ANR	2550564	Symbol	true		2550503						
ANR	2550565	Symbol	tokenType		2550503						
ANR	2550566	Symbol	strLexToken		2550503						
ANR	2550567	Function	Lexer :: PeekToken	164:0:3345:5599							
ANR	2550568	FunctionDef	Lexer :: PeekToken (TokenValue * lvalp)		2550567	0					
ANR	2550569	CompoundStatement		166:0:3400:5599	2550567	0					
ANR	2550570	IfStatement	if ( ! tokenConsumed )		2550567	0					
ANR	2550571	Condition	! tokenConsumed	167:5:3407:3420	2550567	0	True				
ANR	2550572	UnaryOperationExpression	! tokenConsumed		2550567	0					
ANR	2550573	UnaryOperator	!		2550567	0					
ANR	2550574	Identifier	tokenConsumed		2550567	1					
ANR	2550575	CompoundStatement		2:21:22:22	2550567	1					
ANR	2550576	IfStatement	if ( lvalp )		2550567	0					
ANR	2550577	Condition	lvalp	168:6:3431:3435	2550567	0	True				
ANR	2550578	Identifier	lvalp		2550567	0					
ANR	2550579	ExpressionStatement	lvalp -> CopyFrom ( yylval )	168:14:3439:3464	2550567	1	True				
ANR	2550580	CallExpression	lvalp -> CopyFrom ( yylval )		2550567	0					
ANR	2550581	Callee	lvalp -> CopyFrom		2550567	0					
ANR	2550582	PtrMemberAccess	lvalp -> CopyFrom		2550567	0					
ANR	2550583	Identifier	lvalp		2550567	0					
ANR	2550584	Identifier	CopyFrom		2550567	1					
ANR	2550585	ArgumentList	yylval		2550567	1					
ANR	2550586	Argument	yylval		2550567	0					
ANR	2550587	Identifier	yylval		2550567	0					
ANR	2550588	ReturnStatement	return tokenType ;	169:2:3468:3484	2550567	1	True				
ANR	2550589	Identifier	tokenType		2550567	0					
ANR	2550590	ExpressionStatement	tokenConsumed = false	173:1:3523:3544	2550567	1	True				
ANR	2550591	AssignmentExpression	tokenConsumed = false		2550567	0		=			
ANR	2550592	Identifier	tokenConsumed		2550567	0					
ANR	2550593	Identifier	false		2550567	1					
ANR	2550594	WhileStatement	while ( 1 )		2550567	2					
ANR	2550595	Condition	1	176:8:3580:3580	2550567	0	True				
ANR	2550596	PrimaryExpression	1		2550567	0					
ANR	2550597	CompoundStatement		11:12:183:183	2550567	1					
ANR	2550598	IfStatement	if ( isspace ( ch ) )		2550567	0					
ANR	2550599	Condition	isspace ( ch )	177:6:3592:3604	2550567	0	True				
ANR	2550600	CallExpression	isspace ( ch )		2550567	0					
ANR	2550601	Callee	isspace		2550567	0					
ANR	2550602	Identifier	isspace		2550567	0					
ANR	2550603	ArgumentList	ch		2550567	1					
ANR	2550604	Argument	ch		2550567	0					
ANR	2550605	Identifier	ch		2550567	0					
ANR	2550606	CompoundStatement		12:22:207:207	2550567	1					
ANR	2550607	ExpressionStatement	wind ( )	178:3:3613:3620	2550567	0	True				
ANR	2550608	CallExpression	wind ( )		2550567	0					
ANR	2550609	Callee	wind		2550567	0					
ANR	2550610	Identifier	wind		2550567	0					
ANR	2550611	ArgumentList			2550567	1					
ANR	2550612	ContinueStatement	continue ;	179:3:3625:3633	2550567	1	True				
ANR	2550613	ElseStatement	else		2550567	0					
ANR	2550614	IfStatement	if ( ch == '/' )		2550567	0					
ANR	2550615	Condition	ch == '/'	180:13:3648:3656	2550567	0	True				
ANR	2550616	EqualityExpression	ch == '/'		2550567	0		==			
ANR	2550617	Identifier	ch		2550567	0					
ANR	2550618	PrimaryExpression	'/'		2550567	1					
ANR	2550619	CompoundStatement		15:25:259:259	2550567	1					
ANR	2550620	ExpressionStatement	mark ( )	181:3:3665:3672	2550567	0	True				
ANR	2550621	CallExpression	mark ( )		2550567	0					
ANR	2550622	Callee	mark		2550567	0					
ANR	2550623	Identifier	mark		2550567	0					
ANR	2550624	ArgumentList			2550567	1					
ANR	2550625	ExpressionStatement	wind ( )	182:3:3677:3684	2550567	1	True				
ANR	2550626	CallExpression	wind ( )		2550567	0					
ANR	2550627	Callee	wind		2550567	0					
ANR	2550628	Identifier	wind		2550567	0					
ANR	2550629	ArgumentList			2550567	1					
ANR	2550630	IfStatement	if ( ch == '/' )		2550567	2					
ANR	2550631	Condition	ch == '/'	183:7:3693:3701	2550567	0	True				
ANR	2550632	EqualityExpression	ch == '/'		2550567	0		==			
ANR	2550633	Identifier	ch		2550567	0					
ANR	2550634	PrimaryExpression	'/'		2550567	1					
ANR	2550635	CompoundStatement		18:19:304:304	2550567	1					
ANR	2550636	WhileStatement	while ( ch > 0 && ch != '\\n' )		2550567	0					
ANR	2550637	Condition	ch > 0 && ch != '\\n'	185:11:3745:3764	2550567	0	True				
ANR	2550638	AndExpression	ch > 0 && ch != '\\n'		2550567	0		&&			
ANR	2550639	RelationalExpression	ch > 0		2550567	0		>			
ANR	2550640	Identifier	ch		2550567	0					
ANR	2550641	PrimaryExpression	0		2550567	1					
ANR	2550642	EqualityExpression	ch != '\\n'		2550567	1		!=			
ANR	2550643	Identifier	ch		2550567	0					
ANR	2550644	PrimaryExpression	'\\n'		2550567	1					
ANR	2550645	CompoundStatement		20:34:367:367	2550567	1					
ANR	2550646	ExpressionStatement	wind ( )	186:5:3775:3782	2550567	0	True				
ANR	2550647	CallExpression	wind ( )		2550567	0					
ANR	2550648	Callee	wind		2550567	0					
ANR	2550649	Identifier	wind		2550567	0					
ANR	2550650	ArgumentList			2550567	1					
ANR	2550651	ElseStatement	else		2550567	0					
ANR	2550652	IfStatement	if ( ch == '*' )		2550567	0					
ANR	2550653	Condition	ch == '*'	188:14:3804:3812	2550567	0	True				
ANR	2550654	EqualityExpression	ch == '*'		2550567	0		==			
ANR	2550655	Identifier	ch		2550567	0					
ANR	2550656	PrimaryExpression	'*'		2550567	1					
ANR	2550657	CompoundStatement		25:4:446:455	2550567	1					
ANR	2550658	IdentifierDeclStatement	int oldCh ;	190:4:3847:3856	2550567	0	True				
ANR	2550659	IdentifierDecl	oldCh		2550567	0					
ANR	2550660	IdentifierDeclType	int		2550567	0					
ANR	2550661	Identifier	oldCh		2550567	1					
ANR	2550662	ExpressionStatement	ch = '\\n'	191:4:3862:3871	2550567	1	True				
ANR	2550663	AssignmentExpression	ch = '\\n'		2550567	0		=			
ANR	2550664	Identifier	ch		2550567	0					
ANR	2550665	PrimaryExpression	'\\n'		2550567	1					
ANR	2550666	DoStatement	do		2550567	2					
ANR	2550667	CompoundStatement		27:7:479:479	2550567	0					
ANR	2550668	ExpressionStatement	oldCh = ch	193:5:3887:3897	2550567	0	True				
ANR	2550669	AssignmentExpression	oldCh = ch		2550567	0		=			
ANR	2550670	Identifier	oldCh		2550567	0					
ANR	2550671	Identifier	ch		2550567	1					
ANR	2550672	ExpressionStatement	wind ( )	194:5:3904:3911	2550567	1	True				
ANR	2550673	CallExpression	wind ( )		2550567	0					
ANR	2550674	Callee	wind		2550567	0					
ANR	2550675	Identifier	wind		2550567	0					
ANR	2550676	ArgumentList			2550567	1					
ANR	2550677	Condition	oldCh != '*' || ch != '/'	195:13:3926:3950	2550567	1	True				
ANR	2550678	OrExpression	oldCh != '*' || ch != '/'		2550567	0		||			
ANR	2550679	EqualityExpression	oldCh != '*'		2550567	0		!=			
ANR	2550680	Identifier	oldCh		2550567	0					
ANR	2550681	PrimaryExpression	'*'		2550567	1					
ANR	2550682	EqualityExpression	ch != '/'		2550567	1		!=			
ANR	2550683	Identifier	ch		2550567	0					
ANR	2550684	PrimaryExpression	'/'		2550567	1					
ANR	2550685	ExpressionStatement	wind ( )	196:4:3959:3966	2550567	3	True				
ANR	2550686	CallExpression	wind ( )		2550567	0					
ANR	2550687	Callee	wind		2550567	0					
ANR	2550688	Identifier	wind		2550567	0					
ANR	2550689	ArgumentList			2550567	1					
ANR	2550690	ElseStatement	else		2550567	0					
ANR	2550691	CompoundStatement		32:10:577:577	2550567	0					
ANR	2550692	ExpressionStatement	cut ( )	199:4:4016:4022	2550567	0	True				
ANR	2550693	CallExpression	cut ( )		2550567	0					
ANR	2550694	Callee	cut		2550567	0					
ANR	2550695	Identifier	cut		2550567	0					
ANR	2550696	ArgumentList			2550567	1					
ANR	2550697	ExpressionStatement	tokenType = LEX_DIVIDE	200:4:4028:4050	2550567	1	True				
ANR	2550698	AssignmentExpression	tokenType = LEX_DIVIDE		2550567	0		=			
ANR	2550699	Identifier	tokenType		2550567	0					
ANR	2550700	Identifier	LEX_DIVIDE		2550567	1					
ANR	2550701	ExpressionStatement	yylval . SetTokenType ( tokenType )	201:4:4056:4088	2550567	2	True				
ANR	2550702	CallExpression	yylval . SetTokenType ( tokenType )		2550567	0					
ANR	2550703	Callee	yylval . SetTokenType		2550567	0					
ANR	2550704	MemberAccess	yylval . SetTokenType		2550567	0					
ANR	2550705	Identifier	yylval		2550567	0					
ANR	2550706	Identifier	SetTokenType		2550567	1					
ANR	2550707	ArgumentList	tokenType		2550567	1					
ANR	2550708	Argument	tokenType		2550567	0					
ANR	2550709	Identifier	tokenType		2550567	0					
ANR	2550710	ReturnStatement	return ( tokenType ) ;	202:4:4094:4113	2550567	3	True				
ANR	2550711	Identifier	tokenType		2550567	0					
ANR	2550712	ElseStatement	else		2550567	0					
ANR	2550713	CompoundStatement		39:9:728:728	2550567	0					
ANR	2550714	BreakStatement	break ;	205:3:4134:4139	2550567	0	True				
ANR	2550715	IfStatement	if ( ch == 0 || ch == EOF )		2550567	3					
ANR	2550716	Condition	ch == 0 || ch == EOF	210:5:4222:4241	2550567	0	True				
ANR	2550717	OrExpression	ch == 0 || ch == EOF		2550567	0		||			
ANR	2550718	EqualityExpression	ch == 0		2550567	0		==			
ANR	2550719	Identifier	ch		2550567	0					
ANR	2550720	PrimaryExpression	0		2550567	1					
ANR	2550721	EqualityExpression	ch == EOF		2550567	1		==			
ANR	2550722	Identifier	ch		2550567	0					
ANR	2550723	Identifier	EOF		2550567	1					
ANR	2550724	CompoundStatement		45:27:843:843	2550567	1					
ANR	2550725	ExpressionStatement	tokenType = LEX_END_OF_INPUT	211:2:4248:4276	2550567	0	True				
ANR	2550726	AssignmentExpression	tokenType = LEX_END_OF_INPUT		2550567	0		=			
ANR	2550727	Identifier	tokenType		2550567	0					
ANR	2550728	Identifier	LEX_END_OF_INPUT		2550567	1					
ANR	2550729	ExpressionStatement	yylval . SetTokenType ( tokenType )	212:2:4280:4312	2550567	1	True				
ANR	2550730	CallExpression	yylval . SetTokenType ( tokenType )		2550567	0					
ANR	2550731	Callee	yylval . SetTokenType		2550567	0					
ANR	2550732	MemberAccess	yylval . SetTokenType		2550567	0					
ANR	2550733	Identifier	yylval		2550567	0					
ANR	2550734	Identifier	SetTokenType		2550567	1					
ANR	2550735	ArgumentList	tokenType		2550567	1					
ANR	2550736	Argument	tokenType		2550567	0					
ANR	2550737	Identifier	tokenType		2550567	0					
ANR	2550738	ReturnStatement	return tokenType ;	213:2:4316:4332	2550567	2	True				
ANR	2550739	Identifier	tokenType		2550567	0					
ANR	2550740	IfStatement	if ( ch == '-' )		2550567	4					
ANR	2550741	Condition	ch == '-'	217:6:4387:4395	2550567	0	True				
ANR	2550742	EqualityExpression	ch == '-'		2550567	0		==			
ANR	2550743	Identifier	ch		2550567	0					
ANR	2550744	PrimaryExpression	'-'		2550567	1					
ANR	2550745	CompoundStatement		52:18:998:998	2550567	1					
ANR	2550746	SwitchStatement	switch ( tokenType )		2550567	0					
ANR	2550747	Condition	tokenType	221:11:4598:4606	2550567	0	True				
ANR	2550748	Identifier	tokenType		2550567	0					
ANR	2550749	CompoundStatement		56:23:1209:1209	2550567	1					
ANR	2550750	Label	case LEX_INTEGER_VALUE :	222:2:4614:4636	2550567	0	True				
ANR	2550751	Identifier	LEX_INTEGER_VALUE		2550567	0					
ANR	2550752	Label	case LEX_REAL_VALUE :	223:2:4640:4659	2550567	1	True				
ANR	2550753	Identifier	LEX_REAL_VALUE		2550567	0					
ANR	2550754	Label	case LEX_BOOLEAN_VALUE :	224:2:4663:4685	2550567	2	True				
ANR	2550755	Identifier	LEX_BOOLEAN_VALUE		2550567	0					
ANR	2550756	Label	case LEX_STRING_VALUE :	225:2:4689:4710	2550567	3	True				
ANR	2550757	Identifier	LEX_STRING_VALUE		2550567	0					
ANR	2550758	Label	case LEX_UNDEFINED_VALUE :	226:2:4714:4738	2550567	4	True				
ANR	2550759	Identifier	LEX_UNDEFINED_VALUE		2550567	0					
ANR	2550760	Label	case LEX_ERROR_VALUE :	227:2:4742:4762	2550567	5	True				
ANR	2550761	Identifier	LEX_ERROR_VALUE		2550567	0					
ANR	2550762	Label	case LEX_IDENTIFIER :	228:2:4766:4785	2550567	6	True				
ANR	2550763	Identifier	LEX_IDENTIFIER		2550567	0					
ANR	2550764	Label	case LEX_SELECTION :	229:2:4789:4807	2550567	7	True				
ANR	2550765	Identifier	LEX_SELECTION		2550567	0					
ANR	2550766	Label	case LEX_CLOSE_BOX :	230:2:4811:4829	2550567	8	True				
ANR	2550767	Identifier	LEX_CLOSE_BOX		2550567	0					
ANR	2550768	Label	case LEX_CLOSE_PAREN :	231:2:4833:4853	2550567	9	True				
ANR	2550769	Identifier	LEX_CLOSE_PAREN		2550567	0					
ANR	2550770	Label	case LEX_CLOSE_BRACE :	232:2:4857:4877	2550567	10	True				
ANR	2550771	Identifier	LEX_CLOSE_BRACE		2550567	0					
ANR	2550772	Label	case LEX_BACKSLASH :	233:2:4881:4899	2550567	11	True				
ANR	2550773	Identifier	LEX_BACKSLASH		2550567	0					
ANR	2550774	Label	case LEX_ABSOLUTE_TIME_VALUE :	234:2:4903:4931	2550567	12	True				
ANR	2550775	Identifier	LEX_ABSOLUTE_TIME_VALUE		2550567	0					
ANR	2550776	Label	case LEX_RELATIVE_TIME_VALUE :	235:2:4935:4963	2550567	13	True				
ANR	2550777	Identifier	LEX_RELATIVE_TIME_VALUE		2550567	0					
ANR	2550778	ExpressionStatement	tokenizePunctOperator ( )	236:3:4968:4991	2550567	14	True				
ANR	2550779	CallExpression	tokenizePunctOperator ( )		2550567	0					
ANR	2550780	Callee	tokenizePunctOperator		2550567	0					
ANR	2550781	Identifier	tokenizePunctOperator		2550567	0					
ANR	2550782	ArgumentList			2550567	1					
ANR	2550783	BreakStatement	break ;	237:3:4996:5001	2550567	15	True				
ANR	2550784	Label	default :	238:2:5005:5012	2550567	16	True				
ANR	2550785	Identifier	default		2550567	0					
ANR	2550786	ExpressionStatement	tokenizeNumber ( )	239:3:5017:5033	2550567	17	True				
ANR	2550787	CallExpression	tokenizeNumber ( )		2550567	0					
ANR	2550788	Callee	tokenizeNumber		2550567	0					
ANR	2550789	Identifier	tokenizeNumber		2550567	0					
ANR	2550790	ArgumentList			2550567	1					
ANR	2550791	BreakStatement	break ;	240:3:5038:5043	2550567	18	True				
ANR	2550792	ElseStatement	else		2550567	0					
ANR	2550793	IfStatement	if ( isdigit ( ch ) || ch == '.' )		2550567	0					
ANR	2550794	Condition	isdigit ( ch ) || ch == '.'	242:12:5061:5086	2550567	0	True				
ANR	2550795	OrExpression	isdigit ( ch ) || ch == '.'		2550567	0		||			
ANR	2550796	CallExpression	isdigit ( ch )		2550567	0					
ANR	2550797	Callee	isdigit		2550567	0					
ANR	2550798	Identifier	isdigit		2550567	0					
ANR	2550799	ArgumentList	ch		2550567	1					
ANR	2550800	Argument	ch		2550567	0					
ANR	2550801	Identifier	ch		2550567	0					
ANR	2550802	EqualityExpression	ch == '.'		2550567	1		==			
ANR	2550803	Identifier	ch		2550567	0					
ANR	2550804	PrimaryExpression	'.'		2550567	1					
ANR	2550805	CompoundStatement		77:41:1689:1689	2550567	1					
ANR	2550806	ExpressionStatement	tokenizeNumber ( )	244:2:5158:5174	2550567	0	True				
ANR	2550807	CallExpression	tokenizeNumber ( )		2550567	0					
ANR	2550808	Callee	tokenizeNumber		2550567	0					
ANR	2550809	Identifier	tokenizeNumber		2550567	0					
ANR	2550810	ArgumentList			2550567	1					
ANR	2550811	ElseStatement	else		2550567	0					
ANR	2550812	IfStatement	if ( isalpha ( ch ) || ch == '_' )		2550567	0					
ANR	2550813	Condition	isalpha ( ch ) || ch == '_'	245:12:5189:5213	2550567	0	True				
ANR	2550814	OrExpression	isalpha ( ch ) || ch == '_'		2550567	0		||			
ANR	2550815	CallExpression	isalpha ( ch )		2550567	0					
ANR	2550816	Callee	isalpha		2550567	0					
ANR	2550817	Identifier	isalpha		2550567	0					
ANR	2550818	ArgumentList	ch		2550567	1					
ANR	2550819	Argument	ch		2550567	0					
ANR	2550820	Identifier	ch		2550567	0					
ANR	2550821	EqualityExpression	ch == '_'		2550567	1		==			
ANR	2550822	Identifier	ch		2550567	0					
ANR	2550823	PrimaryExpression	'_'		2550567	1					
ANR	2550824	CompoundStatement		80:39:1815:1815	2550567	1					
ANR	2550825	ExpressionStatement	tokenizeAlphaHead ( )	246:2:5220:5240	2550567	0	True				
ANR	2550826	CallExpression	tokenizeAlphaHead ( )		2550567	0					
ANR	2550827	Callee	tokenizeAlphaHead		2550567	0					
ANR	2550828	Identifier	tokenizeAlphaHead		2550567	0					
ANR	2550829	ArgumentList			2550567	1					
ANR	2550830	ElseStatement	else		2550567	0					
ANR	2550831	IfStatement	"if ( ch == '\\""' )"		2550567	0					
ANR	2550832	Condition	"ch == '\\""'"	247:12:5254:5263	2550567	0	True				
ANR	2550833	EqualityExpression	"ch == '\\""'"		2550567	0		==			
ANR	2550834	Identifier	ch		2550567	0					
ANR	2550835	PrimaryExpression	"'\\""'"		2550567	1					
ANR	2550836	CompoundStatement		82:24:1865:1865	2550567	1					
ANR	2550837	ExpressionStatement	"tokenizeString ( '\\""' )"	248:2:5270:5290	2550567	0	True				
ANR	2550838	CallExpression	"tokenizeString ( '\\""' )"		2550567	0					
ANR	2550839	Callee	tokenizeString		2550567	0					
ANR	2550840	Identifier	tokenizeString		2550567	0					
ANR	2550841	ArgumentList	"'\\""'"		2550567	1					
ANR	2550842	Argument	"'\\""'"		2550567	0					
ANR	2550843	PrimaryExpression	"'\\""'"		2550567	0					
ANR	2550844	ElseStatement	else		2550567	0					
ANR	2550845	IfStatement	if ( ch == '\\'' )		2550567	0					
ANR	2550846	Condition	ch == '\\''	249:12:5328:5337	2550567	0	True				
ANR	2550847	EqualityExpression	ch == '\\''		2550567	0		==			
ANR	2550848	Identifier	ch		2550567	0					
ANR	2550849	PrimaryExpression	'\\''		2550567	1					
ANR	2550850	CompoundStatement		84:25:1940:1940	2550567	1					
ANR	2550851	ExpressionStatement	tokenizeString ( '\\'' )	250:2:5345:5365	2550567	0	True				
ANR	2550852	CallExpression	tokenizeString ( '\\'' )		2550567	0					
ANR	2550853	Callee	tokenizeString		2550567	0					
ANR	2550854	Identifier	tokenizeString		2550567	0					
ANR	2550855	ArgumentList	'\\''		2550567	1					
ANR	2550856	Argument	'\\''		2550567	0					
ANR	2550857	PrimaryExpression	'\\''		2550567	0					
ANR	2550858	ElseStatement	else		2550567	0					
ANR	2550859	CompoundStatement		88:6:2003:2003	2550567	0					
ANR	2550860	ExpressionStatement	tokenizePunctOperator ( )	254:2:5408:5432	2550567	0	True				
ANR	2550861	CallExpression	tokenizePunctOperator ( )		2550567	0					
ANR	2550862	Callee	tokenizePunctOperator		2550567	0					
ANR	2550863	Identifier	tokenizePunctOperator		2550567	0					
ANR	2550864	ArgumentList			2550567	1					
ANR	2550865	IfStatement	if ( debug )		2550567	5					
ANR	2550866	Condition	debug	257:5:5443:5447	2550567	0	True				
ANR	2550867	Identifier	debug		2550567	0					
ANR	2550868	CompoundStatement		92:12:2049:2049	2550567	1					
ANR	2550869	ExpressionStatement	"printf ( ""Peek: %s\\n"" , strLexToken ( tokenType ) )"	258:2:5454:5499	2550567	0	True				
ANR	2550870	CallExpression	"printf ( ""Peek: %s\\n"" , strLexToken ( tokenType ) )"		2550567	0					
ANR	2550871	Callee	printf		2550567	0					
ANR	2550872	Identifier	printf		2550567	0					
ANR	2550873	ArgumentList	"""Peek: %s\\n"""		2550567	1					
ANR	2550874	Argument	"""Peek: %s\\n"""		2550567	0					
ANR	2550875	PrimaryExpression	"""Peek: %s\\n"""		2550567	0					
ANR	2550876	Argument	strLexToken ( tokenType )		2550567	1					
ANR	2550877	CallExpression	strLexToken ( tokenType )		2550567	0					
ANR	2550878	Callee	strLexToken		2550567	0					
ANR	2550879	Identifier	strLexToken		2550567	0					
ANR	2550880	ArgumentList	tokenType		2550567	1					
ANR	2550881	Argument	tokenType		2550567	0					
ANR	2550882	Identifier	tokenType		2550567	0					
ANR	2550883	IfStatement	if ( lvalp )		2550567	6					
ANR	2550884	Condition	lvalp	261:5:5510:5514	2550567	0	True				
ANR	2550885	Identifier	lvalp		2550567	0					
ANR	2550886	ExpressionStatement	lvalp -> CopyFrom ( yylval )	261:12:5517:5542	2550567	1	True				
ANR	2550887	CallExpression	lvalp -> CopyFrom ( yylval )		2550567	0					
ANR	2550888	Callee	lvalp -> CopyFrom		2550567	0					
ANR	2550889	PtrMemberAccess	lvalp -> CopyFrom		2550567	0					
ANR	2550890	Identifier	lvalp		2550567	0					
ANR	2550891	Identifier	CopyFrom		2550567	1					
ANR	2550892	ArgumentList	yylval		2550567	1					
ANR	2550893	Argument	yylval		2550567	0					
ANR	2550894	Identifier	yylval		2550567	0					
ANR	2550895	ExpressionStatement	yylval . SetTokenType ( tokenType )	263:1:5546:5578	2550567	7	True				
ANR	2550896	CallExpression	yylval . SetTokenType ( tokenType )		2550567	0					
ANR	2550897	Callee	yylval . SetTokenType		2550567	0					
ANR	2550898	MemberAccess	yylval . SetTokenType		2550567	0					
ANR	2550899	Identifier	yylval		2550567	0					
ANR	2550900	Identifier	SetTokenType		2550567	1					
ANR	2550901	ArgumentList	tokenType		2550567	1					
ANR	2550902	Argument	tokenType		2550567	0					
ANR	2550903	Identifier	tokenType		2550567	0					
ANR	2550904	ReturnStatement	return tokenType ;	264:1:5581:5597	2550567	8	True				
ANR	2550905	Identifier	tokenType		2550567	0					
ANR	2550906	ReturnType	Lexer :: TokenType		2550567	1					
ANR	2550907	Identifier	Lexer :: PeekToken		2550567	2					
ANR	2550908	ParameterList	TokenValue * lvalp		2550567	3					
ANR	2550909	Parameter	TokenValue * lvalp	165:11:3381:3397	2550567	0	True				
ANR	2550910	ParameterType	TokenValue *		2550567	0					
ANR	2550911	Identifier	lvalp		2550567	1					
ANR	2550912	CFGEntryNode	ENTRY		2550567		True				
ANR	2550913	CFGExitNode	EXIT		2550567		True				
ANR	2550914	Symbol	tokenConsumed		2550567						
ANR	2550915	Symbol	isalpha		2550567						
ANR	2550916	Symbol	oldCh		2550567						
ANR	2550917	Symbol	yylval		2550567						
ANR	2550918	Symbol	debug		2550567						
ANR	2550919	Symbol	ch		2550567						
ANR	2550920	Symbol	false		2550567						
ANR	2550921	Symbol	isspace		2550567						
ANR	2550922	Symbol	strLexToken		2550567						
ANR	2550923	Symbol	lvalp		2550567						
ANR	2550924	Symbol	LEX_DIVIDE		2550567						
ANR	2550925	Symbol	LEX_END_OF_INPUT		2550567						
ANR	2550926	Symbol	tokenType		2550567						
ANR	2550927	Symbol	EOF		2550567						
ANR	2550928	Symbol	isdigit		2550567						
ANR	2550929	Function	Lexer :: tokenizeNumber	271:0:5753:10022							
ANR	2550930	FunctionDef	Lexer :: tokenizeNumber ()		2550929	0					
ANR	2550931	CompoundStatement		273:0:5787:10022	2550929	0					
ANR	2550932	ClassDefStatement	"enum { NONE , INTEGER , REAL }"	274:1:5790:5817	2550929	0	True				
ANR	2550933	ExpressionStatement		274:29:5818:5818	2550929	1	True				
ANR	2550934	IdentifierDeclStatement	int numberType = NONE ;	275:1:5821:5843	2550929	2	True				
ANR	2550935	IdentifierDecl	numberType = NONE		2550929	0					
ANR	2550936	IdentifierDeclType	int		2550929	0					
ANR	2550937	Identifier	numberType		2550929	1					
ANR	2550938	AssignmentExpression	numberType = NONE		2550929	2		=			
ANR	2550939	Identifier	NONE		2550929	0					
ANR	2550940	Identifier	NONE		2550929	1					
ANR	2550941	IdentifierDeclStatement	Value :: NumberFactor f ;	276:1:5846:5867	2550929	3	True				
ANR	2550942	IdentifierDecl	f		2550929	0					
ANR	2550943	IdentifierDeclType	Value :: NumberFactor		2550929	0					
ANR	2550944	Identifier	f		2550929	1					
ANR	2550945	IdentifierDeclStatement	int integer = 0 ;	277:1:5870:5884	2550929	4	True				
ANR	2550946	IdentifierDecl	integer = 0		2550929	0					
ANR	2550947	IdentifierDeclType	int		2550929	0					
ANR	2550948	Identifier	integer		2550929	1					
ANR	2550949	AssignmentExpression	integer = 0		2550929	2		=			
ANR	2550950	Identifier	integer		2550929	0					
ANR	2550951	PrimaryExpression	0		2550929	1					
ANR	2550952	IdentifierDeclStatement	double real = 0 ;	278:1:5887:5900	2550929	5	True				
ANR	2550953	IdentifierDecl	real = 0		2550929	0					
ANR	2550954	IdentifierDeclType	double		2550929	0					
ANR	2550955	Identifier	real		2550929	1					
ANR	2550956	AssignmentExpression	real = 0		2550929	2		=			
ANR	2550957	Identifier	real		2550929	0					
ANR	2550958	PrimaryExpression	0		2550929	1					
ANR	2550959	IdentifierDeclStatement	int och ;	279:1:5903:5911	2550929	6	True				
ANR	2550960	IdentifierDecl	och		2550929	0					
ANR	2550961	IdentifierDeclType	int		2550929	0					
ANR	2550962	Identifier	och		2550929	1					
ANR	2550963	ExpressionStatement	och = ch	281:1:5915:5923	2550929	7	True				
ANR	2550964	AssignmentExpression	och = ch		2550929	0		=			
ANR	2550965	Identifier	och		2550929	0					
ANR	2550966	Identifier	ch		2550929	1					
ANR	2550967	ExpressionStatement	mark ( )	282:1:5926:5933	2550929	8	True				
ANR	2550968	CallExpression	mark ( )		2550929	0					
ANR	2550969	Callee	mark		2550929	0					
ANR	2550970	Identifier	mark		2550929	0					
ANR	2550971	ArgumentList			2550929	1					
ANR	2550972	ExpressionStatement	wind ( )	283:1:5936:5943	2550929	9	True				
ANR	2550973	CallExpression	wind ( )		2550929	0					
ANR	2550974	Callee	wind		2550929	0					
ANR	2550975	Identifier	wind		2550929	0					
ANR	2550976	ArgumentList			2550929	1					
ANR	2550977	IfStatement	if ( och == '-' )		2550929	10					
ANR	2550978	Condition	och == '-'	285:6:5952:5961	2550929	0	True				
ANR	2550979	EqualityExpression	och == '-'		2550929	0		==			
ANR	2550980	Identifier	och		2550929	0					
ANR	2550981	PrimaryExpression	'-'		2550929	1					
ANR	2550982	CompoundStatement		13:19:177:177	2550929	1					
ANR	2550983	IfStatement	if ( isdigit ( ch ) )		2550929	0					
ANR	2550984	Condition	isdigit ( ch )	288:7:6092:6104	2550929	0	True				
ANR	2550985	CallExpression	isdigit ( ch )		2550929	0					
ANR	2550986	Callee	isdigit		2550929	0					
ANR	2550987	Identifier	isdigit		2550929	0					
ANR	2550988	ArgumentList	ch		2550929	1					
ANR	2550989	Argument	ch		2550929	0					
ANR	2550990	Identifier	ch		2550929	0					
ANR	2550991	CompoundStatement		16:23:320:320	2550929	1					
ANR	2550992	ExpressionStatement	och = ch	290:3:6166:6174	2550929	0	True				
ANR	2550993	AssignmentExpression	och = ch		2550929	0		=			
ANR	2550994	Identifier	och		2550929	0					
ANR	2550995	Identifier	ch		2550929	1					
ANR	2550996	ExpressionStatement	wind ( )	291:3:6179:6185	2550929	1	True				
ANR	2550997	CallExpression	wind ( )		2550929	0					
ANR	2550998	Callee	wind		2550929	0					
ANR	2550999	Identifier	wind		2550929	0					
ANR	2551000	ArgumentList			2550929	1					
ANR	2551001	ElseStatement	else		2550929	0					
ANR	2551002	IfStatement	if ( ch == '.' )		2550929	0					
ANR	2551003	Condition	ch == '.'	292:14:6201:6209	2550929	0	True				
ANR	2551004	EqualityExpression	ch == '.'		2550929	0		==			
ANR	2551005	Identifier	ch		2550929	0					
ANR	2551006	PrimaryExpression	'.'		2550929	1					
ANR	2551007	CompoundStatement		23:3:545:581	2550929	1					
ANR	2551008	IdentifierDeclStatement	int ch2 = lexSource -> ReadCharacter ( ) ;	295:3:6333:6369	2550929	0	True				
ANR	2551009	IdentifierDecl	ch2 = lexSource -> ReadCharacter ( )		2550929	0					
ANR	2551010	IdentifierDeclType	int		2550929	0					
ANR	2551011	Identifier	ch2		2550929	1					
ANR	2551012	AssignmentExpression	ch2 = lexSource -> ReadCharacter ( )		2550929	2		=			
ANR	2551013	Identifier	ch2		2550929	0					
ANR	2551014	CallExpression	lexSource -> ReadCharacter ( )		2550929	1					
ANR	2551015	Callee	lexSource -> ReadCharacter		2550929	0					
ANR	2551016	PtrMemberAccess	lexSource -> ReadCharacter		2550929	0					
ANR	2551017	Identifier	lexSource		2550929	0					
ANR	2551018	Identifier	ReadCharacter		2550929	1					
ANR	2551019	ArgumentList			2550929	1					
ANR	2551020	IfStatement	if ( ch2 >= 0 )		2550929	1					
ANR	2551021	Condition	ch2 >= 0	296:8:6379:6386	2550929	0	True				
ANR	2551022	RelationalExpression	ch2 >= 0		2550929	0		>=			
ANR	2551023	Identifier	ch2		2550929	0					
ANR	2551024	PrimaryExpression	0		2550929	1					
ANR	2551025	CompoundStatement		24:19:602:602	2550929	1					
ANR	2551026	ExpressionStatement	lexSource -> UnreadCharacter ( )	297:4:6396:6424	2550929	0	True				
ANR	2551027	CallExpression	lexSource -> UnreadCharacter ( )		2550929	0					
ANR	2551028	Callee	lexSource -> UnreadCharacter		2550929	0					
ANR	2551029	PtrMemberAccess	lexSource -> UnreadCharacter		2550929	0					
ANR	2551030	Identifier	lexSource		2550929	0					
ANR	2551031	Identifier	UnreadCharacter		2550929	1					
ANR	2551032	ArgumentList			2550929	1					
ANR	2551033	IfStatement	if ( ! isdigit ( ch2 ) )		2550929	2					
ANR	2551034	Condition	! isdigit ( ch2 )	299:8:6439:6453	2550929	0	True				
ANR	2551035	UnaryOperationExpression	! isdigit ( ch2 )		2550929	0					
ANR	2551036	UnaryOperator	!		2550929	0					
ANR	2551037	CallExpression	isdigit ( ch2 )		2550929	1					
ANR	2551038	Callee	isdigit		2550929	0					
ANR	2551039	Identifier	isdigit		2550929	0					
ANR	2551040	ArgumentList	ch2		2550929	1					
ANR	2551041	Argument	ch2		2550929	0					
ANR	2551042	Identifier	ch2		2550929	0					
ANR	2551043	CompoundStatement		27:26:669:669	2550929	1					
ANR	2551044	ExpressionStatement	cut ( )	301:4:6516:6521	2550929	0	True				
ANR	2551045	CallExpression	cut ( )		2550929	0					
ANR	2551046	Callee	cut		2550929	0					
ANR	2551047	Identifier	cut		2550929	0					
ANR	2551048	ArgumentList			2550929	1					
ANR	2551049	ExpressionStatement	tokenType = LEX_MINUS	302:4:6527:6548	2550929	1	True				
ANR	2551050	AssignmentExpression	tokenType = LEX_MINUS		2550929	0		=			
ANR	2551051	Identifier	tokenType		2550929	0					
ANR	2551052	Identifier	LEX_MINUS		2550929	1					
ANR	2551053	ReturnStatement	return tokenType ;	303:4:6554:6570	2550929	2	True				
ANR	2551054	Identifier	tokenType		2550929	0					
ANR	2551055	ElseStatement	else		2550929	0					
ANR	2551056	CompoundStatement		34:9:849:849	2550929	0					
ANR	2551057	ExpressionStatement	cut ( )	308:3:6689:6694	2550929	0	True				
ANR	2551058	CallExpression	cut ( )		2550929	0					
ANR	2551059	Callee	cut		2550929	0					
ANR	2551060	Identifier	cut		2550929	0					
ANR	2551061	ArgumentList			2550929	1					
ANR	2551062	ExpressionStatement	tokenType = LEX_MINUS	309:3:6699:6720	2550929	1	True				
ANR	2551063	AssignmentExpression	tokenType = LEX_MINUS		2550929	0		=			
ANR	2551064	Identifier	tokenType		2550929	0					
ANR	2551065	Identifier	LEX_MINUS		2550929	1					
ANR	2551066	ReturnStatement	return tokenType ;	310:3:6725:6741	2550929	2	True				
ANR	2551067	Identifier	tokenType		2550929	0					
ANR	2551068	IfStatement	if ( och == '0' )		2550929	11					
ANR	2551069	Condition	och == '0'	314:5:6756:6765	2550929	0	True				
ANR	2551070	EqualityExpression	och == '0'		2550929	0		==			
ANR	2551071	Identifier	och		2550929	0					
ANR	2551072	PrimaryExpression	'0'		2550929	1					
ANR	2551073	CompoundStatement		42:18:981:981	2550929	1					
ANR	2551074	IfStatement	if ( tolower ( ch ) == 'x' )		2550929	0					
ANR	2551075	Condition	tolower ( ch ) == 'x'	316:6:6811:6830	2550929	0	True				
ANR	2551076	EqualityExpression	tolower ( ch ) == 'x'		2550929	0		==			
ANR	2551077	CallExpression	tolower ( ch )		2550929	0					
ANR	2551078	Callee	tolower		2550929	0					
ANR	2551079	Identifier	tolower		2550929	0					
ANR	2551080	ArgumentList	ch		2550929	1					
ANR	2551081	Argument	ch		2550929	0					
ANR	2551082	Identifier	ch		2550929	0					
ANR	2551083	PrimaryExpression	'x'		2550929	1					
ANR	2551084	CompoundStatement		44:29:1046:1046	2550929	1					
ANR	2551085	ExpressionStatement	numberType = INTEGER	318:3:6883:6903	2550929	0	True				
ANR	2551086	AssignmentExpression	numberType = INTEGER		2550929	0		=			
ANR	2551087	Identifier	numberType		2550929	0					
ANR	2551088	Identifier	INTEGER		2550929	1					
ANR	2551089	ExpressionStatement	wind ( )	319:3:6908:6915	2550929	1	True				
ANR	2551090	CallExpression	wind ( )		2550929	0					
ANR	2551091	Callee	wind		2550929	0					
ANR	2551092	Identifier	wind		2550929	0					
ANR	2551093	ArgumentList			2550929	1					
ANR	2551094	IfStatement	if ( ! isxdigit ( ch ) )		2550929	2					
ANR	2551095	Condition	! isxdigit ( ch )	320:7:6924:6938	2550929	0	True				
ANR	2551096	UnaryOperationExpression	! isxdigit ( ch )		2550929	0					
ANR	2551097	UnaryOperator	!		2550929	0					
ANR	2551098	CallExpression	isxdigit ( ch )		2550929	1					
ANR	2551099	Callee	isxdigit		2550929	0					
ANR	2551100	Identifier	isxdigit		2550929	0					
ANR	2551101	ArgumentList	ch		2550929	1					
ANR	2551102	Argument	ch		2550929	0					
ANR	2551103	Identifier	ch		2550929	0					
ANR	2551104	CompoundStatement		48:25:1154:1154	2550929	1					
ANR	2551105	ExpressionStatement	cut ( )	321:4:6948:6954	2550929	0	True				
ANR	2551106	CallExpression	cut ( )		2550929	0					
ANR	2551107	Callee	cut		2550929	0					
ANR	2551108	Identifier	cut		2550929	0					
ANR	2551109	ArgumentList			2550929	1					
ANR	2551110	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	322:4:6960:6987	2550929	1	True				
ANR	2551111	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2550929	0		=			
ANR	2551112	Identifier	tokenType		2550929	0					
ANR	2551113	Identifier	LEX_TOKEN_ERROR		2550929	1					
ANR	2551114	ReturnStatement	return ( tokenType ) ;	323:4:6993:7013	2550929	2	True				
ANR	2551115	Identifier	tokenType		2550929	0					
ANR	2551116	WhileStatement	while ( isxdigit ( ch ) )		2550929	3					
ANR	2551117	Condition	isxdigit ( ch )	325:10:7030:7043	2550929	0	True				
ANR	2551118	CallExpression	isxdigit ( ch )		2550929	0					
ANR	2551119	Callee	isxdigit		2550929	0					
ANR	2551120	Identifier	isxdigit		2550929	0					
ANR	2551121	ArgumentList	ch		2550929	1					
ANR	2551122	Argument	ch		2550929	0					
ANR	2551123	Identifier	ch		2550929	0					
ANR	2551124	CompoundStatement		53:27:1259:1259	2550929	1					
ANR	2551125	ExpressionStatement	wind ( )	326:4:7053:7060	2550929	0	True				
ANR	2551126	CallExpression	wind ( )		2550929	0					
ANR	2551127	Callee	wind		2550929	0					
ANR	2551128	Identifier	wind		2550929	0					
ANR	2551129	ArgumentList			2550929	1					
ANR	2551130	ElseStatement	else		2550929	0					
ANR	2551131	CompoundStatement		56:9:1288:1288	2550929	0					
ANR	2551132	ExpressionStatement	numberType = INTEGER	330:3:7105:7125	2550929	0	True				
ANR	2551133	AssignmentExpression	numberType = INTEGER		2550929	0		=			
ANR	2551134	Identifier	numberType		2550929	0					
ANR	2551135	Identifier	INTEGER		2550929	1					
ANR	2551136	WhileStatement	while ( isdigit ( ch ) )		2550929	1					
ANR	2551137	Condition	isdigit ( ch )	331:10:7137:7149	2550929	0	True				
ANR	2551138	CallExpression	isdigit ( ch )		2550929	0					
ANR	2551139	Callee	isdigit		2550929	0					
ANR	2551140	Identifier	isdigit		2550929	0					
ANR	2551141	ArgumentList	ch		2550929	1					
ANR	2551142	Argument	ch		2550929	0					
ANR	2551143	Identifier	ch		2550929	0					
ANR	2551144	CompoundStatement		59:26:1365:1365	2550929	1					
ANR	2551145	ExpressionStatement	wind ( )	332:4:7159:7166	2550929	0	True				
ANR	2551146	CallExpression	wind ( )		2550929	0					
ANR	2551147	Callee	wind		2550929	0					
ANR	2551148	Identifier	wind		2550929	0					
ANR	2551149	ArgumentList			2550929	1					
ANR	2551150	IfStatement	if ( ! isodigit ( ch ) )		2550929	1					
ANR	2551151	Condition	! isodigit ( ch )	333:8:7176:7190	2550929	0	True				
ANR	2551152	UnaryOperationExpression	! isodigit ( ch )		2550929	0					
ANR	2551153	UnaryOperator	!		2550929	0					
ANR	2551154	CallExpression	isodigit ( ch )		2550929	1					
ANR	2551155	Callee	isodigit		2550929	0					
ANR	2551156	Identifier	isodigit		2550929	0					
ANR	2551157	ArgumentList	ch		2550929	1					
ANR	2551158	Argument	ch		2550929	0					
ANR	2551159	Identifier	ch		2550929	0					
ANR	2551160	CompoundStatement		61:26:1406:1406	2550929	1					
ANR	2551161	ExpressionStatement	numberType = REAL	335:5:7229:7246	2550929	0	True				
ANR	2551162	AssignmentExpression	numberType = REAL		2550929	0		=			
ANR	2551163	Identifier	numberType		2550929	0					
ANR	2551164	Identifier	REAL		2550929	1					
ANR	2551165	IfStatement	if ( ch == '.' || tolower ( ch ) == 'e' )		2550929	2					
ANR	2551166	Condition	ch == '.' || tolower ( ch ) == 'e'	338:7:7266:7298	2550929	0	True				
ANR	2551167	OrExpression	ch == '.' || tolower ( ch ) == 'e'		2550929	0		||			
ANR	2551168	EqualityExpression	ch == '.'		2550929	0		==			
ANR	2551169	Identifier	ch		2550929	0					
ANR	2551170	PrimaryExpression	'.'		2550929	1					
ANR	2551171	EqualityExpression	tolower ( ch ) == 'e'		2550929	1		==			
ANR	2551172	CallExpression	tolower ( ch )		2550929	0					
ANR	2551173	Callee	tolower		2550929	0					
ANR	2551174	Identifier	tolower		2550929	0					
ANR	2551175	ArgumentList	ch		2550929	1					
ANR	2551176	Argument	ch		2550929	0					
ANR	2551177	Identifier	ch		2550929	0					
ANR	2551178	PrimaryExpression	'e'		2550929	1					
ANR	2551179	CompoundStatement		66:43:1514:1514	2550929	1					
ANR	2551180	ExpressionStatement	numberType = REAL	339:4:7308:7325	2550929	0	True				
ANR	2551181	AssignmentExpression	numberType = REAL		2550929	0		=			
ANR	2551182	Identifier	numberType		2550929	0					
ANR	2551183	Identifier	REAL		2550929	1					
ANR	2551184	ElseStatement	else		2550929	0					
ANR	2551185	IfStatement	if ( numberType == REAL )		2550929	0					
ANR	2551186	Condition	numberType == REAL	340:14:7341:7358	2550929	0	True				
ANR	2551187	EqualityExpression	numberType == REAL		2550929	0		==			
ANR	2551188	Identifier	numberType		2550929	0					
ANR	2551189	Identifier	REAL		2550929	1					
ANR	2551190	CompoundStatement		68:35:1574:1574	2550929	1					
ANR	2551191	ExpressionStatement	cut ( )	343:4:7458:7464	2550929	0	True				
ANR	2551192	CallExpression	cut ( )		2550929	0					
ANR	2551193	Callee	cut		2550929	0					
ANR	2551194	Identifier	cut		2550929	0					
ANR	2551195	ArgumentList			2550929	1					
ANR	2551196	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	344:4:7470:7497	2550929	1	True				
ANR	2551197	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2550929	0		=			
ANR	2551198	Identifier	tokenType		2550929	0					
ANR	2551199	Identifier	LEX_TOKEN_ERROR		2550929	1					
ANR	2551200	ReturnStatement	return ( tokenType ) ;	345:4:7503:7522	2550929	2	True				
ANR	2551201	Identifier	tokenType		2550929	0					
ANR	2551202	ElseStatement	else		2550929	0					
ANR	2551203	IfStatement	if ( isdigit ( och ) )		2550929	0					
ANR	2551204	Condition	isdigit ( och )	348:12:7545:7558	2550929	0	True				
ANR	2551205	CallExpression	isdigit ( och )		2550929	0					
ANR	2551206	Callee	isdigit		2550929	0					
ANR	2551207	Identifier	isdigit		2550929	0					
ANR	2551208	ArgumentList	och		2550929	1					
ANR	2551209	Argument	och		2550929	0					
ANR	2551210	Identifier	och		2550929	0					
ANR	2551211	CompoundStatement		76:29:1774:1774	2550929	1					
ANR	2551212	WhileStatement	while ( isdigit ( ch ) )		2550929	0					
ANR	2551213	Condition	isdigit ( ch )	350:9:7606:7618	2550929	0	True				
ANR	2551214	CallExpression	isdigit ( ch )		2550929	0					
ANR	2551215	Callee	isdigit		2550929	0					
ANR	2551216	Identifier	isdigit		2550929	0					
ANR	2551217	ArgumentList	ch		2550929	1					
ANR	2551218	Argument	ch		2550929	0					
ANR	2551219	Identifier	ch		2550929	0					
ANR	2551220	CompoundStatement		78:25:1834:1834	2550929	1					
ANR	2551221	ExpressionStatement	wind ( )	351:3:7627:7634	2550929	0	True				
ANR	2551222	CallExpression	wind ( )		2550929	0					
ANR	2551223	Callee	wind		2550929	0					
ANR	2551224	Identifier	wind		2550929	0					
ANR	2551225	ArgumentList			2550929	1					
ANR	2551226	ExpressionStatement	numberType = ( ch == '.' || tolower ( ch ) == 'e' ) ? REAL : INTEGER	353:2:7642:7705	2550929	1	True				
ANR	2551227	AssignmentExpression	numberType = ( ch == '.' || tolower ( ch ) == 'e' ) ? REAL : INTEGER		2550929	0		=			
ANR	2551228	Identifier	numberType		2550929	0					
ANR	2551229	ConditionalExpression	( ch == '.' || tolower ( ch ) == 'e' ) ? REAL : INTEGER		2550929	1					
ANR	2551230	Condition	ch == '.' || tolower ( ch ) == 'e'		2550929	0					
ANR	2551231	OrExpression	ch == '.' || tolower ( ch ) == 'e'		2550929	0		||			
ANR	2551232	EqualityExpression	ch == '.'		2550929	0		==			
ANR	2551233	Identifier	ch		2550929	0					
ANR	2551234	PrimaryExpression	'.'		2550929	1					
ANR	2551235	EqualityExpression	tolower ( ch ) == 'e'		2550929	1		==			
ANR	2551236	CallExpression	tolower ( ch )		2550929	0					
ANR	2551237	Callee	tolower		2550929	0					
ANR	2551238	Identifier	tolower		2550929	0					
ANR	2551239	ArgumentList	ch		2550929	1					
ANR	2551240	Argument	ch		2550929	0					
ANR	2551241	Identifier	ch		2550929	0					
ANR	2551242	PrimaryExpression	'e'		2550929	1					
ANR	2551243	Identifier	REAL		2550929	1					
ANR	2551244	Identifier	INTEGER		2550929	2					
ANR	2551245	IfStatement	if ( och == '.' || ch == '.' )		2550929	12					
ANR	2551246	Condition	och == '.' || ch == '.'	356:5:7717:7739	2550929	0	True				
ANR	2551247	OrExpression	och == '.' || ch == '.'		2550929	0		||			
ANR	2551248	EqualityExpression	och == '.'		2550929	0		==			
ANR	2551249	Identifier	och		2550929	0					
ANR	2551250	PrimaryExpression	'.'		2550929	1					
ANR	2551251	EqualityExpression	ch == '.'		2550929	1		==			
ANR	2551252	Identifier	ch		2550929	0					
ANR	2551253	PrimaryExpression	'.'		2550929	1					
ANR	2551254	CompoundStatement		84:31:1955:1955	2550929	1					
ANR	2551255	IfStatement	if ( ch == '.' )		2550929	0					
ANR	2551256	Condition	ch == '.'	358:6:7800:7808	2550929	0	True				
ANR	2551257	EqualityExpression	ch == '.'		2550929	0		==			
ANR	2551258	Identifier	ch		2550929	0					
ANR	2551259	PrimaryExpression	'.'		2550929	1					
ANR	2551260	ExpressionStatement	wind ( )	358:18:7812:7819	2550929	1	True				
ANR	2551261	CallExpression	wind ( )		2550929	0					
ANR	2551262	Callee	wind		2550929	0					
ANR	2551263	Identifier	wind		2550929	0					
ANR	2551264	ArgumentList			2550929	1					
ANR	2551265	IfStatement	if ( isdigit ( ch ) )		2550929	1					
ANR	2551266	Condition	isdigit ( ch )	359:6:7827:7839	2550929	0	True				
ANR	2551267	CallExpression	isdigit ( ch )		2550929	0					
ANR	2551268	Callee	isdigit		2550929	0					
ANR	2551269	Identifier	isdigit		2550929	0					
ANR	2551270	ArgumentList	ch		2550929	1					
ANR	2551271	Argument	ch		2550929	0					
ANR	2551272	Identifier	ch		2550929	0					
ANR	2551273	CompoundStatement		87:22:2055:2055	2550929	1					
ANR	2551274	ExpressionStatement	numberType = REAL	361:3:7891:7908	2550929	0	True				
ANR	2551275	AssignmentExpression	numberType = REAL		2550929	0		=			
ANR	2551276	Identifier	numberType		2550929	0					
ANR	2551277	Identifier	REAL		2550929	1					
ANR	2551278	WhileStatement	while ( isdigit ( ch ) )		2550929	1					
ANR	2551279	Condition	isdigit ( ch )	362:10:7920:7932	2550929	0	True				
ANR	2551280	CallExpression	isdigit ( ch )		2550929	0					
ANR	2551281	Callee	isdigit		2550929	0					
ANR	2551282	Identifier	isdigit		2550929	0					
ANR	2551283	ArgumentList	ch		2550929	1					
ANR	2551284	Argument	ch		2550929	0					
ANR	2551285	Identifier	ch		2550929	0					
ANR	2551286	CompoundStatement		90:26:2148:2148	2550929	1					
ANR	2551287	ExpressionStatement	wind ( )	363:4:7942:7949	2550929	0	True				
ANR	2551288	CallExpression	wind ( )		2550929	0					
ANR	2551289	Callee	wind		2550929	0					
ANR	2551290	Identifier	wind		2550929	0					
ANR	2551291	ArgumentList			2550929	1					
ANR	2551292	ElseStatement	else		2550929	0					
ANR	2551293	CompoundStatement		93:9:2177:2177	2550929	0					
ANR	2551294	IfStatement	if ( numberType != NONE )		2550929	0					
ANR	2551295	Condition	numberType != NONE	366:7:7974:7991	2550929	0	True				
ANR	2551296	EqualityExpression	numberType != NONE		2550929	0		!=			
ANR	2551297	Identifier	numberType		2550929	0					
ANR	2551298	Identifier	NONE		2550929	1					
ANR	2551299	CompoundStatement		94:28:2207:2207	2550929	1					
ANR	2551300	ExpressionStatement	cut ( )	368:4:8064:8070	2550929	0	True				
ANR	2551301	CallExpression	cut ( )		2550929	0					
ANR	2551302	Callee	cut		2550929	0					
ANR	2551303	Identifier	cut		2550929	0					
ANR	2551304	ArgumentList			2550929	1					
ANR	2551305	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	369:4:8076:8103	2550929	1	True				
ANR	2551306	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2550929	0		=			
ANR	2551307	Identifier	tokenType		2550929	0					
ANR	2551308	Identifier	LEX_TOKEN_ERROR		2550929	1					
ANR	2551309	ReturnStatement	return ( tokenType ) ;	370:4:8109:8128	2550929	2	True				
ANR	2551310	Identifier	tokenType		2550929	0					
ANR	2551311	ExpressionStatement	cut ( )	373:3:8163:8169	2550929	1	True				
ANR	2551312	CallExpression	cut ( )		2550929	0					
ANR	2551313	Callee	cut		2550929	0					
ANR	2551314	Identifier	cut		2550929	0					
ANR	2551315	ArgumentList			2550929	1					
ANR	2551316	ExpressionStatement	tokenType = LEX_SELECTION	374:3:8174:8199	2550929	2	True				
ANR	2551317	AssignmentExpression	tokenType = LEX_SELECTION		2550929	0		=			
ANR	2551318	Identifier	tokenType		2550929	0					
ANR	2551319	Identifier	LEX_SELECTION		2550929	1					
ANR	2551320	ReturnStatement	return ( tokenType ) ;	375:3:8204:8223	2550929	3	True				
ANR	2551321	Identifier	tokenType		2550929	0					
ANR	2551322	IfStatement	if ( numberType == REAL && tolower ( ch ) == 'e' )		2550929	13					
ANR	2551323	Condition	numberType == REAL && tolower ( ch ) == 'e'	381:5:8336:8377	2550929	0	True				
ANR	2551324	AndExpression	numberType == REAL && tolower ( ch ) == 'e'		2550929	0		&&			
ANR	2551325	EqualityExpression	numberType == REAL		2550929	0		==			
ANR	2551326	Identifier	numberType		2550929	0					
ANR	2551327	Identifier	REAL		2550929	1					
ANR	2551328	EqualityExpression	tolower ( ch ) == 'e'		2550929	1		==			
ANR	2551329	CallExpression	tolower ( ch )		2550929	0					
ANR	2551330	Callee	tolower		2550929	0					
ANR	2551331	Identifier	tolower		2550929	0					
ANR	2551332	ArgumentList	ch		2550929	1					
ANR	2551333	Argument	ch		2550929	0					
ANR	2551334	Identifier	ch		2550929	0					
ANR	2551335	PrimaryExpression	'e'		2550929	1					
ANR	2551336	CompoundStatement		109:50:2593:2593	2550929	1					
ANR	2551337	ExpressionStatement	wind ( )	382:2:8385:8392	2550929	0	True				
ANR	2551338	CallExpression	wind ( )		2550929	0					
ANR	2551339	Callee	wind		2550929	0					
ANR	2551340	Identifier	wind		2550929	0					
ANR	2551341	ArgumentList			2550929	1					
ANR	2551342	IfStatement	if ( ch == '+' || ch == '-' )		2550929	1					
ANR	2551343	Condition	ch == '+' || ch == '-'	383:6:8400:8421	2550929	0	True				
ANR	2551344	OrExpression	ch == '+' || ch == '-'		2550929	0		||			
ANR	2551345	EqualityExpression	ch == '+'		2550929	0		==			
ANR	2551346	Identifier	ch		2550929	0					
ANR	2551347	PrimaryExpression	'+'		2550929	1					
ANR	2551348	EqualityExpression	ch == '-'		2550929	1		==			
ANR	2551349	Identifier	ch		2550929	0					
ANR	2551350	PrimaryExpression	'-'		2550929	1					
ANR	2551351	ExpressionStatement	wind ( )	383:31:8425:8432	2550929	1	True				
ANR	2551352	CallExpression	wind ( )		2550929	0					
ANR	2551353	Callee	wind		2550929	0					
ANR	2551354	Identifier	wind		2550929	0					
ANR	2551355	ArgumentList			2550929	1					
ANR	2551356	IfStatement	if ( ! isdigit ( ch ) )		2550929	2					
ANR	2551357	Condition	! isdigit ( ch )	384:6:8440:8453	2550929	0	True				
ANR	2551358	UnaryOperationExpression	! isdigit ( ch )		2550929	0					
ANR	2551359	UnaryOperator	!		2550929	0					
ANR	2551360	CallExpression	isdigit ( ch )		2550929	1					
ANR	2551361	Callee	isdigit		2550929	0					
ANR	2551362	Identifier	isdigit		2550929	0					
ANR	2551363	ArgumentList	ch		2550929	1					
ANR	2551364	Argument	ch		2550929	0					
ANR	2551365	Identifier	ch		2550929	0					
ANR	2551366	CompoundStatement		112:23:2669:2669	2550929	1					
ANR	2551367	ExpressionStatement	cut ( )	385:3:8462:8468	2550929	0	True				
ANR	2551368	CallExpression	cut ( )		2550929	0					
ANR	2551369	Callee	cut		2550929	0					
ANR	2551370	Identifier	cut		2550929	0					
ANR	2551371	ArgumentList			2550929	1					
ANR	2551372	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	386:3:8473:8500	2550929	1	True				
ANR	2551373	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2550929	0		=			
ANR	2551374	Identifier	tokenType		2550929	0					
ANR	2551375	Identifier	LEX_TOKEN_ERROR		2550929	1					
ANR	2551376	ReturnStatement	return ( tokenType ) ;	387:3:8505:8524	2550929	2	True				
ANR	2551377	Identifier	tokenType		2550929	0					
ANR	2551378	WhileStatement	while ( isdigit ( ch ) )		2550929	3					
ANR	2551379	Condition	isdigit ( ch )	389:9:8539:8551	2550929	0	True				
ANR	2551380	CallExpression	isdigit ( ch )		2550929	0					
ANR	2551381	Callee	isdigit		2550929	0					
ANR	2551382	Identifier	isdigit		2550929	0					
ANR	2551383	ArgumentList	ch		2550929	1					
ANR	2551384	Argument	ch		2550929	0					
ANR	2551385	Identifier	ch		2550929	0					
ANR	2551386	CompoundStatement		117:25:2767:2767	2550929	1					
ANR	2551387	ExpressionStatement	wind ( )	390:3:8560:8567	2550929	0	True				
ANR	2551388	CallExpression	wind ( )		2550929	0					
ANR	2551389	Callee	wind		2550929	0					
ANR	2551390	Identifier	wind		2550929	0					
ANR	2551391	ArgumentList			2550929	1					
ANR	2551392	IfStatement	if ( numberType == INTEGER )		2550929	14					
ANR	2551393	Condition	numberType == INTEGER	394:5:8582:8602	2550929	0	True				
ANR	2551394	EqualityExpression	numberType == INTEGER		2550929	0		==			
ANR	2551395	Identifier	numberType		2550929	0					
ANR	2551396	Identifier	INTEGER		2550929	1					
ANR	2551397	CompoundStatement		124:2:2832:2838	2550929	1					
ANR	2551398	ExpressionStatement	cut ( )	395:2:8610:8616	2550929	0	True				
ANR	2551399	CallExpression	cut ( )		2550929	0					
ANR	2551400	Callee	cut		2550929	0					
ANR	2551401	Identifier	cut		2550929	0					
ANR	2551402	ArgumentList			2550929	1					
ANR	2551403	IdentifierDeclStatement	long l ;	396:2:8620:8626	2550929	1	True				
ANR	2551404	IdentifierDecl	l		2550929	0					
ANR	2551405	IdentifierDeclType	long		2550929	0					
ANR	2551406	Identifier	l		2550929	1					
ANR	2551407	IfStatement	if ( _useOldClassAdSemantics )		2550929	2					
ANR	2551408	Condition	_useOldClassAdSemantics	397:7:8635:8657	2550929	0	True				
ANR	2551409	Identifier	_useOldClassAdSemantics		2550929	0					
ANR	2551410	CompoundStatement		125:33:2873:2873	2550929	1					
ANR	2551411	ExpressionStatement	"l = strtol ( lexBuffer . c_str ( ) , NULL , 10 )"	400:3:8756:8797	2550929	0	True				
ANR	2551412	AssignmentExpression	"l = strtol ( lexBuffer . c_str ( ) , NULL , 10 )"		2550929	0		=			
ANR	2551413	Identifier	l		2550929	0					
ANR	2551414	CallExpression	"strtol ( lexBuffer . c_str ( ) , NULL , 10 )"		2550929	1					
ANR	2551415	Callee	strtol		2550929	0					
ANR	2551416	Identifier	strtol		2550929	0					
ANR	2551417	ArgumentList	lexBuffer . c_str ( )		2550929	1					
ANR	2551418	Argument	lexBuffer . c_str ( )		2550929	0					
ANR	2551419	CallExpression	lexBuffer . c_str ( )		2550929	0					
ANR	2551420	Callee	lexBuffer . c_str		2550929	0					
ANR	2551421	MemberAccess	lexBuffer . c_str		2550929	0					
ANR	2551422	Identifier	lexBuffer		2550929	0					
ANR	2551423	Identifier	c_str		2550929	1					
ANR	2551424	ArgumentList			2550929	1					
ANR	2551425	Argument	NULL		2550929	1					
ANR	2551426	Identifier	NULL		2550929	0					
ANR	2551427	Argument	10		2550929	2					
ANR	2551428	PrimaryExpression	10		2550929	0					
ANR	2551429	ElseStatement	else		2550929	0					
ANR	2551430	CompoundStatement		129:9:3020:3020	2550929	0					
ANR	2551431	ExpressionStatement	"l = strtol ( lexBuffer . c_str ( ) , NULL , 0 )"	402:3:8813:8853	2550929	0	True				
ANR	2551432	AssignmentExpression	"l = strtol ( lexBuffer . c_str ( ) , NULL , 0 )"		2550929	0		=			
ANR	2551433	Identifier	l		2550929	0					
ANR	2551434	CallExpression	"strtol ( lexBuffer . c_str ( ) , NULL , 0 )"		2550929	1					
ANR	2551435	Callee	strtol		2550929	0					
ANR	2551436	Identifier	strtol		2550929	0					
ANR	2551437	ArgumentList	lexBuffer . c_str ( )		2550929	1					
ANR	2551438	Argument	lexBuffer . c_str ( )		2550929	0					
ANR	2551439	CallExpression	lexBuffer . c_str ( )		2550929	0					
ANR	2551440	Callee	lexBuffer . c_str		2550929	0					
ANR	2551441	MemberAccess	lexBuffer . c_str		2550929	0					
ANR	2551442	Identifier	lexBuffer		2550929	0					
ANR	2551443	Identifier	c_str		2550929	1					
ANR	2551444	ArgumentList			2550929	1					
ANR	2551445	Argument	NULL		2550929	1					
ANR	2551446	Identifier	NULL		2550929	0					
ANR	2551447	Argument	0		2550929	2					
ANR	2551448	PrimaryExpression	0		2550929	0					
ANR	2551449	IfStatement	if ( l > INT_MAX )		2550929	3					
ANR	2551450	Condition	l > INT_MAX	404:7:8866:8876	2550929	0	True				
ANR	2551451	RelationalExpression	l > INT_MAX		2550929	0		>			
ANR	2551452	Identifier	l		2550929	0					
ANR	2551453	Identifier	INT_MAX		2550929	1					
ANR	2551454	CompoundStatement		132:21:3092:3092	2550929	1					
ANR	2551455	ExpressionStatement	l = INT_MAX	405:3:8885:8896	2550929	0	True				
ANR	2551456	AssignmentExpression	l = INT_MAX		2550929	0		=			
ANR	2551457	Identifier	l		2550929	0					
ANR	2551458	Identifier	INT_MAX		2550929	1					
ANR	2551459	ElseStatement	else		2550929	0					
ANR	2551460	IfStatement	if ( l < INT_MIN )		2550929	0					
ANR	2551461	Condition	l < INT_MIN	406:14:8912:8922	2550929	0	True				
ANR	2551462	RelationalExpression	l < INT_MIN		2550929	0		<			
ANR	2551463	Identifier	l		2550929	0					
ANR	2551464	Identifier	INT_MIN		2550929	1					
ANR	2551465	CompoundStatement		134:28:3138:3138	2550929	1					
ANR	2551466	ExpressionStatement	l = INT_MIN	407:3:8931:8942	2550929	0	True				
ANR	2551467	AssignmentExpression	l = INT_MIN		2550929	0		=			
ANR	2551468	Identifier	l		2550929	0					
ANR	2551469	Identifier	INT_MIN		2550929	1					
ANR	2551470	ExpressionStatement	integer = ( int ) l	409:2:8950:8967	2550929	4	True				
ANR	2551471	AssignmentExpression	integer = ( int ) l		2550929	0		=			
ANR	2551472	Identifier	integer		2550929	0					
ANR	2551473	CastExpression	( int ) l		2550929	1					
ANR	2551474	CastTarget	int		2550929	0					
ANR	2551475	Identifier	l		2550929	1					
ANR	2551476	ElseStatement	else		2550929	0					
ANR	2551477	IfStatement	if ( numberType == REAL )		2550929	0					
ANR	2551478	Condition	numberType == REAL	410:12:8981:8998	2550929	0	True				
ANR	2551479	EqualityExpression	numberType == REAL		2550929	0		==			
ANR	2551480	Identifier	numberType		2550929	0					
ANR	2551481	Identifier	REAL		2550929	1					
ANR	2551482	CompoundStatement		138:33:3214:3214	2550929	1					
ANR	2551483	ExpressionStatement	cut ( )	411:2:9006:9012	2550929	0	True				
ANR	2551484	CallExpression	cut ( )		2550929	0					
ANR	2551485	Callee	cut		2550929	0					
ANR	2551486	Identifier	cut		2550929	0					
ANR	2551487	ArgumentList			2550929	1					
ANR	2551488	ExpressionStatement	"real = strtod ( lexBuffer . c_str ( ) , NULL )"	412:2:9016:9056	2550929	1	True				
ANR	2551489	AssignmentExpression	"real = strtod ( lexBuffer . c_str ( ) , NULL )"		2550929	0		=			
ANR	2551490	Identifier	real		2550929	0					
ANR	2551491	CallExpression	"strtod ( lexBuffer . c_str ( ) , NULL )"		2550929	1					
ANR	2551492	Callee	strtod		2550929	0					
ANR	2551493	Identifier	strtod		2550929	0					
ANR	2551494	ArgumentList	lexBuffer . c_str ( )		2550929	1					
ANR	2551495	Argument	lexBuffer . c_str ( )		2550929	0					
ANR	2551496	CallExpression	lexBuffer . c_str ( )		2550929	0					
ANR	2551497	Callee	lexBuffer . c_str		2550929	0					
ANR	2551498	MemberAccess	lexBuffer . c_str		2550929	0					
ANR	2551499	Identifier	lexBuffer		2550929	0					
ANR	2551500	Identifier	c_str		2550929	1					
ANR	2551501	ArgumentList			2550929	1					
ANR	2551502	Argument	NULL		2550929	1					
ANR	2551503	Identifier	NULL		2550929	0					
ANR	2551504	ElseStatement	else		2550929	0					
ANR	2551505	CompoundStatement		141:8:3278:3278	2550929	0					
ANR	2551506	ExpressionStatement	"CLASSAD_EXCEPT ( ""Should not reach here"" )"	420:3:9379:9418	2550929	0	True				
ANR	2551507	CallExpression	"CLASSAD_EXCEPT ( ""Should not reach here"" )"		2550929	0					
ANR	2551508	Callee	CLASSAD_EXCEPT		2550929	0					
ANR	2551509	Identifier	CLASSAD_EXCEPT		2550929	0					
ANR	2551510	ArgumentList	"""Should not reach here"""		2550929	1					
ANR	2551511	Argument	"""Should not reach here"""		2550929	0					
ANR	2551512	PrimaryExpression	"""Should not reach here"""		2550929	0					
ANR	2551513	SwitchStatement	switch ( toupper ( ch ) )		2550929	15					
ANR	2551514	Condition	toupper ( ch )	423:9:9433:9445	2550929	0	True				
ANR	2551515	CallExpression	toupper ( ch )		2550929	0					
ANR	2551516	Callee	toupper		2550929	0					
ANR	2551517	Identifier	toupper		2550929	0					
ANR	2551518	ArgumentList	ch		2550929	1					
ANR	2551519	Argument	ch		2550929	0					
ANR	2551520	Identifier	ch		2550929	0					
ANR	2551521	CompoundStatement		151:25:3661:3661	2550929	1					
ANR	2551522	Label	case 'B' :	424:2:9453:9461	2550929	0	True				
ANR	2551523	ExpressionStatement	f = Value :: B_FACTOR	424:12:9463:9482	2550929	1	True				
ANR	2551524	AssignmentExpression	f = Value :: B_FACTOR		2550929	0		=			
ANR	2551525	Identifier	f		2550929	0					
ANR	2551526	Identifier	Value :: B_FACTOR		2550929	1					
ANR	2551527	ExpressionStatement	wind ( )	424:33:9484:9491	2550929	2	True				
ANR	2551528	CallExpression	wind ( )		2550929	0					
ANR	2551529	Callee	wind		2550929	0					
ANR	2551530	Identifier	wind		2550929	0					
ANR	2551531	ArgumentList			2550929	1					
ANR	2551532	BreakStatement	break ;	424:42:9493:9498	2550929	3	True				
ANR	2551533	Label	case 'K' :	425:2:9503:9511	2550929	4	True				
ANR	2551534	ExpressionStatement	f = Value :: K_FACTOR	425:12:9513:9532	2550929	5	True				
ANR	2551535	AssignmentExpression	f = Value :: K_FACTOR		2550929	0		=			
ANR	2551536	Identifier	f		2550929	0					
ANR	2551537	Identifier	Value :: K_FACTOR		2550929	1					
ANR	2551538	ExpressionStatement	wind ( )	425:33:9534:9541	2550929	6	True				
ANR	2551539	CallExpression	wind ( )		2550929	0					
ANR	2551540	Callee	wind		2550929	0					
ANR	2551541	Identifier	wind		2550929	0					
ANR	2551542	ArgumentList			2550929	1					
ANR	2551543	BreakStatement	break ;	425:42:9543:9548	2550929	7	True				
ANR	2551544	Label	case 'M' :	426:2:9552:9560	2550929	8	True				
ANR	2551545	ExpressionStatement	f = Value :: M_FACTOR	426:12:9562:9581	2550929	9	True				
ANR	2551546	AssignmentExpression	f = Value :: M_FACTOR		2550929	0		=			
ANR	2551547	Identifier	f		2550929	0					
ANR	2551548	Identifier	Value :: M_FACTOR		2550929	1					
ANR	2551549	ExpressionStatement	wind ( )	426:33:9583:9590	2550929	10	True				
ANR	2551550	CallExpression	wind ( )		2550929	0					
ANR	2551551	Callee	wind		2550929	0					
ANR	2551552	Identifier	wind		2550929	0					
ANR	2551553	ArgumentList			2550929	1					
ANR	2551554	BreakStatement	break ;	426:42:9592:9597	2550929	11	True				
ANR	2551555	Label	case 'G' :	427:2:9601:9609	2550929	12	True				
ANR	2551556	ExpressionStatement	f = Value :: G_FACTOR	427:12:9611:9630	2550929	13	True				
ANR	2551557	AssignmentExpression	f = Value :: G_FACTOR		2550929	0		=			
ANR	2551558	Identifier	f		2550929	0					
ANR	2551559	Identifier	Value :: G_FACTOR		2550929	1					
ANR	2551560	ExpressionStatement	wind ( )	427:33:9632:9639	2550929	14	True				
ANR	2551561	CallExpression	wind ( )		2550929	0					
ANR	2551562	Callee	wind		2550929	0					
ANR	2551563	Identifier	wind		2550929	0					
ANR	2551564	ArgumentList			2550929	1					
ANR	2551565	BreakStatement	break ;	427:42:9641:9646	2550929	15	True				
ANR	2551566	Label	case 'T' :	428:2:9650:9658	2550929	16	True				
ANR	2551567	ExpressionStatement	f = Value :: T_FACTOR	428:12:9660:9679	2550929	17	True				
ANR	2551568	AssignmentExpression	f = Value :: T_FACTOR		2550929	0		=			
ANR	2551569	Identifier	f		2550929	0					
ANR	2551570	Identifier	Value :: T_FACTOR		2550929	1					
ANR	2551571	ExpressionStatement	wind ( )	428:33:9681:9688	2550929	18	True				
ANR	2551572	CallExpression	wind ( )		2550929	0					
ANR	2551573	Callee	wind		2550929	0					
ANR	2551574	Identifier	wind		2550929	0					
ANR	2551575	ArgumentList			2550929	1					
ANR	2551576	BreakStatement	break ;	428:42:9690:9695	2550929	19	True				
ANR	2551577	Label	default :	429:2:9699:9706	2550929	20	True				
ANR	2551578	Identifier	default		2550929	0					
ANR	2551579	ExpressionStatement	f = Value :: NO_FACTOR	430:3:9711:9731	2550929	21	True				
ANR	2551580	AssignmentExpression	f = Value :: NO_FACTOR		2550929	0		=			
ANR	2551581	Identifier	f		2550929	0					
ANR	2551582	Identifier	Value :: NO_FACTOR		2550929	1					
ANR	2551583	IfStatement	if ( numberType == INTEGER )		2550929	16					
ANR	2551584	Condition	numberType == INTEGER	433:5:9742:9762	2550929	0	True				
ANR	2551585	EqualityExpression	numberType == INTEGER		2550929	0		==			
ANR	2551586	Identifier	numberType		2550929	0					
ANR	2551587	Identifier	INTEGER		2550929	1					
ANR	2551588	CompoundStatement		161:29:3978:3978	2550929	1					
ANR	2551589	ExpressionStatement	"yylval . SetIntValue ( integer , f )"	434:2:9770:9802	2550929	0	True				
ANR	2551590	CallExpression	"yylval . SetIntValue ( integer , f )"		2550929	0					
ANR	2551591	Callee	yylval . SetIntValue		2550929	0					
ANR	2551592	MemberAccess	yylval . SetIntValue		2550929	0					
ANR	2551593	Identifier	yylval		2550929	0					
ANR	2551594	Identifier	SetIntValue		2550929	1					
ANR	2551595	ArgumentList	integer		2550929	1					
ANR	2551596	Argument	integer		2550929	0					
ANR	2551597	Identifier	integer		2550929	0					
ANR	2551598	Argument	f		2550929	1					
ANR	2551599	Identifier	f		2550929	0					
ANR	2551600	ExpressionStatement	yylval . SetTokenType ( LEX_INTEGER_VALUE )	435:2:9806:9846	2550929	1	True				
ANR	2551601	CallExpression	yylval . SetTokenType ( LEX_INTEGER_VALUE )		2550929	0					
ANR	2551602	Callee	yylval . SetTokenType		2550929	0					
ANR	2551603	MemberAccess	yylval . SetTokenType		2550929	0					
ANR	2551604	Identifier	yylval		2550929	0					
ANR	2551605	Identifier	SetTokenType		2550929	1					
ANR	2551606	ArgumentList	LEX_INTEGER_VALUE		2550929	1					
ANR	2551607	Argument	LEX_INTEGER_VALUE		2550929	0					
ANR	2551608	Identifier	LEX_INTEGER_VALUE		2550929	0					
ANR	2551609	ExpressionStatement	tokenType = LEX_INTEGER_VALUE	436:2:9850:9879	2550929	2	True				
ANR	2551610	AssignmentExpression	tokenType = LEX_INTEGER_VALUE		2550929	0		=			
ANR	2551611	Identifier	tokenType		2550929	0					
ANR	2551612	Identifier	LEX_INTEGER_VALUE		2550929	1					
ANR	2551613	ElseStatement	else		2550929	0					
ANR	2551614	CompoundStatement		165:8:4101:4101	2550929	0					
ANR	2551615	ExpressionStatement	"yylval . SetRealValue ( real , f )"	438:2:9893:9923	2550929	0	True				
ANR	2551616	CallExpression	"yylval . SetRealValue ( real , f )"		2550929	0					
ANR	2551617	Callee	yylval . SetRealValue		2550929	0					
ANR	2551618	MemberAccess	yylval . SetRealValue		2550929	0					
ANR	2551619	Identifier	yylval		2550929	0					
ANR	2551620	Identifier	SetRealValue		2550929	1					
ANR	2551621	ArgumentList	real		2550929	1					
ANR	2551622	Argument	real		2550929	0					
ANR	2551623	Identifier	real		2550929	0					
ANR	2551624	Argument	f		2550929	1					
ANR	2551625	Identifier	f		2550929	0					
ANR	2551626	ExpressionStatement	yylval . SetTokenType ( LEX_REAL_VALUE )	439:2:9927:9964	2550929	1	True				
ANR	2551627	CallExpression	yylval . SetTokenType ( LEX_REAL_VALUE )		2550929	0					
ANR	2551628	Callee	yylval . SetTokenType		2550929	0					
ANR	2551629	MemberAccess	yylval . SetTokenType		2550929	0					
ANR	2551630	Identifier	yylval		2550929	0					
ANR	2551631	Identifier	SetTokenType		2550929	1					
ANR	2551632	ArgumentList	LEX_REAL_VALUE		2550929	1					
ANR	2551633	Argument	LEX_REAL_VALUE		2550929	0					
ANR	2551634	Identifier	LEX_REAL_VALUE		2550929	0					
ANR	2551635	ExpressionStatement	tokenType = LEX_REAL_VALUE	440:2:9968:9994	2550929	2	True				
ANR	2551636	AssignmentExpression	tokenType = LEX_REAL_VALUE		2550929	0		=			
ANR	2551637	Identifier	tokenType		2550929	0					
ANR	2551638	Identifier	LEX_REAL_VALUE		2550929	1					
ANR	2551639	ReturnStatement	return ( tokenType ) ;	443:1:10001:10020	2550929	17	True				
ANR	2551640	Identifier	tokenType		2550929	0					
ANR	2551641	ReturnType	int		2550929	1					
ANR	2551642	Identifier	Lexer :: tokenizeNumber		2550929	2					
ANR	2551643	ParameterList			2550929	3					
ANR	2551644	CFGEntryNode	ENTRY		2550929		True				
ANR	2551645	CFGExitNode	EXIT		2550929		True				
ANR	2551646	Symbol	numberType		2550929						
ANR	2551647	Symbol	yylval		2550929						
ANR	2551648	Symbol	tolower		2550929						
ANR	2551649	Symbol	LEX_TOKEN_ERROR		2550929						
ANR	2551650	Symbol	integer		2550929						
ANR	2551651	Symbol	_useOldClassAdSemantics		2550929						
ANR	2551652	Symbol	lexSource		2550929						
ANR	2551653	Symbol	INT_MIN		2550929						
ANR	2551654	Symbol	Value :: T_FACTOR		2550929						
ANR	2551655	Symbol	och		2550929						
ANR	2551656	Symbol	strtol		2550929						
ANR	2551657	Symbol	INT_MAX		2550929						
ANR	2551658	Symbol	LEX_SELECTION		2550929						
ANR	2551659	Symbol	NONE		2550929						
ANR	2551660	Symbol	isdigit		2550929						
ANR	2551661	Symbol	lexBuffer		2550929						
ANR	2551662	Symbol	LEX_INTEGER_VALUE		2550929						
ANR	2551663	Symbol	INTEGER		2550929						
ANR	2551664	Symbol	isxdigit		2550929						
ANR	2551665	Symbol	Value :: NO_FACTOR		2550929						
ANR	2551666	Symbol	NULL		2550929						
ANR	2551667	Symbol	ch		2550929						
ANR	2551668	Symbol	toupper		2550929						
ANR	2551669	Symbol	f		2550929						
ANR	2551670	Symbol	real		2550929						
ANR	2551671	Symbol	ch2		2550929						
ANR	2551672	Symbol	isodigit		2550929						
ANR	2551673	Symbol	l		2550929						
ANR	2551674	Symbol	strtod		2550929						
ANR	2551675	Symbol	Value :: B_FACTOR		2550929						
ANR	2551676	Symbol	* lexSource		2550929						
ANR	2551677	Symbol	Value :: K_FACTOR		2550929						
ANR	2551678	Symbol	Value :: G_FACTOR		2550929						
ANR	2551679	Symbol	lexSource -> ReadCharacter		2550929						
ANR	2551680	Symbol	Value :: M_FACTOR		2550929						
ANR	2551681	Symbol	LEX_MINUS		2550929						
ANR	2551682	Symbol	REAL		2550929						
ANR	2551683	Symbol	lexBuffer . c_str		2550929						
ANR	2551684	Symbol	tokenType		2550929						
ANR	2551685	Symbol	LEX_REAL_VALUE		2550929						
ANR	2551686	Function	Lexer :: tokenizeAlphaHead	450:0:10232:11435							
ANR	2551687	FunctionDef	Lexer :: tokenizeAlphaHead ()		2551686	0					
ANR	2551688	CompoundStatement		452:0:10269:11435	2551686	0					
ANR	2551689	ExpressionStatement	mark ( )	453:1:10272:10279	2551686	0	True				
ANR	2551690	CallExpression	mark ( )		2551686	0					
ANR	2551691	Callee	mark		2551686	0					
ANR	2551692	Identifier	mark		2551686	0					
ANR	2551693	ArgumentList			2551686	1					
ANR	2551694	WhileStatement	while ( isalpha ( ch ) )		2551686	1					
ANR	2551695	Condition	isalpha ( ch )	454:8:10289:10300	2551686	0	True				
ANR	2551696	CallExpression	isalpha ( ch )		2551686	0					
ANR	2551697	Callee	isalpha		2551686	0					
ANR	2551698	Identifier	isalpha		2551686	0					
ANR	2551699	ArgumentList	ch		2551686	1					
ANR	2551700	Argument	ch		2551686	0					
ANR	2551701	Identifier	ch		2551686	0					
ANR	2551702	CompoundStatement		3:22:33:33	2551686	1					
ANR	2551703	ExpressionStatement	wind ( )	455:2:10307:10314	2551686	0	True				
ANR	2551704	CallExpression	wind ( )		2551686	0					
ANR	2551705	Callee	wind		2551686	0					
ANR	2551706	Identifier	wind		2551686	0					
ANR	2551707	ArgumentList			2551686	1					
ANR	2551708	IfStatement	if ( isdigit ( ch ) || ch == '_' )		2551686	2					
ANR	2551709	Condition	isdigit ( ch ) || ch == '_'	458:5:10325:10349	2551686	0	True				
ANR	2551710	OrExpression	isdigit ( ch ) || ch == '_'		2551686	0		||			
ANR	2551711	CallExpression	isdigit ( ch )		2551686	0					
ANR	2551712	Callee	isdigit		2551686	0					
ANR	2551713	Identifier	isdigit		2551686	0					
ANR	2551714	ArgumentList	ch		2551686	1					
ANR	2551715	Argument	ch		2551686	0					
ANR	2551716	Identifier	ch		2551686	0					
ANR	2551717	EqualityExpression	ch == '_'		2551686	1		==			
ANR	2551718	Identifier	ch		2551686	0					
ANR	2551719	PrimaryExpression	'_'		2551686	1					
ANR	2551720	CompoundStatement		7:32:82:82	2551686	1					
ANR	2551721	ExpressionStatement	wind ( )	460:2:10419:10426	2551686	0	True				
ANR	2551722	CallExpression	wind ( )		2551686	0					
ANR	2551723	Callee	wind		2551686	0					
ANR	2551724	Identifier	wind		2551686	0					
ANR	2551725	ArgumentList			2551686	1					
ANR	2551726	WhileStatement	while ( isalnum ( ch ) || ch == '_' )		2551686	1					
ANR	2551727	Condition	isalnum ( ch ) || ch == '_'	461:9:10437:10461	2551686	0	True				
ANR	2551728	OrExpression	isalnum ( ch ) || ch == '_'		2551686	0		||			
ANR	2551729	CallExpression	isalnum ( ch )		2551686	0					
ANR	2551730	Callee	isalnum		2551686	0					
ANR	2551731	Identifier	isalnum		2551686	0					
ANR	2551732	ArgumentList	ch		2551686	1					
ANR	2551733	Argument	ch		2551686	0					
ANR	2551734	Identifier	ch		2551686	0					
ANR	2551735	EqualityExpression	ch == '_'		2551686	1		==			
ANR	2551736	Identifier	ch		2551686	0					
ANR	2551737	PrimaryExpression	'_'		2551686	1					
ANR	2551738	CompoundStatement		10:36:194:194	2551686	1					
ANR	2551739	ExpressionStatement	wind ( )	462:3:10469:10476	2551686	0	True				
ANR	2551740	CallExpression	wind ( )		2551686	0					
ANR	2551741	Callee	wind		2551686	0					
ANR	2551742	Identifier	wind		2551686	0					
ANR	2551743	ArgumentList			2551686	1					
ANR	2551744	ExpressionStatement	cut ( )	464:2:10484:10490	2551686	2	True				
ANR	2551745	CallExpression	cut ( )		2551686	0					
ANR	2551746	Callee	cut		2551686	0					
ANR	2551747	Identifier	cut		2551686	0					
ANR	2551748	ArgumentList			2551686	1					
ANR	2551749	ExpressionStatement	tokenType = LEX_IDENTIFIER	466:2:10495:10521	2551686	3	True				
ANR	2551750	AssignmentExpression	tokenType = LEX_IDENTIFIER		2551686	0		=			
ANR	2551751	Identifier	tokenType		2551686	0					
ANR	2551752	Identifier	LEX_IDENTIFIER		2551686	1					
ANR	2551753	ExpressionStatement	yylval . SetStringValue ( lexBuffer . c_str ( ) )	467:2:10525:10568	2551686	4	True				
ANR	2551754	CallExpression	yylval . SetStringValue ( lexBuffer . c_str ( ) )		2551686	0					
ANR	2551755	Callee	yylval . SetStringValue		2551686	0					
ANR	2551756	MemberAccess	yylval . SetStringValue		2551686	0					
ANR	2551757	Identifier	yylval		2551686	0					
ANR	2551758	Identifier	SetStringValue		2551686	1					
ANR	2551759	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551760	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551761	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551762	Callee	lexBuffer . c_str		2551686	0					
ANR	2551763	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551764	Identifier	lexBuffer		2551686	0					
ANR	2551765	Identifier	c_str		2551686	1					
ANR	2551766	ArgumentList			2551686	1					
ANR	2551767	ReturnStatement	return tokenType ;	469:2:10575:10591	2551686	5	True				
ANR	2551768	Identifier	tokenType		2551686	0					
ANR	2551769	ExpressionStatement	cut ( )	473:1:10670:10676	2551686	3	True				
ANR	2551770	CallExpression	cut ( )		2551686	0					
ANR	2551771	Callee	cut		2551686	0					
ANR	2551772	Identifier	cut		2551686	0					
ANR	2551773	ArgumentList			2551686	1					
ANR	2551774	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""true"" ) == 0 )"		2551686	4					
ANR	2551775	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""true"" ) == 0"	474:5:10683:10724	2551686	0	True				
ANR	2551776	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""true"" ) == 0"		2551686	0		==			
ANR	2551777	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""true"" )"		2551686	0					
ANR	2551778	Callee	strcasecmp		2551686	0					
ANR	2551779	Identifier	strcasecmp		2551686	0					
ANR	2551780	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551781	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551782	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551783	Callee	lexBuffer . c_str		2551686	0					
ANR	2551784	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551785	Identifier	lexBuffer		2551686	0					
ANR	2551786	Identifier	c_str		2551686	1					
ANR	2551787	ArgumentList			2551686	1					
ANR	2551788	Argument	"""true"""		2551686	1					
ANR	2551789	PrimaryExpression	"""true"""		2551686	0					
ANR	2551790	PrimaryExpression	0		2551686	1					
ANR	2551791	CompoundStatement		23:49:457:457	2551686	1					
ANR	2551792	ExpressionStatement	tokenType = LEX_BOOLEAN_VALUE	475:2:10731:10760	2551686	0	True				
ANR	2551793	AssignmentExpression	tokenType = LEX_BOOLEAN_VALUE		2551686	0		=			
ANR	2551794	Identifier	tokenType		2551686	0					
ANR	2551795	Identifier	LEX_BOOLEAN_VALUE		2551686	1					
ANR	2551796	ExpressionStatement	yylval . SetBoolValue ( true )	476:2:10764:10791	2551686	1	True				
ANR	2551797	CallExpression	yylval . SetBoolValue ( true )		2551686	0					
ANR	2551798	Callee	yylval . SetBoolValue		2551686	0					
ANR	2551799	MemberAccess	yylval . SetBoolValue		2551686	0					
ANR	2551800	Identifier	yylval		2551686	0					
ANR	2551801	Identifier	SetBoolValue		2551686	1					
ANR	2551802	ArgumentList	true		2551686	1					
ANR	2551803	Argument	true		2551686	0					
ANR	2551804	Identifier	true		2551686	0					
ANR	2551805	ElseStatement	else		2551686	0					
ANR	2551806	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""false"" ) == 0 )"		2551686	0					
ANR	2551807	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""false"" ) == 0"	477:12:10805:10847	2551686	0	True				
ANR	2551808	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""false"" ) == 0"		2551686	0		==			
ANR	2551809	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""false"" )"		2551686	0					
ANR	2551810	Callee	strcasecmp		2551686	0					
ANR	2551811	Identifier	strcasecmp		2551686	0					
ANR	2551812	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551813	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551814	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551815	Callee	lexBuffer . c_str		2551686	0					
ANR	2551816	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551817	Identifier	lexBuffer		2551686	0					
ANR	2551818	Identifier	c_str		2551686	1					
ANR	2551819	ArgumentList			2551686	1					
ANR	2551820	Argument	"""false"""		2551686	1					
ANR	2551821	PrimaryExpression	"""false"""		2551686	0					
ANR	2551822	PrimaryExpression	0		2551686	1					
ANR	2551823	CompoundStatement		26:57:580:580	2551686	1					
ANR	2551824	ExpressionStatement	tokenType = LEX_BOOLEAN_VALUE	478:2:10854:10883	2551686	0	True				
ANR	2551825	AssignmentExpression	tokenType = LEX_BOOLEAN_VALUE		2551686	0		=			
ANR	2551826	Identifier	tokenType		2551686	0					
ANR	2551827	Identifier	LEX_BOOLEAN_VALUE		2551686	1					
ANR	2551828	ExpressionStatement	yylval . SetBoolValue ( false )	479:2:10887:10915	2551686	1	True				
ANR	2551829	CallExpression	yylval . SetBoolValue ( false )		2551686	0					
ANR	2551830	Callee	yylval . SetBoolValue		2551686	0					
ANR	2551831	MemberAccess	yylval . SetBoolValue		2551686	0					
ANR	2551832	Identifier	yylval		2551686	0					
ANR	2551833	Identifier	SetBoolValue		2551686	1					
ANR	2551834	ArgumentList	false		2551686	1					
ANR	2551835	Argument	false		2551686	0					
ANR	2551836	Identifier	false		2551686	0					
ANR	2551837	ElseStatement	else		2551686	0					
ANR	2551838	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""undefined"" ) == 0 )"		2551686	0					
ANR	2551839	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""undefined"" ) == 0"	480:12:10929:10975	2551686	0	True				
ANR	2551840	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""undefined"" ) == 0"		2551686	0		==			
ANR	2551841	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""undefined"" )"		2551686	0					
ANR	2551842	Callee	strcasecmp		2551686	0					
ANR	2551843	Identifier	strcasecmp		2551686	0					
ANR	2551844	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551845	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551846	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551847	Callee	lexBuffer . c_str		2551686	0					
ANR	2551848	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551849	Identifier	lexBuffer		2551686	0					
ANR	2551850	Identifier	c_str		2551686	1					
ANR	2551851	ArgumentList			2551686	1					
ANR	2551852	Argument	"""undefined"""		2551686	1					
ANR	2551853	PrimaryExpression	"""undefined"""		2551686	0					
ANR	2551854	PrimaryExpression	0		2551686	1					
ANR	2551855	CompoundStatement		29:61:708:708	2551686	1					
ANR	2551856	ExpressionStatement	tokenType = LEX_UNDEFINED_VALUE	481:2:10982:11013	2551686	0	True				
ANR	2551857	AssignmentExpression	tokenType = LEX_UNDEFINED_VALUE		2551686	0		=			
ANR	2551858	Identifier	tokenType		2551686	0					
ANR	2551859	Identifier	LEX_UNDEFINED_VALUE		2551686	1					
ANR	2551860	ElseStatement	else		2551686	0					
ANR	2551861	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""error"" ) == 0 )"		2551686	0					
ANR	2551862	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""error"" ) == 0"	482:12:11027:11069	2551686	0	True				
ANR	2551863	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""error"" ) == 0"		2551686	0		==			
ANR	2551864	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""error"" )"		2551686	0					
ANR	2551865	Callee	strcasecmp		2551686	0					
ANR	2551866	Identifier	strcasecmp		2551686	0					
ANR	2551867	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551868	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551869	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551870	Callee	lexBuffer . c_str		2551686	0					
ANR	2551871	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551872	Identifier	lexBuffer		2551686	0					
ANR	2551873	Identifier	c_str		2551686	1					
ANR	2551874	ArgumentList			2551686	1					
ANR	2551875	Argument	"""error"""		2551686	1					
ANR	2551876	PrimaryExpression	"""error"""		2551686	0					
ANR	2551877	PrimaryExpression	0		2551686	1					
ANR	2551878	CompoundStatement		31:57:802:802	2551686	1					
ANR	2551879	ExpressionStatement	tokenType = LEX_ERROR_VALUE	483:2:11076:11103	2551686	0	True				
ANR	2551880	AssignmentExpression	tokenType = LEX_ERROR_VALUE		2551686	0		=			
ANR	2551881	Identifier	tokenType		2551686	0					
ANR	2551882	Identifier	LEX_ERROR_VALUE		2551686	1					
ANR	2551883	ElseStatement	else		2551686	0					
ANR	2551884	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""is"" ) == 0 )"		2551686	0					
ANR	2551885	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""is"" ) == 0"	484:12:11117:11156	2551686	0	True				
ANR	2551886	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""is"" ) == 0"		2551686	0		==			
ANR	2551887	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""is"" )"		2551686	0					
ANR	2551888	Callee	strcasecmp		2551686	0					
ANR	2551889	Identifier	strcasecmp		2551686	0					
ANR	2551890	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551891	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551892	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551893	Callee	lexBuffer . c_str		2551686	0					
ANR	2551894	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551895	Identifier	lexBuffer		2551686	0					
ANR	2551896	Identifier	c_str		2551686	1					
ANR	2551897	ArgumentList			2551686	1					
ANR	2551898	Argument	"""is"""		2551686	1					
ANR	2551899	PrimaryExpression	"""is"""		2551686	0					
ANR	2551900	PrimaryExpression	0		2551686	1					
ANR	2551901	CompoundStatement		33:55:890:890	2551686	1					
ANR	2551902	ExpressionStatement	tokenType = LEX_META_EQUAL	485:2:11164:11190	2551686	0	True				
ANR	2551903	AssignmentExpression	tokenType = LEX_META_EQUAL		2551686	0		=			
ANR	2551904	Identifier	tokenType		2551686	0					
ANR	2551905	Identifier	LEX_META_EQUAL		2551686	1					
ANR	2551906	ElseStatement	else		2551686	0					
ANR	2551907	IfStatement	"if ( strcasecmp ( lexBuffer . c_str ( ) , ""isnt"" ) == 0 )"		2551686	0					
ANR	2551908	Condition	"strcasecmp ( lexBuffer . c_str ( ) , ""isnt"" ) == 0"	486:12:11204:11245	2551686	0	True				
ANR	2551909	EqualityExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""isnt"" ) == 0"		2551686	0		==			
ANR	2551910	CallExpression	"strcasecmp ( lexBuffer . c_str ( ) , ""isnt"" )"		2551686	0					
ANR	2551911	Callee	strcasecmp		2551686	0					
ANR	2551912	Identifier	strcasecmp		2551686	0					
ANR	2551913	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551914	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551915	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551916	Callee	lexBuffer . c_str		2551686	0					
ANR	2551917	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551918	Identifier	lexBuffer		2551686	0					
ANR	2551919	Identifier	c_str		2551686	1					
ANR	2551920	ArgumentList			2551686	1					
ANR	2551921	Argument	"""isnt"""		2551686	1					
ANR	2551922	PrimaryExpression	"""isnt"""		2551686	0					
ANR	2551923	PrimaryExpression	0		2551686	1					
ANR	2551924	CompoundStatement		35:56:978:978	2551686	1					
ANR	2551925	ExpressionStatement	tokenType = LEX_META_NOT_EQUAL	487:2:11252:11282	2551686	0	True				
ANR	2551926	AssignmentExpression	tokenType = LEX_META_NOT_EQUAL		2551686	0		=			
ANR	2551927	Identifier	tokenType		2551686	0					
ANR	2551928	Identifier	LEX_META_NOT_EQUAL		2551686	1					
ANR	2551929	ElseStatement	else		2551686	0					
ANR	2551930	CompoundStatement		37:8:1022:1022	2551686	0					
ANR	2551931	ExpressionStatement	tokenType = LEX_IDENTIFIER	490:2:11338:11364	2551686	0	True				
ANR	2551932	AssignmentExpression	tokenType = LEX_IDENTIFIER		2551686	0		=			
ANR	2551933	Identifier	tokenType		2551686	0					
ANR	2551934	Identifier	LEX_IDENTIFIER		2551686	1					
ANR	2551935	ExpressionStatement	yylval . SetStringValue ( lexBuffer . c_str ( ) )	491:2:11368:11410	2551686	1	True				
ANR	2551936	CallExpression	yylval . SetStringValue ( lexBuffer . c_str ( ) )		2551686	0					
ANR	2551937	Callee	yylval . SetStringValue		2551686	0					
ANR	2551938	MemberAccess	yylval . SetStringValue		2551686	0					
ANR	2551939	Identifier	yylval		2551686	0					
ANR	2551940	Identifier	SetStringValue		2551686	1					
ANR	2551941	ArgumentList	lexBuffer . c_str ( )		2551686	1					
ANR	2551942	Argument	lexBuffer . c_str ( )		2551686	0					
ANR	2551943	CallExpression	lexBuffer . c_str ( )		2551686	0					
ANR	2551944	Callee	lexBuffer . c_str		2551686	0					
ANR	2551945	MemberAccess	lexBuffer . c_str		2551686	0					
ANR	2551946	Identifier	lexBuffer		2551686	0					
ANR	2551947	Identifier	c_str		2551686	1					
ANR	2551948	ArgumentList			2551686	1					
ANR	2551949	ReturnStatement	return tokenType ;	494:1:11417:11433	2551686	5	True				
ANR	2551950	Identifier	tokenType		2551686	0					
ANR	2551951	ReturnType	int		2551686	1					
ANR	2551952	Identifier	Lexer :: tokenizeAlphaHead		2551686	2					
ANR	2551953	ParameterList			2551686	3					
ANR	2551954	CFGEntryNode	ENTRY		2551686		True				
ANR	2551955	CFGExitNode	EXIT		2551686		True				
ANR	2551956	Symbol	isalpha		2551686						
ANR	2551957	Symbol	LEX_IDENTIFIER		2551686						
ANR	2551958	Symbol	yylval		2551686						
ANR	2551959	Symbol	isalnum		2551686						
ANR	2551960	Symbol	ch		2551686						
ANR	2551961	Symbol	false		2551686						
ANR	2551962	Symbol	LEX_UNDEFINED_VALUE		2551686						
ANR	2551963	Symbol	LEX_ERROR_VALUE		2551686						
ANR	2551964	Symbol	LEX_META_NOT_EQUAL		2551686						
ANR	2551965	Symbol	LEX_BOOLEAN_VALUE		2551686						
ANR	2551966	Symbol	true		2551686						
ANR	2551967	Symbol	lexBuffer . c_str		2551686						
ANR	2551968	Symbol	tokenType		2551686						
ANR	2551969	Symbol	strcasecmp		2551686						
ANR	2551970	Symbol	isdigit		2551686						
ANR	2551971	Symbol	LEX_META_EQUAL		2551686						
ANR	2551972	Symbol	lexBuffer		2551686						
ANR	2551973	Function	Lexer :: tokenizeString	501:0:11568:13175							
ANR	2551974	FunctionDef	Lexer :: tokenizeString (char delim)		2551973	0					
ANR	2551975	CompoundStatement		503:0:11607:13175	2551973	0					
ANR	2551976	IdentifierDeclStatement	bool stringComplete = false ;	504:1:11610:11637	2551973	0	True				
ANR	2551977	IdentifierDecl	stringComplete = false		2551973	0					
ANR	2551978	IdentifierDeclType	bool		2551973	0					
ANR	2551979	Identifier	stringComplete		2551973	1					
ANR	2551980	AssignmentExpression	stringComplete = false		2551973	2		=			
ANR	2551981	Identifier	false		2551973	0					
ANR	2551982	Identifier	false		2551973	1					
ANR	2551983	ExpressionStatement	inString = true	507:1:11676:11691	2551973	1	True				
ANR	2551984	AssignmentExpression	inString = true		2551973	0		=			
ANR	2551985	Identifier	inString		2551973	0					
ANR	2551986	Identifier	true		2551973	1					
ANR	2551987	ExpressionStatement	wind ( )	508:1:11694:11701	2551973	2	True				
ANR	2551988	CallExpression	wind ( )		2551973	0					
ANR	2551989	Callee	wind		2551973	0					
ANR	2551990	Identifier	wind		2551973	0					
ANR	2551991	ArgumentList			2551973	1					
ANR	2551992	ExpressionStatement	mark ( )	509:1:11704:11711	2551973	3	True				
ANR	2551993	CallExpression	mark ( )		2551973	0					
ANR	2551994	Callee	mark		2551973	0					
ANR	2551995	Identifier	mark		2551973	0					
ANR	2551996	ArgumentList			2551973	1					
ANR	2551997	WhileStatement	while ( ! stringComplete )		2551973	4					
ANR	2551998	Condition	! stringComplete	511:8:11723:11737	2551973	0	True				
ANR	2551999	UnaryOperationExpression	! stringComplete		2551973	0					
ANR	2552000	UnaryOperator	!		2551973	0					
ANR	2552001	Identifier	stringComplete		2551973	1					
ANR	2552002	CompoundStatement		11:2:166:179	2551973	1					
ANR	2552003	IdentifierDeclStatement	bool oddBackWhacks = false ;	512:2:11744:11770	2551973	0	True				
ANR	2552004	IdentifierDecl	oddBackWhacks = false		2551973	0					
ANR	2552005	IdentifierDeclType	bool		2551973	0					
ANR	2552006	Identifier	oddBackWhacks		2551973	1					
ANR	2552007	AssignmentExpression	oddBackWhacks = false		2551973	2		=			
ANR	2552008	Identifier	false		2551973	0					
ANR	2552009	Identifier	false		2551973	1					
ANR	2552010	IdentifierDeclStatement	int oldCh = 0 ;	513:2:11774:11787	2551973	1	True				
ANR	2552011	IdentifierDecl	oldCh = 0		2551973	0					
ANR	2552012	IdentifierDeclType	int		2551973	0					
ANR	2552013	Identifier	oldCh		2551973	1					
ANR	2552014	AssignmentExpression	oldCh = 0		2551973	2		=			
ANR	2552015	Identifier	oldCh		2551973	0					
ANR	2552016	PrimaryExpression	0		2551973	1					
ANR	2552017	WhileStatement	while ( ( ch > 0 ) && ( ch != delim || ( ch == delim && oldCh == '\\\\' && oddBackWhacks ) ) )		2551973	2					
ANR	2552018	Condition	( ch > 0 ) && ( ch != delim || ( ch == delim && oldCh == '\\\\' && oddBackWhacks ) )	515:9:11855:11936	2551973	0	True				
ANR	2552019	AndExpression	( ch > 0 ) && ( ch != delim || ( ch == delim && oldCh == '\\\\' && oddBackWhacks ) )		2551973	0		&&			
ANR	2552020	RelationalExpression	ch > 0		2551973	0		>			
ANR	2552021	Identifier	ch		2551973	0					
ANR	2552022	PrimaryExpression	0		2551973	1					
ANR	2552023	OrExpression	ch != delim || ( ch == delim && oldCh == '\\\\' && oddBackWhacks )		2551973	1		||			
ANR	2552024	EqualityExpression	ch != delim		2551973	0		!=			
ANR	2552025	Identifier	ch		2551973	0					
ANR	2552026	Identifier	delim		2551973	1					
ANR	2552027	AndExpression	ch == delim && oldCh == '\\\\' && oddBackWhacks		2551973	1		&&			
ANR	2552028	EqualityExpression	ch == delim		2551973	0		==			
ANR	2552029	Identifier	ch		2551973	0					
ANR	2552030	Identifier	delim		2551973	1					
ANR	2552031	AndExpression	oldCh == '\\\\' && oddBackWhacks		2551973	1		&&			
ANR	2552032	EqualityExpression	oldCh == '\\\\'		2551973	0		==			
ANR	2552033	Identifier	oldCh		2551973	0					
ANR	2552034	PrimaryExpression	'\\\\'		2551973	1					
ANR	2552035	Identifier	oddBackWhacks		2551973	1					
ANR	2552036	CompoundStatement		13:94:332:332	2551973	1					
ANR	2552037	IfStatement	if ( ! oddBackWhacks && ch == '\\\\' )		2551973	0					
ANR	2552038	Condition	! oddBackWhacks && ch == '\\\\'	516:7:11949:11976	2551973	0	True				
ANR	2552039	AndExpression	! oddBackWhacks && ch == '\\\\'		2551973	0		&&			
ANR	2552040	UnaryOperationExpression	! oddBackWhacks		2551973	0					
ANR	2552041	UnaryOperator	!		2551973	0					
ANR	2552042	Identifier	oddBackWhacks		2551973	1					
ANR	2552043	EqualityExpression	ch == '\\\\'		2551973	1		==			
ANR	2552044	Identifier	ch		2551973	0					
ANR	2552045	PrimaryExpression	'\\\\'		2551973	1					
ANR	2552046	CompoundStatement		14:38:372:372	2551973	1					
ANR	2552047	ExpressionStatement	oddBackWhacks = true	517:4:11986:12006	2551973	0	True				
ANR	2552048	AssignmentExpression	oddBackWhacks = true		2551973	0		=			
ANR	2552049	Identifier	oddBackWhacks		2551973	0					
ANR	2552050	Identifier	true		2551973	1					
ANR	2552051	ElseStatement	else		2551973	0					
ANR	2552052	CompoundStatement		17:8:413:413	2551973	0					
ANR	2552053	ExpressionStatement	oddBackWhacks = false	520:4:12027:12048	2551973	0	True				
ANR	2552054	AssignmentExpression	oddBackWhacks = false		2551973	0		=			
ANR	2552055	Identifier	oddBackWhacks		2551973	0					
ANR	2552056	Identifier	false		2551973	1					
ANR	2552057	ExpressionStatement	oldCh = ch	522:3:12058:12068	2551973	1	True				
ANR	2552058	AssignmentExpression	oldCh = ch		2551973	0		=			
ANR	2552059	Identifier	oldCh		2551973	0					
ANR	2552060	Identifier	ch		2551973	1					
ANR	2552061	ExpressionStatement	wind ( )	523:3:12073:12080	2551973	2	True				
ANR	2552062	CallExpression	wind ( )		2551973	0					
ANR	2552063	Callee	wind		2551973	0					
ANR	2552064	Identifier	wind		2551973	0					
ANR	2552065	ArgumentList			2551973	1					
ANR	2552066	IfStatement	if ( ch == delim )		2551973	3					
ANR	2552067	Condition	ch == delim	526:6:12095:12105	2551973	0	True				
ANR	2552068	EqualityExpression	ch == delim		2551973	0		==			
ANR	2552069	Identifier	ch		2551973	0					
ANR	2552070	Identifier	delim		2551973	1					
ANR	2552071	CompoundStatement		25:3:506:522	2551973	1					
ANR	2552072	IdentifierDeclStatement	int tempch = ' ' ;	527:3:12114:12130	2551973	0	True				
ANR	2552073	IdentifierDecl	tempch = ' '		2551973	0					
ANR	2552074	IdentifierDeclType	int		2551973	0					
ANR	2552075	Identifier	tempch		2551973	1					
ANR	2552076	AssignmentExpression	tempch = ' '		2551973	2		=			
ANR	2552077	Identifier	tempch		2551973	0					
ANR	2552078	PrimaryExpression	' '		2551973	1					
ANR	2552079	WhileStatement	while ( isspace ( tempch ) )		2551973	1					
ANR	2552080	Condition	isspace ( tempch )	529:10:12184:12198	2551973	0	True				
ANR	2552081	CallExpression	isspace ( tempch )		2551973	0					
ANR	2552082	Callee	isspace		2551973	0					
ANR	2552083	Identifier	isspace		2551973	0					
ANR	2552084	ArgumentList	tempch		2551973	1					
ANR	2552085	Argument	tempch		2551973	0					
ANR	2552086	Identifier	tempch		2551973	0					
ANR	2552087	CompoundStatement		27:27:593:593	2551973	1					
ANR	2552088	ExpressionStatement	tempch = lexSource -> ReadCharacter ( )	530:4:12207:12242	2551973	0	True				
ANR	2552089	AssignmentExpression	tempch = lexSource -> ReadCharacter ( )		2551973	0		=			
ANR	2552090	Identifier	tempch		2551973	0					
ANR	2552091	CallExpression	lexSource -> ReadCharacter ( )		2551973	1					
ANR	2552092	Callee	lexSource -> ReadCharacter		2551973	0					
ANR	2552093	PtrMemberAccess	lexSource -> ReadCharacter		2551973	0					
ANR	2552094	Identifier	lexSource		2551973	0					
ANR	2552095	Identifier	ReadCharacter		2551973	1					
ANR	2552096	ArgumentList			2551973	1					
ANR	2552097	IfStatement	if ( tempch != delim )		2551973	2					
ANR	2552098	Condition	tempch != delim	532:7:12256:12270	2551973	0	True				
ANR	2552099	EqualityExpression	tempch != delim		2551973	0		!=			
ANR	2552100	Identifier	tempch		2551973	0					
ANR	2552101	Identifier	delim		2551973	1					
ANR	2552102	CompoundStatement		30:24:665:665	2551973	1					
ANR	2552103	IfStatement	if ( tempch != - 1 )		2551973	0					
ANR	2552104	Condition	tempch != - 1	533:20:12335:12346	2551973	0	True				
ANR	2552105	EqualityExpression	tempch != - 1		2551973	0		!=			
ANR	2552106	Identifier	tempch		2551973	0					
ANR	2552107	UnaryOperationExpression	- 1		2551973	1					
ANR	2552108	UnaryOperator	-		2551973	0					
ANR	2552109	PrimaryExpression	1		2551973	1					
ANR	2552110	CompoundStatement		31:34:741:741	2551973	1					
ANR	2552111	ExpressionStatement	lexSource -> UnreadCharacter ( )	534:20:12371:12399	2551973	0	True				
ANR	2552112	CallExpression	lexSource -> UnreadCharacter ( )		2551973	0					
ANR	2552113	Callee	lexSource -> UnreadCharacter		2551973	0					
ANR	2552114	PtrMemberAccess	lexSource -> UnreadCharacter		2551973	0					
ANR	2552115	Identifier	lexSource		2551973	0					
ANR	2552116	Identifier	UnreadCharacter		2551973	1					
ANR	2552117	ArgumentList			2551973	1					
ANR	2552118	ExpressionStatement	stringComplete = true	536:4:12423:12444	2551973	1	True				
ANR	2552119	AssignmentExpression	stringComplete = true		2551973	0		=			
ANR	2552120	Identifier	stringComplete		2551973	0					
ANR	2552121	Identifier	true		2551973	1					
ANR	2552122	ElseStatement	else		2551973	0					
ANR	2552123	CompoundStatement		35:10:848:848	2551973	0					
ANR	2552124	ExpressionStatement	lexBuffer . erase ( lexBufferCount -- )	538:4:12533:12566	2551973	0	True				
ANR	2552125	CallExpression	lexBuffer . erase ( lexBufferCount -- )		2551973	0					
ANR	2552126	Callee	lexBuffer . erase		2551973	0					
ANR	2552127	MemberAccess	lexBuffer . erase		2551973	0					
ANR	2552128	Identifier	lexBuffer		2551973	0					
ANR	2552129	Identifier	erase		2551973	1					
ANR	2552130	ArgumentList	lexBufferCount --		2551973	1					
ANR	2552131	Argument	lexBufferCount --		2551973	0					
ANR	2552132	PostIncDecOperationExpression	lexBufferCount --		2551973	0					
ANR	2552133	Identifier	lexBufferCount		2551973	0					
ANR	2552134	IncDec	--		2551973	1					
ANR	2552135	ExpressionStatement	wind ( )	539:4:12598:12604	2551973	1	True				
ANR	2552136	CallExpression	wind ( )		2551973	0					
ANR	2552137	Callee	wind		2551973	0					
ANR	2552138	Identifier	wind		2551973	0					
ANR	2552139	ArgumentList			2551973	1					
ANR	2552140	ElseStatement	else		2551973	0					
ANR	2552141	CompoundStatement		40:7:1014:1014	2551973	0					
ANR	2552142	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	544:3:12671:12698	2551973	0	True				
ANR	2552143	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2551973	0		=			
ANR	2552144	Identifier	tokenType		2551973	0					
ANR	2552145	Identifier	LEX_TOKEN_ERROR		2551973	1					
ANR	2552146	ReturnStatement	return tokenType ;	545:3:12703:12719	2551973	1	True				
ANR	2552147	Identifier	tokenType		2551973	0					
ANR	2552148	ExpressionStatement	cut ( )	548:1:12733:12739	2551973	5	True				
ANR	2552149	CallExpression	cut ( )		2551973	0					
ANR	2552150	Callee	cut		2551973	0					
ANR	2552151	Identifier	cut		2551973	0					
ANR	2552152	ArgumentList			2551973	1					
ANR	2552153	ExpressionStatement	wind ( )	549:1:12742:12749	2551973	6	True				
ANR	2552154	CallExpression	wind ( )		2551973	0					
ANR	2552155	Callee	wind		2551973	0					
ANR	2552156	Identifier	wind		2551973	0					
ANR	2552157	ArgumentList			2551973	1					
ANR	2552158	IdentifierDeclStatement	bool validStr = true ;	550:1:12781:12801	2551973	7	True				
ANR	2552159	IdentifierDecl	validStr = true		2551973	0					
ANR	2552160	IdentifierDeclType	bool		2551973	0					
ANR	2552161	Identifier	validStr		2551973	1					
ANR	2552162	AssignmentExpression	validStr = true		2551973	2		=			
ANR	2552163	Identifier	true		2551973	0					
ANR	2552164	Identifier	true		2551973	1					
ANR	2552165	ExpressionStatement	"convert_escapes ( lexBuffer , validStr )"	551:1:12859:12895	2551973	8	True				
ANR	2552166	CallExpression	"convert_escapes ( lexBuffer , validStr )"		2551973	0					
ANR	2552167	Callee	convert_escapes		2551973	0					
ANR	2552168	Identifier	convert_escapes		2551973	0					
ANR	2552169	ArgumentList	lexBuffer		2551973	1					
ANR	2552170	Argument	lexBuffer		2551973	0					
ANR	2552171	Identifier	lexBuffer		2551973	0					
ANR	2552172	Argument	validStr		2551973	1					
ANR	2552173	Identifier	validStr		2551973	0					
ANR	2552174	ExpressionStatement	yylval . SetStringValue ( lexBuffer . c_str ( ) )	552:1:12898:12941	2551973	9	True				
ANR	2552175	CallExpression	yylval . SetStringValue ( lexBuffer . c_str ( ) )		2551973	0					
ANR	2552176	Callee	yylval . SetStringValue		2551973	0					
ANR	2552177	MemberAccess	yylval . SetStringValue		2551973	0					
ANR	2552178	Identifier	yylval		2551973	0					
ANR	2552179	Identifier	SetStringValue		2551973	1					
ANR	2552180	ArgumentList	lexBuffer . c_str ( )		2551973	1					
ANR	2552181	Argument	lexBuffer . c_str ( )		2551973	0					
ANR	2552182	CallExpression	lexBuffer . c_str ( )		2551973	0					
ANR	2552183	Callee	lexBuffer . c_str		2551973	0					
ANR	2552184	MemberAccess	lexBuffer . c_str		2551973	0					
ANR	2552185	Identifier	lexBuffer		2551973	0					
ANR	2552186	Identifier	c_str		2551973	1					
ANR	2552187	ArgumentList			2551973	1					
ANR	2552188	IfStatement	if ( validStr )		2551973	10					
ANR	2552189	Condition	validStr	553:5:12948:12955	2551973	0	True				
ANR	2552190	Identifier	validStr		2551973	0					
ANR	2552191	CompoundStatement		51:15:1350:1350	2551973	1					
ANR	2552192	IfStatement	"if ( delim == '\\""' )"		2551973	0					
ANR	2552193	Condition	"delim == '\\""'"	554:5:12965:12977	2551973	0	True				
ANR	2552194	EqualityExpression	"delim == '\\""'"		2551973	0		==			
ANR	2552195	Identifier	delim		2551973	0					
ANR	2552196	PrimaryExpression	"'\\""'"		2551973	1					
ANR	2552197	CompoundStatement		52:20:1372:1372	2551973	1					
ANR	2552198	ExpressionStatement	tokenType = LEX_STRING_VALUE	555:3:12985:13013	2551973	0	True				
ANR	2552199	AssignmentExpression	tokenType = LEX_STRING_VALUE		2551973	0		=			
ANR	2552200	Identifier	tokenType		2551973	0					
ANR	2552201	Identifier	LEX_STRING_VALUE		2551973	1					
ANR	2552202	ElseStatement	else		2551973	0					
ANR	2552203	CompoundStatement		55:7:1418:1418	2551973	0					
ANR	2552204	ExpressionStatement	tokenType = LEX_IDENTIFIER	558:3:13031:13057	2551973	0	True				
ANR	2552205	AssignmentExpression	tokenType = LEX_IDENTIFIER		2551973	0		=			
ANR	2552206	Identifier	tokenType		2551973	0					
ANR	2552207	Identifier	LEX_IDENTIFIER		2551973	1					
ANR	2552208	ElseStatement	else		2551973	0					
ANR	2552209	CompoundStatement		59:6:1464:1464	2551973	0					
ANR	2552210	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	562:2:13076:13103	2551973	0	True				
ANR	2552211	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2551973	0		=			
ANR	2552212	Identifier	tokenType		2551973	0					
ANR	2552213	Identifier	LEX_TOKEN_ERROR		2551973	1					
ANR	2552214	ReturnStatement	return tokenType ;	565:1:13157:13173	2551973	11	True				
ANR	2552215	Identifier	tokenType		2551973	0					
ANR	2552216	ReturnType	int		2551973	1					
ANR	2552217	Identifier	Lexer :: tokenizeString		2551973	2					
ANR	2552218	ParameterList	char delim		2551973	3					
ANR	2552219	Parameter	char delim	502:15:11595:11604	2551973	0	True				
ANR	2552220	ParameterType	char		2551973	0					
ANR	2552221	Identifier	delim		2551973	1					
ANR	2552222	CFGEntryNode	ENTRY		2551973		True				
ANR	2552223	CFGExitNode	EXIT		2551973		True				
ANR	2552224	Symbol	oddBackWhacks		2551973						
ANR	2552225	Symbol	oldCh		2551973						
ANR	2552226	Symbol	yylval		2551973						
ANR	2552227	Symbol	LEX_IDENTIFIER		2551973						
ANR	2552228	Symbol	ch		2551973						
ANR	2552229	Symbol	false		2551973						
ANR	2552230	Symbol	isspace		2551973						
ANR	2552231	Symbol	stringComplete		2551973						
ANR	2552232	Symbol	LEX_TOKEN_ERROR		2551973						
ANR	2552233	Symbol	LEX_STRING_VALUE		2551973						
ANR	2552234	Symbol	lexSource		2551973						
ANR	2552235	Symbol	tempch		2551973						
ANR	2552236	Symbol	* lexSource		2551973						
ANR	2552237	Symbol	lexSource -> ReadCharacter		2551973						
ANR	2552238	Symbol	inString		2551973						
ANR	2552239	Symbol	true		2551973						
ANR	2552240	Symbol	lexBuffer . c_str		2551973						
ANR	2552241	Symbol	tokenType		2551973						
ANR	2552242	Symbol	lexBufferCount		2551973						
ANR	2552243	Symbol	validStr		2551973						
ANR	2552244	Symbol	lexBuffer		2551973						
ANR	2552245	Symbol	delim		2551973						
ANR	2552246	Function	Lexer :: tokenizePunctOperator	570:0:13242:16455							
ANR	2552247	FunctionDef	Lexer :: tokenizePunctOperator ()		2552246	0					
ANR	2552248	CompoundStatement		572:0:13283:16455	2552246	0					
ANR	2552249	IdentifierDeclStatement	int oldch = ch ;	574:1:13328:13342	2552246	0	True				
ANR	2552250	IdentifierDecl	oldch = ch		2552246	0					
ANR	2552251	IdentifierDeclType	int		2552246	0					
ANR	2552252	Identifier	oldch		2552246	1					
ANR	2552253	AssignmentExpression	oldch = ch		2552246	2		=			
ANR	2552254	Identifier	ch		2552246	0					
ANR	2552255	Identifier	ch		2552246	1					
ANR	2552256	IdentifierDeclStatement	int extra_lookahead ;	575:1:13345:13364	2552246	1	True				
ANR	2552257	IdentifierDecl	extra_lookahead		2552246	0					
ANR	2552258	IdentifierDeclType	int		2552246	0					
ANR	2552259	Identifier	extra_lookahead		2552246	1					
ANR	2552260	ExpressionStatement	mark ( )	577:1:13368:13375	2552246	2	True				
ANR	2552261	CallExpression	mark ( )		2552246	0					
ANR	2552262	Callee	mark		2552246	0					
ANR	2552263	Identifier	mark		2552246	0					
ANR	2552264	ArgumentList			2552246	1					
ANR	2552265	ExpressionStatement	wind ( )	578:1:13378:13385	2552246	3	True				
ANR	2552266	CallExpression	wind ( )		2552246	0					
ANR	2552267	Callee	wind		2552246	0					
ANR	2552268	Identifier	wind		2552246	0					
ANR	2552269	ArgumentList			2552246	1					
ANR	2552270	SwitchStatement	switch ( oldch )		2552246	4					
ANR	2552271	Condition	oldch	579:9:13396:13400	2552246	0	True				
ANR	2552272	Identifier	oldch		2552246	0					
ANR	2552273	CompoundStatement		8:16:119:119	2552246	1					
ANR	2552274	Label	case '.' :	581:2:13446:13454	2552246	0	True				
ANR	2552275	ExpressionStatement	tokenType = LEX_SELECTION	582:3:13459:13484	2552246	1	True				
ANR	2552276	AssignmentExpression	tokenType = LEX_SELECTION		2552246	0		=			
ANR	2552277	Identifier	tokenType		2552246	0					
ANR	2552278	Identifier	LEX_SELECTION		2552246	1					
ANR	2552279	BreakStatement	break ;	583:3:13489:13494	2552246	2	True				
ANR	2552280	Label	case '*' :	586:2:13500:13508	2552246	3	True				
ANR	2552281	ExpressionStatement	tokenType = LEX_MULTIPLY	587:3:13514:13538	2552246	4	True				
ANR	2552282	AssignmentExpression	tokenType = LEX_MULTIPLY		2552246	0		=			
ANR	2552283	Identifier	tokenType		2552246	0					
ANR	2552284	Identifier	LEX_MULTIPLY		2552246	1					
ANR	2552285	BreakStatement	break ;	588:3:13545:13550	2552246	5	True				
ANR	2552286	Label	case '/' :	591:2:13556:13564	2552246	6	True				
ANR	2552287	ExpressionStatement	tokenType = LEX_DIVIDE	592:3:13570:13592	2552246	7	True				
ANR	2552288	AssignmentExpression	tokenType = LEX_DIVIDE		2552246	0		=			
ANR	2552289	Identifier	tokenType		2552246	0					
ANR	2552290	Identifier	LEX_DIVIDE		2552246	1					
ANR	2552291	BreakStatement	break ;	593:3:13599:13604	2552246	8	True				
ANR	2552292	Label	case '%' :	596:2:13610:13618	2552246	9	True				
ANR	2552293	ExpressionStatement	tokenType = LEX_MODULUS	597:3:13624:13647	2552246	10	True				
ANR	2552294	AssignmentExpression	tokenType = LEX_MODULUS		2552246	0		=			
ANR	2552295	Identifier	tokenType		2552246	0					
ANR	2552296	Identifier	LEX_MODULUS		2552246	1					
ANR	2552297	BreakStatement	break ;	598:3:13654:13659	2552246	11	True				
ANR	2552298	Label	case '+' :	601:2:13665:13673	2552246	12	True				
ANR	2552299	ExpressionStatement	tokenType = LEX_PLUS	602:3:13679:13699	2552246	13	True				
ANR	2552300	AssignmentExpression	tokenType = LEX_PLUS		2552246	0		=			
ANR	2552301	Identifier	tokenType		2552246	0					
ANR	2552302	Identifier	LEX_PLUS		2552246	1					
ANR	2552303	BreakStatement	break ;	603:3:13707:13712	2552246	14	True				
ANR	2552304	Label	case '-' :	606:2:13718:13726	2552246	15	True				
ANR	2552305	ExpressionStatement	tokenType = LEX_MINUS	607:3:13732:13753	2552246	16	True				
ANR	2552306	AssignmentExpression	tokenType = LEX_MINUS		2552246	0		=			
ANR	2552307	Identifier	tokenType		2552246	0					
ANR	2552308	Identifier	LEX_MINUS		2552246	1					
ANR	2552309	BreakStatement	break ;	608:3:13761:13766	2552246	17	True				
ANR	2552310	Label	case '~' :	611:2:13772:13780	2552246	18	True				
ANR	2552311	ExpressionStatement	tokenType = LEX_BITWISE_NOT	612:3:13786:13813	2552246	19	True				
ANR	2552312	AssignmentExpression	tokenType = LEX_BITWISE_NOT		2552246	0		=			
ANR	2552313	Identifier	tokenType		2552246	0					
ANR	2552314	Identifier	LEX_BITWISE_NOT		2552246	1					
ANR	2552315	BreakStatement	break ;	613:3:13819:13824	2552246	20	True				
ANR	2552316	Label	case '^' :	616:2:13830:13838	2552246	21	True				
ANR	2552317	ExpressionStatement	tokenType = LEX_BITWISE_XOR	617:3:13844:13871	2552246	22	True				
ANR	2552318	AssignmentExpression	tokenType = LEX_BITWISE_XOR		2552246	0		=			
ANR	2552319	Identifier	tokenType		2552246	0					
ANR	2552320	Identifier	LEX_BITWISE_XOR		2552246	1					
ANR	2552321	BreakStatement	break ;	618:3:13877:13882	2552246	23	True				
ANR	2552322	Label	case '?' :	621:2:13888:13896	2552246	24	True				
ANR	2552323	ExpressionStatement	tokenType = LEX_QMARK	622:3:13902:13923	2552246	25	True				
ANR	2552324	AssignmentExpression	tokenType = LEX_QMARK		2552246	0		=			
ANR	2552325	Identifier	tokenType		2552246	0					
ANR	2552326	Identifier	LEX_QMARK		2552246	1					
ANR	2552327	BreakStatement	break ;	623:3:13931:13936	2552246	26	True				
ANR	2552328	Label	case ':' :	626:2:13942:13950	2552246	27	True				
ANR	2552329	ExpressionStatement	tokenType = LEX_COLON	627:3:13956:13977	2552246	28	True				
ANR	2552330	AssignmentExpression	tokenType = LEX_COLON		2552246	0		=			
ANR	2552331	Identifier	tokenType		2552246	0					
ANR	2552332	Identifier	LEX_COLON		2552246	1					
ANR	2552333	BreakStatement	break ;	628:3:13985:13990	2552246	29	True				
ANR	2552334	Label	case ';' :	631:2:13996:14004	2552246	30	True				
ANR	2552335	ExpressionStatement	tokenType = LEX_SEMICOLON	632:3:14010:14035	2552246	31	True				
ANR	2552336	AssignmentExpression	tokenType = LEX_SEMICOLON		2552246	0		=			
ANR	2552337	Identifier	tokenType		2552246	0					
ANR	2552338	Identifier	LEX_SEMICOLON		2552246	1					
ANR	2552339	BreakStatement	break ;	633:3:14042:14047	2552246	32	True				
ANR	2552340	Label	"case ',' :"	636:2:14053:14061	2552246	33	True				
ANR	2552341	ExpressionStatement	tokenType = LEX_COMMA	637:3:14066:14087	2552246	34	True				
ANR	2552342	AssignmentExpression	tokenType = LEX_COMMA		2552246	0		=			
ANR	2552343	Identifier	tokenType		2552246	0					
ANR	2552344	Identifier	LEX_COMMA		2552246	1					
ANR	2552345	BreakStatement	break ;	638:3:14092:14097	2552246	35	True				
ANR	2552346	Label	case '[' :	641:2:14103:14111	2552246	36	True				
ANR	2552347	ExpressionStatement	tokenType = LEX_OPEN_BOX	642:3:14117:14141	2552246	37	True				
ANR	2552348	AssignmentExpression	tokenType = LEX_OPEN_BOX		2552246	0		=			
ANR	2552349	Identifier	tokenType		2552246	0					
ANR	2552350	Identifier	LEX_OPEN_BOX		2552246	1					
ANR	2552351	BreakStatement	break ;	643:3:14148:14153	2552246	38	True				
ANR	2552352	Label	case ']' :	646:2:14159:14167	2552246	39	True				
ANR	2552353	ExpressionStatement	tokenType = LEX_CLOSE_BOX	647:3:14173:14198	2552246	40	True				
ANR	2552354	AssignmentExpression	tokenType = LEX_CLOSE_BOX		2552246	0		=			
ANR	2552355	Identifier	tokenType		2552246	0					
ANR	2552356	Identifier	LEX_CLOSE_BOX		2552246	1					
ANR	2552357	BreakStatement	break ;	648:3:14205:14210	2552246	41	True				
ANR	2552358	Label	case '(' :	651:2:14216:14224	2552246	42	True				
ANR	2552359	ExpressionStatement	tokenType = LEX_OPEN_PAREN	652:3:14230:14256	2552246	43	True				
ANR	2552360	AssignmentExpression	tokenType = LEX_OPEN_PAREN		2552246	0		=			
ANR	2552361	Identifier	tokenType		2552246	0					
ANR	2552362	Identifier	LEX_OPEN_PAREN		2552246	1					
ANR	2552363	BreakStatement	break ;	653:3:14262:14267	2552246	44	True				
ANR	2552364	Label	case ')' :	656:2:14273:14281	2552246	45	True				
ANR	2552365	ExpressionStatement	tokenType = LEX_CLOSE_PAREN	657:3:14287:14314	2552246	46	True				
ANR	2552366	AssignmentExpression	tokenType = LEX_CLOSE_PAREN		2552246	0		=			
ANR	2552367	Identifier	tokenType		2552246	0					
ANR	2552368	Identifier	LEX_CLOSE_PAREN		2552246	1					
ANR	2552369	BreakStatement	break ;	658:3:14320:14325	2552246	47	True				
ANR	2552370	Label	case '{' :	661:2:14331:14339	2552246	48	True				
ANR	2552371	ExpressionStatement	tokenType = LEX_OPEN_BRACE	662:3:14344:14370	2552246	49	True				
ANR	2552372	AssignmentExpression	tokenType = LEX_OPEN_BRACE		2552246	0		=			
ANR	2552373	Identifier	tokenType		2552246	0					
ANR	2552374	Identifier	LEX_OPEN_BRACE		2552246	1					
ANR	2552375	BreakStatement	break ;	663:3:14375:14380	2552246	50	True				
ANR	2552376	Label	case '}' :	666:2:14386:14394	2552246	51	True				
ANR	2552377	ExpressionStatement	tokenType = LEX_CLOSE_BRACE	667:3:14399:14426	2552246	52	True				
ANR	2552378	AssignmentExpression	tokenType = LEX_CLOSE_BRACE		2552246	0		=			
ANR	2552379	Identifier	tokenType		2552246	0					
ANR	2552380	Identifier	LEX_CLOSE_BRACE		2552246	1					
ANR	2552381	BreakStatement	break ;	668:3:14431:14436	2552246	53	True				
ANR	2552382	Label	case '&' :	673:2:14484:14492	2552246	54	True				
ANR	2552383	ExpressionStatement	tokenType = LEX_BITWISE_AND	674:3:14497:14524	2552246	55	True				
ANR	2552384	AssignmentExpression	tokenType = LEX_BITWISE_AND		2552246	0		=			
ANR	2552385	Identifier	tokenType		2552246	0					
ANR	2552386	Identifier	LEX_BITWISE_AND		2552246	1					
ANR	2552387	IfStatement	if ( ch == '&' )		2552246	56					
ANR	2552388	Condition	ch == '&'	675:7:14533:14541	2552246	0	True				
ANR	2552389	EqualityExpression	ch == '&'		2552246	0		==			
ANR	2552390	Identifier	ch		2552246	0					
ANR	2552391	PrimaryExpression	'&'		2552246	1					
ANR	2552392	CompoundStatement		104:18:1260:1260	2552246	1					
ANR	2552393	ExpressionStatement	tokenType = LEX_LOGICAL_AND	676:4:14550:14577	2552246	0	True				
ANR	2552394	AssignmentExpression	tokenType = LEX_LOGICAL_AND		2552246	0		=			
ANR	2552395	Identifier	tokenType		2552246	0					
ANR	2552396	Identifier	LEX_LOGICAL_AND		2552246	1					
ANR	2552397	ExpressionStatement	wind ( )	677:4:14583:14590	2552246	1	True				
ANR	2552398	CallExpression	wind ( )		2552246	0					
ANR	2552399	Callee	wind		2552246	0					
ANR	2552400	Identifier	wind		2552246	0					
ANR	2552401	ArgumentList			2552246	1					
ANR	2552402	BreakStatement	break ;	679:3:14600:14605	2552246	57	True				
ANR	2552403	Label	case '|' :	682:2:14611:14619	2552246	58	True				
ANR	2552404	ExpressionStatement	tokenType = LEX_BITWISE_OR	683:3:14624:14650	2552246	59	True				
ANR	2552405	AssignmentExpression	tokenType = LEX_BITWISE_OR		2552246	0		=			
ANR	2552406	Identifier	tokenType		2552246	0					
ANR	2552407	Identifier	LEX_BITWISE_OR		2552246	1					
ANR	2552408	IfStatement	if ( ch == '|' )		2552246	60					
ANR	2552409	Condition	ch == '|'	684:7:14659:14667	2552246	0	True				
ANR	2552410	EqualityExpression	ch == '|'		2552246	0		==			
ANR	2552411	Identifier	ch		2552246	0					
ANR	2552412	PrimaryExpression	'|'		2552246	1					
ANR	2552413	CompoundStatement		113:18:1386:1386	2552246	1					
ANR	2552414	ExpressionStatement	tokenType = LEX_LOGICAL_OR	685:4:14676:14702	2552246	0	True				
ANR	2552415	AssignmentExpression	tokenType = LEX_LOGICAL_OR		2552246	0		=			
ANR	2552416	Identifier	tokenType		2552246	0					
ANR	2552417	Identifier	LEX_LOGICAL_OR		2552246	1					
ANR	2552418	ExpressionStatement	wind ( )	686:4:14708:14715	2552246	1	True				
ANR	2552419	CallExpression	wind ( )		2552246	0					
ANR	2552420	Callee	wind		2552246	0					
ANR	2552421	Identifier	wind		2552246	0					
ANR	2552422	ArgumentList			2552246	1					
ANR	2552423	BreakStatement	break ;	688:3:14725:14730	2552246	61	True				
ANR	2552424	Label	case '<' :	691:2:14736:14744	2552246	62	True				
ANR	2552425	ExpressionStatement	tokenType = LEX_LESS_THAN	692:3:14749:14774	2552246	63	True				
ANR	2552426	AssignmentExpression	tokenType = LEX_LESS_THAN		2552246	0		=			
ANR	2552427	Identifier	tokenType		2552246	0					
ANR	2552428	Identifier	LEX_LESS_THAN		2552246	1					
ANR	2552429	SwitchStatement	switch ( ch )		2552246	64					
ANR	2552430	Condition	ch	693:11:14787:14788	2552246	0	True				
ANR	2552431	Identifier	ch		2552246	0					
ANR	2552432	CompoundStatement		122:15:1507:1507	2552246	1					
ANR	2552433	Label	case '=' :	694:4:14797:14805	2552246	0	True				
ANR	2552434	ExpressionStatement	tokenType = LEX_LESS_OR_EQUAL	695:5:14812:14841	2552246	1	True				
ANR	2552435	AssignmentExpression	tokenType = LEX_LESS_OR_EQUAL		2552246	0		=			
ANR	2552436	Identifier	tokenType		2552246	0					
ANR	2552437	Identifier	LEX_LESS_OR_EQUAL		2552246	1					
ANR	2552438	ExpressionStatement	wind ( )	696:5:14848:14855	2552246	2	True				
ANR	2552439	CallExpression	wind ( )		2552246	0					
ANR	2552440	Callee	wind		2552246	0					
ANR	2552441	Identifier	wind		2552246	0					
ANR	2552442	ArgumentList			2552246	1					
ANR	2552443	BreakStatement	break ;	697:5:14862:14867	2552246	3	True				
ANR	2552444	Label	case '<' :	699:4:14874:14882	2552246	4	True				
ANR	2552445	ExpressionStatement	tokenType = LEX_LEFT_SHIFT	700:5:14889:14915	2552246	5	True				
ANR	2552446	AssignmentExpression	tokenType = LEX_LEFT_SHIFT		2552246	0		=			
ANR	2552447	Identifier	tokenType		2552246	0					
ANR	2552448	Identifier	LEX_LEFT_SHIFT		2552246	1					
ANR	2552449	ExpressionStatement	wind ( )	701:5:14922:14929	2552246	6	True				
ANR	2552450	CallExpression	wind ( )		2552246	0					
ANR	2552451	Callee	wind		2552246	0					
ANR	2552452	Identifier	wind		2552246	0					
ANR	2552453	ArgumentList			2552246	1					
ANR	2552454	BreakStatement	break ;	702:5:14936:14941	2552246	7	True				
ANR	2552455	Label	default :	704:4:14948:14955	2552246	8	True				
ANR	2552456	Identifier	default		2552246	0					
ANR	2552457	BreakStatement	break ;	706:5:15010:15015	2552246	9	True				
ANR	2552458	BreakStatement	break ;	708:3:15025:15030	2552246	65	True				
ANR	2552459	Label	case '>' :	711:2:15036:15044	2552246	66	True				
ANR	2552460	ExpressionStatement	tokenType = LEX_GREATER_THAN	712:3:15049:15077	2552246	67	True				
ANR	2552461	AssignmentExpression	tokenType = LEX_GREATER_THAN		2552246	0		=			
ANR	2552462	Identifier	tokenType		2552246	0					
ANR	2552463	Identifier	LEX_GREATER_THAN		2552246	1					
ANR	2552464	SwitchStatement	switch ( ch )		2552246	68					
ANR	2552465	Condition	ch	713:11:15090:15091	2552246	0	True				
ANR	2552466	Identifier	ch		2552246	0					
ANR	2552467	CompoundStatement		142:15:1810:1810	2552246	1					
ANR	2552468	Label	case '=' :	714:4:15100:15108	2552246	0	True				
ANR	2552469	ExpressionStatement	tokenType = LEX_GREATER_OR_EQUAL	715:5:15115:15147	2552246	1	True				
ANR	2552470	AssignmentExpression	tokenType = LEX_GREATER_OR_EQUAL		2552246	0		=			
ANR	2552471	Identifier	tokenType		2552246	0					
ANR	2552472	Identifier	LEX_GREATER_OR_EQUAL		2552246	1					
ANR	2552473	ExpressionStatement	wind ( )	716:5:15154:15161	2552246	2	True				
ANR	2552474	CallExpression	wind ( )		2552246	0					
ANR	2552475	Callee	wind		2552246	0					
ANR	2552476	Identifier	wind		2552246	0					
ANR	2552477	ArgumentList			2552246	1					
ANR	2552478	BreakStatement	break ;	717:5:15168:15173	2552246	3	True				
ANR	2552479	Label	case '>' :	719:4:15180:15188	2552246	4	True				
ANR	2552480	ExpressionStatement	tokenType = LEX_RIGHT_SHIFT	720:5:15195:15222	2552246	5	True				
ANR	2552481	AssignmentExpression	tokenType = LEX_RIGHT_SHIFT		2552246	0		=			
ANR	2552482	Identifier	tokenType		2552246	0					
ANR	2552483	Identifier	LEX_RIGHT_SHIFT		2552246	1					
ANR	2552484	ExpressionStatement	wind ( )	721:5:15229:15236	2552246	6	True				
ANR	2552485	CallExpression	wind ( )		2552246	0					
ANR	2552486	Callee	wind		2552246	0					
ANR	2552487	Identifier	wind		2552246	0					
ANR	2552488	ArgumentList			2552246	1					
ANR	2552489	IfStatement	if ( ch == '>' )		2552246	7					
ANR	2552490	Condition	ch == '>'	722:9:15247:15255	2552246	0	True				
ANR	2552491	EqualityExpression	ch == '>'		2552246	0		==			
ANR	2552492	Identifier	ch		2552246	0					
ANR	2552493	PrimaryExpression	'>'		2552246	1					
ANR	2552494	CompoundStatement		151:20:1974:1974	2552246	1					
ANR	2552495	ExpressionStatement	tokenType = LEX_URIGHT_SHIFT	723:6:15266:15294	2552246	0	True				
ANR	2552496	AssignmentExpression	tokenType = LEX_URIGHT_SHIFT		2552246	0		=			
ANR	2552497	Identifier	tokenType		2552246	0					
ANR	2552498	Identifier	LEX_URIGHT_SHIFT		2552246	1					
ANR	2552499	ExpressionStatement	wind ( )	724:6:15302:15309	2552246	1	True				
ANR	2552500	CallExpression	wind ( )		2552246	0					
ANR	2552501	Callee	wind		2552246	0					
ANR	2552502	Identifier	wind		2552246	0					
ANR	2552503	ArgumentList			2552246	1					
ANR	2552504	BreakStatement	break ;	726:5:15323:15328	2552246	8	True				
ANR	2552505	Label	default :	728:4:15339:15346	2552246	9	True				
ANR	2552506	Identifier	default		2552246	0					
ANR	2552507	BreakStatement	break ;	730:5:15401:15406	2552246	10	True				
ANR	2552508	BreakStatement	break ;	732:3:15416:15421	2552246	69	True				
ANR	2552509	Label	case '=' :	735:2:15427:15435	2552246	70	True				
ANR	2552510	ExpressionStatement	tokenType = LEX_BOUND_TO	736:3:15440:15464	2552246	71	True				
ANR	2552511	AssignmentExpression	tokenType = LEX_BOUND_TO		2552246	0		=			
ANR	2552512	Identifier	tokenType		2552246	0					
ANR	2552513	Identifier	LEX_BOUND_TO		2552246	1					
ANR	2552514	SwitchStatement	switch ( ch )		2552246	72					
ANR	2552515	Condition	ch	737:11:15477:15478	2552246	0	True				
ANR	2552516	Identifier	ch		2552246	0					
ANR	2552517	CompoundStatement		166:15:2197:2197	2552246	1					
ANR	2552518	Label	case '=' :	738:4:15487:15495	2552246	0	True				
ANR	2552519	ExpressionStatement	tokenType = LEX_EQUAL	739:5:15502:15523	2552246	1	True				
ANR	2552520	AssignmentExpression	tokenType = LEX_EQUAL		2552246	0		=			
ANR	2552521	Identifier	tokenType		2552246	0					
ANR	2552522	Identifier	LEX_EQUAL		2552246	1					
ANR	2552523	ExpressionStatement	wind ( )	740:5:15530:15537	2552246	2	True				
ANR	2552524	CallExpression	wind ( )		2552246	0					
ANR	2552525	Callee	wind		2552246	0					
ANR	2552526	Identifier	wind		2552246	0					
ANR	2552527	ArgumentList			2552246	1					
ANR	2552528	BreakStatement	break ;	741:5:15544:15549	2552246	3	True				
ANR	2552529	Label	case '?' :	743:4:15556:15564	2552246	4	True				
ANR	2552530	ExpressionStatement	tokenType = LEX_META_EQUAL	744:5:15571:15597	2552246	5	True				
ANR	2552531	AssignmentExpression	tokenType = LEX_META_EQUAL		2552246	0		=			
ANR	2552532	Identifier	tokenType		2552246	0					
ANR	2552533	Identifier	LEX_META_EQUAL		2552246	1					
ANR	2552534	ExpressionStatement	wind ( )	745:5:15604:15611	2552246	6	True				
ANR	2552535	CallExpression	wind ( )		2552246	0					
ANR	2552536	Callee	wind		2552246	0					
ANR	2552537	Identifier	wind		2552246	0					
ANR	2552538	ArgumentList			2552246	1					
ANR	2552539	IfStatement	if ( ch != '=' )		2552246	7					
ANR	2552540	Condition	ch != '='	748:9:15680:15688	2552246	0	True				
ANR	2552541	EqualityExpression	ch != '='		2552246	0		!=			
ANR	2552542	Identifier	ch		2552246	0					
ANR	2552543	PrimaryExpression	'='		2552246	1					
ANR	2552544	CompoundStatement		178:5:2413:2413	2552246	1					
ANR	2552545	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	750:6:15705:15732	2552246	0	True				
ANR	2552546	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2552246	0		=			
ANR	2552547	Identifier	tokenType		2552246	0					
ANR	2552548	Identifier	LEX_TOKEN_ERROR		2552246	1					
ANR	2552549	ReturnStatement	return tokenType ;	751:6:15740:15756	2552246	1	True				
ANR	2552550	Identifier	tokenType		2552246	0					
ANR	2552551	ExpressionStatement	wind ( )	754:5:15771:15778	2552246	8	True				
ANR	2552552	CallExpression	wind ( )		2552246	0					
ANR	2552553	Callee	wind		2552246	0					
ANR	2552554	Identifier	wind		2552246	0					
ANR	2552555	ArgumentList			2552246	1					
ANR	2552556	BreakStatement	break ;	755:5:15785:15790	2552246	9	True				
ANR	2552557	Label	case '!' :	757:4:15797:15805	2552246	10	True				
ANR	2552558	ExpressionStatement	extra_lookahead = lexSource -> ReadCharacter ( )	758:5:15812:15856	2552246	11	True				
ANR	2552559	AssignmentExpression	extra_lookahead = lexSource -> ReadCharacter ( )		2552246	0		=			
ANR	2552560	Identifier	extra_lookahead		2552246	0					
ANR	2552561	CallExpression	lexSource -> ReadCharacter ( )		2552246	1					
ANR	2552562	Callee	lexSource -> ReadCharacter		2552246	0					
ANR	2552563	PtrMemberAccess	lexSource -> ReadCharacter		2552246	0					
ANR	2552564	Identifier	lexSource		2552246	0					
ANR	2552565	Identifier	ReadCharacter		2552246	1					
ANR	2552566	ArgumentList			2552246	1					
ANR	2552567	ExpressionStatement	lexSource -> UnreadCharacter ( )	759:5:15863:15891	2552246	12	True				
ANR	2552568	CallExpression	lexSource -> UnreadCharacter ( )		2552246	0					
ANR	2552569	Callee	lexSource -> UnreadCharacter		2552246	0					
ANR	2552570	PtrMemberAccess	lexSource -> UnreadCharacter		2552246	0					
ANR	2552571	Identifier	lexSource		2552246	0					
ANR	2552572	Identifier	UnreadCharacter		2552246	1					
ANR	2552573	ArgumentList			2552246	1					
ANR	2552574	IfStatement	if ( extra_lookahead == '=' )		2552246	13					
ANR	2552575	Condition	extra_lookahead == '='	760:9:15902:15923	2552246	0	True				
ANR	2552576	EqualityExpression	extra_lookahead == '='		2552246	0		==			
ANR	2552577	Identifier	extra_lookahead		2552246	0					
ANR	2552578	PrimaryExpression	'='		2552246	1					
ANR	2552579	CompoundStatement		189:33:2642:2642	2552246	1					
ANR	2552580	ExpressionStatement	tokenType = LEX_META_NOT_EQUAL	761:6:15934:15964	2552246	0	True				
ANR	2552581	AssignmentExpression	tokenType = LEX_META_NOT_EQUAL		2552246	0		=			
ANR	2552582	Identifier	tokenType		2552246	0					
ANR	2552583	Identifier	LEX_META_NOT_EQUAL		2552246	1					
ANR	2552584	ExpressionStatement	wind ( )	762:6:15972:15978	2552246	1	True				
ANR	2552585	CallExpression	wind ( )		2552246	0					
ANR	2552586	Callee	wind		2552246	0					
ANR	2552587	Identifier	wind		2552246	0					
ANR	2552588	ArgumentList			2552246	1					
ANR	2552589	ExpressionStatement	wind ( )	763:6:15986:15992	2552246	2	True				
ANR	2552590	CallExpression	wind ( )		2552246	0					
ANR	2552591	Callee	wind		2552246	0					
ANR	2552592	Identifier	wind		2552246	0					
ANR	2552593	ArgumentList			2552246	1					
ANR	2552594	BreakStatement	break ;	765:5:16006:16011	2552246	14	True				
ANR	2552595	Label	default :	767:4:16018:16025	2552246	15	True				
ANR	2552596	Identifier	default		2552246	0					
ANR	2552597	BreakStatement	break ;	769:5:16080:16085	2552246	16	True				
ANR	2552598	BreakStatement	break ;	771:3:16095:16100	2552246	73	True				
ANR	2552599	Label	case '!' :	774:2:16106:16114	2552246	74	True				
ANR	2552600	ExpressionStatement	tokenType = LEX_LOGICAL_NOT	775:3:16119:16146	2552246	75	True				
ANR	2552601	AssignmentExpression	tokenType = LEX_LOGICAL_NOT		2552246	0		=			
ANR	2552602	Identifier	tokenType		2552246	0					
ANR	2552603	Identifier	LEX_LOGICAL_NOT		2552246	1					
ANR	2552604	SwitchStatement	switch ( ch )		2552246	76					
ANR	2552605	Condition	ch	776:11:16159:16160	2552246	0	True				
ANR	2552606	Identifier	ch		2552246	0					
ANR	2552607	CompoundStatement		205:15:2879:2879	2552246	1					
ANR	2552608	Label	case '=' :	777:4:16169:16177	2552246	0	True				
ANR	2552609	ExpressionStatement	tokenType = LEX_NOT_EQUAL	778:5:16184:16209	2552246	1	True				
ANR	2552610	AssignmentExpression	tokenType = LEX_NOT_EQUAL		2552246	0		=			
ANR	2552611	Identifier	tokenType		2552246	0					
ANR	2552612	Identifier	LEX_NOT_EQUAL		2552246	1					
ANR	2552613	ExpressionStatement	wind ( )	779:5:16216:16223	2552246	2	True				
ANR	2552614	CallExpression	wind ( )		2552246	0					
ANR	2552615	Callee	wind		2552246	0					
ANR	2552616	Identifier	wind		2552246	0					
ANR	2552617	ArgumentList			2552246	1					
ANR	2552618	BreakStatement	break ;	780:5:16230:16235	2552246	3	True				
ANR	2552619	Label	default :	782:4:16242:16249	2552246	4	True				
ANR	2552620	Identifier	default		2552246	0					
ANR	2552621	BreakStatement	break ;	784:5:16304:16309	2552246	5	True				
ANR	2552622	BreakStatement	break ;	786:3:16319:16324	2552246	77	True				
ANR	2552623	Label	default :	789:2:16330:16337	2552246	78	True				
ANR	2552624	Identifier	default		2552246	0					
ANR	2552625	ExpressionStatement	tokenType = LEX_TOKEN_ERROR	790:3:16342:16369	2552246	79	True				
ANR	2552626	AssignmentExpression	tokenType = LEX_TOKEN_ERROR		2552246	0		=			
ANR	2552627	Identifier	tokenType		2552246	0					
ANR	2552628	Identifier	LEX_TOKEN_ERROR		2552246	1					
ANR	2552629	ReturnStatement	return tokenType ;	791:3:16374:16390	2552246	80	True				
ANR	2552630	Identifier	tokenType		2552246	0					
ANR	2552631	ExpressionStatement	cut ( )	795:1:16427:16433	2552246	5	True				
ANR	2552632	CallExpression	cut ( )		2552246	0					
ANR	2552633	Callee	cut		2552246	0					
ANR	2552634	Identifier	cut		2552246	0					
ANR	2552635	ArgumentList			2552246	1					
ANR	2552636	ReturnStatement	return tokenType ;	797:1:16437:16453	2552246	6	True				
ANR	2552637	Identifier	tokenType		2552246	0					
ANR	2552638	ReturnType	int		2552246	1					
ANR	2552639	Identifier	Lexer :: tokenizePunctOperator		2552246	2					
ANR	2552640	ParameterList			2552246	3					
ANR	2552641	CFGEntryNode	ENTRY		2552246		True				
ANR	2552642	CFGExitNode	EXIT		2552246		True				
ANR	2552643	Symbol	LEX_BITWISE_NOT		2552246						
ANR	2552644	Symbol	oldch		2552246						
ANR	2552645	Symbol	LEX_QMARK		2552246						
ANR	2552646	Symbol	LEX_MULTIPLY		2552246						
ANR	2552647	Symbol	LEX_BITWISE_XOR		2552246						
ANR	2552648	Symbol	LEX_LOGICAL_AND		2552246						
ANR	2552649	Symbol	LEX_TOKEN_ERROR		2552246						
ANR	2552650	Symbol	LEX_CLOSE_BOX		2552246						
ANR	2552651	Symbol	LEX_BITWISE_AND		2552246						
ANR	2552652	Symbol	lexSource		2552246						
ANR	2552653	Symbol	LEX_URIGHT_SHIFT		2552246						
ANR	2552654	Symbol	extra_lookahead		2552246						
ANR	2552655	Symbol	LEX_LOGICAL_OR		2552246						
ANR	2552656	Symbol	LEX_LESS_THAN		2552246						
ANR	2552657	Symbol	LEX_CLOSE_PAREN		2552246						
ANR	2552658	Symbol	LEX_SELECTION		2552246						
ANR	2552659	Symbol	LEX_OPEN_BOX		2552246						
ANR	2552660	Symbol	LEX_META_EQUAL		2552246						
ANR	2552661	Symbol	LEX_NOT_EQUAL		2552246						
ANR	2552662	Symbol	LEX_RIGHT_SHIFT		2552246						
ANR	2552663	Symbol	LEX_EQUAL		2552246						
ANR	2552664	Symbol	ch		2552246						
ANR	2552665	Symbol	LEX_GREATER_THAN		2552246						
ANR	2552666	Symbol	LEX_COLON		2552246						
ANR	2552667	Symbol	LEX_GREATER_OR_EQUAL		2552246						
ANR	2552668	Symbol	LEX_BOUND_TO		2552246						
ANR	2552669	Symbol	LEX_PLUS		2552246						
ANR	2552670	Symbol	LEX_OPEN_PAREN		2552246						
ANR	2552671	Symbol	LEX_MODULUS		2552246						
ANR	2552672	Symbol	LEX_COMMA		2552246						
ANR	2552673	Symbol	LEX_LEFT_SHIFT		2552246						
ANR	2552674	Symbol	* lexSource		2552246						
ANR	2552675	Symbol	lexSource -> ReadCharacter		2552246						
ANR	2552676	Symbol	LEX_CLOSE_BRACE		2552246						
ANR	2552677	Symbol	LEX_MINUS		2552246						
ANR	2552678	Symbol	LEX_META_NOT_EQUAL		2552246						
ANR	2552679	Symbol	LEX_DIVIDE		2552246						
ANR	2552680	Symbol	LEX_LOGICAL_NOT		2552246						
ANR	2552681	Symbol	LEX_LESS_OR_EQUAL		2552246						
ANR	2552682	Symbol	tokenType		2552246						
ANR	2552683	Symbol	LEX_SEMICOLON		2552246						
ANR	2552684	Symbol	LEX_OPEN_BRACE		2552246						
ANR	2552685	Symbol	LEX_BITWISE_OR		2552246						
ANR	2552686	Function	Lexer :: strLexToken	802:0:16519:19506							
ANR	2552687	FunctionDef	Lexer :: strLexToken (int tokenValue)		2552686	0					
ANR	2552688	CompoundStatement		804:0:16568:19506	2552686	0					
ANR	2552689	SwitchStatement	switch ( tokenValue )		2552686	0					
ANR	2552690	Condition	tokenValue	805:9:16579:16588	2552686	0	True				
ANR	2552691	Identifier	tokenValue		2552686	0					
ANR	2552692	CompoundStatement		2:21:22:22	2552686	1					
ANR	2552693	Label	case LEX_END_OF_INPUT :	806:2:16595:16616	2552686	0	True				
ANR	2552694	Identifier	LEX_END_OF_INPUT		2552686	0					
ANR	2552695	ReturnStatement	"return ""LEX_END_OF_INPUT"" ;"	806:35:16628:16653	2552686	1	True				
ANR	2552696	PrimaryExpression	"""LEX_END_OF_INPUT"""		2552686	0					
ANR	2552697	Label	case LEX_TOKEN_ERROR :	807:2:16657:16677	2552686	2	True				
ANR	2552698	Identifier	LEX_TOKEN_ERROR		2552686	0					
ANR	2552699	ReturnStatement	"return ""LEX_TOKEN_ERROR"" ;"	807:35:16690:16714	2552686	3	True				
ANR	2552700	PrimaryExpression	"""LEX_TOKEN_ERROR"""		2552686	0					
ANR	2552701	Label	case LEX_TOKEN_TOO_LONG :	808:2:16718:16741	2552686	4	True				
ANR	2552702	Identifier	LEX_TOKEN_TOO_LONG		2552686	0					
ANR	2552703	ReturnStatement	"return ""LEX_TOKEN_TOO_LONG"" ;"	808:35:16751:16778	2552686	5	True				
ANR	2552704	PrimaryExpression	"""LEX_TOKEN_TOO_LONG"""		2552686	0					
ANR	2552705	Label	case LEX_INTEGER_VALUE :	810:2:16783:16805	2552686	6	True				
ANR	2552706	Identifier	LEX_INTEGER_VALUE		2552686	0					
ANR	2552707	ReturnStatement	"return ""LEX_INTEGER_VALUE"" ;"	810:35:16816:16842	2552686	7	True				
ANR	2552708	PrimaryExpression	"""LEX_INTEGER_VALUE"""		2552686	0					
ANR	2552709	Label	case LEX_REAL_VALUE :	811:2:16846:16865	2552686	8	True				
ANR	2552710	Identifier	LEX_REAL_VALUE		2552686	0					
ANR	2552711	ReturnStatement	"return ""LEX_REAL_VALUE"" ;"	811:35:16879:16902	2552686	9	True				
ANR	2552712	PrimaryExpression	"""LEX_REAL_VALUE"""		2552686	0					
ANR	2552713	Label	case LEX_BOOLEAN_VALUE :	812:2:16906:16928	2552686	10	True				
ANR	2552714	Identifier	LEX_BOOLEAN_VALUE		2552686	0					
ANR	2552715	ReturnStatement	"return ""LEX_BOOLEAN_VALUE"" ;"	812:35:16939:16965	2552686	11	True				
ANR	2552716	PrimaryExpression	"""LEX_BOOLEAN_VALUE"""		2552686	0					
ANR	2552717	Label	case LEX_STRING_VALUE :	813:2:16969:16990	2552686	12	True				
ANR	2552718	Identifier	LEX_STRING_VALUE		2552686	0					
ANR	2552719	ReturnStatement	"return ""LEX_STRING_VALUE"" ;"	813:35:17002:17027	2552686	13	True				
ANR	2552720	PrimaryExpression	"""LEX_STRING_VALUE"""		2552686	0					
ANR	2552721	Label	case LEX_UNDEFINED_VALUE :	814:2:17031:17055	2552686	14	True				
ANR	2552722	Identifier	LEX_UNDEFINED_VALUE		2552686	0					
ANR	2552723	ReturnStatement	"return ""LEX_UNDEFINED_VALUE"" ;"	814:35:17064:17092	2552686	15	True				
ANR	2552724	PrimaryExpression	"""LEX_UNDEFINED_VALUE"""		2552686	0					
ANR	2552725	Label	case LEX_ERROR_VALUE :	815:2:17096:17116	2552686	16	True				
ANR	2552726	Identifier	LEX_ERROR_VALUE		2552686	0					
ANR	2552727	ReturnStatement	"return ""LEX_ERROR_VALUE"" ;"	815:35:17129:17153	2552686	17	True				
ANR	2552728	PrimaryExpression	"""LEX_ERROR_VALUE"""		2552686	0					
ANR	2552729	Label	case LEX_IDENTIFIER :	817:2:17158:17177	2552686	18	True				
ANR	2552730	Identifier	LEX_IDENTIFIER		2552686	0					
ANR	2552731	ReturnStatement	"return ""LEX_IDENTIFIER"" ;"	817:35:17191:17214	2552686	19	True				
ANR	2552732	PrimaryExpression	"""LEX_IDENTIFIER"""		2552686	0					
ANR	2552733	Label	case LEX_SELECTION :	818:2:17218:17236	2552686	20	True				
ANR	2552734	Identifier	LEX_SELECTION		2552686	0					
ANR	2552735	ReturnStatement	"return ""LEX_SELECTION"" ;"	818:31:17247:17269	2552686	21	True				
ANR	2552736	PrimaryExpression	"""LEX_SELECTION"""		2552686	0					
ANR	2552737	Label	case LEX_MULTIPLY :	820:2:17274:17291	2552686	22	True				
ANR	2552738	Identifier	LEX_MULTIPLY		2552686	0					
ANR	2552739	ReturnStatement	"return ""LEX_MULTIPLY"" ;"	820:35:17307:17328	2552686	23	True				
ANR	2552740	PrimaryExpression	"""LEX_MULTIPLY"""		2552686	0					
ANR	2552741	Label	case LEX_DIVIDE :	821:2:17332:17347	2552686	24	True				
ANR	2552742	Identifier	LEX_DIVIDE		2552686	0					
ANR	2552743	ReturnStatement	"return ""LEX_DIVIDE"" ;"	821:35:17365:17384	2552686	25	True				
ANR	2552744	PrimaryExpression	"""LEX_DIVIDE"""		2552686	0					
ANR	2552745	Label	case LEX_MODULUS :	822:2:17388:17404	2552686	26	True				
ANR	2552746	Identifier	LEX_MODULUS		2552686	0					
ANR	2552747	ReturnStatement	"return ""LEX_MODULUS"" ;"	822:35:17421:17441	2552686	27	True				
ANR	2552748	PrimaryExpression	"""LEX_MODULUS"""		2552686	0					
ANR	2552749	Label	case LEX_PLUS :	823:2:17445:17458	2552686	28	True				
ANR	2552750	Identifier	LEX_PLUS		2552686	0					
ANR	2552751	ReturnStatement	"return ""LEX_PLUS"" ;"	823:35:17478:17495	2552686	29	True				
ANR	2552752	PrimaryExpression	"""LEX_PLUS"""		2552686	0					
ANR	2552753	Label	case LEX_MINUS :	824:2:17499:17513	2552686	30	True				
ANR	2552754	Identifier	LEX_MINUS		2552686	0					
ANR	2552755	ReturnStatement	"return ""LEX_MINUS"" ;"	824:35:17532:17550	2552686	31	True				
ANR	2552756	PrimaryExpression	"""LEX_MINUS"""		2552686	0					
ANR	2552757	Label	case LEX_BITWISE_AND :	826:2:17555:17575	2552686	32	True				
ANR	2552758	Identifier	LEX_BITWISE_AND		2552686	0					
ANR	2552759	ReturnStatement	"return ""LEX_BITWISE_AND"" ;"	826:35:17588:17612	2552686	33	True				
ANR	2552760	PrimaryExpression	"""LEX_BITWISE_AND"""		2552686	0					
ANR	2552761	Label	case LEX_BITWISE_OR :	827:2:17616:17635	2552686	34	True				
ANR	2552762	Identifier	LEX_BITWISE_OR		2552686	0					
ANR	2552763	ReturnStatement	"return ""LEX_BITWISE_OR"" ;"	827:35:17649:17672	2552686	35	True				
ANR	2552764	PrimaryExpression	"""LEX_BITWISE_OR"""		2552686	0					
ANR	2552765	Label	case LEX_BITWISE_NOT :	828:2:17676:17696	2552686	36	True				
ANR	2552766	Identifier	LEX_BITWISE_NOT		2552686	0					
ANR	2552767	ReturnStatement	"return ""LEX_BITWISE_NOT"" ;"	828:35:17709:17733	2552686	37	True				
ANR	2552768	PrimaryExpression	"""LEX_BITWISE_NOT"""		2552686	0					
ANR	2552769	Label	case LEX_BITWISE_XOR :	829:2:17737:17757	2552686	38	True				
ANR	2552770	Identifier	LEX_BITWISE_XOR		2552686	0					
ANR	2552771	ReturnStatement	"return ""LEX_BITWISE_XOR"" ;"	829:35:17770:17794	2552686	39	True				
ANR	2552772	PrimaryExpression	"""LEX_BITWISE_XOR"""		2552686	0					
ANR	2552773	Label	case LEX_LEFT_SHIFT :	831:2:17799:17818	2552686	40	True				
ANR	2552774	Identifier	LEX_LEFT_SHIFT		2552686	0					
ANR	2552775	ReturnStatement	"return ""LEX_LEFT_SHIFT"" ;"	831:35:17832:17855	2552686	41	True				
ANR	2552776	PrimaryExpression	"""LEX_LEFT_SHIFT"""		2552686	0					
ANR	2552777	Label	case LEX_RIGHT_SHIFT :	832:2:17859:17879	2552686	42	True				
ANR	2552778	Identifier	LEX_RIGHT_SHIFT		2552686	0					
ANR	2552779	ReturnStatement	"return ""LEX_RIGHT_SHIFT"" ;"	832:30:17887:17911	2552686	43	True				
ANR	2552780	PrimaryExpression	"""LEX_RIGHT_SHIFT"""		2552686	0					
ANR	2552781	Label	case LEX_URIGHT_SHIFT :	833:2:17915:17936	2552686	44	True				
ANR	2552782	Identifier	LEX_URIGHT_SHIFT		2552686	0					
ANR	2552783	ReturnStatement	"return ""LEX_URIGHT_SHIFT"" ;"	833:32:17945:17970	2552686	45	True				
ANR	2552784	PrimaryExpression	"""LEX_URIGHT_SHIFT"""		2552686	0					
ANR	2552785	Label	case LEX_LOGICAL_AND :	835:2:17975:17995	2552686	46	True				
ANR	2552786	Identifier	LEX_LOGICAL_AND		2552686	0					
ANR	2552787	ReturnStatement	"return ""LEX_LOGICAL_AND"" ;"	835:35:18008:18032	2552686	47	True				
ANR	2552788	PrimaryExpression	"""LEX_LOGICAL_AND"""		2552686	0					
ANR	2552789	Label	case LEX_LOGICAL_OR :	836:2:18036:18055	2552686	48	True				
ANR	2552790	Identifier	LEX_LOGICAL_OR		2552686	0					
ANR	2552791	ReturnStatement	"return ""LEX_LOGICAL_OR"" ;"	836:35:18069:18092	2552686	49	True				
ANR	2552792	PrimaryExpression	"""LEX_LOGICAL_OR"""		2552686	0					
ANR	2552793	Label	case LEX_LOGICAL_NOT :	837:2:18096:18116	2552686	50	True				
ANR	2552794	Identifier	LEX_LOGICAL_NOT		2552686	0					
ANR	2552795	ReturnStatement	"return ""LEX_LOGICAL_NOT"" ;"	837:35:18129:18153	2552686	51	True				
ANR	2552796	PrimaryExpression	"""LEX_LOGICAL_NOT"""		2552686	0					
ANR	2552797	Label	case LEX_LESS_THAN :	839:2:18158:18176	2552686	52	True				
ANR	2552798	Identifier	LEX_LESS_THAN		2552686	0					
ANR	2552799	ReturnStatement	"return ""LEX_LESS_THAN"" ;"	839:35:18191:18213	2552686	53	True				
ANR	2552800	PrimaryExpression	"""LEX_LESS_THAN"""		2552686	0					
ANR	2552801	Label	case LEX_LESS_OR_EQUAL :	840:2:18217:18239	2552686	54	True				
ANR	2552802	Identifier	LEX_LESS_OR_EQUAL		2552686	0					
ANR	2552803	ReturnStatement	"return ""LEX_LESS_OR_EQUAL"" ;"	840:35:18250:18276	2552686	55	True				
ANR	2552804	PrimaryExpression	"""LEX_LESS_OR_EQUAL"""		2552686	0					
ANR	2552805	Label	case LEX_GREATER_THAN :	841:2:18280:18301	2552686	56	True				
ANR	2552806	Identifier	LEX_GREATER_THAN		2552686	0					
ANR	2552807	ReturnStatement	"return ""LEX_GREATER_THAN"" ;"	841:35:18313:18338	2552686	57	True				
ANR	2552808	PrimaryExpression	"""LEX_GREATER_THAN"""		2552686	0					
ANR	2552809	Label	case LEX_GREATER_OR_EQUAL :	842:2:18342:18367	2552686	58	True				
ANR	2552810	Identifier	LEX_GREATER_OR_EQUAL		2552686	0					
ANR	2552811	ReturnStatement	"return ""LEX_GREATER_OR_EQUAL"" ;"	842:35:18375:18404	2552686	59	True				
ANR	2552812	PrimaryExpression	"""LEX_GREATER_OR_EQUAL"""		2552686	0					
ANR	2552813	Label	case LEX_EQUAL :	843:2:18408:18422	2552686	60	True				
ANR	2552814	Identifier	LEX_EQUAL		2552686	0					
ANR	2552815	ReturnStatement	"return ""LEX_EQUAL"" ;"	843:35:18441:18459	2552686	61	True				
ANR	2552816	PrimaryExpression	"""LEX_EQUAL"""		2552686	0					
ANR	2552817	Label	case LEX_NOT_EQUAL :	844:2:18463:18481	2552686	62	True				
ANR	2552818	Identifier	LEX_NOT_EQUAL		2552686	0					
ANR	2552819	ReturnStatement	"return ""LEX_NOT_EQUAL"" ;"	844:35:18496:18518	2552686	63	True				
ANR	2552820	PrimaryExpression	"""LEX_NOT_EQUAL"""		2552686	0					
ANR	2552821	Label	case LEX_META_EQUAL :	845:2:18522:18541	2552686	64	True				
ANR	2552822	Identifier	LEX_META_EQUAL		2552686	0					
ANR	2552823	ReturnStatement	"return ""LEX_META_EQUAL"" ;"	845:35:18555:18578	2552686	65	True				
ANR	2552824	PrimaryExpression	"""LEX_META_EQUAL"""		2552686	0					
ANR	2552825	Label	case LEX_META_NOT_EQUAL :	846:2:18582:18605	2552686	66	True				
ANR	2552826	Identifier	LEX_META_NOT_EQUAL		2552686	0					
ANR	2552827	ReturnStatement	"return ""LEX_META_NOT_EQUAL"" ;"	846:35:18615:18642	2552686	67	True				
ANR	2552828	PrimaryExpression	"""LEX_META_NOT_EQUAL"""		2552686	0					
ANR	2552829	Label	case LEX_BOUND_TO :	848:2:18647:18664	2552686	68	True				
ANR	2552830	Identifier	LEX_BOUND_TO		2552686	0					
ANR	2552831	ReturnStatement	"return ""LEX_BOUND_TO"" ;"	848:35:18680:18701	2552686	69	True				
ANR	2552832	PrimaryExpression	"""LEX_BOUND_TO"""		2552686	0					
ANR	2552833	Label	case LEX_QMARK :	850:2:18706:18720	2552686	70	True				
ANR	2552834	Identifier	LEX_QMARK		2552686	0					
ANR	2552835	ReturnStatement	"return ""LEX_QMARK"" ;"	850:35:18739:18757	2552686	71	True				
ANR	2552836	PrimaryExpression	"""LEX_QMARK"""		2552686	0					
ANR	2552837	Label	case LEX_COLON :	851:2:18761:18775	2552686	72	True				
ANR	2552838	Identifier	LEX_COLON		2552686	0					
ANR	2552839	ReturnStatement	"return ""LEX_COLON"" ;"	851:35:18794:18812	2552686	73	True				
ANR	2552840	PrimaryExpression	"""LEX_COLON"""		2552686	0					
ANR	2552841	Label	case LEX_SEMICOLON :	852:2:18816:18834	2552686	74	True				
ANR	2552842	Identifier	LEX_SEMICOLON		2552686	0					
ANR	2552843	ReturnStatement	"return ""LEX_SEMICOLON"" ;"	852:35:18849:18871	2552686	75	True				
ANR	2552844	PrimaryExpression	"""LEX_SEMICOLON"""		2552686	0					
ANR	2552845	Label	case LEX_COMMA :	853:2:18875:18889	2552686	76	True				
ANR	2552846	Identifier	LEX_COMMA		2552686	0					
ANR	2552847	ReturnStatement	"return ""LEX_COMMA"" ;"	853:23:18896:18914	2552686	77	True				
ANR	2552848	PrimaryExpression	"""LEX_COMMA"""		2552686	0					
ANR	2552849	Label	case LEX_OPEN_BOX :	854:2:18918:18935	2552686	78	True				
ANR	2552850	Identifier	LEX_OPEN_BOX		2552686	0					
ANR	2552851	ReturnStatement	"return ""LEX_OPEN_BOX"" ;"	854:35:18951:18972	2552686	79	True				
ANR	2552852	PrimaryExpression	"""LEX_OPEN_BOX"""		2552686	0					
ANR	2552853	Label	case LEX_CLOSE_BOX :	855:2:18976:18994	2552686	80	True				
ANR	2552854	Identifier	LEX_CLOSE_BOX		2552686	0					
ANR	2552855	ReturnStatement	"return ""LEX_CLOSE_BOX"" ;"	855:35:19009:19031	2552686	81	True				
ANR	2552856	PrimaryExpression	"""LEX_CLOSE_BOX"""		2552686	0					
ANR	2552857	Label	case LEX_OPEN_PAREN :	856:2:19035:19054	2552686	82	True				
ANR	2552858	Identifier	LEX_OPEN_PAREN		2552686	0					
ANR	2552859	ReturnStatement	"return ""LEX_OPEN_PAREN"" ;"	856:35:19068:19091	2552686	83	True				
ANR	2552860	PrimaryExpression	"""LEX_OPEN_PAREN"""		2552686	0					
ANR	2552861	Label	case LEX_CLOSE_PAREN :	857:2:19095:19115	2552686	84	True				
ANR	2552862	Identifier	LEX_CLOSE_PAREN		2552686	0					
ANR	2552863	ReturnStatement	"return ""LEX_CLOSE_PAREN"" ;"	857:35:19128:19152	2552686	85	True				
ANR	2552864	PrimaryExpression	"""LEX_CLOSE_PAREN"""		2552686	0					
ANR	2552865	Label	case LEX_OPEN_BRACE :	858:2:19156:19175	2552686	86	True				
ANR	2552866	Identifier	LEX_OPEN_BRACE		2552686	0					
ANR	2552867	ReturnStatement	"return ""LEX_OPEN_BRACE"" ;"	858:27:19181:19204	2552686	87	True				
ANR	2552868	PrimaryExpression	"""LEX_OPEN_BRACE"""		2552686	0					
ANR	2552869	Label	case LEX_CLOSE_BRACE :	859:2:19208:19228	2552686	88	True				
ANR	2552870	Identifier	LEX_CLOSE_BRACE		2552686	0					
ANR	2552871	ReturnStatement	"return ""LEX_CLOSE_BRACE"" ;"	859:28:19234:19258	2552686	89	True				
ANR	2552872	PrimaryExpression	"""LEX_CLOSE_BRACE"""		2552686	0					
ANR	2552873	Label	case LEX_BACKSLASH :	860:2:19262:19280	2552686	90	True				
ANR	2552874	Identifier	LEX_BACKSLASH		2552686	0					
ANR	2552875	ReturnStatement	"return ""LEX_BACKSLASH"" ;"	860:35:19295:19317	2552686	91	True				
ANR	2552876	PrimaryExpression	"""LEX_BACKSLASH"""		2552686	0					
ANR	2552877	Label	case LEX_ABSOLUTE_TIME_VALUE :	861:5:19324:19352	2552686	92	True				
ANR	2552878	Identifier	LEX_ABSOLUTE_TIME_VALUE		2552686	0					
ANR	2552879	ReturnStatement	"return ""LEX_ABSOLUTE_TIME_VALUE"" ;"	861:38:19357:19389	2552686	93	True				
ANR	2552880	PrimaryExpression	"""LEX_ABSOLUTE_TIME_VALUE"""		2552686	0					
ANR	2552881	Label	case LEX_RELATIVE_TIME_VALUE :	862:5:19396:19424	2552686	94	True				
ANR	2552882	Identifier	LEX_RELATIVE_TIME_VALUE		2552686	0					
ANR	2552883	ReturnStatement	"return ""LEX_RELATIVE_TIME_VALUE"" ;"	862:38:19429:19461	2552686	95	True				
ANR	2552884	PrimaryExpression	"""LEX_RELATIVE_TIME_VALUE"""		2552686	0					
ANR	2552885	Label	default :	864:2:19466:19473	2552686	96	True				
ANR	2552886	Identifier	default		2552686	0					
ANR	2552887	ReturnStatement	"return ""** Unknown **"" ;"	865:4:19479:19501	2552686	97	True				
ANR	2552888	PrimaryExpression	"""** Unknown **"""		2552686	0					
ANR	2552889	ReturnType	const char *		2552686	1					
ANR	2552890	Identifier	Lexer :: strLexToken		2552686	2					
ANR	2552891	ParameterList	int tokenValue		2552686	3					
ANR	2552892	Parameter	int tokenValue	803:13:16552:16565	2552686	0	True				
ANR	2552893	ParameterType	int		2552686	0					
ANR	2552894	Identifier	tokenValue		2552686	1					
ANR	2552895	CFGEntryNode	ENTRY		2552686		True				
ANR	2552896	CFGExitNode	EXIT		2552686		True				
ANR	2552897	Symbol	tokenValue		2552686						
