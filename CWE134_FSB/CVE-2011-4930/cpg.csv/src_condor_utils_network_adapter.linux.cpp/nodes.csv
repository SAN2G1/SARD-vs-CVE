command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4826007	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_network_adapter.linux.cpp								
ANR	4826008	Function	LinuxNetworkAdapter :: LinuxNetworkAdapter	62:0:1674:1844							
ANR	4826009	FunctionDef	LinuxNetworkAdapter :: LinuxNetworkAdapter (const condor_sockaddr & ip_addr)		4826008	0					
ANR	4826010	CompoundStatement		64:0:1793:1844	4826008	0					
ANR	4826011	ExpressionStatement	m_wol_support_mask = 0	65:1:1796:1818	4826008	0	True				
ANR	4826012	AssignmentExpression	m_wol_support_mask = 0		4826008	0		=			
ANR	4826013	Identifier	m_wol_support_mask		4826008	0					
ANR	4826014	PrimaryExpression	0		4826008	1					
ANR	4826015	ExpressionStatement	m_wol_enable_mask = 0	66:1:1821:1842	4826008	1	True				
ANR	4826016	AssignmentExpression	m_wol_enable_mask = 0		4826008	0		=			
ANR	4826017	Identifier	m_wol_enable_mask		4826008	0					
ANR	4826018	PrimaryExpression	0		4826008	1					
ANR	4826019	Identifier	LinuxNetworkAdapter :: LinuxNetworkAdapter		4826008	1					
ANR	4826020	ParameterList	const condor_sockaddr & ip_addr		4826008	2					
ANR	4826021	Parameter	const condor_sockaddr & ip_addr	62:43:1717:1746	4826008	0	True				
ANR	4826022	ParameterType	const condor_sockaddr &		4826008	0					
ANR	4826023	Identifier	ip_addr		4826008	1					
ANR	4826024	CFGEntryNode	ENTRY		4826008		True				
ANR	4826025	CFGExitNode	EXIT		4826008		True				
ANR	4826026	Symbol	m_wol_enable_mask		4826008						
ANR	4826027	Symbol	ip_addr		4826008						
ANR	4826028	Symbol	m_wol_support_mask		4826008						
ANR	4826029	Function	LinuxNetworkAdapter :: LinuxNetworkAdapter	69:0:1847:1999							
ANR	4826030	FunctionDef	LinuxNetworkAdapter :: LinuxNetworkAdapter (const char * name)		4826029	0					
ANR	4826031	CompoundStatement		71:0:1948:1999	4826029	0					
ANR	4826032	ExpressionStatement	m_wol_support_mask = 0	72:1:1951:1973	4826029	0	True				
ANR	4826033	AssignmentExpression	m_wol_support_mask = 0		4826029	0		=			
ANR	4826034	Identifier	m_wol_support_mask		4826029	0					
ANR	4826035	PrimaryExpression	0		4826029	1					
ANR	4826036	ExpressionStatement	m_wol_enable_mask = 0	73:1:1976:1997	4826029	1	True				
ANR	4826037	AssignmentExpression	m_wol_enable_mask = 0		4826029	0		=			
ANR	4826038	Identifier	m_wol_enable_mask		4826029	0					
ANR	4826039	PrimaryExpression	0		4826029	1					
ANR	4826040	Identifier	LinuxNetworkAdapter :: LinuxNetworkAdapter		4826029	1					
ANR	4826041	ParameterList	const char * name		4826029	2					
ANR	4826042	Parameter	const char * name	69:43:1890:1905	4826029	0	True				
ANR	4826043	ParameterType	const char *		4826029	0					
ANR	4826044	Identifier	name		4826029	1					
ANR	4826045	CFGEntryNode	ENTRY		4826029		True				
ANR	4826046	CFGExitNode	EXIT		4826029		True				
ANR	4826047	Symbol	name		4826029						
ANR	4826048	Symbol	m_wol_enable_mask		4826029						
ANR	4826049	Symbol	m_wol_support_mask		4826029						
ANR	4826050	Function	LinuxNetworkAdapter :: ~LinuxNetworkAdapter	77:0:2017:2078							
ANR	4826051	FunctionDef	LinuxNetworkAdapter :: ~LinuxNetworkAdapter ()		4826050	0					
ANR	4826052	CompoundStatement		78:0:2076:2078	4826050	0					
ANR	4826053	Identifier	LinuxNetworkAdapter :: ~LinuxNetworkAdapter		4826050	1					
ANR	4826054	ParameterList			4826050	2					
ANR	4826055	CFGEntryNode	ENTRY		4826050		True				
ANR	4826056	CFGExitNode	EXIT		4826050		True				
ANR	4826057	Function	LinuxNetworkAdapter :: findAdapter	81:0:2081:4331							
ANR	4826058	FunctionDef	LinuxNetworkAdapter :: findAdapter (const condor_sockaddr & ip_addr)		4826057	0					
ANR	4826059	CompoundStatement		83:0:2153:4331	4826057	0					
ANR	4826060	IdentifierDeclStatement	bool found = false ;	84:1:2156:2176	4826057	0	True				
ANR	4826061	IdentifierDecl	found = false		4826057	0					
ANR	4826062	IdentifierDeclType	bool		4826057	0					
ANR	4826063	Identifier	found		4826057	1					
ANR	4826064	AssignmentExpression	found = false		4826057	2		=			
ANR	4826065	Identifier	false		4826057	0					
ANR	4826066	Identifier	false		4826057	1					
ANR	4826067	IfStatement	if ( HAVE_STRUCT_IFCONF )		4826057	1					
ANR	4826068	Condition	HAVE_STRUCT_IFCONF	85:6:2184:2201	4826057	0	True				
ANR	4826069	Identifier	HAVE_STRUCT_IFCONF		4826057	0					
ANR	4826070	Statement	&&	85:26:2204:2205	4826057	1	True				
ANR	4826071	Statement	(	85:29:2207:2207	4826057	2	True				
ANR	4826072	Statement	HAVE_STRUCT_IFREQ	85:30:2208:2224	4826057	3	True				
ANR	4826073	Statement	)	85:47:2225:2225	4826057	4	True				
ANR	4826074	Statement	&&	85:49:2227:2228	4826057	5	True				
ANR	4826075	Statement	(	85:52:2230:2230	4826057	6	True				
ANR	4826076	Statement	HAVE_DECL_SIOCGIFCONF	85:53:2231:2251	4826057	7	True				
ANR	4826077	Statement	)	85:74:2252:2252	4826057	8	True				
ANR	4826078	IdentifierDeclStatement	struct ifconf ifc ;	86:1:2255:2272	4826057	9	True				
ANR	4826079	IdentifierDecl	ifc		4826057	0					
ANR	4826080	IdentifierDeclType	struct ifconf		4826057	0					
ANR	4826081	Identifier	ifc		4826057	1					
ANR	4826082	IdentifierDeclStatement	int sock ;	87:1:2275:2286	4826057	10	True				
ANR	4826083	IdentifierDecl	sock		4826057	0					
ANR	4826084	IdentifierDeclType	int		4826057	0					
ANR	4826085	Identifier	sock		4826057	1					
ANR	4826086	IdentifierDeclStatement	int num_req = 3 ;	88:1:2289:2307	4826057	11	True				
ANR	4826087	IdentifierDecl	num_req = 3		4826057	0					
ANR	4826088	IdentifierDeclType	int		4826057	0					
ANR	4826089	Identifier	num_req		4826057	1					
ANR	4826090	AssignmentExpression	num_req = 3		4826057	2		=			
ANR	4826091	Identifier	num_req		4826057	0					
ANR	4826092	PrimaryExpression	3		4826057	1					
ANR	4826093	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	92:1:2423:2460	4826057	12	True				
ANR	4826094	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		4826057	0		=			
ANR	4826095	Identifier	sock		4826057	0					
ANR	4826096	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		4826057	1					
ANR	4826097	Callee	socket		4826057	0					
ANR	4826098	Identifier	socket		4826057	0					
ANR	4826099	ArgumentList	AF_INET		4826057	1					
ANR	4826100	Argument	AF_INET		4826057	0					
ANR	4826101	Identifier	AF_INET		4826057	0					
ANR	4826102	Argument	SOCK_DGRAM		4826057	1					
ANR	4826103	Identifier	SOCK_DGRAM		4826057	0					
ANR	4826104	Argument	0		4826057	2					
ANR	4826105	PrimaryExpression	0		4826057	0					
ANR	4826106	IfStatement	if ( sock < 0 )		4826057	13					
ANR	4826107	Condition	sock < 0	93:5:2467:2474	4826057	0	True				
ANR	4826108	RelationalExpression	sock < 0		4826057	0		<			
ANR	4826109	Identifier	sock		4826057	0					
ANR	4826110	PrimaryExpression	0		4826057	1					
ANR	4826111	CompoundStatement		11:15:323:323	4826057	1					
ANR	4826112	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	94:2:2481:2536	4826057	0	True				
ANR	4826113	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		4826057	0					
ANR	4826114	Callee	derror		4826057	0					
ANR	4826115	Identifier	derror		4826057	0					
ANR	4826116	ArgumentList	"""Cannot get control socket for WOL detection"""		4826057	1					
ANR	4826117	Argument	"""Cannot get control socket for WOL detection"""		4826057	0					
ANR	4826118	PrimaryExpression	"""Cannot get control socket for WOL detection"""		4826057	0					
ANR	4826119	ReturnStatement	return false ;	95:2:2540:2552	4826057	1	True				
ANR	4826120	Identifier	false		4826057	0					
ANR	4826121	IdentifierDeclStatement	condor_sockaddr addr ;	101:1:2699:2719	4826057	14	True				
ANR	4826122	IdentifierDecl	addr		4826057	0					
ANR	4826123	IdentifierDeclType	condor_sockaddr		4826057	0					
ANR	4826124	Identifier	addr		4826057	1					
ANR	4826125	ExpressionStatement	ifc . ifc_buf = NULL	102:1:2722:2740	4826057	15	True				
ANR	4826126	AssignmentExpression	ifc . ifc_buf = NULL		4826057	0		=			
ANR	4826127	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826128	Identifier	ifc		4826057	0					
ANR	4826129	Identifier	ifc_buf		4826057	1					
ANR	4826130	Identifier	NULL		4826057	1					
ANR	4826131	WhileStatement	while ( ! found )		4826057	16					
ANR	4826132	Condition	! found	107:8:2838:2843	4826057	0	True				
ANR	4826133	UnaryOperationExpression	! found		4826057	0					
ANR	4826134	UnaryOperator	!		4826057	0					
ANR	4826135	Identifier	found		4826057	1					
ANR	4826136	CompoundStatement		38:2:1036:1067	4826057	1					
ANR	4826137	IdentifierDeclStatement	int size = num_req * sizeof ( struct ifreq ) ;	108:2:2851:2892	4826057	0	True				
ANR	4826138	IdentifierDecl	size = num_req * sizeof ( struct ifreq )		4826057	0					
ANR	4826139	IdentifierDeclType	int		4826057	0					
ANR	4826140	Identifier	size		4826057	1					
ANR	4826141	AssignmentExpression	size = num_req * sizeof ( struct ifreq )		4826057	2		=			
ANR	4826142	Identifier	size		4826057	0					
ANR	4826143	MultiplicativeExpression	num_req * sizeof ( struct ifreq )		4826057	1		*			
ANR	4826144	Identifier	num_req		4826057	0					
ANR	4826145	SizeofExpression	sizeof ( struct ifreq )		4826057	1					
ANR	4826146	Sizeof	sizeof		4826057	0					
ANR	4826147	SizeofOperand	struct ifreq		4826057	1					
ANR	4826148	ExpressionStatement	"ifc . ifc_buf = ( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"	109:2:2896:2958	4826057	1	True				
ANR	4826149	AssignmentExpression	"ifc . ifc_buf = ( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"		4826057	0		=			
ANR	4826150	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826151	Identifier	ifc		4826057	0					
ANR	4826152	Identifier	ifc_buf		4826057	1					
ANR	4826153	CastExpression	"( char * ) calloc ( num_req , sizeof ( struct ifreq ) )"		4826057	1					
ANR	4826154	CastTarget	char *		4826057	0					
ANR	4826155	CallExpression	"calloc ( num_req , sizeof ( struct ifreq ) )"		4826057	1					
ANR	4826156	Callee	calloc		4826057	0					
ANR	4826157	Identifier	calloc		4826057	0					
ANR	4826158	ArgumentList	num_req		4826057	1					
ANR	4826159	Argument	num_req		4826057	0					
ANR	4826160	Identifier	num_req		4826057	0					
ANR	4826161	Argument	sizeof ( struct ifreq )		4826057	1					
ANR	4826162	SizeofExpression	sizeof ( struct ifreq )		4826057	0					
ANR	4826163	Sizeof	sizeof		4826057	0					
ANR	4826164	SizeofOperand	struct ifreq		4826057	1					
ANR	4826165	ExpressionStatement	ifc . ifc_len = size	110:2:2962:2980	4826057	2	True				
ANR	4826166	AssignmentExpression	ifc . ifc_len = size		4826057	0		=			
ANR	4826167	MemberAccess	ifc . ifc_len		4826057	0					
ANR	4826168	Identifier	ifc		4826057	0					
ANR	4826169	Identifier	ifc_len		4826057	1					
ANR	4826170	Identifier	size		4826057	1					
ANR	4826171	IdentifierDeclStatement	"int status = ioctl ( sock , SIOCGIFCONF , & ifc ) ;"	112:2:2985:3030	4826057	3	True				
ANR	4826172	IdentifierDecl	"status = ioctl ( sock , SIOCGIFCONF , & ifc )"		4826057	0					
ANR	4826173	IdentifierDeclType	int		4826057	0					
ANR	4826174	Identifier	status		4826057	1					
ANR	4826175	AssignmentExpression	"status = ioctl ( sock , SIOCGIFCONF , & ifc )"		4826057	2		=			
ANR	4826176	Identifier	status		4826057	0					
ANR	4826177	CallExpression	"ioctl ( sock , SIOCGIFCONF , & ifc )"		4826057	1					
ANR	4826178	Callee	ioctl		4826057	0					
ANR	4826179	Identifier	ioctl		4826057	0					
ANR	4826180	ArgumentList	sock		4826057	1					
ANR	4826181	Argument	sock		4826057	0					
ANR	4826182	Identifier	sock		4826057	0					
ANR	4826183	Argument	SIOCGIFCONF		4826057	1					
ANR	4826184	Identifier	SIOCGIFCONF		4826057	0					
ANR	4826185	Argument	& ifc		4826057	2					
ANR	4826186	UnaryOperationExpression	& ifc		4826057	0					
ANR	4826187	UnaryOperator	&		4826057	0					
ANR	4826188	Identifier	ifc		4826057	1					
ANR	4826189	IfStatement	if ( status < 0 )		4826057	4					
ANR	4826190	Condition	status < 0	113:7:3039:3048	4826057	0	True				
ANR	4826191	RelationalExpression	status < 0		4826057	0		<			
ANR	4826192	Identifier	status		4826057	0					
ANR	4826193	PrimaryExpression	0		4826057	1					
ANR	4826194	CompoundStatement		31:20:898:898	4826057	1					
ANR	4826195	ExpressionStatement	"derror ( ""ioctl(SIOCGIFCONF)"" )"	114:3:3057:3087	4826057	0	True				
ANR	4826196	CallExpression	"derror ( ""ioctl(SIOCGIFCONF)"" )"		4826057	0					
ANR	4826197	Callee	derror		4826057	0					
ANR	4826198	Identifier	derror		4826057	0					
ANR	4826199	ArgumentList	"""ioctl(SIOCGIFCONF)"""		4826057	1					
ANR	4826200	Argument	"""ioctl(SIOCGIFCONF)"""		4826057	0					
ANR	4826201	PrimaryExpression	"""ioctl(SIOCGIFCONF)"""		4826057	0					
ANR	4826202	BreakStatement	break ;	115:3:3092:3097	4826057	1	True				
ANR	4826203	IdentifierDeclStatement	int num = ifc . ifc_len / sizeof ( struct ifreq ) ;	119:2:3138:3186	4826057	5	True				
ANR	4826204	IdentifierDecl	num = ifc . ifc_len / sizeof ( struct ifreq )		4826057	0					
ANR	4826205	IdentifierDeclType	int		4826057	0					
ANR	4826206	Identifier	num		4826057	1					
ANR	4826207	AssignmentExpression	num = ifc . ifc_len / sizeof ( struct ifreq )		4826057	2		=			
ANR	4826208	Identifier	num		4826057	0					
ANR	4826209	MultiplicativeExpression	ifc . ifc_len / sizeof ( struct ifreq )		4826057	1		/			
ANR	4826210	MemberAccess	ifc . ifc_len		4826057	0					
ANR	4826211	Identifier	ifc		4826057	0					
ANR	4826212	Identifier	ifc_len		4826057	1					
ANR	4826213	SizeofExpression	sizeof ( struct ifreq )		4826057	1					
ANR	4826214	Sizeof	sizeof		4826057	0					
ANR	4826215	SizeofOperand	struct ifreq		4826057	1					
ANR	4826216	IdentifierDeclStatement	struct ifreq * ifr = ifc . ifc_req ;	120:2:3190:3221	4826057	6	True				
ANR	4826217	IdentifierDecl	* ifr = ifc . ifc_req		4826057	0					
ANR	4826218	IdentifierDeclType	struct ifreq *		4826057	0					
ANR	4826219	Identifier	ifr		4826057	1					
ANR	4826220	AssignmentExpression	* ifr = ifc . ifc_req		4826057	2		=			
ANR	4826221	Identifier	ifr		4826057	0					
ANR	4826222	MemberAccess	ifc . ifc_req		4826057	1					
ANR	4826223	Identifier	ifc		4826057	0					
ANR	4826224	Identifier	ifc_req		4826057	1					
ANR	4826225	ForStatement	"for ( int i = 0 ; i < num ; i ++ , ifr ++ )"		4826057	7					
ANR	4826226	ForInit	int i = 0 ;	121:8:3231:3240	4826057	0	True				
ANR	4826227	IdentifierDeclStatement	int i = 0 ;		4826057	0					
ANR	4826228	IdentifierDecl	i = 0		4826057	0					
ANR	4826229	IdentifierDeclType	int		4826057	0					
ANR	4826230	Identifier	i		4826057	1					
ANR	4826231	AssignmentExpression	i = 0		4826057	2		=			
ANR	4826232	Identifier	i		4826057	0					
ANR	4826233	PrimaryExpression	0		4826057	1					
ANR	4826234	Condition	i < num	121:20:3243:3249	4826057	1	True				
ANR	4826235	RelationalExpression	i < num		4826057	0		<			
ANR	4826236	Identifier	i		4826057	0					
ANR	4826237	Identifier	num		4826057	1					
ANR	4826238	Expression	"i ++ , ifr ++"	121:30:3253:3262	4826057	2	True				
ANR	4826239	PostIncDecOperationExpression	i ++		4826057	0					
ANR	4826240	Identifier	i		4826057	0					
ANR	4826241	IncDec	++		4826057	1					
ANR	4826242	PostIncDecOperationExpression	ifr ++		4826057	1					
ANR	4826243	Identifier	ifr		4826057	0					
ANR	4826244	IncDec	++		4826057	1					
ANR	4826245	CompoundStatement		41:3:1186:1220	4826057	3					
ANR	4826246	IdentifierDeclStatement	condor_sockaddr in ( & ifr -> ifr_addr ) ;	123:3:3340:3374	4826057	0	True				
ANR	4826247	IdentifierDecl	in ( & ifr -> ifr_addr )		4826057	0					
ANR	4826248	IdentifierDeclType	condor_sockaddr		4826057	0					
ANR	4826249	Identifier	in		4826057	1					
ANR	4826250	UnaryOperationExpression	& ifr -> ifr_addr		4826057	2					
ANR	4826251	UnaryOperator	&		4826057	0					
ANR	4826252	PtrMemberAccess	ifr -> ifr_addr		4826057	1					
ANR	4826253	Identifier	ifr		4826057	0					
ANR	4826254	Identifier	ifr_addr		4826057	1					
ANR	4826255	ExpressionStatement	addr = in	125:3:3437:3446	4826057	1	True				
ANR	4826256	AssignmentExpression	addr = in		4826057	0		=			
ANR	4826257	Identifier	addr		4826057	0					
ANR	4826258	Identifier	in		4826057	1					
ANR	4826259	IfStatement	if ( in . compare_address ( ip_addr ) )		4826057	2					
ANR	4826260	Condition	in . compare_address ( ip_addr )	128:8:3502:3528	4826057	0	True				
ANR	4826261	CallExpression	in . compare_address ( ip_addr )		4826057	0					
ANR	4826262	Callee	in . compare_address		4826057	0					
ANR	4826263	MemberAccess	in . compare_address		4826057	0					
ANR	4826264	Identifier	in		4826057	0					
ANR	4826265	Identifier	compare_address		4826057	1					
ANR	4826266	ArgumentList	ip_addr		4826057	1					
ANR	4826267	Argument	ip_addr		4826057	0					
ANR	4826268	Identifier	ip_addr		4826057	0					
ANR	4826269	CompoundStatement		46:38:1378:1378	4826057	1					
ANR	4826270	ExpressionStatement	setIpAddr ( * ifr )	129:4:3538:3555	4826057	0	True				
ANR	4826271	CallExpression	setIpAddr ( * ifr )		4826057	0					
ANR	4826272	Callee	setIpAddr		4826057	0					
ANR	4826273	Identifier	setIpAddr		4826057	0					
ANR	4826274	ArgumentList	* ifr		4826057	1					
ANR	4826275	Argument	* ifr		4826057	0					
ANR	4826276	UnaryOperationExpression	* ifr		4826057	0					
ANR	4826277	UnaryOperator	*		4826057	0					
ANR	4826278	Identifier	ifr		4826057	1					
ANR	4826279	ExpressionStatement	setName ( * ifr )	130:4:3561:3576	4826057	1	True				
ANR	4826280	CallExpression	setName ( * ifr )		4826057	0					
ANR	4826281	Callee	setName		4826057	0					
ANR	4826282	Identifier	setName		4826057	0					
ANR	4826283	ArgumentList	* ifr		4826057	1					
ANR	4826284	Argument	* ifr		4826057	0					
ANR	4826285	UnaryOperationExpression	* ifr		4826057	0					
ANR	4826286	UnaryOperator	*		4826057	0					
ANR	4826287	Identifier	ifr		4826057	1					
ANR	4826288	ExpressionStatement	found = true	131:4:3582:3594	4826057	2	True				
ANR	4826289	AssignmentExpression	found = true		4826057	0		=			
ANR	4826290	Identifier	found		4826057	0					
ANR	4826291	Identifier	true		4826057	1					
ANR	4826292	BreakStatement	break ;	132:4:3600:3605	4826057	3	True				
ANR	4826293	IfStatement	if ( ( ! found ) && ( ifc . ifc_len == size ) )		4826057	8					
ANR	4826294	Condition	( ! found ) && ( ifc . ifc_len == size )	138:7:3746:3778	4826057	0	True				
ANR	4826295	AndExpression	( ! found ) && ( ifc . ifc_len == size )		4826057	0		&&			
ANR	4826296	UnaryOperationExpression	! found		4826057	0					
ANR	4826297	UnaryOperator	!		4826057	0					
ANR	4826298	Identifier	found		4826057	1					
ANR	4826299	EqualityExpression	ifc . ifc_len == size		4826057	1		==			
ANR	4826300	MemberAccess	ifc . ifc_len		4826057	0					
ANR	4826301	Identifier	ifc		4826057	0					
ANR	4826302	Identifier	ifc_len		4826057	1					
ANR	4826303	Identifier	size		4826057	1					
ANR	4826304	CompoundStatement		56:43:1628:1628	4826057	1					
ANR	4826305	ExpressionStatement	num_req += 2	139:3:3787:3799	4826057	0	True				
ANR	4826306	AssignmentExpression	num_req += 2		4826057	0		+=			
ANR	4826307	Identifier	num_req		4826057	0					
ANR	4826308	PrimaryExpression	2		4826057	1					
ANR	4826309	ExpressionStatement	free ( ifc . ifc_buf )	140:3:3804:3823	4826057	1	True				
ANR	4826310	CallExpression	free ( ifc . ifc_buf )		4826057	0					
ANR	4826311	Callee	free		4826057	0					
ANR	4826312	Identifier	free		4826057	0					
ANR	4826313	ArgumentList	ifc . ifc_buf		4826057	1					
ANR	4826314	Argument	ifc . ifc_buf		4826057	0					
ANR	4826315	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826316	Identifier	ifc		4826057	0					
ANR	4826317	Identifier	ifc_buf		4826057	1					
ANR	4826318	ExpressionStatement	ifc . ifc_buf = NULL	141:3:3828:3846	4826057	2	True				
ANR	4826319	AssignmentExpression	ifc . ifc_buf = NULL		4826057	0		=			
ANR	4826320	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826321	Identifier	ifc		4826057	0					
ANR	4826322	Identifier	ifc_buf		4826057	1					
ANR	4826323	Identifier	NULL		4826057	1					
ANR	4826324	ElseStatement	else		4826057	0					
ANR	4826325	CompoundStatement		61:7:1705:1705	4826057	0					
ANR	4826326	BreakStatement	break ;	144:3:3864:3869	4826057	0	True				
ANR	4826327	IfStatement	if ( ifc . ifc_buf )		4826057	17					
ANR	4826328	Condition	ifc . ifc_buf	149:6:3928:3938	4826057	0	True				
ANR	4826329	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826330	Identifier	ifc		4826057	0					
ANR	4826331	Identifier	ifc_buf		4826057	1					
ANR	4826332	CompoundStatement		67:20:1788:1788	4826057	1					
ANR	4826333	ExpressionStatement	free ( ifc . ifc_buf )	150:2:3946:3965	4826057	0	True				
ANR	4826334	CallExpression	free ( ifc . ifc_buf )		4826057	0					
ANR	4826335	Callee	free		4826057	0					
ANR	4826336	Identifier	free		4826057	0					
ANR	4826337	ArgumentList	ifc . ifc_buf		4826057	1					
ANR	4826338	Argument	ifc . ifc_buf		4826057	0					
ANR	4826339	MemberAccess	ifc . ifc_buf		4826057	0					
ANR	4826340	Identifier	ifc		4826057	0					
ANR	4826341	Identifier	ifc_buf		4826057	1					
ANR	4826342	IfStatement	if ( found )		4826057	18					
ANR	4826343	Condition	found	153:6:3977:3981	4826057	0	True				
ANR	4826344	Identifier	found		4826057	0					
ANR	4826345	CompoundStatement		71:14:1831:1831	4826057	1					
ANR	4826346	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Found interface %s that matches %s\\n"" , interfaceName ( ) , addr . to_sinful ( ) . Value ( ) )"	154:2:3989:4115	4826057	0	True				
ANR	4826347	CallExpression	"dprintf ( D_FULLDEBUG , ""Found interface %s that matches %s\\n"" , interfaceName ( ) , addr . to_sinful ( ) . Value ( ) )"		4826057	0					
ANR	4826348	Callee	dprintf		4826057	0					
ANR	4826349	Identifier	dprintf		4826057	0					
ANR	4826350	ArgumentList	D_FULLDEBUG		4826057	1					
ANR	4826351	Argument	D_FULLDEBUG		4826057	0					
ANR	4826352	Identifier	D_FULLDEBUG		4826057	0					
ANR	4826353	Argument	"""Found interface %s that matches %s\\n"""		4826057	1					
ANR	4826354	PrimaryExpression	"""Found interface %s that matches %s\\n"""		4826057	0					
ANR	4826355	Argument	interfaceName ( )		4826057	2					
ANR	4826356	CallExpression	interfaceName ( )		4826057	0					
ANR	4826357	Callee	interfaceName		4826057	0					
ANR	4826358	Identifier	interfaceName		4826057	0					
ANR	4826359	ArgumentList			4826057	1					
ANR	4826360	Argument	addr . to_sinful ( ) . Value ( )		4826057	3					
ANR	4826361	CallExpression	addr . to_sinful ( ) . Value ( )		4826057	0					
ANR	4826362	Callee	addr . to_sinful ( ) . Value		4826057	0					
ANR	4826363	MemberAccess	addr . to_sinful ( ) . Value		4826057	0					
ANR	4826364	CallExpression	addr . to_sinful ( )		4826057	0					
ANR	4826365	Callee	addr . to_sinful		4826057	0					
ANR	4826366	MemberAccess	addr . to_sinful		4826057	0					
ANR	4826367	Identifier	addr		4826057	0					
ANR	4826368	Identifier	to_sinful		4826057	1					
ANR	4826369	ArgumentList			4826057	1					
ANR	4826370	Identifier	Value		4826057	1					
ANR	4826371	ArgumentList			4826057	1					
ANR	4826372	ElseStatement	else		4826057	0					
ANR	4826373	CompoundStatement		79:1:1973:1973	4826057	0					
ANR	4826374	ExpressionStatement	m_if_name = NULL	162:2:4131:4147	4826057	0	True				
ANR	4826375	AssignmentExpression	m_if_name = NULL		4826057	0		=			
ANR	4826376	Identifier	m_if_name		4826057	0					
ANR	4826377	Identifier	NULL		4826057	1					
ANR	4826378	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""No interface for address %s\\n"" , addr . to_sinful ( ) . Value ( ) )"	163:2:4151:4247	4826057	1	True				
ANR	4826379	CallExpression	"dprintf ( D_FULLDEBUG , ""No interface for address %s\\n"" , addr . to_sinful ( ) . Value ( ) )"		4826057	0					
ANR	4826380	Callee	dprintf		4826057	0					
ANR	4826381	Identifier	dprintf		4826057	0					
ANR	4826382	ArgumentList	D_FULLDEBUG		4826057	1					
ANR	4826383	Argument	D_FULLDEBUG		4826057	0					
ANR	4826384	Identifier	D_FULLDEBUG		4826057	0					
ANR	4826385	Argument	"""No interface for address %s\\n"""		4826057	1					
ANR	4826386	PrimaryExpression	"""No interface for address %s\\n"""		4826057	0					
ANR	4826387	Argument	addr . to_sinful ( ) . Value ( )		4826057	2					
ANR	4826388	CallExpression	addr . to_sinful ( ) . Value ( )		4826057	0					
ANR	4826389	Callee	addr . to_sinful ( ) . Value		4826057	0					
ANR	4826390	MemberAccess	addr . to_sinful ( ) . Value		4826057	0					
ANR	4826391	CallExpression	addr . to_sinful ( )		4826057	0					
ANR	4826392	Callee	addr . to_sinful		4826057	0					
ANR	4826393	MemberAccess	addr . to_sinful		4826057	0					
ANR	4826394	Identifier	addr		4826057	0					
ANR	4826395	Identifier	to_sinful		4826057	1					
ANR	4826396	ArgumentList			4826057	1					
ANR	4826397	Identifier	Value		4826057	1					
ANR	4826398	ArgumentList			4826057	1					
ANR	4826399	ExpressionStatement	close ( sock )	170:1:4292:4305	4826057	19	True				
ANR	4826400	CallExpression	close ( sock )		4826057	0					
ANR	4826401	Callee	close		4826057	0					
ANR	4826402	Identifier	close		4826057	0					
ANR	4826403	ArgumentList	sock		4826057	1					
ANR	4826404	Argument	sock		4826057	0					
ANR	4826405	Identifier	sock		4826057	0					
ANR	4826406	ReturnStatement	return found ;	173:1:4316:4328	4826057	20	True				
ANR	4826407	Identifier	found		4826057	0					
ANR	4826408	ReturnType	bool		4826057	1					
ANR	4826409	Identifier	LinuxNetworkAdapter :: findAdapter		4826057	2					
ANR	4826410	ParameterList	const condor_sockaddr & ip_addr		4826057	3					
ANR	4826411	Parameter	const condor_sockaddr & ip_addr	82:34:2120:2149	4826057	0	True				
ANR	4826412	ParameterType	const condor_sockaddr &		4826057	0					
ANR	4826413	Identifier	ip_addr		4826057	1					
ANR	4826414	CFGEntryNode	ENTRY		4826057		True				
ANR	4826415	CFGExitNode	EXIT		4826057		True				
ANR	4826416	Symbol	addr . to_sinful ( ) . Value		4826057						
ANR	4826417	Symbol	m_if_name		4826057						
ANR	4826418	Symbol	num		4826057						
ANR	4826419	Symbol	calloc		4826057						
ANR	4826420	Symbol	& ifc		4826057						
ANR	4826421	Symbol	ioctl		4826057						
ANR	4826422	Symbol	found		4826057						
ANR	4826423	Symbol	SIOCGIFCONF		4826057						
ANR	4826424	Symbol	interfaceName		4826057						
ANR	4826425	Symbol	addr		4826057						
ANR	4826426	Symbol	ifc . ifc_buf		4826057						
ANR	4826427	Symbol	HAVE_STRUCT_IFCONF		4826057						
ANR	4826428	Symbol	* ifr		4826057						
ANR	4826429	Symbol	ifc . ifc_len		4826057						
ANR	4826430	Symbol	NULL		4826057						
ANR	4826431	Symbol	num_req		4826057						
ANR	4826432	Symbol	in		4826057						
ANR	4826433	Symbol	ifc		4826057						
ANR	4826434	Symbol	false		4826057						
ANR	4826435	Symbol	i		4826057						
ANR	4826436	Symbol	D_FULLDEBUG		4826057						
ANR	4826437	Symbol	AF_INET		4826057						
ANR	4826438	Symbol	ifc . ifc_req		4826057						
ANR	4826439	Symbol	SOCK_DGRAM		4826057						
ANR	4826440	Symbol	sock		4826057						
ANR	4826441	Symbol	in . compare_address		4826057						
ANR	4826442	Symbol	size		4826057						
ANR	4826443	Symbol	ifr		4826057						
ANR	4826444	Symbol	addr . to_sinful		4826057						
ANR	4826445	Symbol	true		4826057						
ANR	4826446	Symbol	socket		4826057						
ANR	4826447	Symbol	ip_addr		4826057						
ANR	4826448	Symbol	status		4826057						
ANR	4826449	Function	LinuxNetworkAdapter :: findAdapter	177:0:4334:5308							
ANR	4826450	FunctionDef	LinuxNetworkAdapter :: findAdapter (const char * name)		4826449	0					
ANR	4826451	CompoundStatement		179:0:4392:5308	4826449	0					
ANR	4826452	IdentifierDeclStatement	bool found = false ;	180:1:4395:4415	4826449	0	True				
ANR	4826453	IdentifierDecl	found = false		4826449	0					
ANR	4826454	IdentifierDeclType	bool		4826449	0					
ANR	4826455	Identifier	found		4826449	1					
ANR	4826456	AssignmentExpression	found = false		4826449	2		=			
ANR	4826457	Identifier	false		4826449	0					
ANR	4826458	Identifier	false		4826449	1					
ANR	4826459	IfStatement	if ( HAVE_STRUCT_IFCONF )		4826449	1					
ANR	4826460	Condition	HAVE_STRUCT_IFCONF	181:6:4423:4440	4826449	0	True				
ANR	4826461	Identifier	HAVE_STRUCT_IFCONF		4826449	0					
ANR	4826462	Statement	&&	181:26:4443:4444	4826449	1	True				
ANR	4826463	Statement	(	181:29:4446:4446	4826449	2	True				
ANR	4826464	Statement	HAVE_STRUCT_IFREQ	181:30:4447:4463	4826449	3	True				
ANR	4826465	Statement	)	181:47:4464:4464	4826449	4	True				
ANR	4826466	Statement	&&	181:49:4466:4467	4826449	5	True				
ANR	4826467	Statement	(	181:52:4469:4469	4826449	6	True				
ANR	4826468	Statement	HAVE_DECL_SIOCGIFCONF	181:53:4470:4490	4826449	7	True				
ANR	4826469	Statement	)	181:74:4491:4491	4826449	8	True				
ANR	4826470	IdentifierDeclStatement	struct ifreq ifr ;	182:1:4494:4510	4826449	9	True				
ANR	4826471	IdentifierDecl	ifr		4826449	0					
ANR	4826472	IdentifierDeclType	struct ifreq		4826449	0					
ANR	4826473	Identifier	ifr		4826449	1					
ANR	4826474	IdentifierDeclStatement	int sock ;	183:1:4513:4524	4826449	10	True				
ANR	4826475	IdentifierDecl	sock		4826449	0					
ANR	4826476	IdentifierDeclType	int		4826449	0					
ANR	4826477	Identifier	sock		4826449	1					
ANR	4826478	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	186:1:4574:4611	4826449	11	True				
ANR	4826479	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		4826449	0		=			
ANR	4826480	Identifier	sock		4826449	0					
ANR	4826481	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		4826449	1					
ANR	4826482	Callee	socket		4826449	0					
ANR	4826483	Identifier	socket		4826449	0					
ANR	4826484	ArgumentList	AF_INET		4826449	1					
ANR	4826485	Argument	AF_INET		4826449	0					
ANR	4826486	Identifier	AF_INET		4826449	0					
ANR	4826487	Argument	SOCK_DGRAM		4826449	1					
ANR	4826488	Identifier	SOCK_DGRAM		4826449	0					
ANR	4826489	Argument	0		4826449	2					
ANR	4826490	PrimaryExpression	0		4826449	0					
ANR	4826491	IfStatement	if ( sock < 0 )		4826449	12					
ANR	4826492	Condition	sock < 0	187:5:4618:4625	4826449	0	True				
ANR	4826493	RelationalExpression	sock < 0		4826449	0		<			
ANR	4826494	Identifier	sock		4826449	0					
ANR	4826495	PrimaryExpression	0		4826449	1					
ANR	4826496	CompoundStatement		9:15:235:235	4826449	1					
ANR	4826497	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	188:2:4632:4687	4826449	0	True				
ANR	4826498	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		4826449	0					
ANR	4826499	Callee	derror		4826449	0					
ANR	4826500	Identifier	derror		4826449	0					
ANR	4826501	ArgumentList	"""Cannot get control socket for WOL detection"""		4826449	1					
ANR	4826502	Argument	"""Cannot get control socket for WOL detection"""		4826449	0					
ANR	4826503	PrimaryExpression	"""Cannot get control socket for WOL detection"""		4826449	0					
ANR	4826504	ReturnStatement	return false ;	189:2:4691:4703	4826449	1	True				
ANR	4826505	Identifier	false		4826449	0					
ANR	4826506	ExpressionStatement	"getName ( ifr , name )"	194:1:4819:4839	4826449	13	True				
ANR	4826507	CallExpression	"getName ( ifr , name )"		4826449	0					
ANR	4826508	Callee	getName		4826449	0					
ANR	4826509	Identifier	getName		4826449	0					
ANR	4826510	ArgumentList	ifr		4826449	1					
ANR	4826511	Argument	ifr		4826449	0					
ANR	4826512	Identifier	ifr		4826449	0					
ANR	4826513	Argument	name		4826449	1					
ANR	4826514	Identifier	name		4826449	0					
ANR	4826515	IdentifierDeclStatement	"int status = ioctl ( sock , SIOCGIFADDR , & ifr ) ;"	195:1:4842:4887	4826449	14	True				
ANR	4826516	IdentifierDecl	"status = ioctl ( sock , SIOCGIFADDR , & ifr )"		4826449	0					
ANR	4826517	IdentifierDeclType	int		4826449	0					
ANR	4826518	Identifier	status		4826449	1					
ANR	4826519	AssignmentExpression	"status = ioctl ( sock , SIOCGIFADDR , & ifr )"		4826449	2		=			
ANR	4826520	Identifier	status		4826449	0					
ANR	4826521	CallExpression	"ioctl ( sock , SIOCGIFADDR , & ifr )"		4826449	1					
ANR	4826522	Callee	ioctl		4826449	0					
ANR	4826523	Identifier	ioctl		4826449	0					
ANR	4826524	ArgumentList	sock		4826449	1					
ANR	4826525	Argument	sock		4826449	0					
ANR	4826526	Identifier	sock		4826449	0					
ANR	4826527	Argument	SIOCGIFADDR		4826449	1					
ANR	4826528	Identifier	SIOCGIFADDR		4826449	0					
ANR	4826529	Argument	& ifr		4826449	2					
ANR	4826530	UnaryOperationExpression	& ifr		4826449	0					
ANR	4826531	UnaryOperator	&		4826449	0					
ANR	4826532	Identifier	ifr		4826449	1					
ANR	4826533	IfStatement	if ( status < 0 )		4826449	15					
ANR	4826534	Condition	status < 0	196:6:4895:4904	4826449	0	True				
ANR	4826535	RelationalExpression	status < 0		4826449	0		<			
ANR	4826536	Identifier	status		4826449	0					
ANR	4826537	PrimaryExpression	0		4826449	1					
ANR	4826538	CompoundStatement		18:19:515:515	4826449	1					
ANR	4826539	ExpressionStatement	"derror ( ""ioctl(SIOCGIFADDR)"" )"	197:2:4912:4942	4826449	0	True				
ANR	4826540	CallExpression	"derror ( ""ioctl(SIOCGIFADDR)"" )"		4826449	0					
ANR	4826541	Callee	derror		4826449	0					
ANR	4826542	Identifier	derror		4826449	0					
ANR	4826543	ArgumentList	"""ioctl(SIOCGIFADDR)"""		4826449	1					
ANR	4826544	Argument	"""ioctl(SIOCGIFADDR)"""		4826449	0					
ANR	4826545	PrimaryExpression	"""ioctl(SIOCGIFADDR)"""		4826449	0					
ANR	4826546	ElseStatement	else		4826449	0					
ANR	4826547	CompoundStatement		21:6:560:560	4826449	0					
ANR	4826548	ExpressionStatement	found = true	200:2:4957:4969	4826449	0	True				
ANR	4826549	AssignmentExpression	found = true		4826449	0		=			
ANR	4826550	Identifier	found		4826449	0					
ANR	4826551	Identifier	true		4826449	1					
ANR	4826552	ExpressionStatement	setIpAddr ( ifr )	201:2:4973:4989	4826449	1	True				
ANR	4826553	CallExpression	setIpAddr ( ifr )		4826449	0					
ANR	4826554	Callee	setIpAddr		4826449	0					
ANR	4826555	Identifier	setIpAddr		4826449	0					
ANR	4826556	ArgumentList	ifr		4826449	1					
ANR	4826557	Argument	ifr		4826449	0					
ANR	4826558	Identifier	ifr		4826449	0					
ANR	4826559	IfStatement	if ( found )		4826449	16					
ANR	4826560	Condition	found	204:6:5001:5005	4826449	0	True				
ANR	4826561	Identifier	found		4826449	0					
ANR	4826562	CompoundStatement		26:14:616:616	4826449	1					
ANR	4826563	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Found interface %s with ip %s\\n"" , name , m_ip_addr . to_ip_string ( ) . Value ( ) )"	205:2:5013:5130	4826449	0	True				
ANR	4826564	CallExpression	"dprintf ( D_FULLDEBUG , ""Found interface %s with ip %s\\n"" , name , m_ip_addr . to_ip_string ( ) . Value ( ) )"		4826449	0					
ANR	4826565	Callee	dprintf		4826449	0					
ANR	4826566	Identifier	dprintf		4826449	0					
ANR	4826567	ArgumentList	D_FULLDEBUG		4826449	1					
ANR	4826568	Argument	D_FULLDEBUG		4826449	0					
ANR	4826569	Identifier	D_FULLDEBUG		4826449	0					
ANR	4826570	Argument	"""Found interface %s with ip %s\\n"""		4826449	1					
ANR	4826571	PrimaryExpression	"""Found interface %s with ip %s\\n"""		4826449	0					
ANR	4826572	Argument	name		4826449	2					
ANR	4826573	Identifier	name		4826449	0					
ANR	4826574	Argument	m_ip_addr . to_ip_string ( ) . Value ( )		4826449	3					
ANR	4826575	CallExpression	m_ip_addr . to_ip_string ( ) . Value ( )		4826449	0					
ANR	4826576	Callee	m_ip_addr . to_ip_string ( ) . Value		4826449	0					
ANR	4826577	MemberAccess	m_ip_addr . to_ip_string ( ) . Value		4826449	0					
ANR	4826578	CallExpression	m_ip_addr . to_ip_string ( )		4826449	0					
ANR	4826579	Callee	m_ip_addr . to_ip_string		4826449	0					
ANR	4826580	MemberAccess	m_ip_addr . to_ip_string		4826449	0					
ANR	4826581	Identifier	m_ip_addr		4826449	0					
ANR	4826582	Identifier	to_ip_string		4826449	1					
ANR	4826583	ArgumentList			4826449	1					
ANR	4826584	Identifier	Value		4826449	1					
ANR	4826585	ArgumentList			4826449	1					
ANR	4826586	ElseStatement	else		4826449	0					
ANR	4826587	CompoundStatement		34:1:749:749	4826449	0					
ANR	4826588	ExpressionStatement	m_if_name = NULL	213:2:5146:5162	4826449	0	True				
ANR	4826589	AssignmentExpression	m_if_name = NULL		4826449	0		=			
ANR	4826590	Identifier	m_if_name		4826449	0					
ANR	4826591	Identifier	NULL		4826449	1					
ANR	4826592	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""No interface for name %s\\n"" , name )"	214:2:5166:5224	4826449	1	True				
ANR	4826593	CallExpression	"dprintf ( D_FULLDEBUG , ""No interface for name %s\\n"" , name )"		4826449	0					
ANR	4826594	Callee	dprintf		4826449	0					
ANR	4826595	Identifier	dprintf		4826449	0					
ANR	4826596	ArgumentList	D_FULLDEBUG		4826449	1					
ANR	4826597	Argument	D_FULLDEBUG		4826449	0					
ANR	4826598	Identifier	D_FULLDEBUG		4826449	0					
ANR	4826599	Argument	"""No interface for name %s\\n"""		4826449	1					
ANR	4826600	PrimaryExpression	"""No interface for name %s\\n"""		4826449	0					
ANR	4826601	Argument	name		4826449	2					
ANR	4826602	Identifier	name		4826449	0					
ANR	4826603	ExpressionStatement	close ( sock )	218:1:5269:5282	4826449	17	True				
ANR	4826604	CallExpression	close ( sock )		4826449	0					
ANR	4826605	Callee	close		4826449	0					
ANR	4826606	Identifier	close		4826449	0					
ANR	4826607	ArgumentList	sock		4826449	1					
ANR	4826608	Argument	sock		4826449	0					
ANR	4826609	Identifier	sock		4826449	0					
ANR	4826610	ReturnStatement	return found ;	221:1:5293:5305	4826449	18	True				
ANR	4826611	Identifier	found		4826449	0					
ANR	4826612	ReturnType	bool		4826449	1					
ANR	4826613	Identifier	LinuxNetworkAdapter :: findAdapter		4826449	2					
ANR	4826614	ParameterList	const char * name		4826449	3					
ANR	4826615	Parameter	const char * name	178:34:4373:4388	4826449	0	True				
ANR	4826616	ParameterType	const char *		4826449	0					
ANR	4826617	Identifier	name		4826449	1					
ANR	4826618	CFGEntryNode	ENTRY		4826449		True				
ANR	4826619	CFGExitNode	EXIT		4826449		True				
ANR	4826620	Symbol	SIOCGIFADDR		4826449						
ANR	4826621	Symbol	NULL		4826449						
ANR	4826622	Symbol	m_if_name		4826449						
ANR	4826623	Symbol	false		4826449						
ANR	4826624	Symbol	D_FULLDEBUG		4826449						
ANR	4826625	Symbol	AF_INET		4826449						
ANR	4826626	Symbol	SOCK_DGRAM		4826449						
ANR	4826627	Symbol	m_ip_addr . to_ip_string		4826449						
ANR	4826628	Symbol	ioctl		4826449						
ANR	4826629	Symbol	sock		4826449						
ANR	4826630	Symbol	found		4826449						
ANR	4826631	Symbol	ifr		4826449						
ANR	4826632	Symbol	m_ip_addr . to_ip_string ( ) . Value		4826449						
ANR	4826633	Symbol	name		4826449						
ANR	4826634	Symbol	true		4826449						
ANR	4826635	Symbol	socket		4826449						
ANR	4826636	Symbol	& ifr		4826449						
ANR	4826637	Symbol	HAVE_STRUCT_IFCONF		4826449						
ANR	4826638	Symbol	status		4826449						
ANR	4826639	Symbol	m_ip_addr		4826449						
ANR	4826640	Function	LinuxNetworkAdapter :: getAdapterInfo	225:0:5311:6127							
ANR	4826641	FunctionDef	LinuxNetworkAdapter :: getAdapterInfo ()		4826640	0					
ANR	4826642	CompoundStatement		227:0:5360:6127	4826640	0					
ANR	4826643	IdentifierDeclStatement	bool ok = true ;	228:1:5363:5379	4826640	0	True				
ANR	4826644	IdentifierDecl	ok = true		4826640	0					
ANR	4826645	IdentifierDeclType	bool		4826640	0					
ANR	4826646	Identifier	ok		4826640	1					
ANR	4826647	AssignmentExpression	ok = true		4826640	2		=			
ANR	4826648	Identifier	true		4826640	0					
ANR	4826649	Identifier	true		4826640	1					
ANR	4826650	IfStatement	if ( HAVE_STRUCT_IFCONF )		4826640	1					
ANR	4826651	Condition	HAVE_STRUCT_IFCONF	229:6:5387:5404	4826640	0	True				
ANR	4826652	Identifier	HAVE_STRUCT_IFCONF		4826640	0					
ANR	4826653	Statement	&&	229:26:5407:5408	4826640	1	True				
ANR	4826654	Statement	(	229:29:5410:5410	4826640	2	True				
ANR	4826655	Statement	HAVE_STRUCT_IFREQ	229:30:5411:5427	4826640	3	True				
ANR	4826656	Statement	)	229:47:5428:5428	4826640	4	True				
ANR	4826657	Statement	&&	229:49:5430:5431	4826640	5	True				
ANR	4826658	Statement	(	229:52:5433:5433	4826640	6	True				
ANR	4826659	Statement	HAVE_DECL_SIOCGIFCONF	229:53:5434:5454	4826640	7	True				
ANR	4826660	Statement	)	229:74:5455:5455	4826640	8	True				
ANR	4826661	IdentifierDeclStatement	struct ifreq ifr ;	230:1:5458:5474	4826640	9	True				
ANR	4826662	IdentifierDecl	ifr		4826640	0					
ANR	4826663	IdentifierDeclType	struct ifreq		4826640	0					
ANR	4826664	Identifier	ifr		4826640	1					
ANR	4826665	IdentifierDeclStatement	int sock ;	231:1:5477:5488	4826640	10	True				
ANR	4826666	IdentifierDecl	sock		4826640	0					
ANR	4826667	IdentifierDeclType	int		4826640	0					
ANR	4826668	Identifier	sock		4826640	1					
ANR	4826669	IdentifierDeclStatement	int status ;	232:1:5491:5504	4826640	11	True				
ANR	4826670	IdentifierDecl	status		4826640	0					
ANR	4826671	IdentifierDeclType	int		4826640	0					
ANR	4826672	Identifier	status		4826640	1					
ANR	4826673	ExpressionStatement	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"	235:1:5554:5591	4826640	12	True				
ANR	4826674	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		4826640	0		=			
ANR	4826675	Identifier	sock		4826640	0					
ANR	4826676	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		4826640	1					
ANR	4826677	Callee	socket		4826640	0					
ANR	4826678	Identifier	socket		4826640	0					
ANR	4826679	ArgumentList	AF_INET		4826640	1					
ANR	4826680	Argument	AF_INET		4826640	0					
ANR	4826681	Identifier	AF_INET		4826640	0					
ANR	4826682	Argument	SOCK_DGRAM		4826640	1					
ANR	4826683	Identifier	SOCK_DGRAM		4826640	0					
ANR	4826684	Argument	0		4826640	2					
ANR	4826685	PrimaryExpression	0		4826640	0					
ANR	4826686	IfStatement	if ( sock < 0 )		4826640	13					
ANR	4826687	Condition	sock < 0	236:5:5598:5605	4826640	0	True				
ANR	4826688	RelationalExpression	sock < 0		4826640	0		<			
ANR	4826689	Identifier	sock		4826640	0					
ANR	4826690	PrimaryExpression	0		4826640	1					
ANR	4826691	CompoundStatement		10:15:247:247	4826640	1					
ANR	4826692	ExpressionStatement	"derror ( ""Cannot get control socket for WOL detection"" )"	237:2:5612:5667	4826640	0	True				
ANR	4826693	CallExpression	"derror ( ""Cannot get control socket for WOL detection"" )"		4826640	0					
ANR	4826694	Callee	derror		4826640	0					
ANR	4826695	Identifier	derror		4826640	0					
ANR	4826696	ArgumentList	"""Cannot get control socket for WOL detection"""		4826640	1					
ANR	4826697	Argument	"""Cannot get control socket for WOL detection"""		4826640	0					
ANR	4826698	PrimaryExpression	"""Cannot get control socket for WOL detection"""		4826640	0					
ANR	4826699	ReturnStatement	return false ;	238:2:5671:5683	4826640	1	True				
ANR	4826700	Identifier	false		4826640	0					
ANR	4826701	ExpressionStatement	getName ( ifr )	242:1:5719:5733	4826640	14	True				
ANR	4826702	CallExpression	getName ( ifr )		4826640	0					
ANR	4826703	Callee	getName		4826640	0					
ANR	4826704	Identifier	getName		4826640	0					
ANR	4826705	ArgumentList	ifr		4826640	1					
ANR	4826706	Argument	ifr		4826640	0					
ANR	4826707	Identifier	ifr		4826640	0					
ANR	4826708	ExpressionStatement	"status = ioctl ( sock , SIOCGIFHWADDR , & ifr )"	243:1:5736:5779	4826640	15	True				
ANR	4826709	AssignmentExpression	"status = ioctl ( sock , SIOCGIFHWADDR , & ifr )"		4826640	0		=			
ANR	4826710	Identifier	status		4826640	0					
ANR	4826711	CallExpression	"ioctl ( sock , SIOCGIFHWADDR , & ifr )"		4826640	1					
ANR	4826712	Callee	ioctl		4826640	0					
ANR	4826713	Identifier	ioctl		4826640	0					
ANR	4826714	ArgumentList	sock		4826640	1					
ANR	4826715	Argument	sock		4826640	0					
ANR	4826716	Identifier	sock		4826640	0					
ANR	4826717	Argument	SIOCGIFHWADDR		4826640	1					
ANR	4826718	Identifier	SIOCGIFHWADDR		4826640	0					
ANR	4826719	Argument	& ifr		4826640	2					
ANR	4826720	UnaryOperationExpression	& ifr		4826640	0					
ANR	4826721	UnaryOperator	&		4826640	0					
ANR	4826722	Identifier	ifr		4826640	1					
ANR	4826723	IfStatement	if ( status < 0 )		4826640	16					
ANR	4826724	Condition	status < 0	244:6:5787:5796	4826640	0	True				
ANR	4826725	RelationalExpression	status < 0		4826640	0		<			
ANR	4826726	Identifier	status		4826640	0					
ANR	4826727	PrimaryExpression	0		4826640	1					
ANR	4826728	CompoundStatement		18:19:439:439	4826640	1					
ANR	4826729	ExpressionStatement	"derror ( ""ioctl(SIOCGIFHWADDR)"" )"	245:2:5804:5836	4826640	0	True				
ANR	4826730	CallExpression	"derror ( ""ioctl(SIOCGIFHWADDR)"" )"		4826640	0					
ANR	4826731	Callee	derror		4826640	0					
ANR	4826732	Identifier	derror		4826640	0					
ANR	4826733	ArgumentList	"""ioctl(SIOCGIFHWADDR)"""		4826640	1					
ANR	4826734	Argument	"""ioctl(SIOCGIFHWADDR)"""		4826640	0					
ANR	4826735	PrimaryExpression	"""ioctl(SIOCGIFHWADDR)"""		4826640	0					
ANR	4826736	ElseStatement	else		4826640	0					
ANR	4826737	CompoundStatement		21:6:486:486	4826640	0					
ANR	4826738	ExpressionStatement	setHwAddr ( ifr )	248:2:5851:5867	4826640	0	True				
ANR	4826739	CallExpression	setHwAddr ( ifr )		4826640	0					
ANR	4826740	Callee	setHwAddr		4826640	0					
ANR	4826741	Identifier	setHwAddr		4826640	0					
ANR	4826742	ArgumentList	ifr		4826640	1					
ANR	4826743	Argument	ifr		4826640	0					
ANR	4826744	Identifier	ifr		4826640	0					
ANR	4826745	ExpressionStatement	getName ( ifr )	252:1:5895:5909	4826640	17	True				
ANR	4826746	CallExpression	getName ( ifr )		4826640	0					
ANR	4826747	Callee	getName		4826640	0					
ANR	4826748	Identifier	getName		4826640	0					
ANR	4826749	ArgumentList	ifr		4826640	1					
ANR	4826750	Argument	ifr		4826640	0					
ANR	4826751	Identifier	ifr		4826640	0					
ANR	4826752	ExpressionStatement	ifr . ifr_addr . sa_family = AF_INET	253:1:5912:5944	4826640	18	True				
ANR	4826753	AssignmentExpression	ifr . ifr_addr . sa_family = AF_INET		4826640	0		=			
ANR	4826754	MemberAccess	ifr . ifr_addr . sa_family		4826640	0					
ANR	4826755	MemberAccess	ifr . ifr_addr		4826640	0					
ANR	4826756	Identifier	ifr		4826640	0					
ANR	4826757	Identifier	ifr_addr		4826640	1					
ANR	4826758	Identifier	sa_family		4826640	1					
ANR	4826759	Identifier	AF_INET		4826640	1					
ANR	4826760	ExpressionStatement	"status = ioctl ( sock , SIOCGIFNETMASK , & ifr )"	254:1:5947:5991	4826640	19	True				
ANR	4826761	AssignmentExpression	"status = ioctl ( sock , SIOCGIFNETMASK , & ifr )"		4826640	0		=			
ANR	4826762	Identifier	status		4826640	0					
ANR	4826763	CallExpression	"ioctl ( sock , SIOCGIFNETMASK , & ifr )"		4826640	1					
ANR	4826764	Callee	ioctl		4826640	0					
ANR	4826765	Identifier	ioctl		4826640	0					
ANR	4826766	ArgumentList	sock		4826640	1					
ANR	4826767	Argument	sock		4826640	0					
ANR	4826768	Identifier	sock		4826640	0					
ANR	4826769	Argument	SIOCGIFNETMASK		4826640	1					
ANR	4826770	Identifier	SIOCGIFNETMASK		4826640	0					
ANR	4826771	Argument	& ifr		4826640	2					
ANR	4826772	UnaryOperationExpression	& ifr		4826640	0					
ANR	4826773	UnaryOperator	&		4826640	0					
ANR	4826774	Identifier	ifr		4826640	1					
ANR	4826775	IfStatement	if ( status < 0 )		4826640	20					
ANR	4826776	Condition	status < 0	255:6:5999:6008	4826640	0	True				
ANR	4826777	RelationalExpression	status < 0		4826640	0		<			
ANR	4826778	Identifier	status		4826640	0					
ANR	4826779	PrimaryExpression	0		4826640	1					
ANR	4826780	CompoundStatement		29:19:651:651	4826640	1					
ANR	4826781	ExpressionStatement	"derror ( ""ioctl(SIOCGIFNETMASK)"" )"	256:2:6016:6049	4826640	0	True				
ANR	4826782	CallExpression	"derror ( ""ioctl(SIOCGIFNETMASK)"" )"		4826640	0					
ANR	4826783	Callee	derror		4826640	0					
ANR	4826784	Identifier	derror		4826640	0					
ANR	4826785	ArgumentList	"""ioctl(SIOCGIFNETMASK)"""		4826640	1					
ANR	4826786	Argument	"""ioctl(SIOCGIFNETMASK)"""		4826640	0					
ANR	4826787	PrimaryExpression	"""ioctl(SIOCGIFNETMASK)"""		4826640	0					
ANR	4826788	ElseStatement	else		4826640	0					
ANR	4826789	CompoundStatement		32:6:699:699	4826640	0					
ANR	4826790	ExpressionStatement	setNetMask ( ifr )	259:2:6064:6081	4826640	0	True				
ANR	4826791	CallExpression	setNetMask ( ifr )		4826640	0					
ANR	4826792	Callee	setNetMask		4826640	0					
ANR	4826793	Identifier	setNetMask		4826640	0					
ANR	4826794	ArgumentList	ifr		4826640	1					
ANR	4826795	Argument	ifr		4826640	0					
ANR	4826796	Identifier	ifr		4826640	0					
ANR	4826797	Statement	endif	263:2:6109:6113	4826640	21	True				
ANR	4826798	ReturnStatement	return ok ;	264:1:6116:6125	4826640	22	True				
ANR	4826799	Identifier	ok		4826640	0					
ANR	4826800	ReturnType	bool		4826640	1					
ANR	4826801	Identifier	LinuxNetworkAdapter :: getAdapterInfo		4826640	2					
ANR	4826802	ParameterList			4826640	3					
ANR	4826803	CFGEntryNode	ENTRY		4826640		True				
ANR	4826804	CFGExitNode	EXIT		4826640		True				
ANR	4826805	Symbol	ifr . ifr_addr . sa_family		4826640						
ANR	4826806	Symbol	SIOCGIFNETMASK		4826640						
ANR	4826807	Symbol	SIOCGIFHWADDR		4826640						
ANR	4826808	Symbol	false		4826640						
ANR	4826809	Symbol	AF_INET		4826640						
ANR	4826810	Symbol	SOCK_DGRAM		4826640						
ANR	4826811	Symbol	ioctl		4826640						
ANR	4826812	Symbol	sock		4826640						
ANR	4826813	Symbol	ifr		4826640						
ANR	4826814	Symbol	true		4826640						
ANR	4826815	Symbol	socket		4826640						
ANR	4826816	Symbol	ok		4826640						
ANR	4826817	Symbol	& ifr		4826640						
ANR	4826818	Symbol	ifr . ifr_addr		4826640						
ANR	4826819	Symbol	HAVE_STRUCT_IFCONF		4826640						
ANR	4826820	Symbol	status		4826640						
ANR	4826821	Function	LinuxNetworkAdapter :: detectWOL	267:0:6130:7655							
ANR	4826822	FunctionDef	LinuxNetworkAdapter :: detectWOL ()		4826821	0					
ANR	4826823	CompoundStatement		269:0:6175:7655	4826821	0					
ANR	4826824	IdentifierDeclStatement	bool ok = false ;	270:1:6178:6197	4826821	0	True				
ANR	4826825	IdentifierDecl	ok = false		4826821	0					
ANR	4826826	IdentifierDeclType	bool		4826821	0					
ANR	4826827	Identifier	ok		4826821	1					
ANR	4826828	AssignmentExpression	ok = false		4826821	2		=			
ANR	4826829	Identifier	false		4826821	0					
ANR	4826830	Identifier	false		4826821	1					
ANR	4826831	IdentifierDeclStatement	int err ;	272:1:6277:6289	4826821	1	True				
ANR	4826832	IdentifierDecl	err		4826821	0					
ANR	4826833	IdentifierDeclType	int		4826821	0					
ANR	4826834	Identifier	err		4826821	1					
ANR	4826835	IdentifierDeclStatement	struct ethtool_wolinfo wolinfo ;	273:1:6292:6322	4826821	2	True				
ANR	4826836	IdentifierDecl	wolinfo		4826821	0					
ANR	4826837	IdentifierDeclType	struct ethtool_wolinfo		4826821	0					
ANR	4826838	Identifier	wolinfo		4826821	1					
ANR	4826839	IdentifierDeclStatement	struct ifreq ifr ;	274:1:6325:6343	4826821	3	True				
ANR	4826840	IdentifierDecl	ifr		4826821	0					
ANR	4826841	IdentifierDeclType	struct ifreq		4826821	0					
ANR	4826842	Identifier	ifr		4826821	1					
ANR	4826843	IdentifierDeclStatement	"int sock = socket ( AF_INET , SOCK_DGRAM , 0 ) ;"	277:1:6372:6413	4826821	4	True				
ANR	4826844	IdentifierDecl	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		4826821	0					
ANR	4826845	IdentifierDeclType	int		4826821	0					
ANR	4826846	Identifier	sock		4826821	1					
ANR	4826847	AssignmentExpression	"sock = socket ( AF_INET , SOCK_DGRAM , 0 )"		4826821	2		=			
ANR	4826848	Identifier	sock		4826821	0					
ANR	4826849	CallExpression	"socket ( AF_INET , SOCK_DGRAM , 0 )"		4826821	1					
ANR	4826850	Callee	socket		4826821	0					
ANR	4826851	Identifier	socket		4826821	0					
ANR	4826852	ArgumentList	AF_INET		4826821	1					
ANR	4826853	Argument	AF_INET		4826821	0					
ANR	4826854	Identifier	AF_INET		4826821	0					
ANR	4826855	Argument	SOCK_DGRAM		4826821	1					
ANR	4826856	Identifier	SOCK_DGRAM		4826821	0					
ANR	4826857	Argument	0		4826821	2					
ANR	4826858	PrimaryExpression	0		4826821	0					
ANR	4826859	IfStatement	if ( sock < 0 )		4826821	5					
ANR	4826860	Condition	sock < 0	278:5:6420:6427	4826821	0	True				
ANR	4826861	RelationalExpression	sock < 0		4826821	0		<			
ANR	4826862	Identifier	sock		4826821	0					
ANR	4826863	PrimaryExpression	0		4826821	1					
ANR	4826864	CompoundStatement		10:15:254:254	4826821	1					
ANR	4826865	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cannot get control socket for WOL detection\\n"" )"	279:2:6434:6502	4826821	0	True				
ANR	4826866	CallExpression	"dprintf ( D_ALWAYS , ""Cannot get control socket for WOL detection\\n"" )"		4826821	0					
ANR	4826867	Callee	dprintf		4826821	0					
ANR	4826868	Identifier	dprintf		4826821	0					
ANR	4826869	ArgumentList	D_ALWAYS		4826821	1					
ANR	4826870	Argument	D_ALWAYS		4826821	0					
ANR	4826871	Identifier	D_ALWAYS		4826821	0					
ANR	4826872	Argument	"""Cannot get control socket for WOL detection\\n"""		4826821	1					
ANR	4826873	PrimaryExpression	"""Cannot get control socket for WOL detection\\n"""		4826821	0					
ANR	4826874	ReturnStatement	return false ;	280:2:6506:6518	4826821	1	True				
ANR	4826875	Identifier	false		4826821	0					
ANR	4826876	ExpressionStatement	wolinfo . cmd = ETHTOOL_GWOL	284:1:6575:6601	4826821	6	True				
ANR	4826877	AssignmentExpression	wolinfo . cmd = ETHTOOL_GWOL		4826821	0		=			
ANR	4826878	MemberAccess	wolinfo . cmd		4826821	0					
ANR	4826879	Identifier	wolinfo		4826821	0					
ANR	4826880	Identifier	cmd		4826821	1					
ANR	4826881	Identifier	ETHTOOL_GWOL		4826821	1					
ANR	4826882	ExpressionStatement	getName ( ifr )	285:1:6604:6618	4826821	7	True				
ANR	4826883	CallExpression	getName ( ifr )		4826821	0					
ANR	4826884	Callee	getName		4826821	0					
ANR	4826885	Identifier	getName		4826821	0					
ANR	4826886	ArgumentList	ifr		4826821	1					
ANR	4826887	Argument	ifr		4826821	0					
ANR	4826888	Identifier	ifr		4826821	0					
ANR	4826889	ExpressionStatement	ifr . ifr_data = ( caddr_t ) ( & wolinfo )	286:1:6621:6656	4826821	8	True				
ANR	4826890	AssignmentExpression	ifr . ifr_data = ( caddr_t ) ( & wolinfo )		4826821	0		=			
ANR	4826891	MemberAccess	ifr . ifr_data		4826821	0					
ANR	4826892	Identifier	ifr		4826821	0					
ANR	4826893	Identifier	ifr_data		4826821	1					
ANR	4826894	CastExpression	( caddr_t ) ( & wolinfo )		4826821	1					
ANR	4826895	CastTarget	caddr_t		4826821	0					
ANR	4826896	UnaryOperationExpression	& wolinfo		4826821	1					
ANR	4826897	UnaryOperator	&		4826821	0					
ANR	4826898	Identifier	wolinfo		4826821	1					
ANR	4826899	IdentifierDeclStatement	priv_state saved_priv = set_priv ( PRIV_ROOT ) ;	288:1:6660:6705	4826821	9	True				
ANR	4826900	IdentifierDecl	saved_priv = set_priv ( PRIV_ROOT )		4826821	0					
ANR	4826901	IdentifierDeclType	priv_state		4826821	0					
ANR	4826902	Identifier	saved_priv		4826821	1					
ANR	4826903	AssignmentExpression	saved_priv = set_priv ( PRIV_ROOT )		4826821	2		=			
ANR	4826904	Identifier	saved_priv		4826821	0					
ANR	4826905	CallExpression	set_priv ( PRIV_ROOT )		4826821	1					
ANR	4826906	Callee	set_priv		4826821	0					
ANR	4826907	Identifier	set_priv		4826821	0					
ANR	4826908	ArgumentList	PRIV_ROOT		4826821	1					
ANR	4826909	Argument	PRIV_ROOT		4826821	0					
ANR	4826910	Identifier	PRIV_ROOT		4826821	0					
ANR	4826911	ExpressionStatement	"err = ioctl ( sock , SIOCETHTOOL , & ifr )"	289:1:6708:6744	4826821	10	True				
ANR	4826912	AssignmentExpression	"err = ioctl ( sock , SIOCETHTOOL , & ifr )"		4826821	0		=			
ANR	4826913	Identifier	err		4826821	0					
ANR	4826914	CallExpression	"ioctl ( sock , SIOCETHTOOL , & ifr )"		4826821	1					
ANR	4826915	Callee	ioctl		4826821	0					
ANR	4826916	Identifier	ioctl		4826821	0					
ANR	4826917	ArgumentList	sock		4826821	1					
ANR	4826918	Argument	sock		4826821	0					
ANR	4826919	Identifier	sock		4826821	0					
ANR	4826920	Argument	SIOCETHTOOL		4826821	1					
ANR	4826921	Identifier	SIOCETHTOOL		4826821	0					
ANR	4826922	Argument	& ifr		4826821	2					
ANR	4826923	UnaryOperationExpression	& ifr		4826821	0					
ANR	4826924	UnaryOperator	&		4826821	0					
ANR	4826925	Identifier	ifr		4826821	1					
ANR	4826926	ExpressionStatement	set_priv ( saved_priv )	290:1:6747:6769	4826821	11	True				
ANR	4826927	CallExpression	set_priv ( saved_priv )		4826821	0					
ANR	4826928	Callee	set_priv		4826821	0					
ANR	4826929	Identifier	set_priv		4826821	0					
ANR	4826930	ArgumentList	saved_priv		4826821	1					
ANR	4826931	Argument	saved_priv		4826821	0					
ANR	4826932	Identifier	saved_priv		4826821	0					
ANR	4826933	IfStatement	if ( err < 0 )		4826821	12					
ANR	4826934	Condition	err < 0	292:6:6778:6784	4826821	0	True				
ANR	4826935	RelationalExpression	err < 0		4826821	0		<			
ANR	4826936	Identifier	err		4826821	0					
ANR	4826937	PrimaryExpression	0		4826821	1					
ANR	4826938	CompoundStatement		24:16:612:612	4826821	1					
ANR	4826939	IfStatement	if ( ( EPERM != errno ) || ( geteuid ( ) == 0 ) )		4826821	0					
ANR	4826940	Condition	( EPERM != errno ) || ( geteuid ( ) == 0 )	293:7:6797:6832	4826821	0	True				
ANR	4826941	OrExpression	( EPERM != errno ) || ( geteuid ( ) == 0 )		4826821	0		||			
ANR	4826942	EqualityExpression	EPERM != errno		4826821	0		!=			
ANR	4826943	Identifier	EPERM		4826821	0					
ANR	4826944	Identifier	errno		4826821	1					
ANR	4826945	EqualityExpression	geteuid ( ) == 0		4826821	1		==			
ANR	4826946	CallExpression	geteuid ( )		4826821	0					
ANR	4826947	Callee	geteuid		4826821	0					
ANR	4826948	Identifier	geteuid		4826821	0					
ANR	4826949	ArgumentList			4826821	1					
ANR	4826950	PrimaryExpression	0		4826821	1					
ANR	4826951	CompoundStatement		25:46:660:660	4826821	1					
ANR	4826952	ExpressionStatement	"derror ( ""ioctl(SIOCETHTOOL/GWOL)"" )"	294:3:6841:6876	4826821	0	True				
ANR	4826953	CallExpression	"derror ( ""ioctl(SIOCETHTOOL/GWOL)"" )"		4826821	0					
ANR	4826954	Callee	derror		4826821	0					
ANR	4826955	Identifier	derror		4826821	0					
ANR	4826956	ArgumentList	"""ioctl(SIOCETHTOOL/GWOL)"""		4826821	1					
ANR	4826957	Argument	"""ioctl(SIOCETHTOOL/GWOL)"""		4826821	0					
ANR	4826958	PrimaryExpression	"""ioctl(SIOCETHTOOL/GWOL)"""		4826821	0					
ANR	4826959	Statement	dprintf	295:3:6881:6887	4826821	1	True				
ANR	4826960	Statement	(	295:10:6888:6888	4826821	2	True				
ANR	4826961	Statement	D_ALWAYS	295:12:6890:6897	4826821	3	True				
ANR	4826962	Statement	","	295:20:6898:6898	4826821	4	True				
ANR	4826963	Statement	"""You can safely ignore the above error if you're not"""	296:6:6906:6958	4826821	5	True				
ANR	4826964	Statement	""" using hibernation\\n"""	297:6:6966:6987	4826821	6	True				
ANR	4826965	Statement	)	297:29:6989:6989	4826821	7	True				
ANR	4826966	ExpressionStatement		297:30:6990:6990	4826821	8	True				
ANR	4826967	ExpressionStatement	m_wol_support_mask = 0	299:2:6998:7020	4826821	1	True				
ANR	4826968	AssignmentExpression	m_wol_support_mask = 0		4826821	0		=			
ANR	4826969	Identifier	m_wol_support_mask		4826821	0					
ANR	4826970	PrimaryExpression	0		4826821	1					
ANR	4826971	ExpressionStatement	m_wol_enable_mask = 0	300:2:7024:7045	4826821	2	True				
ANR	4826972	AssignmentExpression	m_wol_enable_mask = 0		4826821	0		=			
ANR	4826973	Identifier	m_wol_enable_mask		4826821	0					
ANR	4826974	PrimaryExpression	0		4826821	1					
ANR	4826975	ElseStatement	else		4826821	0					
ANR	4826976	CompoundStatement		34:6:880:880	4826821	0					
ANR	4826977	ExpressionStatement	m_wol_support_mask = wolinfo . supported	303:2:7060:7098	4826821	0	True				
ANR	4826978	AssignmentExpression	m_wol_support_mask = wolinfo . supported		4826821	0		=			
ANR	4826979	Identifier	m_wol_support_mask		4826821	0					
ANR	4826980	MemberAccess	wolinfo . supported		4826821	1					
ANR	4826981	Identifier	wolinfo		4826821	0					
ANR	4826982	Identifier	supported		4826821	1					
ANR	4826983	ExpressionStatement	m_wol_enable_mask = wolinfo . wolopts	304:2:7102:7137	4826821	1	True				
ANR	4826984	AssignmentExpression	m_wol_enable_mask = wolinfo . wolopts		4826821	0		=			
ANR	4826985	Identifier	m_wol_enable_mask		4826821	0					
ANR	4826986	MemberAccess	wolinfo . wolopts		4826821	1					
ANR	4826987	Identifier	wolinfo		4826821	0					
ANR	4826988	Identifier	wolopts		4826821	1					
ANR	4826989	ExpressionStatement	ok = true	305:2:7141:7150	4826821	2	True				
ANR	4826990	AssignmentExpression	ok = true		4826821	0		=			
ANR	4826991	Identifier	ok		4826821	0					
ANR	4826992	Identifier	true		4826821	1					
ANR	4826993	ExpressionStatement	"setWolBits ( NetworkAdapterBase :: WOL_HW_SUPPORT , m_wol_support_mask )"	309:1:7207:7275	4826821	13	True				
ANR	4826994	CallExpression	"setWolBits ( NetworkAdapterBase :: WOL_HW_SUPPORT , m_wol_support_mask )"		4826821	0					
ANR	4826995	Callee	setWolBits		4826821	0					
ANR	4826996	Identifier	setWolBits		4826821	0					
ANR	4826997	ArgumentList	NetworkAdapterBase :: WOL_HW_SUPPORT		4826821	1					
ANR	4826998	Argument	NetworkAdapterBase :: WOL_HW_SUPPORT		4826821	0					
ANR	4826999	Identifier	NetworkAdapterBase :: WOL_HW_SUPPORT		4826821	0					
ANR	4827000	Argument	m_wol_support_mask		4826821	1					
ANR	4827001	Identifier	m_wol_support_mask		4826821	0					
ANR	4827002	ExpressionStatement	"setWolBits ( NetworkAdapterBase :: WOL_HW_ENABLED , m_wol_enable_mask )"	310:1:7278:7345	4826821	14	True				
ANR	4827003	CallExpression	"setWolBits ( NetworkAdapterBase :: WOL_HW_ENABLED , m_wol_enable_mask )"		4826821	0					
ANR	4827004	Callee	setWolBits		4826821	0					
ANR	4827005	Identifier	setWolBits		4826821	0					
ANR	4827006	ArgumentList	NetworkAdapterBase :: WOL_HW_ENABLED		4826821	1					
ANR	4827007	Argument	NetworkAdapterBase :: WOL_HW_ENABLED		4826821	0					
ANR	4827008	Identifier	NetworkAdapterBase :: WOL_HW_ENABLED		4826821	0					
ANR	4827009	Argument	m_wol_enable_mask		4826821	1					
ANR	4827010	Identifier	m_wol_enable_mask		4826821	0					
ANR	4827011	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s supports Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeSupported ( ) ? ""yes"" : ""no"" , m_wol_support_mask )"	311:1:7348:7482	4826821	15	True				
ANR	4827012	CallExpression	"dprintf ( D_FULLDEBUG , ""%s supports Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeSupported ( ) ? ""yes"" : ""no"" , m_wol_support_mask )"		4826821	0					
ANR	4827013	Callee	dprintf		4826821	0					
ANR	4827014	Identifier	dprintf		4826821	0					
ANR	4827015	ArgumentList	D_FULLDEBUG		4826821	1					
ANR	4827016	Argument	D_FULLDEBUG		4826821	0					
ANR	4827017	Identifier	D_FULLDEBUG		4826821	0					
ANR	4827018	Argument	"""%s supports Wake-on: %s (raw: 0x%02x)\\n"""		4826821	1					
ANR	4827019	PrimaryExpression	"""%s supports Wake-on: %s (raw: 0x%02x)\\n"""		4826821	0					
ANR	4827020	Argument	m_if_name		4826821	2					
ANR	4827021	Identifier	m_if_name		4826821	0					
ANR	4827022	Argument	"isWakeSupported ( ) ? ""yes"" : ""no"""		4826821	3					
ANR	4827023	ConditionalExpression	"isWakeSupported ( ) ? ""yes"" : ""no"""		4826821	0					
ANR	4827024	Condition	isWakeSupported ( )		4826821	0					
ANR	4827025	CallExpression	isWakeSupported ( )		4826821	0					
ANR	4827026	Callee	isWakeSupported		4826821	0					
ANR	4827027	Identifier	isWakeSupported		4826821	0					
ANR	4827028	ArgumentList			4826821	1					
ANR	4827029	PrimaryExpression	"""yes"""		4826821	1					
ANR	4827030	PrimaryExpression	"""no"""		4826821	2					
ANR	4827031	Argument	m_wol_support_mask		4826821	4					
ANR	4827032	Identifier	m_wol_support_mask		4826821	0					
ANR	4827033	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""%s enabled Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeEnabled ( ) ? ""yes"" : ""no"" , m_wol_enable_mask )"	313:1:7485:7615	4826821	16	True				
ANR	4827034	CallExpression	"dprintf ( D_FULLDEBUG , ""%s enabled Wake-on: %s (raw: 0x%02x)\\n"" , m_if_name , isWakeEnabled ( ) ? ""yes"" : ""no"" , m_wol_enable_mask )"		4826821	0					
ANR	4827035	Callee	dprintf		4826821	0					
ANR	4827036	Identifier	dprintf		4826821	0					
ANR	4827037	ArgumentList	D_FULLDEBUG		4826821	1					
ANR	4827038	Argument	D_FULLDEBUG		4826821	0					
ANR	4827039	Identifier	D_FULLDEBUG		4826821	0					
ANR	4827040	Argument	"""%s enabled Wake-on: %s (raw: 0x%02x)\\n"""		4826821	1					
ANR	4827041	PrimaryExpression	"""%s enabled Wake-on: %s (raw: 0x%02x)\\n"""		4826821	0					
ANR	4827042	Argument	m_if_name		4826821	2					
ANR	4827043	Identifier	m_if_name		4826821	0					
ANR	4827044	Argument	"isWakeEnabled ( ) ? ""yes"" : ""no"""		4826821	3					
ANR	4827045	ConditionalExpression	"isWakeEnabled ( ) ? ""yes"" : ""no"""		4826821	0					
ANR	4827046	Condition	isWakeEnabled ( )		4826821	0					
ANR	4827047	CallExpression	isWakeEnabled ( )		4826821	0					
ANR	4827048	Callee	isWakeEnabled		4826821	0					
ANR	4827049	Identifier	isWakeEnabled		4826821	0					
ANR	4827050	ArgumentList			4826821	1					
ANR	4827051	PrimaryExpression	"""yes"""		4826821	1					
ANR	4827052	PrimaryExpression	"""no"""		4826821	2					
ANR	4827053	Argument	m_wol_enable_mask		4826821	4					
ANR	4827054	Identifier	m_wol_enable_mask		4826821	0					
ANR	4827055	ExpressionStatement	close ( sock )	316:1:7619:7632	4826821	17	True				
ANR	4827056	CallExpression	close ( sock )		4826821	0					
ANR	4827057	Callee	close		4826821	0					
ANR	4827058	Identifier	close		4826821	0					
ANR	4827059	ArgumentList	sock		4826821	1					
ANR	4827060	Argument	sock		4826821	0					
ANR	4827061	Identifier	sock		4826821	0					
ANR	4827062	Statement	endif	317:3:7637:7641	4826821	18	True				
ANR	4827063	ReturnStatement	return ok ;	318:1:7644:7653	4826821	19	True				
ANR	4827064	Identifier	ok		4826821	0					
ANR	4827065	ReturnType	bool		4826821	1					
ANR	4827066	Identifier	LinuxNetworkAdapter :: detectWOL		4826821	2					
ANR	4827067	ParameterList			4826821	3					
ANR	4827068	CFGEntryNode	ENTRY		4826821		True				
ANR	4827069	CFGExitNode	EXIT		4826821		True				
ANR	4827070	Symbol	SIOCETHTOOL		4826821						
ANR	4827071	Symbol	EPERM		4826821						
ANR	4827072	Symbol	m_if_name		4826821						
ANR	4827073	Symbol	m_wol_enable_mask		4826821						
ANR	4827074	Symbol	NetworkAdapterBase :: WOL_HW_SUPPORT		4826821						
ANR	4827075	Symbol	ioctl		4826821						
ANR	4827076	Symbol	m_wol_support_mask		4826821						
ANR	4827077	Symbol	wolinfo		4826821						
ANR	4827078	Symbol	wolinfo . wolopts		4826821						
ANR	4827079	Symbol	ifr . ifr_data		4826821						
ANR	4827080	Symbol	wolinfo . cmd		4826821						
ANR	4827081	Symbol	ok		4826821						
ANR	4827082	Symbol	& ifr		4826821						
ANR	4827083	Symbol	errno		4826821						
ANR	4827084	Symbol	isWakeEnabled		4826821						
ANR	4827085	Symbol	err		4826821						
ANR	4827086	Symbol	ETHTOOL_GWOL		4826821						
ANR	4827087	Symbol	false		4826821						
ANR	4827088	Symbol	D_ALWAYS		4826821						
ANR	4827089	Symbol	& wolinfo		4826821						
ANR	4827090	Symbol	wolinfo . supported		4826821						
ANR	4827091	Symbol	D_FULLDEBUG		4826821						
ANR	4827092	Symbol	AF_INET		4826821						
ANR	4827093	Symbol	isWakeSupported		4826821						
ANR	4827094	Symbol	SOCK_DGRAM		4826821						
ANR	4827095	Symbol	geteuid		4826821						
ANR	4827096	Symbol	sock		4826821						
ANR	4827097	Symbol	set_priv		4826821						
ANR	4827098	Symbol	ifr		4826821						
ANR	4827099	Symbol	saved_priv		4826821						
ANR	4827100	Symbol	true		4826821						
ANR	4827101	Symbol	PRIV_ROOT		4826821						
ANR	4827102	Symbol	socket		4826821						
ANR	4827103	Symbol	NetworkAdapterBase :: WOL_HW_ENABLED		4826821						
ANR	4827104	ClassDef	WolTable	321:0:7658:7741							
ANR	4827105	DeclStmt									
ANR	4827106	Decl							unsigned	unsigned	bit_mask
ANR	4827107	DeclStmt									
ANR	4827108	Decl							NetworkAdapterBase :: WOL_BITS	NetworkAdapterBase :: WOL_BITS	wol_bits
ANR	4827109	DeclStmt									
ANR	4827110	Decl							WolTable	WolTable [ ]	wol_table
ANR	4827111	Function	LinuxNetworkAdapter :: setWolBits	340:0:8210:8537							
ANR	4827112	FunctionDef	"LinuxNetworkAdapter :: setWolBits (WOL_TYPE type , unsigned bits)"		4827111	0					
ANR	4827113	CompoundStatement		342:0:8280:8537	4827111	0					
ANR	4827114	IfStatement	if ( type == WOL_HW_SUPPORT )		4827111	0					
ANR	4827115	Condition	type == WOL_HW_SUPPORT	343:6:8288:8309	4827111	0	True				
ANR	4827116	EqualityExpression	type == WOL_HW_SUPPORT		4827111	0		==			
ANR	4827117	Identifier	type		4827111	0					
ANR	4827118	Identifier	WOL_HW_SUPPORT		4827111	1					
ANR	4827119	CompoundStatement		2:31:32:32	4827111	1					
ANR	4827120	ExpressionStatement	wolResetSupportBits ( )	344:2:8317:8339	4827111	0	True				
ANR	4827121	CallExpression	wolResetSupportBits ( )		4827111	0					
ANR	4827122	Callee	wolResetSupportBits		4827111	0					
ANR	4827123	Identifier	wolResetSupportBits		4827111	0					
ANR	4827124	ArgumentList			4827111	1					
ANR	4827125	ElseStatement	else		4827111	0					
ANR	4827126	CompoundStatement		5:6:69:69	4827111	0					
ANR	4827127	ExpressionStatement	wolResetEnableBits ( )	347:2:8354:8375	4827111	0	True				
ANR	4827128	CallExpression	wolResetEnableBits ( )		4827111	0					
ANR	4827129	Callee	wolResetEnableBits		4827111	0					
ANR	4827130	Identifier	wolResetEnableBits		4827111	0					
ANR	4827131	ArgumentList			4827111	1					
ANR	4827132	ForStatement	for ( unsigned bit = 0 ; wol_table [ bit ] . bit_mask ; bit ++ )		4827111	1					
ANR	4827133	ForInit	unsigned bit = 0 ;	349:6:8386:8402	4827111	0	True				
ANR	4827134	IdentifierDeclStatement	unsigned bit = 0 ;		4827111	0					
ANR	4827135	IdentifierDecl	bit = 0		4827111	0					
ANR	4827136	IdentifierDeclType	unsigned		4827111	0					
ANR	4827137	Identifier	bit		4827111	1					
ANR	4827138	AssignmentExpression	bit = 0		4827111	2		=			
ANR	4827139	Identifier	bit		4827111	0					
ANR	4827140	PrimaryExpression	0		4827111	1					
ANR	4827141	Condition	wol_table [ bit ] . bit_mask	349:25:8405:8427	4827111	1	True				
ANR	4827142	MemberAccess	wol_table [ bit ] . bit_mask		4827111	0					
ANR	4827143	ArrayIndexing	wol_table [ bit ]		4827111	0					
ANR	4827144	Identifier	wol_table		4827111	0					
ANR	4827145	Identifier	bit		4827111	1					
ANR	4827146	Identifier	bit_mask		4827111	1					
ANR	4827147	PostIncDecOperationExpression	bit ++	349:51:8431:8435	4827111	2	True				
ANR	4827148	Identifier	bit		4827111	0					
ANR	4827149	IncDec	++		4827111	1					
ANR	4827150	CompoundStatement		8:59:158:158	4827111	3					
ANR	4827151	IfStatement	if ( wol_table [ bit ] . bit_mask & bits )		4827111	0					
ANR	4827152	Condition	wol_table [ bit ] . bit_mask & bits	350:7:8448:8477	4827111	0	True				
ANR	4827153	BitAndExpression	wol_table [ bit ] . bit_mask & bits		4827111	0		&			
ANR	4827154	MemberAccess	wol_table [ bit ] . bit_mask		4827111	0					
ANR	4827155	ArrayIndexing	wol_table [ bit ]		4827111	0					
ANR	4827156	Identifier	wol_table		4827111	0					
ANR	4827157	Identifier	bit		4827111	1					
ANR	4827158	Identifier	bit_mask		4827111	1					
ANR	4827159	Identifier	bits		4827111	1					
ANR	4827160	CompoundStatement		9:40:200:200	4827111	1					
ANR	4827161	ExpressionStatement	"wolSetBit ( type , wol_table [ bit ] . wol_bits )"	351:3:8486:8528	4827111	0	True				
ANR	4827162	CallExpression	"wolSetBit ( type , wol_table [ bit ] . wol_bits )"		4827111	0					
ANR	4827163	Callee	wolSetBit		4827111	0					
ANR	4827164	Identifier	wolSetBit		4827111	0					
ANR	4827165	ArgumentList	type		4827111	1					
ANR	4827166	Argument	type		4827111	0					
ANR	4827167	Identifier	type		4827111	0					
ANR	4827168	Argument	wol_table [ bit ] . wol_bits		4827111	1					
ANR	4827169	MemberAccess	wol_table [ bit ] . wol_bits		4827111	0					
ANR	4827170	ArrayIndexing	wol_table [ bit ]		4827111	0					
ANR	4827171	Identifier	wol_table		4827111	0					
ANR	4827172	Identifier	bit		4827111	1					
ANR	4827173	Identifier	wol_bits		4827111	1					
ANR	4827174	ReturnType	void		4827111	1					
ANR	4827175	Identifier	LinuxNetworkAdapter :: setWolBits		4827111	2					
ANR	4827176	ParameterList	"WOL_TYPE type , unsigned bits"		4827111	3					
ANR	4827177	Parameter	WOL_TYPE type	341:34:8249:8261	4827111	0	True				
ANR	4827178	ParameterType	WOL_TYPE		4827111	0					
ANR	4827179	Identifier	type		4827111	1					
ANR	4827180	Parameter	unsigned bits	341:49:8264:8276	4827111	1	True				
ANR	4827181	ParameterType	unsigned		4827111	0					
ANR	4827182	Identifier	bits		4827111	1					
ANR	4827183	CFGEntryNode	ENTRY		4827111		True				
ANR	4827184	CFGExitNode	EXIT		4827111		True				
ANR	4827185	Symbol	wol_table [ bit ] . bit_mask		4827111						
ANR	4827186	Symbol	wol_table [ bit ] . wol_bits		4827111						
ANR	4827187	Symbol	bits		4827111						
ANR	4827188	Symbol	* bit		4827111						
ANR	4827189	Symbol	WOL_HW_SUPPORT		4827111						
ANR	4827190	Symbol	type		4827111						
ANR	4827191	Symbol	bit		4827111						
ANR	4827192	Symbol	wol_table		4827111						
ANR	4827193	Symbol	* wol_table		4827111						
