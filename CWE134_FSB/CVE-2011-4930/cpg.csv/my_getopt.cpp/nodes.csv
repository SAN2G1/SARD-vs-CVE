command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1889673	File	data/converged/CVE-2011-4930_htcondor/my_getopt.cpp								
ANR	1889674	DeclStmt									
ANR	1889675	Decl							int	int	my_optind
ANR	1889676	Decl							int	int	my_opterr
ANR	1889677	Decl							int	int	my_optopt
ANR	1889678	DeclStmt									
ANR	1889679	Decl							char	char *	my_optarg
ANR	1889680	Function	my_getopt	46:0:1752:4306							
ANR	1889681	FunctionDef	"my_getopt (int argc , char * argv [ ] , const char * opts)"		1889680	0					
ANR	1889682	CompoundStatement		47:0:1809:4306	1889680	0					
ANR	1889683	Statement	static	48:2:1813:1818	1889680	0	True				
ANR	1889684	IdentifierDeclStatement	int charind = 0 ;	48:9:1820:1833	1889680	1	True				
ANR	1889685	IdentifierDecl	charind = 0		1889680	0					
ANR	1889686	IdentifierDeclType	int		1889680	0					
ANR	1889687	Identifier	charind		1889680	1					
ANR	1889688	AssignmentExpression	charind = 0		1889680	2		=			
ANR	1889689	Identifier	charind		1889680	0					
ANR	1889690	PrimaryExpression	0		1889680	1					
ANR	1889691	IdentifierDeclStatement	const char * s ;	49:2:1837:1850	1889680	2	True				
ANR	1889692	IdentifierDecl	* s		1889680	0					
ANR	1889693	IdentifierDeclType	const char *		1889680	0					
ANR	1889694	Identifier	s		1889680	1					
ANR	1889695	IdentifierDeclStatement	"char mode , colon_mode ;"	50:2:1854:1875	1889680	3	True				
ANR	1889696	IdentifierDecl	mode		1889680	0					
ANR	1889697	IdentifierDeclType	char		1889680	0					
ANR	1889698	Identifier	mode		1889680	1					
ANR	1889699	IdentifierDecl	colon_mode		1889680	1					
ANR	1889700	IdentifierDeclType	char		1889680	0					
ANR	1889701	Identifier	colon_mode		1889680	1					
ANR	1889702	IdentifierDeclStatement	"int off = 0 , opt = - 1 ;"	51:2:1879:1900	1889680	4	True				
ANR	1889703	IdentifierDecl	off = 0		1889680	0					
ANR	1889704	IdentifierDeclType	int		1889680	0					
ANR	1889705	Identifier	off		1889680	1					
ANR	1889706	AssignmentExpression	off = 0		1889680	2		=			
ANR	1889707	Identifier	off		1889680	0					
ANR	1889708	PrimaryExpression	0		1889680	1					
ANR	1889709	IdentifierDecl	opt = - 1		1889680	1					
ANR	1889710	IdentifierDeclType	int		1889680	0					
ANR	1889711	Identifier	opt		1889680	1					
ANR	1889712	AssignmentExpression	opt = - 1		1889680	2		=			
ANR	1889713	Identifier	opt		1889680	0					
ANR	1889714	UnaryOperationExpression	- 1		1889680	1					
ANR	1889715	UnaryOperator	-		1889680	0					
ANR	1889716	PrimaryExpression	1		1889680	1					
ANR	1889717	IfStatement	"if ( getenv ( ""POSIXLY_CORRECT"" ) )"		1889680	5					
ANR	1889718	Condition	"getenv ( ""POSIXLY_CORRECT"" )"	53:5:1908:1932	1889680	0	True				
ANR	1889719	CallExpression	"getenv ( ""POSIXLY_CORRECT"" )"		1889680	0					
ANR	1889720	Callee	getenv		1889680	0					
ANR	1889721	Identifier	getenv		1889680	0					
ANR	1889722	ArgumentList	"""POSIXLY_CORRECT"""		1889680	1					
ANR	1889723	Argument	"""POSIXLY_CORRECT"""		1889680	0					
ANR	1889724	PrimaryExpression	"""POSIXLY_CORRECT"""		1889680	0					
ANR	1889725	ExpressionStatement	colon_mode = mode = '+'	53:32:1935:1958	1889680	1	True				
ANR	1889726	AssignmentExpression	colon_mode = mode = '+'		1889680	0		=			
ANR	1889727	Identifier	colon_mode		1889680	0					
ANR	1889728	AssignmentExpression	mode = '+'		1889680	1		=			
ANR	1889729	Identifier	mode		1889680	0					
ANR	1889730	PrimaryExpression	'+'		1889680	1					
ANR	1889731	ElseStatement	else		1889680	0					
ANR	1889732	CompoundStatement		8:7:157:157	1889680	0					
ANR	1889733	IfStatement	if ( ( colon_mode = * opts ) == ':' )		1889680	0					
ANR	1889734	Condition	( colon_mode = * opts ) == ':'	55:7:1976:2002	1889680	0	True				
ANR	1889735	EqualityExpression	( colon_mode = * opts ) == ':'		1889680	0		==			
ANR	1889736	AssignmentExpression	colon_mode = * opts		1889680	0		=			
ANR	1889737	Identifier	colon_mode		1889680	0					
ANR	1889738	UnaryOperationExpression	* opts		1889680	1					
ANR	1889739	UnaryOperator	*		1889680	0					
ANR	1889740	Identifier	opts		1889680	1					
ANR	1889741	PrimaryExpression	':'		1889680	1					
ANR	1889742	ExpressionStatement	off ++	55:36:2005:2011	1889680	1	True				
ANR	1889743	PostIncDecOperationExpression	off ++		1889680	0					
ANR	1889744	Identifier	off		1889680	0					
ANR	1889745	IncDec	++		1889680	1					
ANR	1889746	IfStatement	if ( ( ( mode = opts [ off ] ) == '+' ) || ( mode == '-' ) )		1889680	1					
ANR	1889747	Condition	( ( mode = opts [ off ] ) == '+' ) || ( mode == '-' )	56:7:2020:2063	1889680	0	True				
ANR	1889748	OrExpression	( ( mode = opts [ off ] ) == '+' ) || ( mode == '-' )		1889680	0		||			
ANR	1889749	EqualityExpression	( mode = opts [ off ] ) == '+'		1889680	0		==			
ANR	1889750	AssignmentExpression	mode = opts [ off ]		1889680	0		=			
ANR	1889751	Identifier	mode		1889680	0					
ANR	1889752	ArrayIndexing	opts [ off ]		1889680	1					
ANR	1889753	Identifier	opts		1889680	0					
ANR	1889754	Identifier	off		1889680	1					
ANR	1889755	PrimaryExpression	'+'		1889680	1					
ANR	1889756	EqualityExpression	mode == '-'		1889680	1		==			
ANR	1889757	Identifier	mode		1889680	0					
ANR	1889758	PrimaryExpression	'-'		1889680	1					
ANR	1889759	CompoundStatement		10:53:256:256	1889680	1					
ANR	1889760	ExpressionStatement	off ++	57:6:2074:2079	1889680	0	True				
ANR	1889761	PostIncDecOperationExpression	off ++		1889680	0					
ANR	1889762	Identifier	off		1889680	0					
ANR	1889763	IncDec	++		1889680	1					
ANR	1889764	IfStatement	if ( ( colon_mode != ':' ) && ( ( colon_mode = opts [ off ] ) == ':' ) )		1889680	1					
ANR	1889765	Condition	( colon_mode != ':' ) && ( ( colon_mode = opts [ off ] ) == ':' )	58:9:2090:2145	1889680	0	True				
ANR	1889766	AndExpression	( colon_mode != ':' ) && ( ( colon_mode = opts [ off ] ) == ':' )		1889680	0		&&			
ANR	1889767	EqualityExpression	colon_mode != ':'		1889680	0		!=			
ANR	1889768	Identifier	colon_mode		1889680	0					
ANR	1889769	PrimaryExpression	':'		1889680	1					
ANR	1889770	EqualityExpression	( colon_mode = opts [ off ] ) == ':'		1889680	1		==			
ANR	1889771	AssignmentExpression	colon_mode = opts [ off ]		1889680	0		=			
ANR	1889772	Identifier	colon_mode		1889680	0					
ANR	1889773	ArrayIndexing	opts [ off ]		1889680	1					
ANR	1889774	Identifier	opts		1889680	0					
ANR	1889775	Identifier	off		1889680	1					
ANR	1889776	PrimaryExpression	':'		1889680	1					
ANR	1889777	ExpressionStatement	off ++	59:8:2156:2162	1889680	1	True				
ANR	1889778	PostIncDecOperationExpression	off ++		1889680	0					
ANR	1889779	Identifier	off		1889680	0					
ANR	1889780	IncDec	++		1889680	1					
ANR	1889781	ExpressionStatement	my_optarg = 0	62:2:2176:2189	1889680	6	True				
ANR	1889782	AssignmentExpression	my_optarg = 0		1889680	0		=			
ANR	1889783	Identifier	my_optarg		1889680	0					
ANR	1889784	PrimaryExpression	0		1889680	1					
ANR	1889785	IfStatement	if ( charind )		1889680	7					
ANR	1889786	Condition	charind	63:5:2196:2202	1889680	0	True				
ANR	1889787	Identifier	charind		1889680	0					
ANR	1889788	CompoundStatement		17:14:395:395	1889680	1					
ANR	1889789	ExpressionStatement	my_optopt = argv [ my_optind ] [ charind ]	64:4:2211:2247	1889680	0	True				
ANR	1889790	AssignmentExpression	my_optopt = argv [ my_optind ] [ charind ]		1889680	0		=			
ANR	1889791	Identifier	my_optopt		1889680	0					
ANR	1889792	ArrayIndexing	argv [ my_optind ] [ charind ]		1889680	1					
ANR	1889793	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1889794	Identifier	argv		1889680	0					
ANR	1889795	Identifier	my_optind		1889680	1					
ANR	1889796	Identifier	charind		1889680	1					
ANR	1889797	ForStatement	for ( s = opts + off ; * s ; s ++ )		1889680	1					
ANR	1889798	ForInit	s = opts + off ;	65:8:2257:2267	1889680	0	True				
ANR	1889799	AssignmentExpression	s = opts + off		1889680	0		=			
ANR	1889800	Identifier	s		1889680	0					
ANR	1889801	AdditiveExpression	opts + off		1889680	1		+			
ANR	1889802	Identifier	opts		1889680	0					
ANR	1889803	Identifier	off		1889680	1					
ANR	1889804	Condition	* s	65:20:2269:2270	1889680	1	True				
ANR	1889805	UnaryOperationExpression	* s		1889680	0					
ANR	1889806	UnaryOperator	*		1889680	0					
ANR	1889807	Identifier	s		1889680	1					
ANR	1889808	PostIncDecOperationExpression	s ++	65:24:2273:2275	1889680	2	True				
ANR	1889809	Identifier	s		1889680	0					
ANR	1889810	IncDec	++		1889680	1					
ANR	1889811	IfStatement	if ( my_optopt == * s )		1889680	3					
ANR	1889812	Condition	my_optopt == * s	65:32:2281:2295	1889680	0	True				
ANR	1889813	EqualityExpression	my_optopt == * s		1889680	0		==			
ANR	1889814	Identifier	my_optopt		1889680	0					
ANR	1889815	UnaryOperationExpression	* s		1889680	1					
ANR	1889816	UnaryOperator	*		1889680	0					
ANR	1889817	Identifier	s		1889680	1					
ANR	1889818	CompoundStatement		19:49:488:488	1889680	1					
ANR	1889819	ExpressionStatement	charind ++	66:6:2306:2315	1889680	0	True				
ANR	1889820	PostIncDecOperationExpression	charind ++		1889680	0					
ANR	1889821	Identifier	charind		1889680	0					
ANR	1889822	IncDec	++		1889680	1					
ANR	1889823	IfStatement	if ( ( * ( ++ s ) == ':' ) || ( ( my_optopt == 'W' ) && ( * s == ';' ) ) )		1889680	1					
ANR	1889824	Condition	( * ( ++ s ) == ':' ) || ( ( my_optopt == 'W' ) && ( * s == ';' ) )	67:9:2326:2379	1889680	0	True				
ANR	1889825	OrExpression	( * ( ++ s ) == ':' ) || ( ( my_optopt == 'W' ) && ( * s == ';' ) )		1889680	0		||			
ANR	1889826	EqualityExpression	* ( ++ s ) == ':'		1889680	0		==			
ANR	1889827	UnaryOperationExpression	* ( ++ s )		1889680	0					
ANR	1889828	UnaryOperator	*		1889680	0					
ANR	1889829	UnaryExpression	++ s		1889680	1					
ANR	1889830	IncDec	++		1889680	0					
ANR	1889831	Identifier	s		1889680	1					
ANR	1889832	PrimaryExpression	':'		1889680	1					
ANR	1889833	AndExpression	( my_optopt == 'W' ) && ( * s == ';' )		1889680	1		&&			
ANR	1889834	EqualityExpression	my_optopt == 'W'		1889680	0		==			
ANR	1889835	Identifier	my_optopt		1889680	0					
ANR	1889836	PrimaryExpression	'W'		1889680	1					
ANR	1889837	EqualityExpression	* s == ';'		1889680	1		==			
ANR	1889838	UnaryOperationExpression	* s		1889680	0					
ANR	1889839	UnaryOperator	*		1889680	0					
ANR	1889840	Identifier	s		1889680	1					
ANR	1889841	PrimaryExpression	';'		1889680	1					
ANR	1889842	CompoundStatement		21:65:572:572	1889680	1					
ANR	1889843	IfStatement	if ( argv [ my_optind ] [ charind ] )		1889680	0					
ANR	1889844	Condition	argv [ my_optind ] [ charind ]	68:11:2395:2418	1889680	0	True				
ANR	1889845	ArrayIndexing	argv [ my_optind ] [ charind ]		1889680	0					
ANR	1889846	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1889847	Identifier	argv		1889680	0					
ANR	1889848	Identifier	my_optind		1889680	1					
ANR	1889849	Identifier	charind		1889680	1					
ANR	1889850	CompoundStatement		22:37:611:611	1889680	1					
ANR	1889851	ExpressionStatement	my_optarg = & ( argv [ my_optind ++ ] [ charind ] )	69:10:2433:2474	1889680	0	True				
ANR	1889852	AssignmentExpression	my_optarg = & ( argv [ my_optind ++ ] [ charind ] )		1889680	0		=			
ANR	1889853	Identifier	my_optarg		1889680	0					
ANR	1889854	UnaryOperationExpression	& ( argv [ my_optind ++ ] [ charind ] )		1889680	1					
ANR	1889855	UnaryOperator	&		1889680	0					
ANR	1889856	ArrayIndexing	argv [ my_optind ++ ] [ charind ]		1889680	1					
ANR	1889857	ArrayIndexing	argv [ my_optind ++ ]		1889680	0					
ANR	1889858	Identifier	argv		1889680	0					
ANR	1889859	PostIncDecOperationExpression	my_optind ++		1889680	1					
ANR	1889860	Identifier	my_optind		1889680	0					
ANR	1889861	IncDec	++		1889680	1					
ANR	1889862	Identifier	charind		1889680	1					
ANR	1889863	ExpressionStatement	charind = 0	70:10:2486:2497	1889680	1	True				
ANR	1889864	AssignmentExpression	charind = 0		1889680	0		=			
ANR	1889865	Identifier	charind		1889680	0					
ANR	1889866	PrimaryExpression	0		1889680	1					
ANR	1889867	ElseStatement	else		1889680	0					
ANR	1889868	IfStatement	if ( * ( ++ s ) != ':' )		1889680	0					
ANR	1889869	Condition	* ( ++ s ) != ':'	71:18:2517:2529	1889680	0	True				
ANR	1889870	EqualityExpression	* ( ++ s ) != ':'		1889680	0		!=			
ANR	1889871	UnaryOperationExpression	* ( ++ s )		1889680	0					
ANR	1889872	UnaryOperator	*		1889680	0					
ANR	1889873	UnaryExpression	++ s		1889680	1					
ANR	1889874	IncDec	++		1889680	0					
ANR	1889875	Identifier	s		1889680	1					
ANR	1889876	PrimaryExpression	':'		1889680	1					
ANR	1889877	CompoundStatement		25:33:722:722	1889680	1					
ANR	1889878	ExpressionStatement	charind = 0	72:10:2544:2555	1889680	0	True				
ANR	1889879	AssignmentExpression	charind = 0		1889680	0		=			
ANR	1889880	Identifier	charind		1889680	0					
ANR	1889881	PrimaryExpression	0		1889680	1					
ANR	1889882	IfStatement	if ( ++ my_optind >= argc )		1889680	1					
ANR	1889883	Condition	++ my_optind >= argc	73:13:2582:2600	1889680	0	True				
ANR	1889884	RelationalExpression	++ my_optind >= argc		1889680	0		>=			
ANR	1889885	UnaryExpression	++ my_optind		1889680	0					
ANR	1889886	IncDec	++		1889680	0					
ANR	1889887	Identifier	my_optind		1889680	1					
ANR	1889888	Identifier	argc		1889680	1					
ANR	1889889	CompoundStatement		27:34:793:793	1889680	1					
ANR	1889890	IfStatement	if ( my_opterr )		1889680	0					
ANR	1889891	Condition	my_opterr	74:6:2611:2619	1889680	0	True				
ANR	1889892	Identifier	my_opterr		1889680	0					
ANR	1889893	ExpressionStatement	"fprintf ( stderr , ""%s: option requires an argument -- %c\\n"" , argv [ 0 ] , my_optopt )"	74:17:2622:2764	1889680	1	True				
ANR	1889894	CallExpression	"fprintf ( stderr , ""%s: option requires an argument -- %c\\n"" , argv [ 0 ] , my_optopt )"		1889680	0					
ANR	1889895	Callee	fprintf		1889680	0					
ANR	1889896	Identifier	fprintf		1889680	0					
ANR	1889897	ArgumentList	stderr		1889680	1					
ANR	1889898	Argument	stderr		1889680	0					
ANR	1889899	Identifier	stderr		1889680	0					
ANR	1889900	Argument	"""%s: option requires an argument -- %c\\n"""		1889680	1					
ANR	1889901	PrimaryExpression	"""%s: option requires an argument -- %c\\n"""		1889680	0					
ANR	1889902	Argument	argv [ 0 ]		1889680	2					
ANR	1889903	ArrayIndexing	argv [ 0 ]		1889680	0					
ANR	1889904	Identifier	argv		1889680	0					
ANR	1889905	PrimaryExpression	0		1889680	1					
ANR	1889906	Argument	my_optopt		1889680	3					
ANR	1889907	Identifier	my_optopt		1889680	0					
ANR	1889908	ExpressionStatement	opt = ( colon_mode == ':' ) ? ':' : '?'	77:12:2778:2815	1889680	1	True				
ANR	1889909	AssignmentExpression	opt = ( colon_mode == ':' ) ? ':' : '?'		1889680	0		=			
ANR	1889910	Identifier	opt		1889680	0					
ANR	1889911	ConditionalExpression	( colon_mode == ':' ) ? ':' : '?'		1889680	1					
ANR	1889912	Condition	colon_mode == ':'		1889680	0					
ANR	1889913	EqualityExpression	colon_mode == ':'		1889680	0		==			
ANR	1889914	Identifier	colon_mode		1889680	0					
ANR	1889915	PrimaryExpression	':'		1889680	1					
ANR	1889916	PrimaryExpression	':'		1889680	1					
ANR	1889917	PrimaryExpression	'?'		1889680	2					
ANR	1889918	GotoStatement	goto my_getopt_ok ;	78:12:2829:2846	1889680	2	True				
ANR	1889919	Identifier	my_getopt_ok		1889680	0					
ANR	1889920	ExpressionStatement	my_optarg = argv [ my_optind ++ ]	80:10:2870:2899	1889680	2	True				
ANR	1889921	AssignmentExpression	my_optarg = argv [ my_optind ++ ]		1889680	0		=			
ANR	1889922	Identifier	my_optarg		1889680	0					
ANR	1889923	ArrayIndexing	argv [ my_optind ++ ]		1889680	1					
ANR	1889924	Identifier	argv		1889680	0					
ANR	1889925	PostIncDecOperationExpression	my_optind ++		1889680	1					
ANR	1889926	Identifier	my_optind		1889680	0					
ANR	1889927	IncDec	++		1889680	1					
ANR	1889928	ExpressionStatement	opt = my_optopt	83:6:2925:2940	1889680	2	True				
ANR	1889929	AssignmentExpression	opt = my_optopt		1889680	0		=			
ANR	1889930	Identifier	opt		1889680	0					
ANR	1889931	Identifier	my_optopt		1889680	1					
ANR	1889932	GotoStatement	goto my_getopt_ok ;	84:6:2948:2965	1889680	3	True				
ANR	1889933	Identifier	my_getopt_ok		1889680	0					
ANR	1889934	IfStatement	if ( my_opterr )		1889680	2					
ANR	1889935	Condition	my_opterr	86:7:2980:2988	1889680	0	True				
ANR	1889936	Identifier	my_opterr		1889680	0					
ANR	1889937	ExpressionStatement	"fprintf ( stderr , ""%s: illegal option -- %c\\n"" , argv [ 0 ] , my_optopt )"	86:18:2991:3104	1889680	1	True				
ANR	1889938	CallExpression	"fprintf ( stderr , ""%s: illegal option -- %c\\n"" , argv [ 0 ] , my_optopt )"		1889680	0					
ANR	1889939	Callee	fprintf		1889680	0					
ANR	1889940	Identifier	fprintf		1889680	0					
ANR	1889941	ArgumentList	stderr		1889680	1					
ANR	1889942	Argument	stderr		1889680	0					
ANR	1889943	Identifier	stderr		1889680	0					
ANR	1889944	Argument	"""%s: illegal option -- %c\\n"""		1889680	1					
ANR	1889945	PrimaryExpression	"""%s: illegal option -- %c\\n"""		1889680	0					
ANR	1889946	Argument	argv [ 0 ]		1889680	2					
ANR	1889947	ArrayIndexing	argv [ 0 ]		1889680	0					
ANR	1889948	Identifier	argv		1889680	0					
ANR	1889949	PrimaryExpression	0		1889680	1					
ANR	1889950	Argument	my_optopt		1889680	3					
ANR	1889951	Identifier	my_optopt		1889680	0					
ANR	1889952	ExpressionStatement	opt = '?'	89:4:3110:3119	1889680	3	True				
ANR	1889953	AssignmentExpression	opt = '?'		1889680	0		=			
ANR	1889954	Identifier	opt		1889680	0					
ANR	1889955	PrimaryExpression	'?'		1889680	1					
ANR	1889956	IfStatement	if ( argv [ my_optind ] [ ++ charind ] == '\\0' )		1889680	4					
ANR	1889957	Condition	argv [ my_optind ] [ ++ charind ] == '\\0'	90:7:3128:3161	1889680	0	True				
ANR	1889958	EqualityExpression	argv [ my_optind ] [ ++ charind ] == '\\0'		1889680	0		==			
ANR	1889959	ArrayIndexing	argv [ my_optind ] [ ++ charind ]		1889680	0					
ANR	1889960	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1889961	Identifier	argv		1889680	0					
ANR	1889962	Identifier	my_optind		1889680	1					
ANR	1889963	UnaryExpression	++ charind		1889680	1					
ANR	1889964	IncDec	++		1889680	0					
ANR	1889965	Identifier	charind		1889680	1					
ANR	1889966	PrimaryExpression	'\\0'		1889680	1					
ANR	1889967	CompoundStatement		44:43:1354:1354	1889680	1					
ANR	1889968	ExpressionStatement	my_optind ++	91:6:3172:3183	1889680	0	True				
ANR	1889969	PostIncDecOperationExpression	my_optind ++		1889680	0					
ANR	1889970	Identifier	my_optind		1889680	0					
ANR	1889971	IncDec	++		1889680	1					
ANR	1889972	ExpressionStatement	charind = 0	92:6:3191:3202	1889680	1	True				
ANR	1889973	AssignmentExpression	charind = 0		1889680	0		=			
ANR	1889974	Identifier	charind		1889680	0					
ANR	1889975	PrimaryExpression	0		1889680	1					
ANR	1889976	Label	my_getopt_ok :	94:2:3212:3224	1889680	5	True				
ANR	1889977	Identifier	my_getopt_ok		1889680	0					
ANR	1889978	IfStatement	if ( charind && ! argv [ my_optind ] [ charind ] )		1889680	6					
ANR	1889979	Condition	charind && ! argv [ my_optind ] [ charind ]	95:7:3233:3269	1889680	0	True				
ANR	1889980	AndExpression	charind && ! argv [ my_optind ] [ charind ]		1889680	0		&&			
ANR	1889981	Identifier	charind		1889680	0					
ANR	1889982	UnaryOperationExpression	! argv [ my_optind ] [ charind ]		1889680	1					
ANR	1889983	UnaryOperator	!		1889680	0					
ANR	1889984	ArrayIndexing	argv [ my_optind ] [ charind ]		1889680	1					
ANR	1889985	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1889986	Identifier	argv		1889680	0					
ANR	1889987	Identifier	my_optind		1889680	1					
ANR	1889988	Identifier	charind		1889680	1					
ANR	1889989	CompoundStatement		49:46:1462:1462	1889680	1					
ANR	1889990	ExpressionStatement	my_optind ++	96:6:3280:3291	1889680	0	True				
ANR	1889991	PostIncDecOperationExpression	my_optind ++		1889680	0					
ANR	1889992	Identifier	my_optind		1889680	0					
ANR	1889993	IncDec	++		1889680	1					
ANR	1889994	ExpressionStatement	charind = 0	97:6:3299:3310	1889680	1	True				
ANR	1889995	AssignmentExpression	charind = 0		1889680	0		=			
ANR	1889996	Identifier	charind		1889680	0					
ANR	1889997	PrimaryExpression	0		1889680	1					
ANR	1889998	ElseStatement	else		1889680	0					
ANR	1889999	IfStatement	if ( ( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) ) )		1889680	0					
ANR	1890000	Condition	( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) )	99:12:3330:3485	1889680	0	True				
ANR	1890001	OrExpression	( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) )		1889680	0		||			
ANR	1890002	RelationalExpression	my_optind >= argc		1889680	0		>=			
ANR	1890003	Identifier	my_optind		1889680	0					
ANR	1890004	Identifier	argc		1889680	1					
ANR	1890005	AndExpression	( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' )		1889680	1		&&			
ANR	1890006	EqualityExpression	argv [ my_optind ] [ 0 ] == '-'		1889680	0		==			
ANR	1890007	ArrayIndexing	argv [ my_optind ] [ 0 ]		1889680	0					
ANR	1890008	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1890009	Identifier	argv		1889680	0					
ANR	1890010	Identifier	my_optind		1889680	1					
ANR	1890011	PrimaryExpression	0		1889680	1					
ANR	1890012	PrimaryExpression	'-'		1889680	1					
ANR	1890013	AndExpression	( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' )		1889680	1		&&			
ANR	1890014	EqualityExpression	argv [ my_optind ] [ 1 ] == '-'		1889680	0		==			
ANR	1890015	ArrayIndexing	argv [ my_optind ] [ 1 ]		1889680	0					
ANR	1890016	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1890017	Identifier	argv		1889680	0					
ANR	1890018	Identifier	my_optind		1889680	1					
ANR	1890019	PrimaryExpression	1		1889680	1					
ANR	1890020	PrimaryExpression	'-'		1889680	1					
ANR	1890021	EqualityExpression	argv [ my_optind ] [ 2 ] == '\\0'		1889680	1		==			
ANR	1890022	ArrayIndexing	argv [ my_optind ] [ 2 ]		1889680	0					
ANR	1890023	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1890024	Identifier	argv		1889680	0					
ANR	1890025	Identifier	my_optind		1889680	1					
ANR	1890026	PrimaryExpression	2		1889680	1					
ANR	1890027	PrimaryExpression	'\\0'		1889680	1					
ANR	1890028	CompoundStatement		56:45:1678:1678	1889680	1					
ANR	1890029	ExpressionStatement	my_optind ++	103:4:3494:3505	1889680	0	True				
ANR	1890030	PostIncDecOperationExpression	my_optind ++		1889680	0					
ANR	1890031	Identifier	my_optind		1889680	0					
ANR	1890032	IncDec	++		1889680	1					
ANR	1890033	ExpressionStatement	opt = - 1	104:4:3511:3519	1889680	1	True				
ANR	1890034	AssignmentExpression	opt = - 1		1889680	0		=			
ANR	1890035	Identifier	opt		1889680	0					
ANR	1890036	UnaryOperationExpression	- 1		1889680	1					
ANR	1890037	UnaryOperator	-		1889680	0					
ANR	1890038	PrimaryExpression	1		1889680	1					
ANR	1890039	ElseStatement	else		1889680	0					
ANR	1890040	IfStatement	if ( ( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' ) )		1889680	0					
ANR	1890041	Condition	( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' )	105:12:3533:3604	1889680	0	True				
ANR	1890042	OrExpression	( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' )		1889680	0		||			
ANR	1890043	EqualityExpression	argv [ my_optind ] [ 0 ] != '-'		1889680	0		!=			
ANR	1890044	ArrayIndexing	argv [ my_optind ] [ 0 ]		1889680	0					
ANR	1890045	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1890046	Identifier	argv		1889680	0					
ANR	1890047	Identifier	my_optind		1889680	1					
ANR	1890048	PrimaryExpression	0		1889680	1					
ANR	1890049	PrimaryExpression	'-'		1889680	1					
ANR	1890050	EqualityExpression	argv [ my_optind ] [ 1 ] == '\\0'		1889680	1		==			
ANR	1890051	ArrayIndexing	argv [ my_optind ] [ 1 ]		1889680	0					
ANR	1890052	ArrayIndexing	argv [ my_optind ]		1889680	0					
ANR	1890053	Identifier	argv		1889680	0					
ANR	1890054	Identifier	my_optind		1889680	1					
ANR	1890055	PrimaryExpression	1		1889680	1					
ANR	1890056	PrimaryExpression	'\\0'		1889680	1					
ANR	1890057	CompoundStatement		62:4:1818:1829	1889680	1					
ANR	1890058	IdentifierDeclStatement	char * tmp ;	107:4:3613:3622	1889680	0	True				
ANR	1890059	IdentifierDecl	* tmp		1889680	0					
ANR	1890060	IdentifierDeclType	char *		1889680	0					
ANR	1890061	Identifier	tmp		1889680	1					
ANR	1890062	IdentifierDeclStatement	"int i , j , k ;"	108:4:3628:3639	1889680	1	True				
ANR	1890063	IdentifierDecl	i		1889680	0					
ANR	1890064	IdentifierDeclType	int		1889680	0					
ANR	1890065	Identifier	i		1889680	1					
ANR	1890066	IdentifierDecl	j		1889680	1					
ANR	1890067	IdentifierDeclType	int		1889680	0					
ANR	1890068	Identifier	j		1889680	1					
ANR	1890069	IdentifierDecl	k		1889680	2					
ANR	1890070	IdentifierDeclType	int		1889680	0					
ANR	1890071	Identifier	k		1889680	1					
ANR	1890072	IfStatement	if ( mode == '+' )		1889680	2					
ANR	1890073	Condition	mode == '+'	110:7:3649:3659	1889680	0	True				
ANR	1890074	EqualityExpression	mode == '+'		1889680	0		==			
ANR	1890075	Identifier	mode		1889680	0					
ANR	1890076	PrimaryExpression	'+'		1889680	1					
ANR	1890077	ExpressionStatement	opt = - 1	110:20:3662:3670	1889680	1	True				
ANR	1890078	AssignmentExpression	opt = - 1		1889680	0		=			
ANR	1890079	Identifier	opt		1889680	0					
ANR	1890080	UnaryOperationExpression	- 1		1889680	1					
ANR	1890081	UnaryOperator	-		1889680	0					
ANR	1890082	PrimaryExpression	1		1889680	1					
ANR	1890083	ElseStatement	else		1889680	0					
ANR	1890084	IfStatement	if ( mode == '-' )		1889680	0					
ANR	1890085	Condition	mode == '-'	111:12:3684:3694	1889680	0	True				
ANR	1890086	EqualityExpression	mode == '-'		1889680	0		==			
ANR	1890087	Identifier	mode		1889680	0					
ANR	1890088	PrimaryExpression	'-'		1889680	1					
ANR	1890089	CompoundStatement		65:25:1887:1887	1889680	1					
ANR	1890090	ExpressionStatement	my_optarg = argv [ my_optind ++ ]	112:6:3705:3734	1889680	0	True				
ANR	1890091	AssignmentExpression	my_optarg = argv [ my_optind ++ ]		1889680	0		=			
ANR	1890092	Identifier	my_optarg		1889680	0					
ANR	1890093	ArrayIndexing	argv [ my_optind ++ ]		1889680	1					
ANR	1890094	Identifier	argv		1889680	0					
ANR	1890095	PostIncDecOperationExpression	my_optind ++		1889680	1					
ANR	1890096	Identifier	my_optind		1889680	0					
ANR	1890097	IncDec	++		1889680	1					
ANR	1890098	ExpressionStatement	charind = 0	113:6:3742:3753	1889680	1	True				
ANR	1890099	AssignmentExpression	charind = 0		1889680	0		=			
ANR	1890100	Identifier	charind		1889680	0					
ANR	1890101	PrimaryExpression	0		1889680	1					
ANR	1890102	ExpressionStatement	opt = 1	114:6:3761:3768	1889680	2	True				
ANR	1890103	AssignmentExpression	opt = 1		1889680	0		=			
ANR	1890104	Identifier	opt		1889680	0					
ANR	1890105	PrimaryExpression	1		1889680	1					
ANR	1890106	ElseStatement	else		1889680	0					
ANR	1890107	CompoundStatement		69:11:1971:1971	1889680	0					
ANR	1890108	ForStatement	for ( i = j = my_optind ; i < argc ; i ++ )		1889680	0					
ANR	1890109	ForInit	i = j = my_optind ;	116:10:3793:3806	1889680	0	True				
ANR	1890110	AssignmentExpression	i = j = my_optind		1889680	0		=			
ANR	1890111	Identifier	i		1889680	0					
ANR	1890112	AssignmentExpression	j = my_optind		1889680	1		=			
ANR	1890113	Identifier	j		1889680	0					
ANR	1890114	Identifier	my_optind		1889680	1					
ANR	1890115	Condition	i < argc	116:25:3808:3813	1889680	1	True				
ANR	1890116	RelationalExpression	i < argc		1889680	0		<			
ANR	1890117	Identifier	i		1889680	0					
ANR	1890118	Identifier	argc		1889680	1					
ANR	1890119	PostIncDecOperationExpression	i ++	116:33:3816:3818	1889680	2	True				
ANR	1890120	Identifier	i		1889680	0					
ANR	1890121	IncDec	++		1889680	1					
ANR	1890122	IfStatement	if ( ( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' ) )		1889680	3					
ANR	1890123	Condition	( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' )	116:41:3824:3906	1889680	0	True				
ANR	1890124	AndExpression	( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' )		1889680	0		&&			
ANR	1890125	EqualityExpression	argv [ i ] [ 0 ] == '-'		1889680	0		==			
ANR	1890126	ArrayIndexing	argv [ i ] [ 0 ]		1889680	0					
ANR	1890127	ArrayIndexing	argv [ i ]		1889680	0					
ANR	1890128	Identifier	argv		1889680	0					
ANR	1890129	Identifier	i		1889680	1					
ANR	1890130	PrimaryExpression	0		1889680	1					
ANR	1890131	PrimaryExpression	'-'		1889680	1					
ANR	1890132	EqualityExpression	argv [ i ] [ 1 ] != '\\0'		1889680	1		!=			
ANR	1890133	ArrayIndexing	argv [ i ] [ 1 ]		1889680	0					
ANR	1890134	ArrayIndexing	argv [ i ]		1889680	0					
ANR	1890135	Identifier	argv		1889680	0					
ANR	1890136	Identifier	i		1889680	1					
ANR	1890137	PrimaryExpression	1		1889680	1					
ANR	1890138	PrimaryExpression	'\\0'		1889680	1					
ANR	1890139	CompoundStatement		71:62:2099:2099	1889680	1					
ANR	1890140	ExpressionStatement	my_optind = i	118:8:3919:3930	1889680	0	True				
ANR	1890141	AssignmentExpression	my_optind = i		1889680	0		=			
ANR	1890142	Identifier	my_optind		1889680	0					
ANR	1890143	Identifier	i		1889680	1					
ANR	1890144	ExpressionStatement	"opt = my_getopt ( argc , argv , opts )"	119:8:3940:3971	1889680	1	True				
ANR	1890145	AssignmentExpression	"opt = my_getopt ( argc , argv , opts )"		1889680	0		=			
ANR	1890146	Identifier	opt		1889680	0					
ANR	1890147	CallExpression	"my_getopt ( argc , argv , opts )"		1889680	1					
ANR	1890148	Callee	my_getopt		1889680	0					
ANR	1890149	Identifier	my_getopt		1889680	0					
ANR	1890150	ArgumentList	argc		1889680	1					
ANR	1890151	Argument	argc		1889680	0					
ANR	1890152	Identifier	argc		1889680	0					
ANR	1890153	Argument	argv		1889680	1					
ANR	1890154	Identifier	argv		1889680	0					
ANR	1890155	Argument	opts		1889680	2					
ANR	1890156	Identifier	opts		1889680	0					
ANR	1890157	WhileStatement	while ( i > j )		1889680	2					
ANR	1890158	Condition	i > j	120:14:3987:3991	1889680	0	True				
ANR	1890159	RelationalExpression	i > j		1889680	0		>			
ANR	1890160	Identifier	i		1889680	0					
ANR	1890161	Identifier	j		1889680	1					
ANR	1890162	CompoundStatement		74:21:2184:2184	1889680	1					
ANR	1890163	ExpressionStatement	tmp = argv [ -- i ]	121:10:4006:4019	1889680	0	True				
ANR	1890164	AssignmentExpression	tmp = argv [ -- i ]		1889680	0		=			
ANR	1890165	Identifier	tmp		1889680	0					
ANR	1890166	ArrayIndexing	argv [ -- i ]		1889680	1					
ANR	1890167	Identifier	argv		1889680	0					
ANR	1890168	UnaryExpression	-- i		1889680	1					
ANR	1890169	IncDec	--		1889680	0					
ANR	1890170	Identifier	i		1889680	1					
ANR	1890171	ForStatement	for ( k = i ; k + 1 < my_optind ; k ++ )		1889680	1					
ANR	1890172	ForInit	k = i ;	122:14:4035:4038	1889680	0	True				
ANR	1890173	AssignmentExpression	k = i		1889680	0		=			
ANR	1890174	Identifier	k		1889680	0					
ANR	1890175	Identifier	i		1889680	1					
ANR	1890176	Condition	k + 1 < my_optind	122:19:4040:4052	1889680	1	True				
ANR	1890177	RelationalExpression	k + 1 < my_optind		1889680	0		<			
ANR	1890178	AdditiveExpression	k + 1		1889680	0		+			
ANR	1890179	Identifier	k		1889680	0					
ANR	1890180	PrimaryExpression	1		1889680	1					
ANR	1890181	Identifier	my_optind		1889680	1					
ANR	1890182	PostIncDecOperationExpression	k ++	122:34:4055:4057	1889680	2	True				
ANR	1890183	Identifier	k		1889680	0					
ANR	1890184	IncDec	++		1889680	1					
ANR	1890185	ExpressionStatement	argv [ k ] = argv [ k + 1 ]	122:39:4060:4077	1889680	3	True				
ANR	1890186	AssignmentExpression	argv [ k ] = argv [ k + 1 ]		1889680	0		=			
ANR	1890187	ArrayIndexing	argv [ k ]		1889680	0					
ANR	1890188	Identifier	argv		1889680	0					
ANR	1890189	Identifier	k		1889680	1					
ANR	1890190	ArrayIndexing	argv [ k + 1 ]		1889680	1					
ANR	1890191	Identifier	argv		1889680	0					
ANR	1890192	AdditiveExpression	k + 1		1889680	1		+			
ANR	1890193	Identifier	k		1889680	0					
ANR	1890194	PrimaryExpression	1		1889680	1					
ANR	1890195	ExpressionStatement	argv [ -- my_optind ] = tmp	123:10:4089:4110	1889680	2	True				
ANR	1890196	AssignmentExpression	argv [ -- my_optind ] = tmp		1889680	0		=			
ANR	1890197	ArrayIndexing	argv [ -- my_optind ]		1889680	0					
ANR	1890198	Identifier	argv		1889680	0					
ANR	1890199	UnaryExpression	-- my_optind		1889680	1					
ANR	1890200	IncDec	--		1889680	0					
ANR	1890201	Identifier	my_optind		1889680	1					
ANR	1890202	Identifier	tmp		1889680	1					
ANR	1890203	BreakStatement	break ;	125:8:4130:4135	1889680	3	True				
ANR	1890204	IfStatement	if ( i == argc )		1889680	1					
ANR	1890205	Condition	i == argc	127:9:4154:4162	1889680	0	True				
ANR	1890206	EqualityExpression	i == argc		1889680	0		==			
ANR	1890207	Identifier	i		1889680	0					
ANR	1890208	Identifier	argc		1889680	1					
ANR	1890209	ExpressionStatement	opt = - 1	127:20:4165:4173	1889680	1	True				
ANR	1890210	AssignmentExpression	opt = - 1		1889680	0		=			
ANR	1890211	Identifier	opt		1889680	0					
ANR	1890212	UnaryOperationExpression	- 1		1889680	1					
ANR	1890213	UnaryOperator	-		1889680	0					
ANR	1890214	PrimaryExpression	1		1889680	1					
ANR	1890215	ElseStatement	else		1889680	0					
ANR	1890216	CompoundStatement		83:9:2380:2380	1889680	0					
ANR	1890217	ExpressionStatement	charind ++	130:4:4196:4205	1889680	0	True				
ANR	1890218	PostIncDecOperationExpression	charind ++		1889680	0					
ANR	1890219	Identifier	charind		1889680	0					
ANR	1890220	IncDec	++		1889680	1					
ANR	1890221	ExpressionStatement	"opt = my_getopt ( argc , argv , opts )"	131:4:4211:4244	1889680	1	True				
ANR	1890222	AssignmentExpression	"opt = my_getopt ( argc , argv , opts )"		1889680	0		=			
ANR	1890223	Identifier	opt		1889680	0					
ANR	1890224	CallExpression	"my_getopt ( argc , argv , opts )"		1889680	1					
ANR	1890225	Callee	my_getopt		1889680	0					
ANR	1890226	Identifier	my_getopt		1889680	0					
ANR	1890227	ArgumentList	argc		1889680	1					
ANR	1890228	Argument	argc		1889680	0					
ANR	1890229	Identifier	argc		1889680	0					
ANR	1890230	Argument	argv		1889680	1					
ANR	1890231	Identifier	argv		1889680	0					
ANR	1890232	Argument	opts		1889680	2					
ANR	1890233	Identifier	opts		1889680	0					
ANR	1890234	IfStatement	if ( my_optind > argc )		1889680	8					
ANR	1890235	Condition	my_optind > argc	133:6:4256:4271	1889680	0	True				
ANR	1890236	RelationalExpression	my_optind > argc		1889680	0		>			
ANR	1890237	Identifier	my_optind		1889680	0					
ANR	1890238	Identifier	argc		1889680	1					
ANR	1890239	ExpressionStatement	my_optind = argc	133:24:4274:4290	1889680	1	True				
ANR	1890240	AssignmentExpression	my_optind = argc		1889680	0		=			
ANR	1890241	Identifier	my_optind		1889680	0					
ANR	1890242	Identifier	argc		1889680	1					
ANR	1890243	ReturnStatement	return opt ;	134:2:4294:4304	1889680	9	True				
ANR	1890244	Identifier	opt		1889680	0					
ANR	1890245	ReturnType	int		1889680	1					
ANR	1890246	Identifier	my_getopt		1889680	2					
ANR	1890247	ParameterList	"int argc , char * argv [ ] , const char * opts"		1889680	3					
ANR	1890248	Parameter	int argc	46:14:1766:1773	1889680	0	True				
ANR	1890249	ParameterType	int		1889680	0					
ANR	1890250	Identifier	argc		1889680	1					
ANR	1890251	Parameter	char * argv [ ]	46:24:1776:1788	1889680	1	True				
ANR	1890252	ParameterType	char * [ ]		1889680	0					
ANR	1890253	Identifier	argv		1889680	1					
ANR	1890254	Parameter	const char * opts	46:39:1791:1806	1889680	2	True				
ANR	1890255	ParameterType	const char *		1889680	0					
ANR	1890256	Identifier	opts		1889680	1					
ANR	1890257	CFGEntryNode	ENTRY		1889680		True				
ANR	1890258	CFGExitNode	EXIT		1889680		True				
ANR	1890259	Symbol	charind		1889680						
ANR	1890260	Symbol	* argv		1889680						
ANR	1890261	Symbol	colon_mode		1889680						
ANR	1890262	Symbol	argv		1889680						
ANR	1890263	Symbol	my_opterr		1889680						
ANR	1890264	Symbol	mode		1889680						
ANR	1890265	Symbol	opts		1889680						
ANR	1890266	Symbol	tmp		1889680						
ANR	1890267	Symbol	* off		1889680						
ANR	1890268	Symbol	* * argv		1889680						
ANR	1890269	Symbol	my_getopt		1889680						
ANR	1890270	Symbol	getenv		1889680						
ANR	1890271	Symbol	my_optopt		1889680						
ANR	1890272	Symbol	argc		1889680						
ANR	1890273	Symbol	* * my_optind		1889680						
ANR	1890274	Symbol	* * i		1889680						
ANR	1890275	Symbol	i		1889680						
ANR	1890276	Symbol	j		1889680						
ANR	1890277	Symbol	k		1889680						
ANR	1890278	Symbol	stderr		1889680						
ANR	1890279	Symbol	off		1889680						
ANR	1890280	Symbol	opt		1889680						
ANR	1890281	Symbol	s		1889680						
ANR	1890282	Symbol	* i		1889680						
ANR	1890283	Symbol	* opts		1889680						
ANR	1890284	Symbol	my_optind		1889680						
ANR	1890285	Symbol	* ( ++ s )		1889680						
ANR	1890286	Symbol	* k		1889680						
ANR	1890287	Symbol	* my_optind		1889680						
ANR	1890288	Symbol	my_optarg		1889680						
ANR	1890289	Symbol	* s		1889680						
ANR	1890290	Symbol	* charind		1889680						
ANR	1890291	Function	_my_getopt_internal	142:0:4480:8632							
ANR	1890292	FunctionDef	"_my_getopt_internal (int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind , int long_only)"		1890291	0					
ANR	1890293	CompoundStatement		145:0:4654:8632	1890291	0					
ANR	1890294	IdentifierDeclStatement	"char mode , colon_mode = * shortopts ;"	146:2:4658:4692	1890291	0	True				
ANR	1890295	IdentifierDecl	mode		1890291	0					
ANR	1890296	IdentifierDeclType	char		1890291	0					
ANR	1890297	Identifier	mode		1890291	1					
ANR	1890298	IdentifierDecl	colon_mode = * shortopts		1890291	1					
ANR	1890299	IdentifierDeclType	char		1890291	0					
ANR	1890300	Identifier	colon_mode		1890291	1					
ANR	1890301	AssignmentExpression	colon_mode = * shortopts		1890291	2		=			
ANR	1890302	Identifier	colon_mode		1890291	0					
ANR	1890303	UnaryOperationExpression	* shortopts		1890291	1					
ANR	1890304	UnaryOperator	*		1890291	0					
ANR	1890305	Identifier	shortopts		1890291	1					
ANR	1890306	IdentifierDeclStatement	"int shortoff = 0 , opt = - 1 ;"	147:2:4696:4722	1890291	1	True				
ANR	1890307	IdentifierDecl	shortoff = 0		1890291	0					
ANR	1890308	IdentifierDeclType	int		1890291	0					
ANR	1890309	Identifier	shortoff		1890291	1					
ANR	1890310	AssignmentExpression	shortoff = 0		1890291	2		=			
ANR	1890311	Identifier	shortoff		1890291	0					
ANR	1890312	PrimaryExpression	0		1890291	1					
ANR	1890313	IdentifierDecl	opt = - 1		1890291	1					
ANR	1890314	IdentifierDeclType	int		1890291	0					
ANR	1890315	Identifier	opt		1890291	1					
ANR	1890316	AssignmentExpression	opt = - 1		1890291	2		=			
ANR	1890317	Identifier	opt		1890291	0					
ANR	1890318	UnaryOperationExpression	- 1		1890291	1					
ANR	1890319	UnaryOperator	-		1890291	0					
ANR	1890320	PrimaryExpression	1		1890291	1					
ANR	1890321	IfStatement	"if ( getenv ( ""POSIXLY_CORRECT"" ) )"		1890291	2					
ANR	1890322	Condition	"getenv ( ""POSIXLY_CORRECT"" )"	149:5:4730:4754	1890291	0	True				
ANR	1890323	CallExpression	"getenv ( ""POSIXLY_CORRECT"" )"		1890291	0					
ANR	1890324	Callee	getenv		1890291	0					
ANR	1890325	Identifier	getenv		1890291	0					
ANR	1890326	ArgumentList	"""POSIXLY_CORRECT"""		1890291	1					
ANR	1890327	Argument	"""POSIXLY_CORRECT"""		1890291	0					
ANR	1890328	PrimaryExpression	"""POSIXLY_CORRECT"""		1890291	0					
ANR	1890329	ExpressionStatement	colon_mode = mode = '+'	149:32:4757:4780	1890291	1	True				
ANR	1890330	AssignmentExpression	colon_mode = mode = '+'		1890291	0		=			
ANR	1890331	Identifier	colon_mode		1890291	0					
ANR	1890332	AssignmentExpression	mode = '+'		1890291	1		=			
ANR	1890333	Identifier	mode		1890291	0					
ANR	1890334	PrimaryExpression	'+'		1890291	1					
ANR	1890335	ElseStatement	else		1890291	0					
ANR	1890336	CompoundStatement		6:7:134:134	1890291	0					
ANR	1890337	IfStatement	if ( ( colon_mode = * shortopts ) == ':' )		1890291	0					
ANR	1890338	Condition	( colon_mode = * shortopts ) == ':'	151:7:4798:4829	1890291	0	True				
ANR	1890339	EqualityExpression	( colon_mode = * shortopts ) == ':'		1890291	0		==			
ANR	1890340	AssignmentExpression	colon_mode = * shortopts		1890291	0		=			
ANR	1890341	Identifier	colon_mode		1890291	0					
ANR	1890342	UnaryOperationExpression	* shortopts		1890291	1					
ANR	1890343	UnaryOperator	*		1890291	0					
ANR	1890344	Identifier	shortopts		1890291	1					
ANR	1890345	PrimaryExpression	':'		1890291	1					
ANR	1890346	ExpressionStatement	shortoff ++	151:41:4832:4843	1890291	1	True				
ANR	1890347	PostIncDecOperationExpression	shortoff ++		1890291	0					
ANR	1890348	Identifier	shortoff		1890291	0					
ANR	1890349	IncDec	++		1890291	1					
ANR	1890350	IfStatement	if ( ( ( mode = shortopts [ shortoff ] ) == '+' ) || ( mode == '-' ) )		1890291	1					
ANR	1890351	Condition	( ( mode = shortopts [ shortoff ] ) == '+' ) || ( mode == '-' )	152:7:4852:4905	1890291	0	True				
ANR	1890352	OrExpression	( ( mode = shortopts [ shortoff ] ) == '+' ) || ( mode == '-' )		1890291	0		||			
ANR	1890353	EqualityExpression	( mode = shortopts [ shortoff ] ) == '+'		1890291	0		==			
ANR	1890354	AssignmentExpression	mode = shortopts [ shortoff ]		1890291	0		=			
ANR	1890355	Identifier	mode		1890291	0					
ANR	1890356	ArrayIndexing	shortopts [ shortoff ]		1890291	1					
ANR	1890357	Identifier	shortopts		1890291	0					
ANR	1890358	Identifier	shortoff		1890291	1					
ANR	1890359	PrimaryExpression	'+'		1890291	1					
ANR	1890360	EqualityExpression	mode == '-'		1890291	1		==			
ANR	1890361	Identifier	mode		1890291	0					
ANR	1890362	PrimaryExpression	'-'		1890291	1					
ANR	1890363	CompoundStatement		8:63:253:253	1890291	1					
ANR	1890364	ExpressionStatement	shortoff ++	153:6:4916:4926	1890291	0	True				
ANR	1890365	PostIncDecOperationExpression	shortoff ++		1890291	0					
ANR	1890366	Identifier	shortoff		1890291	0					
ANR	1890367	IncDec	++		1890291	1					
ANR	1890368	IfStatement	if ( ( colon_mode != ':' ) && ( ( colon_mode = shortopts [ shortoff ] ) == ':' ) )		1890291	1					
ANR	1890369	Condition	( colon_mode != ':' ) && ( ( colon_mode = shortopts [ shortoff ] ) == ':' )	154:9:4937:5002	1890291	0	True				
ANR	1890370	AndExpression	( colon_mode != ':' ) && ( ( colon_mode = shortopts [ shortoff ] ) == ':' )		1890291	0		&&			
ANR	1890371	EqualityExpression	colon_mode != ':'		1890291	0		!=			
ANR	1890372	Identifier	colon_mode		1890291	0					
ANR	1890373	PrimaryExpression	':'		1890291	1					
ANR	1890374	EqualityExpression	( colon_mode = shortopts [ shortoff ] ) == ':'		1890291	1		==			
ANR	1890375	AssignmentExpression	colon_mode = shortopts [ shortoff ]		1890291	0		=			
ANR	1890376	Identifier	colon_mode		1890291	0					
ANR	1890377	ArrayIndexing	shortopts [ shortoff ]		1890291	1					
ANR	1890378	Identifier	shortopts		1890291	0					
ANR	1890379	Identifier	shortoff		1890291	1					
ANR	1890380	PrimaryExpression	':'		1890291	1					
ANR	1890381	ExpressionStatement	shortoff ++	155:8:5013:5024	1890291	1	True				
ANR	1890382	PostIncDecOperationExpression	shortoff ++		1890291	0					
ANR	1890383	Identifier	shortoff		1890291	0					
ANR	1890384	IncDec	++		1890291	1					
ANR	1890385	ExpressionStatement	my_optarg = 0	158:2:5038:5051	1890291	3	True				
ANR	1890386	AssignmentExpression	my_optarg = 0		1890291	0		=			
ANR	1890387	Identifier	my_optarg		1890291	0					
ANR	1890388	PrimaryExpression	0		1890291	1					
ANR	1890389	IfStatement	if ( ( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) ) )		1890291	4					
ANR	1890390	Condition	( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) )	159:5:5058:5192	1890291	0	True				
ANR	1890391	OrExpression	( my_optind >= argc ) || ( ( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' ) )		1890291	0		||			
ANR	1890392	RelationalExpression	my_optind >= argc		1890291	0		>=			
ANR	1890393	Identifier	my_optind		1890291	0					
ANR	1890394	Identifier	argc		1890291	1					
ANR	1890395	AndExpression	( argv [ my_optind ] [ 0 ] == '-' ) && ( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' )		1890291	1		&&			
ANR	1890396	EqualityExpression	argv [ my_optind ] [ 0 ] == '-'		1890291	0		==			
ANR	1890397	ArrayIndexing	argv [ my_optind ] [ 0 ]		1890291	0					
ANR	1890398	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890399	Identifier	argv		1890291	0					
ANR	1890400	Identifier	my_optind		1890291	1					
ANR	1890401	PrimaryExpression	0		1890291	1					
ANR	1890402	PrimaryExpression	'-'		1890291	1					
ANR	1890403	AndExpression	( argv [ my_optind ] [ 1 ] == '-' ) && ( argv [ my_optind ] [ 2 ] == '\\0' )		1890291	1		&&			
ANR	1890404	EqualityExpression	argv [ my_optind ] [ 1 ] == '-'		1890291	0		==			
ANR	1890405	ArrayIndexing	argv [ my_optind ] [ 1 ]		1890291	0					
ANR	1890406	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890407	Identifier	argv		1890291	0					
ANR	1890408	Identifier	my_optind		1890291	1					
ANR	1890409	PrimaryExpression	1		1890291	1					
ANR	1890410	PrimaryExpression	'-'		1890291	1					
ANR	1890411	EqualityExpression	argv [ my_optind ] [ 2 ] == '\\0'		1890291	1		==			
ANR	1890412	ArrayIndexing	argv [ my_optind ] [ 2 ]		1890291	0					
ANR	1890413	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890414	Identifier	argv		1890291	0					
ANR	1890415	Identifier	my_optind		1890291	1					
ANR	1890416	PrimaryExpression	2		1890291	1					
ANR	1890417	PrimaryExpression	'\\0'		1890291	1					
ANR	1890418	CompoundStatement		18:38:540:540	1890291	1					
ANR	1890419	ExpressionStatement	my_optind ++	163:4:5201:5212	1890291	0	True				
ANR	1890420	PostIncDecOperationExpression	my_optind ++		1890291	0					
ANR	1890421	Identifier	my_optind		1890291	0					
ANR	1890422	IncDec	++		1890291	1					
ANR	1890423	ExpressionStatement	opt = - 1	164:4:5218:5226	1890291	1	True				
ANR	1890424	AssignmentExpression	opt = - 1		1890291	0		=			
ANR	1890425	Identifier	opt		1890291	0					
ANR	1890426	UnaryOperationExpression	- 1		1890291	1					
ANR	1890427	UnaryOperator	-		1890291	0					
ANR	1890428	PrimaryExpression	1		1890291	1					
ANR	1890429	ElseStatement	else		1890291	0					
ANR	1890430	IfStatement	if ( ( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' ) )		1890291	0					
ANR	1890431	Condition	( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' )	165:12:5240:5310	1890291	0	True				
ANR	1890432	OrExpression	( argv [ my_optind ] [ 0 ] != '-' ) || ( argv [ my_optind ] [ 1 ] == '\\0' )		1890291	0		||			
ANR	1890433	EqualityExpression	argv [ my_optind ] [ 0 ] != '-'		1890291	0		!=			
ANR	1890434	ArrayIndexing	argv [ my_optind ] [ 0 ]		1890291	0					
ANR	1890435	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890436	Identifier	argv		1890291	0					
ANR	1890437	Identifier	my_optind		1890291	1					
ANR	1890438	PrimaryExpression	0		1890291	1					
ANR	1890439	PrimaryExpression	'-'		1890291	1					
ANR	1890440	EqualityExpression	argv [ my_optind ] [ 1 ] == '\\0'		1890291	1		==			
ANR	1890441	ArrayIndexing	argv [ my_optind ] [ 1 ]		1890291	0					
ANR	1890442	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890443	Identifier	argv		1890291	0					
ANR	1890444	Identifier	my_optind		1890291	1					
ANR	1890445	PrimaryExpression	1		1890291	1					
ANR	1890446	PrimaryExpression	'\\0'		1890291	1					
ANR	1890447	CompoundStatement		24:4:679:690	1890291	1					
ANR	1890448	IdentifierDeclStatement	char * tmp ;	167:4:5319:5328	1890291	0	True				
ANR	1890449	IdentifierDecl	* tmp		1890291	0					
ANR	1890450	IdentifierDeclType	char *		1890291	0					
ANR	1890451	Identifier	tmp		1890291	1					
ANR	1890452	IdentifierDeclStatement	"int i , j , k ;"	168:4:5334:5345	1890291	1	True				
ANR	1890453	IdentifierDecl	i		1890291	0					
ANR	1890454	IdentifierDeclType	int		1890291	0					
ANR	1890455	Identifier	i		1890291	1					
ANR	1890456	IdentifierDecl	j		1890291	1					
ANR	1890457	IdentifierDeclType	int		1890291	0					
ANR	1890458	Identifier	j		1890291	1					
ANR	1890459	IdentifierDecl	k		1890291	2					
ANR	1890460	IdentifierDeclType	int		1890291	0					
ANR	1890461	Identifier	k		1890291	1					
ANR	1890462	ExpressionStatement	opt = - 1	170:4:5352:5360	1890291	2	True				
ANR	1890463	AssignmentExpression	opt = - 1		1890291	0		=			
ANR	1890464	Identifier	opt		1890291	0					
ANR	1890465	UnaryOperationExpression	- 1		1890291	1					
ANR	1890466	UnaryOperator	-		1890291	0					
ANR	1890467	PrimaryExpression	1		1890291	1					
ANR	1890468	IfStatement	if ( mode == '+' )		1890291	3					
ANR	1890469	Condition	mode == '+'	171:7:5369:5379	1890291	0	True				
ANR	1890470	EqualityExpression	mode == '+'		1890291	0		==			
ANR	1890471	Identifier	mode		1890291	0					
ANR	1890472	PrimaryExpression	'+'		1890291	1					
ANR	1890473	ReturnStatement	return - 1 ;	171:20:5382:5391	1890291	1	True				
ANR	1890474	UnaryOperationExpression	- 1		1890291	0					
ANR	1890475	UnaryOperator	-		1890291	0					
ANR	1890476	PrimaryExpression	1		1890291	1					
ANR	1890477	ElseStatement	else		1890291	0					
ANR	1890478	IfStatement	if ( mode == '-' )		1890291	0					
ANR	1890479	Condition	mode == '-'	172:12:5405:5415	1890291	0	True				
ANR	1890480	EqualityExpression	mode == '-'		1890291	0		==			
ANR	1890481	Identifier	mode		1890291	0					
ANR	1890482	PrimaryExpression	'-'		1890291	1					
ANR	1890483	CompoundStatement		28:25:763:763	1890291	1					
ANR	1890484	ExpressionStatement	my_optarg = argv [ my_optind ++ ]	173:6:5426:5455	1890291	0	True				
ANR	1890485	AssignmentExpression	my_optarg = argv [ my_optind ++ ]		1890291	0		=			
ANR	1890486	Identifier	my_optarg		1890291	0					
ANR	1890487	ArrayIndexing	argv [ my_optind ++ ]		1890291	1					
ANR	1890488	Identifier	argv		1890291	0					
ANR	1890489	PostIncDecOperationExpression	my_optind ++		1890291	1					
ANR	1890490	Identifier	my_optind		1890291	0					
ANR	1890491	IncDec	++		1890291	1					
ANR	1890492	ReturnStatement	return 1 ;	174:6:5463:5471	1890291	1	True				
ANR	1890493	PrimaryExpression	1		1890291	0					
ANR	1890494	ForStatement	for ( i = j = my_optind ; i < argc ; i ++ )		1890291	4					
ANR	1890495	ForInit	i = j = my_optind ;	176:8:5487:5500	1890291	0	True				
ANR	1890496	AssignmentExpression	i = j = my_optind		1890291	0		=			
ANR	1890497	Identifier	i		1890291	0					
ANR	1890498	AssignmentExpression	j = my_optind		1890291	1		=			
ANR	1890499	Identifier	j		1890291	0					
ANR	1890500	Identifier	my_optind		1890291	1					
ANR	1890501	Condition	i < argc	176:23:5502:5507	1890291	1	True				
ANR	1890502	RelationalExpression	i < argc		1890291	0		<			
ANR	1890503	Identifier	i		1890291	0					
ANR	1890504	Identifier	argc		1890291	1					
ANR	1890505	PostIncDecOperationExpression	i ++	176:31:5510:5512	1890291	2	True				
ANR	1890506	Identifier	i		1890291	0					
ANR	1890507	IncDec	++		1890291	1					
ANR	1890508	IfStatement	if ( ( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' ) )		1890291	3					
ANR	1890509	Condition	( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' )	176:39:5518:5596	1890291	0	True				
ANR	1890510	AndExpression	( argv [ i ] [ 0 ] == '-' ) && ( argv [ i ] [ 1 ] != '\\0' )		1890291	0		&&			
ANR	1890511	EqualityExpression	argv [ i ] [ 0 ] == '-'		1890291	0		==			
ANR	1890512	ArrayIndexing	argv [ i ] [ 0 ]		1890291	0					
ANR	1890513	ArrayIndexing	argv [ i ]		1890291	0					
ANR	1890514	Identifier	argv		1890291	0					
ANR	1890515	Identifier	i		1890291	1					
ANR	1890516	PrimaryExpression	0		1890291	1					
ANR	1890517	PrimaryExpression	'-'		1890291	1					
ANR	1890518	EqualityExpression	argv [ i ] [ 1 ] != '\\0'		1890291	1		!=			
ANR	1890519	ArrayIndexing	argv [ i ] [ 1 ]		1890291	0					
ANR	1890520	ArrayIndexing	argv [ i ]		1890291	0					
ANR	1890521	Identifier	argv		1890291	0					
ANR	1890522	Identifier	i		1890291	1					
ANR	1890523	PrimaryExpression	1		1890291	1					
ANR	1890524	PrimaryExpression	'\\0'		1890291	1					
ANR	1890525	CompoundStatement		33:58:944:944	1890291	1					
ANR	1890526	ExpressionStatement	my_optind = i	178:6:5607:5618	1890291	0	True				
ANR	1890527	AssignmentExpression	my_optind = i		1890291	0		=			
ANR	1890528	Identifier	my_optind		1890291	0					
ANR	1890529	Identifier	i		1890291	1					
ANR	1890530	ExpressionStatement	"opt = _my_getopt_internal ( argc , argv , shortopts , longopts , longind , long_only )"	179:6:5626:5762	1890291	1	True				
ANR	1890531	AssignmentExpression	"opt = _my_getopt_internal ( argc , argv , shortopts , longopts , longind , long_only )"		1890291	0		=			
ANR	1890532	Identifier	opt		1890291	0					
ANR	1890533	CallExpression	"_my_getopt_internal ( argc , argv , shortopts , longopts , longind , long_only )"		1890291	1					
ANR	1890534	Callee	_my_getopt_internal		1890291	0					
ANR	1890535	Identifier	_my_getopt_internal		1890291	0					
ANR	1890536	ArgumentList	argc		1890291	1					
ANR	1890537	Argument	argc		1890291	0					
ANR	1890538	Identifier	argc		1890291	0					
ANR	1890539	Argument	argv		1890291	1					
ANR	1890540	Identifier	argv		1890291	0					
ANR	1890541	Argument	shortopts		1890291	2					
ANR	1890542	Identifier	shortopts		1890291	0					
ANR	1890543	Argument	longopts		1890291	3					
ANR	1890544	Identifier	longopts		1890291	0					
ANR	1890545	Argument	longind		1890291	4					
ANR	1890546	Identifier	longind		1890291	0					
ANR	1890547	Argument	long_only		1890291	5					
ANR	1890548	Identifier	long_only		1890291	0					
ANR	1890549	WhileStatement	while ( i > j )		1890291	2					
ANR	1890550	Condition	i > j	182:12:5776:5780	1890291	0	True				
ANR	1890551	RelationalExpression	i > j		1890291	0		>			
ANR	1890552	Identifier	i		1890291	0					
ANR	1890553	Identifier	j		1890291	1					
ANR	1890554	CompoundStatement		38:19:1128:1128	1890291	1					
ANR	1890555	ExpressionStatement	tmp = argv [ -- i ]	183:8:5793:5806	1890291	0	True				
ANR	1890556	AssignmentExpression	tmp = argv [ -- i ]		1890291	0		=			
ANR	1890557	Identifier	tmp		1890291	0					
ANR	1890558	ArrayIndexing	argv [ -- i ]		1890291	1					
ANR	1890559	Identifier	argv		1890291	0					
ANR	1890560	UnaryExpression	-- i		1890291	1					
ANR	1890561	IncDec	--		1890291	0					
ANR	1890562	Identifier	i		1890291	1					
ANR	1890563	ForStatement	for ( k = i ; k + 1 < my_optind ; k ++ )		1890291	1					
ANR	1890564	ForInit	k = i ;	184:12:5820:5823	1890291	0	True				
ANR	1890565	AssignmentExpression	k = i		1890291	0		=			
ANR	1890566	Identifier	k		1890291	0					
ANR	1890567	Identifier	i		1890291	1					
ANR	1890568	Condition	k + 1 < my_optind	184:17:5825:5837	1890291	1	True				
ANR	1890569	RelationalExpression	k + 1 < my_optind		1890291	0		<			
ANR	1890570	AdditiveExpression	k + 1		1890291	0		+			
ANR	1890571	Identifier	k		1890291	0					
ANR	1890572	PrimaryExpression	1		1890291	1					
ANR	1890573	Identifier	my_optind		1890291	1					
ANR	1890574	PostIncDecOperationExpression	k ++	184:32:5840:5842	1890291	2	True				
ANR	1890575	Identifier	k		1890291	0					
ANR	1890576	IncDec	++		1890291	1					
ANR	1890577	ExpressionStatement	argv [ k ] = argv [ k + 1 ]	185:10:5855:5872	1890291	3	True				
ANR	1890578	AssignmentExpression	argv [ k ] = argv [ k + 1 ]		1890291	0		=			
ANR	1890579	ArrayIndexing	argv [ k ]		1890291	0					
ANR	1890580	Identifier	argv		1890291	0					
ANR	1890581	Identifier	k		1890291	1					
ANR	1890582	ArrayIndexing	argv [ k + 1 ]		1890291	1					
ANR	1890583	Identifier	argv		1890291	0					
ANR	1890584	AdditiveExpression	k + 1		1890291	1		+			
ANR	1890585	Identifier	k		1890291	0					
ANR	1890586	PrimaryExpression	1		1890291	1					
ANR	1890587	ExpressionStatement	argv [ -- my_optind ] = tmp	186:8:5882:5903	1890291	2	True				
ANR	1890588	AssignmentExpression	argv [ -- my_optind ] = tmp		1890291	0		=			
ANR	1890589	ArrayIndexing	argv [ -- my_optind ]		1890291	0					
ANR	1890590	Identifier	argv		1890291	0					
ANR	1890591	UnaryExpression	-- my_optind		1890291	1					
ANR	1890592	IncDec	--		1890291	0					
ANR	1890593	Identifier	my_optind		1890291	1					
ANR	1890594	Identifier	tmp		1890291	1					
ANR	1890595	BreakStatement	break ;	188:6:5919:5924	1890291	3	True				
ANR	1890596	ElseStatement	else		1890291	0					
ANR	1890597	IfStatement	if ( ( ! long_only ) && ( argv [ my_optind ] [ 1 ] != '-' ) )		1890291	0					
ANR	1890598	Condition	( ! long_only ) && ( argv [ my_optind ] [ 1 ] != '-' )	190:12:5944:5986	1890291	0	True				
ANR	1890599	AndExpression	( ! long_only ) && ( argv [ my_optind ] [ 1 ] != '-' )		1890291	0		&&			
ANR	1890600	UnaryOperationExpression	! long_only		1890291	0					
ANR	1890601	UnaryOperator	!		1890291	0					
ANR	1890602	Identifier	long_only		1890291	1					
ANR	1890603	EqualityExpression	argv [ my_optind ] [ 1 ] != '-'		1890291	1		!=			
ANR	1890604	ArrayIndexing	argv [ my_optind ] [ 1 ]		1890291	0					
ANR	1890605	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890606	Identifier	argv		1890291	0					
ANR	1890607	Identifier	my_optind		1890291	1					
ANR	1890608	PrimaryExpression	1		1890291	1					
ANR	1890609	PrimaryExpression	'-'		1890291	1					
ANR	1890610	ExpressionStatement	"opt = my_getopt ( argc , argv , shortopts )"	191:4:5993:6031	1890291	1	True				
ANR	1890611	AssignmentExpression	"opt = my_getopt ( argc , argv , shortopts )"		1890291	0		=			
ANR	1890612	Identifier	opt		1890291	0					
ANR	1890613	CallExpression	"my_getopt ( argc , argv , shortopts )"		1890291	1					
ANR	1890614	Callee	my_getopt		1890291	0					
ANR	1890615	Identifier	my_getopt		1890291	0					
ANR	1890616	ArgumentList	argc		1890291	1					
ANR	1890617	Argument	argc		1890291	0					
ANR	1890618	Identifier	argc		1890291	0					
ANR	1890619	Argument	argv		1890291	1					
ANR	1890620	Identifier	argv		1890291	0					
ANR	1890621	Argument	shortopts		1890291	2					
ANR	1890622	Identifier	shortopts		1890291	0					
ANR	1890623	ElseStatement	else		1890291	0					
ANR	1890624	CompoundStatement		50:4:1416:1444	1890291	0					
ANR	1890625	IdentifierDeclStatement	"int charind , offset ;"	193:4:6046:6065	1890291	0	True				
ANR	1890626	IdentifierDecl	charind		1890291	0					
ANR	1890627	IdentifierDeclType	int		1890291	0					
ANR	1890628	Identifier	charind		1890291	1					
ANR	1890629	IdentifierDecl	offset		1890291	1					
ANR	1890630	IdentifierDeclType	int		1890291	0					
ANR	1890631	Identifier	offset		1890291	1					
ANR	1890632	IdentifierDeclStatement	"int found = 0 , ind , hits = 0 ;"	194:4:6071:6099	1890291	1	True				
ANR	1890633	IdentifierDecl	found = 0		1890291	0					
ANR	1890634	IdentifierDeclType	int		1890291	0					
ANR	1890635	Identifier	found		1890291	1					
ANR	1890636	AssignmentExpression	found = 0		1890291	2		=			
ANR	1890637	Identifier	found		1890291	0					
ANR	1890638	PrimaryExpression	0		1890291	1					
ANR	1890639	IdentifierDecl	ind		1890291	1					
ANR	1890640	IdentifierDeclType	int		1890291	0					
ANR	1890641	Identifier	ind		1890291	1					
ANR	1890642	IdentifierDecl	hits = 0		1890291	2					
ANR	1890643	IdentifierDeclType	int		1890291	0					
ANR	1890644	Identifier	hits		1890291	1					
ANR	1890645	AssignmentExpression	hits = 0		1890291	2		=			
ANR	1890646	Identifier	hits		1890291	0					
ANR	1890647	PrimaryExpression	0		1890291	1					
ANR	1890648	IfStatement	if ( ( ( my_optopt = argv [ my_optind ] [ 1 ] ) != '-' ) && ! argv [ my_optind ] [ 2 ] )		1890291	2					
ANR	1890649	Condition	( ( my_optopt = argv [ my_optind ] [ 1 ] ) != '-' ) && ! argv [ my_optind ] [ 2 ]	196:7:6109:6173	1890291	0	True				
ANR	1890650	AndExpression	( ( my_optopt = argv [ my_optind ] [ 1 ] ) != '-' ) && ! argv [ my_optind ] [ 2 ]		1890291	0		&&			
ANR	1890651	EqualityExpression	( my_optopt = argv [ my_optind ] [ 1 ] ) != '-'		1890291	0		!=			
ANR	1890652	AssignmentExpression	my_optopt = argv [ my_optind ] [ 1 ]		1890291	0		=			
ANR	1890653	Identifier	my_optopt		1890291	0					
ANR	1890654	ArrayIndexing	argv [ my_optind ] [ 1 ]		1890291	1					
ANR	1890655	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890656	Identifier	argv		1890291	0					
ANR	1890657	Identifier	my_optind		1890291	1					
ANR	1890658	PrimaryExpression	1		1890291	1					
ANR	1890659	PrimaryExpression	'-'		1890291	1					
ANR	1890660	UnaryOperationExpression	! argv [ my_optind ] [ 2 ]		1890291	1					
ANR	1890661	UnaryOperator	!		1890291	0					
ANR	1890662	ArrayIndexing	argv [ my_optind ] [ 2 ]		1890291	1					
ANR	1890663	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890664	Identifier	argv		1890291	0					
ANR	1890665	Identifier	my_optind		1890291	1					
ANR	1890666	PrimaryExpression	2		1890291	1					
ANR	1890667	CompoundStatement		53:6:1529:1534	1890291	1					
ANR	1890668	IdentifierDeclStatement	int c ;	197:6:6184:6189	1890291	0	True				
ANR	1890669	IdentifierDecl	c		1890291	0					
ANR	1890670	IdentifierDeclType	int		1890291	0					
ANR	1890671	Identifier	c		1890291	1					
ANR	1890672	ExpressionStatement	ind = shortoff	199:6:6204:6218	1890291	1	True				
ANR	1890673	AssignmentExpression	ind = shortoff		1890291	0		=			
ANR	1890674	Identifier	ind		1890291	0					
ANR	1890675	Identifier	shortoff		1890291	1					
ANR	1890676	WhileStatement	while ( ( c = shortopts [ ind ++ ] ) )		1890291	2					
ANR	1890677	Condition	c = shortopts [ ind ++ ]	200:12:6232:6253	1890291	0	True				
ANR	1890678	AssignmentExpression	c = shortopts [ ind ++ ]		1890291	0		=			
ANR	1890679	Identifier	c		1890291	0					
ANR	1890680	ArrayIndexing	shortopts [ ind ++ ]		1890291	1					
ANR	1890681	Identifier	shortopts		1890291	0					
ANR	1890682	PostIncDecOperationExpression	ind ++		1890291	1					
ANR	1890683	Identifier	ind		1890291	0					
ANR	1890684	IncDec	++		1890291	1					
ANR	1890685	CompoundStatement		56:36:1601:1601	1890291	1					
ANR	1890686	IfStatement	if ( ( ( shortopts [ ind ] == ':' ) || ( ( c == 'W' ) && ( shortopts [ ind ] == ';' ) ) ) && ( shortopts [ ++ ind ] == ':' ) )		1890291	0					
ANR	1890687	Condition	( ( shortopts [ ind ] == ':' ) || ( ( c == 'W' ) && ( shortopts [ ind ] == ';' ) ) ) && ( shortopts [ ++ ind ] == ':' )	201:11:6269:6388	1890291	0	True				
ANR	1890688	AndExpression	( ( shortopts [ ind ] == ':' ) || ( ( c == 'W' ) && ( shortopts [ ind ] == ';' ) ) ) && ( shortopts [ ++ ind ] == ':' )		1890291	0		&&			
ANR	1890689	OrExpression	( shortopts [ ind ] == ':' ) || ( ( c == 'W' ) && ( shortopts [ ind ] == ';' ) )		1890291	0		||			
ANR	1890690	EqualityExpression	shortopts [ ind ] == ':'		1890291	0		==			
ANR	1890691	ArrayIndexing	shortopts [ ind ]		1890291	0					
ANR	1890692	Identifier	shortopts		1890291	0					
ANR	1890693	Identifier	ind		1890291	1					
ANR	1890694	PrimaryExpression	':'		1890291	1					
ANR	1890695	AndExpression	( c == 'W' ) && ( shortopts [ ind ] == ';' )		1890291	1		&&			
ANR	1890696	EqualityExpression	c == 'W'		1890291	0		==			
ANR	1890697	Identifier	c		1890291	0					
ANR	1890698	PrimaryExpression	'W'		1890291	1					
ANR	1890699	EqualityExpression	shortopts [ ind ] == ';'		1890291	1		==			
ANR	1890700	ArrayIndexing	shortopts [ ind ]		1890291	0					
ANR	1890701	Identifier	shortopts		1890291	0					
ANR	1890702	Identifier	ind		1890291	1					
ANR	1890703	PrimaryExpression	';'		1890291	1					
ANR	1890704	EqualityExpression	shortopts [ ++ ind ] == ':'		1890291	1		==			
ANR	1890705	ArrayIndexing	shortopts [ ++ ind ]		1890291	0					
ANR	1890706	Identifier	shortopts		1890291	0					
ANR	1890707	UnaryExpression	++ ind		1890291	1					
ANR	1890708	IncDec	++		1890291	0					
ANR	1890709	Identifier	ind		1890291	1					
ANR	1890710	PrimaryExpression	':'		1890291	1					
ANR	1890711	ExpressionStatement	ind ++	204:10:6401:6407	1890291	1	True				
ANR	1890712	PostIncDecOperationExpression	ind ++		1890291	0					
ANR	1890713	Identifier	ind		1890291	0					
ANR	1890714	IncDec	++		1890291	1					
ANR	1890715	IfStatement	if ( my_optopt == c )		1890291	1					
ANR	1890716	Condition	my_optopt == c	205:11:6420:6433	1890291	0	True				
ANR	1890717	EqualityExpression	my_optopt == c		1890291	0		==			
ANR	1890718	Identifier	my_optopt		1890291	0					
ANR	1890719	Identifier	c		1890291	1					
ANR	1890720	ReturnStatement	"return my_getopt ( argc , argv , shortopts ) ;"	205:27:6436:6475	1890291	1	True				
ANR	1890721	CallExpression	"my_getopt ( argc , argv , shortopts )"		1890291	0					
ANR	1890722	Callee	my_getopt		1890291	0					
ANR	1890723	Identifier	my_getopt		1890291	0					
ANR	1890724	ArgumentList	argc		1890291	1					
ANR	1890725	Argument	argc		1890291	0					
ANR	1890726	Identifier	argc		1890291	0					
ANR	1890727	Argument	argv		1890291	1					
ANR	1890728	Identifier	argv		1890291	0					
ANR	1890729	Argument	shortopts		1890291	2					
ANR	1890730	Identifier	shortopts		1890291	0					
ANR	1890731	ExpressionStatement	offset = 2 - ( argv [ my_optind ] [ 1 ] != '-' )	208:4:6495:6535	1890291	3	True				
ANR	1890732	AssignmentExpression	offset = 2 - ( argv [ my_optind ] [ 1 ] != '-' )		1890291	0		=			
ANR	1890733	Identifier	offset		1890291	0					
ANR	1890734	AdditiveExpression	2 - ( argv [ my_optind ] [ 1 ] != '-' )		1890291	1		-			
ANR	1890735	PrimaryExpression	2		1890291	0					
ANR	1890736	EqualityExpression	argv [ my_optind ] [ 1 ] != '-'		1890291	1		!=			
ANR	1890737	ArrayIndexing	argv [ my_optind ] [ 1 ]		1890291	0					
ANR	1890738	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890739	Identifier	argv		1890291	0					
ANR	1890740	Identifier	my_optind		1890291	1					
ANR	1890741	PrimaryExpression	1		1890291	1					
ANR	1890742	PrimaryExpression	'-'		1890291	1					
ANR	1890743	ForStatement	for ( charind = offset ; ( argv [ my_optind ] [ charind ] != '\\0' ) && ( argv [ my_optind ] [ charind ] != '=' ) ; charind ++ )		1890291	4					
ANR	1890744	ForInit	charind = offset ;	209:8:6545:6561	1890291	0	True				
ANR	1890745	AssignmentExpression	charind = offset		1890291	0		=			
ANR	1890746	Identifier	charind		1890291	0					
ANR	1890747	Identifier	offset		1890291	1					
ANR	1890748	Condition	( argv [ my_optind ] [ charind ] != '\\0' ) && ( argv [ my_optind ] [ charind ] != '=' )	210:8:6571:6651	1890291	1	True				
ANR	1890749	AndExpression	( argv [ my_optind ] [ charind ] != '\\0' ) && ( argv [ my_optind ] [ charind ] != '=' )		1890291	0		&&			
ANR	1890750	EqualityExpression	argv [ my_optind ] [ charind ] != '\\0'		1890291	0		!=			
ANR	1890751	ArrayIndexing	argv [ my_optind ] [ charind ]		1890291	0					
ANR	1890752	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890753	Identifier	argv		1890291	0					
ANR	1890754	Identifier	my_optind		1890291	1					
ANR	1890755	Identifier	charind		1890291	1					
ANR	1890756	PrimaryExpression	'\\0'		1890291	1					
ANR	1890757	EqualityExpression	argv [ my_optind ] [ charind ] != '='		1890291	1		!=			
ANR	1890758	ArrayIndexing	argv [ my_optind ] [ charind ]		1890291	0					
ANR	1890759	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890760	Identifier	argv		1890291	0					
ANR	1890761	Identifier	my_optind		1890291	1					
ANR	1890762	Identifier	charind		1890291	1					
ANR	1890763	PrimaryExpression	'='		1890291	1					
ANR	1890764	PostIncDecOperationExpression	charind ++	212:8:6662:6670	1890291	2	True				
ANR	1890765	Identifier	charind		1890291	0					
ANR	1890766	IncDec	++		1890291	1					
ANR	1890767	ExpressionStatement		212:18:6672:6672	1890291	3	True				
ANR	1890768	ForStatement	for ( ind = 0 ; longopts [ ind ] . name && ! hits ; ind ++ )		1890291	5					
ANR	1890769	ForInit	ind = 0 ;	213:8:6682:6689	1890291	0	True				
ANR	1890770	AssignmentExpression	ind = 0		1890291	0		=			
ANR	1890771	Identifier	ind		1890291	0					
ANR	1890772	PrimaryExpression	0		1890291	1					
ANR	1890773	Condition	longopts [ ind ] . name && ! hits	213:17:6691:6717	1890291	1	True				
ANR	1890774	AndExpression	longopts [ ind ] . name && ! hits		1890291	0		&&			
ANR	1890775	MemberAccess	longopts [ ind ] . name		1890291	0					
ANR	1890776	ArrayIndexing	longopts [ ind ]		1890291	0					
ANR	1890777	Identifier	longopts		1890291	0					
ANR	1890778	Identifier	ind		1890291	1					
ANR	1890779	Identifier	name		1890291	1					
ANR	1890780	UnaryOperationExpression	! hits		1890291	1					
ANR	1890781	UnaryOperator	!		1890291	0					
ANR	1890782	Identifier	hits		1890291	1					
ANR	1890783	PostIncDecOperationExpression	ind ++	213:46:6720:6724	1890291	2	True				
ANR	1890784	Identifier	ind		1890291	0					
ANR	1890785	IncDec	++		1890291	1					
ANR	1890786	IfStatement	"if ( ( strlen ( longopts [ ind ] . name ) == ( size_t ) ( charind - offset ) ) && ( strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0 ) )"		1890291	3					
ANR	1890787	Condition	"( strlen ( longopts [ ind ] . name ) == ( size_t ) ( charind - offset ) ) && ( strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0 )"	214:9:6736:6903	1890291	0	True				
ANR	1890788	AndExpression	"( strlen ( longopts [ ind ] . name ) == ( size_t ) ( charind - offset ) ) && ( strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0 )"		1890291	0		&&			
ANR	1890789	EqualityExpression	strlen ( longopts [ ind ] . name ) == ( size_t ) ( charind - offset )		1890291	0		==			
ANR	1890790	CallExpression	strlen ( longopts [ ind ] . name )		1890291	0					
ANR	1890791	Callee	strlen		1890291	0					
ANR	1890792	Identifier	strlen		1890291	0					
ANR	1890793	ArgumentList	longopts [ ind ] . name		1890291	1					
ANR	1890794	Argument	longopts [ ind ] . name		1890291	0					
ANR	1890795	MemberAccess	longopts [ ind ] . name		1890291	0					
ANR	1890796	ArrayIndexing	longopts [ ind ]		1890291	0					
ANR	1890797	Identifier	longopts		1890291	0					
ANR	1890798	Identifier	ind		1890291	1					
ANR	1890799	Identifier	name		1890291	1					
ANR	1890800	CastExpression	( size_t ) ( charind - offset )		1890291	1					
ANR	1890801	CastTarget	size_t		1890291	0					
ANR	1890802	AdditiveExpression	charind - offset		1890291	1		-			
ANR	1890803	Identifier	charind		1890291	0					
ANR	1890804	Identifier	offset		1890291	1					
ANR	1890805	EqualityExpression	"strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0"		1890291	1		==			
ANR	1890806	CallExpression	"strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset )"		1890291	0					
ANR	1890807	Callee	strncmp		1890291	0					
ANR	1890808	Identifier	strncmp		1890291	0					
ANR	1890809	ArgumentList	longopts [ ind ] . name		1890291	1					
ANR	1890810	Argument	longopts [ ind ] . name		1890291	0					
ANR	1890811	MemberAccess	longopts [ ind ] . name		1890291	0					
ANR	1890812	ArrayIndexing	longopts [ ind ]		1890291	0					
ANR	1890813	Identifier	longopts		1890291	0					
ANR	1890814	Identifier	ind		1890291	1					
ANR	1890815	Identifier	name		1890291	1					
ANR	1890816	Argument	argv [ my_optind ] + offset		1890291	1					
ANR	1890817	AdditiveExpression	argv [ my_optind ] + offset		1890291	0		+			
ANR	1890818	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890819	Identifier	argv		1890291	0					
ANR	1890820	Identifier	my_optind		1890291	1					
ANR	1890821	Identifier	offset		1890291	1					
ANR	1890822	Argument	charind - offset		1890291	2					
ANR	1890823	AdditiveExpression	charind - offset		1890291	0		-			
ANR	1890824	Identifier	charind		1890291	0					
ANR	1890825	Identifier	offset		1890291	1					
ANR	1890826	PrimaryExpression	0		1890291	1					
ANR	1890827	ExpressionStatement	"found = ind , hits ++"	217:8:6914:6933	1890291	1	True				
ANR	1890828	Expression	"found = ind , hits ++"		1890291	0					
ANR	1890829	AssignmentExpression	found = ind		1890291	0		=			
ANR	1890830	Identifier	found		1890291	0					
ANR	1890831	Identifier	ind		1890291	1					
ANR	1890832	PostIncDecOperationExpression	hits ++		1890291	1					
ANR	1890833	Identifier	hits		1890291	0					
ANR	1890834	IncDec	++		1890291	1					
ANR	1890835	IfStatement	if ( ! hits )		1890291	6					
ANR	1890836	Condition	! hits	218:7:6942:6946	1890291	0	True				
ANR	1890837	UnaryOperationExpression	! hits		1890291	0					
ANR	1890838	UnaryOperator	!		1890291	0					
ANR	1890839	Identifier	hits		1890291	1					
ANR	1890840	ForStatement	for ( ind = 0 ; longopts [ ind ] . name ; ind ++ )		1890291	1					
ANR	1890841	ForInit	ind = 0 ;	218:18:6953:6960	1890291	0	True				
ANR	1890842	AssignmentExpression	ind = 0		1890291	0		=			
ANR	1890843	Identifier	ind		1890291	0					
ANR	1890844	PrimaryExpression	0		1890291	1					
ANR	1890845	Condition	longopts [ ind ] . name	218:27:6962:6979	1890291	1	True				
ANR	1890846	MemberAccess	longopts [ ind ] . name		1890291	0					
ANR	1890847	ArrayIndexing	longopts [ ind ]		1890291	0					
ANR	1890848	Identifier	longopts		1890291	0					
ANR	1890849	Identifier	ind		1890291	1					
ANR	1890850	Identifier	name		1890291	1					
ANR	1890851	PostIncDecOperationExpression	ind ++	218:47:6982:6986	1890291	2	True				
ANR	1890852	Identifier	ind		1890291	0					
ANR	1890853	IncDec	++		1890291	1					
ANR	1890854	IfStatement	"if ( strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0 )"		1890291	3					
ANR	1890855	Condition	"strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0"	219:9:6998:7090	1890291	0	True				
ANR	1890856	EqualityExpression	"strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset ) == 0"		1890291	0		==			
ANR	1890857	CallExpression	"strncmp ( longopts [ ind ] . name , argv [ my_optind ] + offset , charind - offset )"		1890291	0					
ANR	1890858	Callee	strncmp		1890291	0					
ANR	1890859	Identifier	strncmp		1890291	0					
ANR	1890860	ArgumentList	longopts [ ind ] . name		1890291	1					
ANR	1890861	Argument	longopts [ ind ] . name		1890291	0					
ANR	1890862	MemberAccess	longopts [ ind ] . name		1890291	0					
ANR	1890863	ArrayIndexing	longopts [ ind ]		1890291	0					
ANR	1890864	Identifier	longopts		1890291	0					
ANR	1890865	Identifier	ind		1890291	1					
ANR	1890866	Identifier	name		1890291	1					
ANR	1890867	Argument	argv [ my_optind ] + offset		1890291	1					
ANR	1890868	AdditiveExpression	argv [ my_optind ] + offset		1890291	0		+			
ANR	1890869	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890870	Identifier	argv		1890291	0					
ANR	1890871	Identifier	my_optind		1890291	1					
ANR	1890872	Identifier	offset		1890291	1					
ANR	1890873	Argument	charind - offset		1890291	2					
ANR	1890874	AdditiveExpression	charind - offset		1890291	0		-			
ANR	1890875	Identifier	charind		1890291	0					
ANR	1890876	Identifier	offset		1890291	1					
ANR	1890877	PrimaryExpression	0		1890291	1					
ANR	1890878	ExpressionStatement	"found = ind , hits ++"	221:8:7101:7120	1890291	1	True				
ANR	1890879	Expression	"found = ind , hits ++"		1890291	0					
ANR	1890880	AssignmentExpression	found = ind		1890291	0		=			
ANR	1890881	Identifier	found		1890291	0					
ANR	1890882	Identifier	ind		1890291	1					
ANR	1890883	PostIncDecOperationExpression	hits ++		1890291	1					
ANR	1890884	Identifier	hits		1890291	0					
ANR	1890885	IncDec	++		1890291	1					
ANR	1890886	IfStatement	if ( hits == 1 )		1890291	7					
ANR	1890887	Condition	hits == 1	222:7:7129:7137	1890291	0	True				
ANR	1890888	EqualityExpression	hits == 1		1890291	0		==			
ANR	1890889	Identifier	hits		1890291	0					
ANR	1890890	PrimaryExpression	1		1890291	1					
ANR	1890891	CompoundStatement		78:18:2485:2485	1890291	1					
ANR	1890892	ExpressionStatement	opt = 0	223:6:7148:7155	1890291	0	True				
ANR	1890893	AssignmentExpression	opt = 0		1890291	0		=			
ANR	1890894	Identifier	opt		1890291	0					
ANR	1890895	PrimaryExpression	0		1890291	1					
ANR	1890896	IfStatement	if ( argv [ my_optind ] [ charind ] == '=' )		1890291	1					
ANR	1890897	Condition	argv [ my_optind ] [ charind ] == '='	225:9:7167:7197	1890291	0	True				
ANR	1890898	EqualityExpression	argv [ my_optind ] [ charind ] == '='		1890291	0		==			
ANR	1890899	ArrayIndexing	argv [ my_optind ] [ charind ]		1890291	0					
ANR	1890900	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890901	Identifier	argv		1890291	0					
ANR	1890902	Identifier	my_optind		1890291	1					
ANR	1890903	Identifier	charind		1890291	1					
ANR	1890904	PrimaryExpression	'='		1890291	1					
ANR	1890905	CompoundStatement		81:42:2545:2545	1890291	1					
ANR	1890906	IfStatement	if ( longopts [ found ] . has_arg == 0 )		1890291	0					
ANR	1890907	Condition	longopts [ found ] . has_arg == 0	226:11:7213:7240	1890291	0	True				
ANR	1890908	EqualityExpression	longopts [ found ] . has_arg == 0		1890291	0		==			
ANR	1890909	MemberAccess	longopts [ found ] . has_arg		1890291	0					
ANR	1890910	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1890911	Identifier	longopts		1890291	0					
ANR	1890912	Identifier	found		1890291	1					
ANR	1890913	Identifier	has_arg		1890291	1					
ANR	1890914	PrimaryExpression	0		1890291	1					
ANR	1890915	CompoundStatement		82:41:2588:2588	1890291	1					
ANR	1890916	ExpressionStatement	opt = '?'	227:10:7255:7264	1890291	0	True				
ANR	1890917	AssignmentExpression	opt = '?'		1890291	0		=			
ANR	1890918	Identifier	opt		1890291	0					
ANR	1890919	PrimaryExpression	'?'		1890291	1					
ANR	1890920	IfStatement	if ( my_opterr )		1890291	1					
ANR	1890921	Condition	my_opterr	228:13:7279:7287	1890291	0	True				
ANR	1890922	Identifier	my_opterr		1890291	0					
ANR	1890923	ExpressionStatement	"fprintf ( stderr , ""%s: option `--%s' doesn't allow an argument\\n"" , argv [ 0 ] , longopts [ found ] . name )"	228:24:7290:7443	1890291	1	True				
ANR	1890924	CallExpression	"fprintf ( stderr , ""%s: option `--%s' doesn't allow an argument\\n"" , argv [ 0 ] , longopts [ found ] . name )"		1890291	0					
ANR	1890925	Callee	fprintf		1890291	0					
ANR	1890926	Identifier	fprintf		1890291	0					
ANR	1890927	ArgumentList	stderr		1890291	1					
ANR	1890928	Argument	stderr		1890291	0					
ANR	1890929	Identifier	stderr		1890291	0					
ANR	1890930	Argument	"""%s: option `--%s' doesn't allow an argument\\n"""		1890291	1					
ANR	1890931	PrimaryExpression	"""%s: option `--%s' doesn't allow an argument\\n"""		1890291	0					
ANR	1890932	Argument	argv [ 0 ]		1890291	2					
ANR	1890933	ArrayIndexing	argv [ 0 ]		1890291	0					
ANR	1890934	Identifier	argv		1890291	0					
ANR	1890935	PrimaryExpression	0		1890291	1					
ANR	1890936	Argument	longopts [ found ] . name		1890291	3					
ANR	1890937	MemberAccess	longopts [ found ] . name		1890291	0					
ANR	1890938	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1890939	Identifier	longopts		1890291	0					
ANR	1890940	Identifier	found		1890291	1					
ANR	1890941	Identifier	name		1890291	1					
ANR	1890942	ElseStatement	else		1890291	0					
ANR	1890943	CompoundStatement		87:15:2805:2805	1890291	0					
ANR	1890944	ExpressionStatement	my_optarg = argv [ my_optind ] + ++ charind	232:10:7472:7511	1890291	0	True				
ANR	1890945	AssignmentExpression	my_optarg = argv [ my_optind ] + ++ charind		1890291	0		=			
ANR	1890946	Identifier	my_optarg		1890291	0					
ANR	1890947	AdditiveExpression	argv [ my_optind ] + ++ charind		1890291	1		+			
ANR	1890948	ArrayIndexing	argv [ my_optind ]		1890291	0					
ANR	1890949	Identifier	argv		1890291	0					
ANR	1890950	Identifier	my_optind		1890291	1					
ANR	1890951	UnaryExpression	++ charind		1890291	1					
ANR	1890952	IncDec	++		1890291	0					
ANR	1890953	Identifier	charind		1890291	1					
ANR	1890954	ExpressionStatement	charind = 0	233:10:7523:7534	1890291	1	True				
ANR	1890955	AssignmentExpression	charind = 0		1890291	0		=			
ANR	1890956	Identifier	charind		1890291	0					
ANR	1890957	PrimaryExpression	0		1890291	1					
ANR	1890958	ElseStatement	else		1890291	0					
ANR	1890959	IfStatement	if ( longopts [ found ] . has_arg == 1 )		1890291	0					
ANR	1890960	Condition	longopts [ found ] . has_arg == 1	235:16:7562:7589	1890291	0	True				
ANR	1890961	EqualityExpression	longopts [ found ] . has_arg == 1		1890291	0		==			
ANR	1890962	MemberAccess	longopts [ found ] . has_arg		1890291	0					
ANR	1890963	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1890964	Identifier	longopts		1890291	0					
ANR	1890965	Identifier	found		1890291	1					
ANR	1890966	Identifier	has_arg		1890291	1					
ANR	1890967	PrimaryExpression	1		1890291	1					
ANR	1890968	CompoundStatement		91:46:2937:2937	1890291	1					
ANR	1890969	IfStatement	if ( ++ my_optind >= argc )		1890291	0					
ANR	1890970	Condition	++ my_optind >= argc	236:11:7605:7623	1890291	0	True				
ANR	1890971	RelationalExpression	++ my_optind >= argc		1890291	0		>=			
ANR	1890972	UnaryExpression	++ my_optind		1890291	0					
ANR	1890973	IncDec	++		1890291	0					
ANR	1890974	Identifier	my_optind		1890291	1					
ANR	1890975	Identifier	argc		1890291	1					
ANR	1890976	CompoundStatement		92:32:2971:2971	1890291	1					
ANR	1890977	ExpressionStatement	opt = ( colon_mode == ':' ) ? ':' : '?'	237:10:7638:7675	1890291	0	True				
ANR	1890978	AssignmentExpression	opt = ( colon_mode == ':' ) ? ':' : '?'		1890291	0		=			
ANR	1890979	Identifier	opt		1890291	0					
ANR	1890980	ConditionalExpression	( colon_mode == ':' ) ? ':' : '?'		1890291	1					
ANR	1890981	Condition	colon_mode == ':'		1890291	0					
ANR	1890982	EqualityExpression	colon_mode == ':'		1890291	0		==			
ANR	1890983	Identifier	colon_mode		1890291	0					
ANR	1890984	PrimaryExpression	':'		1890291	1					
ANR	1890985	PrimaryExpression	':'		1890291	1					
ANR	1890986	PrimaryExpression	'?'		1890291	2					
ANR	1890987	IfStatement	if ( my_opterr )		1890291	1					
ANR	1890988	Condition	my_opterr	238:13:7690:7698	1890291	0	True				
ANR	1890989	Identifier	my_opterr		1890291	0					
ANR	1890990	ExpressionStatement	"fprintf ( stderr , ""%s: option `--%s' requires an argument\\n"" , argv [ 0 ] , longopts [ found ] . name )"	238:24:7701:7849	1890291	1	True				
ANR	1890991	CallExpression	"fprintf ( stderr , ""%s: option `--%s' requires an argument\\n"" , argv [ 0 ] , longopts [ found ] . name )"		1890291	0					
ANR	1890992	Callee	fprintf		1890291	0					
ANR	1890993	Identifier	fprintf		1890291	0					
ANR	1890994	ArgumentList	stderr		1890291	1					
ANR	1890995	Argument	stderr		1890291	0					
ANR	1890996	Identifier	stderr		1890291	0					
ANR	1890997	Argument	"""%s: option `--%s' requires an argument\\n"""		1890291	1					
ANR	1890998	PrimaryExpression	"""%s: option `--%s' requires an argument\\n"""		1890291	0					
ANR	1890999	Argument	argv [ 0 ]		1890291	2					
ANR	1891000	ArrayIndexing	argv [ 0 ]		1890291	0					
ANR	1891001	Identifier	argv		1890291	0					
ANR	1891002	PrimaryExpression	0		1890291	1					
ANR	1891003	Argument	longopts [ found ] . name		1890291	3					
ANR	1891004	MemberAccess	longopts [ found ] . name		1890291	0					
ANR	1891005	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1891006	Identifier	longopts		1890291	0					
ANR	1891007	Identifier	found		1890291	1					
ANR	1891008	Identifier	name		1890291	1					
ANR	1891009	ElseStatement	else		1890291	0					
ANR	1891010	ExpressionStatement	my_optarg = argv [ my_optind ]	241:15:7866:7893	1890291	0	True				
ANR	1891011	AssignmentExpression	my_optarg = argv [ my_optind ]		1890291	0		=			
ANR	1891012	Identifier	my_optarg		1890291	0					
ANR	1891013	ArrayIndexing	argv [ my_optind ]		1890291	1					
ANR	1891014	Identifier	argv		1890291	0					
ANR	1891015	Identifier	my_optind		1890291	1					
ANR	1891016	IfStatement	if ( ! opt )		1890291	2					
ANR	1891017	Condition	! opt	243:9:7912:7915	1890291	0	True				
ANR	1891018	UnaryOperationExpression	! opt		1890291	0					
ANR	1891019	UnaryOperator	!		1890291	0					
ANR	1891020	Identifier	opt		1890291	1					
ANR	1891021	CompoundStatement		99:15:3263:3263	1890291	1					
ANR	1891022	IfStatement	if ( longind )		1890291	0					
ANR	1891023	Condition	longind	244:12:7932:7938	1890291	0	True				
ANR	1891024	Identifier	longind		1890291	0					
ANR	1891025	ExpressionStatement	* longind = found	244:21:7941:7957	1890291	1	True				
ANR	1891026	AssignmentExpression	* longind = found		1890291	0		=			
ANR	1891027	UnaryOperationExpression	* longind		1890291	0					
ANR	1891028	UnaryOperator	*		1890291	0					
ANR	1891029	Identifier	longind		1890291	1					
ANR	1891030	Identifier	found		1890291	1					
ANR	1891031	IfStatement	if ( ! longopts [ found ] . flag )		1890291	1					
ANR	1891032	Condition	! longopts [ found ] . flag	245:11:7970:7990	1890291	0	True				
ANR	1891033	UnaryOperationExpression	! longopts [ found ] . flag		1890291	0					
ANR	1891034	UnaryOperator	!		1890291	0					
ANR	1891035	MemberAccess	longopts [ found ] . flag		1890291	1					
ANR	1891036	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1891037	Identifier	longopts		1890291	0					
ANR	1891038	Identifier	found		1890291	1					
ANR	1891039	Identifier	flag		1890291	1					
ANR	1891040	ExpressionStatement	opt = longopts [ found ] . val	245:34:7993:8018	1890291	1	True				
ANR	1891041	AssignmentExpression	opt = longopts [ found ] . val		1890291	0		=			
ANR	1891042	Identifier	opt		1890291	0					
ANR	1891043	MemberAccess	longopts [ found ] . val		1890291	1					
ANR	1891044	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1891045	Identifier	longopts		1890291	0					
ANR	1891046	Identifier	found		1890291	1					
ANR	1891047	Identifier	val		1890291	1					
ANR	1891048	ElseStatement	else		1890291	0					
ANR	1891049	ExpressionStatement	* ( longopts [ found ] . flag ) = longopts [ found ] . val	246:13:8033:8078	1890291	0	True				
ANR	1891050	AssignmentExpression	* ( longopts [ found ] . flag ) = longopts [ found ] . val		1890291	0		=			
ANR	1891051	UnaryOperationExpression	* ( longopts [ found ] . flag )		1890291	0					
ANR	1891052	UnaryOperator	*		1890291	0					
ANR	1891053	MemberAccess	longopts [ found ] . flag		1890291	1					
ANR	1891054	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1891055	Identifier	longopts		1890291	0					
ANR	1891056	Identifier	found		1890291	1					
ANR	1891057	Identifier	flag		1890291	1					
ANR	1891058	MemberAccess	longopts [ found ] . val		1890291	1					
ANR	1891059	ArrayIndexing	longopts [ found ]		1890291	0					
ANR	1891060	Identifier	longopts		1890291	0					
ANR	1891061	Identifier	found		1890291	1					
ANR	1891062	Identifier	val		1890291	1					
ANR	1891063	ExpressionStatement	my_optind ++	248:6:8094:8105	1890291	3	True				
ANR	1891064	PostIncDecOperationExpression	my_optind ++		1890291	0					
ANR	1891065	Identifier	my_optind		1890291	0					
ANR	1891066	IncDec	++		1890291	1					
ANR	1891067	ElseStatement	else		1890291	0					
ANR	1891068	IfStatement	if ( ! hits )		1890291	0					
ANR	1891069	Condition	! hits	249:14:8121:8125	1890291	0	True				
ANR	1891070	UnaryOperationExpression	! hits		1890291	0					
ANR	1891071	UnaryOperator	!		1890291	0					
ANR	1891072	Identifier	hits		1890291	1					
ANR	1891073	CompoundStatement		105:21:3473:3473	1890291	1					
ANR	1891074	IfStatement	if ( offset == 1 )		1890291	0					
ANR	1891075	Condition	offset == 1	250:9:8139:8149	1890291	0	True				
ANR	1891076	EqualityExpression	offset == 1		1890291	0		==			
ANR	1891077	Identifier	offset		1890291	0					
ANR	1891078	PrimaryExpression	1		1890291	1					
ANR	1891079	ExpressionStatement	"opt = my_getopt ( argc , argv , shortopts )"	250:22:8152:8190	1890291	1	True				
ANR	1891080	AssignmentExpression	"opt = my_getopt ( argc , argv , shortopts )"		1890291	0		=			
ANR	1891081	Identifier	opt		1890291	0					
ANR	1891082	CallExpression	"my_getopt ( argc , argv , shortopts )"		1890291	1					
ANR	1891083	Callee	my_getopt		1890291	0					
ANR	1891084	Identifier	my_getopt		1890291	0					
ANR	1891085	ArgumentList	argc		1890291	1					
ANR	1891086	Argument	argc		1890291	0					
ANR	1891087	Identifier	argc		1890291	0					
ANR	1891088	Argument	argv		1890291	1					
ANR	1891089	Identifier	argv		1890291	0					
ANR	1891090	Argument	shortopts		1890291	2					
ANR	1891091	Identifier	shortopts		1890291	0					
ANR	1891092	ElseStatement	else		1890291	0					
ANR	1891093	CompoundStatement		107:11:3548:3548	1890291	0					
ANR	1891094	ExpressionStatement	opt = '?'	252:8:8213:8222	1890291	0	True				
ANR	1891095	AssignmentExpression	opt = '?'		1890291	0		=			
ANR	1891096	Identifier	opt		1890291	0					
ANR	1891097	PrimaryExpression	'?'		1890291	1					
ANR	1891098	IfStatement	if ( my_opterr )		1890291	1					
ANR	1891099	Condition	my_opterr	253:11:8235:8243	1890291	0	True				
ANR	1891100	Identifier	my_opterr		1890291	0					
ANR	1891101	ExpressionStatement	"fprintf ( stderr , ""%s: unrecognized option `%s'\\n"" , argv [ 0 ] , argv [ my_optind ++ ] )"	253:22:8246:8377	1890291	1	True				
ANR	1891102	CallExpression	"fprintf ( stderr , ""%s: unrecognized option `%s'\\n"" , argv [ 0 ] , argv [ my_optind ++ ] )"		1890291	0					
ANR	1891103	Callee	fprintf		1890291	0					
ANR	1891104	Identifier	fprintf		1890291	0					
ANR	1891105	ArgumentList	stderr		1890291	1					
ANR	1891106	Argument	stderr		1890291	0					
ANR	1891107	Identifier	stderr		1890291	0					
ANR	1891108	Argument	"""%s: unrecognized option `%s'\\n"""		1890291	1					
ANR	1891109	PrimaryExpression	"""%s: unrecognized option `%s'\\n"""		1890291	0					
ANR	1891110	Argument	argv [ 0 ]		1890291	2					
ANR	1891111	ArrayIndexing	argv [ 0 ]		1890291	0					
ANR	1891112	Identifier	argv		1890291	0					
ANR	1891113	PrimaryExpression	0		1890291	1					
ANR	1891114	Argument	argv [ my_optind ++ ]		1890291	3					
ANR	1891115	ArrayIndexing	argv [ my_optind ++ ]		1890291	0					
ANR	1891116	Identifier	argv		1890291	0					
ANR	1891117	PostIncDecOperationExpression	my_optind ++		1890291	1					
ANR	1891118	Identifier	my_optind		1890291	0					
ANR	1891119	IncDec	++		1890291	1					
ANR	1891120	ElseStatement	else		1890291	0					
ANR	1891121	CompoundStatement		113:11:3743:3743	1890291	0					
ANR	1891122	ExpressionStatement	opt = '?'	258:6:8406:8415	1890291	0	True				
ANR	1891123	AssignmentExpression	opt = '?'		1890291	0		=			
ANR	1891124	Identifier	opt		1890291	0					
ANR	1891125	PrimaryExpression	'?'		1890291	1					
ANR	1891126	IfStatement	if ( my_opterr )		1890291	1					
ANR	1891127	Condition	my_opterr	259:9:8426:8434	1890291	0	True				
ANR	1891128	Identifier	my_opterr		1890291	0					
ANR	1891129	ExpressionStatement	"fprintf ( stderr , ""%s: option `%s' is ambiguous\\n"" , argv [ 0 ] , argv [ my_optind ++ ] )"	259:20:8437:8564	1890291	1	True				
ANR	1891130	CallExpression	"fprintf ( stderr , ""%s: option `%s' is ambiguous\\n"" , argv [ 0 ] , argv [ my_optind ++ ] )"		1890291	0					
ANR	1891131	Callee	fprintf		1890291	0					
ANR	1891132	Identifier	fprintf		1890291	0					
ANR	1891133	ArgumentList	stderr		1890291	1					
ANR	1891134	Argument	stderr		1890291	0					
ANR	1891135	Identifier	stderr		1890291	0					
ANR	1891136	Argument	"""%s: option `%s' is ambiguous\\n"""		1890291	1					
ANR	1891137	PrimaryExpression	"""%s: option `%s' is ambiguous\\n"""		1890291	0					
ANR	1891138	Argument	argv [ 0 ]		1890291	2					
ANR	1891139	ArrayIndexing	argv [ 0 ]		1890291	0					
ANR	1891140	Identifier	argv		1890291	0					
ANR	1891141	PrimaryExpression	0		1890291	1					
ANR	1891142	Argument	argv [ my_optind ++ ]		1890291	3					
ANR	1891143	ArrayIndexing	argv [ my_optind ++ ]		1890291	0					
ANR	1891144	Identifier	argv		1890291	0					
ANR	1891145	PostIncDecOperationExpression	my_optind ++		1890291	1					
ANR	1891146	Identifier	my_optind		1890291	0					
ANR	1891147	IncDec	++		1890291	1					
ANR	1891148	IfStatement	if ( my_optind > argc )		1890291	5					
ANR	1891149	Condition	my_optind > argc	264:6:8582:8597	1890291	0	True				
ANR	1891150	RelationalExpression	my_optind > argc		1890291	0		>			
ANR	1891151	Identifier	my_optind		1890291	0					
ANR	1891152	Identifier	argc		1890291	1					
ANR	1891153	ExpressionStatement	my_optind = argc	264:24:8600:8616	1890291	1	True				
ANR	1891154	AssignmentExpression	my_optind = argc		1890291	0		=			
ANR	1891155	Identifier	my_optind		1890291	0					
ANR	1891156	Identifier	argc		1890291	1					
ANR	1891157	ReturnStatement	return opt ;	265:2:8620:8630	1890291	6	True				
ANR	1891158	Identifier	opt		1890291	0					
ANR	1891159	ReturnType	int		1890291	1					
ANR	1891160	Identifier	_my_getopt_internal		1890291	2					
ANR	1891161	ParameterList	"int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind , int long_only"		1890291	3					
ANR	1891162	Parameter	int argc	142:24:4504:4511	1890291	0	True				
ANR	1891163	ParameterType	int		1890291	0					
ANR	1891164	Identifier	argc		1890291	1					
ANR	1891165	Parameter	char * argv [ ]	142:34:4514:4526	1890291	1	True				
ANR	1891166	ParameterType	char * [ ]		1890291	0					
ANR	1891167	Identifier	argv		1890291	1					
ANR	1891168	Parameter	const char * shortopts	142:49:4529:4549	1890291	2	True				
ANR	1891169	ParameterType	const char *		1890291	0					
ANR	1891170	Identifier	shortopts		1890291	1					
ANR	1891171	Parameter	const struct option * longopts	143:21:4573:4601	1890291	3	True				
ANR	1891172	ParameterType	const struct option *		1890291	0					
ANR	1891173	Identifier	longopts		1890291	1					
ANR	1891174	Parameter	int * longind	143:52:4604:4615	1890291	4	True				
ANR	1891175	ParameterType	int *		1890291	0					
ANR	1891176	Identifier	longind		1890291	1					
ANR	1891177	Parameter	int long_only	144:21:4639:4651	1890291	5	True				
ANR	1891178	ParameterType	int		1890291	0					
ANR	1891179	Identifier	long_only		1890291	1					
ANR	1891180	CFGEntryNode	ENTRY		1890291		True				
ANR	1891181	CFGExitNode	EXIT		1890291		True				
ANR	1891182	Symbol	_my_getopt_internal		1890291						
ANR	1891183	Symbol	* * found		1890291						
ANR	1891184	Symbol	* argv		1890291						
ANR	1891185	Symbol	* ( longopts [ found ] . flag )		1890291						
ANR	1891186	Symbol	colon_mode		1890291						
ANR	1891187	Symbol	my_opterr		1890291						
ANR	1891188	Symbol	mode		1890291						
ANR	1891189	Symbol	longopts [ found ] . has_arg		1890291						
ANR	1891190	Symbol	strncmp		1890291						
ANR	1891191	Symbol	strlen		1890291						
ANR	1891192	Symbol	tmp		1890291						
ANR	1891193	Symbol	* shortoff		1890291						
ANR	1891194	Symbol	* * argv		1890291						
ANR	1891195	Symbol	my_getopt		1890291						
ANR	1891196	Symbol	* * i		1890291						
ANR	1891197	Symbol	offset		1890291						
ANR	1891198	Symbol	longind		1890291						
ANR	1891199	Symbol	longopts [ ind ] . name		1890291						
ANR	1891200	Symbol	stderr		1890291						
ANR	1891201	Symbol	long_only		1890291						
ANR	1891202	Symbol	opt		1890291						
ANR	1891203	Symbol	* * longopts		1890291						
ANR	1891204	Symbol	* my_optind		1890291						
ANR	1891205	Symbol	* ind		1890291						
ANR	1891206	Symbol	shortopts		1890291						
ANR	1891207	Symbol	* charind		1890291						
ANR	1891208	Symbol	* found		1890291						
ANR	1891209	Symbol	longopts [ found ] . val		1890291						
ANR	1891210	Symbol	charind		1890291						
ANR	1891211	Symbol	* longind		1890291						
ANR	1891212	Symbol	argv		1890291						
ANR	1891213	Symbol	longopts [ found ] . name		1890291						
ANR	1891214	Symbol	found		1890291						
ANR	1891215	Symbol	* longopts		1890291						
ANR	1891216	Symbol	ind		1890291						
ANR	1891217	Symbol	getenv		1890291						
ANR	1891218	Symbol	my_optopt		1890291						
ANR	1891219	Symbol	argc		1890291						
ANR	1891220	Symbol	* * my_optind		1890291						
ANR	1891221	Symbol	c		1890291						
ANR	1891222	Symbol	shortoff		1890291						
ANR	1891223	Symbol	i		1890291						
ANR	1891224	Symbol	j		1890291						
ANR	1891225	Symbol	k		1890291						
ANR	1891226	Symbol	hits		1890291						
ANR	1891227	Symbol	* i		1890291						
ANR	1891228	Symbol	my_optind		1890291						
ANR	1891229	Symbol	* k		1890291						
ANR	1891230	Symbol	* shortopts		1890291						
ANR	1891231	Symbol	* longopts [ found ] . flag		1890291						
ANR	1891232	Symbol	longopts		1890291						
ANR	1891233	Symbol	longopts [ found ] . flag		1890291						
ANR	1891234	Symbol	my_optarg		1890291						
ANR	1891235	Function	my_getopt_long	268:0:8635:8840							
ANR	1891236	FunctionDef	"my_getopt_long (int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind)"		1891235	0					
ANR	1891237	CompoundStatement		270:0:8763:8840	1891235	0					
ANR	1891238	ReturnStatement	"return _my_getopt_internal ( argc , argv , shortopts , longopts , longind , 0 ) ;"	271:2:8767:8838	1891235	0	True				
ANR	1891239	CallExpression	"_my_getopt_internal ( argc , argv , shortopts , longopts , longind , 0 )"		1891235	0					
ANR	1891240	Callee	_my_getopt_internal		1891235	0					
ANR	1891241	Identifier	_my_getopt_internal		1891235	0					
ANR	1891242	ArgumentList	argc		1891235	1					
ANR	1891243	Argument	argc		1891235	0					
ANR	1891244	Identifier	argc		1891235	0					
ANR	1891245	Argument	argv		1891235	1					
ANR	1891246	Identifier	argv		1891235	0					
ANR	1891247	Argument	shortopts		1891235	2					
ANR	1891248	Identifier	shortopts		1891235	0					
ANR	1891249	Argument	longopts		1891235	3					
ANR	1891250	Identifier	longopts		1891235	0					
ANR	1891251	Argument	longind		1891235	4					
ANR	1891252	Identifier	longind		1891235	0					
ANR	1891253	Argument	0		1891235	5					
ANR	1891254	PrimaryExpression	0		1891235	0					
ANR	1891255	ReturnType	int		1891235	1					
ANR	1891256	Identifier	my_getopt_long		1891235	2					
ANR	1891257	ParameterList	"int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind"		1891235	3					
ANR	1891258	Parameter	int argc	268:19:8654:8661	1891235	0	True				
ANR	1891259	ParameterType	int		1891235	0					
ANR	1891260	Identifier	argc		1891235	1					
ANR	1891261	Parameter	char * argv [ ]	268:29:8664:8676	1891235	1	True				
ANR	1891262	ParameterType	char * [ ]		1891235	0					
ANR	1891263	Identifier	argv		1891235	1					
ANR	1891264	Parameter	const char * shortopts	268:44:8679:8699	1891235	2	True				
ANR	1891265	ParameterType	const char *		1891235	0					
ANR	1891266	Identifier	shortopts		1891235	1					
ANR	1891267	Parameter	const struct option * longopts	269:16:8718:8746	1891235	3	True				
ANR	1891268	ParameterType	const struct option *		1891235	0					
ANR	1891269	Identifier	longopts		1891235	1					
ANR	1891270	Parameter	int * longind	269:47:8749:8760	1891235	4	True				
ANR	1891271	ParameterType	int *		1891235	0					
ANR	1891272	Identifier	longind		1891235	1					
ANR	1891273	CFGEntryNode	ENTRY		1891235		True				
ANR	1891274	CFGExitNode	EXIT		1891235		True				
ANR	1891275	Symbol	argc		1891235						
ANR	1891276	Symbol	_my_getopt_internal		1891235						
ANR	1891277	Symbol	shortopts		1891235						
ANR	1891278	Symbol	longind		1891235						
ANR	1891279	Symbol	longopts		1891235						
ANR	1891280	Symbol	argv		1891235						
ANR	1891281	Function	my_getopt_long_only	274:0:8843:9053							
ANR	1891282	FunctionDef	"my_getopt_long_only (int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind)"		1891281	0					
ANR	1891283	CompoundStatement		276:0:8976:9053	1891281	0					
ANR	1891284	ReturnStatement	"return _my_getopt_internal ( argc , argv , shortopts , longopts , longind , 1 ) ;"	277:2:8980:9051	1891281	0	True				
ANR	1891285	CallExpression	"_my_getopt_internal ( argc , argv , shortopts , longopts , longind , 1 )"		1891281	0					
ANR	1891286	Callee	_my_getopt_internal		1891281	0					
ANR	1891287	Identifier	_my_getopt_internal		1891281	0					
ANR	1891288	ArgumentList	argc		1891281	1					
ANR	1891289	Argument	argc		1891281	0					
ANR	1891290	Identifier	argc		1891281	0					
ANR	1891291	Argument	argv		1891281	1					
ANR	1891292	Identifier	argv		1891281	0					
ANR	1891293	Argument	shortopts		1891281	2					
ANR	1891294	Identifier	shortopts		1891281	0					
ANR	1891295	Argument	longopts		1891281	3					
ANR	1891296	Identifier	longopts		1891281	0					
ANR	1891297	Argument	longind		1891281	4					
ANR	1891298	Identifier	longind		1891281	0					
ANR	1891299	Argument	1		1891281	5					
ANR	1891300	PrimaryExpression	1		1891281	0					
ANR	1891301	ReturnType	int		1891281	1					
ANR	1891302	Identifier	my_getopt_long_only		1891281	2					
ANR	1891303	ParameterList	"int argc , char * argv [ ] , const char * shortopts , const struct option * longopts , int * longind"		1891281	3					
ANR	1891304	Parameter	int argc	274:24:8867:8874	1891281	0	True				
ANR	1891305	ParameterType	int		1891281	0					
ANR	1891306	Identifier	argc		1891281	1					
ANR	1891307	Parameter	char * argv [ ]	274:34:8877:8889	1891281	1	True				
ANR	1891308	ParameterType	char * [ ]		1891281	0					
ANR	1891309	Identifier	argv		1891281	1					
ANR	1891310	Parameter	const char * shortopts	274:49:8892:8912	1891281	2	True				
ANR	1891311	ParameterType	const char *		1891281	0					
ANR	1891312	Identifier	shortopts		1891281	1					
ANR	1891313	Parameter	const struct option * longopts	275:16:8931:8959	1891281	3	True				
ANR	1891314	ParameterType	const struct option *		1891281	0					
ANR	1891315	Identifier	longopts		1891281	1					
ANR	1891316	Parameter	int * longind	275:47:8962:8973	1891281	4	True				
ANR	1891317	ParameterType	int *		1891281	0					
ANR	1891318	Identifier	longind		1891281	1					
ANR	1891319	CFGEntryNode	ENTRY		1891281		True				
ANR	1891320	CFGExitNode	EXIT		1891281		True				
ANR	1891321	Symbol	argc		1891281						
ANR	1891322	Symbol	_my_getopt_internal		1891281						
ANR	1891323	Symbol	shortopts		1891281						
ANR	1891324	Symbol	longind		1891281						
ANR	1891325	Symbol	longopts		1891281						
ANR	1891326	Symbol	argv		1891281						
