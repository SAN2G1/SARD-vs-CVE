command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	803216	File	data/converged/CVE-2011-4930_htcondor/collector_stats.cpp								
ANR	803217	Function	hashFunction	33:0:1121:1562							
ANR	803218	FunctionDef	hashFunction (const StatsHashKey & key)		803217	0					
ANR	803219	CompoundStatement		34:0:1180:1562	803217	0					
ANR	803220	IdentifierDeclStatement	unsigned int result = 0 ;	35:4:1186:1209	803217	0	True				
ANR	803221	IdentifierDecl	result = 0		803217	0					
ANR	803222	IdentifierDeclType	unsigned int		803217	0					
ANR	803223	Identifier	result		803217	1					
ANR	803224	AssignmentExpression	result = 0		803217	2		=			
ANR	803225	Identifier	result		803217	0					
ANR	803226	PrimaryExpression	0		803217	1					
ANR	803227	IdentifierDeclStatement	const char * p ;	36:1:1212:1225	803217	1	True				
ANR	803228	IdentifierDecl	* p		803217	0					
ANR	803229	IdentifierDeclType	const char *		803217	0					
ANR	803230	Identifier	p		803217	1					
ANR	803231	ForStatement	for ( p = key . type . Value ( ) ; p && * p ; result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) ) )		803217	2					
ANR	803232	ForInit	p = key . type . Value ( ) ;	38:9:1237:1257	803217	0	True				
ANR	803233	AssignmentExpression	p = key . type . Value ( )		803217	0		=			
ANR	803234	Identifier	p		803217	0					
ANR	803235	CallExpression	key . type . Value ( )		803217	1					
ANR	803236	Callee	key . type . Value		803217	0					
ANR	803237	MemberAccess	key . type . Value		803217	0					
ANR	803238	MemberAccess	key . type		803217	0					
ANR	803239	Identifier	key		803217	0					
ANR	803240	Identifier	type		803217	1					
ANR	803241	Identifier	Value		803217	1					
ANR	803242	ArgumentList			803217	1					
ANR	803243	Condition	p && * p	38:31:1259:1265	803217	1	True				
ANR	803244	AndExpression	p && * p		803217	0		&&			
ANR	803245	Identifier	p		803217	0					
ANR	803246	UnaryOperationExpression	* p		803217	1					
ANR	803247	UnaryOperator	*		803217	0					
ANR	803248	Identifier	p		803217	1					
ANR	803249	AssignmentExpression	result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )	39:6:1274:1327	803217	2	True	=			
ANR	803250	Identifier	result		803217	0					
ANR	803251	AdditiveExpression	( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803252	ShiftExpression	result << 5		803217	0		<<			
ANR	803253	Identifier	result		803217	0					
ANR	803254	PrimaryExpression	5		803217	1					
ANR	803255	AdditiveExpression	result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803256	Identifier	result		803217	0					
ANR	803257	CastExpression	( unsigned int ) ( * ( p ++ ) )		803217	1					
ANR	803258	CastTarget	unsigned int		803217	0					
ANR	803259	UnaryOperationExpression	* ( p ++ )		803217	1					
ANR	803260	UnaryOperator	*		803217	0					
ANR	803261	PostIncDecOperationExpression	p ++		803217	1					
ANR	803262	Identifier	p		803217	0					
ANR	803263	IncDec	++		803217	1					
ANR	803264	ExpressionStatement		39:61:1329:1329	803217	3	True				
ANR	803265	ForStatement	for ( p = key . name . Value ( ) ; p && * p ; result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) ) )		803217	3					
ANR	803266	ForInit	p = key . name . Value ( ) ;	41:9:1341:1361	803217	0	True				
ANR	803267	AssignmentExpression	p = key . name . Value ( )		803217	0		=			
ANR	803268	Identifier	p		803217	0					
ANR	803269	CallExpression	key . name . Value ( )		803217	1					
ANR	803270	Callee	key . name . Value		803217	0					
ANR	803271	MemberAccess	key . name . Value		803217	0					
ANR	803272	MemberAccess	key . name		803217	0					
ANR	803273	Identifier	key		803217	0					
ANR	803274	Identifier	name		803217	1					
ANR	803275	Identifier	Value		803217	1					
ANR	803276	ArgumentList			803217	1					
ANR	803277	Condition	p && * p	41:31:1363:1369	803217	1	True				
ANR	803278	AndExpression	p && * p		803217	0		&&			
ANR	803279	Identifier	p		803217	0					
ANR	803280	UnaryOperationExpression	* p		803217	1					
ANR	803281	UnaryOperator	*		803217	0					
ANR	803282	Identifier	p		803217	1					
ANR	803283	AssignmentExpression	result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )	42:6:1378:1431	803217	2	True	=			
ANR	803284	Identifier	result		803217	0					
ANR	803285	AdditiveExpression	( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803286	ShiftExpression	result << 5		803217	0		<<			
ANR	803287	Identifier	result		803217	0					
ANR	803288	PrimaryExpression	5		803217	1					
ANR	803289	AdditiveExpression	result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803290	Identifier	result		803217	0					
ANR	803291	CastExpression	( unsigned int ) ( * ( p ++ ) )		803217	1					
ANR	803292	CastTarget	unsigned int		803217	0					
ANR	803293	UnaryOperationExpression	* ( p ++ )		803217	1					
ANR	803294	UnaryOperator	*		803217	0					
ANR	803295	PostIncDecOperationExpression	p ++		803217	1					
ANR	803296	Identifier	p		803217	0					
ANR	803297	IncDec	++		803217	1					
ANR	803298	ExpressionStatement		42:61:1433:1433	803217	3	True				
ANR	803299	ForStatement	for ( p = key . ip_addr . Value ( ) ; p && * p ; result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) ) )		803217	4					
ANR	803300	ForInit	p = key . ip_addr . Value ( ) ;	44:9:1445:1468	803217	0	True				
ANR	803301	AssignmentExpression	p = key . ip_addr . Value ( )		803217	0		=			
ANR	803302	Identifier	p		803217	0					
ANR	803303	CallExpression	key . ip_addr . Value ( )		803217	1					
ANR	803304	Callee	key . ip_addr . Value		803217	0					
ANR	803305	MemberAccess	key . ip_addr . Value		803217	0					
ANR	803306	MemberAccess	key . ip_addr		803217	0					
ANR	803307	Identifier	key		803217	0					
ANR	803308	Identifier	ip_addr		803217	1					
ANR	803309	Identifier	Value		803217	1					
ANR	803310	ArgumentList			803217	1					
ANR	803311	Condition	p && * p	44:34:1470:1476	803217	1	True				
ANR	803312	AndExpression	p && * p		803217	0		&&			
ANR	803313	Identifier	p		803217	0					
ANR	803314	UnaryOperationExpression	* p		803217	1					
ANR	803315	UnaryOperator	*		803217	0					
ANR	803316	Identifier	p		803217	1					
ANR	803317	AssignmentExpression	result = ( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )	45:6:1485:1538	803217	2	True	=			
ANR	803318	Identifier	result		803217	0					
ANR	803319	AdditiveExpression	( result << 5 ) + result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803320	ShiftExpression	result << 5		803217	0		<<			
ANR	803321	Identifier	result		803217	0					
ANR	803322	PrimaryExpression	5		803217	1					
ANR	803323	AdditiveExpression	result + ( unsigned int ) ( * ( p ++ ) )		803217	1		+			
ANR	803324	Identifier	result		803217	0					
ANR	803325	CastExpression	( unsigned int ) ( * ( p ++ ) )		803217	1					
ANR	803326	CastTarget	unsigned int		803217	0					
ANR	803327	UnaryOperationExpression	* ( p ++ )		803217	1					
ANR	803328	UnaryOperator	*		803217	0					
ANR	803329	PostIncDecOperationExpression	p ++		803217	1					
ANR	803330	Identifier	p		803217	0					
ANR	803331	IncDec	++		803217	1					
ANR	803332	ExpressionStatement		45:61:1540:1540	803217	3	True				
ANR	803333	ReturnStatement	return result ;	47:4:1547:1560	803217	5	True				
ANR	803334	Identifier	result		803217	0					
ANR	803335	ReturnType	static unsigned int		803217	1					
ANR	803336	Identifier	hashFunction		803217	2					
ANR	803337	ParameterList	const StatsHashKey & key		803217	3					
ANR	803338	Parameter	const StatsHashKey & key	33:34:1155:1177	803217	0	True				
ANR	803339	ParameterType	const StatsHashKey &		803217	0					
ANR	803340	Identifier	key		803217	1					
ANR	803341	CFGEntryNode	ENTRY		803217		True				
ANR	803342	CFGExitNode	EXIT		803217		True				
ANR	803343	Symbol	result		803217						
ANR	803344	Symbol	p		803217						
ANR	803345	Symbol	* ( p ++ )		803217						
ANR	803346	Symbol	key . ip_addr		803217						
ANR	803347	Symbol	key . name		803217						
ANR	803348	Symbol	key . type . Value		803217						
ANR	803349	Symbol	key . ip_addr . Value		803217						
ANR	803350	Symbol	* p		803217						
ANR	803351	Symbol	key . type		803217						
ANR	803352	Symbol	key		803217						
ANR	803353	Symbol	key . name . Value		803217						
ANR	803354	Function	operator ==	50:0:1565:1738							
ANR	803355	FunctionDef	"operator == (const StatsHashKey & lhs , const StatsHashKey & rhs)"		803354	0					
ANR	803356	CompoundStatement		51:0:1632:1738	803354	0					
ANR	803357	ReturnStatement	return ( ( lhs . name == rhs . name ) && ( lhs . ip_addr == rhs . ip_addr ) && ( lhs . type == rhs . type ) ) ;	52:4:1638:1736	803354	0	True				
ANR	803358	AndExpression	( lhs . name == rhs . name ) && ( lhs . ip_addr == rhs . ip_addr ) && ( lhs . type == rhs . type )		803354	0		&&			
ANR	803359	EqualityExpression	lhs . name == rhs . name		803354	0		==			
ANR	803360	MemberAccess	lhs . name		803354	0					
ANR	803361	Identifier	lhs		803354	0					
ANR	803362	Identifier	name		803354	1					
ANR	803363	MemberAccess	rhs . name		803354	1					
ANR	803364	Identifier	rhs		803354	0					
ANR	803365	Identifier	name		803354	1					
ANR	803366	AndExpression	( lhs . ip_addr == rhs . ip_addr ) && ( lhs . type == rhs . type )		803354	1		&&			
ANR	803367	EqualityExpression	lhs . ip_addr == rhs . ip_addr		803354	0		==			
ANR	803368	MemberAccess	lhs . ip_addr		803354	0					
ANR	803369	Identifier	lhs		803354	0					
ANR	803370	Identifier	ip_addr		803354	1					
ANR	803371	MemberAccess	rhs . ip_addr		803354	1					
ANR	803372	Identifier	rhs		803354	0					
ANR	803373	Identifier	ip_addr		803354	1					
ANR	803374	EqualityExpression	lhs . type == rhs . type		803354	1		==			
ANR	803375	MemberAccess	lhs . type		803354	0					
ANR	803376	Identifier	lhs		803354	0					
ANR	803377	Identifier	type		803354	1					
ANR	803378	MemberAccess	rhs . type		803354	1					
ANR	803379	Identifier	rhs		803354	0					
ANR	803380	Identifier	type		803354	1					
ANR	803381	ReturnType	bool		803354	1					
ANR	803382	Identifier	operator ==		803354	2					
ANR	803383	ParameterList	"const StatsHashKey & lhs , const StatsHashKey & rhs"		803354	3					
ANR	803384	Parameter	const StatsHashKey & lhs	50:17:1582:1604	803354	0	True				
ANR	803385	ParameterType	const StatsHashKey &		803354	0					
ANR	803386	Identifier	lhs		803354	1					
ANR	803387	Parameter	const StatsHashKey & rhs	50:42:1607:1629	803354	1	True				
ANR	803388	ParameterType	const StatsHashKey &		803354	0					
ANR	803389	Identifier	rhs		803354	1					
ANR	803390	CFGEntryNode	ENTRY		803354		True				
ANR	803391	CFGExitNode	EXIT		803354		True				
ANR	803392	Symbol	rhs . ip_addr		803354						
ANR	803393	Symbol	rhs . name		803354						
ANR	803394	Symbol	lhs		803354						
ANR	803395	Symbol	rhs . type		803354						
ANR	803396	Symbol	lhs . name		803354						
ANR	803397	Symbol	lhs . type		803354						
ANR	803398	Symbol	rhs		803354						
ANR	803399	Symbol	lhs . ip_addr		803354						
ANR	803400	Function	CollectorBaseStats :: CollectorBaseStats	64:0:1896:2541							
ANR	803401	FunctionDef	CollectorBaseStats :: CollectorBaseStats (int history_size)		803400	0					
ANR	803402	CompoundStatement		65:0:1956:2541	803400	0					
ANR	803403	ExpressionStatement	historySize = history_size	67:1:1984:2010	803400	0	True				
ANR	803404	AssignmentExpression	historySize = history_size		803400	0		=			
ANR	803405	Identifier	historySize		803400	0					
ANR	803406	Identifier	history_size		803400	1					
ANR	803407	ExpressionStatement	historyWordBits = 8 * sizeof ( unsigned )	68:1:2013:2051	803400	1	True				
ANR	803408	AssignmentExpression	historyWordBits = 8 * sizeof ( unsigned )		803400	0		=			
ANR	803409	Identifier	historyWordBits		803400	0					
ANR	803410	MultiplicativeExpression	8 * sizeof ( unsigned )		803400	1		*			
ANR	803411	PrimaryExpression	8		803400	0					
ANR	803412	SizeofExpression	sizeof ( unsigned )		803400	1					
ANR	803413	Sizeof	sizeof		803400	0					
ANR	803414	SizeofOperand	unsigned		803400	1					
ANR	803415	IfStatement	if ( historySize )		803400	2					
ANR	803416	Condition	historySize	71:6:2090:2100	803400	0	True				
ANR	803417	Identifier	historySize		803400	0					
ANR	803418	CompoundStatement		7:20:147:147	803400	1					
ANR	803419	ExpressionStatement	historyWords = ( historySize + historyWordBits - 1 ) / historyWordBits	72:2:2108:2177	803400	0	True				
ANR	803420	AssignmentExpression	historyWords = ( historySize + historyWordBits - 1 ) / historyWordBits		803400	0		=			
ANR	803421	Identifier	historyWords		803400	0					
ANR	803422	MultiplicativeExpression	( historySize + historyWordBits - 1 ) / historyWordBits		803400	1		/			
ANR	803423	AdditiveExpression	historySize + historyWordBits - 1		803400	0		+			
ANR	803424	Identifier	historySize		803400	0					
ANR	803425	AdditiveExpression	historyWordBits - 1		803400	1		-			
ANR	803426	Identifier	historyWordBits		803400	0					
ANR	803427	PrimaryExpression	1		803400	1					
ANR	803428	Identifier	historyWordBits		803400	1					
ANR	803429	ExpressionStatement	historyMaxbit = historyWordBits * historyWords - 1	73:2:2181:2231	803400	1	True				
ANR	803430	AssignmentExpression	historyMaxbit = historyWordBits * historyWords - 1		803400	0		=			
ANR	803431	Identifier	historyMaxbit		803400	0					
ANR	803432	AdditiveExpression	historyWordBits * historyWords - 1		803400	1		-			
ANR	803433	MultiplicativeExpression	historyWordBits * historyWords		803400	0		*			
ANR	803434	Identifier	historyWordBits		803400	0					
ANR	803435	Identifier	historyWords		803400	1					
ANR	803436	PrimaryExpression	1		803400	1					
ANR	803437	ExpressionStatement	historyBuffer = new unsigned [ historyWords ]	74:2:2235:2277	803400	2	True				
ANR	803438	AssignmentExpression	historyBuffer = new unsigned [ historyWords ]		803400	0		=			
ANR	803439	Identifier	historyBuffer		803400	0					
ANR	803440	Identifier	historyWords		803400	1					
ANR	803441	ExpressionStatement	historyBitnum = 0	75:2:2281:2298	803400	3	True				
ANR	803442	AssignmentExpression	historyBitnum = 0		803400	0		=			
ANR	803443	Identifier	historyBitnum		803400	0					
ANR	803444	PrimaryExpression	0		803400	1					
ANR	803445	ElseStatement	else		803400	0					
ANR	803446	CompoundStatement		12:8:351:351	803400	0					
ANR	803447	ExpressionStatement	historyBuffer = NULL	77:2:2312:2332	803400	0	True				
ANR	803448	AssignmentExpression	historyBuffer = NULL		803400	0		=			
ANR	803449	Identifier	historyBuffer		803400	0					
ANR	803450	Identifier	NULL		803400	1					
ANR	803451	ExpressionStatement	historyWords = 0	78:2:2336:2352	803400	1	True				
ANR	803452	AssignmentExpression	historyWords = 0		803400	0		=			
ANR	803453	Identifier	historyWords		803400	0					
ANR	803454	PrimaryExpression	0		803400	1					
ANR	803455	ExpressionStatement	historyMaxbit = 0	79:2:2356:2373	803400	2	True				
ANR	803456	AssignmentExpression	historyMaxbit = 0		803400	0		=			
ANR	803457	Identifier	historyMaxbit		803400	0					
ANR	803458	PrimaryExpression	0		803400	1					
ANR	803459	ExpressionStatement	historyBitnum = 0	80:2:2377:2394	803400	3	True				
ANR	803460	AssignmentExpression	historyBitnum = 0		803400	0		=			
ANR	803461	Identifier	historyBitnum		803400	0					
ANR	803462	PrimaryExpression	0		803400	1					
ANR	803463	ExpressionStatement	updatesTotal = 0	84:1:2418:2434	803400	3	True				
ANR	803464	AssignmentExpression	updatesTotal = 0		803400	0		=			
ANR	803465	Identifier	updatesTotal		803400	0					
ANR	803466	PrimaryExpression	0		803400	1					
ANR	803467	ExpressionStatement	updatesSequenced = 0	85:1:2437:2457	803400	4	True				
ANR	803468	AssignmentExpression	updatesSequenced = 0		803400	0		=			
ANR	803469	Identifier	updatesSequenced		803400	0					
ANR	803470	PrimaryExpression	0		803400	1					
ANR	803471	ExpressionStatement	updatesDropped = 0	86:1:2460:2478	803400	5	True				
ANR	803472	AssignmentExpression	updatesDropped = 0		803400	0		=			
ANR	803473	Identifier	updatesDropped		803400	0					
ANR	803474	PrimaryExpression	0		803400	1					
ANR	803475	ExpressionStatement	reset ( )	89:1:2502:2510	803400	6	True				
ANR	803476	CallExpression	reset ( )		803400	0					
ANR	803477	Callee	reset		803400	0					
ANR	803478	Identifier	reset		803400	0					
ANR	803479	ArgumentList			803400	1					
ANR	803480	ExpressionStatement	m_recently_updated = true	91:1:2514:2539	803400	7	True				
ANR	803481	AssignmentExpression	m_recently_updated = true		803400	0		=			
ANR	803482	Identifier	m_recently_updated		803400	0					
ANR	803483	Identifier	true		803400	1					
ANR	803484	Identifier	CollectorBaseStats :: CollectorBaseStats		803400	1					
ANR	803485	ParameterList	int history_size		803400	2					
ANR	803486	Parameter	int history_size	64:41:1937:1952	803400	0	True				
ANR	803487	ParameterType	int		803400	0					
ANR	803488	Identifier	history_size		803400	1					
ANR	803489	CFGEntryNode	ENTRY		803400		True				
ANR	803490	CFGExitNode	EXIT		803400		True				
ANR	803491	Symbol	history_size		803400						
ANR	803492	Symbol	updatesSequenced		803400						
ANR	803493	Symbol	NULL		803400						
ANR	803494	Symbol	historyWordBits		803400						
ANR	803495	Symbol	historyBuffer		803400						
ANR	803496	Symbol	historyMaxbit		803400						
ANR	803497	Symbol	historySize		803400						
ANR	803498	Symbol	historyWords		803400						
ANR	803499	Symbol	historyBitnum		803400						
ANR	803500	Symbol	updatesTotal		803400						
ANR	803501	Symbol	m_recently_updated		803400						
ANR	803502	Symbol	true		803400						
ANR	803503	Symbol	updatesDropped		803400						
ANR	803504	Function	CollectorBaseStats :: ~CollectorBaseStats	95:0:2558:2771							
ANR	803505	FunctionDef	CollectorBaseStats :: ~CollectorBaseStats ()		803504	0					
ANR	803506	CompoundStatement		96:0:2607:2771	803504	0					
ANR	803507	IfStatement	if ( historyBuffer )		803504	0					
ANR	803508	Condition	historyBuffer	98:6:2646:2658	803504	0	True				
ANR	803509	Identifier	historyBuffer		803504	0					
ANR	803510	CompoundStatement		3:22:54:54	803504	1					
ANR	803511	Statement	delete	100:2:2719:2724	803504	0	True				
ANR	803512	Statement	[	100:9:2726:2726	803504	1	True				
ANR	803513	Statement	]	100:10:2727:2727	803504	2	True				
ANR	803514	ExpressionStatement	historyBuffer	100:12:2729:2742	803504	3	True				
ANR	803515	Identifier	historyBuffer		803504	0					
ANR	803516	ExpressionStatement	historyBuffer = NULL	101:2:2746:2766	803504	4	True				
ANR	803517	AssignmentExpression	historyBuffer = NULL		803504	0		=			
ANR	803518	Identifier	historyBuffer		803504	0					
ANR	803519	Identifier	NULL		803504	1					
ANR	803520	Identifier	CollectorBaseStats :: ~CollectorBaseStats		803504	1					
ANR	803521	ParameterList			803504	2					
ANR	803522	CFGEntryNode	ENTRY		803504		True				
ANR	803523	CFGExitNode	EXIT		803504		True				
ANR	803524	Symbol	NULL		803504						
ANR	803525	Symbol	historyBuffer		803504						
ANR	803526	Function	CollectorBaseStats :: reset	106:0:2807:3033							
ANR	803527	FunctionDef	CollectorBaseStats :: reset ()		803526	0					
ANR	803528	CompoundStatement		108:0:2847:3033	803526	0					
ANR	803529	IfStatement	if ( historyBuffer )		803526	0					
ANR	803530	Condition	historyBuffer	110:6:2886:2898	803526	0	True				
ANR	803531	Identifier	historyBuffer		803526	0					
ANR	803532	CompoundStatement		3:22:54:54	803526	1					
ANR	803533	ExpressionStatement	"memset ( historyBuffer , 0 , historyWords * sizeof ( unsigned ) )"	111:2:2906:2965	803526	0	True				
ANR	803534	CallExpression	"memset ( historyBuffer , 0 , historyWords * sizeof ( unsigned ) )"		803526	0					
ANR	803535	Callee	memset		803526	0					
ANR	803536	Identifier	memset		803526	0					
ANR	803537	ArgumentList	historyBuffer		803526	1					
ANR	803538	Argument	historyBuffer		803526	0					
ANR	803539	Identifier	historyBuffer		803526	0					
ANR	803540	Argument	0		803526	1					
ANR	803541	PrimaryExpression	0		803526	0					
ANR	803542	Argument	historyWords * sizeof ( unsigned )		803526	2					
ANR	803543	MultiplicativeExpression	historyWords * sizeof ( unsigned )		803526	0		*			
ANR	803544	Identifier	historyWords		803526	0					
ANR	803545	SizeofExpression	sizeof ( unsigned )		803526	1					
ANR	803546	Sizeof	sizeof		803526	0					
ANR	803547	SizeofOperand	unsigned		803526	1					
ANR	803548	ExpressionStatement	updatesTotal = 0	113:1:2971:2987	803526	1	True				
ANR	803549	AssignmentExpression	updatesTotal = 0		803526	0		=			
ANR	803550	Identifier	updatesTotal		803526	0					
ANR	803551	PrimaryExpression	0		803526	1					
ANR	803552	ExpressionStatement	updatesSequenced = 0	114:1:2990:3010	803526	2	True				
ANR	803553	AssignmentExpression	updatesSequenced = 0		803526	0		=			
ANR	803554	Identifier	updatesSequenced		803526	0					
ANR	803555	PrimaryExpression	0		803526	1					
ANR	803556	ExpressionStatement	updatesDropped = 0	115:1:3013:3031	803526	3	True				
ANR	803557	AssignmentExpression	updatesDropped = 0		803526	0		=			
ANR	803558	Identifier	updatesDropped		803526	0					
ANR	803559	PrimaryExpression	0		803526	1					
ANR	803560	ReturnType	void		803526	1					
ANR	803561	Identifier	CollectorBaseStats :: reset		803526	2					
ANR	803562	ParameterList			803526	3					
ANR	803563	CFGEntryNode	ENTRY		803526		True				
ANR	803564	CFGExitNode	EXIT		803526		True				
ANR	803565	Symbol	updatesSequenced		803526						
ANR	803566	Symbol	updatesTotal		803526						
ANR	803567	Symbol	historyBuffer		803526						
ANR	803568	Symbol	updatesDropped		803526						
ANR	803569	Symbol	historyWords		803526						
ANR	803570	Function	CollectorBaseStats :: setHistorySize	119:0:3063:4057							
ANR	803571	FunctionDef	CollectorBaseStats :: setHistorySize (int new_size)		803570	0					
ANR	803572	CompoundStatement		121:0:3119:4057	803570	0					
ANR	803573	IdentifierDeclStatement	int required_words = ( ( new_size + historyWordBits - 1 ) / historyWordBits ) ;	122:1:3122:3201	803570	0	True				
ANR	803574	IdentifierDecl	required_words = ( ( new_size + historyWordBits - 1 ) / historyWordBits )		803570	0					
ANR	803575	IdentifierDeclType	int		803570	0					
ANR	803576	Identifier	required_words		803570	1					
ANR	803577	AssignmentExpression	required_words = ( ( new_size + historyWordBits - 1 ) / historyWordBits )		803570	2		=			
ANR	803578	Identifier	required_words		803570	0					
ANR	803579	MultiplicativeExpression	( new_size + historyWordBits - 1 ) / historyWordBits		803570	1		/			
ANR	803580	AdditiveExpression	new_size + historyWordBits - 1		803570	0		+			
ANR	803581	Identifier	new_size		803570	0					
ANR	803582	AdditiveExpression	historyWordBits - 1		803570	1		-			
ANR	803583	Identifier	historyWordBits		803570	0					
ANR	803584	PrimaryExpression	1		803570	1					
ANR	803585	Identifier	historyWordBits		803570	1					
ANR	803586	IfStatement	if ( new_size == historySize )		803570	1					
ANR	803587	Condition	new_size == historySize	126:6:3252:3274	803570	0	True				
ANR	803588	EqualityExpression	new_size == historySize		803570	0		==			
ANR	803589	Identifier	new_size		803570	0					
ANR	803590	Identifier	historySize		803570	1					
ANR	803591	CompoundStatement		6:32:158:158	803570	1					
ANR	803592	ReturnStatement	return 0 ;	127:2:3282:3290	803570	0	True				
ANR	803593	PrimaryExpression	0		803570	0					
ANR	803594	ElseStatement	else		803570	0					
ANR	803595	IfStatement	if ( 0 == new_size )		803570	0					
ANR	803596	Condition	0 == new_size	130:13:3337:3349	803570	0	True				
ANR	803597	EqualityExpression	0 == new_size		803570	0		==			
ANR	803598	PrimaryExpression	0		803570	0					
ANR	803599	Identifier	new_size		803570	1					
ANR	803600	CompoundStatement		10:29:233:233	803570	1					
ANR	803601	IfStatement	if ( historyBuffer )		803570	0					
ANR	803602	Condition	historyBuffer	131:7:3362:3374	803570	0	True				
ANR	803603	Identifier	historyBuffer		803570	0					
ANR	803604	CompoundStatement		11:22:257:257	803570	1					
ANR	803605	Statement	delete	132:3:3382:3387	803570	0	True				
ANR	803606	Statement	[	132:9:3388:3388	803570	1	True				
ANR	803607	Statement	]	132:10:3389:3389	803570	2	True				
ANR	803608	ExpressionStatement	historyBuffer	132:12:3391:3404	803570	3	True				
ANR	803609	Identifier	historyBuffer		803570	0					
ANR	803610	ExpressionStatement	historyBuffer = NULL	133:3:3409:3429	803570	4	True				
ANR	803611	AssignmentExpression	historyBuffer = NULL		803570	0		=			
ANR	803612	Identifier	historyBuffer		803570	0					
ANR	803613	Identifier	NULL		803570	1					
ANR	803614	ExpressionStatement	historySize = historyWords = 0	134:3:3434:3464	803570	5	True				
ANR	803615	AssignmentExpression	historySize = historyWords = 0		803570	0		=			
ANR	803616	Identifier	historySize		803570	0					
ANR	803617	AssignmentExpression	historyWords = 0		803570	1		=			
ANR	803618	Identifier	historyWords		803570	0					
ANR	803619	PrimaryExpression	0		803570	1					
ANR	803620	ExpressionStatement	historyMaxbit = 0	135:3:3469:3486	803570	6	True				
ANR	803621	AssignmentExpression	historyMaxbit = 0		803570	0		=			
ANR	803622	Identifier	historyMaxbit		803570	0					
ANR	803623	PrimaryExpression	0		803570	1					
ANR	803624	ReturnStatement	return 0 ;	137:2:3494:3502	803570	1	True				
ANR	803625	PrimaryExpression	0		803570	0					
ANR	803626	ElseStatement	else		803570	0					
ANR	803627	IfStatement	if ( required_words <= historyWords )		803570	0					
ANR	803628	Condition	required_words <= historyWords	140:13:3562:3591	803570	0	True				
ANR	803629	RelationalExpression	required_words <= historyWords		803570	0		<=			
ANR	803630	Identifier	required_words		803570	0					
ANR	803631	Identifier	historyWords		803570	1					
ANR	803632	CompoundStatement		20:46:475:475	803570	1					
ANR	803633	ExpressionStatement	historySize = new_size	141:2:3599:3621	803570	0	True				
ANR	803634	AssignmentExpression	historySize = new_size		803570	0		=			
ANR	803635	Identifier	historySize		803570	0					
ANR	803636	Identifier	new_size		803570	1					
ANR	803637	ReturnStatement	return 0 ;	142:2:3625:3633	803570	1	True				
ANR	803638	PrimaryExpression	0		803570	0					
ANR	803639	ElseStatement	else		803570	0					
ANR	803640	CompoundStatement		26:2:568:617	803570	0					
ANR	803641	IdentifierDeclStatement	unsigned * newbuf = new unsigned [ required_words ] ;	146:2:3688:3737	803570	0	True				
ANR	803642	IdentifierDecl	* newbuf = new unsigned [ required_words ]		803570	0					
ANR	803643	IdentifierDeclType	unsigned *		803570	0					
ANR	803644	Identifier	newbuf		803570	1					
ANR	803645	AssignmentExpression	* newbuf = new unsigned [ required_words ]		803570	2		=			
ANR	803646	Identifier	required_words		803570	0					
ANR	803647	Identifier	required_words		803570	1					
ANR	803648	ExpressionStatement	"memset ( newbuf , 0 , required_words * sizeof ( unsigned ) )"	147:2:3741:3795	803570	1	True				
ANR	803649	CallExpression	"memset ( newbuf , 0 , required_words * sizeof ( unsigned ) )"		803570	0					
ANR	803650	Callee	memset		803570	0					
ANR	803651	Identifier	memset		803570	0					
ANR	803652	ArgumentList	newbuf		803570	1					
ANR	803653	Argument	newbuf		803570	0					
ANR	803654	Identifier	newbuf		803570	0					
ANR	803655	Argument	0		803570	1					
ANR	803656	PrimaryExpression	0		803570	0					
ANR	803657	Argument	required_words * sizeof ( unsigned )		803570	2					
ANR	803658	MultiplicativeExpression	required_words * sizeof ( unsigned )		803570	0		*			
ANR	803659	Identifier	required_words		803570	0					
ANR	803660	SizeofExpression	sizeof ( unsigned )		803570	1					
ANR	803661	Sizeof	sizeof		803570	0					
ANR	803662	SizeofOperand	unsigned		803570	1					
ANR	803663	IfStatement	if ( historyBuffer )		803570	2					
ANR	803664	Condition	historyBuffer	148:7:3804:3816	803570	0	True				
ANR	803665	Identifier	historyBuffer		803570	0					
ANR	803666	CompoundStatement		28:23:700:700	803570	1					
ANR	803667	ExpressionStatement	"memcpy ( newbuf , historyBuffer , historyWords )"	149:3:3825:3870	803570	0	True				
ANR	803668	CallExpression	"memcpy ( newbuf , historyBuffer , historyWords )"		803570	0					
ANR	803669	Callee	memcpy		803570	0					
ANR	803670	Identifier	memcpy		803570	0					
ANR	803671	ArgumentList	newbuf		803570	1					
ANR	803672	Argument	newbuf		803570	0					
ANR	803673	Identifier	newbuf		803570	0					
ANR	803674	Argument	historyBuffer		803570	1					
ANR	803675	Identifier	historyBuffer		803570	0					
ANR	803676	Argument	historyWords		803570	2					
ANR	803677	Identifier	historyWords		803570	0					
ANR	803678	Statement	delete	150:3:3875:3880	803570	1	True				
ANR	803679	Statement	[	150:9:3881:3881	803570	2	True				
ANR	803680	Statement	]	150:10:3882:3882	803570	3	True				
ANR	803681	ExpressionStatement	historyBuffer	150:12:3884:3897	803570	4	True				
ANR	803682	Identifier	historyBuffer		803570	0					
ANR	803683	ElseStatement	else		803570	0					
ANR	803684	CompoundStatement		31:9:788:788	803570	0					
ANR	803685	ExpressionStatement	historyBitnum = 0	152:3:3913:3930	803570	0	True				
ANR	803686	AssignmentExpression	historyBitnum = 0		803570	0		=			
ANR	803687	Identifier	historyBitnum		803570	0					
ANR	803688	PrimaryExpression	0		803570	1					
ANR	803689	ExpressionStatement	historyBuffer = newbuf	154:2:3938:3960	803570	3	True				
ANR	803690	AssignmentExpression	historyBuffer = newbuf		803570	0		=			
ANR	803691	Identifier	historyBuffer		803570	0					
ANR	803692	Identifier	newbuf		803570	1					
ANR	803693	ExpressionStatement	historySize = new_size	155:2:3964:3986	803570	4	True				
ANR	803694	AssignmentExpression	historySize = new_size		803570	0		=			
ANR	803695	Identifier	historySize		803570	0					
ANR	803696	Identifier	new_size		803570	1					
ANR	803697	ExpressionStatement	historyMaxbit = historyWordBits * historyWords - 1	156:2:3990:4040	803570	5	True				
ANR	803698	AssignmentExpression	historyMaxbit = historyWordBits * historyWords - 1		803570	0		=			
ANR	803699	Identifier	historyMaxbit		803570	0					
ANR	803700	AdditiveExpression	historyWordBits * historyWords - 1		803570	1		-			
ANR	803701	MultiplicativeExpression	historyWordBits * historyWords		803570	0		*			
ANR	803702	Identifier	historyWordBits		803570	0					
ANR	803703	Identifier	historyWords		803570	1					
ANR	803704	PrimaryExpression	1		803570	1					
ANR	803705	ReturnStatement	return 0 ;	159:1:4047:4055	803570	2	True				
ANR	803706	PrimaryExpression	0		803570	0					
ANR	803707	ReturnType	int		803570	1					
ANR	803708	Identifier	CollectorBaseStats :: setHistorySize		803570	2					
ANR	803709	ParameterList	int new_size		803570	3					
ANR	803710	Parameter	int new_size	120:37:3104:3115	803570	0	True				
ANR	803711	ParameterType	int		803570	0					
ANR	803712	Identifier	new_size		803570	1					
ANR	803713	CFGEntryNode	ENTRY		803570		True				
ANR	803714	CFGExitNode	EXIT		803570		True				
ANR	803715	Symbol	historyBitnum		803570						
ANR	803716	Symbol	NULL		803570						
ANR	803717	Symbol	new_size		803570						
ANR	803718	Symbol	required_words		803570						
ANR	803719	Symbol	newbuf		803570						
ANR	803720	Symbol	historyWordBits		803570						
ANR	803721	Symbol	historyBuffer		803570						
ANR	803722	Symbol	historyMaxbit		803570						
ANR	803723	Symbol	historySize		803570						
ANR	803724	Symbol	historyWords		803570						
ANR	803725	Function	CollectorBaseStats :: updateStats	163:0:4085:4423							
ANR	803726	FunctionDef	"CollectorBaseStats :: updateStats (bool sequenced , int dropped)"		803725	0					
ANR	803727	CompoundStatement		165:0:4153:4423	803725	0					
ANR	803728	ExpressionStatement	m_recently_updated = true	166:1:4156:4181	803725	0	True				
ANR	803729	AssignmentExpression	m_recently_updated = true		803725	0		=			
ANR	803730	Identifier	m_recently_updated		803725	0					
ANR	803731	Identifier	true		803725	1					
ANR	803732	ExpressionStatement	"storeStats ( sequenced , dropped )"	169:1:4207:4239	803725	1	True				
ANR	803733	CallExpression	"storeStats ( sequenced , dropped )"		803725	0					
ANR	803734	Callee	storeStats		803725	0					
ANR	803735	Identifier	storeStats		803725	0					
ANR	803736	ArgumentList	sequenced		803725	1					
ANR	803737	Argument	sequenced		803725	0					
ANR	803738	Identifier	sequenced		803725	0					
ANR	803739	Argument	dropped		803725	1					
ANR	803740	Identifier	dropped		803725	0					
ANR	803741	IfStatement	if ( dropped )		803725	2					
ANR	803742	Condition	dropped	173:6:4362:4368	803725	0	True				
ANR	803743	Identifier	dropped		803725	0					
ANR	803744	CompoundStatement		9:16:218:218	803725	1					
ANR	803745	ExpressionStatement	"storeStats ( true , 0 )"	174:2:4376:4397	803725	0	True				
ANR	803746	CallExpression	"storeStats ( true , 0 )"		803725	0					
ANR	803747	Callee	storeStats		803725	0					
ANR	803748	Identifier	storeStats		803725	0					
ANR	803749	ArgumentList	true		803725	1					
ANR	803750	Argument	true		803725	0					
ANR	803751	Identifier	true		803725	0					
ANR	803752	Argument	0		803725	1					
ANR	803753	PrimaryExpression	0		803725	0					
ANR	803754	ReturnStatement	return 0 ;	178:1:4413:4421	803725	3	True				
ANR	803755	PrimaryExpression	0		803725	0					
ANR	803756	ReturnType	int		803725	1					
ANR	803757	Identifier	CollectorBaseStats :: updateStats		803725	2					
ANR	803758	ParameterList	"bool sequenced , int dropped"		803725	3					
ANR	803759	Parameter	bool sequenced	164:34:4123:4136	803725	0	True				
ANR	803760	ParameterType	bool		803725	0					
ANR	803761	Identifier	sequenced		803725	1					
ANR	803762	Parameter	int dropped	164:50:4139:4149	803725	1	True				
ANR	803763	ParameterType	int		803725	0					
ANR	803764	Identifier	dropped		803725	1					
ANR	803765	CFGEntryNode	ENTRY		803725		True				
ANR	803766	CFGExitNode	EXIT		803725		True				
ANR	803767	Symbol	m_recently_updated		803725						
ANR	803768	Symbol	dropped		803725						
ANR	803769	Symbol	true		803725						
ANR	803770	Symbol	sequenced		803725						
ANR	803771	Function	CollectorBaseStats :: storeStats	182:0:4451:5308							
ANR	803772	FunctionDef	"CollectorBaseStats :: storeStats (bool sequenced , int dropped)"		803771	0					
ANR	803773	CompoundStatement		184:0:4518:5308	803771	0					
ANR	803774	IdentifierDeclStatement	int count = 1 ;	185:1:4521:4535	803771	0	True				
ANR	803775	IdentifierDecl	count = 1		803771	0					
ANR	803776	IdentifierDeclType	int		803771	0					
ANR	803777	Identifier	count		803771	1					
ANR	803778	AssignmentExpression	count = 1		803771	2		=			
ANR	803779	Identifier	count		803771	0					
ANR	803780	PrimaryExpression	1		803771	1					
ANR	803781	IfStatement	if ( sequenced )		803771	1					
ANR	803782	Condition	sequenced	186:6:4543:4551	803771	0	True				
ANR	803783	Identifier	sequenced		803771	0					
ANR	803784	CompoundStatement		3:18:36:36	803771	1					
ANR	803785	IfStatement	if ( dropped )		803771	0					
ANR	803786	Condition	dropped	187:7:4564:4570	803771	0	True				
ANR	803787	Identifier	dropped		803771	0					
ANR	803788	CompoundStatement		4:17:55:55	803771	1					
ANR	803789	ExpressionStatement	updatesSequenced += dropped	188:3:4579:4606	803771	0	True				
ANR	803790	AssignmentExpression	updatesSequenced += dropped		803771	0		+=			
ANR	803791	Identifier	updatesSequenced		803771	0					
ANR	803792	Identifier	dropped		803771	1					
ANR	803793	ExpressionStatement	count = dropped	189:3:4611:4626	803771	1	True				
ANR	803794	AssignmentExpression	count = dropped		803771	0		=			
ANR	803795	Identifier	count		803771	0					
ANR	803796	Identifier	dropped		803771	1					
ANR	803797	ElseStatement	else		803771	0					
ANR	803798	CompoundStatement		7:9:118:118	803771	0					
ANR	803799	ExpressionStatement	updatesSequenced ++	191:3:4642:4660	803771	0	True				
ANR	803800	PostIncDecOperationExpression	updatesSequenced ++		803771	0					
ANR	803801	Identifier	updatesSequenced		803771	0					
ANR	803802	IncDec	++		803771	1					
ANR	803803	ExpressionStatement	updatesDropped += dropped	194:1:4670:4695	803771	2	True				
ANR	803804	AssignmentExpression	updatesDropped += dropped		803771	0		+=			
ANR	803805	Identifier	updatesDropped		803771	0					
ANR	803806	Identifier	dropped		803771	1					
ANR	803807	ExpressionStatement	updatesTotal ++	195:1:4698:4712	803771	3	True				
ANR	803808	PostIncDecOperationExpression	updatesTotal ++		803771	0					
ANR	803809	Identifier	updatesTotal		803771	0					
ANR	803810	IncDec	++		803771	1					
ANR	803811	IfStatement	if ( historyBuffer )		803771	4					
ANR	803812	Condition	historyBuffer	198:6:4751:4763	803771	0	True				
ANR	803813	Identifier	historyBuffer		803771	0					
ANR	803814	CompoundStatement		16:2:252:267	803771	1					
ANR	803815	IdentifierDeclStatement	int update_num ;	199:2:4771:4786	803771	0	True				
ANR	803816	IdentifierDecl	update_num		803771	0					
ANR	803817	IdentifierDeclType	int		803771	0					
ANR	803818	Identifier	update_num		803771	1					
ANR	803819	ForStatement	for ( update_num = 0 ; update_num < count ; update_num ++ )		803771	1					
ANR	803820	ForInit	update_num = 0 ;	202:8:4860:4874	803771	0	True				
ANR	803821	AssignmentExpression	update_num = 0		803771	0		=			
ANR	803822	Identifier	update_num		803771	0					
ANR	803823	PrimaryExpression	0		803771	1					
ANR	803824	Condition	update_num < count	202:25:4877:4894	803771	1	True				
ANR	803825	RelationalExpression	update_num < count		803771	0		<			
ANR	803826	Identifier	update_num		803771	0					
ANR	803827	Identifier	count		803771	1					
ANR	803828	PostIncDecOperationExpression	update_num ++	202:45:4897:4908	803771	2	True				
ANR	803829	Identifier	update_num		803771	0					
ANR	803830	IncDec	++		803771	1					
ANR	803831	CompoundStatement		22:3:511:542	803771	3					
ANR	803832	IdentifierDeclStatement	unsigned word_num = historyBitnum / historyWordBits ;	203:3:4917:4969	803771	0	True				
ANR	803833	IdentifierDecl	word_num = historyBitnum / historyWordBits		803771	0					
ANR	803834	IdentifierDeclType	unsigned		803771	0					
ANR	803835	Identifier	word_num		803771	1					
ANR	803836	AssignmentExpression	word_num = historyBitnum / historyWordBits		803771	2		=			
ANR	803837	Identifier	word_num		803771	0					
ANR	803838	MultiplicativeExpression	historyBitnum / historyWordBits		803771	1		/			
ANR	803839	Identifier	historyBitnum		803771	0					
ANR	803840	Identifier	historyWordBits		803771	1					
ANR	803841	IdentifierDeclStatement	unsigned bit_num = historyBitnum % historyWordBits ;	204:3:4974:5025	803771	1	True				
ANR	803842	IdentifierDecl	bit_num = historyBitnum % historyWordBits		803771	0					
ANR	803843	IdentifierDeclType	unsigned		803771	0					
ANR	803844	Identifier	bit_num		803771	1					
ANR	803845	AssignmentExpression	bit_num = historyBitnum % historyWordBits		803771	2		=			
ANR	803846	Identifier	bit_num		803771	0					
ANR	803847	MultiplicativeExpression	historyBitnum % historyWordBits		803771	1		%			
ANR	803848	Identifier	historyBitnum		803771	0					
ANR	803849	Identifier	historyWordBits		803771	1					
ANR	803850	IdentifierDeclStatement	unsigned mask = ( 1 << bit_num ) ;	205:3:5030:5061	803771	2	True				
ANR	803851	IdentifierDecl	mask = ( 1 << bit_num )		803771	0					
ANR	803852	IdentifierDeclType	unsigned		803771	0					
ANR	803853	Identifier	mask		803771	1					
ANR	803854	AssignmentExpression	mask = ( 1 << bit_num )		803771	2		=			
ANR	803855	Identifier	mask		803771	0					
ANR	803856	ShiftExpression	1 << bit_num		803771	1		<<			
ANR	803857	PrimaryExpression	1		803771	0					
ANR	803858	Identifier	bit_num		803771	1					
ANR	803859	IfStatement	if ( dropped )		803771	3					
ANR	803860	Condition	dropped	208:8:5093:5099	803771	0	True				
ANR	803861	Identifier	dropped		803771	0					
ANR	803862	CompoundStatement		25:18:584:584	803771	1					
ANR	803863	ExpressionStatement	historyBuffer [ word_num ] |= mask	209:4:5109:5140	803771	0	True				
ANR	803864	AssignmentExpression	historyBuffer [ word_num ] |= mask		803771	0		|=			
ANR	803865	ArrayIndexing	historyBuffer [ word_num ]		803771	0					
ANR	803866	Identifier	historyBuffer		803771	0					
ANR	803867	Identifier	word_num		803771	1					
ANR	803868	Identifier	mask		803771	1					
ANR	803869	ElseStatement	else		803771	0					
ANR	803870	CompoundStatement		27:10:633:633	803771	0					
ANR	803871	ExpressionStatement	historyBuffer [ word_num ] &= ( ~ mask )	211:4:5158:5193	803771	0	True				
ANR	803872	AssignmentExpression	historyBuffer [ word_num ] &= ( ~ mask )		803771	0		&=			
ANR	803873	ArrayIndexing	historyBuffer [ word_num ]		803771	0					
ANR	803874	Identifier	historyBuffer		803771	0					
ANR	803875	Identifier	word_num		803771	1					
ANR	803876	UnaryOperationExpression	~ mask		803771	1					
ANR	803877	UnaryOperator	~		803771	0					
ANR	803878	Identifier	mask		803771	1					
ANR	803879	IfStatement	if ( ++ historyBitnum >= historyMaxbit )		803771	4					
ANR	803880	Condition	++ historyBitnum >= historyMaxbit	215:8:5224:5255	803771	0	True				
ANR	803881	RelationalExpression	++ historyBitnum >= historyMaxbit		803771	0		>=			
ANR	803882	UnaryExpression	++ historyBitnum		803771	0					
ANR	803883	IncDec	++		803771	0					
ANR	803884	Identifier	historyBitnum		803771	1					
ANR	803885	Identifier	historyMaxbit		803771	1					
ANR	803886	CompoundStatement		32:43:740:740	803771	1					
ANR	803887	ExpressionStatement	historyBitnum = 0	216:4:5265:5282	803771	0	True				
ANR	803888	AssignmentExpression	historyBitnum = 0		803771	0		=			
ANR	803889	Identifier	historyBitnum		803771	0					
ANR	803890	PrimaryExpression	0		803771	1					
ANR	803891	ReturnStatement	return 0 ;	221:1:5298:5306	803771	5	True				
ANR	803892	PrimaryExpression	0		803771	0					
ANR	803893	ReturnType	int		803771	1					
ANR	803894	Identifier	CollectorBaseStats :: storeStats		803771	2					
ANR	803895	ParameterList	"bool sequenced , int dropped"		803771	3					
ANR	803896	Parameter	bool sequenced	183:33:4488:4501	803771	0	True				
ANR	803897	ParameterType	bool		803771	0					
ANR	803898	Identifier	sequenced		803771	1					
ANR	803899	Parameter	int dropped	183:49:4504:4514	803771	1	True				
ANR	803900	ParameterType	int		803771	0					
ANR	803901	Identifier	dropped		803771	1					
ANR	803902	CFGEntryNode	ENTRY		803771		True				
ANR	803903	CFGExitNode	EXIT		803771		True				
ANR	803904	Symbol	updatesSequenced		803771						
ANR	803905	Symbol	* historyBuffer		803771						
ANR	803906	Symbol	word_num		803771						
ANR	803907	Symbol	dropped		803771						
ANR	803908	Symbol	count		803771						
ANR	803909	Symbol	historyBuffer		803771						
ANR	803910	Symbol	historyWordBits		803771						
ANR	803911	Symbol	bit_num		803771						
ANR	803912	Symbol	historyMaxbit		803771						
ANR	803913	Symbol	historyBitnum		803771						
ANR	803914	Symbol	updatesTotal		803771						
ANR	803915	Symbol	update_num		803771						
ANR	803916	Symbol	* word_num		803771						
ANR	803917	Symbol	sequenced		803771						
ANR	803918	Symbol	updatesDropped		803771						
ANR	803919	Symbol	mask		803771						
ANR	803920	Function	CollectorBaseStats :: getHistoryString	225:0:5346:6669							
ANR	803921	FunctionDef	CollectorBaseStats :: getHistoryString (char * buf)		803920	0					
ANR	803922	CompoundStatement		227:0:5404:6669	803920	0					
ANR	803923	IdentifierDeclStatement	unsigned outbit = 0 ;	228:1:5407:5427	803920	0	True				
ANR	803924	IdentifierDecl	outbit = 0		803920	0					
ANR	803925	IdentifierDeclType	unsigned		803920	0					
ANR	803926	Identifier	outbit		803920	1					
ANR	803927	AssignmentExpression	outbit = 0		803920	2		=			
ANR	803928	Identifier	outbit		803920	0					
ANR	803929	PrimaryExpression	0		803920	1					
ANR	803930	IdentifierDeclStatement	unsigned outword = 0x0 ;	229:1:5460:5483	803920	1	True				
ANR	803931	IdentifierDecl	outword = 0x0		803920	0					
ANR	803932	IdentifierDeclType	unsigned		803920	0					
ANR	803933	Identifier	outword		803920	1					
ANR	803934	AssignmentExpression	outword = 0x0		803920	2		=			
ANR	803935	Identifier	outword		803920	0					
ANR	803936	PrimaryExpression	0x0		803920	1					
ANR	803937	IdentifierDeclStatement	int outoff = 0 ;	230:1:5513:5529	803920	2	True				
ANR	803938	IdentifierDecl	outoff = 0		803920	0					
ANR	803939	IdentifierDeclType	int		803920	0					
ANR	803940	Identifier	outoff		803920	1					
ANR	803941	AssignmentExpression	outoff = 0		803920	2		=			
ANR	803942	Identifier	outoff		803920	0					
ANR	803943	PrimaryExpression	0		803920	1					
ANR	803944	IdentifierDeclStatement	int offset = historyBitnum ;	231:1:5567:5595	803920	3	True				
ANR	803945	IdentifierDecl	offset = historyBitnum		803920	0					
ANR	803946	IdentifierDeclType	int		803920	0					
ANR	803947	Identifier	offset		803920	1					
ANR	803948	AssignmentExpression	offset = historyBitnum		803920	2		=			
ANR	803949	Identifier	historyBitnum		803920	0					
ANR	803950	Identifier	historyBitnum		803920	1					
ANR	803951	IdentifierDeclStatement	int loop ;	232:1:5616:5626	803920	4	True				
ANR	803952	IdentifierDecl	loop		803920	0					
ANR	803953	IdentifierDeclType	int		803920	0					
ANR	803954	Identifier	loop		803920	1					
ANR	803955	IfStatement	if ( ( ! historyBuffer ) || ( ! historySize ) )		803920	5					
ANR	803956	Condition	( ! historyBuffer ) || ( ! historySize )	235:6:5701:5740	803920	0	True				
ANR	803957	OrExpression	( ! historyBuffer ) || ( ! historySize )		803920	0		||			
ANR	803958	UnaryOperationExpression	! historyBuffer		803920	0					
ANR	803959	UnaryOperator	!		803920	0					
ANR	803960	Identifier	historyBuffer		803920	1					
ANR	803961	UnaryOperationExpression	! historySize		803920	1					
ANR	803962	UnaryOperator	!		803920	0					
ANR	803963	Identifier	historySize		803920	1					
ANR	803964	CompoundStatement		9:49:339:339	803920	1					
ANR	803965	ExpressionStatement	* buf = '\\0'	236:2:5748:5759	803920	0	True				
ANR	803966	AssignmentExpression	* buf = '\\0'		803920	0		=			
ANR	803967	UnaryOperationExpression	* buf		803920	0					
ANR	803968	UnaryOperator	*		803920	0					
ANR	803969	Identifier	buf		803920	1					
ANR	803970	PrimaryExpression	'\\0'		803920	1					
ANR	803971	ReturnStatement	return buf ;	237:2:5763:5773	803920	1	True				
ANR	803972	Identifier	buf		803920	0					
ANR	803973	IfStatement	if ( -- offset < 0 )		803920	6					
ANR	803974	Condition	-- offset < 0	241:6:5817:5828	803920	0	True				
ANR	803975	RelationalExpression	-- offset < 0		803920	0		<			
ANR	803976	UnaryExpression	-- offset		803920	0					
ANR	803977	IncDec	--		803920	0					
ANR	803978	Identifier	offset		803920	1					
ANR	803979	PrimaryExpression	0		803920	1					
ANR	803980	CompoundStatement		15:21:427:427	803920	1					
ANR	803981	ExpressionStatement	offset = historyMaxbit	242:2:5836:5858	803920	0	True				
ANR	803982	AssignmentExpression	offset = historyMaxbit		803920	0		=			
ANR	803983	Identifier	offset		803920	0					
ANR	803984	Identifier	historyMaxbit		803920	1					
ANR	803985	IdentifierDeclStatement	int word_num = offset / historyWordBits ;	246:1:5910:5950	803920	7	True				
ANR	803986	IdentifierDecl	word_num = offset / historyWordBits		803920	0					
ANR	803987	IdentifierDeclType	int		803920	0					
ANR	803988	Identifier	word_num		803920	1					
ANR	803989	AssignmentExpression	word_num = offset / historyWordBits		803920	2		=			
ANR	803990	Identifier	word_num		803920	0					
ANR	803991	MultiplicativeExpression	offset / historyWordBits		803920	1		/			
ANR	803992	Identifier	offset		803920	0					
ANR	803993	Identifier	historyWordBits		803920	1					
ANR	803994	IdentifierDeclStatement	int bit_num = offset % historyWordBits ;	247:1:5953:5992	803920	8	True				
ANR	803995	IdentifierDecl	bit_num = offset % historyWordBits		803920	0					
ANR	803996	IdentifierDeclType	int		803920	0					
ANR	803997	Identifier	bit_num		803920	1					
ANR	803998	AssignmentExpression	bit_num = offset % historyWordBits		803920	2		=			
ANR	803999	Identifier	bit_num		803920	0					
ANR	804000	MultiplicativeExpression	offset % historyWordBits		803920	1		%			
ANR	804001	Identifier	offset		803920	0					
ANR	804002	Identifier	historyWordBits		803920	1					
ANR	804003	ForStatement	for ( loop = 0 ; loop < historySize ; loop ++ )		803920	9					
ANR	804004	ForInit	loop = 0 ;	250:6:6037:6045	803920	0	True				
ANR	804005	AssignmentExpression	loop = 0		803920	0		=			
ANR	804006	Identifier	loop		803920	0					
ANR	804007	PrimaryExpression	0		803920	1					
ANR	804008	Condition	loop < historySize	250:17:6048:6065	803920	1	True				
ANR	804009	RelationalExpression	loop < historySize		803920	0		<			
ANR	804010	Identifier	loop		803920	0					
ANR	804011	Identifier	historySize		803920	1					
ANR	804012	PostIncDecOperationExpression	loop ++	250:38:6069:6074	803920	2	True				
ANR	804013	Identifier	loop		803920	0					
ANR	804014	IncDec	++		803920	1					
ANR	804015	CompoundStatement		25:2:677:707	803920	3					
ANR	804016	IdentifierDeclStatement	unsigned mask = ( 1 << bit_num ) ;	251:2:6082:6112	803920	0	True				
ANR	804017	IdentifierDecl	mask = ( 1 << bit_num )		803920	0					
ANR	804018	IdentifierDeclType	unsigned		803920	0					
ANR	804019	Identifier	mask		803920	1					
ANR	804020	AssignmentExpression	mask = ( 1 << bit_num )		803920	2		=			
ANR	804021	Identifier	mask		803920	0					
ANR	804022	ShiftExpression	1 << bit_num		803920	1		<<			
ANR	804023	PrimaryExpression	1		803920	0					
ANR	804024	Identifier	bit_num		803920	1					
ANR	804025	IfStatement	if ( historyBuffer [ word_num ] & mask )		803920	1					
ANR	804026	Condition	historyBuffer [ word_num ] & mask	253:7:6122:6151	803920	0	True				
ANR	804027	BitAndExpression	historyBuffer [ word_num ] & mask		803920	0		&			
ANR	804028	ArrayIndexing	historyBuffer [ word_num ]		803920	0					
ANR	804029	Identifier	historyBuffer		803920	0					
ANR	804030	Identifier	word_num		803920	1					
ANR	804031	Identifier	mask		803920	1					
ANR	804032	CompoundStatement		27:40:750:750	803920	1					
ANR	804033	ExpressionStatement	outword |= ( 0x8 >> outbit )	254:3:6160:6188	803920	0	True				
ANR	804034	AssignmentExpression	outword |= ( 0x8 >> outbit )		803920	0		|=			
ANR	804035	Identifier	outword		803920	0					
ANR	804036	ShiftExpression	0x8 >> outbit		803920	1		>>			
ANR	804037	PrimaryExpression	0x8		803920	0					
ANR	804038	Identifier	outbit		803920	1					
ANR	804039	IfStatement	if ( -- bit_num < 0 )		803920	2					
ANR	804040	Condition	-- bit_num < 0	256:7:6201:6213	803920	0	True				
ANR	804041	RelationalExpression	-- bit_num < 0		803920	0		<			
ANR	804042	UnaryExpression	-- bit_num		803920	0					
ANR	804043	IncDec	--		803920	0					
ANR	804044	Identifier	bit_num		803920	1					
ANR	804045	PrimaryExpression	0		803920	1					
ANR	804046	CompoundStatement		30:23:812:812	803920	1					
ANR	804047	ExpressionStatement	bit_num = ( historyWordBits - 1 )	257:3:6222:6253	803920	0	True				
ANR	804048	AssignmentExpression	bit_num = ( historyWordBits - 1 )		803920	0		=			
ANR	804049	Identifier	bit_num		803920	0					
ANR	804050	AdditiveExpression	historyWordBits - 1		803920	1		-			
ANR	804051	Identifier	historyWordBits		803920	0					
ANR	804052	PrimaryExpression	1		803920	1					
ANR	804053	IfStatement	if ( -- word_num < 0 )		803920	1					
ANR	804054	Condition	-- word_num < 0	258:8:6263:6276	803920	0	True				
ANR	804055	RelationalExpression	-- word_num < 0		803920	0		<			
ANR	804056	UnaryExpression	-- word_num		803920	0					
ANR	804057	IncDec	--		803920	0					
ANR	804058	Identifier	word_num		803920	1					
ANR	804059	PrimaryExpression	0		803920	1					
ANR	804060	CompoundStatement		32:25:875:875	803920	1					
ANR	804061	ExpressionStatement	word_num = ( historyWords - 1 )	259:4:6286:6315	803920	0	True				
ANR	804062	AssignmentExpression	word_num = ( historyWords - 1 )		803920	0		=			
ANR	804063	Identifier	word_num		803920	0					
ANR	804064	AdditiveExpression	historyWords - 1		803920	1		-			
ANR	804065	Identifier	historyWords		803920	0					
ANR	804066	PrimaryExpression	1		803920	1					
ANR	804067	IfStatement	if ( ++ outbit == 4 )		803920	3					
ANR	804068	Condition	++ outbit == 4	264:7:6357:6369	803920	0	True				
ANR	804069	EqualityExpression	++ outbit == 4		803920	0		==			
ANR	804070	UnaryExpression	++ outbit		803920	0					
ANR	804071	IncDec	++		803920	0					
ANR	804072	Identifier	outbit		803920	1					
ANR	804073	PrimaryExpression	4		803920	1					
ANR	804074	CompoundStatement		38:23:968:968	803920	1					
ANR	804075	ExpressionStatement	buf [ outoff ++ ] = ( outword <= 9 ) ? ( '0' + outword ) : ( 'a' + outword - 10 )	265:3:6378:6459	803920	0	True				
ANR	804076	AssignmentExpression	buf [ outoff ++ ] = ( outword <= 9 ) ? ( '0' + outword ) : ( 'a' + outword - 10 )		803920	0		=			
ANR	804077	ArrayIndexing	buf [ outoff ++ ]		803920	0					
ANR	804078	Identifier	buf		803920	0					
ANR	804079	PostIncDecOperationExpression	outoff ++		803920	1					
ANR	804080	Identifier	outoff		803920	0					
ANR	804081	IncDec	++		803920	1					
ANR	804082	ConditionalExpression	( outword <= 9 ) ? ( '0' + outword ) : ( 'a' + outword - 10 )		803920	1					
ANR	804083	Condition	outword <= 9		803920	0					
ANR	804084	RelationalExpression	outword <= 9		803920	0		<=			
ANR	804085	Identifier	outword		803920	0					
ANR	804086	PrimaryExpression	9		803920	1					
ANR	804087	AdditiveExpression	'0' + outword		803920	1		+			
ANR	804088	PrimaryExpression	'0'		803920	0					
ANR	804089	Identifier	outword		803920	1					
ANR	804090	AdditiveExpression	'a' + outword - 10		803920	2		+			
ANR	804091	PrimaryExpression	'a'		803920	0					
ANR	804092	AdditiveExpression	outword - 10		803920	1		-			
ANR	804093	Identifier	outword		803920	0					
ANR	804094	PrimaryExpression	10		803920	1					
ANR	804095	ExpressionStatement	outbit = 0	267:3:6464:6474	803920	1	True				
ANR	804096	AssignmentExpression	outbit = 0		803920	0		=			
ANR	804097	Identifier	outbit		803920	0					
ANR	804098	PrimaryExpression	0		803920	1					
ANR	804099	ExpressionStatement	outword = 0x0	268:3:6479:6492	803920	2	True				
ANR	804100	AssignmentExpression	outword = 0x0		803920	0		=			
ANR	804101	Identifier	outword		803920	0					
ANR	804102	PrimaryExpression	0x0		803920	1					
ANR	804103	IfStatement	if ( outbit )		803920	10					
ANR	804104	Condition	outbit	272:6:6508:6513	803920	0	True				
ANR	804105	Identifier	outbit		803920	0					
ANR	804106	CompoundStatement		46:15:1112:1112	803920	1					
ANR	804107	ExpressionStatement	buf [ outoff ++ ] = outword <= 9 ? ( '0' + outword ) : ( 'a' + outword - 10 )	273:2:6521:6597	803920	0	True				
ANR	804108	AssignmentExpression	buf [ outoff ++ ] = outword <= 9 ? ( '0' + outword ) : ( 'a' + outword - 10 )		803920	0		=			
ANR	804109	ArrayIndexing	buf [ outoff ++ ]		803920	0					
ANR	804110	Identifier	buf		803920	0					
ANR	804111	PostIncDecOperationExpression	outoff ++		803920	1					
ANR	804112	Identifier	outoff		803920	0					
ANR	804113	IncDec	++		803920	1					
ANR	804114	ConditionalExpression	outword <= 9 ? ( '0' + outword ) : ( 'a' + outword - 10 )		803920	1					
ANR	804115	Condition	outword <= 9		803920	0					
ANR	804116	RelationalExpression	outword <= 9		803920	0		<=			
ANR	804117	Identifier	outword		803920	0					
ANR	804118	PrimaryExpression	9		803920	1					
ANR	804119	AdditiveExpression	'0' + outword		803920	1		+			
ANR	804120	PrimaryExpression	'0'		803920	0					
ANR	804121	Identifier	outword		803920	1					
ANR	804122	AdditiveExpression	'a' + outword - 10		803920	2		+			
ANR	804123	PrimaryExpression	'a'		803920	0					
ANR	804124	AdditiveExpression	outword - 10		803920	1		-			
ANR	804125	Identifier	outword		803920	0					
ANR	804126	PrimaryExpression	10		803920	1					
ANR	804127	ExpressionStatement	outbit = 0	275:2:6601:6611	803920	1	True				
ANR	804128	AssignmentExpression	outbit = 0		803920	0		=			
ANR	804129	Identifier	outbit		803920	0					
ANR	804130	PrimaryExpression	0		803920	1					
ANR	804131	ExpressionStatement	outword = 0x0	276:2:6615:6628	803920	2	True				
ANR	804132	AssignmentExpression	outword = 0x0		803920	0		=			
ANR	804133	Identifier	outword		803920	0					
ANR	804134	PrimaryExpression	0x0		803920	1					
ANR	804135	ExpressionStatement	buf [ outoff ++ ] = '\\0'	278:1:6634:6654	803920	11	True				
ANR	804136	AssignmentExpression	buf [ outoff ++ ] = '\\0'		803920	0		=			
ANR	804137	ArrayIndexing	buf [ outoff ++ ]		803920	0					
ANR	804138	Identifier	buf		803920	0					
ANR	804139	PostIncDecOperationExpression	outoff ++		803920	1					
ANR	804140	Identifier	outoff		803920	0					
ANR	804141	IncDec	++		803920	1					
ANR	804142	PrimaryExpression	'\\0'		803920	1					
ANR	804143	ReturnStatement	return buf ;	279:1:6657:6667	803920	12	True				
ANR	804144	Identifier	buf		803920	0					
ANR	804145	ReturnType	char *		803920	1					
ANR	804146	Identifier	CollectorBaseStats :: getHistoryString		803920	2					
ANR	804147	ParameterList	char * buf		803920	3					
ANR	804148	Parameter	char * buf	226:39:5392:5400	803920	0	True				
ANR	804149	ParameterType	char *		803920	0					
ANR	804150	Identifier	buf		803920	1					
ANR	804151	CFGEntryNode	ENTRY		803920		True				
ANR	804152	CFGExitNode	EXIT		803920		True				
ANR	804153	Symbol	* buf		803920						
ANR	804154	Symbol	offset		803920						
ANR	804155	Symbol	* historyBuffer		803920						
ANR	804156	Symbol	word_num		803920						
ANR	804157	Symbol	historyBuffer		803920						
ANR	804158	Symbol	historyWordBits		803920						
ANR	804159	Symbol	bit_num		803920						
ANR	804160	Symbol	outword		803920						
ANR	804161	Symbol	historyMaxbit		803920						
ANR	804162	Symbol	outbit		803920						
ANR	804163	Symbol	historySize		803920						
ANR	804164	Symbol	historyWords		803920						
ANR	804165	Symbol	outoff		803920						
ANR	804166	Symbol	historyBitnum		803920						
ANR	804167	Symbol	buf		803920						
ANR	804168	Symbol	loop		803920						
ANR	804169	Symbol	* word_num		803920						
ANR	804170	Symbol	mask		803920						
ANR	804171	Function	CollectorBaseStats :: getHistoryString	283:0:6707:6932							
ANR	804172	FunctionDef	CollectorBaseStats :: getHistoryString ()		804171	0					
ANR	804173	CompoundStatement		285:0:6760:6932	804171	0					
ANR	804174	IfStatement	if ( historyBuffer )		804171	0					
ANR	804175	Condition	historyBuffer	288:6:6802:6814	804171	0	True				
ANR	804176	Identifier	historyBuffer		804171	0					
ANR	804177	CompoundStatement		5:2:61:107	804171	1					
ANR	804178	IdentifierDeclStatement	char * buf = new char [ getHistoryStringLen ( ) ] ;	289:2:6822:6868	804171	0	True				
ANR	804179	IdentifierDecl	* buf = new char [ getHistoryStringLen ( ) ]		804171	0					
ANR	804180	IdentifierDeclType	char *		804171	0					
ANR	804181	Identifier	buf		804171	1					
ANR	804182	AssignmentExpression	* buf = new char [ getHistoryStringLen ( ) ]		804171	2		=			
ANR	804183	Identifier	buf		804171	0					
ANR	804184	CallExpression	getHistoryStringLen ( )		804171	1					
ANR	804185	Callee	getHistoryStringLen		804171	0					
ANR	804186	Identifier	getHistoryStringLen		804171	0					
ANR	804187	ArgumentList			804171	1					
ANR	804188	ReturnStatement	return getHistoryString ( buf ) ;	290:2:6872:6902	804171	1	True				
ANR	804189	CallExpression	getHistoryString ( buf )		804171	0					
ANR	804190	Callee	getHistoryString		804171	0					
ANR	804191	Identifier	getHistoryString		804171	0					
ANR	804192	ArgumentList	buf		804171	1					
ANR	804193	Argument	buf		804171	0					
ANR	804194	Identifier	buf		804171	0					
ANR	804195	ElseStatement	else		804171	0					
ANR	804196	CompoundStatement		7:8:151:151	804171	0					
ANR	804197	ReturnStatement	return NULL ;	292:2:6916:6927	804171	0	True				
ANR	804198	Identifier	NULL		804171	0					
ANR	804199	ReturnType	char *		804171	1					
ANR	804200	Identifier	CollectorBaseStats :: getHistoryString		804171	2					
ANR	804201	ParameterList			804171	3					
ANR	804202	CFGEntryNode	ENTRY		804171		True				
ANR	804203	CFGExitNode	EXIT		804171		True				
ANR	804204	Symbol	buf		804171						
ANR	804205	Symbol	NULL		804171						
ANR	804206	Symbol	getHistoryString		804171						
ANR	804207	Symbol	historyBuffer		804171						
ANR	804208	Symbol	getHistoryStringLen		804171						
ANR	804209	Function	CollectorClassStats :: CollectorClassStats	302:0:7070:7318							
ANR	804210	FunctionDef	"CollectorClassStats :: CollectorClassStats (const char * class_name , int history_size)"		804209	0					
ANR	804211	CompoundStatement		305:0:7208:7318	804209	0					
ANR	804212	IfStatement	if ( class_name )		804209	0					
ANR	804213	Condition	class_name	307:6:7234:7243	804209	0	True				
ANR	804214	Identifier	class_name		804209	0					
ANR	804215	CompoundStatement		3:19:38:38	804209	1					
ANR	804216	ExpressionStatement	className = strdup ( class_name )	308:2:7251:7283	804209	0	True				
ANR	804217	AssignmentExpression	className = strdup ( class_name )		804209	0		=			
ANR	804218	Identifier	className		804209	0					
ANR	804219	CallExpression	strdup ( class_name )		804209	1					
ANR	804220	Callee	strdup		804209	0					
ANR	804221	Identifier	strdup		804209	0					
ANR	804222	ArgumentList	class_name		804209	1					
ANR	804223	Argument	class_name		804209	0					
ANR	804224	Identifier	class_name		804209	0					
ANR	804225	ElseStatement	else		804209	0					
ANR	804226	CompoundStatement		5:8:84:84	804209	0					
ANR	804227	ExpressionStatement	className = NULL	310:2:7297:7313	804209	0	True				
ANR	804228	AssignmentExpression	className = NULL		804209	0		=			
ANR	804229	Identifier	className		804209	0					
ANR	804230	Identifier	NULL		804209	1					
ANR	804231	Identifier	CollectorClassStats :: CollectorClassStats		804209	1					
ANR	804232	ParameterList	"const char * class_name , int history_size"		804209	2					
ANR	804233	Parameter	const char * class_name	302:43:7113:7134	804209	0	True				
ANR	804234	ParameterType	const char *		804209	0					
ANR	804235	Identifier	class_name		804209	1					
ANR	804236	Parameter	int history_size	303:13:7150:7165	804209	1	True				
ANR	804237	ParameterType	int		804209	0					
ANR	804238	Identifier	history_size		804209	1					
ANR	804239	CFGEntryNode	ENTRY		804209		True				
ANR	804240	CFGExitNode	EXIT		804209		True				
ANR	804241	Symbol	history_size		804209						
ANR	804242	Symbol	NULL		804209						
ANR	804243	Symbol	className		804209						
ANR	804244	Symbol	strdup		804209						
ANR	804245	Symbol	class_name		804209						
ANR	804246	Function	CollectorClassStats :: ~CollectorClassStats	315:0:7335:7472							
ANR	804247	FunctionDef	CollectorClassStats :: ~CollectorClassStats ()		804246	0					
ANR	804248	CompoundStatement		316:0:7386:7472	804246	0					
ANR	804249	IfStatement	if ( className )		804246	0					
ANR	804250	Condition	className	317:6:7394:7402	804246	0	True				
ANR	804251	Identifier	className		804246	0					
ANR	804252	CompoundStatement		2:18:19:19	804246	1					
ANR	804253	Statement	free	318:2:7410:7413	804246	0	True				
ANR	804254	Statement	(	318:6:7414:7414	804246	1	True				
ANR	804255	Statement	const_cast	318:8:7416:7425	804246	2	True				
ANR	804256	Statement	<	318:18:7426:7426	804246	3	True				
ANR	804257	Statement	char	318:19:7427:7430	804246	4	True				
ANR	804258	Statement	*	318:24:7432:7432	804246	5	True				
ANR	804259	Statement	>	318:25:7433:7433	804246	6	True				
ANR	804260	Statement	(	318:26:7434:7434	804246	7	True				
ANR	804261	Statement	className	318:27:7435:7443	804246	8	True				
ANR	804262	Statement	)	318:36:7444:7444	804246	9	True				
ANR	804263	Statement	)	318:38:7446:7446	804246	10	True				
ANR	804264	ExpressionStatement		318:39:7447:7447	804246	11	True				
ANR	804265	ExpressionStatement	className = NULL	319:2:7451:7467	804246	12	True				
ANR	804266	AssignmentExpression	className = NULL		804246	0		=			
ANR	804267	Identifier	className		804246	0					
ANR	804268	Identifier	NULL		804246	1					
ANR	804269	Identifier	CollectorClassStats :: ~CollectorClassStats		804246	1					
ANR	804270	ParameterList			804246	2					
ANR	804271	CFGEntryNode	ENTRY		804246		True				
ANR	804272	CFGExitNode	EXIT		804246		True				
ANR	804273	Symbol	NULL		804246						
ANR	804274	Symbol	className		804246						
ANR	804275	Function	CollectorClassStats :: match	324:0:7519:7771							
ANR	804276	FunctionDef	CollectorClassStats :: match (const char * class_name)		804275	0					
ANR	804277	CompoundStatement		326:0:7578:7771	804275	0					
ANR	804278	IfStatement	if ( className )		804275	0					
ANR	804279	Condition	className	327:6:7586:7594	804275	0	True				
ANR	804280	Identifier	className		804275	0					
ANR	804281	CompoundStatement		2:18:19:19	804275	1					
ANR	804282	IfStatement	if ( ! class_name )		804275	0					
ANR	804283	Condition	! class_name	328:7:7607:7618	804275	0	True				
ANR	804284	UnaryOperationExpression	! class_name		804275	0					
ANR	804285	UnaryOperator	!		804275	0					
ANR	804286	Identifier	class_name		804275	1					
ANR	804287	CompoundStatement		3:22:43:43	804275	1					
ANR	804288	ReturnStatement	return false ;	329:3:7627:7639	804275	0	True				
ANR	804289	Identifier	false		804275	0					
ANR	804290	IfStatement	"if ( strcmp ( className , class_name ) )"		804275	1					
ANR	804291	Condition	"strcmp ( className , class_name )"	331:7:7652:7682	804275	0	True				
ANR	804292	CallExpression	"strcmp ( className , class_name )"		804275	0					
ANR	804293	Callee	strcmp		804275	0					
ANR	804294	Identifier	strcmp		804275	0					
ANR	804295	ArgumentList	className		804275	1					
ANR	804296	Argument	className		804275	0					
ANR	804297	Identifier	className		804275	0					
ANR	804298	Argument	class_name		804275	1					
ANR	804299	Identifier	class_name		804275	0					
ANR	804300	CompoundStatement		6:41:107:107	804275	1					
ANR	804301	ReturnStatement	return false ;	332:3:7691:7703	804275	0	True				
ANR	804302	Identifier	false		804275	0					
ANR	804303	ElseStatement	else		804275	0					
ANR	804304	IfStatement	if ( class_name )		804275	0					
ANR	804305	Condition	class_name	334:13:7722:7731	804275	0	True				
ANR	804306	Identifier	class_name		804275	0					
ANR	804307	CompoundStatement		9:26:156:156	804275	1					
ANR	804308	ReturnStatement	return false ;	335:2:7739:7751	804275	0	True				
ANR	804309	Identifier	false		804275	0					
ANR	804310	ReturnStatement	return true ;	338:1:7758:7769	804275	1	True				
ANR	804311	Identifier	true		804275	0					
ANR	804312	ReturnType	bool		804275	1					
ANR	804313	Identifier	CollectorClassStats :: match		804275	2					
ANR	804314	ParameterList	const char * class_name		804275	3					
ANR	804315	Parameter	const char * class_name	325:29:7553:7574	804275	0	True				
ANR	804316	ParameterType	const char *		804275	0					
ANR	804317	Identifier	class_name		804275	1					
ANR	804318	CFGEntryNode	ENTRY		804275		True				
ANR	804319	CFGExitNode	EXIT		804275		True				
ANR	804320	Symbol	strcmp		804275						
ANR	804321	Symbol	false		804275						
ANR	804322	Symbol	true		804275						
ANR	804323	Symbol	className		804275						
ANR	804324	Symbol	class_name		804275						
ANR	804325	Function	CollectorClassStatsList :: CollectorClassStatsList	347:0:7937:8037							
ANR	804326	FunctionDef	CollectorClassStatsList :: CollectorClassStatsList (int history_size)		804325	0					
ANR	804327	CompoundStatement		348:0:8006:8037	804325	0					
ANR	804328	ExpressionStatement	historySize = history_size	349:1:8009:8035	804325	0	True				
ANR	804329	AssignmentExpression	historySize = history_size		804325	0		=			
ANR	804330	Identifier	historySize		804325	0					
ANR	804331	Identifier	history_size		804325	1					
ANR	804332	Identifier	CollectorClassStatsList :: CollectorClassStatsList		804325	1					
ANR	804333	ParameterList	int history_size		804325	2					
ANR	804334	Parameter	int history_size	347:50:7987:8002	804325	0	True				
ANR	804335	ParameterType	int		804325	0					
ANR	804336	Identifier	history_size		804325	1					
ANR	804337	CFGEntryNode	ENTRY		804325		True				
ANR	804338	CFGExitNode	EXIT		804325		True				
ANR	804339	Symbol	history_size		804325						
ANR	804340	Symbol	historySize		804325						
ANR	804341	Function	CollectorClassStatsList :: ~CollectorClassStatsList	353:0:8054:8296							
ANR	804342	FunctionDef	CollectorClassStatsList :: ~CollectorClassStatsList ()		804341	0					
ANR	804343	CompoundStatement		354:0:8112:8296	804341	0					
ANR	804344	IdentifierDeclStatement	int classNum ;	355:1:8115:8128	804341	0	True				
ANR	804345	IdentifierDecl	classNum		804341	0					
ANR	804346	IdentifierDeclType	int		804341	0					
ANR	804347	Identifier	classNum		804341	1					
ANR	804348	IdentifierDeclStatement	int last = classStats . getlast ( ) ;	356:1:8131:8163	804341	1	True				
ANR	804349	IdentifierDecl	last = classStats . getlast ( )		804341	0					
ANR	804350	IdentifierDeclType	int		804341	0					
ANR	804351	Identifier	last		804341	1					
ANR	804352	AssignmentExpression	last = classStats . getlast ( )		804341	2		=			
ANR	804353	Identifier	last		804341	0					
ANR	804354	CallExpression	classStats . getlast ( )		804341	1					
ANR	804355	Callee	classStats . getlast		804341	0					
ANR	804356	MemberAccess	classStats . getlast		804341	0					
ANR	804357	Identifier	classStats		804341	0					
ANR	804358	Identifier	getlast		804341	1					
ANR	804359	ArgumentList			804341	1					
ANR	804360	ForStatement	for ( classNum = 0 ; classNum <= last ; classNum ++ )		804341	2					
ANR	804361	ForInit	classNum = 0 ;	359:7:8213:8225	804341	0	True				
ANR	804362	AssignmentExpression	classNum = 0		804341	0		=			
ANR	804363	Identifier	classNum		804341	0					
ANR	804364	PrimaryExpression	0		804341	1					
ANR	804365	Condition	classNum <= last	359:22:8228:8243	804341	1	True				
ANR	804366	RelationalExpression	classNum <= last		804341	0		<=			
ANR	804367	Identifier	classNum		804341	0					
ANR	804368	Identifier	last		804341	1					
ANR	804369	PostIncDecOperationExpression	classNum ++	359:41:8247:8256	804341	2	True				
ANR	804370	Identifier	classNum		804341	0					
ANR	804371	IncDec	++		804341	1					
ANR	804372	CompoundStatement		6:54:147:147	804341	3					
ANR	804373	Statement	delete	360:2:8264:8269	804341	0	True				
ANR	804374	ExpressionStatement	classStats [ classNum ]	360:9:8271:8291	804341	1	True				
ANR	804375	ArrayIndexing	classStats [ classNum ]		804341	0					
ANR	804376	Identifier	classStats		804341	0					
ANR	804377	Identifier	classNum		804341	1					
ANR	804378	Identifier	CollectorClassStatsList :: ~CollectorClassStatsList		804341	1					
ANR	804379	ParameterList			804341	2					
ANR	804380	CFGEntryNode	ENTRY		804341		True				
ANR	804381	CFGExitNode	EXIT		804341		True				
ANR	804382	Symbol	last		804341						
ANR	804383	Symbol	classStats . getlast		804341						
ANR	804384	Symbol	classNum		804341						
ANR	804385	Symbol	classStats		804341						
ANR	804386	Function	CollectorClassStatsList :: updateStats	365:0:8320:9035							
ANR	804387	FunctionDef	"CollectorClassStatsList :: updateStats (const char * class_name , bool sequenced , int dropped)"		804386	0					
ANR	804388	CompoundStatement		369:0:8438:9035	804386	0					
ANR	804389	IdentifierDeclStatement	int classNum ;	370:1:8441:8456	804386	0	True				
ANR	804390	IdentifierDecl	classNum		804386	0					
ANR	804391	IdentifierDeclType	int		804386	0					
ANR	804392	Identifier	classNum		804386	1					
ANR	804393	IdentifierDeclStatement	CollectorClassStats * classStat = NULL ;	371:1:8459:8496	804386	1	True				
ANR	804394	IdentifierDecl	* classStat = NULL		804386	0					
ANR	804395	IdentifierDeclType	CollectorClassStats *		804386	0					
ANR	804396	Identifier	classStat		804386	1					
ANR	804397	AssignmentExpression	* classStat = NULL		804386	2		=			
ANR	804398	Identifier	NULL		804386	0					
ANR	804399	Identifier	NULL		804386	1					
ANR	804400	IdentifierDeclStatement	int last = classStats . getlast ( ) ;	374:1:8558:8590	804386	2	True				
ANR	804401	IdentifierDecl	last = classStats . getlast ( )		804386	0					
ANR	804402	IdentifierDeclType	int		804386	0					
ANR	804403	Identifier	last		804386	1					
ANR	804404	AssignmentExpression	last = classStats . getlast ( )		804386	2		=			
ANR	804405	Identifier	last		804386	0					
ANR	804406	CallExpression	classStats . getlast ( )		804386	1					
ANR	804407	Callee	classStats . getlast		804386	0					
ANR	804408	MemberAccess	classStats . getlast		804386	0					
ANR	804409	Identifier	classStats		804386	0					
ANR	804410	Identifier	getlast		804386	1					
ANR	804411	ArgumentList			804386	1					
ANR	804412	ForStatement	for ( classNum = 0 ; classNum <= last ; classNum ++ )		804386	3					
ANR	804413	ForInit	classNum = 0 ;	375:7:8599:8611	804386	0	True				
ANR	804414	AssignmentExpression	classNum = 0		804386	0		=			
ANR	804415	Identifier	classNum		804386	0					
ANR	804416	PrimaryExpression	0		804386	1					
ANR	804417	Condition	classNum <= last	375:22:8614:8629	804386	1	True				
ANR	804418	RelationalExpression	classNum <= last		804386	0		<=			
ANR	804419	Identifier	classNum		804386	0					
ANR	804420	Identifier	last		804386	1					
ANR	804421	PostIncDecOperationExpression	classNum ++	375:41:8633:8642	804386	2	True				
ANR	804422	Identifier	classNum		804386	0					
ANR	804423	IncDec	++		804386	1					
ANR	804424	CompoundStatement		7:54:207:207	804386	3					
ANR	804425	IfStatement	if ( classStats [ classNum ] -> match ( class_name ) )		804386	0					
ANR	804426	Condition	classStats [ classNum ] -> match ( class_name )	376:7:8655:8695	804386	0	True				
ANR	804427	CallExpression	classStats [ classNum ] -> match ( class_name )		804386	0					
ANR	804428	Callee	classStats [ classNum ] -> match		804386	0					
ANR	804429	PtrMemberAccess	classStats [ classNum ] -> match		804386	0					
ANR	804430	ArrayIndexing	classStats [ classNum ]		804386	0					
ANR	804431	Identifier	classStats		804386	0					
ANR	804432	Identifier	classNum		804386	1					
ANR	804433	Identifier	match		804386	1					
ANR	804434	ArgumentList	class_name		804386	1					
ANR	804435	Argument	class_name		804386	0					
ANR	804436	Identifier	class_name		804386	0					
ANR	804437	CompoundStatement		8:51:260:260	804386	1					
ANR	804438	ExpressionStatement	classStat = classStats [ classNum ]	377:3:8704:8736	804386	0	True				
ANR	804439	AssignmentExpression	classStat = classStats [ classNum ]		804386	0		=			
ANR	804440	Identifier	classStat		804386	0					
ANR	804441	ArrayIndexing	classStats [ classNum ]		804386	1					
ANR	804442	Identifier	classStats		804386	0					
ANR	804443	Identifier	classNum		804386	1					
ANR	804444	BreakStatement	break ;	378:3:8741:8746	804386	1	True				
ANR	804445	IfStatement	if ( ! classStat )		804386	4					
ANR	804446	Condition	! classStat	383:6:8812:8822	804386	0	True				
ANR	804447	UnaryOperationExpression	! classStat		804386	0					
ANR	804448	UnaryOperator	!		804386	0					
ANR	804449	Identifier	classStat		804386	1					
ANR	804450	CompoundStatement		15:20:387:387	804386	1					
ANR	804451	ExpressionStatement	"classStat = new CollectorClassStats ( class_name , historySize )"	384:2:8830:8893	804386	0	True				
ANR	804452	AssignmentExpression	"classStat = new CollectorClassStats ( class_name , historySize )"		804386	0		=			
ANR	804453	Identifier	classStat		804386	0					
ANR	804454	Expression	"class_name , historySize"		804386	1					
ANR	804455	Identifier	class_name		804386	0					
ANR	804456	Identifier	historySize		804386	1					
ANR	804457	ExpressionStatement	classStats [ classStats . getlast ( ) + 1 ] = classStat	385:2:8897:8945	804386	1	True				
ANR	804458	AssignmentExpression	classStats [ classStats . getlast ( ) + 1 ] = classStat		804386	0		=			
ANR	804459	ArrayIndexing	classStats [ classStats . getlast ( ) + 1 ]		804386	0					
ANR	804460	Identifier	classStats		804386	0					
ANR	804461	AdditiveExpression	classStats . getlast ( ) + 1		804386	1		+			
ANR	804462	CallExpression	classStats . getlast ( )		804386	0					
ANR	804463	Callee	classStats . getlast		804386	0					
ANR	804464	MemberAccess	classStats . getlast		804386	0					
ANR	804465	Identifier	classStats		804386	0					
ANR	804466	Identifier	getlast		804386	1					
ANR	804467	ArgumentList			804386	1					
ANR	804468	PrimaryExpression	1		804386	1					
ANR	804469	Identifier	classStat		804386	1					
ANR	804470	ExpressionStatement	"classStat -> updateStats ( sequenced , dropped )"	389:1:8977:9021	804386	5	True				
ANR	804471	CallExpression	"classStat -> updateStats ( sequenced , dropped )"		804386	0					
ANR	804472	Callee	classStat -> updateStats		804386	0					
ANR	804473	PtrMemberAccess	classStat -> updateStats		804386	0					
ANR	804474	Identifier	classStat		804386	0					
ANR	804475	Identifier	updateStats		804386	1					
ANR	804476	ArgumentList	sequenced		804386	1					
ANR	804477	Argument	sequenced		804386	0					
ANR	804478	Identifier	sequenced		804386	0					
ANR	804479	Argument	dropped		804386	1					
ANR	804480	Identifier	dropped		804386	0					
ANR	804481	ReturnStatement	return 0 ;	391:1:9025:9033	804386	6	True				
ANR	804482	PrimaryExpression	0		804386	0					
ANR	804483	ReturnType	int		804386	1					
ANR	804484	Identifier	CollectorClassStatsList :: updateStats		804386	2					
ANR	804485	ParameterList	"const char * class_name , bool sequenced , int dropped"		804386	3					
ANR	804486	Parameter	const char * class_name	366:38:8362:8383	804386	0	True				
ANR	804487	ParameterType	const char *		804386	0					
ANR	804488	Identifier	class_name		804386	1					
ANR	804489	Parameter	bool sequenced	367:11:8397:8410	804386	1	True				
ANR	804490	ParameterType	bool		804386	0					
ANR	804491	Identifier	sequenced		804386	1					
ANR	804492	Parameter	int dropped	368:11:8424:8434	804386	2	True				
ANR	804493	ParameterType	int		804386	0					
ANR	804494	Identifier	dropped		804386	1					
ANR	804495	CFGEntryNode	ENTRY		804386		True				
ANR	804496	CFGExitNode	EXIT		804386		True				
ANR	804497	Symbol	* * classNum		804386						
ANR	804498	Symbol	* classStats . getlast		804386						
ANR	804499	Symbol	NULL		804386						
ANR	804500	Symbol	last		804386						
ANR	804501	Symbol	classStat		804386						
ANR	804502	Symbol	classStats . getlast		804386						
ANR	804503	Symbol	dropped		804386						
ANR	804504	Symbol	classNum		804386						
ANR	804505	Symbol	classStats [ classNum ] -> match		804386						
ANR	804506	Symbol	classStats		804386						
ANR	804507	Symbol	historySize		804386						
ANR	804508	Symbol	* classStats		804386						
ANR	804509	Symbol	* * classStats		804386						
ANR	804510	Symbol	* classNum		804386						
ANR	804511	Symbol	class_name		804386						
ANR	804512	Symbol	sequenced		804386						
ANR	804513	Function	CollectorClassStatsList :: publish	395:0:9077:10217							
ANR	804514	FunctionDef	CollectorClassStatsList :: publish (ClassAd * ad)		804513	0					
ANR	804515	CompoundStatement		397:0:9130:10217	804513	0					
ANR	804516	IdentifierDeclStatement	int classNum ;	398:1:9133:9146	804513	0	True				
ANR	804517	IdentifierDecl	classNum		804513	0					
ANR	804518	IdentifierDeclType	int		804513	0					
ANR	804519	Identifier	classNum		804513	1					
ANR	804520	IdentifierDeclStatement	int last = classStats . getlast ( ) ;	399:1:9149:9181	804513	1	True				
ANR	804521	IdentifierDecl	last = classStats . getlast ( )		804513	0					
ANR	804522	IdentifierDeclType	int		804513	0					
ANR	804523	Identifier	last		804513	1					
ANR	804524	AssignmentExpression	last = classStats . getlast ( )		804513	2		=			
ANR	804525	Identifier	last		804513	0					
ANR	804526	CallExpression	classStats . getlast ( )		804513	1					
ANR	804527	Callee	classStats . getlast		804513	0					
ANR	804528	MemberAccess	classStats . getlast		804513	0					
ANR	804529	Identifier	classStats		804513	0					
ANR	804530	Identifier	getlast		804513	1					
ANR	804531	ArgumentList			804513	1					
ANR	804532	IdentifierDeclStatement	char line [ 1024 ] ;	400:4:9187:9202	804513	2	True				
ANR	804533	IdentifierDecl	line [ 1024 ]		804513	0					
ANR	804534	IdentifierDeclType	char [ 1024 ]		804513	0					
ANR	804535	Identifier	line		804513	1					
ANR	804536	PrimaryExpression	1024		804513	2					
ANR	804537	ForStatement	for ( classNum = 0 ; classNum <= last ; classNum ++ )		804513	3					
ANR	804538	ForInit	classNum = 0 ;	403:7:9252:9264	804513	0	True				
ANR	804539	AssignmentExpression	classNum = 0		804513	0		=			
ANR	804540	Identifier	classNum		804513	0					
ANR	804541	PrimaryExpression	0		804513	1					
ANR	804542	Condition	classNum <= last	403:22:9267:9282	804513	1	True				
ANR	804543	RelationalExpression	classNum <= last		804513	0		<=			
ANR	804544	Identifier	classNum		804513	0					
ANR	804545	Identifier	last		804513	1					
ANR	804546	PostIncDecOperationExpression	classNum ++	403:41:9286:9295	804513	2	True				
ANR	804547	Identifier	classNum		804513	0					
ANR	804548	IncDec	++		804513	1					
ANR	804549	CompoundStatement		28:2:821:874	804513	3					
ANR	804550	IdentifierDeclStatement	const char * name = classStats [ classNum ] -> getName ( ) ;	404:2:9303:9354	804513	0	True				
ANR	804551	IdentifierDecl	* name = classStats [ classNum ] -> getName ( )		804513	0					
ANR	804552	IdentifierDeclType	const char *		804513	0					
ANR	804553	Identifier	name		804513	1					
ANR	804554	AssignmentExpression	* name = classStats [ classNum ] -> getName ( )		804513	2		=			
ANR	804555	Identifier	name		804513	0					
ANR	804556	CallExpression	classStats [ classNum ] -> getName ( )		804513	1					
ANR	804557	Callee	classStats [ classNum ] -> getName		804513	0					
ANR	804558	PtrMemberAccess	classStats [ classNum ] -> getName		804513	0					
ANR	804559	ArrayIndexing	classStats [ classNum ]		804513	0					
ANR	804560	Identifier	classStats		804513	0					
ANR	804561	Identifier	classNum		804513	1					
ANR	804562	Identifier	getName		804513	1					
ANR	804563	ArgumentList			804513	1					
ANR	804564	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_TOTAL , name , classStats [ classNum ] -> getTotal ( ) )"	405:2:9358:9479	804513	1	True				
ANR	804565	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_TOTAL , name , classStats [ classNum ] -> getTotal ( ) )"		804513	0					
ANR	804566	Callee	snprintf		804513	0					
ANR	804567	Identifier	snprintf		804513	0					
ANR	804568	ArgumentList	line		804513	1					
ANR	804569	Argument	line		804513	0					
ANR	804570	Identifier	line		804513	0					
ANR	804571	Argument	sizeof ( line )		804513	1					
ANR	804572	SizeofExpression	sizeof ( line )		804513	0					
ANR	804573	Sizeof	sizeof		804513	0					
ANR	804574	SizeofOperand	line		804513	1					
ANR	804575	Argument	"""%s_%s = %d"""		804513	2					
ANR	804576	PrimaryExpression	"""%s_%s = %d"""		804513	0					
ANR	804577	Argument	ATTR_UPDATESTATS_TOTAL		804513	3					
ANR	804578	Identifier	ATTR_UPDATESTATS_TOTAL		804513	0					
ANR	804579	Argument	name		804513	4					
ANR	804580	Identifier	name		804513	0					
ANR	804581	Argument	classStats [ classNum ] -> getTotal ( )		804513	5					
ANR	804582	CallExpression	classStats [ classNum ] -> getTotal ( )		804513	0					
ANR	804583	Callee	classStats [ classNum ] -> getTotal		804513	0					
ANR	804584	PtrMemberAccess	classStats [ classNum ] -> getTotal		804513	0					
ANR	804585	ArrayIndexing	classStats [ classNum ]		804513	0					
ANR	804586	Identifier	classStats		804513	0					
ANR	804587	Identifier	classNum		804513	1					
ANR	804588	Identifier	getTotal		804513	1					
ANR	804589	ArgumentList			804513	1					
ANR	804590	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	408:2:9483:9510	804513	2	True				
ANR	804591	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		804513	0		=			
ANR	804592	ArrayIndexing	line [ sizeof ( line ) - 1 ]		804513	0					
ANR	804593	Identifier	line		804513	0					
ANR	804594	AdditiveExpression	sizeof ( line ) - 1		804513	1		-			
ANR	804595	SizeofExpression	sizeof ( line )		804513	0					
ANR	804596	Sizeof	sizeof		804513	0					
ANR	804597	SizeofOperand	line		804513	1					
ANR	804598	PrimaryExpression	1		804513	1					
ANR	804599	PrimaryExpression	'\\0'		804513	1					
ANR	804600	ExpressionStatement	ad -> Insert ( line )	409:2:9514:9530	804513	3	True				
ANR	804601	CallExpression	ad -> Insert ( line )		804513	0					
ANR	804602	Callee	ad -> Insert		804513	0					
ANR	804603	PtrMemberAccess	ad -> Insert		804513	0					
ANR	804604	Identifier	ad		804513	0					
ANR	804605	Identifier	Insert		804513	1					
ANR	804606	ArgumentList	line		804513	1					
ANR	804607	Argument	line		804513	0					
ANR	804608	Identifier	line		804513	0					
ANR	804609	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , name , classStats [ classNum ] -> getSequenced ( ) )"	411:2:9535:9664	804513	4	True				
ANR	804610	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , name , classStats [ classNum ] -> getSequenced ( ) )"		804513	0					
ANR	804611	Callee	snprintf		804513	0					
ANR	804612	Identifier	snprintf		804513	0					
ANR	804613	ArgumentList	line		804513	1					
ANR	804614	Argument	line		804513	0					
ANR	804615	Identifier	line		804513	0					
ANR	804616	Argument	sizeof ( line )		804513	1					
ANR	804617	SizeofExpression	sizeof ( line )		804513	0					
ANR	804618	Sizeof	sizeof		804513	0					
ANR	804619	SizeofOperand	line		804513	1					
ANR	804620	Argument	"""%s_%s = %d"""		804513	2					
ANR	804621	PrimaryExpression	"""%s_%s = %d"""		804513	0					
ANR	804622	Argument	ATTR_UPDATESTATS_SEQUENCED		804513	3					
ANR	804623	Identifier	ATTR_UPDATESTATS_SEQUENCED		804513	0					
ANR	804624	Argument	name		804513	4					
ANR	804625	Identifier	name		804513	0					
ANR	804626	Argument	classStats [ classNum ] -> getSequenced ( )		804513	5					
ANR	804627	CallExpression	classStats [ classNum ] -> getSequenced ( )		804513	0					
ANR	804628	Callee	classStats [ classNum ] -> getSequenced		804513	0					
ANR	804629	PtrMemberAccess	classStats [ classNum ] -> getSequenced		804513	0					
ANR	804630	ArrayIndexing	classStats [ classNum ]		804513	0					
ANR	804631	Identifier	classStats		804513	0					
ANR	804632	Identifier	classNum		804513	1					
ANR	804633	Identifier	getSequenced		804513	1					
ANR	804634	ArgumentList			804513	1					
ANR	804635	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	414:2:9668:9695	804513	5	True				
ANR	804636	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		804513	0		=			
ANR	804637	ArrayIndexing	line [ sizeof ( line ) - 1 ]		804513	0					
ANR	804638	Identifier	line		804513	0					
ANR	804639	AdditiveExpression	sizeof ( line ) - 1		804513	1		-			
ANR	804640	SizeofExpression	sizeof ( line )		804513	0					
ANR	804641	Sizeof	sizeof		804513	0					
ANR	804642	SizeofOperand	line		804513	1					
ANR	804643	PrimaryExpression	1		804513	1					
ANR	804644	PrimaryExpression	'\\0'		804513	1					
ANR	804645	ExpressionStatement	ad -> Insert ( line )	415:2:9699:9715	804513	6	True				
ANR	804646	CallExpression	ad -> Insert ( line )		804513	0					
ANR	804647	Callee	ad -> Insert		804513	0					
ANR	804648	PtrMemberAccess	ad -> Insert		804513	0					
ANR	804649	Identifier	ad		804513	0					
ANR	804650	Identifier	Insert		804513	1					
ANR	804651	ArgumentList	line		804513	1					
ANR	804652	Argument	line		804513	0					
ANR	804653	Identifier	line		804513	0					
ANR	804654	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_LOST , name , classStats [ classNum ] -> getDropped ( ) )"	417:2:9720:9842	804513	7	True				
ANR	804655	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s_%s = %d"" , ATTR_UPDATESTATS_LOST , name , classStats [ classNum ] -> getDropped ( ) )"		804513	0					
ANR	804656	Callee	snprintf		804513	0					
ANR	804657	Identifier	snprintf		804513	0					
ANR	804658	ArgumentList	line		804513	1					
ANR	804659	Argument	line		804513	0					
ANR	804660	Identifier	line		804513	0					
ANR	804661	Argument	sizeof ( line )		804513	1					
ANR	804662	SizeofExpression	sizeof ( line )		804513	0					
ANR	804663	Sizeof	sizeof		804513	0					
ANR	804664	SizeofOperand	line		804513	1					
ANR	804665	Argument	"""%s_%s = %d"""		804513	2					
ANR	804666	PrimaryExpression	"""%s_%s = %d"""		804513	0					
ANR	804667	Argument	ATTR_UPDATESTATS_LOST		804513	3					
ANR	804668	Identifier	ATTR_UPDATESTATS_LOST		804513	0					
ANR	804669	Argument	name		804513	4					
ANR	804670	Identifier	name		804513	0					
ANR	804671	Argument	classStats [ classNum ] -> getDropped ( )		804513	5					
ANR	804672	CallExpression	classStats [ classNum ] -> getDropped ( )		804513	0					
ANR	804673	Callee	classStats [ classNum ] -> getDropped		804513	0					
ANR	804674	PtrMemberAccess	classStats [ classNum ] -> getDropped		804513	0					
ANR	804675	ArrayIndexing	classStats [ classNum ]		804513	0					
ANR	804676	Identifier	classStats		804513	0					
ANR	804677	Identifier	classNum		804513	1					
ANR	804678	Identifier	getDropped		804513	1					
ANR	804679	ArgumentList			804513	1					
ANR	804680	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	420:2:9846:9873	804513	8	True				
ANR	804681	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		804513	0		=			
ANR	804682	ArrayIndexing	line [ sizeof ( line ) - 1 ]		804513	0					
ANR	804683	Identifier	line		804513	0					
ANR	804684	AdditiveExpression	sizeof ( line ) - 1		804513	1		-			
ANR	804685	SizeofExpression	sizeof ( line )		804513	0					
ANR	804686	Sizeof	sizeof		804513	0					
ANR	804687	SizeofOperand	line		804513	1					
ANR	804688	PrimaryExpression	1		804513	1					
ANR	804689	PrimaryExpression	'\\0'		804513	1					
ANR	804690	ExpressionStatement	ad -> Insert ( line )	421:2:9877:9893	804513	9	True				
ANR	804691	CallExpression	ad -> Insert ( line )		804513	0					
ANR	804692	Callee	ad -> Insert		804513	0					
ANR	804693	PtrMemberAccess	ad -> Insert		804513	0					
ANR	804694	Identifier	ad		804513	0					
ANR	804695	Identifier	Insert		804513	1					
ANR	804696	ArgumentList	line		804513	1					
ANR	804697	Argument	line		804513	0					
ANR	804698	Identifier	line		804513	0					
ANR	804699	IdentifierDeclStatement	char * tmp = classStats [ classNum ] -> getHistoryString ( ) ;	424:2:9952:10005	804513	10	True				
ANR	804700	IdentifierDecl	* tmp = classStats [ classNum ] -> getHistoryString ( )		804513	0					
ANR	804701	IdentifierDeclType	char *		804513	0					
ANR	804702	Identifier	tmp		804513	1					
ANR	804703	AssignmentExpression	* tmp = classStats [ classNum ] -> getHistoryString ( )		804513	2		=			
ANR	804704	Identifier	tmp		804513	0					
ANR	804705	CallExpression	classStats [ classNum ] -> getHistoryString ( )		804513	1					
ANR	804706	Callee	classStats [ classNum ] -> getHistoryString		804513	0					
ANR	804707	PtrMemberAccess	classStats [ classNum ] -> getHistoryString		804513	0					
ANR	804708	ArrayIndexing	classStats [ classNum ]		804513	0					
ANR	804709	Identifier	classStats		804513	0					
ANR	804710	Identifier	classNum		804513	1					
ANR	804711	Identifier	getHistoryString		804513	1					
ANR	804712	ArgumentList			804513	1					
ANR	804713	IfStatement	if ( tmp )		804513	11					
ANR	804714	Condition	tmp	425:7:10014:10016	804513	0	True				
ANR	804715	Identifier	tmp		804513	0					
ANR	804716	CompoundStatement		29:13:889:889	804513	1					
ANR	804717	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s_%s = \\""0x%s\\"""" , ATTR_UPDATESTATS_HISTORY , name , tmp )"	426:3:10025:10126	804513	0	True				
ANR	804718	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s_%s = \\""0x%s\\"""" , ATTR_UPDATESTATS_HISTORY , name , tmp )"		804513	0					
ANR	804719	Callee	snprintf		804513	0					
ANR	804720	Identifier	snprintf		804513	0					
ANR	804721	ArgumentList	line		804513	1					
ANR	804722	Argument	line		804513	0					
ANR	804723	Identifier	line		804513	0					
ANR	804724	Argument	sizeof ( line )		804513	1					
ANR	804725	SizeofExpression	sizeof ( line )		804513	0					
ANR	804726	Sizeof	sizeof		804513	0					
ANR	804727	SizeofOperand	line		804513	1					
ANR	804728	Argument	"""%s_%s = \\""0x%s\\"""""		804513	2					
ANR	804729	PrimaryExpression	"""%s_%s = \\""0x%s\\"""""		804513	0					
ANR	804730	Argument	ATTR_UPDATESTATS_HISTORY		804513	3					
ANR	804731	Identifier	ATTR_UPDATESTATS_HISTORY		804513	0					
ANR	804732	Argument	name		804513	4					
ANR	804733	Identifier	name		804513	0					
ANR	804734	Argument	tmp		804513	5					
ANR	804735	Identifier	tmp		804513	0					
ANR	804736	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	429:3:10131:10158	804513	1	True				
ANR	804737	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		804513	0		=			
ANR	804738	ArrayIndexing	line [ sizeof ( line ) - 1 ]		804513	0					
ANR	804739	Identifier	line		804513	0					
ANR	804740	AdditiveExpression	sizeof ( line ) - 1		804513	1		-			
ANR	804741	SizeofExpression	sizeof ( line )		804513	0					
ANR	804742	Sizeof	sizeof		804513	0					
ANR	804743	SizeofOperand	line		804513	1					
ANR	804744	PrimaryExpression	1		804513	1					
ANR	804745	PrimaryExpression	'\\0'		804513	1					
ANR	804746	ExpressionStatement	ad -> Insert ( line )	430:3:10163:10179	804513	2	True				
ANR	804747	CallExpression	ad -> Insert ( line )		804513	0					
ANR	804748	Callee	ad -> Insert		804513	0					
ANR	804749	PtrMemberAccess	ad -> Insert		804513	0					
ANR	804750	Identifier	ad		804513	0					
ANR	804751	Identifier	Insert		804513	1					
ANR	804752	ArgumentList	line		804513	1					
ANR	804753	Argument	line		804513	0					
ANR	804754	Identifier	line		804513	0					
ANR	804755	Statement	delete	431:3:10184:10189	804513	3	True				
ANR	804756	Statement	[	431:10:10191:10191	804513	4	True				
ANR	804757	Statement	]	431:11:10192:10192	804513	5	True				
ANR	804758	ExpressionStatement	tmp	431:13:10194:10197	804513	6	True				
ANR	804759	Identifier	tmp		804513	0					
ANR	804760	ReturnStatement	return 0 ;	434:1:10207:10215	804513	4	True				
ANR	804761	PrimaryExpression	0		804513	0					
ANR	804762	ReturnType	int		804513	1					
ANR	804763	Identifier	CollectorClassStatsList :: publish		804513	2					
ANR	804764	ParameterList	ClassAd * ad		804513	3					
ANR	804765	Parameter	ClassAd * ad	396:34:9116:9126	804513	0	True				
ANR	804766	ParameterType	ClassAd *		804513	0					
ANR	804767	Identifier	ad		804513	1					
ANR	804768	CFGEntryNode	ENTRY		804513		True				
ANR	804769	CFGExitNode	EXIT		804513		True				
ANR	804770	Symbol	* * classNum		804513						
ANR	804771	Symbol	ad		804513						
ANR	804772	Symbol	last		804513						
ANR	804773	Symbol	classStats [ classNum ] -> getSequenced		804513						
ANR	804774	Symbol	line		804513						
ANR	804775	Symbol	classStats . getlast		804513						
ANR	804776	Symbol	classStats [ classNum ] -> getTotal		804513						
ANR	804777	Symbol	classNum		804513						
ANR	804778	Symbol	* line		804513						
ANR	804779	Symbol	classStats [ classNum ] -> getName		804513						
ANR	804780	Symbol	classStats		804513						
ANR	804781	Symbol	ATTR_UPDATESTATS_LOST		804513						
ANR	804782	Symbol	ATTR_UPDATESTATS_HISTORY		804513						
ANR	804783	Symbol	classStats [ classNum ] -> getHistoryString		804513						
ANR	804784	Symbol	ATTR_UPDATESTATS_SEQUENCED		804513						
ANR	804785	Symbol	tmp		804513						
ANR	804786	Symbol	name		804513						
ANR	804787	Symbol	* classStats		804513						
ANR	804788	Symbol	* * classStats		804513						
ANR	804789	Symbol	* classNum		804513						
ANR	804790	Symbol	classStats [ classNum ] -> getDropped		804513						
ANR	804791	Symbol	ATTR_UPDATESTATS_TOTAL		804513						
ANR	804792	Function	CollectorClassStatsList :: setHistorySize	438:0:10244:10585							
ANR	804793	FunctionDef	CollectorClassStatsList :: setHistorySize (int new_size)		804792	0					
ANR	804794	CompoundStatement		440:0:10305:10585	804792	0					
ANR	804795	IdentifierDeclStatement	int classNum ;	441:1:10308:10321	804792	0	True				
ANR	804796	IdentifierDecl	classNum		804792	0					
ANR	804797	IdentifierDeclType	int		804792	0					
ANR	804798	Identifier	classNum		804792	1					
ANR	804799	IdentifierDeclStatement	int last = classStats . getlast ( ) ;	442:1:10324:10356	804792	1	True				
ANR	804800	IdentifierDecl	last = classStats . getlast ( )		804792	0					
ANR	804801	IdentifierDeclType	int		804792	0					
ANR	804802	Identifier	last		804792	1					
ANR	804803	AssignmentExpression	last = classStats . getlast ( )		804792	2		=			
ANR	804804	Identifier	last		804792	0					
ANR	804805	CallExpression	classStats . getlast ( )		804792	1					
ANR	804806	Callee	classStats . getlast		804792	0					
ANR	804807	MemberAccess	classStats . getlast		804792	0					
ANR	804808	Identifier	classStats		804792	0					
ANR	804809	Identifier	getlast		804792	1					
ANR	804810	ArgumentList			804792	1					
ANR	804811	ForStatement	for ( classNum = 0 ; classNum <= last ; classNum ++ )		804792	2					
ANR	804812	ForInit	classNum = 0 ;	445:7:10406:10418	804792	0	True				
ANR	804813	AssignmentExpression	classNum = 0		804792	0		=			
ANR	804814	Identifier	classNum		804792	0					
ANR	804815	PrimaryExpression	0		804792	1					
ANR	804816	Condition	classNum <= last	445:22:10421:10436	804792	1	True				
ANR	804817	RelationalExpression	classNum <= last		804792	0		<=			
ANR	804818	Identifier	classNum		804792	0					
ANR	804819	Identifier	last		804792	1					
ANR	804820	PostIncDecOperationExpression	classNum ++	445:41:10440:10449	804792	2	True				
ANR	804821	Identifier	classNum		804792	0					
ANR	804822	IncDec	++		804792	1					
ANR	804823	CompoundStatement		6:54:147:147	804792	3					
ANR	804824	ExpressionStatement	classStats [ classNum ] -> setHistorySize ( new_size )	446:2:10457:10505	804792	0	True				
ANR	804825	CallExpression	classStats [ classNum ] -> setHistorySize ( new_size )		804792	0					
ANR	804826	Callee	classStats [ classNum ] -> setHistorySize		804792	0					
ANR	804827	PtrMemberAccess	classStats [ classNum ] -> setHistorySize		804792	0					
ANR	804828	ArrayIndexing	classStats [ classNum ]		804792	0					
ANR	804829	Identifier	classStats		804792	0					
ANR	804830	Identifier	classNum		804792	1					
ANR	804831	Identifier	setHistorySize		804792	1					
ANR	804832	ArgumentList	new_size		804792	1					
ANR	804833	Argument	new_size		804792	0					
ANR	804834	Identifier	new_size		804792	0					
ANR	804835	ExpressionStatement	historySize = new_size	450:1:10550:10572	804792	3	True				
ANR	804836	AssignmentExpression	historySize = new_size		804792	0		=			
ANR	804837	Identifier	historySize		804792	0					
ANR	804838	Identifier	new_size		804792	1					
ANR	804839	ReturnStatement	return 0 ;	451:1:10575:10583	804792	4	True				
ANR	804840	PrimaryExpression	0		804792	0					
ANR	804841	ReturnType	int		804792	1					
ANR	804842	Identifier	CollectorClassStatsList :: setHistorySize		804792	2					
ANR	804843	ParameterList	int new_size		804792	3					
ANR	804844	Parameter	int new_size	439:41:10290:10301	804792	0	True				
ANR	804845	ParameterType	int		804792	0					
ANR	804846	Identifier	new_size		804792	1					
ANR	804847	CFGEntryNode	ENTRY		804792		True				
ANR	804848	CFGExitNode	EXIT		804792		True				
ANR	804849	Symbol	last		804792						
ANR	804850	Symbol	new_size		804792						
ANR	804851	Symbol	classStats . getlast		804792						
ANR	804852	Symbol	* classStats		804792						
ANR	804853	Symbol	classNum		804792						
ANR	804854	Symbol	* classNum		804792						
ANR	804855	Symbol	classStats		804792						
ANR	804856	Symbol	historySize		804792						
ANR	804857	Function	CollectorDaemonStatsList :: CollectorDaemonStatsList	460:0:10748:11013							
ANR	804858	FunctionDef	"CollectorDaemonStatsList :: CollectorDaemonStatsList (bool nable , int history_size)"		804857	0					
ANR	804859	CompoundStatement		462:0:10844:11013	804857	0					
ANR	804860	ExpressionStatement	enabled = nable	463:1:10847:10862	804857	0	True				
ANR	804861	AssignmentExpression	enabled = nable		804857	0		=			
ANR	804862	Identifier	enabled		804857	0					
ANR	804863	Identifier	nable		804857	1					
ANR	804864	ExpressionStatement	historySize = history_size	464:1:10865:10891	804857	1	True				
ANR	804865	AssignmentExpression	historySize = history_size		804857	0		=			
ANR	804866	Identifier	historySize		804857	0					
ANR	804867	Identifier	history_size		804857	1					
ANR	804868	IfStatement	if ( enabled )		804857	2					
ANR	804869	Condition	enabled	465:6:10899:10905	804857	0	True				
ANR	804870	Identifier	enabled		804857	0					
ANR	804871	CompoundStatement		4:16:64:64	804857	1					
ANR	804872	ExpressionStatement	"hashTable = new StatsHashTable ( STATS_TABLE_SIZE , & hashFunction )"	466:2:10913:10978	804857	0	True				
ANR	804873	AssignmentExpression	"hashTable = new StatsHashTable ( STATS_TABLE_SIZE , & hashFunction )"		804857	0		=			
ANR	804874	Identifier	hashTable		804857	0					
ANR	804875	Expression	"STATS_TABLE_SIZE , & hashFunction"		804857	1					
ANR	804876	Identifier	STATS_TABLE_SIZE		804857	0					
ANR	804877	UnaryOperationExpression	& hashFunction		804857	1					
ANR	804878	UnaryOperator	&		804857	0					
ANR	804879	Identifier	hashFunction		804857	1					
ANR	804880	ElseStatement	else		804857	0					
ANR	804881	CompoundStatement		6:8:143:143	804857	0					
ANR	804882	ExpressionStatement	hashTable = NULL	468:2:10992:11008	804857	0	True				
ANR	804883	AssignmentExpression	hashTable = NULL		804857	0		=			
ANR	804884	Identifier	hashTable		804857	0					
ANR	804885	Identifier	NULL		804857	1					
ANR	804886	Identifier	CollectorDaemonStatsList :: CollectorDaemonStatsList		804857	1					
ANR	804887	ParameterList	"bool nable , int history_size"		804857	2					
ANR	804888	Parameter	bool nable	460:52:10800:10809	804857	0	True				
ANR	804889	ParameterType	bool		804857	0					
ANR	804890	Identifier	nable		804857	1					
ANR	804891	Parameter	int history_size	461:13:10825:10840	804857	1	True				
ANR	804892	ParameterType	int		804857	0					
ANR	804893	Identifier	history_size		804857	1					
ANR	804894	CFGEntryNode	ENTRY		804857		True				
ANR	804895	CFGExitNode	EXIT		804857		True				
ANR	804896	Symbol	history_size		804857						
ANR	804897	Symbol	hashTable		804857						
ANR	804898	Symbol	nable		804857						
ANR	804899	Symbol	NULL		804857						
ANR	804900	Symbol	& hashFunction		804857						
ANR	804901	Symbol	STATS_TABLE_SIZE		804857						
ANR	804902	Symbol	enabled		804857						
ANR	804903	Symbol	historySize		804857						
ANR	804904	Function	CollectorDaemonStatsList :: ~CollectorDaemonStatsList	473:0:11030:11360							
ANR	804905	FunctionDef	CollectorDaemonStatsList :: ~CollectorDaemonStatsList ()		804904	0					
ANR	804906	CompoundStatement		474:0:11090:11360	804904	0					
ANR	804907	IfStatement	if ( hashTable )		804904	0					
ANR	804908	Condition	hashTable	475:6:11098:11106	804904	0	True				
ANR	804909	Identifier	hashTable		804904	0					
ANR	804910	CompoundStatement		6:2:83:99	804904	1					
ANR	804911	IdentifierDeclStatement	CollectorBaseStats * ent ;	478:2:11147:11170	804904	0	True				
ANR	804912	IdentifierDecl	* ent		804904	0					
ANR	804913	IdentifierDeclType	CollectorBaseStats *		804904	0					
ANR	804914	Identifier	ent		804904	1					
ANR	804915	IdentifierDeclStatement	StatsHashKey key ;	479:2:11174:11190	804904	1	True				
ANR	804916	IdentifierDecl	key		804904	0					
ANR	804917	IdentifierDeclType	StatsHashKey		804904	0					
ANR	804918	Identifier	key		804904	1					
ANR	804919	ExpressionStatement	hashTable -> startIterations ( )	481:2:11196:11224	804904	2	True				
ANR	804920	CallExpression	hashTable -> startIterations ( )		804904	0					
ANR	804921	Callee	hashTable -> startIterations		804904	0					
ANR	804922	PtrMemberAccess	hashTable -> startIterations		804904	0					
ANR	804923	Identifier	hashTable		804904	0					
ANR	804924	Identifier	startIterations		804904	1					
ANR	804925	ArgumentList			804904	1					
ANR	804926	WhileStatement	"while ( hashTable -> iterate ( key , ent ) )"		804904	3					
ANR	804927	Condition	"hashTable -> iterate ( key , ent )"	482:10:11236:11263	804904	0	True				
ANR	804928	CallExpression	"hashTable -> iterate ( key , ent )"		804904	0					
ANR	804929	Callee	hashTable -> iterate		804904	0					
ANR	804930	PtrMemberAccess	hashTable -> iterate		804904	0					
ANR	804931	Identifier	hashTable		804904	0					
ANR	804932	Identifier	iterate		804904	1					
ANR	804933	ArgumentList	key		804904	1					
ANR	804934	Argument	key		804904	0					
ANR	804935	Identifier	key		804904	0					
ANR	804936	Argument	ent		804904	1					
ANR	804937	Identifier	ent		804904	0					
ANR	804938	CompoundStatement		9:41:176:176	804904	1					
ANR	804939	Statement	delete	483:3:11272:11277	804904	0	True				
ANR	804940	ExpressionStatement	ent	483:10:11279:11282	804904	1	True				
ANR	804941	Identifier	ent		804904	0					
ANR	804942	ExpressionStatement	hashTable -> remove ( key )	484:3:11287:11309	804904	2	True				
ANR	804943	CallExpression	hashTable -> remove ( key )		804904	0					
ANR	804944	Callee	hashTable -> remove		804904	0					
ANR	804945	PtrMemberAccess	hashTable -> remove		804904	0					
ANR	804946	Identifier	hashTable		804904	0					
ANR	804947	Identifier	remove		804904	1					
ANR	804948	ArgumentList	key		804904	1					
ANR	804949	Argument	key		804904	0					
ANR	804950	Identifier	key		804904	0					
ANR	804951	Statement	delete	487:2:11319:11324	804904	4	True				
ANR	804952	ExpressionStatement	hashTable	487:9:11326:11335	804904	5	True				
ANR	804953	Identifier	hashTable		804904	0					
ANR	804954	ExpressionStatement	hashTable = NULL	488:2:11339:11355	804904	6	True				
ANR	804955	AssignmentExpression	hashTable = NULL		804904	0		=			
ANR	804956	Identifier	hashTable		804904	0					
ANR	804957	Identifier	NULL		804904	1					
ANR	804958	Identifier	CollectorDaemonStatsList :: ~CollectorDaemonStatsList		804904	1					
ANR	804959	ParameterList			804904	2					
ANR	804960	CFGEntryNode	ENTRY		804904		True				
ANR	804961	CFGExitNode	EXIT		804904		True				
ANR	804962	Symbol	hashTable		804904						
ANR	804963	Symbol	hashTable -> iterate		804904						
ANR	804964	Symbol	NULL		804904						
ANR	804965	Symbol	ent		804904						
ANR	804966	Symbol	key		804904						
ANR	804967	Symbol	* hashTable		804904						
ANR	804968	Function	CollectorDaemonStatsList :: updateStats	493:0:11384:13222							
ANR	804969	FunctionDef	"CollectorDaemonStatsList :: updateStats (const char * class_name , ClassAd * ad , bool sequenced , int dropped)"		804968	0					
ANR	804970	CompoundStatement		498:0:11530:13222	804968	0					
ANR	804971	IdentifierDeclStatement	StatsHashKey key ;	499:1:11533:11550	804968	0	True				
ANR	804972	IdentifierDecl	key		804968	0					
ANR	804973	IdentifierDeclType	StatsHashKey		804968	0					
ANR	804974	Identifier	key		804968	1					
ANR	804975	IdentifierDeclStatement	bool hash_ok = false ;	500:1:11553:11576	804968	1	True				
ANR	804976	IdentifierDecl	hash_ok = false		804968	0					
ANR	804977	IdentifierDeclType	bool		804968	0					
ANR	804978	Identifier	hash_ok		804968	1					
ANR	804979	AssignmentExpression	hash_ok = false		804968	2		=			
ANR	804980	Identifier	false		804968	0					
ANR	804981	Identifier	false		804968	1					
ANR	804982	IdentifierDeclStatement	CollectorBaseStats * daemon ;	501:1:11579:11605	804968	2	True				
ANR	804983	IdentifierDecl	* daemon		804968	0					
ANR	804984	IdentifierDeclType	CollectorBaseStats *		804968	0					
ANR	804985	Identifier	daemon		804968	1					
ANR	804986	IfStatement	if ( ( ! enabled ) || ( ! hashTable ) )		804968	3					
ANR	804987	Condition	( ! enabled ) || ( ! hashTable )	504:6:11658:11689	804968	0	True				
ANR	804988	OrExpression	( ! enabled ) || ( ! hashTable )		804968	0		||			
ANR	804989	UnaryOperationExpression	! enabled		804968	0					
ANR	804990	UnaryOperator	!		804968	0					
ANR	804991	Identifier	enabled		804968	1					
ANR	804992	UnaryOperationExpression	! hashTable		804968	1					
ANR	804993	UnaryOperator	!		804968	0					
ANR	804994	Identifier	hashTable		804968	1					
ANR	804995	CompoundStatement		7:41:162:162	804968	1					
ANR	804996	ReturnStatement	return 0 ;	505:2:11697:11705	804968	0	True				
ANR	804997	PrimaryExpression	0		804968	0					
ANR	804998	ExpressionStatement	"hash_ok = hashKey ( key , class_name , ad )"	509:1:11750:11791	804968	4	True				
ANR	804999	AssignmentExpression	"hash_ok = hashKey ( key , class_name , ad )"		804968	0		=			
ANR	805000	Identifier	hash_ok		804968	0					
ANR	805001	CallExpression	"hashKey ( key , class_name , ad )"		804968	1					
ANR	805002	Callee	hashKey		804968	0					
ANR	805003	Identifier	hashKey		804968	0					
ANR	805004	ArgumentList	key		804968	1					
ANR	805005	Argument	key		804968	0					
ANR	805006	Identifier	key		804968	0					
ANR	805007	Argument	class_name		804968	1					
ANR	805008	Identifier	class_name		804968	0					
ANR	805009	Argument	ad		804968	2					
ANR	805010	Identifier	ad		804968	0					
ANR	805011	IfStatement	if ( ! hash_ok )		804968	5					
ANR	805012	Condition	! hash_ok	510:6:11799:11807	804968	0	True				
ANR	805013	UnaryOperationExpression	! hash_ok		804968	0					
ANR	805014	UnaryOperator	!		804968	0					
ANR	805015	Identifier	hash_ok		804968	1					
ANR	805016	CompoundStatement		13:18:280:280	804968	1					
ANR	805017	ReturnStatement	return - 1 ;	511:2:11815:11824	804968	0	True				
ANR	805018	UnaryOperationExpression	- 1		804968	0					
ANR	805019	UnaryOperator	-		804968	0					
ANR	805020	PrimaryExpression	1		804968	1					
ANR	805021	IfStatement	"if ( hashTable -> lookup ( key , daemon ) == - 1 )"		804968	6					
ANR	805022	Condition	"hashTable -> lookup ( key , daemon ) == - 1"	516:6:11902:11940	804968	0	True				
ANR	805023	EqualityExpression	"hashTable -> lookup ( key , daemon ) == - 1"		804968	0		==			
ANR	805024	CallExpression	"hashTable -> lookup ( key , daemon )"		804968	0					
ANR	805025	Callee	hashTable -> lookup		804968	0					
ANR	805026	PtrMemberAccess	hashTable -> lookup		804968	0					
ANR	805027	Identifier	hashTable		804968	0					
ANR	805028	Identifier	lookup		804968	1					
ANR	805029	ArgumentList	key		804968	1					
ANR	805030	Argument	key		804968	0					
ANR	805031	Identifier	key		804968	0					
ANR	805032	Argument	daemon		804968	1					
ANR	805033	Identifier	daemon		804968	0					
ANR	805034	UnaryOperationExpression	- 1		804968	1					
ANR	805035	UnaryOperator	-		804968	0					
ANR	805036	PrimaryExpression	1		804968	1					
ANR	805037	CompoundStatement		23:2:504:519	804968	1					
ANR	805038	ExpressionStatement	daemon = new CollectorBaseStats ( historySize )	517:2:11948:11994	804968	0	True				
ANR	805039	AssignmentExpression	daemon = new CollectorBaseStats ( historySize )		804968	0		=			
ANR	805040	Identifier	daemon		804968	0					
ANR	805041	Identifier	historySize		804968	1					
ANR	805042	ExpressionStatement	"hashTable -> insert ( key , daemon )"	518:2:11998:12030	804968	1	True				
ANR	805043	CallExpression	"hashTable -> insert ( key , daemon )"		804968	0					
ANR	805044	Callee	hashTable -> insert		804968	0					
ANR	805045	PtrMemberAccess	hashTable -> insert		804968	0					
ANR	805046	Identifier	hashTable		804968	0					
ANR	805047	Identifier	insert		804968	1					
ANR	805048	ArgumentList	key		804968	1					
ANR	805049	Argument	key		804968	0					
ANR	805050	Identifier	key		804968	0					
ANR	805051	Argument	daemon		804968	1					
ANR	805052	Identifier	daemon		804968	0					
ANR	805053	IdentifierDeclStatement	MyString string ;	520:2:12035:12050	804968	2	True				
ANR	805054	IdentifierDecl	string		804968	0					
ANR	805055	IdentifierDeclType	MyString		804968	0					
ANR	805056	Identifier	string		804968	1					
ANR	805057	ExpressionStatement	key . getstr ( string )	521:2:12054:12074	804968	3	True				
ANR	805058	CallExpression	key . getstr ( string )		804968	0					
ANR	805059	Callee	key . getstr		804968	0					
ANR	805060	MemberAccess	key . getstr		804968	0					
ANR	805061	Identifier	key		804968	0					
ANR	805062	Identifier	getstr		804968	1					
ANR	805063	ArgumentList	string		804968	1					
ANR	805064	Argument	string		804968	0					
ANR	805065	Identifier	string		804968	0					
ANR	805066	ExpressionStatement	"dprintf ( D_ALWAYS , ""stats: Inserting new hashent for %s\\n"" , string . Value ( ) )"	522:2:12078:12159	804968	4	True				
ANR	805067	CallExpression	"dprintf ( D_ALWAYS , ""stats: Inserting new hashent for %s\\n"" , string . Value ( ) )"		804968	0					
ANR	805068	Callee	dprintf		804968	0					
ANR	805069	Identifier	dprintf		804968	0					
ANR	805070	ArgumentList	D_ALWAYS		804968	1					
ANR	805071	Argument	D_ALWAYS		804968	0					
ANR	805072	Identifier	D_ALWAYS		804968	0					
ANR	805073	Argument	"""stats: Inserting new hashent for %s\\n"""		804968	1					
ANR	805074	PrimaryExpression	"""stats: Inserting new hashent for %s\\n"""		804968	0					
ANR	805075	Argument	string . Value ( )		804968	2					
ANR	805076	CallExpression	string . Value ( )		804968	0					
ANR	805077	Callee	string . Value		804968	0					
ANR	805078	MemberAccess	string . Value		804968	0					
ANR	805079	Identifier	string		804968	0					
ANR	805080	Identifier	Value		804968	1					
ANR	805081	ArgumentList			804968	1					
ANR	805082	IdentifierDeclStatement	int size = daemon -> getHistoryStringLen ( ) ;	527:1:12211:12253	804968	7	True				
ANR	805083	IdentifierDecl	size = daemon -> getHistoryStringLen ( )		804968	0					
ANR	805084	IdentifierDeclType	int		804968	0					
ANR	805085	Identifier	size		804968	1					
ANR	805086	AssignmentExpression	size = daemon -> getHistoryStringLen ( )		804968	2		=			
ANR	805087	Identifier	size		804968	0					
ANR	805088	CallExpression	daemon -> getHistoryStringLen ( )		804968	1					
ANR	805089	Callee	daemon -> getHistoryStringLen		804968	0					
ANR	805090	PtrMemberAccess	daemon -> getHistoryStringLen		804968	0					
ANR	805091	Identifier	daemon		804968	0					
ANR	805092	Identifier	getHistoryStringLen		804968	1					
ANR	805093	ArgumentList			804968	1					
ANR	805094	IfStatement	if ( size < 10 )		804968	8					
ANR	805095	Condition	size < 10	528:6:12261:12269	804968	0	True				
ANR	805096	RelationalExpression	size < 10		804968	0		<			
ANR	805097	Identifier	size		804968	0					
ANR	805098	PrimaryExpression	10		804968	1					
ANR	805099	CompoundStatement		31:18:742:742	804968	1					
ANR	805100	ExpressionStatement	size = 10	529:2:12277:12286	804968	0	True				
ANR	805101	AssignmentExpression	size = 10		804968	0		=			
ANR	805102	Identifier	size		804968	0					
ANR	805103	PrimaryExpression	10		804968	1					
ANR	805104	ExpressionStatement	size += strlen ( ATTR_UPDATESTATS_SEQUENCED )	531:1:12292:12336	804968	9	True				
ANR	805105	AssignmentExpression	size += strlen ( ATTR_UPDATESTATS_SEQUENCED )		804968	0		+=			
ANR	805106	Identifier	size		804968	0					
ANR	805107	CallExpression	strlen ( ATTR_UPDATESTATS_SEQUENCED )		804968	1					
ANR	805108	Callee	strlen		804968	0					
ANR	805109	Identifier	strlen		804968	0					
ANR	805110	ArgumentList	ATTR_UPDATESTATS_SEQUENCED		804968	1					
ANR	805111	Argument	ATTR_UPDATESTATS_SEQUENCED		804968	0					
ANR	805112	Identifier	ATTR_UPDATESTATS_SEQUENCED		804968	0					
ANR	805113	ExpressionStatement	size += 20	532:1:12354:12364	804968	10	True				
ANR	805114	AssignmentExpression	size += 20		804968	0		+=			
ANR	805115	Identifier	size		804968	0					
ANR	805116	PrimaryExpression	20		804968	1					
ANR	805117	IdentifierDeclStatement	char * line = new char [ size + 1 ] ;	533:4:12402:12433	804968	11	True				
ANR	805118	IdentifierDecl	* line = new char [ size + 1 ]		804968	0					
ANR	805119	IdentifierDeclType	char *		804968	0					
ANR	805120	Identifier	line		804968	1					
ANR	805121	AssignmentExpression	* line = new char [ size + 1 ]		804968	2		=			
ANR	805122	Identifier	line		804968	0					
ANR	805123	AdditiveExpression	size + 1		804968	1		+			
ANR	805124	Identifier	size		804968	0					
ANR	805125	PrimaryExpression	1		804968	1					
ANR	805126	ExpressionStatement	"daemon -> updateStats ( sequenced , dropped )"	536:1:12469:12510	804968	12	True				
ANR	805127	CallExpression	"daemon -> updateStats ( sequenced , dropped )"		804968	0					
ANR	805128	Callee	daemon -> updateStats		804968	0					
ANR	805129	PtrMemberAccess	daemon -> updateStats		804968	0					
ANR	805130	Identifier	daemon		804968	0					
ANR	805131	Identifier	updateStats		804968	1					
ANR	805132	ArgumentList	sequenced		804968	1					
ANR	805133	Argument	sequenced		804968	0					
ANR	805134	Identifier	sequenced		804968	0					
ANR	805135	Argument	dropped		804968	1					
ANR	805136	Identifier	dropped		804968	0					
ANR	805137	ExpressionStatement	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_TOTAL , daemon -> getTotal ( ) )"	538:1:12514:12602	804968	13	True				
ANR	805138	CallExpression	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_TOTAL , daemon -> getTotal ( ) )"		804968	0					
ANR	805139	Callee	snprintf		804968	0					
ANR	805140	Identifier	snprintf		804968	0					
ANR	805141	ArgumentList	line		804968	1					
ANR	805142	Argument	line		804968	0					
ANR	805143	Identifier	line		804968	0					
ANR	805144	Argument	size		804968	1					
ANR	805145	Identifier	size		804968	0					
ANR	805146	Argument	"""%s = %d"""		804968	2					
ANR	805147	PrimaryExpression	"""%s = %d"""		804968	0					
ANR	805148	Argument	ATTR_UPDATESTATS_TOTAL		804968	3					
ANR	805149	Identifier	ATTR_UPDATESTATS_TOTAL		804968	0					
ANR	805150	Argument	daemon -> getTotal ( )		804968	4					
ANR	805151	CallExpression	daemon -> getTotal ( )		804968	0					
ANR	805152	Callee	daemon -> getTotal		804968	0					
ANR	805153	PtrMemberAccess	daemon -> getTotal		804968	0					
ANR	805154	Identifier	daemon		804968	0					
ANR	805155	Identifier	getTotal		804968	1					
ANR	805156	ArgumentList			804968	1					
ANR	805157	ExpressionStatement	line [ size ] = '\\0'	541:1:12605:12622	804968	14	True				
ANR	805158	AssignmentExpression	line [ size ] = '\\0'		804968	0		=			
ANR	805159	ArrayIndexing	line [ size ]		804968	0					
ANR	805160	Identifier	line		804968	0					
ANR	805161	Identifier	size		804968	1					
ANR	805162	PrimaryExpression	'\\0'		804968	1					
ANR	805163	ExpressionStatement	ad -> Insert ( line )	542:1:12625:12641	804968	15	True				
ANR	805164	CallExpression	ad -> Insert ( line )		804968	0					
ANR	805165	Callee	ad -> Insert		804968	0					
ANR	805166	PtrMemberAccess	ad -> Insert		804968	0					
ANR	805167	Identifier	ad		804968	0					
ANR	805168	Identifier	Insert		804968	1					
ANR	805169	ArgumentList	line		804968	1					
ANR	805170	Argument	line		804968	0					
ANR	805171	Identifier	line		804968	0					
ANR	805172	ExpressionStatement	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , daemon -> getSequenced ( ) )"	544:1:12645:12741	804968	16	True				
ANR	805173	CallExpression	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , daemon -> getSequenced ( ) )"		804968	0					
ANR	805174	Callee	snprintf		804968	0					
ANR	805175	Identifier	snprintf		804968	0					
ANR	805176	ArgumentList	line		804968	1					
ANR	805177	Argument	line		804968	0					
ANR	805178	Identifier	line		804968	0					
ANR	805179	Argument	size		804968	1					
ANR	805180	Identifier	size		804968	0					
ANR	805181	Argument	"""%s = %d"""		804968	2					
ANR	805182	PrimaryExpression	"""%s = %d"""		804968	0					
ANR	805183	Argument	ATTR_UPDATESTATS_SEQUENCED		804968	3					
ANR	805184	Identifier	ATTR_UPDATESTATS_SEQUENCED		804968	0					
ANR	805185	Argument	daemon -> getSequenced ( )		804968	4					
ANR	805186	CallExpression	daemon -> getSequenced ( )		804968	0					
ANR	805187	Callee	daemon -> getSequenced		804968	0					
ANR	805188	PtrMemberAccess	daemon -> getSequenced		804968	0					
ANR	805189	Identifier	daemon		804968	0					
ANR	805190	Identifier	getSequenced		804968	1					
ANR	805191	ArgumentList			804968	1					
ANR	805192	ExpressionStatement	line [ size ] = '\\0'	547:1:12744:12761	804968	17	True				
ANR	805193	AssignmentExpression	line [ size ] = '\\0'		804968	0		=			
ANR	805194	ArrayIndexing	line [ size ]		804968	0					
ANR	805195	Identifier	line		804968	0					
ANR	805196	Identifier	size		804968	1					
ANR	805197	PrimaryExpression	'\\0'		804968	1					
ANR	805198	ExpressionStatement	ad -> Insert ( line )	548:1:12764:12780	804968	18	True				
ANR	805199	CallExpression	ad -> Insert ( line )		804968	0					
ANR	805200	Callee	ad -> Insert		804968	0					
ANR	805201	PtrMemberAccess	ad -> Insert		804968	0					
ANR	805202	Identifier	ad		804968	0					
ANR	805203	Identifier	Insert		804968	1					
ANR	805204	ArgumentList	line		804968	1					
ANR	805205	Argument	line		804968	0					
ANR	805206	Identifier	line		804968	0					
ANR	805207	ExpressionStatement	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_LOST , daemon -> getDropped ( ) )"	550:1:12784:12872	804968	19	True				
ANR	805208	CallExpression	"snprintf ( line , size , ""%s = %d"" , ATTR_UPDATESTATS_LOST , daemon -> getDropped ( ) )"		804968	0					
ANR	805209	Callee	snprintf		804968	0					
ANR	805210	Identifier	snprintf		804968	0					
ANR	805211	ArgumentList	line		804968	1					
ANR	805212	Argument	line		804968	0					
ANR	805213	Identifier	line		804968	0					
ANR	805214	Argument	size		804968	1					
ANR	805215	Identifier	size		804968	0					
ANR	805216	Argument	"""%s = %d"""		804968	2					
ANR	805217	PrimaryExpression	"""%s = %d"""		804968	0					
ANR	805218	Argument	ATTR_UPDATESTATS_LOST		804968	3					
ANR	805219	Identifier	ATTR_UPDATESTATS_LOST		804968	0					
ANR	805220	Argument	daemon -> getDropped ( )		804968	4					
ANR	805221	CallExpression	daemon -> getDropped ( )		804968	0					
ANR	805222	Callee	daemon -> getDropped		804968	0					
ANR	805223	PtrMemberAccess	daemon -> getDropped		804968	0					
ANR	805224	Identifier	daemon		804968	0					
ANR	805225	Identifier	getDropped		804968	1					
ANR	805226	ArgumentList			804968	1					
ANR	805227	ExpressionStatement	line [ size ] = '\\0'	553:1:12875:12892	804968	20	True				
ANR	805228	AssignmentExpression	line [ size ] = '\\0'		804968	0		=			
ANR	805229	ArrayIndexing	line [ size ]		804968	0					
ANR	805230	Identifier	line		804968	0					
ANR	805231	Identifier	size		804968	1					
ANR	805232	PrimaryExpression	'\\0'		804968	1					
ANR	805233	ExpressionStatement	ad -> Insert ( line )	554:1:12895:12911	804968	21	True				
ANR	805234	CallExpression	ad -> Insert ( line )		804968	0					
ANR	805235	Callee	ad -> Insert		804968	0					
ANR	805236	PtrMemberAccess	ad -> Insert		804968	0					
ANR	805237	Identifier	ad		804968	0					
ANR	805238	Identifier	Insert		804968	1					
ANR	805239	ArgumentList	line		804968	1					
ANR	805240	Argument	line		804968	0					
ANR	805241	Identifier	line		804968	0					
ANR	805242	IdentifierDeclStatement	char * tmp = daemon -> getHistoryString ( ) ;	557:1:12968:13007	804968	22	True				
ANR	805243	IdentifierDecl	* tmp = daemon -> getHistoryString ( )		804968	0					
ANR	805244	IdentifierDeclType	char *		804968	0					
ANR	805245	Identifier	tmp		804968	1					
ANR	805246	AssignmentExpression	* tmp = daemon -> getHistoryString ( )		804968	2		=			
ANR	805247	Identifier	tmp		804968	0					
ANR	805248	CallExpression	daemon -> getHistoryString ( )		804968	1					
ANR	805249	Callee	daemon -> getHistoryString		804968	0					
ANR	805250	PtrMemberAccess	daemon -> getHistoryString		804968	0					
ANR	805251	Identifier	daemon		804968	0					
ANR	805252	Identifier	getHistoryString		804968	1					
ANR	805253	ArgumentList			804968	1					
ANR	805254	IfStatement	if ( tmp )		804968	23					
ANR	805255	Condition	tmp	558:6:13015:13017	804968	0	True				
ANR	805256	Identifier	tmp		804968	0					
ANR	805257	CompoundStatement		61:12:1490:1490	804968	1					
ANR	805258	ExpressionStatement	"snprintf ( line , size , ""%s = \\""0x%s\\"""" , ATTR_UPDATESTATS_HISTORY , tmp )"	559:2:13025:13101	804968	0	True				
ANR	805259	CallExpression	"snprintf ( line , size , ""%s = \\""0x%s\\"""" , ATTR_UPDATESTATS_HISTORY , tmp )"		804968	0					
ANR	805260	Callee	snprintf		804968	0					
ANR	805261	Identifier	snprintf		804968	0					
ANR	805262	ArgumentList	line		804968	1					
ANR	805263	Argument	line		804968	0					
ANR	805264	Identifier	line		804968	0					
ANR	805265	Argument	size		804968	1					
ANR	805266	Identifier	size		804968	0					
ANR	805267	Argument	"""%s = \\""0x%s\\"""""		804968	2					
ANR	805268	PrimaryExpression	"""%s = \\""0x%s\\"""""		804968	0					
ANR	805269	Argument	ATTR_UPDATESTATS_HISTORY		804968	3					
ANR	805270	Identifier	ATTR_UPDATESTATS_HISTORY		804968	0					
ANR	805271	Argument	tmp		804968	4					
ANR	805272	Identifier	tmp		804968	0					
ANR	805273	ExpressionStatement	line [ size ] = '\\0'	561:2:13105:13122	804968	1	True				
ANR	805274	AssignmentExpression	line [ size ] = '\\0'		804968	0		=			
ANR	805275	ArrayIndexing	line [ size ]		804968	0					
ANR	805276	Identifier	line		804968	0					
ANR	805277	Identifier	size		804968	1					
ANR	805278	PrimaryExpression	'\\0'		804968	1					
ANR	805279	ExpressionStatement	ad -> Insert ( line )	562:2:13126:13142	804968	2	True				
ANR	805280	CallExpression	ad -> Insert ( line )		804968	0					
ANR	805281	Callee	ad -> Insert		804968	0					
ANR	805282	PtrMemberAccess	ad -> Insert		804968	0					
ANR	805283	Identifier	ad		804968	0					
ANR	805284	Identifier	Insert		804968	1					
ANR	805285	ArgumentList	line		804968	1					
ANR	805286	Argument	line		804968	0					
ANR	805287	Identifier	line		804968	0					
ANR	805288	Statement	delete	563:2:13146:13151	804968	3	True				
ANR	805289	Statement	[	563:9:13153:13153	804968	4	True				
ANR	805290	Statement	]	563:10:13154:13154	804968	5	True				
ANR	805291	ExpressionStatement	tmp	563:12:13156:13159	804968	6	True				
ANR	805292	Identifier	tmp		804968	0					
ANR	805293	Statement	delete	567:1:13194:13199	804968	24	True				
ANR	805294	Statement	[	567:8:13201:13201	804968	25	True				
ANR	805295	Statement	]	567:9:13202:13202	804968	26	True				
ANR	805296	ExpressionStatement	line	567:11:13204:13208	804968	27	True				
ANR	805297	Identifier	line		804968	0					
ANR	805298	ReturnStatement	return 0 ;	569:1:13212:13220	804968	28	True				
ANR	805299	PrimaryExpression	0		804968	0					
ANR	805300	ReturnType	int		804968	1					
ANR	805301	Identifier	CollectorDaemonStatsList :: updateStats		804968	2					
ANR	805302	ParameterList	"const char * class_name , ClassAd * ad , bool sequenced , int dropped"		804968	3					
ANR	805303	Parameter	const char * class_name	494:39:11427:11448	804968	0	True				
ANR	805304	ParameterType	const char *		804968	0					
ANR	805305	Identifier	class_name		804968	1					
ANR	805306	Parameter	ClassAd * ad	495:12:11463:11473	804968	1	True				
ANR	805307	ParameterType	ClassAd *		804968	0					
ANR	805308	Identifier	ad		804968	1					
ANR	805309	Parameter	bool sequenced	496:12:11488:11501	804968	2	True				
ANR	805310	ParameterType	bool		804968	0					
ANR	805311	Identifier	sequenced		804968	1					
ANR	805312	Parameter	int dropped	497:12:11516:11526	804968	3	True				
ANR	805313	ParameterType	int		804968	0					
ANR	805314	Identifier	dropped		804968	1					
ANR	805315	CFGEntryNode	ENTRY		804968		True				
ANR	805316	CFGExitNode	EXIT		804968		True				
ANR	805317	Symbol	hashTable -> lookup		804968						
ANR	805318	Symbol	string		804968						
ANR	805319	Symbol	line		804968						
ANR	805320	Symbol	daemon -> getSequenced		804968						
ANR	805321	Symbol	dropped		804968						
ANR	805322	Symbol	* line		804968						
ANR	805323	Symbol	enabled		804968						
ANR	805324	Symbol	ATTR_UPDATESTATS_LOST		804968						
ANR	805325	Symbol	historySize		804968						
ANR	805326	Symbol	strlen		804968						
ANR	805327	Symbol	ATTR_UPDATESTATS_HISTORY		804968						
ANR	805328	Symbol	* size		804968						
ANR	805329	Symbol	tmp		804968						
ANR	805330	Symbol	daemon -> getHistoryString		804968						
ANR	805331	Symbol	string . Value		804968						
ANR	805332	Symbol	* daemon		804968						
ANR	805333	Symbol	class_name		804968						
ANR	805334	Symbol	sequenced		804968						
ANR	805335	Symbol	key		804968						
ANR	805336	Symbol	ATTR_UPDATESTATS_TOTAL		804968						
ANR	805337	Symbol	daemon -> getDropped		804968						
ANR	805338	Symbol	hashKey		804968						
ANR	805339	Symbol	ad		804968						
ANR	805340	Symbol	false		804968						
ANR	805341	Symbol	D_ALWAYS		804968						
ANR	805342	Symbol	* hashTable		804968						
ANR	805343	Symbol	daemon -> getHistoryStringLen		804968						
ANR	805344	Symbol	daemon		804968						
ANR	805345	Symbol	hashTable		804968						
ANR	805346	Symbol	size		804968						
ANR	805347	Symbol	ATTR_UPDATESTATS_SEQUENCED		804968						
ANR	805348	Symbol	daemon -> getTotal		804968						
ANR	805349	Symbol	hash_ok		804968						
ANR	805350	Function	CollectorDaemonStatsList :: setHistorySize	580:0:13363:13711							
ANR	805351	FunctionDef	CollectorDaemonStatsList :: setHistorySize (int new_size)		805350	0					
ANR	805352	CompoundStatement		582:0:13425:13711	805350	0					
ANR	805353	IfStatement	if ( ! hashTable )		805350	0					
ANR	805354	Condition	! hashTable	583:6:13433:13443	805350	0	True				
ANR	805355	UnaryOperationExpression	! hashTable		805350	0					
ANR	805356	UnaryOperator	!		805350	0					
ANR	805357	Identifier	hashTable		805350	1					
ANR	805358	CompoundStatement		2:20:21:21	805350	1					
ANR	805359	ReturnStatement	return 0 ;	584:2:13451:13459	805350	0	True				
ANR	805360	PrimaryExpression	0		805350	0					
ANR	805361	IdentifierDeclStatement	CollectorBaseStats * daemon ;	587:1:13466:13492	805350	1	True				
ANR	805362	IdentifierDecl	* daemon		805350	0					
ANR	805363	IdentifierDeclType	CollectorBaseStats *		805350	0					
ANR	805364	Identifier	daemon		805350	1					
ANR	805365	ExpressionStatement	hashTable -> startIterations ( )	590:1:13520:13549	805350	2	True				
ANR	805366	CallExpression	hashTable -> startIterations ( )		805350	0					
ANR	805367	Callee	hashTable -> startIterations		805350	0					
ANR	805368	PtrMemberAccess	hashTable -> startIterations		805350	0					
ANR	805369	Identifier	hashTable		805350	0					
ANR	805370	Identifier	startIterations		805350	1					
ANR	805371	ArgumentList			805350	1					
ANR	805372	WhileStatement	while ( hashTable -> iterate ( daemon ) )		805350	3					
ANR	805373	Condition	hashTable -> iterate ( daemon )	591:9:13560:13588	805350	0	True				
ANR	805374	CallExpression	hashTable -> iterate ( daemon )		805350	0					
ANR	805375	Callee	hashTable -> iterate		805350	0					
ANR	805376	PtrMemberAccess	hashTable -> iterate		805350	0					
ANR	805377	Identifier	hashTable		805350	0					
ANR	805378	Identifier	iterate		805350	1					
ANR	805379	ArgumentList	daemon		805350	1					
ANR	805380	Argument	daemon		805350	0					
ANR	805381	Identifier	daemon		805350	0					
ANR	805382	CompoundStatement		11:1:167:167	805350	1					
ANR	805383	ExpressionStatement	daemon -> setHistorySize ( new_size )	593:2:13597:13631	805350	0	True				
ANR	805384	CallExpression	daemon -> setHistorySize ( new_size )		805350	0					
ANR	805385	Callee	daemon -> setHistorySize		805350	0					
ANR	805386	PtrMemberAccess	daemon -> setHistorySize		805350	0					
ANR	805387	Identifier	daemon		805350	0					
ANR	805388	Identifier	setHistorySize		805350	1					
ANR	805389	ArgumentList	new_size		805350	1					
ANR	805390	Argument	new_size		805350	0					
ANR	805391	Identifier	new_size		805350	0					
ANR	805392	ExpressionStatement	historySize = new_size	597:1:13676:13698	805350	4	True				
ANR	805393	AssignmentExpression	historySize = new_size		805350	0		=			
ANR	805394	Identifier	historySize		805350	0					
ANR	805395	Identifier	new_size		805350	1					
ANR	805396	ReturnStatement	return 0 ;	598:1:13701:13709	805350	5	True				
ANR	805397	PrimaryExpression	0		805350	0					
ANR	805398	ReturnType	int		805350	1					
ANR	805399	Identifier	CollectorDaemonStatsList :: setHistorySize		805350	2					
ANR	805400	ParameterList	int new_size		805350	3					
ANR	805401	Parameter	int new_size	581:42:13410:13421	805350	0	True				
ANR	805402	ParameterType	int		805350	0					
ANR	805403	Identifier	new_size		805350	1					
ANR	805404	CFGEntryNode	ENTRY		805350		True				
ANR	805405	CFGExitNode	EXIT		805350		True				
ANR	805406	Symbol	hashTable		805350						
ANR	805407	Symbol	hashTable -> iterate		805350						
ANR	805408	Symbol	new_size		805350						
ANR	805409	Symbol	* hashTable		805350						
ANR	805410	Symbol	daemon		805350						
ANR	805411	Symbol	historySize		805350						
ANR	805412	Function	CollectorDaemonStatsList :: enable	602:0:13752:14162							
ANR	805413	FunctionDef	CollectorDaemonStatsList :: enable (bool nable)		805412	0					
ANR	805414	CompoundStatement		604:0:13804:14162	805412	0					
ANR	805415	ExpressionStatement	enabled = nable	605:1:13807:13822	805412	0	True				
ANR	805416	AssignmentExpression	enabled = nable		805412	0		=			
ANR	805417	Identifier	enabled		805412	0					
ANR	805418	Identifier	nable		805412	1					
ANR	805419	IfStatement	if ( ( enabled ) && ( ! hashTable ) )		805412	1					
ANR	805420	Condition	( enabled ) && ( ! hashTable )	606:6:13830:13859	805412	0	True				
ANR	805421	AndExpression	( enabled ) && ( ! hashTable )		805412	0		&&			
ANR	805422	Identifier	enabled		805412	0					
ANR	805423	UnaryOperationExpression	! hashTable		805412	1					
ANR	805424	UnaryOperator	!		805412	0					
ANR	805425	Identifier	hashTable		805412	1					
ANR	805426	CompoundStatement		3:39:58:58	805412	1					
ANR	805427	ExpressionStatement	"dprintf ( D_ALWAYS , ""enable: Creating stats hash table\\n"" )"	607:2:13867:13925	805412	0	True				
ANR	805428	CallExpression	"dprintf ( D_ALWAYS , ""enable: Creating stats hash table\\n"" )"		805412	0					
ANR	805429	Callee	dprintf		805412	0					
ANR	805430	Identifier	dprintf		805412	0					
ANR	805431	ArgumentList	D_ALWAYS		805412	1					
ANR	805432	Argument	D_ALWAYS		805412	0					
ANR	805433	Identifier	D_ALWAYS		805412	0					
ANR	805434	Argument	"""enable: Creating stats hash table\\n"""		805412	1					
ANR	805435	PrimaryExpression	"""enable: Creating stats hash table\\n"""		805412	0					
ANR	805436	ExpressionStatement	"hashTable = new StatsHashTable ( STATS_TABLE_SIZE , & hashFunction )"	608:2:13929:13994	805412	1	True				
ANR	805437	AssignmentExpression	"hashTable = new StatsHashTable ( STATS_TABLE_SIZE , & hashFunction )"		805412	0		=			
ANR	805438	Identifier	hashTable		805412	0					
ANR	805439	Expression	"STATS_TABLE_SIZE , & hashFunction"		805412	1					
ANR	805440	Identifier	STATS_TABLE_SIZE		805412	0					
ANR	805441	UnaryOperationExpression	& hashFunction		805412	1					
ANR	805442	UnaryOperator	&		805412	0					
ANR	805443	Identifier	hashFunction		805412	1					
ANR	805444	ElseStatement	else		805412	0					
ANR	805445	IfStatement	if ( ( ! enabled ) && ( hashTable ) )		805412	0					
ANR	805446	Condition	( ! enabled ) && ( hashTable )	609:13:14009:14038	805412	0	True				
ANR	805447	AndExpression	( ! enabled ) && ( hashTable )		805412	0		&&			
ANR	805448	UnaryOperationExpression	! enabled		805412	0					
ANR	805449	UnaryOperator	!		805412	0					
ANR	805450	Identifier	enabled		805412	1					
ANR	805451	Identifier	hashTable		805412	1					
ANR	805452	CompoundStatement		6:46:237:237	805412	1					
ANR	805453	ExpressionStatement	"dprintf ( D_ALWAYS , ""enable: Destroying stats hash table\\n"" )"	610:2:14046:14106	805412	0	True				
ANR	805454	CallExpression	"dprintf ( D_ALWAYS , ""enable: Destroying stats hash table\\n"" )"		805412	0					
ANR	805455	Callee	dprintf		805412	0					
ANR	805456	Identifier	dprintf		805412	0					
ANR	805457	ArgumentList	D_ALWAYS		805412	1					
ANR	805458	Argument	D_ALWAYS		805412	0					
ANR	805459	Identifier	D_ALWAYS		805412	0					
ANR	805460	Argument	"""enable: Destroying stats hash table\\n"""		805412	1					
ANR	805461	PrimaryExpression	"""enable: Destroying stats hash table\\n"""		805412	0					
ANR	805462	Statement	delete	611:2:14110:14115	805412	1	True				
ANR	805463	ExpressionStatement	hashTable	611:9:14117:14126	805412	2	True				
ANR	805464	Identifier	hashTable		805412	0					
ANR	805465	ExpressionStatement	hashTable = NULL	612:2:14130:14146	805412	3	True				
ANR	805466	AssignmentExpression	hashTable = NULL		805412	0		=			
ANR	805467	Identifier	hashTable		805412	0					
ANR	805468	Identifier	NULL		805412	1					
ANR	805469	ReturnStatement	return 0 ;	614:1:14152:14160	805412	2	True				
ANR	805470	PrimaryExpression	0		805412	0					
ANR	805471	ReturnType	int		805412	1					
ANR	805472	Identifier	CollectorDaemonStatsList :: enable		805412	2					
ANR	805473	ParameterList	bool nable		805412	3					
ANR	805474	Parameter	bool nable	603:34:13791:13800	805412	0	True				
ANR	805475	ParameterType	bool		805412	0					
ANR	805476	Identifier	nable		805412	1					
ANR	805477	CFGEntryNode	ENTRY		805412		True				
ANR	805478	CFGExitNode	EXIT		805412		True				
ANR	805479	Symbol	hashTable		805412						
ANR	805480	Symbol	nable		805412						
ANR	805481	Symbol	NULL		805412						
ANR	805482	Symbol	& hashFunction		805412						
ANR	805483	Symbol	D_ALWAYS		805412						
ANR	805484	Symbol	STATS_TABLE_SIZE		805412						
ANR	805485	Symbol	enabled		805412						
ANR	805486	Function	StatsHashKey :: getstr	618:0:14211:14341							
ANR	805487	FunctionDef	StatsHashKey :: getstr (MyString & buf)		805486	0					
ANR	805488	CompoundStatement		620:0:14254:14341	805486	0					
ANR	805489	ExpressionStatement	"buf . sprintf ( ""'%s':'%s':'%s'"" , type . Value ( ) , name . Value ( ) , ip_addr . Value ( ) )"	621:1:14257:14339	805486	0	True				
ANR	805490	CallExpression	"buf . sprintf ( ""'%s':'%s':'%s'"" , type . Value ( ) , name . Value ( ) , ip_addr . Value ( ) )"		805486	0					
ANR	805491	Callee	buf . sprintf		805486	0					
ANR	805492	MemberAccess	buf . sprintf		805486	0					
ANR	805493	Identifier	buf		805486	0					
ANR	805494	Identifier	sprintf		805486	1					
ANR	805495	ArgumentList	"""'%s':'%s':'%s'"""		805486	1					
ANR	805496	Argument	"""'%s':'%s':'%s'"""		805486	0					
ANR	805497	PrimaryExpression	"""'%s':'%s':'%s'"""		805486	0					
ANR	805498	Argument	type . Value ( )		805486	1					
ANR	805499	CallExpression	type . Value ( )		805486	0					
ANR	805500	Callee	type . Value		805486	0					
ANR	805501	MemberAccess	type . Value		805486	0					
ANR	805502	Identifier	type		805486	0					
ANR	805503	Identifier	Value		805486	1					
ANR	805504	ArgumentList			805486	1					
ANR	805505	Argument	name . Value ( )		805486	2					
ANR	805506	CallExpression	name . Value ( )		805486	0					
ANR	805507	Callee	name . Value		805486	0					
ANR	805508	MemberAccess	name . Value		805486	0					
ANR	805509	Identifier	name		805486	0					
ANR	805510	Identifier	Value		805486	1					
ANR	805511	ArgumentList			805486	1					
ANR	805512	Argument	ip_addr . Value ( )		805486	3					
ANR	805513	CallExpression	ip_addr . Value ( )		805486	0					
ANR	805514	Callee	ip_addr . Value		805486	0					
ANR	805515	MemberAccess	ip_addr . Value		805486	0					
ANR	805516	Identifier	ip_addr		805486	0					
ANR	805517	Identifier	Value		805486	1					
ANR	805518	ArgumentList			805486	1					
ANR	805519	ReturnType	void		805486	1					
ANR	805520	Identifier	StatsHashKey :: getstr		805486	2					
ANR	805521	ParameterList	MyString & buf		805486	3					
ANR	805522	Parameter	MyString & buf	619:22:14238:14250	805486	0	True				
ANR	805523	ParameterType	MyString &		805486	0					
ANR	805524	Identifier	buf		805486	1					
ANR	805525	CFGEntryNode	ENTRY		805486		True				
ANR	805526	CFGExitNode	EXIT		805486		True				
ANR	805527	Symbol	name . Value		805486						
ANR	805528	Symbol	buf		805486						
ANR	805529	Symbol	ip_addr . Value		805486						
ANR	805530	Symbol	type . Value		805486						
ANR	805531	Symbol	name		805486						
ANR	805532	Symbol	type		805486						
ANR	805533	Symbol	ip_addr		805486						
ANR	805534	Function	CollectorDaemonStatsList :: hashKey	626:0:14367:15520							
ANR	805535	FunctionDef	"CollectorDaemonStatsList :: hashKey (StatsHashKey & key , const char * class_name , ClassAd * ad)"		805534	0					
ANR	805536	CompoundStatement		630:0:14486:15520	805534	0					
ANR	805537	ExpressionStatement	key . type = class_name	633:1:14511:14532	805534	0	True				
ANR	805538	AssignmentExpression	key . type = class_name		805534	0		=			
ANR	805539	MemberAccess	key . type		805534	0					
ANR	805540	Identifier	key		805534	0					
ANR	805541	Identifier	type		805534	1					
ANR	805542	Identifier	class_name		805534	1					
ANR	805543	IdentifierDeclStatement	"char buf [ 256 ] = """" ;"	636:1:14551:14571	805534	1	True				
ANR	805544	IdentifierDecl	"buf [ 256 ] = """""		805534	0					
ANR	805545	IdentifierDeclType	char [ 256 ]		805534	0					
ANR	805546	Identifier	buf		805534	1					
ANR	805547	PrimaryExpression	256		805534	2					
ANR	805548	AssignmentExpression	"buf [ 256 ] = """""		805534	3		=			
ANR	805549	Identifier	buf		805534	0					
ANR	805550	PrimaryExpression	""""""		805534	1					
ANR	805551	IdentifierDeclStatement	"MyString slot_buf = """" ;"	637:1:14574:14596	805534	2	True				
ANR	805552	IdentifierDecl	"slot_buf = """""		805534	0					
ANR	805553	IdentifierDeclType	MyString		805534	0					
ANR	805554	Identifier	slot_buf		805534	1					
ANR	805555	AssignmentExpression	"slot_buf = """""		805534	2		=			
ANR	805556	Identifier	slot_buf		805534	0					
ANR	805557	PrimaryExpression	""""""		805534	1					
ANR	805558	IfStatement	"if ( ! ad -> LookupString ( ATTR_NAME , buf , sizeof ( buf ) ) )"		805534	3					
ANR	805559	Condition	"! ad -> LookupString ( ATTR_NAME , buf , sizeof ( buf ) )"	638:6:14604:14650	805534	0	True				
ANR	805560	UnaryOperationExpression	"! ad -> LookupString ( ATTR_NAME , buf , sizeof ( buf ) )"		805534	0					
ANR	805561	UnaryOperator	!		805534	0					
ANR	805562	CallExpression	"ad -> LookupString ( ATTR_NAME , buf , sizeof ( buf ) )"		805534	1					
ANR	805563	Callee	ad -> LookupString		805534	0					
ANR	805564	PtrMemberAccess	ad -> LookupString		805534	0					
ANR	805565	Identifier	ad		805534	0					
ANR	805566	Identifier	LookupString		805534	1					
ANR	805567	ArgumentList	ATTR_NAME		805534	1					
ANR	805568	Argument	ATTR_NAME		805534	0					
ANR	805569	Identifier	ATTR_NAME		805534	0					
ANR	805570	Argument	buf		805534	1					
ANR	805571	Identifier	buf		805534	0					
ANR	805572	Argument	sizeof ( buf )		805534	2					
ANR	805573	SizeofExpression	sizeof ( buf )		805534	0					
ANR	805574	Sizeof	sizeof		805534	0					
ANR	805575	SizeofOperand	buf		805534	1					
ANR	805576	CompoundStatement		21:2:469:477	805534	1					
ANR	805577	IfStatement	"if ( ! ad -> LookupString ( ATTR_MACHINE , buf , sizeof ( buf ) ) )"		805534	0					
ANR	805578	Condition	"! ad -> LookupString ( ATTR_MACHINE , buf , sizeof ( buf ) )"	641:7:14708:14757	805534	0	True				
ANR	805579	UnaryOperationExpression	"! ad -> LookupString ( ATTR_MACHINE , buf , sizeof ( buf ) )"		805534	0					
ANR	805580	UnaryOperator	!		805534	0					
ANR	805581	CallExpression	"ad -> LookupString ( ATTR_MACHINE , buf , sizeof ( buf ) )"		805534	1					
ANR	805582	Callee	ad -> LookupString		805534	0					
ANR	805583	PtrMemberAccess	ad -> LookupString		805534	0					
ANR	805584	Identifier	ad		805534	0					
ANR	805585	Identifier	LookupString		805534	1					
ANR	805586	ArgumentList	ATTR_MACHINE		805534	1					
ANR	805587	Argument	ATTR_MACHINE		805534	0					
ANR	805588	Identifier	ATTR_MACHINE		805534	0					
ANR	805589	Argument	buf		805534	1					
ANR	805590	Identifier	buf		805534	0					
ANR	805591	Argument	sizeof ( buf )		805534	2					
ANR	805592	SizeofExpression	sizeof ( buf )		805534	0					
ANR	805593	Sizeof	sizeof		805534	0					
ANR	805594	SizeofOperand	buf		805534	1					
ANR	805595	CompoundStatement		12:61:275:275	805534	1					
ANR	805596	Statement	dprintf	642:3:14767:14773	805534	0	True				
ANR	805597	Statement	(	642:11:14775:14775	805534	1	True				
ANR	805598	Statement	D_ALWAYS	642:12:14776:14783	805534	2	True				
ANR	805599	Statement	","	642:20:14784:14784	805534	3	True				
ANR	805600	Statement	"""stats Error: Neither 'Name' nor 'Machine'"""	643:6:14792:14834	805534	4	True				
ANR	805601	Statement	""" found in %s ad\\n"""	644:6:14842:14860	805534	5	True				
ANR	805602	Statement	","	644:25:14861:14861	805534	6	True				
ANR	805603	Statement	class_name	645:6:14869:14878	805534	7	True				
ANR	805604	Statement	)	645:17:14880:14880	805534	8	True				
ANR	805605	ExpressionStatement		645:18:14881:14881	805534	9	True				
ANR	805606	ReturnStatement	return false ;	646:3:14886:14898	805534	10	True				
ANR	805607	Identifier	false		805534	0					
ANR	805608	IdentifierDeclStatement	int slot ;	650:2:14956:14964	805534	1	True				
ANR	805609	IdentifierDecl	slot		805534	0					
ANR	805610	IdentifierDeclType	int		805534	0					
ANR	805611	Identifier	slot		805534	1					
ANR	805612	IfStatement	"if ( ad -> LookupInteger ( ATTR_SLOT_ID , slot ) )"		805534	2					
ANR	805613	Condition	"ad -> LookupInteger ( ATTR_SLOT_ID , slot )"	651:6:14972:15009	805534	0	True				
ANR	805614	CallExpression	"ad -> LookupInteger ( ATTR_SLOT_ID , slot )"		805534	0					
ANR	805615	Callee	ad -> LookupInteger		805534	0					
ANR	805616	PtrMemberAccess	ad -> LookupInteger		805534	0					
ANR	805617	Identifier	ad		805534	0					
ANR	805618	Identifier	LookupInteger		805534	1					
ANR	805619	ArgumentList	ATTR_SLOT_ID		805534	1					
ANR	805620	Argument	ATTR_SLOT_ID		805534	0					
ANR	805621	Identifier	ATTR_SLOT_ID		805534	0					
ANR	805622	Argument	slot		805534	1					
ANR	805623	Identifier	slot		805534	0					
ANR	805624	CompoundStatement		22:46:525:525	805534	1					
ANR	805625	ExpressionStatement	"slot_buf . sprintf ( "":%d"" , slot )"	652:3:15017:15046	805534	0	True				
ANR	805626	CallExpression	"slot_buf . sprintf ( "":%d"" , slot )"		805534	0					
ANR	805627	Callee	slot_buf . sprintf		805534	0					
ANR	805628	MemberAccess	slot_buf . sprintf		805534	0					
ANR	805629	Identifier	slot_buf		805534	0					
ANR	805630	Identifier	sprintf		805534	1					
ANR	805631	ArgumentList	""":%d"""		805534	1					
ANR	805632	Argument	""":%d"""		805534	0					
ANR	805633	PrimaryExpression	""":%d"""		805534	0					
ANR	805634	Argument	slot		805534	1					
ANR	805635	Identifier	slot		805534	0					
ANR	805636	ElseStatement	else		805534	0					
ANR	805637	IfStatement	"if ( param_boolean ( ""ALLOW_VM_CRUFT"" , false ) && ad -> LookupInteger ( ATTR_VIRTUAL_MACHINE_ID , slot ) )"		805534	0					
ANR	805638	Condition	"param_boolean ( ""ALLOW_VM_CRUFT"" , false ) && ad -> LookupInteger ( ATTR_VIRTUAL_MACHINE_ID , slot )"	654:11:15063:15157	805534	0	True				
ANR	805639	AndExpression	"param_boolean ( ""ALLOW_VM_CRUFT"" , false ) && ad -> LookupInteger ( ATTR_VIRTUAL_MACHINE_ID , slot )"		805534	0		&&			
ANR	805640	CallExpression	"param_boolean ( ""ALLOW_VM_CRUFT"" , false )"		805534	0					
ANR	805641	Callee	param_boolean		805534	0					
ANR	805642	Identifier	param_boolean		805534	0					
ANR	805643	ArgumentList	"""ALLOW_VM_CRUFT"""		805534	1					
ANR	805644	Argument	"""ALLOW_VM_CRUFT"""		805534	0					
ANR	805645	PrimaryExpression	"""ALLOW_VM_CRUFT"""		805534	0					
ANR	805646	Argument	false		805534	1					
ANR	805647	Identifier	false		805534	0					
ANR	805648	CallExpression	"ad -> LookupInteger ( ATTR_VIRTUAL_MACHINE_ID , slot )"		805534	1					
ANR	805649	Callee	ad -> LookupInteger		805534	0					
ANR	805650	PtrMemberAccess	ad -> LookupInteger		805534	0					
ANR	805651	Identifier	ad		805534	0					
ANR	805652	Identifier	LookupInteger		805534	1					
ANR	805653	ArgumentList	ATTR_VIRTUAL_MACHINE_ID		805534	1					
ANR	805654	Argument	ATTR_VIRTUAL_MACHINE_ID		805534	0					
ANR	805655	Identifier	ATTR_VIRTUAL_MACHINE_ID		805534	0					
ANR	805656	Argument	slot		805534	1					
ANR	805657	Identifier	slot		805534	0					
ANR	805658	CompoundStatement		26:55:673:673	805534	1					
ANR	805659	ExpressionStatement	"slot_buf . sprintf ( "":%d"" , slot )"	656:3:15165:15194	805534	0	True				
ANR	805660	CallExpression	"slot_buf . sprintf ( "":%d"" , slot )"		805534	0					
ANR	805661	Callee	slot_buf . sprintf		805534	0					
ANR	805662	MemberAccess	slot_buf . sprintf		805534	0					
ANR	805663	Identifier	slot_buf		805534	0					
ANR	805664	Identifier	sprintf		805534	1					
ANR	805665	ArgumentList	""":%d"""		805534	1					
ANR	805666	Argument	""":%d"""		805534	0					
ANR	805667	PrimaryExpression	""":%d"""		805534	0					
ANR	805668	Argument	slot		805534	1					
ANR	805669	Identifier	slot		805534	0					
ANR	805670	ExpressionStatement	key . name = buf	659:1:15204:15218	805534	4	True				
ANR	805671	AssignmentExpression	key . name = buf		805534	0		=			
ANR	805672	MemberAccess	key . name		805534	0					
ANR	805673	Identifier	key		805534	0					
ANR	805674	Identifier	name		805534	1					
ANR	805675	Identifier	buf		805534	1					
ANR	805676	ExpressionStatement	key . name += slot_buf . Value ( )	660:1:15221:15249	805534	5	True				
ANR	805677	AssignmentExpression	key . name += slot_buf . Value ( )		805534	0		+=			
ANR	805678	MemberAccess	key . name		805534	0					
ANR	805679	Identifier	key		805534	0					
ANR	805680	Identifier	name		805534	1					
ANR	805681	CallExpression	slot_buf . Value ( )		805534	1					
ANR	805682	Callee	slot_buf . Value		805534	0					
ANR	805683	MemberAccess	slot_buf . Value		805534	0					
ANR	805684	Identifier	slot_buf		805534	0					
ANR	805685	Identifier	Value		805534	1					
ANR	805686	ArgumentList			805534	1					
ANR	805687	IfStatement	"if ( ad -> LookupString ( ATTR_MY_ADDRESS , buf , sizeof ( buf ) ) )"		805534	6					
ANR	805688	Condition	"ad -> LookupString ( ATTR_MY_ADDRESS , buf , sizeof ( buf ) )"	663:6:15296:15348	805534	0	True				
ANR	805689	CallExpression	"ad -> LookupString ( ATTR_MY_ADDRESS , buf , sizeof ( buf ) )"		805534	0					
ANR	805690	Callee	ad -> LookupString		805534	0					
ANR	805691	PtrMemberAccess	ad -> LookupString		805534	0					
ANR	805692	Identifier	ad		805534	0					
ANR	805693	Identifier	LookupString		805534	1					
ANR	805694	ArgumentList	ATTR_MY_ADDRESS		805534	1					
ANR	805695	Argument	ATTR_MY_ADDRESS		805534	0					
ANR	805696	Identifier	ATTR_MY_ADDRESS		805534	0					
ANR	805697	Argument	buf		805534	1					
ANR	805698	Identifier	buf		805534	0					
ANR	805699	Argument	sizeof ( buf )		805534	2					
ANR	805700	SizeofExpression	sizeof ( buf )		805534	0					
ANR	805701	Sizeof	sizeof		805534	0					
ANR	805702	SizeofOperand	buf		805534	1					
ANR	805703	CompoundStatement		36:2:897:943	805534	1					
ANR	805704	IdentifierDeclStatement	MyString myString ( buf ) ;	664:2:15356:15380	805534	0	True				
ANR	805705	IdentifierDecl	myString ( buf )		805534	0					
ANR	805706	IdentifierDeclType	MyString		805534	0					
ANR	805707	Identifier	myString		805534	1					
ANR	805708	Identifier	buf		805534	2					
ANR	805709	IdentifierDeclStatement	char * host = getHostFromAddr ( myString . Value ( ) ) ;	665:2:15384:15430	805534	1	True				
ANR	805710	IdentifierDecl	* host = getHostFromAddr ( myString . Value ( ) )		805534	0					
ANR	805711	IdentifierDeclType	char *		805534	0					
ANR	805712	Identifier	host		805534	1					
ANR	805713	AssignmentExpression	* host = getHostFromAddr ( myString . Value ( ) )		805534	2		=			
ANR	805714	Identifier	host		805534	0					
ANR	805715	CallExpression	getHostFromAddr ( myString . Value ( ) )		805534	1					
ANR	805716	Callee	getHostFromAddr		805534	0					
ANR	805717	Identifier	getHostFromAddr		805534	0					
ANR	805718	ArgumentList	myString . Value ( )		805534	1					
ANR	805719	Argument	myString . Value ( )		805534	0					
ANR	805720	CallExpression	myString . Value ( )		805534	0					
ANR	805721	Callee	myString . Value		805534	0					
ANR	805722	MemberAccess	myString . Value		805534	0					
ANR	805723	Identifier	myString		805534	0					
ANR	805724	Identifier	Value		805534	1					
ANR	805725	ArgumentList			805534	1					
ANR	805726	ExpressionStatement	key . ip_addr = host	666:2:15434:15452	805534	2	True				
ANR	805727	AssignmentExpression	key . ip_addr = host		805534	0		=			
ANR	805728	MemberAccess	key . ip_addr		805534	0					
ANR	805729	Identifier	key		805534	0					
ANR	805730	Identifier	ip_addr		805534	1					
ANR	805731	Identifier	host		805534	1					
ANR	805732	ExpressionStatement	free ( host )	667:2:15456:15466	805534	3	True				
ANR	805733	CallExpression	free ( host )		805534	0					
ANR	805734	Callee	free		805534	0					
ANR	805735	Identifier	free		805534	0					
ANR	805736	ArgumentList	host		805534	1					
ANR	805737	Argument	host		805534	0					
ANR	805738	Identifier	host		805534	0					
ANR	805739	ElseStatement	else		805534	0					
ANR	805740	CompoundStatement		39:8:989:989	805534	0					
ANR	805741	ReturnStatement	return false ;	669:2:15480:15492	805534	0	True				
ANR	805742	Identifier	false		805534	0					
ANR	805743	ReturnStatement	return true ;	673:1:15507:15518	805534	7	True				
ANR	805744	Identifier	true		805534	0					
ANR	805745	ReturnType	bool		805534	1					
ANR	805746	Identifier	CollectorDaemonStatsList :: hashKey		805534	2					
ANR	805747	ParameterList	"StatsHashKey & key , const char * class_name , ClassAd * ad"		805534	3					
ANR	805748	Parameter	StatsHashKey & key	627:35:14407:14423	805534	0	True				
ANR	805749	ParameterType	StatsHashKey &		805534	0					
ANR	805750	Identifier	key		805534	1					
ANR	805751	Parameter	const char * class_name	628:11:14437:14458	805534	1	True				
ANR	805752	ParameterType	const char *		805534	0					
ANR	805753	Identifier	class_name		805534	1					
ANR	805754	Parameter	ClassAd * ad	629:11:14472:14482	805534	2	True				
ANR	805755	ParameterType	ClassAd *		805534	0					
ANR	805756	Identifier	ad		805534	1					
ANR	805757	CFGEntryNode	ENTRY		805534		True				
ANR	805758	CFGExitNode	EXIT		805534		True				
ANR	805759	Symbol	ATTR_NAME		805534						
ANR	805760	Symbol	key . name		805534						
ANR	805761	Symbol	slot_buf . Value		805534						
ANR	805762	Symbol	* ad		805534						
ANR	805763	Symbol	slot		805534						
ANR	805764	Symbol	getHostFromAddr		805534						
ANR	805765	Symbol	key . ip_addr		805534						
ANR	805766	Symbol	ATTR_VIRTUAL_MACHINE_ID		805534						
ANR	805767	Symbol	host		805534						
ANR	805768	Symbol	ATTR_MY_ADDRESS		805534						
ANR	805769	Symbol	class_name		805534						
ANR	805770	Symbol	key		805534						
ANR	805771	Symbol	ad -> LookupString		805534						
ANR	805772	Symbol	ad		805534						
ANR	805773	Symbol	false		805534						
ANR	805774	Symbol	param_boolean		805534						
ANR	805775	Symbol	key . type		805534						
ANR	805776	Symbol	ATTR_MACHINE		805534						
ANR	805777	Symbol	myString		805534						
ANR	805778	Symbol	buf		805534						
ANR	805779	Symbol	slot_buf		805534						
ANR	805780	Symbol	true		805534						
ANR	805781	Symbol	ad -> LookupInteger		805534						
ANR	805782	Symbol	myString . Value		805534						
ANR	805783	Symbol	ATTR_SLOT_ID		805534						
ANR	805784	Function	CollectorStats :: CollectorStats	682:0:15658:16049							
ANR	805785	FunctionDef	"CollectorStats :: CollectorStats (bool enable_daemon_stats , int class_history_size , int daemon_history_size)"		805784	0					
ANR	805786	CompoundStatement		685:0:15782:16049	805784	0					
ANR	805787	ExpressionStatement	classList = new CollectorClassStatsList ( class_history_size )	686:1:15785:15846	805784	0	True				
ANR	805788	AssignmentExpression	classList = new CollectorClassStatsList ( class_history_size )		805784	0		=			
ANR	805789	Identifier	classList		805784	0					
ANR	805790	Identifier	class_history_size		805784	1					
ANR	805791	ExpressionStatement	"daemonList = new CollectorDaemonStatsList ( enable_daemon_stats , daemon_history_size )"	687:1:15849:15948	805784	1	True				
ANR	805792	AssignmentExpression	"daemonList = new CollectorDaemonStatsList ( enable_daemon_stats , daemon_history_size )"		805784	0		=			
ANR	805793	Identifier	daemonList		805784	0					
ANR	805794	Expression	"enable_daemon_stats , daemon_history_size"		805784	1					
ANR	805795	Identifier	enable_daemon_stats		805784	0					
ANR	805796	Identifier	daemon_history_size		805784	1					
ANR	805797	ExpressionStatement	m_last_garbage_time = time ( NULL )	689:1:15951:15983	805784	2	True				
ANR	805798	AssignmentExpression	m_last_garbage_time = time ( NULL )		805784	0		=			
ANR	805799	Identifier	m_last_garbage_time		805784	0					
ANR	805800	CallExpression	time ( NULL )		805784	1					
ANR	805801	Callee	time		805784	0					
ANR	805802	Identifier	time		805784	0					
ANR	805803	ArgumentList	NULL		805784	1					
ANR	805804	Argument	NULL		805784	0					
ANR	805805	Identifier	NULL		805784	0					
ANR	805806	ExpressionStatement	m_garbage_interval = DEFAULT_COLLECTOR_STATS_GARBAGE_INTERVAL	690:1:15986:16047	805784	3	True				
ANR	805807	AssignmentExpression	m_garbage_interval = DEFAULT_COLLECTOR_STATS_GARBAGE_INTERVAL		805784	0		=			
ANR	805808	Identifier	m_garbage_interval		805784	0					
ANR	805809	Identifier	DEFAULT_COLLECTOR_STATS_GARBAGE_INTERVAL		805784	1					
ANR	805810	Identifier	CollectorStats :: CollectorStats		805784	1					
ANR	805811	ParameterList	"bool enable_daemon_stats , int class_history_size , int daemon_history_size"		805784	2					
ANR	805812	Parameter	bool enable_daemon_stats	682:32:15690:15713	805784	0	True				
ANR	805813	ParameterType	bool		805784	0					
ANR	805814	Identifier	enable_daemon_stats		805784	1					
ANR	805815	Parameter	int class_history_size	683:8:15724:15745	805784	1	True				
ANR	805816	ParameterType	int		805784	0					
ANR	805817	Identifier	class_history_size		805784	1					
ANR	805818	Parameter	int daemon_history_size	684:8:15756:15778	805784	2	True				
ANR	805819	ParameterType	int		805784	0					
ANR	805820	Identifier	daemon_history_size		805784	1					
ANR	805821	CFGEntryNode	ENTRY		805784		True				
ANR	805822	CFGExitNode	EXIT		805784		True				
ANR	805823	Symbol	NULL		805784						
ANR	805824	Symbol	class_history_size		805784						
ANR	805825	Symbol	daemon_history_size		805784						
ANR	805826	Symbol	DEFAULT_COLLECTOR_STATS_GARBAGE_INTERVAL		805784						
ANR	805827	Symbol	m_garbage_interval		805784						
ANR	805828	Symbol	daemonList		805784						
ANR	805829	Symbol	time		805784						
ANR	805830	Symbol	enable_daemon_stats		805784						
ANR	805831	Symbol	m_last_garbage_time		805784						
ANR	805832	Symbol	classList		805784						
ANR	805833	Function	CollectorStats :: ~CollectorStats	694:0:16066:16147							
ANR	805834	FunctionDef	CollectorStats :: ~CollectorStats ()		805833	0					
ANR	805835	CompoundStatement		695:0:16106:16147	805833	0					
ANR	805836	Statement	delete	696:1:16109:16114	805833	0	True				
ANR	805837	ExpressionStatement	classList	696:8:16116:16125	805833	1	True				
ANR	805838	Identifier	classList		805833	0					
ANR	805839	Statement	delete	697:1:16128:16133	805833	2	True				
ANR	805840	ExpressionStatement	daemonList	697:8:16135:16145	805833	3	True				
ANR	805841	Identifier	daemonList		805833	0					
ANR	805842	Identifier	CollectorStats :: ~CollectorStats		805833	1					
ANR	805843	ParameterList			805833	2					
ANR	805844	CFGEntryNode	ENTRY		805833		True				
ANR	805845	CFGExitNode	EXIT		805833		True				
ANR	805846	Function	CollectorStats :: setClassHistorySize	701:0:16182:16332							
ANR	805847	FunctionDef	CollectorStats :: setClassHistorySize (int new_size)		805846	0					
ANR	805848	CompoundStatement		703:0:16238:16332	805846	0					
ANR	805849	ExpressionStatement	classList -> setHistorySize ( new_size )	704:1:16241:16278	805846	0	True				
ANR	805850	CallExpression	classList -> setHistorySize ( new_size )		805846	0					
ANR	805851	Callee	classList -> setHistorySize		805846	0					
ANR	805852	PtrMemberAccess	classList -> setHistorySize		805846	0					
ANR	805853	Identifier	classList		805846	0					
ANR	805854	Identifier	setHistorySize		805846	1					
ANR	805855	ArgumentList	new_size		805846	1					
ANR	805856	Argument	new_size		805846	0					
ANR	805857	Identifier	new_size		805846	0					
ANR	805858	ExpressionStatement	daemonList -> setHistorySize ( new_size )	705:1:16281:16319	805846	1	True				
ANR	805859	CallExpression	daemonList -> setHistorySize ( new_size )		805846	0					
ANR	805860	Callee	daemonList -> setHistorySize		805846	0					
ANR	805861	PtrMemberAccess	daemonList -> setHistorySize		805846	0					
ANR	805862	Identifier	daemonList		805846	0					
ANR	805863	Identifier	setHistorySize		805846	1					
ANR	805864	ArgumentList	new_size		805846	1					
ANR	805865	Argument	new_size		805846	0					
ANR	805866	Identifier	new_size		805846	0					
ANR	805867	ReturnStatement	return 0 ;	706:1:16322:16330	805846	2	True				
ANR	805868	PrimaryExpression	0		805846	0					
ANR	805869	ReturnType	int		805846	1					
ANR	805870	Identifier	CollectorStats :: setClassHistorySize		805846	2					
ANR	805871	ParameterList	int new_size		805846	3					
ANR	805872	Parameter	int new_size	702:37:16223:16234	805846	0	True				
ANR	805873	ParameterType	int		805846	0					
ANR	805874	Identifier	new_size		805846	1					
ANR	805875	CFGEntryNode	ENTRY		805846		True				
ANR	805876	CFGExitNode	EXIT		805846		True				
ANR	805877	Symbol	new_size		805846						
ANR	805878	Symbol	daemonList		805846						
ANR	805879	Symbol	classList		805846						
ANR	805880	Function	CollectorStats :: setDaemonStats	710:0:16372:16462							
ANR	805881	FunctionDef	CollectorStats :: setDaemonStats (bool enable)		805880	0					
ANR	805882	CompoundStatement		712:0:16422:16462	805880	0					
ANR	805883	ReturnStatement	return daemonList -> enable ( enable ) ;	713:1:16425:16460	805880	0	True				
ANR	805884	CallExpression	daemonList -> enable ( enable )		805880	0					
ANR	805885	Callee	daemonList -> enable		805880	0					
ANR	805886	PtrMemberAccess	daemonList -> enable		805880	0					
ANR	805887	Identifier	daemonList		805880	0					
ANR	805888	Identifier	enable		805880	1					
ANR	805889	ArgumentList	enable		805880	1					
ANR	805890	Argument	enable		805880	0					
ANR	805891	Identifier	enable		805880	0					
ANR	805892	ReturnType	int		805880	1					
ANR	805893	Identifier	CollectorStats :: setDaemonStats		805880	2					
ANR	805894	ParameterList	bool enable		805880	3					
ANR	805895	Parameter	bool enable	711:32:16408:16418	805880	0	True				
ANR	805896	ParameterType	bool		805880	0					
ANR	805897	Identifier	enable		805880	1					
ANR	805898	CFGEntryNode	ENTRY		805880		True				
ANR	805899	CFGExitNode	EXIT		805880		True				
ANR	805900	Symbol	enable		805880						
ANR	805901	Symbol	daemonList		805880						
ANR	805902	Symbol	daemonList -> enable		805880						
ANR	805903	Symbol	* daemonList		805880						
ANR	805904	Function	CollectorStats :: setDaemonHistorySize	717:0:16498:16605							
ANR	805905	FunctionDef	CollectorStats :: setDaemonHistorySize (int new_size)		805904	0					
ANR	805906	CompoundStatement		719:0:16555:16605	805904	0					
ANR	805907	ReturnStatement	return daemonList -> setHistorySize ( new_size ) ;	720:1:16558:16603	805904	0	True				
ANR	805908	CallExpression	daemonList -> setHistorySize ( new_size )		805904	0					
ANR	805909	Callee	daemonList -> setHistorySize		805904	0					
ANR	805910	PtrMemberAccess	daemonList -> setHistorySize		805904	0					
ANR	805911	Identifier	daemonList		805904	0					
ANR	805912	Identifier	setHistorySize		805904	1					
ANR	805913	ArgumentList	new_size		805904	1					
ANR	805914	Argument	new_size		805904	0					
ANR	805915	Identifier	new_size		805904	0					
ANR	805916	ReturnType	int		805904	1					
ANR	805917	Identifier	CollectorStats :: setDaemonHistorySize		805904	2					
ANR	805918	ParameterList	int new_size		805904	3					
ANR	805919	Parameter	int new_size	718:38:16540:16551	805904	0	True				
ANR	805920	ParameterType	int		805904	0					
ANR	805921	Identifier	new_size		805904	1					
ANR	805922	CFGEntryNode	ENTRY		805904		True				
ANR	805923	CFGExitNode	EXIT		805904		True				
ANR	805924	Symbol	daemonList -> setHistorySize		805904						
ANR	805925	Symbol	new_size		805904						
ANR	805926	Symbol	daemonList		805904						
ANR	805927	Symbol	* daemonList		805904						
ANR	805928	Function	CollectorStats :: update	724:0:16629:17775							
ANR	805929	FunctionDef	"CollectorStats :: update (const char * className , ClassAd * oldAd , ClassAd * newAd)"		805928	0					
ANR	805930	CompoundStatement		727:0:16719:17775	805928	0					
ANR	805931	ExpressionStatement	considerCollectingGarbage ( )	728:1:16722:16749	805928	0	True				
ANR	805932	CallExpression	considerCollectingGarbage ( )		805928	0					
ANR	805933	Callee	considerCollectingGarbage		805928	0					
ANR	805934	Identifier	considerCollectingGarbage		805928	0					
ANR	805935	ArgumentList			805928	1					
ANR	805936	IfStatement	if ( ! oldAd )		805928	1					
ANR	805937	Condition	! oldAd	731:6:16804:16810	805928	0	True				
ANR	805938	UnaryOperationExpression	! oldAd		805928	0					
ANR	805939	UnaryOperator	!		805928	0					
ANR	805940	Identifier	oldAd		805928	1					
ANR	805941	CompoundStatement		5:16:94:94	805928	1					
ANR	805942	ExpressionStatement	"classList -> updateStats ( className , false , 0 )"	732:2:16818:16863	805928	0	True				
ANR	805943	CallExpression	"classList -> updateStats ( className , false , 0 )"		805928	0					
ANR	805944	Callee	classList -> updateStats		805928	0					
ANR	805945	PtrMemberAccess	classList -> updateStats		805928	0					
ANR	805946	Identifier	classList		805928	0					
ANR	805947	Identifier	updateStats		805928	1					
ANR	805948	ArgumentList	className		805928	1					
ANR	805949	Argument	className		805928	0					
ANR	805950	Identifier	className		805928	0					
ANR	805951	Argument	false		805928	1					
ANR	805952	Identifier	false		805928	0					
ANR	805953	Argument	0		805928	2					
ANR	805954	PrimaryExpression	0		805928	0					
ANR	805955	ExpressionStatement	"daemonList -> updateStats ( className , newAd , false , 0 )"	733:2:16867:16920	805928	1	True				
ANR	805956	CallExpression	"daemonList -> updateStats ( className , newAd , false , 0 )"		805928	0					
ANR	805957	Callee	daemonList -> updateStats		805928	0					
ANR	805958	PtrMemberAccess	daemonList -> updateStats		805928	0					
ANR	805959	Identifier	daemonList		805928	0					
ANR	805960	Identifier	updateStats		805928	1					
ANR	805961	ArgumentList	className		805928	1					
ANR	805962	Argument	className		805928	0					
ANR	805963	Identifier	className		805928	0					
ANR	805964	Argument	newAd		805928	1					
ANR	805965	Identifier	newAd		805928	0					
ANR	805966	Argument	false		805928	2					
ANR	805967	Identifier	false		805928	0					
ANR	805968	Argument	0		805928	3					
ANR	805969	PrimaryExpression	0		805928	0					
ANR	805970	ExpressionStatement	"global . updateStats ( false , 0 )"	734:2:16924:16954	805928	2	True				
ANR	805971	CallExpression	"global . updateStats ( false , 0 )"		805928	0					
ANR	805972	Callee	global . updateStats		805928	0					
ANR	805973	MemberAccess	global . updateStats		805928	0					
ANR	805974	Identifier	global		805928	0					
ANR	805975	Identifier	updateStats		805928	1					
ANR	805976	ArgumentList	false		805928	1					
ANR	805977	Argument	false		805928	0					
ANR	805978	Identifier	false		805928	0					
ANR	805979	Argument	0		805928	1					
ANR	805980	PrimaryExpression	0		805928	0					
ANR	805981	ReturnStatement	return 0 ;	735:2:16958:16966	805928	3	True				
ANR	805982	PrimaryExpression	0		805928	0					
ANR	805983	IdentifierDeclStatement	"int new_seq , old_seq ;"	739:1:17006:17026	805928	2	True				
ANR	805984	IdentifierDecl	new_seq		805928	0					
ANR	805985	IdentifierDeclType	int		805928	0					
ANR	805986	Identifier	new_seq		805928	1					
ANR	805987	IdentifierDecl	old_seq		805928	1					
ANR	805988	IdentifierDeclType	int		805928	0					
ANR	805989	Identifier	old_seq		805928	1					
ANR	805990	IdentifierDeclStatement	"int new_stime , old_stime ;"	740:1:17029:17053	805928	3	True				
ANR	805991	IdentifierDecl	new_stime		805928	0					
ANR	805992	IdentifierDeclType	int		805928	0					
ANR	805993	Identifier	new_stime		805928	1					
ANR	805994	IdentifierDecl	old_stime		805928	1					
ANR	805995	IdentifierDeclType	int		805928	0					
ANR	805996	Identifier	old_stime		805928	1					
ANR	805997	IdentifierDeclStatement	int dropped = 0 ;	741:1:17056:17071	805928	4	True				
ANR	805998	IdentifierDecl	dropped = 0		805928	0					
ANR	805999	IdentifierDeclType	int		805928	0					
ANR	806000	Identifier	dropped		805928	1					
ANR	806001	AssignmentExpression	dropped = 0		805928	2		=			
ANR	806002	Identifier	dropped		805928	0					
ANR	806003	PrimaryExpression	0		805928	1					
ANR	806004	IdentifierDeclStatement	bool sequenced = false ;	742:1:17074:17096	805928	5	True				
ANR	806005	IdentifierDecl	sequenced = false		805928	0					
ANR	806006	IdentifierDeclType	bool		805928	0					
ANR	806007	Identifier	sequenced		805928	1					
ANR	806008	AssignmentExpression	sequenced = false		805928	2		=			
ANR	806009	Identifier	false		805928	0					
ANR	806010	Identifier	false		805928	1					
ANR	806011	IfStatement	"if ( newAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , new_seq ) && oldAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , old_seq ) && newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime ) && oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime ) )"		805928	6					
ANR	806012	Condition	"newAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , new_seq ) && oldAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , old_seq ) && newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime ) && oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime )"	745:6:17136:17390	805928	0	True				
ANR	806013	AndExpression	"newAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , new_seq ) && oldAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , old_seq ) && newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime ) && oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime )"		805928	0		&&			
ANR	806014	CallExpression	"newAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , new_seq )"		805928	0					
ANR	806015	Callee	newAd -> LookupInteger		805928	0					
ANR	806016	PtrMemberAccess	newAd -> LookupInteger		805928	0					
ANR	806017	Identifier	newAd		805928	0					
ANR	806018	Identifier	LookupInteger		805928	1					
ANR	806019	ArgumentList	ATTR_UPDATE_SEQUENCE_NUMBER		805928	1					
ANR	806020	Argument	ATTR_UPDATE_SEQUENCE_NUMBER		805928	0					
ANR	806021	Identifier	ATTR_UPDATE_SEQUENCE_NUMBER		805928	0					
ANR	806022	Argument	new_seq		805928	1					
ANR	806023	Identifier	new_seq		805928	0					
ANR	806024	AndExpression	"oldAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , old_seq ) && newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime ) && oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime )"		805928	1		&&			
ANR	806025	CallExpression	"oldAd -> LookupInteger ( ATTR_UPDATE_SEQUENCE_NUMBER , old_seq )"		805928	0					
ANR	806026	Callee	oldAd -> LookupInteger		805928	0					
ANR	806027	PtrMemberAccess	oldAd -> LookupInteger		805928	0					
ANR	806028	Identifier	oldAd		805928	0					
ANR	806029	Identifier	LookupInteger		805928	1					
ANR	806030	ArgumentList	ATTR_UPDATE_SEQUENCE_NUMBER		805928	1					
ANR	806031	Argument	ATTR_UPDATE_SEQUENCE_NUMBER		805928	0					
ANR	806032	Identifier	ATTR_UPDATE_SEQUENCE_NUMBER		805928	0					
ANR	806033	Argument	old_seq		805928	1					
ANR	806034	Identifier	old_seq		805928	0					
ANR	806035	AndExpression	"newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime ) && oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime )"		805928	1		&&			
ANR	806036	CallExpression	"newAd -> LookupInteger ( ATTR_DAEMON_START_TIME , new_stime )"		805928	0					
ANR	806037	Callee	newAd -> LookupInteger		805928	0					
ANR	806038	PtrMemberAccess	newAd -> LookupInteger		805928	0					
ANR	806039	Identifier	newAd		805928	0					
ANR	806040	Identifier	LookupInteger		805928	1					
ANR	806041	ArgumentList	ATTR_DAEMON_START_TIME		805928	1					
ANR	806042	Argument	ATTR_DAEMON_START_TIME		805928	0					
ANR	806043	Identifier	ATTR_DAEMON_START_TIME		805928	0					
ANR	806044	Argument	new_stime		805928	1					
ANR	806045	Identifier	new_stime		805928	0					
ANR	806046	CallExpression	"oldAd -> LookupInteger ( ATTR_DAEMON_START_TIME , old_stime )"		805928	1					
ANR	806047	Callee	oldAd -> LookupInteger		805928	0					
ANR	806048	PtrMemberAccess	oldAd -> LookupInteger		805928	0					
ANR	806049	Identifier	oldAd		805928	0					
ANR	806050	Identifier	LookupInteger		805928	1					
ANR	806051	ArgumentList	ATTR_DAEMON_START_TIME		805928	1					
ANR	806052	Argument	ATTR_DAEMON_START_TIME		805928	0					
ANR	806053	Identifier	ATTR_DAEMON_START_TIME		805928	0					
ANR	806054	Argument	old_stime		805928	1					
ANR	806055	Identifier	old_stime		805928	0					
ANR	806056	CompoundStatement		25:2:699:726	805928	1					
ANR	806057	ExpressionStatement	sequenced = true	750:2:17399:17415	805928	0	True				
ANR	806058	AssignmentExpression	sequenced = true		805928	0		=			
ANR	806059	Identifier	sequenced		805928	0					
ANR	806060	Identifier	true		805928	1					
ANR	806061	IdentifierDeclStatement	int expected = old_seq + 1 ;	751:2:17419:17446	805928	1	True				
ANR	806062	IdentifierDecl	expected = old_seq + 1		805928	0					
ANR	806063	IdentifierDeclType	int		805928	0					
ANR	806064	Identifier	expected		805928	1					
ANR	806065	AssignmentExpression	expected = old_seq + 1		805928	2		=			
ANR	806066	Identifier	expected		805928	0					
ANR	806067	AdditiveExpression	old_seq + 1		805928	1		+			
ANR	806068	Identifier	old_seq		805928	0					
ANR	806069	PrimaryExpression	1		805928	1					
ANR	806070	IfStatement	if ( ( new_stime == old_stime ) && ( expected != new_seq ) )		805928	2					
ANR	806071	Condition	( new_stime == old_stime ) && ( expected != new_seq )	752:8:17456:17508	805928	0	True				
ANR	806072	AndExpression	( new_stime == old_stime ) && ( expected != new_seq )		805928	0		&&			
ANR	806073	EqualityExpression	new_stime == old_stime		805928	0		==			
ANR	806074	Identifier	new_stime		805928	0					
ANR	806075	Identifier	old_stime		805928	1					
ANR	806076	EqualityExpression	expected != new_seq		805928	1		!=			
ANR	806077	Identifier	expected		805928	0					
ANR	806078	Identifier	new_seq		805928	1					
ANR	806079	CompoundStatement		26:64:792:792	805928	1					
ANR	806080	ExpressionStatement	dropped = ( new_seq < expected ) ? 1 : ( new_seq - expected )	753:3:17517:17578	805928	0	True				
ANR	806081	AssignmentExpression	dropped = ( new_seq < expected ) ? 1 : ( new_seq - expected )		805928	0		=			
ANR	806082	Identifier	dropped		805928	0					
ANR	806083	ConditionalExpression	( new_seq < expected ) ? 1 : ( new_seq - expected )		805928	1					
ANR	806084	Condition	new_seq < expected		805928	0					
ANR	806085	RelationalExpression	new_seq < expected		805928	0		<			
ANR	806086	Identifier	new_seq		805928	0					
ANR	806087	Identifier	expected		805928	1					
ANR	806088	PrimaryExpression	1		805928	1					
ANR	806089	AdditiveExpression	new_seq - expected		805928	2		-			
ANR	806090	Identifier	new_seq		805928	0					
ANR	806091	Identifier	expected		805928	1					
ANR	806092	ExpressionStatement	"global . updateStats ( sequenced , dropped )"	756:1:17588:17628	805928	7	True				
ANR	806093	CallExpression	"global . updateStats ( sequenced , dropped )"		805928	0					
ANR	806094	Callee	global . updateStats		805928	0					
ANR	806095	MemberAccess	global . updateStats		805928	0					
ANR	806096	Identifier	global		805928	0					
ANR	806097	Identifier	updateStats		805928	1					
ANR	806098	ArgumentList	sequenced		805928	1					
ANR	806099	Argument	sequenced		805928	0					
ANR	806100	Identifier	sequenced		805928	0					
ANR	806101	Argument	dropped		805928	1					
ANR	806102	Identifier	dropped		805928	0					
ANR	806103	ExpressionStatement	"classList -> updateStats ( className , sequenced , dropped )"	757:1:17631:17686	805928	8	True				
ANR	806104	CallExpression	"classList -> updateStats ( className , sequenced , dropped )"		805928	0					
ANR	806105	Callee	classList -> updateStats		805928	0					
ANR	806106	PtrMemberAccess	classList -> updateStats		805928	0					
ANR	806107	Identifier	classList		805928	0					
ANR	806108	Identifier	updateStats		805928	1					
ANR	806109	ArgumentList	className		805928	1					
ANR	806110	Argument	className		805928	0					
ANR	806111	Identifier	className		805928	0					
ANR	806112	Argument	sequenced		805928	1					
ANR	806113	Identifier	sequenced		805928	0					
ANR	806114	Argument	dropped		805928	2					
ANR	806115	Identifier	dropped		805928	0					
ANR	806116	ExpressionStatement	"daemonList -> updateStats ( className , newAd , sequenced , dropped )"	758:1:17689:17752	805928	9	True				
ANR	806117	CallExpression	"daemonList -> updateStats ( className , newAd , sequenced , dropped )"		805928	0					
ANR	806118	Callee	daemonList -> updateStats		805928	0					
ANR	806119	PtrMemberAccess	daemonList -> updateStats		805928	0					
ANR	806120	Identifier	daemonList		805928	0					
ANR	806121	Identifier	updateStats		805928	1					
ANR	806122	ArgumentList	className		805928	1					
ANR	806123	Argument	className		805928	0					
ANR	806124	Identifier	className		805928	0					
ANR	806125	Argument	newAd		805928	1					
ANR	806126	Identifier	newAd		805928	0					
ANR	806127	Argument	sequenced		805928	2					
ANR	806128	Identifier	sequenced		805928	0					
ANR	806129	Argument	dropped		805928	3					
ANR	806130	Identifier	dropped		805928	0					
ANR	806131	ReturnStatement	return 0 ;	761:1:17765:17773	805928	10	True				
ANR	806132	PrimaryExpression	0		805928	0					
ANR	806133	ReturnType	int		805928	1					
ANR	806134	Identifier	CollectorStats :: update		805928	2					
ANR	806135	ParameterList	"const char * className , ClassAd * oldAd , ClassAd * newAd"		805928	3					
ANR	806136	Parameter	const char * className	725:24:16657:16677	805928	0	True				
ANR	806137	ParameterType	const char *		805928	0					
ANR	806138	Identifier	className		805928	1					
ANR	806139	Parameter	ClassAd * oldAd	726:6:16686:16699	805928	1	True				
ANR	806140	ParameterType	ClassAd *		805928	0					
ANR	806141	Identifier	oldAd		805928	1					
ANR	806142	Parameter	ClassAd * newAd	726:22:16702:16715	805928	2	True				
ANR	806143	ParameterType	ClassAd *		805928	0					
ANR	806144	Identifier	newAd		805928	1					
ANR	806145	CFGEntryNode	ENTRY		805928		True				
ANR	806146	CFGExitNode	EXIT		805928		True				
ANR	806147	Symbol	new_seq		805928						
ANR	806148	Symbol	oldAd		805928						
ANR	806149	Symbol	expected		805928						
ANR	806150	Symbol	false		805928						
ANR	806151	Symbol	dropped		805928						
ANR	806152	Symbol	ATTR_UPDATE_SEQUENCE_NUMBER		805928						
ANR	806153	Symbol	old_stime		805928						
ANR	806154	Symbol	className		805928						
ANR	806155	Symbol	global		805928						
ANR	806156	Symbol	old_seq		805928						
ANR	806157	Symbol	new_stime		805928						
ANR	806158	Symbol	* newAd		805928						
ANR	806159	Symbol	newAd -> LookupInteger		805928						
ANR	806160	Symbol	true		805928						
ANR	806161	Symbol	daemonList		805928						
ANR	806162	Symbol	ATTR_DAEMON_START_TIME		805928						
ANR	806163	Symbol	* oldAd		805928						
ANR	806164	Symbol	oldAd -> LookupInteger		805928						
ANR	806165	Symbol	sequenced		805928						
ANR	806166	Symbol	newAd		805928						
ANR	806167	Symbol	classList		805928						
ANR	806168	Function	CollectorStats :: publishGlobal	765:0:17817:18383							
ANR	806169	FunctionDef	CollectorStats :: publishGlobal (ClassAd * ad)		806168	0					
ANR	806170	CompoundStatement		767:0:17867:18383	806168	0					
ANR	806171	IdentifierDeclStatement	char line [ 1024 ] ;	768:4:17873:17888	806168	0	True				
ANR	806172	IdentifierDecl	line [ 1024 ]		806168	0					
ANR	806173	IdentifierDeclType	char [ 1024 ]		806168	0					
ANR	806174	Identifier	line		806168	1					
ANR	806175	PrimaryExpression	1024		806168	2					
ANR	806176	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_TOTAL , global . getTotal ( ) )"	770:4:17895:17984	806168	1	True				
ANR	806177	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_TOTAL , global . getTotal ( ) )"		806168	0					
ANR	806178	Callee	snprintf		806168	0					
ANR	806179	Identifier	snprintf		806168	0					
ANR	806180	ArgumentList	line		806168	1					
ANR	806181	Argument	line		806168	0					
ANR	806182	Identifier	line		806168	0					
ANR	806183	Argument	sizeof ( line )		806168	1					
ANR	806184	SizeofExpression	sizeof ( line )		806168	0					
ANR	806185	Sizeof	sizeof		806168	0					
ANR	806186	SizeofOperand	line		806168	1					
ANR	806187	Argument	"""%s = %d"""		806168	2					
ANR	806188	PrimaryExpression	"""%s = %d"""		806168	0					
ANR	806189	Argument	ATTR_UPDATESTATS_TOTAL		806168	3					
ANR	806190	Identifier	ATTR_UPDATESTATS_TOTAL		806168	0					
ANR	806191	Argument	global . getTotal ( )		806168	4					
ANR	806192	CallExpression	global . getTotal ( )		806168	0					
ANR	806193	Callee	global . getTotal		806168	0					
ANR	806194	MemberAccess	global . getTotal		806168	0					
ANR	806195	Identifier	global		806168	0					
ANR	806196	Identifier	getTotal		806168	1					
ANR	806197	ArgumentList			806168	1					
ANR	806198	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	772:1:17987:18014	806168	2	True				
ANR	806199	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		806168	0		=			
ANR	806200	ArrayIndexing	line [ sizeof ( line ) - 1 ]		806168	0					
ANR	806201	Identifier	line		806168	0					
ANR	806202	AdditiveExpression	sizeof ( line ) - 1		806168	1		-			
ANR	806203	SizeofExpression	sizeof ( line )		806168	0					
ANR	806204	Sizeof	sizeof		806168	0					
ANR	806205	SizeofOperand	line		806168	1					
ANR	806206	PrimaryExpression	1		806168	1					
ANR	806207	PrimaryExpression	'\\0'		806168	1					
ANR	806208	ExpressionStatement	ad -> Insert ( line )	773:4:18020:18036	806168	3	True				
ANR	806209	CallExpression	ad -> Insert ( line )		806168	0					
ANR	806210	Callee	ad -> Insert		806168	0					
ANR	806211	PtrMemberAccess	ad -> Insert		806168	0					
ANR	806212	Identifier	ad		806168	0					
ANR	806213	Identifier	Insert		806168	1					
ANR	806214	ArgumentList	line		806168	1					
ANR	806215	Argument	line		806168	0					
ANR	806216	Identifier	line		806168	0					
ANR	806217	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , global . getSequenced ( ) )"	775:4:18043:18140	806168	4	True				
ANR	806218	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_SEQUENCED , global . getSequenced ( ) )"		806168	0					
ANR	806219	Callee	snprintf		806168	0					
ANR	806220	Identifier	snprintf		806168	0					
ANR	806221	ArgumentList	line		806168	1					
ANR	806222	Argument	line		806168	0					
ANR	806223	Identifier	line		806168	0					
ANR	806224	Argument	sizeof ( line )		806168	1					
ANR	806225	SizeofExpression	sizeof ( line )		806168	0					
ANR	806226	Sizeof	sizeof		806168	0					
ANR	806227	SizeofOperand	line		806168	1					
ANR	806228	Argument	"""%s = %d"""		806168	2					
ANR	806229	PrimaryExpression	"""%s = %d"""		806168	0					
ANR	806230	Argument	ATTR_UPDATESTATS_SEQUENCED		806168	3					
ANR	806231	Identifier	ATTR_UPDATESTATS_SEQUENCED		806168	0					
ANR	806232	Argument	global . getSequenced ( )		806168	4					
ANR	806233	CallExpression	global . getSequenced ( )		806168	0					
ANR	806234	Callee	global . getSequenced		806168	0					
ANR	806235	MemberAccess	global . getSequenced		806168	0					
ANR	806236	Identifier	global		806168	0					
ANR	806237	Identifier	getSequenced		806168	1					
ANR	806238	ArgumentList			806168	1					
ANR	806239	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	777:1:18143:18170	806168	5	True				
ANR	806240	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		806168	0		=			
ANR	806241	ArrayIndexing	line [ sizeof ( line ) - 1 ]		806168	0					
ANR	806242	Identifier	line		806168	0					
ANR	806243	AdditiveExpression	sizeof ( line ) - 1		806168	1		-			
ANR	806244	SizeofExpression	sizeof ( line )		806168	0					
ANR	806245	Sizeof	sizeof		806168	0					
ANR	806246	SizeofOperand	line		806168	1					
ANR	806247	PrimaryExpression	1		806168	1					
ANR	806248	PrimaryExpression	'\\0'		806168	1					
ANR	806249	ExpressionStatement	ad -> Insert ( line )	778:4:18176:18192	806168	6	True				
ANR	806250	CallExpression	ad -> Insert ( line )		806168	0					
ANR	806251	Callee	ad -> Insert		806168	0					
ANR	806252	PtrMemberAccess	ad -> Insert		806168	0					
ANR	806253	Identifier	ad		806168	0					
ANR	806254	Identifier	Insert		806168	1					
ANR	806255	ArgumentList	line		806168	1					
ANR	806256	Argument	line		806168	0					
ANR	806257	Identifier	line		806168	0					
ANR	806258	ExpressionStatement	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_LOST , global . getDropped ( ) )"	780:4:18199:18289	806168	7	True				
ANR	806259	CallExpression	"snprintf ( line , sizeof ( line ) , ""%s = %d"" , ATTR_UPDATESTATS_LOST , global . getDropped ( ) )"		806168	0					
ANR	806260	Callee	snprintf		806168	0					
ANR	806261	Identifier	snprintf		806168	0					
ANR	806262	ArgumentList	line		806168	1					
ANR	806263	Argument	line		806168	0					
ANR	806264	Identifier	line		806168	0					
ANR	806265	Argument	sizeof ( line )		806168	1					
ANR	806266	SizeofExpression	sizeof ( line )		806168	0					
ANR	806267	Sizeof	sizeof		806168	0					
ANR	806268	SizeofOperand	line		806168	1					
ANR	806269	Argument	"""%s = %d"""		806168	2					
ANR	806270	PrimaryExpression	"""%s = %d"""		806168	0					
ANR	806271	Argument	ATTR_UPDATESTATS_LOST		806168	3					
ANR	806272	Identifier	ATTR_UPDATESTATS_LOST		806168	0					
ANR	806273	Argument	global . getDropped ( )		806168	4					
ANR	806274	CallExpression	global . getDropped ( )		806168	0					
ANR	806275	Callee	global . getDropped		806168	0					
ANR	806276	MemberAccess	global . getDropped		806168	0					
ANR	806277	Identifier	global		806168	0					
ANR	806278	Identifier	getDropped		806168	1					
ANR	806279	ArgumentList			806168	1					
ANR	806280	ExpressionStatement	line [ sizeof ( line ) - 1 ] = '\\0'	782:1:18292:18319	806168	8	True				
ANR	806281	AssignmentExpression	line [ sizeof ( line ) - 1 ] = '\\0'		806168	0		=			
ANR	806282	ArrayIndexing	line [ sizeof ( line ) - 1 ]		806168	0					
ANR	806283	Identifier	line		806168	0					
ANR	806284	AdditiveExpression	sizeof ( line ) - 1		806168	1		-			
ANR	806285	SizeofExpression	sizeof ( line )		806168	0					
ANR	806286	Sizeof	sizeof		806168	0					
ANR	806287	SizeofOperand	line		806168	1					
ANR	806288	PrimaryExpression	1		806168	1					
ANR	806289	PrimaryExpression	'\\0'		806168	1					
ANR	806290	ExpressionStatement	ad -> Insert ( line )	783:4:18325:18341	806168	9	True				
ANR	806291	CallExpression	ad -> Insert ( line )		806168	0					
ANR	806292	Callee	ad -> Insert		806168	0					
ANR	806293	PtrMemberAccess	ad -> Insert		806168	0					
ANR	806294	Identifier	ad		806168	0					
ANR	806295	Identifier	Insert		806168	1					
ANR	806296	ArgumentList	line		806168	1					
ANR	806297	Argument	line		806168	0					
ANR	806298	Identifier	line		806168	0					
ANR	806299	ExpressionStatement	classList -> publish ( ad )	785:1:18345:18369	806168	10	True				
ANR	806300	CallExpression	classList -> publish ( ad )		806168	0					
ANR	806301	Callee	classList -> publish		806168	0					
ANR	806302	PtrMemberAccess	classList -> publish		806168	0					
ANR	806303	Identifier	classList		806168	0					
ANR	806304	Identifier	publish		806168	1					
ANR	806305	ArgumentList	ad		806168	1					
ANR	806306	Argument	ad		806168	0					
ANR	806307	Identifier	ad		806168	0					
ANR	806308	ReturnStatement	return 0 ;	787:1:18373:18381	806168	11	True				
ANR	806309	PrimaryExpression	0		806168	0					
ANR	806310	ReturnType	int		806168	1					
ANR	806311	Identifier	CollectorStats :: publishGlobal		806168	2					
ANR	806312	ParameterList	ClassAd * ad		806168	3					
ANR	806313	Parameter	ClassAd * ad	766:31:17853:17863	806168	0	True				
ANR	806314	ParameterType	ClassAd *		806168	0					
ANR	806315	Identifier	ad		806168	1					
ANR	806316	CFGEntryNode	ENTRY		806168		True				
ANR	806317	CFGExitNode	EXIT		806168		True				
ANR	806318	Symbol	ad		806168						
ANR	806319	Symbol	global . getTotal		806168						
ANR	806320	Symbol	line		806168						
ANR	806321	Symbol	ATTR_UPDATESTATS_SEQUENCED		806168						
ANR	806322	Symbol	global . getSequenced		806168						
ANR	806323	Symbol	global		806168						
ANR	806324	Symbol	global . getDropped		806168						
ANR	806325	Symbol	* line		806168						
ANR	806326	Symbol	ATTR_UPDATESTATS_LOST		806168						
ANR	806327	Symbol	classList		806168						
ANR	806328	Symbol	ATTR_UPDATESTATS_TOTAL		806168						
ANR	806329	Function	CollectorStats :: considerCollectingGarbage	790:0:18386:18853							
ANR	806330	FunctionDef	CollectorStats :: considerCollectingGarbage ()		806329	0					
ANR	806331	CompoundStatement		791:44:18435:18853	806329	0					
ANR	806332	IdentifierDeclStatement	time_t now = time ( NULL ) ;	792:1:18438:18461	806329	0	True				
ANR	806333	IdentifierDecl	now = time ( NULL )		806329	0					
ANR	806334	IdentifierDeclType	time_t		806329	0					
ANR	806335	Identifier	now		806329	1					
ANR	806336	AssignmentExpression	now = time ( NULL )		806329	2		=			
ANR	806337	Identifier	now		806329	0					
ANR	806338	CallExpression	time ( NULL )		806329	1					
ANR	806339	Callee	time		806329	0					
ANR	806340	Identifier	time		806329	0					
ANR	806341	ArgumentList	NULL		806329	1					
ANR	806342	Argument	NULL		806329	0					
ANR	806343	Identifier	NULL		806329	0					
ANR	806344	IfStatement	if ( m_garbage_interval <= 0 )		806329	1					
ANR	806345	Condition	m_garbage_interval <= 0	793:5:18468:18490	806329	0	True				
ANR	806346	RelationalExpression	m_garbage_interval <= 0		806329	0		<=			
ANR	806347	Identifier	m_garbage_interval		806329	0					
ANR	806348	PrimaryExpression	0		806329	1					
ANR	806349	CompoundStatement		3:31:58:58	806329	1					
ANR	806350	ReturnStatement	return ;	794:2:18498:18504	806329	0	True				
ANR	806351	IfStatement	if ( now < m_last_garbage_time + m_garbage_interval )		806329	2					
ANR	806352	Condition	now < m_last_garbage_time + m_garbage_interval	796:5:18548:18593	806329	0	True				
ANR	806353	RelationalExpression	now < m_last_garbage_time + m_garbage_interval		806329	0		<			
ANR	806354	Identifier	now		806329	0					
ANR	806355	AdditiveExpression	m_last_garbage_time + m_garbage_interval		806329	1		+			
ANR	806356	Identifier	m_last_garbage_time		806329	0					
ANR	806357	Identifier	m_garbage_interval		806329	1					
ANR	806358	CompoundStatement		6:54:161:161	806329	1					
ANR	806359	IfStatement	if ( now < m_last_garbage_time )		806329	0					
ANR	806360	Condition	now < m_last_garbage_time	797:6:18605:18629	806329	0	True				
ANR	806361	RelationalExpression	now < m_last_garbage_time		806329	0		<			
ANR	806362	Identifier	now		806329	0					
ANR	806363	Identifier	m_last_garbage_time		806329	1					
ANR	806364	CompoundStatement		7:34:197:197	806329	1					
ANR	806365	ExpressionStatement	m_last_garbage_time = now	799:3:18702:18727	806329	0	True				
ANR	806366	AssignmentExpression	m_last_garbage_time = now		806329	0		=			
ANR	806367	Identifier	m_last_garbage_time		806329	0					
ANR	806368	Identifier	now		806329	1					
ANR	806369	ReturnStatement	return ;	801:2:18735:18741	806329	1	True				
ANR	806370	ExpressionStatement	m_last_garbage_time = now	804:1:18771:18796	806329	3	True				
ANR	806371	AssignmentExpression	m_last_garbage_time = now		806329	0		=			
ANR	806372	Identifier	m_last_garbage_time		806329	0					
ANR	806373	Identifier	now		806329	1					
ANR	806374	IfStatement	if ( daemonList )		806329	4					
ANR	806375	Condition	daemonList	805:5:18803:18812	806329	0	True				
ANR	806376	Identifier	daemonList		806329	0					
ANR	806377	CompoundStatement		15:18:380:380	806329	1					
ANR	806378	ExpressionStatement	daemonList -> collectGarbage ( )	806:2:18820:18848	806329	0	True				
ANR	806379	CallExpression	daemonList -> collectGarbage ( )		806329	0					
ANR	806380	Callee	daemonList -> collectGarbage		806329	0					
ANR	806381	PtrMemberAccess	daemonList -> collectGarbage		806329	0					
ANR	806382	Identifier	daemonList		806329	0					
ANR	806383	Identifier	collectGarbage		806329	1					
ANR	806384	ArgumentList			806329	1					
ANR	806385	ReturnType	void		806329	1					
ANR	806386	Identifier	CollectorStats :: considerCollectingGarbage		806329	2					
ANR	806387	ParameterList			806329	3					
ANR	806388	CFGEntryNode	ENTRY		806329		True				
ANR	806389	CFGExitNode	EXIT		806329		True				
ANR	806390	Symbol	NULL		806329						
ANR	806391	Symbol	now		806329						
ANR	806392	Symbol	m_garbage_interval		806329						
ANR	806393	Symbol	daemonList		806329						
ANR	806394	Symbol	time		806329						
ANR	806395	Symbol	m_last_garbage_time		806329						
ANR	806396	Function	CollectorDaemonStatsList :: collectGarbage	810:0:18856:19769							
ANR	806397	FunctionDef	CollectorDaemonStatsList :: collectGarbage ()		806396	0					
ANR	806398	CompoundStatement		812:0:18904:19769	806396	0					
ANR	806399	IfStatement	if ( ! hashTable )		806396	0					
ANR	806400	Condition	! hashTable	813:5:18911:18920	806396	0	True				
ANR	806401	UnaryOperationExpression	! hashTable		806396	0					
ANR	806402	UnaryOperator	!		806396	0					
ANR	806403	Identifier	hashTable		806396	1					
ANR	806404	CompoundStatement		2:18:19:19	806396	1					
ANR	806405	ReturnStatement	return ;	814:2:18928:18934	806396	0	True				
ANR	806406	IdentifierDeclStatement	StatsHashKey key ;	817:1:18941:18957	806396	1	True				
ANR	806407	IdentifierDecl	key		806396	0					
ANR	806408	IdentifierDeclType	StatsHashKey		806396	0					
ANR	806409	Identifier	key		806396	1					
ANR	806410	IdentifierDeclStatement	CollectorBaseStats * value ;	818:1:18960:18985	806396	2	True				
ANR	806411	IdentifierDecl	* value		806396	0					
ANR	806412	IdentifierDeclType	CollectorBaseStats *		806396	0					
ANR	806413	Identifier	value		806396	1					
ANR	806414	IdentifierDeclStatement	int records_kept = 0 ;	819:1:18988:19008	806396	3	True				
ANR	806415	IdentifierDecl	records_kept = 0		806396	0					
ANR	806416	IdentifierDeclType	int		806396	0					
ANR	806417	Identifier	records_kept		806396	1					
ANR	806418	AssignmentExpression	records_kept = 0		806396	2		=			
ANR	806419	Identifier	records_kept		806396	0					
ANR	806420	PrimaryExpression	0		806396	1					
ANR	806421	IdentifierDeclStatement	int records_deleted = 0 ;	820:1:19011:19034	806396	4	True				
ANR	806422	IdentifierDecl	records_deleted = 0		806396	0					
ANR	806423	IdentifierDeclType	int		806396	0					
ANR	806424	Identifier	records_deleted		806396	1					
ANR	806425	AssignmentExpression	records_deleted = 0		806396	2		=			
ANR	806426	Identifier	records_deleted		806396	0					
ANR	806427	PrimaryExpression	0		806396	1					
ANR	806428	ExpressionStatement	hashTable -> startIterations ( )	822:1:19038:19066	806396	5	True				
ANR	806429	CallExpression	hashTable -> startIterations ( )		806396	0					
ANR	806430	Callee	hashTable -> startIterations		806396	0					
ANR	806431	PtrMemberAccess	hashTable -> startIterations		806396	0					
ANR	806432	Identifier	hashTable		806396	0					
ANR	806433	Identifier	startIterations		806396	1					
ANR	806434	ArgumentList			806396	1					
ANR	806435	WhileStatement	"while ( hashTable -> iterate ( key , value ) )"		806396	6					
ANR	806436	Condition	"hashTable -> iterate ( key , value )"	823:8:19076:19107	806396	0	True				
ANR	806437	CallExpression	"hashTable -> iterate ( key , value )"		806396	0					
ANR	806438	Callee	hashTable -> iterate		806396	0					
ANR	806439	PtrMemberAccess	hashTable -> iterate		806396	0					
ANR	806440	Identifier	hashTable		806396	0					
ANR	806441	Identifier	iterate		806396	1					
ANR	806442	ArgumentList	key		806396	1					
ANR	806443	Argument	key		806396	0					
ANR	806444	Identifier	key		806396	0					
ANR	806445	Argument	value		806396	1					
ANR	806446	Identifier	value		806396	0					
ANR	806447	CompoundStatement		12:43:206:206	806396	1					
ANR	806448	IfStatement	if ( value -> wasRecentlyUpdated ( ) )		806396	0					
ANR	806449	Condition	value -> wasRecentlyUpdated ( )	824:6:19119:19145	806396	0	True				
ANR	806450	CallExpression	value -> wasRecentlyUpdated ( )		806396	0					
ANR	806451	Callee	value -> wasRecentlyUpdated		806396	0					
ANR	806452	PtrMemberAccess	value -> wasRecentlyUpdated		806396	0					
ANR	806453	Identifier	value		806396	0					
ANR	806454	Identifier	wasRecentlyUpdated		806396	1					
ANR	806455	ArgumentList			806396	1					
ANR	806456	CompoundStatement		13:36:244:244	806396	1					
ANR	806457	ExpressionStatement	value -> setRecentlyUpdated ( false )	827:3:19270:19302	806396	0	True				
ANR	806458	CallExpression	value -> setRecentlyUpdated ( false )		806396	0					
ANR	806459	Callee	value -> setRecentlyUpdated		806396	0					
ANR	806460	PtrMemberAccess	value -> setRecentlyUpdated		806396	0					
ANR	806461	Identifier	value		806396	0					
ANR	806462	Identifier	setRecentlyUpdated		806396	1					
ANR	806463	ArgumentList	false		806396	1					
ANR	806464	Argument	false		806396	0					
ANR	806465	Identifier	false		806396	0					
ANR	806466	ExpressionStatement	records_kept ++	828:3:19307:19321	806396	1	True				
ANR	806467	PostIncDecOperationExpression	records_kept ++		806396	0					
ANR	806468	Identifier	records_kept		806396	0					
ANR	806469	IncDec	++		806396	1					
ANR	806470	ElseStatement	else		806396	0					
ANR	806471	CompoundStatement		22:3:535:548	806396	0					
ANR	806472	IdentifierDeclStatement	MyString desc ;	833:3:19440:19453	806396	0	True				
ANR	806473	IdentifierDecl	desc		806396	0					
ANR	806474	IdentifierDeclType	MyString		806396	0					
ANR	806475	Identifier	desc		806396	1					
ANR	806476	ExpressionStatement	key . getstr ( desc )	834:3:19458:19476	806396	1	True				
ANR	806477	CallExpression	key . getstr ( desc )		806396	0					
ANR	806478	Callee	key . getstr		806396	0					
ANR	806479	MemberAccess	key . getstr		806396	0					
ANR	806480	Identifier	key		806396	0					
ANR	806481	Identifier	getstr		806396	1					
ANR	806482	ArgumentList	desc		806396	1					
ANR	806483	Argument	desc		806396	0					
ANR	806484	Identifier	desc		806396	0					
ANR	806485	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Removing stale collector stats for %s\\n"" , desc . Value ( ) )"	835:3:19481:19566	806396	2	True				
ANR	806486	CallExpression	"dprintf ( D_FULLDEBUG , ""Removing stale collector stats for %s\\n"" , desc . Value ( ) )"		806396	0					
ANR	806487	Callee	dprintf		806396	0					
ANR	806488	Identifier	dprintf		806396	0					
ANR	806489	ArgumentList	D_FULLDEBUG		806396	1					
ANR	806490	Argument	D_FULLDEBUG		806396	0					
ANR	806491	Identifier	D_FULLDEBUG		806396	0					
ANR	806492	Argument	"""Removing stale collector stats for %s\\n"""		806396	1					
ANR	806493	PrimaryExpression	"""Removing stale collector stats for %s\\n"""		806396	0					
ANR	806494	Argument	desc . Value ( )		806396	2					
ANR	806495	CallExpression	desc . Value ( )		806396	0					
ANR	806496	Callee	desc . Value		806396	0					
ANR	806497	MemberAccess	desc . Value		806396	0					
ANR	806498	Identifier	desc		806396	0					
ANR	806499	Identifier	Value		806396	1					
ANR	806500	ArgumentList			806396	1					
ANR	806501	ExpressionStatement	hashTable -> remove ( key )	838:3:19572:19596	806396	3	True				
ANR	806502	CallExpression	hashTable -> remove ( key )		806396	0					
ANR	806503	Callee	hashTable -> remove		806396	0					
ANR	806504	PtrMemberAccess	hashTable -> remove		806396	0					
ANR	806505	Identifier	hashTable		806396	0					
ANR	806506	Identifier	remove		806396	1					
ANR	806507	ArgumentList	key		806396	1					
ANR	806508	Argument	key		806396	0					
ANR	806509	Identifier	key		806396	0					
ANR	806510	Statement	delete	839:3:19601:19606	806396	4	True				
ANR	806511	ExpressionStatement	value	839:10:19608:19613	806396	5	True				
ANR	806512	Identifier	value		806396	0					
ANR	806513	ExpressionStatement	records_deleted ++	840:3:19618:19635	806396	6	True				
ANR	806514	PostIncDecOperationExpression	records_deleted ++		806396	0					
ANR	806515	Identifier	records_deleted		806396	0					
ANR	806516	IncDec	++		806396	1					
ANR	806517	ExpressionStatement	"dprintf ( D_ALWAYS , ""COLLECTOR_STATS_SWEEP: kept %d records and deleted %d.\\n"" , records_kept , records_deleted )"	843:1:19645:19767	806396	7	True				
ANR	806518	CallExpression	"dprintf ( D_ALWAYS , ""COLLECTOR_STATS_SWEEP: kept %d records and deleted %d.\\n"" , records_kept , records_deleted )"		806396	0					
ANR	806519	Callee	dprintf		806396	0					
ANR	806520	Identifier	dprintf		806396	0					
ANR	806521	ArgumentList	D_ALWAYS		806396	1					
ANR	806522	Argument	D_ALWAYS		806396	0					
ANR	806523	Identifier	D_ALWAYS		806396	0					
ANR	806524	Argument	"""COLLECTOR_STATS_SWEEP: kept %d records and deleted %d.\\n"""		806396	1					
ANR	806525	PrimaryExpression	"""COLLECTOR_STATS_SWEEP: kept %d records and deleted %d.\\n"""		806396	0					
ANR	806526	Argument	records_kept		806396	2					
ANR	806527	Identifier	records_kept		806396	0					
ANR	806528	Argument	records_deleted		806396	3					
ANR	806529	Identifier	records_deleted		806396	0					
ANR	806530	ReturnType	void		806396	1					
ANR	806531	Identifier	CollectorDaemonStatsList :: collectGarbage		806396	2					
ANR	806532	ParameterList			806396	3					
ANR	806533	CFGEntryNode	ENTRY		806396		True				
ANR	806534	CFGExitNode	EXIT		806396		True				
ANR	806535	Symbol	value -> wasRecentlyUpdated		806396						
ANR	806536	Symbol	false		806396						
ANR	806537	Symbol	D_ALWAYS		806396						
ANR	806538	Symbol	D_FULLDEBUG		806396						
ANR	806539	Symbol	desc . Value		806396						
ANR	806540	Symbol	* hashTable		806396						
ANR	806541	Symbol	hashTable		806396						
ANR	806542	Symbol	hashTable -> iterate		806396						
ANR	806543	Symbol	records_kept		806396						
ANR	806544	Symbol	* value		806396						
ANR	806545	Symbol	records_deleted		806396						
ANR	806546	Symbol	value		806396						
ANR	806547	Symbol	key		806396						
ANR	806548	Symbol	desc		806396						
