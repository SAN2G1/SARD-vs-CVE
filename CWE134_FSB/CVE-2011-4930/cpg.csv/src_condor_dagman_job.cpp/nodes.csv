command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3131251	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_job.cpp								
ANR	3131252	DeclStmt									
ANR	3131253	Decl							const char	const char *	JOB_TAG_NAME
ANR	3131254	DeclStmt									
ANR	3131255	Decl							const char	const char *	PEGASUS_SITE
ANR	3131256	DeclStmt									
ANR	3131257	Decl							JobID_t	JobID_t	Job :: _jobID_counter
ANR	3131258	DeclStmt									
ANR	3131259	Decl							int	int	Job :: NOOP_NODE_PROCID
ANR	3131260	DeclStmt									
ANR	3131261	Decl							int	int	Job :: _nextJobstateSeqNum
ANR	3131262	DeclStmt									
ANR	3131263	Decl							const char	const char * [ ]	Job :: queue_t_names
ANR	3131264	DeclStmt									
ANR	3131265	Decl							const char	const char * [ ]	Job :: status_t_names
ANR	3131266	DeclStmt									
ANR	3131267	Decl							const char	const char * [ ]	Job :: _job_type_names
ANR	3131268	Function	Job :: ~Job	67:0:2199:2977							
ANR	3131269	FunctionDef	Job :: ~Job ()		3131268	0					
ANR	3131270	CompoundStatement		67:12:2211:2977	3131268	0					
ANR	3131271	Statement	delete	68:1:2214:2219	3131268	0	True				
ANR	3131272	Statement	[	68:8:2221:2221	3131268	1	True				
ANR	3131273	Statement	]	68:9:2222:2222	3131268	2	True				
ANR	3131274	ExpressionStatement	_directory	68:11:2224:2234	3131268	3	True				
ANR	3131275	Identifier	_directory		3131268	0					
ANR	3131276	Statement	delete	69:1:2237:2242	3131268	4	True				
ANR	3131277	Statement	[	69:8:2244:2244	3131268	5	True				
ANR	3131278	Statement	]	69:9:2245:2245	3131268	6	True				
ANR	3131279	ExpressionStatement	_cmdFile	69:11:2247:2255	3131268	7	True				
ANR	3131280	Identifier	_cmdFile		3131268	0					
ANR	3131281	Statement	delete	70:1:2258:2263	3131268	8	True				
ANR	3131282	Statement	[	70:8:2265:2265	3131268	9	True				
ANR	3131283	Statement	]	70:9:2266:2266	3131268	10	True				
ANR	3131284	ExpressionStatement	_dagFile	70:11:2268:2276	3131268	11	True				
ANR	3131285	Identifier	_dagFile		3131268	0					
ANR	3131286	Statement	delete	76:1:2609:2614	3131268	12	True				
ANR	3131287	Statement	[	76:8:2616:2616	3131268	13	True				
ANR	3131288	Statement	]	76:9:2617:2617	3131268	14	True				
ANR	3131289	ExpressionStatement	_jobName	76:11:2619:2627	3131268	15	True				
ANR	3131290	Identifier	_jobName		3131268	0					
ANR	3131291	Statement	delete	77:1:2630:2635	3131268	16	True				
ANR	3131292	Statement	[	77:8:2637:2637	3131268	17	True				
ANR	3131293	Statement	]	77:9:2638:2638	3131268	18	True				
ANR	3131294	ExpressionStatement	_logFile	77:11:2640:2648	3131268	19	True				
ANR	3131295	Identifier	_logFile		3131268	0					
ANR	3131296	ExpressionStatement	varNamesFromDag -> Rewind ( )	79:1:2652:2677	3131268	20	True				
ANR	3131297	CallExpression	varNamesFromDag -> Rewind ( )		3131268	0					
ANR	3131298	Callee	varNamesFromDag -> Rewind		3131268	0					
ANR	3131299	PtrMemberAccess	varNamesFromDag -> Rewind		3131268	0					
ANR	3131300	Identifier	varNamesFromDag		3131268	0					
ANR	3131301	Identifier	Rewind		3131268	1					
ANR	3131302	ArgumentList			3131268	1					
ANR	3131303	IdentifierDeclStatement	MyString * name ;	80:1:2680:2694	3131268	21	True				
ANR	3131304	IdentifierDecl	* name		3131268	0					
ANR	3131305	IdentifierDeclType	MyString *		3131268	0					
ANR	3131306	Identifier	name		3131268	1					
ANR	3131307	WhileStatement	while ( ( name = varNamesFromDag -> Next ( ) ) )		3131268	22					
ANR	3131308	Condition	name = varNamesFromDag -> Next ( )	81:9:2705:2736	3131268	0	True				
ANR	3131309	AssignmentExpression	name = varNamesFromDag -> Next ( )		3131268	0		=			
ANR	3131310	Identifier	name		3131268	0					
ANR	3131311	CallExpression	varNamesFromDag -> Next ( )		3131268	1					
ANR	3131312	Callee	varNamesFromDag -> Next		3131268	0					
ANR	3131313	PtrMemberAccess	varNamesFromDag -> Next		3131268	0					
ANR	3131314	Identifier	varNamesFromDag		3131268	0					
ANR	3131315	Identifier	Next		3131268	1					
ANR	3131316	ArgumentList			3131268	1					
ANR	3131317	CompoundStatement		15:44:528:528	3131268	1					
ANR	3131318	Statement	delete	82:2:2744:2749	3131268	0	True				
ANR	3131319	ExpressionStatement	name	82:9:2751:2755	3131268	1	True				
ANR	3131320	Identifier	name		3131268	0					
ANR	3131321	Statement	delete	84:1:2761:2766	3131268	23	True				
ANR	3131322	ExpressionStatement	varNamesFromDag	84:8:2768:2783	3131268	24	True				
ANR	3131323	Identifier	varNamesFromDag		3131268	0					
ANR	3131324	ExpressionStatement	varValsFromDag -> Rewind ( )	86:1:2787:2811	3131268	25	True				
ANR	3131325	CallExpression	varValsFromDag -> Rewind ( )		3131268	0					
ANR	3131326	Callee	varValsFromDag -> Rewind		3131268	0					
ANR	3131327	PtrMemberAccess	varValsFromDag -> Rewind		3131268	0					
ANR	3131328	Identifier	varValsFromDag		3131268	0					
ANR	3131329	Identifier	Rewind		3131268	1					
ANR	3131330	ArgumentList			3131268	1					
ANR	3131331	IdentifierDeclStatement	MyString * val ;	87:1:2814:2827	3131268	26	True				
ANR	3131332	IdentifierDecl	* val		3131268	0					
ANR	3131333	IdentifierDeclType	MyString *		3131268	0					
ANR	3131334	Identifier	val		3131268	1					
ANR	3131335	WhileStatement	while ( ( val = varValsFromDag -> Next ( ) ) )		3131268	27					
ANR	3131336	Condition	val = varValsFromDag -> Next ( )	88:9:2838:2867	3131268	0	True				
ANR	3131337	AssignmentExpression	val = varValsFromDag -> Next ( )		3131268	0		=			
ANR	3131338	Identifier	val		3131268	0					
ANR	3131339	CallExpression	varValsFromDag -> Next ( )		3131268	1					
ANR	3131340	Callee	varValsFromDag -> Next		3131268	0					
ANR	3131341	PtrMemberAccess	varValsFromDag -> Next		3131268	0					
ANR	3131342	Identifier	varValsFromDag		3131268	0					
ANR	3131343	Identifier	Next		3131268	1					
ANR	3131344	ArgumentList			3131268	1					
ANR	3131345	CompoundStatement		22:42:659:659	3131268	1					
ANR	3131346	Statement	delete	89:2:2875:2880	3131268	0	True				
ANR	3131347	ExpressionStatement	val	89:9:2882:2885	3131268	1	True				
ANR	3131348	Identifier	val		3131268	0					
ANR	3131349	Statement	delete	91:1:2891:2896	3131268	28	True				
ANR	3131350	ExpressionStatement	varValsFromDag	91:8:2898:2912	3131268	29	True				
ANR	3131351	Identifier	varValsFromDag		3131268	0					
ANR	3131352	Statement	delete	93:1:2916:2921	3131268	30	True				
ANR	3131353	ExpressionStatement	_scriptPre	93:8:2923:2933	3131268	31	True				
ANR	3131354	Identifier	_scriptPre		3131268	0					
ANR	3131355	Statement	delete	94:1:2936:2941	3131268	32	True				
ANR	3131356	ExpressionStatement	_scriptPost	94:8:2943:2954	3131268	33	True				
ANR	3131357	Identifier	_scriptPost		3131268	0					
ANR	3131358	Statement	delete	96:1:2958:2963	3131268	34	True				
ANR	3131359	Statement	[	96:8:2965:2965	3131268	35	True				
ANR	3131360	Statement	]	96:9:2966:2966	3131268	36	True				
ANR	3131361	ExpressionStatement	_jobTag	96:11:2968:2975	3131268	37	True				
ANR	3131362	Identifier	_jobTag		3131268	0					
ANR	3131363	Identifier	Job :: ~Job		3131268	1					
ANR	3131364	ParameterList			3131268	2					
ANR	3131365	CFGEntryNode	ENTRY		3131268		True				
ANR	3131366	CFGExitNode	EXIT		3131268		True				
ANR	3131367	Symbol	varNamesFromDag -> Next		3131268						
ANR	3131368	Symbol	val		3131268						
ANR	3131369	Symbol	varValsFromDag		3131268						
ANR	3131370	Symbol	* varNamesFromDag		3131268						
ANR	3131371	Symbol	name		3131268						
ANR	3131372	Symbol	varNamesFromDag		3131268						
ANR	3131373	Symbol	varValsFromDag -> Next		3131268						
ANR	3131374	Symbol	* varValsFromDag		3131268						
ANR	3131375	Function	Job :: Job	100:0:3058:3285							
ANR	3131376	FunctionDef	"Job :: Job (const job_type_t jobType , const char * jobName , const char * directory , const char * cmdFile)"		3131375	0					
ANR	3131377	CompoundStatement		103:0:3245:3285	3131375	0					
ANR	3131378	ExpressionStatement	"Init ( jobName , directory , cmdFile )"	104:1:3248:3283	3131375	0	True				
ANR	3131379	CallExpression	"Init ( jobName , directory , cmdFile )"		3131375	0					
ANR	3131380	Callee	Init		3131375	0					
ANR	3131381	Identifier	Init		3131375	0					
ANR	3131382	ArgumentList	jobName		3131375	1					
ANR	3131383	Argument	jobName		3131375	0					
ANR	3131384	Identifier	jobName		3131375	0					
ANR	3131385	Argument	directory		3131375	1					
ANR	3131386	Identifier	directory		3131375	0					
ANR	3131387	Argument	cmdFile		3131375	2					
ANR	3131388	Identifier	cmdFile		3131375	0					
ANR	3131389	Identifier	Job :: Job		3131375	1					
ANR	3131390	ParameterList	"const job_type_t jobType , const char * jobName , const char * directory , const char * cmdFile"		3131375	2					
ANR	3131391	Parameter	const job_type_t jobType	100:10:3068:3091	3131375	0	True				
ANR	3131392	ParameterType	const job_type_t		3131375	0					
ANR	3131393	Identifier	jobType		3131375	1					
ANR	3131394	Parameter	const char * jobName	100:36:3094:3112	3131375	1	True				
ANR	3131395	ParameterType	const char *		3131375	0					
ANR	3131396	Identifier	jobName		3131375	1					
ANR	3131397	Parameter	const char * directory	101:3:3118:3138	3131375	2	True				
ANR	3131398	ParameterType	const char *		3131375	0					
ANR	3131399	Identifier	directory		3131375	1					
ANR	3131400	Parameter	const char * cmdFile	101:26:3141:3159	3131375	3	True				
ANR	3131401	ParameterType	const char *		3131375	0					
ANR	3131402	Identifier	cmdFile		3131375	1					
ANR	3131403	CFGEntryNode	ENTRY		3131375		True				
ANR	3131404	CFGExitNode	EXIT		3131375		True				
ANR	3131405	Symbol	jobName		3131375						
ANR	3131406	Symbol	jobType		3131375						
ANR	3131407	Symbol	directory		3131375						
ANR	3131408	Symbol	cmdFile		3131375						
ANR	3131409	Function	Job :: Init	108:0:3366:4843							
ANR	3131410	FunctionDef	"Job :: Init (const char * jobName , const char * directory , const char * cmdFile)"		3131409	0					
ANR	3131411	CompoundStatement		110:0:3451:4843	3131409	0					
ANR	3131412	ExpressionStatement	ASSERT ( jobName != NULL )	111:1:3454:3479	3131409	0	True				
ANR	3131413	CallExpression	ASSERT ( jobName != NULL )		3131409	0					
ANR	3131414	Callee	ASSERT		3131409	0					
ANR	3131415	Identifier	ASSERT		3131409	0					
ANR	3131416	ArgumentList	jobName != NULL		3131409	1					
ANR	3131417	Argument	jobName != NULL		3131409	0					
ANR	3131418	EqualityExpression	jobName != NULL		3131409	0		!=			
ANR	3131419	Identifier	jobName		3131409	0					
ANR	3131420	Identifier	NULL		3131409	1					
ANR	3131421	ExpressionStatement	ASSERT ( cmdFile != NULL )	112:1:3482:3507	3131409	1	True				
ANR	3131422	CallExpression	ASSERT ( cmdFile != NULL )		3131409	0					
ANR	3131423	Callee	ASSERT		3131409	0					
ANR	3131424	Identifier	ASSERT		3131409	0					
ANR	3131425	ArgumentList	cmdFile != NULL		3131409	1					
ANR	3131426	Argument	cmdFile != NULL		3131409	0					
ANR	3131427	EqualityExpression	cmdFile != NULL		3131409	0		!=			
ANR	3131428	Identifier	cmdFile		3131409	0					
ANR	3131429	Identifier	NULL		3131409	1					
ANR	3131430	ExpressionStatement	"debug_printf ( DEBUG_DEBUG_1 , ""Job::Init(%s, %s, %s)\\n"" , jobName , directory , cmdFile )"	114:1:3511:3600	3131409	2	True				
ANR	3131431	CallExpression	"debug_printf ( DEBUG_DEBUG_1 , ""Job::Init(%s, %s, %s)\\n"" , jobName , directory , cmdFile )"		3131409	0					
ANR	3131432	Callee	debug_printf		3131409	0					
ANR	3131433	Identifier	debug_printf		3131409	0					
ANR	3131434	ArgumentList	DEBUG_DEBUG_1		3131409	1					
ANR	3131435	Argument	DEBUG_DEBUG_1		3131409	0					
ANR	3131436	Identifier	DEBUG_DEBUG_1		3131409	0					
ANR	3131437	Argument	"""Job::Init(%s, %s, %s)\\n"""		3131409	1					
ANR	3131438	PrimaryExpression	"""Job::Init(%s, %s, %s)\\n"""		3131409	0					
ANR	3131439	Argument	jobName		3131409	2					
ANR	3131440	Identifier	jobName		3131409	0					
ANR	3131441	Argument	directory		3131409	3					
ANR	3131442	Identifier	directory		3131409	0					
ANR	3131443	Argument	cmdFile		3131409	4					
ANR	3131444	Identifier	cmdFile		3131409	0					
ANR	3131445	ExpressionStatement	_scriptPre = NULL	117:4:3607:3624	3131409	3	True				
ANR	3131446	AssignmentExpression	_scriptPre = NULL		3131409	0		=			
ANR	3131447	Identifier	_scriptPre		3131409	0					
ANR	3131448	Identifier	NULL		3131409	1					
ANR	3131449	ExpressionStatement	_scriptPost = NULL	118:4:3630:3648	3131409	4	True				
ANR	3131450	AssignmentExpression	_scriptPost = NULL		3131409	0		=			
ANR	3131451	Identifier	_scriptPost		3131409	0					
ANR	3131452	Identifier	NULL		3131409	1					
ANR	3131453	ExpressionStatement	_Status = STATUS_READY	119:4:3654:3676	3131409	5	True				
ANR	3131454	AssignmentExpression	_Status = STATUS_READY		3131409	0		=			
ANR	3131455	Identifier	_Status		3131409	0					
ANR	3131456	Identifier	STATUS_READY		3131409	1					
ANR	3131457	ExpressionStatement	_isIdle = false	120:1:3679:3694	3131409	6	True				
ANR	3131458	AssignmentExpression	_isIdle = false		3131409	0		=			
ANR	3131459	Identifier	_isIdle		3131409	0					
ANR	3131460	Identifier	false		3131409	1					
ANR	3131461	ExpressionStatement	countedAsDone = false	121:1:3697:3718	3131409	7	True				
ANR	3131462	AssignmentExpression	countedAsDone = false		3131409	0		=			
ANR	3131463	Identifier	countedAsDone		3131409	0					
ANR	3131464	Identifier	false		3131409	1					
ANR	3131465	ExpressionStatement	_jobName = strnewp ( jobName )	123:4:3725:3753	3131409	8	True				
ANR	3131466	AssignmentExpression	_jobName = strnewp ( jobName )		3131409	0		=			
ANR	3131467	Identifier	_jobName		3131409	0					
ANR	3131468	CallExpression	strnewp ( jobName )		3131409	1					
ANR	3131469	Callee	strnewp		3131409	0					
ANR	3131470	Identifier	strnewp		3131409	0					
ANR	3131471	ArgumentList	jobName		3131409	1					
ANR	3131472	Argument	jobName		3131409	0					
ANR	3131473	Identifier	jobName		3131409	0					
ANR	3131474	ExpressionStatement	_directory = strnewp ( directory )	124:1:3756:3788	3131409	9	True				
ANR	3131475	AssignmentExpression	_directory = strnewp ( directory )		3131409	0		=			
ANR	3131476	Identifier	_directory		3131409	0					
ANR	3131477	CallExpression	strnewp ( directory )		3131409	1					
ANR	3131478	Callee	strnewp		3131409	0					
ANR	3131479	Identifier	strnewp		3131409	0					
ANR	3131480	ArgumentList	directory		3131409	1					
ANR	3131481	Argument	directory		3131409	0					
ANR	3131482	Identifier	directory		3131409	0					
ANR	3131483	ExpressionStatement	_cmdFile = strnewp ( cmdFile )	125:4:3794:3822	3131409	10	True				
ANR	3131484	AssignmentExpression	_cmdFile = strnewp ( cmdFile )		3131409	0		=			
ANR	3131485	Identifier	_cmdFile		3131409	0					
ANR	3131486	CallExpression	strnewp ( cmdFile )		3131409	1					
ANR	3131487	Callee	strnewp		3131409	0					
ANR	3131488	Identifier	strnewp		3131409	0					
ANR	3131489	ArgumentList	cmdFile		3131409	1					
ANR	3131490	Argument	cmdFile		3131409	0					
ANR	3131491	Identifier	cmdFile		3131409	0					
ANR	3131492	ExpressionStatement	_dagFile = NULL	126:1:3825:3840	3131409	11	True				
ANR	3131493	AssignmentExpression	_dagFile = NULL		3131409	0		=			
ANR	3131494	Identifier	_dagFile		3131409	0					
ANR	3131495	Identifier	NULL		3131409	1					
ANR	3131496	ExpressionStatement	_throttleInfo = NULL	127:1:3843:3863	3131409	12	True				
ANR	3131497	AssignmentExpression	_throttleInfo = NULL		3131409	0		=			
ANR	3131498	Identifier	_throttleInfo		3131409	0					
ANR	3131499	Identifier	NULL		3131409	1					
ANR	3131500	ExpressionStatement	_logIsMonitored = false	128:1:3866:3889	3131409	13	True				
ANR	3131501	AssignmentExpression	_logIsMonitored = false		3131409	0		=			
ANR	3131502	Identifier	_logIsMonitored		3131409	0					
ANR	3131503	Identifier	false		3131409	1					
ANR	3131504	ExpressionStatement	_useDefaultLog = false	129:1:3892:3914	3131409	14	True				
ANR	3131505	AssignmentExpression	_useDefaultLog = false		3131409	0		=			
ANR	3131506	Identifier	_useDefaultLog		3131409	0					
ANR	3131507	Identifier	false		3131409	1					
ANR	3131508	ExpressionStatement	_jobID = _jobID_counter ++	134:4:4036:4061	3131409	15	True				
ANR	3131509	AssignmentExpression	_jobID = _jobID_counter ++		3131409	0		=			
ANR	3131510	Identifier	_jobID		3131409	0					
ANR	3131511	PostIncDecOperationExpression	_jobID_counter ++		3131409	1					
ANR	3131512	Identifier	_jobID_counter		3131409	0					
ANR	3131513	IncDec	++		3131409	1					
ANR	3131514	ExpressionStatement	retry_max = 0	136:4:4068:4081	3131409	16	True				
ANR	3131515	AssignmentExpression	retry_max = 0		3131409	0		=			
ANR	3131516	Identifier	retry_max		3131409	0					
ANR	3131517	PrimaryExpression	0		3131409	1					
ANR	3131518	ExpressionStatement	retries = 0	137:4:4087:4098	3131409	17	True				
ANR	3131519	AssignmentExpression	retries = 0		3131409	0		=			
ANR	3131520	Identifier	retries		3131409	0					
ANR	3131521	PrimaryExpression	0		3131409	1					
ANR	3131522	ExpressionStatement	_submitTries = 0	138:4:4104:4120	3131409	18	True				
ANR	3131523	AssignmentExpression	_submitTries = 0		3131409	0		=			
ANR	3131524	Identifier	_submitTries		3131409	0					
ANR	3131525	PrimaryExpression	0		3131409	1					
ANR	3131526	ExpressionStatement	retval = - 1	139:1:4123:4134	3131409	19	True				
ANR	3131527	AssignmentExpression	retval = - 1		3131409	0		=			
ANR	3131528	Identifier	retval		3131409	0					
ANR	3131529	UnaryOperationExpression	- 1		3131409	1					
ANR	3131530	UnaryOperator	-		3131409	0					
ANR	3131531	PrimaryExpression	1		3131409	1					
ANR	3131532	ExpressionStatement	have_retry_abort_val = false	140:4:4164:4192	3131409	20	True				
ANR	3131533	AssignmentExpression	have_retry_abort_val = false		3131409	0		=			
ANR	3131534	Identifier	have_retry_abort_val		3131409	0					
ANR	3131535	Identifier	false		3131409	1					
ANR	3131536	ExpressionStatement	retry_abort_val = 0xdeadbeef	141:4:4198:4226	3131409	21	True				
ANR	3131537	AssignmentExpression	retry_abort_val = 0xdeadbeef		3131409	0		=			
ANR	3131538	Identifier	retry_abort_val		3131409	0					
ANR	3131539	PrimaryExpression	0xdeadbeef		3131409	1					
ANR	3131540	ExpressionStatement	have_abort_dag_val = false	142:4:4232:4258	3131409	22	True				
ANR	3131541	AssignmentExpression	have_abort_dag_val = false		3131409	0		=			
ANR	3131542	Identifier	have_abort_dag_val		3131409	0					
ANR	3131543	Identifier	false		3131409	1					
ANR	3131544	ExpressionStatement	abort_dag_val = - 1	143:1:4261:4279	3131409	23	True				
ANR	3131545	AssignmentExpression	abort_dag_val = - 1		3131409	0		=			
ANR	3131546	Identifier	abort_dag_val		3131409	0					
ANR	3131547	UnaryOperationExpression	- 1		3131409	1					
ANR	3131548	UnaryOperator	-		3131409	0					
ANR	3131549	PrimaryExpression	1		3131409	1					
ANR	3131550	ExpressionStatement	have_abort_dag_return_val = false	144:4:4309:4342	3131409	24	True				
ANR	3131551	AssignmentExpression	have_abort_dag_return_val = false		3131409	0		=			
ANR	3131552	Identifier	have_abort_dag_return_val		3131409	0					
ANR	3131553	Identifier	false		3131409	1					
ANR	3131554	ExpressionStatement	abort_dag_return_val = - 1	145:1:4345:4370	3131409	25	True				
ANR	3131555	AssignmentExpression	abort_dag_return_val = - 1		3131409	0		=			
ANR	3131556	Identifier	abort_dag_return_val		3131409	0					
ANR	3131557	UnaryOperationExpression	- 1		3131409	1					
ANR	3131558	UnaryOperator	-		3131409	0					
ANR	3131559	PrimaryExpression	1		3131409	1					
ANR	3131560	ExpressionStatement	_visited = false	146:1:4397:4413	3131409	26	True				
ANR	3131561	AssignmentExpression	_visited = false		3131409	0		=			
ANR	3131562	Identifier	_visited		3131409	0					
ANR	3131563	Identifier	false		3131409	1					
ANR	3131564	ExpressionStatement	_dfsOrder = - 1	147:1:4416:4430	3131409	27	True				
ANR	3131565	AssignmentExpression	_dfsOrder = - 1		3131409	0		=			
ANR	3131566	Identifier	_dfsOrder		3131409	0					
ANR	3131567	UnaryOperationExpression	- 1		3131409	1					
ANR	3131568	UnaryOperator	-		3131409	0					
ANR	3131569	PrimaryExpression	1		3131409	1					
ANR	3131570	ExpressionStatement	_queuedNodeJobProcs = 0	149:1:4458:4481	3131409	28	True				
ANR	3131571	AssignmentExpression	_queuedNodeJobProcs = 0		3131409	0		=			
ANR	3131572	Identifier	_queuedNodeJobProcs		3131409	0					
ANR	3131573	PrimaryExpression	0		3131409	1					
ANR	3131574	ExpressionStatement	_hasNodePriority = false	151:1:4485:4509	3131409	29	True				
ANR	3131575	AssignmentExpression	_hasNodePriority = false		3131409	0		=			
ANR	3131576	Identifier	_hasNodePriority		3131409	0					
ANR	3131577	Identifier	false		3131409	1					
ANR	3131578	ExpressionStatement	_nodePriority = 0	152:1:4512:4529	3131409	30	True				
ANR	3131579	AssignmentExpression	_nodePriority = 0		3131409	0		=			
ANR	3131580	Identifier	_nodePriority		3131409	0					
ANR	3131581	PrimaryExpression	0		3131409	1					
ANR	3131582	ExpressionStatement	_logFile = NULL	154:4:4536:4551	3131409	31	True				
ANR	3131583	AssignmentExpression	_logFile = NULL		3131409	0		=			
ANR	3131584	Identifier	_logFile		3131409	0					
ANR	3131585	Identifier	NULL		3131409	1					
ANR	3131586	ExpressionStatement	_logFileIsXml = false	155:1:4554:4575	3131409	32	True				
ANR	3131587	AssignmentExpression	_logFileIsXml = false		3131409	0		=			
ANR	3131588	Identifier	_logFileIsXml		3131409	0					
ANR	3131589	Identifier	false		3131409	1					
ANR	3131590	ExpressionStatement	_noop = false	157:1:4579:4592	3131409	33	True				
ANR	3131591	AssignmentExpression	_noop = false		3131409	0		=			
ANR	3131592	Identifier	_noop		3131409	0					
ANR	3131593	Identifier	false		3131409	1					
ANR	3131594	ExpressionStatement	_jobTag = NULL	159:1:4596:4610	3131409	34	True				
ANR	3131595	AssignmentExpression	_jobTag = NULL		3131409	0		=			
ANR	3131596	Identifier	_jobTag		3131409	0					
ANR	3131597	Identifier	NULL		3131409	1					
ANR	3131598	ExpressionStatement	_jobstateSeqNum = 0	160:1:4613:4632	3131409	35	True				
ANR	3131599	AssignmentExpression	_jobstateSeqNum = 0		3131409	0		=			
ANR	3131600	Identifier	_jobstateSeqNum		3131409	0					
ANR	3131601	PrimaryExpression	0		3131409	1					
ANR	3131602	ExpressionStatement	_lastEventTime = 0	161:1:4635:4653	3131409	36	True				
ANR	3131603	AssignmentExpression	_lastEventTime = 0		3131409	0		=			
ANR	3131604	Identifier	_lastEventTime		3131409	0					
ANR	3131605	PrimaryExpression	0		3131409	1					
ANR	3131606	Statement	varNamesFromDag	163:1:4657:4671	3131409	37	True				
ANR	3131607	Statement	=	163:17:4673:4673	3131409	38	True				
ANR	3131608	Statement	new	163:19:4675:4677	3131409	39	True				
ANR	3131609	Statement	List	163:23:4679:4682	3131409	40	True				
ANR	3131610	Statement	<	163:27:4683:4683	3131409	41	True				
ANR	3131611	Statement	MyString	163:28:4684:4691	3131409	42	True				
ANR	3131612	Statement	>	163:36:4692:4692	3131409	43	True				
ANR	3131613	ExpressionStatement		163:37:4693:4693	3131409	44	True				
ANR	3131614	Statement	varValsFromDag	164:1:4696:4709	3131409	45	True				
ANR	3131615	Statement	=	164:16:4711:4711	3131409	46	True				
ANR	3131616	Statement	new	164:18:4713:4715	3131409	47	True				
ANR	3131617	Statement	List	164:22:4717:4720	3131409	48	True				
ANR	3131618	Statement	<	164:26:4721:4721	3131409	49	True				
ANR	3131619	Statement	MyString	164:27:4722:4729	3131409	50	True				
ANR	3131620	Statement	>	164:35:4730:4730	3131409	51	True				
ANR	3131621	ExpressionStatement		164:36:4731:4731	3131409	52	True				
ANR	3131622	ExpressionStatement	"snprintf ( error_text , JOB_ERROR_TEXT_MAXLEN , ""unknown"" )"	166:1:4735:4791	3131409	53	True				
ANR	3131623	CallExpression	"snprintf ( error_text , JOB_ERROR_TEXT_MAXLEN , ""unknown"" )"		3131409	0					
ANR	3131624	Callee	snprintf		3131409	0					
ANR	3131625	Identifier	snprintf		3131409	0					
ANR	3131626	ArgumentList	error_text		3131409	1					
ANR	3131627	Argument	error_text		3131409	0					
ANR	3131628	Identifier	error_text		3131409	0					
ANR	3131629	Argument	JOB_ERROR_TEXT_MAXLEN		3131409	1					
ANR	3131630	Identifier	JOB_ERROR_TEXT_MAXLEN		3131409	0					
ANR	3131631	Argument	"""unknown"""		3131409	2					
ANR	3131632	PrimaryExpression	"""unknown"""		3131409	0					
ANR	3131633	ExpressionStatement	_timesHeld = 0	168:1:4795:4809	3131409	54	True				
ANR	3131634	AssignmentExpression	_timesHeld = 0		3131409	0		=			
ANR	3131635	Identifier	_timesHeld		3131409	0					
ANR	3131636	PrimaryExpression	0		3131409	1					
ANR	3131637	ExpressionStatement	_jobProcsOnHold = 0	169:1:4812:4831	3131409	55	True				
ANR	3131638	AssignmentExpression	_jobProcsOnHold = 0		3131409	0		=			
ANR	3131639	Identifier	_jobProcsOnHold		3131409	0					
ANR	3131640	PrimaryExpression	0		3131409	1					
ANR	3131641	ReturnStatement	return ;	171:1:4835:4841	3131409	56	True				
ANR	3131642	ReturnType	void		3131409	1					
ANR	3131643	Identifier	Job :: Init		3131409	2					
ANR	3131644	ParameterList	"const char * jobName , const char * directory , const char * cmdFile"		3131409	3					
ANR	3131645	Parameter	const char * jobName	108:16:3382:3400	3131409	0	True				
ANR	3131646	ParameterType	const char *		3131409	0					
ANR	3131647	Identifier	jobName		3131409	1					
ANR	3131648	Parameter	const char * directory	108:37:3403:3423	3131409	1	True				
ANR	3131649	ParameterType	const char *		3131409	0					
ANR	3131650	Identifier	directory		3131409	1					
ANR	3131651	Parameter	const char * cmdFile	109:3:3429:3447	3131409	2	True				
ANR	3131652	ParameterType	const char *		3131409	0					
ANR	3131653	Identifier	cmdFile		3131409	1					
ANR	3131654	CFGEntryNode	ENTRY		3131409		True				
ANR	3131655	CFGExitNode	EXIT		3131409		True				
ANR	3131656	Symbol	error_text		3131409						
ANR	3131657	Symbol	_scriptPost		3131409						
ANR	3131658	Symbol	_logFile		3131409						
ANR	3131659	Symbol	_hasNodePriority		3131409						
ANR	3131660	Symbol	_visited		3131409						
ANR	3131661	Symbol	countedAsDone		3131409						
ANR	3131662	Symbol	retry_max		3131409						
ANR	3131663	Symbol	directory		3131409						
ANR	3131664	Symbol	_logIsMonitored		3131409						
ANR	3131665	Symbol	_directory		3131409						
ANR	3131666	Symbol	STATUS_READY		3131409						
ANR	3131667	Symbol	_jobstateSeqNum		3131409						
ANR	3131668	Symbol	_Status		3131409						
ANR	3131669	Symbol	_nodePriority		3131409						
ANR	3131670	Symbol	_throttleInfo		3131409						
ANR	3131671	Symbol	_useDefaultLog		3131409						
ANR	3131672	Symbol	strnewp		3131409						
ANR	3131673	Symbol	abort_dag_return_val		3131409						
ANR	3131674	Symbol	DEBUG_DEBUG_1		3131409						
ANR	3131675	Symbol	_dfsOrder		3131409						
ANR	3131676	Symbol	jobName		3131409						
ANR	3131677	Symbol	_logFileIsXml		3131409						
ANR	3131678	Symbol	NULL		3131409						
ANR	3131679	Symbol	_submitTries		3131409						
ANR	3131680	Symbol	JOB_ERROR_TEXT_MAXLEN		3131409						
ANR	3131681	Symbol	have_abort_dag_return_val		3131409						
ANR	3131682	Symbol	have_abort_dag_val		3131409						
ANR	3131683	Symbol	_jobTag		3131409						
ANR	3131684	Symbol	false		3131409						
ANR	3131685	Symbol	_isIdle		3131409						
ANR	3131686	Symbol	_timesHeld		3131409						
ANR	3131687	Symbol	_lastEventTime		3131409						
ANR	3131688	Symbol	_cmdFile		3131409						
ANR	3131689	Symbol	have_retry_abort_val		3131409						
ANR	3131690	Symbol	retry_abort_val		3131409						
ANR	3131691	Symbol	retval		3131409						
ANR	3131692	Symbol	_noop		3131409						
ANR	3131693	Symbol	_jobName		3131409						
ANR	3131694	Symbol	_jobID_counter		3131409						
ANR	3131695	Symbol	retries		3131409						
ANR	3131696	Symbol	_queuedNodeJobProcs		3131409						
ANR	3131697	Symbol	_dagFile		3131409						
ANR	3131698	Symbol	_jobProcsOnHold		3131409						
ANR	3131699	Symbol	abort_dag_val		3131409						
ANR	3131700	Symbol	cmdFile		3131409						
ANR	3131701	Symbol	_scriptPre		3131409						
ANR	3131702	Symbol	_jobID		3131409						
ANR	3131703	Function	Job :: PrefixDirectory	174:0:4923:5300							
ANR	3131704	FunctionDef	Job :: PrefixDirectory (MyString & prefix)		3131703	0					
ANR	3131705	CompoundStatement		176:0:4967:5300	3131703	0					
ANR	3131706	IdentifierDeclStatement	MyString newdir ;	177:1:4970:4985	3131703	0	True				
ANR	3131707	IdentifierDecl	newdir		3131703	0					
ANR	3131708	IdentifierDeclType	MyString		3131703	0					
ANR	3131709	Identifier	newdir		3131703	1					
ANR	3131710	IfStatement	"if ( prefix == ""."" )"		3131703	1					
ANR	3131711	Condition	"prefix == ""."""	180:5:5029:5041	3131703	0	True				
ANR	3131712	EqualityExpression	"prefix == ""."""		3131703	0		==			
ANR	3131713	Identifier	prefix		3131703	0					
ANR	3131714	PrimaryExpression	"""."""		3131703	1					
ANR	3131715	CompoundStatement		5:20:76:76	3131703	1					
ANR	3131716	ReturnStatement	return ;	181:2:5048:5054	3131703	0	True				
ANR	3131717	IfStatement	if ( _directory [ 0 ] == '/' )		3131703	2					
ANR	3131718	Condition	_directory [ 0 ] == '/'	185:5:5113:5132	3131703	0	True				
ANR	3131719	EqualityExpression	_directory [ 0 ] == '/'		3131703	0		==			
ANR	3131720	ArrayIndexing	_directory [ 0 ]		3131703	0					
ANR	3131721	Identifier	_directory		3131703	0					
ANR	3131722	PrimaryExpression	0		3131703	1					
ANR	3131723	PrimaryExpression	'/'		3131703	1					
ANR	3131724	CompoundStatement		10:27:167:167	3131703	1					
ANR	3131725	ReturnStatement	return ;	186:2:5139:5145	3131703	0	True				
ANR	3131726	ExpressionStatement	newdir += prefix	191:1:5179:5195	3131703	3	True				
ANR	3131727	AssignmentExpression	newdir += prefix		3131703	0		+=			
ANR	3131728	Identifier	newdir		3131703	0					
ANR	3131729	Identifier	prefix		3131703	1					
ANR	3131730	ExpressionStatement	"newdir += ""/"""	192:1:5198:5211	3131703	4	True				
ANR	3131731	AssignmentExpression	"newdir += ""/"""		3131703	0		+=			
ANR	3131732	Identifier	newdir		3131703	0					
ANR	3131733	PrimaryExpression	"""/"""		3131703	1					
ANR	3131734	ExpressionStatement	newdir += _directory	193:1:5214:5234	3131703	5	True				
ANR	3131735	AssignmentExpression	newdir += _directory		3131703	0		+=			
ANR	3131736	Identifier	newdir		3131703	0					
ANR	3131737	Identifier	_directory		3131703	1					
ANR	3131738	Statement	delete	195:1:5238:5243	3131703	6	True				
ANR	3131739	Statement	[	195:8:5245:5245	3131703	7	True				
ANR	3131740	Statement	]	195:9:5246:5246	3131703	8	True				
ANR	3131741	ExpressionStatement	_directory	195:11:5248:5258	3131703	9	True				
ANR	3131742	Identifier	_directory		3131703	0					
ANR	3131743	ExpressionStatement	_directory = strnewp ( newdir . Value ( ) )	197:1:5262:5298	3131703	10	True				
ANR	3131744	AssignmentExpression	_directory = strnewp ( newdir . Value ( ) )		3131703	0		=			
ANR	3131745	Identifier	_directory		3131703	0					
ANR	3131746	CallExpression	strnewp ( newdir . Value ( ) )		3131703	1					
ANR	3131747	Callee	strnewp		3131703	0					
ANR	3131748	Identifier	strnewp		3131703	0					
ANR	3131749	ArgumentList	newdir . Value ( )		3131703	1					
ANR	3131750	Argument	newdir . Value ( )		3131703	0					
ANR	3131751	CallExpression	newdir . Value ( )		3131703	0					
ANR	3131752	Callee	newdir . Value		3131703	0					
ANR	3131753	MemberAccess	newdir . Value		3131703	0					
ANR	3131754	Identifier	newdir		3131703	0					
ANR	3131755	Identifier	Value		3131703	1					
ANR	3131756	ArgumentList			3131703	1					
ANR	3131757	ReturnType	void		3131703	1					
ANR	3131758	Identifier	Job :: PrefixDirectory		3131703	2					
ANR	3131759	ParameterList	MyString & prefix		3131703	3					
ANR	3131760	Parameter	MyString & prefix	175:21:4949:4964	3131703	0	True				
ANR	3131761	ParameterType	MyString &		3131703	0					
ANR	3131762	Identifier	prefix		3131703	1					
ANR	3131763	CFGEntryNode	ENTRY		3131703		True				
ANR	3131764	CFGExitNode	EXIT		3131703		True				
ANR	3131765	Symbol	newdir . Value		3131703						
ANR	3131766	Symbol	prefix		3131703						
ANR	3131767	Symbol	newdir		3131703						
ANR	3131768	Symbol	* _directory		3131703						
ANR	3131769	Symbol	strnewp		3131703						
ANR	3131770	Symbol	_directory		3131703						
ANR	3131771	Function	Job :: Remove	201:0:5381:5539							
ANR	3131772	FunctionDef	"Job :: Remove (const queue_t queue , const JobID_t jobID)"		3131771	0					
ANR	3131773	CompoundStatement		202:0:5441:5539	3131771	0					
ANR	3131774	IfStatement	if ( _queues [ queue ] . erase ( jobID ) == 0 )		3131771	0					
ANR	3131775	Condition	_queues [ queue ] . erase ( jobID ) == 0	203:5:5448:5479	3131771	0	True				
ANR	3131776	EqualityExpression	_queues [ queue ] . erase ( jobID ) == 0		3131771	0		==			
ANR	3131777	CallExpression	_queues [ queue ] . erase ( jobID )		3131771	0					
ANR	3131778	Callee	_queues [ queue ] . erase		3131771	0					
ANR	3131779	MemberAccess	_queues [ queue ] . erase		3131771	0					
ANR	3131780	ArrayIndexing	_queues [ queue ]		3131771	0					
ANR	3131781	Identifier	_queues		3131771	0					
ANR	3131782	Identifier	queue		3131771	1					
ANR	3131783	Identifier	erase		3131771	1					
ANR	3131784	ArgumentList	jobID		3131771	1					
ANR	3131785	Argument	jobID		3131771	0					
ANR	3131786	Identifier	jobID		3131771	0					
ANR	3131787	PrimaryExpression	0		3131771	1					
ANR	3131788	CompoundStatement		2:39:40:40	3131771	1					
ANR	3131789	ReturnStatement	return false ;	204:2:5486:5498	3131771	0	True				
ANR	3131790	Identifier	false		3131771	0					
ANR	3131791	ReturnStatement	return true ;	207:1:5526:5537	3131771	1	True				
ANR	3131792	Identifier	true		3131771	0					
ANR	3131793	ReturnType	bool		3131771	1					
ANR	3131794	Identifier	Job :: Remove		3131771	2					
ANR	3131795	ParameterList	"const queue_t queue , const JobID_t jobID"		3131771	3					
ANR	3131796	Parameter	const queue_t queue	201:18:5399:5417	3131771	0	True				
ANR	3131797	ParameterType	const queue_t		3131771	0					
ANR	3131798	Identifier	queue		3131771	1					
ANR	3131799	Parameter	const JobID_t jobID	201:39:5420:5438	3131771	1	True				
ANR	3131800	ParameterType	const JobID_t		3131771	0					
ANR	3131801	Identifier	jobID		3131771	1					
ANR	3131802	CFGEntryNode	ENTRY		3131771		True				
ANR	3131803	CFGExitNode	EXIT		3131771		True				
ANR	3131804	Symbol	jobID		3131771						
ANR	3131805	Symbol	* queue		3131771						
ANR	3131806	Symbol	_queues		3131771						
ANR	3131807	Symbol	* _queues		3131771						
ANR	3131808	Symbol	false		3131771						
ANR	3131809	Symbol	true		3131771						
ANR	3131810	Symbol	_queues [ queue ] . erase		3131771						
ANR	3131811	Symbol	queue		3131771						
ANR	3131812	Function	Job :: CheckForLogFile	211:0:5622:5837							
ANR	3131813	FunctionDef	Job :: CheckForLogFile ()		3131812	0					
ANR	3131814	CompoundStatement		213:0:5656:5837	3131812	0					
ANR	3131815	IdentifierDeclStatement	bool tmpLogFileIsXml ;	214:1:5659:5679	3131812	0	True				
ANR	3131816	IdentifierDecl	tmpLogFileIsXml		3131812	0					
ANR	3131817	IdentifierDeclType	bool		3131812	0					
ANR	3131818	Identifier	tmpLogFileIsXml		3131812	1					
ANR	3131819	IdentifierDeclStatement	"MyString logFile = MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , tmpLogFileIsXml ) ;"	215:1:5682:5787	3131812	1	True				
ANR	3131820	IdentifierDecl	"logFile = MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , tmpLogFileIsXml )"		3131812	0					
ANR	3131821	IdentifierDeclType	MyString		3131812	0					
ANR	3131822	Identifier	logFile		3131812	1					
ANR	3131823	AssignmentExpression	"logFile = MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , tmpLogFileIsXml )"		3131812	2		=			
ANR	3131824	Identifier	logFile		3131812	0					
ANR	3131825	CallExpression	"MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , tmpLogFileIsXml )"		3131812	1					
ANR	3131826	Callee	MultiLogFiles :: loadLogFileNameFromSubFile		3131812	0					
ANR	3131827	Identifier	MultiLogFiles :: loadLogFileNameFromSubFile		3131812	0					
ANR	3131828	ArgumentList	_cmdFile		3131812	1					
ANR	3131829	Argument	_cmdFile		3131812	0					
ANR	3131830	Identifier	_cmdFile		3131812	0					
ANR	3131831	Argument	_directory		3131812	1					
ANR	3131832	Identifier	_directory		3131812	0					
ANR	3131833	Argument	tmpLogFileIsXml		3131812	2					
ANR	3131834	Identifier	tmpLogFileIsXml		3131812	0					
ANR	3131835	IdentifierDeclStatement	"bool result = ( logFile != """" ) ;"	217:1:5790:5819	3131812	2	True				
ANR	3131836	IdentifierDecl	"result = ( logFile != """" )"		3131812	0					
ANR	3131837	IdentifierDeclType	bool		3131812	0					
ANR	3131838	Identifier	result		3131812	1					
ANR	3131839	AssignmentExpression	"result = ( logFile != """" )"		3131812	2		=			
ANR	3131840	Identifier	result		3131812	0					
ANR	3131841	EqualityExpression	"logFile != """""		3131812	1		!=			
ANR	3131842	Identifier	logFile		3131812	0					
ANR	3131843	PrimaryExpression	""""""		3131812	1					
ANR	3131844	ReturnStatement	return result ;	218:1:5822:5835	3131812	3	True				
ANR	3131845	Identifier	result		3131812	0					
ANR	3131846	ReturnType	bool		3131812	1					
ANR	3131847	Identifier	Job :: CheckForLogFile		3131812	2					
ANR	3131848	ParameterList			3131812	3					
ANR	3131849	CFGEntryNode	ENTRY		3131812		True				
ANR	3131850	CFGExitNode	EXIT		3131812		True				
ANR	3131851	Symbol	result		3131812						
ANR	3131852	Symbol	tmpLogFileIsXml		3131812						
ANR	3131853	Symbol	logFile		3131812						
ANR	3131854	Symbol	_cmdFile		3131812						
ANR	3131855	Symbol	MultiLogFiles :: loadLogFileNameFromSubFile		3131812						
ANR	3131856	Symbol	_directory		3131812						
ANR	3131857	Function	Job :: Dump	222:0:5918:7428							
ANR	3131858	FunctionDef	Job :: Dump (const Dag * dag)		3131857	0					
ANR	3131859	CompoundStatement		222:40:5958:7428	3131857	0					
ANR	3131860	ExpressionStatement	"dprintf ( D_ALWAYS , ""---------------------- Job ----------------------\\n"" )"	223:4:5964:6037	3131857	0	True				
ANR	3131861	CallExpression	"dprintf ( D_ALWAYS , ""---------------------- Job ----------------------\\n"" )"		3131857	0					
ANR	3131862	Callee	dprintf		3131857	0					
ANR	3131863	Identifier	dprintf		3131857	0					
ANR	3131864	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131865	Argument	D_ALWAYS		3131857	0					
ANR	3131866	Identifier	D_ALWAYS		3131857	0					
ANR	3131867	Argument	"""---------------------- Job ----------------------\\n"""		3131857	1					
ANR	3131868	PrimaryExpression	"""---------------------- Job ----------------------\\n"""		3131857	0					
ANR	3131869	ExpressionStatement	"dprintf ( D_ALWAYS , ""      Node Name: %s\\n"" , _jobName )"	224:4:6043:6097	3131857	1	True				
ANR	3131870	CallExpression	"dprintf ( D_ALWAYS , ""      Node Name: %s\\n"" , _jobName )"		3131857	0					
ANR	3131871	Callee	dprintf		3131857	0					
ANR	3131872	Identifier	dprintf		3131857	0					
ANR	3131873	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131874	Argument	D_ALWAYS		3131857	0					
ANR	3131875	Identifier	D_ALWAYS		3131857	0					
ANR	3131876	Argument	"""      Node Name: %s\\n"""		3131857	1					
ANR	3131877	PrimaryExpression	"""      Node Name: %s\\n"""		3131857	0					
ANR	3131878	Argument	_jobName		3131857	2					
ANR	3131879	Identifier	_jobName		3131857	0					
ANR	3131880	ExpressionStatement	"dprintf ( D_ALWAYS , ""           Noop: %s\\n"" , _noop ? ""true"" : ""false"" )"	225:4:6103:6173	3131857	2	True				
ANR	3131881	CallExpression	"dprintf ( D_ALWAYS , ""           Noop: %s\\n"" , _noop ? ""true"" : ""false"" )"		3131857	0					
ANR	3131882	Callee	dprintf		3131857	0					
ANR	3131883	Identifier	dprintf		3131857	0					
ANR	3131884	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131885	Argument	D_ALWAYS		3131857	0					
ANR	3131886	Identifier	D_ALWAYS		3131857	0					
ANR	3131887	Argument	"""           Noop: %s\\n"""		3131857	1					
ANR	3131888	PrimaryExpression	"""           Noop: %s\\n"""		3131857	0					
ANR	3131889	Argument	"_noop ? ""true"" : ""false"""		3131857	2					
ANR	3131890	ConditionalExpression	"_noop ? ""true"" : ""false"""		3131857	0					
ANR	3131891	Condition	_noop		3131857	0					
ANR	3131892	Identifier	_noop		3131857	0					
ANR	3131893	PrimaryExpression	"""true"""		3131857	1					
ANR	3131894	PrimaryExpression	"""false"""		3131857	2					
ANR	3131895	ExpressionStatement	"dprintf ( D_ALWAYS , ""         NodeID: %d\\n"" , _jobID )"	226:4:6179:6231	3131857	3	True				
ANR	3131896	CallExpression	"dprintf ( D_ALWAYS , ""         NodeID: %d\\n"" , _jobID )"		3131857	0					
ANR	3131897	Callee	dprintf		3131857	0					
ANR	3131898	Identifier	dprintf		3131857	0					
ANR	3131899	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131900	Argument	D_ALWAYS		3131857	0					
ANR	3131901	Identifier	D_ALWAYS		3131857	0					
ANR	3131902	Argument	"""         NodeID: %d\\n"""		3131857	1					
ANR	3131903	PrimaryExpression	"""         NodeID: %d\\n"""		3131857	0					
ANR	3131904	Argument	_jobID		3131857	2					
ANR	3131905	Identifier	_jobID		3131857	0					
ANR	3131906	ExpressionStatement	"dprintf ( D_ALWAYS , ""    Node Status: %s\\n"" , GetStatusName ( ) )"	227:4:6237:6298	3131857	4	True				
ANR	3131907	CallExpression	"dprintf ( D_ALWAYS , ""    Node Status: %s\\n"" , GetStatusName ( ) )"		3131857	0					
ANR	3131908	Callee	dprintf		3131857	0					
ANR	3131909	Identifier	dprintf		3131857	0					
ANR	3131910	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131911	Argument	D_ALWAYS		3131857	0					
ANR	3131912	Identifier	D_ALWAYS		3131857	0					
ANR	3131913	Argument	"""    Node Status: %s\\n"""		3131857	1					
ANR	3131914	PrimaryExpression	"""    Node Status: %s\\n"""		3131857	0					
ANR	3131915	Argument	GetStatusName ( )		3131857	2					
ANR	3131916	CallExpression	GetStatusName ( )		3131857	0					
ANR	3131917	Callee	GetStatusName		3131857	0					
ANR	3131918	Identifier	GetStatusName		3131857	0					
ANR	3131919	ArgumentList			3131857	1					
ANR	3131920	ExpressionStatement	"dprintf ( D_ALWAYS , ""Node return val: %d\\n"" , retval )"	228:4:6304:6356	3131857	5	True				
ANR	3131921	CallExpression	"dprintf ( D_ALWAYS , ""Node return val: %d\\n"" , retval )"		3131857	0					
ANR	3131922	Callee	dprintf		3131857	0					
ANR	3131923	Identifier	dprintf		3131857	0					
ANR	3131924	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131925	Argument	D_ALWAYS		3131857	0					
ANR	3131926	Identifier	D_ALWAYS		3131857	0					
ANR	3131927	Argument	"""Node return val: %d\\n"""		3131857	1					
ANR	3131928	PrimaryExpression	"""Node return val: %d\\n"""		3131857	0					
ANR	3131929	Argument	retval		3131857	2					
ANR	3131930	Identifier	retval		3131857	0					
ANR	3131931	IfStatement	if ( _Status == STATUS_ERROR )		3131857	6					
ANR	3131932	Condition	_Status == STATUS_ERROR	229:5:6363:6385	3131857	0	True				
ANR	3131933	EqualityExpression	_Status == STATUS_ERROR		3131857	0		==			
ANR	3131934	Identifier	_Status		3131857	0					
ANR	3131935	Identifier	STATUS_ERROR		3131857	1					
ANR	3131936	CompoundStatement		8:31:430:430	3131857	1					
ANR	3131937	ExpressionStatement	"dprintf ( D_ALWAYS , ""          Error: %s\\n"" , error_text )"	230:2:6393:6449	3131857	0	True				
ANR	3131938	CallExpression	"dprintf ( D_ALWAYS , ""          Error: %s\\n"" , error_text )"		3131857	0					
ANR	3131939	Callee	dprintf		3131857	0					
ANR	3131940	Identifier	dprintf		3131857	0					
ANR	3131941	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131942	Argument	D_ALWAYS		3131857	0					
ANR	3131943	Identifier	D_ALWAYS		3131857	0					
ANR	3131944	Argument	"""          Error: %s\\n"""		3131857	1					
ANR	3131945	PrimaryExpression	"""          Error: %s\\n"""		3131857	0					
ANR	3131946	Argument	error_text		3131857	2					
ANR	3131947	Identifier	error_text		3131857	0					
ANR	3131948	ExpressionStatement	"dprintf ( D_ALWAYS , ""Job Submit File: %s\\n"" , _cmdFile )"	232:4:6458:6512	3131857	7	True				
ANR	3131949	CallExpression	"dprintf ( D_ALWAYS , ""Job Submit File: %s\\n"" , _cmdFile )"		3131857	0					
ANR	3131950	Callee	dprintf		3131857	0					
ANR	3131951	Identifier	dprintf		3131857	0					
ANR	3131952	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131953	Argument	D_ALWAYS		3131857	0					
ANR	3131954	Identifier	D_ALWAYS		3131857	0					
ANR	3131955	Argument	"""Job Submit File: %s\\n"""		3131857	1					
ANR	3131956	PrimaryExpression	"""Job Submit File: %s\\n"""		3131857	0					
ANR	3131957	Argument	_cmdFile		3131857	2					
ANR	3131958	Identifier	_cmdFile		3131857	0					
ANR	3131959	IfStatement	if ( _scriptPre )		3131857	8					
ANR	3131960	Condition	_scriptPre	233:5:6519:6528	3131857	0	True				
ANR	3131961	Identifier	_scriptPre		3131857	0					
ANR	3131962	CompoundStatement		12:18:573:573	3131857	1					
ANR	3131963	ExpressionStatement	"dprintf ( D_ALWAYS , ""     PRE Script: %s\\n"" , _scriptPre -> GetCmd ( ) )"	234:2:6536:6602	3131857	0	True				
ANR	3131964	CallExpression	"dprintf ( D_ALWAYS , ""     PRE Script: %s\\n"" , _scriptPre -> GetCmd ( ) )"		3131857	0					
ANR	3131965	Callee	dprintf		3131857	0					
ANR	3131966	Identifier	dprintf		3131857	0					
ANR	3131967	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131968	Argument	D_ALWAYS		3131857	0					
ANR	3131969	Identifier	D_ALWAYS		3131857	0					
ANR	3131970	Argument	"""     PRE Script: %s\\n"""		3131857	1					
ANR	3131971	PrimaryExpression	"""     PRE Script: %s\\n"""		3131857	0					
ANR	3131972	Argument	_scriptPre -> GetCmd ( )		3131857	2					
ANR	3131973	CallExpression	_scriptPre -> GetCmd ( )		3131857	0					
ANR	3131974	Callee	_scriptPre -> GetCmd		3131857	0					
ANR	3131975	PtrMemberAccess	_scriptPre -> GetCmd		3131857	0					
ANR	3131976	Identifier	_scriptPre		3131857	0					
ANR	3131977	Identifier	GetCmd		3131857	1					
ANR	3131978	ArgumentList			3131857	1					
ANR	3131979	IfStatement	if ( _scriptPost )		3131857	9					
ANR	3131980	Condition	_scriptPost	236:5:6612:6622	3131857	0	True				
ANR	3131981	Identifier	_scriptPost		3131857	0					
ANR	3131982	CompoundStatement		15:19:667:667	3131857	1					
ANR	3131983	ExpressionStatement	"dprintf ( D_ALWAYS , ""    POST Script: %s\\n"" , _scriptPost -> GetCmd ( ) )"	237:2:6630:6697	3131857	0	True				
ANR	3131984	CallExpression	"dprintf ( D_ALWAYS , ""    POST Script: %s\\n"" , _scriptPost -> GetCmd ( ) )"		3131857	0					
ANR	3131985	Callee	dprintf		3131857	0					
ANR	3131986	Identifier	dprintf		3131857	0					
ANR	3131987	ArgumentList	D_ALWAYS		3131857	1					
ANR	3131988	Argument	D_ALWAYS		3131857	0					
ANR	3131989	Identifier	D_ALWAYS		3131857	0					
ANR	3131990	Argument	"""    POST Script: %s\\n"""		3131857	1					
ANR	3131991	PrimaryExpression	"""    POST Script: %s\\n"""		3131857	0					
ANR	3131992	Argument	_scriptPost -> GetCmd ( )		3131857	2					
ANR	3131993	CallExpression	_scriptPost -> GetCmd ( )		3131857	0					
ANR	3131994	Callee	_scriptPost -> GetCmd		3131857	0					
ANR	3131995	PtrMemberAccess	_scriptPost -> GetCmd		3131857	0					
ANR	3131996	Identifier	_scriptPost		3131857	0					
ANR	3131997	Identifier	GetCmd		3131857	1					
ANR	3131998	ArgumentList			3131857	1					
ANR	3131999	IfStatement	if ( retry_max > 0 )		3131857	10					
ANR	3132000	Condition	retry_max > 0	239:5:6707:6719	3131857	0	True				
ANR	3132001	RelationalExpression	retry_max > 0		3131857	0		>			
ANR	3132002	Identifier	retry_max		3131857	0					
ANR	3132003	PrimaryExpression	0		3131857	1					
ANR	3132004	CompoundStatement		18:21:764:764	3131857	1					
ANR	3132005	ExpressionStatement	"dprintf ( D_ALWAYS , ""          Retry: %d\\n"" , retry_max )"	240:2:6727:6782	3131857	0	True				
ANR	3132006	CallExpression	"dprintf ( D_ALWAYS , ""          Retry: %d\\n"" , retry_max )"		3131857	0					
ANR	3132007	Callee	dprintf		3131857	0					
ANR	3132008	Identifier	dprintf		3131857	0					
ANR	3132009	ArgumentList	D_ALWAYS		3131857	1					
ANR	3132010	Argument	D_ALWAYS		3131857	0					
ANR	3132011	Identifier	D_ALWAYS		3131857	0					
ANR	3132012	Argument	"""          Retry: %d\\n"""		3131857	1					
ANR	3132013	PrimaryExpression	"""          Retry: %d\\n"""		3131857	0					
ANR	3132014	Argument	retry_max		3131857	2					
ANR	3132015	Identifier	retry_max		3131857	0					
ANR	3132016	IfStatement	if ( _CondorID . _cluster == - 1 )		3131857	11					
ANR	3132017	Condition	_CondorID . _cluster == - 1	242:5:6792:6815	3131857	0	True				
ANR	3132018	EqualityExpression	_CondorID . _cluster == - 1		3131857	0		==			
ANR	3132019	MemberAccess	_CondorID . _cluster		3131857	0					
ANR	3132020	Identifier	_CondorID		3131857	0					
ANR	3132021	Identifier	_cluster		3131857	1					
ANR	3132022	UnaryOperationExpression	- 1		3131857	1					
ANR	3132023	UnaryOperator	-		3131857	0					
ANR	3132024	PrimaryExpression	1		3131857	1					
ANR	3132025	CompoundStatement		21:32:860:860	3131857	1					
ANR	3132026	ExpressionStatement	"dprintf ( D_ALWAYS , "" %7s Job ID: [not yet submitted]\\n"" , JobTypeString ( ) )"	243:2:6823:6902	3131857	0	True				
ANR	3132027	CallExpression	"dprintf ( D_ALWAYS , "" %7s Job ID: [not yet submitted]\\n"" , JobTypeString ( ) )"		3131857	0					
ANR	3132028	Callee	dprintf		3131857	0					
ANR	3132029	Identifier	dprintf		3131857	0					
ANR	3132030	ArgumentList	D_ALWAYS		3131857	1					
ANR	3132031	Argument	D_ALWAYS		3131857	0					
ANR	3132032	Identifier	D_ALWAYS		3131857	0					
ANR	3132033	Argument	""" %7s Job ID: [not yet submitted]\\n"""		3131857	1					
ANR	3132034	PrimaryExpression	""" %7s Job ID: [not yet submitted]\\n"""		3131857	0					
ANR	3132035	Argument	JobTypeString ( )		3131857	2					
ANR	3132036	CallExpression	JobTypeString ( )		3131857	0					
ANR	3132037	Callee	JobTypeString		3131857	0					
ANR	3132038	Identifier	JobTypeString		3131857	0					
ANR	3132039	ArgumentList			3131857	1					
ANR	3132040	ElseStatement	else		3131857	0					
ANR	3132041	CompoundStatement		25:6:954:954	3131857	0					
ANR	3132042	ExpressionStatement	"dprintf ( D_ALWAYS , "" %7s Job ID: (%d.%d.%d)\\n"" , JobTypeString ( ) , _CondorID . _cluster , _CondorID . _proc , _CondorID . _subproc )"	247:2:6917:7044	3131857	0	True				
ANR	3132043	CallExpression	"dprintf ( D_ALWAYS , "" %7s Job ID: (%d.%d.%d)\\n"" , JobTypeString ( ) , _CondorID . _cluster , _CondorID . _proc , _CondorID . _subproc )"		3131857	0					
ANR	3132044	Callee	dprintf		3131857	0					
ANR	3132045	Identifier	dprintf		3131857	0					
ANR	3132046	ArgumentList	D_ALWAYS		3131857	1					
ANR	3132047	Argument	D_ALWAYS		3131857	0					
ANR	3132048	Identifier	D_ALWAYS		3131857	0					
ANR	3132049	Argument	""" %7s Job ID: (%d.%d.%d)\\n"""		3131857	1					
ANR	3132050	PrimaryExpression	""" %7s Job ID: (%d.%d.%d)\\n"""		3131857	0					
ANR	3132051	Argument	JobTypeString ( )		3131857	2					
ANR	3132052	CallExpression	JobTypeString ( )		3131857	0					
ANR	3132053	Callee	JobTypeString		3131857	0					
ANR	3132054	Identifier	JobTypeString		3131857	0					
ANR	3132055	ArgumentList			3131857	1					
ANR	3132056	Argument	_CondorID . _cluster		3131857	3					
ANR	3132057	MemberAccess	_CondorID . _cluster		3131857	0					
ANR	3132058	Identifier	_CondorID		3131857	0					
ANR	3132059	Identifier	_cluster		3131857	1					
ANR	3132060	Argument	_CondorID . _proc		3131857	4					
ANR	3132061	MemberAccess	_CondorID . _proc		3131857	0					
ANR	3132062	Identifier	_CondorID		3131857	0					
ANR	3132063	Identifier	_proc		3131857	1					
ANR	3132064	Argument	_CondorID . _subproc		3131857	5					
ANR	3132065	MemberAccess	_CondorID . _subproc		3131857	0					
ANR	3132066	Identifier	_CondorID		3131857	0					
ANR	3132067	Identifier	_subproc		3131857	1					
ANR	3132068	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )		3131857	12					
ANR	3132069	ForInit	int i = 0 ;	251:9:7061:7071	3131857	0	True				
ANR	3132070	IdentifierDeclStatement	int i = 0 ;		3131857	0					
ANR	3132071	IdentifierDecl	i = 0		3131857	0					
ANR	3132072	IdentifierDeclType	int		3131857	0					
ANR	3132073	Identifier	i		3131857	1					
ANR	3132074	AssignmentExpression	i = 0		3131857	2		=			
ANR	3132075	Identifier	i		3131857	0					
ANR	3132076	PrimaryExpression	0		3131857	1					
ANR	3132077	Condition	i < 3	251:21:7073:7077	3131857	1	True				
ANR	3132078	RelationalExpression	i < 3		3131857	0		<			
ANR	3132079	Identifier	i		3131857	0					
ANR	3132080	PrimaryExpression	3		3131857	1					
ANR	3132081	PostIncDecOperationExpression	i ++	251:29:7081:7083	3131857	2	True				
ANR	3132082	Identifier	i		3131857	0					
ANR	3132083	IncDec	++		3131857	1					
ANR	3132084	CompoundStatement		33:2:1189:1221	3131857	3					
ANR	3132085	ExpressionStatement	"dprintf ( D_ALWAYS , ""%15s: "" , queue_t_names [ i ] )"	252:8:7096:7143	3131857	0	True				
ANR	3132086	CallExpression	"dprintf ( D_ALWAYS , ""%15s: "" , queue_t_names [ i ] )"		3131857	0					
ANR	3132087	Callee	dprintf		3131857	0					
ANR	3132088	Identifier	dprintf		3131857	0					
ANR	3132089	ArgumentList	D_ALWAYS		3131857	1					
ANR	3132090	Argument	D_ALWAYS		3131857	0					
ANR	3132091	Identifier	D_ALWAYS		3131857	0					
ANR	3132092	Argument	"""%15s: """		3131857	1					
ANR	3132093	PrimaryExpression	"""%15s: """		3131857	0					
ANR	3132094	Argument	queue_t_names [ i ]		3131857	2					
ANR	3132095	ArrayIndexing	queue_t_names [ i ]		3131857	0					
ANR	3132096	Identifier	queue_t_names		3131857	0					
ANR	3132097	Identifier	i		3131857	1					
ANR	3132098	IdentifierDeclStatement	set < JobID_t > :: const_iterator qit ;	254:2:7148:7180	3131857	1	True				
ANR	3132099	IdentifierDecl	qit		3131857	0					
ANR	3132100	IdentifierDeclType	set < JobID_t > :: const_iterator		3131857	0					
ANR	3132101	Identifier	qit		3131857	1					
ANR	3132102	ForStatement	for ( qit = _queues [ i ] . begin ( ) ; qit != _queues [ i ] . end ( ) ; qit ++ )		3131857	2					
ANR	3132103	ForInit	qit = _queues [ i ] . begin ( ) ;	255:7:7189:7213	3131857	0	True				
ANR	3132104	AssignmentExpression	qit = _queues [ i ] . begin ( )		3131857	0		=			
ANR	3132105	Identifier	qit		3131857	0					
ANR	3132106	CallExpression	_queues [ i ] . begin ( )		3131857	1					
ANR	3132107	Callee	_queues [ i ] . begin		3131857	0					
ANR	3132108	MemberAccess	_queues [ i ] . begin		3131857	0					
ANR	3132109	ArrayIndexing	_queues [ i ]		3131857	0					
ANR	3132110	Identifier	_queues		3131857	0					
ANR	3132111	Identifier	i		3131857	1					
ANR	3132112	Identifier	begin		3131857	1					
ANR	3132113	ArgumentList			3131857	1					
ANR	3132114	Condition	qit != _queues [ i ] . end ( )	255:33:7215:7237	3131857	1	True				
ANR	3132115	EqualityExpression	qit != _queues [ i ] . end ( )		3131857	0		!=			
ANR	3132116	Identifier	qit		3131857	0					
ANR	3132117	CallExpression	_queues [ i ] . end ( )		3131857	1					
ANR	3132118	Callee	_queues [ i ] . end		3131857	0					
ANR	3132119	MemberAccess	_queues [ i ] . end		3131857	0					
ANR	3132120	ArrayIndexing	_queues [ i ]		3131857	0					
ANR	3132121	Identifier	_queues		3131857	0					
ANR	3132122	Identifier	i		3131857	1					
ANR	3132123	Identifier	end		3131857	1					
ANR	3132124	ArgumentList			3131857	1					
ANR	3132125	PostIncDecOperationExpression	qit ++	255:58:7240:7244	3131857	2	True				
ANR	3132126	Identifier	qit		3131857	0					
ANR	3132127	IncDec	++		3131857	1					
ANR	3132128	CompoundStatement		35:3:1293:1339	3131857	3					
ANR	3132129	IdentifierDeclStatement	Job * node = dag -> Dag :: FindNodeByNodeID ( * qit ) ;	256:3:7252:7298	3131857	0	True				
ANR	3132130	IdentifierDecl	* node = dag -> Dag :: FindNodeByNodeID ( * qit )		3131857	0					
ANR	3132131	IdentifierDeclType	Job *		3131857	0					
ANR	3132132	Identifier	node		3131857	1					
ANR	3132133	AssignmentExpression	* node = dag -> Dag :: FindNodeByNodeID ( * qit )		3131857	2		=			
ANR	3132134	Identifier	node		3131857	0					
ANR	3132135	CallExpression	dag -> Dag :: FindNodeByNodeID ( * qit )		3131857	1					
ANR	3132136	Callee	dag -> Dag :: FindNodeByNodeID		3131857	0					
ANR	3132137	PtrMemberAccess	dag -> Dag :: FindNodeByNodeID		3131857	0					
ANR	3132138	Identifier	dag		3131857	0					
ANR	3132139	Identifier	Dag :: FindNodeByNodeID		3131857	1					
ANR	3132140	ArgumentList	* qit		3131857	1					
ANR	3132141	Argument	* qit		3131857	0					
ANR	3132142	UnaryOperationExpression	* qit		3131857	0					
ANR	3132143	UnaryOperator	*		3131857	0					
ANR	3132144	Identifier	qit		3131857	1					
ANR	3132145	ExpressionStatement	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s, "" , node -> GetJobName ( ) )"	257:3:7303:7363	3131857	1	True				
ANR	3132146	CallExpression	"dprintf ( D_ALWAYS | D_NOHEADER , ""%s, "" , node -> GetJobName ( ) )"		3131857	0					
ANR	3132147	Callee	dprintf		3131857	0					
ANR	3132148	Identifier	dprintf		3131857	0					
ANR	3132149	ArgumentList	D_ALWAYS | D_NOHEADER		3131857	1					
ANR	3132150	Argument	D_ALWAYS | D_NOHEADER		3131857	0					
ANR	3132151	InclusiveOrExpression	D_ALWAYS | D_NOHEADER		3131857	0		|			
ANR	3132152	Identifier	D_ALWAYS		3131857	0					
ANR	3132153	Identifier	D_NOHEADER		3131857	1					
ANR	3132154	Argument	"""%s, """		3131857	1					
ANR	3132155	PrimaryExpression	"""%s, """		3131857	0					
ANR	3132156	Argument	node -> GetJobName ( )		3131857	2					
ANR	3132157	CallExpression	node -> GetJobName ( )		3131857	0					
ANR	3132158	Callee	node -> GetJobName		3131857	0					
ANR	3132159	PtrMemberAccess	node -> GetJobName		3131857	0					
ANR	3132160	Identifier	node		3131857	0					
ANR	3132161	Identifier	GetJobName		3131857	1					
ANR	3132162	ArgumentList			3131857	1					
ANR	3132163	ExpressionStatement	"dprintf ( D_ALWAYS | D_NOHEADER , ""<END>\\n"" )"	259:8:7377:7420	3131857	3	True				
ANR	3132164	CallExpression	"dprintf ( D_ALWAYS | D_NOHEADER , ""<END>\\n"" )"		3131857	0					
ANR	3132165	Callee	dprintf		3131857	0					
ANR	3132166	Identifier	dprintf		3131857	0					
ANR	3132167	ArgumentList	D_ALWAYS | D_NOHEADER		3131857	1					
ANR	3132168	Argument	D_ALWAYS | D_NOHEADER		3131857	0					
ANR	3132169	InclusiveOrExpression	D_ALWAYS | D_NOHEADER		3131857	0		|			
ANR	3132170	Identifier	D_ALWAYS		3131857	0					
ANR	3132171	Identifier	D_NOHEADER		3131857	1					
ANR	3132172	Argument	"""<END>\\n"""		3131857	1					
ANR	3132173	PrimaryExpression	"""<END>\\n"""		3131857	0					
ANR	3132174	ReturnType	void		3131857	1					
ANR	3132175	Identifier	Job :: Dump		3131857	2					
ANR	3132176	ParameterList	const Dag * dag		3131857	3					
ANR	3132177	Parameter	const Dag * dag	222:17:5935:5948	3131857	0	True				
ANR	3132178	ParameterType	const Dag *		3131857	0					
ANR	3132179	Identifier	dag		3131857	1					
ANR	3132180	CFGEntryNode	ENTRY		3131857		True				
ANR	3132181	CFGExitNode	EXIT		3131857		True				
ANR	3132182	Symbol	error_text		3131857						
ANR	3132183	Symbol	queue_t_names		3131857						
ANR	3132184	Symbol	_scriptPost		3131857						
ANR	3132185	Symbol	_queues		3131857						
ANR	3132186	Symbol	_queues [ i ] . end		3131857						
ANR	3132187	Symbol	* qit		3131857						
ANR	3132188	Symbol	_scriptPost -> GetCmd		3131857						
ANR	3132189	Symbol	dag		3131857						
ANR	3132190	Symbol	* dag		3131857						
ANR	3132191	Symbol	retry_max		3131857						
ANR	3132192	Symbol	_CondorID . _subproc		3131857						
ANR	3132193	Symbol	_CondorID		3131857						
ANR	3132194	Symbol	_Status		3131857						
ANR	3132195	Symbol	_queues [ i ] . begin		3131857						
ANR	3132196	Symbol	GetStatusName		3131857						
ANR	3132197	Symbol	* _scriptPost		3131857						
ANR	3132198	Symbol	_scriptPre -> GetCmd		3131857						
ANR	3132199	Symbol	* node		3131857						
ANR	3132200	Symbol	* queue_t_names		3131857						
ANR	3132201	Symbol	qit		3131857						
ANR	3132202	Symbol	JobTypeString		3131857						
ANR	3132203	Symbol	_CondorID . _proc		3131857						
ANR	3132204	Symbol	node -> GetJobName		3131857						
ANR	3132205	Symbol	D_ALWAYS		3131857						
ANR	3132206	Symbol	* _queues		3131857						
ANR	3132207	Symbol	dag -> Dag :: FindNodeByNodeID		3131857						
ANR	3132208	Symbol	i		3131857						
ANR	3132209	Symbol	_cmdFile		3131857						
ANR	3132210	Symbol	* _scriptPre		3131857						
ANR	3132211	Symbol	retval		3131857						
ANR	3132212	Symbol	STATUS_ERROR		3131857						
ANR	3132213	Symbol	_noop		3131857						
ANR	3132214	Symbol	_jobName		3131857						
ANR	3132215	Symbol	node		3131857						
ANR	3132216	Symbol	* i		3131857						
ANR	3132217	Symbol	_CondorID . _cluster		3131857						
ANR	3132218	Symbol	D_NOHEADER		3131857						
ANR	3132219	Symbol	_jobID		3131857						
ANR	3132220	Symbol	_scriptPre		3131857						
ANR	3132221	Function	Job :: Print	264:0:7509:7754							
ANR	3132222	FunctionDef	Job :: Print (bool condorID)		3132221	0					
ANR	3132223	CompoundStatement		264:38:7547:7754	3132221	0					
ANR	3132224	ExpressionStatement	"dprintf ( D_ALWAYS , ""ID: %4d Name: %s"" , _jobID , _jobName )"	265:4:7553:7609	3132221	0	True				
ANR	3132225	CallExpression	"dprintf ( D_ALWAYS , ""ID: %4d Name: %s"" , _jobID , _jobName )"		3132221	0					
ANR	3132226	Callee	dprintf		3132221	0					
ANR	3132227	Identifier	dprintf		3132221	0					
ANR	3132228	ArgumentList	D_ALWAYS		3132221	1					
ANR	3132229	Argument	D_ALWAYS		3132221	0					
ANR	3132230	Identifier	D_ALWAYS		3132221	0					
ANR	3132231	Argument	"""ID: %4d Name: %s"""		3132221	1					
ANR	3132232	PrimaryExpression	"""ID: %4d Name: %s"""		3132221	0					
ANR	3132233	Argument	_jobID		3132221	2					
ANR	3132234	Identifier	_jobID		3132221	0					
ANR	3132235	Argument	_jobName		3132221	3					
ANR	3132236	Identifier	_jobName		3132221	0					
ANR	3132237	IfStatement	if ( condorID )		3132221	1					
ANR	3132238	Condition	condorID	266:8:7619:7626	3132221	0	True				
ANR	3132239	Identifier	condorID		3132221	0					
ANR	3132240	CompoundStatement		3:18:81:81	3132221	1					
ANR	3132241	ExpressionStatement	"dprintf ( D_ALWAYS , ""  CondorID: (%d.%d.%d)"" , _CondorID . _cluster , _CondorID . _proc , _CondorID . _subproc )"	267:8:7639:7746	3132221	0	True				
ANR	3132242	CallExpression	"dprintf ( D_ALWAYS , ""  CondorID: (%d.%d.%d)"" , _CondorID . _cluster , _CondorID . _proc , _CondorID . _subproc )"		3132221	0					
ANR	3132243	Callee	dprintf		3132221	0					
ANR	3132244	Identifier	dprintf		3132221	0					
ANR	3132245	ArgumentList	D_ALWAYS		3132221	1					
ANR	3132246	Argument	D_ALWAYS		3132221	0					
ANR	3132247	Identifier	D_ALWAYS		3132221	0					
ANR	3132248	Argument	"""  CondorID: (%d.%d.%d)"""		3132221	1					
ANR	3132249	PrimaryExpression	"""  CondorID: (%d.%d.%d)"""		3132221	0					
ANR	3132250	Argument	_CondorID . _cluster		3132221	2					
ANR	3132251	MemberAccess	_CondorID . _cluster		3132221	0					
ANR	3132252	Identifier	_CondorID		3132221	0					
ANR	3132253	Identifier	_cluster		3132221	1					
ANR	3132254	Argument	_CondorID . _proc		3132221	3					
ANR	3132255	MemberAccess	_CondorID . _proc		3132221	0					
ANR	3132256	Identifier	_CondorID		3132221	0					
ANR	3132257	Identifier	_proc		3132221	1					
ANR	3132258	Argument	_CondorID . _subproc		3132221	4					
ANR	3132259	MemberAccess	_CondorID . _subproc		3132221	0					
ANR	3132260	Identifier	_CondorID		3132221	0					
ANR	3132261	Identifier	_subproc		3132221	1					
ANR	3132262	ReturnType	void		3132221	1					
ANR	3132263	Identifier	Job :: Print		3132221	2					
ANR	3132264	ParameterList	bool condorID		3132221	3					
ANR	3132265	Parameter	bool condorID	264:17:7526:7538	3132221	0	True				
ANR	3132266	ParameterType	bool		3132221	0					
ANR	3132267	Identifier	condorID		3132221	1					
ANR	3132268	CFGEntryNode	ENTRY		3132221		True				
ANR	3132269	CFGExitNode	EXIT		3132221		True				
ANR	3132270	Symbol	_jobName		3132221						
ANR	3132271	Symbol	condorID		3132221						
ANR	3132272	Symbol	_CondorID . _proc		3132221						
ANR	3132273	Symbol	D_ALWAYS		3132221						
ANR	3132274	Symbol	_CondorID . _cluster		3132221						
ANR	3132275	Symbol	_CondorID . _subproc		3132221						
ANR	3132276	Symbol	_CondorID		3132221						
ANR	3132277	Symbol	_jobID		3132221						
ANR	3132278	Function	job_print	273:0:7835:7974							
ANR	3132279	FunctionDef	"job_print (Job * job , bool condorID)"		3132278	0					
ANR	3132280	CompoundStatement		273:42:7877:7974	3132278	0					
ANR	3132281	IfStatement	if ( job == NULL )		3132278	0					
ANR	3132282	Condition	job == NULL	274:8:7887:7897	3132278	0	True				
ANR	3132283	EqualityExpression	job == NULL		3132278	0		==			
ANR	3132284	Identifier	job		3132278	0					
ANR	3132285	Identifier	NULL		3132278	1					
ANR	3132286	CompoundStatement		2:21:22:22	3132278	1					
ANR	3132287	ExpressionStatement	"dprintf ( D_ALWAYS , ""(UNKNOWN)"" )"	275:2:7904:7935	3132278	0	True				
ANR	3132288	CallExpression	"dprintf ( D_ALWAYS , ""(UNKNOWN)"" )"		3132278	0					
ANR	3132289	Callee	dprintf		3132278	0					
ANR	3132290	Identifier	dprintf		3132278	0					
ANR	3132291	ArgumentList	D_ALWAYS		3132278	1					
ANR	3132292	Argument	D_ALWAYS		3132278	0					
ANR	3132293	Identifier	D_ALWAYS		3132278	0					
ANR	3132294	Argument	"""(UNKNOWN)"""		3132278	1					
ANR	3132295	PrimaryExpression	"""(UNKNOWN)"""		3132278	0					
ANR	3132296	ElseStatement	else		3132278	0					
ANR	3132297	CompoundStatement		4:8:67:67	3132278	0					
ANR	3132298	ExpressionStatement	job -> Print ( condorID )	277:2:7949:7969	3132278	0	True				
ANR	3132299	CallExpression	job -> Print ( condorID )		3132278	0					
ANR	3132300	Callee	job -> Print		3132278	0					
ANR	3132301	PtrMemberAccess	job -> Print		3132278	0					
ANR	3132302	Identifier	job		3132278	0					
ANR	3132303	Identifier	Print		3132278	1					
ANR	3132304	ArgumentList	condorID		3132278	1					
ANR	3132305	Argument	condorID		3132278	0					
ANR	3132306	Identifier	condorID		3132278	0					
ANR	3132307	ReturnType	void		3132278	1					
ANR	3132308	Identifier	job_print		3132278	2					
ANR	3132309	ParameterList	"Job * job , bool condorID"		3132278	3					
ANR	3132310	Parameter	Job * job	273:16:7851:7859	3132278	0	True				
ANR	3132311	ParameterType	Job *		3132278	0					
ANR	3132312	Identifier	job		3132278	1					
ANR	3132313	Parameter	bool condorID	273:27:7862:7874	3132278	1	True				
ANR	3132314	ParameterType	bool		3132278	0					
ANR	3132315	Identifier	condorID		3132278	1					
ANR	3132316	CFGEntryNode	ENTRY		3132278		True				
ANR	3132317	CFGExitNode	EXIT		3132278		True				
ANR	3132318	Symbol	condorID		3132278						
ANR	3132319	Symbol	NULL		3132278						
ANR	3132320	Symbol	D_ALWAYS		3132278						
ANR	3132321	Symbol	job		3132278						
ANR	3132322	Function	Job :: GetPreScriptName	281:0:7977:8090							
ANR	3132323	FunctionDef	Job :: GetPreScriptName ()		3132322	0					
ANR	3132324	CompoundStatement		283:0:8019:8090	3132322	0					
ANR	3132325	IfStatement	if ( ! _scriptPre )		3132322	0					
ANR	3132326	Condition	! _scriptPre	284:5:8026:8036	3132322	0	True				
ANR	3132327	UnaryOperationExpression	! _scriptPre		3132322	0					
ANR	3132328	UnaryOperator	!		3132322	0					
ANR	3132329	Identifier	_scriptPre		3132322	1					
ANR	3132330	CompoundStatement		2:19:20:20	3132322	1					
ANR	3132331	ReturnStatement	return NULL ;	285:2:8044:8055	3132322	0	True				
ANR	3132332	Identifier	NULL		3132322	0					
ANR	3132333	ReturnStatement	return _scriptPre -> GetCmd ( ) ;	287:1:8061:8088	3132322	1	True				
ANR	3132334	CallExpression	_scriptPre -> GetCmd ( )		3132322	0					
ANR	3132335	Callee	_scriptPre -> GetCmd		3132322	0					
ANR	3132336	PtrMemberAccess	_scriptPre -> GetCmd		3132322	0					
ANR	3132337	Identifier	_scriptPre		3132322	0					
ANR	3132338	Identifier	GetCmd		3132322	1					
ANR	3132339	ArgumentList			3132322	1					
ANR	3132340	ReturnType	const char *		3132322	1					
ANR	3132341	Identifier	Job :: GetPreScriptName		3132322	2					
ANR	3132342	ParameterList			3132322	3					
ANR	3132343	CFGEntryNode	ENTRY		3132322		True				
ANR	3132344	CFGExitNode	EXIT		3132322		True				
ANR	3132345	Symbol	NULL		3132322						
ANR	3132346	Symbol	_scriptPre -> GetCmd		3132322						
ANR	3132347	Symbol	* _scriptPre		3132322						
ANR	3132348	Symbol	_scriptPre		3132322						
ANR	3132349	Function	Job :: GetPostScriptName	290:0:8093:8209							
ANR	3132350	FunctionDef	Job :: GetPostScriptName ()		3132349	0					
ANR	3132351	CompoundStatement		292:0:8136:8209	3132349	0					
ANR	3132352	IfStatement	if ( ! _scriptPost )		3132349	0					
ANR	3132353	Condition	! _scriptPost	293:5:8143:8154	3132349	0	True				
ANR	3132354	UnaryOperationExpression	! _scriptPost		3132349	0					
ANR	3132355	UnaryOperator	!		3132349	0					
ANR	3132356	Identifier	_scriptPost		3132349	1					
ANR	3132357	CompoundStatement		2:20:21:21	3132349	1					
ANR	3132358	ReturnStatement	return NULL ;	294:2:8162:8173	3132349	0	True				
ANR	3132359	Identifier	NULL		3132349	0					
ANR	3132360	ReturnStatement	return _scriptPost -> GetCmd ( ) ;	296:1:8179:8207	3132349	1	True				
ANR	3132361	CallExpression	_scriptPost -> GetCmd ( )		3132349	0					
ANR	3132362	Callee	_scriptPost -> GetCmd		3132349	0					
ANR	3132363	PtrMemberAccess	_scriptPost -> GetCmd		3132349	0					
ANR	3132364	Identifier	_scriptPost		3132349	0					
ANR	3132365	Identifier	GetCmd		3132349	1					
ANR	3132366	ArgumentList			3132349	1					
ANR	3132367	ReturnType	const char *		3132349	1					
ANR	3132368	Identifier	Job :: GetPostScriptName		3132349	2					
ANR	3132369	ParameterList			3132349	3					
ANR	3132370	CFGEntryNode	ENTRY		3132349		True				
ANR	3132371	CFGExitNode	EXIT		3132349		True				
ANR	3132372	Symbol	NULL		3132349						
ANR	3132373	Symbol	_scriptPost		3132349						
ANR	3132374	Symbol	* _scriptPost		3132349						
ANR	3132375	Symbol	_scriptPost -> GetCmd		3132349						
ANR	3132376	Function	Job :: SanityCheck	299:0:8212:8679							
ANR	3132377	FunctionDef	Job :: SanityCheck ()		3132376	0					
ANR	3132378	CompoundStatement		301:0:8242:8679	3132376	0					
ANR	3132379	IdentifierDeclStatement	bool result = true ;	302:1:8245:8263	3132376	0	True				
ANR	3132380	IdentifierDecl	result = true		3132376	0					
ANR	3132381	IdentifierDeclType	bool		3132376	0					
ANR	3132382	Identifier	result		3132376	1					
ANR	3132383	AssignmentExpression	result = true		3132376	2		=			
ANR	3132384	Identifier	true		3132376	0					
ANR	3132385	Identifier	true		3132376	1					
ANR	3132386	IfStatement	if ( countedAsDone == true && _Status != STATUS_DONE )		3132376	1					
ANR	3132387	Condition	countedAsDone == true && _Status != STATUS_DONE	304:5:8271:8317	3132376	0	True				
ANR	3132388	AndExpression	countedAsDone == true && _Status != STATUS_DONE		3132376	0		&&			
ANR	3132389	EqualityExpression	countedAsDone == true		3132376	0		==			
ANR	3132390	Identifier	countedAsDone		3132376	0					
ANR	3132391	Identifier	true		3132376	1					
ANR	3132392	EqualityExpression	_Status != STATUS_DONE		3132376	1		!=			
ANR	3132393	Identifier	_Status		3132376	0					
ANR	3132394	Identifier	STATUS_DONE		3132376	1					
ANR	3132395	CompoundStatement		4:55:78:78	3132376	1					
ANR	3132396	Statement	dprintf	305:2:8325:8331	3132376	0	True				
ANR	3132397	Statement	(	305:9:8332:8332	3132376	1	True				
ANR	3132398	Statement	D_ALWAYS	305:11:8334:8341	3132376	2	True				
ANR	3132399	Statement	","	305:19:8342:8342	3132376	3	True				
ANR	3132400	Statement	"""BADNESS 10000: countedAsDone == true but """	305:21:8344:8386	3132376	4	True				
ANR	3132401	Statement	"""_Status != STATUS_DONE\\n"""	306:5:8393:8418	3132376	5	True				
ANR	3132402	Statement	)	306:32:8420:8420	3132376	6	True				
ANR	3132403	ExpressionStatement		306:33:8421:8421	3132376	7	True				
ANR	3132404	ExpressionStatement	result = false	307:2:8425:8439	3132376	8	True				
ANR	3132405	AssignmentExpression	result = false		3132376	0		=			
ANR	3132406	Identifier	result		3132376	0					
ANR	3132407	Identifier	false		3132376	1					
ANR	3132408	ReturnStatement	return result ;	319:1:8664:8677	3132376	2	True				
ANR	3132409	Identifier	result		3132376	0					
ANR	3132410	ReturnType	bool		3132376	1					
ANR	3132411	Identifier	Job :: SanityCheck		3132376	2					
ANR	3132412	ParameterList			3132376	3					
ANR	3132413	CFGEntryNode	ENTRY		3132376		True				
ANR	3132414	CFGExitNode	EXIT		3132376		True				
ANR	3132415	Symbol	result		3132376						
ANR	3132416	Symbol	_Status		3132376						
ANR	3132417	Symbol	true		3132376						
ANR	3132418	Symbol	false		3132376						
ANR	3132419	Symbol	countedAsDone		3132376						
ANR	3132420	Symbol	STATUS_DONE		3132376						
ANR	3132421	Function	Job :: GetStatus	322:0:8682:8738							
ANR	3132422	FunctionDef	Job :: GetStatus ()		3132421	0					
ANR	3132423	CompoundStatement		324:0:8719:8738	3132421	0					
ANR	3132424	ReturnStatement	return _Status ;	325:1:8722:8736	3132421	0	True				
ANR	3132425	Identifier	_Status		3132421	0					
ANR	3132426	ReturnType	Job :: status_t		3132421	1					
ANR	3132427	Identifier	Job :: GetStatus		3132421	2					
ANR	3132428	ParameterList			3132421	3					
ANR	3132429	CFGEntryNode	ENTRY		3132421		True				
ANR	3132430	CFGExitNode	EXIT		3132421		True				
ANR	3132431	Symbol	_Status		3132421						
ANR	3132432	Function	Job :: SetStatus	329:0:8742:8881							
ANR	3132433	FunctionDef	Job :: SetStatus (status_t newStatus)		3132432	0					
ANR	3132434	CompoundStatement		331:0:8784:8881	3132432	0					
ANR	3132435	ExpressionStatement	_Status = newStatus	333:1:8846:8865	3132432	0	True				
ANR	3132436	AssignmentExpression	_Status = newStatus		3132432	0		=			
ANR	3132437	Identifier	_Status		3132432	0					
ANR	3132438	Identifier	newStatus		3132432	1					
ANR	3132439	ReturnStatement	return true ;	334:1:8868:8879	3132432	1	True				
ANR	3132440	Identifier	true		3132432	0					
ANR	3132441	ReturnType	bool		3132432	1					
ANR	3132442	Identifier	Job :: SetStatus		3132432	2					
ANR	3132443	ParameterList	status_t newStatus		3132432	3					
ANR	3132444	Parameter	status_t newStatus	330:16:8763:8780	3132432	0	True				
ANR	3132445	ParameterType	status_t		3132432	0					
ANR	3132446	Identifier	newStatus		3132432	1					
ANR	3132447	CFGEntryNode	ENTRY		3132432		True				
ANR	3132448	CFGExitNode	EXIT		3132432		True				
ANR	3132449	Symbol	_Status		3132432						
ANR	3132450	Symbol	newStatus		3132432						
ANR	3132451	Symbol	true		3132432						
ANR	3132452	Function	Job :: AddParent	338:0:8885:9214							
ANR	3132453	FunctionDef	Job :: AddParent (Job * parent)		3132452	0					
ANR	3132454	CompoundStatement		340:0:8920:9214	3132452	0					
ANR	3132455	IdentifierDeclStatement	bool success ;	341:1:8923:8935	3132452	0	True				
ANR	3132456	IdentifierDecl	success		3132452	0					
ANR	3132457	IdentifierDeclType	bool		3132452	0					
ANR	3132458	Identifier	success		3132452	1					
ANR	3132459	IdentifierDeclStatement	MyString whynot ;	342:1:8938:8953	3132452	1	True				
ANR	3132460	IdentifierDecl	whynot		3132452	0					
ANR	3132461	IdentifierDeclType	MyString		3132452	0					
ANR	3132462	Identifier	whynot		3132452	1					
ANR	3132463	ExpressionStatement	"success = AddParent ( parent , whynot )"	343:1:8956:8993	3132452	2	True				
ANR	3132464	AssignmentExpression	"success = AddParent ( parent , whynot )"		3132452	0		=			
ANR	3132465	Identifier	success		3132452	0					
ANR	3132466	CallExpression	"AddParent ( parent , whynot )"		3132452	1					
ANR	3132467	Callee	AddParent		3132452	0					
ANR	3132468	Identifier	AddParent		3132452	0					
ANR	3132469	ArgumentList	parent		3132452	1					
ANR	3132470	Argument	parent		3132452	0					
ANR	3132471	Identifier	parent		3132452	0					
ANR	3132472	Argument	whynot		3132452	1					
ANR	3132473	Identifier	whynot		3132452	0					
ANR	3132474	IfStatement	if ( ! success )		3132452	3					
ANR	3132475	Condition	! success	344:5:9000:9007	3132452	0	True				
ANR	3132476	UnaryOperationExpression	! success		3132452	0					
ANR	3132477	UnaryOperator	!		3132452	0					
ANR	3132478	Identifier	success		3132452	1					
ANR	3132479	CompoundStatement		5:16:90:90	3132452	1					
ANR	3132480	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""ERROR: AddParent( %s ) failed for node %s: %s\\n"" , parent ? parent -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"	345:2:9015:9192	3132452	0	True				
ANR	3132481	CallExpression	"debug_printf ( DEBUG_QUIET , ""ERROR: AddParent( %s ) failed for node %s: %s\\n"" , parent ? parent -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"		3132452	0					
ANR	3132482	Callee	debug_printf		3132452	0					
ANR	3132483	Identifier	debug_printf		3132452	0					
ANR	3132484	ArgumentList	DEBUG_QUIET		3132452	1					
ANR	3132485	Argument	DEBUG_QUIET		3132452	0					
ANR	3132486	Identifier	DEBUG_QUIET		3132452	0					
ANR	3132487	Argument	"""ERROR: AddParent( %s ) failed for node %s: %s\\n"""		3132452	1					
ANR	3132488	PrimaryExpression	"""ERROR: AddParent( %s ) failed for node %s: %s\\n"""		3132452	0					
ANR	3132489	Argument	"parent ? parent -> GetJobName ( ) : ""(null)"""		3132452	2					
ANR	3132490	ConditionalExpression	"parent ? parent -> GetJobName ( ) : ""(null)"""		3132452	0					
ANR	3132491	Condition	parent		3132452	0					
ANR	3132492	Identifier	parent		3132452	0					
ANR	3132493	CallExpression	parent -> GetJobName ( )		3132452	1					
ANR	3132494	Callee	parent -> GetJobName		3132452	0					
ANR	3132495	PtrMemberAccess	parent -> GetJobName		3132452	0					
ANR	3132496	Identifier	parent		3132452	0					
ANR	3132497	Identifier	GetJobName		3132452	1					
ANR	3132498	ArgumentList			3132452	1					
ANR	3132499	PrimaryExpression	"""(null)"""		3132452	2					
ANR	3132500	Argument	this -> GetJobName ( )		3132452	3					
ANR	3132501	CallExpression	this -> GetJobName ( )		3132452	0					
ANR	3132502	Callee	this -> GetJobName		3132452	0					
ANR	3132503	PtrMemberAccess	this -> GetJobName		3132452	0					
ANR	3132504	Identifier	this		3132452	0					
ANR	3132505	Identifier	GetJobName		3132452	1					
ANR	3132506	ArgumentList			3132452	1					
ANR	3132507	Argument	whynot . Value ( )		3132452	4					
ANR	3132508	CallExpression	whynot . Value ( )		3132452	0					
ANR	3132509	Callee	whynot . Value		3132452	0					
ANR	3132510	MemberAccess	whynot . Value		3132452	0					
ANR	3132511	Identifier	whynot		3132452	0					
ANR	3132512	Identifier	Value		3132452	1					
ANR	3132513	ArgumentList			3132452	1					
ANR	3132514	ReturnStatement	return success ;	350:1:9198:9212	3132452	4	True				
ANR	3132515	Identifier	success		3132452	0					
ANR	3132516	ReturnType	bool		3132452	1					
ANR	3132517	Identifier	Job :: AddParent		3132452	2					
ANR	3132518	ParameterList	Job * parent		3132452	3					
ANR	3132519	Parameter	Job * parent	339:16:8906:8916	3132452	0	True				
ANR	3132520	ParameterType	Job *		3132452	0					
ANR	3132521	Identifier	parent		3132452	1					
ANR	3132522	CFGEntryNode	ENTRY		3132452		True				
ANR	3132523	CFGExitNode	EXIT		3132452		True				
ANR	3132524	Symbol	* this		3132452						
ANR	3132525	Symbol	parent		3132452						
ANR	3132526	Symbol	* parent		3132452						
ANR	3132527	Symbol	success		3132452						
ANR	3132528	Symbol	this		3132452						
ANR	3132529	Symbol	whynot . Value		3132452						
ANR	3132530	Symbol	whynot		3132452						
ANR	3132531	Symbol	this -> GetJobName		3132452						
ANR	3132532	Symbol	parent -> GetJobName		3132452						
ANR	3132533	Symbol	AddParent		3132452						
ANR	3132534	Symbol	DEBUG_QUIET		3132452						
ANR	3132535	Function	Job :: AddParent	354:0:9218:10054							
ANR	3132536	FunctionDef	"Job :: AddParent (Job * parent , MyString & whynot)"		3132535	0					
ANR	3132537	CompoundStatement		356:0:9271:10054	3132535	0					
ANR	3132538	IfStatement	"if ( ! this -> CanAddParent ( parent , whynot ) )"		3132535	0					
ANR	3132539	Condition	"! this -> CanAddParent ( parent , whynot )"	357:5:9278:9314	3132535	0	True				
ANR	3132540	UnaryOperationExpression	"! this -> CanAddParent ( parent , whynot )"		3132535	0					
ANR	3132541	UnaryOperator	!		3132535	0					
ANR	3132542	CallExpression	"this -> CanAddParent ( parent , whynot )"		3132535	1					
ANR	3132543	Callee	this -> CanAddParent		3132535	0					
ANR	3132544	PtrMemberAccess	this -> CanAddParent		3132535	0					
ANR	3132545	Identifier	this		3132535	0					
ANR	3132546	Identifier	CanAddParent		3132535	1					
ANR	3132547	ArgumentList	parent		3132535	1					
ANR	3132548	Argument	parent		3132535	0					
ANR	3132549	Identifier	parent		3132535	0					
ANR	3132550	Argument	whynot		3132535	1					
ANR	3132551	Identifier	whynot		3132535	0					
ANR	3132552	CompoundStatement		2:45:46:46	3132535	1					
ANR	3132553	ReturnStatement	return false ;	358:2:9322:9334	3132535	0	True				
ANR	3132554	Identifier	false		3132535	0					
ANR	3132555	IfStatement	if ( HasParent ( parent ) )		3132535	1					
ANR	3132556	Condition	HasParent ( parent )	361:5:9345:9363	3132535	0	True				
ANR	3132557	CallExpression	HasParent ( parent )		3132535	0					
ANR	3132558	Callee	HasParent		3132535	0					
ANR	3132559	Identifier	HasParent		3132535	0					
ANR	3132560	ArgumentList	parent		3132535	1					
ANR	3132561	Argument	parent		3132535	0					
ANR	3132562	Identifier	parent		3132535	0					
ANR	3132563	CompoundStatement		6:27:95:95	3132535	1					
ANR	3132564	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""Warning: child %s already has parent %s\\n"" , GetJobName ( ) , parent -> GetJobName ( ) )"	362:2:9371:9489	3132535	0	True				
ANR	3132565	CallExpression	"debug_printf ( DEBUG_QUIET , ""Warning: child %s already has parent %s\\n"" , GetJobName ( ) , parent -> GetJobName ( ) )"		3132535	0					
ANR	3132566	Callee	debug_printf		3132535	0					
ANR	3132567	Identifier	debug_printf		3132535	0					
ANR	3132568	ArgumentList	DEBUG_QUIET		3132535	1					
ANR	3132569	Argument	DEBUG_QUIET		3132535	0					
ANR	3132570	Identifier	DEBUG_QUIET		3132535	0					
ANR	3132571	Argument	"""Warning: child %s already has parent %s\\n"""		3132535	1					
ANR	3132572	PrimaryExpression	"""Warning: child %s already has parent %s\\n"""		3132535	0					
ANR	3132573	Argument	GetJobName ( )		3132535	2					
ANR	3132574	CallExpression	GetJobName ( )		3132535	0					
ANR	3132575	Callee	GetJobName		3132535	0					
ANR	3132576	Identifier	GetJobName		3132535	0					
ANR	3132577	ArgumentList			3132535	1					
ANR	3132578	Argument	parent -> GetJobName ( )		3132535	3					
ANR	3132579	CallExpression	parent -> GetJobName ( )		3132535	0					
ANR	3132580	Callee	parent -> GetJobName		3132535	0					
ANR	3132581	PtrMemberAccess	parent -> GetJobName		3132535	0					
ANR	3132582	Identifier	parent		3132535	0					
ANR	3132583	Identifier	GetJobName		3132535	1					
ANR	3132584	ArgumentList			3132535	1					
ANR	3132585	ExpressionStatement	check_warning_strictness ( DAG_STRICT_3 )	365:2:9493:9533	3132535	1	True				
ANR	3132586	CallExpression	check_warning_strictness ( DAG_STRICT_3 )		3132535	0					
ANR	3132587	Callee	check_warning_strictness		3132535	0					
ANR	3132588	Identifier	check_warning_strictness		3132535	0					
ANR	3132589	ArgumentList	DAG_STRICT_3		3132535	1					
ANR	3132590	Argument	DAG_STRICT_3		3132535	0					
ANR	3132591	Identifier	DAG_STRICT_3		3132535	0					
ANR	3132592	ReturnStatement	return true ;	366:2:9537:9548	3132535	2	True				
ANR	3132593	Identifier	true		3132535	0					
ANR	3132594	IfStatement	"if ( ! Add ( Q_PARENTS , parent -> GetJobID ( ) ) )"		3132535	2					
ANR	3132595	Condition	"! Add ( Q_PARENTS , parent -> GetJobID ( ) )"	369:5:9559:9595	3132535	0	True				
ANR	3132596	UnaryOperationExpression	"! Add ( Q_PARENTS , parent -> GetJobID ( ) )"		3132535	0					
ANR	3132597	UnaryOperator	!		3132535	0					
ANR	3132598	CallExpression	"Add ( Q_PARENTS , parent -> GetJobID ( ) )"		3132535	1					
ANR	3132599	Callee	Add		3132535	0					
ANR	3132600	Identifier	Add		3132535	0					
ANR	3132601	ArgumentList	Q_PARENTS		3132535	1					
ANR	3132602	Argument	Q_PARENTS		3132535	0					
ANR	3132603	Identifier	Q_PARENTS		3132535	0					
ANR	3132604	Argument	parent -> GetJobID ( )		3132535	1					
ANR	3132605	CallExpression	parent -> GetJobID ( )		3132535	0					
ANR	3132606	Callee	parent -> GetJobID		3132535	0					
ANR	3132607	PtrMemberAccess	parent -> GetJobID		3132535	0					
ANR	3132608	Identifier	parent		3132535	0					
ANR	3132609	Identifier	GetJobID		3132535	1					
ANR	3132610	ArgumentList			3132535	1					
ANR	3132611	CompoundStatement		14:45:327:327	3132535	1					
ANR	3132612	ExpressionStatement	"whynot = ""unknown error appending to PARENTS queue"""	370:2:9603:9654	3132535	0	True				
ANR	3132613	AssignmentExpression	"whynot = ""unknown error appending to PARENTS queue"""		3132535	0		=			
ANR	3132614	Identifier	whynot		3132535	0					
ANR	3132615	PrimaryExpression	"""unknown error appending to PARENTS queue"""		3132535	1					
ANR	3132616	ReturnStatement	return false ;	371:2:9658:9670	3132535	1	True				
ANR	3132617	Identifier	false		3132535	0					
ANR	3132618	IfStatement	if ( parent -> GetStatus ( ) != STATUS_DONE )		3132535	3					
ANR	3132619	Condition	parent -> GetStatus ( ) != STATUS_DONE	373:8:9683:9716	3132535	0	True				
ANR	3132620	EqualityExpression	parent -> GetStatus ( ) != STATUS_DONE		3132535	0		!=			
ANR	3132621	CallExpression	parent -> GetStatus ( )		3132535	0					
ANR	3132622	Callee	parent -> GetStatus		3132535	0					
ANR	3132623	PtrMemberAccess	parent -> GetStatus		3132535	0					
ANR	3132624	Identifier	parent		3132535	0					
ANR	3132625	Identifier	GetStatus		3132535	1					
ANR	3132626	ArgumentList			3132535	1					
ANR	3132627	Identifier	STATUS_DONE		3132535	1					
ANR	3132628	CompoundStatement		18:45:448:448	3132535	1					
ANR	3132629	IfStatement	"if ( ! Add ( Q_WAITING , parent -> GetJobID ( ) ) )"		3132535	0					
ANR	3132630	Condition	"! Add ( Q_WAITING , parent -> GetJobID ( ) )"	374:6:9728:9764	3132535	0	True				
ANR	3132631	UnaryOperationExpression	"! Add ( Q_WAITING , parent -> GetJobID ( ) )"		3132535	0					
ANR	3132632	UnaryOperator	!		3132535	0					
ANR	3132633	CallExpression	"Add ( Q_WAITING , parent -> GetJobID ( ) )"		3132535	1					
ANR	3132634	Callee	Add		3132535	0					
ANR	3132635	Identifier	Add		3132535	0					
ANR	3132636	ArgumentList	Q_WAITING		3132535	1					
ANR	3132637	Argument	Q_WAITING		3132535	0					
ANR	3132638	Identifier	Q_WAITING		3132535	0					
ANR	3132639	Argument	parent -> GetJobID ( )		3132535	1					
ANR	3132640	CallExpression	parent -> GetJobID ( )		3132535	0					
ANR	3132641	Callee	parent -> GetJobID		3132535	0					
ANR	3132642	PtrMemberAccess	parent -> GetJobID		3132535	0					
ANR	3132643	Identifier	parent		3132535	0					
ANR	3132644	Identifier	GetJobID		3132535	1					
ANR	3132645	ArgumentList			3132535	1					
ANR	3132646	CompoundStatement		19:46:496:496	3132535	1					
ANR	3132647	ExpressionStatement	"EXCEPT ( ""Failed to add parent %s to job %s"" , parent -> GetJobName ( ) , GetJobName ( ) )"	377:3:9907:9994	3132535	0	True				
ANR	3132648	CallExpression	"EXCEPT ( ""Failed to add parent %s to job %s"" , parent -> GetJobName ( ) , GetJobName ( ) )"		3132535	0					
ANR	3132649	Callee	EXCEPT		3132535	0					
ANR	3132650	Identifier	EXCEPT		3132535	0					
ANR	3132651	ArgumentList	"""Failed to add parent %s to job %s"""		3132535	1					
ANR	3132652	Argument	"""Failed to add parent %s to job %s"""		3132535	0					
ANR	3132653	PrimaryExpression	"""Failed to add parent %s to job %s"""		3132535	0					
ANR	3132654	Argument	parent -> GetJobName ( )		3132535	1					
ANR	3132655	CallExpression	parent -> GetJobName ( )		3132535	0					
ANR	3132656	Callee	parent -> GetJobName		3132535	0					
ANR	3132657	PtrMemberAccess	parent -> GetJobName		3132535	0					
ANR	3132658	Identifier	parent		3132535	0					
ANR	3132659	Identifier	GetJobName		3132535	1					
ANR	3132660	ArgumentList			3132535	1					
ANR	3132661	Argument	GetJobName ( )		3132535	2					
ANR	3132662	CallExpression	GetJobName ( )		3132535	0					
ANR	3132663	Callee	GetJobName		3132535	0					
ANR	3132664	Identifier	GetJobName		3132535	0					
ANR	3132665	ArgumentList			3132535	1					
ANR	3132666	ReturnStatement	return false ;	379:3:9999:10011	3132535	1	True				
ANR	3132667	Identifier	false		3132535	0					
ANR	3132668	ExpressionStatement	"whynot = ""n/a"""	382:1:10021:10035	3132535	4	True				
ANR	3132669	AssignmentExpression	"whynot = ""n/a"""		3132535	0		=			
ANR	3132670	Identifier	whynot		3132535	0					
ANR	3132671	PrimaryExpression	"""n/a"""		3132535	1					
ANR	3132672	ReturnStatement	return true ;	383:4:10041:10052	3132535	5	True				
ANR	3132673	Identifier	true		3132535	0					
ANR	3132674	ReturnType	bool		3132535	1					
ANR	3132675	Identifier	Job :: AddParent		3132535	2					
ANR	3132676	ParameterList	"Job * parent , MyString & whynot"		3132535	3					
ANR	3132677	Parameter	Job * parent	355:16:9239:9249	3132535	0	True				
ANR	3132678	ParameterType	Job *		3132535	0					
ANR	3132679	Identifier	parent		3132535	1					
ANR	3132680	Parameter	MyString & whynot	355:29:9252:9267	3132535	1	True				
ANR	3132681	ParameterType	MyString &		3132535	0					
ANR	3132682	Identifier	whynot		3132535	1					
ANR	3132683	CFGEntryNode	ENTRY		3132535		True				
ANR	3132684	CFGExitNode	EXIT		3132535		True				
ANR	3132685	Symbol	Add		3132535						
ANR	3132686	Symbol	parent		3132535						
ANR	3132687	Symbol	parent -> GetStatus		3132535						
ANR	3132688	Symbol	* parent		3132535						
ANR	3132689	Symbol	Q_PARENTS		3132535						
ANR	3132690	Symbol	this		3132535						
ANR	3132691	Symbol	false		3132535						
ANR	3132692	Symbol	whynot		3132535						
ANR	3132693	Symbol	HasParent		3132535						
ANR	3132694	Symbol	DEBUG_QUIET		3132535						
ANR	3132695	Symbol	* this		3132535						
ANR	3132696	Symbol	DAG_STRICT_3		3132535						
ANR	3132697	Symbol	Q_WAITING		3132535						
ANR	3132698	Symbol	GetJobName		3132535						
ANR	3132699	Symbol	this -> CanAddParent		3132535						
ANR	3132700	Symbol	true		3132535						
ANR	3132701	Symbol	parent -> GetJobID		3132535						
ANR	3132702	Symbol	parent -> GetJobName		3132535						
ANR	3132703	Symbol	STATUS_DONE		3132535						
ANR	3132704	Function	Job :: CanAddParent	387:0:10058:10747							
ANR	3132705	FunctionDef	"Job :: CanAddParent (Job * parent , MyString & whynot)"		3132704	0					
ANR	3132706	CompoundStatement		389:0:10114:10747	3132704	0					
ANR	3132707	IfStatement	if ( ! parent )		3132704	0					
ANR	3132708	Condition	! parent	390:5:10121:10127	3132704	0	True				
ANR	3132709	UnaryOperationExpression	! parent		3132704	0					
ANR	3132710	UnaryOperator	!		3132704	0					
ANR	3132711	Identifier	parent		3132704	1					
ANR	3132712	CompoundStatement		2:15:16:16	3132704	1					
ANR	3132713	ExpressionStatement	"whynot = ""parent == NULL"""	391:2:10135:10160	3132704	0	True				
ANR	3132714	AssignmentExpression	"whynot = ""parent == NULL"""		3132704	0		=			
ANR	3132715	Identifier	whynot		3132704	0					
ANR	3132716	PrimaryExpression	"""parent == NULL"""		3132704	1					
ANR	3132717	ReturnStatement	return false ;	392:2:10164:10176	3132704	1	True				
ANR	3132718	Identifier	false		3132704	0					
ANR	3132719	IfStatement	if ( _Status != STATUS_READY && parent -> GetStatus ( ) != STATUS_DONE )		3132704	1					
ANR	3132720	Condition	_Status != STATUS_READY && parent -> GetStatus ( ) != STATUS_DONE	401:5:10512:10572	3132704	0	True				
ANR	3132721	AndExpression	_Status != STATUS_READY && parent -> GetStatus ( ) != STATUS_DONE		3132704	0		&&			
ANR	3132722	EqualityExpression	_Status != STATUS_READY		3132704	0		!=			
ANR	3132723	Identifier	_Status		3132704	0					
ANR	3132724	Identifier	STATUS_READY		3132704	1					
ANR	3132725	EqualityExpression	parent -> GetStatus ( ) != STATUS_DONE		3132704	1		!=			
ANR	3132726	CallExpression	parent -> GetStatus ( )		3132704	0					
ANR	3132727	Callee	parent -> GetStatus		3132704	0					
ANR	3132728	PtrMemberAccess	parent -> GetStatus		3132704	0					
ANR	3132729	Identifier	parent		3132704	0					
ANR	3132730	Identifier	GetStatus		3132704	1					
ANR	3132731	ArgumentList			3132704	1					
ANR	3132732	Identifier	STATUS_DONE		3132704	1					
ANR	3132733	CompoundStatement		13:69:461:461	3132704	1					
ANR	3132734	ExpressionStatement	"whynot . sprintf ( ""%s child may not be given a new %s parent"" , this -> GetStatusName ( ) , parent -> GetStatusName ( ) )"	402:2:10580:10695	3132704	0	True				
ANR	3132735	CallExpression	"whynot . sprintf ( ""%s child may not be given a new %s parent"" , this -> GetStatusName ( ) , parent -> GetStatusName ( ) )"		3132704	0					
ANR	3132736	Callee	whynot . sprintf		3132704	0					
ANR	3132737	MemberAccess	whynot . sprintf		3132704	0					
ANR	3132738	Identifier	whynot		3132704	0					
ANR	3132739	Identifier	sprintf		3132704	1					
ANR	3132740	ArgumentList	"""%s child may not be given a new %s parent"""		3132704	1					
ANR	3132741	Argument	"""%s child may not be given a new %s parent"""		3132704	0					
ANR	3132742	PrimaryExpression	"""%s child may not be given a new %s parent"""		3132704	0					
ANR	3132743	Argument	this -> GetStatusName ( )		3132704	1					
ANR	3132744	CallExpression	this -> GetStatusName ( )		3132704	0					
ANR	3132745	Callee	this -> GetStatusName		3132704	0					
ANR	3132746	PtrMemberAccess	this -> GetStatusName		3132704	0					
ANR	3132747	Identifier	this		3132704	0					
ANR	3132748	Identifier	GetStatusName		3132704	1					
ANR	3132749	ArgumentList			3132704	1					
ANR	3132750	Argument	parent -> GetStatusName ( )		3132704	2					
ANR	3132751	CallExpression	parent -> GetStatusName ( )		3132704	0					
ANR	3132752	Callee	parent -> GetStatusName		3132704	0					
ANR	3132753	PtrMemberAccess	parent -> GetStatusName		3132704	0					
ANR	3132754	Identifier	parent		3132704	0					
ANR	3132755	Identifier	GetStatusName		3132704	1					
ANR	3132756	ArgumentList			3132704	1					
ANR	3132757	ReturnStatement	return false ;	404:2:10699:10711	3132704	1	True				
ANR	3132758	Identifier	false		3132704	0					
ANR	3132759	ExpressionStatement	"whynot = ""n/a"""	406:1:10717:10731	3132704	2	True				
ANR	3132760	AssignmentExpression	"whynot = ""n/a"""		3132704	0		=			
ANR	3132761	Identifier	whynot		3132704	0					
ANR	3132762	PrimaryExpression	"""n/a"""		3132704	1					
ANR	3132763	ReturnStatement	return true ;	407:1:10734:10745	3132704	3	True				
ANR	3132764	Identifier	true		3132704	0					
ANR	3132765	ReturnType	bool		3132704	1					
ANR	3132766	Identifier	Job :: CanAddParent		3132704	2					
ANR	3132767	ParameterList	"Job * parent , MyString & whynot"		3132704	3					
ANR	3132768	Parameter	Job * parent	388:19:10082:10092	3132704	0	True				
ANR	3132769	ParameterType	Job *		3132704	0					
ANR	3132770	Identifier	parent		3132704	1					
ANR	3132771	Parameter	MyString & whynot	388:32:10095:10110	3132704	1	True				
ANR	3132772	ParameterType	MyString &		3132704	0					
ANR	3132773	Identifier	whynot		3132704	1					
ANR	3132774	CFGEntryNode	ENTRY		3132704		True				
ANR	3132775	CFGExitNode	EXIT		3132704		True				
ANR	3132776	Symbol	parent		3132704						
ANR	3132777	Symbol	parent -> GetStatus		3132704						
ANR	3132778	Symbol	* parent		3132704						
ANR	3132779	Symbol	false		3132704						
ANR	3132780	Symbol	this		3132704						
ANR	3132781	Symbol	whynot		3132704						
ANR	3132782	Symbol	STATUS_READY		3132704						
ANR	3132783	Symbol	* this		3132704						
ANR	3132784	Symbol	parent -> GetStatusName		3132704						
ANR	3132785	Symbol	_Status		3132704						
ANR	3132786	Symbol	true		3132704						
ANR	3132787	Symbol	this -> GetStatusName		3132704						
ANR	3132788	Symbol	STATUS_DONE		3132704						
ANR	3132789	Function	Job :: AddChild	411:0:10751:11073							
ANR	3132790	FunctionDef	Job :: AddChild (Job * child)		3132789	0					
ANR	3132791	CompoundStatement		413:0:10784:11073	3132789	0					
ANR	3132792	IdentifierDeclStatement	bool success ;	414:1:10787:10799	3132789	0	True				
ANR	3132793	IdentifierDecl	success		3132789	0					
ANR	3132794	IdentifierDeclType	bool		3132789	0					
ANR	3132795	Identifier	success		3132789	1					
ANR	3132796	IdentifierDeclStatement	MyString whynot ;	415:1:10802:10817	3132789	1	True				
ANR	3132797	IdentifierDecl	whynot		3132789	0					
ANR	3132798	IdentifierDeclType	MyString		3132789	0					
ANR	3132799	Identifier	whynot		3132789	1					
ANR	3132800	ExpressionStatement	"success = AddChild ( child , whynot )"	416:1:10820:10855	3132789	2	True				
ANR	3132801	AssignmentExpression	"success = AddChild ( child , whynot )"		3132789	0		=			
ANR	3132802	Identifier	success		3132789	0					
ANR	3132803	CallExpression	"AddChild ( child , whynot )"		3132789	1					
ANR	3132804	Callee	AddChild		3132789	0					
ANR	3132805	Identifier	AddChild		3132789	0					
ANR	3132806	ArgumentList	child		3132789	1					
ANR	3132807	Argument	child		3132789	0					
ANR	3132808	Identifier	child		3132789	0					
ANR	3132809	Argument	whynot		3132789	1					
ANR	3132810	Identifier	whynot		3132789	0					
ANR	3132811	IfStatement	if ( ! success )		3132789	3					
ANR	3132812	Condition	! success	417:5:10862:10869	3132789	0	True				
ANR	3132813	UnaryOperationExpression	! success		3132789	0					
ANR	3132814	UnaryOperator	!		3132789	0					
ANR	3132815	Identifier	success		3132789	1					
ANR	3132816	CompoundStatement		5:16:88:88	3132789	1					
ANR	3132817	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""ERROR: AddChild( %s ) failed for node %s: %s\\n"" , child ? child -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"	418:2:10877:11051	3132789	0	True				
ANR	3132818	CallExpression	"debug_printf ( DEBUG_QUIET , ""ERROR: AddChild( %s ) failed for node %s: %s\\n"" , child ? child -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"		3132789	0					
ANR	3132819	Callee	debug_printf		3132789	0					
ANR	3132820	Identifier	debug_printf		3132789	0					
ANR	3132821	ArgumentList	DEBUG_QUIET		3132789	1					
ANR	3132822	Argument	DEBUG_QUIET		3132789	0					
ANR	3132823	Identifier	DEBUG_QUIET		3132789	0					
ANR	3132824	Argument	"""ERROR: AddChild( %s ) failed for node %s: %s\\n"""		3132789	1					
ANR	3132825	PrimaryExpression	"""ERROR: AddChild( %s ) failed for node %s: %s\\n"""		3132789	0					
ANR	3132826	Argument	"child ? child -> GetJobName ( ) : ""(null)"""		3132789	2					
ANR	3132827	ConditionalExpression	"child ? child -> GetJobName ( ) : ""(null)"""		3132789	0					
ANR	3132828	Condition	child		3132789	0					
ANR	3132829	Identifier	child		3132789	0					
ANR	3132830	CallExpression	child -> GetJobName ( )		3132789	1					
ANR	3132831	Callee	child -> GetJobName		3132789	0					
ANR	3132832	PtrMemberAccess	child -> GetJobName		3132789	0					
ANR	3132833	Identifier	child		3132789	0					
ANR	3132834	Identifier	GetJobName		3132789	1					
ANR	3132835	ArgumentList			3132789	1					
ANR	3132836	PrimaryExpression	"""(null)"""		3132789	2					
ANR	3132837	Argument	this -> GetJobName ( )		3132789	3					
ANR	3132838	CallExpression	this -> GetJobName ( )		3132789	0					
ANR	3132839	Callee	this -> GetJobName		3132789	0					
ANR	3132840	PtrMemberAccess	this -> GetJobName		3132789	0					
ANR	3132841	Identifier	this		3132789	0					
ANR	3132842	Identifier	GetJobName		3132789	1					
ANR	3132843	ArgumentList			3132789	1					
ANR	3132844	Argument	whynot . Value ( )		3132789	4					
ANR	3132845	CallExpression	whynot . Value ( )		3132789	0					
ANR	3132846	Callee	whynot . Value		3132789	0					
ANR	3132847	MemberAccess	whynot . Value		3132789	0					
ANR	3132848	Identifier	whynot		3132789	0					
ANR	3132849	Identifier	Value		3132789	1					
ANR	3132850	ArgumentList			3132789	1					
ANR	3132851	ReturnStatement	return success ;	423:1:11057:11071	3132789	4	True				
ANR	3132852	Identifier	success		3132789	0					
ANR	3132853	ReturnType	bool		3132789	1					
ANR	3132854	Identifier	Job :: AddChild		3132789	2					
ANR	3132855	ParameterList	Job * child		3132789	3					
ANR	3132856	Parameter	Job * child	412:15:10771:10780	3132789	0	True				
ANR	3132857	ParameterType	Job *		3132789	0					
ANR	3132858	Identifier	child		3132789	1					
ANR	3132859	CFGEntryNode	ENTRY		3132789		True				
ANR	3132860	CFGExitNode	EXIT		3132789		True				
ANR	3132861	Symbol	* this		3132789						
ANR	3132862	Symbol	* child		3132789						
ANR	3132863	Symbol	child -> GetJobName		3132789						
ANR	3132864	Symbol	success		3132789						
ANR	3132865	Symbol	this		3132789						
ANR	3132866	Symbol	whynot . Value		3132789						
ANR	3132867	Symbol	whynot		3132789						
ANR	3132868	Symbol	this -> GetJobName		3132789						
ANR	3132869	Symbol	AddChild		3132789						
ANR	3132870	Symbol	child		3132789						
ANR	3132871	Symbol	DEBUG_QUIET		3132789						
ANR	3132872	Function	Job :: AddChild	427:0:11077:11563							
ANR	3132873	FunctionDef	"Job :: AddChild (Job * child , MyString & whynot)"		3132872	0					
ANR	3132874	CompoundStatement		429:0:11128:11563	3132872	0					
ANR	3132875	IfStatement	"if ( ! this -> CanAddChild ( child , whynot ) )"		3132872	0					
ANR	3132876	Condition	"! this -> CanAddChild ( child , whynot )"	430:5:11135:11169	3132872	0	True				
ANR	3132877	UnaryOperationExpression	"! this -> CanAddChild ( child , whynot )"		3132872	0					
ANR	3132878	UnaryOperator	!		3132872	0					
ANR	3132879	CallExpression	"this -> CanAddChild ( child , whynot )"		3132872	1					
ANR	3132880	Callee	this -> CanAddChild		3132872	0					
ANR	3132881	PtrMemberAccess	this -> CanAddChild		3132872	0					
ANR	3132882	Identifier	this		3132872	0					
ANR	3132883	Identifier	CanAddChild		3132872	1					
ANR	3132884	ArgumentList	child		3132872	1					
ANR	3132885	Argument	child		3132872	0					
ANR	3132886	Identifier	child		3132872	0					
ANR	3132887	Argument	whynot		3132872	1					
ANR	3132888	Identifier	whynot		3132872	0					
ANR	3132889	CompoundStatement		2:43:44:44	3132872	1					
ANR	3132890	ReturnStatement	return false ;	431:2:11177:11189	3132872	0	True				
ANR	3132891	Identifier	false		3132872	0					
ANR	3132892	IfStatement	if ( HasChild ( child ) )		3132872	1					
ANR	3132893	Condition	HasChild ( child )	434:5:11200:11216	3132872	0	True				
ANR	3132894	CallExpression	HasChild ( child )		3132872	0					
ANR	3132895	Callee	HasChild		3132872	0					
ANR	3132896	Identifier	HasChild		3132872	0					
ANR	3132897	ArgumentList	child		3132872	1					
ANR	3132898	Argument	child		3132872	0					
ANR	3132899	Identifier	child		3132872	0					
ANR	3132900	CompoundStatement		6:25:91:91	3132872	1					
ANR	3132901	ExpressionStatement	"debug_printf ( DEBUG_NORMAL , ""Warning: parent %s already has child %s\\n"" , GetJobName ( ) , child -> GetJobName ( ) )"	435:2:11224:11342	3132872	0	True				
ANR	3132902	CallExpression	"debug_printf ( DEBUG_NORMAL , ""Warning: parent %s already has child %s\\n"" , GetJobName ( ) , child -> GetJobName ( ) )"		3132872	0					
ANR	3132903	Callee	debug_printf		3132872	0					
ANR	3132904	Identifier	debug_printf		3132872	0					
ANR	3132905	ArgumentList	DEBUG_NORMAL		3132872	1					
ANR	3132906	Argument	DEBUG_NORMAL		3132872	0					
ANR	3132907	Identifier	DEBUG_NORMAL		3132872	0					
ANR	3132908	Argument	"""Warning: parent %s already has child %s\\n"""		3132872	1					
ANR	3132909	PrimaryExpression	"""Warning: parent %s already has child %s\\n"""		3132872	0					
ANR	3132910	Argument	GetJobName ( )		3132872	2					
ANR	3132911	CallExpression	GetJobName ( )		3132872	0					
ANR	3132912	Callee	GetJobName		3132872	0					
ANR	3132913	Identifier	GetJobName		3132872	0					
ANR	3132914	ArgumentList			3132872	1					
ANR	3132915	Argument	child -> GetJobName ( )		3132872	3					
ANR	3132916	CallExpression	child -> GetJobName ( )		3132872	0					
ANR	3132917	Callee	child -> GetJobName		3132872	0					
ANR	3132918	PtrMemberAccess	child -> GetJobName		3132872	0					
ANR	3132919	Identifier	child		3132872	0					
ANR	3132920	Identifier	GetJobName		3132872	1					
ANR	3132921	ArgumentList			3132872	1					
ANR	3132922	ExpressionStatement	check_warning_strictness ( DAG_STRICT_3 )	438:2:11346:11386	3132872	1	True				
ANR	3132923	CallExpression	check_warning_strictness ( DAG_STRICT_3 )		3132872	0					
ANR	3132924	Callee	check_warning_strictness		3132872	0					
ANR	3132925	Identifier	check_warning_strictness		3132872	0					
ANR	3132926	ArgumentList	DAG_STRICT_3		3132872	1					
ANR	3132927	Argument	DAG_STRICT_3		3132872	0					
ANR	3132928	Identifier	DAG_STRICT_3		3132872	0					
ANR	3132929	ReturnStatement	return true ;	439:2:11390:11401	3132872	2	True				
ANR	3132930	Identifier	true		3132872	0					
ANR	3132931	IfStatement	"if ( ! Add ( Q_CHILDREN , child -> GetJobID ( ) ) )"		3132872	2					
ANR	3132932	Condition	"! Add ( Q_CHILDREN , child -> GetJobID ( ) )"	442:5:11412:11448	3132872	0	True				
ANR	3132933	UnaryOperationExpression	"! Add ( Q_CHILDREN , child -> GetJobID ( ) )"		3132872	0					
ANR	3132934	UnaryOperator	!		3132872	0					
ANR	3132935	CallExpression	"Add ( Q_CHILDREN , child -> GetJobID ( ) )"		3132872	1					
ANR	3132936	Callee	Add		3132872	0					
ANR	3132937	Identifier	Add		3132872	0					
ANR	3132938	ArgumentList	Q_CHILDREN		3132872	1					
ANR	3132939	Argument	Q_CHILDREN		3132872	0					
ANR	3132940	Identifier	Q_CHILDREN		3132872	0					
ANR	3132941	Argument	child -> GetJobID ( )		3132872	1					
ANR	3132942	CallExpression	child -> GetJobID ( )		3132872	0					
ANR	3132943	Callee	child -> GetJobID		3132872	0					
ANR	3132944	PtrMemberAccess	child -> GetJobID		3132872	0					
ANR	3132945	Identifier	child		3132872	0					
ANR	3132946	Identifier	GetJobID		3132872	1					
ANR	3132947	ArgumentList			3132872	1					
ANR	3132948	CompoundStatement		14:45:323:323	3132872	1					
ANR	3132949	ExpressionStatement	"whynot = ""unknown error appending to CHILDREN queue"""	443:2:11456:11508	3132872	0	True				
ANR	3132950	AssignmentExpression	"whynot = ""unknown error appending to CHILDREN queue"""		3132872	0		=			
ANR	3132951	Identifier	whynot		3132872	0					
ANR	3132952	PrimaryExpression	"""unknown error appending to CHILDREN queue"""		3132872	1					
ANR	3132953	ReturnStatement	return false ;	444:2:11512:11524	3132872	1	True				
ANR	3132954	Identifier	false		3132872	0					
ANR	3132955	ExpressionStatement	"whynot = ""n/a"""	446:1:11530:11544	3132872	3	True				
ANR	3132956	AssignmentExpression	"whynot = ""n/a"""		3132872	0		=			
ANR	3132957	Identifier	whynot		3132872	0					
ANR	3132958	PrimaryExpression	"""n/a"""		3132872	1					
ANR	3132959	ReturnStatement	return true ;	447:4:11550:11561	3132872	4	True				
ANR	3132960	Identifier	true		3132872	0					
ANR	3132961	ReturnType	bool		3132872	1					
ANR	3132962	Identifier	Job :: AddChild		3132872	2					
ANR	3132963	ParameterList	"Job * child , MyString & whynot"		3132872	3					
ANR	3132964	Parameter	Job * child	428:15:11097:11106	3132872	0	True				
ANR	3132965	ParameterType	Job *		3132872	0					
ANR	3132966	Identifier	child		3132872	1					
ANR	3132967	Parameter	MyString & whynot	428:27:11109:11124	3132872	1	True				
ANR	3132968	ParameterType	MyString &		3132872	0					
ANR	3132969	Identifier	whynot		3132872	1					
ANR	3132970	CFGEntryNode	ENTRY		3132872		True				
ANR	3132971	CFGExitNode	EXIT		3132872		True				
ANR	3132972	Symbol	Add		3132872						
ANR	3132973	Symbol	this -> CanAddChild		3132872						
ANR	3132974	Symbol	* child		3132872						
ANR	3132975	Symbol	child -> GetJobName		3132872						
ANR	3132976	Symbol	this		3132872						
ANR	3132977	Symbol	false		3132872						
ANR	3132978	Symbol	whynot		3132872						
ANR	3132979	Symbol	DEBUG_NORMAL		3132872						
ANR	3132980	Symbol	HasChild		3132872						
ANR	3132981	Symbol	* this		3132872						
ANR	3132982	Symbol	DAG_STRICT_3		3132872						
ANR	3132983	Symbol	GetJobName		3132872						
ANR	3132984	Symbol	true		3132872						
ANR	3132985	Symbol	child		3132872						
ANR	3132986	Symbol	Q_CHILDREN		3132872						
ANR	3132987	Symbol	child -> GetJobID		3132872						
ANR	3132988	Function	Job :: CanAddChild	451:0:11567:11718							
ANR	3132989	FunctionDef	"Job :: CanAddChild (Job * child , MyString & whynot)"		3132988	0					
ANR	3132990	CompoundStatement		453:0:11621:11718	3132988	0					
ANR	3132991	IfStatement	if ( ! child )		3132988	0					
ANR	3132992	Condition	! child	454:5:11628:11633	3132988	0	True				
ANR	3132993	UnaryOperationExpression	! child		3132988	0					
ANR	3132994	UnaryOperator	!		3132988	0					
ANR	3132995	Identifier	child		3132988	1					
ANR	3132996	CompoundStatement		2:14:15:15	3132988	1					
ANR	3132997	ExpressionStatement	"whynot = ""child == NULL"""	455:2:11641:11665	3132988	0	True				
ANR	3132998	AssignmentExpression	"whynot = ""child == NULL"""		3132988	0		=			
ANR	3132999	Identifier	whynot		3132988	0					
ANR	3133000	PrimaryExpression	"""child == NULL"""		3132988	1					
ANR	3133001	ReturnStatement	return false ;	456:2:11669:11681	3132988	1	True				
ANR	3133002	Identifier	false		3132988	0					
ANR	3133003	ExpressionStatement	"whynot = ""n/a"""	459:1:11688:11702	3132988	1	True				
ANR	3133004	AssignmentExpression	"whynot = ""n/a"""		3132988	0		=			
ANR	3133005	Identifier	whynot		3132988	0					
ANR	3133006	PrimaryExpression	"""n/a"""		3132988	1					
ANR	3133007	ReturnStatement	return true ;	460:1:11705:11716	3132988	2	True				
ANR	3133008	Identifier	true		3132988	0					
ANR	3133009	ReturnType	bool		3132988	1					
ANR	3133010	Identifier	Job :: CanAddChild		3132988	2					
ANR	3133011	ParameterList	"Job * child , MyString & whynot"		3132988	3					
ANR	3133012	Parameter	Job * child	452:18:11590:11599	3132988	0	True				
ANR	3133013	ParameterType	Job *		3132988	0					
ANR	3133014	Identifier	child		3132988	1					
ANR	3133015	Parameter	MyString & whynot	452:30:11602:11617	3132988	1	True				
ANR	3133016	ParameterType	MyString &		3132988	0					
ANR	3133017	Identifier	whynot		3132988	1					
ANR	3133018	CFGEntryNode	ENTRY		3132988		True				
ANR	3133019	CFGExitNode	EXIT		3132988		True				
ANR	3133020	Symbol	false		3132988						
ANR	3133021	Symbol	true		3132988						
ANR	3133022	Symbol	whynot		3132988						
ANR	3133023	Symbol	child		3132988						
ANR	3133024	Function	Job :: TerminateSuccess	464:0:11722:11791							
ANR	3133025	FunctionDef	Job :: TerminateSuccess ()		3133024	0					
ANR	3133026	CompoundStatement		466:0:11751:11791	3133024	0					
ANR	3133027	ExpressionStatement	_Status = STATUS_DONE	467:1:11754:11775	3133024	0	True				
ANR	3133028	AssignmentExpression	_Status = STATUS_DONE		3133024	0		=			
ANR	3133029	Identifier	_Status		3133024	0					
ANR	3133030	Identifier	STATUS_DONE		3133024	1					
ANR	3133031	ReturnStatement	return true ;	468:1:11778:11789	3133024	1	True				
ANR	3133032	Identifier	true		3133024	0					
ANR	3133033	ReturnType	bool		3133024	1					
ANR	3133034	Identifier	Job :: TerminateSuccess		3133024	2					
ANR	3133035	ParameterList			3133024	3					
ANR	3133036	CFGEntryNode	ENTRY		3133024		True				
ANR	3133037	CFGExitNode	EXIT		3133024		True				
ANR	3133038	Symbol	_Status		3133024						
ANR	3133039	Symbol	true		3133024						
ANR	3133040	Symbol	STATUS_DONE		3133024						
ANR	3133041	Function	Job :: TerminateFailure	471:0:11795:11865							
ANR	3133042	FunctionDef	Job :: TerminateFailure ()		3133041	0					
ANR	3133043	CompoundStatement		473:0:11824:11865	3133041	0					
ANR	3133044	ExpressionStatement	_Status = STATUS_ERROR	474:1:11827:11849	3133041	0	True				
ANR	3133045	AssignmentExpression	_Status = STATUS_ERROR		3133041	0		=			
ANR	3133046	Identifier	_Status		3133041	0					
ANR	3133047	Identifier	STATUS_ERROR		3133041	1					
ANR	3133048	ReturnStatement	return true ;	475:1:11852:11863	3133041	1	True				
ANR	3133049	Identifier	true		3133041	0					
ANR	3133050	ReturnType	bool		3133041	1					
ANR	3133051	Identifier	Job :: TerminateFailure		3133041	2					
ANR	3133052	ParameterList			3133041	3					
ANR	3133053	CFGEntryNode	ENTRY		3133041		True				
ANR	3133054	CFGExitNode	EXIT		3133041		True				
ANR	3133055	Symbol	_Status		3133041						
ANR	3133056	Symbol	true		3133041						
ANR	3133057	Symbol	STATUS_ERROR		3133041						
ANR	3133058	Function	Job :: Add	478:0:11869:12166							
ANR	3133059	FunctionDef	"Job :: Add (const queue_t queue , const JobID_t jobID)"		3133058	0					
ANR	3133060	CompoundStatement		480:0:11927:12166	3133058	0					
ANR	3133061	IdentifierDeclStatement	"pair < set < JobID_t > :: iterator , bool > ret ;"	481:1:11930:11968	3133058	0	True				
ANR	3133062	IdentifierDecl	ret		3133058	0					
ANR	3133063	IdentifierDeclType	"pair < set < JobID_t > :: iterator , bool >"		3133058	0					
ANR	3133064	Identifier	ret		3133058	1					
ANR	3133065	ExpressionStatement	ret = _queues [ queue ] . insert ( jobID )	483:1:11972:12006	3133058	1	True				
ANR	3133066	AssignmentExpression	ret = _queues [ queue ] . insert ( jobID )		3133058	0		=			
ANR	3133067	Identifier	ret		3133058	0					
ANR	3133068	CallExpression	_queues [ queue ] . insert ( jobID )		3133058	1					
ANR	3133069	Callee	_queues [ queue ] . insert		3133058	0					
ANR	3133070	MemberAccess	_queues [ queue ] . insert		3133058	0					
ANR	3133071	ArrayIndexing	_queues [ queue ]		3133058	0					
ANR	3133072	Identifier	_queues		3133058	0					
ANR	3133073	Identifier	queue		3133058	1					
ANR	3133074	Identifier	insert		3133058	1					
ANR	3133075	ArgumentList	jobID		3133058	1					
ANR	3133076	Argument	jobID		3133058	0					
ANR	3133077	Identifier	jobID		3133058	0					
ANR	3133078	IfStatement	if ( ret . second == false )		3133058	2					
ANR	3133079	Condition	ret . second == false	485:5:12014:12032	3133058	0	True				
ANR	3133080	EqualityExpression	ret . second == false		3133058	0		==			
ANR	3133081	MemberAccess	ret . second		3133058	0					
ANR	3133082	Identifier	ret		3133058	0					
ANR	3133083	Identifier	second		3133058	1					
ANR	3133084	Identifier	false		3133058	1					
ANR	3133085	CompoundStatement		6:26:107:107	3133058	1					
ANR	3133086	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: can't add Job ID %d to DAG: already present!"" , jobID )"	486:2:12039:12130	3133058	0	True				
ANR	3133087	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: can't add Job ID %d to DAG: already present!"" , jobID )"		3133058	0					
ANR	3133088	Callee	dprintf		3133058	0					
ANR	3133089	Identifier	dprintf		3133058	0					
ANR	3133090	ArgumentList	D_ALWAYS		3133058	1					
ANR	3133091	Argument	D_ALWAYS		3133058	0					
ANR	3133092	Identifier	D_ALWAYS		3133058	0					
ANR	3133093	Argument	"""ERROR: can't add Job ID %d to DAG: already present!"""		3133058	1					
ANR	3133094	PrimaryExpression	"""ERROR: can't add Job ID %d to DAG: already present!"""		3133058	0					
ANR	3133095	Argument	jobID		3133058	2					
ANR	3133096	Identifier	jobID		3133058	0					
ANR	3133097	ReturnStatement	return false ;	489:2:12134:12146	3133058	1	True				
ANR	3133098	Identifier	false		3133058	0					
ANR	3133099	ReturnStatement	return true ;	492:1:12153:12164	3133058	3	True				
ANR	3133100	Identifier	true		3133058	0					
ANR	3133101	ReturnType	bool		3133058	1					
ANR	3133102	Identifier	Job :: Add		3133058	2					
ANR	3133103	ParameterList	"const queue_t queue , const JobID_t jobID"		3133058	3					
ANR	3133104	Parameter	const queue_t queue	479:10:11884:11902	3133058	0	True				
ANR	3133105	ParameterType	const queue_t		3133058	0					
ANR	3133106	Identifier	queue		3133058	1					
ANR	3133107	Parameter	const JobID_t jobID	479:31:11905:11923	3133058	1	True				
ANR	3133108	ParameterType	const JobID_t		3133058	0					
ANR	3133109	Identifier	jobID		3133058	1					
ANR	3133110	CFGEntryNode	ENTRY		3133058		True				
ANR	3133111	CFGExitNode	EXIT		3133058		True				
ANR	3133112	Symbol	ret		3133058						
ANR	3133113	Symbol	_queues [ queue ] . insert		3133058						
ANR	3133114	Symbol	jobID		3133058						
ANR	3133115	Symbol	ret . second		3133058						
ANR	3133116	Symbol	* queue		3133058						
ANR	3133117	Symbol	_queues		3133058						
ANR	3133118	Symbol	* _queues		3133058						
ANR	3133119	Symbol	false		3133058						
ANR	3133120	Symbol	D_ALWAYS		3133058						
ANR	3133121	Symbol	true		3133058						
ANR	3133122	Symbol	queue		3133058						
ANR	3133123	Function	Job :: AddPreScript	495:0:12169:12272							
ANR	3133124	FunctionDef	"Job :: AddPreScript (const char * cmd , MyString & whynot)"		3133123	0					
ANR	3133125	CompoundStatement		497:0:12229:12272	3133123	0					
ANR	3133126	ReturnStatement	"return AddScript ( false , cmd , whynot ) ;"	498:1:12232:12270	3133123	0	True				
ANR	3133127	CallExpression	"AddScript ( false , cmd , whynot )"		3133123	0					
ANR	3133128	Callee	AddScript		3133123	0					
ANR	3133129	Identifier	AddScript		3133123	0					
ANR	3133130	ArgumentList	false		3133123	1					
ANR	3133131	Argument	false		3133123	0					
ANR	3133132	Identifier	false		3133123	0					
ANR	3133133	Argument	cmd		3133123	1					
ANR	3133134	Identifier	cmd		3133123	0					
ANR	3133135	Argument	whynot		3133123	2					
ANR	3133136	Identifier	whynot		3133123	0					
ANR	3133137	ReturnType	bool		3133123	1					
ANR	3133138	Identifier	Job :: AddPreScript		3133123	2					
ANR	3133139	ParameterList	"const char * cmd , MyString & whynot"		3133123	3					
ANR	3133140	Parameter	const char * cmd	496:19:12193:12207	3133123	0	True				
ANR	3133141	ParameterType	const char *		3133123	0					
ANR	3133142	Identifier	cmd		3133123	1					
ANR	3133143	Parameter	MyString & whynot	496:36:12210:12225	3133123	1	True				
ANR	3133144	ParameterType	MyString &		3133123	0					
ANR	3133145	Identifier	whynot		3133123	1					
ANR	3133146	CFGEntryNode	ENTRY		3133123		True				
ANR	3133147	CFGExitNode	EXIT		3133123		True				
ANR	3133148	Symbol	AddScript		3133123						
ANR	3133149	Symbol	false		3133123						
ANR	3133150	Symbol	whynot		3133123						
ANR	3133151	Symbol	cmd		3133123						
ANR	3133152	Function	Job :: AddPostScript	501:0:12275:12378							
ANR	3133153	FunctionDef	"Job :: AddPostScript (const char * cmd , MyString & whynot)"		3133152	0					
ANR	3133154	CompoundStatement		503:0:12336:12378	3133152	0					
ANR	3133155	ReturnStatement	"return AddScript ( true , cmd , whynot ) ;"	504:1:12339:12376	3133152	0	True				
ANR	3133156	CallExpression	"AddScript ( true , cmd , whynot )"		3133152	0					
ANR	3133157	Callee	AddScript		3133152	0					
ANR	3133158	Identifier	AddScript		3133152	0					
ANR	3133159	ArgumentList	true		3133152	1					
ANR	3133160	Argument	true		3133152	0					
ANR	3133161	Identifier	true		3133152	0					
ANR	3133162	Argument	cmd		3133152	1					
ANR	3133163	Identifier	cmd		3133152	0					
ANR	3133164	Argument	whynot		3133152	2					
ANR	3133165	Identifier	whynot		3133152	0					
ANR	3133166	ReturnType	bool		3133152	1					
ANR	3133167	Identifier	Job :: AddPostScript		3133152	2					
ANR	3133168	ParameterList	"const char * cmd , MyString & whynot"		3133152	3					
ANR	3133169	Parameter	const char * cmd	502:20:12300:12314	3133152	0	True				
ANR	3133170	ParameterType	const char *		3133152	0					
ANR	3133171	Identifier	cmd		3133152	1					
ANR	3133172	Parameter	MyString & whynot	502:37:12317:12332	3133152	1	True				
ANR	3133173	ParameterType	MyString &		3133152	0					
ANR	3133174	Identifier	whynot		3133152	1					
ANR	3133175	CFGEntryNode	ENTRY		3133152		True				
ANR	3133176	CFGExitNode	EXIT		3133152		True				
ANR	3133177	Symbol	AddScript		3133152						
ANR	3133178	Symbol	true		3133152						
ANR	3133179	Symbol	whynot		3133152						
ANR	3133180	Symbol	cmd		3133152						
ANR	3133181	Function	Job :: AddScript	507:0:12381:13088							
ANR	3133182	FunctionDef	"Job :: AddScript (bool post , const char * cmd , MyString & whynot)"		3133181	0					
ANR	3133183	CompoundStatement		509:0:12449:13088	3133181	0					
ANR	3133184	IfStatement	"if ( ! cmd || strcmp ( cmd , """" ) == 0 )"		3133181	0					
ANR	3133185	Condition	"! cmd || strcmp ( cmd , """" ) == 0"	510:5:12456:12485	3133181	0	True				
ANR	3133186	OrExpression	"! cmd || strcmp ( cmd , """" ) == 0"		3133181	0		||			
ANR	3133187	UnaryOperationExpression	! cmd		3133181	0					
ANR	3133188	UnaryOperator	!		3133181	0					
ANR	3133189	Identifier	cmd		3133181	1					
ANR	3133190	EqualityExpression	"strcmp ( cmd , """" ) == 0"		3133181	1		==			
ANR	3133191	CallExpression	"strcmp ( cmd , """" )"		3133181	0					
ANR	3133192	Callee	strcmp		3133181	0					
ANR	3133193	Identifier	strcmp		3133181	0					
ANR	3133194	ArgumentList	cmd		3133181	1					
ANR	3133195	Argument	cmd		3133181	0					
ANR	3133196	Identifier	cmd		3133181	0					
ANR	3133197	Argument	""""""		3133181	1					
ANR	3133198	PrimaryExpression	""""""		3133181	0					
ANR	3133199	PrimaryExpression	0		3133181	1					
ANR	3133200	CompoundStatement		2:38:39:39	3133181	1					
ANR	3133201	ExpressionStatement	"whynot = ""missing script name"""	511:2:12493:12523	3133181	0	True				
ANR	3133202	AssignmentExpression	"whynot = ""missing script name"""		3133181	0		=			
ANR	3133203	Identifier	whynot		3133181	0					
ANR	3133204	PrimaryExpression	"""missing script name"""		3133181	1					
ANR	3133205	ReturnStatement	return false ;	512:2:12527:12539	3133181	1	True				
ANR	3133206	Identifier	false		3133181	0					
ANR	3133207	IfStatement	if ( post ? _scriptPost : _scriptPre )		3133181	1					
ANR	3133208	Condition	post ? _scriptPost : _scriptPre	514:5:12549:12579	3133181	0	True				
ANR	3133209	ConditionalExpression	post ? _scriptPost : _scriptPre		3133181	0					
ANR	3133210	Condition	post		3133181	0					
ANR	3133211	Identifier	post		3133181	0					
ANR	3133212	Identifier	_scriptPost		3133181	1					
ANR	3133213	Identifier	_scriptPre		3133181	2					
ANR	3133214	CompoundStatement		6:39:133:133	3133181	1					
ANR	3133215	ExpressionStatement	"whynot . sprintf ( ""%s script already assigned (%s)"" , post ? ""POST"" : ""PRE"" , GetPreScriptName ( ) )"	515:2:12587:12687	3133181	0	True				
ANR	3133216	CallExpression	"whynot . sprintf ( ""%s script already assigned (%s)"" , post ? ""POST"" : ""PRE"" , GetPreScriptName ( ) )"		3133181	0					
ANR	3133217	Callee	whynot . sprintf		3133181	0					
ANR	3133218	MemberAccess	whynot . sprintf		3133181	0					
ANR	3133219	Identifier	whynot		3133181	0					
ANR	3133220	Identifier	sprintf		3133181	1					
ANR	3133221	ArgumentList	"""%s script already assigned (%s)"""		3133181	1					
ANR	3133222	Argument	"""%s script already assigned (%s)"""		3133181	0					
ANR	3133223	PrimaryExpression	"""%s script already assigned (%s)"""		3133181	0					
ANR	3133224	Argument	"post ? ""POST"" : ""PRE"""		3133181	1					
ANR	3133225	ConditionalExpression	"post ? ""POST"" : ""PRE"""		3133181	0					
ANR	3133226	Condition	post		3133181	0					
ANR	3133227	Identifier	post		3133181	0					
ANR	3133228	PrimaryExpression	"""POST"""		3133181	1					
ANR	3133229	PrimaryExpression	"""PRE"""		3133181	2					
ANR	3133230	Argument	GetPreScriptName ( )		3133181	2					
ANR	3133231	CallExpression	GetPreScriptName ( )		3133181	0					
ANR	3133232	Callee	GetPreScriptName		3133181	0					
ANR	3133233	Identifier	GetPreScriptName		3133181	0					
ANR	3133234	ArgumentList			3133181	1					
ANR	3133235	ReturnStatement	return false ;	517:2:12691:12703	3133181	1	True				
ANR	3133236	Identifier	false		3133181	0					
ANR	3133237	IdentifierDeclStatement	"Script * script = new Script ( post , cmd , this ) ;"	519:1:12709:12755	3133181	2	True				
ANR	3133238	IdentifierDecl	"* script = new Script ( post , cmd , this )"		3133181	0					
ANR	3133239	IdentifierDeclType	Script *		3133181	0					
ANR	3133240	Identifier	script		3133181	1					
ANR	3133241	AssignmentExpression	"* script = new Script ( post , cmd , this )"		3133181	2		=			
ANR	3133242	Identifier	script		3133181	0					
ANR	3133243	Expression	"post , cmd , this"		3133181	1					
ANR	3133244	Identifier	post		3133181	0					
ANR	3133245	Expression	"cmd , this"		3133181	1					
ANR	3133246	Identifier	cmd		3133181	0					
ANR	3133247	Identifier	this		3133181	1					
ANR	3133248	IfStatement	if ( ! script )		3133181	3					
ANR	3133249	Condition	! script	520:5:12762:12768	3133181	0	True				
ANR	3133250	UnaryOperationExpression	! script		3133181	0					
ANR	3133251	UnaryOperator	!		3133181	0					
ANR	3133252	Identifier	script		3133181	1					
ANR	3133253	CompoundStatement		12:15:322:322	3133181	1					
ANR	3133254	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: out of memory!\\n"" )"	521:2:12776:12822	3133181	0	True				
ANR	3133255	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: out of memory!\\n"" )"		3133181	0					
ANR	3133256	Callee	dprintf		3133181	0					
ANR	3133257	Identifier	dprintf		3133181	0					
ANR	3133258	ArgumentList	D_ALWAYS		3133181	1					
ANR	3133259	Argument	D_ALWAYS		3133181	0					
ANR	3133260	Identifier	D_ALWAYS		3133181	0					
ANR	3133261	Argument	"""ERROR: out of memory!\\n"""		3133181	1					
ANR	3133262	PrimaryExpression	"""ERROR: out of memory!\\n"""		3133181	0					
ANR	3133263	ExpressionStatement	"whynot = ""out of memory!"""	524:2:12936:12961	3133181	1	True				
ANR	3133264	AssignmentExpression	"whynot = ""out of memory!"""		3133181	0		=			
ANR	3133265	Identifier	whynot		3133181	0					
ANR	3133266	PrimaryExpression	"""out of memory!"""		3133181	1					
ANR	3133267	ReturnStatement	return false ;	525:2:12965:12977	3133181	2	True				
ANR	3133268	Identifier	false		3133181	0					
ANR	3133269	IfStatement	if ( post )		3133181	4					
ANR	3133270	Condition	post	527:5:12987:12990	3133181	0	True				
ANR	3133271	Identifier	post		3133181	0					
ANR	3133272	CompoundStatement		19:12:544:544	3133181	1					
ANR	3133273	ExpressionStatement	_scriptPost = script	528:2:12998:13018	3133181	0	True				
ANR	3133274	AssignmentExpression	_scriptPost = script		3133181	0		=			
ANR	3133275	Identifier	_scriptPost		3133181	0					
ANR	3133276	Identifier	script		3133181	1					
ANR	3133277	ElseStatement	else		3133181	0					
ANR	3133278	CompoundStatement		22:6:579:579	3133181	0					
ANR	3133279	ExpressionStatement	_scriptPre = script	531:2:13033:13052	3133181	0	True				
ANR	3133280	AssignmentExpression	_scriptPre = script		3133181	0		=			
ANR	3133281	Identifier	_scriptPre		3133181	0					
ANR	3133282	Identifier	script		3133181	1					
ANR	3133283	ExpressionStatement	"whynot = ""n/a"""	533:1:13058:13072	3133181	5	True				
ANR	3133284	AssignmentExpression	"whynot = ""n/a"""		3133181	0		=			
ANR	3133285	Identifier	whynot		3133181	0					
ANR	3133286	PrimaryExpression	"""n/a"""		3133181	1					
ANR	3133287	ReturnStatement	return true ;	534:1:13075:13086	3133181	6	True				
ANR	3133288	Identifier	true		3133181	0					
ANR	3133289	ReturnType	bool		3133181	1					
ANR	3133290	Identifier	Job :: AddScript		3133181	2					
ANR	3133291	ParameterList	"bool post , const char * cmd , MyString & whynot"		3133181	3					
ANR	3133292	Parameter	bool post	508:16:12402:12410	3133181	0	True				
ANR	3133293	ParameterType	bool		3133181	0					
ANR	3133294	Identifier	post		3133181	1					
ANR	3133295	Parameter	const char * cmd	508:27:12413:12427	3133181	1	True				
ANR	3133296	ParameterType	const char *		3133181	0					
ANR	3133297	Identifier	cmd		3133181	1					
ANR	3133298	Parameter	MyString & whynot	508:44:12430:12445	3133181	2	True				
ANR	3133299	ParameterType	MyString &		3133181	0					
ANR	3133300	Identifier	whynot		3133181	1					
ANR	3133301	CFGEntryNode	ENTRY		3133181		True				
ANR	3133302	CFGExitNode	EXIT		3133181		True				
ANR	3133303	Symbol	strcmp		3133181						
ANR	3133304	Symbol	post		3133181						
ANR	3133305	Symbol	_scriptPost		3133181						
ANR	3133306	Symbol	false		3133181						
ANR	3133307	Symbol	this		3133181						
ANR	3133308	Symbol	D_ALWAYS		3133181						
ANR	3133309	Symbol	true		3133181						
ANR	3133310	Symbol	whynot		3133181						
ANR	3133311	Symbol	cmd		3133181						
ANR	3133312	Symbol	GetPreScriptName		3133181						
ANR	3133313	Symbol	script		3133181						
ANR	3133314	Symbol	_scriptPre		3133181						
ANR	3133315	Function	Job :: AddPreSkip	537:0:13091:13628							
ANR	3133316	FunctionDef	"Job :: AddPreSkip (int exitCode , MyString & whynot)"		3133315	0					
ANR	3133317	CompoundStatement		539:0:13146:13628	3133315	0					
ANR	3133318	IfStatement	if ( exitCode < PRE_SKIP_MIN || exitCode > PRE_SKIP_MAX )		3133315	0					
ANR	3133319	Condition	exitCode < PRE_SKIP_MIN || exitCode > PRE_SKIP_MAX	540:5:13153:13202	3133315	0	True				
ANR	3133320	OrExpression	exitCode < PRE_SKIP_MIN || exitCode > PRE_SKIP_MAX		3133315	0		||			
ANR	3133321	RelationalExpression	exitCode < PRE_SKIP_MIN		3133315	0		<			
ANR	3133322	Identifier	exitCode		3133315	0					
ANR	3133323	Identifier	PRE_SKIP_MIN		3133315	1					
ANR	3133324	RelationalExpression	exitCode > PRE_SKIP_MAX		3133315	1		>			
ANR	3133325	Identifier	exitCode		3133315	0					
ANR	3133326	Identifier	PRE_SKIP_MAX		3133315	1					
ANR	3133327	CompoundStatement		2:58:59:59	3133315	1					
ANR	3133328	ExpressionStatement	"whynot . sprintf ( ""PRE_SKIP exit code must be between %d and %d\\n"" , PRE_SKIP_MIN , PRE_SKIP_MAX )"	541:2:13210:13307	3133315	0	True				
ANR	3133329	CallExpression	"whynot . sprintf ( ""PRE_SKIP exit code must be between %d and %d\\n"" , PRE_SKIP_MIN , PRE_SKIP_MAX )"		3133315	0					
ANR	3133330	Callee	whynot . sprintf		3133315	0					
ANR	3133331	MemberAccess	whynot . sprintf		3133315	0					
ANR	3133332	Identifier	whynot		3133315	0					
ANR	3133333	Identifier	sprintf		3133315	1					
ANR	3133334	ArgumentList	"""PRE_SKIP exit code must be between %d and %d\\n"""		3133315	1					
ANR	3133335	Argument	"""PRE_SKIP exit code must be between %d and %d\\n"""		3133315	0					
ANR	3133336	PrimaryExpression	"""PRE_SKIP exit code must be between %d and %d\\n"""		3133315	0					
ANR	3133337	Argument	PRE_SKIP_MIN		3133315	1					
ANR	3133338	Identifier	PRE_SKIP_MIN		3133315	0					
ANR	3133339	Argument	PRE_SKIP_MAX		3133315	2					
ANR	3133340	Identifier	PRE_SKIP_MAX		3133315	0					
ANR	3133341	ReturnStatement	return false ;	543:2:13311:13323	3133315	1	True				
ANR	3133342	Identifier	false		3133315	0					
ANR	3133343	IfStatement	if ( exitCode == 0 )		3133315	1					
ANR	3133344	Condition	exitCode == 0	546:5:13334:13346	3133315	0	True				
ANR	3133345	EqualityExpression	exitCode == 0		3133315	0		==			
ANR	3133346	Identifier	exitCode		3133315	0					
ANR	3133347	PrimaryExpression	0		3133315	1					
ANR	3133348	CompoundStatement		8:21:203:203	3133315	1					
ANR	3133349	Statement	debug_printf	547:2:13354:13365	3133315	0	True				
ANR	3133350	Statement	(	547:14:13366:13366	3133315	1	True				
ANR	3133351	Statement	DEBUG_NORMAL	547:16:13368:13379	3133315	2	True				
ANR	3133352	Statement	","	547:28:13380:13380	3133315	3	True				
ANR	3133353	Statement	"""Warning: exit code 0 for a PRE_SKIP """	547:30:13382:13419	3133315	4	True				
ANR	3133354	Statement	"""value is weird.\\n"""	548:3:13424:13442	3133315	5	True				
ANR	3133355	Statement	)	548:22:13443:13443	3133315	6	True				
ANR	3133356	ExpressionStatement		548:23:13444:13444	3133315	7	True				
ANR	3133357	IfStatement	if ( _preskip == PRE_SKIP_INVALID )		3133315	2					
ANR	3133358	Condition	_preskip == PRE_SKIP_INVALID	551:5:13455:13482	3133315	0	True				
ANR	3133359	EqualityExpression	_preskip == PRE_SKIP_INVALID		3133315	0		==			
ANR	3133360	Identifier	_preskip		3133315	0					
ANR	3133361	Identifier	PRE_SKIP_INVALID		3133315	1					
ANR	3133362	CompoundStatement		13:36:339:339	3133315	1					
ANR	3133363	ExpressionStatement	_preskip = exitCode	552:2:13490:13509	3133315	0	True				
ANR	3133364	AssignmentExpression	_preskip = exitCode		3133315	0		=			
ANR	3133365	Identifier	_preskip		3133315	0					
ANR	3133366	Identifier	exitCode		3133315	1					
ANR	3133367	ElseStatement	else		3133315	0					
ANR	3133368	CompoundStatement		15:8:373:373	3133315	0					
ANR	3133369	ExpressionStatement	"whynot = ""Two definitions of PRE_SKIP for a node.\\n"""	554:2:13524:13576	3133315	0	True				
ANR	3133370	AssignmentExpression	"whynot = ""Two definitions of PRE_SKIP for a node.\\n"""		3133315	0		=			
ANR	3133371	Identifier	whynot		3133315	0					
ANR	3133372	PrimaryExpression	"""Two definitions of PRE_SKIP for a node.\\n"""		3133315	1					
ANR	3133373	ReturnStatement	return false ;	555:2:13580:13592	3133315	1	True				
ANR	3133374	Identifier	false		3133315	0					
ANR	3133375	ExpressionStatement	"whynot = ""n/a"""	557:1:13598:13612	3133315	3	True				
ANR	3133376	AssignmentExpression	"whynot = ""n/a"""		3133315	0		=			
ANR	3133377	Identifier	whynot		3133315	0					
ANR	3133378	PrimaryExpression	"""n/a"""		3133315	1					
ANR	3133379	ReturnStatement	return true ;	558:1:13615:13626	3133315	4	True				
ANR	3133380	Identifier	true		3133315	0					
ANR	3133381	ReturnType	bool		3133315	1					
ANR	3133382	Identifier	Job :: AddPreSkip		3133315	2					
ANR	3133383	ParameterList	"int exitCode , MyString & whynot"		3133315	3					
ANR	3133384	Parameter	int exitCode	538:17:13113:13124	3133315	0	True				
ANR	3133385	ParameterType	int		3133315	0					
ANR	3133386	Identifier	exitCode		3133315	1					
ANR	3133387	Parameter	MyString & whynot	538:31:13127:13142	3133315	1	True				
ANR	3133388	ParameterType	MyString &		3133315	0					
ANR	3133389	Identifier	whynot		3133315	1					
ANR	3133390	CFGEntryNode	ENTRY		3133315		True				
ANR	3133391	CFGExitNode	EXIT		3133315		True				
ANR	3133392	Symbol	PRE_SKIP_MIN		3133315						
ANR	3133393	Symbol	_preskip		3133315						
ANR	3133394	Symbol	false		3133315						
ANR	3133395	Symbol	true		3133315						
ANR	3133396	Symbol	exitCode		3133315						
ANR	3133397	Symbol	whynot		3133315						
ANR	3133398	Symbol	PRE_SKIP_MAX		3133315						
ANR	3133399	Symbol	PRE_SKIP_INVALID		3133315						
ANR	3133400	Function	Job :: IsActive	561:0:13631:13757							
ANR	3133401	FunctionDef	Job :: IsActive ()		3133400	0					
ANR	3133402	CompoundStatement		563:0:13658:13757	3133400	0					
ANR	3133403	ReturnStatement	return _Status == STATUS_PRERUN || _Status == STATUS_SUBMITTED || _Status == STATUS_POSTRUN ;	564:1:13661:13755	3133400	0	True				
ANR	3133404	OrExpression	_Status == STATUS_PRERUN || _Status == STATUS_SUBMITTED || _Status == STATUS_POSTRUN		3133400	0		||			
ANR	3133405	EqualityExpression	_Status == STATUS_PRERUN		3133400	0		==			
ANR	3133406	Identifier	_Status		3133400	0					
ANR	3133407	Identifier	STATUS_PRERUN		3133400	1					
ANR	3133408	OrExpression	_Status == STATUS_SUBMITTED || _Status == STATUS_POSTRUN		3133400	1		||			
ANR	3133409	EqualityExpression	_Status == STATUS_SUBMITTED		3133400	0		==			
ANR	3133410	Identifier	_Status		3133400	0					
ANR	3133411	Identifier	STATUS_SUBMITTED		3133400	1					
ANR	3133412	EqualityExpression	_Status == STATUS_POSTRUN		3133400	1		==			
ANR	3133413	Identifier	_Status		3133400	0					
ANR	3133414	Identifier	STATUS_POSTRUN		3133400	1					
ANR	3133415	ReturnType	bool		3133400	1					
ANR	3133416	Identifier	Job :: IsActive		3133400	2					
ANR	3133417	ParameterList			3133400	3					
ANR	3133418	CFGEntryNode	ENTRY		3133400		True				
ANR	3133419	CFGExitNode	EXIT		3133400		True				
ANR	3133420	Symbol	_Status		3133400						
ANR	3133421	Symbol	STATUS_SUBMITTED		3133400						
ANR	3133422	Symbol	STATUS_POSTRUN		3133400						
ANR	3133423	Symbol	STATUS_PRERUN		3133400						
ANR	3133424	Function	Job :: GetStatusName	568:0:13760:13865							
ANR	3133425	FunctionDef	Job :: GetStatusName ()		3133424	0					
ANR	3133426	CompoundStatement		570:0:13799:13865	3133424	0					
ANR	3133427	ReturnStatement	return status_t_names [ _Status ] ;	572:1:13833:13863	3133424	0	True				
ANR	3133428	ArrayIndexing	status_t_names [ _Status ]		3133424	0					
ANR	3133429	Identifier	status_t_names		3133424	0					
ANR	3133430	Identifier	_Status		3133424	1					
ANR	3133431	ReturnType	const char *		3133424	1					
ANR	3133432	Identifier	Job :: GetStatusName		3133424	2					
ANR	3133433	ParameterList			3133424	3					
ANR	3133434	CFGEntryNode	ENTRY		3133424		True				
ANR	3133435	CFGExitNode	EXIT		3133424		True				
ANR	3133436	Symbol	* status_t_names		3133424						
ANR	3133437	Symbol	_Status		3133424						
ANR	3133438	Symbol	* _Status		3133424						
ANR	3133439	Symbol	status_t_names		3133424						
ANR	3133440	Function	Job :: HasChild	576:0:13869:14121							
ANR	3133441	FunctionDef	Job :: HasChild (Job * child)		3133440	0					
ANR	3133442	CompoundStatement		577:28:13902:14121	3133440	0					
ANR	3133443	IdentifierDeclStatement	JobID_t cid ;	578:1:13905:13916	3133440	0	True				
ANR	3133444	IdentifierDecl	cid		3133440	0					
ANR	3133445	IdentifierDeclType	JobID_t		3133440	0					
ANR	3133446	Identifier	cid		3133440	1					
ANR	3133447	IdentifierDeclStatement	set < JobID_t > :: iterator it ;	579:1:13919:13944	3133440	1	True				
ANR	3133448	IdentifierDecl	it		3133440	0					
ANR	3133449	IdentifierDeclType	set < JobID_t > :: iterator		3133440	0					
ANR	3133450	Identifier	it		3133440	1					
ANR	3133451	IfStatement	if ( ! child )		3133440	2					
ANR	3133452	Condition	! child	581:5:13952:13957	3133440	0	True				
ANR	3133453	UnaryOperationExpression	! child		3133440	0					
ANR	3133454	UnaryOperator	!		3133440	0					
ANR	3133455	Identifier	child		3133440	1					
ANR	3133456	CompoundStatement		5:14:58:58	3133440	1					
ANR	3133457	ReturnStatement	return false ;	582:2:13965:13977	3133440	0	True				
ANR	3133458	Identifier	false		3133440	0					
ANR	3133459	ExpressionStatement	cid = child -> GetJobID ( )	585:1:13984:14007	3133440	3	True				
ANR	3133460	AssignmentExpression	cid = child -> GetJobID ( )		3133440	0		=			
ANR	3133461	Identifier	cid		3133440	0					
ANR	3133462	CallExpression	child -> GetJobID ( )		3133440	1					
ANR	3133463	Callee	child -> GetJobID		3133440	0					
ANR	3133464	PtrMemberAccess	child -> GetJobID		3133440	0					
ANR	3133465	Identifier	child		3133440	0					
ANR	3133466	Identifier	GetJobID		3133440	1					
ANR	3133467	ArgumentList			3133440	1					
ANR	3133468	ExpressionStatement	it = _queues [ Q_CHILDREN ] . find ( cid )	586:1:14010:14044	3133440	4	True				
ANR	3133469	AssignmentExpression	it = _queues [ Q_CHILDREN ] . find ( cid )		3133440	0		=			
ANR	3133470	Identifier	it		3133440	0					
ANR	3133471	CallExpression	_queues [ Q_CHILDREN ] . find ( cid )		3133440	1					
ANR	3133472	Callee	_queues [ Q_CHILDREN ] . find		3133440	0					
ANR	3133473	MemberAccess	_queues [ Q_CHILDREN ] . find		3133440	0					
ANR	3133474	ArrayIndexing	_queues [ Q_CHILDREN ]		3133440	0					
ANR	3133475	Identifier	_queues		3133440	0					
ANR	3133476	Identifier	Q_CHILDREN		3133440	1					
ANR	3133477	Identifier	find		3133440	1					
ANR	3133478	ArgumentList	cid		3133440	1					
ANR	3133479	Argument	cid		3133440	0					
ANR	3133480	Identifier	cid		3133440	0					
ANR	3133481	IfStatement	if ( it == _queues [ Q_CHILDREN ] . end ( ) )		3133440	5					
ANR	3133482	Condition	it == _queues [ Q_CHILDREN ] . end ( )	588:5:14052:14082	3133440	0	True				
ANR	3133483	EqualityExpression	it == _queues [ Q_CHILDREN ] . end ( )		3133440	0		==			
ANR	3133484	Identifier	it		3133440	0					
ANR	3133485	CallExpression	_queues [ Q_CHILDREN ] . end ( )		3133440	1					
ANR	3133486	Callee	_queues [ Q_CHILDREN ] . end		3133440	0					
ANR	3133487	MemberAccess	_queues [ Q_CHILDREN ] . end		3133440	0					
ANR	3133488	ArrayIndexing	_queues [ Q_CHILDREN ]		3133440	0					
ANR	3133489	Identifier	_queues		3133440	0					
ANR	3133490	Identifier	Q_CHILDREN		3133440	1					
ANR	3133491	Identifier	end		3133440	1					
ANR	3133492	ArgumentList			3133440	1					
ANR	3133493	CompoundStatement		12:38:182:182	3133440	1					
ANR	3133494	ReturnStatement	return false ;	589:2:14089:14101	3133440	0	True				
ANR	3133495	Identifier	false		3133440	0					
ANR	3133496	ReturnStatement	return true ;	592:1:14108:14119	3133440	6	True				
ANR	3133497	Identifier	true		3133440	0					
ANR	3133498	ReturnType	bool		3133440	1					
ANR	3133499	Identifier	Job :: HasChild		3133440	2					
ANR	3133500	ParameterList	Job * child		3133440	3					
ANR	3133501	Parameter	Job * child	577:15:13889:13898	3133440	0	True				
ANR	3133502	ParameterType	Job *		3133440	0					
ANR	3133503	Identifier	child		3133440	1					
ANR	3133504	CFGEntryNode	ENTRY		3133440		True				
ANR	3133505	CFGExitNode	EXIT		3133440		True				
ANR	3133506	Symbol	_queues [ Q_CHILDREN ] . find		3133440						
ANR	3133507	Symbol	* child		3133440						
ANR	3133508	Symbol	_queues [ Q_CHILDREN ] . end		3133440						
ANR	3133509	Symbol	_queues		3133440						
ANR	3133510	Symbol	false		3133440						
ANR	3133511	Symbol	* _queues		3133440						
ANR	3133512	Symbol	it		3133440						
ANR	3133513	Symbol	* Q_CHILDREN		3133440						
ANR	3133514	Symbol	true		3133440						
ANR	3133515	Symbol	child		3133440						
ANR	3133516	Symbol	cid		3133440						
ANR	3133517	Symbol	child -> GetJobID		3133440						
ANR	3133518	Symbol	Q_CHILDREN		3133440						
ANR	3133519	Function	Job :: HasParent	595:0:14124:14378							
ANR	3133520	FunctionDef	Job :: HasParent (Job * parent)		3133519	0					
ANR	3133521	CompoundStatement		596:30:14159:14378	3133519	0					
ANR	3133522	IdentifierDeclStatement	JobID_t pid ;	597:1:14162:14173	3133519	0	True				
ANR	3133523	IdentifierDecl	pid		3133519	0					
ANR	3133524	IdentifierDeclType	JobID_t		3133519	0					
ANR	3133525	Identifier	pid		3133519	1					
ANR	3133526	IdentifierDeclStatement	set < JobID_t > :: iterator it ;	598:1:14176:14201	3133519	1	True				
ANR	3133527	IdentifierDecl	it		3133519	0					
ANR	3133528	IdentifierDeclType	set < JobID_t > :: iterator		3133519	0					
ANR	3133529	Identifier	it		3133519	1					
ANR	3133530	IfStatement	if ( ! parent )		3133519	2					
ANR	3133531	Condition	! parent	600:5:14209:14215	3133519	0	True				
ANR	3133532	UnaryOperationExpression	! parent		3133519	0					
ANR	3133533	UnaryOperator	!		3133519	0					
ANR	3133534	Identifier	parent		3133519	1					
ANR	3133535	CompoundStatement		5:15:59:59	3133519	1					
ANR	3133536	ReturnStatement	return false ;	601:2:14223:14235	3133519	0	True				
ANR	3133537	Identifier	false		3133519	0					
ANR	3133538	ExpressionStatement	pid = parent -> GetJobID ( )	604:1:14242:14266	3133519	3	True				
ANR	3133539	AssignmentExpression	pid = parent -> GetJobID ( )		3133519	0		=			
ANR	3133540	Identifier	pid		3133519	0					
ANR	3133541	CallExpression	parent -> GetJobID ( )		3133519	1					
ANR	3133542	Callee	parent -> GetJobID		3133519	0					
ANR	3133543	PtrMemberAccess	parent -> GetJobID		3133519	0					
ANR	3133544	Identifier	parent		3133519	0					
ANR	3133545	Identifier	GetJobID		3133519	1					
ANR	3133546	ArgumentList			3133519	1					
ANR	3133547	ExpressionStatement	it = _queues [ Q_PARENTS ] . find ( pid )	605:1:14269:14302	3133519	4	True				
ANR	3133548	AssignmentExpression	it = _queues [ Q_PARENTS ] . find ( pid )		3133519	0		=			
ANR	3133549	Identifier	it		3133519	0					
ANR	3133550	CallExpression	_queues [ Q_PARENTS ] . find ( pid )		3133519	1					
ANR	3133551	Callee	_queues [ Q_PARENTS ] . find		3133519	0					
ANR	3133552	MemberAccess	_queues [ Q_PARENTS ] . find		3133519	0					
ANR	3133553	ArrayIndexing	_queues [ Q_PARENTS ]		3133519	0					
ANR	3133554	Identifier	_queues		3133519	0					
ANR	3133555	Identifier	Q_PARENTS		3133519	1					
ANR	3133556	Identifier	find		3133519	1					
ANR	3133557	ArgumentList	pid		3133519	1					
ANR	3133558	Argument	pid		3133519	0					
ANR	3133559	Identifier	pid		3133519	0					
ANR	3133560	IfStatement	if ( it == _queues [ Q_PARENTS ] . end ( ) )		3133519	5					
ANR	3133561	Condition	it == _queues [ Q_PARENTS ] . end ( )	607:5:14310:14339	3133519	0	True				
ANR	3133562	EqualityExpression	it == _queues [ Q_PARENTS ] . end ( )		3133519	0		==			
ANR	3133563	Identifier	it		3133519	0					
ANR	3133564	CallExpression	_queues [ Q_PARENTS ] . end ( )		3133519	1					
ANR	3133565	Callee	_queues [ Q_PARENTS ] . end		3133519	0					
ANR	3133566	MemberAccess	_queues [ Q_PARENTS ] . end		3133519	0					
ANR	3133567	ArrayIndexing	_queues [ Q_PARENTS ]		3133519	0					
ANR	3133568	Identifier	_queues		3133519	0					
ANR	3133569	Identifier	Q_PARENTS		3133519	1					
ANR	3133570	Identifier	end		3133519	1					
ANR	3133571	ArgumentList			3133519	1					
ANR	3133572	CompoundStatement		12:37:182:182	3133519	1					
ANR	3133573	ReturnStatement	return false ;	608:2:14346:14358	3133519	0	True				
ANR	3133574	Identifier	false		3133519	0					
ANR	3133575	ReturnStatement	return true ;	611:1:14365:14376	3133519	6	True				
ANR	3133576	Identifier	true		3133519	0					
ANR	3133577	ReturnType	bool		3133519	1					
ANR	3133578	Identifier	Job :: HasParent		3133519	2					
ANR	3133579	ParameterList	Job * parent		3133519	3					
ANR	3133580	Parameter	Job * parent	596:16:14145:14155	3133519	0	True				
ANR	3133581	ParameterType	Job *		3133519	0					
ANR	3133582	Identifier	parent		3133519	1					
ANR	3133583	CFGEntryNode	ENTRY		3133519		True				
ANR	3133584	CFGExitNode	EXIT		3133519		True				
ANR	3133585	Symbol	parent		3133519						
ANR	3133586	Symbol	* parent		3133519						
ANR	3133587	Symbol	Q_PARENTS		3133519						
ANR	3133588	Symbol	_queues		3133519						
ANR	3133589	Symbol	false		3133519						
ANR	3133590	Symbol	* _queues		3133519						
ANR	3133591	Symbol	pid		3133519						
ANR	3133592	Symbol	it		3133519						
ANR	3133593	Symbol	* Q_PARENTS		3133519						
ANR	3133594	Symbol	_queues [ Q_PARENTS ] . end		3133519						
ANR	3133595	Symbol	_queues [ Q_PARENTS ] . find		3133519						
ANR	3133596	Symbol	true		3133519						
ANR	3133597	Symbol	parent -> GetJobID		3133519						
ANR	3133598	Function	Job :: RemoveChild	615:0:14382:14743							
ANR	3133599	FunctionDef	Job :: RemoveChild (Job * child)		3133598	0					
ANR	3133600	CompoundStatement		617:0:14418:14743	3133598	0					
ANR	3133601	IdentifierDeclStatement	bool success ;	618:1:14421:14433	3133598	0	True				
ANR	3133602	IdentifierDecl	success		3133598	0					
ANR	3133603	IdentifierDeclType	bool		3133598	0					
ANR	3133604	Identifier	success		3133598	1					
ANR	3133605	IdentifierDeclStatement	MyString whynot ;	619:1:14436:14451	3133598	1	True				
ANR	3133606	IdentifierDecl	whynot		3133598	0					
ANR	3133607	IdentifierDeclType	MyString		3133598	0					
ANR	3133608	Identifier	whynot		3133598	1					
ANR	3133609	ExpressionStatement	"success = RemoveChild ( child , whynot )"	620:1:14454:14492	3133598	2	True				
ANR	3133610	AssignmentExpression	"success = RemoveChild ( child , whynot )"		3133598	0		=			
ANR	3133611	Identifier	success		3133598	0					
ANR	3133612	CallExpression	"RemoveChild ( child , whynot )"		3133598	1					
ANR	3133613	Callee	RemoveChild		3133598	0					
ANR	3133614	Identifier	RemoveChild		3133598	0					
ANR	3133615	ArgumentList	child		3133598	1					
ANR	3133616	Argument	child		3133598	0					
ANR	3133617	Identifier	child		3133598	0					
ANR	3133618	Argument	whynot		3133598	1					
ANR	3133619	Identifier	whynot		3133598	0					
ANR	3133620	IfStatement	if ( ! success )		3133598	3					
ANR	3133621	Condition	! success	621:5:14499:14506	3133598	0	True				
ANR	3133622	UnaryOperationExpression	! success		3133598	0					
ANR	3133623	UnaryOperator	!		3133598	0					
ANR	3133624	Identifier	success		3133598	1					
ANR	3133625	CompoundStatement		5:16:91:91	3133598	1					
ANR	3133626	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""ERROR: RemoveChild( %s ) failed for node %s: %s\\n"" , child ? child -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"	622:2:14514:14721	3133598	0	True				
ANR	3133627	CallExpression	"debug_printf ( DEBUG_QUIET , ""ERROR: RemoveChild( %s ) failed for node %s: %s\\n"" , child ? child -> GetJobName ( ) : ""(null)"" , this -> GetJobName ( ) , whynot . Value ( ) )"		3133598	0					
ANR	3133628	Callee	debug_printf		3133598	0					
ANR	3133629	Identifier	debug_printf		3133598	0					
ANR	3133630	ArgumentList	DEBUG_QUIET		3133598	1					
ANR	3133631	Argument	DEBUG_QUIET		3133598	0					
ANR	3133632	Identifier	DEBUG_QUIET		3133598	0					
ANR	3133633	Argument	"""ERROR: RemoveChild( %s ) failed for node %s: %s\\n"""		3133598	1					
ANR	3133634	PrimaryExpression	"""ERROR: RemoveChild( %s ) failed for node %s: %s\\n"""		3133598	0					
ANR	3133635	Argument	"child ? child -> GetJobName ( ) : ""(null)"""		3133598	2					
ANR	3133636	ConditionalExpression	"child ? child -> GetJobName ( ) : ""(null)"""		3133598	0					
ANR	3133637	Condition	child		3133598	0					
ANR	3133638	Identifier	child		3133598	0					
ANR	3133639	CallExpression	child -> GetJobName ( )		3133598	1					
ANR	3133640	Callee	child -> GetJobName		3133598	0					
ANR	3133641	PtrMemberAccess	child -> GetJobName		3133598	0					
ANR	3133642	Identifier	child		3133598	0					
ANR	3133643	Identifier	GetJobName		3133598	1					
ANR	3133644	ArgumentList			3133598	1					
ANR	3133645	PrimaryExpression	"""(null)"""		3133598	2					
ANR	3133646	Argument	this -> GetJobName ( )		3133598	3					
ANR	3133647	CallExpression	this -> GetJobName ( )		3133598	0					
ANR	3133648	Callee	this -> GetJobName		3133598	0					
ANR	3133649	PtrMemberAccess	this -> GetJobName		3133598	0					
ANR	3133650	Identifier	this		3133598	0					
ANR	3133651	Identifier	GetJobName		3133598	1					
ANR	3133652	ArgumentList			3133598	1					
ANR	3133653	Argument	whynot . Value ( )		3133598	4					
ANR	3133654	CallExpression	whynot . Value ( )		3133598	0					
ANR	3133655	Callee	whynot . Value		3133598	0					
ANR	3133656	MemberAccess	whynot . Value		3133598	0					
ANR	3133657	Identifier	whynot		3133598	0					
ANR	3133658	Identifier	Value		3133598	1					
ANR	3133659	ArgumentList			3133598	1					
ANR	3133660	ReturnStatement	return success ;	627:1:14727:14741	3133598	4	True				
ANR	3133661	Identifier	success		3133598	0					
ANR	3133662	ReturnType	bool		3133598	1					
ANR	3133663	Identifier	Job :: RemoveChild		3133598	2					
ANR	3133664	ParameterList	Job * child		3133598	3					
ANR	3133665	Parameter	Job * child	616:18:14405:14414	3133598	0	True				
ANR	3133666	ParameterType	Job *		3133598	0					
ANR	3133667	Identifier	child		3133598	1					
ANR	3133668	CFGEntryNode	ENTRY		3133598		True				
ANR	3133669	CFGExitNode	EXIT		3133598		True				
ANR	3133670	Symbol	* this		3133598						
ANR	3133671	Symbol	RemoveChild		3133598						
ANR	3133672	Symbol	* child		3133598						
ANR	3133673	Symbol	child -> GetJobName		3133598						
ANR	3133674	Symbol	success		3133598						
ANR	3133675	Symbol	this		3133598						
ANR	3133676	Symbol	whynot . Value		3133598						
ANR	3133677	Symbol	whynot		3133598						
ANR	3133678	Symbol	this -> GetJobName		3133598						
ANR	3133679	Symbol	child		3133598						
ANR	3133680	Symbol	DEBUG_QUIET		3133598						
ANR	3133681	Function	Job :: RemoveChild	631:0:14747:14933							
ANR	3133682	FunctionDef	"Job :: RemoveChild (Job * child , MyString & whynot)"		3133681	0					
ANR	3133683	CompoundStatement		633:0:14801:14933	3133681	0					
ANR	3133684	IfStatement	if ( ! child )		3133681	0					
ANR	3133685	Condition	! child	634:5:14808:14813	3133681	0	True				
ANR	3133686	UnaryOperationExpression	! child		3133681	0					
ANR	3133687	UnaryOperator	!		3133681	0					
ANR	3133688	Identifier	child		3133681	1					
ANR	3133689	CompoundStatement		2:14:15:15	3133681	1					
ANR	3133690	ExpressionStatement	"whynot = ""child == NULL"""	635:2:14821:14845	3133681	0	True				
ANR	3133691	AssignmentExpression	"whynot = ""child == NULL"""		3133681	0		=			
ANR	3133692	Identifier	whynot		3133681	0					
ANR	3133693	PrimaryExpression	"""child == NULL"""		3133681	1					
ANR	3133694	ReturnStatement	return false ;	636:2:14849:14861	3133681	1	True				
ANR	3133695	Identifier	false		3133681	0					
ANR	3133696	ReturnStatement	"return RemoveDependency ( Q_CHILDREN , child -> GetJobID ( ) , whynot ) ;"	638:1:14867:14931	3133681	1	True				
ANR	3133697	CallExpression	"RemoveDependency ( Q_CHILDREN , child -> GetJobID ( ) , whynot )"		3133681	0					
ANR	3133698	Callee	RemoveDependency		3133681	0					
ANR	3133699	Identifier	RemoveDependency		3133681	0					
ANR	3133700	ArgumentList	Q_CHILDREN		3133681	1					
ANR	3133701	Argument	Q_CHILDREN		3133681	0					
ANR	3133702	Identifier	Q_CHILDREN		3133681	0					
ANR	3133703	Argument	child -> GetJobID ( )		3133681	1					
ANR	3133704	CallExpression	child -> GetJobID ( )		3133681	0					
ANR	3133705	Callee	child -> GetJobID		3133681	0					
ANR	3133706	PtrMemberAccess	child -> GetJobID		3133681	0					
ANR	3133707	Identifier	child		3133681	0					
ANR	3133708	Identifier	GetJobID		3133681	1					
ANR	3133709	ArgumentList			3133681	1					
ANR	3133710	Argument	whynot		3133681	2					
ANR	3133711	Identifier	whynot		3133681	0					
ANR	3133712	ReturnType	bool		3133681	1					
ANR	3133713	Identifier	Job :: RemoveChild		3133681	2					
ANR	3133714	ParameterList	"Job * child , MyString & whynot"		3133681	3					
ANR	3133715	Parameter	Job * child	632:18:14770:14779	3133681	0	True				
ANR	3133716	ParameterType	Job *		3133681	0					
ANR	3133717	Identifier	child		3133681	1					
ANR	3133718	Parameter	MyString & whynot	632:30:14782:14797	3133681	1	True				
ANR	3133719	ParameterType	MyString &		3133681	0					
ANR	3133720	Identifier	whynot		3133681	1					
ANR	3133721	CFGEntryNode	ENTRY		3133681		True				
ANR	3133722	CFGExitNode	EXIT		3133681		True				
ANR	3133723	Symbol	* child		3133681						
ANR	3133724	Symbol	false		3133681						
ANR	3133725	Symbol	whynot		3133681						
ANR	3133726	Symbol	RemoveDependency		3133681						
ANR	3133727	Symbol	child		3133681						
ANR	3133728	Symbol	child -> GetJobID		3133681						
ANR	3133729	Symbol	Q_CHILDREN		3133681						
ANR	3133730	Function	Job :: RemoveParent	642:0:14937:15127							
ANR	3133731	FunctionDef	"Job :: RemoveParent (Job * parent , MyString & whynot)"		3133730	0					
ANR	3133732	CompoundStatement		644:0:14993:15127	3133730	0					
ANR	3133733	IfStatement	if ( ! parent )		3133730	0					
ANR	3133734	Condition	! parent	645:5:15000:15006	3133730	0	True				
ANR	3133735	UnaryOperationExpression	! parent		3133730	0					
ANR	3133736	UnaryOperator	!		3133730	0					
ANR	3133737	Identifier	parent		3133730	1					
ANR	3133738	CompoundStatement		2:15:16:16	3133730	1					
ANR	3133739	ExpressionStatement	"whynot = ""parent == NULL"""	646:2:15014:15039	3133730	0	True				
ANR	3133740	AssignmentExpression	"whynot = ""parent == NULL"""		3133730	0		=			
ANR	3133741	Identifier	whynot		3133730	0					
ANR	3133742	PrimaryExpression	"""parent == NULL"""		3133730	1					
ANR	3133743	ReturnStatement	return false ;	647:2:15043:15055	3133730	1	True				
ANR	3133744	Identifier	false		3133730	0					
ANR	3133745	ReturnStatement	"return RemoveDependency ( Q_PARENTS , parent -> GetJobID ( ) , whynot ) ;"	649:1:15061:15125	3133730	1	True				
ANR	3133746	CallExpression	"RemoveDependency ( Q_PARENTS , parent -> GetJobID ( ) , whynot )"		3133730	0					
ANR	3133747	Callee	RemoveDependency		3133730	0					
ANR	3133748	Identifier	RemoveDependency		3133730	0					
ANR	3133749	ArgumentList	Q_PARENTS		3133730	1					
ANR	3133750	Argument	Q_PARENTS		3133730	0					
ANR	3133751	Identifier	Q_PARENTS		3133730	0					
ANR	3133752	Argument	parent -> GetJobID ( )		3133730	1					
ANR	3133753	CallExpression	parent -> GetJobID ( )		3133730	0					
ANR	3133754	Callee	parent -> GetJobID		3133730	0					
ANR	3133755	PtrMemberAccess	parent -> GetJobID		3133730	0					
ANR	3133756	Identifier	parent		3133730	0					
ANR	3133757	Identifier	GetJobID		3133730	1					
ANR	3133758	ArgumentList			3133730	1					
ANR	3133759	Argument	whynot		3133730	2					
ANR	3133760	Identifier	whynot		3133730	0					
ANR	3133761	ReturnType	bool		3133730	1					
ANR	3133762	Identifier	Job :: RemoveParent		3133730	2					
ANR	3133763	ParameterList	"Job * parent , MyString & whynot"		3133730	3					
ANR	3133764	Parameter	Job * parent	643:19:14961:14971	3133730	0	True				
ANR	3133765	ParameterType	Job *		3133730	0					
ANR	3133766	Identifier	parent		3133730	1					
ANR	3133767	Parameter	MyString & whynot	643:32:14974:14989	3133730	1	True				
ANR	3133768	ParameterType	MyString &		3133730	0					
ANR	3133769	Identifier	whynot		3133730	1					
ANR	3133770	CFGEntryNode	ENTRY		3133730		True				
ANR	3133771	CFGExitNode	EXIT		3133730		True				
ANR	3133772	Symbol	parent		3133730						
ANR	3133773	Symbol	Q_PARENTS		3133730						
ANR	3133774	Symbol	* parent		3133730						
ANR	3133775	Symbol	false		3133730						
ANR	3133776	Symbol	whynot		3133730						
ANR	3133777	Symbol	RemoveDependency		3133730						
ANR	3133778	Symbol	parent -> GetJobID		3133730						
ANR	3133779	Function	Job :: RemoveDependency	652:0:15130:15255							
ANR	3133780	FunctionDef	"Job :: RemoveDependency (queue_t queue , JobID_t job)"		3133779	0					
ANR	3133781	CompoundStatement		654:0:15187:15255	3133779	0					
ANR	3133782	IdentifierDeclStatement	MyString whynot ;	655:1:15190:15205	3133779	0	True				
ANR	3133783	IdentifierDecl	whynot		3133779	0					
ANR	3133784	IdentifierDeclType	MyString		3133779	0					
ANR	3133785	Identifier	whynot		3133779	1					
ANR	3133786	ReturnStatement	"return RemoveDependency ( queue , job , whynot ) ;"	656:1:15208:15253	3133779	1	True				
ANR	3133787	CallExpression	"RemoveDependency ( queue , job , whynot )"		3133779	0					
ANR	3133788	Callee	RemoveDependency		3133779	0					
ANR	3133789	Identifier	RemoveDependency		3133779	0					
ANR	3133790	ArgumentList	queue		3133779	1					
ANR	3133791	Argument	queue		3133779	0					
ANR	3133792	Identifier	queue		3133779	0					
ANR	3133793	Argument	job		3133779	1					
ANR	3133794	Identifier	job		3133779	0					
ANR	3133795	Argument	whynot		3133779	2					
ANR	3133796	Identifier	whynot		3133779	0					
ANR	3133797	ReturnType	bool		3133779	1					
ANR	3133798	Identifier	Job :: RemoveDependency		3133779	2					
ANR	3133799	ParameterList	"queue_t queue , JobID_t job"		3133779	3					
ANR	3133800	Parameter	queue_t queue	653:23:15158:15170	3133779	0	True				
ANR	3133801	ParameterType	queue_t		3133779	0					
ANR	3133802	Identifier	queue		3133779	1					
ANR	3133803	Parameter	JobID_t job	653:38:15173:15183	3133779	1	True				
ANR	3133804	ParameterType	JobID_t		3133779	0					
ANR	3133805	Identifier	job		3133779	1					
ANR	3133806	CFGEntryNode	ENTRY		3133779		True				
ANR	3133807	CFGExitNode	EXIT		3133779		True				
ANR	3133808	Symbol	whynot		3133779						
ANR	3133809	Symbol	RemoveDependency		3133779						
ANR	3133810	Symbol	job		3133779						
ANR	3133811	Symbol	queue		3133779						
ANR	3133812	Function	Job :: RemoveDependency	659:0:15258:15459							
ANR	3133813	FunctionDef	"Job :: RemoveDependency (queue_t queue , JobID_t job , MyString & whynot)"		3133812	0					
ANR	3133814	CompoundStatement		661:0:15333:15459	3133812	0					
ANR	3133815	IfStatement	if ( _queues [ queue ] . erase ( job ) == 0 )		3133812	0					
ANR	3133816	Condition	_queues [ queue ] . erase ( job ) == 0	662:5:15340:15369	3133812	0	True				
ANR	3133817	EqualityExpression	_queues [ queue ] . erase ( job ) == 0		3133812	0		==			
ANR	3133818	CallExpression	_queues [ queue ] . erase ( job )		3133812	0					
ANR	3133819	Callee	_queues [ queue ] . erase		3133812	0					
ANR	3133820	MemberAccess	_queues [ queue ] . erase		3133812	0					
ANR	3133821	ArrayIndexing	_queues [ queue ]		3133812	0					
ANR	3133822	Identifier	_queues		3133812	0					
ANR	3133823	Identifier	queue		3133812	1					
ANR	3133824	Identifier	erase		3133812	1					
ANR	3133825	ArgumentList	job		3133812	1					
ANR	3133826	Argument	job		3133812	0					
ANR	3133827	Identifier	job		3133812	0					
ANR	3133828	PrimaryExpression	0		3133812	1					
ANR	3133829	CompoundStatement		3:1:39:39	3133812	1					
ANR	3133830	ExpressionStatement	"whynot = ""no such dependency"""	664:2:15377:15406	3133812	0	True				
ANR	3133831	AssignmentExpression	"whynot = ""no such dependency"""		3133812	0		=			
ANR	3133832	Identifier	whynot		3133812	0					
ANR	3133833	PrimaryExpression	"""no such dependency"""		3133812	1					
ANR	3133834	ReturnStatement	return false ;	665:2:15410:15422	3133812	1	True				
ANR	3133835	Identifier	false		3133812	0					
ANR	3133836	ExpressionStatement	"whynot = ""n/a"""	668:1:15429:15443	3133812	1	True				
ANR	3133837	AssignmentExpression	"whynot = ""n/a"""		3133812	0		=			
ANR	3133838	Identifier	whynot		3133812	0					
ANR	3133839	PrimaryExpression	"""n/a"""		3133812	1					
ANR	3133840	ReturnStatement	return true ;	669:1:15446:15457	3133812	2	True				
ANR	3133841	Identifier	true		3133812	0					
ANR	3133842	ReturnType	bool		3133812	1					
ANR	3133843	Identifier	Job :: RemoveDependency		3133812	2					
ANR	3133844	ParameterList	"queue_t queue , JobID_t job , MyString & whynot"		3133812	3					
ANR	3133845	Parameter	queue_t queue	660:23:15286:15298	3133812	0	True				
ANR	3133846	ParameterType	queue_t		3133812	0					
ANR	3133847	Identifier	queue		3133812	1					
ANR	3133848	Parameter	JobID_t job	660:38:15301:15311	3133812	1	True				
ANR	3133849	ParameterType	JobID_t		3133812	0					
ANR	3133850	Identifier	job		3133812	1					
ANR	3133851	Parameter	MyString & whynot	660:51:15314:15329	3133812	2	True				
ANR	3133852	ParameterType	MyString &		3133812	0					
ANR	3133853	Identifier	whynot		3133812	1					
ANR	3133854	CFGEntryNode	ENTRY		3133812		True				
ANR	3133855	CFGExitNode	EXIT		3133812		True				
ANR	3133856	Symbol	* queue		3133812						
ANR	3133857	Symbol	_queues		3133812						
ANR	3133858	Symbol	* _queues		3133812						
ANR	3133859	Symbol	false		3133812						
ANR	3133860	Symbol	true		3133812						
ANR	3133861	Symbol	whynot		3133812						
ANR	3133862	Symbol	job		3133812						
ANR	3133863	Symbol	_queues [ queue ] . erase		3133812						
ANR	3133864	Symbol	queue		3133812						
ANR	3133865	Function	Job :: JobType	673:0:15463:15523							
ANR	3133866	FunctionDef	Job :: JobType ()		3133865	0					
ANR	3133867	CompoundStatement		675:0:15500:15523	3133865	0					
ANR	3133868	ReturnStatement	return _jobType ;	676:4:15506:15521	3133865	0	True				
ANR	3133869	Identifier	_jobType		3133865	0					
ANR	3133870	ReturnType	Job :: job_type_t		3133865	1					
ANR	3133871	Identifier	Job :: JobType		3133865	2					
ANR	3133872	ParameterList			3133865	3					
ANR	3133873	CFGEntryNode	ENTRY		3133865		True				
ANR	3133874	CFGExitNode	EXIT		3133865		True				
ANR	3133875	Symbol	_jobType		3133865						
ANR	3133876	Function	Job :: JobTypeString	680:0:15527:15606							
ANR	3133877	FunctionDef	Job :: JobTypeString ()		3133876	0					
ANR	3133878	CompoundStatement		682:0:15566:15606	3133876	0					
ANR	3133879	ReturnStatement	return _job_type_names [ _jobType ] ;	683:4:15572:15604	3133876	0	True				
ANR	3133880	ArrayIndexing	_job_type_names [ _jobType ]		3133876	0					
ANR	3133881	Identifier	_job_type_names		3133876	0					
ANR	3133882	Identifier	_jobType		3133876	1					
ANR	3133883	ReturnType	const char *		3133876	1					
ANR	3133884	Identifier	Job :: JobTypeString		3133876	2					
ANR	3133885	ParameterList			3133876	3					
ANR	3133886	CFGEntryNode	ENTRY		3133876		True				
ANR	3133887	CFGExitNode	EXIT		3133876		True				
ANR	3133888	Symbol	* _job_type_names		3133876						
ANR	3133889	Symbol	_jobType		3133876						
ANR	3133890	Symbol	_job_type_names		3133876						
ANR	3133891	Symbol	* _jobType		3133876						
ANR	3133892	Function	Job :: NumParents	695:0:15660:15725							
ANR	3133893	FunctionDef	Job :: NumParents ()		3133892	0					
ANR	3133894	CompoundStatement		697:0:15688:15725	3133892	0					
ANR	3133895	ReturnStatement	return _queues [ Q_PARENTS ] . size ( ) ;	698:1:15691:15723	3133892	0	True				
ANR	3133896	CallExpression	_queues [ Q_PARENTS ] . size ( )		3133892	0					
ANR	3133897	Callee	_queues [ Q_PARENTS ] . size		3133892	0					
ANR	3133898	MemberAccess	_queues [ Q_PARENTS ] . size		3133892	0					
ANR	3133899	ArrayIndexing	_queues [ Q_PARENTS ]		3133892	0					
ANR	3133900	Identifier	_queues		3133892	0					
ANR	3133901	Identifier	Q_PARENTS		3133892	1					
ANR	3133902	Identifier	size		3133892	1					
ANR	3133903	ArgumentList			3133892	1					
ANR	3133904	ReturnType	int		3133892	1					
ANR	3133905	Identifier	Job :: NumParents		3133892	2					
ANR	3133906	ParameterList			3133892	3					
ANR	3133907	CFGEntryNode	ENTRY		3133892		True				
ANR	3133908	CFGExitNode	EXIT		3133892		True				
ANR	3133909	Symbol	Q_PARENTS		3133892						
ANR	3133910	Symbol	_queues		3133892						
ANR	3133911	Symbol	* _queues		3133892						
ANR	3133912	Symbol	_queues [ Q_PARENTS ] . size		3133892						
ANR	3133913	Symbol	* Q_PARENTS		3133892						
ANR	3133914	Function	Job :: NumChildren	701:0:15728:15795							
ANR	3133915	FunctionDef	Job :: NumChildren ()		3133914	0					
ANR	3133916	CompoundStatement		703:0:15757:15795	3133914	0					
ANR	3133917	ReturnStatement	return _queues [ Q_CHILDREN ] . size ( ) ;	704:1:15760:15793	3133914	0	True				
ANR	3133918	CallExpression	_queues [ Q_CHILDREN ] . size ( )		3133914	0					
ANR	3133919	Callee	_queues [ Q_CHILDREN ] . size		3133914	0					
ANR	3133920	MemberAccess	_queues [ Q_CHILDREN ] . size		3133914	0					
ANR	3133921	ArrayIndexing	_queues [ Q_CHILDREN ]		3133914	0					
ANR	3133922	Identifier	_queues		3133914	0					
ANR	3133923	Identifier	Q_CHILDREN		3133914	1					
ANR	3133924	Identifier	size		3133914	1					
ANR	3133925	ArgumentList			3133914	1					
ANR	3133926	ReturnType	int		3133914	1					
ANR	3133927	Identifier	Job :: NumChildren		3133914	2					
ANR	3133928	ParameterList			3133914	3					
ANR	3133929	CFGEntryNode	ENTRY		3133914		True				
ANR	3133930	CFGExitNode	EXIT		3133914		True				
ANR	3133931	Symbol	_queues		3133914						
ANR	3133932	Symbol	_queues [ Q_CHILDREN ] . size		3133914						
ANR	3133933	Symbol	* _queues		3133914						
ANR	3133934	Symbol	* Q_CHILDREN		3133914						
ANR	3133935	Symbol	Q_CHILDREN		3133914						
ANR	3133936	Function	Job :: SetCategory	707:0:15798:16757							
ANR	3133937	FunctionDef	"Job :: SetCategory (const char * categoryName , ThrottleByCategory & catThrottles)"		3133936	0					
ANR	3133938	CompoundStatement		709:0:15882:16757	3133936	0					
ANR	3133939	IdentifierDeclStatement	MyString tmpName ( categoryName ) ;	710:1:15885:15917	3133936	0	True				
ANR	3133940	IdentifierDecl	tmpName ( categoryName )		3133936	0					
ANR	3133941	IdentifierDeclType	MyString		3133936	0					
ANR	3133942	Identifier	tmpName		3133936	1					
ANR	3133943	Identifier	categoryName		3133936	2					
ANR	3133944	IfStatement	if ( ( _throttleInfo != NULL ) && ( tmpName != * ( _throttleInfo -> _category ) ) )		3133936	1					
ANR	3133945	Condition	( _throttleInfo != NULL ) && ( tmpName != * ( _throttleInfo -> _category ) )	712:6:15926:15996	3133936	0	True				
ANR	3133946	AndExpression	( _throttleInfo != NULL ) && ( tmpName != * ( _throttleInfo -> _category ) )		3133936	0		&&			
ANR	3133947	EqualityExpression	_throttleInfo != NULL		3133936	0		!=			
ANR	3133948	Identifier	_throttleInfo		3133936	0					
ANR	3133949	Identifier	NULL		3133936	1					
ANR	3133950	EqualityExpression	tmpName != * ( _throttleInfo -> _category )		3133936	1		!=			
ANR	3133951	Identifier	tmpName		3133936	0					
ANR	3133952	UnaryOperationExpression	* ( _throttleInfo -> _category )		3133936	1					
ANR	3133953	UnaryOperator	*		3133936	0					
ANR	3133954	PtrMemberAccess	_throttleInfo -> _category		3133936	1					
ANR	3133955	Identifier	_throttleInfo		3133936	0					
ANR	3133956	Identifier	_category		3133936	1					
ANR	3133957	CompoundStatement		5:47:117:117	3133936	1					
ANR	3133958	Statement	debug_printf	714:2:16004:16015	3133936	0	True				
ANR	3133959	Statement	(	714:14:16016:16016	3133936	1	True				
ANR	3133960	Statement	DEBUG_NORMAL	714:16:16018:16029	3133936	2	True				
ANR	3133961	Statement	","	714:28:16030:16030	3133936	3	True				
ANR	3133962	Statement	"""Warning: new category %s for node %s """	714:30:16032:16070	3133936	4	True				
ANR	3133963	Statement	"""overrides old value %s\\n"""	715:5:16077:16102	3133936	5	True				
ANR	3133964	Statement	","	715:31:16103:16103	3133936	6	True				
ANR	3133965	Statement	categoryName	715:33:16105:16116	3133936	7	True				
ANR	3133966	Statement	","	715:45:16117:16117	3133936	8	True				
ANR	3133967	Statement	GetJobName	715:47:16119:16128	3133936	9	True				
ANR	3133968	Statement	(	715:57:16129:16129	3133936	10	True				
ANR	3133969	Statement	)	715:58:16130:16130	3133936	11	True				
ANR	3133970	Statement	","	715:59:16131:16131	3133936	12	True				
ANR	3133971	Statement	_throttleInfo	716:5:16138:16150	3133936	13	True				
ANR	3133972	Statement	->	716:18:16151:16152	3133936	14	True				
ANR	3133973	Statement	_category	716:20:16153:16161	3133936	15	True				
ANR	3133974	Statement	->	716:29:16162:16163	3133936	16	True				
ANR	3133975	Statement	Value	716:31:16164:16168	3133936	17	True				
ANR	3133976	Statement	(	716:36:16169:16169	3133936	18	True				
ANR	3133977	Statement	)	716:37:16170:16170	3133936	19	True				
ANR	3133978	Statement	)	716:39:16172:16172	3133936	20	True				
ANR	3133979	ExpressionStatement		716:40:16173:16173	3133936	21	True				
ANR	3133980	ExpressionStatement	check_warning_strictness ( DAG_STRICT_3 )	717:2:16177:16217	3133936	22	True				
ANR	3133981	CallExpression	check_warning_strictness ( DAG_STRICT_3 )		3133936	0					
ANR	3133982	Callee	check_warning_strictness		3133936	0					
ANR	3133983	Identifier	check_warning_strictness		3133936	0					
ANR	3133984	ArgumentList	DAG_STRICT_3		3133936	1					
ANR	3133985	Argument	DAG_STRICT_3		3133936	0					
ANR	3133986	Identifier	DAG_STRICT_3		3133936	0					
ANR	3133987	IdentifierDeclStatement	ThrottleByCategory :: ThrottleInfo * oldInfo = _throttleInfo ;	722:1:16342:16399	3133936	2	True				
ANR	3133988	IdentifierDecl	* oldInfo = _throttleInfo		3133936	0					
ANR	3133989	IdentifierDeclType	ThrottleByCategory :: ThrottleInfo *		3133936	0					
ANR	3133990	Identifier	oldInfo		3133936	1					
ANR	3133991	AssignmentExpression	* oldInfo = _throttleInfo		3133936	2		=			
ANR	3133992	Identifier	_throttleInfo		3133936	0					
ANR	3133993	Identifier	_throttleInfo		3133936	1					
ANR	3133994	IdentifierDeclStatement	ThrottleByCategory :: ThrottleInfo * throttleInfo = catThrottles . GetThrottleInfo ( & tmpName ) ;	724:1:16403:16496	3133936	3	True				
ANR	3133995	IdentifierDecl	* throttleInfo = catThrottles . GetThrottleInfo ( & tmpName )		3133936	0					
ANR	3133996	IdentifierDeclType	ThrottleByCategory :: ThrottleInfo *		3133936	0					
ANR	3133997	Identifier	throttleInfo		3133936	1					
ANR	3133998	AssignmentExpression	* throttleInfo = catThrottles . GetThrottleInfo ( & tmpName )		3133936	2		=			
ANR	3133999	Identifier	throttleInfo		3133936	0					
ANR	3134000	CallExpression	catThrottles . GetThrottleInfo ( & tmpName )		3133936	1					
ANR	3134001	Callee	catThrottles . GetThrottleInfo		3133936	0					
ANR	3134002	MemberAccess	catThrottles . GetThrottleInfo		3133936	0					
ANR	3134003	Identifier	catThrottles		3133936	0					
ANR	3134004	Identifier	GetThrottleInfo		3133936	1					
ANR	3134005	ArgumentList	& tmpName		3133936	1					
ANR	3134006	Argument	& tmpName		3133936	0					
ANR	3134007	UnaryOperationExpression	& tmpName		3133936	0					
ANR	3134008	UnaryOperator	&		3133936	0					
ANR	3134009	Identifier	tmpName		3133936	1					
ANR	3134010	IfStatement	if ( throttleInfo != NULL )		3133936	4					
ANR	3134011	Condition	throttleInfo != NULL	726:6:16504:16523	3133936	0	True				
ANR	3134012	EqualityExpression	throttleInfo != NULL		3133936	0		!=			
ANR	3134013	Identifier	throttleInfo		3133936	0					
ANR	3134014	Identifier	NULL		3133936	1					
ANR	3134015	CompoundStatement		18:29:644:644	3133936	1					
ANR	3134016	ExpressionStatement	_throttleInfo = throttleInfo	727:2:16531:16559	3133936	0	True				
ANR	3134017	AssignmentExpression	_throttleInfo = throttleInfo		3133936	0		=			
ANR	3134018	Identifier	_throttleInfo		3133936	0					
ANR	3134019	Identifier	throttleInfo		3133936	1					
ANR	3134020	ElseStatement	else		3133936	0					
ANR	3134021	CompoundStatement		20:8:686:686	3133936	0					
ANR	3134022	ExpressionStatement	_throttleInfo = catThrottles . AddCategory ( & tmpName )	729:2:16573:16625	3133936	0	True				
ANR	3134023	AssignmentExpression	_throttleInfo = catThrottles . AddCategory ( & tmpName )		3133936	0		=			
ANR	3134024	Identifier	_throttleInfo		3133936	0					
ANR	3134025	CallExpression	catThrottles . AddCategory ( & tmpName )		3133936	1					
ANR	3134026	Callee	catThrottles . AddCategory		3133936	0					
ANR	3134027	MemberAccess	catThrottles . AddCategory		3133936	0					
ANR	3134028	Identifier	catThrottles		3133936	0					
ANR	3134029	Identifier	AddCategory		3133936	1					
ANR	3134030	ArgumentList	& tmpName		3133936	1					
ANR	3134031	Argument	& tmpName		3133936	0					
ANR	3134032	UnaryOperationExpression	& tmpName		3133936	0					
ANR	3134033	UnaryOperator	&		3133936	0					
ANR	3134034	Identifier	tmpName		3133936	1					
ANR	3134035	IfStatement	if ( oldInfo != _throttleInfo )		3133936	5					
ANR	3134036	Condition	oldInfo != _throttleInfo	732:6:16637:16660	3133936	0	True				
ANR	3134037	EqualityExpression	oldInfo != _throttleInfo		3133936	0		!=			
ANR	3134038	Identifier	oldInfo		3133936	0					
ANR	3134039	Identifier	_throttleInfo		3133936	1					
ANR	3134040	CompoundStatement		24:33:781:781	3133936	1					
ANR	3134041	IfStatement	if ( oldInfo != NULL )		3133936	0					
ANR	3134042	Condition	oldInfo != NULL	733:7:16673:16687	3133936	0	True				
ANR	3134043	EqualityExpression	oldInfo != NULL		3133936	0		!=			
ANR	3134044	Identifier	oldInfo		3133936	0					
ANR	3134045	Identifier	NULL		3133936	1					
ANR	3134046	CompoundStatement		25:25:808:808	3133936	1					
ANR	3134047	ExpressionStatement	oldInfo -> _totalJobs --	734:3:16696:16717	3133936	0	True				
ANR	3134048	PostIncDecOperationExpression	oldInfo -> _totalJobs --		3133936	0					
ANR	3134049	PtrMemberAccess	oldInfo -> _totalJobs		3133936	0					
ANR	3134050	Identifier	oldInfo		3133936	0					
ANR	3134051	Identifier	_totalJobs		3133936	1					
ANR	3134052	IncDec	--		3133936	1					
ANR	3134053	ExpressionStatement	_throttleInfo -> _totalJobs ++	736:2:16725:16752	3133936	1	True				
ANR	3134054	PostIncDecOperationExpression	_throttleInfo -> _totalJobs ++		3133936	0					
ANR	3134055	PtrMemberAccess	_throttleInfo -> _totalJobs		3133936	0					
ANR	3134056	Identifier	_throttleInfo		3133936	0					
ANR	3134057	Identifier	_totalJobs		3133936	1					
ANR	3134058	IncDec	++		3133936	1					
ANR	3134059	ReturnType	void		3133936	1					
ANR	3134060	Identifier	Job :: SetCategory		3133936	2					
ANR	3134061	ParameterList	"const char * categoryName , ThrottleByCategory & catThrottles"		3133936	3					
ANR	3134062	Parameter	const char * categoryName	708:18:15821:15844	3133936	0	True				
ANR	3134063	ParameterType	const char *		3133936	0					
ANR	3134064	Identifier	categoryName		3133936	1					
ANR	3134065	Parameter	ThrottleByCategory & catThrottles	708:44:15847:15878	3133936	1	True				
ANR	3134066	ParameterType	ThrottleByCategory &		3133936	0					
ANR	3134067	Identifier	catThrottles		3133936	1					
ANR	3134068	CFGEntryNode	ENTRY		3133936		True				
ANR	3134069	CFGExitNode	EXIT		3133936		True				
ANR	3134070	Symbol	tmpName		3133936						
ANR	3134071	Symbol	NULL		3133936						
ANR	3134072	Symbol	* ( _throttleInfo -> _category )		3133936						
ANR	3134073	Symbol	catThrottles		3133936						
ANR	3134074	Symbol	* _throttleInfo -> _category		3133936						
ANR	3134075	Symbol	categoryName		3133936						
ANR	3134076	Symbol	_throttleInfo -> _category		3133936						
ANR	3134077	Symbol	oldInfo -> _totalJobs		3133936						
ANR	3134078	Symbol	DAG_STRICT_3		3133936						
ANR	3134079	Symbol	_throttleInfo -> _totalJobs		3133936						
ANR	3134080	Symbol	oldInfo		3133936						
ANR	3134081	Symbol	_throttleInfo		3133936						
ANR	3134082	Symbol	throttleInfo		3133936						
ANR	3134083	Symbol	& tmpName		3133936						
ANR	3134084	Symbol	* * _throttleInfo		3133936						
ANR	3134085	Symbol	* _throttleInfo		3133936						
ANR	3134086	Symbol	catThrottles . GetThrottleInfo		3133936						
ANR	3134087	Symbol	catThrottles . AddCategory		3133936						
ANR	3134088	Symbol	* oldInfo		3133936						
ANR	3134089	Function	Job :: PrefixName	740:0:16760:16911							
ANR	3134090	FunctionDef	Job :: PrefixName (const MyString & prefix)		3134089	0					
ANR	3134091	CompoundStatement		742:0:16805:16911	3134089	0					
ANR	3134092	IdentifierDeclStatement	MyString tmp = _jobName ;	743:1:16808:16831	3134089	0	True				
ANR	3134093	IdentifierDecl	tmp = _jobName		3134089	0					
ANR	3134094	IdentifierDeclType	MyString		3134089	0					
ANR	3134095	Identifier	tmp		3134089	1					
ANR	3134096	AssignmentExpression	tmp = _jobName		3134089	2		=			
ANR	3134097	Identifier	_jobName		3134089	0					
ANR	3134098	Identifier	_jobName		3134089	1					
ANR	3134099	ExpressionStatement	tmp = prefix + tmp	745:1:16835:16853	3134089	1	True				
ANR	3134100	AssignmentExpression	tmp = prefix + tmp		3134089	0		=			
ANR	3134101	Identifier	tmp		3134089	0					
ANR	3134102	AdditiveExpression	prefix + tmp		3134089	1		+			
ANR	3134103	Identifier	prefix		3134089	0					
ANR	3134104	Identifier	tmp		3134089	1					
ANR	3134105	Statement	delete	747:1:16857:16862	3134089	2	True				
ANR	3134106	Statement	[	747:7:16863:16863	3134089	3	True				
ANR	3134107	Statement	]	747:8:16864:16864	3134089	4	True				
ANR	3134108	ExpressionStatement	_jobName	747:10:16866:16874	3134089	5	True				
ANR	3134109	Identifier	_jobName		3134089	0					
ANR	3134110	ExpressionStatement	_jobName = strnewp ( tmp . Value ( ) )	749:1:16878:16909	3134089	6	True				
ANR	3134111	AssignmentExpression	_jobName = strnewp ( tmp . Value ( ) )		3134089	0		=			
ANR	3134112	Identifier	_jobName		3134089	0					
ANR	3134113	CallExpression	strnewp ( tmp . Value ( ) )		3134089	1					
ANR	3134114	Callee	strnewp		3134089	0					
ANR	3134115	Identifier	strnewp		3134089	0					
ANR	3134116	ArgumentList	tmp . Value ( )		3134089	1					
ANR	3134117	Argument	tmp . Value ( )		3134089	0					
ANR	3134118	CallExpression	tmp . Value ( )		3134089	0					
ANR	3134119	Callee	tmp . Value		3134089	0					
ANR	3134120	MemberAccess	tmp . Value		3134089	0					
ANR	3134121	Identifier	tmp		3134089	0					
ANR	3134122	Identifier	Value		3134089	1					
ANR	3134123	ArgumentList			3134089	1					
ANR	3134124	ReturnType	void		3134089	1					
ANR	3134125	Identifier	Job :: PrefixName		3134089	2					
ANR	3134126	ParameterList	const MyString & prefix		3134089	3					
ANR	3134127	Parameter	const MyString & prefix	741:16:16781:16802	3134089	0	True				
ANR	3134128	ParameterType	const MyString &		3134089	0					
ANR	3134129	Identifier	prefix		3134089	1					
ANR	3134130	CFGEntryNode	ENTRY		3134089		True				
ANR	3134131	CFGExitNode	EXIT		3134089		True				
ANR	3134132	Symbol	_jobName		3134089						
ANR	3134133	Symbol	prefix		3134089						
ANR	3134134	Symbol	tmp		3134089						
ANR	3134135	Symbol	strnewp		3134089						
ANR	3134136	Symbol	tmp . Value		3134089						
ANR	3134137	Function	Job :: ResolveVarsInterpolations	755:0:17068:17426							
ANR	3134138	FunctionDef	Job :: ResolveVarsInterpolations ()		3134137	0					
ANR	3134139	CompoundStatement		757:0:17110:17426	3134137	0					
ANR	3134140	IdentifierDeclStatement	MyString * val ;	758:1:17113:17126	3134137	0	True				
ANR	3134141	IdentifierDecl	* val		3134137	0					
ANR	3134142	IdentifierDeclType	MyString *		3134137	0					
ANR	3134143	Identifier	val		3134137	1					
ANR	3134144	ExpressionStatement	varValsFromDag -> Rewind ( )	760:1:17130:17154	3134137	1	True				
ANR	3134145	CallExpression	varValsFromDag -> Rewind ( )		3134137	0					
ANR	3134146	Callee	varValsFromDag -> Rewind		3134137	0					
ANR	3134147	PtrMemberAccess	varValsFromDag -> Rewind		3134137	0					
ANR	3134148	Identifier	varValsFromDag		3134137	0					
ANR	3134149	Identifier	Rewind		3134137	1					
ANR	3134150	ArgumentList			3134137	1					
ANR	3134151	WhileStatement	while ( ( val = varValsFromDag -> Next ( ) ) != NULL )		3134137	2					
ANR	3134152	Condition	( val = varValsFromDag -> Next ( ) ) != NULL	761:8:17164:17201	3134137	0	True				
ANR	3134153	EqualityExpression	( val = varValsFromDag -> Next ( ) ) != NULL		3134137	0		!=			
ANR	3134154	AssignmentExpression	val = varValsFromDag -> Next ( )		3134137	0		=			
ANR	3134155	Identifier	val		3134137	0					
ANR	3134156	CallExpression	varValsFromDag -> Next ( )		3134137	1					
ANR	3134157	Callee	varValsFromDag -> Next		3134137	0					
ANR	3134158	PtrMemberAccess	varValsFromDag -> Next		3134137	0					
ANR	3134159	Identifier	varValsFromDag		3134137	0					
ANR	3134160	Identifier	Next		3134137	1					
ANR	3134161	ArgumentList			3134137	1					
ANR	3134162	Identifier	NULL		3134137	1					
ANR	3134163	CompoundStatement		5:49:94:94	3134137	1					
ANR	3134164	ExpressionStatement	"val -> replaceString ( ""$(JOB)"" , GetJobName ( ) )"	765:2:17379:17421	3134137	0	True				
ANR	3134165	CallExpression	"val -> replaceString ( ""$(JOB)"" , GetJobName ( ) )"		3134137	0					
ANR	3134166	Callee	val -> replaceString		3134137	0					
ANR	3134167	PtrMemberAccess	val -> replaceString		3134137	0					
ANR	3134168	Identifier	val		3134137	0					
ANR	3134169	Identifier	replaceString		3134137	1					
ANR	3134170	ArgumentList	"""$(JOB)"""		3134137	1					
ANR	3134171	Argument	"""$(JOB)"""		3134137	0					
ANR	3134172	PrimaryExpression	"""$(JOB)"""		3134137	0					
ANR	3134173	Argument	GetJobName ( )		3134137	1					
ANR	3134174	CallExpression	GetJobName ( )		3134137	0					
ANR	3134175	Callee	GetJobName		3134137	0					
ANR	3134176	Identifier	GetJobName		3134137	0					
ANR	3134177	ArgumentList			3134137	1					
ANR	3134178	ReturnType	void		3134137	1					
ANR	3134179	Identifier	Job :: ResolveVarsInterpolations		3134137	2					
ANR	3134180	ParameterList			3134137	3					
ANR	3134181	CFGEntryNode	ENTRY		3134137		True				
ANR	3134182	CFGExitNode	EXIT		3134137		True				
ANR	3134183	Symbol	val		3134137						
ANR	3134184	Symbol	varValsFromDag		3134137						
ANR	3134185	Symbol	NULL		3134137						
ANR	3134186	Symbol	GetJobName		3134137						
ANR	3134187	Symbol	varValsFromDag -> Next		3134137						
ANR	3134188	Symbol	* varValsFromDag		3134137						
ANR	3134189	Function	Job :: SetDagFile	770:0:17507:17601							
ANR	3134190	FunctionDef	Job :: SetDagFile (const char * dagFile)		3134189	0					
ANR	3134191	CompoundStatement		772:0:17549:17601	3134189	0					
ANR	3134192	Statement	delete	773:1:17552:17557	3134189	0	True				
ANR	3134193	ExpressionStatement	_dagFile	773:8:17559:17567	3134189	1	True				
ANR	3134194	Identifier	_dagFile		3134189	0					
ANR	3134195	ExpressionStatement	_dagFile = strnewp ( dagFile )	774:1:17570:17599	3134189	2	True				
ANR	3134196	AssignmentExpression	_dagFile = strnewp ( dagFile )		3134189	0		=			
ANR	3134197	Identifier	_dagFile		3134189	0					
ANR	3134198	CallExpression	strnewp ( dagFile )		3134189	1					
ANR	3134199	Callee	strnewp		3134189	0					
ANR	3134200	Identifier	strnewp		3134189	0					
ANR	3134201	ArgumentList	dagFile		3134189	1					
ANR	3134202	Argument	dagFile		3134189	0					
ANR	3134203	Identifier	dagFile		3134189	0					
ANR	3134204	ReturnType	void		3134189	1					
ANR	3134205	Identifier	Job :: SetDagFile		3134189	2					
ANR	3134206	ParameterList	const char * dagFile		3134189	3					
ANR	3134207	Parameter	const char * dagFile	771:16:17528:17546	3134189	0	True				
ANR	3134208	ParameterType	const char *		3134189	0					
ANR	3134209	Identifier	dagFile		3134189	1					
ANR	3134210	CFGEntryNode	ENTRY		3134189		True				
ANR	3134211	CFGExitNode	EXIT		3134189		True				
ANR	3134212	Symbol	dagFile		3134189						
ANR	3134213	Symbol	_dagFile		3134189						
ANR	3134214	Symbol	strnewp		3134189						
ANR	3134215	Function	Job :: MonitorLogFile	778:0:17682:20301							
ANR	3134216	FunctionDef	"Job :: MonitorLogFile (ReadMultipleUserLogs & condorLogReader , ReadMultipleUserLogs & storkLogReader , bool nfsIsError , bool recovery , const char * defaultNodeLog)"		3134215	0					
ANR	3134217	CompoundStatement		782:0:17852:20301	3134215	0					
ANR	3134218	ExpressionStatement	"debug_printf ( DEBUG_DEBUG_2 , ""Attempting to monitor log file for node %s\\n"" , GetJobName ( ) )"	783:1:17855:17954	3134215	0	True				
ANR	3134219	CallExpression	"debug_printf ( DEBUG_DEBUG_2 , ""Attempting to monitor log file for node %s\\n"" , GetJobName ( ) )"		3134215	0					
ANR	3134220	Callee	debug_printf		3134215	0					
ANR	3134221	Identifier	debug_printf		3134215	0					
ANR	3134222	ArgumentList	DEBUG_DEBUG_2		3134215	1					
ANR	3134223	Argument	DEBUG_DEBUG_2		3134215	0					
ANR	3134224	Identifier	DEBUG_DEBUG_2		3134215	0					
ANR	3134225	Argument	"""Attempting to monitor log file for node %s\\n"""		3134215	1					
ANR	3134226	PrimaryExpression	"""Attempting to monitor log file for node %s\\n"""		3134215	0					
ANR	3134227	Argument	GetJobName ( )		3134215	2					
ANR	3134228	CallExpression	GetJobName ( )		3134215	0					
ANR	3134229	Callee	GetJobName		3134215	0					
ANR	3134230	Identifier	GetJobName		3134215	0					
ANR	3134231	ArgumentList			3134215	1					
ANR	3134232	IfStatement	if ( _logIsMonitored )		3134215	1					
ANR	3134233	Condition	_logIsMonitored	787:6:17963:17977	3134215	0	True				
ANR	3134234	Identifier	_logIsMonitored		3134215	0					
ANR	3134235	CompoundStatement		6:24:128:128	3134215	1					
ANR	3134236	Statement	debug_printf	788:2:17985:17996	3134215	0	True				
ANR	3134237	Statement	(	788:14:17997:17997	3134215	1	True				
ANR	3134238	Statement	DEBUG_DEBUG_1	788:16:17999:18011	3134215	2	True				
ANR	3134239	Statement	","	788:29:18012:18012	3134215	3	True				
ANR	3134240	Statement	"""Warning: log file for node """	788:31:18014:18042	3134215	4	True				
ANR	3134241	Statement	"""%s is already monitored\\n"""	789:5:18049:18075	3134215	5	True				
ANR	3134242	Statement	","	789:32:18076:18076	3134215	6	True				
ANR	3134243	Statement	GetJobName	789:34:18078:18087	3134215	7	True				
ANR	3134244	Statement	(	789:44:18088:18088	3134215	8	True				
ANR	3134245	Statement	)	789:45:18089:18089	3134215	9	True				
ANR	3134246	Statement	)	789:47:18091:18091	3134215	10	True				
ANR	3134247	ExpressionStatement		789:48:18092:18092	3134215	11	True				
ANR	3134248	ReturnStatement	return true ;	790:2:18096:18107	3134215	12	True				
ANR	3134249	Identifier	true		3134215	0					
ANR	3134250	IdentifierDeclStatement	ReadMultipleUserLogs & logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader ;	793:1:18114:18212	3134215	2	True				
ANR	3134251	IdentifierDecl	& logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134215	0					
ANR	3134252	IdentifierDeclType	ReadMultipleUserLogs &		3134215	0					
ANR	3134253	Identifier	logReader		3134215	1					
ANR	3134254	AssignmentExpression	& logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134215	2		=			
ANR	3134255	Identifier	logReader		3134215	0					
ANR	3134256	ConditionalExpression	( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134215	1					
ANR	3134257	Condition	_jobType == TYPE_CONDOR		3134215	0					
ANR	3134258	EqualityExpression	_jobType == TYPE_CONDOR		3134215	0		==			
ANR	3134259	Identifier	_jobType		3134215	0					
ANR	3134260	Identifier	TYPE_CONDOR		3134215	1					
ANR	3134261	Identifier	condorLogReader		3134215	1					
ANR	3134262	Identifier	storkLogReader		3134215	2					
ANR	3134263	IdentifierDeclStatement	MyString logFileStr ;	796:4:18219:18238	3134215	3	True				
ANR	3134264	IdentifierDecl	logFileStr		3134215	0					
ANR	3134265	IdentifierDeclType	MyString		3134215	0					
ANR	3134266	Identifier	logFileStr		3134215	1					
ANR	3134267	IfStatement	if ( _jobType == TYPE_CONDOR )		3134215	4					
ANR	3134268	Condition	_jobType == TYPE_CONDOR	797:6:18246:18268	3134215	0	True				
ANR	3134269	EqualityExpression	_jobType == TYPE_CONDOR		3134215	0		==			
ANR	3134270	Identifier	_jobType		3134215	0					
ANR	3134271	Identifier	TYPE_CONDOR		3134215	1					
ANR	3134272	CompoundStatement		16:32:419:419	3134215	1					
ANR	3134273	ExpressionStatement	"logFileStr = MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , _logFileIsXml )"	798:5:18279:18377	3134215	0	True				
ANR	3134274	AssignmentExpression	"logFileStr = MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , _logFileIsXml )"		3134215	0		=			
ANR	3134275	Identifier	logFileStr		3134215	0					
ANR	3134276	CallExpression	"MultiLogFiles :: loadLogFileNameFromSubFile ( _cmdFile , _directory , _logFileIsXml )"		3134215	1					
ANR	3134277	Callee	MultiLogFiles :: loadLogFileNameFromSubFile		3134215	0					
ANR	3134278	Identifier	MultiLogFiles :: loadLogFileNameFromSubFile		3134215	0					
ANR	3134279	ArgumentList	_cmdFile		3134215	1					
ANR	3134280	Argument	_cmdFile		3134215	0					
ANR	3134281	Identifier	_cmdFile		3134215	0					
ANR	3134282	Argument	_directory		3134215	1					
ANR	3134283	Identifier	_directory		3134215	0					
ANR	3134284	Argument	_logFileIsXml		3134215	2					
ANR	3134285	Identifier	_logFileIsXml		3134215	0					
ANR	3134286	ElseStatement	else		3134215	0					
ANR	3134287	CompoundStatement		21:2:561:668	3134215	0					
ANR	3134288	IdentifierDeclStatement	StringList logFiles ;	801:2:18391:18410	3134215	0	True				
ANR	3134289	IdentifierDecl	logFiles		3134215	0					
ANR	3134290	IdentifierDeclType	StringList		3134215	0					
ANR	3134291	Identifier	logFiles		3134215	1					
ANR	3134292	IdentifierDeclStatement	"MyString tmpResult = MultiLogFiles :: loadLogFileNamesFromStorkSubFile ( _cmdFile , _directory , logFiles ) ;"	802:2:18414:18521	3134215	1	True				
ANR	3134293	IdentifierDecl	"tmpResult = MultiLogFiles :: loadLogFileNamesFromStorkSubFile ( _cmdFile , _directory , logFiles )"		3134215	0					
ANR	3134294	IdentifierDeclType	MyString		3134215	0					
ANR	3134295	Identifier	tmpResult		3134215	1					
ANR	3134296	AssignmentExpression	"tmpResult = MultiLogFiles :: loadLogFileNamesFromStorkSubFile ( _cmdFile , _directory , logFiles )"		3134215	2		=			
ANR	3134297	Identifier	tmpResult		3134215	0					
ANR	3134298	CallExpression	"MultiLogFiles :: loadLogFileNamesFromStorkSubFile ( _cmdFile , _directory , logFiles )"		3134215	1					
ANR	3134299	Callee	MultiLogFiles :: loadLogFileNamesFromStorkSubFile		3134215	0					
ANR	3134300	Identifier	MultiLogFiles :: loadLogFileNamesFromStorkSubFile		3134215	0					
ANR	3134301	ArgumentList	_cmdFile		3134215	1					
ANR	3134302	Argument	_cmdFile		3134215	0					
ANR	3134303	Identifier	_cmdFile		3134215	0					
ANR	3134304	Argument	_directory		3134215	1					
ANR	3134305	Identifier	_directory		3134215	0					
ANR	3134306	Argument	logFiles		3134215	2					
ANR	3134307	Identifier	logFiles		3134215	0					
ANR	3134308	IfStatement	"if ( tmpResult != """" )"		3134215	2					
ANR	3134309	Condition	"tmpResult != """""	804:7:18530:18544	3134215	0	True				
ANR	3134310	EqualityExpression	"tmpResult != """""		3134215	0		!=			
ANR	3134311	Identifier	tmpResult		3134215	0					
ANR	3134312	PrimaryExpression	""""""		3134215	1					
ANR	3134313	CompoundStatement		23:25:695:695	3134215	1					
ANR	3134314	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""Error getting Stork log file: %s\\n"" , tmpResult . Value ( ) )"	805:3:18553:18643	3134215	0	True				
ANR	3134315	CallExpression	"debug_printf ( DEBUG_QUIET , ""Error getting Stork log file: %s\\n"" , tmpResult . Value ( ) )"		3134215	0					
ANR	3134316	Callee	debug_printf		3134215	0					
ANR	3134317	Identifier	debug_printf		3134215	0					
ANR	3134318	ArgumentList	DEBUG_QUIET		3134215	1					
ANR	3134319	Argument	DEBUG_QUIET		3134215	0					
ANR	3134320	Identifier	DEBUG_QUIET		3134215	0					
ANR	3134321	Argument	"""Error getting Stork log file: %s\\n"""		3134215	1					
ANR	3134322	PrimaryExpression	"""Error getting Stork log file: %s\\n"""		3134215	0					
ANR	3134323	Argument	tmpResult . Value ( )		3134215	2					
ANR	3134324	CallExpression	tmpResult . Value ( )		3134215	0					
ANR	3134325	Callee	tmpResult . Value		3134215	0					
ANR	3134326	MemberAccess	tmpResult . Value		3134215	0					
ANR	3134327	Identifier	tmpResult		3134215	0					
ANR	3134328	Identifier	Value		3134215	1					
ANR	3134329	ArgumentList			3134215	1					
ANR	3134330	ExpressionStatement	LogMonitorFailed ( )	807:3:18648:18666	3134215	1	True				
ANR	3134331	CallExpression	LogMonitorFailed ( )		3134215	0					
ANR	3134332	Callee	LogMonitorFailed		3134215	0					
ANR	3134333	Identifier	LogMonitorFailed		3134215	0					
ANR	3134334	ArgumentList			3134215	1					
ANR	3134335	ReturnStatement	return false ;	808:3:18671:18683	3134215	2	True				
ANR	3134336	Identifier	false		3134215	0					
ANR	3134337	ElseStatement	else		3134215	0					
ANR	3134338	IfStatement	if ( logFiles . number ( ) != 1 )		3134215	0					
ANR	3134339	Condition	logFiles . number ( ) != 1	809:14:18699:18720	3134215	0	True				
ANR	3134340	EqualityExpression	logFiles . number ( ) != 1		3134215	0		!=			
ANR	3134341	CallExpression	logFiles . number ( )		3134215	0					
ANR	3134342	Callee	logFiles . number		3134215	0					
ANR	3134343	MemberAccess	logFiles . number		3134215	0					
ANR	3134344	Identifier	logFiles		3134215	0					
ANR	3134345	Identifier	number		3134215	1					
ANR	3134346	ArgumentList			3134215	1					
ANR	3134347	PrimaryExpression	1		3134215	1					
ANR	3134348	CompoundStatement		28:39:871:871	3134215	1					
ANR	3134349	Statement	debug_printf	810:3:18729:18740	3134215	0	True				
ANR	3134350	Statement	(	810:15:18741:18741	3134215	1	True				
ANR	3134351	Statement	DEBUG_QUIET	810:17:18743:18753	3134215	2	True				
ANR	3134352	Statement	","	810:28:18754:18754	3134215	3	True				
ANR	3134353	Statement	"""Error: %d Stork log files found """	810:30:18756:18789	3134215	4	True				
ANR	3134354	Statement	"""in submit file %s; we want 1\\n"""	811:6:18797:18828	3134215	5	True				
ANR	3134355	Statement	","	811:38:18829:18829	3134215	6	True				
ANR	3134356	Statement	logFiles	812:6:18837:18844	3134215	7	True				
ANR	3134357	Statement	.	812:14:18845:18845	3134215	8	True				
ANR	3134358	Statement	number	812:15:18846:18851	3134215	9	True				
ANR	3134359	Statement	(	812:21:18852:18852	3134215	10	True				
ANR	3134360	Statement	)	812:22:18853:18853	3134215	11	True				
ANR	3134361	Statement	","	812:23:18854:18854	3134215	12	True				
ANR	3134362	Statement	_cmdFile	812:25:18856:18863	3134215	13	True				
ANR	3134363	Statement	)	812:34:18865:18865	3134215	14	True				
ANR	3134364	ExpressionStatement		812:35:18866:18866	3134215	15	True				
ANR	3134365	ExpressionStatement	LogMonitorFailed ( )	813:3:18871:18889	3134215	16	True				
ANR	3134366	CallExpression	LogMonitorFailed ( )		3134215	0					
ANR	3134367	Callee	LogMonitorFailed		3134215	0					
ANR	3134368	Identifier	LogMonitorFailed		3134215	0					
ANR	3134369	ArgumentList			3134215	1					
ANR	3134370	ReturnStatement	return false ;	814:3:18894:18906	3134215	17	True				
ANR	3134371	Identifier	false		3134215	0					
ANR	3134372	ElseStatement	else		3134215	0					
ANR	3134373	CompoundStatement		34:9:1064:1064	3134215	0					
ANR	3134374	ExpressionStatement	logFiles . rewind ( )	816:3:18922:18939	3134215	0	True				
ANR	3134375	CallExpression	logFiles . rewind ( )		3134215	0					
ANR	3134376	Callee	logFiles . rewind		3134215	0					
ANR	3134377	MemberAccess	logFiles . rewind		3134215	0					
ANR	3134378	Identifier	logFiles		3134215	0					
ANR	3134379	Identifier	rewind		3134215	1					
ANR	3134380	ArgumentList			3134215	1					
ANR	3134381	ExpressionStatement	logFileStr = logFiles . next ( )	817:3:18944:18972	3134215	1	True				
ANR	3134382	AssignmentExpression	logFileStr = logFiles . next ( )		3134215	0		=			
ANR	3134383	Identifier	logFileStr		3134215	0					
ANR	3134384	CallExpression	logFiles . next ( )		3134215	1					
ANR	3134385	Callee	logFiles . next		3134215	0					
ANR	3134386	MemberAccess	logFiles . next		3134215	0					
ANR	3134387	Identifier	logFiles		3134215	0					
ANR	3134388	Identifier	next		3134215	1					
ANR	3134389	ArgumentList			3134215	1					
ANR	3134390	IfStatement	"if ( logFileStr == """" )"		3134215	5					
ANR	3134391	Condition	"logFileStr == """""	821:6:18988:19003	3134215	0	True				
ANR	3134392	EqualityExpression	"logFileStr == """""		3134215	0		==			
ANR	3134393	Identifier	logFileStr		3134215	0					
ANR	3134394	PrimaryExpression	""""""		3134215	1					
ANR	3134395	CompoundStatement		40:25:1154:1154	3134215	1					
ANR	3134396	ExpressionStatement	logFileStr = defaultNodeLog	822:2:19011:19038	3134215	0	True				
ANR	3134397	AssignmentExpression	logFileStr = defaultNodeLog		3134215	0		=			
ANR	3134398	Identifier	logFileStr		3134215	0					
ANR	3134399	Identifier	defaultNodeLog		3134215	1					
ANR	3134400	ExpressionStatement	_useDefaultLog = true	823:2:19042:19063	3134215	1	True				
ANR	3134401	AssignmentExpression	_useDefaultLog = true		3134215	0		=			
ANR	3134402	Identifier	_useDefaultLog		3134215	0					
ANR	3134403	Identifier	true		3134215	1					
ANR	3134404	ExpressionStatement	_logFileIsXml = false	824:2:19067:19088	3134215	2	True				
ANR	3134405	AssignmentExpression	_logFileIsXml = false		3134215	0		=			
ANR	3134406	Identifier	_logFileIsXml		3134215	0					
ANR	3134407	Identifier	false		3134215	1					
ANR	3134408	Statement	debug_printf	825:2:19092:19103	3134215	3	True				
ANR	3134409	Statement	(	825:14:19104:19104	3134215	4	True				
ANR	3134410	Statement	DEBUG_NORMAL	825:16:19106:19117	3134215	5	True				
ANR	3134411	Statement	","	825:28:19118:19118	3134215	6	True				
ANR	3134412	Statement	"""Unable to get log file from """	825:30:19120:19149	3134215	7	True				
ANR	3134413	Statement	"""submit file %s (node %s); using default (%s)\\n"""	826:5:19156:19203	3134215	8	True				
ANR	3134414	Statement	","	826:53:19204:19204	3134215	9	True				
ANR	3134415	Statement	_cmdFile	827:5:19211:19218	3134215	10	True				
ANR	3134416	Statement	","	827:13:19219:19219	3134215	11	True				
ANR	3134417	Statement	GetJobName	827:15:19221:19230	3134215	12	True				
ANR	3134418	Statement	(	827:25:19231:19231	3134215	13	True				
ANR	3134419	Statement	)	827:26:19232:19232	3134215	14	True				
ANR	3134420	Statement	","	827:27:19233:19233	3134215	15	True				
ANR	3134421	Statement	logFileStr	827:29:19235:19244	3134215	16	True				
ANR	3134422	Statement	.	827:39:19245:19245	3134215	17	True				
ANR	3134423	Statement	Value	827:40:19246:19250	3134215	18	True				
ANR	3134424	Statement	(	827:45:19251:19251	3134215	19	True				
ANR	3134425	Statement	)	827:46:19252:19252	3134215	20	True				
ANR	3134426	Statement	)	827:48:19254:19254	3134215	21	True				
ANR	3134427	ExpressionStatement		827:49:19255:19255	3134215	22	True				
ANR	3134428	IfStatement	"if ( MultiLogFiles :: logFileNFSError ( logFileStr . Value ( ) , nfsIsError ) )"		3134215	6					
ANR	3134429	Condition	"MultiLogFiles :: logFileNFSError ( logFileStr . Value ( ) , nfsIsError )"	833:6:19449:19516	3134215	0	True				
ANR	3134430	CallExpression	"MultiLogFiles :: logFileNFSError ( logFileStr . Value ( ) , nfsIsError )"		3134215	0					
ANR	3134431	Callee	MultiLogFiles :: logFileNFSError		3134215	0					
ANR	3134432	Identifier	MultiLogFiles :: logFileNFSError		3134215	0					
ANR	3134433	ArgumentList	logFileStr . Value ( )		3134215	1					
ANR	3134434	Argument	logFileStr . Value ( )		3134215	0					
ANR	3134435	CallExpression	logFileStr . Value ( )		3134215	0					
ANR	3134436	Callee	logFileStr . Value		3134215	0					
ANR	3134437	MemberAccess	logFileStr . Value		3134215	0					
ANR	3134438	Identifier	logFileStr		3134215	0					
ANR	3134439	Identifier	Value		3134215	1					
ANR	3134440	ArgumentList			3134215	1					
ANR	3134441	Argument	nfsIsError		3134215	1					
ANR	3134442	Identifier	nfsIsError		3134215	0					
ANR	3134443	CompoundStatement		53:19:1667:1667	3134215	1					
ANR	3134444	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""Error: log file %s on NFS\\n"" , logFileStr . Value ( ) )"	835:2:19524:19607	3134215	0	True				
ANR	3134445	CallExpression	"debug_printf ( DEBUG_QUIET , ""Error: log file %s on NFS\\n"" , logFileStr . Value ( ) )"		3134215	0					
ANR	3134446	Callee	debug_printf		3134215	0					
ANR	3134447	Identifier	debug_printf		3134215	0					
ANR	3134448	ArgumentList	DEBUG_QUIET		3134215	1					
ANR	3134449	Argument	DEBUG_QUIET		3134215	0					
ANR	3134450	Identifier	DEBUG_QUIET		3134215	0					
ANR	3134451	Argument	"""Error: log file %s on NFS\\n"""		3134215	1					
ANR	3134452	PrimaryExpression	"""Error: log file %s on NFS\\n"""		3134215	0					
ANR	3134453	Argument	logFileStr . Value ( )		3134215	2					
ANR	3134454	CallExpression	logFileStr . Value ( )		3134215	0					
ANR	3134455	Callee	logFileStr . Value		3134215	0					
ANR	3134456	MemberAccess	logFileStr . Value		3134215	0					
ANR	3134457	Identifier	logFileStr		3134215	0					
ANR	3134458	Identifier	Value		3134215	1					
ANR	3134459	ArgumentList			3134215	1					
ANR	3134460	ExpressionStatement	LogMonitorFailed ( )	837:2:19611:19629	3134215	1	True				
ANR	3134461	CallExpression	LogMonitorFailed ( )		3134215	0					
ANR	3134462	Callee	LogMonitorFailed		3134215	0					
ANR	3134463	Identifier	LogMonitorFailed		3134215	0					
ANR	3134464	ArgumentList			3134215	1					
ANR	3134465	ReturnStatement	return false ;	838:2:19633:19645	3134215	2	True				
ANR	3134466	Identifier	false		3134215	0					
ANR	3134467	Statement	delete	841:1:19652:19657	3134215	7	True				
ANR	3134468	Statement	[	841:8:19659:19659	3134215	8	True				
ANR	3134469	Statement	]	841:9:19660:19660	3134215	9	True				
ANR	3134470	ExpressionStatement	_logFile	841:11:19662:19670	3134215	10	True				
ANR	3134471	Identifier	_logFile		3134215	0					
ANR	3134472	ExpressionStatement	_logFile = strnewp ( logFileStr . Value ( ) )	843:1:19733:19773	3134215	11	True				
ANR	3134473	AssignmentExpression	_logFile = strnewp ( logFileStr . Value ( ) )		3134215	0		=			
ANR	3134474	Identifier	_logFile		3134215	0					
ANR	3134475	CallExpression	strnewp ( logFileStr . Value ( ) )		3134215	1					
ANR	3134476	Callee	strnewp		3134215	0					
ANR	3134477	Identifier	strnewp		3134215	0					
ANR	3134478	ArgumentList	logFileStr . Value ( )		3134215	1					
ANR	3134479	Argument	logFileStr . Value ( )		3134215	0					
ANR	3134480	CallExpression	logFileStr . Value ( )		3134215	0					
ANR	3134481	Callee	logFileStr . Value		3134215	0					
ANR	3134482	MemberAccess	logFileStr . Value		3134215	0					
ANR	3134483	Identifier	logFileStr		3134215	0					
ANR	3134484	Identifier	Value		3134215	1					
ANR	3134485	ArgumentList			3134215	1					
ANR	3134486	ExpressionStatement	"debug_printf ( DEBUG_DEBUG_2 , ""Monitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"	844:1:19776:19879	3134215	12	True				
ANR	3134487	CallExpression	"debug_printf ( DEBUG_DEBUG_2 , ""Monitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"		3134215	0					
ANR	3134488	Callee	debug_printf		3134215	0					
ANR	3134489	Identifier	debug_printf		3134215	0					
ANR	3134490	ArgumentList	DEBUG_DEBUG_2		3134215	1					
ANR	3134491	Argument	DEBUG_DEBUG_2		3134215	0					
ANR	3134492	Identifier	DEBUG_DEBUG_2		3134215	0					
ANR	3134493	Argument	"""Monitoring log file <%s> for node %s\\n"""		3134215	1					
ANR	3134494	PrimaryExpression	"""Monitoring log file <%s> for node %s\\n"""		3134215	0					
ANR	3134495	Argument	GetLogFile ( )		3134215	2					
ANR	3134496	CallExpression	GetLogFile ( )		3134215	0					
ANR	3134497	Callee	GetLogFile		3134215	0					
ANR	3134498	Identifier	GetLogFile		3134215	0					
ANR	3134499	ArgumentList			3134215	1					
ANR	3134500	Argument	GetJobName ( )		3134215	3					
ANR	3134501	CallExpression	GetJobName ( )		3134215	0					
ANR	3134502	Callee	GetJobName		3134215	0					
ANR	3134503	Identifier	GetJobName		3134215	0					
ANR	3134504	ArgumentList			3134215	1					
ANR	3134505	IdentifierDeclStatement	CondorError errstack ;	846:1:19882:19902	3134215	13	True				
ANR	3134506	IdentifierDecl	errstack		3134215	0					
ANR	3134507	IdentifierDeclType	CondorError		3134215	0					
ANR	3134508	Identifier	errstack		3134215	1					
ANR	3134509	IfStatement	"if ( ! logReader . monitorLogFile ( GetLogFile ( ) , ! recovery , errstack ) )"		3134215	14					
ANR	3134510	Condition	"! logReader . monitorLogFile ( GetLogFile ( ) , ! recovery , errstack )"	847:6:19910:19971	3134215	0	True				
ANR	3134511	UnaryOperationExpression	"! logReader . monitorLogFile ( GetLogFile ( ) , ! recovery , errstack )"		3134215	0					
ANR	3134512	UnaryOperator	!		3134215	0					
ANR	3134513	CallExpression	"logReader . monitorLogFile ( GetLogFile ( ) , ! recovery , errstack )"		3134215	1					
ANR	3134514	Callee	logReader . monitorLogFile		3134215	0					
ANR	3134515	MemberAccess	logReader . monitorLogFile		3134215	0					
ANR	3134516	Identifier	logReader		3134215	0					
ANR	3134517	Identifier	monitorLogFile		3134215	1					
ANR	3134518	ArgumentList	GetLogFile ( )		3134215	1					
ANR	3134519	Argument	GetLogFile ( )		3134215	0					
ANR	3134520	CallExpression	GetLogFile ( )		3134215	0					
ANR	3134521	Callee	GetLogFile		3134215	0					
ANR	3134522	Identifier	GetLogFile		3134215	0					
ANR	3134523	ArgumentList			3134215	1					
ANR	3134524	Argument	! recovery		3134215	1					
ANR	3134525	UnaryOperationExpression	! recovery		3134215	0					
ANR	3134526	UnaryOperator	!		3134215	0					
ANR	3134527	Identifier	recovery		3134215	1					
ANR	3134528	Argument	errstack		3134215	2					
ANR	3134529	Identifier	errstack		3134215	0					
ANR	3134530	CompoundStatement		66:71:2122:2122	3134215	1					
ANR	3134531	ExpressionStatement	"errstack . pushf ( ""DAGMan::Job"" , DAGMAN_ERR_LOG_FILE , ""ERROR: Unable to monitor log file for node %s"" , GetJobName ( ) )"	848:2:19979:20104	3134215	0	True				
ANR	3134532	CallExpression	"errstack . pushf ( ""DAGMan::Job"" , DAGMAN_ERR_LOG_FILE , ""ERROR: Unable to monitor log file for node %s"" , GetJobName ( ) )"		3134215	0					
ANR	3134533	Callee	errstack . pushf		3134215	0					
ANR	3134534	MemberAccess	errstack . pushf		3134215	0					
ANR	3134535	Identifier	errstack		3134215	0					
ANR	3134536	Identifier	pushf		3134215	1					
ANR	3134537	ArgumentList	"""DAGMan::Job"""		3134215	1					
ANR	3134538	Argument	"""DAGMan::Job"""		3134215	0					
ANR	3134539	PrimaryExpression	"""DAGMan::Job"""		3134215	0					
ANR	3134540	Argument	DAGMAN_ERR_LOG_FILE		3134215	1					
ANR	3134541	Identifier	DAGMAN_ERR_LOG_FILE		3134215	0					
ANR	3134542	Argument	"""ERROR: Unable to monitor log file for node %s"""		3134215	2					
ANR	3134543	PrimaryExpression	"""ERROR: Unable to monitor log file for node %s"""		3134215	0					
ANR	3134544	Argument	GetJobName ( )		3134215	3					
ANR	3134545	CallExpression	GetJobName ( )		3134215	0					
ANR	3134546	Callee	GetJobName		3134215	0					
ANR	3134547	Identifier	GetJobName		3134215	0					
ANR	3134548	ArgumentList			3134215	1					
ANR	3134549	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""%s\\n"" , errstack . getFullText ( ) )"	851:2:20108:20167	3134215	1	True				
ANR	3134550	CallExpression	"debug_printf ( DEBUG_QUIET , ""%s\\n"" , errstack . getFullText ( ) )"		3134215	0					
ANR	3134551	Callee	debug_printf		3134215	0					
ANR	3134552	Identifier	debug_printf		3134215	0					
ANR	3134553	ArgumentList	DEBUG_QUIET		3134215	1					
ANR	3134554	Argument	DEBUG_QUIET		3134215	0					
ANR	3134555	Identifier	DEBUG_QUIET		3134215	0					
ANR	3134556	Argument	"""%s\\n"""		3134215	1					
ANR	3134557	PrimaryExpression	"""%s\\n"""		3134215	0					
ANR	3134558	Argument	errstack . getFullText ( )		3134215	2					
ANR	3134559	CallExpression	errstack . getFullText ( )		3134215	0					
ANR	3134560	Callee	errstack . getFullText		3134215	0					
ANR	3134561	MemberAccess	errstack . getFullText		3134215	0					
ANR	3134562	Identifier	errstack		3134215	0					
ANR	3134563	Identifier	getFullText		3134215	1					
ANR	3134564	ArgumentList			3134215	1					
ANR	3134565	ExpressionStatement	LogMonitorFailed ( )	852:2:20171:20189	3134215	2	True				
ANR	3134566	CallExpression	LogMonitorFailed ( )		3134215	0					
ANR	3134567	Callee	LogMonitorFailed		3134215	0					
ANR	3134568	Identifier	LogMonitorFailed		3134215	0					
ANR	3134569	ArgumentList			3134215	1					
ANR	3134570	ExpressionStatement	"EXCEPT ( ""Fatal log file monitoring error!\\n"" )"	853:2:20193:20239	3134215	3	True				
ANR	3134571	CallExpression	"EXCEPT ( ""Fatal log file monitoring error!\\n"" )"		3134215	0					
ANR	3134572	Callee	EXCEPT		3134215	0					
ANR	3134573	Identifier	EXCEPT		3134215	0					
ANR	3134574	ArgumentList	"""Fatal log file monitoring error!\\n"""		3134215	1					
ANR	3134575	Argument	"""Fatal log file monitoring error!\\n"""		3134215	0					
ANR	3134576	PrimaryExpression	"""Fatal log file monitoring error!\\n"""		3134215	0					
ANR	3134577	ReturnStatement	return false ;	854:2:20243:20255	3134215	4	True				
ANR	3134578	Identifier	false		3134215	0					
ANR	3134579	ExpressionStatement	_logIsMonitored = true	857:1:20262:20284	3134215	15	True				
ANR	3134580	AssignmentExpression	_logIsMonitored = true		3134215	0		=			
ANR	3134581	Identifier	_logIsMonitored		3134215	0					
ANR	3134582	Identifier	true		3134215	1					
ANR	3134583	ReturnStatement	return true ;	859:1:20288:20299	3134215	16	True				
ANR	3134584	Identifier	true		3134215	0					
ANR	3134585	ReturnType	bool		3134215	1					
ANR	3134586	Identifier	Job :: MonitorLogFile		3134215	2					
ANR	3134587	ParameterList	"ReadMultipleUserLogs & condorLogReader , ReadMultipleUserLogs & storkLogReader , bool nfsIsError , bool recovery , const char * defaultNodeLog"		3134215	3					
ANR	3134588	Parameter	ReadMultipleUserLogs & condorLogReader	779:21:17708:17744	3134215	0	True				
ANR	3134589	ParameterType	ReadMultipleUserLogs &		3134215	0					
ANR	3134590	Identifier	condorLogReader		3134215	1					
ANR	3134591	Parameter	ReadMultipleUserLogs & storkLogReader	780:3:17750:17785	3134215	1	True				
ANR	3134592	ParameterType	ReadMultipleUserLogs &		3134215	0					
ANR	3134593	Identifier	storkLogReader		3134215	1					
ANR	3134594	Parameter	bool nfsIsError	780:41:17788:17802	3134215	2	True				
ANR	3134595	ParameterType	bool		3134215	0					
ANR	3134596	Identifier	nfsIsError		3134215	1					
ANR	3134597	Parameter	bool recovery	781:3:17808:17820	3134215	3	True				
ANR	3134598	ParameterType	bool		3134215	0					
ANR	3134599	Identifier	recovery		3134215	1					
ANR	3134600	Parameter	const char * defaultNodeLog	781:18:17823:17848	3134215	4	True				
ANR	3134601	ParameterType	const char *		3134215	0					
ANR	3134602	Identifier	defaultNodeLog		3134215	1					
ANR	3134603	CFGEntryNode	ENTRY		3134215		True				
ANR	3134604	CFGExitNode	EXIT		3134215		True				
ANR	3134605	Symbol	TYPE_CONDOR		3134215						
ANR	3134606	Symbol	_jobType		3134215						
ANR	3134607	Symbol	_logFile		3134215						
ANR	3134608	Symbol	logFiles . number		3134215						
ANR	3134609	Symbol	recovery		3134215						
ANR	3134610	Symbol	_logIsMonitored		3134215						
ANR	3134611	Symbol	_directory		3134215						
ANR	3134612	Symbol	DEBUG_QUIET		3134215						
ANR	3134613	Symbol	storkLogReader		3134215						
ANR	3134614	Symbol	logFileStr . Value		3134215						
ANR	3134615	Symbol	_useDefaultLog		3134215						
ANR	3134616	Symbol	DEBUG_DEBUG_2		3134215						
ANR	3134617	Symbol	strnewp		3134215						
ANR	3134618	Symbol	tmpResult		3134215						
ANR	3134619	Symbol	defaultNodeLog		3134215						
ANR	3134620	Symbol	MultiLogFiles :: loadLogFileNameFromSubFile		3134215						
ANR	3134621	Symbol	logFiles . next		3134215						
ANR	3134622	Symbol	_logFileIsXml		3134215						
ANR	3134623	Symbol	nfsIsError		3134215						
ANR	3134624	Symbol	false		3134215						
ANR	3134625	Symbol	DAGMAN_ERR_LOG_FILE		3134215						
ANR	3134626	Symbol	logReader		3134215						
ANR	3134627	Symbol	_cmdFile		3134215						
ANR	3134628	Symbol	condorLogReader		3134215						
ANR	3134629	Symbol	logFileStr		3134215						
ANR	3134630	Symbol	logFiles		3134215						
ANR	3134631	Symbol	errstack		3134215						
ANR	3134632	Symbol	GetJobName		3134215						
ANR	3134633	Symbol	true		3134215						
ANR	3134634	Symbol	MultiLogFiles :: logFileNFSError		3134215						
ANR	3134635	Symbol	errstack . getFullText		3134215						
ANR	3134636	Symbol	tmpResult . Value		3134215						
ANR	3134637	Symbol	GetLogFile		3134215						
ANR	3134638	Symbol	MultiLogFiles :: loadLogFileNamesFromStorkSubFile		3134215						
ANR	3134639	Symbol	logReader . monitorLogFile		3134215						
ANR	3134640	Function	Job :: UnmonitorLogFile	863:0:20382:21438							
ANR	3134641	FunctionDef	"Job :: UnmonitorLogFile (ReadMultipleUserLogs & condorLogReader , ReadMultipleUserLogs & storkLogReader)"		3134640	0					
ANR	3134642	CompoundStatement		866:0:20491:21438	3134640	0					
ANR	3134643	ExpressionStatement	"debug_printf ( DEBUG_DEBUG_2 , ""Unmonitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"	867:1:20494:20599	3134640	0	True				
ANR	3134644	CallExpression	"debug_printf ( DEBUG_DEBUG_2 , ""Unmonitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"		3134640	0					
ANR	3134645	Callee	debug_printf		3134640	0					
ANR	3134646	Identifier	debug_printf		3134640	0					
ANR	3134647	ArgumentList	DEBUG_DEBUG_2		3134640	1					
ANR	3134648	Argument	DEBUG_DEBUG_2		3134640	0					
ANR	3134649	Identifier	DEBUG_DEBUG_2		3134640	0					
ANR	3134650	Argument	"""Unmonitoring log file <%s> for node %s\\n"""		3134640	1					
ANR	3134651	PrimaryExpression	"""Unmonitoring log file <%s> for node %s\\n"""		3134640	0					
ANR	3134652	Argument	GetLogFile ( )		3134640	2					
ANR	3134653	CallExpression	GetLogFile ( )		3134640	0					
ANR	3134654	Callee	GetLogFile		3134640	0					
ANR	3134655	Identifier	GetLogFile		3134640	0					
ANR	3134656	ArgumentList			3134640	1					
ANR	3134657	Argument	GetJobName ( )		3134640	3					
ANR	3134658	CallExpression	GetJobName ( )		3134640	0					
ANR	3134659	Callee	GetJobName		3134640	0					
ANR	3134660	Identifier	GetJobName		3134640	0					
ANR	3134661	ArgumentList			3134640	1					
ANR	3134662	IfStatement	if ( ! _logIsMonitored )		3134640	1					
ANR	3134663	Condition	! _logIsMonitored	870:6:20608:20623	3134640	0	True				
ANR	3134664	UnaryOperationExpression	! _logIsMonitored		3134640	0					
ANR	3134665	UnaryOperator	!		3134640	0					
ANR	3134666	Identifier	_logIsMonitored		3134640	1					
ANR	3134667	CompoundStatement		5:25:135:135	3134640	1					
ANR	3134668	Statement	debug_printf	871:2:20631:20642	3134640	0	True				
ANR	3134669	Statement	(	871:14:20643:20643	3134640	1	True				
ANR	3134670	Statement	DEBUG_DEBUG_1	871:16:20645:20657	3134640	2	True				
ANR	3134671	Statement	","	871:29:20658:20658	3134640	3	True				
ANR	3134672	Statement	"""Warning: log file for node """	871:31:20660:20688	3134640	4	True				
ANR	3134673	Statement	"""%s is already unmonitored\\n"""	872:5:20695:20723	3134640	5	True				
ANR	3134674	Statement	","	872:34:20724:20724	3134640	6	True				
ANR	3134675	Statement	GetJobName	872:36:20726:20735	3134640	7	True				
ANR	3134676	Statement	(	872:46:20736:20736	3134640	8	True				
ANR	3134677	Statement	)	872:47:20737:20737	3134640	9	True				
ANR	3134678	Statement	)	872:49:20739:20739	3134640	10	True				
ANR	3134679	ExpressionStatement		872:50:20740:20740	3134640	11	True				
ANR	3134680	ReturnStatement	return true ;	873:2:20744:20755	3134640	12	True				
ANR	3134681	Identifier	true		3134640	0					
ANR	3134682	IdentifierDeclStatement	ReadMultipleUserLogs & logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader ;	876:1:20762:20860	3134640	2	True				
ANR	3134683	IdentifierDecl	& logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134640	0					
ANR	3134684	IdentifierDeclType	ReadMultipleUserLogs &		3134640	0					
ANR	3134685	Identifier	logReader		3134640	1					
ANR	3134686	AssignmentExpression	& logReader = ( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134640	2		=			
ANR	3134687	Identifier	logReader		3134640	0					
ANR	3134688	ConditionalExpression	( _jobType == TYPE_CONDOR ) ? condorLogReader : storkLogReader		3134640	1					
ANR	3134689	Condition	_jobType == TYPE_CONDOR		3134640	0					
ANR	3134690	EqualityExpression	_jobType == TYPE_CONDOR		3134640	0		==			
ANR	3134691	Identifier	_jobType		3134640	0					
ANR	3134692	Identifier	TYPE_CONDOR		3134640	1					
ANR	3134693	Identifier	condorLogReader		3134640	1					
ANR	3134694	Identifier	storkLogReader		3134640	2					
ANR	3134695	ExpressionStatement	"debug_printf ( DEBUG_DEBUG_1 , ""Unmonitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"	879:1:20864:20969	3134640	3	True				
ANR	3134696	CallExpression	"debug_printf ( DEBUG_DEBUG_1 , ""Unmonitoring log file <%s> for node %s\\n"" , GetLogFile ( ) , GetJobName ( ) )"		3134640	0					
ANR	3134697	Callee	debug_printf		3134640	0					
ANR	3134698	Identifier	debug_printf		3134640	0					
ANR	3134699	ArgumentList	DEBUG_DEBUG_1		3134640	1					
ANR	3134700	Argument	DEBUG_DEBUG_1		3134640	0					
ANR	3134701	Identifier	DEBUG_DEBUG_1		3134640	0					
ANR	3134702	Argument	"""Unmonitoring log file <%s> for node %s\\n"""		3134640	1					
ANR	3134703	PrimaryExpression	"""Unmonitoring log file <%s> for node %s\\n"""		3134640	0					
ANR	3134704	Argument	GetLogFile ( )		3134640	2					
ANR	3134705	CallExpression	GetLogFile ( )		3134640	0					
ANR	3134706	Callee	GetLogFile		3134640	0					
ANR	3134707	Identifier	GetLogFile		3134640	0					
ANR	3134708	ArgumentList			3134640	1					
ANR	3134709	Argument	GetJobName ( )		3134640	3					
ANR	3134710	CallExpression	GetJobName ( )		3134640	0					
ANR	3134711	Callee	GetJobName		3134640	0					
ANR	3134712	Identifier	GetJobName		3134640	0					
ANR	3134713	ArgumentList			3134640	1					
ANR	3134714	IdentifierDeclStatement	CondorError errstack ;	882:1:20973:20993	3134640	4	True				
ANR	3134715	IdentifierDecl	errstack		3134640	0					
ANR	3134716	IdentifierDeclType	CondorError		3134640	0					
ANR	3134717	Identifier	errstack		3134640	1					
ANR	3134718	IdentifierDeclStatement	"bool result = logReader . unmonitorLogFile ( GetLogFile ( ) , errstack ) ;"	883:1:20996:21062	3134640	5	True				
ANR	3134719	IdentifierDecl	"result = logReader . unmonitorLogFile ( GetLogFile ( ) , errstack )"		3134640	0					
ANR	3134720	IdentifierDeclType	bool		3134640	0					
ANR	3134721	Identifier	result		3134640	1					
ANR	3134722	AssignmentExpression	"result = logReader . unmonitorLogFile ( GetLogFile ( ) , errstack )"		3134640	2		=			
ANR	3134723	Identifier	result		3134640	0					
ANR	3134724	CallExpression	"logReader . unmonitorLogFile ( GetLogFile ( ) , errstack )"		3134640	1					
ANR	3134725	Callee	logReader . unmonitorLogFile		3134640	0					
ANR	3134726	MemberAccess	logReader . unmonitorLogFile		3134640	0					
ANR	3134727	Identifier	logReader		3134640	0					
ANR	3134728	Identifier	unmonitorLogFile		3134640	1					
ANR	3134729	ArgumentList	GetLogFile ( )		3134640	1					
ANR	3134730	Argument	GetLogFile ( )		3134640	0					
ANR	3134731	CallExpression	GetLogFile ( )		3134640	0					
ANR	3134732	Callee	GetLogFile		3134640	0					
ANR	3134733	Identifier	GetLogFile		3134640	0					
ANR	3134734	ArgumentList			3134640	1					
ANR	3134735	Argument	errstack		3134640	1					
ANR	3134736	Identifier	errstack		3134640	0					
ANR	3134737	IfStatement	if ( ! result )		3134640	6					
ANR	3134738	Condition	! result	884:6:21070:21076	3134640	0	True				
ANR	3134739	UnaryOperationExpression	! result		3134640	0					
ANR	3134740	UnaryOperator	!		3134640	0					
ANR	3134741	Identifier	result		3134640	1					
ANR	3134742	CompoundStatement		19:16:588:588	3134640	1					
ANR	3134743	Statement	errstack	885:2:21084:21091	3134640	0	True				
ANR	3134744	Statement	.	885:10:21092:21092	3134640	1	True				
ANR	3134745	Statement	pushf	885:11:21093:21097	3134640	2	True				
ANR	3134746	Statement	(	885:16:21098:21098	3134640	3	True				
ANR	3134747	Statement	"""DAGMan::Job"""	885:18:21100:21112	3134640	4	True				
ANR	3134748	Statement	","	885:31:21113:21113	3134640	5	True				
ANR	3134749	Statement	DAGMAN_ERR_LOG_FILE	885:33:21115:21133	3134640	6	True				
ANR	3134750	Statement	","	885:52:21134:21134	3134640	7	True				
ANR	3134751	Statement	"""ERROR: Unable to unmonitor log """	886:5:21141:21173	3134640	8	True				
ANR	3134752	Statement	"""file for node %s"""	886:39:21175:21192	3134640	9	True				
ANR	3134753	Statement	","	886:57:21193:21193	3134640	10	True				
ANR	3134754	Statement	GetJobName	887:5:21200:21209	3134640	11	True				
ANR	3134755	Statement	(	887:15:21210:21210	3134640	12	True				
ANR	3134756	Statement	)	887:16:21211:21211	3134640	13	True				
ANR	3134757	Statement	)	887:18:21213:21213	3134640	14	True				
ANR	3134758	ExpressionStatement		887:19:21214:21214	3134640	15	True				
ANR	3134759	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""%s\\n"" , errstack . getFullText ( ) )"	888:2:21218:21277	3134640	16	True				
ANR	3134760	CallExpression	"debug_printf ( DEBUG_QUIET , ""%s\\n"" , errstack . getFullText ( ) )"		3134640	0					
ANR	3134761	Callee	debug_printf		3134640	0					
ANR	3134762	Identifier	debug_printf		3134640	0					
ANR	3134763	ArgumentList	DEBUG_QUIET		3134640	1					
ANR	3134764	Argument	DEBUG_QUIET		3134640	0					
ANR	3134765	Identifier	DEBUG_QUIET		3134640	0					
ANR	3134766	Argument	"""%s\\n"""		3134640	1					
ANR	3134767	PrimaryExpression	"""%s\\n"""		3134640	0					
ANR	3134768	Argument	errstack . getFullText ( )		3134640	2					
ANR	3134769	CallExpression	errstack . getFullText ( )		3134640	0					
ANR	3134770	Callee	errstack . getFullText		3134640	0					
ANR	3134771	MemberAccess	errstack . getFullText		3134640	0					
ANR	3134772	Identifier	errstack		3134640	0					
ANR	3134773	Identifier	getFullText		3134640	1					
ANR	3134774	ArgumentList			3134640	1					
ANR	3134775	ExpressionStatement	"EXCEPT ( ""Fatal log file monitoring error!\\n"" )"	889:2:21281:21327	3134640	17	True				
ANR	3134776	CallExpression	"EXCEPT ( ""Fatal log file monitoring error!\\n"" )"		3134640	0					
ANR	3134777	Callee	EXCEPT		3134640	0					
ANR	3134778	Identifier	EXCEPT		3134640	0					
ANR	3134779	ArgumentList	"""Fatal log file monitoring error!\\n"""		3134640	1					
ANR	3134780	Argument	"""Fatal log file monitoring error!\\n"""		3134640	0					
ANR	3134781	PrimaryExpression	"""Fatal log file monitoring error!\\n"""		3134640	0					
ANR	3134782	IfStatement	if ( result )		3134640	7					
ANR	3134783	Condition	result	892:6:21339:21344	3134640	0	True				
ANR	3134784	Identifier	result		3134640	0					
ANR	3134785	CompoundStatement		27:15:856:856	3134640	1					
ANR	3134786	Statement	delete	893:2:21352:21357	3134640	0	True				
ANR	3134787	Statement	[	893:9:21359:21359	3134640	1	True				
ANR	3134788	Statement	]	893:10:21360:21360	3134640	2	True				
ANR	3134789	ExpressionStatement	_logFile	893:12:21362:21370	3134640	3	True				
ANR	3134790	Identifier	_logFile		3134640	0					
ANR	3134791	ExpressionStatement	_logFile = NULL	894:2:21374:21389	3134640	4	True				
ANR	3134792	AssignmentExpression	_logFile = NULL		3134640	0		=			
ANR	3134793	Identifier	_logFile		3134640	0					
ANR	3134794	Identifier	NULL		3134640	1					
ANR	3134795	ExpressionStatement	_logIsMonitored = false	895:2:21393:21416	3134640	5	True				
ANR	3134796	AssignmentExpression	_logIsMonitored = false		3134640	0		=			
ANR	3134797	Identifier	_logIsMonitored		3134640	0					
ANR	3134798	Identifier	false		3134640	1					
ANR	3134799	ReturnStatement	return result ;	898:1:21423:21436	3134640	8	True				
ANR	3134800	Identifier	result		3134640	0					
ANR	3134801	ReturnType	bool		3134640	1					
ANR	3134802	Identifier	Job :: UnmonitorLogFile		3134640	2					
ANR	3134803	ParameterList	"ReadMultipleUserLogs & condorLogReader , ReadMultipleUserLogs & storkLogReader"		3134640	3					
ANR	3134804	Parameter	ReadMultipleUserLogs & condorLogReader	864:23:20410:20446	3134640	0	True				
ANR	3134805	ParameterType	ReadMultipleUserLogs &		3134640	0					
ANR	3134806	Identifier	condorLogReader		3134640	1					
ANR	3134807	Parameter	ReadMultipleUserLogs & storkLogReader	865:3:20452:20487	3134640	1	True				
ANR	3134808	ParameterType	ReadMultipleUserLogs &		3134640	0					
ANR	3134809	Identifier	storkLogReader		3134640	1					
ANR	3134810	CFGEntryNode	ENTRY		3134640		True				
ANR	3134811	CFGExitNode	EXIT		3134640		True				
ANR	3134812	Symbol	TYPE_CONDOR		3134640						
ANR	3134813	Symbol	_jobType		3134640						
ANR	3134814	Symbol	logReader . unmonitorLogFile		3134640						
ANR	3134815	Symbol	NULL		3134640						
ANR	3134816	Symbol	_logFile		3134640						
ANR	3134817	Symbol	false		3134640						
ANR	3134818	Symbol	logReader		3134640						
ANR	3134819	Symbol	_logIsMonitored		3134640						
ANR	3134820	Symbol	DEBUG_QUIET		3134640						
ANR	3134821	Symbol	storkLogReader		3134640						
ANR	3134822	Symbol	result		3134640						
ANR	3134823	Symbol	condorLogReader		3134640						
ANR	3134824	Symbol	errstack		3134640						
ANR	3134825	Symbol	GetJobName		3134640						
ANR	3134826	Symbol	DEBUG_DEBUG_2		3134640						
ANR	3134827	Symbol	true		3134640						
ANR	3134828	Symbol	errstack . getFullText		3134640						
ANR	3134829	Symbol	DEBUG_DEBUG_1		3134640						
ANR	3134830	Symbol	GetLogFile		3134640						
ANR	3134831	Function	Job :: LogMonitorFailed	902:0:21519:21881							
ANR	3134832	FunctionDef	Job :: LogMonitorFailed ()		3134831	0					
ANR	3134833	CompoundStatement		904:0:21548:21881	3134831	0					
ANR	3134834	IfStatement	if ( _Status != Job :: STATUS_ERROR )		3134831	0					
ANR	3134835	Condition	_Status != Job :: STATUS_ERROR	905:6:21556:21583	3134831	0	True				
ANR	3134836	EqualityExpression	_Status != Job :: STATUS_ERROR		3134831	0		!=			
ANR	3134837	Identifier	_Status		3134831	0					
ANR	3134838	Identifier	Job :: STATUS_ERROR		3134831	1					
ANR	3134839	CompoundStatement		2:37:38:38	3134831	1					
ANR	3134840	ExpressionStatement	_Status = Job :: STATUS_ERROR	906:2:21591:21618	3134831	0	True				
ANR	3134841	AssignmentExpression	_Status = Job :: STATUS_ERROR		3134831	0		=			
ANR	3134842	Identifier	_Status		3134831	0					
ANR	3134843	Identifier	Job :: STATUS_ERROR		3134831	1					
ANR	3134844	ExpressionStatement	"snprintf ( error_text , JOB_ERROR_TEXT_MAXLEN , ""Unable to monitor node job log file"" )"	907:2:21622:21711	3134831	1	True				
ANR	3134845	CallExpression	"snprintf ( error_text , JOB_ERROR_TEXT_MAXLEN , ""Unable to monitor node job log file"" )"		3134831	0					
ANR	3134846	Callee	snprintf		3134831	0					
ANR	3134847	Identifier	snprintf		3134831	0					
ANR	3134848	ArgumentList	error_text		3134831	1					
ANR	3134849	Argument	error_text		3134831	0					
ANR	3134850	Identifier	error_text		3134831	0					
ANR	3134851	Argument	JOB_ERROR_TEXT_MAXLEN		3134831	1					
ANR	3134852	Identifier	JOB_ERROR_TEXT_MAXLEN		3134831	0					
ANR	3134853	Argument	"""Unable to monitor node job log file"""		3134831	2					
ANR	3134854	PrimaryExpression	"""Unable to monitor node job log file"""		3134831	0					
ANR	3134855	ExpressionStatement	retval = Dag :: DAG_ERROR_LOG_MONITOR_ERROR	909:2:21715:21756	3134831	2	True				
ANR	3134856	AssignmentExpression	retval = Dag :: DAG_ERROR_LOG_MONITOR_ERROR		3134831	0		=			
ANR	3134857	Identifier	retval		3134831	0					
ANR	3134858	Identifier	Dag :: DAG_ERROR_LOG_MONITOR_ERROR		3134831	1					
ANR	3134859	IfStatement	if ( _scriptPost != NULL )		3134831	3					
ANR	3134860	Condition	_scriptPost != NULL	910:7:21765:21783	3134831	0	True				
ANR	3134861	EqualityExpression	_scriptPost != NULL		3134831	0		!=			
ANR	3134862	Identifier	_scriptPost		3134831	0					
ANR	3134863	Identifier	NULL		3134831	1					
ANR	3134864	CompoundStatement		7:28:237:237	3134831	1					
ANR	3134865	ExpressionStatement	_scriptPost -> _retValJob = retval	912:3:21840:21872	3134831	0	True				
ANR	3134866	AssignmentExpression	_scriptPost -> _retValJob = retval		3134831	0		=			
ANR	3134867	PtrMemberAccess	_scriptPost -> _retValJob		3134831	0					
ANR	3134868	Identifier	_scriptPost		3134831	0					
ANR	3134869	Identifier	_retValJob		3134831	1					
ANR	3134870	Identifier	retval		3134831	1					
ANR	3134871	ReturnType	void		3134831	1					
ANR	3134872	Identifier	Job :: LogMonitorFailed		3134831	2					
ANR	3134873	ParameterList			3134831	3					
ANR	3134874	CFGEntryNode	ENTRY		3134831		True				
ANR	3134875	CFGExitNode	EXIT		3134831		True				
ANR	3134876	Symbol	_scriptPost -> _retValJob		3134831						
ANR	3134877	Symbol	error_text		3134831						
ANR	3134878	Symbol	_Status		3134831						
ANR	3134879	Symbol	JOB_ERROR_TEXT_MAXLEN		3134831						
ANR	3134880	Symbol	NULL		3134831						
ANR	3134881	Symbol	_scriptPost		3134831						
ANR	3134882	Symbol	* _scriptPost		3134831						
ANR	3134883	Symbol	Job :: STATUS_ERROR		3134831						
ANR	3134884	Symbol	Dag :: DAG_ERROR_LOG_MONITOR_ERROR		3134831						
ANR	3134885	Symbol	retval		3134831						
ANR	3134886	Function	Job :: GetJobstateJobTag	918:0:21962:22866							
ANR	3134887	FunctionDef	Job :: GetJobstateJobTag ()		3134886	0					
ANR	3134888	CompoundStatement		920:0:22000:22866	3134886	0					
ANR	3134889	IfStatement	if ( ! _jobTag )		3134886	0					
ANR	3134890	Condition	! _jobTag	921:6:22008:22015	3134886	0	True				
ANR	3134891	UnaryOperationExpression	! _jobTag		3134886	0					
ANR	3134892	UnaryOperator	!		3134886	0					
ANR	3134893	Identifier	_jobTag		3134886	1					
ANR	3134894	CompoundStatement		15:2:419:524	3134886	1					
ANR	3134895	IdentifierDeclStatement	"MyString jobTagName = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , JOB_TAG_NAME ) ;"	922:2:22023:22123	3134886	0	True				
ANR	3134896	IdentifierDecl	"jobTagName = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , JOB_TAG_NAME )"		3134886	0					
ANR	3134897	IdentifierDeclType	MyString		3134886	0					
ANR	3134898	Identifier	jobTagName		3134886	1					
ANR	3134899	AssignmentExpression	"jobTagName = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , JOB_TAG_NAME )"		3134886	2		=			
ANR	3134900	Identifier	jobTagName		3134886	0					
ANR	3134901	CallExpression	"MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , JOB_TAG_NAME )"		3134886	1					
ANR	3134902	Callee	MultiLogFiles :: loadValueFromSubFile		3134886	0					
ANR	3134903	Identifier	MultiLogFiles :: loadValueFromSubFile		3134886	0					
ANR	3134904	ArgumentList	_cmdFile		3134886	1					
ANR	3134905	Argument	_cmdFile		3134886	0					
ANR	3134906	Identifier	_cmdFile		3134886	0					
ANR	3134907	Argument	_directory		3134886	1					
ANR	3134908	Identifier	_directory		3134886	0					
ANR	3134909	Argument	JOB_TAG_NAME		3134886	2					
ANR	3134910	Identifier	JOB_TAG_NAME		3134886	0					
ANR	3134911	IfStatement	"if ( jobTagName == """" )"		3134886	1					
ANR	3134912	Condition	"jobTagName == """""	924:7:22132:22147	3134886	0	True				
ANR	3134913	EqualityExpression	"jobTagName == """""		3134886	0		==			
ANR	3134914	Identifier	jobTagName		3134886	0					
ANR	3134915	PrimaryExpression	""""""		3134886	1					
ANR	3134916	CompoundStatement		5:26:150:150	3134886	1					
ANR	3134917	ExpressionStatement	jobTagName = PEGASUS_SITE	925:3:22156:22181	3134886	0	True				
ANR	3134918	AssignmentExpression	jobTagName = PEGASUS_SITE		3134886	0		=			
ANR	3134919	Identifier	jobTagName		3134886	0					
ANR	3134920	Identifier	PEGASUS_SITE		3134886	1					
ANR	3134921	ElseStatement	else		3134886	0					
ANR	3134922	CompoundStatement		11:3:309:361	3134886	0					
ANR	3134923	IdentifierDeclStatement	"int begin = jobTagName [ 0 ] == '\\""' ? 1 : 0 ;"	928:3:22225:22266	3134886	0	True				
ANR	3134924	IdentifierDecl	"begin = jobTagName [ 0 ] == '\\""' ? 1 : 0"		3134886	0					
ANR	3134925	IdentifierDeclType	int		3134886	0					
ANR	3134926	Identifier	begin		3134886	1					
ANR	3134927	AssignmentExpression	"begin = jobTagName [ 0 ] == '\\""' ? 1 : 0"		3134886	2		=			
ANR	3134928	Identifier	begin		3134886	0					
ANR	3134929	ConditionalExpression	"jobTagName [ 0 ] == '\\""' ? 1 : 0"		3134886	1					
ANR	3134930	Condition	"jobTagName [ 0 ] == '\\""'"		3134886	0					
ANR	3134931	EqualityExpression	"jobTagName [ 0 ] == '\\""'"		3134886	0		==			
ANR	3134932	ArrayIndexing	jobTagName [ 0 ]		3134886	0					
ANR	3134933	Identifier	jobTagName		3134886	0					
ANR	3134934	PrimaryExpression	0		3134886	1					
ANR	3134935	PrimaryExpression	"'\\""'"		3134886	1					
ANR	3134936	PrimaryExpression	1		3134886	1					
ANR	3134937	PrimaryExpression	0		3134886	2					
ANR	3134938	IdentifierDeclStatement	int last = jobTagName . Length ( ) - 1 ;	929:3:22271:22305	3134886	1	True				
ANR	3134939	IdentifierDecl	last = jobTagName . Length ( ) - 1		3134886	0					
ANR	3134940	IdentifierDeclType	int		3134886	0					
ANR	3134941	Identifier	last		3134886	1					
ANR	3134942	AssignmentExpression	last = jobTagName . Length ( ) - 1		3134886	2		=			
ANR	3134943	Identifier	last		3134886	0					
ANR	3134944	AdditiveExpression	jobTagName . Length ( ) - 1		3134886	1		-			
ANR	3134945	CallExpression	jobTagName . Length ( )		3134886	0					
ANR	3134946	Callee	jobTagName . Length		3134886	0					
ANR	3134947	MemberAccess	jobTagName . Length		3134886	0					
ANR	3134948	Identifier	jobTagName		3134886	0					
ANR	3134949	Identifier	Length		3134886	1					
ANR	3134950	ArgumentList			3134886	1					
ANR	3134951	PrimaryExpression	1		3134886	1					
ANR	3134952	IdentifierDeclStatement	"int end = jobTagName [ last ] == '\\""' ? last - 1 : last ;"	930:3:22310:22362	3134886	2	True				
ANR	3134953	IdentifierDecl	"end = jobTagName [ last ] == '\\""' ? last - 1 : last"		3134886	0					
ANR	3134954	IdentifierDeclType	int		3134886	0					
ANR	3134955	Identifier	end		3134886	1					
ANR	3134956	AssignmentExpression	"end = jobTagName [ last ] == '\\""' ? last - 1 : last"		3134886	2		=			
ANR	3134957	Identifier	end		3134886	0					
ANR	3134958	ConditionalExpression	"jobTagName [ last ] == '\\""' ? last - 1 : last"		3134886	1					
ANR	3134959	Condition	"jobTagName [ last ] == '\\""'"		3134886	0					
ANR	3134960	EqualityExpression	"jobTagName [ last ] == '\\""'"		3134886	0		==			
ANR	3134961	ArrayIndexing	jobTagName [ last ]		3134886	0					
ANR	3134962	Identifier	jobTagName		3134886	0					
ANR	3134963	Identifier	last		3134886	1					
ANR	3134964	PrimaryExpression	"'\\""'"		3134886	1					
ANR	3134965	AdditiveExpression	last - 1		3134886	1		-			
ANR	3134966	Identifier	last		3134886	0					
ANR	3134967	PrimaryExpression	1		3134886	1					
ANR	3134968	Identifier	last		3134886	2					
ANR	3134969	ExpressionStatement	"jobTagName = jobTagName . Substr ( begin , end )"	931:3:22367:22411	3134886	3	True				
ANR	3134970	AssignmentExpression	"jobTagName = jobTagName . Substr ( begin , end )"		3134886	0		=			
ANR	3134971	Identifier	jobTagName		3134886	0					
ANR	3134972	CallExpression	"jobTagName . Substr ( begin , end )"		3134886	1					
ANR	3134973	Callee	jobTagName . Substr		3134886	0					
ANR	3134974	MemberAccess	jobTagName . Substr		3134886	0					
ANR	3134975	Identifier	jobTagName		3134886	0					
ANR	3134976	Identifier	Substr		3134886	1					
ANR	3134977	ArgumentList	begin		3134886	1					
ANR	3134978	Argument	begin		3134886	0					
ANR	3134979	Identifier	begin		3134886	0					
ANR	3134980	Argument	end		3134886	1					
ANR	3134981	Identifier	end		3134886	0					
ANR	3134982	IdentifierDeclStatement	"MyString tmpJobTag = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , jobTagName . Value ( ) ) ;"	934:2:22420:22525	3134886	2	True				
ANR	3134983	IdentifierDecl	"tmpJobTag = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , jobTagName . Value ( ) )"		3134886	0					
ANR	3134984	IdentifierDeclType	MyString		3134886	0					
ANR	3134985	Identifier	tmpJobTag		3134886	1					
ANR	3134986	AssignmentExpression	"tmpJobTag = MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , jobTagName . Value ( ) )"		3134886	2		=			
ANR	3134987	Identifier	tmpJobTag		3134886	0					
ANR	3134988	CallExpression	"MultiLogFiles :: loadValueFromSubFile ( _cmdFile , _directory , jobTagName . Value ( ) )"		3134886	1					
ANR	3134989	Callee	MultiLogFiles :: loadValueFromSubFile		3134886	0					
ANR	3134990	Identifier	MultiLogFiles :: loadValueFromSubFile		3134886	0					
ANR	3134991	ArgumentList	_cmdFile		3134886	1					
ANR	3134992	Argument	_cmdFile		3134886	0					
ANR	3134993	Identifier	_cmdFile		3134886	0					
ANR	3134994	Argument	_directory		3134886	1					
ANR	3134995	Identifier	_directory		3134886	0					
ANR	3134996	Argument	jobTagName . Value ( )		3134886	2					
ANR	3134997	CallExpression	jobTagName . Value ( )		3134886	0					
ANR	3134998	Callee	jobTagName . Value		3134886	0					
ANR	3134999	MemberAccess	jobTagName . Value		3134886	0					
ANR	3135000	Identifier	jobTagName		3134886	0					
ANR	3135001	Identifier	Value		3134886	1					
ANR	3135002	ArgumentList			3134886	1					
ANR	3135003	IfStatement	"if ( tmpJobTag == """" )"		3134886	3					
ANR	3135004	Condition	"tmpJobTag == """""	936:7:22534:22548	3134886	0	True				
ANR	3135005	EqualityExpression	"tmpJobTag == """""		3134886	0		==			
ANR	3135006	Identifier	tmpJobTag		3134886	0					
ANR	3135007	PrimaryExpression	""""""		3134886	1					
ANR	3135008	CompoundStatement		17:25:551:551	3134886	1					
ANR	3135009	ExpressionStatement	"tmpJobTag = ""-"""	937:3:22557:22572	3134886	0	True				
ANR	3135010	AssignmentExpression	"tmpJobTag = ""-"""		3134886	0		=			
ANR	3135011	Identifier	tmpJobTag		3134886	0					
ANR	3135012	PrimaryExpression	"""-"""		3134886	1					
ANR	3135013	ElseStatement	else		3134886	0					
ANR	3135014	CompoundStatement		23:3:698:749	3134886	0					
ANR	3135015	IdentifierDeclStatement	"int begin = tmpJobTag [ 0 ] == '\\""' ? 1 : 0 ;"	940:3:22616:22656	3134886	0	True				
ANR	3135016	IdentifierDecl	"begin = tmpJobTag [ 0 ] == '\\""' ? 1 : 0"		3134886	0					
ANR	3135017	IdentifierDeclType	int		3134886	0					
ANR	3135018	Identifier	begin		3134886	1					
ANR	3135019	AssignmentExpression	"begin = tmpJobTag [ 0 ] == '\\""' ? 1 : 0"		3134886	2		=			
ANR	3135020	Identifier	begin		3134886	0					
ANR	3135021	ConditionalExpression	"tmpJobTag [ 0 ] == '\\""' ? 1 : 0"		3134886	1					
ANR	3135022	Condition	"tmpJobTag [ 0 ] == '\\""'"		3134886	0					
ANR	3135023	EqualityExpression	"tmpJobTag [ 0 ] == '\\""'"		3134886	0		==			
ANR	3135024	ArrayIndexing	tmpJobTag [ 0 ]		3134886	0					
ANR	3135025	Identifier	tmpJobTag		3134886	0					
ANR	3135026	PrimaryExpression	0		3134886	1					
ANR	3135027	PrimaryExpression	"'\\""'"		3134886	1					
ANR	3135028	PrimaryExpression	1		3134886	1					
ANR	3135029	PrimaryExpression	0		3134886	2					
ANR	3135030	IdentifierDeclStatement	int last = tmpJobTag . Length ( ) - 1 ;	941:3:22661:22694	3134886	1	True				
ANR	3135031	IdentifierDecl	last = tmpJobTag . Length ( ) - 1		3134886	0					
ANR	3135032	IdentifierDeclType	int		3134886	0					
ANR	3135033	Identifier	last		3134886	1					
ANR	3135034	AssignmentExpression	last = tmpJobTag . Length ( ) - 1		3134886	2		=			
ANR	3135035	Identifier	last		3134886	0					
ANR	3135036	AdditiveExpression	tmpJobTag . Length ( ) - 1		3134886	1		-			
ANR	3135037	CallExpression	tmpJobTag . Length ( )		3134886	0					
ANR	3135038	Callee	tmpJobTag . Length		3134886	0					
ANR	3135039	MemberAccess	tmpJobTag . Length		3134886	0					
ANR	3135040	Identifier	tmpJobTag		3134886	0					
ANR	3135041	Identifier	Length		3134886	1					
ANR	3135042	ArgumentList			3134886	1					
ANR	3135043	PrimaryExpression	1		3134886	1					
ANR	3135044	IdentifierDeclStatement	"int end = tmpJobTag [ last ] == '\\""' ? last - 1 : last ;"	942:3:22699:22750	3134886	2	True				
ANR	3135045	IdentifierDecl	"end = tmpJobTag [ last ] == '\\""' ? last - 1 : last"		3134886	0					
ANR	3135046	IdentifierDeclType	int		3134886	0					
ANR	3135047	Identifier	end		3134886	1					
ANR	3135048	AssignmentExpression	"end = tmpJobTag [ last ] == '\\""' ? last - 1 : last"		3134886	2		=			
ANR	3135049	Identifier	end		3134886	0					
ANR	3135050	ConditionalExpression	"tmpJobTag [ last ] == '\\""' ? last - 1 : last"		3134886	1					
ANR	3135051	Condition	"tmpJobTag [ last ] == '\\""'"		3134886	0					
ANR	3135052	EqualityExpression	"tmpJobTag [ last ] == '\\""'"		3134886	0		==			
ANR	3135053	ArrayIndexing	tmpJobTag [ last ]		3134886	0					
ANR	3135054	Identifier	tmpJobTag		3134886	0					
ANR	3135055	Identifier	last		3134886	1					
ANR	3135056	PrimaryExpression	"'\\""'"		3134886	1					
ANR	3135057	AdditiveExpression	last - 1		3134886	1		-			
ANR	3135058	Identifier	last		3134886	0					
ANR	3135059	PrimaryExpression	1		3134886	1					
ANR	3135060	Identifier	last		3134886	2					
ANR	3135061	ExpressionStatement	"tmpJobTag = tmpJobTag . Substr ( begin , end )"	943:3:22755:22797	3134886	3	True				
ANR	3135062	AssignmentExpression	"tmpJobTag = tmpJobTag . Substr ( begin , end )"		3134886	0		=			
ANR	3135063	Identifier	tmpJobTag		3134886	0					
ANR	3135064	CallExpression	"tmpJobTag . Substr ( begin , end )"		3134886	1					
ANR	3135065	Callee	tmpJobTag . Substr		3134886	0					
ANR	3135066	MemberAccess	tmpJobTag . Substr		3134886	0					
ANR	3135067	Identifier	tmpJobTag		3134886	0					
ANR	3135068	Identifier	Substr		3134886	1					
ANR	3135069	ArgumentList	begin		3134886	1					
ANR	3135070	Argument	begin		3134886	0					
ANR	3135071	Identifier	begin		3134886	0					
ANR	3135072	Argument	end		3134886	1					
ANR	3135073	Identifier	end		3134886	0					
ANR	3135074	ExpressionStatement	_jobTag = strnewp ( tmpJobTag . Value ( ) )	945:2:22805:22843	3134886	4	True				
ANR	3135075	AssignmentExpression	_jobTag = strnewp ( tmpJobTag . Value ( ) )		3134886	0		=			
ANR	3135076	Identifier	_jobTag		3134886	0					
ANR	3135077	CallExpression	strnewp ( tmpJobTag . Value ( ) )		3134886	1					
ANR	3135078	Callee	strnewp		3134886	0					
ANR	3135079	Identifier	strnewp		3134886	0					
ANR	3135080	ArgumentList	tmpJobTag . Value ( )		3134886	1					
ANR	3135081	Argument	tmpJobTag . Value ( )		3134886	0					
ANR	3135082	CallExpression	tmpJobTag . Value ( )		3134886	0					
ANR	3135083	Callee	tmpJobTag . Value		3134886	0					
ANR	3135084	MemberAccess	tmpJobTag . Value		3134886	0					
ANR	3135085	Identifier	tmpJobTag		3134886	0					
ANR	3135086	Identifier	Value		3134886	1					
ANR	3135087	ArgumentList			3134886	1					
ANR	3135088	ReturnStatement	return _jobTag ;	948:1:22850:22864	3134886	1	True				
ANR	3135089	Identifier	_jobTag		3134886	0					
ANR	3135090	ReturnType	const char *		3134886	1					
ANR	3135091	Identifier	Job :: GetJobstateJobTag		3134886	2					
ANR	3135092	ParameterList			3134886	3					
ANR	3135093	CFGEntryNode	ENTRY		3134886		True				
ANR	3135094	CFGExitNode	EXIT		3134886		True				
ANR	3135095	Symbol	jobTagName		3134886						
ANR	3135096	Symbol	tmpJobTag . Value		3134886						
ANR	3135097	Symbol	last		3134886						
ANR	3135098	Symbol	tmpJobTag . Substr		3134886						
ANR	3135099	Symbol	_jobTag		3134886						
ANR	3135100	Symbol	jobTagName . Substr		3134886						
ANR	3135101	Symbol	_cmdFile		3134886						
ANR	3135102	Symbol	* last		3134886						
ANR	3135103	Symbol	_directory		3134886						
ANR	3135104	Symbol	JOB_TAG_NAME		3134886						
ANR	3135105	Symbol	jobTagName . Length		3134886						
ANR	3135106	Symbol	tmpJobTag		3134886						
ANR	3135107	Symbol	PEGASUS_SITE		3134886						
ANR	3135108	Symbol	strnewp		3134886						
ANR	3135109	Symbol	end		3134886						
ANR	3135110	Symbol	* jobTagName		3134886						
ANR	3135111	Symbol	MultiLogFiles :: loadValueFromSubFile		3134886						
ANR	3135112	Symbol	jobTagName . Value		3134886						
ANR	3135113	Symbol	begin		3134886						
ANR	3135114	Symbol	* tmpJobTag		3134886						
ANR	3135115	Symbol	tmpJobTag . Length		3134886						
ANR	3135116	Function	Job :: GetJobstateSequenceNum	952:0:22947:23086							
ANR	3135117	FunctionDef	Job :: GetJobstateSequenceNum ()		3135116	0					
ANR	3135118	CompoundStatement		954:0:22981:23086	3135116	0					
ANR	3135119	IfStatement	if ( _jobstateSeqNum == 0 )		3135116	0					
ANR	3135120	Condition	_jobstateSeqNum == 0	955:6:22989:23008	3135116	0	True				
ANR	3135121	EqualityExpression	_jobstateSeqNum == 0		3135116	0		==			
ANR	3135122	Identifier	_jobstateSeqNum		3135116	0					
ANR	3135123	PrimaryExpression	0		3135116	1					
ANR	3135124	CompoundStatement		2:29:30:30	3135116	1					
ANR	3135125	ExpressionStatement	_jobstateSeqNum = _nextJobstateSeqNum ++	956:2:23016:23055	3135116	0	True				
ANR	3135126	AssignmentExpression	_jobstateSeqNum = _nextJobstateSeqNum ++		3135116	0		=			
ANR	3135127	Identifier	_jobstateSeqNum		3135116	0					
ANR	3135128	PostIncDecOperationExpression	_nextJobstateSeqNum ++		3135116	1					
ANR	3135129	Identifier	_nextJobstateSeqNum		3135116	0					
ANR	3135130	IncDec	++		3135116	1					
ANR	3135131	ReturnStatement	return _jobstateSeqNum ;	959:1:23062:23084	3135116	1	True				
ANR	3135132	Identifier	_jobstateSeqNum		3135116	0					
ANR	3135133	ReturnType	int		3135116	1					
ANR	3135134	Identifier	Job :: GetJobstateSequenceNum		3135116	2					
ANR	3135135	ParameterList			3135116	3					
ANR	3135136	CFGEntryNode	ENTRY		3135116		True				
ANR	3135137	CFGExitNode	EXIT		3135116		True				
ANR	3135138	Symbol	_nextJobstateSeqNum		3135116						
ANR	3135139	Symbol	_jobstateSeqNum		3135116						
ANR	3135140	Function	Job :: SetLastEventTime	963:0:23167:23299							
ANR	3135141	FunctionDef	Job :: SetLastEventTime (const ULogEvent * event)		3135140	0					
ANR	3135142	CompoundStatement		965:0:23220:23299	3135140	0					
ANR	3135143	IdentifierDeclStatement	struct tm eventTm = event -> eventTime ;	966:1:23223:23259	3135140	0	True				
ANR	3135144	IdentifierDecl	eventTm = event -> eventTime		3135140	0					
ANR	3135145	IdentifierDeclType	struct tm		3135140	0					
ANR	3135146	Identifier	eventTm		3135140	1					
ANR	3135147	AssignmentExpression	eventTm = event -> eventTime		3135140	2		=			
ANR	3135148	Identifier	eventTm		3135140	0					
ANR	3135149	PtrMemberAccess	event -> eventTime		3135140	1					
ANR	3135150	Identifier	event		3135140	0					
ANR	3135151	Identifier	eventTime		3135140	1					
ANR	3135152	ExpressionStatement	_lastEventTime = mktime ( & eventTm )	967:1:23262:23297	3135140	1	True				
ANR	3135153	AssignmentExpression	_lastEventTime = mktime ( & eventTm )		3135140	0		=			
ANR	3135154	Identifier	_lastEventTime		3135140	0					
ANR	3135155	CallExpression	mktime ( & eventTm )		3135140	1					
ANR	3135156	Callee	mktime		3135140	0					
ANR	3135157	Identifier	mktime		3135140	0					
ANR	3135158	ArgumentList	& eventTm		3135140	1					
ANR	3135159	Argument	& eventTm		3135140	0					
ANR	3135160	UnaryOperationExpression	& eventTm		3135140	0					
ANR	3135161	UnaryOperator	&		3135140	0					
ANR	3135162	Identifier	eventTm		3135140	1					
ANR	3135163	ReturnType	void		3135140	1					
ANR	3135164	Identifier	Job :: SetLastEventTime		3135140	2					
ANR	3135165	ParameterList	const ULogEvent * event		3135140	3					
ANR	3135166	Parameter	const ULogEvent * event	964:23:23195:23216	3135140	0	True				
ANR	3135167	ParameterType	const ULogEvent *		3135140	0					
ANR	3135168	Identifier	event		3135140	1					
ANR	3135169	CFGEntryNode	ENTRY		3135140		True				
ANR	3135170	CFGExitNode	EXIT		3135140		True				
ANR	3135171	Symbol	mktime		3135140						
ANR	3135172	Symbol	* event		3135140						
ANR	3135173	Symbol	event -> eventTime		3135140						
ANR	3135174	Symbol	eventTm		3135140						
ANR	3135175	Symbol	_lastEventTime		3135140						
ANR	3135176	Symbol	& eventTm		3135140						
ANR	3135177	Symbol	event		3135140						
ANR	3135178	Function	Job :: GetPreSkip	971:0:23380:23535							
ANR	3135179	FunctionDef	Job :: GetPreSkip ()		3135178	0					
ANR	3135180	CompoundStatement		973:0:23408:23535	3135178	0					
ANR	3135181	IfStatement	if ( ! HasPreSkip ( ) )		3135178	0					
ANR	3135182	Condition	! HasPreSkip ( )	974:5:23415:23427	3135178	0	True				
ANR	3135183	UnaryOperationExpression	! HasPreSkip ( )		3135178	0					
ANR	3135184	UnaryOperator	!		3135178	0					
ANR	3135185	CallExpression	HasPreSkip ( )		3135178	1					
ANR	3135186	Callee	HasPreSkip		3135178	0					
ANR	3135187	Identifier	HasPreSkip		3135178	0					
ANR	3135188	ArgumentList			3135178	1					
ANR	3135189	CompoundStatement		2:21:22:22	3135178	1					
ANR	3135190	ExpressionStatement	"debug_printf ( DEBUG_QUIET , ""Evaluating PRE_SKIP... It is not defined.\\n"" )"	975:2:23435:23512	3135178	0	True				
ANR	3135191	CallExpression	"debug_printf ( DEBUG_QUIET , ""Evaluating PRE_SKIP... It is not defined.\\n"" )"		3135178	0					
ANR	3135192	Callee	debug_printf		3135178	0					
ANR	3135193	Identifier	debug_printf		3135178	0					
ANR	3135194	ArgumentList	DEBUG_QUIET		3135178	1					
ANR	3135195	Argument	DEBUG_QUIET		3135178	0					
ANR	3135196	Identifier	DEBUG_QUIET		3135178	0					
ANR	3135197	Argument	"""Evaluating PRE_SKIP... It is not defined.\\n"""		3135178	1					
ANR	3135198	PrimaryExpression	"""Evaluating PRE_SKIP... It is not defined.\\n"""		3135178	0					
ANR	3135199	ReturnStatement	return _preskip ;	978:1:23518:23533	3135178	1	True				
ANR	3135200	Identifier	_preskip		3135178	0					
ANR	3135201	ReturnType	int		3135178	1					
ANR	3135202	Identifier	Job :: GetPreSkip		3135178	2					
ANR	3135203	ParameterList			3135178	3					
ANR	3135204	CFGEntryNode	ENTRY		3135178		True				
ANR	3135205	CFGExitNode	EXIT		3135178		True				
ANR	3135206	Symbol	_preskip		3135178						
ANR	3135207	Symbol	HasPreSkip		3135178						
ANR	3135208	Symbol	DEBUG_QUIET		3135178						
ANR	3135209	Function	Job :: FixPriority	994:0:24235:24650							
ANR	3135210	FunctionDef	Job :: FixPriority (Dag & dag)		3135209	0					
ANR	3135211	CompoundStatement		996:0:24267:24650	3135209	0					
ANR	3135212	IdentifierDeclStatement	set < JobID_t > parents = GetQueueRef ( Q_PARENTS ) ;	997:1:24270:24315	3135209	0	True				
ANR	3135213	IdentifierDecl	parents = GetQueueRef ( Q_PARENTS )		3135209	0					
ANR	3135214	IdentifierDeclType	set < JobID_t >		3135209	0					
ANR	3135215	Identifier	parents		3135209	1					
ANR	3135216	AssignmentExpression	parents = GetQueueRef ( Q_PARENTS )		3135209	2		=			
ANR	3135217	Identifier	parents		3135209	0					
ANR	3135218	CallExpression	GetQueueRef ( Q_PARENTS )		3135209	1					
ANR	3135219	Callee	GetQueueRef		3135209	0					
ANR	3135220	Identifier	GetQueueRef		3135209	0					
ANR	3135221	ArgumentList	Q_PARENTS		3135209	1					
ANR	3135222	Argument	Q_PARENTS		3135209	0					
ANR	3135223	Identifier	Q_PARENTS		3135209	0					
ANR	3135224	ForStatement	for ( set < JobID_t > :: iterator p = parents . begin ( ) ; p != parents . end ( ) ; ++ p )		3135209	1					
ANR	3135225	ForInit	set < JobID_t > :: iterator p = parents . begin ( ) ;	998:5:24322:24364	3135209	0	True				
ANR	3135226	IdentifierDeclStatement	set < JobID_t > :: iterator p = parents . begin ( ) ;		3135209	0					
ANR	3135227	IdentifierDecl	p = parents . begin ( )		3135209	0					
ANR	3135228	IdentifierDeclType	set < JobID_t > :: iterator		3135209	0					
ANR	3135229	Identifier	p		3135209	1					
ANR	3135230	AssignmentExpression	p = parents . begin ( )		3135209	2		=			
ANR	3135231	Identifier	p		3135209	0					
ANR	3135232	CallExpression	parents . begin ( )		3135209	1					
ANR	3135233	Callee	parents . begin		3135209	0					
ANR	3135234	MemberAccess	parents . begin		3135209	0					
ANR	3135235	Identifier	parents		3135209	0					
ANR	3135236	Identifier	begin		3135209	1					
ANR	3135237	ArgumentList			3135209	1					
ANR	3135238	Condition	p != parents . end ( )	998:49:24366:24383	3135209	1	True				
ANR	3135239	EqualityExpression	p != parents . end ( )		3135209	0		!=			
ANR	3135240	Identifier	p		3135209	0					
ANR	3135241	CallExpression	parents . end ( )		3135209	1					
ANR	3135242	Callee	parents . end		3135209	0					
ANR	3135243	MemberAccess	parents . end		3135209	0					
ANR	3135244	Identifier	parents		3135209	0					
ANR	3135245	Identifier	end		3135209	1					
ANR	3135246	ArgumentList			3135209	1					
ANR	3135247	UnaryExpression	++ p	998:69:24386:24388	3135209	2	True				
ANR	3135248	IncDec	++		3135209	0					
ANR	3135249	Identifier	p		3135209	1					
ANR	3135250	CompoundStatement		4:2:126:164	3135209	3					
ANR	3135251	IdentifierDeclStatement	Job * parent = dag . FindNodeByNodeID ( * p ) ;	999:2:24394:24432	3135209	0	True				
ANR	3135252	IdentifierDecl	* parent = dag . FindNodeByNodeID ( * p )		3135209	0					
ANR	3135253	IdentifierDeclType	Job *		3135209	0					
ANR	3135254	Identifier	parent		3135209	1					
ANR	3135255	AssignmentExpression	* parent = dag . FindNodeByNodeID ( * p )		3135209	2		=			
ANR	3135256	Identifier	parent		3135209	0					
ANR	3135257	CallExpression	dag . FindNodeByNodeID ( * p )		3135209	1					
ANR	3135258	Callee	dag . FindNodeByNodeID		3135209	0					
ANR	3135259	MemberAccess	dag . FindNodeByNodeID		3135209	0					
ANR	3135260	Identifier	dag		3135209	0					
ANR	3135261	Identifier	FindNodeByNodeID		3135209	1					
ANR	3135262	ArgumentList	* p		3135209	1					
ANR	3135263	Argument	* p		3135209	0					
ANR	3135264	UnaryOperationExpression	* p		3135209	0					
ANR	3135265	UnaryOperator	*		3135209	0					
ANR	3135266	Identifier	p		3135209	1					
ANR	3135267	IfStatement	if ( parent -> _hasNodePriority )		3135209	1					
ANR	3135268	Condition	parent -> _hasNodePriority	1000:6:24440:24463	3135209	0	True				
ANR	3135269	PtrMemberAccess	parent -> _hasNodePriority		3135209	0					
ANR	3135270	Identifier	parent		3135209	0					
ANR	3135271	Identifier	_hasNodePriority		3135209	1					
ANR	3135272	CompoundStatement		5:33:199:199	3135209	1					
ANR	3135273	IfStatement	if ( parent -> _nodePriority > _nodePriority )		3135209	0					
ANR	3135274	Condition	parent -> _nodePriority > _nodePriority	1002:7:24524:24560	3135209	0	True				
ANR	3135275	RelationalExpression	parent -> _nodePriority > _nodePriority		3135209	0		>			
ANR	3135276	PtrMemberAccess	parent -> _nodePriority		3135209	0					
ANR	3135277	Identifier	parent		3135209	0					
ANR	3135278	Identifier	_nodePriority		3135209	1					
ANR	3135279	Identifier	_nodePriority		3135209	1					
ANR	3135280	CompoundStatement		7:47:296:296	3135209	1					
ANR	3135281	ExpressionStatement	_nodePriority = parent -> _nodePriority	1003:4:24570:24607	3135209	0	True				
ANR	3135282	AssignmentExpression	_nodePriority = parent -> _nodePriority		3135209	0		=			
ANR	3135283	Identifier	_nodePriority		3135209	0					
ANR	3135284	PtrMemberAccess	parent -> _nodePriority		3135209	1					
ANR	3135285	Identifier	parent		3135209	0					
ANR	3135286	Identifier	_nodePriority		3135209	1					
ANR	3135287	ExpressionStatement	_hasNodePriority = true	1004:4:24613:24636	3135209	1	True				
ANR	3135288	AssignmentExpression	_hasNodePriority = true		3135209	0		=			
ANR	3135289	Identifier	_hasNodePriority		3135209	0					
ANR	3135290	Identifier	true		3135209	1					
ANR	3135291	ReturnType	void		3135209	1					
ANR	3135292	Identifier	Job :: FixPriority		3135209	2					
ANR	3135293	ParameterList	Dag & dag		3135209	3					
ANR	3135294	Parameter	Dag & dag	995:17:24257:24264	3135209	0	True				
ANR	3135295	ParameterType	Dag &		3135209	0					
ANR	3135296	Identifier	dag		3135209	1					
ANR	3135297	CFGEntryNode	ENTRY		3135209		True				
ANR	3135298	CFGExitNode	EXIT		3135209		True				
ANR	3135299	Symbol	parent		3135209						
ANR	3135300	Symbol	GetQueueRef		3135209						
ANR	3135301	Symbol	Q_PARENTS		3135209						
ANR	3135302	Symbol	* parent		3135209						
ANR	3135303	Symbol	_hasNodePriority		3135209						
ANR	3135304	Symbol	dag		3135209						
ANR	3135305	Symbol	p		3135209						
ANR	3135306	Symbol	parents . end		3135209						
ANR	3135307	Symbol	parents . begin		3135209						
ANR	3135308	Symbol	parent -> _hasNodePriority		3135209						
ANR	3135309	Symbol	_nodePriority		3135209						
ANR	3135310	Symbol	true		3135209						
ANR	3135311	Symbol	* p		3135209						
ANR	3135312	Symbol	parents		3135209						
ANR	3135313	Symbol	dag . FindNodeByNodeID		3135209						
ANR	3135314	Symbol	parent -> _nodePriority		3135209						
