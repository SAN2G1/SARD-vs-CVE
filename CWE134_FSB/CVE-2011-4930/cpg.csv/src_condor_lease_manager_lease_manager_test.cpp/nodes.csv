command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3507816	File	data/converged/CVE-2011-4930_htcondor/src_condor_lease_manager_lease_manager_test.cpp								
ANR	3507817	DeclStmt									
ANR	3507818	Decl							const int	const int	dflag
ANR	3507819	Function	show_leases	45:0:1280:1868							
ANR	3507820	FunctionDef	"show_leases (const char * label , list < const DCLeaseManagerLease * > & leases)"		3507819	0					
ANR	3507821	CompoundStatement		46:0:1362:1868	3507819	0					
ANR	3507822	ExpressionStatement	"printf ( ""%s: %ld leases:\\n"" , label , leases . size ( ) )"	47:1:1365:1416	3507819	0	True				
ANR	3507823	CallExpression	"printf ( ""%s: %ld leases:\\n"" , label , leases . size ( ) )"		3507819	0					
ANR	3507824	Callee	printf		3507819	0					
ANR	3507825	Identifier	printf		3507819	0					
ANR	3507826	ArgumentList	"""%s: %ld leases:\\n"""		3507819	1					
ANR	3507827	Argument	"""%s: %ld leases:\\n"""		3507819	0					
ANR	3507828	PrimaryExpression	"""%s: %ld leases:\\n"""		3507819	0					
ANR	3507829	Argument	label		3507819	1					
ANR	3507830	Identifier	label		3507819	0					
ANR	3507831	Argument	leases . size ( )		3507819	2					
ANR	3507832	CallExpression	leases . size ( )		3507819	0					
ANR	3507833	Callee	leases . size		3507819	0					
ANR	3507834	MemberAccess	leases . size		3507819	0					
ANR	3507835	Identifier	leases		3507819	0					
ANR	3507836	Identifier	size		3507819	1					
ANR	3507837	ArgumentList			3507819	1					
ANR	3507838	ForStatement	for ( list < const DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ; iter != leases . end ( ) ; iter ++ )		3507819	1					
ANR	3507839	ForInit	list < const DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;	49:6:1425:1492	3507819	0	True				
ANR	3507840	IdentifierDeclStatement	list < const DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;		3507819	0					
ANR	3507841	IdentifierDecl	iter = leases . begin ( )		3507819	0					
ANR	3507842	IdentifierDeclType	list < const DCLeaseManagerLease * > :: iterator		3507819	0					
ANR	3507843	Identifier	iter		3507819	1					
ANR	3507844	AssignmentExpression	iter = leases . begin ( )		3507819	2		=			
ANR	3507845	Identifier	iter		3507819	0					
ANR	3507846	CallExpression	leases . begin ( )		3507819	1					
ANR	3507847	Callee	leases . begin		3507819	0					
ANR	3507848	MemberAccess	leases . begin		3507819	0					
ANR	3507849	Identifier	leases		3507819	0					
ANR	3507850	Identifier	begin		3507819	1					
ANR	3507851	ArgumentList			3507819	1					
ANR	3507852	Condition	iter != leases . end ( )	50:3:1497:1517	3507819	1	True				
ANR	3507853	EqualityExpression	iter != leases . end ( )		3507819	0		!=			
ANR	3507854	Identifier	iter		3507819	0					
ANR	3507855	CallExpression	leases . end ( )		3507819	1					
ANR	3507856	Callee	leases . end		3507819	0					
ANR	3507857	MemberAccess	leases . end		3507819	0					
ANR	3507858	Identifier	leases		3507819	0					
ANR	3507859	Identifier	end		3507819	1					
ANR	3507860	ArgumentList			3507819	1					
ANR	3507861	PostIncDecOperationExpression	iter ++	51:3:1523:1528	3507819	2	True				
ANR	3507862	Identifier	iter		3507819	0					
ANR	3507863	IncDec	++		3507819	1					
ANR	3507864	CompoundStatement		9:2:263:274	3507819	3					
ANR	3507865	IdentifierDeclStatement	const DCLeaseManagerLease * lease = * iter ;	52:2:1536:1576	3507819	0	True				
ANR	3507866	IdentifierDecl	* lease = * iter		3507819	0					
ANR	3507867	IdentifierDeclType	const DCLeaseManagerLease *		3507819	0					
ANR	3507868	Identifier	lease		3507819	1					
ANR	3507869	AssignmentExpression	* lease = * iter		3507819	2		=			
ANR	3507870	Identifier	lease		3507819	0					
ANR	3507871	UnaryOperationExpression	* iter		3507819	1					
ANR	3507872	UnaryOperator	*		3507819	0					
ANR	3507873	Identifier	iter		3507819	1					
ANR	3507874	IdentifierDeclStatement	classad :: ClassAd * ad = lease -> leaseAd ( ) ;	53:2:1580:1622	3507819	1	True				
ANR	3507875	IdentifierDecl	* ad = lease -> leaseAd ( )		3507819	0					
ANR	3507876	IdentifierDeclType	classad :: ClassAd *		3507819	0					
ANR	3507877	Identifier	ad		3507819	1					
ANR	3507878	AssignmentExpression	* ad = lease -> leaseAd ( )		3507819	2		=			
ANR	3507879	Identifier	ad		3507819	0					
ANR	3507880	CallExpression	lease -> leaseAd ( )		3507819	1					
ANR	3507881	Callee	lease -> leaseAd		3507819	0					
ANR	3507882	PtrMemberAccess	lease -> leaseAd		3507819	0					
ANR	3507883	Identifier	lease		3507819	0					
ANR	3507884	Identifier	leaseAd		3507819	1					
ANR	3507885	ArgumentList			3507819	1					
ANR	3507886	IdentifierDeclStatement	string name ;	54:2:1626:1637	3507819	2	True				
ANR	3507887	IdentifierDecl	name		3507819	0					
ANR	3507888	IdentifierDeclType	string		3507819	0					
ANR	3507889	Identifier	name		3507819	1					
ANR	3507890	ExpressionStatement	"ad -> EvaluateAttrString ( ""ResourceName"" , name )"	55:2:1641:1687	3507819	3	True				
ANR	3507891	CallExpression	"ad -> EvaluateAttrString ( ""ResourceName"" , name )"		3507819	0					
ANR	3507892	Callee	ad -> EvaluateAttrString		3507819	0					
ANR	3507893	PtrMemberAccess	ad -> EvaluateAttrString		3507819	0					
ANR	3507894	Identifier	ad		3507819	0					
ANR	3507895	Identifier	EvaluateAttrString		3507819	1					
ANR	3507896	ArgumentList	"""ResourceName"""		3507819	1					
ANR	3507897	Argument	"""ResourceName"""		3507819	0					
ANR	3507898	PrimaryExpression	"""ResourceName"""		3507819	0					
ANR	3507899	Argument	name		3507819	1					
ANR	3507900	Identifier	name		3507819	0					
ANR	3507901	ExpressionStatement	"printf ( ""  Resource=%s, LeaseID=%s, duration=%d, rlwd=%d\\n"" , name . c_str ( ) , lease -> leaseId ( ) . c_str ( ) , lease -> leaseDuration ( ) , lease -> releaseLeaseWhenDone ( ) )"	56:2:1691:1863	3507819	4	True				
ANR	3507902	CallExpression	"printf ( ""  Resource=%s, LeaseID=%s, duration=%d, rlwd=%d\\n"" , name . c_str ( ) , lease -> leaseId ( ) . c_str ( ) , lease -> leaseDuration ( ) , lease -> releaseLeaseWhenDone ( ) )"		3507819	0					
ANR	3507903	Callee	printf		3507819	0					
ANR	3507904	Identifier	printf		3507819	0					
ANR	3507905	ArgumentList	"""  Resource=%s, LeaseID=%s, duration=%d, rlwd=%d\\n"""		3507819	1					
ANR	3507906	Argument	"""  Resource=%s, LeaseID=%s, duration=%d, rlwd=%d\\n"""		3507819	0					
ANR	3507907	PrimaryExpression	"""  Resource=%s, LeaseID=%s, duration=%d, rlwd=%d\\n"""		3507819	0					
ANR	3507908	Argument	name . c_str ( )		3507819	1					
ANR	3507909	CallExpression	name . c_str ( )		3507819	0					
ANR	3507910	Callee	name . c_str		3507819	0					
ANR	3507911	MemberAccess	name . c_str		3507819	0					
ANR	3507912	Identifier	name		3507819	0					
ANR	3507913	Identifier	c_str		3507819	1					
ANR	3507914	ArgumentList			3507819	1					
ANR	3507915	Argument	lease -> leaseId ( ) . c_str ( )		3507819	2					
ANR	3507916	CallExpression	lease -> leaseId ( ) . c_str ( )		3507819	0					
ANR	3507917	Callee	lease -> leaseId ( ) . c_str		3507819	0					
ANR	3507918	MemberAccess	lease -> leaseId ( ) . c_str		3507819	0					
ANR	3507919	CallExpression	lease -> leaseId ( )		3507819	0					
ANR	3507920	Callee	lease -> leaseId		3507819	0					
ANR	3507921	PtrMemberAccess	lease -> leaseId		3507819	0					
ANR	3507922	Identifier	lease		3507819	0					
ANR	3507923	Identifier	leaseId		3507819	1					
ANR	3507924	ArgumentList			3507819	1					
ANR	3507925	Identifier	c_str		3507819	1					
ANR	3507926	ArgumentList			3507819	1					
ANR	3507927	Argument	lease -> leaseDuration ( )		3507819	3					
ANR	3507928	CallExpression	lease -> leaseDuration ( )		3507819	0					
ANR	3507929	Callee	lease -> leaseDuration		3507819	0					
ANR	3507930	PtrMemberAccess	lease -> leaseDuration		3507819	0					
ANR	3507931	Identifier	lease		3507819	0					
ANR	3507932	Identifier	leaseDuration		3507819	1					
ANR	3507933	ArgumentList			3507819	1					
ANR	3507934	Argument	lease -> releaseLeaseWhenDone ( )		3507819	4					
ANR	3507935	CallExpression	lease -> releaseLeaseWhenDone ( )		3507819	0					
ANR	3507936	Callee	lease -> releaseLeaseWhenDone		3507819	0					
ANR	3507937	PtrMemberAccess	lease -> releaseLeaseWhenDone		3507819	0					
ANR	3507938	Identifier	lease		3507819	0					
ANR	3507939	Identifier	releaseLeaseWhenDone		3507819	1					
ANR	3507940	ArgumentList			3507819	1					
ANR	3507941	ReturnType	void		3507819	1					
ANR	3507942	Identifier	show_leases		3507819	2					
ANR	3507943	ParameterList	"const char * label , list < const DCLeaseManagerLease * > & leases"		3507819	3					
ANR	3507944	Parameter	const char * label	45:18:1298:1314	3507819	0	True				
ANR	3507945	ParameterType	const char *		3507819	0					
ANR	3507946	Identifier	label		3507819	1					
ANR	3507947	Parameter	list < const DCLeaseManagerLease * > & leases	45:37:1317:1358	3507819	1	True				
ANR	3507948	ParameterType	list < const DCLeaseManagerLease * > &		3507819	0					
ANR	3507949	Identifier	leases		3507819	1					
ANR	3507950	CFGEntryNode	ENTRY		3507819		True				
ANR	3507951	CFGExitNode	EXIT		3507819		True				
ANR	3507952	Symbol	lease -> leaseAd		3507819						
ANR	3507953	Symbol	ad		3507819						
ANR	3507954	Symbol	* lease		3507819						
ANR	3507955	Symbol	iter		3507819						
ANR	3507956	Symbol	leases . begin		3507819						
ANR	3507957	Symbol	label		3507819						
ANR	3507958	Symbol	lease -> leaseDuration		3507819						
ANR	3507959	Symbol	name . c_str		3507819						
ANR	3507960	Symbol	leases		3507819						
ANR	3507961	Symbol	* iter		3507819						
ANR	3507962	Symbol	leases . size		3507819						
ANR	3507963	Symbol	lease -> leaseId ( ) . c_str		3507819						
ANR	3507964	Symbol	leases . end		3507819						
ANR	3507965	Symbol	name		3507819						
ANR	3507966	Symbol	lease -> leaseId		3507819						
ANR	3507967	Symbol	lease		3507819						
ANR	3507968	Symbol	lease -> releaseLeaseWhenDone		3507819						
ANR	3507969	Function	show_leases	65:0:1908:2051							
ANR	3507970	FunctionDef	"show_leases (const char * label , list < DCLeaseManagerLease * > & leases)"		3507969	0					
ANR	3507971	CompoundStatement		66:0:1984:2051	3507969	0					
ANR	3507972	ExpressionStatement	"show_leases ( label , DCLeaseManagerLease_getConstList ( leases ) )"	67:1:1987:2049	3507969	0	True				
ANR	3507973	CallExpression	"show_leases ( label , DCLeaseManagerLease_getConstList ( leases ) )"		3507969	0					
ANR	3507974	Callee	show_leases		3507969	0					
ANR	3507975	Identifier	show_leases		3507969	0					
ANR	3507976	ArgumentList	label		3507969	1					
ANR	3507977	Argument	label		3507969	0					
ANR	3507978	Identifier	label		3507969	0					
ANR	3507979	Argument	DCLeaseManagerLease_getConstList ( leases )		3507969	1					
ANR	3507980	CallExpression	DCLeaseManagerLease_getConstList ( leases )		3507969	0					
ANR	3507981	Callee	DCLeaseManagerLease_getConstList		3507969	0					
ANR	3507982	Identifier	DCLeaseManagerLease_getConstList		3507969	0					
ANR	3507983	ArgumentList	leases		3507969	1					
ANR	3507984	Argument	leases		3507969	0					
ANR	3507985	Identifier	leases		3507969	0					
ANR	3507986	ReturnType	void		3507969	1					
ANR	3507987	Identifier	show_leases		3507969	2					
ANR	3507988	ParameterList	"const char * label , list < DCLeaseManagerLease * > & leases"		3507969	3					
ANR	3507989	Parameter	const char * label	65:18:1926:1942	3507969	0	True				
ANR	3507990	ParameterType	const char *		3507969	0					
ANR	3507991	Identifier	label		3507969	1					
ANR	3507992	Parameter	list < DCLeaseManagerLease * > & leases	65:37:1945:1980	3507969	1	True				
ANR	3507993	ParameterType	list < DCLeaseManagerLease * > &		3507969	0					
ANR	3507994	Identifier	leases		3507969	1					
ANR	3507995	CFGEntryNode	ENTRY		3507969		True				
ANR	3507996	CFGExitNode	EXIT		3507969		True				
ANR	3507997	Symbol	leases		3507969						
ANR	3507998	Symbol	DCLeaseManagerLease_getConstList		3507969						
ANR	3507999	Symbol	label		3507969						
ANR	3508000	Function	min_lease_duration	70:0:2054:2415							
ANR	3508001	FunctionDef	min_lease_duration (list < DCLeaseManagerLease * > & leases)		3508000	0					
ANR	3508002	CompoundStatement		71:0:2117:2415	3508000	0					
ANR	3508003	IdentifierDeclStatement	int min_duration = 999999 ;	72:1:2120:2146	3508000	0	True				
ANR	3508004	IdentifierDecl	min_duration = 999999		3508000	0					
ANR	3508005	IdentifierDeclType	int		3508000	0					
ANR	3508006	Identifier	min_duration		3508000	1					
ANR	3508007	AssignmentExpression	min_duration = 999999		3508000	2		=			
ANR	3508008	Identifier	min_duration		3508000	0					
ANR	3508009	PrimaryExpression	999999		3508000	1					
ANR	3508010	ForStatement	for ( list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ; iter != leases . end ( ) ; iter ++ )		3508000	1					
ANR	3508011	ForInit	list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;	73:6:2154:2215	3508000	0	True				
ANR	3508012	IdentifierDeclStatement	list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;		3508000	0					
ANR	3508013	IdentifierDecl	iter = leases . begin ( )		3508000	0					
ANR	3508014	IdentifierDeclType	list < DCLeaseManagerLease * > :: iterator		3508000	0					
ANR	3508015	Identifier	iter		3508000	1					
ANR	3508016	AssignmentExpression	iter = leases . begin ( )		3508000	2		=			
ANR	3508017	Identifier	iter		3508000	0					
ANR	3508018	CallExpression	leases . begin ( )		3508000	1					
ANR	3508019	Callee	leases . begin		3508000	0					
ANR	3508020	MemberAccess	leases . begin		3508000	0					
ANR	3508021	Identifier	leases		3508000	0					
ANR	3508022	Identifier	begin		3508000	1					
ANR	3508023	ArgumentList			3508000	1					
ANR	3508024	Condition	iter != leases . end ( )	74:3:2220:2240	3508000	1	True				
ANR	3508025	EqualityExpression	iter != leases . end ( )		3508000	0		!=			
ANR	3508026	Identifier	iter		3508000	0					
ANR	3508027	CallExpression	leases . end ( )		3508000	1					
ANR	3508028	Callee	leases . end		3508000	0					
ANR	3508029	MemberAccess	leases . end		3508000	0					
ANR	3508030	Identifier	leases		3508000	0					
ANR	3508031	Identifier	end		3508000	1					
ANR	3508032	ArgumentList			3508000	1					
ANR	3508033	PostIncDecOperationExpression	iter ++	75:3:2246:2251	3508000	2	True				
ANR	3508034	Identifier	iter		3508000	0					
ANR	3508035	IncDec	++		3508000	1					
ANR	3508036	CompoundStatement		6:2:141:175	3508000	3					
ANR	3508037	IdentifierDeclStatement	DCLeaseManagerLease * lease = * iter ;	76:2:2259:2293	3508000	0	True				
ANR	3508038	IdentifierDecl	* lease = * iter		3508000	0					
ANR	3508039	IdentifierDeclType	DCLeaseManagerLease *		3508000	0					
ANR	3508040	Identifier	lease		3508000	1					
ANR	3508041	AssignmentExpression	* lease = * iter		3508000	2		=			
ANR	3508042	Identifier	lease		3508000	0					
ANR	3508043	UnaryOperationExpression	* iter		3508000	1					
ANR	3508044	UnaryOperator	*		3508000	0					
ANR	3508045	Identifier	iter		3508000	1					
ANR	3508046	IfStatement	if ( lease -> leaseDuration ( ) < min_duration )		3508000	1					
ANR	3508047	Condition	lease -> leaseDuration ( ) < min_duration	77:7:2302:2338	3508000	0	True				
ANR	3508048	RelationalExpression	lease -> leaseDuration ( ) < min_duration		3508000	0		<			
ANR	3508049	CallExpression	lease -> leaseDuration ( )		3508000	0					
ANR	3508050	Callee	lease -> leaseDuration		3508000	0					
ANR	3508051	PtrMemberAccess	lease -> leaseDuration		3508000	0					
ANR	3508052	Identifier	lease		3508000	0					
ANR	3508053	Identifier	leaseDuration		3508000	1					
ANR	3508054	ArgumentList			3508000	1					
ANR	3508055	Identifier	min_duration		3508000	1					
ANR	3508056	CompoundStatement		7:47:224:224	3508000	1					
ANR	3508057	ExpressionStatement	min_duration = lease -> leaseDuration ( )	78:3:2347:2384	3508000	0	True				
ANR	3508058	AssignmentExpression	min_duration = lease -> leaseDuration ( )		3508000	0		=			
ANR	3508059	Identifier	min_duration		3508000	0					
ANR	3508060	CallExpression	lease -> leaseDuration ( )		3508000	1					
ANR	3508061	Callee	lease -> leaseDuration		3508000	0					
ANR	3508062	PtrMemberAccess	lease -> leaseDuration		3508000	0					
ANR	3508063	Identifier	lease		3508000	0					
ANR	3508064	Identifier	leaseDuration		3508000	1					
ANR	3508065	ArgumentList			3508000	1					
ANR	3508066	ReturnStatement	return min_duration ;	81:1:2394:2413	3508000	2	True				
ANR	3508067	Identifier	min_duration		3508000	0					
ANR	3508068	ReturnType	int		3508000	1					
ANR	3508069	Identifier	min_lease_duration		3508000	2					
ANR	3508070	ParameterList	list < DCLeaseManagerLease * > & leases		3508000	3					
ANR	3508071	Parameter	list < DCLeaseManagerLease * > & leases	70:24:2078:2113	3508000	0	True				
ANR	3508072	ParameterType	list < DCLeaseManagerLease * > &		3508000	0					
ANR	3508073	Identifier	leases		3508000	1					
ANR	3508074	CFGEntryNode	ENTRY		3508000		True				
ANR	3508075	CFGExitNode	EXIT		3508000		True				
ANR	3508076	Symbol	leases		3508000						
ANR	3508077	Symbol	* iter		3508000						
ANR	3508078	Symbol	leases . end		3508000						
ANR	3508079	Symbol	* lease		3508000						
ANR	3508080	Symbol	min_duration		3508000						
ANR	3508081	Symbol	iter		3508000						
ANR	3508082	Symbol	leases . begin		3508000						
ANR	3508083	Symbol	lease		3508000						
ANR	3508084	Symbol	lease -> leaseDuration		3508000						
ANR	3508085	DeclStmt									
ANR	3508086	Decl							bool	bool	stop
ANR	3508087	Function	dtime	95:0:2589:2712							
ANR	3508088	FunctionDef	dtime ()		3508087	0					
ANR	3508089	CompoundStatement		96:0:2610:2712	3508087	0					
ANR	3508090	IdentifierDeclStatement	struct timeval tv ;	97:1:2613:2630	3508087	0	True				
ANR	3508091	IdentifierDecl	tv		3508087	0					
ANR	3508092	IdentifierDeclType	struct timeval		3508087	0					
ANR	3508093	Identifier	tv		3508087	1					
ANR	3508094	ExpressionStatement	"gettimeofday ( & tv , NULL )"	98:1:2633:2658	3508087	1	True				
ANR	3508095	CallExpression	"gettimeofday ( & tv , NULL )"		3508087	0					
ANR	3508096	Callee	gettimeofday		3508087	0					
ANR	3508097	Identifier	gettimeofday		3508087	0					
ANR	3508098	ArgumentList	& tv		3508087	1					
ANR	3508099	Argument	& tv		3508087	0					
ANR	3508100	UnaryOperationExpression	& tv		3508087	0					
ANR	3508101	UnaryOperator	&		3508087	0					
ANR	3508102	Identifier	tv		3508087	1					
ANR	3508103	Argument	NULL		3508087	1					
ANR	3508104	Identifier	NULL		3508087	0					
ANR	3508105	ReturnStatement	return ( tv . tv_sec + ( tv . tv_usec / 1000000.0 ) ) ;	99:1:2661:2710	3508087	2	True				
ANR	3508106	AdditiveExpression	tv . tv_sec + ( tv . tv_usec / 1000000.0 )		3508087	0		+			
ANR	3508107	MemberAccess	tv . tv_sec		3508087	0					
ANR	3508108	Identifier	tv		3508087	0					
ANR	3508109	Identifier	tv_sec		3508087	1					
ANR	3508110	MultiplicativeExpression	tv . tv_usec / 1000000.0		3508087	1		/			
ANR	3508111	MemberAccess	tv . tv_usec		3508087	0					
ANR	3508112	Identifier	tv		3508087	0					
ANR	3508113	Identifier	tv_usec		3508087	1					
ANR	3508114	PrimaryExpression	1000000.0		3508087	1					
ANR	3508115	ReturnType	double		3508087	1					
ANR	3508116	Identifier	dtime		3508087	2					
ANR	3508117	ParameterList			3508087	3					
ANR	3508118	CFGEntryNode	ENTRY		3508087		True				
ANR	3508119	CFGExitNode	EXIT		3508087		True				
ANR	3508120	Symbol	tv . tv_sec		3508087						
ANR	3508121	Symbol	tv . tv_usec		3508087						
ANR	3508122	Symbol	tv		3508087						
ANR	3508123	Symbol	NULL		3508087						
ANR	3508124	Symbol	& tv		3508087						
ANR	3508125	DeclStmt									
ANR	3508126	Decl							FILE	FILE *	perf_fp
ANR	3508127	Function	dump	103:0:2737:3119							
ANR	3508128	FunctionDef	"dump (const char * s , int num , double t1)"		3508127	0					
ANR	3508129	CompoundStatement		104:0:2784:3119	3508127	0					
ANR	3508130	IdentifierDeclStatement	double t2 = dtime ( ) ;	105:1:2787:2806	3508127	0	True				
ANR	3508131	IdentifierDecl	t2 = dtime ( )		3508127	0					
ANR	3508132	IdentifierDeclType	double		3508127	0					
ANR	3508133	Identifier	t2		3508127	1					
ANR	3508134	AssignmentExpression	t2 = dtime ( )		3508127	2		=			
ANR	3508135	Identifier	t2		3508127	0					
ANR	3508136	CallExpression	dtime ( )		3508127	1					
ANR	3508137	Callee	dtime		3508127	0					
ANR	3508138	Identifier	dtime		3508127	0					
ANR	3508139	ArgumentList			3508127	1					
ANR	3508140	IdentifierDeclStatement	double per = 0.0 ;	106:1:2809:2825	3508127	1	True				
ANR	3508141	IdentifierDecl	per = 0.0		3508127	0					
ANR	3508142	IdentifierDeclType	double		3508127	0					
ANR	3508143	Identifier	per		3508127	1					
ANR	3508144	AssignmentExpression	per = 0.0		3508127	2		=			
ANR	3508145	Identifier	per		3508127	0					
ANR	3508146	PrimaryExpression	0.0		3508127	1					
ANR	3508147	IdentifierDeclStatement	double per_sec = 0.0 ;	107:1:2828:2848	3508127	2	True				
ANR	3508148	IdentifierDecl	per_sec = 0.0		3508127	0					
ANR	3508149	IdentifierDeclType	double		3508127	0					
ANR	3508150	Identifier	per_sec		3508127	1					
ANR	3508151	AssignmentExpression	per_sec = 0.0		3508127	2		=			
ANR	3508152	Identifier	per_sec		3508127	0					
ANR	3508153	PrimaryExpression	0.0		3508127	1					
ANR	3508154	IfStatement	if ( num )		3508127	3					
ANR	3508155	Condition	num	108:6:2856:2858	3508127	0	True				
ANR	3508156	Identifier	num		3508127	0					
ANR	3508157	CompoundStatement		5:12:77:77	3508127	1					
ANR	3508158	ExpressionStatement	per = ( t2 - t1 ) / num	109:2:2866:2885	3508127	0	True				
ANR	3508159	AssignmentExpression	per = ( t2 - t1 ) / num		3508127	0		=			
ANR	3508160	Identifier	per		3508127	0					
ANR	3508161	MultiplicativeExpression	( t2 - t1 ) / num		3508127	1		/			
ANR	3508162	AdditiveExpression	t2 - t1		3508127	0		-			
ANR	3508163	Identifier	t2		3508127	0					
ANR	3508164	Identifier	t1		3508127	1					
ANR	3508165	Identifier	num		3508127	1					
ANR	3508166	ExpressionStatement	per_sec = 1.0 / per	110:2:2889:2908	3508127	1	True				
ANR	3508167	AssignmentExpression	per_sec = 1.0 / per		3508127	0		=			
ANR	3508168	Identifier	per_sec		3508127	0					
ANR	3508169	MultiplicativeExpression	1.0 / per		3508127	1		/			
ANR	3508170	PrimaryExpression	1.0		3508127	0					
ANR	3508171	Identifier	per		3508127	1					
ANR	3508172	IdentifierDeclStatement	char buf [ 128 ] ;	112:1:2914:2927	3508127	4	True				
ANR	3508173	IdentifierDecl	buf [ 128 ]		3508127	0					
ANR	3508174	IdentifierDeclType	char [ 128 ]		3508127	0					
ANR	3508175	Identifier	buf		3508127	1					
ANR	3508176	PrimaryExpression	128		3508127	2					
ANR	3508177	ExpressionStatement	"snprintf ( buf , sizeof ( buf ) , ""  ==>> %15s %4d in %.5fs => %.6fs %8.3f/s\\n"" , s , num , t2 - t1 , per , per_sec )"	113:1:2930:3048	3508127	5	True				
ANR	3508178	CallExpression	"snprintf ( buf , sizeof ( buf ) , ""  ==>> %15s %4d in %.5fs => %.6fs %8.3f/s\\n"" , s , num , t2 - t1 , per , per_sec )"		3508127	0					
ANR	3508179	Callee	snprintf		3508127	0					
ANR	3508180	Identifier	snprintf		3508127	0					
ANR	3508181	ArgumentList	buf		3508127	1					
ANR	3508182	Argument	buf		3508127	0					
ANR	3508183	Identifier	buf		3508127	0					
ANR	3508184	Argument	sizeof ( buf )		3508127	1					
ANR	3508185	SizeofExpression	sizeof ( buf )		3508127	0					
ANR	3508186	Sizeof	sizeof		3508127	0					
ANR	3508187	SizeofOperand	buf		3508127	1					
ANR	3508188	Argument	"""  ==>> %15s %4d in %.5fs => %.6fs %8.3f/s\\n"""		3508127	2					
ANR	3508189	PrimaryExpression	"""  ==>> %15s %4d in %.5fs => %.6fs %8.3f/s\\n"""		3508127	0					
ANR	3508190	Argument	s		3508127	3					
ANR	3508191	Identifier	s		3508127	0					
ANR	3508192	Argument	num		3508127	4					
ANR	3508193	Identifier	num		3508127	0					
ANR	3508194	Argument	t2 - t1		3508127	5					
ANR	3508195	AdditiveExpression	t2 - t1		3508127	0		-			
ANR	3508196	Identifier	t2		3508127	0					
ANR	3508197	Identifier	t1		3508127	1					
ANR	3508198	Argument	per		3508127	6					
ANR	3508199	Identifier	per		3508127	0					
ANR	3508200	Argument	per_sec		3508127	7					
ANR	3508201	Identifier	per_sec		3508127	0					
ANR	3508202	ExpressionStatement	"fputs ( buf , stdout )"	116:1:3051:3071	3508127	6	True				
ANR	3508203	CallExpression	"fputs ( buf , stdout )"		3508127	0					
ANR	3508204	Callee	fputs		3508127	0					
ANR	3508205	Identifier	fputs		3508127	0					
ANR	3508206	ArgumentList	buf		3508127	1					
ANR	3508207	Argument	buf		3508127	0					
ANR	3508208	Identifier	buf		3508127	0					
ANR	3508209	Argument	stdout		3508127	1					
ANR	3508210	Identifier	stdout		3508127	0					
ANR	3508211	IfStatement	if ( perf_fp )		3508127	7					
ANR	3508212	Condition	perf_fp	117:6:3079:3085	3508127	0	True				
ANR	3508213	Identifier	perf_fp		3508127	0					
ANR	3508214	CompoundStatement		14:16:304:304	3508127	1					
ANR	3508215	ExpressionStatement	"fputs ( buf , perf_fp )"	118:2:3093:3114	3508127	0	True				
ANR	3508216	CallExpression	"fputs ( buf , perf_fp )"		3508127	0					
ANR	3508217	Callee	fputs		3508127	0					
ANR	3508218	Identifier	fputs		3508127	0					
ANR	3508219	ArgumentList	buf		3508127	1					
ANR	3508220	Argument	buf		3508127	0					
ANR	3508221	Identifier	buf		3508127	0					
ANR	3508222	Argument	perf_fp		3508127	1					
ANR	3508223	Identifier	perf_fp		3508127	0					
ANR	3508224	ReturnType	void		3508127	1					
ANR	3508225	Identifier	dump		3508127	2					
ANR	3508226	ParameterList	"const char * s , int num , double t1"		3508127	3					
ANR	3508227	Parameter	const char * s	103:11:2748:2760	3508127	0	True				
ANR	3508228	ParameterType	const char *		3508127	0					
ANR	3508229	Identifier	s		3508127	1					
ANR	3508230	Parameter	int num	103:26:2763:2769	3508127	1	True				
ANR	3508231	ParameterType	int		3508127	0					
ANR	3508232	Identifier	num		3508127	1					
ANR	3508233	Parameter	double t1	103:35:2772:2780	3508127	2	True				
ANR	3508234	ParameterType	double		3508127	0					
ANR	3508235	Identifier	t1		3508127	1					
ANR	3508236	CFGEntryNode	ENTRY		3508127		True				
ANR	3508237	CFGExitNode	EXIT		3508127		True				
ANR	3508238	Symbol	buf		3508127						
ANR	3508239	Symbol	s		3508127						
ANR	3508240	Symbol	stdout		3508127						
ANR	3508241	Symbol	dtime		3508127						
ANR	3508242	Symbol	num		3508127						
ANR	3508243	Symbol	per_sec		3508127						
ANR	3508244	Symbol	perf_fp		3508127						
ANR	3508245	Symbol	per		3508127						
ANR	3508246	Symbol	t1		3508127						
ANR	3508247	Symbol	t2		3508127						
ANR	3508248	Function	main	122:0:3122:8969							
ANR	3508249	FunctionDef	"main (int argc , char * argv [ ])"		3508248	0					
ANR	3508250	CompoundStatement		123:0:3157:8969	3508248	0					
ANR	3508251	ExpressionStatement	config ( )	124:1:3160:3168	3508248	0	True				
ANR	3508252	CallExpression	config ( )		3508248	0					
ANR	3508253	Callee	config		3508248	0					
ANR	3508254	Identifier	config		3508248	0					
ANR	3508255	ArgumentList			3508248	1					
ANR	3508256	IfStatement	if ( argc < 4 )		3508248	1					
ANR	3508257	Condition	argc < 4	126:6:3177:3184	3508248	0	True				
ANR	3508258	RelationalExpression	argc < 4		3508248	0		<			
ANR	3508259	Identifier	argc		3508248	0					
ANR	3508260	PrimaryExpression	4		3508248	1					
ANR	3508261	CompoundStatement		4:17:30:30	3508248	1					
ANR	3508262	Statement	fprintf	127:2:3192:3198	3508248	0	True				
ANR	3508263	Statement	(	127:9:3199:3199	3508248	1	True				
ANR	3508264	Statement	stderr	127:11:3201:3206	3508248	2	True				
ANR	3508265	Statement	","	127:17:3207:3207	3508248	3	True				
ANR	3508266	Statement	"""usage: lease_manager_test name max-leases duration"""	128:5:3214:3265	3508248	4	True				
ANR	3508267	Statement	""" [runtime] [# leases/req] [perf-file] [req] [attr=val]..\\n"""	129:5:3272:3331	3508248	5	True				
ANR	3508268	Statement	)	129:65:3332:3332	3508248	6	True				
ANR	3508269	ExpressionStatement		129:66:3333:3333	3508248	7	True				
ANR	3508270	ExpressionStatement	exit ( 1 )	130:2:3337:3346	3508248	8	True				
ANR	3508271	CallExpression	exit ( 1 )		3508248	0					
ANR	3508272	Callee	exit		3508248	0					
ANR	3508273	Identifier	exit		3508248	0					
ANR	3508274	ArgumentList	1		3508248	1					
ANR	3508275	Argument	1		3508248	0					
ANR	3508276	PrimaryExpression	1		3508248	0					
ANR	3508277	IdentifierDeclStatement	char * name = argv [ 1 ] ;	132:1:3352:3373	3508248	2	True				
ANR	3508278	IdentifierDecl	* name = argv [ 1 ]		3508248	0					
ANR	3508279	IdentifierDeclType	char *		3508248	0					
ANR	3508280	Identifier	name		3508248	1					
ANR	3508281	AssignmentExpression	* name = argv [ 1 ]		3508248	2		=			
ANR	3508282	Identifier	name		3508248	0					
ANR	3508283	ArrayIndexing	argv [ 1 ]		3508248	1					
ANR	3508284	Identifier	argv		3508248	0					
ANR	3508285	PrimaryExpression	1		3508248	1					
ANR	3508286	IdentifierDeclStatement	unsigned max_leases = ( unsigned ) atoi ( argv [ 2 ] ) ;	133:1:3376:3424	3508248	3	True				
ANR	3508287	IdentifierDecl	max_leases = ( unsigned ) atoi ( argv [ 2 ] )		3508248	0					
ANR	3508288	IdentifierDeclType	unsigned		3508248	0					
ANR	3508289	Identifier	max_leases		3508248	1					
ANR	3508290	AssignmentExpression	max_leases = ( unsigned ) atoi ( argv [ 2 ] )		3508248	2		=			
ANR	3508291	Identifier	max_leases		3508248	0					
ANR	3508292	CastExpression	( unsigned ) atoi ( argv [ 2 ] )		3508248	1					
ANR	3508293	CastTarget	unsigned		3508248	0					
ANR	3508294	CallExpression	atoi ( argv [ 2 ] )		3508248	1					
ANR	3508295	Callee	atoi		3508248	0					
ANR	3508296	Identifier	atoi		3508248	0					
ANR	3508297	ArgumentList	argv [ 2 ]		3508248	1					
ANR	3508298	Argument	argv [ 2 ]		3508248	0					
ANR	3508299	ArrayIndexing	argv [ 2 ]		3508248	0					
ANR	3508300	Identifier	argv		3508248	0					
ANR	3508301	PrimaryExpression	2		3508248	1					
ANR	3508302	IdentifierDeclStatement	int lease_req_count = 1 + ( max_leases / 10 ) ;	134:1:3427:3472	3508248	4	True				
ANR	3508303	IdentifierDecl	lease_req_count = 1 + ( max_leases / 10 )		3508248	0					
ANR	3508304	IdentifierDeclType	int		3508248	0					
ANR	3508305	Identifier	lease_req_count		3508248	1					
ANR	3508306	AssignmentExpression	lease_req_count = 1 + ( max_leases / 10 )		3508248	2		=			
ANR	3508307	Identifier	lease_req_count		3508248	0					
ANR	3508308	AdditiveExpression	1 + ( max_leases / 10 )		3508248	1		+			
ANR	3508309	PrimaryExpression	1		3508248	0					
ANR	3508310	MultiplicativeExpression	max_leases / 10		3508248	1		/			
ANR	3508311	Identifier	max_leases		3508248	0					
ANR	3508312	PrimaryExpression	10		3508248	1					
ANR	3508313	IdentifierDeclStatement	int duration = atoi ( argv [ 3 ] ) ;	135:1:3475:3507	3508248	5	True				
ANR	3508314	IdentifierDecl	duration = atoi ( argv [ 3 ] )		3508248	0					
ANR	3508315	IdentifierDeclType	int		3508248	0					
ANR	3508316	Identifier	duration		3508248	1					
ANR	3508317	AssignmentExpression	duration = atoi ( argv [ 3 ] )		3508248	2		=			
ANR	3508318	Identifier	duration		3508248	0					
ANR	3508319	CallExpression	atoi ( argv [ 3 ] )		3508248	1					
ANR	3508320	Callee	atoi		3508248	0					
ANR	3508321	Identifier	atoi		3508248	0					
ANR	3508322	ArgumentList	argv [ 3 ]		3508248	1					
ANR	3508323	Argument	argv [ 3 ]		3508248	0					
ANR	3508324	ArrayIndexing	argv [ 3 ]		3508248	0					
ANR	3508325	Identifier	argv		3508248	0					
ANR	3508326	PrimaryExpression	3		3508248	1					
ANR	3508327	IdentifierDeclStatement	int runtime = duration * 5 ;	136:1:3510:3538	3508248	6	True				
ANR	3508328	IdentifierDecl	runtime = duration * 5		3508248	0					
ANR	3508329	IdentifierDeclType	int		3508248	0					
ANR	3508330	Identifier	runtime		3508248	1					
ANR	3508331	AssignmentExpression	runtime = duration * 5		3508248	2		=			
ANR	3508332	Identifier	runtime		3508248	0					
ANR	3508333	MultiplicativeExpression	duration * 5		3508248	1		*			
ANR	3508334	Identifier	duration		3508248	0					
ANR	3508335	PrimaryExpression	5		3508248	1					
ANR	3508336	IdentifierDeclStatement	char * requirements = NULL ;	137:1:3541:3567	3508248	7	True				
ANR	3508337	IdentifierDecl	* requirements = NULL		3508248	0					
ANR	3508338	IdentifierDeclType	char *		3508248	0					
ANR	3508339	Identifier	requirements		3508248	1					
ANR	3508340	AssignmentExpression	* requirements = NULL		3508248	2		=			
ANR	3508341	Identifier	NULL		3508248	0					
ANR	3508342	Identifier	NULL		3508248	1					
ANR	3508343	IdentifierDeclStatement	char * perf_file = NULL ;	138:1:3570:3593	3508248	8	True				
ANR	3508344	IdentifierDecl	* perf_file = NULL		3508248	0					
ANR	3508345	IdentifierDeclType	char *		3508248	0					
ANR	3508346	Identifier	perf_file		3508248	1					
ANR	3508347	AssignmentExpression	* perf_file = NULL		3508248	2		=			
ANR	3508348	Identifier	NULL		3508248	0					
ANR	3508349	Identifier	NULL		3508248	1					
ANR	3508350	IfStatement	if ( argc >= 5 )		3508248	9					
ANR	3508351	Condition	argc >= 5	140:6:3602:3610	3508248	0	True				
ANR	3508352	RelationalExpression	argc >= 5		3508248	0		>=			
ANR	3508353	Identifier	argc		3508248	0					
ANR	3508354	PrimaryExpression	5		3508248	1					
ANR	3508355	CompoundStatement		19:2:460:471	3508248	1					
ANR	3508356	IdentifierDeclStatement	int t = - 1 ;	141:2:3618:3629	3508248	0	True				
ANR	3508357	IdentifierDecl	t = - 1		3508248	0					
ANR	3508358	IdentifierDeclType	int		3508248	0					
ANR	3508359	Identifier	t		3508248	1					
ANR	3508360	AssignmentExpression	t = - 1		3508248	2		=			
ANR	3508361	Identifier	t		3508248	0					
ANR	3508362	UnaryOperationExpression	- 1		3508248	1					
ANR	3508363	UnaryOperator	-		3508248	0					
ANR	3508364	PrimaryExpression	1		3508248	1					
ANR	3508365	ExpressionStatement	t = atoi ( argv [ 4 ] )	142:2:3633:3652	3508248	1	True				
ANR	3508366	AssignmentExpression	t = atoi ( argv [ 4 ] )		3508248	0		=			
ANR	3508367	Identifier	t		3508248	0					
ANR	3508368	CallExpression	atoi ( argv [ 4 ] )		3508248	1					
ANR	3508369	Callee	atoi		3508248	0					
ANR	3508370	Identifier	atoi		3508248	0					
ANR	3508371	ArgumentList	argv [ 4 ]		3508248	1					
ANR	3508372	Argument	argv [ 4 ]		3508248	0					
ANR	3508373	ArrayIndexing	argv [ 4 ]		3508248	0					
ANR	3508374	Identifier	argv		3508248	0					
ANR	3508375	PrimaryExpression	4		3508248	1					
ANR	3508376	IfStatement	if ( t > 0 )		3508248	2					
ANR	3508377	Condition	t > 0	143:7:3661:3665	3508248	0	True				
ANR	3508378	RelationalExpression	t > 0		3508248	0		>			
ANR	3508379	Identifier	t		3508248	0					
ANR	3508380	PrimaryExpression	0		3508248	1					
ANR	3508381	ExpressionStatement	runtime = t	143:15:3669:3680	3508248	1	True				
ANR	3508382	AssignmentExpression	runtime = t		3508248	0		=			
ANR	3508383	Identifier	runtime		3508248	0					
ANR	3508384	Identifier	t		3508248	1					
ANR	3508385	IfStatement	if ( argc >= 6 )		3508248	10					
ANR	3508386	Condition	argc >= 6	145:6:3691:3699	3508248	0	True				
ANR	3508387	RelationalExpression	argc >= 6		3508248	0		>=			
ANR	3508388	Identifier	argc		3508248	0					
ANR	3508389	PrimaryExpression	6		3508248	1					
ANR	3508390	CompoundStatement		24:2:549:560	3508248	1					
ANR	3508391	IdentifierDeclStatement	int t = - 1 ;	146:2:3707:3718	3508248	0	True				
ANR	3508392	IdentifierDecl	t = - 1		3508248	0					
ANR	3508393	IdentifierDeclType	int		3508248	0					
ANR	3508394	Identifier	t		3508248	1					
ANR	3508395	AssignmentExpression	t = - 1		3508248	2		=			
ANR	3508396	Identifier	t		3508248	0					
ANR	3508397	UnaryOperationExpression	- 1		3508248	1					
ANR	3508398	UnaryOperator	-		3508248	0					
ANR	3508399	PrimaryExpression	1		3508248	1					
ANR	3508400	ExpressionStatement	t = atoi ( argv [ 5 ] )	147:2:3722:3741	3508248	1	True				
ANR	3508401	AssignmentExpression	t = atoi ( argv [ 5 ] )		3508248	0		=			
ANR	3508402	Identifier	t		3508248	0					
ANR	3508403	CallExpression	atoi ( argv [ 5 ] )		3508248	1					
ANR	3508404	Callee	atoi		3508248	0					
ANR	3508405	Identifier	atoi		3508248	0					
ANR	3508406	ArgumentList	argv [ 5 ]		3508248	1					
ANR	3508407	Argument	argv [ 5 ]		3508248	0					
ANR	3508408	ArrayIndexing	argv [ 5 ]		3508248	0					
ANR	3508409	Identifier	argv		3508248	0					
ANR	3508410	PrimaryExpression	5		3508248	1					
ANR	3508411	IfStatement	if ( t > 0 )		3508248	2					
ANR	3508412	Condition	t > 0	148:7:3750:3754	3508248	0	True				
ANR	3508413	RelationalExpression	t > 0		3508248	0		>			
ANR	3508414	Identifier	t		3508248	0					
ANR	3508415	PrimaryExpression	0		3508248	1					
ANR	3508416	ExpressionStatement	lease_req_count = t	148:15:3758:3777	3508248	1	True				
ANR	3508417	AssignmentExpression	lease_req_count = t		3508248	0		=			
ANR	3508418	Identifier	lease_req_count		3508248	0					
ANR	3508419	Identifier	t		3508248	1					
ANR	3508420	IfStatement	if ( argc >= 7 )		3508248	11					
ANR	3508421	Condition	argc >= 7	150:6:3788:3796	3508248	0	True				
ANR	3508422	RelationalExpression	argc >= 7		3508248	0		>=			
ANR	3508423	Identifier	argc		3508248	0					
ANR	3508424	PrimaryExpression	7		3508248	1					
ANR	3508425	CompoundStatement		28:18:642:642	3508248	1					
ANR	3508426	IfStatement	if ( * argv [ 6 ] != '-' )		3508248	0					
ANR	3508427	Condition	* argv [ 6 ] != '-'	151:7:3809:3823	3508248	0	True				
ANR	3508428	EqualityExpression	* argv [ 6 ] != '-'		3508248	0		!=			
ANR	3508429	UnaryOperationExpression	* argv [ 6 ]		3508248	0					
ANR	3508430	UnaryOperator	*		3508248	0					
ANR	3508431	ArrayIndexing	argv [ 6 ]		3508248	1					
ANR	3508432	Identifier	argv		3508248	0					
ANR	3508433	PrimaryExpression	6		3508248	1					
ANR	3508434	PrimaryExpression	'-'		3508248	1					
ANR	3508435	CompoundStatement		29:25:669:669	3508248	1					
ANR	3508436	ExpressionStatement	perf_file = argv [ 6 ]	152:3:3832:3851	3508248	0	True				
ANR	3508437	AssignmentExpression	perf_file = argv [ 6 ]		3508248	0		=			
ANR	3508438	Identifier	perf_file		3508248	0					
ANR	3508439	ArrayIndexing	argv [ 6 ]		3508248	1					
ANR	3508440	Identifier	argv		3508248	0					
ANR	3508441	PrimaryExpression	6		3508248	1					
ANR	3508442	IfStatement	if ( argc >= 8 )		3508248	12					
ANR	3508443	Condition	argc >= 8	155:6:3866:3874	3508248	0	True				
ANR	3508444	RelationalExpression	argc >= 8		3508248	0		>=			
ANR	3508445	Identifier	argc		3508248	0					
ANR	3508446	PrimaryExpression	8		3508248	1					
ANR	3508447	CompoundStatement		33:18:720:720	3508248	1					
ANR	3508448	IfStatement	if ( * argv [ 7 ] != '-' )		3508248	0					
ANR	3508449	Condition	* argv [ 7 ] != '-'	156:7:3887:3901	3508248	0	True				
ANR	3508450	EqualityExpression	* argv [ 7 ] != '-'		3508248	0		!=			
ANR	3508451	UnaryOperationExpression	* argv [ 7 ]		3508248	0					
ANR	3508452	UnaryOperator	*		3508248	0					
ANR	3508453	ArrayIndexing	argv [ 7 ]		3508248	1					
ANR	3508454	Identifier	argv		3508248	0					
ANR	3508455	PrimaryExpression	7		3508248	1					
ANR	3508456	PrimaryExpression	'-'		3508248	1					
ANR	3508457	CompoundStatement		34:25:747:747	3508248	1					
ANR	3508458	ExpressionStatement	requirements = argv [ 7 ]	157:3:3910:3932	3508248	0	True				
ANR	3508459	AssignmentExpression	requirements = argv [ 7 ]		3508248	0		=			
ANR	3508460	Identifier	requirements		3508248	0					
ANR	3508461	ArrayIndexing	argv [ 7 ]		3508248	1					
ANR	3508462	Identifier	argv		3508248	0					
ANR	3508463	PrimaryExpression	7		3508248	1					
ANR	3508464	ExpressionStatement	"printf ( ""My name is '%s'\\n"" , name )"	161:1:3943:3978	3508248	13	True				
ANR	3508465	CallExpression	"printf ( ""My name is '%s'\\n"" , name )"		3508248	0					
ANR	3508466	Callee	printf		3508248	0					
ANR	3508467	Identifier	printf		3508248	0					
ANR	3508468	ArgumentList	"""My name is '%s'\\n"""		3508248	1					
ANR	3508469	Argument	"""My name is '%s'\\n"""		3508248	0					
ANR	3508470	PrimaryExpression	"""My name is '%s'\\n"""		3508248	0					
ANR	3508471	Argument	name		3508248	1					
ANR	3508472	Identifier	name		3508248	0					
ANR	3508473	ExpressionStatement	"printf ( ""Requesting %u leases / round (duration %ds), max of %u\\n"" , lease_req_count , duration , max_leases )"	162:1:3981:4091	3508248	14	True				
ANR	3508474	CallExpression	"printf ( ""Requesting %u leases / round (duration %ds), max of %u\\n"" , lease_req_count , duration , max_leases )"		3508248	0					
ANR	3508475	Callee	printf		3508248	0					
ANR	3508476	Identifier	printf		3508248	0					
ANR	3508477	ArgumentList	"""Requesting %u leases / round (duration %ds), max of %u\\n"""		3508248	1					
ANR	3508478	Argument	"""Requesting %u leases / round (duration %ds), max of %u\\n"""		3508248	0					
ANR	3508479	PrimaryExpression	"""Requesting %u leases / round (duration %ds), max of %u\\n"""		3508248	0					
ANR	3508480	Argument	lease_req_count		3508248	1					
ANR	3508481	Identifier	lease_req_count		3508248	0					
ANR	3508482	Argument	duration		3508248	2					
ANR	3508483	Identifier	duration		3508248	0					
ANR	3508484	Argument	max_leases		3508248	3					
ANR	3508485	Identifier	max_leases		3508248	0					
ANR	3508486	ExpressionStatement	"printf ( ""Running for %d seconds, perf file: '%s', req: '%s'\\n"" , runtime , perf_file , requirements )"	164:1:4094:4195	3508248	15	True				
ANR	3508487	CallExpression	"printf ( ""Running for %d seconds, perf file: '%s', req: '%s'\\n"" , runtime , perf_file , requirements )"		3508248	0					
ANR	3508488	Callee	printf		3508248	0					
ANR	3508489	Identifier	printf		3508248	0					
ANR	3508490	ArgumentList	"""Running for %d seconds, perf file: '%s', req: '%s'\\n"""		3508248	1					
ANR	3508491	Argument	"""Running for %d seconds, perf file: '%s', req: '%s'\\n"""		3508248	0					
ANR	3508492	PrimaryExpression	"""Running for %d seconds, perf file: '%s', req: '%s'\\n"""		3508248	0					
ANR	3508493	Argument	runtime		3508248	1					
ANR	3508494	Identifier	runtime		3508248	0					
ANR	3508495	Argument	perf_file		3508248	2					
ANR	3508496	Identifier	perf_file		3508248	0					
ANR	3508497	Argument	requirements		3508248	3					
ANR	3508498	Identifier	requirements		3508248	0					
ANR	3508499	ExpressionStatement	"signal ( SIGINT , handler )"	168:1:4220:4244	3508248	16	True				
ANR	3508500	CallExpression	"signal ( SIGINT , handler )"		3508248	0					
ANR	3508501	Callee	signal		3508248	0					
ANR	3508502	Identifier	signal		3508248	0					
ANR	3508503	ArgumentList	SIGINT		3508248	1					
ANR	3508504	Argument	SIGINT		3508248	0					
ANR	3508505	Identifier	SIGINT		3508248	0					
ANR	3508506	Argument	handler		3508248	1					
ANR	3508507	Identifier	handler		3508248	0					
ANR	3508508	ExpressionStatement	"signal ( SIGTERM , handler )"	169:1:4247:4272	3508248	17	True				
ANR	3508509	CallExpression	"signal ( SIGTERM , handler )"		3508248	0					
ANR	3508510	Callee	signal		3508248	0					
ANR	3508511	Identifier	signal		3508248	0					
ANR	3508512	ArgumentList	SIGTERM		3508248	1					
ANR	3508513	Argument	SIGTERM		3508248	0					
ANR	3508514	Identifier	SIGTERM		3508248	0					
ANR	3508515	Argument	handler		3508248	1					
ANR	3508516	Identifier	handler		3508248	0					
ANR	3508517	ExpressionStatement	srandom ( time ( NULL ) )	170:1:4275:4296	3508248	18	True				
ANR	3508518	CallExpression	srandom ( time ( NULL ) )		3508248	0					
ANR	3508519	Callee	srandom		3508248	0					
ANR	3508520	Identifier	srandom		3508248	0					
ANR	3508521	ArgumentList	time ( NULL )		3508248	1					
ANR	3508522	Argument	time ( NULL )		3508248	0					
ANR	3508523	CallExpression	time ( NULL )		3508248	0					
ANR	3508524	Callee	time		3508248	0					
ANR	3508525	Identifier	time		3508248	0					
ANR	3508526	ArgumentList	NULL		3508248	1					
ANR	3508527	Argument	NULL		3508248	0					
ANR	3508528	Identifier	NULL		3508248	0					
ANR	3508529	IfStatement	if ( perf_file )		3508248	19					
ANR	3508530	Condition	perf_file	173:6:4326:4334	3508248	0	True				
ANR	3508531	Identifier	perf_file		3508248	0					
ANR	3508532	CompoundStatement		51:18:1180:1180	3508248	1					
ANR	3508533	ExpressionStatement	"perf_fp = fopen ( perf_file , ""w"" )"	174:2:4342:4375	3508248	0	True				
ANR	3508534	AssignmentExpression	"perf_fp = fopen ( perf_file , ""w"" )"		3508248	0		=			
ANR	3508535	Identifier	perf_fp		3508248	0					
ANR	3508536	CallExpression	"fopen ( perf_file , ""w"" )"		3508248	1					
ANR	3508537	Callee	fopen		3508248	0					
ANR	3508538	Identifier	fopen		3508248	0					
ANR	3508539	ArgumentList	perf_file		3508248	1					
ANR	3508540	Argument	perf_file		3508248	0					
ANR	3508541	Identifier	perf_file		3508248	0					
ANR	3508542	Argument	"""w"""		3508248	1					
ANR	3508543	PrimaryExpression	"""w"""		3508248	0					
ANR	3508544	ExpressionStatement	"printf ( ""Logging to %s: %p\\n"" , perf_file , perf_fp )"	175:2:4379:4430	3508248	1	True				
ANR	3508545	CallExpression	"printf ( ""Logging to %s: %p\\n"" , perf_file , perf_fp )"		3508248	0					
ANR	3508546	Callee	printf		3508248	0					
ANR	3508547	Identifier	printf		3508248	0					
ANR	3508548	ArgumentList	"""Logging to %s: %p\\n"""		3508248	1					
ANR	3508549	Argument	"""Logging to %s: %p\\n"""		3508248	0					
ANR	3508550	PrimaryExpression	"""Logging to %s: %p\\n"""		3508248	0					
ANR	3508551	Argument	perf_file		3508248	1					
ANR	3508552	Identifier	perf_file		3508248	0					
ANR	3508553	Argument	perf_fp		3508248	2					
ANR	3508554	Identifier	perf_fp		3508248	0					
ANR	3508555	IdentifierDeclStatement	classad :: ClassAd ad ;	179:1:4454:4473	3508248	20	True				
ANR	3508556	IdentifierDecl	ad		3508248	0					
ANR	3508557	IdentifierDeclType	classad :: ClassAd		3508248	0					
ANR	3508558	Identifier	ad		3508248	1					
ANR	3508559	ExpressionStatement	"ad . InsertAttr ( ""Name"" , name )"	180:1:4476:4505	3508248	21	True				
ANR	3508560	CallExpression	"ad . InsertAttr ( ""Name"" , name )"		3508248	0					
ANR	3508561	Callee	ad . InsertAttr		3508248	0					
ANR	3508562	MemberAccess	ad . InsertAttr		3508248	0					
ANR	3508563	Identifier	ad		3508248	0					
ANR	3508564	Identifier	InsertAttr		3508248	1					
ANR	3508565	ArgumentList	"""Name"""		3508248	1					
ANR	3508566	Argument	"""Name"""		3508248	0					
ANR	3508567	PrimaryExpression	"""Name"""		3508248	0					
ANR	3508568	Argument	name		3508248	1					
ANR	3508569	Identifier	name		3508248	0					
ANR	3508570	ExpressionStatement	"ad . InsertAttr ( ""RequestCount"" , lease_req_count )"	181:1:4508:4556	3508248	22	True				
ANR	3508571	CallExpression	"ad . InsertAttr ( ""RequestCount"" , lease_req_count )"		3508248	0					
ANR	3508572	Callee	ad . InsertAttr		3508248	0					
ANR	3508573	MemberAccess	ad . InsertAttr		3508248	0					
ANR	3508574	Identifier	ad		3508248	0					
ANR	3508575	Identifier	InsertAttr		3508248	1					
ANR	3508576	ArgumentList	"""RequestCount"""		3508248	1					
ANR	3508577	Argument	"""RequestCount"""		3508248	0					
ANR	3508578	PrimaryExpression	"""RequestCount"""		3508248	0					
ANR	3508579	Argument	lease_req_count		3508248	1					
ANR	3508580	Identifier	lease_req_count		3508248	0					
ANR	3508581	ExpressionStatement	"ad . InsertAttr ( ""LeaseDuration"" , duration )"	182:1:4559:4601	3508248	23	True				
ANR	3508582	CallExpression	"ad . InsertAttr ( ""LeaseDuration"" , duration )"		3508248	0					
ANR	3508583	Callee	ad . InsertAttr		3508248	0					
ANR	3508584	MemberAccess	ad . InsertAttr		3508248	0					
ANR	3508585	Identifier	ad		3508248	0					
ANR	3508586	Identifier	InsertAttr		3508248	1					
ANR	3508587	ArgumentList	"""LeaseDuration"""		3508248	1					
ANR	3508588	Argument	"""LeaseDuration"""		3508248	0					
ANR	3508589	PrimaryExpression	"""LeaseDuration"""		3508248	0					
ANR	3508590	Argument	duration		3508248	1					
ANR	3508591	Identifier	duration		3508248	0					
ANR	3508592	IfStatement	if ( requirements )		3508248	24					
ANR	3508593	Condition	requirements	184:6:4610:4621	3508248	0	True				
ANR	3508594	Identifier	requirements		3508248	0					
ANR	3508595	CompoundStatement		64:2:1504:1568	3508248	1					
ANR	3508596	IdentifierDeclStatement	classad :: ClassAdParser parser ;	185:2:4629:4658	3508248	0	True				
ANR	3508597	IdentifierDecl	parser		3508248	0					
ANR	3508598	IdentifierDeclType	classad :: ClassAdParser		3508248	0					
ANR	3508599	Identifier	parser		3508248	1					
ANR	3508600	IdentifierDeclStatement	classad :: ExprTree * expr = parser . ParseExpression ( requirements ) ;	186:2:4662:4726	3508248	1	True				
ANR	3508601	IdentifierDecl	* expr = parser . ParseExpression ( requirements )		3508248	0					
ANR	3508602	IdentifierDeclType	classad :: ExprTree *		3508248	0					
ANR	3508603	Identifier	expr		3508248	1					
ANR	3508604	AssignmentExpression	* expr = parser . ParseExpression ( requirements )		3508248	2		=			
ANR	3508605	Identifier	expr		3508248	0					
ANR	3508606	CallExpression	parser . ParseExpression ( requirements )		3508248	1					
ANR	3508607	Callee	parser . ParseExpression		3508248	0					
ANR	3508608	MemberAccess	parser . ParseExpression		3508248	0					
ANR	3508609	Identifier	parser		3508248	0					
ANR	3508610	Identifier	ParseExpression		3508248	1					
ANR	3508611	ArgumentList	requirements		3508248	1					
ANR	3508612	Argument	requirements		3508248	0					
ANR	3508613	Identifier	requirements		3508248	0					
ANR	3508614	ExpressionStatement	"ad . Insert ( ""Requirements"" , expr )"	187:2:4730:4763	3508248	2	True				
ANR	3508615	CallExpression	"ad . Insert ( ""Requirements"" , expr )"		3508248	0					
ANR	3508616	Callee	ad . Insert		3508248	0					
ANR	3508617	MemberAccess	ad . Insert		3508248	0					
ANR	3508618	Identifier	ad		3508248	0					
ANR	3508619	Identifier	Insert		3508248	1					
ANR	3508620	ArgumentList	"""Requirements"""		3508248	1					
ANR	3508621	Argument	"""Requirements"""		3508248	0					
ANR	3508622	PrimaryExpression	"""Requirements"""		3508248	0					
ANR	3508623	Argument	expr		3508248	1					
ANR	3508624	Identifier	expr		3508248	0					
ANR	3508625	ForStatement	for ( int i = 8 ; i + 1 < argc ; i ++ )		3508248	25					
ANR	3508626	ForInit	int i = 8 ;	190:6:4775:4784	3508248	0	True				
ANR	3508627	IdentifierDeclStatement	int i = 8 ;		3508248	0					
ANR	3508628	IdentifierDecl	i = 8		3508248	0					
ANR	3508629	IdentifierDeclType	int		3508248	0					
ANR	3508630	Identifier	i		3508248	1					
ANR	3508631	AssignmentExpression	i = 8		3508248	2		=			
ANR	3508632	Identifier	i		3508248	0					
ANR	3508633	PrimaryExpression	8		3508248	1					
ANR	3508634	Condition	i + 1 < argc	190:18:4787:4796	3508248	1	True				
ANR	3508635	RelationalExpression	i + 1 < argc		3508248	0		<			
ANR	3508636	AdditiveExpression	i + 1		3508248	0		+			
ANR	3508637	Identifier	i		3508248	0					
ANR	3508638	PrimaryExpression	1		3508248	1					
ANR	3508639	Identifier	argc		3508248	1					
ANR	3508640	PostIncDecOperationExpression	i ++	190:31:4800:4802	3508248	2	True				
ANR	3508641	Identifier	i		3508248	0					
ANR	3508642	IncDec	++		3508248	1					
ANR	3508643	CompoundStatement		69:2:1652:1676	3508248	3					
ANR	3508644	IdentifierDeclStatement	"char attr [ 64 ] , value [ 64 ] ;"	191:2:4810:4834	3508248	0	True				
ANR	3508645	IdentifierDecl	attr [ 64 ]		3508248	0					
ANR	3508646	IdentifierDeclType	char [ 64 ]		3508248	0					
ANR	3508647	Identifier	attr		3508248	1					
ANR	3508648	PrimaryExpression	64		3508248	2					
ANR	3508649	IdentifierDecl	value [ 64 ]		3508248	1					
ANR	3508650	IdentifierDeclType	char [ 64 ]		3508248	0					
ANR	3508651	Identifier	value		3508248	1					
ANR	3508652	PrimaryExpression	64		3508248	2					
ANR	3508653	IfStatement	"if ( sscanf ( argv [ i ] , ""%s=%[^\\\\0]"" , attr , value ) != 2 )"		3508248	1					
ANR	3508654	Condition	"sscanf ( argv [ i ] , ""%s=%[^\\\\0]"" , attr , value ) != 2"	192:7:4843:4891	3508248	0	True				
ANR	3508655	EqualityExpression	"sscanf ( argv [ i ] , ""%s=%[^\\\\0]"" , attr , value ) != 2"		3508248	0		!=			
ANR	3508656	CallExpression	"sscanf ( argv [ i ] , ""%s=%[^\\\\0]"" , attr , value )"		3508248	0					
ANR	3508657	Callee	sscanf		3508248	0					
ANR	3508658	Identifier	sscanf		3508248	0					
ANR	3508659	ArgumentList	argv [ i ]		3508248	1					
ANR	3508660	Argument	argv [ i ]		3508248	0					
ANR	3508661	ArrayIndexing	argv [ i ]		3508248	0					
ANR	3508662	Identifier	argv		3508248	0					
ANR	3508663	Identifier	i		3508248	1					
ANR	3508664	Argument	"""%s=%[^\\\\0]"""		3508248	1					
ANR	3508665	PrimaryExpression	"""%s=%[^\\\\0]"""		3508248	0					
ANR	3508666	Argument	attr		3508248	2					
ANR	3508667	Identifier	attr		3508248	0					
ANR	3508668	Argument	value		3508248	3					
ANR	3508669	Identifier	value		3508248	0					
ANR	3508670	PrimaryExpression	2		3508248	1					
ANR	3508671	CompoundStatement		70:59:1737:1737	3508248	1					
ANR	3508672	ExpressionStatement	"printf ( ""Ignoring %s\\n"" , argv [ i ] )"	193:3:4900:4934	3508248	0	True				
ANR	3508673	CallExpression	"printf ( ""Ignoring %s\\n"" , argv [ i ] )"		3508248	0					
ANR	3508674	Callee	printf		3508248	0					
ANR	3508675	Identifier	printf		3508248	0					
ANR	3508676	ArgumentList	"""Ignoring %s\\n"""		3508248	1					
ANR	3508677	Argument	"""Ignoring %s\\n"""		3508248	0					
ANR	3508678	PrimaryExpression	"""Ignoring %s\\n"""		3508248	0					
ANR	3508679	Argument	argv [ i ]		3508248	1					
ANR	3508680	ArrayIndexing	argv [ i ]		3508248	0					
ANR	3508681	Identifier	argv		3508248	0					
ANR	3508682	Identifier	i		3508248	1					
ANR	3508683	ExpressionStatement	"printf ( ""Adding '%s' = '%s'\\n"" , attr , value )"	195:2:4942:4987	3508248	2	True				
ANR	3508684	CallExpression	"printf ( ""Adding '%s' = '%s'\\n"" , attr , value )"		3508248	0					
ANR	3508685	Callee	printf		3508248	0					
ANR	3508686	Identifier	printf		3508248	0					
ANR	3508687	ArgumentList	"""Adding '%s' = '%s'\\n"""		3508248	1					
ANR	3508688	Argument	"""Adding '%s' = '%s'\\n"""		3508248	0					
ANR	3508689	PrimaryExpression	"""Adding '%s' = '%s'\\n"""		3508248	0					
ANR	3508690	Argument	attr		3508248	1					
ANR	3508691	Identifier	attr		3508248	0					
ANR	3508692	Argument	value		3508248	2					
ANR	3508693	Identifier	value		3508248	0					
ANR	3508694	ExpressionStatement	"ad . InsertAttr ( attr , value )"	196:2:4991:5019	3508248	3	True				
ANR	3508695	CallExpression	"ad . InsertAttr ( attr , value )"		3508248	0					
ANR	3508696	Callee	ad . InsertAttr		3508248	0					
ANR	3508697	MemberAccess	ad . InsertAttr		3508248	0					
ANR	3508698	Identifier	ad		3508248	0					
ANR	3508699	Identifier	InsertAttr		3508248	1					
ANR	3508700	ArgumentList	attr		3508248	1					
ANR	3508701	Argument	attr		3508248	0					
ANR	3508702	Identifier	attr		3508248	0					
ANR	3508703	Argument	value		3508248	1					
ANR	3508704	Identifier	value		3508248	0					
ANR	3508705	CompoundStatement		78:2:1897:1917	3508248	26					
ANR	3508706	IdentifierDeclStatement	classad :: PrettyPrint u ;	199:2:5029:5051	3508248	0	True				
ANR	3508707	IdentifierDecl	u		3508248	0					
ANR	3508708	IdentifierDeclType	classad :: PrettyPrint		3508248	0					
ANR	3508709	Identifier	u		3508248	1					
ANR	3508710	IdentifierDeclStatement	std :: string adbuffer ;	200:2:5055:5075	3508248	1	True				
ANR	3508711	IdentifierDecl	adbuffer		3508248	0					
ANR	3508712	IdentifierDeclType	std :: string		3508248	0					
ANR	3508713	Identifier	adbuffer		3508248	1					
ANR	3508714	ExpressionStatement	"u . Unparse ( adbuffer , & ad )"	201:2:5079:5105	3508248	2	True				
ANR	3508715	CallExpression	"u . Unparse ( adbuffer , & ad )"		3508248	0					
ANR	3508716	Callee	u . Unparse		3508248	0					
ANR	3508717	MemberAccess	u . Unparse		3508248	0					
ANR	3508718	Identifier	u		3508248	0					
ANR	3508719	Identifier	Unparse		3508248	1					
ANR	3508720	ArgumentList	adbuffer		3508248	1					
ANR	3508721	Argument	adbuffer		3508248	0					
ANR	3508722	Identifier	adbuffer		3508248	0					
ANR	3508723	Argument	& ad		3508248	1					
ANR	3508724	UnaryOperationExpression	& ad		3508248	0					
ANR	3508725	UnaryOperator	&		3508248	0					
ANR	3508726	Identifier	ad		3508248	1					
ANR	3508727	ExpressionStatement	"printf ( ""Match Ad=%s\\n"" , adbuffer . c_str ( ) )"	202:2:5109:5152	3508248	3	True				
ANR	3508728	CallExpression	"printf ( ""Match Ad=%s\\n"" , adbuffer . c_str ( ) )"		3508248	0					
ANR	3508729	Callee	printf		3508248	0					
ANR	3508730	Identifier	printf		3508248	0					
ANR	3508731	ArgumentList	"""Match Ad=%s\\n"""		3508248	1					
ANR	3508732	Argument	"""Match Ad=%s\\n"""		3508248	0					
ANR	3508733	PrimaryExpression	"""Match Ad=%s\\n"""		3508248	0					
ANR	3508734	Argument	adbuffer . c_str ( )		3508248	1					
ANR	3508735	CallExpression	adbuffer . c_str ( )		3508248	0					
ANR	3508736	Callee	adbuffer . c_str		3508248	0					
ANR	3508737	MemberAccess	adbuffer . c_str		3508248	0					
ANR	3508738	Identifier	adbuffer		3508248	0					
ANR	3508739	Identifier	c_str		3508248	1					
ANR	3508740	ArgumentList			3508248	1					
ANR	3508741	IdentifierDeclStatement	list < DCLeaseManagerLease * > leases ;	205:1:5159:5193	3508248	27	True				
ANR	3508742	IdentifierDecl	leases		3508248	0					
ANR	3508743	IdentifierDeclType	list < DCLeaseManagerLease * >		3508248	0					
ANR	3508744	Identifier	leases		3508248	1					
ANR	3508745	IdentifierDeclStatement	DCLeaseManager * lm = new DCLeaseManager ( ) ;	207:1:5197:5239	3508248	28	True				
ANR	3508746	IdentifierDecl	* lm = new DCLeaseManager ( )		3508248	0					
ANR	3508747	IdentifierDeclType	DCLeaseManager *		3508248	0					
ANR	3508748	Identifier	lm		3508248	1					
ANR	3508749	AssignmentExpression	* lm = new DCLeaseManager ( )		3508248	2		=			
ANR	3508750	Identifier	lm		3508248	0					
ANR	3508751	UnaryExpression	new DCLeaseManager ( )		3508248	1					
ANR	3508752	ExpressionStatement	"printf ( ""name: %s\\n"" , name )"	209:1:5243:5271	3508248	29	True				
ANR	3508753	CallExpression	"printf ( ""name: %s\\n"" , name )"		3508248	0					
ANR	3508754	Callee	printf		3508248	0					
ANR	3508755	Identifier	printf		3508248	0					
ANR	3508756	ArgumentList	"""name: %s\\n"""		3508248	1					
ANR	3508757	Argument	"""name: %s\\n"""		3508248	0					
ANR	3508758	PrimaryExpression	"""name: %s\\n"""		3508248	0					
ANR	3508759	Argument	name		3508248	1					
ANR	3508760	Identifier	name		3508248	0					
ANR	3508761	ExpressionStatement	"printf ( ""count: %d\\n"" , lease_req_count )"	210:1:5274:5314	3508248	30	True				
ANR	3508762	CallExpression	"printf ( ""count: %d\\n"" , lease_req_count )"		3508248	0					
ANR	3508763	Callee	printf		3508248	0					
ANR	3508764	Identifier	printf		3508248	0					
ANR	3508765	ArgumentList	"""count: %d\\n"""		3508248	1					
ANR	3508766	Argument	"""count: %d\\n"""		3508248	0					
ANR	3508767	PrimaryExpression	"""count: %d\\n"""		3508248	0					
ANR	3508768	Argument	lease_req_count		3508248	1					
ANR	3508769	Identifier	lease_req_count		3508248	0					
ANR	3508770	ExpressionStatement	"printf ( ""duration: %d\\n"" , duration )"	211:1:5317:5353	3508248	31	True				
ANR	3508771	CallExpression	"printf ( ""duration: %d\\n"" , duration )"		3508248	0					
ANR	3508772	Callee	printf		3508248	0					
ANR	3508773	Identifier	printf		3508248	0					
ANR	3508774	ArgumentList	"""duration: %d\\n"""		3508248	1					
ANR	3508775	Argument	"""duration: %d\\n"""		3508248	0					
ANR	3508776	PrimaryExpression	"""duration: %d\\n"""		3508248	0					
ANR	3508777	Argument	duration		3508248	1					
ANR	3508778	Identifier	duration		3508248	0					
ANR	3508779	ExpressionStatement	"printf ( ""runtime: %d\\n"" , runtime )"	212:1:5356:5390	3508248	32	True				
ANR	3508780	CallExpression	"printf ( ""runtime: %d\\n"" , runtime )"		3508248	0					
ANR	3508781	Callee	printf		3508248	0					
ANR	3508782	Identifier	printf		3508248	0					
ANR	3508783	ArgumentList	"""runtime: %d\\n"""		3508248	1					
ANR	3508784	Argument	"""runtime: %d\\n"""		3508248	0					
ANR	3508785	PrimaryExpression	"""runtime: %d\\n"""		3508248	0					
ANR	3508786	Argument	runtime		3508248	1					
ANR	3508787	Identifier	runtime		3508248	0					
ANR	3508788	ExpressionStatement	"printf ( ""leases: %d\\n"" , max_leases )"	213:1:5393:5429	3508248	33	True				
ANR	3508789	CallExpression	"printf ( ""leases: %d\\n"" , max_leases )"		3508248	0					
ANR	3508790	Callee	printf		3508248	0					
ANR	3508791	Identifier	printf		3508248	0					
ANR	3508792	ArgumentList	"""leases: %d\\n"""		3508248	1					
ANR	3508793	Argument	"""leases: %d\\n"""		3508248	0					
ANR	3508794	PrimaryExpression	"""leases: %d\\n"""		3508248	0					
ANR	3508795	Argument	max_leases		3508248	1					
ANR	3508796	Identifier	max_leases		3508248	0					
ANR	3508797	ExpressionStatement	"printf ( ""req: %s\\n"" , requirements )"	214:1:5432:5467	3508248	34	True				
ANR	3508798	CallExpression	"printf ( ""req: %s\\n"" , requirements )"		3508248	0					
ANR	3508799	Callee	printf		3508248	0					
ANR	3508800	Identifier	printf		3508248	0					
ANR	3508801	ArgumentList	"""req: %s\\n"""		3508248	1					
ANR	3508802	Argument	"""req: %s\\n"""		3508248	0					
ANR	3508803	PrimaryExpression	"""req: %s\\n"""		3508248	0					
ANR	3508804	Argument	requirements		3508248	1					
ANR	3508805	Identifier	requirements		3508248	0					
ANR	3508806	IdentifierDeclStatement	time_t now = time ( NULL ) ;	217:1:5495:5520	3508248	35	True				
ANR	3508807	IdentifierDecl	now = time ( NULL )		3508248	0					
ANR	3508808	IdentifierDeclType	time_t		3508248	0					
ANR	3508809	Identifier	now		3508248	1					
ANR	3508810	AssignmentExpression	now = time ( NULL )		3508248	2		=			
ANR	3508811	Identifier	now		3508248	0					
ANR	3508812	CallExpression	time ( NULL )		3508248	1					
ANR	3508813	Callee	time		3508248	0					
ANR	3508814	Identifier	time		3508248	0					
ANR	3508815	ArgumentList	NULL		3508248	1					
ANR	3508816	Argument	NULL		3508248	0					
ANR	3508817	Identifier	NULL		3508248	0					
ANR	3508818	IdentifierDeclStatement	time_t endtime = now + runtime ;	218:1:5523:5553	3508248	36	True				
ANR	3508819	IdentifierDecl	endtime = now + runtime		3508248	0					
ANR	3508820	IdentifierDeclType	time_t		3508248	0					
ANR	3508821	Identifier	endtime		3508248	1					
ANR	3508822	AssignmentExpression	endtime = now + runtime		3508248	2		=			
ANR	3508823	Identifier	endtime		3508248	0					
ANR	3508824	AdditiveExpression	now + runtime		3508248	1		+			
ANR	3508825	Identifier	now		3508248	0					
ANR	3508826	Identifier	runtime		3508248	1					
ANR	3508827	WhileStatement	while ( ( ! stop ) && ( ( now = time ( NULL ) ) < endtime ) )		3508248	37					
ANR	3508828	Condition	( ! stop ) && ( ( now = time ( NULL ) ) < endtime )	219:9:5564:5604	3508248	0	True				
ANR	3508829	AndExpression	( ! stop ) && ( ( now = time ( NULL ) ) < endtime )		3508248	0		&&			
ANR	3508830	UnaryOperationExpression	! stop		3508248	0					
ANR	3508831	UnaryOperator	!		3508248	0					
ANR	3508832	Identifier	stop		3508248	1					
ANR	3508833	RelationalExpression	( now = time ( NULL ) ) < endtime		3508248	1		<			
ANR	3508834	AssignmentExpression	now = time ( NULL )		3508248	0		=			
ANR	3508835	Identifier	now		3508248	0					
ANR	3508836	CallExpression	time ( NULL )		3508248	1					
ANR	3508837	Callee	time		3508248	0					
ANR	3508838	Identifier	time		3508248	0					
ANR	3508839	ArgumentList	NULL		3508248	1					
ANR	3508840	Argument	NULL		3508248	0					
ANR	3508841	Identifier	NULL		3508248	0					
ANR	3508842	Identifier	endtime		3508248	1					
ANR	3508843	CompoundStatement		109:2:2772:2812	3508248	1					
ANR	3508844	IdentifierDeclStatement	int stime = 1 + ( random ( ) % ( leases . size ( ) ? 60 : 5 ) ) ;	222:2:5640:5697	3508248	0	True				
ANR	3508845	IdentifierDecl	stime = 1 + ( random ( ) % ( leases . size ( ) ? 60 : 5 ) )		3508248	0					
ANR	3508846	IdentifierDeclType	int		3508248	0					
ANR	3508847	Identifier	stime		3508248	1					
ANR	3508848	AssignmentExpression	stime = 1 + ( random ( ) % ( leases . size ( ) ? 60 : 5 ) )		3508248	2		=			
ANR	3508849	Identifier	stime		3508248	0					
ANR	3508850	AdditiveExpression	1 + ( random ( ) % ( leases . size ( ) ? 60 : 5 ) )		3508248	1		+			
ANR	3508851	PrimaryExpression	1		3508248	0					
ANR	3508852	MultiplicativeExpression	random ( ) % ( leases . size ( ) ? 60 : 5 )		3508248	1		%			
ANR	3508853	CallExpression	random ( )		3508248	0					
ANR	3508854	Callee	random		3508248	0					
ANR	3508855	Identifier	random		3508248	0					
ANR	3508856	ArgumentList			3508248	1					
ANR	3508857	ConditionalExpression	leases . size ( ) ? 60 : 5		3508248	1					
ANR	3508858	Condition	leases . size ( )		3508248	0					
ANR	3508859	CallExpression	leases . size ( )		3508248	0					
ANR	3508860	Callee	leases . size		3508248	0					
ANR	3508861	MemberAccess	leases . size		3508248	0					
ANR	3508862	Identifier	leases		3508248	0					
ANR	3508863	Identifier	size		3508248	1					
ANR	3508864	ArgumentList			3508248	1					
ANR	3508865	PrimaryExpression	60		3508248	1					
ANR	3508866	PrimaryExpression	5		3508248	2					
ANR	3508867	ExpressionStatement	"printf ( ""Sleeping for %ds...\\n"" , stime )"	223:2:5701:5741	3508248	1	True				
ANR	3508868	CallExpression	"printf ( ""Sleeping for %ds...\\n"" , stime )"		3508248	0					
ANR	3508869	Callee	printf		3508248	0					
ANR	3508870	Identifier	printf		3508248	0					
ANR	3508871	ArgumentList	"""Sleeping for %ds...\\n"""		3508248	1					
ANR	3508872	Argument	"""Sleeping for %ds...\\n"""		3508248	0					
ANR	3508873	PrimaryExpression	"""Sleeping for %ds...\\n"""		3508248	0					
ANR	3508874	Argument	stime		3508248	1					
ANR	3508875	Identifier	stime		3508248	0					
ANR	3508876	IfStatement	if ( sleep ( stime ) || stop )		3508248	2					
ANR	3508877	Condition	sleep ( stime ) || stop	224:7:5750:5771	3508248	0	True				
ANR	3508878	OrExpression	sleep ( stime ) || stop		3508248	0		||			
ANR	3508879	CallExpression	sleep ( stime )		3508248	0					
ANR	3508880	Callee	sleep		3508248	0					
ANR	3508881	Identifier	sleep		3508248	0					
ANR	3508882	ArgumentList	stime		3508248	1					
ANR	3508883	Argument	stime		3508248	0					
ANR	3508884	Identifier	stime		3508248	0					
ANR	3508885	Identifier	stop		3508248	1					
ANR	3508886	CompoundStatement		102:32:2617:2617	3508248	1					
ANR	3508887	BreakStatement	break ;	225:3:5780:5785	3508248	0	True				
ANR	3508888	ExpressionStatement	now = time ( NULL )	227:2:5793:5811	3508248	3	True				
ANR	3508889	AssignmentExpression	now = time ( NULL )		3508248	0		=			
ANR	3508890	Identifier	now		3508248	0					
ANR	3508891	CallExpression	time ( NULL )		3508248	1					
ANR	3508892	Callee	time		3508248	0					
ANR	3508893	Identifier	time		3508248	0					
ANR	3508894	ArgumentList	NULL		3508248	1					
ANR	3508895	Argument	NULL		3508248	0					
ANR	3508896	Identifier	NULL		3508248	0					
ANR	3508897	IdentifierDeclStatement	list < DCLeaseManagerLease * > renew_list ;	230:2:5888:5926	3508248	4	True				
ANR	3508898	IdentifierDecl	renew_list		3508248	0					
ANR	3508899	IdentifierDeclType	list < DCLeaseManagerLease * >		3508248	0					
ANR	3508900	Identifier	renew_list		3508248	1					
ANR	3508901	IdentifierDeclStatement	list < DCLeaseManagerLease * > release_list ;	231:2:5930:5970	3508248	5	True				
ANR	3508902	IdentifierDecl	release_list		3508248	0					
ANR	3508903	IdentifierDeclType	list < DCLeaseManagerLease * >		3508248	0					
ANR	3508904	Identifier	release_list		3508248	1					
ANR	3508905	ForStatement	for ( list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ; iter != leases . end ( ) ; iter ++ )		3508248	6					
ANR	3508906	ForInit	list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;	232:7:5979:6040	3508248	0	True				
ANR	3508907	IdentifierDeclStatement	list < DCLeaseManagerLease * > :: iterator iter = leases . begin ( ) ;		3508248	0					
ANR	3508908	IdentifierDecl	iter = leases . begin ( )		3508248	0					
ANR	3508909	IdentifierDeclType	list < DCLeaseManagerLease * > :: iterator		3508248	0					
ANR	3508910	Identifier	iter		3508248	1					
ANR	3508911	AssignmentExpression	iter = leases . begin ( )		3508248	2		=			
ANR	3508912	Identifier	iter		3508248	0					
ANR	3508913	CallExpression	leases . begin ( )		3508248	1					
ANR	3508914	Callee	leases . begin		3508248	0					
ANR	3508915	MemberAccess	leases . begin		3508248	0					
ANR	3508916	Identifier	leases		3508248	0					
ANR	3508917	Identifier	begin		3508248	1					
ANR	3508918	ArgumentList			3508248	1					
ANR	3508919	Condition	iter != leases . end ( )	233:4:6046:6066	3508248	1	True				
ANR	3508920	EqualityExpression	iter != leases . end ( )		3508248	0		!=			
ANR	3508921	Identifier	iter		3508248	0					
ANR	3508922	CallExpression	leases . end ( )		3508248	1					
ANR	3508923	Callee	leases . end		3508248	0					
ANR	3508924	MemberAccess	leases . end		3508248	0					
ANR	3508925	Identifier	leases		3508248	0					
ANR	3508926	Identifier	end		3508248	1					
ANR	3508927	ArgumentList			3508248	1					
ANR	3508928	PostIncDecOperationExpression	iter ++	234:4:6073:6078	3508248	2	True				
ANR	3508929	Identifier	iter		3508248	0					
ANR	3508930	IncDec	++		3508248	1					
ANR	3508931	CompoundStatement		113:3:2929:2963	3508248	3					
ANR	3508932	IdentifierDeclStatement	DCLeaseManagerLease * lease = * iter ;	235:3:6087:6121	3508248	0	True				
ANR	3508933	IdentifierDecl	* lease = * iter		3508248	0					
ANR	3508934	IdentifierDeclType	DCLeaseManagerLease *		3508248	0					
ANR	3508935	Identifier	lease		3508248	1					
ANR	3508936	AssignmentExpression	* lease = * iter		3508248	2		=			
ANR	3508937	Identifier	lease		3508248	0					
ANR	3508938	UnaryOperationExpression	* iter		3508248	1					
ANR	3508939	UnaryOperator	*		3508248	0					
ANR	3508940	Identifier	iter		3508248	1					
ANR	3508941	IfStatement	if ( lease -> releaseLeaseWhenDone ( ) )		3508248	1					
ANR	3508942	Condition	lease -> releaseLeaseWhenDone ( )	236:8:6131:6159	3508248	0	True				
ANR	3508943	CallExpression	lease -> releaseLeaseWhenDone ( )		3508248	0					
ANR	3508944	Callee	lease -> releaseLeaseWhenDone		3508248	0					
ANR	3508945	PtrMemberAccess	lease -> releaseLeaseWhenDone		3508248	0					
ANR	3508946	Identifier	lease		3508248	0					
ANR	3508947	Identifier	releaseLeaseWhenDone		3508248	1					
ANR	3508948	ArgumentList			3508248	1					
ANR	3508949	CompoundStatement		114:40:3005:3005	3508248	1					
ANR	3508950	ExpressionStatement	release_list . push_back ( lease )	237:4:6169:6200	3508248	0	True				
ANR	3508951	CallExpression	release_list . push_back ( lease )		3508248	0					
ANR	3508952	Callee	release_list . push_back		3508248	0					
ANR	3508953	MemberAccess	release_list . push_back		3508248	0					
ANR	3508954	Identifier	release_list		3508248	0					
ANR	3508955	Identifier	push_back		3508248	1					
ANR	3508956	ArgumentList	lease		3508248	1					
ANR	3508957	Argument	lease		3508248	0					
ANR	3508958	Identifier	lease		3508248	0					
ANR	3508959	ElseStatement	else		3508248	0					
ANR	3508960	IfStatement	if ( lease -> secondsRemaining ( now ) < 60 )		3508248	0					
ANR	3508961	Condition	lease -> secondsRemaining ( now ) < 60	238:15:6217:6251	3508248	0	True				
ANR	3508962	RelationalExpression	lease -> secondsRemaining ( now ) < 60		3508248	0		<			
ANR	3508963	CallExpression	lease -> secondsRemaining ( now )		3508248	0					
ANR	3508964	Callee	lease -> secondsRemaining		3508248	0					
ANR	3508965	PtrMemberAccess	lease -> secondsRemaining		3508248	0					
ANR	3508966	Identifier	lease		3508248	0					
ANR	3508967	Identifier	secondsRemaining		3508248	1					
ANR	3508968	ArgumentList	now		3508248	1					
ANR	3508969	Argument	now		3508248	0					
ANR	3508970	Identifier	now		3508248	0					
ANR	3508971	PrimaryExpression	60		3508248	1					
ANR	3508972	CompoundStatement		116:53:3097:3097	3508248	1					
ANR	3508973	IfStatement	if ( random ( ) % 5 )		3508248	0					
ANR	3508974	Condition	random ( ) % 5	239:9:6266:6277	3508248	0	True				
ANR	3508975	MultiplicativeExpression	random ( ) % 5		3508248	0		%			
ANR	3508976	CallExpression	random ( )		3508248	0					
ANR	3508977	Callee	random		3508248	0					
ANR	3508978	Identifier	random		3508248	0					
ANR	3508979	ArgumentList			3508248	1					
ANR	3508980	PrimaryExpression	5		3508248	1					
ANR	3508981	CompoundStatement		117:24:3123:3123	3508248	1					
ANR	3508982	ExpressionStatement	renew_list . push_back ( lease )	240:5:6288:6317	3508248	0	True				
ANR	3508983	CallExpression	renew_list . push_back ( lease )		3508248	0					
ANR	3508984	Callee	renew_list . push_back		3508248	0					
ANR	3508985	MemberAccess	renew_list . push_back		3508248	0					
ANR	3508986	Identifier	renew_list		3508248	0					
ANR	3508987	Identifier	push_back		3508248	1					
ANR	3508988	ArgumentList	lease		3508248	1					
ANR	3508989	Argument	lease		3508248	0					
ANR	3508990	Identifier	lease		3508248	0					
ANR	3508991	ElseStatement	else		3508248	0					
ANR	3508992	CompoundStatement		119:11:3172:3172	3508248	0					
ANR	3508993	ExpressionStatement	release_list . push_back ( lease )	242:5:6337:6368	3508248	0	True				
ANR	3508994	CallExpression	release_list . push_back ( lease )		3508248	0					
ANR	3508995	Callee	release_list . push_back		3508248	0					
ANR	3508996	MemberAccess	release_list . push_back		3508248	0					
ANR	3508997	Identifier	release_list		3508248	0					
ANR	3508998	Identifier	push_back		3508248	1					
ANR	3508999	ArgumentList	lease		3508248	1					
ANR	3509000	Argument	lease		3508248	0					
ANR	3509001	Identifier	lease		3508248	0					
ANR	3509002	IfStatement	if ( release_list . size ( ) )		3508248	7					
ANR	3509003	Condition	release_list . size ( )	248:7:6410:6428	3508248	0	True				
ANR	3509004	CallExpression	release_list . size ( )		3508248	0					
ANR	3509005	Callee	release_list . size		3508248	0					
ANR	3509006	MemberAccess	release_list . size		3508248	0					
ANR	3509007	Identifier	release_list		3508248	0					
ANR	3509008	Identifier	size		3508248	1					
ANR	3509009	ArgumentList			3508248	1					
ANR	3509010	CompoundStatement		128:3:3339:3358	3508248	1					
ANR	3509011	ExpressionStatement	"printf ( ""Releasing %ld leases\\n"" , release_list . size ( ) )"	249:3:6437:6492	3508248	0	True				
ANR	3509012	CallExpression	"printf ( ""Releasing %ld leases\\n"" , release_list . size ( ) )"		3508248	0					
ANR	3509013	Callee	printf		3508248	0					
ANR	3509014	Identifier	printf		3508248	0					
ANR	3509015	ArgumentList	"""Releasing %ld leases\\n"""		3508248	1					
ANR	3509016	Argument	"""Releasing %ld leases\\n"""		3508248	0					
ANR	3509017	PrimaryExpression	"""Releasing %ld leases\\n"""		3508248	0					
ANR	3509018	Argument	release_list . size ( )		3508248	1					
ANR	3509019	CallExpression	release_list . size ( )		3508248	0					
ANR	3509020	Callee	release_list . size		3508248	0					
ANR	3509021	MemberAccess	release_list . size		3508248	0					
ANR	3509022	Identifier	release_list		3508248	0					
ANR	3509023	Identifier	size		3508248	1					
ANR	3509024	ArgumentList			3508248	1					
ANR	3509025	IdentifierDeclStatement	double t1 = dtime ( ) ;	250:3:6497:6516	3508248	1	True				
ANR	3509026	IdentifierDecl	t1 = dtime ( )		3508248	0					
ANR	3509027	IdentifierDeclType	double		3508248	0					
ANR	3509028	Identifier	t1		3508248	1					
ANR	3509029	AssignmentExpression	t1 = dtime ( )		3508248	2		=			
ANR	3509030	Identifier	t1		3508248	0					
ANR	3509031	CallExpression	dtime ( )		3508248	1					
ANR	3509032	Callee	dtime		3508248	0					
ANR	3509033	Identifier	dtime		3508248	0					
ANR	3509034	ArgumentList			3508248	1					
ANR	3509035	IfStatement	if ( ! lm -> releaseLeases ( release_list ) )		3508248	2					
ANR	3509036	Condition	! lm -> releaseLeases ( release_list )	251:8:6526:6559	3508248	0	True				
ANR	3509037	UnaryOperationExpression	! lm -> releaseLeases ( release_list )		3508248	0					
ANR	3509038	UnaryOperator	!		3508248	0					
ANR	3509039	CallExpression	lm -> releaseLeases ( release_list )		3508248	1					
ANR	3509040	Callee	lm -> releaseLeases		3508248	0					
ANR	3509041	PtrMemberAccess	lm -> releaseLeases		3508248	0					
ANR	3509042	Identifier	lm		3508248	0					
ANR	3509043	Identifier	releaseLeases		3508248	1					
ANR	3509044	ArgumentList	release_list		3508248	1					
ANR	3509045	Argument	release_list		3508248	0					
ANR	3509046	Identifier	release_list		3508248	0					
ANR	3509047	CompoundStatement		129:45:3405:3405	3508248	1					
ANR	3509048	ExpressionStatement	"printf ( ""Release failed!!!\\n"" )"	252:4:6569:6600	3508248	0	True				
ANR	3509049	CallExpression	"printf ( ""Release failed!!!\\n"" )"		3508248	0					
ANR	3509050	Callee	printf		3508248	0					
ANR	3509051	Identifier	printf		3508248	0					
ANR	3509052	ArgumentList	"""Release failed!!!\\n"""		3508248	1					
ANR	3509053	Argument	"""Release failed!!!\\n"""		3508248	0					
ANR	3509054	PrimaryExpression	"""Release failed!!!\\n"""		3508248	0					
ANR	3509055	ElseStatement	else		3508248	0					
ANR	3509056	CompoundStatement		131:10:3454:3454	3508248	0					
ANR	3509057	ExpressionStatement	"dump ( ""release"" , release_list . size ( ) , t1 )"	254:4:6618:6660	3508248	0	True				
ANR	3509058	CallExpression	"dump ( ""release"" , release_list . size ( ) , t1 )"		3508248	0					
ANR	3509059	Callee	dump		3508248	0					
ANR	3509060	Identifier	dump		3508248	0					
ANR	3509061	ArgumentList	"""release"""		3508248	1					
ANR	3509062	Argument	"""release"""		3508248	0					
ANR	3509063	PrimaryExpression	"""release"""		3508248	0					
ANR	3509064	Argument	release_list . size ( )		3508248	1					
ANR	3509065	CallExpression	release_list . size ( )		3508248	0					
ANR	3509066	Callee	release_list . size		3508248	0					
ANR	3509067	MemberAccess	release_list . size		3508248	0					
ANR	3509068	Identifier	release_list		3508248	0					
ANR	3509069	Identifier	size		3508248	1					
ANR	3509070	ArgumentList			3508248	1					
ANR	3509071	Argument	t1		3508248	2					
ANR	3509072	Identifier	t1		3508248	0					
ANR	3509073	ExpressionStatement	"DCLeaseManagerLease_removeLeases ( leases , DCLeaseManagerLease_getConstList ( release_list ) )"	256:3:6670:6769	3508248	3	True				
ANR	3509074	CallExpression	"DCLeaseManagerLease_removeLeases ( leases , DCLeaseManagerLease_getConstList ( release_list ) )"		3508248	0					
ANR	3509075	Callee	DCLeaseManagerLease_removeLeases		3508248	0					
ANR	3509076	Identifier	DCLeaseManagerLease_removeLeases		3508248	0					
ANR	3509077	ArgumentList	leases		3508248	1					
ANR	3509078	Argument	leases		3508248	0					
ANR	3509079	Identifier	leases		3508248	0					
ANR	3509080	Argument	DCLeaseManagerLease_getConstList ( release_list )		3508248	1					
ANR	3509081	CallExpression	DCLeaseManagerLease_getConstList ( release_list )		3508248	0					
ANR	3509082	Callee	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509083	Identifier	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509084	ArgumentList	release_list		3508248	1					
ANR	3509085	Argument	release_list		3508248	0					
ANR	3509086	Identifier	release_list		3508248	0					
ANR	3509087	IfStatement	if ( renew_list . size ( ) )		3508248	8					
ANR	3509088	Condition	renew_list . size ( )	262:7:6801:6817	3508248	0	True				
ANR	3509089	CallExpression	renew_list . size ( )		3508248	0					
ANR	3509090	Callee	renew_list . size		3508248	0					
ANR	3509091	MemberAccess	renew_list . size		3508248	0					
ANR	3509092	Identifier	renew_list		3508248	0					
ANR	3509093	Identifier	size		3508248	1					
ANR	3509094	ArgumentList			3508248	1					
ANR	3509095	CompoundStatement		149:3:3967:3986	3508248	1					
ANR	3509096	ExpressionStatement	"printf ( ""Renew %ld leases\\n"" , renew_list . size ( ) )"	263:3:6826:6875	3508248	0	True				
ANR	3509097	CallExpression	"printf ( ""Renew %ld leases\\n"" , renew_list . size ( ) )"		3508248	0					
ANR	3509098	Callee	printf		3508248	0					
ANR	3509099	Identifier	printf		3508248	0					
ANR	3509100	ArgumentList	"""Renew %ld leases\\n"""		3508248	1					
ANR	3509101	Argument	"""Renew %ld leases\\n"""		3508248	0					
ANR	3509102	PrimaryExpression	"""Renew %ld leases\\n"""		3508248	0					
ANR	3509103	Argument	renew_list . size ( )		3508248	1					
ANR	3509104	CallExpression	renew_list . size ( )		3508248	0					
ANR	3509105	Callee	renew_list . size		3508248	0					
ANR	3509106	MemberAccess	renew_list . size		3508248	0					
ANR	3509107	Identifier	renew_list		3508248	0					
ANR	3509108	Identifier	size		3508248	1					
ANR	3509109	ArgumentList			3508248	1					
ANR	3509110	IdentifierDeclStatement	list < DCLeaseManagerLease * > renewed_list ;	264:3:6880:6920	3508248	1	True				
ANR	3509111	IdentifierDecl	renewed_list		3508248	0					
ANR	3509112	IdentifierDeclType	list < DCLeaseManagerLease * >		3508248	0					
ANR	3509113	Identifier	renewed_list		3508248	1					
ANR	3509114	ExpressionStatement	"DCLeaseManagerLease_markLeases ( leases , true )"	267:3:6993:7039	3508248	2	True				
ANR	3509115	CallExpression	"DCLeaseManagerLease_markLeases ( leases , true )"		3508248	0					
ANR	3509116	Callee	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509117	Identifier	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509118	ArgumentList	leases		3508248	1					
ANR	3509119	Argument	leases		3508248	0					
ANR	3509120	Identifier	leases		3508248	0					
ANR	3509121	Argument	true		3508248	1					
ANR	3509122	Identifier	true		3508248	0					
ANR	3509123	ExpressionStatement	"DCLeaseManagerLease_markLeases ( renew_list , false )"	268:3:7044:7095	3508248	3	True				
ANR	3509124	CallExpression	"DCLeaseManagerLease_markLeases ( renew_list , false )"		3508248	0					
ANR	3509125	Callee	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509126	Identifier	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509127	ArgumentList	renew_list		3508248	1					
ANR	3509128	Argument	renew_list		3508248	0					
ANR	3509129	Identifier	renew_list		3508248	0					
ANR	3509130	Argument	false		3508248	1					
ANR	3509131	Identifier	false		3508248	0					
ANR	3509132	IdentifierDeclStatement	double t1 = dtime ( ) ;	271:3:7125:7144	3508248	4	True				
ANR	3509133	IdentifierDecl	t1 = dtime ( )		3508248	0					
ANR	3509134	IdentifierDeclType	double		3508248	0					
ANR	3509135	Identifier	t1		3508248	1					
ANR	3509136	AssignmentExpression	t1 = dtime ( )		3508248	2		=			
ANR	3509137	Identifier	t1		3508248	0					
ANR	3509138	CallExpression	dtime ( )		3508248	1					
ANR	3509139	Callee	dtime		3508248	0					
ANR	3509140	Identifier	dtime		3508248	0					
ANR	3509141	ArgumentList			3508248	1					
ANR	3509142	IfStatement	"if ( ! lm -> renewLeases ( DCLeaseManagerLease_getConstList ( renew_list ) , renewed_list ) )"		3508248	5					
ANR	3509143	Condition	"! lm -> renewLeases ( DCLeaseManagerLease_getConstList ( renew_list ) , renewed_list )"	272:8:7154:7240	3508248	0	True				
ANR	3509144	UnaryOperationExpression	"! lm -> renewLeases ( DCLeaseManagerLease_getConstList ( renew_list ) , renewed_list )"		3508248	0					
ANR	3509145	UnaryOperator	!		3508248	0					
ANR	3509146	CallExpression	"lm -> renewLeases ( DCLeaseManagerLease_getConstList ( renew_list ) , renewed_list )"		3508248	1					
ANR	3509147	Callee	lm -> renewLeases		3508248	0					
ANR	3509148	PtrMemberAccess	lm -> renewLeases		3508248	0					
ANR	3509149	Identifier	lm		3508248	0					
ANR	3509150	Identifier	renewLeases		3508248	1					
ANR	3509151	ArgumentList	DCLeaseManagerLease_getConstList ( renew_list )		3508248	1					
ANR	3509152	Argument	DCLeaseManagerLease_getConstList ( renew_list )		3508248	0					
ANR	3509153	CallExpression	DCLeaseManagerLease_getConstList ( renew_list )		3508248	0					
ANR	3509154	Callee	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509155	Identifier	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509156	ArgumentList	renew_list		3508248	1					
ANR	3509157	Argument	renew_list		3508248	0					
ANR	3509158	Identifier	renew_list		3508248	0					
ANR	3509159	Argument	renewed_list		3508248	1					
ANR	3509160	Identifier	renewed_list		3508248	0					
ANR	3509161	CompoundStatement		151:27:4086:4086	3508248	1					
ANR	3509162	ExpressionStatement	"printf ( ""Renew failed!!!\\n"" )"	274:4:7250:7279	3508248	0	True				
ANR	3509163	CallExpression	"printf ( ""Renew failed!!!\\n"" )"		3508248	0					
ANR	3509164	Callee	printf		3508248	0					
ANR	3509165	Identifier	printf		3508248	0					
ANR	3509166	ArgumentList	"""Renew failed!!!\\n"""		3508248	1					
ANR	3509167	Argument	"""Renew failed!!!\\n"""		3508248	0					
ANR	3509168	PrimaryExpression	"""Renew failed!!!\\n"""		3508248	0					
ANR	3509169	ElseStatement	else		3508248	0					
ANR	3509170	CompoundStatement		166:4:4528:4651	3508248	0					
ANR	3509171	ExpressionStatement	"dump ( ""renew"" , renew_list . size ( ) , t1 )"	276:4:7297:7335	3508248	0	True				
ANR	3509172	CallExpression	"dump ( ""renew"" , renew_list . size ( ) , t1 )"		3508248	0					
ANR	3509173	Callee	dump		3508248	0					
ANR	3509174	Identifier	dump		3508248	0					
ANR	3509175	ArgumentList	"""renew"""		3508248	1					
ANR	3509176	Argument	"""renew"""		3508248	0					
ANR	3509177	PrimaryExpression	"""renew"""		3508248	0					
ANR	3509178	Argument	renew_list . size ( )		3508248	1					
ANR	3509179	CallExpression	renew_list . size ( )		3508248	0					
ANR	3509180	Callee	renew_list . size		3508248	0					
ANR	3509181	MemberAccess	renew_list . size		3508248	0					
ANR	3509182	Identifier	renew_list		3508248	0					
ANR	3509183	Identifier	size		3508248	1					
ANR	3509184	ArgumentList			3508248	1					
ANR	3509185	Argument	t1		3508248	2					
ANR	3509186	Identifier	t1		3508248	0					
ANR	3509187	ExpressionStatement	"DCLeaseManagerLease_markLeases ( renewed_list , true )"	279:4:7380:7432	3508248	1	True				
ANR	3509188	CallExpression	"DCLeaseManagerLease_markLeases ( renewed_list , true )"		3508248	0					
ANR	3509189	Callee	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509190	Identifier	DCLeaseManagerLease_markLeases		3508248	0					
ANR	3509191	ArgumentList	renewed_list		3508248	1					
ANR	3509192	Argument	renewed_list		3508248	0					
ANR	3509193	Identifier	renewed_list		3508248	0					
ANR	3509194	Argument	true		3508248	1					
ANR	3509195	Identifier	true		3508248	0					
ANR	3509196	ExpressionStatement	"DCLeaseManagerLease_updateLeases ( leases , DCLeaseManagerLease_getConstList ( renewed_list ) )"	282:4:7472:7572	3508248	2	True				
ANR	3509197	CallExpression	"DCLeaseManagerLease_updateLeases ( leases , DCLeaseManagerLease_getConstList ( renewed_list ) )"		3508248	0					
ANR	3509198	Callee	DCLeaseManagerLease_updateLeases		3508248	0					
ANR	3509199	Identifier	DCLeaseManagerLease_updateLeases		3508248	0					
ANR	3509200	ArgumentList	leases		3508248	1					
ANR	3509201	Argument	leases		3508248	0					
ANR	3509202	Identifier	leases		3508248	0					
ANR	3509203	Argument	DCLeaseManagerLease_getConstList ( renewed_list )		3508248	1					
ANR	3509204	CallExpression	DCLeaseManagerLease_getConstList ( renewed_list )		3508248	0					
ANR	3509205	Callee	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509206	Identifier	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509207	ArgumentList	renewed_list		3508248	1					
ANR	3509208	Argument	renewed_list		3508248	0					
ANR	3509209	Identifier	renewed_list		3508248	0					
ANR	3509210	IdentifierDeclStatement	list < const DCLeaseManagerLease * > remove_list ;	287:4:7635:7680	3508248	3	True				
ANR	3509211	IdentifierDecl	remove_list		3508248	0					
ANR	3509212	IdentifierDeclType	list < const DCLeaseManagerLease * >		3508248	0					
ANR	3509213	Identifier	remove_list		3508248	1					
ANR	3509214	IdentifierDeclStatement	"int count = DCLeaseManagerLease_getMarkedLeases ( DCLeaseManagerLease_getConstList ( leases ) , false , remove_list ) ;"	288:4:7686:7809	3508248	4	True				
ANR	3509215	IdentifierDecl	"count = DCLeaseManagerLease_getMarkedLeases ( DCLeaseManagerLease_getConstList ( leases ) , false , remove_list )"		3508248	0					
ANR	3509216	IdentifierDeclType	int		3508248	0					
ANR	3509217	Identifier	count		3508248	1					
ANR	3509218	AssignmentExpression	"count = DCLeaseManagerLease_getMarkedLeases ( DCLeaseManagerLease_getConstList ( leases ) , false , remove_list )"		3508248	2		=			
ANR	3509219	Identifier	count		3508248	0					
ANR	3509220	CallExpression	"DCLeaseManagerLease_getMarkedLeases ( DCLeaseManagerLease_getConstList ( leases ) , false , remove_list )"		3508248	1					
ANR	3509221	Callee	DCLeaseManagerLease_getMarkedLeases		3508248	0					
ANR	3509222	Identifier	DCLeaseManagerLease_getMarkedLeases		3508248	0					
ANR	3509223	ArgumentList	DCLeaseManagerLease_getConstList ( leases )		3508248	1					
ANR	3509224	Argument	DCLeaseManagerLease_getConstList ( leases )		3508248	0					
ANR	3509225	CallExpression	DCLeaseManagerLease_getConstList ( leases )		3508248	0					
ANR	3509226	Callee	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509227	Identifier	DCLeaseManagerLease_getConstList		3508248	0					
ANR	3509228	ArgumentList	leases		3508248	1					
ANR	3509229	Argument	leases		3508248	0					
ANR	3509230	Identifier	leases		3508248	0					
ANR	3509231	Argument	false		3508248	1					
ANR	3509232	Identifier	false		3508248	0					
ANR	3509233	Argument	remove_list		3508248	2					
ANR	3509234	Identifier	remove_list		3508248	0					
ANR	3509235	IfStatement	if ( count )		3508248	5					
ANR	3509236	Condition	count	291:9:7820:7824	3508248	0	True				
ANR	3509237	Identifier	count		3508248	0					
ANR	3509238	CompoundStatement		169:17:4670:4670	3508248	1					
ANR	3509239	ExpressionStatement	"show_leases ( ""non-renewed"" , remove_list )"	292:5:7835:7876	3508248	0	True				
ANR	3509240	CallExpression	"show_leases ( ""non-renewed"" , remove_list )"		3508248	0					
ANR	3509241	Callee	show_leases		3508248	0					
ANR	3509242	Identifier	show_leases		3508248	0					
ANR	3509243	ArgumentList	"""non-renewed"""		3508248	1					
ANR	3509244	Argument	"""non-renewed"""		3508248	0					
ANR	3509245	PrimaryExpression	"""non-renewed"""		3508248	0					
ANR	3509246	Argument	remove_list		3508248	1					
ANR	3509247	Identifier	remove_list		3508248	0					
ANR	3509248	ExpressionStatement	"printf ( ""Removing the %d marked leases\\n"" , count )"	293:5:7883:7933	3508248	1	True				
ANR	3509249	CallExpression	"printf ( ""Removing the %d marked leases\\n"" , count )"		3508248	0					
ANR	3509250	Callee	printf		3508248	0					
ANR	3509251	Identifier	printf		3508248	0					
ANR	3509252	ArgumentList	"""Removing the %d marked leases\\n"""		3508248	1					
ANR	3509253	Argument	"""Removing the %d marked leases\\n"""		3508248	0					
ANR	3509254	PrimaryExpression	"""Removing the %d marked leases\\n"""		3508248	0					
ANR	3509255	Argument	count		3508248	1					
ANR	3509256	Identifier	count		3508248	0					
ANR	3509257	ExpressionStatement	"DCLeaseManagerLease_removeLeases ( leases , remove_list )"	294:5:7940:7995	3508248	2	True				
ANR	3509258	CallExpression	"DCLeaseManagerLease_removeLeases ( leases , remove_list )"		3508248	0					
ANR	3509259	Callee	DCLeaseManagerLease_removeLeases		3508248	0					
ANR	3509260	Identifier	DCLeaseManagerLease_removeLeases		3508248	0					
ANR	3509261	ArgumentList	leases		3508248	1					
ANR	3509262	Argument	leases		3508248	0					
ANR	3509263	Identifier	leases		3508248	0					
ANR	3509264	Argument	remove_list		3508248	1					
ANR	3509265	Identifier	remove_list		3508248	0					
ANR	3509266	ExpressionStatement	DCLeaseManagerLease_freeList ( renewed_list )	299:3:8064:8108	3508248	6	True				
ANR	3509267	CallExpression	DCLeaseManagerLease_freeList ( renewed_list )		3508248	0					
ANR	3509268	Callee	DCLeaseManagerLease_freeList		3508248	0					
ANR	3509269	Identifier	DCLeaseManagerLease_freeList		3508248	0					
ANR	3509270	ArgumentList	renewed_list		3508248	1					
ANR	3509271	Argument	renewed_list		3508248	0					
ANR	3509272	Identifier	renewed_list		3508248	0					
ANR	3509273	IfStatement	if ( leases . size ( ) < max_leases )		3508248	9					
ANR	3509274	Condition	leases . size ( ) < max_leases	303:7:8143:8168	3508248	0	True				
ANR	3509275	RelationalExpression	leases . size ( ) < max_leases		3508248	0		<			
ANR	3509276	CallExpression	leases . size ( )		3508248	0					
ANR	3509277	Callee	leases . size		3508248	0					
ANR	3509278	MemberAccess	leases . size		3508248	0					
ANR	3509279	Identifier	leases		3508248	0					
ANR	3509280	Identifier	size		3508248	1					
ANR	3509281	ArgumentList			3508248	1					
ANR	3509282	Identifier	max_leases		3508248	1					
ANR	3509283	CompoundStatement		191:3:5268:5287	3508248	1					
ANR	3509284	IdentifierDeclStatement	int num = max_leases - leases . size ( ) ;	304:3:8177:8214	3508248	0	True				
ANR	3509285	IdentifierDecl	num = max_leases - leases . size ( )		3508248	0					
ANR	3509286	IdentifierDeclType	int		3508248	0					
ANR	3509287	Identifier	num		3508248	1					
ANR	3509288	AssignmentExpression	num = max_leases - leases . size ( )		3508248	2		=			
ANR	3509289	Identifier	num		3508248	0					
ANR	3509290	AdditiveExpression	max_leases - leases . size ( )		3508248	1		-			
ANR	3509291	Identifier	max_leases		3508248	0					
ANR	3509292	CallExpression	leases . size ( )		3508248	1					
ANR	3509293	Callee	leases . size		3508248	0					
ANR	3509294	MemberAccess	leases . size		3508248	0					
ANR	3509295	Identifier	leases		3508248	0					
ANR	3509296	Identifier	size		3508248	1					
ANR	3509297	ArgumentList			3508248	1					
ANR	3509298	IfStatement	if ( num > lease_req_count )		3508248	1					
ANR	3509299	Condition	num > lease_req_count	305:8:8224:8244	3508248	0	True				
ANR	3509300	RelationalExpression	num > lease_req_count		3508248	0		>			
ANR	3509301	Identifier	num		3508248	0					
ANR	3509302	Identifier	lease_req_count		3508248	1					
ANR	3509303	CompoundStatement		183:32:5090:5090	3508248	1					
ANR	3509304	ExpressionStatement	num = lease_req_count	306:4:8254:8275	3508248	0	True				
ANR	3509305	AssignmentExpression	num = lease_req_count		3508248	0		=			
ANR	3509306	Identifier	num		3508248	0					
ANR	3509307	Identifier	lease_req_count		3508248	1					
ANR	3509308	ExpressionStatement	"printf ( ""Requesting %d leases\\n"" , num )"	308:3:8285:8324	3508248	2	True				
ANR	3509309	CallExpression	"printf ( ""Requesting %d leases\\n"" , num )"		3508248	0					
ANR	3509310	Callee	printf		3508248	0					
ANR	3509311	Identifier	printf		3508248	0					
ANR	3509312	ArgumentList	"""Requesting %d leases\\n"""		3508248	1					
ANR	3509313	Argument	"""Requesting %d leases\\n"""		3508248	0					
ANR	3509314	PrimaryExpression	"""Requesting %d leases\\n"""		3508248	0					
ANR	3509315	Argument	num		3508248	1					
ANR	3509316	Identifier	num		3508248	0					
ANR	3509317	ExpressionStatement	"ad . InsertAttr ( ""RequestCount"" , num )"	309:3:8329:8365	3508248	3	True				
ANR	3509318	CallExpression	"ad . InsertAttr ( ""RequestCount"" , num )"		3508248	0					
ANR	3509319	Callee	ad . InsertAttr		3508248	0					
ANR	3509320	MemberAccess	ad . InsertAttr		3508248	0					
ANR	3509321	Identifier	ad		3508248	0					
ANR	3509322	Identifier	InsertAttr		3508248	1					
ANR	3509323	ArgumentList	"""RequestCount"""		3508248	1					
ANR	3509324	Argument	"""RequestCount"""		3508248	0					
ANR	3509325	PrimaryExpression	"""RequestCount"""		3508248	0					
ANR	3509326	Argument	num		3508248	1					
ANR	3509327	Identifier	num		3508248	0					
ANR	3509328	IdentifierDeclStatement	int oldsize = leases . size ( ) ;	312:3:8393:8421	3508248	4	True				
ANR	3509329	IdentifierDecl	oldsize = leases . size ( )		3508248	0					
ANR	3509330	IdentifierDeclType	int		3508248	0					
ANR	3509331	Identifier	oldsize		3508248	1					
ANR	3509332	AssignmentExpression	oldsize = leases . size ( )		3508248	2		=			
ANR	3509333	Identifier	oldsize		3508248	0					
ANR	3509334	CallExpression	leases . size ( )		3508248	1					
ANR	3509335	Callee	leases . size		3508248	0					
ANR	3509336	MemberAccess	leases . size		3508248	0					
ANR	3509337	Identifier	leases		3508248	0					
ANR	3509338	Identifier	size		3508248	1					
ANR	3509339	ArgumentList			3508248	1					
ANR	3509340	IdentifierDeclStatement	double t1 = dtime ( ) ;	313:3:8426:8445	3508248	5	True				
ANR	3509341	IdentifierDecl	t1 = dtime ( )		3508248	0					
ANR	3509342	IdentifierDeclType	double		3508248	0					
ANR	3509343	Identifier	t1		3508248	1					
ANR	3509344	AssignmentExpression	t1 = dtime ( )		3508248	2		=			
ANR	3509345	Identifier	t1		3508248	0					
ANR	3509346	CallExpression	dtime ( )		3508248	1					
ANR	3509347	Callee	dtime		3508248	0					
ANR	3509348	Identifier	dtime		3508248	0					
ANR	3509349	ArgumentList			3508248	1					
ANR	3509350	IfStatement	"if ( ! lm -> getLeases ( ad , leases ) )"		3508248	6					
ANR	3509351	Condition	"! lm -> getLeases ( ad , leases )"	314:8:8455:8482	3508248	0	True				
ANR	3509352	UnaryOperationExpression	"! lm -> getLeases ( ad , leases )"		3508248	0					
ANR	3509353	UnaryOperator	!		3508248	0					
ANR	3509354	CallExpression	"lm -> getLeases ( ad , leases )"		3508248	1					
ANR	3509355	Callee	lm -> getLeases		3508248	0					
ANR	3509356	PtrMemberAccess	lm -> getLeases		3508248	0					
ANR	3509357	Identifier	lm		3508248	0					
ANR	3509358	Identifier	getLeases		3508248	1					
ANR	3509359	ArgumentList	ad		3508248	1					
ANR	3509360	Argument	ad		3508248	0					
ANR	3509361	Identifier	ad		3508248	0					
ANR	3509362	Argument	leases		3508248	1					
ANR	3509363	Identifier	leases		3508248	0					
ANR	3509364	CompoundStatement		192:39:5328:5328	3508248	1					
ANR	3509365	ExpressionStatement	"fprintf ( stderr , ""Error getting matches:\\n"" )"	315:4:8492:8537	3508248	0	True				
ANR	3509366	CallExpression	"fprintf ( stderr , ""Error getting matches:\\n"" )"		3508248	0					
ANR	3509367	Callee	fprintf		3508248	0					
ANR	3509368	Identifier	fprintf		3508248	0					
ANR	3509369	ArgumentList	stderr		3508248	1					
ANR	3509370	Argument	stderr		3508248	0					
ANR	3509371	Identifier	stderr		3508248	0					
ANR	3509372	Argument	"""Error getting matches:\\n"""		3508248	1					
ANR	3509373	PrimaryExpression	"""Error getting matches:\\n"""		3508248	0					
ANR	3509374	ExpressionStatement	lm -> display ( stderr )	316:4:8543:8564	3508248	1	True				
ANR	3509375	CallExpression	lm -> display ( stderr )		3508248	0					
ANR	3509376	Callee	lm -> display		3508248	0					
ANR	3509377	PtrMemberAccess	lm -> display		3508248	0					
ANR	3509378	Identifier	lm		3508248	0					
ANR	3509379	Identifier	display		3508248	1					
ANR	3509380	ArgumentList	stderr		3508248	1					
ANR	3509381	Argument	stderr		3508248	0					
ANR	3509382	Identifier	stderr		3508248	0					
ANR	3509383	ExpressionStatement	"dump ( ""request"" , leases . size ( ) - oldsize , t1 )"	318:3:8574:8620	3508248	7	True				
ANR	3509384	CallExpression	"dump ( ""request"" , leases . size ( ) - oldsize , t1 )"		3508248	0					
ANR	3509385	Callee	dump		3508248	0					
ANR	3509386	Identifier	dump		3508248	0					
ANR	3509387	ArgumentList	"""request"""		3508248	1					
ANR	3509388	Argument	"""request"""		3508248	0					
ANR	3509389	PrimaryExpression	"""request"""		3508248	0					
ANR	3509390	Argument	leases . size ( ) - oldsize		3508248	1					
ANR	3509391	AdditiveExpression	leases . size ( ) - oldsize		3508248	0		-			
ANR	3509392	CallExpression	leases . size ( )		3508248	0					
ANR	3509393	Callee	leases . size		3508248	0					
ANR	3509394	MemberAccess	leases . size		3508248	0					
ANR	3509395	Identifier	leases		3508248	0					
ANR	3509396	Identifier	size		3508248	1					
ANR	3509397	ArgumentList			3508248	1					
ANR	3509398	Identifier	oldsize		3508248	1					
ANR	3509399	Argument	t1		3508248	2					
ANR	3509400	Identifier	t1		3508248	0					
ANR	3509401	ExpressionStatement	"show_leases ( ""current"" , leases )"	320:2:8628:8660	3508248	10	True				
ANR	3509402	CallExpression	"show_leases ( ""current"" , leases )"		3508248	0					
ANR	3509403	Callee	show_leases		3508248	0					
ANR	3509404	Identifier	show_leases		3508248	0					
ANR	3509405	ArgumentList	"""current"""		3508248	1					
ANR	3509406	Argument	"""current"""		3508248	0					
ANR	3509407	PrimaryExpression	"""current"""		3508248	0					
ANR	3509408	Argument	leases		3508248	1					
ANR	3509409	Identifier	leases		3508248	0					
ANR	3509410	IfStatement	if ( leases . size ( ) )		3508248	38					
ANR	3509411	Condition	leases . size ( )	323:6:8672:8684	3508248	0	True				
ANR	3509412	CallExpression	leases . size ( )		3508248	0					
ANR	3509413	Callee	leases . size		3508248	0					
ANR	3509414	MemberAccess	leases . size		3508248	0					
ANR	3509415	Identifier	leases		3508248	0					
ANR	3509416	Identifier	size		3508248	1					
ANR	3509417	ArgumentList			3508248	1					
ANR	3509418	CompoundStatement		203:2:5568:5587	3508248	1					
ANR	3509419	ExpressionStatement	"printf ( ""Releasing leases\\n"" )"	324:2:8692:8722	3508248	0	True				
ANR	3509420	CallExpression	"printf ( ""Releasing leases\\n"" )"		3508248	0					
ANR	3509421	Callee	printf		3508248	0					
ANR	3509422	Identifier	printf		3508248	0					
ANR	3509423	ArgumentList	"""Releasing leases\\n"""		3508248	1					
ANR	3509424	Argument	"""Releasing leases\\n"""		3508248	0					
ANR	3509425	PrimaryExpression	"""Releasing leases\\n"""		3508248	0					
ANR	3509426	IdentifierDeclStatement	double t1 = dtime ( ) ;	325:2:8726:8745	3508248	1	True				
ANR	3509427	IdentifierDecl	t1 = dtime ( )		3508248	0					
ANR	3509428	IdentifierDeclType	double		3508248	0					
ANR	3509429	Identifier	t1		3508248	1					
ANR	3509430	AssignmentExpression	t1 = dtime ( )		3508248	2		=			
ANR	3509431	Identifier	t1		3508248	0					
ANR	3509432	CallExpression	dtime ( )		3508248	1					
ANR	3509433	Callee	dtime		3508248	0					
ANR	3509434	Identifier	dtime		3508248	0					
ANR	3509435	ArgumentList			3508248	1					
ANR	3509436	IfStatement	if ( ! lm -> releaseLeases ( leases ) )		3508248	2					
ANR	3509437	Condition	! lm -> releaseLeases ( leases )	326:7:8754:8781	3508248	0	True				
ANR	3509438	UnaryOperationExpression	! lm -> releaseLeases ( leases )		3508248	0					
ANR	3509439	UnaryOperator	!		3508248	0					
ANR	3509440	CallExpression	lm -> releaseLeases ( leases )		3508248	1					
ANR	3509441	Callee	lm -> releaseLeases		3508248	0					
ANR	3509442	PtrMemberAccess	lm -> releaseLeases		3508248	0					
ANR	3509443	Identifier	lm		3508248	0					
ANR	3509444	Identifier	releaseLeases		3508248	1					
ANR	3509445	ArgumentList	leases		3508248	1					
ANR	3509446	Argument	leases		3508248	0					
ANR	3509447	Identifier	leases		3508248	0					
ANR	3509448	CompoundStatement		204:38:5627:5627	3508248	1					
ANR	3509449	ExpressionStatement	"fprintf ( stderr , ""release failed\\n"" )"	327:3:8790:8827	3508248	0	True				
ANR	3509450	CallExpression	"fprintf ( stderr , ""release failed\\n"" )"		3508248	0					
ANR	3509451	Callee	fprintf		3508248	0					
ANR	3509452	Identifier	fprintf		3508248	0					
ANR	3509453	ArgumentList	stderr		3508248	1					
ANR	3509454	Argument	stderr		3508248	0					
ANR	3509455	Identifier	stderr		3508248	0					
ANR	3509456	Argument	"""release failed\\n"""		3508248	1					
ANR	3509457	PrimaryExpression	"""release failed\\n"""		3508248	0					
ANR	3509458	ExpressionStatement	"dump ( ""release"" , leases . size ( ) , t1 )"	329:2:8835:8871	3508248	3	True				
ANR	3509459	CallExpression	"dump ( ""release"" , leases . size ( ) , t1 )"		3508248	0					
ANR	3509460	Callee	dump		3508248	0					
ANR	3509461	Identifier	dump		3508248	0					
ANR	3509462	ArgumentList	"""release"""		3508248	1					
ANR	3509463	Argument	"""release"""		3508248	0					
ANR	3509464	PrimaryExpression	"""release"""		3508248	0					
ANR	3509465	Argument	leases . size ( )		3508248	1					
ANR	3509466	CallExpression	leases . size ( )		3508248	0					
ANR	3509467	Callee	leases . size		3508248	0					
ANR	3509468	MemberAccess	leases . size		3508248	0					
ANR	3509469	Identifier	leases		3508248	0					
ANR	3509470	Identifier	size		3508248	1					
ANR	3509471	ArgumentList			3508248	1					
ANR	3509472	Argument	t1		3508248	2					
ANR	3509473	Identifier	t1		3508248	0					
ANR	3509474	IdentifierDeclStatement	DCLeaseManagerLease a ;	333:1:8887:8908	3508248	39	True				
ANR	3509475	IdentifierDecl	a		3508248	0					
ANR	3509476	IdentifierDeclType	DCLeaseManagerLease		3508248	0					
ANR	3509477	Identifier	a		3508248	1					
ANR	3509478	ExpressionStatement	leases . push_back ( & a )	334:1:8911:8933	3508248	40	True				
ANR	3509479	CallExpression	leases . push_back ( & a )		3508248	0					
ANR	3509480	Callee	leases . push_back		3508248	0					
ANR	3509481	MemberAccess	leases . push_back		3508248	0					
ANR	3509482	Identifier	leases		3508248	0					
ANR	3509483	Identifier	push_back		3508248	1					
ANR	3509484	ArgumentList	& a		3508248	1					
ANR	3509485	Argument	& a		3508248	0					
ANR	3509486	UnaryOperationExpression	& a		3508248	0					
ANR	3509487	UnaryOperator	&		3508248	0					
ANR	3509488	Identifier	a		3508248	1					
ANR	3509489	ExpressionStatement	leases . remove ( & a )	335:1:8936:8955	3508248	41	True				
ANR	3509490	CallExpression	leases . remove ( & a )		3508248	0					
ANR	3509491	Callee	leases . remove		3508248	0					
ANR	3509492	MemberAccess	leases . remove		3508248	0					
ANR	3509493	Identifier	leases		3508248	0					
ANR	3509494	Identifier	remove		3508248	1					
ANR	3509495	ArgumentList	& a		3508248	1					
ANR	3509496	Argument	& a		3508248	0					
ANR	3509497	UnaryOperationExpression	& a		3508248	0					
ANR	3509498	UnaryOperator	&		3508248	0					
ANR	3509499	Identifier	a		3508248	1					
ANR	3509500	ReturnStatement	return 0 ;	337:1:8959:8967	3508248	42	True				
ANR	3509501	PrimaryExpression	0		3508248	0					
ANR	3509502	ReturnType	int		3508248	1					
ANR	3509503	Identifier	main		3508248	2					
ANR	3509504	ParameterList	"int argc , char * argv [ ]"		3508248	3					
ANR	3509505	Parameter	int argc	122:10:3132:3139	3508248	0	True				
ANR	3509506	ParameterType	int		3508248	0					
ANR	3509507	Identifier	argc		3508248	1					
ANR	3509508	Parameter	char * argv [ ]	122:20:3142:3153	3508248	1	True				
ANR	3509509	ParameterType	char * [ ]		3508248	0					
ANR	3509510	Identifier	argv		3508248	1					
ANR	3509511	CFGEntryNode	ENTRY		3508248		True				
ANR	3509512	CFGExitNode	EXIT		3508248		True				
ANR	3509513	Symbol	handler		3508248						
ANR	3509514	Symbol	lm		3508248						
ANR	3509515	Symbol	release_list		3508248						
ANR	3509516	Symbol	remove_list		3508248						
ANR	3509517	Symbol	dtime		3508248						
ANR	3509518	Symbol	num		3508248						
ANR	3509519	Symbol	* argv [ 7 ]		3508248						
ANR	3509520	Symbol	* argv		3508248						
ANR	3509521	Symbol	lease -> secondsRemaining		3508248						
ANR	3509522	Symbol	lm -> getLeases		3508248						
ANR	3509523	Symbol	* * argv		3508248						
ANR	3509524	Symbol	release_list . size		3508248						
ANR	3509525	Symbol	NULL		3508248						
ANR	3509526	Symbol	ad		3508248						
ANR	3509527	Symbol	DCLeaseManagerLease_getConstList		3508248						
ANR	3509528	Symbol	* lm		3508248						
ANR	3509529	Symbol	lm -> releaseLeases		3508248						
ANR	3509530	Symbol	count		3508248						
ANR	3509531	Symbol	runtime		3508248						
ANR	3509532	Symbol	iter		3508248						
ANR	3509533	Symbol	max_leases		3508248						
ANR	3509534	Symbol	stderr		3508248						
ANR	3509535	Symbol	renew_list . size		3508248						
ANR	3509536	Symbol	leases . size		3508248						
ANR	3509537	Symbol	parser		3508248						
ANR	3509538	Symbol	stop		3508248						
ANR	3509539	Symbol	SIGINT		3508248						
ANR	3509540	Symbol	sscanf		3508248						
ANR	3509541	Symbol	name		3508248						
ANR	3509542	Symbol	true		3508248						
ANR	3509543	Symbol	lease_req_count		3508248						
ANR	3509544	Symbol	adbuffer . c_str		3508248						
ANR	3509545	Symbol	t1		3508248						
ANR	3509546	Symbol	lease -> releaseLeaseWhenDone		3508248						
ANR	3509547	Symbol	adbuffer		3508248						
ANR	3509548	Symbol	DCLeaseManagerLease_getMarkedLeases		3508248						
ANR	3509549	Symbol	* argv [ 6 ]		3508248						
ANR	3509550	Symbol	leases . begin		3508248						
ANR	3509551	Symbol	stime		3508248						
ANR	3509552	Symbol	& ad		3508248						
ANR	3509553	Symbol	argv		3508248						
ANR	3509554	Symbol	duration		3508248						
ANR	3509555	Symbol	sleep		3508248						
ANR	3509556	Symbol	leases		3508248						
ANR	3509557	Symbol	random		3508248						
ANR	3509558	Symbol	* iter		3508248						
ANR	3509559	Symbol	perf_file		3508248						
ANR	3509560	Symbol	leases . end		3508248						
ANR	3509561	Symbol	now		3508248						
ANR	3509562	Symbol	renew_list		3508248						
ANR	3509563	Symbol	expr		3508248						
ANR	3509564	Symbol	SIGTERM		3508248						
ANR	3509565	Symbol	attr		3508248						
ANR	3509566	Symbol	value		3508248						
ANR	3509567	Symbol	argc		3508248						
ANR	3509568	Symbol	atoi		3508248						
ANR	3509569	Symbol	fopen		3508248						
ANR	3509570	Symbol	a		3508248						
ANR	3509571	Symbol	requirements		3508248						
ANR	3509572	Symbol	parser . ParseExpression		3508248						
ANR	3509573	Symbol	* lease		3508248						
ANR	3509574	Symbol	renewed_list		3508248						
ANR	3509575	Symbol	& a		3508248						
ANR	3509576	Symbol	false		3508248						
ANR	3509577	Symbol	perf_fp		3508248						
ANR	3509578	Symbol	i		3508248						
ANR	3509579	Symbol	endtime		3508248						
ANR	3509580	Symbol	* i		3508248						
ANR	3509581	Symbol	t		3508248						
ANR	3509582	Symbol	u		3508248						
ANR	3509583	Symbol	lm -> renewLeases		3508248						
ANR	3509584	Symbol	time		3508248						
ANR	3509585	Symbol	lease		3508248						
ANR	3509586	Symbol	oldsize		3508248						
