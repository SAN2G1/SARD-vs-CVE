command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1614963	File	data/converged/CVE-2011-4930_htcondor/hibernation_manager.cpp								
ANR	1614964	Function	HibernationManager :: HibernationManager	40:0:1445:1713							
ANR	1614965	FunctionDef	HibernationManager :: HibernationManager (HibernatorBase * hibernator)		1614964	0					
ANR	1614966	CompoundStatement		47:0:1699:1713	1614964	0					
ANR	1614967	ExpressionStatement	update ( )	48:1:1702:1711	1614964	0	True				
ANR	1614968	CallExpression	update ( )		1614964	0					
ANR	1614969	Callee	update		1614964	0					
ANR	1614970	Identifier	update		1614964	0					
ANR	1614971	ArgumentList			1614964	1					
ANR	1614972	Identifier	HibernationManager :: HibernationManager		1614964	1					
ANR	1614973	ParameterList	HibernatorBase * hibernator		1614964	2					
ANR	1614974	Parameter	HibernatorBase * hibernator	40:40:1485:1510	1614964	0	True				
ANR	1614975	ParameterType	HibernatorBase *		1614964	0					
ANR	1614976	Identifier	hibernator		1614964	1					
ANR	1614977	CFGEntryNode	ENTRY		1614964		True				
ANR	1614978	CFGExitNode	EXIT		1614964		True				
ANR	1614979	Symbol	hibernator		1614964						
ANR	1614980	Function	HibernationManager :: ~HibernationManager	51:0:1716:1906							
ANR	1614981	FunctionDef	HibernationManager :: ~HibernationManager ()		1614980	0					
ANR	1614982	CompoundStatement		52:0:1774:1906	1614980	0					
ANR	1614983	IfStatement	if ( m_hibernator )		1614980	0					
ANR	1614984	Condition	m_hibernator	53:6:1782:1793	1614980	0	True				
ANR	1614985	Identifier	m_hibernator		1614980	0					
ANR	1614986	CompoundStatement		2:21:22:22	1614980	1					
ANR	1614987	Statement	delete	54:2:1801:1806	1614980	0	True				
ANR	1614988	ExpressionStatement	m_hibernator	54:9:1808:1820	1614980	1	True				
ANR	1614989	Identifier	m_hibernator		1614980	0					
ANR	1614990	ForStatement	for ( int i = 0 ; i < m_adapters . getlast ( ) ; i ++ )		1614980	1					
ANR	1614991	ForInit	int i = 0 ;	56:7:1832:1841	1614980	0	True				
ANR	1614992	IdentifierDeclStatement	int i = 0 ;		1614980	0					
ANR	1614993	IdentifierDecl	i = 0		1614980	0					
ANR	1614994	IdentifierDeclType	int		1614980	0					
ANR	1614995	Identifier	i		1614980	1					
ANR	1614996	AssignmentExpression	i = 0		1614980	2		=			
ANR	1614997	Identifier	i		1614980	0					
ANR	1614998	PrimaryExpression	0		1614980	1					
ANR	1614999	Condition	i < m_adapters . getlast ( )	56:19:1844:1867	1614980	1	True				
ANR	1615000	RelationalExpression	i < m_adapters . getlast ( )		1614980	0		<			
ANR	1615001	Identifier	i		1614980	0					
ANR	1615002	CallExpression	m_adapters . getlast ( )		1614980	1					
ANR	1615003	Callee	m_adapters . getlast		1614980	0					
ANR	1615004	MemberAccess	m_adapters . getlast		1614980	0					
ANR	1615005	Identifier	m_adapters		1614980	0					
ANR	1615006	Identifier	getlast		1614980	1					
ANR	1615007	ArgumentList			1614980	1					
ANR	1615008	PostIncDecOperationExpression	i ++	56:46:1871:1873	1614980	2	True				
ANR	1615009	Identifier	i		1614980	0					
ANR	1615010	IncDec	++		1614980	1					
ANR	1615011	CompoundStatement		5:52:102:102	1614980	3					
ANR	1615012	Statement	delete	57:2:1881:1886	1614980	0	True				
ANR	1615013	ExpressionStatement	m_adapters [ i ]	57:9:1888:1901	1614980	1	True				
ANR	1615014	ArrayIndexing	m_adapters [ i ]		1614980	0					
ANR	1615015	Identifier	m_adapters		1614980	0					
ANR	1615016	Identifier	i		1614980	1					
ANR	1615017	Identifier	HibernationManager :: ~HibernationManager		1614980	1					
ANR	1615018	ParameterList			1614980	2					
ANR	1615019	CFGEntryNode	ENTRY		1614980		True				
ANR	1615020	CFGExitNode	EXIT		1614980		True				
ANR	1615021	Symbol	m_adapters . getlast		1614980						
ANR	1615022	Symbol	m_adapters		1614980						
ANR	1615023	Symbol	i		1614980						
ANR	1615024	Symbol	m_hibernator		1614980						
ANR	1615025	Function	HibernationManager :: initialize	61:0:1909:2033							
ANR	1615026	FunctionDef	HibernationManager :: initialize ()		1615025	0					
ANR	1615027	CompoundStatement		63:0:1954:2033	1615025	0					
ANR	1615028	IfStatement	if ( m_hibernator )		1615025	0					
ANR	1615029	Condition	m_hibernator	64:6:1962:1973	1615025	0	True				
ANR	1615030	Identifier	m_hibernator		1615025	0					
ANR	1615031	CompoundStatement		2:21:22:22	1615025	1					
ANR	1615032	ReturnStatement	return m_hibernator -> initialize ( ) ;	65:2:1981:2014	1615025	0	True				
ANR	1615033	CallExpression	m_hibernator -> initialize ( )		1615025	0					
ANR	1615034	Callee	m_hibernator -> initialize		1615025	0					
ANR	1615035	PtrMemberAccess	m_hibernator -> initialize		1615025	0					
ANR	1615036	Identifier	m_hibernator		1615025	0					
ANR	1615037	Identifier	initialize		1615025	1					
ANR	1615038	ArgumentList			1615025	1					
ANR	1615039	ReturnStatement	return true ;	67:1:2020:2031	1615025	1	True				
ANR	1615040	Identifier	true		1615025	0					
ANR	1615041	ReturnType	bool		1615025	1					
ANR	1615042	Identifier	HibernationManager :: initialize		1615025	2					
ANR	1615043	ParameterList			1615025	3					
ANR	1615044	CFGEntryNode	ENTRY		1615025		True				
ANR	1615045	CFGExitNode	EXIT		1615025		True				
ANR	1615046	Symbol	* m_hibernator		1615025						
ANR	1615047	Symbol	true		1615025						
ANR	1615048	Symbol	m_hibernator -> initialize		1615025						
ANR	1615049	Symbol	m_hibernator		1615025						
ANR	1615050	Function	HibernationManager :: addInterface	70:0:2036:2274							
ANR	1615051	FunctionDef	HibernationManager :: addInterface (NetworkAdapterBase & adapter)		1615050	0					
ANR	1615052	CompoundStatement		72:0:2105:2274	1615050	0					
ANR	1615053	ExpressionStatement	m_adapters . add ( & adapter )	73:1:2108:2134	1615050	0	True				
ANR	1615054	CallExpression	m_adapters . add ( & adapter )		1615050	0					
ANR	1615055	Callee	m_adapters . add		1615050	0					
ANR	1615056	MemberAccess	m_adapters . add		1615050	0					
ANR	1615057	Identifier	m_adapters		1615050	0					
ANR	1615058	Identifier	add		1615050	1					
ANR	1615059	ArgumentList	& adapter		1615050	1					
ANR	1615060	Argument	& adapter		1615050	0					
ANR	1615061	UnaryOperationExpression	& adapter		1615050	0					
ANR	1615062	UnaryOperator	&		1615050	0					
ANR	1615063	Identifier	adapter		1615050	1					
ANR	1615064	IfStatement	if ( ( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false ) )		1615050	1					
ANR	1615065	Condition	( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false )	74:7:2143:2219	1615050	0	True				
ANR	1615066	OrExpression	( NULL == m_primary_adapter ) || ( m_primary_adapter -> isPrimary ( ) == false )		1615050	0		||			
ANR	1615067	EqualityExpression	NULL == m_primary_adapter		1615050	0		==			
ANR	1615068	Identifier	NULL		1615050	0					
ANR	1615069	Identifier	m_primary_adapter		1615050	1					
ANR	1615070	EqualityExpression	m_primary_adapter -> isPrimary ( ) == false		1615050	1		==			
ANR	1615071	CallExpression	m_primary_adapter -> isPrimary ( )		1615050	0					
ANR	1615072	Callee	m_primary_adapter -> isPrimary		1615050	0					
ANR	1615073	PtrMemberAccess	m_primary_adapter -> isPrimary		1615050	0					
ANR	1615074	Identifier	m_primary_adapter		1615050	0					
ANR	1615075	Identifier	isPrimary		1615050	1					
ANR	1615076	ArgumentList			1615050	1					
ANR	1615077	Identifier	false		1615050	1					
ANR	1615078	CompoundStatement		4:48:117:117	1615050	1					
ANR	1615079	ExpressionStatement	m_primary_adapter = & adapter	76:2:2227:2255	1615050	0	True				
ANR	1615080	AssignmentExpression	m_primary_adapter = & adapter		1615050	0		=			
ANR	1615081	Identifier	m_primary_adapter		1615050	0					
ANR	1615082	UnaryOperationExpression	& adapter		1615050	1					
ANR	1615083	UnaryOperator	&		1615050	0					
ANR	1615084	Identifier	adapter		1615050	1					
ANR	1615085	ReturnStatement	return true ;	78:1:2261:2272	1615050	2	True				
ANR	1615086	Identifier	true		1615050	0					
ANR	1615087	ReturnType	bool		1615050	1					
ANR	1615088	Identifier	HibernationManager :: addInterface		1615050	2					
ANR	1615089	ParameterList	NetworkAdapterBase & adapter		1615050	3					
ANR	1615090	Parameter	NetworkAdapterBase & adapter	71:34:2075:2101	1615050	0	True				
ANR	1615091	ParameterType	NetworkAdapterBase &		1615050	0					
ANR	1615092	Identifier	adapter		1615050	1					
ANR	1615093	CFGEntryNode	ENTRY		1615050		True				
ANR	1615094	CFGExitNode	EXIT		1615050		True				
ANR	1615095	Symbol	adapter		1615050						
ANR	1615096	Symbol	NULL		1615050						
ANR	1615097	Symbol	* m_primary_adapter		1615050						
ANR	1615098	Symbol	m_adapters		1615050						
ANR	1615099	Symbol	m_primary_adapter -> isPrimary		1615050						
ANR	1615100	Symbol	false		1615050						
ANR	1615101	Symbol	true		1615050						
ANR	1615102	Symbol	m_primary_adapter		1615050						
ANR	1615103	Symbol	& adapter		1615050						
ANR	1615104	Function	HibernationManager :: update	81:0:2277:2695							
ANR	1615105	FunctionDef	HibernationManager :: update ()		1615104	0					
ANR	1615106	CompoundStatement		83:0:2317:2695	1615104	0					
ANR	1615107	IdentifierDeclStatement	int previous_inteval = m_interval ;	84:1:2320:2353	1615104	0	True				
ANR	1615108	IdentifierDecl	previous_inteval = m_interval		1615104	0					
ANR	1615109	IdentifierDeclType	int		1615104	0					
ANR	1615110	Identifier	previous_inteval		1615104	1					
ANR	1615111	AssignmentExpression	previous_inteval = m_interval		1615104	2		=			
ANR	1615112	Identifier	m_interval		1615104	0					
ANR	1615113	Identifier	m_interval		1615104	1					
ANR	1615114	ExpressionStatement	"m_interval = param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"	85:1:2356:2453	1615104	1	True				
ANR	1615115	AssignmentExpression	"m_interval = param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"		1615104	0		=			
ANR	1615116	Identifier	m_interval		1615104	0					
ANR	1615117	CallExpression	"param_integer ( ""HIBERNATE_CHECK_INTERVAL"" , 0 , 0 )"		1615104	1					
ANR	1615118	Callee	param_integer		1615104	0					
ANR	1615119	Identifier	param_integer		1615104	0					
ANR	1615120	ArgumentList	"""HIBERNATE_CHECK_INTERVAL"""		1615104	1					
ANR	1615121	Argument	"""HIBERNATE_CHECK_INTERVAL"""		1615104	0					
ANR	1615122	PrimaryExpression	"""HIBERNATE_CHECK_INTERVAL"""		1615104	0					
ANR	1615123	Argument	0		1615104	1					
ANR	1615124	PrimaryExpression	0		1615104	0					
ANR	1615125	Argument	0		1615104	2					
ANR	1615126	PrimaryExpression	0		1615104	0					
ANR	1615127	IdentifierDeclStatement	bool change = ( previous_inteval != m_interval ) ;	87:1:2457:2505	1615104	2	True				
ANR	1615128	IdentifierDecl	change = ( previous_inteval != m_interval )		1615104	0					
ANR	1615129	IdentifierDeclType	bool		1615104	0					
ANR	1615130	Identifier	change		1615104	1					
ANR	1615131	AssignmentExpression	change = ( previous_inteval != m_interval )		1615104	2		=			
ANR	1615132	Identifier	change		1615104	0					
ANR	1615133	EqualityExpression	previous_inteval != m_interval		1615104	1		!=			
ANR	1615134	Identifier	previous_inteval		1615104	0					
ANR	1615135	Identifier	m_interval		1615104	1					
ANR	1615136	IfStatement	if ( change )		1615104	3					
ANR	1615137	Condition	change	88:6:2513:2518	1615104	0	True				
ANR	1615138	Identifier	change		1615104	0					
ANR	1615139	CompoundStatement		6:15:204:204	1615104	1					
ANR	1615140	ExpressionStatement	"dprintf ( D_ALWAYS , ""HibernationManager: Hibernation is %s\\n"" , ( m_interval > 0 ? ""enabled"" : ""disabled"" ) )"	89:2:2526:2637	1615104	0	True				
ANR	1615141	CallExpression	"dprintf ( D_ALWAYS , ""HibernationManager: Hibernation is %s\\n"" , ( m_interval > 0 ? ""enabled"" : ""disabled"" ) )"		1615104	0					
ANR	1615142	Callee	dprintf		1615104	0					
ANR	1615143	Identifier	dprintf		1615104	0					
ANR	1615144	ArgumentList	D_ALWAYS		1615104	1					
ANR	1615145	Argument	D_ALWAYS		1615104	0					
ANR	1615146	Identifier	D_ALWAYS		1615104	0					
ANR	1615147	Argument	"""HibernationManager: Hibernation is %s\\n"""		1615104	1					
ANR	1615148	PrimaryExpression	"""HibernationManager: Hibernation is %s\\n"""		1615104	0					
ANR	1615149	Argument	"m_interval > 0 ? ""enabled"" : ""disabled"""		1615104	2					
ANR	1615150	ConditionalExpression	"m_interval > 0 ? ""enabled"" : ""disabled"""		1615104	0					
ANR	1615151	Condition	m_interval > 0		1615104	0					
ANR	1615152	RelationalExpression	m_interval > 0		1615104	0		>			
ANR	1615153	Identifier	m_interval		1615104	0					
ANR	1615154	PrimaryExpression	0		1615104	1					
ANR	1615155	PrimaryExpression	"""enabled"""		1615104	1					
ANR	1615156	PrimaryExpression	"""disabled"""		1615104	2					
ANR	1615157	IfStatement	if ( m_hibernator )		1615104	4					
ANR	1615158	Condition	m_hibernator	92:6:2648:2659	1615104	0	True				
ANR	1615159	Identifier	m_hibernator		1615104	0					
ANR	1615160	CompoundStatement		10:21:345:345	1615104	1					
ANR	1615161	ExpressionStatement	m_hibernator -> update ( )	93:2:2667:2690	1615104	0	True				
ANR	1615162	CallExpression	m_hibernator -> update ( )		1615104	0					
ANR	1615163	Callee	m_hibernator -> update		1615104	0					
ANR	1615164	PtrMemberAccess	m_hibernator -> update		1615104	0					
ANR	1615165	Identifier	m_hibernator		1615104	0					
ANR	1615166	Identifier	update		1615104	1					
ANR	1615167	ArgumentList			1615104	1					
ANR	1615168	ReturnType	void		1615104	1					
ANR	1615169	Identifier	HibernationManager :: update		1615104	2					
ANR	1615170	ParameterList			1615104	3					
ANR	1615171	CFGEntryNode	ENTRY		1615104		True				
ANR	1615172	CFGExitNode	EXIT		1615104		True				
ANR	1615173	Symbol	previous_inteval		1615104						
ANR	1615174	Symbol	change		1615104						
ANR	1615175	Symbol	D_ALWAYS		1615104						
ANR	1615176	Symbol	param_integer		1615104						
ANR	1615177	Symbol	m_interval		1615104						
ANR	1615178	Symbol	m_hibernator		1615104						
ANR	1615179	Function	HibernationManager :: isStateSupported	97:0:2698:2876							
ANR	1615180	FunctionDef	HibernationManager :: isStateSupported (HibernatorBase :: SLEEP_STATE state)		1615179	0					
ANR	1615181	CompoundStatement		99:0:2783:2876	1615179	0					
ANR	1615182	IfStatement	if ( m_hibernator )		1615179	0					
ANR	1615183	Condition	m_hibernator	100:6:2791:2802	1615179	0	True				
ANR	1615184	Identifier	m_hibernator		1615179	0					
ANR	1615185	CompoundStatement		2:21:22:22	1615179	1					
ANR	1615186	ReturnStatement	return m_hibernator -> isStateSupported ( state ) ;	101:2:2810:2856	1615179	0	True				
ANR	1615187	CallExpression	m_hibernator -> isStateSupported ( state )		1615179	0					
ANR	1615188	Callee	m_hibernator -> isStateSupported		1615179	0					
ANR	1615189	PtrMemberAccess	m_hibernator -> isStateSupported		1615179	0					
ANR	1615190	Identifier	m_hibernator		1615179	0					
ANR	1615191	Identifier	isStateSupported		1615179	1					
ANR	1615192	ArgumentList	state		1615179	1					
ANR	1615193	Argument	state		1615179	0					
ANR	1615194	Identifier	state		1615179	0					
ANR	1615195	ReturnStatement	return false ;	103:1:2862:2874	1615179	1	True				
ANR	1615196	Identifier	false		1615179	0					
ANR	1615197	ReturnType	bool		1615179	1					
ANR	1615198	Identifier	HibernationManager :: isStateSupported		1615179	2					
ANR	1615199	ParameterList	HibernatorBase :: SLEEP_STATE state		1615179	3					
ANR	1615200	Parameter	HibernatorBase :: SLEEP_STATE state	98:38:2741:2773	1615179	0	True				
ANR	1615201	ParameterType	HibernatorBase :: SLEEP_STATE		1615179	0					
ANR	1615202	Identifier	state		1615179	1					
ANR	1615203	CFGEntryNode	ENTRY		1615179		True				
ANR	1615204	CFGExitNode	EXIT		1615179		True				
ANR	1615205	Symbol	* m_hibernator		1615179						
ANR	1615206	Symbol	false		1615179						
ANR	1615207	Symbol	state		1615179						
ANR	1615208	Symbol	m_hibernator -> isStateSupported		1615179						
ANR	1615209	Symbol	m_hibernator		1615179						
ANR	1615210	Function	HibernationManager :: getSupportedStates	106:0:2879:3043							
ANR	1615211	FunctionDef	HibernationManager :: getSupportedStates (unsigned & mask)		1615210	0					
ANR	1615212	CompoundStatement		108:0:2948:3043	1615210	0					
ANR	1615213	IfStatement	if ( m_hibernator )		1615210	0					
ANR	1615214	Condition	m_hibernator	109:6:2956:2967	1615210	0	True				
ANR	1615215	Identifier	m_hibernator		1615210	0					
ANR	1615216	CompoundStatement		2:21:22:22	1615210	1					
ANR	1615217	ExpressionStatement	mask = m_hibernator -> getStates ( )	110:2:2975:3008	1615210	0	True				
ANR	1615218	AssignmentExpression	mask = m_hibernator -> getStates ( )		1615210	0		=			
ANR	1615219	Identifier	mask		1615210	0					
ANR	1615220	CallExpression	m_hibernator -> getStates ( )		1615210	1					
ANR	1615221	Callee	m_hibernator -> getStates		1615210	0					
ANR	1615222	PtrMemberAccess	m_hibernator -> getStates		1615210	0					
ANR	1615223	Identifier	m_hibernator		1615210	0					
ANR	1615224	Identifier	getStates		1615210	1					
ANR	1615225	ArgumentList			1615210	1					
ANR	1615226	ReturnStatement	return true ;	111:2:3012:3023	1615210	1	True				
ANR	1615227	Identifier	true		1615210	0					
ANR	1615228	ReturnStatement	return false ;	113:1:3029:3041	1615210	1	True				
ANR	1615229	Identifier	false		1615210	0					
ANR	1615230	ReturnType	bool		1615210	1					
ANR	1615231	Identifier	HibernationManager :: getSupportedStates		1615210	2					
ANR	1615232	ParameterList	unsigned & mask		1615210	3					
ANR	1615233	Parameter	unsigned & mask	107:40:2924:2938	1615210	0	True				
ANR	1615234	ParameterType	unsigned &		1615210	0					
ANR	1615235	Identifier	mask		1615210	1					
ANR	1615236	CFGEntryNode	ENTRY		1615210		True				
ANR	1615237	CFGExitNode	EXIT		1615210		True				
ANR	1615238	Symbol	* m_hibernator		1615210						
ANR	1615239	Symbol	true		1615210						
ANR	1615240	Symbol	false		1615210						
ANR	1615241	Symbol	m_hibernator -> getStates		1615210						
ANR	1615242	Symbol	m_hibernator		1615210						
ANR	1615243	Symbol	mask		1615210						
ANR	1615244	Function	HibernationManager :: getSupportedStates	116:0:3046:3312							
ANR	1615245	FunctionDef	HibernationManager :: getSupportedStates (ExtArray < HibernatorBase :: SLEEP_STATE > & states)		1615244	0					
ANR	1615246	CompoundStatement		119:0:3146:3312	1615244	0					
ANR	1615247	ExpressionStatement	states . truncate ( - 1 )	120:1:3149:3168	1615244	0	True				
ANR	1615248	CallExpression	states . truncate ( - 1 )		1615244	0					
ANR	1615249	Callee	states . truncate		1615244	0					
ANR	1615250	MemberAccess	states . truncate		1615244	0					
ANR	1615251	Identifier	states		1615244	0					
ANR	1615252	Identifier	truncate		1615244	1					
ANR	1615253	ArgumentList	- 1		1615244	1					
ANR	1615254	Argument	- 1		1615244	0					
ANR	1615255	UnaryOperationExpression	- 1		1615244	0					
ANR	1615256	UnaryOperator	-		1615244	0					
ANR	1615257	PrimaryExpression	1		1615244	1					
ANR	1615258	IfStatement	if ( m_hibernator )		1615244	1					
ANR	1615259	Condition	m_hibernator	121:6:3176:3187	1615244	0	True				
ANR	1615260	Identifier	m_hibernator		1615244	0					
ANR	1615261	CompoundStatement		4:2:48:90	1615244	1					
ANR	1615262	IdentifierDeclStatement	unsigned mask = m_hibernator -> getStates ( ) ;	122:2:3195:3237	1615244	0	True				
ANR	1615263	IdentifierDecl	mask = m_hibernator -> getStates ( )		1615244	0					
ANR	1615264	IdentifierDeclType	unsigned		1615244	0					
ANR	1615265	Identifier	mask		1615244	1					
ANR	1615266	AssignmentExpression	mask = m_hibernator -> getStates ( )		1615244	2		=			
ANR	1615267	Identifier	mask		1615244	0					
ANR	1615268	CallExpression	m_hibernator -> getStates ( )		1615244	1					
ANR	1615269	Callee	m_hibernator -> getStates		1615244	0					
ANR	1615270	PtrMemberAccess	m_hibernator -> getStates		1615244	0					
ANR	1615271	Identifier	m_hibernator		1615244	0					
ANR	1615272	Identifier	getStates		1615244	1					
ANR	1615273	ArgumentList			1615244	1					
ANR	1615274	ReturnStatement	"return HibernatorBase :: maskToStates ( mask , states ) ;"	123:2:3241:3292	1615244	1	True				
ANR	1615275	CallExpression	"HibernatorBase :: maskToStates ( mask , states )"		1615244	0					
ANR	1615276	Callee	HibernatorBase :: maskToStates		1615244	0					
ANR	1615277	Identifier	HibernatorBase :: maskToStates		1615244	0					
ANR	1615278	ArgumentList	mask		1615244	1					
ANR	1615279	Argument	mask		1615244	0					
ANR	1615280	Identifier	mask		1615244	0					
ANR	1615281	Argument	states		1615244	1					
ANR	1615282	Identifier	states		1615244	0					
ANR	1615283	ReturnStatement	return false ;	125:1:3298:3310	1615244	2	True				
ANR	1615284	Identifier	false		1615244	0					
ANR	1615285	ReturnType	bool		1615244	1					
ANR	1615286	Identifier	HibernationManager :: getSupportedStates		1615244	2					
ANR	1615287	ParameterList	ExtArray < HibernatorBase :: SLEEP_STATE > & states		1615244	3					
ANR	1615288	Parameter	ExtArray < HibernatorBase :: SLEEP_STATE > & states	118:1:3092:3136	1615244	0	True				
ANR	1615289	ParameterType	ExtArray < HibernatorBase :: SLEEP_STATE > &		1615244	0					
ANR	1615290	Identifier	states		1615244	1					
ANR	1615291	CFGEntryNode	ENTRY		1615244		True				
ANR	1615292	CFGExitNode	EXIT		1615244		True				
ANR	1615293	Symbol	* m_hibernator		1615244						
ANR	1615294	Symbol	false		1615244						
ANR	1615295	Symbol	m_hibernator -> getStates		1615244						
ANR	1615296	Symbol	HibernatorBase :: maskToStates		1615244						
ANR	1615297	Symbol	m_hibernator		1615244						
ANR	1615298	Symbol	states		1615244						
ANR	1615299	Symbol	mask		1615244						
ANR	1615300	Function	HibernationManager :: getSupportedStates	128:0:3315:3556							
ANR	1615301	FunctionDef	HibernationManager :: getSupportedStates (MyString & str)		1615300	0					
ANR	1615302	CompoundStatement		130:0:3382:3556	1615300	0					
ANR	1615303	ExpressionStatement	"str = """""	131:1:3385:3393	1615300	0	True				
ANR	1615304	AssignmentExpression	"str = """""		1615300	0		=			
ANR	1615305	Identifier	str		1615300	0					
ANR	1615306	PrimaryExpression	""""""		1615300	1					
ANR	1615307	IdentifierDeclStatement	ExtArray < HibernatorBase :: SLEEP_STATE > states ;	132:1:3396:3440	1615300	1	True				
ANR	1615308	IdentifierDecl	states		1615300	0					
ANR	1615309	IdentifierDeclType	ExtArray < HibernatorBase :: SLEEP_STATE >		1615300	0					
ANR	1615310	Identifier	states		1615300	1					
ANR	1615311	IfStatement	if ( ! getSupportedStates ( states ) )		1615300	2					
ANR	1615312	Condition	! getSupportedStates ( states )	133:6:3448:3476	1615300	0	True				
ANR	1615313	UnaryOperationExpression	! getSupportedStates ( states )		1615300	0					
ANR	1615314	UnaryOperator	!		1615300	0					
ANR	1615315	CallExpression	getSupportedStates ( states )		1615300	1					
ANR	1615316	Callee	getSupportedStates		1615300	0					
ANR	1615317	Identifier	getSupportedStates		1615300	0					
ANR	1615318	ArgumentList	states		1615300	1					
ANR	1615319	Argument	states		1615300	0					
ANR	1615320	Identifier	states		1615300	0					
ANR	1615321	CompoundStatement		4:38:97:97	1615300	1					
ANR	1615322	ReturnStatement	return false ;	134:2:3484:3496	1615300	0	True				
ANR	1615323	Identifier	false		1615300	0					
ANR	1615324	ReturnStatement	"return HibernatorBase :: statesToString ( states , str ) ;"	136:1:3502:3554	1615300	3	True				
ANR	1615325	CallExpression	"HibernatorBase :: statesToString ( states , str )"		1615300	0					
ANR	1615326	Callee	HibernatorBase :: statesToString		1615300	0					
ANR	1615327	Identifier	HibernatorBase :: statesToString		1615300	0					
ANR	1615328	ArgumentList	states		1615300	1					
ANR	1615329	Argument	states		1615300	0					
ANR	1615330	Identifier	states		1615300	0					
ANR	1615331	Argument	str		1615300	1					
ANR	1615332	Identifier	str		1615300	0					
ANR	1615333	ReturnType	bool		1615300	1					
ANR	1615334	Identifier	HibernationManager :: getSupportedStates		1615300	2					
ANR	1615335	ParameterList	MyString & str		1615300	3					
ANR	1615336	Parameter	MyString & str	129:40:3360:3372	1615300	0	True				
ANR	1615337	ParameterType	MyString &		1615300	0					
ANR	1615338	Identifier	str		1615300	1					
ANR	1615339	CFGEntryNode	ENTRY		1615300		True				
ANR	1615340	CFGExitNode	EXIT		1615300		True				
ANR	1615341	Symbol	str		1615300						
ANR	1615342	Symbol	false		1615300						
ANR	1615343	Symbol	getSupportedStates		1615300						
ANR	1615344	Symbol	states		1615300						
ANR	1615345	Symbol	HibernatorBase :: statesToString		1615300						
ANR	1615346	Function	HibernationManager :: setTargetState	139:0:3559:3782							
ANR	1615347	FunctionDef	HibernationManager :: setTargetState (HibernatorBase :: SLEEP_STATE state)		1615346	0					
ANR	1615348	CompoundStatement		141:0:3636:3782	1615346	0					
ANR	1615349	IfStatement	if ( state == m_target_state )		1615346	0					
ANR	1615350	Condition	state == m_target_state	142:6:3644:3666	1615346	0	True				
ANR	1615351	EqualityExpression	state == m_target_state		1615346	0		==			
ANR	1615352	Identifier	state		1615346	0					
ANR	1615353	Identifier	m_target_state		1615346	1					
ANR	1615354	CompoundStatement		2:32:33:33	1615346	1					
ANR	1615355	ReturnStatement	return true ;	143:2:3674:3685	1615346	0	True				
ANR	1615356	Identifier	true		1615346	0					
ANR	1615357	IfStatement	if ( ! validateState ( state ) )		1615346	1					
ANR	1615358	Condition	! validateState ( state )	145:6:3696:3718	1615346	0	True				
ANR	1615359	UnaryOperationExpression	! validateState ( state )		1615346	0					
ANR	1615360	UnaryOperator	!		1615346	0					
ANR	1615361	CallExpression	validateState ( state )		1615346	1					
ANR	1615362	Callee	validateState		1615346	0					
ANR	1615363	Identifier	validateState		1615346	0					
ANR	1615364	ArgumentList	state		1615346	1					
ANR	1615365	Argument	state		1615346	0					
ANR	1615366	Identifier	state		1615346	0					
ANR	1615367	CompoundStatement		5:32:85:85	1615346	1					
ANR	1615368	ReturnStatement	return false ;	146:2:3726:3738	1615346	0	True				
ANR	1615369	Identifier	false		1615346	0					
ANR	1615370	ExpressionStatement	m_target_state = state	148:1:3744:3766	1615346	2	True				
ANR	1615371	AssignmentExpression	m_target_state = state		1615346	0		=			
ANR	1615372	Identifier	m_target_state		1615346	0					
ANR	1615373	Identifier	state		1615346	1					
ANR	1615374	ReturnStatement	return true ;	149:1:3769:3780	1615346	3	True				
ANR	1615375	Identifier	true		1615346	0					
ANR	1615376	ReturnType	bool		1615346	1					
ANR	1615377	Identifier	HibernationManager :: setTargetState		1615346	2					
ANR	1615378	ParameterList	HibernatorBase :: SLEEP_STATE state		1615346	3					
ANR	1615379	Parameter	HibernatorBase :: SLEEP_STATE state	140:36:3600:3632	1615346	0	True				
ANR	1615380	ParameterType	HibernatorBase :: SLEEP_STATE		1615346	0					
ANR	1615381	Identifier	state		1615346	1					
ANR	1615382	CFGEntryNode	ENTRY		1615346		True				
ANR	1615383	CFGExitNode	EXIT		1615346		True				
ANR	1615384	Symbol	m_target_state		1615346						
ANR	1615385	Symbol	true		1615346						
ANR	1615386	Symbol	false		1615346						
ANR	1615387	Symbol	state		1615346						
ANR	1615388	Symbol	validateState		1615346						
ANR	1615389	Function	HibernationManager :: setTargetState	152:0:3785:4090							
ANR	1615390	FunctionDef	HibernationManager :: setTargetState (const char * name)		1615389	0					
ANR	1615391	CompoundStatement		154:0:3845:4090	1615389	0					
ANR	1615392	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> stringToSleepState ( name ) ;	155:1:3848:3926	1615389	0	True				
ANR	1615393	IdentifierDecl	state = m_hibernator -> stringToSleepState ( name )		1615389	0					
ANR	1615394	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		1615389	0					
ANR	1615395	Identifier	state		1615389	1					
ANR	1615396	AssignmentExpression	state = m_hibernator -> stringToSleepState ( name )		1615389	2		=			
ANR	1615397	Identifier	state		1615389	0					
ANR	1615398	CallExpression	m_hibernator -> stringToSleepState ( name )		1615389	1					
ANR	1615399	Callee	m_hibernator -> stringToSleepState		1615389	0					
ANR	1615400	PtrMemberAccess	m_hibernator -> stringToSleepState		1615389	0					
ANR	1615401	Identifier	m_hibernator		1615389	0					
ANR	1615402	Identifier	stringToSleepState		1615389	1					
ANR	1615403	ArgumentList	name		1615389	1					
ANR	1615404	Argument	name		1615389	0					
ANR	1615405	Identifier	name		1615389	0					
ANR	1615406	IfStatement	if ( state == HibernatorBase :: NONE )		1615389	1					
ANR	1615407	Condition	state == HibernatorBase :: NONE	157:6:3934:3962	1615389	0	True				
ANR	1615408	EqualityExpression	state == HibernatorBase :: NONE		1615389	0		==			
ANR	1615409	Identifier	state		1615389	0					
ANR	1615410	Identifier	HibernatorBase :: NONE		1615389	1					
ANR	1615411	CompoundStatement		4:38:120:120	1615389	1					
ANR	1615412	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't set invalid target state '%s'\\n"" , name )"	158:2:3970:4036	1615389	0	True				
ANR	1615413	CallExpression	"dprintf ( D_ALWAYS , ""Can't set invalid target state '%s'\\n"" , name )"		1615389	0					
ANR	1615414	Callee	dprintf		1615389	0					
ANR	1615415	Identifier	dprintf		1615389	0					
ANR	1615416	ArgumentList	D_ALWAYS		1615389	1					
ANR	1615417	Argument	D_ALWAYS		1615389	0					
ANR	1615418	Identifier	D_ALWAYS		1615389	0					
ANR	1615419	Argument	"""Can't set invalid target state '%s'\\n"""		1615389	1					
ANR	1615420	PrimaryExpression	"""Can't set invalid target state '%s'\\n"""		1615389	0					
ANR	1615421	Argument	name		1615389	2					
ANR	1615422	Identifier	name		1615389	0					
ANR	1615423	ReturnStatement	return false ;	159:2:4040:4052	1615389	1	True				
ANR	1615424	Identifier	false		1615389	0					
ANR	1615425	ReturnStatement	return setTargetState ( state ) ;	161:1:4058:4088	1615389	2	True				
ANR	1615426	CallExpression	setTargetState ( state )		1615389	0					
ANR	1615427	Callee	setTargetState		1615389	0					
ANR	1615428	Identifier	setTargetState		1615389	0					
ANR	1615429	ArgumentList	state		1615389	1					
ANR	1615430	Argument	state		1615389	0					
ANR	1615431	Identifier	state		1615389	0					
ANR	1615432	ReturnType	bool		1615389	1					
ANR	1615433	Identifier	HibernationManager :: setTargetState		1615389	2					
ANR	1615434	ParameterList	const char * name		1615389	3					
ANR	1615435	Parameter	const char * name	153:36:3826:3841	1615389	0	True				
ANR	1615436	ParameterType	const char *		1615389	0					
ANR	1615437	Identifier	name		1615389	1					
ANR	1615438	CFGEntryNode	ENTRY		1615389		True				
ANR	1615439	CFGExitNode	EXIT		1615389		True				
ANR	1615440	Symbol	* m_hibernator		1615389						
ANR	1615441	Symbol	name		1615389						
ANR	1615442	Symbol	D_ALWAYS		1615389						
ANR	1615443	Symbol	false		1615389						
ANR	1615444	Symbol	m_hibernator -> stringToSleepState		1615389						
ANR	1615445	Symbol	state		1615389						
ANR	1615446	Symbol	setTargetState		1615389						
ANR	1615447	Symbol	m_hibernator		1615389						
ANR	1615448	Symbol	HibernatorBase :: NONE		1615389						
ANR	1615449	Function	HibernationManager :: setTargetLevel	164:0:4093:4388							
ANR	1615450	FunctionDef	HibernationManager :: setTargetLevel (int level)		1615449	0					
ANR	1615451	CompoundStatement		166:0:4147:4388	1615449	0					
ANR	1615452	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> intToSleepState ( level ) ;	167:1:4150:4226	1615449	0	True				
ANR	1615453	IdentifierDecl	state = m_hibernator -> intToSleepState ( level )		1615449	0					
ANR	1615454	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		1615449	0					
ANR	1615455	Identifier	state		1615449	1					
ANR	1615456	AssignmentExpression	state = m_hibernator -> intToSleepState ( level )		1615449	2		=			
ANR	1615457	Identifier	state		1615449	0					
ANR	1615458	CallExpression	m_hibernator -> intToSleepState ( level )		1615449	1					
ANR	1615459	Callee	m_hibernator -> intToSleepState		1615449	0					
ANR	1615460	PtrMemberAccess	m_hibernator -> intToSleepState		1615449	0					
ANR	1615461	Identifier	m_hibernator		1615449	0					
ANR	1615462	Identifier	intToSleepState		1615449	1					
ANR	1615463	ArgumentList	level		1615449	1					
ANR	1615464	Argument	level		1615449	0					
ANR	1615465	Identifier	level		1615449	0					
ANR	1615466	IfStatement	if ( state == HibernatorBase :: NONE )		1615449	1					
ANR	1615467	Condition	state == HibernatorBase :: NONE	169:6:4234:4262	1615449	0	True				
ANR	1615468	EqualityExpression	state == HibernatorBase :: NONE		1615449	0		==			
ANR	1615469	Identifier	state		1615449	0					
ANR	1615470	Identifier	HibernatorBase :: NONE		1615449	1					
ANR	1615471	CompoundStatement		4:38:118:118	1615449	1					
ANR	1615472	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid level %d\\n"" , level )"	170:2:4270:4334	1615449	0	True				
ANR	1615473	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid level %d\\n"" , level )"		1615449	0					
ANR	1615474	Callee	dprintf		1615449	0					
ANR	1615475	Identifier	dprintf		1615449	0					
ANR	1615476	ArgumentList	D_ALWAYS		1615449	1					
ANR	1615477	Argument	D_ALWAYS		1615449	0					
ANR	1615478	Identifier	D_ALWAYS		1615449	0					
ANR	1615479	Argument	"""Can't switch to invalid level %d\\n"""		1615449	1					
ANR	1615480	PrimaryExpression	"""Can't switch to invalid level %d\\n"""		1615449	0					
ANR	1615481	Argument	level		1615449	2					
ANR	1615482	Identifier	level		1615449	0					
ANR	1615483	ReturnStatement	return false ;	171:2:4338:4350	1615449	1	True				
ANR	1615484	Identifier	false		1615449	0					
ANR	1615485	ReturnStatement	return setTargetState ( state ) ;	173:1:4356:4386	1615449	2	True				
ANR	1615486	CallExpression	setTargetState ( state )		1615449	0					
ANR	1615487	Callee	setTargetState		1615449	0					
ANR	1615488	Identifier	setTargetState		1615449	0					
ANR	1615489	ArgumentList	state		1615449	1					
ANR	1615490	Argument	state		1615449	0					
ANR	1615491	Identifier	state		1615449	0					
ANR	1615492	ReturnType	bool		1615449	1					
ANR	1615493	Identifier	HibernationManager :: setTargetLevel		1615449	2					
ANR	1615494	ParameterList	int level		1615449	3					
ANR	1615495	Parameter	int level	165:37:4135:4143	1615449	0	True				
ANR	1615496	ParameterType	int		1615449	0					
ANR	1615497	Identifier	level		1615449	1					
ANR	1615498	CFGEntryNode	ENTRY		1615449		True				
ANR	1615499	CFGExitNode	EXIT		1615449		True				
ANR	1615500	Symbol	m_hibernator -> intToSleepState		1615449						
ANR	1615501	Symbol	* m_hibernator		1615449						
ANR	1615502	Symbol	level		1615449						
ANR	1615503	Symbol	D_ALWAYS		1615449						
ANR	1615504	Symbol	false		1615449						
ANR	1615505	Symbol	state		1615449						
ANR	1615506	Symbol	setTargetState		1615449						
ANR	1615507	Symbol	m_hibernator		1615449						
ANR	1615508	Symbol	HibernatorBase :: NONE		1615449						
ANR	1615509	Function	HibernationManager :: validateState	176:0:4391:4788							
ANR	1615510	FunctionDef	HibernationManager :: validateState (HibernatorBase :: SLEEP_STATE state)		1615509	0					
ANR	1615511	CompoundStatement		178:0:4473:4788	1615509	0					
ANR	1615512	IfStatement	if ( ! isStateValid ( state ) )		1615509	0					
ANR	1615513	Condition	! isStateValid ( state )	179:6:4481:4503	1615509	0	True				
ANR	1615514	UnaryOperationExpression	! isStateValid ( state )		1615509	0					
ANR	1615515	UnaryOperator	!		1615509	0					
ANR	1615516	CallExpression	isStateValid ( state )		1615509	1					
ANR	1615517	Callee	isStateValid		1615509	0					
ANR	1615518	Identifier	isStateValid		1615509	0					
ANR	1615519	ArgumentList	state		1615509	1					
ANR	1615520	Argument	state		1615509	0					
ANR	1615521	Identifier	state		1615509	0					
ANR	1615522	CompoundStatement		2:32:33:33	1615509	1					
ANR	1615523	ExpressionStatement	"dprintf ( D_ALWAYS , ""Attempt to set invalid sleep state %d\\n"" , ( int ) state )"	180:2:4511:4590	1615509	0	True				
ANR	1615524	CallExpression	"dprintf ( D_ALWAYS , ""Attempt to set invalid sleep state %d\\n"" , ( int ) state )"		1615509	0					
ANR	1615525	Callee	dprintf		1615509	0					
ANR	1615526	Identifier	dprintf		1615509	0					
ANR	1615527	ArgumentList	D_ALWAYS		1615509	1					
ANR	1615528	Argument	D_ALWAYS		1615509	0					
ANR	1615529	Identifier	D_ALWAYS		1615509	0					
ANR	1615530	Argument	"""Attempt to set invalid sleep state %d\\n"""		1615509	1					
ANR	1615531	PrimaryExpression	"""Attempt to set invalid sleep state %d\\n"""		1615509	0					
ANR	1615532	Argument	( int ) state		1615509	2					
ANR	1615533	CastExpression	( int ) state		1615509	0					
ANR	1615534	CastTarget	int		1615509	0					
ANR	1615535	Identifier	state		1615509	1					
ANR	1615536	ReturnStatement	return false ;	182:2:4594:4606	1615509	1	True				
ANR	1615537	Identifier	false		1615509	0					
ANR	1615538	IfStatement	if ( ! isStateSupported ( state ) )		1615509	1					
ANR	1615539	Condition	! isStateSupported ( state )	184:6:4617:4641	1615509	0	True				
ANR	1615540	UnaryOperationExpression	! isStateSupported ( state )		1615509	0					
ANR	1615541	UnaryOperator	!		1615509	0					
ANR	1615542	CallExpression	isStateSupported ( state )		1615509	1					
ANR	1615543	Callee	isStateSupported		1615509	0					
ANR	1615544	Identifier	isStateSupported		1615509	0					
ANR	1615545	ArgumentList	state		1615509	1					
ANR	1615546	Argument	state		1615509	0					
ANR	1615547	Identifier	state		1615509	0					
ANR	1615548	CompoundStatement		7:34:171:171	1615509	1					
ANR	1615549	ExpressionStatement	"dprintf ( D_ALWAYS , ""Attempt to set unsupported sleep state %s\\n"" , sleepStateToString ( state ) )"	185:2:4649:4753	1615509	0	True				
ANR	1615550	CallExpression	"dprintf ( D_ALWAYS , ""Attempt to set unsupported sleep state %s\\n"" , sleepStateToString ( state ) )"		1615509	0					
ANR	1615551	Callee	dprintf		1615509	0					
ANR	1615552	Identifier	dprintf		1615509	0					
ANR	1615553	ArgumentList	D_ALWAYS		1615509	1					
ANR	1615554	Argument	D_ALWAYS		1615509	0					
ANR	1615555	Identifier	D_ALWAYS		1615509	0					
ANR	1615556	Argument	"""Attempt to set unsupported sleep state %s\\n"""		1615509	1					
ANR	1615557	PrimaryExpression	"""Attempt to set unsupported sleep state %s\\n"""		1615509	0					
ANR	1615558	Argument	sleepStateToString ( state )		1615509	2					
ANR	1615559	CallExpression	sleepStateToString ( state )		1615509	0					
ANR	1615560	Callee	sleepStateToString		1615509	0					
ANR	1615561	Identifier	sleepStateToString		1615509	0					
ANR	1615562	ArgumentList	state		1615509	1					
ANR	1615563	Argument	state		1615509	0					
ANR	1615564	Identifier	state		1615509	0					
ANR	1615565	ReturnStatement	return false ;	188:2:4757:4769	1615509	1	True				
ANR	1615566	Identifier	false		1615509	0					
ANR	1615567	ReturnStatement	return true ;	190:1:4775:4786	1615509	2	True				
ANR	1615568	Identifier	true		1615509	0					
ANR	1615569	ReturnType	bool		1615509	1					
ANR	1615570	Identifier	HibernationManager :: validateState		1615509	2					
ANR	1615571	ParameterList	HibernatorBase :: SLEEP_STATE state		1615509	3					
ANR	1615572	Parameter	HibernatorBase :: SLEEP_STATE state	177:35:4431:4463	1615509	0	True				
ANR	1615573	ParameterType	HibernatorBase :: SLEEP_STATE		1615509	0					
ANR	1615574	Identifier	state		1615509	1					
ANR	1615575	CFGEntryNode	ENTRY		1615509		True				
ANR	1615576	CFGExitNode	EXIT		1615509		True				
ANR	1615577	Symbol	isStateValid		1615509						
ANR	1615578	Symbol	sleepStateToString		1615509						
ANR	1615579	Symbol	D_ALWAYS		1615509						
ANR	1615580	Symbol	false		1615509						
ANR	1615581	Symbol	true		1615509						
ANR	1615582	Symbol	state		1615509						
ANR	1615583	Symbol	isStateSupported		1615509						
ANR	1615584	Function	HibernationManager :: switchToTargetState	193:0:4791:4888							
ANR	1615585	FunctionDef	HibernationManager :: switchToTargetState ()		1615584	0					
ANR	1615586	CompoundStatement		195:0:4845:4888	1615584	0					
ANR	1615587	ReturnStatement	return switchToState ( m_target_state ) ;	196:1:4848:4886	1615584	0	True				
ANR	1615588	CallExpression	switchToState ( m_target_state )		1615584	0					
ANR	1615589	Callee	switchToState		1615584	0					
ANR	1615590	Identifier	switchToState		1615584	0					
ANR	1615591	ArgumentList	m_target_state		1615584	1					
ANR	1615592	Argument	m_target_state		1615584	0					
ANR	1615593	Identifier	m_target_state		1615584	0					
ANR	1615594	ReturnType	bool		1615584	1					
ANR	1615595	Identifier	HibernationManager :: switchToTargetState		1615584	2					
ANR	1615596	ParameterList			1615584	3					
ANR	1615597	CFGEntryNode	ENTRY		1615584		True				
ANR	1615598	CFGExitNode	EXIT		1615584		True				
ANR	1615599	Symbol	switchToState		1615584						
ANR	1615600	Symbol	m_target_state		1615584						
ANR	1615601	Function	HibernationManager :: switchToState	199:0:4891:5244							
ANR	1615602	FunctionDef	HibernationManager :: switchToState (HibernatorBase :: SLEEP_STATE state)		1615601	0					
ANR	1615603	CompoundStatement		201:0:4968:5244	1615601	0					
ANR	1615604	IfStatement	if ( ! validateState ( state ) )		1615601	0					
ANR	1615605	Condition	! validateState ( state )	202:6:4976:4998	1615601	0	True				
ANR	1615606	UnaryOperationExpression	! validateState ( state )		1615601	0					
ANR	1615607	UnaryOperator	!		1615601	0					
ANR	1615608	CallExpression	validateState ( state )		1615601	1					
ANR	1615609	Callee	validateState		1615601	0					
ANR	1615610	Identifier	validateState		1615601	0					
ANR	1615611	ArgumentList	state		1615601	1					
ANR	1615612	Argument	state		1615601	0					
ANR	1615613	Identifier	state		1615601	0					
ANR	1615614	CompoundStatement		2:32:33:33	1615601	1					
ANR	1615615	ReturnStatement	return false ;	203:2:5006:5018	1615601	0	True				
ANR	1615616	Identifier	false		1615601	0					
ANR	1615617	IfStatement	if ( NULL == m_hibernator )		1615601	1					
ANR	1615618	Condition	NULL == m_hibernator	205:6:5029:5048	1615601	0	True				
ANR	1615619	EqualityExpression	NULL == m_hibernator		1615601	0		==			
ANR	1615620	Identifier	NULL		1615601	0					
ANR	1615621	Identifier	m_hibernator		1615601	1					
ANR	1615622	CompoundStatement		5:29:83:83	1615601	1					
ANR	1615623	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to state %s: no hibernator\\n"" , sleepStateToString ( state ) )"	206:2:5056:5154	1615601	0	True				
ANR	1615624	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to state %s: no hibernator\\n"" , sleepStateToString ( state ) )"		1615601	0					
ANR	1615625	Callee	dprintf		1615601	0					
ANR	1615626	Identifier	dprintf		1615601	0					
ANR	1615627	ArgumentList	D_ALWAYS		1615601	1					
ANR	1615628	Argument	D_ALWAYS		1615601	0					
ANR	1615629	Identifier	D_ALWAYS		1615601	0					
ANR	1615630	Argument	"""Can't switch to state %s: no hibernator\\n"""		1615601	1					
ANR	1615631	PrimaryExpression	"""Can't switch to state %s: no hibernator\\n"""		1615601	0					
ANR	1615632	Argument	sleepStateToString ( state )		1615601	2					
ANR	1615633	CallExpression	sleepStateToString ( state )		1615601	0					
ANR	1615634	Callee	sleepStateToString		1615601	0					
ANR	1615635	Identifier	sleepStateToString		1615601	0					
ANR	1615636	ArgumentList	state		1615601	1					
ANR	1615637	Argument	state		1615601	0					
ANR	1615638	Identifier	state		1615601	0					
ANR	1615639	ReturnStatement	return false ;	208:2:5158:5170	1615601	1	True				
ANR	1615640	Identifier	false		1615601	0					
ANR	1615641	ReturnStatement	"return m_hibernator -> switchToState ( state , m_actual_state , true ) ;"	210:1:5176:5242	1615601	2	True				
ANR	1615642	CallExpression	"m_hibernator -> switchToState ( state , m_actual_state , true )"		1615601	0					
ANR	1615643	Callee	m_hibernator -> switchToState		1615601	0					
ANR	1615644	PtrMemberAccess	m_hibernator -> switchToState		1615601	0					
ANR	1615645	Identifier	m_hibernator		1615601	0					
ANR	1615646	Identifier	switchToState		1615601	1					
ANR	1615647	ArgumentList	state		1615601	1					
ANR	1615648	Argument	state		1615601	0					
ANR	1615649	Identifier	state		1615601	0					
ANR	1615650	Argument	m_actual_state		1615601	1					
ANR	1615651	Identifier	m_actual_state		1615601	0					
ANR	1615652	Argument	true		1615601	2					
ANR	1615653	Identifier	true		1615601	0					
ANR	1615654	ReturnType	bool		1615601	1					
ANR	1615655	Identifier	HibernationManager :: switchToState		1615601	2					
ANR	1615656	ParameterList	HibernatorBase :: SLEEP_STATE state		1615601	3					
ANR	1615657	Parameter	HibernatorBase :: SLEEP_STATE state	200:36:4932:4964	1615601	0	True				
ANR	1615658	ParameterType	HibernatorBase :: SLEEP_STATE		1615601	0					
ANR	1615659	Identifier	state		1615601	1					
ANR	1615660	CFGEntryNode	ENTRY		1615601		True				
ANR	1615661	CFGExitNode	EXIT		1615601		True				
ANR	1615662	Symbol	NULL		1615601						
ANR	1615663	Symbol	m_hibernator -> switchToState		1615601						
ANR	1615664	Symbol	* m_hibernator		1615601						
ANR	1615665	Symbol	m_actual_state		1615601						
ANR	1615666	Symbol	sleepStateToString		1615601						
ANR	1615667	Symbol	false		1615601						
ANR	1615668	Symbol	D_ALWAYS		1615601						
ANR	1615669	Symbol	true		1615601						
ANR	1615670	Symbol	state		1615601						
ANR	1615671	Symbol	validateState		1615601						
ANR	1615672	Symbol	m_hibernator		1615601						
ANR	1615673	Function	HibernationManager :: switchToState	213:0:5247:5550							
ANR	1615674	FunctionDef	HibernationManager :: switchToState (const char * name)		1615673	0					
ANR	1615675	CompoundStatement		215:0:5307:5550	1615673	0					
ANR	1615676	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> stringToSleepState ( name ) ;	216:1:5310:5388	1615673	0	True				
ANR	1615677	IdentifierDecl	state = m_hibernator -> stringToSleepState ( name )		1615673	0					
ANR	1615678	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		1615673	0					
ANR	1615679	Identifier	state		1615673	1					
ANR	1615680	AssignmentExpression	state = m_hibernator -> stringToSleepState ( name )		1615673	2		=			
ANR	1615681	Identifier	state		1615673	0					
ANR	1615682	CallExpression	m_hibernator -> stringToSleepState ( name )		1615673	1					
ANR	1615683	Callee	m_hibernator -> stringToSleepState		1615673	0					
ANR	1615684	PtrMemberAccess	m_hibernator -> stringToSleepState		1615673	0					
ANR	1615685	Identifier	m_hibernator		1615673	0					
ANR	1615686	Identifier	stringToSleepState		1615673	1					
ANR	1615687	ArgumentList	name		1615673	1					
ANR	1615688	Argument	name		1615673	0					
ANR	1615689	Identifier	name		1615673	0					
ANR	1615690	IfStatement	if ( state == HibernatorBase :: NONE )		1615673	1					
ANR	1615691	Condition	state == HibernatorBase :: NONE	218:6:5396:5424	1615673	0	True				
ANR	1615692	EqualityExpression	state == HibernatorBase :: NONE		1615673	0		==			
ANR	1615693	Identifier	state		1615673	0					
ANR	1615694	Identifier	HibernatorBase :: NONE		1615673	1					
ANR	1615695	CompoundStatement		4:38:120:120	1615673	1					
ANR	1615696	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid state '%s'\\n"" , name )"	219:2:5432:5497	1615673	0	True				
ANR	1615697	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid state '%s'\\n"" , name )"		1615673	0					
ANR	1615698	Callee	dprintf		1615673	0					
ANR	1615699	Identifier	dprintf		1615673	0					
ANR	1615700	ArgumentList	D_ALWAYS		1615673	1					
ANR	1615701	Argument	D_ALWAYS		1615673	0					
ANR	1615702	Identifier	D_ALWAYS		1615673	0					
ANR	1615703	Argument	"""Can't switch to invalid state '%s'\\n"""		1615673	1					
ANR	1615704	PrimaryExpression	"""Can't switch to invalid state '%s'\\n"""		1615673	0					
ANR	1615705	Argument	name		1615673	2					
ANR	1615706	Identifier	name		1615673	0					
ANR	1615707	ReturnStatement	return false ;	220:2:5501:5513	1615673	1	True				
ANR	1615708	Identifier	false		1615673	0					
ANR	1615709	ReturnStatement	return switchToState ( state ) ;	222:1:5519:5548	1615673	2	True				
ANR	1615710	CallExpression	switchToState ( state )		1615673	0					
ANR	1615711	Callee	switchToState		1615673	0					
ANR	1615712	Identifier	switchToState		1615673	0					
ANR	1615713	ArgumentList	state		1615673	1					
ANR	1615714	Argument	state		1615673	0					
ANR	1615715	Identifier	state		1615673	0					
ANR	1615716	ReturnType	bool		1615673	1					
ANR	1615717	Identifier	HibernationManager :: switchToState		1615673	2					
ANR	1615718	ParameterList	const char * name		1615673	3					
ANR	1615719	Parameter	const char * name	214:36:5288:5303	1615673	0	True				
ANR	1615720	ParameterType	const char *		1615673	0					
ANR	1615721	Identifier	name		1615673	1					
ANR	1615722	CFGEntryNode	ENTRY		1615673		True				
ANR	1615723	CFGExitNode	EXIT		1615673		True				
ANR	1615724	Symbol	switchToState		1615673						
ANR	1615725	Symbol	* m_hibernator		1615673						
ANR	1615726	Symbol	name		1615673						
ANR	1615727	Symbol	D_ALWAYS		1615673						
ANR	1615728	Symbol	false		1615673						
ANR	1615729	Symbol	m_hibernator -> stringToSleepState		1615673						
ANR	1615730	Symbol	state		1615673						
ANR	1615731	Symbol	m_hibernator		1615673						
ANR	1615732	Symbol	HibernatorBase :: NONE		1615673						
ANR	1615733	Function	HibernationManager :: switchToLevel	225:0:5553:5848							
ANR	1615734	FunctionDef	HibernationManager :: switchToLevel (int level)		1615733	0					
ANR	1615735	CompoundStatement		227:0:5606:5848	1615733	0					
ANR	1615736	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE state = m_hibernator -> intToSleepState ( level ) ;	228:1:5609:5685	1615733	0	True				
ANR	1615737	IdentifierDecl	state = m_hibernator -> intToSleepState ( level )		1615733	0					
ANR	1615738	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		1615733	0					
ANR	1615739	Identifier	state		1615733	1					
ANR	1615740	AssignmentExpression	state = m_hibernator -> intToSleepState ( level )		1615733	2		=			
ANR	1615741	Identifier	state		1615733	0					
ANR	1615742	CallExpression	m_hibernator -> intToSleepState ( level )		1615733	1					
ANR	1615743	Callee	m_hibernator -> intToSleepState		1615733	0					
ANR	1615744	PtrMemberAccess	m_hibernator -> intToSleepState		1615733	0					
ANR	1615745	Identifier	m_hibernator		1615733	0					
ANR	1615746	Identifier	intToSleepState		1615733	1					
ANR	1615747	ArgumentList	level		1615733	1					
ANR	1615748	Argument	level		1615733	0					
ANR	1615749	Identifier	level		1615733	0					
ANR	1615750	IfStatement	if ( state == HibernatorBase :: NONE )		1615733	1					
ANR	1615751	Condition	state == HibernatorBase :: NONE	230:6:5693:5721	1615733	0	True				
ANR	1615752	EqualityExpression	state == HibernatorBase :: NONE		1615733	0		==			
ANR	1615753	Identifier	state		1615733	0					
ANR	1615754	Identifier	HibernatorBase :: NONE		1615733	1					
ANR	1615755	CompoundStatement		4:38:118:118	1615733	1					
ANR	1615756	ExpressionStatement	"dprintf ( D_ALWAYS , ""Can't switch to invalid level '%d'\\n"" , level )"	231:2:5729:5795	1615733	0	True				
ANR	1615757	CallExpression	"dprintf ( D_ALWAYS , ""Can't switch to invalid level '%d'\\n"" , level )"		1615733	0					
ANR	1615758	Callee	dprintf		1615733	0					
ANR	1615759	Identifier	dprintf		1615733	0					
ANR	1615760	ArgumentList	D_ALWAYS		1615733	1					
ANR	1615761	Argument	D_ALWAYS		1615733	0					
ANR	1615762	Identifier	D_ALWAYS		1615733	0					
ANR	1615763	Argument	"""Can't switch to invalid level '%d'\\n"""		1615733	1					
ANR	1615764	PrimaryExpression	"""Can't switch to invalid level '%d'\\n"""		1615733	0					
ANR	1615765	Argument	level		1615733	2					
ANR	1615766	Identifier	level		1615733	0					
ANR	1615767	ReturnStatement	return false ;	232:2:5799:5811	1615733	1	True				
ANR	1615768	Identifier	false		1615733	0					
ANR	1615769	ReturnStatement	return switchToState ( state ) ;	234:1:5817:5846	1615733	2	True				
ANR	1615770	CallExpression	switchToState ( state )		1615733	0					
ANR	1615771	Callee	switchToState		1615733	0					
ANR	1615772	Identifier	switchToState		1615733	0					
ANR	1615773	ArgumentList	state		1615733	1					
ANR	1615774	Argument	state		1615733	0					
ANR	1615775	Identifier	state		1615733	0					
ANR	1615776	ReturnType	bool		1615733	1					
ANR	1615777	Identifier	HibernationManager :: switchToLevel		1615733	2					
ANR	1615778	ParameterList	int level		1615733	3					
ANR	1615779	Parameter	int level	226:36:5594:5602	1615733	0	True				
ANR	1615780	ParameterType	int		1615733	0					
ANR	1615781	Identifier	level		1615733	1					
ANR	1615782	CFGEntryNode	ENTRY		1615733		True				
ANR	1615783	CFGExitNode	EXIT		1615733		True				
ANR	1615784	Symbol	switchToState		1615733						
ANR	1615785	Symbol	m_hibernator -> intToSleepState		1615733						
ANR	1615786	Symbol	* m_hibernator		1615733						
ANR	1615787	Symbol	level		1615733						
ANR	1615788	Symbol	D_ALWAYS		1615733						
ANR	1615789	Symbol	false		1615733						
ANR	1615790	Symbol	state		1615733						
ANR	1615791	Symbol	m_hibernator		1615733						
ANR	1615792	Symbol	HibernatorBase :: NONE		1615733						
ANR	1615793	Function	HibernationManager :: canHibernate	237:0:5851:6027							
ANR	1615794	FunctionDef	HibernationManager :: canHibernate ()		1615793	0					
ANR	1615795	CompoundStatement		239:0:5902:6027	1615793	0					
ANR	1615796	IdentifierDeclStatement	bool can = false ;	240:1:5905:5921	1615793	0	True				
ANR	1615797	IdentifierDecl	can = false		1615793	0					
ANR	1615798	IdentifierDeclType	bool		1615793	0					
ANR	1615799	Identifier	can		1615793	1					
ANR	1615800	AssignmentExpression	can = false		1615793	2		=			
ANR	1615801	Identifier	false		1615793	0					
ANR	1615802	Identifier	false		1615793	1					
ANR	1615803	IfStatement	if ( m_hibernator )		1615793	1					
ANR	1615804	Condition	m_hibernator	241:6:5930:5941	1615793	0	True				
ANR	1615805	Identifier	m_hibernator		1615793	0					
ANR	1615806	CompoundStatement		3:21:42:42	1615793	1					
ANR	1615807	ExpressionStatement	can = ( HibernatorBase :: NONE != m_hibernator -> getStates ( ) )	242:2:5949:6009	1615793	0	True				
ANR	1615808	AssignmentExpression	can = ( HibernatorBase :: NONE != m_hibernator -> getStates ( ) )		1615793	0		=			
ANR	1615809	Identifier	can		1615793	0					
ANR	1615810	EqualityExpression	HibernatorBase :: NONE != m_hibernator -> getStates ( )		1615793	1		!=			
ANR	1615811	Identifier	HibernatorBase :: NONE		1615793	0					
ANR	1615812	CallExpression	m_hibernator -> getStates ( )		1615793	1					
ANR	1615813	Callee	m_hibernator -> getStates		1615793	0					
ANR	1615814	PtrMemberAccess	m_hibernator -> getStates		1615793	0					
ANR	1615815	Identifier	m_hibernator		1615793	0					
ANR	1615816	Identifier	getStates		1615793	1					
ANR	1615817	ArgumentList			1615793	1					
ANR	1615818	ReturnStatement	return can ;	244:1:6015:6025	1615793	2	True				
ANR	1615819	Identifier	can		1615793	0					
ANR	1615820	ReturnType	bool		1615793	1					
ANR	1615821	Identifier	HibernationManager :: canHibernate		1615793	2					
ANR	1615822	ParameterList			1615793	3					
ANR	1615823	CFGEntryNode	ENTRY		1615793		True				
ANR	1615824	CFGExitNode	EXIT		1615793		True				
ANR	1615825	Symbol	can		1615793						
ANR	1615826	Symbol	* m_hibernator		1615793						
ANR	1615827	Symbol	false		1615793						
ANR	1615828	Symbol	m_hibernator -> getStates		1615793						
ANR	1615829	Symbol	m_hibernator		1615793						
ANR	1615830	Symbol	HibernatorBase :: NONE		1615793						
ANR	1615831	Function	HibernationManager :: canWake	247:0:6030:6254							
ANR	1615832	FunctionDef	HibernationManager :: canWake ()		1615831	0					
ANR	1615833	CompoundStatement		249:0:6076:6254	1615831	0					
ANR	1615834	IdentifierDeclStatement	bool can = false ;	250:4:6082:6098	1615831	0	True				
ANR	1615835	IdentifierDecl	can = false		1615831	0					
ANR	1615836	IdentifierDeclType	bool		1615831	0					
ANR	1615837	Identifier	can		1615831	1					
ANR	1615838	AssignmentExpression	can = false		1615831	2		=			
ANR	1615839	Identifier	false		1615831	0					
ANR	1615840	Identifier	false		1615831	1					
ANR	1615841	ExpressionStatement	can = ( ( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) ) )	252:1:6102:6236	1615831	1	True				
ANR	1615842	AssignmentExpression	can = ( ( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) ) )		1615831	0		=			
ANR	1615843	Identifier	can		1615831	0					
ANR	1615844	AndExpression	( NULL != m_primary_adapter ) && ( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) )		1615831	1		&&			
ANR	1615845	EqualityExpression	NULL != m_primary_adapter		1615831	0		!=			
ANR	1615846	Identifier	NULL		1615831	0					
ANR	1615847	Identifier	m_primary_adapter		1615831	1					
ANR	1615848	AndExpression	( m_primary_adapter -> exists ( ) ) && ( m_primary_adapter -> isWakeable ( ) )		1615831	1		&&			
ANR	1615849	CallExpression	m_primary_adapter -> exists ( )		1615831	0					
ANR	1615850	Callee	m_primary_adapter -> exists		1615831	0					
ANR	1615851	PtrMemberAccess	m_primary_adapter -> exists		1615831	0					
ANR	1615852	Identifier	m_primary_adapter		1615831	0					
ANR	1615853	Identifier	exists		1615831	1					
ANR	1615854	ArgumentList			1615831	1					
ANR	1615855	CallExpression	m_primary_adapter -> isWakeable ( )		1615831	1					
ANR	1615856	Callee	m_primary_adapter -> isWakeable		1615831	0					
ANR	1615857	PtrMemberAccess	m_primary_adapter -> isWakeable		1615831	0					
ANR	1615858	Identifier	m_primary_adapter		1615831	0					
ANR	1615859	Identifier	isWakeable		1615831	1					
ANR	1615860	ArgumentList			1615831	1					
ANR	1615861	ReturnStatement	return can ;	255:4:6242:6252	1615831	2	True				
ANR	1615862	Identifier	can		1615831	0					
ANR	1615863	ReturnType	bool		1615831	1					
ANR	1615864	Identifier	HibernationManager :: canWake		1615831	2					
ANR	1615865	ParameterList			1615831	3					
ANR	1615866	CFGEntryNode	ENTRY		1615831		True				
ANR	1615867	CFGExitNode	EXIT		1615831		True				
ANR	1615868	Symbol	can		1615831						
ANR	1615869	Symbol	NULL		1615831						
ANR	1615870	Symbol	* m_primary_adapter		1615831						
ANR	1615871	Symbol	false		1615831						
ANR	1615872	Symbol	m_primary_adapter -> exists		1615831						
ANR	1615873	Symbol	m_primary_adapter		1615831						
ANR	1615874	Symbol	m_primary_adapter -> isWakeable		1615831						
ANR	1615875	Function	HibernationManager :: wantsHibernate	258:0:6257:6436							
ANR	1615876	FunctionDef	HibernationManager :: wantsHibernate ()		1615875	0					
ANR	1615877	CompoundStatement		260:0:6310:6436	1615875	0					
ANR	1615878	IdentifierDeclStatement	bool does = false ;	261:4:6316:6333	1615875	0	True				
ANR	1615879	IdentifierDecl	does = false		1615875	0					
ANR	1615880	IdentifierDeclType	bool		1615875	0					
ANR	1615881	Identifier	does		1615875	1					
ANR	1615882	AssignmentExpression	does = false		1615875	2		=			
ANR	1615883	Identifier	false		1615875	0					
ANR	1615884	Identifier	false		1615875	1					
ANR	1615885	IfStatement	if ( m_hibernator )		1615875	1					
ANR	1615886	Condition	m_hibernator	262:6:6341:6352	1615875	0	True				
ANR	1615887	Identifier	m_hibernator		1615875	0					
ANR	1615888	CompoundStatement		3:21:45:45	1615875	1					
ANR	1615889	IfStatement	if ( canHibernate ( ) )		1615875	0					
ANR	1615890	Condition	canHibernate ( )	263:7:6365:6379	1615875	0	True				
ANR	1615891	CallExpression	canHibernate ( )		1615875	0					
ANR	1615892	Callee	canHibernate		1615875	0					
ANR	1615893	Identifier	canHibernate		1615875	0					
ANR	1615894	ArgumentList			1615875	1					
ANR	1615895	CompoundStatement		4:25:72:72	1615875	1					
ANR	1615896	ExpressionStatement	does = ( m_interval > 0 )	264:3:6388:6413	1615875	0	True				
ANR	1615897	AssignmentExpression	does = ( m_interval > 0 )		1615875	0		=			
ANR	1615898	Identifier	does		1615875	0					
ANR	1615899	RelationalExpression	m_interval > 0		1615875	1		>			
ANR	1615900	Identifier	m_interval		1615875	0					
ANR	1615901	PrimaryExpression	0		1615875	1					
ANR	1615902	ReturnStatement	return does ;	267:1:6423:6434	1615875	2	True				
ANR	1615903	Identifier	does		1615875	0					
ANR	1615904	ReturnType	bool		1615875	1					
ANR	1615905	Identifier	HibernationManager :: wantsHibernate		1615875	2					
ANR	1615906	ParameterList			1615875	3					
ANR	1615907	CFGEntryNode	ENTRY		1615875		True				
ANR	1615908	CFGExitNode	EXIT		1615875		True				
ANR	1615909	Symbol	does		1615875						
ANR	1615910	Symbol	false		1615875						
ANR	1615911	Symbol	canHibernate		1615875						
ANR	1615912	Symbol	m_interval		1615875						
ANR	1615913	Symbol	m_hibernator		1615875						
ANR	1615914	Function	HibernationManager :: getCheckInterval	270:0:6439:6515							
ANR	1615915	FunctionDef	HibernationManager :: getCheckInterval ()		1615914	0					
ANR	1615916	CompoundStatement		271:0:6493:6515	1615914	0					
ANR	1615917	ReturnStatement	return m_interval ;	272:1:6496:6513	1615914	0	True				
ANR	1615918	Identifier	m_interval		1615914	0					
ANR	1615919	ReturnType	int		1615914	1					
ANR	1615920	Identifier	HibernationManager :: getCheckInterval		1615914	2					
ANR	1615921	ParameterList			1615914	3					
ANR	1615922	CFGEntryNode	ENTRY		1615914		True				
ANR	1615923	CFGExitNode	EXIT		1615914		True				
ANR	1615924	Symbol	m_interval		1615914						
ANR	1615925	Function	HibernationManager :: getHibernationMethod	275:0:6518:6668							
ANR	1615926	FunctionDef	HibernationManager :: getHibernationMethod ()		1615925	0					
ANR	1615927	CompoundStatement		277:0:6587:6668	1615925	0					
ANR	1615928	IfStatement	if ( m_hibernator )		1615925	0					
ANR	1615929	Condition	m_hibernator	278:6:6595:6606	1615925	0	True				
ANR	1615930	Identifier	m_hibernator		1615925	0					
ANR	1615931	CompoundStatement		2:21:22:22	1615925	1					
ANR	1615932	ReturnStatement	return m_hibernator -> getMethod ( ) ;	279:2:6614:6647	1615925	0	True				
ANR	1615933	CallExpression	m_hibernator -> getMethod ( )		1615925	0					
ANR	1615934	Callee	m_hibernator -> getMethod		1615925	0					
ANR	1615935	PtrMemberAccess	m_hibernator -> getMethod		1615925	0					
ANR	1615936	Identifier	m_hibernator		1615925	0					
ANR	1615937	Identifier	getMethod		1615925	1					
ANR	1615938	ArgumentList			1615925	1					
ANR	1615939	ReturnStatement	"return ""NONE"" ;"	281:1:6653:6666	1615925	1	True				
ANR	1615940	PrimaryExpression	"""NONE"""		1615925	0					
ANR	1615941	ReturnType	const char *		1615925	1					
ANR	1615942	Identifier	HibernationManager :: getHibernationMethod		1615925	2					
ANR	1615943	ParameterList			1615925	3					
ANR	1615944	CFGEntryNode	ENTRY		1615925		True				
ANR	1615945	CFGExitNode	EXIT		1615925		True				
ANR	1615946	Symbol	m_hibernator -> getMethod		1615925						
ANR	1615947	Symbol	* m_hibernator		1615925						
ANR	1615948	Symbol	m_hibernator		1615925						
ANR	1615949	Function	HibernationManager :: publish	284:0:6671:7539							
ANR	1615950	FunctionDef	HibernationManager :: publish (ClassAd & ad)		1615949	0					
ANR	1615951	CompoundStatement		286:0:6720:7539	1615949	0					
ANR	1615952	IdentifierDeclStatement	int level = sleepStateToInt ( m_target_state ) ;	291:1:6957:7002	1615949	0	True				
ANR	1615953	IdentifierDecl	level = sleepStateToInt ( m_target_state )		1615949	0					
ANR	1615954	IdentifierDeclType	int		1615949	0					
ANR	1615955	Identifier	level		1615949	1					
ANR	1615956	AssignmentExpression	level = sleepStateToInt ( m_target_state )		1615949	2		=			
ANR	1615957	Identifier	level		1615949	0					
ANR	1615958	CallExpression	sleepStateToInt ( m_target_state )		1615949	1					
ANR	1615959	Callee	sleepStateToInt		1615949	0					
ANR	1615960	Identifier	sleepStateToInt		1615949	0					
ANR	1615961	ArgumentList	m_target_state		1615949	1					
ANR	1615962	Argument	m_target_state		1615949	0					
ANR	1615963	Identifier	m_target_state		1615949	0					
ANR	1615964	IdentifierDeclStatement	const char * state = sleepStateToString ( m_target_state ) ;	292:1:7005:7061	1615949	1	True				
ANR	1615965	IdentifierDecl	* state = sleepStateToString ( m_target_state )		1615949	0					
ANR	1615966	IdentifierDeclType	const char *		1615949	0					
ANR	1615967	Identifier	state		1615949	1					
ANR	1615968	AssignmentExpression	* state = sleepStateToString ( m_target_state )		1615949	2		=			
ANR	1615969	Identifier	state		1615949	0					
ANR	1615970	CallExpression	sleepStateToString ( m_target_state )		1615949	1					
ANR	1615971	Callee	sleepStateToString		1615949	0					
ANR	1615972	Identifier	sleepStateToString		1615949	0					
ANR	1615973	ArgumentList	m_target_state		1615949	1					
ANR	1615974	Argument	m_target_state		1615949	0					
ANR	1615975	Identifier	m_target_state		1615949	0					
ANR	1615976	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_LEVEL , level )"	293:4:7067:7110	1615949	2	True				
ANR	1615977	CallExpression	"ad . Assign ( ATTR_HIBERNATION_LEVEL , level )"		1615949	0					
ANR	1615978	Callee	ad . Assign		1615949	0					
ANR	1615979	MemberAccess	ad . Assign		1615949	0					
ANR	1615980	Identifier	ad		1615949	0					
ANR	1615981	Identifier	Assign		1615949	1					
ANR	1615982	ArgumentList	ATTR_HIBERNATION_LEVEL		1615949	1					
ANR	1615983	Argument	ATTR_HIBERNATION_LEVEL		1615949	0					
ANR	1615984	Identifier	ATTR_HIBERNATION_LEVEL		1615949	0					
ANR	1615985	Argument	level		1615949	1					
ANR	1615986	Identifier	level		1615949	0					
ANR	1615987	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_STATE , state )"	294:4:7116:7159	1615949	3	True				
ANR	1615988	CallExpression	"ad . Assign ( ATTR_HIBERNATION_STATE , state )"		1615949	0					
ANR	1615989	Callee	ad . Assign		1615949	0					
ANR	1615990	MemberAccess	ad . Assign		1615949	0					
ANR	1615991	Identifier	ad		1615949	0					
ANR	1615992	Identifier	Assign		1615949	1					
ANR	1615993	ArgumentList	ATTR_HIBERNATION_STATE		1615949	1					
ANR	1615994	Argument	ATTR_HIBERNATION_STATE		1615949	0					
ANR	1615995	Identifier	ATTR_HIBERNATION_STATE		1615949	0					
ANR	1615996	Argument	state		1615949	1					
ANR	1615997	Identifier	state		1615949	0					
ANR	1615998	IdentifierDeclStatement	MyString states ;	296:1:7163:7178	1615949	4	True				
ANR	1615999	IdentifierDecl	states		1615949	0					
ANR	1616000	IdentifierDeclType	MyString		1615949	0					
ANR	1616001	Identifier	states		1615949	1					
ANR	1616002	ExpressionStatement	getSupportedStates ( states )	297:1:7181:7209	1615949	5	True				
ANR	1616003	CallExpression	getSupportedStates ( states )		1615949	0					
ANR	1616004	Callee	getSupportedStates		1615949	0					
ANR	1616005	Identifier	getSupportedStates		1615949	0					
ANR	1616006	ArgumentList	states		1615949	1					
ANR	1616007	Argument	states		1615949	0					
ANR	1616008	Identifier	states		1615949	0					
ANR	1616009	ExpressionStatement	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"	298:4:7215:7270	1615949	6	True				
ANR	1616010	CallExpression	"ad . Assign ( ATTR_HIBERNATION_SUPPORTED_STATES , states )"		1615949	0					
ANR	1616011	Callee	ad . Assign		1615949	0					
ANR	1616012	MemberAccess	ad . Assign		1615949	0					
ANR	1616013	Identifier	ad		1615949	0					
ANR	1616014	Identifier	Assign		1615949	1					
ANR	1616015	ArgumentList	ATTR_HIBERNATION_SUPPORTED_STATES		1615949	1					
ANR	1616016	Argument	ATTR_HIBERNATION_SUPPORTED_STATES		1615949	0					
ANR	1616017	Identifier	ATTR_HIBERNATION_SUPPORTED_STATES		1615949	0					
ANR	1616018	Argument	states		1615949	1					
ANR	1616019	Identifier	states		1615949	0					
ANR	1616020	ExpressionStatement	"ad . Assign ( ATTR_CAN_HIBERNATE , canHibernate ( ) )"	301:4:7346:7395	1615949	7	True				
ANR	1616021	CallExpression	"ad . Assign ( ATTR_CAN_HIBERNATE , canHibernate ( ) )"		1615949	0					
ANR	1616022	Callee	ad . Assign		1615949	0					
ANR	1616023	MemberAccess	ad . Assign		1615949	0					
ANR	1616024	Identifier	ad		1615949	0					
ANR	1616025	Identifier	Assign		1615949	1					
ANR	1616026	ArgumentList	ATTR_CAN_HIBERNATE		1615949	1					
ANR	1616027	Argument	ATTR_CAN_HIBERNATE		1615949	0					
ANR	1616028	Identifier	ATTR_CAN_HIBERNATE		1615949	0					
ANR	1616029	Argument	canHibernate ( )		1615949	1					
ANR	1616030	CallExpression	canHibernate ( )		1615949	0					
ANR	1616031	Callee	canHibernate		1615949	0					
ANR	1616032	Identifier	canHibernate		1615949	0					
ANR	1616033	ArgumentList			1615949	1					
ANR	1616034	IfStatement	if ( m_primary_adapter )		1615949	8					
ANR	1616035	Condition	m_primary_adapter	305:6:7478:7494	1615949	0	True				
ANR	1616036	Identifier	m_primary_adapter		1615949	0					
ANR	1616037	CompoundStatement		20:26:777:777	1615949	1					
ANR	1616038	ExpressionStatement	m_primary_adapter -> publish ( ad )	306:2:7502:7534	1615949	0	True				
ANR	1616039	CallExpression	m_primary_adapter -> publish ( ad )		1615949	0					
ANR	1616040	Callee	m_primary_adapter -> publish		1615949	0					
ANR	1616041	PtrMemberAccess	m_primary_adapter -> publish		1615949	0					
ANR	1616042	Identifier	m_primary_adapter		1615949	0					
ANR	1616043	Identifier	publish		1615949	1					
ANR	1616044	ArgumentList	ad		1615949	1					
ANR	1616045	Argument	ad		1615949	0					
ANR	1616046	Identifier	ad		1615949	0					
ANR	1616047	ReturnType	void		1615949	1					
ANR	1616048	Identifier	HibernationManager :: publish		1615949	2					
ANR	1616049	ParameterList	ClassAd & ad		1615949	3					
ANR	1616050	Parameter	ClassAd & ad	285:30:6706:6716	1615949	0	True				
ANR	1616051	ParameterType	ClassAd &		1615949	0					
ANR	1616052	Identifier	ad		1615949	1					
ANR	1616053	CFGEntryNode	ENTRY		1615949		True				
ANR	1616054	CFGExitNode	EXIT		1615949		True				
ANR	1616055	Symbol	sleepStateToInt		1615949						
ANR	1616056	Symbol	ad		1615949						
ANR	1616057	Symbol	level		1615949						
ANR	1616058	Symbol	ATTR_HIBERNATION_SUPPORTED_STATES		1615949						
ANR	1616059	Symbol	m_primary_adapter		1615949						
ANR	1616060	Symbol	ATTR_HIBERNATION_LEVEL		1615949						
ANR	1616061	Symbol	states		1615949						
ANR	1616062	Symbol	ATTR_CAN_HIBERNATE		1615949						
ANR	1616063	Symbol	ATTR_HIBERNATION_STATE		1615949						
ANR	1616064	Symbol	m_target_state		1615949						
ANR	1616065	Symbol	sleepStateToString		1615949						
ANR	1616066	Symbol	canHibernate		1615949						
ANR	1616067	Symbol	state		1615949						
