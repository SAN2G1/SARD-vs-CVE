command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5068486	File	data/converged/CVE-2011-4930_htcondor/src_deployment_tools_uniq_pid_tool_main.cpp								
ANR	5068487	DeclStmt									
ANR	5068488	Decl							const char	const char *	PID_FILE_OPT
ANR	5068489	DeclStmt									
ANR	5068490	Decl							const char	const char *	BLOCK_OPT
ANR	5068491	DeclStmt									
ANR	5068492	Decl							const char	const char *	NO_BLOCK_OPT
ANR	5068493	DeclStmt									
ANR	5068494	Decl							const char	const char *	PRECISION_OPT
ANR	5068495	DeclStmt									
ANR	5068496	Decl							const char	const char *	DEFAULT_PID_FILE
ANR	5068497	DeclStmt									
ANR	5068498	Decl							const char	const char *	MIDWIFE_CMD
ANR	5068499	DeclStmt									
ANR	5068500	Decl							const char	const char *	MIDWIFE_USAGE
ANR	5068501	DeclStmt									
ANR	5068502	Decl							const char	const char *	UNDERTAKER_CMD
ANR	5068503	DeclStmt									
ANR	5068504	Decl							const int	const int	UNDERTAKER_FAILURE
ANR	5068505	DeclStmt									
ANR	5068506	Decl							const int	const int	PROCESS_DEAD
ANR	5068507	DeclStmt									
ANR	5068508	Decl							const int	const int	PROCESS_ALIVE
ANR	5068509	DeclStmt									
ANR	5068510	Decl							const int	const int	PROCESS_UNCERTAIN
ANR	5068511	DeclStmt									
ANR	5068512	Decl							FILE	FILE * ( const char * pidfile )	createPidFile
ANR	5068513	DeclStmt									
ANR	5068514	Decl							int	"int ( int argc , char * argv [ ] , const char * pidfile , bool blockflag )"	undertaker_main
ANR	5068515	DeclStmt									
ANR	5068516	Decl							int	"int ( const char * pidfile , pid_t & pid )"	isAliveFromFile
ANR	5068517	DeclStmt									
ANR	5068518	Decl							int	int ( ProcessId & procId )	blockUntilDead
ANR	5068519	DeclStmt									
ANR	5068520	Decl							int	int ( pid_t pid )	handleUncertain
ANR	5068521	DeclStmt									
ANR	5068522	Decl							void	"void ( int status , int pid , char * error_str )"	procapi_perror
ANR	5068523	Function	main	72:0:2515:5013							
ANR	5068524	FunctionDef	"main (int argc , char * argv [ ])"		5068523	0					
ANR	5068525	CompoundStatement		74:0:2549:5013	5068523	0					
ANR	5068526	IdentifierDeclStatement	char * command = argv [ 0 ] ;	78:1:2646:2669	5068523	0	True				
ANR	5068527	IdentifierDecl	* command = argv [ 0 ]		5068523	0					
ANR	5068528	IdentifierDeclType	char *		5068523	0					
ANR	5068529	Identifier	command		5068523	1					
ANR	5068530	AssignmentExpression	* command = argv [ 0 ]		5068523	2		=			
ANR	5068531	Identifier	command		5068523	0					
ANR	5068532	ArrayIndexing	argv [ 0 ]		5068523	1					
ANR	5068533	Identifier	argv		5068523	0					
ANR	5068534	PrimaryExpression	0		5068523	1					
ANR	5068535	ExpressionStatement	argc --	79:1:2672:2678	5068523	1	True				
ANR	5068536	PostIncDecOperationExpression	argc --		5068523	0					
ANR	5068537	Identifier	argc		5068523	0					
ANR	5068538	IncDec	--		5068523	1					
ANR	5068539	ExpressionStatement	argv ++	80:1:2681:2687	5068523	2	True				
ANR	5068540	PostIncDecOperationExpression	argv ++		5068523	0					
ANR	5068541	Identifier	argv		5068523	0					
ANR	5068542	IncDec	++		5068523	1					
ANR	5068543	IfStatement	"if ( strchr ( command , DIR_DELIM_CHAR ) != NULL )"		5068523	3					
ANR	5068544	Condition	"strchr ( command , DIR_DELIM_CHAR ) != NULL"	83:5:2750:2788	5068523	0	True				
ANR	5068545	EqualityExpression	"strchr ( command , DIR_DELIM_CHAR ) != NULL"		5068523	0		!=			
ANR	5068546	CallExpression	"strchr ( command , DIR_DELIM_CHAR )"		5068523	0					
ANR	5068547	Callee	strchr		5068523	0					
ANR	5068548	Identifier	strchr		5068523	0					
ANR	5068549	ArgumentList	command		5068523	1					
ANR	5068550	Argument	command		5068523	0					
ANR	5068551	Identifier	command		5068523	0					
ANR	5068552	Argument	DIR_DELIM_CHAR		5068523	1					
ANR	5068553	Identifier	DIR_DELIM_CHAR		5068523	0					
ANR	5068554	Identifier	NULL		5068523	1					
ANR	5068555	CompoundStatement		10:46:241:241	5068523	1					
ANR	5068556	ExpressionStatement	"command = strrchr ( command , DIR_DELIM_CHAR )"	84:2:2795:2839	5068523	0	True				
ANR	5068557	AssignmentExpression	"command = strrchr ( command , DIR_DELIM_CHAR )"		5068523	0		=			
ANR	5068558	Identifier	command		5068523	0					
ANR	5068559	CallExpression	"strrchr ( command , DIR_DELIM_CHAR )"		5068523	1					
ANR	5068560	Callee	strrchr		5068523	0					
ANR	5068561	Identifier	strrchr		5068523	0					
ANR	5068562	ArgumentList	command		5068523	1					
ANR	5068563	Argument	command		5068523	0					
ANR	5068564	Identifier	command		5068523	0					
ANR	5068565	Argument	DIR_DELIM_CHAR		5068523	1					
ANR	5068566	Identifier	DIR_DELIM_CHAR		5068523	0					
ANR	5068567	ExpressionStatement	command ++	85:2:2843:2852	5068523	1	True				
ANR	5068568	PostIncDecOperationExpression	command ++		5068523	0					
ANR	5068569	Identifier	command		5068523	0					
ANR	5068570	IncDec	++		5068523	1					
ANR	5068571	IdentifierDeclStatement	const char * pidfile = DEFAULT_PID_FILE ;	89:1:2883:2921	5068523	4	True				
ANR	5068572	IdentifierDecl	* pidfile = DEFAULT_PID_FILE		5068523	0					
ANR	5068573	IdentifierDeclType	const char *		5068523	0					
ANR	5068574	Identifier	pidfile		5068523	1					
ANR	5068575	AssignmentExpression	* pidfile = DEFAULT_PID_FILE		5068523	2		=			
ANR	5068576	Identifier	DEFAULT_PID_FILE		5068523	0					
ANR	5068577	Identifier	DEFAULT_PID_FILE		5068523	1					
ANR	5068578	IdentifierDeclStatement	int * precision_range = NULL ;	90:1:2924:2951	5068523	5	True				
ANR	5068579	IdentifierDecl	* precision_range = NULL		5068523	0					
ANR	5068580	IdentifierDeclType	int *		5068523	0					
ANR	5068581	Identifier	precision_range		5068523	1					
ANR	5068582	AssignmentExpression	* precision_range = NULL		5068523	2		=			
ANR	5068583	Identifier	NULL		5068523	0					
ANR	5068584	Identifier	NULL		5068523	1					
ANR	5068585	IdentifierDeclStatement	bool mblockflag = true ;	91:1:2954:2976	5068523	6	True				
ANR	5068586	IdentifierDecl	mblockflag = true		5068523	0					
ANR	5068587	IdentifierDeclType	bool		5068523	0					
ANR	5068588	Identifier	mblockflag		5068523	1					
ANR	5068589	AssignmentExpression	mblockflag = true		5068523	2		=			
ANR	5068590	Identifier	true		5068523	0					
ANR	5068591	Identifier	true		5068523	1					
ANR	5068592	IdentifierDeclStatement	bool ublockflag = false ;	92:1:2979:3002	5068523	7	True				
ANR	5068593	IdentifierDecl	ublockflag = false		5068523	0					
ANR	5068594	IdentifierDeclType	bool		5068523	0					
ANR	5068595	Identifier	ublockflag		5068523	1					
ANR	5068596	AssignmentExpression	ublockflag = false		5068523	2		=			
ANR	5068597	Identifier	false		5068523	0					
ANR	5068598	Identifier	false		5068523	1					
ANR	5068599	IdentifierDeclStatement	bool moreOpts = true ;	96:1:3087:3107	5068523	8	True				
ANR	5068600	IdentifierDecl	moreOpts = true		5068523	0					
ANR	5068601	IdentifierDeclType	bool		5068523	0					
ANR	5068602	Identifier	moreOpts		5068523	1					
ANR	5068603	AssignmentExpression	moreOpts = true		5068523	2		=			
ANR	5068604	Identifier	true		5068523	0					
ANR	5068605	Identifier	true		5068523	1					
ANR	5068606	WhileStatement	while ( argc > 0 && moreOpts )		5068523	9					
ANR	5068607	Condition	argc > 0 && moreOpts	97:8:3117:3136	5068523	0	True				
ANR	5068608	AndExpression	argc > 0 && moreOpts		5068523	0		&&			
ANR	5068609	RelationalExpression	argc > 0		5068523	0		>			
ANR	5068610	Identifier	argc		5068523	0					
ANR	5068611	PrimaryExpression	0		5068523	1					
ANR	5068612	Identifier	moreOpts		5068523	1					
ANR	5068613	CompoundStatement		24:30:589:589	5068523	1					
ANR	5068614	IfStatement	"if ( strcmp ( PID_FILE_OPT , argv [ 0 ] ) == 0 )"		5068523	0					
ANR	5068615	Condition	"strcmp ( PID_FILE_OPT , argv [ 0 ] ) == 0"	100:6:3188:3221	5068523	0	True				
ANR	5068616	EqualityExpression	"strcmp ( PID_FILE_OPT , argv [ 0 ] ) == 0"		5068523	0		==			
ANR	5068617	CallExpression	"strcmp ( PID_FILE_OPT , argv [ 0 ] )"		5068523	0					
ANR	5068618	Callee	strcmp		5068523	0					
ANR	5068619	Identifier	strcmp		5068523	0					
ANR	5068620	ArgumentList	PID_FILE_OPT		5068523	1					
ANR	5068621	Argument	PID_FILE_OPT		5068523	0					
ANR	5068622	Identifier	PID_FILE_OPT		5068523	0					
ANR	5068623	Argument	argv [ 0 ]		5068523	1					
ANR	5068624	ArrayIndexing	argv [ 0 ]		5068523	0					
ANR	5068625	Identifier	argv		5068523	0					
ANR	5068626	PrimaryExpression	0		5068523	1					
ANR	5068627	PrimaryExpression	0		5068523	1					
ANR	5068628	CompoundStatement		27:41:673:673	5068523	1					
ANR	5068629	IfStatement	if ( argc < 2 )		5068523	0					
ANR	5068630	Condition	argc < 2	102:7:3282:3289	5068523	0	True				
ANR	5068631	RelationalExpression	argc < 2		5068523	0		<			
ANR	5068632	Identifier	argc		5068523	0					
ANR	5068633	PrimaryExpression	2		5068523	1					
ANR	5068634	CompoundStatement		29:17:742:742	5068523	1					
ANR	5068635	ExpressionStatement	"fprintf ( stderr , ""ERROR: %s requires a file argument\\n"" , PID_FILE_OPT )"	103:4:3298:3367	5068523	0	True				
ANR	5068636	CallExpression	"fprintf ( stderr , ""ERROR: %s requires a file argument\\n"" , PID_FILE_OPT )"		5068523	0					
ANR	5068637	Callee	fprintf		5068523	0					
ANR	5068638	Identifier	fprintf		5068523	0					
ANR	5068639	ArgumentList	stderr		5068523	1					
ANR	5068640	Argument	stderr		5068523	0					
ANR	5068641	Identifier	stderr		5068523	0					
ANR	5068642	Argument	"""ERROR: %s requires a file argument\\n"""		5068523	1					
ANR	5068643	PrimaryExpression	"""ERROR: %s requires a file argument\\n"""		5068523	0					
ANR	5068644	Argument	PID_FILE_OPT		5068523	2					
ANR	5068645	Identifier	PID_FILE_OPT		5068523	0					
ANR	5068646	ExpressionStatement	exit ( - 1 )	104:4:3373:3381	5068523	1	True				
ANR	5068647	CallExpression	exit ( - 1 )		5068523	0					
ANR	5068648	Callee	exit		5068523	0					
ANR	5068649	Identifier	exit		5068523	0					
ANR	5068650	ArgumentList	- 1		5068523	1					
ANR	5068651	Argument	- 1		5068523	0					
ANR	5068652	UnaryOperationExpression	- 1		5068523	0					
ANR	5068653	UnaryOperator	-		5068523	0					
ANR	5068654	PrimaryExpression	1		5068523	1					
ANR	5068655	ExpressionStatement	pidfile = argv [ 1 ]	108:3:3431:3448	5068523	1	True				
ANR	5068656	AssignmentExpression	pidfile = argv [ 1 ]		5068523	0		=			
ANR	5068657	Identifier	pidfile		5068523	0					
ANR	5068658	ArrayIndexing	argv [ 1 ]		5068523	1					
ANR	5068659	Identifier	argv		5068523	0					
ANR	5068660	PrimaryExpression	1		5068523	1					
ANR	5068661	ExpressionStatement	argc -= 2	109:3:3453:3462	5068523	2	True				
ANR	5068662	AssignmentExpression	argc -= 2		5068523	0		-=			
ANR	5068663	Identifier	argc		5068523	0					
ANR	5068664	PrimaryExpression	2		5068523	1					
ANR	5068665	ExpressionStatement	argv += 2	110:3:3467:3476	5068523	3	True				
ANR	5068666	AssignmentExpression	argv += 2		5068523	0		+=			
ANR	5068667	Identifier	argv		5068523	0					
ANR	5068668	PrimaryExpression	2		5068523	1					
ANR	5068669	ElseStatement	else		5068523	0					
ANR	5068670	IfStatement	"if ( strcmp ( BLOCK_OPT , argv [ 0 ] ) == 0 )"		5068523	0					
ANR	5068671	Condition	"strcmp ( BLOCK_OPT , argv [ 0 ] ) == 0"	115:11:3543:3573	5068523	0	True				
ANR	5068672	EqualityExpression	"strcmp ( BLOCK_OPT , argv [ 0 ] ) == 0"		5068523	0		==			
ANR	5068673	CallExpression	"strcmp ( BLOCK_OPT , argv [ 0 ] )"		5068523	0					
ANR	5068674	Callee	strcmp		5068523	0					
ANR	5068675	Identifier	strcmp		5068523	0					
ANR	5068676	ArgumentList	BLOCK_OPT		5068523	1					
ANR	5068677	Argument	BLOCK_OPT		5068523	0					
ANR	5068678	Identifier	BLOCK_OPT		5068523	0					
ANR	5068679	Argument	argv [ 0 ]		5068523	1					
ANR	5068680	ArrayIndexing	argv [ 0 ]		5068523	0					
ANR	5068681	Identifier	argv		5068523	0					
ANR	5068682	PrimaryExpression	0		5068523	1					
ANR	5068683	PrimaryExpression	0		5068523	1					
ANR	5068684	CompoundStatement		42:44:1026:1026	5068523	1					
ANR	5068685	ExpressionStatement	mblockflag = true	116:3:3581:3598	5068523	0	True				
ANR	5068686	AssignmentExpression	mblockflag = true		5068523	0		=			
ANR	5068687	Identifier	mblockflag		5068523	0					
ANR	5068688	Identifier	true		5068523	1					
ANR	5068689	ExpressionStatement	ublockflag = true	117:3:3603:3620	5068523	1	True				
ANR	5068690	AssignmentExpression	ublockflag = true		5068523	0		=			
ANR	5068691	Identifier	ublockflag		5068523	0					
ANR	5068692	Identifier	true		5068523	1					
ANR	5068693	ExpressionStatement	argc --	118:3:3625:3631	5068523	2	True				
ANR	5068694	PostIncDecOperationExpression	argc --		5068523	0					
ANR	5068695	Identifier	argc		5068523	0					
ANR	5068696	IncDec	--		5068523	1					
ANR	5068697	ExpressionStatement	argv ++	119:3:3636:3642	5068523	3	True				
ANR	5068698	PostIncDecOperationExpression	argv ++		5068523	0					
ANR	5068699	Identifier	argv		5068523	0					
ANR	5068700	IncDec	++		5068523	1					
ANR	5068701	ElseStatement	else		5068523	0					
ANR	5068702	IfStatement	"if ( strcmp ( NO_BLOCK_OPT , argv [ 0 ] ) == 0 )"		5068523	0					
ANR	5068703	Condition	"strcmp ( NO_BLOCK_OPT , argv [ 0 ] ) == 0"	123:11:3698:3731	5068523	0	True				
ANR	5068704	EqualityExpression	"strcmp ( NO_BLOCK_OPT , argv [ 0 ] ) == 0"		5068523	0		==			
ANR	5068705	CallExpression	"strcmp ( NO_BLOCK_OPT , argv [ 0 ] )"		5068523	0					
ANR	5068706	Callee	strcmp		5068523	0					
ANR	5068707	Identifier	strcmp		5068523	0					
ANR	5068708	ArgumentList	NO_BLOCK_OPT		5068523	1					
ANR	5068709	Argument	NO_BLOCK_OPT		5068523	0					
ANR	5068710	Identifier	NO_BLOCK_OPT		5068523	0					
ANR	5068711	Argument	argv [ 0 ]		5068523	1					
ANR	5068712	ArrayIndexing	argv [ 0 ]		5068523	0					
ANR	5068713	Identifier	argv		5068523	0					
ANR	5068714	PrimaryExpression	0		5068523	1					
ANR	5068715	PrimaryExpression	0		5068523	1					
ANR	5068716	CompoundStatement		50:47:1184:1184	5068523	1					
ANR	5068717	ExpressionStatement	mblockflag = false	124:3:3739:3757	5068523	0	True				
ANR	5068718	AssignmentExpression	mblockflag = false		5068523	0		=			
ANR	5068719	Identifier	mblockflag		5068523	0					
ANR	5068720	Identifier	false		5068523	1					
ANR	5068721	ExpressionStatement	ublockflag = false	125:3:3762:3780	5068523	1	True				
ANR	5068722	AssignmentExpression	ublockflag = false		5068523	0		=			
ANR	5068723	Identifier	ublockflag		5068523	0					
ANR	5068724	Identifier	false		5068523	1					
ANR	5068725	ExpressionStatement	argc --	126:3:3785:3791	5068523	2	True				
ANR	5068726	PostIncDecOperationExpression	argc --		5068523	0					
ANR	5068727	Identifier	argc		5068523	0					
ANR	5068728	IncDec	--		5068523	1					
ANR	5068729	ExpressionStatement	argv ++	127:3:3796:3802	5068523	3	True				
ANR	5068730	PostIncDecOperationExpression	argv ++		5068523	0					
ANR	5068731	Identifier	argv		5068523	0					
ANR	5068732	IncDec	++		5068523	1					
ANR	5068733	ElseStatement	else		5068523	0					
ANR	5068734	IfStatement	"if ( strcmp ( PRECISION_OPT , argv [ 0 ] ) == 0 )"		5068523	0					
ANR	5068735	Condition	"strcmp ( PRECISION_OPT , argv [ 0 ] ) == 0"	132:11:3866:3900	5068523	0	True				
ANR	5068736	EqualityExpression	"strcmp ( PRECISION_OPT , argv [ 0 ] ) == 0"		5068523	0		==			
ANR	5068737	CallExpression	"strcmp ( PRECISION_OPT , argv [ 0 ] )"		5068523	0					
ANR	5068738	Callee	strcmp		5068523	0					
ANR	5068739	Identifier	strcmp		5068523	0					
ANR	5068740	ArgumentList	PRECISION_OPT		5068523	1					
ANR	5068741	Argument	PRECISION_OPT		5068523	0					
ANR	5068742	Identifier	PRECISION_OPT		5068523	0					
ANR	5068743	Argument	argv [ 0 ]		5068523	1					
ANR	5068744	ArrayIndexing	argv [ 0 ]		5068523	0					
ANR	5068745	Identifier	argv		5068523	0					
ANR	5068746	PrimaryExpression	0		5068523	1					
ANR	5068747	PrimaryExpression	0		5068523	1					
ANR	5068748	CompoundStatement		69:3:1579:1588	5068523	1					
ANR	5068749	IfStatement	if ( argc < 2 )		5068523	0					
ANR	5068750	Condition	argc < 2	135:7:3962:3969	5068523	0	True				
ANR	5068751	RelationalExpression	argc < 2		5068523	0		<			
ANR	5068752	Identifier	argc		5068523	0					
ANR	5068753	PrimaryExpression	2		5068523	1					
ANR	5068754	CompoundStatement		62:17:1422:1422	5068523	1					
ANR	5068755	ExpressionStatement	"fprintf ( stderr , ""ERROR: %s requires a time in seconds\\n"" , PRECISION_OPT )"	136:4:3978:4049	5068523	0	True				
ANR	5068756	CallExpression	"fprintf ( stderr , ""ERROR: %s requires a time in seconds\\n"" , PRECISION_OPT )"		5068523	0					
ANR	5068757	Callee	fprintf		5068523	0					
ANR	5068758	Identifier	fprintf		5068523	0					
ANR	5068759	ArgumentList	stderr		5068523	1					
ANR	5068760	Argument	stderr		5068523	0					
ANR	5068761	Identifier	stderr		5068523	0					
ANR	5068762	Argument	"""ERROR: %s requires a time in seconds\\n"""		5068523	1					
ANR	5068763	PrimaryExpression	"""ERROR: %s requires a time in seconds\\n"""		5068523	0					
ANR	5068764	Argument	PRECISION_OPT		5068523	2					
ANR	5068765	Identifier	PRECISION_OPT		5068523	0					
ANR	5068766	ExpressionStatement	exit ( - 1 )	137:4:4055:4063	5068523	1	True				
ANR	5068767	CallExpression	exit ( - 1 )		5068523	0					
ANR	5068768	Callee	exit		5068523	0					
ANR	5068769	Identifier	exit		5068523	0					
ANR	5068770	ArgumentList	- 1		5068523	1					
ANR	5068771	Argument	- 1		5068523	0					
ANR	5068772	UnaryOperationExpression	- 1		5068523	0					
ANR	5068773	UnaryOperator	-		5068523	0					
ANR	5068774	PrimaryExpression	1		5068523	1					
ANR	5068775	IdentifierDeclStatement	int i = 0 ;	142:3:4129:4138	5068523	1	True				
ANR	5068776	IdentifierDecl	i = 0		5068523	0					
ANR	5068777	IdentifierDeclType	int		5068523	0					
ANR	5068778	Identifier	i		5068523	1					
ANR	5068779	AssignmentExpression	i = 0		5068523	2		=			
ANR	5068780	Identifier	i		5068523	0					
ANR	5068781	PrimaryExpression	0		5068523	1					
ANR	5068782	WhileStatement	while ( ( argv [ 1 ] [ i ] ) != '\\0' )		5068523	2					
ANR	5068783	Condition	( argv [ 1 ] [ i ] ) != '\\0'	143:10:4150:4169	5068523	0	True				
ANR	5068784	EqualityExpression	( argv [ 1 ] [ i ] ) != '\\0'		5068523	0		!=			
ANR	5068785	ArrayIndexing	argv [ 1 ] [ i ]		5068523	0					
ANR	5068786	ArrayIndexing	argv [ 1 ]		5068523	0					
ANR	5068787	Identifier	argv		5068523	0					
ANR	5068788	PrimaryExpression	1		5068523	1					
ANR	5068789	Identifier	i		5068523	1					
ANR	5068790	PrimaryExpression	'\\0'		5068523	1					
ANR	5068791	CompoundStatement		70:32:1622:1622	5068523	1					
ANR	5068792	IfStatement	if ( ! isdigit ( argv [ 1 ] [ i ] ) )		5068523	0					
ANR	5068793	Condition	! isdigit ( argv [ 1 ] [ i ] )	144:8:4182:4201	5068523	0	True				
ANR	5068794	UnaryOperationExpression	! isdigit ( argv [ 1 ] [ i ] )		5068523	0					
ANR	5068795	UnaryOperator	!		5068523	0					
ANR	5068796	CallExpression	isdigit ( argv [ 1 ] [ i ] )		5068523	1					
ANR	5068797	Callee	isdigit		5068523	0					
ANR	5068798	Identifier	isdigit		5068523	0					
ANR	5068799	ArgumentList	argv [ 1 ] [ i ]		5068523	1					
ANR	5068800	Argument	argv [ 1 ] [ i ]		5068523	0					
ANR	5068801	ArrayIndexing	argv [ 1 ] [ i ]		5068523	0					
ANR	5068802	ArrayIndexing	argv [ 1 ]		5068523	0					
ANR	5068803	Identifier	argv		5068523	0					
ANR	5068804	PrimaryExpression	1		5068523	1					
ANR	5068805	Identifier	i		5068523	1					
ANR	5068806	CompoundStatement		71:30:1654:1654	5068523	1					
ANR	5068807	ExpressionStatement	"fprintf ( stderr , ""ERROR: %s requires a time in seconds\\n"" , PRECISION_OPT )"	145:5:4211:4283	5068523	0	True				
ANR	5068808	CallExpression	"fprintf ( stderr , ""ERROR: %s requires a time in seconds\\n"" , PRECISION_OPT )"		5068523	0					
ANR	5068809	Callee	fprintf		5068523	0					
ANR	5068810	Identifier	fprintf		5068523	0					
ANR	5068811	ArgumentList	stderr		5068523	1					
ANR	5068812	Argument	stderr		5068523	0					
ANR	5068813	Identifier	stderr		5068523	0					
ANR	5068814	Argument	"""ERROR: %s requires a time in seconds\\n"""		5068523	1					
ANR	5068815	PrimaryExpression	"""ERROR: %s requires a time in seconds\\n"""		5068523	0					
ANR	5068816	Argument	PRECISION_OPT		5068523	2					
ANR	5068817	Identifier	PRECISION_OPT		5068523	0					
ANR	5068818	ExpressionStatement	exit ( - 1 )	146:5:4290:4298	5068523	1	True				
ANR	5068819	CallExpression	exit ( - 1 )		5068523	0					
ANR	5068820	Callee	exit		5068523	0					
ANR	5068821	Identifier	exit		5068523	0					
ANR	5068822	ArgumentList	- 1		5068523	1					
ANR	5068823	Argument	- 1		5068523	0					
ANR	5068824	UnaryOperationExpression	- 1		5068523	0					
ANR	5068825	UnaryOperator	-		5068523	0					
ANR	5068826	PrimaryExpression	1		5068523	1					
ANR	5068827	ExpressionStatement	i ++	149:4:4316:4319	5068523	1	True				
ANR	5068828	PostIncDecOperationExpression	i ++		5068523	0					
ANR	5068829	Identifier	i		5068523	0					
ANR	5068830	IncDec	++		5068523	1					
ANR	5068831	ExpressionStatement	precision_range = new int ( atoi ( argv [ 1 ] ) )	153:3:4361:4403	5068523	3	True				
ANR	5068832	AssignmentExpression	precision_range = new int ( atoi ( argv [ 1 ] ) )		5068523	0		=			
ANR	5068833	Identifier	precision_range		5068523	0					
ANR	5068834	CallExpression	atoi ( argv [ 1 ] )		5068523	1					
ANR	5068835	Callee	atoi		5068523	0					
ANR	5068836	Identifier	atoi		5068523	0					
ANR	5068837	ArgumentList	argv [ 1 ]		5068523	1					
ANR	5068838	Argument	argv [ 1 ]		5068523	0					
ANR	5068839	ArrayIndexing	argv [ 1 ]		5068523	0					
ANR	5068840	Identifier	argv		5068523	0					
ANR	5068841	PrimaryExpression	1		5068523	1					
ANR	5068842	ExpressionStatement	argc -= 2	155:3:4409:4418	5068523	4	True				
ANR	5068843	AssignmentExpression	argc -= 2		5068523	0		-=			
ANR	5068844	Identifier	argc		5068523	0					
ANR	5068845	PrimaryExpression	2		5068523	1					
ANR	5068846	ExpressionStatement	argv += 2	156:3:4423:4432	5068523	5	True				
ANR	5068847	AssignmentExpression	argv += 2		5068523	0		+=			
ANR	5068848	Identifier	argv		5068523	0					
ANR	5068849	PrimaryExpression	2		5068523	1					
ANR	5068850	ElseStatement	else		5068523	0					
ANR	5068851	CompoundStatement		87:6:1917:1917	5068523	0					
ANR	5068852	ExpressionStatement	moreOpts = false	161:3:4472:4488	5068523	0	True				
ANR	5068853	AssignmentExpression	moreOpts = false		5068523	0		=			
ANR	5068854	Identifier	moreOpts		5068523	0					
ANR	5068855	Identifier	false		5068523	1					
ANR	5068856	IfStatement	"if ( strcmp ( command , MIDWIFE_CMD ) == 0 )"		5068523	10					
ANR	5068857	Condition	"strcmp ( command , MIDWIFE_CMD ) == 0"	168:5:4593:4625	5068523	0	True				
ANR	5068858	EqualityExpression	"strcmp ( command , MIDWIFE_CMD ) == 0"		5068523	0		==			
ANR	5068859	CallExpression	"strcmp ( command , MIDWIFE_CMD )"		5068523	0					
ANR	5068860	Callee	strcmp		5068523	0					
ANR	5068861	Identifier	strcmp		5068523	0					
ANR	5068862	ArgumentList	command		5068523	1					
ANR	5068863	Argument	command		5068523	0					
ANR	5068864	Identifier	command		5068523	0					
ANR	5068865	Argument	MIDWIFE_CMD		5068523	1					
ANR	5068866	Identifier	MIDWIFE_CMD		5068523	0					
ANR	5068867	PrimaryExpression	0		5068523	1					
ANR	5068868	CompoundStatement		95:40:2078:2078	5068523	1					
ANR	5068869	ExpressionStatement	"midwife_main ( argc , argv , pidfile , mblockflag , precision_range )"	169:2:4632:4694	5068523	0	True				
ANR	5068870	CallExpression	"midwife_main ( argc , argv , pidfile , mblockflag , precision_range )"		5068523	0					
ANR	5068871	Callee	midwife_main		5068523	0					
ANR	5068872	Identifier	midwife_main		5068523	0					
ANR	5068873	ArgumentList	argc		5068523	1					
ANR	5068874	Argument	argc		5068523	0					
ANR	5068875	Identifier	argc		5068523	0					
ANR	5068876	Argument	argv		5068523	1					
ANR	5068877	Identifier	argv		5068523	0					
ANR	5068878	Argument	pidfile		5068523	2					
ANR	5068879	Identifier	pidfile		5068523	0					
ANR	5068880	Argument	mblockflag		5068523	3					
ANR	5068881	Identifier	mblockflag		5068523	0					
ANR	5068882	Argument	precision_range		5068523	4					
ANR	5068883	Identifier	precision_range		5068523	0					
ANR	5068884	ElseStatement	else		5068523	0					
ANR	5068885	IfStatement	"if ( strcmp ( command , UNDERTAKER_CMD ) == 0 )"		5068523	0					
ANR	5068886	Condition	"strcmp ( command , UNDERTAKER_CMD ) == 0"	170:12:4708:4743	5068523	0	True				
ANR	5068887	EqualityExpression	"strcmp ( command , UNDERTAKER_CMD ) == 0"		5068523	0		==			
ANR	5068888	CallExpression	"strcmp ( command , UNDERTAKER_CMD )"		5068523	0					
ANR	5068889	Callee	strcmp		5068523	0					
ANR	5068890	Identifier	strcmp		5068523	0					
ANR	5068891	ArgumentList	command		5068523	1					
ANR	5068892	Argument	command		5068523	0					
ANR	5068893	Identifier	command		5068523	0					
ANR	5068894	Argument	UNDERTAKER_CMD		5068523	1					
ANR	5068895	Identifier	UNDERTAKER_CMD		5068523	0					
ANR	5068896	PrimaryExpression	0		5068523	1					
ANR	5068897	CompoundStatement		97:50:2196:2196	5068523	1					
ANR	5068898	ExpressionStatement	"undertaker_main ( argc , argv , pidfile , ublockflag )"	171:2:4750:4798	5068523	0	True				
ANR	5068899	CallExpression	"undertaker_main ( argc , argv , pidfile , ublockflag )"		5068523	0					
ANR	5068900	Callee	undertaker_main		5068523	0					
ANR	5068901	Identifier	undertaker_main		5068523	0					
ANR	5068902	ArgumentList	argc		5068523	1					
ANR	5068903	Argument	argc		5068523	0					
ANR	5068904	Identifier	argc		5068523	0					
ANR	5068905	Argument	argv		5068523	1					
ANR	5068906	Identifier	argv		5068523	0					
ANR	5068907	Argument	pidfile		5068523	2					
ANR	5068908	Identifier	pidfile		5068523	0					
ANR	5068909	Argument	ublockflag		5068523	3					
ANR	5068910	Identifier	ublockflag		5068523	0					
ANR	5068911	ElseStatement	else		5068523	0					
ANR	5068912	CompoundStatement		99:7:2257:2257	5068523	0					
ANR	5068913	ExpressionStatement	"fprintf ( stderr , ""ERROR: Could not recognize command [%s]\\n"" , command )"	173:2:4811:4880	5068523	0	True				
ANR	5068914	CallExpression	"fprintf ( stderr , ""ERROR: Could not recognize command [%s]\\n"" , command )"		5068523	0					
ANR	5068915	Callee	fprintf		5068523	0					
ANR	5068916	Identifier	fprintf		5068523	0					
ANR	5068917	ArgumentList	stderr		5068523	1					
ANR	5068918	Argument	stderr		5068523	0					
ANR	5068919	Identifier	stderr		5068523	0					
ANR	5068920	Argument	"""ERROR: Could not recognize command [%s]\\n"""		5068523	1					
ANR	5068921	PrimaryExpression	"""ERROR: Could not recognize command [%s]\\n"""		5068523	0					
ANR	5068922	Argument	command		5068523	2					
ANR	5068923	Identifier	command		5068523	0					
ANR	5068924	ExpressionStatement	exit ( - 1 )	174:2:4884:4892	5068523	1	True				
ANR	5068925	CallExpression	exit ( - 1 )		5068523	0					
ANR	5068926	Callee	exit		5068523	0					
ANR	5068927	Identifier	exit		5068523	0					
ANR	5068928	ArgumentList	- 1		5068523	1					
ANR	5068929	Argument	- 1		5068523	0					
ANR	5068930	UnaryOperationExpression	- 1		5068523	0					
ANR	5068931	UnaryOperator	-		5068523	0					
ANR	5068932	PrimaryExpression	1		5068523	1					
ANR	5068933	ExpressionStatement	"fprintf ( stderr , ""ERROR: Reached unreachable code, bailing out\\n"" )"	178:1:4934:4999	5068523	11	True				
ANR	5068934	CallExpression	"fprintf ( stderr , ""ERROR: Reached unreachable code, bailing out\\n"" )"		5068523	0					
ANR	5068935	Callee	fprintf		5068523	0					
ANR	5068936	Identifier	fprintf		5068523	0					
ANR	5068937	ArgumentList	stderr		5068523	1					
ANR	5068938	Argument	stderr		5068523	0					
ANR	5068939	Identifier	stderr		5068523	0					
ANR	5068940	Argument	"""ERROR: Reached unreachable code, bailing out\\n"""		5068523	1					
ANR	5068941	PrimaryExpression	"""ERROR: Reached unreachable code, bailing out\\n"""		5068523	0					
ANR	5068942	ReturnStatement	return - 1 ;	179:1:5002:5011	5068523	12	True				
ANR	5068943	UnaryOperationExpression	- 1		5068523	0					
ANR	5068944	UnaryOperator	-		5068523	0					
ANR	5068945	PrimaryExpression	1		5068523	1					
ANR	5068946	ReturnType	int		5068523	1					
ANR	5068947	Identifier	main		5068523	2					
ANR	5068948	ParameterList	"int argc , char * argv [ ]"		5068523	3					
ANR	5068949	Parameter	int argc	73:5:2525:2532	5068523	0	True				
ANR	5068950	ParameterType	int		5068523	0					
ANR	5068951	Identifier	argc		5068523	1					
ANR	5068952	Parameter	char * argv [ ]	73:15:2535:2546	5068523	1	True				
ANR	5068953	ParameterType	char * [ ]		5068523	0					
ANR	5068954	Identifier	argv		5068523	1					
ANR	5068955	CFGEntryNode	ENTRY		5068523		True				
ANR	5068956	CFGExitNode	EXIT		5068523		True				
ANR	5068957	Symbol	strchr		5068523						
ANR	5068958	Symbol	* argv		5068523						
ANR	5068959	Symbol	argv		5068523						
ANR	5068960	Symbol	pidfile		5068523						
ANR	5068961	Symbol	MIDWIFE_CMD		5068523						
ANR	5068962	Symbol	* * argv		5068523						
ANR	5068963	Symbol	PRECISION_OPT		5068523						
ANR	5068964	Symbol	isdigit		5068523						
ANR	5068965	Symbol	precision_range		5068523						
ANR	5068966	Symbol	argc		5068523						
ANR	5068967	Symbol	PID_FILE_OPT		5068523						
ANR	5068968	Symbol	strcmp		5068523						
ANR	5068969	Symbol	atoi		5068523						
ANR	5068970	Symbol	mblockflag		5068523						
ANR	5068971	Symbol	UNDERTAKER_CMD		5068523						
ANR	5068972	Symbol	NULL		5068523						
ANR	5068973	Symbol	NO_BLOCK_OPT		5068523						
ANR	5068974	Symbol	moreOpts		5068523						
ANR	5068975	Symbol	DIR_DELIM_CHAR		5068523						
ANR	5068976	Symbol	false		5068523						
ANR	5068977	Symbol	i		5068523						
ANR	5068978	Symbol	stderr		5068523						
ANR	5068979	Symbol	BLOCK_OPT		5068523						
ANR	5068980	Symbol	command		5068523						
ANR	5068981	Symbol	* i		5068523						
ANR	5068982	Symbol	strrchr		5068523						
ANR	5068983	Symbol	true		5068523						
ANR	5068984	Symbol	DEFAULT_PID_FILE		5068523						
ANR	5068985	Symbol	ublockflag		5068523						
ANR	5068986	Function	midwife_main	191:0:5322:5910							
ANR	5068987	FunctionDef	"midwife_main (int argc , char * argv [ ] , const char * pidfile , bool blockflag , int * precision_range)"		5068986	0					
ANR	5068988	CompoundStatement		196:0:5439:5910	5068986	0					
ANR	5068989	IfStatement	if ( argc < 1 )		5068986	0					
ANR	5068990	Condition	argc < 1	198:5:5463:5470	5068986	0	True				
ANR	5068991	RelationalExpression	argc < 1		5068986	0		<			
ANR	5068992	Identifier	argc		5068986	0					
ANR	5068993	PrimaryExpression	1		5068986	1					
ANR	5068994	CompoundStatement		3:15:33:33	5068986	1					
ANR	5068995	ExpressionStatement	"fprintf ( stderr , MIDWIFE_USAGE )"	199:2:5477:5507	5068986	0	True				
ANR	5068996	CallExpression	"fprintf ( stderr , MIDWIFE_USAGE )"		5068986	0					
ANR	5068997	Callee	fprintf		5068986	0					
ANR	5068998	Identifier	fprintf		5068986	0					
ANR	5068999	ArgumentList	stderr		5068986	1					
ANR	5069000	Argument	stderr		5068986	0					
ANR	5069001	Identifier	stderr		5068986	0					
ANR	5069002	Argument	MIDWIFE_USAGE		5068986	1					
ANR	5069003	Identifier	MIDWIFE_USAGE		5068986	0					
ANR	5069004	ExpressionStatement	exit ( EXIT_FAILURE )	200:2:5511:5529	5068986	1	True				
ANR	5069005	CallExpression	exit ( EXIT_FAILURE )		5068986	0					
ANR	5069006	Callee	exit		5068986	0					
ANR	5069007	Identifier	exit		5068986	0					
ANR	5069008	ArgumentList	EXIT_FAILURE		5068986	1					
ANR	5069009	Argument	EXIT_FAILURE		5068986	0					
ANR	5069010	Identifier	EXIT_FAILURE		5068986	0					
ANR	5069011	IdentifierDeclStatement	"pid_t pid = midwife_executable ( argc , argv , pidfile , precision_range ) ;"	204:1:5564:5632	5068986	1	True				
ANR	5069012	IdentifierDecl	"pid = midwife_executable ( argc , argv , pidfile , precision_range )"		5068986	0					
ANR	5069013	IdentifierDeclType	pid_t		5068986	0					
ANR	5069014	Identifier	pid		5068986	1					
ANR	5069015	AssignmentExpression	"pid = midwife_executable ( argc , argv , pidfile , precision_range )"		5068986	2		=			
ANR	5069016	Identifier	pid		5068986	0					
ANR	5069017	CallExpression	"midwife_executable ( argc , argv , pidfile , precision_range )"		5068986	1					
ANR	5069018	Callee	midwife_executable		5068986	0					
ANR	5069019	Identifier	midwife_executable		5068986	0					
ANR	5069020	ArgumentList	argc		5068986	1					
ANR	5069021	Argument	argc		5068986	0					
ANR	5069022	Identifier	argc		5068986	0					
ANR	5069023	Argument	argv		5068986	1					
ANR	5069024	Identifier	argv		5068986	0					
ANR	5069025	Argument	pidfile		5068986	2					
ANR	5069026	Identifier	pidfile		5068986	0					
ANR	5069027	Argument	precision_range		5068986	3					
ANR	5069028	Identifier	precision_range		5068986	0					
ANR	5069029	IfStatement	if ( pid == - 1 )		5068986	2					
ANR	5069030	Condition	pid == - 1	205:5:5639:5647	5068986	0	True				
ANR	5069031	EqualityExpression	pid == - 1		5068986	0		==			
ANR	5069032	Identifier	pid		5068986	0					
ANR	5069033	UnaryOperationExpression	- 1		5068986	1					
ANR	5069034	UnaryOperator	-		5068986	0					
ANR	5069035	PrimaryExpression	1		5068986	1					
ANR	5069036	CompoundStatement		10:16:210:210	5068986	1					
ANR	5069037	ExpressionStatement	exit ( EXIT_FAILURE )	206:2:5654:5672	5068986	0	True				
ANR	5069038	CallExpression	exit ( EXIT_FAILURE )		5068986	0					
ANR	5069039	Callee	exit		5068986	0					
ANR	5069040	Identifier	exit		5068986	0					
ANR	5069041	ArgumentList	EXIT_FAILURE		5068986	1					
ANR	5069042	Argument	EXIT_FAILURE		5068986	0					
ANR	5069043	Identifier	EXIT_FAILURE		5068986	0					
ANR	5069044	IfStatement	"if ( blockflag && waitpid ( pid , NULL , 0 ) == - 1 )"		5068986	3					
ANR	5069045	Condition	"blockflag && waitpid ( pid , NULL , 0 ) == - 1"	210:5:5735:5774	5068986	0	True				
ANR	5069046	AndExpression	"blockflag && waitpid ( pid , NULL , 0 ) == - 1"		5068986	0		&&			
ANR	5069047	Identifier	blockflag		5068986	0					
ANR	5069048	EqualityExpression	"waitpid ( pid , NULL , 0 ) == - 1"		5068986	1		==			
ANR	5069049	CallExpression	"waitpid ( pid , NULL , 0 )"		5068986	0					
ANR	5069050	Callee	waitpid		5068986	0					
ANR	5069051	Identifier	waitpid		5068986	0					
ANR	5069052	ArgumentList	pid		5068986	1					
ANR	5069053	Argument	pid		5068986	0					
ANR	5069054	Identifier	pid		5068986	0					
ANR	5069055	Argument	NULL		5068986	1					
ANR	5069056	Identifier	NULL		5068986	0					
ANR	5069057	Argument	0		5068986	2					
ANR	5069058	PrimaryExpression	0		5068986	0					
ANR	5069059	UnaryOperationExpression	- 1		5068986	1					
ANR	5069060	UnaryOperator	-		5068986	0					
ANR	5069061	PrimaryExpression	1		5068986	1					
ANR	5069062	CompoundStatement		15:47:337:337	5068986	1					
ANR	5069063	ExpressionStatement	"perror ( ""ERROR: Could not waitpid(...) in midwife_main"" )"	211:2:5781:5836	5068986	0	True				
ANR	5069064	CallExpression	"perror ( ""ERROR: Could not waitpid(...) in midwife_main"" )"		5068986	0					
ANR	5069065	Callee	perror		5068986	0					
ANR	5069066	Identifier	perror		5068986	0					
ANR	5069067	ArgumentList	"""ERROR: Could not waitpid(...) in midwife_main"""		5068986	1					
ANR	5069068	Argument	"""ERROR: Could not waitpid(...) in midwife_main"""		5068986	0					
ANR	5069069	PrimaryExpression	"""ERROR: Could not waitpid(...) in midwife_main"""		5068986	0					
ANR	5069070	ExpressionStatement	exit ( EXIT_FAILURE )	212:2:5840:5858	5068986	1	True				
ANR	5069071	CallExpression	exit ( EXIT_FAILURE )		5068986	0					
ANR	5069072	Callee	exit		5068986	0					
ANR	5069073	Identifier	exit		5068986	0					
ANR	5069074	ArgumentList	EXIT_FAILURE		5068986	1					
ANR	5069075	Argument	EXIT_FAILURE		5068986	0					
ANR	5069076	Identifier	EXIT_FAILURE		5068986	0					
ANR	5069077	ExpressionStatement	exit ( EXIT_SUCCESS )	216:1:5879:5897	5068986	4	True				
ANR	5069078	CallExpression	exit ( EXIT_SUCCESS )		5068986	0					
ANR	5069079	Callee	exit		5068986	0					
ANR	5069080	Identifier	exit		5068986	0					
ANR	5069081	ArgumentList	EXIT_SUCCESS		5068986	1					
ANR	5069082	Argument	EXIT_SUCCESS		5068986	0					
ANR	5069083	Identifier	EXIT_SUCCESS		5068986	0					
ANR	5069084	ReturnStatement	return 0 ;	217:1:5900:5908	5068986	5	True				
ANR	5069085	PrimaryExpression	0		5068986	0					
ANR	5069086	ReturnType	int		5068986	1					
ANR	5069087	Identifier	midwife_main		5068986	2					
ANR	5069088	ParameterList	"int argc , char * argv [ ] , const char * pidfile , bool blockflag , int * precision_range"		5068986	3					
ANR	5069089	Parameter	int argc	192:13:5340:5347	5068986	0	True				
ANR	5069090	ParameterType	int		5068986	0					
ANR	5069091	Identifier	argc		5068986	1					
ANR	5069092	Parameter	char * argv [ ]	192:23:5350:5361	5068986	1	True				
ANR	5069093	ParameterType	char * [ ]		5068986	0					
ANR	5069094	Identifier	argv		5068986	1					
ANR	5069095	Parameter	const char * pidfile	193:4:5369:5387	5068986	2	True				
ANR	5069096	ParameterType	const char *		5068986	0					
ANR	5069097	Identifier	pidfile		5068986	1					
ANR	5069098	Parameter	bool blockflag	194:4:5395:5408	5068986	3	True				
ANR	5069099	ParameterType	bool		5068986	0					
ANR	5069100	Identifier	blockflag		5068986	1					
ANR	5069101	Parameter	int * precision_range	195:4:5417:5436	5068986	4	True				
ANR	5069102	ParameterType	int *		5068986	0					
ANR	5069103	Identifier	precision_range		5068986	1					
ANR	5069104	CFGEntryNode	ENTRY		5068986		True				
ANR	5069105	CFGExitNode	EXIT		5068986		True				
ANR	5069106	Symbol	argc		5068986						
ANR	5069107	Symbol	MIDWIFE_USAGE		5068986						
ANR	5069108	Symbol	NULL		5068986						
ANR	5069109	Symbol	pid		5068986						
ANR	5069110	Symbol	stderr		5068986						
ANR	5069111	Symbol	argv		5068986						
ANR	5069112	Symbol	pidfile		5068986						
ANR	5069113	Symbol	blockflag		5068986						
ANR	5069114	Symbol	EXIT_FAILURE		5068986						
ANR	5069115	Symbol	midwife_executable		5068986						
ANR	5069116	Symbol	EXIT_SUCCESS		5068986						
ANR	5069117	Symbol	precision_range		5068986						
ANR	5069118	Symbol	waitpid		5068986						
ANR	5069119	DeclStmt									
ANR	5069120	Decl							FILE	FILE *	fp
ANR	5069121	DeclStmt									
ANR	5069122	Decl							pid_t	pid_t	pid
ANR	5069123	DeclStmt									
ANR	5069124	Decl							int	int	status
ANR	5069125	DeclStmt									
ANR	5069126	Decl							ProcessId	ProcessId *	pProcId
ANR	5069127	DeclStmt									
ANR	5069128	Decl							int	int	sleepfor
ANR	5069129	Function	createPidFile	339:0:8918:9613							
ANR	5069130	FunctionDef	createPidFile (const char * pidfile)		5069129	0					
ANR	5069131	CompoundStatement		341:0:8960:9613	5069129	0					
ANR	5069132	IdentifierDeclStatement	mode_t pidfile_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH ;	344:2:8995:9126	5069129	0	True				
ANR	5069133	IdentifierDecl	pidfile_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH		5069129	0					
ANR	5069134	IdentifierDeclType	mode_t		5069129	0					
ANR	5069135	Identifier	pidfile_mode		5069129	1					
ANR	5069136	AssignmentExpression	pidfile_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH		5069129	2		=			
ANR	5069137	Identifier	pidfile_mode		5069129	0					
ANR	5069138	InclusiveOrExpression	S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH		5069129	1		|			
ANR	5069139	Identifier	S_IRUSR		5069129	0					
ANR	5069140	InclusiveOrExpression	S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH		5069129	1		|			
ANR	5069141	Identifier	S_IWUSR		5069129	0					
ANR	5069142	InclusiveOrExpression	S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH		5069129	1		|			
ANR	5069143	Identifier	S_IRGRP		5069129	0					
ANR	5069144	InclusiveOrExpression	S_IWGRP | S_IROTH | S_IWOTH		5069129	1		|			
ANR	5069145	Identifier	S_IWGRP		5069129	0					
ANR	5069146	InclusiveOrExpression	S_IROTH | S_IWOTH		5069129	1		|			
ANR	5069147	Identifier	S_IROTH		5069129	0					
ANR	5069148	Identifier	S_IWOTH		5069129	1					
ANR	5069149	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( pidfile , O_WRONLY | O_CREAT | O_EXCL , pidfile_mode ) ;"	348:2:9154:9239	5069129	1	True				
ANR	5069150	IdentifierDecl	"fd = safe_open_wrapper_follow ( pidfile , O_WRONLY | O_CREAT | O_EXCL , pidfile_mode )"		5069129	0					
ANR	5069151	IdentifierDeclType	int		5069129	0					
ANR	5069152	Identifier	fd		5069129	1					
ANR	5069153	AssignmentExpression	"fd = safe_open_wrapper_follow ( pidfile , O_WRONLY | O_CREAT | O_EXCL , pidfile_mode )"		5069129	2		=			
ANR	5069154	Identifier	fd		5069129	0					
ANR	5069155	CallExpression	"safe_open_wrapper_follow ( pidfile , O_WRONLY | O_CREAT | O_EXCL , pidfile_mode )"		5069129	1					
ANR	5069156	Callee	safe_open_wrapper_follow		5069129	0					
ANR	5069157	Identifier	safe_open_wrapper_follow		5069129	0					
ANR	5069158	ArgumentList	pidfile		5069129	1					
ANR	5069159	Argument	pidfile		5069129	0					
ANR	5069160	Identifier	pidfile		5069129	0					
ANR	5069161	Argument	O_WRONLY | O_CREAT | O_EXCL		5069129	1					
ANR	5069162	InclusiveOrExpression	O_WRONLY | O_CREAT | O_EXCL		5069129	0		|			
ANR	5069163	Identifier	O_WRONLY		5069129	0					
ANR	5069164	InclusiveOrExpression	O_CREAT | O_EXCL		5069129	1		|			
ANR	5069165	Identifier	O_CREAT		5069129	0					
ANR	5069166	Identifier	O_EXCL		5069129	1					
ANR	5069167	Argument	pidfile_mode		5069129	2					
ANR	5069168	Identifier	pidfile_mode		5069129	0					
ANR	5069169	IfStatement	if ( fd == - 1 )		5069129	2					
ANR	5069170	Condition	fd == - 1	349:6:9247:9254	5069129	0	True				
ANR	5069171	EqualityExpression	fd == - 1		5069129	0		==			
ANR	5069172	Identifier	fd		5069129	0					
ANR	5069173	UnaryOperationExpression	- 1		5069129	1					
ANR	5069174	UnaryOperator	-		5069129	0					
ANR	5069175	PrimaryExpression	1		5069129	1					
ANR	5069176	CompoundStatement		9:16:296:296	5069129	1					
ANR	5069177	ExpressionStatement	"perror ( ""ERROR: Could not create the pid file"" )"	350:4:9263:9309	5069129	0	True				
ANR	5069178	CallExpression	"perror ( ""ERROR: Could not create the pid file"" )"		5069129	0					
ANR	5069179	Callee	perror		5069129	0					
ANR	5069180	Identifier	perror		5069129	0					
ANR	5069181	ArgumentList	"""ERROR: Could not create the pid file"""		5069129	1					
ANR	5069182	Argument	"""ERROR: Could not create the pid file"""		5069129	0					
ANR	5069183	PrimaryExpression	"""ERROR: Could not create the pid file"""		5069129	0					
ANR	5069184	ReturnStatement	return NULL ;	351:4:9315:9326	5069129	1	True				
ANR	5069185	Identifier	NULL		5069129	0					
ANR	5069186	IdentifierDeclStatement	"FILE * fp = fdopen ( fd , ""w"" ) ;"	356:2:9425:9451	5069129	3	True				
ANR	5069187	IdentifierDecl	"* fp = fdopen ( fd , ""w"" )"		5069129	0					
ANR	5069188	IdentifierDeclType	FILE *		5069129	0					
ANR	5069189	Identifier	fp		5069129	1					
ANR	5069190	AssignmentExpression	"* fp = fdopen ( fd , ""w"" )"		5069129	2		=			
ANR	5069191	Identifier	fp		5069129	0					
ANR	5069192	CallExpression	"fdopen ( fd , ""w"" )"		5069129	1					
ANR	5069193	Callee	fdopen		5069129	0					
ANR	5069194	Identifier	fdopen		5069129	0					
ANR	5069195	ArgumentList	fd		5069129	1					
ANR	5069196	Argument	fd		5069129	0					
ANR	5069197	Identifier	fd		5069129	0					
ANR	5069198	Argument	"""w"""		5069129	1					
ANR	5069199	PrimaryExpression	"""w"""		5069129	0					
ANR	5069200	IfStatement	if ( fp == NULL )		5069129	4					
ANR	5069201	Condition	fp == NULL	357:6:9459:9468	5069129	0	True				
ANR	5069202	EqualityExpression	fp == NULL		5069129	0		==			
ANR	5069203	Identifier	fp		5069129	0					
ANR	5069204	Identifier	NULL		5069129	1					
ANR	5069205	CompoundStatement		17:18:510:510	5069129	1					
ANR	5069206	ExpressionStatement	"perror ( ""ERROR: Could not convert the pid file file descriptor to a file pointer"" )"	358:4:9477:9558	5069129	0	True				
ANR	5069207	CallExpression	"perror ( ""ERROR: Could not convert the pid file file descriptor to a file pointer"" )"		5069129	0					
ANR	5069208	Callee	perror		5069129	0					
ANR	5069209	Identifier	perror		5069129	0					
ANR	5069210	ArgumentList	"""ERROR: Could not convert the pid file file descriptor to a file pointer"""		5069129	1					
ANR	5069211	Argument	"""ERROR: Could not convert the pid file file descriptor to a file pointer"""		5069129	0					
ANR	5069212	PrimaryExpression	"""ERROR: Could not convert the pid file file descriptor to a file pointer"""		5069129	0					
ANR	5069213	ReturnStatement	return ( NULL ) ;	359:4:9564:9578	5069129	1	True				
ANR	5069214	Identifier	NULL		5069129	0					
ANR	5069215	ReturnStatement	return fp ;	363:2:9602:9611	5069129	5	True				
ANR	5069216	Identifier	fp		5069129	0					
ANR	5069217	ReturnType	FILE *		5069129	1					
ANR	5069218	Identifier	createPidFile		5069129	2					
ANR	5069219	ParameterList	const char * pidfile		5069129	3					
ANR	5069220	Parameter	const char * pidfile	340:14:8939:8957	5069129	0	True				
ANR	5069221	ParameterType	const char *		5069129	0					
ANR	5069222	Identifier	pidfile		5069129	1					
ANR	5069223	CFGEntryNode	ENTRY		5069129		True				
ANR	5069224	CFGExitNode	EXIT		5069129		True				
ANR	5069225	Symbol	S_IROTH		5069129						
ANR	5069226	Symbol	safe_open_wrapper_follow		5069129						
ANR	5069227	Symbol	NULL		5069129						
ANR	5069228	Symbol	S_IWGRP		5069129						
ANR	5069229	Symbol	S_IWOTH		5069129						
ANR	5069230	Symbol	pidfile_mode		5069129						
ANR	5069231	Symbol	O_EXCL		5069129						
ANR	5069232	Symbol	O_CREAT		5069129						
ANR	5069233	Symbol	fp		5069129						
ANR	5069234	Symbol	fdopen		5069129						
ANR	5069235	Symbol	pidfile		5069129						
ANR	5069236	Symbol	S_IRUSR		5069129						
ANR	5069237	Symbol	S_IWUSR		5069129						
ANR	5069238	Symbol	S_IRGRP		5069129						
ANR	5069239	Symbol	O_WRONLY		5069129						
ANR	5069240	Symbol	fd		5069129						
ANR	5069241	DeclStmt									
ANR	5069242	Decl							FILE	FILE *	fp
ANR	5069243	DeclStmt									
ANR	5069244	Decl							int	int	status
ANR	5069245	DeclStmt									
ANR	5069246	Decl							ProcessId	"ProcessId ( fp , status )"	procId
ANR	5069247	DeclStmt									
ANR	5069248	Decl							int	int	aliveVal
ANR	5069249	DeclStmt									
ANR	5069250	Decl							int	int	dummy_status
ANR	5069251	DeclStmt									
ANR	5069252	Decl							int	int	retVal
ANR	5069253	DeclStmt									
ANR	5069254	Decl							FILE	FILE *	pid_fp
ANR	5069255	Function	blockUntilDead	467:0:12338:13028							
ANR	5069256	FunctionDef	blockUntilDead (ProcessId & procId)		5069255	0					
ANR	5069257	CompoundStatement		469:0:12377:13028	5069255	0					
ANR	5069258	IdentifierDeclStatement	"ExponentialBackoff backoff ( 0 , 30 , 1.0 ) ;"	471:1:12420:12458	5069255	0	True				
ANR	5069259	IdentifierDecl	"backoff ( 0 , 30 , 1.0 )"		5069255	0					
ANR	5069260	IdentifierDeclType	ExponentialBackoff		5069255	0					
ANR	5069261	Identifier	backoff		5069255	1					
ANR	5069262	Expression	"0 , 30 , 1.0"		5069255	2					
ANR	5069263	PrimaryExpression	0		5069255	0					
ANR	5069264	Expression	"30 , 1.0"		5069255	1					
ANR	5069265	PrimaryExpression	30		5069255	0					
ANR	5069266	PrimaryExpression	1.0		5069255	1					
ANR	5069267	IdentifierDeclStatement	int aliveVal ;	474:1:12481:12493	5069255	1	True				
ANR	5069268	IdentifierDecl	aliveVal		5069255	0					
ANR	5069269	IdentifierDeclType	int		5069255	0					
ANR	5069270	Identifier	aliveVal		5069255	1					
ANR	5069271	IdentifierDeclStatement	"int retVal = ProcAPI :: isAlive ( procId , aliveVal ) ;"	475:1:12496:12543	5069255	2	True				
ANR	5069272	IdentifierDecl	"retVal = ProcAPI :: isAlive ( procId , aliveVal )"		5069255	0					
ANR	5069273	IdentifierDeclType	int		5069255	0					
ANR	5069274	Identifier	retVal		5069255	1					
ANR	5069275	AssignmentExpression	"retVal = ProcAPI :: isAlive ( procId , aliveVal )"		5069255	2		=			
ANR	5069276	Identifier	retVal		5069255	0					
ANR	5069277	CallExpression	"ProcAPI :: isAlive ( procId , aliveVal )"		5069255	1					
ANR	5069278	Callee	ProcAPI :: isAlive		5069255	0					
ANR	5069279	Identifier	ProcAPI :: isAlive		5069255	0					
ANR	5069280	ArgumentList	procId		5069255	1					
ANR	5069281	Argument	procId		5069255	0					
ANR	5069282	Identifier	procId		5069255	0					
ANR	5069283	Argument	aliveVal		5069255	1					
ANR	5069284	Identifier	aliveVal		5069255	0					
ANR	5069285	WhileStatement	while ( aliveVal != PROCAPI_DEAD && retVal != PROCAPI_FAILURE )		5069255	3					
ANR	5069286	Condition	aliveVal != PROCAPI_DEAD && retVal != PROCAPI_FAILURE	478:8:12604:12656	5069255	0	True				
ANR	5069287	AndExpression	aliveVal != PROCAPI_DEAD && retVal != PROCAPI_FAILURE		5069255	0		&&			
ANR	5069288	EqualityExpression	aliveVal != PROCAPI_DEAD		5069255	0		!=			
ANR	5069289	Identifier	aliveVal		5069255	0					
ANR	5069290	Identifier	PROCAPI_DEAD		5069255	1					
ANR	5069291	EqualityExpression	retVal != PROCAPI_FAILURE		5069255	1		!=			
ANR	5069292	Identifier	retVal		5069255	0					
ANR	5069293	Identifier	PROCAPI_FAILURE		5069255	1					
ANR	5069294	CompoundStatement		10:62:280:280	5069255	1					
ANR	5069295	ExpressionStatement	backoff . nextBackoff ( )	481:2:12700:12721	5069255	0	True				
ANR	5069296	CallExpression	backoff . nextBackoff ( )		5069255	0					
ANR	5069297	Callee	backoff . nextBackoff		5069255	0					
ANR	5069298	MemberAccess	backoff . nextBackoff		5069255	0					
ANR	5069299	Identifier	backoff		5069255	0					
ANR	5069300	Identifier	nextBackoff		5069255	1					
ANR	5069301	ArgumentList			5069255	1					
ANR	5069302	ExpressionStatement	"retVal = ProcAPI :: isAlive ( procId , aliveVal )"	484:2:12746:12789	5069255	1	True				
ANR	5069303	AssignmentExpression	"retVal = ProcAPI :: isAlive ( procId , aliveVal )"		5069255	0		=			
ANR	5069304	Identifier	retVal		5069255	0					
ANR	5069305	CallExpression	"ProcAPI :: isAlive ( procId , aliveVal )"		5069255	1					
ANR	5069306	Callee	ProcAPI :: isAlive		5069255	0					
ANR	5069307	Identifier	ProcAPI :: isAlive		5069255	0					
ANR	5069308	ArgumentList	procId		5069255	1					
ANR	5069309	Argument	procId		5069255	0					
ANR	5069310	Identifier	procId		5069255	0					
ANR	5069311	Argument	aliveVal		5069255	1					
ANR	5069312	Identifier	aliveVal		5069255	0					
ANR	5069313	IfStatement	if ( retVal == PROCAPI_FAILURE )		5069255	4					
ANR	5069314	Condition	retVal == PROCAPI_FAILURE	488:5:12812:12836	5069255	0	True				
ANR	5069315	EqualityExpression	retVal == PROCAPI_FAILURE		5069255	0		==			
ANR	5069316	Identifier	retVal		5069255	0					
ANR	5069317	Identifier	PROCAPI_FAILURE		5069255	1					
ANR	5069318	CompoundStatement		20:32:461:461	5069255	1					
ANR	5069319	ExpressionStatement	"procapi_perror ( aliveVal , procId . getPid ( ) , ""ERROR: Failure occured attempting to determine if process is alive from pidfile.\\n"" )"	489:2:12843:12970	5069255	0	True				
ANR	5069320	CallExpression	"procapi_perror ( aliveVal , procId . getPid ( ) , ""ERROR: Failure occured attempting to determine if process is alive from pidfile.\\n"" )"		5069255	0					
ANR	5069321	Callee	procapi_perror		5069255	0					
ANR	5069322	Identifier	procapi_perror		5069255	0					
ANR	5069323	ArgumentList	aliveVal		5069255	1					
ANR	5069324	Argument	aliveVal		5069255	0					
ANR	5069325	Identifier	aliveVal		5069255	0					
ANR	5069326	Argument	procId . getPid ( )		5069255	1					
ANR	5069327	CallExpression	procId . getPid ( )		5069255	0					
ANR	5069328	Callee	procId . getPid		5069255	0					
ANR	5069329	MemberAccess	procId . getPid		5069255	0					
ANR	5069330	Identifier	procId		5069255	0					
ANR	5069331	Identifier	getPid		5069255	1					
ANR	5069332	ArgumentList			5069255	1					
ANR	5069333	Argument	"""ERROR: Failure occured attempting to determine if process is alive from pidfile.\\n"""		5069255	2					
ANR	5069334	PrimaryExpression	"""ERROR: Failure occured attempting to determine if process is alive from pidfile.\\n"""		5069255	0					
ANR	5069335	ExpressionStatement	exit ( UNDERTAKER_FAILURE )	490:2:12974:12998	5069255	1	True				
ANR	5069336	CallExpression	exit ( UNDERTAKER_FAILURE )		5069255	0					
ANR	5069337	Callee	exit		5069255	0					
ANR	5069338	Identifier	exit		5069255	0					
ANR	5069339	ArgumentList	UNDERTAKER_FAILURE		5069255	1					
ANR	5069340	Argument	UNDERTAKER_FAILURE		5069255	0					
ANR	5069341	Identifier	UNDERTAKER_FAILURE		5069255	0					
ANR	5069342	ReturnStatement	return 0 ;	494:1:13018:13026	5069255	5	True				
ANR	5069343	PrimaryExpression	0		5069255	0					
ANR	5069344	ReturnType	int		5069255	1					
ANR	5069345	Identifier	blockUntilDead		5069255	2					
ANR	5069346	ParameterList	ProcessId & procId		5069255	3					
ANR	5069347	Parameter	ProcessId & procId	468:15:12358:12374	5069255	0	True				
ANR	5069348	ParameterType	ProcessId &		5069255	0					
ANR	5069349	Identifier	procId		5069255	1					
ANR	5069350	CFGEntryNode	ENTRY		5069255		True				
ANR	5069351	CFGExitNode	EXIT		5069255		True				
ANR	5069352	Symbol	backoff		5069255						
ANR	5069353	Symbol	PROCAPI_FAILURE		5069255						
ANR	5069354	Symbol	procId		5069255						
ANR	5069355	Symbol	UNDERTAKER_FAILURE		5069255						
ANR	5069356	Symbol	aliveVal		5069255						
ANR	5069357	Symbol	procId . getPid		5069255						
ANR	5069358	Symbol	PROCAPI_DEAD		5069255						
ANR	5069359	Symbol	retVal		5069255						
ANR	5069360	Symbol	ProcAPI :: isAlive		5069255						
ANR	5069361	Function	handleUncertain	503:0:13218:13850							
ANR	5069362	FunctionDef	handleUncertain (pid_t pid)		5069361	0					
ANR	5069363	CompoundStatement		505:0:13250:13850	5069361	0					
ANR	5069364	IfStatement	if ( pid < 0 )		5069361	0					
ANR	5069365	Condition	pid < 0	508:5:13276:13282	5069361	0	True				
ANR	5069366	RelationalExpression	pid < 0		5069361	0		<			
ANR	5069367	Identifier	pid		5069361	0					
ANR	5069368	PrimaryExpression	0		5069361	1					
ANR	5069369	CompoundStatement		4:14:34:34	5069361	1					
ANR	5069370	ExpressionStatement	"fprintf ( stderr , ""Could not be certain of processes status because pid is illegal [%d] \\n"" , pid )"	509:2:13289:13394	5069361	0	True				
ANR	5069371	CallExpression	"fprintf ( stderr , ""Could not be certain of processes status because pid is illegal [%d] \\n"" , pid )"		5069361	0					
ANR	5069372	Callee	fprintf		5069361	0					
ANR	5069373	Identifier	fprintf		5069361	0					
ANR	5069374	ArgumentList	stderr		5069361	1					
ANR	5069375	Argument	stderr		5069361	0					
ANR	5069376	Identifier	stderr		5069361	0					
ANR	5069377	Argument	"""Could not be certain of processes status because pid is illegal [%d] \\n"""		5069361	1					
ANR	5069378	PrimaryExpression	"""Could not be certain of processes status because pid is illegal [%d] \\n"""		5069361	0					
ANR	5069379	Argument	pid		5069361	2					
ANR	5069380	Identifier	pid		5069361	0					
ANR	5069381	ElseStatement	else		5069361	0					
ANR	5069382	CompoundStatement		14:2:244:296	5069361	0					
ANR	5069383	IdentifierDeclStatement	piPTR pi = NULL ;	516:2:13462:13477	5069361	0	True				
ANR	5069384	IdentifierDecl	pi = NULL		5069361	0					
ANR	5069385	IdentifierDeclType	piPTR		5069361	0					
ANR	5069386	Identifier	pi		5069361	1					
ANR	5069387	AssignmentExpression	pi = NULL		5069361	2		=			
ANR	5069388	Identifier	NULL		5069361	0					
ANR	5069389	Identifier	NULL		5069361	1					
ANR	5069390	IdentifierDeclStatement	int status ;	517:2:13481:13491	5069361	1	True				
ANR	5069391	IdentifierDecl	status		5069361	0					
ANR	5069392	IdentifierDeclType	int		5069361	0					
ANR	5069393	Identifier	status		5069361	1					
ANR	5069394	IdentifierDeclStatement	"int result = ProcAPI :: getProcInfo ( pid , pi , status ) ;"	518:2:13495:13547	5069361	2	True				
ANR	5069395	IdentifierDecl	"result = ProcAPI :: getProcInfo ( pid , pi , status )"		5069361	0					
ANR	5069396	IdentifierDeclType	int		5069361	0					
ANR	5069397	Identifier	result		5069361	1					
ANR	5069398	AssignmentExpression	"result = ProcAPI :: getProcInfo ( pid , pi , status )"		5069361	2		=			
ANR	5069399	Identifier	result		5069361	0					
ANR	5069400	CallExpression	"ProcAPI :: getProcInfo ( pid , pi , status )"		5069361	1					
ANR	5069401	Callee	ProcAPI :: getProcInfo		5069361	0					
ANR	5069402	Identifier	ProcAPI :: getProcInfo		5069361	0					
ANR	5069403	ArgumentList	pid		5069361	1					
ANR	5069404	Argument	pid		5069361	0					
ANR	5069405	Identifier	pid		5069361	0					
ANR	5069406	Argument	pi		5069361	1					
ANR	5069407	Identifier	pi		5069361	0					
ANR	5069408	Argument	status		5069361	2					
ANR	5069409	Identifier	status		5069361	0					
ANR	5069410	IfStatement	if ( result != PROCAPI_FAILURE )		5069361	3					
ANR	5069411	Condition	result != PROCAPI_FAILURE	521:6:13575:13599	5069361	0	True				
ANR	5069412	EqualityExpression	result != PROCAPI_FAILURE		5069361	0		!=			
ANR	5069413	Identifier	result		5069361	0					
ANR	5069414	Identifier	PROCAPI_FAILURE		5069361	1					
ANR	5069415	CompoundStatement		17:33:351:351	5069361	1					
ANR	5069416	ExpressionStatement	"ProcAPI :: printProcInfo ( stderr , pi )"	522:3:13607:13641	5069361	0	True				
ANR	5069417	CallExpression	"ProcAPI :: printProcInfo ( stderr , pi )"		5069361	0					
ANR	5069418	Callee	ProcAPI :: printProcInfo		5069361	0					
ANR	5069419	Identifier	ProcAPI :: printProcInfo		5069361	0					
ANR	5069420	ArgumentList	stderr		5069361	1					
ANR	5069421	Argument	stderr		5069361	0					
ANR	5069422	Identifier	stderr		5069361	0					
ANR	5069423	Argument	pi		5069361	1					
ANR	5069424	Identifier	pi		5069361	0					
ANR	5069425	ElseStatement	else		5069361	0					
ANR	5069426	CompoundStatement		19:8:400:400	5069361	0					
ANR	5069427	ExpressionStatement	"fprintf ( stderr , ""Information about process currently unavailable\\n"" )"	524:3:13656:13730	5069361	0	True				
ANR	5069428	CallExpression	"fprintf ( stderr , ""Information about process currently unavailable\\n"" )"		5069361	0					
ANR	5069429	Callee	fprintf		5069361	0					
ANR	5069430	Identifier	fprintf		5069361	0					
ANR	5069431	ArgumentList	stderr		5069361	1					
ANR	5069432	Argument	stderr		5069361	0					
ANR	5069433	Identifier	stderr		5069361	0					
ANR	5069434	Argument	"""Information about process currently unavailable\\n"""		5069361	1					
ANR	5069435	PrimaryExpression	"""Information about process currently unavailable\\n"""		5069361	0					
ANR	5069436	IfStatement	if ( pi != NULL )		5069361	4					
ANR	5069437	Condition	pi != NULL	529:6:13771:13780	5069361	0	True				
ANR	5069438	EqualityExpression	pi != NULL		5069361	0		!=			
ANR	5069439	Identifier	pi		5069361	0					
ANR	5069440	Identifier	NULL		5069361	1					
ANR	5069441	CompoundStatement		25:18:532:532	5069361	1					
ANR	5069442	Statement	delete	530:3:13788:13793	5069361	0	True				
ANR	5069443	ExpressionStatement	pi	530:10:13795:13797	5069361	1	True				
ANR	5069444	Identifier	pi		5069361	0					
ANR	5069445	ExpressionStatement	pi = NULL	531:3:13802:13811	5069361	2	True				
ANR	5069446	AssignmentExpression	pi = NULL		5069361	0		=			
ANR	5069447	Identifier	pi		5069361	0					
ANR	5069448	Identifier	NULL		5069361	1					
ANR	5069449	ReturnStatement	return 0 ;	537:1:13840:13848	5069361	1	True				
ANR	5069450	PrimaryExpression	0		5069361	0					
ANR	5069451	ReturnType	int		5069361	1					
ANR	5069452	Identifier	handleUncertain		5069361	2					
ANR	5069453	ParameterList	pid_t pid		5069361	3					
ANR	5069454	Parameter	pid_t pid	504:16:13239:13247	5069361	0	True				
ANR	5069455	ParameterType	pid_t		5069361	0					
ANR	5069456	Identifier	pid		5069361	1					
ANR	5069457	CFGEntryNode	ENTRY		5069361		True				
ANR	5069458	CFGExitNode	EXIT		5069361		True				
ANR	5069459	Symbol	result		5069361						
ANR	5069460	Symbol	ProcAPI :: getProcInfo		5069361						
ANR	5069461	Symbol	NULL		5069361						
ANR	5069462	Symbol	PROCAPI_FAILURE		5069361						
ANR	5069463	Symbol	pi		5069361						
ANR	5069464	Symbol	pid		5069361						
ANR	5069465	Symbol	stderr		5069361						
ANR	5069466	Symbol	status		5069361						
ANR	5069467	Function	procapi_perror	549:0:14217:15175							
ANR	5069468	FunctionDef	"procapi_perror (int status , int pid , char * error_str)"		5069467	0					
ANR	5069469	CompoundStatement		551:0:14276:15175	5069467	0					
ANR	5069470	IfStatement	if ( error_str != NULL )		5069467	0					
ANR	5069471	Condition	error_str != NULL	554:5:14327:14343	5069467	0	True				
ANR	5069472	EqualityExpression	error_str != NULL		5069467	0		!=			
ANR	5069473	Identifier	error_str		5069467	0					
ANR	5069474	Identifier	NULL		5069467	1					
ANR	5069475	CompoundStatement		4:24:69:69	5069467	1					
ANR	5069476	ExpressionStatement	"fprintf ( stderr , ""%s:\\t"" , error_str )"	555:2:14350:14385	5069467	0	True				
ANR	5069477	CallExpression	"fprintf ( stderr , ""%s:\\t"" , error_str )"		5069467	0					
ANR	5069478	Callee	fprintf		5069467	0					
ANR	5069479	Identifier	fprintf		5069467	0					
ANR	5069480	ArgumentList	stderr		5069467	1					
ANR	5069481	Argument	stderr		5069467	0					
ANR	5069482	Identifier	stderr		5069467	0					
ANR	5069483	Argument	"""%s:\\t"""		5069467	1					
ANR	5069484	PrimaryExpression	"""%s:\\t"""		5069467	0					
ANR	5069485	Argument	error_str		5069467	2					
ANR	5069486	Identifier	error_str		5069467	0					
ANR	5069487	SwitchStatement	switch ( status )		5069467	1					
ANR	5069488	Condition	status	558:8:14399:14404	5069467	0	True				
ANR	5069489	Identifier	status		5069467	0					
ANR	5069490	CompoundStatement		8:15:129:129	5069467	1					
ANR	5069491	Label	case PROCAPI_NOPID :	561:1:14455:14473	5069467	0	True				
ANR	5069492	Identifier	PROCAPI_NOPID		5069467	0					
ANR	5069493	ExpressionStatement	"fprintf ( stderr , ""ERROR: Could not find the pid[%i]\\n"" , pid )"	562:2:14477:14536	5069467	1	True				
ANR	5069494	CallExpression	"fprintf ( stderr , ""ERROR: Could not find the pid[%i]\\n"" , pid )"		5069467	0					
ANR	5069495	Callee	fprintf		5069467	0					
ANR	5069496	Identifier	fprintf		5069467	0					
ANR	5069497	ArgumentList	stderr		5069467	1					
ANR	5069498	Argument	stderr		5069467	0					
ANR	5069499	Identifier	stderr		5069467	0					
ANR	5069500	Argument	"""ERROR: Could not find the pid[%i]\\n"""		5069467	1					
ANR	5069501	PrimaryExpression	"""ERROR: Could not find the pid[%i]\\n"""		5069467	0					
ANR	5069502	Argument	pid		5069467	2					
ANR	5069503	Identifier	pid		5069467	0					
ANR	5069504	BreakStatement	break ;	563:2:14540:14545	5069467	2	True				
ANR	5069505	Label	case PROCAPI_PERM :	566:1:14582:14599	5069467	3	True				
ANR	5069506	Identifier	PROCAPI_PERM		5069467	0					
ANR	5069507	ExpressionStatement	"fprintf ( stderr , ""ERROR: Do not have permission to get info about pid[%i]\\n"" , pid )"	567:2:14603:14684	5069467	4	True				
ANR	5069508	CallExpression	"fprintf ( stderr , ""ERROR: Do not have permission to get info about pid[%i]\\n"" , pid )"		5069467	0					
ANR	5069509	Callee	fprintf		5069467	0					
ANR	5069510	Identifier	fprintf		5069467	0					
ANR	5069511	ArgumentList	stderr		5069467	1					
ANR	5069512	Argument	stderr		5069467	0					
ANR	5069513	Identifier	stderr		5069467	0					
ANR	5069514	Argument	"""ERROR: Do not have permission to get info about pid[%i]\\n"""		5069467	1					
ANR	5069515	PrimaryExpression	"""ERROR: Do not have permission to get info about pid[%i]\\n"""		5069467	0					
ANR	5069516	Argument	pid		5069467	2					
ANR	5069517	Identifier	pid		5069467	0					
ANR	5069518	BreakStatement	break ;	568:2:14688:14693	5069467	5	True				
ANR	5069519	Label	case PROCAPI_GARBLED :	571:1:14765:14785	5069467	6	True				
ANR	5069520	Identifier	PROCAPI_GARBLED		5069467	0					
ANR	5069521	ExpressionStatement	"fprintf ( stderr , ""ERROR: Kernel gave us garbage for pid[%i]\\n"" , pid )"	572:2:14789:14856	5069467	7	True				
ANR	5069522	CallExpression	"fprintf ( stderr , ""ERROR: Kernel gave us garbage for pid[%i]\\n"" , pid )"		5069467	0					
ANR	5069523	Callee	fprintf		5069467	0					
ANR	5069524	Identifier	fprintf		5069467	0					
ANR	5069525	ArgumentList	stderr		5069467	1					
ANR	5069526	Argument	stderr		5069467	0					
ANR	5069527	Identifier	stderr		5069467	0					
ANR	5069528	Argument	"""ERROR: Kernel gave us garbage for pid[%i]\\n"""		5069467	1					
ANR	5069529	PrimaryExpression	"""ERROR: Kernel gave us garbage for pid[%i]\\n"""		5069467	0					
ANR	5069530	Argument	pid		5069467	2					
ANR	5069531	Identifier	pid		5069467	0					
ANR	5069532	BreakStatement	break ;	573:2:14860:14865	5069467	8	True				
ANR	5069533	Label	case PROCAPI_UNSPECIFIED :	576:1:14940:14964	5069467	9	True				
ANR	5069534	Identifier	PROCAPI_UNSPECIFIED		5069467	0					
ANR	5069535	ExpressionStatement	"fprintf ( stderr , ""ERROR: Unknown error occured trying to get info for pid[%i]\\n"" , pid )"	577:2:14968:15053	5069467	10	True				
ANR	5069536	CallExpression	"fprintf ( stderr , ""ERROR: Unknown error occured trying to get info for pid[%i]\\n"" , pid )"		5069467	0					
ANR	5069537	Callee	fprintf		5069467	0					
ANR	5069538	Identifier	fprintf		5069467	0					
ANR	5069539	ArgumentList	stderr		5069467	1					
ANR	5069540	Argument	stderr		5069467	0					
ANR	5069541	Identifier	stderr		5069467	0					
ANR	5069542	Argument	"""ERROR: Unknown error occured trying to get info for pid[%i]\\n"""		5069467	1					
ANR	5069543	PrimaryExpression	"""ERROR: Unknown error occured trying to get info for pid[%i]\\n"""		5069467	0					
ANR	5069544	Argument	pid		5069467	2					
ANR	5069545	Identifier	pid		5069467	0					
ANR	5069546	BreakStatement	break ;	578:2:15057:15062	5069467	11	True				
ANR	5069547	Label	default :	580:1:15070:15077	5069467	12	True				
ANR	5069548	Identifier	default		5069467	0					
ANR	5069549	ExpressionStatement	"fprintf ( stderr , ""ERROR: Procapi returned an unknown status[%i] for pid[%i]"" , status , pid )"	581:2:15081:15170	5069467	13	True				
ANR	5069550	CallExpression	"fprintf ( stderr , ""ERROR: Procapi returned an unknown status[%i] for pid[%i]"" , status , pid )"		5069467	0					
ANR	5069551	Callee	fprintf		5069467	0					
ANR	5069552	Identifier	fprintf		5069467	0					
ANR	5069553	ArgumentList	stderr		5069467	1					
ANR	5069554	Argument	stderr		5069467	0					
ANR	5069555	Identifier	stderr		5069467	0					
ANR	5069556	Argument	"""ERROR: Procapi returned an unknown status[%i] for pid[%i]"""		5069467	1					
ANR	5069557	PrimaryExpression	"""ERROR: Procapi returned an unknown status[%i] for pid[%i]"""		5069467	0					
ANR	5069558	Argument	status		5069467	2					
ANR	5069559	Identifier	status		5069467	0					
ANR	5069560	Argument	pid		5069467	3					
ANR	5069561	Identifier	pid		5069467	0					
ANR	5069562	ReturnType	void		5069467	1					
ANR	5069563	Identifier	procapi_perror		5069467	2					
ANR	5069564	ParameterList	"int status , int pid , char * error_str"		5069467	3					
ANR	5069565	Parameter	int status	550:15:14238:14247	5069467	0	True				
ANR	5069566	ParameterType	int		5069467	0					
ANR	5069567	Identifier	status		5069467	1					
ANR	5069568	Parameter	int pid	550:27:14250:14256	5069467	1	True				
ANR	5069569	ParameterType	int		5069467	0					
ANR	5069570	Identifier	pid		5069467	1					
ANR	5069571	Parameter	char * error_str	550:36:14259:14273	5069467	2	True				
ANR	5069572	ParameterType	char *		5069467	0					
ANR	5069573	Identifier	error_str		5069467	1					
ANR	5069574	CFGEntryNode	ENTRY		5069467		True				
ANR	5069575	CFGExitNode	EXIT		5069467		True				
ANR	5069576	Symbol	error_str		5069467						
ANR	5069577	Symbol	NULL		5069467						
ANR	5069578	Symbol	pid		5069467						
ANR	5069579	Symbol	stderr		5069467						
ANR	5069580	Symbol	status		5069467						
