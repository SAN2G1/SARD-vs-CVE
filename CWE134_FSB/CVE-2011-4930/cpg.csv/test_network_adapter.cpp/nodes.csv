command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5400131	File	data/converged/CVE-2011-4930_htcondor/test_network_adapter.cpp								
ANR	5400132	DeclStmt									
ANR	5400133	Decl							const char	const char *	VERSION
ANR	5400134	ClassDef	Options	32:0:1057:1170							
ANR	5400135	DeclStmt									
ANR	5400136	Decl							int	int	m_verbosity
ANR	5400137	DeclStmt									
ANR	5400138	Decl							const char	const char *	m_if_name
ANR	5400139	DeclStmt									
ANR	5400140	Decl							const char	const char *	m_address
ANR	5400141	DeclStmt									
ANR	5400142	Decl							bool	bool	m_is_primary
ANR	5400143	DeclStmt									
ANR	5400144	Decl							bool	"bool ( int argc , const char * * argv , Options & opts )"	CheckArgs
ANR	5400145	Function	main	44:0:1235:3116							
ANR	5400146	FunctionDef	"main (int argc , const char * * argv)"		5400145	0					
ANR	5400147	CompoundStatement		46:0:1273:3116	5400145	0					
ANR	5400148	ExpressionStatement	DebugFlags = D_ALWAYS	47:1:1276:1297	5400145	0	True				
ANR	5400149	AssignmentExpression	DebugFlags = D_ALWAYS		5400145	0		=			
ANR	5400150	Identifier	DebugFlags		5400145	0					
ANR	5400151	Identifier	D_ALWAYS		5400145	1					
ANR	5400152	ExpressionStatement	"myDistro -> Init ( argc , argv )"	50:1:1342:1370	5400145	1	True				
ANR	5400153	CallExpression	"myDistro -> Init ( argc , argv )"		5400145	0					
ANR	5400154	Callee	myDistro -> Init		5400145	0					
ANR	5400155	PtrMemberAccess	myDistro -> Init		5400145	0					
ANR	5400156	Identifier	myDistro		5400145	0					
ANR	5400157	Identifier	Init		5400145	1					
ANR	5400158	ArgumentList	argc		5400145	1					
ANR	5400159	Argument	argc		5400145	0					
ANR	5400160	Identifier	argc		5400145	0					
ANR	5400161	Argument	argv		5400145	1					
ANR	5400162	Identifier	argv		5400145	0					
ANR	5400163	ExpressionStatement	config ( )	51:1:1373:1381	5400145	2	True				
ANR	5400164	CallExpression	config ( )		5400145	0					
ANR	5400165	Callee	config		5400145	0					
ANR	5400166	Identifier	config		5400145	0					
ANR	5400167	ArgumentList			5400145	1					
ANR	5400168	ExpressionStatement	Termlog = true	54:1:1418:1432	5400145	3	True				
ANR	5400169	AssignmentExpression	Termlog = true		5400145	0		=			
ANR	5400170	Identifier	Termlog		5400145	0					
ANR	5400171	Identifier	true		5400145	1					
ANR	5400172	ExpressionStatement	"dprintf_config ( ""TEST_HIBERNATION"" , get_param_functions ( ) )"	55:1:1435:1492	5400145	4	True				
ANR	5400173	CallExpression	"dprintf_config ( ""TEST_HIBERNATION"" , get_param_functions ( ) )"		5400145	0					
ANR	5400174	Callee	dprintf_config		5400145	0					
ANR	5400175	Identifier	dprintf_config		5400145	0					
ANR	5400176	ArgumentList	"""TEST_HIBERNATION"""		5400145	1					
ANR	5400177	Argument	"""TEST_HIBERNATION"""		5400145	0					
ANR	5400178	PrimaryExpression	"""TEST_HIBERNATION"""		5400145	0					
ANR	5400179	Argument	get_param_functions ( )		5400145	1					
ANR	5400180	CallExpression	get_param_functions ( )		5400145	0					
ANR	5400181	Callee	get_param_functions		5400145	0					
ANR	5400182	Identifier	get_param_functions		5400145	0					
ANR	5400183	ArgumentList			5400145	1					
ANR	5400184	IdentifierDeclStatement	const char * tmp ;	57:1:1496:1511	5400145	5	True				
ANR	5400185	IdentifierDecl	* tmp		5400145	0					
ANR	5400186	IdentifierDeclType	const char *		5400145	0					
ANR	5400187	Identifier	tmp		5400145	1					
ANR	5400188	IdentifierDeclStatement	int result = 0 ;	58:1:1514:1531	5400145	6	True				
ANR	5400189	IdentifierDecl	result = 0		5400145	0					
ANR	5400190	IdentifierDeclType	int		5400145	0					
ANR	5400191	Identifier	result		5400145	1					
ANR	5400192	AssignmentExpression	result = 0		5400145	2		=			
ANR	5400193	Identifier	result		5400145	0					
ANR	5400194	PrimaryExpression	0		5400145	1					
ANR	5400195	IdentifierDeclStatement	Options opts ;	59:1:1534:1548	5400145	7	True				
ANR	5400196	IdentifierDecl	opts		5400145	0					
ANR	5400197	IdentifierDeclType	Options		5400145	0					
ANR	5400198	Identifier	opts		5400145	1					
ANR	5400199	IfStatement	"if ( CheckArgs ( argc , argv , opts ) )"		5400145	8					
ANR	5400200	Condition	"CheckArgs ( argc , argv , opts )"	61:6:1557:1583	5400145	0	True				
ANR	5400201	CallExpression	"CheckArgs ( argc , argv , opts )"		5400145	0					
ANR	5400202	Callee	CheckArgs		5400145	0					
ANR	5400203	Identifier	CheckArgs		5400145	0					
ANR	5400204	ArgumentList	argc		5400145	1					
ANR	5400205	Argument	argc		5400145	0					
ANR	5400206	Identifier	argc		5400145	0					
ANR	5400207	Argument	argv		5400145	1					
ANR	5400208	Identifier	argv		5400145	0					
ANR	5400209	Argument	opts		5400145	2					
ANR	5400210	Identifier	opts		5400145	0					
ANR	5400211	CompoundStatement		16:36:313:313	5400145	1					
ANR	5400212	ExpressionStatement	exit ( 1 )	62:2:1591:1600	5400145	0	True				
ANR	5400213	CallExpression	exit ( 1 )		5400145	0					
ANR	5400214	Callee	exit		5400145	0					
ANR	5400215	Identifier	exit		5400145	0					
ANR	5400216	ArgumentList	1		5400145	1					
ANR	5400217	Argument	1		5400145	0					
ANR	5400218	PrimaryExpression	1		5400145	0					
ANR	5400219	IdentifierDeclStatement	NetworkAdapterBase * net = NULL ;	65:1:1607:1637	5400145	9	True				
ANR	5400220	IdentifierDecl	* net = NULL		5400145	0					
ANR	5400221	IdentifierDeclType	NetworkAdapterBase *		5400145	0					
ANR	5400222	Identifier	net		5400145	1					
ANR	5400223	AssignmentExpression	* net = NULL		5400145	2		=			
ANR	5400224	Identifier	NULL		5400145	0					
ANR	5400225	Identifier	NULL		5400145	1					
ANR	5400226	IfStatement	if ( opts . m_if_name )		5400145	10					
ANR	5400227	Condition	opts . m_if_name	67:6:1646:1659	5400145	0	True				
ANR	5400228	MemberAccess	opts . m_if_name		5400145	0					
ANR	5400229	Identifier	opts		5400145	0					
ANR	5400230	Identifier	m_if_name		5400145	1					
ANR	5400231	CompoundStatement		22:23:389:389	5400145	1					
ANR	5400232	ExpressionStatement	"printf ( ""Creating network adapter object for name %s\\n"" , opts . m_if_name )"	68:2:1667:1744	5400145	0	True				
ANR	5400233	CallExpression	"printf ( ""Creating network adapter object for name %s\\n"" , opts . m_if_name )"		5400145	0					
ANR	5400234	Callee	printf		5400145	0					
ANR	5400235	Identifier	printf		5400145	0					
ANR	5400236	ArgumentList	"""Creating network adapter object for name %s\\n"""		5400145	1					
ANR	5400237	Argument	"""Creating network adapter object for name %s\\n"""		5400145	0					
ANR	5400238	PrimaryExpression	"""Creating network adapter object for name %s\\n"""		5400145	0					
ANR	5400239	Argument	opts . m_if_name		5400145	1					
ANR	5400240	MemberAccess	opts . m_if_name		5400145	0					
ANR	5400241	Identifier	opts		5400145	0					
ANR	5400242	Identifier	m_if_name		5400145	1					
ANR	5400243	ExpressionStatement	net = NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )	70:2:1748:1812	5400145	1	True				
ANR	5400244	AssignmentExpression	net = NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )		5400145	0		=			
ANR	5400245	Identifier	net		5400145	0					
ANR	5400246	CallExpression	NetworkAdapterBase :: createNetworkAdapter ( opts . m_if_name )		5400145	1					
ANR	5400247	Callee	NetworkAdapterBase :: createNetworkAdapter		5400145	0					
ANR	5400248	Identifier	NetworkAdapterBase :: createNetworkAdapter		5400145	0					
ANR	5400249	ArgumentList	opts . m_if_name		5400145	1					
ANR	5400250	Argument	opts . m_if_name		5400145	0					
ANR	5400251	MemberAccess	opts . m_if_name		5400145	0					
ANR	5400252	Identifier	opts		5400145	0					
ANR	5400253	Identifier	m_if_name		5400145	1					
ANR	5400254	ElseStatement	else		5400145	0					
ANR	5400255	CompoundStatement		28:2:553:568	5400145	0					
ANR	5400256	IdentifierDeclStatement	MyString sinful ;	73:2:1827:1842	5400145	0	True				
ANR	5400257	IdentifierDecl	sinful		5400145	0					
ANR	5400258	IdentifierDeclType	MyString		5400145	0					
ANR	5400259	Identifier	sinful		5400145	1					
ANR	5400260	ExpressionStatement	"sinful . sprintf ( ""<%s:1234>"" , opts . m_address )"	74:2:1846:1891	5400145	1	True				
ANR	5400261	CallExpression	"sinful . sprintf ( ""<%s:1234>"" , opts . m_address )"		5400145	0					
ANR	5400262	Callee	sinful . sprintf		5400145	0					
ANR	5400263	MemberAccess	sinful . sprintf		5400145	0					
ANR	5400264	Identifier	sinful		5400145	0					
ANR	5400265	Identifier	sprintf		5400145	1					
ANR	5400266	ArgumentList	"""<%s:1234>"""		5400145	1					
ANR	5400267	Argument	"""<%s:1234>"""		5400145	0					
ANR	5400268	PrimaryExpression	"""<%s:1234>"""		5400145	0					
ANR	5400269	Argument	opts . m_address		5400145	1					
ANR	5400270	MemberAccess	opts . m_address		5400145	0					
ANR	5400271	Identifier	opts		5400145	0					
ANR	5400272	Identifier	m_address		5400145	1					
ANR	5400273	ExpressionStatement	"printf ( ""Creating network adapter object for %s\\n"" , sinful . Value ( ) )"	75:2:1895:1963	5400145	2	True				
ANR	5400274	CallExpression	"printf ( ""Creating network adapter object for %s\\n"" , sinful . Value ( ) )"		5400145	0					
ANR	5400275	Callee	printf		5400145	0					
ANR	5400276	Identifier	printf		5400145	0					
ANR	5400277	ArgumentList	"""Creating network adapter object for %s\\n"""		5400145	1					
ANR	5400278	Argument	"""Creating network adapter object for %s\\n"""		5400145	0					
ANR	5400279	PrimaryExpression	"""Creating network adapter object for %s\\n"""		5400145	0					
ANR	5400280	Argument	sinful . Value ( )		5400145	1					
ANR	5400281	CallExpression	sinful . Value ( )		5400145	0					
ANR	5400282	Callee	sinful . Value		5400145	0					
ANR	5400283	MemberAccess	sinful . Value		5400145	0					
ANR	5400284	Identifier	sinful		5400145	0					
ANR	5400285	Identifier	Value		5400145	1					
ANR	5400286	ArgumentList			5400145	1					
ANR	5400287	ExpressionStatement	net = NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )	76:2:1967:2031	5400145	3	True				
ANR	5400288	AssignmentExpression	net = NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )		5400145	0		=			
ANR	5400289	Identifier	net		5400145	0					
ANR	5400290	CallExpression	NetworkAdapterBase :: createNetworkAdapter ( sinful . Value ( ) )		5400145	1					
ANR	5400291	Callee	NetworkAdapterBase :: createNetworkAdapter		5400145	0					
ANR	5400292	Identifier	NetworkAdapterBase :: createNetworkAdapter		5400145	0					
ANR	5400293	ArgumentList	sinful . Value ( )		5400145	1					
ANR	5400294	Argument	sinful . Value ( )		5400145	0					
ANR	5400295	CallExpression	sinful . Value ( )		5400145	0					
ANR	5400296	Callee	sinful . Value		5400145	0					
ANR	5400297	MemberAccess	sinful . Value		5400145	0					
ANR	5400298	Identifier	sinful		5400145	0					
ANR	5400299	Identifier	Value		5400145	1					
ANR	5400300	ArgumentList			5400145	1					
ANR	5400301	IfStatement	if ( ! net )		5400145	11					
ANR	5400302	Condition	! net	78:6:2042:2045	5400145	0	True				
ANR	5400303	UnaryOperationExpression	! net		5400145	0					
ANR	5400304	UnaryOperator	!		5400145	0					
ANR	5400305	Identifier	net		5400145	1					
ANR	5400306	CompoundStatement		33:13:775:775	5400145	1					
ANR	5400307	ExpressionStatement	"printf ( ""Error creating adapter\\n"" )"	79:2:2053:2089	5400145	0	True				
ANR	5400308	CallExpression	"printf ( ""Error creating adapter\\n"" )"		5400145	0					
ANR	5400309	Callee	printf		5400145	0					
ANR	5400310	Identifier	printf		5400145	0					
ANR	5400311	ArgumentList	"""Error creating adapter\\n"""		5400145	1					
ANR	5400312	Argument	"""Error creating adapter\\n"""		5400145	0					
ANR	5400313	PrimaryExpression	"""Error creating adapter\\n"""		5400145	0					
ANR	5400314	ExpressionStatement	exit ( 1 )	80:2:2093:2100	5400145	1	True				
ANR	5400315	CallExpression	exit ( 1 )		5400145	0					
ANR	5400316	Callee	exit		5400145	0					
ANR	5400317	Identifier	exit		5400145	0					
ANR	5400318	ArgumentList	1		5400145	1					
ANR	5400319	Argument	1		5400145	0					
ANR	5400320	PrimaryExpression	1		5400145	0					
ANR	5400321	IfStatement	if ( ! net -> getInitStatus ( ) )		5400145	12					
ANR	5400322	Condition	! net -> getInitStatus ( )	84:6:2130:2150	5400145	0	True				
ANR	5400323	UnaryOperationExpression	! net -> getInitStatus ( )		5400145	0					
ANR	5400324	UnaryOperator	!		5400145	0					
ANR	5400325	CallExpression	net -> getInitStatus ( )		5400145	1					
ANR	5400326	Callee	net -> getInitStatus		5400145	0					
ANR	5400327	PtrMemberAccess	net -> getInitStatus		5400145	0					
ANR	5400328	Identifier	net		5400145	0					
ANR	5400329	Identifier	getInitStatus		5400145	1					
ANR	5400330	ArgumentList			5400145	1					
ANR	5400331	CompoundStatement		39:30:880:880	5400145	1					
ANR	5400332	ExpressionStatement	"printf ( ""Initialization of adaptor with address %s failed\\n"" , opts . m_address )"	85:2:2158:2240	5400145	0	True				
ANR	5400333	CallExpression	"printf ( ""Initialization of adaptor with address %s failed\\n"" , opts . m_address )"		5400145	0					
ANR	5400334	Callee	printf		5400145	0					
ANR	5400335	Identifier	printf		5400145	0					
ANR	5400336	ArgumentList	"""Initialization of adaptor with address %s failed\\n"""		5400145	1					
ANR	5400337	Argument	"""Initialization of adaptor with address %s failed\\n"""		5400145	0					
ANR	5400338	PrimaryExpression	"""Initialization of adaptor with address %s failed\\n"""		5400145	0					
ANR	5400339	Argument	opts . m_address		5400145	1					
ANR	5400340	MemberAccess	opts . m_address		5400145	0					
ANR	5400341	Identifier	opts		5400145	0					
ANR	5400342	Identifier	m_address		5400145	1					
ANR	5400343	ExpressionStatement	exit ( 1 )	87:2:2244:2251	5400145	1	True				
ANR	5400344	CallExpression	exit ( 1 )		5400145	0					
ANR	5400345	Callee	exit		5400145	0					
ANR	5400346	Identifier	exit		5400145	0					
ANR	5400347	ArgumentList	1		5400145	1					
ANR	5400348	Argument	1		5400145	0					
ANR	5400349	PrimaryExpression	1		5400145	0					
ANR	5400350	IfStatement	if ( ! net -> exists ( ) )		5400145	13					
ANR	5400351	Condition	! net -> exists ( )	91:6:2297:2310	5400145	0	True				
ANR	5400352	UnaryOperationExpression	! net -> exists ( )		5400145	0					
ANR	5400353	UnaryOperator	!		5400145	0					
ANR	5400354	CallExpression	net -> exists ( )		5400145	1					
ANR	5400355	Callee	net -> exists		5400145	0					
ANR	5400356	PtrMemberAccess	net -> exists		5400145	0					
ANR	5400357	Identifier	net		5400145	0					
ANR	5400358	Identifier	exists		5400145	1					
ANR	5400359	ArgumentList			5400145	1					
ANR	5400360	CompoundStatement		46:23:1040:1040	5400145	1					
ANR	5400361	ExpressionStatement	"printf ( ""Adaptor with address %s not found\\n"" , opts . m_address )"	92:2:2318:2385	5400145	0	True				
ANR	5400362	CallExpression	"printf ( ""Adaptor with address %s not found\\n"" , opts . m_address )"		5400145	0					
ANR	5400363	Callee	printf		5400145	0					
ANR	5400364	Identifier	printf		5400145	0					
ANR	5400365	ArgumentList	"""Adaptor with address %s not found\\n"""		5400145	1					
ANR	5400366	Argument	"""Adaptor with address %s not found\\n"""		5400145	0					
ANR	5400367	PrimaryExpression	"""Adaptor with address %s not found\\n"""		5400145	0					
ANR	5400368	Argument	opts . m_address		5400145	1					
ANR	5400369	MemberAccess	opts . m_address		5400145	0					
ANR	5400370	Identifier	opts		5400145	0					
ANR	5400371	Identifier	m_address		5400145	1					
ANR	5400372	ExpressionStatement	exit ( 1 )	94:2:2389:2396	5400145	1	True				
ANR	5400373	CallExpression	exit ( 1 )		5400145	0					
ANR	5400374	Callee	exit		5400145	0					
ANR	5400375	Identifier	exit		5400145	0					
ANR	5400376	ArgumentList	1		5400145	1					
ANR	5400377	Argument	1		5400145	0					
ANR	5400378	PrimaryExpression	1		5400145	0					
ANR	5400379	ExpressionStatement	tmp = net -> hardwareAddress ( )	98:1:2440:2468	5400145	14	True				
ANR	5400380	AssignmentExpression	tmp = net -> hardwareAddress ( )		5400145	0		=			
ANR	5400381	Identifier	tmp		5400145	0					
ANR	5400382	CallExpression	net -> hardwareAddress ( )		5400145	1					
ANR	5400383	Callee	net -> hardwareAddress		5400145	0					
ANR	5400384	PtrMemberAccess	net -> hardwareAddress		5400145	0					
ANR	5400385	Identifier	net		5400145	0					
ANR	5400386	Identifier	hardwareAddress		5400145	1					
ANR	5400387	ArgumentList			5400145	1					
ANR	5400388	IfStatement	if ( ! tmp || ! strlen ( tmp ) )		5400145	15					
ANR	5400389	Condition	! tmp || ! strlen ( tmp )	99:6:2476:2495	5400145	0	True				
ANR	5400390	OrExpression	! tmp || ! strlen ( tmp )		5400145	0		||			
ANR	5400391	UnaryOperationExpression	! tmp		5400145	0					
ANR	5400392	UnaryOperator	!		5400145	0					
ANR	5400393	Identifier	tmp		5400145	1					
ANR	5400394	UnaryOperationExpression	! strlen ( tmp )		5400145	1					
ANR	5400395	UnaryOperator	!		5400145	0					
ANR	5400396	CallExpression	strlen ( tmp )		5400145	1					
ANR	5400397	Callee	strlen		5400145	0					
ANR	5400398	Identifier	strlen		5400145	0					
ANR	5400399	ArgumentList	tmp		5400145	1					
ANR	5400400	Argument	tmp		5400145	0					
ANR	5400401	Identifier	tmp		5400145	0					
ANR	5400402	ExpressionStatement	"tmp = ""<NONE>"""	99:29:2499:2513	5400145	1	True				
ANR	5400403	AssignmentExpression	"tmp = ""<NONE>"""		5400145	0		=			
ANR	5400404	Identifier	tmp		5400145	0					
ANR	5400405	PrimaryExpression	"""<NONE>"""		5400145	1					
ANR	5400406	ExpressionStatement	"printf ( ""hardware address: %s\\n"" , tmp )"	100:1:2516:2555	5400145	16	True				
ANR	5400407	CallExpression	"printf ( ""hardware address: %s\\n"" , tmp )"		5400145	0					
ANR	5400408	Callee	printf		5400145	0					
ANR	5400409	Identifier	printf		5400145	0					
ANR	5400410	ArgumentList	"""hardware address: %s\\n"""		5400145	1					
ANR	5400411	Argument	"""hardware address: %s\\n"""		5400145	0					
ANR	5400412	PrimaryExpression	"""hardware address: %s\\n"""		5400145	0					
ANR	5400413	Argument	tmp		5400145	1					
ANR	5400414	Identifier	tmp		5400145	0					
ANR	5400415	ExpressionStatement	tmp = net -> subnetMask ( )	102:1:2559:2582	5400145	17	True				
ANR	5400416	AssignmentExpression	tmp = net -> subnetMask ( )		5400145	0		=			
ANR	5400417	Identifier	tmp		5400145	0					
ANR	5400418	CallExpression	net -> subnetMask ( )		5400145	1					
ANR	5400419	Callee	net -> subnetMask		5400145	0					
ANR	5400420	PtrMemberAccess	net -> subnetMask		5400145	0					
ANR	5400421	Identifier	net		5400145	0					
ANR	5400422	Identifier	subnetMask		5400145	1					
ANR	5400423	ArgumentList			5400145	1					
ANR	5400424	IfStatement	if ( ! tmp || ! strlen ( tmp ) )		5400145	18					
ANR	5400425	Condition	! tmp || ! strlen ( tmp )	103:6:2590:2609	5400145	0	True				
ANR	5400426	OrExpression	! tmp || ! strlen ( tmp )		5400145	0		||			
ANR	5400427	UnaryOperationExpression	! tmp		5400145	0					
ANR	5400428	UnaryOperator	!		5400145	0					
ANR	5400429	Identifier	tmp		5400145	1					
ANR	5400430	UnaryOperationExpression	! strlen ( tmp )		5400145	1					
ANR	5400431	UnaryOperator	!		5400145	0					
ANR	5400432	CallExpression	strlen ( tmp )		5400145	1					
ANR	5400433	Callee	strlen		5400145	0					
ANR	5400434	Identifier	strlen		5400145	0					
ANR	5400435	ArgumentList	tmp		5400145	1					
ANR	5400436	Argument	tmp		5400145	0					
ANR	5400437	Identifier	tmp		5400145	0					
ANR	5400438	ExpressionStatement	"tmp = ""<NONE>"""	103:29:2613:2627	5400145	1	True				
ANR	5400439	AssignmentExpression	"tmp = ""<NONE>"""		5400145	0		=			
ANR	5400440	Identifier	tmp		5400145	0					
ANR	5400441	PrimaryExpression	"""<NONE>"""		5400145	1					
ANR	5400442	ExpressionStatement	"printf ( ""subnet: %s\\n"" , tmp )"	104:1:2630:2659	5400145	19	True				
ANR	5400443	CallExpression	"printf ( ""subnet: %s\\n"" , tmp )"		5400145	0					
ANR	5400444	Callee	printf		5400145	0					
ANR	5400445	Identifier	printf		5400145	0					
ANR	5400446	ArgumentList	"""subnet: %s\\n"""		5400145	1					
ANR	5400447	Argument	"""subnet: %s\\n"""		5400145	0					
ANR	5400448	PrimaryExpression	"""subnet: %s\\n"""		5400145	0					
ANR	5400449	Argument	tmp		5400145	1					
ANR	5400450	Identifier	tmp		5400145	0					
ANR	5400451	ExpressionStatement	"printf ( ""wakable: %s\\n"" , net -> isWakeable ( ) ? ""YES"" : ""NO"" )"	106:1:2663:2722	5400145	20	True				
ANR	5400452	CallExpression	"printf ( ""wakable: %s\\n"" , net -> isWakeable ( ) ? ""YES"" : ""NO"" )"		5400145	0					
ANR	5400453	Callee	printf		5400145	0					
ANR	5400454	Identifier	printf		5400145	0					
ANR	5400455	ArgumentList	"""wakable: %s\\n"""		5400145	1					
ANR	5400456	Argument	"""wakable: %s\\n"""		5400145	0					
ANR	5400457	PrimaryExpression	"""wakable: %s\\n"""		5400145	0					
ANR	5400458	Argument	"net -> isWakeable ( ) ? ""YES"" : ""NO"""		5400145	1					
ANR	5400459	ConditionalExpression	"net -> isWakeable ( ) ? ""YES"" : ""NO"""		5400145	0					
ANR	5400460	Condition	net -> isWakeable ( )		5400145	0					
ANR	5400461	CallExpression	net -> isWakeable ( )		5400145	0					
ANR	5400462	Callee	net -> isWakeable		5400145	0					
ANR	5400463	PtrMemberAccess	net -> isWakeable		5400145	0					
ANR	5400464	Identifier	net		5400145	0					
ANR	5400465	Identifier	isWakeable		5400145	1					
ANR	5400466	ArgumentList			5400145	1					
ANR	5400467	PrimaryExpression	"""YES"""		5400145	1					
ANR	5400468	PrimaryExpression	"""NO"""		5400145	2					
ANR	5400469	IdentifierDeclStatement	MyString tmpstr ;	108:1:2726:2741	5400145	21	True				
ANR	5400470	IdentifierDecl	tmpstr		5400145	0					
ANR	5400471	IdentifierDeclType	MyString		5400145	0					
ANR	5400472	Identifier	tmpstr		5400145	1					
ANR	5400473	ExpressionStatement	net -> wakeSupportedString ( tmpstr )	109:1:2744:2778	5400145	22	True				
ANR	5400474	CallExpression	net -> wakeSupportedString ( tmpstr )		5400145	0					
ANR	5400475	Callee	net -> wakeSupportedString		5400145	0					
ANR	5400476	PtrMemberAccess	net -> wakeSupportedString		5400145	0					
ANR	5400477	Identifier	net		5400145	0					
ANR	5400478	Identifier	wakeSupportedString		5400145	1					
ANR	5400479	ArgumentList	tmpstr		5400145	1					
ANR	5400480	Argument	tmpstr		5400145	0					
ANR	5400481	Identifier	tmpstr		5400145	0					
ANR	5400482	ExpressionStatement	"printf ( ""wake support flags: %s\\n"" , tmpstr . Value ( ) )"	110:1:2781:2833	5400145	23	True				
ANR	5400483	CallExpression	"printf ( ""wake support flags: %s\\n"" , tmpstr . Value ( ) )"		5400145	0					
ANR	5400484	Callee	printf		5400145	0					
ANR	5400485	Identifier	printf		5400145	0					
ANR	5400486	ArgumentList	"""wake support flags: %s\\n"""		5400145	1					
ANR	5400487	Argument	"""wake support flags: %s\\n"""		5400145	0					
ANR	5400488	PrimaryExpression	"""wake support flags: %s\\n"""		5400145	0					
ANR	5400489	Argument	tmpstr . Value ( )		5400145	1					
ANR	5400490	CallExpression	tmpstr . Value ( )		5400145	0					
ANR	5400491	Callee	tmpstr . Value		5400145	0					
ANR	5400492	MemberAccess	tmpstr . Value		5400145	0					
ANR	5400493	Identifier	tmpstr		5400145	0					
ANR	5400494	Identifier	Value		5400145	1					
ANR	5400495	ArgumentList			5400145	1					
ANR	5400496	ExpressionStatement	net -> wakeEnabledString ( tmpstr )	112:1:2837:2869	5400145	24	True				
ANR	5400497	CallExpression	net -> wakeEnabledString ( tmpstr )		5400145	0					
ANR	5400498	Callee	net -> wakeEnabledString		5400145	0					
ANR	5400499	PtrMemberAccess	net -> wakeEnabledString		5400145	0					
ANR	5400500	Identifier	net		5400145	0					
ANR	5400501	Identifier	wakeEnabledString		5400145	1					
ANR	5400502	ArgumentList	tmpstr		5400145	1					
ANR	5400503	Argument	tmpstr		5400145	0					
ANR	5400504	Identifier	tmpstr		5400145	0					
ANR	5400505	ExpressionStatement	"printf ( ""wake enable flags: %s\\n"" , tmpstr . Value ( ) )"	113:1:2872:2923	5400145	25	True				
ANR	5400506	CallExpression	"printf ( ""wake enable flags: %s\\n"" , tmpstr . Value ( ) )"		5400145	0					
ANR	5400507	Callee	printf		5400145	0					
ANR	5400508	Identifier	printf		5400145	0					
ANR	5400509	ArgumentList	"""wake enable flags: %s\\n"""		5400145	1					
ANR	5400510	Argument	"""wake enable flags: %s\\n"""		5400145	0					
ANR	5400511	PrimaryExpression	"""wake enable flags: %s\\n"""		5400145	0					
ANR	5400512	Argument	tmpstr . Value ( )		5400145	1					
ANR	5400513	CallExpression	tmpstr . Value ( )		5400145	0					
ANR	5400514	Callee	tmpstr . Value		5400145	0					
ANR	5400515	MemberAccess	tmpstr . Value		5400145	0					
ANR	5400516	Identifier	tmpstr		5400145	0					
ANR	5400517	Identifier	Value		5400145	1					
ANR	5400518	ArgumentList			5400145	1					
ANR	5400519	IdentifierDeclStatement	ClassAd ad ;	115:1:2927:2937	5400145	26	True				
ANR	5400520	IdentifierDecl	ad		5400145	0					
ANR	5400521	IdentifierDeclType	ClassAd		5400145	0					
ANR	5400522	Identifier	ad		5400145	1					
ANR	5400523	ExpressionStatement	net -> publish ( ad )	116:1:2940:2958	5400145	27	True				
ANR	5400524	CallExpression	net -> publish ( ad )		5400145	0					
ANR	5400525	Callee	net -> publish		5400145	0					
ANR	5400526	PtrMemberAccess	net -> publish		5400145	0					
ANR	5400527	Identifier	net		5400145	0					
ANR	5400528	Identifier	publish		5400145	1					
ANR	5400529	ArgumentList	ad		5400145	1					
ANR	5400530	Argument	ad		5400145	0					
ANR	5400531	Identifier	ad		5400145	0					
ANR	5400532	ExpressionStatement	ad . fPrint ( stdout )	117:1:2961:2980	5400145	28	True				
ANR	5400533	CallExpression	ad . fPrint ( stdout )		5400145	0					
ANR	5400534	Callee	ad . fPrint		5400145	0					
ANR	5400535	MemberAccess	ad . fPrint		5400145	0					
ANR	5400536	Identifier	ad		5400145	0					
ANR	5400537	Identifier	fPrint		5400145	1					
ANR	5400538	ArgumentList	stdout		5400145	1					
ANR	5400539	Argument	stdout		5400145	0					
ANR	5400540	Identifier	stdout		5400145	0					
ANR	5400541	Statement	delete	119:1:2984:2989	5400145	29	True				
ANR	5400542	ExpressionStatement	net	119:8:2991:2994	5400145	30	True				
ANR	5400543	Identifier	net		5400145	0					
ANR	5400544	IfStatement	if ( result != 0 && opts . m_verbosity >= 1 )		5400145	31					
ANR	5400545	Condition	result != 0 && opts . m_verbosity >= 1	121:6:3003:3038	5400145	0	True				
ANR	5400546	AndExpression	result != 0 && opts . m_verbosity >= 1		5400145	0		&&			
ANR	5400547	EqualityExpression	result != 0		5400145	0		!=			
ANR	5400548	Identifier	result		5400145	0					
ANR	5400549	PrimaryExpression	0		5400145	1					
ANR	5400550	RelationalExpression	opts . m_verbosity >= 1		5400145	1		>=			
ANR	5400551	MemberAccess	opts . m_verbosity		5400145	0					
ANR	5400552	Identifier	opts		5400145	0					
ANR	5400553	Identifier	m_verbosity		5400145	1					
ANR	5400554	PrimaryExpression	1		5400145	1					
ANR	5400555	CompoundStatement		76:45:1768:1768	5400145	1					
ANR	5400556	ExpressionStatement	"fprintf ( stderr , ""test_network_adapter FAILED\\n"" )"	122:2:3046:3094	5400145	0	True				
ANR	5400557	CallExpression	"fprintf ( stderr , ""test_network_adapter FAILED\\n"" )"		5400145	0					
ANR	5400558	Callee	fprintf		5400145	0					
ANR	5400559	Identifier	fprintf		5400145	0					
ANR	5400560	ArgumentList	stderr		5400145	1					
ANR	5400561	Argument	stderr		5400145	0					
ANR	5400562	Identifier	stderr		5400145	0					
ANR	5400563	Argument	"""test_network_adapter FAILED\\n"""		5400145	1					
ANR	5400564	PrimaryExpression	"""test_network_adapter FAILED\\n"""		5400145	0					
ANR	5400565	ReturnStatement	return result ;	125:1:3101:3114	5400145	32	True				
ANR	5400566	Identifier	result		5400145	0					
ANR	5400567	ReturnType	int		5400145	1					
ANR	5400568	Identifier	main		5400145	2					
ANR	5400569	ParameterList	"int argc , const char * * argv"		5400145	3					
ANR	5400570	Parameter	int argc	45:5:1244:1251	5400145	0	True				
ANR	5400571	ParameterType	int		5400145	0					
ANR	5400572	Identifier	argc		5400145	1					
ANR	5400573	Parameter	const char * * argv	45:15:1254:1270	5400145	1	True				
ANR	5400574	ParameterType	const char * *		5400145	0					
ANR	5400575	Identifier	argv		5400145	1					
ANR	5400576	CFGEntryNode	ENTRY		5400145		True				
ANR	5400577	CFGExitNode	EXIT		5400145		True				
ANR	5400578	Symbol	net -> hardwareAddress		5400145						
ANR	5400579	Symbol	stdout		5400145						
ANR	5400580	Symbol	* net		5400145						
ANR	5400581	Symbol	net -> exists		5400145						
ANR	5400582	Symbol	argv		5400145						
ANR	5400583	Symbol	opts . m_verbosity		5400145						
ANR	5400584	Symbol	CheckArgs		5400145						
ANR	5400585	Symbol	net -> getInitStatus		5400145						
ANR	5400586	Symbol	result		5400145						
ANR	5400587	Symbol	strlen		5400145						
ANR	5400588	Symbol	net -> isWakeable		5400145						
ANR	5400589	Symbol	opts		5400145						
ANR	5400590	Symbol	myDistro		5400145						
ANR	5400591	Symbol	tmp		5400145						
ANR	5400592	Symbol	opts . m_if_name		5400145						
ANR	5400593	Symbol	net		5400145						
ANR	5400594	Symbol	tmpstr		5400145						
ANR	5400595	Symbol	sinful		5400145						
ANR	5400596	Symbol	argc		5400145						
ANR	5400597	Symbol	NULL		5400145						
ANR	5400598	Symbol	ad		5400145						
ANR	5400599	Symbol	Termlog		5400145						
ANR	5400600	Symbol	get_param_functions		5400145						
ANR	5400601	Symbol	D_ALWAYS		5400145						
ANR	5400602	Symbol	sinful . Value		5400145						
ANR	5400603	Symbol	DebugFlags		5400145						
ANR	5400604	Symbol	net -> subnetMask		5400145						
ANR	5400605	Symbol	stderr		5400145						
ANR	5400606	Symbol	opts . m_address		5400145						
ANR	5400607	Symbol	true		5400145						
ANR	5400608	Symbol	NetworkAdapterBase :: createNetworkAdapter		5400145						
ANR	5400609	Symbol	tmpstr . Value		5400145						
ANR	5400610	Function	CheckArgs	128:0:3119:5134							
ANR	5400611	FunctionDef	"CheckArgs (int argc , const char * * argv , Options & opts)"		5400610	0					
ANR	5400612	CompoundStatement		130:0:3178:5134	5400610	0					
ANR	5400613	Statement	const	131:1:3181:3185	5400610	0	True				
ANR	5400614	Statement	char	131:7:3187:3190	5400610	1	True				
ANR	5400615	Statement	*	131:12:3192:3192	5400610	2	True				
ANR	5400616	Statement	usage	131:14:3194:3198	5400610	3	True				
ANR	5400617	Statement	=	131:20:3200:3200	5400610	4	True				
ANR	5400618	Statement	"""Usage: test_network_adapter [options] <IP address|IF name>\\n"""	132:2:3204:3265	5400610	5	True				
ANR	5400619	Statement	"""  -d <level>: debug level (e.g., D_FULLDEBUG)\\n"""	133:2:3269:3317	5400610	6	True				
ANR	5400620	Statement	"""  --debug <level>: debug level (e.g., D_FULLDEBUG)\\n"""	134:2:3321:3374	5400610	7	True				
ANR	5400621	Statement	"""  --usage|--help|-h: print this message and exit\\n"""	135:2:3378:3429	5400610	8	True				
ANR	5400622	Statement	"""  -v: Increase verbosity level by 1\\n"""	136:2:3433:3471	5400610	9	True				
ANR	5400623	Statement	"""  --verbosity <number>: set verbosity level (default is 1)\\n"""	137:2:3475:3536	5400610	10	True				
ANR	5400624	ExpressionStatement	"""  --version: print the version number and compile date\\n"""	138:2:3540:3598	5400610	11	True				
ANR	5400625	PrimaryExpression	"""  --version: print the version number and compile date\\n"""		5400610	0					
ANR	5400626	ExpressionStatement	opts . m_verbosity = 1	140:1:3602:3622	5400610	12	True				
ANR	5400627	AssignmentExpression	opts . m_verbosity = 1		5400610	0		=			
ANR	5400628	MemberAccess	opts . m_verbosity		5400610	0					
ANR	5400629	Identifier	opts		5400610	0					
ANR	5400630	Identifier	m_verbosity		5400610	1					
ANR	5400631	PrimaryExpression	1		5400610	1					
ANR	5400632	ExpressionStatement	opts . m_if_name = NULL	142:1:3626:3647	5400610	13	True				
ANR	5400633	AssignmentExpression	opts . m_if_name = NULL		5400610	0		=			
ANR	5400634	MemberAccess	opts . m_if_name		5400610	0					
ANR	5400635	Identifier	opts		5400610	0					
ANR	5400636	Identifier	m_if_name		5400610	1					
ANR	5400637	Identifier	NULL		5400610	1					
ANR	5400638	ExpressionStatement	"opts . m_address = ""127.0.0.1"""	143:1:3650:3678	5400610	14	True				
ANR	5400639	AssignmentExpression	"opts . m_address = ""127.0.0.1"""		5400610	0		=			
ANR	5400640	MemberAccess	opts . m_address		5400610	0					
ANR	5400641	Identifier	opts		5400610	0					
ANR	5400642	Identifier	m_address		5400610	1					
ANR	5400643	PrimaryExpression	"""127.0.0.1"""		5400610	1					
ANR	5400644	ExpressionStatement	opts . m_is_primary = false	144:1:3681:3706	5400610	15	True				
ANR	5400645	AssignmentExpression	opts . m_is_primary = false		5400610	0		=			
ANR	5400646	MemberAccess	opts . m_is_primary		5400610	0					
ANR	5400647	Identifier	opts		5400610	0					
ANR	5400648	Identifier	m_is_primary		5400610	1					
ANR	5400649	Identifier	false		5400610	1					
ANR	5400650	IdentifierDeclStatement	int optno = 0 ;	147:1:3711:3725	5400610	16	True				
ANR	5400651	IdentifierDecl	optno = 0		5400610	0					
ANR	5400652	IdentifierDeclType	int		5400610	0					
ANR	5400653	Identifier	optno		5400610	1					
ANR	5400654	AssignmentExpression	optno = 0		5400610	2		=			
ANR	5400655	Identifier	optno		5400610	0					
ANR	5400656	PrimaryExpression	0		5400610	1					
ANR	5400657	ForStatement	for ( int index = 1 ; index < argc ; ++ index )		5400610	17					
ANR	5400658	ForInit	int index = 1 ;	148:7:3734:3747	5400610	0	True				
ANR	5400659	IdentifierDeclStatement	int index = 1 ;		5400610	0					
ANR	5400660	IdentifierDecl	index = 1		5400610	0					
ANR	5400661	IdentifierDeclType	int		5400610	0					
ANR	5400662	Identifier	index		5400610	1					
ANR	5400663	AssignmentExpression	index = 1		5400610	2		=			
ANR	5400664	Identifier	index		5400610	0					
ANR	5400665	PrimaryExpression	1		5400610	1					
ANR	5400666	Condition	index < argc	148:22:3749:3760	5400610	1	True				
ANR	5400667	RelationalExpression	index < argc		5400610	0		<			
ANR	5400668	Identifier	index		5400610	0					
ANR	5400669	Identifier	argc		5400610	1					
ANR	5400670	UnaryExpression	++ index	148:36:3763:3769	5400610	2	True				
ANR	5400671	IncDec	++		5400610	0					
ANR	5400672	Identifier	index		5400610	1					
ANR	5400673	CompoundStatement		20:2:598:632	5400610	3					
ANR	5400674	IdentifierDeclStatement	"SimpleArg arg ( argv , argc , index ) ;"	149:2:3777:3811	5400610	0	True				
ANR	5400675	IdentifierDecl	"arg ( argv , argc , index )"		5400610	0					
ANR	5400676	IdentifierDeclType	SimpleArg		5400610	0					
ANR	5400677	Identifier	arg		5400610	1					
ANR	5400678	Expression	"argv , argc , index"		5400610	2					
ANR	5400679	Identifier	argv		5400610	0					
ANR	5400680	Expression	"argc , index"		5400610	1					
ANR	5400681	Identifier	argc		5400610	0					
ANR	5400682	Identifier	index		5400610	1					
ANR	5400683	IfStatement	if ( arg . Error ( ) )		5400610	1					
ANR	5400684	Condition	arg . Error ( )	151:7:3821:3831	5400610	0	True				
ANR	5400685	CallExpression	arg . Error ( )		5400610	0					
ANR	5400686	Callee	arg . Error		5400610	0					
ANR	5400687	MemberAccess	arg . Error		5400610	0					
ANR	5400688	Identifier	arg		5400610	0					
ANR	5400689	Identifier	Error		5400610	1					
ANR	5400690	ArgumentList			5400610	1					
ANR	5400691	CompoundStatement		22:21:656:656	5400610	1					
ANR	5400692	ExpressionStatement	"printf ( ""%s"" , usage )"	152:3:3840:3859	5400610	0	True				
ANR	5400693	CallExpression	"printf ( ""%s"" , usage )"		5400610	0					
ANR	5400694	Callee	printf		5400610	0					
ANR	5400695	Identifier	printf		5400610	0					
ANR	5400696	ArgumentList	"""%s"""		5400610	1					
ANR	5400697	Argument	"""%s"""		5400610	0					
ANR	5400698	PrimaryExpression	"""%s"""		5400610	0					
ANR	5400699	Argument	usage		5400610	1					
ANR	5400700	Identifier	usage		5400610	0					
ANR	5400701	ReturnStatement	return true ;	153:3:3864:3875	5400610	1	True				
ANR	5400702	Identifier	true		5400610	0					
ANR	5400703	IfStatement	"if ( arg . Match ( 'd' , ""debug"" ) )"		5400610	2					
ANR	5400704	Condition	"arg . Match ( 'd' , ""debug"" )"	156:7:3889:3912	5400610	0	True				
ANR	5400705	CallExpression	"arg . Match ( 'd' , ""debug"" )"		5400610	0					
ANR	5400706	Callee	arg . Match		5400610	0					
ANR	5400707	MemberAccess	arg . Match		5400610	0					
ANR	5400708	Identifier	arg		5400610	0					
ANR	5400709	Identifier	Match		5400610	1					
ANR	5400710	ArgumentList	'd'		5400610	1					
ANR	5400711	Argument	'd'		5400610	0					
ANR	5400712	PrimaryExpression	'd'		5400610	0					
ANR	5400713	Argument	"""debug"""		5400610	1					
ANR	5400714	PrimaryExpression	"""debug"""		5400610	0					
ANR	5400715	CompoundStatement		27:34:737:737	5400610	1					
ANR	5400716	IfStatement	if ( arg . hasOpt ( ) )		5400610	0					
ANR	5400717	Condition	arg . hasOpt ( )	157:8:3926:3937	5400610	0	True				
ANR	5400718	CallExpression	arg . hasOpt ( )		5400610	0					
ANR	5400719	Callee	arg . hasOpt		5400610	0					
ANR	5400720	MemberAccess	arg . hasOpt		5400610	0					
ANR	5400721	Identifier	arg		5400610	0					
ANR	5400722	Identifier	hasOpt		5400610	1					
ANR	5400723	ArgumentList			5400610	1					
ANR	5400724	CompoundStatement		28:23:762:762	5400610	1					
ANR	5400725	ExpressionStatement	set_debug_flags ( arg . getOpt ( ) )	158:4:3947:3978	5400610	0	True				
ANR	5400726	CallExpression	set_debug_flags ( arg . getOpt ( ) )		5400610	0					
ANR	5400727	Callee	set_debug_flags		5400610	0					
ANR	5400728	Identifier	set_debug_flags		5400610	0					
ANR	5400729	ArgumentList	arg . getOpt ( )		5400610	1					
ANR	5400730	Argument	arg . getOpt ( )		5400610	0					
ANR	5400731	CallExpression	arg . getOpt ( )		5400610	0					
ANR	5400732	Callee	arg . getOpt		5400610	0					
ANR	5400733	MemberAccess	arg . getOpt		5400610	0					
ANR	5400734	Identifier	arg		5400610	0					
ANR	5400735	Identifier	getOpt		5400610	1					
ANR	5400736	ArgumentList			5400610	1					
ANR	5400737	ExpressionStatement	index = arg . ConsumeOpt ( )	159:4:3984:4009	5400610	1	True				
ANR	5400738	AssignmentExpression	index = arg . ConsumeOpt ( )		5400610	0		=			
ANR	5400739	Identifier	index		5400610	0					
ANR	5400740	CallExpression	arg . ConsumeOpt ( )		5400610	1					
ANR	5400741	Callee	arg . ConsumeOpt		5400610	0					
ANR	5400742	MemberAccess	arg . ConsumeOpt		5400610	0					
ANR	5400743	Identifier	arg		5400610	0					
ANR	5400744	Identifier	ConsumeOpt		5400610	1					
ANR	5400745	ArgumentList			5400610	1					
ANR	5400746	ElseStatement	else		5400610	0					
ANR	5400747	CompoundStatement		31:10:842:842	5400610	0					
ANR	5400748	ExpressionStatement	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"	161:4:4027:4088	5400610	0	True				
ANR	5400749	CallExpression	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"		5400610	0					
ANR	5400750	Callee	fprintf		5400610	0					
ANR	5400751	Identifier	fprintf		5400610	0					
ANR	5400752	ArgumentList	stderr		5400610	1					
ANR	5400753	Argument	stderr		5400610	0					
ANR	5400754	Identifier	stderr		5400610	0					
ANR	5400755	Argument	"""Value needed for %s argument\\n"""		5400610	1					
ANR	5400756	PrimaryExpression	"""Value needed for %s argument\\n"""		5400610	0					
ANR	5400757	Argument	arg . Arg ( )		5400610	2					
ANR	5400758	CallExpression	arg . Arg ( )		5400610	0					
ANR	5400759	Callee	arg . Arg		5400610	0					
ANR	5400760	MemberAccess	arg . Arg		5400610	0					
ANR	5400761	Identifier	arg		5400610	0					
ANR	5400762	Identifier	Arg		5400610	1					
ANR	5400763	ArgumentList			5400610	1					
ANR	5400764	ExpressionStatement	"printf ( ""%s"" , usage )"	162:4:4094:4113	5400610	1	True				
ANR	5400765	CallExpression	"printf ( ""%s"" , usage )"		5400610	0					
ANR	5400766	Callee	printf		5400610	0					
ANR	5400767	Identifier	printf		5400610	0					
ANR	5400768	ArgumentList	"""%s"""		5400610	1					
ANR	5400769	Argument	"""%s"""		5400610	0					
ANR	5400770	PrimaryExpression	"""%s"""		5400610	0					
ANR	5400771	Argument	usage		5400610	1					
ANR	5400772	Identifier	usage		5400610	0					
ANR	5400773	ReturnStatement	return true ;	163:4:4119:4130	5400610	2	True				
ANR	5400774	Identifier	true		5400610	0					
ANR	5400775	ElseStatement	else		5400610	0					
ANR	5400776	IfStatement	"if ( ( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) ) )"		5400610	0					
ANR	5400777	Condition	"( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"	166:14:4152:4233	5400610	0	True				
ANR	5400778	OrExpression	"( arg . Match ( ""usage"" ) ) || ( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"		5400610	0		||			
ANR	5400779	CallExpression	"arg . Match ( ""usage"" )"		5400610	0					
ANR	5400780	Callee	arg . Match		5400610	0					
ANR	5400781	MemberAccess	arg . Match		5400610	0					
ANR	5400782	Identifier	arg		5400610	0					
ANR	5400783	Identifier	Match		5400610	1					
ANR	5400784	ArgumentList	"""usage"""		5400610	1					
ANR	5400785	Argument	"""usage"""		5400610	0					
ANR	5400786	PrimaryExpression	"""usage"""		5400610	0					
ANR	5400787	OrExpression	"( arg . Match ( 'h' ) ) || ( arg . Match ( ""help"" ) )"		5400610	1		||			
ANR	5400788	CallExpression	arg . Match ( 'h' )		5400610	0					
ANR	5400789	Callee	arg . Match		5400610	0					
ANR	5400790	MemberAccess	arg . Match		5400610	0					
ANR	5400791	Identifier	arg		5400610	0					
ANR	5400792	Identifier	Match		5400610	1					
ANR	5400793	ArgumentList	'h'		5400610	1					
ANR	5400794	Argument	'h'		5400610	0					
ANR	5400795	PrimaryExpression	'h'		5400610	0					
ANR	5400796	CallExpression	"arg . Match ( ""help"" )"		5400610	1					
ANR	5400797	Callee	arg . Match		5400610	0					
ANR	5400798	MemberAccess	arg . Match		5400610	0					
ANR	5400799	Identifier	arg		5400610	0					
ANR	5400800	Identifier	Match		5400610	1					
ANR	5400801	ArgumentList	"""help"""		5400610	1					
ANR	5400802	Argument	"""help"""		5400610	0					
ANR	5400803	PrimaryExpression	"""help"""		5400610	0					
ANR	5400804	CompoundStatement		39:30:1059:1059	5400610	1					
ANR	5400805	ExpressionStatement	"printf ( ""%s"" , usage )"	169:3:4243:4262	5400610	0	True				
ANR	5400806	CallExpression	"printf ( ""%s"" , usage )"		5400610	0					
ANR	5400807	Callee	printf		5400610	0					
ANR	5400808	Identifier	printf		5400610	0					
ANR	5400809	ArgumentList	"""%s"""		5400610	1					
ANR	5400810	Argument	"""%s"""		5400610	0					
ANR	5400811	PrimaryExpression	"""%s"""		5400610	0					
ANR	5400812	Argument	usage		5400610	1					
ANR	5400813	Identifier	usage		5400610	0					
ANR	5400814	ReturnStatement	return true ;	170:3:4267:4278	5400610	1	True				
ANR	5400815	Identifier	true		5400610	0					
ANR	5400816	ElseStatement	else		5400610	0					
ANR	5400817	IfStatement	if ( arg . Match ( 'v' ) )		5400610	0					
ANR	5400818	Condition	arg . Match ( 'v' )	172:14:4295:4308	5400610	0	True				
ANR	5400819	CallExpression	arg . Match ( 'v' )		5400610	0					
ANR	5400820	Callee	arg . Match		5400610	0					
ANR	5400821	MemberAccess	arg . Match		5400610	0					
ANR	5400822	Identifier	arg		5400610	0					
ANR	5400823	Identifier	Match		5400610	1					
ANR	5400824	ArgumentList	'v'		5400610	1					
ANR	5400825	Argument	'v'		5400610	0					
ANR	5400826	PrimaryExpression	'v'		5400610	0					
ANR	5400827	CompoundStatement		43:31:1133:1133	5400610	1					
ANR	5400828	ExpressionStatement	opts . m_verbosity ++	173:3:4317:4335	5400610	0	True				
ANR	5400829	PostIncDecOperationExpression	opts . m_verbosity ++		5400610	0					
ANR	5400830	MemberAccess	opts . m_verbosity		5400610	0					
ANR	5400831	Identifier	opts		5400610	0					
ANR	5400832	Identifier	m_verbosity		5400610	1					
ANR	5400833	IncDec	++		5400610	1					
ANR	5400834	ElseStatement	else		5400610	0					
ANR	5400835	IfStatement	"if ( arg . Match ( ""verbosity"" ) )"		5400610	0					
ANR	5400836	Condition	"arg . Match ( ""verbosity"" )"	175:14:4352:4373	5400610	0	True				
ANR	5400837	CallExpression	"arg . Match ( ""verbosity"" )"		5400610	0					
ANR	5400838	Callee	arg . Match		5400610	0					
ANR	5400839	MemberAccess	arg . Match		5400610	0					
ANR	5400840	Identifier	arg		5400610	0					
ANR	5400841	Identifier	Match		5400610	1					
ANR	5400842	ArgumentList	"""verbosity"""		5400610	1					
ANR	5400843	Argument	"""verbosity"""		5400610	0					
ANR	5400844	PrimaryExpression	"""verbosity"""		5400610	0					
ANR	5400845	CompoundStatement		46:39:1198:1198	5400610	1					
ANR	5400846	IfStatement	if ( arg . getOpt ( opts . m_verbosity ) )		5400610	0					
ANR	5400847	Condition	arg . getOpt ( opts . m_verbosity )	176:8:4387:4414	5400610	0	True				
ANR	5400848	CallExpression	arg . getOpt ( opts . m_verbosity )		5400610	0					
ANR	5400849	Callee	arg . getOpt		5400610	0					
ANR	5400850	MemberAccess	arg . getOpt		5400610	0					
ANR	5400851	Identifier	arg		5400610	0					
ANR	5400852	Identifier	getOpt		5400610	1					
ANR	5400853	ArgumentList	opts . m_verbosity		5400610	1					
ANR	5400854	Argument	opts . m_verbosity		5400610	0					
ANR	5400855	MemberAccess	opts . m_verbosity		5400610	0					
ANR	5400856	Identifier	opts		5400610	0					
ANR	5400857	Identifier	m_verbosity		5400610	1					
ANR	5400858	CompoundStatement		47:39:1239:1239	5400610	1					
ANR	5400859	ExpressionStatement	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"	177:4:4424:4485	5400610	0	True				
ANR	5400860	CallExpression	"fprintf ( stderr , ""Value needed for %s argument\\n"" , arg . Arg ( ) )"		5400610	0					
ANR	5400861	Callee	fprintf		5400610	0					
ANR	5400862	Identifier	fprintf		5400610	0					
ANR	5400863	ArgumentList	stderr		5400610	1					
ANR	5400864	Argument	stderr		5400610	0					
ANR	5400865	Identifier	stderr		5400610	0					
ANR	5400866	Argument	"""Value needed for %s argument\\n"""		5400610	1					
ANR	5400867	PrimaryExpression	"""Value needed for %s argument\\n"""		5400610	0					
ANR	5400868	Argument	arg . Arg ( )		5400610	2					
ANR	5400869	CallExpression	arg . Arg ( )		5400610	0					
ANR	5400870	Callee	arg . Arg		5400610	0					
ANR	5400871	MemberAccess	arg . Arg		5400610	0					
ANR	5400872	Identifier	arg		5400610	0					
ANR	5400873	Identifier	Arg		5400610	1					
ANR	5400874	ArgumentList			5400610	1					
ANR	5400875	ExpressionStatement	"printf ( ""%s"" , usage )"	178:4:4491:4510	5400610	1	True				
ANR	5400876	CallExpression	"printf ( ""%s"" , usage )"		5400610	0					
ANR	5400877	Callee	printf		5400610	0					
ANR	5400878	Identifier	printf		5400610	0					
ANR	5400879	ArgumentList	"""%s"""		5400610	1					
ANR	5400880	Argument	"""%s"""		5400610	0					
ANR	5400881	PrimaryExpression	"""%s"""		5400610	0					
ANR	5400882	Argument	usage		5400610	1					
ANR	5400883	Identifier	usage		5400610	0					
ANR	5400884	ReturnStatement	return true ;	179:4:4516:4527	5400610	2	True				
ANR	5400885	Identifier	true		5400610	0					
ANR	5400886	ElseStatement	else		5400610	0					
ANR	5400887	IfStatement	"if ( arg . Match ( ""version"" ) )"		5400610	0					
ANR	5400888	Condition	"arg . Match ( ""version"" )"	182:14:4549:4568	5400610	0	True				
ANR	5400889	CallExpression	"arg . Match ( ""version"" )"		5400610	0					
ANR	5400890	Callee	arg . Match		5400610	0					
ANR	5400891	MemberAccess	arg . Match		5400610	0					
ANR	5400892	Identifier	arg		5400610	0					
ANR	5400893	Identifier	Match		5400610	1					
ANR	5400894	ArgumentList	"""version"""		5400610	1					
ANR	5400895	Argument	"""version"""		5400610	0					
ANR	5400896	PrimaryExpression	"""version"""		5400610	0					
ANR	5400897	CompoundStatement		53:37:1393:1393	5400610	1					
ANR	5400898	ExpressionStatement	"printf ( ""test_log_reader: %s, %s\\n"" , VERSION , __DATE__ )"	183:3:4577:4631	5400610	0	True				
ANR	5400899	CallExpression	"printf ( ""test_log_reader: %s, %s\\n"" , VERSION , __DATE__ )"		5400610	0					
ANR	5400900	Callee	printf		5400610	0					
ANR	5400901	Identifier	printf		5400610	0					
ANR	5400902	ArgumentList	"""test_log_reader: %s, %s\\n"""		5400610	1					
ANR	5400903	Argument	"""test_log_reader: %s, %s\\n"""		5400610	0					
ANR	5400904	PrimaryExpression	"""test_log_reader: %s, %s\\n"""		5400610	0					
ANR	5400905	Argument	VERSION		5400610	1					
ANR	5400906	Identifier	VERSION		5400610	0					
ANR	5400907	Argument	__DATE__		5400610	2					
ANR	5400908	Identifier	__DATE__		5400610	0					
ANR	5400909	ReturnStatement	return true ;	184:3:4636:4647	5400610	1	True				
ANR	5400910	Identifier	true		5400610	0					
ANR	5400911	ElseStatement	else		5400610	0					
ANR	5400912	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( ) )		5400610	0					
ANR	5400913	Condition	! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( )	186:14:4664:4716	5400610	0	True				
ANR	5400914	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 0 ) && arg . isOptInt ( )		5400610	0		&&			
ANR	5400915	UnaryOperationExpression	! arg . ArgIsOpt ( )		5400610	0					
ANR	5400916	UnaryOperator	!		5400610	0					
ANR	5400917	CallExpression	arg . ArgIsOpt ( )		5400610	1					
ANR	5400918	Callee	arg . ArgIsOpt		5400610	0					
ANR	5400919	MemberAccess	arg . ArgIsOpt		5400610	0					
ANR	5400920	Identifier	arg		5400610	0					
ANR	5400921	Identifier	ArgIsOpt		5400610	1					
ANR	5400922	ArgumentList			5400610	1					
ANR	5400923	AndExpression	( optno == 0 ) && arg . isOptInt ( )		5400610	1		&&			
ANR	5400924	EqualityExpression	optno == 0		5400610	0		==			
ANR	5400925	Identifier	optno		5400610	0					
ANR	5400926	PrimaryExpression	0		5400610	1					
ANR	5400927	CallExpression	arg . isOptInt ( )		5400610	1					
ANR	5400928	Callee	arg . isOptInt		5400610	0					
ANR	5400929	MemberAccess	arg . isOptInt		5400610	0					
ANR	5400930	Identifier	arg		5400610	0					
ANR	5400931	Identifier	isOptInt		5400610	1					
ANR	5400932	ArgumentList			5400610	1					
ANR	5400933	CompoundStatement		57:70:1541:1541	5400610	1					
ANR	5400934	ExpressionStatement	opts . m_address = arg . getOpt ( )	187:3:4725:4754	5400610	0	True				
ANR	5400935	AssignmentExpression	opts . m_address = arg . getOpt ( )		5400610	0		=			
ANR	5400936	MemberAccess	opts . m_address		5400610	0					
ANR	5400937	Identifier	opts		5400610	0					
ANR	5400938	Identifier	m_address		5400610	1					
ANR	5400939	CallExpression	arg . getOpt ( )		5400610	1					
ANR	5400940	Callee	arg . getOpt		5400610	0					
ANR	5400941	MemberAccess	arg . getOpt		5400610	0					
ANR	5400942	Identifier	arg		5400610	0					
ANR	5400943	Identifier	getOpt		5400610	1					
ANR	5400944	ArgumentList			5400610	1					
ANR	5400945	ExpressionStatement	optno ++	188:3:4759:4766	5400610	1	True				
ANR	5400946	PostIncDecOperationExpression	optno ++		5400610	0					
ANR	5400947	Identifier	optno		5400610	0					
ANR	5400948	IncDec	++		5400610	1					
ANR	5400949	ElseStatement	else		5400610	0					
ANR	5400950	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 0 ) )		5400610	0					
ANR	5400951	Condition	! arg . ArgIsOpt ( ) && ( optno == 0 )	190:14:4783:4815	5400610	0	True				
ANR	5400952	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 0 )		5400610	0		&&			
ANR	5400953	UnaryOperationExpression	! arg . ArgIsOpt ( )		5400610	0					
ANR	5400954	UnaryOperator	!		5400610	0					
ANR	5400955	CallExpression	arg . ArgIsOpt ( )		5400610	1					
ANR	5400956	Callee	arg . ArgIsOpt		5400610	0					
ANR	5400957	MemberAccess	arg . ArgIsOpt		5400610	0					
ANR	5400958	Identifier	arg		5400610	0					
ANR	5400959	Identifier	ArgIsOpt		5400610	1					
ANR	5400960	ArgumentList			5400610	1					
ANR	5400961	EqualityExpression	optno == 0		5400610	1		==			
ANR	5400962	Identifier	optno		5400610	0					
ANR	5400963	PrimaryExpression	0		5400610	1					
ANR	5400964	CompoundStatement		61:50:1640:1640	5400610	1					
ANR	5400965	ExpressionStatement	opts . m_if_name = arg . getOpt ( )	191:3:4824:4853	5400610	0	True				
ANR	5400966	AssignmentExpression	opts . m_if_name = arg . getOpt ( )		5400610	0		=			
ANR	5400967	MemberAccess	opts . m_if_name		5400610	0					
ANR	5400968	Identifier	opts		5400610	0					
ANR	5400969	Identifier	m_if_name		5400610	1					
ANR	5400970	CallExpression	arg . getOpt ( )		5400610	1					
ANR	5400971	Callee	arg . getOpt		5400610	0					
ANR	5400972	MemberAccess	arg . getOpt		5400610	0					
ANR	5400973	Identifier	arg		5400610	0					
ANR	5400974	Identifier	getOpt		5400610	1					
ANR	5400975	ArgumentList			5400610	1					
ANR	5400976	ExpressionStatement	optno ++	192:3:4858:4865	5400610	1	True				
ANR	5400977	PostIncDecOperationExpression	optno ++		5400610	0					
ANR	5400978	Identifier	optno		5400610	0					
ANR	5400979	IncDec	++		5400610	1					
ANR	5400980	ElseStatement	else		5400610	0					
ANR	5400981	IfStatement	if ( ! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( ) )		5400610	0					
ANR	5400982	Condition	! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( )	194:14:4882:4935	5400610	0	True				
ANR	5400983	AndExpression	! arg . ArgIsOpt ( ) && ( optno == 1 ) && arg . isOptBool ( )		5400610	0		&&			
ANR	5400984	UnaryOperationExpression	! arg . ArgIsOpt ( )		5400610	0					
ANR	5400985	UnaryOperator	!		5400610	0					
ANR	5400986	CallExpression	arg . ArgIsOpt ( )		5400610	1					
ANR	5400987	Callee	arg . ArgIsOpt		5400610	0					
ANR	5400988	MemberAccess	arg . ArgIsOpt		5400610	0					
ANR	5400989	Identifier	arg		5400610	0					
ANR	5400990	Identifier	ArgIsOpt		5400610	1					
ANR	5400991	ArgumentList			5400610	1					
ANR	5400992	AndExpression	( optno == 1 ) && arg . isOptBool ( )		5400610	1		&&			
ANR	5400993	EqualityExpression	optno == 1		5400610	0		==			
ANR	5400994	Identifier	optno		5400610	0					
ANR	5400995	PrimaryExpression	1		5400610	1					
ANR	5400996	CallExpression	arg . isOptBool ( )		5400610	1					
ANR	5400997	Callee	arg . isOptBool		5400610	0					
ANR	5400998	MemberAccess	arg . isOptBool		5400610	0					
ANR	5400999	Identifier	arg		5400610	0					
ANR	5401000	Identifier	isOptBool		5400610	1					
ANR	5401001	ArgumentList			5400610	1					
ANR	5401002	CompoundStatement		65:71:1760:1760	5400610	1					
ANR	5401003	ExpressionStatement	"arg . getOpt ( opts . m_is_primary , false )"	195:3:4944:4980	5400610	0	True				
ANR	5401004	CallExpression	"arg . getOpt ( opts . m_is_primary , false )"		5400610	0					
ANR	5401005	Callee	arg . getOpt		5400610	0					
ANR	5401006	MemberAccess	arg . getOpt		5400610	0					
ANR	5401007	Identifier	arg		5400610	0					
ANR	5401008	Identifier	getOpt		5400610	1					
ANR	5401009	ArgumentList	opts . m_is_primary		5400610	1					
ANR	5401010	Argument	opts . m_is_primary		5400610	0					
ANR	5401011	MemberAccess	opts . m_is_primary		5400610	0					
ANR	5401012	Identifier	opts		5400610	0					
ANR	5401013	Identifier	m_is_primary		5400610	1					
ANR	5401014	Argument	false		5400610	1					
ANR	5401015	Identifier	false		5400610	0					
ANR	5401016	ExpressionStatement	optno ++	196:3:4985:4992	5400610	1	True				
ANR	5401017	PostIncDecOperationExpression	optno ++		5400610	0					
ANR	5401018	Identifier	optno		5400610	0					
ANR	5401019	IncDec	++		5400610	1					
ANR	5401020	ElseStatement	else		5400610	0					
ANR	5401021	CompoundStatement		69:9:1825:1825	5400610	0					
ANR	5401022	ExpressionStatement	"fprintf ( stderr , ""Unrecognized argument: <%s>\\n"" , arg . Arg ( ) )"	199:3:5009:5069	5400610	0	True				
ANR	5401023	CallExpression	"fprintf ( stderr , ""Unrecognized argument: <%s>\\n"" , arg . Arg ( ) )"		5400610	0					
ANR	5401024	Callee	fprintf		5400610	0					
ANR	5401025	Identifier	fprintf		5400610	0					
ANR	5401026	ArgumentList	stderr		5400610	1					
ANR	5401027	Argument	stderr		5400610	0					
ANR	5401028	Identifier	stderr		5400610	0					
ANR	5401029	Argument	"""Unrecognized argument: <%s>\\n"""		5400610	1					
ANR	5401030	PrimaryExpression	"""Unrecognized argument: <%s>\\n"""		5400610	0					
ANR	5401031	Argument	arg . Arg ( )		5400610	2					
ANR	5401032	CallExpression	arg . Arg ( )		5400610	0					
ANR	5401033	Callee	arg . Arg		5400610	0					
ANR	5401034	MemberAccess	arg . Arg		5400610	0					
ANR	5401035	Identifier	arg		5400610	0					
ANR	5401036	Identifier	Arg		5400610	1					
ANR	5401037	ArgumentList			5400610	1					
ANR	5401038	ExpressionStatement	"printf ( ""%s"" , usage )"	200:3:5074:5093	5400610	1	True				
ANR	5401039	CallExpression	"printf ( ""%s"" , usage )"		5400610	0					
ANR	5401040	Callee	printf		5400610	0					
ANR	5401041	Identifier	printf		5400610	0					
ANR	5401042	ArgumentList	"""%s"""		5400610	1					
ANR	5401043	Argument	"""%s"""		5400610	0					
ANR	5401044	PrimaryExpression	"""%s"""		5400610	0					
ANR	5401045	Argument	usage		5400610	1					
ANR	5401046	Identifier	usage		5400610	0					
ANR	5401047	ReturnStatement	return true ;	201:3:5098:5109	5400610	2	True				
ANR	5401048	Identifier	true		5400610	0					
ANR	5401049	ReturnStatement	return false ;	205:1:5120:5132	5400610	18	True				
ANR	5401050	Identifier	false		5400610	0					
ANR	5401051	ReturnType	bool		5400610	1					
ANR	5401052	Identifier	CheckArgs		5400610	2					
ANR	5401053	ParameterList	"int argc , const char * * argv , Options & opts"		5400610	3					
ANR	5401054	Parameter	int argc	129:10:3134:3141	5400610	0	True				
ANR	5401055	ParameterType	int		5400610	0					
ANR	5401056	Identifier	argc		5400610	1					
ANR	5401057	Parameter	const char * * argv	129:20:3144:3160	5400610	1	True				
ANR	5401058	ParameterType	const char * *		5400610	0					
ANR	5401059	Identifier	argv		5400610	1					
ANR	5401060	Parameter	Options & opts	129:39:3163:3175	5400610	2	True				
ANR	5401061	ParameterType	Options &		5400610	0					
ANR	5401062	Identifier	opts		5400610	1					
ANR	5401063	CFGEntryNode	ENTRY		5400610		True				
ANR	5401064	CFGExitNode	EXIT		5400610		True				
ANR	5401065	Symbol	arg . Match		5400610						
ANR	5401066	Symbol	usage		5400610						
ANR	5401067	Symbol	arg . isOptBool		5400610						
ANR	5401068	Symbol	argv		5400610						
ANR	5401069	Symbol	opts . m_verbosity		5400610						
ANR	5401070	Symbol	opts		5400610						
ANR	5401071	Symbol	arg		5400610						
ANR	5401072	Symbol	opts . m_if_name		5400610						
ANR	5401073	Symbol	argc		5400610						
ANR	5401074	Symbol	NULL		5400610						
ANR	5401075	Symbol	optno		5400610						
ANR	5401076	Symbol	false		5400610						
ANR	5401077	Symbol	index		5400610						
ANR	5401078	Symbol	arg . Error		5400610						
ANR	5401079	Symbol	__DATE__		5400610						
ANR	5401080	Symbol	arg . isOptInt		5400610						
ANR	5401081	Symbol	stderr		5400610						
ANR	5401082	Symbol	arg . ArgIsOpt		5400610						
ANR	5401083	Symbol	opts . m_address		5400610						
ANR	5401084	Symbol	arg . ConsumeOpt		5400610						
ANR	5401085	Symbol	arg . Arg		5400610						
ANR	5401086	Symbol	arg . hasOpt		5400610						
ANR	5401087	Symbol	opts . m_is_primary		5400610						
ANR	5401088	Symbol	true		5400610						
ANR	5401089	Symbol	VERSION		5400610						
ANR	5401090	Symbol	arg . getOpt		5400610						
