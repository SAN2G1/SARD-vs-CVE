command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	169774	File	data/converged/CVE-2011-4930_htcondor/DagInfo.cpp								
ANR	169775	Function	Dag :: skeletonize	46:0:1181:2720							
ANR	169776	FunctionDef	Dag :: skeletonize ()		169775	0					
ANR	169777	CompoundStatement		47:0:1209:2720	169775	0					
ANR	169778	IdentifierDeclStatement	"int i , j ;"	48:1:1212:1219	169775	0	True				
ANR	169779	IdentifierDecl	i		169775	0					
ANR	169780	IdentifierDeclType	int		169775	0					
ANR	169781	Identifier	i		169775	1					
ANR	169782	IdentifierDecl	j		169775	1					
ANR	169783	IdentifierDeclType	int		169775	0					
ANR	169784	Identifier	j		169775	1					
ANR	169785	IdentifierDeclStatement	Graph tc2 ;	51:1:1269:1278	169775	1	True				
ANR	169786	IdentifierDecl	tc2		169775	0					
ANR	169787	IdentifierDeclType	Graph		169775	0					
ANR	169788	Identifier	tc2		169775	1					
ANR	169789	ExpressionStatement	tc2 . initializeWith ( * this )	52:1:1281:1306	169775	2	True				
ANR	169790	CallExpression	tc2 . initializeWith ( * this )		169775	0					
ANR	169791	Callee	tc2 . initializeWith		169775	0					
ANR	169792	MemberAccess	tc2 . initializeWith		169775	0					
ANR	169793	Identifier	tc2		169775	0					
ANR	169794	Identifier	initializeWith		169775	1					
ANR	169795	ArgumentList	* this		169775	1					
ANR	169796	Argument	* this		169775	0					
ANR	169797	UnaryOperationExpression	* this		169775	0					
ANR	169798	UnaryOperator	*		169775	0					
ANR	169799	Identifier	this		169775	1					
ANR	169800	ExpressionStatement	tc2 . closeTransitively ( )	53:1:1309:1332	169775	3	True				
ANR	169801	CallExpression	tc2 . closeTransitively ( )		169775	0					
ANR	169802	Callee	tc2 . closeTransitively		169775	0					
ANR	169803	MemberAccess	tc2 . closeTransitively		169775	0					
ANR	169804	Identifier	tc2		169775	0					
ANR	169805	Identifier	closeTransitively		169775	1					
ANR	169806	ArgumentList			169775	1					
ANR	169807	ExpressionStatement	tc2 . square ( )	54:1:1335:1347	169775	4	True				
ANR	169808	CallExpression	tc2 . square ( )		169775	0					
ANR	169809	Callee	tc2 . square		169775	0					
ANR	169810	MemberAccess	tc2 . square		169775	0					
ANR	169811	Identifier	tc2		169775	0					
ANR	169812	Identifier	square		169775	1					
ANR	169813	ArgumentList			169775	1					
ANR	169814	IdentifierDeclStatement	Resizable2DArray < int > skelArcTable ;	57:1:1398:1432	169775	5	True				
ANR	169815	IdentifierDecl	skelArcTable		169775	0					
ANR	169816	IdentifierDeclType	Resizable2DArray < int >		169775	0					
ANR	169817	Identifier	skelArcTable		169775	1					
ANR	169818	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	58:1:1435:1461	169775	6	True				
ANR	169819	IdentifierDecl	numNodes = getNumNodes ( )		169775	0					
ANR	169820	IdentifierDeclType	int		169775	0					
ANR	169821	Identifier	numNodes		169775	1					
ANR	169822	AssignmentExpression	numNodes = getNumNodes ( )		169775	2		=			
ANR	169823	Identifier	numNodes		169775	0					
ANR	169824	CallExpression	getNumNodes ( )		169775	1					
ANR	169825	Callee	getNumNodes		169775	0					
ANR	169826	Identifier	getNumNodes		169775	0					
ANR	169827	ArgumentList			169775	1					
ANR	169828	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		169775	7					
ANR	169829	ForInit	i = 0 ;	59:6:1469:1472	169775	0	True				
ANR	169830	AssignmentExpression	i = 0		169775	0		=			
ANR	169831	Identifier	i		169775	0					
ANR	169832	PrimaryExpression	0		169775	1					
ANR	169833	Condition	i < numNodes	59:11:1474:1483	169775	1	True				
ANR	169834	RelationalExpression	i < numNodes		169775	0		<			
ANR	169835	Identifier	i		169775	0					
ANR	169836	Identifier	numNodes		169775	1					
ANR	169837	PostIncDecOperationExpression	i ++	59:23:1486:1488	169775	2	True				
ANR	169838	Identifier	i		169775	0					
ANR	169839	IncDec	++		169775	1					
ANR	169840	ExpressionStatement	skelArcTable . appendRow ( )	60:2:1494:1518	169775	3	True				
ANR	169841	CallExpression	skelArcTable . appendRow ( )		169775	0					
ANR	169842	Callee	skelArcTable . appendRow		169775	0					
ANR	169843	MemberAccess	skelArcTable . appendRow		169775	0					
ANR	169844	Identifier	skelArcTable		169775	0					
ANR	169845	Identifier	appendRow		169775	1					
ANR	169846	ArgumentList			169775	1					
ANR	169847	IdentifierDeclStatement	int * colorTable ;	63:1:1545:1560	169775	8	True				
ANR	169848	IdentifierDecl	* colorTable		169775	0					
ANR	169849	IdentifierDeclType	int *		169775	0					
ANR	169850	Identifier	colorTable		169775	1					
ANR	169851	ExpressionStatement	colorTable = new int [ numNodes ]	64:1:1563:1593	169775	9	True				
ANR	169852	AssignmentExpression	colorTable = new int [ numNodes ]		169775	0		=			
ANR	169853	Identifier	colorTable		169775	0					
ANR	169854	Identifier	numNodes		169775	1					
ANR	169855	IfStatement	if ( NULL == colorTable )		169775	10					
ANR	169856	Condition	NULL == colorTable	65:5:1600:1615	169775	0	True				
ANR	169857	EqualityExpression	NULL == colorTable		169775	0		==			
ANR	169858	Identifier	NULL		169775	0					
ANR	169859	Identifier	colorTable		169775	1					
ANR	169860	ThrowStatement	"throw ""Dag::skeletonize, colorTable is NULL"" ;"	66:2:1621:1665	169775	1	True				
ANR	169861	PrimaryExpression	"""Dag::skeletonize, colorTable is NULL"""		169775	0					
ANR	169862	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		169775	11					
ANR	169863	ForInit	i = 0 ;	67:6:1673:1676	169775	0	True				
ANR	169864	AssignmentExpression	i = 0		169775	0		=			
ANR	169865	Identifier	i		169775	0					
ANR	169866	PrimaryExpression	0		169775	1					
ANR	169867	Condition	i < numNodes	67:11:1678:1687	169775	1	True				
ANR	169868	RelationalExpression	i < numNodes		169775	0		<			
ANR	169869	Identifier	i		169775	0					
ANR	169870	Identifier	numNodes		169775	1					
ANR	169871	PostIncDecOperationExpression	i ++	67:23:1690:1692	169775	2	True				
ANR	169872	Identifier	i		169775	0					
ANR	169873	IncDec	++		169775	1					
ANR	169874	ExpressionStatement	colorTable [ i ] = - 1	68:2:1698:1716	169775	3	True				
ANR	169875	AssignmentExpression	colorTable [ i ] = - 1		169775	0		=			
ANR	169876	ArrayIndexing	colorTable [ i ]		169775	0					
ANR	169877	Identifier	colorTable		169775	0					
ANR	169878	Identifier	i		169775	1					
ANR	169879	UnaryOperationExpression	- 1		169775	1					
ANR	169880	UnaryOperator	-		169775	0					
ANR	169881	PrimaryExpression	1		169775	1					
ANR	169882	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		169775	12					
ANR	169883	ForInit	i = 0 ;	71:6:1813:1816	169775	0	True				
ANR	169884	AssignmentExpression	i = 0		169775	0		=			
ANR	169885	Identifier	i		169775	0					
ANR	169886	PrimaryExpression	0		169775	1					
ANR	169887	Condition	i < numNodes	71:11:1818:1827	169775	1	True				
ANR	169888	RelationalExpression	i < numNodes		169775	0		<			
ANR	169889	Identifier	i		169775	0					
ANR	169890	Identifier	numNodes		169775	1					
ANR	169891	PostIncDecOperationExpression	i ++	71:23:1830:1832	169775	2	True				
ANR	169892	Identifier	i		169775	0					
ANR	169893	IncDec	++		169775	1					
ANR	169894	CompoundStatement		29:2:783:814	169775	3					
ANR	169895	IdentifierDeclStatement	int numArcs = tc2 . getNumArcs ( i ) ;	75:2:1993:2024	169775	0	True				
ANR	169896	IdentifierDecl	numArcs = tc2 . getNumArcs ( i )		169775	0					
ANR	169897	IdentifierDeclType	int		169775	0					
ANR	169898	Identifier	numArcs		169775	1					
ANR	169899	AssignmentExpression	numArcs = tc2 . getNumArcs ( i )		169775	2		=			
ANR	169900	Identifier	numArcs		169775	0					
ANR	169901	CallExpression	tc2 . getNumArcs ( i )		169775	1					
ANR	169902	Callee	tc2 . getNumArcs		169775	0					
ANR	169903	MemberAccess	tc2 . getNumArcs		169775	0					
ANR	169904	Identifier	tc2		169775	0					
ANR	169905	Identifier	getNumArcs		169775	1					
ANR	169906	ArgumentList	i		169775	1					
ANR	169907	Argument	i		169775	0					
ANR	169908	Identifier	i		169775	0					
ANR	169909	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		169775	1					
ANR	169910	ForInit	j = 0 ;	76:7:2033:2036	169775	0	True				
ANR	169911	AssignmentExpression	j = 0		169775	0		=			
ANR	169912	Identifier	j		169775	0					
ANR	169913	PrimaryExpression	0		169775	1					
ANR	169914	Condition	j < numArcs	76:12:2038:2046	169775	1	True				
ANR	169915	RelationalExpression	j < numArcs		169775	0		<			
ANR	169916	Identifier	j		169775	0					
ANR	169917	Identifier	numArcs		169775	1					
ANR	169918	PostIncDecOperationExpression	j ++	76:23:2049:2051	169775	2	True				
ANR	169919	Identifier	j		169775	0					
ANR	169920	IncDec	++		169775	1					
ANR	169921	ExpressionStatement	"colorTable [ tc2 . getArc ( i , j ) ] = i"	77:3:2058:2091	169775	3	True				
ANR	169922	AssignmentExpression	"colorTable [ tc2 . getArc ( i , j ) ] = i"		169775	0		=			
ANR	169923	ArrayIndexing	"colorTable [ tc2 . getArc ( i , j ) ]"		169775	0					
ANR	169924	Identifier	colorTable		169775	0					
ANR	169925	CallExpression	"tc2 . getArc ( i , j )"		169775	1					
ANR	169926	Callee	tc2 . getArc		169775	0					
ANR	169927	MemberAccess	tc2 . getArc		169775	0					
ANR	169928	Identifier	tc2		169775	0					
ANR	169929	Identifier	getArc		169775	1					
ANR	169930	ArgumentList	i		169775	1					
ANR	169931	Argument	i		169775	0					
ANR	169932	Identifier	i		169775	0					
ANR	169933	Argument	j		169775	1					
ANR	169934	Identifier	j		169775	0					
ANR	169935	Identifier	i		169775	1					
ANR	169936	ExpressionStatement	numArcs = getNumArcs ( i )	81:2:2232:2255	169775	2	True				
ANR	169937	AssignmentExpression	numArcs = getNumArcs ( i )		169775	0		=			
ANR	169938	Identifier	numArcs		169775	0					
ANR	169939	CallExpression	getNumArcs ( i )		169775	1					
ANR	169940	Callee	getNumArcs		169775	0					
ANR	169941	Identifier	getNumArcs		169775	0					
ANR	169942	ArgumentList	i		169775	1					
ANR	169943	Argument	i		169775	0					
ANR	169944	Identifier	i		169775	0					
ANR	169945	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		169775	3					
ANR	169946	ForInit	j = 0 ;	82:7:2264:2267	169775	0	True				
ANR	169947	AssignmentExpression	j = 0		169775	0		=			
ANR	169948	Identifier	j		169775	0					
ANR	169949	PrimaryExpression	0		169775	1					
ANR	169950	Condition	j < numArcs	82:12:2269:2277	169775	1	True				
ANR	169951	RelationalExpression	j < numArcs		169775	0		<			
ANR	169952	Identifier	j		169775	0					
ANR	169953	Identifier	numArcs		169775	1					
ANR	169954	PostIncDecOperationExpression	j ++	82:23:2280:2282	169775	2	True				
ANR	169955	Identifier	j		169775	0					
ANR	169956	IncDec	++		169775	1					
ANR	169957	CompoundStatement		37:3:1081:1104	169775	3					
ANR	169958	IdentifierDeclStatement	"int child = getArc ( i , j ) ;"	83:3:2291:2314	169775	0	True				
ANR	169959	IdentifierDecl	"child = getArc ( i , j )"		169775	0					
ANR	169960	IdentifierDeclType	int		169775	0					
ANR	169961	Identifier	child		169775	1					
ANR	169962	AssignmentExpression	"child = getArc ( i , j )"		169775	2		=			
ANR	169963	Identifier	child		169775	0					
ANR	169964	CallExpression	"getArc ( i , j )"		169775	1					
ANR	169965	Callee	getArc		169775	0					
ANR	169966	Identifier	getArc		169775	0					
ANR	169967	ArgumentList	i		169775	1					
ANR	169968	Argument	i		169775	0					
ANR	169969	Identifier	i		169775	0					
ANR	169970	Argument	j		169775	1					
ANR	169971	Identifier	j		169775	0					
ANR	169972	IfStatement	if ( colorTable [ child ] < i )		169775	1					
ANR	169973	Condition	colorTable [ child ] < i	84:7:2323:2343	169775	0	True				
ANR	169974	RelationalExpression	colorTable [ child ] < i		169775	0		<			
ANR	169975	ArrayIndexing	colorTable [ child ]		169775	0					
ANR	169976	Identifier	colorTable		169775	0					
ANR	169977	Identifier	child		169775	1					
ANR	169978	Identifier	i		169775	1					
ANR	169979	ExpressionStatement	"skelArcTable . append ( i , child )"	85:4:2351:2379	169775	1	True				
ANR	169980	CallExpression	"skelArcTable . append ( i , child )"		169775	0					
ANR	169981	Callee	skelArcTable . append		169775	0					
ANR	169982	MemberAccess	skelArcTable . append		169775	0					
ANR	169983	Identifier	skelArcTable		169775	0					
ANR	169984	Identifier	append		169775	1					
ANR	169985	ArgumentList	i		169775	1					
ANR	169986	Argument	i		169775	0					
ANR	169987	Identifier	i		169775	0					
ANR	169988	Argument	child		169775	1					
ANR	169989	Identifier	child		169775	0					
ANR	169990	ExpressionStatement		86:3:2428:2428	169775	4	True				
ANR	169991	ExpressionStatement		87:2:2432:2432	169775	13	True				
ANR	169992	Statement	delete	89:1:2436:2441	169775	14	True				
ANR	169993	Statement	[	89:7:2442:2442	169775	15	True				
ANR	169994	Statement	]	89:8:2443:2443	169775	16	True				
ANR	169995	ExpressionStatement	colorTable	89:10:2445:2455	169775	17	True				
ANR	169996	Identifier	colorTable		169775	0					
ANR	169997	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		169775	18					
ANR	169998	ForInit	i = 0 ;	92:6:2518:2521	169775	0	True				
ANR	169999	AssignmentExpression	i = 0		169775	0		=			
ANR	170000	Identifier	i		169775	0					
ANR	170001	PrimaryExpression	0		169775	1					
ANR	170002	Condition	i < numNodes	92:11:2523:2532	169775	1	True				
ANR	170003	RelationalExpression	i < numNodes		169775	0		<			
ANR	170004	Identifier	i		169775	0					
ANR	170005	Identifier	numNodes		169775	1					
ANR	170006	PostIncDecOperationExpression	i ++	92:23:2535:2537	169775	2	True				
ANR	170007	Identifier	i		169775	0					
ANR	170008	IncDec	++		169775	1					
ANR	170009	CompoundStatement		48:2:1359:1397	169775	3					
ANR	170010	ExpressionStatement	arcTable . resetRow ( i )	93:2:2545:2565	169775	0	True				
ANR	170011	CallExpression	arcTable . resetRow ( i )		169775	0					
ANR	170012	Callee	arcTable . resetRow		169775	0					
ANR	170013	MemberAccess	arcTable . resetRow		169775	0					
ANR	170014	Identifier	arcTable		169775	0					
ANR	170015	Identifier	resetRow		169775	1					
ANR	170016	ArgumentList	i		169775	1					
ANR	170017	Argument	i		169775	0					
ANR	170018	Identifier	i		169775	0					
ANR	170019	IdentifierDeclStatement	int numArcs = skelArcTable . getNumElem ( i ) ;	94:2:2569:2607	169775	1	True				
ANR	170020	IdentifierDecl	numArcs = skelArcTable . getNumElem ( i )		169775	0					
ANR	170021	IdentifierDeclType	int		169775	0					
ANR	170022	Identifier	numArcs		169775	1					
ANR	170023	AssignmentExpression	numArcs = skelArcTable . getNumElem ( i )		169775	2		=			
ANR	170024	Identifier	numArcs		169775	0					
ANR	170025	CallExpression	skelArcTable . getNumElem ( i )		169775	1					
ANR	170026	Callee	skelArcTable . getNumElem		169775	0					
ANR	170027	MemberAccess	skelArcTable . getNumElem		169775	0					
ANR	170028	Identifier	skelArcTable		169775	0					
ANR	170029	Identifier	getNumElem		169775	1					
ANR	170030	ArgumentList	i		169775	1					
ANR	170031	Argument	i		169775	0					
ANR	170032	Identifier	i		169775	0					
ANR	170033	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		169775	2					
ANR	170034	ForInit	j = 0 ;	95:7:2616:2619	169775	0	True				
ANR	170035	AssignmentExpression	j = 0		169775	0		=			
ANR	170036	Identifier	j		169775	0					
ANR	170037	PrimaryExpression	0		169775	1					
ANR	170038	Condition	j < numArcs	95:12:2621:2629	169775	1	True				
ANR	170039	RelationalExpression	j < numArcs		169775	0		<			
ANR	170040	Identifier	j		169775	0					
ANR	170041	Identifier	numArcs		169775	1					
ANR	170042	PostIncDecOperationExpression	j ++	95:23:2632:2634	169775	2	True				
ANR	170043	Identifier	j		169775	0					
ANR	170044	IncDec	++		169775	1					
ANR	170045	CompoundStatement		50:3:1433:1470	169775	3					
ANR	170046	IdentifierDeclStatement	"int child = skelArcTable . getElem ( i , j ) ;"	96:3:2643:2680	169775	0	True				
ANR	170047	IdentifierDecl	"child = skelArcTable . getElem ( i , j )"		169775	0					
ANR	170048	IdentifierDeclType	int		169775	0					
ANR	170049	Identifier	child		169775	1					
ANR	170050	AssignmentExpression	"child = skelArcTable . getElem ( i , j )"		169775	2		=			
ANR	170051	Identifier	child		169775	0					
ANR	170052	CallExpression	"skelArcTable . getElem ( i , j )"		169775	1					
ANR	170053	Callee	skelArcTable . getElem		169775	0					
ANR	170054	MemberAccess	skelArcTable . getElem		169775	0					
ANR	170055	Identifier	skelArcTable		169775	0					
ANR	170056	Identifier	getElem		169775	1					
ANR	170057	ArgumentList	i		169775	1					
ANR	170058	Argument	i		169775	0					
ANR	170059	Identifier	i		169775	0					
ANR	170060	Argument	j		169775	1					
ANR	170061	Identifier	j		169775	0					
ANR	170062	ExpressionStatement	"arcTable . append ( i , child )"	97:3:2685:2709	169775	1	True				
ANR	170063	CallExpression	"arcTable . append ( i , child )"		169775	0					
ANR	170064	Callee	arcTable . append		169775	0					
ANR	170065	MemberAccess	arcTable . append		169775	0					
ANR	170066	Identifier	arcTable		169775	0					
ANR	170067	Identifier	append		169775	1					
ANR	170068	ArgumentList	i		169775	1					
ANR	170069	Argument	i		169775	0					
ANR	170070	Identifier	i		169775	0					
ANR	170071	Argument	child		169775	1					
ANR	170072	Identifier	child		169775	0					
ANR	170073	ExpressionStatement		98:3:2714:2714	169775	3	True				
ANR	170074	ExpressionStatement		99:2:2718:2718	169775	19	True				
ANR	170075	ReturnType	void		169775	1					
ANR	170076	Identifier	Dag :: skeletonize		169775	2					
ANR	170077	ParameterList			169775	3					
ANR	170078	CFGEntryNode	ENTRY		169775		True				
ANR	170079	CFGExitNode	EXIT		169775		True				
ANR	170080	CFGExceptionNode	EXCEPTION		169775		True				
ANR	170081	Symbol	tc2		169775						
ANR	170082	Symbol	* child		169775						
ANR	170083	Symbol	NULL		169775						
ANR	170084	Symbol	tc2 . getNumArcs		169775						
ANR	170085	Symbol	this		169775						
ANR	170086	Symbol	i		169775						
ANR	170087	Symbol	arcTable		169775						
ANR	170088	Symbol	j		169775						
ANR	170089	Symbol	* tc2		169775						
ANR	170090	Symbol	* this		169775						
ANR	170091	Symbol	colorTable		169775						
ANR	170092	Symbol	tc2 . getArc		169775						
ANR	170093	Symbol	getNumArcs		169775						
ANR	170094	Symbol	numNodes		169775						
ANR	170095	Symbol	getNumNodes		169775						
ANR	170096	Symbol	* i		169775						
ANR	170097	Symbol	numArcs		169775						
ANR	170098	Symbol	getArc		169775						
ANR	170099	Symbol	skelArcTable		169775						
ANR	170100	Symbol	* colorTable		169775						
ANR	170101	Symbol	skelArcTable . getNumElem		169775						
ANR	170102	Symbol	* tc2 . getArc		169775						
ANR	170103	Symbol	skelArcTable . getElem		169775						
ANR	170104	Symbol	child		169775						
ANR	170105	Function	Dag :: getParentCountVector	117:0:2942:3407							
ANR	170106	FunctionDef	Dag :: getParentCountVector ()		170105	0					
ANR	170107	CompoundStatement		118:0:2986:3407	170105	0					
ANR	170108	IdentifierDeclStatement	"int i , j ;"	119:1:2989:2996	170105	0	True				
ANR	170109	IdentifierDecl	i		170105	0					
ANR	170110	IdentifierDeclType	int		170105	0					
ANR	170111	Identifier	i		170105	1					
ANR	170112	IdentifierDecl	j		170105	1					
ANR	170113	IdentifierDeclType	int		170105	0					
ANR	170114	Identifier	j		170105	1					
ANR	170115	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	122:1:3025:3053	170105	1	True				
ANR	170116	IdentifierDecl	numNodes = getNumNodes ( )		170105	0					
ANR	170117	IdentifierDeclType	int		170105	0					
ANR	170118	Identifier	numNodes		170105	1					
ANR	170119	AssignmentExpression	numNodes = getNumNodes ( )		170105	2		=			
ANR	170120	Identifier	numNodes		170105	0					
ANR	170121	CallExpression	getNumNodes ( )		170105	1					
ANR	170122	Callee	getNumNodes		170105	0					
ANR	170123	Identifier	getNumNodes		170105	0					
ANR	170124	ArgumentList			170105	1					
ANR	170125	IdentifierDeclStatement	int * numParents = new int [ numNodes ] ;	123:1:3056:3092	170105	2	True				
ANR	170126	IdentifierDecl	* numParents = new int [ numNodes ]		170105	0					
ANR	170127	IdentifierDeclType	int *		170105	0					
ANR	170128	Identifier	numParents		170105	1					
ANR	170129	AssignmentExpression	* numParents = new int [ numNodes ]		170105	2		=			
ANR	170130	Identifier	numNodes		170105	0					
ANR	170131	Identifier	numNodes		170105	1					
ANR	170132	IfStatement	if ( NULL == numParents )		170105	3					
ANR	170133	Condition	NULL == numParents	124:5:3099:3114	170105	0	True				
ANR	170134	EqualityExpression	NULL == numParents		170105	0		==			
ANR	170135	Identifier	NULL		170105	0					
ANR	170136	Identifier	numParents		170105	1					
ANR	170137	ThrowStatement	"throw ""Dag::getParentCountVector, numParents is NULL"" ;"	125:2:3120:3173	170105	1	True				
ANR	170138	PrimaryExpression	"""Dag::getParentCountVector, numParents is NULL"""		170105	0					
ANR	170139	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		170105	4					
ANR	170140	ForInit	i = 0 ;	126:6:3181:3184	170105	0	True				
ANR	170141	AssignmentExpression	i = 0		170105	0		=			
ANR	170142	Identifier	i		170105	0					
ANR	170143	PrimaryExpression	0		170105	1					
ANR	170144	Condition	i < numNodes	126:11:3186:3195	170105	1	True				
ANR	170145	RelationalExpression	i < numNodes		170105	0		<			
ANR	170146	Identifier	i		170105	0					
ANR	170147	Identifier	numNodes		170105	1					
ANR	170148	PostIncDecOperationExpression	i ++	126:23:3198:3200	170105	2	True				
ANR	170149	Identifier	i		170105	0					
ANR	170150	IncDec	++		170105	1					
ANR	170151	ExpressionStatement	numParents [ i ] = 0	127:2:3206:3223	170105	3	True				
ANR	170152	AssignmentExpression	numParents [ i ] = 0		170105	0		=			
ANR	170153	ArrayIndexing	numParents [ i ]		170105	0					
ANR	170154	Identifier	numParents		170105	0					
ANR	170155	Identifier	i		170105	1					
ANR	170156	PrimaryExpression	0		170105	1					
ANR	170157	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		170105	5					
ANR	170158	ForInit	i = 0 ;	130:6:3264:3267	170105	0	True				
ANR	170159	AssignmentExpression	i = 0		170105	0		=			
ANR	170160	Identifier	i		170105	0					
ANR	170161	PrimaryExpression	0		170105	1					
ANR	170162	Condition	i < numNodes	130:11:3269:3278	170105	1	True				
ANR	170163	RelationalExpression	i < numNodes		170105	0		<			
ANR	170164	Identifier	i		170105	0					
ANR	170165	Identifier	numNodes		170105	1					
ANR	170166	PostIncDecOperationExpression	i ++	130:23:3281:3283	170105	2	True				
ANR	170167	Identifier	i		170105	0					
ANR	170168	IncDec	++		170105	1					
ANR	170169	CompoundStatement		14:2:304:331	170105	3					
ANR	170170	IdentifierDeclStatement	int numArcs = getNumArcs ( i ) ;	131:2:3291:3318	170105	0	True				
ANR	170171	IdentifierDecl	numArcs = getNumArcs ( i )		170105	0					
ANR	170172	IdentifierDeclType	int		170105	0					
ANR	170173	Identifier	numArcs		170105	1					
ANR	170174	AssignmentExpression	numArcs = getNumArcs ( i )		170105	2		=			
ANR	170175	Identifier	numArcs		170105	0					
ANR	170176	CallExpression	getNumArcs ( i )		170105	1					
ANR	170177	Callee	getNumArcs		170105	0					
ANR	170178	Identifier	getNumArcs		170105	0					
ANR	170179	ArgumentList	i		170105	1					
ANR	170180	Argument	i		170105	0					
ANR	170181	Identifier	i		170105	0					
ANR	170182	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		170105	1					
ANR	170183	ForInit	j = 0 ;	132:7:3327:3330	170105	0	True				
ANR	170184	AssignmentExpression	j = 0		170105	0		=			
ANR	170185	Identifier	j		170105	0					
ANR	170186	PrimaryExpression	0		170105	1					
ANR	170187	Condition	j < numArcs	132:12:3332:3340	170105	1	True				
ANR	170188	RelationalExpression	j < numArcs		170105	0		<			
ANR	170189	Identifier	j		170105	0					
ANR	170190	Identifier	numArcs		170105	1					
ANR	170191	PostIncDecOperationExpression	j ++	132:23:3343:3345	170105	2	True				
ANR	170192	Identifier	j		170105	0					
ANR	170193	IncDec	++		170105	1					
ANR	170194	ExpressionStatement	"numParents [ getArc ( i , j ) ] ++"	133:3:3352:3380	170105	3	True				
ANR	170195	PostIncDecOperationExpression	"numParents [ getArc ( i , j ) ] ++"		170105	0					
ANR	170196	ArrayIndexing	"numParents [ getArc ( i , j ) ]"		170105	0					
ANR	170197	Identifier	numParents		170105	0					
ANR	170198	CallExpression	"getArc ( i , j )"		170105	1					
ANR	170199	Callee	getArc		170105	0					
ANR	170200	Identifier	getArc		170105	0					
ANR	170201	ArgumentList	i		170105	1					
ANR	170202	Argument	i		170105	0					
ANR	170203	Identifier	i		170105	0					
ANR	170204	Argument	j		170105	1					
ANR	170205	Identifier	j		170105	0					
ANR	170206	IncDec	++		170105	1					
ANR	170207	ExpressionStatement		134:2:3384:3384	170105	6	True				
ANR	170208	ReturnStatement	return numParents ;	136:1:3388:3405	170105	7	True				
ANR	170209	Identifier	numParents		170105	0					
ANR	170210	ReturnType	int *		170105	1					
ANR	170211	Identifier	Dag :: getParentCountVector		170105	2					
ANR	170212	ParameterList			170105	3					
ANR	170213	CFGEntryNode	ENTRY		170105		True				
ANR	170214	CFGExitNode	EXIT		170105		True				
ANR	170215	CFGExceptionNode	EXCEPTION		170105		True				
ANR	170216	Symbol	getNumArcs		170105						
ANR	170217	Symbol	numNodes		170105						
ANR	170218	Symbol	getNumNodes		170105						
ANR	170219	Symbol	* getArc		170105						
ANR	170220	Symbol	NULL		170105						
ANR	170221	Symbol	* i		170105						
ANR	170222	Symbol	numArcs		170105						
ANR	170223	Symbol	getArc		170105						
ANR	170224	Symbol	* numParents		170105						
ANR	170225	Symbol	numParents		170105						
ANR	170226	Symbol	i		170105						
ANR	170227	Symbol	j		170105						
ANR	170228	Function	Dag :: getNumSinks	153:0:3578:3762							
ANR	170229	FunctionDef	Dag :: getNumSinks ()		170228	0					
ANR	170230	CompoundStatement		154:0:3611:3762	170228	0					
ANR	170231	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	155:1:3614:3642	170228	0	True				
ANR	170232	IdentifierDecl	numNodes = getNumNodes ( )		170228	0					
ANR	170233	IdentifierDeclType	int		170228	0					
ANR	170234	Identifier	numNodes		170228	1					
ANR	170235	AssignmentExpression	numNodes = getNumNodes ( )		170228	2		=			
ANR	170236	Identifier	numNodes		170228	0					
ANR	170237	CallExpression	getNumNodes ( )		170228	1					
ANR	170238	Callee	getNumNodes		170228	0					
ANR	170239	Identifier	getNumNodes		170228	0					
ANR	170240	ArgumentList			170228	1					
ANR	170241	IdentifierDeclStatement	int numSinks = 0 ;	156:1:3645:3661	170228	1	True				
ANR	170242	IdentifierDecl	numSinks = 0		170228	0					
ANR	170243	IdentifierDeclType	int		170228	0					
ANR	170244	Identifier	numSinks		170228	1					
ANR	170245	AssignmentExpression	numSinks = 0		170228	2		=			
ANR	170246	Identifier	numSinks		170228	0					
ANR	170247	PrimaryExpression	0		170228	1					
ANR	170248	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		170228	2					
ANR	170249	ForInit	int i = 0 ;	157:6:3669:3676	170228	0	True				
ANR	170250	IdentifierDeclStatement	int i = 0 ;		170228	0					
ANR	170251	IdentifierDecl	i = 0		170228	0					
ANR	170252	IdentifierDeclType	int		170228	0					
ANR	170253	Identifier	i		170228	1					
ANR	170254	AssignmentExpression	i = 0		170228	2		=			
ANR	170255	Identifier	i		170228	0					
ANR	170256	PrimaryExpression	0		170228	1					
ANR	170257	Condition	i < numNodes	157:15:3678:3687	170228	1	True				
ANR	170258	RelationalExpression	i < numNodes		170228	0		<			
ANR	170259	Identifier	i		170228	0					
ANR	170260	Identifier	numNodes		170228	1					
ANR	170261	PostIncDecOperationExpression	i ++	157:27:3690:3692	170228	2	True				
ANR	170262	Identifier	i		170228	0					
ANR	170263	IncDec	++		170228	1					
ANR	170264	CompoundStatement		4:33:84:84	170228	3					
ANR	170265	IfStatement	if ( 0 == getNumArcs ( i ) )		170228	0					
ANR	170266	Condition	0 == getNumArcs ( i )	158:6:3704:3721	170228	0	True				
ANR	170267	EqualityExpression	0 == getNumArcs ( i )		170228	0		==			
ANR	170268	PrimaryExpression	0		170228	0					
ANR	170269	CallExpression	getNumArcs ( i )		170228	1					
ANR	170270	Callee	getNumArcs		170228	0					
ANR	170271	Identifier	getNumArcs		170228	0					
ANR	170272	ArgumentList	i		170228	1					
ANR	170273	Argument	i		170228	0					
ANR	170274	Identifier	i		170228	0					
ANR	170275	ExpressionStatement	numSinks ++	159:3:3728:3738	170228	1	True				
ANR	170276	PostIncDecOperationExpression	numSinks ++		170228	0					
ANR	170277	Identifier	numSinks		170228	0					
ANR	170278	IncDec	++		170228	1					
ANR	170279	ExpressionStatement		160:2:3742:3742	170228	3	True				
ANR	170280	ReturnStatement	return numSinks ;	161:1:3745:3760	170228	4	True				
ANR	170281	Identifier	numSinks		170228	0					
ANR	170282	ReturnType	int		170228	1					
ANR	170283	Identifier	Dag :: getNumSinks		170228	2					
ANR	170284	ParameterList			170228	3					
ANR	170285	CFGEntryNode	ENTRY		170228		True				
ANR	170286	CFGExitNode	EXIT		170228		True				
ANR	170287	Symbol	getNumArcs		170228						
ANR	170288	Symbol	numNodes		170228						
ANR	170289	Symbol	getNumNodes		170228						
ANR	170290	Symbol	numSinks		170228						
ANR	170291	Symbol	i		170228						
ANR	170292	Function	Dag :: getEligPlot	179:0:4019:5140							
ANR	170293	FunctionDef	Dag :: getEligPlot (const int * schedule)		170292	0					
ANR	170294	CompoundStatement		180:0:4070:5140	170292	0					
ANR	170295	IdentifierDeclStatement	int * numPar ;	181:1:4073:4085	170292	0	True				
ANR	170296	IdentifierDecl	* numPar		170292	0					
ANR	170297	IdentifierDeclType	int *		170292	0					
ANR	170298	Identifier	numPar		170292	1					
ANR	170299	IdentifierDeclStatement	"int numNodes , i , j , k ;"	182:1:4088:4106	170292	1	True				
ANR	170300	IdentifierDecl	numNodes		170292	0					
ANR	170301	IdentifierDeclType	int		170292	0					
ANR	170302	Identifier	numNodes		170292	1					
ANR	170303	IdentifierDecl	i		170292	1					
ANR	170304	IdentifierDeclType	int		170292	0					
ANR	170305	Identifier	i		170292	1					
ANR	170306	IdentifierDecl	j		170292	2					
ANR	170307	IdentifierDeclType	int		170292	0					
ANR	170308	Identifier	j		170292	1					
ANR	170309	IdentifierDecl	k		170292	3					
ANR	170310	IdentifierDeclType	int		170292	0					
ANR	170311	Identifier	k		170292	1					
ANR	170312	ExpressionStatement	numPar = getParentCountVector ( )	185:1:4163:4194	170292	2	True				
ANR	170313	AssignmentExpression	numPar = getParentCountVector ( )		170292	0		=			
ANR	170314	Identifier	numPar		170292	0					
ANR	170315	CallExpression	getParentCountVector ( )		170292	1					
ANR	170316	Callee	getParentCountVector		170292	0					
ANR	170317	Identifier	getParentCountVector		170292	0					
ANR	170318	ArgumentList			170292	1					
ANR	170319	IfStatement	if ( NULL == numPar )		170292	3					
ANR	170320	Condition	NULL == numPar	186:5:4201:4212	170292	0	True				
ANR	170321	EqualityExpression	NULL == numPar		170292	0		==			
ANR	170322	Identifier	NULL		170292	0					
ANR	170323	Identifier	numPar		170292	1					
ANR	170324	ThrowStatement	"throw ""Dag::getEligPlot, numPar is NULL"" ;"	187:2:4218:4258	170292	1	True				
ANR	170325	PrimaryExpression	"""Dag::getEligPlot, numPar is NULL"""		170292	0					
ANR	170326	ExpressionStatement	numNodes = getNumNodes ( )	190:1:4290:4314	170292	4	True				
ANR	170327	AssignmentExpression	numNodes = getNumNodes ( )		170292	0		=			
ANR	170328	Identifier	numNodes		170292	0					
ANR	170329	CallExpression	getNumNodes ( )		170292	1					
ANR	170330	Callee	getNumNodes		170292	0					
ANR	170331	Identifier	getNumNodes		170292	0					
ANR	170332	ArgumentList			170292	1					
ANR	170333	IdentifierDeclStatement	int * elig = new int [ numNodes + 1 ] ;	193:1:4351:4383	170292	5	True				
ANR	170334	IdentifierDecl	* elig = new int [ numNodes + 1 ]		170292	0					
ANR	170335	IdentifierDeclType	int *		170292	0					
ANR	170336	Identifier	elig		170292	1					
ANR	170337	AssignmentExpression	* elig = new int [ numNodes + 1 ]		170292	2		=			
ANR	170338	Identifier	elig		170292	0					
ANR	170339	AdditiveExpression	numNodes + 1		170292	1		+			
ANR	170340	Identifier	numNodes		170292	0					
ANR	170341	PrimaryExpression	1		170292	1					
ANR	170342	IfStatement	if ( NULL == elig )		170292	6					
ANR	170343	Condition	NULL == elig	194:5:4390:4399	170292	0	True				
ANR	170344	EqualityExpression	NULL == elig		170292	0		==			
ANR	170345	Identifier	NULL		170292	0					
ANR	170346	Identifier	elig		170292	1					
ANR	170347	ThrowStatement	"throw ""Dag::getEligPlot, elig is NULL"" ;"	195:2:4405:4443	170292	1	True				
ANR	170348	PrimaryExpression	"""Dag::getEligPlot, elig is NULL"""		170292	0					
ANR	170349	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		170292	7					
ANR	170350	ForInit	i = 0 ;	198:6:4529:4532	170292	0	True				
ANR	170351	AssignmentExpression	i = 0		170292	0		=			
ANR	170352	Identifier	i		170292	0					
ANR	170353	PrimaryExpression	0		170292	1					
ANR	170354	Condition	i < numNodes	198:11:4534:4543	170292	1	True				
ANR	170355	RelationalExpression	i < numNodes		170292	0		<			
ANR	170356	Identifier	i		170292	0					
ANR	170357	Identifier	numNodes		170292	1					
ANR	170358	PostIncDecOperationExpression	i ++	198:23:4546:4548	170292	2	True				
ANR	170359	Identifier	i		170292	0					
ANR	170360	IncDec	++		170292	1					
ANR	170361	CompoundStatement		19:29:481:481	170292	3					
ANR	170362	ExpressionStatement	elig [ i ] = 0	201:2:4680:4691	170292	0	True				
ANR	170363	AssignmentExpression	elig [ i ] = 0		170292	0		=			
ANR	170364	ArrayIndexing	elig [ i ]		170292	0					
ANR	170365	Identifier	elig		170292	0					
ANR	170366	Identifier	i		170292	1					
ANR	170367	PrimaryExpression	0		170292	1					
ANR	170368	ForStatement	for ( j = 0 ; j < numNodes ; j ++ )		170292	1					
ANR	170369	ForInit	j = 0 ;	202:7:4700:4703	170292	0	True				
ANR	170370	AssignmentExpression	j = 0		170292	0		=			
ANR	170371	Identifier	j		170292	0					
ANR	170372	PrimaryExpression	0		170292	1					
ANR	170373	Condition	j < numNodes	202:12:4705:4714	170292	1	True				
ANR	170374	RelationalExpression	j < numNodes		170292	0		<			
ANR	170375	Identifier	j		170292	0					
ANR	170376	Identifier	numNodes		170292	1					
ANR	170377	PostIncDecOperationExpression	j ++	202:24:4717:4719	170292	2	True				
ANR	170378	Identifier	j		170292	0					
ANR	170379	IncDec	++		170292	1					
ANR	170380	CompoundStatement		23:30:652:652	170292	3					
ANR	170381	IfStatement	if ( 0 == numPar [ j ] )		170292	0					
ANR	170382	Condition	0 == numPar [ j ]	203:7:4732:4743	170292	0	True				
ANR	170383	EqualityExpression	0 == numPar [ j ]		170292	0		==			
ANR	170384	PrimaryExpression	0		170292	0					
ANR	170385	ArrayIndexing	numPar [ j ]		170292	1					
ANR	170386	Identifier	numPar		170292	0					
ANR	170387	Identifier	j		170292	1					
ANR	170388	ExpressionStatement	elig [ i ] ++	204:4:4751:4760	170292	1	True				
ANR	170389	PostIncDecOperationExpression	elig [ i ] ++		170292	0					
ANR	170390	ArrayIndexing	elig [ i ]		170292	0					
ANR	170391	Identifier	elig		170292	0					
ANR	170392	Identifier	i		170292	1					
ANR	170393	IncDec	++		170292	1					
ANR	170394	ExpressionStatement		205:3:4765:4765	170292	2	True				
ANR	170395	ExpressionStatement	numPar [ schedule [ i ] ] = - 1	208:2:4817:4843	170292	3	True				
ANR	170396	AssignmentExpression	numPar [ schedule [ i ] ] = - 1		170292	0		=			
ANR	170397	ArrayIndexing	numPar [ schedule [ i ] ]		170292	0					
ANR	170398	Identifier	numPar		170292	0					
ANR	170399	ArrayIndexing	schedule [ i ]		170292	1					
ANR	170400	Identifier	schedule		170292	0					
ANR	170401	Identifier	i		170292	1					
ANR	170402	UnaryOperationExpression	- 1		170292	1					
ANR	170403	UnaryOperator	-		170292	0					
ANR	170404	PrimaryExpression	1		170292	1					
ANR	170405	ExpressionStatement	k = getNumArcs ( schedule [ i ] )	211:2:4873:4902	170292	4	True				
ANR	170406	AssignmentExpression	k = getNumArcs ( schedule [ i ] )		170292	0		=			
ANR	170407	Identifier	k		170292	0					
ANR	170408	CallExpression	getNumArcs ( schedule [ i ] )		170292	1					
ANR	170409	Callee	getNumArcs		170292	0					
ANR	170410	Identifier	getNumArcs		170292	0					
ANR	170411	ArgumentList	schedule [ i ]		170292	1					
ANR	170412	Argument	schedule [ i ]		170292	0					
ANR	170413	ArrayIndexing	schedule [ i ]		170292	0					
ANR	170414	Identifier	schedule		170292	0					
ANR	170415	Identifier	i		170292	1					
ANR	170416	ForStatement	for ( j = 0 ; j < k ; j ++ )		170292	5					
ANR	170417	ForInit	j = 0 ;	212:7:4911:4914	170292	0	True				
ANR	170418	AssignmentExpression	j = 0		170292	0		=			
ANR	170419	Identifier	j		170292	0					
ANR	170420	PrimaryExpression	0		170292	1					
ANR	170421	Condition	j < k	212:12:4916:4918	170292	1	True				
ANR	170422	RelationalExpression	j < k		170292	0		<			
ANR	170423	Identifier	j		170292	0					
ANR	170424	Identifier	k		170292	1					
ANR	170425	PostIncDecOperationExpression	j ++	212:17:4921:4923	170292	2	True				
ANR	170426	Identifier	j		170292	0					
ANR	170427	IncDec	++		170292	1					
ANR	170428	ExpressionStatement	"numPar [ getArc ( schedule [ i ] , j ) ] --"	213:3:4930:4968	170292	3	True				
ANR	170429	PostIncDecOperationExpression	"numPar [ getArc ( schedule [ i ] , j ) ] --"		170292	0					
ANR	170430	ArrayIndexing	"numPar [ getArc ( schedule [ i ] , j ) ]"		170292	0					
ANR	170431	Identifier	numPar		170292	0					
ANR	170432	CallExpression	"getArc ( schedule [ i ] , j )"		170292	1					
ANR	170433	Callee	getArc		170292	0					
ANR	170434	Identifier	getArc		170292	0					
ANR	170435	ArgumentList	schedule [ i ]		170292	1					
ANR	170436	Argument	schedule [ i ]		170292	0					
ANR	170437	ArrayIndexing	schedule [ i ]		170292	0					
ANR	170438	Identifier	schedule		170292	0					
ANR	170439	Identifier	i		170292	1					
ANR	170440	Argument	j		170292	1					
ANR	170441	Identifier	j		170292	0					
ANR	170442	IncDec	--		170292	1					
ANR	170443	ExpressionStatement		214:2:4972:4972	170292	8	True				
ANR	170444	ExpressionStatement	elig [ numNodes ] = 0	217:1:4985:5001	170292	9	True				
ANR	170445	AssignmentExpression	elig [ numNodes ] = 0		170292	0		=			
ANR	170446	ArrayIndexing	elig [ numNodes ]		170292	0					
ANR	170447	Identifier	elig		170292	0					
ANR	170448	Identifier	numNodes		170292	1					
ANR	170449	PrimaryExpression	0		170292	1					
ANR	170450	ExpressionStatement	"printf ( ""Eligibility plot: "" )"	220:0:5019:5047	170292	10	True				
ANR	170451	CallExpression	"printf ( ""Eligibility plot: "" )"		170292	0					
ANR	170452	Callee	printf		170292	0					
ANR	170453	Identifier	printf		170292	0					
ANR	170454	ArgumentList	"""Eligibility plot: """		170292	1					
ANR	170455	Argument	"""Eligibility plot: """		170292	0					
ANR	170456	PrimaryExpression	"""Eligibility plot: """		170292	0					
ANR	170457	ForStatement	for ( i = 0 ; i <= numNodes ; i ++ )		170292	11					
ANR	170458	ForInit	i = 0 ;	221:5:5054:5057	170292	0	True				
ANR	170459	AssignmentExpression	i = 0		170292	0		=			
ANR	170460	Identifier	i		170292	0					
ANR	170461	PrimaryExpression	0		170292	1					
ANR	170462	Condition	i <= numNodes	221:10:5059:5069	170292	1	True				
ANR	170463	RelationalExpression	i <= numNodes		170292	0		<=			
ANR	170464	Identifier	i		170292	0					
ANR	170465	Identifier	numNodes		170292	1					
ANR	170466	PostIncDecOperationExpression	i ++	221:23:5072:5074	170292	2	True				
ANR	170467	Identifier	i		170292	0					
ANR	170468	IncDec	++		170292	1					
ANR	170469	ExpressionStatement	"printf ( ""%d "" , elig [ i ] )"	222:1:5079:5102	170292	3	True				
ANR	170470	CallExpression	"printf ( ""%d "" , elig [ i ] )"		170292	0					
ANR	170471	Callee	printf		170292	0					
ANR	170472	Identifier	printf		170292	0					
ANR	170473	ArgumentList	"""%d """		170292	1					
ANR	170474	Argument	"""%d """		170292	0					
ANR	170475	PrimaryExpression	"""%d """		170292	0					
ANR	170476	Argument	elig [ i ]		170292	1					
ANR	170477	ArrayIndexing	elig [ i ]		170292	0					
ANR	170478	Identifier	elig		170292	0					
ANR	170479	Identifier	i		170292	1					
ANR	170480	ExpressionStatement	"printf ( ""\\n"" )"	223:0:5104:5116	170292	12	True				
ANR	170481	CallExpression	"printf ( ""\\n"" )"		170292	0					
ANR	170482	Callee	printf		170292	0					
ANR	170483	Identifier	printf		170292	0					
ANR	170484	ArgumentList	"""\\n"""		170292	1					
ANR	170485	Argument	"""\\n"""		170292	0					
ANR	170486	PrimaryExpression	"""\\n"""		170292	0					
ANR	170487	ReturnStatement	return elig ;	226:1:5127:5138	170292	13	True				
ANR	170488	Identifier	elig		170292	0					
ANR	170489	ReturnType	int *		170292	1					
ANR	170490	Identifier	Dag :: getEligPlot		170292	2					
ANR	170491	ParameterList	const int * schedule		170292	3					
ANR	170492	Parameter	const int * schedule	179:23:4042:4060	170292	0	True				
ANR	170493	ParameterType	const int *		170292	0					
ANR	170494	Identifier	schedule		170292	1					
ANR	170495	CFGEntryNode	ENTRY		170292		True				
ANR	170496	CFGExitNode	EXIT		170292		True				
ANR	170497	CFGExceptionNode	EXCEPTION		170292		True				
ANR	170498	CFGExceptionNode	EXCEPTION		170292		True				
ANR	170499	CFGExceptionNode	EXCEPTION		170292		True				
ANR	170500	Symbol	* numPar		170292						
ANR	170501	Symbol	* * i		170292						
ANR	170502	Symbol	numPar		170292						
ANR	170503	Symbol	NULL		170292						
ANR	170504	Symbol	* elig		170292						
ANR	170505	Symbol	i		170292						
ANR	170506	Symbol	j		170292						
ANR	170507	Symbol	getParentCountVector		170292						
ANR	170508	Symbol	elig		170292						
ANR	170509	Symbol	k		170292						
ANR	170510	Symbol	* schedule		170292						
ANR	170511	Symbol	schedule		170292						
ANR	170512	Symbol	getNumArcs		170292						
ANR	170513	Symbol	numNodes		170292						
ANR	170514	Symbol	getNumNodes		170292						
ANR	170515	Symbol	* getArc		170292						
ANR	170516	Symbol	* i		170292						
ANR	170517	Symbol	* j		170292						
ANR	170518	Symbol	getArc		170292						
ANR	170519	Symbol	* numNodes		170292						
ANR	170520	Symbol	* * schedule		170292						
ANR	170521	Function	Dag_test	243:0:5277:5761							
ANR	170522	FunctionDef	Dag_test ()		170521	0					
ANR	170523	CompoundStatement		244:0:5297:5761	170521	0					
ANR	170524	ExpressionStatement	"printf ( ""[[[ BEGIN testing Dag\\n"" )"	245:1:5300:5333	170521	0	True				
ANR	170525	CallExpression	"printf ( ""[[[ BEGIN testing Dag\\n"" )"		170521	0					
ANR	170526	Callee	printf		170521	0					
ANR	170527	Identifier	printf		170521	0					
ANR	170528	ArgumentList	"""[[[ BEGIN testing Dag\\n"""		170521	1					
ANR	170529	Argument	"""[[[ BEGIN testing Dag\\n"""		170521	0					
ANR	170530	PrimaryExpression	"""[[[ BEGIN testing Dag\\n"""		170521	0					
ANR	170531	IdentifierDeclStatement	Dag * g ;	247:1:5337:5343	170521	1	True				
ANR	170532	IdentifierDecl	* g		170521	0					
ANR	170533	IdentifierDeclType	Dag *		170521	0					
ANR	170534	Identifier	g		170521	1					
ANR	170535	Statement	g	249:1:5347:5347	170521	2	True				
ANR	170536	Statement	=	249:3:5349:5349	170521	3	True				
ANR	170537	Statement	new	249:5:5351:5353	170521	4	True				
ANR	170538	ExpressionStatement	Dag	249:9:5355:5358	170521	5	True				
ANR	170539	Identifier	Dag		170521	0					
ANR	170540	ExpressionStatement	g -> addNode ( )	250:1:5361:5373	170521	6	True				
ANR	170541	CallExpression	g -> addNode ( )		170521	0					
ANR	170542	Callee	g -> addNode		170521	0					
ANR	170543	PtrMemberAccess	g -> addNode		170521	0					
ANR	170544	Identifier	g		170521	0					
ANR	170545	Identifier	addNode		170521	1					
ANR	170546	ArgumentList			170521	1					
ANR	170547	ExpressionStatement	g -> addNode ( )	251:1:5376:5388	170521	7	True				
ANR	170548	CallExpression	g -> addNode ( )		170521	0					
ANR	170549	Callee	g -> addNode		170521	0					
ANR	170550	PtrMemberAccess	g -> addNode		170521	0					
ANR	170551	Identifier	g		170521	0					
ANR	170552	Identifier	addNode		170521	1					
ANR	170553	ArgumentList			170521	1					
ANR	170554	ExpressionStatement	g -> addNode ( )	252:1:5391:5403	170521	8	True				
ANR	170555	CallExpression	g -> addNode ( )		170521	0					
ANR	170556	Callee	g -> addNode		170521	0					
ANR	170557	PtrMemberAccess	g -> addNode		170521	0					
ANR	170558	Identifier	g		170521	0					
ANR	170559	Identifier	addNode		170521	1					
ANR	170560	ArgumentList			170521	1					
ANR	170561	ExpressionStatement	g -> addNode ( )	253:1:5406:5418	170521	9	True				
ANR	170562	CallExpression	g -> addNode ( )		170521	0					
ANR	170563	Callee	g -> addNode		170521	0					
ANR	170564	PtrMemberAccess	g -> addNode		170521	0					
ANR	170565	Identifier	g		170521	0					
ANR	170566	Identifier	addNode		170521	1					
ANR	170567	ArgumentList			170521	1					
ANR	170568	ExpressionStatement	"g -> addArc ( 0 , 1 )"	254:1:5421:5435	170521	10	True				
ANR	170569	CallExpression	"g -> addArc ( 0 , 1 )"		170521	0					
ANR	170570	Callee	g -> addArc		170521	0					
ANR	170571	PtrMemberAccess	g -> addArc		170521	0					
ANR	170572	Identifier	g		170521	0					
ANR	170573	Identifier	addArc		170521	1					
ANR	170574	ArgumentList	0		170521	1					
ANR	170575	Argument	0		170521	0					
ANR	170576	PrimaryExpression	0		170521	0					
ANR	170577	Argument	1		170521	1					
ANR	170578	PrimaryExpression	1		170521	0					
ANR	170579	ExpressionStatement	"g -> addArc ( 1 , 2 )"	255:1:5438:5452	170521	11	True				
ANR	170580	CallExpression	"g -> addArc ( 1 , 2 )"		170521	0					
ANR	170581	Callee	g -> addArc		170521	0					
ANR	170582	PtrMemberAccess	g -> addArc		170521	0					
ANR	170583	Identifier	g		170521	0					
ANR	170584	Identifier	addArc		170521	1					
ANR	170585	ArgumentList	1		170521	1					
ANR	170586	Argument	1		170521	0					
ANR	170587	PrimaryExpression	1		170521	0					
ANR	170588	Argument	2		170521	1					
ANR	170589	PrimaryExpression	2		170521	0					
ANR	170590	ExpressionStatement	"g -> addArc ( 2 , 3 )"	256:1:5455:5469	170521	12	True				
ANR	170591	CallExpression	"g -> addArc ( 2 , 3 )"		170521	0					
ANR	170592	Callee	g -> addArc		170521	0					
ANR	170593	PtrMemberAccess	g -> addArc		170521	0					
ANR	170594	Identifier	g		170521	0					
ANR	170595	Identifier	addArc		170521	1					
ANR	170596	ArgumentList	2		170521	1					
ANR	170597	Argument	2		170521	0					
ANR	170598	PrimaryExpression	2		170521	0					
ANR	170599	Argument	3		170521	1					
ANR	170600	PrimaryExpression	3		170521	0					
ANR	170601	ExpressionStatement	g -> closeTransitively ( )	257:1:5472:5494	170521	13	True				
ANR	170602	CallExpression	g -> closeTransitively ( )		170521	0					
ANR	170603	Callee	g -> closeTransitively		170521	0					
ANR	170604	PtrMemberAccess	g -> closeTransitively		170521	0					
ANR	170605	Identifier	g		170521	0					
ANR	170606	Identifier	closeTransitively		170521	1					
ANR	170607	ArgumentList			170521	1					
ANR	170608	ExpressionStatement	g -> printAsText ( )	258:1:5497:5513	170521	14	True				
ANR	170609	CallExpression	g -> printAsText ( )		170521	0					
ANR	170610	Callee	g -> printAsText		170521	0					
ANR	170611	PtrMemberAccess	g -> printAsText		170521	0					
ANR	170612	Identifier	g		170521	0					
ANR	170613	Identifier	printAsText		170521	1					
ANR	170614	ArgumentList			170521	1					
ANR	170615	ExpressionStatement	g -> skeletonize ( )	259:1:5516:5532	170521	15	True				
ANR	170616	CallExpression	g -> skeletonize ( )		170521	0					
ANR	170617	Callee	g -> skeletonize		170521	0					
ANR	170618	PtrMemberAccess	g -> skeletonize		170521	0					
ANR	170619	Identifier	g		170521	0					
ANR	170620	Identifier	skeletonize		170521	1					
ANR	170621	ArgumentList			170521	1					
ANR	170622	ExpressionStatement	g -> printAsText ( )	260:1:5535:5551	170521	16	True				
ANR	170623	CallExpression	g -> printAsText ( )		170521	0					
ANR	170624	Callee	g -> printAsText		170521	0					
ANR	170625	PtrMemberAccess	g -> printAsText		170521	0					
ANR	170626	Identifier	g		170521	0					
ANR	170627	Identifier	printAsText		170521	1					
ANR	170628	ArgumentList			170521	1					
ANR	170629	IdentifierDeclStatement	int * p = g -> getParentCountVector ( ) ;	261:1:5554:5586	170521	17	True				
ANR	170630	IdentifierDecl	* p = g -> getParentCountVector ( )		170521	0					
ANR	170631	IdentifierDeclType	int *		170521	0					
ANR	170632	Identifier	p		170521	1					
ANR	170633	AssignmentExpression	* p = g -> getParentCountVector ( )		170521	2		=			
ANR	170634	Identifier	p		170521	0					
ANR	170635	CallExpression	g -> getParentCountVector ( )		170521	1					
ANR	170636	Callee	g -> getParentCountVector		170521	0					
ANR	170637	PtrMemberAccess	g -> getParentCountVector		170521	0					
ANR	170638	Identifier	g		170521	0					
ANR	170639	Identifier	getParentCountVector		170521	1					
ANR	170640	ArgumentList			170521	1					
ANR	170641	IfStatement	if ( ! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 ) )		170521	18					
ANR	170642	Condition	! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 )	262:5:5593:5636	170521	0	True				
ANR	170643	UnaryOperationExpression	! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 )		170521	0					
ANR	170644	UnaryOperator	!		170521	0					
ANR	170645	AndExpression	p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1		170521	1		&&			
ANR	170646	EqualityExpression	p [ 0 ] == 0		170521	0		==			
ANR	170647	ArrayIndexing	p [ 0 ]		170521	0					
ANR	170648	Identifier	p		170521	0					
ANR	170649	PrimaryExpression	0		170521	1					
ANR	170650	PrimaryExpression	0		170521	1					
ANR	170651	AndExpression	p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1		170521	1		&&			
ANR	170652	EqualityExpression	p [ 1 ] == 1		170521	0		==			
ANR	170653	ArrayIndexing	p [ 1 ]		170521	0					
ANR	170654	Identifier	p		170521	0					
ANR	170655	PrimaryExpression	1		170521	1					
ANR	170656	PrimaryExpression	1		170521	1					
ANR	170657	AndExpression	p [ 2 ] == 1 && p [ 3 ] == 1		170521	1		&&			
ANR	170658	EqualityExpression	p [ 2 ] == 1		170521	0		==			
ANR	170659	ArrayIndexing	p [ 2 ]		170521	0					
ANR	170660	Identifier	p		170521	0					
ANR	170661	PrimaryExpression	2		170521	1					
ANR	170662	PrimaryExpression	1		170521	1					
ANR	170663	EqualityExpression	p [ 3 ] == 1		170521	1		==			
ANR	170664	ArrayIndexing	p [ 3 ]		170521	0					
ANR	170665	Identifier	p		170521	0					
ANR	170666	PrimaryExpression	3		170521	1					
ANR	170667	PrimaryExpression	1		170521	1					
ANR	170668	ThrowStatement	"throw ""Dag_test, 1"" ;"	263:2:5642:5661	170521	1	True				
ANR	170669	PrimaryExpression	"""Dag_test, 1"""		170521	0					
ANR	170670	IfStatement	if ( 1 != g -> getNumSinks ( ) )		170521	19					
ANR	170671	Condition	1 != g -> getNumSinks ( )	264:5:5668:5688	170521	0	True				
ANR	170672	EqualityExpression	1 != g -> getNumSinks ( )		170521	0		!=			
ANR	170673	PrimaryExpression	1		170521	0					
ANR	170674	CallExpression	g -> getNumSinks ( )		170521	1					
ANR	170675	Callee	g -> getNumSinks		170521	0					
ANR	170676	PtrMemberAccess	g -> getNumSinks		170521	0					
ANR	170677	Identifier	g		170521	0					
ANR	170678	Identifier	getNumSinks		170521	1					
ANR	170679	ArgumentList			170521	1					
ANR	170680	ThrowStatement	"throw ""Dag_test, 2"" ;"	265:2:5694:5713	170521	1	True				
ANR	170681	PrimaryExpression	"""Dag_test, 2"""		170521	0					
ANR	170682	Statement	delete	266:1:5716:5721	170521	20	True				
ANR	170683	ExpressionStatement	g	266:8:5723:5724	170521	21	True				
ANR	170684	Identifier	g		170521	0					
ANR	170685	ExpressionStatement	"printf ( ""]]] END testing Dag\\n"" )"	268:1:5728:5759	170521	22	True				
ANR	170686	CallExpression	"printf ( ""]]] END testing Dag\\n"" )"		170521	0					
ANR	170687	Callee	printf		170521	0					
ANR	170688	Identifier	printf		170521	0					
ANR	170689	ArgumentList	"""]]] END testing Dag\\n"""		170521	1					
ANR	170690	Argument	"""]]] END testing Dag\\n"""		170521	0					
ANR	170691	PrimaryExpression	"""]]] END testing Dag\\n"""		170521	0					
ANR	170692	ReturnType	void		170521	1					
ANR	170693	Identifier	Dag_test		170521	2					
ANR	170694	ParameterList			170521	3					
ANR	170695	CFGEntryNode	ENTRY		170521		True				
ANR	170696	CFGExitNode	EXIT		170521		True				
ANR	170697	CFGExceptionNode	EXCEPTION		170521		True				
ANR	170698	CFGExceptionNode	EXCEPTION		170521		True				
ANR	170699	CFGExceptionNode	EXCEPTION		170521		True				
ANR	170700	Symbol	p		170521						
ANR	170701	Symbol	* g		170521						
ANR	170702	Symbol	g		170521						
ANR	170703	Symbol	g -> getNumSinks		170521						
ANR	170704	Symbol	* p		170521						
ANR	170705	Symbol	g -> getParentCountVector		170521						
