command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	164601	File	data/converged/CVE-2011-4930_htcondor/ConstituentLibrary.cpp								
ANR	164602	Function	ConstituentLibrary :: checkN	45:0:1136:4417							
ANR	164603	FunctionDef	ConstituentLibrary :: checkN (const Dag & g)		164602	0					
ANR	164604	CompoundStatement		46:0:1183:4417	164602	0					
ANR	164605	IdentifierDeclStatement	Dag gRev ;	47:1:1186:1194	164602	0	True				
ANR	164606	IdentifierDecl	gRev		164602	0					
ANR	164607	IdentifierDeclType	Dag		164602	0					
ANR	164608	Identifier	gRev		164602	1					
ANR	164609	IdentifierDeclStatement	int * color = NULL ;	48:1:1197:1214	164602	1	True				
ANR	164610	IdentifierDecl	* color = NULL		164602	0					
ANR	164611	IdentifierDeclType	int *		164602	0					
ANR	164612	Identifier	color		164602	1					
ANR	164613	AssignmentExpression	* color = NULL		164602	2		=			
ANR	164614	Identifier	NULL		164602	0					
ANR	164615	Identifier	NULL		164602	1					
ANR	164616	IdentifierDeclStatement	int * sked = NULL ;	49:1:1217:1233	164602	2	True				
ANR	164617	IdentifierDecl	* sked = NULL		164602	0					
ANR	164618	IdentifierDeclType	int *		164602	0					
ANR	164619	Identifier	sked		164602	1					
ANR	164620	AssignmentExpression	* sked = NULL		164602	2		=			
ANR	164621	Identifier	NULL		164602	0					
ANR	164622	Identifier	NULL		164602	1					
ANR	164623	IdentifierDeclStatement	"int i , sink , source , idx ;"	50:1:1236:1257	164602	3	True				
ANR	164624	IdentifierDecl	i		164602	0					
ANR	164625	IdentifierDeclType	int		164602	0					
ANR	164626	Identifier	i		164602	1					
ANR	164627	IdentifierDecl	sink		164602	1					
ANR	164628	IdentifierDeclType	int		164602	0					
ANR	164629	Identifier	sink		164602	1					
ANR	164630	IdentifierDecl	source		164602	2					
ANR	164631	IdentifierDeclType	int		164602	0					
ANR	164632	Identifier	source		164602	1					
ANR	164633	IdentifierDecl	idx		164602	3					
ANR	164634	IdentifierDeclType	int		164602	0					
ANR	164635	Identifier	idx		164602	1					
ANR	164636	IfStatement	if ( ( g . getNumNodes ( ) % 2 ) != 0 || g . getNumNodes ( ) < 4 )		164602	4					
ANR	164637	Condition	( g . getNumNodes ( ) % 2 ) != 0 || g . getNumNodes ( ) < 4	53:5:1321:1365	164602	0	True				
ANR	164638	OrExpression	( g . getNumNodes ( ) % 2 ) != 0 || g . getNumNodes ( ) < 4		164602	0		||			
ANR	164639	EqualityExpression	( g . getNumNodes ( ) % 2 ) != 0		164602	0		!=			
ANR	164640	MultiplicativeExpression	g . getNumNodes ( ) % 2		164602	0		%			
ANR	164641	CallExpression	g . getNumNodes ( )		164602	0					
ANR	164642	Callee	g . getNumNodes		164602	0					
ANR	164643	MemberAccess	g . getNumNodes		164602	0					
ANR	164644	Identifier	g		164602	0					
ANR	164645	Identifier	getNumNodes		164602	1					
ANR	164646	ArgumentList			164602	1					
ANR	164647	PrimaryExpression	2		164602	1					
ANR	164648	PrimaryExpression	0		164602	1					
ANR	164649	RelationalExpression	g . getNumNodes ( ) < 4		164602	1		<			
ANR	164650	CallExpression	g . getNumNodes ( )		164602	0					
ANR	164651	Callee	g . getNumNodes		164602	0					
ANR	164652	MemberAccess	g . getNumNodes		164602	0					
ANR	164653	Identifier	g		164602	0					
ANR	164654	Identifier	getNumNodes		164602	1					
ANR	164655	ArgumentList			164602	1					
ANR	164656	PrimaryExpression	4		164602	1					
ANR	164657	GotoStatement	goto retnull ;	54:2:1371:1383	164602	1	True				
ANR	164658	Identifier	retnull		164602	0					
ANR	164659	ExpressionStatement	gRev . initializeWith ( g )	57:1:1431:1453	164602	5	True				
ANR	164660	CallExpression	gRev . initializeWith ( g )		164602	0					
ANR	164661	Callee	gRev . initializeWith		164602	0					
ANR	164662	MemberAccess	gRev . initializeWith		164602	0					
ANR	164663	Identifier	gRev		164602	0					
ANR	164664	Identifier	initializeWith		164602	1					
ANR	164665	ArgumentList	g		164602	1					
ANR	164666	Argument	g		164602	0					
ANR	164667	Identifier	g		164602	0					
ANR	164668	ExpressionStatement	gRev . reverseArcs ( )	58:1:1456:1474	164602	6	True				
ANR	164669	CallExpression	gRev . reverseArcs ( )		164602	0					
ANR	164670	Callee	gRev . reverseArcs		164602	0					
ANR	164671	MemberAccess	gRev . reverseArcs		164602	0					
ANR	164672	Identifier	gRev		164602	0					
ANR	164673	Identifier	reverseArcs		164602	1					
ANR	164674	ArgumentList			164602	1					
ANR	164675	ExpressionStatement	sked = new int [ g . getNumNodes ( ) ]	61:1:1535:1566	164602	7	True				
ANR	164676	AssignmentExpression	sked = new int [ g . getNumNodes ( ) ]		164602	0		=			
ANR	164677	Identifier	sked		164602	0					
ANR	164678	CallExpression	g . getNumNodes ( )		164602	1					
ANR	164679	Callee	g . getNumNodes		164602	0					
ANR	164680	MemberAccess	g . getNumNodes		164602	0					
ANR	164681	Identifier	g		164602	0					
ANR	164682	Identifier	getNumNodes		164602	1					
ANR	164683	ArgumentList			164602	1					
ANR	164684	ExpressionStatement	color = new int [ g . getNumNodes ( ) ]	62:1:1569:1601	164602	8	True				
ANR	164685	AssignmentExpression	color = new int [ g . getNumNodes ( ) ]		164602	0		=			
ANR	164686	Identifier	color		164602	0					
ANR	164687	CallExpression	g . getNumNodes ( )		164602	1					
ANR	164688	Callee	g . getNumNodes		164602	0					
ANR	164689	MemberAccess	g . getNumNodes		164602	0					
ANR	164690	Identifier	g		164602	0					
ANR	164691	Identifier	getNumNodes		164602	1					
ANR	164692	ArgumentList			164602	1					
ANR	164693	IfStatement	if ( NULL == color || NULL == sked )		164602	9					
ANR	164694	Condition	NULL == color || NULL == sked	63:5:1608:1632	164602	0	True				
ANR	164695	OrExpression	NULL == color || NULL == sked		164602	0		||			
ANR	164696	EqualityExpression	NULL == color		164602	0		==			
ANR	164697	Identifier	NULL		164602	0					
ANR	164698	Identifier	color		164602	1					
ANR	164699	EqualityExpression	NULL == sked		164602	1		==			
ANR	164700	Identifier	NULL		164602	0					
ANR	164701	Identifier	sked		164602	1					
ANR	164702	ThrowStatement	"throw ""ConstituentLibrary::checkN, color or shed is NULL"" ;"	64:2:1638:1695	164602	1	True				
ANR	164703	PrimaryExpression	"""ConstituentLibrary::checkN, color or shed is NULL"""		164602	0					
ANR	164704	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		164602	10					
ANR	164705	ForInit	i = 0 ;	65:6:1703:1706	164602	0	True				
ANR	164706	AssignmentExpression	i = 0		164602	0		=			
ANR	164707	Identifier	i		164602	0					
ANR	164708	PrimaryExpression	0		164602	1					
ANR	164709	Condition	i < g . getNumNodes ( )	65:11:1708:1724	164602	1	True				
ANR	164710	RelationalExpression	i < g . getNumNodes ( )		164602	0		<			
ANR	164711	Identifier	i		164602	0					
ANR	164712	CallExpression	g . getNumNodes ( )		164602	1					
ANR	164713	Callee	g . getNumNodes		164602	0					
ANR	164714	MemberAccess	g . getNumNodes		164602	0					
ANR	164715	Identifier	g		164602	0					
ANR	164716	Identifier	getNumNodes		164602	1					
ANR	164717	ArgumentList			164602	1					
ANR	164718	PostIncDecOperationExpression	i ++	65:30:1727:1729	164602	2	True				
ANR	164719	Identifier	i		164602	0					
ANR	164720	IncDec	++		164602	1					
ANR	164721	CompoundStatement		20:36:549:549	164602	3					
ANR	164722	ExpressionStatement	color [ i ] = 0	66:2:1737:1749	164602	0	True				
ANR	164723	AssignmentExpression	color [ i ] = 0		164602	0		=			
ANR	164724	ArrayIndexing	color [ i ]		164602	0					
ANR	164725	Identifier	color		164602	0					
ANR	164726	Identifier	i		164602	1					
ANR	164727	PrimaryExpression	0		164602	1					
ANR	164728	ExpressionStatement	sked [ i ] = - 1	67:2:1753:1765	164602	1	True				
ANR	164729	AssignmentExpression	sked [ i ] = - 1		164602	0		=			
ANR	164730	ArrayIndexing	sked [ i ]		164602	0					
ANR	164731	Identifier	sked		164602	0					
ANR	164732	Identifier	i		164602	1					
ANR	164733	UnaryOperationExpression	- 1		164602	1					
ANR	164734	UnaryOperator	-		164602	0					
ANR	164735	PrimaryExpression	1		164602	1					
ANR	164736	ExpressionStatement		68:2:1769:1769	164602	11	True				
ANR	164737	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		164602	12					
ANR	164738	ForInit	i = 0 ;	71:6:1816:1819	164602	0	True				
ANR	164739	AssignmentExpression	i = 0		164602	0		=			
ANR	164740	Identifier	i		164602	0					
ANR	164741	PrimaryExpression	0		164602	1					
ANR	164742	Condition	i < g . getNumNodes ( )	71:11:1821:1837	164602	1	True				
ANR	164743	RelationalExpression	i < g . getNumNodes ( )		164602	0		<			
ANR	164744	Identifier	i		164602	0					
ANR	164745	CallExpression	g . getNumNodes ( )		164602	1					
ANR	164746	Callee	g . getNumNodes		164602	0					
ANR	164747	MemberAccess	g . getNumNodes		164602	0					
ANR	164748	Identifier	g		164602	0					
ANR	164749	Identifier	getNumNodes		164602	1					
ANR	164750	ArgumentList			164602	1					
ANR	164751	PostIncDecOperationExpression	i ++	71:30:1840:1842	164602	2	True				
ANR	164752	Identifier	i		164602	0					
ANR	164753	IncDec	++		164602	1					
ANR	164754	CompoundStatement		26:36:662:662	164602	3					
ANR	164755	IfStatement	if ( 0 == gRev . getNumArcs ( i ) && 1 == g . getNumArcs ( i ) )		164602	0					
ANR	164756	Condition	0 == gRev . getNumArcs ( i ) && 1 == g . getNumArcs ( i )	72:6:1854:1896	164602	0	True				
ANR	164757	AndExpression	0 == gRev . getNumArcs ( i ) && 1 == g . getNumArcs ( i )		164602	0		&&			
ANR	164758	EqualityExpression	0 == gRev . getNumArcs ( i )		164602	0		==			
ANR	164759	PrimaryExpression	0		164602	0					
ANR	164760	CallExpression	gRev . getNumArcs ( i )		164602	1					
ANR	164761	Callee	gRev . getNumArcs		164602	0					
ANR	164762	MemberAccess	gRev . getNumArcs		164602	0					
ANR	164763	Identifier	gRev		164602	0					
ANR	164764	Identifier	getNumArcs		164602	1					
ANR	164765	ArgumentList	i		164602	1					
ANR	164766	Argument	i		164602	0					
ANR	164767	Identifier	i		164602	0					
ANR	164768	EqualityExpression	1 == g . getNumArcs ( i )		164602	1		==			
ANR	164769	PrimaryExpression	1		164602	0					
ANR	164770	CallExpression	g . getNumArcs ( i )		164602	1					
ANR	164771	Callee	g . getNumArcs		164602	0					
ANR	164772	MemberAccess	g . getNumArcs		164602	0					
ANR	164773	Identifier	g		164602	0					
ANR	164774	Identifier	getNumArcs		164602	1					
ANR	164775	ArgumentList	i		164602	1					
ANR	164776	Argument	i		164602	0					
ANR	164777	Identifier	i		164602	0					
ANR	164778	BreakStatement	break ;	73:3:1903:1908	164602	1	True				
ANR	164779	ExpressionStatement		74:2:1912:1912	164602	13	True				
ANR	164780	IfStatement	if ( g . getNumNodes ( ) == i )		164602	14					
ANR	164781	Condition	g . getNumNodes ( ) == i	76:5:1949:1966	164602	0	True				
ANR	164782	EqualityExpression	g . getNumNodes ( ) == i		164602	0		==			
ANR	164783	CallExpression	g . getNumNodes ( )		164602	0					
ANR	164784	Callee	g . getNumNodes		164602	0					
ANR	164785	MemberAccess	g . getNumNodes		164602	0					
ANR	164786	Identifier	g		164602	0					
ANR	164787	Identifier	getNumNodes		164602	1					
ANR	164788	ArgumentList			164602	1					
ANR	164789	Identifier	i		164602	1					
ANR	164790	GotoStatement	goto retnull ;	77:2:1972:1984	164602	1	True				
ANR	164791	Identifier	retnull		164602	0					
ANR	164792	ExpressionStatement	source = i	80:1:2001:2011	164602	15	True				
ANR	164793	AssignmentExpression	source = i		164602	0		=			
ANR	164794	Identifier	source		164602	0					
ANR	164795	Identifier	i		164602	1					
ANR	164796	ExpressionStatement	"sink = g . getArc ( i , 0 )"	81:1:2014:2034	164602	16	True				
ANR	164797	AssignmentExpression	"sink = g . getArc ( i , 0 )"		164602	0		=			
ANR	164798	Identifier	sink		164602	0					
ANR	164799	CallExpression	"g . getArc ( i , 0 )"		164602	1					
ANR	164800	Callee	g . getArc		164602	0					
ANR	164801	MemberAccess	g . getArc		164602	0					
ANR	164802	Identifier	g		164602	0					
ANR	164803	Identifier	getArc		164602	1					
ANR	164804	ArgumentList	i		164602	1					
ANR	164805	Argument	i		164602	0					
ANR	164806	Identifier	i		164602	0					
ANR	164807	Argument	0		164602	1					
ANR	164808	PrimaryExpression	0		164602	0					
ANR	164809	ExpressionStatement	color [ source ] = 1	84:4:2075:2094	164602	17	True				
ANR	164810	AssignmentExpression	color [ source ] = 1		164602	0		=			
ANR	164811	ArrayIndexing	color [ source ]		164602	0					
ANR	164812	Identifier	color		164602	0					
ANR	164813	Identifier	source		164602	1					
ANR	164814	PrimaryExpression	1		164602	1					
ANR	164815	ExpressionStatement	color [ sink ] = 2	85:1:2120:2137	164602	18	True				
ANR	164816	AssignmentExpression	color [ sink ] = 2		164602	0		=			
ANR	164817	ArrayIndexing	color [ sink ]		164602	0					
ANR	164818	Identifier	color		164602	0					
ANR	164819	Identifier	sink		164602	1					
ANR	164820	PrimaryExpression	2		164602	1					
ANR	164821	ExpressionStatement	sked [ 0 ] = source	89:1:2198:2214	164602	19	True				
ANR	164822	AssignmentExpression	sked [ 0 ] = source		164602	0		=			
ANR	164823	ArrayIndexing	sked [ 0 ]		164602	0					
ANR	164824	Identifier	sked		164602	0					
ANR	164825	PrimaryExpression	0		164602	1					
ANR	164826	Identifier	source		164602	1					
ANR	164827	ExpressionStatement	idx = 1	90:1:2217:2222	164602	20	True				
ANR	164828	AssignmentExpression	idx = 1		164602	0		=			
ANR	164829	Identifier	idx		164602	0					
ANR	164830	PrimaryExpression	1		164602	1					
ANR	164831	WhileStatement	while ( true )		164602	21					
ANR	164832	Condition	true	94:8:2249:2252	164602	0	True				
ANR	164833	Identifier	true		164602	0					
ANR	164834	CompoundStatement		102:2:2190:2221	164602	1					
ANR	164835	IfStatement	if ( 1 == gRev . getNumArcs ( sink ) )		164602	0					
ANR	164836	Condition	1 == gRev . getNumArcs ( sink )	98:6:2350:2375	164602	0	True				
ANR	164837	EqualityExpression	1 == gRev . getNumArcs ( sink )		164602	0		==			
ANR	164838	PrimaryExpression	1		164602	0					
ANR	164839	CallExpression	gRev . getNumArcs ( sink )		164602	1					
ANR	164840	Callee	gRev . getNumArcs		164602	0					
ANR	164841	MemberAccess	gRev . getNumArcs		164602	0					
ANR	164842	Identifier	gRev		164602	0					
ANR	164843	Identifier	getNumArcs		164602	1					
ANR	164844	ArgumentList	sink		164602	1					
ANR	164845	Argument	sink		164602	0					
ANR	164846	Identifier	sink		164602	0					
ANR	164847	BreakStatement	break ;	99:3:2382:2387	164602	1	True				
ANR	164848	IfStatement	if ( 2 != gRev . getNumArcs ( sink ) )		164602	1					
ANR	164849	Condition	2 != gRev . getNumArcs ( sink )	102:6:2454:2479	164602	0	True				
ANR	164850	EqualityExpression	2 != gRev . getNumArcs ( sink )		164602	0		!=			
ANR	164851	PrimaryExpression	2		164602	0					
ANR	164852	CallExpression	gRev . getNumArcs ( sink )		164602	1					
ANR	164853	Callee	gRev . getNumArcs		164602	0					
ANR	164854	MemberAccess	gRev . getNumArcs		164602	0					
ANR	164855	Identifier	gRev		164602	0					
ANR	164856	Identifier	getNumArcs		164602	1					
ANR	164857	ArgumentList	sink		164602	1					
ANR	164858	Argument	sink		164602	0					
ANR	164859	Identifier	sink		164602	0					
ANR	164860	GotoStatement	goto retnull ;	103:3:2486:2498	164602	1	True				
ANR	164861	Identifier	retnull		164602	0					
ANR	164862	IdentifierDeclStatement	"int parent0 = gRev . getArc ( sink , 0 ) ;"	109:2:2566:2599	164602	2	True				
ANR	164863	IdentifierDecl	"parent0 = gRev . getArc ( sink , 0 )"		164602	0					
ANR	164864	IdentifierDeclType	int		164602	0					
ANR	164865	Identifier	parent0		164602	1					
ANR	164866	AssignmentExpression	"parent0 = gRev . getArc ( sink , 0 )"		164602	2		=			
ANR	164867	Identifier	parent0		164602	0					
ANR	164868	CallExpression	"gRev . getArc ( sink , 0 )"		164602	1					
ANR	164869	Callee	gRev . getArc		164602	0					
ANR	164870	MemberAccess	gRev . getArc		164602	0					
ANR	164871	Identifier	gRev		164602	0					
ANR	164872	Identifier	getArc		164602	1					
ANR	164873	ArgumentList	sink		164602	1					
ANR	164874	Argument	sink		164602	0					
ANR	164875	Identifier	sink		164602	0					
ANR	164876	Argument	0		164602	1					
ANR	164877	PrimaryExpression	0		164602	0					
ANR	164878	IdentifierDeclStatement	"int parent1 = gRev . getArc ( sink , 1 ) ;"	110:2:2603:2636	164602	3	True				
ANR	164879	IdentifierDecl	"parent1 = gRev . getArc ( sink , 1 )"		164602	0					
ANR	164880	IdentifierDeclType	int		164602	0					
ANR	164881	Identifier	parent1		164602	1					
ANR	164882	AssignmentExpression	"parent1 = gRev . getArc ( sink , 1 )"		164602	2		=			
ANR	164883	Identifier	parent1		164602	0					
ANR	164884	CallExpression	"gRev . getArc ( sink , 1 )"		164602	1					
ANR	164885	Callee	gRev . getArc		164602	0					
ANR	164886	MemberAccess	gRev . getArc		164602	0					
ANR	164887	Identifier	gRev		164602	0					
ANR	164888	Identifier	getArc		164602	1					
ANR	164889	ArgumentList	sink		164602	1					
ANR	164890	Argument	sink		164602	0					
ANR	164891	Identifier	sink		164602	0					
ANR	164892	Argument	1		164602	1					
ANR	164893	PrimaryExpression	1		164602	0					
ANR	164894	IfStatement	if ( 0 != gRev . getNumArcs ( parent0 ) || 0 != gRev . getNumArcs ( parent1 ) )		164602	4					
ANR	164895	Condition	0 != gRev . getNumArcs ( parent0 ) || 0 != gRev . getNumArcs ( parent1 )	111:6:2644:2701	164602	0	True				
ANR	164896	OrExpression	0 != gRev . getNumArcs ( parent0 ) || 0 != gRev . getNumArcs ( parent1 )		164602	0		||			
ANR	164897	EqualityExpression	0 != gRev . getNumArcs ( parent0 )		164602	0		!=			
ANR	164898	PrimaryExpression	0		164602	0					
ANR	164899	CallExpression	gRev . getNumArcs ( parent0 )		164602	1					
ANR	164900	Callee	gRev . getNumArcs		164602	0					
ANR	164901	MemberAccess	gRev . getNumArcs		164602	0					
ANR	164902	Identifier	gRev		164602	0					
ANR	164903	Identifier	getNumArcs		164602	1					
ANR	164904	ArgumentList	parent0		164602	1					
ANR	164905	Argument	parent0		164602	0					
ANR	164906	Identifier	parent0		164602	0					
ANR	164907	EqualityExpression	0 != gRev . getNumArcs ( parent1 )		164602	1		!=			
ANR	164908	PrimaryExpression	0		164602	0					
ANR	164909	CallExpression	gRev . getNumArcs ( parent1 )		164602	1					
ANR	164910	Callee	gRev . getNumArcs		164602	0					
ANR	164911	MemberAccess	gRev . getNumArcs		164602	0					
ANR	164912	Identifier	gRev		164602	0					
ANR	164913	Identifier	getNumArcs		164602	1					
ANR	164914	ArgumentList	parent1		164602	1					
ANR	164915	Argument	parent1		164602	0					
ANR	164916	Identifier	parent1		164602	0					
ANR	164917	GotoStatement	goto retnull ;	112:3:2708:2720	164602	1	True				
ANR	164918	Identifier	retnull		164602	0					
ANR	164919	IfStatement	if ( 0 != color [ parent0 ] && 0 != color [ parent1 ] )		164602	5					
ANR	164920	Condition	0 != color [ parent0 ] && 0 != color [ parent1 ]	116:6:2807:2844	164602	0	True				
ANR	164921	AndExpression	0 != color [ parent0 ] && 0 != color [ parent1 ]		164602	0		&&			
ANR	164922	EqualityExpression	0 != color [ parent0 ]		164602	0		!=			
ANR	164923	PrimaryExpression	0		164602	0					
ANR	164924	ArrayIndexing	color [ parent0 ]		164602	1					
ANR	164925	Identifier	color		164602	0					
ANR	164926	Identifier	parent0		164602	1					
ANR	164927	EqualityExpression	0 != color [ parent1 ]		164602	1		!=			
ANR	164928	PrimaryExpression	0		164602	0					
ANR	164929	ArrayIndexing	color [ parent1 ]		164602	1					
ANR	164930	Identifier	color		164602	0					
ANR	164931	Identifier	parent1		164602	1					
ANR	164932	GotoStatement	goto retnull ;	117:3:2851:2863	164602	1	True				
ANR	164933	Identifier	retnull		164602	0					
ANR	164934	IfStatement	if ( 0 == color [ parent0 ] )		164602	6					
ANR	164935	Condition	0 == color [ parent0 ]	120:6:2899:2915	164602	0	True				
ANR	164936	EqualityExpression	0 == color [ parent0 ]		164602	0		==			
ANR	164937	PrimaryExpression	0		164602	0					
ANR	164938	ArrayIndexing	color [ parent0 ]		164602	1					
ANR	164939	Identifier	color		164602	0					
ANR	164940	Identifier	parent0		164602	1					
ANR	164941	ExpressionStatement	source = parent0	121:3:2922:2938	164602	1	True				
ANR	164942	AssignmentExpression	source = parent0		164602	0		=			
ANR	164943	Identifier	source		164602	0					
ANR	164944	Identifier	parent0		164602	1					
ANR	164945	ElseStatement	else		164602	0					
ANR	164946	ExpressionStatement	source = parent1	123:3:2950:2966	164602	0	True				
ANR	164947	AssignmentExpression	source = parent1		164602	0		=			
ANR	164948	Identifier	source		164602	0					
ANR	164949	Identifier	parent1		164602	1					
ANR	164950	ExpressionStatement	color [ source ] = 1	126:2:2993:3010	164602	7	True				
ANR	164951	AssignmentExpression	color [ source ] = 1		164602	0		=			
ANR	164952	ArrayIndexing	color [ source ]		164602	0					
ANR	164953	Identifier	color		164602	0					
ANR	164954	Identifier	source		164602	1					
ANR	164955	PrimaryExpression	1		164602	1					
ANR	164956	ExpressionStatement	sked [ idx ] = source	130:2:3076:3094	164602	8	True				
ANR	164957	AssignmentExpression	sked [ idx ] = source		164602	0		=			
ANR	164958	ArrayIndexing	sked [ idx ]		164602	0					
ANR	164959	Identifier	sked		164602	0					
ANR	164960	Identifier	idx		164602	1					
ANR	164961	Identifier	source		164602	1					
ANR	164962	ExpressionStatement	idx ++	131:2:3098:3103	164602	9	True				
ANR	164963	PostIncDecOperationExpression	idx ++		164602	0					
ANR	164964	Identifier	idx		164602	0					
ANR	164965	IncDec	++		164602	1					
ANR	164966	IfStatement	if ( 2 != g . getNumArcs ( source ) )		164602	10					
ANR	164967	Condition	2 != g . getNumArcs ( source )	140:6:3228:3252	164602	0	True				
ANR	164968	EqualityExpression	2 != g . getNumArcs ( source )		164602	0		!=			
ANR	164969	PrimaryExpression	2		164602	0					
ANR	164970	CallExpression	g . getNumArcs ( source )		164602	1					
ANR	164971	Callee	g . getNumArcs		164602	0					
ANR	164972	MemberAccess	g . getNumArcs		164602	0					
ANR	164973	Identifier	g		164602	0					
ANR	164974	Identifier	getNumArcs		164602	1					
ANR	164975	ArgumentList	source		164602	1					
ANR	164976	Argument	source		164602	0					
ANR	164977	Identifier	source		164602	0					
ANR	164978	GotoStatement	goto retnull ;	141:3:3259:3271	164602	1	True				
ANR	164979	Identifier	retnull		164602	0					
ANR	164980	IdentifierDeclStatement	"int child0 = g . getArc ( source , 0 ) ;"	146:2:3339:3370	164602	11	True				
ANR	164981	IdentifierDecl	"child0 = g . getArc ( source , 0 )"		164602	0					
ANR	164982	IdentifierDeclType	int		164602	0					
ANR	164983	Identifier	child0		164602	1					
ANR	164984	AssignmentExpression	"child0 = g . getArc ( source , 0 )"		164602	2		=			
ANR	164985	Identifier	child0		164602	0					
ANR	164986	CallExpression	"g . getArc ( source , 0 )"		164602	1					
ANR	164987	Callee	g . getArc		164602	0					
ANR	164988	MemberAccess	g . getArc		164602	0					
ANR	164989	Identifier	g		164602	0					
ANR	164990	Identifier	getArc		164602	1					
ANR	164991	ArgumentList	source		164602	1					
ANR	164992	Argument	source		164602	0					
ANR	164993	Identifier	source		164602	0					
ANR	164994	Argument	0		164602	1					
ANR	164995	PrimaryExpression	0		164602	0					
ANR	164996	IdentifierDeclStatement	"int child1 = g . getArc ( source , 1 ) ;"	147:2:3374:3405	164602	12	True				
ANR	164997	IdentifierDecl	"child1 = g . getArc ( source , 1 )"		164602	0					
ANR	164998	IdentifierDeclType	int		164602	0					
ANR	164999	Identifier	child1		164602	1					
ANR	165000	AssignmentExpression	"child1 = g . getArc ( source , 1 )"		164602	2		=			
ANR	165001	Identifier	child1		164602	0					
ANR	165002	CallExpression	"g . getArc ( source , 1 )"		164602	1					
ANR	165003	Callee	g . getArc		164602	0					
ANR	165004	MemberAccess	g . getArc		164602	0					
ANR	165005	Identifier	g		164602	0					
ANR	165006	Identifier	getArc		164602	1					
ANR	165007	ArgumentList	source		164602	1					
ANR	165008	Argument	source		164602	0					
ANR	165009	Identifier	source		164602	0					
ANR	165010	Argument	1		164602	1					
ANR	165011	PrimaryExpression	1		164602	0					
ANR	165012	IfStatement	if ( 0 != g . getNumArcs ( child0 ) || 0 != g . getNumArcs ( child1 ) )		164602	13					
ANR	165013	Condition	0 != g . getNumArcs ( child0 ) || 0 != g . getNumArcs ( child1 )	148:6:3413:3462	164602	0	True				
ANR	165014	OrExpression	0 != g . getNumArcs ( child0 ) || 0 != g . getNumArcs ( child1 )		164602	0		||			
ANR	165015	EqualityExpression	0 != g . getNumArcs ( child0 )		164602	0		!=			
ANR	165016	PrimaryExpression	0		164602	0					
ANR	165017	CallExpression	g . getNumArcs ( child0 )		164602	1					
ANR	165018	Callee	g . getNumArcs		164602	0					
ANR	165019	MemberAccess	g . getNumArcs		164602	0					
ANR	165020	Identifier	g		164602	0					
ANR	165021	Identifier	getNumArcs		164602	1					
ANR	165022	ArgumentList	child0		164602	1					
ANR	165023	Argument	child0		164602	0					
ANR	165024	Identifier	child0		164602	0					
ANR	165025	EqualityExpression	0 != g . getNumArcs ( child1 )		164602	1		!=			
ANR	165026	PrimaryExpression	0		164602	0					
ANR	165027	CallExpression	g . getNumArcs ( child1 )		164602	1					
ANR	165028	Callee	g . getNumArcs		164602	0					
ANR	165029	MemberAccess	g . getNumArcs		164602	0					
ANR	165030	Identifier	g		164602	0					
ANR	165031	Identifier	getNumArcs		164602	1					
ANR	165032	ArgumentList	child1		164602	1					
ANR	165033	Argument	child1		164602	0					
ANR	165034	Identifier	child1		164602	0					
ANR	165035	GotoStatement	goto retnull ;	149:3:3469:3481	164602	1	True				
ANR	165036	Identifier	retnull		164602	0					
ANR	165037	IfStatement	if ( 0 != color [ child0 ] && 0 != color [ child1 ] )		164602	14					
ANR	165038	Condition	0 != color [ child0 ] && 0 != color [ child1 ]	153:6:3567:3602	164602	0	True				
ANR	165039	AndExpression	0 != color [ child0 ] && 0 != color [ child1 ]		164602	0		&&			
ANR	165040	EqualityExpression	0 != color [ child0 ]		164602	0		!=			
ANR	165041	PrimaryExpression	0		164602	0					
ANR	165042	ArrayIndexing	color [ child0 ]		164602	1					
ANR	165043	Identifier	color		164602	0					
ANR	165044	Identifier	child0		164602	1					
ANR	165045	EqualityExpression	0 != color [ child1 ]		164602	1		!=			
ANR	165046	PrimaryExpression	0		164602	0					
ANR	165047	ArrayIndexing	color [ child1 ]		164602	1					
ANR	165048	Identifier	color		164602	0					
ANR	165049	Identifier	child1		164602	1					
ANR	165050	GotoStatement	goto retnull ;	154:3:3609:3621	164602	1	True				
ANR	165051	Identifier	retnull		164602	0					
ANR	165052	IfStatement	if ( 0 == color [ child0 ] )		164602	15					
ANR	165053	Condition	0 == color [ child0 ]	157:6:3657:3672	164602	0	True				
ANR	165054	EqualityExpression	0 == color [ child0 ]		164602	0		==			
ANR	165055	PrimaryExpression	0		164602	0					
ANR	165056	ArrayIndexing	color [ child0 ]		164602	1					
ANR	165057	Identifier	color		164602	0					
ANR	165058	Identifier	child0		164602	1					
ANR	165059	ExpressionStatement	sink = child0	158:3:3679:3692	164602	1	True				
ANR	165060	AssignmentExpression	sink = child0		164602	0		=			
ANR	165061	Identifier	sink		164602	0					
ANR	165062	Identifier	child0		164602	1					
ANR	165063	ElseStatement	else		164602	0					
ANR	165064	ExpressionStatement	sink = child1	160:3:3704:3717	164602	0	True				
ANR	165065	AssignmentExpression	sink = child1		164602	0		=			
ANR	165066	Identifier	sink		164602	0					
ANR	165067	Identifier	child1		164602	1					
ANR	165068	ExpressionStatement	color [ sink ] = 2	163:2:3742:3757	164602	16	True				
ANR	165069	AssignmentExpression	color [ sink ] = 2		164602	0		=			
ANR	165070	ArrayIndexing	color [ sink ]		164602	0					
ANR	165071	Identifier	color		164602	0					
ANR	165072	Identifier	sink		164602	1					
ANR	165073	PrimaryExpression	2		164602	1					
ANR	165074	ExpressionStatement		164:2:3783:3783	164602	22	True				
ANR	165075	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		164602	23					
ANR	165076	ForInit	i = 0 ;	167:6:3831:3834	164602	0	True				
ANR	165077	AssignmentExpression	i = 0		164602	0		=			
ANR	165078	Identifier	i		164602	0					
ANR	165079	PrimaryExpression	0		164602	1					
ANR	165080	Condition	i < g . getNumNodes ( )	167:11:3836:3852	164602	1	True				
ANR	165081	RelationalExpression	i < g . getNumNodes ( )		164602	0		<			
ANR	165082	Identifier	i		164602	0					
ANR	165083	CallExpression	g . getNumNodes ( )		164602	1					
ANR	165084	Callee	g . getNumNodes		164602	0					
ANR	165085	MemberAccess	g . getNumNodes		164602	0					
ANR	165086	Identifier	g		164602	0					
ANR	165087	Identifier	getNumNodes		164602	1					
ANR	165088	ArgumentList			164602	1					
ANR	165089	PostIncDecOperationExpression	i ++	167:30:3855:3857	164602	2	True				
ANR	165090	Identifier	i		164602	0					
ANR	165091	IncDec	++		164602	1					
ANR	165092	CompoundStatement		122:36:2677:2677	164602	3					
ANR	165093	IfStatement	if ( 0 == color [ i ] )		164602	0					
ANR	165094	Condition	0 == color [ i ]	168:6:3869:3879	164602	0	True				
ANR	165095	EqualityExpression	0 == color [ i ]		164602	0		==			
ANR	165096	PrimaryExpression	0		164602	0					
ANR	165097	ArrayIndexing	color [ i ]		164602	1					
ANR	165098	Identifier	color		164602	0					
ANR	165099	Identifier	i		164602	1					
ANR	165100	GotoStatement	goto retnull ;	169:3:3886:3898	164602	1	True				
ANR	165101	Identifier	retnull		164602	0					
ANR	165102	ExpressionStatement		170:2:3902:3902	164602	24	True				
ANR	165103	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) / 2 ; i ++ )		164602	25					
ANR	165104	ForInit	i = 0 ;	175:6:3971:3974	164602	0	True				
ANR	165105	AssignmentExpression	i = 0		164602	0		=			
ANR	165106	Identifier	i		164602	0					
ANR	165107	PrimaryExpression	0		164602	1					
ANR	165108	Condition	i < g . getNumNodes ( ) / 2	175:11:3976:3994	164602	1	True				
ANR	165109	RelationalExpression	i < g . getNumNodes ( ) / 2		164602	0		<			
ANR	165110	Identifier	i		164602	0					
ANR	165111	MultiplicativeExpression	g . getNumNodes ( ) / 2		164602	1		/			
ANR	165112	CallExpression	g . getNumNodes ( )		164602	0					
ANR	165113	Callee	g . getNumNodes		164602	0					
ANR	165114	MemberAccess	g . getNumNodes		164602	0					
ANR	165115	Identifier	g		164602	0					
ANR	165116	Identifier	getNumNodes		164602	1					
ANR	165117	ArgumentList			164602	1					
ANR	165118	PrimaryExpression	2		164602	1					
ANR	165119	PostIncDecOperationExpression	i ++	175:32:3997:3999	164602	2	True				
ANR	165120	Identifier	i		164602	0					
ANR	165121	IncDec	++		164602	1					
ANR	165122	ExpressionStatement	sked [ i + g . getNumNodes ( ) / 2 ] = sked [ i ]	176:2:4005:4043	164602	3	True				
ANR	165123	AssignmentExpression	sked [ i + g . getNumNodes ( ) / 2 ] = sked [ i ]		164602	0		=			
ANR	165124	ArrayIndexing	sked [ i + g . getNumNodes ( ) / 2 ]		164602	0					
ANR	165125	Identifier	sked		164602	0					
ANR	165126	AdditiveExpression	i + g . getNumNodes ( ) / 2		164602	1		+			
ANR	165127	Identifier	i		164602	0					
ANR	165128	MultiplicativeExpression	g . getNumNodes ( ) / 2		164602	1		/			
ANR	165129	CallExpression	g . getNumNodes ( )		164602	0					
ANR	165130	Callee	g . getNumNodes		164602	0					
ANR	165131	MemberAccess	g . getNumNodes		164602	0					
ANR	165132	Identifier	g		164602	0					
ANR	165133	Identifier	getNumNodes		164602	1					
ANR	165134	ArgumentList			164602	1					
ANR	165135	PrimaryExpression	2		164602	1					
ANR	165136	ArrayIndexing	sked [ i ]		164602	1					
ANR	165137	Identifier	sked		164602	0					
ANR	165138	Identifier	i		164602	1					
ANR	165139	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) / 2 ; i ++ )		164602	26					
ANR	165140	ForInit	i = 0 ;	177:6:4051:4054	164602	0	True				
ANR	165141	AssignmentExpression	i = 0		164602	0		=			
ANR	165142	Identifier	i		164602	0					
ANR	165143	PrimaryExpression	0		164602	1					
ANR	165144	Condition	i < g . getNumNodes ( ) / 2	177:11:4056:4074	164602	1	True				
ANR	165145	RelationalExpression	i < g . getNumNodes ( ) / 2		164602	0		<			
ANR	165146	Identifier	i		164602	0					
ANR	165147	MultiplicativeExpression	g . getNumNodes ( ) / 2		164602	1		/			
ANR	165148	CallExpression	g . getNumNodes ( )		164602	0					
ANR	165149	Callee	g . getNumNodes		164602	0					
ANR	165150	MemberAccess	g . getNumNodes		164602	0					
ANR	165151	Identifier	g		164602	0					
ANR	165152	Identifier	getNumNodes		164602	1					
ANR	165153	ArgumentList			164602	1					
ANR	165154	PrimaryExpression	2		164602	1					
ANR	165155	PostIncDecOperationExpression	i ++	177:32:4077:4079	164602	2	True				
ANR	165156	Identifier	i		164602	0					
ANR	165157	IncDec	++		164602	1					
ANR	165158	ExpressionStatement	sked [ i ] = sked [ g . getNumNodes ( ) - i - 1 ]	178:2:4085:4127	164602	3	True				
ANR	165159	AssignmentExpression	sked [ i ] = sked [ g . getNumNodes ( ) - i - 1 ]		164602	0		=			
ANR	165160	ArrayIndexing	sked [ i ]		164602	0					
ANR	165161	Identifier	sked		164602	0					
ANR	165162	Identifier	i		164602	1					
ANR	165163	ArrayIndexing	sked [ g . getNumNodes ( ) - i - 1 ]		164602	1					
ANR	165164	Identifier	sked		164602	0					
ANR	165165	AdditiveExpression	g . getNumNodes ( ) - i - 1		164602	1		-			
ANR	165166	CallExpression	g . getNumNodes ( )		164602	0					
ANR	165167	Callee	g . getNumNodes		164602	0					
ANR	165168	MemberAccess	g . getNumNodes		164602	0					
ANR	165169	Identifier	g		164602	0					
ANR	165170	Identifier	getNumNodes		164602	1					
ANR	165171	ArgumentList			164602	1					
ANR	165172	AdditiveExpression	i - 1		164602	1		-			
ANR	165173	Identifier	i		164602	0					
ANR	165174	PrimaryExpression	1		164602	1					
ANR	165175	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		164602	27					
ANR	165176	ForInit	i = 0 ;	182:6:4213:4216	164602	0	True				
ANR	165177	AssignmentExpression	i = 0		164602	0		=			
ANR	165178	Identifier	i		164602	0					
ANR	165179	PrimaryExpression	0		164602	1					
ANR	165180	Condition	i < g . getNumNodes ( )	182:11:4218:4234	164602	1	True				
ANR	165181	RelationalExpression	i < g . getNumNodes ( )		164602	0		<			
ANR	165182	Identifier	i		164602	0					
ANR	165183	CallExpression	g . getNumNodes ( )		164602	1					
ANR	165184	Callee	g . getNumNodes		164602	0					
ANR	165185	MemberAccess	g . getNumNodes		164602	0					
ANR	165186	Identifier	g		164602	0					
ANR	165187	Identifier	getNumNodes		164602	1					
ANR	165188	ArgumentList			164602	1					
ANR	165189	PostIncDecOperationExpression	i ++	182:30:4237:4239	164602	2	True				
ANR	165190	Identifier	i		164602	0					
ANR	165191	IncDec	++		164602	1					
ANR	165192	CompoundStatement		137:36:3059:3059	164602	3					
ANR	165193	IfStatement	if ( 2 == color [ i ] )		164602	0					
ANR	165194	Condition	2 == color [ i ]	183:6:4251:4261	164602	0	True				
ANR	165195	EqualityExpression	2 == color [ i ]		164602	0		==			
ANR	165196	PrimaryExpression	2		164602	0					
ANR	165197	ArrayIndexing	color [ i ]		164602	1					
ANR	165198	Identifier	color		164602	0					
ANR	165199	Identifier	i		164602	1					
ANR	165200	CompoundStatement		138:20:3081:3081	164602	1					
ANR	165201	ExpressionStatement	sked [ idx ] = i	184:3:4270:4283	164602	0	True				
ANR	165202	AssignmentExpression	sked [ idx ] = i		164602	0		=			
ANR	165203	ArrayIndexing	sked [ idx ]		164602	0					
ANR	165204	Identifier	sked		164602	0					
ANR	165205	Identifier	idx		164602	1					
ANR	165206	Identifier	i		164602	1					
ANR	165207	ExpressionStatement	idx ++	185:3:4288:4293	164602	1	True				
ANR	165208	PostIncDecOperationExpression	idx ++		164602	0					
ANR	165209	Identifier	idx		164602	0					
ANR	165210	IncDec	++		164602	1					
ANR	165211	ExpressionStatement		186:3:4298:4298	164602	1	True				
ANR	165212	ExpressionStatement		187:2:4302:4302	164602	28	True				
ANR	165213	Statement	delete	190:1:4307:4312	164602	29	True				
ANR	165214	Statement	[	190:7:4313:4313	164602	30	True				
ANR	165215	Statement	]	190:8:4314:4314	164602	31	True				
ANR	165216	ExpressionStatement	color	190:10:4316:4321	164602	32	True				
ANR	165217	Identifier	color		164602	0					
ANR	165218	ReturnStatement	return sked ;	191:1:4324:4335	164602	33	True				
ANR	165219	Identifier	sked		164602	0					
ANR	165220	Label	retnull :	193:0:4338:4345	164602	34	True				
ANR	165221	Identifier	retnull		164602	0					
ANR	165222	IfStatement	if ( color )		164602	35					
ANR	165223	Condition	color	194:5:4352:4356	164602	0	True				
ANR	165224	Identifier	color		164602	0					
ANR	165225	Statement	delete	194:13:4360:4365	164602	1	True				
ANR	165226	Statement	[	194:19:4366:4366	164602	36	True				
ANR	165227	Statement	]	194:20:4367:4367	164602	37	True				
ANR	165228	ExpressionStatement	color	194:22:4369:4374	164602	38	True				
ANR	165229	Identifier	color		164602	0					
ANR	165230	IfStatement	if ( sked )		164602	39					
ANR	165231	Condition	sked	195:5:4381:4384	164602	0	True				
ANR	165232	Identifier	sked		164602	0					
ANR	165233	Statement	delete	195:12:4388:4393	164602	1	True				
ANR	165234	Statement	[	195:18:4394:4394	164602	40	True				
ANR	165235	Statement	]	195:19:4395:4395	164602	41	True				
ANR	165236	ExpressionStatement	sked	195:21:4397:4401	164602	42	True				
ANR	165237	Identifier	sked		164602	0					
ANR	165238	ReturnStatement	return NULL ;	196:1:4404:4415	164602	43	True				
ANR	165239	Identifier	NULL		164602	0					
ANR	165240	ReturnType	int *		164602	1					
ANR	165241	Identifier	ConstituentLibrary :: checkN		164602	2					
ANR	165242	ParameterList	const Dag & g		164602	3					
ANR	165243	Parameter	const Dag & g	45:33:1169:1180	164602	0	True				
ANR	165244	ParameterType	const Dag &		164602	0					
ANR	165245	Identifier	g		164602	1					
ANR	165246	CFGEntryNode	ENTRY		164602		True				
ANR	165247	CFGExitNode	EXIT		164602		True				
ANR	165248	CFGExceptionNode	EXCEPTION		164602		True				
ANR	165249	Symbol	sked		164602						
ANR	165250	Symbol	g . getNumNodes		164602						
ANR	165251	Symbol	g . getNumArcs		164602						
ANR	165252	Symbol	color		164602						
ANR	165253	Symbol	* parent1		164602						
ANR	165254	Symbol	* parent0		164602						
ANR	165255	Symbol	g . getArc		164602						
ANR	165256	Symbol	* sked		164602						
ANR	165257	Symbol	source		164602						
ANR	165258	Symbol	gRev		164602						
ANR	165259	Symbol	child0		164602						
ANR	165260	Symbol	* g . getNumNodes		164602						
ANR	165261	Symbol	child1		164602						
ANR	165262	Symbol	* source		164602						
ANR	165263	Symbol	* idx		164602						
ANR	165264	Symbol	* child1		164602						
ANR	165265	Symbol	* child0		164602						
ANR	165266	Symbol	NULL		164602						
ANR	165267	Symbol	sink		164602						
ANR	165268	Symbol	gRev . getNumArcs		164602						
ANR	165269	Symbol	g		164602						
ANR	165270	Symbol	i		164602						
ANR	165271	Symbol	* color		164602						
ANR	165272	Symbol	* sink		164602						
ANR	165273	Symbol	parent0		164602						
ANR	165274	Symbol	parent1		164602						
ANR	165275	Symbol	* g		164602						
ANR	165276	Symbol	* i		164602						
ANR	165277	Symbol	gRev . getArc		164602						
ANR	165278	Symbol	true		164602						
ANR	165279	Symbol	idx		164602						
ANR	165280	Function	ConstituentLibrary :: checkC	219:0:4822:5216							
ANR	165281	FunctionDef	ConstituentLibrary :: checkC (const Dag & g)		165280	0					
ANR	165282	CompoundStatement		220:0:4869:5216	165280	0					
ANR	165283	IdentifierDeclStatement	Dag gRep ;	222:1:4897:4905	165280	0	True				
ANR	165284	IdentifierDecl	gRep		165280	0					
ANR	165285	IdentifierDeclType	Dag		165280	0					
ANR	165286	Identifier	gRep		165280	1					
ANR	165287	ExpressionStatement	gRep . initializeWith ( g )	223:1:4908:4930	165280	1	True				
ANR	165288	CallExpression	gRep . initializeWith ( g )		165280	0					
ANR	165289	Callee	gRep . initializeWith		165280	0					
ANR	165290	MemberAccess	gRep . initializeWith		165280	0					
ANR	165291	Identifier	gRep		165280	0					
ANR	165292	Identifier	initializeWith		165280	1					
ANR	165293	ArgumentList	g		165280	1					
ANR	165294	Argument	g		165280	0					
ANR	165295	Identifier	g		165280	0					
ANR	165296	IfStatement	if ( ( gRep . getNumNodes ( ) % 2 ) != 0 || gRep . getNumNodes ( ) < 4 )		165280	2					
ANR	165297	Condition	( gRep . getNumNodes ( ) % 2 ) != 0 || gRep . getNumNodes ( ) < 4	226:5:4994:5044	165280	0	True				
ANR	165298	OrExpression	( gRep . getNumNodes ( ) % 2 ) != 0 || gRep . getNumNodes ( ) < 4		165280	0		||			
ANR	165299	EqualityExpression	( gRep . getNumNodes ( ) % 2 ) != 0		165280	0		!=			
ANR	165300	MultiplicativeExpression	gRep . getNumNodes ( ) % 2		165280	0		%			
ANR	165301	CallExpression	gRep . getNumNodes ( )		165280	0					
ANR	165302	Callee	gRep . getNumNodes		165280	0					
ANR	165303	MemberAccess	gRep . getNumNodes		165280	0					
ANR	165304	Identifier	gRep		165280	0					
ANR	165305	Identifier	getNumNodes		165280	1					
ANR	165306	ArgumentList			165280	1					
ANR	165307	PrimaryExpression	2		165280	1					
ANR	165308	PrimaryExpression	0		165280	1					
ANR	165309	RelationalExpression	gRep . getNumNodes ( ) < 4		165280	1		<			
ANR	165310	CallExpression	gRep . getNumNodes ( )		165280	0					
ANR	165311	Callee	gRep . getNumNodes		165280	0					
ANR	165312	MemberAccess	gRep . getNumNodes		165280	0					
ANR	165313	Identifier	gRep		165280	0					
ANR	165314	Identifier	getNumNodes		165280	1					
ANR	165315	ArgumentList			165280	1					
ANR	165316	PrimaryExpression	4		165280	1					
ANR	165317	ReturnStatement	return NULL ;	227:2:5050:5061	165280	1	True				
ANR	165318	Identifier	NULL		165280	0					
ANR	165319	IfStatement	if ( 0 >= gRep . getNumArcs ( 0 ) )		165280	3					
ANR	165320	Condition	0 >= gRep . getNumArcs ( 0 )	230:5:5100:5120	165280	0	True				
ANR	165321	RelationalExpression	0 >= gRep . getNumArcs ( 0 )		165280	0		>=			
ANR	165322	PrimaryExpression	0		165280	0					
ANR	165323	CallExpression	gRep . getNumArcs ( 0 )		165280	1					
ANR	165324	Callee	gRep . getNumArcs		165280	0					
ANR	165325	MemberAccess	gRep . getNumArcs		165280	0					
ANR	165326	Identifier	gRep		165280	0					
ANR	165327	Identifier	getNumArcs		165280	1					
ANR	165328	ArgumentList	0		165280	1					
ANR	165329	Argument	0		165280	0					
ANR	165330	PrimaryExpression	0		165280	0					
ANR	165331	ReturnStatement	return NULL ;	231:2:5126:5137	165280	1	True				
ANR	165332	Identifier	NULL		165280	0					
ANR	165333	IdentifierDeclStatement	int child = gRep . deappendArc ( 0 ) ;	232:1:5140:5171	165280	4	True				
ANR	165334	IdentifierDecl	child = gRep . deappendArc ( 0 )		165280	0					
ANR	165335	IdentifierDeclType	int		165280	0					
ANR	165336	Identifier	child		165280	1					
ANR	165337	AssignmentExpression	child = gRep . deappendArc ( 0 )		165280	2		=			
ANR	165338	Identifier	child		165280	0					
ANR	165339	CallExpression	gRep . deappendArc ( 0 )		165280	1					
ANR	165340	Callee	gRep . deappendArc		165280	0					
ANR	165341	MemberAccess	gRep . deappendArc		165280	0					
ANR	165342	Identifier	gRep		165280	0					
ANR	165343	Identifier	deappendArc		165280	1					
ANR	165344	ArgumentList	0		165280	1					
ANR	165345	Argument	0		165280	0					
ANR	165346	PrimaryExpression	0		165280	0					
ANR	165347	IdentifierDeclStatement	int * sched = checkN ( gRep ) ;	233:1:5174:5199	165280	5	True				
ANR	165348	IdentifierDecl	* sched = checkN ( gRep )		165280	0					
ANR	165349	IdentifierDeclType	int *		165280	0					
ANR	165350	Identifier	sched		165280	1					
ANR	165351	AssignmentExpression	* sched = checkN ( gRep )		165280	2		=			
ANR	165352	Identifier	sched		165280	0					
ANR	165353	CallExpression	checkN ( gRep )		165280	1					
ANR	165354	Callee	checkN		165280	0					
ANR	165355	Identifier	checkN		165280	0					
ANR	165356	ArgumentList	gRep		165280	1					
ANR	165357	Argument	gRep		165280	0					
ANR	165358	Identifier	gRep		165280	0					
ANR	165359	ReturnStatement	return sched ;	234:1:5202:5214	165280	6	True				
ANR	165360	Identifier	sched		165280	0					
ANR	165361	ReturnType	int *		165280	1					
ANR	165362	Identifier	ConstituentLibrary :: checkC		165280	2					
ANR	165363	ParameterList	const Dag & g		165280	3					
ANR	165364	Parameter	const Dag & g	219:33:4855:4866	165280	0	True				
ANR	165365	ParameterType	const Dag &		165280	0					
ANR	165366	Identifier	g		165280	1					
ANR	165367	CFGEntryNode	ENTRY		165280		True				
ANR	165368	CFGExitNode	EXIT		165280		True				
ANR	165369	Symbol	NULL		165280						
ANR	165370	Symbol	gRep . getNumArcs		165280						
ANR	165371	Symbol	sched		165280						
ANR	165372	Symbol	gRep		165280						
ANR	165373	Symbol	gRep . getNumNodes		165280						
ANR	165374	Symbol	g		165280						
ANR	165375	Symbol	gRep . deappendArc		165280						
ANR	165376	Symbol	checkN		165280						
ANR	165377	Symbol	child		165280						
ANR	165378	Function	ConstituentLibrary :: checkStrandW	257:0:5730:10961							
ANR	165379	FunctionDef	"ConstituentLibrary :: checkStrandW (const Dag & g , const Dag & gRev , int * * ppYield , int * * ppSeq , int * pSrc)"		165378	0					
ANR	165380	CompoundStatement		260:0:5861:10961	165378	0					
ANR	165381	IdentifierDeclStatement	int * color = NULL ;	261:1:5864:5881	165378	0	True				
ANR	165382	IdentifierDecl	* color = NULL		165378	0					
ANR	165383	IdentifierDeclType	int *		165378	0					
ANR	165384	Identifier	color		165378	1					
ANR	165385	AssignmentExpression	* color = NULL		165378	2		=			
ANR	165386	Identifier	NULL		165378	0					
ANR	165387	Identifier	NULL		165378	1					
ANR	165388	IdentifierDeclStatement	int * yield = NULL ;	262:1:5884:5901	165378	1	True				
ANR	165389	IdentifierDecl	* yield = NULL		165378	0					
ANR	165390	IdentifierDeclType	int *		165378	0					
ANR	165391	Identifier	yield		165378	1					
ANR	165392	AssignmentExpression	* yield = NULL		165378	2		=			
ANR	165393	Identifier	NULL		165378	0					
ANR	165394	Identifier	NULL		165378	1					
ANR	165395	IdentifierDeclStatement	int * seq = NULL ;	263:1:5904:5919	165378	2	True				
ANR	165396	IdentifierDecl	* seq = NULL		165378	0					
ANR	165397	IdentifierDeclType	int *		165378	0					
ANR	165398	Identifier	seq		165378	1					
ANR	165399	AssignmentExpression	* seq = NULL		165378	2		=			
ANR	165400	Identifier	NULL		165378	0					
ANR	165401	Identifier	NULL		165378	1					
ANR	165402	IdentifierDeclStatement	"int i , j , idx , source , child , parent , sibling , otherParent ;"	264:1:5922:5973	165378	3	True				
ANR	165403	IdentifierDecl	i		165378	0					
ANR	165404	IdentifierDeclType	int		165378	0					
ANR	165405	Identifier	i		165378	1					
ANR	165406	IdentifierDecl	j		165378	1					
ANR	165407	IdentifierDeclType	int		165378	0					
ANR	165408	Identifier	j		165378	1					
ANR	165409	IdentifierDecl	idx		165378	2					
ANR	165410	IdentifierDeclType	int		165378	0					
ANR	165411	Identifier	idx		165378	1					
ANR	165412	IdentifierDecl	source		165378	3					
ANR	165413	IdentifierDeclType	int		165378	0					
ANR	165414	Identifier	source		165378	1					
ANR	165415	IdentifierDecl	child		165378	4					
ANR	165416	IdentifierDeclType	int		165378	0					
ANR	165417	Identifier	child		165378	1					
ANR	165418	IdentifierDecl	parent		165378	5					
ANR	165419	IdentifierDeclType	int		165378	0					
ANR	165420	Identifier	parent		165378	1					
ANR	165421	IdentifierDecl	sibling		165378	6					
ANR	165422	IdentifierDeclType	int		165378	0					
ANR	165423	Identifier	sibling		165378	1					
ANR	165424	IdentifierDecl	otherParent		165378	7					
ANR	165425	IdentifierDeclType	int		165378	0					
ANR	165426	Identifier	otherParent		165378	1					
ANR	165427	IdentifierDeclStatement	bool found ;	265:1:5976:5986	165378	4	True				
ANR	165428	IdentifierDecl	found		165378	0					
ANR	165429	IdentifierDeclType	bool		165378	0					
ANR	165430	Identifier	found		165378	1					
ANR	165431	ExpressionStatement	yield = new int [ g . getNumNodes ( ) ]	268:1:6047:6079	165378	5	True				
ANR	165432	AssignmentExpression	yield = new int [ g . getNumNodes ( ) ]		165378	0		=			
ANR	165433	Identifier	yield		165378	0					
ANR	165434	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165435	Callee	g . getNumNodes		165378	0					
ANR	165436	MemberAccess	g . getNumNodes		165378	0					
ANR	165437	Identifier	g		165378	0					
ANR	165438	Identifier	getNumNodes		165378	1					
ANR	165439	ArgumentList			165378	1					
ANR	165440	ExpressionStatement	color = new int [ g . getNumNodes ( ) ]	269:1:6082:6114	165378	6	True				
ANR	165441	AssignmentExpression	color = new int [ g . getNumNodes ( ) ]		165378	0		=			
ANR	165442	Identifier	color		165378	0					
ANR	165443	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165444	Callee	g . getNumNodes		165378	0					
ANR	165445	MemberAccess	g . getNumNodes		165378	0					
ANR	165446	Identifier	g		165378	0					
ANR	165447	Identifier	getNumNodes		165378	1					
ANR	165448	ArgumentList			165378	1					
ANR	165449	ExpressionStatement	seq = new int [ g . getNumNodes ( ) ]	270:1:6117:6147	165378	7	True				
ANR	165450	AssignmentExpression	seq = new int [ g . getNumNodes ( ) ]		165378	0		=			
ANR	165451	Identifier	seq		165378	0					
ANR	165452	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165453	Callee	g . getNumNodes		165378	0					
ANR	165454	MemberAccess	g . getNumNodes		165378	0					
ANR	165455	Identifier	g		165378	0					
ANR	165456	Identifier	getNumNodes		165378	1					
ANR	165457	ArgumentList			165378	1					
ANR	165458	IfStatement	if ( NULL == color || NULL == yield || NULL == seq )		165378	8					
ANR	165459	Condition	NULL == color || NULL == yield || NULL == seq	271:5:6154:6192	165378	0	True				
ANR	165460	OrExpression	NULL == color || NULL == yield || NULL == seq		165378	0		||			
ANR	165461	EqualityExpression	NULL == color		165378	0		==			
ANR	165462	Identifier	NULL		165378	0					
ANR	165463	Identifier	color		165378	1					
ANR	165464	OrExpression	NULL == yield || NULL == seq		165378	1		||			
ANR	165465	EqualityExpression	NULL == yield		165378	0		==			
ANR	165466	Identifier	NULL		165378	0					
ANR	165467	Identifier	yield		165378	1					
ANR	165468	EqualityExpression	NULL == seq		165378	1		==			
ANR	165469	Identifier	NULL		165378	0					
ANR	165470	Identifier	seq		165378	1					
ANR	165471	ThrowStatement	"throw ""ConstituentLibrary::checkStrandW, allocation"" ;"	272:2:6198:6250	165378	1	True				
ANR	165472	PrimaryExpression	"""ConstituentLibrary::checkStrandW, allocation"""		165378	0					
ANR	165473	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		165378	9					
ANR	165474	ForInit	i = 0 ;	275:6:6277:6280	165378	0	True				
ANR	165475	AssignmentExpression	i = 0		165378	0		=			
ANR	165476	Identifier	i		165378	0					
ANR	165477	PrimaryExpression	0		165378	1					
ANR	165478	Condition	i < g . getNumNodes ( )	275:11:6282:6298	165378	1	True				
ANR	165479	RelationalExpression	i < g . getNumNodes ( )		165378	0		<			
ANR	165480	Identifier	i		165378	0					
ANR	165481	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165482	Callee	g . getNumNodes		165378	0					
ANR	165483	MemberAccess	g . getNumNodes		165378	0					
ANR	165484	Identifier	g		165378	0					
ANR	165485	Identifier	getNumNodes		165378	1					
ANR	165486	ArgumentList			165378	1					
ANR	165487	PostIncDecOperationExpression	i ++	275:30:6301:6303	165378	2	True				
ANR	165488	Identifier	i		165378	0					
ANR	165489	IncDec	++		165378	1					
ANR	165490	CompoundStatement		16:36:445:445	165378	3					
ANR	165491	IfStatement	if ( 0 == gRev . getNumArcs ( i ) )		165378	0					
ANR	165492	Condition	0 == gRev . getNumArcs ( i )	276:6:6315:6335	165378	0	True				
ANR	165493	EqualityExpression	0 == gRev . getNumArcs ( i )		165378	0		==			
ANR	165494	PrimaryExpression	0		165378	0					
ANR	165495	CallExpression	gRev . getNumArcs ( i )		165378	1					
ANR	165496	Callee	gRev . getNumArcs		165378	0					
ANR	165497	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165498	Identifier	gRev		165378	0					
ANR	165499	Identifier	getNumArcs		165378	1					
ANR	165500	ArgumentList	i		165378	1					
ANR	165501	Argument	i		165378	0					
ANR	165502	Identifier	i		165378	0					
ANR	165503	BreakStatement	break ;	277:3:6342:6347	165378	1	True				
ANR	165504	ExpressionStatement		278:2:6351:6351	165378	10	True				
ANR	165505	IfStatement	if ( g . getNumNodes ( ) == i )		165378	11					
ANR	165506	Condition	g . getNumNodes ( ) == i	280:5:6388:6405	165378	0	True				
ANR	165507	EqualityExpression	g . getNumNodes ( ) == i		165378	0		==			
ANR	165508	CallExpression	g . getNumNodes ( )		165378	0					
ANR	165509	Callee	g . getNumNodes		165378	0					
ANR	165510	MemberAccess	g . getNumNodes		165378	0					
ANR	165511	Identifier	g		165378	0					
ANR	165512	Identifier	getNumNodes		165378	1					
ANR	165513	ArgumentList			165378	1					
ANR	165514	Identifier	i		165378	1					
ANR	165515	GotoStatement	goto retnull ;	281:2:6411:6423	165378	1	True				
ANR	165516	Identifier	retnull		165378	0					
ANR	165517	ExpressionStatement	source = i	282:1:6426:6436	165378	12	True				
ANR	165518	AssignmentExpression	source = i		165378	0		=			
ANR	165519	Identifier	source		165378	0					
ANR	165520	Identifier	i		165378	1					
ANR	165521	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		165378	13					
ANR	165522	ForInit	i = 0 ;	286:6:6489:6492	165378	0	True				
ANR	165523	AssignmentExpression	i = 0		165378	0		=			
ANR	165524	Identifier	i		165378	0					
ANR	165525	PrimaryExpression	0		165378	1					
ANR	165526	Condition	i < g . getNumNodes ( )	286:11:6494:6510	165378	1	True				
ANR	165527	RelationalExpression	i < g . getNumNodes ( )		165378	0		<			
ANR	165528	Identifier	i		165378	0					
ANR	165529	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165530	Callee	g . getNumNodes		165378	0					
ANR	165531	MemberAccess	g . getNumNodes		165378	0					
ANR	165532	Identifier	g		165378	0					
ANR	165533	Identifier	getNumNodes		165378	1					
ANR	165534	ArgumentList			165378	1					
ANR	165535	PostIncDecOperationExpression	i ++	286:30:6513:6515	165378	2	True				
ANR	165536	Identifier	i		165378	0					
ANR	165537	IncDec	++		165378	1					
ANR	165538	ExpressionStatement	color [ i ] = 0	287:2:6521:6533	165378	3	True				
ANR	165539	AssignmentExpression	color [ i ] = 0		165378	0		=			
ANR	165540	ArrayIndexing	color [ i ]		165378	0					
ANR	165541	Identifier	color		165378	0					
ANR	165542	Identifier	i		165378	1					
ANR	165543	PrimaryExpression	0		165378	1					
ANR	165544	ExpressionStatement	found = true	288:1:6536:6548	165378	14	True				
ANR	165545	AssignmentExpression	found = true		165378	0		=			
ANR	165546	Identifier	found		165378	0					
ANR	165547	Identifier	true		165378	1					
ANR	165548	WhileStatement	while ( found )		165378	15					
ANR	165549	Condition	found	289:8:6558:6562	165378	0	True				
ANR	165550	Identifier	found		165378	0					
ANR	165551	CompoundStatement		30:16:704:704	165378	1					
ANR	165552	ExpressionStatement	color [ source ] = 1	291:2:6581:6598	165378	0	True				
ANR	165553	AssignmentExpression	color [ source ] = 1		165378	0		=			
ANR	165554	ArrayIndexing	color [ source ]		165378	0					
ANR	165555	Identifier	color		165378	0					
ANR	165556	Identifier	source		165378	1					
ANR	165557	PrimaryExpression	1		165378	1					
ANR	165558	ExpressionStatement	found = false	293:2:6633:6646	165378	1	True				
ANR	165559	AssignmentExpression	found = false		165378	0		=			
ANR	165560	Identifier	found		165378	0					
ANR	165561	Identifier	false		165378	1					
ANR	165562	ForStatement	for ( i = 0 ; i < g . getNumArcs ( source ) ; i ++ )		165378	2					
ANR	165563	ForInit	i = 0 ;	295:7:6692:6695	165378	0	True				
ANR	165564	AssignmentExpression	i = 0		165378	0		=			
ANR	165565	Identifier	i		165378	0					
ANR	165566	PrimaryExpression	0		165378	1					
ANR	165567	Condition	i < g . getNumArcs ( source )	295:12:6697:6718	165378	1	True				
ANR	165568	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	165569	Identifier	i		165378	0					
ANR	165570	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	165571	Callee	g . getNumArcs		165378	0					
ANR	165572	MemberAccess	g . getNumArcs		165378	0					
ANR	165573	Identifier	g		165378	0					
ANR	165574	Identifier	getNumArcs		165378	1					
ANR	165575	ArgumentList	source		165378	1					
ANR	165576	Argument	source		165378	0					
ANR	165577	Identifier	source		165378	0					
ANR	165578	PostIncDecOperationExpression	i ++	295:36:6721:6723	165378	2	True				
ANR	165579	Identifier	i		165378	0					
ANR	165580	IncDec	++		165378	1					
ANR	165581	CompoundStatement		36:42:865:865	165378	3					
ANR	165582	ExpressionStatement	"child = g . getArc ( source , i )"	296:12:6741:6767	165378	0	True				
ANR	165583	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	165584	Identifier	child		165378	0					
ANR	165585	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	165586	Callee	g . getArc		165378	0					
ANR	165587	MemberAccess	g . getArc		165378	0					
ANR	165588	Identifier	g		165378	0					
ANR	165589	Identifier	getArc		165378	1					
ANR	165590	ArgumentList	source		165378	1					
ANR	165591	Argument	source		165378	0					
ANR	165592	Identifier	source		165378	0					
ANR	165593	Argument	i		165378	1					
ANR	165594	Identifier	i		165378	0					
ANR	165595	ForStatement	for ( j = 0 ; j < gRev . getNumArcs ( child ) ; j ++ )		165378	1					
ANR	165596	ForInit	j = 0 ;	298:8:6817:6820	165378	0	True				
ANR	165597	AssignmentExpression	j = 0		165378	0		=			
ANR	165598	Identifier	j		165378	0					
ANR	165599	PrimaryExpression	0		165378	1					
ANR	165600	Condition	j < gRev . getNumArcs ( child )	298:13:6822:6845	165378	1	True				
ANR	165601	RelationalExpression	j < gRev . getNumArcs ( child )		165378	0		<			
ANR	165602	Identifier	j		165378	0					
ANR	165603	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	165604	Callee	gRev . getNumArcs		165378	0					
ANR	165605	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165606	Identifier	gRev		165378	0					
ANR	165607	Identifier	getNumArcs		165378	1					
ANR	165608	ArgumentList	child		165378	1					
ANR	165609	Argument	child		165378	0					
ANR	165610	Identifier	child		165378	0					
ANR	165611	PostIncDecOperationExpression	j ++	298:39:6848:6850	165378	2	True				
ANR	165612	Identifier	j		165378	0					
ANR	165613	IncDec	++		165378	1					
ANR	165614	CompoundStatement		39:45:992:992	165378	3					
ANR	165615	ExpressionStatement	"parent = gRev . getArc ( child , j )"	299:4:6860:6889	165378	0	True				
ANR	165616	AssignmentExpression	"parent = gRev . getArc ( child , j )"		165378	0		=			
ANR	165617	Identifier	parent		165378	0					
ANR	165618	CallExpression	"gRev . getArc ( child , j )"		165378	1					
ANR	165619	Callee	gRev . getArc		165378	0					
ANR	165620	MemberAccess	gRev . getArc		165378	0					
ANR	165621	Identifier	gRev		165378	0					
ANR	165622	Identifier	getArc		165378	1					
ANR	165623	ArgumentList	child		165378	1					
ANR	165624	Argument	child		165378	0					
ANR	165625	Identifier	child		165378	0					
ANR	165626	Argument	j		165378	1					
ANR	165627	Identifier	j		165378	0					
ANR	165628	IfStatement	if ( 0 == color [ parent ] )		165378	1					
ANR	165629	Condition	0 == color [ parent ]	301:8:6947:6962	165378	0	True				
ANR	165630	EqualityExpression	0 == color [ parent ]		165378	0		==			
ANR	165631	PrimaryExpression	0		165378	0					
ANR	165632	ArrayIndexing	color [ parent ]		165378	1					
ANR	165633	Identifier	color		165378	0					
ANR	165634	Identifier	parent		165378	1					
ANR	165635	CompoundStatement		42:27:1104:1104	165378	1					
ANR	165636	ExpressionStatement	found = true	302:5:6973:6985	165378	0	True				
ANR	165637	AssignmentExpression	found = true		165378	0		=			
ANR	165638	Identifier	found		165378	0					
ANR	165639	Identifier	true		165378	1					
ANR	165640	ExpressionStatement	sibling = parent	303:5:6992:7008	165378	1	True				
ANR	165641	AssignmentExpression	sibling = parent		165378	0		=			
ANR	165642	Identifier	sibling		165378	0					
ANR	165643	Identifier	parent		165378	1					
ANR	165644	ExpressionStatement		304:5:7015:7015	165378	2	True				
ANR	165645	ExpressionStatement		305:4:7021:7021	165378	2	True				
ANR	165646	ExpressionStatement		306:3:7026:7026	165378	3	True				
ANR	165647	IfStatement	if ( found )		165378	4					
ANR	165648	Condition	found	308:5:7034:7038	165378	0	True				
ANR	165649	Identifier	found		165378	0					
ANR	165650	ExpressionStatement	source = sibling	309:3:7044:7060	165378	1	True				
ANR	165651	AssignmentExpression	source = sibling		165378	0		=			
ANR	165652	Identifier	source		165378	0					
ANR	165653	Identifier	sibling		165378	1					
ANR	165654	ExpressionStatement		310:2:7064:7064	165378	16	True				
ANR	165655	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		165378	17					
ANR	165656	ForInit	i = 0 ;	322:6:7516:7519	165378	0	True				
ANR	165657	AssignmentExpression	i = 0		165378	0		=			
ANR	165658	Identifier	i		165378	0					
ANR	165659	PrimaryExpression	0		165378	1					
ANR	165660	Condition	i < g . getNumNodes ( )	322:11:7521:7537	165378	1	True				
ANR	165661	RelationalExpression	i < g . getNumNodes ( )		165378	0		<			
ANR	165662	Identifier	i		165378	0					
ANR	165663	CallExpression	g . getNumNodes ( )		165378	1					
ANR	165664	Callee	g . getNumNodes		165378	0					
ANR	165665	MemberAccess	g . getNumNodes		165378	0					
ANR	165666	Identifier	g		165378	0					
ANR	165667	Identifier	getNumNodes		165378	1					
ANR	165668	ArgumentList			165378	1					
ANR	165669	PostIncDecOperationExpression	i ++	322:30:7540:7542	165378	2	True				
ANR	165670	Identifier	i		165378	0					
ANR	165671	IncDec	++		165378	1					
ANR	165672	CompoundStatement		63:36:1684:1684	165378	3					
ANR	165673	ExpressionStatement	color [ i ] = 0	323:2:7550:7562	165378	0	True				
ANR	165674	AssignmentExpression	color [ i ] = 0		165378	0		=			
ANR	165675	ArrayIndexing	color [ i ]		165378	0					
ANR	165676	Identifier	color		165378	0					
ANR	165677	Identifier	i		165378	1					
ANR	165678	PrimaryExpression	0		165378	1					
ANR	165679	ExpressionStatement	yield [ i ] = - 1	324:2:7566:7579	165378	1	True				
ANR	165680	AssignmentExpression	yield [ i ] = - 1		165378	0		=			
ANR	165681	ArrayIndexing	yield [ i ]		165378	0					
ANR	165682	Identifier	yield		165378	0					
ANR	165683	Identifier	i		165378	1					
ANR	165684	UnaryOperationExpression	- 1		165378	1					
ANR	165685	UnaryOperator	-		165378	0					
ANR	165686	PrimaryExpression	1		165378	1					
ANR	165687	ExpressionStatement		325:2:7583:7583	165378	18	True				
ANR	165688	ExpressionStatement	idx = 0	327:1:7587:7592	165378	19	True				
ANR	165689	AssignmentExpression	idx = 0		165378	0		=			
ANR	165690	Identifier	idx		165378	0					
ANR	165691	PrimaryExpression	0		165378	1					
ANR	165692	WhileStatement	while ( true )		165378	20					
ANR	165693	Condition	true	328:7:7601:7604	165378	0	True				
ANR	165694	Identifier	true		165378	0					
ANR	165695	CompoundStatement		69:13:1745:1745	165378	1					
ANR	165696	IfStatement	if ( 0 != gRev . getNumArcs ( source ) )		165378	0					
ANR	165697	Condition	0 != gRev . getNumArcs ( source )	331:6:7645:7672	165378	0	True				
ANR	165698	EqualityExpression	0 != gRev . getNumArcs ( source )		165378	0		!=			
ANR	165699	PrimaryExpression	0		165378	0					
ANR	165700	CallExpression	gRev . getNumArcs ( source )		165378	1					
ANR	165701	Callee	gRev . getNumArcs		165378	0					
ANR	165702	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165703	Identifier	gRev		165378	0					
ANR	165704	Identifier	getNumArcs		165378	1					
ANR	165705	ArgumentList	source		165378	1					
ANR	165706	Argument	source		165378	0					
ANR	165707	Identifier	source		165378	0					
ANR	165708	GotoStatement	goto retnull ;	332:3:7679:7691	165378	1	True				
ANR	165709	Identifier	retnull		165378	0					
ANR	165710	ExpressionStatement	color [ source ] = 1	335:2:7707:7724	165378	1	True				
ANR	165711	AssignmentExpression	color [ source ] = 1		165378	0		=			
ANR	165712	ArrayIndexing	color [ source ]		165378	0					
ANR	165713	Identifier	color		165378	0					
ANR	165714	Identifier	source		165378	1					
ANR	165715	PrimaryExpression	1		165378	1					
ANR	165716	ExpressionStatement	seq [ idx ] = source	338:2:7815:7832	165378	2	True				
ANR	165717	AssignmentExpression	seq [ idx ] = source		165378	0		=			
ANR	165718	ArrayIndexing	seq [ idx ]		165378	0					
ANR	165719	Identifier	seq		165378	0					
ANR	165720	Identifier	idx		165378	1					
ANR	165721	Identifier	source		165378	1					
ANR	165722	ExpressionStatement	idx ++	339:2:7836:7841	165378	3	True				
ANR	165723	PostIncDecOperationExpression	idx ++		165378	0					
ANR	165724	Identifier	idx		165378	0					
ANR	165725	IncDec	++		165378	1					
ANR	165726	ForStatement	for ( i = 0 ; i < g . getNumArcs ( source ) ; i ++ )		165378	4					
ANR	165727	ForInit	i = 0 ;	342:7:7887:7890	165378	0	True				
ANR	165728	AssignmentExpression	i = 0		165378	0		=			
ANR	165729	Identifier	i		165378	0					
ANR	165730	PrimaryExpression	0		165378	1					
ANR	165731	Condition	i < g . getNumArcs ( source )	342:12:7892:7913	165378	1	True				
ANR	165732	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	165733	Identifier	i		165378	0					
ANR	165734	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	165735	Callee	g . getNumArcs		165378	0					
ANR	165736	MemberAccess	g . getNumArcs		165378	0					
ANR	165737	Identifier	g		165378	0					
ANR	165738	Identifier	getNumArcs		165378	1					
ANR	165739	ArgumentList	source		165378	1					
ANR	165740	Argument	source		165378	0					
ANR	165741	Identifier	source		165378	0					
ANR	165742	PostIncDecOperationExpression	i ++	342:36:7916:7918	165378	2	True				
ANR	165743	Identifier	i		165378	0					
ANR	165744	IncDec	++		165378	1					
ANR	165745	CompoundStatement		83:42:2060:2060	165378	3					
ANR	165746	ExpressionStatement	"child = g . getArc ( source , i )"	343:3:7927:7953	165378	0	True				
ANR	165747	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	165748	Identifier	child		165378	0					
ANR	165749	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	165750	Callee	g . getArc		165378	0					
ANR	165751	MemberAccess	g . getArc		165378	0					
ANR	165752	Identifier	g		165378	0					
ANR	165753	Identifier	getArc		165378	1					
ANR	165754	ArgumentList	source		165378	1					
ANR	165755	Argument	source		165378	0					
ANR	165756	Identifier	source		165378	0					
ANR	165757	Argument	i		165378	1					
ANR	165758	Identifier	i		165378	0					
ANR	165759	IfStatement	if ( 0 != g . getNumArcs ( child ) )		165378	1					
ANR	165760	Condition	0 != g . getNumArcs ( child )	344:7:7962:7985	165378	0	True				
ANR	165761	EqualityExpression	0 != g . getNumArcs ( child )		165378	0		!=			
ANR	165762	PrimaryExpression	0		165378	0					
ANR	165763	CallExpression	g . getNumArcs ( child )		165378	1					
ANR	165764	Callee	g . getNumArcs		165378	0					
ANR	165765	MemberAccess	g . getNumArcs		165378	0					
ANR	165766	Identifier	g		165378	0					
ANR	165767	Identifier	getNumArcs		165378	1					
ANR	165768	ArgumentList	child		165378	1					
ANR	165769	Argument	child		165378	0					
ANR	165770	Identifier	child		165378	0					
ANR	165771	GotoStatement	goto retnull ;	345:4:7993:8005	165378	1	True				
ANR	165772	Identifier	retnull		165378	0					
ANR	165773	ExpressionStatement	color [ child ] = 2	346:3:8010:8026	165378	2	True				
ANR	165774	AssignmentExpression	color [ child ] = 2		165378	0		=			
ANR	165775	ArrayIndexing	color [ child ]		165378	0					
ANR	165776	Identifier	color		165378	0					
ANR	165777	Identifier	child		165378	1					
ANR	165778	PrimaryExpression	2		165378	1					
ANR	165779	ExpressionStatement		347:3:8052:8052	165378	5	True				
ANR	165780	ExpressionStatement	yield [ source ] = 0	350:2:8135:8152	165378	6	True				
ANR	165781	AssignmentExpression	yield [ source ] = 0		165378	0		=			
ANR	165782	ArrayIndexing	yield [ source ]		165378	0					
ANR	165783	Identifier	yield		165378	0					
ANR	165784	Identifier	source		165378	1					
ANR	165785	PrimaryExpression	0		165378	1					
ANR	165786	ForStatement	for ( i = 0 ; i < g . getNumArcs ( source ) ; i ++ )		165378	7					
ANR	165787	ForInit	i = 0 ;	351:7:8161:8164	165378	0	True				
ANR	165788	AssignmentExpression	i = 0		165378	0		=			
ANR	165789	Identifier	i		165378	0					
ANR	165790	PrimaryExpression	0		165378	1					
ANR	165791	Condition	i < g . getNumArcs ( source )	351:12:8166:8187	165378	1	True				
ANR	165792	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	165793	Identifier	i		165378	0					
ANR	165794	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	165795	Callee	g . getNumArcs		165378	0					
ANR	165796	MemberAccess	g . getNumArcs		165378	0					
ANR	165797	Identifier	g		165378	0					
ANR	165798	Identifier	getNumArcs		165378	1					
ANR	165799	ArgumentList	source		165378	1					
ANR	165800	Argument	source		165378	0					
ANR	165801	Identifier	source		165378	0					
ANR	165802	PostIncDecOperationExpression	i ++	351:36:8190:8192	165378	2	True				
ANR	165803	Identifier	i		165378	0					
ANR	165804	IncDec	++		165378	1					
ANR	165805	CompoundStatement		92:42:2334:2334	165378	3					
ANR	165806	ExpressionStatement	"child = g . getArc ( source , i )"	352:3:8201:8227	165378	0	True				
ANR	165807	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	165808	Identifier	child		165378	0					
ANR	165809	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	165810	Callee	g . getArc		165378	0					
ANR	165811	MemberAccess	g . getArc		165378	0					
ANR	165812	Identifier	g		165378	0					
ANR	165813	Identifier	getArc		165378	1					
ANR	165814	ArgumentList	source		165378	1					
ANR	165815	Argument	source		165378	0					
ANR	165816	Identifier	source		165378	0					
ANR	165817	Argument	i		165378	1					
ANR	165818	Identifier	i		165378	0					
ANR	165819	IfStatement	if ( 1 == gRev . getNumArcs ( child ) )		165378	1					
ANR	165820	Condition	1 == gRev . getNumArcs ( child )	353:7:8236:8262	165378	0	True				
ANR	165821	EqualityExpression	1 == gRev . getNumArcs ( child )		165378	0		==			
ANR	165822	PrimaryExpression	1		165378	0					
ANR	165823	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	165824	Callee	gRev . getNumArcs		165378	0					
ANR	165825	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165826	Identifier	gRev		165378	0					
ANR	165827	Identifier	getNumArcs		165378	1					
ANR	165828	ArgumentList	child		165378	1					
ANR	165829	Argument	child		165378	0					
ANR	165830	Identifier	child		165378	0					
ANR	165831	ExpressionStatement	yield [ source ] ++	354:4:8270:8286	165378	1	True				
ANR	165832	PostIncDecOperationExpression	yield [ source ] ++		165378	0					
ANR	165833	ArrayIndexing	yield [ source ]		165378	0					
ANR	165834	Identifier	yield		165378	0					
ANR	165835	Identifier	source		165378	1					
ANR	165836	IncDec	++		165378	1					
ANR	165837	ExpressionStatement		355:3:8291:8291	165378	8	True				
ANR	165838	IfStatement	if ( yield [ source ] < g . getNumArcs ( source ) - 2 )		165378	9					
ANR	165839	Condition	yield [ source ] < g . getNumArcs ( source ) - 2	358:6:8363:8400	165378	0	True				
ANR	165840	RelationalExpression	yield [ source ] < g . getNumArcs ( source ) - 2		165378	0		<			
ANR	165841	ArrayIndexing	yield [ source ]		165378	0					
ANR	165842	Identifier	yield		165378	0					
ANR	165843	Identifier	source		165378	1					
ANR	165844	AdditiveExpression	g . getNumArcs ( source ) - 2		165378	1		-			
ANR	165845	CallExpression	g . getNumArcs ( source )		165378	0					
ANR	165846	Callee	g . getNumArcs		165378	0					
ANR	165847	MemberAccess	g . getNumArcs		165378	0					
ANR	165848	Identifier	g		165378	0					
ANR	165849	Identifier	getNumArcs		165378	1					
ANR	165850	ArgumentList	source		165378	1					
ANR	165851	Argument	source		165378	0					
ANR	165852	Identifier	source		165378	0					
ANR	165853	PrimaryExpression	2		165378	1					
ANR	165854	GotoStatement	goto retnull ;	359:3:8407:8419	165378	1	True				
ANR	165855	Identifier	retnull		165378	0					
ANR	165856	IfStatement	if ( yield [ source ] == g . getNumArcs ( source ) )		165378	10					
ANR	165857	Condition	yield [ source ] == g . getNumArcs ( source )	362:6:8470:8506	165378	0	True				
ANR	165858	EqualityExpression	yield [ source ] == g . getNumArcs ( source )		165378	0		==			
ANR	165859	ArrayIndexing	yield [ source ]		165378	0					
ANR	165860	Identifier	yield		165378	0					
ANR	165861	Identifier	source		165378	1					
ANR	165862	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	165863	Callee	g . getNumArcs		165378	0					
ANR	165864	MemberAccess	g . getNumArcs		165378	0					
ANR	165865	Identifier	g		165378	0					
ANR	165866	Identifier	getNumArcs		165378	1					
ANR	165867	ArgumentList	source		165378	1					
ANR	165868	Argument	source		165378	0					
ANR	165869	Identifier	source		165378	0					
ANR	165870	BreakStatement	break ;	363:3:8513:8518	165378	1	True				
ANR	165871	IfStatement	if ( yield [ source ] == g . getNumArcs ( source ) - 1 )		165378	11					
ANR	165872	Condition	yield [ source ] == g . getNumArcs ( source ) - 1	368:6:8694:8734	165378	0	True				
ANR	165873	EqualityExpression	yield [ source ] == g . getNumArcs ( source ) - 1		165378	0		==			
ANR	165874	ArrayIndexing	yield [ source ]		165378	0					
ANR	165875	Identifier	yield		165378	0					
ANR	165876	Identifier	source		165378	1					
ANR	165877	AdditiveExpression	g . getNumArcs ( source ) - 1		165378	1		-			
ANR	165878	CallExpression	g . getNumArcs ( source )		165378	0					
ANR	165879	Callee	g . getNumArcs		165378	0					
ANR	165880	MemberAccess	g . getNumArcs		165378	0					
ANR	165881	Identifier	g		165378	0					
ANR	165882	Identifier	getNumArcs		165378	1					
ANR	165883	ArgumentList	source		165378	1					
ANR	165884	Argument	source		165378	0					
ANR	165885	Identifier	source		165378	0					
ANR	165886	PrimaryExpression	1		165378	1					
ANR	165887	CompoundStatement		109:50:2876:2876	165378	1					
ANR	165888	ForStatement	for ( i = 0 ; i < g . getNumArcs ( source ) ; i ++ )		165378	0					
ANR	165889	ForInit	i = 0 ;	371:8:8770:8773	165378	0	True				
ANR	165890	AssignmentExpression	i = 0		165378	0		=			
ANR	165891	Identifier	i		165378	0					
ANR	165892	PrimaryExpression	0		165378	1					
ANR	165893	Condition	i < g . getNumArcs ( source )	371:13:8775:8796	165378	1	True				
ANR	165894	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	165895	Identifier	i		165378	0					
ANR	165896	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	165897	Callee	g . getNumArcs		165378	0					
ANR	165898	MemberAccess	g . getNumArcs		165378	0					
ANR	165899	Identifier	g		165378	0					
ANR	165900	Identifier	getNumArcs		165378	1					
ANR	165901	ArgumentList	source		165378	1					
ANR	165902	Argument	source		165378	0					
ANR	165903	Identifier	source		165378	0					
ANR	165904	PostIncDecOperationExpression	i ++	371:37:8799:8801	165378	2	True				
ANR	165905	Identifier	i		165378	0					
ANR	165906	IncDec	++		165378	1					
ANR	165907	CompoundStatement		112:43:2943:2943	165378	3					
ANR	165908	ExpressionStatement	"child = g . getArc ( source , i )"	372:4:8811:8837	165378	0	True				
ANR	165909	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	165910	Identifier	child		165378	0					
ANR	165911	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	165912	Callee	g . getArc		165378	0					
ANR	165913	MemberAccess	g . getArc		165378	0					
ANR	165914	Identifier	g		165378	0					
ANR	165915	Identifier	getArc		165378	1					
ANR	165916	ArgumentList	source		165378	1					
ANR	165917	Argument	source		165378	0					
ANR	165918	Identifier	source		165378	0					
ANR	165919	Argument	i		165378	1					
ANR	165920	Identifier	i		165378	0					
ANR	165921	IfStatement	if ( 1 != gRev . getNumArcs ( child ) )		165378	1					
ANR	165922	Condition	1 != gRev . getNumArcs ( child )	373:8:8847:8873	165378	0	True				
ANR	165923	EqualityExpression	1 != gRev . getNumArcs ( child )		165378	0		!=			
ANR	165924	PrimaryExpression	1		165378	0					
ANR	165925	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	165926	Callee	gRev . getNumArcs		165378	0					
ANR	165927	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165928	Identifier	gRev		165378	0					
ANR	165929	Identifier	getNumArcs		165378	1					
ANR	165930	ArgumentList	child		165378	1					
ANR	165931	Argument	child		165378	0					
ANR	165932	Identifier	child		165378	0					
ANR	165933	BreakStatement	break ;	374:5:8882:8887	165378	1	True				
ANR	165934	ExpressionStatement		375:4:8893:8893	165378	1	True				
ANR	165935	IfStatement	if ( 2 != gRev . getNumArcs ( child ) )		165378	2					
ANR	165936	Condition	2 != gRev . getNumArcs ( child )	377:7:8943:8969	165378	0	True				
ANR	165937	EqualityExpression	2 != gRev . getNumArcs ( child )		165378	0		!=			
ANR	165938	PrimaryExpression	2		165378	0					
ANR	165939	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	165940	Callee	gRev . getNumArcs		165378	0					
ANR	165941	MemberAccess	gRev . getNumArcs		165378	0					
ANR	165942	Identifier	gRev		165378	0					
ANR	165943	Identifier	getNumArcs		165378	1					
ANR	165944	ArgumentList	child		165378	1					
ANR	165945	Argument	child		165378	0					
ANR	165946	Identifier	child		165378	0					
ANR	165947	GotoStatement	goto retnull ;	378:4:8977:8989	165378	1	True				
ANR	165948	Identifier	retnull		165378	0					
ANR	165949	IfStatement	"if ( gRev . getArc ( child , 0 ) == source )"		165378	3					
ANR	165950	Condition	"gRev . getArc ( child , 0 ) == source"	380:7:9049:9078	165378	0	True				
ANR	165951	EqualityExpression	"gRev . getArc ( child , 0 ) == source"		165378	0		==			
ANR	165952	CallExpression	"gRev . getArc ( child , 0 )"		165378	0					
ANR	165953	Callee	gRev . getArc		165378	0					
ANR	165954	MemberAccess	gRev . getArc		165378	0					
ANR	165955	Identifier	gRev		165378	0					
ANR	165956	Identifier	getArc		165378	1					
ANR	165957	ArgumentList	child		165378	1					
ANR	165958	Argument	child		165378	0					
ANR	165959	Identifier	child		165378	0					
ANR	165960	Argument	0		165378	1					
ANR	165961	PrimaryExpression	0		165378	0					
ANR	165962	Identifier	source		165378	1					
ANR	165963	ExpressionStatement	"otherParent = gRev . getArc ( child , 1 )"	381:4:9086:9120	165378	1	True				
ANR	165964	AssignmentExpression	"otherParent = gRev . getArc ( child , 1 )"		165378	0		=			
ANR	165965	Identifier	otherParent		165378	0					
ANR	165966	CallExpression	"gRev . getArc ( child , 1 )"		165378	1					
ANR	165967	Callee	gRev . getArc		165378	0					
ANR	165968	MemberAccess	gRev . getArc		165378	0					
ANR	165969	Identifier	gRev		165378	0					
ANR	165970	Identifier	getArc		165378	1					
ANR	165971	ArgumentList	child		165378	1					
ANR	165972	Argument	child		165378	0					
ANR	165973	Identifier	child		165378	0					
ANR	165974	Argument	1		165378	1					
ANR	165975	PrimaryExpression	1		165378	0					
ANR	165976	ElseStatement	else		165378	0					
ANR	165977	ExpressionStatement	"otherParent = gRev . getArc ( child , 0 )"	383:4:9134:9168	165378	0	True				
ANR	165978	AssignmentExpression	"otherParent = gRev . getArc ( child , 0 )"		165378	0		=			
ANR	165979	Identifier	otherParent		165378	0					
ANR	165980	CallExpression	"gRev . getArc ( child , 0 )"		165378	1					
ANR	165981	Callee	gRev . getArc		165378	0					
ANR	165982	MemberAccess	gRev . getArc		165378	0					
ANR	165983	Identifier	gRev		165378	0					
ANR	165984	Identifier	getArc		165378	1					
ANR	165985	ArgumentList	child		165378	1					
ANR	165986	Argument	child		165378	0					
ANR	165987	Identifier	child		165378	0					
ANR	165988	Argument	0		165378	1					
ANR	165989	PrimaryExpression	0		165378	0					
ANR	165990	IfStatement	if ( 0 != color [ otherParent ] )		165378	4					
ANR	165991	Condition	0 != color [ otherParent ]	385:7:9196:9218	165378	0	True				
ANR	165992	EqualityExpression	0 != color [ otherParent ]		165378	0		!=			
ANR	165993	PrimaryExpression	0		165378	0					
ANR	165994	ArrayIndexing	color [ otherParent ]		165378	1					
ANR	165995	Identifier	color		165378	0					
ANR	165996	Identifier	otherParent		165378	1					
ANR	165997	BreakStatement	break ;	386:4:9226:9231	165378	1	True				
ANR	165998	ElseStatement	else		165378	0					
ANR	165999	CompoundStatement		128:8:3379:3379	165378	0					
ANR	166000	ExpressionStatement	source = otherParent	388:4:9247:9267	165378	0	True				
ANR	166001	AssignmentExpression	source = otherParent		165378	0		=			
ANR	166002	Identifier	source		165378	0					
ANR	166003	Identifier	otherParent		165378	1					
ANR	166004	ContinueStatement	continue ;	389:4:9273:9281	165378	1	True				
ANR	166005	ExpressionStatement		390:4:9287:9287	165378	5	True				
ANR	166006	ExpressionStatement		391:3:9292:9292	165378	12	True				
ANR	166007	IfStatement	if ( yield [ source ] == g . getNumArcs ( source ) - 2 )		165378	13					
ANR	166008	Condition	yield [ source ] == g . getNumArcs ( source ) - 2	396:6:9461:9501	165378	0	True				
ANR	166009	EqualityExpression	yield [ source ] == g . getNumArcs ( source ) - 2		165378	0		==			
ANR	166010	ArrayIndexing	yield [ source ]		165378	0					
ANR	166011	Identifier	yield		165378	0					
ANR	166012	Identifier	source		165378	1					
ANR	166013	AdditiveExpression	g . getNumArcs ( source ) - 2		165378	1		-			
ANR	166014	CallExpression	g . getNumArcs ( source )		165378	0					
ANR	166015	Callee	g . getNumArcs		165378	0					
ANR	166016	MemberAccess	g . getNumArcs		165378	0					
ANR	166017	Identifier	g		165378	0					
ANR	166018	Identifier	getNumArcs		165378	1					
ANR	166019	ArgumentList	source		165378	1					
ANR	166020	Argument	source		165378	0					
ANR	166021	Identifier	source		165378	0					
ANR	166022	PrimaryExpression	2		165378	1					
ANR	166023	CompoundStatement		155:3:4201:4231	165378	1					
ANR	166024	ForStatement	for ( i = 0 ; i < g . getNumArcs ( source ) ; i ++ )		165378	0					
ANR	166025	ForInit	i = 0 ;	398:8:9543:9546	165378	0	True				
ANR	166026	AssignmentExpression	i = 0		165378	0		=			
ANR	166027	Identifier	i		165378	0					
ANR	166028	PrimaryExpression	0		165378	1					
ANR	166029	Condition	i < g . getNumArcs ( source )	398:13:9548:9569	165378	1	True				
ANR	166030	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	166031	Identifier	i		165378	0					
ANR	166032	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	166033	Callee	g . getNumArcs		165378	0					
ANR	166034	MemberAccess	g . getNumArcs		165378	0					
ANR	166035	Identifier	g		165378	0					
ANR	166036	Identifier	getNumArcs		165378	1					
ANR	166037	ArgumentList	source		165378	1					
ANR	166038	Argument	source		165378	0					
ANR	166039	Identifier	source		165378	0					
ANR	166040	PostIncDecOperationExpression	i ++	398:37:9572:9574	165378	2	True				
ANR	166041	Identifier	i		165378	0					
ANR	166042	IncDec	++		165378	1					
ANR	166043	CompoundStatement		139:43:3716:3716	165378	3					
ANR	166044	ExpressionStatement	"child = g . getArc ( source , i )"	399:4:9584:9610	165378	0	True				
ANR	166045	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	166046	Identifier	child		165378	0					
ANR	166047	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	166048	Callee	g . getArc		165378	0					
ANR	166049	MemberAccess	g . getArc		165378	0					
ANR	166050	Identifier	g		165378	0					
ANR	166051	Identifier	getArc		165378	1					
ANR	166052	ArgumentList	source		165378	1					
ANR	166053	Argument	source		165378	0					
ANR	166054	Identifier	source		165378	0					
ANR	166055	Argument	i		165378	1					
ANR	166056	Identifier	i		165378	0					
ANR	166057	IfStatement	if ( 1 != gRev . getNumArcs ( child ) )		165378	1					
ANR	166058	Condition	1 != gRev . getNumArcs ( child )	400:8:9620:9646	165378	0	True				
ANR	166059	EqualityExpression	1 != gRev . getNumArcs ( child )		165378	0		!=			
ANR	166060	PrimaryExpression	1		165378	0					
ANR	166061	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	166062	Callee	gRev . getNumArcs		165378	0					
ANR	166063	MemberAccess	gRev . getNumArcs		165378	0					
ANR	166064	Identifier	gRev		165378	0					
ANR	166065	Identifier	getNumArcs		165378	1					
ANR	166066	ArgumentList	child		165378	1					
ANR	166067	Argument	child		165378	0					
ANR	166068	Identifier	child		165378	0					
ANR	166069	BreakStatement	break ;	401:5:9655:9660	165378	1	True				
ANR	166070	ExpressionStatement		402:4:9666:9666	165378	1	True				
ANR	166071	IdentifierDeclStatement	int child1 = child ;	403:3:9671:9687	165378	2	True				
ANR	166072	IdentifierDecl	child1 = child		165378	0					
ANR	166073	IdentifierDeclType	int		165378	0					
ANR	166074	Identifier	child1		165378	1					
ANR	166075	AssignmentExpression	child1 = child		165378	2		=			
ANR	166076	Identifier	child		165378	0					
ANR	166077	Identifier	child		165378	1					
ANR	166078	ForStatement	for ( i ++ ; i < g . getNumArcs ( source ) ; i ++ )		165378	3					
ANR	166079	ForInit	i ++ ;	404:8:9697:9700	165378	0	True				
ANR	166080	PostIncDecOperationExpression	i ++		165378	0					
ANR	166081	Identifier	i		165378	0					
ANR	166082	IncDec	++		165378	1					
ANR	166083	Condition	i < g . getNumArcs ( source )	404:13:9702:9723	165378	1	True				
ANR	166084	RelationalExpression	i < g . getNumArcs ( source )		165378	0		<			
ANR	166085	Identifier	i		165378	0					
ANR	166086	CallExpression	g . getNumArcs ( source )		165378	1					
ANR	166087	Callee	g . getNumArcs		165378	0					
ANR	166088	MemberAccess	g . getNumArcs		165378	0					
ANR	166089	Identifier	g		165378	0					
ANR	166090	Identifier	getNumArcs		165378	1					
ANR	166091	ArgumentList	source		165378	1					
ANR	166092	Argument	source		165378	0					
ANR	166093	Identifier	source		165378	0					
ANR	166094	PostIncDecOperationExpression	i ++	404:37:9726:9728	165378	2	True				
ANR	166095	Identifier	i		165378	0					
ANR	166096	IncDec	++		165378	1					
ANR	166097	CompoundStatement		145:43:3870:3870	165378	3					
ANR	166098	ExpressionStatement	"child = g . getArc ( source , i )"	405:4:9738:9764	165378	0	True				
ANR	166099	AssignmentExpression	"child = g . getArc ( source , i )"		165378	0		=			
ANR	166100	Identifier	child		165378	0					
ANR	166101	CallExpression	"g . getArc ( source , i )"		165378	1					
ANR	166102	Callee	g . getArc		165378	0					
ANR	166103	MemberAccess	g . getArc		165378	0					
ANR	166104	Identifier	g		165378	0					
ANR	166105	Identifier	getArc		165378	1					
ANR	166106	ArgumentList	source		165378	1					
ANR	166107	Argument	source		165378	0					
ANR	166108	Identifier	source		165378	0					
ANR	166109	Argument	i		165378	1					
ANR	166110	Identifier	i		165378	0					
ANR	166111	IfStatement	if ( 1 != gRev . getNumArcs ( child ) )		165378	1					
ANR	166112	Condition	1 != gRev . getNumArcs ( child )	406:8:9774:9800	165378	0	True				
ANR	166113	EqualityExpression	1 != gRev . getNumArcs ( child )		165378	0		!=			
ANR	166114	PrimaryExpression	1		165378	0					
ANR	166115	CallExpression	gRev . getNumArcs ( child )		165378	1					
ANR	166116	Callee	gRev . getNumArcs		165378	0					
ANR	166117	MemberAccess	gRev . getNumArcs		165378	0					
ANR	166118	Identifier	gRev		165378	0					
ANR	166119	Identifier	getNumArcs		165378	1					
ANR	166120	ArgumentList	child		165378	1					
ANR	166121	Argument	child		165378	0					
ANR	166122	Identifier	child		165378	0					
ANR	166123	BreakStatement	break ;	407:5:9809:9814	165378	1	True				
ANR	166124	ExpressionStatement		408:4:9820:9820	165378	4	True				
ANR	166125	IdentifierDeclStatement	int child2 = child ;	409:3:9825:9841	165378	5	True				
ANR	166126	IdentifierDecl	child2 = child		165378	0					
ANR	166127	IdentifierDeclType	int		165378	0					
ANR	166128	Identifier	child2		165378	1					
ANR	166129	AssignmentExpression	child2 = child		165378	2		=			
ANR	166130	Identifier	child		165378	0					
ANR	166131	Identifier	child		165378	1					
ANR	166132	IfStatement	if ( 2 != gRev . getNumArcs ( child1 ) || 2 != gRev . getNumArcs ( child2 ) )		165378	6					
ANR	166133	Condition	2 != gRev . getNumArcs ( child1 ) || 2 != gRev . getNumArcs ( child2 )	411:7:9899:9958	165378	0	True				
ANR	166134	OrExpression	2 != gRev . getNumArcs ( child1 ) || 2 != gRev . getNumArcs ( child2 )		165378	0		||			
ANR	166135	EqualityExpression	2 != gRev . getNumArcs ( child1 )		165378	0		!=			
ANR	166136	PrimaryExpression	2		165378	0					
ANR	166137	CallExpression	gRev . getNumArcs ( child1 )		165378	1					
ANR	166138	Callee	gRev . getNumArcs		165378	0					
ANR	166139	MemberAccess	gRev . getNumArcs		165378	0					
ANR	166140	Identifier	gRev		165378	0					
ANR	166141	Identifier	getNumArcs		165378	1					
ANR	166142	ArgumentList	child1		165378	1					
ANR	166143	Argument	child1		165378	0					
ANR	166144	Identifier	child1		165378	0					
ANR	166145	EqualityExpression	2 != gRev . getNumArcs ( child2 )		165378	1		!=			
ANR	166146	PrimaryExpression	2		165378	0					
ANR	166147	CallExpression	gRev . getNumArcs ( child2 )		165378	1					
ANR	166148	Callee	gRev . getNumArcs		165378	0					
ANR	166149	MemberAccess	gRev . getNumArcs		165378	0					
ANR	166150	Identifier	gRev		165378	0					
ANR	166151	Identifier	getNumArcs		165378	1					
ANR	166152	ArgumentList	child2		165378	1					
ANR	166153	Argument	child2		165378	0					
ANR	166154	Identifier	child2		165378	0					
ANR	166155	GotoStatement	goto retnull ;	412:4:9966:9978	165378	1	True				
ANR	166156	Identifier	retnull		165378	0					
ANR	166157	IdentifierDeclStatement	"int otherParent1 , otherParent2 ;"	414:3:10063:10093	165378	7	True				
ANR	166158	IdentifierDecl	otherParent1		165378	0					
ANR	166159	IdentifierDeclType	int		165378	0					
ANR	166160	Identifier	otherParent1		165378	1					
ANR	166161	IdentifierDecl	otherParent2		165378	1					
ANR	166162	IdentifierDeclType	int		165378	0					
ANR	166163	Identifier	otherParent2		165378	1					
ANR	166164	IfStatement	"if ( gRev . getArc ( child1 , 0 ) == source )"		165378	8					
ANR	166165	Condition	"gRev . getArc ( child1 , 0 ) == source"	415:7:10102:10132	165378	0	True				
ANR	166166	EqualityExpression	"gRev . getArc ( child1 , 0 ) == source"		165378	0		==			
ANR	166167	CallExpression	"gRev . getArc ( child1 , 0 )"		165378	0					
ANR	166168	Callee	gRev . getArc		165378	0					
ANR	166169	MemberAccess	gRev . getArc		165378	0					
ANR	166170	Identifier	gRev		165378	0					
ANR	166171	Identifier	getArc		165378	1					
ANR	166172	ArgumentList	child1		165378	1					
ANR	166173	Argument	child1		165378	0					
ANR	166174	Identifier	child1		165378	0					
ANR	166175	Argument	0		165378	1					
ANR	166176	PrimaryExpression	0		165378	0					
ANR	166177	Identifier	source		165378	1					
ANR	166178	ExpressionStatement	"otherParent1 = gRev . getArc ( child1 , 1 )"	416:4:10140:10176	165378	1	True				
ANR	166179	AssignmentExpression	"otherParent1 = gRev . getArc ( child1 , 1 )"		165378	0		=			
ANR	166180	Identifier	otherParent1		165378	0					
ANR	166181	CallExpression	"gRev . getArc ( child1 , 1 )"		165378	1					
ANR	166182	Callee	gRev . getArc		165378	0					
ANR	166183	MemberAccess	gRev . getArc		165378	0					
ANR	166184	Identifier	gRev		165378	0					
ANR	166185	Identifier	getArc		165378	1					
ANR	166186	ArgumentList	child1		165378	1					
ANR	166187	Argument	child1		165378	0					
ANR	166188	Identifier	child1		165378	0					
ANR	166189	Argument	1		165378	1					
ANR	166190	PrimaryExpression	1		165378	0					
ANR	166191	ElseStatement	else		165378	0					
ANR	166192	ExpressionStatement	"otherParent1 = gRev . getArc ( child1 , 0 )"	418:4:10190:10226	165378	0	True				
ANR	166193	AssignmentExpression	"otherParent1 = gRev . getArc ( child1 , 0 )"		165378	0		=			
ANR	166194	Identifier	otherParent1		165378	0					
ANR	166195	CallExpression	"gRev . getArc ( child1 , 0 )"		165378	1					
ANR	166196	Callee	gRev . getArc		165378	0					
ANR	166197	MemberAccess	gRev . getArc		165378	0					
ANR	166198	Identifier	gRev		165378	0					
ANR	166199	Identifier	getArc		165378	1					
ANR	166200	ArgumentList	child1		165378	1					
ANR	166201	Argument	child1		165378	0					
ANR	166202	Identifier	child1		165378	0					
ANR	166203	Argument	0		165378	1					
ANR	166204	PrimaryExpression	0		165378	0					
ANR	166205	IfStatement	"if ( gRev . getArc ( child2 , 0 ) == source )"		165378	9					
ANR	166206	Condition	"gRev . getArc ( child2 , 0 ) == source"	419:7:10235:10265	165378	0	True				
ANR	166207	EqualityExpression	"gRev . getArc ( child2 , 0 ) == source"		165378	0		==			
ANR	166208	CallExpression	"gRev . getArc ( child2 , 0 )"		165378	0					
ANR	166209	Callee	gRev . getArc		165378	0					
ANR	166210	MemberAccess	gRev . getArc		165378	0					
ANR	166211	Identifier	gRev		165378	0					
ANR	166212	Identifier	getArc		165378	1					
ANR	166213	ArgumentList	child2		165378	1					
ANR	166214	Argument	child2		165378	0					
ANR	166215	Identifier	child2		165378	0					
ANR	166216	Argument	0		165378	1					
ANR	166217	PrimaryExpression	0		165378	0					
ANR	166218	Identifier	source		165378	1					
ANR	166219	ExpressionStatement	"otherParent2 = gRev . getArc ( child2 , 1 )"	420:4:10273:10309	165378	1	True				
ANR	166220	AssignmentExpression	"otherParent2 = gRev . getArc ( child2 , 1 )"		165378	0		=			
ANR	166221	Identifier	otherParent2		165378	0					
ANR	166222	CallExpression	"gRev . getArc ( child2 , 1 )"		165378	1					
ANR	166223	Callee	gRev . getArc		165378	0					
ANR	166224	MemberAccess	gRev . getArc		165378	0					
ANR	166225	Identifier	gRev		165378	0					
ANR	166226	Identifier	getArc		165378	1					
ANR	166227	ArgumentList	child2		165378	1					
ANR	166228	Argument	child2		165378	0					
ANR	166229	Identifier	child2		165378	0					
ANR	166230	Argument	1		165378	1					
ANR	166231	PrimaryExpression	1		165378	0					
ANR	166232	ElseStatement	else		165378	0					
ANR	166233	ExpressionStatement	"otherParent2 = gRev . getArc ( child2 , 0 )"	422:4:10323:10359	165378	0	True				
ANR	166234	AssignmentExpression	"otherParent2 = gRev . getArc ( child2 , 0 )"		165378	0		=			
ANR	166235	Identifier	otherParent2		165378	0					
ANR	166236	CallExpression	"gRev . getArc ( child2 , 0 )"		165378	1					
ANR	166237	Callee	gRev . getArc		165378	0					
ANR	166238	MemberAccess	gRev . getArc		165378	0					
ANR	166239	Identifier	gRev		165378	0					
ANR	166240	Identifier	getArc		165378	1					
ANR	166241	ArgumentList	child2		165378	1					
ANR	166242	Argument	child2		165378	0					
ANR	166243	Identifier	child2		165378	0					
ANR	166244	Argument	0		165378	1					
ANR	166245	PrimaryExpression	0		165378	0					
ANR	166246	IfStatement	if ( 0 == color [ otherParent1 ] && 0 != color [ otherParent2 ] )		165378	10					
ANR	166247	Condition	0 == color [ otherParent1 ] && 0 != color [ otherParent2 ]	424:7:10387:10434	165378	0	True				
ANR	166248	AndExpression	0 == color [ otherParent1 ] && 0 != color [ otherParent2 ]		165378	0		&&			
ANR	166249	EqualityExpression	0 == color [ otherParent1 ]		165378	0		==			
ANR	166250	PrimaryExpression	0		165378	0					
ANR	166251	ArrayIndexing	color [ otherParent1 ]		165378	1					
ANR	166252	Identifier	color		165378	0					
ANR	166253	Identifier	otherParent1		165378	1					
ANR	166254	EqualityExpression	0 != color [ otherParent2 ]		165378	1		!=			
ANR	166255	PrimaryExpression	0		165378	0					
ANR	166256	ArrayIndexing	color [ otherParent2 ]		165378	1					
ANR	166257	Identifier	color		165378	0					
ANR	166258	Identifier	otherParent2		165378	1					
ANR	166259	CompoundStatement		165:58:4576:4576	165378	1					
ANR	166260	ExpressionStatement	source = otherParent1	425:4:10444:10465	165378	0	True				
ANR	166261	AssignmentExpression	source = otherParent1		165378	0		=			
ANR	166262	Identifier	source		165378	0					
ANR	166263	Identifier	otherParent1		165378	1					
ANR	166264	ContinueStatement	continue ;	426:4:10471:10479	165378	1	True				
ANR	166265	ExpressionStatement		427:4:10485:10485	165378	11	True				
ANR	166266	IfStatement	if ( 0 != color [ otherParent1 ] && 0 == color [ otherParent2 ] )		165378	12					
ANR	166267	Condition	0 != color [ otherParent1 ] && 0 == color [ otherParent2 ]	428:7:10494:10541	165378	0	True				
ANR	166268	AndExpression	0 != color [ otherParent1 ] && 0 == color [ otherParent2 ]		165378	0		&&			
ANR	166269	EqualityExpression	0 != color [ otherParent1 ]		165378	0		!=			
ANR	166270	PrimaryExpression	0		165378	0					
ANR	166271	ArrayIndexing	color [ otherParent1 ]		165378	1					
ANR	166272	Identifier	color		165378	0					
ANR	166273	Identifier	otherParent1		165378	1					
ANR	166274	EqualityExpression	0 == color [ otherParent2 ]		165378	1		==			
ANR	166275	PrimaryExpression	0		165378	0					
ANR	166276	ArrayIndexing	color [ otherParent2 ]		165378	1					
ANR	166277	Identifier	color		165378	0					
ANR	166278	Identifier	otherParent2		165378	1					
ANR	166279	CompoundStatement		169:58:4683:4683	165378	1					
ANR	166280	ExpressionStatement	source = otherParent2	429:4:10551:10572	165378	0	True				
ANR	166281	AssignmentExpression	source = otherParent2		165378	0		=			
ANR	166282	Identifier	source		165378	0					
ANR	166283	Identifier	otherParent2		165378	1					
ANR	166284	ContinueStatement	continue ;	430:4:10578:10586	165378	1	True				
ANR	166285	ExpressionStatement		431:4:10592:10592	165378	13	True				
ANR	166286	GotoStatement	goto retnull ;	433:3:10630:10642	165378	14	True				
ANR	166287	Identifier	retnull		165378	0					
ANR	166288	ExpressionStatement		434:3:10647:10647	165378	14	True				
ANR	166289	ExpressionStatement		436:2:10652:10652	165378	21	True				
ANR	166290	ForStatement	for ( i = 0 ; i < g . getNumNodes ( ) ; i ++ )		165378	22					
ANR	166291	ForInit	i = 0 ;	439:6:10700:10703	165378	0	True				
ANR	166292	AssignmentExpression	i = 0		165378	0		=			
ANR	166293	Identifier	i		165378	0					
ANR	166294	PrimaryExpression	0		165378	1					
ANR	166295	Condition	i < g . getNumNodes ( )	439:11:10705:10721	165378	1	True				
ANR	166296	RelationalExpression	i < g . getNumNodes ( )		165378	0		<			
ANR	166297	Identifier	i		165378	0					
ANR	166298	CallExpression	g . getNumNodes ( )		165378	1					
ANR	166299	Callee	g . getNumNodes		165378	0					
ANR	166300	MemberAccess	g . getNumNodes		165378	0					
ANR	166301	Identifier	g		165378	0					
ANR	166302	Identifier	getNumNodes		165378	1					
ANR	166303	ArgumentList			165378	1					
ANR	166304	PostIncDecOperationExpression	i ++	439:30:10724:10726	165378	2	True				
ANR	166305	Identifier	i		165378	0					
ANR	166306	IncDec	++		165378	1					
ANR	166307	CompoundStatement		180:36:4868:4868	165378	3					
ANR	166308	IfStatement	if ( 0 == color [ i ] )		165378	0					
ANR	166309	Condition	0 == color [ i ]	440:6:10738:10748	165378	0	True				
ANR	166310	EqualityExpression	0 == color [ i ]		165378	0		==			
ANR	166311	PrimaryExpression	0		165378	0					
ANR	166312	ArrayIndexing	color [ i ]		165378	1					
ANR	166313	Identifier	color		165378	0					
ANR	166314	Identifier	i		165378	1					
ANR	166315	GotoStatement	goto retnull ;	441:3:10755:10767	165378	1	True				
ANR	166316	Identifier	retnull		165378	0					
ANR	166317	ExpressionStatement		442:2:10771:10771	165378	23	True				
ANR	166318	Statement	delete	444:1:10775:10780	165378	24	True				
ANR	166319	Statement	[	444:7:10781:10781	165378	25	True				
ANR	166320	Statement	]	444:8:10782:10782	165378	26	True				
ANR	166321	ExpressionStatement	color	444:10:10784:10789	165378	27	True				
ANR	166322	Identifier	color		165378	0					
ANR	166323	ExpressionStatement	* ppYield = yield	445:1:10792:10808	165378	28	True				
ANR	166324	AssignmentExpression	* ppYield = yield		165378	0		=			
ANR	166325	UnaryOperationExpression	* ppYield		165378	0					
ANR	166326	UnaryOperator	*		165378	0					
ANR	166327	Identifier	ppYield		165378	1					
ANR	166328	Identifier	yield		165378	1					
ANR	166329	ExpressionStatement	* ppSeq = seq	446:1:10811:10823	165378	29	True				
ANR	166330	AssignmentExpression	* ppSeq = seq		165378	0		=			
ANR	166331	UnaryOperationExpression	* ppSeq		165378	0					
ANR	166332	UnaryOperator	*		165378	0					
ANR	166333	Identifier	ppSeq		165378	1					
ANR	166334	Identifier	seq		165378	1					
ANR	166335	ExpressionStatement	* pSrc = idx	447:1:10826:10837	165378	30	True				
ANR	166336	AssignmentExpression	* pSrc = idx		165378	0		=			
ANR	166337	UnaryOperationExpression	* pSrc		165378	0					
ANR	166338	UnaryOperator	*		165378	0					
ANR	166339	Identifier	pSrc		165378	1					
ANR	166340	Identifier	idx		165378	1					
ANR	166341	ReturnStatement	return true ;	448:1:10840:10851	165378	31	True				
ANR	166342	Identifier	true		165378	0					
ANR	166343	Label	retnull :	450:0:10854:10861	165378	32	True				
ANR	166344	Identifier	retnull		165378	0					
ANR	166345	IfStatement	if ( color )		165378	33					
ANR	166346	Condition	color	451:5:10868:10872	165378	0	True				
ANR	166347	Identifier	color		165378	0					
ANR	166348	Statement	delete	451:13:10876:10881	165378	1	True				
ANR	166349	Statement	[	451:19:10882:10882	165378	34	True				
ANR	166350	Statement	]	451:20:10883:10883	165378	35	True				
ANR	166351	ExpressionStatement	color	451:22:10885:10890	165378	36	True				
ANR	166352	Identifier	color		165378	0					
ANR	166353	IfStatement	if ( yield )		165378	37					
ANR	166354	Condition	yield	452:5:10897:10901	165378	0	True				
ANR	166355	Identifier	yield		165378	0					
ANR	166356	Statement	delete	452:13:10905:10910	165378	1	True				
ANR	166357	Statement	[	452:19:10911:10911	165378	38	True				
ANR	166358	Statement	]	452:20:10912:10912	165378	39	True				
ANR	166359	ExpressionStatement	yield	452:22:10914:10919	165378	40	True				
ANR	166360	Identifier	yield		165378	0					
ANR	166361	IfStatement	if ( seq )		165378	41					
ANR	166362	Condition	seq	453:5:10926:10928	165378	0	True				
ANR	166363	Identifier	seq		165378	0					
ANR	166364	Statement	delete	453:11:10932:10937	165378	1	True				
ANR	166365	Statement	[	453:17:10938:10938	165378	42	True				
ANR	166366	Statement	]	453:18:10939:10939	165378	43	True				
ANR	166367	ExpressionStatement	seq	453:20:10941:10944	165378	44	True				
ANR	166368	Identifier	seq		165378	0					
ANR	166369	ReturnStatement	return false ;	454:1:10947:10959	165378	45	True				
ANR	166370	Identifier	false		165378	0					
ANR	166371	ReturnType	bool		165378	1					
ANR	166372	Identifier	ConstituentLibrary :: checkStrandW		165378	2					
ANR	166373	ParameterList	"const Dag & g , const Dag & gRev , int * * ppYield , int * * ppSeq , int * pSrc"		165378	3					
ANR	166374	Parameter	const Dag & g	257:39:5769:5780	165378	0	True				
ANR	166375	ParameterType	const Dag &		165378	0					
ANR	166376	Identifier	g		165378	1					
ANR	166377	Parameter	const Dag & gRev	257:53:5783:5797	165378	1	True				
ANR	166378	ParameterType	const Dag &		165378	0					
ANR	166379	Identifier	gRev		165378	1					
ANR	166380	Parameter	int * * ppYield	258:10:5810:5822	165378	2	True				
ANR	166381	ParameterType	int * *		165378	0					
ANR	166382	Identifier	ppYield		165378	1					
ANR	166383	Parameter	int * * ppSeq	258:25:5825:5835	165378	3	True				
ANR	166384	ParameterType	int * *		165378	0					
ANR	166385	Identifier	ppSeq		165378	1					
ANR	166386	Parameter	int * pSrc	259:10:5849:5857	165378	4	True				
ANR	166387	ParameterType	int *		165378	0					
ANR	166388	Identifier	pSrc		165378	1					
ANR	166389	CFGEntryNode	ENTRY		165378		True				
ANR	166390	CFGExitNode	EXIT		165378		True				
ANR	166391	CFGExceptionNode	EXCEPTION		165378		True				
ANR	166392	Symbol	parent		165378						
ANR	166393	Symbol	g . getNumNodes		165378						
ANR	166394	Symbol	g . getNumArcs		165378						
ANR	166395	Symbol	* parent		165378						
ANR	166396	Symbol	color		165378						
ANR	166397	Symbol	g . getArc		165378						
ANR	166398	Symbol	* seq		165378						
ANR	166399	Symbol	source		165378						
ANR	166400	Symbol	gRev		165378						
ANR	166401	Symbol	child2		165378						
ANR	166402	Symbol	child1		165378						
ANR	166403	Symbol	found		165378						
ANR	166404	Symbol	yield		165378						
ANR	166405	Symbol	* source		165378						
ANR	166406	Symbol	* idx		165378						
ANR	166407	Symbol	ppYield		165378						
ANR	166408	Symbol	seq		165378						
ANR	166409	Symbol	pSrc		165378						
ANR	166410	Symbol	ppSeq		165378						
ANR	166411	Symbol	* child		165378						
ANR	166412	Symbol	NULL		165378						
ANR	166413	Symbol	otherParent1		165378						
ANR	166414	Symbol	gRev . getNumArcs		165378						
ANR	166415	Symbol	g		165378						
ANR	166416	Symbol	false		165378						
ANR	166417	Symbol	* pSrc		165378						
ANR	166418	Symbol	i		165378						
ANR	166419	Symbol	j		165378						
ANR	166420	Symbol	* color		165378						
ANR	166421	Symbol	otherParent2		165378						
ANR	166422	Symbol	* yield		165378						
ANR	166423	Symbol	otherParent		165378						
ANR	166424	Symbol	sibling		165378						
ANR	166425	Symbol	* i		165378						
ANR	166426	Symbol	gRev . getArc		165378						
ANR	166427	Symbol	* ppSeq		165378						
ANR	166428	Symbol	true		165378						
ANR	166429	Symbol	* otherParent1		165378						
ANR	166430	Symbol	* ppYield		165378						
ANR	166431	Symbol	* otherParent		165378						
ANR	166432	Symbol	* otherParent2		165378						
ANR	166433	Symbol	idx		165378						
ANR	166434	Symbol	child		165378						
ANR	166435	Function	ConstituentLibrary :: checkW	472:0:11190:12303							
ANR	166436	FunctionDef	ConstituentLibrary :: checkW (const Dag & g)		166435	0					
ANR	166437	CompoundStatement		473:0:11237:12303	166435	0					
ANR	166438	IdentifierDeclStatement	int * yield ;	474:1:11240:11250	166435	0	True				
ANR	166439	IdentifierDecl	* yield		166435	0					
ANR	166440	IdentifierDeclType	int *		166435	0					
ANR	166441	Identifier	yield		166435	1					
ANR	166442	IdentifierDeclStatement	int * seq ;	475:1:11253:11261	166435	1	True				
ANR	166443	IdentifierDecl	* seq		166435	0					
ANR	166444	IdentifierDeclType	int *		166435	0					
ANR	166445	Identifier	seq		166435	1					
ANR	166446	IdentifierDeclStatement	int src ;	476:1:11264:11271	166435	2	True				
ANR	166447	IdentifierDecl	src		166435	0					
ANR	166448	IdentifierDeclType	int		166435	0					
ANR	166449	Identifier	src		166435	1					
ANR	166450	IdentifierDeclStatement	"int i , j ;"	477:1:11274:11281	166435	3	True				
ANR	166451	IdentifierDecl	i		166435	0					
ANR	166452	IdentifierDeclType	int		166435	0					
ANR	166453	Identifier	i		166435	1					
ANR	166454	IdentifierDecl	j		166435	1					
ANR	166455	IdentifierDeclType	int		166435	0					
ANR	166456	Identifier	j		166435	1					
ANR	166457	IdentifierDeclStatement	Dag gRev ;	480:1:11334:11342	166435	4	True				
ANR	166458	IdentifierDecl	gRev		166435	0					
ANR	166459	IdentifierDeclType	Dag		166435	0					
ANR	166460	Identifier	gRev		166435	1					
ANR	166461	ExpressionStatement	gRev . initializeWith ( g )	481:1:11345:11367	166435	5	True				
ANR	166462	CallExpression	gRev . initializeWith ( g )		166435	0					
ANR	166463	Callee	gRev . initializeWith		166435	0					
ANR	166464	MemberAccess	gRev . initializeWith		166435	0					
ANR	166465	Identifier	gRev		166435	0					
ANR	166466	Identifier	initializeWith		166435	1					
ANR	166467	ArgumentList	g		166435	1					
ANR	166468	Argument	g		166435	0					
ANR	166469	Identifier	g		166435	0					
ANR	166470	ExpressionStatement	gRev . reverseArcs ( )	482:1:11370:11388	166435	6	True				
ANR	166471	CallExpression	gRev . reverseArcs ( )		166435	0					
ANR	166472	Callee	gRev . reverseArcs		166435	0					
ANR	166473	MemberAccess	gRev . reverseArcs		166435	0					
ANR	166474	Identifier	gRev		166435	0					
ANR	166475	Identifier	reverseArcs		166435	1					
ANR	166476	ArgumentList			166435	1					
ANR	166477	IfStatement	"if ( ! checkStrandW ( g , gRev , & yield , & seq , & src ) )"		166435	7					
ANR	166478	Condition	"! checkStrandW ( g , gRev , & yield , & seq , & src )"	483:5:11395:11438	166435	0	True				
ANR	166479	UnaryOperationExpression	"! checkStrandW ( g , gRev , & yield , & seq , & src )"		166435	0					
ANR	166480	UnaryOperator	!		166435	0					
ANR	166481	CallExpression	"checkStrandW ( g , gRev , & yield , & seq , & src )"		166435	1					
ANR	166482	Callee	checkStrandW		166435	0					
ANR	166483	Identifier	checkStrandW		166435	0					
ANR	166484	ArgumentList	g		166435	1					
ANR	166485	Argument	g		166435	0					
ANR	166486	Identifier	g		166435	0					
ANR	166487	Argument	gRev		166435	1					
ANR	166488	Identifier	gRev		166435	0					
ANR	166489	Argument	& yield		166435	2					
ANR	166490	UnaryOperationExpression	& yield		166435	0					
ANR	166491	UnaryOperator	&		166435	0					
ANR	166492	Identifier	yield		166435	1					
ANR	166493	Argument	& seq		166435	3					
ANR	166494	UnaryOperationExpression	& seq		166435	0					
ANR	166495	UnaryOperator	&		166435	0					
ANR	166496	Identifier	seq		166435	1					
ANR	166497	Argument	& src		166435	4					
ANR	166498	UnaryOperationExpression	& src		166435	0					
ANR	166499	UnaryOperator	&		166435	0					
ANR	166500	Identifier	src		166435	1					
ANR	166501	CompoundStatement		11:52:204:204	166435	1					
ANR	166502	ReturnStatement	return NULL ;	484:2:11446:11457	166435	0	True				
ANR	166503	Identifier	NULL		166435	0					
ANR	166504	ExpressionStatement		485:2:11461:11461	166435	8	True				
ANR	166505	IfStatement	if ( yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ] )		166435	9					
ANR	166506	Condition	yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ]	492:5:11605:11636	166435	0	True				
ANR	166507	EqualityExpression	yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ]		166435	0		!=			
ANR	166508	ArrayIndexing	yield [ seq [ 0 ] ]		166435	0					
ANR	166509	Identifier	yield		166435	0					
ANR	166510	ArrayIndexing	seq [ 0 ]		166435	1					
ANR	166511	Identifier	seq		166435	0					
ANR	166512	PrimaryExpression	0		166435	1					
ANR	166513	ArrayIndexing	yield [ seq [ src - 1 ] ]		166435	1					
ANR	166514	Identifier	yield		166435	0					
ANR	166515	ArrayIndexing	seq [ src - 1 ]		166435	1					
ANR	166516	Identifier	seq		166435	0					
ANR	166517	AdditiveExpression	src - 1		166435	1		-			
ANR	166518	Identifier	src		166435	0					
ANR	166519	PrimaryExpression	1		166435	1					
ANR	166520	CompoundStatement		20:40:402:402	166435	1					
ANR	166521	Statement	delete	493:2:11644:11649	166435	0	True				
ANR	166522	Statement	[	493:8:11650:11650	166435	1	True				
ANR	166523	Statement	]	493:9:11651:11651	166435	2	True				
ANR	166524	ExpressionStatement	yield	493:11:11653:11658	166435	3	True				
ANR	166525	Identifier	yield		166435	0					
ANR	166526	Statement	delete	494:2:11662:11667	166435	4	True				
ANR	166527	Statement	[	494:8:11668:11668	166435	5	True				
ANR	166528	Statement	]	494:9:11669:11669	166435	6	True				
ANR	166529	ExpressionStatement	seq	494:11:11671:11674	166435	7	True				
ANR	166530	Identifier	seq		166435	0					
ANR	166531	ReturnStatement	return NULL ;	495:2:11678:11689	166435	8	True				
ANR	166532	Identifier	NULL		166435	0					
ANR	166533	ExpressionStatement		496:2:11693:11693	166435	10	True				
ANR	166534	ForStatement	for ( i = 1 ; i < src - 1 ; i ++ )		166435	11					
ANR	166535	ForInit	i = 1 ;	499:6:11760:11763	166435	0	True				
ANR	166536	AssignmentExpression	i = 1		166435	0		=			
ANR	166537	Identifier	i		166435	0					
ANR	166538	PrimaryExpression	1		166435	1					
ANR	166539	Condition	i < src - 1	499:11:11765:11771	166435	1	True				
ANR	166540	RelationalExpression	i < src - 1		166435	0		<			
ANR	166541	Identifier	i		166435	0					
ANR	166542	AdditiveExpression	src - 1		166435	1		-			
ANR	166543	Identifier	src		166435	0					
ANR	166544	PrimaryExpression	1		166435	1					
ANR	166545	PostIncDecOperationExpression	i ++	499:20:11774:11776	166435	2	True				
ANR	166546	Identifier	i		166435	0					
ANR	166547	IncDec	++		166435	1					
ANR	166548	CompoundStatement		27:26:542:542	166435	3					
ANR	166549	IfStatement	if ( yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1 )		166435	0					
ANR	166550	Condition	yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1	500:6:11788:11819	166435	0	True				
ANR	166551	EqualityExpression	yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1		166435	0		!=			
ANR	166552	ArrayIndexing	yield [ seq [ i ] ]		166435	0					
ANR	166553	Identifier	yield		166435	0					
ANR	166554	ArrayIndexing	seq [ i ]		166435	1					
ANR	166555	Identifier	seq		166435	0					
ANR	166556	Identifier	i		166435	1					
ANR	166557	AdditiveExpression	yield [ seq [ 0 ] ] - 1		166435	1		-			
ANR	166558	ArrayIndexing	yield [ seq [ 0 ] ]		166435	0					
ANR	166559	Identifier	yield		166435	0					
ANR	166560	ArrayIndexing	seq [ 0 ]		166435	1					
ANR	166561	Identifier	seq		166435	0					
ANR	166562	PrimaryExpression	0		166435	1					
ANR	166563	PrimaryExpression	1		166435	1					
ANR	166564	CompoundStatement		28:41:585:585	166435	1					
ANR	166565	Statement	delete	501:3:11828:11833	166435	0	True				
ANR	166566	Statement	[	501:9:11834:11834	166435	1	True				
ANR	166567	Statement	]	501:10:11835:11835	166435	2	True				
ANR	166568	ExpressionStatement	yield	501:12:11837:11842	166435	3	True				
ANR	166569	Identifier	yield		166435	0					
ANR	166570	Statement	delete	502:3:11847:11852	166435	4	True				
ANR	166571	Statement	[	502:9:11853:11853	166435	5	True				
ANR	166572	Statement	]	502:10:11854:11854	166435	6	True				
ANR	166573	ExpressionStatement	seq	502:12:11856:11859	166435	7	True				
ANR	166574	Identifier	seq		166435	0					
ANR	166575	ReturnStatement	return NULL ;	503:3:11864:11875	166435	8	True				
ANR	166576	Identifier	NULL		166435	0					
ANR	166577	ExpressionStatement		504:3:11880:11880	166435	1	True				
ANR	166578	ExpressionStatement		505:2:11884:11884	166435	12	True				
ANR	166579	IdentifierDeclStatement	int * sked = new int [ g . getNumNodes ( ) ] ;	509:1:11909:11947	166435	13	True				
ANR	166580	IdentifierDecl	* sked = new int [ g . getNumNodes ( ) ]		166435	0					
ANR	166581	IdentifierDeclType	int *		166435	0					
ANR	166582	Identifier	sked		166435	1					
ANR	166583	AssignmentExpression	* sked = new int [ g . getNumNodes ( ) ]		166435	2		=			
ANR	166584	Identifier	sked		166435	0					
ANR	166585	CallExpression	g . getNumNodes ( )		166435	1					
ANR	166586	Callee	g . getNumNodes		166435	0					
ANR	166587	MemberAccess	g . getNumNodes		166435	0					
ANR	166588	Identifier	g		166435	0					
ANR	166589	Identifier	getNumNodes		166435	1					
ANR	166590	ArgumentList			166435	1					
ANR	166591	IfStatement	if ( NULL == sked )		166435	14					
ANR	166592	Condition	NULL == sked	510:5:11954:11963	166435	0	True				
ANR	166593	EqualityExpression	NULL == sked		166435	0		==			
ANR	166594	Identifier	NULL		166435	0					
ANR	166595	Identifier	sked		166435	1					
ANR	166596	CompoundStatement		38:18:729:729	166435	1					
ANR	166597	Statement	delete	511:2:11971:11976	166435	0	True				
ANR	166598	Statement	[	511:8:11977:11977	166435	1	True				
ANR	166599	Statement	]	511:9:11978:11978	166435	2	True				
ANR	166600	ExpressionStatement	yield	511:11:11980:11985	166435	3	True				
ANR	166601	Identifier	yield		166435	0					
ANR	166602	Statement	delete	512:2:11989:11994	166435	4	True				
ANR	166603	Statement	[	512:8:11995:11995	166435	5	True				
ANR	166604	Statement	]	512:9:11996:11996	166435	6	True				
ANR	166605	ExpressionStatement	seq	512:11:11998:12001	166435	7	True				
ANR	166606	Identifier	seq		166435	0					
ANR	166607	ReturnStatement	return NULL ;	513:2:12005:12016	166435	8	True				
ANR	166608	Identifier	NULL		166435	0					
ANR	166609	ExpressionStatement		514:2:12020:12020	166435	15	True				
ANR	166610	ForStatement	for ( i = 0 ; i < src ; i ++ )		166435	16					
ANR	166611	ForInit	i = 0 ;	517:6:12094:12097	166435	0	True				
ANR	166612	AssignmentExpression	i = 0		166435	0		=			
ANR	166613	Identifier	i		166435	0					
ANR	166614	PrimaryExpression	0		166435	1					
ANR	166615	Condition	i < src	517:11:12099:12103	166435	1	True				
ANR	166616	RelationalExpression	i < src		166435	0		<			
ANR	166617	Identifier	i		166435	0					
ANR	166618	Identifier	src		166435	1					
ANR	166619	PostIncDecOperationExpression	i ++	517:18:12106:12108	166435	2	True				
ANR	166620	Identifier	i		166435	0					
ANR	166621	IncDec	++		166435	1					
ANR	166622	ExpressionStatement	sked [ i ] = seq [ i ]	518:2:12114:12130	166435	3	True				
ANR	166623	AssignmentExpression	sked [ i ] = seq [ i ]		166435	0		=			
ANR	166624	ArrayIndexing	sked [ i ]		166435	0					
ANR	166625	Identifier	sked		166435	0					
ANR	166626	Identifier	i		166435	1					
ANR	166627	ArrayIndexing	seq [ i ]		166435	1					
ANR	166628	Identifier	seq		166435	0					
ANR	166629	Identifier	i		166435	1					
ANR	166630	ForStatement	for ( j = 0 ; j < g . getNumNodes ( ) ; j ++ )		166435	17					
ANR	166631	ForInit	j = 0 ;	521:6:12162:12165	166435	0	True				
ANR	166632	AssignmentExpression	j = 0		166435	0		=			
ANR	166633	Identifier	j		166435	0					
ANR	166634	PrimaryExpression	0		166435	1					
ANR	166635	Condition	j < g . getNumNodes ( )	521:11:12167:12183	166435	1	True				
ANR	166636	RelationalExpression	j < g . getNumNodes ( )		166435	0		<			
ANR	166637	Identifier	j		166435	0					
ANR	166638	CallExpression	g . getNumNodes ( )		166435	1					
ANR	166639	Callee	g . getNumNodes		166435	0					
ANR	166640	MemberAccess	g . getNumNodes		166435	0					
ANR	166641	Identifier	g		166435	0					
ANR	166642	Identifier	getNumNodes		166435	1					
ANR	166643	ArgumentList			166435	1					
ANR	166644	PostIncDecOperationExpression	j ++	521:30:12186:12188	166435	2	True				
ANR	166645	Identifier	j		166435	0					
ANR	166646	IncDec	++		166435	1					
ANR	166647	CompoundStatement		49:36:954:954	166435	3					
ANR	166648	IfStatement	if ( 0 == g . getNumArcs ( j ) )		166435	0					
ANR	166649	Condition	0 == g . getNumArcs ( j )	522:6:12200:12217	166435	0	True				
ANR	166650	EqualityExpression	0 == g . getNumArcs ( j )		166435	0		==			
ANR	166651	PrimaryExpression	0		166435	0					
ANR	166652	CallExpression	g . getNumArcs ( j )		166435	1					
ANR	166653	Callee	g . getNumArcs		166435	0					
ANR	166654	MemberAccess	g . getNumArcs		166435	0					
ANR	166655	Identifier	g		166435	0					
ANR	166656	Identifier	getNumArcs		166435	1					
ANR	166657	ArgumentList	j		166435	1					
ANR	166658	Argument	j		166435	0					
ANR	166659	Identifier	j		166435	0					
ANR	166660	CompoundStatement		50:27:983:983	166435	1					
ANR	166661	ExpressionStatement	sked [ i ] = j	523:3:12226:12237	166435	0	True				
ANR	166662	AssignmentExpression	sked [ i ] = j		166435	0		=			
ANR	166663	ArrayIndexing	sked [ i ]		166435	0					
ANR	166664	Identifier	sked		166435	0					
ANR	166665	Identifier	i		166435	1					
ANR	166666	Identifier	j		166435	1					
ANR	166667	ExpressionStatement	i ++	524:3:12242:12245	166435	1	True				
ANR	166668	PostIncDecOperationExpression	i ++		166435	0					
ANR	166669	Identifier	i		166435	0					
ANR	166670	IncDec	++		166435	1					
ANR	166671	ExpressionStatement		525:3:12250:12250	166435	1	True				
ANR	166672	ExpressionStatement		526:2:12254:12254	166435	18	True				
ANR	166673	Statement	delete	528:1:12258:12263	166435	19	True				
ANR	166674	Statement	[	528:7:12264:12264	166435	20	True				
ANR	166675	Statement	]	528:8:12265:12265	166435	21	True				
ANR	166676	ExpressionStatement	yield	528:10:12267:12272	166435	22	True				
ANR	166677	Identifier	yield		166435	0					
ANR	166678	Statement	delete	529:1:12275:12280	166435	23	True				
ANR	166679	Statement	[	529:7:12281:12281	166435	24	True				
ANR	166680	Statement	]	529:8:12282:12282	166435	25	True				
ANR	166681	ExpressionStatement	seq	529:10:12284:12287	166435	26	True				
ANR	166682	Identifier	seq		166435	0					
ANR	166683	ReturnStatement	return sked ;	530:1:12290:12301	166435	27	True				
ANR	166684	Identifier	sked		166435	0					
ANR	166685	ReturnType	int *		166435	1					
ANR	166686	Identifier	ConstituentLibrary :: checkW		166435	2					
ANR	166687	ParameterList	const Dag & g		166435	3					
ANR	166688	Parameter	const Dag & g	472:33:11223:11234	166435	0	True				
ANR	166689	ParameterType	const Dag &		166435	0					
ANR	166690	Identifier	g		166435	1					
ANR	166691	CFGEntryNode	ENTRY		166435		True				
ANR	166692	CFGExitNode	EXIT		166435		True				
ANR	166693	Symbol	& seq		166435						
ANR	166694	Symbol	* * i		166435						
ANR	166695	Symbol	sked		166435						
ANR	166696	Symbol	g . getNumNodes		166435						
ANR	166697	Symbol	NULL		166435						
ANR	166698	Symbol	g . getNumArcs		166435						
ANR	166699	Symbol	src		166435						
ANR	166700	Symbol	g		166435						
ANR	166701	Symbol	i		166435						
ANR	166702	Symbol	* seq		166435						
ANR	166703	Symbol	* sked		166435						
ANR	166704	Symbol	j		166435						
ANR	166705	Symbol	gRev		166435						
ANR	166706	Symbol	* yield		166435						
ANR	166707	Symbol	& src		166435						
ANR	166708	Symbol	* src		166435						
ANR	166709	Symbol	& yield		166435						
ANR	166710	Symbol	* * seq		166435						
ANR	166711	Symbol	* i		166435						
ANR	166712	Symbol	yield		166435						
ANR	166713	Symbol	* * src		166435						
ANR	166714	Symbol	checkStrandW		166435						
ANR	166715	Symbol	seq		166435						
ANR	166716	Function	ConstituentLibrary :: checkM	548:0:12533:14136							
ANR	166717	FunctionDef	ConstituentLibrary :: checkM (const Dag & g)		166716	0					
ANR	166718	CompoundStatement		549:0:12580:14136	166716	0					
ANR	166719	IdentifierDeclStatement	int * yield = NULL ;	550:1:12583:12598	166716	0	True				
ANR	166720	IdentifierDecl	* yield = NULL		166716	0					
ANR	166721	IdentifierDeclType	int *		166716	0					
ANR	166722	Identifier	yield		166716	1					
ANR	166723	AssignmentExpression	* yield = NULL		166716	2		=			
ANR	166724	Identifier	NULL		166716	0					
ANR	166725	Identifier	NULL		166716	1					
ANR	166726	IdentifierDeclStatement	int * seq = NULL ;	551:1:12601:12614	166716	1	True				
ANR	166727	IdentifierDecl	* seq = NULL		166716	0					
ANR	166728	IdentifierDeclType	int *		166716	0					
ANR	166729	Identifier	seq		166716	1					
ANR	166730	AssignmentExpression	* seq = NULL		166716	2		=			
ANR	166731	Identifier	NULL		166716	0					
ANR	166732	Identifier	NULL		166716	1					
ANR	166733	IdentifierDeclStatement	int * sked = NULL ;	552:1:12617:12632	166716	2	True				
ANR	166734	IdentifierDecl	* sked = NULL		166716	0					
ANR	166735	IdentifierDeclType	int *		166716	0					
ANR	166736	Identifier	sked		166716	1					
ANR	166737	AssignmentExpression	* sked = NULL		166716	2		=			
ANR	166738	Identifier	NULL		166716	0					
ANR	166739	Identifier	NULL		166716	1					
ANR	166740	IdentifierDeclStatement	int * color = NULL ;	553:1:12635:12651	166716	3	True				
ANR	166741	IdentifierDecl	* color = NULL		166716	0					
ANR	166742	IdentifierDeclType	int *		166716	0					
ANR	166743	Identifier	color		166716	1					
ANR	166744	AssignmentExpression	* color = NULL		166716	2		=			
ANR	166745	Identifier	NULL		166716	0					
ANR	166746	Identifier	NULL		166716	1					
ANR	166747	IdentifierDeclStatement	int src ;	554:1:12654:12661	166716	4	True				
ANR	166748	IdentifierDecl	src		166716	0					
ANR	166749	IdentifierDeclType	int		166716	0					
ANR	166750	Identifier	src		166716	1					
ANR	166751	IdentifierDeclStatement	"int i , j ;"	555:1:12664:12671	166716	5	True				
ANR	166752	IdentifierDecl	i		166716	0					
ANR	166753	IdentifierDeclType	int		166716	0					
ANR	166754	Identifier	i		166716	1					
ANR	166755	IdentifierDecl	j		166716	1					
ANR	166756	IdentifierDeclType	int		166716	0					
ANR	166757	Identifier	j		166716	1					
ANR	166758	IdentifierDeclStatement	int idx ;	556:1:12674:12681	166716	6	True				
ANR	166759	IdentifierDecl	idx		166716	0					
ANR	166760	IdentifierDeclType	int		166716	0					
ANR	166761	Identifier	idx		166716	1					
ANR	166762	IdentifierDeclStatement	Dag gRev ;	559:1:12747:12755	166716	7	True				
ANR	166763	IdentifierDecl	gRev		166716	0					
ANR	166764	IdentifierDeclType	Dag		166716	0					
ANR	166765	Identifier	gRev		166716	1					
ANR	166766	ExpressionStatement	gRev . initializeWith ( g )	560:1:12758:12780	166716	8	True				
ANR	166767	CallExpression	gRev . initializeWith ( g )		166716	0					
ANR	166768	Callee	gRev . initializeWith		166716	0					
ANR	166769	MemberAccess	gRev . initializeWith		166716	0					
ANR	166770	Identifier	gRev		166716	0					
ANR	166771	Identifier	initializeWith		166716	1					
ANR	166772	ArgumentList	g		166716	1					
ANR	166773	Argument	g		166716	0					
ANR	166774	Identifier	g		166716	0					
ANR	166775	ExpressionStatement	gRev . reverseArcs ( )	561:1:12783:12801	166716	9	True				
ANR	166776	CallExpression	gRev . reverseArcs ( )		166716	0					
ANR	166777	Callee	gRev . reverseArcs		166716	0					
ANR	166778	MemberAccess	gRev . reverseArcs		166716	0					
ANR	166779	Identifier	gRev		166716	0					
ANR	166780	Identifier	reverseArcs		166716	1					
ANR	166781	ArgumentList			166716	1					
ANR	166782	IfStatement	"if ( ! checkStrandW ( gRev , g , & yield , & seq , & src ) )"		166716	10					
ANR	166783	Condition	"! checkStrandW ( gRev , g , & yield , & seq , & src )"	562:5:12808:12851	166716	0	True				
ANR	166784	UnaryOperationExpression	"! checkStrandW ( gRev , g , & yield , & seq , & src )"		166716	0					
ANR	166785	UnaryOperator	!		166716	0					
ANR	166786	CallExpression	"checkStrandW ( gRev , g , & yield , & seq , & src )"		166716	1					
ANR	166787	Callee	checkStrandW		166716	0					
ANR	166788	Identifier	checkStrandW		166716	0					
ANR	166789	ArgumentList	gRev		166716	1					
ANR	166790	Argument	gRev		166716	0					
ANR	166791	Identifier	gRev		166716	0					
ANR	166792	Argument	g		166716	1					
ANR	166793	Identifier	g		166716	0					
ANR	166794	Argument	& yield		166716	2					
ANR	166795	UnaryOperationExpression	& yield		166716	0					
ANR	166796	UnaryOperator	&		166716	0					
ANR	166797	Identifier	yield		166716	1					
ANR	166798	Argument	& seq		166716	3					
ANR	166799	UnaryOperationExpression	& seq		166716	0					
ANR	166800	UnaryOperator	&		166716	0					
ANR	166801	Identifier	seq		166716	1					
ANR	166802	Argument	& src		166716	4					
ANR	166803	UnaryOperationExpression	& src		166716	0					
ANR	166804	UnaryOperator	&		166716	0					
ANR	166805	Identifier	src		166716	1					
ANR	166806	GotoStatement	goto reterr ;	563:2:12891:12902	166716	1	True				
ANR	166807	Identifier	reterr		166716	0					
ANR	166808	IfStatement	if ( yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ] )		166716	11					
ANR	166809	Condition	yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ]	570:5:13046:13077	166716	0	True				
ANR	166810	EqualityExpression	yield [ seq [ 0 ] ] != yield [ seq [ src - 1 ] ]		166716	0		!=			
ANR	166811	ArrayIndexing	yield [ seq [ 0 ] ]		166716	0					
ANR	166812	Identifier	yield		166716	0					
ANR	166813	ArrayIndexing	seq [ 0 ]		166716	1					
ANR	166814	Identifier	seq		166716	0					
ANR	166815	PrimaryExpression	0		166716	1					
ANR	166816	ArrayIndexing	yield [ seq [ src - 1 ] ]		166716	1					
ANR	166817	Identifier	yield		166716	0					
ANR	166818	ArrayIndexing	seq [ src - 1 ]		166716	1					
ANR	166819	Identifier	seq		166716	0					
ANR	166820	AdditiveExpression	src - 1		166716	1		-			
ANR	166821	Identifier	src		166716	0					
ANR	166822	PrimaryExpression	1		166716	1					
ANR	166823	GotoStatement	goto reterr ;	571:2:13083:13094	166716	1	True				
ANR	166824	Identifier	reterr		166716	0					
ANR	166825	ForStatement	for ( i = 1 ; i < src - 1 ; i ++ )		166716	12					
ANR	166826	ForInit	i = 1 ;	574:6:13161:13164	166716	0	True				
ANR	166827	AssignmentExpression	i = 1		166716	0		=			
ANR	166828	Identifier	i		166716	0					
ANR	166829	PrimaryExpression	1		166716	1					
ANR	166830	Condition	i < src - 1	574:11:13166:13172	166716	1	True				
ANR	166831	RelationalExpression	i < src - 1		166716	0		<			
ANR	166832	Identifier	i		166716	0					
ANR	166833	AdditiveExpression	src - 1		166716	1		-			
ANR	166834	Identifier	src		166716	0					
ANR	166835	PrimaryExpression	1		166716	1					
ANR	166836	PostIncDecOperationExpression	i ++	574:20:13175:13177	166716	2	True				
ANR	166837	Identifier	i		166716	0					
ANR	166838	IncDec	++		166716	1					
ANR	166839	CompoundStatement		26:26:600:600	166716	3					
ANR	166840	IfStatement	if ( yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1 )		166716	0					
ANR	166841	Condition	yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1	575:6:13189:13220	166716	0	True				
ANR	166842	EqualityExpression	yield [ seq [ i ] ] != yield [ seq [ 0 ] ] - 1		166716	0		!=			
ANR	166843	ArrayIndexing	yield [ seq [ i ] ]		166716	0					
ANR	166844	Identifier	yield		166716	0					
ANR	166845	ArrayIndexing	seq [ i ]		166716	1					
ANR	166846	Identifier	seq		166716	0					
ANR	166847	Identifier	i		166716	1					
ANR	166848	AdditiveExpression	yield [ seq [ 0 ] ] - 1		166716	1		-			
ANR	166849	ArrayIndexing	yield [ seq [ 0 ] ]		166716	0					
ANR	166850	Identifier	yield		166716	0					
ANR	166851	ArrayIndexing	seq [ 0 ]		166716	1					
ANR	166852	Identifier	seq		166716	0					
ANR	166853	PrimaryExpression	0		166716	1					
ANR	166854	PrimaryExpression	1		166716	1					
ANR	166855	GotoStatement	goto reterr ;	576:3:13227:13238	166716	1	True				
ANR	166856	Identifier	reterr		166716	0					
ANR	166857	ExpressionStatement		577:2:13242:13242	166716	13	True				
ANR	166858	ExpressionStatement	sked = new int [ g . getNumNodes ( ) ]	581:1:13268:13300	166716	14	True				
ANR	166859	AssignmentExpression	sked = new int [ g . getNumNodes ( ) ]		166716	0		=			
ANR	166860	Identifier	sked		166716	0					
ANR	166861	CallExpression	g . getNumNodes ( )		166716	1					
ANR	166862	Callee	g . getNumNodes		166716	0					
ANR	166863	MemberAccess	g . getNumNodes		166716	0					
ANR	166864	Identifier	g		166716	0					
ANR	166865	Identifier	getNumNodes		166716	1					
ANR	166866	ArgumentList			166716	1					
ANR	166867	IfStatement	if ( NULL == sked )		166716	15					
ANR	166868	Condition	NULL == sked	582:5:13307:13316	166716	0	True				
ANR	166869	EqualityExpression	NULL == sked		166716	0		==			
ANR	166870	Identifier	NULL		166716	0					
ANR	166871	Identifier	sked		166716	1					
ANR	166872	GotoStatement	goto reterr ;	583:2:13323:13334	166716	1	True				
ANR	166873	Identifier	reterr		166716	0					
ANR	166874	ExpressionStatement	color = new int [ g . getNumNodes ( ) ]	587:1:13446:13479	166716	16	True				
ANR	166875	AssignmentExpression	color = new int [ g . getNumNodes ( ) ]		166716	0		=			
ANR	166876	Identifier	color		166716	0					
ANR	166877	CallExpression	g . getNumNodes ( )		166716	1					
ANR	166878	Callee	g . getNumNodes		166716	0					
ANR	166879	MemberAccess	g . getNumNodes		166716	0					
ANR	166880	Identifier	g		166716	0					
ANR	166881	Identifier	getNumNodes		166716	1					
ANR	166882	ArgumentList			166716	1					
ANR	166883	IfStatement	if ( NULL == color )		166716	17					
ANR	166884	Condition	NULL == color	588:5:13486:13496	166716	0	True				
ANR	166885	EqualityExpression	NULL == color		166716	0		==			
ANR	166886	Identifier	NULL		166716	0					
ANR	166887	Identifier	color		166716	1					
ANR	166888	GotoStatement	goto reterr ;	589:2:13502:13513	166716	1	True				
ANR	166889	Identifier	reterr		166716	0					
ANR	166890	ForStatement	for ( j = 0 ; j < g . getNumNodes ( ) ; j ++ )		166716	18					
ANR	166891	ForInit	j = 0 ;	590:6:13521:13524	166716	0	True				
ANR	166892	AssignmentExpression	j = 0		166716	0		=			
ANR	166893	Identifier	j		166716	0					
ANR	166894	PrimaryExpression	0		166716	1					
ANR	166895	Condition	j < g . getNumNodes ( )	590:11:13526:13542	166716	1	True				
ANR	166896	RelationalExpression	j < g . getNumNodes ( )		166716	0		<			
ANR	166897	Identifier	j		166716	0					
ANR	166898	CallExpression	g . getNumNodes ( )		166716	1					
ANR	166899	Callee	g . getNumNodes		166716	0					
ANR	166900	MemberAccess	g . getNumNodes		166716	0					
ANR	166901	Identifier	g		166716	0					
ANR	166902	Identifier	getNumNodes		166716	1					
ANR	166903	ArgumentList			166716	1					
ANR	166904	PostIncDecOperationExpression	j ++	590:30:13545:13547	166716	2	True				
ANR	166905	Identifier	j		166716	0					
ANR	166906	IncDec	++		166716	1					
ANR	166907	ExpressionStatement	color [ j ] = 0	591:2:13553:13565	166716	3	True				
ANR	166908	AssignmentExpression	color [ j ] = 0		166716	0		=			
ANR	166909	ArrayIndexing	color [ j ]		166716	0					
ANR	166910	Identifier	color		166716	0					
ANR	166911	Identifier	j		166716	1					
ANR	166912	PrimaryExpression	0		166716	1					
ANR	166913	ExpressionStatement	idx = 0	593:1:13569:13574	166716	19	True				
ANR	166914	AssignmentExpression	idx = 0		166716	0		=			
ANR	166915	Identifier	idx		166716	0					
ANR	166916	PrimaryExpression	0		166716	1					
ANR	166917	ForStatement	for ( i = 0 ; i < src ; i ++ )		166716	20					
ANR	166918	ForInit	i = 0 ;	594:6:13582:13585	166716	0	True				
ANR	166919	AssignmentExpression	i = 0		166716	0		=			
ANR	166920	Identifier	i		166716	0					
ANR	166921	PrimaryExpression	0		166716	1					
ANR	166922	Condition	i < src	594:11:13587:13591	166716	1	True				
ANR	166923	RelationalExpression	i < src		166716	0		<			
ANR	166924	Identifier	i		166716	0					
ANR	166925	Identifier	src		166716	1					
ANR	166926	PostIncDecOperationExpression	i ++	594:18:13594:13596	166716	2	True				
ANR	166927	Identifier	i		166716	0					
ANR	166928	IncDec	++		166716	1					
ANR	166929	CompoundStatement		47:2:1023:1041	166716	3					
ANR	166930	IdentifierDeclStatement	int child = seq [ i ] ;	595:2:13604:13622	166716	0	True				
ANR	166931	IdentifierDecl	child = seq [ i ]		166716	0					
ANR	166932	IdentifierDeclType	int		166716	0					
ANR	166933	Identifier	child		166716	1					
ANR	166934	AssignmentExpression	child = seq [ i ]		166716	2		=			
ANR	166935	Identifier	child		166716	0					
ANR	166936	ArrayIndexing	seq [ i ]		166716	1					
ANR	166937	Identifier	seq		166716	0					
ANR	166938	Identifier	i		166716	1					
ANR	166939	ForStatement	for ( j = 0 ; j < gRev . getNumArcs ( child ) ; j ++ )		166716	1					
ANR	166940	ForInit	j = 0 ;	596:7:13631:13634	166716	0	True				
ANR	166941	AssignmentExpression	j = 0		166716	0		=			
ANR	166942	Identifier	j		166716	0					
ANR	166943	PrimaryExpression	0		166716	1					
ANR	166944	Condition	j < gRev . getNumArcs ( child )	596:12:13636:13661	166716	1	True				
ANR	166945	RelationalExpression	j < gRev . getNumArcs ( child )		166716	0		<			
ANR	166946	Identifier	j		166716	0					
ANR	166947	CallExpression	gRev . getNumArcs ( child )		166716	1					
ANR	166948	Callee	gRev . getNumArcs		166716	0					
ANR	166949	MemberAccess	gRev . getNumArcs		166716	0					
ANR	166950	Identifier	gRev		166716	0					
ANR	166951	Identifier	getNumArcs		166716	1					
ANR	166952	ArgumentList	child		166716	1					
ANR	166953	Argument	child		166716	0					
ANR	166954	Identifier	child		166716	0					
ANR	166955	PostIncDecOperationExpression	j ++	596:40:13664:13666	166716	2	True				
ANR	166956	Identifier	j		166716	0					
ANR	166957	IncDec	++		166716	1					
ANR	166958	CompoundStatement		49:3:1094:1130	166716	3					
ANR	166959	IdentifierDeclStatement	"int parent = gRev . getArc ( child , j ) ;"	597:3:13675:13711	166716	0	True				
ANR	166960	IdentifierDecl	"parent = gRev . getArc ( child , j )"		166716	0					
ANR	166961	IdentifierDeclType	int		166716	0					
ANR	166962	Identifier	parent		166716	1					
ANR	166963	AssignmentExpression	"parent = gRev . getArc ( child , j )"		166716	2		=			
ANR	166964	Identifier	parent		166716	0					
ANR	166965	CallExpression	"gRev . getArc ( child , j )"		166716	1					
ANR	166966	Callee	gRev . getArc		166716	0					
ANR	166967	MemberAccess	gRev . getArc		166716	0					
ANR	166968	Identifier	gRev		166716	0					
ANR	166969	Identifier	getArc		166716	1					
ANR	166970	ArgumentList	child		166716	1					
ANR	166971	Argument	child		166716	0					
ANR	166972	Identifier	child		166716	0					
ANR	166973	Argument	j		166716	1					
ANR	166974	Identifier	j		166716	0					
ANR	166975	IfStatement	if ( 0 == color [ parent ] )		166716	1					
ANR	166976	Condition	0 == color [ parent ]	598:7:13720:13735	166716	0	True				
ANR	166977	EqualityExpression	0 == color [ parent ]		166716	0		==			
ANR	166978	PrimaryExpression	0		166716	0					
ANR	166979	ArrayIndexing	color [ parent ]		166716	1					
ANR	166980	Identifier	color		166716	0					
ANR	166981	Identifier	parent		166716	1					
ANR	166982	CompoundStatement		50:26:1158:1158	166716	1					
ANR	166983	ExpressionStatement	sked [ idx ] = parent	599:4:13745:13763	166716	0	True				
ANR	166984	AssignmentExpression	sked [ idx ] = parent		166716	0		=			
ANR	166985	ArrayIndexing	sked [ idx ]		166716	0					
ANR	166986	Identifier	sked		166716	0					
ANR	166987	Identifier	idx		166716	1					
ANR	166988	Identifier	parent		166716	1					
ANR	166989	ExpressionStatement	idx ++	600:4:13769:13774	166716	1	True				
ANR	166990	PostIncDecOperationExpression	idx ++		166716	0					
ANR	166991	Identifier	idx		166716	0					
ANR	166992	IncDec	++		166716	1					
ANR	166993	ExpressionStatement	color [ parent ] = 1	601:4:13780:13795	166716	2	True				
ANR	166994	AssignmentExpression	color [ parent ] = 1		166716	0		=			
ANR	166995	ArrayIndexing	color [ parent ]		166716	0					
ANR	166996	Identifier	color		166716	0					
ANR	166997	Identifier	parent		166716	1					
ANR	166998	PrimaryExpression	1		166716	1					
ANR	166999	ExpressionStatement		602:4:13801:13801	166716	2	True				
ANR	167000	ExpressionStatement		603:3:13806:13806	166716	2	True				
ANR	167001	ExpressionStatement		604:2:13810:13810	166716	21	True				
ANR	167002	ForStatement	for ( j = 0 ; j < g . getNumNodes ( ) ; j ++ )		166716	22					
ANR	167003	ForInit	j = 0 ;	607:6:13842:13845	166716	0	True				
ANR	167004	AssignmentExpression	j = 0		166716	0		=			
ANR	167005	Identifier	j		166716	0					
ANR	167006	PrimaryExpression	0		166716	1					
ANR	167007	Condition	j < g . getNumNodes ( )	607:11:13847:13863	166716	1	True				
ANR	167008	RelationalExpression	j < g . getNumNodes ( )		166716	0		<			
ANR	167009	Identifier	j		166716	0					
ANR	167010	CallExpression	g . getNumNodes ( )		166716	1					
ANR	167011	Callee	g . getNumNodes		166716	0					
ANR	167012	MemberAccess	g . getNumNodes		166716	0					
ANR	167013	Identifier	g		166716	0					
ANR	167014	Identifier	getNumNodes		166716	1					
ANR	167015	ArgumentList			166716	1					
ANR	167016	PostIncDecOperationExpression	j ++	607:30:13866:13868	166716	2	True				
ANR	167017	Identifier	j		166716	0					
ANR	167018	IncDec	++		166716	1					
ANR	167019	CompoundStatement		59:36:1291:1291	166716	3					
ANR	167020	IfStatement	if ( 0 == g . getNumArcs ( j ) )		166716	0					
ANR	167021	Condition	0 == g . getNumArcs ( j )	608:6:13880:13897	166716	0	True				
ANR	167022	EqualityExpression	0 == g . getNumArcs ( j )		166716	0		==			
ANR	167023	PrimaryExpression	0		166716	0					
ANR	167024	CallExpression	g . getNumArcs ( j )		166716	1					
ANR	167025	Callee	g . getNumArcs		166716	0					
ANR	167026	MemberAccess	g . getNumArcs		166716	0					
ANR	167027	Identifier	g		166716	0					
ANR	167028	Identifier	getNumArcs		166716	1					
ANR	167029	ArgumentList	j		166716	1					
ANR	167030	Argument	j		166716	0					
ANR	167031	Identifier	j		166716	0					
ANR	167032	CompoundStatement		60:27:1320:1320	166716	1					
ANR	167033	ExpressionStatement	sked [ idx ] = j	609:3:13906:13919	166716	0	True				
ANR	167034	AssignmentExpression	sked [ idx ] = j		166716	0		=			
ANR	167035	ArrayIndexing	sked [ idx ]		166716	0					
ANR	167036	Identifier	sked		166716	0					
ANR	167037	Identifier	idx		166716	1					
ANR	167038	Identifier	j		166716	1					
ANR	167039	ExpressionStatement	idx ++	610:3:13924:13929	166716	1	True				
ANR	167040	PostIncDecOperationExpression	idx ++		166716	0					
ANR	167041	Identifier	idx		166716	0					
ANR	167042	IncDec	++		166716	1					
ANR	167043	ExpressionStatement		611:3:13934:13934	166716	1	True				
ANR	167044	ExpressionStatement		612:2:13938:13938	166716	23	True				
ANR	167045	Statement	delete	614:1:13942:13947	166716	24	True				
ANR	167046	Statement	[	614:7:13948:13948	166716	25	True				
ANR	167047	Statement	]	614:8:13949:13949	166716	26	True				
ANR	167048	ExpressionStatement	color	614:10:13951:13956	166716	27	True				
ANR	167049	Identifier	color		166716	0					
ANR	167050	Statement	delete	615:1:13959:13964	166716	28	True				
ANR	167051	Statement	[	615:7:13965:13965	166716	29	True				
ANR	167052	Statement	]	615:8:13966:13966	166716	30	True				
ANR	167053	ExpressionStatement	yield	615:10:13968:13973	166716	31	True				
ANR	167054	Identifier	yield		166716	0					
ANR	167055	Statement	delete	616:1:13976:13981	166716	32	True				
ANR	167056	Statement	[	616:7:13982:13982	166716	33	True				
ANR	167057	Statement	]	616:8:13983:13983	166716	34	True				
ANR	167058	ExpressionStatement	seq	616:10:13985:13988	166716	35	True				
ANR	167059	Identifier	seq		166716	0					
ANR	167060	ReturnStatement	return sked ;	617:1:13991:14002	166716	36	True				
ANR	167061	Identifier	sked		166716	0					
ANR	167062	Label	reterr :	619:0:14005:14011	166716	37	True				
ANR	167063	Identifier	reterr		166716	0					
ANR	167064	IfStatement	if ( color )		166716	38					
ANR	167065	Condition	color	620:5:14018:14022	166716	0	True				
ANR	167066	Identifier	color		166716	0					
ANR	167067	Statement	delete	620:13:14026:14031	166716	1	True				
ANR	167068	Statement	[	620:19:14032:14032	166716	39	True				
ANR	167069	Statement	]	620:20:14033:14033	166716	40	True				
ANR	167070	ExpressionStatement	sked	620:22:14035:14039	166716	41	True				
ANR	167071	Identifier	sked		166716	0					
ANR	167072	IfStatement	if ( sked )		166716	42					
ANR	167073	Condition	sked	621:5:14046:14049	166716	0	True				
ANR	167074	Identifier	sked		166716	0					
ANR	167075	Statement	delete	621:12:14053:14058	166716	1	True				
ANR	167076	Statement	[	621:18:14059:14059	166716	43	True				
ANR	167077	Statement	]	621:19:14060:14060	166716	44	True				
ANR	167078	ExpressionStatement	sked	621:21:14062:14066	166716	45	True				
ANR	167079	Identifier	sked		166716	0					
ANR	167080	IfStatement	if ( yield )		166716	46					
ANR	167081	Condition	yield	622:5:14073:14077	166716	0	True				
ANR	167082	Identifier	yield		166716	0					
ANR	167083	Statement	delete	622:13:14081:14086	166716	1	True				
ANR	167084	Statement	[	622:19:14087:14087	166716	47	True				
ANR	167085	Statement	]	622:20:14088:14088	166716	48	True				
ANR	167086	ExpressionStatement	yield	622:22:14090:14095	166716	49	True				
ANR	167087	Identifier	yield		166716	0					
ANR	167088	IfStatement	if ( seq )		166716	50					
ANR	167089	Condition	seq	623:5:14102:14104	166716	0	True				
ANR	167090	Identifier	seq		166716	0					
ANR	167091	Statement	delete	623:11:14108:14113	166716	1	True				
ANR	167092	Statement	[	623:17:14114:14114	166716	51	True				
ANR	167093	Statement	]	623:18:14115:14115	166716	52	True				
ANR	167094	ExpressionStatement	seq	623:20:14117:14120	166716	53	True				
ANR	167095	Identifier	seq		166716	0					
ANR	167096	ReturnStatement	return NULL ;	624:1:14123:14134	166716	54	True				
ANR	167097	Identifier	NULL		166716	0					
ANR	167098	ReturnType	int *		166716	1					
ANR	167099	Identifier	ConstituentLibrary :: checkM		166716	2					
ANR	167100	ParameterList	const Dag & g		166716	3					
ANR	167101	Parameter	const Dag & g	548:33:12566:12577	166716	0	True				
ANR	167102	ParameterType	const Dag &		166716	0					
ANR	167103	Identifier	g		166716	1					
ANR	167104	CFGEntryNode	ENTRY		166716		True				
ANR	167105	CFGExitNode	EXIT		166716		True				
ANR	167106	Symbol	parent		166716						
ANR	167107	Symbol	sked		166716						
ANR	167108	Symbol	& seq		166716						
ANR	167109	Symbol	g . getNumNodes		166716						
ANR	167110	Symbol	* parent		166716						
ANR	167111	Symbol	g . getNumArcs		166716						
ANR	167112	Symbol	color		166716						
ANR	167113	Symbol	* seq		166716						
ANR	167114	Symbol	* sked		166716						
ANR	167115	Symbol	gRev		166716						
ANR	167116	Symbol	& src		166716						
ANR	167117	Symbol	* src		166716						
ANR	167118	Symbol	yield		166716						
ANR	167119	Symbol	* idx		166716						
ANR	167120	Symbol	checkStrandW		166716						
ANR	167121	Symbol	seq		166716						
ANR	167122	Symbol	* * i		166716						
ANR	167123	Symbol	NULL		166716						
ANR	167124	Symbol	src		166716						
ANR	167125	Symbol	gRev . getNumArcs		166716						
ANR	167126	Symbol	g		166716						
ANR	167127	Symbol	i		166716						
ANR	167128	Symbol	j		166716						
ANR	167129	Symbol	* color		166716						
ANR	167130	Symbol	* yield		166716						
ANR	167131	Symbol	& yield		166716						
ANR	167132	Symbol	* * seq		166716						
ANR	167133	Symbol	* i		166716						
ANR	167134	Symbol	* j		166716						
ANR	167135	Symbol	gRev . getArc		166716						
ANR	167136	Symbol	* * src		166716						
ANR	167137	Symbol	idx		166716						
ANR	167138	Symbol	child		166716						
ANR	167139	Function	ConstituentLibrary :: getSchedule	646:0:14581:16553							
ANR	167140	FunctionDef	ConstituentLibrary :: getSchedule (const Dag & g)		167139	0					
ANR	167141	CompoundStatement		647:0:14633:16553	167139	0					
ANR	167142	IdentifierDeclStatement	"int i , j , k ;"	648:1:14636:14645	167139	0	True				
ANR	167143	IdentifierDecl	i		167139	0					
ANR	167144	IdentifierDeclType	int		167139	0					
ANR	167145	Identifier	i		167139	1					
ANR	167146	IdentifierDecl	j		167139	1					
ANR	167147	IdentifierDeclType	int		167139	0					
ANR	167148	Identifier	j		167139	1					
ANR	167149	IdentifierDecl	k		167139	2					
ANR	167150	IdentifierDeclType	int		167139	0					
ANR	167151	Identifier	k		167139	1					
ANR	167152	IdentifierDeclStatement	int * sked = NULL ;	651:1:14734:14748	167139	1	True				
ANR	167153	IdentifierDecl	* sked = NULL		167139	0					
ANR	167154	IdentifierDeclType	int *		167139	0					
ANR	167155	Identifier	sked		167139	1					
ANR	167156	AssignmentExpression	* sked = NULL		167139	2		=			
ANR	167157	Identifier	NULL		167139	0					
ANR	167158	Identifier	NULL		167139	1					
ANR	167159	ExpressionStatement	sked = checkW ( g )	652:1:14751:14765	167139	2	True				
ANR	167160	AssignmentExpression	sked = checkW ( g )		167139	0		=			
ANR	167161	Identifier	sked		167139	0					
ANR	167162	CallExpression	checkW ( g )		167139	1					
ANR	167163	Callee	checkW		167139	0					
ANR	167164	Identifier	checkW		167139	0					
ANR	167165	ArgumentList	g		167139	1					
ANR	167166	Argument	g		167139	0					
ANR	167167	Identifier	g		167139	0					
ANR	167168	IfStatement	if ( sked )		167139	3					
ANR	167169	Condition	sked	653:5:14772:14775	167139	0	True				
ANR	167170	Identifier	sked		167139	0					
ANR	167171	ReturnStatement	return sked ;	653:12:14779:14790	167139	1	True				
ANR	167172	Identifier	sked		167139	0					
ANR	167173	ExpressionStatement	sked = checkM ( g )	654:1:14793:14807	167139	4	True				
ANR	167174	AssignmentExpression	sked = checkM ( g )		167139	0		=			
ANR	167175	Identifier	sked		167139	0					
ANR	167176	CallExpression	checkM ( g )		167139	1					
ANR	167177	Callee	checkM		167139	0					
ANR	167178	Identifier	checkM		167139	0					
ANR	167179	ArgumentList	g		167139	1					
ANR	167180	Argument	g		167139	0					
ANR	167181	Identifier	g		167139	0					
ANR	167182	IfStatement	if ( sked )		167139	5					
ANR	167183	Condition	sked	655:5:14814:14817	167139	0	True				
ANR	167184	Identifier	sked		167139	0					
ANR	167185	ReturnStatement	return sked ;	655:12:14821:14832	167139	1	True				
ANR	167186	Identifier	sked		167139	0					
ANR	167187	ExpressionStatement	sked = checkN ( g )	656:1:14835:14849	167139	6	True				
ANR	167188	AssignmentExpression	sked = checkN ( g )		167139	0		=			
ANR	167189	Identifier	sked		167139	0					
ANR	167190	CallExpression	checkN ( g )		167139	1					
ANR	167191	Callee	checkN		167139	0					
ANR	167192	Identifier	checkN		167139	0					
ANR	167193	ArgumentList	g		167139	1					
ANR	167194	Argument	g		167139	0					
ANR	167195	Identifier	g		167139	0					
ANR	167196	IfStatement	if ( sked )		167139	7					
ANR	167197	Condition	sked	657:5:14856:14859	167139	0	True				
ANR	167198	Identifier	sked		167139	0					
ANR	167199	ReturnStatement	return sked ;	657:12:14863:14874	167139	1	True				
ANR	167200	Identifier	sked		167139	0					
ANR	167201	ExpressionStatement	sked = checkC ( g )	658:1:14877:14891	167139	8	True				
ANR	167202	AssignmentExpression	sked = checkC ( g )		167139	0		=			
ANR	167203	Identifier	sked		167139	0					
ANR	167204	CallExpression	checkC ( g )		167139	1					
ANR	167205	Callee	checkC		167139	0					
ANR	167206	Identifier	checkC		167139	0					
ANR	167207	ArgumentList	g		167139	1					
ANR	167208	Argument	g		167139	0					
ANR	167209	Identifier	g		167139	0					
ANR	167210	IfStatement	if ( sked )		167139	9					
ANR	167211	Condition	sked	659:5:14898:14901	167139	0	True				
ANR	167212	Identifier	sked		167139	0					
ANR	167213	ReturnStatement	return sked ;	659:12:14905:14916	167139	1	True				
ANR	167214	Identifier	sked		167139	0					
ANR	167215	IdentifierDeclStatement	int * numParents = g . getParentCountVector ( ) ;	668:1:15103:15146	167139	10	True				
ANR	167216	IdentifierDecl	* numParents = g . getParentCountVector ( )		167139	0					
ANR	167217	IdentifierDeclType	int *		167139	0					
ANR	167218	Identifier	numParents		167139	1					
ANR	167219	AssignmentExpression	* numParents = g . getParentCountVector ( )		167139	2		=			
ANR	167220	Identifier	numParents		167139	0					
ANR	167221	CallExpression	g . getParentCountVector ( )		167139	1					
ANR	167222	Callee	g . getParentCountVector		167139	0					
ANR	167223	MemberAccess	g . getParentCountVector		167139	0					
ANR	167224	Identifier	g		167139	0					
ANR	167225	Identifier	getParentCountVector		167139	1					
ANR	167226	ArgumentList			167139	1					
ANR	167227	IfStatement	if ( NULL == numParents )		167139	11					
ANR	167228	Condition	NULL == numParents	669:5:15153:15168	167139	0	True				
ANR	167229	EqualityExpression	NULL == numParents		167139	0		==			
ANR	167230	Identifier	NULL		167139	0					
ANR	167231	Identifier	numParents		167139	1					
ANR	167232	ThrowStatement	"throw ""ConstituentLibrary::getSchedule, numParents is NULL"" ;"	670:2:15174:15233	167139	1	True				
ANR	167233	PrimaryExpression	"""ConstituentLibrary::getSchedule, numParents is NULL"""		167139	0					
ANR	167234	IdentifierDeclStatement	int numNodes = g . getNumNodes ( ) ;	673:1:15270:15300	167139	12	True				
ANR	167235	IdentifierDecl	numNodes = g . getNumNodes ( )		167139	0					
ANR	167236	IdentifierDeclType	int		167139	0					
ANR	167237	Identifier	numNodes		167139	1					
ANR	167238	AssignmentExpression	numNodes = g . getNumNodes ( )		167139	2		=			
ANR	167239	Identifier	numNodes		167139	0					
ANR	167240	CallExpression	g . getNumNodes ( )		167139	1					
ANR	167241	Callee	g . getNumNodes		167139	0					
ANR	167242	MemberAccess	g . getNumNodes		167139	0					
ANR	167243	Identifier	g		167139	0					
ANR	167244	Identifier	getNumNodes		167139	1					
ANR	167245	ArgumentList			167139	1					
ANR	167246	IdentifierDeclStatement	int * sigma = new int [ numNodes ] ;	674:1:15303:15334	167139	13	True				
ANR	167247	IdentifierDecl	* sigma = new int [ numNodes ]		167139	0					
ANR	167248	IdentifierDeclType	int *		167139	0					
ANR	167249	Identifier	sigma		167139	1					
ANR	167250	AssignmentExpression	* sigma = new int [ numNodes ]		167139	2		=			
ANR	167251	Identifier	numNodes		167139	0					
ANR	167252	Identifier	numNodes		167139	1					
ANR	167253	IfStatement	if ( NULL == sigma )		167139	14					
ANR	167254	Condition	NULL == sigma	675:5:15341:15351	167139	0	True				
ANR	167255	EqualityExpression	NULL == sigma		167139	0		==			
ANR	167256	Identifier	NULL		167139	0					
ANR	167257	Identifier	sigma		167139	1					
ANR	167258	ThrowStatement	"throw ""ConstituentLibrary::getSchedule, sigma is NULL"" ;"	676:2:15357:15411	167139	1	True				
ANR	167259	PrimaryExpression	"""ConstituentLibrary::getSchedule, sigma is NULL"""		167139	0					
ANR	167260	IdentifierDeclStatement	int seq ;	680:1:15489:15496	167139	15	True				
ANR	167261	IdentifierDecl	seq		167139	0					
ANR	167262	IdentifierDeclType	int		167139	0					
ANR	167263	Identifier	seq		167139	1					
ANR	167264	ForStatement	for ( seq = 0 ; seq < numNodes ; seq ++ )		167139	16					
ANR	167265	ForInit	seq = 0 ;	681:6:15504:15509	167139	0	True				
ANR	167266	AssignmentExpression	seq = 0		167139	0		=			
ANR	167267	Identifier	seq		167139	0					
ANR	167268	PrimaryExpression	0		167139	1					
ANR	167269	Condition	seq < numNodes	681:13:15511:15522	167139	1	True				
ANR	167270	RelationalExpression	seq < numNodes		167139	0		<			
ANR	167271	Identifier	seq		167139	0					
ANR	167272	Identifier	numNodes		167139	1					
ANR	167273	PostIncDecOperationExpression	seq ++	681:27:15525:15529	167139	2	True				
ANR	167274	Identifier	seq		167139	0					
ANR	167275	IncDec	++		167139	1					
ANR	167276	CompoundStatement		51:2:1305:1325	167139	3					
ANR	167277	IdentifierDeclStatement	bool found = false ;	684:2:15570:15588	167139	0	True				
ANR	167278	IdentifierDecl	found = false		167139	0					
ANR	167279	IdentifierDeclType	bool		167139	0					
ANR	167280	Identifier	found		167139	1					
ANR	167281	AssignmentExpression	found = false		167139	2		=			
ANR	167282	Identifier	false		167139	0					
ANR	167283	Identifier	false		167139	1					
ANR	167284	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		167139	1					
ANR	167285	ForInit	i = 0 ;	685:7:15597:15600	167139	0	True				
ANR	167286	AssignmentExpression	i = 0		167139	0		=			
ANR	167287	Identifier	i		167139	0					
ANR	167288	PrimaryExpression	0		167139	1					
ANR	167289	Condition	i < numNodes	685:12:15602:15611	167139	1	True				
ANR	167290	RelationalExpression	i < numNodes		167139	0		<			
ANR	167291	Identifier	i		167139	0					
ANR	167292	Identifier	numNodes		167139	1					
ANR	167293	PostIncDecOperationExpression	i ++	685:24:15614:15616	167139	2	True				
ANR	167294	Identifier	i		167139	0					
ANR	167295	IncDec	++		167139	1					
ANR	167296	CompoundStatement		39:30:986:986	167139	3					
ANR	167297	IfStatement	if ( 0 == numParents [ i ] )		167139	0					
ANR	167298	Condition	0 == numParents [ i ]	686:7:15629:15644	167139	0	True				
ANR	167299	EqualityExpression	0 == numParents [ i ]		167139	0		==			
ANR	167300	PrimaryExpression	0		167139	0					
ANR	167301	ArrayIndexing	numParents [ i ]		167139	1					
ANR	167302	Identifier	numParents		167139	0					
ANR	167303	Identifier	i		167139	1					
ANR	167304	ExpressionStatement	found = true	687:4:15652:15664	167139	1	True				
ANR	167305	AssignmentExpression	found = true		167139	0		=			
ANR	167306	Identifier	found		167139	0					
ANR	167307	Identifier	true		167139	1					
ANR	167308	ExpressionStatement		688:3:15669:15669	167139	2	True				
ANR	167309	IfStatement	if ( ! found )		167139	3					
ANR	167310	Condition	! found	691:6:15735:15740	167139	0	True				
ANR	167311	UnaryOperationExpression	! found		167139	0					
ANR	167312	UnaryOperator	!		167139	0					
ANR	167313	Identifier	found		167139	1					
ANR	167314	ThrowStatement	"throw ""ConstituentLibrary::getSchedule, not found"" ;"	692:3:15747:15797	167139	1	True				
ANR	167315	PrimaryExpression	"""ConstituentLibrary::getSchedule, not found"""		167139	0					
ANR	167316	IdentifierDeclStatement	int maxNode = - 1 ;	696:2:15919:15935	167139	4	True				
ANR	167317	IdentifierDecl	maxNode = - 1		167139	0					
ANR	167318	IdentifierDeclType	int		167139	0					
ANR	167319	Identifier	maxNode		167139	1					
ANR	167320	AssignmentExpression	maxNode = - 1		167139	2		=			
ANR	167321	Identifier	maxNode		167139	0					
ANR	167322	UnaryOperationExpression	- 1		167139	1					
ANR	167323	UnaryOperator	-		167139	0					
ANR	167324	PrimaryExpression	1		167139	1					
ANR	167325	IdentifierDeclStatement	int maxChildren = - 1 ;	697:2:15939:15959	167139	5	True				
ANR	167326	IdentifierDecl	maxChildren = - 1		167139	0					
ANR	167327	IdentifierDeclType	int		167139	0					
ANR	167328	Identifier	maxChildren		167139	1					
ANR	167329	AssignmentExpression	maxChildren = - 1		167139	2		=			
ANR	167330	Identifier	maxChildren		167139	0					
ANR	167331	UnaryOperationExpression	- 1		167139	1					
ANR	167332	UnaryOperator	-		167139	0					
ANR	167333	PrimaryExpression	1		167139	1					
ANR	167334	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		167139	6					
ANR	167335	ForInit	i = 0 ;	698:7:15968:15971	167139	0	True				
ANR	167336	AssignmentExpression	i = 0		167139	0		=			
ANR	167337	Identifier	i		167139	0					
ANR	167338	PrimaryExpression	0		167139	1					
ANR	167339	Condition	i < numNodes	698:12:15973:15982	167139	1	True				
ANR	167340	RelationalExpression	i < numNodes		167139	0		<			
ANR	167341	Identifier	i		167139	0					
ANR	167342	Identifier	numNodes		167139	1					
ANR	167343	PostIncDecOperationExpression	i ++	698:24:15985:15987	167139	2	True				
ANR	167344	Identifier	i		167139	0					
ANR	167345	IncDec	++		167139	1					
ANR	167346	CompoundStatement		52:30:1357:1357	167139	3					
ANR	167347	IfStatement	if ( 0 == numParents [ i ] )		167139	0					
ANR	167348	Condition	0 == numParents [ i ]	699:7:16000:16015	167139	0	True				
ANR	167349	EqualityExpression	0 == numParents [ i ]		167139	0		==			
ANR	167350	PrimaryExpression	0		167139	0					
ANR	167351	ArrayIndexing	numParents [ i ]		167139	1					
ANR	167352	Identifier	numParents		167139	0					
ANR	167353	Identifier	i		167139	1					
ANR	167354	CompoundStatement		53:26:1385:1385	167139	1					
ANR	167355	IfStatement	if ( g . getNumArcs ( i ) > maxChildren )		167139	0					
ANR	167356	Condition	g . getNumArcs ( i ) > maxChildren	700:8:16029:16057	167139	0	True				
ANR	167357	RelationalExpression	g . getNumArcs ( i ) > maxChildren		167139	0		>			
ANR	167358	CallExpression	g . getNumArcs ( i )		167139	0					
ANR	167359	Callee	g . getNumArcs		167139	0					
ANR	167360	MemberAccess	g . getNumArcs		167139	0					
ANR	167361	Identifier	g		167139	0					
ANR	167362	Identifier	getNumArcs		167139	1					
ANR	167363	ArgumentList	i		167139	1					
ANR	167364	Argument	i		167139	0					
ANR	167365	Identifier	i		167139	0					
ANR	167366	Identifier	maxChildren		167139	1					
ANR	167367	CompoundStatement		54:40:1427:1427	167139	1					
ANR	167368	ExpressionStatement	maxNode = i	701:5:16068:16079	167139	0	True				
ANR	167369	AssignmentExpression	maxNode = i		167139	0		=			
ANR	167370	Identifier	maxNode		167139	0					
ANR	167371	Identifier	i		167139	1					
ANR	167372	ExpressionStatement	maxChildren = g . getNumArcs ( i )	702:5:16086:16115	167139	1	True				
ANR	167373	AssignmentExpression	maxChildren = g . getNumArcs ( i )		167139	0		=			
ANR	167374	Identifier	maxChildren		167139	0					
ANR	167375	CallExpression	g . getNumArcs ( i )		167139	1					
ANR	167376	Callee	g . getNumArcs		167139	0					
ANR	167377	MemberAccess	g . getNumArcs		167139	0					
ANR	167378	Identifier	g		167139	0					
ANR	167379	Identifier	getNumArcs		167139	1					
ANR	167380	ArgumentList	i		167139	1					
ANR	167381	Argument	i		167139	0					
ANR	167382	Identifier	i		167139	0					
ANR	167383	ExpressionStatement		703:5:16122:16122	167139	1	True				
ANR	167384	ExpressionStatement		704:4:16128:16128	167139	1	True				
ANR	167385	ExpressionStatement		705:3:16133:16133	167139	7	True				
ANR	167386	ExpressionStatement	sigma [ seq ] = maxNode	708:2:16163:16183	167139	8	True				
ANR	167387	AssignmentExpression	sigma [ seq ] = maxNode		167139	0		=			
ANR	167388	ArrayIndexing	sigma [ seq ]		167139	0					
ANR	167389	Identifier	sigma		167139	0					
ANR	167390	Identifier	seq		167139	1					
ANR	167391	Identifier	maxNode		167139	1					
ANR	167392	ExpressionStatement	numParents [ maxNode ] = - 1	711:2:16218:16242	167139	9	True				
ANR	167393	AssignmentExpression	numParents [ maxNode ] = - 1		167139	0		=			
ANR	167394	ArrayIndexing	numParents [ maxNode ]		167139	0					
ANR	167395	Identifier	numParents		167139	0					
ANR	167396	Identifier	maxNode		167139	1					
ANR	167397	UnaryOperationExpression	- 1		167139	1					
ANR	167398	UnaryOperator	-		167139	0					
ANR	167399	PrimaryExpression	1		167139	1					
ANR	167400	ExpressionStatement	k = g . getNumArcs ( maxNode )	714:2:16279:16304	167139	10	True				
ANR	167401	AssignmentExpression	k = g . getNumArcs ( maxNode )		167139	0		=			
ANR	167402	Identifier	k		167139	0					
ANR	167403	CallExpression	g . getNumArcs ( maxNode )		167139	1					
ANR	167404	Callee	g . getNumArcs		167139	0					
ANR	167405	MemberAccess	g . getNumArcs		167139	0					
ANR	167406	Identifier	g		167139	0					
ANR	167407	Identifier	getNumArcs		167139	1					
ANR	167408	ArgumentList	maxNode		167139	1					
ANR	167409	Argument	maxNode		167139	0					
ANR	167410	Identifier	maxNode		167139	0					
ANR	167411	ForStatement	for ( j = 0 ; j < k ; j ++ )		167139	11					
ANR	167412	ForInit	j = 0 ;	715:7:16313:16316	167139	0	True				
ANR	167413	AssignmentExpression	j = 0		167139	0		=			
ANR	167414	Identifier	j		167139	0					
ANR	167415	PrimaryExpression	0		167139	1					
ANR	167416	Condition	j < k	715:12:16318:16320	167139	1	True				
ANR	167417	RelationalExpression	j < k		167139	0		<			
ANR	167418	Identifier	j		167139	0					
ANR	167419	Identifier	k		167139	1					
ANR	167420	PostIncDecOperationExpression	j ++	715:17:16323:16325	167139	2	True				
ANR	167421	Identifier	j		167139	0					
ANR	167422	IncDec	++		167139	1					
ANR	167423	ExpressionStatement	"numParents [ g . getArc ( maxNode , j ) ] --"	716:3:16332:16368	167139	3	True				
ANR	167424	PostIncDecOperationExpression	"numParents [ g . getArc ( maxNode , j ) ] --"		167139	0					
ANR	167425	ArrayIndexing	"numParents [ g . getArc ( maxNode , j ) ]"		167139	0					
ANR	167426	Identifier	numParents		167139	0					
ANR	167427	CallExpression	"g . getArc ( maxNode , j )"		167139	1					
ANR	167428	Callee	g . getArc		167139	0					
ANR	167429	MemberAccess	g . getArc		167139	0					
ANR	167430	Identifier	g		167139	0					
ANR	167431	Identifier	getArc		167139	1					
ANR	167432	ArgumentList	maxNode		167139	1					
ANR	167433	Argument	maxNode		167139	0					
ANR	167434	Identifier	maxNode		167139	0					
ANR	167435	Argument	j		167139	1					
ANR	167436	Identifier	j		167139	0					
ANR	167437	IncDec	--		167139	1					
ANR	167438	ExpressionStatement		718:2:16373:16373	167139	17	True				
ANR	167439	Statement	delete	721:1:16402:16407	167139	18	True				
ANR	167440	Statement	[	721:7:16408:16408	167139	19	True				
ANR	167441	Statement	]	721:8:16409:16409	167139	20	True				
ANR	167442	ExpressionStatement	numParents	721:10:16411:16421	167139	21	True				
ANR	167443	Identifier	numParents		167139	0					
ANR	167444	ExpressionStatement	"printf ( ""Schedule: "" )"	724:0:16439:16459	167139	22	True				
ANR	167445	CallExpression	"printf ( ""Schedule: "" )"		167139	0					
ANR	167446	Callee	printf		167139	0					
ANR	167447	Identifier	printf		167139	0					
ANR	167448	ArgumentList	"""Schedule: """		167139	1					
ANR	167449	Argument	"""Schedule: """		167139	0					
ANR	167450	PrimaryExpression	"""Schedule: """		167139	0					
ANR	167451	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		167139	23					
ANR	167452	ForInit	i = 0 ;	725:5:16466:16469	167139	0	True				
ANR	167453	AssignmentExpression	i = 0		167139	0		=			
ANR	167454	Identifier	i		167139	0					
ANR	167455	PrimaryExpression	0		167139	1					
ANR	167456	Condition	i < numNodes	725:10:16471:16480	167139	1	True				
ANR	167457	RelationalExpression	i < numNodes		167139	0		<			
ANR	167458	Identifier	i		167139	0					
ANR	167459	Identifier	numNodes		167139	1					
ANR	167460	PostIncDecOperationExpression	i ++	725:22:16483:16485	167139	2	True				
ANR	167461	Identifier	i		167139	0					
ANR	167462	IncDec	++		167139	1					
ANR	167463	ExpressionStatement	"printf ( ""%d "" , sigma [ i ] )"	726:1:16490:16514	167139	3	True				
ANR	167464	CallExpression	"printf ( ""%d "" , sigma [ i ] )"		167139	0					
ANR	167465	Callee	printf		167139	0					
ANR	167466	Identifier	printf		167139	0					
ANR	167467	ArgumentList	"""%d """		167139	1					
ANR	167468	Argument	"""%d """		167139	0					
ANR	167469	PrimaryExpression	"""%d """		167139	0					
ANR	167470	Argument	sigma [ i ]		167139	1					
ANR	167471	ArrayIndexing	sigma [ i ]		167139	0					
ANR	167472	Identifier	sigma		167139	0					
ANR	167473	Identifier	i		167139	1					
ANR	167474	ExpressionStatement	"printf ( ""\\n"" )"	727:0:16516:16528	167139	24	True				
ANR	167475	CallExpression	"printf ( ""\\n"" )"		167139	0					
ANR	167476	Callee	printf		167139	0					
ANR	167477	Identifier	printf		167139	0					
ANR	167478	ArgumentList	"""\\n"""		167139	1					
ANR	167479	Argument	"""\\n"""		167139	0					
ANR	167480	PrimaryExpression	"""\\n"""		167139	0					
ANR	167481	ReturnStatement	return sigma ;	730:1:16539:16551	167139	25	True				
ANR	167482	Identifier	sigma		167139	0					
ANR	167483	ReturnType	int *		167139	1					
ANR	167484	Identifier	ConstituentLibrary :: getSchedule		167139	2					
ANR	167485	ParameterList	const Dag & g		167139	3					
ANR	167486	Parameter	const Dag & g	646:38:14619:14630	167139	0	True				
ANR	167487	ParameterType	const Dag &		167139	0					
ANR	167488	Identifier	g		167139	1					
ANR	167489	CFGEntryNode	ENTRY		167139		True				
ANR	167490	CFGExitNode	EXIT		167139		True				
ANR	167491	CFGExceptionNode	EXCEPTION		167139		True				
ANR	167492	CFGExceptionNode	EXCEPTION		167139		True				
ANR	167493	CFGExceptionNode	EXCEPTION		167139		True				
ANR	167494	CFGExceptionNode	EXCEPTION		167139		True				
ANR	167495	CFGExceptionNode	EXCEPTION		167139		True				
ANR	167496	Symbol	sked		167139						
ANR	167497	Symbol	g . getNumNodes		167139						
ANR	167498	Symbol	g . getNumArcs		167139						
ANR	167499	Symbol	* numParents		167139						
ANR	167500	Symbol	* g . getArc		167139						
ANR	167501	Symbol	numParents		167139						
ANR	167502	Symbol	g . getArc		167139						
ANR	167503	Symbol	* sigma		167139						
ANR	167504	Symbol	* seq		167139						
ANR	167505	Symbol	maxNode		167139						
ANR	167506	Symbol	maxChildren		167139						
ANR	167507	Symbol	found		167139						
ANR	167508	Symbol	checkW		167139						
ANR	167509	Symbol	checkM		167139						
ANR	167510	Symbol	checkN		167139						
ANR	167511	Symbol	seq		167139						
ANR	167512	Symbol	sigma		167139						
ANR	167513	Symbol	NULL		167139						
ANR	167514	Symbol	checkC		167139						
ANR	167515	Symbol	g		167139						
ANR	167516	Symbol	false		167139						
ANR	167517	Symbol	i		167139						
ANR	167518	Symbol	j		167139						
ANR	167519	Symbol	k		167139						
ANR	167520	Symbol	g . getParentCountVector		167139						
ANR	167521	Symbol	* g		167139						
ANR	167522	Symbol	numNodes		167139						
ANR	167523	Symbol	* i		167139						
ANR	167524	Symbol	true		167139						
ANR	167525	Symbol	* maxNode		167139						
ANR	167526	Function	ConstituentLibrary :: getPriority	749:0:16877:17473							
ANR	167527	FunctionDef	"ConstituentLibrary :: getPriority (const int * eligPlot1 , int nonSink1 , const int * eligPlot2 , int nonSink2)"		167526	0					
ANR	167528	CompoundStatement		751:0:17000:17473	167526	0					
ANR	167529	IdentifierDeclStatement	"int a , b ;"	752:1:17003:17011	167526	0	True				
ANR	167530	IdentifierDecl	a		167526	0					
ANR	167531	IdentifierDeclType	int		167526	0					
ANR	167532	Identifier	a		167526	1					
ANR	167533	IdentifierDecl	b		167526	1					
ANR	167534	IdentifierDeclType	int		167526	0					
ANR	167535	Identifier	b		167526	1					
ANR	167536	IdentifierDeclStatement	"int x , y ;"	753:1:17014:17021	167526	1	True				
ANR	167537	IdentifierDecl	x		167526	0					
ANR	167538	IdentifierDeclType	int		167526	0					
ANR	167539	Identifier	x		167526	1					
ANR	167540	IdentifierDecl	y		167526	1					
ANR	167541	IdentifierDeclType	int		167526	0					
ANR	167542	Identifier	y		167526	1					
ANR	167543	IdentifierDeclStatement	float c = 1.0f ;	755:1:17025:17039	167526	2	True				
ANR	167544	IdentifierDecl	c = 1.0f		167526	0					
ANR	167545	IdentifierDeclType	float		167526	0					
ANR	167546	Identifier	c		167526	1					
ANR	167547	AssignmentExpression	c = 1.0f		167526	2		=			
ANR	167548	Identifier	c		167526	0					
ANR	167549	PrimaryExpression	1.0f		167526	1					
ANR	167550	ForStatement	for ( x = 0 ; x <= nonSink1 ; x ++ )		167526	3					
ANR	167551	ForInit	x = 0 ;	756:6:17047:17050	167526	0	True				
ANR	167552	AssignmentExpression	x = 0		167526	0		=			
ANR	167553	Identifier	x		167526	0					
ANR	167554	PrimaryExpression	0		167526	1					
ANR	167555	Condition	x <= nonSink1	756:11:17052:17062	167526	1	True				
ANR	167556	RelationalExpression	x <= nonSink1		167526	0		<=			
ANR	167557	Identifier	x		167526	0					
ANR	167558	Identifier	nonSink1		167526	1					
ANR	167559	PostIncDecOperationExpression	x ++	756:24:17065:17067	167526	2	True				
ANR	167560	Identifier	x		167526	0					
ANR	167561	IncDec	++		167526	1					
ANR	167562	CompoundStatement		6:30:70:70	167526	3					
ANR	167563	ForStatement	for ( y = 0 ; y <= nonSink2 ; y ++ )		167526	0					
ANR	167564	ForInit	y = 0 ;	757:7:17080:17083	167526	0	True				
ANR	167565	AssignmentExpression	y = 0		167526	0		=			
ANR	167566	Identifier	y		167526	0					
ANR	167567	PrimaryExpression	0		167526	1					
ANR	167568	Condition	y <= nonSink2	757:12:17085:17095	167526	1	True				
ANR	167569	RelationalExpression	y <= nonSink2		167526	0		<=			
ANR	167570	Identifier	y		167526	0					
ANR	167571	Identifier	nonSink2		167526	1					
ANR	167572	PostIncDecOperationExpression	y ++	757:25:17098:17100	167526	2	True				
ANR	167573	Identifier	y		167526	0					
ANR	167574	IncDec	++		167526	1					
ANR	167575	CompoundStatement		7:31:103:103	167526	3					
ANR	167576	ExpressionStatement	"a = min ( x + y , nonSink1 )"	759:3:17110:17131	167526	0	True				
ANR	167577	AssignmentExpression	"a = min ( x + y , nonSink1 )"		167526	0		=			
ANR	167578	Identifier	a		167526	0					
ANR	167579	CallExpression	"min ( x + y , nonSink1 )"		167526	1					
ANR	167580	Callee	min		167526	0					
ANR	167581	Identifier	min		167526	0					
ANR	167582	ArgumentList	x + y		167526	1					
ANR	167583	Argument	x + y		167526	0					
ANR	167584	AdditiveExpression	x + y		167526	0		+			
ANR	167585	Identifier	x		167526	0					
ANR	167586	Identifier	y		167526	1					
ANR	167587	Argument	nonSink1		167526	1					
ANR	167588	Identifier	nonSink1		167526	0					
ANR	167589	ExpressionStatement	b = x + y - a	760:3:17136:17147	167526	1	True				
ANR	167590	AssignmentExpression	b = x + y - a		167526	0		=			
ANR	167591	Identifier	b		167526	0					
ANR	167592	AdditiveExpression	x + y - a		167526	1		+			
ANR	167593	Identifier	x		167526	0					
ANR	167594	AdditiveExpression	y - a		167526	1		-			
ANR	167595	Identifier	y		167526	0					
ANR	167596	Identifier	a		167526	1					
ANR	167597	IfStatement	if ( c * ( eligPlot1 [ x ] + eligPlot2 [ y ] ) > eligPlot1 [ a ] + eligPlot2 [ b ] )		167526	2					
ANR	167598	Condition	c * ( eligPlot1 [ x ] + eligPlot2 [ y ] ) > eligPlot1 [ a ] + eligPlot2 [ b ]	762:7:17157:17219	167526	0	True				
ANR	167599	RelationalExpression	c * ( eligPlot1 [ x ] + eligPlot2 [ y ] ) > eligPlot1 [ a ] + eligPlot2 [ b ]		167526	0		>			
ANR	167600	MultiplicativeExpression	c * ( eligPlot1 [ x ] + eligPlot2 [ y ] )		167526	0		*			
ANR	167601	Identifier	c		167526	0					
ANR	167602	AdditiveExpression	eligPlot1 [ x ] + eligPlot2 [ y ]		167526	1		+			
ANR	167603	ArrayIndexing	eligPlot1 [ x ]		167526	0					
ANR	167604	Identifier	eligPlot1		167526	0					
ANR	167605	Identifier	x		167526	1					
ANR	167606	ArrayIndexing	eligPlot2 [ y ]		167526	1					
ANR	167607	Identifier	eligPlot2		167526	0					
ANR	167608	Identifier	y		167526	1					
ANR	167609	AdditiveExpression	eligPlot1 [ a ] + eligPlot2 [ b ]		167526	1		+			
ANR	167610	ArrayIndexing	eligPlot1 [ a ]		167526	0					
ANR	167611	Identifier	eligPlot1		167526	0					
ANR	167612	Identifier	a		167526	1					
ANR	167613	ArrayIndexing	eligPlot2 [ b ]		167526	1					
ANR	167614	Identifier	eligPlot2		167526	0					
ANR	167615	Identifier	b		167526	1					
ANR	167616	CompoundStatement		12:73:222:222	167526	1					
ANR	167617	ExpressionStatement	c = ( float ) ( eligPlot1 [ a ] + eligPlot2 [ b ] ) / ( float ) ( eligPlot1 [ x ] + eligPlot2 [ y ] )	765:4:17312:17391	167526	0	True				
ANR	167618	AssignmentExpression	c = ( float ) ( eligPlot1 [ a ] + eligPlot2 [ b ] ) / ( float ) ( eligPlot1 [ x ] + eligPlot2 [ y ] )		167526	0		=			
ANR	167619	Identifier	c		167526	0					
ANR	167620	MultiplicativeExpression	( float ) ( eligPlot1 [ a ] + eligPlot2 [ b ] ) / ( float ) ( eligPlot1 [ x ] + eligPlot2 [ y ] )		167526	1		/			
ANR	167621	CastExpression	( float ) ( eligPlot1 [ a ] + eligPlot2 [ b ] )		167526	0					
ANR	167622	CastTarget	float		167526	0					
ANR	167623	AdditiveExpression	eligPlot1 [ a ] + eligPlot2 [ b ]		167526	1		+			
ANR	167624	ArrayIndexing	eligPlot1 [ a ]		167526	0					
ANR	167625	Identifier	eligPlot1		167526	0					
ANR	167626	Identifier	a		167526	1					
ANR	167627	ArrayIndexing	eligPlot2 [ b ]		167526	1					
ANR	167628	Identifier	eligPlot2		167526	0					
ANR	167629	Identifier	b		167526	1					
ANR	167630	CastExpression	( float ) ( eligPlot1 [ x ] + eligPlot2 [ y ] )		167526	1					
ANR	167631	CastTarget	float		167526	0					
ANR	167632	AdditiveExpression	eligPlot1 [ x ] + eligPlot2 [ y ]		167526	1		+			
ANR	167633	ArrayIndexing	eligPlot1 [ x ]		167526	0					
ANR	167634	Identifier	eligPlot1		167526	0					
ANR	167635	Identifier	x		167526	1					
ANR	167636	ArrayIndexing	eligPlot2 [ y ]		167526	1					
ANR	167637	Identifier	eligPlot2		167526	0					
ANR	167638	Identifier	y		167526	1					
ANR	167639	ExpressionStatement		766:4:17397:17397	167526	3	True				
ANR	167640	ExpressionStatement		768:3:17403:17403	167526	1	True				
ANR	167641	ExpressionStatement		769:2:17407:17407	167526	4	True				
ANR	167642	ExpressionStatement	"printf ( ""--priority %f\\n"" , c )"	772:0:17425:17452	167526	5	True				
ANR	167643	CallExpression	"printf ( ""--priority %f\\n"" , c )"		167526	0					
ANR	167644	Callee	printf		167526	0					
ANR	167645	Identifier	printf		167526	0					
ANR	167646	ArgumentList	"""--priority %f\\n"""		167526	1					
ANR	167647	Argument	"""--priority %f\\n"""		167526	0					
ANR	167648	PrimaryExpression	"""--priority %f\\n"""		167526	0					
ANR	167649	Argument	c		167526	1					
ANR	167650	Identifier	c		167526	0					
ANR	167651	ReturnStatement	return c ;	775:1:17463:17471	167526	6	True				
ANR	167652	Identifier	c		167526	0					
ANR	167653	ReturnType	float		167526	1					
ANR	167654	Identifier	ConstituentLibrary :: getPriority		167526	2					
ANR	167655	ParameterList	"const int * eligPlot1 , int nonSink1 , const int * eligPlot2 , int nonSink2"		167526	3					
ANR	167656	Parameter	const int * eligPlot1	749:39:16916:16935	167526	0	True				
ANR	167657	ParameterType	const int *		167526	0					
ANR	167658	Identifier	eligPlot1		167526	1					
ANR	167659	Parameter	int nonSink1	749:61:16938:16949	167526	1	True				
ANR	167660	ParameterType	int		167526	0					
ANR	167661	Identifier	nonSink1		167526	1					
ANR	167662	Parameter	const int * eligPlot2	750:10:16963:16982	167526	2	True				
ANR	167663	ParameterType	const int *		167526	0					
ANR	167664	Identifier	eligPlot2		167526	1					
ANR	167665	Parameter	int nonSink2	750:32:16985:16996	167526	3	True				
ANR	167666	ParameterType	int		167526	0					
ANR	167667	Identifier	nonSink2		167526	1					
ANR	167668	CFGEntryNode	ENTRY		167526		True				
ANR	167669	CFGExitNode	EXIT		167526		True				
ANR	167670	Symbol	eligPlot1		167526						
ANR	167671	Symbol	a		167526						
ANR	167672	Symbol	b		167526						
ANR	167673	Symbol	* x		167526						
ANR	167674	Symbol	c		167526						
ANR	167675	Symbol	* y		167526						
ANR	167676	Symbol	eligPlot2		167526						
ANR	167677	Symbol	* eligPlot1		167526						
ANR	167678	Symbol	* a		167526						
ANR	167679	Symbol	* eligPlot2		167526						
ANR	167680	Symbol	* b		167526						
ANR	167681	Symbol	min		167526						
ANR	167682	Symbol	x		167526						
ANR	167683	Symbol	y		167526						
ANR	167684	Symbol	nonSink1		167526						
ANR	167685	Symbol	nonSink2		167526						
ANR	167686	Function	ConstituentLibrary_test_checkN	792:0:17627:18380							
ANR	167687	FunctionDef	ConstituentLibrary_test_checkN ()		167686	0					
ANR	167688	CompoundStatement		793:0:17669:18380	167686	0					
ANR	167689	IdentifierDeclStatement	ConstituentLibrary lib ;	794:1:17672:17694	167686	0	True				
ANR	167690	IdentifierDecl	lib		167686	0					
ANR	167691	IdentifierDeclType	ConstituentLibrary		167686	0					
ANR	167692	Identifier	lib		167686	1					
ANR	167693	CompoundStatement		8:2:144:169	167686	1					
ANR	167694	ExpressionStatement	"printf ( ""*** file checkN.dag should be an N-dag\\n"" )"	797:2:17702:17752	167686	0	True				
ANR	167695	CallExpression	"printf ( ""*** file checkN.dag should be an N-dag\\n"" )"		167686	0					
ANR	167696	Callee	printf		167686	0					
ANR	167697	Identifier	printf		167686	0					
ANR	167698	ArgumentList	"""*** file checkN.dag should be an N-dag\\n"""		167686	1					
ANR	167699	Argument	"""*** file checkN.dag should be an N-dag\\n"""		167686	0					
ANR	167700	PrimaryExpression	"""*** file checkN.dag should be an N-dag\\n"""		167686	0					
ANR	167701	IdentifierDeclStatement	"DagmanDag g ( ""checkN.dag"" ) ;"	798:2:17756:17781	167686	1	True				
ANR	167702	IdentifierDecl	"g ( ""checkN.dag"" )"		167686	0					
ANR	167703	IdentifierDeclType	DagmanDag		167686	0					
ANR	167704	Identifier	g		167686	1					
ANR	167705	PrimaryExpression	"""checkN.dag"""		167686	2					
ANR	167706	ExpressionStatement	"g . saveAsDot ( ""checkN.dot"" )"	799:2:17785:17810	167686	2	True				
ANR	167707	CallExpression	"g . saveAsDot ( ""checkN.dot"" )"		167686	0					
ANR	167708	Callee	g . saveAsDot		167686	0					
ANR	167709	MemberAccess	g . saveAsDot		167686	0					
ANR	167710	Identifier	g		167686	0					
ANR	167711	Identifier	saveAsDot		167686	1					
ANR	167712	ArgumentList	"""checkN.dot"""		167686	1					
ANR	167713	Argument	"""checkN.dot"""		167686	0					
ANR	167714	PrimaryExpression	"""checkN.dot"""		167686	0					
ANR	167715	IdentifierDeclStatement	int * sked = lib . checkN ( g ) ;	800:2:17814:17839	167686	3	True				
ANR	167716	IdentifierDecl	* sked = lib . checkN ( g )		167686	0					
ANR	167717	IdentifierDeclType	int *		167686	0					
ANR	167718	Identifier	sked		167686	1					
ANR	167719	AssignmentExpression	* sked = lib . checkN ( g )		167686	2		=			
ANR	167720	Identifier	sked		167686	0					
ANR	167721	CallExpression	lib . checkN ( g )		167686	1					
ANR	167722	Callee	lib . checkN		167686	0					
ANR	167723	MemberAccess	lib . checkN		167686	0					
ANR	167724	Identifier	lib		167686	0					
ANR	167725	Identifier	checkN		167686	1					
ANR	167726	ArgumentList	g		167686	1					
ANR	167727	Argument	g		167686	0					
ANR	167728	Identifier	g		167686	0					
ANR	167729	IfStatement	if ( sked )		167686	4					
ANR	167730	Condition	sked	801:6:17847:17850	167686	0	True				
ANR	167731	Identifier	sked		167686	0					
ANR	167732	CompoundStatement		9:13:184:184	167686	1					
ANR	167733	ExpressionStatement	"printf ( ""an N-dag, schedule is:\\n"" )"	802:3:17859:17893	167686	0	True				
ANR	167734	CallExpression	"printf ( ""an N-dag, schedule is:\\n"" )"		167686	0					
ANR	167735	Callee	printf		167686	0					
ANR	167736	Identifier	printf		167686	0					
ANR	167737	ArgumentList	"""an N-dag, schedule is:\\n"""		167686	1					
ANR	167738	Argument	"""an N-dag, schedule is:\\n"""		167686	0					
ANR	167739	PrimaryExpression	"""an N-dag, schedule is:\\n"""		167686	0					
ANR	167740	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		167686	1					
ANR	167741	ForInit	int i = 0 ;	803:8:17903:17910	167686	0	True				
ANR	167742	IdentifierDeclStatement	int i = 0 ;		167686	0					
ANR	167743	IdentifierDecl	i = 0		167686	0					
ANR	167744	IdentifierDeclType	int		167686	0					
ANR	167745	Identifier	i		167686	1					
ANR	167746	AssignmentExpression	i = 0		167686	2		=			
ANR	167747	Identifier	i		167686	0					
ANR	167748	PrimaryExpression	0		167686	1					
ANR	167749	Condition	i < g . getNumNodes ( )	803:17:17912:17928	167686	1	True				
ANR	167750	RelationalExpression	i < g . getNumNodes ( )		167686	0		<			
ANR	167751	Identifier	i		167686	0					
ANR	167752	CallExpression	g . getNumNodes ( )		167686	1					
ANR	167753	Callee	g . getNumNodes		167686	0					
ANR	167754	MemberAccess	g . getNumNodes		167686	0					
ANR	167755	Identifier	g		167686	0					
ANR	167756	Identifier	getNumNodes		167686	1					
ANR	167757	ArgumentList			167686	1					
ANR	167758	PostIncDecOperationExpression	i ++	803:36:17931:17933	167686	2	True				
ANR	167759	Identifier	i		167686	0					
ANR	167760	IncDec	++		167686	1					
ANR	167761	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	804:4:17941:17964	167686	3	True				
ANR	167762	CallExpression	"printf ( ""%d "" , sked [ i ] )"		167686	0					
ANR	167763	Callee	printf		167686	0					
ANR	167764	Identifier	printf		167686	0					
ANR	167765	ArgumentList	"""%d """		167686	1					
ANR	167766	Argument	"""%d """		167686	0					
ANR	167767	PrimaryExpression	"""%d """		167686	0					
ANR	167768	Argument	sked [ i ]		167686	1					
ANR	167769	ArrayIndexing	sked [ i ]		167686	0					
ANR	167770	Identifier	sked		167686	0					
ANR	167771	Identifier	i		167686	1					
ANR	167772	ExpressionStatement	"printf ( ""\\n"" )"	805:3:17969:17981	167686	2	True				
ANR	167773	CallExpression	"printf ( ""\\n"" )"		167686	0					
ANR	167774	Callee	printf		167686	0					
ANR	167775	Identifier	printf		167686	0					
ANR	167776	ArgumentList	"""\\n"""		167686	1					
ANR	167777	Argument	"""\\n"""		167686	0					
ANR	167778	PrimaryExpression	"""\\n"""		167686	0					
ANR	167779	ElseStatement	else		167686	0					
ANR	167780	CompoundStatement		15:7:324:324	167686	0					
ANR	167781	ExpressionStatement	"printf ( ""not an N-dag\\n"" )"	808:3:17999:18023	167686	0	True				
ANR	167782	CallExpression	"printf ( ""not an N-dag\\n"" )"		167686	0					
ANR	167783	Callee	printf		167686	0					
ANR	167784	Identifier	printf		167686	0					
ANR	167785	ArgumentList	"""not an N-dag\\n"""		167686	1					
ANR	167786	Argument	"""not an N-dag\\n"""		167686	0					
ANR	167787	PrimaryExpression	"""not an N-dag\\n"""		167686	0					
ANR	167788	ExpressionStatement		809:3:18028:18028	167686	5	True				
ANR	167789	CompoundStatement		24:2:491:516	167686	2					
ANR	167790	ExpressionStatement	"printf ( ""*** file checkN_2.dag should NOT be an N-dag\\n"" )"	813:2:18039:18095	167686	0	True				
ANR	167791	CallExpression	"printf ( ""*** file checkN_2.dag should NOT be an N-dag\\n"" )"		167686	0					
ANR	167792	Callee	printf		167686	0					
ANR	167793	Identifier	printf		167686	0					
ANR	167794	ArgumentList	"""*** file checkN_2.dag should NOT be an N-dag\\n"""		167686	1					
ANR	167795	Argument	"""*** file checkN_2.dag should NOT be an N-dag\\n"""		167686	0					
ANR	167796	PrimaryExpression	"""*** file checkN_2.dag should NOT be an N-dag\\n"""		167686	0					
ANR	167797	IdentifierDeclStatement	"DagmanDag g ( ""checkN_2.dag"" ) ;"	814:2:18099:18126	167686	1	True				
ANR	167798	IdentifierDecl	"g ( ""checkN_2.dag"" )"		167686	0					
ANR	167799	IdentifierDeclType	DagmanDag		167686	0					
ANR	167800	Identifier	g		167686	1					
ANR	167801	PrimaryExpression	"""checkN_2.dag"""		167686	2					
ANR	167802	ExpressionStatement	"g . saveAsDot ( ""checkN_2.dot"" )"	815:2:18130:18157	167686	2	True				
ANR	167803	CallExpression	"g . saveAsDot ( ""checkN_2.dot"" )"		167686	0					
ANR	167804	Callee	g . saveAsDot		167686	0					
ANR	167805	MemberAccess	g . saveAsDot		167686	0					
ANR	167806	Identifier	g		167686	0					
ANR	167807	Identifier	saveAsDot		167686	1					
ANR	167808	ArgumentList	"""checkN_2.dot"""		167686	1					
ANR	167809	Argument	"""checkN_2.dot"""		167686	0					
ANR	167810	PrimaryExpression	"""checkN_2.dot"""		167686	0					
ANR	167811	IdentifierDeclStatement	int * sked = lib . checkN ( g ) ;	816:2:18161:18186	167686	3	True				
ANR	167812	IdentifierDecl	* sked = lib . checkN ( g )		167686	0					
ANR	167813	IdentifierDeclType	int *		167686	0					
ANR	167814	Identifier	sked		167686	1					
ANR	167815	AssignmentExpression	* sked = lib . checkN ( g )		167686	2		=			
ANR	167816	Identifier	sked		167686	0					
ANR	167817	CallExpression	lib . checkN ( g )		167686	1					
ANR	167818	Callee	lib . checkN		167686	0					
ANR	167819	MemberAccess	lib . checkN		167686	0					
ANR	167820	Identifier	lib		167686	0					
ANR	167821	Identifier	checkN		167686	1					
ANR	167822	ArgumentList	g		167686	1					
ANR	167823	Argument	g		167686	0					
ANR	167824	Identifier	g		167686	0					
ANR	167825	IfStatement	if ( sked )		167686	4					
ANR	167826	Condition	sked	817:6:18194:18197	167686	0	True				
ANR	167827	Identifier	sked		167686	0					
ANR	167828	CompoundStatement		25:13:531:531	167686	1					
ANR	167829	ExpressionStatement	"printf ( ""an N-dag, schedule is:\\n"" )"	818:3:18206:18240	167686	0	True				
ANR	167830	CallExpression	"printf ( ""an N-dag, schedule is:\\n"" )"		167686	0					
ANR	167831	Callee	printf		167686	0					
ANR	167832	Identifier	printf		167686	0					
ANR	167833	ArgumentList	"""an N-dag, schedule is:\\n"""		167686	1					
ANR	167834	Argument	"""an N-dag, schedule is:\\n"""		167686	0					
ANR	167835	PrimaryExpression	"""an N-dag, schedule is:\\n"""		167686	0					
ANR	167836	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		167686	1					
ANR	167837	ForInit	int i = 0 ;	819:8:18250:18257	167686	0	True				
ANR	167838	IdentifierDeclStatement	int i = 0 ;		167686	0					
ANR	167839	IdentifierDecl	i = 0		167686	0					
ANR	167840	IdentifierDeclType	int		167686	0					
ANR	167841	Identifier	i		167686	1					
ANR	167842	AssignmentExpression	i = 0		167686	2		=			
ANR	167843	Identifier	i		167686	0					
ANR	167844	PrimaryExpression	0		167686	1					
ANR	167845	Condition	i < g . getNumNodes ( )	819:17:18259:18275	167686	1	True				
ANR	167846	RelationalExpression	i < g . getNumNodes ( )		167686	0		<			
ANR	167847	Identifier	i		167686	0					
ANR	167848	CallExpression	g . getNumNodes ( )		167686	1					
ANR	167849	Callee	g . getNumNodes		167686	0					
ANR	167850	MemberAccess	g . getNumNodes		167686	0					
ANR	167851	Identifier	g		167686	0					
ANR	167852	Identifier	getNumNodes		167686	1					
ANR	167853	ArgumentList			167686	1					
ANR	167854	PostIncDecOperationExpression	i ++	819:36:18278:18280	167686	2	True				
ANR	167855	Identifier	i		167686	0					
ANR	167856	IncDec	++		167686	1					
ANR	167857	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	820:4:18288:18311	167686	3	True				
ANR	167858	CallExpression	"printf ( ""%d "" , sked [ i ] )"		167686	0					
ANR	167859	Callee	printf		167686	0					
ANR	167860	Identifier	printf		167686	0					
ANR	167861	ArgumentList	"""%d """		167686	1					
ANR	167862	Argument	"""%d """		167686	0					
ANR	167863	PrimaryExpression	"""%d """		167686	0					
ANR	167864	Argument	sked [ i ]		167686	1					
ANR	167865	ArrayIndexing	sked [ i ]		167686	0					
ANR	167866	Identifier	sked		167686	0					
ANR	167867	Identifier	i		167686	1					
ANR	167868	ExpressionStatement	"printf ( ""\\n"" )"	821:3:18316:18328	167686	2	True				
ANR	167869	CallExpression	"printf ( ""\\n"" )"		167686	0					
ANR	167870	Callee	printf		167686	0					
ANR	167871	Identifier	printf		167686	0					
ANR	167872	ArgumentList	"""\\n"""		167686	1					
ANR	167873	Argument	"""\\n"""		167686	0					
ANR	167874	PrimaryExpression	"""\\n"""		167686	0					
ANR	167875	ElseStatement	else		167686	0					
ANR	167876	CompoundStatement		31:7:671:671	167686	0					
ANR	167877	ExpressionStatement	"printf ( ""not an N-dag\\n"" )"	824:3:18346:18370	167686	0	True				
ANR	167878	CallExpression	"printf ( ""not an N-dag\\n"" )"		167686	0					
ANR	167879	Callee	printf		167686	0					
ANR	167880	Identifier	printf		167686	0					
ANR	167881	ArgumentList	"""not an N-dag\\n"""		167686	1					
ANR	167882	Argument	"""not an N-dag\\n"""		167686	0					
ANR	167883	PrimaryExpression	"""not an N-dag\\n"""		167686	0					
ANR	167884	ExpressionStatement		825:3:18375:18375	167686	5	True				
ANR	167885	ReturnType	void		167686	1					
ANR	167886	Identifier	ConstituentLibrary_test_checkN		167686	2					
ANR	167887	ParameterList			167686	3					
ANR	167888	CFGEntryNode	ENTRY		167686		True				
ANR	167889	CFGExitNode	EXIT		167686		True				
ANR	167890	Symbol	sked		167686						
ANR	167891	Symbol	g . getNumNodes		167686						
ANR	167892	Symbol	lib . checkN		167686						
ANR	167893	Symbol	* i		167686						
ANR	167894	Symbol	lib		167686						
ANR	167895	Symbol	g		167686						
ANR	167896	Symbol	i		167686						
ANR	167897	Symbol	* sked		167686						
ANR	167898	Function	ConstituentLibrary_test_checkC	843:0:18533:18917							
ANR	167899	FunctionDef	ConstituentLibrary_test_checkC ()		167898	0					
ANR	167900	CompoundStatement		844:0:18575:18917	167898	0					
ANR	167901	ExpressionStatement	"printf ( ""*** file checkC.dag should be a C-dag\\n"" )"	845:1:18578:18627	167898	0	True				
ANR	167902	CallExpression	"printf ( ""*** file checkC.dag should be a C-dag\\n"" )"		167898	0					
ANR	167903	Callee	printf		167898	0					
ANR	167904	Identifier	printf		167898	0					
ANR	167905	ArgumentList	"""*** file checkC.dag should be a C-dag\\n"""		167898	1					
ANR	167906	Argument	"""*** file checkC.dag should be a C-dag\\n"""		167898	0					
ANR	167907	PrimaryExpression	"""*** file checkC.dag should be a C-dag\\n"""		167898	0					
ANR	167908	IdentifierDeclStatement	"DagmanDag g ( ""checkC.dag"" ) ;"	846:1:18630:18655	167898	1	True				
ANR	167909	IdentifierDecl	"g ( ""checkC.dag"" )"		167898	0					
ANR	167910	IdentifierDeclType	DagmanDag		167898	0					
ANR	167911	Identifier	g		167898	1					
ANR	167912	PrimaryExpression	"""checkC.dag"""		167898	2					
ANR	167913	ExpressionStatement	"g . saveAsDot ( ""checkC.dot"" )"	847:1:18658:18683	167898	2	True				
ANR	167914	CallExpression	"g . saveAsDot ( ""checkC.dot"" )"		167898	0					
ANR	167915	Callee	g . saveAsDot		167898	0					
ANR	167916	MemberAccess	g . saveAsDot		167898	0					
ANR	167917	Identifier	g		167898	0					
ANR	167918	Identifier	saveAsDot		167898	1					
ANR	167919	ArgumentList	"""checkC.dot"""		167898	1					
ANR	167920	Argument	"""checkC.dot"""		167898	0					
ANR	167921	PrimaryExpression	"""checkC.dot"""		167898	0					
ANR	167922	IdentifierDeclStatement	ConstituentLibrary lib ;	848:1:18686:18708	167898	3	True				
ANR	167923	IdentifierDecl	lib		167898	0					
ANR	167924	IdentifierDeclType	ConstituentLibrary		167898	0					
ANR	167925	Identifier	lib		167898	1					
ANR	167926	IdentifierDeclStatement	int * sked = lib . checkC ( g ) ;	849:1:18711:18736	167898	4	True				
ANR	167927	IdentifierDecl	* sked = lib . checkC ( g )		167898	0					
ANR	167928	IdentifierDeclType	int *		167898	0					
ANR	167929	Identifier	sked		167898	1					
ANR	167930	AssignmentExpression	* sked = lib . checkC ( g )		167898	2		=			
ANR	167931	Identifier	sked		167898	0					
ANR	167932	CallExpression	lib . checkC ( g )		167898	1					
ANR	167933	Callee	lib . checkC		167898	0					
ANR	167934	MemberAccess	lib . checkC		167898	0					
ANR	167935	Identifier	lib		167898	0					
ANR	167936	Identifier	checkC		167898	1					
ANR	167937	ArgumentList	g		167898	1					
ANR	167938	Argument	g		167898	0					
ANR	167939	Identifier	g		167898	0					
ANR	167940	IfStatement	if ( sked )		167898	5					
ANR	167941	Condition	sked	850:5:18743:18746	167898	0	True				
ANR	167942	Identifier	sked		167898	0					
ANR	167943	CompoundStatement		7:12:174:174	167898	1					
ANR	167944	ExpressionStatement	"printf ( ""a C-dag, schedule is:\\n"" )"	851:2:18754:18787	167898	0	True				
ANR	167945	CallExpression	"printf ( ""a C-dag, schedule is:\\n"" )"		167898	0					
ANR	167946	Callee	printf		167898	0					
ANR	167947	Identifier	printf		167898	0					
ANR	167948	ArgumentList	"""a C-dag, schedule is:\\n"""		167898	1					
ANR	167949	Argument	"""a C-dag, schedule is:\\n"""		167898	0					
ANR	167950	PrimaryExpression	"""a C-dag, schedule is:\\n"""		167898	0					
ANR	167951	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		167898	1					
ANR	167952	ForInit	int i = 0 ;	852:7:18796:18803	167898	0	True				
ANR	167953	IdentifierDeclStatement	int i = 0 ;		167898	0					
ANR	167954	IdentifierDecl	i = 0		167898	0					
ANR	167955	IdentifierDeclType	int		167898	0					
ANR	167956	Identifier	i		167898	1					
ANR	167957	AssignmentExpression	i = 0		167898	2		=			
ANR	167958	Identifier	i		167898	0					
ANR	167959	PrimaryExpression	0		167898	1					
ANR	167960	Condition	i < g . getNumNodes ( )	852:16:18805:18821	167898	1	True				
ANR	167961	RelationalExpression	i < g . getNumNodes ( )		167898	0		<			
ANR	167962	Identifier	i		167898	0					
ANR	167963	CallExpression	g . getNumNodes ( )		167898	1					
ANR	167964	Callee	g . getNumNodes		167898	0					
ANR	167965	MemberAccess	g . getNumNodes		167898	0					
ANR	167966	Identifier	g		167898	0					
ANR	167967	Identifier	getNumNodes		167898	1					
ANR	167968	ArgumentList			167898	1					
ANR	167969	PostIncDecOperationExpression	i ++	852:35:18824:18826	167898	2	True				
ANR	167970	Identifier	i		167898	0					
ANR	167971	IncDec	++		167898	1					
ANR	167972	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	853:3:18833:18856	167898	3	True				
ANR	167973	CallExpression	"printf ( ""%d "" , sked [ i ] )"		167898	0					
ANR	167974	Callee	printf		167898	0					
ANR	167975	Identifier	printf		167898	0					
ANR	167976	ArgumentList	"""%d """		167898	1					
ANR	167977	Argument	"""%d """		167898	0					
ANR	167978	PrimaryExpression	"""%d """		167898	0					
ANR	167979	Argument	sked [ i ]		167898	1					
ANR	167980	ArrayIndexing	sked [ i ]		167898	0					
ANR	167981	Identifier	sked		167898	0					
ANR	167982	Identifier	i		167898	1					
ANR	167983	ExpressionStatement	"printf ( ""\\n"" )"	854:2:18860:18872	167898	2	True				
ANR	167984	CallExpression	"printf ( ""\\n"" )"		167898	0					
ANR	167985	Callee	printf		167898	0					
ANR	167986	Identifier	printf		167898	0					
ANR	167987	ArgumentList	"""\\n"""		167898	1					
ANR	167988	Argument	"""\\n"""		167898	0					
ANR	167989	PrimaryExpression	"""\\n"""		167898	0					
ANR	167990	ElseStatement	else		167898	0					
ANR	167991	CompoundStatement		13:6:307:307	167898	0					
ANR	167992	ExpressionStatement	"printf ( ""not an C-dag\\n"" )"	857:2:18887:18911	167898	0	True				
ANR	167993	CallExpression	"printf ( ""not an C-dag\\n"" )"		167898	0					
ANR	167994	Callee	printf		167898	0					
ANR	167995	Identifier	printf		167898	0					
ANR	167996	ArgumentList	"""not an C-dag\\n"""		167898	1					
ANR	167997	Argument	"""not an C-dag\\n"""		167898	0					
ANR	167998	PrimaryExpression	"""not an C-dag\\n"""		167898	0					
ANR	167999	ExpressionStatement		858:2:18915:18915	167898	6	True				
ANR	168000	ReturnType	void		167898	1					
ANR	168001	Identifier	ConstituentLibrary_test_checkC		167898	2					
ANR	168002	ParameterList			167898	3					
ANR	168003	CFGEntryNode	ENTRY		167898		True				
ANR	168004	CFGExitNode	EXIT		167898		True				
ANR	168005	Symbol	sked		167898						
ANR	168006	Symbol	g . getNumNodes		167898						
ANR	168007	Symbol	* i		167898						
ANR	168008	Symbol	lib		167898						
ANR	168009	Symbol	g		167898						
ANR	168010	Symbol	lib . checkC		167898						
ANR	168011	Symbol	i		167898						
ANR	168012	Symbol	* sked		167898						
ANR	168013	Function	ConstituentLibrary_test_checkW	875:0:19070:19827							
ANR	168014	FunctionDef	ConstituentLibrary_test_checkW ()		168013	0					
ANR	168015	CompoundStatement		876:0:19112:19827	168013	0					
ANR	168016	CompoundStatement		7:2:143:168	168013	0					
ANR	168017	ExpressionStatement	"printf ( ""*** file checkW.dag should be a W-dag\\n"" )"	878:2:19119:19168	168013	0	True				
ANR	168018	CallExpression	"printf ( ""*** file checkW.dag should be a W-dag\\n"" )"		168013	0					
ANR	168019	Callee	printf		168013	0					
ANR	168020	Identifier	printf		168013	0					
ANR	168021	ArgumentList	"""*** file checkW.dag should be a W-dag\\n"""		168013	1					
ANR	168022	Argument	"""*** file checkW.dag should be a W-dag\\n"""		168013	0					
ANR	168023	PrimaryExpression	"""*** file checkW.dag should be a W-dag\\n"""		168013	0					
ANR	168024	IdentifierDeclStatement	"DagmanDag g ( ""checkW.dag"" ) ;"	879:2:19172:19197	168013	1	True				
ANR	168025	IdentifierDecl	"g ( ""checkW.dag"" )"		168013	0					
ANR	168026	IdentifierDeclType	DagmanDag		168013	0					
ANR	168027	Identifier	g		168013	1					
ANR	168028	PrimaryExpression	"""checkW.dag"""		168013	2					
ANR	168029	ExpressionStatement	"g . saveAsDot ( ""checkW.dot"" )"	880:2:19201:19226	168013	2	True				
ANR	168030	CallExpression	"g . saveAsDot ( ""checkW.dot"" )"		168013	0					
ANR	168031	Callee	g . saveAsDot		168013	0					
ANR	168032	MemberAccess	g . saveAsDot		168013	0					
ANR	168033	Identifier	g		168013	0					
ANR	168034	Identifier	saveAsDot		168013	1					
ANR	168035	ArgumentList	"""checkW.dot"""		168013	1					
ANR	168036	Argument	"""checkW.dot"""		168013	0					
ANR	168037	PrimaryExpression	"""checkW.dot"""		168013	0					
ANR	168038	IdentifierDeclStatement	ConstituentLibrary lib ;	881:2:19230:19252	168013	3	True				
ANR	168039	IdentifierDecl	lib		168013	0					
ANR	168040	IdentifierDeclType	ConstituentLibrary		168013	0					
ANR	168041	Identifier	lib		168013	1					
ANR	168042	IdentifierDeclStatement	int * sked = lib . checkW ( g ) ;	882:2:19256:19281	168013	4	True				
ANR	168043	IdentifierDecl	* sked = lib . checkW ( g )		168013	0					
ANR	168044	IdentifierDeclType	int *		168013	0					
ANR	168045	Identifier	sked		168013	1					
ANR	168046	AssignmentExpression	* sked = lib . checkW ( g )		168013	2		=			
ANR	168047	Identifier	sked		168013	0					
ANR	168048	CallExpression	lib . checkW ( g )		168013	1					
ANR	168049	Callee	lib . checkW		168013	0					
ANR	168050	MemberAccess	lib . checkW		168013	0					
ANR	168051	Identifier	lib		168013	0					
ANR	168052	Identifier	checkW		168013	1					
ANR	168053	ArgumentList	g		168013	1					
ANR	168054	Argument	g		168013	0					
ANR	168055	Identifier	g		168013	0					
ANR	168056	IfStatement	if ( sked )		168013	5					
ANR	168057	Condition	sked	883:6:19289:19292	168013	0	True				
ANR	168058	Identifier	sked		168013	0					
ANR	168059	CompoundStatement		8:13:183:183	168013	1					
ANR	168060	ExpressionStatement	"printf ( ""schedule is:\\n"" )"	884:3:19301:19325	168013	0	True				
ANR	168061	CallExpression	"printf ( ""schedule is:\\n"" )"		168013	0					
ANR	168062	Callee	printf		168013	0					
ANR	168063	Identifier	printf		168013	0					
ANR	168064	ArgumentList	"""schedule is:\\n"""		168013	1					
ANR	168065	Argument	"""schedule is:\\n"""		168013	0					
ANR	168066	PrimaryExpression	"""schedule is:\\n"""		168013	0					
ANR	168067	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		168013	1					
ANR	168068	ForInit	int i = 0 ;	885:8:19335:19342	168013	0	True				
ANR	168069	IdentifierDeclStatement	int i = 0 ;		168013	0					
ANR	168070	IdentifierDecl	i = 0		168013	0					
ANR	168071	IdentifierDeclType	int		168013	0					
ANR	168072	Identifier	i		168013	1					
ANR	168073	AssignmentExpression	i = 0		168013	2		=			
ANR	168074	Identifier	i		168013	0					
ANR	168075	PrimaryExpression	0		168013	1					
ANR	168076	Condition	i < g . getNumNodes ( )	885:17:19344:19360	168013	1	True				
ANR	168077	RelationalExpression	i < g . getNumNodes ( )		168013	0		<			
ANR	168078	Identifier	i		168013	0					
ANR	168079	CallExpression	g . getNumNodes ( )		168013	1					
ANR	168080	Callee	g . getNumNodes		168013	0					
ANR	168081	MemberAccess	g . getNumNodes		168013	0					
ANR	168082	Identifier	g		168013	0					
ANR	168083	Identifier	getNumNodes		168013	1					
ANR	168084	ArgumentList			168013	1					
ANR	168085	PostIncDecOperationExpression	i ++	885:36:19363:19365	168013	2	True				
ANR	168086	Identifier	i		168013	0					
ANR	168087	IncDec	++		168013	1					
ANR	168088	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	886:4:19373:19396	168013	3	True				
ANR	168089	CallExpression	"printf ( ""%d "" , sked [ i ] )"		168013	0					
ANR	168090	Callee	printf		168013	0					
ANR	168091	Identifier	printf		168013	0					
ANR	168092	ArgumentList	"""%d """		168013	1					
ANR	168093	Argument	"""%d """		168013	0					
ANR	168094	PrimaryExpression	"""%d """		168013	0					
ANR	168095	Argument	sked [ i ]		168013	1					
ANR	168096	ArrayIndexing	sked [ i ]		168013	0					
ANR	168097	Identifier	sked		168013	0					
ANR	168098	Identifier	i		168013	1					
ANR	168099	ExpressionStatement	"printf ( ""\\n"" )"	887:3:19401:19413	168013	2	True				
ANR	168100	CallExpression	"printf ( ""\\n"" )"		168013	0					
ANR	168101	Callee	printf		168013	0					
ANR	168102	Identifier	printf		168013	0					
ANR	168103	ArgumentList	"""\\n"""		168013	1					
ANR	168104	Argument	"""\\n"""		168013	0					
ANR	168105	PrimaryExpression	"""\\n"""		168013	0					
ANR	168106	ElseStatement	else		168013	0					
ANR	168107	CompoundStatement		14:7:313:313	168013	0					
ANR	168108	ExpressionStatement	"printf ( ""not a W-dag\\n"" )"	890:3:19431:19454	168013	0	True				
ANR	168109	CallExpression	"printf ( ""not a W-dag\\n"" )"		168013	0					
ANR	168110	Callee	printf		168013	0					
ANR	168111	Identifier	printf		168013	0					
ANR	168112	ArgumentList	"""not a W-dag\\n"""		168013	1					
ANR	168113	Argument	"""not a W-dag\\n"""		168013	0					
ANR	168114	PrimaryExpression	"""not a W-dag\\n"""		168013	0					
ANR	168115	ExpressionStatement		891:3:19459:19459	168013	6	True				
ANR	168116	ExpressionStatement		892:2:19463:19463	168013	1	True				
ANR	168117	CompoundStatement		24:2:505:530	168013	2					
ANR	168118	ExpressionStatement	"printf ( ""*** file checkW_2.dag should NOT be a W-dag\\n"" )"	895:2:19471:19526	168013	0	True				
ANR	168119	CallExpression	"printf ( ""*** file checkW_2.dag should NOT be a W-dag\\n"" )"		168013	0					
ANR	168120	Callee	printf		168013	0					
ANR	168121	Identifier	printf		168013	0					
ANR	168122	ArgumentList	"""*** file checkW_2.dag should NOT be a W-dag\\n"""		168013	1					
ANR	168123	Argument	"""*** file checkW_2.dag should NOT be a W-dag\\n"""		168013	0					
ANR	168124	PrimaryExpression	"""*** file checkW_2.dag should NOT be a W-dag\\n"""		168013	0					
ANR	168125	IdentifierDeclStatement	"DagmanDag g ( ""checkW_2.dag"" ) ;"	896:2:19530:19557	168013	1	True				
ANR	168126	IdentifierDecl	"g ( ""checkW_2.dag"" )"		168013	0					
ANR	168127	IdentifierDeclType	DagmanDag		168013	0					
ANR	168128	Identifier	g		168013	1					
ANR	168129	PrimaryExpression	"""checkW_2.dag"""		168013	2					
ANR	168130	ExpressionStatement	"g . saveAsDot ( ""checkW_2.dot"" )"	897:2:19561:19588	168013	2	True				
ANR	168131	CallExpression	"g . saveAsDot ( ""checkW_2.dot"" )"		168013	0					
ANR	168132	Callee	g . saveAsDot		168013	0					
ANR	168133	MemberAccess	g . saveAsDot		168013	0					
ANR	168134	Identifier	g		168013	0					
ANR	168135	Identifier	saveAsDot		168013	1					
ANR	168136	ArgumentList	"""checkW_2.dot"""		168013	1					
ANR	168137	Argument	"""checkW_2.dot"""		168013	0					
ANR	168138	PrimaryExpression	"""checkW_2.dot"""		168013	0					
ANR	168139	IdentifierDeclStatement	ConstituentLibrary lib ;	898:2:19592:19614	168013	3	True				
ANR	168140	IdentifierDecl	lib		168013	0					
ANR	168141	IdentifierDeclType	ConstituentLibrary		168013	0					
ANR	168142	Identifier	lib		168013	1					
ANR	168143	IdentifierDeclStatement	int * sked = lib . checkW ( g ) ;	899:2:19618:19643	168013	4	True				
ANR	168144	IdentifierDecl	* sked = lib . checkW ( g )		168013	0					
ANR	168145	IdentifierDeclType	int *		168013	0					
ANR	168146	Identifier	sked		168013	1					
ANR	168147	AssignmentExpression	* sked = lib . checkW ( g )		168013	2		=			
ANR	168148	Identifier	sked		168013	0					
ANR	168149	CallExpression	lib . checkW ( g )		168013	1					
ANR	168150	Callee	lib . checkW		168013	0					
ANR	168151	MemberAccess	lib . checkW		168013	0					
ANR	168152	Identifier	lib		168013	0					
ANR	168153	Identifier	checkW		168013	1					
ANR	168154	ArgumentList	g		168013	1					
ANR	168155	Argument	g		168013	0					
ANR	168156	Identifier	g		168013	0					
ANR	168157	IfStatement	if ( sked )		168013	5					
ANR	168158	Condition	sked	900:6:19651:19654	168013	0	True				
ANR	168159	Identifier	sked		168013	0					
ANR	168160	CompoundStatement		25:13:545:545	168013	1					
ANR	168161	ExpressionStatement	"printf ( ""schedule is:\\n"" )"	901:3:19663:19687	168013	0	True				
ANR	168162	CallExpression	"printf ( ""schedule is:\\n"" )"		168013	0					
ANR	168163	Callee	printf		168013	0					
ANR	168164	Identifier	printf		168013	0					
ANR	168165	ArgumentList	"""schedule is:\\n"""		168013	1					
ANR	168166	Argument	"""schedule is:\\n"""		168013	0					
ANR	168167	PrimaryExpression	"""schedule is:\\n"""		168013	0					
ANR	168168	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		168013	1					
ANR	168169	ForInit	int i = 0 ;	902:8:19697:19704	168013	0	True				
ANR	168170	IdentifierDeclStatement	int i = 0 ;		168013	0					
ANR	168171	IdentifierDecl	i = 0		168013	0					
ANR	168172	IdentifierDeclType	int		168013	0					
ANR	168173	Identifier	i		168013	1					
ANR	168174	AssignmentExpression	i = 0		168013	2		=			
ANR	168175	Identifier	i		168013	0					
ANR	168176	PrimaryExpression	0		168013	1					
ANR	168177	Condition	i < g . getNumNodes ( )	902:17:19706:19722	168013	1	True				
ANR	168178	RelationalExpression	i < g . getNumNodes ( )		168013	0		<			
ANR	168179	Identifier	i		168013	0					
ANR	168180	CallExpression	g . getNumNodes ( )		168013	1					
ANR	168181	Callee	g . getNumNodes		168013	0					
ANR	168182	MemberAccess	g . getNumNodes		168013	0					
ANR	168183	Identifier	g		168013	0					
ANR	168184	Identifier	getNumNodes		168013	1					
ANR	168185	ArgumentList			168013	1					
ANR	168186	PostIncDecOperationExpression	i ++	902:36:19725:19727	168013	2	True				
ANR	168187	Identifier	i		168013	0					
ANR	168188	IncDec	++		168013	1					
ANR	168189	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	903:4:19735:19758	168013	3	True				
ANR	168190	CallExpression	"printf ( ""%d "" , sked [ i ] )"		168013	0					
ANR	168191	Callee	printf		168013	0					
ANR	168192	Identifier	printf		168013	0					
ANR	168193	ArgumentList	"""%d """		168013	1					
ANR	168194	Argument	"""%d """		168013	0					
ANR	168195	PrimaryExpression	"""%d """		168013	0					
ANR	168196	Argument	sked [ i ]		168013	1					
ANR	168197	ArrayIndexing	sked [ i ]		168013	0					
ANR	168198	Identifier	sked		168013	0					
ANR	168199	Identifier	i		168013	1					
ANR	168200	ExpressionStatement	"printf ( ""\\n"" )"	904:3:19763:19775	168013	2	True				
ANR	168201	CallExpression	"printf ( ""\\n"" )"		168013	0					
ANR	168202	Callee	printf		168013	0					
ANR	168203	Identifier	printf		168013	0					
ANR	168204	ArgumentList	"""\\n"""		168013	1					
ANR	168205	Argument	"""\\n"""		168013	0					
ANR	168206	PrimaryExpression	"""\\n"""		168013	0					
ANR	168207	ElseStatement	else		168013	0					
ANR	168208	CompoundStatement		31:7:675:675	168013	0					
ANR	168209	ExpressionStatement	"printf ( ""not a W-dag\\n"" )"	907:3:19793:19816	168013	0	True				
ANR	168210	CallExpression	"printf ( ""not a W-dag\\n"" )"		168013	0					
ANR	168211	Callee	printf		168013	0					
ANR	168212	Identifier	printf		168013	0					
ANR	168213	ArgumentList	"""not a W-dag\\n"""		168013	1					
ANR	168214	Argument	"""not a W-dag\\n"""		168013	0					
ANR	168215	PrimaryExpression	"""not a W-dag\\n"""		168013	0					
ANR	168216	ExpressionStatement		908:3:19821:19821	168013	6	True				
ANR	168217	ExpressionStatement		909:2:19825:19825	168013	3	True				
ANR	168218	ReturnType	void		168013	1					
ANR	168219	Identifier	ConstituentLibrary_test_checkW		168013	2					
ANR	168220	ParameterList			168013	3					
ANR	168221	CFGEntryNode	ENTRY		168013		True				
ANR	168222	CFGExitNode	EXIT		168013		True				
ANR	168223	Symbol	sked		168013						
ANR	168224	Symbol	g . getNumNodes		168013						
ANR	168225	Symbol	* i		168013						
ANR	168226	Symbol	lib		168013						
ANR	168227	Symbol	g		168013						
ANR	168228	Symbol	i		168013						
ANR	168229	Symbol	* sked		168013						
ANR	168230	Symbol	lib . checkW		168013						
ANR	168231	Function	ConstituentLibrary_test_checkM	926:0:19980:20356							
ANR	168232	FunctionDef	ConstituentLibrary_test_checkM ()		168231	0					
ANR	168233	CompoundStatement		927:0:20022:20356	168231	0					
ANR	168234	ExpressionStatement	"printf ( ""*** file checkW.dag should be an M-dag\\n"" )"	928:1:20025:20075	168231	0	True				
ANR	168235	CallExpression	"printf ( ""*** file checkW.dag should be an M-dag\\n"" )"		168231	0					
ANR	168236	Callee	printf		168231	0					
ANR	168237	Identifier	printf		168231	0					
ANR	168238	ArgumentList	"""*** file checkW.dag should be an M-dag\\n"""		168231	1					
ANR	168239	Argument	"""*** file checkW.dag should be an M-dag\\n"""		168231	0					
ANR	168240	PrimaryExpression	"""*** file checkW.dag should be an M-dag\\n"""		168231	0					
ANR	168241	IdentifierDeclStatement	"DagmanDag g ( ""checkM.dag"" ) ;"	929:1:20078:20103	168231	1	True				
ANR	168242	IdentifierDecl	"g ( ""checkM.dag"" )"		168231	0					
ANR	168243	IdentifierDeclType	DagmanDag		168231	0					
ANR	168244	Identifier	g		168231	1					
ANR	168245	PrimaryExpression	"""checkM.dag"""		168231	2					
ANR	168246	ExpressionStatement	"g . saveAsDot ( ""checkM.dot"" )"	930:1:20106:20131	168231	2	True				
ANR	168247	CallExpression	"g . saveAsDot ( ""checkM.dot"" )"		168231	0					
ANR	168248	Callee	g . saveAsDot		168231	0					
ANR	168249	MemberAccess	g . saveAsDot		168231	0					
ANR	168250	Identifier	g		168231	0					
ANR	168251	Identifier	saveAsDot		168231	1					
ANR	168252	ArgumentList	"""checkM.dot"""		168231	1					
ANR	168253	Argument	"""checkM.dot"""		168231	0					
ANR	168254	PrimaryExpression	"""checkM.dot"""		168231	0					
ANR	168255	IdentifierDeclStatement	ConstituentLibrary lib ;	931:1:20134:20156	168231	3	True				
ANR	168256	IdentifierDecl	lib		168231	0					
ANR	168257	IdentifierDeclType	ConstituentLibrary		168231	0					
ANR	168258	Identifier	lib		168231	1					
ANR	168259	IdentifierDeclStatement	int * sked = lib . checkM ( g ) ;	932:1:20159:20184	168231	4	True				
ANR	168260	IdentifierDecl	* sked = lib . checkM ( g )		168231	0					
ANR	168261	IdentifierDeclType	int *		168231	0					
ANR	168262	Identifier	sked		168231	1					
ANR	168263	AssignmentExpression	* sked = lib . checkM ( g )		168231	2		=			
ANR	168264	Identifier	sked		168231	0					
ANR	168265	CallExpression	lib . checkM ( g )		168231	1					
ANR	168266	Callee	lib . checkM		168231	0					
ANR	168267	MemberAccess	lib . checkM		168231	0					
ANR	168268	Identifier	lib		168231	0					
ANR	168269	Identifier	checkM		168231	1					
ANR	168270	ArgumentList	g		168231	1					
ANR	168271	Argument	g		168231	0					
ANR	168272	Identifier	g		168231	0					
ANR	168273	IfStatement	if ( sked )		168231	5					
ANR	168274	Condition	sked	933:5:20191:20194	168231	0	True				
ANR	168275	Identifier	sked		168231	0					
ANR	168276	CompoundStatement		7:12:175:175	168231	1					
ANR	168277	ExpressionStatement	"printf ( ""schedule is:\\n"" )"	934:2:20202:20226	168231	0	True				
ANR	168278	CallExpression	"printf ( ""schedule is:\\n"" )"		168231	0					
ANR	168279	Callee	printf		168231	0					
ANR	168280	Identifier	printf		168231	0					
ANR	168281	ArgumentList	"""schedule is:\\n"""		168231	1					
ANR	168282	Argument	"""schedule is:\\n"""		168231	0					
ANR	168283	PrimaryExpression	"""schedule is:\\n"""		168231	0					
ANR	168284	ForStatement	for ( int i = 0 ; i < g . getNumNodes ( ) ; i ++ )		168231	1					
ANR	168285	ForInit	int i = 0 ;	935:7:20235:20242	168231	0	True				
ANR	168286	IdentifierDeclStatement	int i = 0 ;		168231	0					
ANR	168287	IdentifierDecl	i = 0		168231	0					
ANR	168288	IdentifierDeclType	int		168231	0					
ANR	168289	Identifier	i		168231	1					
ANR	168290	AssignmentExpression	i = 0		168231	2		=			
ANR	168291	Identifier	i		168231	0					
ANR	168292	PrimaryExpression	0		168231	1					
ANR	168293	Condition	i < g . getNumNodes ( )	935:16:20244:20260	168231	1	True				
ANR	168294	RelationalExpression	i < g . getNumNodes ( )		168231	0		<			
ANR	168295	Identifier	i		168231	0					
ANR	168296	CallExpression	g . getNumNodes ( )		168231	1					
ANR	168297	Callee	g . getNumNodes		168231	0					
ANR	168298	MemberAccess	g . getNumNodes		168231	0					
ANR	168299	Identifier	g		168231	0					
ANR	168300	Identifier	getNumNodes		168231	1					
ANR	168301	ArgumentList			168231	1					
ANR	168302	PostIncDecOperationExpression	i ++	935:35:20263:20265	168231	2	True				
ANR	168303	Identifier	i		168231	0					
ANR	168304	IncDec	++		168231	1					
ANR	168305	ExpressionStatement	"printf ( ""%d "" , sked [ i ] )"	936:3:20272:20295	168231	3	True				
ANR	168306	CallExpression	"printf ( ""%d "" , sked [ i ] )"		168231	0					
ANR	168307	Callee	printf		168231	0					
ANR	168308	Identifier	printf		168231	0					
ANR	168309	ArgumentList	"""%d """		168231	1					
ANR	168310	Argument	"""%d """		168231	0					
ANR	168311	PrimaryExpression	"""%d """		168231	0					
ANR	168312	Argument	sked [ i ]		168231	1					
ANR	168313	ArrayIndexing	sked [ i ]		168231	0					
ANR	168314	Identifier	sked		168231	0					
ANR	168315	Identifier	i		168231	1					
ANR	168316	ExpressionStatement	"printf ( ""\\n"" )"	937:2:20299:20311	168231	2	True				
ANR	168317	CallExpression	"printf ( ""\\n"" )"		168231	0					
ANR	168318	Callee	printf		168231	0					
ANR	168319	Identifier	printf		168231	0					
ANR	168320	ArgumentList	"""\\n"""		168231	1					
ANR	168321	Argument	"""\\n"""		168231	0					
ANR	168322	PrimaryExpression	"""\\n"""		168231	0					
ANR	168323	ElseStatement	else		168231	0					
ANR	168324	CompoundStatement		13:6:299:299	168231	0					
ANR	168325	ExpressionStatement	"printf ( ""not an M-dag\\n"" )"	940:2:20326:20350	168231	0	True				
ANR	168326	CallExpression	"printf ( ""not an M-dag\\n"" )"		168231	0					
ANR	168327	Callee	printf		168231	0					
ANR	168328	Identifier	printf		168231	0					
ANR	168329	ArgumentList	"""not an M-dag\\n"""		168231	1					
ANR	168330	Argument	"""not an M-dag\\n"""		168231	0					
ANR	168331	PrimaryExpression	"""not an M-dag\\n"""		168231	0					
ANR	168332	ExpressionStatement		941:2:20354:20354	168231	6	True				
ANR	168333	ReturnType	void		168231	1					
ANR	168334	Identifier	ConstituentLibrary_test_checkM		168231	2					
ANR	168335	ParameterList			168231	3					
ANR	168336	CFGEntryNode	ENTRY		168231		True				
ANR	168337	CFGExitNode	EXIT		168231		True				
ANR	168338	Symbol	sked		168231						
ANR	168339	Symbol	lib . checkM		168231						
ANR	168340	Symbol	g . getNumNodes		168231						
ANR	168341	Symbol	* i		168231						
ANR	168342	Symbol	lib		168231						
ANR	168343	Symbol	g		168231						
ANR	168344	Symbol	i		168231						
ANR	168345	Symbol	* sked		168231						
