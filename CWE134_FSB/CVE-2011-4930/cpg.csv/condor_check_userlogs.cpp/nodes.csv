command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	856590	File	data/converged/CVE-2011-4930_htcondor/condor_check_userlogs.cpp								
ANR	856591	Function	main	30:0:1071:4659							
ANR	856592	FunctionDef	"main (int argc , char * * argv)"		856591	0					
ANR	856593	CompoundStatement		31:0:1103:4659	856591	0					
ANR	856594	IdentifierDeclStatement	int result = 0 ;	32:1:1106:1121	856591	0	True				
ANR	856595	IdentifierDecl	result = 0		856591	0					
ANR	856596	IdentifierDeclType	int		856591	0					
ANR	856597	Identifier	result		856591	1					
ANR	856598	AssignmentExpression	result = 0		856591	2		=			
ANR	856599	Identifier	result		856591	0					
ANR	856600	PrimaryExpression	0		856591	1					
ANR	856601	IdentifierDeclStatement	param_functions * p_funcs = NULL ;	33:1:1124:1155	856591	1	True				
ANR	856602	IdentifierDecl	* p_funcs = NULL		856591	0					
ANR	856603	IdentifierDeclType	param_functions *		856591	0					
ANR	856604	Identifier	p_funcs		856591	1					
ANR	856605	AssignmentExpression	* p_funcs = NULL		856591	2		=			
ANR	856606	Identifier	NULL		856591	0					
ANR	856607	Identifier	NULL		856591	1					
ANR	856608	IfStatement	"if ( argc <= 1 || ( argc >= 2 && ! strcmp ( ""-usage"" , argv [ 1 ] ) ) )"		856591	2					
ANR	856609	Condition	"argc <= 1 || ( argc >= 2 && ! strcmp ( ""-usage"" , argv [ 1 ] ) )"	35:6:1164:1217	856591	0	True				
ANR	856610	OrExpression	"argc <= 1 || ( argc >= 2 && ! strcmp ( ""-usage"" , argv [ 1 ] ) )"		856591	0		||			
ANR	856611	RelationalExpression	argc <= 1		856591	0		<=			
ANR	856612	Identifier	argc		856591	0					
ANR	856613	PrimaryExpression	1		856591	1					
ANR	856614	AndExpression	"argc >= 2 && ! strcmp ( ""-usage"" , argv [ 1 ] )"		856591	1		&&			
ANR	856615	RelationalExpression	argc >= 2		856591	0		>=			
ANR	856616	Identifier	argc		856591	0					
ANR	856617	PrimaryExpression	2		856591	1					
ANR	856618	UnaryOperationExpression	"! strcmp ( ""-usage"" , argv [ 1 ] )"		856591	1					
ANR	856619	UnaryOperator	!		856591	0					
ANR	856620	CallExpression	"strcmp ( ""-usage"" , argv [ 1 ] )"		856591	1					
ANR	856621	Callee	strcmp		856591	0					
ANR	856622	Identifier	strcmp		856591	0					
ANR	856623	ArgumentList	"""-usage"""		856591	1					
ANR	856624	Argument	"""-usage"""		856591	0					
ANR	856625	PrimaryExpression	"""-usage"""		856591	0					
ANR	856626	Argument	argv [ 1 ]		856591	1					
ANR	856627	ArrayIndexing	argv [ 1 ]		856591	0					
ANR	856628	Identifier	argv		856591	0					
ANR	856629	PrimaryExpression	1		856591	1					
ANR	856630	CompoundStatement		5:63:117:117	856591	1					
ANR	856631	Statement	printf	36:2:1225:1230	856591	0	True				
ANR	856632	Statement	(	36:8:1231:1231	856591	1	True				
ANR	856633	Statement	"""Usage: condor_check_userlogs <log file 1> """	36:9:1232:1275	856591	2	True				
ANR	856634	Statement	"""[log file 2] ... [log file n]\\n"""	37:4:1281:1313	856591	3	True				
ANR	856635	Statement	)	37:37:1314:1314	856591	4	True				
ANR	856636	ExpressionStatement		37:38:1315:1315	856591	5	True				
ANR	856637	ExpressionStatement	exit ( 0 )	38:2:1319:1326	856591	6	True				
ANR	856638	CallExpression	exit ( 0 )		856591	0					
ANR	856639	Callee	exit		856591	0					
ANR	856640	Identifier	exit		856591	0					
ANR	856641	ArgumentList	0		856591	1					
ANR	856642	Argument	0		856591	0					
ANR	856643	PrimaryExpression	0		856591	0					
ANR	856644	ExpressionStatement	Termlog = true	42:1:1354:1368	856591	3	True				
ANR	856645	AssignmentExpression	Termlog = true		856591	0		=			
ANR	856646	Identifier	Termlog		856591	0					
ANR	856647	Identifier	true		856591	1					
ANR	856648	ExpressionStatement	p_funcs = get_param_functions ( )	43:1:1371:1402	856591	4	True				
ANR	856649	AssignmentExpression	p_funcs = get_param_functions ( )		856591	0		=			
ANR	856650	Identifier	p_funcs		856591	0					
ANR	856651	CallExpression	get_param_functions ( )		856591	1					
ANR	856652	Callee	get_param_functions		856591	0					
ANR	856653	Identifier	get_param_functions		856591	0					
ANR	856654	ArgumentList			856591	1					
ANR	856655	ExpressionStatement	"dprintf_config ( ""condor_check_userlogs"" , p_funcs )"	44:1:1405:1453	856591	5	True				
ANR	856656	CallExpression	"dprintf_config ( ""condor_check_userlogs"" , p_funcs )"		856591	0					
ANR	856657	Callee	dprintf_config		856591	0					
ANR	856658	Identifier	dprintf_config		856591	0					
ANR	856659	ArgumentList	"""condor_check_userlogs"""		856591	1					
ANR	856660	Argument	"""condor_check_userlogs"""		856591	0					
ANR	856661	PrimaryExpression	"""condor_check_userlogs"""		856591	0					
ANR	856662	Argument	p_funcs		856591	1					
ANR	856663	Identifier	p_funcs		856591	0					
ANR	856664	ExpressionStatement	DebugFlags = D_ALWAYS	45:1:1456:1477	856591	6	True				
ANR	856665	AssignmentExpression	DebugFlags = D_ALWAYS		856591	0		=			
ANR	856666	Identifier	DebugFlags		856591	0					
ANR	856667	Identifier	D_ALWAYS		856591	1					
ANR	856668	IdentifierDeclStatement	StringList logFiles ;	47:1:1481:1500	856591	7	True				
ANR	856669	IdentifierDecl	logFiles		856591	0					
ANR	856670	IdentifierDeclType	StringList		856591	0					
ANR	856671	Identifier	logFiles		856591	1					
ANR	856672	ForStatement	for ( int argnum = 1 ; argnum < argc ; ++ argnum )		856591	8					
ANR	856673	ForInit	int argnum = 1 ;	48:7:1509:1523	856591	0	True				
ANR	856674	IdentifierDeclStatement	int argnum = 1 ;		856591	0					
ANR	856675	IdentifierDecl	argnum = 1		856591	0					
ANR	856676	IdentifierDeclType	int		856591	0					
ANR	856677	Identifier	argnum		856591	1					
ANR	856678	AssignmentExpression	argnum = 1		856591	2		=			
ANR	856679	Identifier	argnum		856591	0					
ANR	856680	PrimaryExpression	1		856591	1					
ANR	856681	Condition	argnum < argc	48:23:1525:1537	856591	1	True				
ANR	856682	RelationalExpression	argnum < argc		856591	0		<			
ANR	856683	Identifier	argnum		856591	0					
ANR	856684	Identifier	argc		856591	1					
ANR	856685	UnaryExpression	++ argnum	48:38:1540:1547	856591	2	True				
ANR	856686	IncDec	++		856591	0					
ANR	856687	Identifier	argnum		856591	1					
ANR	856688	CompoundStatement		18:49:447:447	856591	3					
ANR	856689	ExpressionStatement	logFiles . append ( argv [ argnum ] )	49:2:1555:1584	856591	0	True				
ANR	856690	CallExpression	logFiles . append ( argv [ argnum ] )		856591	0					
ANR	856691	Callee	logFiles . append		856591	0					
ANR	856692	MemberAccess	logFiles . append		856591	0					
ANR	856693	Identifier	logFiles		856591	0					
ANR	856694	Identifier	append		856591	1					
ANR	856695	ArgumentList	argv [ argnum ]		856591	1					
ANR	856696	Argument	argv [ argnum ]		856591	0					
ANR	856697	ArrayIndexing	argv [ argnum ]		856591	0					
ANR	856698	Identifier	argv		856591	0					
ANR	856699	Identifier	argnum		856591	1					
ANR	856700	ExpressionStatement	logFiles . rewind ( )	51:1:1590:1607	856591	9	True				
ANR	856701	CallExpression	logFiles . rewind ( )		856591	0					
ANR	856702	Callee	logFiles . rewind		856591	0					
ANR	856703	MemberAccess	logFiles . rewind		856591	0					
ANR	856704	Identifier	logFiles		856591	0					
ANR	856705	Identifier	rewind		856591	1					
ANR	856706	ArgumentList			856591	1					
ANR	856707	IdentifierDeclStatement	ReadMultipleUserLogs ru ;	53:1:1611:1634	856591	10	True				
ANR	856708	IdentifierDecl	ru		856591	0					
ANR	856709	IdentifierDeclType	ReadMultipleUserLogs		856591	0					
ANR	856710	Identifier	ru		856591	1					
ANR	856711	IdentifierDeclStatement	char * filename ;	54:1:1637:1651	856591	11	True				
ANR	856712	IdentifierDecl	* filename		856591	0					
ANR	856713	IdentifierDeclType	char *		856591	0					
ANR	856714	Identifier	filename		856591	1					
ANR	856715	WhileStatement	while ( ( filename = logFiles . next ( ) ) )		856591	12					
ANR	856716	Condition	filename = logFiles . next ( )	55:9:1662:1689	856591	0	True				
ANR	856717	AssignmentExpression	filename = logFiles . next ( )		856591	0		=			
ANR	856718	Identifier	filename		856591	0					
ANR	856719	CallExpression	logFiles . next ( )		856591	1					
ANR	856720	Callee	logFiles . next		856591	0					
ANR	856721	MemberAccess	logFiles . next		856591	0					
ANR	856722	Identifier	logFiles		856591	0					
ANR	856723	Identifier	next		856591	1					
ANR	856724	ArgumentList			856591	1					
ANR	856725	CompoundStatement		27:2:628:648	856591	1					
ANR	856726	IdentifierDeclStatement	MyString filestring ( filename ) ;	56:2:1697:1728	856591	0	True				
ANR	856727	IdentifierDecl	filestring ( filename )		856591	0					
ANR	856728	IdentifierDeclType	MyString		856591	0					
ANR	856729	Identifier	filestring		856591	1					
ANR	856730	Identifier	filename		856591	2					
ANR	856731	IdentifierDeclStatement	CondorError errstack ;	57:2:1732:1752	856591	1	True				
ANR	856732	IdentifierDecl	errstack		856591	0					
ANR	856733	IdentifierDeclType	CondorError		856591	0					
ANR	856734	Identifier	errstack		856591	1					
ANR	856735	IfStatement	"if ( ! ru . monitorLogFile ( filestring , false , errstack ) )"		856591	2					
ANR	856736	Condition	"! ru . monitorLogFile ( filestring , false , errstack )"	58:7:1761:1809	856591	0	True				
ANR	856737	UnaryOperationExpression	"! ru . monitorLogFile ( filestring , false , errstack )"		856591	0					
ANR	856738	UnaryOperator	!		856591	0					
ANR	856739	CallExpression	"ru . monitorLogFile ( filestring , false , errstack )"		856591	1					
ANR	856740	Callee	ru . monitorLogFile		856591	0					
ANR	856741	MemberAccess	ru . monitorLogFile		856591	0					
ANR	856742	Identifier	ru		856591	0					
ANR	856743	Identifier	monitorLogFile		856591	1					
ANR	856744	ArgumentList	filestring		856591	1					
ANR	856745	Argument	filestring		856591	0					
ANR	856746	Identifier	filestring		856591	0					
ANR	856747	Argument	false		856591	1					
ANR	856748	Identifier	false		856591	0					
ANR	856749	Argument	errstack		856591	2					
ANR	856750	Identifier	errstack		856591	0					
ANR	856751	CompoundStatement		28:59:709:709	856591	1					
ANR	856752	ExpressionStatement	"fprintf ( stderr , ""Error monitoring log file %s: %s\\n"" , filename , errstack . getFullText ( ) )"	59:3:1818:1913	856591	0	True				
ANR	856753	CallExpression	"fprintf ( stderr , ""Error monitoring log file %s: %s\\n"" , filename , errstack . getFullText ( ) )"		856591	0					
ANR	856754	Callee	fprintf		856591	0					
ANR	856755	Identifier	fprintf		856591	0					
ANR	856756	ArgumentList	stderr		856591	1					
ANR	856757	Argument	stderr		856591	0					
ANR	856758	Identifier	stderr		856591	0					
ANR	856759	Argument	"""Error monitoring log file %s: %s\\n"""		856591	1					
ANR	856760	PrimaryExpression	"""Error monitoring log file %s: %s\\n"""		856591	0					
ANR	856761	Argument	filename		856591	2					
ANR	856762	Identifier	filename		856591	0					
ANR	856763	Argument	errstack . getFullText ( )		856591	3					
ANR	856764	CallExpression	errstack . getFullText ( )		856591	0					
ANR	856765	Callee	errstack . getFullText		856591	0					
ANR	856766	MemberAccess	errstack . getFullText		856591	0					
ANR	856767	Identifier	errstack		856591	0					
ANR	856768	Identifier	getFullText		856591	1					
ANR	856769	ArgumentList			856591	1					
ANR	856770	ExpressionStatement	result = 1	61:3:1918:1928	856591	1	True				
ANR	856771	AssignmentExpression	result = 1		856591	0		=			
ANR	856772	Identifier	result		856591	0					
ANR	856773	PrimaryExpression	1		856591	1					
ANR	856774	IdentifierDeclStatement	bool logsMissing = false ;	65:1:1939:1963	856591	13	True				
ANR	856775	IdentifierDecl	logsMissing = false		856591	0					
ANR	856776	IdentifierDeclType	bool		856591	0					
ANR	856777	Identifier	logsMissing		856591	1					
ANR	856778	AssignmentExpression	logsMissing = false		856591	2		=			
ANR	856779	Identifier	false		856591	0					
ANR	856780	Identifier	false		856591	1					
ANR	856781	IdentifierDeclStatement	CheckEvents ce ;	67:1:1967:1982	856591	14	True				
ANR	856782	IdentifierDecl	ce		856591	0					
ANR	856783	IdentifierDeclType	CheckEvents		856591	0					
ANR	856784	Identifier	ce		856591	1					
ANR	856785	IdentifierDeclStatement	int totalSubmitted = 0 ;	68:1:1985:2007	856591	15	True				
ANR	856786	IdentifierDecl	totalSubmitted = 0		856591	0					
ANR	856787	IdentifierDeclType	int		856591	0					
ANR	856788	Identifier	totalSubmitted		856591	1					
ANR	856789	AssignmentExpression	totalSubmitted = 0		856591	2		=			
ANR	856790	Identifier	totalSubmitted		856591	0					
ANR	856791	PrimaryExpression	0		856591	1					
ANR	856792	IdentifierDeclStatement	int netSubmitted = 0 ;	69:1:2010:2030	856591	16	True				
ANR	856793	IdentifierDecl	netSubmitted = 0		856591	0					
ANR	856794	IdentifierDeclType	int		856591	0					
ANR	856795	Identifier	netSubmitted		856591	1					
ANR	856796	AssignmentExpression	netSubmitted = 0		856591	2		=			
ANR	856797	Identifier	netSubmitted		856591	0					
ANR	856798	PrimaryExpression	0		856591	1					
ANR	856799	IdentifierDeclStatement	bool done = false ;	70:1:2033:2050	856591	17	True				
ANR	856800	IdentifierDecl	done = false		856591	0					
ANR	856801	IdentifierDeclType	bool		856591	0					
ANR	856802	Identifier	done		856591	1					
ANR	856803	AssignmentExpression	done = false		856591	2		=			
ANR	856804	Identifier	false		856591	0					
ANR	856805	Identifier	false		856591	1					
ANR	856806	WhileStatement	while ( ! done )		856591	18					
ANR	856807	Condition	! done	71:8:2060:2064	856591	0	True				
ANR	856808	UnaryOperationExpression	! done		856591	0					
ANR	856809	UnaryOperator	!		856591	0					
ANR	856810	Identifier	done		856591	1					
ANR	856811	CompoundStatement		46:8:1023:1067	856591	1					
ANR	856812	IdentifierDeclStatement	ULogEvent * e = NULL ;	73:5:2076:2095	856591	0	True				
ANR	856813	IdentifierDecl	* e = NULL		856591	0					
ANR	856814	IdentifierDeclType	ULogEvent *		856591	0					
ANR	856815	Identifier	e		856591	1					
ANR	856816	AssignmentExpression	* e = NULL		856591	2		=			
ANR	856817	Identifier	NULL		856591	0					
ANR	856818	Identifier	NULL		856591	1					
ANR	856819	IdentifierDeclStatement	MyString errorMsg ;	74:2:2099:2116	856591	1	True				
ANR	856820	IdentifierDecl	errorMsg		856591	0					
ANR	856821	IdentifierDeclType	MyString		856591	0					
ANR	856822	Identifier	errorMsg		856591	1					
ANR	856823	IdentifierDeclStatement	ULogEventOutcome outcome = ru . readEvent ( e ) ;	76:8:2127:2171	856591	2	True				
ANR	856824	IdentifierDecl	outcome = ru . readEvent ( e )		856591	0					
ANR	856825	IdentifierDeclType	ULogEventOutcome		856591	0					
ANR	856826	Identifier	outcome		856591	1					
ANR	856827	AssignmentExpression	outcome = ru . readEvent ( e )		856591	2		=			
ANR	856828	Identifier	outcome		856591	0					
ANR	856829	CallExpression	ru . readEvent ( e )		856591	1					
ANR	856830	Callee	ru . readEvent		856591	0					
ANR	856831	MemberAccess	ru . readEvent		856591	0					
ANR	856832	Identifier	ru		856591	0					
ANR	856833	Identifier	readEvent		856591	1					
ANR	856834	ArgumentList	e		856591	1					
ANR	856835	Argument	e		856591	0					
ANR	856836	Identifier	e		856591	0					
ANR	856837	SwitchStatement	switch ( outcome )		856591	3					
ANR	856838	Condition	outcome	78:16:2190:2196	856591	0	True				
ANR	856839	Identifier	outcome		856591	0					
ANR	856840	CompoundStatement		48:25:1095:1095	856591	1					
ANR	856841	Label	case ULOG_RD_ERROR :	80:8:2210:2228	856591	0	True				
ANR	856842	Identifier	ULOG_RD_ERROR		856591	0					
ANR	856843	Label	case ULOG_UNK_ERROR :	81:8:2238:2257	856591	1	True				
ANR	856844	Identifier	ULOG_UNK_ERROR		856591	0					
ANR	856845	ExpressionStatement	logsMissing = true	82:3:2262:2280	856591	2	True				
ANR	856846	AssignmentExpression	logsMissing = true		856591	0		=			
ANR	856847	Identifier	logsMissing		856591	0					
ANR	856848	Identifier	true		856591	1					
ANR	856849	Label	case ULOG_NO_EVENT :	83:8:2290:2308	856591	3	True				
ANR	856850	Identifier	ULOG_NO_EVENT		856591	0					
ANR	856851	ExpressionStatement	"printf ( ""Log outcome: %s\\n"" , ULogEventOutcomeNames [ outcome ] )"	85:3:2314:2375	856591	4	True				
ANR	856852	CallExpression	"printf ( ""Log outcome: %s\\n"" , ULogEventOutcomeNames [ outcome ] )"		856591	0					
ANR	856853	Callee	printf		856591	0					
ANR	856854	Identifier	printf		856591	0					
ANR	856855	ArgumentList	"""Log outcome: %s\\n"""		856591	1					
ANR	856856	Argument	"""Log outcome: %s\\n"""		856591	0					
ANR	856857	PrimaryExpression	"""Log outcome: %s\\n"""		856591	0					
ANR	856858	Argument	ULogEventOutcomeNames [ outcome ]		856591	1					
ANR	856859	ArrayIndexing	ULogEventOutcomeNames [ outcome ]		856591	0					
ANR	856860	Identifier	ULogEventOutcomeNames		856591	0					
ANR	856861	Identifier	outcome		856591	1					
ANR	856862	ExpressionStatement	done = true	86:3:2380:2391	856591	5	True				
ANR	856863	AssignmentExpression	done = true		856591	0		=			
ANR	856864	Identifier	done		856591	0					
ANR	856865	Identifier	true		856591	1					
ANR	856866	BreakStatement	break ;	87:3:2396:2401	856591	6	True				
ANR	856867	Label	case ULOG_OK :	89:8:2413:2425	856591	7	True				
ANR	856868	Identifier	ULOG_OK		856591	0					
ANR	856869	ExpressionStatement	"printf ( ""Log event: %s (%d.%d.%d)"" , ULogEventNumberNames [ e -> eventNumber ] , e -> cluster , e -> proc , e -> subproc )"	91:3:2431:2550	856591	8	True				
ANR	856870	CallExpression	"printf ( ""Log event: %s (%d.%d.%d)"" , ULogEventNumberNames [ e -> eventNumber ] , e -> cluster , e -> proc , e -> subproc )"		856591	0					
ANR	856871	Callee	printf		856591	0					
ANR	856872	Identifier	printf		856591	0					
ANR	856873	ArgumentList	"""Log event: %s (%d.%d.%d)"""		856591	1					
ANR	856874	Argument	"""Log event: %s (%d.%d.%d)"""		856591	0					
ANR	856875	PrimaryExpression	"""Log event: %s (%d.%d.%d)"""		856591	0					
ANR	856876	Argument	ULogEventNumberNames [ e -> eventNumber ]		856591	1					
ANR	856877	ArrayIndexing	ULogEventNumberNames [ e -> eventNumber ]		856591	0					
ANR	856878	Identifier	ULogEventNumberNames		856591	0					
ANR	856879	PtrMemberAccess	e -> eventNumber		856591	1					
ANR	856880	Identifier	e		856591	0					
ANR	856881	Identifier	eventNumber		856591	1					
ANR	856882	Argument	e -> cluster		856591	2					
ANR	856883	PtrMemberAccess	e -> cluster		856591	0					
ANR	856884	Identifier	e		856591	0					
ANR	856885	Identifier	cluster		856591	1					
ANR	856886	Argument	e -> proc		856591	3					
ANR	856887	PtrMemberAccess	e -> proc		856591	0					
ANR	856888	Identifier	e		856591	0					
ANR	856889	Identifier	proc		856591	1					
ANR	856890	Argument	e -> subproc		856591	4					
ANR	856891	PtrMemberAccess	e -> subproc		856591	0					
ANR	856892	Identifier	e		856591	0					
ANR	856893	Identifier	subproc		856591	1					
ANR	856894	IfStatement	"if ( ce . CheckAnEvent ( e , errorMsg ) != CheckEvents :: EVENT_OKAY )"		856591	9					
ANR	856895	Condition	"ce . CheckAnEvent ( e , errorMsg ) != CheckEvents :: EVENT_OKAY"	95:8:2561:2615	856591	0	True				
ANR	856896	EqualityExpression	"ce . CheckAnEvent ( e , errorMsg ) != CheckEvents :: EVENT_OKAY"		856591	0		!=			
ANR	856897	CallExpression	"ce . CheckAnEvent ( e , errorMsg )"		856591	0					
ANR	856898	Callee	ce . CheckAnEvent		856591	0					
ANR	856899	MemberAccess	ce . CheckAnEvent		856591	0					
ANR	856900	Identifier	ce		856591	0					
ANR	856901	Identifier	CheckAnEvent		856591	1					
ANR	856902	ArgumentList	e		856591	1					
ANR	856903	Argument	e		856591	0					
ANR	856904	Identifier	e		856591	0					
ANR	856905	Argument	errorMsg		856591	1					
ANR	856906	Identifier	errorMsg		856591	0					
ANR	856907	Identifier	CheckEvents :: EVENT_OKAY		856591	1					
ANR	856908	CompoundStatement		65:66:1515:1515	856591	1					
ANR	856909	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , errorMsg . Value ( ) )"	96:4:2625:2666	856591	0	True				
ANR	856910	CallExpression	"fprintf ( stderr , ""%s\\n"" , errorMsg . Value ( ) )"		856591	0					
ANR	856911	Callee	fprintf		856591	0					
ANR	856912	Identifier	fprintf		856591	0					
ANR	856913	ArgumentList	stderr		856591	1					
ANR	856914	Argument	stderr		856591	0					
ANR	856915	Identifier	stderr		856591	0					
ANR	856916	Argument	"""%s\\n"""		856591	1					
ANR	856917	PrimaryExpression	"""%s\\n"""		856591	0					
ANR	856918	Argument	errorMsg . Value ( )		856591	2					
ANR	856919	CallExpression	errorMsg . Value ( )		856591	0					
ANR	856920	Callee	errorMsg . Value		856591	0					
ANR	856921	MemberAccess	errorMsg . Value		856591	0					
ANR	856922	Identifier	errorMsg		856591	0					
ANR	856923	Identifier	Value		856591	1					
ANR	856924	ArgumentList			856591	1					
ANR	856925	ExpressionStatement	result = 1	97:4:2672:2682	856591	1	True				
ANR	856926	AssignmentExpression	result = 1		856591	0		=			
ANR	856927	Identifier	result		856591	0					
ANR	856928	PrimaryExpression	1		856591	1					
ANR	856929	IfStatement	if ( e -> eventNumber == ULOG_SUBMIT )		856591	10					
ANR	856930	Condition	e -> eventNumber == ULOG_SUBMIT	100:7:2697:2725	856591	0	True				
ANR	856931	EqualityExpression	e -> eventNumber == ULOG_SUBMIT		856591	0		==			
ANR	856932	PtrMemberAccess	e -> eventNumber		856591	0					
ANR	856933	Identifier	e		856591	0					
ANR	856934	Identifier	eventNumber		856591	1					
ANR	856935	Identifier	ULOG_SUBMIT		856591	1					
ANR	856936	CompoundStatement		71:4:1631:1665	856591	1					
ANR	856937	IdentifierDeclStatement	SubmitEvent * ee = ( SubmitEvent * ) e ;	101:4:2735:2769	856591	0	True				
ANR	856938	IdentifierDecl	* ee = ( SubmitEvent * ) e		856591	0					
ANR	856939	IdentifierDeclType	SubmitEvent *		856591	0					
ANR	856940	Identifier	ee		856591	1					
ANR	856941	AssignmentExpression	* ee = ( SubmitEvent * ) e		856591	2		=			
ANR	856942	Identifier	ee		856591	0					
ANR	856943	CastExpression	( SubmitEvent * ) e		856591	1					
ANR	856944	CastTarget	SubmitEvent *		856591	0					
ANR	856945	Identifier	e		856591	1					
ANR	856946	ExpressionStatement	"printf ( "" (\\""%s\\"")"" , ee -> submitEventLogNotes )"	102:4:2775:2821	856591	1	True				
ANR	856947	CallExpression	"printf ( "" (\\""%s\\"")"" , ee -> submitEventLogNotes )"		856591	0					
ANR	856948	Callee	printf		856591	0					
ANR	856949	Identifier	printf		856591	0					
ANR	856950	ArgumentList	""" (\\""%s\\"")"""		856591	1					
ANR	856951	Argument	""" (\\""%s\\"")"""		856591	0					
ANR	856952	PrimaryExpression	""" (\\""%s\\"")"""		856591	0					
ANR	856953	Argument	ee -> submitEventLogNotes		856591	1					
ANR	856954	PtrMemberAccess	ee -> submitEventLogNotes		856591	0					
ANR	856955	Identifier	ee		856591	0					
ANR	856956	Identifier	submitEventLogNotes		856591	1					
ANR	856957	ExpressionStatement	++ totalSubmitted	103:4:2827:2843	856591	2	True				
ANR	856958	UnaryExpression	++ totalSubmitted		856591	0					
ANR	856959	IncDec	++		856591	0					
ANR	856960	Identifier	totalSubmitted		856591	1					
ANR	856961	ExpressionStatement	++ netSubmitted	104:4:2849:2863	856591	3	True				
ANR	856962	UnaryExpression	++ netSubmitted		856591	0					
ANR	856963	IncDec	++		856591	0					
ANR	856964	Identifier	netSubmitted		856591	1					
ANR	856965	ExpressionStatement	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"	105:4:2869:2960	856591	4	True				
ANR	856966	CallExpression	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"		856591	0					
ANR	856967	Callee	printf		856591	0					
ANR	856968	Identifier	printf		856591	0					
ANR	856969	ArgumentList	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	1					
ANR	856970	Argument	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	856971	PrimaryExpression	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	856972	Argument	totalSubmitted		856591	1					
ANR	856973	Identifier	totalSubmitted		856591	0					
ANR	856974	Argument	netSubmitted		856591	2					
ANR	856975	Identifier	netSubmitted		856591	0					
ANR	856976	IfStatement	if ( e -> eventNumber == ULOG_JOB_HELD )		856591	11					
ANR	856977	Condition	e -> eventNumber == ULOG_JOB_HELD	109:7:2978:3008	856591	0	True				
ANR	856978	EqualityExpression	e -> eventNumber == ULOG_JOB_HELD		856591	0		==			
ANR	856979	PtrMemberAccess	e -> eventNumber		856591	0					
ANR	856980	Identifier	e		856591	0					
ANR	856981	Identifier	eventNumber		856591	1					
ANR	856982	Identifier	ULOG_JOB_HELD		856591	1					
ANR	856983	CompoundStatement		80:4:1914:1950	856591	1					
ANR	856984	IdentifierDeclStatement	JobHeldEvent * ee = ( JobHeldEvent * ) e ;	110:4:3018:3054	856591	0	True				
ANR	856985	IdentifierDecl	* ee = ( JobHeldEvent * ) e		856591	0					
ANR	856986	IdentifierDeclType	JobHeldEvent *		856591	0					
ANR	856987	Identifier	ee		856591	1					
ANR	856988	AssignmentExpression	* ee = ( JobHeldEvent * ) e		856591	2		=			
ANR	856989	Identifier	ee		856591	0					
ANR	856990	CastExpression	( JobHeldEvent * ) e		856591	1					
ANR	856991	CastTarget	JobHeldEvent *		856591	0					
ANR	856992	Identifier	e		856591	1					
ANR	856993	ExpressionStatement	"printf ( "" (code=%d subcode=%d)"" , ee -> getReasonCode ( ) , ee -> getReasonSubCode ( ) )"	111:4:3060:3143	856591	1	True				
ANR	856994	CallExpression	"printf ( "" (code=%d subcode=%d)"" , ee -> getReasonCode ( ) , ee -> getReasonSubCode ( ) )"		856591	0					
ANR	856995	Callee	printf		856591	0					
ANR	856996	Identifier	printf		856591	0					
ANR	856997	ArgumentList	""" (code=%d subcode=%d)"""		856591	1					
ANR	856998	Argument	""" (code=%d subcode=%d)"""		856591	0					
ANR	856999	PrimaryExpression	""" (code=%d subcode=%d)"""		856591	0					
ANR	857000	Argument	ee -> getReasonCode ( )		856591	1					
ANR	857001	CallExpression	ee -> getReasonCode ( )		856591	0					
ANR	857002	Callee	ee -> getReasonCode		856591	0					
ANR	857003	PtrMemberAccess	ee -> getReasonCode		856591	0					
ANR	857004	Identifier	ee		856591	0					
ANR	857005	Identifier	getReasonCode		856591	1					
ANR	857006	ArgumentList			856591	1					
ANR	857007	Argument	ee -> getReasonSubCode ( )		856591	2					
ANR	857008	CallExpression	ee -> getReasonSubCode ( )		856591	0					
ANR	857009	Callee	ee -> getReasonSubCode		856591	0					
ANR	857010	PtrMemberAccess	ee -> getReasonSubCode		856591	0					
ANR	857011	Identifier	ee		856591	0					
ANR	857012	Identifier	getReasonSubCode		856591	1					
ANR	857013	ArgumentList			856591	1					
ANR	857014	IfStatement	if ( e -> eventNumber == ULOG_JOB_TERMINATED )		856591	12					
ANR	857015	Condition	e -> eventNumber == ULOG_JOB_TERMINATED	115:7:3158:3194	856591	0	True				
ANR	857016	EqualityExpression	e -> eventNumber == ULOG_JOB_TERMINATED		856591	0		==			
ANR	857017	PtrMemberAccess	e -> eventNumber		856591	0					
ANR	857018	Identifier	e		856591	0					
ANR	857019	Identifier	eventNumber		856591	1					
ANR	857020	Identifier	ULOG_JOB_TERMINATED		856591	1					
ANR	857021	CompoundStatement		85:47:2094:2094	856591	1					
ANR	857022	ExpressionStatement	-- netSubmitted	116:4:3204:3218	856591	0	True				
ANR	857023	UnaryExpression	-- netSubmitted		856591	0					
ANR	857024	IncDec	--		856591	0					
ANR	857025	Identifier	netSubmitted		856591	1					
ANR	857026	ExpressionStatement	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"	117:4:3224:3315	856591	1	True				
ANR	857027	CallExpression	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"		856591	0					
ANR	857028	Callee	printf		856591	0					
ANR	857029	Identifier	printf		856591	0					
ANR	857030	ArgumentList	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	1					
ANR	857031	Argument	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857032	PrimaryExpression	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857033	Argument	totalSubmitted		856591	1					
ANR	857034	Identifier	totalSubmitted		856591	0					
ANR	857035	Argument	netSubmitted		856591	2					
ANR	857036	Identifier	netSubmitted		856591	0					
ANR	857037	IfStatement	if ( e -> eventNumber == ULOG_JOB_ABORTED )		856591	13					
ANR	857038	Condition	e -> eventNumber == ULOG_JOB_ABORTED	121:7:3330:3363	856591	0	True				
ANR	857039	EqualityExpression	e -> eventNumber == ULOG_JOB_ABORTED		856591	0		==			
ANR	857040	PtrMemberAccess	e -> eventNumber		856591	0					
ANR	857041	Identifier	e		856591	0					
ANR	857042	Identifier	eventNumber		856591	1					
ANR	857043	Identifier	ULOG_JOB_ABORTED		856591	1					
ANR	857044	CompoundStatement		91:44:2263:2263	856591	1					
ANR	857045	ExpressionStatement	-- netSubmitted	122:4:3373:3387	856591	0	True				
ANR	857046	UnaryExpression	-- netSubmitted		856591	0					
ANR	857047	IncDec	--		856591	0					
ANR	857048	Identifier	netSubmitted		856591	1					
ANR	857049	ExpressionStatement	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"	123:4:3393:3484	856591	1	True				
ANR	857050	CallExpression	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"		856591	0					
ANR	857051	Callee	printf		856591	0					
ANR	857052	Identifier	printf		856591	0					
ANR	857053	ArgumentList	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	1					
ANR	857054	Argument	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857055	PrimaryExpression	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857056	Argument	totalSubmitted		856591	1					
ANR	857057	Identifier	totalSubmitted		856591	0					
ANR	857058	Argument	netSubmitted		856591	2					
ANR	857059	Identifier	netSubmitted		856591	0					
ANR	857060	IfStatement	if ( e -> eventNumber == ULOG_EXECUTABLE_ERROR )		856591	14					
ANR	857061	Condition	e -> eventNumber == ULOG_EXECUTABLE_ERROR	127:7:3499:3537	856591	0	True				
ANR	857062	EqualityExpression	e -> eventNumber == ULOG_EXECUTABLE_ERROR		856591	0		==			
ANR	857063	PtrMemberAccess	e -> eventNumber		856591	0					
ANR	857064	Identifier	e		856591	0					
ANR	857065	Identifier	eventNumber		856591	1					
ANR	857066	Identifier	ULOG_EXECUTABLE_ERROR		856591	1					
ANR	857067	CompoundStatement		97:49:2437:2437	856591	1					
ANR	857068	ExpressionStatement	-- netSubmitted	128:4:3547:3561	856591	0	True				
ANR	857069	UnaryExpression	-- netSubmitted		856591	0					
ANR	857070	IncDec	--		856591	0					
ANR	857071	Identifier	netSubmitted		856591	1					
ANR	857072	ExpressionStatement	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"	129:4:3567:3658	856591	1	True				
ANR	857073	CallExpression	"printf ( ""\\n Total submitted: %d; net submitted: %d\\n"" , totalSubmitted , netSubmitted )"		856591	0					
ANR	857074	Callee	printf		856591	0					
ANR	857075	Identifier	printf		856591	0					
ANR	857076	ArgumentList	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	1					
ANR	857077	Argument	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857078	PrimaryExpression	"""\\n Total submitted: %d; net submitted: %d\\n"""		856591	0					
ANR	857079	Argument	totalSubmitted		856591	1					
ANR	857080	Identifier	totalSubmitted		856591	0					
ANR	857081	Argument	netSubmitted		856591	2					
ANR	857082	Identifier	netSubmitted		856591	0					
ANR	857083	ExpressionStatement	"printf ( ""\\n"" )"	133:3:3669:3683	856591	15	True				
ANR	857084	CallExpression	"printf ( ""\\n"" )"		856591	0					
ANR	857085	Callee	printf		856591	0					
ANR	857086	Identifier	printf		856591	0					
ANR	857087	ArgumentList	"""\\n"""		856591	1					
ANR	857088	Argument	"""\\n"""		856591	0					
ANR	857089	PrimaryExpression	"""\\n"""		856591	0					
ANR	857090	BreakStatement	break ;	134:3:3688:3693	856591	16	True				
ANR	857091	Label	default :	136:2:3698:3705	856591	17	True				
ANR	857092	Identifier	default		856591	0					
ANR	857093	ExpressionStatement	"fprintf ( stderr , ""Unexpected read event outcome!\\n"" )"	138:3:3711:3762	856591	18	True				
ANR	857094	CallExpression	"fprintf ( stderr , ""Unexpected read event outcome!\\n"" )"		856591	0					
ANR	857095	Callee	fprintf		856591	0					
ANR	857096	Identifier	fprintf		856591	0					
ANR	857097	ArgumentList	stderr		856591	1					
ANR	857098	Argument	stderr		856591	0					
ANR	857099	Identifier	stderr		856591	0					
ANR	857100	Argument	"""Unexpected read event outcome!\\n"""		856591	1					
ANR	857101	PrimaryExpression	"""Unexpected read event outcome!\\n"""		856591	0					
ANR	857102	ExpressionStatement	result = 1	139:3:3767:3777	856591	19	True				
ANR	857103	AssignmentExpression	result = 1		856591	0		=			
ANR	857104	Identifier	result		856591	0					
ANR	857105	PrimaryExpression	1		856591	1					
ANR	857106	BreakStatement	break ;	140:3:3782:3787	856591	20	True				
ANR	857107	ExpressionStatement	logFiles . rewind ( )	144:1:3804:3821	856591	19	True				
ANR	857108	CallExpression	logFiles . rewind ( )		856591	0					
ANR	857109	Callee	logFiles . rewind		856591	0					
ANR	857110	MemberAccess	logFiles . rewind		856591	0					
ANR	857111	Identifier	logFiles		856591	0					
ANR	857112	Identifier	rewind		856591	1					
ANR	857113	ArgumentList			856591	1					
ANR	857114	WhileStatement	while ( ( filename = logFiles . next ( ) ) )		856591	20					
ANR	857115	Condition	filename = logFiles . next ( )	145:9:3832:3859	856591	0	True				
ANR	857116	AssignmentExpression	filename = logFiles . next ( )		856591	0		=			
ANR	857117	Identifier	filename		856591	0					
ANR	857118	CallExpression	logFiles . next ( )		856591	1					
ANR	857119	Callee	logFiles . next		856591	0					
ANR	857120	MemberAccess	logFiles . next		856591	0					
ANR	857121	Identifier	logFiles		856591	0					
ANR	857122	Identifier	next		856591	1					
ANR	857123	ArgumentList			856591	1					
ANR	857124	CompoundStatement		117:2:2798:2818	856591	1					
ANR	857125	IdentifierDeclStatement	MyString filestring ( filename ) ;	146:2:3867:3898	856591	0	True				
ANR	857126	IdentifierDecl	filestring ( filename )		856591	0					
ANR	857127	IdentifierDeclType	MyString		856591	0					
ANR	857128	Identifier	filestring		856591	1					
ANR	857129	Identifier	filename		856591	2					
ANR	857130	IdentifierDeclStatement	CondorError errstack ;	147:2:3902:3922	856591	1	True				
ANR	857131	IdentifierDecl	errstack		856591	0					
ANR	857132	IdentifierDeclType	CondorError		856591	0					
ANR	857133	Identifier	errstack		856591	1					
ANR	857134	IfStatement	"if ( ! ru . unmonitorLogFile ( filestring , errstack ) )"		856591	2					
ANR	857135	Condition	"! ru . unmonitorLogFile ( filestring , errstack )"	148:7:3931:3974	856591	0	True				
ANR	857136	UnaryOperationExpression	"! ru . unmonitorLogFile ( filestring , errstack )"		856591	0					
ANR	857137	UnaryOperator	!		856591	0					
ANR	857138	CallExpression	"ru . unmonitorLogFile ( filestring , errstack )"		856591	1					
ANR	857139	Callee	ru . unmonitorLogFile		856591	0					
ANR	857140	MemberAccess	ru . unmonitorLogFile		856591	0					
ANR	857141	Identifier	ru		856591	0					
ANR	857142	Identifier	unmonitorLogFile		856591	1					
ANR	857143	ArgumentList	filestring		856591	1					
ANR	857144	Argument	filestring		856591	0					
ANR	857145	Identifier	filestring		856591	0					
ANR	857146	Argument	errstack		856591	1					
ANR	857147	Identifier	errstack		856591	0					
ANR	857148	CompoundStatement		118:54:2874:2874	856591	1					
ANR	857149	ExpressionStatement	"fprintf ( stderr , ""Error unmonitoring log file %s: %s\\n"" , filename , errstack . getFullText ( ) )"	149:3:3983:4080	856591	0	True				
ANR	857150	CallExpression	"fprintf ( stderr , ""Error unmonitoring log file %s: %s\\n"" , filename , errstack . getFullText ( ) )"		856591	0					
ANR	857151	Callee	fprintf		856591	0					
ANR	857152	Identifier	fprintf		856591	0					
ANR	857153	ArgumentList	stderr		856591	1					
ANR	857154	Argument	stderr		856591	0					
ANR	857155	Identifier	stderr		856591	0					
ANR	857156	Argument	"""Error unmonitoring log file %s: %s\\n"""		856591	1					
ANR	857157	PrimaryExpression	"""Error unmonitoring log file %s: %s\\n"""		856591	0					
ANR	857158	Argument	filename		856591	2					
ANR	857159	Identifier	filename		856591	0					
ANR	857160	Argument	errstack . getFullText ( )		856591	3					
ANR	857161	CallExpression	errstack . getFullText ( )		856591	0					
ANR	857162	Callee	errstack . getFullText		856591	0					
ANR	857163	MemberAccess	errstack . getFullText		856591	0					
ANR	857164	Identifier	errstack		856591	0					
ANR	857165	Identifier	getFullText		856591	1					
ANR	857166	ArgumentList			856591	1					
ANR	857167	ExpressionStatement	result = 1	151:3:4085:4095	856591	1	True				
ANR	857168	AssignmentExpression	result = 1		856591	0		=			
ANR	857169	Identifier	result		856591	0					
ANR	857170	PrimaryExpression	1		856591	1					
ANR	857171	IdentifierDeclStatement	MyString errorMsg ;	155:1:4106:4123	856591	21	True				
ANR	857172	IdentifierDecl	errorMsg		856591	0					
ANR	857173	IdentifierDeclType	MyString		856591	0					
ANR	857174	Identifier	errorMsg		856591	1					
ANR	857175	IdentifierDeclStatement	CheckEvents :: check_event_result_t checkAllResult = ce . CheckAllJobs ( errorMsg ) ;	156:1:4126:4206	856591	22	True				
ANR	857176	IdentifierDecl	checkAllResult = ce . CheckAllJobs ( errorMsg )		856591	0					
ANR	857177	IdentifierDeclType	CheckEvents :: check_event_result_t		856591	0					
ANR	857178	Identifier	checkAllResult		856591	1					
ANR	857179	AssignmentExpression	checkAllResult = ce . CheckAllJobs ( errorMsg )		856591	2		=			
ANR	857180	Identifier	checkAllResult		856591	0					
ANR	857181	CallExpression	ce . CheckAllJobs ( errorMsg )		856591	1					
ANR	857182	Callee	ce . CheckAllJobs		856591	0					
ANR	857183	MemberAccess	ce . CheckAllJobs		856591	0					
ANR	857184	Identifier	ce		856591	0					
ANR	857185	Identifier	CheckAllJobs		856591	1					
ANR	857186	ArgumentList	errorMsg		856591	1					
ANR	857187	Argument	errorMsg		856591	0					
ANR	857188	Identifier	errorMsg		856591	0					
ANR	857189	IfStatement	if ( checkAllResult != CheckEvents :: EVENT_OKAY )		856591	23					
ANR	857190	Condition	checkAllResult != CheckEvents :: EVENT_OKAY	158:6:4214:4254	856591	0	True				
ANR	857191	EqualityExpression	checkAllResult != CheckEvents :: EVENT_OKAY		856591	0		!=			
ANR	857192	Identifier	checkAllResult		856591	0					
ANR	857193	Identifier	CheckEvents :: EVENT_OKAY		856591	1					
ANR	857194	CompoundStatement		128:50:3154:3154	856591	1					
ANR	857195	ExpressionStatement	"fprintf ( stderr , ""%s\\n"" , errorMsg . Value ( ) )"	159:2:4262:4303	856591	0	True				
ANR	857196	CallExpression	"fprintf ( stderr , ""%s\\n"" , errorMsg . Value ( ) )"		856591	0					
ANR	857197	Callee	fprintf		856591	0					
ANR	857198	Identifier	fprintf		856591	0					
ANR	857199	ArgumentList	stderr		856591	1					
ANR	857200	Argument	stderr		856591	0					
ANR	857201	Identifier	stderr		856591	0					
ANR	857202	Argument	"""%s\\n"""		856591	1					
ANR	857203	PrimaryExpression	"""%s\\n"""		856591	0					
ANR	857204	Argument	errorMsg . Value ( )		856591	2					
ANR	857205	CallExpression	errorMsg . Value ( )		856591	0					
ANR	857206	Callee	errorMsg . Value		856591	0					
ANR	857207	MemberAccess	errorMsg . Value		856591	0					
ANR	857208	Identifier	errorMsg		856591	0					
ANR	857209	Identifier	Value		856591	1					
ANR	857210	ArgumentList			856591	1					
ANR	857211	ExpressionStatement	"fprintf ( stderr , ""CheckAllJobs() result: %s\\n"" , CheckEvents :: ResultToString ( checkAllResult ) )"	160:2:4307:4403	856591	1	True				
ANR	857212	CallExpression	"fprintf ( stderr , ""CheckAllJobs() result: %s\\n"" , CheckEvents :: ResultToString ( checkAllResult ) )"		856591	0					
ANR	857213	Callee	fprintf		856591	0					
ANR	857214	Identifier	fprintf		856591	0					
ANR	857215	ArgumentList	stderr		856591	1					
ANR	857216	Argument	stderr		856591	0					
ANR	857217	Identifier	stderr		856591	0					
ANR	857218	Argument	"""CheckAllJobs() result: %s\\n"""		856591	1					
ANR	857219	PrimaryExpression	"""CheckAllJobs() result: %s\\n"""		856591	0					
ANR	857220	Argument	CheckEvents :: ResultToString ( checkAllResult )		856591	2					
ANR	857221	CallExpression	CheckEvents :: ResultToString ( checkAllResult )		856591	0					
ANR	857222	Callee	CheckEvents :: ResultToString		856591	0					
ANR	857223	Identifier	CheckEvents :: ResultToString		856591	0					
ANR	857224	ArgumentList	checkAllResult		856591	1					
ANR	857225	Argument	checkAllResult		856591	0					
ANR	857226	Identifier	checkAllResult		856591	0					
ANR	857227	ExpressionStatement	result = 1	162:2:4407:4417	856591	2	True				
ANR	857228	AssignmentExpression	result = 1		856591	0		=			
ANR	857229	Identifier	result		856591	0					
ANR	857230	PrimaryExpression	1		856591	1					
ANR	857231	IfStatement	if ( result == 0 )		856591	24					
ANR	857232	Condition	result == 0	165:6:4429:4439	856591	0	True				
ANR	857233	EqualityExpression	result == 0		856591	0		==			
ANR	857234	Identifier	result		856591	0					
ANR	857235	PrimaryExpression	0		856591	1					
ANR	857236	CompoundStatement		135:20:3339:3339	856591	1					
ANR	857237	IfStatement	if ( ! logsMissing )		856591	0					
ANR	857238	Condition	! logsMissing	166:7:4452:4463	856591	0	True				
ANR	857239	UnaryOperationExpression	! logsMissing		856591	0					
ANR	857240	UnaryOperator	!		856591	0					
ANR	857241	Identifier	logsMissing		856591	1					
ANR	857242	CompoundStatement		136:22:3363:3363	856591	1					
ANR	857243	ExpressionStatement	"printf ( ""Log(s) are okay\\n"" )"	167:3:4472:4499	856591	0	True				
ANR	857244	CallExpression	"printf ( ""Log(s) are okay\\n"" )"		856591	0					
ANR	857245	Callee	printf		856591	0					
ANR	857246	Identifier	printf		856591	0					
ANR	857247	ArgumentList	"""Log(s) are okay\\n"""		856591	1					
ANR	857248	Argument	"""Log(s) are okay\\n"""		856591	0					
ANR	857249	PrimaryExpression	"""Log(s) are okay\\n"""		856591	0					
ANR	857250	ElseStatement	else		856591	0					
ANR	857251	CompoundStatement		138:9:3406:3406	856591	0					
ANR	857252	ExpressionStatement	"printf ( ""Log(s) may be okay\\n"" )"	169:3:4515:4545	856591	0	True				
ANR	857253	CallExpression	"printf ( ""Log(s) may be okay\\n"" )"		856591	0					
ANR	857254	Callee	printf		856591	0					
ANR	857255	Identifier	printf		856591	0					
ANR	857256	ArgumentList	"""Log(s) may be okay\\n"""		856591	1					
ANR	857257	Argument	"""Log(s) may be okay\\n"""		856591	0					
ANR	857258	PrimaryExpression	"""Log(s) may be okay\\n"""		856591	0					
ANR	857259	ExpressionStatement	"printf ( ""Some logs cannot be read\\n"" )"	170:3:4550:4588	856591	1	True				
ANR	857260	CallExpression	"printf ( ""Some logs cannot be read\\n"" )"		856591	0					
ANR	857261	Callee	printf		856591	0					
ANR	857262	Identifier	printf		856591	0					
ANR	857263	ArgumentList	"""Some logs cannot be read\\n"""		856591	1					
ANR	857264	Argument	"""Some logs cannot be read\\n"""		856591	0					
ANR	857265	PrimaryExpression	"""Some logs cannot be read\\n"""		856591	0					
ANR	857266	ElseStatement	else		856591	0					
ANR	857267	CompoundStatement		142:8:3498:3498	856591	0					
ANR	857268	ExpressionStatement	"printf ( ""Log(s) have error(s)\\n"" )"	173:2:4606:4638	856591	0	True				
ANR	857269	CallExpression	"printf ( ""Log(s) have error(s)\\n"" )"		856591	0					
ANR	857270	Callee	printf		856591	0					
ANR	857271	Identifier	printf		856591	0					
ANR	857272	ArgumentList	"""Log(s) have error(s)\\n"""		856591	1					
ANR	857273	Argument	"""Log(s) have error(s)\\n"""		856591	0					
ANR	857274	PrimaryExpression	"""Log(s) have error(s)\\n"""		856591	0					
ANR	857275	ReturnStatement	return result ;	175:1:4644:4657	856591	25	True				
ANR	857276	Identifier	result		856591	0					
ANR	857277	ReturnType	int		856591	1					
ANR	857278	Identifier	main		856591	2					
ANR	857279	ParameterList	"int argc , char * * argv"		856591	3					
ANR	857280	Parameter	int argc	30:9:1080:1087	856591	0	True				
ANR	857281	ParameterType	int		856591	0					
ANR	857282	Identifier	argc		856591	1					
ANR	857283	Parameter	char * * argv	30:19:1090:1100	856591	1	True				
ANR	857284	ParameterType	char * *		856591	0					
ANR	857285	Identifier	argv		856591	1					
ANR	857286	CFGEntryNode	ENTRY		856591		True				
ANR	857287	CFGExitNode	EXIT		856591		True				
ANR	857288	Symbol	ru . monitorLogFile		856591						
ANR	857289	Symbol	ru . readEvent		856591						
ANR	857290	Symbol	ULOG_SUBMIT		856591						
ANR	857291	Symbol	p_funcs		856591						
ANR	857292	Symbol	* argv		856591						
ANR	857293	Symbol	argnum		856591						
ANR	857294	Symbol	ce . CheckAllJobs		856591						
ANR	857295	Symbol	* e -> eventNumber		856591						
ANR	857296	Symbol	* argnum		856591						
ANR	857297	Symbol	ULOG_JOB_HELD		856591						
ANR	857298	Symbol	checkAllResult		856591						
ANR	857299	Symbol	ee -> submitEventLogNotes		856591						
ANR	857300	Symbol	ce . CheckAnEvent		856591						
ANR	857301	Symbol	strcmp		856591						
ANR	857302	Symbol	ee		856591						
ANR	857303	Symbol	NULL		856591						
ANR	857304	Symbol	get_param_functions		856591						
ANR	857305	Symbol	* * e		856591						
ANR	857306	Symbol	ULOG_JOB_ABORTED		856591						
ANR	857307	Symbol	DebugFlags		856591						
ANR	857308	Symbol	stderr		856591						
ANR	857309	Symbol	* ULogEventNumberNames		856591						
ANR	857310	Symbol	done		856591						
ANR	857311	Symbol	logFiles		856591						
ANR	857312	Symbol	filename		856591						
ANR	857313	Symbol	errstack		856591						
ANR	857314	Symbol	CheckEvents :: ResultToString		856591						
ANR	857315	Symbol	CheckEvents :: EVENT_OKAY		856591						
ANR	857316	Symbol	* outcome		856591						
ANR	857317	Symbol	true		856591						
ANR	857318	Symbol	e -> subproc		856591						
ANR	857319	Symbol	totalSubmitted		856591						
ANR	857320	Symbol	ULOG_EXECUTABLE_ERROR		856591						
ANR	857321	Symbol	ru . unmonitorLogFile		856591						
ANR	857322	Symbol	ULogEventNumberNames		856591						
ANR	857323	Symbol	ru		856591						
ANR	857324	Symbol	* ee		856591						
ANR	857325	Symbol	e -> proc		856591						
ANR	857326	Symbol	argv		856591						
ANR	857327	Symbol	logsMissing		856591						
ANR	857328	Symbol	netSubmitted		856591						
ANR	857329	Symbol	ee -> getReasonSubCode		856591						
ANR	857330	Symbol	result		856591						
ANR	857331	Symbol	errorMsg . Value		856591						
ANR	857332	Symbol	ee -> getReasonCode		856591						
ANR	857333	Symbol	ULogEventOutcomeNames		856591						
ANR	857334	Symbol	outcome		856591						
ANR	857335	Symbol	ULOG_JOB_TERMINATED		856591						
ANR	857336	Symbol	argc		856591						
ANR	857337	Symbol	logFiles . next		856591						
ANR	857338	Symbol	ce		856591						
ANR	857339	Symbol	e -> eventNumber		856591						
ANR	857340	Symbol	e		856591						
ANR	857341	Symbol	Termlog		856591						
ANR	857342	Symbol	D_ALWAYS		856591						
ANR	857343	Symbol	false		856591						
ANR	857344	Symbol	errorMsg		856591						
ANR	857345	Symbol	e -> cluster		856591						
ANR	857346	Symbol	* e		856591						
ANR	857347	Symbol	filestring		856591						
ANR	857348	Symbol	errstack . getFullText		856591						
ANR	857349	Symbol	* ULogEventOutcomeNames		856591						
