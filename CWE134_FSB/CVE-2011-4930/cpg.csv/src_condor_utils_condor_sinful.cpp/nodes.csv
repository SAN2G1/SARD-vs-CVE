command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4661855	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_condor_sinful.cpp								
ANR	4661856	Function	urlDecode	29:0:1009:1743							
ANR	4661857	FunctionDef	"urlDecode (char const * str , size_t max , std :: string & result)"		4661856	0					
ANR	4661858	CompoundStatement		31:0:1079:1743	4661856	0					
ANR	4661859	IdentifierDeclStatement	size_t consumed = 0 ;	32:1:1082:1101	4661856	0	True				
ANR	4661860	IdentifierDecl	consumed = 0		4661856	0					
ANR	4661861	IdentifierDeclType	size_t		4661856	0					
ANR	4661862	Identifier	consumed		4661856	1					
ANR	4661863	AssignmentExpression	consumed = 0		4661856	2		=			
ANR	4661864	Identifier	consumed		4661856	0					
ANR	4661865	PrimaryExpression	0		4661856	1					
ANR	4661866	WhileStatement	while ( * str )		4661856	1					
ANR	4661867	Condition	* str	33:7:1110:1113	4661856	0	True				
ANR	4661868	UnaryOperationExpression	* str		4661856	0					
ANR	4661869	UnaryOperator	*		4661856	0					
ANR	4661870	Identifier	str		4661856	1					
ANR	4661871	CompoundStatement		4:2:40:69	4661856	1					
ANR	4661872	IdentifierDeclStatement	"size_t len = strcspn ( str , ""%"" ) ;"	34:2:1120:1149	4661856	0	True				
ANR	4661873	IdentifierDecl	"len = strcspn ( str , ""%"" )"		4661856	0					
ANR	4661874	IdentifierDeclType	size_t		4661856	0					
ANR	4661875	Identifier	len		4661856	1					
ANR	4661876	AssignmentExpression	"len = strcspn ( str , ""%"" )"		4661856	2		=			
ANR	4661877	Identifier	len		4661856	0					
ANR	4661878	CallExpression	"strcspn ( str , ""%"" )"		4661856	1					
ANR	4661879	Callee	strcspn		4661856	0					
ANR	4661880	Identifier	strcspn		4661856	0					
ANR	4661881	ArgumentList	str		4661856	1					
ANR	4661882	Argument	str		4661856	0					
ANR	4661883	Identifier	str		4661856	0					
ANR	4661884	Argument	"""%"""		4661856	1					
ANR	4661885	PrimaryExpression	"""%"""		4661856	0					
ANR	4661886	IfStatement	if ( len + consumed > max )		4661856	1					
ANR	4661887	Condition	len + consumed > max	35:6:1157:1176	4661856	0	True				
ANR	4661888	RelationalExpression	len + consumed > max		4661856	0		>			
ANR	4661889	AdditiveExpression	len + consumed		4661856	0		+			
ANR	4661890	Identifier	len		4661856	0					
ANR	4661891	Identifier	consumed		4661856	1					
ANR	4661892	Identifier	max		4661856	1					
ANR	4661893	CompoundStatement		5:29:100:100	4661856	1					
ANR	4661894	ExpressionStatement	len = max - consumed	36:3:1185:1205	4661856	0	True				
ANR	4661895	AssignmentExpression	len = max - consumed		4661856	0		=			
ANR	4661896	Identifier	len		4661856	0					
ANR	4661897	AdditiveExpression	max - consumed		4661856	1		-			
ANR	4661898	Identifier	max		4661856	0					
ANR	4661899	Identifier	consumed		4661856	1					
ANR	4661900	ExpressionStatement	"result . append ( str , 0 , len )"	38:2:1213:1237	4661856	2	True				
ANR	4661901	CallExpression	"result . append ( str , 0 , len )"		4661856	0					
ANR	4661902	Callee	result . append		4661856	0					
ANR	4661903	MemberAccess	result . append		4661856	0					
ANR	4661904	Identifier	result		4661856	0					
ANR	4661905	Identifier	append		4661856	1					
ANR	4661906	ArgumentList	str		4661856	1					
ANR	4661907	Argument	str		4661856	0					
ANR	4661908	Identifier	str		4661856	0					
ANR	4661909	Argument	0		4661856	1					
ANR	4661910	PrimaryExpression	0		4661856	0					
ANR	4661911	Argument	len		4661856	2					
ANR	4661912	Identifier	len		4661856	0					
ANR	4661913	ExpressionStatement	str += len	39:2:1241:1251	4661856	3	True				
ANR	4661914	AssignmentExpression	str += len		4661856	0		+=			
ANR	4661915	Identifier	str		4661856	0					
ANR	4661916	Identifier	len		4661856	1					
ANR	4661917	ExpressionStatement	consumed += len	40:2:1255:1270	4661856	4	True				
ANR	4661918	AssignmentExpression	consumed += len		4661856	0		+=			
ANR	4661919	Identifier	consumed		4661856	0					
ANR	4661920	Identifier	len		4661856	1					
ANR	4661921	IfStatement	if ( consumed == max )		4661856	5					
ANR	4661922	Condition	consumed == max	41:6:1278:1292	4661856	0	True				
ANR	4661923	EqualityExpression	consumed == max		4661856	0		==			
ANR	4661924	Identifier	consumed		4661856	0					
ANR	4661925	Identifier	max		4661856	1					
ANR	4661926	CompoundStatement		11:24:216:216	4661856	1					
ANR	4661927	BreakStatement	break ;	42:3:1301:1306	4661856	0	True				
ANR	4661928	IfStatement	if ( * str == '%' )		4661856	6					
ANR	4661929	Condition	* str == '%'	44:6:1318:1328	4661856	0	True				
ANR	4661930	EqualityExpression	* str == '%'		4661856	0		==			
ANR	4661931	UnaryOperationExpression	* str		4661856	0					
ANR	4661932	UnaryOperator	*		4661856	0					
ANR	4661933	Identifier	str		4661856	1					
ANR	4661934	PrimaryExpression	'%'		4661856	1					
ANR	4661935	CompoundStatement		16:3:273:278	4661856	1					
ANR	4661936	IdentifierDeclStatement	char ch = 0 ;	45:3:1337:1348	4661856	0	True				
ANR	4661937	IdentifierDecl	ch = 0		4661856	0					
ANR	4661938	IdentifierDeclType	char		4661856	0					
ANR	4661939	Identifier	ch		4661856	1					
ANR	4661940	AssignmentExpression	ch = 0		4661856	2		=			
ANR	4661941	Identifier	ch		4661856	0					
ANR	4661942	PrimaryExpression	0		4661856	1					
ANR	4661943	IdentifierDeclStatement	int i ;	46:3:1353:1358	4661856	1	True				
ANR	4661944	IdentifierDecl	i		4661856	0					
ANR	4661945	IdentifierDeclType	int		4661856	0					
ANR	4661946	Identifier	i		4661856	1					
ANR	4661947	ExpressionStatement	str ++	47:3:1363:1368	4661856	2	True				
ANR	4661948	PostIncDecOperationExpression	str ++		4661856	0					
ANR	4661949	Identifier	str		4661856	0					
ANR	4661950	IncDec	++		4661856	1					
ANR	4661951	ExpressionStatement	consumed ++	48:3:1373:1383	4661856	3	True				
ANR	4661952	PostIncDecOperationExpression	consumed ++		4661856	0					
ANR	4661953	Identifier	consumed		4661856	0					
ANR	4661954	IncDec	++		4661856	1					
ANR	4661955	ForStatement	"for ( i = 0 ; i < 2 ; i ++ , str ++ , consumed ++ )"		4661856	4					
ANR	4661956	ForInit	i = 0 ;	49:7:1392:1395	4661856	0	True				
ANR	4661957	AssignmentExpression	i = 0		4661856	0		=			
ANR	4661958	Identifier	i		4661856	0					
ANR	4661959	PrimaryExpression	0		4661856	1					
ANR	4661960	Condition	i < 2	49:11:1396:1398	4661856	1	True				
ANR	4661961	RelationalExpression	i < 2		4661856	0		<			
ANR	4661962	Identifier	i		4661856	0					
ANR	4661963	PrimaryExpression	2		4661856	1					
ANR	4661964	Expression	"i ++ , str ++ , consumed ++"	49:15:1400:1419	4661856	2	True				
ANR	4661965	PostIncDecOperationExpression	i ++		4661856	0					
ANR	4661966	Identifier	i		4661856	0					
ANR	4661967	IncDec	++		4661856	1					
ANR	4661968	Expression	"str ++ , consumed ++"		4661856	1					
ANR	4661969	PostIncDecOperationExpression	str ++		4661856	0					
ANR	4661970	Identifier	str		4661856	0					
ANR	4661971	IncDec	++		4661856	1					
ANR	4661972	PostIncDecOperationExpression	consumed ++		4661856	1					
ANR	4661973	Identifier	consumed		4661856	0					
ANR	4661974	IncDec	++		4661856	1					
ANR	4661975	CompoundStatement		19:37:342:342	4661856	3					
ANR	4661976	ExpressionStatement	ch = ch << 4	50:4:1428:1438	4661856	0	True				
ANR	4661977	AssignmentExpression	ch = ch << 4		4661856	0		=			
ANR	4661978	Identifier	ch		4661856	0					
ANR	4661979	ShiftExpression	ch << 4		4661856	1		<<			
ANR	4661980	Identifier	ch		4661856	0					
ANR	4661981	PrimaryExpression	4		4661856	1					
ANR	4661982	IfStatement	if ( * str >= '0' && * str <= '9' )		4661856	1					
ANR	4661983	Condition	* str >= '0' && * str <= '9'	51:8:1448:1473	4661856	0	True				
ANR	4661984	AndExpression	* str >= '0' && * str <= '9'		4661856	0		&&			
ANR	4661985	RelationalExpression	* str >= '0'		4661856	0		>=			
ANR	4661986	UnaryOperationExpression	* str		4661856	0					
ANR	4661987	UnaryOperator	*		4661856	0					
ANR	4661988	Identifier	str		4661856	1					
ANR	4661989	PrimaryExpression	'0'		4661856	1					
ANR	4661990	RelationalExpression	* str <= '9'		4661856	1		<=			
ANR	4661991	UnaryOperationExpression	* str		4661856	0					
ANR	4661992	UnaryOperator	*		4661856	0					
ANR	4661993	Identifier	str		4661856	1					
ANR	4661994	PrimaryExpression	'9'		4661856	1					
ANR	4661995	CompoundStatement		21:37:397:397	4661856	1					
ANR	4661996	ExpressionStatement	ch |= * str - '0'	52:5:1484:1500	4661856	0	True				
ANR	4661997	AssignmentExpression	ch |= * str - '0'		4661856	0		|=			
ANR	4661998	Identifier	ch		4661856	0					
ANR	4661999	AdditiveExpression	* str - '0'		4661856	1		-			
ANR	4662000	UnaryOperationExpression	* str		4661856	0					
ANR	4662001	UnaryOperator	*		4661856	0					
ANR	4662002	Identifier	str		4661856	1					
ANR	4662003	PrimaryExpression	'0'		4661856	1					
ANR	4662004	ElseStatement	else		4661856	0					
ANR	4662005	IfStatement	if ( * str >= 'a' && * str <= 'f' )		4661856	0					
ANR	4662006	Condition	* str >= 'a' && * str <= 'f'	54:13:1521:1546	4661856	0	True				
ANR	4662007	AndExpression	* str >= 'a' && * str <= 'f'		4661856	0		&&			
ANR	4662008	RelationalExpression	* str >= 'a'		4661856	0		>=			
ANR	4662009	UnaryOperationExpression	* str		4661856	0					
ANR	4662010	UnaryOperator	*		4661856	0					
ANR	4662011	Identifier	str		4661856	1					
ANR	4662012	PrimaryExpression	'a'		4661856	1					
ANR	4662013	RelationalExpression	* str <= 'f'		4661856	1		<=			
ANR	4662014	UnaryOperationExpression	* str		4661856	0					
ANR	4662015	UnaryOperator	*		4661856	0					
ANR	4662016	Identifier	str		4661856	1					
ANR	4662017	PrimaryExpression	'f'		4661856	1					
ANR	4662018	CompoundStatement		24:42:470:470	4661856	1					
ANR	4662019	ExpressionStatement	ch |= * str - 'a' + 10	55:5:1557:1578	4661856	0	True				
ANR	4662020	AssignmentExpression	ch |= * str - 'a' + 10		4661856	0		|=			
ANR	4662021	Identifier	ch		4661856	0					
ANR	4662022	AdditiveExpression	* str - 'a' + 10		4661856	1		-			
ANR	4662023	UnaryOperationExpression	* str		4661856	0					
ANR	4662024	UnaryOperator	*		4661856	0					
ANR	4662025	Identifier	str		4661856	1					
ANR	4662026	AdditiveExpression	'a' + 10		4661856	1		+			
ANR	4662027	PrimaryExpression	'a'		4661856	0					
ANR	4662028	PrimaryExpression	10		4661856	1					
ANR	4662029	ElseStatement	else		4661856	0					
ANR	4662030	IfStatement	if ( * str >= 'A' && * str <= 'F' )		4661856	0					
ANR	4662031	Condition	* str >= 'A' && * str <= 'F'	57:13:1599:1624	4661856	0	True				
ANR	4662032	AndExpression	* str >= 'A' && * str <= 'F'		4661856	0		&&			
ANR	4662033	RelationalExpression	* str >= 'A'		4661856	0		>=			
ANR	4662034	UnaryOperationExpression	* str		4661856	0					
ANR	4662035	UnaryOperator	*		4661856	0					
ANR	4662036	Identifier	str		4661856	1					
ANR	4662037	PrimaryExpression	'A'		4661856	1					
ANR	4662038	RelationalExpression	* str <= 'F'		4661856	1		<=			
ANR	4662039	UnaryOperationExpression	* str		4661856	0					
ANR	4662040	UnaryOperator	*		4661856	0					
ANR	4662041	Identifier	str		4661856	1					
ANR	4662042	PrimaryExpression	'F'		4661856	1					
ANR	4662043	CompoundStatement		27:42:548:548	4661856	1					
ANR	4662044	ExpressionStatement	ch |= * str - 'A' + 10	58:5:1635:1656	4661856	0	True				
ANR	4662045	AssignmentExpression	ch |= * str - 'A' + 10		4661856	0		|=			
ANR	4662046	Identifier	ch		4661856	0					
ANR	4662047	AdditiveExpression	* str - 'A' + 10		4661856	1		-			
ANR	4662048	UnaryOperationExpression	* str		4661856	0					
ANR	4662049	UnaryOperator	*		4661856	0					
ANR	4662050	Identifier	str		4661856	1					
ANR	4662051	AdditiveExpression	'A' + 10		4661856	1		+			
ANR	4662052	PrimaryExpression	'A'		4661856	0					
ANR	4662053	PrimaryExpression	10		4661856	1					
ANR	4662054	ElseStatement	else		4661856	0					
ANR	4662055	CompoundStatement		30:9:593:593	4661856	0					
ANR	4662056	ReturnStatement	return false ;	61:5:1680:1692	4661856	0	True				
ANR	4662057	Identifier	false		4661856	0					
ANR	4662058	ExpressionStatement	result += ch	64:3:1708:1720	4661856	5	True				
ANR	4662059	AssignmentExpression	result += ch		4661856	0		+=			
ANR	4662060	Identifier	result		4661856	0					
ANR	4662061	Identifier	ch		4661856	1					
ANR	4662062	ReturnStatement	return true ;	67:1:1730:1741	4661856	2	True				
ANR	4662063	Identifier	true		4661856	0					
ANR	4662064	ReturnType	static bool		4661856	1					
ANR	4662065	Identifier	urlDecode		4661856	2					
ANR	4662066	ParameterList	"char const * str , size_t max , std :: string & result"		4661856	3					
ANR	4662067	Parameter	char const * str	30:10:1031:1045	4661856	0	True				
ANR	4662068	ParameterType	char const *		4661856	0					
ANR	4662069	Identifier	str		4661856	1					
ANR	4662070	Parameter	size_t max	30:26:1047:1056	4661856	1	True				
ANR	4662071	ParameterType	size_t		4661856	0					
ANR	4662072	Identifier	max		4661856	1					
ANR	4662073	Parameter	std :: string & result	30:37:1058:1076	4661856	2	True				
ANR	4662074	ParameterType	std :: string &		4661856	0					
ANR	4662075	Identifier	result		4661856	1					
ANR	4662076	CFGEntryNode	ENTRY		4661856		True				
ANR	4662077	CFGExitNode	EXIT		4661856		True				
ANR	4662078	Symbol	str		4661856						
ANR	4662079	Symbol	result		4661856						
ANR	4662080	Symbol	consumed		4661856						
ANR	4662081	Symbol	len		4661856						
ANR	4662082	Symbol	max		4661856						
ANR	4662083	Symbol	ch		4661856						
ANR	4662084	Symbol	false		4661856						
ANR	4662085	Symbol	true		4661856						
ANR	4662086	Symbol	i		4661856						
ANR	4662087	Symbol	* str		4661856						
ANR	4662088	Symbol	strcspn		4661856						
ANR	4662089	Function	needsUrlEncodeEscape	70:0:1746:2025							
ANR	4662090	FunctionDef	needsUrlEncodeEscape (char ch)		4662089	0					
ANR	4662091	CompoundStatement		72:0:1795:2025	4662089	0					
ANR	4662092	IfStatement	if ( isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#' )		4662089	0					
ANR	4662093	Condition	isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'	75:5:1911:1986	4662089	0	True				
ANR	4662094	OrExpression	isalnum ( ch ) || ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'		4662089	0		||			
ANR	4662095	CallExpression	isalnum ( ch )		4662089	0					
ANR	4662096	Callee	isalnum		4662089	0					
ANR	4662097	Identifier	isalnum		4662089	0					
ANR	4662098	ArgumentList	ch		4662089	1					
ANR	4662099	Argument	ch		4662089	0					
ANR	4662100	Identifier	ch		4662089	0					
ANR	4662101	OrExpression	ch == '.' || ch == '_' || ch == '-' || ch == ':' || ch == '#'		4662089	1		||			
ANR	4662102	EqualityExpression	ch == '.'		4662089	0		==			
ANR	4662103	Identifier	ch		4662089	0					
ANR	4662104	PrimaryExpression	'.'		4662089	1					
ANR	4662105	OrExpression	ch == '_' || ch == '-' || ch == ':' || ch == '#'		4662089	1		||			
ANR	4662106	EqualityExpression	ch == '_'		4662089	0		==			
ANR	4662107	Identifier	ch		4662089	0					
ANR	4662108	PrimaryExpression	'_'		4662089	1					
ANR	4662109	OrExpression	ch == '-' || ch == ':' || ch == '#'		4662089	1		||			
ANR	4662110	EqualityExpression	ch == '-'		4662089	0		==			
ANR	4662111	Identifier	ch		4662089	0					
ANR	4662112	PrimaryExpression	'-'		4662089	1					
ANR	4662113	OrExpression	ch == ':' || ch == '#'		4662089	1		||			
ANR	4662114	EqualityExpression	ch == ':'		4662089	0		==			
ANR	4662115	Identifier	ch		4662089	0					
ANR	4662116	PrimaryExpression	':'		4662089	1					
ANR	4662117	EqualityExpression	ch == '#'		4662089	1		==			
ANR	4662118	Identifier	ch		4662089	0					
ANR	4662119	PrimaryExpression	'#'		4662089	1					
ANR	4662120	CompoundStatement		4:84:194:194	4662089	1					
ANR	4662121	ReturnStatement	return false ;	76:2:1994:2006	4662089	0	True				
ANR	4662122	Identifier	false		4662089	0					
ANR	4662123	ReturnStatement	return true ;	78:1:2012:2023	4662089	1	True				
ANR	4662124	Identifier	true		4662089	0					
ANR	4662125	ReturnType	static inline bool		4662089	1					
ANR	4662126	Identifier	needsUrlEncodeEscape		4662089	2					
ANR	4662127	ParameterList	char ch		4662089	3					
ANR	4662128	Parameter	char ch	71:21:1786:1792	4662089	0	True				
ANR	4662129	ParameterType	char		4662089	0					
ANR	4662130	Identifier	ch		4662089	1					
ANR	4662131	CFGEntryNode	ENTRY		4662089		True				
ANR	4662132	CFGExitNode	EXIT		4662089		True				
ANR	4662133	Symbol	isalnum		4662089						
ANR	4662134	Symbol	ch		4662089						
ANR	4662135	Symbol	false		4662089						
ANR	4662136	Symbol	true		4662089						
ANR	4662137	Function	urlEncode	81:0:2028:2336							
ANR	4662138	FunctionDef	"urlEncode (char const * str , std :: string & result)"		4662137	0					
ANR	4662139	CompoundStatement		83:0:2087:2336	4662137	0					
ANR	4662140	WhileStatement	while ( * str )		4662137	0					
ANR	4662141	Condition	* str	84:7:2096:2099	4662137	0	True				
ANR	4662142	UnaryOperationExpression	* str		4662137	0					
ANR	4662143	UnaryOperator	*		4662137	0					
ANR	4662144	Identifier	str		4662137	1					
ANR	4662145	CompoundStatement		3:2:18:32	4662137	1					
ANR	4662146	IdentifierDeclStatement	size_t len = 0 ;	85:2:2106:2120	4662137	0	True				
ANR	4662147	IdentifierDecl	len = 0		4662137	0					
ANR	4662148	IdentifierDeclType	size_t		4662137	0					
ANR	4662149	Identifier	len		4662137	1					
ANR	4662150	AssignmentExpression	len = 0		4662137	2		=			
ANR	4662151	Identifier	len		4662137	0					
ANR	4662152	PrimaryExpression	0		4662137	1					
ANR	4662153	WhileStatement	while ( str [ len ] && ! needsUrlEncodeEscape ( str [ len ] ) )		4662137	1					
ANR	4662154	Condition	str [ len ] && ! needsUrlEncodeEscape ( str [ len ] )	86:9:2131:2173	4662137	0	True				
ANR	4662155	AndExpression	str [ len ] && ! needsUrlEncodeEscape ( str [ len ] )		4662137	0		&&			
ANR	4662156	ArrayIndexing	str [ len ]		4662137	0					
ANR	4662157	Identifier	str		4662137	0					
ANR	4662158	Identifier	len		4662137	1					
ANR	4662159	UnaryOperationExpression	! needsUrlEncodeEscape ( str [ len ] )		4662137	1					
ANR	4662160	UnaryOperator	!		4662137	0					
ANR	4662161	CallExpression	needsUrlEncodeEscape ( str [ len ] )		4662137	1					
ANR	4662162	Callee	needsUrlEncodeEscape		4662137	0					
ANR	4662163	Identifier	needsUrlEncodeEscape		4662137	0					
ANR	4662164	ArgumentList	str [ len ]		4662137	1					
ANR	4662165	Argument	str [ len ]		4662137	0					
ANR	4662166	ArrayIndexing	str [ len ]		4662137	0					
ANR	4662167	Identifier	str		4662137	0					
ANR	4662168	Identifier	len		4662137	1					
ANR	4662169	CompoundStatement		4:55:89:89	4662137	1					
ANR	4662170	ExpressionStatement	len ++	87:3:2182:2187	4662137	0	True				
ANR	4662171	PostIncDecOperationExpression	len ++		4662137	0					
ANR	4662172	Identifier	len		4662137	0					
ANR	4662173	IncDec	++		4662137	1					
ANR	4662174	ExpressionStatement	"result . append ( str , 0 , len )"	90:2:2196:2220	4662137	2	True				
ANR	4662175	CallExpression	"result . append ( str , 0 , len )"		4662137	0					
ANR	4662176	Callee	result . append		4662137	0					
ANR	4662177	MemberAccess	result . append		4662137	0					
ANR	4662178	Identifier	result		4662137	0					
ANR	4662179	Identifier	append		4662137	1					
ANR	4662180	ArgumentList	str		4662137	1					
ANR	4662181	Argument	str		4662137	0					
ANR	4662182	Identifier	str		4662137	0					
ANR	4662183	Argument	0		4662137	1					
ANR	4662184	PrimaryExpression	0		4662137	0					
ANR	4662185	Argument	len		4662137	2					
ANR	4662186	Identifier	len		4662137	0					
ANR	4662187	ExpressionStatement	str += len	91:2:2224:2234	4662137	3	True				
ANR	4662188	AssignmentExpression	str += len		4662137	0		+=			
ANR	4662189	Identifier	str		4662137	0					
ANR	4662190	Identifier	len		4662137	1					
ANR	4662191	IfStatement	if ( * str )		4662137	4					
ANR	4662192	Condition	* str	92:6:2242:2245	4662137	0	True				
ANR	4662193	UnaryOperationExpression	* str		4662137	0					
ANR	4662194	UnaryOperator	*		4662137	0					
ANR	4662195	Identifier	str		4662137	1					
ANR	4662196	CompoundStatement		11:3:166:178	4662137	1					
ANR	4662197	IdentifierDeclStatement	char code [ 4 ] ;	93:3:2254:2266	4662137	0	True				
ANR	4662198	IdentifierDecl	code [ 4 ]		4662137	0					
ANR	4662199	IdentifierDeclType	char [ 4 ]		4662137	0					
ANR	4662200	Identifier	code		4662137	1					
ANR	4662201	PrimaryExpression	4		4662137	2					
ANR	4662202	ExpressionStatement	"sprintf ( code , ""%%%02x"" , * str )"	94:3:2271:2298	4662137	1	True				
ANR	4662203	CallExpression	"sprintf ( code , ""%%%02x"" , * str )"		4662137	0					
ANR	4662204	Callee	sprintf		4662137	0					
ANR	4662205	Identifier	sprintf		4662137	0					
ANR	4662206	ArgumentList	code		4662137	1					
ANR	4662207	Argument	code		4662137	0					
ANR	4662208	Identifier	code		4662137	0					
ANR	4662209	Argument	"""%%%02x"""		4662137	1					
ANR	4662210	PrimaryExpression	"""%%%02x"""		4662137	0					
ANR	4662211	Argument	* str		4662137	2					
ANR	4662212	UnaryOperationExpression	* str		4662137	0					
ANR	4662213	UnaryOperator	*		4662137	0					
ANR	4662214	Identifier	str		4662137	1					
ANR	4662215	ExpressionStatement	result += code	95:3:2303:2317	4662137	2	True				
ANR	4662216	AssignmentExpression	result += code		4662137	0		+=			
ANR	4662217	Identifier	result		4662137	0					
ANR	4662218	Identifier	code		4662137	1					
ANR	4662219	ExpressionStatement	str ++	96:3:2322:2327	4662137	3	True				
ANR	4662220	PostIncDecOperationExpression	str ++		4662137	0					
ANR	4662221	Identifier	str		4662137	0					
ANR	4662222	IncDec	++		4662137	1					
ANR	4662223	ReturnType	static void		4662137	1					
ANR	4662224	Identifier	urlEncode		4662137	2					
ANR	4662225	ParameterList	"char const * str , std :: string & result"		4662137	3					
ANR	4662226	Parameter	char const * str	82:10:2050:2064	4662137	0	True				
ANR	4662227	ParameterType	char const *		4662137	0					
ANR	4662228	Identifier	str		4662137	1					
ANR	4662229	Parameter	std :: string & result	82:26:2066:2084	4662137	1	True				
ANR	4662230	ParameterType	std :: string &		4662137	0					
ANR	4662231	Identifier	result		4662137	1					
ANR	4662232	CFGEntryNode	ENTRY		4662137		True				
ANR	4662233	CFGExitNode	EXIT		4662137		True				
ANR	4662234	Symbol	str		4662137						
ANR	4662235	Symbol	result		4662137						
ANR	4662236	Symbol	code		4662137						
ANR	4662237	Symbol	len		4662137						
ANR	4662238	Symbol	needsUrlEncodeEscape		4662137						
ANR	4662239	Symbol	* str		4662137						
ANR	4662240	Symbol	* len		4662137						
ANR	4662241	Function	parseUrlEncodedParams	101:0:2339:3578							
ANR	4662242	FunctionDef	"parseUrlEncodedParams (char const * str , map_type & params)"		4662241	0					
ANR	4662243	CompoundStatement		103:0:2436:3578	4662241	0					
ANR	4662244	ExpressionStatement	ASSERT ( str )	110:1:2713:2726	4662241	0	True				
ANR	4662245	CallExpression	ASSERT ( str )		4662241	0					
ANR	4662246	Callee	ASSERT		4662241	0					
ANR	4662247	Identifier	ASSERT		4662241	0					
ANR	4662248	ArgumentList	str		4662241	1					
ANR	4662249	Argument	str		4662241	0					
ANR	4662250	Identifier	str		4662241	0					
ANR	4662251	WhileStatement	while ( * str )		4662241	1					
ANR	4662252	Condition	* str	112:8:2737:2740	4662241	0	True				
ANR	4662253	UnaryOperationExpression	* str		4662241	0					
ANR	4662254	UnaryOperator	*		4662241	0					
ANR	4662255	Identifier	str		4662241	1					
ANR	4662256	CompoundStatement		44:2:868:952	4662241	1					
ANR	4662257	WhileStatement	while ( * str == ';' || * str == '&' )		4662241	0					
ANR	4662258	Condition	* str == ';' || * str == '&'	113:9:2755:2780	4662241	0	True				
ANR	4662259	OrExpression	* str == ';' || * str == '&'		4662241	0		||			
ANR	4662260	EqualityExpression	* str == ';'		4662241	0		==			
ANR	4662261	UnaryOperationExpression	* str		4662241	0					
ANR	4662262	UnaryOperator	*		4662241	0					
ANR	4662263	Identifier	str		4662241	1					
ANR	4662264	PrimaryExpression	';'		4662241	1					
ANR	4662265	EqualityExpression	* str == '&'		4662241	1		==			
ANR	4662266	UnaryOperationExpression	* str		4662241	0					
ANR	4662267	UnaryOperator	*		4662241	0					
ANR	4662268	Identifier	str		4662241	1					
ANR	4662269	PrimaryExpression	'&'		4662241	1					
ANR	4662270	CompoundStatement		11:38:347:347	4662241	1					
ANR	4662271	ExpressionStatement	str ++	114:3:2789:2794	4662241	0	True				
ANR	4662272	PostIncDecOperationExpression	str ++		4662241	0					
ANR	4662273	Identifier	str		4662241	0					
ANR	4662274	IncDec	++		4662241	1					
ANR	4662275	IfStatement	if ( ! * str )		4662241	1					
ANR	4662276	Condition	! * str	116:6:2806:2810	4662241	0	True				
ANR	4662277	UnaryOperationExpression	! * str		4662241	0					
ANR	4662278	UnaryOperator	!		4662241	0					
ANR	4662279	UnaryOperationExpression	* str		4662241	1					
ANR	4662280	UnaryOperator	*		4662241	0					
ANR	4662281	Identifier	str		4662241	1					
ANR	4662282	CompoundStatement		14:14:377:377	4662241	1					
ANR	4662283	BreakStatement	break ;	117:3:2819:2824	4662241	0	True				
ANR	4662284	IdentifierDeclStatement	"std :: pair < std :: string , std :: string > keyval ;"	120:2:2833:2874	4662241	2	True				
ANR	4662285	IdentifierDecl	keyval		4662241	0					
ANR	4662286	IdentifierDeclType	"std :: pair < std :: string , std :: string >"		4662241	0					
ANR	4662287	Identifier	keyval		4662241	1					
ANR	4662288	IdentifierDeclStatement	"size_t len = strcspn ( str , ""=&;"" ) ;"	121:2:2878:2909	4662241	3	True				
ANR	4662289	IdentifierDecl	"len = strcspn ( str , ""=&;"" )"		4662241	0					
ANR	4662290	IdentifierDeclType	size_t		4662241	0					
ANR	4662291	Identifier	len		4662241	1					
ANR	4662292	AssignmentExpression	"len = strcspn ( str , ""=&;"" )"		4662241	2		=			
ANR	4662293	Identifier	len		4662241	0					
ANR	4662294	CallExpression	"strcspn ( str , ""=&;"" )"		4662241	1					
ANR	4662295	Callee	strcspn		4662241	0					
ANR	4662296	Identifier	strcspn		4662241	0					
ANR	4662297	ArgumentList	str		4662241	1					
ANR	4662298	Argument	str		4662241	0					
ANR	4662299	Identifier	str		4662241	0					
ANR	4662300	Argument	"""=&;"""		4662241	1					
ANR	4662301	PrimaryExpression	"""=&;"""		4662241	0					
ANR	4662302	IfStatement	if ( ! len )		4662241	4					
ANR	4662303	Condition	! len	123:6:2918:2921	4662241	0	True				
ANR	4662304	UnaryOperationExpression	! len		4662241	0					
ANR	4662305	UnaryOperator	!		4662241	0					
ANR	4662306	Identifier	len		4662241	1					
ANR	4662307	CompoundStatement		21:13:488:488	4662241	1					
ANR	4662308	ReturnStatement	return false ;	124:3:2930:2942	4662241	0	True				
ANR	4662309	Identifier	false		4662241	0					
ANR	4662310	IfStatement	"if ( ! urlDecode ( str , len , keyval . first ) )"		4662241	5					
ANR	4662311	Condition	"! urlDecode ( str , len , keyval . first )"	126:6:2954:2985	4662241	0	True				
ANR	4662312	UnaryOperationExpression	"! urlDecode ( str , len , keyval . first )"		4662241	0					
ANR	4662313	UnaryOperator	!		4662241	0					
ANR	4662314	CallExpression	"urlDecode ( str , len , keyval . first )"		4662241	1					
ANR	4662315	Callee	urlDecode		4662241	0					
ANR	4662316	Identifier	urlDecode		4662241	0					
ANR	4662317	ArgumentList	str		4662241	1					
ANR	4662318	Argument	str		4662241	0					
ANR	4662319	Identifier	str		4662241	0					
ANR	4662320	Argument	len		4662241	1					
ANR	4662321	Identifier	len		4662241	0					
ANR	4662322	Argument	keyval . first		4662241	2					
ANR	4662323	MemberAccess	keyval . first		4662241	0					
ANR	4662324	Identifier	keyval		4662241	0					
ANR	4662325	Identifier	first		4662241	1					
ANR	4662326	CompoundStatement		24:41:552:552	4662241	1					
ANR	4662327	ReturnStatement	return false ;	127:3:2994:3006	4662241	0	True				
ANR	4662328	Identifier	false		4662241	0					
ANR	4662329	ExpressionStatement	str += len	130:2:3015:3025	4662241	6	True				
ANR	4662330	AssignmentExpression	str += len		4662241	0		+=			
ANR	4662331	Identifier	str		4662241	0					
ANR	4662332	Identifier	len		4662241	1					
ANR	4662333	IfStatement	if ( * str == '=' )		4662241	7					
ANR	4662334	Condition	* str == '='	132:6:3034:3044	4662241	0	True				
ANR	4662335	EqualityExpression	* str == '='		4662241	0		==			
ANR	4662336	UnaryOperationExpression	* str		4662241	0					
ANR	4662337	UnaryOperator	*		4662241	0					
ANR	4662338	Identifier	str		4662241	1					
ANR	4662339	PrimaryExpression	'='		4662241	1					
ANR	4662340	CompoundStatement		30:20:611:611	4662241	1					
ANR	4662341	ExpressionStatement	str ++	133:3:3053:3058	4662241	0	True				
ANR	4662342	PostIncDecOperationExpression	str ++		4662241	0					
ANR	4662343	Identifier	str		4662241	0					
ANR	4662344	IncDec	++		4662241	1					
ANR	4662345	ExpressionStatement	"len = strcspn ( str , ""&;"" )"	135:3:3064:3087	4662241	1	True				
ANR	4662346	AssignmentExpression	"len = strcspn ( str , ""&;"" )"		4662241	0		=			
ANR	4662347	Identifier	len		4662241	0					
ANR	4662348	CallExpression	"strcspn ( str , ""&;"" )"		4662241	1					
ANR	4662349	Callee	strcspn		4662241	0					
ANR	4662350	Identifier	strcspn		4662241	0					
ANR	4662351	ArgumentList	str		4662241	1					
ANR	4662352	Argument	str		4662241	0					
ANR	4662353	Identifier	str		4662241	0					
ANR	4662354	Argument	"""&;"""		4662241	1					
ANR	4662355	PrimaryExpression	"""&;"""		4662241	0					
ANR	4662356	IfStatement	"if ( ! urlDecode ( str , len , keyval . second ) )"		4662241	2					
ANR	4662357	Condition	"! urlDecode ( str , len , keyval . second )"	137:7:3097:3129	4662241	0	True				
ANR	4662358	UnaryOperationExpression	"! urlDecode ( str , len , keyval . second )"		4662241	0					
ANR	4662359	UnaryOperator	!		4662241	0					
ANR	4662360	CallExpression	"urlDecode ( str , len , keyval . second )"		4662241	1					
ANR	4662361	Callee	urlDecode		4662241	0					
ANR	4662362	Identifier	urlDecode		4662241	0					
ANR	4662363	ArgumentList	str		4662241	1					
ANR	4662364	Argument	str		4662241	0					
ANR	4662365	Identifier	str		4662241	0					
ANR	4662366	Argument	len		4662241	1					
ANR	4662367	Identifier	len		4662241	0					
ANR	4662368	Argument	keyval . second		4662241	2					
ANR	4662369	MemberAccess	keyval . second		4662241	0					
ANR	4662370	Identifier	keyval		4662241	0					
ANR	4662371	Identifier	second		4662241	1					
ANR	4662372	CompoundStatement		35:43:696:696	4662241	1					
ANR	4662373	ReturnStatement	return false ;	138:4:3139:3151	4662241	0	True				
ANR	4662374	Identifier	false		4662241	0					
ANR	4662375	ExpressionStatement	str += len	141:3:3162:3172	4662241	3	True				
ANR	4662376	AssignmentExpression	str += len		4662241	0		+=			
ANR	4662377	Identifier	str		4662241	0					
ANR	4662378	Identifier	len		4662241	1					
ANR	4662379	IdentifierDeclStatement	"std :: pair < typename map_type :: iterator , bool > insert_result = params . insert ( keyval ) ;"	146:2:3305:3389	4662241	8	True				
ANR	4662380	IdentifierDecl	insert_result = params . insert ( keyval )		4662241	0					
ANR	4662381	IdentifierDeclType	"std :: pair < typename map_type :: iterator , bool >"		4662241	0					
ANR	4662382	Identifier	insert_result		4662241	1					
ANR	4662383	AssignmentExpression	insert_result = params . insert ( keyval )		4662241	2		=			
ANR	4662384	Identifier	insert_result		4662241	0					
ANR	4662385	CallExpression	params . insert ( keyval )		4662241	1					
ANR	4662386	Callee	params . insert		4662241	0					
ANR	4662387	MemberAccess	params . insert		4662241	0					
ANR	4662388	Identifier	params		4662241	0					
ANR	4662389	Identifier	insert		4662241	1					
ANR	4662390	ArgumentList	keyval		4662241	1					
ANR	4662391	Argument	keyval		4662241	0					
ANR	4662392	Identifier	keyval		4662241	0					
ANR	4662393	IfStatement	if ( ! insert_result . second )		4662241	9					
ANR	4662394	Condition	! insert_result . second	149:6:3398:3418	4662241	0	True				
ANR	4662395	UnaryOperationExpression	! insert_result . second		4662241	0					
ANR	4662396	UnaryOperator	!		4662241	0					
ANR	4662397	MemberAccess	insert_result . second		4662241	1					
ANR	4662398	Identifier	insert_result		4662241	0					
ANR	4662399	Identifier	second		4662241	1					
ANR	4662400	CompoundStatement		47:30:985:985	4662241	1					
ANR	4662401	ExpressionStatement	ASSERT ( insert_result . first -> first == keyval . first )	151:3:3455:3507	4662241	0	True				
ANR	4662402	CallExpression	ASSERT ( insert_result . first -> first == keyval . first )		4662241	0					
ANR	4662403	Callee	ASSERT		4662241	0					
ANR	4662404	Identifier	ASSERT		4662241	0					
ANR	4662405	ArgumentList	insert_result . first -> first == keyval . first		4662241	1					
ANR	4662406	Argument	insert_result . first -> first == keyval . first		4662241	0					
ANR	4662407	EqualityExpression	insert_result . first -> first == keyval . first		4662241	0		==			
ANR	4662408	PtrMemberAccess	insert_result . first -> first		4662241	0					
ANR	4662409	MemberAccess	insert_result . first		4662241	0					
ANR	4662410	Identifier	insert_result		4662241	0					
ANR	4662411	Identifier	first		4662241	1					
ANR	4662412	Identifier	first		4662241	1					
ANR	4662413	MemberAccess	keyval . first		4662241	1					
ANR	4662414	Identifier	keyval		4662241	0					
ANR	4662415	Identifier	first		4662241	1					
ANR	4662416	ExpressionStatement	insert_result . first -> second = keyval . second	152:3:3512:3555	4662241	1	True				
ANR	4662417	AssignmentExpression	insert_result . first -> second = keyval . second		4662241	0		=			
ANR	4662418	PtrMemberAccess	insert_result . first -> second		4662241	0					
ANR	4662419	MemberAccess	insert_result . first		4662241	0					
ANR	4662420	Identifier	insert_result		4662241	0					
ANR	4662421	Identifier	first		4662241	1					
ANR	4662422	Identifier	second		4662241	1					
ANR	4662423	MemberAccess	keyval . second		4662241	1					
ANR	4662424	Identifier	keyval		4662241	0					
ANR	4662425	Identifier	second		4662241	1					
ANR	4662426	ReturnStatement	return true ;	155:1:3565:3576	4662241	2	True				
ANR	4662427	Identifier	true		4662241	0					
ANR	4662428	ReturnType	static bool		4662241	1					
ANR	4662429	Identifier	parseUrlEncodedParams		4662241	2					
ANR	4662430	ParameterList	"char const * str , map_type & params"		4662241	3					
ANR	4662431	Parameter	char const * str	102:34:2402:2416	4662241	0	True				
ANR	4662432	ParameterType	char const *		4662241	0					
ANR	4662433	Identifier	str		4662241	1					
ANR	4662434	Parameter	map_type & params	102:50:2418:2433	4662241	1	True				
ANR	4662435	ParameterType	map_type &		4662241	0					
ANR	4662436	Identifier	params		4662241	1					
ANR	4662437	CFGEntryNode	ENTRY		4662241		True				
ANR	4662438	CFGExitNode	EXIT		4662241		True				
ANR	4662439	Symbol	keyval . first		4662241						
ANR	4662440	Symbol	false		4662241						
ANR	4662441	Symbol	urlDecode		4662241						
ANR	4662442	Symbol	insert_result		4662241						
ANR	4662443	Symbol	params		4662241						
ANR	4662444	Symbol	strcspn		4662241						
ANR	4662445	Symbol	* insert_result		4662241						
ANR	4662446	Symbol	insert_result . first -> second		4662241						
ANR	4662447	Symbol	params . insert		4662241						
ANR	4662448	Symbol	str		4662241						
ANR	4662449	Symbol	insert_result . first -> first		4662241						
ANR	4662450	Symbol	len		4662241						
ANR	4662451	Symbol	keyval . second		4662241						
ANR	4662452	Symbol	insert_result . second		4662241						
ANR	4662453	Symbol	true		4662241						
ANR	4662454	Symbol	* str		4662241						
ANR	4662455	Symbol	keyval		4662241						
ANR	4662456	Symbol	insert_result . first		4662241						
ANR	4662457	Symbol	* insert_result . first		4662241						
ANR	4662458	Function	urlEncodeParams	158:0:3581:3980							
ANR	4662459	FunctionDef	urlEncodeParams (map_type const & params)		4662458	0					
ANR	4662460	CompoundStatement		160:0:3669:3980	4662458	0					
ANR	4662461	IdentifierDeclStatement	std :: string result ;	161:1:3672:3690	4662458	0	True				
ANR	4662462	IdentifierDecl	result		4662458	0					
ANR	4662463	IdentifierDeclType	std :: string		4662458	0					
ANR	4662464	Identifier	result		4662458	1					
ANR	4662465	IdentifierDeclStatement	typename map_type :: const_iterator it ;	163:1:3694:3730	4662458	1	True				
ANR	4662466	IdentifierDecl	it		4662458	0					
ANR	4662467	IdentifierDeclType	typename map_type :: const_iterator		4662458	0					
ANR	4662468	Identifier	it		4662458	1					
ANR	4662469	ForStatement	for ( it = params . begin ( ) ; it != params . end ( ) ; it ++ )		4662458	2					
ANR	4662470	ForInit	it = params . begin ( ) ;	164:5:3737:3754	4662458	0	True				
ANR	4662471	AssignmentExpression	it = params . begin ( )		4662458	0		=			
ANR	4662472	Identifier	it		4662458	0					
ANR	4662473	CallExpression	params . begin ( )		4662458	1					
ANR	4662474	Callee	params . begin		4662458	0					
ANR	4662475	MemberAccess	params . begin		4662458	0					
ANR	4662476	Identifier	params		4662458	0					
ANR	4662477	Identifier	begin		4662458	1					
ANR	4662478	ArgumentList			4662458	1					
ANR	4662479	Condition	it != params . end ( )	164:24:3756:3771	4662458	1	True				
ANR	4662480	EqualityExpression	it != params . end ( )		4662458	0		!=			
ANR	4662481	Identifier	it		4662458	0					
ANR	4662482	CallExpression	params . end ( )		4662458	1					
ANR	4662483	Callee	params . end		4662458	0					
ANR	4662484	MemberAccess	params . end		4662458	0					
ANR	4662485	Identifier	params		4662458	0					
ANR	4662486	Identifier	end		4662458	1					
ANR	4662487	ArgumentList			4662458	1					
ANR	4662488	PostIncDecOperationExpression	it ++	164:42:3774:3777	4662458	2	True				
ANR	4662489	Identifier	it		4662458	0					
ANR	4662490	IncDec	++		4662458	1					
ANR	4662491	CompoundStatement		5:48:110:110	4662458	3					
ANR	4662492	IfStatement	if ( result . size ( ) )		4662458	0					
ANR	4662493	Condition	result . size ( )	165:6:3788:3800	4662458	0	True				
ANR	4662494	CallExpression	result . size ( )		4662458	0					
ANR	4662495	Callee	result . size		4662458	0					
ANR	4662496	MemberAccess	result . size		4662458	0					
ANR	4662497	Identifier	result		4662458	0					
ANR	4662498	Identifier	size		4662458	1					
ANR	4662499	ArgumentList			4662458	1					
ANR	4662500	CompoundStatement		6:22:134:134	4662458	1					
ANR	4662501	ExpressionStatement	"result += ""&"""	166:3:3809:3822	4662458	0	True				
ANR	4662502	AssignmentExpression	"result += ""&"""		4662458	0		+=			
ANR	4662503	Identifier	result		4662458	0					
ANR	4662504	PrimaryExpression	"""&"""		4662458	1					
ANR	4662505	ExpressionStatement	"urlEncode ( it -> first . c_str ( ) , result )"	168:2:3830:3865	4662458	1	True				
ANR	4662506	CallExpression	"urlEncode ( it -> first . c_str ( ) , result )"		4662458	0					
ANR	4662507	Callee	urlEncode		4662458	0					
ANR	4662508	Identifier	urlEncode		4662458	0					
ANR	4662509	ArgumentList	it -> first . c_str ( )		4662458	1					
ANR	4662510	Argument	it -> first . c_str ( )		4662458	0					
ANR	4662511	CallExpression	it -> first . c_str ( )		4662458	0					
ANR	4662512	Callee	it -> first . c_str		4662458	0					
ANR	4662513	MemberAccess	it -> first . c_str		4662458	0					
ANR	4662514	PtrMemberAccess	it -> first		4662458	0					
ANR	4662515	Identifier	it		4662458	0					
ANR	4662516	Identifier	first		4662458	1					
ANR	4662517	Identifier	c_str		4662458	1					
ANR	4662518	ArgumentList			4662458	1					
ANR	4662519	Argument	result		4662458	1					
ANR	4662520	Identifier	result		4662458	0					
ANR	4662521	IfStatement	if ( ! it -> second . empty ( ) )		4662458	2					
ANR	4662522	Condition	! it -> second . empty ( )	169:6:3873:3891	4662458	0	True				
ANR	4662523	UnaryOperationExpression	! it -> second . empty ( )		4662458	0					
ANR	4662524	UnaryOperator	!		4662458	0					
ANR	4662525	CallExpression	it -> second . empty ( )		4662458	1					
ANR	4662526	Callee	it -> second . empty		4662458	0					
ANR	4662527	MemberAccess	it -> second . empty		4662458	0					
ANR	4662528	PtrMemberAccess	it -> second		4662458	0					
ANR	4662529	Identifier	it		4662458	0					
ANR	4662530	Identifier	second		4662458	1					
ANR	4662531	Identifier	empty		4662458	1					
ANR	4662532	ArgumentList			4662458	1					
ANR	4662533	CompoundStatement		10:28:225:225	4662458	1					
ANR	4662534	ExpressionStatement	"result += ""="""	170:3:3900:3913	4662458	0	True				
ANR	4662535	AssignmentExpression	"result += ""="""		4662458	0		+=			
ANR	4662536	Identifier	result		4662458	0					
ANR	4662537	PrimaryExpression	"""="""		4662458	1					
ANR	4662538	ExpressionStatement	"urlEncode ( it -> second . c_str ( ) , result )"	171:3:3918:3954	4662458	1	True				
ANR	4662539	CallExpression	"urlEncode ( it -> second . c_str ( ) , result )"		4662458	0					
ANR	4662540	Callee	urlEncode		4662458	0					
ANR	4662541	Identifier	urlEncode		4662458	0					
ANR	4662542	ArgumentList	it -> second . c_str ( )		4662458	1					
ANR	4662543	Argument	it -> second . c_str ( )		4662458	0					
ANR	4662544	CallExpression	it -> second . c_str ( )		4662458	0					
ANR	4662545	Callee	it -> second . c_str		4662458	0					
ANR	4662546	MemberAccess	it -> second . c_str		4662458	0					
ANR	4662547	PtrMemberAccess	it -> second		4662458	0					
ANR	4662548	Identifier	it		4662458	0					
ANR	4662549	Identifier	second		4662458	1					
ANR	4662550	Identifier	c_str		4662458	1					
ANR	4662551	ArgumentList			4662458	1					
ANR	4662552	Argument	result		4662458	1					
ANR	4662553	Identifier	result		4662458	0					
ANR	4662554	ReturnStatement	return result ;	175:1:3965:3978	4662458	3	True				
ANR	4662555	Identifier	result		4662458	0					
ANR	4662556	ReturnType	static std :: string		4662458	1					
ANR	4662557	Identifier	urlEncodeParams		4662458	2					
ANR	4662558	ParameterList	map_type const & params		4662458	3					
ANR	4662559	Parameter	map_type const & params	159:35:3645:3666	4662458	0	True				
ANR	4662560	ParameterType	map_type const &		4662458	0					
ANR	4662561	Identifier	params		4662458	1					
ANR	4662562	CFGEntryNode	ENTRY		4662458		True				
ANR	4662563	CFGExitNode	EXIT		4662458		True				
ANR	4662564	Symbol	result		4662458						
ANR	4662565	Symbol	it -> second . empty		4662458						
ANR	4662566	Symbol	it -> second		4662458						
ANR	4662567	Symbol	* it		4662458						
ANR	4662568	Symbol	result . size		4662458						
ANR	4662569	Symbol	it -> first		4662458						
ANR	4662570	Symbol	it -> second . c_str		4662458						
ANR	4662571	Symbol	it -> first . c_str		4662458						
ANR	4662572	Symbol	params . begin		4662458						
ANR	4662573	Symbol	it		4662458						
ANR	4662574	Symbol	params		4662458						
ANR	4662575	Symbol	params . end		4662458						
ANR	4662576	Function	Sinful :: Sinful	178:0:3983:5182							
ANR	4662577	FunctionDef	Sinful :: Sinful (char const * sinful)		4662576	0					
ANR	4662578	CompoundStatement		179:0:4018:5182	4662576	0					
ANR	4662579	IfStatement	if ( ! sinful )		4662576	0					
ANR	4662580	Condition	! sinful	180:5:4025:4031	4662576	0	True				
ANR	4662581	UnaryOperationExpression	! sinful		4662576	0					
ANR	4662582	UnaryOperator	!		4662576	0					
ANR	4662583	Identifier	sinful		4662576	1					
ANR	4662584	CompoundStatement		2:15:16:16	4662576	1					
ANR	4662585	ExpressionStatement	m_valid = true	181:2:4062:4076	4662576	0	True				
ANR	4662586	AssignmentExpression	m_valid = true		4662576	0		=			
ANR	4662587	Identifier	m_valid		4662576	0					
ANR	4662588	Identifier	true		4662576	1					
ANR	4662589	ElseStatement	else		4662576	0					
ANR	4662590	CompoundStatement		8:2:110:127	4662576	0					
ANR	4662591	IdentifierDeclStatement	char * host = NULL ;	184:2:4091:4106	4662576	0	True				
ANR	4662592	IdentifierDecl	* host = NULL		4662576	0					
ANR	4662593	IdentifierDeclType	char *		4662576	0					
ANR	4662594	Identifier	host		4662576	1					
ANR	4662595	AssignmentExpression	* host = NULL		4662576	2		=			
ANR	4662596	Identifier	NULL		4662576	0					
ANR	4662597	Identifier	NULL		4662576	1					
ANR	4662598	IdentifierDeclStatement	char * port = NULL ;	185:2:4110:4125	4662576	1	True				
ANR	4662599	IdentifierDecl	* port = NULL		4662576	0					
ANR	4662600	IdentifierDeclType	char *		4662576	0					
ANR	4662601	Identifier	port		4662576	1					
ANR	4662602	AssignmentExpression	* port = NULL		4662576	2		=			
ANR	4662603	Identifier	NULL		4662576	0					
ANR	4662604	Identifier	NULL		4662576	1					
ANR	4662605	IdentifierDeclStatement	char * params = NULL ;	186:2:4129:4146	4662576	2	True				
ANR	4662606	IdentifierDecl	* params = NULL		4662576	0					
ANR	4662607	IdentifierDeclType	char *		4662576	0					
ANR	4662608	Identifier	params		4662576	1					
ANR	4662609	AssignmentExpression	* params = NULL		4662576	2		=			
ANR	4662610	Identifier	NULL		4662576	0					
ANR	4662611	Identifier	NULL		4662576	1					
ANR	4662612	IfStatement	if ( * sinful != '<' )		4662576	3					
ANR	4662613	Condition	* sinful != '<'	188:6:4155:4168	4662576	0	True				
ANR	4662614	EqualityExpression	* sinful != '<'		4662576	0		!=			
ANR	4662615	UnaryOperationExpression	* sinful		4662576	0					
ANR	4662616	UnaryOperator	*		4662576	0					
ANR	4662617	Identifier	sinful		4662576	1					
ANR	4662618	PrimaryExpression	'<'		4662576	1					
ANR	4662619	CompoundStatement		10:23:153:153	4662576	1					
ANR	4662620	ExpressionStatement	"m_sinful = ""<"""	189:3:4177:4191	4662576	0	True				
ANR	4662621	AssignmentExpression	"m_sinful = ""<"""		4662576	0		=			
ANR	4662622	Identifier	m_sinful		4662576	0					
ANR	4662623	PrimaryExpression	"""<"""		4662576	1					
ANR	4662624	IfStatement	if ( * sinful == '[' )		4662576	1					
ANR	4662625	Condition	* sinful == '['	193:6:4291:4304	4662576	0	True				
ANR	4662626	EqualityExpression	* sinful == '['		4662576	0		==			
ANR	4662627	UnaryOperationExpression	* sinful		4662576	0					
ANR	4662628	UnaryOperator	*		4662576	0					
ANR	4662629	Identifier	sinful		4662576	1					
ANR	4662630	PrimaryExpression	'['		4662576	1					
ANR	4662631	CompoundStatement		15:22:288:288	4662576	1					
ANR	4662632	ExpressionStatement	m_sinful += sinful	194:4:4321:4339	4662576	0	True				
ANR	4662633	AssignmentExpression	m_sinful += sinful		4662576	0		+=			
ANR	4662634	Identifier	m_sinful		4662576	0					
ANR	4662635	Identifier	sinful		4662576	1					
ANR	4662636	ElseStatement	else		4662576	0					
ANR	4662637	CompoundStatement		19:4:391:437	4662576	0					
ANR	4662638	IdentifierDeclStatement	"const char * first_colon = strchr ( sinful , ':' ) ;"	197:4:4410:4456	4662576	0	True				
ANR	4662639	IdentifierDecl	"* first_colon = strchr ( sinful , ':' )"		4662576	0					
ANR	4662640	IdentifierDeclType	const char *		4662576	0					
ANR	4662641	Identifier	first_colon		4662576	1					
ANR	4662642	AssignmentExpression	"* first_colon = strchr ( sinful , ':' )"		4662576	2		=			
ANR	4662643	Identifier	first_colon		4662576	0					
ANR	4662644	CallExpression	"strchr ( sinful , ':' )"		4662576	1					
ANR	4662645	Callee	strchr		4662576	0					
ANR	4662646	Identifier	strchr		4662576	0					
ANR	4662647	ArgumentList	sinful		4662576	1					
ANR	4662648	Argument	sinful		4662576	0					
ANR	4662649	Identifier	sinful		4662576	0					
ANR	4662650	Argument	':'		4662576	1					
ANR	4662651	PrimaryExpression	':'		4662576	0					
ANR	4662652	IfStatement	"if ( first_colon && strchr ( first_colon + 1 , ':' ) )"		4662576	1					
ANR	4662653	Condition	"first_colon && strchr ( first_colon + 1 , ':' )"	198:7:4465:4505	4662576	0	True				
ANR	4662654	AndExpression	"first_colon && strchr ( first_colon + 1 , ':' )"		4662576	0		&&			
ANR	4662655	Identifier	first_colon		4662576	0					
ANR	4662656	CallExpression	"strchr ( first_colon + 1 , ':' )"		4662576	1					
ANR	4662657	Callee	strchr		4662576	0					
ANR	4662658	Identifier	strchr		4662576	0					
ANR	4662659	ArgumentList	first_colon + 1		4662576	1					
ANR	4662660	Argument	first_colon + 1		4662576	0					
ANR	4662661	AdditiveExpression	first_colon + 1		4662576	0		+			
ANR	4662662	Identifier	first_colon		4662576	0					
ANR	4662663	PrimaryExpression	1		4662576	1					
ANR	4662664	Argument	':'		4662576	1					
ANR	4662665	PrimaryExpression	':'		4662576	0					
ANR	4662666	CompoundStatement		20:50:489:489	4662576	1					
ANR	4662667	ExpressionStatement	m_valid = false	203:5:4737:4752	4662576	0	True				
ANR	4662668	AssignmentExpression	m_valid = false		4662576	0		=			
ANR	4662669	Identifier	m_valid		4662576	0					
ANR	4662670	Identifier	false		4662576	1					
ANR	4662671	ReturnStatement	return ;	204:5:4759:4765	4662576	1	True				
ANR	4662672	ExpressionStatement	m_sinful += sinful	206:4:4777:4795	4662576	2	True				
ANR	4662673	AssignmentExpression	m_sinful += sinful		4662576	0		+=			
ANR	4662674	Identifier	m_sinful		4662576	0					
ANR	4662675	Identifier	sinful		4662576	1					
ANR	4662676	ExpressionStatement	"m_sinful += "">"""	208:3:4805:4820	4662576	2	True				
ANR	4662677	AssignmentExpression	"m_sinful += "">"""		4662576	0		+=			
ANR	4662678	Identifier	m_sinful		4662576	0					
ANR	4662679	PrimaryExpression	""">"""		4662576	1					
ANR	4662680	ElseStatement	else		4662576	0					
ANR	4662681	CompoundStatement		32:7:814:814	4662576	0					
ANR	4662682	ExpressionStatement	m_sinful = sinful	211:3:4838:4855	4662576	0	True				
ANR	4662683	AssignmentExpression	m_sinful = sinful		4662576	0		=			
ANR	4662684	Identifier	m_sinful		4662576	0					
ANR	4662685	Identifier	sinful		4662576	1					
ANR	4662686	ExpressionStatement	"m_valid = split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"	214:2:4864:4921	4662576	4	True				
ANR	4662687	AssignmentExpression	"m_valid = split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"		4662576	0		=			
ANR	4662688	Identifier	m_valid		4662576	0					
ANR	4662689	CallExpression	"split_sin ( m_sinful . c_str ( ) , & host , & port , & params )"		4662576	1					
ANR	4662690	Callee	split_sin		4662576	0					
ANR	4662691	Identifier	split_sin		4662576	0					
ANR	4662692	ArgumentList	m_sinful . c_str ( )		4662576	1					
ANR	4662693	Argument	m_sinful . c_str ( )		4662576	0					
ANR	4662694	CallExpression	m_sinful . c_str ( )		4662576	0					
ANR	4662695	Callee	m_sinful . c_str		4662576	0					
ANR	4662696	MemberAccess	m_sinful . c_str		4662576	0					
ANR	4662697	Identifier	m_sinful		4662576	0					
ANR	4662698	Identifier	c_str		4662576	1					
ANR	4662699	ArgumentList			4662576	1					
ANR	4662700	Argument	& host		4662576	1					
ANR	4662701	UnaryOperationExpression	& host		4662576	0					
ANR	4662702	UnaryOperator	&		4662576	0					
ANR	4662703	Identifier	host		4662576	1					
ANR	4662704	Argument	& port		4662576	2					
ANR	4662705	UnaryOperationExpression	& port		4662576	0					
ANR	4662706	UnaryOperator	&		4662576	0					
ANR	4662707	Identifier	port		4662576	1					
ANR	4662708	Argument	& params		4662576	3					
ANR	4662709	UnaryOperationExpression	& params		4662576	0					
ANR	4662710	UnaryOperator	&		4662576	0					
ANR	4662711	Identifier	params		4662576	1					
ANR	4662712	IfStatement	if ( m_valid )		4662576	5					
ANR	4662713	Condition	m_valid	216:6:4930:4936	4662576	0	True				
ANR	4662714	Identifier	m_valid		4662576	0					
ANR	4662715	CompoundStatement		38:16:921:921	4662576	1					
ANR	4662716	IfStatement	if ( host )		4662576	0					
ANR	4662717	Condition	host	217:7:4949:4952	4662576	0	True				
ANR	4662718	Identifier	host		4662576	0					
ANR	4662719	CompoundStatement		39:14:937:937	4662576	1					
ANR	4662720	ExpressionStatement	m_host = host	218:4:4962:4975	4662576	0	True				
ANR	4662721	AssignmentExpression	m_host = host		4662576	0		=			
ANR	4662722	Identifier	m_host		4662576	0					
ANR	4662723	Identifier	host		4662576	1					
ANR	4662724	IfStatement	if ( port )		4662576	1					
ANR	4662725	Condition	port	220:7:4989:4992	4662576	0	True				
ANR	4662726	Identifier	port		4662576	0					
ANR	4662727	CompoundStatement		42:14:977:977	4662576	1					
ANR	4662728	ExpressionStatement	m_port = port	221:4:5002:5015	4662576	0	True				
ANR	4662729	AssignmentExpression	m_port = port		4662576	0		=			
ANR	4662730	Identifier	m_port		4662576	0					
ANR	4662731	Identifier	port		4662576	1					
ANR	4662732	IfStatement	if ( params )		4662576	2					
ANR	4662733	Condition	params	223:7:5029:5034	4662576	0	True				
ANR	4662734	Identifier	params		4662576	0					
ANR	4662735	CompoundStatement		45:16:1019:1019	4662576	1					
ANR	4662736	IfStatement	"if ( ! parseUrlEncodedParams ( params , m_params ) )"		4662576	0					
ANR	4662737	Condition	"! parseUrlEncodedParams ( params , m_params )"	224:8:5048:5086	4662576	0	True				
ANR	4662738	UnaryOperationExpression	"! parseUrlEncodedParams ( params , m_params )"		4662576	0					
ANR	4662739	UnaryOperator	!		4662576	0					
ANR	4662740	CallExpression	"parseUrlEncodedParams ( params , m_params )"		4662576	1					
ANR	4662741	Callee	parseUrlEncodedParams		4662576	0					
ANR	4662742	Identifier	parseUrlEncodedParams		4662576	0					
ANR	4662743	ArgumentList	params		4662576	1					
ANR	4662744	Argument	params		4662576	0					
ANR	4662745	Identifier	params		4662576	0					
ANR	4662746	Argument	m_params		4662576	1					
ANR	4662747	Identifier	m_params		4662576	0					
ANR	4662748	CompoundStatement		46:50:1071:1071	4662576	1					
ANR	4662749	ExpressionStatement	m_valid = false	225:5:5097:5112	4662576	0	True				
ANR	4662750	AssignmentExpression	m_valid = false		4662576	0		=			
ANR	4662751	Identifier	m_valid		4662576	0					
ANR	4662752	Identifier	false		4662576	1					
ANR	4662753	ExpressionStatement	free ( host )	229:2:5131:5143	4662576	6	True				
ANR	4662754	CallExpression	free ( host )		4662576	0					
ANR	4662755	Callee	free		4662576	0					
ANR	4662756	Identifier	free		4662576	0					
ANR	4662757	ArgumentList	host		4662576	1					
ANR	4662758	Argument	host		4662576	0					
ANR	4662759	Identifier	host		4662576	0					
ANR	4662760	ExpressionStatement	free ( port )	230:2:5147:5159	4662576	7	True				
ANR	4662761	CallExpression	free ( port )		4662576	0					
ANR	4662762	Callee	free		4662576	0					
ANR	4662763	Identifier	free		4662576	0					
ANR	4662764	ArgumentList	port		4662576	1					
ANR	4662765	Argument	port		4662576	0					
ANR	4662766	Identifier	port		4662576	0					
ANR	4662767	ExpressionStatement	free ( params )	231:2:5163:5177	4662576	8	True				
ANR	4662768	CallExpression	free ( params )		4662576	0					
ANR	4662769	Callee	free		4662576	0					
ANR	4662770	Identifier	free		4662576	0					
ANR	4662771	ArgumentList	params		4662576	1					
ANR	4662772	Argument	params		4662576	0					
ANR	4662773	Identifier	params		4662576	0					
ANR	4662774	Identifier	Sinful :: Sinful		4662576	1					
ANR	4662775	ParameterList	char const * sinful		4662576	2					
ANR	4662776	Parameter	char const * sinful	178:15:3998:4015	4662576	0	True				
ANR	4662777	ParameterType	char const *		4662576	0					
ANR	4662778	Identifier	sinful		4662576	1					
ANR	4662779	CFGEntryNode	ENTRY		4662576		True				
ANR	4662780	CFGExitNode	EXIT		4662576		True				
ANR	4662781	Symbol	NULL		4662576						
ANR	4662782	Symbol	m_params		4662576						
ANR	4662783	Symbol	first_colon		4662576						
ANR	4662784	Symbol	parseUrlEncodedParams		4662576						
ANR	4662785	Symbol	false		4662576						
ANR	4662786	Symbol	strchr		4662576						
ANR	4662787	Symbol	* sinful		4662576						
ANR	4662788	Symbol	params		4662576						
ANR	4662789	Symbol	split_sin		4662576						
ANR	4662790	Symbol	& host		4662576						
ANR	4662791	Symbol	m_sinful . c_str		4662576						
ANR	4662792	Symbol	m_host		4662576						
ANR	4662793	Symbol	& port		4662576						
ANR	4662794	Symbol	port		4662576						
ANR	4662795	Symbol	true		4662576						
ANR	4662796	Symbol	host		4662576						
ANR	4662797	Symbol	m_valid		4662576						
ANR	4662798	Symbol	m_port		4662576						
ANR	4662799	Symbol	sinful		4662576						
ANR	4662800	Symbol	m_sinful		4662576						
ANR	4662801	Symbol	& params		4662576						
ANR	4662802	Function	Sinful :: getParam	235:0:5185:5392							
ANR	4662803	FunctionDef	Sinful :: getParam (char const * key)		4662802	0					
ANR	4662804	CompoundStatement		237:0:5238:5392	4662802	0					
ANR	4662805	IdentifierDeclStatement	"std :: map < std :: string , std :: string > :: const_iterator it = m_params . find ( key ) ;"	238:1:5241:5314	4662802	0	True				
ANR	4662806	IdentifierDecl	it = m_params . find ( key )		4662802	0					
ANR	4662807	IdentifierDeclType	"std :: map < std :: string , std :: string > :: const_iterator"		4662802	0					
ANR	4662808	Identifier	it		4662802	1					
ANR	4662809	AssignmentExpression	it = m_params . find ( key )		4662802	2		=			
ANR	4662810	Identifier	it		4662802	0					
ANR	4662811	CallExpression	m_params . find ( key )		4662802	1					
ANR	4662812	Callee	m_params . find		4662802	0					
ANR	4662813	MemberAccess	m_params . find		4662802	0					
ANR	4662814	Identifier	m_params		4662802	0					
ANR	4662815	Identifier	find		4662802	1					
ANR	4662816	ArgumentList	key		4662802	1					
ANR	4662817	Argument	key		4662802	0					
ANR	4662818	Identifier	key		4662802	0					
ANR	4662819	IfStatement	if ( it == m_params . end ( ) )		4662802	1					
ANR	4662820	Condition	it == m_params . end ( )	239:5:5321:5340	4662802	0	True				
ANR	4662821	EqualityExpression	it == m_params . end ( )		4662802	0		==			
ANR	4662822	Identifier	it		4662802	0					
ANR	4662823	CallExpression	m_params . end ( )		4662802	1					
ANR	4662824	Callee	m_params . end		4662802	0					
ANR	4662825	MemberAccess	m_params . end		4662802	0					
ANR	4662826	Identifier	m_params		4662802	0					
ANR	4662827	Identifier	end		4662802	1					
ANR	4662828	ArgumentList			4662802	1					
ANR	4662829	CompoundStatement		3:28:105:105	4662802	1					
ANR	4662830	ReturnStatement	return NULL ;	240:2:5348:5359	4662802	0	True				
ANR	4662831	Identifier	NULL		4662802	0					
ANR	4662832	ReturnStatement	return it -> second . c_str ( ) ;	242:1:5365:5390	4662802	2	True				
ANR	4662833	CallExpression	it -> second . c_str ( )		4662802	0					
ANR	4662834	Callee	it -> second . c_str		4662802	0					
ANR	4662835	MemberAccess	it -> second . c_str		4662802	0					
ANR	4662836	PtrMemberAccess	it -> second		4662802	0					
ANR	4662837	Identifier	it		4662802	0					
ANR	4662838	Identifier	second		4662802	1					
ANR	4662839	Identifier	c_str		4662802	1					
ANR	4662840	ArgumentList			4662802	1					
ANR	4662841	ReturnType	char const *		4662802	1					
ANR	4662842	Identifier	Sinful :: getParam		4662802	2					
ANR	4662843	ParameterList	char const * key		4662802	3					
ANR	4662844	Parameter	char const * key	236:17:5215:5229	4662802	0	True				
ANR	4662845	ParameterType	char const *		4662802	0					
ANR	4662846	Identifier	key		4662802	1					
ANR	4662847	CFGEntryNode	ENTRY		4662802		True				
ANR	4662848	CFGExitNode	EXIT		4662802		True				
ANR	4662849	Symbol	m_params . end		4662802						
ANR	4662850	Symbol	it -> second		4662802						
ANR	4662851	Symbol	* it		4662802						
ANR	4662852	Symbol	m_params		4662802						
ANR	4662853	Symbol	NULL		4662802						
ANR	4662854	Symbol	it -> second . c_str		4662802						
ANR	4662855	Symbol	m_params . find		4662802						
ANR	4662856	Symbol	it		4662802						
ANR	4662857	Symbol	key		4662802						
ANR	4662858	Function	Sinful :: setParam	245:0:5395:5553							
ANR	4662859	FunctionDef	"Sinful :: setParam (char const * key , char const * value)"		4662858	0					
ANR	4662860	CompoundStatement		247:0:5452:5553	4662858	0					
ANR	4662861	IfStatement	if ( ! value )		4662858	0					
ANR	4662862	Condition	! value	248:5:5459:5464	4662858	0	True				
ANR	4662863	UnaryOperationExpression	! value		4662858	0					
ANR	4662864	UnaryOperator	!		4662858	0					
ANR	4662865	Identifier	value		4662858	1					
ANR	4662866	CompoundStatement		2:14:15:15	4662858	1					
ANR	4662867	ExpressionStatement	m_params . erase ( key )	249:2:5472:5491	4662858	0	True				
ANR	4662868	CallExpression	m_params . erase ( key )		4662858	0					
ANR	4662869	Callee	m_params . erase		4662858	0					
ANR	4662870	MemberAccess	m_params . erase		4662858	0					
ANR	4662871	Identifier	m_params		4662858	0					
ANR	4662872	Identifier	erase		4662858	1					
ANR	4662873	ArgumentList	key		4662858	1					
ANR	4662874	Argument	key		4662858	0					
ANR	4662875	Identifier	key		4662858	0					
ANR	4662876	ElseStatement	else		4662858	0					
ANR	4662877	CompoundStatement		5:6:49:49	4662858	0					
ANR	4662878	ExpressionStatement	m_params [ key ] = value	252:2:5506:5527	4662858	0	True				
ANR	4662879	AssignmentExpression	m_params [ key ] = value		4662858	0		=			
ANR	4662880	ArrayIndexing	m_params [ key ]		4662858	0					
ANR	4662881	Identifier	m_params		4662858	0					
ANR	4662882	Identifier	key		4662858	1					
ANR	4662883	Identifier	value		4662858	1					
ANR	4662884	ExpressionStatement	regenerateSinful ( )	254:1:5533:5551	4662858	1	True				
ANR	4662885	CallExpression	regenerateSinful ( )		4662858	0					
ANR	4662886	Callee	regenerateSinful		4662858	0					
ANR	4662887	Identifier	regenerateSinful		4662858	0					
ANR	4662888	ArgumentList			4662858	1					
ANR	4662889	ReturnType	void		4662858	1					
ANR	4662890	Identifier	Sinful :: setParam		4662858	2					
ANR	4662891	ParameterList	"char const * key , char const * value"		4662858	3					
ANR	4662892	Parameter	char const * key	246:17:5417:5431	4662858	0	True				
ANR	4662893	ParameterType	char const *		4662858	0					
ANR	4662894	Identifier	key		4662858	1					
ANR	4662895	Parameter	char const * value	246:33:5433:5449	4662858	1	True				
ANR	4662896	ParameterType	char const *		4662858	0					
ANR	4662897	Identifier	value		4662858	1					
ANR	4662898	CFGEntryNode	ENTRY		4662858		True				
ANR	4662899	CFGExitNode	EXIT		4662858		True				
ANR	4662900	Symbol	m_params		4662858						
ANR	4662901	Symbol	* key		4662858						
ANR	4662902	Symbol	* m_params		4662858						
ANR	4662903	Symbol	value		4662858						
ANR	4662904	Symbol	key		4662858						
ANR	4662905	Function	Sinful :: clearParams	257:0:5556:5625							
ANR	4662906	FunctionDef	Sinful :: clearParams ()		4662905	0					
ANR	4662907	CompoundStatement		259:0:5583:5625	4662905	0					
ANR	4662908	ExpressionStatement	m_params . clear ( )	260:1:5586:5602	4662905	0	True				
ANR	4662909	CallExpression	m_params . clear ( )		4662905	0					
ANR	4662910	Callee	m_params . clear		4662905	0					
ANR	4662911	MemberAccess	m_params . clear		4662905	0					
ANR	4662912	Identifier	m_params		4662905	0					
ANR	4662913	Identifier	clear		4662905	1					
ANR	4662914	ArgumentList			4662905	1					
ANR	4662915	ExpressionStatement	regenerateSinful ( )	261:1:5605:5623	4662905	1	True				
ANR	4662916	CallExpression	regenerateSinful ( )		4662905	0					
ANR	4662917	Callee	regenerateSinful		4662905	0					
ANR	4662918	Identifier	regenerateSinful		4662905	0					
ANR	4662919	ArgumentList			4662905	1					
ANR	4662920	ReturnType	void		4662905	1					
ANR	4662921	Identifier	Sinful :: clearParams		4662905	2					
ANR	4662922	ParameterList			4662905	3					
ANR	4662923	CFGEntryNode	ENTRY		4662905		True				
ANR	4662924	CFGExitNode	EXIT		4662905		True				
ANR	4662925	Symbol	m_params		4662905						
ANR	4662926	Function	Sinful :: numParams	264:0:5628:5685							
ANR	4662927	FunctionDef	Sinful :: numParams ()		4662926	0					
ANR	4662928	CompoundStatement		266:0:5658:5685	4662926	0					
ANR	4662929	ReturnStatement	return m_params . size ( ) ;	267:1:5661:5683	4662926	0	True				
ANR	4662930	CallExpression	m_params . size ( )		4662926	0					
ANR	4662931	Callee	m_params . size		4662926	0					
ANR	4662932	MemberAccess	m_params . size		4662926	0					
ANR	4662933	Identifier	m_params		4662926	0					
ANR	4662934	Identifier	size		4662926	1					
ANR	4662935	ArgumentList			4662926	1					
ANR	4662936	ReturnType	int		4662926	1					
ANR	4662937	Identifier	Sinful :: numParams		4662926	2					
ANR	4662938	ParameterList			4662926	3					
ANR	4662939	CFGEntryNode	ENTRY		4662926		True				
ANR	4662940	CFGExitNode	EXIT		4662926		True				
ANR	4662941	Symbol	m_params		4662926						
ANR	4662942	Symbol	m_params . size		4662926						
ANR	4662943	Function	Sinful :: setCCBContact	270:0:5688:5769							
ANR	4662944	FunctionDef	Sinful :: setCCBContact (char const * contact)		4662943	0					
ANR	4662945	CompoundStatement		272:0:5736:5769	4662943	0					
ANR	4662946	ExpressionStatement	"setParam ( ATTR_CCBID , contact )"	273:1:5739:5767	4662943	0	True				
ANR	4662947	CallExpression	"setParam ( ATTR_CCBID , contact )"		4662943	0					
ANR	4662948	Callee	setParam		4662943	0					
ANR	4662949	Identifier	setParam		4662943	0					
ANR	4662950	ArgumentList	ATTR_CCBID		4662943	1					
ANR	4662951	Argument	ATTR_CCBID		4662943	0					
ANR	4662952	Identifier	ATTR_CCBID		4662943	0					
ANR	4662953	Argument	contact		4662943	1					
ANR	4662954	Identifier	contact		4662943	0					
ANR	4662955	ReturnType	void		4662943	1					
ANR	4662956	Identifier	Sinful :: setCCBContact		4662943	2					
ANR	4662957	ParameterList	char const * contact		4662943	3					
ANR	4662958	Parameter	char const * contact	271:22:5715:5733	4662943	0	True				
ANR	4662959	ParameterType	char const *		4662943	0					
ANR	4662960	Identifier	contact		4662943	1					
ANR	4662961	CFGEntryNode	ENTRY		4662943		True				
ANR	4662962	CFGExitNode	EXIT		4662943		True				
ANR	4662963	Symbol	contact		4662943						
ANR	4662964	Symbol	ATTR_CCBID		4662943						
ANR	4662965	Function	Sinful :: getCCBContact	276:0:5772:5847							
ANR	4662966	FunctionDef	Sinful :: getCCBContact ()		4662965	0					
ANR	4662967	CompoundStatement		278:0:5815:5847	4662965	0					
ANR	4662968	ReturnStatement	return getParam ( ATTR_CCBID ) ;	279:1:5818:5845	4662965	0	True				
ANR	4662969	CallExpression	getParam ( ATTR_CCBID )		4662965	0					
ANR	4662970	Callee	getParam		4662965	0					
ANR	4662971	Identifier	getParam		4662965	0					
ANR	4662972	ArgumentList	ATTR_CCBID		4662965	1					
ANR	4662973	Argument	ATTR_CCBID		4662965	0					
ANR	4662974	Identifier	ATTR_CCBID		4662965	0					
ANR	4662975	ReturnType	char const *		4662965	1					
ANR	4662976	Identifier	Sinful :: getCCBContact		4662965	2					
ANR	4662977	ParameterList			4662965	3					
ANR	4662978	CFGEntryNode	ENTRY		4662965		True				
ANR	4662979	CFGExitNode	EXIT		4662965		True				
ANR	4662980	Symbol	getParam		4662965						
ANR	4662981	Symbol	ATTR_CCBID		4662965						
ANR	4662982	Function	Sinful :: setSharedPortID	282:0:5850:5932							
ANR	4662983	FunctionDef	Sinful :: setSharedPortID (char const * contact)		4662982	0					
ANR	4662984	CompoundStatement		284:0:5900:5932	4662982	0					
ANR	4662985	ExpressionStatement	"setParam ( ATTR_SOCK , contact )"	285:1:5903:5930	4662982	0	True				
ANR	4662986	CallExpression	"setParam ( ATTR_SOCK , contact )"		4662982	0					
ANR	4662987	Callee	setParam		4662982	0					
ANR	4662988	Identifier	setParam		4662982	0					
ANR	4662989	ArgumentList	ATTR_SOCK		4662982	1					
ANR	4662990	Argument	ATTR_SOCK		4662982	0					
ANR	4662991	Identifier	ATTR_SOCK		4662982	0					
ANR	4662992	Argument	contact		4662982	1					
ANR	4662993	Identifier	contact		4662982	0					
ANR	4662994	ReturnType	void		4662982	1					
ANR	4662995	Identifier	Sinful :: setSharedPortID		4662982	2					
ANR	4662996	ParameterList	char const * contact		4662982	3					
ANR	4662997	Parameter	char const * contact	283:24:5879:5897	4662982	0	True				
ANR	4662998	ParameterType	char const *		4662982	0					
ANR	4662999	Identifier	contact		4662982	1					
ANR	4663000	CFGEntryNode	ENTRY		4662982		True				
ANR	4663001	CFGExitNode	EXIT		4662982		True				
ANR	4663002	Symbol	contact		4662982						
ANR	4663003	Symbol	ATTR_SOCK		4662982						
ANR	4663004	Function	Sinful :: getSharedPortID	288:0:5935:6011							
ANR	4663005	FunctionDef	Sinful :: getSharedPortID ()		4663004	0					
ANR	4663006	CompoundStatement		290:0:5980:6011	4663004	0					
ANR	4663007	ReturnStatement	return getParam ( ATTR_SOCK ) ;	291:1:5983:6009	4663004	0	True				
ANR	4663008	CallExpression	getParam ( ATTR_SOCK )		4663004	0					
ANR	4663009	Callee	getParam		4663004	0					
ANR	4663010	Identifier	getParam		4663004	0					
ANR	4663011	ArgumentList	ATTR_SOCK		4663004	1					
ANR	4663012	Argument	ATTR_SOCK		4663004	0					
ANR	4663013	Identifier	ATTR_SOCK		4663004	0					
ANR	4663014	ReturnType	char const *		4663004	1					
ANR	4663015	Identifier	Sinful :: getSharedPortID		4663004	2					
ANR	4663016	ParameterList			4663004	3					
ANR	4663017	CFGEntryNode	ENTRY		4663004		True				
ANR	4663018	CFGExitNode	EXIT		4663004		True				
ANR	4663019	Symbol	getParam		4663004						
ANR	4663020	Symbol	ATTR_SOCK		4663004						
ANR	4663021	Function	Sinful :: setPrivateAddr	294:0:6014:6090							
ANR	4663022	FunctionDef	Sinful :: setPrivateAddr (char const * addr)		4663021	0					
ANR	4663023	CompoundStatement		296:0:6060:6090	4663021	0					
ANR	4663024	ExpressionStatement	"setParam ( ""PrivAddr"" , addr )"	297:1:6063:6088	4663021	0	True				
ANR	4663025	CallExpression	"setParam ( ""PrivAddr"" , addr )"		4663021	0					
ANR	4663026	Callee	setParam		4663021	0					
ANR	4663027	Identifier	setParam		4663021	0					
ANR	4663028	ArgumentList	"""PrivAddr"""		4663021	1					
ANR	4663029	Argument	"""PrivAddr"""		4663021	0					
ANR	4663030	PrimaryExpression	"""PrivAddr"""		4663021	0					
ANR	4663031	Argument	addr		4663021	1					
ANR	4663032	Identifier	addr		4663021	0					
ANR	4663033	ReturnType	void		4663021	1					
ANR	4663034	Identifier	Sinful :: setPrivateAddr		4663021	2					
ANR	4663035	ParameterList	char const * addr		4663021	3					
ANR	4663036	Parameter	char const * addr	295:23:6042:6057	4663021	0	True				
ANR	4663037	ParameterType	char const *		4663021	0					
ANR	4663038	Identifier	addr		4663021	1					
ANR	4663039	CFGEntryNode	ENTRY		4663021		True				
ANR	4663040	CFGExitNode	EXIT		4663021		True				
ANR	4663041	Symbol	addr		4663021						
ANR	4663042	Function	Sinful :: getPrivateAddr	300:0:6093:6169							
ANR	4663043	FunctionDef	Sinful :: getPrivateAddr ()		4663042	0					
ANR	4663044	CompoundStatement		302:0:6137:6169	4663042	0					
ANR	4663045	ReturnStatement	"return getParam ( ""PrivAddr"" ) ;"	303:1:6140:6167	4663042	0	True				
ANR	4663046	CallExpression	"getParam ( ""PrivAddr"" )"		4663042	0					
ANR	4663047	Callee	getParam		4663042	0					
ANR	4663048	Identifier	getParam		4663042	0					
ANR	4663049	ArgumentList	"""PrivAddr"""		4663042	1					
ANR	4663050	Argument	"""PrivAddr"""		4663042	0					
ANR	4663051	PrimaryExpression	"""PrivAddr"""		4663042	0					
ANR	4663052	ReturnType	char const *		4663042	1					
ANR	4663053	Identifier	Sinful :: getPrivateAddr		4663042	2					
ANR	4663054	ParameterList			4663042	3					
ANR	4663055	CFGEntryNode	ENTRY		4663042		True				
ANR	4663056	CFGExitNode	EXIT		4663042		True				
ANR	4663057	Symbol	getParam		4663042						
ANR	4663058	Function	Sinful :: setPrivateNetworkName	306:0:6172:6254							
ANR	4663059	FunctionDef	Sinful :: setPrivateNetworkName (char const * addr)		4663058	0					
ANR	4663060	CompoundStatement		308:0:6225:6254	4663058	0					
ANR	4663061	ExpressionStatement	"setParam ( ""PrivNet"" , addr )"	309:1:6228:6252	4663058	0	True				
ANR	4663062	CallExpression	"setParam ( ""PrivNet"" , addr )"		4663058	0					
ANR	4663063	Callee	setParam		4663058	0					
ANR	4663064	Identifier	setParam		4663058	0					
ANR	4663065	ArgumentList	"""PrivNet"""		4663058	1					
ANR	4663066	Argument	"""PrivNet"""		4663058	0					
ANR	4663067	PrimaryExpression	"""PrivNet"""		4663058	0					
ANR	4663068	Argument	addr		4663058	1					
ANR	4663069	Identifier	addr		4663058	0					
ANR	4663070	ReturnType	void		4663058	1					
ANR	4663071	Identifier	Sinful :: setPrivateNetworkName		4663058	2					
ANR	4663072	ParameterList	char const * addr		4663058	3					
ANR	4663073	Parameter	char const * addr	307:30:6207:6222	4663058	0	True				
ANR	4663074	ParameterType	char const *		4663058	0					
ANR	4663075	Identifier	addr		4663058	1					
ANR	4663076	CFGEntryNode	ENTRY		4663058		True				
ANR	4663077	CFGExitNode	EXIT		4663058		True				
ANR	4663078	Symbol	addr		4663058						
ANR	4663079	Function	Sinful :: getPrivateNetworkName	312:0:6257:6339							
ANR	4663080	FunctionDef	Sinful :: getPrivateNetworkName ()		4663079	0					
ANR	4663081	CompoundStatement		314:0:6308:6339	4663079	0					
ANR	4663082	ReturnStatement	"return getParam ( ""PrivNet"" ) ;"	315:1:6311:6337	4663079	0	True				
ANR	4663083	CallExpression	"getParam ( ""PrivNet"" )"		4663079	0					
ANR	4663084	Callee	getParam		4663079	0					
ANR	4663085	Identifier	getParam		4663079	0					
ANR	4663086	ArgumentList	"""PrivNet"""		4663079	1					
ANR	4663087	Argument	"""PrivNet"""		4663079	0					
ANR	4663088	PrimaryExpression	"""PrivNet"""		4663079	0					
ANR	4663089	ReturnType	char const *		4663079	1					
ANR	4663090	Identifier	Sinful :: getPrivateNetworkName		4663079	2					
ANR	4663091	ParameterList			4663079	3					
ANR	4663092	CFGEntryNode	ENTRY		4663079		True				
ANR	4663093	CFGExitNode	EXIT		4663079		True				
ANR	4663094	Symbol	getParam		4663079						
ANR	4663095	Function	Sinful :: setNoUDP	318:0:6342:6456							
ANR	4663096	FunctionDef	Sinful :: setNoUDP (bool flag)		4663095	0					
ANR	4663097	CompoundStatement		320:0:6375:6456	4663095	0					
ANR	4663098	IfStatement	if ( ! flag )		4663095	0					
ANR	4663099	Condition	! flag	321:5:6382:6386	4663095	0	True				
ANR	4663100	UnaryOperationExpression	! flag		4663095	0					
ANR	4663101	UnaryOperator	!		4663095	0					
ANR	4663102	Identifier	flag		4663095	1					
ANR	4663103	CompoundStatement		2:13:14:14	4663095	1					
ANR	4663104	ExpressionStatement	"setParam ( ""noUDP"" , NULL )"	322:2:6394:6416	4663095	0	True				
ANR	4663105	CallExpression	"setParam ( ""noUDP"" , NULL )"		4663095	0					
ANR	4663106	Callee	setParam		4663095	0					
ANR	4663107	Identifier	setParam		4663095	0					
ANR	4663108	ArgumentList	"""noUDP"""		4663095	1					
ANR	4663109	Argument	"""noUDP"""		4663095	0					
ANR	4663110	PrimaryExpression	"""noUDP"""		4663095	0					
ANR	4663111	Argument	NULL		4663095	1					
ANR	4663112	Identifier	NULL		4663095	0					
ANR	4663113	ElseStatement	else		4663095	0					
ANR	4663114	CompoundStatement		5:6:51:51	4663095	0					
ANR	4663115	ExpressionStatement	"setParam ( ""noUDP"" , """" )"	325:2:6431:6451	4663095	0	True				
ANR	4663116	CallExpression	"setParam ( ""noUDP"" , """" )"		4663095	0					
ANR	4663117	Callee	setParam		4663095	0					
ANR	4663118	Identifier	setParam		4663095	0					
ANR	4663119	ArgumentList	"""noUDP"""		4663095	1					
ANR	4663120	Argument	"""noUDP"""		4663095	0					
ANR	4663121	PrimaryExpression	"""noUDP"""		4663095	0					
ANR	4663122	Argument	""""""		4663095	1					
ANR	4663123	PrimaryExpression	""""""		4663095	0					
ANR	4663124	ReturnType	void		4663095	1					
ANR	4663125	Identifier	Sinful :: setNoUDP		4663095	2					
ANR	4663126	ParameterList	bool flag		4663095	3					
ANR	4663127	Parameter	bool flag	319:17:6364:6372	4663095	0	True				
ANR	4663128	ParameterType	bool		4663095	0					
ANR	4663129	Identifier	flag		4663095	1					
ANR	4663130	CFGEntryNode	ENTRY		4663095		True				
ANR	4663131	CFGExitNode	EXIT		4663095		True				
ANR	4663132	Symbol	flag		4663095						
ANR	4663133	Symbol	NULL		4663095						
ANR	4663134	Function	Sinful :: noUDP	329:0:6459:6523							
ANR	4663135	FunctionDef	Sinful :: noUDP ()		4663134	0					
ANR	4663136	CompoundStatement		331:0:6486:6523	4663134	0					
ANR	4663137	ReturnStatement	"return getParam ( ""noUDP"" ) != NULL ;"	332:1:6489:6521	4663134	0	True				
ANR	4663138	EqualityExpression	"getParam ( ""noUDP"" ) != NULL"		4663134	0		!=			
ANR	4663139	CallExpression	"getParam ( ""noUDP"" )"		4663134	0					
ANR	4663140	Callee	getParam		4663134	0					
ANR	4663141	Identifier	getParam		4663134	0					
ANR	4663142	ArgumentList	"""noUDP"""		4663134	1					
ANR	4663143	Argument	"""noUDP"""		4663134	0					
ANR	4663144	PrimaryExpression	"""noUDP"""		4663134	0					
ANR	4663145	Identifier	NULL		4663134	1					
ANR	4663146	ReturnType	bool		4663134	1					
ANR	4663147	Identifier	Sinful :: noUDP		4663134	2					
ANR	4663148	ParameterList			4663134	3					
ANR	4663149	CFGEntryNode	ENTRY		4663134		True				
ANR	4663150	CFGExitNode	EXIT		4663134		True				
ANR	4663151	Symbol	getParam		4663134						
ANR	4663152	Symbol	NULL		4663134						
ANR	4663153	Function	Sinful :: setHost	335:0:6526:6619							
ANR	4663154	FunctionDef	Sinful :: setHost (char const * host)		4663153	0					
ANR	4663155	CompoundStatement		337:0:6565:6619	4663153	0					
ANR	4663156	ExpressionStatement	ASSERT ( host )	338:1:6568:6580	4663153	0	True				
ANR	4663157	CallExpression	ASSERT ( host )		4663153	0					
ANR	4663158	Callee	ASSERT		4663153	0					
ANR	4663159	Identifier	ASSERT		4663153	0					
ANR	4663160	ArgumentList	host		4663153	1					
ANR	4663161	Argument	host		4663153	0					
ANR	4663162	Identifier	host		4663153	0					
ANR	4663163	ExpressionStatement	m_host = host	339:1:6583:6596	4663153	1	True				
ANR	4663164	AssignmentExpression	m_host = host		4663153	0		=			
ANR	4663165	Identifier	m_host		4663153	0					
ANR	4663166	Identifier	host		4663153	1					
ANR	4663167	ExpressionStatement	regenerateSinful ( )	340:1:6599:6617	4663153	2	True				
ANR	4663168	CallExpression	regenerateSinful ( )		4663153	0					
ANR	4663169	Callee	regenerateSinful		4663153	0					
ANR	4663170	Identifier	regenerateSinful		4663153	0					
ANR	4663171	ArgumentList			4663153	1					
ANR	4663172	ReturnType	void		4663153	1					
ANR	4663173	Identifier	Sinful :: setHost		4663153	2					
ANR	4663174	ParameterList	char const * host		4663153	3					
ANR	4663175	Parameter	char const * host	336:16:6547:6562	4663153	0	True				
ANR	4663176	ParameterType	char const *		4663153	0					
ANR	4663177	Identifier	host		4663153	1					
ANR	4663178	CFGEntryNode	ENTRY		4663153		True				
ANR	4663179	CFGExitNode	EXIT		4663153		True				
ANR	4663180	Symbol	m_host		4663153						
ANR	4663181	Symbol	host		4663153						
ANR	4663182	Function	Sinful :: setPort	342:0:6621:6714							
ANR	4663183	FunctionDef	Sinful :: setPort (char const * port)		4663182	0					
ANR	4663184	CompoundStatement		344:0:6660:6714	4663182	0					
ANR	4663185	ExpressionStatement	ASSERT ( port )	345:1:6663:6675	4663182	0	True				
ANR	4663186	CallExpression	ASSERT ( port )		4663182	0					
ANR	4663187	Callee	ASSERT		4663182	0					
ANR	4663188	Identifier	ASSERT		4663182	0					
ANR	4663189	ArgumentList	port		4663182	1					
ANR	4663190	Argument	port		4663182	0					
ANR	4663191	Identifier	port		4663182	0					
ANR	4663192	ExpressionStatement	m_port = port	346:1:6678:6691	4663182	1	True				
ANR	4663193	AssignmentExpression	m_port = port		4663182	0		=			
ANR	4663194	Identifier	m_port		4663182	0					
ANR	4663195	Identifier	port		4663182	1					
ANR	4663196	ExpressionStatement	regenerateSinful ( )	347:1:6694:6712	4663182	2	True				
ANR	4663197	CallExpression	regenerateSinful ( )		4663182	0					
ANR	4663198	Callee	regenerateSinful		4663182	0					
ANR	4663199	Identifier	regenerateSinful		4663182	0					
ANR	4663200	ArgumentList			4663182	1					
ANR	4663201	ReturnType	void		4663182	1					
ANR	4663202	Identifier	Sinful :: setPort		4663182	2					
ANR	4663203	ParameterList	char const * port		4663182	3					
ANR	4663204	Parameter	char const * port	343:16:6642:6657	4663182	0	True				
ANR	4663205	ParameterType	char const *		4663182	0					
ANR	4663206	Identifier	port		4663182	1					
ANR	4663207	CFGEntryNode	ENTRY		4663182		True				
ANR	4663208	CFGExitNode	EXIT		4663182		True				
ANR	4663209	Symbol	port		4663182						
ANR	4663210	Symbol	m_port		4663182						
ANR	4663211	Function	Sinful :: setPort	349:0:6716:6830							
ANR	4663212	FunctionDef	Sinful :: setPort (int port)		4663211	0					
ANR	4663213	CompoundStatement		351:0:6747:6830	4663211	0					
ANR	4663214	IdentifierDeclStatement	std :: ostringstream tmp ;	352:1:6750:6772	4663211	0	True				
ANR	4663215	IdentifierDecl	tmp		4663211	0					
ANR	4663216	IdentifierDeclType	std :: ostringstream		4663211	0					
ANR	4663217	Identifier	tmp		4663211	1					
ANR	4663218	ExpressionStatement	tmp << port	353:1:6775:6786	4663211	1	True				
ANR	4663219	ShiftExpression	tmp << port		4663211	0		<<			
ANR	4663220	Identifier	tmp		4663211	0					
ANR	4663221	Identifier	port		4663211	1					
ANR	4663222	ExpressionStatement	m_port = tmp . str ( )	354:1:6789:6807	4663211	2	True				
ANR	4663223	AssignmentExpression	m_port = tmp . str ( )		4663211	0		=			
ANR	4663224	Identifier	m_port		4663211	0					
ANR	4663225	CallExpression	tmp . str ( )		4663211	1					
ANR	4663226	Callee	tmp . str		4663211	0					
ANR	4663227	MemberAccess	tmp . str		4663211	0					
ANR	4663228	Identifier	tmp		4663211	0					
ANR	4663229	Identifier	str		4663211	1					
ANR	4663230	ArgumentList			4663211	1					
ANR	4663231	ExpressionStatement	regenerateSinful ( )	355:1:6810:6828	4663211	3	True				
ANR	4663232	CallExpression	regenerateSinful ( )		4663211	0					
ANR	4663233	Callee	regenerateSinful		4663211	0					
ANR	4663234	Identifier	regenerateSinful		4663211	0					
ANR	4663235	ArgumentList			4663211	1					
ANR	4663236	ReturnType	void		4663211	1					
ANR	4663237	Identifier	Sinful :: setPort		4663211	2					
ANR	4663238	ParameterList	int port		4663211	3					
ANR	4663239	Parameter	int port	350:16:6737:6744	4663211	0	True				
ANR	4663240	ParameterType	int		4663211	0					
ANR	4663241	Identifier	port		4663211	1					
ANR	4663242	CFGEntryNode	ENTRY		4663211		True				
ANR	4663243	CFGExitNode	EXIT		4663211		True				
ANR	4663244	Symbol	port		4663211						
ANR	4663245	Symbol	tmp		4663211						
ANR	4663246	Symbol	tmp . str		4663211						
ANR	4663247	Symbol	m_port		4663211						
ANR	4663248	Function	Sinful :: regenerateSinful	358:0:6833:7233							
ANR	4663249	FunctionDef	Sinful :: regenerateSinful ()		4663248	0					
ANR	4663250	CompoundStatement		360:0:6865:7233	4663248	0					
ANR	4663251	ExpressionStatement	"m_sinful = ""<"""	363:1:6903:6917	4663248	0	True				
ANR	4663252	AssignmentExpression	"m_sinful = ""<"""		4663248	0		=			
ANR	4663253	Identifier	m_sinful		4663248	0					
ANR	4663254	PrimaryExpression	"""<"""		4663248	1					
ANR	4663255	IfStatement	if ( m_host . find ( ':' ) != std :: string :: npos )		4663248	1					
ANR	4663256	Condition	m_host . find ( ':' ) != std :: string :: npos	364:5:6924:6960	4663248	0	True				
ANR	4663257	EqualityExpression	m_host . find ( ':' ) != std :: string :: npos		4663248	0		!=			
ANR	4663258	CallExpression	m_host . find ( ':' )		4663248	0					
ANR	4663259	Callee	m_host . find		4663248	0					
ANR	4663260	MemberAccess	m_host . find		4663248	0					
ANR	4663261	Identifier	m_host		4663248	0					
ANR	4663262	Identifier	find		4663248	1					
ANR	4663263	ArgumentList	':'		4663248	1					
ANR	4663264	Argument	':'		4663248	0					
ANR	4663265	PrimaryExpression	':'		4663248	0					
ANR	4663266	Identifier	std :: string :: npos		4663248	1					
ANR	4663267	CompoundStatement		5:44:97:97	4663248	1					
ANR	4663268	ExpressionStatement	"m_sinful += ""["""	365:2:6967:6982	4663248	0	True				
ANR	4663269	AssignmentExpression	"m_sinful += ""["""		4663248	0		+=			
ANR	4663270	Identifier	m_sinful		4663248	0					
ANR	4663271	PrimaryExpression	"""["""		4663248	1					
ANR	4663272	ExpressionStatement	m_sinful += m_host	366:2:6986:7004	4663248	1	True				
ANR	4663273	AssignmentExpression	m_sinful += m_host		4663248	0		+=			
ANR	4663274	Identifier	m_sinful		4663248	0					
ANR	4663275	Identifier	m_host		4663248	1					
ANR	4663276	ExpressionStatement	"m_sinful += ""]"""	367:2:7008:7023	4663248	2	True				
ANR	4663277	AssignmentExpression	"m_sinful += ""]"""		4663248	0		+=			
ANR	4663278	Identifier	m_sinful		4663248	0					
ANR	4663279	PrimaryExpression	"""]"""		4663248	1					
ANR	4663280	ElseStatement	else		4663248	0					
ANR	4663281	ExpressionStatement	m_sinful += m_host	369:2:7035:7053	4663248	0	True				
ANR	4663282	AssignmentExpression	m_sinful += m_host		4663248	0		+=			
ANR	4663283	Identifier	m_sinful		4663248	0					
ANR	4663284	Identifier	m_host		4663248	1					
ANR	4663285	IfStatement	if ( ! m_port . empty ( ) )		4663248	2					
ANR	4663286	Condition	! m_port . empty ( )	371:5:7061:7075	4663248	0	True				
ANR	4663287	UnaryOperationExpression	! m_port . empty ( )		4663248	0					
ANR	4663288	UnaryOperator	!		4663248	0					
ANR	4663289	CallExpression	m_port . empty ( )		4663248	1					
ANR	4663290	Callee	m_port . empty		4663248	0					
ANR	4663291	MemberAccess	m_port . empty		4663248	0					
ANR	4663292	Identifier	m_port		4663248	0					
ANR	4663293	Identifier	empty		4663248	1					
ANR	4663294	ArgumentList			4663248	1					
ANR	4663295	CompoundStatement		12:23:213:213	4663248	1					
ANR	4663296	ExpressionStatement	"m_sinful += "":"""	372:2:7083:7098	4663248	0	True				
ANR	4663297	AssignmentExpression	"m_sinful += "":"""		4663248	0		+=			
ANR	4663298	Identifier	m_sinful		4663248	0					
ANR	4663299	PrimaryExpression	""":"""		4663248	1					
ANR	4663300	ExpressionStatement	m_sinful += m_port	373:2:7102:7120	4663248	1	True				
ANR	4663301	AssignmentExpression	m_sinful += m_port		4663248	0		+=			
ANR	4663302	Identifier	m_sinful		4663248	0					
ANR	4663303	Identifier	m_port		4663248	1					
ANR	4663304	IfStatement	if ( ! m_params . empty ( ) )		4663248	3					
ANR	4663305	Condition	! m_params . empty ( )	375:5:7130:7146	4663248	0	True				
ANR	4663306	UnaryOperationExpression	! m_params . empty ( )		4663248	0					
ANR	4663307	UnaryOperator	!		4663248	0					
ANR	4663308	CallExpression	m_params . empty ( )		4663248	1					
ANR	4663309	Callee	m_params . empty		4663248	0					
ANR	4663310	MemberAccess	m_params . empty		4663248	0					
ANR	4663311	Identifier	m_params		4663248	0					
ANR	4663312	Identifier	empty		4663248	1					
ANR	4663313	ArgumentList			4663248	1					
ANR	4663314	CompoundStatement		16:25:284:284	4663248	1					
ANR	4663315	ExpressionStatement	"m_sinful += ""?"""	376:2:7154:7169	4663248	0	True				
ANR	4663316	AssignmentExpression	"m_sinful += ""?"""		4663248	0		+=			
ANR	4663317	Identifier	m_sinful		4663248	0					
ANR	4663318	PrimaryExpression	"""?"""		4663248	1					
ANR	4663319	ExpressionStatement	m_sinful += urlEncodeParams ( m_params )	377:2:7173:7210	4663248	1	True				
ANR	4663320	AssignmentExpression	m_sinful += urlEncodeParams ( m_params )		4663248	0		+=			
ANR	4663321	Identifier	m_sinful		4663248	0					
ANR	4663322	CallExpression	urlEncodeParams ( m_params )		4663248	1					
ANR	4663323	Callee	urlEncodeParams		4663248	0					
ANR	4663324	Identifier	urlEncodeParams		4663248	0					
ANR	4663325	ArgumentList	m_params		4663248	1					
ANR	4663326	Argument	m_params		4663248	0					
ANR	4663327	Identifier	m_params		4663248	0					
ANR	4663328	ExpressionStatement	"m_sinful += "">"""	379:1:7216:7231	4663248	4	True				
ANR	4663329	AssignmentExpression	"m_sinful += "">"""		4663248	0		+=			
ANR	4663330	Identifier	m_sinful		4663248	0					
ANR	4663331	PrimaryExpression	""">"""		4663248	1					
ANR	4663332	ReturnType	void		4663248	1					
ANR	4663333	Identifier	Sinful :: regenerateSinful		4663248	2					
ANR	4663334	ParameterList			4663248	3					
ANR	4663335	CFGEntryNode	ENTRY		4663248		True				
ANR	4663336	CFGExitNode	EXIT		4663248		True				
ANR	4663337	Symbol	std :: string :: npos		4663248						
ANR	4663338	Symbol	m_host		4663248						
ANR	4663339	Symbol	m_params		4663248						
ANR	4663340	Symbol	m_port . empty		4663248						
ANR	4663341	Symbol	m_host . find		4663248						
ANR	4663342	Symbol	m_port		4663248						
ANR	4663343	Symbol	urlEncodeParams		4663248						
ANR	4663344	Symbol	m_params . empty		4663248						
ANR	4663345	Symbol	m_sinful		4663248						
ANR	4663346	Function	Sinful :: addressPointsToMe	382:0:7236:7790							
ANR	4663347	FunctionDef	Sinful :: addressPointsToMe (Sinful const & addr)		4663346	0					
ANR	4663348	CompoundStatement		384:0:7295:7790	4663346	0					
ANR	4663349	IfStatement	"if ( getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) ) )"		4663346	0					
ANR	4663350	Condition	"getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"	385:5:7302:7435	4663346	0	True				
ANR	4663351	AndExpression	"getHost ( ) && addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	0		&&			
ANR	4663352	CallExpression	getHost ( )		4663346	0					
ANR	4663353	Callee	getHost		4663346	0					
ANR	4663354	Identifier	getHost		4663346	0					
ANR	4663355	ArgumentList			4663346	1					
ANR	4663356	AndExpression	"addr . getHost ( ) && ! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1		&&			
ANR	4663357	CallExpression	addr . getHost ( )		4663346	0					
ANR	4663358	Callee	addr . getHost		4663346	0					
ANR	4663359	MemberAccess	addr . getHost		4663346	0					
ANR	4663360	Identifier	addr		4663346	0					
ANR	4663361	Identifier	getHost		4663346	1					
ANR	4663362	ArgumentList			4663346	1					
ANR	4663363	AndExpression	"! strcmp ( getHost ( ) , addr . getHost ( ) ) && getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1		&&			
ANR	4663364	UnaryOperationExpression	"! strcmp ( getHost ( ) , addr . getHost ( ) )"		4663346	0					
ANR	4663365	UnaryOperator	!		4663346	0					
ANR	4663366	CallExpression	"strcmp ( getHost ( ) , addr . getHost ( ) )"		4663346	1					
ANR	4663367	Callee	strcmp		4663346	0					
ANR	4663368	Identifier	strcmp		4663346	0					
ANR	4663369	ArgumentList	getHost ( )		4663346	1					
ANR	4663370	Argument	getHost ( )		4663346	0					
ANR	4663371	CallExpression	getHost ( )		4663346	0					
ANR	4663372	Callee	getHost		4663346	0					
ANR	4663373	Identifier	getHost		4663346	0					
ANR	4663374	ArgumentList			4663346	1					
ANR	4663375	Argument	addr . getHost ( )		4663346	1					
ANR	4663376	CallExpression	addr . getHost ( )		4663346	0					
ANR	4663377	Callee	addr . getHost		4663346	0					
ANR	4663378	MemberAccess	addr . getHost		4663346	0					
ANR	4663379	Identifier	addr		4663346	0					
ANR	4663380	Identifier	getHost		4663346	1					
ANR	4663381	ArgumentList			4663346	1					
ANR	4663382	AndExpression	"getPort ( ) && addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1		&&			
ANR	4663383	CallExpression	getPort ( )		4663346	0					
ANR	4663384	Callee	getPort		4663346	0					
ANR	4663385	Identifier	getPort		4663346	0					
ANR	4663386	ArgumentList			4663346	1					
ANR	4663387	AndExpression	"addr . getPort ( ) && ! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1		&&			
ANR	4663388	CallExpression	addr . getPort ( )		4663346	0					
ANR	4663389	Callee	addr . getPort		4663346	0					
ANR	4663390	MemberAccess	addr . getPort		4663346	0					
ANR	4663391	Identifier	addr		4663346	0					
ANR	4663392	Identifier	getPort		4663346	1					
ANR	4663393	ArgumentList			4663346	1					
ANR	4663394	UnaryOperationExpression	"! strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1					
ANR	4663395	UnaryOperator	!		4663346	0					
ANR	4663396	CallExpression	"strcmp ( getPort ( ) , addr . getPort ( ) )"		4663346	1					
ANR	4663397	Callee	strcmp		4663346	0					
ANR	4663398	Identifier	strcmp		4663346	0					
ANR	4663399	ArgumentList	getPort ( )		4663346	1					
ANR	4663400	Argument	getPort ( )		4663346	0					
ANR	4663401	CallExpression	getPort ( )		4663346	0					
ANR	4663402	Callee	getPort		4663346	0					
ANR	4663403	Identifier	getPort		4663346	0					
ANR	4663404	ArgumentList			4663346	1					
ANR	4663405	Argument	addr . getPort ( )		4663346	1					
ANR	4663406	CallExpression	addr . getPort ( )		4663346	0					
ANR	4663407	Callee	addr . getPort		4663346	0					
ANR	4663408	MemberAccess	addr . getPort		4663346	0					
ANR	4663409	Identifier	addr		4663346	0					
ANR	4663410	Identifier	getPort		4663346	1					
ANR	4663411	ArgumentList			4663346	1					
ANR	4663412	CompoundStatement		6:2:188:234	4663346	1					
ANR	4663413	IdentifierDeclStatement	char const * spid = getSharedPortID ( ) ;	388:2:7444:7480	4663346	0	True				
ANR	4663414	IdentifierDecl	* spid = getSharedPortID ( )		4663346	0					
ANR	4663415	IdentifierDeclType	char const *		4663346	0					
ANR	4663416	Identifier	spid		4663346	1					
ANR	4663417	AssignmentExpression	* spid = getSharedPortID ( )		4663346	2		=			
ANR	4663418	Identifier	spid		4663346	0					
ANR	4663419	CallExpression	getSharedPortID ( )		4663346	1					
ANR	4663420	Callee	getSharedPortID		4663346	0					
ANR	4663421	Identifier	getSharedPortID		4663346	0					
ANR	4663422	ArgumentList			4663346	1					
ANR	4663423	IdentifierDeclStatement	char const * addr_spid = addr . getSharedPortID ( ) ;	389:2:7484:7530	4663346	1	True				
ANR	4663424	IdentifierDecl	* addr_spid = addr . getSharedPortID ( )		4663346	0					
ANR	4663425	IdentifierDeclType	char const *		4663346	0					
ANR	4663426	Identifier	addr_spid		4663346	1					
ANR	4663427	AssignmentExpression	* addr_spid = addr . getSharedPortID ( )		4663346	2		=			
ANR	4663428	Identifier	addr_spid		4663346	0					
ANR	4663429	CallExpression	addr . getSharedPortID ( )		4663346	1					
ANR	4663430	Callee	addr . getSharedPortID		4663346	0					
ANR	4663431	MemberAccess	addr . getSharedPortID		4663346	0					
ANR	4663432	Identifier	addr		4663346	0					
ANR	4663433	Identifier	getSharedPortID		4663346	1					
ANR	4663434	ArgumentList			4663346	1					
ANR	4663435	IfStatement	"if ( ( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) ) )"		4663346	2					
ANR	4663436	Condition	"( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) )"	390:6:7538:7625	4663346	0	True				
ANR	4663437	OrExpression	"( spid == NULL && addr_spid == NULL ) || ( spid && addr_spid && ! strcmp ( spid , addr_spid ) )"		4663346	0		||			
ANR	4663438	AndExpression	spid == NULL && addr_spid == NULL		4663346	0		&&			
ANR	4663439	EqualityExpression	spid == NULL		4663346	0		==			
ANR	4663440	Identifier	spid		4663346	0					
ANR	4663441	Identifier	NULL		4663346	1					
ANR	4663442	EqualityExpression	addr_spid == NULL		4663346	1		==			
ANR	4663443	Identifier	addr_spid		4663346	0					
ANR	4663444	Identifier	NULL		4663346	1					
ANR	4663445	AndExpression	"spid && addr_spid && ! strcmp ( spid , addr_spid )"		4663346	1		&&			
ANR	4663446	Identifier	spid		4663346	0					
ANR	4663447	AndExpression	"addr_spid && ! strcmp ( spid , addr_spid )"		4663346	1		&&			
ANR	4663448	Identifier	addr_spid		4663346	0					
ANR	4663449	UnaryOperationExpression	"! strcmp ( spid , addr_spid )"		4663346	1					
ANR	4663450	UnaryOperator	!		4663346	0					
ANR	4663451	CallExpression	"strcmp ( spid , addr_spid )"		4663346	1					
ANR	4663452	Callee	strcmp		4663346	0					
ANR	4663453	Identifier	strcmp		4663346	0					
ANR	4663454	ArgumentList	spid		4663346	1					
ANR	4663455	Argument	spid		4663346	0					
ANR	4663456	Identifier	spid		4663346	0					
ANR	4663457	Argument	addr_spid		4663346	1					
ANR	4663458	Identifier	addr_spid		4663346	0					
ANR	4663459	CompoundStatement		8:52:333:333	4663346	1					
ANR	4663460	ReturnStatement	return true ;	392:3:7634:7645	4663346	0	True				
ANR	4663461	Identifier	true		4663346	0					
ANR	4663462	IfStatement	if ( getPrivateAddr ( ) )		4663346	1					
ANR	4663463	Condition	getPrivateAddr ( )	395:5:7659:7674	4663346	0	True				
ANR	4663464	CallExpression	getPrivateAddr ( )		4663346	0					
ANR	4663465	Callee	getPrivateAddr		4663346	0					
ANR	4663466	Identifier	getPrivateAddr		4663346	0					
ANR	4663467	ArgumentList			4663346	1					
ANR	4663468	CompoundStatement		13:2:386:425	4663346	1					
ANR	4663469	IdentifierDeclStatement	Sinful private_addr ( getPrivateAddr ( ) ) ;	396:2:7682:7721	4663346	0	True				
ANR	4663470	IdentifierDecl	private_addr ( getPrivateAddr ( ) )		4663346	0					
ANR	4663471	IdentifierDeclType	Sinful		4663346	0					
ANR	4663472	Identifier	private_addr		4663346	1					
ANR	4663473	CallExpression	getPrivateAddr ( )		4663346	2					
ANR	4663474	Callee	getPrivateAddr		4663346	0					
ANR	4663475	Identifier	getPrivateAddr		4663346	0					
ANR	4663476	ArgumentList			4663346	1					
ANR	4663477	ReturnStatement	return private_addr . addressPointsToMe ( addr ) ;	397:2:7725:7770	4663346	1	True				
ANR	4663478	CallExpression	private_addr . addressPointsToMe ( addr )		4663346	0					
ANR	4663479	Callee	private_addr . addressPointsToMe		4663346	0					
ANR	4663480	MemberAccess	private_addr . addressPointsToMe		4663346	0					
ANR	4663481	Identifier	private_addr		4663346	0					
ANR	4663482	Identifier	addressPointsToMe		4663346	1					
ANR	4663483	ArgumentList	addr		4663346	1					
ANR	4663484	Argument	addr		4663346	0					
ANR	4663485	Identifier	addr		4663346	0					
ANR	4663486	ReturnStatement	return false ;	399:1:7776:7788	4663346	2	True				
ANR	4663487	Identifier	false		4663346	0					
ANR	4663488	ReturnType	bool		4663346	1					
ANR	4663489	Identifier	Sinful :: addressPointsToMe		4663346	2					
ANR	4663490	ParameterList	Sinful const & addr		4663346	3					
ANR	4663491	Parameter	Sinful const & addr	383:27:7268:7285	4663346	0	True				
ANR	4663492	ParameterType	Sinful const &		4663346	0					
ANR	4663493	Identifier	addr		4663346	1					
ANR	4663494	CFGEntryNode	ENTRY		4663346		True				
ANR	4663495	CFGExitNode	EXIT		4663346		True				
ANR	4663496	Symbol	strcmp		4663346						
ANR	4663497	Symbol	addr . getPort		4663346						
ANR	4663498	Symbol	NULL		4663346						
ANR	4663499	Symbol	getSharedPortID		4663346						
ANR	4663500	Symbol	addr . getSharedPortID		4663346						
ANR	4663501	Symbol	private_addr . addressPointsToMe		4663346						
ANR	4663502	Symbol	false		4663346						
ANR	4663503	Symbol	addr . getHost		4663346						
ANR	4663504	Symbol	getPrivateAddr		4663346						
ANR	4663505	Symbol	private_addr		4663346						
ANR	4663506	Symbol	spid		4663346						
ANR	4663507	Symbol	addr_spid		4663346						
ANR	4663508	Symbol	getPort		4663346						
ANR	4663509	Symbol	true		4663346						
ANR	4663510	Symbol	addr		4663346						
ANR	4663511	Symbol	getHost		4663346						
ANR	4663512	Function	Sinful :: getPortNum	402:0:7793:7883							
ANR	4663513	FunctionDef	Sinful :: getPortNum ()		4663512	0					
ANR	4663514	CompoundStatement		404:0:7818:7883	4663512	0					
ANR	4663515	IfStatement	if ( ! getPort ( ) )		4663512	0					
ANR	4663516	Condition	! getPort ( )	405:5:7825:7834	4663512	0	True				
ANR	4663517	UnaryOperationExpression	! getPort ( )		4663512	0					
ANR	4663518	UnaryOperator	!		4663512	0					
ANR	4663519	CallExpression	getPort ( )		4663512	1					
ANR	4663520	Callee	getPort		4663512	0					
ANR	4663521	Identifier	getPort		4663512	0					
ANR	4663522	ArgumentList			4663512	1					
ANR	4663523	CompoundStatement		2:18:19:19	4663512	1					
ANR	4663524	ReturnStatement	return - 1 ;	406:2:7842:7851	4663512	0	True				
ANR	4663525	UnaryOperationExpression	- 1		4663512	0					
ANR	4663526	UnaryOperator	-		4663512	0					
ANR	4663527	PrimaryExpression	1		4663512	1					
ANR	4663528	ReturnStatement	return atoi ( getPort ( ) ) ;	408:1:7857:7881	4663512	1	True				
ANR	4663529	CallExpression	atoi ( getPort ( ) )		4663512	0					
ANR	4663530	Callee	atoi		4663512	0					
ANR	4663531	Identifier	atoi		4663512	0					
ANR	4663532	ArgumentList	getPort ( )		4663512	1					
ANR	4663533	Argument	getPort ( )		4663512	0					
ANR	4663534	CallExpression	getPort ( )		4663512	0					
ANR	4663535	Callee	getPort		4663512	0					
ANR	4663536	Identifier	getPort		4663512	0					
ANR	4663537	ArgumentList			4663512	1					
ANR	4663538	ReturnType	int		4663512	1					
ANR	4663539	Identifier	Sinful :: getPortNum		4663512	2					
ANR	4663540	ParameterList			4663512	3					
ANR	4663541	CFGEntryNode	ENTRY		4663512		True				
ANR	4663542	CFGExitNode	EXIT		4663512		True				
ANR	4663543	Symbol	atoi		4663512						
ANR	4663544	Symbol	getPort		4663512						
