command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	4787863	File	data/converged/CVE-2011-4930_htcondor/src_condor_utils_hibernator.linux.cpp								
ANR	4787864	DeclStmt									
ANR	4787865	Decl							const char	const char *	SYS_POWER_FILE
ANR	4787866	DeclStmt									
ANR	4787867	Decl							const char	const char *	SYS_DISK_FILE
ANR	4787868	DeclStmt									
ANR	4787869	Decl							const char	const char *	PROC_POWER_FILE
ANR	4787870	DeclStmt									
ANR	4787871	Decl							const char	const char *	POWER_OFF
ANR	4787872	DeclStmt									
ANR	4787873	Decl							const char	const char *	PM_UTIL_CHECK
ANR	4787874	DeclStmt									
ANR	4787875	Decl							const char	const char *	PM_UTIL_SUSPEND
ANR	4787876	DeclStmt									
ANR	4787877	Decl							const char	const char *	PM_UTIL_HIBERNATE
ANR	4787878	ClassDef	BaseLinuxHibernator	46:0:1642:2835							
ANR	4787879	Function	BaseLinuxHibernator	49:1:1679:1784							
ANR	4787880	FunctionDef	BaseLinuxHibernator (LinuxHibernator & hibernator)		4787879	0					
ANR	4787881	CompoundStatement		49:51:1729:1784	4787879	0					
ANR	4787882	ExpressionStatement	m_detected = false	50:2:1733:1751	4787879	0	True				
ANR	4787883	AssignmentExpression	m_detected = false		4787879	0		=			
ANR	4787884	Identifier	m_detected		4787879	0					
ANR	4787885	Identifier	false		4787879	1					
ANR	4787886	ExpressionStatement	m_hibernator = & hibernator	51:2:1755:1781	4787879	1	True				
ANR	4787887	AssignmentExpression	m_hibernator = & hibernator		4787879	0		=			
ANR	4787888	Identifier	m_hibernator		4787879	0					
ANR	4787889	UnaryOperationExpression	& hibernator		4787879	1					
ANR	4787890	UnaryOperator	&		4787879	0					
ANR	4787891	Identifier	hibernator		4787879	1					
ANR	4787892	Identifier	BaseLinuxHibernator		4787879	1					
ANR	4787893	ParameterList	LinuxHibernator & hibernator		4787879	2					
ANR	4787894	Parameter	LinuxHibernator & hibernator	49:22:1700:1726	4787879	0	True				
ANR	4787895	ParameterType	LinuxHibernator &		4787879	0					
ANR	4787896	Identifier	hibernator		4787879	1					
ANR	4787897	CFGEntryNode	ENTRY		4787879		True				
ANR	4787898	CFGExitNode	EXIT		4787879		True				
ANR	4787899	Symbol	m_detected		4787879						
ANR	4787900	Symbol	hibernator		4787879						
ANR	4787901	Symbol	false		4787879						
ANR	4787902	Symbol	& hibernator		4787879						
ANR	4787903	Symbol	m_hibernator		4787879						
ANR	4787904	Function	~BaseLinuxHibernator	53:9:1796:1825							
ANR	4787905	FunctionDef	~BaseLinuxHibernator ()		4787904	1					
ANR	4787906	CompoundStatement		53:36:1823:1825	4787904	0					
ANR	4787907	Identifier	~BaseLinuxHibernator		4787904	1					
ANR	4787908	ParameterList			4787904	2					
ANR	4787909	CFGEntryNode	ENTRY		4787904		True				
ANR	4787910	CFGExitNode	EXIT		4787904		True				
ANR	4787911	Function	nameMatch	59:1:1910:2032							
ANR	4787912	FunctionDef	nameMatch (const char * name)		4787911	2					
ANR	4787913	CompoundStatement		59:42:1951:2032	4787911	0					
ANR	4787914	IfStatement	if ( NULL == name )		4787911	0					
ANR	4787915	Condition	NULL == name	60:6:1959:1970	4787911	0	True				
ANR	4787916	EqualityExpression	NULL == name		4787911	0		==			
ANR	4787917	Identifier	NULL		4787911	0					
ANR	4787918	Identifier	name		4787911	1					
ANR	4787919	ReturnStatement	return true ;	60:20:1973:1984	4787911	1	True				
ANR	4787920	Identifier	true		4787911	0					
ANR	4787921	ReturnStatement	"return strcasecmp ( name , getName ( ) ) == 0 ;"	61:2:1988:2029	4787911	1	True				
ANR	4787922	EqualityExpression	"strcasecmp ( name , getName ( ) ) == 0"		4787911	0		==			
ANR	4787923	CallExpression	"strcasecmp ( name , getName ( ) )"		4787911	0					
ANR	4787924	Callee	strcasecmp		4787911	0					
ANR	4787925	Identifier	strcasecmp		4787911	0					
ANR	4787926	ArgumentList	name		4787911	1					
ANR	4787927	Argument	name		4787911	0					
ANR	4787928	Identifier	name		4787911	0					
ANR	4787929	Argument	getName ( )		4787911	1					
ANR	4787930	CallExpression	getName ( )		4787911	0					
ANR	4787931	Callee	getName		4787911	0					
ANR	4787932	Identifier	getName		4787911	0					
ANR	4787933	ArgumentList			4787911	1					
ANR	4787934	PrimaryExpression	0		4787911	1					
ANR	4787935	ReturnType	bool		4787911	1					
ANR	4787936	Identifier	nameMatch		4787911	2					
ANR	4787937	ParameterList	const char * name		4787911	3					
ANR	4787938	Parameter	const char * name	59:17:1926:1941	4787911	0	True				
ANR	4787939	ParameterType	const char *		4787911	0					
ANR	4787940	Identifier	name		4787911	1					
ANR	4787941	CFGEntryNode	ENTRY		4787911		True				
ANR	4787942	CFGExitNode	EXIT		4787911		True				
ANR	4787943	Symbol	NULL		4787911						
ANR	4787944	Symbol	getName		4787911						
ANR	4787945	Symbol	name		4787911						
ANR	4787946	Symbol	true		4787911						
ANR	4787947	Symbol	strcasecmp		4787911						
ANR	4787948	Function	isDetected	65:1:2056:2107							
ANR	4787949	FunctionDef	isDetected ()		4787948	3					
ANR	4787950	CompoundStatement		65:31:2086:2107	4787948	0					
ANR	4787951	ReturnStatement	return m_detected ;	65:1:2088:2105	4787948	0	True				
ANR	4787952	Identifier	m_detected		4787948	0					
ANR	4787953	ReturnType	bool		4787948	1					
ANR	4787954	Identifier	isDetected		4787948	2					
ANR	4787955	ParameterList			4787948	3					
ANR	4787956	CFGEntryNode	ENTRY		4787948		True				
ANR	4787957	CFGExitNode	EXIT		4787948		True				
ANR	4787958	Symbol	m_detected		4787948						
ANR	4787959	Function	setDetected	66:1:2111:2170							
ANR	4787960	FunctionDef	setDetected (bool detected)		4787959	4					
ANR	4787961	CompoundStatement		66:35:2145:2170	4787959	0					
ANR	4787962	ExpressionStatement	m_detected = detected	66:1:2147:2168	4787959	0	True				
ANR	4787963	AssignmentExpression	m_detected = detected		4787959	0		=			
ANR	4787964	Identifier	m_detected		4787959	0					
ANR	4787965	Identifier	detected		4787959	1					
ANR	4787966	ReturnType	void		4787959	1					
ANR	4787967	Identifier	setDetected		4787959	2					
ANR	4787968	ParameterList	bool detected		4787959	3					
ANR	4787969	Parameter	bool detected	66:19:2129:2141	4787959	0	True				
ANR	4787970	ParameterType	bool		4787959	0					
ANR	4787971	Identifier	detected		4787959	1					
ANR	4787972	CFGEntryNode	ENTRY		4787959		True				
ANR	4787973	CFGExitNode	EXIT		4787959		True				
ANR	4787974	Symbol	m_detected		4787959						
ANR	4787975	Symbol	detected		4787959						
ANR	4787976	DeclStmt									
ANR	4787977	Decl							bool	bool ( void )	Detect
ANR	4787978	DeclStmt									
ANR	4787979	Decl							bool	bool ( void )	DetectWOL
ANR	4787980	DeclStmt									
ANR	4787981	Decl							LinuxHibernator	LinuxHibernator *	m_hibernator
ANR	4787982	DeclStmt									
ANR	4787983	Decl							bool	bool	m_detected
ANR	4787984	ClassDef	PmUtilLinuxHibernator	91:0:2839:3425							
ANR	4787985	Function	PmUtilLinuxHibernator	94:1:2907:3000							
ANR	4787986	FunctionDef	PmUtilLinuxHibernator (LinuxHibernator & hibernator)		4787985	0					
ANR	4787987	CompoundStatement		95:39:2998:3000	4787985	0					
ANR	4787988	Identifier	PmUtilLinuxHibernator		4787985	1					
ANR	4787989	ParameterList	LinuxHibernator & hibernator		4787985	2					
ANR	4787990	Parameter	LinuxHibernator & hibernator	94:24:2930:2956	4787985	0	True				
ANR	4787991	ParameterType	LinuxHibernator &		4787985	0					
ANR	4787992	Identifier	hibernator		4787985	1					
ANR	4787993	CFGEntryNode	ENTRY		4787985		True				
ANR	4787994	CFGExitNode	EXIT		4787985		True				
ANR	4787995	Symbol	hibernator		4787985						
ANR	4787996	Function	~PmUtilLinuxHibernator	96:9:3012:3043							
ANR	4787997	FunctionDef	~PmUtilLinuxHibernator ()		4787996	1					
ANR	4787998	CompoundStatement		96:38:3041:3043	4787996	0					
ANR	4787999	Identifier	~PmUtilLinuxHibernator		4787996	1					
ANR	4788000	ParameterList			4787996	2					
ANR	4788001	CFGEntryNode	ENTRY		4787996		True				
ANR	4788002	CFGExitNode	EXIT		4787996		True				
ANR	4788003	Function	getName	98:1:3048:3103							
ANR	4788004	FunctionDef	getName ()		4788003	2					
ANR	4788005	CompoundStatement		98:35:3082:3103	4788003	0					
ANR	4788006	ReturnStatement	"return ""pm-utils"" ;"	98:1:3084:3101	4788003	0	True				
ANR	4788007	PrimaryExpression	"""pm-utils"""		4788003	0					
ANR	4788008	ReturnType	const char *		4788003	1					
ANR	4788009	Identifier	getName		4788003	2					
ANR	4788010	ParameterList			4788003	3					
ANR	4788011	CFGEntryNode	ENTRY		4788003		True				
ANR	4788012	CFGExitNode	EXIT		4788003		True				
ANR	4788013	DeclStmt									
ANR	4788014	Decl							bool	bool ( void )	Detect
ANR	4788015	ClassDef	SysIfLinuxHibernator	108:0:3429:3946							
ANR	4788016	Function	SysIfLinuxHibernator	111:1:3496:3588							
ANR	4788017	FunctionDef	SysIfLinuxHibernator (LinuxHibernator & hibernator)		4788016	0					
ANR	4788018	CompoundStatement		112:39:3586:3588	4788016	0					
ANR	4788019	Identifier	SysIfLinuxHibernator		4788016	1					
ANR	4788020	ParameterList	LinuxHibernator & hibernator		4788016	2					
ANR	4788021	Parameter	LinuxHibernator & hibernator	111:23:3518:3544	4788016	0	True				
ANR	4788022	ParameterType	LinuxHibernator &		4788016	0					
ANR	4788023	Identifier	hibernator		4788016	1					
ANR	4788024	CFGEntryNode	ENTRY		4788016		True				
ANR	4788025	CFGExitNode	EXIT		4788016		True				
ANR	4788026	Symbol	hibernator		4788016						
ANR	4788027	Function	~SysIfLinuxHibernator	113:1:3592:3622							
ANR	4788028	FunctionDef	~SysIfLinuxHibernator ()		4788027	1					
ANR	4788029	CompoundStatement		113:29:3620:3622	4788027	0					
ANR	4788030	Identifier	~SysIfLinuxHibernator		4788027	1					
ANR	4788031	ParameterList			4788027	2					
ANR	4788032	CFGEntryNode	ENTRY		4788027		True				
ANR	4788033	CFGExitNode	EXIT		4788027		True				
ANR	4788034	Function	getName	115:1:3627:3678							
ANR	4788035	FunctionDef	getName ()		4788034	2					
ANR	4788036	CompoundStatement		115:35:3661:3678	4788034	0					
ANR	4788037	ReturnStatement	"return ""/sys"" ;"	115:1:3663:3676	4788034	0	True				
ANR	4788038	PrimaryExpression	"""/sys"""		4788034	0					
ANR	4788039	ReturnType	const char *		4788034	1					
ANR	4788040	Identifier	getName		4788034	2					
ANR	4788041	ParameterList			4788034	3					
ANR	4788042	CFGEntryNode	ENTRY		4788034		True				
ANR	4788043	CFGExitNode	EXIT		4788034		True				
ANR	4788044	DeclStmt									
ANR	4788045	Decl							bool	bool ( void )	Detect
ANR	4788046	ClassDef	ProcIfLinuxHibernator	123:0:3950:4477							
ANR	4788047	Function	ProcIfLinuxHibernator	126:1:4018:4111							
ANR	4788048	FunctionDef	ProcIfLinuxHibernator (LinuxHibernator & hibernator)		4788047	0					
ANR	4788049	CompoundStatement		127:39:4109:4111	4788047	0					
ANR	4788050	Identifier	ProcIfLinuxHibernator		4788047	1					
ANR	4788051	ParameterList	LinuxHibernator & hibernator		4788047	2					
ANR	4788052	Parameter	LinuxHibernator & hibernator	126:24:4041:4067	4788047	0	True				
ANR	4788053	ParameterType	LinuxHibernator &		4788047	0					
ANR	4788054	Identifier	hibernator		4788047	1					
ANR	4788055	CFGEntryNode	ENTRY		4788047		True				
ANR	4788056	CFGExitNode	EXIT		4788047		True				
ANR	4788057	Symbol	hibernator		4788047						
ANR	4788058	Function	~ProcIfLinuxHibernator	128:9:4123:4154							
ANR	4788059	FunctionDef	~ProcIfLinuxHibernator ()		4788058	1					
ANR	4788060	CompoundStatement		128:38:4152:4154	4788058	0					
ANR	4788061	Identifier	~ProcIfLinuxHibernator		4788058	1					
ANR	4788062	ParameterList			4788058	2					
ANR	4788063	CFGEntryNode	ENTRY		4788058		True				
ANR	4788064	CFGExitNode	EXIT		4788058		True				
ANR	4788065	Function	getName	130:1:4159:4211							
ANR	4788066	FunctionDef	getName ()		4788065	2					
ANR	4788067	CompoundStatement		130:35:4193:4211	4788065	0					
ANR	4788068	ReturnStatement	"return ""/proc"" ;"	130:1:4195:4209	4788065	0	True				
ANR	4788069	PrimaryExpression	"""/proc"""		4788065	0					
ANR	4788070	ReturnType	const char *		4788065	1					
ANR	4788071	Identifier	getName		4788065	2					
ANR	4788072	ParameterList			4788065	3					
ANR	4788073	CFGEntryNode	ENTRY		4788065		True				
ANR	4788074	CFGExitNode	EXIT		4788065		True				
ANR	4788075	DeclStmt									
ANR	4788076	Decl							bool	bool ( void )	Detect
ANR	4788077	Function	LinuxHibernator :: LinuxHibernator	140:0:4524:4651							
ANR	4788078	FunctionDef	LinuxHibernator :: LinuxHibernator ()		4788077	0					
ANR	4788079	CompoundStatement		144:0:4649:4651	4788077	0					
ANR	4788080	Identifier	LinuxHibernator :: LinuxHibernator		4788077	1					
ANR	4788081	ParameterList			4788077	2					
ANR	4788082	CFGEntryNode	ENTRY		4788077		True				
ANR	4788083	CFGExitNode	EXIT		4788077		True				
ANR	4788084	Function	LinuxHibernator :: ~LinuxHibernator	147:0:4654:4794							
ANR	4788085	FunctionDef	LinuxHibernator :: ~LinuxHibernator ()		4788084	0					
ANR	4788086	CompoundStatement		148:0:4705:4794	4788084	0					
ANR	4788087	IfStatement	if ( m_real_hibernator )		4788084	0					
ANR	4788088	Condition	m_real_hibernator	149:6:4713:4729	4788084	0	True				
ANR	4788089	Identifier	m_real_hibernator		4788084	0					
ANR	4788090	CompoundStatement		2:26:27:27	4788084	1					
ANR	4788091	Statement	delete	150:2:4737:4742	4788084	0	True				
ANR	4788092	ExpressionStatement	m_real_hibernator	150:9:4744:4761	4788084	1	True				
ANR	4788093	Identifier	m_real_hibernator		4788084	0					
ANR	4788094	ExpressionStatement	m_real_hibernator = NULL	151:2:4765:4789	4788084	2	True				
ANR	4788095	AssignmentExpression	m_real_hibernator = NULL		4788084	0		=			
ANR	4788096	Identifier	m_real_hibernator		4788084	0					
ANR	4788097	Identifier	NULL		4788084	1					
ANR	4788098	Identifier	LinuxHibernator :: ~LinuxHibernator		4788084	1					
ANR	4788099	ParameterList			4788084	2					
ANR	4788100	CFGEntryNode	ENTRY		4788084		True				
ANR	4788101	CFGExitNode	EXIT		4788084		True				
ANR	4788102	Symbol	m_real_hibernator		4788084						
ANR	4788103	Symbol	NULL		4788084						
ANR	4788104	Function	LinuxHibernator :: getMethod	155:0:4797:4939							
ANR	4788105	FunctionDef	LinuxHibernator :: getMethod ()		4788104	0					
ANR	4788106	CompoundStatement		157:0:4851:4939	4788104	0					
ANR	4788107	IfStatement	if ( m_real_hibernator )		4788104	0					
ANR	4788108	Condition	m_real_hibernator	158:6:4859:4875	4788104	0	True				
ANR	4788109	Identifier	m_real_hibernator		4788104	0					
ANR	4788110	CompoundStatement		2:26:27:27	4788104	1					
ANR	4788111	ReturnStatement	return m_real_hibernator -> getName ( ) ;	159:2:4883:4918	4788104	0	True				
ANR	4788112	CallExpression	m_real_hibernator -> getName ( )		4788104	0					
ANR	4788113	Callee	m_real_hibernator -> getName		4788104	0					
ANR	4788114	PtrMemberAccess	m_real_hibernator -> getName		4788104	0					
ANR	4788115	Identifier	m_real_hibernator		4788104	0					
ANR	4788116	Identifier	getName		4788104	1					
ANR	4788117	ArgumentList			4788104	1					
ANR	4788118	ReturnStatement	"return ""NONE"" ;"	161:1:4924:4937	4788104	1	True				
ANR	4788119	PrimaryExpression	"""NONE"""		4788104	0					
ANR	4788120	ReturnType	const char *		4788104	1					
ANR	4788121	Identifier	LinuxHibernator :: getMethod		4788104	2					
ANR	4788122	ParameterList			4788104	3					
ANR	4788123	CFGEntryNode	ENTRY		4788104		True				
ANR	4788124	CFGExitNode	EXIT		4788104		True				
ANR	4788125	Symbol	m_real_hibernator		4788104						
ANR	4788126	Symbol	m_real_hibernator -> getName		4788104						
ANR	4788127	Symbol	* m_real_hibernator		4788104						
ANR	4788128	Function	LinuxHibernator :: initialize	164:0:4942:7031							
ANR	4788129	FunctionDef	LinuxHibernator :: initialize ()		4788128	0					
ANR	4788130	CompoundStatement		166:0:4983:7031	4788128	0					
ANR	4788131	ExpressionStatement	setStates ( NONE )	169:1:5015:5033	4788128	0	True				
ANR	4788132	CallExpression	setStates ( NONE )		4788128	0					
ANR	4788133	Callee	setStates		4788128	0					
ANR	4788134	Identifier	setStates		4788128	0					
ANR	4788135	ArgumentList	NONE		4788128	1					
ANR	4788136	Argument	NONE		4788128	0					
ANR	4788137	Identifier	NONE		4788128	0					
ANR	4788138	ExpressionStatement	m_real_hibernator = NULL	170:1:5036:5060	4788128	1	True				
ANR	4788139	AssignmentExpression	m_real_hibernator = NULL		4788128	0		=			
ANR	4788140	Identifier	m_real_hibernator		4788128	0					
ANR	4788141	Identifier	NULL		4788128	1					
ANR	4788142	IdentifierDeclStatement	const char * method ;	173:1:5096:5114	4788128	2	True				
ANR	4788143	IdentifierDecl	* method		4788128	0					
ANR	4788144	IdentifierDeclType	const char *		4788128	0					
ANR	4788145	Identifier	method		4788128	1					
ANR	4788146	IfStatement	if ( m_method )		4788128	3					
ANR	4788147	Condition	m_method	174:6:5122:5129	4788128	0	True				
ANR	4788148	Identifier	m_method		4788128	0					
ANR	4788149	CompoundStatement		9:17:149:149	4788128	1					
ANR	4788150	ExpressionStatement	method = strdup ( m_method )	175:2:5137:5164	4788128	0	True				
ANR	4788151	AssignmentExpression	method = strdup ( m_method )		4788128	0		=			
ANR	4788152	Identifier	method		4788128	0					
ANR	4788153	CallExpression	strdup ( m_method )		4788128	1					
ANR	4788154	Callee	strdup		4788128	0					
ANR	4788155	Identifier	strdup		4788128	0					
ANR	4788156	ArgumentList	m_method		4788128	1					
ANR	4788157	Argument	m_method		4788128	0					
ANR	4788158	Identifier	m_method		4788128	0					
ANR	4788159	ElseStatement	else		4788128	0					
ANR	4788160	CompoundStatement		12:6:191:191	4788128	0					
ANR	4788161	ExpressionStatement	"method = param ( ""LINUX_HIBERNATION_METHOD"" )"	178:2:5179:5223	4788128	0	True				
ANR	4788162	AssignmentExpression	"method = param ( ""LINUX_HIBERNATION_METHOD"" )"		4788128	0		=			
ANR	4788163	Identifier	method		4788128	0					
ANR	4788164	CallExpression	"param ( ""LINUX_HIBERNATION_METHOD"" )"		4788128	1					
ANR	4788165	Callee	param		4788128	0					
ANR	4788166	Identifier	param		4788128	0					
ANR	4788167	ArgumentList	"""LINUX_HIBERNATION_METHOD"""		4788128	1					
ANR	4788168	Argument	"""LINUX_HIBERNATION_METHOD"""		4788128	0					
ANR	4788169	PrimaryExpression	"""LINUX_HIBERNATION_METHOD"""		4788128	0					
ANR	4788170	IfStatement	if ( method )		4788128	4					
ANR	4788171	Condition	method	180:6:5234:5239	4788128	0	True				
ANR	4788172	Identifier	method		4788128	0					
ANR	4788173	CompoundStatement		15:15:259:259	4788128	1					
ANR	4788174	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Trying method '%s'\\n"" , method )"	181:2:5247:5317	4788128	0	True				
ANR	4788175	CallExpression	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Trying method '%s'\\n"" , method )"		4788128	0					
ANR	4788176	Callee	dprintf		4788128	0					
ANR	4788177	Identifier	dprintf		4788128	0					
ANR	4788178	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788179	Argument	D_FULLDEBUG		4788128	0					
ANR	4788180	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788181	Argument	"""LinuxHibernator: Trying method '%s'\\n"""		4788128	1					
ANR	4788182	PrimaryExpression	"""LinuxHibernator: Trying method '%s'\\n"""		4788128	0					
ANR	4788183	Argument	method		4788128	2					
ANR	4788184	Identifier	method		4788128	0					
ANR	4788185	ElseStatement	else		4788128	0					
ANR	4788186	CompoundStatement		18:6:344:344	4788128	0					
ANR	4788187	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Trying all methods\\n"" )"	184:2:5332:5395	4788128	0	True				
ANR	4788188	CallExpression	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Trying all methods\\n"" )"		4788128	0					
ANR	4788189	Callee	dprintf		4788128	0					
ANR	4788190	Identifier	dprintf		4788128	0					
ANR	4788191	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788192	Argument	D_FULLDEBUG		4788128	0					
ANR	4788193	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788194	Argument	"""LinuxHibernator: Trying all methods\\n"""		4788128	1					
ANR	4788195	PrimaryExpression	"""LinuxHibernator: Trying all methods\\n"""		4788128	0					
ANR	4788196	IdentifierDeclStatement	MyString methods ;	188:1:5439:5455	4788128	5	True				
ANR	4788197	IdentifierDecl	methods		4788128	0					
ANR	4788198	IdentifierDeclType	MyString		4788128	0					
ANR	4788199	Identifier	methods		4788128	1					
ANR	4788200	ForStatement	for ( int type = 0 ; type < 3 ; type ++ )		4788128	6					
ANR	4788201	ForInit	int type = 0 ;	189:7:5464:5476	4788128	0	True				
ANR	4788202	IdentifierDeclStatement	int type = 0 ;		4788128	0					
ANR	4788203	IdentifierDecl	type = 0		4788128	0					
ANR	4788204	IdentifierDeclType	int		4788128	0					
ANR	4788205	Identifier	type		4788128	1					
ANR	4788206	AssignmentExpression	type = 0		4788128	2		=			
ANR	4788207	Identifier	type		4788128	0					
ANR	4788208	PrimaryExpression	0		4788128	1					
ANR	4788209	Condition	type < 3	189:22:5479:5486	4788128	1	True				
ANR	4788210	RelationalExpression	type < 3		4788128	0		<			
ANR	4788211	Identifier	type		4788128	0					
ANR	4788212	PrimaryExpression	3		4788128	1					
ANR	4788213	PostIncDecOperationExpression	type ++	189:33:5490:5495	4788128	2	True				
ANR	4788214	Identifier	type		4788128	0					
ANR	4788215	IncDec	++		4788128	1					
ANR	4788216	CompoundStatement		37:2:799:831	4788128	3					
ANR	4788217	IdentifierDeclStatement	BaseLinuxHibernator * lh = NULL ;	190:2:5503:5533	4788128	0	True				
ANR	4788218	IdentifierDecl	* lh = NULL		4788128	0					
ANR	4788219	IdentifierDeclType	BaseLinuxHibernator *		4788128	0					
ANR	4788220	Identifier	lh		4788128	1					
ANR	4788221	AssignmentExpression	* lh = NULL		4788128	2		=			
ANR	4788222	Identifier	NULL		4788128	0					
ANR	4788223	Identifier	NULL		4788128	1					
ANR	4788224	IfStatement	if ( 0 == type )		4788128	1					
ANR	4788225	Condition	0 == type	191:12:5547:5555	4788128	0	True				
ANR	4788226	EqualityExpression	0 == type		4788128	0		==			
ANR	4788227	PrimaryExpression	0		4788128	0					
ANR	4788228	Identifier	type		4788128	1					
ANR	4788229	CompoundStatement		26:24:575:575	4788128	1					
ANR	4788230	ExpressionStatement	lh = new PmUtilLinuxHibernator ( * this )	192:3:5564:5603	4788128	0	True				
ANR	4788231	AssignmentExpression	lh = new PmUtilLinuxHibernator ( * this )		4788128	0		=			
ANR	4788232	Identifier	lh		4788128	0					
ANR	4788233	UnaryOperationExpression	* this		4788128	1					
ANR	4788234	UnaryOperator	*		4788128	0					
ANR	4788235	Identifier	this		4788128	1					
ANR	4788236	ElseStatement	else		4788128	0					
ANR	4788237	IfStatement	if ( 1 == type )		4788128	0					
ANR	4788238	Condition	1 == type	194:12:5621:5629	4788128	0	True				
ANR	4788239	EqualityExpression	1 == type		4788128	0		==			
ANR	4788240	PrimaryExpression	1		4788128	0					
ANR	4788241	Identifier	type		4788128	1					
ANR	4788242	CompoundStatement		29:24:649:649	4788128	1					
ANR	4788243	ExpressionStatement	lh = new SysIfLinuxHibernator ( * this )	195:3:5638:5676	4788128	0	True				
ANR	4788244	AssignmentExpression	lh = new SysIfLinuxHibernator ( * this )		4788128	0		=			
ANR	4788245	Identifier	lh		4788128	0					
ANR	4788246	UnaryOperationExpression	* this		4788128	1					
ANR	4788247	UnaryOperator	*		4788128	0					
ANR	4788248	Identifier	this		4788128	1					
ANR	4788249	ElseStatement	else		4788128	0					
ANR	4788250	IfStatement	if ( 2 == type )		4788128	0					
ANR	4788251	Condition	2 == type	197:12:5694:5702	4788128	0	True				
ANR	4788252	EqualityExpression	2 == type		4788128	0		==			
ANR	4788253	PrimaryExpression	2		4788128	0					
ANR	4788254	Identifier	type		4788128	1					
ANR	4788255	CompoundStatement		32:24:722:722	4788128	1					
ANR	4788256	ExpressionStatement	lh = new ProcIfLinuxHibernator ( * this )	198:3:5711:5750	4788128	0	True				
ANR	4788257	AssignmentExpression	lh = new ProcIfLinuxHibernator ( * this )		4788128	0		=			
ANR	4788258	Identifier	lh		4788128	0					
ANR	4788259	UnaryOperationExpression	* this		4788128	1					
ANR	4788260	UnaryOperator	*		4788128	0					
ANR	4788261	Identifier	this		4788128	1					
ANR	4788262	ExpressionStatement	ASSERT ( lh != NULL )	200:2:5758:5778	4788128	2	True				
ANR	4788263	CallExpression	ASSERT ( lh != NULL )		4788128	0					
ANR	4788264	Callee	ASSERT		4788128	0					
ANR	4788265	Identifier	ASSERT		4788128	0					
ANR	4788266	ArgumentList	lh != NULL		4788128	1					
ANR	4788267	Argument	lh != NULL		4788128	0					
ANR	4788268	EqualityExpression	lh != NULL		4788128	0		!=			
ANR	4788269	Identifier	lh		4788128	0					
ANR	4788270	Identifier	NULL		4788128	1					
ANR	4788271	IdentifierDeclStatement	const char * name = lh -> getName ( ) ;	202:2:5783:5815	4788128	3	True				
ANR	4788272	IdentifierDecl	* name = lh -> getName ( )		4788128	0					
ANR	4788273	IdentifierDeclType	const char *		4788128	0					
ANR	4788274	Identifier	name		4788128	1					
ANR	4788275	AssignmentExpression	* name = lh -> getName ( )		4788128	2		=			
ANR	4788276	Identifier	name		4788128	0					
ANR	4788277	CallExpression	lh -> getName ( )		4788128	1					
ANR	4788278	Callee	lh -> getName		4788128	0					
ANR	4788279	PtrMemberAccess	lh -> getName		4788128	0					
ANR	4788280	Identifier	lh		4788128	0					
ANR	4788281	Identifier	getName		4788128	1					
ANR	4788282	ArgumentList			4788128	1					
ANR	4788283	IfStatement	if ( methods . Length ( ) )		4788128	4					
ANR	4788284	Condition	methods . Length ( )	203:7:5824:5839	4788128	0	True				
ANR	4788285	CallExpression	methods . Length ( )		4788128	0					
ANR	4788286	Callee	methods . Length		4788128	0					
ANR	4788287	MemberAccess	methods . Length		4788128	0					
ANR	4788288	Identifier	methods		4788128	0					
ANR	4788289	Identifier	Length		4788128	1					
ANR	4788290	ArgumentList			4788128	1					
ANR	4788291	CompoundStatement		38:26:859:859	4788128	1					
ANR	4788292	ExpressionStatement	"methods += "","""	204:3:5848:5862	4788128	0	True				
ANR	4788293	AssignmentExpression	"methods += "","""		4788128	0		+=			
ANR	4788294	Identifier	methods		4788128	0					
ANR	4788295	PrimaryExpression	""","""		4788128	1					
ANR	4788296	ExpressionStatement	methods += name	206:2:5870:5885	4788128	5	True				
ANR	4788297	AssignmentExpression	methods += name		4788128	0		+=			
ANR	4788298	Identifier	methods		4788128	0					
ANR	4788299	Identifier	name		4788128	1					
ANR	4788300	IfStatement	if ( ! lh -> nameMatch ( method ) )		4788128	6					
ANR	4788301	Condition	! lh -> nameMatch ( method )	209:7:5947:5969	4788128	0	True				
ANR	4788302	UnaryOperationExpression	! lh -> nameMatch ( method )		4788128	0					
ANR	4788303	UnaryOperator	!		4788128	0					
ANR	4788304	CallExpression	lh -> nameMatch ( method )		4788128	1					
ANR	4788305	Callee	lh -> nameMatch		4788128	0					
ANR	4788306	PtrMemberAccess	lh -> nameMatch		4788128	0					
ANR	4788307	Identifier	lh		4788128	0					
ANR	4788308	Identifier	nameMatch		4788128	1					
ANR	4788309	ArgumentList	method		4788128	1					
ANR	4788310	Argument	method		4788128	0					
ANR	4788311	Identifier	method		4788128	0					
ANR	4788312	CompoundStatement		44:33:989:989	4788128	1					
ANR	4788313	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""hibernator: skipping '%s'\\n"" , name )"	210:3:5978:6037	4788128	0	True				
ANR	4788314	CallExpression	"dprintf ( D_FULLDEBUG , ""hibernator: skipping '%s'\\n"" , name )"		4788128	0					
ANR	4788315	Callee	dprintf		4788128	0					
ANR	4788316	Identifier	dprintf		4788128	0					
ANR	4788317	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788318	Argument	D_FULLDEBUG		4788128	0					
ANR	4788319	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788320	Argument	"""hibernator: skipping '%s'\\n"""		4788128	1					
ANR	4788321	PrimaryExpression	"""hibernator: skipping '%s'\\n"""		4788128	0					
ANR	4788322	Argument	name		4788128	2					
ANR	4788323	Identifier	name		4788128	0					
ANR	4788324	Statement	delete	211:3:6042:6047	4788128	1	True				
ANR	4788325	ExpressionStatement	lh	211:10:6049:6051	4788128	2	True				
ANR	4788326	Identifier	lh		4788128	0					
ANR	4788327	ElseStatement	else		4788128	0					
ANR	4788328	IfStatement	if ( lh -> Detect ( ) )		4788128	0					
ANR	4788329	Condition	lh -> Detect ( )	215:12:6109:6120	4788128	0	True				
ANR	4788330	CallExpression	lh -> Detect ( )		4788128	0					
ANR	4788331	Callee	lh -> Detect		4788128	0					
ANR	4788332	PtrMemberAccess	lh -> Detect		4788128	0					
ANR	4788333	Identifier	lh		4788128	0					
ANR	4788334	Identifier	Detect		4788128	1					
ANR	4788335	ArgumentList			4788128	1					
ANR	4788336	CompoundStatement		50:27:1140:1140	4788128	1					
ANR	4788337	ExpressionStatement	lh -> setDetected ( true )	216:3:6129:6152	4788128	0	True				
ANR	4788338	CallExpression	lh -> setDetected ( true )		4788128	0					
ANR	4788339	Callee	lh -> setDetected		4788128	0					
ANR	4788340	PtrMemberAccess	lh -> setDetected		4788128	0					
ANR	4788341	Identifier	lh		4788128	0					
ANR	4788342	Identifier	setDetected		4788128	1					
ANR	4788343	ArgumentList	true		4788128	1					
ANR	4788344	Argument	true		4788128	0					
ANR	4788345	Identifier	true		4788128	0					
ANR	4788346	ExpressionStatement	m_real_hibernator = lh	217:3:6157:6179	4788128	1	True				
ANR	4788347	AssignmentExpression	m_real_hibernator = lh		4788128	0		=			
ANR	4788348	Identifier	m_real_hibernator		4788128	0					
ANR	4788349	Identifier	lh		4788128	1					
ANR	4788350	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""hibernator: '%s' detected\\n"" , name )"	218:3:6184:6243	4788128	2	True				
ANR	4788351	CallExpression	"dprintf ( D_FULLDEBUG , ""hibernator: '%s' detected\\n"" , name )"		4788128	0					
ANR	4788352	Callee	dprintf		4788128	0					
ANR	4788353	Identifier	dprintf		4788128	0					
ANR	4788354	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788355	Argument	D_FULLDEBUG		4788128	0					
ANR	4788356	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788357	Argument	"""hibernator: '%s' detected\\n"""		4788128	1					
ANR	4788358	PrimaryExpression	"""hibernator: '%s' detected\\n"""		4788128	0					
ANR	4788359	Argument	name		4788128	2					
ANR	4788360	Identifier	name		4788128	0					
ANR	4788361	IfStatement	if ( method )		4788128	3					
ANR	4788362	Condition	method	219:8:6253:6258	4788128	0	True				
ANR	4788363	Identifier	method		4788128	0					
ANR	4788364	CompoundStatement		54:17:1278:1278	4788128	1					
ANR	4788365	Statement	free	220:4:6268:6271	4788128	0	True				
ANR	4788366	Statement	(	220:8:6272:6272	4788128	1	True				
ANR	4788367	Statement	const_cast	220:10:6274:6283	4788128	2	True				
ANR	4788368	Statement	<	220:20:6284:6284	4788128	3	True				
ANR	4788369	Statement	char	220:21:6285:6288	4788128	4	True				
ANR	4788370	Statement	*	220:26:6290:6290	4788128	5	True				
ANR	4788371	Statement	>	220:27:6291:6291	4788128	6	True				
ANR	4788372	Statement	(	220:28:6292:6292	4788128	7	True				
ANR	4788373	Statement	method	220:29:6293:6298	4788128	8	True				
ANR	4788374	Statement	)	220:35:6299:6299	4788128	9	True				
ANR	4788375	Statement	)	220:37:6301:6301	4788128	10	True				
ANR	4788376	ExpressionStatement		220:38:6302:6302	4788128	11	True				
ANR	4788377	ExpressionStatement	setInitialized ( true )	222:3:6312:6334	4788128	4	True				
ANR	4788378	CallExpression	setInitialized ( true )		4788128	0					
ANR	4788379	Callee	setInitialized		4788128	0					
ANR	4788380	Identifier	setInitialized		4788128	0					
ANR	4788381	ArgumentList	true		4788128	1					
ANR	4788382	Argument	true		4788128	0					
ANR	4788383	Identifier	true		4788128	0					
ANR	4788384	ReturnStatement	return true ;	223:3:6339:6350	4788128	5	True				
ANR	4788385	Identifier	true		4788128	0					
ANR	4788386	ElseStatement	else		4788128	0					
ANR	4788387	CompoundStatement		62:7:1433:1433	4788128	0					
ANR	4788388	Statement	delete	228:3:6422:6427	4788128	0	True				
ANR	4788389	ExpressionStatement	lh	228:10:6429:6431	4788128	1	True				
ANR	4788390	Identifier	lh		4788128	0					
ANR	4788391	IfStatement	if ( method )		4788128	2					
ANR	4788392	Condition	method	229:8:6441:6446	4788128	0	True				
ANR	4788393	Identifier	method		4788128	0					
ANR	4788394	CompoundStatement		64:17:1466:1466	4788128	1					
ANR	4788395	Statement	dprintf	230:4:6456:6462	4788128	0	True				
ANR	4788396	Statement	(	230:11:6463:6463	4788128	1	True				
ANR	4788397	Statement	D_ALWAYS	230:13:6465:6472	4788128	2	True				
ANR	4788398	Statement	","	230:21:6473:6473	4788128	3	True				
ANR	4788399	Statement	"""hibernator: '%s' not detected; """	231:7:6482:6514	4788128	4	True				
ANR	4788400	Statement	"""hibernation disabled\\n"""	232:7:6523:6546	4788128	5	True				
ANR	4788401	Statement	","	232:31:6547:6547	4788128	6	True				
ANR	4788402	Statement	name	233:7:6556:6559	4788128	7	True				
ANR	4788403	Statement	)	233:12:6561:6561	4788128	8	True				
ANR	4788404	ExpressionStatement		233:13:6562:6562	4788128	9	True				
ANR	4788405	Statement	free	234:4:6568:6571	4788128	10	True				
ANR	4788406	Statement	(	234:8:6572:6572	4788128	11	True				
ANR	4788407	Statement	const_cast	234:10:6574:6583	4788128	12	True				
ANR	4788408	Statement	<	234:20:6584:6584	4788128	13	True				
ANR	4788409	Statement	char	234:21:6585:6588	4788128	14	True				
ANR	4788410	Statement	*	234:26:6590:6590	4788128	15	True				
ANR	4788411	Statement	>	234:27:6591:6591	4788128	16	True				
ANR	4788412	Statement	(	234:28:6592:6592	4788128	17	True				
ANR	4788413	Statement	method	234:29:6593:6598	4788128	18	True				
ANR	4788414	Statement	)	234:35:6599:6599	4788128	19	True				
ANR	4788415	Statement	)	234:37:6601:6601	4788128	20	True				
ANR	4788416	ExpressionStatement		234:38:6602:6602	4788128	21	True				
ANR	4788417	ReturnStatement	return false ;	235:4:6608:6620	4788128	22	True				
ANR	4788418	Identifier	false		4788128	0					
ANR	4788419	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""hibernator: '%s' not detected\\n"" , name )"	237:3:6630:6693	4788128	3	True				
ANR	4788420	CallExpression	"dprintf ( D_FULLDEBUG , ""hibernator: '%s' not detected\\n"" , name )"		4788128	0					
ANR	4788421	Callee	dprintf		4788128	0					
ANR	4788422	Identifier	dprintf		4788128	0					
ANR	4788423	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788424	Argument	D_FULLDEBUG		4788128	0					
ANR	4788425	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788426	Argument	"""hibernator: '%s' not detected\\n"""		4788128	1					
ANR	4788427	PrimaryExpression	"""hibernator: '%s' not detected\\n"""		4788128	0					
ANR	4788428	Argument	name		4788128	2					
ANR	4788429	Identifier	name		4788128	0					
ANR	4788430	IfStatement	if ( method )		4788128	7					
ANR	4788431	Condition	method	240:6:6708:6713	4788128	0	True				
ANR	4788432	Identifier	method		4788128	0					
ANR	4788433	CompoundStatement		75:15:1733:1733	4788128	1					
ANR	4788434	ExpressionStatement	"dprintf ( D_ALWAYS , ""hibernator: '%s' not detected\\n"" , method )"	241:2:6721:6783	4788128	0	True				
ANR	4788435	CallExpression	"dprintf ( D_ALWAYS , ""hibernator: '%s' not detected\\n"" , method )"		4788128	0					
ANR	4788436	Callee	dprintf		4788128	0					
ANR	4788437	Identifier	dprintf		4788128	0					
ANR	4788438	ArgumentList	D_ALWAYS		4788128	1					
ANR	4788439	Argument	D_ALWAYS		4788128	0					
ANR	4788440	Identifier	D_ALWAYS		4788128	0					
ANR	4788441	Argument	"""hibernator: '%s' not detected\\n"""		4788128	1					
ANR	4788442	PrimaryExpression	"""hibernator: '%s' not detected\\n"""		4788128	0					
ANR	4788443	Argument	method		4788128	2					
ANR	4788444	Identifier	method		4788128	0					
ANR	4788445	Statement	free	242:2:6787:6790	4788128	1	True				
ANR	4788446	Statement	(	242:6:6791:6791	4788128	2	True				
ANR	4788447	Statement	const_cast	242:8:6793:6802	4788128	3	True				
ANR	4788448	Statement	<	242:18:6803:6803	4788128	4	True				
ANR	4788449	Statement	char	242:19:6804:6807	4788128	5	True				
ANR	4788450	Statement	*	242:24:6809:6809	4788128	6	True				
ANR	4788451	Statement	>	242:25:6810:6810	4788128	7	True				
ANR	4788452	Statement	(	242:26:6811:6811	4788128	8	True				
ANR	4788453	Statement	method	242:27:6812:6817	4788128	9	True				
ANR	4788454	Statement	)	242:33:6818:6818	4788128	10	True				
ANR	4788455	Statement	)	242:35:6820:6820	4788128	11	True				
ANR	4788456	ExpressionStatement		242:36:6821:6821	4788128	12	True				
ANR	4788457	ExpressionStatement	"dprintf ( D_ALWAYS , ""No hibernation methods detected; hibernation disabled\\n"" )"	244:1:6827:6909	4788128	8	True				
ANR	4788458	CallExpression	"dprintf ( D_ALWAYS , ""No hibernation methods detected; hibernation disabled\\n"" )"		4788128	0					
ANR	4788459	Callee	dprintf		4788128	0					
ANR	4788460	Identifier	dprintf		4788128	0					
ANR	4788461	ArgumentList	D_ALWAYS		4788128	1					
ANR	4788462	Argument	D_ALWAYS		4788128	0					
ANR	4788463	Identifier	D_ALWAYS		4788128	0					
ANR	4788464	Argument	"""No hibernation methods detected; hibernation disabled\\n"""		4788128	1					
ANR	4788465	PrimaryExpression	"""No hibernation methods detected; hibernation disabled\\n"""		4788128	0					
ANR	4788466	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""  methods tried: %s\\n"" , methods . Length ( ) ? methods . Value ( ) : ""<NONE>"" )"	246:1:6912:7014	4788128	9	True				
ANR	4788467	CallExpression	"dprintf ( D_FULLDEBUG , ""  methods tried: %s\\n"" , methods . Length ( ) ? methods . Value ( ) : ""<NONE>"" )"		4788128	0					
ANR	4788468	Callee	dprintf		4788128	0					
ANR	4788469	Identifier	dprintf		4788128	0					
ANR	4788470	ArgumentList	D_FULLDEBUG		4788128	1					
ANR	4788471	Argument	D_FULLDEBUG		4788128	0					
ANR	4788472	Identifier	D_FULLDEBUG		4788128	0					
ANR	4788473	Argument	"""  methods tried: %s\\n"""		4788128	1					
ANR	4788474	PrimaryExpression	"""  methods tried: %s\\n"""		4788128	0					
ANR	4788475	Argument	"methods . Length ( ) ? methods . Value ( ) : ""<NONE>"""		4788128	2					
ANR	4788476	ConditionalExpression	"methods . Length ( ) ? methods . Value ( ) : ""<NONE>"""		4788128	0					
ANR	4788477	Condition	methods . Length ( )		4788128	0					
ANR	4788478	CallExpression	methods . Length ( )		4788128	0					
ANR	4788479	Callee	methods . Length		4788128	0					
ANR	4788480	MemberAccess	methods . Length		4788128	0					
ANR	4788481	Identifier	methods		4788128	0					
ANR	4788482	Identifier	Length		4788128	1					
ANR	4788483	ArgumentList			4788128	1					
ANR	4788484	CallExpression	methods . Value ( )		4788128	1					
ANR	4788485	Callee	methods . Value		4788128	0					
ANR	4788486	MemberAccess	methods . Value		4788128	0					
ANR	4788487	Identifier	methods		4788128	0					
ANR	4788488	Identifier	Value		4788128	1					
ANR	4788489	ArgumentList			4788128	1					
ANR	4788490	PrimaryExpression	"""<NONE>"""		4788128	2					
ANR	4788491	ReturnStatement	return false ;	249:1:7017:7029	4788128	10	True				
ANR	4788492	Identifier	false		4788128	0					
ANR	4788493	ReturnType	bool		4788128	1					
ANR	4788494	Identifier	LinuxHibernator :: initialize		4788128	2					
ANR	4788495	ParameterList			4788128	3					
ANR	4788496	CFGEntryNode	ENTRY		4788128		True				
ANR	4788497	CFGExitNode	EXIT		4788128		True				
ANR	4788498	Symbol	* lh		4788128						
ANR	4788499	Symbol	lh -> Detect		4788128						
ANR	4788500	Symbol	NULL		4788128						
ANR	4788501	Symbol	method		4788128						
ANR	4788502	Symbol	m_method		4788128						
ANR	4788503	Symbol	methods		4788128						
ANR	4788504	Symbol	methods . Value		4788128						
ANR	4788505	Symbol	this		4788128						
ANR	4788506	Symbol	false		4788128						
ANR	4788507	Symbol	D_ALWAYS		4788128						
ANR	4788508	Symbol	D_FULLDEBUG		4788128						
ANR	4788509	Symbol	type		4788128						
ANR	4788510	Symbol	* this		4788128						
ANR	4788511	Symbol	m_real_hibernator		4788128						
ANR	4788512	Symbol	lh -> nameMatch		4788128						
ANR	4788513	Symbol	param		4788128						
ANR	4788514	Symbol	name		4788128						
ANR	4788515	Symbol	true		4788128						
ANR	4788516	Symbol	methods . Length		4788128						
ANR	4788517	Symbol	lh -> getName		4788128						
ANR	4788518	Symbol	strdup		4788128						
ANR	4788519	Symbol	NONE		4788128						
ANR	4788520	Symbol	lh		4788128						
ANR	4788521	Function	LinuxHibernator :: enterStateStandBy	252:0:7034:7164							
ANR	4788522	FunctionDef	LinuxHibernator :: enterStateStandBy (bool force)		4788521	0					
ANR	4788523	CompoundStatement		254:0:7117:7164	4788521	0					
ANR	4788524	ReturnStatement	return m_real_hibernator -> StandBy ( force ) ;	255:1:7120:7162	4788521	0	True				
ANR	4788525	CallExpression	m_real_hibernator -> StandBy ( force )		4788521	0					
ANR	4788526	Callee	m_real_hibernator -> StandBy		4788521	0					
ANR	4788527	PtrMemberAccess	m_real_hibernator -> StandBy		4788521	0					
ANR	4788528	Identifier	m_real_hibernator		4788521	0					
ANR	4788529	Identifier	StandBy		4788521	1					
ANR	4788530	ArgumentList	force		4788521	1					
ANR	4788531	Argument	force		4788521	0					
ANR	4788532	Identifier	force		4788521	0					
ANR	4788533	ReturnType	HibernatorBase :: SLEEP_STATE		4788521	1					
ANR	4788534	Identifier	LinuxHibernator :: enterStateStandBy		4788521	2					
ANR	4788535	ParameterList	bool force		4788521	3					
ANR	4788536	Parameter	bool force	253:36:7098:7107	4788521	0	True				
ANR	4788537	ParameterType	bool		4788521	0					
ANR	4788538	Identifier	force		4788521	1					
ANR	4788539	CFGEntryNode	ENTRY		4788521		True				
ANR	4788540	CFGExitNode	EXIT		4788521		True				
ANR	4788541	Symbol	m_real_hibernator		4788521						
ANR	4788542	Symbol	force		4788521						
ANR	4788543	Symbol	* m_real_hibernator		4788521						
ANR	4788544	Symbol	m_real_hibernator -> StandBy		4788521						
ANR	4788545	Function	LinuxHibernator :: enterStateSuspend	258:0:7167:7297							
ANR	4788546	FunctionDef	LinuxHibernator :: enterStateSuspend (bool force)		4788545	0					
ANR	4788547	CompoundStatement		260:0:7250:7297	4788545	0					
ANR	4788548	ReturnStatement	return m_real_hibernator -> Suspend ( force ) ;	261:1:7253:7295	4788545	0	True				
ANR	4788549	CallExpression	m_real_hibernator -> Suspend ( force )		4788545	0					
ANR	4788550	Callee	m_real_hibernator -> Suspend		4788545	0					
ANR	4788551	PtrMemberAccess	m_real_hibernator -> Suspend		4788545	0					
ANR	4788552	Identifier	m_real_hibernator		4788545	0					
ANR	4788553	Identifier	Suspend		4788545	1					
ANR	4788554	ArgumentList	force		4788545	1					
ANR	4788555	Argument	force		4788545	0					
ANR	4788556	Identifier	force		4788545	0					
ANR	4788557	ReturnType	HibernatorBase :: SLEEP_STATE		4788545	1					
ANR	4788558	Identifier	LinuxHibernator :: enterStateSuspend		4788545	2					
ANR	4788559	ParameterList	bool force		4788545	3					
ANR	4788560	Parameter	bool force	259:36:7231:7240	4788545	0	True				
ANR	4788561	ParameterType	bool		4788545	0					
ANR	4788562	Identifier	force		4788545	1					
ANR	4788563	CFGEntryNode	ENTRY		4788545		True				
ANR	4788564	CFGExitNode	EXIT		4788545		True				
ANR	4788565	Symbol	m_real_hibernator -> Suspend		4788545						
ANR	4788566	Symbol	m_real_hibernator		4788545						
ANR	4788567	Symbol	force		4788545						
ANR	4788568	Symbol	* m_real_hibernator		4788545						
ANR	4788569	Function	LinuxHibernator :: enterStateHibernate	264:0:7300:7434							
ANR	4788570	FunctionDef	LinuxHibernator :: enterStateHibernate (bool force)		4788569	0					
ANR	4788571	CompoundStatement		266:0:7385:7434	4788569	0					
ANR	4788572	ReturnStatement	return m_real_hibernator -> Hibernate ( force ) ;	267:1:7388:7432	4788569	0	True				
ANR	4788573	CallExpression	m_real_hibernator -> Hibernate ( force )		4788569	0					
ANR	4788574	Callee	m_real_hibernator -> Hibernate		4788569	0					
ANR	4788575	PtrMemberAccess	m_real_hibernator -> Hibernate		4788569	0					
ANR	4788576	Identifier	m_real_hibernator		4788569	0					
ANR	4788577	Identifier	Hibernate		4788569	1					
ANR	4788578	ArgumentList	force		4788569	1					
ANR	4788579	Argument	force		4788569	0					
ANR	4788580	Identifier	force		4788569	0					
ANR	4788581	ReturnType	HibernatorBase :: SLEEP_STATE		4788569	1					
ANR	4788582	Identifier	LinuxHibernator :: enterStateHibernate		4788569	2					
ANR	4788583	ParameterList	bool force		4788569	3					
ANR	4788584	Parameter	bool force	265:38:7366:7375	4788569	0	True				
ANR	4788585	ParameterType	bool		4788569	0					
ANR	4788586	Identifier	force		4788569	1					
ANR	4788587	CFGEntryNode	ENTRY		4788569		True				
ANR	4788588	CFGExitNode	EXIT		4788569		True				
ANR	4788589	Symbol	m_real_hibernator		4788569						
ANR	4788590	Symbol	m_real_hibernator -> Hibernate		4788569						
ANR	4788591	Symbol	force		4788569						
ANR	4788592	Symbol	* m_real_hibernator		4788569						
ANR	4788593	Function	LinuxHibernator :: enterStatePowerOff	270:0:7437:7569							
ANR	4788594	FunctionDef	LinuxHibernator :: enterStatePowerOff (bool force)		4788593	0					
ANR	4788595	CompoundStatement		272:0:7521:7569	4788593	0					
ANR	4788596	ReturnStatement	return m_real_hibernator -> PowerOff ( force ) ;	273:1:7524:7567	4788593	0	True				
ANR	4788597	CallExpression	m_real_hibernator -> PowerOff ( force )		4788593	0					
ANR	4788598	Callee	m_real_hibernator -> PowerOff		4788593	0					
ANR	4788599	PtrMemberAccess	m_real_hibernator -> PowerOff		4788593	0					
ANR	4788600	Identifier	m_real_hibernator		4788593	0					
ANR	4788601	Identifier	PowerOff		4788593	1					
ANR	4788602	ArgumentList	force		4788593	1					
ANR	4788603	Argument	force		4788593	0					
ANR	4788604	Identifier	force		4788593	0					
ANR	4788605	ReturnType	HibernatorBase :: SLEEP_STATE		4788593	1					
ANR	4788606	Identifier	LinuxHibernator :: enterStatePowerOff		4788593	2					
ANR	4788607	ParameterList	bool force		4788593	3					
ANR	4788608	Parameter	bool force	271:37:7502:7511	4788593	0	True				
ANR	4788609	ParameterType	bool		4788593	0					
ANR	4788610	Identifier	force		4788593	1					
ANR	4788611	CFGEntryNode	ENTRY		4788593		True				
ANR	4788612	CFGExitNode	EXIT		4788593		True				
ANR	4788613	Symbol	m_real_hibernator		4788593						
ANR	4788614	Symbol	m_real_hibernator -> PowerOff		4788593						
ANR	4788615	Symbol	force		4788593						
ANR	4788616	Symbol	* m_real_hibernator		4788593						
ANR	4788617	Function	BaseLinuxHibernator :: StandBy	282:0:7777:8027							
ANR	4788618	FunctionDef	BaseLinuxHibernator :: StandBy (bool force)		4788617	0					
ANR	4788619	CompoundStatement		284:0:7855:8027	4788617	0					
ANR	4788620	IdentifierDeclStatement	HibernatorBase :: SLEEP_STATE new_state ;	285:1:7858:7895	4788617	0	True				
ANR	4788621	IdentifierDecl	new_state		4788617	0					
ANR	4788622	IdentifierDeclType	HibernatorBase :: SLEEP_STATE		4788617	0					
ANR	4788623	Identifier	new_state		4788617	1					
ANR	4788624	ExpressionStatement	new_state = Suspend ( force )	287:1:7899:7927	4788617	1	True				
ANR	4788625	AssignmentExpression	new_state = Suspend ( force )		4788617	0		=			
ANR	4788626	Identifier	new_state		4788617	0					
ANR	4788627	CallExpression	Suspend ( force )		4788617	1					
ANR	4788628	Callee	Suspend		4788617	0					
ANR	4788629	Identifier	Suspend		4788617	0					
ANR	4788630	ArgumentList	force		4788617	1					
ANR	4788631	Argument	force		4788617	0					
ANR	4788632	Identifier	force		4788617	0					
ANR	4788633	IfStatement	if ( new_state == HibernatorBase :: S3 )		4788617	2					
ANR	4788634	Condition	new_state == HibernatorBase :: S3	288:6:7935:7965	4788617	0	True				
ANR	4788635	EqualityExpression	new_state == HibernatorBase :: S3		4788617	0		==			
ANR	4788636	Identifier	new_state		4788617	0					
ANR	4788637	Identifier	HibernatorBase :: S3		4788617	1					
ANR	4788638	CompoundStatement		5:40:113:113	4788617	1					
ANR	4788639	ExpressionStatement	new_state = HibernatorBase :: S1	289:2:7973:8003	4788617	0	True				
ANR	4788640	AssignmentExpression	new_state = HibernatorBase :: S1		4788617	0		=			
ANR	4788641	Identifier	new_state		4788617	0					
ANR	4788642	Identifier	HibernatorBase :: S1		4788617	1					
ANR	4788643	ReturnStatement	return new_state ;	291:1:8009:8025	4788617	3	True				
ANR	4788644	Identifier	new_state		4788617	0					
ANR	4788645	ReturnType	HibernatorBase :: SLEEP_STATE		4788617	1					
ANR	4788646	Identifier	BaseLinuxHibernator :: StandBy		4788617	2					
ANR	4788647	ParameterList	bool force		4788617	3					
ANR	4788648	Parameter	bool force	283:31:7836:7845	4788617	0	True				
ANR	4788649	ParameterType	bool		4788617	0					
ANR	4788650	Identifier	force		4788617	1					
ANR	4788651	CFGEntryNode	ENTRY		4788617		True				
ANR	4788652	CFGExitNode	EXIT		4788617		True				
ANR	4788653	Symbol	HibernatorBase :: S3		4788617						
ANR	4788654	Symbol	HibernatorBase :: S1		4788617						
ANR	4788655	Symbol	new_state		4788617						
ANR	4788656	Symbol	Suspend		4788617						
ANR	4788657	Symbol	force		4788617						
ANR	4788658	DeclStmt									
ANR	4788659	Decl							MyString	MyString	command
ANR	4788660	DeclStmt									
ANR	4788661	Decl							int	int	status
ANR	4788662	Function	BaseLinuxHibernator :: writeSysFile	308:0:8353:9055							
ANR	4788663	FunctionDef	"BaseLinuxHibernator :: writeSysFile (const char * file , const char * str)"		4788662	0					
ANR	4788664	CompoundStatement		310:0:8436:9055	4788662	0					
ANR	4788665	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Writing '%s' to '%s'\\n"" , str , file )"	312:1:8480:8560	4788662	0	True				
ANR	4788666	CallExpression	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: Writing '%s' to '%s'\\n"" , str , file )"		4788662	0					
ANR	4788667	Callee	dprintf		4788662	0					
ANR	4788668	Identifier	dprintf		4788662	0					
ANR	4788669	ArgumentList	D_FULLDEBUG		4788662	1					
ANR	4788670	Argument	D_FULLDEBUG		4788662	0					
ANR	4788671	Identifier	D_FULLDEBUG		4788662	0					
ANR	4788672	Argument	"""LinuxHibernator: Writing '%s' to '%s'\\n"""		4788662	1					
ANR	4788673	PrimaryExpression	"""LinuxHibernator: Writing '%s' to '%s'\\n"""		4788662	0					
ANR	4788674	Argument	str		4788662	2					
ANR	4788675	Identifier	str		4788662	0					
ANR	4788676	Argument	file		4788662	3					
ANR	4788677	Identifier	file		4788662	0					
ANR	4788678	IdentifierDeclStatement	priv_state p = set_root_priv ( ) ;	314:1:8563:8594	4788662	1	True				
ANR	4788679	IdentifierDecl	p = set_root_priv ( )		4788662	0					
ANR	4788680	IdentifierDeclType	priv_state		4788662	0					
ANR	4788681	Identifier	p		4788662	1					
ANR	4788682	AssignmentExpression	p = set_root_priv ( )		4788662	2		=			
ANR	4788683	Identifier	p		4788662	0					
ANR	4788684	CallExpression	set_root_priv ( )		4788662	1					
ANR	4788685	Callee	set_root_priv		4788662	0					
ANR	4788686	Identifier	set_root_priv		4788662	0					
ANR	4788687	ArgumentList			4788662	1					
ANR	4788688	IdentifierDeclStatement	"int fd = safe_open_wrapper_follow ( file , O_WRONLY ) ;"	315:1:8597:8648	4788662	2	True				
ANR	4788689	IdentifierDecl	"fd = safe_open_wrapper_follow ( file , O_WRONLY )"		4788662	0					
ANR	4788690	IdentifierDeclType	int		4788662	0					
ANR	4788691	Identifier	fd		4788662	1					
ANR	4788692	AssignmentExpression	"fd = safe_open_wrapper_follow ( file , O_WRONLY )"		4788662	2		=			
ANR	4788693	Identifier	fd		4788662	0					
ANR	4788694	CallExpression	"safe_open_wrapper_follow ( file , O_WRONLY )"		4788662	1					
ANR	4788695	Callee	safe_open_wrapper_follow		4788662	0					
ANR	4788696	Identifier	safe_open_wrapper_follow		4788662	0					
ANR	4788697	ArgumentList	file		4788662	1					
ANR	4788698	Argument	file		4788662	0					
ANR	4788699	Identifier	file		4788662	0					
ANR	4788700	Argument	O_WRONLY		4788662	1					
ANR	4788701	Identifier	O_WRONLY		4788662	0					
ANR	4788702	ExpressionStatement	set_priv ( p )	316:1:8651:8664	4788662	3	True				
ANR	4788703	CallExpression	set_priv ( p )		4788662	0					
ANR	4788704	Callee	set_priv		4788662	0					
ANR	4788705	Identifier	set_priv		4788662	0					
ANR	4788706	ArgumentList	p		4788662	1					
ANR	4788707	Argument	p		4788662	0					
ANR	4788708	Identifier	p		4788662	0					
ANR	4788709	IfStatement	if ( fd < 0 )		4788662	4					
ANR	4788710	Condition	fd < 0	317:6:8672:8677	4788662	0	True				
ANR	4788711	RelationalExpression	fd < 0		4788662	0		<			
ANR	4788712	Identifier	fd		4788662	0					
ANR	4788713	PrimaryExpression	0		4788662	1					
ANR	4788714	CompoundStatement		8:15:244:244	4788662	1					
ANR	4788715	ExpressionStatement	"dprintf ( D_ALWAYS , ""LinuxHibernator: Error writing '%s' to '%s': %s\\n"" , str , file , strerror ( errno ) )"	318:2:8685:8795	4788662	0	True				
ANR	4788716	CallExpression	"dprintf ( D_ALWAYS , ""LinuxHibernator: Error writing '%s' to '%s': %s\\n"" , str , file , strerror ( errno ) )"		4788662	0					
ANR	4788717	Callee	dprintf		4788662	0					
ANR	4788718	Identifier	dprintf		4788662	0					
ANR	4788719	ArgumentList	D_ALWAYS		4788662	1					
ANR	4788720	Argument	D_ALWAYS		4788662	0					
ANR	4788721	Identifier	D_ALWAYS		4788662	0					
ANR	4788722	Argument	"""LinuxHibernator: Error writing '%s' to '%s': %s\\n"""		4788662	1					
ANR	4788723	PrimaryExpression	"""LinuxHibernator: Error writing '%s' to '%s': %s\\n"""		4788662	0					
ANR	4788724	Argument	str		4788662	2					
ANR	4788725	Identifier	str		4788662	0					
ANR	4788726	Argument	file		4788662	3					
ANR	4788727	Identifier	file		4788662	0					
ANR	4788728	Argument	strerror ( errno )		4788662	4					
ANR	4788729	CallExpression	strerror ( errno )		4788662	0					
ANR	4788730	Callee	strerror		4788662	0					
ANR	4788731	Identifier	strerror		4788662	0					
ANR	4788732	ArgumentList	errno		4788662	1					
ANR	4788733	Argument	errno		4788662	0					
ANR	4788734	Identifier	errno		4788662	0					
ANR	4788735	ReturnStatement	return false ;	321:2:8799:8811	4788662	1	True				
ANR	4788736	Identifier	false		4788662	0					
ANR	4788737	IdentifierDeclStatement	int len = strlen ( str ) ;	323:1:8817:8838	4788662	5	True				
ANR	4788738	IdentifierDecl	len = strlen ( str )		4788662	0					
ANR	4788739	IdentifierDeclType	int		4788662	0					
ANR	4788740	Identifier	len		4788662	1					
ANR	4788741	AssignmentExpression	len = strlen ( str )		4788662	2		=			
ANR	4788742	Identifier	len		4788662	0					
ANR	4788743	CallExpression	strlen ( str )		4788662	1					
ANR	4788744	Callee	strlen		4788662	0					
ANR	4788745	Identifier	strlen		4788662	0					
ANR	4788746	ArgumentList	str		4788662	1					
ANR	4788747	Argument	str		4788662	0					
ANR	4788748	Identifier	str		4788662	0					
ANR	4788749	IfStatement	"if ( write ( fd , str , len ) != len )"		4788662	6					
ANR	4788750	Condition	"write ( fd , str , len ) != len"	324:6:8846:8873	4788662	0	True				
ANR	4788751	EqualityExpression	"write ( fd , str , len ) != len"		4788662	0		!=			
ANR	4788752	CallExpression	"write ( fd , str , len )"		4788662	0					
ANR	4788753	Callee	write		4788662	0					
ANR	4788754	Identifier	write		4788662	0					
ANR	4788755	ArgumentList	fd		4788662	1					
ANR	4788756	Argument	fd		4788662	0					
ANR	4788757	Identifier	fd		4788662	0					
ANR	4788758	Argument	str		4788662	1					
ANR	4788759	Identifier	str		4788662	0					
ANR	4788760	Argument	len		4788662	2					
ANR	4788761	Identifier	len		4788662	0					
ANR	4788762	Identifier	len		4788662	1					
ANR	4788763	CompoundStatement		15:37:440:440	4788662	1					
ANR	4788764	ExpressionStatement	close ( fd )	325:2:8881:8892	4788662	0	True				
ANR	4788765	CallExpression	close ( fd )		4788662	0					
ANR	4788766	Callee	close		4788662	0					
ANR	4788767	Identifier	close		4788662	0					
ANR	4788768	ArgumentList	fd		4788662	1					
ANR	4788769	Argument	fd		4788662	0					
ANR	4788770	Identifier	fd		4788662	0					
ANR	4788771	ExpressionStatement	"dprintf ( D_ALWAYS , ""LinuxHibernator: Error writing '%s' to '%s': %s\\n"" , str , file , strerror ( errno ) )"	326:2:8896:9006	4788662	1	True				
ANR	4788772	CallExpression	"dprintf ( D_ALWAYS , ""LinuxHibernator: Error writing '%s' to '%s': %s\\n"" , str , file , strerror ( errno ) )"		4788662	0					
ANR	4788773	Callee	dprintf		4788662	0					
ANR	4788774	Identifier	dprintf		4788662	0					
ANR	4788775	ArgumentList	D_ALWAYS		4788662	1					
ANR	4788776	Argument	D_ALWAYS		4788662	0					
ANR	4788777	Identifier	D_ALWAYS		4788662	0					
ANR	4788778	Argument	"""LinuxHibernator: Error writing '%s' to '%s': %s\\n"""		4788662	1					
ANR	4788779	PrimaryExpression	"""LinuxHibernator: Error writing '%s' to '%s': %s\\n"""		4788662	0					
ANR	4788780	Argument	str		4788662	2					
ANR	4788781	Identifier	str		4788662	0					
ANR	4788782	Argument	file		4788662	3					
ANR	4788783	Identifier	file		4788662	0					
ANR	4788784	Argument	strerror ( errno )		4788662	4					
ANR	4788785	CallExpression	strerror ( errno )		4788662	0					
ANR	4788786	Callee	strerror		4788662	0					
ANR	4788787	Identifier	strerror		4788662	0					
ANR	4788788	ArgumentList	errno		4788662	1					
ANR	4788789	Argument	errno		4788662	0					
ANR	4788790	Identifier	errno		4788662	0					
ANR	4788791	ReturnStatement	return false ;	329:2:9010:9022	4788662	2	True				
ANR	4788792	Identifier	false		4788662	0					
ANR	4788793	ExpressionStatement	close ( fd )	331:1:9028:9039	4788662	7	True				
ANR	4788794	CallExpression	close ( fd )		4788662	0					
ANR	4788795	Callee	close		4788662	0					
ANR	4788796	Identifier	close		4788662	0					
ANR	4788797	ArgumentList	fd		4788662	1					
ANR	4788798	Argument	fd		4788662	0					
ANR	4788799	Identifier	fd		4788662	0					
ANR	4788800	ReturnStatement	return true ;	332:1:9042:9053	4788662	8	True				
ANR	4788801	Identifier	true		4788662	0					
ANR	4788802	ReturnType	bool		4788662	1					
ANR	4788803	Identifier	BaseLinuxHibernator :: writeSysFile		4788662	2					
ANR	4788804	ParameterList	"const char * file , const char * str"		4788662	3					
ANR	4788805	Parameter	const char * file	309:36:8394:8409	4788662	0	True				
ANR	4788806	ParameterType	const char *		4788662	0					
ANR	4788807	Identifier	file		4788662	1					
ANR	4788808	Parameter	const char * str	309:54:8412:8426	4788662	1	True				
ANR	4788809	ParameterType	const char *		4788662	0					
ANR	4788810	Identifier	str		4788662	1					
ANR	4788811	CFGEntryNode	ENTRY		4788662		True				
ANR	4788812	CFGExitNode	EXIT		4788662		True				
ANR	4788813	Symbol	errno		4788662						
ANR	4788814	Symbol	safe_open_wrapper_follow		4788662						
ANR	4788815	Symbol	D_ALWAYS		4788662						
ANR	4788816	Symbol	false		4788662						
ANR	4788817	Symbol	D_FULLDEBUG		4788662						
ANR	4788818	Symbol	set_root_priv		4788662						
ANR	4788819	Symbol	str		4788662						
ANR	4788820	Symbol	p		4788662						
ANR	4788821	Symbol	strerror		4788662						
ANR	4788822	Symbol	strlen		4788662						
ANR	4788823	Symbol	file		4788662						
ANR	4788824	Symbol	len		4788662						
ANR	4788825	Symbol	true		4788662						
ANR	4788826	Symbol	O_WRONLY		4788662						
ANR	4788827	Symbol	write		4788662						
ANR	4788828	Symbol	fd		4788662						
ANR	4788829	Function	BaseLinuxHibernator :: strip	336:0:9107:9310							
ANR	4788830	FunctionDef	BaseLinuxHibernator :: strip (char * s)		4788829	0					
ANR	4788831	CompoundStatement		338:0:9159:9310	4788829	0					
ANR	4788832	IdentifierDeclStatement	int len = strlen ( s ) ;	339:1:9162:9183	4788829	0	True				
ANR	4788833	IdentifierDecl	len = strlen ( s )		4788829	0					
ANR	4788834	IdentifierDeclType	int		4788829	0					
ANR	4788835	Identifier	len		4788829	1					
ANR	4788836	AssignmentExpression	len = strlen ( s )		4788829	2		=			
ANR	4788837	Identifier	len		4788829	0					
ANR	4788838	CallExpression	strlen ( s )		4788829	1					
ANR	4788839	Callee	strlen		4788829	0					
ANR	4788840	Identifier	strlen		4788829	0					
ANR	4788841	ArgumentList	s		4788829	1					
ANR	4788842	Argument	s		4788829	0					
ANR	4788843	Identifier	s		4788829	0					
ANR	4788844	IfStatement	if ( ! len )		4788829	1					
ANR	4788845	Condition	! len	340:6:9191:9194	4788829	0	True				
ANR	4788846	UnaryOperationExpression	! len		4788829	0					
ANR	4788847	UnaryOperator	!		4788829	0					
ANR	4788848	Identifier	len		4788829	1					
ANR	4788849	CompoundStatement		3:12:37:37	4788829	1					
ANR	4788850	ReturnStatement	return s ;	341:2:9201:9209	4788829	0	True				
ANR	4788851	Identifier	s		4788829	0					
ANR	4788852	IdentifierDeclStatement	char * p = s + ( len - 1 ) ;	343:1:9215:9234	4788829	2	True				
ANR	4788853	IdentifierDecl	* p = s + ( len - 1 )		4788829	0					
ANR	4788854	IdentifierDeclType	char *		4788829	0					
ANR	4788855	Identifier	p		4788829	1					
ANR	4788856	AssignmentExpression	* p = s + ( len - 1 )		4788829	2		=			
ANR	4788857	Identifier	p		4788829	0					
ANR	4788858	AdditiveExpression	s + ( len - 1 )		4788829	1		+			
ANR	4788859	Identifier	s		4788829	0					
ANR	4788860	AdditiveExpression	len - 1		4788829	1		-			
ANR	4788861	Identifier	len		4788829	0					
ANR	4788862	PrimaryExpression	1		4788829	1					
ANR	4788863	WhileStatement	while ( len && isspace ( * p ) )		4788829	3					
ANR	4788864	Condition	len && isspace ( * p )	344:8:9244:9261	4788829	0	True				
ANR	4788865	AndExpression	len && isspace ( * p )		4788829	0		&&			
ANR	4788866	Identifier	len		4788829	0					
ANR	4788867	CallExpression	isspace ( * p )		4788829	1					
ANR	4788868	Callee	isspace		4788829	0					
ANR	4788869	Identifier	isspace		4788829	0					
ANR	4788870	ArgumentList	* p		4788829	1					
ANR	4788871	Argument	* p		4788829	0					
ANR	4788872	UnaryOperationExpression	* p		4788829	0					
ANR	4788873	UnaryOperator	*		4788829	0					
ANR	4788874	Identifier	p		4788829	1					
ANR	4788875	CompoundStatement		7:29:105:105	4788829	1					
ANR	4788876	ExpressionStatement	* p = '\\0'	345:2:9269:9278	4788829	0	True				
ANR	4788877	AssignmentExpression	* p = '\\0'		4788829	0		=			
ANR	4788878	UnaryOperationExpression	* p		4788829	0					
ANR	4788879	UnaryOperator	*		4788829	0					
ANR	4788880	Identifier	p		4788829	1					
ANR	4788881	PrimaryExpression	'\\0'		4788829	1					
ANR	4788882	ExpressionStatement	p --	346:2:9282:9285	4788829	1	True				
ANR	4788883	PostIncDecOperationExpression	p --		4788829	0					
ANR	4788884	Identifier	p		4788829	0					
ANR	4788885	IncDec	--		4788829	1					
ANR	4788886	ExpressionStatement	len --	347:2:9289:9294	4788829	2	True				
ANR	4788887	PostIncDecOperationExpression	len --		4788829	0					
ANR	4788888	Identifier	len		4788829	0					
ANR	4788889	IncDec	--		4788829	1					
ANR	4788890	ReturnStatement	return s ;	349:1:9300:9308	4788829	4	True				
ANR	4788891	Identifier	s		4788829	0					
ANR	4788892	ReturnType	char *		4788829	1					
ANR	4788893	Identifier	BaseLinuxHibernator :: strip		4788829	2					
ANR	4788894	ParameterList	char * s		4788829	3					
ANR	4788895	Parameter	char * s	337:29:9143:9149	4788829	0	True				
ANR	4788896	ParameterType	char *		4788829	0					
ANR	4788897	Identifier	s		4788829	1					
ANR	4788898	CFGEntryNode	ENTRY		4788829		True				
ANR	4788899	CFGExitNode	EXIT		4788829		True				
ANR	4788900	Symbol	p		4788829						
ANR	4788901	Symbol	strlen		4788829						
ANR	4788902	Symbol	s		4788829						
ANR	4788903	Symbol	len		4788829						
ANR	4788904	Symbol	isspace		4788829						
ANR	4788905	Symbol	* p		4788829						
ANR	4788906	Function	PmUtilLinuxHibernator :: Detect	356:0:9448:10025							
ANR	4788907	FunctionDef	PmUtilLinuxHibernator :: Detect ()		4788906	0					
ANR	4788908	CompoundStatement		358:0:9492:10025	4788906	0					
ANR	4788909	IdentifierDeclStatement	StatWrapper sw ( PM_UTIL_CHECK ) ;	359:1:9495:9526	4788906	0	True				
ANR	4788910	IdentifierDecl	sw ( PM_UTIL_CHECK )		4788906	0					
ANR	4788911	IdentifierDeclType	StatWrapper		4788906	0					
ANR	4788912	Identifier	sw		4788906	1					
ANR	4788913	Identifier	PM_UTIL_CHECK		4788906	2					
ANR	4788914	IfStatement	if ( sw . GetStatus ( ) != 0 )		4788906	1					
ANR	4788915	Condition	sw . GetStatus ( ) != 0	360:6:9534:9552	4788906	0	True				
ANR	4788916	EqualityExpression	sw . GetStatus ( ) != 0		4788906	0		!=			
ANR	4788917	CallExpression	sw . GetStatus ( )		4788906	0					
ANR	4788918	Callee	sw . GetStatus		4788906	0					
ANR	4788919	MemberAccess	sw . GetStatus		4788906	0					
ANR	4788920	Identifier	sw		4788906	0					
ANR	4788921	Identifier	GetStatus		4788906	1					
ANR	4788922	ArgumentList			4788906	1					
ANR	4788923	PrimaryExpression	0		4788906	1					
ANR	4788924	CompoundStatement		3:28:63:63	4788906	1					
ANR	4788925	ReturnStatement	return false ;	361:2:9560:9572	4788906	0	True				
ANR	4788926	Identifier	false		4788906	0					
ANR	4788927	IdentifierDeclStatement	MyString command ;	364:1:9579:9595	4788906	2	True				
ANR	4788928	IdentifierDecl	command		4788906	0					
ANR	4788929	IdentifierDeclType	MyString		4788906	0					
ANR	4788930	Identifier	command		4788906	1					
ANR	4788931	IdentifierDeclStatement	int status ;	365:1:9598:9610	4788906	3	True				
ANR	4788932	IdentifierDecl	status		4788906	0					
ANR	4788933	IdentifierDeclType	int		4788906	0					
ANR	4788934	Identifier	status		4788906	1					
ANR	4788935	ExpressionStatement	command = PM_UTIL_CHECK	367:1:9614:9637	4788906	4	True				
ANR	4788936	AssignmentExpression	command = PM_UTIL_CHECK		4788906	0		=			
ANR	4788937	Identifier	command		4788906	0					
ANR	4788938	Identifier	PM_UTIL_CHECK		4788906	1					
ANR	4788939	ExpressionStatement	"command += "" --suspend"""	368:1:9640:9663	4788906	5	True				
ANR	4788940	AssignmentExpression	"command += "" --suspend"""		4788906	0		+=			
ANR	4788941	Identifier	command		4788906	0					
ANR	4788942	PrimaryExpression	""" --suspend"""		4788906	1					
ANR	4788943	ExpressionStatement	status = system ( command . Value ( ) )	369:1:9666:9700	4788906	6	True				
ANR	4788944	AssignmentExpression	status = system ( command . Value ( ) )		4788906	0		=			
ANR	4788945	Identifier	status		4788906	0					
ANR	4788946	CallExpression	system ( command . Value ( ) )		4788906	1					
ANR	4788947	Callee	system		4788906	0					
ANR	4788948	Identifier	system		4788906	0					
ANR	4788949	ArgumentList	command . Value ( )		4788906	1					
ANR	4788950	Argument	command . Value ( )		4788906	0					
ANR	4788951	CallExpression	command . Value ( )		4788906	0					
ANR	4788952	Callee	command . Value		4788906	0					
ANR	4788953	MemberAccess	command . Value		4788906	0					
ANR	4788954	Identifier	command		4788906	0					
ANR	4788955	Identifier	Value		4788906	1					
ANR	4788956	ArgumentList			4788906	1					
ANR	4788957	IfStatement	if ( ( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 ) )		4788906	7					
ANR	4788958	Condition	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )	370:6:9708:9753	4788906	0	True				
ANR	4788959	AndExpression	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )		4788906	0		&&			
ANR	4788960	RelationalExpression	status >= 0		4788906	0		>=			
ANR	4788961	Identifier	status		4788906	0					
ANR	4788962	PrimaryExpression	0		4788906	1					
ANR	4788963	EqualityExpression	WEXITSTATUS ( status ) == 0		4788906	1		==			
ANR	4788964	CallExpression	WEXITSTATUS ( status )		4788906	0					
ANR	4788965	Callee	WEXITSTATUS		4788906	0					
ANR	4788966	Identifier	WEXITSTATUS		4788906	0					
ANR	4788967	ArgumentList	status		4788906	1					
ANR	4788968	Argument	status		4788906	0					
ANR	4788969	Identifier	status		4788906	0					
ANR	4788970	PrimaryExpression	0		4788906	1					
ANR	4788971	CompoundStatement		13:55:264:264	4788906	1					
ANR	4788972	ExpressionStatement	m_hibernator -> addState ( HibernatorBase :: S3 )	371:2:9761:9805	4788906	0	True				
ANR	4788973	CallExpression	m_hibernator -> addState ( HibernatorBase :: S3 )		4788906	0					
ANR	4788974	Callee	m_hibernator -> addState		4788906	0					
ANR	4788975	PtrMemberAccess	m_hibernator -> addState		4788906	0					
ANR	4788976	Identifier	m_hibernator		4788906	0					
ANR	4788977	Identifier	addState		4788906	1					
ANR	4788978	ArgumentList	HibernatorBase :: S3		4788906	1					
ANR	4788979	Argument	HibernatorBase :: S3		4788906	0					
ANR	4788980	Identifier	HibernatorBase :: S3		4788906	0					
ANR	4788981	ExpressionStatement	command = PM_UTIL_CHECK	374:1:9812:9835	4788906	8	True				
ANR	4788982	AssignmentExpression	command = PM_UTIL_CHECK		4788906	0		=			
ANR	4788983	Identifier	command		4788906	0					
ANR	4788984	Identifier	PM_UTIL_CHECK		4788906	1					
ANR	4788985	ExpressionStatement	"command += "" --hibernate"""	375:1:9838:9863	4788906	9	True				
ANR	4788986	AssignmentExpression	"command += "" --hibernate"""		4788906	0		+=			
ANR	4788987	Identifier	command		4788906	0					
ANR	4788988	PrimaryExpression	""" --hibernate"""		4788906	1					
ANR	4788989	ExpressionStatement	status = system ( command . Value ( ) )	376:1:9866:9900	4788906	10	True				
ANR	4788990	AssignmentExpression	status = system ( command . Value ( ) )		4788906	0		=			
ANR	4788991	Identifier	status		4788906	0					
ANR	4788992	CallExpression	system ( command . Value ( ) )		4788906	1					
ANR	4788993	Callee	system		4788906	0					
ANR	4788994	Identifier	system		4788906	0					
ANR	4788995	ArgumentList	command . Value ( )		4788906	1					
ANR	4788996	Argument	command . Value ( )		4788906	0					
ANR	4788997	CallExpression	command . Value ( )		4788906	0					
ANR	4788998	Callee	command . Value		4788906	0					
ANR	4788999	MemberAccess	command . Value		4788906	0					
ANR	4789000	Identifier	command		4788906	0					
ANR	4789001	Identifier	Value		4788906	1					
ANR	4789002	ArgumentList			4788906	1					
ANR	4789003	IfStatement	if ( ( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 ) )		4788906	11					
ANR	4789004	Condition	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )	377:6:9908:9953	4788906	0	True				
ANR	4789005	AndExpression	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )		4788906	0		&&			
ANR	4789006	RelationalExpression	status >= 0		4788906	0		>=			
ANR	4789007	Identifier	status		4788906	0					
ANR	4789008	PrimaryExpression	0		4788906	1					
ANR	4789009	EqualityExpression	WEXITSTATUS ( status ) == 0		4788906	1		==			
ANR	4789010	CallExpression	WEXITSTATUS ( status )		4788906	0					
ANR	4789011	Callee	WEXITSTATUS		4788906	0					
ANR	4789012	Identifier	WEXITSTATUS		4788906	0					
ANR	4789013	ArgumentList	status		4788906	1					
ANR	4789014	Argument	status		4788906	0					
ANR	4789015	Identifier	status		4788906	0					
ANR	4789016	PrimaryExpression	0		4788906	1					
ANR	4789017	CompoundStatement		20:55:464:464	4788906	1					
ANR	4789018	ExpressionStatement	m_hibernator -> addState ( HibernatorBase :: S4 )	378:2:9961:10005	4788906	0	True				
ANR	4789019	CallExpression	m_hibernator -> addState ( HibernatorBase :: S4 )		4788906	0					
ANR	4789020	Callee	m_hibernator -> addState		4788906	0					
ANR	4789021	PtrMemberAccess	m_hibernator -> addState		4788906	0					
ANR	4789022	Identifier	m_hibernator		4788906	0					
ANR	4789023	Identifier	addState		4788906	1					
ANR	4789024	ArgumentList	HibernatorBase :: S4		4788906	1					
ANR	4789025	Argument	HibernatorBase :: S4		4788906	0					
ANR	4789026	Identifier	HibernatorBase :: S4		4788906	0					
ANR	4789027	ReturnStatement	return true ;	381:1:10012:10023	4788906	12	True				
ANR	4789028	Identifier	true		4788906	0					
ANR	4789029	ReturnType	bool		4788906	1					
ANR	4789030	Identifier	PmUtilLinuxHibernator :: Detect		4788906	2					
ANR	4789031	ParameterList			4788906	3					
ANR	4789032	CFGEntryNode	ENTRY		4788906		True				
ANR	4789033	CFGExitNode	EXIT		4788906		True				
ANR	4789034	Symbol	HibernatorBase :: S3		4788906						
ANR	4789035	Symbol	sw . GetStatus		4788906						
ANR	4789036	Symbol	sw		4788906						
ANR	4789037	Symbol	command . Value		4788906						
ANR	4789038	Symbol	false		4788906						
ANR	4789039	Symbol	WEXITSTATUS		4788906						
ANR	4789040	Symbol	command		4788906						
ANR	4789041	Symbol	HibernatorBase :: S4		4788906						
ANR	4789042	Symbol	system		4788906						
ANR	4789043	Symbol	true		4788906						
ANR	4789044	Symbol	PM_UTIL_CHECK		4788906						
ANR	4789045	Symbol	m_hibernator		4788906						
ANR	4789046	Symbol	status		4788906						
ANR	4789047	Function	PmUtilLinuxHibernator :: RunCmd	384:0:10028:10507							
ANR	4789048	FunctionDef	PmUtilLinuxHibernator :: RunCmd (const char * command)		4789047	0					
ANR	4789049	CompoundStatement		386:0:10093:10507	4789047	0					
ANR	4789050	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: running '%s'\\n"" , command )"	387:1:10096:10162	4789047	0	True				
ANR	4789051	CallExpression	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: running '%s'\\n"" , command )"		4789047	0					
ANR	4789052	Callee	dprintf		4789047	0					
ANR	4789053	Identifier	dprintf		4789047	0					
ANR	4789054	ArgumentList	D_FULLDEBUG		4789047	1					
ANR	4789055	Argument	D_FULLDEBUG		4789047	0					
ANR	4789056	Identifier	D_FULLDEBUG		4789047	0					
ANR	4789057	Argument	"""LinuxHibernator: running '%s'\\n"""		4789047	1					
ANR	4789058	PrimaryExpression	"""LinuxHibernator: running '%s'\\n"""		4789047	0					
ANR	4789059	Argument	command		4789047	2					
ANR	4789060	Identifier	command		4789047	0					
ANR	4789061	IdentifierDeclStatement	int status = system ( command ) ;	389:1:10166:10196	4789047	1	True				
ANR	4789062	IdentifierDecl	status = system ( command )		4789047	0					
ANR	4789063	IdentifierDeclType	int		4789047	0					
ANR	4789064	Identifier	status		4789047	1					
ANR	4789065	AssignmentExpression	status = system ( command )		4789047	2		=			
ANR	4789066	Identifier	status		4789047	0					
ANR	4789067	CallExpression	system ( command )		4789047	1					
ANR	4789068	Callee	system		4789047	0					
ANR	4789069	Identifier	system		4789047	0					
ANR	4789070	ArgumentList	command		4789047	1					
ANR	4789071	Argument	command		4789047	0					
ANR	4789072	Identifier	command		4789047	0					
ANR	4789073	IfStatement	if ( ( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 ) )		4789047	2					
ANR	4789074	Condition	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )	390:6:10204:10249	4789047	0	True				
ANR	4789075	AndExpression	( status >= 0 ) && ( WEXITSTATUS ( status ) == 0 )		4789047	0		&&			
ANR	4789076	RelationalExpression	status >= 0		4789047	0		>=			
ANR	4789077	Identifier	status		4789047	0					
ANR	4789078	PrimaryExpression	0		4789047	1					
ANR	4789079	EqualityExpression	WEXITSTATUS ( status ) == 0		4789047	1		==			
ANR	4789080	CallExpression	WEXITSTATUS ( status )		4789047	0					
ANR	4789081	Callee	WEXITSTATUS		4789047	0					
ANR	4789082	Identifier	WEXITSTATUS		4789047	0					
ANR	4789083	ArgumentList	status		4789047	1					
ANR	4789084	Argument	status		4789047	0					
ANR	4789085	Identifier	status		4789047	0					
ANR	4789086	PrimaryExpression	0		4789047	1					
ANR	4789087	CompoundStatement		5:55:159:159	4789047	1					
ANR	4789088	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: '%s' success!\\n"" , command )"	391:2:10257:10324	4789047	0	True				
ANR	4789089	CallExpression	"dprintf ( D_FULLDEBUG , ""LinuxHibernator: '%s' success!\\n"" , command )"		4789047	0					
ANR	4789090	Callee	dprintf		4789047	0					
ANR	4789091	Identifier	dprintf		4789047	0					
ANR	4789092	ArgumentList	D_FULLDEBUG		4789047	1					
ANR	4789093	Argument	D_FULLDEBUG		4789047	0					
ANR	4789094	Identifier	D_FULLDEBUG		4789047	0					
ANR	4789095	Argument	"""LinuxHibernator: '%s' success!\\n"""		4789047	1					
ANR	4789096	PrimaryExpression	"""LinuxHibernator: '%s' success!\\n"""		4789047	0					
ANR	4789097	Argument	command		4789047	2					
ANR	4789098	Identifier	command		4789047	0					
ANR	4789099	ReturnStatement	return true ;	392:2:10328:10339	4789047	1	True				
ANR	4789100	Identifier	true		4789047	0					
ANR	4789101	ElseStatement	else		4789047	0					
ANR	4789102	CompoundStatement		9:6:256:256	4789047	0					
ANR	4789103	ExpressionStatement	"dprintf ( D_ALWAYS , ""LinuxHibernator: '%s' failed: %s exit=%d!\\n"" , command , errno ? strerror ( errno ) : """" , WEXITSTATUS ( status ) )"	395:2:10354:10485	4789047	0	True				
ANR	4789104	CallExpression	"dprintf ( D_ALWAYS , ""LinuxHibernator: '%s' failed: %s exit=%d!\\n"" , command , errno ? strerror ( errno ) : """" , WEXITSTATUS ( status ) )"		4789047	0					
ANR	4789105	Callee	dprintf		4789047	0					
ANR	4789106	Identifier	dprintf		4789047	0					
ANR	4789107	ArgumentList	D_ALWAYS		4789047	1					
ANR	4789108	Argument	D_ALWAYS		4789047	0					
ANR	4789109	Identifier	D_ALWAYS		4789047	0					
ANR	4789110	Argument	"""LinuxHibernator: '%s' failed: %s exit=%d!\\n"""		4789047	1					
ANR	4789111	PrimaryExpression	"""LinuxHibernator: '%s' failed: %s exit=%d!\\n"""		4789047	0					
ANR	4789112	Argument	command		4789047	2					
ANR	4789113	Identifier	command		4789047	0					
ANR	4789114	Argument	"errno ? strerror ( errno ) : """""		4789047	3					
ANR	4789115	ConditionalExpression	"errno ? strerror ( errno ) : """""		4789047	0					
ANR	4789116	Condition	errno		4789047	0					
ANR	4789117	Identifier	errno		4789047	0					
ANR	4789118	CallExpression	strerror ( errno )		4789047	1					
ANR	4789119	Callee	strerror		4789047	0					
ANR	4789120	Identifier	strerror		4789047	0					
ANR	4789121	ArgumentList	errno		4789047	1					
ANR	4789122	Argument	errno		4789047	0					
ANR	4789123	Identifier	errno		4789047	0					
ANR	4789124	PrimaryExpression	""""""		4789047	2					
ANR	4789125	Argument	WEXITSTATUS ( status )		4789047	4					
ANR	4789126	CallExpression	WEXITSTATUS ( status )		4789047	0					
ANR	4789127	Callee	WEXITSTATUS		4789047	0					
ANR	4789128	Identifier	WEXITSTATUS		4789047	0					
ANR	4789129	ArgumentList	status		4789047	1					
ANR	4789130	Argument	status		4789047	0					
ANR	4789131	Identifier	status		4789047	0					
ANR	4789132	ReturnStatement	return false ;	397:2:10489:10501	4789047	1	True				
ANR	4789133	Identifier	false		4789047	0					
ANR	4789134	ReturnType	bool		4789047	1					
ANR	4789135	Identifier	PmUtilLinuxHibernator :: RunCmd		4789047	2					
ANR	4789136	ParameterList	const char * command		4789047	3					
ANR	4789137	Parameter	const char * command	385:32:10065:10083	4789047	0	True				
ANR	4789138	ParameterType	const char *		4789047	0					
ANR	4789139	Identifier	command		4789047	1					
ANR	4789140	CFGEntryNode	ENTRY		4789047		True				
ANR	4789141	CFGExitNode	EXIT		4789047		True				
ANR	4789142	Symbol	strerror		4789047						
ANR	4789143	Symbol	errno		4789047						
ANR	4789144	Symbol	system		4789047						
ANR	4789145	Symbol	true		4789047						
ANR	4789146	Symbol	D_ALWAYS		4789047						
ANR	4789147	Symbol	false		4789047						
ANR	4789148	Symbol	D_FULLDEBUG		4789047						
ANR	4789149	Symbol	WEXITSTATUS		4789047						
ANR	4789150	Symbol	command		4789047						
ANR	4789151	Symbol	status		4789047						
ANR	4789152	Function	SysIfLinuxHibernator :: Detect	428:0:11046:12227							
ANR	4789153	FunctionDef	SysIfLinuxHibernator :: Detect ()		4789152	0					
ANR	4789154	CompoundStatement		430:0:11089:12227	4789152	0					
ANR	4789155	IdentifierDeclStatement	FILE * fp ;	431:1:11092:11100	4789152	0	True				
ANR	4789156	IdentifierDecl	* fp		4789152	0					
ANR	4789157	IdentifierDeclType	FILE *		4789152	0					
ANR	4789158	Identifier	fp		4789152	1					
ANR	4789159	IdentifierDeclStatement	char buf [ 128 ] ;	432:1:11103:11116	4789152	1	True				
ANR	4789160	IdentifierDecl	buf [ 128 ]		4789152	0					
ANR	4789161	IdentifierDeclType	char [ 128 ]		4789152	0					
ANR	4789162	Identifier	buf		4789152	1					
ANR	4789163	PrimaryExpression	128		4789152	2					
ANR	4789164	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	434:1:11120:11149	4789152	2	True				
ANR	4789165	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		4789152	0					
ANR	4789166	Callee	memset		4789152	0					
ANR	4789167	Identifier	memset		4789152	0					
ANR	4789168	ArgumentList	buf		4789152	1					
ANR	4789169	Argument	buf		4789152	0					
ANR	4789170	Identifier	buf		4789152	0					
ANR	4789171	Argument	0		4789152	1					
ANR	4789172	PrimaryExpression	0		4789152	0					
ANR	4789173	Argument	sizeof ( buf )		4789152	2					
ANR	4789174	SizeofExpression	sizeof ( buf )		4789152	0					
ANR	4789175	Sizeof	sizeof		4789152	0					
ANR	4789176	SizeofOperand	buf		4789152	1					
ANR	4789177	ExpressionStatement	"fp = safe_fopen_wrapper ( SYS_POWER_FILE , ""r"" )"	437:1:11184:11230	4789152	3	True				
ANR	4789178	AssignmentExpression	"fp = safe_fopen_wrapper ( SYS_POWER_FILE , ""r"" )"		4789152	0		=			
ANR	4789179	Identifier	fp		4789152	0					
ANR	4789180	CallExpression	"safe_fopen_wrapper ( SYS_POWER_FILE , ""r"" )"		4789152	1					
ANR	4789181	Callee	safe_fopen_wrapper		4789152	0					
ANR	4789182	Identifier	safe_fopen_wrapper		4789152	0					
ANR	4789183	ArgumentList	SYS_POWER_FILE		4789152	1					
ANR	4789184	Argument	SYS_POWER_FILE		4789152	0					
ANR	4789185	Identifier	SYS_POWER_FILE		4789152	0					
ANR	4789186	Argument	"""r"""		4789152	1					
ANR	4789187	PrimaryExpression	"""r"""		4789152	0					
ANR	4789188	IfStatement	if ( NULL == fp )		4789152	4					
ANR	4789189	Condition	NULL == fp	438:6:11238:11247	4789152	0	True				
ANR	4789190	EqualityExpression	NULL == fp		4789152	0		==			
ANR	4789191	Identifier	NULL		4789152	0					
ANR	4789192	Identifier	fp		4789152	1					
ANR	4789193	CompoundStatement		9:19:161:161	4789152	1					
ANR	4789194	ReturnStatement	return false ;	439:2:11255:11267	4789152	0	True				
ANR	4789195	Identifier	false		4789152	0					
ANR	4789196	IfStatement	"if ( fgets ( buf , sizeof ( buf ) - 1 , fp ) )"		4789152	5					
ANR	4789197	Condition	"fgets ( buf , sizeof ( buf ) - 1 , fp )"	442:6:11279:11309	4789152	0	True				
ANR	4789198	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , fp )"		4789152	0					
ANR	4789199	Callee	fgets		4789152	0					
ANR	4789200	Identifier	fgets		4789152	0					
ANR	4789201	ArgumentList	buf		4789152	1					
ANR	4789202	Argument	buf		4789152	0					
ANR	4789203	Identifier	buf		4789152	0					
ANR	4789204	Argument	sizeof ( buf ) - 1		4789152	1					
ANR	4789205	AdditiveExpression	sizeof ( buf ) - 1		4789152	0		-			
ANR	4789206	SizeofExpression	sizeof ( buf )		4789152	0					
ANR	4789207	Sizeof	sizeof		4789152	0					
ANR	4789208	SizeofOperand	buf		4789152	1					
ANR	4789209	PrimaryExpression	1		4789152	1					
ANR	4789210	Argument	fp		4789152	2					
ANR	4789211	Identifier	fp		4789152	0					
ANR	4789212	CompoundStatement		15:2:241:266	4789152	1					
ANR	4789213	ExpressionStatement	strip ( buf )	443:2:11317:11327	4789152	0	True				
ANR	4789214	CallExpression	strip ( buf )		4789152	0					
ANR	4789215	Callee	strip		4789152	0					
ANR	4789216	Identifier	strip		4789152	0					
ANR	4789217	ArgumentList	buf		4789152	1					
ANR	4789218	Argument	buf		4789152	0					
ANR	4789219	Identifier	buf		4789152	0					
ANR	4789220	IdentifierDeclStatement	"char * token , * save = NULL ;"	444:2:11331:11356	4789152	1	True				
ANR	4789221	IdentifierDecl	* token		4789152	0					
ANR	4789222	IdentifierDeclType	char *		4789152	0					
ANR	4789223	Identifier	token		4789152	1					
ANR	4789224	IdentifierDecl	* save = NULL		4789152	1					
ANR	4789225	IdentifierDeclType	char *		4789152	0					
ANR	4789226	Identifier	save		4789152	1					
ANR	4789227	AssignmentExpression	* save = NULL		4789152	2		=			
ANR	4789228	Identifier	NULL		4789152	0					
ANR	4789229	Identifier	NULL		4789152	1					
ANR	4789230	ExpressionStatement	"token = strtok_r ( buf , "" "" , & save )"	446:2:11361:11396	4789152	2	True				
ANR	4789231	AssignmentExpression	"token = strtok_r ( buf , "" "" , & save )"		4789152	0		=			
ANR	4789232	Identifier	token		4789152	0					
ANR	4789233	CallExpression	"strtok_r ( buf , "" "" , & save )"		4789152	1					
ANR	4789234	Callee	strtok_r		4789152	0					
ANR	4789235	Identifier	strtok_r		4789152	0					
ANR	4789236	ArgumentList	buf		4789152	1					
ANR	4789237	Argument	buf		4789152	0					
ANR	4789238	Identifier	buf		4789152	0					
ANR	4789239	Argument	""" """		4789152	1					
ANR	4789240	PrimaryExpression	""" """		4789152	0					
ANR	4789241	Argument	& save		4789152	2					
ANR	4789242	UnaryOperationExpression	& save		4789152	0					
ANR	4789243	UnaryOperator	&		4789152	0					
ANR	4789244	Identifier	save		4789152	1					
ANR	4789245	WhileStatement	while ( token )		4789152	3					
ANR	4789246	Condition	token	447:9:11407:11411	4789152	0	True				
ANR	4789247	Identifier	token		4789152	0					
ANR	4789248	CompoundStatement		18:17:325:325	4789152	1					
ANR	4789249	ExpressionStatement	m_hibernator -> addState ( token )	448:3:11420:11451	4789152	0	True				
ANR	4789250	CallExpression	m_hibernator -> addState ( token )		4789152	0					
ANR	4789251	Callee	m_hibernator -> addState		4789152	0					
ANR	4789252	PtrMemberAccess	m_hibernator -> addState		4789152	0					
ANR	4789253	Identifier	m_hibernator		4789152	0					
ANR	4789254	Identifier	addState		4789152	1					
ANR	4789255	ArgumentList	token		4789152	1					
ANR	4789256	Argument	token		4789152	0					
ANR	4789257	Identifier	token		4789152	0					
ANR	4789258	ExpressionStatement	"token = strtok_r ( NULL , "" "" , & save )"	449:3:11456:11492	4789152	1	True				
ANR	4789259	AssignmentExpression	"token = strtok_r ( NULL , "" "" , & save )"		4789152	0		=			
ANR	4789260	Identifier	token		4789152	0					
ANR	4789261	CallExpression	"strtok_r ( NULL , "" "" , & save )"		4789152	1					
ANR	4789262	Callee	strtok_r		4789152	0					
ANR	4789263	Identifier	strtok_r		4789152	0					
ANR	4789264	ArgumentList	NULL		4789152	1					
ANR	4789265	Argument	NULL		4789152	0					
ANR	4789266	Identifier	NULL		4789152	0					
ANR	4789267	Argument	""" """		4789152	1					
ANR	4789268	PrimaryExpression	""" """		4789152	0					
ANR	4789269	Argument	& save		4789152	2					
ANR	4789270	UnaryOperationExpression	& save		4789152	0					
ANR	4789271	UnaryOperator	&		4789152	0					
ANR	4789272	Identifier	save		4789152	1					
ANR	4789273	ExpressionStatement	fclose ( fp )	452:1:11502:11514	4789152	6	True				
ANR	4789274	CallExpression	fclose ( fp )		4789152	0					
ANR	4789275	Callee	fclose		4789152	0					
ANR	4789276	Identifier	fclose		4789152	0					
ANR	4789277	ArgumentList	fp		4789152	1					
ANR	4789278	Argument	fp		4789152	0					
ANR	4789279	Identifier	fp		4789152	0					
ANR	4789280	ExpressionStatement	"fp = safe_fopen_wrapper ( SYS_DISK_FILE , ""r"" )"	455:1:11594:11639	4789152	7	True				
ANR	4789281	AssignmentExpression	"fp = safe_fopen_wrapper ( SYS_DISK_FILE , ""r"" )"		4789152	0		=			
ANR	4789282	Identifier	fp		4789152	0					
ANR	4789283	CallExpression	"safe_fopen_wrapper ( SYS_DISK_FILE , ""r"" )"		4789152	1					
ANR	4789284	Callee	safe_fopen_wrapper		4789152	0					
ANR	4789285	Identifier	safe_fopen_wrapper		4789152	0					
ANR	4789286	ArgumentList	SYS_DISK_FILE		4789152	1					
ANR	4789287	Argument	SYS_DISK_FILE		4789152	0					
ANR	4789288	Identifier	SYS_DISK_FILE		4789152	0					
ANR	4789289	Argument	"""r"""		4789152	1					
ANR	4789290	PrimaryExpression	"""r"""		4789152	0					
ANR	4789291	IfStatement	if ( NULL == fp )		4789152	8					
ANR	4789292	Condition	NULL == fp	456:6:11647:11656	4789152	0	True				
ANR	4789293	EqualityExpression	NULL == fp		4789152	0		==			
ANR	4789294	Identifier	NULL		4789152	0					
ANR	4789295	Identifier	fp		4789152	1					
ANR	4789296	CompoundStatement		27:19:570:570	4789152	1					
ANR	4789297	ReturnStatement	return true ;	457:2:11664:11675	4789152	0	True				
ANR	4789298	Identifier	true		4789152	0					
ANR	4789299	IfStatement	"if ( fgets ( buf , sizeof ( buf ) - 1 , fp ) )"		4789152	9					
ANR	4789300	Condition	"fgets ( buf , sizeof ( buf ) - 1 , fp )"	459:6:11686:11716	4789152	0	True				
ANR	4789301	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , fp )"		4789152	0					
ANR	4789302	Callee	fgets		4789152	0					
ANR	4789303	Identifier	fgets		4789152	0					
ANR	4789304	ArgumentList	buf		4789152	1					
ANR	4789305	Argument	buf		4789152	0					
ANR	4789306	Identifier	buf		4789152	0					
ANR	4789307	Argument	sizeof ( buf ) - 1		4789152	1					
ANR	4789308	AdditiveExpression	sizeof ( buf ) - 1		4789152	0		-			
ANR	4789309	SizeofExpression	sizeof ( buf )		4789152	0					
ANR	4789310	Sizeof	sizeof		4789152	0					
ANR	4789311	SizeofOperand	buf		4789152	1					
ANR	4789312	PrimaryExpression	1		4789152	1					
ANR	4789313	Argument	fp		4789152	2					
ANR	4789314	Identifier	fp		4789152	0					
ANR	4789315	CompoundStatement		32:2:648:673	4789152	1					
ANR	4789316	ExpressionStatement	strip ( buf )	460:2:11724:11734	4789152	0	True				
ANR	4789317	CallExpression	strip ( buf )		4789152	0					
ANR	4789318	Callee	strip		4789152	0					
ANR	4789319	Identifier	strip		4789152	0					
ANR	4789320	ArgumentList	buf		4789152	1					
ANR	4789321	Argument	buf		4789152	0					
ANR	4789322	Identifier	buf		4789152	0					
ANR	4789323	IdentifierDeclStatement	"char * token , * save = NULL ;"	461:2:11738:11763	4789152	1	True				
ANR	4789324	IdentifierDecl	* token		4789152	0					
ANR	4789325	IdentifierDeclType	char *		4789152	0					
ANR	4789326	Identifier	token		4789152	1					
ANR	4789327	IdentifierDecl	* save = NULL		4789152	1					
ANR	4789328	IdentifierDeclType	char *		4789152	0					
ANR	4789329	Identifier	save		4789152	1					
ANR	4789330	AssignmentExpression	* save = NULL		4789152	2		=			
ANR	4789331	Identifier	NULL		4789152	0					
ANR	4789332	Identifier	NULL		4789152	1					
ANR	4789333	ExpressionStatement	"token = strtok_r ( buf , "" "" , & save )"	463:2:11768:11803	4789152	2	True				
ANR	4789334	AssignmentExpression	"token = strtok_r ( buf , "" "" , & save )"		4789152	0		=			
ANR	4789335	Identifier	token		4789152	0					
ANR	4789336	CallExpression	"strtok_r ( buf , "" "" , & save )"		4789152	1					
ANR	4789337	Callee	strtok_r		4789152	0					
ANR	4789338	Identifier	strtok_r		4789152	0					
ANR	4789339	ArgumentList	buf		4789152	1					
ANR	4789340	Argument	buf		4789152	0					
ANR	4789341	Identifier	buf		4789152	0					
ANR	4789342	Argument	""" """		4789152	1					
ANR	4789343	PrimaryExpression	""" """		4789152	0					
ANR	4789344	Argument	& save		4789152	2					
ANR	4789345	UnaryOperationExpression	& save		4789152	0					
ANR	4789346	UnaryOperator	&		4789152	0					
ANR	4789347	Identifier	save		4789152	1					
ANR	4789348	WhileStatement	while ( token )		4789152	3					
ANR	4789349	Condition	token	464:9:11814:11818	4789152	0	True				
ANR	4789350	Identifier	token		4789152	0					
ANR	4789351	CompoundStatement		36:3:737:762	4789152	1					
ANR	4789352	IdentifierDeclStatement	int len = strlen ( token ) ;	465:3:11827:11852	4789152	0	True				
ANR	4789353	IdentifierDecl	len = strlen ( token )		4789152	0					
ANR	4789354	IdentifierDeclType	int		4789152	0					
ANR	4789355	Identifier	len		4789152	1					
ANR	4789356	AssignmentExpression	len = strlen ( token )		4789152	2		=			
ANR	4789357	Identifier	len		4789152	0					
ANR	4789358	CallExpression	strlen ( token )		4789152	1					
ANR	4789359	Callee	strlen		4789152	0					
ANR	4789360	Identifier	strlen		4789152	0					
ANR	4789361	ArgumentList	token		4789152	1					
ANR	4789362	Argument	token		4789152	0					
ANR	4789363	Identifier	token		4789152	0					
ANR	4789364	IfStatement	if ( token [ 0 ] == '[' && token [ len ] == ']' )		4789152	1					
ANR	4789365	Condition	token [ 0 ] == '[' && token [ len ] == ']'	466:8:11862:11897	4789152	0	True				
ANR	4789366	AndExpression	token [ 0 ] == '[' && token [ len ] == ']'		4789152	0		&&			
ANR	4789367	EqualityExpression	token [ 0 ] == '['		4789152	0		==			
ANR	4789368	ArrayIndexing	token [ 0 ]		4789152	0					
ANR	4789369	Identifier	token		4789152	0					
ANR	4789370	PrimaryExpression	0		4789152	1					
ANR	4789371	PrimaryExpression	'['		4789152	1					
ANR	4789372	EqualityExpression	token [ len ] == ']'		4789152	1		==			
ANR	4789373	ArrayIndexing	token [ len ]		4789152	0					
ANR	4789374	Identifier	token		4789152	0					
ANR	4789375	Identifier	len		4789152	1					
ANR	4789376	PrimaryExpression	']'		4789152	1					
ANR	4789377	CompoundStatement		37:47:811:811	4789152	1					
ANR	4789378	ExpressionStatement	token [ len ] = '\\0'	467:4:11907:11924	4789152	0	True				
ANR	4789379	AssignmentExpression	token [ len ] = '\\0'		4789152	0		=			
ANR	4789380	ArrayIndexing	token [ len ]		4789152	0					
ANR	4789381	Identifier	token		4789152	0					
ANR	4789382	Identifier	len		4789152	1					
ANR	4789383	PrimaryExpression	'\\0'		4789152	1					
ANR	4789384	ExpressionStatement	token ++	468:4:11930:11937	4789152	1	True				
ANR	4789385	PostIncDecOperationExpression	token ++		4789152	0					
ANR	4789386	Identifier	token		4789152	0					
ANR	4789387	IncDec	++		4789152	1					
ANR	4789388	IfStatement	"if ( strcmp ( token , ""platform"" ) == 0 )"		4789152	2					
ANR	4789389	Condition	"strcmp ( token , ""platform"" ) == 0"	470:8:11952:11983	4789152	0	True				
ANR	4789390	EqualityExpression	"strcmp ( token , ""platform"" ) == 0"		4789152	0		==			
ANR	4789391	CallExpression	"strcmp ( token , ""platform"" )"		4789152	0					
ANR	4789392	Callee	strcmp		4789152	0					
ANR	4789393	Identifier	strcmp		4789152	0					
ANR	4789394	ArgumentList	token		4789152	1					
ANR	4789395	Argument	token		4789152	0					
ANR	4789396	Identifier	token		4789152	0					
ANR	4789397	Argument	"""platform"""		4789152	1					
ANR	4789398	PrimaryExpression	"""platform"""		4789152	0					
ANR	4789399	PrimaryExpression	0		4789152	1					
ANR	4789400	CompoundStatement		41:43:897:897	4789152	1					
ANR	4789401	ExpressionStatement	m_hibernator -> addState ( HibernatorBase :: S4 )	471:4:11993:12037	4789152	0	True				
ANR	4789402	CallExpression	m_hibernator -> addState ( HibernatorBase :: S4 )		4789152	0					
ANR	4789403	Callee	m_hibernator -> addState		4789152	0					
ANR	4789404	PtrMemberAccess	m_hibernator -> addState		4789152	0					
ANR	4789405	Identifier	m_hibernator		4789152	0					
ANR	4789406	Identifier	addState		4789152	1					
ANR	4789407	ArgumentList	HibernatorBase :: S4		4789152	1					
ANR	4789408	Argument	HibernatorBase :: S4		4789152	0					
ANR	4789409	Identifier	HibernatorBase :: S4		4789152	0					
ANR	4789410	ElseStatement	else		4789152	0					
ANR	4789411	IfStatement	"if ( strcmp ( token , ""shutdown"" ) == 0 )"		4789152	0					
ANR	4789412	Condition	"strcmp ( token , ""shutdown"" ) == 0"	473:13:12057:12088	4789152	0	True				
ANR	4789413	EqualityExpression	"strcmp ( token , ""shutdown"" ) == 0"		4789152	0		==			
ANR	4789414	CallExpression	"strcmp ( token , ""shutdown"" )"		4789152	0					
ANR	4789415	Callee	strcmp		4789152	0					
ANR	4789416	Identifier	strcmp		4789152	0					
ANR	4789417	ArgumentList	token		4789152	1					
ANR	4789418	Argument	token		4789152	0					
ANR	4789419	Identifier	token		4789152	0					
ANR	4789420	Argument	"""shutdown"""		4789152	1					
ANR	4789421	PrimaryExpression	"""shutdown"""		4789152	0					
ANR	4789422	PrimaryExpression	0		4789152	1					
ANR	4789423	CompoundStatement		44:48:1002:1002	4789152	1					
ANR	4789424	ExpressionStatement	m_hibernator -> addState ( HibernatorBase :: S5 )	474:4:12098:12142	4789152	0	True				
ANR	4789425	CallExpression	m_hibernator -> addState ( HibernatorBase :: S5 )		4789152	0					
ANR	4789426	Callee	m_hibernator -> addState		4789152	0					
ANR	4789427	PtrMemberAccess	m_hibernator -> addState		4789152	0					
ANR	4789428	Identifier	m_hibernator		4789152	0					
ANR	4789429	Identifier	addState		4789152	1					
ANR	4789430	ArgumentList	HibernatorBase :: S5		4789152	1					
ANR	4789431	Argument	HibernatorBase :: S5		4789152	0					
ANR	4789432	Identifier	HibernatorBase :: S5		4789152	0					
ANR	4789433	ExpressionStatement	"token = strtok_r ( NULL , "" "" , & save )"	476:3:12152:12188	4789152	3	True				
ANR	4789434	AssignmentExpression	"token = strtok_r ( NULL , "" "" , & save )"		4789152	0		=			
ANR	4789435	Identifier	token		4789152	0					
ANR	4789436	CallExpression	"strtok_r ( NULL , "" "" , & save )"		4789152	1					
ANR	4789437	Callee	strtok_r		4789152	0					
ANR	4789438	Identifier	strtok_r		4789152	0					
ANR	4789439	ArgumentList	NULL		4789152	1					
ANR	4789440	Argument	NULL		4789152	0					
ANR	4789441	Identifier	NULL		4789152	0					
ANR	4789442	Argument	""" """		4789152	1					
ANR	4789443	PrimaryExpression	""" """		4789152	0					
ANR	4789444	Argument	& save		4789152	2					
ANR	4789445	UnaryOperationExpression	& save		4789152	0					
ANR	4789446	UnaryOperator	&		4789152	0					
ANR	4789447	Identifier	save		4789152	1					
ANR	4789448	ExpressionStatement	fclose ( fp )	479:1:12198:12210	4789152	10	True				
ANR	4789449	CallExpression	fclose ( fp )		4789152	0					
ANR	4789450	Callee	fclose		4789152	0					
ANR	4789451	Identifier	fclose		4789152	0					
ANR	4789452	ArgumentList	fp		4789152	1					
ANR	4789453	Argument	fp		4789152	0					
ANR	4789454	Identifier	fp		4789152	0					
ANR	4789455	ReturnStatement	return true ;	481:1:12214:12225	4789152	11	True				
ANR	4789456	Identifier	true		4789152	0					
ANR	4789457	ReturnType	bool		4789152	1					
ANR	4789458	Identifier	SysIfLinuxHibernator :: Detect		4789152	2					
ANR	4789459	ParameterList			4789152	3					
ANR	4789460	CFGEntryNode	ENTRY		4789152		True				
ANR	4789461	CFGExitNode	EXIT		4789152		True				
ANR	4789462	Symbol	strcmp		4789152						
ANR	4789463	Symbol	NULL		4789152						
ANR	4789464	Symbol	safe_fopen_wrapper		4789152						
ANR	4789465	Symbol	& save		4789152						
ANR	4789466	Symbol	false		4789152						
ANR	4789467	Symbol	save		4789152						
ANR	4789468	Symbol	SYS_DISK_FILE		4789152						
ANR	4789469	Symbol	fp		4789152						
ANR	4789470	Symbol	strtok_r		4789152						
ANR	4789471	Symbol	fgets		4789152						
ANR	4789472	Symbol	HibernatorBase :: S5		4789152						
ANR	4789473	Symbol	token		4789152						
ANR	4789474	Symbol	HibernatorBase :: S4		4789152						
ANR	4789475	Symbol	strlen		4789152						
ANR	4789476	Symbol	buf		4789152						
ANR	4789477	Symbol	SYS_POWER_FILE		4789152						
ANR	4789478	Symbol	len		4789152						
ANR	4789479	Symbol	* token		4789152						
ANR	4789480	Symbol	true		4789152						
ANR	4789481	Symbol	m_hibernator		4789152						
ANR	4789482	Symbol	* len		4789152						
ANR	4789483	Function	ProcIfLinuxHibernator :: Detect	509:0:12856:13313							
ANR	4789484	FunctionDef	ProcIfLinuxHibernator :: Detect ()		4789483	0					
ANR	4789485	CompoundStatement		511:0:12900:13313	4789483	0					
ANR	4789486	IdentifierDeclStatement	FILE * fp ;	512:1:12903:12911	4789483	0	True				
ANR	4789487	IdentifierDecl	* fp		4789483	0					
ANR	4789488	IdentifierDeclType	FILE *		4789483	0					
ANR	4789489	Identifier	fp		4789483	1					
ANR	4789490	IdentifierDeclStatement	char buf [ 128 ] ;	513:1:12914:12927	4789483	1	True				
ANR	4789491	IdentifierDecl	buf [ 128 ]		4789483	0					
ANR	4789492	IdentifierDeclType	char [ 128 ]		4789483	0					
ANR	4789493	Identifier	buf		4789483	1					
ANR	4789494	PrimaryExpression	128		4789483	2					
ANR	4789495	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	516:1:12949:12978	4789483	2	True				
ANR	4789496	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		4789483	0					
ANR	4789497	Callee	memset		4789483	0					
ANR	4789498	Identifier	memset		4789483	0					
ANR	4789499	ArgumentList	buf		4789483	1					
ANR	4789500	Argument	buf		4789483	0					
ANR	4789501	Identifier	buf		4789483	0					
ANR	4789502	Argument	0		4789483	1					
ANR	4789503	PrimaryExpression	0		4789483	0					
ANR	4789504	Argument	sizeof ( buf )		4789483	2					
ANR	4789505	SizeofExpression	sizeof ( buf )		4789483	0					
ANR	4789506	Sizeof	sizeof		4789483	0					
ANR	4789507	SizeofOperand	buf		4789483	1					
ANR	4789508	ExpressionStatement	"fp = safe_fopen_wrapper ( PROC_POWER_FILE , ""r"" )"	517:1:12981:13028	4789483	3	True				
ANR	4789509	AssignmentExpression	"fp = safe_fopen_wrapper ( PROC_POWER_FILE , ""r"" )"		4789483	0		=			
ANR	4789510	Identifier	fp		4789483	0					
ANR	4789511	CallExpression	"safe_fopen_wrapper ( PROC_POWER_FILE , ""r"" )"		4789483	1					
ANR	4789512	Callee	safe_fopen_wrapper		4789483	0					
ANR	4789513	Identifier	safe_fopen_wrapper		4789483	0					
ANR	4789514	ArgumentList	PROC_POWER_FILE		4789483	1					
ANR	4789515	Argument	PROC_POWER_FILE		4789483	0					
ANR	4789516	Identifier	PROC_POWER_FILE		4789483	0					
ANR	4789517	Argument	"""r"""		4789483	1					
ANR	4789518	PrimaryExpression	"""r"""		4789483	0					
ANR	4789519	IfStatement	if ( NULL == fp )		4789483	4					
ANR	4789520	Condition	NULL == fp	518:6:13036:13045	4789483	0	True				
ANR	4789521	EqualityExpression	NULL == fp		4789483	0		==			
ANR	4789522	Identifier	NULL		4789483	0					
ANR	4789523	Identifier	fp		4789483	1					
ANR	4789524	CompoundStatement		8:19:148:148	4789483	1					
ANR	4789525	ReturnStatement	return false ;	519:2:13053:13065	4789483	0	True				
ANR	4789526	Identifier	false		4789483	0					
ANR	4789527	IfStatement	"if ( fgets ( buf , sizeof ( buf ) - 1 , fp ) )"		4789483	5					
ANR	4789528	Condition	"fgets ( buf , sizeof ( buf ) - 1 , fp )"	521:6:13076:13106	4789483	0	True				
ANR	4789529	CallExpression	"fgets ( buf , sizeof ( buf ) - 1 , fp )"		4789483	0					
ANR	4789530	Callee	fgets		4789483	0					
ANR	4789531	Identifier	fgets		4789483	0					
ANR	4789532	ArgumentList	buf		4789483	1					
ANR	4789533	Argument	buf		4789483	0					
ANR	4789534	Identifier	buf		4789483	0					
ANR	4789535	Argument	sizeof ( buf ) - 1		4789483	1					
ANR	4789536	AdditiveExpression	sizeof ( buf ) - 1		4789483	0		-			
ANR	4789537	SizeofExpression	sizeof ( buf )		4789483	0					
ANR	4789538	Sizeof	sizeof		4789483	0					
ANR	4789539	SizeofOperand	buf		4789483	1					
ANR	4789540	PrimaryExpression	1		4789483	1					
ANR	4789541	Argument	fp		4789483	2					
ANR	4789542	Identifier	fp		4789483	0					
ANR	4789543	CompoundStatement		12:2:213:238	4789483	1					
ANR	4789544	IdentifierDeclStatement	"char * token , * save = NULL ;"	522:2:13114:13139	4789483	0	True				
ANR	4789545	IdentifierDecl	* token		4789483	0					
ANR	4789546	IdentifierDeclType	char *		4789483	0					
ANR	4789547	Identifier	token		4789483	1					
ANR	4789548	IdentifierDecl	* save = NULL		4789483	1					
ANR	4789549	IdentifierDeclType	char *		4789483	0					
ANR	4789550	Identifier	save		4789483	1					
ANR	4789551	AssignmentExpression	* save = NULL		4789483	2		=			
ANR	4789552	Identifier	NULL		4789483	0					
ANR	4789553	Identifier	NULL		4789483	1					
ANR	4789554	ExpressionStatement	"token = strtok_r ( buf , "" "" , & save )"	524:2:13144:13179	4789483	1	True				
ANR	4789555	AssignmentExpression	"token = strtok_r ( buf , "" "" , & save )"		4789483	0		=			
ANR	4789556	Identifier	token		4789483	0					
ANR	4789557	CallExpression	"strtok_r ( buf , "" "" , & save )"		4789483	1					
ANR	4789558	Callee	strtok_r		4789483	0					
ANR	4789559	Identifier	strtok_r		4789483	0					
ANR	4789560	ArgumentList	buf		4789483	1					
ANR	4789561	Argument	buf		4789483	0					
ANR	4789562	Identifier	buf		4789483	0					
ANR	4789563	Argument	""" """		4789483	1					
ANR	4789564	PrimaryExpression	""" """		4789483	0					
ANR	4789565	Argument	& save		4789483	2					
ANR	4789566	UnaryOperationExpression	& save		4789483	0					
ANR	4789567	UnaryOperator	&		4789483	0					
ANR	4789568	Identifier	save		4789483	1					
ANR	4789569	WhileStatement	while ( token )		4789483	2					
ANR	4789570	Condition	token	525:9:13190:13194	4789483	0	True				
ANR	4789571	Identifier	token		4789483	0					
ANR	4789572	CompoundStatement		15:17:297:297	4789483	1					
ANR	4789573	ExpressionStatement	m_hibernator -> addState ( token )	526:3:13203:13234	4789483	0	True				
ANR	4789574	CallExpression	m_hibernator -> addState ( token )		4789483	0					
ANR	4789575	Callee	m_hibernator -> addState		4789483	0					
ANR	4789576	PtrMemberAccess	m_hibernator -> addState		4789483	0					
ANR	4789577	Identifier	m_hibernator		4789483	0					
ANR	4789578	Identifier	addState		4789483	1					
ANR	4789579	ArgumentList	token		4789483	1					
ANR	4789580	Argument	token		4789483	0					
ANR	4789581	Identifier	token		4789483	0					
ANR	4789582	ExpressionStatement	"token = strtok_r ( NULL , "" "" , & save )"	527:3:13239:13275	4789483	1	True				
ANR	4789583	AssignmentExpression	"token = strtok_r ( NULL , "" "" , & save )"		4789483	0		=			
ANR	4789584	Identifier	token		4789483	0					
ANR	4789585	CallExpression	"strtok_r ( NULL , "" "" , & save )"		4789483	1					
ANR	4789586	Callee	strtok_r		4789483	0					
ANR	4789587	Identifier	strtok_r		4789483	0					
ANR	4789588	ArgumentList	NULL		4789483	1					
ANR	4789589	Argument	NULL		4789483	0					
ANR	4789590	Identifier	NULL		4789483	0					
ANR	4789591	Argument	""" """		4789483	1					
ANR	4789592	PrimaryExpression	""" """		4789483	0					
ANR	4789593	Argument	& save		4789483	2					
ANR	4789594	UnaryOperationExpression	& save		4789483	0					
ANR	4789595	UnaryOperator	&		4789483	0					
ANR	4789596	Identifier	save		4789483	1					
ANR	4789597	ExpressionStatement	fclose ( fp )	530:1:13285:13297	4789483	6	True				
ANR	4789598	CallExpression	fclose ( fp )		4789483	0					
ANR	4789599	Callee	fclose		4789483	0					
ANR	4789600	Identifier	fclose		4789483	0					
ANR	4789601	ArgumentList	fp		4789483	1					
ANR	4789602	Argument	fp		4789483	0					
ANR	4789603	Identifier	fp		4789483	0					
ANR	4789604	ReturnStatement	return true ;	531:1:13300:13311	4789483	7	True				
ANR	4789605	Identifier	true		4789483	0					
ANR	4789606	ReturnType	bool		4789483	1					
ANR	4789607	Identifier	ProcIfLinuxHibernator :: Detect		4789483	2					
ANR	4789608	ParameterList			4789483	3					
ANR	4789609	CFGEntryNode	ENTRY		4789483		True				
ANR	4789610	CFGExitNode	EXIT		4789483		True				
ANR	4789611	Symbol	NULL		4789483						
ANR	4789612	Symbol	safe_fopen_wrapper		4789483						
ANR	4789613	Symbol	& save		4789483						
ANR	4789614	Symbol	false		4789483						
ANR	4789615	Symbol	save		4789483						
ANR	4789616	Symbol	PROC_POWER_FILE		4789483						
ANR	4789617	Symbol	fp		4789483						
ANR	4789618	Symbol	strtok_r		4789483						
ANR	4789619	Symbol	fgets		4789483						
ANR	4789620	Symbol	token		4789483						
ANR	4789621	Symbol	buf		4789483						
ANR	4789622	Symbol	true		4789483						
ANR	4789623	Symbol	m_hibernator		4789483						
