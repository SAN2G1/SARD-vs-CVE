command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2023355	File	data/converged/CVE-2011-4930_htcondor/proc_family_proxy.cpp								
ANR	2023356	ClassDef	ProcFamilyProxyReaperHelper	41:0:1449:1694							
ANR	2023357	Function	ProcFamilyProxyReaperHelper	44:1:1512:1577							
ANR	2023358	FunctionDef	ProcFamilyProxyReaperHelper (ProcFamilyProxy * ptr)		2023357	0					
ANR	2023359	CompoundStatement		44:64:1575:1577	2023357	0					
ANR	2023360	Identifier	ProcFamilyProxyReaperHelper		2023357	1					
ANR	2023361	ParameterList	ProcFamilyProxy * ptr		2023357	2					
ANR	2023362	Parameter	ProcFamilyProxy * ptr	44:29:1540:1559	2023357	0	True				
ANR	2023363	ParameterType	ProcFamilyProxy *		2023357	0					
ANR	2023364	Identifier	ptr		2023357	1					
ANR	2023365	CFGEntryNode	ENTRY		2023357		True				
ANR	2023366	CFGExitNode	EXIT		2023357		True				
ANR	2023367	Symbol	ptr		2023357						
ANR	2023368	Function	procd_reaper	46:1:1581:1666							
ANR	2023369	FunctionDef	"procd_reaper (int pid , int status)"		2023368	1					
ANR	2023370	CompoundStatement		47:1:1620:1666	2023368	0					
ANR	2023371	ReturnStatement	"return m_ptr -> procd_reaper ( pid , status ) ;"	48:2:1624:1663	2023368	0	True				
ANR	2023372	CallExpression	"m_ptr -> procd_reaper ( pid , status )"		2023368	0					
ANR	2023373	Callee	m_ptr -> procd_reaper		2023368	0					
ANR	2023374	PtrMemberAccess	m_ptr -> procd_reaper		2023368	0					
ANR	2023375	Identifier	m_ptr		2023368	0					
ANR	2023376	Identifier	procd_reaper		2023368	1					
ANR	2023377	ArgumentList	pid		2023368	1					
ANR	2023378	Argument	pid		2023368	0					
ANR	2023379	Identifier	pid		2023368	0					
ANR	2023380	Argument	status		2023368	1					
ANR	2023381	Identifier	status		2023368	0					
ANR	2023382	ReturnType	int		2023368	1					
ANR	2023383	Identifier	procd_reaper		2023368	2					
ANR	2023384	ParameterList	"int pid , int status"		2023368	3					
ANR	2023385	Parameter	int pid	46:18:1598:1604	2023368	0	True				
ANR	2023386	ParameterType	int		2023368	0					
ANR	2023387	Identifier	pid		2023368	1					
ANR	2023388	Parameter	int status	46:27:1607:1616	2023368	1	True				
ANR	2023389	ParameterType	int		2023368	0					
ANR	2023390	Identifier	status		2023368	1					
ANR	2023391	CFGEntryNode	ENTRY		2023368		True				
ANR	2023392	CFGExitNode	EXIT		2023368		True				
ANR	2023393	Symbol	m_ptr		2023368						
ANR	2023394	Symbol	m_ptr -> procd_reaper		2023368						
ANR	2023395	Symbol	pid		2023368						
ANR	2023396	Symbol	* m_ptr		2023368						
ANR	2023397	Symbol	status		2023368						
ANR	2023398	DeclStmt									
ANR	2023399	Decl							ProcFamilyProxy	ProcFamilyProxy *	m_ptr
ANR	2023400	DeclStmt									
ANR	2023401	Decl							int	int	ProcFamilyProxy :: s_instantiated
ANR	2023402	Function	ProcFamilyProxy :: ProcFamilyProxy	56:0:1744:4428							
ANR	2023403	FunctionDef	ProcFamilyProxy :: ProcFamilyProxy (const char * address_suffix)		2023402	0					
ANR	2023404	CompoundStatement		59:0:1845:4428	2023402	0					
ANR	2023405	IfStatement	if ( s_instantiated )		2023402	0					
ANR	2023406	Condition	s_instantiated	62:5:1901:1914	2023402	0	True				
ANR	2023407	Identifier	s_instantiated		2023402	0					
ANR	2023408	CompoundStatement		4:21:71:71	2023402	1					
ANR	2023409	ExpressionStatement	"EXCEPT ( ""ProcFamilyProxy: multiple instantiations"" )"	63:2:1921:1971	2023402	0	True				
ANR	2023410	CallExpression	"EXCEPT ( ""ProcFamilyProxy: multiple instantiations"" )"		2023402	0					
ANR	2023411	Callee	EXCEPT		2023402	0					
ANR	2023412	Identifier	EXCEPT		2023402	0					
ANR	2023413	ArgumentList	"""ProcFamilyProxy: multiple instantiations"""		2023402	1					
ANR	2023414	Argument	"""ProcFamilyProxy: multiple instantiations"""		2023402	0					
ANR	2023415	PrimaryExpression	"""ProcFamilyProxy: multiple instantiations"""		2023402	0					
ANR	2023416	ExpressionStatement	s_instantiated = true	65:1:1977:1998	2023402	1	True				
ANR	2023417	AssignmentExpression	s_instantiated = true		2023402	0		=			
ANR	2023418	Identifier	s_instantiated		2023402	0					
ANR	2023419	Identifier	true		2023402	1					
ANR	2023420	ExpressionStatement	m_procd_addr = get_procd_address ( )	69:1:2062:2096	2023402	2	True				
ANR	2023421	AssignmentExpression	m_procd_addr = get_procd_address ( )		2023402	0		=			
ANR	2023422	Identifier	m_procd_addr		2023402	0					
ANR	2023423	CallExpression	get_procd_address ( )		2023402	1					
ANR	2023424	Callee	get_procd_address		2023402	0					
ANR	2023425	Identifier	get_procd_address		2023402	0					
ANR	2023426	ArgumentList			2023402	1					
ANR	2023427	IdentifierDeclStatement	MyString procd_addr_base = m_procd_addr ;	78:1:2431:2470	2023402	3	True				
ANR	2023428	IdentifierDecl	procd_addr_base = m_procd_addr		2023402	0					
ANR	2023429	IdentifierDeclType	MyString		2023402	0					
ANR	2023430	Identifier	procd_addr_base		2023402	1					
ANR	2023431	AssignmentExpression	procd_addr_base = m_procd_addr		2023402	2		=			
ANR	2023432	Identifier	m_procd_addr		2023402	0					
ANR	2023433	Identifier	m_procd_addr		2023402	1					
ANR	2023434	IfStatement	if ( address_suffix != NULL )		2023402	4					
ANR	2023435	Condition	address_suffix != NULL	79:5:2477:2498	2023402	0	True				
ANR	2023436	EqualityExpression	address_suffix != NULL		2023402	0		!=			
ANR	2023437	Identifier	address_suffix		2023402	0					
ANR	2023438	Identifier	NULL		2023402	1					
ANR	2023439	CompoundStatement		21:29:655:655	2023402	1					
ANR	2023440	ExpressionStatement	"m_procd_addr . sprintf_cat ( "".%s"" , address_suffix )"	80:2:2505:2552	2023402	0	True				
ANR	2023441	CallExpression	"m_procd_addr . sprintf_cat ( "".%s"" , address_suffix )"		2023402	0					
ANR	2023442	Callee	m_procd_addr . sprintf_cat		2023402	0					
ANR	2023443	MemberAccess	m_procd_addr . sprintf_cat		2023402	0					
ANR	2023444	Identifier	m_procd_addr		2023402	0					
ANR	2023445	Identifier	sprintf_cat		2023402	1					
ANR	2023446	ArgumentList	""".%s"""		2023402	1					
ANR	2023447	Argument	""".%s"""		2023402	0					
ANR	2023448	PrimaryExpression	""".%s"""		2023402	0					
ANR	2023449	Argument	address_suffix		2023402	1					
ANR	2023450	Identifier	address_suffix		2023402	0					
ANR	2023451	IdentifierDeclStatement	"char * procd_log = param ( ""PROCD_LOG"" ) ;"	87:1:2708:2744	2023402	5	True				
ANR	2023452	IdentifierDecl	"* procd_log = param ( ""PROCD_LOG"" )"		2023402	0					
ANR	2023453	IdentifierDeclType	char *		2023402	0					
ANR	2023454	Identifier	procd_log		2023402	1					
ANR	2023455	AssignmentExpression	"* procd_log = param ( ""PROCD_LOG"" )"		2023402	2		=			
ANR	2023456	Identifier	procd_log		2023402	0					
ANR	2023457	CallExpression	"param ( ""PROCD_LOG"" )"		2023402	1					
ANR	2023458	Callee	param		2023402	0					
ANR	2023459	Identifier	param		2023402	0					
ANR	2023460	ArgumentList	"""PROCD_LOG"""		2023402	1					
ANR	2023461	Argument	"""PROCD_LOG"""		2023402	0					
ANR	2023462	PrimaryExpression	"""PROCD_LOG"""		2023402	0					
ANR	2023463	IfStatement	if ( procd_log != NULL )		2023402	6					
ANR	2023464	Condition	procd_log != NULL	88:5:2751:2767	2023402	0	True				
ANR	2023465	EqualityExpression	procd_log != NULL		2023402	0		!=			
ANR	2023466	Identifier	procd_log		2023402	0					
ANR	2023467	Identifier	NULL		2023402	1					
ANR	2023468	CompoundStatement		30:24:924:924	2023402	1					
ANR	2023469	ExpressionStatement	m_procd_log = procd_log	89:2:2774:2797	2023402	0	True				
ANR	2023470	AssignmentExpression	m_procd_log = procd_log		2023402	0		=			
ANR	2023471	Identifier	m_procd_log		2023402	0					
ANR	2023472	Identifier	procd_log		2023402	1					
ANR	2023473	ExpressionStatement	free ( procd_log )	90:2:2801:2816	2023402	1	True				
ANR	2023474	CallExpression	free ( procd_log )		2023402	0					
ANR	2023475	Callee	free		2023402	0					
ANR	2023476	Identifier	free		2023402	0					
ANR	2023477	ArgumentList	procd_log		2023402	1					
ANR	2023478	Argument	procd_log		2023402	0					
ANR	2023479	Identifier	procd_log		2023402	0					
ANR	2023480	IfStatement	if ( address_suffix != NULL )		2023402	2					
ANR	2023481	Condition	address_suffix != NULL	91:6:2824:2845	2023402	0	True				
ANR	2023482	EqualityExpression	address_suffix != NULL		2023402	0		!=			
ANR	2023483	Identifier	address_suffix		2023402	0					
ANR	2023484	Identifier	NULL		2023402	1					
ANR	2023485	CompoundStatement		33:30:1002:1002	2023402	1					
ANR	2023486	ExpressionStatement	"m_procd_log . sprintf_cat ( "".%s"" , address_suffix )"	92:3:2853:2899	2023402	0	True				
ANR	2023487	CallExpression	"m_procd_log . sprintf_cat ( "".%s"" , address_suffix )"		2023402	0					
ANR	2023488	Callee	m_procd_log . sprintf_cat		2023402	0					
ANR	2023489	MemberAccess	m_procd_log . sprintf_cat		2023402	0					
ANR	2023490	Identifier	m_procd_log		2023402	0					
ANR	2023491	Identifier	sprintf_cat		2023402	1					
ANR	2023492	ArgumentList	""".%s"""		2023402	1					
ANR	2023493	Argument	""".%s"""		2023402	0					
ANR	2023494	PrimaryExpression	""".%s"""		2023402	0					
ANR	2023495	Argument	address_suffix		2023402	1					
ANR	2023496	Identifier	address_suffix		2023402	0					
ANR	2023497	ExpressionStatement	m_reaper_helper = new ProcFamilyProxyReaperHelper ( this )	98:1:2985:3040	2023402	7	True				
ANR	2023498	AssignmentExpression	m_reaper_helper = new ProcFamilyProxyReaperHelper ( this )		2023402	0		=			
ANR	2023499	Identifier	m_reaper_helper		2023402	0					
ANR	2023500	Identifier	this		2023402	1					
ANR	2023501	ExpressionStatement	ASSERT ( m_reaper_helper != NULL )	99:1:3043:3074	2023402	8	True				
ANR	2023502	CallExpression	ASSERT ( m_reaper_helper != NULL )		2023402	0					
ANR	2023503	Callee	ASSERT		2023402	0					
ANR	2023504	Identifier	ASSERT		2023402	0					
ANR	2023505	ArgumentList	m_reaper_helper != NULL		2023402	1					
ANR	2023506	Argument	m_reaper_helper != NULL		2023402	0					
ANR	2023507	EqualityExpression	m_reaper_helper != NULL		2023402	0		!=			
ANR	2023508	Identifier	m_reaper_helper		2023402	0					
ANR	2023509	Identifier	NULL		2023402	1					
ANR	2023510	IdentifierDeclStatement	"const char * base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" ) ;"	110:1:3534:3602	2023402	9	True				
ANR	2023511	IdentifierDecl	"* base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		2023402	0					
ANR	2023512	IdentifierDeclType	const char *		2023402	0					
ANR	2023513	Identifier	base_addr_from_env		2023402	1					
ANR	2023514	AssignmentExpression	"* base_addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		2023402	2		=			
ANR	2023515	Identifier	base_addr_from_env		2023402	0					
ANR	2023516	CallExpression	"GetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		2023402	1					
ANR	2023517	Callee	GetEnv		2023402	0					
ANR	2023518	Identifier	GetEnv		2023402	0					
ANR	2023519	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	1					
ANR	2023520	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	0					
ANR	2023521	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	0					
ANR	2023522	IfStatement	if ( ( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env ) )		2023402	10					
ANR	2023523	Condition	( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env )	111:5:3609:3679	2023402	0	True				
ANR	2023524	OrExpression	( base_addr_from_env == NULL ) || ( procd_addr_base != base_addr_from_env )		2023402	0		||			
ANR	2023525	EqualityExpression	base_addr_from_env == NULL		2023402	0		==			
ANR	2023526	Identifier	base_addr_from_env		2023402	0					
ANR	2023527	Identifier	NULL		2023402	1					
ANR	2023528	EqualityExpression	procd_addr_base != base_addr_from_env		2023402	1		!=			
ANR	2023529	Identifier	procd_addr_base		2023402	0					
ANR	2023530	Identifier	base_addr_from_env		2023402	1					
ANR	2023531	CompoundStatement		53:78:1836:1836	2023402	1					
ANR	2023532	IfStatement	if ( ! start_procd ( ) )		2023402	0					
ANR	2023533	Condition	! start_procd ( )	112:6:3690:3703	2023402	0	True				
ANR	2023534	UnaryOperationExpression	! start_procd ( )		2023402	0					
ANR	2023535	UnaryOperator	!		2023402	0					
ANR	2023536	CallExpression	start_procd ( )		2023402	1					
ANR	2023537	Callee	start_procd		2023402	0					
ANR	2023538	Identifier	start_procd		2023402	0					
ANR	2023539	ArgumentList			2023402	1					
ANR	2023540	CompoundStatement		54:22:1860:1860	2023402	1					
ANR	2023541	ExpressionStatement	"EXCEPT ( ""unable to spawn the ProcD"" )"	113:3:3711:3746	2023402	0	True				
ANR	2023542	CallExpression	"EXCEPT ( ""unable to spawn the ProcD"" )"		2023402	0					
ANR	2023543	Callee	EXCEPT		2023402	0					
ANR	2023544	Identifier	EXCEPT		2023402	0					
ANR	2023545	ArgumentList	"""unable to spawn the ProcD"""		2023402	1					
ANR	2023546	Argument	"""unable to spawn the ProcD"""		2023402	0					
ANR	2023547	PrimaryExpression	"""unable to spawn the ProcD"""		2023402	0					
ANR	2023548	ExpressionStatement	"SetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" , procd_addr_base . Value ( ) )"	115:2:3754:3814	2023402	1	True				
ANR	2023549	CallExpression	"SetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" , procd_addr_base . Value ( ) )"		2023402	0					
ANR	2023550	Callee	SetEnv		2023402	0					
ANR	2023551	Identifier	SetEnv		2023402	0					
ANR	2023552	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	1					
ANR	2023553	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	0					
ANR	2023554	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		2023402	0					
ANR	2023555	Argument	procd_addr_base . Value ( )		2023402	1					
ANR	2023556	CallExpression	procd_addr_base . Value ( )		2023402	0					
ANR	2023557	Callee	procd_addr_base . Value		2023402	0					
ANR	2023558	MemberAccess	procd_addr_base . Value		2023402	0					
ANR	2023559	Identifier	procd_addr_base		2023402	0					
ANR	2023560	Identifier	Value		2023402	1					
ANR	2023561	ArgumentList			2023402	1					
ANR	2023562	ExpressionStatement	"SetEnv ( ""CONDOR_PROCD_ADDRESS"" , m_procd_addr . Value ( ) )"	116:2:3818:3870	2023402	2	True				
ANR	2023563	CallExpression	"SetEnv ( ""CONDOR_PROCD_ADDRESS"" , m_procd_addr . Value ( ) )"		2023402	0					
ANR	2023564	Callee	SetEnv		2023402	0					
ANR	2023565	Identifier	SetEnv		2023402	0					
ANR	2023566	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		2023402	1					
ANR	2023567	Argument	"""CONDOR_PROCD_ADDRESS"""		2023402	0					
ANR	2023568	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		2023402	0					
ANR	2023569	Argument	m_procd_addr . Value ( )		2023402	1					
ANR	2023570	CallExpression	m_procd_addr . Value ( )		2023402	0					
ANR	2023571	Callee	m_procd_addr . Value		2023402	0					
ANR	2023572	MemberAccess	m_procd_addr . Value		2023402	0					
ANR	2023573	Identifier	m_procd_addr		2023402	0					
ANR	2023574	Identifier	Value		2023402	1					
ANR	2023575	ArgumentList			2023402	1					
ANR	2023576	ElseStatement	else		2023402	0					
ANR	2023577	CompoundStatement		61:2:2039:2097	2023402	0					
ANR	2023578	IdentifierDeclStatement	"const char * addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" ) ;"	119:2:3885:3943	2023402	0	True				
ANR	2023579	IdentifierDecl	"* addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		2023402	0					
ANR	2023580	IdentifierDeclType	const char *		2023402	0					
ANR	2023581	Identifier	addr_from_env		2023402	1					
ANR	2023582	AssignmentExpression	"* addr_from_env = GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		2023402	2		=			
ANR	2023583	Identifier	addr_from_env		2023402	0					
ANR	2023584	CallExpression	"GetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		2023402	1					
ANR	2023585	Callee	GetEnv		2023402	0					
ANR	2023586	Identifier	GetEnv		2023402	0					
ANR	2023587	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		2023402	1					
ANR	2023588	Argument	"""CONDOR_PROCD_ADDRESS"""		2023402	0					
ANR	2023589	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		2023402	0					
ANR	2023590	IfStatement	if ( addr_from_env == NULL )		2023402	1					
ANR	2023591	Condition	addr_from_env == NULL	120:6:3951:3971	2023402	0	True				
ANR	2023592	EqualityExpression	addr_from_env == NULL		2023402	0		==			
ANR	2023593	Identifier	addr_from_env		2023402	0					
ANR	2023594	Identifier	NULL		2023402	1					
ANR	2023595	CompoundStatement		62:29:2128:2128	2023402	1					
ANR	2023596	Statement	EXCEPT	121:3:3979:3984	2023402	0	True				
ANR	2023597	Statement	(	121:9:3985:3985	2023402	1	True				
ANR	2023598	Statement	"""CONDOR_PROCD_ADDRESS_BASE in environment """	121:10:3986:4028	2023402	2	True				
ANR	2023599	Statement	"""but not CONDOR_PROCD_ADDRESS"""	122:14:4044:4073	2023402	3	True				
ANR	2023600	Statement	)	122:44:4074:4074	2023402	4	True				
ANR	2023601	ExpressionStatement		122:45:4075:4075	2023402	5	True				
ANR	2023602	ExpressionStatement	m_procd_addr = addr_from_env	124:2:4083:4111	2023402	2	True				
ANR	2023603	AssignmentExpression	m_procd_addr = addr_from_env		2023402	0		=			
ANR	2023604	Identifier	m_procd_addr		2023402	0					
ANR	2023605	Identifier	addr_from_env		2023402	1					
ANR	2023606	Statement	m_client	129:1:4194:4201	2023402	11	True				
ANR	2023607	Statement	=	129:10:4203:4203	2023402	12	True				
ANR	2023608	Statement	new	129:12:4205:4207	2023402	13	True				
ANR	2023609	ExpressionStatement	ProcFamilyClient	129:16:4209:4225	2023402	14	True				
ANR	2023610	Identifier	ProcFamilyClient		2023402	0					
ANR	2023611	ExpressionStatement	ASSERT ( m_client != NULL )	130:1:4228:4252	2023402	15	True				
ANR	2023612	CallExpression	ASSERT ( m_client != NULL )		2023402	0					
ANR	2023613	Callee	ASSERT		2023402	0					
ANR	2023614	Identifier	ASSERT		2023402	0					
ANR	2023615	ArgumentList	m_client != NULL		2023402	1					
ANR	2023616	Argument	m_client != NULL		2023402	0					
ANR	2023617	EqualityExpression	m_client != NULL		2023402	0		!=			
ANR	2023618	Identifier	m_client		2023402	0					
ANR	2023619	Identifier	NULL		2023402	1					
ANR	2023620	IfStatement	if ( ! m_client -> initialize ( m_procd_addr . Value ( ) ) )		2023402	16					
ANR	2023621	Condition	! m_client -> initialize ( m_procd_addr . Value ( ) )	131:5:4259:4301	2023402	0	True				
ANR	2023622	UnaryOperationExpression	! m_client -> initialize ( m_procd_addr . Value ( ) )		2023402	0					
ANR	2023623	UnaryOperator	!		2023402	0					
ANR	2023624	CallExpression	m_client -> initialize ( m_procd_addr . Value ( ) )		2023402	1					
ANR	2023625	Callee	m_client -> initialize		2023402	0					
ANR	2023626	PtrMemberAccess	m_client -> initialize		2023402	0					
ANR	2023627	Identifier	m_client		2023402	0					
ANR	2023628	Identifier	initialize		2023402	1					
ANR	2023629	ArgumentList	m_procd_addr . Value ( )		2023402	1					
ANR	2023630	Argument	m_procd_addr . Value ( )		2023402	0					
ANR	2023631	CallExpression	m_procd_addr . Value ( )		2023402	0					
ANR	2023632	Callee	m_procd_addr . Value		2023402	0					
ANR	2023633	MemberAccess	m_procd_addr . Value		2023402	0					
ANR	2023634	Identifier	m_procd_addr		2023402	0					
ANR	2023635	Identifier	Value		2023402	1					
ANR	2023636	ArgumentList			2023402	1					
ANR	2023637	CompoundStatement		73:50:2458:2458	2023402	1					
ANR	2023638	ExpressionStatement	"dprintf ( D_ALWAYS , ""ProcFamilyProxy: error initializing ProcFamilyClient\\n"" )"	132:2:4308:4393	2023402	0	True				
ANR	2023639	CallExpression	"dprintf ( D_ALWAYS , ""ProcFamilyProxy: error initializing ProcFamilyClient\\n"" )"		2023402	0					
ANR	2023640	Callee	dprintf		2023402	0					
ANR	2023641	Identifier	dprintf		2023402	0					
ANR	2023642	ArgumentList	D_ALWAYS		2023402	1					
ANR	2023643	Argument	D_ALWAYS		2023402	0					
ANR	2023644	Identifier	D_ALWAYS		2023402	0					
ANR	2023645	Argument	"""ProcFamilyProxy: error initializing ProcFamilyClient\\n"""		2023402	1					
ANR	2023646	PrimaryExpression	"""ProcFamilyProxy: error initializing ProcFamilyClient\\n"""		2023402	0					
ANR	2023647	ExpressionStatement	recover_from_procd_error ( )	134:2:4397:4423	2023402	1	True				
ANR	2023648	CallExpression	recover_from_procd_error ( )		2023402	0					
ANR	2023649	Callee	recover_from_procd_error		2023402	0					
ANR	2023650	Identifier	recover_from_procd_error		2023402	0					
ANR	2023651	ArgumentList			2023402	1					
ANR	2023652	Identifier	ProcFamilyProxy :: ProcFamilyProxy		2023402	1					
ANR	2023653	ParameterList	const char * address_suffix		2023402	2					
ANR	2023654	Parameter	const char * address_suffix	56:33:1777:1802	2023402	0	True				
ANR	2023655	ParameterType	const char *		2023402	0					
ANR	2023656	Identifier	address_suffix		2023402	1					
ANR	2023657	CFGEntryNode	ENTRY		2023402		True				
ANR	2023658	CFGExitNode	EXIT		2023402		True				
ANR	2023659	Symbol	m_procd_addr		2023402						
ANR	2023660	Symbol	NULL		2023402						
ANR	2023661	Symbol	m_procd_log		2023402						
ANR	2023662	Symbol	this		2023402						
ANR	2023663	Symbol	addr_from_env		2023402						
ANR	2023664	Symbol	D_ALWAYS		2023402						
ANR	2023665	Symbol	m_reaper_helper		2023402						
ANR	2023666	Symbol	* m_client		2023402						
ANR	2023667	Symbol	s_instantiated		2023402						
ANR	2023668	Symbol	procd_addr_base		2023402						
ANR	2023669	Symbol	base_addr_from_env		2023402						
ANR	2023670	Symbol	procd_addr_base . Value		2023402						
ANR	2023671	Symbol	m_client -> initialize		2023402						
ANR	2023672	Symbol	param		2023402						
ANR	2023673	Symbol	start_procd		2023402						
ANR	2023674	Symbol	true		2023402						
ANR	2023675	Symbol	get_procd_address		2023402						
ANR	2023676	Symbol	GetEnv		2023402						
ANR	2023677	Symbol	procd_log		2023402						
ANR	2023678	Symbol	address_suffix		2023402						
ANR	2023679	Symbol	m_procd_addr . Value		2023402						
ANR	2023680	Symbol	m_client		2023402						
ANR	2023681	Function	ProcFamilyProxy :: ~ProcFamilyProxy	138:0:4431:4820							
ANR	2023682	FunctionDef	ProcFamilyProxy :: ~ProcFamilyProxy ()		2023681	0					
ANR	2023683	CompoundStatement		139:0:4467:4820	2023681	0					
ANR	2023684	IfStatement	if ( m_procd_pid != - 1 )		2023681	0					
ANR	2023685	Condition	m_procd_pid != - 1	143:5:4565:4581	2023681	0	True				
ANR	2023686	EqualityExpression	m_procd_pid != - 1		2023681	0		!=			
ANR	2023687	Identifier	m_procd_pid		2023681	0					
ANR	2023688	UnaryOperationExpression	- 1		2023681	1					
ANR	2023689	UnaryOperator	-		2023681	0					
ANR	2023690	PrimaryExpression	1		2023681	1					
ANR	2023691	CompoundStatement		5:24:116:116	2023681	1					
ANR	2023692	ExpressionStatement	stop_procd ( )	144:2:4588:4600	2023681	0	True				
ANR	2023693	CallExpression	stop_procd ( )		2023681	0					
ANR	2023694	Callee	stop_procd		2023681	0					
ANR	2023695	Identifier	stop_procd		2023681	0					
ANR	2023696	ArgumentList			2023681	1					
ANR	2023697	ExpressionStatement	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"	145:2:4604:4641	2023681	1	True				
ANR	2023698	CallExpression	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS_BASE"" )"		2023681	0					
ANR	2023699	Callee	UnsetEnv		2023681	0					
ANR	2023700	Identifier	UnsetEnv		2023681	0					
ANR	2023701	ArgumentList	"""CONDOR_PROCD_ADDRESS_BASE"""		2023681	1					
ANR	2023702	Argument	"""CONDOR_PROCD_ADDRESS_BASE"""		2023681	0					
ANR	2023703	PrimaryExpression	"""CONDOR_PROCD_ADDRESS_BASE"""		2023681	0					
ANR	2023704	ExpressionStatement	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS"" )"	146:2:4645:4677	2023681	2	True				
ANR	2023705	CallExpression	"UnsetEnv ( ""CONDOR_PROCD_ADDRESS"" )"		2023681	0					
ANR	2023706	Callee	UnsetEnv		2023681	0					
ANR	2023707	Identifier	UnsetEnv		2023681	0					
ANR	2023708	ArgumentList	"""CONDOR_PROCD_ADDRESS"""		2023681	1					
ANR	2023709	Argument	"""CONDOR_PROCD_ADDRESS"""		2023681	0					
ANR	2023710	PrimaryExpression	"""CONDOR_PROCD_ADDRESS"""		2023681	0					
ANR	2023711	Statement	delete	151:1:4718:4723	2023681	1	True				
ANR	2023712	ExpressionStatement	m_client	151:8:4725:4733	2023681	2	True				
ANR	2023713	Identifier	m_client		2023681	0					
ANR	2023714	Statement	delete	152:1:4736:4741	2023681	3	True				
ANR	2023715	ExpressionStatement	m_reaper_helper	152:8:4743:4758	2023681	4	True				
ANR	2023716	Identifier	m_reaper_helper		2023681	0					
ANR	2023717	ExpressionStatement	s_instantiated = false	156:1:4795:4817	2023681	5	True				
ANR	2023718	AssignmentExpression	s_instantiated = false		2023681	0		=			
ANR	2023719	Identifier	s_instantiated		2023681	0					
ANR	2023720	Identifier	false		2023681	1					
ANR	2023721	Identifier	ProcFamilyProxy :: ~ProcFamilyProxy		2023681	1					
ANR	2023722	ParameterList			2023681	2					
ANR	2023723	CFGEntryNode	ENTRY		2023681		True				
ANR	2023724	CFGExitNode	EXIT		2023681		True				
ANR	2023725	Symbol	m_procd_pid		2023681						
ANR	2023726	Symbol	false		2023681						
ANR	2023727	Symbol	s_instantiated		2023681						
ANR	2023728	Function	ProcFamilyProxy :: register_subfamily	160:0:4823:7064							
ANR	2023729	FunctionDef	"ProcFamilyProxy :: register_subfamily (pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval)"		2023728	0					
ANR	2023730	CompoundStatement		164:0:4998:7064	2023728	0					
ANR	2023731	ExpressionStatement	"DC_AUTO_RUNTIME_PROBE ( __FUNCTION__ , auto0 )"	166:4:5031:5072	2023728	0	True				
ANR	2023732	CallExpression	"DC_AUTO_RUNTIME_PROBE ( __FUNCTION__ , auto0 )"		2023728	0					
ANR	2023733	Callee	DC_AUTO_RUNTIME_PROBE		2023728	0					
ANR	2023734	Identifier	DC_AUTO_RUNTIME_PROBE		2023728	0					
ANR	2023735	ArgumentList	__FUNCTION__		2023728	1					
ANR	2023736	Argument	__FUNCTION__		2023728	0					
ANR	2023737	Identifier	__FUNCTION__		2023728	0					
ANR	2023738	Argument	auto0		2023728	1					
ANR	2023739	Identifier	auto0		2023728	0					
ANR	2023740	IdentifierDeclStatement	bool response ;	176:1:5434:5447	2023728	1	True				
ANR	2023741	IdentifierDecl	response		2023728	0					
ANR	2023742	IdentifierDeclType	bool		2023728	0					
ANR	2023743	Identifier	response		2023728	1					
ANR	2023744	IfStatement	"if ( ! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response ) )"		2023728	2					
ANR	2023745	Condition	"! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"	177:5:5454:5643	2023728	0	True				
ANR	2023746	UnaryOperationExpression	"! m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"		2023728	0					
ANR	2023747	UnaryOperator	!		2023728	0					
ANR	2023748	CallExpression	"m_client -> register_subfamily ( root_pid , watcher_pid , max_snapshot_interval , response )"		2023728	1					
ANR	2023749	Callee	m_client -> register_subfamily		2023728	0					
ANR	2023750	PtrMemberAccess	m_client -> register_subfamily		2023728	0					
ANR	2023751	Identifier	m_client		2023728	0					
ANR	2023752	Identifier	register_subfamily		2023728	1					
ANR	2023753	ArgumentList	root_pid		2023728	1					
ANR	2023754	Argument	root_pid		2023728	0					
ANR	2023755	Identifier	root_pid		2023728	0					
ANR	2023756	Argument	watcher_pid		2023728	1					
ANR	2023757	Identifier	watcher_pid		2023728	0					
ANR	2023758	Argument	max_snapshot_interval		2023728	2					
ANR	2023759	Identifier	max_snapshot_interval		2023728	0					
ANR	2023760	Argument	response		2023728	3					
ANR	2023761	Identifier	response		2023728	0					
ANR	2023762	CompoundStatement		18:1:648:648	2023728	1					
ANR	2023763	ExpressionStatement	"dprintf ( D_ALWAYS , ""register_subfamily: ProcD communication error\\n"" )"	182:2:5651:5719	2023728	0	True				
ANR	2023764	CallExpression	"dprintf ( D_ALWAYS , ""register_subfamily: ProcD communication error\\n"" )"		2023728	0					
ANR	2023765	Callee	dprintf		2023728	0					
ANR	2023766	Identifier	dprintf		2023728	0					
ANR	2023767	ArgumentList	D_ALWAYS		2023728	1					
ANR	2023768	Argument	D_ALWAYS		2023728	0					
ANR	2023769	Identifier	D_ALWAYS		2023728	0					
ANR	2023770	Argument	"""register_subfamily: ProcD communication error\\n"""		2023728	1					
ANR	2023771	PrimaryExpression	"""register_subfamily: ProcD communication error\\n"""		2023728	0					
ANR	2023772	ReturnStatement	return false ;	183:2:5723:5735	2023728	1	True				
ANR	2023773	Identifier	false		2023728	0					
ANR	2023774	CompoundStatement		32:7:1173:1211	2023728	3					
ANR	2023775	IdentifierDeclStatement	extern double pfc_lc_rt_start_connection ;	190:7:5954:5994	2023728	0	True				
ANR	2023776	IdentifierDecl	pfc_lc_rt_start_connection		2023728	0					
ANR	2023777	IdentifierDeclType	extern double		2023728	0					
ANR	2023778	Identifier	pfc_lc_rt_start_connection		2023728	1					
ANR	2023779	IdentifierDeclStatement	extern double pfc_lc_rt_open_pipe ;	191:7:6003:6036	2023728	1	True				
ANR	2023780	IdentifierDecl	pfc_lc_rt_open_pipe		2023728	0					
ANR	2023781	IdentifierDeclType	extern double		2023728	0					
ANR	2023782	Identifier	pfc_lc_rt_open_pipe		2023728	1					
ANR	2023783	IdentifierDeclStatement	extern double pfc_lc_rt_wait_pipe ;	192:7:6045:6078	2023728	2	True				
ANR	2023784	IdentifierDecl	pfc_lc_rt_wait_pipe		2023728	0					
ANR	2023785	IdentifierDeclType	extern double		2023728	0					
ANR	2023786	Identifier	pfc_lc_rt_wait_pipe		2023728	1					
ANR	2023787	IdentifierDeclStatement	extern double pfc_lc_rt_write_pipe ;	193:7:6087:6121	2023728	3	True				
ANR	2023788	IdentifierDecl	pfc_lc_rt_write_pipe		2023728	0					
ANR	2023789	IdentifierDeclType	extern double		2023728	0					
ANR	2023790	Identifier	pfc_lc_rt_write_pipe		2023728	1					
ANR	2023791	IdentifierDeclStatement	extern double pfc_lc_rt_read_data ;	194:7:6130:6163	2023728	4	True				
ANR	2023792	IdentifierDecl	pfc_lc_rt_read_data		2023728	0					
ANR	2023793	IdentifierDeclType	extern double		2023728	0					
ANR	2023794	Identifier	pfc_lc_rt_read_data		2023728	1					
ANR	2023795	IdentifierDeclStatement	extern double pfc_lc_rt_end_connection ;	195:7:6172:6210	2023728	5	True				
ANR	2023796	IdentifierDecl	pfc_lc_rt_end_connection		2023728	0					
ANR	2023797	IdentifierDeclType	extern double		2023728	0					
ANR	2023798	Identifier	pfc_lc_rt_end_connection		2023728	1					
ANR	2023799	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_0start_connection"" , IF_VERBOSEPUB , pfc_lc_rt_start_connection )"	197:7:6220:6356	2023728	6	True				
ANR	2023800	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_0start_connection"" , IF_VERBOSEPUB , pfc_lc_rt_start_connection )"		2023728	0					
ANR	2023801	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023802	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023803	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023804	Identifier	daemonCore		2023728	0					
ANR	2023805	Identifier	dc_stats		2023728	1					
ANR	2023806	Identifier	AddSample		2023728	1					
ANR	2023807	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		2023728	1					
ANR	2023808	Argument	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		2023728	0					
ANR	2023809	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_0start_connection"""		2023728	0					
ANR	2023810	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023811	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023812	Argument	pfc_lc_rt_start_connection		2023728	2					
ANR	2023813	Identifier	pfc_lc_rt_start_connection		2023728	0					
ANR	2023814	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_open_pipe )"	198:7:6365:6488	2023728	7	True				
ANR	2023815	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_open_pipe )"		2023728	0					
ANR	2023816	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023817	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023818	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023819	Identifier	daemonCore		2023728	0					
ANR	2023820	Identifier	dc_stats		2023728	1					
ANR	2023821	Identifier	AddSample		2023728	1					
ANR	2023822	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		2023728	1					
ANR	2023823	Argument	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		2023728	0					
ANR	2023824	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__0open_pipe"""		2023728	0					
ANR	2023825	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023826	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023827	Argument	pfc_lc_rt_open_pipe		2023728	2					
ANR	2023828	Identifier	pfc_lc_rt_open_pipe		2023728	0					
ANR	2023829	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_wait_pipe )"	199:7:6497:6620	2023728	8	True				
ANR	2023830	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_wait_pipe )"		2023728	0					
ANR	2023831	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023832	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023833	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023834	Identifier	daemonCore		2023728	0					
ANR	2023835	Identifier	dc_stats		2023728	1					
ANR	2023836	Identifier	AddSample		2023728	1					
ANR	2023837	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		2023728	1					
ANR	2023838	Argument	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		2023728	0					
ANR	2023839	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__1wait_pipe"""		2023728	0					
ANR	2023840	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023841	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023842	Argument	pfc_lc_rt_wait_pipe		2023728	2					
ANR	2023843	Identifier	pfc_lc_rt_wait_pipe		2023728	0					
ANR	2023844	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_write_pipe )"	200:7:6629:6754	2023728	9	True				
ANR	2023845	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"" , IF_VERBOSEPUB , pfc_lc_rt_write_pipe )"		2023728	0					
ANR	2023846	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023847	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023848	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023849	Identifier	daemonCore		2023728	0					
ANR	2023850	Identifier	dc_stats		2023728	1					
ANR	2023851	Identifier	AddSample		2023728	1					
ANR	2023852	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		2023728	1					
ANR	2023853	Argument	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		2023728	0					
ANR	2023854	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily__2write_pipe"""		2023728	0					
ANR	2023855	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023856	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023857	Argument	pfc_lc_rt_write_pipe		2023728	2					
ANR	2023858	Identifier	pfc_lc_rt_write_pipe		2023728	0					
ANR	2023859	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_1read_data"" , IF_VERBOSEPUB , pfc_lc_rt_read_data )"	201:7:6763:6885	2023728	10	True				
ANR	2023860	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_1read_data"" , IF_VERBOSEPUB , pfc_lc_rt_read_data )"		2023728	0					
ANR	2023861	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023862	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023863	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023864	Identifier	daemonCore		2023728	0					
ANR	2023865	Identifier	dc_stats		2023728	1					
ANR	2023866	Identifier	AddSample		2023728	1					
ANR	2023867	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		2023728	1					
ANR	2023868	Argument	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		2023728	0					
ANR	2023869	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_1read_data"""		2023728	0					
ANR	2023870	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023871	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023872	Argument	pfc_lc_rt_read_data		2023728	2					
ANR	2023873	Identifier	pfc_lc_rt_read_data		2023728	0					
ANR	2023874	ExpressionStatement	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_2end_connection"" , IF_VERBOSEPUB , pfc_lc_rt_end_connection )"	202:7:6894:7026	2023728	11	True				
ANR	2023875	CallExpression	"daemonCore -> dc_stats . AddSample ( ""DCFuncProcFamilyProxy::register_subfamily_2end_connection"" , IF_VERBOSEPUB , pfc_lc_rt_end_connection )"		2023728	0					
ANR	2023876	Callee	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023877	MemberAccess	daemonCore -> dc_stats . AddSample		2023728	0					
ANR	2023878	PtrMemberAccess	daemonCore -> dc_stats		2023728	0					
ANR	2023879	Identifier	daemonCore		2023728	0					
ANR	2023880	Identifier	dc_stats		2023728	1					
ANR	2023881	Identifier	AddSample		2023728	1					
ANR	2023882	ArgumentList	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		2023728	1					
ANR	2023883	Argument	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		2023728	0					
ANR	2023884	PrimaryExpression	"""DCFuncProcFamilyProxy::register_subfamily_2end_connection"""		2023728	0					
ANR	2023885	Argument	IF_VERBOSEPUB		2023728	1					
ANR	2023886	Identifier	IF_VERBOSEPUB		2023728	0					
ANR	2023887	Argument	pfc_lc_rt_end_connection		2023728	2					
ANR	2023888	Identifier	pfc_lc_rt_end_connection		2023728	0					
ANR	2023889	ReturnStatement	return response ;	206:1:7047:7062	2023728	4	True				
ANR	2023890	Identifier	response		2023728	0					
ANR	2023891	ReturnType	bool		2023728	1					
ANR	2023892	Identifier	ProcFamilyProxy :: register_subfamily		2023728	2					
ANR	2023893	ParameterList	"pid_t root_pid , pid_t watcher_pid , int max_snapshot_interval"		2023728	3					
ANR	2023894	Parameter	pid_t root_pid	161:36:4864:4877	2023728	0	True				
ANR	2023895	ParameterType	pid_t		2023728	0					
ANR	2023896	Identifier	root_pid		2023728	1					
ANR	2023897	Parameter	pid_t watcher_pid	162:36:4916:4932	2023728	1	True				
ANR	2023898	ParameterType	pid_t		2023728	0					
ANR	2023899	Identifier	watcher_pid		2023728	1					
ANR	2023900	Parameter	int max_snapshot_interval	163:36:4971:4995	2023728	2	True				
ANR	2023901	ParameterType	int		2023728	0					
ANR	2023902	Identifier	max_snapshot_interval		2023728	1					
ANR	2023903	CFGEntryNode	ENTRY		2023728		True				
ANR	2023904	CFGExitNode	EXIT		2023728		True				
ANR	2023905	Symbol	pfc_lc_rt_open_pipe		2023728						
ANR	2023906	Symbol	watcher_pid		2023728						
ANR	2023907	Symbol	pfc_lc_rt_read_data		2023728						
ANR	2023908	Symbol	D_ALWAYS		2023728						
ANR	2023909	Symbol	false		2023728						
ANR	2023910	Symbol	m_client -> register_subfamily		2023728						
ANR	2023911	Symbol	auto0		2023728						
ANR	2023912	Symbol	pfc_lc_rt_start_connection		2023728						
ANR	2023913	Symbol	__FUNCTION__		2023728						
ANR	2023914	Symbol	* m_client		2023728						
ANR	2023915	Symbol	pfc_lc_rt_wait_pipe		2023728						
ANR	2023916	Symbol	daemonCore -> dc_stats		2023728						
ANR	2023917	Symbol	max_snapshot_interval		2023728						
ANR	2023918	Symbol	IF_VERBOSEPUB		2023728						
ANR	2023919	Symbol	pfc_lc_rt_write_pipe		2023728						
ANR	2023920	Symbol	response		2023728						
ANR	2023921	Symbol	* daemonCore		2023728						
ANR	2023922	Symbol	daemonCore		2023728						
ANR	2023923	Symbol	root_pid		2023728						
ANR	2023924	Symbol	m_client		2023728						
ANR	2023925	Symbol	pfc_lc_rt_end_connection		2023728						
ANR	2023926	Function	ProcFamilyProxy :: track_family_via_environment	209:0:7067:7484							
ANR	2023927	FunctionDef	"ProcFamilyProxy :: track_family_via_environment (pid_t pid , PidEnvID & penvid)"		2023926	0					
ANR	2023928	CompoundStatement		211:0:7147:7484	2023926	0					
ANR	2023929	IdentifierDeclStatement	bool response ;	215:1:7252:7265	2023926	0	True				
ANR	2023930	IdentifierDecl	response		2023926	0					
ANR	2023931	IdentifierDeclType	bool		2023926	0					
ANR	2023932	Identifier	response		2023926	1					
ANR	2023933	IfStatement	"if ( ! m_client -> track_family_via_environment ( pid , penvid , response ) )"		2023926	1					
ANR	2023934	Condition	"! m_client -> track_family_via_environment ( pid , penvid , response )"	216:5:7272:7333	2023926	0	True				
ANR	2023935	UnaryOperationExpression	"! m_client -> track_family_via_environment ( pid , penvid , response )"		2023926	0					
ANR	2023936	UnaryOperator	!		2023926	0					
ANR	2023937	CallExpression	"m_client -> track_family_via_environment ( pid , penvid , response )"		2023926	1					
ANR	2023938	Callee	m_client -> track_family_via_environment		2023926	0					
ANR	2023939	PtrMemberAccess	m_client -> track_family_via_environment		2023926	0					
ANR	2023940	Identifier	m_client		2023926	0					
ANR	2023941	Identifier	track_family_via_environment		2023926	1					
ANR	2023942	ArgumentList	pid		2023926	1					
ANR	2023943	Argument	pid		2023926	0					
ANR	2023944	Identifier	pid		2023926	0					
ANR	2023945	Argument	penvid		2023926	1					
ANR	2023946	Identifier	penvid		2023926	0					
ANR	2023947	Argument	response		2023926	2					
ANR	2023948	Identifier	response		2023926	0					
ANR	2023949	CompoundStatement		6:69:188:188	2023926	1					
ANR	2023950	Statement	dprintf	217:2:7340:7346	2023926	0	True				
ANR	2023951	Statement	(	217:9:7347:7347	2023926	1	True				
ANR	2023952	Statement	D_ALWAYS	217:10:7348:7355	2023926	2	True				
ANR	2023953	Statement	","	217:18:7356:7356	2023926	3	True				
ANR	2023954	Statement	"""track_family_via_environment: """	218:10:7368:7399	2023926	4	True				
ANR	2023955	Statement	"""ProcD communication error\\n"""	219:14:7415:7443	2023926	5	True				
ANR	2023956	Statement	)	219:43:7444:7444	2023926	6	True				
ANR	2023957	ExpressionStatement		219:44:7445:7445	2023926	7	True				
ANR	2023958	ReturnStatement	return false ;	220:2:7449:7461	2023926	8	True				
ANR	2023959	Identifier	false		2023926	0					
ANR	2023960	ReturnStatement	return response ;	222:1:7467:7482	2023926	2	True				
ANR	2023961	Identifier	response		2023926	0					
ANR	2023962	ReturnType	bool		2023926	1					
ANR	2023963	Identifier	ProcFamilyProxy :: track_family_via_environment		2023926	2					
ANR	2023964	ParameterList	"pid_t pid , PidEnvID & penvid"		2023926	3					
ANR	2023965	Parameter	pid_t pid	210:46:7118:7126	2023926	0	True				
ANR	2023966	ParameterType	pid_t		2023926	0					
ANR	2023967	Identifier	pid		2023926	1					
ANR	2023968	Parameter	PidEnvID & penvid	210:57:7129:7144	2023926	1	True				
ANR	2023969	ParameterType	PidEnvID &		2023926	0					
ANR	2023970	Identifier	penvid		2023926	1					
ANR	2023971	CFGEntryNode	ENTRY		2023926		True				
ANR	2023972	CFGExitNode	EXIT		2023926		True				
ANR	2023973	Symbol	m_client -> track_family_via_environment		2023926						
ANR	2023974	Symbol	response		2023926						
ANR	2023975	Symbol	false		2023926						
ANR	2023976	Symbol	penvid		2023926						
ANR	2023977	Symbol	pid		2023926						
ANR	2023978	Symbol	m_client		2023926						
ANR	2023979	Symbol	* m_client		2023926						
ANR	2023980	Function	ProcFamilyProxy :: track_family_via_login	225:0:7487:7886							
ANR	2023981	FunctionDef	"ProcFamilyProxy :: track_family_via_login (pid_t pid , const char * login)"		2023980	0					
ANR	2023982	CompoundStatement		227:0:7562:7886	2023980	0					
ANR	2023983	IdentifierDeclStatement	bool response ;	231:1:7667:7680	2023980	0	True				
ANR	2023984	IdentifierDecl	response		2023980	0					
ANR	2023985	IdentifierDeclType	bool		2023980	0					
ANR	2023986	Identifier	response		2023980	1					
ANR	2023987	IfStatement	"if ( ! m_client -> track_family_via_login ( pid , login , response ) )"		2023980	1					
ANR	2023988	Condition	"! m_client -> track_family_via_login ( pid , login , response )"	232:5:7687:7741	2023980	0	True				
ANR	2023989	UnaryOperationExpression	"! m_client -> track_family_via_login ( pid , login , response )"		2023980	0					
ANR	2023990	UnaryOperator	!		2023980	0					
ANR	2023991	CallExpression	"m_client -> track_family_via_login ( pid , login , response )"		2023980	1					
ANR	2023992	Callee	m_client -> track_family_via_login		2023980	0					
ANR	2023993	PtrMemberAccess	m_client -> track_family_via_login		2023980	0					
ANR	2023994	Identifier	m_client		2023980	0					
ANR	2023995	Identifier	track_family_via_login		2023980	1					
ANR	2023996	ArgumentList	pid		2023980	1					
ANR	2023997	Argument	pid		2023980	0					
ANR	2023998	Identifier	pid		2023980	0					
ANR	2023999	Argument	login		2023980	1					
ANR	2024000	Identifier	login		2023980	0					
ANR	2024001	Argument	response		2023980	2					
ANR	2024002	Identifier	response		2023980	0					
ANR	2024003	CompoundStatement		6:62:181:181	2023980	1					
ANR	2024004	Statement	dprintf	233:2:7748:7754	2023980	0	True				
ANR	2024005	Statement	(	233:9:7755:7755	2023980	1	True				
ANR	2024006	Statement	D_ALWAYS	233:10:7756:7763	2023980	2	True				
ANR	2024007	Statement	","	233:18:7764:7764	2023980	3	True				
ANR	2024008	Statement	"""track_family_via_login: """	234:10:7776:7801	2023980	4	True				
ANR	2024009	Statement	"""ProcD communication error\\n"""	235:14:7817:7845	2023980	5	True				
ANR	2024010	Statement	)	235:43:7846:7846	2023980	6	True				
ANR	2024011	ExpressionStatement		235:44:7847:7847	2023980	7	True				
ANR	2024012	ReturnStatement	return false ;	236:2:7851:7863	2023980	8	True				
ANR	2024013	Identifier	false		2023980	0					
ANR	2024014	ReturnStatement	return response ;	238:1:7869:7884	2023980	2	True				
ANR	2024015	Identifier	response		2023980	0					
ANR	2024016	ReturnType	bool		2023980	1					
ANR	2024017	Identifier	ProcFamilyProxy :: track_family_via_login		2023980	2					
ANR	2024018	ParameterList	"pid_t pid , const char * login"		2023980	3					
ANR	2024019	Parameter	pid_t pid	226:40:7532:7540	2023980	0	True				
ANR	2024020	ParameterType	pid_t		2023980	0					
ANR	2024021	Identifier	pid		2023980	1					
ANR	2024022	Parameter	const char * login	226:51:7543:7559	2023980	1	True				
ANR	2024023	ParameterType	const char *		2023980	0					
ANR	2024024	Identifier	login		2023980	1					
ANR	2024025	CFGEntryNode	ENTRY		2023980		True				
ANR	2024026	CFGExitNode	EXIT		2023980		True				
ANR	2024027	Symbol	response		2023980						
ANR	2024028	Symbol	false		2023980						
ANR	2024029	Symbol	pid		2023980						
ANR	2024030	Symbol	login		2023980						
ANR	2024031	Symbol	m_client -> track_family_via_login		2023980						
ANR	2024032	Symbol	* m_client		2023980						
ANR	2024033	Symbol	m_client		2023980						
ANR	2024034	Function	ProcFamilyProxy :: track_family_via_allocated_supplementary_group	242:0:7908:8483							
ANR	2024035	FunctionDef	"ProcFamilyProxy :: track_family_via_allocated_supplementary_group (pid_t pid , gid_t & gid)"		2024034	0					
ANR	2024036	CompoundStatement		244:0:8000:8483	2024034	0					
ANR	2024037	IdentifierDeclStatement	bool response ;	248:1:8106:8119	2024034	0	True				
ANR	2024038	IdentifierDecl	response		2024034	0					
ANR	2024039	IdentifierDeclType	bool		2024034	0					
ANR	2024040	Identifier	response		2024034	1					
ANR	2024041	IfStatement	"if ( ! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid ) )"		2024034	1					
ANR	2024042	Condition	"! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"	249:5:8126:8314	2024034	0	True				
ANR	2024043	UnaryOperationExpression	"! m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"		2024034	0					
ANR	2024044	UnaryOperator	!		2024034	0					
ANR	2024045	CallExpression	"m_client -> track_family_via_allocated_supplementary_group ( pid , response , gid )"		2024034	1					
ANR	2024046	Callee	m_client -> track_family_via_allocated_supplementary_group		2024034	0					
ANR	2024047	PtrMemberAccess	m_client -> track_family_via_allocated_supplementary_group		2024034	0					
ANR	2024048	Identifier	m_client		2024034	0					
ANR	2024049	Identifier	track_family_via_allocated_supplementary_group		2024034	1					
ANR	2024050	ArgumentList	pid		2024034	1					
ANR	2024051	Argument	pid		2024034	0					
ANR	2024052	Identifier	pid		2024034	0					
ANR	2024053	Argument	response		2024034	1					
ANR	2024054	Identifier	response		2024034	0					
ANR	2024055	Argument	gid		2024034	2					
ANR	2024056	Identifier	gid		2024034	0					
ANR	2024057	CompoundStatement		8:62:316:316	2024034	1					
ANR	2024058	Statement	dprintf	252:2:8321:8327	2024034	0	True				
ANR	2024059	Statement	(	252:9:8328:8328	2024034	1	True				
ANR	2024060	Statement	D_ALWAYS	252:10:8329:8336	2024034	2	True				
ANR	2024061	Statement	","	252:18:8337:8337	2024034	3	True				
ANR	2024062	Statement	"""track_family_via_allocated_supplementary_group: """	253:10:8349:8398	2024034	4	True				
ANR	2024063	Statement	"""ProcD communication error\\n"""	254:14:8414:8442	2024034	5	True				
ANR	2024064	Statement	)	254:43:8443:8443	2024034	6	True				
ANR	2024065	ExpressionStatement		254:44:8444:8444	2024034	7	True				
ANR	2024066	ReturnStatement	return false ;	255:2:8448:8460	2024034	8	True				
ANR	2024067	Identifier	false		2024034	0					
ANR	2024068	ReturnStatement	return response ;	257:1:8466:8481	2024034	2	True				
ANR	2024069	Identifier	response		2024034	0					
ANR	2024070	ReturnType	bool		2024034	1					
ANR	2024071	Identifier	ProcFamilyProxy :: track_family_via_allocated_supplementary_group		2024034	2					
ANR	2024072	ParameterList	"pid_t pid , gid_t & gid"		2024034	3					
ANR	2024073	Parameter	pid_t pid	243:64:7977:7985	2024034	0	True				
ANR	2024074	ParameterType	pid_t		2024034	0					
ANR	2024075	Identifier	pid		2024034	1					
ANR	2024076	Parameter	gid_t & gid	243:75:7988:7997	2024034	1	True				
ANR	2024077	ParameterType	gid_t &		2024034	0					
ANR	2024078	Identifier	gid		2024034	1					
ANR	2024079	CFGEntryNode	ENTRY		2024034		True				
ANR	2024080	CFGExitNode	EXIT		2024034		True				
ANR	2024081	Symbol	gid		2024034						
ANR	2024082	Symbol	response		2024034						
ANR	2024083	Symbol	false		2024034						
ANR	2024084	Symbol	pid		2024034						
ANR	2024085	Symbol	m_client		2024034						
ANR	2024086	Symbol	* m_client		2024034						
ANR	2024087	Symbol	m_client -> track_family_via_allocated_supplementary_group		2024034						
ANR	2024088	Function	ProcFamilyProxy :: track_family_via_cgroup	262:0:8525:8902							
ANR	2024089	FunctionDef	"ProcFamilyProxy :: track_family_via_cgroup (pid_t pid , const char * cgroup)"		2024088	0					
ANR	2024090	CompoundStatement		264:0:8602:8902	2024088	0					
ANR	2024091	IdentifierDeclStatement	bool response ;	265:1:8605:8618	2024088	0	True				
ANR	2024092	IdentifierDecl	response		2024088	0					
ANR	2024093	IdentifierDeclType	bool		2024088	0					
ANR	2024094	Identifier	response		2024088	1					
ANR	2024095	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"" , pid , cgroup )"	266:1:8621:8717	2024088	1	True				
ANR	2024096	CallExpression	"dprintf ( D_FULLDEBUG , ""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"" , pid , cgroup )"		2024088	0					
ANR	2024097	Callee	dprintf		2024088	0					
ANR	2024098	Identifier	dprintf		2024088	0					
ANR	2024099	ArgumentList	D_FULLDEBUG		2024088	1					
ANR	2024100	Argument	D_FULLDEBUG		2024088	0					
ANR	2024101	Identifier	D_FULLDEBUG		2024088	0					
ANR	2024102	Argument	"""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"""		2024088	1					
ANR	2024103	PrimaryExpression	"""track_family_via_cgroup: Tracking PID %u via cgroup %s.\\n"""		2024088	0					
ANR	2024104	Argument	pid		2024088	2					
ANR	2024105	Identifier	pid		2024088	0					
ANR	2024106	Argument	cgroup		2024088	3					
ANR	2024107	Identifier	cgroup		2024088	0					
ANR	2024108	IfStatement	"if ( ! m_client -> track_family_via_cgroup ( pid , cgroup , response ) )"		2024088	2					
ANR	2024109	Condition	"! m_client -> track_family_via_cgroup ( pid , cgroup , response )"	268:5:8724:8780	2024088	0	True				
ANR	2024110	UnaryOperationExpression	"! m_client -> track_family_via_cgroup ( pid , cgroup , response )"		2024088	0					
ANR	2024111	UnaryOperator	!		2024088	0					
ANR	2024112	CallExpression	"m_client -> track_family_via_cgroup ( pid , cgroup , response )"		2024088	1					
ANR	2024113	Callee	m_client -> track_family_via_cgroup		2024088	0					
ANR	2024114	PtrMemberAccess	m_client -> track_family_via_cgroup		2024088	0					
ANR	2024115	Identifier	m_client		2024088	0					
ANR	2024116	Identifier	track_family_via_cgroup		2024088	1					
ANR	2024117	ArgumentList	pid		2024088	1					
ANR	2024118	Argument	pid		2024088	0					
ANR	2024119	Identifier	pid		2024088	0					
ANR	2024120	Argument	cgroup		2024088	1					
ANR	2024121	Identifier	cgroup		2024088	0					
ANR	2024122	Argument	response		2024088	2					
ANR	2024123	Identifier	response		2024088	0					
ANR	2024124	CompoundStatement		5:64:180:180	2024088	1					
ANR	2024125	ExpressionStatement	"dprintf ( D_ALWAYS , ""track_family_via_cgroup: ProcD communication error\\n"" )"	269:2:8787:8863	2024088	0	True				
ANR	2024126	CallExpression	"dprintf ( D_ALWAYS , ""track_family_via_cgroup: ProcD communication error\\n"" )"		2024088	0					
ANR	2024127	Callee	dprintf		2024088	0					
ANR	2024128	Identifier	dprintf		2024088	0					
ANR	2024129	ArgumentList	D_ALWAYS		2024088	1					
ANR	2024130	Argument	D_ALWAYS		2024088	0					
ANR	2024131	Identifier	D_ALWAYS		2024088	0					
ANR	2024132	Argument	"""track_family_via_cgroup: ProcD communication error\\n"""		2024088	1					
ANR	2024133	PrimaryExpression	"""track_family_via_cgroup: ProcD communication error\\n"""		2024088	0					
ANR	2024134	ReturnStatement	return false ;	271:2:8867:8879	2024088	1	True				
ANR	2024135	Identifier	false		2024088	0					
ANR	2024136	ReturnStatement	return response ;	273:1:8885:8900	2024088	3	True				
ANR	2024137	Identifier	response		2024088	0					
ANR	2024138	ReturnType	bool		2024088	1					
ANR	2024139	Identifier	ProcFamilyProxy :: track_family_via_cgroup		2024088	2					
ANR	2024140	ParameterList	"pid_t pid , const char * cgroup"		2024088	3					
ANR	2024141	Parameter	pid_t pid	263:41:8571:8579	2024088	0	True				
ANR	2024142	ParameterType	pid_t		2024088	0					
ANR	2024143	Identifier	pid		2024088	1					
ANR	2024144	Parameter	const char * cgroup	263:52:8582:8599	2024088	1	True				
ANR	2024145	ParameterType	const char *		2024088	0					
ANR	2024146	Identifier	cgroup		2024088	1					
ANR	2024147	CFGEntryNode	ENTRY		2024088		True				
ANR	2024148	CFGExitNode	EXIT		2024088		True				
ANR	2024149	Symbol	m_client -> track_family_via_cgroup		2024088						
ANR	2024150	Symbol	response		2024088						
ANR	2024151	Symbol	D_ALWAYS		2024088						
ANR	2024152	Symbol	false		2024088						
ANR	2024153	Symbol	pid		2024088						
ANR	2024154	Symbol	D_FULLDEBUG		2024088						
ANR	2024155	Symbol	cgroup		2024088						
ANR	2024156	Symbol	m_client		2024088						
ANR	2024157	Symbol	* m_client		2024088						
ANR	2024158	DeclStmt									
ANR	2024159	Decl							bool	bool	response
ANR	2024160	Function	ProcFamilyProxy :: signal_process	288:0:9174:9425							
ANR	2024161	FunctionDef	"ProcFamilyProxy :: signal_process (pid_t pid , int sig)"		2024160	0					
ANR	2024162	CompoundStatement		290:0:9231:9425	2024160	0					
ANR	2024163	IdentifierDeclStatement	bool response ;	291:1:9234:9247	2024160	0	True				
ANR	2024164	IdentifierDecl	response		2024160	0					
ANR	2024165	IdentifierDeclType	bool		2024160	0					
ANR	2024166	Identifier	response		2024160	1					
ANR	2024167	WhileStatement	"while ( ! m_client -> signal_process ( pid , sig , response ) )"		2024160	1					
ANR	2024168	Condition	"! m_client -> signal_process ( pid , sig , response )"	292:8:9257:9301	2024160	0	True				
ANR	2024169	UnaryOperationExpression	"! m_client -> signal_process ( pid , sig , response )"		2024160	0					
ANR	2024170	UnaryOperator	!		2024160	0					
ANR	2024171	CallExpression	"m_client -> signal_process ( pid , sig , response )"		2024160	1					
ANR	2024172	Callee	m_client -> signal_process		2024160	0					
ANR	2024173	PtrMemberAccess	m_client -> signal_process		2024160	0					
ANR	2024174	Identifier	m_client		2024160	0					
ANR	2024175	Identifier	signal_process		2024160	1					
ANR	2024176	ArgumentList	pid		2024160	1					
ANR	2024177	Argument	pid		2024160	0					
ANR	2024178	Identifier	pid		2024160	0					
ANR	2024179	Argument	sig		2024160	1					
ANR	2024180	Identifier	sig		2024160	0					
ANR	2024181	Argument	response		2024160	2					
ANR	2024182	Identifier	response		2024160	0					
ANR	2024183	CompoundStatement		3:55:72:72	2024160	1					
ANR	2024184	ExpressionStatement	"dprintf ( D_ALWAYS , ""signal_process: ProcD communication error\\n"" )"	293:2:9308:9372	2024160	0	True				
ANR	2024185	CallExpression	"dprintf ( D_ALWAYS , ""signal_process: ProcD communication error\\n"" )"		2024160	0					
ANR	2024186	Callee	dprintf		2024160	0					
ANR	2024187	Identifier	dprintf		2024160	0					
ANR	2024188	ArgumentList	D_ALWAYS		2024160	1					
ANR	2024189	Argument	D_ALWAYS		2024160	0					
ANR	2024190	Identifier	D_ALWAYS		2024160	0					
ANR	2024191	Argument	"""signal_process: ProcD communication error\\n"""		2024160	1					
ANR	2024192	PrimaryExpression	"""signal_process: ProcD communication error\\n"""		2024160	0					
ANR	2024193	ExpressionStatement	recover_from_procd_error ( )	294:2:9376:9402	2024160	1	True				
ANR	2024194	CallExpression	recover_from_procd_error ( )		2024160	0					
ANR	2024195	Callee	recover_from_procd_error		2024160	0					
ANR	2024196	Identifier	recover_from_procd_error		2024160	0					
ANR	2024197	ArgumentList			2024160	1					
ANR	2024198	ReturnStatement	return response ;	296:1:9408:9423	2024160	2	True				
ANR	2024199	Identifier	response		2024160	0					
ANR	2024200	ReturnType	bool		2024160	1					
ANR	2024201	Identifier	ProcFamilyProxy :: signal_process		2024160	2					
ANR	2024202	ParameterList	"pid_t pid , int sig"		2024160	3					
ANR	2024203	Parameter	pid_t pid	289:32:9211:9219	2024160	0	True				
ANR	2024204	ParameterType	pid_t		2024160	0					
ANR	2024205	Identifier	pid		2024160	1					
ANR	2024206	Parameter	int sig	289:43:9222:9228	2024160	1	True				
ANR	2024207	ParameterType	int		2024160	0					
ANR	2024208	Identifier	sig		2024160	1					
ANR	2024209	CFGEntryNode	ENTRY		2024160		True				
ANR	2024210	CFGExitNode	EXIT		2024160		True				
ANR	2024211	Symbol	sig		2024160						
ANR	2024212	Symbol	response		2024160						
ANR	2024213	Symbol	m_client -> signal_process		2024160						
ANR	2024214	Symbol	D_ALWAYS		2024160						
ANR	2024215	Symbol	pid		2024160						
ANR	2024216	Symbol	m_client		2024160						
ANR	2024217	Symbol	* m_client		2024160						
ANR	2024218	Function	ProcFamilyProxy :: kill_family	299:0:9428:9656							
ANR	2024219	FunctionDef	ProcFamilyProxy :: kill_family (pid_t pid)		2024218	0					
ANR	2024220	CompoundStatement		301:0:9473:9656	2024218	0					
ANR	2024221	IdentifierDeclStatement	bool response ;	302:1:9476:9489	2024218	0	True				
ANR	2024222	IdentifierDecl	response		2024218	0					
ANR	2024223	IdentifierDeclType	bool		2024218	0					
ANR	2024224	Identifier	response		2024218	1					
ANR	2024225	WhileStatement	"while ( ! m_client -> kill_family ( pid , response ) )"		2024218	1					
ANR	2024226	Condition	"! m_client -> kill_family ( pid , response )"	303:8:9499:9535	2024218	0	True				
ANR	2024227	UnaryOperationExpression	"! m_client -> kill_family ( pid , response )"		2024218	0					
ANR	2024228	UnaryOperator	!		2024218	0					
ANR	2024229	CallExpression	"m_client -> kill_family ( pid , response )"		2024218	1					
ANR	2024230	Callee	m_client -> kill_family		2024218	0					
ANR	2024231	PtrMemberAccess	m_client -> kill_family		2024218	0					
ANR	2024232	Identifier	m_client		2024218	0					
ANR	2024233	Identifier	kill_family		2024218	1					
ANR	2024234	ArgumentList	pid		2024218	1					
ANR	2024235	Argument	pid		2024218	0					
ANR	2024236	Identifier	pid		2024218	0					
ANR	2024237	Argument	response		2024218	1					
ANR	2024238	Identifier	response		2024218	0					
ANR	2024239	CompoundStatement		3:47:64:64	2024218	1					
ANR	2024240	ExpressionStatement	"dprintf ( D_ALWAYS , ""kill_family: ProcD communication error\\n"" )"	304:2:9542:9603	2024218	0	True				
ANR	2024241	CallExpression	"dprintf ( D_ALWAYS , ""kill_family: ProcD communication error\\n"" )"		2024218	0					
ANR	2024242	Callee	dprintf		2024218	0					
ANR	2024243	Identifier	dprintf		2024218	0					
ANR	2024244	ArgumentList	D_ALWAYS		2024218	1					
ANR	2024245	Argument	D_ALWAYS		2024218	0					
ANR	2024246	Identifier	D_ALWAYS		2024218	0					
ANR	2024247	Argument	"""kill_family: ProcD communication error\\n"""		2024218	1					
ANR	2024248	PrimaryExpression	"""kill_family: ProcD communication error\\n"""		2024218	0					
ANR	2024249	ExpressionStatement	recover_from_procd_error ( )	305:2:9607:9633	2024218	1	True				
ANR	2024250	CallExpression	recover_from_procd_error ( )		2024218	0					
ANR	2024251	Callee	recover_from_procd_error		2024218	0					
ANR	2024252	Identifier	recover_from_procd_error		2024218	0					
ANR	2024253	ArgumentList			2024218	1					
ANR	2024254	ReturnStatement	return response ;	307:1:9639:9654	2024218	2	True				
ANR	2024255	Identifier	response		2024218	0					
ANR	2024256	ReturnType	bool		2024218	1					
ANR	2024257	Identifier	ProcFamilyProxy :: kill_family		2024218	2					
ANR	2024258	ParameterList	pid_t pid		2024218	3					
ANR	2024259	Parameter	pid_t pid	300:29:9462:9470	2024218	0	True				
ANR	2024260	ParameterType	pid_t		2024218	0					
ANR	2024261	Identifier	pid		2024218	1					
ANR	2024262	CFGEntryNode	ENTRY		2024218		True				
ANR	2024263	CFGExitNode	EXIT		2024218		True				
ANR	2024264	Symbol	m_client -> kill_family		2024218						
ANR	2024265	Symbol	response		2024218						
ANR	2024266	Symbol	D_ALWAYS		2024218						
ANR	2024267	Symbol	pid		2024218						
ANR	2024268	Symbol	m_client		2024218						
ANR	2024269	Symbol	* m_client		2024218						
ANR	2024270	Function	ProcFamilyProxy :: suspend_family	310:0:9659:9896							
ANR	2024271	FunctionDef	ProcFamilyProxy :: suspend_family (pid_t pid)		2024270	0					
ANR	2024272	CompoundStatement		312:0:9707:9896	2024270	0					
ANR	2024273	IdentifierDeclStatement	bool response ;	313:1:9710:9723	2024270	0	True				
ANR	2024274	IdentifierDecl	response		2024270	0					
ANR	2024275	IdentifierDeclType	bool		2024270	0					
ANR	2024276	Identifier	response		2024270	1					
ANR	2024277	WhileStatement	"while ( ! m_client -> suspend_family ( pid , response ) )"		2024270	1					
ANR	2024278	Condition	"! m_client -> suspend_family ( pid , response )"	314:8:9733:9772	2024270	0	True				
ANR	2024279	UnaryOperationExpression	"! m_client -> suspend_family ( pid , response )"		2024270	0					
ANR	2024280	UnaryOperator	!		2024270	0					
ANR	2024281	CallExpression	"m_client -> suspend_family ( pid , response )"		2024270	1					
ANR	2024282	Callee	m_client -> suspend_family		2024270	0					
ANR	2024283	PtrMemberAccess	m_client -> suspend_family		2024270	0					
ANR	2024284	Identifier	m_client		2024270	0					
ANR	2024285	Identifier	suspend_family		2024270	1					
ANR	2024286	ArgumentList	pid		2024270	1					
ANR	2024287	Argument	pid		2024270	0					
ANR	2024288	Identifier	pid		2024270	0					
ANR	2024289	Argument	response		2024270	1					
ANR	2024290	Identifier	response		2024270	0					
ANR	2024291	CompoundStatement		3:50:67:67	2024270	1					
ANR	2024292	ExpressionStatement	"dprintf ( D_ALWAYS , ""suspend_family: ProcD communication error\\n"" )"	315:2:9779:9843	2024270	0	True				
ANR	2024293	CallExpression	"dprintf ( D_ALWAYS , ""suspend_family: ProcD communication error\\n"" )"		2024270	0					
ANR	2024294	Callee	dprintf		2024270	0					
ANR	2024295	Identifier	dprintf		2024270	0					
ANR	2024296	ArgumentList	D_ALWAYS		2024270	1					
ANR	2024297	Argument	D_ALWAYS		2024270	0					
ANR	2024298	Identifier	D_ALWAYS		2024270	0					
ANR	2024299	Argument	"""suspend_family: ProcD communication error\\n"""		2024270	1					
ANR	2024300	PrimaryExpression	"""suspend_family: ProcD communication error\\n"""		2024270	0					
ANR	2024301	ExpressionStatement	recover_from_procd_error ( )	316:2:9847:9873	2024270	1	True				
ANR	2024302	CallExpression	recover_from_procd_error ( )		2024270	0					
ANR	2024303	Callee	recover_from_procd_error		2024270	0					
ANR	2024304	Identifier	recover_from_procd_error		2024270	0					
ANR	2024305	ArgumentList			2024270	1					
ANR	2024306	ReturnStatement	return response ;	318:1:9879:9894	2024270	2	True				
ANR	2024307	Identifier	response		2024270	0					
ANR	2024308	ReturnType	bool		2024270	1					
ANR	2024309	Identifier	ProcFamilyProxy :: suspend_family		2024270	2					
ANR	2024310	ParameterList	pid_t pid		2024270	3					
ANR	2024311	Parameter	pid_t pid	311:32:9696:9704	2024270	0	True				
ANR	2024312	ParameterType	pid_t		2024270	0					
ANR	2024313	Identifier	pid		2024270	1					
ANR	2024314	CFGEntryNode	ENTRY		2024270		True				
ANR	2024315	CFGExitNode	EXIT		2024270		True				
ANR	2024316	Symbol	response		2024270						
ANR	2024317	Symbol	m_client -> suspend_family		2024270						
ANR	2024318	Symbol	D_ALWAYS		2024270						
ANR	2024319	Symbol	pid		2024270						
ANR	2024320	Symbol	* m_client		2024270						
ANR	2024321	Symbol	m_client		2024270						
ANR	2024322	Function	ProcFamilyProxy :: continue_family	321:0:9899:10136							
ANR	2024323	FunctionDef	ProcFamilyProxy :: continue_family (pid_t pid)		2024322	0					
ANR	2024324	CompoundStatement		323:0:9948:10136	2024322	0					
ANR	2024325	IdentifierDeclStatement	bool response ;	324:1:9951:9964	2024322	0	True				
ANR	2024326	IdentifierDecl	response		2024322	0					
ANR	2024327	IdentifierDeclType	bool		2024322	0					
ANR	2024328	Identifier	response		2024322	1					
ANR	2024329	IfStatement	"if ( ! m_client -> continue_family ( pid , response ) )"		2024322	1					
ANR	2024330	Condition	"! m_client -> continue_family ( pid , response )"	325:5:9971:10011	2024322	0	True				
ANR	2024331	UnaryOperationExpression	"! m_client -> continue_family ( pid , response )"		2024322	0					
ANR	2024332	UnaryOperator	!		2024322	0					
ANR	2024333	CallExpression	"m_client -> continue_family ( pid , response )"		2024322	1					
ANR	2024334	Callee	m_client -> continue_family		2024322	0					
ANR	2024335	PtrMemberAccess	m_client -> continue_family		2024322	0					
ANR	2024336	Identifier	m_client		2024322	0					
ANR	2024337	Identifier	continue_family		2024322	1					
ANR	2024338	ArgumentList	pid		2024322	1					
ANR	2024339	Argument	pid		2024322	0					
ANR	2024340	Identifier	pid		2024322	0					
ANR	2024341	Argument	response		2024322	1					
ANR	2024342	Identifier	response		2024322	0					
ANR	2024343	CompoundStatement		3:48:65:65	2024322	1					
ANR	2024344	ExpressionStatement	"dprintf ( D_ALWAYS , ""continue_family: ProcD communication error\\n"" )"	326:2:10018:10083	2024322	0	True				
ANR	2024345	CallExpression	"dprintf ( D_ALWAYS , ""continue_family: ProcD communication error\\n"" )"		2024322	0					
ANR	2024346	Callee	dprintf		2024322	0					
ANR	2024347	Identifier	dprintf		2024322	0					
ANR	2024348	ArgumentList	D_ALWAYS		2024322	1					
ANR	2024349	Argument	D_ALWAYS		2024322	0					
ANR	2024350	Identifier	D_ALWAYS		2024322	0					
ANR	2024351	Argument	"""continue_family: ProcD communication error\\n"""		2024322	1					
ANR	2024352	PrimaryExpression	"""continue_family: ProcD communication error\\n"""		2024322	0					
ANR	2024353	ExpressionStatement	recover_from_procd_error ( )	327:2:10087:10113	2024322	1	True				
ANR	2024354	CallExpression	recover_from_procd_error ( )		2024322	0					
ANR	2024355	Callee	recover_from_procd_error		2024322	0					
ANR	2024356	Identifier	recover_from_procd_error		2024322	0					
ANR	2024357	ArgumentList			2024322	1					
ANR	2024358	ReturnStatement	return response ;	329:1:10119:10134	2024322	2	True				
ANR	2024359	Identifier	response		2024322	0					
ANR	2024360	ReturnType	bool		2024322	1					
ANR	2024361	Identifier	ProcFamilyProxy :: continue_family		2024322	2					
ANR	2024362	ParameterList	pid_t pid		2024322	3					
ANR	2024363	Parameter	pid_t pid	322:33:9937:9945	2024322	0	True				
ANR	2024364	ParameterType	pid_t		2024322	0					
ANR	2024365	Identifier	pid		2024322	1					
ANR	2024366	CFGEntryNode	ENTRY		2024322		True				
ANR	2024367	CFGExitNode	EXIT		2024322		True				
ANR	2024368	Symbol	response		2024322						
ANR	2024369	Symbol	D_ALWAYS		2024322						
ANR	2024370	Symbol	pid		2024322						
ANR	2024371	Symbol	m_client -> continue_family		2024322						
ANR	2024372	Symbol	* m_client		2024322						
ANR	2024373	Symbol	m_client		2024322						
ANR	2024374	Function	ProcFamilyProxy :: unregister_family	332:0:10139:10385							
ANR	2024375	FunctionDef	ProcFamilyProxy :: unregister_family (pid_t pid)		2024374	0					
ANR	2024376	CompoundStatement		334:0:10190:10385	2024374	0					
ANR	2024377	IdentifierDeclStatement	bool response ;	335:1:10193:10206	2024374	0	True				
ANR	2024378	IdentifierDecl	response		2024374	0					
ANR	2024379	IdentifierDeclType	bool		2024374	0					
ANR	2024380	Identifier	response		2024374	1					
ANR	2024381	IfStatement	"if ( ! m_client -> unregister_family ( pid , response ) )"		2024374	1					
ANR	2024382	Condition	"! m_client -> unregister_family ( pid , response )"	336:5:10213:10255	2024374	0	True				
ANR	2024383	UnaryOperationExpression	"! m_client -> unregister_family ( pid , response )"		2024374	0					
ANR	2024384	UnaryOperator	!		2024374	0					
ANR	2024385	CallExpression	"m_client -> unregister_family ( pid , response )"		2024374	1					
ANR	2024386	Callee	m_client -> unregister_family		2024374	0					
ANR	2024387	PtrMemberAccess	m_client -> unregister_family		2024374	0					
ANR	2024388	Identifier	m_client		2024374	0					
ANR	2024389	Identifier	unregister_family		2024374	1					
ANR	2024390	ArgumentList	pid		2024374	1					
ANR	2024391	Argument	pid		2024374	0					
ANR	2024392	Identifier	pid		2024374	0					
ANR	2024393	Argument	response		2024374	1					
ANR	2024394	Identifier	response		2024374	0					
ANR	2024395	CompoundStatement		3:50:67:67	2024374	1					
ANR	2024396	ExpressionStatement	"dprintf ( D_ALWAYS , ""unregister_subfamily: ProcD communication error\\n"" )"	337:2:10262:10332	2024374	0	True				
ANR	2024397	CallExpression	"dprintf ( D_ALWAYS , ""unregister_subfamily: ProcD communication error\\n"" )"		2024374	0					
ANR	2024398	Callee	dprintf		2024374	0					
ANR	2024399	Identifier	dprintf		2024374	0					
ANR	2024400	ArgumentList	D_ALWAYS		2024374	1					
ANR	2024401	Argument	D_ALWAYS		2024374	0					
ANR	2024402	Identifier	D_ALWAYS		2024374	0					
ANR	2024403	Argument	"""unregister_subfamily: ProcD communication error\\n"""		2024374	1					
ANR	2024404	PrimaryExpression	"""unregister_subfamily: ProcD communication error\\n"""		2024374	0					
ANR	2024405	ExpressionStatement	recover_from_procd_error ( )	338:2:10336:10362	2024374	1	True				
ANR	2024406	CallExpression	recover_from_procd_error ( )		2024374	0					
ANR	2024407	Callee	recover_from_procd_error		2024374	0					
ANR	2024408	Identifier	recover_from_procd_error		2024374	0					
ANR	2024409	ArgumentList			2024374	1					
ANR	2024410	ReturnStatement	return response ;	340:1:10368:10383	2024374	2	True				
ANR	2024411	Identifier	response		2024374	0					
ANR	2024412	ReturnType	bool		2024374	1					
ANR	2024413	Identifier	ProcFamilyProxy :: unregister_family		2024374	2					
ANR	2024414	ParameterList	pid_t pid		2024374	3					
ANR	2024415	Parameter	pid_t pid	333:35:10179:10187	2024374	0	True				
ANR	2024416	ParameterType	pid_t		2024374	0					
ANR	2024417	Identifier	pid		2024374	1					
ANR	2024418	CFGEntryNode	ENTRY		2024374		True				
ANR	2024419	CFGExitNode	EXIT		2024374		True				
ANR	2024420	Symbol	response		2024374						
ANR	2024421	Symbol	D_ALWAYS		2024374						
ANR	2024422	Symbol	pid		2024374						
ANR	2024423	Symbol	m_client -> unregister_family		2024374						
ANR	2024424	Symbol	* m_client		2024374						
ANR	2024425	Symbol	m_client		2024374						
ANR	2024426	Function	ProcFamilyProxy :: use_glexec_for_family	343:0:10388:10757							
ANR	2024427	FunctionDef	"ProcFamilyProxy :: use_glexec_for_family (pid_t pid , const char * proxy)"		2024426	0					
ANR	2024428	CompoundStatement		345:0:10462:10757	2024426	0					
ANR	2024429	IdentifierDeclStatement	bool response ;	349:1:10567:10580	2024426	0	True				
ANR	2024430	IdentifierDecl	response		2024426	0					
ANR	2024431	IdentifierDeclType	bool		2024426	0					
ANR	2024432	Identifier	response		2024426	1					
ANR	2024433	IfStatement	"if ( ! m_client -> use_glexec_for_family ( pid , proxy , response ) )"		2024426	1					
ANR	2024434	Condition	"! m_client -> use_glexec_for_family ( pid , proxy , response )"	350:5:10587:10640	2024426	0	True				
ANR	2024435	UnaryOperationExpression	"! m_client -> use_glexec_for_family ( pid , proxy , response )"		2024426	0					
ANR	2024436	UnaryOperator	!		2024426	0					
ANR	2024437	CallExpression	"m_client -> use_glexec_for_family ( pid , proxy , response )"		2024426	1					
ANR	2024438	Callee	m_client -> use_glexec_for_family		2024426	0					
ANR	2024439	PtrMemberAccess	m_client -> use_glexec_for_family		2024426	0					
ANR	2024440	Identifier	m_client		2024426	0					
ANR	2024441	Identifier	use_glexec_for_family		2024426	1					
ANR	2024442	ArgumentList	pid		2024426	1					
ANR	2024443	Argument	pid		2024426	0					
ANR	2024444	Identifier	pid		2024426	0					
ANR	2024445	Argument	proxy		2024426	1					
ANR	2024446	Identifier	proxy		2024426	0					
ANR	2024447	Argument	response		2024426	2					
ANR	2024448	Identifier	response		2024426	0					
ANR	2024449	CompoundStatement		6:61:180:180	2024426	1					
ANR	2024450	ExpressionStatement	"dprintf ( D_ALWAYS , ""use_glexec_for_family: ProcD communication error\\n"" )"	351:2:10647:10718	2024426	0	True				
ANR	2024451	CallExpression	"dprintf ( D_ALWAYS , ""use_glexec_for_family: ProcD communication error\\n"" )"		2024426	0					
ANR	2024452	Callee	dprintf		2024426	0					
ANR	2024453	Identifier	dprintf		2024426	0					
ANR	2024454	ArgumentList	D_ALWAYS		2024426	1					
ANR	2024455	Argument	D_ALWAYS		2024426	0					
ANR	2024456	Identifier	D_ALWAYS		2024426	0					
ANR	2024457	Argument	"""use_glexec_for_family: ProcD communication error\\n"""		2024426	1					
ANR	2024458	PrimaryExpression	"""use_glexec_for_family: ProcD communication error\\n"""		2024426	0					
ANR	2024459	ReturnStatement	return false ;	352:2:10722:10734	2024426	1	True				
ANR	2024460	Identifier	false		2024426	0					
ANR	2024461	ReturnStatement	return response ;	354:1:10740:10755	2024426	2	True				
ANR	2024462	Identifier	response		2024426	0					
ANR	2024463	ReturnType	bool		2024426	1					
ANR	2024464	Identifier	ProcFamilyProxy :: use_glexec_for_family		2024426	2					
ANR	2024465	ParameterList	"pid_t pid , const char * proxy"		2024426	3					
ANR	2024466	Parameter	pid_t pid	344:39:10432:10440	2024426	0	True				
ANR	2024467	ParameterType	pid_t		2024426	0					
ANR	2024468	Identifier	pid		2024426	1					
ANR	2024469	Parameter	const char * proxy	344:50:10443:10459	2024426	1	True				
ANR	2024470	ParameterType	const char *		2024426	0					
ANR	2024471	Identifier	proxy		2024426	1					
ANR	2024472	CFGEntryNode	ENTRY		2024426		True				
ANR	2024473	CFGExitNode	EXIT		2024426		True				
ANR	2024474	Symbol	proxy		2024426						
ANR	2024475	Symbol	response		2024426						
ANR	2024476	Symbol	D_ALWAYS		2024426						
ANR	2024477	Symbol	false		2024426						
ANR	2024478	Symbol	m_client -> use_glexec_for_family		2024426						
ANR	2024479	Symbol	pid		2024426						
ANR	2024480	Symbol	* m_client		2024426						
ANR	2024481	Symbol	m_client		2024426						
ANR	2024482	Function	ProcFamilyProxy :: start_procd	357:0:10760:17421							
ANR	2024483	FunctionDef	ProcFamilyProxy :: start_procd ()		2024482	0					
ANR	2024484	CompoundStatement		359:0:10796:17421	2024482	0					
ANR	2024485	ExpressionStatement	ASSERT ( m_procd_pid == - 1 )	362:1:10834:10859	2024482	0	True				
ANR	2024486	CallExpression	ASSERT ( m_procd_pid == - 1 )		2024482	0					
ANR	2024487	Callee	ASSERT		2024482	0					
ANR	2024488	Identifier	ASSERT		2024482	0					
ANR	2024489	ArgumentList	m_procd_pid == - 1		2024482	1					
ANR	2024490	Argument	m_procd_pid == - 1		2024482	0					
ANR	2024491	EqualityExpression	m_procd_pid == - 1		2024482	0		==			
ANR	2024492	Identifier	m_procd_pid		2024482	0					
ANR	2024493	UnaryOperationExpression	- 1		2024482	1					
ANR	2024494	UnaryOperator	-		2024482	0					
ANR	2024495	PrimaryExpression	1		2024482	1					
ANR	2024496	IdentifierDeclStatement	MyString exe ;	366:1:10913:10925	2024482	1	True				
ANR	2024497	IdentifierDecl	exe		2024482	0					
ANR	2024498	IdentifierDeclType	MyString		2024482	0					
ANR	2024499	Identifier	exe		2024482	1					
ANR	2024500	IdentifierDeclStatement	ArgList args ;	367:1:10928:10940	2024482	2	True				
ANR	2024501	IdentifierDecl	args		2024482	0					
ANR	2024502	IdentifierDeclType	ArgList		2024482	0					
ANR	2024503	Identifier	args		2024482	1					
ANR	2024504	IdentifierDeclStatement	"char * path = param ( ""PROCD"" ) ;"	371:1:10975:11002	2024482	3	True				
ANR	2024505	IdentifierDecl	"* path = param ( ""PROCD"" )"		2024482	0					
ANR	2024506	IdentifierDeclType	char *		2024482	0					
ANR	2024507	Identifier	path		2024482	1					
ANR	2024508	AssignmentExpression	"* path = param ( ""PROCD"" )"		2024482	2		=			
ANR	2024509	Identifier	path		2024482	0					
ANR	2024510	CallExpression	"param ( ""PROCD"" )"		2024482	1					
ANR	2024511	Callee	param		2024482	0					
ANR	2024512	Identifier	param		2024482	0					
ANR	2024513	ArgumentList	"""PROCD"""		2024482	1					
ANR	2024514	Argument	"""PROCD"""		2024482	0					
ANR	2024515	PrimaryExpression	"""PROCD"""		2024482	0					
ANR	2024516	IfStatement	if ( path == NULL )		2024482	4					
ANR	2024517	Condition	path == NULL	372:5:11009:11020	2024482	0	True				
ANR	2024518	EqualityExpression	path == NULL		2024482	0		==			
ANR	2024519	Identifier	path		2024482	0					
ANR	2024520	Identifier	NULL		2024482	1					
ANR	2024521	CompoundStatement		14:19:226:226	2024482	1					
ANR	2024522	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: PROCD not defined in configuration\\n"" )"	373:2:11027:11097	2024482	0	True				
ANR	2024523	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: PROCD not defined in configuration\\n"" )"		2024482	0					
ANR	2024524	Callee	dprintf		2024482	0					
ANR	2024525	Identifier	dprintf		2024482	0					
ANR	2024526	ArgumentList	D_ALWAYS		2024482	1					
ANR	2024527	Argument	D_ALWAYS		2024482	0					
ANR	2024528	Identifier	D_ALWAYS		2024482	0					
ANR	2024529	Argument	"""start_procd: PROCD not defined in configuration\\n"""		2024482	1					
ANR	2024530	PrimaryExpression	"""start_procd: PROCD not defined in configuration\\n"""		2024482	0					
ANR	2024531	ReturnStatement	return false ;	374:2:11101:11113	2024482	1	True				
ANR	2024532	Identifier	false		2024482	0					
ANR	2024533	ExpressionStatement	exe = path	376:1:11119:11129	2024482	5	True				
ANR	2024534	AssignmentExpression	exe = path		2024482	0		=			
ANR	2024535	Identifier	exe		2024482	0					
ANR	2024536	Identifier	path		2024482	1					
ANR	2024537	ExpressionStatement	args . AppendArg ( condor_basename ( path ) )	377:1:11132:11169	2024482	6	True				
ANR	2024538	CallExpression	args . AppendArg ( condor_basename ( path ) )		2024482	0					
ANR	2024539	Callee	args . AppendArg		2024482	0					
ANR	2024540	MemberAccess	args . AppendArg		2024482	0					
ANR	2024541	Identifier	args		2024482	0					
ANR	2024542	Identifier	AppendArg		2024482	1					
ANR	2024543	ArgumentList	condor_basename ( path )		2024482	1					
ANR	2024544	Argument	condor_basename ( path )		2024482	0					
ANR	2024545	CallExpression	condor_basename ( path )		2024482	0					
ANR	2024546	Callee	condor_basename		2024482	0					
ANR	2024547	Identifier	condor_basename		2024482	0					
ANR	2024548	ArgumentList	path		2024482	1					
ANR	2024549	Argument	path		2024482	0					
ANR	2024550	Identifier	path		2024482	0					
ANR	2024551	ExpressionStatement	free ( path )	378:1:11172:11182	2024482	7	True				
ANR	2024552	CallExpression	free ( path )		2024482	0					
ANR	2024553	Callee	free		2024482	0					
ANR	2024554	Identifier	free		2024482	0					
ANR	2024555	ArgumentList	path		2024482	1					
ANR	2024556	Argument	path		2024482	0					
ANR	2024557	Identifier	path		2024482	0					
ANR	2024558	ExpressionStatement	"args . AppendArg ( ""-A"" )"	382:1:11214:11234	2024482	8	True				
ANR	2024559	CallExpression	"args . AppendArg ( ""-A"" )"		2024482	0					
ANR	2024560	Callee	args . AppendArg		2024482	0					
ANR	2024561	MemberAccess	args . AppendArg		2024482	0					
ANR	2024562	Identifier	args		2024482	0					
ANR	2024563	Identifier	AppendArg		2024482	1					
ANR	2024564	ArgumentList	"""-A"""		2024482	1					
ANR	2024565	Argument	"""-A"""		2024482	0					
ANR	2024566	PrimaryExpression	"""-A"""		2024482	0					
ANR	2024567	ExpressionStatement	args . AppendArg ( m_procd_addr )	383:1:11237:11265	2024482	9	True				
ANR	2024568	CallExpression	args . AppendArg ( m_procd_addr )		2024482	0					
ANR	2024569	Callee	args . AppendArg		2024482	0					
ANR	2024570	MemberAccess	args . AppendArg		2024482	0					
ANR	2024571	Identifier	args		2024482	0					
ANR	2024572	Identifier	AppendArg		2024482	1					
ANR	2024573	ArgumentList	m_procd_addr		2024482	1					
ANR	2024574	Argument	m_procd_addr		2024482	0					
ANR	2024575	Identifier	m_procd_addr		2024482	0					
ANR	2024576	IfStatement	if ( m_procd_log . Length ( ) > 0 )		2024482	10					
ANR	2024577	Condition	m_procd_log . Length ( ) > 0	387:5:11311:11334	2024482	0	True				
ANR	2024578	RelationalExpression	m_procd_log . Length ( ) > 0		2024482	0		>			
ANR	2024579	CallExpression	m_procd_log . Length ( )		2024482	0					
ANR	2024580	Callee	m_procd_log . Length		2024482	0					
ANR	2024581	MemberAccess	m_procd_log . Length		2024482	0					
ANR	2024582	Identifier	m_procd_log		2024482	0					
ANR	2024583	Identifier	Length		2024482	1					
ANR	2024584	ArgumentList			2024482	1					
ANR	2024585	PrimaryExpression	0		2024482	1					
ANR	2024586	CompoundStatement		29:31:540:540	2024482	1					
ANR	2024587	ExpressionStatement	"args . AppendArg ( ""-L"" )"	388:2:11341:11361	2024482	0	True				
ANR	2024588	CallExpression	"args . AppendArg ( ""-L"" )"		2024482	0					
ANR	2024589	Callee	args . AppendArg		2024482	0					
ANR	2024590	MemberAccess	args . AppendArg		2024482	0					
ANR	2024591	Identifier	args		2024482	0					
ANR	2024592	Identifier	AppendArg		2024482	1					
ANR	2024593	ArgumentList	"""-L"""		2024482	1					
ANR	2024594	Argument	"""-L"""		2024482	0					
ANR	2024595	PrimaryExpression	"""-L"""		2024482	0					
ANR	2024596	ExpressionStatement	args . AppendArg ( m_procd_log )	389:2:11365:11392	2024482	1	True				
ANR	2024597	CallExpression	args . AppendArg ( m_procd_log )		2024482	0					
ANR	2024598	Callee	args . AppendArg		2024482	0					
ANR	2024599	MemberAccess	args . AppendArg		2024482	0					
ANR	2024600	Identifier	args		2024482	0					
ANR	2024601	Identifier	AppendArg		2024482	1					
ANR	2024602	ArgumentList	m_procd_log		2024482	1					
ANR	2024603	Argument	m_procd_log		2024482	0					
ANR	2024604	Identifier	m_procd_log		2024482	0					
ANR	2024605	IdentifierDeclStatement	"char * procd_log_size = param ( ""MAX_PROCD_LOG"" ) ;"	394:1:11443:11488	2024482	11	True				
ANR	2024606	IdentifierDecl	"* procd_log_size = param ( ""MAX_PROCD_LOG"" )"		2024482	0					
ANR	2024607	IdentifierDeclType	char *		2024482	0					
ANR	2024608	Identifier	procd_log_size		2024482	1					
ANR	2024609	AssignmentExpression	"* procd_log_size = param ( ""MAX_PROCD_LOG"" )"		2024482	2		=			
ANR	2024610	Identifier	procd_log_size		2024482	0					
ANR	2024611	CallExpression	"param ( ""MAX_PROCD_LOG"" )"		2024482	1					
ANR	2024612	Callee	param		2024482	0					
ANR	2024613	Identifier	param		2024482	0					
ANR	2024614	ArgumentList	"""MAX_PROCD_LOG"""		2024482	1					
ANR	2024615	Argument	"""MAX_PROCD_LOG"""		2024482	0					
ANR	2024616	PrimaryExpression	"""MAX_PROCD_LOG"""		2024482	0					
ANR	2024617	IfStatement	if ( procd_log_size != NULL )		2024482	12					
ANR	2024618	Condition	procd_log_size != NULL	395:5:11495:11516	2024482	0	True				
ANR	2024619	EqualityExpression	procd_log_size != NULL		2024482	0		!=			
ANR	2024620	Identifier	procd_log_size		2024482	0					
ANR	2024621	Identifier	NULL		2024482	1					
ANR	2024622	CompoundStatement		37:29:722:722	2024482	1					
ANR	2024623	ExpressionStatement	"args . AppendArg ( ""-R"" )"	396:2:11523:11543	2024482	0	True				
ANR	2024624	CallExpression	"args . AppendArg ( ""-R"" )"		2024482	0					
ANR	2024625	Callee	args . AppendArg		2024482	0					
ANR	2024626	MemberAccess	args . AppendArg		2024482	0					
ANR	2024627	Identifier	args		2024482	0					
ANR	2024628	Identifier	AppendArg		2024482	1					
ANR	2024629	ArgumentList	"""-R"""		2024482	1					
ANR	2024630	Argument	"""-R"""		2024482	0					
ANR	2024631	PrimaryExpression	"""-R"""		2024482	0					
ANR	2024632	ExpressionStatement	args . AppendArg ( procd_log_size )	397:2:11547:11577	2024482	1	True				
ANR	2024633	CallExpression	args . AppendArg ( procd_log_size )		2024482	0					
ANR	2024634	Callee	args . AppendArg		2024482	0					
ANR	2024635	MemberAccess	args . AppendArg		2024482	0					
ANR	2024636	Identifier	args		2024482	0					
ANR	2024637	Identifier	AppendArg		2024482	1					
ANR	2024638	ArgumentList	procd_log_size		2024482	1					
ANR	2024639	Argument	procd_log_size		2024482	0					
ANR	2024640	Identifier	procd_log_size		2024482	0					
ANR	2024641	ExpressionStatement	free ( procd_log_size )	398:2:11581:11601	2024482	2	True				
ANR	2024642	CallExpression	free ( procd_log_size )		2024482	0					
ANR	2024643	Callee	free		2024482	0					
ANR	2024644	Identifier	free		2024482	0					
ANR	2024645	ArgumentList	procd_log_size		2024482	1					
ANR	2024646	Argument	procd_log_size		2024482	0					
ANR	2024647	Identifier	procd_log_size		2024482	0					
ANR	2024648	IdentifierDeclStatement	"char * max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" ) ;"	404:1:11703:11769	2024482	13	True				
ANR	2024649	IdentifierDecl	"* max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		2024482	0					
ANR	2024650	IdentifierDeclType	char *		2024482	0					
ANR	2024651	Identifier	max_snapshot_interval		2024482	1					
ANR	2024652	AssignmentExpression	"* max_snapshot_interval = param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		2024482	2		=			
ANR	2024653	Identifier	max_snapshot_interval		2024482	0					
ANR	2024654	CallExpression	"param ( ""PROCD_MAX_SNAPSHOT_INTERVAL"" )"		2024482	1					
ANR	2024655	Callee	param		2024482	0					
ANR	2024656	Identifier	param		2024482	0					
ANR	2024657	ArgumentList	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		2024482	1					
ANR	2024658	Argument	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		2024482	0					
ANR	2024659	PrimaryExpression	"""PROCD_MAX_SNAPSHOT_INTERVAL"""		2024482	0					
ANR	2024660	IfStatement	if ( max_snapshot_interval != NULL )		2024482	14					
ANR	2024661	Condition	max_snapshot_interval != NULL	405:5:11776:11804	2024482	0	True				
ANR	2024662	EqualityExpression	max_snapshot_interval != NULL		2024482	0		!=			
ANR	2024663	Identifier	max_snapshot_interval		2024482	0					
ANR	2024664	Identifier	NULL		2024482	1					
ANR	2024665	CompoundStatement		47:36:1010:1010	2024482	1					
ANR	2024666	ExpressionStatement	"args . AppendArg ( ""-S"" )"	406:2:11811:11831	2024482	0	True				
ANR	2024667	CallExpression	"args . AppendArg ( ""-S"" )"		2024482	0					
ANR	2024668	Callee	args . AppendArg		2024482	0					
ANR	2024669	MemberAccess	args . AppendArg		2024482	0					
ANR	2024670	Identifier	args		2024482	0					
ANR	2024671	Identifier	AppendArg		2024482	1					
ANR	2024672	ArgumentList	"""-S"""		2024482	1					
ANR	2024673	Argument	"""-S"""		2024482	0					
ANR	2024674	PrimaryExpression	"""-S"""		2024482	0					
ANR	2024675	ExpressionStatement	args . AppendArg ( max_snapshot_interval )	407:2:11835:11872	2024482	1	True				
ANR	2024676	CallExpression	args . AppendArg ( max_snapshot_interval )		2024482	0					
ANR	2024677	Callee	args . AppendArg		2024482	0					
ANR	2024678	MemberAccess	args . AppendArg		2024482	0					
ANR	2024679	Identifier	args		2024482	0					
ANR	2024680	Identifier	AppendArg		2024482	1					
ANR	2024681	ArgumentList	max_snapshot_interval		2024482	1					
ANR	2024682	Argument	max_snapshot_interval		2024482	0					
ANR	2024683	Identifier	max_snapshot_interval		2024482	0					
ANR	2024684	ExpressionStatement	free ( max_snapshot_interval )	408:2:11876:11903	2024482	2	True				
ANR	2024685	CallExpression	free ( max_snapshot_interval )		2024482	0					
ANR	2024686	Callee	free		2024482	0					
ANR	2024687	Identifier	free		2024482	0					
ANR	2024688	ArgumentList	max_snapshot_interval		2024482	1					
ANR	2024689	Argument	max_snapshot_interval		2024482	0					
ANR	2024690	Identifier	max_snapshot_interval		2024482	0					
ANR	2024691	IdentifierDeclStatement	"bool debug = param_boolean ( ""PROCD_DEBUG"" , false ) ;"	414:1:11990:12038	2024482	15	True				
ANR	2024692	IdentifierDecl	"debug = param_boolean ( ""PROCD_DEBUG"" , false )"		2024482	0					
ANR	2024693	IdentifierDeclType	bool		2024482	0					
ANR	2024694	Identifier	debug		2024482	1					
ANR	2024695	AssignmentExpression	"debug = param_boolean ( ""PROCD_DEBUG"" , false )"		2024482	2		=			
ANR	2024696	Identifier	debug		2024482	0					
ANR	2024697	CallExpression	"param_boolean ( ""PROCD_DEBUG"" , false )"		2024482	1					
ANR	2024698	Callee	param_boolean		2024482	0					
ANR	2024699	Identifier	param_boolean		2024482	0					
ANR	2024700	ArgumentList	"""PROCD_DEBUG"""		2024482	1					
ANR	2024701	Argument	"""PROCD_DEBUG"""		2024482	0					
ANR	2024702	PrimaryExpression	"""PROCD_DEBUG"""		2024482	0					
ANR	2024703	Argument	false		2024482	1					
ANR	2024704	Identifier	false		2024482	0					
ANR	2024705	IfStatement	if ( debug )		2024482	16					
ANR	2024706	Condition	debug	415:5:12045:12049	2024482	0	True				
ANR	2024707	Identifier	debug		2024482	0					
ANR	2024708	CompoundStatement		57:12:1255:1255	2024482	1					
ANR	2024709	ExpressionStatement	"args . AppendArg ( ""-D"" )"	416:2:12056:12076	2024482	0	True				
ANR	2024710	CallExpression	"args . AppendArg ( ""-D"" )"		2024482	0					
ANR	2024711	Callee	args . AppendArg		2024482	0					
ANR	2024712	MemberAccess	args . AppendArg		2024482	0					
ANR	2024713	Identifier	args		2024482	0					
ANR	2024714	Identifier	AppendArg		2024482	1					
ANR	2024715	ArgumentList	"""-D"""		2024482	1					
ANR	2024716	Argument	"""-D"""		2024482	0					
ANR	2024717	PrimaryExpression	"""-D"""		2024482	0					
ANR	2024718	ExpressionStatement	"args . AppendArg ( ""-C"" )"	423:1:12192:12212	2024482	17	True				
ANR	2024719	CallExpression	"args . AppendArg ( ""-C"" )"		2024482	0					
ANR	2024720	Callee	args . AppendArg		2024482	0					
ANR	2024721	MemberAccess	args . AppendArg		2024482	0					
ANR	2024722	Identifier	args		2024482	0					
ANR	2024723	Identifier	AppendArg		2024482	1					
ANR	2024724	ArgumentList	"""-C"""		2024482	1					
ANR	2024725	Argument	"""-C"""		2024482	0					
ANR	2024726	PrimaryExpression	"""-C"""		2024482	0					
ANR	2024727	ExpressionStatement	args . AppendArg ( get_condor_uid ( ) )	424:1:12215:12247	2024482	18	True				
ANR	2024728	CallExpression	args . AppendArg ( get_condor_uid ( ) )		2024482	0					
ANR	2024729	Callee	args . AppendArg		2024482	0					
ANR	2024730	MemberAccess	args . AppendArg		2024482	0					
ANR	2024731	Identifier	args		2024482	0					
ANR	2024732	Identifier	AppendArg		2024482	1					
ANR	2024733	ArgumentList	get_condor_uid ( )		2024482	1					
ANR	2024734	Argument	get_condor_uid ( )		2024482	0					
ANR	2024735	CallExpression	get_condor_uid ( )		2024482	0					
ANR	2024736	Callee	get_condor_uid		2024482	0					
ANR	2024737	Identifier	get_condor_uid		2024482	0					
ANR	2024738	ArgumentList			2024482	1					
ANR	2024739	IdentifierDeclStatement	"char * softkill_path = param ( ""WINDOWS_SOFTKILL"" ) ;"	431:1:12365:12412	2024482	19	True				
ANR	2024740	IdentifierDecl	"* softkill_path = param ( ""WINDOWS_SOFTKILL"" )"		2024482	0					
ANR	2024741	IdentifierDeclType	char *		2024482	0					
ANR	2024742	Identifier	softkill_path		2024482	1					
ANR	2024743	AssignmentExpression	"* softkill_path = param ( ""WINDOWS_SOFTKILL"" )"		2024482	2		=			
ANR	2024744	Identifier	softkill_path		2024482	0					
ANR	2024745	CallExpression	"param ( ""WINDOWS_SOFTKILL"" )"		2024482	1					
ANR	2024746	Callee	param		2024482	0					
ANR	2024747	Identifier	param		2024482	0					
ANR	2024748	ArgumentList	"""WINDOWS_SOFTKILL"""		2024482	1					
ANR	2024749	Argument	"""WINDOWS_SOFTKILL"""		2024482	0					
ANR	2024750	PrimaryExpression	"""WINDOWS_SOFTKILL"""		2024482	0					
ANR	2024751	IfStatement	if ( softkill_path == NULL )		2024482	20					
ANR	2024752	Condition	softkill_path == NULL	432:6:12420:12440	2024482	0	True				
ANR	2024753	EqualityExpression	softkill_path == NULL		2024482	0		==			
ANR	2024754	Identifier	softkill_path		2024482	0					
ANR	2024755	Identifier	NULL		2024482	1					
ANR	2024756	CompoundStatement		74:30:1647:1647	2024482	1					
ANR	2024757	Statement	dprintf	433:2:12448:12454	2024482	0	True				
ANR	2024758	Statement	(	433:9:12455:12455	2024482	1	True				
ANR	2024759	Statement	D_ALWAYS	433:10:12456:12463	2024482	2	True				
ANR	2024760	Statement	","	433:18:12464:12464	2024482	3	True				
ANR	2024761	Statement	"""WINDOWS_SOFTKILL undefined; """	434:10:12476:12505	2024482	4	True				
ANR	2024762	Statement	"""ProcD won't be able to send WM_CLOSE to jobs\\n"""	435:11:12518:12565	2024482	5	True				
ANR	2024763	Statement	)	435:59:12566:12566	2024482	6	True				
ANR	2024764	ExpressionStatement		435:60:12567:12567	2024482	7	True				
ANR	2024765	ElseStatement	else		2024482	0					
ANR	2024766	CompoundStatement		79:6:1781:1781	2024482	0					
ANR	2024767	ExpressionStatement	"args . AppendArg ( ""-K"" )"	438:2:12582:12602	2024482	0	True				
ANR	2024768	CallExpression	"args . AppendArg ( ""-K"" )"		2024482	0					
ANR	2024769	Callee	args . AppendArg		2024482	0					
ANR	2024770	MemberAccess	args . AppendArg		2024482	0					
ANR	2024771	Identifier	args		2024482	0					
ANR	2024772	Identifier	AppendArg		2024482	1					
ANR	2024773	ArgumentList	"""-K"""		2024482	1					
ANR	2024774	Argument	"""-K"""		2024482	0					
ANR	2024775	PrimaryExpression	"""-K"""		2024482	0					
ANR	2024776	ExpressionStatement	args . AppendArg ( softkill_path )	439:2:12606:12635	2024482	1	True				
ANR	2024777	CallExpression	args . AppendArg ( softkill_path )		2024482	0					
ANR	2024778	Callee	args . AppendArg		2024482	0					
ANR	2024779	MemberAccess	args . AppendArg		2024482	0					
ANR	2024780	Identifier	args		2024482	0					
ANR	2024781	Identifier	AppendArg		2024482	1					
ANR	2024782	ArgumentList	softkill_path		2024482	1					
ANR	2024783	Argument	softkill_path		2024482	0					
ANR	2024784	Identifier	softkill_path		2024482	0					
ANR	2024785	ExpressionStatement	free ( softkill_path )	440:2:12639:12658	2024482	2	True				
ANR	2024786	CallExpression	free ( softkill_path )		2024482	0					
ANR	2024787	Callee	free		2024482	0					
ANR	2024788	Identifier	free		2024482	0					
ANR	2024789	ArgumentList	softkill_path		2024482	1					
ANR	2024790	Argument	softkill_path		2024482	0					
ANR	2024791	Identifier	softkill_path		2024482	0					
ANR	2024792	IfStatement	"if ( param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false ) )"		2024482	21					
ANR	2024793	Condition	"param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false )"	448:5:12783:12830	2024482	0	True				
ANR	2024794	CallExpression	"param_boolean ( ""USE_GID_PROCESS_TRACKING"" , false )"		2024482	0					
ANR	2024795	Callee	param_boolean		2024482	0					
ANR	2024796	Identifier	param_boolean		2024482	0					
ANR	2024797	ArgumentList	"""USE_GID_PROCESS_TRACKING"""		2024482	1					
ANR	2024798	Argument	"""USE_GID_PROCESS_TRACKING"""		2024482	0					
ANR	2024799	PrimaryExpression	"""USE_GID_PROCESS_TRACKING"""		2024482	0					
ANR	2024800	Argument	false		2024482	1					
ANR	2024801	Identifier	false		2024482	0					
ANR	2024802	CompoundStatement		102:2:2483:2542	2024482	1					
ANR	2024803	IfStatement	if ( ! can_switch_ids ( ) && ! privsep_enabled ( ) )		2024482	0					
ANR	2024804	Condition	! can_switch_ids ( ) && ! privsep_enabled ( )	449:6:12841:12879	2024482	0	True				
ANR	2024805	AndExpression	! can_switch_ids ( ) && ! privsep_enabled ( )		2024482	0		&&			
ANR	2024806	UnaryOperationExpression	! can_switch_ids ( )		2024482	0					
ANR	2024807	UnaryOperator	!		2024482	0					
ANR	2024808	CallExpression	can_switch_ids ( )		2024482	1					
ANR	2024809	Callee	can_switch_ids		2024482	0					
ANR	2024810	Identifier	can_switch_ids		2024482	0					
ANR	2024811	ArgumentList			2024482	1					
ANR	2024812	UnaryOperationExpression	! privsep_enabled ( )		2024482	1					
ANR	2024813	UnaryOperator	!		2024482	0					
ANR	2024814	CallExpression	privsep_enabled ( )		2024482	1					
ANR	2024815	Callee	privsep_enabled		2024482	0					
ANR	2024816	Identifier	privsep_enabled		2024482	0					
ANR	2024817	ArgumentList			2024482	1					
ANR	2024818	CompoundStatement		91:47:2085:2085	2024482	1					
ANR	2024819	Statement	EXCEPT	450:3:12887:12892	2024482	0	True				
ANR	2024820	Statement	(	450:9:12893:12893	2024482	1	True				
ANR	2024821	Statement	"""USE_GID_PROCESS_TRACKING enabled, but can't modify """	450:10:12894:12946	2024482	2	True				
ANR	2024822	Statement	"""the group list of our children unless running as """	451:14:12962:13012	2024482	3	True				
ANR	2024823	Statement	"""root or using PrivSep"""	452:14:13028:13050	2024482	4	True				
ANR	2024824	Statement	)	452:37:13051:13051	2024482	5	True				
ANR	2024825	ExpressionStatement		452:38:13052:13052	2024482	6	True				
ANR	2024826	IdentifierDeclStatement	"int min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 ) ;"	454:2:13060:13119	2024482	1	True				
ANR	2024827	IdentifierDecl	"min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 )"		2024482	0					
ANR	2024828	IdentifierDeclType	int		2024482	0					
ANR	2024829	Identifier	min_tracking_gid		2024482	1					
ANR	2024830	AssignmentExpression	"min_tracking_gid = param_integer ( ""MIN_TRACKING_GID"" , 0 )"		2024482	2		=			
ANR	2024831	Identifier	min_tracking_gid		2024482	0					
ANR	2024832	CallExpression	"param_integer ( ""MIN_TRACKING_GID"" , 0 )"		2024482	1					
ANR	2024833	Callee	param_integer		2024482	0					
ANR	2024834	Identifier	param_integer		2024482	0					
ANR	2024835	ArgumentList	"""MIN_TRACKING_GID"""		2024482	1					
ANR	2024836	Argument	"""MIN_TRACKING_GID"""		2024482	0					
ANR	2024837	PrimaryExpression	"""MIN_TRACKING_GID"""		2024482	0					
ANR	2024838	Argument	0		2024482	1					
ANR	2024839	PrimaryExpression	0		2024482	0					
ANR	2024840	IfStatement	if ( min_tracking_gid == 0 )		2024482	2					
ANR	2024841	Condition	min_tracking_gid == 0	455:6:13127:13147	2024482	0	True				
ANR	2024842	EqualityExpression	min_tracking_gid == 0		2024482	0		==			
ANR	2024843	Identifier	min_tracking_gid		2024482	0					
ANR	2024844	PrimaryExpression	0		2024482	1					
ANR	2024845	CompoundStatement		97:29:2353:2353	2024482	1					
ANR	2024846	Statement	EXCEPT	456:3:13155:13160	2024482	0	True				
ANR	2024847	Statement	(	456:9:13161:13161	2024482	1	True				
ANR	2024848	Statement	"""USE_GID_PROCESS_TRACKING enabled, """	456:10:13162:13197	2024482	2	True				
ANR	2024849	Statement	"""but MIN_TRACKING_GID is %d\\n"""	457:14:13213:13242	2024482	3	True				
ANR	2024850	Statement	","	457:44:13243:13243	2024482	4	True				
ANR	2024851	Statement	min_tracking_gid	458:10:13255:13270	2024482	5	True				
ANR	2024852	Statement	)	458:26:13271:13271	2024482	6	True				
ANR	2024853	ExpressionStatement		458:27:13272:13272	2024482	7	True				
ANR	2024854	IdentifierDeclStatement	"int max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 ) ;"	460:2:13280:13339	2024482	3	True				
ANR	2024855	IdentifierDecl	"max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 )"		2024482	0					
ANR	2024856	IdentifierDeclType	int		2024482	0					
ANR	2024857	Identifier	max_tracking_gid		2024482	1					
ANR	2024858	AssignmentExpression	"max_tracking_gid = param_integer ( ""MAX_TRACKING_GID"" , 0 )"		2024482	2		=			
ANR	2024859	Identifier	max_tracking_gid		2024482	0					
ANR	2024860	CallExpression	"param_integer ( ""MAX_TRACKING_GID"" , 0 )"		2024482	1					
ANR	2024861	Callee	param_integer		2024482	0					
ANR	2024862	Identifier	param_integer		2024482	0					
ANR	2024863	ArgumentList	"""MAX_TRACKING_GID"""		2024482	1					
ANR	2024864	Argument	"""MAX_TRACKING_GID"""		2024482	0					
ANR	2024865	PrimaryExpression	"""MAX_TRACKING_GID"""		2024482	0					
ANR	2024866	Argument	0		2024482	1					
ANR	2024867	PrimaryExpression	0		2024482	0					
ANR	2024868	IfStatement	if ( max_tracking_gid == 0 )		2024482	4					
ANR	2024869	Condition	max_tracking_gid == 0	461:6:13347:13367	2024482	0	True				
ANR	2024870	EqualityExpression	max_tracking_gid == 0		2024482	0		==			
ANR	2024871	Identifier	max_tracking_gid		2024482	0					
ANR	2024872	PrimaryExpression	0		2024482	1					
ANR	2024873	CompoundStatement		103:29:2573:2573	2024482	1					
ANR	2024874	Statement	EXCEPT	462:3:13375:13380	2024482	0	True				
ANR	2024875	Statement	(	462:9:13381:13381	2024482	1	True				
ANR	2024876	Statement	"""USE_GID_PROCESS_TRACKING enabled, """	462:10:13382:13417	2024482	2	True				
ANR	2024877	Statement	"""but MAX_TRACKING_GID is %d\\n"""	463:14:13433:13462	2024482	3	True				
ANR	2024878	Statement	","	463:44:13463:13463	2024482	4	True				
ANR	2024879	Statement	max_tracking_gid	464:10:13475:13490	2024482	5	True				
ANR	2024880	Statement	)	464:26:13491:13491	2024482	6	True				
ANR	2024881	ExpressionStatement		464:27:13492:13492	2024482	7	True				
ANR	2024882	IfStatement	if ( min_tracking_gid > max_tracking_gid )		2024482	5					
ANR	2024883	Condition	min_tracking_gid > max_tracking_gid	466:6:13504:13538	2024482	0	True				
ANR	2024884	RelationalExpression	min_tracking_gid > max_tracking_gid		2024482	0		>			
ANR	2024885	Identifier	min_tracking_gid		2024482	0					
ANR	2024886	Identifier	max_tracking_gid		2024482	1					
ANR	2024887	CompoundStatement		108:43:2744:2744	2024482	1					
ANR	2024888	ExpressionStatement	"EXCEPT ( ""invalid tracking gid range: %d - %d\\n"" , min_tracking_gid , max_tracking_gid )"	467:3:13546:13649	2024482	0	True				
ANR	2024889	CallExpression	"EXCEPT ( ""invalid tracking gid range: %d - %d\\n"" , min_tracking_gid , max_tracking_gid )"		2024482	0					
ANR	2024890	Callee	EXCEPT		2024482	0					
ANR	2024891	Identifier	EXCEPT		2024482	0					
ANR	2024892	ArgumentList	"""invalid tracking gid range: %d - %d\\n"""		2024482	1					
ANR	2024893	Argument	"""invalid tracking gid range: %d - %d\\n"""		2024482	0					
ANR	2024894	PrimaryExpression	"""invalid tracking gid range: %d - %d\\n"""		2024482	0					
ANR	2024895	Argument	min_tracking_gid		2024482	1					
ANR	2024896	Identifier	min_tracking_gid		2024482	0					
ANR	2024897	Argument	max_tracking_gid		2024482	2					
ANR	2024898	Identifier	max_tracking_gid		2024482	0					
ANR	2024899	ExpressionStatement	"args . AppendArg ( ""-G"" )"	471:2:13657:13677	2024482	6	True				
ANR	2024900	CallExpression	"args . AppendArg ( ""-G"" )"		2024482	0					
ANR	2024901	Callee	args . AppendArg		2024482	0					
ANR	2024902	MemberAccess	args . AppendArg		2024482	0					
ANR	2024903	Identifier	args		2024482	0					
ANR	2024904	Identifier	AppendArg		2024482	1					
ANR	2024905	ArgumentList	"""-G"""		2024482	1					
ANR	2024906	Argument	"""-G"""		2024482	0					
ANR	2024907	PrimaryExpression	"""-G"""		2024482	0					
ANR	2024908	ExpressionStatement	args . AppendArg ( min_tracking_gid )	472:2:13681:13713	2024482	7	True				
ANR	2024909	CallExpression	args . AppendArg ( min_tracking_gid )		2024482	0					
ANR	2024910	Callee	args . AppendArg		2024482	0					
ANR	2024911	MemberAccess	args . AppendArg		2024482	0					
ANR	2024912	Identifier	args		2024482	0					
ANR	2024913	Identifier	AppendArg		2024482	1					
ANR	2024914	ArgumentList	min_tracking_gid		2024482	1					
ANR	2024915	Argument	min_tracking_gid		2024482	0					
ANR	2024916	Identifier	min_tracking_gid		2024482	0					
ANR	2024917	ExpressionStatement	args . AppendArg ( max_tracking_gid )	473:2:13717:13749	2024482	8	True				
ANR	2024918	CallExpression	args . AppendArg ( max_tracking_gid )		2024482	0					
ANR	2024919	Callee	args . AppendArg		2024482	0					
ANR	2024920	MemberAccess	args . AppendArg		2024482	0					
ANR	2024921	Identifier	args		2024482	0					
ANR	2024922	Identifier	AppendArg		2024482	1					
ANR	2024923	ArgumentList	max_tracking_gid		2024482	1					
ANR	2024924	Argument	max_tracking_gid		2024482	0					
ANR	2024925	Identifier	max_tracking_gid		2024482	0					
ANR	2024926	IfStatement	"if ( param_boolean ( ""GLEXEC_JOB"" , false ) )"		2024482	22					
ANR	2024927	Condition	"param_boolean ( ""GLEXEC_JOB"" , false )"	480:5:13886:13919	2024482	0	True				
ANR	2024928	CallExpression	"param_boolean ( ""GLEXEC_JOB"" , false )"		2024482	0					
ANR	2024929	Callee	param_boolean		2024482	0					
ANR	2024930	Identifier	param_boolean		2024482	0					
ANR	2024931	ArgumentList	"""GLEXEC_JOB"""		2024482	1					
ANR	2024932	Argument	"""GLEXEC_JOB"""		2024482	0					
ANR	2024933	PrimaryExpression	"""GLEXEC_JOB"""		2024482	0					
ANR	2024934	Argument	false		2024482	1					
ANR	2024935	Identifier	false		2024482	0					
ANR	2024936	CompoundStatement		132:2:3419:3449	2024482	1					
ANR	2024937	ExpressionStatement	"args . AppendArg ( ""-I"" )"	481:2:13926:13946	2024482	0	True				
ANR	2024938	CallExpression	"args . AppendArg ( ""-I"" )"		2024482	0					
ANR	2024939	Callee	args . AppendArg		2024482	0					
ANR	2024940	MemberAccess	args . AppendArg		2024482	0					
ANR	2024941	Identifier	args		2024482	0					
ANR	2024942	Identifier	AppendArg		2024482	1					
ANR	2024943	ArgumentList	"""-I"""		2024482	1					
ANR	2024944	Argument	"""-I"""		2024482	0					
ANR	2024945	PrimaryExpression	"""-I"""		2024482	0					
ANR	2024946	IdentifierDeclStatement	"char * libexec = param ( ""LIBEXEC"" ) ;"	482:2:13950:13982	2024482	1	True				
ANR	2024947	IdentifierDecl	"* libexec = param ( ""LIBEXEC"" )"		2024482	0					
ANR	2024948	IdentifierDeclType	char *		2024482	0					
ANR	2024949	Identifier	libexec		2024482	1					
ANR	2024950	AssignmentExpression	"* libexec = param ( ""LIBEXEC"" )"		2024482	2		=			
ANR	2024951	Identifier	libexec		2024482	0					
ANR	2024952	CallExpression	"param ( ""LIBEXEC"" )"		2024482	1					
ANR	2024953	Callee	param		2024482	0					
ANR	2024954	Identifier	param		2024482	0					
ANR	2024955	ArgumentList	"""LIBEXEC"""		2024482	1					
ANR	2024956	Argument	"""LIBEXEC"""		2024482	0					
ANR	2024957	PrimaryExpression	"""LIBEXEC"""		2024482	0					
ANR	2024958	IfStatement	if ( libexec == NULL )		2024482	2					
ANR	2024959	Condition	libexec == NULL	483:6:13990:14004	2024482	0	True				
ANR	2024960	EqualityExpression	libexec == NULL		2024482	0		==			
ANR	2024961	Identifier	libexec		2024482	0					
ANR	2024962	Identifier	NULL		2024482	1					
ANR	2024963	CompoundStatement		125:23:3210:3210	2024482	1					
ANR	2024964	ExpressionStatement	"EXCEPT ( ""GLEXEC_JOB is defined, but LIBEXEC not configured"" )"	484:3:14012:14071	2024482	0	True				
ANR	2024965	CallExpression	"EXCEPT ( ""GLEXEC_JOB is defined, but LIBEXEC not configured"" )"		2024482	0					
ANR	2024966	Callee	EXCEPT		2024482	0					
ANR	2024967	Identifier	EXCEPT		2024482	0					
ANR	2024968	ArgumentList	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		2024482	1					
ANR	2024969	Argument	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		2024482	0					
ANR	2024970	PrimaryExpression	"""GLEXEC_JOB is defined, but LIBEXEC not configured"""		2024482	0					
ANR	2024971	IdentifierDeclStatement	MyString glexec_kill ;	486:2:14079:14099	2024482	3	True				
ANR	2024972	IdentifierDecl	glexec_kill		2024482	0					
ANR	2024973	IdentifierDeclType	MyString		2024482	0					
ANR	2024974	Identifier	glexec_kill		2024482	1					
ANR	2024975	ExpressionStatement	"glexec_kill . sprintf ( ""%s/condor_glexec_kill"" , libexec )"	487:2:14103:14156	2024482	4	True				
ANR	2024976	CallExpression	"glexec_kill . sprintf ( ""%s/condor_glexec_kill"" , libexec )"		2024482	0					
ANR	2024977	Callee	glexec_kill . sprintf		2024482	0					
ANR	2024978	MemberAccess	glexec_kill . sprintf		2024482	0					
ANR	2024979	Identifier	glexec_kill		2024482	0					
ANR	2024980	Identifier	sprintf		2024482	1					
ANR	2024981	ArgumentList	"""%s/condor_glexec_kill"""		2024482	1					
ANR	2024982	Argument	"""%s/condor_glexec_kill"""		2024482	0					
ANR	2024983	PrimaryExpression	"""%s/condor_glexec_kill"""		2024482	0					
ANR	2024984	Argument	libexec		2024482	1					
ANR	2024985	Identifier	libexec		2024482	0					
ANR	2024986	ExpressionStatement	free ( libexec )	488:2:14160:14173	2024482	5	True				
ANR	2024987	CallExpression	free ( libexec )		2024482	0					
ANR	2024988	Callee	free		2024482	0					
ANR	2024989	Identifier	free		2024482	0					
ANR	2024990	ArgumentList	libexec		2024482	1					
ANR	2024991	Argument	libexec		2024482	0					
ANR	2024992	Identifier	libexec		2024482	0					
ANR	2024993	ExpressionStatement	args . AppendArg ( glexec_kill . Value ( ) )	489:2:14177:14212	2024482	6	True				
ANR	2024994	CallExpression	args . AppendArg ( glexec_kill . Value ( ) )		2024482	0					
ANR	2024995	Callee	args . AppendArg		2024482	0					
ANR	2024996	MemberAccess	args . AppendArg		2024482	0					
ANR	2024997	Identifier	args		2024482	0					
ANR	2024998	Identifier	AppendArg		2024482	1					
ANR	2024999	ArgumentList	glexec_kill . Value ( )		2024482	1					
ANR	2025000	Argument	glexec_kill . Value ( )		2024482	0					
ANR	2025001	CallExpression	glexec_kill . Value ( )		2024482	0					
ANR	2025002	Callee	glexec_kill . Value		2024482	0					
ANR	2025003	MemberAccess	glexec_kill . Value		2024482	0					
ANR	2025004	Identifier	glexec_kill		2024482	0					
ANR	2025005	Identifier	Value		2024482	1					
ANR	2025006	ArgumentList			2024482	1					
ANR	2025007	IdentifierDeclStatement	"char * glexec = param ( ""GLEXEC"" ) ;"	490:2:14216:14246	2024482	7	True				
ANR	2025008	IdentifierDecl	"* glexec = param ( ""GLEXEC"" )"		2024482	0					
ANR	2025009	IdentifierDeclType	char *		2024482	0					
ANR	2025010	Identifier	glexec		2024482	1					
ANR	2025011	AssignmentExpression	"* glexec = param ( ""GLEXEC"" )"		2024482	2		=			
ANR	2025012	Identifier	glexec		2024482	0					
ANR	2025013	CallExpression	"param ( ""GLEXEC"" )"		2024482	1					
ANR	2025014	Callee	param		2024482	0					
ANR	2025015	Identifier	param		2024482	0					
ANR	2025016	ArgumentList	"""GLEXEC"""		2024482	1					
ANR	2025017	Argument	"""GLEXEC"""		2024482	0					
ANR	2025018	PrimaryExpression	"""GLEXEC"""		2024482	0					
ANR	2025019	IfStatement	if ( glexec == NULL )		2024482	8					
ANR	2025020	Condition	glexec == NULL	491:6:14254:14267	2024482	0	True				
ANR	2025021	EqualityExpression	glexec == NULL		2024482	0		==			
ANR	2025022	Identifier	glexec		2024482	0					
ANR	2025023	Identifier	NULL		2024482	1					
ANR	2025024	CompoundStatement		133:22:3473:3473	2024482	1					
ANR	2025025	ExpressionStatement	"EXCEPT ( ""GLEXEC_JOB is defined, but GLEXEC not configured"" )"	492:3:14275:14333	2024482	0	True				
ANR	2025026	CallExpression	"EXCEPT ( ""GLEXEC_JOB is defined, but GLEXEC not configured"" )"		2024482	0					
ANR	2025027	Callee	EXCEPT		2024482	0					
ANR	2025028	Identifier	EXCEPT		2024482	0					
ANR	2025029	ArgumentList	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		2024482	1					
ANR	2025030	Argument	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		2024482	0					
ANR	2025031	PrimaryExpression	"""GLEXEC_JOB is defined, but GLEXEC not configured"""		2024482	0					
ANR	2025032	ExpressionStatement	args . AppendArg ( glexec )	494:2:14341:14363	2024482	9	True				
ANR	2025033	CallExpression	args . AppendArg ( glexec )		2024482	0					
ANR	2025034	Callee	args . AppendArg		2024482	0					
ANR	2025035	MemberAccess	args . AppendArg		2024482	0					
ANR	2025036	Identifier	args		2024482	0					
ANR	2025037	Identifier	AppendArg		2024482	1					
ANR	2025038	ArgumentList	glexec		2024482	1					
ANR	2025039	Argument	glexec		2024482	0					
ANR	2025040	Identifier	glexec		2024482	0					
ANR	2025041	ExpressionStatement	free ( glexec )	495:2:14367:14379	2024482	10	True				
ANR	2025042	CallExpression	free ( glexec )		2024482	0					
ANR	2025043	Callee	free		2024482	0					
ANR	2025044	Identifier	free		2024482	0					
ANR	2025045	ArgumentList	glexec		2024482	1					
ANR	2025046	Argument	glexec		2024482	0					
ANR	2025047	Identifier	glexec		2024482	0					
ANR	2025048	IfStatement	if ( m_reaper_id == FALSE )		2024482	23					
ANR	2025049	Condition	m_reaper_id == FALSE	501:5:14499:14518	2024482	0	True				
ANR	2025050	EqualityExpression	m_reaper_id == FALSE		2024482	0		==			
ANR	2025051	Identifier	m_reaper_id		2024482	0					
ANR	2025052	Identifier	FALSE		2024482	1					
ANR	2025053	CompoundStatement		143:27:3724:3724	2024482	1					
ANR	2025054	ExpressionStatement	"m_reaper_id = daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"	502:2:14525:14707	2024482	0	True				
ANR	2025055	AssignmentExpression	"m_reaper_id = daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"		2024482	0		=			
ANR	2025056	Identifier	m_reaper_id		2024482	0					
ANR	2025057	CallExpression	"daemonCore -> Register_Reaper ( ""condor_procd reaper"" , ( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper , ""condor_procd reaper"" , m_reaper_helper )"		2024482	1					
ANR	2025058	Callee	daemonCore -> Register_Reaper		2024482	0					
ANR	2025059	PtrMemberAccess	daemonCore -> Register_Reaper		2024482	0					
ANR	2025060	Identifier	daemonCore		2024482	0					
ANR	2025061	Identifier	Register_Reaper		2024482	1					
ANR	2025062	ArgumentList	"""condor_procd reaper"""		2024482	1					
ANR	2025063	Argument	"""condor_procd reaper"""		2024482	0					
ANR	2025064	PrimaryExpression	"""condor_procd reaper"""		2024482	0					
ANR	2025065	Argument	( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper		2024482	1					
ANR	2025066	CastExpression	( ReaperHandlercpp ) & ProcFamilyProxyReaperHelper :: procd_reaper		2024482	0					
ANR	2025067	CastTarget	ReaperHandlercpp		2024482	0					
ANR	2025068	UnaryOperationExpression	& ProcFamilyProxyReaperHelper :: procd_reaper		2024482	1					
ANR	2025069	UnaryOperator	&		2024482	0					
ANR	2025070	Identifier	ProcFamilyProxyReaperHelper :: procd_reaper		2024482	1					
ANR	2025071	Argument	"""condor_procd reaper"""		2024482	2					
ANR	2025072	PrimaryExpression	"""condor_procd reaper"""		2024482	0					
ANR	2025073	Argument	m_reaper_helper		2024482	3					
ANR	2025074	Identifier	m_reaper_helper		2024482	0					
ANR	2025075	IfStatement	if ( m_reaper_id == FALSE )		2024482	24					
ANR	2025076	Condition	m_reaper_id == FALSE	509:5:14717:14736	2024482	0	True				
ANR	2025077	EqualityExpression	m_reaper_id == FALSE		2024482	0		==			
ANR	2025078	Identifier	m_reaper_id		2024482	0					
ANR	2025079	Identifier	FALSE		2024482	1					
ANR	2025080	CompoundStatement		151:27:3942:3942	2024482	1					
ANR	2025081	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: unable to register a reaper for the procd\\n"" )"	510:2:14743:14830	2024482	0	True				
ANR	2025082	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: unable to register a reaper for the procd\\n"" )"		2024482	0					
ANR	2025083	Callee	dprintf		2024482	0					
ANR	2025084	Identifier	dprintf		2024482	0					
ANR	2025085	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025086	Argument	D_ALWAYS		2024482	0					
ANR	2025087	Identifier	D_ALWAYS		2024482	0					
ANR	2025088	Argument	"""start_procd: unable to register a reaper for the procd\\n"""		2024482	1					
ANR	2025089	PrimaryExpression	"""start_procd: unable to register a reaper for the procd\\n"""		2024482	0					
ANR	2025090	ReturnStatement	return false ;	512:2:14834:14846	2024482	1	True				
ANR	2025091	Identifier	false		2024482	0					
ANR	2025092	IdentifierDeclStatement	int pipe_ends [ 2 ] ;	519:1:15004:15020	2024482	25	True				
ANR	2025093	IdentifierDecl	pipe_ends [ 2 ]		2024482	0					
ANR	2025094	IdentifierDeclType	int [ 2 ]		2024482	0					
ANR	2025095	Identifier	pipe_ends		2024482	1					
ANR	2025096	PrimaryExpression	2		2024482	2					
ANR	2025097	IfStatement	if ( daemonCore -> Create_Pipe ( pipe_ends ) == FALSE )		2024482	26					
ANR	2025098	Condition	daemonCore -> Create_Pipe ( pipe_ends ) == FALSE	520:5:15027:15069	2024482	0	True				
ANR	2025099	EqualityExpression	daemonCore -> Create_Pipe ( pipe_ends ) == FALSE		2024482	0		==			
ANR	2025100	CallExpression	daemonCore -> Create_Pipe ( pipe_ends )		2024482	0					
ANR	2025101	Callee	daemonCore -> Create_Pipe		2024482	0					
ANR	2025102	PtrMemberAccess	daemonCore -> Create_Pipe		2024482	0					
ANR	2025103	Identifier	daemonCore		2024482	0					
ANR	2025104	Identifier	Create_Pipe		2024482	1					
ANR	2025105	ArgumentList	pipe_ends		2024482	1					
ANR	2025106	Argument	pipe_ends		2024482	0					
ANR	2025107	Identifier	pipe_ends		2024482	0					
ANR	2025108	Identifier	FALSE		2024482	1					
ANR	2025109	CompoundStatement		162:50:4275:4275	2024482	1					
ANR	2025110	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error creating pipe for the procd\\n"" )"	521:2:15076:15145	2024482	0	True				
ANR	2025111	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error creating pipe for the procd\\n"" )"		2024482	0					
ANR	2025112	Callee	dprintf		2024482	0					
ANR	2025113	Identifier	dprintf		2024482	0					
ANR	2025114	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025115	Argument	D_ALWAYS		2024482	0					
ANR	2025116	Identifier	D_ALWAYS		2024482	0					
ANR	2025117	Argument	"""start_procd: error creating pipe for the procd\\n"""		2024482	1					
ANR	2025118	PrimaryExpression	"""start_procd: error creating pipe for the procd\\n"""		2024482	0					
ANR	2025119	ReturnStatement	return false ;	522:2:15149:15161	2024482	1	True				
ANR	2025120	Identifier	false		2024482	0					
ANR	2025121	IdentifierDeclStatement	int std_io [ 3 ] ;	524:1:15167:15180	2024482	27	True				
ANR	2025122	IdentifierDecl	std_io [ 3 ]		2024482	0					
ANR	2025123	IdentifierDeclType	int [ 3 ]		2024482	0					
ANR	2025124	Identifier	std_io		2024482	1					
ANR	2025125	PrimaryExpression	3		2024482	2					
ANR	2025126	ExpressionStatement	std_io [ 0 ] = - 1	525:1:15183:15197	2024482	28	True				
ANR	2025127	AssignmentExpression	std_io [ 0 ] = - 1		2024482	0		=			
ANR	2025128	ArrayIndexing	std_io [ 0 ]		2024482	0					
ANR	2025129	Identifier	std_io		2024482	0					
ANR	2025130	PrimaryExpression	0		2024482	1					
ANR	2025131	UnaryOperationExpression	- 1		2024482	1					
ANR	2025132	UnaryOperator	-		2024482	0					
ANR	2025133	PrimaryExpression	1		2024482	1					
ANR	2025134	ExpressionStatement	std_io [ 1 ] = - 1	526:1:15200:15214	2024482	29	True				
ANR	2025135	AssignmentExpression	std_io [ 1 ] = - 1		2024482	0		=			
ANR	2025136	ArrayIndexing	std_io [ 1 ]		2024482	0					
ANR	2025137	Identifier	std_io		2024482	0					
ANR	2025138	PrimaryExpression	1		2024482	1					
ANR	2025139	UnaryOperationExpression	- 1		2024482	1					
ANR	2025140	UnaryOperator	-		2024482	0					
ANR	2025141	PrimaryExpression	1		2024482	1					
ANR	2025142	ExpressionStatement	std_io [ 2 ] = pipe_ends [ 1 ]	527:1:15217:15241	2024482	30	True				
ANR	2025143	AssignmentExpression	std_io [ 2 ] = pipe_ends [ 1 ]		2024482	0		=			
ANR	2025144	ArrayIndexing	std_io [ 2 ]		2024482	0					
ANR	2025145	Identifier	std_io		2024482	0					
ANR	2025146	PrimaryExpression	2		2024482	1					
ANR	2025147	ArrayIndexing	pipe_ends [ 1 ]		2024482	1					
ANR	2025148	Identifier	pipe_ends		2024482	0					
ANR	2025149	PrimaryExpression	1		2024482	1					
ANR	2025150	IfStatement	if ( privsep_enabled ( ) )		2024482	31					
ANR	2025151	Condition	privsep_enabled ( )	531:5:15295:15311	2024482	0	True				
ANR	2025152	CallExpression	privsep_enabled ( )		2024482	0					
ANR	2025153	Callee	privsep_enabled		2024482	0					
ANR	2025154	Identifier	privsep_enabled		2024482	0					
ANR	2025155	ArgumentList			2024482	1					
ANR	2025156	CompoundStatement		173:24:4517:4517	2024482	1					
ANR	2025157	ExpressionStatement	"m_procd_pid = privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"	532:2:15318:15499	2024482	0	True				
ANR	2025158	AssignmentExpression	"m_procd_pid = privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"		2024482	0		=			
ANR	2025159	Identifier	m_procd_pid		2024482	0					
ANR	2025160	CallExpression	"privsep_spawn_procd ( exe . Value ( ) , args , std_io , m_reaper_id )"		2024482	1					
ANR	2025161	Callee	privsep_spawn_procd		2024482	0					
ANR	2025162	Identifier	privsep_spawn_procd		2024482	0					
ANR	2025163	ArgumentList	exe . Value ( )		2024482	1					
ANR	2025164	Argument	exe . Value ( )		2024482	0					
ANR	2025165	CallExpression	exe . Value ( )		2024482	0					
ANR	2025166	Callee	exe . Value		2024482	0					
ANR	2025167	MemberAccess	exe . Value		2024482	0					
ANR	2025168	Identifier	exe		2024482	0					
ANR	2025169	Identifier	Value		2024482	1					
ANR	2025170	ArgumentList			2024482	1					
ANR	2025171	Argument	args		2024482	1					
ANR	2025172	Identifier	args		2024482	0					
ANR	2025173	Argument	std_io		2024482	2					
ANR	2025174	Identifier	std_io		2024482	0					
ANR	2025175	Argument	m_reaper_id		2024482	3					
ANR	2025176	Identifier	m_reaper_id		2024482	0					
ANR	2025177	ElseStatement	else		2024482	0					
ANR	2025178	CompoundStatement		179:6:4713:4713	2024482	0					
ANR	2025179	ExpressionStatement	"m_procd_pid = daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"	538:2:15514:16023	2024482	0	True				
ANR	2025180	AssignmentExpression	"m_procd_pid = daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"		2024482	0		=			
ANR	2025181	Identifier	m_procd_pid		2024482	0					
ANR	2025182	CallExpression	"daemonCore -> Create_Process ( exe . Value ( ) , args , PRIV_ROOT , m_reaper_id , FALSE , NULL , NULL , NULL , NULL , std_io )"		2024482	1					
ANR	2025183	Callee	daemonCore -> Create_Process		2024482	0					
ANR	2025184	PtrMemberAccess	daemonCore -> Create_Process		2024482	0					
ANR	2025185	Identifier	daemonCore		2024482	0					
ANR	2025186	Identifier	Create_Process		2024482	1					
ANR	2025187	ArgumentList	exe . Value ( )		2024482	1					
ANR	2025188	Argument	exe . Value ( )		2024482	0					
ANR	2025189	CallExpression	exe . Value ( )		2024482	0					
ANR	2025190	Callee	exe . Value		2024482	0					
ANR	2025191	MemberAccess	exe . Value		2024482	0					
ANR	2025192	Identifier	exe		2024482	0					
ANR	2025193	Identifier	Value		2024482	1					
ANR	2025194	ArgumentList			2024482	1					
ANR	2025195	Argument	args		2024482	1					
ANR	2025196	Identifier	args		2024482	0					
ANR	2025197	Argument	PRIV_ROOT		2024482	2					
ANR	2025198	Identifier	PRIV_ROOT		2024482	0					
ANR	2025199	Argument	m_reaper_id		2024482	3					
ANR	2025200	Identifier	m_reaper_id		2024482	0					
ANR	2025201	Argument	FALSE		2024482	4					
ANR	2025202	Identifier	FALSE		2024482	0					
ANR	2025203	Argument	NULL		2024482	5					
ANR	2025204	Identifier	NULL		2024482	0					
ANR	2025205	Argument	NULL		2024482	6					
ANR	2025206	Identifier	NULL		2024482	0					
ANR	2025207	Argument	NULL		2024482	7					
ANR	2025208	Identifier	NULL		2024482	0					
ANR	2025209	Argument	NULL		2024482	8					
ANR	2025210	Identifier	NULL		2024482	0					
ANR	2025211	Argument	std_io		2024482	9					
ANR	2025212	Identifier	std_io		2024482	0					
ANR	2025213	IfStatement	if ( m_procd_pid == FALSE )		2024482	32					
ANR	2025214	Condition	m_procd_pid == FALSE	549:5:16033:16052	2024482	0	True				
ANR	2025215	EqualityExpression	m_procd_pid == FALSE		2024482	0		==			
ANR	2025216	Identifier	m_procd_pid		2024482	0					
ANR	2025217	Identifier	FALSE		2024482	1					
ANR	2025218	CompoundStatement		191:27:5258:5258	2024482	1					
ANR	2025219	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: unable to execute the procd\\n"" )"	550:2:16059:16122	2024482	0	True				
ANR	2025220	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: unable to execute the procd\\n"" )"		2024482	0					
ANR	2025221	Callee	dprintf		2024482	0					
ANR	2025222	Identifier	dprintf		2024482	0					
ANR	2025223	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025224	Argument	D_ALWAYS		2024482	0					
ANR	2025225	Identifier	D_ALWAYS		2024482	0					
ANR	2025226	Argument	"""start_procd: unable to execute the procd\\n"""		2024482	1					
ANR	2025227	PrimaryExpression	"""start_procd: unable to execute the procd\\n"""		2024482	0					
ANR	2025228	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	551:2:16126:16162	2024482	1	True				
ANR	2025229	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		2024482	0					
ANR	2025230	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025231	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025232	Identifier	daemonCore		2024482	0					
ANR	2025233	Identifier	Close_Pipe		2024482	1					
ANR	2025234	ArgumentList	pipe_ends [ 0 ]		2024482	1					
ANR	2025235	Argument	pipe_ends [ 0 ]		2024482	0					
ANR	2025236	ArrayIndexing	pipe_ends [ 0 ]		2024482	0					
ANR	2025237	Identifier	pipe_ends		2024482	0					
ANR	2025238	PrimaryExpression	0		2024482	1					
ANR	2025239	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )	552:2:16166:16202	2024482	2	True				
ANR	2025240	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )		2024482	0					
ANR	2025241	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025242	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025243	Identifier	daemonCore		2024482	0					
ANR	2025244	Identifier	Close_Pipe		2024482	1					
ANR	2025245	ArgumentList	pipe_ends [ 1 ]		2024482	1					
ANR	2025246	Argument	pipe_ends [ 1 ]		2024482	0					
ANR	2025247	ArrayIndexing	pipe_ends [ 1 ]		2024482	0					
ANR	2025248	Identifier	pipe_ends		2024482	0					
ANR	2025249	PrimaryExpression	1		2024482	1					
ANR	2025250	ExpressionStatement	m_procd_pid = - 1	553:2:16206:16222	2024482	3	True				
ANR	2025251	AssignmentExpression	m_procd_pid = - 1		2024482	0		=			
ANR	2025252	Identifier	m_procd_pid		2024482	0					
ANR	2025253	UnaryOperationExpression	- 1		2024482	1					
ANR	2025254	UnaryOperator	-		2024482	0					
ANR	2025255	PrimaryExpression	1		2024482	1					
ANR	2025256	ReturnStatement	return false ;	554:2:16226:16238	2024482	4	True				
ANR	2025257	Identifier	false		2024482	0					
ANR	2025258	IfStatement	if ( daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE )		2024482	33					
ANR	2025259	Condition	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE	561:5:16407:16451	2024482	0	True				
ANR	2025260	EqualityExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] ) == FALSE		2024482	0		==			
ANR	2025261	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 1 ] )		2024482	0					
ANR	2025262	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025263	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025264	Identifier	daemonCore		2024482	0					
ANR	2025265	Identifier	Close_Pipe		2024482	1					
ANR	2025266	ArgumentList	pipe_ends [ 1 ]		2024482	1					
ANR	2025267	Argument	pipe_ends [ 1 ]		2024482	0					
ANR	2025268	ArrayIndexing	pipe_ends [ 1 ]		2024482	0					
ANR	2025269	Identifier	pipe_ends		2024482	0					
ANR	2025270	PrimaryExpression	1		2024482	1					
ANR	2025271	Identifier	FALSE		2024482	1					
ANR	2025272	CompoundStatement		203:52:5657:5657	2024482	1					
ANR	2025273	ExpressionStatement	"dprintf ( D_ALWAYS , ""error closing procd's pipe end\\n"" )"	562:2:16458:16511	2024482	0	True				
ANR	2025274	CallExpression	"dprintf ( D_ALWAYS , ""error closing procd's pipe end\\n"" )"		2024482	0					
ANR	2025275	Callee	dprintf		2024482	0					
ANR	2025276	Identifier	dprintf		2024482	0					
ANR	2025277	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025278	Argument	D_ALWAYS		2024482	0					
ANR	2025279	Identifier	D_ALWAYS		2024482	0					
ANR	2025280	Argument	"""error closing procd's pipe end\\n"""		2024482	1					
ANR	2025281	PrimaryExpression	"""error closing procd's pipe end\\n"""		2024482	0					
ANR	2025282	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	563:2:16515:16557	2024482	1	True				
ANR	2025283	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		2024482	0					
ANR	2025284	Callee	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025285	PtrMemberAccess	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025286	Identifier	daemonCore		2024482	0					
ANR	2025287	Identifier	Shutdown_Graceful		2024482	1					
ANR	2025288	ArgumentList	m_procd_pid		2024482	1					
ANR	2025289	Argument	m_procd_pid		2024482	0					
ANR	2025290	Identifier	m_procd_pid		2024482	0					
ANR	2025291	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	564:2:16561:16597	2024482	2	True				
ANR	2025292	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		2024482	0					
ANR	2025293	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025294	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025295	Identifier	daemonCore		2024482	0					
ANR	2025296	Identifier	Close_Pipe		2024482	1					
ANR	2025297	ArgumentList	pipe_ends [ 0 ]		2024482	1					
ANR	2025298	Argument	pipe_ends [ 0 ]		2024482	0					
ANR	2025299	ArrayIndexing	pipe_ends [ 0 ]		2024482	0					
ANR	2025300	Identifier	pipe_ends		2024482	0					
ANR	2025301	PrimaryExpression	0		2024482	1					
ANR	2025302	ExpressionStatement	m_procd_pid = - 1	565:2:16601:16617	2024482	3	True				
ANR	2025303	AssignmentExpression	m_procd_pid = - 1		2024482	0		=			
ANR	2025304	Identifier	m_procd_pid		2024482	0					
ANR	2025305	UnaryOperationExpression	- 1		2024482	1					
ANR	2025306	UnaryOperator	-		2024482	0					
ANR	2025307	PrimaryExpression	1		2024482	1					
ANR	2025308	ReturnStatement	return false ;	566:2:16621:16633	2024482	4	True				
ANR	2025309	Identifier	false		2024482	0					
ANR	2025310	IdentifierDeclStatement	const int MAX_PROCD_ERR_LEN = 80 ;	568:1:16639:16671	2024482	34	True				
ANR	2025311	IdentifierDecl	MAX_PROCD_ERR_LEN = 80		2024482	0					
ANR	2025312	IdentifierDeclType	const int		2024482	0					
ANR	2025313	Identifier	MAX_PROCD_ERR_LEN		2024482	1					
ANR	2025314	AssignmentExpression	MAX_PROCD_ERR_LEN = 80		2024482	2		=			
ANR	2025315	Identifier	MAX_PROCD_ERR_LEN		2024482	0					
ANR	2025316	PrimaryExpression	80		2024482	1					
ANR	2025317	IdentifierDeclStatement	char err_msg [ MAX_PROCD_ERR_LEN + 1 ] ;	569:1:16674:16709	2024482	35	True				
ANR	2025318	IdentifierDecl	err_msg [ MAX_PROCD_ERR_LEN + 1 ]		2024482	0					
ANR	2025319	IdentifierDeclType	char [ MAX_PROCD_ERR_LEN + 1 ]		2024482	0					
ANR	2025320	Identifier	err_msg		2024482	1					
ANR	2025321	AdditiveExpression	MAX_PROCD_ERR_LEN + 1		2024482	2		+			
ANR	2025322	Identifier	MAX_PROCD_ERR_LEN		2024482	0					
ANR	2025323	PrimaryExpression	1		2024482	1					
ANR	2025324	IdentifierDeclStatement	"int ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN ) ;"	570:1:16712:16785	2024482	36	True				
ANR	2025325	IdentifierDecl	"ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		2024482	0					
ANR	2025326	IdentifierDeclType	int		2024482	0					
ANR	2025327	Identifier	ret		2024482	1					
ANR	2025328	AssignmentExpression	"ret = daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		2024482	2		=			
ANR	2025329	Identifier	ret		2024482	0					
ANR	2025330	CallExpression	"daemonCore -> Read_Pipe ( pipe_ends [ 0 ] , err_msg , MAX_PROCD_ERR_LEN )"		2024482	1					
ANR	2025331	Callee	daemonCore -> Read_Pipe		2024482	0					
ANR	2025332	PtrMemberAccess	daemonCore -> Read_Pipe		2024482	0					
ANR	2025333	Identifier	daemonCore		2024482	0					
ANR	2025334	Identifier	Read_Pipe		2024482	1					
ANR	2025335	ArgumentList	pipe_ends [ 0 ]		2024482	1					
ANR	2025336	Argument	pipe_ends [ 0 ]		2024482	0					
ANR	2025337	ArrayIndexing	pipe_ends [ 0 ]		2024482	0					
ANR	2025338	Identifier	pipe_ends		2024482	0					
ANR	2025339	PrimaryExpression	0		2024482	1					
ANR	2025340	Argument	err_msg		2024482	1					
ANR	2025341	Identifier	err_msg		2024482	0					
ANR	2025342	Argument	MAX_PROCD_ERR_LEN		2024482	2					
ANR	2025343	Identifier	MAX_PROCD_ERR_LEN		2024482	0					
ANR	2025344	IfStatement	if ( ret != 0 )		2024482	37					
ANR	2025345	Condition	ret != 0	571:5:16792:16799	2024482	0	True				
ANR	2025346	EqualityExpression	ret != 0		2024482	0		!=			
ANR	2025347	Identifier	ret		2024482	0					
ANR	2025348	PrimaryExpression	0		2024482	1					
ANR	2025349	CompoundStatement		213:15:6005:6005	2024482	1					
ANR	2025350	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	572:2:16806:16848	2024482	0	True				
ANR	2025351	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		2024482	0					
ANR	2025352	Callee	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025353	PtrMemberAccess	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025354	Identifier	daemonCore		2024482	0					
ANR	2025355	Identifier	Shutdown_Graceful		2024482	1					
ANR	2025356	ArgumentList	m_procd_pid		2024482	1					
ANR	2025357	Argument	m_procd_pid		2024482	0					
ANR	2025358	Identifier	m_procd_pid		2024482	0					
ANR	2025359	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )	573:2:16852:16888	2024482	1	True				
ANR	2025360	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		2024482	0					
ANR	2025361	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025362	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025363	Identifier	daemonCore		2024482	0					
ANR	2025364	Identifier	Close_Pipe		2024482	1					
ANR	2025365	ArgumentList	pipe_ends [ 0 ]		2024482	1					
ANR	2025366	Argument	pipe_ends [ 0 ]		2024482	0					
ANR	2025367	ArrayIndexing	pipe_ends [ 0 ]		2024482	0					
ANR	2025368	Identifier	pipe_ends		2024482	0					
ANR	2025369	PrimaryExpression	0		2024482	1					
ANR	2025370	ExpressionStatement	m_procd_pid = - 1	574:2:16892:16908	2024482	2	True				
ANR	2025371	AssignmentExpression	m_procd_pid = - 1		2024482	0		=			
ANR	2025372	Identifier	m_procd_pid		2024482	0					
ANR	2025373	UnaryOperationExpression	- 1		2024482	1					
ANR	2025374	UnaryOperator	-		2024482	0					
ANR	2025375	PrimaryExpression	1		2024482	1					
ANR	2025376	IfStatement	if ( ret == - 1 )		2024482	3					
ANR	2025377	Condition	ret == - 1	575:6:16916:16924	2024482	0	True				
ANR	2025378	EqualityExpression	ret == - 1		2024482	0		==			
ANR	2025379	Identifier	ret		2024482	0					
ANR	2025380	UnaryOperationExpression	- 1		2024482	1					
ANR	2025381	UnaryOperator	-		2024482	0					
ANR	2025382	PrimaryExpression	1		2024482	1					
ANR	2025383	CompoundStatement		217:17:6130:6130	2024482	1					
ANR	2025384	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error reading pipe from procd\\n"" )"	576:3:16932:16997	2024482	0	True				
ANR	2025385	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error reading pipe from procd\\n"" )"		2024482	0					
ANR	2025386	Callee	dprintf		2024482	0					
ANR	2025387	Identifier	dprintf		2024482	0					
ANR	2025388	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025389	Argument	D_ALWAYS		2024482	0					
ANR	2025390	Identifier	D_ALWAYS		2024482	0					
ANR	2025391	Argument	"""start_procd: error reading pipe from procd\\n"""		2024482	1					
ANR	2025392	PrimaryExpression	"""start_procd: error reading pipe from procd\\n"""		2024482	0					
ANR	2025393	ReturnStatement	return false ;	577:3:17002:17014	2024482	1	True				
ANR	2025394	Identifier	false		2024482	0					
ANR	2025395	ExpressionStatement	err_msg [ ret ] = '\\0'	579:2:17022:17041	2024482	4	True				
ANR	2025396	AssignmentExpression	err_msg [ ret ] = '\\0'		2024482	0		=			
ANR	2025397	ArrayIndexing	err_msg [ ret ]		2024482	0					
ANR	2025398	Identifier	err_msg		2024482	0					
ANR	2025399	Identifier	ret		2024482	1					
ANR	2025400	PrimaryExpression	'\\0'		2024482	1					
ANR	2025401	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error received from procd: %s\\n"" , err_msg )"	580:2:17045:17139	2024482	5	True				
ANR	2025402	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error received from procd: %s\\n"" , err_msg )"		2024482	0					
ANR	2025403	Callee	dprintf		2024482	0					
ANR	2025404	Identifier	dprintf		2024482	0					
ANR	2025405	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025406	Argument	D_ALWAYS		2024482	0					
ANR	2025407	Identifier	D_ALWAYS		2024482	0					
ANR	2025408	Argument	"""start_procd: error received from procd: %s\\n"""		2024482	1					
ANR	2025409	PrimaryExpression	"""start_procd: error received from procd: %s\\n"""		2024482	0					
ANR	2025410	Argument	err_msg		2024482	2					
ANR	2025411	Identifier	err_msg		2024482	0					
ANR	2025412	ReturnStatement	return false ;	583:2:17143:17155	2024482	6	True				
ANR	2025413	Identifier	false		2024482	0					
ANR	2025414	IfStatement	if ( daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE )		2024482	38					
ANR	2025415	Condition	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE	585:5:17165:17209	2024482	0	True				
ANR	2025416	EqualityExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] ) == FALSE		2024482	0		==			
ANR	2025417	CallExpression	daemonCore -> Close_Pipe ( pipe_ends [ 0 ] )		2024482	0					
ANR	2025418	Callee	daemonCore -> Close_Pipe		2024482	0					
ANR	2025419	PtrMemberAccess	daemonCore -> Close_Pipe		2024482	0					
ANR	2025420	Identifier	daemonCore		2024482	0					
ANR	2025421	Identifier	Close_Pipe		2024482	1					
ANR	2025422	ArgumentList	pipe_ends [ 0 ]		2024482	1					
ANR	2025423	Argument	pipe_ends [ 0 ]		2024482	0					
ANR	2025424	ArrayIndexing	pipe_ends [ 0 ]		2024482	0					
ANR	2025425	Identifier	pipe_ends		2024482	0					
ANR	2025426	PrimaryExpression	0		2024482	1					
ANR	2025427	Identifier	FALSE		2024482	1					
ANR	2025428	CompoundStatement		227:52:6415:6415	2024482	1					
ANR	2025429	ExpressionStatement	"dprintf ( D_ALWAYS , ""start_procd: error closing pipe to procd\\n"" )"	586:2:17216:17279	2024482	0	True				
ANR	2025430	CallExpression	"dprintf ( D_ALWAYS , ""start_procd: error closing pipe to procd\\n"" )"		2024482	0					
ANR	2025431	Callee	dprintf		2024482	0					
ANR	2025432	Identifier	dprintf		2024482	0					
ANR	2025433	ArgumentList	D_ALWAYS		2024482	1					
ANR	2025434	Argument	D_ALWAYS		2024482	0					
ANR	2025435	Identifier	D_ALWAYS		2024482	0					
ANR	2025436	Argument	"""start_procd: error closing pipe to procd\\n"""		2024482	1					
ANR	2025437	PrimaryExpression	"""start_procd: error closing pipe to procd\\n"""		2024482	0					
ANR	2025438	ExpressionStatement	daemonCore -> Shutdown_Graceful ( m_procd_pid )	587:2:17283:17325	2024482	1	True				
ANR	2025439	CallExpression	daemonCore -> Shutdown_Graceful ( m_procd_pid )		2024482	0					
ANR	2025440	Callee	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025441	PtrMemberAccess	daemonCore -> Shutdown_Graceful		2024482	0					
ANR	2025442	Identifier	daemonCore		2024482	0					
ANR	2025443	Identifier	Shutdown_Graceful		2024482	1					
ANR	2025444	ArgumentList	m_procd_pid		2024482	1					
ANR	2025445	Argument	m_procd_pid		2024482	0					
ANR	2025446	Identifier	m_procd_pid		2024482	0					
ANR	2025447	ExpressionStatement	m_procd_pid = - 1	588:2:17329:17345	2024482	2	True				
ANR	2025448	AssignmentExpression	m_procd_pid = - 1		2024482	0		=			
ANR	2025449	Identifier	m_procd_pid		2024482	0					
ANR	2025450	UnaryOperationExpression	- 1		2024482	1					
ANR	2025451	UnaryOperator	-		2024482	0					
ANR	2025452	PrimaryExpression	1		2024482	1					
ANR	2025453	ReturnStatement	return false ;	589:2:17349:17361	2024482	3	True				
ANR	2025454	Identifier	false		2024482	0					
ANR	2025455	ReturnStatement	return true ;	594:1:17408:17419	2024482	39	True				
ANR	2025456	Identifier	true		2024482	0					
ANR	2025457	ReturnType	bool		2024482	1					
ANR	2025458	Identifier	ProcFamilyProxy :: start_procd		2024482	2					
ANR	2025459	ParameterList			2024482	3					
ANR	2025460	CFGEntryNode	ENTRY		2024482		True				
ANR	2025461	CFGExitNode	EXIT		2024482		True				
ANR	2025462	Symbol	m_procd_addr		2024482						
ANR	2025463	Symbol	daemonCore -> Create_Process		2024482						
ANR	2025464	Symbol	m_procd_pid		2024482						
ANR	2025465	Symbol	privsep_spawn_procd		2024482						
ANR	2025466	Symbol	* err_msg		2024482						
ANR	2025467	Symbol	std_io		2024482						
ANR	2025468	Symbol	* pipe_ends		2024482						
ANR	2025469	Symbol	path		2024482						
ANR	2025470	Symbol	glexec		2024482						
ANR	2025471	Symbol	exe		2024482						
ANR	2025472	Symbol	can_switch_ids		2024482						
ANR	2025473	Symbol	procd_log_size		2024482						
ANR	2025474	Symbol	pipe_ends		2024482						
ANR	2025475	Symbol	ret		2024482						
ANR	2025476	Symbol	NULL		2024482						
ANR	2025477	Symbol	glexec_kill . Value		2024482						
ANR	2025478	Symbol	m_reaper_id		2024482						
ANR	2025479	Symbol	param_boolean		2024482						
ANR	2025480	Symbol	m_procd_log . Length		2024482						
ANR	2025481	Symbol	& ProcFamilyProxyReaperHelper :: procd_reaper		2024482						
ANR	2025482	Symbol	m_reaper_helper		2024482						
ANR	2025483	Symbol	max_snapshot_interval		2024482						
ANR	2025484	Symbol	daemonCore -> Read_Pipe		2024482						
ANR	2025485	Symbol	* daemonCore		2024482						
ANR	2025486	Symbol	true		2024482						
ANR	2025487	Symbol	glexec_kill		2024482						
ANR	2025488	Symbol	PRIV_ROOT		2024482						
ANR	2025489	Symbol	param_integer		2024482						
ANR	2025490	Symbol	max_tracking_gid		2024482						
ANR	2025491	Symbol	daemonCore -> Create_Pipe		2024482						
ANR	2025492	Symbol	condor_basename		2024482						
ANR	2025493	Symbol	daemonCore -> Close_Pipe		2024482						
ANR	2025494	Symbol	min_tracking_gid		2024482						
ANR	2025495	Symbol	MAX_PROCD_ERR_LEN		2024482						
ANR	2025496	Symbol	m_procd_log		2024482						
ANR	2025497	Symbol	* ret		2024482						
ANR	2025498	Symbol	param		2024482						
ANR	2025499	Symbol	daemonCore		2024482						
ANR	2025500	Symbol	exe . Value		2024482						
ANR	2025501	Symbol	debug		2024482						
ANR	2025502	Symbol	softkill_path		2024482						
ANR	2025503	Symbol	D_ALWAYS		2024482						
ANR	2025504	Symbol	false		2024482						
ANR	2025505	Symbol	args		2024482						
ANR	2025506	Symbol	daemonCore -> Register_Reaper		2024482						
ANR	2025507	Symbol	get_condor_uid		2024482						
ANR	2025508	Symbol	libexec		2024482						
ANR	2025509	Symbol	privsep_enabled		2024482						
ANR	2025510	Symbol	err_msg		2024482						
ANR	2025511	Symbol	FALSE		2024482						
ANR	2025512	Symbol	* std_io		2024482						
ANR	2025513	Function	ProcFamilyProxy :: stop_procd	597:0:17424:17671							
ANR	2025514	FunctionDef	ProcFamilyProxy :: stop_procd ()		2025513	0					
ANR	2025515	CompoundStatement		599:0:17459:17671	2025513	0					
ANR	2025516	IdentifierDeclStatement	bool response ;	600:1:17462:17475	2025513	0	True				
ANR	2025517	IdentifierDecl	response		2025513	0					
ANR	2025518	IdentifierDeclType	bool		2025513	0					
ANR	2025519	Identifier	response		2025513	1					
ANR	2025520	IfStatement	if ( ! m_client -> quit ( response ) )		2025513	1					
ANR	2025521	Condition	! m_client -> quit ( response )	601:5:17482:17506	2025513	0	True				
ANR	2025522	UnaryOperationExpression	! m_client -> quit ( response )		2025513	0					
ANR	2025523	UnaryOperator	!		2025513	0					
ANR	2025524	CallExpression	m_client -> quit ( response )		2025513	1					
ANR	2025525	Callee	m_client -> quit		2025513	0					
ANR	2025526	PtrMemberAccess	m_client -> quit		2025513	0					
ANR	2025527	Identifier	m_client		2025513	0					
ANR	2025528	Identifier	quit		2025513	1					
ANR	2025529	ArgumentList	response		2025513	1					
ANR	2025530	Argument	response		2025513	0					
ANR	2025531	Identifier	response		2025513	0					
ANR	2025532	CompoundStatement		3:32:49:49	2025513	1					
ANR	2025533	ExpressionStatement	"dprintf ( D_ALWAYS , ""error telling ProcD to exit\\n"" )"	602:2:17513:17563	2025513	0	True				
ANR	2025534	CallExpression	"dprintf ( D_ALWAYS , ""error telling ProcD to exit\\n"" )"		2025513	0					
ANR	2025535	Callee	dprintf		2025513	0					
ANR	2025536	Identifier	dprintf		2025513	0					
ANR	2025537	ArgumentList	D_ALWAYS		2025513	1					
ANR	2025538	Argument	D_ALWAYS		2025513	0					
ANR	2025539	Identifier	D_ALWAYS		2025513	0					
ANR	2025540	Argument	"""error telling ProcD to exit\\n"""		2025513	1					
ANR	2025541	PrimaryExpression	"""error telling ProcD to exit\\n"""		2025513	0					
ANR	2025542	ExpressionStatement	m_procd_pid = - 1	608:1:17653:17669	2025513	2	True				
ANR	2025543	AssignmentExpression	m_procd_pid = - 1		2025513	0		=			
ANR	2025544	Identifier	m_procd_pid		2025513	0					
ANR	2025545	UnaryOperationExpression	- 1		2025513	1					
ANR	2025546	UnaryOperator	-		2025513	0					
ANR	2025547	PrimaryExpression	1		2025513	1					
ANR	2025548	ReturnType	void		2025513	1					
ANR	2025549	Identifier	ProcFamilyProxy :: stop_procd		2025513	2					
ANR	2025550	ParameterList			2025513	3					
ANR	2025551	CFGEntryNode	ENTRY		2025513		True				
ANR	2025552	CFGExitNode	EXIT		2025513		True				
ANR	2025553	Symbol	m_procd_pid		2025513						
ANR	2025554	Symbol	m_client -> quit		2025513						
ANR	2025555	Symbol	response		2025513						
ANR	2025556	Symbol	D_ALWAYS		2025513						
ANR	2025557	Symbol	* m_client		2025513						
ANR	2025558	Symbol	m_client		2025513						
ANR	2025559	Function	ProcFamilyProxy :: recover_from_procd_error	611:0:17674:18881							
ANR	2025560	FunctionDef	ProcFamilyProxy :: recover_from_procd_error ()		2025559	0					
ANR	2025561	CompoundStatement		613:0:17723:18881	2025559	0					
ANR	2025562	IfStatement	"if ( ! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false ) )"		2025559	0					
ANR	2025563	Condition	"! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"	614:5:17730:17776	2025559	0	True				
ANR	2025564	UnaryOperationExpression	"! param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"		2025559	0					
ANR	2025565	UnaryOperator	!		2025559	0					
ANR	2025566	CallExpression	"param_boolean ( ""RESTART_PROCD_ON_ERROR"" , false )"		2025559	1					
ANR	2025567	Callee	param_boolean		2025559	0					
ANR	2025568	Identifier	param_boolean		2025559	0					
ANR	2025569	ArgumentList	"""RESTART_PROCD_ON_ERROR"""		2025559	1					
ANR	2025570	Argument	"""RESTART_PROCD_ON_ERROR"""		2025559	0					
ANR	2025571	PrimaryExpression	"""RESTART_PROCD_ON_ERROR"""		2025559	0					
ANR	2025572	Argument	false		2025559	1					
ANR	2025573	Identifier	false		2025559	0					
ANR	2025574	CompoundStatement		2:54:55:55	2025559	1					
ANR	2025575	ExpressionStatement	"EXCEPT ( ""ProcD has failed"" )"	615:2:17783:17809	2025559	0	True				
ANR	2025576	CallExpression	"EXCEPT ( ""ProcD has failed"" )"		2025559	0					
ANR	2025577	Callee	EXCEPT		2025559	0					
ANR	2025578	Identifier	EXCEPT		2025559	0					
ANR	2025579	ArgumentList	"""ProcD has failed"""		2025559	1					
ANR	2025580	Argument	"""ProcD has failed"""		2025559	0					
ANR	2025581	PrimaryExpression	"""ProcD has failed"""		2025559	0					
ANR	2025582	Statement	delete	620:1:17876:17881	2025559	1	True				
ANR	2025583	ExpressionStatement	m_client	620:8:17883:17891	2025559	2	True				
ANR	2025584	Identifier	m_client		2025559	0					
ANR	2025585	ExpressionStatement	m_client = NULL	621:1:17894:17909	2025559	3	True				
ANR	2025586	AssignmentExpression	m_client = NULL		2025559	0		=			
ANR	2025587	Identifier	m_client		2025559	0					
ANR	2025588	Identifier	NULL		2025559	1					
ANR	2025589	WhileStatement	while ( m_client == NULL )		2025559	4					
ANR	2025590	Condition	m_client == NULL	623:8:17920:17935	2025559	0	True				
ANR	2025591	EqualityExpression	m_client == NULL		2025559	0		==			
ANR	2025592	Identifier	m_client		2025559	0					
ANR	2025593	Identifier	NULL		2025559	1					
ANR	2025594	CompoundStatement		11:26:214:214	2025559	1					
ANR	2025595	IfStatement	if ( m_procd_pid != - 1 )		2025559	0					
ANR	2025596	Condition	m_procd_pid != - 1	628:6:18070:18086	2025559	0	True				
ANR	2025597	EqualityExpression	m_procd_pid != - 1		2025559	0		!=			
ANR	2025598	Identifier	m_procd_pid		2025559	0					
ANR	2025599	UnaryOperationExpression	- 1		2025559	1					
ANR	2025600	UnaryOperator	-		2025559	0					
ANR	2025601	PrimaryExpression	1		2025559	1					
ANR	2025602	CompoundStatement		16:25:365:365	2025559	1					
ANR	2025603	ExpressionStatement	"dprintf ( D_ALWAYS , ""attempting to restart the Procd\\n"" )"	633:3:18186:18240	2025559	0	True				
ANR	2025604	CallExpression	"dprintf ( D_ALWAYS , ""attempting to restart the Procd\\n"" )"		2025559	0					
ANR	2025605	Callee	dprintf		2025559	0					
ANR	2025606	Identifier	dprintf		2025559	0					
ANR	2025607	ArgumentList	D_ALWAYS		2025559	1					
ANR	2025608	Argument	D_ALWAYS		2025559	0					
ANR	2025609	Identifier	D_ALWAYS		2025559	0					
ANR	2025610	Argument	"""attempting to restart the Procd\\n"""		2025559	1					
ANR	2025611	PrimaryExpression	"""attempting to restart the Procd\\n"""		2025559	0					
ANR	2025612	ExpressionStatement	m_procd_pid = - 1	634:3:18245:18261	2025559	1	True				
ANR	2025613	AssignmentExpression	m_procd_pid = - 1		2025559	0		=			
ANR	2025614	Identifier	m_procd_pid		2025559	0					
ANR	2025615	UnaryOperationExpression	- 1		2025559	1					
ANR	2025616	UnaryOperator	-		2025559	0					
ANR	2025617	PrimaryExpression	1		2025559	1					
ANR	2025618	IfStatement	if ( ! start_procd ( ) )		2025559	2					
ANR	2025619	Condition	! start_procd ( )	635:7:18270:18283	2025559	0	True				
ANR	2025620	UnaryOperationExpression	! start_procd ( )		2025559	0					
ANR	2025621	UnaryOperator	!		2025559	0					
ANR	2025622	CallExpression	start_procd ( )		2025559	1					
ANR	2025623	Callee	start_procd		2025559	0					
ANR	2025624	Identifier	start_procd		2025559	0					
ANR	2025625	ArgumentList			2025559	1					
ANR	2025626	CompoundStatement		23:23:562:562	2025559	1					
ANR	2025627	ExpressionStatement	"EXCEPT ( ""unable to start the ProcD"" )"	636:4:18292:18327	2025559	0	True				
ANR	2025628	CallExpression	"EXCEPT ( ""unable to start the ProcD"" )"		2025559	0					
ANR	2025629	Callee	EXCEPT		2025559	0					
ANR	2025630	Identifier	EXCEPT		2025559	0					
ANR	2025631	ArgumentList	"""unable to start the ProcD"""		2025559	1					
ANR	2025632	Argument	"""unable to start the ProcD"""		2025559	0					
ANR	2025633	PrimaryExpression	"""unable to start the ProcD"""		2025559	0					
ANR	2025634	ElseStatement	else		2025559	0					
ANR	2025635	CompoundStatement		27:7:621:621	2025559	0					
ANR	2025636	ExpressionStatement	"dprintf ( D_ALWAYS , ""waiting a second to allow the ProcD to be restarted\\n"" )"	646:3:18495:18580	2025559	0	True				
ANR	2025637	CallExpression	"dprintf ( D_ALWAYS , ""waiting a second to allow the ProcD to be restarted\\n"" )"		2025559	0					
ANR	2025638	Callee	dprintf		2025559	0					
ANR	2025639	Identifier	dprintf		2025559	0					
ANR	2025640	ArgumentList	D_ALWAYS		2025559	1					
ANR	2025641	Argument	D_ALWAYS		2025559	0					
ANR	2025642	Identifier	D_ALWAYS		2025559	0					
ANR	2025643	Argument	"""waiting a second to allow the ProcD to be restarted\\n"""		2025559	1					
ANR	2025644	PrimaryExpression	"""waiting a second to allow the ProcD to be restarted\\n"""		2025559	0					
ANR	2025645	ExpressionStatement	sleep ( 1 )	648:3:18585:18593	2025559	1	True				
ANR	2025646	CallExpression	sleep ( 1 )		2025559	0					
ANR	2025647	Callee	sleep		2025559	0					
ANR	2025648	Identifier	sleep		2025559	0					
ANR	2025649	ArgumentList	1		2025559	1					
ANR	2025650	Argument	1		2025559	0					
ANR	2025651	PrimaryExpression	1		2025559	0					
ANR	2025652	Statement	m_client	651:2:18602:18609	2025559	1	True				
ANR	2025653	Statement	=	651:11:18611:18611	2025559	2	True				
ANR	2025654	Statement	new	651:13:18613:18615	2025559	3	True				
ANR	2025655	ExpressionStatement	ProcFamilyClient	651:17:18617:18633	2025559	4	True				
ANR	2025656	Identifier	ProcFamilyClient		2025559	0					
ANR	2025657	ExpressionStatement	ASSERT ( m_client != NULL )	652:2:18637:18661	2025559	5	True				
ANR	2025658	CallExpression	ASSERT ( m_client != NULL )		2025559	0					
ANR	2025659	Callee	ASSERT		2025559	0					
ANR	2025660	Identifier	ASSERT		2025559	0					
ANR	2025661	ArgumentList	m_client != NULL		2025559	1					
ANR	2025662	Argument	m_client != NULL		2025559	0					
ANR	2025663	EqualityExpression	m_client != NULL		2025559	0		!=			
ANR	2025664	Identifier	m_client		2025559	0					
ANR	2025665	Identifier	NULL		2025559	1					
ANR	2025666	IfStatement	if ( ! m_client -> initialize ( m_procd_addr . Value ( ) ) )		2025559	6					
ANR	2025667	Condition	! m_client -> initialize ( m_procd_addr . Value ( ) )	653:6:18669:18711	2025559	0	True				
ANR	2025668	UnaryOperationExpression	! m_client -> initialize ( m_procd_addr . Value ( ) )		2025559	0					
ANR	2025669	UnaryOperator	!		2025559	0					
ANR	2025670	CallExpression	m_client -> initialize ( m_procd_addr . Value ( ) )		2025559	1					
ANR	2025671	Callee	m_client -> initialize		2025559	0					
ANR	2025672	PtrMemberAccess	m_client -> initialize		2025559	0					
ANR	2025673	Identifier	m_client		2025559	0					
ANR	2025674	Identifier	initialize		2025559	1					
ANR	2025675	ArgumentList	m_procd_addr . Value ( )		2025559	1					
ANR	2025676	Argument	m_procd_addr . Value ( )		2025559	0					
ANR	2025677	CallExpression	m_procd_addr . Value ( )		2025559	0					
ANR	2025678	Callee	m_procd_addr . Value		2025559	0					
ANR	2025679	MemberAccess	m_procd_addr . Value		2025559	0					
ANR	2025680	Identifier	m_procd_addr		2025559	0					
ANR	2025681	Identifier	Value		2025559	1					
ANR	2025682	ArgumentList			2025559	1					
ANR	2025683	CompoundStatement		41:51:990:990	2025559	1					
ANR	2025684	Statement	dprintf	654:3:18719:18725	2025559	0	True				
ANR	2025685	Statement	(	654:10:18726:18726	2025559	1	True				
ANR	2025686	Statement	D_ALWAYS	654:11:18727:18734	2025559	2	True				
ANR	2025687	Statement	","	654:19:18735:18735	2025559	3	True				
ANR	2025688	Statement	"""recover_from_procd_error: """	655:11:18748:18775	2025559	4	True				
ANR	2025689	Statement	"""error initializing ProcFamilyClient\\n"""	656:15:18792:18830	2025559	5	True				
ANR	2025690	Statement	)	656:54:18831:18831	2025559	6	True				
ANR	2025691	ExpressionStatement		656:55:18832:18832	2025559	7	True				
ANR	2025692	Statement	delete	657:3:18837:18842	2025559	8	True				
ANR	2025693	ExpressionStatement	m_client	657:10:18844:18852	2025559	9	True				
ANR	2025694	Identifier	m_client		2025559	0					
ANR	2025695	ExpressionStatement	m_client = NULL	658:3:18857:18872	2025559	10	True				
ANR	2025696	AssignmentExpression	m_client = NULL		2025559	0		=			
ANR	2025697	Identifier	m_client		2025559	0					
ANR	2025698	Identifier	NULL		2025559	1					
ANR	2025699	ReturnType	void		2025559	1					
ANR	2025700	Identifier	ProcFamilyProxy :: recover_from_procd_error		2025559	2					
ANR	2025701	ParameterList			2025559	3					
ANR	2025702	CFGEntryNode	ENTRY		2025559		True				
ANR	2025703	CFGExitNode	EXIT		2025559		True				
ANR	2025704	Symbol	m_procd_addr		2025559						
ANR	2025705	Symbol	m_procd_pid		2025559						
ANR	2025706	Symbol	NULL		2025559						
ANR	2025707	Symbol	m_client -> initialize		2025559						
ANR	2025708	Symbol	start_procd		2025559						
ANR	2025709	Symbol	false		2025559						
ANR	2025710	Symbol	D_ALWAYS		2025559						
ANR	2025711	Symbol	param_boolean		2025559						
ANR	2025712	Symbol	m_client		2025559						
ANR	2025713	Symbol	m_procd_addr . Value		2025559						
ANR	2025714	Symbol	* m_client		2025559						
ANR	2025715	Function	ProcFamilyProxy :: procd_reaper	663:0:18884:19278							
ANR	2025716	FunctionDef	"ProcFamilyProxy :: procd_reaper (int pid , int status)"		2025715	0					
ANR	2025717	CompoundStatement		665:0:18939:19278	2025715	0					
ANR	2025718	IfStatement	if ( ( m_procd_pid == - 1 ) || ( pid != m_procd_pid ) )		2025715	0					
ANR	2025719	Condition	( m_procd_pid == - 1 ) || ( pid != m_procd_pid )	666:5:18946:18988	2025715	0	True				
ANR	2025720	OrExpression	( m_procd_pid == - 1 ) || ( pid != m_procd_pid )		2025715	0		||			
ANR	2025721	EqualityExpression	m_procd_pid == - 1		2025715	0		==			
ANR	2025722	Identifier	m_procd_pid		2025715	0					
ANR	2025723	UnaryOperationExpression	- 1		2025715	1					
ANR	2025724	UnaryOperator	-		2025715	0					
ANR	2025725	PrimaryExpression	1		2025715	1					
ANR	2025726	EqualityExpression	pid != m_procd_pid		2025715	1		!=			
ANR	2025727	Identifier	pid		2025715	0					
ANR	2025728	Identifier	m_procd_pid		2025715	1					
ANR	2025729	CompoundStatement		2:50:51:51	2025715	1					
ANR	2025730	ExpressionStatement	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited with status %d\\n"" , pid , status )"	667:2:18995:19099	2025715	0	True				
ANR	2025731	CallExpression	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited with status %d\\n"" , pid , status )"		2025715	0					
ANR	2025732	Callee	dprintf		2025715	0					
ANR	2025733	Identifier	dprintf		2025715	0					
ANR	2025734	ArgumentList	D_ALWAYS		2025715	1					
ANR	2025735	Argument	D_ALWAYS		2025715	0					
ANR	2025736	Identifier	D_ALWAYS		2025715	0					
ANR	2025737	Argument	"""procd (pid = %d) exited with status %d\\n"""		2025715	1					
ANR	2025738	PrimaryExpression	"""procd (pid = %d) exited with status %d\\n"""		2025715	0					
ANR	2025739	Argument	pid		2025715	2					
ANR	2025740	Identifier	pid		2025715	0					
ANR	2025741	Argument	status		2025715	3					
ANR	2025742	Identifier	status		2025715	0					
ANR	2025743	ElseStatement	else		2025715	0					
ANR	2025744	CompoundStatement		8:6:170:170	2025715	0					
ANR	2025745	ExpressionStatement	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited unexpectedly with status %d\\n"" , pid , status )"	673:2:19114:19231	2025715	0	True				
ANR	2025746	CallExpression	"dprintf ( D_ALWAYS , ""procd (pid = %d) exited unexpectedly with status %d\\n"" , pid , status )"		2025715	0					
ANR	2025747	Callee	dprintf		2025715	0					
ANR	2025748	Identifier	dprintf		2025715	0					
ANR	2025749	ArgumentList	D_ALWAYS		2025715	1					
ANR	2025750	Argument	D_ALWAYS		2025715	0					
ANR	2025751	Identifier	D_ALWAYS		2025715	0					
ANR	2025752	Argument	"""procd (pid = %d) exited unexpectedly with status %d\\n"""		2025715	1					
ANR	2025753	PrimaryExpression	"""procd (pid = %d) exited unexpectedly with status %d\\n"""		2025715	0					
ANR	2025754	Argument	pid		2025715	2					
ANR	2025755	Identifier	pid		2025715	0					
ANR	2025756	Argument	status		2025715	3					
ANR	2025757	Identifier	status		2025715	0					
ANR	2025758	ExpressionStatement	recover_from_procd_error ( )	677:2:19235:19261	2025715	1	True				
ANR	2025759	CallExpression	recover_from_procd_error ( )		2025715	0					
ANR	2025760	Callee	recover_from_procd_error		2025715	0					
ANR	2025761	Identifier	recover_from_procd_error		2025715	0					
ANR	2025762	ArgumentList			2025715	1					
ANR	2025763	ReturnStatement	return 0 ;	680:1:19268:19276	2025715	1	True				
ANR	2025764	PrimaryExpression	0		2025715	0					
ANR	2025765	ReturnType	int		2025715	1					
ANR	2025766	Identifier	ProcFamilyProxy :: procd_reaper		2025715	2					
ANR	2025767	ParameterList	"int pid , int status"		2025715	3					
ANR	2025768	Parameter	int pid	664:30:18918:18924	2025715	0	True				
ANR	2025769	ParameterType	int		2025715	0					
ANR	2025770	Identifier	pid		2025715	1					
ANR	2025771	Parameter	int status	664:39:18927:18936	2025715	1	True				
ANR	2025772	ParameterType	int		2025715	0					
ANR	2025773	Identifier	status		2025715	1					
ANR	2025774	CFGEntryNode	ENTRY		2025715		True				
ANR	2025775	CFGExitNode	EXIT		2025715		True				
ANR	2025776	Symbol	m_procd_pid		2025715						
ANR	2025777	Symbol	D_ALWAYS		2025715						
ANR	2025778	Symbol	pid		2025715						
ANR	2025779	Symbol	status		2025715						
