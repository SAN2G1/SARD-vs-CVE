command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2504296	File	data/converged/CVE-2011-4930_htcondor/src_classad_classad.cpp								
ANR	2504297	DeclStmt									
ANR	2504298	Decl							void	void ( char * )	to_lower
ANR	2504299	DeclStmt									
ANR	2504300	Decl							bool	bool	_useOldClassAdSemantics
ANR	2504301	DeclStmt									
ANR	2504302	Decl							string	string	CondorErrMsg
ANR	2504303	DeclStmt									
ANR	2504304	Decl							int	int	CondorErrno
ANR	2504305	Function	ClassAdLibraryVersion	43:0:1503:1685							
ANR	2504306	FunctionDef	"ClassAdLibraryVersion (int & major , int & minor , int & patch)"		2504305	0					
ANR	2504307	CompoundStatement		44:0:1566:1685	2504305	0					
ANR	2504308	ExpressionStatement	major = CLASSAD_VERSION_MAJOR	45:4:1572:1601	2504305	0	True				
ANR	2504309	AssignmentExpression	major = CLASSAD_VERSION_MAJOR		2504305	0		=			
ANR	2504310	Identifier	major		2504305	0					
ANR	2504311	Identifier	CLASSAD_VERSION_MAJOR		2504305	1					
ANR	2504312	ExpressionStatement	minor = CLASSAD_VERSION_MINOR	46:4:1607:1636	2504305	1	True				
ANR	2504313	AssignmentExpression	minor = CLASSAD_VERSION_MINOR		2504305	0		=			
ANR	2504314	Identifier	minor		2504305	0					
ANR	2504315	Identifier	CLASSAD_VERSION_MINOR		2504305	1					
ANR	2504316	ExpressionStatement	patch = CLASSAD_VERSION_PATCH	47:4:1642:1671	2504305	2	True				
ANR	2504317	AssignmentExpression	patch = CLASSAD_VERSION_PATCH		2504305	0		=			
ANR	2504318	Identifier	patch		2504305	0					
ANR	2504319	Identifier	CLASSAD_VERSION_PATCH		2504305	1					
ANR	2504320	ReturnStatement	return ;	48:4:1677:1683	2504305	3	True				
ANR	2504321	ReturnType	void		2504305	1					
ANR	2504322	Identifier	ClassAdLibraryVersion		2504305	2					
ANR	2504323	ParameterList	"int & major , int & minor , int & patch"		2504305	3					
ANR	2504324	Parameter	int & major	43:27:1530:1539	2504305	0	True				
ANR	2504325	ParameterType	int &		2504305	0					
ANR	2504326	Identifier	major		2504305	1					
ANR	2504327	Parameter	int & minor	43:39:1542:1551	2504305	1	True				
ANR	2504328	ParameterType	int &		2504305	0					
ANR	2504329	Identifier	minor		2504305	1					
ANR	2504330	Parameter	int & patch	43:51:1554:1563	2504305	2	True				
ANR	2504331	ParameterType	int &		2504305	0					
ANR	2504332	Identifier	patch		2504305	1					
ANR	2504333	CFGEntryNode	ENTRY		2504305		True				
ANR	2504334	CFGExitNode	EXIT		2504305		True				
ANR	2504335	Symbol	patch		2504305						
ANR	2504336	Symbol	major		2504305						
ANR	2504337	Symbol	minor		2504305						
ANR	2504338	Symbol	CLASSAD_VERSION_MAJOR		2504305						
ANR	2504339	Symbol	CLASSAD_VERSION_MINOR		2504305						
ANR	2504340	Symbol	CLASSAD_VERSION_PATCH		2504305						
ANR	2504341	Function	ClassAdLibraryVersion	51:0:1688:1791							
ANR	2504342	FunctionDef	ClassAdLibraryVersion (string & version_string)		2504341	0					
ANR	2504343	CompoundStatement		52:0:1739:1791	2504341	0					
ANR	2504344	ExpressionStatement	version_string = CLASSAD_VERSION	53:4:1745:1777	2504341	0	True				
ANR	2504345	AssignmentExpression	version_string = CLASSAD_VERSION		2504341	0		=			
ANR	2504346	Identifier	version_string		2504341	0					
ANR	2504347	Identifier	CLASSAD_VERSION		2504341	1					
ANR	2504348	ReturnStatement	return ;	54:4:1783:1789	2504341	1	True				
ANR	2504349	ReturnType	void		2504341	1					
ANR	2504350	Identifier	ClassAdLibraryVersion		2504341	2					
ANR	2504351	ParameterList	string & version_string		2504341	3					
ANR	2504352	Parameter	string & version_string	51:27:1715:1736	2504341	0	True				
ANR	2504353	ParameterType	string &		2504341	0					
ANR	2504354	Identifier	version_string		2504341	1					
ANR	2504355	CFGEntryNode	ENTRY		2504341		True				
ANR	2504356	CFGExitNode	EXIT		2504341		True				
ANR	2504357	Symbol	version_string		2504341						
ANR	2504358	Symbol	CLASSAD_VERSION		2504341						
ANR	2504359	Function	ClassAd :: ClassAd	57:0:1794:1918							
ANR	2504360	FunctionDef	ClassAd :: ClassAd ()		2504359	0					
ANR	2504361	CompoundStatement		59:0:1815:1918	2504359	0					
ANR	2504362	ExpressionStatement	nodeKind = CLASSAD_NODE	60:1:1818:1841	2504359	0	True				
ANR	2504363	AssignmentExpression	nodeKind = CLASSAD_NODE		2504359	0		=			
ANR	2504364	Identifier	nodeKind		2504359	0					
ANR	2504365	Identifier	CLASSAD_NODE		2504359	1					
ANR	2504366	ExpressionStatement	EnableDirtyTracking ( )	61:1:1844:1865	2504359	1	True				
ANR	2504367	CallExpression	EnableDirtyTracking ( )		2504359	0					
ANR	2504368	Callee	EnableDirtyTracking		2504359	0					
ANR	2504369	Identifier	EnableDirtyTracking		2504359	0					
ANR	2504370	ArgumentList			2504359	1					
ANR	2504371	ExpressionStatement	chained_parent_ad = NULL	62:1:1868:1892	2504359	2	True				
ANR	2504372	AssignmentExpression	chained_parent_ad = NULL		2504359	0		=			
ANR	2504373	Identifier	chained_parent_ad		2504359	0					
ANR	2504374	Identifier	NULL		2504359	1					
ANR	2504375	ExpressionStatement	alternateScope = NULL	63:1:1895:1916	2504359	3	True				
ANR	2504376	AssignmentExpression	alternateScope = NULL		2504359	0		=			
ANR	2504377	Identifier	alternateScope		2504359	0					
ANR	2504378	Identifier	NULL		2504359	1					
ANR	2504379	Identifier	ClassAd :: ClassAd		2504359	1					
ANR	2504380	ParameterList			2504359	2					
ANR	2504381	CFGEntryNode	ENTRY		2504359		True				
ANR	2504382	CFGExitNode	EXIT		2504359		True				
ANR	2504383	Symbol	NULL		2504359						
ANR	2504384	Symbol	chained_parent_ad		2504359						
ANR	2504385	Symbol	nodeKind		2504359						
ANR	2504386	Symbol	CLASSAD_NODE		2504359						
ANR	2504387	Symbol	alternateScope		2504359						
ANR	2504388	Function	ClassAd :: ClassAd	67:0:1922:1989							
ANR	2504389	FunctionDef	ClassAd :: ClassAd (const ClassAd & ad)		2504388	0					
ANR	2504390	CompoundStatement		69:0:1960:1989	2504388	0					
ANR	2504391	ExpressionStatement	CopyFrom ( ad )	70:4:1966:1978	2504388	0	True				
ANR	2504392	CallExpression	CopyFrom ( ad )		2504388	0					
ANR	2504393	Callee	CopyFrom		2504388	0					
ANR	2504394	Identifier	CopyFrom		2504388	0					
ANR	2504395	ArgumentList	ad		2504388	1					
ANR	2504396	Argument	ad		2504388	0					
ANR	2504397	Identifier	ad		2504388	0					
ANR	2504398	ReturnStatement	return ;	71:1:1981:1987	2504388	1	True				
ANR	2504399	Identifier	ClassAd :: ClassAd		2504388	1					
ANR	2504400	ParameterList	const ClassAd & ad		2504388	2					
ANR	2504401	Parameter	const ClassAd & ad	68:9:1941:1957	2504388	0	True				
ANR	2504402	ParameterType	const ClassAd &		2504388	0					
ANR	2504403	Identifier	ad		2504388	1					
ANR	2504404	CFGEntryNode	ENTRY		2504388		True				
ANR	2504405	CFGExitNode	EXIT		2504388		True				
ANR	2504406	Symbol	ad		2504388						
ANR	2504407	Function	operator =	76:0:2013:2101							
ANR	2504408	FunctionDef	operator = (const ClassAd & rhs)		2504407	0					
ANR	2504409	CompoundStatement		77:0:2043:2101	2504407	0					
ANR	2504410	IfStatement	if ( this != & rhs )		2504407	0					
ANR	2504411	Condition	this != & rhs	78:5:2050:2061	2504407	0	True				
ANR	2504412	EqualityExpression	this != & rhs		2504407	0		!=			
ANR	2504413	Identifier	this		2504407	0					
ANR	2504414	UnaryOperationExpression	& rhs		2504407	1					
ANR	2504415	UnaryOperator	&		2504407	0					
ANR	2504416	Identifier	rhs		2504407	1					
ANR	2504417	CompoundStatement		2:19:20:20	2504407	1					
ANR	2504418	ExpressionStatement	CopyFrom ( rhs )	79:2:2068:2081	2504407	0	True				
ANR	2504419	CallExpression	CopyFrom ( rhs )		2504407	0					
ANR	2504420	Callee	CopyFrom		2504407	0					
ANR	2504421	Identifier	CopyFrom		2504407	0					
ANR	2504422	ArgumentList	rhs		2504407	1					
ANR	2504423	Argument	rhs		2504407	0					
ANR	2504424	Identifier	rhs		2504407	0					
ANR	2504425	ReturnStatement	return * this ;	81:1:2087:2099	2504407	1	True				
ANR	2504426	UnaryOperationExpression	* this		2504407	0					
ANR	2504427	UnaryOperator	*		2504407	0					
ANR	2504428	Identifier	this		2504407	1					
ANR	2504429	Identifier	operator =		2504407	1					
ANR	2504430	ParameterList	const ClassAd & rhs		2504407	2					
ANR	2504431	Parameter	const ClassAd & rhs	76:10:2023:2040	2504407	0	True				
ANR	2504432	ParameterType	const ClassAd &		2504407	0					
ANR	2504433	Identifier	rhs		2504407	1					
ANR	2504434	CFGEntryNode	ENTRY		2504407		True				
ANR	2504435	CFGExitNode	EXIT		2504407		True				
ANR	2504436	Symbol	* this		2504407						
ANR	2504437	Symbol	& rhs		2504407						
ANR	2504438	Symbol	this		2504407						
ANR	2504439	Symbol	rhs		2504407						
ANR	2504440	Function	ClassAd :: CopyFrom	84:0:2104:2850							
ANR	2504441	FunctionDef	ClassAd :: CopyFrom (const ClassAd & ad)		2504440	0					
ANR	2504442	CompoundStatement		86:0:2149:2850	2504440	0					
ANR	2504443	IdentifierDeclStatement	AttrList :: const_iterator itr ;	87:1:2152:2180	2504440	0	True				
ANR	2504444	IdentifierDecl	itr		2504440	0					
ANR	2504445	IdentifierDeclType	AttrList :: const_iterator		2504440	0					
ANR	2504446	Identifier	itr		2504440	1					
ANR	2504447	IdentifierDeclStatement	ExprTree * tree ;	88:1:2183:2202	2504440	1	True				
ANR	2504448	IdentifierDecl	* tree		2504440	0					
ANR	2504449	IdentifierDeclType	ExprTree *		2504440	0					
ANR	2504450	Identifier	tree		2504440	1					
ANR	2504451	IdentifierDeclStatement	bool succeeded ;	89:1:2205:2242	2504440	2	True				
ANR	2504452	IdentifierDecl	succeeded		2504440	0					
ANR	2504453	IdentifierDeclType	bool		2504440	0					
ANR	2504454	Identifier	succeeded		2504440	1					
ANR	2504455	ExpressionStatement	succeeded = true	91:4:2249:2265	2504440	3	True				
ANR	2504456	AssignmentExpression	succeeded = true		2504440	0		=			
ANR	2504457	Identifier	succeeded		2504440	0					
ANR	2504458	Identifier	true		2504440	1					
ANR	2504459	IfStatement	if ( this == & ad )		2504440	4					
ANR	2504460	Condition	this == & ad	92:5:2272:2282	2504440	0	True				
ANR	2504461	EqualityExpression	this == & ad		2504440	0		==			
ANR	2504462	Identifier	this		2504440	0					
ANR	2504463	UnaryOperationExpression	& ad		2504440	1					
ANR	2504464	UnaryOperator	&		2504440	0					
ANR	2504465	Identifier	ad		2504440	1					
ANR	2504466	CompoundStatement		7:18:135:135	2504440	1					
ANR	2504467	ExpressionStatement	succeeded = false	93:2:2289:2306	2504440	0	True				
ANR	2504468	AssignmentExpression	succeeded = false		2504440	0		=			
ANR	2504469	Identifier	succeeded		2504440	0					
ANR	2504470	Identifier	false		2504440	1					
ANR	2504471	ElseStatement	else		2504440	0					
ANR	2504472	CompoundStatement		9:8:166:166	2504440	0					
ANR	2504473	ExpressionStatement	Clear ( )	95:2:2320:2328	2504440	0	True				
ANR	2504474	CallExpression	Clear ( )		2504440	0					
ANR	2504475	Callee	Clear		2504440	0					
ANR	2504476	Identifier	Clear		2504440	0					
ANR	2504477	ArgumentList			2504440	1					
ANR	2504478	ExpressionStatement	ExprTree :: CopyFrom ( ad )	96:8:2338:2360	2504440	1	True				
ANR	2504479	CallExpression	ExprTree :: CopyFrom ( ad )		2504440	0					
ANR	2504480	Callee	ExprTree :: CopyFrom		2504440	0					
ANR	2504481	Identifier	ExprTree :: CopyFrom		2504440	0					
ANR	2504482	ArgumentList	ad		2504440	1					
ANR	2504483	Argument	ad		2504440	0					
ANR	2504484	Identifier	ad		2504440	0					
ANR	2504485	ExpressionStatement	chained_parent_ad = ad . chained_parent_ad	97:2:2364:2404	2504440	2	True				
ANR	2504486	AssignmentExpression	chained_parent_ad = ad . chained_parent_ad		2504440	0		=			
ANR	2504487	Identifier	chained_parent_ad		2504440	0					
ANR	2504488	MemberAccess	ad . chained_parent_ad		2504440	1					
ANR	2504489	Identifier	ad		2504440	0					
ANR	2504490	Identifier	chained_parent_ad		2504440	1					
ANR	2504491	ExpressionStatement	alternateScope = ad . alternateScope	98:2:2408:2442	2504440	3	True				
ANR	2504492	AssignmentExpression	alternateScope = ad . alternateScope		2504440	0		=			
ANR	2504493	Identifier	alternateScope		2504440	0					
ANR	2504494	MemberAccess	ad . alternateScope		2504440	1					
ANR	2504495	Identifier	ad		2504440	0					
ANR	2504496	Identifier	alternateScope		2504440	1					
ANR	2504497	ExpressionStatement	DisableDirtyTracking ( )	100:2:2449:2471	2504440	4	True				
ANR	2504498	CallExpression	DisableDirtyTracking ( )		2504440	0					
ANR	2504499	Callee	DisableDirtyTracking		2504440	0					
ANR	2504500	Identifier	DisableDirtyTracking		2504440	0					
ANR	2504501	ArgumentList			2504440	1					
ANR	2504502	ForStatement	for ( itr = ad . attrList . begin ( ) ; itr != ad . attrList . end ( ) ; itr ++ )		2504440	5					
ANR	2504503	ForInit	itr = ad . attrList . begin ( ) ;	101:7:2480:2506	2504440	0	True				
ANR	2504504	AssignmentExpression	itr = ad . attrList . begin ( )		2504440	0		=			
ANR	2504505	Identifier	itr		2504440	0					
ANR	2504506	CallExpression	ad . attrList . begin ( )		2504440	1					
ANR	2504507	Callee	ad . attrList . begin		2504440	0					
ANR	2504508	MemberAccess	ad . attrList . begin		2504440	0					
ANR	2504509	MemberAccess	ad . attrList		2504440	0					
ANR	2504510	Identifier	ad		2504440	0					
ANR	2504511	Identifier	attrList		2504440	1					
ANR	2504512	Identifier	begin		2504440	1					
ANR	2504513	ArgumentList			2504440	1					
ANR	2504514	Condition	itr != ad . attrList . end ( )	101:35:2508:2532	2504440	1	True				
ANR	2504515	EqualityExpression	itr != ad . attrList . end ( )		2504440	0		!=			
ANR	2504516	Identifier	itr		2504440	0					
ANR	2504517	CallExpression	ad . attrList . end ( )		2504440	1					
ANR	2504518	Callee	ad . attrList . end		2504440	0					
ANR	2504519	MemberAccess	ad . attrList . end		2504440	0					
ANR	2504520	MemberAccess	ad . attrList		2504440	0					
ANR	2504521	Identifier	ad		2504440	0					
ANR	2504522	Identifier	attrList		2504440	1					
ANR	2504523	Identifier	end		2504440	1					
ANR	2504524	ArgumentList			2504440	1					
ANR	2504525	PostIncDecOperationExpression	itr ++	101:62:2535:2539	2504440	2	True				
ANR	2504526	Identifier	itr		2504440	0					
ANR	2504527	IncDec	++		2504440	1					
ANR	2504528	CompoundStatement		16:70:393:393	2504440	3					
ANR	2504529	IfStatement	if ( ! ( tree = itr -> second -> Copy ( ) ) )		2504440	0					
ANR	2504530	Condition	! ( tree = itr -> second -> Copy ( ) )	102:7:2552:2583	2504440	0	True				
ANR	2504531	UnaryOperationExpression	! ( tree = itr -> second -> Copy ( ) )		2504440	0					
ANR	2504532	UnaryOperator	!		2504440	0					
ANR	2504533	AssignmentExpression	tree = itr -> second -> Copy ( )		2504440	1		=			
ANR	2504534	Identifier	tree		2504440	0					
ANR	2504535	CallExpression	itr -> second -> Copy ( )		2504440	1					
ANR	2504536	Callee	itr -> second -> Copy		2504440	0					
ANR	2504537	PtrMemberAccess	itr -> second -> Copy		2504440	0					
ANR	2504538	PtrMemberAccess	itr -> second		2504440	0					
ANR	2504539	Identifier	itr		2504440	0					
ANR	2504540	Identifier	second		2504440	1					
ANR	2504541	Identifier	Copy		2504440	1					
ANR	2504542	ArgumentList			2504440	1					
ANR	2504543	CompoundStatement		17:42:437:437	2504440	1					
ANR	2504544	ExpressionStatement	Clear ( )	103:4:2593:2601	2504440	0	True				
ANR	2504545	CallExpression	Clear ( )		2504440	0					
ANR	2504546	Callee	Clear		2504440	0					
ANR	2504547	Identifier	Clear		2504440	0					
ANR	2504548	ArgumentList			2504440	1					
ANR	2504549	ExpressionStatement	CondorErrno = ERR_MEM_ALLOC_FAILED	104:4:2607:2641	2504440	1	True				
ANR	2504550	AssignmentExpression	CondorErrno = ERR_MEM_ALLOC_FAILED		2504440	0		=			
ANR	2504551	Identifier	CondorErrno		2504440	0					
ANR	2504552	Identifier	ERR_MEM_ALLOC_FAILED		2504440	1					
ANR	2504553	ExpressionStatement	"CondorErrMsg = """""	105:4:2647:2664	2504440	2	True				
ANR	2504554	AssignmentExpression	"CondorErrMsg = """""		2504440	0		=			
ANR	2504555	Identifier	CondorErrMsg		2504440	0					
ANR	2504556	PrimaryExpression	""""""		2504440	1					
ANR	2504557	ExpressionStatement	succeeded = false	106:16:2682:2699	2504440	3	True				
ANR	2504558	AssignmentExpression	succeeded = false		2504440	0		=			
ANR	2504559	Identifier	succeeded		2504440	0					
ANR	2504560	Identifier	false		2504440	1					
ANR	2504561	BreakStatement	break ;	107:16:2717:2722	2504440	4	True				
ANR	2504562	ExpressionStatement	tree -> SetParentScope ( this )	109:3:2732:2758	2504440	1	True				
ANR	2504563	CallExpression	tree -> SetParentScope ( this )		2504440	0					
ANR	2504564	Callee	tree -> SetParentScope		2504440	0					
ANR	2504565	PtrMemberAccess	tree -> SetParentScope		2504440	0					
ANR	2504566	Identifier	tree		2504440	0					
ANR	2504567	Identifier	SetParentScope		2504440	1					
ANR	2504568	ArgumentList	this		2504440	1					
ANR	2504569	Argument	this		2504440	0					
ANR	2504570	Identifier	this		2504440	0					
ANR	2504571	ExpressionStatement	attrList [ itr -> first ] = tree	110:3:2770:2797	2504440	2	True				
ANR	2504572	AssignmentExpression	attrList [ itr -> first ] = tree		2504440	0		=			
ANR	2504573	ArrayIndexing	attrList [ itr -> first ]		2504440	0					
ANR	2504574	Identifier	attrList		2504440	0					
ANR	2504575	PtrMemberAccess	itr -> first		2504440	1					
ANR	2504576	Identifier	itr		2504440	0					
ANR	2504577	Identifier	first		2504440	1					
ANR	2504578	Identifier	tree		2504440	1					
ANR	2504579	ExpressionStatement	EnableDirtyTracking ( )	112:2:2805:2826	2504440	6	True				
ANR	2504580	CallExpression	EnableDirtyTracking ( )		2504440	0					
ANR	2504581	Callee	EnableDirtyTracking		2504440	0					
ANR	2504582	Identifier	EnableDirtyTracking		2504440	0					
ANR	2504583	ArgumentList			2504440	1					
ANR	2504584	ReturnStatement	return succeeded ;	114:1:2832:2848	2504440	5	True				
ANR	2504585	Identifier	succeeded		2504440	0					
ANR	2504586	ReturnType	bool		2504440	1					
ANR	2504587	Identifier	ClassAd :: CopyFrom		2504440	2					
ANR	2504588	ParameterList	const ClassAd & ad		2504440	3					
ANR	2504589	Parameter	const ClassAd & ad	85:10:2129:2145	2504440	0	True				
ANR	2504590	ParameterType	const ClassAd &		2504440	0					
ANR	2504591	Identifier	ad		2504440	1					
ANR	2504592	CFGEntryNode	ENTRY		2504440		True				
ANR	2504593	CFGExitNode	EXIT		2504440		True				
ANR	2504594	Symbol	ad . alternateScope		2504440						
ANR	2504595	Symbol	& ad		2504440						
ANR	2504596	Symbol	* itr -> first		2504440						
ANR	2504597	Symbol	chained_parent_ad		2504440						
ANR	2504598	Symbol	* itr -> second		2504440						
ANR	2504599	Symbol	itr -> first		2504440						
ANR	2504600	Symbol	ad . attrList		2504440						
ANR	2504601	Symbol	alternateScope		2504440						
ANR	2504602	Symbol	itr -> second		2504440						
ANR	2504603	Symbol	itr -> second -> Copy		2504440						
ANR	2504604	Symbol	ad		2504440						
ANR	2504605	Symbol	ad . chained_parent_ad		2504440						
ANR	2504606	Symbol	itr		2504440						
ANR	2504607	Symbol	ad . attrList . begin		2504440						
ANR	2504608	Symbol	tree		2504440						
ANR	2504609	Symbol	this		2504440						
ANR	2504610	Symbol	false		2504440						
ANR	2504611	Symbol	ERR_MEM_ALLOC_FAILED		2504440						
ANR	2504612	Symbol	* itr		2504440						
ANR	2504613	Symbol	attrList		2504440						
ANR	2504614	Symbol	CondorErrno		2504440						
ANR	2504615	Symbol	ad . attrList . end		2504440						
ANR	2504616	Symbol	CondorErrMsg		2504440						
ANR	2504617	Symbol	true		2504440						
ANR	2504618	Symbol	* attrList		2504440						
ANR	2504619	Symbol	* * itr		2504440						
ANR	2504620	Symbol	succeeded		2504440						
ANR	2504621	Function	ClassAd :: UpdateFromChain	117:0:2853:3040							
ANR	2504622	FunctionDef	ClassAd :: UpdateFromChain (const ClassAd & ad)		2504621	0					
ANR	2504623	CompoundStatement		119:0:2905:3040	2504621	0					
ANR	2504624	IdentifierDeclStatement	ClassAd * parent = ad . chained_parent_ad ;	120:1:2908:2946	2504621	0	True				
ANR	2504625	IdentifierDecl	* parent = ad . chained_parent_ad		2504621	0					
ANR	2504626	IdentifierDeclType	ClassAd *		2504621	0					
ANR	2504627	Identifier	parent		2504621	1					
ANR	2504628	AssignmentExpression	* parent = ad . chained_parent_ad		2504621	2		=			
ANR	2504629	Identifier	parent		2504621	0					
ANR	2504630	MemberAccess	ad . chained_parent_ad		2504621	1					
ANR	2504631	Identifier	ad		2504621	0					
ANR	2504632	Identifier	chained_parent_ad		2504621	1					
ANR	2504633	IfStatement	if ( parent )		2504621	1					
ANR	2504634	Condition	parent	121:4:2952:2957	2504621	0	True				
ANR	2504635	Identifier	parent		2504621	0					
ANR	2504636	CompoundStatement		3:12:54:54	2504621	1					
ANR	2504637	IfStatement	if ( ! UpdateFromChain ( * parent ) )		2504621	0					
ANR	2504638	Condition	! UpdateFromChain ( * parent )	122:5:2967:2991	2504621	0	True				
ANR	2504639	UnaryOperationExpression	! UpdateFromChain ( * parent )		2504621	0					
ANR	2504640	UnaryOperator	!		2504621	0					
ANR	2504641	CallExpression	UpdateFromChain ( * parent )		2504621	1					
ANR	2504642	Callee	UpdateFromChain		2504621	0					
ANR	2504643	Identifier	UpdateFromChain		2504621	0					
ANR	2504644	ArgumentList	* parent		2504621	1					
ANR	2504645	Argument	* parent		2504621	0					
ANR	2504646	UnaryOperationExpression	* parent		2504621	0					
ANR	2504647	UnaryOperator	*		2504621	0					
ANR	2504648	Identifier	parent		2504621	1					
ANR	2504649	CompoundStatement		4:32:88:88	2504621	1					
ANR	2504650	ReturnStatement	return false ;	123:3:2999:3011	2504621	0	True				
ANR	2504651	Identifier	false		2504621	0					
ANR	2504652	ReturnStatement	return Update ( ad ) ;	126:1:3021:3038	2504621	2	True				
ANR	2504653	CallExpression	Update ( ad )		2504621	0					
ANR	2504654	Callee	Update		2504621	0					
ANR	2504655	Identifier	Update		2504621	0					
ANR	2504656	ArgumentList	ad		2504621	1					
ANR	2504657	Argument	ad		2504621	0					
ANR	2504658	Identifier	ad		2504621	0					
ANR	2504659	ReturnType	bool		2504621	1					
ANR	2504660	Identifier	ClassAd :: UpdateFromChain		2504621	2					
ANR	2504661	ParameterList	const ClassAd & ad		2504621	3					
ANR	2504662	Parameter	const ClassAd & ad	118:17:2885:2901	2504621	0	True				
ANR	2504663	ParameterType	const ClassAd &		2504621	0					
ANR	2504664	Identifier	ad		2504621	1					
ANR	2504665	CFGEntryNode	ENTRY		2504621		True				
ANR	2504666	CFGExitNode	EXIT		2504621		True				
ANR	2504667	Symbol	parent		2504621						
ANR	2504668	Symbol	UpdateFromChain		2504621						
ANR	2504669	Symbol	ad		2504621						
ANR	2504670	Symbol	* parent		2504621						
ANR	2504671	Symbol	ad . chained_parent_ad		2504621						
ANR	2504672	Symbol	false		2504621						
ANR	2504673	Symbol	Update		2504621						
ANR	2504674	Function	ClassAd :: CopyFromChain	129:0:3043:3193							
ANR	2504675	FunctionDef	ClassAd :: CopyFromChain (const ClassAd & ad)		2504674	0					
ANR	2504676	CompoundStatement		131:0:3093:3193	2504674	0					
ANR	2504677	IfStatement	if ( this == & ad )		2504674	0					
ANR	2504678	Condition	this == & ad	132:5:3100:3110	2504674	0	True				
ANR	2504679	EqualityExpression	this == & ad		2504674	0		==			
ANR	2504680	Identifier	this		2504674	0					
ANR	2504681	UnaryOperationExpression	& ad		2504674	1					
ANR	2504682	UnaryOperator	&		2504674	0					
ANR	2504683	Identifier	ad		2504674	1					
ANR	2504684	ReturnStatement	return false ;	132:18:3113:3125	2504674	1	True				
ANR	2504685	Identifier	false		2504674	0					
ANR	2504686	ExpressionStatement	Clear ( )	134:1:3129:3137	2504674	1	True				
ANR	2504687	CallExpression	Clear ( )		2504674	0					
ANR	2504688	Callee	Clear		2504674	0					
ANR	2504689	Identifier	Clear		2504674	0					
ANR	2504690	ArgumentList			2504674	1					
ANR	2504691	ExpressionStatement	ExprTree :: CopyFrom ( ad )	135:1:3140:3162	2504674	2	True				
ANR	2504692	CallExpression	ExprTree :: CopyFrom ( ad )		2504674	0					
ANR	2504693	Callee	ExprTree :: CopyFrom		2504674	0					
ANR	2504694	Identifier	ExprTree :: CopyFrom		2504674	0					
ANR	2504695	ArgumentList	ad		2504674	1					
ANR	2504696	Argument	ad		2504674	0					
ANR	2504697	Identifier	ad		2504674	0					
ANR	2504698	ReturnStatement	return UpdateFromChain ( ad ) ;	136:1:3165:3191	2504674	3	True				
ANR	2504699	CallExpression	UpdateFromChain ( ad )		2504674	0					
ANR	2504700	Callee	UpdateFromChain		2504674	0					
ANR	2504701	Identifier	UpdateFromChain		2504674	0					
ANR	2504702	ArgumentList	ad		2504674	1					
ANR	2504703	Argument	ad		2504674	0					
ANR	2504704	Identifier	ad		2504674	0					
ANR	2504705	ReturnType	bool		2504674	1					
ANR	2504706	Identifier	ClassAd :: CopyFromChain		2504674	2					
ANR	2504707	ParameterList	const ClassAd & ad		2504674	3					
ANR	2504708	Parameter	const ClassAd & ad	130:15:3073:3089	2504674	0	True				
ANR	2504709	ParameterType	const ClassAd &		2504674	0					
ANR	2504710	Identifier	ad		2504674	1					
ANR	2504711	CFGEntryNode	ENTRY		2504674		True				
ANR	2504712	CFGExitNode	EXIT		2504674		True				
ANR	2504713	Symbol	UpdateFromChain		2504674						
ANR	2504714	Symbol	ad		2504674						
ANR	2504715	Symbol	this		2504674						
ANR	2504716	Symbol	false		2504674						
ANR	2504717	Symbol	& ad		2504674						
ANR	2504718	Function	ClassAd :: SameAs	139:0:3196:4215							
ANR	2504719	FunctionDef	ClassAd :: SameAs (const ExprTree * tree)		2504718	0					
ANR	2504720	CompoundStatement		141:0:3246:4215	2504718	0					
ANR	2504721	IdentifierDeclStatement	bool is_same ;	142:4:3252:3264	2504718	0	True				
ANR	2504722	IdentifierDecl	is_same		2504718	0					
ANR	2504723	IdentifierDeclType	bool		2504718	0					
ANR	2504724	Identifier	is_same		2504718	1					
ANR	2504725	IfStatement	if ( this == tree )		2504718	1					
ANR	2504726	Condition	this == tree	144:8:3275:3286	2504718	0	True				
ANR	2504727	EqualityExpression	this == tree		2504718	0		==			
ANR	2504728	Identifier	this		2504718	0					
ANR	2504729	Identifier	tree		2504718	1					
ANR	2504730	CompoundStatement		4:22:42:42	2504718	1					
ANR	2504731	ExpressionStatement	is_same = true	145:8:3299:3313	2504718	0	True				
ANR	2504732	AssignmentExpression	is_same = true		2504718	0		=			
ANR	2504733	Identifier	is_same		2504718	0					
ANR	2504734	Identifier	true		2504718	1					
ANR	2504735	ElseStatement	else		2504718	0					
ANR	2504736	IfStatement	if ( tree -> GetKind ( ) != CLASSAD_NODE )		2504718	0					
ANR	2504737	Condition	tree -> GetKind ( ) != CLASSAD_NODE	146:14:3329:3359	2504718	0	True				
ANR	2504738	EqualityExpression	tree -> GetKind ( ) != CLASSAD_NODE		2504718	0		!=			
ANR	2504739	CallExpression	tree -> GetKind ( )		2504718	0					
ANR	2504740	Callee	tree -> GetKind		2504718	0					
ANR	2504741	PtrMemberAccess	tree -> GetKind		2504718	0					
ANR	2504742	Identifier	tree		2504718	0					
ANR	2504743	Identifier	GetKind		2504718	1					
ANR	2504744	ArgumentList			2504718	1					
ANR	2504745	Identifier	CLASSAD_NODE		2504718	1					
ANR	2504746	CompoundStatement		6:47:115:115	2504718	1					
ANR	2504747	ExpressionStatement	is_same = false	147:8:3372:3387	2504718	0	True				
ANR	2504748	AssignmentExpression	is_same = false		2504718	0		=			
ANR	2504749	Identifier	is_same		2504718	0					
ANR	2504750	Identifier	false		2504718	1					
ANR	2504751	ElseStatement	else		2504718	0					
ANR	2504752	CompoundStatement		9:7:161:189	2504718	0					
ANR	2504753	IdentifierDeclStatement	const ClassAd * other_classad ;	149:7:3408:3436	2504718	0	True				
ANR	2504754	IdentifierDecl	* other_classad		2504718	0					
ANR	2504755	IdentifierDeclType	const ClassAd *		2504718	0					
ANR	2504756	Identifier	other_classad		2504718	1					
ANR	2504757	ExpressionStatement	other_classad = ( const ClassAd * ) tree	151:7:3446:3484	2504718	1	True				
ANR	2504758	AssignmentExpression	other_classad = ( const ClassAd * ) tree		2504718	0		=			
ANR	2504759	Identifier	other_classad		2504718	0					
ANR	2504760	CastExpression	( const ClassAd * ) tree		2504718	1					
ANR	2504761	CastTarget	const ClassAd *		2504718	0					
ANR	2504762	Identifier	tree		2504718	1					
ANR	2504763	IfStatement	if ( attrList . size ( ) != other_classad -> attrList . size ( ) )		2504718	2					
ANR	2504764	Condition	attrList . size ( ) != other_classad -> attrList . size ( )	153:11:3498:3546	2504718	0	True				
ANR	2504765	EqualityExpression	attrList . size ( ) != other_classad -> attrList . size ( )		2504718	0		!=			
ANR	2504766	CallExpression	attrList . size ( )		2504718	0					
ANR	2504767	Callee	attrList . size		2504718	0					
ANR	2504768	MemberAccess	attrList . size		2504718	0					
ANR	2504769	Identifier	attrList		2504718	0					
ANR	2504770	Identifier	size		2504718	1					
ANR	2504771	ArgumentList			2504718	1					
ANR	2504772	CallExpression	other_classad -> attrList . size ( )		2504718	1					
ANR	2504773	Callee	other_classad -> attrList . size		2504718	0					
ANR	2504774	MemberAccess	other_classad -> attrList . size		2504718	0					
ANR	2504775	PtrMemberAccess	other_classad -> attrList		2504718	0					
ANR	2504776	Identifier	other_classad		2504718	0					
ANR	2504777	Identifier	attrList		2504718	1					
ANR	2504778	Identifier	size		2504718	1					
ANR	2504779	ArgumentList			2504718	1					
ANR	2504780	CompoundStatement		13:62:302:302	2504718	1					
ANR	2504781	ExpressionStatement	is_same = false	154:11:3562:3577	2504718	0	True				
ANR	2504782	AssignmentExpression	is_same = false		2504718	0		=			
ANR	2504783	Identifier	is_same		2504718	0					
ANR	2504784	Identifier	false		2504718	1					
ANR	2504785	ElseStatement	else		2504718	0					
ANR	2504786	CompoundStatement		18:11:398:426	2504718	0					
ANR	2504787	ExpressionStatement	is_same = true	156:11:3606:3620	2504718	0	True				
ANR	2504788	AssignmentExpression	is_same = true		2504718	0		=			
ANR	2504789	Identifier	is_same		2504718	0					
ANR	2504790	Identifier	true		2504718	1					
ANR	2504791	IdentifierDeclStatement	AttrList :: const_iterator itr ;	158:11:3645:3673	2504718	1	True				
ANR	2504792	IdentifierDecl	itr		2504718	0					
ANR	2504793	IdentifierDeclType	AttrList :: const_iterator		2504718	0					
ANR	2504794	Identifier	itr		2504718	1					
ANR	2504795	ForStatement	for ( itr = attrList . begin ( ) ; itr != attrList . end ( ) ; itr ++ )		2504718	2					
ANR	2504796	ForInit	itr = attrList . begin ( ) ;	159:16:3691:3713	2504718	0	True				
ANR	2504797	AssignmentExpression	itr = attrList . begin ( )		2504718	0		=			
ANR	2504798	Identifier	itr		2504718	0					
ANR	2504799	CallExpression	attrList . begin ( )		2504718	1					
ANR	2504800	Callee	attrList . begin		2504718	0					
ANR	2504801	MemberAccess	attrList . begin		2504718	0					
ANR	2504802	Identifier	attrList		2504718	0					
ANR	2504803	Identifier	begin		2504718	1					
ANR	2504804	ArgumentList			2504718	1					
ANR	2504805	Condition	itr != attrList . end ( )	159:40:3715:3735	2504718	1	True				
ANR	2504806	EqualityExpression	itr != attrList . end ( )		2504718	0		!=			
ANR	2504807	Identifier	itr		2504718	0					
ANR	2504808	CallExpression	attrList . end ( )		2504718	1					
ANR	2504809	Callee	attrList . end		2504718	0					
ANR	2504810	MemberAccess	attrList . end		2504718	0					
ANR	2504811	Identifier	attrList		2504718	0					
ANR	2504812	Identifier	end		2504718	1					
ANR	2504813	ArgumentList			2504718	1					
ANR	2504814	PostIncDecOperationExpression	itr ++	159:63:3738:3742	2504718	2	True				
ANR	2504815	Identifier	itr		2504718	0					
ANR	2504816	IncDec	++		2504718	1					
ANR	2504817	CompoundStatement		21:15:551:571	2504718	3					
ANR	2504818	IdentifierDeclStatement	ExprTree * this_tree ;	160:15:3762:3781	2504718	0	True				
ANR	2504819	IdentifierDecl	* this_tree		2504718	0					
ANR	2504820	IdentifierDeclType	ExprTree *		2504718	0					
ANR	2504821	Identifier	this_tree		2504718	1					
ANR	2504822	IdentifierDeclStatement	ExprTree * other_tree ;	161:15:3798:3818	2504718	1	True				
ANR	2504823	IdentifierDecl	* other_tree		2504718	0					
ANR	2504824	IdentifierDeclType	ExprTree *		2504718	0					
ANR	2504825	Identifier	other_tree		2504718	1					
ANR	2504826	ExpressionStatement	this_tree = itr -> second	163:15:3836:3859	2504718	2	True				
ANR	2504827	AssignmentExpression	this_tree = itr -> second		2504718	0		=			
ANR	2504828	Identifier	this_tree		2504718	0					
ANR	2504829	PtrMemberAccess	itr -> second		2504718	1					
ANR	2504830	Identifier	itr		2504718	0					
ANR	2504831	Identifier	second		2504718	1					
ANR	2504832	ExpressionStatement	other_tree = other_classad -> Lookup ( itr -> first )	164:15:3876:3922	2504718	3	True				
ANR	2504833	AssignmentExpression	other_tree = other_classad -> Lookup ( itr -> first )		2504718	0		=			
ANR	2504834	Identifier	other_tree		2504718	0					
ANR	2504835	CallExpression	other_classad -> Lookup ( itr -> first )		2504718	1					
ANR	2504836	Callee	other_classad -> Lookup		2504718	0					
ANR	2504837	PtrMemberAccess	other_classad -> Lookup		2504718	0					
ANR	2504838	Identifier	other_classad		2504718	0					
ANR	2504839	Identifier	Lookup		2504718	1					
ANR	2504840	ArgumentList	itr -> first		2504718	1					
ANR	2504841	Argument	itr -> first		2504718	0					
ANR	2504842	PtrMemberAccess	itr -> first		2504718	0					
ANR	2504843	Identifier	itr		2504718	0					
ANR	2504844	Identifier	first		2504718	1					
ANR	2504845	IfStatement	if ( other_tree == NULL )		2504718	4					
ANR	2504846	Condition	other_tree == NULL	165:19:3943:3960	2504718	0	True				
ANR	2504847	EqualityExpression	other_tree == NULL		2504718	0		==			
ANR	2504848	Identifier	other_tree		2504718	0					
ANR	2504849	Identifier	NULL		2504718	1					
ANR	2504850	CompoundStatement		25:39:716:716	2504718	1					
ANR	2504851	ExpressionStatement	is_same = false	166:19:3984:3999	2504718	0	True				
ANR	2504852	AssignmentExpression	is_same = false		2504718	0		=			
ANR	2504853	Identifier	is_same		2504718	0					
ANR	2504854	Identifier	false		2504718	1					
ANR	2504855	BreakStatement	break ;	167:19:4020:4025	2504718	1	True				
ANR	2504856	ElseStatement	else		2504718	0					
ANR	2504857	IfStatement	if ( ! this_tree -> SameAs ( other_tree ) )		2504718	0					
ANR	2504858	Condition	! this_tree -> SameAs ( other_tree )	168:26:4053:4082	2504718	0	True				
ANR	2504859	UnaryOperationExpression	! this_tree -> SameAs ( other_tree )		2504718	0					
ANR	2504860	UnaryOperator	!		2504718	0					
ANR	2504861	CallExpression	this_tree -> SameAs ( other_tree )		2504718	1					
ANR	2504862	Callee	this_tree -> SameAs		2504718	0					
ANR	2504863	PtrMemberAccess	this_tree -> SameAs		2504718	0					
ANR	2504864	Identifier	this_tree		2504718	0					
ANR	2504865	Identifier	SameAs		2504718	1					
ANR	2504866	ArgumentList	other_tree		2504718	1					
ANR	2504867	Argument	other_tree		2504718	0					
ANR	2504868	Identifier	other_tree		2504718	0					
ANR	2504869	CompoundStatement		28:58:838:838	2504718	1					
ANR	2504870	ExpressionStatement	is_same = false	169:19:4106:4121	2504718	0	True				
ANR	2504871	AssignmentExpression	is_same = false		2504718	0		=			
ANR	2504872	Identifier	is_same		2504718	0					
ANR	2504873	Identifier	false		2504718	1					
ANR	2504874	BreakStatement	break ;	170:19:4142:4147	2504718	1	True				
ANR	2504875	ReturnStatement	return is_same ;	176:4:4199:4213	2504718	2	True				
ANR	2504876	Identifier	is_same		2504718	0					
ANR	2504877	ReturnType	bool		2504718	1					
ANR	2504878	Identifier	ClassAd :: SameAs		2504718	2					
ANR	2504879	ParameterList	const ExprTree * tree		2504718	3					
ANR	2504880	Parameter	const ExprTree * tree	140:7:3218:3237	2504718	0	True				
ANR	2504881	ParameterType	const ExprTree *		2504718	0					
ANR	2504882	Identifier	tree		2504718	1					
ANR	2504883	CFGEntryNode	ENTRY		2504718		True				
ANR	2504884	CFGExitNode	EXIT		2504718		True				
ANR	2504885	Symbol	attrList . begin		2504718						
ANR	2504886	Symbol	this_tree		2504718						
ANR	2504887	Symbol	is_same		2504718						
ANR	2504888	Symbol	other_tree		2504718						
ANR	2504889	Symbol	tree -> GetKind		2504718						
ANR	2504890	Symbol	this_tree -> SameAs		2504718						
ANR	2504891	Symbol	other_classad -> Lookup		2504718						
ANR	2504892	Symbol	itr -> first		2504718						
ANR	2504893	Symbol	other_classad -> attrList		2504718						
ANR	2504894	Symbol	CLASSAD_NODE		2504718						
ANR	2504895	Symbol	itr -> second		2504718						
ANR	2504896	Symbol	attrList . size		2504718						
ANR	2504897	Symbol	NULL		2504718						
ANR	2504898	Symbol	* other_classad		2504718						
ANR	2504899	Symbol	* this_tree		2504718						
ANR	2504900	Symbol	itr		2504718						
ANR	2504901	Symbol	tree		2504718						
ANR	2504902	Symbol	this		2504718						
ANR	2504903	Symbol	false		2504718						
ANR	2504904	Symbol	attrList		2504718						
ANR	2504905	Symbol	* itr		2504718						
ANR	2504906	Symbol	* tree		2504718						
ANR	2504907	Symbol	attrList . end		2504718						
ANR	2504908	Symbol	other_classad -> attrList . size		2504718						
ANR	2504909	Symbol	other_classad		2504718						
ANR	2504910	Symbol	true		2504718						
ANR	2504911	Function	operator ==	179:0:4218:4301							
ANR	2504912	FunctionDef	"operator == (ClassAd & list1 , ClassAd & list2)"		2504911	0					
ANR	2504913	CompoundStatement		180:0:4266:4301	2504911	0					
ANR	2504914	ReturnStatement	return list1 . SameAs ( & list2 ) ;	181:4:4272:4299	2504911	0	True				
ANR	2504915	CallExpression	list1 . SameAs ( & list2 )		2504911	0					
ANR	2504916	Callee	list1 . SameAs		2504911	0					
ANR	2504917	MemberAccess	list1 . SameAs		2504911	0					
ANR	2504918	Identifier	list1		2504911	0					
ANR	2504919	Identifier	SameAs		2504911	1					
ANR	2504920	ArgumentList	& list2		2504911	1					
ANR	2504921	Argument	& list2		2504911	0					
ANR	2504922	UnaryOperationExpression	& list2		2504911	0					
ANR	2504923	UnaryOperator	&		2504911	0					
ANR	2504924	Identifier	list2		2504911	1					
ANR	2504925	ReturnType	bool		2504911	1					
ANR	2504926	Identifier	operator ==		2504911	2					
ANR	2504927	ParameterList	"ClassAd & list1 , ClassAd & list2"		2504911	3					
ANR	2504928	Parameter	ClassAd & list1	179:16:4234:4247	2504911	0	True				
ANR	2504929	ParameterType	ClassAd &		2504911	0					
ANR	2504930	Identifier	list1		2504911	1					
ANR	2504931	Parameter	ClassAd & list2	179:32:4250:4263	2504911	1	True				
ANR	2504932	ParameterType	ClassAd &		2504911	0					
ANR	2504933	Identifier	list2		2504911	1					
ANR	2504934	CFGEntryNode	ENTRY		2504911		True				
ANR	2504935	CFGExitNode	EXIT		2504911		True				
ANR	2504936	Symbol	list1		2504911						
ANR	2504937	Symbol	& list2		2504911						
ANR	2504938	Symbol	list1 . SameAs		2504911						
ANR	2504939	Symbol	list2		2504911						
ANR	2504940	Function	ClassAd :: ~ClassAd	184:0:4304:4339							
ANR	2504941	FunctionDef	ClassAd :: ~ClassAd ()		2504940	0					
ANR	2504942	CompoundStatement		186:0:4326:4339	2504940	0					
ANR	2504943	ExpressionStatement	Clear ( )	187:1:4329:4337	2504940	0	True				
ANR	2504944	CallExpression	Clear ( )		2504940	0					
ANR	2504945	Callee	Clear		2504940	0					
ANR	2504946	Identifier	Clear		2504940	0					
ANR	2504947	ArgumentList			2504940	1					
ANR	2504948	Identifier	ClassAd :: ~ClassAd		2504940	1					
ANR	2504949	ParameterList			2504940	2					
ANR	2504950	CFGEntryNode	ENTRY		2504940		True				
ANR	2504951	CFGExitNode	EXIT		2504940		True				
ANR	2504952	Function	ClassAd :: Clear	191:0:4343:4534							
ANR	2504953	FunctionDef	ClassAd :: Clear ()		2504952	0					
ANR	2504954	CompoundStatement		193:0:4367:4534	2504952	0					
ANR	2504955	ExpressionStatement	Unchain ( )	194:1:4370:4379	2504952	0	True				
ANR	2504956	CallExpression	Unchain ( )		2504952	0					
ANR	2504957	Callee	Unchain		2504952	0					
ANR	2504958	Identifier	Unchain		2504952	0					
ANR	2504959	ArgumentList			2504952	1					
ANR	2504960	IdentifierDeclStatement	AttrList :: iterator itr ;	195:1:4382:4404	2504952	1	True				
ANR	2504961	IdentifierDecl	itr		2504952	0					
ANR	2504962	IdentifierDeclType	AttrList :: iterator		2504952	0					
ANR	2504963	Identifier	itr		2504952	1					
ANR	2504964	ForStatement	for ( itr = attrList . begin ( ) ; itr != attrList . end ( ) ; itr ++ )		2504952	2					
ANR	2504965	ForInit	itr = attrList . begin ( ) ;	196:6:4412:4435	2504952	0	True				
ANR	2504966	AssignmentExpression	itr = attrList . begin ( )		2504952	0		=			
ANR	2504967	Identifier	itr		2504952	0					
ANR	2504968	CallExpression	attrList . begin ( )		2504952	1					
ANR	2504969	Callee	attrList . begin		2504952	0					
ANR	2504970	MemberAccess	attrList . begin		2504952	0					
ANR	2504971	Identifier	attrList		2504952	0					
ANR	2504972	Identifier	begin		2504952	1					
ANR	2504973	ArgumentList			2504952	1					
ANR	2504974	Condition	itr != attrList . end ( )	196:31:4437:4458	2504952	1	True				
ANR	2504975	EqualityExpression	itr != attrList . end ( )		2504952	0		!=			
ANR	2504976	Identifier	itr		2504952	0					
ANR	2504977	CallExpression	attrList . end ( )		2504952	1					
ANR	2504978	Callee	attrList . end		2504952	0					
ANR	2504979	MemberAccess	attrList . end		2504952	0					
ANR	2504980	Identifier	attrList		2504952	0					
ANR	2504981	Identifier	end		2504952	1					
ANR	2504982	ArgumentList			2504952	1					
ANR	2504983	PostIncDecOperationExpression	itr ++	196:55:4461:4465	2504952	2	True				
ANR	2504984	Identifier	itr		2504952	0					
ANR	2504985	IncDec	++		2504952	1					
ANR	2504986	CompoundStatement		4:63:101:101	2504952	3					
ANR	2504987	IfStatement	if ( itr -> second )		2504952	0					
ANR	2504988	Condition	itr -> second	197:6:4477:4487	2504952	0	True				
ANR	2504989	PtrMemberAccess	itr -> second		2504952	0					
ANR	2504990	Identifier	itr		2504952	0					
ANR	2504991	Identifier	second		2504952	1					
ANR	2504992	Statement	delete	197:20:4491:4496	2504952	1	True				
ANR	2504993	ExpressionStatement	itr -> second	197:27:4498:4509	2504952	1	True				
ANR	2504994	PtrMemberAccess	itr -> second		2504952	0					
ANR	2504995	Identifier	itr		2504952	0					
ANR	2504996	Identifier	second		2504952	1					
ANR	2504997	ExpressionStatement	attrList . clear ( )	199:1:4515:4532	2504952	3	True				
ANR	2504998	CallExpression	attrList . clear ( )		2504952	0					
ANR	2504999	Callee	attrList . clear		2504952	0					
ANR	2505000	MemberAccess	attrList . clear		2504952	0					
ANR	2505001	Identifier	attrList		2504952	0					
ANR	2505002	Identifier	clear		2504952	1					
ANR	2505003	ArgumentList			2504952	1					
ANR	2505004	ReturnType	void		2504952	1					
ANR	2505005	Identifier	ClassAd :: Clear		2504952	2					
ANR	2505006	ParameterList			2504952	3					
ANR	2505007	CFGEntryNode	ENTRY		2504952		True				
ANR	2505008	CFGExitNode	EXIT		2504952		True				
ANR	2505009	Symbol	attrList . begin		2504952						
ANR	2505010	Symbol	attrList . end		2504952						
ANR	2505011	Symbol	itr		2504952						
ANR	2505012	Symbol	attrList		2504952						
ANR	2505013	Symbol	* itr		2504952						
ANR	2505014	Symbol	itr -> second		2504952						
ANR	2505015	Function	ClassAd :: MakeClassAd	203:0:4538:5013							
ANR	2505016	FunctionDef	"ClassAd :: MakeClassAd (vector < pair < string , ExprTree * > > & attrs)"		2505015	0					
ANR	2505017	CompoundStatement		205:0:4615:5013	2505015	0					
ANR	2505018	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > :: iterator itr ;"	206:1:4618:4665	2505015	0	True				
ANR	2505019	IdentifierDecl	itr		2505015	0					
ANR	2505020	IdentifierDeclType	"vector < pair < string , ExprTree * > > :: iterator"		2505015	0					
ANR	2505021	Identifier	itr		2505015	1					
ANR	2505022	IdentifierDeclStatement	ClassAd * newAd = new ClassAd ( ) ;	207:1:4668:4699	2505015	1	True				
ANR	2505023	IdentifierDecl	* newAd = new ClassAd ( )		2505015	0					
ANR	2505024	IdentifierDeclType	ClassAd *		2505015	0					
ANR	2505025	Identifier	newAd		2505015	1					
ANR	2505026	AssignmentExpression	* newAd = new ClassAd ( )		2505015	2		=			
ANR	2505027	Identifier	newAd		2505015	0					
ANR	2505028	UnaryExpression	new ClassAd ( )		2505015	1					
ANR	2505029	IfStatement	if ( ! newAd )		2505015	2					
ANR	2505030	Condition	! newAd	209:5:4707:4712	2505015	0	True				
ANR	2505031	UnaryOperationExpression	! newAd		2505015	0					
ANR	2505032	UnaryOperator	!		2505015	0					
ANR	2505033	Identifier	newAd		2505015	1					
ANR	2505034	CompoundStatement		5:14:100:100	2505015	1					
ANR	2505035	ExpressionStatement	CondorErrno = ERR_MEM_ALLOC_FAILED	210:2:4720:4754	2505015	0	True				
ANR	2505036	AssignmentExpression	CondorErrno = ERR_MEM_ALLOC_FAILED		2505015	0		=			
ANR	2505037	Identifier	CondorErrno		2505015	0					
ANR	2505038	Identifier	ERR_MEM_ALLOC_FAILED		2505015	1					
ANR	2505039	ExpressionStatement	"CondorErrMsg = """""	211:2:4758:4775	2505015	1	True				
ANR	2505040	AssignmentExpression	"CondorErrMsg = """""		2505015	0		=			
ANR	2505041	Identifier	CondorErrMsg		2505015	0					
ANR	2505042	PrimaryExpression	""""""		2505015	1					
ANR	2505043	ReturnStatement	return ( NULL ) ;	212:2:4779:4793	2505015	2	True				
ANR	2505044	Identifier	NULL		2505015	0					
ANR	2505045	ExpressionStatement		213:2:4797:4797	2505015	3	True				
ANR	2505046	ForStatement	for ( itr = attrs . begin ( ) ; itr != attrs . end ( ) ; itr ++ )		2505015	4					
ANR	2505047	ForInit	itr = attrs . begin ( ) ;	215:6:4806:4826	2505015	0	True				
ANR	2505048	AssignmentExpression	itr = attrs . begin ( )		2505015	0		=			
ANR	2505049	Identifier	itr		2505015	0					
ANR	2505050	CallExpression	attrs . begin ( )		2505015	1					
ANR	2505051	Callee	attrs . begin		2505015	0					
ANR	2505052	MemberAccess	attrs . begin		2505015	0					
ANR	2505053	Identifier	attrs		2505015	0					
ANR	2505054	Identifier	begin		2505015	1					
ANR	2505055	ArgumentList			2505015	1					
ANR	2505056	Condition	itr != attrs . end ( )	215:28:4828:4846	2505015	1	True				
ANR	2505057	EqualityExpression	itr != attrs . end ( )		2505015	0		!=			
ANR	2505058	Identifier	itr		2505015	0					
ANR	2505059	CallExpression	attrs . end ( )		2505015	1					
ANR	2505060	Callee	attrs . end		2505015	0					
ANR	2505061	MemberAccess	attrs . end		2505015	0					
ANR	2505062	Identifier	attrs		2505015	0					
ANR	2505063	Identifier	end		2505015	1					
ANR	2505064	ArgumentList			2505015	1					
ANR	2505065	PostIncDecOperationExpression	itr ++	215:49:4849:4853	2505015	2	True				
ANR	2505066	Identifier	itr		2505015	0					
ANR	2505067	IncDec	++		2505015	1					
ANR	2505068	CompoundStatement		11:57:241:241	2505015	3					
ANR	2505069	IfStatement	"if ( ! newAd -> Insert ( itr -> first , itr -> second ) )"		2505015	0					
ANR	2505070	Condition	"! newAd -> Insert ( itr -> first , itr -> second )"	216:6:4865:4905	2505015	0	True				
ANR	2505071	UnaryOperationExpression	"! newAd -> Insert ( itr -> first , itr -> second )"		2505015	0					
ANR	2505072	UnaryOperator	!		2505015	0					
ANR	2505073	CallExpression	"newAd -> Insert ( itr -> first , itr -> second )"		2505015	1					
ANR	2505074	Callee	newAd -> Insert		2505015	0					
ANR	2505075	PtrMemberAccess	newAd -> Insert		2505015	0					
ANR	2505076	Identifier	newAd		2505015	0					
ANR	2505077	Identifier	Insert		2505015	1					
ANR	2505078	ArgumentList	itr -> first		2505015	1					
ANR	2505079	Argument	itr -> first		2505015	0					
ANR	2505080	PtrMemberAccess	itr -> first		2505015	0					
ANR	2505081	Identifier	itr		2505015	0					
ANR	2505082	Identifier	first		2505015	1					
ANR	2505083	Argument	itr -> second		2505015	1					
ANR	2505084	PtrMemberAccess	itr -> second		2505015	0					
ANR	2505085	Identifier	itr		2505015	0					
ANR	2505086	Identifier	second		2505015	1					
ANR	2505087	CompoundStatement		12:50:293:293	2505015	1					
ANR	2505088	Statement	delete	217:3:4914:4919	2505015	0	True				
ANR	2505089	ExpressionStatement	newAd	217:10:4921:4926	2505015	1	True				
ANR	2505090	Identifier	newAd		2505015	0					
ANR	2505091	ReturnStatement	return ( NULL ) ;	218:3:4931:4945	2505015	2	True				
ANR	2505092	Identifier	NULL		2505015	0					
ANR	2505093	ExpressionStatement	"itr -> first = """""	220:2:4953:4968	2505015	1	True				
ANR	2505094	AssignmentExpression	"itr -> first = """""		2505015	0		=			
ANR	2505095	PtrMemberAccess	itr -> first		2505015	0					
ANR	2505096	Identifier	itr		2505015	0					
ANR	2505097	Identifier	first		2505015	1					
ANR	2505098	PrimaryExpression	""""""		2505015	1					
ANR	2505099	ExpressionStatement	itr -> second = NULL	221:2:4972:4990	2505015	2	True				
ANR	2505100	AssignmentExpression	itr -> second = NULL		2505015	0		=			
ANR	2505101	PtrMemberAccess	itr -> second		2505015	0					
ANR	2505102	Identifier	itr		2505015	0					
ANR	2505103	Identifier	second		2505015	1					
ANR	2505104	Identifier	NULL		2505015	1					
ANR	2505105	ReturnStatement	return ( newAd ) ;	223:1:4996:5011	2505015	5	True				
ANR	2505106	Identifier	newAd		2505015	0					
ANR	2505107	ReturnType	ClassAd *		2505015	1					
ANR	2505108	Identifier	ClassAd :: MakeClassAd		2505015	2					
ANR	2505109	ParameterList	"vector < pair < string , ExprTree * > > & attrs"		2505015	3					
ANR	2505110	Parameter	"vector < pair < string , ExprTree * > > & attrs"	204:13:4570:4611	2505015	0	True				
ANR	2505111	ParameterType	"vector < pair < string , ExprTree * > > &"		2505015	0					
ANR	2505112	Identifier	attrs		2505015	1					
ANR	2505113	CFGEntryNode	ENTRY		2505015		True				
ANR	2505114	CFGExitNode	EXIT		2505015		True				
ANR	2505115	Symbol	NULL		2505015						
ANR	2505116	Symbol	itr		2505015						
ANR	2505117	Symbol	ERR_MEM_ALLOC_FAILED		2505015						
ANR	2505118	Symbol	* itr		2505015						
ANR	2505119	Symbol	attrs		2505015						
ANR	2505120	Symbol	CondorErrno		2505015						
ANR	2505121	Symbol	attrs . begin		2505015						
ANR	2505122	Symbol	* newAd		2505015						
ANR	2505123	Symbol	CondorErrMsg		2505015						
ANR	2505124	Symbol	newAd -> Insert		2505015						
ANR	2505125	Symbol	itr -> first		2505015						
ANR	2505126	Symbol	attrs . end		2505015						
ANR	2505127	Symbol	newAd		2505015						
ANR	2505128	Symbol	itr -> second		2505015						
ANR	2505129	Function	ClassAd :: GetComponents	227:0:5017:5300							
ANR	2505130	FunctionDef	"ClassAd :: GetComponents (vector < pair < string , ExprTree * > > & attrs)"		2505129	0					
ANR	2505131	CompoundStatement		229:0:5098:5300	2505129	0					
ANR	2505132	ExpressionStatement	attrs . clear ( )	230:1:5101:5115	2505129	0	True				
ANR	2505133	CallExpression	attrs . clear ( )		2505129	0					
ANR	2505134	Callee	attrs . clear		2505129	0					
ANR	2505135	MemberAccess	attrs . clear		2505129	0					
ANR	2505136	Identifier	attrs		2505129	0					
ANR	2505137	Identifier	clear		2505129	1					
ANR	2505138	ArgumentList			2505129	1					
ANR	2505139	ForStatement	for ( AttrList :: const_iterator itr = attrList . begin ( ) ; itr != attrList . end ( ) ; itr ++ )		2505129	1					
ANR	2505140	ForInit	AttrList :: const_iterator itr = attrList . begin ( ) ;	231:6:5123:5168	2505129	0	True				
ANR	2505141	IdentifierDeclStatement	AttrList :: const_iterator itr = attrList . begin ( ) ;		2505129	0					
ANR	2505142	IdentifierDecl	itr = attrList . begin ( )		2505129	0					
ANR	2505143	IdentifierDeclType	AttrList :: const_iterator		2505129	0					
ANR	2505144	Identifier	itr		2505129	1					
ANR	2505145	AssignmentExpression	itr = attrList . begin ( )		2505129	2		=			
ANR	2505146	Identifier	itr		2505129	0					
ANR	2505147	CallExpression	attrList . begin ( )		2505129	1					
ANR	2505148	Callee	attrList . begin		2505129	0					
ANR	2505149	MemberAccess	attrList . begin		2505129	0					
ANR	2505150	Identifier	attrList		2505129	0					
ANR	2505151	Identifier	begin		2505129	1					
ANR	2505152	ArgumentList			2505129	1					
ANR	2505153	Condition	itr != attrList . end ( )	231:53:5170:5188	2505129	1	True				
ANR	2505154	EqualityExpression	itr != attrList . end ( )		2505129	0		!=			
ANR	2505155	Identifier	itr		2505129	0					
ANR	2505156	CallExpression	attrList . end ( )		2505129	1					
ANR	2505157	Callee	attrList . end		2505129	0					
ANR	2505158	MemberAccess	attrList . end		2505129	0					
ANR	2505159	Identifier	attrList		2505129	0					
ANR	2505160	Identifier	end		2505129	1					
ANR	2505161	ArgumentList			2505129	1					
ANR	2505162	PostIncDecOperationExpression	itr ++	232:2:5194:5198	2505129	2	True				
ANR	2505163	Identifier	itr		2505129	0					
ANR	2505164	IncDec	++		2505129	1					
ANR	2505165	CompoundStatement		4:10:103:103	2505129	3					
ANR	2505166	ExpressionStatement	"attrs . push_back ( make_pair ( itr -> first , itr -> second ) )"	234:2:5240:5295	2505129	0	True				
ANR	2505167	CallExpression	"attrs . push_back ( make_pair ( itr -> first , itr -> second ) )"		2505129	0					
ANR	2505168	Callee	attrs . push_back		2505129	0					
ANR	2505169	MemberAccess	attrs . push_back		2505129	0					
ANR	2505170	Identifier	attrs		2505129	0					
ANR	2505171	Identifier	push_back		2505129	1					
ANR	2505172	ArgumentList	"make_pair ( itr -> first , itr -> second )"		2505129	1					
ANR	2505173	Argument	"make_pair ( itr -> first , itr -> second )"		2505129	0					
ANR	2505174	CallExpression	"make_pair ( itr -> first , itr -> second )"		2505129	0					
ANR	2505175	Callee	make_pair		2505129	0					
ANR	2505176	Identifier	make_pair		2505129	0					
ANR	2505177	ArgumentList	itr -> first		2505129	1					
ANR	2505178	Argument	itr -> first		2505129	0					
ANR	2505179	PtrMemberAccess	itr -> first		2505129	0					
ANR	2505180	Identifier	itr		2505129	0					
ANR	2505181	Identifier	first		2505129	1					
ANR	2505182	Argument	itr -> second		2505129	1					
ANR	2505183	PtrMemberAccess	itr -> second		2505129	0					
ANR	2505184	Identifier	itr		2505129	0					
ANR	2505185	Identifier	second		2505129	1					
ANR	2505186	ReturnType	void		2505129	1					
ANR	2505187	Identifier	ClassAd :: GetComponents		2505129	2					
ANR	2505188	ParameterList	"vector < pair < string , ExprTree * > > & attrs"		2505129	3					
ANR	2505189	Parameter	"vector < pair < string , ExprTree * > > & attrs"	228:15:5047:5088	2505129	0	True				
ANR	2505190	ParameterType	"vector < pair < string , ExprTree * > > &"		2505129	0					
ANR	2505191	Identifier	attrs		2505129	1					
ANR	2505192	CFGEntryNode	ENTRY		2505129		True				
ANR	2505193	CFGExitNode	EXIT		2505129		True				
ANR	2505194	Symbol	attrList . begin		2505129						
ANR	2505195	Symbol	attrList . end		2505129						
ANR	2505196	Symbol	make_pair		2505129						
ANR	2505197	Symbol	itr		2505129						
ANR	2505198	Symbol	itr -> first		2505129						
ANR	2505199	Symbol	attrList		2505129						
ANR	2505200	Symbol	* itr		2505129						
ANR	2505201	Symbol	attrs		2505129						
ANR	2505202	Symbol	itr -> second		2505129						
ANR	2505203	Function	ClassAd :: InsertAttr	240:0:5350:5536							
ANR	2505204	FunctionDef	"ClassAd :: InsertAttr (const string & name , int value , Value :: NumberFactor f)"		2505203	0					
ANR	2505205	CompoundStatement		242:0:5432:5536	2505203	0					
ANR	2505206	IdentifierDeclStatement	Value val ;	243:1:5435:5444	2505203	0	True				
ANR	2505207	IdentifierDecl	val		2505203	0					
ANR	2505208	IdentifierDeclType	Value		2505203	0					
ANR	2505209	Identifier	val		2505203	1					
ANR	2505210	ExpressionStatement	val . SetIntegerValue ( value )	244:1:5447:5475	2505203	1	True				
ANR	2505211	CallExpression	val . SetIntegerValue ( value )		2505203	0					
ANR	2505212	Callee	val . SetIntegerValue		2505203	0					
ANR	2505213	MemberAccess	val . SetIntegerValue		2505203	0					
ANR	2505214	Identifier	val		2505203	0					
ANR	2505215	Identifier	SetIntegerValue		2505203	1					
ANR	2505216	ArgumentList	value		2505203	1					
ANR	2505217	Argument	value		2505203	0					
ANR	2505218	Identifier	value		2505203	0					
ANR	2505219	ReturnStatement	"return ( Insert ( name , Literal :: MakeLiteral ( val , f ) ) ) ;"	245:1:5478:5534	2505203	2	True				
ANR	2505220	CallExpression	"Insert ( name , Literal :: MakeLiteral ( val , f ) )"		2505203	0					
ANR	2505221	Callee	Insert		2505203	0					
ANR	2505222	Identifier	Insert		2505203	0					
ANR	2505223	ArgumentList	name		2505203	1					
ANR	2505224	Argument	name		2505203	0					
ANR	2505225	Identifier	name		2505203	0					
ANR	2505226	Argument	"Literal :: MakeLiteral ( val , f )"		2505203	1					
ANR	2505227	CallExpression	"Literal :: MakeLiteral ( val , f )"		2505203	0					
ANR	2505228	Callee	Literal :: MakeLiteral		2505203	0					
ANR	2505229	Identifier	Literal :: MakeLiteral		2505203	0					
ANR	2505230	ArgumentList	val		2505203	1					
ANR	2505231	Argument	val		2505203	0					
ANR	2505232	Identifier	val		2505203	0					
ANR	2505233	Argument	f		2505203	1					
ANR	2505234	Identifier	f		2505203	0					
ANR	2505235	ReturnType	bool		2505203	1					
ANR	2505236	Identifier	ClassAd :: InsertAttr		2505203	2					
ANR	2505237	ParameterList	"const string & name , int value , Value :: NumberFactor f"		2505203	3					
ANR	2505238	Parameter	const string & name	241:12:5377:5394	2505203	0	True				
ANR	2505239	ParameterType	const string &		2505203	0					
ANR	2505240	Identifier	name		2505203	1					
ANR	2505241	Parameter	int value	241:32:5397:5405	2505203	1	True				
ANR	2505242	ParameterType	int		2505203	0					
ANR	2505243	Identifier	value		2505203	1					
ANR	2505244	Parameter	Value :: NumberFactor f	241:43:5408:5428	2505203	2	True				
ANR	2505245	ParameterType	Value :: NumberFactor		2505203	0					
ANR	2505246	Identifier	f		2505203	1					
ANR	2505247	CFGEntryNode	ENTRY		2505203		True				
ANR	2505248	CFGExitNode	EXIT		2505203		True				
ANR	2505249	Symbol	val		2505203						
ANR	2505250	Symbol	Literal :: MakeLiteral		2505203						
ANR	2505251	Symbol	f		2505203						
ANR	2505252	Symbol	name		2505203						
ANR	2505253	Symbol	Insert		2505203						
ANR	2505254	Symbol	value		2505203						
ANR	2505255	Function	ClassAd :: DeepInsertAttr	249:0:5540:5767							
ANR	2505256	FunctionDef	"ClassAd :: DeepInsertAttr (ExprTree * scopeExpr , const string & name , int value , Value :: NumberFactor f)"		2505255	0					
ANR	2505257	CompoundStatement		252:0:5649:5767	2505255	0					
ANR	2505258	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	253:1:5652:5692	2505255	0	True				
ANR	2505259	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505255	0					
ANR	2505260	IdentifierDeclType	ClassAd *		2505255	0					
ANR	2505261	Identifier	ad		2505255	1					
ANR	2505262	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505255	2		=			
ANR	2505263	Identifier	ad		2505255	0					
ANR	2505264	CallExpression	_GetDeepScope ( scopeExpr )		2505255	1					
ANR	2505265	Callee	_GetDeepScope		2505255	0					
ANR	2505266	Identifier	_GetDeepScope		2505255	0					
ANR	2505267	ArgumentList	scopeExpr		2505255	1					
ANR	2505268	Argument	scopeExpr		2505255	0					
ANR	2505269	Identifier	scopeExpr		2505255	0					
ANR	2505270	IfStatement	if ( ! ad )		2505255	1					
ANR	2505271	Condition	! ad	254:5:5699:5701	2505255	0	True				
ANR	2505272	UnaryOperationExpression	! ad		2505255	0					
ANR	2505273	UnaryOperator	!		2505255	0					
ANR	2505274	Identifier	ad		2505255	1					
ANR	2505275	ReturnStatement	return ( false ) ;	254:11:5705:5720	2505255	1	True				
ANR	2505276	Identifier	false		2505255	0					
ANR	2505277	ReturnStatement	"return ( ad -> InsertAttr ( name , value , f ) ) ;"	255:1:5723:5765	2505255	2	True				
ANR	2505278	CallExpression	"ad -> InsertAttr ( name , value , f )"		2505255	0					
ANR	2505279	Callee	ad -> InsertAttr		2505255	0					
ANR	2505280	PtrMemberAccess	ad -> InsertAttr		2505255	0					
ANR	2505281	Identifier	ad		2505255	0					
ANR	2505282	Identifier	InsertAttr		2505255	1					
ANR	2505283	ArgumentList	name		2505255	1					
ANR	2505284	Argument	name		2505255	0					
ANR	2505285	Identifier	name		2505255	0					
ANR	2505286	Argument	value		2505255	1					
ANR	2505287	Identifier	value		2505255	0					
ANR	2505288	Argument	f		2505255	2					
ANR	2505289	Identifier	f		2505255	0					
ANR	2505290	ReturnType	bool		2505255	1					
ANR	2505291	Identifier	ClassAd :: DeepInsertAttr		2505255	2					
ANR	2505292	ParameterList	"ExprTree * scopeExpr , const string & name , int value , Value :: NumberFactor f"		2505255	3					
ANR	2505293	Parameter	ExprTree * scopeExpr	250:16:5571:5589	2505255	0	True				
ANR	2505294	ParameterType	ExprTree *		2505255	0					
ANR	2505295	Identifier	scopeExpr		2505255	1					
ANR	2505296	Parameter	const string & name	250:37:5592:5609	2505255	1	True				
ANR	2505297	ParameterType	const string &		2505255	0					
ANR	2505298	Identifier	name		2505255	1					
ANR	2505299	Parameter	int value	250:57:5612:5620	2505255	2	True				
ANR	2505300	ParameterType	int		2505255	0					
ANR	2505301	Identifier	value		2505255	1					
ANR	2505302	Parameter	Value :: NumberFactor f	251:1:5625:5645	2505255	3	True				
ANR	2505303	ParameterType	Value :: NumberFactor		2505255	0					
ANR	2505304	Identifier	f		2505255	1					
ANR	2505305	CFGEntryNode	ENTRY		2505255		True				
ANR	2505306	CFGExitNode	EXIT		2505255		True				
ANR	2505307	Symbol	ad		2505255						
ANR	2505308	Symbol	ad -> InsertAttr		2505255						
ANR	2505309	Symbol	f		2505255						
ANR	2505310	Symbol	name		2505255						
ANR	2505311	Symbol	false		2505255						
ANR	2505312	Symbol	* ad		2505255						
ANR	2505313	Symbol	scopeExpr		2505255						
ANR	2505314	Symbol	value		2505255						
ANR	2505315	Symbol	_GetDeepScope		2505255						
ANR	2505316	Function	ClassAd :: InsertAttr	262:0:5857:6043							
ANR	2505317	FunctionDef	"ClassAd :: InsertAttr (const string & name , double value , Value :: NumberFactor f)"		2505316	0					
ANR	2505318	CompoundStatement		264:0:5942:6043	2505316	0					
ANR	2505319	IdentifierDeclStatement	Value val ;	265:1:5945:5954	2505316	0	True				
ANR	2505320	IdentifierDecl	val		2505316	0					
ANR	2505321	IdentifierDeclType	Value		2505316	0					
ANR	2505322	Identifier	val		2505316	1					
ANR	2505323	ExpressionStatement	val . SetRealValue ( value )	266:1:5957:5982	2505316	1	True				
ANR	2505324	CallExpression	val . SetRealValue ( value )		2505316	0					
ANR	2505325	Callee	val . SetRealValue		2505316	0					
ANR	2505326	MemberAccess	val . SetRealValue		2505316	0					
ANR	2505327	Identifier	val		2505316	0					
ANR	2505328	Identifier	SetRealValue		2505316	1					
ANR	2505329	ArgumentList	value		2505316	1					
ANR	2505330	Argument	value		2505316	0					
ANR	2505331	Identifier	value		2505316	0					
ANR	2505332	ReturnStatement	"return ( Insert ( name , Literal :: MakeLiteral ( val , f ) ) ) ;"	267:1:5985:6041	2505316	2	True				
ANR	2505333	CallExpression	"Insert ( name , Literal :: MakeLiteral ( val , f ) )"		2505316	0					
ANR	2505334	Callee	Insert		2505316	0					
ANR	2505335	Identifier	Insert		2505316	0					
ANR	2505336	ArgumentList	name		2505316	1					
ANR	2505337	Argument	name		2505316	0					
ANR	2505338	Identifier	name		2505316	0					
ANR	2505339	Argument	"Literal :: MakeLiteral ( val , f )"		2505316	1					
ANR	2505340	CallExpression	"Literal :: MakeLiteral ( val , f )"		2505316	0					
ANR	2505341	Callee	Literal :: MakeLiteral		2505316	0					
ANR	2505342	Identifier	Literal :: MakeLiteral		2505316	0					
ANR	2505343	ArgumentList	val		2505316	1					
ANR	2505344	Argument	val		2505316	0					
ANR	2505345	Identifier	val		2505316	0					
ANR	2505346	Argument	f		2505316	1					
ANR	2505347	Identifier	f		2505316	0					
ANR	2505348	ReturnType	bool		2505316	1					
ANR	2505349	Identifier	ClassAd :: InsertAttr		2505316	2					
ANR	2505350	ParameterList	"const string & name , double value , Value :: NumberFactor f"		2505316	3					
ANR	2505351	Parameter	const string & name	263:12:5884:5901	2505316	0	True				
ANR	2505352	ParameterType	const string &		2505316	0					
ANR	2505353	Identifier	name		2505316	1					
ANR	2505354	Parameter	double value	263:32:5904:5915	2505316	1	True				
ANR	2505355	ParameterType	double		2505316	0					
ANR	2505356	Identifier	value		2505316	1					
ANR	2505357	Parameter	Value :: NumberFactor f	263:46:5918:5938	2505316	2	True				
ANR	2505358	ParameterType	Value :: NumberFactor		2505316	0					
ANR	2505359	Identifier	f		2505316	1					
ANR	2505360	CFGEntryNode	ENTRY		2505316		True				
ANR	2505361	CFGExitNode	EXIT		2505316		True				
ANR	2505362	Symbol	val		2505316						
ANR	2505363	Symbol	Literal :: MakeLiteral		2505316						
ANR	2505364	Symbol	f		2505316						
ANR	2505365	Symbol	name		2505316						
ANR	2505366	Symbol	Insert		2505316						
ANR	2505367	Symbol	value		2505316						
ANR	2505368	Function	ClassAd :: DeepInsertAttr	271:0:6048:6278							
ANR	2505369	FunctionDef	"ClassAd :: DeepInsertAttr (ExprTree * scopeExpr , const string & name , double value , Value :: NumberFactor f)"		2505368	0					
ANR	2505370	CompoundStatement		274:0:6160:6278	2505368	0					
ANR	2505371	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	275:1:6163:6203	2505368	0	True				
ANR	2505372	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505368	0					
ANR	2505373	IdentifierDeclType	ClassAd *		2505368	0					
ANR	2505374	Identifier	ad		2505368	1					
ANR	2505375	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505368	2		=			
ANR	2505376	Identifier	ad		2505368	0					
ANR	2505377	CallExpression	_GetDeepScope ( scopeExpr )		2505368	1					
ANR	2505378	Callee	_GetDeepScope		2505368	0					
ANR	2505379	Identifier	_GetDeepScope		2505368	0					
ANR	2505380	ArgumentList	scopeExpr		2505368	1					
ANR	2505381	Argument	scopeExpr		2505368	0					
ANR	2505382	Identifier	scopeExpr		2505368	0					
ANR	2505383	IfStatement	if ( ! ad )		2505368	1					
ANR	2505384	Condition	! ad	276:5:6210:6212	2505368	0	True				
ANR	2505385	UnaryOperationExpression	! ad		2505368	0					
ANR	2505386	UnaryOperator	!		2505368	0					
ANR	2505387	Identifier	ad		2505368	1					
ANR	2505388	ReturnStatement	return ( false ) ;	276:11:6216:6231	2505368	1	True				
ANR	2505389	Identifier	false		2505368	0					
ANR	2505390	ReturnStatement	"return ( ad -> InsertAttr ( name , value , f ) ) ;"	277:1:6234:6276	2505368	2	True				
ANR	2505391	CallExpression	"ad -> InsertAttr ( name , value , f )"		2505368	0					
ANR	2505392	Callee	ad -> InsertAttr		2505368	0					
ANR	2505393	PtrMemberAccess	ad -> InsertAttr		2505368	0					
ANR	2505394	Identifier	ad		2505368	0					
ANR	2505395	Identifier	InsertAttr		2505368	1					
ANR	2505396	ArgumentList	name		2505368	1					
ANR	2505397	Argument	name		2505368	0					
ANR	2505398	Identifier	name		2505368	0					
ANR	2505399	Argument	value		2505368	1					
ANR	2505400	Identifier	value		2505368	0					
ANR	2505401	Argument	f		2505368	2					
ANR	2505402	Identifier	f		2505368	0					
ANR	2505403	ReturnType	bool		2505368	1					
ANR	2505404	Identifier	ClassAd :: DeepInsertAttr		2505368	2					
ANR	2505405	ParameterList	"ExprTree * scopeExpr , const string & name , double value , Value :: NumberFactor f"		2505368	3					
ANR	2505406	Parameter	ExprTree * scopeExpr	272:16:6079:6097	2505368	0	True				
ANR	2505407	ParameterType	ExprTree *		2505368	0					
ANR	2505408	Identifier	scopeExpr		2505368	1					
ANR	2505409	Parameter	const string & name	272:37:6100:6117	2505368	1	True				
ANR	2505410	ParameterType	const string &		2505368	0					
ANR	2505411	Identifier	name		2505368	1					
ANR	2505412	Parameter	double value	272:57:6120:6131	2505368	2	True				
ANR	2505413	ParameterType	double		2505368	0					
ANR	2505414	Identifier	value		2505368	1					
ANR	2505415	Parameter	Value :: NumberFactor f	273:1:6136:6156	2505368	3	True				
ANR	2505416	ParameterType	Value :: NumberFactor		2505368	0					
ANR	2505417	Identifier	f		2505368	1					
ANR	2505418	CFGEntryNode	ENTRY		2505368		True				
ANR	2505419	CFGExitNode	EXIT		2505368		True				
ANR	2505420	Symbol	ad		2505368						
ANR	2505421	Symbol	ad -> InsertAttr		2505368						
ANR	2505422	Symbol	f		2505368						
ANR	2505423	Symbol	name		2505368						
ANR	2505424	Symbol	false		2505368						
ANR	2505425	Symbol	* ad		2505368						
ANR	2505426	Symbol	scopeExpr		2505368						
ANR	2505427	Symbol	value		2505368						
ANR	2505428	Symbol	_GetDeepScope		2505368						
ANR	2505429	Function	ClassAd :: InsertAttr	284:0:6360:6521							
ANR	2505430	FunctionDef	"ClassAd :: InsertAttr (const string & name , bool value)"		2505429	0					
ANR	2505431	CompoundStatement		286:0:6420:6521	2505429	0					
ANR	2505432	IdentifierDeclStatement	Value val ;	287:1:6423:6432	2505429	0	True				
ANR	2505433	IdentifierDecl	val		2505429	0					
ANR	2505434	IdentifierDeclType	Value		2505429	0					
ANR	2505435	Identifier	val		2505429	1					
ANR	2505436	ExpressionStatement	val . SetBooleanValue ( value )	288:1:6435:6463	2505429	1	True				
ANR	2505437	CallExpression	val . SetBooleanValue ( value )		2505429	0					
ANR	2505438	Callee	val . SetBooleanValue		2505429	0					
ANR	2505439	MemberAccess	val . SetBooleanValue		2505429	0					
ANR	2505440	Identifier	val		2505429	0					
ANR	2505441	Identifier	SetBooleanValue		2505429	1					
ANR	2505442	ArgumentList	value		2505429	1					
ANR	2505443	Argument	value		2505429	0					
ANR	2505444	Identifier	value		2505429	0					
ANR	2505445	ReturnStatement	"return ( Insert ( name , Literal :: MakeLiteral ( val ) ) ) ;"	289:1:6466:6519	2505429	2	True				
ANR	2505446	CallExpression	"Insert ( name , Literal :: MakeLiteral ( val ) )"		2505429	0					
ANR	2505447	Callee	Insert		2505429	0					
ANR	2505448	Identifier	Insert		2505429	0					
ANR	2505449	ArgumentList	name		2505429	1					
ANR	2505450	Argument	name		2505429	0					
ANR	2505451	Identifier	name		2505429	0					
ANR	2505452	Argument	Literal :: MakeLiteral ( val )		2505429	1					
ANR	2505453	CallExpression	Literal :: MakeLiteral ( val )		2505429	0					
ANR	2505454	Callee	Literal :: MakeLiteral		2505429	0					
ANR	2505455	Identifier	Literal :: MakeLiteral		2505429	0					
ANR	2505456	ArgumentList	val		2505429	1					
ANR	2505457	Argument	val		2505429	0					
ANR	2505458	Identifier	val		2505429	0					
ANR	2505459	ReturnType	bool		2505429	1					
ANR	2505460	Identifier	ClassAd :: InsertAttr		2505429	2					
ANR	2505461	ParameterList	"const string & name , bool value"		2505429	3					
ANR	2505462	Parameter	const string & name	285:12:6387:6404	2505429	0	True				
ANR	2505463	ParameterType	const string &		2505429	0					
ANR	2505464	Identifier	name		2505429	1					
ANR	2505465	Parameter	bool value	285:32:6407:6416	2505429	1	True				
ANR	2505466	ParameterType	bool		2505429	0					
ANR	2505467	Identifier	value		2505429	1					
ANR	2505468	CFGEntryNode	ENTRY		2505429		True				
ANR	2505469	CFGExitNode	EXIT		2505429		True				
ANR	2505470	Symbol	val		2505429						
ANR	2505471	Symbol	Literal :: MakeLiteral		2505429						
ANR	2505472	Symbol	name		2505429						
ANR	2505473	Symbol	Insert		2505429						
ANR	2505474	Symbol	value		2505429						
ANR	2505475	Function	ClassAd :: DeepInsertAttr	293:0:6525:6725							
ANR	2505476	FunctionDef	"ClassAd :: DeepInsertAttr (ExprTree * scopeExpr , const string & name , bool value)"		2505475	0					
ANR	2505477	CompoundStatement		295:0:6610:6725	2505475	0					
ANR	2505478	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	296:1:6613:6653	2505475	0	True				
ANR	2505479	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505475	0					
ANR	2505480	IdentifierDeclType	ClassAd *		2505475	0					
ANR	2505481	Identifier	ad		2505475	1					
ANR	2505482	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505475	2		=			
ANR	2505483	Identifier	ad		2505475	0					
ANR	2505484	CallExpression	_GetDeepScope ( scopeExpr )		2505475	1					
ANR	2505485	Callee	_GetDeepScope		2505475	0					
ANR	2505486	Identifier	_GetDeepScope		2505475	0					
ANR	2505487	ArgumentList	scopeExpr		2505475	1					
ANR	2505488	Argument	scopeExpr		2505475	0					
ANR	2505489	Identifier	scopeExpr		2505475	0					
ANR	2505490	IfStatement	if ( ! ad )		2505475	1					
ANR	2505491	Condition	! ad	297:5:6660:6662	2505475	0	True				
ANR	2505492	UnaryOperationExpression	! ad		2505475	0					
ANR	2505493	UnaryOperator	!		2505475	0					
ANR	2505494	Identifier	ad		2505475	1					
ANR	2505495	ReturnStatement	return ( false ) ;	297:11:6666:6681	2505475	1	True				
ANR	2505496	Identifier	false		2505475	0					
ANR	2505497	ReturnStatement	"return ( ad -> InsertAttr ( name , value ) ) ;"	298:1:6684:6723	2505475	2	True				
ANR	2505498	CallExpression	"ad -> InsertAttr ( name , value )"		2505475	0					
ANR	2505499	Callee	ad -> InsertAttr		2505475	0					
ANR	2505500	PtrMemberAccess	ad -> InsertAttr		2505475	0					
ANR	2505501	Identifier	ad		2505475	0					
ANR	2505502	Identifier	InsertAttr		2505475	1					
ANR	2505503	ArgumentList	name		2505475	1					
ANR	2505504	Argument	name		2505475	0					
ANR	2505505	Identifier	name		2505475	0					
ANR	2505506	Argument	value		2505475	1					
ANR	2505507	Identifier	value		2505475	0					
ANR	2505508	ReturnType	bool		2505475	1					
ANR	2505509	Identifier	ClassAd :: DeepInsertAttr		2505475	2					
ANR	2505510	ParameterList	"ExprTree * scopeExpr , const string & name , bool value"		2505475	3					
ANR	2505511	Parameter	ExprTree * scopeExpr	294:16:6556:6574	2505475	0	True				
ANR	2505512	ParameterType	ExprTree *		2505475	0					
ANR	2505513	Identifier	scopeExpr		2505475	1					
ANR	2505514	Parameter	const string & name	294:37:6577:6594	2505475	1	True				
ANR	2505515	ParameterType	const string &		2505475	0					
ANR	2505516	Identifier	name		2505475	1					
ANR	2505517	Parameter	bool value	294:57:6597:6606	2505475	2	True				
ANR	2505518	ParameterType	bool		2505475	0					
ANR	2505519	Identifier	value		2505475	1					
ANR	2505520	CFGEntryNode	ENTRY		2505475		True				
ANR	2505521	CFGExitNode	EXIT		2505475		True				
ANR	2505522	Symbol	ad		2505475						
ANR	2505523	Symbol	ad -> InsertAttr		2505475						
ANR	2505524	Symbol	name		2505475						
ANR	2505525	Symbol	false		2505475						
ANR	2505526	Symbol	* ad		2505475						
ANR	2505527	Symbol	scopeExpr		2505475						
ANR	2505528	Symbol	value		2505475						
ANR	2505529	Symbol	_GetDeepScope		2505475						
ANR	2505530	Function	ClassAd :: InsertAttr	305:0:6809:7074							
ANR	2505531	FunctionDef	"ClassAd :: InsertAttr (const string & name , const char * value)"		2505530	0					
ANR	2505532	CompoundStatement		307:0:6876:7074	2505530	0					
ANR	2505533	IdentifierDeclStatement	Value val ;	310:1:6977:6986	2505530	0	True				
ANR	2505534	IdentifierDecl	val		2505530	0					
ANR	2505535	IdentifierDeclType	Value		2505530	0					
ANR	2505536	Identifier	val		2505530	1					
ANR	2505537	ExpressionStatement	val . SetStringValue ( value )	311:1:6989:7016	2505530	1	True				
ANR	2505538	CallExpression	val . SetStringValue ( value )		2505530	0					
ANR	2505539	Callee	val . SetStringValue		2505530	0					
ANR	2505540	MemberAccess	val . SetStringValue		2505530	0					
ANR	2505541	Identifier	val		2505530	0					
ANR	2505542	Identifier	SetStringValue		2505530	1					
ANR	2505543	ArgumentList	value		2505530	1					
ANR	2505544	Argument	value		2505530	0					
ANR	2505545	Identifier	value		2505530	0					
ANR	2505546	ReturnStatement	"return ( Insert ( name , Literal :: MakeLiteral ( val ) ) ) ;"	312:1:7019:7072	2505530	2	True				
ANR	2505547	CallExpression	"Insert ( name , Literal :: MakeLiteral ( val ) )"		2505530	0					
ANR	2505548	Callee	Insert		2505530	0					
ANR	2505549	Identifier	Insert		2505530	0					
ANR	2505550	ArgumentList	name		2505530	1					
ANR	2505551	Argument	name		2505530	0					
ANR	2505552	Identifier	name		2505530	0					
ANR	2505553	Argument	Literal :: MakeLiteral ( val )		2505530	1					
ANR	2505554	CallExpression	Literal :: MakeLiteral ( val )		2505530	0					
ANR	2505555	Callee	Literal :: MakeLiteral		2505530	0					
ANR	2505556	Identifier	Literal :: MakeLiteral		2505530	0					
ANR	2505557	ArgumentList	val		2505530	1					
ANR	2505558	Argument	val		2505530	0					
ANR	2505559	Identifier	val		2505530	0					
ANR	2505560	ReturnType	bool		2505530	1					
ANR	2505561	Identifier	ClassAd :: InsertAttr		2505530	2					
ANR	2505562	ParameterList	"const string & name , const char * value"		2505530	3					
ANR	2505563	Parameter	const string & name	306:12:6836:6853	2505530	0	True				
ANR	2505564	ParameterType	const string &		2505530	0					
ANR	2505565	Identifier	name		2505530	1					
ANR	2505566	Parameter	const char * value	306:32:6856:6872	2505530	1	True				
ANR	2505567	ParameterType	const char *		2505530	0					
ANR	2505568	Identifier	value		2505530	1					
ANR	2505569	CFGEntryNode	ENTRY		2505530		True				
ANR	2505570	CFGExitNode	EXIT		2505530		True				
ANR	2505571	Symbol	val		2505530						
ANR	2505572	Symbol	Literal :: MakeLiteral		2505530						
ANR	2505573	Symbol	name		2505530						
ANR	2505574	Symbol	Insert		2505530						
ANR	2505575	Symbol	value		2505530						
ANR	2505576	Function	ClassAd :: DeepInsertAttr	315:0:7077:7284							
ANR	2505577	FunctionDef	"ClassAd :: DeepInsertAttr (ExprTree * scopeExpr , const string & name , const char * value)"		2505576	0					
ANR	2505578	CompoundStatement		317:0:7169:7284	2505576	0					
ANR	2505579	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	318:1:7172:7212	2505576	0	True				
ANR	2505580	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505576	0					
ANR	2505581	IdentifierDeclType	ClassAd *		2505576	0					
ANR	2505582	Identifier	ad		2505576	1					
ANR	2505583	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505576	2		=			
ANR	2505584	Identifier	ad		2505576	0					
ANR	2505585	CallExpression	_GetDeepScope ( scopeExpr )		2505576	1					
ANR	2505586	Callee	_GetDeepScope		2505576	0					
ANR	2505587	Identifier	_GetDeepScope		2505576	0					
ANR	2505588	ArgumentList	scopeExpr		2505576	1					
ANR	2505589	Argument	scopeExpr		2505576	0					
ANR	2505590	Identifier	scopeExpr		2505576	0					
ANR	2505591	IfStatement	if ( ! ad )		2505576	1					
ANR	2505592	Condition	! ad	319:5:7219:7221	2505576	0	True				
ANR	2505593	UnaryOperationExpression	! ad		2505576	0					
ANR	2505594	UnaryOperator	!		2505576	0					
ANR	2505595	Identifier	ad		2505576	1					
ANR	2505596	ReturnStatement	return ( false ) ;	319:11:7225:7240	2505576	1	True				
ANR	2505597	Identifier	false		2505576	0					
ANR	2505598	ReturnStatement	"return ( ad -> InsertAttr ( name , value ) ) ;"	320:1:7243:7282	2505576	2	True				
ANR	2505599	CallExpression	"ad -> InsertAttr ( name , value )"		2505576	0					
ANR	2505600	Callee	ad -> InsertAttr		2505576	0					
ANR	2505601	PtrMemberAccess	ad -> InsertAttr		2505576	0					
ANR	2505602	Identifier	ad		2505576	0					
ANR	2505603	Identifier	InsertAttr		2505576	1					
ANR	2505604	ArgumentList	name		2505576	1					
ANR	2505605	Argument	name		2505576	0					
ANR	2505606	Identifier	name		2505576	0					
ANR	2505607	Argument	value		2505576	1					
ANR	2505608	Identifier	value		2505576	0					
ANR	2505609	ReturnType	bool		2505576	1					
ANR	2505610	Identifier	ClassAd :: DeepInsertAttr		2505576	2					
ANR	2505611	ParameterList	"ExprTree * scopeExpr , const string & name , const char * value"		2505576	3					
ANR	2505612	Parameter	ExprTree * scopeExpr	316:16:7108:7126	2505576	0	True				
ANR	2505613	ParameterType	ExprTree *		2505576	0					
ANR	2505614	Identifier	scopeExpr		2505576	1					
ANR	2505615	Parameter	const string & name	316:37:7129:7146	2505576	1	True				
ANR	2505616	ParameterType	const string &		2505576	0					
ANR	2505617	Identifier	name		2505576	1					
ANR	2505618	Parameter	const char * value	316:57:7149:7165	2505576	2	True				
ANR	2505619	ParameterType	const char *		2505576	0					
ANR	2505620	Identifier	value		2505576	1					
ANR	2505621	CFGEntryNode	ENTRY		2505576		True				
ANR	2505622	CFGExitNode	EXIT		2505576		True				
ANR	2505623	Symbol	ad		2505576						
ANR	2505624	Symbol	ad -> InsertAttr		2505576						
ANR	2505625	Symbol	name		2505576						
ANR	2505626	Symbol	false		2505576						
ANR	2505627	Symbol	* ad		2505576						
ANR	2505628	Symbol	scopeExpr		2505576						
ANR	2505629	Symbol	value		2505576						
ANR	2505630	Symbol	_GetDeepScope		2505576						
ANR	2505631	Function	ClassAd :: InsertAttr	323:0:7287:7456							
ANR	2505632	FunctionDef	"ClassAd :: InsertAttr (const string & name , const string & value)"		2505631	0					
ANR	2505633	CompoundStatement		325:0:7356:7456	2505631	0					
ANR	2505634	IdentifierDeclStatement	Value val ;	326:1:7359:7368	2505631	0	True				
ANR	2505635	IdentifierDecl	val		2505631	0					
ANR	2505636	IdentifierDeclType	Value		2505631	0					
ANR	2505637	Identifier	val		2505631	1					
ANR	2505638	ExpressionStatement	val . SetStringValue ( value )	327:1:7371:7398	2505631	1	True				
ANR	2505639	CallExpression	val . SetStringValue ( value )		2505631	0					
ANR	2505640	Callee	val . SetStringValue		2505631	0					
ANR	2505641	MemberAccess	val . SetStringValue		2505631	0					
ANR	2505642	Identifier	val		2505631	0					
ANR	2505643	Identifier	SetStringValue		2505631	1					
ANR	2505644	ArgumentList	value		2505631	1					
ANR	2505645	Argument	value		2505631	0					
ANR	2505646	Identifier	value		2505631	0					
ANR	2505647	ReturnStatement	"return ( Insert ( name , Literal :: MakeLiteral ( val ) ) ) ;"	328:1:7401:7454	2505631	2	True				
ANR	2505648	CallExpression	"Insert ( name , Literal :: MakeLiteral ( val ) )"		2505631	0					
ANR	2505649	Callee	Insert		2505631	0					
ANR	2505650	Identifier	Insert		2505631	0					
ANR	2505651	ArgumentList	name		2505631	1					
ANR	2505652	Argument	name		2505631	0					
ANR	2505653	Identifier	name		2505631	0					
ANR	2505654	Argument	Literal :: MakeLiteral ( val )		2505631	1					
ANR	2505655	CallExpression	Literal :: MakeLiteral ( val )		2505631	0					
ANR	2505656	Callee	Literal :: MakeLiteral		2505631	0					
ANR	2505657	Identifier	Literal :: MakeLiteral		2505631	0					
ANR	2505658	ArgumentList	val		2505631	1					
ANR	2505659	Argument	val		2505631	0					
ANR	2505660	Identifier	val		2505631	0					
ANR	2505661	ReturnType	bool		2505631	1					
ANR	2505662	Identifier	ClassAd :: InsertAttr		2505631	2					
ANR	2505663	ParameterList	"const string & name , const string & value"		2505631	3					
ANR	2505664	Parameter	const string & name	324:12:7314:7331	2505631	0	True				
ANR	2505665	ParameterType	const string &		2505631	0					
ANR	2505666	Identifier	name		2505631	1					
ANR	2505667	Parameter	const string & value	324:32:7334:7352	2505631	1	True				
ANR	2505668	ParameterType	const string &		2505631	0					
ANR	2505669	Identifier	value		2505631	1					
ANR	2505670	CFGEntryNode	ENTRY		2505631		True				
ANR	2505671	CFGExitNode	EXIT		2505631		True				
ANR	2505672	Symbol	val		2505631						
ANR	2505673	Symbol	Literal :: MakeLiteral		2505631						
ANR	2505674	Symbol	name		2505631						
ANR	2505675	Symbol	Insert		2505631						
ANR	2505676	Symbol	value		2505631						
ANR	2505677	Function	ClassAd :: DeepInsertAttr	332:0:7460:7669							
ANR	2505678	FunctionDef	"ClassAd :: DeepInsertAttr (ExprTree * scopeExpr , const string & name , const string & value)"		2505677	0					
ANR	2505679	CompoundStatement		334:0:7554:7669	2505677	0					
ANR	2505680	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	335:1:7557:7597	2505677	0	True				
ANR	2505681	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505677	0					
ANR	2505682	IdentifierDeclType	ClassAd *		2505677	0					
ANR	2505683	Identifier	ad		2505677	1					
ANR	2505684	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505677	2		=			
ANR	2505685	Identifier	ad		2505677	0					
ANR	2505686	CallExpression	_GetDeepScope ( scopeExpr )		2505677	1					
ANR	2505687	Callee	_GetDeepScope		2505677	0					
ANR	2505688	Identifier	_GetDeepScope		2505677	0					
ANR	2505689	ArgumentList	scopeExpr		2505677	1					
ANR	2505690	Argument	scopeExpr		2505677	0					
ANR	2505691	Identifier	scopeExpr		2505677	0					
ANR	2505692	IfStatement	if ( ! ad )		2505677	1					
ANR	2505693	Condition	! ad	336:5:7604:7606	2505677	0	True				
ANR	2505694	UnaryOperationExpression	! ad		2505677	0					
ANR	2505695	UnaryOperator	!		2505677	0					
ANR	2505696	Identifier	ad		2505677	1					
ANR	2505697	ReturnStatement	return ( false ) ;	336:11:7610:7625	2505677	1	True				
ANR	2505698	Identifier	false		2505677	0					
ANR	2505699	ReturnStatement	"return ( ad -> InsertAttr ( name , value ) ) ;"	337:1:7628:7667	2505677	2	True				
ANR	2505700	CallExpression	"ad -> InsertAttr ( name , value )"		2505677	0					
ANR	2505701	Callee	ad -> InsertAttr		2505677	0					
ANR	2505702	PtrMemberAccess	ad -> InsertAttr		2505677	0					
ANR	2505703	Identifier	ad		2505677	0					
ANR	2505704	Identifier	InsertAttr		2505677	1					
ANR	2505705	ArgumentList	name		2505677	1					
ANR	2505706	Argument	name		2505677	0					
ANR	2505707	Identifier	name		2505677	0					
ANR	2505708	Argument	value		2505677	1					
ANR	2505709	Identifier	value		2505677	0					
ANR	2505710	ReturnType	bool		2505677	1					
ANR	2505711	Identifier	ClassAd :: DeepInsertAttr		2505677	2					
ANR	2505712	ParameterList	"ExprTree * scopeExpr , const string & name , const string & value"		2505677	3					
ANR	2505713	Parameter	ExprTree * scopeExpr	333:16:7491:7509	2505677	0	True				
ANR	2505714	ParameterType	ExprTree *		2505677	0					
ANR	2505715	Identifier	scopeExpr		2505677	1					
ANR	2505716	Parameter	const string & name	333:37:7512:7529	2505677	1	True				
ANR	2505717	ParameterType	const string &		2505677	0					
ANR	2505718	Identifier	name		2505677	1					
ANR	2505719	Parameter	const string & value	333:57:7532:7550	2505677	2	True				
ANR	2505720	ParameterType	const string &		2505677	0					
ANR	2505721	Identifier	value		2505677	1					
ANR	2505722	CFGEntryNode	ENTRY		2505677		True				
ANR	2505723	CFGExitNode	EXIT		2505677		True				
ANR	2505724	Symbol	ad		2505677						
ANR	2505725	Symbol	ad -> InsertAttr		2505677						
ANR	2505726	Symbol	name		2505677						
ANR	2505727	Symbol	false		2505677						
ANR	2505728	Symbol	* ad		2505677						
ANR	2505729	Symbol	scopeExpr		2505677						
ANR	2505730	Symbol	value		2505677						
ANR	2505731	Symbol	_GetDeepScope		2505677						
ANR	2505732	Function	ClassAd :: Insert	344:0:7747:8515							
ANR	2505733	FunctionDef	"ClassAd :: Insert (const string & name , ExprTree * tree)"		2505732	0					
ANR	2505734	CompoundStatement		346:0:7807:8515	2505732	0					
ANR	2505735	IfStatement	"if ( name == """" )"		2505732	0					
ANR	2505736	Condition	"name == """""	348:5:7833:7842	2505732	0	True				
ANR	2505737	EqualityExpression	"name == """""		2505732	0		==			
ANR	2505738	Identifier	name		2505732	0					
ANR	2505739	PrimaryExpression	""""""		2505732	1					
ANR	2505740	CompoundStatement		3:18:38:38	2505732	1					
ANR	2505741	ExpressionStatement	CondorErrno = ERR_MISSING_ATTRNAME	349:2:7850:7884	2505732	0	True				
ANR	2505742	AssignmentExpression	CondorErrno = ERR_MISSING_ATTRNAME		2505732	0		=			
ANR	2505743	Identifier	CondorErrno		2505732	0					
ANR	2505744	Identifier	ERR_MISSING_ATTRNAME		2505732	1					
ANR	2505745	ExpressionStatement	"CondorErrMsg = ""no attribute name when inserting expression in classad"""	350:2:7888:7958	2505732	1	True				
ANR	2505746	AssignmentExpression	"CondorErrMsg = ""no attribute name when inserting expression in classad"""		2505732	0		=			
ANR	2505747	Identifier	CondorErrMsg		2505732	0					
ANR	2505748	PrimaryExpression	"""no attribute name when inserting expression in classad"""		2505732	1					
ANR	2505749	ReturnStatement	return ( false ) ;	351:2:7962:7977	2505732	2	True				
ANR	2505750	Identifier	false		2505732	0					
ANR	2505751	IfStatement	if ( ! tree )		2505732	1					
ANR	2505752	Condition	! tree	353:5:7987:7991	2505732	0	True				
ANR	2505753	UnaryOperationExpression	! tree		2505732	0					
ANR	2505754	UnaryOperator	!		2505732	0					
ANR	2505755	Identifier	tree		2505732	1					
ANR	2505756	CompoundStatement		8:13:187:187	2505732	1					
ANR	2505757	ExpressionStatement	CondorErrno = ERR_BAD_EXPRESSION	354:2:7999:8031	2505732	0	True				
ANR	2505758	AssignmentExpression	CondorErrno = ERR_BAD_EXPRESSION		2505732	0		=			
ANR	2505759	Identifier	CondorErrno		2505732	0					
ANR	2505760	Identifier	ERR_BAD_EXPRESSION		2505732	1					
ANR	2505761	ExpressionStatement	"CondorErrMsg = ""no expression when inserting attribute "" + name + "" in classad"""	355:2:8035:8118	2505732	1	True				
ANR	2505762	AssignmentExpression	"CondorErrMsg = ""no expression when inserting attribute "" + name + "" in classad"""		2505732	0		=			
ANR	2505763	Identifier	CondorErrMsg		2505732	0					
ANR	2505764	AdditiveExpression	"""no expression when inserting attribute "" + name + "" in classad"""		2505732	1		+			
ANR	2505765	PrimaryExpression	"""no expression when inserting attribute """		2505732	0					
ANR	2505766	AdditiveExpression	"name + "" in classad"""		2505732	1		+			
ANR	2505767	Identifier	name		2505732	0					
ANR	2505768	PrimaryExpression	""" in classad"""		2505732	1					
ANR	2505769	ReturnStatement	return ( false ) ;	357:2:8122:8137	2505732	2	True				
ANR	2505770	Identifier	false		2505732	0					
ANR	2505771	ExpressionStatement	tree -> SetParentScope ( this )	361:1:8189:8217	2505732	2	True				
ANR	2505772	CallExpression	tree -> SetParentScope ( this )		2505732	0					
ANR	2505773	Callee	tree -> SetParentScope		2505732	0					
ANR	2505774	PtrMemberAccess	tree -> SetParentScope		2505732	0					
ANR	2505775	Identifier	tree		2505732	0					
ANR	2505776	Identifier	SetParentScope		2505732	1					
ANR	2505777	ArgumentList	this		2505732	1					
ANR	2505778	Argument	this		2505732	0					
ANR	2505779	Identifier	this		2505732	0					
ANR	2505780	IdentifierDeclStatement	"pair < AttrList :: iterator , bool > insert_result = attrList . insert ( AttrList :: value_type ( name , tree ) ) ;"	363:1:8221:8319	2505732	3	True				
ANR	2505781	IdentifierDecl	"insert_result = attrList . insert ( AttrList :: value_type ( name , tree ) )"		2505732	0					
ANR	2505782	IdentifierDeclType	"pair < AttrList :: iterator , bool >"		2505732	0					
ANR	2505783	Identifier	insert_result		2505732	1					
ANR	2505784	AssignmentExpression	"insert_result = attrList . insert ( AttrList :: value_type ( name , tree ) )"		2505732	2		=			
ANR	2505785	Identifier	insert_result		2505732	0					
ANR	2505786	CallExpression	"attrList . insert ( AttrList :: value_type ( name , tree ) )"		2505732	1					
ANR	2505787	Callee	attrList . insert		2505732	0					
ANR	2505788	MemberAccess	attrList . insert		2505732	0					
ANR	2505789	Identifier	attrList		2505732	0					
ANR	2505790	Identifier	insert		2505732	1					
ANR	2505791	ArgumentList	"AttrList :: value_type ( name , tree )"		2505732	1					
ANR	2505792	Argument	"AttrList :: value_type ( name , tree )"		2505732	0					
ANR	2505793	CallExpression	"AttrList :: value_type ( name , tree )"		2505732	0					
ANR	2505794	Callee	AttrList :: value_type		2505732	0					
ANR	2505795	Identifier	AttrList :: value_type		2505732	0					
ANR	2505796	ArgumentList	name		2505732	1					
ANR	2505797	Argument	name		2505732	0					
ANR	2505798	Identifier	name		2505732	0					
ANR	2505799	Argument	tree		2505732	1					
ANR	2505800	Identifier	tree		2505732	0					
ANR	2505801	IfStatement	if ( ! insert_result . second )		2505732	4					
ANR	2505802	Condition	! insert_result . second	366:5:8327:8347	2505732	0	True				
ANR	2505803	UnaryOperationExpression	! insert_result . second		2505732	0					
ANR	2505804	UnaryOperator	!		2505732	0					
ANR	2505805	MemberAccess	insert_result . second		2505732	1					
ANR	2505806	Identifier	insert_result		2505732	0					
ANR	2505807	Identifier	second		2505732	1					
ANR	2505808	CompoundStatement		21:29:543:543	2505732	1					
ANR	2505809	Statement	delete	368:2:8384:8389	2505732	0	True				
ANR	2505810	ExpressionStatement	insert_result . first -> second	368:9:8391:8418	2505732	1	True				
ANR	2505811	PtrMemberAccess	insert_result . first -> second		2505732	0					
ANR	2505812	MemberAccess	insert_result . first		2505732	0					
ANR	2505813	Identifier	insert_result		2505732	0					
ANR	2505814	Identifier	first		2505732	1					
ANR	2505815	Identifier	second		2505732	1					
ANR	2505816	ExpressionStatement	insert_result . first -> second = tree	369:2:8422:8456	2505732	2	True				
ANR	2505817	AssignmentExpression	insert_result . first -> second = tree		2505732	0		=			
ANR	2505818	PtrMemberAccess	insert_result . first -> second		2505732	0					
ANR	2505819	MemberAccess	insert_result . first		2505732	0					
ANR	2505820	Identifier	insert_result		2505732	0					
ANR	2505821	Identifier	first		2505732	1					
ANR	2505822	Identifier	second		2505732	1					
ANR	2505823	Identifier	tree		2505732	1					
ANR	2505824	ExpressionStatement	MarkAttributeDirty ( name )	372:1:8463:8487	2505732	5	True				
ANR	2505825	CallExpression	MarkAttributeDirty ( name )		2505732	0					
ANR	2505826	Callee	MarkAttributeDirty		2505732	0					
ANR	2505827	Identifier	MarkAttributeDirty		2505732	0					
ANR	2505828	ArgumentList	name		2505732	1					
ANR	2505829	Argument	name		2505732	0					
ANR	2505830	Identifier	name		2505732	0					
ANR	2505831	ReturnStatement	return ( true ) ;	374:1:8499:8513	2505732	6	True				
ANR	2505832	Identifier	true		2505732	0					
ANR	2505833	ReturnType	bool		2505732	1					
ANR	2505834	Identifier	ClassAd :: Insert		2505732	2					
ANR	2505835	ParameterList	"const string & name , ExprTree * tree"		2505732	3					
ANR	2505836	Parameter	const string & name	345:8:7770:7787	2505732	0	True				
ANR	2505837	ParameterType	const string &		2505732	0					
ANR	2505838	Identifier	name		2505732	1					
ANR	2505839	Parameter	ExprTree * tree	345:28:7790:7803	2505732	1	True				
ANR	2505840	ParameterType	ExprTree *		2505732	0					
ANR	2505841	Identifier	tree		2505732	1					
ANR	2505842	CFGEntryNode	ENTRY		2505732		True				
ANR	2505843	CFGExitNode	EXIT		2505732		True				
ANR	2505844	Symbol	tree		2505732						
ANR	2505845	Symbol	false		2505732						
ANR	2505846	Symbol	this		2505732						
ANR	2505847	Symbol	ERR_BAD_EXPRESSION		2505732						
ANR	2505848	Symbol	insert_result		2505732						
ANR	2505849	Symbol	* insert_result		2505732						
ANR	2505850	Symbol	attrList		2505732						
ANR	2505851	Symbol	insert_result . first -> second		2505732						
ANR	2505852	Symbol	CondorErrno		2505732						
ANR	2505853	Symbol	ERR_MISSING_ATTRNAME		2505732						
ANR	2505854	Symbol	attrList . insert		2505732						
ANR	2505855	Symbol	CondorErrMsg		2505732						
ANR	2505856	Symbol	name		2505732						
ANR	2505857	Symbol	AttrList :: value_type		2505732						
ANR	2505858	Symbol	insert_result . second		2505732						
ANR	2505859	Symbol	true		2505732						
ANR	2505860	Symbol	insert_result . first		2505732						
ANR	2505861	Symbol	* insert_result . first		2505732						
ANR	2505862	Function	ClassAd :: DeepInsert	378:0:8519:8714							
ANR	2505863	FunctionDef	"ClassAd :: DeepInsert (ExprTree * scopeExpr , const string & name , ExprTree * tree)"		2505862	0					
ANR	2505864	CompoundStatement		380:0:8604:8714	2505862	0					
ANR	2505865	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	381:1:8607:8647	2505862	0	True				
ANR	2505866	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2505862	0					
ANR	2505867	IdentifierDeclType	ClassAd *		2505862	0					
ANR	2505868	Identifier	ad		2505862	1					
ANR	2505869	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2505862	2		=			
ANR	2505870	Identifier	ad		2505862	0					
ANR	2505871	CallExpression	_GetDeepScope ( scopeExpr )		2505862	1					
ANR	2505872	Callee	_GetDeepScope		2505862	0					
ANR	2505873	Identifier	_GetDeepScope		2505862	0					
ANR	2505874	ArgumentList	scopeExpr		2505862	1					
ANR	2505875	Argument	scopeExpr		2505862	0					
ANR	2505876	Identifier	scopeExpr		2505862	0					
ANR	2505877	IfStatement	if ( ! ad )		2505862	1					
ANR	2505878	Condition	! ad	382:5:8654:8656	2505862	0	True				
ANR	2505879	UnaryOperationExpression	! ad		2505862	0					
ANR	2505880	UnaryOperator	!		2505862	0					
ANR	2505881	Identifier	ad		2505862	1					
ANR	2505882	ReturnStatement	return ( false ) ;	382:11:8660:8675	2505862	1	True				
ANR	2505883	Identifier	false		2505862	0					
ANR	2505884	ReturnStatement	"return ( ad -> Insert ( name , tree ) ) ;"	383:1:8678:8712	2505862	2	True				
ANR	2505885	CallExpression	"ad -> Insert ( name , tree )"		2505862	0					
ANR	2505886	Callee	ad -> Insert		2505862	0					
ANR	2505887	PtrMemberAccess	ad -> Insert		2505862	0					
ANR	2505888	Identifier	ad		2505862	0					
ANR	2505889	Identifier	Insert		2505862	1					
ANR	2505890	ArgumentList	name		2505862	1					
ANR	2505891	Argument	name		2505862	0					
ANR	2505892	Identifier	name		2505862	0					
ANR	2505893	Argument	tree		2505862	1					
ANR	2505894	Identifier	tree		2505862	0					
ANR	2505895	ReturnType	bool		2505862	1					
ANR	2505896	Identifier	ClassAd :: DeepInsert		2505862	2					
ANR	2505897	ParameterList	"ExprTree * scopeExpr , const string & name , ExprTree * tree"		2505862	3					
ANR	2505898	Parameter	ExprTree * scopeExpr	379:12:8546:8564	2505862	0	True				
ANR	2505899	ParameterType	ExprTree *		2505862	0					
ANR	2505900	Identifier	scopeExpr		2505862	1					
ANR	2505901	Parameter	const string & name	379:33:8567:8584	2505862	1	True				
ANR	2505902	ParameterType	const string &		2505862	0					
ANR	2505903	Identifier	name		2505862	1					
ANR	2505904	Parameter	ExprTree * tree	379:53:8587:8600	2505862	2	True				
ANR	2505905	ParameterType	ExprTree *		2505862	0					
ANR	2505906	Identifier	tree		2505862	1					
ANR	2505907	CFGEntryNode	ENTRY		2505862		True				
ANR	2505908	CFGExitNode	EXIT		2505862		True				
ANR	2505909	Symbol	ad		2505862						
ANR	2505910	Symbol	name		2505862						
ANR	2505911	Symbol	tree		2505862						
ANR	2505912	Symbol	false		2505862						
ANR	2505913	Symbol	ad -> Insert		2505862						
ANR	2505914	Symbol	* ad		2505862						
ANR	2505915	Symbol	scopeExpr		2505862						
ANR	2505916	Symbol	_GetDeepScope		2505862						
ANR	2505917	Function	ClassAd :: find	388:0:8781:8876							
ANR	2505918	FunctionDef	ClassAd :: find (string const & attrName)		2505917	0					
ANR	2505919	CompoundStatement		390:0:8838:8876	2505917	0					
ANR	2505920	ReturnStatement	return attrList . find ( attrName ) ;	391:4:8844:8874	2505917	0	True				
ANR	2505921	CallExpression	attrList . find ( attrName )		2505917	0					
ANR	2505922	Callee	attrList . find		2505917	0					
ANR	2505923	MemberAccess	attrList . find		2505917	0					
ANR	2505924	Identifier	attrList		2505917	0					
ANR	2505925	Identifier	find		2505917	1					
ANR	2505926	ArgumentList	attrName		2505917	1					
ANR	2505927	Argument	attrName		2505917	0					
ANR	2505928	Identifier	attrName		2505917	0					
ANR	2505929	ReturnType	ClassAd :: iterator		2505917	1					
ANR	2505930	Identifier	ClassAd :: find		2505917	2					
ANR	2505931	ParameterList	string const & attrName		2505917	3					
ANR	2505932	Parameter	string const & attrName	389:5:8814:8835	2505917	0	True				
ANR	2505933	ParameterType	string const &		2505917	0					
ANR	2505934	Identifier	attrName		2505917	1					
ANR	2505935	CFGEntryNode	ENTRY		2505917		True				
ANR	2505936	CFGExitNode	EXIT		2505917		True				
ANR	2505937	Symbol	attrList . find		2505917						
ANR	2505938	Symbol	attrName		2505917						
ANR	2505939	Symbol	attrList		2505917						
ANR	2505940	Function	ClassAd :: find	394:0:8880:8987							
ANR	2505941	FunctionDef	ClassAd :: find (string const & attrName)		2505940	0					
ANR	2505942	CompoundStatement		396:0:8949:8987	2505940	0					
ANR	2505943	ReturnStatement	return attrList . find ( attrName ) ;	397:4:8955:8985	2505940	0	True				
ANR	2505944	CallExpression	attrList . find ( attrName )		2505940	0					
ANR	2505945	Callee	attrList . find		2505940	0					
ANR	2505946	MemberAccess	attrList . find		2505940	0					
ANR	2505947	Identifier	attrList		2505940	0					
ANR	2505948	Identifier	find		2505940	1					
ANR	2505949	ArgumentList	attrName		2505940	1					
ANR	2505950	Argument	attrName		2505940	0					
ANR	2505951	Identifier	attrName		2505940	0					
ANR	2505952	ReturnType	ClassAd :: const_iterator		2505940	1					
ANR	2505953	Identifier	ClassAd :: find		2505940	2					
ANR	2505954	ParameterList	string const & attrName		2505940	3					
ANR	2505955	Parameter	string const & attrName	395:5:8919:8940	2505940	0	True				
ANR	2505956	ParameterType	string const &		2505940	0					
ANR	2505957	Identifier	attrName		2505940	1					
ANR	2505958	CFGEntryNode	ENTRY		2505940		True				
ANR	2505959	CFGExitNode	EXIT		2505940		True				
ANR	2505960	Symbol	attrList . find		2505940						
ANR	2505961	Symbol	attrName		2505940						
ANR	2505962	Symbol	attrList		2505940						
ANR	2505963	Function	ClassAd :: Lookup	402:0:9048:9361							
ANR	2505964	FunctionDef	ClassAd :: Lookup (const string & name)		2505963	0					
ANR	2505965	CompoundStatement		404:0:9103:9361	2505963	0					
ANR	2505966	IdentifierDeclStatement	ExprTree * tree ;	405:1:9106:9120	2505963	0	True				
ANR	2505967	IdentifierDecl	* tree		2505963	0					
ANR	2505968	IdentifierDeclType	ExprTree *		2505963	0					
ANR	2505969	Identifier	tree		2505963	1					
ANR	2505970	IdentifierDeclStatement	AttrList :: const_iterator itr ;	406:1:9123:9151	2505963	1	True				
ANR	2505971	IdentifierDecl	itr		2505963	0					
ANR	2505972	IdentifierDeclType	AttrList :: const_iterator		2505963	0					
ANR	2505973	Identifier	itr		2505963	1					
ANR	2505974	ExpressionStatement	itr = attrList . find ( name )	408:1:9155:9182	2505963	2	True				
ANR	2505975	AssignmentExpression	itr = attrList . find ( name )		2505963	0		=			
ANR	2505976	Identifier	itr		2505963	0					
ANR	2505977	CallExpression	attrList . find ( name )		2505963	1					
ANR	2505978	Callee	attrList . find		2505963	0					
ANR	2505979	MemberAccess	attrList . find		2505963	0					
ANR	2505980	Identifier	attrList		2505963	0					
ANR	2505981	Identifier	find		2505963	1					
ANR	2505982	ArgumentList	name		2505963	1					
ANR	2505983	Argument	name		2505963	0					
ANR	2505984	Identifier	name		2505963	0					
ANR	2505985	IfStatement	if ( itr != attrList . end ( ) )		2505963	3					
ANR	2505986	Condition	itr != attrList . end ( )	409:5:9189:9209	2505963	0	True				
ANR	2505987	EqualityExpression	itr != attrList . end ( )		2505963	0		!=			
ANR	2505988	Identifier	itr		2505963	0					
ANR	2505989	CallExpression	attrList . end ( )		2505963	1					
ANR	2505990	Callee	attrList . end		2505963	0					
ANR	2505991	MemberAccess	attrList . end		2505963	0					
ANR	2505992	Identifier	attrList		2505963	0					
ANR	2505993	Identifier	end		2505963	1					
ANR	2505994	ArgumentList			2505963	1					
ANR	2505995	CompoundStatement		6:28:108:108	2505963	1					
ANR	2505996	ExpressionStatement	tree = itr -> second	410:2:9216:9234	2505963	0	True				
ANR	2505997	AssignmentExpression	tree = itr -> second		2505963	0		=			
ANR	2505998	Identifier	tree		2505963	0					
ANR	2505999	PtrMemberAccess	itr -> second		2505963	1					
ANR	2506000	Identifier	itr		2505963	0					
ANR	2506001	Identifier	second		2505963	1					
ANR	2506002	ElseStatement	else		2505963	0					
ANR	2506003	IfStatement	if ( chained_parent_ad != NULL )		2505963	0					
ANR	2506004	Condition	chained_parent_ad != NULL	411:12:9248:9272	2505963	0	True				
ANR	2506005	EqualityExpression	chained_parent_ad != NULL		2505963	0		!=			
ANR	2506006	Identifier	chained_parent_ad		2505963	0					
ANR	2506007	Identifier	NULL		2505963	1					
ANR	2506008	CompoundStatement		8:39:171:171	2505963	1					
ANR	2506009	ExpressionStatement	tree = chained_parent_ad -> Lookup ( name )	412:2:9279:9317	2505963	0	True				
ANR	2506010	AssignmentExpression	tree = chained_parent_ad -> Lookup ( name )		2505963	0		=			
ANR	2506011	Identifier	tree		2505963	0					
ANR	2506012	CallExpression	chained_parent_ad -> Lookup ( name )		2505963	1					
ANR	2506013	Callee	chained_parent_ad -> Lookup		2505963	0					
ANR	2506014	PtrMemberAccess	chained_parent_ad -> Lookup		2505963	0					
ANR	2506015	Identifier	chained_parent_ad		2505963	0					
ANR	2506016	Identifier	Lookup		2505963	1					
ANR	2506017	ArgumentList	name		2505963	1					
ANR	2506018	Argument	name		2505963	0					
ANR	2506019	Identifier	name		2505963	0					
ANR	2506020	ElseStatement	else		2505963	0					
ANR	2506021	CompoundStatement		10:8:223:223	2505963	0					
ANR	2506022	ExpressionStatement	tree = NULL	414:2:9331:9342	2505963	0	True				
ANR	2506023	AssignmentExpression	tree = NULL		2505963	0		=			
ANR	2506024	Identifier	tree		2505963	0					
ANR	2506025	Identifier	NULL		2505963	1					
ANR	2506026	ReturnStatement	return tree ;	416:1:9348:9359	2505963	4	True				
ANR	2506027	Identifier	tree		2505963	0					
ANR	2506028	ReturnType	ExprTree *		2505963	1					
ANR	2506029	Identifier	ClassAd :: Lookup		2505963	2					
ANR	2506030	ParameterList	const string & name		2505963	3					
ANR	2506031	Parameter	const string & name	403:8:9076:9093	2505963	0	True				
ANR	2506032	ParameterType	const string &		2505963	0					
ANR	2506033	Identifier	name		2505963	1					
ANR	2506034	CFGEntryNode	ENTRY		2505963		True				
ANR	2506035	CFGExitNode	EXIT		2505963		True				
ANR	2506036	Symbol	attrList . end		2505963						
ANR	2506037	Symbol	NULL		2505963						
ANR	2506038	Symbol	itr		2505963						
ANR	2506039	Symbol	chained_parent_ad		2505963						
ANR	2506040	Symbol	name		2505963						
ANR	2506041	Symbol	tree		2505963						
ANR	2506042	Symbol	chained_parent_ad -> Lookup		2505963						
ANR	2506043	Symbol	attrList . find		2505963						
ANR	2506044	Symbol	* chained_parent_ad		2505963						
ANR	2506045	Symbol	attrList		2505963						
ANR	2506046	Symbol	* itr		2505963						
ANR	2506047	Symbol	itr -> second		2505963						
ANR	2506048	Function	ClassAd :: LookupInScope	420:0:9365:9688							
ANR	2506049	FunctionDef	"ClassAd :: LookupInScope (const string & name , const ClassAd * & finalScope)"		2506048	0					
ANR	2506050	CompoundStatement		422:0:9455:9688	2506048	0					
ANR	2506051	IdentifierDeclStatement	EvalState state ;	423:1:9458:9473	2506048	0	True				
ANR	2506052	IdentifierDecl	state		2506048	0					
ANR	2506053	IdentifierDeclType	EvalState		2506048	0					
ANR	2506054	Identifier	state		2506048	1					
ANR	2506055	IdentifierDeclStatement	ExprTree * tree ;	424:1:9476:9490	2506048	1	True				
ANR	2506056	IdentifierDecl	* tree		2506048	0					
ANR	2506057	IdentifierDeclType	ExprTree *		2506048	0					
ANR	2506058	Identifier	tree		2506048	1					
ANR	2506059	IdentifierDeclStatement	int rval ;	425:1:9493:9503	2506048	2	True				
ANR	2506060	IdentifierDecl	rval		2506048	0					
ANR	2506061	IdentifierDeclType	int		2506048	0					
ANR	2506062	Identifier	rval		2506048	1					
ANR	2506063	ExpressionStatement	state . SetScopes ( this )	427:1:9507:9530	2506048	3	True				
ANR	2506064	CallExpression	state . SetScopes ( this )		2506048	0					
ANR	2506065	Callee	state . SetScopes		2506048	0					
ANR	2506066	MemberAccess	state . SetScopes		2506048	0					
ANR	2506067	Identifier	state		2506048	0					
ANR	2506068	Identifier	SetScopes		2506048	1					
ANR	2506069	ArgumentList	this		2506048	1					
ANR	2506070	Argument	this		2506048	0					
ANR	2506071	Identifier	this		2506048	0					
ANR	2506072	ExpressionStatement	"rval = LookupInScope ( name , tree , state )"	428:1:9533:9574	2506048	4	True				
ANR	2506073	AssignmentExpression	"rval = LookupInScope ( name , tree , state )"		2506048	0		=			
ANR	2506074	Identifier	rval		2506048	0					
ANR	2506075	CallExpression	"LookupInScope ( name , tree , state )"		2506048	1					
ANR	2506076	Callee	LookupInScope		2506048	0					
ANR	2506077	Identifier	LookupInScope		2506048	0					
ANR	2506078	ArgumentList	name		2506048	1					
ANR	2506079	Argument	name		2506048	0					
ANR	2506080	Identifier	name		2506048	0					
ANR	2506081	Argument	tree		2506048	1					
ANR	2506082	Identifier	tree		2506048	0					
ANR	2506083	Argument	state		2506048	2					
ANR	2506084	Identifier	state		2506048	0					
ANR	2506085	IfStatement	if ( rval == EVAL_OK )		2506048	5					
ANR	2506086	Condition	rval == EVAL_OK	429:5:9581:9595	2506048	0	True				
ANR	2506087	EqualityExpression	rval == EVAL_OK		2506048	0		==			
ANR	2506088	Identifier	rval		2506048	0					
ANR	2506089	Identifier	EVAL_OK		2506048	1					
ANR	2506090	CompoundStatement		8:23:143:143	2506048	1					
ANR	2506091	ExpressionStatement	finalScope = state . curAd	430:2:9603:9627	2506048	0	True				
ANR	2506092	AssignmentExpression	finalScope = state . curAd		2506048	0		=			
ANR	2506093	Identifier	finalScope		2506048	0					
ANR	2506094	MemberAccess	state . curAd		2506048	1					
ANR	2506095	Identifier	state		2506048	0					
ANR	2506096	Identifier	curAd		2506048	1					
ANR	2506097	ReturnStatement	return ( tree ) ;	431:2:9631:9645	2506048	1	True				
ANR	2506098	Identifier	tree		2506048	0					
ANR	2506099	ExpressionStatement	finalScope = NULL	434:1:9652:9669	2506048	6	True				
ANR	2506100	AssignmentExpression	finalScope = NULL		2506048	0		=			
ANR	2506101	Identifier	finalScope		2506048	0					
ANR	2506102	Identifier	NULL		2506048	1					
ANR	2506103	ReturnStatement	return ( NULL ) ;	435:1:9672:9686	2506048	7	True				
ANR	2506104	Identifier	NULL		2506048	0					
ANR	2506105	ReturnType	ExprTree *		2506048	1					
ANR	2506106	Identifier	ClassAd :: LookupInScope		2506048	2					
ANR	2506107	ParameterList	"const string & name , const ClassAd * & finalScope"		2506048	3					
ANR	2506108	Parameter	const string & name	421:15:9400:9417	2506048	0	True				
ANR	2506109	ParameterType	const string &		2506048	0					
ANR	2506110	Identifier	name		2506048	1					
ANR	2506111	Parameter	const ClassAd * & finalScope	421:35:9420:9445	2506048	1	True				
ANR	2506112	ParameterType	const ClassAd * &		2506048	0					
ANR	2506113	Identifier	finalScope		2506048	1					
ANR	2506114	CFGEntryNode	ENTRY		2506048		True				
ANR	2506115	CFGExitNode	EXIT		2506048		True				
ANR	2506116	Symbol	finalScope		2506048						
ANR	2506117	Symbol	state . curAd		2506048						
ANR	2506118	Symbol	NULL		2506048						
ANR	2506119	Symbol	name		2506048						
ANR	2506120	Symbol	tree		2506048						
ANR	2506121	Symbol	this		2506048						
ANR	2506122	Symbol	EVAL_OK		2506048						
ANR	2506123	Symbol	rval		2506048						
ANR	2506124	Symbol	LookupInScope		2506048						
ANR	2506125	Symbol	state		2506048						
ANR	2506126	Function	ClassAd :: LookupInScope	439:0:9692:11027							
ANR	2506127	FunctionDef	"ClassAd :: LookupInScope (const string & name , ExprTree * & expr , EvalState & state)"		2506126	0					
ANR	2506128	CompoundStatement		441:0:9781:11027	2506126	0					
ANR	2506129	Statement	extern	442:1:9784:9789	2506126	0	True				
ANR	2506130	Statement	int	442:8:9791:9793	2506126	1	True				
ANR	2506131	Statement	exprHash	442:12:9795:9802	2506126	2	True				
ANR	2506132	Statement	(	442:20:9803:9803	2506126	3	True				
ANR	2506133	Statement	const	442:22:9805:9809	2506126	4	True				
ANR	2506134	Statement	ExprTree	442:28:9811:9818	2506126	5	True				
ANR	2506135	Statement	*	442:36:9819:9819	2506126	6	True				
ANR	2506136	Statement	const	442:38:9821:9825	2506126	7	True				
ANR	2506137	Statement	&	442:43:9826:9826	2506126	8	True				
ANR	2506138	Statement	","	442:44:9827:9827	2506126	9	True				
ANR	2506139	Statement	int	442:46:9829:9831	2506126	10	True				
ANR	2506140	Statement	)	442:50:9833:9833	2506126	11	True				
ANR	2506141	ExpressionStatement		442:51:9834:9834	2506126	12	True				
ANR	2506142	IdentifierDeclStatement	"const ClassAd * current = this , * superScope ;"	443:1:9837:9879	2506126	13	True				
ANR	2506143	IdentifierDecl	* current = this		2506126	0					
ANR	2506144	IdentifierDeclType	const ClassAd *		2506126	0					
ANR	2506145	Identifier	current		2506126	1					
ANR	2506146	AssignmentExpression	* current = this		2506126	2		=			
ANR	2506147	Identifier	this		2506126	0					
ANR	2506148	Identifier	this		2506126	1					
ANR	2506149	IdentifierDecl	* superScope		2506126	1					
ANR	2506150	IdentifierDeclType	const ClassAd *		2506126	0					
ANR	2506151	Identifier	superScope		2506126	1					
ANR	2506152	IdentifierDeclStatement	Value val ;	444:1:9882:9893	2506126	14	True				
ANR	2506153	IdentifierDecl	val		2506126	0					
ANR	2506154	IdentifierDeclType	Value		2506126	0					
ANR	2506155	Identifier	val		2506126	1					
ANR	2506156	ExpressionStatement	expr = NULL	446:1:9897:9908	2506126	15	True				
ANR	2506157	AssignmentExpression	expr = NULL		2506126	0		=			
ANR	2506158	Identifier	expr		2506126	0					
ANR	2506159	Identifier	NULL		2506126	1					
ANR	2506160	WhileStatement	while ( ! expr && current )		2506126	16					
ANR	2506161	Condition	! expr && current	448:8:9919:9934	2506126	0	True				
ANR	2506162	AndExpression	! expr && current		2506126	0		&&			
ANR	2506163	UnaryOperationExpression	! expr		2506126	0					
ANR	2506164	UnaryOperator	!		2506126	0					
ANR	2506165	Identifier	expr		2506126	1					
ANR	2506166	Identifier	current		2506126	1					
ANR	2506167	CompoundStatement		8:27:156:156	2506126	1					
ANR	2506168	ExpressionStatement	state . curAd = current	451:2:9994:10015	2506126	0	True				
ANR	2506169	AssignmentExpression	state . curAd = current		2506126	0		=			
ANR	2506170	MemberAccess	state . curAd		2506126	0					
ANR	2506171	Identifier	state		2506126	0					
ANR	2506172	Identifier	curAd		2506126	1					
ANR	2506173	Identifier	current		2506126	1					
ANR	2506174	IfStatement	if ( ( expr = current -> Lookup ( name ) ) )		2506126	1					
ANR	2506175	Condition	expr = current -> Lookup ( name )	454:6:10053:10086	2506126	0	True				
ANR	2506176	AssignmentExpression	expr = current -> Lookup ( name )		2506126	0		=			
ANR	2506177	Identifier	expr		2506126	0					
ANR	2506178	CallExpression	current -> Lookup ( name )		2506126	1					
ANR	2506179	Callee	current -> Lookup		2506126	0					
ANR	2506180	PtrMemberAccess	current -> Lookup		2506126	0					
ANR	2506181	Identifier	current		2506126	0					
ANR	2506182	Identifier	Lookup		2506126	1					
ANR	2506183	ArgumentList	name		2506126	1					
ANR	2506184	Argument	name		2506126	0					
ANR	2506185	Identifier	name		2506126	0					
ANR	2506186	CompoundStatement		14:43:308:308	2506126	1					
ANR	2506187	ReturnStatement	return ( EVAL_OK ) ;	455:3:10095:10112	2506126	0	True				
ANR	2506188	Identifier	EVAL_OK		2506126	0					
ANR	2506189	ExpressionStatement	superScope = current -> parentScope	458:2:10121:10154	2506126	2	True				
ANR	2506190	AssignmentExpression	superScope = current -> parentScope		2506126	0		=			
ANR	2506191	Identifier	superScope		2506126	0					
ANR	2506192	PtrMemberAccess	current -> parentScope		2506126	1					
ANR	2506193	Identifier	current		2506126	0					
ANR	2506194	Identifier	parentScope		2506126	1					
ANR	2506195	IfStatement	"if ( strcasecmp ( name . c_str ( ) , ""toplevel"" ) == 0 || strcasecmp ( name . c_str ( ) , ""root"" ) == 0 )"		2506126	3					
ANR	2506196	Condition	"strcasecmp ( name . c_str ( ) , ""toplevel"" ) == 0 || strcasecmp ( name . c_str ( ) , ""root"" ) == 0"	459:5:10161:10243	2506126	0	True				
ANR	2506197	OrExpression	"strcasecmp ( name . c_str ( ) , ""toplevel"" ) == 0 || strcasecmp ( name . c_str ( ) , ""root"" ) == 0"		2506126	0		||			
ANR	2506198	EqualityExpression	"strcasecmp ( name . c_str ( ) , ""toplevel"" ) == 0"		2506126	0		==			
ANR	2506199	CallExpression	"strcasecmp ( name . c_str ( ) , ""toplevel"" )"		2506126	0					
ANR	2506200	Callee	strcasecmp		2506126	0					
ANR	2506201	Identifier	strcasecmp		2506126	0					
ANR	2506202	ArgumentList	name . c_str ( )		2506126	1					
ANR	2506203	Argument	name . c_str ( )		2506126	0					
ANR	2506204	CallExpression	name . c_str ( )		2506126	0					
ANR	2506205	Callee	name . c_str		2506126	0					
ANR	2506206	MemberAccess	name . c_str		2506126	0					
ANR	2506207	Identifier	name		2506126	0					
ANR	2506208	Identifier	c_str		2506126	1					
ANR	2506209	ArgumentList			2506126	1					
ANR	2506210	Argument	"""toplevel"""		2506126	1					
ANR	2506211	PrimaryExpression	"""toplevel"""		2506126	0					
ANR	2506212	PrimaryExpression	0		2506126	1					
ANR	2506213	EqualityExpression	"strcasecmp ( name . c_str ( ) , ""root"" ) == 0"		2506126	1		==			
ANR	2506214	CallExpression	"strcasecmp ( name . c_str ( ) , ""root"" )"		2506126	0					
ANR	2506215	Callee	strcasecmp		2506126	0					
ANR	2506216	Identifier	strcasecmp		2506126	0					
ANR	2506217	ArgumentList	name . c_str ( )		2506126	1					
ANR	2506218	Argument	name . c_str ( )		2506126	0					
ANR	2506219	CallExpression	name . c_str ( )		2506126	0					
ANR	2506220	Callee	name . c_str		2506126	0					
ANR	2506221	MemberAccess	name . c_str		2506126	0					
ANR	2506222	Identifier	name		2506126	0					
ANR	2506223	Identifier	c_str		2506126	1					
ANR	2506224	ArgumentList			2506126	1					
ANR	2506225	Argument	"""root"""		2506126	1					
ANR	2506226	PrimaryExpression	"""root"""		2506126	0					
ANR	2506227	PrimaryExpression	0		2506126	1					
ANR	2506228	CompoundStatement		20:40:463:463	2506126	1					
ANR	2506229	ExpressionStatement	expr = ( ClassAd * ) state . rootAd	462:3:10302:10331	2506126	0	True				
ANR	2506230	AssignmentExpression	expr = ( ClassAd * ) state . rootAd		2506126	0		=			
ANR	2506231	Identifier	expr		2506126	0					
ANR	2506232	CastExpression	( ClassAd * ) state . rootAd		2506126	1					
ANR	2506233	CastTarget	ClassAd *		2506126	0					
ANR	2506234	MemberAccess	state . rootAd		2506126	1					
ANR	2506235	Identifier	state		2506126	0					
ANR	2506236	Identifier	rootAd		2506126	1					
ANR	2506237	IfStatement	if ( expr == NULL )		2506126	1					
ANR	2506238	Condition	expr == NULL	463:7:10340:10351	2506126	0	True				
ANR	2506239	EqualityExpression	expr == NULL		2506126	0		==			
ANR	2506240	Identifier	expr		2506126	0					
ANR	2506241	Identifier	NULL		2506126	1					
ANR	2506242	CompoundStatement		23:22:573:573	2506126	1					
ANR	2506243	ReturnStatement	return EVAL_FAIL ;	464:4:10393:10409	2506126	0	True				
ANR	2506244	Identifier	EVAL_FAIL		2506126	0					
ANR	2506245	ReturnStatement	return ( expr ? EVAL_OK : EVAL_UNDEF ) ;	466:3:10440:10477	2506126	2	True				
ANR	2506246	ConditionalExpression	expr ? EVAL_OK : EVAL_UNDEF		2506126	0					
ANR	2506247	Condition	expr		2506126	0					
ANR	2506248	Identifier	expr		2506126	0					
ANR	2506249	Identifier	EVAL_OK		2506126	1					
ANR	2506250	Identifier	EVAL_UNDEF		2506126	2					
ANR	2506251	ElseStatement	else		2506126	0					
ANR	2506252	IfStatement	"if ( strcasecmp ( name . c_str ( ) , ""self"" ) == 0 )"		2506126	0					
ANR	2506253	Condition	"strcasecmp ( name . c_str ( ) , ""self"" ) == 0"	467:13:10492:10531	2506126	0	True				
ANR	2506254	EqualityExpression	"strcasecmp ( name . c_str ( ) , ""self"" ) == 0"		2506126	0		==			
ANR	2506255	CallExpression	"strcasecmp ( name . c_str ( ) , ""self"" )"		2506126	0					
ANR	2506256	Callee	strcasecmp		2506126	0					
ANR	2506257	Identifier	strcasecmp		2506126	0					
ANR	2506258	ArgumentList	name . c_str ( )		2506126	1					
ANR	2506259	Argument	name . c_str ( )		2506126	0					
ANR	2506260	CallExpression	name . c_str ( )		2506126	0					
ANR	2506261	Callee	name . c_str		2506126	0					
ANR	2506262	MemberAccess	name . c_str		2506126	0					
ANR	2506263	Identifier	name		2506126	0					
ANR	2506264	Identifier	c_str		2506126	1					
ANR	2506265	ArgumentList			2506126	1					
ANR	2506266	Argument	"""self"""		2506126	1					
ANR	2506267	PrimaryExpression	"""self"""		2506126	0					
ANR	2506268	PrimaryExpression	0		2506126	1					
ANR	2506269	CompoundStatement		27:56:753:753	2506126	1					
ANR	2506270	ExpressionStatement	expr = ( ClassAd * ) state . curAd	469:3:10577:10605	2506126	0	True				
ANR	2506271	AssignmentExpression	expr = ( ClassAd * ) state . curAd		2506126	0		=			
ANR	2506272	Identifier	expr		2506126	0					
ANR	2506273	CastExpression	( ClassAd * ) state . curAd		2506126	1					
ANR	2506274	CastTarget	ClassAd *		2506126	0					
ANR	2506275	MemberAccess	state . curAd		2506126	1					
ANR	2506276	Identifier	state		2506126	0					
ANR	2506277	Identifier	curAd		2506126	1					
ANR	2506278	ReturnStatement	return ( expr ? EVAL_OK : EVAL_UNDEF ) ;	470:3:10610:10647	2506126	1	True				
ANR	2506279	ConditionalExpression	expr ? EVAL_OK : EVAL_UNDEF		2506126	0					
ANR	2506280	Condition	expr		2506126	0					
ANR	2506281	Identifier	expr		2506126	0					
ANR	2506282	Identifier	EVAL_OK		2506126	1					
ANR	2506283	Identifier	EVAL_UNDEF		2506126	2					
ANR	2506284	ElseStatement	else		2506126	0					
ANR	2506285	IfStatement	"if ( strcasecmp ( name . c_str ( ) , ""parent"" ) == 0 )"		2506126	0					
ANR	2506286	Condition	"strcasecmp ( name . c_str ( ) , ""parent"" ) == 0"	471:13:10662:10703	2506126	0	True				
ANR	2506287	EqualityExpression	"strcasecmp ( name . c_str ( ) , ""parent"" ) == 0"		2506126	0		==			
ANR	2506288	CallExpression	"strcasecmp ( name . c_str ( ) , ""parent"" )"		2506126	0					
ANR	2506289	Callee	strcasecmp		2506126	0					
ANR	2506290	Identifier	strcasecmp		2506126	0					
ANR	2506291	ArgumentList	name . c_str ( )		2506126	1					
ANR	2506292	Argument	name . c_str ( )		2506126	0					
ANR	2506293	CallExpression	name . c_str ( )		2506126	0					
ANR	2506294	Callee	name . c_str		2506126	0					
ANR	2506295	MemberAccess	name . c_str		2506126	0					
ANR	2506296	Identifier	name		2506126	0					
ANR	2506297	Identifier	c_str		2506126	1					
ANR	2506298	ArgumentList			2506126	1					
ANR	2506299	Argument	"""parent"""		2506126	1					
ANR	2506300	PrimaryExpression	"""parent"""		2506126	0					
ANR	2506301	PrimaryExpression	0		2506126	1					
ANR	2506302	CompoundStatement		31:58:925:925	2506126	1					
ANR	2506303	ExpressionStatement	expr = ( ClassAd * ) state . curAd -> parentScope	473:3:10737:10778	2506126	0	True				
ANR	2506304	AssignmentExpression	expr = ( ClassAd * ) state . curAd -> parentScope		2506126	0		=			
ANR	2506305	Identifier	expr		2506126	0					
ANR	2506306	CastExpression	( ClassAd * ) state . curAd -> parentScope		2506126	1					
ANR	2506307	CastTarget	ClassAd *		2506126	0					
ANR	2506308	PtrMemberAccess	state . curAd -> parentScope		2506126	1					
ANR	2506309	MemberAccess	state . curAd		2506126	0					
ANR	2506310	Identifier	state		2506126	0					
ANR	2506311	Identifier	curAd		2506126	1					
ANR	2506312	Identifier	parentScope		2506126	1					
ANR	2506313	ReturnStatement	return ( expr ? EVAL_OK : EVAL_UNDEF ) ;	474:3:10783:10820	2506126	1	True				
ANR	2506314	ConditionalExpression	expr ? EVAL_OK : EVAL_UNDEF		2506126	0					
ANR	2506315	Condition	expr		2506126	0					
ANR	2506316	Identifier	expr		2506126	0					
ANR	2506317	Identifier	EVAL_OK		2506126	1					
ANR	2506318	Identifier	EVAL_UNDEF		2506126	2					
ANR	2506319	ElseStatement	else		2506126	0					
ANR	2506320	CompoundStatement		35:9:1049:1049	2506126	0					
ANR	2506321	ExpressionStatement	current = superScope	477:3:10885:10905	2506126	0	True				
ANR	2506322	AssignmentExpression	current = superScope		2506126	0		=			
ANR	2506323	Identifier	current		2506126	0					
ANR	2506324	Identifier	superScope		2506126	1					
ANR	2506325	IfStatement	if ( current == this )		2506126	1					
ANR	2506326	Condition	current == this	478:7:10914:10928	2506126	0	True				
ANR	2506327	EqualityExpression	current == this		2506126	0		==			
ANR	2506328	Identifier	current		2506126	0					
ANR	2506329	Identifier	this		2506126	1					
ANR	2506330	CompoundStatement		38:25:1150:1150	2506126	1					
ANR	2506331	ReturnStatement	return ( EVAL_UNDEF ) ;	479:4:10968:10988	2506126	0	True				
ANR	2506332	Identifier	EVAL_UNDEF		2506126	0					
ANR	2506333	ReturnStatement	return ( EVAL_UNDEF ) ;	484:1:11005:11025	2506126	17	True				
ANR	2506334	Identifier	EVAL_UNDEF		2506126	0					
ANR	2506335	ReturnType	int		2506126	1					
ANR	2506336	Identifier	ClassAd :: LookupInScope		2506126	2					
ANR	2506337	ParameterList	"const string & name , ExprTree * & expr , EvalState & state"		2506126	3					
ANR	2506338	Parameter	const string & name	440:14:9720:9737	2506126	0	True				
ANR	2506339	ParameterType	const string &		2506126	0					
ANR	2506340	Identifier	name		2506126	1					
ANR	2506341	Parameter	ExprTree * & expr	440:34:9740:9754	2506126	1	True				
ANR	2506342	ParameterType	ExprTree * &		2506126	0					
ANR	2506343	Identifier	expr		2506126	1					
ANR	2506344	Parameter	EvalState & state	440:51:9757:9772	2506126	2	True				
ANR	2506345	ParameterType	EvalState &		2506126	0					
ANR	2506346	Identifier	state		2506126	1					
ANR	2506347	CFGEntryNode	ENTRY		2506126		True				
ANR	2506348	CFGExitNode	EXIT		2506126		True				
ANR	2506349	Symbol	val		2506126						
ANR	2506350	Symbol	current -> Lookup		2506126						
ANR	2506351	Symbol	current -> parentScope		2506126						
ANR	2506352	Symbol	NULL		2506126						
ANR	2506353	Symbol	* state . curAd		2506126						
ANR	2506354	Symbol	this		2506126						
ANR	2506355	Symbol	* current		2506126						
ANR	2506356	Symbol	state . rootAd		2506126						
ANR	2506357	Symbol	name . c_str		2506126						
ANR	2506358	Symbol	state . curAd		2506126						
ANR	2506359	Symbol	* state		2506126						
ANR	2506360	Symbol	current		2506126						
ANR	2506361	Symbol	EVAL_UNDEF		2506126						
ANR	2506362	Symbol	EVAL_FAIL		2506126						
ANR	2506363	Symbol	name		2506126						
ANR	2506364	Symbol	EVAL_OK		2506126						
ANR	2506365	Symbol	expr		2506126						
ANR	2506366	Symbol	state		2506126						
ANR	2506367	Symbol	strcasecmp		2506126						
ANR	2506368	Symbol	state . curAd -> parentScope		2506126						
ANR	2506369	Symbol	superScope		2506126						
ANR	2506370	Function	ClassAd :: Delete	491:0:11089:12006							
ANR	2506371	FunctionDef	ClassAd :: Delete (const string & name)		2506370	0					
ANR	2506372	CompoundStatement		493:0:11133:12006	2506370	0					
ANR	2506373	IdentifierDeclStatement	bool deleted_attribute ;	494:1:11136:11158	2506370	0	True				
ANR	2506374	IdentifierDecl	deleted_attribute		2506370	0					
ANR	2506375	IdentifierDeclType	bool		2506370	0					
ANR	2506376	Identifier	deleted_attribute		2506370	1					
ANR	2506377	ExpressionStatement	deleted_attribute = false	496:4:11165:11190	2506370	1	True				
ANR	2506378	AssignmentExpression	deleted_attribute = false		2506370	0		=			
ANR	2506379	Identifier	deleted_attribute		2506370	0					
ANR	2506380	Identifier	false		2506370	1					
ANR	2506381	IdentifierDeclStatement	AttrList :: iterator itr = attrList . find ( name ) ;	497:1:11193:11239	2506370	2	True				
ANR	2506382	IdentifierDecl	itr = attrList . find ( name )		2506370	0					
ANR	2506383	IdentifierDeclType	AttrList :: iterator		2506370	0					
ANR	2506384	Identifier	itr		2506370	1					
ANR	2506385	AssignmentExpression	itr = attrList . find ( name )		2506370	2		=			
ANR	2506386	Identifier	itr		2506370	0					
ANR	2506387	CallExpression	attrList . find ( name )		2506370	1					
ANR	2506388	Callee	attrList . find		2506370	0					
ANR	2506389	MemberAccess	attrList . find		2506370	0					
ANR	2506390	Identifier	attrList		2506370	0					
ANR	2506391	Identifier	find		2506370	1					
ANR	2506392	ArgumentList	name		2506370	1					
ANR	2506393	Argument	name		2506370	0					
ANR	2506394	Identifier	name		2506370	0					
ANR	2506395	IfStatement	if ( itr != attrList . end ( ) )		2506370	3					
ANR	2506396	Condition	itr != attrList . end ( )	498:5:11246:11267	2506370	0	True				
ANR	2506397	EqualityExpression	itr != attrList . end ( )		2506370	0		!=			
ANR	2506398	Identifier	itr		2506370	0					
ANR	2506399	CallExpression	attrList . end ( )		2506370	1					
ANR	2506400	Callee	attrList . end		2506370	0					
ANR	2506401	MemberAccess	attrList . end		2506370	0					
ANR	2506402	Identifier	attrList		2506370	0					
ANR	2506403	Identifier	end		2506370	1					
ANR	2506404	ArgumentList			2506370	1					
ANR	2506405	CompoundStatement		6:30:137:137	2506370	1					
ANR	2506406	Statement	delete	499:2:11275:11280	2506370	0	True				
ANR	2506407	ExpressionStatement	itr -> second	499:9:11282:11293	2506370	1	True				
ANR	2506408	PtrMemberAccess	itr -> second		2506370	0					
ANR	2506409	Identifier	itr		2506370	0					
ANR	2506410	Identifier	second		2506370	1					
ANR	2506411	ExpressionStatement	attrList . erase ( itr )	500:2:11297:11318	2506370	2	True				
ANR	2506412	CallExpression	attrList . erase ( itr )		2506370	0					
ANR	2506413	Callee	attrList . erase		2506370	0					
ANR	2506414	MemberAccess	attrList . erase		2506370	0					
ANR	2506415	Identifier	attrList		2506370	0					
ANR	2506416	Identifier	erase		2506370	1					
ANR	2506417	ArgumentList	itr		2506370	1					
ANR	2506418	Argument	itr		2506370	0					
ANR	2506419	Identifier	itr		2506370	0					
ANR	2506420	ExpressionStatement	deleted_attribute = true	501:2:11322:11346	2506370	3	True				
ANR	2506421	AssignmentExpression	deleted_attribute = true		2506370	0		=			
ANR	2506422	Identifier	deleted_attribute		2506370	0					
ANR	2506423	Identifier	true		2506370	1					
ANR	2506424	IfStatement	if ( chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL )		2506370	4					
ANR	2506425	Condition	chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL	507:5:11614:11683	2506370	0	True				
ANR	2506426	AndExpression	chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL		2506370	0		&&			
ANR	2506427	EqualityExpression	chained_parent_ad != NULL		2506370	0		!=			
ANR	2506428	Identifier	chained_parent_ad		2506370	0					
ANR	2506429	Identifier	NULL		2506370	1					
ANR	2506430	EqualityExpression	chained_parent_ad -> Lookup ( name ) != NULL		2506370	1		!=			
ANR	2506431	CallExpression	chained_parent_ad -> Lookup ( name )		2506370	0					
ANR	2506432	Callee	chained_parent_ad -> Lookup		2506370	0					
ANR	2506433	PtrMemberAccess	chained_parent_ad -> Lookup		2506370	0					
ANR	2506434	Identifier	chained_parent_ad		2506370	0					
ANR	2506435	Identifier	Lookup		2506370	1					
ANR	2506436	ArgumentList	name		2506370	1					
ANR	2506437	Argument	name		2506370	0					
ANR	2506438	Identifier	name		2506370	0					
ANR	2506439	Identifier	NULL		2506370	1					
ANR	2506440	CompoundStatement		17:2:556:577	2506370	1					
ANR	2506441	IdentifierDeclStatement	Value undefined_value ;	509:2:11690:11711	2506370	0	True				
ANR	2506442	IdentifierDecl	undefined_value		2506370	0					
ANR	2506443	IdentifierDeclType	Value		2506370	0					
ANR	2506444	Identifier	undefined_value		2506370	1					
ANR	2506445	ExpressionStatement	undefined_value . SetUndefinedValue ( )	511:2:11718:11753	2506370	1	True				
ANR	2506446	CallExpression	undefined_value . SetUndefinedValue ( )		2506370	0					
ANR	2506447	Callee	undefined_value . SetUndefinedValue		2506370	0					
ANR	2506448	MemberAccess	undefined_value . SetUndefinedValue		2506370	0					
ANR	2506449	Identifier	undefined_value		2506370	0					
ANR	2506450	Identifier	SetUndefinedValue		2506370	1					
ANR	2506451	ArgumentList			2506370	1					
ANR	2506452	ExpressionStatement	deleted_attribute = true	512:2:11757:11781	2506370	2	True				
ANR	2506453	AssignmentExpression	deleted_attribute = true		2506370	0		=			
ANR	2506454	Identifier	deleted_attribute		2506370	0					
ANR	2506455	Identifier	true		2506370	1					
ANR	2506456	ExpressionStatement	"Insert ( name , Literal :: MakeLiteral ( undefined_value ) )"	513:2:11785:11836	2506370	3	True				
ANR	2506457	CallExpression	"Insert ( name , Literal :: MakeLiteral ( undefined_value ) )"		2506370	0					
ANR	2506458	Callee	Insert		2506370	0					
ANR	2506459	Identifier	Insert		2506370	0					
ANR	2506460	ArgumentList	name		2506370	1					
ANR	2506461	Argument	name		2506370	0					
ANR	2506462	Identifier	name		2506370	0					
ANR	2506463	Argument	Literal :: MakeLiteral ( undefined_value )		2506370	1					
ANR	2506464	CallExpression	Literal :: MakeLiteral ( undefined_value )		2506370	0					
ANR	2506465	Callee	Literal :: MakeLiteral		2506370	0					
ANR	2506466	Identifier	Literal :: MakeLiteral		2506370	0					
ANR	2506467	ArgumentList	undefined_value		2506370	1					
ANR	2506468	Argument	undefined_value		2506370	0					
ANR	2506469	Identifier	undefined_value		2506370	0					
ANR	2506470	IfStatement	if ( ! deleted_attribute )		2506370	5					
ANR	2506471	Condition	! deleted_attribute	516:5:11847:11864	2506370	0	True				
ANR	2506472	UnaryOperationExpression	! deleted_attribute		2506370	0					
ANR	2506473	UnaryOperator	!		2506370	0					
ANR	2506474	Identifier	deleted_attribute		2506370	1					
ANR	2506475	CompoundStatement		24:25:733:733	2506370	1					
ANR	2506476	ExpressionStatement	CondorErrno = ERR_MISSING_ATTRIBUTE	517:2:11871:11906	2506370	0	True				
ANR	2506477	AssignmentExpression	CondorErrno = ERR_MISSING_ATTRIBUTE		2506370	0		=			
ANR	2506478	Identifier	CondorErrno		2506370	0					
ANR	2506479	Identifier	ERR_MISSING_ATTRIBUTE		2506370	1					
ANR	2506480	ExpressionStatement	"CondorErrMsg = ""attribute "" + name + "" not found to be deleted"""	518:2:11910:11973	2506370	1	True				
ANR	2506481	AssignmentExpression	"CondorErrMsg = ""attribute "" + name + "" not found to be deleted"""		2506370	0		=			
ANR	2506482	Identifier	CondorErrMsg		2506370	0					
ANR	2506483	AdditiveExpression	"""attribute "" + name + "" not found to be deleted"""		2506370	1		+			
ANR	2506484	PrimaryExpression	"""attribute """		2506370	0					
ANR	2506485	AdditiveExpression	"name + "" not found to be deleted"""		2506370	1		+			
ANR	2506486	Identifier	name		2506370	0					
ANR	2506487	PrimaryExpression	""" not found to be deleted"""		2506370	1					
ANR	2506488	ReturnStatement	return deleted_attribute ;	521:1:11980:12004	2506370	6	True				
ANR	2506489	Identifier	deleted_attribute		2506370	0					
ANR	2506490	ReturnType	bool		2506370	1					
ANR	2506491	Identifier	ClassAd :: Delete		2506370	2					
ANR	2506492	ParameterList	const string & name		2506370	3					
ANR	2506493	Parameter	const string & name	492:8:11112:11129	2506370	0	True				
ANR	2506494	ParameterType	const string &		2506370	0					
ANR	2506495	Identifier	name		2506370	1					
ANR	2506496	CFGEntryNode	ENTRY		2506370		True				
ANR	2506497	CFGExitNode	EXIT		2506370		True				
ANR	2506498	Symbol	Literal :: MakeLiteral		2506370						
ANR	2506499	Symbol	NULL		2506370						
ANR	2506500	Symbol	itr		2506370						
ANR	2506501	Symbol	ERR_MISSING_ATTRIBUTE		2506370						
ANR	2506502	Symbol	false		2506370						
ANR	2506503	Symbol	chained_parent_ad -> Lookup		2506370						
ANR	2506504	Symbol	undefined_value		2506370						
ANR	2506505	Symbol	attrList		2506370						
ANR	2506506	Symbol	CondorErrno		2506370						
ANR	2506507	Symbol	attrList . end		2506370						
ANR	2506508	Symbol	CondorErrMsg		2506370						
ANR	2506509	Symbol	chained_parent_ad		2506370						
ANR	2506510	Symbol	name		2506370						
ANR	2506511	Symbol	true		2506370						
ANR	2506512	Symbol	deleted_attribute		2506370						
ANR	2506513	Symbol	attrList . find		2506370						
ANR	2506514	Symbol	* chained_parent_ad		2506370						
ANR	2506515	Function	ClassAd :: DeepDelete	524:0:12009:12182							
ANR	2506516	FunctionDef	"ClassAd :: DeepDelete (ExprTree * scopeExpr , const string & name)"		2506515	0					
ANR	2506517	CompoundStatement		526:0:12078:12182	2506515	0					
ANR	2506518	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	527:1:12081:12121	2506515	0	True				
ANR	2506519	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2506515	0					
ANR	2506520	IdentifierDeclType	ClassAd *		2506515	0					
ANR	2506521	Identifier	ad		2506515	1					
ANR	2506522	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2506515	2		=			
ANR	2506523	Identifier	ad		2506515	0					
ANR	2506524	CallExpression	_GetDeepScope ( scopeExpr )		2506515	1					
ANR	2506525	Callee	_GetDeepScope		2506515	0					
ANR	2506526	Identifier	_GetDeepScope		2506515	0					
ANR	2506527	ArgumentList	scopeExpr		2506515	1					
ANR	2506528	Argument	scopeExpr		2506515	0					
ANR	2506529	Identifier	scopeExpr		2506515	0					
ANR	2506530	IfStatement	if ( ! ad )		2506515	1					
ANR	2506531	Condition	! ad	528:5:12128:12130	2506515	0	True				
ANR	2506532	UnaryOperationExpression	! ad		2506515	0					
ANR	2506533	UnaryOperator	!		2506515	0					
ANR	2506534	Identifier	ad		2506515	1					
ANR	2506535	ReturnStatement	return ( false ) ;	528:11:12134:12149	2506515	1	True				
ANR	2506536	Identifier	false		2506515	0					
ANR	2506537	ReturnStatement	return ( ad -> Delete ( name ) ) ;	529:1:12152:12180	2506515	2	True				
ANR	2506538	CallExpression	ad -> Delete ( name )		2506515	0					
ANR	2506539	Callee	ad -> Delete		2506515	0					
ANR	2506540	PtrMemberAccess	ad -> Delete		2506515	0					
ANR	2506541	Identifier	ad		2506515	0					
ANR	2506542	Identifier	Delete		2506515	1					
ANR	2506543	ArgumentList	name		2506515	1					
ANR	2506544	Argument	name		2506515	0					
ANR	2506545	Identifier	name		2506515	0					
ANR	2506546	ReturnType	bool		2506515	1					
ANR	2506547	Identifier	ClassAd :: DeepDelete		2506515	2					
ANR	2506548	ParameterList	"ExprTree * scopeExpr , const string & name"		2506515	3					
ANR	2506549	Parameter	ExprTree * scopeExpr	525:12:12036:12054	2506515	0	True				
ANR	2506550	ParameterType	ExprTree *		2506515	0					
ANR	2506551	Identifier	scopeExpr		2506515	1					
ANR	2506552	Parameter	const string & name	525:33:12057:12074	2506515	1	True				
ANR	2506553	ParameterType	const string &		2506515	0					
ANR	2506554	Identifier	name		2506515	1					
ANR	2506555	CFGEntryNode	ENTRY		2506515		True				
ANR	2506556	CFGExitNode	EXIT		2506515		True				
ANR	2506557	Symbol	ad		2506515						
ANR	2506558	Symbol	name		2506515						
ANR	2506559	Symbol	false		2506515						
ANR	2506560	Symbol	* ad		2506515						
ANR	2506561	Symbol	ad -> Delete		2506515						
ANR	2506562	Symbol	scopeExpr		2506515						
ANR	2506563	Symbol	_GetDeepScope		2506515						
ANR	2506564	Function	ClassAd :: Remove	536:0:12244:13037							
ANR	2506565	FunctionDef	ClassAd :: Remove (const string & name)		2506564	0					
ANR	2506566	CompoundStatement		538:0:12293:13037	2506564	0					
ANR	2506567	IdentifierDeclStatement	ExprTree * tree ;	539:1:12296:12310	2506564	0	True				
ANR	2506568	IdentifierDecl	* tree		2506564	0					
ANR	2506569	IdentifierDeclType	ExprTree *		2506564	0					
ANR	2506570	Identifier	tree		2506564	1					
ANR	2506571	ExpressionStatement	tree = NULL	541:1:12314:12325	2506564	1	True				
ANR	2506572	AssignmentExpression	tree = NULL		2506564	0		=			
ANR	2506573	Identifier	tree		2506564	0					
ANR	2506574	Identifier	NULL		2506564	1					
ANR	2506575	IdentifierDeclStatement	AttrList :: iterator itr = attrList . find ( name ) ;	542:1:12328:12374	2506564	2	True				
ANR	2506576	IdentifierDecl	itr = attrList . find ( name )		2506564	0					
ANR	2506577	IdentifierDeclType	AttrList :: iterator		2506564	0					
ANR	2506578	Identifier	itr		2506564	1					
ANR	2506579	AssignmentExpression	itr = attrList . find ( name )		2506564	2		=			
ANR	2506580	Identifier	itr		2506564	0					
ANR	2506581	CallExpression	attrList . find ( name )		2506564	1					
ANR	2506582	Callee	attrList . find		2506564	0					
ANR	2506583	MemberAccess	attrList . find		2506564	0					
ANR	2506584	Identifier	attrList		2506564	0					
ANR	2506585	Identifier	find		2506564	1					
ANR	2506586	ArgumentList	name		2506564	1					
ANR	2506587	Argument	name		2506564	0					
ANR	2506588	Identifier	name		2506564	0					
ANR	2506589	IfStatement	if ( itr != attrList . end ( ) )		2506564	3					
ANR	2506590	Condition	itr != attrList . end ( )	543:5:12381:12402	2506564	0	True				
ANR	2506591	EqualityExpression	itr != attrList . end ( )		2506564	0		!=			
ANR	2506592	Identifier	itr		2506564	0					
ANR	2506593	CallExpression	attrList . end ( )		2506564	1					
ANR	2506594	Callee	attrList . end		2506564	0					
ANR	2506595	MemberAccess	attrList . end		2506564	0					
ANR	2506596	Identifier	attrList		2506564	0					
ANR	2506597	Identifier	end		2506564	1					
ANR	2506598	ArgumentList			2506564	1					
ANR	2506599	CompoundStatement		6:30:112:112	2506564	1					
ANR	2506600	ExpressionStatement	tree = itr -> second	544:2:12410:12428	2506564	0	True				
ANR	2506601	AssignmentExpression	tree = itr -> second		2506564	0		=			
ANR	2506602	Identifier	tree		2506564	0					
ANR	2506603	PtrMemberAccess	itr -> second		2506564	1					
ANR	2506604	Identifier	itr		2506564	0					
ANR	2506605	Identifier	second		2506564	1					
ANR	2506606	ExpressionStatement	attrList . erase ( itr )	545:2:12432:12453	2506564	1	True				
ANR	2506607	CallExpression	attrList . erase ( itr )		2506564	0					
ANR	2506608	Callee	attrList . erase		2506564	0					
ANR	2506609	MemberAccess	attrList . erase		2506564	0					
ANR	2506610	Identifier	attrList		2506564	0					
ANR	2506611	Identifier	erase		2506564	1					
ANR	2506612	ArgumentList	itr		2506564	1					
ANR	2506613	Argument	itr		2506564	0					
ANR	2506614	Identifier	itr		2506564	0					
ANR	2506615	ExpressionStatement	tree -> SetParentScope ( NULL )	546:2:12457:12485	2506564	2	True				
ANR	2506616	CallExpression	tree -> SetParentScope ( NULL )		2506564	0					
ANR	2506617	Callee	tree -> SetParentScope		2506564	0					
ANR	2506618	PtrMemberAccess	tree -> SetParentScope		2506564	0					
ANR	2506619	Identifier	tree		2506564	0					
ANR	2506620	Identifier	SetParentScope		2506564	1					
ANR	2506621	ArgumentList	NULL		2506564	1					
ANR	2506622	Argument	NULL		2506564	0					
ANR	2506623	Identifier	NULL		2506564	0					
ANR	2506624	IfStatement	if ( chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL )		2506564	4					
ANR	2506625	Condition	chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL	553:5:12754:12823	2506564	0	True				
ANR	2506626	AndExpression	chained_parent_ad != NULL && chained_parent_ad -> Lookup ( name ) != NULL		2506564	0		&&			
ANR	2506627	EqualityExpression	chained_parent_ad != NULL		2506564	0		!=			
ANR	2506628	Identifier	chained_parent_ad		2506564	0					
ANR	2506629	Identifier	NULL		2506564	1					
ANR	2506630	EqualityExpression	chained_parent_ad -> Lookup ( name ) != NULL		2506564	1		!=			
ANR	2506631	CallExpression	chained_parent_ad -> Lookup ( name )		2506564	0					
ANR	2506632	Callee	chained_parent_ad -> Lookup		2506564	0					
ANR	2506633	PtrMemberAccess	chained_parent_ad -> Lookup		2506564	0					
ANR	2506634	Identifier	chained_parent_ad		2506564	0					
ANR	2506635	Identifier	Lookup		2506564	1					
ANR	2506636	ArgumentList	name		2506564	1					
ANR	2506637	Argument	name		2506564	0					
ANR	2506638	Identifier	name		2506564	0					
ANR	2506639	Identifier	NULL		2506564	1					
ANR	2506640	CompoundStatement		23:2:609:630	2506564	1					
ANR	2506641	IfStatement	if ( tree == NULL )		2506564	0					
ANR	2506642	Condition	tree == NULL	556:6:12835:12846	2506564	0	True				
ANR	2506643	EqualityExpression	tree == NULL		2506564	0		==			
ANR	2506644	Identifier	tree		2506564	0					
ANR	2506645	Identifier	NULL		2506564	1					
ANR	2506646	CompoundStatement		19:20:555:555	2506564	1					
ANR	2506647	ExpressionStatement	tree = chained_parent_ad -> Lookup ( name )	557:3:12854:12892	2506564	0	True				
ANR	2506648	AssignmentExpression	tree = chained_parent_ad -> Lookup ( name )		2506564	0		=			
ANR	2506649	Identifier	tree		2506564	0					
ANR	2506650	CallExpression	chained_parent_ad -> Lookup ( name )		2506564	1					
ANR	2506651	Callee	chained_parent_ad -> Lookup		2506564	0					
ANR	2506652	PtrMemberAccess	chained_parent_ad -> Lookup		2506564	0					
ANR	2506653	Identifier	chained_parent_ad		2506564	0					
ANR	2506654	Identifier	Lookup		2506564	1					
ANR	2506655	ArgumentList	name		2506564	1					
ANR	2506656	Argument	name		2506564	0					
ANR	2506657	Identifier	name		2506564	0					
ANR	2506658	IdentifierDeclStatement	Value undefined_value ;	560:2:12903:12924	2506564	1	True				
ANR	2506659	IdentifierDecl	undefined_value		2506564	0					
ANR	2506660	IdentifierDeclType	Value		2506564	0					
ANR	2506661	Identifier	undefined_value		2506564	1					
ANR	2506662	ExpressionStatement	undefined_value . SetUndefinedValue ( )	561:2:12928:12963	2506564	2	True				
ANR	2506663	CallExpression	undefined_value . SetUndefinedValue ( )		2506564	0					
ANR	2506664	Callee	undefined_value . SetUndefinedValue		2506564	0					
ANR	2506665	MemberAccess	undefined_value . SetUndefinedValue		2506564	0					
ANR	2506666	Identifier	undefined_value		2506564	0					
ANR	2506667	Identifier	SetUndefinedValue		2506564	1					
ANR	2506668	ArgumentList			2506564	1					
ANR	2506669	ExpressionStatement	"Insert ( name , Literal :: MakeLiteral ( undefined_value ) )"	562:2:12967:13018	2506564	3	True				
ANR	2506670	CallExpression	"Insert ( name , Literal :: MakeLiteral ( undefined_value ) )"		2506564	0					
ANR	2506671	Callee	Insert		2506564	0					
ANR	2506672	Identifier	Insert		2506564	0					
ANR	2506673	ArgumentList	name		2506564	1					
ANR	2506674	Argument	name		2506564	0					
ANR	2506675	Identifier	name		2506564	0					
ANR	2506676	Argument	Literal :: MakeLiteral ( undefined_value )		2506564	1					
ANR	2506677	CallExpression	Literal :: MakeLiteral ( undefined_value )		2506564	0					
ANR	2506678	Callee	Literal :: MakeLiteral		2506564	0					
ANR	2506679	Identifier	Literal :: MakeLiteral		2506564	0					
ANR	2506680	ArgumentList	undefined_value		2506564	1					
ANR	2506681	Argument	undefined_value		2506564	0					
ANR	2506682	Identifier	undefined_value		2506564	0					
ANR	2506683	ReturnStatement	return tree ;	564:1:13024:13035	2506564	5	True				
ANR	2506684	Identifier	tree		2506564	0					
ANR	2506685	ReturnType	ExprTree *		2506564	1					
ANR	2506686	Identifier	ClassAd :: Remove		2506564	2					
ANR	2506687	ParameterList	const string & name		2506564	3					
ANR	2506688	Parameter	const string & name	537:8:12272:12289	2506564	0	True				
ANR	2506689	ParameterType	const string &		2506564	0					
ANR	2506690	Identifier	name		2506564	1					
ANR	2506691	CFGEntryNode	ENTRY		2506564		True				
ANR	2506692	CFGExitNode	EXIT		2506564		True				
ANR	2506693	Symbol	Literal :: MakeLiteral		2506564						
ANR	2506694	Symbol	NULL		2506564						
ANR	2506695	Symbol	itr		2506564						
ANR	2506696	Symbol	tree		2506564						
ANR	2506697	Symbol	chained_parent_ad -> Lookup		2506564						
ANR	2506698	Symbol	undefined_value		2506564						
ANR	2506699	Symbol	attrList		2506564						
ANR	2506700	Symbol	* itr		2506564						
ANR	2506701	Symbol	attrList . end		2506564						
ANR	2506702	Symbol	chained_parent_ad		2506564						
ANR	2506703	Symbol	name		2506564						
ANR	2506704	Symbol	attrList . find		2506564						
ANR	2506705	Symbol	* chained_parent_ad		2506564						
ANR	2506706	Symbol	itr -> second		2506564						
ANR	2506707	Function	ClassAd :: DeepRemove	567:0:13040:13228							
ANR	2506708	FunctionDef	"ClassAd :: DeepRemove (ExprTree * scopeExpr , const string & name)"		2506707	0					
ANR	2506709	CompoundStatement		569:0:13114:13228	2506707	0					
ANR	2506710	IdentifierDeclStatement	ClassAd * ad = _GetDeepScope ( scopeExpr ) ;	570:1:13117:13157	2506707	0	True				
ANR	2506711	IdentifierDecl	* ad = _GetDeepScope ( scopeExpr )		2506707	0					
ANR	2506712	IdentifierDeclType	ClassAd *		2506707	0					
ANR	2506713	Identifier	ad		2506707	1					
ANR	2506714	AssignmentExpression	* ad = _GetDeepScope ( scopeExpr )		2506707	2		=			
ANR	2506715	Identifier	ad		2506707	0					
ANR	2506716	CallExpression	_GetDeepScope ( scopeExpr )		2506707	1					
ANR	2506717	Callee	_GetDeepScope		2506707	0					
ANR	2506718	Identifier	_GetDeepScope		2506707	0					
ANR	2506719	ArgumentList	scopeExpr		2506707	1					
ANR	2506720	Argument	scopeExpr		2506707	0					
ANR	2506721	Identifier	scopeExpr		2506707	0					
ANR	2506722	IfStatement	if ( ! ad )		2506707	1					
ANR	2506723	Condition	! ad	571:5:13164:13166	2506707	0	True				
ANR	2506724	UnaryOperationExpression	! ad		2506707	0					
ANR	2506725	UnaryOperator	!		2506707	0					
ANR	2506726	Identifier	ad		2506707	1					
ANR	2506727	ReturnStatement	return ( ( ExprTree * ) NULL ) ;	571:11:13170:13195	2506707	1	True				
ANR	2506728	CastExpression	( ExprTree * ) NULL		2506707	0					
ANR	2506729	CastTarget	ExprTree *		2506707	0					
ANR	2506730	Identifier	NULL		2506707	1					
ANR	2506731	ReturnStatement	return ( ad -> Remove ( name ) ) ;	572:1:13198:13226	2506707	2	True				
ANR	2506732	CallExpression	ad -> Remove ( name )		2506707	0					
ANR	2506733	Callee	ad -> Remove		2506707	0					
ANR	2506734	PtrMemberAccess	ad -> Remove		2506707	0					
ANR	2506735	Identifier	ad		2506707	0					
ANR	2506736	Identifier	Remove		2506707	1					
ANR	2506737	ArgumentList	name		2506707	1					
ANR	2506738	Argument	name		2506707	0					
ANR	2506739	Identifier	name		2506707	0					
ANR	2506740	ReturnType	ExprTree *		2506707	1					
ANR	2506741	Identifier	ClassAd :: DeepRemove		2506707	2					
ANR	2506742	ParameterList	"ExprTree * scopeExpr , const string & name"		2506707	3					
ANR	2506743	Parameter	ExprTree * scopeExpr	568:12:13072:13090	2506707	0	True				
ANR	2506744	ParameterType	ExprTree *		2506707	0					
ANR	2506745	Identifier	scopeExpr		2506707	1					
ANR	2506746	Parameter	const string & name	568:33:13093:13110	2506707	1	True				
ANR	2506747	ParameterType	const string &		2506707	0					
ANR	2506748	Identifier	name		2506707	1					
ANR	2506749	CFGEntryNode	ENTRY		2506707		True				
ANR	2506750	CFGExitNode	EXIT		2506707		True				
ANR	2506751	Symbol	ad		2506707						
ANR	2506752	Symbol	NULL		2506707						
ANR	2506753	Symbol	name		2506707						
ANR	2506754	Symbol	* ad		2506707						
ANR	2506755	Symbol	scopeExpr		2506707						
ANR	2506756	Symbol	ad -> Remove		2506707						
ANR	2506757	Symbol	_GetDeepScope		2506707						
ANR	2506758	Function	ClassAd :: Update	585:0:13443:13676							
ANR	2506759	FunctionDef	ClassAd :: Update (const ClassAd & ad)		2506758	0					
ANR	2506760	CompoundStatement		587:0:13486:13676	2506758	0					
ANR	2506761	IdentifierDeclStatement	AttrList :: const_iterator itr ;	588:1:13489:13517	2506758	0	True				
ANR	2506762	IdentifierDecl	itr		2506758	0					
ANR	2506763	IdentifierDeclType	AttrList :: const_iterator		2506758	0					
ANR	2506764	Identifier	itr		2506758	1					
ANR	2506765	ForStatement	for ( itr = ad . attrList . begin ( ) ; itr != ad . attrList . end ( ) ; itr ++ )		2506758	1					
ANR	2506766	ForInit	itr = ad . attrList . begin ( ) ;	589:6:13525:13549	2506758	0	True				
ANR	2506767	AssignmentExpression	itr = ad . attrList . begin ( )		2506758	0		=			
ANR	2506768	Identifier	itr		2506758	0					
ANR	2506769	CallExpression	ad . attrList . begin ( )		2506758	1					
ANR	2506770	Callee	ad . attrList . begin		2506758	0					
ANR	2506771	MemberAccess	ad . attrList . begin		2506758	0					
ANR	2506772	MemberAccess	ad . attrList		2506758	0					
ANR	2506773	Identifier	ad		2506758	0					
ANR	2506774	Identifier	attrList		2506758	1					
ANR	2506775	Identifier	begin		2506758	1					
ANR	2506776	ArgumentList			2506758	1					
ANR	2506777	Condition	itr != ad . attrList . end ( )	589:32:13551:13573	2506758	1	True				
ANR	2506778	EqualityExpression	itr != ad . attrList . end ( )		2506758	0		!=			
ANR	2506779	Identifier	itr		2506758	0					
ANR	2506780	CallExpression	ad . attrList . end ( )		2506758	1					
ANR	2506781	Callee	ad . attrList . end		2506758	0					
ANR	2506782	MemberAccess	ad . attrList . end		2506758	0					
ANR	2506783	MemberAccess	ad . attrList		2506758	0					
ANR	2506784	Identifier	ad		2506758	0					
ANR	2506785	Identifier	attrList		2506758	1					
ANR	2506786	Identifier	end		2506758	1					
ANR	2506787	ArgumentList			2506758	1					
ANR	2506788	PostIncDecOperationExpression	itr ++	589:57:13576:13580	2506758	2	True				
ANR	2506789	Identifier	itr		2506758	0					
ANR	2506790	IncDec	++		2506758	1					
ANR	2506791	CompoundStatement		3:65:97:97	2506758	3					
ANR	2506792	IfStatement	"if ( ! Insert ( itr -> first , itr -> second -> Copy ( ) ) )"		2506758	0					
ANR	2506793	Condition	"! Insert ( itr -> first , itr -> second -> Copy ( ) )"	590:5:13591:13633	2506758	0	True				
ANR	2506794	UnaryOperationExpression	"! Insert ( itr -> first , itr -> second -> Copy ( ) )"		2506758	0					
ANR	2506795	UnaryOperator	!		2506758	0					
ANR	2506796	CallExpression	"Insert ( itr -> first , itr -> second -> Copy ( ) )"		2506758	1					
ANR	2506797	Callee	Insert		2506758	0					
ANR	2506798	Identifier	Insert		2506758	0					
ANR	2506799	ArgumentList	itr -> first		2506758	1					
ANR	2506800	Argument	itr -> first		2506758	0					
ANR	2506801	PtrMemberAccess	itr -> first		2506758	0					
ANR	2506802	Identifier	itr		2506758	0					
ANR	2506803	Identifier	first		2506758	1					
ANR	2506804	Argument	itr -> second -> Copy ( )		2506758	1					
ANR	2506805	CallExpression	itr -> second -> Copy ( )		2506758	0					
ANR	2506806	Callee	itr -> second -> Copy		2506758	0					
ANR	2506807	PtrMemberAccess	itr -> second -> Copy		2506758	0					
ANR	2506808	PtrMemberAccess	itr -> second		2506758	0					
ANR	2506809	Identifier	itr		2506758	0					
ANR	2506810	Identifier	second		2506758	1					
ANR	2506811	Identifier	Copy		2506758	1					
ANR	2506812	ArgumentList			2506758	1					
ANR	2506813	CompoundStatement		4:50:149:149	2506758	1					
ANR	2506814	ReturnStatement	return false ;	591:3:13641:13653	2506758	0	True				
ANR	2506815	Identifier	false		2506758	0					
ANR	2506816	ReturnStatement	return true ;	594:1:13663:13674	2506758	2	True				
ANR	2506817	Identifier	true		2506758	0					
ANR	2506818	ReturnType	bool		2506758	1					
ANR	2506819	Identifier	ClassAd :: Update		2506758	2					
ANR	2506820	ParameterList	const ClassAd & ad		2506758	3					
ANR	2506821	Parameter	const ClassAd & ad	586:8:13466:13482	2506758	0	True				
ANR	2506822	ParameterType	const ClassAd &		2506758	0					
ANR	2506823	Identifier	ad		2506758	1					
ANR	2506824	CFGEntryNode	ENTRY		2506758		True				
ANR	2506825	CFGExitNode	EXIT		2506758		True				
ANR	2506826	Symbol	ad		2506758						
ANR	2506827	Symbol	itr		2506758						
ANR	2506828	Symbol	ad . attrList . begin		2506758						
ANR	2506829	Symbol	false		2506758						
ANR	2506830	Symbol	Insert		2506758						
ANR	2506831	Symbol	* itr		2506758						
ANR	2506832	Symbol	ad . attrList . end		2506758						
ANR	2506833	Symbol	true		2506758						
ANR	2506834	Symbol	* itr -> second		2506758						
ANR	2506835	Symbol	* * itr		2506758						
ANR	2506836	Symbol	itr -> first		2506758						
ANR	2506837	Symbol	ad . attrList		2506758						
ANR	2506838	Symbol	itr -> second -> Copy		2506758						
ANR	2506839	Symbol	itr -> second		2506758						
ANR	2506840	Function	ClassAd :: Modify	597:0:13679:15604							
ANR	2506841	FunctionDef	ClassAd :: Modify (ClassAd & mod)		2506840	0					
ANR	2506842	CompoundStatement		599:0:13717:15604	2506840	0					
ANR	2506843	IdentifierDeclStatement	ClassAd * ctx ;	600:1:13720:13734	2506840	0	True				
ANR	2506844	IdentifierDecl	* ctx		2506840	0					
ANR	2506845	IdentifierDeclType	ClassAd *		2506840	0					
ANR	2506846	Identifier	ctx		2506840	1					
ANR	2506847	IdentifierDeclStatement	const ExprTree * expr ;	601:1:13737:13757	2506840	1	True				
ANR	2506848	IdentifierDecl	* expr		2506840	0					
ANR	2506849	IdentifierDeclType	const ExprTree *		2506840	0					
ANR	2506850	Identifier	expr		2506840	1					
ANR	2506851	IdentifierDeclStatement	Value val ;	602:1:13760:13771	2506840	2	True				
ANR	2506852	IdentifierDecl	val		2506840	0					
ANR	2506853	IdentifierDeclType	Value		2506840	0					
ANR	2506854	Identifier	val		2506840	1					
ANR	2506855	IfStatement	if ( ( expr = mod . Lookup ( ATTR_CONTEXT ) ) != NULL )		2506840	3					
ANR	2506856	Condition	( expr = mod . Lookup ( ATTR_CONTEXT ) ) != NULL	605:5:13811:13855	2506840	0	True				
ANR	2506857	EqualityExpression	( expr = mod . Lookup ( ATTR_CONTEXT ) ) != NULL		2506840	0		!=			
ANR	2506858	AssignmentExpression	expr = mod . Lookup ( ATTR_CONTEXT )		2506840	0		=			
ANR	2506859	Identifier	expr		2506840	0					
ANR	2506860	CallExpression	mod . Lookup ( ATTR_CONTEXT )		2506840	1					
ANR	2506861	Callee	mod . Lookup		2506840	0					
ANR	2506862	MemberAccess	mod . Lookup		2506840	0					
ANR	2506863	Identifier	mod		2506840	0					
ANR	2506864	Identifier	Lookup		2506840	1					
ANR	2506865	ArgumentList	ATTR_CONTEXT		2506840	1					
ANR	2506866	Argument	ATTR_CONTEXT		2506840	0					
ANR	2506867	Identifier	ATTR_CONTEXT		2506840	0					
ANR	2506868	Identifier	NULL		2506840	1					
ANR	2506869	CompoundStatement		7:53:141:141	2506840	1					
ANR	2506870	IfStatement	if ( ( ctx = _GetDeepScope ( ( ExprTree * ) expr ) ) == NULL )		2506840	0					
ANR	2506871	Condition	( ctx = _GetDeepScope ( ( ExprTree * ) expr ) ) == NULL	606:6:13867:13917	2506840	0	True				
ANR	2506872	EqualityExpression	( ctx = _GetDeepScope ( ( ExprTree * ) expr ) ) == NULL		2506840	0		==			
ANR	2506873	AssignmentExpression	ctx = _GetDeepScope ( ( ExprTree * ) expr )		2506840	0		=			
ANR	2506874	Identifier	ctx		2506840	0					
ANR	2506875	CallExpression	_GetDeepScope ( ( ExprTree * ) expr )		2506840	1					
ANR	2506876	Callee	_GetDeepScope		2506840	0					
ANR	2506877	Identifier	_GetDeepScope		2506840	0					
ANR	2506878	ArgumentList	( ExprTree * ) expr		2506840	1					
ANR	2506879	Argument	( ExprTree * ) expr		2506840	0					
ANR	2506880	CastExpression	( ExprTree * ) expr		2506840	0					
ANR	2506881	CastTarget	ExprTree *		2506840	0					
ANR	2506882	Identifier	expr		2506840	1					
ANR	2506883	Identifier	NULL		2506840	1					
ANR	2506884	CompoundStatement		8:60:203:203	2506840	1					
ANR	2506885	ReturnStatement	return ;	607:3:13926:13932	2506840	0	True				
ANR	2506886	ElseStatement	else		2506840	0					
ANR	2506887	CompoundStatement		11:8:228:228	2506840	0					
ANR	2506888	ExpressionStatement	ctx = this	610:2:13950:13960	2506840	0	True				
ANR	2506889	AssignmentExpression	ctx = this		2506840	0		=			
ANR	2506890	Identifier	ctx		2506840	0					
ANR	2506891	Identifier	this		2506840	1					
ANR	2506892	IfStatement	if ( ( expr = mod . Lookup ( ATTR_REPLACE ) ) != NULL )		2506840	4					
ANR	2506893	Condition	( expr = mod . Lookup ( ATTR_REPLACE ) ) != NULL	614:5:14011:14055	2506840	0	True				
ANR	2506894	EqualityExpression	( expr = mod . Lookup ( ATTR_REPLACE ) ) != NULL		2506840	0		!=			
ANR	2506895	AssignmentExpression	expr = mod . Lookup ( ATTR_REPLACE )		2506840	0		=			
ANR	2506896	Identifier	expr		2506840	0					
ANR	2506897	CallExpression	mod . Lookup ( ATTR_REPLACE )		2506840	1					
ANR	2506898	Callee	mod . Lookup		2506840	0					
ANR	2506899	MemberAccess	mod . Lookup		2506840	0					
ANR	2506900	Identifier	mod		2506840	0					
ANR	2506901	Identifier	Lookup		2506840	1					
ANR	2506902	ArgumentList	ATTR_REPLACE		2506840	1					
ANR	2506903	Argument	ATTR_REPLACE		2506840	0					
ANR	2506904	Identifier	ATTR_REPLACE		2506840	0					
ANR	2506905	Identifier	NULL		2506840	1					
ANR	2506906	CompoundStatement		17:2:345:356	2506840	1					
ANR	2506907	IdentifierDeclStatement	ClassAd * ad ;	615:2:14063:14074	2506840	0	True				
ANR	2506908	IdentifierDecl	* ad		2506840	0					
ANR	2506909	IdentifierDeclType	ClassAd *		2506840	0					
ANR	2506910	Identifier	ad		2506840	1					
ANR	2506911	IfStatement	if ( expr -> Evaluate ( val ) && val . IsClassAdValue ( ad ) )		2506840	1					
ANR	2506912	Condition	expr -> Evaluate ( val ) && val . IsClassAdValue ( ad )	616:6:14082:14130	2506840	0	True				
ANR	2506913	AndExpression	expr -> Evaluate ( val ) && val . IsClassAdValue ( ad )		2506840	0		&&			
ANR	2506914	CallExpression	expr -> Evaluate ( val )		2506840	0					
ANR	2506915	Callee	expr -> Evaluate		2506840	0					
ANR	2506916	PtrMemberAccess	expr -> Evaluate		2506840	0					
ANR	2506917	Identifier	expr		2506840	0					
ANR	2506918	Identifier	Evaluate		2506840	1					
ANR	2506919	ArgumentList	val		2506840	1					
ANR	2506920	Argument	val		2506840	0					
ANR	2506921	Identifier	val		2506840	0					
ANR	2506922	CallExpression	val . IsClassAdValue ( ad )		2506840	1					
ANR	2506923	Callee	val . IsClassAdValue		2506840	0					
ANR	2506924	MemberAccess	val . IsClassAdValue		2506840	0					
ANR	2506925	Identifier	val		2506840	0					
ANR	2506926	Identifier	IsClassAdValue		2506840	1					
ANR	2506927	ArgumentList	ad		2506840	1					
ANR	2506928	Argument	ad		2506840	0					
ANR	2506929	Identifier	ad		2506840	0					
ANR	2506930	CompoundStatement		18:58:416:416	2506840	1					
ANR	2506931	ExpressionStatement	ctx -> Clear ( )	617:3:14139:14152	2506840	0	True				
ANR	2506932	CallExpression	ctx -> Clear ( )		2506840	0					
ANR	2506933	Callee	ctx -> Clear		2506840	0					
ANR	2506934	PtrMemberAccess	ctx -> Clear		2506840	0					
ANR	2506935	Identifier	ctx		2506840	0					
ANR	2506936	Identifier	Clear		2506840	1					
ANR	2506937	ArgumentList			2506840	1					
ANR	2506938	ExpressionStatement	ctx -> Update ( * ad )	618:3:14157:14175	2506840	1	True				
ANR	2506939	CallExpression	ctx -> Update ( * ad )		2506840	0					
ANR	2506940	Callee	ctx -> Update		2506840	0					
ANR	2506941	PtrMemberAccess	ctx -> Update		2506840	0					
ANR	2506942	Identifier	ctx		2506840	0					
ANR	2506943	Identifier	Update		2506840	1					
ANR	2506944	ArgumentList	* ad		2506840	1					
ANR	2506945	Argument	* ad		2506840	0					
ANR	2506946	UnaryOperationExpression	* ad		2506840	0					
ANR	2506947	UnaryOperator	*		2506840	0					
ANR	2506948	Identifier	ad		2506840	1					
ANR	2506949	IfStatement	if ( ( expr = mod . Lookup ( ATTR_UPDATES ) ) != NULL )		2506840	5					
ANR	2506950	Condition	( expr = mod . Lookup ( ATTR_UPDATES ) ) != NULL	623:5:14230:14274	2506840	0	True				
ANR	2506951	EqualityExpression	( expr = mod . Lookup ( ATTR_UPDATES ) ) != NULL		2506840	0		!=			
ANR	2506952	AssignmentExpression	expr = mod . Lookup ( ATTR_UPDATES )		2506840	0		=			
ANR	2506953	Identifier	expr		2506840	0					
ANR	2506954	CallExpression	mod . Lookup ( ATTR_UPDATES )		2506840	1					
ANR	2506955	Callee	mod . Lookup		2506840	0					
ANR	2506956	MemberAccess	mod . Lookup		2506840	0					
ANR	2506957	Identifier	mod		2506840	0					
ANR	2506958	Identifier	Lookup		2506840	1					
ANR	2506959	ArgumentList	ATTR_UPDATES		2506840	1					
ANR	2506960	Argument	ATTR_UPDATES		2506840	0					
ANR	2506961	Identifier	ATTR_UPDATES		2506840	0					
ANR	2506962	Identifier	NULL		2506840	1					
ANR	2506963	CompoundStatement		26:2:564:575	2506840	1					
ANR	2506964	IdentifierDeclStatement	ClassAd * ad ;	624:2:14282:14293	2506840	0	True				
ANR	2506965	IdentifierDecl	* ad		2506840	0					
ANR	2506966	IdentifierDeclType	ClassAd *		2506840	0					
ANR	2506967	Identifier	ad		2506840	1					
ANR	2506968	IfStatement	if ( expr -> Evaluate ( val ) && val . IsClassAdValue ( ad ) )		2506840	1					
ANR	2506969	Condition	expr -> Evaluate ( val ) && val . IsClassAdValue ( ad )	625:6:14301:14349	2506840	0	True				
ANR	2506970	AndExpression	expr -> Evaluate ( val ) && val . IsClassAdValue ( ad )		2506840	0		&&			
ANR	2506971	CallExpression	expr -> Evaluate ( val )		2506840	0					
ANR	2506972	Callee	expr -> Evaluate		2506840	0					
ANR	2506973	PtrMemberAccess	expr -> Evaluate		2506840	0					
ANR	2506974	Identifier	expr		2506840	0					
ANR	2506975	Identifier	Evaluate		2506840	1					
ANR	2506976	ArgumentList	val		2506840	1					
ANR	2506977	Argument	val		2506840	0					
ANR	2506978	Identifier	val		2506840	0					
ANR	2506979	CallExpression	val . IsClassAdValue ( ad )		2506840	1					
ANR	2506980	Callee	val . IsClassAdValue		2506840	0					
ANR	2506981	MemberAccess	val . IsClassAdValue		2506840	0					
ANR	2506982	Identifier	val		2506840	0					
ANR	2506983	Identifier	IsClassAdValue		2506840	1					
ANR	2506984	ArgumentList	ad		2506840	1					
ANR	2506985	Argument	ad		2506840	0					
ANR	2506986	Identifier	ad		2506840	0					
ANR	2506987	CompoundStatement		27:58:635:635	2506840	1					
ANR	2506988	ExpressionStatement	ctx -> Update ( * ad )	626:3:14358:14376	2506840	0	True				
ANR	2506989	CallExpression	ctx -> Update ( * ad )		2506840	0					
ANR	2506990	Callee	ctx -> Update		2506840	0					
ANR	2506991	PtrMemberAccess	ctx -> Update		2506840	0					
ANR	2506992	Identifier	ctx		2506840	0					
ANR	2506993	Identifier	Update		2506840	1					
ANR	2506994	ArgumentList	* ad		2506840	1					
ANR	2506995	Argument	* ad		2506840	0					
ANR	2506996	UnaryOperationExpression	* ad		2506840	0					
ANR	2506997	UnaryOperator	*		2506840	0					
ANR	2506998	Identifier	ad		2506840	1					
ANR	2506999	IfStatement	if ( ( expr = mod . Lookup ( ATTR_DELETES ) ) != NULL )		2506840	6					
ANR	2507000	Condition	( expr = mod . Lookup ( ATTR_DELETES ) ) != NULL	631:5:14431:14475	2506840	0	True				
ANR	2507001	EqualityExpression	( expr = mod . Lookup ( ATTR_DELETES ) ) != NULL		2506840	0		!=			
ANR	2507002	AssignmentExpression	expr = mod . Lookup ( ATTR_DELETES )		2506840	0		=			
ANR	2507003	Identifier	expr		2506840	0					
ANR	2507004	CallExpression	mod . Lookup ( ATTR_DELETES )		2506840	1					
ANR	2507005	Callee	mod . Lookup		2506840	0					
ANR	2507006	MemberAccess	mod . Lookup		2506840	0					
ANR	2507007	Identifier	mod		2506840	0					
ANR	2507008	Identifier	Lookup		2506840	1					
ANR	2507009	ArgumentList	ATTR_DELETES		2506840	1					
ANR	2507010	Argument	ATTR_DELETES		2506840	0					
ANR	2507011	Identifier	ATTR_DELETES		2506840	0					
ANR	2507012	Identifier	NULL		2506840	1					
ANR	2507013	CompoundStatement		36:2:816:838	2506840	1					
ANR	2507014	IdentifierDeclStatement	const ExprList * list ;	632:2:14483:14505	2506840	0	True				
ANR	2507015	IdentifierDecl	* list		2506840	0					
ANR	2507016	IdentifierDeclType	const ExprList *		2506840	0					
ANR	2507017	Identifier	list		2506840	1					
ANR	2507018	IdentifierDeclStatement	ExprListIterator itor ;	633:2:14509:14530	2506840	1	True				
ANR	2507019	IdentifierDecl	itor		2506840	0					
ANR	2507020	IdentifierDeclType	ExprListIterator		2506840	0					
ANR	2507021	Identifier	itor		2506840	1					
ANR	2507022	IdentifierDeclStatement	const char * attrName ;	634:2:14534:14556	2506840	2	True				
ANR	2507023	IdentifierDecl	* attrName		2506840	0					
ANR	2507024	IdentifierDeclType	const char *		2506840	0					
ANR	2507025	Identifier	attrName		2506840	1					
ANR	2507026	IfStatement	if ( ! expr -> Evaluate ( val ) || ! val . IsListValue ( list ) )		2506840	3					
ANR	2507027	Condition	! expr -> Evaluate ( val ) || ! val . IsListValue ( list )	637:6:14631:14680	2506840	0	True				
ANR	2507028	OrExpression	! expr -> Evaluate ( val ) || ! val . IsListValue ( list )		2506840	0		||			
ANR	2507029	UnaryOperationExpression	! expr -> Evaluate ( val )		2506840	0					
ANR	2507030	UnaryOperator	!		2506840	0					
ANR	2507031	CallExpression	expr -> Evaluate ( val )		2506840	1					
ANR	2507032	Callee	expr -> Evaluate		2506840	0					
ANR	2507033	PtrMemberAccess	expr -> Evaluate		2506840	0					
ANR	2507034	Identifier	expr		2506840	0					
ANR	2507035	Identifier	Evaluate		2506840	1					
ANR	2507036	ArgumentList	val		2506840	1					
ANR	2507037	Argument	val		2506840	0					
ANR	2507038	Identifier	val		2506840	0					
ANR	2507039	UnaryOperationExpression	! val . IsListValue ( list )		2506840	1					
ANR	2507040	UnaryOperator	!		2506840	0					
ANR	2507041	CallExpression	val . IsListValue ( list )		2506840	1					
ANR	2507042	Callee	val . IsListValue		2506840	0					
ANR	2507043	MemberAccess	val . IsListValue		2506840	0					
ANR	2507044	Identifier	val		2506840	0					
ANR	2507045	Identifier	IsListValue		2506840	1					
ANR	2507046	ArgumentList	list		2506840	1					
ANR	2507047	Argument	list		2506840	0					
ANR	2507048	Identifier	list		2506840	0					
ANR	2507049	CompoundStatement		39:59:966:966	2506840	1					
ANR	2507050	ReturnStatement	return ;	638:3:14689:14695	2506840	0	True				
ANR	2507051	ExpressionStatement	itor . Initialize ( list )	640:2:14703:14726	2506840	4	True				
ANR	2507052	CallExpression	itor . Initialize ( list )		2506840	0					
ANR	2507053	Callee	itor . Initialize		2506840	0					
ANR	2507054	MemberAccess	itor . Initialize		2506840	0					
ANR	2507055	Identifier	itor		2506840	0					
ANR	2507056	Identifier	Initialize		2506840	1					
ANR	2507057	ArgumentList	list		2506840	1					
ANR	2507058	Argument	list		2506840	0					
ANR	2507059	Identifier	list		2506840	0					
ANR	2507060	WhileStatement	while ( ( expr = itor . CurrentExpr ( ) ) )		2506840	5					
ANR	2507061	Condition	expr = itor . CurrentExpr ( )	641:9:14737:14766	2506840	0	True				
ANR	2507062	AssignmentExpression	expr = itor . CurrentExpr ( )		2506840	0		=			
ANR	2507063	Identifier	expr		2506840	0					
ANR	2507064	CallExpression	itor . CurrentExpr ( )		2506840	1					
ANR	2507065	Callee	itor . CurrentExpr		2506840	0					
ANR	2507066	MemberAccess	itor . CurrentExpr		2506840	0					
ANR	2507067	Identifier	itor		2506840	0					
ANR	2507068	Identifier	CurrentExpr		2506840	1					
ANR	2507069	ArgumentList			2506840	1					
ANR	2507070	CompoundStatement		43:42:1052:1052	2506840	1					
ANR	2507071	IfStatement	if ( ! expr -> Evaluate ( val ) || ! val . IsStringValue ( attrName ) )		2506840	0					
ANR	2507072	Condition	! expr -> Evaluate ( val ) || ! val . IsStringValue ( attrName )	642:7:14779:14834	2506840	0	True				
ANR	2507073	OrExpression	! expr -> Evaluate ( val ) || ! val . IsStringValue ( attrName )		2506840	0		||			
ANR	2507074	UnaryOperationExpression	! expr -> Evaluate ( val )		2506840	0					
ANR	2507075	UnaryOperator	!		2506840	0					
ANR	2507076	CallExpression	expr -> Evaluate ( val )		2506840	1					
ANR	2507077	Callee	expr -> Evaluate		2506840	0					
ANR	2507078	PtrMemberAccess	expr -> Evaluate		2506840	0					
ANR	2507079	Identifier	expr		2506840	0					
ANR	2507080	Identifier	Evaluate		2506840	1					
ANR	2507081	ArgumentList	val		2506840	1					
ANR	2507082	Argument	val		2506840	0					
ANR	2507083	Identifier	val		2506840	0					
ANR	2507084	UnaryOperationExpression	! val . IsStringValue ( attrName )		2506840	1					
ANR	2507085	UnaryOperator	!		2506840	0					
ANR	2507086	CallExpression	val . IsStringValue ( attrName )		2506840	1					
ANR	2507087	Callee	val . IsStringValue		2506840	0					
ANR	2507088	MemberAccess	val . IsStringValue		2506840	0					
ANR	2507089	Identifier	val		2506840	0					
ANR	2507090	Identifier	IsStringValue		2506840	1					
ANR	2507091	ArgumentList	attrName		2506840	1					
ANR	2507092	Argument	attrName		2506840	0					
ANR	2507093	Identifier	attrName		2506840	0					
ANR	2507094	CompoundStatement		44:66:1120:1120	2506840	1					
ANR	2507095	ReturnStatement	return ;	643:4:14844:14850	2506840	0	True				
ANR	2507096	ExpressionStatement	itor . NextExpr ( )	645:3:14860:14876	2506840	1	True				
ANR	2507097	CallExpression	itor . NextExpr ( )		2506840	0					
ANR	2507098	Callee	itor . NextExpr		2506840	0					
ANR	2507099	MemberAccess	itor . NextExpr		2506840	0					
ANR	2507100	Identifier	itor		2506840	0					
ANR	2507101	Identifier	NextExpr		2506840	1					
ANR	2507102	ArgumentList			2506840	1					
ANR	2507103	ExpressionStatement	itor . Initialize ( list )	649:2:14946:14969	2506840	6	True				
ANR	2507104	CallExpression	itor . Initialize ( list )		2506840	0					
ANR	2507105	Callee	itor . Initialize		2506840	0					
ANR	2507106	MemberAccess	itor . Initialize		2506840	0					
ANR	2507107	Identifier	itor		2506840	0					
ANR	2507108	Identifier	Initialize		2506840	1					
ANR	2507109	ArgumentList	list		2506840	1					
ANR	2507110	Argument	list		2506840	0					
ANR	2507111	Identifier	list		2506840	0					
ANR	2507112	WhileStatement	while ( ( expr = itor . CurrentExpr ( ) ) )		2506840	7					
ANR	2507113	Condition	expr = itor . CurrentExpr ( )	650:9:14980:15009	2506840	0	True				
ANR	2507114	AssignmentExpression	expr = itor . CurrentExpr ( )		2506840	0		=			
ANR	2507115	Identifier	expr		2506840	0					
ANR	2507116	CallExpression	itor . CurrentExpr ( )		2506840	1					
ANR	2507117	Callee	itor . CurrentExpr		2506840	0					
ANR	2507118	MemberAccess	itor . CurrentExpr		2506840	0					
ANR	2507119	Identifier	itor		2506840	0					
ANR	2507120	Identifier	CurrentExpr		2506840	1					
ANR	2507121	ArgumentList			2506840	1					
ANR	2507122	CompoundStatement		52:42:1295:1295	2506840	1					
ANR	2507123	IfStatement	if ( expr -> Evaluate ( val ) && val . IsStringValue ( attrName ) )		2506840	0					
ANR	2507124	Condition	expr -> Evaluate ( val ) && val . IsStringValue ( attrName )	651:7:15022:15075	2506840	0	True				
ANR	2507125	AndExpression	expr -> Evaluate ( val ) && val . IsStringValue ( attrName )		2506840	0		&&			
ANR	2507126	CallExpression	expr -> Evaluate ( val )		2506840	0					
ANR	2507127	Callee	expr -> Evaluate		2506840	0					
ANR	2507128	PtrMemberAccess	expr -> Evaluate		2506840	0					
ANR	2507129	Identifier	expr		2506840	0					
ANR	2507130	Identifier	Evaluate		2506840	1					
ANR	2507131	ArgumentList	val		2506840	1					
ANR	2507132	Argument	val		2506840	0					
ANR	2507133	Identifier	val		2506840	0					
ANR	2507134	CallExpression	val . IsStringValue ( attrName )		2506840	1					
ANR	2507135	Callee	val . IsStringValue		2506840	0					
ANR	2507136	MemberAccess	val . IsStringValue		2506840	0					
ANR	2507137	Identifier	val		2506840	0					
ANR	2507138	Identifier	IsStringValue		2506840	1					
ANR	2507139	ArgumentList	attrName		2506840	1					
ANR	2507140	Argument	attrName		2506840	0					
ANR	2507141	Identifier	attrName		2506840	0					
ANR	2507142	CompoundStatement		53:64:1361:1361	2506840	1					
ANR	2507143	ExpressionStatement	ctx -> Delete ( attrName )	652:4:15085:15108	2506840	0	True				
ANR	2507144	CallExpression	ctx -> Delete ( attrName )		2506840	0					
ANR	2507145	Callee	ctx -> Delete		2506840	0					
ANR	2507146	PtrMemberAccess	ctx -> Delete		2506840	0					
ANR	2507147	Identifier	ctx		2506840	0					
ANR	2507148	Identifier	Delete		2506840	1					
ANR	2507149	ArgumentList	attrName		2506840	1					
ANR	2507150	Argument	attrName		2506840	0					
ANR	2507151	Identifier	attrName		2506840	0					
ANR	2507152	ExpressionStatement	itor . NextExpr ( )	654:3:15118:15134	2506840	1	True				
ANR	2507153	CallExpression	itor . NextExpr ( )		2506840	0					
ANR	2507154	Callee	itor . NextExpr		2506840	0					
ANR	2507155	MemberAccess	itor . NextExpr		2506840	0					
ANR	2507156	Identifier	itor		2506840	0					
ANR	2507157	Identifier	NextExpr		2506840	1					
ANR	2507158	ArgumentList			2506840	1					
ANR	2507159	ReturnType	void		2506840	1					
ANR	2507160	Identifier	ClassAd :: Modify		2506840	2					
ANR	2507161	ParameterList	ClassAd & mod		2506840	3					
ANR	2507162	Parameter	ClassAd & mod	598:8:13702:13713	2506840	0	True				
ANR	2507163	ParameterType	ClassAd &		2506840	0					
ANR	2507164	Identifier	mod		2506840	1					
ANR	2507165	CFGEntryNode	ENTRY		2506840		True				
ANR	2507166	CFGExitNode	EXIT		2506840		True				
ANR	2507167	Symbol	val		2506840						
ANR	2507168	Symbol	mod		2506840						
ANR	2507169	Symbol	mod . Lookup		2506840						
ANR	2507170	Symbol	NULL		2506840						
ANR	2507171	Symbol	ad		2506840						
ANR	2507172	Symbol	ATTR_REPLACE		2506840						
ANR	2507173	Symbol	val . IsStringValue		2506840						
ANR	2507174	Symbol	ctx		2506840						
ANR	2507175	Symbol	this		2506840						
ANR	2507176	Symbol	* ad		2506840						
ANR	2507177	Symbol	list		2506840						
ANR	2507178	Symbol	_GetDeepScope		2506840						
ANR	2507179	Symbol	ATTR_UPDATES		2506840						
ANR	2507180	Symbol	val . IsClassAdValue		2506840						
ANR	2507181	Symbol	* expr		2506840						
ANR	2507182	Symbol	ATTR_DELETES		2506840						
ANR	2507183	Symbol	expr -> Evaluate		2506840						
ANR	2507184	Symbol	expr		2506840						
ANR	2507185	Symbol	val . IsListValue		2506840						
ANR	2507186	Symbol	ATTR_CONTEXT		2506840						
ANR	2507187	Symbol	attrName		2506840						
ANR	2507188	Symbol	itor		2506840						
ANR	2507189	Symbol	itor . CurrentExpr		2506840						
ANR	2507190	Function	ClassAd :: Copy	682:0:15608:16234							
ANR	2507191	FunctionDef	ClassAd :: Copy ()		2507190	0					
ANR	2507192	CompoundStatement		684:0:15642:16234	2507190	0					
ANR	2507193	IdentifierDeclStatement	ExprTree * tree ;	685:1:15645:15659	2507190	0	True				
ANR	2507194	IdentifierDecl	* tree		2507190	0					
ANR	2507195	IdentifierDeclType	ExprTree *		2507190	0					
ANR	2507196	Identifier	tree		2507190	1					
ANR	2507197	IdentifierDeclStatement	ClassAd * newAd = new ClassAd ( ) ;	686:1:15662:15692	2507190	1	True				
ANR	2507198	IdentifierDecl	* newAd = new ClassAd ( )		2507190	0					
ANR	2507199	IdentifierDeclType	ClassAd *		2507190	0					
ANR	2507200	Identifier	newAd		2507190	1					
ANR	2507201	AssignmentExpression	* newAd = new ClassAd ( )		2507190	2		=			
ANR	2507202	Identifier	newAd		2507190	0					
ANR	2507203	UnaryExpression	new ClassAd ( )		2507190	1					
ANR	2507204	IfStatement	if ( ! newAd )		2507190	2					
ANR	2507205	Condition	! newAd	688:5:15700:15705	2507190	0	True				
ANR	2507206	UnaryOperationExpression	! newAd		2507190	0					
ANR	2507207	UnaryOperator	!		2507190	0					
ANR	2507208	Identifier	newAd		2507190	1					
ANR	2507209	ReturnStatement	return NULL ;	688:14:15709:15720	2507190	1	True				
ANR	2507210	Identifier	NULL		2507190	0					
ANR	2507211	ExpressionStatement	newAd -> nodeKind = CLASSAD_NODE	689:1:15723:15753	2507190	3	True				
ANR	2507212	AssignmentExpression	newAd -> nodeKind = CLASSAD_NODE		2507190	0		=			
ANR	2507213	PtrMemberAccess	newAd -> nodeKind		2507190	0					
ANR	2507214	Identifier	newAd		2507190	0					
ANR	2507215	Identifier	nodeKind		2507190	1					
ANR	2507216	Identifier	CLASSAD_NODE		2507190	1					
ANR	2507217	ExpressionStatement	newAd -> parentScope = parentScope	690:1:15756:15788	2507190	4	True				
ANR	2507218	AssignmentExpression	newAd -> parentScope = parentScope		2507190	0		=			
ANR	2507219	PtrMemberAccess	newAd -> parentScope		2507190	0					
ANR	2507220	Identifier	newAd		2507190	0					
ANR	2507221	Identifier	parentScope		2507190	1					
ANR	2507222	Identifier	parentScope		2507190	1					
ANR	2507223	ExpressionStatement	newAd -> chained_parent_ad = chained_parent_ad	691:1:15791:15835	2507190	5	True				
ANR	2507224	AssignmentExpression	newAd -> chained_parent_ad = chained_parent_ad		2507190	0		=			
ANR	2507225	PtrMemberAccess	newAd -> chained_parent_ad		2507190	0					
ANR	2507226	Identifier	newAd		2507190	0					
ANR	2507227	Identifier	chained_parent_ad		2507190	1					
ANR	2507228	Identifier	chained_parent_ad		2507190	1					
ANR	2507229	ExpressionStatement	newAd -> DisableDirtyTracking ( )	693:1:15839:15868	2507190	6	True				
ANR	2507230	CallExpression	newAd -> DisableDirtyTracking ( )		2507190	0					
ANR	2507231	Callee	newAd -> DisableDirtyTracking		2507190	0					
ANR	2507232	PtrMemberAccess	newAd -> DisableDirtyTracking		2507190	0					
ANR	2507233	Identifier	newAd		2507190	0					
ANR	2507234	Identifier	DisableDirtyTracking		2507190	1					
ANR	2507235	ArgumentList			2507190	1					
ANR	2507236	IdentifierDeclStatement	AttrList :: const_iterator itr ;	695:1:15872:15900	2507190	7	True				
ANR	2507237	IdentifierDecl	itr		2507190	0					
ANR	2507238	IdentifierDeclType	AttrList :: const_iterator		2507190	0					
ANR	2507239	Identifier	itr		2507190	1					
ANR	2507240	ForStatement	for ( itr = attrList . begin ( ) ; itr != attrList . end ( ) ; itr ++ )		2507190	8					
ANR	2507241	ForInit	itr = attrList . begin ( ) ;	696:6:15908:15929	2507190	0	True				
ANR	2507242	AssignmentExpression	itr = attrList . begin ( )		2507190	0		=			
ANR	2507243	Identifier	itr		2507190	0					
ANR	2507244	CallExpression	attrList . begin ( )		2507190	1					
ANR	2507245	Callee	attrList . begin		2507190	0					
ANR	2507246	MemberAccess	attrList . begin		2507190	0					
ANR	2507247	Identifier	attrList		2507190	0					
ANR	2507248	Identifier	begin		2507190	1					
ANR	2507249	ArgumentList			2507190	1					
ANR	2507250	Condition	itr != attrList . end ( )	696:29:15931:15952	2507190	1	True				
ANR	2507251	EqualityExpression	itr != attrList . end ( )		2507190	0		!=			
ANR	2507252	Identifier	itr		2507190	0					
ANR	2507253	CallExpression	attrList . end ( )		2507190	1					
ANR	2507254	Callee	attrList . end		2507190	0					
ANR	2507255	MemberAccess	attrList . end		2507190	0					
ANR	2507256	Identifier	attrList		2507190	0					
ANR	2507257	Identifier	end		2507190	1					
ANR	2507258	ArgumentList			2507190	1					
ANR	2507259	PostIncDecOperationExpression	itr ++	696:53:15955:15959	2507190	2	True				
ANR	2507260	Identifier	itr		2507190	0					
ANR	2507261	IncDec	++		2507190	1					
ANR	2507262	CompoundStatement		13:61:320:320	2507190	3					
ANR	2507263	IfStatement	if ( ! ( tree = itr -> second -> Copy ( ) ) )		2507190	0					
ANR	2507264	Condition	! ( tree = itr -> second -> Copy ( ) )	697:6:15971:16002	2507190	0	True				
ANR	2507265	UnaryOperationExpression	! ( tree = itr -> second -> Copy ( ) )		2507190	0					
ANR	2507266	UnaryOperator	!		2507190	0					
ANR	2507267	AssignmentExpression	tree = itr -> second -> Copy ( )		2507190	1		=			
ANR	2507268	Identifier	tree		2507190	0					
ANR	2507269	CallExpression	itr -> second -> Copy ( )		2507190	1					
ANR	2507270	Callee	itr -> second -> Copy		2507190	0					
ANR	2507271	PtrMemberAccess	itr -> second -> Copy		2507190	0					
ANR	2507272	PtrMemberAccess	itr -> second		2507190	0					
ANR	2507273	Identifier	itr		2507190	0					
ANR	2507274	Identifier	second		2507190	1					
ANR	2507275	Identifier	Copy		2507190	1					
ANR	2507276	ArgumentList			2507190	1					
ANR	2507277	CompoundStatement		14:41:363:363	2507190	1					
ANR	2507278	Statement	delete	698:3:16011:16016	2507190	0	True				
ANR	2507279	ExpressionStatement	newAd	698:10:16018:16023	2507190	1	True				
ANR	2507280	Identifier	newAd		2507190	0					
ANR	2507281	ExpressionStatement	CondorErrno = ERR_MEM_ALLOC_FAILED	699:3:16028:16062	2507190	2	True				
ANR	2507282	AssignmentExpression	CondorErrno = ERR_MEM_ALLOC_FAILED		2507190	0		=			
ANR	2507283	Identifier	CondorErrno		2507190	0					
ANR	2507284	Identifier	ERR_MEM_ALLOC_FAILED		2507190	1					
ANR	2507285	ExpressionStatement	"CondorErrMsg = """""	700:3:16067:16084	2507190	3	True				
ANR	2507286	AssignmentExpression	"CondorErrMsg = """""		2507190	0		=			
ANR	2507287	Identifier	CondorErrMsg		2507190	0					
ANR	2507288	PrimaryExpression	""""""		2507190	1					
ANR	2507289	ReturnStatement	return ( NULL ) ;	701:3:16089:16103	2507190	4	True				
ANR	2507290	Identifier	NULL		2507190	0					
ANR	2507291	ExpressionStatement	tree -> SetParentScope ( newAd )	703:2:16111:16138	2507190	1	True				
ANR	2507292	CallExpression	tree -> SetParentScope ( newAd )		2507190	0					
ANR	2507293	Callee	tree -> SetParentScope		2507190	0					
ANR	2507294	PtrMemberAccess	tree -> SetParentScope		2507190	0					
ANR	2507295	Identifier	tree		2507190	0					
ANR	2507296	Identifier	SetParentScope		2507190	1					
ANR	2507297	ArgumentList	newAd		2507190	1					
ANR	2507298	Argument	newAd		2507190	0					
ANR	2507299	Identifier	newAd		2507190	0					
ANR	2507300	ExpressionStatement	newAd -> attrList [ itr -> first ] = tree	704:2:16149:16183	2507190	2	True				
ANR	2507301	AssignmentExpression	newAd -> attrList [ itr -> first ] = tree		2507190	0		=			
ANR	2507302	ArrayIndexing	newAd -> attrList [ itr -> first ]		2507190	0					
ANR	2507303	PtrMemberAccess	newAd -> attrList		2507190	0					
ANR	2507304	Identifier	newAd		2507190	0					
ANR	2507305	Identifier	attrList		2507190	1					
ANR	2507306	PtrMemberAccess	itr -> first		2507190	1					
ANR	2507307	Identifier	itr		2507190	0					
ANR	2507308	Identifier	first		2507190	1					
ANR	2507309	Identifier	tree		2507190	1					
ANR	2507310	ExpressionStatement	newAd -> EnableDirtyTracking ( )	706:1:16189:16217	2507190	9	True				
ANR	2507311	CallExpression	newAd -> EnableDirtyTracking ( )		2507190	0					
ANR	2507312	Callee	newAd -> EnableDirtyTracking		2507190	0					
ANR	2507313	PtrMemberAccess	newAd -> EnableDirtyTracking		2507190	0					
ANR	2507314	Identifier	newAd		2507190	0					
ANR	2507315	Identifier	EnableDirtyTracking		2507190	1					
ANR	2507316	ArgumentList			2507190	1					
ANR	2507317	ReturnStatement	return newAd ;	707:1:16220:16232	2507190	10	True				
ANR	2507318	Identifier	newAd		2507190	0					
ANR	2507319	ReturnType	ExprTree *		2507190	1					
ANR	2507320	Identifier	ClassAd :: Copy		2507190	2					
ANR	2507321	ParameterList			2507190	3					
ANR	2507322	CFGEntryNode	ENTRY		2507190		True				
ANR	2507323	CFGExitNode	EXIT		2507190		True				
ANR	2507324	Symbol	attrList . begin		2507190						
ANR	2507325	Symbol	newAd -> attrList		2507190						
ANR	2507326	Symbol	* * newAd		2507190						
ANR	2507327	Symbol	* itr -> first		2507190						
ANR	2507328	Symbol	chained_parent_ad		2507190						
ANR	2507329	Symbol	parentScope		2507190						
ANR	2507330	Symbol	newAd -> chained_parent_ad		2507190						
ANR	2507331	Symbol	* itr -> second		2507190						
ANR	2507332	Symbol	itr -> first		2507190						
ANR	2507333	Symbol	newAd		2507190						
ANR	2507334	Symbol	CLASSAD_NODE		2507190						
ANR	2507335	Symbol	itr -> second -> Copy		2507190						
ANR	2507336	Symbol	itr -> second		2507190						
ANR	2507337	Symbol	newAd -> parentScope		2507190						
ANR	2507338	Symbol	NULL		2507190						
ANR	2507339	Symbol	itr		2507190						
ANR	2507340	Symbol	tree		2507190						
ANR	2507341	Symbol	ERR_MEM_ALLOC_FAILED		2507190						
ANR	2507342	Symbol	attrList		2507190						
ANR	2507343	Symbol	* itr		2507190						
ANR	2507344	Symbol	CondorErrno		2507190						
ANR	2507345	Symbol	* newAd		2507190						
ANR	2507346	Symbol	attrList . end		2507190						
ANR	2507347	Symbol	* newAd -> attrList		2507190						
ANR	2507348	Symbol	CondorErrMsg		2507190						
ANR	2507349	Symbol	newAd -> nodeKind		2507190						
ANR	2507350	Symbol	* * itr		2507190						
ANR	2507351	DeclStmt									
ANR	2507352	Decl							ClassAd	ClassAd *	newAd
ANR	2507353	DeclStmt									
ANR	2507354	Decl							Value	Value	eval
ANR	2507355	DeclStmt									
ANR	2507356	Decl							ExprTree	ExprTree *	etree
ANR	2507357	DeclStmt									
ANR	2507358	Decl							const ClassAd	const ClassAd *	oldAd
ANR	2507359	DeclStmt									
ANR	2507360	Decl							AttrList :: const_iterator	AttrList :: const_iterator	itr
ANR	2507361	Function	ClassAd :: _GetDeepScope	772:0:17403:17665							
ANR	2507362	FunctionDef	ClassAd :: _GetDeepScope (ExprTree * tree)		2507361	0					
ANR	2507363	CompoundStatement		774:0:17460:17665	2507361	0					
ANR	2507364	IdentifierDeclStatement	ClassAd * scope ;	775:1:17463:17477	2507361	0	True				
ANR	2507365	IdentifierDecl	* scope		2507361	0					
ANR	2507366	IdentifierDeclType	ClassAd *		2507361	0					
ANR	2507367	Identifier	scope		2507361	1					
ANR	2507368	IdentifierDeclStatement	Value val ;	776:1:17480:17489	2507361	1	True				
ANR	2507369	IdentifierDecl	val		2507361	0					
ANR	2507370	IdentifierDeclType	Value		2507361	0					
ANR	2507371	Identifier	val		2507361	1					
ANR	2507372	IfStatement	if ( ! tree )		2507361	2					
ANR	2507373	Condition	! tree	778:5:17497:17501	2507361	0	True				
ANR	2507374	UnaryOperationExpression	! tree		2507361	0					
ANR	2507375	UnaryOperator	!		2507361	0					
ANR	2507376	Identifier	tree		2507361	1					
ANR	2507377	ReturnStatement	return ( NULL ) ;	778:13:17505:17519	2507361	1	True				
ANR	2507378	Identifier	NULL		2507361	0					
ANR	2507379	ExpressionStatement	tree -> SetParentScope ( this )	779:1:17522:17550	2507361	3	True				
ANR	2507380	CallExpression	tree -> SetParentScope ( this )		2507361	0					
ANR	2507381	Callee	tree -> SetParentScope		2507361	0					
ANR	2507382	PtrMemberAccess	tree -> SetParentScope		2507361	0					
ANR	2507383	Identifier	tree		2507361	0					
ANR	2507384	Identifier	SetParentScope		2507361	1					
ANR	2507385	ArgumentList	this		2507361	1					
ANR	2507386	Argument	this		2507361	0					
ANR	2507387	Identifier	this		2507361	0					
ANR	2507388	IfStatement	if ( ! tree -> Evaluate ( val ) || ! val . IsClassAdValue ( scope ) )		2507361	4					
ANR	2507389	Condition	! tree -> Evaluate ( val ) || ! val . IsClassAdValue ( scope )	780:5:17557:17610	2507361	0	True				
ANR	2507390	OrExpression	! tree -> Evaluate ( val ) || ! val . IsClassAdValue ( scope )		2507361	0		||			
ANR	2507391	UnaryOperationExpression	! tree -> Evaluate ( val )		2507361	0					
ANR	2507392	UnaryOperator	!		2507361	0					
ANR	2507393	CallExpression	tree -> Evaluate ( val )		2507361	1					
ANR	2507394	Callee	tree -> Evaluate		2507361	0					
ANR	2507395	PtrMemberAccess	tree -> Evaluate		2507361	0					
ANR	2507396	Identifier	tree		2507361	0					
ANR	2507397	Identifier	Evaluate		2507361	1					
ANR	2507398	ArgumentList	val		2507361	1					
ANR	2507399	Argument	val		2507361	0					
ANR	2507400	Identifier	val		2507361	0					
ANR	2507401	UnaryOperationExpression	! val . IsClassAdValue ( scope )		2507361	1					
ANR	2507402	UnaryOperator	!		2507361	0					
ANR	2507403	CallExpression	val . IsClassAdValue ( scope )		2507361	1					
ANR	2507404	Callee	val . IsClassAdValue		2507361	0					
ANR	2507405	MemberAccess	val . IsClassAdValue		2507361	0					
ANR	2507406	Identifier	val		2507361	0					
ANR	2507407	Identifier	IsClassAdValue		2507361	1					
ANR	2507408	ArgumentList	scope		2507361	1					
ANR	2507409	Argument	scope		2507361	0					
ANR	2507410	Identifier	scope		2507361	0					
ANR	2507411	CompoundStatement		7:62:153:153	2507361	1					
ANR	2507412	ReturnStatement	return ( NULL ) ;	781:2:17618:17632	2507361	0	True				
ANR	2507413	Identifier	NULL		2507361	0					
ANR	2507414	ReturnStatement	return ( ( ClassAd * ) scope ) ;	783:1:17638:17663	2507361	5	True				
ANR	2507415	CastExpression	( ClassAd * ) scope		2507361	0					
ANR	2507416	CastTarget	ClassAd *		2507361	0					
ANR	2507417	Identifier	scope		2507361	1					
ANR	2507418	ReturnType	ClassAd *		2507361	1					
ANR	2507419	Identifier	ClassAd :: _GetDeepScope		2507361	2					
ANR	2507420	ParameterList	ExprTree * tree		2507361	3					
ANR	2507421	Parameter	ExprTree * tree	773:15:17437:17450	2507361	0	True				
ANR	2507422	ParameterType	ExprTree *		2507361	0					
ANR	2507423	Identifier	tree		2507361	1					
ANR	2507424	CFGEntryNode	ENTRY		2507361		True				
ANR	2507425	CFGExitNode	EXIT		2507361		True				
ANR	2507426	Symbol	val		2507361						
ANR	2507427	Symbol	* tree		2507361						
ANR	2507428	Symbol	NULL		2507361						
ANR	2507429	Symbol	val . IsClassAdValue		2507361						
ANR	2507430	Symbol	scope		2507361						
ANR	2507431	Symbol	tree		2507361						
ANR	2507432	Symbol	this		2507361						
ANR	2507433	Symbol	tree -> Evaluate		2507361						
ANR	2507434	Function	ClassAd :: EvaluateAttr	787:0:17669:18110							
ANR	2507435	FunctionDef	"ClassAd :: EvaluateAttr (const string & attr , Value & val)"		2507434	0					
ANR	2507436	CompoundStatement		789:0:17738:18110	2507434	0					
ANR	2507437	IdentifierDeclStatement	EvalState state ;	790:1:17741:17756	2507434	0	True				
ANR	2507438	IdentifierDecl	state		2507434	0					
ANR	2507439	IdentifierDeclType	EvalState		2507434	0					
ANR	2507440	Identifier	state		2507434	1					
ANR	2507441	IdentifierDeclStatement	ExprTree * tree ;	791:1:17759:17773	2507434	1	True				
ANR	2507442	IdentifierDecl	* tree		2507434	0					
ANR	2507443	IdentifierDeclType	ExprTree *		2507434	0					
ANR	2507444	Identifier	tree		2507434	1					
ANR	2507445	ExpressionStatement	state . SetScopes ( this )	793:1:17777:17800	2507434	2	True				
ANR	2507446	CallExpression	state . SetScopes ( this )		2507434	0					
ANR	2507447	Callee	state . SetScopes		2507434	0					
ANR	2507448	MemberAccess	state . SetScopes		2507434	0					
ANR	2507449	Identifier	state		2507434	0					
ANR	2507450	Identifier	SetScopes		2507434	1					
ANR	2507451	ArgumentList	this		2507434	1					
ANR	2507452	Argument	this		2507434	0					
ANR	2507453	Identifier	this		2507434	0					
ANR	2507454	SwitchStatement	"switch ( LookupInScope ( attr , tree , state ) )"		2507434	3					
ANR	2507455	Condition	"LookupInScope ( attr , tree , state )"	794:9:17811:17844	2507434	0	True				
ANR	2507456	CallExpression	"LookupInScope ( attr , tree , state )"		2507434	0					
ANR	2507457	Callee	LookupInScope		2507434	0					
ANR	2507458	Identifier	LookupInScope		2507434	0					
ANR	2507459	ArgumentList	attr		2507434	1					
ANR	2507460	Argument	attr		2507434	0					
ANR	2507461	Identifier	attr		2507434	0					
ANR	2507462	Argument	tree		2507434	1					
ANR	2507463	Identifier	tree		2507434	0					
ANR	2507464	Argument	state		2507434	2					
ANR	2507465	Identifier	state		2507434	0					
ANR	2507466	CompoundStatement		6:46:109:109	2507434	1					
ANR	2507467	Label	case EVAL_FAIL :	795:2:17853:17867	2507434	0	True				
ANR	2507468	Identifier	EVAL_FAIL		2507434	0					
ANR	2507469	ReturnStatement	return false ;	796:3:17872:17884	2507434	1	True				
ANR	2507470	Identifier	false		2507434	0					
ANR	2507471	Label	case EVAL_OK :	798:2:17889:17901	2507434	2	True				
ANR	2507472	Identifier	EVAL_OK		2507434	0					
ANR	2507473	ReturnStatement	"return ( tree -> Evaluate ( state , val ) ) ;"	799:3:17906:17944	2507434	3	True				
ANR	2507474	CallExpression	"tree -> Evaluate ( state , val )"		2507434	0					
ANR	2507475	Callee	tree -> Evaluate		2507434	0					
ANR	2507476	PtrMemberAccess	tree -> Evaluate		2507434	0					
ANR	2507477	Identifier	tree		2507434	0					
ANR	2507478	Identifier	Evaluate		2507434	1					
ANR	2507479	ArgumentList	state		2507434	1					
ANR	2507480	Argument	state		2507434	0					
ANR	2507481	Identifier	state		2507434	0					
ANR	2507482	Argument	val		2507434	1					
ANR	2507483	Identifier	val		2507434	0					
ANR	2507484	Label	case EVAL_UNDEF :	801:2:17949:17964	2507434	4	True				
ANR	2507485	Identifier	EVAL_UNDEF		2507434	0					
ANR	2507486	ExpressionStatement	val . SetUndefinedValue ( )	802:3:17969:17993	2507434	5	True				
ANR	2507487	CallExpression	val . SetUndefinedValue ( )		2507434	0					
ANR	2507488	Callee	val . SetUndefinedValue		2507434	0					
ANR	2507489	MemberAccess	val . SetUndefinedValue		2507434	0					
ANR	2507490	Identifier	val		2507434	0					
ANR	2507491	Identifier	SetUndefinedValue		2507434	1					
ANR	2507492	ArgumentList			2507434	1					
ANR	2507493	ReturnStatement	return ( true ) ;	803:3:17998:18012	2507434	6	True				
ANR	2507494	Identifier	true		2507434	0					
ANR	2507495	Label	case EVAL_ERROR :	805:2:18017:18032	2507434	7	True				
ANR	2507496	Identifier	EVAL_ERROR		2507434	0					
ANR	2507497	ExpressionStatement	val . SetErrorValue ( )	806:3:18037:18057	2507434	8	True				
ANR	2507498	CallExpression	val . SetErrorValue ( )		2507434	0					
ANR	2507499	Callee	val . SetErrorValue		2507434	0					
ANR	2507500	MemberAccess	val . SetErrorValue		2507434	0					
ANR	2507501	Identifier	val		2507434	0					
ANR	2507502	Identifier	SetErrorValue		2507434	1					
ANR	2507503	ArgumentList			2507434	1					
ANR	2507504	ReturnStatement	return ( true ) ;	807:3:18062:18076	2507434	9	True				
ANR	2507505	Identifier	true		2507434	0					
ANR	2507506	Label	default :	809:2:18081:18088	2507434	10	True				
ANR	2507507	Identifier	default		2507434	0					
ANR	2507508	ReturnStatement	return false ;	810:3:18093:18105	2507434	11	True				
ANR	2507509	Identifier	false		2507434	0					
ANR	2507510	ReturnType	bool		2507434	1					
ANR	2507511	Identifier	ClassAd :: EvaluateAttr		2507434	2					
ANR	2507512	ParameterList	"const string & attr , Value & val"		2507434	3					
ANR	2507513	Parameter	const string & attr	788:14:17698:17715	2507434	0	True				
ANR	2507514	ParameterType	const string &		2507434	0					
ANR	2507515	Identifier	attr		2507434	1					
ANR	2507516	Parameter	Value & val	788:35:17719:17728	2507434	1	True				
ANR	2507517	ParameterType	Value &		2507434	0					
ANR	2507518	Identifier	val		2507434	1					
ANR	2507519	CFGEntryNode	ENTRY		2507434		True				
ANR	2507520	CFGExitNode	EXIT		2507434		True				
ANR	2507521	Symbol	val		2507434						
ANR	2507522	Symbol	* tree		2507434						
ANR	2507523	Symbol	tree		2507434						
ANR	2507524	Symbol	this		2507434						
ANR	2507525	Symbol	false		2507434						
ANR	2507526	Symbol	tree -> Evaluate		2507434						
ANR	2507527	Symbol	true		2507434						
ANR	2507528	Symbol	LookupInScope		2507434						
ANR	2507529	Symbol	state		2507434						
ANR	2507530	Symbol	attr		2507434						
ANR	2507531	Function	ClassAd :: EvaluateExpr	814:0:18113:18504							
ANR	2507532	FunctionDef	"ClassAd :: EvaluateExpr (const string & buf , Value & result)"		2507531	0					
ANR	2507533	CompoundStatement		816:0:18183:18504	2507531	0					
ANR	2507534	IdentifierDeclStatement	bool successfully_evaluated ;	817:1:18186:18223	2507531	0	True				
ANR	2507535	IdentifierDecl	successfully_evaluated		2507531	0					
ANR	2507536	IdentifierDeclType	bool		2507531	0					
ANR	2507537	Identifier	successfully_evaluated		2507531	1					
ANR	2507538	IdentifierDeclStatement	ExprTree * tree ;	818:1:18226:18246	2507531	1	True				
ANR	2507539	IdentifierDecl	* tree		2507531	0					
ANR	2507540	IdentifierDeclType	ExprTree *		2507531	0					
ANR	2507541	Identifier	tree		2507531	1					
ANR	2507542	IdentifierDeclStatement	ClassAdParser parser ;	819:1:18249:18270	2507531	2	True				
ANR	2507543	IdentifierDecl	parser		2507531	0					
ANR	2507544	IdentifierDeclType	ClassAdParser		2507531	0					
ANR	2507545	Identifier	parser		2507531	1					
ANR	2507546	ExpressionStatement	tree = NULL	821:1:18274:18285	2507531	3	True				
ANR	2507547	AssignmentExpression	tree = NULL		2507531	0		=			
ANR	2507548	Identifier	tree		2507531	0					
ANR	2507549	Identifier	NULL		2507531	1					
ANR	2507550	IfStatement	"if ( parser . ParseExpression ( buf , tree ) )"		2507531	4					
ANR	2507551	Condition	"parser . ParseExpression ( buf , tree )"	822:5:18292:18324	2507531	0	True				
ANR	2507552	CallExpression	"parser . ParseExpression ( buf , tree )"		2507531	0					
ANR	2507553	Callee	parser . ParseExpression		2507531	0					
ANR	2507554	MemberAccess	parser . ParseExpression		2507531	0					
ANR	2507555	Identifier	parser		2507531	0					
ANR	2507556	Identifier	ParseExpression		2507531	1					
ANR	2507557	ArgumentList	buf		2507531	1					
ANR	2507558	Argument	buf		2507531	0					
ANR	2507559	Identifier	buf		2507531	0					
ANR	2507560	Argument	tree		2507531	1					
ANR	2507561	Identifier	tree		2507531	0					
ANR	2507562	CompoundStatement		7:40:143:143	2507531	1					
ANR	2507563	ExpressionStatement	"successfully_evaluated = EvaluateExpr ( tree , result )"	823:2:18331:18382	2507531	0	True				
ANR	2507564	AssignmentExpression	"successfully_evaluated = EvaluateExpr ( tree , result )"		2507531	0		=			
ANR	2507565	Identifier	successfully_evaluated		2507531	0					
ANR	2507566	CallExpression	"EvaluateExpr ( tree , result )"		2507531	1					
ANR	2507567	Callee	EvaluateExpr		2507531	0					
ANR	2507568	Identifier	EvaluateExpr		2507531	0					
ANR	2507569	ArgumentList	tree		2507531	1					
ANR	2507570	Argument	tree		2507531	0					
ANR	2507571	Identifier	tree		2507531	0					
ANR	2507572	Argument	result		2507531	1					
ANR	2507573	Identifier	result		2507531	0					
ANR	2507574	ElseStatement	else		2507531	0					
ANR	2507575	CompoundStatement		9:8:208:208	2507531	0					
ANR	2507576	ExpressionStatement	successfully_evaluated = false	825:2:18396:18426	2507531	0	True				
ANR	2507577	AssignmentExpression	successfully_evaluated = false		2507531	0		=			
ANR	2507578	Identifier	successfully_evaluated		2507531	0					
ANR	2507579	Identifier	false		2507531	1					
ANR	2507580	IfStatement	if ( NULL != tree )		2507531	5					
ANR	2507581	Condition	NULL != tree	828:5:18437:18448	2507531	0	True				
ANR	2507582	EqualityExpression	NULL != tree		2507531	0		!=			
ANR	2507583	Identifier	NULL		2507531	0					
ANR	2507584	Identifier	tree		2507531	1					
ANR	2507585	CompoundStatement		13:19:267:267	2507531	1					
ANR	2507586	Statement	delete	829:2:18455:18460	2507531	0	True				
ANR	2507587	ExpressionStatement	tree	829:9:18462:18466	2507531	1	True				
ANR	2507588	Identifier	tree		2507531	0					
ANR	2507589	ReturnStatement	return successfully_evaluated ;	832:1:18473:18502	2507531	6	True				
ANR	2507590	Identifier	successfully_evaluated		2507531	0					
ANR	2507591	ReturnType	bool		2507531	1					
ANR	2507592	Identifier	ClassAd :: EvaluateExpr		2507531	2					
ANR	2507593	ParameterList	"const string & buf , Value & result"		2507531	3					
ANR	2507594	Parameter	const string & buf	815:14:18142:18158	2507531	0	True				
ANR	2507595	ParameterType	const string &		2507531	0					
ANR	2507596	Identifier	buf		2507531	1					
ANR	2507597	Parameter	Value & result	815:33:18161:18173	2507531	1	True				
ANR	2507598	ParameterType	Value &		2507531	0					
ANR	2507599	Identifier	result		2507531	1					
ANR	2507600	CFGEntryNode	ENTRY		2507531		True				
ANR	2507601	CFGExitNode	EXIT		2507531		True				
ANR	2507602	Symbol	result		2507531						
ANR	2507603	Symbol	buf		2507531						
ANR	2507604	Symbol	NULL		2507531						
ANR	2507605	Symbol	parser		2507531						
ANR	2507606	Symbol	parser . ParseExpression		2507531						
ANR	2507607	Symbol	successfully_evaluated		2507531						
ANR	2507608	Symbol	tree		2507531						
ANR	2507609	Symbol	false		2507531						
ANR	2507610	Symbol	EvaluateExpr		2507531						
ANR	2507611	Function	ClassAd :: EvaluateExpr	836:0:18508:18668							
ANR	2507612	FunctionDef	"ClassAd :: EvaluateExpr (const ExprTree * tree , Value & val)"		2507611	0					
ANR	2507613	CompoundStatement		838:0:18579:18668	2507611	0					
ANR	2507614	IdentifierDeclStatement	EvalState state ;	839:1:18582:18597	2507611	0	True				
ANR	2507615	IdentifierDecl	state		2507611	0					
ANR	2507616	IdentifierDeclType	EvalState		2507611	0					
ANR	2507617	Identifier	state		2507611	1					
ANR	2507618	ExpressionStatement	state . SetScopes ( this )	841:1:18601:18624	2507611	1	True				
ANR	2507619	CallExpression	state . SetScopes ( this )		2507611	0					
ANR	2507620	Callee	state . SetScopes		2507611	0					
ANR	2507621	MemberAccess	state . SetScopes		2507611	0					
ANR	2507622	Identifier	state		2507611	0					
ANR	2507623	Identifier	SetScopes		2507611	1					
ANR	2507624	ArgumentList	this		2507611	1					
ANR	2507625	Argument	this		2507611	0					
ANR	2507626	Identifier	this		2507611	0					
ANR	2507627	ReturnStatement	"return ( tree -> Evaluate ( state , val ) ) ;"	842:1:18627:18666	2507611	2	True				
ANR	2507628	CallExpression	"tree -> Evaluate ( state , val )"		2507611	0					
ANR	2507629	Callee	tree -> Evaluate		2507611	0					
ANR	2507630	PtrMemberAccess	tree -> Evaluate		2507611	0					
ANR	2507631	Identifier	tree		2507611	0					
ANR	2507632	Identifier	Evaluate		2507611	1					
ANR	2507633	ArgumentList	state		2507611	1					
ANR	2507634	Argument	state		2507611	0					
ANR	2507635	Identifier	state		2507611	0					
ANR	2507636	Argument	val		2507611	1					
ANR	2507637	Identifier	val		2507611	0					
ANR	2507638	ReturnType	bool		2507611	1					
ANR	2507639	Identifier	ClassAd :: EvaluateExpr		2507611	2					
ANR	2507640	ParameterList	"const ExprTree * tree , Value & val"		2507611	3					
ANR	2507641	Parameter	const ExprTree * tree	837:14:18537:18556	2507611	0	True				
ANR	2507642	ParameterType	const ExprTree *		2507611	0					
ANR	2507643	Identifier	tree		2507611	1					
ANR	2507644	Parameter	Value & val	837:37:18560:18569	2507611	1	True				
ANR	2507645	ParameterType	Value &		2507611	0					
ANR	2507646	Identifier	val		2507611	1					
ANR	2507647	CFGEntryNode	ENTRY		2507611		True				
ANR	2507648	CFGExitNode	EXIT		2507611		True				
ANR	2507649	Symbol	val		2507611						
ANR	2507650	Symbol	* tree		2507611						
ANR	2507651	Symbol	tree		2507611						
ANR	2507652	Symbol	this		2507611						
ANR	2507653	Symbol	tree -> Evaluate		2507611						
ANR	2507654	Symbol	state		2507611						
ANR	2507655	Function	ClassAd :: EvaluateExpr	845:0:18671:18854							
ANR	2507656	FunctionDef	"ClassAd :: EvaluateExpr (const ExprTree * tree , Value & val , ExprTree * & sig)"		2507655	0					
ANR	2507657	CompoundStatement		847:0:18759:18854	2507655	0					
ANR	2507658	IdentifierDeclStatement	EvalState state ;	848:1:18762:18777	2507655	0	True				
ANR	2507659	IdentifierDecl	state		2507655	0					
ANR	2507660	IdentifierDeclType	EvalState		2507655	0					
ANR	2507661	Identifier	state		2507655	1					
ANR	2507662	ExpressionStatement	state . SetScopes ( this )	850:1:18781:18804	2507655	1	True				
ANR	2507663	CallExpression	state . SetScopes ( this )		2507655	0					
ANR	2507664	Callee	state . SetScopes		2507655	0					
ANR	2507665	MemberAccess	state . SetScopes		2507655	0					
ANR	2507666	Identifier	state		2507655	0					
ANR	2507667	Identifier	SetScopes		2507655	1					
ANR	2507668	ArgumentList	this		2507655	1					
ANR	2507669	Argument	this		2507655	0					
ANR	2507670	Identifier	this		2507655	0					
ANR	2507671	ReturnStatement	"return ( tree -> Evaluate ( state , val , sig ) ) ;"	851:1:18807:18852	2507655	2	True				
ANR	2507672	CallExpression	"tree -> Evaluate ( state , val , sig )"		2507655	0					
ANR	2507673	Callee	tree -> Evaluate		2507655	0					
ANR	2507674	PtrMemberAccess	tree -> Evaluate		2507655	0					
ANR	2507675	Identifier	tree		2507655	0					
ANR	2507676	Identifier	Evaluate		2507655	1					
ANR	2507677	ArgumentList	state		2507655	1					
ANR	2507678	Argument	state		2507655	0					
ANR	2507679	Identifier	state		2507655	0					
ANR	2507680	Argument	val		2507655	1					
ANR	2507681	Identifier	val		2507655	0					
ANR	2507682	Argument	sig		2507655	2					
ANR	2507683	Identifier	sig		2507655	0					
ANR	2507684	ReturnType	bool		2507655	1					
ANR	2507685	Identifier	ClassAd :: EvaluateExpr		2507655	2					
ANR	2507686	ParameterList	"const ExprTree * tree , Value & val , ExprTree * & sig"		2507655	3					
ANR	2507687	Parameter	const ExprTree * tree	846:14:18700:18719	2507655	0	True				
ANR	2507688	ParameterType	const ExprTree *		2507655	0					
ANR	2507689	Identifier	tree		2507655	1					
ANR	2507690	Parameter	Value & val	846:37:18723:18732	2507655	1	True				
ANR	2507691	ParameterType	Value &		2507655	0					
ANR	2507692	Identifier	val		2507655	1					
ANR	2507693	Parameter	ExprTree * & sig	846:50:18736:18749	2507655	2	True				
ANR	2507694	ParameterType	ExprTree * &		2507655	0					
ANR	2507695	Identifier	sig		2507655	1					
ANR	2507696	CFGEntryNode	ENTRY		2507655		True				
ANR	2507697	CFGExitNode	EXIT		2507655		True				
ANR	2507698	Symbol	val		2507655						
ANR	2507699	Symbol	sig		2507655						
ANR	2507700	Symbol	* tree		2507655						
ANR	2507701	Symbol	tree		2507655						
ANR	2507702	Symbol	this		2507655						
ANR	2507703	Symbol	tree -> Evaluate		2507655						
ANR	2507704	Symbol	state		2507655						
ANR	2507705	Function	ClassAd :: EvaluateAttrInt	854:0:18857:19004							
ANR	2507706	FunctionDef	"ClassAd :: EvaluateAttrInt (const string & attr , int & i)"		2507705	0					
ANR	2507707	CompoundStatement		856:0:18925:19004	2507705	0					
ANR	2507708	IdentifierDeclStatement	Value val ;	857:1:18928:18937	2507705	0	True				
ANR	2507709	IdentifierDecl	val		2507705	0					
ANR	2507710	IdentifierDeclType	Value		2507705	0					
ANR	2507711	Identifier	val		2507705	1					
ANR	2507712	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsIntegerValue ( i ) ) ;"	858:1:18940:19002	2507705	1	True				
ANR	2507713	AndExpression	"EvaluateAttr ( attr , val ) && val . IsIntegerValue ( i )"		2507705	0		&&			
ANR	2507714	CallExpression	"EvaluateAttr ( attr , val )"		2507705	0					
ANR	2507715	Callee	EvaluateAttr		2507705	0					
ANR	2507716	Identifier	EvaluateAttr		2507705	0					
ANR	2507717	ArgumentList	attr		2507705	1					
ANR	2507718	Argument	attr		2507705	0					
ANR	2507719	Identifier	attr		2507705	0					
ANR	2507720	Argument	val		2507705	1					
ANR	2507721	Identifier	val		2507705	0					
ANR	2507722	CallExpression	val . IsIntegerValue ( i )		2507705	1					
ANR	2507723	Callee	val . IsIntegerValue		2507705	0					
ANR	2507724	MemberAccess	val . IsIntegerValue		2507705	0					
ANR	2507725	Identifier	val		2507705	0					
ANR	2507726	Identifier	IsIntegerValue		2507705	1					
ANR	2507727	ArgumentList	i		2507705	1					
ANR	2507728	Argument	i		2507705	0					
ANR	2507729	Identifier	i		2507705	0					
ANR	2507730	ReturnType	bool		2507705	1					
ANR	2507731	Identifier	ClassAd :: EvaluateAttrInt		2507705	2					
ANR	2507732	ParameterList	"const string & attr , int & i"		2507705	3					
ANR	2507733	Parameter	const string & attr	855:17:18889:18906	2507705	0	True				
ANR	2507734	ParameterType	const string &		2507705	0					
ANR	2507735	Identifier	attr		2507705	1					
ANR	2507736	Parameter	int & i	855:37:18909:18914	2507705	1	True				
ANR	2507737	ParameterType	int &		2507705	0					
ANR	2507738	Identifier	i		2507705	1					
ANR	2507739	CFGEntryNode	ENTRY		2507705		True				
ANR	2507740	CFGExitNode	EXIT		2507705		True				
ANR	2507741	Symbol	val		2507705						
ANR	2507742	Symbol	i		2507705						
ANR	2507743	Symbol	attr		2507705						
ANR	2507744	Symbol	EvaluateAttr		2507705						
ANR	2507745	Symbol	val . IsIntegerValue		2507705						
ANR	2507746	Function	ClassAd :: EvaluateAttrReal	861:0:19007:19155							
ANR	2507747	FunctionDef	"ClassAd :: EvaluateAttrReal (const string & attr , double & r)"		2507746	0					
ANR	2507748	CompoundStatement		863:0:19079:19155	2507746	0					
ANR	2507749	IdentifierDeclStatement	Value val ;	864:1:19082:19091	2507746	0	True				
ANR	2507750	IdentifierDecl	val		2507746	0					
ANR	2507751	IdentifierDeclType	Value		2507746	0					
ANR	2507752	Identifier	val		2507746	1					
ANR	2507753	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsRealValue ( r ) ) ;"	865:1:19094:19153	2507746	1	True				
ANR	2507754	AndExpression	"EvaluateAttr ( attr , val ) && val . IsRealValue ( r )"		2507746	0		&&			
ANR	2507755	CallExpression	"EvaluateAttr ( attr , val )"		2507746	0					
ANR	2507756	Callee	EvaluateAttr		2507746	0					
ANR	2507757	Identifier	EvaluateAttr		2507746	0					
ANR	2507758	ArgumentList	attr		2507746	1					
ANR	2507759	Argument	attr		2507746	0					
ANR	2507760	Identifier	attr		2507746	0					
ANR	2507761	Argument	val		2507746	1					
ANR	2507762	Identifier	val		2507746	0					
ANR	2507763	CallExpression	val . IsRealValue ( r )		2507746	1					
ANR	2507764	Callee	val . IsRealValue		2507746	0					
ANR	2507765	MemberAccess	val . IsRealValue		2507746	0					
ANR	2507766	Identifier	val		2507746	0					
ANR	2507767	Identifier	IsRealValue		2507746	1					
ANR	2507768	ArgumentList	r		2507746	1					
ANR	2507769	Argument	r		2507746	0					
ANR	2507770	Identifier	r		2507746	0					
ANR	2507771	ReturnType	bool		2507746	1					
ANR	2507772	Identifier	ClassAd :: EvaluateAttrReal		2507746	2					
ANR	2507773	ParameterList	"const string & attr , double & r"		2507746	3					
ANR	2507774	Parameter	const string & attr	862:18:19040:19057	2507746	0	True				
ANR	2507775	ParameterType	const string &		2507746	0					
ANR	2507776	Identifier	attr		2507746	1					
ANR	2507777	Parameter	double & r	862:38:19060:19068	2507746	1	True				
ANR	2507778	ParameterType	double &		2507746	0					
ANR	2507779	Identifier	r		2507746	1					
ANR	2507780	CFGEntryNode	ENTRY		2507746		True				
ANR	2507781	CFGExitNode	EXIT		2507746		True				
ANR	2507782	Symbol	val		2507746						
ANR	2507783	Symbol	r		2507746						
ANR	2507784	Symbol	val . IsRealValue		2507746						
ANR	2507785	Symbol	attr		2507746						
ANR	2507786	Symbol	EvaluateAttr		2507746						
ANR	2507787	Function	ClassAd :: EvaluateAttrNumber	868:0:19158:19302							
ANR	2507788	FunctionDef	"ClassAd :: EvaluateAttrNumber (const string & attr , int & i)"		2507787	0					
ANR	2507789	CompoundStatement		870:0:19229:19302	2507787	0					
ANR	2507790	IdentifierDeclStatement	Value val ;	871:1:19232:19241	2507787	0	True				
ANR	2507791	IdentifierDecl	val		2507787	0					
ANR	2507792	IdentifierDeclType	Value		2507787	0					
ANR	2507793	Identifier	val		2507787	1					
ANR	2507794	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsNumber ( i ) ) ;"	872:1:19244:19300	2507787	1	True				
ANR	2507795	AndExpression	"EvaluateAttr ( attr , val ) && val . IsNumber ( i )"		2507787	0		&&			
ANR	2507796	CallExpression	"EvaluateAttr ( attr , val )"		2507787	0					
ANR	2507797	Callee	EvaluateAttr		2507787	0					
ANR	2507798	Identifier	EvaluateAttr		2507787	0					
ANR	2507799	ArgumentList	attr		2507787	1					
ANR	2507800	Argument	attr		2507787	0					
ANR	2507801	Identifier	attr		2507787	0					
ANR	2507802	Argument	val		2507787	1					
ANR	2507803	Identifier	val		2507787	0					
ANR	2507804	CallExpression	val . IsNumber ( i )		2507787	1					
ANR	2507805	Callee	val . IsNumber		2507787	0					
ANR	2507806	MemberAccess	val . IsNumber		2507787	0					
ANR	2507807	Identifier	val		2507787	0					
ANR	2507808	Identifier	IsNumber		2507787	1					
ANR	2507809	ArgumentList	i		2507787	1					
ANR	2507810	Argument	i		2507787	0					
ANR	2507811	Identifier	i		2507787	0					
ANR	2507812	ReturnType	bool		2507787	1					
ANR	2507813	Identifier	ClassAd :: EvaluateAttrNumber		2507787	2					
ANR	2507814	ParameterList	"const string & attr , int & i"		2507787	3					
ANR	2507815	Parameter	const string & attr	869:20:19193:19210	2507787	0	True				
ANR	2507816	ParameterType	const string &		2507787	0					
ANR	2507817	Identifier	attr		2507787	1					
ANR	2507818	Parameter	int & i	869:40:19213:19218	2507787	1	True				
ANR	2507819	ParameterType	int &		2507787	0					
ANR	2507820	Identifier	i		2507787	1					
ANR	2507821	CFGEntryNode	ENTRY		2507787		True				
ANR	2507822	CFGExitNode	EXIT		2507787		True				
ANR	2507823	Symbol	val		2507787						
ANR	2507824	Symbol	i		2507787						
ANR	2507825	Symbol	attr		2507787						
ANR	2507826	Symbol	val . IsNumber		2507787						
ANR	2507827	Symbol	EvaluateAttr		2507787						
ANR	2507828	Function	ClassAd :: EvaluateAttrNumber	875:0:19305:19452							
ANR	2507829	FunctionDef	"ClassAd :: EvaluateAttrNumber (const string & attr , double & r)"		2507828	0					
ANR	2507830	CompoundStatement		877:0:19379:19452	2507828	0					
ANR	2507831	IdentifierDeclStatement	Value val ;	878:1:19382:19391	2507828	0	True				
ANR	2507832	IdentifierDecl	val		2507828	0					
ANR	2507833	IdentifierDeclType	Value		2507828	0					
ANR	2507834	Identifier	val		2507828	1					
ANR	2507835	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsNumber ( r ) ) ;"	879:1:19394:19450	2507828	1	True				
ANR	2507836	AndExpression	"EvaluateAttr ( attr , val ) && val . IsNumber ( r )"		2507828	0		&&			
ANR	2507837	CallExpression	"EvaluateAttr ( attr , val )"		2507828	0					
ANR	2507838	Callee	EvaluateAttr		2507828	0					
ANR	2507839	Identifier	EvaluateAttr		2507828	0					
ANR	2507840	ArgumentList	attr		2507828	1					
ANR	2507841	Argument	attr		2507828	0					
ANR	2507842	Identifier	attr		2507828	0					
ANR	2507843	Argument	val		2507828	1					
ANR	2507844	Identifier	val		2507828	0					
ANR	2507845	CallExpression	val . IsNumber ( r )		2507828	1					
ANR	2507846	Callee	val . IsNumber		2507828	0					
ANR	2507847	MemberAccess	val . IsNumber		2507828	0					
ANR	2507848	Identifier	val		2507828	0					
ANR	2507849	Identifier	IsNumber		2507828	1					
ANR	2507850	ArgumentList	r		2507828	1					
ANR	2507851	Argument	r		2507828	0					
ANR	2507852	Identifier	r		2507828	0					
ANR	2507853	ReturnType	bool		2507828	1					
ANR	2507854	Identifier	ClassAd :: EvaluateAttrNumber		2507828	2					
ANR	2507855	ParameterList	"const string & attr , double & r"		2507828	3					
ANR	2507856	Parameter	const string & attr	876:20:19340:19357	2507828	0	True				
ANR	2507857	ParameterType	const string &		2507828	0					
ANR	2507858	Identifier	attr		2507828	1					
ANR	2507859	Parameter	double & r	876:40:19360:19368	2507828	1	True				
ANR	2507860	ParameterType	double &		2507828	0					
ANR	2507861	Identifier	r		2507828	1					
ANR	2507862	CFGEntryNode	ENTRY		2507828		True				
ANR	2507863	CFGExitNode	EXIT		2507828		True				
ANR	2507864	Symbol	val		2507828						
ANR	2507865	Symbol	r		2507828						
ANR	2507866	Symbol	attr		2507828						
ANR	2507867	Symbol	val . IsNumber		2507828						
ANR	2507868	Symbol	EvaluateAttr		2507828						
ANR	2507869	Function	ClassAd :: EvaluateAttrString	882:0:19455:19622							
ANR	2507870	FunctionDef	"ClassAd :: EvaluateAttrString (const string & attr , char * buf , int len)"		2507869	0					
ANR	2507871	CompoundStatement		884:0:19537:19622	2507869	0					
ANR	2507872	IdentifierDeclStatement	Value val ;	885:1:19540:19549	2507869	0	True				
ANR	2507873	IdentifierDecl	val		2507869	0					
ANR	2507874	IdentifierDeclType	Value		2507869	0					
ANR	2507875	Identifier	val		2507869	1					
ANR	2507876	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsStringValue ( buf , len ) ) ;"	886:1:19552:19620	2507869	1	True				
ANR	2507877	AndExpression	"EvaluateAttr ( attr , val ) && val . IsStringValue ( buf , len )"		2507869	0		&&			
ANR	2507878	CallExpression	"EvaluateAttr ( attr , val )"		2507869	0					
ANR	2507879	Callee	EvaluateAttr		2507869	0					
ANR	2507880	Identifier	EvaluateAttr		2507869	0					
ANR	2507881	ArgumentList	attr		2507869	1					
ANR	2507882	Argument	attr		2507869	0					
ANR	2507883	Identifier	attr		2507869	0					
ANR	2507884	Argument	val		2507869	1					
ANR	2507885	Identifier	val		2507869	0					
ANR	2507886	CallExpression	"val . IsStringValue ( buf , len )"		2507869	1					
ANR	2507887	Callee	val . IsStringValue		2507869	0					
ANR	2507888	MemberAccess	val . IsStringValue		2507869	0					
ANR	2507889	Identifier	val		2507869	0					
ANR	2507890	Identifier	IsStringValue		2507869	1					
ANR	2507891	ArgumentList	buf		2507869	1					
ANR	2507892	Argument	buf		2507869	0					
ANR	2507893	Identifier	buf		2507869	0					
ANR	2507894	Argument	len		2507869	1					
ANR	2507895	Identifier	len		2507869	0					
ANR	2507896	ReturnType	bool		2507869	1					
ANR	2507897	Identifier	ClassAd :: EvaluateAttrString		2507869	2					
ANR	2507898	ParameterList	"const string & attr , char * buf , int len"		2507869	3					
ANR	2507899	Parameter	const string & attr	883:20:19490:19507	2507869	0	True				
ANR	2507900	ParameterType	const string &		2507869	0					
ANR	2507901	Identifier	attr		2507869	1					
ANR	2507902	Parameter	char * buf	883:40:19510:19518	2507869	1	True				
ANR	2507903	ParameterType	char *		2507869	0					
ANR	2507904	Identifier	buf		2507869	1					
ANR	2507905	Parameter	int len	883:51:19521:19527	2507869	2	True				
ANR	2507906	ParameterType	int		2507869	0					
ANR	2507907	Identifier	len		2507869	1					
ANR	2507908	CFGEntryNode	ENTRY		2507869		True				
ANR	2507909	CFGExitNode	EXIT		2507869		True				
ANR	2507910	Symbol	val		2507869						
ANR	2507911	Symbol	buf		2507869						
ANR	2507912	Symbol	len		2507869						
ANR	2507913	Symbol	val . IsStringValue		2507869						
ANR	2507914	Symbol	attr		2507869						
ANR	2507915	Symbol	EvaluateAttr		2507869						
ANR	2507916	Function	ClassAd :: EvaluateAttrString	889:0:19625:19780							
ANR	2507917	FunctionDef	"ClassAd :: EvaluateAttrString (const string & attr , string & buf)"		2507916	0					
ANR	2507918	CompoundStatement		891:0:19700:19780	2507916	0					
ANR	2507919	IdentifierDeclStatement	Value val ;	892:1:19703:19712	2507916	0	True				
ANR	2507920	IdentifierDecl	val		2507916	0					
ANR	2507921	IdentifierDeclType	Value		2507916	0					
ANR	2507922	Identifier	val		2507916	1					
ANR	2507923	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsStringValue ( buf ) ) ;"	893:1:19715:19778	2507916	1	True				
ANR	2507924	AndExpression	"EvaluateAttr ( attr , val ) && val . IsStringValue ( buf )"		2507916	0		&&			
ANR	2507925	CallExpression	"EvaluateAttr ( attr , val )"		2507916	0					
ANR	2507926	Callee	EvaluateAttr		2507916	0					
ANR	2507927	Identifier	EvaluateAttr		2507916	0					
ANR	2507928	ArgumentList	attr		2507916	1					
ANR	2507929	Argument	attr		2507916	0					
ANR	2507930	Identifier	attr		2507916	0					
ANR	2507931	Argument	val		2507916	1					
ANR	2507932	Identifier	val		2507916	0					
ANR	2507933	CallExpression	val . IsStringValue ( buf )		2507916	1					
ANR	2507934	Callee	val . IsStringValue		2507916	0					
ANR	2507935	MemberAccess	val . IsStringValue		2507916	0					
ANR	2507936	Identifier	val		2507916	0					
ANR	2507937	Identifier	IsStringValue		2507916	1					
ANR	2507938	ArgumentList	buf		2507916	1					
ANR	2507939	Argument	buf		2507916	0					
ANR	2507940	Identifier	buf		2507916	0					
ANR	2507941	ReturnType	bool		2507916	1					
ANR	2507942	Identifier	ClassAd :: EvaluateAttrString		2507916	2					
ANR	2507943	ParameterList	"const string & attr , string & buf"		2507916	3					
ANR	2507944	Parameter	const string & attr	890:20:19660:19677	2507916	0	True				
ANR	2507945	ParameterType	const string &		2507916	0					
ANR	2507946	Identifier	attr		2507916	1					
ANR	2507947	Parameter	string & buf	890:40:19680:19690	2507916	1	True				
ANR	2507948	ParameterType	string &		2507916	0					
ANR	2507949	Identifier	buf		2507916	1					
ANR	2507950	CFGEntryNode	ENTRY		2507916		True				
ANR	2507951	CFGExitNode	EXIT		2507916		True				
ANR	2507952	Symbol	val		2507916						
ANR	2507953	Symbol	buf		2507916						
ANR	2507954	Symbol	val . IsStringValue		2507916						
ANR	2507955	Symbol	attr		2507916						
ANR	2507956	Symbol	EvaluateAttr		2507916						
ANR	2507957	Function	ClassAd :: EvaluateAttrBool	896:0:19783:19931							
ANR	2507958	FunctionDef	"ClassAd :: EvaluateAttrBool (const string & attr , bool & b)"		2507957	0					
ANR	2507959	CompoundStatement		898:0:19852:19931	2507957	0					
ANR	2507960	IdentifierDeclStatement	Value val ;	899:1:19855:19864	2507957	0	True				
ANR	2507961	IdentifierDecl	val		2507957	0					
ANR	2507962	IdentifierDeclType	Value		2507957	0					
ANR	2507963	Identifier	val		2507957	1					
ANR	2507964	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsBooleanValue ( b ) ) ;"	900:1:19867:19929	2507957	1	True				
ANR	2507965	AndExpression	"EvaluateAttr ( attr , val ) && val . IsBooleanValue ( b )"		2507957	0		&&			
ANR	2507966	CallExpression	"EvaluateAttr ( attr , val )"		2507957	0					
ANR	2507967	Callee	EvaluateAttr		2507957	0					
ANR	2507968	Identifier	EvaluateAttr		2507957	0					
ANR	2507969	ArgumentList	attr		2507957	1					
ANR	2507970	Argument	attr		2507957	0					
ANR	2507971	Identifier	attr		2507957	0					
ANR	2507972	Argument	val		2507957	1					
ANR	2507973	Identifier	val		2507957	0					
ANR	2507974	CallExpression	val . IsBooleanValue ( b )		2507957	1					
ANR	2507975	Callee	val . IsBooleanValue		2507957	0					
ANR	2507976	MemberAccess	val . IsBooleanValue		2507957	0					
ANR	2507977	Identifier	val		2507957	0					
ANR	2507978	Identifier	IsBooleanValue		2507957	1					
ANR	2507979	ArgumentList	b		2507957	1					
ANR	2507980	Argument	b		2507957	0					
ANR	2507981	Identifier	b		2507957	0					
ANR	2507982	ReturnType	bool		2507957	1					
ANR	2507983	Identifier	ClassAd :: EvaluateAttrBool		2507957	2					
ANR	2507984	ParameterList	"const string & attr , bool & b"		2507957	3					
ANR	2507985	Parameter	const string & attr	897:18:19816:19833	2507957	0	True				
ANR	2507986	ParameterType	const string &		2507957	0					
ANR	2507987	Identifier	attr		2507957	1					
ANR	2507988	Parameter	bool & b	897:38:19836:19842	2507957	1	True				
ANR	2507989	ParameterType	bool &		2507957	0					
ANR	2507990	Identifier	b		2507957	1					
ANR	2507991	CFGEntryNode	ENTRY		2507957		True				
ANR	2507992	CFGExitNode	EXIT		2507957		True				
ANR	2507993	Symbol	val		2507957						
ANR	2507994	Symbol	b		2507957						
ANR	2507995	Symbol	attr		2507957						
ANR	2507996	Symbol	EvaluateAttr		2507957						
ANR	2507997	Symbol	val . IsBooleanValue		2507957						
ANR	2507998	Function	ClassAd :: EvaluateAttrClassAd	903:0:19934:20101							
ANR	2507999	FunctionDef	"ClassAd :: EvaluateAttrClassAd (const string & attr , ClassAd * & classad)"		2507998	0					
ANR	2508000	CompoundStatement		905:0:20016:20101	2507998	0					
ANR	2508001	IdentifierDeclStatement	Value val ;	906:1:20019:20028	2507998	0	True				
ANR	2508002	IdentifierDecl	val		2507998	0					
ANR	2508003	IdentifierDeclType	Value		2507998	0					
ANR	2508004	Identifier	val		2507998	1					
ANR	2508005	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsClassAdValue ( classad ) ) ;"	907:1:20031:20099	2507998	1	True				
ANR	2508006	AndExpression	"EvaluateAttr ( attr , val ) && val . IsClassAdValue ( classad )"		2507998	0		&&			
ANR	2508007	CallExpression	"EvaluateAttr ( attr , val )"		2507998	0					
ANR	2508008	Callee	EvaluateAttr		2507998	0					
ANR	2508009	Identifier	EvaluateAttr		2507998	0					
ANR	2508010	ArgumentList	attr		2507998	1					
ANR	2508011	Argument	attr		2507998	0					
ANR	2508012	Identifier	attr		2507998	0					
ANR	2508013	Argument	val		2507998	1					
ANR	2508014	Identifier	val		2507998	0					
ANR	2508015	CallExpression	val . IsClassAdValue ( classad )		2507998	1					
ANR	2508016	Callee	val . IsClassAdValue		2507998	0					
ANR	2508017	MemberAccess	val . IsClassAdValue		2507998	0					
ANR	2508018	Identifier	val		2507998	0					
ANR	2508019	Identifier	IsClassAdValue		2507998	1					
ANR	2508020	ArgumentList	classad		2507998	1					
ANR	2508021	Argument	classad		2507998	0					
ANR	2508022	Identifier	classad		2507998	0					
ANR	2508023	ReturnType	bool		2507998	1					
ANR	2508024	Identifier	ClassAd :: EvaluateAttrClassAd		2507998	2					
ANR	2508025	ParameterList	"const string & attr , ClassAd * & classad"		2507998	3					
ANR	2508026	Parameter	const string & attr	904:21:19970:19987	2507998	0	True				
ANR	2508027	ParameterType	const string &		2507998	0					
ANR	2508028	Identifier	attr		2507998	1					
ANR	2508029	Parameter	ClassAd * & classad	904:41:19990:20006	2507998	1	True				
ANR	2508030	ParameterType	ClassAd * &		2507998	0					
ANR	2508031	Identifier	classad		2507998	1					
ANR	2508032	CFGEntryNode	ENTRY		2507998		True				
ANR	2508033	CFGExitNode	EXIT		2507998		True				
ANR	2508034	Symbol	val		2507998						
ANR	2508035	Symbol	val . IsClassAdValue		2507998						
ANR	2508036	Symbol	classad		2507998						
ANR	2508037	Symbol	attr		2507998						
ANR	2508038	Symbol	EvaluateAttr		2507998						
ANR	2508039	Function	ClassAd :: EvaluateAttrList	910:0:20104:20257							
ANR	2508040	FunctionDef	"ClassAd :: EvaluateAttrList (const string & attr , ExprList * & l)"		2508039	0					
ANR	2508041	CompoundStatement		912:0:20178:20257	2508039	0					
ANR	2508042	IdentifierDeclStatement	Value val ;	913:4:20184:20193	2508039	0	True				
ANR	2508043	IdentifierDecl	val		2508039	0					
ANR	2508044	IdentifierDeclType	Value		2508039	0					
ANR	2508045	Identifier	val		2508039	1					
ANR	2508046	ReturnStatement	"return ( EvaluateAttr ( attr , val ) && val . IsListValue ( l ) ) ;"	914:1:20196:20255	2508039	1	True				
ANR	2508047	AndExpression	"EvaluateAttr ( attr , val ) && val . IsListValue ( l )"		2508039	0		&&			
ANR	2508048	CallExpression	"EvaluateAttr ( attr , val )"		2508039	0					
ANR	2508049	Callee	EvaluateAttr		2508039	0					
ANR	2508050	Identifier	EvaluateAttr		2508039	0					
ANR	2508051	ArgumentList	attr		2508039	1					
ANR	2508052	Argument	attr		2508039	0					
ANR	2508053	Identifier	attr		2508039	0					
ANR	2508054	Argument	val		2508039	1					
ANR	2508055	Identifier	val		2508039	0					
ANR	2508056	CallExpression	val . IsListValue ( l )		2508039	1					
ANR	2508057	Callee	val . IsListValue		2508039	0					
ANR	2508058	MemberAccess	val . IsListValue		2508039	0					
ANR	2508059	Identifier	val		2508039	0					
ANR	2508060	Identifier	IsListValue		2508039	1					
ANR	2508061	ArgumentList	l		2508039	1					
ANR	2508062	Argument	l		2508039	0					
ANR	2508063	Identifier	l		2508039	0					
ANR	2508064	ReturnType	bool		2508039	1					
ANR	2508065	Identifier	ClassAd :: EvaluateAttrList		2508039	2					
ANR	2508066	ParameterList	"const string & attr , ExprList * & l"		2508039	3					
ANR	2508067	Parameter	const string & attr	911:18:20137:20154	2508039	0	True				
ANR	2508068	ParameterType	const string &		2508039	0					
ANR	2508069	Identifier	attr		2508039	1					
ANR	2508070	Parameter	ExprList * & l	911:38:20157:20168	2508039	1	True				
ANR	2508071	ParameterType	ExprList * &		2508039	0					
ANR	2508072	Identifier	l		2508039	1					
ANR	2508073	CFGEntryNode	ENTRY		2508039		True				
ANR	2508074	CFGExitNode	EXIT		2508039		True				
ANR	2508075	Symbol	val		2508039						
ANR	2508076	Symbol	attr		2508039						
ANR	2508077	Symbol	l		2508039						
ANR	2508078	Symbol	val . IsListValue		2508039						
ANR	2508079	Symbol	EvaluateAttr		2508039						
ANR	2508080	Function	ClassAd :: GetExternalReferences	917:0:20260:20509							
ANR	2508081	FunctionDef	"ClassAd :: GetExternalReferences (const ExprTree * tree , References & refs , bool fullNames)"		2508080	0					
ANR	2508082	CompoundStatement		919:0:20355:20509	2508080	0					
ANR	2508083	IdentifierDeclStatement	EvalState state ;	920:4:20361:20382	2508080	0	True				
ANR	2508084	IdentifierDecl	state		2508080	0					
ANR	2508085	IdentifierDeclType	EvalState		2508080	0					
ANR	2508086	Identifier	state		2508080	1					
ANR	2508087	ExpressionStatement	state . rootAd = this	922:4:20389:20408	2508080	1	True				
ANR	2508088	AssignmentExpression	state . rootAd = this		2508080	0		=			
ANR	2508089	MemberAccess	state . rootAd		2508080	0					
ANR	2508090	Identifier	state		2508080	0					
ANR	2508091	Identifier	rootAd		2508080	1					
ANR	2508092	Identifier	this		2508080	1					
ANR	2508093	ExpressionStatement	state . curAd = this	923:1:20412:20430	2508080	2	True				
ANR	2508094	AssignmentExpression	state . curAd = this		2508080	0		=			
ANR	2508095	MemberAccess	state . curAd		2508080	0					
ANR	2508096	Identifier	state		2508080	0					
ANR	2508097	Identifier	curAd		2508080	1					
ANR	2508098	Identifier	this		2508080	1					
ANR	2508099	ReturnStatement	"return ( _GetExternalReferences ( tree , this , state , refs , fullNames ) ) ;"	925:4:20437:20507	2508080	3	True				
ANR	2508100	CallExpression	"_GetExternalReferences ( tree , this , state , refs , fullNames )"		2508080	0					
ANR	2508101	Callee	_GetExternalReferences		2508080	0					
ANR	2508102	Identifier	_GetExternalReferences		2508080	0					
ANR	2508103	ArgumentList	tree		2508080	1					
ANR	2508104	Argument	tree		2508080	0					
ANR	2508105	Identifier	tree		2508080	0					
ANR	2508106	Argument	this		2508080	1					
ANR	2508107	Identifier	this		2508080	0					
ANR	2508108	Argument	state		2508080	2					
ANR	2508109	Identifier	state		2508080	0					
ANR	2508110	Argument	refs		2508080	3					
ANR	2508111	Identifier	refs		2508080	0					
ANR	2508112	Argument	fullNames		2508080	4					
ANR	2508113	Identifier	fullNames		2508080	0					
ANR	2508114	ReturnType	bool		2508080	1					
ANR	2508115	Identifier	ClassAd :: GetExternalReferences		2508080	2					
ANR	2508116	ParameterList	"const ExprTree * tree , References & refs , bool fullNames"		2508080	3					
ANR	2508117	Parameter	const ExprTree * tree	918:23:20298:20317	2508080	0	True				
ANR	2508118	ParameterType	const ExprTree *		2508080	0					
ANR	2508119	Identifier	tree		2508080	1					
ANR	2508120	Parameter	References & refs	918:45:20320:20335	2508080	1	True				
ANR	2508121	ParameterType	References &		2508080	0					
ANR	2508122	Identifier	refs		2508080	1					
ANR	2508123	Parameter	bool fullNames	918:63:20338:20351	2508080	2	True				
ANR	2508124	ParameterType	bool		2508080	0					
ANR	2508125	Identifier	fullNames		2508080	1					
ANR	2508126	CFGEntryNode	ENTRY		2508080		True				
ANR	2508127	CFGExitNode	EXIT		2508080		True				
ANR	2508128	Symbol	state . curAd		2508080						
ANR	2508129	Symbol	refs		2508080						
ANR	2508130	Symbol	_GetExternalReferences		2508080						
ANR	2508131	Symbol	tree		2508080						
ANR	2508132	Symbol	state . rootAd		2508080						
ANR	2508133	Symbol	this		2508080						
ANR	2508134	Symbol	fullNames		2508080						
ANR	2508135	Symbol	state		2508080						
ANR	2508136	Function	ClassAd :: _GetExternalReferences	929:0:20513:26417							
ANR	2508137	FunctionDef	"ClassAd :: _GetExternalReferences (const ExprTree * expr , ClassAd * ad , EvalState & state , References & refs , bool fullNames)"		2508136	0					
ANR	2508138	CompoundStatement		932:0:20642:26417	2508136	0					
ANR	2508139	SwitchStatement	switch ( expr -> GetKind ( ) )		2508136	0					
ANR	2508140	Condition	expr -> GetKind ( )	933:12:20656:20671	2508136	0	True				
ANR	2508141	CallExpression	expr -> GetKind ( )		2508136	0					
ANR	2508142	Callee	expr -> GetKind		2508136	0					
ANR	2508143	PtrMemberAccess	expr -> GetKind		2508136	0					
ANR	2508144	Identifier	expr		2508136	0					
ANR	2508145	Identifier	GetKind		2508136	1					
ANR	2508146	ArgumentList			2508136	1					
ANR	2508147	CompoundStatement		2:31:32:32	2508136	1					
ANR	2508148	Label	case LITERAL_NODE :	934:8:20685:20702	2508136	0	True				
ANR	2508149	Identifier	LITERAL_NODE		2508136	0					
ANR	2508150	ReturnStatement	return ( true ) ;	936:12:20763:20777	2508136	1	True				
ANR	2508151	Identifier	true		2508136	0					
ANR	2508152	Label	case ATTRREF_NODE :	938:8:20788:20805	2508136	2	True				
ANR	2508153	Identifier	ATTRREF_NODE		2508136	0					
ANR	2508154	CompoundStatement		58:3:2148:2182	2508136	3					
ANR	2508155	IdentifierDeclStatement	const ClassAd * start ;	939:12:20821:20843	2508136	0	True				
ANR	2508156	IdentifierDecl	* start		2508136	0					
ANR	2508157	IdentifierDeclType	const ClassAd *		2508136	0					
ANR	2508158	Identifier	start		2508136	1					
ANR	2508159	IdentifierDeclStatement	"ExprTree * tree , * result ;"	940:12:20857:20887	2508136	1	True				
ANR	2508160	IdentifierDecl	* tree		2508136	0					
ANR	2508161	IdentifierDeclType	ExprTree *		2508136	0					
ANR	2508162	Identifier	tree		2508136	1					
ANR	2508163	IdentifierDecl	* result		2508136	1					
ANR	2508164	IdentifierDeclType	ExprTree *		2508136	0					
ANR	2508165	Identifier	result		2508136	1					
ANR	2508166	IdentifierDeclStatement	string attr ;	941:12:20901:20921	2508136	2	True				
ANR	2508167	IdentifierDecl	attr		2508136	0					
ANR	2508168	IdentifierDeclType	string		2508136	0					
ANR	2508169	Identifier	attr		2508136	1					
ANR	2508170	IdentifierDeclStatement	Value val ;	942:12:20935:20954	2508136	3	True				
ANR	2508171	IdentifierDecl	val		2508136	0					
ANR	2508172	IdentifierDeclType	Value		2508136	0					
ANR	2508173	Identifier	val		2508136	1					
ANR	2508174	IdentifierDeclStatement	bool abs ;	943:12:20968:20987	2508136	4	True				
ANR	2508175	IdentifierDecl	abs		2508136	0					
ANR	2508176	IdentifierDeclType	bool		2508136	0					
ANR	2508177	Identifier	abs		2508136	1					
ANR	2508178	ExpressionStatement	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"	945:12:21002:21069	2508136	5	True				
ANR	2508179	CallExpression	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"		2508136	0					
ANR	2508180	Callee	( ( const AttributeReference * ) expr ) -> GetComponents		2508136	0					
ANR	2508181	PtrMemberAccess	( ( const AttributeReference * ) expr ) -> GetComponents		2508136	0					
ANR	2508182	CastExpression	( const AttributeReference * ) expr		2508136	0					
ANR	2508183	CastTarget	const AttributeReference *		2508136	0					
ANR	2508184	Identifier	expr		2508136	1					
ANR	2508185	Identifier	GetComponents		2508136	1					
ANR	2508186	ArgumentList	tree		2508136	1					
ANR	2508187	Argument	tree		2508136	0					
ANR	2508188	Identifier	tree		2508136	0					
ANR	2508189	Argument	attr		2508136	1					
ANR	2508190	Identifier	attr		2508136	0					
ANR	2508191	Argument	abs		2508136	2					
ANR	2508192	Identifier	abs		2508136	0					
ANR	2508193	IfStatement	if ( tree == NULL )		2508136	6					
ANR	2508194	Condition	tree == NULL	947:16:21152:21161	2508136	0	True				
ANR	2508195	EqualityExpression	tree == NULL		2508136	0		==			
ANR	2508196	Identifier	tree		2508136	0					
ANR	2508197	Identifier	NULL		2508136	1					
ANR	2508198	CompoundStatement		16:29:522:522	2508136	1					
ANR	2508199	ExpressionStatement	start = abs ? state . rootAd : state . curAd	948:16:21183:21223	2508136	0	True				
ANR	2508200	AssignmentExpression	start = abs ? state . rootAd : state . curAd		2508136	0		=			
ANR	2508201	Identifier	start		2508136	0					
ANR	2508202	ConditionalExpression	abs ? state . rootAd : state . curAd		2508136	1					
ANR	2508203	Condition	abs		2508136	0					
ANR	2508204	Identifier	abs		2508136	0					
ANR	2508205	MemberAccess	state . rootAd		2508136	1					
ANR	2508206	Identifier	state		2508136	0					
ANR	2508207	Identifier	rootAd		2508136	1					
ANR	2508208	MemberAccess	state . curAd		2508136	2					
ANR	2508209	Identifier	state		2508136	0					
ANR	2508210	Identifier	curAd		2508136	1					
ANR	2508211	IfStatement	if ( abs && ( start == NULL ) )		2508136	1					
ANR	2508212	Condition	abs && ( start == NULL )	949:8:21233:21256	2508136	0	True				
ANR	2508213	AndExpression	abs && ( start == NULL )		2508136	0		&&			
ANR	2508214	Identifier	abs		2508136	0					
ANR	2508215	EqualityExpression	start == NULL		2508136	1		==			
ANR	2508216	Identifier	start		2508136	0					
ANR	2508217	Identifier	NULL		2508136	1					
ANR	2508218	CompoundStatement		18:35:617:617	2508136	1					
ANR	2508219	ReturnStatement	return false ;	950:5:21298:21310	2508136	0	True				
ANR	2508220	Identifier	false		2508136	0					
ANR	2508221	ElseStatement	else		2508136	0					
ANR	2508222	CompoundStatement		21:19:718:718	2508136	0					
ANR	2508223	IfStatement	"if ( ! tree -> Evaluate ( state , val ) )"		2508136	0					
ANR	2508224	Condition	"! tree -> Evaluate ( state , val )"	953:20:21383:21411	2508136	0	True				
ANR	2508225	UnaryOperationExpression	"! tree -> Evaluate ( state , val )"		2508136	0					
ANR	2508226	UnaryOperator	!		2508136	0					
ANR	2508227	CallExpression	"tree -> Evaluate ( state , val )"		2508136	1					
ANR	2508228	Callee	tree -> Evaluate		2508136	0					
ANR	2508229	PtrMemberAccess	tree -> Evaluate		2508136	0					
ANR	2508230	Identifier	tree		2508136	0					
ANR	2508231	Identifier	Evaluate		2508136	1					
ANR	2508232	ArgumentList	state		2508136	1					
ANR	2508233	Argument	state		2508136	0					
ANR	2508234	Identifier	state		2508136	0					
ANR	2508235	Argument	val		2508136	1					
ANR	2508236	Identifier	val		2508136	0					
ANR	2508237	CompoundStatement		22:52:772:772	2508136	1					
ANR	2508238	ReturnStatement	return ( false ) ;	954:20:21437:21452	2508136	0	True				
ANR	2508239	Identifier	false		2508136	0					
ANR	2508240	IfStatement	if ( val . IsUndefinedValue ( ) )		2508136	1					
ANR	2508241	Condition	val . IsUndefinedValue ( )	959:20:21616:21638	2508136	0	True				
ANR	2508242	CallExpression	val . IsUndefinedValue ( )		2508136	0					
ANR	2508243	Callee	val . IsUndefinedValue		2508136	0					
ANR	2508244	MemberAccess	val . IsUndefinedValue		2508136	0					
ANR	2508245	Identifier	val		2508136	0					
ANR	2508246	Identifier	IsUndefinedValue		2508136	1					
ANR	2508247	ArgumentList			2508136	1					
ANR	2508248	CompoundStatement		28:46:999:999	2508136	1					
ANR	2508249	IfStatement	if ( fullNames )		2508136	0					
ANR	2508250	Condition	fullNames	960:24:21668:21676	2508136	0	True				
ANR	2508251	Identifier	fullNames		2508136	0					
ANR	2508252	CompoundStatement		30:24:1062:1077	2508136	1					
ANR	2508253	IdentifierDeclStatement	string fullName ;	961:24:21705:21720	2508136	0	True				
ANR	2508254	IdentifierDecl	fullName		2508136	0					
ANR	2508255	IdentifierDeclType	string		2508136	0					
ANR	2508256	Identifier	fullName		2508136	1					
ANR	2508257	IfStatement	if ( tree != NULL )		2508136	1					
ANR	2508258	Condition	tree != NULL	962:28:21750:21761	2508136	0	True				
ANR	2508259	EqualityExpression	tree != NULL		2508136	0		!=			
ANR	2508260	Identifier	tree		2508136	0					
ANR	2508261	Identifier	NULL		2508136	1					
ANR	2508262	CompoundStatement		32:28:1151:1175	2508136	1					
ANR	2508263	IdentifierDeclStatement	ClassAdUnParser unparser ;	963:28:21794:21818	2508136	0	True				
ANR	2508264	IdentifierDecl	unparser		2508136	0					
ANR	2508265	IdentifierDeclType	ClassAdUnParser		2508136	0					
ANR	2508266	Identifier	unparser		2508136	1					
ANR	2508267	ExpressionStatement	"unparser . Unparse ( fullName , tree )"	964:28:21848:21880	2508136	1	True				
ANR	2508268	CallExpression	"unparser . Unparse ( fullName , tree )"		2508136	0					
ANR	2508269	Callee	unparser . Unparse		2508136	0					
ANR	2508270	MemberAccess	unparser . Unparse		2508136	0					
ANR	2508271	Identifier	unparser		2508136	0					
ANR	2508272	Identifier	Unparse		2508136	1					
ANR	2508273	ArgumentList	fullName		2508136	1					
ANR	2508274	Argument	fullName		2508136	0					
ANR	2508275	Identifier	fullName		2508136	0					
ANR	2508276	Argument	tree		2508136	1					
ANR	2508277	Identifier	tree		2508136	0					
ANR	2508278	ExpressionStatement	"fullName += ""."""	965:28:21910:21925	2508136	2	True				
ANR	2508279	AssignmentExpression	"fullName += ""."""		2508136	0		+=			
ANR	2508280	Identifier	fullName		2508136	0					
ANR	2508281	PrimaryExpression	"""."""		2508136	1					
ANR	2508282	ExpressionStatement	fullName += attr	967:24:21977:21993	2508136	2	True				
ANR	2508283	AssignmentExpression	fullName += attr		2508136	0		+=			
ANR	2508284	Identifier	fullName		2508136	0					
ANR	2508285	Identifier	attr		2508136	1					
ANR	2508286	ExpressionStatement	refs . insert ( fullName )	968:24:22019:22042	2508136	3	True				
ANR	2508287	CallExpression	refs . insert ( fullName )		2508136	0					
ANR	2508288	Callee	refs . insert		2508136	0					
ANR	2508289	MemberAccess	refs . insert		2508136	0					
ANR	2508290	Identifier	refs		2508136	0					
ANR	2508291	Identifier	insert		2508136	1					
ANR	2508292	ArgumentList	fullName		2508136	1					
ANR	2508293	Argument	fullName		2508136	0					
ANR	2508294	Identifier	fullName		2508136	0					
ANR	2508295	ReturnStatement	return true ;	969:24:22068:22079	2508136	4	True				
ANR	2508296	Identifier	true		2508136	0					
ANR	2508297	ElseStatement	else		2508136	0					
ANR	2508298	CompoundStatement		45:24:1668:1737	2508136	0					
ANR	2508299	IfStatement	if ( state . depth_remaining <= 0 )		2508136	0					
ANR	2508300	Condition	state . depth_remaining <= 0	971:28:22138:22163	2508136	0	True				
ANR	2508301	RelationalExpression	state . depth_remaining <= 0		2508136	0		<=			
ANR	2508302	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508303	Identifier	state		2508136	0					
ANR	2508304	Identifier	depth_remaining		2508136	1					
ANR	2508305	PrimaryExpression	0		2508136	1					
ANR	2508306	CompoundStatement		40:57:1524:1524	2508136	1					
ANR	2508307	ReturnStatement	return false ;	972:28:22197:22209	2508136	0	True				
ANR	2508308	Identifier	false		2508136	0					
ANR	2508309	ExpressionStatement	state . depth_remaining --	974:24:22261:22284	2508136	1	True				
ANR	2508310	PostIncDecOperationExpression	state . depth_remaining --		2508136	0					
ANR	2508311	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508312	Identifier	state		2508136	0					
ANR	2508313	Identifier	depth_remaining		2508136	1					
ANR	2508314	IncDec	--		2508136	1					
ANR	2508315	IdentifierDeclStatement	"bool ret = _GetExternalReferences ( tree , ad , state , refs , fullNames ) ;"	976:24:22311:22380	2508136	2	True				
ANR	2508316	IdentifierDecl	"ret = _GetExternalReferences ( tree , ad , state , refs , fullNames )"		2508136	0					
ANR	2508317	IdentifierDeclType	bool		2508136	0					
ANR	2508318	Identifier	ret		2508136	1					
ANR	2508319	AssignmentExpression	"ret = _GetExternalReferences ( tree , ad , state , refs , fullNames )"		2508136	2		=			
ANR	2508320	Identifier	ret		2508136	0					
ANR	2508321	CallExpression	"_GetExternalReferences ( tree , ad , state , refs , fullNames )"		2508136	1					
ANR	2508322	Callee	_GetExternalReferences		2508136	0					
ANR	2508323	Identifier	_GetExternalReferences		2508136	0					
ANR	2508324	ArgumentList	tree		2508136	1					
ANR	2508325	Argument	tree		2508136	0					
ANR	2508326	Identifier	tree		2508136	0					
ANR	2508327	Argument	ad		2508136	1					
ANR	2508328	Identifier	ad		2508136	0					
ANR	2508329	Argument	state		2508136	2					
ANR	2508330	Identifier	state		2508136	0					
ANR	2508331	Argument	refs		2508136	3					
ANR	2508332	Identifier	refs		2508136	0					
ANR	2508333	Argument	fullNames		2508136	4					
ANR	2508334	Identifier	fullNames		2508136	0					
ANR	2508335	ExpressionStatement	state . depth_remaining ++	978:24:22407:22430	2508136	3	True				
ANR	2508336	PostIncDecOperationExpression	state . depth_remaining ++		2508136	0					
ANR	2508337	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508338	Identifier	state		2508136	0					
ANR	2508339	Identifier	depth_remaining		2508136	1					
ANR	2508340	IncDec	++		2508136	1					
ANR	2508341	ReturnStatement	return ret ;	979:24:22456:22466	2508136	4	True				
ANR	2508342	Identifier	ret		2508136	0					
ANR	2508343	IfStatement	if ( ! val . IsClassAdValue ( start ) )		2508136	2					
ANR	2508344	Condition	! val . IsClassAdValue ( start )	984:20:22645:22672	2508136	0	True				
ANR	2508345	UnaryOperationExpression	! val . IsClassAdValue ( start )		2508136	0					
ANR	2508346	UnaryOperator	!		2508136	0					
ANR	2508347	CallExpression	val . IsClassAdValue ( start )		2508136	1					
ANR	2508348	Callee	val . IsClassAdValue		2508136	0					
ANR	2508349	MemberAccess	val . IsClassAdValue		2508136	0					
ANR	2508350	Identifier	val		2508136	0					
ANR	2508351	Identifier	IsClassAdValue		2508136	1					
ANR	2508352	ArgumentList	start		2508136	1					
ANR	2508353	Argument	start		2508136	0					
ANR	2508354	Identifier	start		2508136	0					
ANR	2508355	CompoundStatement		53:52:2034:2034	2508136	1					
ANR	2508356	ReturnStatement	return ( false ) ;	985:20:22699:22714	2508136	0	True				
ANR	2508357	Identifier	false		2508136	0					
ANR	2508358	IdentifierDeclStatement	const ClassAd * curAd = state . curAd ;	989:3:22791:22825	2508136	7	True				
ANR	2508359	IdentifierDecl	* curAd = state . curAd		2508136	0					
ANR	2508360	IdentifierDeclType	const ClassAd *		2508136	0					
ANR	2508361	Identifier	curAd		2508136	1					
ANR	2508362	AssignmentExpression	* curAd = state . curAd		2508136	2		=			
ANR	2508363	Identifier	curAd		2508136	0					
ANR	2508364	MemberAccess	state . curAd		2508136	1					
ANR	2508365	Identifier	state		2508136	0					
ANR	2508366	Identifier	curAd		2508136	1					
ANR	2508367	SwitchStatement	"switch ( start -> LookupInScope ( attr , result , state ) )"		2508136	8					
ANR	2508368	Condition	"start -> LookupInScope ( attr , result , state )"	990:20:22847:22889	2508136	0	True				
ANR	2508369	CallExpression	"start -> LookupInScope ( attr , result , state )"		2508136	0					
ANR	2508370	Callee	start -> LookupInScope		2508136	0					
ANR	2508371	PtrMemberAccess	start -> LookupInScope		2508136	0					
ANR	2508372	Identifier	start		2508136	0					
ANR	2508373	Identifier	LookupInScope		2508136	1					
ANR	2508374	ArgumentList	attr		2508136	1					
ANR	2508375	Argument	attr		2508136	0					
ANR	2508376	Identifier	attr		2508136	0					
ANR	2508377	Argument	result		2508136	1					
ANR	2508378	Identifier	result		2508136	0					
ANR	2508379	Argument	state		2508136	2					
ANR	2508380	Identifier	state		2508136	0					
ANR	2508381	CompoundStatement		59:66:2250:2250	2508136	1					
ANR	2508382	Label	case EVAL_ERROR :	991:16:22911:22926	2508136	0	True				
ANR	2508383	Identifier	EVAL_ERROR		2508136	0					
ANR	2508384	ReturnStatement	return ( false ) ;	993:20:22986:23001	2508136	1	True				
ANR	2508385	Identifier	false		2508136	0					
ANR	2508386	Label	case EVAL_UNDEF :	995:16:23020:23035	2508136	2	True				
ANR	2508387	Identifier	EVAL_UNDEF		2508136	0					
ANR	2508388	ExpressionStatement	refs . insert ( attr )	997:20:23101:23120	2508136	3	True				
ANR	2508389	CallExpression	refs . insert ( attr )		2508136	0					
ANR	2508390	Callee	refs . insert		2508136	0					
ANR	2508391	MemberAccess	refs . insert		2508136	0					
ANR	2508392	Identifier	refs		2508136	0					
ANR	2508393	Identifier	insert		2508136	1					
ANR	2508394	ArgumentList	attr		2508136	1					
ANR	2508395	Argument	attr		2508136	0					
ANR	2508396	Identifier	attr		2508136	0					
ANR	2508397	ExpressionStatement	state . curAd = curAd	998:5:23127:23146	2508136	4	True				
ANR	2508398	AssignmentExpression	state . curAd = curAd		2508136	0		=			
ANR	2508399	MemberAccess	state . curAd		2508136	0					
ANR	2508400	Identifier	state		2508136	0					
ANR	2508401	Identifier	curAd		2508136	1					
ANR	2508402	Identifier	curAd		2508136	1					
ANR	2508403	ReturnStatement	return ( true ) ;	999:20:23168:23182	2508136	5	True				
ANR	2508404	Identifier	true		2508136	0					
ANR	2508405	Label	case EVAL_OK :	1001:16:23201:23213	2508136	6	True				
ANR	2508406	Identifier	EVAL_OK		2508136	0					
ANR	2508407	CompoundStatement		78:20:2874:2938	2508136	7					
ANR	2508408	IfStatement	if ( state . depth_remaining <= 0 )		2508136	0					
ANR	2508409	Condition	state . depth_remaining <= 0	1003:24:23315:23340	2508136	0	True				
ANR	2508410	RelationalExpression	state . depth_remaining <= 0		2508136	0		<=			
ANR	2508411	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508412	Identifier	state		2508136	0					
ANR	2508413	Identifier	depth_remaining		2508136	1					
ANR	2508414	PrimaryExpression	0		2508136	1					
ANR	2508415	CompoundStatement		72:53:2701:2701	2508136	1					
ANR	2508416	ExpressionStatement	state . curAd = curAd	1004:24:23370:23389	2508136	0	True				
ANR	2508417	AssignmentExpression	state . curAd = curAd		2508136	0		=			
ANR	2508418	MemberAccess	state . curAd		2508136	0					
ANR	2508419	Identifier	state		2508136	0					
ANR	2508420	Identifier	curAd		2508136	1					
ANR	2508421	Identifier	curAd		2508136	1					
ANR	2508422	ReturnStatement	return false ;	1005:24:23415:23427	2508136	1	True				
ANR	2508423	Identifier	false		2508136	0					
ANR	2508424	ExpressionStatement	state . depth_remaining --	1007:20:23471:23494	2508136	1	True				
ANR	2508425	PostIncDecOperationExpression	state . depth_remaining --		2508136	0					
ANR	2508426	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508427	Identifier	state		2508136	0					
ANR	2508428	Identifier	depth_remaining		2508136	1					
ANR	2508429	IncDec	--		2508136	1					
ANR	2508430	IdentifierDeclStatement	"bool rval = _GetExternalReferences ( result , ad , state , refs , fullNames ) ;"	1009:20:23517:23581	2508136	2	True				
ANR	2508431	IdentifierDecl	"rval = _GetExternalReferences ( result , ad , state , refs , fullNames )"		2508136	0					
ANR	2508432	IdentifierDeclType	bool		2508136	0					
ANR	2508433	Identifier	rval		2508136	1					
ANR	2508434	AssignmentExpression	"rval = _GetExternalReferences ( result , ad , state , refs , fullNames )"		2508136	2		=			
ANR	2508435	Identifier	rval		2508136	0					
ANR	2508436	CallExpression	"_GetExternalReferences ( result , ad , state , refs , fullNames )"		2508136	1					
ANR	2508437	Callee	_GetExternalReferences		2508136	0					
ANR	2508438	Identifier	_GetExternalReferences		2508136	0					
ANR	2508439	ArgumentList	result		2508136	1					
ANR	2508440	Argument	result		2508136	0					
ANR	2508441	Identifier	result		2508136	0					
ANR	2508442	Argument	ad		2508136	1					
ANR	2508443	Identifier	ad		2508136	0					
ANR	2508444	Argument	state		2508136	2					
ANR	2508445	Identifier	state		2508136	0					
ANR	2508446	Argument	refs		2508136	3					
ANR	2508447	Identifier	refs		2508136	0					
ANR	2508448	Argument	fullNames		2508136	4					
ANR	2508449	Identifier	fullNames		2508136	0					
ANR	2508450	ExpressionStatement	state . depth_remaining ++	1011:20:23604:23627	2508136	3	True				
ANR	2508451	PostIncDecOperationExpression	state . depth_remaining ++		2508136	0					
ANR	2508452	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508453	Identifier	state		2508136	0					
ANR	2508454	Identifier	depth_remaining		2508136	1					
ANR	2508455	IncDec	++		2508136	1					
ANR	2508456	ExpressionStatement	state . curAd = curAd	1012:5:23634:23653	2508136	4	True				
ANR	2508457	AssignmentExpression	state . curAd = curAd		2508136	0		=			
ANR	2508458	MemberAccess	state . curAd		2508136	0					
ANR	2508459	Identifier	state		2508136	0					
ANR	2508460	Identifier	curAd		2508136	1					
ANR	2508461	Identifier	curAd		2508136	1					
ANR	2508462	ReturnStatement	return ( rval ) ;	1013:5:23660:23674	2508136	5	True				
ANR	2508463	Identifier	rval		2508136	0					
ANR	2508464	Label	default :	1016:16:23699:23706	2508136	8	True				
ANR	2508465	Identifier	default		2508136	0					
ANR	2508466	ReturnStatement	return ( false ) ;	1018:20:23765:23780	2508136	9	True				
ANR	2508467	Identifier	false		2508136	0					
ANR	2508468	Label	case OP_NODE :	1022:8:23827:23839	2508136	4	True				
ANR	2508469	Identifier	OP_NODE		2508136	0					
ANR	2508470	CompoundStatement		94:12:3285:3312	2508136	5					
ANR	2508471	IdentifierDeclStatement	Operation :: OpKind op ;	1024:12:23894:23914	2508136	0	True				
ANR	2508472	IdentifierDecl	op		2508136	0					
ANR	2508473	IdentifierDeclType	Operation :: OpKind		2508136	0					
ANR	2508474	Identifier	op		2508136	1					
ANR	2508475	IdentifierDeclStatement	"ExprTree * t1 , * t2 , * t3 ;"	1025:12:23928:23955	2508136	1	True				
ANR	2508476	IdentifierDecl	* t1		2508136	0					
ANR	2508477	IdentifierDeclType	ExprTree *		2508136	0					
ANR	2508478	Identifier	t1		2508136	1					
ANR	2508479	IdentifierDecl	* t2		2508136	1					
ANR	2508480	IdentifierDeclType	ExprTree *		2508136	0					
ANR	2508481	Identifier	t2		2508136	1					
ANR	2508482	IdentifierDecl	* t3		2508136	2					
ANR	2508483	IdentifierDeclType	ExprTree *		2508136	0					
ANR	2508484	Identifier	t3		2508136	1					
ANR	2508485	ExpressionStatement	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"	1026:12:23969:24026	2508136	2	True				
ANR	2508486	CallExpression	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"		2508136	0					
ANR	2508487	Callee	( ( const Operation * ) expr ) -> GetComponents		2508136	0					
ANR	2508488	PtrMemberAccess	( ( const Operation * ) expr ) -> GetComponents		2508136	0					
ANR	2508489	CastExpression	( const Operation * ) expr		2508136	0					
ANR	2508490	CastTarget	const Operation *		2508136	0					
ANR	2508491	Identifier	expr		2508136	1					
ANR	2508492	Identifier	GetComponents		2508136	1					
ANR	2508493	ArgumentList	op		2508136	1					
ANR	2508494	Argument	op		2508136	0					
ANR	2508495	Identifier	op		2508136	0					
ANR	2508496	Argument	t1		2508136	1					
ANR	2508497	Identifier	t1		2508136	0					
ANR	2508498	Argument	t2		2508136	2					
ANR	2508499	Identifier	t2		2508136	0					
ANR	2508500	Argument	t3		2508136	3					
ANR	2508501	Identifier	t3		2508136	0					
ANR	2508502	IfStatement	"if ( t1 && ! _GetExternalReferences ( t1 , ad , state , refs , fullNames ) )"		2508136	3					
ANR	2508503	Condition	"t1 && ! _GetExternalReferences ( t1 , ad , state , refs , fullNames )"	1027:16:24044:24106	2508136	0	True				
ANR	2508504	AndExpression	"t1 && ! _GetExternalReferences ( t1 , ad , state , refs , fullNames )"		2508136	0		&&			
ANR	2508505	Identifier	t1		2508136	0					
ANR	2508506	UnaryOperationExpression	"! _GetExternalReferences ( t1 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508507	UnaryOperator	!		2508136	0					
ANR	2508508	CallExpression	"_GetExternalReferences ( t1 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508509	Callee	_GetExternalReferences		2508136	0					
ANR	2508510	Identifier	_GetExternalReferences		2508136	0					
ANR	2508511	ArgumentList	t1		2508136	1					
ANR	2508512	Argument	t1		2508136	0					
ANR	2508513	Identifier	t1		2508136	0					
ANR	2508514	Argument	ad		2508136	1					
ANR	2508515	Identifier	ad		2508136	0					
ANR	2508516	Argument	state		2508136	2					
ANR	2508517	Identifier	state		2508136	0					
ANR	2508518	Argument	refs		2508136	3					
ANR	2508519	Identifier	refs		2508136	0					
ANR	2508520	Argument	fullNames		2508136	4					
ANR	2508521	Identifier	fullNames		2508136	0					
ANR	2508522	CompoundStatement		96:82:3467:3467	2508136	1					
ANR	2508523	ReturnStatement	return ( false ) ;	1028:16:24128:24143	2508136	0	True				
ANR	2508524	Identifier	false		2508136	0					
ANR	2508525	IfStatement	"if ( t2 && ! _GetExternalReferences ( t2 , ad , state , refs , fullNames ) )"		2508136	4					
ANR	2508526	Condition	"t2 && ! _GetExternalReferences ( t2 , ad , state , refs , fullNames )"	1030:16:24175:24237	2508136	0	True				
ANR	2508527	AndExpression	"t2 && ! _GetExternalReferences ( t2 , ad , state , refs , fullNames )"		2508136	0		&&			
ANR	2508528	Identifier	t2		2508136	0					
ANR	2508529	UnaryOperationExpression	"! _GetExternalReferences ( t2 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508530	UnaryOperator	!		2508136	0					
ANR	2508531	CallExpression	"_GetExternalReferences ( t2 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508532	Callee	_GetExternalReferences		2508136	0					
ANR	2508533	Identifier	_GetExternalReferences		2508136	0					
ANR	2508534	ArgumentList	t2		2508136	1					
ANR	2508535	Argument	t2		2508136	0					
ANR	2508536	Identifier	t2		2508136	0					
ANR	2508537	Argument	ad		2508136	1					
ANR	2508538	Identifier	ad		2508136	0					
ANR	2508539	Argument	state		2508136	2					
ANR	2508540	Identifier	state		2508136	0					
ANR	2508541	Argument	refs		2508136	3					
ANR	2508542	Identifier	refs		2508136	0					
ANR	2508543	Argument	fullNames		2508136	4					
ANR	2508544	Identifier	fullNames		2508136	0					
ANR	2508545	CompoundStatement		99:82:3598:3598	2508136	1					
ANR	2508546	ReturnStatement	return ( false ) ;	1031:16:24259:24274	2508136	0	True				
ANR	2508547	Identifier	false		2508136	0					
ANR	2508548	IfStatement	"if ( t3 && ! _GetExternalReferences ( t3 , ad , state , refs , fullNames ) )"		2508136	5					
ANR	2508549	Condition	"t3 && ! _GetExternalReferences ( t3 , ad , state , refs , fullNames )"	1033:16:24306:24368	2508136	0	True				
ANR	2508550	AndExpression	"t3 && ! _GetExternalReferences ( t3 , ad , state , refs , fullNames )"		2508136	0		&&			
ANR	2508551	Identifier	t3		2508136	0					
ANR	2508552	UnaryOperationExpression	"! _GetExternalReferences ( t3 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508553	UnaryOperator	!		2508136	0					
ANR	2508554	CallExpression	"_GetExternalReferences ( t3 , ad , state , refs , fullNames )"		2508136	1					
ANR	2508555	Callee	_GetExternalReferences		2508136	0					
ANR	2508556	Identifier	_GetExternalReferences		2508136	0					
ANR	2508557	ArgumentList	t3		2508136	1					
ANR	2508558	Argument	t3		2508136	0					
ANR	2508559	Identifier	t3		2508136	0					
ANR	2508560	Argument	ad		2508136	1					
ANR	2508561	Identifier	ad		2508136	0					
ANR	2508562	Argument	state		2508136	2					
ANR	2508563	Identifier	state		2508136	0					
ANR	2508564	Argument	refs		2508136	3					
ANR	2508565	Identifier	refs		2508136	0					
ANR	2508566	Argument	fullNames		2508136	4					
ANR	2508567	Identifier	fullNames		2508136	0					
ANR	2508568	CompoundStatement		102:82:3729:3729	2508136	1					
ANR	2508569	ReturnStatement	return ( false ) ;	1034:16:24390:24405	2508136	0	True				
ANR	2508570	Identifier	false		2508136	0					
ANR	2508571	ReturnStatement	return ( true ) ;	1036:12:24433:24447	2508136	6	True				
ANR	2508572	Identifier	true		2508136	0					
ANR	2508573	Label	case FN_CALL_NODE :	1039:8:24468:24485	2508136	6	True				
ANR	2508574	Identifier	FN_CALL_NODE		2508136	0					
ANR	2508575	CompoundStatement		112:12:3991:4022	2508136	7					
ANR	2508576	IdentifierDeclStatement	string fnName ;	1041:12:24540:24574	2508136	0	True				
ANR	2508577	IdentifierDecl	fnName		2508136	0					
ANR	2508578	IdentifierDeclType	string		2508136	0					
ANR	2508579	Identifier	fnName		2508136	1					
ANR	2508580	IdentifierDeclStatement	vector < ExprTree * > args ;	1042:12:24588:24620	2508136	1	True				
ANR	2508581	IdentifierDecl	args		2508136	0					
ANR	2508582	IdentifierDeclType	vector < ExprTree * >		2508136	0					
ANR	2508583	Identifier	args		2508136	1					
ANR	2508584	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1043:12:24634:24665	2508136	2	True				
ANR	2508585	IdentifierDecl	itr		2508136	0					
ANR	2508586	IdentifierDeclType	vector < ExprTree * > :: iterator		2508136	0					
ANR	2508587	Identifier	itr		2508136	1					
ANR	2508588	ExpressionStatement	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"	1045:12:24680:24738	2508136	3	True				
ANR	2508589	CallExpression	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"		2508136	0					
ANR	2508590	Callee	( ( const FunctionCall * ) expr ) -> GetComponents		2508136	0					
ANR	2508591	PtrMemberAccess	( ( const FunctionCall * ) expr ) -> GetComponents		2508136	0					
ANR	2508592	CastExpression	( const FunctionCall * ) expr		2508136	0					
ANR	2508593	CastTarget	const FunctionCall *		2508136	0					
ANR	2508594	Identifier	expr		2508136	1					
ANR	2508595	Identifier	GetComponents		2508136	1					
ANR	2508596	ArgumentList	fnName		2508136	1					
ANR	2508597	Argument	fnName		2508136	0					
ANR	2508598	Identifier	fnName		2508136	0					
ANR	2508599	Argument	args		2508136	1					
ANR	2508600	Identifier	args		2508136	0					
ANR	2508601	ForStatement	for ( itr = args . begin ( ) ; itr != args . end ( ) ; itr ++ )		2508136	4					
ANR	2508602	ForInit	itr = args . begin ( ) ;	1046:17:24757:24776	2508136	0	True				
ANR	2508603	AssignmentExpression	itr = args . begin ( )		2508136	0		=			
ANR	2508604	Identifier	itr		2508136	0					
ANR	2508605	CallExpression	args . begin ( )		2508136	1					
ANR	2508606	Callee	args . begin		2508136	0					
ANR	2508607	MemberAccess	args . begin		2508136	0					
ANR	2508608	Identifier	args		2508136	0					
ANR	2508609	Identifier	begin		2508136	1					
ANR	2508610	ArgumentList			2508136	1					
ANR	2508611	Condition	itr != args . end ( )	1046:38:24778:24795	2508136	1	True				
ANR	2508612	EqualityExpression	itr != args . end ( )		2508136	0		!=			
ANR	2508613	Identifier	itr		2508136	0					
ANR	2508614	CallExpression	args . end ( )		2508136	1					
ANR	2508615	Callee	args . end		2508136	0					
ANR	2508616	MemberAccess	args . end		2508136	0					
ANR	2508617	Identifier	args		2508136	0					
ANR	2508618	Identifier	end		2508136	1					
ANR	2508619	ArgumentList			2508136	1					
ANR	2508620	PostIncDecOperationExpression	itr ++	1046:58:24798:24802	2508136	2	True				
ANR	2508621	Identifier	itr		2508136	0					
ANR	2508622	IncDec	++		2508136	1					
ANR	2508623	CompoundStatement		115:66:4163:4163	2508136	3					
ANR	2508624	IfStatement	"if ( ! _GetExternalReferences ( * itr , ad , state , refs , fullNames ) )"		2508136	0					
ANR	2508625	Condition	"! _GetExternalReferences ( * itr , ad , state , refs , fullNames )"	1047:20:24828:24886	2508136	0	True				
ANR	2508626	UnaryOperationExpression	"! _GetExternalReferences ( * itr , ad , state , refs , fullNames )"		2508136	0					
ANR	2508627	UnaryOperator	!		2508136	0					
ANR	2508628	CallExpression	"_GetExternalReferences ( * itr , ad , state , refs , fullNames )"		2508136	1					
ANR	2508629	Callee	_GetExternalReferences		2508136	0					
ANR	2508630	Identifier	_GetExternalReferences		2508136	0					
ANR	2508631	ArgumentList	* itr		2508136	1					
ANR	2508632	Argument	* itr		2508136	0					
ANR	2508633	UnaryOperationExpression	* itr		2508136	0					
ANR	2508634	UnaryOperator	*		2508136	0					
ANR	2508635	Identifier	itr		2508136	1					
ANR	2508636	Argument	ad		2508136	1					
ANR	2508637	Identifier	ad		2508136	0					
ANR	2508638	Argument	state		2508136	2					
ANR	2508639	Identifier	state		2508136	0					
ANR	2508640	Argument	refs		2508136	3					
ANR	2508641	Identifier	refs		2508136	0					
ANR	2508642	Argument	fullNames		2508136	4					
ANR	2508643	Identifier	fullNames		2508136	0					
ANR	2508644	CompoundStatement		116:82:4247:4247	2508136	1					
ANR	2508645	ReturnStatement	return ( false ) ;	1048:5:24897:24912	2508136	0	True				
ANR	2508646	Identifier	false		2508136	0					
ANR	2508647	ReturnStatement	return ( true ) ;	1051:12:24946:24960	2508136	5	True				
ANR	2508648	Identifier	true		2508136	0					
ANR	2508649	Label	case CLASSAD_NODE :	1055:8:24982:24999	2508136	8	True				
ANR	2508650	Identifier	CLASSAD_NODE		2508136	0					
ANR	2508651	CompoundStatement		127:12:4474:4521	2508136	9					
ANR	2508652	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > attrs ;"	1057:12:25054:25103	2508136	0	True				
ANR	2508653	IdentifierDecl	attrs		2508136	0					
ANR	2508654	IdentifierDeclType	"vector < pair < string , ExprTree * > >"		2508136	0					
ANR	2508655	Identifier	attrs		2508136	1					
ANR	2508656	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > :: iterator itr ;"	1058:12:25117:25164	2508136	1	True				
ANR	2508657	IdentifierDecl	itr		2508136	0					
ANR	2508658	IdentifierDeclType	"vector < pair < string , ExprTree * > > :: iterator"		2508136	0					
ANR	2508659	Identifier	itr		2508136	1					
ANR	2508660	ExpressionStatement	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )	1060:12:25179:25225	2508136	2	True				
ANR	2508661	CallExpression	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )		2508136	0					
ANR	2508662	Callee	( ( const ClassAd * ) expr ) -> GetComponents		2508136	0					
ANR	2508663	PtrMemberAccess	( ( const ClassAd * ) expr ) -> GetComponents		2508136	0					
ANR	2508664	CastExpression	( const ClassAd * ) expr		2508136	0					
ANR	2508665	CastTarget	const ClassAd *		2508136	0					
ANR	2508666	Identifier	expr		2508136	1					
ANR	2508667	Identifier	GetComponents		2508136	1					
ANR	2508668	ArgumentList	attrs		2508136	1					
ANR	2508669	Argument	attrs		2508136	0					
ANR	2508670	Identifier	attrs		2508136	0					
ANR	2508671	ForStatement	for ( itr = attrs . begin ( ) ; itr != attrs . end ( ) ; itr ++ )		2508136	3					
ANR	2508672	ForInit	itr = attrs . begin ( ) ;	1061:17:25244:25264	2508136	0	True				
ANR	2508673	AssignmentExpression	itr = attrs . begin ( )		2508136	0		=			
ANR	2508674	Identifier	itr		2508136	0					
ANR	2508675	CallExpression	attrs . begin ( )		2508136	1					
ANR	2508676	Callee	attrs . begin		2508136	0					
ANR	2508677	MemberAccess	attrs . begin		2508136	0					
ANR	2508678	Identifier	attrs		2508136	0					
ANR	2508679	Identifier	begin		2508136	1					
ANR	2508680	ArgumentList			2508136	1					
ANR	2508681	Condition	itr != attrs . end ( )	1061:39:25266:25284	2508136	1	True				
ANR	2508682	EqualityExpression	itr != attrs . end ( )		2508136	0		!=			
ANR	2508683	Identifier	itr		2508136	0					
ANR	2508684	CallExpression	attrs . end ( )		2508136	1					
ANR	2508685	Callee	attrs . end		2508136	0					
ANR	2508686	MemberAccess	attrs . end		2508136	0					
ANR	2508687	Identifier	attrs		2508136	0					
ANR	2508688	Identifier	end		2508136	1					
ANR	2508689	ArgumentList			2508136	1					
ANR	2508690	PostIncDecOperationExpression	itr ++	1061:60:25287:25291	2508136	2	True				
ANR	2508691	Identifier	itr		2508136	0					
ANR	2508692	IncDec	++		2508136	1					
ANR	2508693	CompoundStatement		136:16:4815:4891	2508136	3					
ANR	2508694	IfStatement	if ( state . depth_remaining <= 0 )		2508136	0					
ANR	2508695	Condition	state . depth_remaining <= 0	1062:20:25317:25342	2508136	0	True				
ANR	2508696	RelationalExpression	state . depth_remaining <= 0		2508136	0		<=			
ANR	2508697	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508698	Identifier	state		2508136	0					
ANR	2508699	Identifier	depth_remaining		2508136	1					
ANR	2508700	PrimaryExpression	0		2508136	1					
ANR	2508701	CompoundStatement		131:49:4703:4703	2508136	1					
ANR	2508702	ReturnStatement	return false ;	1063:20:25368:25380	2508136	0	True				
ANR	2508703	Identifier	false		2508136	0					
ANR	2508704	ExpressionStatement	state . depth_remaining --	1065:16:25416:25439	2508136	1	True				
ANR	2508705	PostIncDecOperationExpression	state . depth_remaining --		2508136	0					
ANR	2508706	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508707	Identifier	state		2508136	0					
ANR	2508708	Identifier	depth_remaining		2508136	1					
ANR	2508709	IncDec	--		2508136	1					
ANR	2508710	IdentifierDeclStatement	"bool ret = _GetExternalReferences ( itr -> second , ad , state , refs , fullNames ) ;"	1067:16:25458:25534	2508136	2	True				
ANR	2508711	IdentifierDecl	"ret = _GetExternalReferences ( itr -> second , ad , state , refs , fullNames )"		2508136	0					
ANR	2508712	IdentifierDeclType	bool		2508136	0					
ANR	2508713	Identifier	ret		2508136	1					
ANR	2508714	AssignmentExpression	"ret = _GetExternalReferences ( itr -> second , ad , state , refs , fullNames )"		2508136	2		=			
ANR	2508715	Identifier	ret		2508136	0					
ANR	2508716	CallExpression	"_GetExternalReferences ( itr -> second , ad , state , refs , fullNames )"		2508136	1					
ANR	2508717	Callee	_GetExternalReferences		2508136	0					
ANR	2508718	Identifier	_GetExternalReferences		2508136	0					
ANR	2508719	ArgumentList	itr -> second		2508136	1					
ANR	2508720	Argument	itr -> second		2508136	0					
ANR	2508721	PtrMemberAccess	itr -> second		2508136	0					
ANR	2508722	Identifier	itr		2508136	0					
ANR	2508723	Identifier	second		2508136	1					
ANR	2508724	Argument	ad		2508136	1					
ANR	2508725	Identifier	ad		2508136	0					
ANR	2508726	Argument	state		2508136	2					
ANR	2508727	Identifier	state		2508136	0					
ANR	2508728	Argument	refs		2508136	3					
ANR	2508729	Identifier	refs		2508136	0					
ANR	2508730	Argument	fullNames		2508136	4					
ANR	2508731	Identifier	fullNames		2508136	0					
ANR	2508732	ExpressionStatement	state . depth_remaining ++	1069:16:25553:25576	2508136	3	True				
ANR	2508733	PostIncDecOperationExpression	state . depth_remaining ++		2508136	0					
ANR	2508734	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508735	Identifier	state		2508136	0					
ANR	2508736	Identifier	depth_remaining		2508136	1					
ANR	2508737	IncDec	++		2508136	1					
ANR	2508738	IfStatement	if ( ! ret )		2508136	4					
ANR	2508739	Condition	! ret	1070:20:25598:25601	2508136	0	True				
ANR	2508740	UnaryOperationExpression	! ret		2508136	0					
ANR	2508741	UnaryOperator	!		2508136	0					
ANR	2508742	Identifier	ret		2508136	1					
ANR	2508743	CompoundStatement		139:27:4962:4962	2508136	1					
ANR	2508744	ReturnStatement	return ( false ) ;	1071:5:25612:25627	2508136	0	True				
ANR	2508745	Identifier	false		2508136	0					
ANR	2508746	ReturnStatement	return ( true ) ;	1074:12:25661:25675	2508136	4	True				
ANR	2508747	Identifier	true		2508136	0					
ANR	2508748	Label	case EXPR_LIST_NODE :	1078:8:25697:25716	2508136	10	True				
ANR	2508749	Identifier	EXPR_LIST_NODE		2508136	0					
ANR	2508750	CompoundStatement		150:12:5175:5206	2508136	11					
ANR	2508751	IdentifierDeclStatement	vector < ExprTree * > exprs ;	1080:12:25771:25804	2508136	0	True				
ANR	2508752	IdentifierDecl	exprs		2508136	0					
ANR	2508753	IdentifierDeclType	vector < ExprTree * >		2508136	0					
ANR	2508754	Identifier	exprs		2508136	1					
ANR	2508755	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1081:12:25818:25849	2508136	1	True				
ANR	2508756	IdentifierDecl	itr		2508136	0					
ANR	2508757	IdentifierDeclType	vector < ExprTree * > :: iterator		2508136	0					
ANR	2508758	Identifier	itr		2508136	1					
ANR	2508759	ExpressionStatement	( ( const ExprList * ) expr ) -> GetComponents ( exprs )	1083:12:25864:25911	2508136	2	True				
ANR	2508760	CallExpression	( ( const ExprList * ) expr ) -> GetComponents ( exprs )		2508136	0					
ANR	2508761	Callee	( ( const ExprList * ) expr ) -> GetComponents		2508136	0					
ANR	2508762	PtrMemberAccess	( ( const ExprList * ) expr ) -> GetComponents		2508136	0					
ANR	2508763	CastExpression	( const ExprList * ) expr		2508136	0					
ANR	2508764	CastTarget	const ExprList *		2508136	0					
ANR	2508765	Identifier	expr		2508136	1					
ANR	2508766	Identifier	GetComponents		2508136	1					
ANR	2508767	ArgumentList	exprs		2508136	1					
ANR	2508768	Argument	exprs		2508136	0					
ANR	2508769	Identifier	exprs		2508136	0					
ANR	2508770	ForStatement	for ( itr = exprs . begin ( ) ; itr != exprs . end ( ) ; itr ++ )		2508136	3					
ANR	2508771	ForInit	itr = exprs . begin ( ) ;	1084:17:25930:25950	2508136	0	True				
ANR	2508772	AssignmentExpression	itr = exprs . begin ( )		2508136	0		=			
ANR	2508773	Identifier	itr		2508136	0					
ANR	2508774	CallExpression	exprs . begin ( )		2508136	1					
ANR	2508775	Callee	exprs . begin		2508136	0					
ANR	2508776	MemberAccess	exprs . begin		2508136	0					
ANR	2508777	Identifier	exprs		2508136	0					
ANR	2508778	Identifier	begin		2508136	1					
ANR	2508779	ArgumentList			2508136	1					
ANR	2508780	Condition	itr != exprs . end ( )	1084:39:25952:25970	2508136	1	True				
ANR	2508781	EqualityExpression	itr != exprs . end ( )		2508136	0		!=			
ANR	2508782	Identifier	itr		2508136	0					
ANR	2508783	CallExpression	exprs . end ( )		2508136	1					
ANR	2508784	Callee	exprs . end		2508136	0					
ANR	2508785	MemberAccess	exprs . end		2508136	0					
ANR	2508786	Identifier	exprs		2508136	0					
ANR	2508787	Identifier	end		2508136	1					
ANR	2508788	ArgumentList			2508136	1					
ANR	2508789	PostIncDecOperationExpression	itr ++	1084:60:25973:25977	2508136	2	True				
ANR	2508790	Identifier	itr		2508136	0					
ANR	2508791	IncDec	++		2508136	1					
ANR	2508792	CompoundStatement		159:16:5501:5570	2508136	3					
ANR	2508793	IfStatement	if ( state . depth_remaining <= 0 )		2508136	0					
ANR	2508794	Condition	state . depth_remaining <= 0	1085:20:26003:26028	2508136	0	True				
ANR	2508795	RelationalExpression	state . depth_remaining <= 0		2508136	0		<=			
ANR	2508796	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508797	Identifier	state		2508136	0					
ANR	2508798	Identifier	depth_remaining		2508136	1					
ANR	2508799	PrimaryExpression	0		2508136	1					
ANR	2508800	CompoundStatement		154:49:5389:5389	2508136	1					
ANR	2508801	ReturnStatement	return false ;	1086:20:26054:26066	2508136	0	True				
ANR	2508802	Identifier	false		2508136	0					
ANR	2508803	ExpressionStatement	state . depth_remaining --	1088:16:26102:26125	2508136	1	True				
ANR	2508804	PostIncDecOperationExpression	state . depth_remaining --		2508136	0					
ANR	2508805	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508806	Identifier	state		2508136	0					
ANR	2508807	Identifier	depth_remaining		2508136	1					
ANR	2508808	IncDec	--		2508136	1					
ANR	2508809	IdentifierDeclStatement	"bool ret = _GetExternalReferences ( * itr , ad , state , refs , fullNames ) ;"	1090:16:26144:26213	2508136	2	True				
ANR	2508810	IdentifierDecl	"ret = _GetExternalReferences ( * itr , ad , state , refs , fullNames )"		2508136	0					
ANR	2508811	IdentifierDeclType	bool		2508136	0					
ANR	2508812	Identifier	ret		2508136	1					
ANR	2508813	AssignmentExpression	"ret = _GetExternalReferences ( * itr , ad , state , refs , fullNames )"		2508136	2		=			
ANR	2508814	Identifier	ret		2508136	0					
ANR	2508815	CallExpression	"_GetExternalReferences ( * itr , ad , state , refs , fullNames )"		2508136	1					
ANR	2508816	Callee	_GetExternalReferences		2508136	0					
ANR	2508817	Identifier	_GetExternalReferences		2508136	0					
ANR	2508818	ArgumentList	* itr		2508136	1					
ANR	2508819	Argument	* itr		2508136	0					
ANR	2508820	UnaryOperationExpression	* itr		2508136	0					
ANR	2508821	UnaryOperator	*		2508136	0					
ANR	2508822	Identifier	itr		2508136	1					
ANR	2508823	Argument	ad		2508136	1					
ANR	2508824	Identifier	ad		2508136	0					
ANR	2508825	Argument	state		2508136	2					
ANR	2508826	Identifier	state		2508136	0					
ANR	2508827	Argument	refs		2508136	3					
ANR	2508828	Identifier	refs		2508136	0					
ANR	2508829	Argument	fullNames		2508136	4					
ANR	2508830	Identifier	fullNames		2508136	0					
ANR	2508831	ExpressionStatement	state . depth_remaining ++	1092:16:26232:26255	2508136	3	True				
ANR	2508832	PostIncDecOperationExpression	state . depth_remaining ++		2508136	0					
ANR	2508833	MemberAccess	state . depth_remaining		2508136	0					
ANR	2508834	Identifier	state		2508136	0					
ANR	2508835	Identifier	depth_remaining		2508136	1					
ANR	2508836	IncDec	++		2508136	1					
ANR	2508837	IfStatement	if ( ! ret )		2508136	4					
ANR	2508838	Condition	! ret	1093:20:26277:26280	2508136	0	True				
ANR	2508839	UnaryOperationExpression	! ret		2508136	0					
ANR	2508840	UnaryOperator	!		2508136	0					
ANR	2508841	Identifier	ret		2508136	1					
ANR	2508842	CompoundStatement		162:27:5641:5641	2508136	1					
ANR	2508843	ReturnStatement	return ( false ) ;	1094:5:26291:26306	2508136	0	True				
ANR	2508844	Identifier	false		2508136	0					
ANR	2508845	ReturnStatement	return ( true ) ;	1097:12:26340:26354	2508136	4	True				
ANR	2508846	Identifier	true		2508136	0					
ANR	2508847	Label	default :	1101:8:26376:26383	2508136	12	True				
ANR	2508848	Identifier	default		2508136	0					
ANR	2508849	ReturnStatement	return false ;	1102:12:26397:26409	2508136	13	True				
ANR	2508850	Identifier	false		2508136	0					
ANR	2508851	ReturnType	bool		2508136	1					
ANR	2508852	Identifier	ClassAd :: _GetExternalReferences		2508136	2					
ANR	2508853	ParameterList	"const ExprTree * expr , ClassAd * ad , EvalState & state , References & refs , bool fullNames"		2508136	3					
ANR	2508854	Parameter	const ExprTree * expr	930:24:20552:20571	2508136	0	True				
ANR	2508855	ParameterType	const ExprTree *		2508136	0					
ANR	2508856	Identifier	expr		2508136	1					
ANR	2508857	Parameter	ClassAd * ad	930:46:20574:20584	2508136	1	True				
ANR	2508858	ParameterType	ClassAd *		2508136	0					
ANR	2508859	Identifier	ad		2508136	1					
ANR	2508860	Parameter	EvalState & state	931:1:20589:20604	2508136	2	True				
ANR	2508861	ParameterType	EvalState &		2508136	0					
ANR	2508862	Identifier	state		2508136	1					
ANR	2508863	Parameter	References & refs	931:19:20607:20622	2508136	3	True				
ANR	2508864	ParameterType	References &		2508136	0					
ANR	2508865	Identifier	refs		2508136	1					
ANR	2508866	Parameter	bool fullNames	931:37:20625:20638	2508136	4	True				
ANR	2508867	ParameterType	bool		2508136	0					
ANR	2508868	Identifier	fullNames		2508136	1					
ANR	2508869	CFGEntryNode	ENTRY		2508136		True				
ANR	2508870	CFGExitNode	EXIT		2508136		True				
ANR	2508871	Symbol	* start		2508136						
ANR	2508872	Symbol	state . rootAd		2508136						
ANR	2508873	Symbol	result		2508136						
ANR	2508874	Symbol	state . curAd		2508136						
ANR	2508875	Symbol	args . begin		2508136						
ANR	2508876	Symbol	state . depth_remaining		2508136						
ANR	2508877	Symbol	attrs . begin		2508136						
ANR	2508878	Symbol	val . IsClassAdValue		2508136						
ANR	2508879	Symbol	exprs		2508136						
ANR	2508880	Symbol	exprs . end		2508136						
ANR	2508881	Symbol	expr		2508136						
ANR	2508882	Symbol	rval		2508136						
ANR	2508883	Symbol	state		2508136						
ANR	2508884	Symbol	attr		2508136						
ANR	2508885	Symbol	start -> LookupInScope		2508136						
ANR	2508886	Symbol	exprs . begin		2508136						
ANR	2508887	Symbol	itr -> second		2508136						
ANR	2508888	Symbol	val		2508136						
ANR	2508889	Symbol	ret		2508136						
ANR	2508890	Symbol	args . end		2508136						
ANR	2508891	Symbol	expr -> GetKind		2508136						
ANR	2508892	Symbol	op		2508136						
ANR	2508893	Symbol	ad		2508136						
ANR	2508894	Symbol	NULL		2508136						
ANR	2508895	Symbol	_GetExternalReferences		2508136						
ANR	2508896	Symbol	itr		2508136						
ANR	2508897	Symbol	start		2508136						
ANR	2508898	Symbol	tree		2508136						
ANR	2508899	Symbol	false		2508136						
ANR	2508900	Symbol	fullName		2508136						
ANR	2508901	Symbol	fullNames		2508136						
ANR	2508902	Symbol	curAd		2508136						
ANR	2508903	Symbol	val . IsUndefinedValue		2508136						
ANR	2508904	Symbol	* itr		2508136						
ANR	2508905	Symbol	attrs		2508136						
ANR	2508906	Symbol	* tree		2508136						
ANR	2508907	Symbol	args		2508136						
ANR	2508908	Symbol	fnName		2508136						
ANR	2508909	Symbol	abs		2508136						
ANR	2508910	Symbol	refs		2508136						
ANR	2508911	Symbol	* expr		2508136						
ANR	2508912	Symbol	true		2508136						
ANR	2508913	Symbol	tree -> Evaluate		2508136						
ANR	2508914	Symbol	unparser		2508136						
ANR	2508915	Symbol	attrs . end		2508136						
ANR	2508916	Symbol	t1		2508136						
ANR	2508917	Symbol	t2		2508136						
ANR	2508918	Symbol	t3		2508136						
ANR	2508919	Function	ClassAd :: GetExternalReferences	1106:0:26420:26709							
ANR	2508920	FunctionDef	"ClassAd :: GetExternalReferences (const ExprTree * tree , PortReferences & refs)"		2508919	0					
ANR	2508921	CompoundStatement		1108:0:26503:26709	2508919	0					
ANR	2508922	IdentifierDeclStatement	EvalState state ;	1109:4:26509:26530	2508919	0	True				
ANR	2508923	IdentifierDecl	state		2508919	0					
ANR	2508924	IdentifierDeclType	EvalState		2508919	0					
ANR	2508925	Identifier	state		2508919	1					
ANR	2508926	ExpressionStatement	state . rootAd = this	1111:4:26537:26556	2508919	1	True				
ANR	2508927	AssignmentExpression	state . rootAd = this		2508919	0		=			
ANR	2508928	MemberAccess	state . rootAd		2508919	0					
ANR	2508929	Identifier	state		2508919	0					
ANR	2508930	Identifier	rootAd		2508919	1					
ANR	2508931	Identifier	this		2508919	1					
ANR	2508932	ExpressionStatement	state . curAd = tree -> GetParentScope ( )	1112:4:26563:26600	2508919	2	True				
ANR	2508933	AssignmentExpression	state . curAd = tree -> GetParentScope ( )		2508919	0		=			
ANR	2508934	MemberAccess	state . curAd		2508919	0					
ANR	2508935	Identifier	state		2508919	0					
ANR	2508936	Identifier	curAd		2508919	1					
ANR	2508937	CallExpression	tree -> GetParentScope ( )		2508919	1					
ANR	2508938	Callee	tree -> GetParentScope		2508919	0					
ANR	2508939	PtrMemberAccess	tree -> GetParentScope		2508919	0					
ANR	2508940	Identifier	tree		2508919	0					
ANR	2508941	Identifier	GetParentScope		2508919	1					
ANR	2508942	ArgumentList			2508919	1					
ANR	2508943	IfStatement	if ( ! state . curAd )		2508919	3					
ANR	2508944	Condition	! state . curAd	1113:5:26607:26618	2508919	0	True				
ANR	2508945	UnaryOperationExpression	! state . curAd		2508919	0					
ANR	2508946	UnaryOperator	!		2508919	0					
ANR	2508947	MemberAccess	state . curAd		2508919	1					
ANR	2508948	Identifier	state		2508919	0					
ANR	2508949	Identifier	curAd		2508919	1					
ANR	2508950	ExpressionStatement	state . curAd = this	1113:20:26622:26640	2508919	1	True				
ANR	2508951	AssignmentExpression	state . curAd = this		2508919	0		=			
ANR	2508952	MemberAccess	state . curAd		2508919	0					
ANR	2508953	Identifier	state		2508919	0					
ANR	2508954	Identifier	curAd		2508919	1					
ANR	2508955	Identifier	this		2508919	1					
ANR	2508956	ReturnStatement	"return ( _GetExternalReferences ( tree , this , state , refs ) ) ;"	1115:4:26648:26707	2508919	4	True				
ANR	2508957	CallExpression	"_GetExternalReferences ( tree , this , state , refs )"		2508919	0					
ANR	2508958	Callee	_GetExternalReferences		2508919	0					
ANR	2508959	Identifier	_GetExternalReferences		2508919	0					
ANR	2508960	ArgumentList	tree		2508919	1					
ANR	2508961	Argument	tree		2508919	0					
ANR	2508962	Identifier	tree		2508919	0					
ANR	2508963	Argument	this		2508919	1					
ANR	2508964	Identifier	this		2508919	0					
ANR	2508965	Argument	state		2508919	2					
ANR	2508966	Identifier	state		2508919	0					
ANR	2508967	Argument	refs		2508919	3					
ANR	2508968	Identifier	refs		2508919	0					
ANR	2508969	ReturnType	bool		2508919	1					
ANR	2508970	Identifier	ClassAd :: GetExternalReferences		2508919	2					
ANR	2508971	ParameterList	"const ExprTree * tree , PortReferences & refs"		2508919	3					
ANR	2508972	Parameter	const ExprTree * tree	1107:23:26458:26477	2508919	0	True				
ANR	2508973	ParameterType	const ExprTree *		2508919	0					
ANR	2508974	Identifier	tree		2508919	1					
ANR	2508975	Parameter	PortReferences & refs	1107:45:26480:26499	2508919	1	True				
ANR	2508976	ParameterType	PortReferences &		2508919	0					
ANR	2508977	Identifier	refs		2508919	1					
ANR	2508978	CFGEntryNode	ENTRY		2508919		True				
ANR	2508979	CFGExitNode	EXIT		2508919		True				
ANR	2508980	Symbol	* tree		2508919						
ANR	2508981	Symbol	state . curAd		2508919						
ANR	2508982	Symbol	tree -> GetParentScope		2508919						
ANR	2508983	Symbol	refs		2508919						
ANR	2508984	Symbol	_GetExternalReferences		2508919						
ANR	2508985	Symbol	tree		2508919						
ANR	2508986	Symbol	state . rootAd		2508919						
ANR	2508987	Symbol	this		2508919						
ANR	2508988	Symbol	state		2508919						
ANR	2508989	Function	ClassAd :: _GetExternalReferences	1118:0:26712:31187							
ANR	2508990	FunctionDef	"ClassAd :: _GetExternalReferences (const ExprTree * expr , ClassAd * ad , EvalState & state , PortReferences & refs)"		2508989	0					
ANR	2508991	CompoundStatement		1121:0:26829:31187	2508989	0					
ANR	2508992	SwitchStatement	switch ( expr -> GetKind ( ) )		2508989	0					
ANR	2508993	Condition	expr -> GetKind ( )	1122:12:26843:26858	2508989	0	True				
ANR	2508994	CallExpression	expr -> GetKind ( )		2508989	0					
ANR	2508995	Callee	expr -> GetKind		2508989	0					
ANR	2508996	PtrMemberAccess	expr -> GetKind		2508989	0					
ANR	2508997	Identifier	expr		2508989	0					
ANR	2508998	Identifier	GetKind		2508989	1					
ANR	2508999	ArgumentList			2508989	1					
ANR	2509000	CompoundStatement		2:31:32:32	2508989	1					
ANR	2509001	Label	case LITERAL_NODE :	1123:8:26872:26889	2508989	0	True				
ANR	2509002	Identifier	LITERAL_NODE		2508989	0					
ANR	2509003	ReturnStatement	return ( true ) ;	1125:12:26950:26964	2508989	1	True				
ANR	2509004	Identifier	true		2508989	0					
ANR	2509005	Label	case ATTRREF_NODE :	1127:8:26975:26992	2508989	2	True				
ANR	2509006	Identifier	ATTRREF_NODE		2508989	0					
ANR	2509007	CompoundStatement		41:3:1503:1537	2508989	3					
ANR	2509008	IdentifierDeclStatement	const ClassAd * start ;	1128:12:27008:27030	2508989	0	True				
ANR	2509009	IdentifierDecl	* start		2508989	0					
ANR	2509010	IdentifierDeclType	const ClassAd *		2508989	0					
ANR	2509011	Identifier	start		2508989	1					
ANR	2509012	IdentifierDeclStatement	"ExprTree * tree , * result ;"	1129:12:27044:27074	2508989	1	True				
ANR	2509013	IdentifierDecl	* tree		2508989	0					
ANR	2509014	IdentifierDeclType	ExprTree *		2508989	0					
ANR	2509015	Identifier	tree		2508989	1					
ANR	2509016	IdentifierDecl	* result		2508989	1					
ANR	2509017	IdentifierDeclType	ExprTree *		2508989	0					
ANR	2509018	Identifier	result		2508989	1					
ANR	2509019	IdentifierDeclStatement	string attr ;	1130:12:27088:27108	2508989	2	True				
ANR	2509020	IdentifierDecl	attr		2508989	0					
ANR	2509021	IdentifierDeclType	string		2508989	0					
ANR	2509022	Identifier	attr		2508989	1					
ANR	2509023	IdentifierDeclStatement	Value val ;	1131:12:27122:27141	2508989	3	True				
ANR	2509024	IdentifierDecl	val		2508989	0					
ANR	2509025	IdentifierDeclType	Value		2508989	0					
ANR	2509026	Identifier	val		2508989	1					
ANR	2509027	IdentifierDeclStatement	bool abs ;	1132:12:27155:27174	2508989	4	True				
ANR	2509028	IdentifierDecl	abs		2508989	0					
ANR	2509029	IdentifierDeclType	bool		2508989	0					
ANR	2509030	Identifier	abs		2508989	1					
ANR	2509031	IdentifierDeclStatement	PortReferences :: iterator pitr ;	1133:3:27179:27208	2508989	5	True				
ANR	2509032	IdentifierDecl	pitr		2508989	0					
ANR	2509033	IdentifierDeclType	PortReferences :: iterator		2508989	0					
ANR	2509034	Identifier	pitr		2508989	1					
ANR	2509035	ExpressionStatement	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"	1135:12:27223:27290	2508989	6	True				
ANR	2509036	CallExpression	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"		2508989	0					
ANR	2509037	Callee	( ( const AttributeReference * ) expr ) -> GetComponents		2508989	0					
ANR	2509038	PtrMemberAccess	( ( const AttributeReference * ) expr ) -> GetComponents		2508989	0					
ANR	2509039	CastExpression	( const AttributeReference * ) expr		2508989	0					
ANR	2509040	CastTarget	const AttributeReference *		2508989	0					
ANR	2509041	Identifier	expr		2508989	1					
ANR	2509042	Identifier	GetComponents		2508989	1					
ANR	2509043	ArgumentList	tree		2508989	1					
ANR	2509044	Argument	tree		2508989	0					
ANR	2509045	Identifier	tree		2508989	0					
ANR	2509046	Argument	attr		2508989	1					
ANR	2509047	Identifier	attr		2508989	0					
ANR	2509048	Argument	abs		2508989	2					
ANR	2509049	Identifier	abs		2508989	0					
ANR	2509050	IfStatement	if ( tree == NULL )		2508989	7					
ANR	2509051	Condition	tree == NULL	1137:16:27373:27382	2508989	0	True				
ANR	2509052	EqualityExpression	tree == NULL		2508989	0		==			
ANR	2509053	Identifier	tree		2508989	0					
ANR	2509054	Identifier	NULL		2508989	1					
ANR	2509055	CompoundStatement		17:29:556:556	2508989	1					
ANR	2509056	ExpressionStatement	start = abs ? state . rootAd : state . curAd	1138:16:27404:27444	2508989	0	True				
ANR	2509057	AssignmentExpression	start = abs ? state . rootAd : state . curAd		2508989	0		=			
ANR	2509058	Identifier	start		2508989	0					
ANR	2509059	ConditionalExpression	abs ? state . rootAd : state . curAd		2508989	1					
ANR	2509060	Condition	abs		2508989	0					
ANR	2509061	Identifier	abs		2508989	0					
ANR	2509062	MemberAccess	state . rootAd		2508989	1					
ANR	2509063	Identifier	state		2508989	0					
ANR	2509064	Identifier	rootAd		2508989	1					
ANR	2509065	MemberAccess	state . curAd		2508989	2					
ANR	2509066	Identifier	state		2508989	0					
ANR	2509067	Identifier	curAd		2508989	1					
ANR	2509068	IfStatement	if ( abs && ( start == NULL ) )		2508989	1					
ANR	2509069	Condition	abs && ( start == NULL )	1139:8:27454:27477	2508989	0	True				
ANR	2509070	AndExpression	abs && ( start == NULL )		2508989	0		&&			
ANR	2509071	Identifier	abs		2508989	0					
ANR	2509072	EqualityExpression	start == NULL		2508989	1		==			
ANR	2509073	Identifier	start		2508989	0					
ANR	2509074	Identifier	NULL		2508989	1					
ANR	2509075	CompoundStatement		19:35:651:651	2508989	1					
ANR	2509076	ReturnStatement	return false ;	1140:5:27519:27531	2508989	0	True				
ANR	2509077	Identifier	false		2508989	0					
ANR	2509078	ElseStatement	else		2508989	0					
ANR	2509079	CompoundStatement		22:19:752:752	2508989	0					
ANR	2509080	IfStatement	"if ( ! tree -> Evaluate ( state , val ) )"		2508989	0					
ANR	2509081	Condition	"! tree -> Evaluate ( state , val )"	1143:20:27604:27632	2508989	0	True				
ANR	2509082	UnaryOperationExpression	"! tree -> Evaluate ( state , val )"		2508989	0					
ANR	2509083	UnaryOperator	!		2508989	0					
ANR	2509084	CallExpression	"tree -> Evaluate ( state , val )"		2508989	1					
ANR	2509085	Callee	tree -> Evaluate		2508989	0					
ANR	2509086	PtrMemberAccess	tree -> Evaluate		2508989	0					
ANR	2509087	Identifier	tree		2508989	0					
ANR	2509088	Identifier	Evaluate		2508989	1					
ANR	2509089	ArgumentList	state		2508989	1					
ANR	2509090	Argument	state		2508989	0					
ANR	2509091	Identifier	state		2508989	0					
ANR	2509092	Argument	val		2508989	1					
ANR	2509093	Identifier	val		2508989	0					
ANR	2509094	ReturnStatement	return ( false ) ;	1143:52:27636:27651	2508989	1	True				
ANR	2509095	Identifier	false		2508989	0					
ANR	2509096	IfStatement	if ( val . IsUndefinedValue ( ) )		2508989	1					
ANR	2509097	Condition	val . IsUndefinedValue ( )	1147:20:27797:27819	2508989	0	True				
ANR	2509098	CallExpression	val . IsUndefinedValue ( )		2508989	0					
ANR	2509099	Callee	val . IsUndefinedValue		2508989	0					
ANR	2509100	MemberAccess	val . IsUndefinedValue		2508989	0					
ANR	2509101	Identifier	val		2508989	0					
ANR	2509102	Identifier	IsUndefinedValue		2508989	1					
ANR	2509103	ArgumentList			2508989	1					
ANR	2509104	CompoundStatement		27:46:993:993	2508989	1					
ANR	2509105	ReturnStatement	"return ( _GetExternalReferences ( tree , ad , state , refs ) ) ;"	1148:20:27845:27901	2508989	0	True				
ANR	2509106	CallExpression	"_GetExternalReferences ( tree , ad , state , refs )"		2508989	0					
ANR	2509107	Callee	_GetExternalReferences		2508989	0					
ANR	2509108	Identifier	_GetExternalReferences		2508989	0					
ANR	2509109	ArgumentList	tree		2508989	1					
ANR	2509110	Argument	tree		2508989	0					
ANR	2509111	Identifier	tree		2508989	0					
ANR	2509112	Argument	ad		2508989	1					
ANR	2509113	Identifier	ad		2508989	0					
ANR	2509114	Argument	state		2508989	2					
ANR	2509115	Identifier	state		2508989	0					
ANR	2509116	Argument	refs		2508989	3					
ANR	2509117	Identifier	refs		2508989	0					
ANR	2509118	IfStatement	if ( ! val . IsClassAdValue ( start ) )		2508989	2					
ANR	2509119	Condition	! val . IsClassAdValue ( start )	1152:20:28058:28085	2508989	0	True				
ANR	2509120	UnaryOperationExpression	! val . IsClassAdValue ( start )		2508989	0					
ANR	2509121	UnaryOperator	!		2508989	0					
ANR	2509122	CallExpression	val . IsClassAdValue ( start )		2508989	1					
ANR	2509123	Callee	val . IsClassAdValue		2508989	0					
ANR	2509124	MemberAccess	val . IsClassAdValue		2508989	0					
ANR	2509125	Identifier	val		2508989	0					
ANR	2509126	Identifier	IsClassAdValue		2508989	1					
ANR	2509127	ArgumentList	start		2508989	1					
ANR	2509128	Argument	start		2508989	0					
ANR	2509129	Identifier	start		2508989	0					
ANR	2509130	ReturnStatement	return ( false ) ;	1152:51:28089:28104	2508989	1	True				
ANR	2509131	Identifier	false		2508989	0					
ANR	2509132	IfStatement	if ( ( pitr = refs . find ( start ) ) == refs . end ( ) && start != this )		2508989	3					
ANR	2509133	Condition	( pitr = refs . find ( start ) ) == refs . end ( ) && start != this	1155:8:28175:28242	2508989	0	True				
ANR	2509134	AndExpression	( pitr = refs . find ( start ) ) == refs . end ( ) && start != this		2508989	0		&&			
ANR	2509135	EqualityExpression	( pitr = refs . find ( start ) ) == refs . end ( )		2508989	0		==			
ANR	2509136	AssignmentExpression	pitr = refs . find ( start )		2508989	0		=			
ANR	2509137	Identifier	pitr		2508989	0					
ANR	2509138	CallExpression	refs . find ( start )		2508989	1					
ANR	2509139	Callee	refs . find		2508989	0					
ANR	2509140	MemberAccess	refs . find		2508989	0					
ANR	2509141	Identifier	refs		2508989	0					
ANR	2509142	Identifier	find		2508989	1					
ANR	2509143	ArgumentList	start		2508989	1					
ANR	2509144	Argument	start		2508989	0					
ANR	2509145	Identifier	start		2508989	0					
ANR	2509146	CallExpression	refs . end ( )		2508989	1					
ANR	2509147	Callee	refs . end		2508989	0					
ANR	2509148	MemberAccess	refs . end		2508989	0					
ANR	2509149	Identifier	refs		2508989	0					
ANR	2509150	Identifier	end		2508989	1					
ANR	2509151	ArgumentList			2508989	1					
ANR	2509152	EqualityExpression	start != this		2508989	1		!=			
ANR	2509153	Identifier	start		2508989	0					
ANR	2509154	Identifier	this		2508989	1					
ANR	2509155	CompoundStatement		36:22:1416:1416	2508989	1					
ANR	2509156	ReturnStatement	return ( false ) ;	1157:5:28253:28268	2508989	0	True				
ANR	2509157	Identifier	false		2508989	0					
ANR	2509158	IdentifierDeclStatement	const ClassAd * curAd = state . curAd ;	1161:3:28333:28367	2508989	8	True				
ANR	2509159	IdentifierDecl	* curAd = state . curAd		2508989	0					
ANR	2509160	IdentifierDeclType	const ClassAd *		2508989	0					
ANR	2509161	Identifier	curAd		2508989	1					
ANR	2509162	AssignmentExpression	* curAd = state . curAd		2508989	2		=			
ANR	2509163	Identifier	curAd		2508989	0					
ANR	2509164	MemberAccess	state . curAd		2508989	1					
ANR	2509165	Identifier	state		2508989	0					
ANR	2509166	Identifier	curAd		2508989	1					
ANR	2509167	SwitchStatement	"switch ( start -> LookupInScope ( attr , result , state ) )"		2508989	9					
ANR	2509168	Condition	"start -> LookupInScope ( attr , result , state )"	1162:20:28389:28431	2508989	0	True				
ANR	2509169	CallExpression	"start -> LookupInScope ( attr , result , state )"		2508989	0					
ANR	2509170	Callee	start -> LookupInScope		2508989	0					
ANR	2509171	PtrMemberAccess	start -> LookupInScope		2508989	0					
ANR	2509172	Identifier	start		2508989	0					
ANR	2509173	Identifier	LookupInScope		2508989	1					
ANR	2509174	ArgumentList	attr		2508989	1					
ANR	2509175	Argument	attr		2508989	0					
ANR	2509176	Identifier	attr		2508989	0					
ANR	2509177	Argument	result		2508989	1					
ANR	2509178	Identifier	result		2508989	0					
ANR	2509179	Argument	state		2508989	2					
ANR	2509180	Identifier	state		2508989	0					
ANR	2509181	CompoundStatement		42:66:1605:1605	2508989	1					
ANR	2509182	Label	case EVAL_ERROR :	1163:16:28453:28468	2508989	0	True				
ANR	2509183	Identifier	EVAL_ERROR		2508989	0					
ANR	2509184	ReturnStatement	return ( false ) ;	1165:20:28528:28543	2508989	1	True				
ANR	2509185	Identifier	false		2508989	0					
ANR	2509186	Label	case EVAL_UNDEF :	1167:16:28562:28577	2508989	2	True				
ANR	2509187	Identifier	EVAL_UNDEF		2508989	0					
ANR	2509188	ExpressionStatement	pitr -> second . insert ( attr )	1169:20:28643:28670	2508989	3	True				
ANR	2509189	CallExpression	pitr -> second . insert ( attr )		2508989	0					
ANR	2509190	Callee	pitr -> second . insert		2508989	0					
ANR	2509191	MemberAccess	pitr -> second . insert		2508989	0					
ANR	2509192	PtrMemberAccess	pitr -> second		2508989	0					
ANR	2509193	Identifier	pitr		2508989	0					
ANR	2509194	Identifier	second		2508989	1					
ANR	2509195	Identifier	insert		2508989	1					
ANR	2509196	ArgumentList	attr		2508989	1					
ANR	2509197	Argument	attr		2508989	0					
ANR	2509198	Identifier	attr		2508989	0					
ANR	2509199	ExpressionStatement	state . curAd = curAd	1170:5:28677:28696	2508989	4	True				
ANR	2509200	AssignmentExpression	state . curAd = curAd		2508989	0		=			
ANR	2509201	MemberAccess	state . curAd		2508989	0					
ANR	2509202	Identifier	state		2508989	0					
ANR	2509203	Identifier	curAd		2508989	1					
ANR	2509204	Identifier	curAd		2508989	1					
ANR	2509205	ReturnStatement	return ( true ) ;	1171:20:28718:28732	2508989	5	True				
ANR	2509206	Identifier	true		2508989	0					
ANR	2509207	Label	case EVAL_OK :	1173:16:28751:28763	2508989	6	True				
ANR	2509208	Identifier	EVAL_OK		2508989	0					
ANR	2509209	CompoundStatement		55:5:2016:2070	2508989	7					
ANR	2509210	IdentifierDeclStatement	"bool rval = _GetExternalReferences ( result , ad , state , refs ) ;"	1175:5:28846:28900	2508989	0	True				
ANR	2509211	IdentifierDecl	"rval = _GetExternalReferences ( result , ad , state , refs )"		2508989	0					
ANR	2509212	IdentifierDeclType	bool		2508989	0					
ANR	2509213	Identifier	rval		2508989	1					
ANR	2509214	AssignmentExpression	"rval = _GetExternalReferences ( result , ad , state , refs )"		2508989	2		=			
ANR	2509215	Identifier	rval		2508989	0					
ANR	2509216	CallExpression	"_GetExternalReferences ( result , ad , state , refs )"		2508989	1					
ANR	2509217	Callee	_GetExternalReferences		2508989	0					
ANR	2509218	Identifier	_GetExternalReferences		2508989	0					
ANR	2509219	ArgumentList	result		2508989	1					
ANR	2509220	Argument	result		2508989	0					
ANR	2509221	Identifier	result		2508989	0					
ANR	2509222	Argument	ad		2508989	1					
ANR	2509223	Identifier	ad		2508989	0					
ANR	2509224	Argument	state		2508989	2					
ANR	2509225	Identifier	state		2508989	0					
ANR	2509226	Argument	refs		2508989	3					
ANR	2509227	Identifier	refs		2508989	0					
ANR	2509228	ExpressionStatement	state . curAd = curAd	1176:5:28907:28926	2508989	1	True				
ANR	2509229	AssignmentExpression	state . curAd = curAd		2508989	0		=			
ANR	2509230	MemberAccess	state . curAd		2508989	0					
ANR	2509231	Identifier	state		2508989	0					
ANR	2509232	Identifier	curAd		2508989	1					
ANR	2509233	Identifier	curAd		2508989	1					
ANR	2509234	ReturnStatement	return ( rval ) ;	1177:5:28933:28947	2508989	2	True				
ANR	2509235	Identifier	rval		2508989	0					
ANR	2509236	Label	default :	1180:16:28972:28979	2508989	8	True				
ANR	2509237	Identifier	default		2508989	0					
ANR	2509238	ReturnStatement	return ( false ) ;	1182:20:29038:29053	2508989	9	True				
ANR	2509239	Identifier	false		2508989	0					
ANR	2509240	Label	case OP_NODE :	1186:8:29100:29112	2508989	4	True				
ANR	2509241	Identifier	OP_NODE		2508989	0					
ANR	2509242	CompoundStatement		69:12:2373:2400	2508989	5					
ANR	2509243	IdentifierDeclStatement	Operation :: OpKind op ;	1188:12:29167:29189	2508989	0	True				
ANR	2509244	IdentifierDecl	op		2508989	0					
ANR	2509245	IdentifierDeclType	Operation :: OpKind		2508989	0					
ANR	2509246	Identifier	op		2508989	1					
ANR	2509247	IdentifierDeclStatement	"ExprTree * t1 , * t2 , * t3 ;"	1189:12:29203:29230	2508989	1	True				
ANR	2509248	IdentifierDecl	* t1		2508989	0					
ANR	2509249	IdentifierDeclType	ExprTree *		2508989	0					
ANR	2509250	Identifier	t1		2508989	1					
ANR	2509251	IdentifierDecl	* t2		2508989	1					
ANR	2509252	IdentifierDeclType	ExprTree *		2508989	0					
ANR	2509253	Identifier	t2		2508989	1					
ANR	2509254	IdentifierDecl	* t3		2508989	2					
ANR	2509255	IdentifierDeclType	ExprTree *		2508989	0					
ANR	2509256	Identifier	t3		2508989	1					
ANR	2509257	ExpressionStatement	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"	1190:12:29244:29301	2508989	2	True				
ANR	2509258	CallExpression	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"		2508989	0					
ANR	2509259	Callee	( ( const Operation * ) expr ) -> GetComponents		2508989	0					
ANR	2509260	PtrMemberAccess	( ( const Operation * ) expr ) -> GetComponents		2508989	0					
ANR	2509261	CastExpression	( const Operation * ) expr		2508989	0					
ANR	2509262	CastTarget	const Operation *		2508989	0					
ANR	2509263	Identifier	expr		2508989	1					
ANR	2509264	Identifier	GetComponents		2508989	1					
ANR	2509265	ArgumentList	op		2508989	1					
ANR	2509266	Argument	op		2508989	0					
ANR	2509267	Identifier	op		2508989	0					
ANR	2509268	Argument	t1		2508989	1					
ANR	2509269	Identifier	t1		2508989	0					
ANR	2509270	Argument	t2		2508989	2					
ANR	2509271	Identifier	t2		2508989	0					
ANR	2509272	Argument	t3		2508989	3					
ANR	2509273	Identifier	t3		2508989	0					
ANR	2509274	IfStatement	"if ( t1 && ! _GetExternalReferences ( t1 , ad , state , refs ) )"		2508989	3					
ANR	2509275	Condition	"t1 && ! _GetExternalReferences ( t1 , ad , state , refs )"	1191:16:29319:29370	2508989	0	True				
ANR	2509276	AndExpression	"t1 && ! _GetExternalReferences ( t1 , ad , state , refs )"		2508989	0		&&			
ANR	2509277	Identifier	t1		2508989	0					
ANR	2509278	UnaryOperationExpression	"! _GetExternalReferences ( t1 , ad , state , refs )"		2508989	1					
ANR	2509279	UnaryOperator	!		2508989	0					
ANR	2509280	CallExpression	"_GetExternalReferences ( t1 , ad , state , refs )"		2508989	1					
ANR	2509281	Callee	_GetExternalReferences		2508989	0					
ANR	2509282	Identifier	_GetExternalReferences		2508989	0					
ANR	2509283	ArgumentList	t1		2508989	1					
ANR	2509284	Argument	t1		2508989	0					
ANR	2509285	Identifier	t1		2508989	0					
ANR	2509286	Argument	ad		2508989	1					
ANR	2509287	Identifier	ad		2508989	0					
ANR	2509288	Argument	state		2508989	2					
ANR	2509289	Identifier	state		2508989	0					
ANR	2509290	Argument	refs		2508989	3					
ANR	2509291	Identifier	refs		2508989	0					
ANR	2509292	CompoundStatement		71:71:2544:2544	2508989	1					
ANR	2509293	ReturnStatement	return ( false ) ;	1192:16:29392:29407	2508989	0	True				
ANR	2509294	Identifier	false		2508989	0					
ANR	2509295	IfStatement	"if ( t2 && ! _GetExternalReferences ( t2 , ad , state , refs ) )"		2508989	4					
ANR	2509296	Condition	"t2 && ! _GetExternalReferences ( t2 , ad , state , refs )"	1194:16:29439:29490	2508989	0	True				
ANR	2509297	AndExpression	"t2 && ! _GetExternalReferences ( t2 , ad , state , refs )"		2508989	0		&&			
ANR	2509298	Identifier	t2		2508989	0					
ANR	2509299	UnaryOperationExpression	"! _GetExternalReferences ( t2 , ad , state , refs )"		2508989	1					
ANR	2509300	UnaryOperator	!		2508989	0					
ANR	2509301	CallExpression	"_GetExternalReferences ( t2 , ad , state , refs )"		2508989	1					
ANR	2509302	Callee	_GetExternalReferences		2508989	0					
ANR	2509303	Identifier	_GetExternalReferences		2508989	0					
ANR	2509304	ArgumentList	t2		2508989	1					
ANR	2509305	Argument	t2		2508989	0					
ANR	2509306	Identifier	t2		2508989	0					
ANR	2509307	Argument	ad		2508989	1					
ANR	2509308	Identifier	ad		2508989	0					
ANR	2509309	Argument	state		2508989	2					
ANR	2509310	Identifier	state		2508989	0					
ANR	2509311	Argument	refs		2508989	3					
ANR	2509312	Identifier	refs		2508989	0					
ANR	2509313	CompoundStatement		74:71:2664:2664	2508989	1					
ANR	2509314	ReturnStatement	return ( false ) ;	1195:16:29512:29527	2508989	0	True				
ANR	2509315	Identifier	false		2508989	0					
ANR	2509316	IfStatement	"if ( t3 && ! _GetExternalReferences ( t3 , ad , state , refs ) )"		2508989	5					
ANR	2509317	Condition	"t3 && ! _GetExternalReferences ( t3 , ad , state , refs )"	1197:16:29559:29610	2508989	0	True				
ANR	2509318	AndExpression	"t3 && ! _GetExternalReferences ( t3 , ad , state , refs )"		2508989	0		&&			
ANR	2509319	Identifier	t3		2508989	0					
ANR	2509320	UnaryOperationExpression	"! _GetExternalReferences ( t3 , ad , state , refs )"		2508989	1					
ANR	2509321	UnaryOperator	!		2508989	0					
ANR	2509322	CallExpression	"_GetExternalReferences ( t3 , ad , state , refs )"		2508989	1					
ANR	2509323	Callee	_GetExternalReferences		2508989	0					
ANR	2509324	Identifier	_GetExternalReferences		2508989	0					
ANR	2509325	ArgumentList	t3		2508989	1					
ANR	2509326	Argument	t3		2508989	0					
ANR	2509327	Identifier	t3		2508989	0					
ANR	2509328	Argument	ad		2508989	1					
ANR	2509329	Identifier	ad		2508989	0					
ANR	2509330	Argument	state		2508989	2					
ANR	2509331	Identifier	state		2508989	0					
ANR	2509332	Argument	refs		2508989	3					
ANR	2509333	Identifier	refs		2508989	0					
ANR	2509334	CompoundStatement		77:71:2784:2784	2508989	1					
ANR	2509335	ReturnStatement	return ( false ) ;	1198:16:29632:29647	2508989	0	True				
ANR	2509336	Identifier	false		2508989	0					
ANR	2509337	ReturnStatement	return ( true ) ;	1200:12:29675:29689	2508989	6	True				
ANR	2509338	Identifier	true		2508989	0					
ANR	2509339	Label	case FN_CALL_NODE :	1203:8:29710:29727	2508989	6	True				
ANR	2509340	Identifier	FN_CALL_NODE		2508989	0					
ANR	2509341	CompoundStatement		87:12:3046:3077	2508989	7					
ANR	2509342	IdentifierDeclStatement	string fnName ;	1205:12:29782:29816	2508989	0	True				
ANR	2509343	IdentifierDecl	fnName		2508989	0					
ANR	2509344	IdentifierDeclType	string		2508989	0					
ANR	2509345	Identifier	fnName		2508989	1					
ANR	2509346	IdentifierDeclStatement	vector < ExprTree * > args ;	1206:12:29830:29862	2508989	1	True				
ANR	2509347	IdentifierDecl	args		2508989	0					
ANR	2509348	IdentifierDeclType	vector < ExprTree * >		2508989	0					
ANR	2509349	Identifier	args		2508989	1					
ANR	2509350	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1207:12:29876:29907	2508989	2	True				
ANR	2509351	IdentifierDecl	itr		2508989	0					
ANR	2509352	IdentifierDeclType	vector < ExprTree * > :: iterator		2508989	0					
ANR	2509353	Identifier	itr		2508989	1					
ANR	2509354	ExpressionStatement	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"	1209:12:29922:29980	2508989	3	True				
ANR	2509355	CallExpression	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"		2508989	0					
ANR	2509356	Callee	( ( const FunctionCall * ) expr ) -> GetComponents		2508989	0					
ANR	2509357	PtrMemberAccess	( ( const FunctionCall * ) expr ) -> GetComponents		2508989	0					
ANR	2509358	CastExpression	( const FunctionCall * ) expr		2508989	0					
ANR	2509359	CastTarget	const FunctionCall *		2508989	0					
ANR	2509360	Identifier	expr		2508989	1					
ANR	2509361	Identifier	GetComponents		2508989	1					
ANR	2509362	ArgumentList	fnName		2508989	1					
ANR	2509363	Argument	fnName		2508989	0					
ANR	2509364	Identifier	fnName		2508989	0					
ANR	2509365	Argument	args		2508989	1					
ANR	2509366	Identifier	args		2508989	0					
ANR	2509367	ForStatement	for ( itr = args . begin ( ) ; itr != args . end ( ) ; itr ++ )		2508989	4					
ANR	2509368	ForInit	itr = args . begin ( ) ;	1210:17:29999:30018	2508989	0	True				
ANR	2509369	AssignmentExpression	itr = args . begin ( )		2508989	0		=			
ANR	2509370	Identifier	itr		2508989	0					
ANR	2509371	CallExpression	args . begin ( )		2508989	1					
ANR	2509372	Callee	args . begin		2508989	0					
ANR	2509373	MemberAccess	args . begin		2508989	0					
ANR	2509374	Identifier	args		2508989	0					
ANR	2509375	Identifier	begin		2508989	1					
ANR	2509376	ArgumentList			2508989	1					
ANR	2509377	Condition	itr != args . end ( )	1210:38:30020:30037	2508989	1	True				
ANR	2509378	EqualityExpression	itr != args . end ( )		2508989	0		!=			
ANR	2509379	Identifier	itr		2508989	0					
ANR	2509380	CallExpression	args . end ( )		2508989	1					
ANR	2509381	Callee	args . end		2508989	0					
ANR	2509382	MemberAccess	args . end		2508989	0					
ANR	2509383	Identifier	args		2508989	0					
ANR	2509384	Identifier	end		2508989	1					
ANR	2509385	ArgumentList			2508989	1					
ANR	2509386	PostIncDecOperationExpression	itr ++	1210:58:30040:30044	2508989	2	True				
ANR	2509387	Identifier	itr		2508989	0					
ANR	2509388	IncDec	++		2508989	1					
ANR	2509389	CompoundStatement		90:66:3218:3218	2508989	3					
ANR	2509390	IfStatement	"if ( ! _GetExternalReferences ( * itr , ad , state , refs ) )"		2508989	0					
ANR	2509391	Condition	"! _GetExternalReferences ( * itr , ad , state , refs )"	1211:20:30070:30117	2508989	0	True				
ANR	2509392	UnaryOperationExpression	"! _GetExternalReferences ( * itr , ad , state , refs )"		2508989	0					
ANR	2509393	UnaryOperator	!		2508989	0					
ANR	2509394	CallExpression	"_GetExternalReferences ( * itr , ad , state , refs )"		2508989	1					
ANR	2509395	Callee	_GetExternalReferences		2508989	0					
ANR	2509396	Identifier	_GetExternalReferences		2508989	0					
ANR	2509397	ArgumentList	* itr		2508989	1					
ANR	2509398	Argument	* itr		2508989	0					
ANR	2509399	UnaryOperationExpression	* itr		2508989	0					
ANR	2509400	UnaryOperator	*		2508989	0					
ANR	2509401	Identifier	itr		2508989	1					
ANR	2509402	Argument	ad		2508989	1					
ANR	2509403	Identifier	ad		2508989	0					
ANR	2509404	Argument	state		2508989	2					
ANR	2509405	Identifier	state		2508989	0					
ANR	2509406	Argument	refs		2508989	3					
ANR	2509407	Identifier	refs		2508989	0					
ANR	2509408	CompoundStatement		91:71:3291:3291	2508989	1					
ANR	2509409	ReturnStatement	return ( false ) ;	1212:5:30128:30143	2508989	0	True				
ANR	2509410	Identifier	false		2508989	0					
ANR	2509411	ReturnStatement	return ( true ) ;	1215:12:30177:30191	2508989	5	True				
ANR	2509412	Identifier	true		2508989	0					
ANR	2509413	Label	case CLASSAD_NODE :	1219:8:30213:30230	2508989	8	True				
ANR	2509414	Identifier	CLASSAD_NODE		2508989	0					
ANR	2509415	CompoundStatement		102:12:3518:3565	2508989	9					
ANR	2509416	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > attrs ;"	1221:12:30285:30334	2508989	0	True				
ANR	2509417	IdentifierDecl	attrs		2508989	0					
ANR	2509418	IdentifierDeclType	"vector < pair < string , ExprTree * > >"		2508989	0					
ANR	2509419	Identifier	attrs		2508989	1					
ANR	2509420	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > :: iterator itr ;"	1222:12:30348:30395	2508989	1	True				
ANR	2509421	IdentifierDecl	itr		2508989	0					
ANR	2509422	IdentifierDeclType	"vector < pair < string , ExprTree * > > :: iterator"		2508989	0					
ANR	2509423	Identifier	itr		2508989	1					
ANR	2509424	ExpressionStatement	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )	1224:12:30410:30456	2508989	2	True				
ANR	2509425	CallExpression	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )		2508989	0					
ANR	2509426	Callee	( ( const ClassAd * ) expr ) -> GetComponents		2508989	0					
ANR	2509427	PtrMemberAccess	( ( const ClassAd * ) expr ) -> GetComponents		2508989	0					
ANR	2509428	CastExpression	( const ClassAd * ) expr		2508989	0					
ANR	2509429	CastTarget	const ClassAd *		2508989	0					
ANR	2509430	Identifier	expr		2508989	1					
ANR	2509431	Identifier	GetComponents		2508989	1					
ANR	2509432	ArgumentList	attrs		2508989	1					
ANR	2509433	Argument	attrs		2508989	0					
ANR	2509434	Identifier	attrs		2508989	0					
ANR	2509435	ForStatement	for ( itr = attrs . begin ( ) ; itr != attrs . end ( ) ; itr ++ )		2508989	3					
ANR	2509436	ForInit	itr = attrs . begin ( ) ;	1225:17:30475:30495	2508989	0	True				
ANR	2509437	AssignmentExpression	itr = attrs . begin ( )		2508989	0		=			
ANR	2509438	Identifier	itr		2508989	0					
ANR	2509439	CallExpression	attrs . begin ( )		2508989	1					
ANR	2509440	Callee	attrs . begin		2508989	0					
ANR	2509441	MemberAccess	attrs . begin		2508989	0					
ANR	2509442	Identifier	attrs		2508989	0					
ANR	2509443	Identifier	begin		2508989	1					
ANR	2509444	ArgumentList			2508989	1					
ANR	2509445	Condition	itr != attrs . end ( )	1225:39:30497:30515	2508989	1	True				
ANR	2509446	EqualityExpression	itr != attrs . end ( )		2508989	0		!=			
ANR	2509447	Identifier	itr		2508989	0					
ANR	2509448	CallExpression	attrs . end ( )		2508989	1					
ANR	2509449	Callee	attrs . end		2508989	0					
ANR	2509450	MemberAccess	attrs . end		2508989	0					
ANR	2509451	Identifier	attrs		2508989	0					
ANR	2509452	Identifier	end		2508989	1					
ANR	2509453	ArgumentList			2508989	1					
ANR	2509454	PostIncDecOperationExpression	itr ++	1225:60:30518:30522	2508989	2	True				
ANR	2509455	Identifier	itr		2508989	0					
ANR	2509456	IncDec	++		2508989	1					
ANR	2509457	CompoundStatement		105:68:3696:3696	2508989	3					
ANR	2509458	IfStatement	"if ( ! _GetExternalReferences ( itr -> second , ad , state , refs ) )"		2508989	0					
ANR	2509459	Condition	"! _GetExternalReferences ( itr -> second , ad , state , refs )"	1226:20:30548:30602	2508989	0	True				
ANR	2509460	UnaryOperationExpression	"! _GetExternalReferences ( itr -> second , ad , state , refs )"		2508989	0					
ANR	2509461	UnaryOperator	!		2508989	0					
ANR	2509462	CallExpression	"_GetExternalReferences ( itr -> second , ad , state , refs )"		2508989	1					
ANR	2509463	Callee	_GetExternalReferences		2508989	0					
ANR	2509464	Identifier	_GetExternalReferences		2508989	0					
ANR	2509465	ArgumentList	itr -> second		2508989	1					
ANR	2509466	Argument	itr -> second		2508989	0					
ANR	2509467	PtrMemberAccess	itr -> second		2508989	0					
ANR	2509468	Identifier	itr		2508989	0					
ANR	2509469	Identifier	second		2508989	1					
ANR	2509470	Argument	ad		2508989	1					
ANR	2509471	Identifier	ad		2508989	0					
ANR	2509472	Argument	state		2508989	2					
ANR	2509473	Identifier	state		2508989	0					
ANR	2509474	Argument	refs		2508989	3					
ANR	2509475	Identifier	refs		2508989	0					
ANR	2509476	CompoundStatement		106:77:3775:3775	2508989	1					
ANR	2509477	ReturnStatement	return ( false ) ;	1227:5:30612:30627	2508989	0	True				
ANR	2509478	Identifier	false		2508989	0					
ANR	2509479	ReturnStatement	return ( true ) ;	1230:12:30661:30675	2508989	4	True				
ANR	2509480	Identifier	true		2508989	0					
ANR	2509481	Label	case EXPR_LIST_NODE :	1234:8:30697:30716	2508989	10	True				
ANR	2509482	Identifier	EXPR_LIST_NODE		2508989	0					
ANR	2509483	CompoundStatement		117:12:3988:4019	2508989	11					
ANR	2509484	IdentifierDeclStatement	vector < ExprTree * > exprs ;	1236:12:30771:30804	2508989	0	True				
ANR	2509485	IdentifierDecl	exprs		2508989	0					
ANR	2509486	IdentifierDeclType	vector < ExprTree * >		2508989	0					
ANR	2509487	Identifier	exprs		2508989	1					
ANR	2509488	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1237:12:30818:30849	2508989	1	True				
ANR	2509489	IdentifierDecl	itr		2508989	0					
ANR	2509490	IdentifierDeclType	vector < ExprTree * > :: iterator		2508989	0					
ANR	2509491	Identifier	itr		2508989	1					
ANR	2509492	ExpressionStatement	( ( const ExprList * ) expr ) -> GetComponents ( exprs )	1239:12:30864:30911	2508989	2	True				
ANR	2509493	CallExpression	( ( const ExprList * ) expr ) -> GetComponents ( exprs )		2508989	0					
ANR	2509494	Callee	( ( const ExprList * ) expr ) -> GetComponents		2508989	0					
ANR	2509495	PtrMemberAccess	( ( const ExprList * ) expr ) -> GetComponents		2508989	0					
ANR	2509496	CastExpression	( const ExprList * ) expr		2508989	0					
ANR	2509497	CastTarget	const ExprList *		2508989	0					
ANR	2509498	Identifier	expr		2508989	1					
ANR	2509499	Identifier	GetComponents		2508989	1					
ANR	2509500	ArgumentList	exprs		2508989	1					
ANR	2509501	Argument	exprs		2508989	0					
ANR	2509502	Identifier	exprs		2508989	0					
ANR	2509503	ForStatement	for ( itr = exprs . begin ( ) ; itr != exprs . end ( ) ; itr ++ )		2508989	3					
ANR	2509504	ForInit	itr = exprs . begin ( ) ;	1240:17:30930:30950	2508989	0	True				
ANR	2509505	AssignmentExpression	itr = exprs . begin ( )		2508989	0		=			
ANR	2509506	Identifier	itr		2508989	0					
ANR	2509507	CallExpression	exprs . begin ( )		2508989	1					
ANR	2509508	Callee	exprs . begin		2508989	0					
ANR	2509509	MemberAccess	exprs . begin		2508989	0					
ANR	2509510	Identifier	exprs		2508989	0					
ANR	2509511	Identifier	begin		2508989	1					
ANR	2509512	ArgumentList			2508989	1					
ANR	2509513	Condition	itr != exprs . end ( )	1240:39:30952:30970	2508989	1	True				
ANR	2509514	EqualityExpression	itr != exprs . end ( )		2508989	0		!=			
ANR	2509515	Identifier	itr		2508989	0					
ANR	2509516	CallExpression	exprs . end ( )		2508989	1					
ANR	2509517	Callee	exprs . end		2508989	0					
ANR	2509518	MemberAccess	exprs . end		2508989	0					
ANR	2509519	Identifier	exprs		2508989	0					
ANR	2509520	Identifier	end		2508989	1					
ANR	2509521	ArgumentList			2508989	1					
ANR	2509522	PostIncDecOperationExpression	itr ++	1240:60:30973:30977	2508989	2	True				
ANR	2509523	Identifier	itr		2508989	0					
ANR	2509524	IncDec	++		2508989	1					
ANR	2509525	CompoundStatement		120:68:4151:4151	2508989	3					
ANR	2509526	IfStatement	"if ( ! _GetExternalReferences ( * itr , ad , state , refs ) )"		2508989	0					
ANR	2509527	Condition	"! _GetExternalReferences ( * itr , ad , state , refs )"	1241:20:31003:31050	2508989	0	True				
ANR	2509528	UnaryOperationExpression	"! _GetExternalReferences ( * itr , ad , state , refs )"		2508989	0					
ANR	2509529	UnaryOperator	!		2508989	0					
ANR	2509530	CallExpression	"_GetExternalReferences ( * itr , ad , state , refs )"		2508989	1					
ANR	2509531	Callee	_GetExternalReferences		2508989	0					
ANR	2509532	Identifier	_GetExternalReferences		2508989	0					
ANR	2509533	ArgumentList	* itr		2508989	1					
ANR	2509534	Argument	* itr		2508989	0					
ANR	2509535	UnaryOperationExpression	* itr		2508989	0					
ANR	2509536	UnaryOperator	*		2508989	0					
ANR	2509537	Identifier	itr		2508989	1					
ANR	2509538	Argument	ad		2508989	1					
ANR	2509539	Identifier	ad		2508989	0					
ANR	2509540	Argument	state		2508989	2					
ANR	2509541	Identifier	state		2508989	0					
ANR	2509542	Argument	refs		2508989	3					
ANR	2509543	Identifier	refs		2508989	0					
ANR	2509544	CompoundStatement		121:71:4224:4224	2508989	1					
ANR	2509545	ReturnStatement	return ( false ) ;	1242:5:31061:31076	2508989	0	True				
ANR	2509546	Identifier	false		2508989	0					
ANR	2509547	ReturnStatement	return ( true ) ;	1245:12:31110:31124	2508989	4	True				
ANR	2509548	Identifier	true		2508989	0					
ANR	2509549	Label	default :	1249:8:31146:31153	2508989	12	True				
ANR	2509550	Identifier	default		2508989	0					
ANR	2509551	ReturnStatement	return false ;	1250:12:31167:31179	2508989	13	True				
ANR	2509552	Identifier	false		2508989	0					
ANR	2509553	ReturnType	bool		2508989	1					
ANR	2509554	Identifier	ClassAd :: _GetExternalReferences		2508989	2					
ANR	2509555	ParameterList	"const ExprTree * expr , ClassAd * ad , EvalState & state , PortReferences & refs"		2508989	3					
ANR	2509556	Parameter	const ExprTree * expr	1119:24:26751:26770	2508989	0	True				
ANR	2509557	ParameterType	const ExprTree *		2508989	0					
ANR	2509558	Identifier	expr		2508989	1					
ANR	2509559	Parameter	ClassAd * ad	1119:46:26773:26783	2508989	1	True				
ANR	2509560	ParameterType	ClassAd *		2508989	0					
ANR	2509561	Identifier	ad		2508989	1					
ANR	2509562	Parameter	EvalState & state	1120:1:26788:26803	2508989	2	True				
ANR	2509563	ParameterType	EvalState &		2508989	0					
ANR	2509564	Identifier	state		2508989	1					
ANR	2509565	Parameter	PortReferences & refs	1120:19:26806:26825	2508989	3	True				
ANR	2509566	ParameterType	PortReferences &		2508989	0					
ANR	2509567	Identifier	refs		2508989	1					
ANR	2509568	CFGEntryNode	ENTRY		2508989		True				
ANR	2509569	CFGExitNode	EXIT		2508989		True				
ANR	2509570	Symbol	pitr		2508989						
ANR	2509571	Symbol	refs . end		2508989						
ANR	2509572	Symbol	* start		2508989						
ANR	2509573	Symbol	pitr -> second		2508989						
ANR	2509574	Symbol	state . rootAd		2508989						
ANR	2509575	Symbol	state . curAd		2508989						
ANR	2509576	Symbol	exprs . end		2508989						
ANR	2509577	Symbol	state		2508989						
ANR	2509578	Symbol	start -> LookupInScope		2508989						
ANR	2509579	Symbol	exprs . begin		2508989						
ANR	2509580	Symbol	itr -> second		2508989						
ANR	2509581	Symbol	val		2508989						
ANR	2509582	Symbol	ad		2508989						
ANR	2509583	Symbol	NULL		2508989						
ANR	2509584	Symbol	itr		2508989						
ANR	2509585	Symbol	tree		2508989						
ANR	2509586	Symbol	this		2508989						
ANR	2509587	Symbol	curAd		2508989						
ANR	2509588	Symbol	val . IsUndefinedValue		2508989						
ANR	2509589	Symbol	attrs		2508989						
ANR	2509590	Symbol	fnName		2508989						
ANR	2509591	Symbol	* expr		2508989						
ANR	2509592	Symbol	true		2508989						
ANR	2509593	Symbol	attrs . end		2508989						
ANR	2509594	Symbol	t1		2508989						
ANR	2509595	Symbol	refs . find		2508989						
ANR	2509596	Symbol	t2		2508989						
ANR	2509597	Symbol	t3		2508989						
ANR	2509598	Symbol	* pitr		2508989						
ANR	2509599	Symbol	result		2508989						
ANR	2509600	Symbol	args . begin		2508989						
ANR	2509601	Symbol	attrs . begin		2508989						
ANR	2509602	Symbol	val . IsClassAdValue		2508989						
ANR	2509603	Symbol	exprs		2508989						
ANR	2509604	Symbol	expr		2508989						
ANR	2509605	Symbol	rval		2508989						
ANR	2509606	Symbol	attr		2508989						
ANR	2509607	Symbol	args . end		2508989						
ANR	2509608	Symbol	expr -> GetKind		2508989						
ANR	2509609	Symbol	op		2508989						
ANR	2509610	Symbol	_GetExternalReferences		2508989						
ANR	2509611	Symbol	start		2508989						
ANR	2509612	Symbol	false		2508989						
ANR	2509613	Symbol	* itr		2508989						
ANR	2509614	Symbol	* tree		2508989						
ANR	2509615	Symbol	args		2508989						
ANR	2509616	Symbol	abs		2508989						
ANR	2509617	Symbol	refs		2508989						
ANR	2509618	Symbol	tree -> Evaluate		2508989						
ANR	2509619	Function	ClassAd :: GetInternalReferences	1255:0:31191:31433							
ANR	2509620	FunctionDef	"ClassAd :: GetInternalReferences (const ExprTree * tree , References & refs , bool fullNames)"		2509619	0					
ANR	2509621	CompoundStatement		1257:0:31285:31433	2509619	0					
ANR	2509622	IdentifierDeclStatement	EvalState state ;	1258:4:31291:31306	2509619	0	True				
ANR	2509623	IdentifierDecl	state		2509619	0					
ANR	2509624	IdentifierDeclType	EvalState		2509619	0					
ANR	2509625	Identifier	state		2509619	1					
ANR	2509626	ExpressionStatement	state . rootAd = this	1259:4:31312:31331	2509619	1	True				
ANR	2509627	AssignmentExpression	state . rootAd = this		2509619	0		=			
ANR	2509628	MemberAccess	state . rootAd		2509619	0					
ANR	2509629	Identifier	state		2509619	0					
ANR	2509630	Identifier	rootAd		2509619	1					
ANR	2509631	Identifier	this		2509619	1					
ANR	2509632	ExpressionStatement	state . curAd = this	1260:4:31337:31355	2509619	2	True				
ANR	2509633	AssignmentExpression	state . curAd = this		2509619	0		=			
ANR	2509634	MemberAccess	state . curAd		2509619	0					
ANR	2509635	Identifier	state		2509619	0					
ANR	2509636	Identifier	curAd		2509619	1					
ANR	2509637	Identifier	this		2509619	1					
ANR	2509638	ReturnStatement	"return ( _GetInternalReferences ( tree , this , state , refs , fullNames ) ) ;"	1262:4:31362:31431	2509619	3	True				
ANR	2509639	CallExpression	"_GetInternalReferences ( tree , this , state , refs , fullNames )"		2509619	0					
ANR	2509640	Callee	_GetInternalReferences		2509619	0					
ANR	2509641	Identifier	_GetInternalReferences		2509619	0					
ANR	2509642	ArgumentList	tree		2509619	1					
ANR	2509643	Argument	tree		2509619	0					
ANR	2509644	Identifier	tree		2509619	0					
ANR	2509645	Argument	this		2509619	1					
ANR	2509646	Identifier	this		2509619	0					
ANR	2509647	Argument	state		2509619	2					
ANR	2509648	Identifier	state		2509619	0					
ANR	2509649	Argument	refs		2509619	3					
ANR	2509650	Identifier	refs		2509619	0					
ANR	2509651	Argument	fullNames		2509619	4					
ANR	2509652	Identifier	fullNames		2509619	0					
ANR	2509653	ReturnType	bool		2509619	1					
ANR	2509654	Identifier	ClassAd :: GetInternalReferences		2509619	2					
ANR	2509655	ParameterList	"const ExprTree * tree , References & refs , bool fullNames"		2509619	3					
ANR	2509656	Parameter	const ExprTree * tree	1256:23:31229:31248	2509619	0	True				
ANR	2509657	ParameterType	const ExprTree *		2509619	0					
ANR	2509658	Identifier	tree		2509619	1					
ANR	2509659	Parameter	References & refs	1256:45:31251:31266	2509619	1	True				
ANR	2509660	ParameterType	References &		2509619	0					
ANR	2509661	Identifier	refs		2509619	1					
ANR	2509662	Parameter	bool fullNames	1256:63:31269:31282	2509619	2	True				
ANR	2509663	ParameterType	bool		2509619	0					
ANR	2509664	Identifier	fullNames		2509619	1					
ANR	2509665	CFGEntryNode	ENTRY		2509619		True				
ANR	2509666	CFGExitNode	EXIT		2509619		True				
ANR	2509667	Symbol	state . curAd		2509619						
ANR	2509668	Symbol	refs		2509619						
ANR	2509669	Symbol	tree		2509619						
ANR	2509670	Symbol	state . rootAd		2509619						
ANR	2509671	Symbol	this		2509619						
ANR	2509672	Symbol	_GetInternalReferences		2509619						
ANR	2509673	Symbol	fullNames		2509619						
ANR	2509674	Symbol	state		2509619						
ANR	2509675	Function	ClassAd :: _GetInternalReferences	1266:0:31514:38599							
ANR	2509676	FunctionDef	"ClassAd :: _GetInternalReferences (const ExprTree * expr , ClassAd * ad , EvalState & state , References & refs , bool fullNames)"		2509675	0					
ANR	2509677	CompoundStatement		1269:0:31648:38599	2509675	0					
ANR	2509678	SwitchStatement	switch ( expr -> GetKind ( ) )		2509675	0					
ANR	2509679	Condition	expr -> GetKind ( )	1271:12:31663:31677	2509675	0	True				
ANR	2509680	CallExpression	expr -> GetKind ( )		2509675	0					
ANR	2509681	Callee	expr -> GetKind		2509675	0					
ANR	2509682	PtrMemberAccess	expr -> GetKind		2509675	0					
ANR	2509683	Identifier	expr		2509675	0					
ANR	2509684	Identifier	GetKind		2509675	1					
ANR	2509685	ArgumentList			2509675	1					
ANR	2509686	CompoundStatement		3:29:31:31	2509675	1					
ANR	2509687	Label	case LITERAL_NODE :	1273:8:31726:31743	2509675	0	True				
ANR	2509688	Identifier	LITERAL_NODE		2509675	0					
ANR	2509689	CompoundStatement		5:26:95:95	2509675	1					
ANR	2509690	ReturnStatement	return true ;	1274:12:31758:31769	2509675	0	True				
ANR	2509691	Identifier	true		2509675	0					
ANR	2509692	BreakStatement	break ;	1275:8:31779:31784	2509675	1	True				
ANR	2509693	Label	case ATTRREF_NODE :	1278:8:31823:31840	2509675	2	True				
ANR	2509694	Identifier	ATTRREF_NODE		2509675	0					
ANR	2509695	CompoundStatement		89:12:2802:2836	2509675	3					
ANR	2509696	IdentifierDeclStatement	const ClassAd * start ;	1279:12:31855:31877	2509675	0	True				
ANR	2509697	IdentifierDecl	* start		2509675	0					
ANR	2509698	IdentifierDeclType	const ClassAd *		2509675	0					
ANR	2509699	Identifier	start		2509675	1					
ANR	2509700	IdentifierDeclStatement	"ExprTree * tree , * result ;"	1280:12:31891:31921	2509675	1	True				
ANR	2509701	IdentifierDecl	* tree		2509675	0					
ANR	2509702	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2509703	Identifier	tree		2509675	1					
ANR	2509704	IdentifierDecl	* result		2509675	1					
ANR	2509705	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2509706	Identifier	result		2509675	1					
ANR	2509707	IdentifierDeclStatement	string attr ;	1281:12:31935:31955	2509675	2	True				
ANR	2509708	IdentifierDecl	attr		2509675	0					
ANR	2509709	IdentifierDeclType	string		2509675	0					
ANR	2509710	Identifier	attr		2509675	1					
ANR	2509711	IdentifierDeclStatement	Value val ;	1282:12:31969:31988	2509675	3	True				
ANR	2509712	IdentifierDecl	val		2509675	0					
ANR	2509713	IdentifierDeclType	Value		2509675	0					
ANR	2509714	Identifier	val		2509675	1					
ANR	2509715	IdentifierDeclStatement	bool abs ;	1283:12:32002:32021	2509675	4	True				
ANR	2509716	IdentifierDecl	abs		2509675	0					
ANR	2509717	IdentifierDeclType	bool		2509675	0					
ANR	2509718	Identifier	abs		2509675	1					
ANR	2509719	ExpressionStatement	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"	1285:12:32036:32099	2509675	5	True				
ANR	2509720	CallExpression	"( ( const AttributeReference * ) expr ) -> GetComponents ( tree , attr , abs )"		2509675	0					
ANR	2509721	Callee	( ( const AttributeReference * ) expr ) -> GetComponents		2509675	0					
ANR	2509722	PtrMemberAccess	( ( const AttributeReference * ) expr ) -> GetComponents		2509675	0					
ANR	2509723	CastExpression	( const AttributeReference * ) expr		2509675	0					
ANR	2509724	CastTarget	const AttributeReference *		2509675	0					
ANR	2509725	Identifier	expr		2509675	1					
ANR	2509726	Identifier	GetComponents		2509675	1					
ANR	2509727	ArgumentList	tree		2509675	1					
ANR	2509728	Argument	tree		2509675	0					
ANR	2509729	Identifier	tree		2509675	0					
ANR	2509730	Argument	attr		2509675	1					
ANR	2509731	Identifier	attr		2509675	0					
ANR	2509732	Argument	abs		2509675	2					
ANR	2509733	Identifier	abs		2509675	0					
ANR	2509734	IfStatement	if ( tree == NULL )		2509675	6					
ANR	2509735	Condition	tree == NULL	1288:16:32177:32188	2509675	0	True				
ANR	2509736	EqualityExpression	tree == NULL		2509675	0		==			
ANR	2509737	Identifier	tree		2509675	0					
ANR	2509738	Identifier	NULL		2509675	1					
ANR	2509739	CompoundStatement		20:30:542:542	2509675	1					
ANR	2509740	ExpressionStatement	start = abs ? state . rootAd : state . curAd	1289:16:32209:32249	2509675	0	True				
ANR	2509741	AssignmentExpression	start = abs ? state . rootAd : state . curAd		2509675	0		=			
ANR	2509742	Identifier	start		2509675	0					
ANR	2509743	ConditionalExpression	abs ? state . rootAd : state . curAd		2509675	1					
ANR	2509744	Condition	abs		2509675	0					
ANR	2509745	Identifier	abs		2509675	0					
ANR	2509746	MemberAccess	state . rootAd		2509675	1					
ANR	2509747	Identifier	state		2509675	0					
ANR	2509748	Identifier	rootAd		2509675	1					
ANR	2509749	MemberAccess	state . curAd		2509675	2					
ANR	2509750	Identifier	state		2509675	0					
ANR	2509751	Identifier	curAd		2509675	1					
ANR	2509752	IfStatement	if ( abs && ( start == NULL ) )		2509675	1					
ANR	2509753	Condition	abs && ( start == NULL )	1291:20:32308:32329	2509675	0	True				
ANR	2509754	AndExpression	abs && ( start == NULL )		2509675	0		&&			
ANR	2509755	Identifier	abs		2509675	0					
ANR	2509756	EqualityExpression	start == NULL		2509675	1		==			
ANR	2509757	Identifier	start		2509675	0					
ANR	2509758	Identifier	NULL		2509675	1					
ANR	2509759	CompoundStatement		23:45:684:684	2509675	1					
ANR	2509760	ReturnStatement	return false ;	1292:20:32355:32367	2509675	0	True				
ANR	2509761	Identifier	false		2509675	0					
ANR	2509762	ElseStatement	else		2509675	0					
ANR	2509763	CompoundStatement		68:16:1944:1963	2509675	0					
ANR	2509764	IfStatement	"if ( ! tree -> Evaluate ( state , val ) )"		2509675	0					
ANR	2509765	Condition	"! tree -> Evaluate ( state , val )"	1295:20:32428:32454	2509675	0	True				
ANR	2509766	UnaryOperationExpression	"! tree -> Evaluate ( state , val )"		2509675	0					
ANR	2509767	UnaryOperator	!		2509675	0					
ANR	2509768	CallExpression	"tree -> Evaluate ( state , val )"		2509675	1					
ANR	2509769	Callee	tree -> Evaluate		2509675	0					
ANR	2509770	PtrMemberAccess	tree -> Evaluate		2509675	0					
ANR	2509771	Identifier	tree		2509675	0					
ANR	2509772	Identifier	Evaluate		2509675	1					
ANR	2509773	ArgumentList	state		2509675	1					
ANR	2509774	Argument	state		2509675	0					
ANR	2509775	Identifier	state		2509675	0					
ANR	2509776	Argument	val		2509675	1					
ANR	2509777	Identifier	val		2509675	0					
ANR	2509778	CompoundStatement		27:50:809:809	2509675	1					
ANR	2509779	ReturnStatement	return false ;	1296:20:32480:32492	2509675	0	True				
ANR	2509780	Identifier	false		2509675	0					
ANR	2509781	IfStatement	if ( val . IsUndefinedValue ( ) )		2509675	1					
ANR	2509782	Condition	val . IsUndefinedValue ( )	1310:20:32796:32817	2509675	0	True				
ANR	2509783	CallExpression	val . IsUndefinedValue ( )		2509675	0					
ANR	2509784	Callee	val . IsUndefinedValue		2509675	0					
ANR	2509785	MemberAccess	val . IsUndefinedValue		2509675	0					
ANR	2509786	Identifier	val		2509675	0					
ANR	2509787	Identifier	IsUndefinedValue		2509675	1					
ANR	2509788	ArgumentList			2509675	1					
ANR	2509789	CompoundStatement		42:45:1172:1172	2509675	1					
ANR	2509790	ReturnStatement	return true ;	1311:20:32843:32854	2509675	0	True				
ANR	2509791	Identifier	true		2509675	0					
ANR	2509792	IdentifierDeclStatement	"string nameToAddToRefs = """" ;"	1314:16:32891:32918	2509675	2	True				
ANR	2509793	IdentifierDecl	"nameToAddToRefs = """""		2509675	0					
ANR	2509794	IdentifierDeclType	string		2509675	0					
ANR	2509795	Identifier	nameToAddToRefs		2509675	1					
ANR	2509796	AssignmentExpression	"nameToAddToRefs = """""		2509675	2		=			
ANR	2509797	Identifier	nameToAddToRefs		2509675	0					
ANR	2509798	PrimaryExpression	""""""		2509675	1					
ANR	2509799	IdentifierDeclStatement	string prefixStr ;	1316:16:32937:32953	2509675	3	True				
ANR	2509800	IdentifierDecl	prefixStr		2509675	0					
ANR	2509801	IdentifierDeclType	string		2509675	0					
ANR	2509802	Identifier	prefixStr		2509675	1					
ANR	2509803	IfStatement	if ( tree != NULL )		2509675	4					
ANR	2509804	Condition	tree != NULL	1318:19:32975:32986	2509675	0	True				
ANR	2509805	EqualityExpression	tree != NULL		2509675	0		!=			
ANR	2509806	Identifier	tree		2509675	0					
ANR	2509807	Identifier	NULL		2509675	1					
ANR	2509808	CompoundStatement		52:20:1378:1402	2509675	1					
ANR	2509809	IdentifierDeclStatement	ClassAdUnParser unparser ;	1320:20:33027:33051	2509675	0	True				
ANR	2509810	IdentifierDecl	unparser		2509675	0					
ANR	2509811	IdentifierDeclType	ClassAdUnParser		2509675	0					
ANR	2509812	Identifier	unparser		2509675	1					
ANR	2509813	ExpressionStatement	"unparser . Unparse ( prefixStr , tree )"	1322:20:33142:33175	2509675	1	True				
ANR	2509814	CallExpression	"unparser . Unparse ( prefixStr , tree )"		2509675	0					
ANR	2509815	Callee	unparser . Unparse		2509675	0					
ANR	2509816	MemberAccess	unparser . Unparse		2509675	0					
ANR	2509817	Identifier	unparser		2509675	0					
ANR	2509818	Identifier	Unparse		2509675	1					
ANR	2509819	ArgumentList	prefixStr		2509675	1					
ANR	2509820	Argument	prefixStr		2509675	0					
ANR	2509821	Identifier	prefixStr		2509675	0					
ANR	2509822	Argument	tree		2509675	1					
ANR	2509823	Identifier	tree		2509675	0					
ANR	2509824	ExpressionStatement	nameToAddToRefs = prefixStr	1324:20:33244:33271	2509675	2	True				
ANR	2509825	AssignmentExpression	nameToAddToRefs = prefixStr		2509675	0		=			
ANR	2509826	Identifier	nameToAddToRefs		2509675	0					
ANR	2509827	Identifier	prefixStr		2509675	1					
ANR	2509828	IfStatement	if ( fullNames )		2509675	3					
ANR	2509829	Condition	fullNames	1326:23:33297:33305	2509675	0	True				
ANR	2509830	Identifier	fullNames		2509675	0					
ANR	2509831	CompoundStatement		59:20:1679:1679	2509675	1					
ANR	2509832	ExpressionStatement	"nameToAddToRefs += ""."""	1328:24:33354:33376	2509675	0	True				
ANR	2509833	AssignmentExpression	"nameToAddToRefs += ""."""		2509675	0		+=			
ANR	2509834	Identifier	nameToAddToRefs		2509675	0					
ANR	2509835	PrimaryExpression	"""."""		2509675	1					
ANR	2509836	ExpressionStatement	nameToAddToRefs += attr	1329:24:33402:33425	2509675	1	True				
ANR	2509837	AssignmentExpression	nameToAddToRefs += attr		2509675	0		+=			
ANR	2509838	Identifier	nameToAddToRefs		2509675	0					
ANR	2509839	Identifier	attr		2509675	1					
ANR	2509840	ExpressionStatement	refs . insert ( nameToAddToRefs )	1334:16:33546:33574	2509675	5	True				
ANR	2509841	CallExpression	refs . insert ( nameToAddToRefs )		2509675	0					
ANR	2509842	Callee	refs . insert		2509675	0					
ANR	2509843	MemberAccess	refs . insert		2509675	0					
ANR	2509844	Identifier	refs		2509675	0					
ANR	2509845	Identifier	insert		2509675	1					
ANR	2509846	ArgumentList	nameToAddToRefs		2509675	1					
ANR	2509847	Argument	nameToAddToRefs		2509675	0					
ANR	2509848	Identifier	nameToAddToRefs		2509675	0					
ANR	2509849	IdentifierDeclStatement	ExprTree * followRef ;	1336:16:33593:33612	2509675	6	True				
ANR	2509850	IdentifierDecl	* followRef		2509675	0					
ANR	2509851	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2509852	Identifier	followRef		2509675	1					
ANR	2509853	ExpressionStatement	followRef = ad -> Lookup ( prefixStr )	1339:16:33767:33800	2509675	7	True				
ANR	2509854	AssignmentExpression	followRef = ad -> Lookup ( prefixStr )		2509675	0		=			
ANR	2509855	Identifier	followRef		2509675	0					
ANR	2509856	CallExpression	ad -> Lookup ( prefixStr )		2509675	1					
ANR	2509857	Callee	ad -> Lookup		2509675	0					
ANR	2509858	PtrMemberAccess	ad -> Lookup		2509675	0					
ANR	2509859	Identifier	ad		2509675	0					
ANR	2509860	Identifier	Lookup		2509675	1					
ANR	2509861	ArgumentList	prefixStr		2509675	1					
ANR	2509862	Argument	prefixStr		2509675	0					
ANR	2509863	Identifier	prefixStr		2509675	0					
ANR	2509864	IfStatement	if ( followRef != NULL )		2509675	8					
ANR	2509865	Condition	followRef != NULL	1343:19:33986:34002	2509675	0	True				
ANR	2509866	EqualityExpression	followRef != NULL		2509675	0		!=			
ANR	2509867	Identifier	followRef		2509675	0					
ANR	2509868	Identifier	NULL		2509675	1					
ANR	2509869	CompoundStatement		76:16:2372:2372	2509675	1					
ANR	2509870	ReturnStatement	"return _GetInternalReferences ( followRef , ad , state , refs , fullNames ) ;"	1345:20:34043:34151	2509675	0	True				
ANR	2509871	CallExpression	"_GetInternalReferences ( followRef , ad , state , refs , fullNames )"		2509675	0					
ANR	2509872	Callee	_GetInternalReferences		2509675	0					
ANR	2509873	Identifier	_GetInternalReferences		2509675	0					
ANR	2509874	ArgumentList	followRef		2509675	1					
ANR	2509875	Argument	followRef		2509675	0					
ANR	2509876	Identifier	followRef		2509675	0					
ANR	2509877	Argument	ad		2509675	1					
ANR	2509878	Identifier	ad		2509675	0					
ANR	2509879	Argument	state		2509675	2					
ANR	2509880	Identifier	state		2509675	0					
ANR	2509881	Argument	refs		2509675	3					
ANR	2509882	Identifier	refs		2509675	0					
ANR	2509883	Argument	fullNames		2509675	4					
ANR	2509884	Identifier	fullNames		2509675	0					
ANR	2509885	IfStatement	if ( ! val . IsClassAdValue ( start ) )		2509675	9					
ANR	2509886	Condition	! val . IsClassAdValue ( start )	1352:20:34339:34366	2509675	0	True				
ANR	2509887	UnaryOperationExpression	! val . IsClassAdValue ( start )		2509675	0					
ANR	2509888	UnaryOperator	!		2509675	0					
ANR	2509889	CallExpression	val . IsClassAdValue ( start )		2509675	1					
ANR	2509890	Callee	val . IsClassAdValue		2509675	0					
ANR	2509891	MemberAccess	val . IsClassAdValue		2509675	0					
ANR	2509892	Identifier	val		2509675	0					
ANR	2509893	Identifier	IsClassAdValue		2509675	1					
ANR	2509894	ArgumentList	start		2509675	1					
ANR	2509895	Argument	start		2509675	0					
ANR	2509896	Identifier	start		2509675	0					
ANR	2509897	CompoundStatement		84:51:2721:2721	2509675	1					
ANR	2509898	ReturnStatement	return false ;	1353:20:34392:34404	2509675	0	True				
ANR	2509899	Identifier	false		2509675	0					
ANR	2509900	IdentifierDeclStatement	const ClassAd * curAd = state . curAd ;	1357:12:34451:34485	2509675	7	True				
ANR	2509901	IdentifierDecl	* curAd = state . curAd		2509675	0					
ANR	2509902	IdentifierDeclType	const ClassAd *		2509675	0					
ANR	2509903	Identifier	curAd		2509675	1					
ANR	2509904	AssignmentExpression	* curAd = state . curAd		2509675	2		=			
ANR	2509905	Identifier	curAd		2509675	0					
ANR	2509906	MemberAccess	state . curAd		2509675	1					
ANR	2509907	Identifier	state		2509675	0					
ANR	2509908	Identifier	curAd		2509675	1					
ANR	2509909	SwitchStatement	"switch ( start -> LookupInScope ( attr , result , state ) )"		2509675	8					
ANR	2509910	Condition	"start -> LookupInScope ( attr , result , state )"	1358:20:34507:34548	2509675	0	True				
ANR	2509911	CallExpression	"start -> LookupInScope ( attr , result , state )"		2509675	0					
ANR	2509912	Callee	start -> LookupInScope		2509675	0					
ANR	2509913	PtrMemberAccess	start -> LookupInScope		2509675	0					
ANR	2509914	Identifier	start		2509675	0					
ANR	2509915	Identifier	LookupInScope		2509675	1					
ANR	2509916	ArgumentList	attr		2509675	1					
ANR	2509917	Argument	attr		2509675	0					
ANR	2509918	Identifier	attr		2509675	0					
ANR	2509919	Argument	result		2509675	1					
ANR	2509920	Identifier	result		2509675	0					
ANR	2509921	Argument	state		2509675	2					
ANR	2509922	Identifier	state		2509675	0					
ANR	2509923	CompoundStatement		90:65:2903:2903	2509675	1					
ANR	2509924	Label	case EVAL_ERROR :	1359:16:34570:34585	2509675	0	True				
ANR	2509925	Identifier	EVAL_ERROR		2509675	0					
ANR	2509926	ReturnStatement	return false ;	1360:20:34607:34619	2509675	1	True				
ANR	2509927	Identifier	false		2509675	0					
ANR	2509928	BreakStatement	break ;	1361:16:34637:34642	2509675	2	True				
ANR	2509929	Label	case EVAL_UNDEF :	1366:16:34789:34804	2509675	3	True				
ANR	2509930	Identifier	EVAL_UNDEF		2509675	0					
ANR	2509931	CompoundStatement		98:32:3156:3156	2509675	4					
ANR	2509932	ReturnStatement	return true ;	1370:20:34985:34996	2509675	0	True				
ANR	2509933	Identifier	true		2509675	0					
ANR	2509934	BreakStatement	break ;	1371:16:35014:35019	2509675	1	True				
ANR	2509935	Label	case EVAL_OK :	1374:16:35072:35084	2509675	5	True				
ANR	2509936	Identifier	EVAL_OK		2509675	0					
ANR	2509937	CompoundStatement		115:20:3749:3818	2509675	6					
ANR	2509938	ExpressionStatement	refs . insert ( attr )	1376:20:35153:35170	2509675	0	True				
ANR	2509939	CallExpression	refs . insert ( attr )		2509675	0					
ANR	2509940	Callee	refs . insert		2509675	0					
ANR	2509941	MemberAccess	refs . insert		2509675	0					
ANR	2509942	Identifier	refs		2509675	0					
ANR	2509943	Identifier	insert		2509675	1					
ANR	2509944	ArgumentList	attr		2509675	1					
ANR	2509945	Argument	attr		2509675	0					
ANR	2509946	Identifier	attr		2509675	0					
ANR	2509947	IfStatement	if ( state . depth_remaining <= 0 )		2509675	1					
ANR	2509948	Condition	state . depth_remaining <= 0	1377:24:35196:35221	2509675	0	True				
ANR	2509949	RelationalExpression	state . depth_remaining <= 0		2509675	0		<=			
ANR	2509950	MemberAccess	state . depth_remaining		2509675	0					
ANR	2509951	Identifier	state		2509675	0					
ANR	2509952	Identifier	depth_remaining		2509675	1					
ANR	2509953	PrimaryExpression	0		2509675	1					
ANR	2509954	CompoundStatement		109:53:3576:3576	2509675	1					
ANR	2509955	ExpressionStatement	state . curAd = curAd	1378:24:35251:35270	2509675	0	True				
ANR	2509956	AssignmentExpression	state . curAd = curAd		2509675	0		=			
ANR	2509957	MemberAccess	state . curAd		2509675	0					
ANR	2509958	Identifier	state		2509675	0					
ANR	2509959	Identifier	curAd		2509675	1					
ANR	2509960	Identifier	curAd		2509675	1					
ANR	2509961	ReturnStatement	return false ;	1379:24:35296:35308	2509675	1	True				
ANR	2509962	Identifier	false		2509675	0					
ANR	2509963	ExpressionStatement	state . depth_remaining --	1381:20:35352:35375	2509675	2	True				
ANR	2509964	PostIncDecOperationExpression	state . depth_remaining --		2509675	0					
ANR	2509965	MemberAccess	state . depth_remaining		2509675	0					
ANR	2509966	Identifier	state		2509675	0					
ANR	2509967	Identifier	depth_remaining		2509675	1					
ANR	2509968	IncDec	--		2509675	1					
ANR	2509969	IdentifierDeclStatement	"bool rval = _GetInternalReferences ( result , ad , state , refs , fullNames ) ;"	1383:20:35398:35467	2509675	3	True				
ANR	2509970	IdentifierDecl	"rval = _GetInternalReferences ( result , ad , state , refs , fullNames )"		2509675	0					
ANR	2509971	IdentifierDeclType	bool		2509675	0					
ANR	2509972	Identifier	rval		2509675	1					
ANR	2509973	AssignmentExpression	"rval = _GetInternalReferences ( result , ad , state , refs , fullNames )"		2509675	2		=			
ANR	2509974	Identifier	rval		2509675	0					
ANR	2509975	CallExpression	"_GetInternalReferences ( result , ad , state , refs , fullNames )"		2509675	1					
ANR	2509976	Callee	_GetInternalReferences		2509675	0					
ANR	2509977	Identifier	_GetInternalReferences		2509675	0					
ANR	2509978	ArgumentList	result		2509675	1					
ANR	2509979	Argument	result		2509675	0					
ANR	2509980	Identifier	result		2509675	0					
ANR	2509981	Argument	ad		2509675	1					
ANR	2509982	Identifier	ad		2509675	0					
ANR	2509983	Argument	state		2509675	2					
ANR	2509984	Identifier	state		2509675	0					
ANR	2509985	Argument	refs		2509675	3					
ANR	2509986	Identifier	refs		2509675	0					
ANR	2509987	Argument	fullNames		2509675	4					
ANR	2509988	Identifier	fullNames		2509675	0					
ANR	2509989	ExpressionStatement	state . depth_remaining ++	1385:20:35490:35513	2509675	4	True				
ANR	2509990	PostIncDecOperationExpression	state . depth_remaining ++		2509675	0					
ANR	2509991	MemberAccess	state . depth_remaining		2509675	0					
ANR	2509992	Identifier	state		2509675	0					
ANR	2509993	Identifier	depth_remaining		2509675	1					
ANR	2509994	IncDec	++		2509675	1					
ANR	2509995	ExpressionStatement	state . curAd = curAd	1387:20:35590:35609	2509675	5	True				
ANR	2509996	AssignmentExpression	state . curAd = curAd		2509675	0		=			
ANR	2509997	MemberAccess	state . curAd		2509675	0					
ANR	2509998	Identifier	state		2509675	0					
ANR	2509999	Identifier	curAd		2509675	1					
ANR	2510000	Identifier	curAd		2509675	1					
ANR	2510001	ReturnStatement	return rval ;	1388:20:35631:35642	2509675	6	True				
ANR	2510002	Identifier	rval		2509675	0					
ANR	2510003	BreakStatement	break ;	1389:16:35660:35665	2509675	7	True				
ANR	2510004	Label	default :	1392:16:35718:35725	2509675	7	True				
ANR	2510005	Identifier	default		2509675	0					
ANR	2510006	ReturnStatement	return false ;	1394:20:35778:35790	2509675	8	True				
ANR	2510007	Identifier	false		2509675	0					
ANR	2510008	BreakStatement	break ;	1395:16:35808:35813	2509675	9	True				
ANR	2510009	BreakStatement	break ;	1398:8:35838:35843	2509675	9	True				
ANR	2510010	Label	case OP_NODE :	1402:8:35887:35899	2509675	4	True				
ANR	2510011	Identifier	OP_NODE		2509675	0					
ANR	2510012	CompoundStatement		138:12:4340:4377	2509675	5					
ANR	2510013	IdentifierDeclStatement	Operation :: OpKind op ;	1405:12:35949:35975	2509675	0	True				
ANR	2510014	IdentifierDecl	op		2509675	0					
ANR	2510015	IdentifierDeclType	Operation :: OpKind		2509675	0					
ANR	2510016	Identifier	op		2509675	1					
ANR	2510017	IdentifierDeclStatement	"ExprTree * t1 , * t2 , * t3 ;"	1406:12:35989:36026	2509675	1	True				
ANR	2510018	IdentifierDecl	* t1		2509675	0					
ANR	2510019	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2510020	Identifier	t1		2509675	1					
ANR	2510021	IdentifierDecl	* t2		2509675	1					
ANR	2510022	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2510023	Identifier	t2		2509675	1					
ANR	2510024	IdentifierDecl	* t3		2509675	2					
ANR	2510025	IdentifierDeclType	ExprTree *		2509675	0					
ANR	2510026	Identifier	t3		2509675	1					
ANR	2510027	ExpressionStatement	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"	1407:12:36040:36095	2509675	2	True				
ANR	2510028	CallExpression	"( ( const Operation * ) expr ) -> GetComponents ( op , t1 , t2 , t3 )"		2509675	0					
ANR	2510029	Callee	( ( const Operation * ) expr ) -> GetComponents		2509675	0					
ANR	2510030	PtrMemberAccess	( ( const Operation * ) expr ) -> GetComponents		2509675	0					
ANR	2510031	CastExpression	( const Operation * ) expr		2509675	0					
ANR	2510032	CastTarget	const Operation *		2509675	0					
ANR	2510033	Identifier	expr		2509675	1					
ANR	2510034	Identifier	GetComponents		2509675	1					
ANR	2510035	ArgumentList	op		2509675	1					
ANR	2510036	Argument	op		2509675	0					
ANR	2510037	Identifier	op		2509675	0					
ANR	2510038	Argument	t1		2509675	1					
ANR	2510039	Identifier	t1		2509675	0					
ANR	2510040	Argument	t2		2509675	2					
ANR	2510041	Identifier	t2		2509675	0					
ANR	2510042	Argument	t3		2509675	3					
ANR	2510043	Identifier	t3		2509675	0					
ANR	2510044	IfStatement	"if ( t1 && ! _GetInternalReferences ( t1 , ad , state , refs , fullNames ) )"		2509675	3					
ANR	2510045	Condition	"t1 && ! _GetInternalReferences ( t1 , ad , state , refs , fullNames )"	1408:16:36113:36173	2509675	0	True				
ANR	2510046	AndExpression	"t1 && ! _GetInternalReferences ( t1 , ad , state , refs , fullNames )"		2509675	0		&&			
ANR	2510047	Identifier	t1		2509675	0					
ANR	2510048	UnaryOperationExpression	"! _GetInternalReferences ( t1 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510049	UnaryOperator	!		2509675	0					
ANR	2510050	CallExpression	"_GetInternalReferences ( t1 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510051	Callee	_GetInternalReferences		2509675	0					
ANR	2510052	Identifier	_GetInternalReferences		2509675	0					
ANR	2510053	ArgumentList	t1		2509675	1					
ANR	2510054	Argument	t1		2509675	0					
ANR	2510055	Identifier	t1		2509675	0					
ANR	2510056	Argument	ad		2509675	1					
ANR	2510057	Identifier	ad		2509675	0					
ANR	2510058	Argument	state		2509675	2					
ANR	2510059	Identifier	state		2509675	0					
ANR	2510060	Argument	refs		2509675	3					
ANR	2510061	Identifier	refs		2509675	0					
ANR	2510062	Argument	fullNames		2509675	4					
ANR	2510063	Identifier	fullNames		2509675	0					
ANR	2510064	CompoundStatement		140:79:4527:4527	2509675	1					
ANR	2510065	ReturnStatement	return false ;	1409:16:36194:36206	2509675	0	True				
ANR	2510066	Identifier	false		2509675	0					
ANR	2510067	IfStatement	"if ( t2 && ! _GetInternalReferences ( t2 , ad , state , refs , fullNames ) )"		2509675	4					
ANR	2510068	Condition	"t2 && ! _GetInternalReferences ( t2 , ad , state , refs , fullNames )"	1412:16:36239:36299	2509675	0	True				
ANR	2510069	AndExpression	"t2 && ! _GetInternalReferences ( t2 , ad , state , refs , fullNames )"		2509675	0		&&			
ANR	2510070	Identifier	t2		2509675	0					
ANR	2510071	UnaryOperationExpression	"! _GetInternalReferences ( t2 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510072	UnaryOperator	!		2509675	0					
ANR	2510073	CallExpression	"_GetInternalReferences ( t2 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510074	Callee	_GetInternalReferences		2509675	0					
ANR	2510075	Identifier	_GetInternalReferences		2509675	0					
ANR	2510076	ArgumentList	t2		2509675	1					
ANR	2510077	Argument	t2		2509675	0					
ANR	2510078	Identifier	t2		2509675	0					
ANR	2510079	Argument	ad		2509675	1					
ANR	2510080	Identifier	ad		2509675	0					
ANR	2510081	Argument	state		2509675	2					
ANR	2510082	Identifier	state		2509675	0					
ANR	2510083	Argument	refs		2509675	3					
ANR	2510084	Identifier	refs		2509675	0					
ANR	2510085	Argument	fullNames		2509675	4					
ANR	2510086	Identifier	fullNames		2509675	0					
ANR	2510087	CompoundStatement		144:79:4653:4653	2509675	1					
ANR	2510088	ReturnStatement	return false ;	1413:16:36320:36332	2509675	0	True				
ANR	2510089	Identifier	false		2509675	0					
ANR	2510090	IfStatement	"if ( t3 && ! _GetInternalReferences ( t3 , ad , state , refs , fullNames ) )"		2509675	5					
ANR	2510091	Condition	"t3 && ! _GetInternalReferences ( t3 , ad , state , refs , fullNames )"	1416:16:36365:36425	2509675	0	True				
ANR	2510092	AndExpression	"t3 && ! _GetInternalReferences ( t3 , ad , state , refs , fullNames )"		2509675	0		&&			
ANR	2510093	Identifier	t3		2509675	0					
ANR	2510094	UnaryOperationExpression	"! _GetInternalReferences ( t3 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510095	UnaryOperator	!		2509675	0					
ANR	2510096	CallExpression	"_GetInternalReferences ( t3 , ad , state , refs , fullNames )"		2509675	1					
ANR	2510097	Callee	_GetInternalReferences		2509675	0					
ANR	2510098	Identifier	_GetInternalReferences		2509675	0					
ANR	2510099	ArgumentList	t3		2509675	1					
ANR	2510100	Argument	t3		2509675	0					
ANR	2510101	Identifier	t3		2509675	0					
ANR	2510102	Argument	ad		2509675	1					
ANR	2510103	Identifier	ad		2509675	0					
ANR	2510104	Argument	state		2509675	2					
ANR	2510105	Identifier	state		2509675	0					
ANR	2510106	Argument	refs		2509675	3					
ANR	2510107	Identifier	refs		2509675	0					
ANR	2510108	Argument	fullNames		2509675	4					
ANR	2510109	Identifier	fullNames		2509675	0					
ANR	2510110	CompoundStatement		148:79:4779:4779	2509675	1					
ANR	2510111	ReturnStatement	return false ;	1417:16:36446:36458	2509675	0	True				
ANR	2510112	Identifier	false		2509675	0					
ANR	2510113	ReturnStatement	return true ;	1420:12:36487:36498	2509675	6	True				
ANR	2510114	Identifier	true		2509675	0					
ANR	2510115	BreakStatement	break ;	1421:8:36508:36513	2509675	7	True				
ANR	2510116	Label	case FN_CALL_NODE :	1424:8:36534:36551	2509675	6	True				
ANR	2510117	Identifier	FN_CALL_NODE		2509675	0					
ANR	2510118	CompoundStatement		160:12:5058:5093	2509675	7					
ANR	2510119	IdentifierDeclStatement	string fnName ;	1426:12:36605:36643	2509675	0	True				
ANR	2510120	IdentifierDecl	fnName		2509675	0					
ANR	2510121	IdentifierDeclType	string		2509675	0					
ANR	2510122	Identifier	fnName		2509675	1					
ANR	2510123	IdentifierDeclStatement	vector < ExprTree * > args ;	1427:12:36657:36693	2509675	1	True				
ANR	2510124	IdentifierDecl	args		2509675	0					
ANR	2510125	IdentifierDeclType	vector < ExprTree * >		2509675	0					
ANR	2510126	Identifier	args		2509675	1					
ANR	2510127	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1428:12:36707:36742	2509675	2	True				
ANR	2510128	IdentifierDecl	itr		2509675	0					
ANR	2510129	IdentifierDeclType	vector < ExprTree * > :: iterator		2509675	0					
ANR	2510130	Identifier	itr		2509675	1					
ANR	2510131	ExpressionStatement	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"	1430:12:36757:36813	2509675	3	True				
ANR	2510132	CallExpression	"( ( const FunctionCall * ) expr ) -> GetComponents ( fnName , args )"		2509675	0					
ANR	2510133	Callee	( ( const FunctionCall * ) expr ) -> GetComponents		2509675	0					
ANR	2510134	PtrMemberAccess	( ( const FunctionCall * ) expr ) -> GetComponents		2509675	0					
ANR	2510135	CastExpression	( const FunctionCall * ) expr		2509675	0					
ANR	2510136	CastTarget	const FunctionCall *		2509675	0					
ANR	2510137	Identifier	expr		2509675	1					
ANR	2510138	Identifier	GetComponents		2509675	1					
ANR	2510139	ArgumentList	fnName		2509675	1					
ANR	2510140	Argument	fnName		2509675	0					
ANR	2510141	Identifier	fnName		2509675	0					
ANR	2510142	Argument	args		2509675	1					
ANR	2510143	Identifier	args		2509675	0					
ANR	2510144	ForStatement	for ( itr = args . begin ( ) ; itr != args . end ( ) ; itr ++ )		2509675	4					
ANR	2510145	ForInit	itr = args . begin ( ) ;	1431:17:36832:36850	2509675	0	True				
ANR	2510146	AssignmentExpression	itr = args . begin ( )		2509675	0		=			
ANR	2510147	Identifier	itr		2509675	0					
ANR	2510148	CallExpression	args . begin ( )		2509675	1					
ANR	2510149	Callee	args . begin		2509675	0					
ANR	2510150	MemberAccess	args . begin		2509675	0					
ANR	2510151	Identifier	args		2509675	0					
ANR	2510152	Identifier	begin		2509675	1					
ANR	2510153	ArgumentList			2509675	1					
ANR	2510154	Condition	itr != args . end ( )	1431:37:36852:36868	2509675	1	True				
ANR	2510155	EqualityExpression	itr != args . end ( )		2509675	0		!=			
ANR	2510156	Identifier	itr		2509675	0					
ANR	2510157	CallExpression	args . end ( )		2509675	1					
ANR	2510158	Callee	args . end		2509675	0					
ANR	2510159	MemberAccess	args . end		2509675	0					
ANR	2510160	Identifier	args		2509675	0					
ANR	2510161	Identifier	end		2509675	1					
ANR	2510162	ArgumentList			2509675	1					
ANR	2510163	PostIncDecOperationExpression	itr ++	1431:56:36871:36875	2509675	2	True				
ANR	2510164	Identifier	itr		2509675	0					
ANR	2510165	IncDec	++		2509675	1					
ANR	2510166	CompoundStatement		163:62:5228:5228	2509675	3					
ANR	2510167	IfStatement	"if ( ! _GetInternalReferences ( * itr , ad , state , refs , fullNames ) )"		2509675	0					
ANR	2510168	Condition	"! _GetInternalReferences ( * itr , ad , state , refs , fullNames )"	1432:20:36899:36956	2509675	0	True				
ANR	2510169	UnaryOperationExpression	"! _GetInternalReferences ( * itr , ad , state , refs , fullNames )"		2509675	0					
ANR	2510170	UnaryOperator	!		2509675	0					
ANR	2510171	CallExpression	"_GetInternalReferences ( * itr , ad , state , refs , fullNames )"		2509675	1					
ANR	2510172	Callee	_GetInternalReferences		2509675	0					
ANR	2510173	Identifier	_GetInternalReferences		2509675	0					
ANR	2510174	ArgumentList	* itr		2509675	1					
ANR	2510175	Argument	* itr		2509675	0					
ANR	2510176	UnaryOperationExpression	* itr		2509675	0					
ANR	2510177	UnaryOperator	*		2509675	0					
ANR	2510178	Identifier	itr		2509675	1					
ANR	2510179	Argument	ad		2509675	1					
ANR	2510180	Identifier	ad		2509675	0					
ANR	2510181	Argument	state		2509675	2					
ANR	2510182	Identifier	state		2509675	0					
ANR	2510183	Argument	refs		2509675	3					
ANR	2510184	Identifier	refs		2509675	0					
ANR	2510185	Argument	fullNames		2509675	4					
ANR	2510186	Identifier	fullNames		2509675	0					
ANR	2510187	CompoundStatement		164:81:5311:5311	2509675	1					
ANR	2510188	ReturnStatement	return false ;	1433:20:36982:36994	2509675	0	True				
ANR	2510189	Identifier	false		2509675	0					
ANR	2510190	ReturnStatement	return true ;	1437:12:37041:37052	2509675	5	True				
ANR	2510191	Identifier	true		2509675	0					
ANR	2510192	BreakStatement	break ;	1438:8:37062:37067	2509675	6	True				
ANR	2510193	Label	case CLASSAD_NODE :	1441:8:37106:37123	2509675	8	True				
ANR	2510194	Identifier	CLASSAD_NODE		2509675	0					
ANR	2510195	CompoundStatement		176:12:5598:5649	2509675	9					
ANR	2510196	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > attrs ;"	1443:12:37180:37233	2509675	0	True				
ANR	2510197	IdentifierDecl	attrs		2509675	0					
ANR	2510198	IdentifierDeclType	"vector < pair < string , ExprTree * > >"		2509675	0					
ANR	2510199	Identifier	attrs		2509675	1					
ANR	2510200	IdentifierDeclStatement	"vector < pair < string , ExprTree * > > :: iterator itr ;"	1444:12:37247:37298	2509675	1	True				
ANR	2510201	IdentifierDecl	itr		2509675	0					
ANR	2510202	IdentifierDeclType	"vector < pair < string , ExprTree * > > :: iterator"		2509675	0					
ANR	2510203	Identifier	itr		2509675	1					
ANR	2510204	ExpressionStatement	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )	1446:12:37313:37357	2509675	2	True				
ANR	2510205	CallExpression	( ( const ClassAd * ) expr ) -> GetComponents ( attrs )		2509675	0					
ANR	2510206	Callee	( ( const ClassAd * ) expr ) -> GetComponents		2509675	0					
ANR	2510207	PtrMemberAccess	( ( const ClassAd * ) expr ) -> GetComponents		2509675	0					
ANR	2510208	CastExpression	( const ClassAd * ) expr		2509675	0					
ANR	2510209	CastTarget	const ClassAd *		2509675	0					
ANR	2510210	Identifier	expr		2509675	1					
ANR	2510211	Identifier	GetComponents		2509675	1					
ANR	2510212	ArgumentList	attrs		2509675	1					
ANR	2510213	Argument	attrs		2509675	0					
ANR	2510214	Identifier	attrs		2509675	0					
ANR	2510215	ForStatement	for ( itr = attrs . begin ( ) ; itr != attrs . end ( ) ; itr ++ )		2509675	3					
ANR	2510216	ForInit	itr = attrs . begin ( ) ;	1447:16:37375:37394	2509675	0	True				
ANR	2510217	AssignmentExpression	itr = attrs . begin ( )		2509675	0		=			
ANR	2510218	Identifier	itr		2509675	0					
ANR	2510219	CallExpression	attrs . begin ( )		2509675	1					
ANR	2510220	Callee	attrs . begin		2509675	0					
ANR	2510221	MemberAccess	attrs . begin		2509675	0					
ANR	2510222	Identifier	attrs		2509675	0					
ANR	2510223	Identifier	begin		2509675	1					
ANR	2510224	ArgumentList			2509675	1					
ANR	2510225	Condition	itr != attrs . end ( )	1447:37:37396:37413	2509675	1	True				
ANR	2510226	EqualityExpression	itr != attrs . end ( )		2509675	0		!=			
ANR	2510227	Identifier	itr		2509675	0					
ANR	2510228	CallExpression	attrs . end ( )		2509675	1					
ANR	2510229	Callee	attrs . end		2509675	0					
ANR	2510230	MemberAccess	attrs . end		2509675	0					
ANR	2510231	Identifier	attrs		2509675	0					
ANR	2510232	Identifier	end		2509675	1					
ANR	2510233	ArgumentList			2509675	1					
ANR	2510234	PostIncDecOperationExpression	itr ++	1447:57:37416:37420	2509675	2	True				
ANR	2510235	Identifier	itr		2509675	0					
ANR	2510236	IncDec	++		2509675	1					
ANR	2510237	CompoundStatement		185:16:5936:6010	2509675	3					
ANR	2510238	IfStatement	if ( state . depth_remaining <= 0 )		2509675	0					
ANR	2510239	Condition	state . depth_remaining <= 0	1448:20:37444:37469	2509675	0	True				
ANR	2510240	RelationalExpression	state . depth_remaining <= 0		2509675	0		<=			
ANR	2510241	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510242	Identifier	state		2509675	0					
ANR	2510243	Identifier	depth_remaining		2509675	1					
ANR	2510244	PrimaryExpression	0		2509675	1					
ANR	2510245	CompoundStatement		180:49:5824:5824	2509675	1					
ANR	2510246	ReturnStatement	return false ;	1449:20:37495:37507	2509675	0	True				
ANR	2510247	Identifier	false		2509675	0					
ANR	2510248	ExpressionStatement	state . depth_remaining --	1451:16:37543:37566	2509675	1	True				
ANR	2510249	PostIncDecOperationExpression	state . depth_remaining --		2509675	0					
ANR	2510250	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510251	Identifier	state		2509675	0					
ANR	2510252	Identifier	depth_remaining		2509675	1					
ANR	2510253	IncDec	--		2509675	1					
ANR	2510254	IdentifierDeclStatement	"bool ret = _GetInternalReferences ( itr -> second , ad , state , refs , fullNames ) ;"	1453:16:37585:37659	2509675	2	True				
ANR	2510255	IdentifierDecl	"ret = _GetInternalReferences ( itr -> second , ad , state , refs , fullNames )"		2509675	0					
ANR	2510256	IdentifierDeclType	bool		2509675	0					
ANR	2510257	Identifier	ret		2509675	1					
ANR	2510258	AssignmentExpression	"ret = _GetInternalReferences ( itr -> second , ad , state , refs , fullNames )"		2509675	2		=			
ANR	2510259	Identifier	ret		2509675	0					
ANR	2510260	CallExpression	"_GetInternalReferences ( itr -> second , ad , state , refs , fullNames )"		2509675	1					
ANR	2510261	Callee	_GetInternalReferences		2509675	0					
ANR	2510262	Identifier	_GetInternalReferences		2509675	0					
ANR	2510263	ArgumentList	itr -> second		2509675	1					
ANR	2510264	Argument	itr -> second		2509675	0					
ANR	2510265	PtrMemberAccess	itr -> second		2509675	0					
ANR	2510266	Identifier	itr		2509675	0					
ANR	2510267	Identifier	second		2509675	1					
ANR	2510268	Argument	ad		2509675	1					
ANR	2510269	Identifier	ad		2509675	0					
ANR	2510270	Argument	state		2509675	2					
ANR	2510271	Identifier	state		2509675	0					
ANR	2510272	Argument	refs		2509675	3					
ANR	2510273	Identifier	refs		2509675	0					
ANR	2510274	Argument	fullNames		2509675	4					
ANR	2510275	Identifier	fullNames		2509675	0					
ANR	2510276	ExpressionStatement	state . depth_remaining ++	1455:16:37678:37701	2509675	3	True				
ANR	2510277	PostIncDecOperationExpression	state . depth_remaining ++		2509675	0					
ANR	2510278	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510279	Identifier	state		2509675	0					
ANR	2510280	Identifier	depth_remaining		2509675	1					
ANR	2510281	IncDec	++		2509675	1					
ANR	2510282	IfStatement	if ( ! ret )		2509675	4					
ANR	2510283	Condition	! ret	1456:20:37723:37726	2509675	0	True				
ANR	2510284	UnaryOperationExpression	! ret		2509675	0					
ANR	2510285	UnaryOperator	!		2509675	0					
ANR	2510286	Identifier	ret		2509675	1					
ANR	2510287	CompoundStatement		188:27:6081:6081	2509675	1					
ANR	2510288	ReturnStatement	return false ;	1457:20:37752:37764	2509675	0	True				
ANR	2510289	Identifier	false		2509675	0					
ANR	2510290	ReturnStatement	return true ;	1461:12:37811:37822	2509675	4	True				
ANR	2510291	Identifier	true		2509675	0					
ANR	2510292	BreakStatement	break ;	1462:8:37832:37837	2509675	5	True				
ANR	2510293	Label	case EXPR_LIST_NODE :	1465:8:37862:37881	2509675	10	True				
ANR	2510294	Identifier	EXPR_LIST_NODE		2509675	0					
ANR	2510295	CompoundStatement		199:12:6298:6333	2509675	11					
ANR	2510296	IdentifierDeclStatement	vector < ExprTree * > exprs ;	1466:12:37896:37933	2509675	0	True				
ANR	2510297	IdentifierDecl	exprs		2509675	0					
ANR	2510298	IdentifierDeclType	vector < ExprTree * >		2509675	0					
ANR	2510299	Identifier	exprs		2509675	1					
ANR	2510300	IdentifierDeclStatement	vector < ExprTree * > :: iterator itr ;	1467:12:37947:37982	2509675	1	True				
ANR	2510301	IdentifierDecl	itr		2509675	0					
ANR	2510302	IdentifierDeclType	vector < ExprTree * > :: iterator		2509675	0					
ANR	2510303	Identifier	itr		2509675	1					
ANR	2510304	ExpressionStatement	( ( const ExprList * ) expr ) -> GetComponents ( exprs )	1469:12:37997:38042	2509675	2	True				
ANR	2510305	CallExpression	( ( const ExprList * ) expr ) -> GetComponents ( exprs )		2509675	0					
ANR	2510306	Callee	( ( const ExprList * ) expr ) -> GetComponents		2509675	0					
ANR	2510307	PtrMemberAccess	( ( const ExprList * ) expr ) -> GetComponents		2509675	0					
ANR	2510308	CastExpression	( const ExprList * ) expr		2509675	0					
ANR	2510309	CastTarget	const ExprList *		2509675	0					
ANR	2510310	Identifier	expr		2509675	1					
ANR	2510311	Identifier	GetComponents		2509675	1					
ANR	2510312	ArgumentList	exprs		2509675	1					
ANR	2510313	Argument	exprs		2509675	0					
ANR	2510314	Identifier	exprs		2509675	0					
ANR	2510315	ForStatement	for ( itr = exprs . begin ( ) ; itr != exprs . end ( ) ; itr ++ )		2509675	3					
ANR	2510316	ForInit	itr = exprs . begin ( ) ;	1470:16:38060:38079	2509675	0	True				
ANR	2510317	AssignmentExpression	itr = exprs . begin ( )		2509675	0		=			
ANR	2510318	Identifier	itr		2509675	0					
ANR	2510319	CallExpression	exprs . begin ( )		2509675	1					
ANR	2510320	Callee	exprs . begin		2509675	0					
ANR	2510321	MemberAccess	exprs . begin		2509675	0					
ANR	2510322	Identifier	exprs		2509675	0					
ANR	2510323	Identifier	begin		2509675	1					
ANR	2510324	ArgumentList			2509675	1					
ANR	2510325	Condition	itr != exprs . end ( )	1470:37:38081:38098	2509675	1	True				
ANR	2510326	EqualityExpression	itr != exprs . end ( )		2509675	0		!=			
ANR	2510327	Identifier	itr		2509675	0					
ANR	2510328	CallExpression	exprs . end ( )		2509675	1					
ANR	2510329	Callee	exprs . end		2509675	0					
ANR	2510330	MemberAccess	exprs . end		2509675	0					
ANR	2510331	Identifier	exprs		2509675	0					
ANR	2510332	Identifier	end		2509675	1					
ANR	2510333	ArgumentList			2509675	1					
ANR	2510334	PostIncDecOperationExpression	itr ++	1470:57:38101:38105	2509675	2	True				
ANR	2510335	Identifier	itr		2509675	0					
ANR	2510336	IncDec	++		2509675	1					
ANR	2510337	CompoundStatement		208:16:6621:6688	2509675	3					
ANR	2510338	IfStatement	if ( state . depth_remaining <= 0 )		2509675	0					
ANR	2510339	Condition	state . depth_remaining <= 0	1471:20:38129:38154	2509675	0	True				
ANR	2510340	RelationalExpression	state . depth_remaining <= 0		2509675	0		<=			
ANR	2510341	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510342	Identifier	state		2509675	0					
ANR	2510343	Identifier	depth_remaining		2509675	1					
ANR	2510344	PrimaryExpression	0		2509675	1					
ANR	2510345	CompoundStatement		203:49:6509:6509	2509675	1					
ANR	2510346	ReturnStatement	return false ;	1472:20:38180:38192	2509675	0	True				
ANR	2510347	Identifier	false		2509675	0					
ANR	2510348	ExpressionStatement	state . depth_remaining --	1474:16:38228:38251	2509675	1	True				
ANR	2510349	PostIncDecOperationExpression	state . depth_remaining --		2509675	0					
ANR	2510350	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510351	Identifier	state		2509675	0					
ANR	2510352	Identifier	depth_remaining		2509675	1					
ANR	2510353	IncDec	--		2509675	1					
ANR	2510354	IdentifierDeclStatement	"bool ret = _GetInternalReferences ( * itr , ad , state , refs , fullNames ) ;"	1476:16:38270:38337	2509675	2	True				
ANR	2510355	IdentifierDecl	"ret = _GetInternalReferences ( * itr , ad , state , refs , fullNames )"		2509675	0					
ANR	2510356	IdentifierDeclType	bool		2509675	0					
ANR	2510357	Identifier	ret		2509675	1					
ANR	2510358	AssignmentExpression	"ret = _GetInternalReferences ( * itr , ad , state , refs , fullNames )"		2509675	2		=			
ANR	2510359	Identifier	ret		2509675	0					
ANR	2510360	CallExpression	"_GetInternalReferences ( * itr , ad , state , refs , fullNames )"		2509675	1					
ANR	2510361	Callee	_GetInternalReferences		2509675	0					
ANR	2510362	Identifier	_GetInternalReferences		2509675	0					
ANR	2510363	ArgumentList	* itr		2509675	1					
ANR	2510364	Argument	* itr		2509675	0					
ANR	2510365	UnaryOperationExpression	* itr		2509675	0					
ANR	2510366	UnaryOperator	*		2509675	0					
ANR	2510367	Identifier	itr		2509675	1					
ANR	2510368	Argument	ad		2509675	1					
ANR	2510369	Identifier	ad		2509675	0					
ANR	2510370	Argument	state		2509675	2					
ANR	2510371	Identifier	state		2509675	0					
ANR	2510372	Argument	refs		2509675	3					
ANR	2510373	Identifier	refs		2509675	0					
ANR	2510374	Argument	fullNames		2509675	4					
ANR	2510375	Identifier	fullNames		2509675	0					
ANR	2510376	ExpressionStatement	state . depth_remaining ++	1478:16:38356:38379	2509675	3	True				
ANR	2510377	PostIncDecOperationExpression	state . depth_remaining ++		2509675	0					
ANR	2510378	MemberAccess	state . depth_remaining		2509675	0					
ANR	2510379	Identifier	state		2509675	0					
ANR	2510380	Identifier	depth_remaining		2509675	1					
ANR	2510381	IncDec	++		2509675	1					
ANR	2510382	IfStatement	if ( ! ret )		2509675	4					
ANR	2510383	Condition	! ret	1479:20:38401:38404	2509675	0	True				
ANR	2510384	UnaryOperationExpression	! ret		2509675	0					
ANR	2510385	UnaryOperator	!		2509675	0					
ANR	2510386	Identifier	ret		2509675	1					
ANR	2510387	CompoundStatement		211:27:6759:6759	2509675	1					
ANR	2510388	ReturnStatement	return false ;	1480:20:38430:38442	2509675	0	True				
ANR	2510389	Identifier	false		2509675	0					
ANR	2510390	ReturnStatement	return true ;	1484:12:38489:38500	2509675	4	True				
ANR	2510391	Identifier	true		2509675	0					
ANR	2510392	BreakStatement	break ;	1485:8:38510:38515	2509675	5	True				
ANR	2510393	Label	default :	1488:8:38556:38563	2509675	12	True				
ANR	2510394	Identifier	default		2509675	0					
ANR	2510395	ReturnStatement	return false ;	1489:12:38577:38589	2509675	13	True				
ANR	2510396	Identifier	false		2509675	0					
ANR	2510397	ReturnType	bool		2509675	1					
ANR	2510398	Identifier	ClassAd :: _GetInternalReferences		2509675	2					
ANR	2510399	ParameterList	"const ExprTree * expr , ClassAd * ad , EvalState & state , References & refs , bool fullNames"		2509675	3					
ANR	2510400	Parameter	const ExprTree * expr	1267:24:31553:31572	2509675	0	True				
ANR	2510401	ParameterType	const ExprTree *		2509675	0					
ANR	2510402	Identifier	expr		2509675	1					
ANR	2510403	Parameter	ClassAd * ad	1267:46:31575:31585	2509675	1	True				
ANR	2510404	ParameterType	ClassAd *		2509675	0					
ANR	2510405	Identifier	ad		2509675	1					
ANR	2510406	Parameter	EvalState & state	1268:8:31596:31611	2509675	2	True				
ANR	2510407	ParameterType	EvalState &		2509675	0					
ANR	2510408	Identifier	state		2509675	1					
ANR	2510409	Parameter	References & refs	1268:26:31614:31629	2509675	3	True				
ANR	2510410	ParameterType	References &		2509675	0					
ANR	2510411	Identifier	refs		2509675	1					
ANR	2510412	Parameter	bool fullNames	1268:44:31632:31645	2509675	4	True				
ANR	2510413	ParameterType	bool		2509675	0					
ANR	2510414	Identifier	fullNames		2509675	1					
ANR	2510415	CFGEntryNode	ENTRY		2509675		True				
ANR	2510416	CFGExitNode	EXIT		2509675		True				
ANR	2510417	Symbol	followRef		2509675						
ANR	2510418	Symbol	ad -> Lookup		2509675						
ANR	2510419	Symbol	* start		2509675						
ANR	2510420	Symbol	state . rootAd		2509675						
ANR	2510421	Symbol	state . curAd		2509675						
ANR	2510422	Symbol	exprs . end		2509675						
ANR	2510423	Symbol	state		2509675						
ANR	2510424	Symbol	start -> LookupInScope		2509675						
ANR	2510425	Symbol	exprs . begin		2509675						
ANR	2510426	Symbol	itr -> second		2509675						
ANR	2510427	Symbol	val		2509675						
ANR	2510428	Symbol	ret		2509675						
ANR	2510429	Symbol	ad		2509675						
ANR	2510430	Symbol	NULL		2509675						
ANR	2510431	Symbol	prefixStr		2509675						
ANR	2510432	Symbol	itr		2509675						
ANR	2510433	Symbol	tree		2509675						
ANR	2510434	Symbol	curAd		2509675						
ANR	2510435	Symbol	val . IsUndefinedValue		2509675						
ANR	2510436	Symbol	attrs		2509675						
ANR	2510437	Symbol	fnName		2509675						
ANR	2510438	Symbol	* expr		2509675						
ANR	2510439	Symbol	true		2509675						
ANR	2510440	Symbol	attrs . end		2509675						
ANR	2510441	Symbol	t1		2509675						
ANR	2510442	Symbol	t2		2509675						
ANR	2510443	Symbol	t3		2509675						
ANR	2510444	Symbol	* ad		2509675						
ANR	2510445	Symbol	result		2509675						
ANR	2510446	Symbol	args . begin		2509675						
ANR	2510447	Symbol	state . depth_remaining		2509675						
ANR	2510448	Symbol	attrs . begin		2509675						
ANR	2510449	Symbol	val . IsClassAdValue		2509675						
ANR	2510450	Symbol	exprs		2509675						
ANR	2510451	Symbol	expr		2509675						
ANR	2510452	Symbol	rval		2509675						
ANR	2510453	Symbol	attr		2509675						
ANR	2510454	Symbol	args . end		2509675						
ANR	2510455	Symbol	expr -> GetKind		2509675						
ANR	2510456	Symbol	op		2509675						
ANR	2510457	Symbol	nameToAddToRefs		2509675						
ANR	2510458	Symbol	start		2509675						
ANR	2510459	Symbol	false		2509675						
ANR	2510460	Symbol	_GetInternalReferences		2509675						
ANR	2510461	Symbol	fullNames		2509675						
ANR	2510462	Symbol	* itr		2509675						
ANR	2510463	Symbol	* tree		2509675						
ANR	2510464	Symbol	args		2509675						
ANR	2510465	Symbol	abs		2509675						
ANR	2510466	Symbol	refs		2509675						
ANR	2510467	Symbol	tree -> Evaluate		2509675						
ANR	2510468	Symbol	unparser		2509675						
ANR	2510469	Function	ClassAd :: AddRectangle	1497:0:38631:40364							
ANR	2510470	FunctionDef	"ClassAd :: AddRectangle (const ExprTree * tree , Rectangles & r , const string & allowed , const References & irefs)"		2510469	0					
ANR	2510471	CompoundStatement		1500:0:38746:40364	2510469	0					
ANR	2510472	IdentifierDeclStatement	ExprTree * ftree ;	1501:1:38749:38765	2510469	0	True				
ANR	2510473	IdentifierDecl	* ftree		2510469	0					
ANR	2510474	IdentifierDeclType	ExprTree *		2510469	0					
ANR	2510475	Identifier	ftree		2510469	1					
ANR	2510476	IdentifierDeclStatement	bool rval ;	1502:1:38768:38779	2510469	1	True				
ANR	2510477	IdentifierDecl	rval		2510469	0					
ANR	2510478	IdentifierDeclType	bool		2510469	0					
ANR	2510479	Identifier	rval		2510469	1					
ANR	2510480	IdentifierDeclStatement	Value val ;	1503:1:38782:38793	2510469	2	True				
ANR	2510481	IdentifierDecl	val		2510469	0					
ANR	2510482	IdentifierDeclType	Value		2510469	0					
ANR	2510483	Identifier	val		2510469	1					
ANR	2510484	IdentifierDeclStatement	int oldRid = r . rId ;	1504:1:38796:38817	2510469	3	True				
ANR	2510485	IdentifierDecl	oldRid = r . rId		2510469	0					
ANR	2510486	IdentifierDeclType	int		2510469	0					
ANR	2510487	Identifier	oldRid		2510469	1					
ANR	2510488	AssignmentExpression	oldRid = r . rId		2510469	2		=			
ANR	2510489	Identifier	oldRid		2510469	0					
ANR	2510490	MemberAccess	r . rId		2510469	1					
ANR	2510491	Identifier	r		2510469	0					
ANR	2510492	Identifier	rId		2510469	1					
ANR	2510493	IdentifierDeclStatement	const ClassAd * ad ;	1505:1:38820:38837	2510469	4	True				
ANR	2510494	IdentifierDecl	* ad		2510469	0					
ANR	2510495	IdentifierDeclType	const ClassAd *		2510469	0					
ANR	2510496	Identifier	ad		2510469	1					
ANR	2510497	ExpressionStatement	ftree = NULL	1508:1:38877:38889	2510469	5	True				
ANR	2510498	AssignmentExpression	ftree = NULL		2510469	0		=			
ANR	2510499	Identifier	ftree		2510469	0					
ANR	2510500	Identifier	NULL		2510469	1					
ANR	2510501	IfStatement	"if ( ! Flatten ( tree , val , ftree ) )"		2510469	6					
ANR	2510502	Condition	"! Flatten ( tree , val , ftree )"	1509:5:38896:38923	2510469	0	True				
ANR	2510503	UnaryOperationExpression	"! Flatten ( tree , val , ftree )"		2510469	0					
ANR	2510504	UnaryOperator	!		2510469	0					
ANR	2510505	CallExpression	"Flatten ( tree , val , ftree )"		2510469	1					
ANR	2510506	Callee	Flatten		2510469	0					
ANR	2510507	Identifier	Flatten		2510469	0					
ANR	2510508	ArgumentList	tree		2510469	1					
ANR	2510509	Argument	tree		2510469	0					
ANR	2510510	Identifier	tree		2510469	0					
ANR	2510511	Argument	val		2510469	1					
ANR	2510512	Identifier	val		2510469	0					
ANR	2510513	Argument	ftree		2510469	2					
ANR	2510514	Identifier	ftree		2510469	0					
ANR	2510515	CompoundStatement		10:36:180:180	2510469	1					
ANR	2510516	ReturnStatement	return ( false ) ;	1510:2:38931:38946	2510469	0	True				
ANR	2510517	Identifier	false		2510469	0					
ANR	2510518	IfStatement	if ( ! ftree )		2510469	7					
ANR	2510519	Condition	! ftree	1512:5:38956:38961	2510469	0	True				
ANR	2510520	UnaryOperationExpression	! ftree		2510469	0					
ANR	2510521	UnaryOperator	!		2510469	0					
ANR	2510522	Identifier	ftree		2510469	1					
ANR	2510523	CompoundStatement		15:2:281:287	2510469	1					
ANR	2510524	IdentifierDeclStatement	bool b ;	1514:2:39028:39034	2510469	0	True				
ANR	2510525	IdentifierDecl	b		2510469	0					
ANR	2510526	IdentifierDeclType	bool		2510469	0					
ANR	2510527	Identifier	b		2510469	1					
ANR	2510528	IfStatement	if ( ! val . IsBooleanValue ( b ) || ! b )		2510469	1					
ANR	2510529	Condition	! val . IsBooleanValue ( b ) || ! b	1515:6:39042:39071	2510469	0	True				
ANR	2510530	OrExpression	! val . IsBooleanValue ( b ) || ! b		2510469	0		||			
ANR	2510531	UnaryOperationExpression	! val . IsBooleanValue ( b )		2510469	0					
ANR	2510532	UnaryOperator	!		2510469	0					
ANR	2510533	CallExpression	val . IsBooleanValue ( b )		2510469	1					
ANR	2510534	Callee	val . IsBooleanValue		2510469	0					
ANR	2510535	MemberAccess	val . IsBooleanValue		2510469	0					
ANR	2510536	Identifier	val		2510469	0					
ANR	2510537	Identifier	IsBooleanValue		2510469	1					
ANR	2510538	ArgumentList	b		2510469	1					
ANR	2510539	Argument	b		2510469	0					
ANR	2510540	Identifier	b		2510469	0					
ANR	2510541	UnaryOperationExpression	! b		2510469	1					
ANR	2510542	UnaryOperator	!		2510469	0					
ANR	2510543	Identifier	b		2510469	1					
ANR	2510544	ReturnStatement	return ( false ) ;	1515:39:39075:39090	2510469	1	True				
ANR	2510545	Identifier	false		2510469	0					
ANR	2510546	ExpressionStatement	r . NewRectangle ( )	1520:2:39267:39284	2510469	2	True				
ANR	2510547	CallExpression	r . NewRectangle ( )		2510469	0					
ANR	2510548	Callee	r . NewRectangle		2510469	0					
ANR	2510549	MemberAccess	r . NewRectangle		2510469	0					
ANR	2510550	Identifier	r		2510469	0					
ANR	2510551	Identifier	NewRectangle		2510469	1					
ANR	2510552	ArgumentList			2510469	1					
ANR	2510553	ElseStatement	else		2510469	0					
ANR	2510554	CompoundStatement		22:8:547:547	2510469	0					
ANR	2510555	ExpressionStatement	"rval = _MakeRectangles ( ftree , allowed , r , true )"	1522:2:39298:39347	2510469	0	True				
ANR	2510556	AssignmentExpression	"rval = _MakeRectangles ( ftree , allowed , r , true )"		2510469	0		=			
ANR	2510557	Identifier	rval		2510469	0					
ANR	2510558	CallExpression	"_MakeRectangles ( ftree , allowed , r , true )"		2510469	1					
ANR	2510559	Callee	_MakeRectangles		2510469	0					
ANR	2510560	Identifier	_MakeRectangles		2510469	0					
ANR	2510561	ArgumentList	ftree		2510469	1					
ANR	2510562	Argument	ftree		2510469	0					
ANR	2510563	Identifier	ftree		2510469	0					
ANR	2510564	Argument	allowed		2510469	1					
ANR	2510565	Identifier	allowed		2510469	0					
ANR	2510566	Argument	r		2510469	2					
ANR	2510567	Identifier	r		2510469	0					
ANR	2510568	Argument	true		2510469	3					
ANR	2510569	Identifier	true		2510469	0					
ANR	2510570	Statement	delete	1523:2:39351:39356	2510469	1	True				
ANR	2510571	ExpressionStatement	ftree	1523:9:39358:39363	2510469	2	True				
ANR	2510572	Identifier	ftree		2510469	0					
ANR	2510573	IfStatement	if ( ! rval )		2510469	3					
ANR	2510574	Condition	! rval	1524:6:39371:39375	2510469	0	True				
ANR	2510575	UnaryOperationExpression	! rval		2510469	0					
ANR	2510576	UnaryOperator	!		2510469	0					
ANR	2510577	Identifier	rval		2510469	1					
ANR	2510578	CompoundStatement		25:14:632:632	2510469	1					
ANR	2510579	ReturnStatement	return ( false ) ;	1525:3:39384:39399	2510469	0	True				
ANR	2510580	Identifier	false		2510469	0					
ANR	2510581	ExpressionStatement	ftree = NULL	1527:2:39407:39419	2510469	4	True				
ANR	2510582	AssignmentExpression	ftree = NULL		2510469	0		=			
ANR	2510583	Identifier	ftree		2510469	0					
ANR	2510584	Identifier	NULL		2510469	1					
ANR	2510585	ForStatement	for ( References :: iterator itr = irefs . begin ( ) ; itr != irefs . end ( ) ; itr ++ )		2510469	8					
ANR	2510586	ForInit	References :: iterator itr = irefs . begin ( ) ;	1531:6:39490:39529	2510469	0	True				
ANR	2510587	IdentifierDeclStatement	References :: iterator itr = irefs . begin ( ) ;		2510469	0					
ANR	2510588	IdentifierDecl	itr = irefs . begin ( )		2510469	0					
ANR	2510589	IdentifierDeclType	References :: iterator		2510469	0					
ANR	2510590	Identifier	itr		2510469	1					
ANR	2510591	AssignmentExpression	itr = irefs . begin ( )		2510469	2		=			
ANR	2510592	Identifier	itr		2510469	0					
ANR	2510593	CallExpression	irefs . begin ( )		2510469	1					
ANR	2510594	Callee	irefs . begin		2510469	0					
ANR	2510595	MemberAccess	irefs . begin		2510469	0					
ANR	2510596	Identifier	irefs		2510469	0					
ANR	2510597	Identifier	begin		2510469	1					
ANR	2510598	ArgumentList			2510469	1					
ANR	2510599	Condition	itr != irefs . end ( )	1531:46:39530:39546	2510469	1	True				
ANR	2510600	EqualityExpression	itr != irefs . end ( )		2510469	0		!=			
ANR	2510601	Identifier	itr		2510469	0					
ANR	2510602	CallExpression	irefs . end ( )		2510469	1					
ANR	2510603	Callee	irefs . end		2510469	0					
ANR	2510604	MemberAccess	irefs . end		2510469	0					
ANR	2510605	Identifier	irefs		2510469	0					
ANR	2510606	Identifier	end		2510469	1					
ANR	2510607	ArgumentList			2510469	1					
ANR	2510608	PostIncDecOperationExpression	itr ++	1531:65:39549:39553	2510469	2	True				
ANR	2510609	Identifier	itr		2510469	0					
ANR	2510610	IncDec	++		2510469	1					
ANR	2510611	CompoundStatement		32:73:810:810	2510469	3					
ANR	2510612	IfStatement	"if ( ! LookupInScope ( * itr , ad ) )"		2510469	0					
ANR	2510613	Condition	"! LookupInScope ( * itr , ad )"	1532:6:39565:39590	2510469	0	True				
ANR	2510614	UnaryOperationExpression	"! LookupInScope ( * itr , ad )"		2510469	0					
ANR	2510615	UnaryOperator	!		2510469	0					
ANR	2510616	CallExpression	"LookupInScope ( * itr , ad )"		2510469	1					
ANR	2510617	Callee	LookupInScope		2510469	0					
ANR	2510618	Identifier	LookupInScope		2510469	0					
ANR	2510619	ArgumentList	* itr		2510469	1					
ANR	2510620	Argument	* itr		2510469	0					
ANR	2510621	UnaryOperationExpression	* itr		2510469	0					
ANR	2510622	UnaryOperator	*		2510469	0					
ANR	2510623	Identifier	itr		2510469	1					
ANR	2510624	Argument	ad		2510469	1					
ANR	2510625	Identifier	ad		2510469	0					
ANR	2510626	CompoundStatement		33:35:847:847	2510469	1					
ANR	2510627	ForStatement	for ( int i = oldRid + 1 ; i <= r . rId ; i ++ )		2510469	0					
ANR	2510628	ForInit	int i = oldRid + 1 ;	1534:8:39656:39673	2510469	0	True				
ANR	2510629	IdentifierDeclStatement	int i = oldRid + 1 ;		2510469	0					
ANR	2510630	IdentifierDecl	i = oldRid + 1		2510469	0					
ANR	2510631	IdentifierDeclType	int		2510469	0					
ANR	2510632	Identifier	i		2510469	1					
ANR	2510633	AssignmentExpression	i = oldRid + 1		2510469	2		=			
ANR	2510634	Identifier	i		2510469	0					
ANR	2510635	AdditiveExpression	oldRid + 1		2510469	1		+			
ANR	2510636	Identifier	oldRid		2510469	0					
ANR	2510637	PrimaryExpression	1		2510469	1					
ANR	2510638	Condition	i <= r . rId	1534:27:39675:39684	2510469	1	True				
ANR	2510639	RelationalExpression	i <= r . rId		2510469	0		<=			
ANR	2510640	Identifier	i		2510469	0					
ANR	2510641	MemberAccess	r . rId		2510469	1					
ANR	2510642	Identifier	r		2510469	0					
ANR	2510643	Identifier	rId		2510469	1					
ANR	2510644	PostIncDecOperationExpression	i ++	1534:40:39688:39690	2510469	2	True				
ANR	2510645	Identifier	i		2510469	0					
ANR	2510646	IncDec	++		2510469	1					
ANR	2510647	CompoundStatement		35:46:947:947	2510469	3					
ANR	2510648	ExpressionStatement	r . unimported [ * itr ] . Insert ( i )	1535:4:39700:39730	2510469	0	True				
ANR	2510649	CallExpression	r . unimported [ * itr ] . Insert ( i )		2510469	0					
ANR	2510650	Callee	r . unimported [ * itr ] . Insert		2510469	0					
ANR	2510651	MemberAccess	r . unimported [ * itr ] . Insert		2510469	0					
ANR	2510652	ArrayIndexing	r . unimported [ * itr ]		2510469	0					
ANR	2510653	MemberAccess	r . unimported		2510469	0					
ANR	2510654	Identifier	r		2510469	0					
ANR	2510655	Identifier	unimported		2510469	1					
ANR	2510656	UnaryOperationExpression	* itr		2510469	1					
ANR	2510657	UnaryOperator	*		2510469	0					
ANR	2510658	Identifier	itr		2510469	1					
ANR	2510659	Identifier	Insert		2510469	1					
ANR	2510660	ArgumentList	i		2510469	1					
ANR	2510661	Argument	i		2510469	0					
ANR	2510662	Identifier	i		2510469	0					
ANR	2510663	ElseStatement	else		2510469	0					
ANR	2510664	IfStatement	"if ( ! EvaluateAttr ( * itr , val ) || val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( ) )"		2510469	0					
ANR	2510665	Condition	"! EvaluateAttr ( * itr , val ) || val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( )"	1537:13:39750:39850	2510469	0	True				
ANR	2510666	OrExpression	"! EvaluateAttr ( * itr , val ) || val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( )"		2510469	0		||			
ANR	2510667	UnaryOperationExpression	"! EvaluateAttr ( * itr , val )"		2510469	0					
ANR	2510668	UnaryOperator	!		2510469	0					
ANR	2510669	CallExpression	"EvaluateAttr ( * itr , val )"		2510469	1					
ANR	2510670	Callee	EvaluateAttr		2510469	0					
ANR	2510671	Identifier	EvaluateAttr		2510469	0					
ANR	2510672	ArgumentList	* itr		2510469	1					
ANR	2510673	Argument	* itr		2510469	0					
ANR	2510674	UnaryOperationExpression	* itr		2510469	0					
ANR	2510675	UnaryOperator	*		2510469	0					
ANR	2510676	Identifier	itr		2510469	1					
ANR	2510677	Argument	val		2510469	1					
ANR	2510678	Identifier	val		2510469	0					
ANR	2510679	OrExpression	val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( )		2510469	1		||			
ANR	2510680	CallExpression	val . IsExceptional ( )		2510469	0					
ANR	2510681	Callee	val . IsExceptional		2510469	0					
ANR	2510682	MemberAccess	val . IsExceptional		2510469	0					
ANR	2510683	Identifier	val		2510469	0					
ANR	2510684	Identifier	IsExceptional		2510469	1					
ANR	2510685	ArgumentList			2510469	1					
ANR	2510686	OrExpression	val . IsClassAdValue ( ) || val . IsListValue ( )		2510469	1		||			
ANR	2510687	CallExpression	val . IsClassAdValue ( )		2510469	0					
ANR	2510688	Callee	val . IsClassAdValue		2510469	0					
ANR	2510689	MemberAccess	val . IsClassAdValue		2510469	0					
ANR	2510690	Identifier	val		2510469	0					
ANR	2510691	Identifier	IsClassAdValue		2510469	1					
ANR	2510692	ArgumentList			2510469	1					
ANR	2510693	CallExpression	val . IsListValue ( )		2510469	1					
ANR	2510694	Callee	val . IsListValue		2510469	0					
ANR	2510695	MemberAccess	val . IsListValue		2510469	0					
ANR	2510696	Identifier	val		2510469	0					
ANR	2510697	Identifier	IsListValue		2510469	1					
ANR	2510698	ArgumentList			2510469	1					
ANR	2510699	CompoundStatement		39:51:1107:1107	2510469	1					
ANR	2510700	ForStatement	for ( int i = oldRid + 1 ; i <= r . rId ; i ++ )		2510469	0					
ANR	2510701	ForInit	int i = oldRid + 1 ;	1540:8:39926:39943	2510469	0	True				
ANR	2510702	IdentifierDeclStatement	int i = oldRid + 1 ;		2510469	0					
ANR	2510703	IdentifierDecl	i = oldRid + 1		2510469	0					
ANR	2510704	IdentifierDeclType	int		2510469	0					
ANR	2510705	Identifier	i		2510469	1					
ANR	2510706	AssignmentExpression	i = oldRid + 1		2510469	2		=			
ANR	2510707	Identifier	i		2510469	0					
ANR	2510708	AdditiveExpression	oldRid + 1		2510469	1		+			
ANR	2510709	Identifier	oldRid		2510469	0					
ANR	2510710	PrimaryExpression	1		2510469	1					
ANR	2510711	Condition	i <= r . rId	1540:27:39945:39954	2510469	1	True				
ANR	2510712	RelationalExpression	i <= r . rId		2510469	0		<=			
ANR	2510713	Identifier	i		2510469	0					
ANR	2510714	MemberAccess	r . rId		2510469	1					
ANR	2510715	Identifier	r		2510469	0					
ANR	2510716	Identifier	rId		2510469	1					
ANR	2510717	PostIncDecOperationExpression	i ++	1540:40:39958:39960	2510469	2	True				
ANR	2510718	Identifier	i		2510469	0					
ANR	2510719	IncDec	++		2510469	1					
ANR	2510720	CompoundStatement		41:46:1217:1217	2510469	3					
ANR	2510721	ExpressionStatement	"r . AddDeviantImported ( * itr , i )"	1541:4:39970:40001	2510469	0	True				
ANR	2510722	CallExpression	"r . AddDeviantImported ( * itr , i )"		2510469	0					
ANR	2510723	Callee	r . AddDeviantImported		2510469	0					
ANR	2510724	MemberAccess	r . AddDeviantImported		2510469	0					
ANR	2510725	Identifier	r		2510469	0					
ANR	2510726	Identifier	AddDeviantImported		2510469	1					
ANR	2510727	ArgumentList	* itr		2510469	1					
ANR	2510728	Argument	* itr		2510469	0					
ANR	2510729	UnaryOperationExpression	* itr		2510469	0					
ANR	2510730	UnaryOperator	*		2510469	0					
ANR	2510731	Identifier	itr		2510469	1					
ANR	2510732	Argument	i		2510469	1					
ANR	2510733	Identifier	i		2510469	0					
ANR	2510734	ElseStatement	else		2510469	0					
ANR	2510735	CompoundStatement		44:9:1270:1270	2510469	0					
ANR	2510736	ForStatement	for ( int i = oldRid + 1 ; i <= r . rId ; i ++ )		2510469	0					
ANR	2510737	ForInit	int i = oldRid + 1 ;	1544:8:40027:40044	2510469	0	True				
ANR	2510738	IdentifierDeclStatement	int i = oldRid + 1 ;		2510469	0					
ANR	2510739	IdentifierDecl	i = oldRid + 1		2510469	0					
ANR	2510740	IdentifierDeclType	int		2510469	0					
ANR	2510741	Identifier	i		2510469	1					
ANR	2510742	AssignmentExpression	i = oldRid + 1		2510469	2		=			
ANR	2510743	Identifier	i		2510469	0					
ANR	2510744	AdditiveExpression	oldRid + 1		2510469	1		+			
ANR	2510745	Identifier	oldRid		2510469	0					
ANR	2510746	PrimaryExpression	1		2510469	1					
ANR	2510747	Condition	i <= r . rId	1544:27:40046:40055	2510469	1	True				
ANR	2510748	RelationalExpression	i <= r . rId		2510469	0		<=			
ANR	2510749	Identifier	i		2510469	0					
ANR	2510750	MemberAccess	r . rId		2510469	1					
ANR	2510751	Identifier	r		2510469	0					
ANR	2510752	Identifier	rId		2510469	1					
ANR	2510753	PostIncDecOperationExpression	i ++	1544:40:40059:40061	2510469	2	True				
ANR	2510754	Identifier	i		2510469	0					
ANR	2510755	IncDec	++		2510469	1					
ANR	2510756	CompoundStatement		45:46:1318:1318	2510469	3					
ANR	2510757	IfStatement	"if ( r . AddUpperBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR || r . AddLowerBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR )"		2510469	0					
ANR	2510758	Condition	"r . AddUpperBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR || r . AddLowerBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR"	1546:8:40133:40300	2510469	0	True				
ANR	2510759	OrExpression	"r . AddUpperBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR || r . AddLowerBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR"		2510469	0		||			
ANR	2510760	EqualityExpression	"r . AddUpperBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR"		2510469	0		!=			
ANR	2510761	CallExpression	"r . AddUpperBound ( * itr , val , false , false , i )"		2510469	0					
ANR	2510762	Callee	r . AddUpperBound		2510469	0					
ANR	2510763	MemberAccess	r . AddUpperBound		2510469	0					
ANR	2510764	Identifier	r		2510469	0					
ANR	2510765	Identifier	AddUpperBound		2510469	1					
ANR	2510766	ArgumentList	* itr		2510469	1					
ANR	2510767	Argument	* itr		2510469	0					
ANR	2510768	UnaryOperationExpression	* itr		2510469	0					
ANR	2510769	UnaryOperator	*		2510469	0					
ANR	2510770	Identifier	itr		2510469	1					
ANR	2510771	Argument	val		2510469	1					
ANR	2510772	Identifier	val		2510469	0					
ANR	2510773	Argument	false		2510469	2					
ANR	2510774	Identifier	false		2510469	0					
ANR	2510775	Argument	false		2510469	3					
ANR	2510776	Identifier	false		2510469	0					
ANR	2510777	Argument	i		2510469	4					
ANR	2510778	Identifier	i		2510469	0					
ANR	2510779	Identifier	Rectangles :: RECT_NO_ERROR		2510469	1					
ANR	2510780	EqualityExpression	"r . AddLowerBound ( * itr , val , false , false , i ) != Rectangles :: RECT_NO_ERROR"		2510469	1		!=			
ANR	2510781	CallExpression	"r . AddLowerBound ( * itr , val , false , false , i )"		2510469	0					
ANR	2510782	Callee	r . AddLowerBound		2510469	0					
ANR	2510783	MemberAccess	r . AddLowerBound		2510469	0					
ANR	2510784	Identifier	r		2510469	0					
ANR	2510785	Identifier	AddLowerBound		2510469	1					
ANR	2510786	ArgumentList	* itr		2510469	1					
ANR	2510787	Argument	* itr		2510469	0					
ANR	2510788	UnaryOperationExpression	* itr		2510469	0					
ANR	2510789	UnaryOperator	*		2510469	0					
ANR	2510790	Identifier	itr		2510469	1					
ANR	2510791	Argument	val		2510469	1					
ANR	2510792	Identifier	val		2510469	0					
ANR	2510793	Argument	false		2510469	2					
ANR	2510794	Identifier	false		2510469	0					
ANR	2510795	Argument	false		2510469	3					
ANR	2510796	Identifier	false		2510469	0					
ANR	2510797	Argument	i		2510469	4					
ANR	2510798	Identifier	i		2510469	0					
ANR	2510799	Identifier	Rectangles :: RECT_NO_ERROR		2510469	1					
ANR	2510800	CompoundStatement		50:33:1557:1557	2510469	1					
ANR	2510801	ReturnStatement	return ( false ) ;	1550:5:40311:40326	2510469	0	True				
ANR	2510802	Identifier	false		2510469	0					
ANR	2510803	ReturnStatement	return ( true ) ;	1556:1:40348:40362	2510469	9	True				
ANR	2510804	Identifier	true		2510469	0					
ANR	2510805	ReturnType	bool		2510469	1					
ANR	2510806	Identifier	ClassAd :: AddRectangle		2510469	2					
ANR	2510807	ParameterList	"const ExprTree * tree , Rectangles & r , const string & allowed , const References & irefs"		2510469	3					
ANR	2510808	Parameter	const ExprTree * tree	1498:14:38660:38679	2510469	0	True				
ANR	2510809	ParameterType	const ExprTree *		2510469	0					
ANR	2510810	Identifier	tree		2510469	1					
ANR	2510811	Parameter	Rectangles & r	1498:36:38682:38694	2510469	1	True				
ANR	2510812	ParameterType	Rectangles &		2510469	0					
ANR	2510813	Identifier	r		2510469	1					
ANR	2510814	Parameter	const string & allowed	1498:51:38697:38717	2510469	2	True				
ANR	2510815	ParameterType	const string &		2510469	0					
ANR	2510816	Identifier	allowed		2510469	1					
ANR	2510817	Parameter	const References & irefs	1499:1:38721:38742	2510469	3	True				
ANR	2510818	ParameterType	const References &		2510469	0					
ANR	2510819	Identifier	irefs		2510469	1					
ANR	2510820	CFGEntryNode	ENTRY		2510469		True				
ANR	2510821	CFGExitNode	EXIT		2510469		True				
ANR	2510822	Symbol	_MakeRectangles		2510469						
ANR	2510823	Symbol	allowed		2510469						
ANR	2510824	Symbol	irefs . begin		2510469						
ANR	2510825	Symbol	r . unimported		2510469						
ANR	2510826	Symbol	EvaluateAttr		2510469						
ANR	2510827	Symbol	val . IsExceptional		2510469						
ANR	2510828	Symbol	val . IsClassAdValue		2510469						
ANR	2510829	Symbol	irefs		2510469						
ANR	2510830	Symbol	ftree		2510469						
ANR	2510831	Symbol	rval		2510469						
ANR	2510832	Symbol	LookupInScope		2510469						
ANR	2510833	Symbol	val . IsListValue		2510469						
ANR	2510834	Symbol	val		2510469						
ANR	2510835	Symbol	r . AddLowerBound		2510469						
ANR	2510836	Symbol	b		2510469						
ANR	2510837	Symbol	ad		2510469						
ANR	2510838	Symbol	NULL		2510469						
ANR	2510839	Symbol	itr		2510469						
ANR	2510840	Symbol	tree		2510469						
ANR	2510841	Symbol	Flatten		2510469						
ANR	2510842	Symbol	false		2510469						
ANR	2510843	Symbol	i		2510469						
ANR	2510844	Symbol	irefs . end		2510469						
ANR	2510845	Symbol	oldRid		2510469						
ANR	2510846	Symbol	r . AddUpperBound		2510469						
ANR	2510847	Symbol	Rectangles :: RECT_NO_ERROR		2510469						
ANR	2510848	Symbol	* itr		2510469						
ANR	2510849	Symbol	val . IsBooleanValue		2510469						
ANR	2510850	Symbol	r		2510469						
ANR	2510851	Symbol	r . rId		2510469						
ANR	2510852	Symbol	true		2510469						
ANR	2510853	Symbol	* * itr		2510469						
ANR	2510854	Symbol	* r		2510469						
ANR	2510855	Symbol	* r . unimported		2510469						
ANR	2510856	Function	ClassAd :: _MakeRectangles	1560:0:40368:44089							
ANR	2510857	FunctionDef	"ClassAd :: _MakeRectangles (const ExprTree * tree , const string & allowed , Rectangles & r , bool ORmode)"		2510856	0					
ANR	2510858	CompoundStatement		1563:0:40476:44089	2510856	0					
ANR	2510859	IfStatement	if ( tree -> GetKind ( ) != OP_NODE )		2510856	0					
ANR	2510860	Condition	tree -> GetKind ( ) != OP_NODE	1564:8:40486:40512	2510856	0	True				
ANR	2510861	EqualityExpression	tree -> GetKind ( ) != OP_NODE		2510856	0		!=			
ANR	2510862	CallExpression	tree -> GetKind ( )		2510856	0					
ANR	2510863	Callee	tree -> GetKind		2510856	0					
ANR	2510864	PtrMemberAccess	tree -> GetKind		2510856	0					
ANR	2510865	Identifier	tree		2510856	0					
ANR	2510866	Identifier	GetKind		2510856	1					
ANR	2510867	ArgumentList			2510856	1					
ANR	2510868	Identifier	OP_NODE		2510856	1					
ANR	2510869	ReturnStatement	return ( false ) ;	1564:38:40516:40531	2510856	1	True				
ANR	2510870	Identifier	false		2510856	0					
ANR	2510871	IdentifierDeclStatement	Operation :: OpKind op ;	1566:4:40538:40558	2510856	1	True				
ANR	2510872	IdentifierDecl	op		2510856	0					
ANR	2510873	IdentifierDeclType	Operation :: OpKind		2510856	0					
ANR	2510874	Identifier	op		2510856	1					
ANR	2510875	IdentifierDeclStatement	"ExprTree * t1 , * t2 , * lit , * attr ;"	1567:4:40564:40597	2510856	2	True				
ANR	2510876	IdentifierDecl	* t1		2510856	0					
ANR	2510877	IdentifierDeclType	ExprTree *		2510856	0					
ANR	2510878	Identifier	t1		2510856	1					
ANR	2510879	IdentifierDecl	* t2		2510856	1					
ANR	2510880	IdentifierDeclType	ExprTree *		2510856	0					
ANR	2510881	Identifier	t2		2510856	1					
ANR	2510882	IdentifierDecl	* lit		2510856	2					
ANR	2510883	IdentifierDeclType	ExprTree *		2510856	0					
ANR	2510884	Identifier	lit		2510856	1					
ANR	2510885	IdentifierDecl	* attr		2510856	3					
ANR	2510886	IdentifierDeclType	ExprTree *		2510856	0					
ANR	2510887	Identifier	attr		2510856	1					
ANR	2510888	IdentifierDeclStatement	string attrName ;	1568:1:40600:40618	2510856	3	True				
ANR	2510889	IdentifierDecl	attrName		2510856	0					
ANR	2510890	IdentifierDeclType	string		2510856	0					
ANR	2510891	Identifier	attrName		2510856	1					
ANR	2510892	IdentifierDeclStatement	ExprTree * expr ;	1569:1:40621:40637	2510856	4	True				
ANR	2510893	IdentifierDecl	* expr		2510856	0					
ANR	2510894	IdentifierDeclType	ExprTree *		2510856	0					
ANR	2510895	Identifier	expr		2510856	1					
ANR	2510896	IdentifierDeclStatement	bool absolute ;	1570:1:40640:40656	2510856	5	True				
ANR	2510897	IdentifierDecl	absolute		2510856	0					
ANR	2510898	IdentifierDeclType	bool		2510856	0					
ANR	2510899	Identifier	absolute		2510856	1					
ANR	2510900	ExpressionStatement	"( ( Operation * ) tree ) -> GetComponents ( op , t1 , t2 , lit )"	1572:4:40663:40715	2510856	6	True				
ANR	2510901	CallExpression	"( ( Operation * ) tree ) -> GetComponents ( op , t1 , t2 , lit )"		2510856	0					
ANR	2510902	Callee	( ( Operation * ) tree ) -> GetComponents		2510856	0					
ANR	2510903	PtrMemberAccess	( ( Operation * ) tree ) -> GetComponents		2510856	0					
ANR	2510904	CastExpression	( Operation * ) tree		2510856	0					
ANR	2510905	CastTarget	Operation *		2510856	0					
ANR	2510906	Identifier	tree		2510856	1					
ANR	2510907	Identifier	GetComponents		2510856	1					
ANR	2510908	ArgumentList	op		2510856	1					
ANR	2510909	Argument	op		2510856	0					
ANR	2510910	Identifier	op		2510856	0					
ANR	2510911	Argument	t1		2510856	1					
ANR	2510912	Identifier	t1		2510856	0					
ANR	2510913	Argument	t2		2510856	2					
ANR	2510914	Identifier	t2		2510856	0					
ANR	2510915	Argument	lit		2510856	3					
ANR	2510916	Identifier	lit		2510856	0					
ANR	2510917	ExpressionStatement	lit = NULL	1573:1:40718:40728	2510856	7	True				
ANR	2510918	AssignmentExpression	lit = NULL		2510856	0		=			
ANR	2510919	Identifier	lit		2510856	0					
ANR	2510920	Identifier	NULL		2510856	1					
ANR	2510921	IfStatement	if ( op == Operation :: PARENTHESES_OP )		2510856	8					
ANR	2510922	Condition	op == Operation :: PARENTHESES_OP	1575:5:40736:40766	2510856	0	True				
ANR	2510923	EqualityExpression	op == Operation :: PARENTHESES_OP		2510856	0		==			
ANR	2510924	Identifier	op		2510856	0					
ANR	2510925	Identifier	Operation :: PARENTHESES_OP		2510856	1					
ANR	2510926	CompoundStatement		13:39:293:293	2510856	1					
ANR	2510927	ReturnStatement	"return ( _MakeRectangles ( t1 , allowed , r , ORmode ) ) ;"	1576:2:40774:40825	2510856	0	True				
ANR	2510928	CallExpression	"_MakeRectangles ( t1 , allowed , r , ORmode )"		2510856	0					
ANR	2510929	Callee	_MakeRectangles		2510856	0					
ANR	2510930	Identifier	_MakeRectangles		2510856	0					
ANR	2510931	ArgumentList	t1		2510856	1					
ANR	2510932	Argument	t1		2510856	0					
ANR	2510933	Identifier	t1		2510856	0					
ANR	2510934	Argument	allowed		2510856	1					
ANR	2510935	Identifier	allowed		2510856	0					
ANR	2510936	Argument	r		2510856	2					
ANR	2510937	Identifier	r		2510856	0					
ANR	2510938	Argument	ORmode		2510856	3					
ANR	2510939	Identifier	ORmode		2510856	0					
ANR	2510940	IfStatement	if ( ( op != Operation :: LOGICAL_AND_OP && op != Operation :: LOGICAL_OR_OP ) && ( op < Operation :: __COMPARISON_START__ || op > Operation :: __COMPARISON_END__ || op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP ) )		2510856	9					
ANR	2510941	Condition	( op != Operation :: LOGICAL_AND_OP && op != Operation :: LOGICAL_OR_OP ) && ( op < Operation :: __COMPARISON_START__ || op > Operation :: __COMPARISON_END__ || op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP )	1580:5:40887:41093	2510856	0	True				
ANR	2510942	AndExpression	( op != Operation :: LOGICAL_AND_OP && op != Operation :: LOGICAL_OR_OP ) && ( op < Operation :: __COMPARISON_START__ || op > Operation :: __COMPARISON_END__ || op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP )		2510856	0		&&			
ANR	2510943	AndExpression	op != Operation :: LOGICAL_AND_OP && op != Operation :: LOGICAL_OR_OP		2510856	0		&&			
ANR	2510944	EqualityExpression	op != Operation :: LOGICAL_AND_OP		2510856	0		!=			
ANR	2510945	Identifier	op		2510856	0					
ANR	2510946	Identifier	Operation :: LOGICAL_AND_OP		2510856	1					
ANR	2510947	EqualityExpression	op != Operation :: LOGICAL_OR_OP		2510856	1		!=			
ANR	2510948	Identifier	op		2510856	0					
ANR	2510949	Identifier	Operation :: LOGICAL_OR_OP		2510856	1					
ANR	2510950	OrExpression	op < Operation :: __COMPARISON_START__ || op > Operation :: __COMPARISON_END__ || op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP		2510856	1		||			
ANR	2510951	RelationalExpression	op < Operation :: __COMPARISON_START__		2510856	0		<			
ANR	2510952	Identifier	op		2510856	0					
ANR	2510953	Identifier	Operation :: __COMPARISON_START__		2510856	1					
ANR	2510954	OrExpression	op > Operation :: __COMPARISON_END__ || op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP		2510856	1		||			
ANR	2510955	RelationalExpression	op > Operation :: __COMPARISON_END__		2510856	0		>			
ANR	2510956	Identifier	op		2510856	0					
ANR	2510957	Identifier	Operation :: __COMPARISON_END__		2510856	1					
ANR	2510958	OrExpression	op == Operation :: NOT_EQUAL_OP || op == Operation :: ISNT_OP		2510856	1		||			
ANR	2510959	EqualityExpression	op == Operation :: NOT_EQUAL_OP		2510856	0		==			
ANR	2510960	Identifier	op		2510856	0					
ANR	2510961	Identifier	Operation :: NOT_EQUAL_OP		2510856	1					
ANR	2510962	EqualityExpression	op == Operation :: ISNT_OP		2510856	1		==			
ANR	2510963	Identifier	op		2510856	0					
ANR	2510964	Identifier	Operation :: ISNT_OP		2510856	1					
ANR	2510965	CompoundStatement		20:65:620:620	2510856	1					
ANR	2510966	ReturnStatement	return ( false ) ;	1583:2:41101:41116	2510856	0	True				
ANR	2510967	Identifier	false		2510856	0					
ANR	2510968	IfStatement	if ( ORmode )		2510856	10					
ANR	2510969	Condition	ORmode	1586:5:41127:41132	2510856	0	True				
ANR	2510970	Identifier	ORmode		2510856	0					
ANR	2510971	CompoundStatement		24:14:659:659	2510856	1					
ANR	2510972	IfStatement	if ( op == Operation :: LOGICAL_OR_OP )		2510856	0					
ANR	2510973	Condition	op == Operation :: LOGICAL_OR_OP	1587:6:41144:41173	2510856	0	True				
ANR	2510974	EqualityExpression	op == Operation :: LOGICAL_OR_OP		2510856	0		==			
ANR	2510975	Identifier	op		2510856	0					
ANR	2510976	Identifier	Operation :: LOGICAL_OR_OP		2510856	1					
ANR	2510977	CompoundStatement		25:39:700:700	2510856	1					
ANR	2510978	ReturnStatement	"return ( _MakeRectangles ( t1 , allowed , r , ORmode ) && _MakeRectangles ( t2 , allowed , r , ORmode ) ) ;"	1589:3:41221:41322	2510856	0	True				
ANR	2510979	AndExpression	"_MakeRectangles ( t1 , allowed , r , ORmode ) && _MakeRectangles ( t2 , allowed , r , ORmode )"		2510856	0		&&			
ANR	2510980	CallExpression	"_MakeRectangles ( t1 , allowed , r , ORmode )"		2510856	0					
ANR	2510981	Callee	_MakeRectangles		2510856	0					
ANR	2510982	Identifier	_MakeRectangles		2510856	0					
ANR	2510983	ArgumentList	t1		2510856	1					
ANR	2510984	Argument	t1		2510856	0					
ANR	2510985	Identifier	t1		2510856	0					
ANR	2510986	Argument	allowed		2510856	1					
ANR	2510987	Identifier	allowed		2510856	0					
ANR	2510988	Argument	r		2510856	2					
ANR	2510989	Identifier	r		2510856	0					
ANR	2510990	Argument	ORmode		2510856	3					
ANR	2510991	Identifier	ORmode		2510856	0					
ANR	2510992	CallExpression	"_MakeRectangles ( t2 , allowed , r , ORmode )"		2510856	1					
ANR	2510993	Callee	_MakeRectangles		2510856	0					
ANR	2510994	Identifier	_MakeRectangles		2510856	0					
ANR	2510995	ArgumentList	t2		2510856	1					
ANR	2510996	Argument	t2		2510856	0					
ANR	2510997	Identifier	t2		2510856	0					
ANR	2510998	Argument	allowed		2510856	1					
ANR	2510999	Identifier	allowed		2510856	0					
ANR	2511000	Argument	r		2510856	2					
ANR	2511001	Identifier	r		2510856	0					
ANR	2511002	Argument	ORmode		2510856	3					
ANR	2511003	Identifier	ORmode		2510856	0					
ANR	2511004	ElseStatement	else		2510856	0					
ANR	2511005	CompoundStatement		29:9:856:856	2510856	0					
ANR	2511006	ExpressionStatement	ORmode = false	1593:3:41389:41403	2510856	0	True				
ANR	2511007	AssignmentExpression	ORmode = false		2510856	0		=			
ANR	2511008	Identifier	ORmode		2510856	0					
ANR	2511009	Identifier	false		2510856	1					
ANR	2511010	ExpressionStatement	r . NewRectangle ( )	1594:3:41408:41425	2510856	1	True				
ANR	2511011	CallExpression	r . NewRectangle ( )		2510856	0					
ANR	2511012	Callee	r . NewRectangle		2510856	0					
ANR	2511013	MemberAccess	r . NewRectangle		2510856	0					
ANR	2511014	Identifier	r		2510856	0					
ANR	2511015	Identifier	NewRectangle		2510856	1					
ANR	2511016	ArgumentList			2510856	1					
ANR	2511017	IfStatement	if ( op == Operation :: LOGICAL_AND_OP )		2510856	11					
ANR	2511018	Condition	op == Operation :: LOGICAL_AND_OP	1599:5:41494:41524	2510856	0	True				
ANR	2511019	EqualityExpression	op == Operation :: LOGICAL_AND_OP		2510856	0		==			
ANR	2511020	Identifier	op		2510856	0					
ANR	2511021	Identifier	Operation :: LOGICAL_AND_OP		2510856	1					
ANR	2511022	CompoundStatement		37:39:1051:1051	2510856	1					
ANR	2511023	ReturnStatement	"return ( _MakeRectangles ( t1 , allowed , r , ORmode ) && _MakeRectangles ( t2 , allowed , r , ORmode ) ) ;"	1600:2:41532:41632	2510856	0	True				
ANR	2511024	AndExpression	"_MakeRectangles ( t1 , allowed , r , ORmode ) && _MakeRectangles ( t2 , allowed , r , ORmode )"		2510856	0		&&			
ANR	2511025	CallExpression	"_MakeRectangles ( t1 , allowed , r , ORmode )"		2510856	0					
ANR	2511026	Callee	_MakeRectangles		2510856	0					
ANR	2511027	Identifier	_MakeRectangles		2510856	0					
ANR	2511028	ArgumentList	t1		2510856	1					
ANR	2511029	Argument	t1		2510856	0					
ANR	2511030	Identifier	t1		2510856	0					
ANR	2511031	Argument	allowed		2510856	1					
ANR	2511032	Identifier	allowed		2510856	0					
ANR	2511033	Argument	r		2510856	2					
ANR	2511034	Identifier	r		2510856	0					
ANR	2511035	Argument	ORmode		2510856	3					
ANR	2511036	Identifier	ORmode		2510856	0					
ANR	2511037	CallExpression	"_MakeRectangles ( t2 , allowed , r , ORmode )"		2510856	1					
ANR	2511038	Callee	_MakeRectangles		2510856	0					
ANR	2511039	Identifier	_MakeRectangles		2510856	0					
ANR	2511040	ArgumentList	t2		2510856	1					
ANR	2511041	Argument	t2		2510856	0					
ANR	2511042	Identifier	t2		2510856	0					
ANR	2511043	Argument	allowed		2510856	1					
ANR	2511044	Identifier	allowed		2510856	0					
ANR	2511045	Argument	r		2510856	2					
ANR	2511046	Identifier	r		2510856	0					
ANR	2511047	Argument	ORmode		2510856	3					
ANR	2511048	Identifier	ORmode		2510856	0					
ANR	2511049	ElseStatement	else		2510856	0					
ANR	2511050	IfStatement	if ( op == Operation :: LOGICAL_OR_OP )		2510856	0					
ANR	2511051	Condition	op == Operation :: LOGICAL_OR_OP	1602:12:41646:41675	2510856	0	True				
ANR	2511052	EqualityExpression	op == Operation :: LOGICAL_OR_OP		2510856	0		==			
ANR	2511053	Identifier	op		2510856	0					
ANR	2511054	Identifier	Operation :: LOGICAL_OR_OP		2510856	1					
ANR	2511055	CompoundStatement		40:45:1202:1202	2510856	1					
ANR	2511056	ExpressionStatement	"printf ( ""Error:  Found || when making rectangles in AND mode\\n"" )"	1604:2:41705:41770	2510856	0	True				
ANR	2511057	CallExpression	"printf ( ""Error:  Found || when making rectangles in AND mode\\n"" )"		2510856	0					
ANR	2511058	Callee	printf		2510856	0					
ANR	2511059	Identifier	printf		2510856	0					
ANR	2511060	ArgumentList	"""Error:  Found || when making rectangles in AND mode\\n"""		2510856	1					
ANR	2511061	Argument	"""Error:  Found || when making rectangles in AND mode\\n"""		2510856	0					
ANR	2511062	PrimaryExpression	"""Error:  Found || when making rectangles in AND mode\\n"""		2510856	0					
ANR	2511063	ReturnStatement	return ( false ) ;	1605:2:41774:41789	2510856	1	True				
ANR	2511064	Identifier	false		2510856	0					
ANR	2511065	IfStatement	if ( t1 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t2 -> GetKind ( ) == ExprTree :: LITERAL_NODE )		2510856	12					
ANR	2511066	Condition	t1 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t2 -> GetKind ( ) == ExprTree :: LITERAL_NODE	1608:5:41800:41883	2510856	0	True				
ANR	2511067	AndExpression	t1 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t2 -> GetKind ( ) == ExprTree :: LITERAL_NODE		2510856	0		&&			
ANR	2511068	EqualityExpression	t1 -> GetKind ( ) == ExprTree :: ATTRREF_NODE		2510856	0		==			
ANR	2511069	CallExpression	t1 -> GetKind ( )		2510856	0					
ANR	2511070	Callee	t1 -> GetKind		2510856	0					
ANR	2511071	PtrMemberAccess	t1 -> GetKind		2510856	0					
ANR	2511072	Identifier	t1		2510856	0					
ANR	2511073	Identifier	GetKind		2510856	1					
ANR	2511074	ArgumentList			2510856	1					
ANR	2511075	Identifier	ExprTree :: ATTRREF_NODE		2510856	1					
ANR	2511076	EqualityExpression	t2 -> GetKind ( ) == ExprTree :: LITERAL_NODE		2510856	1		==			
ANR	2511077	CallExpression	t2 -> GetKind ( )		2510856	0					
ANR	2511078	Callee	t2 -> GetKind		2510856	0					
ANR	2511079	PtrMemberAccess	t2 -> GetKind		2510856	0					
ANR	2511080	Identifier	t2		2510856	0					
ANR	2511081	Identifier	GetKind		2510856	1					
ANR	2511082	ArgumentList			2510856	1					
ANR	2511083	Identifier	ExprTree :: LITERAL_NODE		2510856	1					
ANR	2511084	CompoundStatement		47:44:1410:1410	2510856	1					
ANR	2511085	ExpressionStatement	attr = t1	1611:2:41910:41919	2510856	0	True				
ANR	2511086	AssignmentExpression	attr = t1		2510856	0		=			
ANR	2511087	Identifier	attr		2510856	0					
ANR	2511088	Identifier	t1		2510856	1					
ANR	2511089	ExpressionStatement	lit = t2	1612:2:41923:41932	2510856	1	True				
ANR	2511090	AssignmentExpression	lit = t2		2510856	0		=			
ANR	2511091	Identifier	lit		2510856	0					
ANR	2511092	Identifier	t2		2510856	1					
ANR	2511093	IfStatement	"if ( ! _CheckRef ( attr , allowed ) )"		2510856	2					
ANR	2511094	Condition	"! _CheckRef ( attr , allowed )"	1614:6:41995:42021	2510856	0	True				
ANR	2511095	UnaryOperationExpression	"! _CheckRef ( attr , allowed )"		2510856	0					
ANR	2511096	UnaryOperator	!		2510856	0					
ANR	2511097	CallExpression	"_CheckRef ( attr , allowed )"		2510856	1					
ANR	2511098	Callee	_CheckRef		2510856	0					
ANR	2511099	Identifier	_CheckRef		2510856	0					
ANR	2511100	ArgumentList	attr		2510856	1					
ANR	2511101	Argument	attr		2510856	0					
ANR	2511102	Identifier	attr		2510856	0					
ANR	2511103	Argument	allowed		2510856	1					
ANR	2511104	Identifier	allowed		2510856	0					
ANR	2511105	ReturnStatement	return ( true ) ;	1614:36:42025:42039	2510856	1	True				
ANR	2511106	Identifier	true		2510856	0					
ANR	2511107	ElseStatement	else		2510856	0					
ANR	2511108	IfStatement	if ( t2 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t1 -> GetKind ( ) == ExprTree :: LITERAL_NODE )		2510856	0					
ANR	2511109	Condition	t2 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t1 -> GetKind ( ) == ExprTree :: LITERAL_NODE	1615:11:42052:42133	2510856	0	True				
ANR	2511110	AndExpression	t2 -> GetKind ( ) == ExprTree :: ATTRREF_NODE && t1 -> GetKind ( ) == ExprTree :: LITERAL_NODE		2510856	0		&&			
ANR	2511111	EqualityExpression	t2 -> GetKind ( ) == ExprTree :: ATTRREF_NODE		2510856	0		==			
ANR	2511112	CallExpression	t2 -> GetKind ( )		2510856	0					
ANR	2511113	Callee	t2 -> GetKind		2510856	0					
ANR	2511114	PtrMemberAccess	t2 -> GetKind		2510856	0					
ANR	2511115	Identifier	t2		2510856	0					
ANR	2511116	Identifier	GetKind		2510856	1					
ANR	2511117	ArgumentList			2510856	1					
ANR	2511118	Identifier	ExprTree :: ATTRREF_NODE		2510856	1					
ANR	2511119	EqualityExpression	t1 -> GetKind ( ) == ExprTree :: LITERAL_NODE		2510856	1		==			
ANR	2511120	CallExpression	t1 -> GetKind ( )		2510856	0					
ANR	2511121	Callee	t1 -> GetKind		2510856	0					
ANR	2511122	PtrMemberAccess	t1 -> GetKind		2510856	0					
ANR	2511123	Identifier	t1		2510856	0					
ANR	2511124	Identifier	GetKind		2510856	1					
ANR	2511125	ArgumentList			2510856	1					
ANR	2511126	Identifier	ExprTree :: LITERAL_NODE		2510856	1					
ANR	2511127	CompoundStatement		54:41:1658:1658	2510856	1					
ANR	2511128	ExpressionStatement	attr = t2	1618:2:42158:42167	2510856	0	True				
ANR	2511129	AssignmentExpression	attr = t2		2510856	0		=			
ANR	2511130	Identifier	attr		2510856	0					
ANR	2511131	Identifier	t2		2510856	1					
ANR	2511132	ExpressionStatement	lit = t1	1619:2:42171:42180	2510856	1	True				
ANR	2511133	AssignmentExpression	lit = t1		2510856	0		=			
ANR	2511134	Identifier	lit		2510856	0					
ANR	2511135	Identifier	t1		2510856	1					
ANR	2511136	IfStatement	"if ( ! _CheckRef ( attr , allowed ) )"		2510856	2					
ANR	2511137	Condition	"! _CheckRef ( attr , allowed )"	1621:6:42243:42269	2510856	0	True				
ANR	2511138	UnaryOperationExpression	"! _CheckRef ( attr , allowed )"		2510856	0					
ANR	2511139	UnaryOperator	!		2510856	0					
ANR	2511140	CallExpression	"_CheckRef ( attr , allowed )"		2510856	1					
ANR	2511141	Callee	_CheckRef		2510856	0					
ANR	2511142	Identifier	_CheckRef		2510856	0					
ANR	2511143	ArgumentList	attr		2510856	1					
ANR	2511144	Argument	attr		2510856	0					
ANR	2511145	Identifier	attr		2510856	0					
ANR	2511146	Argument	allowed		2510856	1					
ANR	2511147	Identifier	allowed		2510856	0					
ANR	2511148	ReturnStatement	return ( true ) ;	1621:36:42273:42287	2510856	1	True				
ANR	2511149	Identifier	true		2510856	0					
ANR	2511150	SwitchStatement	switch ( op )		2510856	3					
ANR	2511151	Condition	op	1622:10:42299:42300	2510856	0	True				
ANR	2511152	Identifier	op		2510856	0					
ANR	2511153	CompoundStatement		60:15:1827:1827	2510856	1					
ANR	2511154	Label	case Operation :: LESS_THAN_OP :	1623:3:42309:42337	2510856	0	True				
ANR	2511155	Identifier	Operation :: LESS_THAN_OP		2510856	0					
ANR	2511156	ExpressionStatement	op = Operation :: GREATER_THAN_OP	1624:4:42344:42375	2510856	1	True				
ANR	2511157	AssignmentExpression	op = Operation :: GREATER_THAN_OP		2510856	0		=			
ANR	2511158	Identifier	op		2510856	0					
ANR	2511159	Identifier	Operation :: GREATER_THAN_OP		2510856	1					
ANR	2511160	BreakStatement	break ;	1625:4:42382:42387	2510856	2	True				
ANR	2511161	Label	case Operation :: GREATER_THAN_OP :	1626:3:42392:42423	2510856	3	True				
ANR	2511162	Identifier	Operation :: GREATER_THAN_OP		2510856	0					
ANR	2511163	ExpressionStatement	op = Operation :: LESS_THAN_OP	1627:4:42430:42458	2510856	4	True				
ANR	2511164	AssignmentExpression	op = Operation :: LESS_THAN_OP		2510856	0		=			
ANR	2511165	Identifier	op		2510856	0					
ANR	2511166	Identifier	Operation :: LESS_THAN_OP		2510856	1					
ANR	2511167	BreakStatement	break ;	1628:4:42465:42470	2510856	5	True				
ANR	2511168	Label	case Operation :: LESS_OR_EQUAL_OP :	1629:3:42475:42507	2510856	6	True				
ANR	2511169	Identifier	Operation :: LESS_OR_EQUAL_OP		2510856	0					
ANR	2511170	ExpressionStatement	op = Operation :: GREATER_OR_EQUAL_OP	1630:4:42514:42549	2510856	7	True				
ANR	2511171	AssignmentExpression	op = Operation :: GREATER_OR_EQUAL_OP		2510856	0		=			
ANR	2511172	Identifier	op		2510856	0					
ANR	2511173	Identifier	Operation :: GREATER_OR_EQUAL_OP		2510856	1					
ANR	2511174	BreakStatement	break ;	1631:4:42556:42561	2510856	8	True				
ANR	2511175	Label	case Operation :: GREATER_OR_EQUAL_OP :	1632:3:42566:42601	2510856	9	True				
ANR	2511176	Identifier	Operation :: GREATER_OR_EQUAL_OP		2510856	0					
ANR	2511177	ExpressionStatement	op = Operation :: LESS_OR_EQUAL_OP	1633:4:42608:42640	2510856	10	True				
ANR	2511178	AssignmentExpression	op = Operation :: LESS_OR_EQUAL_OP		2510856	0		=			
ANR	2511179	Identifier	op		2510856	0					
ANR	2511180	Identifier	Operation :: LESS_OR_EQUAL_OP		2510856	1					
ANR	2511181	BreakStatement	break ;	1634:4:42647:42652	2510856	11	True				
ANR	2511182	Label	default :	1635:3:42657:42664	2510856	12	True				
ANR	2511183	Identifier	default		2510856	0					
ANR	2511184	BreakStatement	break ;	1636:4:42670:42675	2510856	13	True				
ANR	2511185	ElseStatement	else		2510856	0					
ANR	2511186	CompoundStatement		76:8:2212:2212	2510856	0					
ANR	2511187	ExpressionStatement	r . AddDeviantExported ( )	1640:2:42732:42755	2510856	0	True				
ANR	2511188	CallExpression	r . AddDeviantExported ( )		2510856	0					
ANR	2511189	Callee	r . AddDeviantExported		2510856	0					
ANR	2511190	MemberAccess	r . AddDeviantExported		2510856	0					
ANR	2511191	Identifier	r		2510856	0					
ANR	2511192	Identifier	AddDeviantExported		2510856	1					
ANR	2511193	ArgumentList			2510856	1					
ANR	2511194	ReturnStatement	return ( true ) ;	1641:2:42759:42773	2510856	1	True				
ANR	2511195	Identifier	true		2510856	0					
ANR	2511196	IdentifierDeclStatement	Value val ;	1645:1:42821:42830	2510856	13	True				
ANR	2511197	IdentifierDecl	val		2510856	0					
ANR	2511198	IdentifierDeclType	Value		2510856	0					
ANR	2511199	Identifier	val		2510856	1					
ANR	2511200	ExpressionStatement	( ( Literal * ) lit ) -> GetValue ( val )	1646:1:42833:42865	2510856	14	True				
ANR	2511201	CallExpression	( ( Literal * ) lit ) -> GetValue ( val )		2510856	0					
ANR	2511202	Callee	( ( Literal * ) lit ) -> GetValue		2510856	0					
ANR	2511203	PtrMemberAccess	( ( Literal * ) lit ) -> GetValue		2510856	0					
ANR	2511204	CastExpression	( Literal * ) lit		2510856	0					
ANR	2511205	CastTarget	Literal *		2510856	0					
ANR	2511206	Identifier	lit		2510856	1					
ANR	2511207	Identifier	GetValue		2510856	1					
ANR	2511208	ArgumentList	val		2510856	1					
ANR	2511209	Argument	val		2510856	0					
ANR	2511210	Identifier	val		2510856	0					
ANR	2511211	IfStatement	if ( val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( ) )		2510856	15					
ANR	2511212	Condition	val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( )	1647:5:42872:42938	2510856	0	True				
ANR	2511213	OrExpression	val . IsExceptional ( ) || val . IsClassAdValue ( ) || val . IsListValue ( )		2510856	0		||			
ANR	2511214	CallExpression	val . IsExceptional ( )		2510856	0					
ANR	2511215	Callee	val . IsExceptional		2510856	0					
ANR	2511216	MemberAccess	val . IsExceptional		2510856	0					
ANR	2511217	Identifier	val		2510856	0					
ANR	2511218	Identifier	IsExceptional		2510856	1					
ANR	2511219	ArgumentList			2510856	1					
ANR	2511220	OrExpression	val . IsClassAdValue ( ) || val . IsListValue ( )		2510856	1		||			
ANR	2511221	CallExpression	val . IsClassAdValue ( )		2510856	0					
ANR	2511222	Callee	val . IsClassAdValue		2510856	0					
ANR	2511223	MemberAccess	val . IsClassAdValue		2510856	0					
ANR	2511224	Identifier	val		2510856	0					
ANR	2511225	Identifier	IsClassAdValue		2510856	1					
ANR	2511226	ArgumentList			2510856	1					
ANR	2511227	CallExpression	val . IsListValue ( )		2510856	1					
ANR	2511228	Callee	val . IsListValue		2510856	0					
ANR	2511229	MemberAccess	val . IsListValue		2510856	0					
ANR	2511230	Identifier	val		2510856	0					
ANR	2511231	Identifier	IsListValue		2510856	1					
ANR	2511232	ArgumentList			2510856	1					
ANR	2511233	CompoundStatement		85:75:2465:2465	2510856	1					
ANR	2511234	ReturnStatement	return ( false ) ;	1648:2:42946:42961	2510856	0	True				
ANR	2511235	Identifier	false		2510856	0					
ANR	2511236	ExpressionStatement	"( ( AttributeReference * ) attr ) -> GetComponents ( expr , attrName , absolute )"	1652:1:43022:43092	2510856	16	True				
ANR	2511237	CallExpression	"( ( AttributeReference * ) attr ) -> GetComponents ( expr , attrName , absolute )"		2510856	0					
ANR	2511238	Callee	( ( AttributeReference * ) attr ) -> GetComponents		2510856	0					
ANR	2511239	PtrMemberAccess	( ( AttributeReference * ) attr ) -> GetComponents		2510856	0					
ANR	2511240	CastExpression	( AttributeReference * ) attr		2510856	0					
ANR	2511241	CastTarget	AttributeReference *		2510856	0					
ANR	2511242	Identifier	attr		2510856	1					
ANR	2511243	Identifier	GetComponents		2510856	1					
ANR	2511244	ArgumentList	expr		2510856	1					
ANR	2511245	Argument	expr		2510856	0					
ANR	2511246	Identifier	expr		2510856	0					
ANR	2511247	Argument	attrName		2510856	1					
ANR	2511248	Identifier	attrName		2510856	0					
ANR	2511249	Argument	absolute		2510856	2					
ANR	2511250	Identifier	absolute		2510856	0					
ANR	2511251	SwitchStatement	switch ( op )		2510856	17					
ANR	2511252	Condition	op	1655:12:43177:43178	2510856	0	True				
ANR	2511253	Identifier	op		2510856	0					
ANR	2511254	CompoundStatement		93:17:2705:2705	2510856	1					
ANR	2511255	Label	case Operation :: LESS_THAN_OP :	1656:8:43192:43220	2510856	0	True				
ANR	2511256	Identifier	Operation :: LESS_THAN_OP		2510856	0					
ANR	2511257	ReturnStatement	"return ( r . AddUpperBound ( attrName , val , true , true ) == Rectangles :: RECT_NO_ERROR ) ;"	1657:3:43225:43312	2510856	1	True				
ANR	2511258	EqualityExpression	"r . AddUpperBound ( attrName , val , true , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		==			
ANR	2511259	CallExpression	"r . AddUpperBound ( attrName , val , true , true )"		2510856	0					
ANR	2511260	Callee	r . AddUpperBound		2510856	0					
ANR	2511261	MemberAccess	r . AddUpperBound		2510856	0					
ANR	2511262	Identifier	r		2510856	0					
ANR	2511263	Identifier	AddUpperBound		2510856	1					
ANR	2511264	ArgumentList	attrName		2510856	1					
ANR	2511265	Argument	attrName		2510856	0					
ANR	2511266	Identifier	attrName		2510856	0					
ANR	2511267	Argument	val		2510856	1					
ANR	2511268	Identifier	val		2510856	0					
ANR	2511269	Argument	true		2510856	2					
ANR	2511270	Identifier	true		2510856	0					
ANR	2511271	Argument	true		2510856	3					
ANR	2511272	Identifier	true		2510856	0					
ANR	2511273	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511274	Label	case Operation :: LESS_OR_EQUAL_OP :	1660:8:43331:43363	2510856	2	True				
ANR	2511275	Identifier	Operation :: LESS_OR_EQUAL_OP		2510856	0					
ANR	2511276	ReturnStatement	"return ( r . AddUpperBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR ) ;"	1661:3:43368:43456	2510856	3	True				
ANR	2511277	EqualityExpression	"r . AddUpperBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		==			
ANR	2511278	CallExpression	"r . AddUpperBound ( attrName , val , false , true )"		2510856	0					
ANR	2511279	Callee	r . AddUpperBound		2510856	0					
ANR	2511280	MemberAccess	r . AddUpperBound		2510856	0					
ANR	2511281	Identifier	r		2510856	0					
ANR	2511282	Identifier	AddUpperBound		2510856	1					
ANR	2511283	ArgumentList	attrName		2510856	1					
ANR	2511284	Argument	attrName		2510856	0					
ANR	2511285	Identifier	attrName		2510856	0					
ANR	2511286	Argument	val		2510856	1					
ANR	2511287	Identifier	val		2510856	0					
ANR	2511288	Argument	false		2510856	2					
ANR	2511289	Identifier	false		2510856	0					
ANR	2511290	Argument	true		2510856	3					
ANR	2511291	Identifier	true		2510856	0					
ANR	2511292	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511293	Label	case Operation :: EQUAL_OP :	1664:8:43475:43499	2510856	4	True				
ANR	2511294	Identifier	Operation :: EQUAL_OP		2510856	0					
ANR	2511295	Label	case Operation :: IS_OP :	1665:8:43509:43530	2510856	5	True				
ANR	2511296	Identifier	Operation :: IS_OP		2510856	0					
ANR	2511297	ReturnStatement	"return ( r . AddUpperBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR && r . AddLowerBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR ) ;"	1666:3:43535:43721	2510856	6	True				
ANR	2511298	AndExpression	"r . AddUpperBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR && r . AddLowerBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		&&			
ANR	2511299	EqualityExpression	"r . AddUpperBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		==			
ANR	2511300	CallExpression	"r . AddUpperBound ( attrName , val , false , true )"		2510856	0					
ANR	2511301	Callee	r . AddUpperBound		2510856	0					
ANR	2511302	MemberAccess	r . AddUpperBound		2510856	0					
ANR	2511303	Identifier	r		2510856	0					
ANR	2511304	Identifier	AddUpperBound		2510856	1					
ANR	2511305	ArgumentList	attrName		2510856	1					
ANR	2511306	Argument	attrName		2510856	0					
ANR	2511307	Identifier	attrName		2510856	0					
ANR	2511308	Argument	val		2510856	1					
ANR	2511309	Identifier	val		2510856	0					
ANR	2511310	Argument	false		2510856	2					
ANR	2511311	Identifier	false		2510856	0					
ANR	2511312	Argument	true		2510856	3					
ANR	2511313	Identifier	true		2510856	0					
ANR	2511314	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511315	EqualityExpression	"r . AddLowerBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR"		2510856	1		==			
ANR	2511316	CallExpression	"r . AddLowerBound ( attrName , val , false , true )"		2510856	0					
ANR	2511317	Callee	r . AddLowerBound		2510856	0					
ANR	2511318	MemberAccess	r . AddLowerBound		2510856	0					
ANR	2511319	Identifier	r		2510856	0					
ANR	2511320	Identifier	AddLowerBound		2510856	1					
ANR	2511321	ArgumentList	attrName		2510856	1					
ANR	2511322	Argument	attrName		2510856	0					
ANR	2511323	Identifier	attrName		2510856	0					
ANR	2511324	Argument	val		2510856	1					
ANR	2511325	Identifier	val		2510856	0					
ANR	2511326	Argument	false		2510856	2					
ANR	2511327	Identifier	false		2510856	0					
ANR	2511328	Argument	true		2510856	3					
ANR	2511329	Identifier	true		2510856	0					
ANR	2511330	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511331	Label	case Operation :: GREATER_THAN_OP :	1671:2:43734:43765	2510856	7	True				
ANR	2511332	Identifier	Operation :: GREATER_THAN_OP		2510856	0					
ANR	2511333	ReturnStatement	"return ( r . AddLowerBound ( attrName , val , true , true ) == Rectangles :: RECT_NO_ERROR ) ;"	1672:3:43770:43857	2510856	8	True				
ANR	2511334	EqualityExpression	"r . AddLowerBound ( attrName , val , true , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		==			
ANR	2511335	CallExpression	"r . AddLowerBound ( attrName , val , true , true )"		2510856	0					
ANR	2511336	Callee	r . AddLowerBound		2510856	0					
ANR	2511337	MemberAccess	r . AddLowerBound		2510856	0					
ANR	2511338	Identifier	r		2510856	0					
ANR	2511339	Identifier	AddLowerBound		2510856	1					
ANR	2511340	ArgumentList	attrName		2510856	1					
ANR	2511341	Argument	attrName		2510856	0					
ANR	2511342	Identifier	attrName		2510856	0					
ANR	2511343	Argument	val		2510856	1					
ANR	2511344	Identifier	val		2510856	0					
ANR	2511345	Argument	true		2510856	2					
ANR	2511346	Identifier	true		2510856	0					
ANR	2511347	Argument	true		2510856	3					
ANR	2511348	Identifier	true		2510856	0					
ANR	2511349	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511350	Label	case Operation :: GREATER_OR_EQUAL_OP :	1675:8:43876:43911	2510856	9	True				
ANR	2511351	Identifier	Operation :: GREATER_OR_EQUAL_OP		2510856	0					
ANR	2511352	ReturnStatement	"return ( r . AddLowerBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR ) ;"	1676:3:43916:44004	2510856	10	True				
ANR	2511353	EqualityExpression	"r . AddLowerBound ( attrName , val , false , true ) == Rectangles :: RECT_NO_ERROR"		2510856	0		==			
ANR	2511354	CallExpression	"r . AddLowerBound ( attrName , val , false , true )"		2510856	0					
ANR	2511355	Callee	r . AddLowerBound		2510856	0					
ANR	2511356	MemberAccess	r . AddLowerBound		2510856	0					
ANR	2511357	Identifier	r		2510856	0					
ANR	2511358	Identifier	AddLowerBound		2510856	1					
ANR	2511359	ArgumentList	attrName		2510856	1					
ANR	2511360	Argument	attrName		2510856	0					
ANR	2511361	Identifier	attrName		2510856	0					
ANR	2511362	Argument	val		2510856	1					
ANR	2511363	Identifier	val		2510856	0					
ANR	2511364	Argument	false		2510856	2					
ANR	2511365	Identifier	false		2510856	0					
ANR	2511366	Argument	true		2510856	3					
ANR	2511367	Identifier	true		2510856	0					
ANR	2511368	Identifier	Rectangles :: RECT_NO_ERROR		2510856	1					
ANR	2511369	Label	default :	1679:8:44023:44030	2510856	11	True				
ANR	2511370	Identifier	default		2510856	0					
ANR	2511371	ReturnStatement	return ( false ) ;	1680:12:44044:44059	2510856	12	True				
ANR	2511372	Identifier	false		2510856	0					
ANR	2511373	ReturnStatement	return ( false ) ;	1683:4:44072:44087	2510856	18	True				
ANR	2511374	Identifier	false		2510856	0					
ANR	2511375	ReturnType	bool		2510856	1					
ANR	2511376	Identifier	ClassAd :: _MakeRectangles		2510856	2					
ANR	2511377	ParameterList	"const ExprTree * tree , const string & allowed , Rectangles & r , bool ORmode"		2510856	3					
ANR	2511378	Parameter	const ExprTree * tree	1561:17:40400:40419	2510856	0	True				
ANR	2511379	ParameterType	const ExprTree *		2510856	0					
ANR	2511380	Identifier	tree		2510856	1					
ANR	2511381	Parameter	const string & allowed	1561:39:40422:40442	2510856	1	True				
ANR	2511382	ParameterType	const string &		2510856	0					
ANR	2511383	Identifier	allowed		2510856	1					
ANR	2511384	Parameter	Rectangles & r	1561:62:40445:40457	2510856	2	True				
ANR	2511385	ParameterType	Rectangles &		2510856	0					
ANR	2511386	Identifier	r		2510856	1					
ANR	2511387	Parameter	bool ORmode	1562:1:40462:40472	2510856	3	True				
ANR	2511388	ParameterType	bool		2510856	0					
ANR	2511389	Identifier	ORmode		2510856	1					
ANR	2511390	CFGEntryNode	ENTRY		2510856		True				
ANR	2511391	CFGExitNode	EXIT		2510856		True				
ANR	2511392	Symbol	ORmode		2510856						
ANR	2511393	Symbol	_MakeRectangles		2510856						
ANR	2511394	Symbol	allowed		2510856						
ANR	2511395	Symbol	ExprTree :: ATTRREF_NODE		2510856						
ANR	2511396	Symbol	ExprTree :: LITERAL_NODE		2510856						
ANR	2511397	Symbol	Operation :: LOGICAL_AND_OP		2510856						
ANR	2511398	Symbol	Operation :: NOT_EQUAL_OP		2510856						
ANR	2511399	Symbol	OP_NODE		2510856						
ANR	2511400	Symbol	val . IsClassAdValue		2510856						
ANR	2511401	Symbol	val . IsExceptional		2510856						
ANR	2511402	Symbol	tree -> GetKind		2510856						
ANR	2511403	Symbol	lit		2510856						
ANR	2511404	Symbol	expr		2510856						
ANR	2511405	Symbol	attr		2510856						
ANR	2511406	Symbol	val . IsListValue		2510856						
ANR	2511407	Symbol	attrName		2510856						
ANR	2511408	Symbol	t2 -> GetKind		2510856						
ANR	2511409	Symbol	* t1		2510856						
ANR	2511410	Symbol	val		2510856						
ANR	2511411	Symbol	op		2510856						
ANR	2511412	Symbol	r . AddLowerBound		2510856						
ANR	2511413	Symbol	NULL		2510856						
ANR	2511414	Symbol	Operation :: __COMPARISON_START__		2510856						
ANR	2511415	Symbol	Operation :: LESS_THAN_OP		2510856						
ANR	2511416	Symbol	* t2		2510856						
ANR	2511417	Symbol	Operation :: GREATER_THAN_OP		2510856						
ANR	2511418	Symbol	tree		2510856						
ANR	2511419	Symbol	false		2510856						
ANR	2511420	Symbol	Operation :: LOGICAL_OR_OP		2510856						
ANR	2511421	Symbol	r . AddUpperBound		2510856						
ANR	2511422	Symbol	Rectangles :: RECT_NO_ERROR		2510856						
ANR	2511423	Symbol	t1 -> GetKind		2510856						
ANR	2511424	Symbol	* tree		2510856						
ANR	2511425	Symbol	Operation :: ISNT_OP		2510856						
ANR	2511426	Symbol	_CheckRef		2510856						
ANR	2511427	Symbol	Operation :: LESS_OR_EQUAL_OP		2510856						
ANR	2511428	Symbol	r		2510856						
ANR	2511429	Symbol	Operation :: PARENTHESES_OP		2510856						
ANR	2511430	Symbol	absolute		2510856						
ANR	2511431	Symbol	true		2510856						
ANR	2511432	Symbol	Operation :: GREATER_OR_EQUAL_OP		2510856						
ANR	2511433	Symbol	t1		2510856						
ANR	2511434	Symbol	t2		2510856						
ANR	2511435	Symbol	Operation :: __COMPARISON_END__		2510856						
ANR	2511436	Function	ClassAd :: _CheckRef	1686:0:44092:44662							
ANR	2511437	FunctionDef	"ClassAd :: _CheckRef (ExprTree * tree , const string & allowed)"		2511436	0					
ANR	2511438	CompoundStatement		1688:0:44158:44662	2511436	0					
ANR	2511439	IdentifierDeclStatement	"ExprTree * expr , * exprSub ;"	1689:1:44161:44186	2511436	0	True				
ANR	2511440	IdentifierDecl	* expr		2511436	0					
ANR	2511441	IdentifierDeclType	ExprTree *		2511436	0					
ANR	2511442	Identifier	expr		2511436	1					
ANR	2511443	IdentifierDecl	* exprSub		2511436	1					
ANR	2511444	IdentifierDeclType	ExprTree *		2511436	0					
ANR	2511445	Identifier	exprSub		2511436	1					
ANR	2511446	IdentifierDeclStatement	"string attrName , attrNameSub ;"	1690:1:44189:44218	2511436	1	True				
ANR	2511447	IdentifierDecl	attrName		2511436	0					
ANR	2511448	IdentifierDeclType	string		2511436	0					
ANR	2511449	Identifier	attrName		2511436	1					
ANR	2511450	IdentifierDecl	attrNameSub		2511436	1					
ANR	2511451	IdentifierDeclType	string		2511436	0					
ANR	2511452	Identifier	attrNameSub		2511436	1					
ANR	2511453	IdentifierDeclStatement	bool absolute ;	1691:1:44221:44235	2511436	2	True				
ANR	2511454	IdentifierDecl	absolute		2511436	0					
ANR	2511455	IdentifierDeclType	bool		2511436	0					
ANR	2511456	Identifier	absolute		2511436	1					
ANR	2511457	IfStatement	if ( ! tree -> GetKind ( ) == ATTRREF_NODE )		2511436	3					
ANR	2511458	Condition	! tree -> GetKind ( ) == ATTRREF_NODE	1693:5:44243:44274	2511436	0	True				
ANR	2511459	EqualityExpression	! tree -> GetKind ( ) == ATTRREF_NODE		2511436	0		==			
ANR	2511460	UnaryOperationExpression	! tree -> GetKind ( )		2511436	0					
ANR	2511461	UnaryOperator	!		2511436	0					
ANR	2511462	CallExpression	tree -> GetKind ( )		2511436	1					
ANR	2511463	Callee	tree -> GetKind		2511436	0					
ANR	2511464	PtrMemberAccess	tree -> GetKind		2511436	0					
ANR	2511465	Identifier	tree		2511436	0					
ANR	2511466	Identifier	GetKind		2511436	1					
ANR	2511467	ArgumentList			2511436	1					
ANR	2511468	Identifier	ATTRREF_NODE		2511436	1					
ANR	2511469	ReturnStatement	return ( false ) ;	1693:40:44278:44293	2511436	1	True				
ANR	2511470	Identifier	false		2511436	0					
ANR	2511471	ExpressionStatement	"( ( AttributeReference * ) tree ) -> GetComponents ( expr , attrName , absolute )"	1694:1:44296:44366	2511436	4	True				
ANR	2511472	CallExpression	"( ( AttributeReference * ) tree ) -> GetComponents ( expr , attrName , absolute )"		2511436	0					
ANR	2511473	Callee	( ( AttributeReference * ) tree ) -> GetComponents		2511436	0					
ANR	2511474	PtrMemberAccess	( ( AttributeReference * ) tree ) -> GetComponents		2511436	0					
ANR	2511475	CastExpression	( AttributeReference * ) tree		2511436	0					
ANR	2511476	CastTarget	AttributeReference *		2511436	0					
ANR	2511477	Identifier	tree		2511436	1					
ANR	2511478	Identifier	GetComponents		2511436	1					
ANR	2511479	ArgumentList	expr		2511436	1					
ANR	2511480	Argument	expr		2511436	0					
ANR	2511481	Identifier	expr		2511436	0					
ANR	2511482	Argument	attrName		2511436	1					
ANR	2511483	Identifier	attrName		2511436	0					
ANR	2511484	Argument	absolute		2511436	2					
ANR	2511485	Identifier	absolute		2511436	0					
ANR	2511486	IfStatement	if ( absolute || ! expr || expr -> GetKind ( ) != ATTRREF_NODE )		2511436	5					
ANR	2511487	Condition	absolute || ! expr || expr -> GetKind ( ) != ATTRREF_NODE	1695:5:44373:44424	2511436	0	True				
ANR	2511488	OrExpression	absolute || ! expr || expr -> GetKind ( ) != ATTRREF_NODE		2511436	0		||			
ANR	2511489	Identifier	absolute		2511436	0					
ANR	2511490	OrExpression	! expr || expr -> GetKind ( ) != ATTRREF_NODE		2511436	1		||			
ANR	2511491	UnaryOperationExpression	! expr		2511436	0					
ANR	2511492	UnaryOperator	!		2511436	0					
ANR	2511493	Identifier	expr		2511436	1					
ANR	2511494	EqualityExpression	expr -> GetKind ( ) != ATTRREF_NODE		2511436	1		!=			
ANR	2511495	CallExpression	expr -> GetKind ( )		2511436	0					
ANR	2511496	Callee	expr -> GetKind		2511436	0					
ANR	2511497	PtrMemberAccess	expr -> GetKind		2511436	0					
ANR	2511498	Identifier	expr		2511436	0					
ANR	2511499	Identifier	GetKind		2511436	1					
ANR	2511500	ArgumentList			2511436	1					
ANR	2511501	Identifier	ATTRREF_NODE		2511436	1					
ANR	2511502	ReturnStatement	return ( false ) ;	1695:60:44428:44443	2511436	1	True				
ANR	2511503	Identifier	false		2511436	0					
ANR	2511504	ExpressionStatement	"( ( AttributeReference * ) expr ) -> GetComponents ( exprSub , attrNameSub , absolute )"	1696:1:44446:44520	2511436	6	True				
ANR	2511505	CallExpression	"( ( AttributeReference * ) expr ) -> GetComponents ( exprSub , attrNameSub , absolute )"		2511436	0					
ANR	2511506	Callee	( ( AttributeReference * ) expr ) -> GetComponents		2511436	0					
ANR	2511507	PtrMemberAccess	( ( AttributeReference * ) expr ) -> GetComponents		2511436	0					
ANR	2511508	CastExpression	( AttributeReference * ) expr		2511436	0					
ANR	2511509	CastTarget	AttributeReference *		2511436	0					
ANR	2511510	Identifier	expr		2511436	1					
ANR	2511511	Identifier	GetComponents		2511436	1					
ANR	2511512	ArgumentList	exprSub		2511436	1					
ANR	2511513	Argument	exprSub		2511436	0					
ANR	2511514	Identifier	exprSub		2511436	0					
ANR	2511515	Argument	attrNameSub		2511436	1					
ANR	2511516	Identifier	attrNameSub		2511436	0					
ANR	2511517	Argument	absolute		2511436	2					
ANR	2511518	Identifier	absolute		2511436	0					
ANR	2511519	IfStatement	if ( exprSub || absolute )		2511436	7					
ANR	2511520	Condition	exprSub || absolute	1697:5:44527:44545	2511436	0	True				
ANR	2511521	OrExpression	exprSub || absolute		2511436	0		||			
ANR	2511522	Identifier	exprSub		2511436	0					
ANR	2511523	Identifier	absolute		2511436	1					
ANR	2511524	ReturnStatement	return ( false ) ;	1697:27:44549:44564	2511436	1	True				
ANR	2511525	Identifier	false		2511436	0					
ANR	2511526	IfStatement	"if ( strcasecmp ( attrNameSub . c_str ( ) , allowed . c_str ( ) ) != 0 )"		2511436	8					
ANR	2511527	Condition	"strcasecmp ( attrNameSub . c_str ( ) , allowed . c_str ( ) ) != 0"	1698:5:44571:44623	2511436	0	True				
ANR	2511528	EqualityExpression	"strcasecmp ( attrNameSub . c_str ( ) , allowed . c_str ( ) ) != 0"		2511436	0		!=			
ANR	2511529	CallExpression	"strcasecmp ( attrNameSub . c_str ( ) , allowed . c_str ( ) )"		2511436	0					
ANR	2511530	Callee	strcasecmp		2511436	0					
ANR	2511531	Identifier	strcasecmp		2511436	0					
ANR	2511532	ArgumentList	attrNameSub . c_str ( )		2511436	1					
ANR	2511533	Argument	attrNameSub . c_str ( )		2511436	0					
ANR	2511534	CallExpression	attrNameSub . c_str ( )		2511436	0					
ANR	2511535	Callee	attrNameSub . c_str		2511436	0					
ANR	2511536	MemberAccess	attrNameSub . c_str		2511436	0					
ANR	2511537	Identifier	attrNameSub		2511436	0					
ANR	2511538	Identifier	c_str		2511436	1					
ANR	2511539	ArgumentList			2511436	1					
ANR	2511540	Argument	allowed . c_str ( )		2511436	1					
ANR	2511541	CallExpression	allowed . c_str ( )		2511436	0					
ANR	2511542	Callee	allowed . c_str		2511436	0					
ANR	2511543	MemberAccess	allowed . c_str		2511436	0					
ANR	2511544	Identifier	allowed		2511436	0					
ANR	2511545	Identifier	c_str		2511436	1					
ANR	2511546	ArgumentList			2511436	1					
ANR	2511547	PrimaryExpression	0		2511436	1					
ANR	2511548	ReturnStatement	return ( false ) ;	1698:61:44627:44642	2511436	1	True				
ANR	2511549	Identifier	false		2511436	0					
ANR	2511550	ReturnStatement	return ( true ) ;	1700:1:44646:44660	2511436	9	True				
ANR	2511551	Identifier	true		2511436	0					
ANR	2511552	ReturnType	bool		2511436	1					
ANR	2511553	Identifier	ClassAd :: _CheckRef		2511436	2					
ANR	2511554	ParameterList	"ExprTree * tree , const string & allowed"		2511436	3					
ANR	2511555	Parameter	ExprTree * tree	1687:11:44118:44131	2511436	0	True				
ANR	2511556	ParameterType	ExprTree *		2511436	0					
ANR	2511557	Identifier	tree		2511436	1					
ANR	2511558	Parameter	const string & allowed	1687:27:44134:44154	2511436	1	True				
ANR	2511559	ParameterType	const string &		2511436	0					
ANR	2511560	Identifier	allowed		2511436	1					
ANR	2511561	CFGEntryNode	ENTRY		2511436		True				
ANR	2511562	CFGExitNode	EXIT		2511436		True				
ANR	2511563	Symbol	expr -> GetKind		2511436						
ANR	2511564	Symbol	attrNameSub . c_str		2511436						
ANR	2511565	Symbol	allowed		2511436						
ANR	2511566	Symbol	tree		2511436						
ANR	2511567	Symbol	false		2511436						
ANR	2511568	Symbol	allowed . c_str		2511436						
ANR	2511569	Symbol	* tree		2511436						
ANR	2511570	Symbol	exprSub		2511436						
ANR	2511571	Symbol	tree -> GetKind		2511436						
ANR	2511572	Symbol	ATTRREF_NODE		2511436						
ANR	2511573	Symbol	* expr		2511436						
ANR	2511574	Symbol	attrNameSub		2511436						
ANR	2511575	Symbol	absolute		2511436						
ANR	2511576	Symbol	true		2511436						
ANR	2511577	Symbol	expr		2511436						
ANR	2511578	Symbol	strcasecmp		2511436						
ANR	2511579	Symbol	attrName		2511436						
ANR	2511580	Function	ClassAd :: Flatten	1707:0:44692:44873							
ANR	2511581	FunctionDef	"ClassAd :: Flatten (const ExprTree * tree , Value & val , ExprTree * & fexpr)"		2511580	0					
ANR	2511582	CompoundStatement		1709:0:44777:44873	2511580	0					
ANR	2511583	IdentifierDeclStatement	EvalState state ;	1710:1:44780:44795	2511580	0	True				
ANR	2511584	IdentifierDecl	state		2511580	0					
ANR	2511585	IdentifierDeclType	EvalState		2511580	0					
ANR	2511586	Identifier	state		2511580	1					
ANR	2511587	ExpressionStatement	state . SetScopes ( this )	1712:1:44799:44822	2511580	1	True				
ANR	2511588	CallExpression	state . SetScopes ( this )		2511580	0					
ANR	2511589	Callee	state . SetScopes		2511580	0					
ANR	2511590	MemberAccess	state . SetScopes		2511580	0					
ANR	2511591	Identifier	state		2511580	0					
ANR	2511592	Identifier	SetScopes		2511580	1					
ANR	2511593	ArgumentList	this		2511580	1					
ANR	2511594	Argument	this		2511580	0					
ANR	2511595	Identifier	this		2511580	0					
ANR	2511596	ReturnStatement	"return ( tree -> Flatten ( state , val , fexpr ) ) ;"	1713:1:44825:44871	2511580	2	True				
ANR	2511597	CallExpression	"tree -> Flatten ( state , val , fexpr )"		2511580	0					
ANR	2511598	Callee	tree -> Flatten		2511580	0					
ANR	2511599	PtrMemberAccess	tree -> Flatten		2511580	0					
ANR	2511600	Identifier	tree		2511580	0					
ANR	2511601	Identifier	Flatten		2511580	1					
ANR	2511602	ArgumentList	state		2511580	1					
ANR	2511603	Argument	state		2511580	0					
ANR	2511604	Identifier	state		2511580	0					
ANR	2511605	Argument	val		2511580	1					
ANR	2511606	Identifier	val		2511580	0					
ANR	2511607	Argument	fexpr		2511580	2					
ANR	2511608	Identifier	fexpr		2511580	0					
ANR	2511609	ReturnType	bool		2511580	1					
ANR	2511610	Identifier	ClassAd :: Flatten		2511580	2					
ANR	2511611	ParameterList	"const ExprTree * tree , Value & val , ExprTree * & fexpr"		2511580	3					
ANR	2511612	Parameter	const ExprTree * tree	1708:9:44716:44735	2511580	0	True				
ANR	2511613	ParameterType	const ExprTree *		2511580	0					
ANR	2511614	Identifier	tree		2511580	1					
ANR	2511615	Parameter	Value & val	1708:32:44739:44748	2511580	1	True				
ANR	2511616	ParameterType	Value &		2511580	0					
ANR	2511617	Identifier	val		2511580	1					
ANR	2511618	Parameter	ExprTree * & fexpr	1708:45:44752:44767	2511580	2	True				
ANR	2511619	ParameterType	ExprTree * &		2511580	0					
ANR	2511620	Identifier	fexpr		2511580	1					
ANR	2511621	CFGEntryNode	ENTRY		2511580		True				
ANR	2511622	CFGExitNode	EXIT		2511580		True				
ANR	2511623	Symbol	val		2511580						
ANR	2511624	Symbol	* tree		2511580						
ANR	2511625	Symbol	fexpr		2511580						
ANR	2511626	Symbol	tree		2511580						
ANR	2511627	Symbol	this		2511580						
ANR	2511628	Symbol	state		2511580						
ANR	2511629	Symbol	tree -> Flatten		2511580						
ANR	2511630	Function	ClassAd :: FlattenAndInline	1716:0:44876:45105							
ANR	2511631	FunctionDef	"ClassAd :: FlattenAndInline (const ExprTree * tree , Value & val , ExprTree * & fexpr)"		2511630	0					
ANR	2511632	CompoundStatement		1718:0:44977:45105	2511630	0					
ANR	2511633	IdentifierDeclStatement	EvalState state ;	1719:1:44980:44995	2511630	0	True				
ANR	2511634	IdentifierDecl	state		2511630	0					
ANR	2511635	IdentifierDeclType	EvalState		2511630	0					
ANR	2511636	Identifier	state		2511630	1					
ANR	2511637	ExpressionStatement	state . SetScopes ( this )	1721:1:44999:45022	2511630	1	True				
ANR	2511638	CallExpression	state . SetScopes ( this )		2511630	0					
ANR	2511639	Callee	state . SetScopes		2511630	0					
ANR	2511640	MemberAccess	state . SetScopes		2511630	0					
ANR	2511641	Identifier	state		2511630	0					
ANR	2511642	Identifier	SetScopes		2511630	1					
ANR	2511643	ArgumentList	this		2511630	1					
ANR	2511644	Argument	this		2511630	0					
ANR	2511645	Identifier	this		2511630	0					
ANR	2511646	ExpressionStatement	state . flattenAndInline = true	1722:1:45025:45054	2511630	2	True				
ANR	2511647	AssignmentExpression	state . flattenAndInline = true		2511630	0		=			
ANR	2511648	MemberAccess	state . flattenAndInline		2511630	0					
ANR	2511649	Identifier	state		2511630	0					
ANR	2511650	Identifier	flattenAndInline		2511630	1					
ANR	2511651	Identifier	true		2511630	1					
ANR	2511652	ReturnStatement	"return ( tree -> Flatten ( state , val , fexpr ) ) ;"	1723:1:45057:45103	2511630	3	True				
ANR	2511653	CallExpression	"tree -> Flatten ( state , val , fexpr )"		2511630	0					
ANR	2511654	Callee	tree -> Flatten		2511630	0					
ANR	2511655	PtrMemberAccess	tree -> Flatten		2511630	0					
ANR	2511656	Identifier	tree		2511630	0					
ANR	2511657	Identifier	Flatten		2511630	1					
ANR	2511658	ArgumentList	state		2511630	1					
ANR	2511659	Argument	state		2511630	0					
ANR	2511660	Identifier	state		2511630	0					
ANR	2511661	Argument	val		2511630	1					
ANR	2511662	Identifier	val		2511630	0					
ANR	2511663	Argument	fexpr		2511630	2					
ANR	2511664	Identifier	fexpr		2511630	0					
ANR	2511665	ReturnType	bool		2511630	1					
ANR	2511666	Identifier	ClassAd :: FlattenAndInline		2511630	2					
ANR	2511667	ParameterList	"const ExprTree * tree , Value & val , ExprTree * & fexpr"		2511630	3					
ANR	2511668	Parameter	const ExprTree * tree	1717:18:44916:44935	2511630	0	True				
ANR	2511669	ParameterType	const ExprTree *		2511630	0					
ANR	2511670	Identifier	tree		2511630	1					
ANR	2511671	Parameter	Value & val	1717:41:44939:44948	2511630	1	True				
ANR	2511672	ParameterType	Value &		2511630	0					
ANR	2511673	Identifier	val		2511630	1					
ANR	2511674	Parameter	ExprTree * & fexpr	1717:54:44952:44967	2511630	2	True				
ANR	2511675	ParameterType	ExprTree * &		2511630	0					
ANR	2511676	Identifier	fexpr		2511630	1					
ANR	2511677	CFGEntryNode	ENTRY		2511630		True				
ANR	2511678	CFGExitNode	EXIT		2511630		True				
ANR	2511679	Symbol	val		2511630						
ANR	2511680	Symbol	* tree		2511630						
ANR	2511681	Symbol	fexpr		2511630						
ANR	2511682	Symbol	tree		2511630						
ANR	2511683	Symbol	this		2511630						
ANR	2511684	Symbol	true		2511630						
ANR	2511685	Symbol	state		2511630						
ANR	2511686	Symbol	tree -> Flatten		2511630						
ANR	2511687	Symbol	state . flattenAndInline		2511630						
ANR	2511688	Function	ClassAdIterator :: NextAttribute	1726:0:45108:45401							
ANR	2511689	FunctionDef	"ClassAdIterator :: NextAttribute (string & attr , const ExprTree * & expr)"		2511688	0					
ANR	2511690	CompoundStatement		1728:0:45184:45401	2511688	0					
ANR	2511691	IfStatement	if ( ! ad )		2511688	0					
ANR	2511692	Condition	! ad	1729:5:45191:45193	2511688	0	True				
ANR	2511693	UnaryOperationExpression	! ad		2511688	0					
ANR	2511694	UnaryOperator	!		2511688	0					
ANR	2511695	Identifier	ad		2511688	1					
ANR	2511696	ReturnStatement	return false ;	1729:10:45196:45208	2511688	1	True				
ANR	2511697	Identifier	false		2511688	0					
ANR	2511698	ExpressionStatement	"attr = """""	1731:1:45212:45221	2511688	1	True				
ANR	2511699	AssignmentExpression	"attr = """""		2511688	0		=			
ANR	2511700	Identifier	attr		2511688	0					
ANR	2511701	PrimaryExpression	""""""		2511688	1					
ANR	2511702	ExpressionStatement	expr = NULL	1732:1:45224:45235	2511688	2	True				
ANR	2511703	AssignmentExpression	expr = NULL		2511688	0		=			
ANR	2511704	Identifier	expr		2511688	0					
ANR	2511705	Identifier	NULL		2511688	1					
ANR	2511706	IfStatement	if ( itr == ad -> attrList . end ( ) )		2511688	3					
ANR	2511707	Condition	itr == ad -> attrList . end ( )	1733:5:45242:45265	2511688	0	True				
ANR	2511708	EqualityExpression	itr == ad -> attrList . end ( )		2511688	0		==			
ANR	2511709	Identifier	itr		2511688	0					
ANR	2511710	CallExpression	ad -> attrList . end ( )		2511688	1					
ANR	2511711	Callee	ad -> attrList . end		2511688	0					
ANR	2511712	MemberAccess	ad -> attrList . end		2511688	0					
ANR	2511713	PtrMemberAccess	ad -> attrList		2511688	0					
ANR	2511714	Identifier	ad		2511688	0					
ANR	2511715	Identifier	attrList		2511688	1					
ANR	2511716	Identifier	end		2511688	1					
ANR	2511717	ArgumentList			2511688	1					
ANR	2511718	ReturnStatement	return ( false ) ;	1733:32:45269:45284	2511688	1	True				
ANR	2511719	Identifier	false		2511688	0					
ANR	2511720	ExpressionStatement	itr ++	1734:1:45287:45292	2511688	4	True				
ANR	2511721	PostIncDecOperationExpression	itr ++		2511688	0					
ANR	2511722	Identifier	itr		2511688	0					
ANR	2511723	IncDec	++		2511688	1					
ANR	2511724	IfStatement	if ( itr == ad -> attrList . end ( ) )		2511688	5					
ANR	2511725	Condition	itr == ad -> attrList . end ( )	1735:5:45299:45322	2511688	0	True				
ANR	2511726	EqualityExpression	itr == ad -> attrList . end ( )		2511688	0		==			
ANR	2511727	Identifier	itr		2511688	0					
ANR	2511728	CallExpression	ad -> attrList . end ( )		2511688	1					
ANR	2511729	Callee	ad -> attrList . end		2511688	0					
ANR	2511730	MemberAccess	ad -> attrList . end		2511688	0					
ANR	2511731	PtrMemberAccess	ad -> attrList		2511688	0					
ANR	2511732	Identifier	ad		2511688	0					
ANR	2511733	Identifier	attrList		2511688	1					
ANR	2511734	Identifier	end		2511688	1					
ANR	2511735	ArgumentList			2511688	1					
ANR	2511736	ReturnStatement	return ( false ) ;	1735:32:45326:45341	2511688	1	True				
ANR	2511737	Identifier	false		2511688	0					
ANR	2511738	ExpressionStatement	attr = itr -> first	1736:1:45344:45361	2511688	6	True				
ANR	2511739	AssignmentExpression	attr = itr -> first		2511688	0		=			
ANR	2511740	Identifier	attr		2511688	0					
ANR	2511741	PtrMemberAccess	itr -> first		2511688	1					
ANR	2511742	Identifier	itr		2511688	0					
ANR	2511743	Identifier	first		2511688	1					
ANR	2511744	ExpressionStatement	expr = itr -> second	1737:1:45364:45382	2511688	7	True				
ANR	2511745	AssignmentExpression	expr = itr -> second		2511688	0		=			
ANR	2511746	Identifier	expr		2511688	0					
ANR	2511747	PtrMemberAccess	itr -> second		2511688	1					
ANR	2511748	Identifier	itr		2511688	0					
ANR	2511749	Identifier	second		2511688	1					
ANR	2511750	ReturnStatement	return ( true ) ;	1738:1:45385:45399	2511688	8	True				
ANR	2511751	Identifier	true		2511688	0					
ANR	2511752	ReturnType	bool		2511688	1					
ANR	2511753	Identifier	ClassAdIterator :: NextAttribute		2511688	2					
ANR	2511754	ParameterList	"string & attr , const ExprTree * & expr"		2511688	3					
ANR	2511755	Parameter	string & attr	1727:15:45146:45157	2511688	0	True				
ANR	2511756	ParameterType	string &		2511688	0					
ANR	2511757	Identifier	attr		2511688	1					
ANR	2511758	Parameter	const ExprTree * & expr	1727:29:45160:45180	2511688	1	True				
ANR	2511759	ParameterType	const ExprTree * &		2511688	0					
ANR	2511760	Identifier	expr		2511688	1					
ANR	2511761	CFGEntryNode	ENTRY		2511688		True				
ANR	2511762	CFGExitNode	EXIT		2511688		True				
ANR	2511763	Symbol	ad		2511688						
ANR	2511764	Symbol	NULL		2511688						
ANR	2511765	Symbol	itr		2511688						
ANR	2511766	Symbol	false		2511688						
ANR	2511767	Symbol	* ad		2511688						
ANR	2511768	Symbol	* itr		2511688						
ANR	2511769	Symbol	ad -> attrList . end		2511688						
ANR	2511770	Symbol	true		2511688						
ANR	2511771	Symbol	ad -> attrList		2511688						
ANR	2511772	Symbol	expr		2511688						
ANR	2511773	Symbol	itr -> first		2511688						
ANR	2511774	Symbol	attr		2511688						
ANR	2511775	Symbol	itr -> second		2511688						
ANR	2511776	Function	ClassAdIterator :: CurrentAttribute	1742:0:45405:45624							
ANR	2511777	FunctionDef	"ClassAdIterator :: CurrentAttribute (string & attr , const ExprTree * & expr)"		2511776	0					
ANR	2511778	CompoundStatement		1744:0:45489:45624	2511776	0					
ANR	2511779	IfStatement	if ( ! ad )		2511776	0					
ANR	2511780	Condition	! ad	1745:5:45496:45498	2511776	0	True				
ANR	2511781	UnaryOperationExpression	! ad		2511776	0					
ANR	2511782	UnaryOperator	!		2511776	0					
ANR	2511783	Identifier	ad		2511776	1					
ANR	2511784	ReturnStatement	return ( false ) ;	1745:11:45502:45517	2511776	1	True				
ANR	2511785	Identifier	false		2511776	0					
ANR	2511786	IfStatement	if ( itr == ad -> attrList . end ( ) )		2511776	1					
ANR	2511787	Condition	itr == ad -> attrList . end ( )	1746:5:45524:45547	2511776	0	True				
ANR	2511788	EqualityExpression	itr == ad -> attrList . end ( )		2511776	0		==			
ANR	2511789	Identifier	itr		2511776	0					
ANR	2511790	CallExpression	ad -> attrList . end ( )		2511776	1					
ANR	2511791	Callee	ad -> attrList . end		2511776	0					
ANR	2511792	MemberAccess	ad -> attrList . end		2511776	0					
ANR	2511793	PtrMemberAccess	ad -> attrList		2511776	0					
ANR	2511794	Identifier	ad		2511776	0					
ANR	2511795	Identifier	attrList		2511776	1					
ANR	2511796	Identifier	end		2511776	1					
ANR	2511797	ArgumentList			2511776	1					
ANR	2511798	ReturnStatement	return ( false ) ;	1746:32:45551:45566	2511776	1	True				
ANR	2511799	Identifier	false		2511776	0					
ANR	2511800	ExpressionStatement	attr = itr -> first	1747:1:45569:45586	2511776	2	True				
ANR	2511801	AssignmentExpression	attr = itr -> first		2511776	0		=			
ANR	2511802	Identifier	attr		2511776	0					
ANR	2511803	PtrMemberAccess	itr -> first		2511776	1					
ANR	2511804	Identifier	itr		2511776	0					
ANR	2511805	Identifier	first		2511776	1					
ANR	2511806	ExpressionStatement	expr = itr -> second	1748:1:45589:45607	2511776	3	True				
ANR	2511807	AssignmentExpression	expr = itr -> second		2511776	0		=			
ANR	2511808	Identifier	expr		2511776	0					
ANR	2511809	PtrMemberAccess	itr -> second		2511776	1					
ANR	2511810	Identifier	itr		2511776	0					
ANR	2511811	Identifier	second		2511776	1					
ANR	2511812	ReturnStatement	return true ;	1749:1:45610:45621	2511776	4	True				
ANR	2511813	Identifier	true		2511776	0					
ANR	2511814	ReturnType	bool		2511776	1					
ANR	2511815	Identifier	ClassAdIterator :: CurrentAttribute		2511776	2					
ANR	2511816	ParameterList	"string & attr , const ExprTree * & expr"		2511776	3					
ANR	2511817	Parameter	string & attr	1743:18:45446:45457	2511776	0	True				
ANR	2511818	ParameterType	string &		2511776	0					
ANR	2511819	Identifier	attr		2511776	1					
ANR	2511820	Parameter	const ExprTree * & expr	1743:32:45460:45480	2511776	1	True				
ANR	2511821	ParameterType	const ExprTree * &		2511776	0					
ANR	2511822	Identifier	expr		2511776	1					
ANR	2511823	CFGEntryNode	ENTRY		2511776		True				
ANR	2511824	CFGExitNode	EXIT		2511776		True				
ANR	2511825	Symbol	ad		2511776						
ANR	2511826	Symbol	itr		2511776						
ANR	2511827	Symbol	false		2511776						
ANR	2511828	Symbol	true		2511776						
ANR	2511829	Symbol	ad -> attrList		2511776						
ANR	2511830	Symbol	expr		2511776						
ANR	2511831	Symbol	* ad		2511776						
ANR	2511832	Symbol	itr -> first		2511776						
ANR	2511833	Symbol	attr		2511776						
ANR	2511834	Symbol	* itr		2511776						
ANR	2511835	Symbol	ad -> attrList . end		2511776						
ANR	2511836	Symbol	itr -> second		2511776						
ANR	2511837	Function	ClassAd :: ChainToAd	1754:0:45629:45776							
ANR	2511838	FunctionDef	ClassAd :: ChainToAd (ClassAd * new_chain_parent_ad)		2511837	0					
ANR	2511839	CompoundStatement		1755:0:45683:45776	2511837	0					
ANR	2511840	IfStatement	if ( new_chain_parent_ad != NULL )		2511837	0					
ANR	2511841	Condition	new_chain_parent_ad != NULL	1756:5:45690:45716	2511837	0	True				
ANR	2511842	EqualityExpression	new_chain_parent_ad != NULL		2511837	0		!=			
ANR	2511843	Identifier	new_chain_parent_ad		2511837	0					
ANR	2511844	Identifier	NULL		2511837	1					
ANR	2511845	CompoundStatement		2:34:35:35	2511837	1					
ANR	2511846	ExpressionStatement	chained_parent_ad = new_chain_parent_ad	1757:2:45723:45762	2511837	0	True				
ANR	2511847	AssignmentExpression	chained_parent_ad = new_chain_parent_ad		2511837	0		=			
ANR	2511848	Identifier	chained_parent_ad		2511837	0					
ANR	2511849	Identifier	new_chain_parent_ad		2511837	1					
ANR	2511850	ReturnStatement	return ;	1759:1:45768:45774	2511837	1	True				
ANR	2511851	ReturnType	void		2511837	1					
ANR	2511852	Identifier	ClassAd :: ChainToAd		2511837	2					
ANR	2511853	ParameterList	ClassAd * new_chain_parent_ad		2511837	3					
ANR	2511854	Parameter	ClassAd * new_chain_parent_ad	1754:24:45653:45680	2511837	0	True				
ANR	2511855	ParameterType	ClassAd *		2511837	0					
ANR	2511856	Identifier	new_chain_parent_ad		2511837	1					
ANR	2511857	CFGEntryNode	ENTRY		2511837		True				
ANR	2511858	CFGExitNode	EXIT		2511837		True				
ANR	2511859	Symbol	NULL		2511837						
ANR	2511860	Symbol	new_chain_parent_ad		2511837						
ANR	2511861	Symbol	chained_parent_ad		2511837						
ANR	2511862	Function	ClassAd :: Unchain	1762:0:45779:45845							
ANR	2511863	FunctionDef	ClassAd :: Unchain ()		2511862	0					
ANR	2511864	CompoundStatement		1763:0:45807:45845	2511862	0					
ANR	2511865	ExpressionStatement	chained_parent_ad = NULL	1764:1:45810:45834	2511862	0	True				
ANR	2511866	AssignmentExpression	chained_parent_ad = NULL		2511862	0		=			
ANR	2511867	Identifier	chained_parent_ad		2511862	0					
ANR	2511868	Identifier	NULL		2511862	1					
ANR	2511869	ReturnStatement	return ;	1765:1:45837:45843	2511862	1	True				
ANR	2511870	ReturnType	void		2511862	1					
ANR	2511871	Identifier	ClassAd :: Unchain		2511862	2					
ANR	2511872	ParameterList			2511862	3					
ANR	2511873	CFGEntryNode	ENTRY		2511862		True				
ANR	2511874	CFGExitNode	EXIT		2511862		True				
ANR	2511875	Symbol	NULL		2511862						
ANR	2511876	Symbol	chained_parent_ad		2511862						
ANR	2511877	Function	ClassAd :: GetChainedParentAd	1768:0:45848:45920							
ANR	2511878	FunctionDef	ClassAd :: GetChainedParentAd ()		2511877	0					
ANR	2511879	CompoundStatement		1769:0:45891:45920	2511877	0					
ANR	2511880	ReturnStatement	return chained_parent_ad ;	1770:1:45894:45918	2511877	0	True				
ANR	2511881	Identifier	chained_parent_ad		2511877	0					
ANR	2511882	ReturnType	ClassAd *		2511877	1					
ANR	2511883	Identifier	ClassAd :: GetChainedParentAd		2511877	2					
ANR	2511884	ParameterList			2511877	3					
ANR	2511885	CFGEntryNode	ENTRY		2511877		True				
ANR	2511886	CFGExitNode	EXIT		2511877		True				
ANR	2511887	Symbol	chained_parent_ad		2511877						
ANR	2511888	Function	ClassAd :: ClearAllDirtyFlags	1773:0:45923:45998							
ANR	2511889	FunctionDef	ClassAd :: ClearAllDirtyFlags ()		2511888	0					
ANR	2511890	CompoundStatement		1774:0:45962:45998	2511888	0					
ANR	2511891	ExpressionStatement	dirtyAttrList . clear ( )	1775:1:45966:45987	2511888	0	True				
ANR	2511892	CallExpression	dirtyAttrList . clear ( )		2511888	0					
ANR	2511893	Callee	dirtyAttrList . clear		2511888	0					
ANR	2511894	MemberAccess	dirtyAttrList . clear		2511888	0					
ANR	2511895	Identifier	dirtyAttrList		2511888	0					
ANR	2511896	Identifier	clear		2511888	1					
ANR	2511897	ArgumentList			2511888	1					
ANR	2511898	ReturnStatement	return ;	1776:1:45990:45996	2511888	1	True				
ANR	2511899	ReturnType	void		2511888	1					
ANR	2511900	Identifier	ClassAd :: ClearAllDirtyFlags		2511888	2					
ANR	2511901	ParameterList			2511888	3					
ANR	2511902	CFGEntryNode	ENTRY		2511888		True				
ANR	2511903	CFGExitNode	EXIT		2511888		True				
ANR	2511904	Symbol	dirtyAttrList		2511888						
ANR	2511905	Function	ClassAd :: MarkAttributeDirty	1779:0:46001:46124							
ANR	2511906	FunctionDef	ClassAd :: MarkAttributeDirty (const string & name)		2511905	0					
ANR	2511907	CompoundStatement		1780:0:46054:46124	2511905	0					
ANR	2511908	IfStatement	if ( do_dirty_tracking )		2511905	0					
ANR	2511909	Condition	do_dirty_tracking	1781:5:46061:46077	2511905	0	True				
ANR	2511910	Identifier	do_dirty_tracking		2511905	0					
ANR	2511911	CompoundStatement		2:24:25:25	2511905	1					
ANR	2511912	ExpressionStatement	dirtyAttrList . insert ( name )	1782:2:46084:46110	2511905	0	True				
ANR	2511913	CallExpression	dirtyAttrList . insert ( name )		2511905	0					
ANR	2511914	Callee	dirtyAttrList . insert		2511905	0					
ANR	2511915	MemberAccess	dirtyAttrList . insert		2511905	0					
ANR	2511916	Identifier	dirtyAttrList		2511905	0					
ANR	2511917	Identifier	insert		2511905	1					
ANR	2511918	ArgumentList	name		2511905	1					
ANR	2511919	Argument	name		2511905	0					
ANR	2511920	Identifier	name		2511905	0					
ANR	2511921	ReturnStatement	return ;	1784:1:46116:46122	2511905	1	True				
ANR	2511922	ReturnType	void		2511905	1					
ANR	2511923	Identifier	ClassAd :: MarkAttributeDirty		2511905	2					
ANR	2511924	ParameterList	const string & name		2511905	3					
ANR	2511925	Parameter	const string & name	1779:33:46034:46051	2511905	0	True				
ANR	2511926	ParameterType	const string &		2511905	0					
ANR	2511927	Identifier	name		2511905	1					
ANR	2511928	CFGEntryNode	ENTRY		2511905		True				
ANR	2511929	CFGExitNode	EXIT		2511905		True				
ANR	2511930	Symbol	do_dirty_tracking		2511905						
ANR	2511931	Symbol	name		2511905						
ANR	2511932	Symbol	dirtyAttrList		2511905						
ANR	2511933	Function	ClassAd :: MarkAttributeClean	1787:0:46127:46249							
ANR	2511934	FunctionDef	ClassAd :: MarkAttributeClean (const string & name)		2511933	0					
ANR	2511935	CompoundStatement		1788:0:46180:46249	2511933	0					
ANR	2511936	IfStatement	if ( do_dirty_tracking )		2511933	0					
ANR	2511937	Condition	do_dirty_tracking	1789:5:46187:46203	2511933	0	True				
ANR	2511938	Identifier	do_dirty_tracking		2511933	0					
ANR	2511939	CompoundStatement		2:24:25:25	2511933	1					
ANR	2511940	ExpressionStatement	dirtyAttrList . erase ( name )	1790:2:46210:46235	2511933	0	True				
ANR	2511941	CallExpression	dirtyAttrList . erase ( name )		2511933	0					
ANR	2511942	Callee	dirtyAttrList . erase		2511933	0					
ANR	2511943	MemberAccess	dirtyAttrList . erase		2511933	0					
ANR	2511944	Identifier	dirtyAttrList		2511933	0					
ANR	2511945	Identifier	erase		2511933	1					
ANR	2511946	ArgumentList	name		2511933	1					
ANR	2511947	Argument	name		2511933	0					
ANR	2511948	Identifier	name		2511933	0					
ANR	2511949	ReturnStatement	return ;	1792:1:46241:46247	2511933	1	True				
ANR	2511950	ReturnType	void		2511933	1					
ANR	2511951	Identifier	ClassAd :: MarkAttributeClean		2511933	2					
ANR	2511952	ParameterList	const string & name		2511933	3					
ANR	2511953	Parameter	const string & name	1787:33:46160:46177	2511933	0	True				
ANR	2511954	ParameterType	const string &		2511933	0					
ANR	2511955	Identifier	name		2511933	1					
ANR	2511956	CFGEntryNode	ENTRY		2511933		True				
ANR	2511957	CFGExitNode	EXIT		2511933		True				
ANR	2511958	Symbol	do_dirty_tracking		2511933						
ANR	2511959	Symbol	name		2511933						
ANR	2511960	Symbol	dirtyAttrList		2511933						
ANR	2511961	Function	ClassAd :: IsAttributeDirty	1795:0:46252:46448							
ANR	2511962	FunctionDef	ClassAd :: IsAttributeDirty (const string & name)		2511961	0					
ANR	2511963	CompoundStatement		1796:0:46303:46448	2511961	0					
ANR	2511964	IdentifierDeclStatement	bool is_dirty ;	1797:1:46306:46319	2511961	0	True				
ANR	2511965	IdentifierDecl	is_dirty		2511961	0					
ANR	2511966	IdentifierDeclType	bool		2511961	0					
ANR	2511967	Identifier	is_dirty		2511961	1					
ANR	2511968	IfStatement	if ( dirtyAttrList . find ( name ) != dirtyAttrList . end ( ) )		2511961	1					
ANR	2511969	Condition	dirtyAttrList . find ( name ) != dirtyAttrList . end ( )	1799:5:46327:46373	2511961	0	True				
ANR	2511970	EqualityExpression	dirtyAttrList . find ( name ) != dirtyAttrList . end ( )		2511961	0		!=			
ANR	2511971	CallExpression	dirtyAttrList . find ( name )		2511961	0					
ANR	2511972	Callee	dirtyAttrList . find		2511961	0					
ANR	2511973	MemberAccess	dirtyAttrList . find		2511961	0					
ANR	2511974	Identifier	dirtyAttrList		2511961	0					
ANR	2511975	Identifier	find		2511961	1					
ANR	2511976	ArgumentList	name		2511961	1					
ANR	2511977	Argument	name		2511961	0					
ANR	2511978	Identifier	name		2511961	0					
ANR	2511979	CallExpression	dirtyAttrList . end ( )		2511961	1					
ANR	2511980	Callee	dirtyAttrList . end		2511961	0					
ANR	2511981	MemberAccess	dirtyAttrList . end		2511961	0					
ANR	2511982	Identifier	dirtyAttrList		2511961	0					
ANR	2511983	Identifier	end		2511961	1					
ANR	2511984	ArgumentList			2511961	1					
ANR	2511985	CompoundStatement		4:54:72:72	2511961	1					
ANR	2511986	ExpressionStatement	is_dirty = true	1800:2:46380:46395	2511961	0	True				
ANR	2511987	AssignmentExpression	is_dirty = true		2511961	0		=			
ANR	2511988	Identifier	is_dirty		2511961	0					
ANR	2511989	Identifier	true		2511961	1					
ANR	2511990	ElseStatement	else		2511961	0					
ANR	2511991	CompoundStatement		6:8:101:101	2511961	0					
ANR	2511992	ExpressionStatement	is_dirty = false	1802:2:46409:46425	2511961	0	True				
ANR	2511993	AssignmentExpression	is_dirty = false		2511961	0		=			
ANR	2511994	Identifier	is_dirty		2511961	0					
ANR	2511995	Identifier	false		2511961	1					
ANR	2511996	ReturnStatement	return is_dirty ;	1804:1:46431:46446	2511961	2	True				
ANR	2511997	Identifier	is_dirty		2511961	0					
ANR	2511998	ReturnType	bool		2511961	1					
ANR	2511999	Identifier	ClassAd :: IsAttributeDirty		2511961	2					
ANR	2512000	ParameterList	const string & name		2511961	3					
ANR	2512001	Parameter	const string & name	1795:31:46283:46300	2511961	0	True				
ANR	2512002	ParameterType	const string &		2511961	0					
ANR	2512003	Identifier	name		2511961	1					
ANR	2512004	CFGEntryNode	ENTRY		2511961		True				
ANR	2512005	CFGExitNode	EXIT		2511961		True				
ANR	2512006	Symbol	dirtyAttrList . end		2511961						
ANR	2512007	Symbol	dirtyAttrList . find		2511961						
ANR	2512008	Symbol	name		2511961						
ANR	2512009	Symbol	true		2511961						
ANR	2512010	Symbol	false		2511961						
ANR	2512011	Symbol	is_dirty		2511961						
ANR	2512012	Symbol	dirtyAttrList		2511961						
