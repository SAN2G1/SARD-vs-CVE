command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3150120	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_node_scheduler_DagmanDag.cpp								
ANR	3150121	Function	DagmanDag :: DagmanDag	48:0:1347:4480							
ANR	3150122	FunctionDef	DagmanDag :: DagmanDag (const char * fileName)		3150121	0					
ANR	3150123	CompoundStatement		49:0:1390:4480	3150121	0					
ANR	3150124	Statement	define	50:1:1393:1398	3150121	0	True				
ANR	3150125	Statement	TAB_SIZE	50:8:1400:1407	3150121	1	True				
ANR	3150126	Statement	10000	50:17:1409:1413	3150121	2	True				
ANR	3150127	IdentifierDeclStatement	char tab [ TAB_SIZE ] ;	52:1:1452:1470	3150121	3	True				
ANR	3150128	IdentifierDecl	tab [ TAB_SIZE ]		3150121	0					
ANR	3150129	IdentifierDeclType	char [ TAB_SIZE ]		3150121	0					
ANR	3150130	Identifier	tab		3150121	1					
ANR	3150131	Identifier	TAB_SIZE		3150121	2					
ANR	3150132	IdentifierDeclStatement	int node ;	53:1:1473:1481	3150121	4	True				
ANR	3150133	IdentifierDecl	node		3150121	0					
ANR	3150134	IdentifierDeclType	int		3150121	0					
ANR	3150135	Identifier	node		3150121	1					
ANR	3150136	IdentifierDeclStatement	ResizableArray < int > parents ;	55:1:1485:1512	3150121	5	True				
ANR	3150137	IdentifierDecl	parents		3150121	0					
ANR	3150138	IdentifierDeclType	ResizableArray < int >		3150121	0					
ANR	3150139	Identifier	parents		3150121	1					
ANR	3150140	IdentifierDeclStatement	ResizableArray < int > children ;	56:1:1515:1543	3150121	6	True				
ANR	3150141	IdentifierDecl	children		3150121	0					
ANR	3150142	IdentifierDeclType	ResizableArray < int >		3150121	0					
ANR	3150143	Identifier	children		3150121	1					
ANR	3150144	IdentifierDeclStatement	StreamTokenizerWithCont * st ;	59:1:1584:1611	3150121	7	True				
ANR	3150145	IdentifierDecl	* st		3150121	0					
ANR	3150146	IdentifierDeclType	StreamTokenizerWithCont *		3150121	0					
ANR	3150147	Identifier	st		3150121	1					
ANR	3150148	ExpressionStatement	st = new StreamTokenizerWithCont ( fileName )	60:1:1614:1656	3150121	8	True				
ANR	3150149	AssignmentExpression	st = new StreamTokenizerWithCont ( fileName )		3150121	0		=			
ANR	3150150	Identifier	st		3150121	0					
ANR	3150151	Identifier	fileName		3150121	1					
ANR	3150152	IfStatement	if ( NULL == st )		3150121	9					
ANR	3150153	Condition	NULL == st	61:5:1663:1670	3150121	0	True				
ANR	3150154	EqualityExpression	NULL == st		3150121	0		==			
ANR	3150155	Identifier	NULL		3150121	0					
ANR	3150156	Identifier	st		3150121	1					
ANR	3150157	ThrowStatement	"throw ""DagmanDag::DagmanDag, st is NULL"" ;"	62:2:1676:1716	3150121	1	True				
ANR	3150158	PrimaryExpression	"""DagmanDag::DagmanDag, st is NULL"""		3150121	0					
ANR	3150159	WhileStatement	while ( ! st -> isEOF ( ) )		3150121	10					
ANR	3150160	Condition	! st -> isEOF ( )	64:8:1727:1739	3150121	0	True				
ANR	3150161	UnaryOperationExpression	! st -> isEOF ( )		3150121	0					
ANR	3150162	UnaryOperator	!		3150121	0					
ANR	3150163	CallExpression	st -> isEOF ( )		3150121	1					
ANR	3150164	Callee	st -> isEOF		3150121	0					
ANR	3150165	PtrMemberAccess	st -> isEOF		3150121	0					
ANR	3150166	Identifier	st		3150121	0					
ANR	3150167	Identifier	isEOF		3150121	1					
ANR	3150168	ArgumentList			3150121	1					
ANR	3150169	CompoundStatement		16:24:352:352	3150121	1					
ANR	3150170	IfStatement	"if ( 0 == st -> readToken ( tab , TAB_SIZE ) )"		3150121	0					
ANR	3150171	Condition	"0 == st -> readToken ( tab , TAB_SIZE )"	67:6:1774:1803	3150121	0	True				
ANR	3150172	EqualityExpression	"0 == st -> readToken ( tab , TAB_SIZE )"		3150121	0		==			
ANR	3150173	PrimaryExpression	0		3150121	0					
ANR	3150174	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		3150121	1					
ANR	3150175	Callee	st -> readToken		3150121	0					
ANR	3150176	PtrMemberAccess	st -> readToken		3150121	0					
ANR	3150177	Identifier	st		3150121	0					
ANR	3150178	Identifier	readToken		3150121	1					
ANR	3150179	ArgumentList	tab		3150121	1					
ANR	3150180	Argument	tab		3150121	0					
ANR	3150181	Identifier	tab		3150121	0					
ANR	3150182	Argument	TAB_SIZE		3150121	1					
ANR	3150183	Identifier	TAB_SIZE		3150121	0					
ANR	3150184	CompoundStatement		19:39:416:416	3150121	1					
ANR	3150185	ExpressionStatement	st -> skipLine ( )	68:3:1812:1826	3150121	0	True				
ANR	3150186	CallExpression	st -> skipLine ( )		3150121	0					
ANR	3150187	Callee	st -> skipLine		3150121	0					
ANR	3150188	PtrMemberAccess	st -> skipLine		3150121	0					
ANR	3150189	Identifier	st		3150121	0					
ANR	3150190	Identifier	skipLine		3150121	1					
ANR	3150191	ArgumentList			3150121	1					
ANR	3150192	ExpressionStatement	st -> resetRecentLine ( )	69:3:1831:1852	3150121	1	True				
ANR	3150193	CallExpression	st -> resetRecentLine ( )		3150121	0					
ANR	3150194	Callee	st -> resetRecentLine		3150121	0					
ANR	3150195	PtrMemberAccess	st -> resetRecentLine		3150121	0					
ANR	3150196	Identifier	st		3150121	0					
ANR	3150197	Identifier	resetRecentLine		3150121	1					
ANR	3150198	ArgumentList			3150121	1					
ANR	3150199	ContinueStatement	continue ;	70:3:1857:1865	3150121	2	True				
ANR	3150200	ExpressionStatement		71:3:1870:1870	3150121	1	True				
ANR	3150201	IfStatement	"if ( 0 == stricmp ( tab , ""JOB"" ) )"		3150121	2					
ANR	3150202	Condition	"0 == stricmp ( tab , ""JOB"" )"	73:6:1879:1901	3150121	0	True				
ANR	3150203	EqualityExpression	"0 == stricmp ( tab , ""JOB"" )"		3150121	0		==			
ANR	3150204	PrimaryExpression	0		3150121	0					
ANR	3150205	CallExpression	"stricmp ( tab , ""JOB"" )"		3150121	1					
ANR	3150206	Callee	stricmp		3150121	0					
ANR	3150207	Identifier	stricmp		3150121	0					
ANR	3150208	ArgumentList	tab		3150121	1					
ANR	3150209	Argument	tab		3150121	0					
ANR	3150210	Identifier	tab		3150121	0					
ANR	3150211	Argument	"""JOB"""		3150121	1					
ANR	3150212	PrimaryExpression	"""JOB"""		3150121	0					
ANR	3150213	CompoundStatement		48:3:1199:1222	3150121	1					
ANR	3150214	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		3150121	0					
ANR	3150215	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	75:7:1968:1997	3150121	0	True				
ANR	3150216	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		3150121	0		!=			
ANR	3150217	PrimaryExpression	1		3150121	0					
ANR	3150218	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		3150121	1					
ANR	3150219	Callee	st -> readToken		3150121	0					
ANR	3150220	PtrMemberAccess	st -> readToken		3150121	0					
ANR	3150221	Identifier	st		3150121	0					
ANR	3150222	Identifier	readToken		3150121	1					
ANR	3150223	ArgumentList	tab		3150121	1					
ANR	3150224	Argument	tab		3150121	0					
ANR	3150225	Identifier	tab		3150121	0					
ANR	3150226	Argument	TAB_SIZE		3150121	1					
ANR	3150227	Identifier	TAB_SIZE		3150121	0					
ANR	3150228	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 1"" ;"	76:4:2005:2054	3150121	1	True				
ANR	3150229	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 1"""		3150121	0					
ANR	3150230	ExpressionStatement	strlwr ( tab )	79:3:2100:2111	3150121	1	True				
ANR	3150231	CallExpression	strlwr ( tab )		3150121	0					
ANR	3150232	Callee	strlwr		3150121	0					
ANR	3150233	Identifier	strlwr		3150121	0					
ANR	3150234	ArgumentList	tab		3150121	1					
ANR	3150235	Argument	tab		3150121	0					
ANR	3150236	Identifier	tab		3150121	0					
ANR	3150237	ExpressionStatement	"printf ( ""we have a job %s "" , tab )"	82:3:2132:2163	3150121	2	True				
ANR	3150238	CallExpression	"printf ( ""we have a job %s "" , tab )"		3150121	0					
ANR	3150239	Callee	printf		3150121	0					
ANR	3150240	Identifier	printf		3150121	0					
ANR	3150241	ArgumentList	"""we have a job %s """		3150121	1					
ANR	3150242	Argument	"""we have a job %s """		3150121	0					
ANR	3150243	PrimaryExpression	"""we have a job %s """		3150121	0					
ANR	3150244	Argument	tab		3150121	1					
ANR	3150245	Identifier	tab		3150121	0					
ANR	3150246	IfStatement	if ( - 1 != getNode ( tab ) )		3150121	3					
ANR	3150247	Condition	- 1 != getNode ( tab )	84:7:2179:2196	3150121	0	True				
ANR	3150248	EqualityExpression	- 1 != getNode ( tab )		3150121	0		!=			
ANR	3150249	UnaryOperationExpression	- 1		3150121	0					
ANR	3150250	UnaryOperator	-		3150121	0					
ANR	3150251	PrimaryExpression	1		3150121	1					
ANR	3150252	CallExpression	getNode ( tab )		3150121	1					
ANR	3150253	Callee	getNode		3150121	0					
ANR	3150254	Identifier	getNode		3150121	0					
ANR	3150255	ArgumentList	tab		3150121	1					
ANR	3150256	Argument	tab		3150121	0					
ANR	3150257	Identifier	tab		3150121	0					
ANR	3150258	CompoundStatement		36:28:809:809	3150121	1					
ANR	3150259	ExpressionStatement	"printf ( ""job %s defined twice\\n"" , tab )"	85:4:2206:2242	3150121	0	True				
ANR	3150260	CallExpression	"printf ( ""job %s defined twice\\n"" , tab )"		3150121	0					
ANR	3150261	Callee	printf		3150121	0					
ANR	3150262	Identifier	printf		3150121	0					
ANR	3150263	ArgumentList	"""job %s defined twice\\n"""		3150121	1					
ANR	3150264	Argument	"""job %s defined twice\\n"""		3150121	0					
ANR	3150265	PrimaryExpression	"""job %s defined twice\\n"""		3150121	0					
ANR	3150266	Argument	tab		3150121	1					
ANR	3150267	Identifier	tab		3150121	0					
ANR	3150268	ThrowStatement	"throw ""DagmanDag::DagmanDag, job defined twice"" ;"	86:4:2248:2295	3150121	1	True				
ANR	3150269	PrimaryExpression	"""DagmanDag::DagmanDag, job defined twice"""		3150121	0					
ANR	3150270	ExpressionStatement		87:4:2301:2301	3150121	4	True				
ANR	3150271	IdentifierDeclStatement	int node = addNode ( ) ;	88:3:2306:2326	3150121	5	True				
ANR	3150272	IdentifierDecl	node = addNode ( )		3150121	0					
ANR	3150273	IdentifierDeclType	int		3150121	0					
ANR	3150274	Identifier	node		3150121	1					
ANR	3150275	AssignmentExpression	node = addNode ( )		3150121	2		=			
ANR	3150276	Identifier	node		3150121	0					
ANR	3150277	CallExpression	addNode ( )		3150121	1					
ANR	3150278	Callee	addNode		3150121	0					
ANR	3150279	Identifier	addNode		3150121	0					
ANR	3150280	ArgumentList			3150121	1					
ANR	3150281	ExpressionStatement	"setLabelString ( node , tab )"	89:3:2381:2405	3150121	6	True				
ANR	3150282	CallExpression	"setLabelString ( node , tab )"		3150121	0					
ANR	3150283	Callee	setLabelString		3150121	0					
ANR	3150284	Identifier	setLabelString		3150121	0					
ANR	3150285	ArgumentList	node		3150121	1					
ANR	3150286	Argument	node		3150121	0					
ANR	3150287	Identifier	node		3150121	0					
ANR	3150288	Argument	tab		3150121	1					
ANR	3150289	Identifier	tab		3150121	0					
ANR	3150290	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		3150121	7					
ANR	3150291	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	91:7:2415:2444	3150121	0	True				
ANR	3150292	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		3150121	0		!=			
ANR	3150293	PrimaryExpression	1		3150121	0					
ANR	3150294	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		3150121	1					
ANR	3150295	Callee	st -> readToken		3150121	0					
ANR	3150296	PtrMemberAccess	st -> readToken		3150121	0					
ANR	3150297	Identifier	st		3150121	0					
ANR	3150298	Identifier	readToken		3150121	1					
ANR	3150299	ArgumentList	tab		3150121	1					
ANR	3150300	Argument	tab		3150121	0					
ANR	3150301	Identifier	tab		3150121	0					
ANR	3150302	Argument	TAB_SIZE		3150121	1					
ANR	3150303	Identifier	TAB_SIZE		3150121	0					
ANR	3150304	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 2"" ;"	92:4:2452:2501	3150121	1	True				
ANR	3150305	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 2"""		3150121	0					
ANR	3150306	ExpressionStatement	"printf ( "" whose submit description file name is %s\\n"" , tab )"	94:3:2521:2578	3150121	8	True				
ANR	3150307	CallExpression	"printf ( "" whose submit description file name is %s\\n"" , tab )"		3150121	0					
ANR	3150308	Callee	printf		3150121	0					
ANR	3150309	Identifier	printf		3150121	0					
ANR	3150310	ArgumentList	""" whose submit description file name is %s\\n"""		3150121	1					
ANR	3150311	Argument	""" whose submit description file name is %s\\n"""		3150121	0					
ANR	3150312	PrimaryExpression	""" whose submit description file name is %s\\n"""		3150121	0					
ANR	3150313	Argument	tab		3150121	1					
ANR	3150314	Identifier	tab		3150121	0					
ANR	3150315	IdentifierDeclStatement	char * dup = strdup ( tab ) ;	96:3:2590:2613	3150121	9	True				
ANR	3150316	IdentifierDecl	* dup = strdup ( tab )		3150121	0					
ANR	3150317	IdentifierDeclType	char *		3150121	0					
ANR	3150318	Identifier	dup		3150121	1					
ANR	3150319	AssignmentExpression	* dup = strdup ( tab )		3150121	2		=			
ANR	3150320	Identifier	dup		3150121	0					
ANR	3150321	CallExpression	strdup ( tab )		3150121	1					
ANR	3150322	Callee	strdup		3150121	0					
ANR	3150323	Identifier	strdup		3150121	0					
ANR	3150324	ArgumentList	tab		3150121	1					
ANR	3150325	Argument	tab		3150121	0					
ANR	3150326	Identifier	tab		3150121	0					
ANR	3150327	IfStatement	if ( NULL == dup )		3150121	10					
ANR	3150328	Condition	NULL == dup	97:7:2622:2630	3150121	0	True				
ANR	3150329	EqualityExpression	NULL == dup		3150121	0		==			
ANR	3150330	Identifier	NULL		3150121	0					
ANR	3150331	Identifier	dup		3150121	1					
ANR	3150332	ThrowStatement	"throw ""DagmanDag::DagmanDag, dup is NULL"" ;"	98:4:2638:2679	3150121	1	True				
ANR	3150333	PrimaryExpression	"""DagmanDag::DagmanDag, dup is NULL"""		3150121	0					
ANR	3150334	ExpressionStatement	sdfName . append ( dup )	99:3:2684:2705	3150121	11	True				
ANR	3150335	CallExpression	sdfName . append ( dup )		3150121	0					
ANR	3150336	Callee	sdfName . append		3150121	0					
ANR	3150337	MemberAccess	sdfName . append		3150121	0					
ANR	3150338	Identifier	sdfName		3150121	0					
ANR	3150339	Identifier	append		3150121	1					
ANR	3150340	ArgumentList	dup		3150121	1					
ANR	3150341	Argument	dup		3150121	0					
ANR	3150342	Identifier	dup		3150121	0					
ANR	3150343	ElseStatement	else		3150121	0					
ANR	3150344	IfStatement	"if ( 0 == stricmp ( tab , ""PARENT"" ) )"		3150121	0					
ANR	3150345	Condition	"0 == stricmp ( tab , ""PARENT"" )"	102:11:2800:2825	3150121	0	True				
ANR	3150346	EqualityExpression	"0 == stricmp ( tab , ""PARENT"" )"		3150121	0		==			
ANR	3150347	PrimaryExpression	0		3150121	0					
ANR	3150348	CallExpression	"stricmp ( tab , ""PARENT"" )"		3150121	1					
ANR	3150349	Callee	stricmp		3150121	0					
ANR	3150350	Identifier	stricmp		3150121	0					
ANR	3150351	ArgumentList	tab		3150121	1					
ANR	3150352	Argument	tab		3150121	0					
ANR	3150353	Identifier	tab		3150121	0					
ANR	3150354	Argument	"""PARENT"""		3150121	1					
ANR	3150355	PrimaryExpression	"""PARENT"""		3150121	0					
ANR	3150356	CompoundStatement		54:40:1438:1438	3150121	1					
ANR	3150357	ExpressionStatement	"printf ( ""we have a list of parents\\n"" )"	106:3:2904:2941	3150121	0	True				
ANR	3150358	CallExpression	"printf ( ""we have a list of parents\\n"" )"		3150121	0					
ANR	3150359	Callee	printf		3150121	0					
ANR	3150360	Identifier	printf		3150121	0					
ANR	3150361	ArgumentList	"""we have a list of parents\\n"""		3150121	1					
ANR	3150362	Argument	"""we have a list of parents\\n"""		3150121	0					
ANR	3150363	PrimaryExpression	"""we have a list of parents\\n"""		3150121	0					
ANR	3150364	ExpressionStatement	parents . reset ( )	110:3:2977:2992	3150121	1	True				
ANR	3150365	CallExpression	parents . reset ( )		3150121	0					
ANR	3150366	Callee	parents . reset		3150121	0					
ANR	3150367	MemberAccess	parents . reset		3150121	0					
ANR	3150368	Identifier	parents		3150121	0					
ANR	3150369	Identifier	reset		3150121	1					
ANR	3150370	ArgumentList			3150121	1					
ANR	3150371	WhileStatement	while ( true )		3150121	2					
ANR	3150372	Condition	true	111:10:3004:3007	3150121	0	True				
ANR	3150373	Identifier	true		3150121	0					
ANR	3150374	CompoundStatement		63:17:1620:1620	3150121	1					
ANR	3150375	IfStatement	"if ( 1 != st -> readToken ( tab , TAB_SIZE ) )"		3150121	0					
ANR	3150376	Condition	"1 != st -> readToken ( tab , TAB_SIZE )"	112:8:3021:3050	3150121	0	True				
ANR	3150377	EqualityExpression	"1 != st -> readToken ( tab , TAB_SIZE )"		3150121	0		!=			
ANR	3150378	PrimaryExpression	1		3150121	0					
ANR	3150379	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		3150121	1					
ANR	3150380	Callee	st -> readToken		3150121	0					
ANR	3150381	PtrMemberAccess	st -> readToken		3150121	0					
ANR	3150382	Identifier	st		3150121	0					
ANR	3150383	Identifier	readToken		3150121	1					
ANR	3150384	ArgumentList	tab		3150121	1					
ANR	3150385	Argument	tab		3150121	0					
ANR	3150386	Identifier	tab		3150121	0					
ANR	3150387	Argument	TAB_SIZE		3150121	1					
ANR	3150388	Identifier	TAB_SIZE		3150121	0					
ANR	3150389	ThrowStatement	"throw ""DagmanDag::DagmanDag, readToken failure 3"" ;"	113:5:3092:3141	3150121	1	True				
ANR	3150390	PrimaryExpression	"""DagmanDag::DagmanDag, readToken failure 3"""		3150121	0					
ANR	3150391	IfStatement	"if ( 0 == stricmp ( tab , ""CHILD"" ) )"		3150121	1					
ANR	3150392	Condition	"0 == stricmp ( tab , ""CHILD"" )"	114:8:3151:3173	3150121	0	True				
ANR	3150393	EqualityExpression	"0 == stricmp ( tab , ""CHILD"" )"		3150121	0		==			
ANR	3150394	PrimaryExpression	0		3150121	0					
ANR	3150395	CallExpression	"stricmp ( tab , ""CHILD"" )"		3150121	1					
ANR	3150396	Callee	stricmp		3150121	0					
ANR	3150397	Identifier	stricmp		3150121	0					
ANR	3150398	ArgumentList	tab		3150121	1					
ANR	3150399	Argument	tab		3150121	0					
ANR	3150400	Identifier	tab		3150121	0					
ANR	3150401	Argument	"""CHILD"""		3150121	1					
ANR	3150402	PrimaryExpression	"""CHILD"""		3150121	0					
ANR	3150403	BreakStatement	break ;	115:5:3211:3216	3150121	1	True				
ANR	3150404	ExpressionStatement	strlwr ( tab )	118:4:3264:3275	3150121	2	True				
ANR	3150405	CallExpression	strlwr ( tab )		3150121	0					
ANR	3150406	Callee	strlwr		3150121	0					
ANR	3150407	Identifier	strlwr		3150121	0					
ANR	3150408	ArgumentList	tab		3150121	1					
ANR	3150409	Argument	tab		3150121	0					
ANR	3150410	Identifier	tab		3150121	0					
ANR	3150411	ExpressionStatement	"printf ( ""we have a parent %s\\n"" , tab )"	121:4:3297:3332	3150121	3	True				
ANR	3150412	CallExpression	"printf ( ""we have a parent %s\\n"" , tab )"		3150121	0					
ANR	3150413	Callee	printf		3150121	0					
ANR	3150414	Identifier	printf		3150121	0					
ANR	3150415	ArgumentList	"""we have a parent %s\\n"""		3150121	1					
ANR	3150416	Argument	"""we have a parent %s\\n"""		3150121	0					
ANR	3150417	PrimaryExpression	"""we have a parent %s\\n"""		3150121	0					
ANR	3150418	Argument	tab		3150121	1					
ANR	3150419	Identifier	tab		3150121	0					
ANR	3150420	ExpressionStatement	node = getNode ( tab )	123:4:3345:3364	3150121	4	True				
ANR	3150421	AssignmentExpression	node = getNode ( tab )		3150121	0		=			
ANR	3150422	Identifier	node		3150121	0					
ANR	3150423	CallExpression	getNode ( tab )		3150121	1					
ANR	3150424	Callee	getNode		3150121	0					
ANR	3150425	Identifier	getNode		3150121	0					
ANR	3150426	ArgumentList	tab		3150121	1					
ANR	3150427	Argument	tab		3150121	0					
ANR	3150428	Identifier	tab		3150121	0					
ANR	3150429	IfStatement	if ( - 1 == node )		3150121	5					
ANR	3150430	Condition	- 1 == node	124:8:3406:3415	3150121	0	True				
ANR	3150431	EqualityExpression	- 1 == node		3150121	0		==			
ANR	3150432	UnaryOperationExpression	- 1		3150121	0					
ANR	3150433	UnaryOperator	-		3150121	0					
ANR	3150434	PrimaryExpression	1		3150121	1					
ANR	3150435	Identifier	node		3150121	1					
ANR	3150436	ThrowStatement	"throw ""DagmanDag::DagmanDag, node is -1, 1"" ;"	125:5:3424:3467	3150121	1	True				
ANR	3150437	PrimaryExpression	"""DagmanDag::DagmanDag, node is -1, 1"""		3150121	0					
ANR	3150438	ExpressionStatement	parents . append ( node )	126:4:3473:3493	3150121	6	True				
ANR	3150439	CallExpression	parents . append ( node )		3150121	0					
ANR	3150440	Callee	parents . append		3150121	0					
ANR	3150441	MemberAccess	parents . append		3150121	0					
ANR	3150442	Identifier	parents		3150121	0					
ANR	3150443	Identifier	append		3150121	1					
ANR	3150444	ArgumentList	node		3150121	1					
ANR	3150445	Argument	node		3150121	0					
ANR	3150446	Identifier	node		3150121	0					
ANR	3150447	ExpressionStatement		127:4:3499:3499	3150121	3	True				
ANR	3150448	ExpressionStatement	"printf ( ""we have a list of children\\n"" )"	130:3:3520:3558	3150121	4	True				
ANR	3150449	CallExpression	"printf ( ""we have a list of children\\n"" )"		3150121	0					
ANR	3150450	Callee	printf		3150121	0					
ANR	3150451	Identifier	printf		3150121	0					
ANR	3150452	ArgumentList	"""we have a list of children\\n"""		3150121	1					
ANR	3150453	Argument	"""we have a list of children\\n"""		3150121	0					
ANR	3150454	PrimaryExpression	"""we have a list of children\\n"""		3150121	0					
ANR	3150455	ExpressionStatement	children . reset ( )	134:3:3595:3611	3150121	5	True				
ANR	3150456	CallExpression	children . reset ( )		3150121	0					
ANR	3150457	Callee	children . reset		3150121	0					
ANR	3150458	MemberAccess	children . reset		3150121	0					
ANR	3150459	Identifier	children		3150121	0					
ANR	3150460	Identifier	reset		3150121	1					
ANR	3150461	ArgumentList			3150121	1					
ANR	3150462	WhileStatement	while ( true )		3150121	6					
ANR	3150463	Condition	true	135:10:3623:3626	3150121	0	True				
ANR	3150464	Identifier	true		3150121	0					
ANR	3150465	CompoundStatement		87:17:2239:2239	3150121	1					
ANR	3150466	IfStatement	"if ( 0 == st -> readToken ( tab , TAB_SIZE ) )"		3150121	0					
ANR	3150467	Condition	"0 == st -> readToken ( tab , TAB_SIZE )"	136:8:3640:3669	3150121	0	True				
ANR	3150468	EqualityExpression	"0 == st -> readToken ( tab , TAB_SIZE )"		3150121	0		==			
ANR	3150469	PrimaryExpression	0		3150121	0					
ANR	3150470	CallExpression	"st -> readToken ( tab , TAB_SIZE )"		3150121	1					
ANR	3150471	Callee	st -> readToken		3150121	0					
ANR	3150472	PtrMemberAccess	st -> readToken		3150121	0					
ANR	3150473	Identifier	st		3150121	0					
ANR	3150474	Identifier	readToken		3150121	1					
ANR	3150475	ArgumentList	tab		3150121	1					
ANR	3150476	Argument	tab		3150121	0					
ANR	3150477	Identifier	tab		3150121	0					
ANR	3150478	Argument	TAB_SIZE		3150121	1					
ANR	3150479	Identifier	TAB_SIZE		3150121	0					
ANR	3150480	CompoundStatement		88:41:2282:2282	3150121	1					
ANR	3150481	BreakStatement	break ;	138:5:3715:3720	3150121	0	True				
ANR	3150482	ExpressionStatement		139:5:3727:3727	3150121	1	True				
ANR	3150483	ExpressionStatement	strlwr ( tab )	142:4:3775:3786	3150121	2	True				
ANR	3150484	CallExpression	strlwr ( tab )		3150121	0					
ANR	3150485	Callee	strlwr		3150121	0					
ANR	3150486	Identifier	strlwr		3150121	0					
ANR	3150487	ArgumentList	tab		3150121	1					
ANR	3150488	Argument	tab		3150121	0					
ANR	3150489	Identifier	tab		3150121	0					
ANR	3150490	ExpressionStatement	"printf ( ""we have a child %s\\n"" , tab )"	145:4:3808:3842	3150121	3	True				
ANR	3150491	CallExpression	"printf ( ""we have a child %s\\n"" , tab )"		3150121	0					
ANR	3150492	Callee	printf		3150121	0					
ANR	3150493	Identifier	printf		3150121	0					
ANR	3150494	ArgumentList	"""we have a child %s\\n"""		3150121	1					
ANR	3150495	Argument	"""we have a child %s\\n"""		3150121	0					
ANR	3150496	PrimaryExpression	"""we have a child %s\\n"""		3150121	0					
ANR	3150497	Argument	tab		3150121	1					
ANR	3150498	Identifier	tab		3150121	0					
ANR	3150499	ExpressionStatement	node = getNode ( tab )	147:4:3855:3874	3150121	4	True				
ANR	3150500	AssignmentExpression	node = getNode ( tab )		3150121	0		=			
ANR	3150501	Identifier	node		3150121	0					
ANR	3150502	CallExpression	getNode ( tab )		3150121	1					
ANR	3150503	Callee	getNode		3150121	0					
ANR	3150504	Identifier	getNode		3150121	0					
ANR	3150505	ArgumentList	tab		3150121	1					
ANR	3150506	Argument	tab		3150121	0					
ANR	3150507	Identifier	tab		3150121	0					
ANR	3150508	IfStatement	if ( - 1 == node )		3150121	5					
ANR	3150509	Condition	- 1 == node	148:8:3884:3893	3150121	0	True				
ANR	3150510	EqualityExpression	- 1 == node		3150121	0		==			
ANR	3150511	UnaryOperationExpression	- 1		3150121	0					
ANR	3150512	UnaryOperator	-		3150121	0					
ANR	3150513	PrimaryExpression	1		3150121	1					
ANR	3150514	Identifier	node		3150121	1					
ANR	3150515	ThrowStatement	"throw ""DagmanDag::DagmanDag, node is -1, 2"" ;"	149:5:3903:3946	3150121	1	True				
ANR	3150516	PrimaryExpression	"""DagmanDag::DagmanDag, node is -1, 2"""		3150121	0					
ANR	3150517	ExpressionStatement	children . append ( node )	150:4:3952:3973	3150121	6	True				
ANR	3150518	CallExpression	children . append ( node )		3150121	0					
ANR	3150519	Callee	children . append		3150121	0					
ANR	3150520	MemberAccess	children . append		3150121	0					
ANR	3150521	Identifier	children		3150121	0					
ANR	3150522	Identifier	append		3150121	1					
ANR	3150523	ArgumentList	node		3150121	1					
ANR	3150524	Argument	node		3150121	0					
ANR	3150525	Identifier	node		3150121	0					
ANR	3150526	ExpressionStatement		151:4:3979:3979	3150121	7	True				
ANR	3150527	ForStatement	for ( int i = 0 ; i < parents . getNumElem ( ) ; i ++ )		3150121	8					
ANR	3150528	ForInit	int i = 0 ;	154:8:4040:4047	3150121	0	True				
ANR	3150529	IdentifierDeclStatement	int i = 0 ;		3150121	0					
ANR	3150530	IdentifierDecl	i = 0		3150121	0					
ANR	3150531	IdentifierDeclType	int		3150121	0					
ANR	3150532	Identifier	i		3150121	1					
ANR	3150533	AssignmentExpression	i = 0		3150121	2		=			
ANR	3150534	Identifier	i		3150121	0					
ANR	3150535	PrimaryExpression	0		3150121	1					
ANR	3150536	Condition	i < parents . getNumElem ( )	154:17:4049:4070	3150121	1	True				
ANR	3150537	RelationalExpression	i < parents . getNumElem ( )		3150121	0		<			
ANR	3150538	Identifier	i		3150121	0					
ANR	3150539	CallExpression	parents . getNumElem ( )		3150121	1					
ANR	3150540	Callee	parents . getNumElem		3150121	0					
ANR	3150541	MemberAccess	parents . getNumElem		3150121	0					
ANR	3150542	Identifier	parents		3150121	0					
ANR	3150543	Identifier	getNumElem		3150121	1					
ANR	3150544	ArgumentList			3150121	1					
ANR	3150545	PostIncDecOperationExpression	i ++	154:41:4073:4075	3150121	2	True				
ANR	3150546	Identifier	i		3150121	0					
ANR	3150547	IncDec	++		3150121	1					
ANR	3150548	CompoundStatement		107:4:2694:2720	3150121	3					
ANR	3150549	IdentifierDeclStatement	int u = parents . getElem ( i ) ;	155:4:4085:4111	3150121	0	True				
ANR	3150550	IdentifierDecl	u = parents . getElem ( i )		3150121	0					
ANR	3150551	IdentifierDeclType	int		3150121	0					
ANR	3150552	Identifier	u		3150121	1					
ANR	3150553	AssignmentExpression	u = parents . getElem ( i )		3150121	2		=			
ANR	3150554	Identifier	u		3150121	0					
ANR	3150555	CallExpression	parents . getElem ( i )		3150121	1					
ANR	3150556	Callee	parents . getElem		3150121	0					
ANR	3150557	MemberAccess	parents . getElem		3150121	0					
ANR	3150558	Identifier	parents		3150121	0					
ANR	3150559	Identifier	getElem		3150121	1					
ANR	3150560	ArgumentList	i		3150121	1					
ANR	3150561	Argument	i		3150121	0					
ANR	3150562	Identifier	i		3150121	0					
ANR	3150563	ForStatement	for ( int j = 0 ; j < children . getNumElem ( ) ; j ++ )		3150121	1					
ANR	3150564	ForInit	int j = 0 ;	156:9:4122:4129	3150121	0	True				
ANR	3150565	IdentifierDeclStatement	int j = 0 ;		3150121	0					
ANR	3150566	IdentifierDecl	j = 0		3150121	0					
ANR	3150567	IdentifierDeclType	int		3150121	0					
ANR	3150568	Identifier	j		3150121	1					
ANR	3150569	AssignmentExpression	j = 0		3150121	2		=			
ANR	3150570	Identifier	j		3150121	0					
ANR	3150571	PrimaryExpression	0		3150121	1					
ANR	3150572	Condition	j < children . getNumElem ( )	156:18:4131:4153	3150121	1	True				
ANR	3150573	RelationalExpression	j < children . getNumElem ( )		3150121	0		<			
ANR	3150574	Identifier	j		3150121	0					
ANR	3150575	CallExpression	children . getNumElem ( )		3150121	1					
ANR	3150576	Callee	children . getNumElem		3150121	0					
ANR	3150577	MemberAccess	children . getNumElem		3150121	0					
ANR	3150578	Identifier	children		3150121	0					
ANR	3150579	Identifier	getNumElem		3150121	1					
ANR	3150580	ArgumentList			3150121	1					
ANR	3150581	PostIncDecOperationExpression	j ++	156:43:4156:4158	3150121	2	True				
ANR	3150582	Identifier	j		3150121	0					
ANR	3150583	IncDec	++		3150121	1					
ANR	3150584	CompoundStatement		109:5:2778:2805	3150121	3					
ANR	3150585	IdentifierDeclStatement	int v = children . getElem ( j ) ;	157:5:4169:4196	3150121	0	True				
ANR	3150586	IdentifierDecl	v = children . getElem ( j )		3150121	0					
ANR	3150587	IdentifierDeclType	int		3150121	0					
ANR	3150588	Identifier	v		3150121	1					
ANR	3150589	AssignmentExpression	v = children . getElem ( j )		3150121	2		=			
ANR	3150590	Identifier	v		3150121	0					
ANR	3150591	CallExpression	children . getElem ( j )		3150121	1					
ANR	3150592	Callee	children . getElem		3150121	0					
ANR	3150593	MemberAccess	children . getElem		3150121	0					
ANR	3150594	Identifier	children		3150121	0					
ANR	3150595	Identifier	getElem		3150121	1					
ANR	3150596	ArgumentList	j		3150121	1					
ANR	3150597	Argument	j		3150121	0					
ANR	3150598	Identifier	j		3150121	0					
ANR	3150599	ExpressionStatement	"addArc ( u , v )"	158:5:4203:4214	3150121	1	True				
ANR	3150600	CallExpression	"addArc ( u , v )"		3150121	0					
ANR	3150601	Callee	addArc		3150121	0					
ANR	3150602	Identifier	addArc		3150121	0					
ANR	3150603	ArgumentList	u		3150121	1					
ANR	3150604	Argument	u		3150121	0					
ANR	3150605	Identifier	u		3150121	0					
ANR	3150606	Argument	v		3150121	1					
ANR	3150607	Identifier	v		3150121	0					
ANR	3150608	ExpressionStatement		159:5:4221:4221	3150121	2	True				
ANR	3150609	ExpressionStatement		160:4:4227:4227	3150121	9	True				
ANR	3150610	ExpressionStatement		162:3:4233:4233	3150121	3	True				
ANR	3150611	ExpressionStatement	st -> skipLine ( )	164:2:4238:4252	3150121	4	True				
ANR	3150612	CallExpression	st -> skipLine ( )		3150121	0					
ANR	3150613	Callee	st -> skipLine		3150121	0					
ANR	3150614	PtrMemberAccess	st -> skipLine		3150121	0					
ANR	3150615	Identifier	st		3150121	0					
ANR	3150616	Identifier	skipLine		3150121	1					
ANR	3150617	ArgumentList			3150121	1					
ANR	3150618	ExpressionStatement	st -> resetRecentLine ( )	165:2:4256:4277	3150121	5	True				
ANR	3150619	CallExpression	st -> resetRecentLine ( )		3150121	0					
ANR	3150620	Callee	st -> resetRecentLine		3150121	0					
ANR	3150621	PtrMemberAccess	st -> resetRecentLine		3150121	0					
ANR	3150622	Identifier	st		3150121	0					
ANR	3150623	Identifier	resetRecentLine		3150121	1					
ANR	3150624	ArgumentList			3150121	1					
ANR	3150625	ExpressionStatement		166:2:4281:4281	3150121	11	True				
ANR	3150626	ExpressionStatement	st -> resetRecentLine ( )	167:1:4284:4305	3150121	12	True				
ANR	3150627	CallExpression	st -> resetRecentLine ( )		3150121	0					
ANR	3150628	Callee	st -> resetRecentLine		3150121	0					
ANR	3150629	PtrMemberAccess	st -> resetRecentLine		3150121	0					
ANR	3150630	Identifier	st		3150121	0					
ANR	3150631	Identifier	resetRecentLine		3150121	1					
ANR	3150632	ArgumentList			3150121	1					
ANR	3150633	Statement	delete	168:1:4347:4352	3150121	13	True				
ANR	3150634	ExpressionStatement	st	168:8:4354:4356	3150121	14	True				
ANR	3150635	Identifier	st		3150121	0					
ANR	3150636	IfStatement	if ( ! isDag ( ) )		3150121	15					
ANR	3150637	Condition	! isDag ( )	171:5:4426:4433	3150121	0	True				
ANR	3150638	UnaryOperationExpression	! isDag ( )		3150121	0					
ANR	3150639	UnaryOperator	!		3150121	0					
ANR	3150640	CallExpression	isDag ( )		3150121	1					
ANR	3150641	Callee	isDag		3150121	0					
ANR	3150642	Identifier	isDag		3150121	0					
ANR	3150643	ArgumentList			3150121	1					
ANR	3150644	ThrowStatement	"throw ""DagmanDag::DagmanDag, not a dag"" ;"	172:2:4439:4478	3150121	1	True				
ANR	3150645	PrimaryExpression	"""DagmanDag::DagmanDag, not a dag"""		3150121	0					
ANR	3150646	Identifier	DagmanDag :: DagmanDag		3150121	1					
ANR	3150647	ParameterList	const char * fileName		3150121	2					
ANR	3150648	Parameter	const char * fileName	48:21:1368:1387	3150121	0	True				
ANR	3150649	ParameterType	const char *		3150121	0					
ANR	3150650	Identifier	fileName		3150121	1					
ANR	3150651	CFGEntryNode	ENTRY		3150121		True				
ANR	3150652	CFGExitNode	EXIT		3150121		True				
ANR	3150653	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150654	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150655	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150656	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150657	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150658	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150659	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150660	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150661	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150662	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150663	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150664	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150665	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150666	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150667	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150668	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150669	CFGExceptionNode	EXCEPTION		3150121		True				
ANR	3150670	Symbol	fileName		3150121						
ANR	3150671	Symbol	* st		3150121						
ANR	3150672	Symbol	addNode		3150121						
ANR	3150673	Symbol	parents . getElem		3150121						
ANR	3150674	Symbol	parents . getNumElem		3150121						
ANR	3150675	Symbol	TAB_SIZE		3150121						
ANR	3150676	Symbol	tab		3150121						
ANR	3150677	Symbol	children . getNumElem		3150121						
ANR	3150678	Symbol	children		3150121						
ANR	3150679	Symbol	st		3150121						
ANR	3150680	Symbol	st -> isEOF		3150121						
ANR	3150681	Symbol	NULL		3150121						
ANR	3150682	Symbol	i		3150121						
ANR	3150683	Symbol	j		3150121						
ANR	3150684	Symbol	node		3150121						
ANR	3150685	Symbol	st -> readToken		3150121						
ANR	3150686	Symbol	sdfName		3150121						
ANR	3150687	Symbol	children . getElem		3150121						
ANR	3150688	Symbol	u		3150121						
ANR	3150689	Symbol	v		3150121						
ANR	3150690	Symbol	stricmp		3150121						
ANR	3150691	Symbol	true		3150121						
ANR	3150692	Symbol	getNode		3150121						
ANR	3150693	Symbol	strdup		3150121						
ANR	3150694	Symbol	isDag		3150121						
ANR	3150695	Symbol	dup		3150121						
ANR	3150696	Symbol	parents		3150121						
ANR	3150697	Function	DagmanDag :: printLabels	192:0:4832:5050							
ANR	3150698	FunctionDef	"DagmanDag :: printLabels (FILE * stream , int node)"		3150697	0					
ANR	3150699	CompoundStatement		193:0:4890:5050	3150697	0					
ANR	3150700	ExpressionStatement	"Graph :: printLabels ( stream , node )"	194:1:4893:4924	3150697	0	True				
ANR	3150701	CallExpression	"Graph :: printLabels ( stream , node )"		3150697	0					
ANR	3150702	Callee	Graph :: printLabels		3150697	0					
ANR	3150703	Identifier	Graph :: printLabels		3150697	0					
ANR	3150704	ArgumentList	stream		3150697	1					
ANR	3150705	Argument	stream		3150697	0					
ANR	3150706	Identifier	stream		3150697	0					
ANR	3150707	Argument	node		3150697	1					
ANR	3150708	Identifier	node		3150697	0					
ANR	3150709	IfStatement	if ( NULL == sdfName . getElem ( node ) )		3150697	1					
ANR	3150710	Condition	NULL == sdfName . getElem ( node )	195:5:4931:4957	3150697	0	True				
ANR	3150711	EqualityExpression	NULL == sdfName . getElem ( node )		3150697	0		==			
ANR	3150712	Identifier	NULL		3150697	0					
ANR	3150713	CallExpression	sdfName . getElem ( node )		3150697	1					
ANR	3150714	Callee	sdfName . getElem		3150697	0					
ANR	3150715	MemberAccess	sdfName . getElem		3150697	0					
ANR	3150716	Identifier	sdfName		3150697	0					
ANR	3150717	Identifier	getElem		3150697	1					
ANR	3150718	ArgumentList	node		3150697	1					
ANR	3150719	Argument	node		3150697	0					
ANR	3150720	Identifier	node		3150697	0					
ANR	3150721	ExpressionStatement	"fprintf ( stream , ""sdf NULL "" )"	196:2:4963:4990	3150697	1	True				
ANR	3150722	CallExpression	"fprintf ( stream , ""sdf NULL "" )"		3150697	0					
ANR	3150723	Callee	fprintf		3150697	0					
ANR	3150724	Identifier	fprintf		3150697	0					
ANR	3150725	ArgumentList	stream		3150697	1					
ANR	3150726	Argument	stream		3150697	0					
ANR	3150727	Identifier	stream		3150697	0					
ANR	3150728	Argument	"""sdf NULL """		3150697	1					
ANR	3150729	PrimaryExpression	"""sdf NULL """		3150697	0					
ANR	3150730	ElseStatement	else		3150697	0					
ANR	3150731	ExpressionStatement	"fprintf ( stream , ""sdf %s "" , sdfName . getElem ( node ) )"	198:2:5000:5048	3150697	0	True				
ANR	3150732	CallExpression	"fprintf ( stream , ""sdf %s "" , sdfName . getElem ( node ) )"		3150697	0					
ANR	3150733	Callee	fprintf		3150697	0					
ANR	3150734	Identifier	fprintf		3150697	0					
ANR	3150735	ArgumentList	stream		3150697	1					
ANR	3150736	Argument	stream		3150697	0					
ANR	3150737	Identifier	stream		3150697	0					
ANR	3150738	Argument	"""sdf %s """		3150697	1					
ANR	3150739	PrimaryExpression	"""sdf %s """		3150697	0					
ANR	3150740	Argument	sdfName . getElem ( node )		3150697	2					
ANR	3150741	CallExpression	sdfName . getElem ( node )		3150697	0					
ANR	3150742	Callee	sdfName . getElem		3150697	0					
ANR	3150743	MemberAccess	sdfName . getElem		3150697	0					
ANR	3150744	Identifier	sdfName		3150697	0					
ANR	3150745	Identifier	getElem		3150697	1					
ANR	3150746	ArgumentList	node		3150697	1					
ANR	3150747	Argument	node		3150697	0					
ANR	3150748	Identifier	node		3150697	0					
ANR	3150749	ReturnType	void		3150697	1					
ANR	3150750	Identifier	DagmanDag :: printLabels		3150697	2					
ANR	3150751	ParameterList	"FILE * stream , int node"		3150697	3					
ANR	3150752	Parameter	FILE * stream	192:28:4860:4871	3150697	0	True				
ANR	3150753	ParameterType	FILE *		3150697	0					
ANR	3150754	Identifier	stream		3150697	1					
ANR	3150755	Parameter	int node	192:42:4874:4881	3150697	1	True				
ANR	3150756	ParameterType	int		3150697	0					
ANR	3150757	Identifier	node		3150697	1					
ANR	3150758	CFGEntryNode	ENTRY		3150697		True				
ANR	3150759	CFGExitNode	EXIT		3150697		True				
ANR	3150760	Symbol	node		3150697						
ANR	3150761	Symbol	sdfName		3150697						
ANR	3150762	Symbol	NULL		3150697						
ANR	3150763	Symbol	stream		3150697						
ANR	3150764	Symbol	sdfName . getElem		3150697						
ANR	3150765	Function	DagmanDag :: getSdfName	216:0:5262:5345							
ANR	3150766	FunctionDef	DagmanDag :: getSdfName (int node)		3150765	0					
ANR	3150767	CompoundStatement		217:0:5312:5345	3150765	0					
ANR	3150768	ReturnStatement	return sdfName . getElem ( node ) ;	218:1:5315:5343	3150765	0	True				
ANR	3150769	CallExpression	sdfName . getElem ( node )		3150765	0					
ANR	3150770	Callee	sdfName . getElem		3150765	0					
ANR	3150771	MemberAccess	sdfName . getElem		3150765	0					
ANR	3150772	Identifier	sdfName		3150765	0					
ANR	3150773	Identifier	getElem		3150765	1					
ANR	3150774	ArgumentList	node		3150765	1					
ANR	3150775	Argument	node		3150765	0					
ANR	3150776	Identifier	node		3150765	0					
ANR	3150777	ReturnType	const char *		3150765	1					
ANR	3150778	Identifier	DagmanDag :: getSdfName		3150765	2					
ANR	3150779	ParameterList	int node		3150765	3					
ANR	3150780	Parameter	int node	216:34:5296:5303	3150765	0	True				
ANR	3150781	ParameterType	int		3150765	0					
ANR	3150782	Identifier	node		3150765	1					
ANR	3150783	CFGEntryNode	ENTRY		3150765		True				
ANR	3150784	CFGExitNode	EXIT		3150765		True				
ANR	3150785	Symbol	node		3150765						
ANR	3150786	Symbol	sdfName		3150765						
ANR	3150787	Symbol	sdfName . getElem		3150765						
ANR	3150788	Function	DagmanDag :: ~DagmanDag	235:0:5515:5729							
ANR	3150789	FunctionDef	DagmanDag :: ~DagmanDag ()		3150788	0					
ANR	3150790	CompoundStatement		236:0:5543:5729	3150788	0					
ANR	3150791	ForStatement	for ( int i = 0 ; i < sdfName . getNumElem ( ) ; i ++ )		3150788	0					
ANR	3150792	ForInit	int i = 0 ;	237:6:5551:5558	3150788	0	True				
ANR	3150793	IdentifierDeclStatement	int i = 0 ;		3150788	0					
ANR	3150794	IdentifierDecl	i = 0		3150788	0					
ANR	3150795	IdentifierDeclType	int		3150788	0					
ANR	3150796	Identifier	i		3150788	1					
ANR	3150797	AssignmentExpression	i = 0		3150788	2		=			
ANR	3150798	Identifier	i		3150788	0					
ANR	3150799	PrimaryExpression	0		3150788	1					
ANR	3150800	Condition	i < sdfName . getNumElem ( )	237:15:5560:5581	3150788	1	True				
ANR	3150801	RelationalExpression	i < sdfName . getNumElem ( )		3150788	0		<			
ANR	3150802	Identifier	i		3150788	0					
ANR	3150803	CallExpression	sdfName . getNumElem ( )		3150788	1					
ANR	3150804	Callee	sdfName . getNumElem		3150788	0					
ANR	3150805	MemberAccess	sdfName . getNumElem		3150788	0					
ANR	3150806	Identifier	sdfName		3150788	0					
ANR	3150807	Identifier	getNumElem		3150788	1					
ANR	3150808	ArgumentList			3150788	1					
ANR	3150809	PostIncDecOperationExpression	i ++	237:39:5584:5586	3150788	2	True				
ANR	3150810	Identifier	i		3150788	0					
ANR	3150811	IncDec	++		3150788	1					
ANR	3150812	CompoundStatement		2:45:46:46	3150788	3					
ANR	3150813	IfStatement	if ( NULL != sdfName . getElem ( i ) )		3150788	0					
ANR	3150814	Condition	NULL != sdfName . getElem ( i )	238:6:5598:5623	3150788	0	True				
ANR	3150815	EqualityExpression	NULL != sdfName . getElem ( i )		3150788	0		!=			
ANR	3150816	Identifier	NULL		3150788	0					
ANR	3150817	CallExpression	sdfName . getElem ( i )		3150788	1					
ANR	3150818	Callee	sdfName . getElem		3150788	0					
ANR	3150819	MemberAccess	sdfName . getElem		3150788	0					
ANR	3150820	Identifier	sdfName		3150788	0					
ANR	3150821	Identifier	getElem		3150788	1					
ANR	3150822	ArgumentList	i		3150788	1					
ANR	3150823	Argument	i		3150788	0					
ANR	3150824	Identifier	i		3150788	0					
ANR	3150825	Statement	delete	239:3:5630:5635	3150788	1	True				
ANR	3150826	ExpressionStatement	sdfName . getElem ( i )	239:10:5637:5655	3150788	1	True				
ANR	3150827	CallExpression	sdfName . getElem ( i )		3150788	0					
ANR	3150828	Callee	sdfName . getElem		3150788	0					
ANR	3150829	MemberAccess	sdfName . getElem		3150788	0					
ANR	3150830	Identifier	sdfName		3150788	0					
ANR	3150831	Identifier	getElem		3150788	1					
ANR	3150832	ArgumentList	i		3150788	1					
ANR	3150833	Argument	i		3150788	0					
ANR	3150834	Identifier	i		3150788	0					
ANR	3150835	ExpressionStatement		240:2:5727:5727	3150788	1	True				
ANR	3150836	Identifier	DagmanDag :: ~DagmanDag		3150788	1					
ANR	3150837	ParameterList			3150788	2					
ANR	3150838	CFGEntryNode	ENTRY		3150788		True				
ANR	3150839	CFGExitNode	EXIT		3150788		True				
ANR	3150840	Symbol	sdfName		3150788						
ANR	3150841	Symbol	NULL		3150788						
ANR	3150842	Symbol	sdfName . getElem		3150788						
ANR	3150843	Symbol	i		3150788						
ANR	3150844	Symbol	sdfName . getNumElem		3150788						
ANR	3150845	Function	DagmanDag_test	257:0:5885:5965							
ANR	3150846	FunctionDef	DagmanDag_test ()		3150845	0					
ANR	3150847	CompoundStatement		258:0:5911:5965	3150845	0					
ANR	3150848	IdentifierDeclStatement	"DagmanDag d ( ""rundg_test-2.dag"" ) ;"	259:1:5914:5945	3150845	0	True				
ANR	3150849	IdentifierDecl	"d ( ""rundg_test-2.dag"" )"		3150845	0					
ANR	3150850	IdentifierDeclType	DagmanDag		3150845	0					
ANR	3150851	Identifier	d		3150845	1					
ANR	3150852	PrimaryExpression	"""rundg_test-2.dag"""		3150845	2					
ANR	3150853	ExpressionStatement	d . printAsText ( )	260:1:5948:5963	3150845	1	True				
ANR	3150854	CallExpression	d . printAsText ( )		3150845	0					
ANR	3150855	Callee	d . printAsText		3150845	0					
ANR	3150856	MemberAccess	d . printAsText		3150845	0					
ANR	3150857	Identifier	d		3150845	0					
ANR	3150858	Identifier	printAsText		3150845	1					
ANR	3150859	ArgumentList			3150845	1					
ANR	3150860	ReturnType	void		3150845	1					
ANR	3150861	Identifier	DagmanDag_test		3150845	2					
ANR	3150862	ParameterList			3150845	3					
ANR	3150863	CFGEntryNode	ENTRY		3150845		True				
ANR	3150864	CFGExitNode	EXIT		3150845		True				
ANR	3150865	Symbol	d		3150845						
