command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5027472	File	data/converged/CVE-2011-4930_htcondor/src_condor_vm-gahp_vmgahp_main.cpp								
ANR	5027473	DeclStmt									
ANR	5027474	Decl							const char	const char *	vmgahp_version
ANR	5027475	DeclStmt									
ANR	5027476	Decl							VMGahp	VMGahp *	vmgahp
ANR	5027477	DeclStmt									
ANR	5027478	Decl							int	int	vmgahp_stdout_pipe
ANR	5027479	DeclStmt									
ANR	5027480	Decl							int	int	vmgahp_stderr_pipe
ANR	5027481	DeclStmt									
ANR	5027482	Decl							int	int	vmgahp_mode
ANR	5027483	DeclStmt									
ANR	5027484	Decl							PBuffer	PBuffer	vmgahp_stderr_buffer
ANR	5027485	DeclStmt									
ANR	5027486	Decl							int	int	vmgahp_stderr_tid
ANR	5027487	DeclStmt									
ANR	5027488	Decl							int	int	oriDebugFlags
ANR	5027489	DeclStmt									
ANR	5027490	Decl							MyString	MyString	workingdir
ANR	5027491	DeclStmt									
ANR	5027492	Decl							extern MyString	extern MyString	caller_name
ANR	5027493	DeclStmt									
ANR	5027494	Decl							extern MyString	extern MyString	job_user_name
ANR	5027495	DeclStmt									
ANR	5027496	Decl							extern uid_t	extern uid_t	caller_uid
ANR	5027497	DeclStmt									
ANR	5027498	Decl							extern uid_t	extern uid_t	caller_gid
ANR	5027499	DeclStmt									
ANR	5027500	Decl							extern uid_t	extern uid_t	job_user_uid
ANR	5027501	DeclStmt									
ANR	5027502	Decl							extern uid_t	extern uid_t	job_user_gid
ANR	5027503	Function	vm_cleanup	56:0:1748:1844							
ANR	5027504	FunctionDef	vm_cleanup ()		5027503	0					
ANR	5027505	CompoundStatement		58:0:1770:1844	5027503	0					
ANR	5027506	IfStatement	if ( vmgahp )		5027503	0					
ANR	5027507	Condition	vmgahp	59:4:1776:1781	5027503	0	True				
ANR	5027508	Identifier	vmgahp		5027503	0					
ANR	5027509	CompoundStatement		2:12:13:13	5027503	1					
ANR	5027510	Statement	delete	60:2:1788:1793	5027503	0	True				
ANR	5027511	ExpressionStatement	vmgahp	60:9:1795:1801	5027503	1	True				
ANR	5027512	Identifier	vmgahp		5027503	0					
ANR	5027513	ExpressionStatement	vmgahp = NULL	61:2:1805:1818	5027503	2	True				
ANR	5027514	AssignmentExpression	vmgahp = NULL		5027503	0		=			
ANR	5027515	Identifier	vmgahp		5027503	0					
ANR	5027516	Identifier	NULL		5027503	1					
ANR	5027517	ExpressionStatement	sleep ( 2 )	62:2:1822:1830	5027503	3	True				
ANR	5027518	CallExpression	sleep ( 2 )		5027503	0					
ANR	5027519	Callee	sleep		5027503	0					
ANR	5027520	Identifier	sleep		5027503	0					
ANR	5027521	ArgumentList	2		5027503	1					
ANR	5027522	Argument	2		5027503	0					
ANR	5027523	PrimaryExpression	2		5027503	0					
ANR	5027524	ReturnStatement	return ;	64:1:1836:1842	5027503	1	True				
ANR	5027525	ReturnType	void		5027503	1					
ANR	5027526	Identifier	vm_cleanup		5027503	2					
ANR	5027527	ParameterList			5027503	3					
ANR	5027528	CFGEntryNode	ENTRY		5027503		True				
ANR	5027529	CFGExitNode	EXIT		5027503		True				
ANR	5027530	Symbol	NULL		5027503						
ANR	5027531	Symbol	vmgahp		5027503						
ANR	5027532	Function	Init	67:0:1847:1860							
ANR	5027533	FunctionDef	Init ()		5027532	0					
ANR	5027534	CompoundStatement		67:12:1859:1860	5027532	0					
ANR	5027535	ReturnType	void		5027532	1					
ANR	5027536	Identifier	Init		5027532	2					
ANR	5027537	ParameterList			5027532	3					
ANR	5027538	CFGEntryNode	ENTRY		5027532		True				
ANR	5027539	CFGExitNode	EXIT		5027532		True				
ANR	5027540	Function	Register	68:0:1862:1879							
ANR	5027541	FunctionDef	Register ()		5027540	0					
ANR	5027542	CompoundStatement		68:16:1878:1879	5027540	0					
ANR	5027543	ReturnType	void		5027540	1					
ANR	5027544	Identifier	Register		5027540	2					
ANR	5027545	ParameterList			5027540	3					
ANR	5027546	CFGEntryNode	ENTRY		5027540		True				
ANR	5027547	CFGExitNode	EXIT		5027540		True				
ANR	5027548	Function	Reconfig	69:0:1881:2675							
ANR	5027549	FunctionDef	Reconfig ()		5027548	0					
ANR	5027550	CompoundStatement		70:0:1897:2675	5027548	0					
ANR	5027551	IfStatement	if ( ! workingdir . IsEmpty ( ) )		5027548	0					
ANR	5027552	Condition	! workingdir . IsEmpty ( )	75:5:2141:2161	5027548	0	True				
ANR	5027553	UnaryOperationExpression	! workingdir . IsEmpty ( )		5027548	0					
ANR	5027554	UnaryOperator	!		5027548	0					
ANR	5027555	CallExpression	workingdir . IsEmpty ( )		5027548	1					
ANR	5027556	Callee	workingdir . IsEmpty		5027548	0					
ANR	5027557	MemberAccess	workingdir . IsEmpty		5027548	0					
ANR	5027558	Identifier	workingdir		5027548	0					
ANR	5027559	Identifier	IsEmpty		5027548	1					
ANR	5027560	ArgumentList			5027548	1					
ANR	5027561	CompoundStatement		6:29:267:267	5027548	1					
ANR	5027562	IfStatement	if ( chdir ( workingdir . Value ( ) ) < 0 )		5027548	0					
ANR	5027563	Condition	chdir ( workingdir . Value ( ) ) < 0	76:6:2173:2201	5027548	0	True				
ANR	5027564	RelationalExpression	chdir ( workingdir . Value ( ) ) < 0		5027548	0		<			
ANR	5027565	CallExpression	chdir ( workingdir . Value ( ) )		5027548	0					
ANR	5027566	Callee	chdir		5027548	0					
ANR	5027567	Identifier	chdir		5027548	0					
ANR	5027568	ArgumentList	workingdir . Value ( )		5027548	1					
ANR	5027569	Argument	workingdir . Value ( )		5027548	0					
ANR	5027570	CallExpression	workingdir . Value ( )		5027548	0					
ANR	5027571	Callee	workingdir . Value		5027548	0					
ANR	5027572	MemberAccess	workingdir . Value		5027548	0					
ANR	5027573	Identifier	workingdir		5027548	0					
ANR	5027574	Identifier	Value		5027548	1					
ANR	5027575	ArgumentList			5027548	1					
ANR	5027576	PrimaryExpression	0		5027548	1					
ANR	5027577	CompoundStatement		7:38:307:307	5027548	1					
ANR	5027578	ExpressionStatement	DC_Exit ( 1 )	77:3:2210:2220	5027548	0	True				
ANR	5027579	CallExpression	DC_Exit ( 1 )		5027548	0					
ANR	5027580	Callee	DC_Exit		5027548	0					
ANR	5027581	Identifier	DC_Exit		5027548	0					
ANR	5027582	ArgumentList	1		5027548	1					
ANR	5027583	Argument	1		5027548	0					
ANR	5027584	PrimaryExpression	1		5027548	0					
ANR	5027585	ExpressionStatement	oriDebugFlags = DebugFlags	83:1:2293:2319	5027548	1	True				
ANR	5027586	AssignmentExpression	oriDebugFlags = DebugFlags		5027548	0		=			
ANR	5027587	Identifier	oriDebugFlags		5027548	0					
ANR	5027588	Identifier	DebugFlags		5027548	1					
ANR	5027589	IfStatement	if ( Termlog )		5027548	2					
ANR	5027590	Condition	Termlog	84:5:2326:2332	5027548	0	True				
ANR	5027591	Identifier	Termlog		5027548	0					
ANR	5027592	CompoundStatement		15:15:438:438	5027548	1					
ANR	5027593	ExpressionStatement	DebugFlags = 0	85:2:2340:2354	5027548	0	True				
ANR	5027594	AssignmentExpression	DebugFlags = 0		5027548	0		=			
ANR	5027595	Identifier	DebugFlags		5027548	0					
ANR	5027596	PrimaryExpression	0		5027548	1					
ANR	5027597	IfStatement	if ( ( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE ) )		5027548	3					
ANR	5027598	Condition	( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE )	88:5:2365:2437	5027548	0	True				
ANR	5027599	AndExpression	( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE )		5027548	0		&&			
ANR	5027600	EqualityExpression	vmgahp_mode != VMGAHP_TEST_MODE		5027548	0		!=			
ANR	5027601	Identifier	vmgahp_mode		5027548	0					
ANR	5027602	Identifier	VMGAHP_TEST_MODE		5027548	1					
ANR	5027603	EqualityExpression	vmgahp_mode != VMGAHP_KILL_MODE		5027548	1		!=			
ANR	5027604	Identifier	vmgahp_mode		5027548	0					
ANR	5027605	Identifier	VMGAHP_KILL_MODE		5027548	1					
ANR	5027606	CompoundStatement		21:2:547:589	5027548	1					
ANR	5027607	IdentifierDeclStatement	"char * gahp_log_file = param ( ""VM_GAHP_LOG"" ) ;"	90:2:2445:2487	5027548	0	True				
ANR	5027608	IdentifierDecl	"* gahp_log_file = param ( ""VM_GAHP_LOG"" )"		5027548	0					
ANR	5027609	IdentifierDeclType	char *		5027548	0					
ANR	5027610	Identifier	gahp_log_file		5027548	1					
ANR	5027611	AssignmentExpression	"* gahp_log_file = param ( ""VM_GAHP_LOG"" )"		5027548	2		=			
ANR	5027612	Identifier	gahp_log_file		5027548	0					
ANR	5027613	CallExpression	"param ( ""VM_GAHP_LOG"" )"		5027548	1					
ANR	5027614	Callee	param		5027548	0					
ANR	5027615	Identifier	param		5027548	0					
ANR	5027616	ArgumentList	"""VM_GAHP_LOG"""		5027548	1					
ANR	5027617	Argument	"""VM_GAHP_LOG"""		5027548	0					
ANR	5027618	PrimaryExpression	"""VM_GAHP_LOG"""		5027548	0					
ANR	5027619	IfStatement	if ( gahp_log_file )		5027548	1					
ANR	5027620	Condition	gahp_log_file	91:6:2495:2507	5027548	0	True				
ANR	5027621	Identifier	gahp_log_file		5027548	0					
ANR	5027622	CompoundStatement		22:22:613:613	5027548	1					
ANR	5027623	IfStatement	"if ( ! strcmp ( gahp_log_file , NULL_FILE ) )"		5027548	0					
ANR	5027624	Condition	"! strcmp ( gahp_log_file , NULL_FILE )"	92:7:2520:2552	5027548	0	True				
ANR	5027625	UnaryOperationExpression	"! strcmp ( gahp_log_file , NULL_FILE )"		5027548	0					
ANR	5027626	UnaryOperator	!		5027548	0					
ANR	5027627	CallExpression	"strcmp ( gahp_log_file , NULL_FILE )"		5027548	1					
ANR	5027628	Callee	strcmp		5027548	0					
ANR	5027629	Identifier	strcmp		5027548	0					
ANR	5027630	ArgumentList	gahp_log_file		5027548	1					
ANR	5027631	Argument	gahp_log_file		5027548	0					
ANR	5027632	Identifier	gahp_log_file		5027548	0					
ANR	5027633	Argument	NULL_FILE		5027548	1					
ANR	5027634	Identifier	NULL_FILE		5027548	0					
ANR	5027635	CompoundStatement		23:43:658:658	5027548	1					
ANR	5027636	ExpressionStatement	oriDebugFlags = 0	94:4:2600:2617	5027548	0	True				
ANR	5027637	AssignmentExpression	oriDebugFlags = 0		5027548	0		=			
ANR	5027638	Identifier	oriDebugFlags		5027548	0					
ANR	5027639	PrimaryExpression	0		5027548	1					
ANR	5027640	ExpressionStatement	DebugFlags = 0	95:4:2623:2637	5027548	1	True				
ANR	5027641	AssignmentExpression	DebugFlags = 0		5027548	0		=			
ANR	5027642	Identifier	DebugFlags		5027548	0					
ANR	5027643	PrimaryExpression	0		5027548	1					
ANR	5027644	ExpressionStatement	free ( gahp_log_file )	97:3:2647:2666	5027548	1	True				
ANR	5027645	CallExpression	free ( gahp_log_file )		5027548	0					
ANR	5027646	Callee	free		5027548	0					
ANR	5027647	Identifier	free		5027548	0					
ANR	5027648	ArgumentList	gahp_log_file		5027548	1					
ANR	5027649	Argument	gahp_log_file		5027548	0					
ANR	5027650	Identifier	gahp_log_file		5027548	0					
ANR	5027651	ReturnType	void		5027548	1					
ANR	5027652	Identifier	Reconfig		5027548	2					
ANR	5027653	ParameterList			5027548	3					
ANR	5027654	CFGEntryNode	ENTRY		5027548		True				
ANR	5027655	CFGExitNode	EXIT		5027548		True				
ANR	5027656	Symbol	strcmp		5027548						
ANR	5027657	Symbol	workingdir . IsEmpty		5027548						
ANR	5027658	Symbol	gahp_log_file		5027548						
ANR	5027659	Symbol	Termlog		5027548						
ANR	5027660	Symbol	workingdir		5027548						
ANR	5027661	Symbol	DebugFlags		5027548						
ANR	5027662	Symbol	chdir		5027548						
ANR	5027663	Symbol	workingdir . Value		5027548						
ANR	5027664	Symbol	oriDebugFlags		5027548						
ANR	5027665	Symbol	param		5027548						
ANR	5027666	Symbol	vmgahp_mode		5027548						
ANR	5027667	Symbol	NULL_FILE		5027548						
ANR	5027668	Symbol	VMGAHP_TEST_MODE		5027548						
ANR	5027669	Symbol	VMGAHP_KILL_MODE		5027548						
ANR	5027670	Function	main_config	102:0:2678:2712							
ANR	5027671	FunctionDef	main_config ()		5027670	0					
ANR	5027672	CompoundStatement		104:0:2697:2712	5027670	0					
ANR	5027673	ExpressionStatement	Reconfig ( )	105:1:2700:2710	5027670	0	True				
ANR	5027674	CallExpression	Reconfig ( )		5027670	0					
ANR	5027675	Callee	Reconfig		5027670	0					
ANR	5027676	Identifier	Reconfig		5027670	0					
ANR	5027677	ArgumentList			5027670	1					
ANR	5027678	ReturnType	void		5027670	1					
ANR	5027679	Identifier	main_config		5027670	2					
ANR	5027680	ParameterList			5027670	3					
ANR	5027681	CFGEntryNode	ENTRY		5027670		True				
ANR	5027682	CFGExitNode	EXIT		5027670		True				
ANR	5027683	Function	main_shutdown_fast	108:0:2715:2831							
ANR	5027684	FunctionDef	main_shutdown_fast ()		5027683	0					
ANR	5027685	CompoundStatement		110:0:2741:2831	5027683	0					
ANR	5027686	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Received Signal for shutdown fast\\n"" )"	111:1:2744:2801	5027683	0	True				
ANR	5027687	CallExpression	"vmprintf ( D_ALWAYS , ""Received Signal for shutdown fast\\n"" )"		5027683	0					
ANR	5027688	Callee	vmprintf		5027683	0					
ANR	5027689	Identifier	vmprintf		5027683	0					
ANR	5027690	ArgumentList	D_ALWAYS		5027683	1					
ANR	5027691	Argument	D_ALWAYS		5027683	0					
ANR	5027692	Identifier	D_ALWAYS		5027683	0					
ANR	5027693	Argument	"""Received Signal for shutdown fast\\n"""		5027683	1					
ANR	5027694	PrimaryExpression	"""Received Signal for shutdown fast\\n"""		5027683	0					
ANR	5027695	ExpressionStatement	vm_cleanup ( )	112:1:2804:2816	5027683	1	True				
ANR	5027696	CallExpression	vm_cleanup ( )		5027683	0					
ANR	5027697	Callee	vm_cleanup		5027683	0					
ANR	5027698	Identifier	vm_cleanup		5027683	0					
ANR	5027699	ArgumentList			5027683	1					
ANR	5027700	ExpressionStatement	DC_Exit ( 0 )	113:1:2819:2829	5027683	2	True				
ANR	5027701	CallExpression	DC_Exit ( 0 )		5027683	0					
ANR	5027702	Callee	DC_Exit		5027683	0					
ANR	5027703	Identifier	DC_Exit		5027683	0					
ANR	5027704	ArgumentList	0		5027683	1					
ANR	5027705	Argument	0		5027683	0					
ANR	5027706	PrimaryExpression	0		5027683	0					
ANR	5027707	ReturnType	void		5027683	1					
ANR	5027708	Identifier	main_shutdown_fast		5027683	2					
ANR	5027709	ParameterList			5027683	3					
ANR	5027710	CFGEntryNode	ENTRY		5027683		True				
ANR	5027711	CFGExitNode	EXIT		5027683		True				
ANR	5027712	Symbol	D_ALWAYS		5027683						
ANR	5027713	Function	main_shutdown_graceful	116:0:2834:2960							
ANR	5027714	FunctionDef	main_shutdown_graceful ()		5027713	0					
ANR	5027715	CompoundStatement		118:0:2864:2960	5027713	0					
ANR	5027716	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Received Signal for shutdown gracefully\\n"" )"	119:1:2867:2930	5027713	0	True				
ANR	5027717	CallExpression	"vmprintf ( D_ALWAYS , ""Received Signal for shutdown gracefully\\n"" )"		5027713	0					
ANR	5027718	Callee	vmprintf		5027713	0					
ANR	5027719	Identifier	vmprintf		5027713	0					
ANR	5027720	ArgumentList	D_ALWAYS		5027713	1					
ANR	5027721	Argument	D_ALWAYS		5027713	0					
ANR	5027722	Identifier	D_ALWAYS		5027713	0					
ANR	5027723	Argument	"""Received Signal for shutdown gracefully\\n"""		5027713	1					
ANR	5027724	PrimaryExpression	"""Received Signal for shutdown gracefully\\n"""		5027713	0					
ANR	5027725	ExpressionStatement	vm_cleanup ( )	120:1:2933:2945	5027713	1	True				
ANR	5027726	CallExpression	vm_cleanup ( )		5027713	0					
ANR	5027727	Callee	vm_cleanup		5027713	0					
ANR	5027728	Identifier	vm_cleanup		5027713	0					
ANR	5027729	ArgumentList			5027713	1					
ANR	5027730	ExpressionStatement	DC_Exit ( 0 )	121:1:2948:2958	5027713	2	True				
ANR	5027731	CallExpression	DC_Exit ( 0 )		5027713	0					
ANR	5027732	Callee	DC_Exit		5027713	0					
ANR	5027733	Identifier	DC_Exit		5027713	0					
ANR	5027734	ArgumentList	0		5027713	1					
ANR	5027735	Argument	0		5027713	0					
ANR	5027736	PrimaryExpression	0		5027713	0					
ANR	5027737	ReturnType	void		5027713	1					
ANR	5027738	Identifier	main_shutdown_graceful		5027713	2					
ANR	5027739	ParameterList			5027713	3					
ANR	5027740	CFGEntryNode	ENTRY		5027713		True				
ANR	5027741	CFGExitNode	EXIT		5027713		True				
ANR	5027742	Symbol	D_ALWAYS		5027713						
ANR	5027743	Function	init_uids	124:0:2963:4870							
ANR	5027744	FunctionDef	init_uids ()		5027743	0					
ANR	5027745	CompoundStatement		126:0:2980:4870	5027743	0					
ANR	5027746	IdentifierDeclStatement	bool SwitchUid = can_switch_ids ( ) || privsep_enabled ( ) ;	128:1:3003:3057	5027743	0	True				
ANR	5027747	IdentifierDecl	SwitchUid = can_switch_ids ( ) || privsep_enabled ( )		5027743	0					
ANR	5027748	IdentifierDeclType	bool		5027743	0					
ANR	5027749	Identifier	SwitchUid		5027743	1					
ANR	5027750	AssignmentExpression	SwitchUid = can_switch_ids ( ) || privsep_enabled ( )		5027743	2		=			
ANR	5027751	Identifier	SwitchUid		5027743	0					
ANR	5027752	OrExpression	can_switch_ids ( ) || privsep_enabled ( )		5027743	1		||			
ANR	5027753	CallExpression	can_switch_ids ( )		5027743	0					
ANR	5027754	Callee	can_switch_ids		5027743	0					
ANR	5027755	Identifier	can_switch_ids		5027743	0					
ANR	5027756	ArgumentList			5027743	1					
ANR	5027757	CallExpression	privsep_enabled ( )		5027743	1					
ANR	5027758	Callee	privsep_enabled		5027743	0					
ANR	5027759	Identifier	privsep_enabled		5027743	0					
ANR	5027760	ArgumentList			5027743	1					
ANR	5027761	ExpressionStatement	caller_uid = getuid ( )	130:1:3061:3082	5027743	1	True				
ANR	5027762	AssignmentExpression	caller_uid = getuid ( )		5027743	0		=			
ANR	5027763	Identifier	caller_uid		5027743	0					
ANR	5027764	CallExpression	getuid ( )		5027743	1					
ANR	5027765	Callee	getuid		5027743	0					
ANR	5027766	Identifier	getuid		5027743	0					
ANR	5027767	ArgumentList			5027743	1					
ANR	5027768	ExpressionStatement	caller_gid = getgid ( )	131:1:3085:3106	5027743	2	True				
ANR	5027769	AssignmentExpression	caller_gid = getgid ( )		5027743	0		=			
ANR	5027770	Identifier	caller_gid		5027743	0					
ANR	5027771	CallExpression	getgid ( )		5027743	1					
ANR	5027772	Callee	getgid		5027743	0					
ANR	5027773	Identifier	getgid		5027743	0					
ANR	5027774	ArgumentList			5027743	1					
ANR	5027775	IdentifierDeclStatement	MyString user_uid ;	134:1:3131:3148	5027743	3	True				
ANR	5027776	IdentifierDecl	user_uid		5027743	0					
ANR	5027777	IdentifierDeclType	MyString		5027743	0					
ANR	5027778	Identifier	user_uid		5027743	1					
ANR	5027779	IdentifierDeclStatement	MyString user_gid ;	135:1:3151:3168	5027743	4	True				
ANR	5027780	IdentifierDecl	user_gid		5027743	0					
ANR	5027781	IdentifierDeclType	MyString		5027743	0					
ANR	5027782	Identifier	user_gid		5027743	1					
ANR	5027783	ExpressionStatement	"user_uid = getenv ( ""VMGAHP_USER_UID"" )"	136:1:3171:3207	5027743	5	True				
ANR	5027784	AssignmentExpression	"user_uid = getenv ( ""VMGAHP_USER_UID"" )"		5027743	0		=			
ANR	5027785	Identifier	user_uid		5027743	0					
ANR	5027786	CallExpression	"getenv ( ""VMGAHP_USER_UID"" )"		5027743	1					
ANR	5027787	Callee	getenv		5027743	0					
ANR	5027788	Identifier	getenv		5027743	0					
ANR	5027789	ArgumentList	"""VMGAHP_USER_UID"""		5027743	1					
ANR	5027790	Argument	"""VMGAHP_USER_UID"""		5027743	0					
ANR	5027791	PrimaryExpression	"""VMGAHP_USER_UID"""		5027743	0					
ANR	5027792	IfStatement	if ( user_uid . IsEmpty ( ) == false )		5027743	6					
ANR	5027793	Condition	user_uid . IsEmpty ( ) == false	137:5:3214:3240	5027743	0	True				
ANR	5027794	EqualityExpression	user_uid . IsEmpty ( ) == false		5027743	0		==			
ANR	5027795	CallExpression	user_uid . IsEmpty ( )		5027743	0					
ANR	5027796	Callee	user_uid . IsEmpty		5027743	0					
ANR	5027797	MemberAccess	user_uid . IsEmpty		5027743	0					
ANR	5027798	Identifier	user_uid		5027743	0					
ANR	5027799	Identifier	IsEmpty		5027743	1					
ANR	5027800	ArgumentList			5027743	1					
ANR	5027801	Identifier	false		5027743	1					
ANR	5027802	CompoundStatement		13:2:267:329	5027743	1					
ANR	5027803	IdentifierDeclStatement	"int env_uid = ( int ) strtol ( user_uid . Value ( ) , ( char * * ) NULL , 10 ) ;"	138:2:3248:3310	5027743	0	True				
ANR	5027804	IdentifierDecl	"env_uid = ( int ) strtol ( user_uid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	0					
ANR	5027805	IdentifierDeclType	int		5027743	0					
ANR	5027806	Identifier	env_uid		5027743	1					
ANR	5027807	AssignmentExpression	"env_uid = ( int ) strtol ( user_uid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	2		=			
ANR	5027808	Identifier	env_uid		5027743	0					
ANR	5027809	CastExpression	"( int ) strtol ( user_uid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	1					
ANR	5027810	CastTarget	int		5027743	0					
ANR	5027811	CallExpression	"strtol ( user_uid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	1					
ANR	5027812	Callee	strtol		5027743	0					
ANR	5027813	Identifier	strtol		5027743	0					
ANR	5027814	ArgumentList	user_uid . Value ( )		5027743	1					
ANR	5027815	Argument	user_uid . Value ( )		5027743	0					
ANR	5027816	CallExpression	user_uid . Value ( )		5027743	0					
ANR	5027817	Callee	user_uid . Value		5027743	0					
ANR	5027818	MemberAccess	user_uid . Value		5027743	0					
ANR	5027819	Identifier	user_uid		5027743	0					
ANR	5027820	Identifier	Value		5027743	1					
ANR	5027821	ArgumentList			5027743	1					
ANR	5027822	Argument	( char * * ) NULL		5027743	1					
ANR	5027823	CastExpression	( char * * ) NULL		5027743	0					
ANR	5027824	CastTarget	char * *		5027743	0					
ANR	5027825	Identifier	NULL		5027743	1					
ANR	5027826	Argument	10		5027743	2					
ANR	5027827	PrimaryExpression	10		5027743	0					
ANR	5027828	IfStatement	if ( env_uid > 0 )		5027743	1					
ANR	5027829	Condition	env_uid > 0	139:6:3318:3328	5027743	0	True				
ANR	5027830	RelationalExpression	env_uid > 0		5027743	0		>			
ANR	5027831	Identifier	env_uid		5027743	0					
ANR	5027832	PrimaryExpression	0		5027743	1					
ANR	5027833	CompoundStatement		14:20:351:351	5027743	1					
ANR	5027834	ExpressionStatement	job_user_uid = env_uid	140:3:3337:3359	5027743	0	True				
ANR	5027835	AssignmentExpression	job_user_uid = env_uid		5027743	0		=			
ANR	5027836	Identifier	job_user_uid		5027743	0					
ANR	5027837	Identifier	env_uid		5027743	1					
ANR	5027838	ExpressionStatement	"user_gid = getenv ( ""VMGAHP_USER_GID"" )"	143:3:3392:3428	5027743	1	True				
ANR	5027839	AssignmentExpression	"user_gid = getenv ( ""VMGAHP_USER_GID"" )"		5027743	0		=			
ANR	5027840	Identifier	user_gid		5027743	0					
ANR	5027841	CallExpression	"getenv ( ""VMGAHP_USER_GID"" )"		5027743	1					
ANR	5027842	Callee	getenv		5027743	0					
ANR	5027843	Identifier	getenv		5027743	0					
ANR	5027844	ArgumentList	"""VMGAHP_USER_GID"""		5027743	1					
ANR	5027845	Argument	"""VMGAHP_USER_GID"""		5027743	0					
ANR	5027846	PrimaryExpression	"""VMGAHP_USER_GID"""		5027743	0					
ANR	5027847	IfStatement	if ( user_gid . IsEmpty ( ) == false )		5027743	2					
ANR	5027848	Condition	user_gid . IsEmpty ( ) == false	144:7:3437:3463	5027743	0	True				
ANR	5027849	EqualityExpression	user_gid . IsEmpty ( ) == false		5027743	0		==			
ANR	5027850	CallExpression	user_gid . IsEmpty ( )		5027743	0					
ANR	5027851	Callee	user_gid . IsEmpty		5027743	0					
ANR	5027852	MemberAccess	user_gid . IsEmpty		5027743	0					
ANR	5027853	Identifier	user_gid		5027743	0					
ANR	5027854	Identifier	IsEmpty		5027743	1					
ANR	5027855	ArgumentList			5027743	1					
ANR	5027856	Identifier	false		5027743	1					
ANR	5027857	CompoundStatement		20:4:492:554	5027743	1					
ANR	5027858	IdentifierDeclStatement	"int env_gid = ( int ) strtol ( user_gid . Value ( ) , ( char * * ) NULL , 10 ) ;"	145:4:3473:3535	5027743	0	True				
ANR	5027859	IdentifierDecl	"env_gid = ( int ) strtol ( user_gid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	0					
ANR	5027860	IdentifierDeclType	int		5027743	0					
ANR	5027861	Identifier	env_gid		5027743	1					
ANR	5027862	AssignmentExpression	"env_gid = ( int ) strtol ( user_gid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	2		=			
ANR	5027863	Identifier	env_gid		5027743	0					
ANR	5027864	CastExpression	"( int ) strtol ( user_gid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	1					
ANR	5027865	CastTarget	int		5027743	0					
ANR	5027866	CallExpression	"strtol ( user_gid . Value ( ) , ( char * * ) NULL , 10 )"		5027743	1					
ANR	5027867	Callee	strtol		5027743	0					
ANR	5027868	Identifier	strtol		5027743	0					
ANR	5027869	ArgumentList	user_gid . Value ( )		5027743	1					
ANR	5027870	Argument	user_gid . Value ( )		5027743	0					
ANR	5027871	CallExpression	user_gid . Value ( )		5027743	0					
ANR	5027872	Callee	user_gid . Value		5027743	0					
ANR	5027873	MemberAccess	user_gid . Value		5027743	0					
ANR	5027874	Identifier	user_gid		5027743	0					
ANR	5027875	Identifier	Value		5027743	1					
ANR	5027876	ArgumentList			5027743	1					
ANR	5027877	Argument	( char * * ) NULL		5027743	1					
ANR	5027878	CastExpression	( char * * ) NULL		5027743	0					
ANR	5027879	CastTarget	char * *		5027743	0					
ANR	5027880	Identifier	NULL		5027743	1					
ANR	5027881	Argument	10		5027743	2					
ANR	5027882	PrimaryExpression	10		5027743	0					
ANR	5027883	IfStatement	if ( env_gid > 0 )		5027743	1					
ANR	5027884	Condition	env_gid > 0	146:8:3545:3555	5027743	0	True				
ANR	5027885	RelationalExpression	env_gid > 0		5027743	0		>			
ANR	5027886	Identifier	env_gid		5027743	0					
ANR	5027887	PrimaryExpression	0		5027743	1					
ANR	5027888	CompoundStatement		21:22:578:578	5027743	1					
ANR	5027889	ExpressionStatement	job_user_gid = env_gid	147:5:3566:3588	5027743	0	True				
ANR	5027890	AssignmentExpression	job_user_gid = env_gid		5027743	0		=			
ANR	5027891	Identifier	job_user_gid		5027743	0					
ANR	5027892	Identifier	env_gid		5027743	1					
ANR	5027893	IfStatement	if ( job_user_gid == ROOT_UID )		5027743	3					
ANR	5027894	Condition	job_user_gid == ROOT_UID	150:7:3608:3631	5027743	0	True				
ANR	5027895	EqualityExpression	job_user_gid == ROOT_UID		5027743	0		==			
ANR	5027896	Identifier	job_user_gid		5027743	0					
ANR	5027897	Identifier	ROOT_UID		5027743	1					
ANR	5027898	CompoundStatement		25:34:654:654	5027743	1					
ANR	5027899	ExpressionStatement	job_user_gid = job_user_uid	151:4:3641:3668	5027743	0	True				
ANR	5027900	AssignmentExpression	job_user_gid = job_user_uid		5027743	0		=			
ANR	5027901	Identifier	job_user_gid		5027743	0					
ANR	5027902	Identifier	job_user_uid		5027743	1					
ANR	5027903	IfStatement	if ( ! SwitchUid )		5027743	7					
ANR	5027904	Condition	! SwitchUid	156:5:3688:3697	5027743	0	True				
ANR	5027905	UnaryOperationExpression	! SwitchUid		5027743	0					
ANR	5027906	UnaryOperator	!		5027743	0					
ANR	5027907	Identifier	SwitchUid		5027743	1					
ANR	5027908	CompoundStatement		31:18:720:720	5027743	1					
ANR	5027909	ExpressionStatement	job_user_uid = caller_uid	159:2:3773:3798	5027743	0	True				
ANR	5027910	AssignmentExpression	job_user_uid = caller_uid		5027743	0		=			
ANR	5027911	Identifier	job_user_uid		5027743	0					
ANR	5027912	Identifier	caller_uid		5027743	1					
ANR	5027913	ExpressionStatement	job_user_gid = caller_gid	160:2:3802:3827	5027743	1	True				
ANR	5027914	AssignmentExpression	job_user_gid = caller_gid		5027743	0		=			
ANR	5027915	Identifier	job_user_gid		5027743	0					
ANR	5027916	Identifier	caller_gid		5027743	1					
ANR	5027917	ElseStatement	else		5027743	0					
ANR	5027918	CompoundStatement		36:7:855:855	5027743	0					
ANR	5027919	IfStatement	if ( job_user_uid == ROOT_UID )		5027743	0					
ANR	5027920	Condition	job_user_uid == ROOT_UID	163:6:3868:3891	5027743	0	True				
ANR	5027921	EqualityExpression	job_user_uid == ROOT_UID		5027743	0		==			
ANR	5027922	Identifier	job_user_uid		5027743	0					
ANR	5027923	Identifier	ROOT_UID		5027743	1					
ANR	5027924	CompoundStatement		38:33:914:914	5027743	1					
ANR	5027925	IfStatement	if ( caller_uid != ROOT_UID )		5027743	0					
ANR	5027926	Condition	caller_uid != ROOT_UID	165:7:3941:3962	5027743	0	True				
ANR	5027927	EqualityExpression	caller_uid != ROOT_UID		5027743	0		!=			
ANR	5027928	Identifier	caller_uid		5027743	0					
ANR	5027929	Identifier	ROOT_UID		5027743	1					
ANR	5027930	CompoundStatement		40:32:985:985	5027743	1					
ANR	5027931	ExpressionStatement	job_user_uid = caller_uid	166:4:3972:3997	5027743	0	True				
ANR	5027932	AssignmentExpression	job_user_uid = caller_uid		5027743	0		=			
ANR	5027933	Identifier	job_user_uid		5027743	0					
ANR	5027934	Identifier	caller_uid		5027743	1					
ANR	5027935	IfStatement	if ( caller_gid != ROOT_UID )		5027743	1					
ANR	5027936	Condition	caller_gid != ROOT_UID	167:8:4007:4028	5027743	0	True				
ANR	5027937	EqualityExpression	caller_gid != ROOT_UID		5027743	0		!=			
ANR	5027938	Identifier	caller_gid		5027743	0					
ANR	5027939	Identifier	ROOT_UID		5027743	1					
ANR	5027940	CompoundStatement		42:33:1051:1051	5027743	1					
ANR	5027941	ExpressionStatement	job_user_gid = caller_gid	168:5:4039:4064	5027743	0	True				
ANR	5027942	AssignmentExpression	job_user_gid = caller_gid		5027743	0		=			
ANR	5027943	Identifier	job_user_gid		5027743	0					
ANR	5027944	Identifier	caller_gid		5027743	1					
ANR	5027945	ElseStatement	else		5027743	0					
ANR	5027946	CompoundStatement		44:10:1095:1095	5027743	0					
ANR	5027947	ExpressionStatement	job_user_gid = caller_uid	170:5:4083:4108	5027743	0	True				
ANR	5027948	AssignmentExpression	job_user_gid = caller_uid		5027743	0		=			
ANR	5027949	Identifier	job_user_gid		5027743	0					
ANR	5027950	Identifier	caller_uid		5027743	1					
ANR	5027951	ElseStatement	else		5027743	0					
ANR	5027952	CompoundStatement		47:9:1144:1144	5027743	0					
ANR	5027953	Statement	fprintf	173:4:4131:4137	5027743	0	True				
ANR	5027954	Statement	(	173:11:4138:4138	5027743	1	True				
ANR	5027955	Statement	stderr	173:12:4139:4144	5027743	2	True				
ANR	5027956	Statement	","	173:18:4145:4145	5027743	3	True				
ANR	5027957	Statement	"""\\nERROR: Please set environment variable """	173:20:4147:4189	5027743	4	True				
ANR	5027958	Statement	"""'VMGAHP_USER_UID=<uid>'\\n"""	174:6:4197:4223	5027743	5	True				
ANR	5027959	Statement	)	174:33:4224:4224	5027743	6	True				
ANR	5027960	ExpressionStatement		174:34:4225:4225	5027743	7	True				
ANR	5027961	ExpressionStatement	exit ( 1 )	175:4:4231:4238	5027743	8	True				
ANR	5027962	CallExpression	exit ( 1 )		5027743	0					
ANR	5027963	Callee	exit		5027743	0					
ANR	5027964	Identifier	exit		5027743	0					
ANR	5027965	ArgumentList	1		5027743	1					
ANR	5027966	Argument	1		5027743	0					
ANR	5027967	PrimaryExpression	1		5027743	0					
ANR	5027968	IdentifierDeclStatement	char * user_name = NULL ;	181:1:4298:4320	5027743	8	True				
ANR	5027969	IdentifierDecl	* user_name = NULL		5027743	0					
ANR	5027970	IdentifierDeclType	char *		5027743	0					
ANR	5027971	Identifier	user_name		5027743	1					
ANR	5027972	AssignmentExpression	* user_name = NULL		5027743	2		=			
ANR	5027973	Identifier	NULL		5027743	0					
ANR	5027974	Identifier	NULL		5027743	1					
ANR	5027975	IdentifierDeclStatement	passwd_cache * p_cache = pcache ( ) ;	182:1:4323:4355	5027743	9	True				
ANR	5027976	IdentifierDecl	* p_cache = pcache ( )		5027743	0					
ANR	5027977	IdentifierDeclType	passwd_cache *		5027743	0					
ANR	5027978	Identifier	p_cache		5027743	1					
ANR	5027979	AssignmentExpression	* p_cache = pcache ( )		5027743	2		=			
ANR	5027980	Identifier	p_cache		5027743	0					
ANR	5027981	CallExpression	pcache ( )		5027743	1					
ANR	5027982	Callee	pcache		5027743	0					
ANR	5027983	Identifier	pcache		5027743	0					
ANR	5027984	ArgumentList			5027743	1					
ANR	5027985	IfStatement	"if ( p_cache -> get_user_name ( caller_uid , user_name ) == true )"		5027743	10					
ANR	5027986	Condition	"p_cache -> get_user_name ( caller_uid , user_name ) == true"	183:5:4362:4414	5027743	0	True				
ANR	5027987	EqualityExpression	"p_cache -> get_user_name ( caller_uid , user_name ) == true"		5027743	0		==			
ANR	5027988	CallExpression	"p_cache -> get_user_name ( caller_uid , user_name )"		5027743	0					
ANR	5027989	Callee	p_cache -> get_user_name		5027743	0					
ANR	5027990	PtrMemberAccess	p_cache -> get_user_name		5027743	0					
ANR	5027991	Identifier	p_cache		5027743	0					
ANR	5027992	Identifier	get_user_name		5027743	1					
ANR	5027993	ArgumentList	caller_uid		5027743	1					
ANR	5027994	Argument	caller_uid		5027743	0					
ANR	5027995	Identifier	caller_uid		5027743	0					
ANR	5027996	Argument	user_name		5027743	1					
ANR	5027997	Identifier	user_name		5027743	0					
ANR	5027998	Identifier	true		5027743	1					
ANR	5027999	CompoundStatement		58:61:1437:1437	5027743	1					
ANR	5028000	ExpressionStatement	caller_name = user_name	184:2:4422:4445	5027743	0	True				
ANR	5028001	AssignmentExpression	caller_name = user_name		5027743	0		=			
ANR	5028002	Identifier	caller_name		5027743	0					
ANR	5028003	Identifier	user_name		5027743	1					
ANR	5028004	ExpressionStatement	free ( user_name )	185:2:4449:4464	5027743	1	True				
ANR	5028005	CallExpression	free ( user_name )		5027743	0					
ANR	5028006	Callee	free		5027743	0					
ANR	5028007	Identifier	free		5027743	0					
ANR	5028008	ArgumentList	user_name		5027743	1					
ANR	5028009	Argument	user_name		5027743	0					
ANR	5028010	Identifier	user_name		5027743	0					
ANR	5028011	IfStatement	if ( job_user_uid == caller_uid )		5027743	11					
ANR	5028012	Condition	job_user_uid == caller_uid	188:5:4475:4500	5027743	0	True				
ANR	5028013	EqualityExpression	job_user_uid == caller_uid		5027743	0		==			
ANR	5028014	Identifier	job_user_uid		5027743	0					
ANR	5028015	Identifier	caller_uid		5027743	1					
ANR	5028016	CompoundStatement		63:34:1523:1523	5027743	1					
ANR	5028017	ExpressionStatement	job_user_name = caller_name	189:2:4508:4535	5027743	0	True				
ANR	5028018	AssignmentExpression	job_user_name = caller_name		5027743	0		=			
ANR	5028019	Identifier	job_user_name		5027743	0					
ANR	5028020	Identifier	caller_name		5027743	1					
ANR	5028021	IfStatement	if ( SwitchUid )		5027743	12					
ANR	5028022	Condition	SwitchUid	192:5:4546:4554	5027743	0	True				
ANR	5028023	Identifier	SwitchUid		5027743	0					
ANR	5028024	CompoundStatement		67:17:1577:1577	5027743	1					
ANR	5028025	ExpressionStatement	"set_user_ids ( job_user_uid , job_user_gid )"	193:2:4562:4602	5027743	0	True				
ANR	5028026	CallExpression	"set_user_ids ( job_user_uid , job_user_gid )"		5027743	0					
ANR	5028027	Callee	set_user_ids		5027743	0					
ANR	5028028	Identifier	set_user_ids		5027743	0					
ANR	5028029	ArgumentList	job_user_uid		5027743	1					
ANR	5028030	Argument	job_user_uid		5027743	0					
ANR	5028031	Identifier	job_user_uid		5027743	0					
ANR	5028032	Argument	job_user_gid		5027743	1					
ANR	5028033	Identifier	job_user_gid		5027743	0					
ANR	5028034	ExpressionStatement	set_user_priv ( )	194:2:4606:4621	5027743	1	True				
ANR	5028035	CallExpression	set_user_priv ( )		5027743	0					
ANR	5028036	Callee	set_user_priv		5027743	0					
ANR	5028037	Identifier	set_user_priv		5027743	0					
ANR	5028038	ArgumentList			5027743	1					
ANR	5028039	IfStatement	if ( job_user_uid != caller_uid )		5027743	2					
ANR	5028040	Condition	job_user_uid != caller_uid	198:6:4701:4726	5027743	0	True				
ANR	5028041	EqualityExpression	job_user_uid != caller_uid		5027743	0		!=			
ANR	5028042	Identifier	job_user_uid		5027743	0					
ANR	5028043	Identifier	caller_uid		5027743	1					
ANR	5028044	CompoundStatement		73:35:1749:1749	5027743	1					
ANR	5028045	IfStatement	"if ( p_cache -> get_user_name ( job_user_uid , user_name ) == true )"		5027743	0					
ANR	5028046	Condition	"p_cache -> get_user_name ( job_user_uid , user_name ) == true"	199:7:4739:4793	5027743	0	True				
ANR	5028047	EqualityExpression	"p_cache -> get_user_name ( job_user_uid , user_name ) == true"		5027743	0		==			
ANR	5028048	CallExpression	"p_cache -> get_user_name ( job_user_uid , user_name )"		5027743	0					
ANR	5028049	Callee	p_cache -> get_user_name		5027743	0					
ANR	5028050	PtrMemberAccess	p_cache -> get_user_name		5027743	0					
ANR	5028051	Identifier	p_cache		5027743	0					
ANR	5028052	Identifier	get_user_name		5027743	1					
ANR	5028053	ArgumentList	job_user_uid		5027743	1					
ANR	5028054	Argument	job_user_uid		5027743	0					
ANR	5028055	Identifier	job_user_uid		5027743	0					
ANR	5028056	Argument	user_name		5027743	1					
ANR	5028057	Identifier	user_name		5027743	0					
ANR	5028058	Identifier	true		5027743	1					
ANR	5028059	CompoundStatement		74:65:1816:1816	5027743	1					
ANR	5028060	ExpressionStatement	job_user_name = user_name	200:4:4803:4828	5027743	0	True				
ANR	5028061	AssignmentExpression	job_user_name = user_name		5027743	0		=			
ANR	5028062	Identifier	job_user_name		5027743	0					
ANR	5028063	Identifier	user_name		5027743	1					
ANR	5028064	ExpressionStatement	free ( user_name )	201:4:4834:4849	5027743	1	True				
ANR	5028065	CallExpression	free ( user_name )		5027743	0					
ANR	5028066	Callee	free		5027743	0					
ANR	5028067	Identifier	free		5027743	0					
ANR	5028068	ArgumentList	user_name		5027743	1					
ANR	5028069	Argument	user_name		5027743	0					
ANR	5028070	Identifier	user_name		5027743	0					
ANR	5028071	ReturnType	void		5027743	1					
ANR	5028072	Identifier	init_uids		5027743	2					
ANR	5028073	ParameterList			5027743	3					
ANR	5028074	CFGEntryNode	ENTRY		5027743		True				
ANR	5028075	CFGExitNode	EXIT		5027743		True				
ANR	5028076	Symbol	SwitchUid		5027743						
ANR	5028077	Symbol	job_user_uid		5027743						
ANR	5028078	Symbol	p_cache		5027743						
ANR	5028079	Symbol	env_gid		5027743						
ANR	5028080	Symbol	user_name		5027743						
ANR	5028081	Symbol	env_uid		5027743						
ANR	5028082	Symbol	job_user_gid		5027743						
ANR	5028083	Symbol	caller_gid		5027743						
ANR	5028084	Symbol	user_uid . IsEmpty		5027743						
ANR	5028085	Symbol	caller_name		5027743						
ANR	5028086	Symbol	can_switch_ids		5027743						
ANR	5028087	Symbol	ROOT_UID		5027743						
ANR	5028088	Symbol	strtol		5027743						
ANR	5028089	Symbol	caller_uid		5027743						
ANR	5028090	Symbol	getenv		5027743						
ANR	5028091	Symbol	NULL		5027743						
ANR	5028092	Symbol	getgid		5027743						
ANR	5028093	Symbol	user_gid . Value		5027743						
ANR	5028094	Symbol	user_gid . IsEmpty		5027743						
ANR	5028095	Symbol	false		5027743						
ANR	5028096	Symbol	* p_cache		5027743						
ANR	5028097	Symbol	user_gid		5027743						
ANR	5028098	Symbol	pcache		5027743						
ANR	5028099	Symbol	p_cache -> get_user_name		5027743						
ANR	5028100	Symbol	user_uid . Value		5027743						
ANR	5028101	Symbol	getuid		5027743						
ANR	5028102	Symbol	job_user_name		5027743						
ANR	5028103	Symbol	privsep_enabled		5027743						
ANR	5028104	Symbol	true		5027743						
ANR	5028105	Symbol	user_uid		5027743						
ANR	5028106	Function	main_pre_command_sock_init	208:0:4873:4951							
ANR	5028107	FunctionDef	main_pre_command_sock_init ()		5028106	0					
ANR	5028108	CompoundStatement		210:0:4907:4951	5028106	0					
ANR	5028109	ExpressionStatement	daemonCore -> WantSendChildAlive ( false )	211:1:4910:4949	5028106	0	True				
ANR	5028110	CallExpression	daemonCore -> WantSendChildAlive ( false )		5028106	0					
ANR	5028111	Callee	daemonCore -> WantSendChildAlive		5028106	0					
ANR	5028112	PtrMemberAccess	daemonCore -> WantSendChildAlive		5028106	0					
ANR	5028113	Identifier	daemonCore		5028106	0					
ANR	5028114	Identifier	WantSendChildAlive		5028106	1					
ANR	5028115	ArgumentList	false		5028106	1					
ANR	5028116	Argument	false		5028106	0					
ANR	5028117	Identifier	false		5028106	0					
ANR	5028118	ReturnType	void		5028106	1					
ANR	5028119	Identifier	main_pre_command_sock_init		5028106	2					
ANR	5028120	ParameterList			5028106	3					
ANR	5028121	CFGEntryNode	ENTRY		5028106		True				
ANR	5028122	CFGExitNode	EXIT		5028106		True				
ANR	5028123	Symbol	daemonCore		5028106						
ANR	5028124	Symbol	false		5028106						
ANR	5028125	Function	usage	214:0:4954:5213							
ANR	5028126	FunctionDef	usage (char * name)		5028125	0					
ANR	5028127	CompoundStatement		216:0:4985:5213	5028125	0					
ANR	5028128	Statement	vmprintf	217:1:4988:4995	5028125	0	True				
ANR	5028129	Statement	(	217:9:4996:4996	5028125	1	True				
ANR	5028130	Statement	D_ALWAYS	217:10:4997:5004	5028125	2	True				
ANR	5028131	Statement	","	217:18:5005:5005	5028125	3	True				
ANR	5028132	Statement	"""Usage: \\n"""	218:3:5010:5020	5028125	4	True				
ANR	5028133	Statement	"""\\tTestMode: %s -f -t -M 0 vmtype <vmtype> \\n"""	219:3:5025:5070	5028125	5	True				
ANR	5028134	Statement	"""\\tStandAlone: %s -f -t -M 3\\n"""	220:3:5075:5105	5028125	6	True				
ANR	5028135	Statement	"""\\tKillMode: %s -f -t -M 4 vmtype <vmtype> match <matchstring>\\n"""	221:3:5110:5174	5028125	7	True				
ANR	5028136	Statement	","	221:68:5175:5175	5028125	8	True				
ANR	5028137	Statement	name	222:3:5180:5183	5028125	9	True				
ANR	5028138	Statement	","	222:7:5184:5184	5028125	10	True				
ANR	5028139	Statement	name	222:9:5186:5189	5028125	11	True				
ANR	5028140	Statement	","	222:13:5190:5190	5028125	12	True				
ANR	5028141	Statement	name	222:15:5192:5195	5028125	13	True				
ANR	5028142	Statement	)	222:19:5196:5196	5028125	14	True				
ANR	5028143	ExpressionStatement		222:20:5197:5197	5028125	15	True				
ANR	5028144	ExpressionStatement	DC_Exit ( 1 )	223:1:5200:5210	5028125	16	True				
ANR	5028145	CallExpression	DC_Exit ( 1 )		5028125	0					
ANR	5028146	Callee	DC_Exit		5028125	0					
ANR	5028147	Identifier	DC_Exit		5028125	0					
ANR	5028148	ArgumentList	1		5028125	1					
ANR	5028149	Argument	1		5028125	0					
ANR	5028150	PrimaryExpression	1		5028125	0					
ANR	5028151	ReturnType	static void		5028125	1					
ANR	5028152	Identifier	usage		5028125	2					
ANR	5028153	ParameterList	char * name		5028125	3					
ANR	5028154	Parameter	char * name	215:7:4973:4982	5028125	0	True				
ANR	5028155	ParameterType	char *		5028125	0					
ANR	5028156	Identifier	name		5028125	1					
ANR	5028157	CFGEntryNode	ENTRY		5028125		True				
ANR	5028158	CFGExitNode	EXIT		5028125		True				
ANR	5028159	Symbol	name		5028125						
ANR	5028160	Function	main_init	227:0:5216:12735							
ANR	5028161	FunctionDef	"main_init (int argc , char * argv [ ])"		5028160	0					
ANR	5028162	CompoundStatement		228:0:5255:12735	5028160	0					
ANR	5028163	ExpressionStatement	init_uids ( )	229:1:5258:5269	5028160	0	True				
ANR	5028164	CallExpression	init_uids ( )		5028160	0					
ANR	5028165	Callee	init_uids		5028160	0					
ANR	5028166	Identifier	init_uids		5028160	0					
ANR	5028167	ArgumentList			5028160	1					
ANR	5028168	IdentifierDeclStatement	MyString vmtype ;	231:1:5273:5288	5028160	1	True				
ANR	5028169	IdentifierDecl	vmtype		5028160	0					
ANR	5028170	IdentifierDeclType	MyString		5028160	0					
ANR	5028171	Identifier	vmtype		5028160	1					
ANR	5028172	IdentifierDeclStatement	MyString matchstring ;	232:1:5291:5311	5028160	2	True				
ANR	5028173	IdentifierDecl	matchstring		5028160	0					
ANR	5028174	IdentifierDeclType	MyString		5028160	0					
ANR	5028175	Identifier	matchstring		5028160	1					
ANR	5028176	ExpressionStatement	oriDebugFlags = DebugFlags	235:1:5348:5374	5028160	3	True				
ANR	5028177	AssignmentExpression	oriDebugFlags = DebugFlags		5028160	0		=			
ANR	5028178	Identifier	oriDebugFlags		5028160	0					
ANR	5028179	Identifier	DebugFlags		5028160	1					
ANR	5028180	IfStatement	if ( argc < 3 )		5028160	4					
ANR	5028181	Condition	argc < 3	238:5:5420:5427	5028160	0	True				
ANR	5028182	RelationalExpression	argc < 3		5028160	0		<			
ANR	5028183	Identifier	argc		5028160	0					
ANR	5028184	PrimaryExpression	3		5028160	1					
ANR	5028185	CompoundStatement		11:16:175:175	5028160	1					
ANR	5028186	ExpressionStatement	usage ( argv [ 0 ] )	239:2:5435:5449	5028160	0	True				
ANR	5028187	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028188	Callee	usage		5028160	0					
ANR	5028189	Identifier	usage		5028160	0					
ANR	5028190	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028191	Argument	argv [ 0 ]		5028160	0					
ANR	5028192	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028193	Identifier	argv		5028160	0					
ANR	5028194	PrimaryExpression	0		5028160	1					
ANR	5028195	IfStatement	"if ( strcmp ( argv [ 1 ] , ""-M"" ) )"		5028160	5					
ANR	5028196	Condition	"strcmp ( argv [ 1 ] , ""-M"" )"	243:5:5488:5508	5028160	0	True				
ANR	5028197	CallExpression	"strcmp ( argv [ 1 ] , ""-M"" )"		5028160	0					
ANR	5028198	Callee	strcmp		5028160	0					
ANR	5028199	Identifier	strcmp		5028160	0					
ANR	5028200	ArgumentList	argv [ 1 ]		5028160	1					
ANR	5028201	Argument	argv [ 1 ]		5028160	0					
ANR	5028202	ArrayIndexing	argv [ 1 ]		5028160	0					
ANR	5028203	Identifier	argv		5028160	0					
ANR	5028204	PrimaryExpression	1		5028160	1					
ANR	5028205	Argument	"""-M"""		5028160	1					
ANR	5028206	PrimaryExpression	"""-M"""		5028160	0					
ANR	5028207	CompoundStatement		16:28:255:255	5028160	1					
ANR	5028208	ExpressionStatement	usage ( argv [ 0 ] )	244:2:5515:5529	5028160	0	True				
ANR	5028209	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028210	Callee	usage		5028160	0					
ANR	5028211	Identifier	usage		5028160	0					
ANR	5028212	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028213	Argument	argv [ 0 ]		5028160	0					
ANR	5028214	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028215	Identifier	argv		5028160	0					
ANR	5028216	PrimaryExpression	0		5028160	1					
ANR	5028217	ExpressionStatement	vmgahp_mode = atoi ( argv [ 2 ] )	247:1:5536:5563	5028160	6	True				
ANR	5028218	AssignmentExpression	vmgahp_mode = atoi ( argv [ 2 ] )		5028160	0		=			
ANR	5028219	Identifier	vmgahp_mode		5028160	0					
ANR	5028220	CallExpression	atoi ( argv [ 2 ] )		5028160	1					
ANR	5028221	Callee	atoi		5028160	0					
ANR	5028222	Identifier	atoi		5028160	0					
ANR	5028223	ArgumentList	argv [ 2 ]		5028160	1					
ANR	5028224	Argument	argv [ 2 ]		5028160	0					
ANR	5028225	ArrayIndexing	argv [ 2 ]		5028160	0					
ANR	5028226	Identifier	argv		5028160	0					
ANR	5028227	PrimaryExpression	2		5028160	1					
ANR	5028228	IfStatement	if ( vmgahp_mode == VMGAHP_IO_MODE )		5028160	7					
ANR	5028229	Condition	vmgahp_mode == VMGAHP_IO_MODE	248:5:5570:5598	5028160	0	True				
ANR	5028230	EqualityExpression	vmgahp_mode == VMGAHP_IO_MODE		5028160	0		==			
ANR	5028231	Identifier	vmgahp_mode		5028160	0					
ANR	5028232	Identifier	VMGAHP_IO_MODE		5028160	1					
ANR	5028233	CompoundStatement		21:37:346:346	5028160	1					
ANR	5028234	ExpressionStatement	vmgahp_mode = VMGAHP_STANDALONE_MODE	249:2:5606:5642	5028160	0	True				
ANR	5028235	AssignmentExpression	vmgahp_mode = VMGAHP_STANDALONE_MODE		5028160	0		=			
ANR	5028236	Identifier	vmgahp_mode		5028160	0					
ANR	5028237	Identifier	VMGAHP_STANDALONE_MODE		5028160	1					
ANR	5028238	ElseStatement	else		5028160	0					
ANR	5028239	IfStatement	if ( vmgahp_mode >= VMGAHP_MODE_MAX || vmgahp_mode < 0 || vmgahp_mode == VMGAHP_WORKER_MODE )		5028160	0					
ANR	5028240	Condition	vmgahp_mode >= VMGAHP_MODE_MAX || vmgahp_mode < 0 || vmgahp_mode == VMGAHP_WORKER_MODE	250:12:5656:5747	5028160	0	True				
ANR	5028241	OrExpression	vmgahp_mode >= VMGAHP_MODE_MAX || vmgahp_mode < 0 || vmgahp_mode == VMGAHP_WORKER_MODE		5028160	0		||			
ANR	5028242	RelationalExpression	vmgahp_mode >= VMGAHP_MODE_MAX		5028160	0		>=			
ANR	5028243	Identifier	vmgahp_mode		5028160	0					
ANR	5028244	Identifier	VMGAHP_MODE_MAX		5028160	1					
ANR	5028245	OrExpression	vmgahp_mode < 0 || vmgahp_mode == VMGAHP_WORKER_MODE		5028160	1		||			
ANR	5028246	RelationalExpression	vmgahp_mode < 0		5028160	0		<			
ANR	5028247	Identifier	vmgahp_mode		5028160	0					
ANR	5028248	PrimaryExpression	0		5028160	1					
ANR	5028249	EqualityExpression	vmgahp_mode == VMGAHP_WORKER_MODE		5028160	1		==			
ANR	5028250	Identifier	vmgahp_mode		5028160	0					
ANR	5028251	Identifier	VMGAHP_WORKER_MODE		5028160	1					
ANR	5028252	CompoundStatement		24:42:495:495	5028160	1					
ANR	5028253	ExpressionStatement	usage ( argv [ 0 ] )	252:2:5755:5769	5028160	0	True				
ANR	5028254	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028255	Callee	usage		5028160	0					
ANR	5028256	Identifier	usage		5028160	0					
ANR	5028257	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028258	Argument	argv [ 0 ]		5028160	0					
ANR	5028259	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028260	Identifier	argv		5028160	0					
ANR	5028261	PrimaryExpression	0		5028160	1					
ANR	5028262	ExpressionStatement	"vmgahp_stdout_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdout ) , true , false , false )"	255:1:5776:5899	5028160	8	True				
ANR	5028263	AssignmentExpression	"vmgahp_stdout_pipe = daemonCore -> Inherit_Pipe ( fileno ( stdout ) , true , false , false )"		5028160	0		=			
ANR	5028264	Identifier	vmgahp_stdout_pipe		5028160	0					
ANR	5028265	CallExpression	"daemonCore -> Inherit_Pipe ( fileno ( stdout ) , true , false , false )"		5028160	1					
ANR	5028266	Callee	daemonCore -> Inherit_Pipe		5028160	0					
ANR	5028267	PtrMemberAccess	daemonCore -> Inherit_Pipe		5028160	0					
ANR	5028268	Identifier	daemonCore		5028160	0					
ANR	5028269	Identifier	Inherit_Pipe		5028160	1					
ANR	5028270	ArgumentList	fileno ( stdout )		5028160	1					
ANR	5028271	Argument	fileno ( stdout )		5028160	0					
ANR	5028272	CallExpression	fileno ( stdout )		5028160	0					
ANR	5028273	Callee	fileno		5028160	0					
ANR	5028274	Identifier	fileno		5028160	0					
ANR	5028275	ArgumentList	stdout		5028160	1					
ANR	5028276	Argument	stdout		5028160	0					
ANR	5028277	Identifier	stdout		5028160	0					
ANR	5028278	Argument	true		5028160	1					
ANR	5028279	Identifier	true		5028160	0					
ANR	5028280	Argument	false		5028160	2					
ANR	5028281	Identifier	false		5028160	0					
ANR	5028282	Argument	false		5028160	3					
ANR	5028283	Identifier	false		5028160	0					
ANR	5028284	IfStatement	if ( vmgahp_stdout_pipe == - 1 )		5028160	9					
ANR	5028285	Condition	vmgahp_stdout_pipe == - 1	260:5:5919:5942	5028160	0	True				
ANR	5028286	EqualityExpression	vmgahp_stdout_pipe == - 1		5028160	0		==			
ANR	5028287	Identifier	vmgahp_stdout_pipe		5028160	0					
ANR	5028288	UnaryOperationExpression	- 1		5028160	1					
ANR	5028289	UnaryOperator	-		5028160	0					
ANR	5028290	PrimaryExpression	1		5028160	1					
ANR	5028291	CompoundStatement		33:32:690:690	5028160	1					
ANR	5028292	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Can't get stdout pipe"" )"	261:3:5951:5993	5028160	0	True				
ANR	5028293	CallExpression	"vmprintf ( D_ALWAYS , ""Can't get stdout pipe"" )"		5028160	0					
ANR	5028294	Callee	vmprintf		5028160	0					
ANR	5028295	Identifier	vmprintf		5028160	0					
ANR	5028296	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028297	Argument	D_ALWAYS		5028160	0					
ANR	5028298	Identifier	D_ALWAYS		5028160	0					
ANR	5028299	Argument	"""Can't get stdout pipe"""		5028160	1					
ANR	5028300	PrimaryExpression	"""Can't get stdout pipe"""		5028160	0					
ANR	5028301	ExpressionStatement	DC_Exit ( 1 )	262:3:5998:6008	5028160	1	True				
ANR	5028302	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028303	Callee	DC_Exit		5028160	0					
ANR	5028304	Identifier	DC_Exit		5028160	0					
ANR	5028305	ArgumentList	1		5028160	1					
ANR	5028306	Argument	1		5028160	0					
ANR	5028307	PrimaryExpression	1		5028160	0					
ANR	5028308	IfStatement	if ( Termlog && ( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE ) )		5028160	10					
ANR	5028309	Condition	Termlog && ( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE )	265:5:6019:6104	5028160	0	True				
ANR	5028310	AndExpression	Termlog && ( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE )		5028160	0		&&			
ANR	5028311	Identifier	Termlog		5028160	0					
ANR	5028312	AndExpression	( vmgahp_mode != VMGAHP_TEST_MODE ) && ( vmgahp_mode != VMGAHP_KILL_MODE )		5028160	1		&&			
ANR	5028313	EqualityExpression	vmgahp_mode != VMGAHP_TEST_MODE		5028160	0		!=			
ANR	5028314	Identifier	vmgahp_mode		5028160	0					
ANR	5028315	Identifier	VMGAHP_TEST_MODE		5028160	1					
ANR	5028316	EqualityExpression	vmgahp_mode != VMGAHP_KILL_MODE		5028160	1		!=			
ANR	5028317	Identifier	vmgahp_mode		5028160	0					
ANR	5028318	Identifier	VMGAHP_KILL_MODE		5028160	1					
ANR	5028319	CompoundStatement		39:39:851:851	5028160	1					
ANR	5028320	ExpressionStatement	"vmgahp_stderr_pipe = daemonCore -> Inherit_Pipe ( fileno ( stderr ) , true , false , true )"	268:2:6143:6268	5028160	0	True				
ANR	5028321	AssignmentExpression	"vmgahp_stderr_pipe = daemonCore -> Inherit_Pipe ( fileno ( stderr ) , true , false , true )"		5028160	0		=			
ANR	5028322	Identifier	vmgahp_stderr_pipe		5028160	0					
ANR	5028323	CallExpression	"daemonCore -> Inherit_Pipe ( fileno ( stderr ) , true , false , true )"		5028160	1					
ANR	5028324	Callee	daemonCore -> Inherit_Pipe		5028160	0					
ANR	5028325	PtrMemberAccess	daemonCore -> Inherit_Pipe		5028160	0					
ANR	5028326	Identifier	daemonCore		5028160	0					
ANR	5028327	Identifier	Inherit_Pipe		5028160	1					
ANR	5028328	ArgumentList	fileno ( stderr )		5028160	1					
ANR	5028329	Argument	fileno ( stderr )		5028160	0					
ANR	5028330	CallExpression	fileno ( stderr )		5028160	0					
ANR	5028331	Callee	fileno		5028160	0					
ANR	5028332	Identifier	fileno		5028160	0					
ANR	5028333	ArgumentList	stderr		5028160	1					
ANR	5028334	Argument	stderr		5028160	0					
ANR	5028335	Identifier	stderr		5028160	0					
ANR	5028336	Argument	true		5028160	1					
ANR	5028337	Identifier	true		5028160	0					
ANR	5028338	Argument	false		5028160	2					
ANR	5028339	Identifier	false		5028160	0					
ANR	5028340	Argument	true		5028160	3					
ANR	5028341	Identifier	true		5028160	0					
ANR	5028342	IfStatement	if ( vmgahp_stderr_pipe == - 1 )		5028160	1					
ANR	5028343	Condition	vmgahp_stderr_pipe == - 1	273:6:6293:6316	5028160	0	True				
ANR	5028344	EqualityExpression	vmgahp_stderr_pipe == - 1		5028160	0		==			
ANR	5028345	Identifier	vmgahp_stderr_pipe		5028160	0					
ANR	5028346	UnaryOperationExpression	- 1		5028160	1					
ANR	5028347	UnaryOperator	-		5028160	0					
ANR	5028348	PrimaryExpression	1		5028160	1					
ANR	5028349	CompoundStatement		46:33:1064:1064	5028160	1					
ANR	5028350	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Can't get stderr pipe"" )"	274:3:6325:6367	5028160	0	True				
ANR	5028351	CallExpression	"vmprintf ( D_ALWAYS , ""Can't get stderr pipe"" )"		5028160	0					
ANR	5028352	Callee	vmprintf		5028160	0					
ANR	5028353	Identifier	vmprintf		5028160	0					
ANR	5028354	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028355	Argument	D_ALWAYS		5028160	0					
ANR	5028356	Identifier	D_ALWAYS		5028160	0					
ANR	5028357	Argument	"""Can't get stderr pipe"""		5028160	1					
ANR	5028358	PrimaryExpression	"""Can't get stderr pipe"""		5028160	0					
ANR	5028359	ExpressionStatement	DC_Exit ( 1 )	275:3:6372:6382	5028160	1	True				
ANR	5028360	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028361	Callee	DC_Exit		5028160	0					
ANR	5028362	Identifier	DC_Exit		5028160	0					
ANR	5028363	ArgumentList	1		5028160	1					
ANR	5028364	Argument	1		5028160	0					
ANR	5028365	PrimaryExpression	1		5028160	0					
ANR	5028366	ExpressionStatement	vmgahp_stderr_buffer . setPipeEnd ( vmgahp_stderr_pipe )	277:2:6390:6441	5028160	2	True				
ANR	5028367	CallExpression	vmgahp_stderr_buffer . setPipeEnd ( vmgahp_stderr_pipe )		5028160	0					
ANR	5028368	Callee	vmgahp_stderr_buffer . setPipeEnd		5028160	0					
ANR	5028369	MemberAccess	vmgahp_stderr_buffer . setPipeEnd		5028160	0					
ANR	5028370	Identifier	vmgahp_stderr_buffer		5028160	0					
ANR	5028371	Identifier	setPipeEnd		5028160	1					
ANR	5028372	ArgumentList	vmgahp_stderr_pipe		5028160	1					
ANR	5028373	Argument	vmgahp_stderr_pipe		5028160	0					
ANR	5028374	Identifier	vmgahp_stderr_pipe		5028160	0					
ANR	5028375	ExpressionStatement	"vmgahp_stderr_tid = daemonCore -> Register_Timer ( 2 , 2 , write_stderr_to_pipe , ""write_stderr_to_pipe"" )"	279:2:6446:6552	5028160	3	True				
ANR	5028376	AssignmentExpression	"vmgahp_stderr_tid = daemonCore -> Register_Timer ( 2 , 2 , write_stderr_to_pipe , ""write_stderr_to_pipe"" )"		5028160	0		=			
ANR	5028377	Identifier	vmgahp_stderr_tid		5028160	0					
ANR	5028378	CallExpression	"daemonCore -> Register_Timer ( 2 , 2 , write_stderr_to_pipe , ""write_stderr_to_pipe"" )"		5028160	1					
ANR	5028379	Callee	daemonCore -> Register_Timer		5028160	0					
ANR	5028380	PtrMemberAccess	daemonCore -> Register_Timer		5028160	0					
ANR	5028381	Identifier	daemonCore		5028160	0					
ANR	5028382	Identifier	Register_Timer		5028160	1					
ANR	5028383	ArgumentList	2		5028160	1					
ANR	5028384	Argument	2		5028160	0					
ANR	5028385	PrimaryExpression	2		5028160	0					
ANR	5028386	Argument	2		5028160	1					
ANR	5028387	PrimaryExpression	2		5028160	0					
ANR	5028388	Argument	write_stderr_to_pipe		5028160	2					
ANR	5028389	Identifier	write_stderr_to_pipe		5028160	0					
ANR	5028390	Argument	"""write_stderr_to_pipe"""		5028160	3					
ANR	5028391	PrimaryExpression	"""write_stderr_to_pipe"""		5028160	0					
ANR	5028392	IfStatement	if ( vmgahp_stderr_tid == - 1 )		5028160	4					
ANR	5028393	Condition	vmgahp_stderr_tid == - 1	282:6:6560:6582	5028160	0	True				
ANR	5028394	EqualityExpression	vmgahp_stderr_tid == - 1		5028160	0		==			
ANR	5028395	Identifier	vmgahp_stderr_tid		5028160	0					
ANR	5028396	UnaryOperationExpression	- 1		5028160	1					
ANR	5028397	UnaryOperator	-		5028160	0					
ANR	5028398	PrimaryExpression	1		5028160	1					
ANR	5028399	CompoundStatement		55:32:1330:1330	5028160	1					
ANR	5028400	ExpressionStatement	"vmprintf ( D_ALWAYS , ""Can't register stderr timer"" )"	283:3:6591:6639	5028160	0	True				
ANR	5028401	CallExpression	"vmprintf ( D_ALWAYS , ""Can't register stderr timer"" )"		5028160	0					
ANR	5028402	Callee	vmprintf		5028160	0					
ANR	5028403	Identifier	vmprintf		5028160	0					
ANR	5028404	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028405	Argument	D_ALWAYS		5028160	0					
ANR	5028406	Identifier	D_ALWAYS		5028160	0					
ANR	5028407	Argument	"""Can't register stderr timer"""		5028160	1					
ANR	5028408	PrimaryExpression	"""Can't register stderr timer"""		5028160	0					
ANR	5028409	ExpressionStatement	DC_Exit ( 1 )	284:3:6644:6654	5028160	1	True				
ANR	5028410	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028411	Callee	DC_Exit		5028160	0					
ANR	5028412	Identifier	DC_Exit		5028160	0					
ANR	5028413	ArgumentList	1		5028160	1					
ANR	5028414	Argument	1		5028160	0					
ANR	5028415	PrimaryExpression	1		5028160	0					
ANR	5028416	ElseStatement	else		5028160	0					
ANR	5028417	CompoundStatement		59:7:1411:1411	5028160	0					
ANR	5028418	ExpressionStatement	vmgahp_stderr_pipe = - 1	287:2:6671:6694	5028160	0	True				
ANR	5028419	AssignmentExpression	vmgahp_stderr_pipe = - 1		5028160	0		=			
ANR	5028420	Identifier	vmgahp_stderr_pipe		5028160	0					
ANR	5028421	UnaryOperationExpression	- 1		5028160	1					
ANR	5028422	UnaryOperator	-		5028160	0					
ANR	5028423	PrimaryExpression	1		5028160	1					
ANR	5028424	ExpressionStatement	vmgahp_stderr_tid = - 1	288:2:6698:6720	5028160	1	True				
ANR	5028425	AssignmentExpression	vmgahp_stderr_tid = - 1		5028160	0		=			
ANR	5028426	Identifier	vmgahp_stderr_tid		5028160	0					
ANR	5028427	UnaryOperationExpression	- 1		5028160	1					
ANR	5028428	UnaryOperator	-		5028160	0					
ANR	5028429	PrimaryExpression	1		5028160	1					
ANR	5028430	ExpressionStatement	"vmprintf ( D_ALWAYS , ""VM-GAHP initialized with run-mode %d\\n"" , vmgahp_mode )"	291:1:6727:6800	5028160	11	True				
ANR	5028431	CallExpression	"vmprintf ( D_ALWAYS , ""VM-GAHP initialized with run-mode %d\\n"" , vmgahp_mode )"		5028160	0					
ANR	5028432	Callee	vmprintf		5028160	0					
ANR	5028433	Identifier	vmprintf		5028160	0					
ANR	5028434	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028435	Argument	D_ALWAYS		5028160	0					
ANR	5028436	Identifier	D_ALWAYS		5028160	0					
ANR	5028437	Argument	"""VM-GAHP initialized with run-mode %d\\n"""		5028160	1					
ANR	5028438	PrimaryExpression	"""VM-GAHP initialized with run-mode %d\\n"""		5028160	0					
ANR	5028439	Argument	vmgahp_mode		5028160	2					
ANR	5028440	Identifier	vmgahp_mode		5028160	0					
ANR	5028441	IfStatement	if ( ( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE ) )		5028160	12					
ANR	5028442	Condition	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )	293:5:6808:6878	5028160	0	True				
ANR	5028443	OrExpression	( vmgahp_mode == VMGAHP_TEST_MODE ) || ( vmgahp_mode == VMGAHP_KILL_MODE )		5028160	0		||			
ANR	5028444	EqualityExpression	vmgahp_mode == VMGAHP_TEST_MODE		5028160	0		==			
ANR	5028445	Identifier	vmgahp_mode		5028160	0					
ANR	5028446	Identifier	VMGAHP_TEST_MODE		5028160	1					
ANR	5028447	EqualityExpression	vmgahp_mode == VMGAHP_KILL_MODE		5028160	1		==			
ANR	5028448	Identifier	vmgahp_mode		5028160	0					
ANR	5028449	Identifier	VMGAHP_KILL_MODE		5028160	1					
ANR	5028450	CompoundStatement		74:2:1780:1801	5028160	1					
ANR	5028451	IdentifierDeclStatement	"char _vmtype [ ] = ""vmtype"" ;"	295:2:6886:6911	5028160	0	True				
ANR	5028452	IdentifierDecl	"_vmtype [ ] = ""vmtype"""		5028160	0					
ANR	5028453	IdentifierDeclType	char [ ]		5028160	0					
ANR	5028454	Identifier	_vmtype		5028160	1					
ANR	5028455	AssignmentExpression	"_vmtype [ ] = ""vmtype"""		5028160	2		=			
ANR	5028456	Identifier	_vmtype		5028160	0					
ANR	5028457	PrimaryExpression	"""vmtype"""		5028160	1					
ANR	5028458	IdentifierDeclStatement	"char _match [ ] = ""match"" ;"	296:2:6915:6938	5028160	1	True				
ANR	5028459	IdentifierDecl	"_match [ ] = ""match"""		5028160	0					
ANR	5028460	IdentifierDeclType	char [ ]		5028160	0					
ANR	5028461	Identifier	_match		5028160	1					
ANR	5028462	AssignmentExpression	"_match [ ] = ""match"""		5028160	2		=			
ANR	5028463	Identifier	_match		5028160	0					
ANR	5028464	PrimaryExpression	"""match"""		5028160	1					
ANR	5028465	IdentifierDeclStatement	"char * opt = NULL , * arg = NULL ;"	299:2:6984:7013	5028160	2	True				
ANR	5028466	IdentifierDecl	* opt = NULL		5028160	0					
ANR	5028467	IdentifierDeclType	char *		5028160	0					
ANR	5028468	Identifier	opt		5028160	1					
ANR	5028469	AssignmentExpression	* opt = NULL		5028160	2		=			
ANR	5028470	Identifier	NULL		5028160	0					
ANR	5028471	Identifier	NULL		5028160	1					
ANR	5028472	IdentifierDecl	* arg = NULL		5028160	1					
ANR	5028473	IdentifierDeclType	char *		5028160	0					
ANR	5028474	Identifier	arg		5028160	1					
ANR	5028475	AssignmentExpression	* arg = NULL		5028160	2		=			
ANR	5028476	Identifier	NULL		5028160	0					
ANR	5028477	Identifier	NULL		5028160	1					
ANR	5028478	IdentifierDeclStatement	int opt_len = 0 ;	300:2:7017:7032	5028160	3	True				
ANR	5028479	IdentifierDecl	opt_len = 0		5028160	0					
ANR	5028480	IdentifierDeclType	int		5028160	0					
ANR	5028481	Identifier	opt_len		5028160	1					
ANR	5028482	AssignmentExpression	opt_len = 0		5028160	2		=			
ANR	5028483	Identifier	opt_len		5028160	0					
ANR	5028484	PrimaryExpression	0		5028160	1					
ANR	5028485	IdentifierDeclStatement	char * * tmp = argv + 2 ;	301:2:7036:7057	5028160	4	True				
ANR	5028486	IdentifierDecl	* * tmp = argv + 2		5028160	0					
ANR	5028487	IdentifierDeclType	char * *		5028160	0					
ANR	5028488	Identifier	tmp		5028160	1					
ANR	5028489	AssignmentExpression	* * tmp = argv + 2		5028160	2		=			
ANR	5028490	Identifier	tmp		5028160	0					
ANR	5028491	AdditiveExpression	argv + 2		5028160	1		+			
ANR	5028492	Identifier	argv		5028160	0					
ANR	5028493	PrimaryExpression	2		5028160	1					
ANR	5028494	ForStatement	for ( tmp ++ ; * tmp ; tmp ++ )		5028160	5					
ANR	5028495	ForInit	tmp ++ ;	303:7:7067:7073	5028160	0	True				
ANR	5028496	PostIncDecOperationExpression	tmp ++		5028160	0					
ANR	5028497	Identifier	tmp		5028160	0					
ANR	5028498	IncDec	++		5028160	1					
ANR	5028499	Condition	* tmp	303:15:7075:7078	5028160	1	True				
ANR	5028500	UnaryOperationExpression	* tmp		5028160	0					
ANR	5028501	UnaryOperator	*		5028160	0					
ANR	5028502	Identifier	tmp		5028160	1					
ANR	5028503	PostIncDecOperationExpression	tmp ++	303:21:7081:7085	5028160	2	True				
ANR	5028504	Identifier	tmp		5028160	0					
ANR	5028505	IncDec	++		5028160	1					
ANR	5028506	CompoundStatement		76:29:1833:1833	5028160	3					
ANR	5028507	ExpressionStatement	opt = tmp [ 0 ]	304:3:7094:7106	5028160	0	True				
ANR	5028508	AssignmentExpression	opt = tmp [ 0 ]		5028160	0		=			
ANR	5028509	Identifier	opt		5028160	0					
ANR	5028510	ArrayIndexing	tmp [ 0 ]		5028160	1					
ANR	5028511	Identifier	tmp		5028160	0					
ANR	5028512	PrimaryExpression	0		5028160	1					
ANR	5028513	ExpressionStatement	arg = tmp [ 1 ]	305:3:7111:7123	5028160	1	True				
ANR	5028514	AssignmentExpression	arg = tmp [ 1 ]		5028160	0		=			
ANR	5028515	Identifier	arg		5028160	0					
ANR	5028516	ArrayIndexing	tmp [ 1 ]		5028160	1					
ANR	5028517	Identifier	tmp		5028160	0					
ANR	5028518	PrimaryExpression	1		5028160	1					
ANR	5028519	ExpressionStatement	opt_len = strlen ( opt )	306:3:7128:7149	5028160	2	True				
ANR	5028520	AssignmentExpression	opt_len = strlen ( opt )		5028160	0		=			
ANR	5028521	Identifier	opt_len		5028160	0					
ANR	5028522	CallExpression	strlen ( opt )		5028160	1					
ANR	5028523	Callee	strlen		5028160	0					
ANR	5028524	Identifier	strlen		5028160	0					
ANR	5028525	ArgumentList	opt		5028160	1					
ANR	5028526	Argument	opt		5028160	0					
ANR	5028527	Identifier	opt		5028160	0					
ANR	5028528	IfStatement	"if ( ! strncmp ( opt , _vmtype , opt_len ) )"		5028160	3					
ANR	5028529	Condition	"! strncmp ( opt , _vmtype , opt_len )"	308:7:7159:7190	5028160	0	True				
ANR	5028530	UnaryOperationExpression	"! strncmp ( opt , _vmtype , opt_len )"		5028160	0					
ANR	5028531	UnaryOperator	!		5028160	0					
ANR	5028532	CallExpression	"strncmp ( opt , _vmtype , opt_len )"		5028160	1					
ANR	5028533	Callee	strncmp		5028160	0					
ANR	5028534	Identifier	strncmp		5028160	0					
ANR	5028535	ArgumentList	opt		5028160	1					
ANR	5028536	Argument	opt		5028160	0					
ANR	5028537	Identifier	opt		5028160	0					
ANR	5028538	Argument	_vmtype		5028160	1					
ANR	5028539	Identifier	_vmtype		5028160	0					
ANR	5028540	Argument	opt_len		5028160	2					
ANR	5028541	Identifier	opt_len		5028160	0					
ANR	5028542	CompoundStatement		81:42:1938:1938	5028160	1					
ANR	5028543	IfStatement	if ( ! arg )		5028160	0					
ANR	5028544	Condition	! arg	310:8:7219:7222	5028160	0	True				
ANR	5028545	UnaryOperationExpression	! arg		5028160	0					
ANR	5028546	UnaryOperator	!		5028160	0					
ANR	5028547	Identifier	arg		5028160	1					
ANR	5028548	CompoundStatement		83:15:1970:1970	5028160	1					
ANR	5028549	ExpressionStatement	usage ( argv [ 0 ] )	311:5:7233:7247	5028160	0	True				
ANR	5028550	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028551	Callee	usage		5028160	0					
ANR	5028552	Identifier	usage		5028160	0					
ANR	5028553	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028554	Argument	argv [ 0 ]		5028160	0					
ANR	5028555	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028556	Identifier	argv		5028160	0					
ANR	5028557	PrimaryExpression	0		5028160	1					
ANR	5028558	ExpressionStatement	vmtype = arg	313:4:7259:7271	5028160	1	True				
ANR	5028559	AssignmentExpression	vmtype = arg		5028160	0		=			
ANR	5028560	Identifier	vmtype		5028160	0					
ANR	5028561	Identifier	arg		5028160	1					
ANR	5028562	ExpressionStatement	tmp ++	314:4:7277:7282	5028160	2	True				
ANR	5028563	PostIncDecOperationExpression	tmp ++		5028160	0					
ANR	5028564	Identifier	tmp		5028160	0					
ANR	5028565	IncDec	++		5028160	1					
ANR	5028566	ContinueStatement	continue ;	315:4:7331:7339	5028160	3	True				
ANR	5028567	IfStatement	"if ( ! strncmp ( opt , _match , opt_len ) )"		5028160	4					
ANR	5028568	Condition	"! strncmp ( opt , _match , opt_len )"	318:7:7354:7384	5028160	0	True				
ANR	5028569	UnaryOperationExpression	"! strncmp ( opt , _match , opt_len )"		5028160	0					
ANR	5028570	UnaryOperator	!		5028160	0					
ANR	5028571	CallExpression	"strncmp ( opt , _match , opt_len )"		5028160	1					
ANR	5028572	Callee	strncmp		5028160	0					
ANR	5028573	Identifier	strncmp		5028160	0					
ANR	5028574	ArgumentList	opt		5028160	1					
ANR	5028575	Argument	opt		5028160	0					
ANR	5028576	Identifier	opt		5028160	0					
ANR	5028577	Argument	_match		5028160	1					
ANR	5028578	Identifier	_match		5028160	0					
ANR	5028579	Argument	opt_len		5028160	2					
ANR	5028580	Identifier	opt_len		5028160	0					
ANR	5028581	CompoundStatement		91:41:2132:2132	5028160	1					
ANR	5028582	IfStatement	if ( ! arg )		5028160	0					
ANR	5028583	Condition	! arg	320:8:7418:7421	5028160	0	True				
ANR	5028584	UnaryOperationExpression	! arg		5028160	0					
ANR	5028585	UnaryOperator	!		5028160	0					
ANR	5028586	Identifier	arg		5028160	1					
ANR	5028587	CompoundStatement		93:15:2169:2169	5028160	1					
ANR	5028588	ExpressionStatement	usage ( argv [ 0 ] )	321:5:7432:7446	5028160	0	True				
ANR	5028589	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028590	Callee	usage		5028160	0					
ANR	5028591	Identifier	usage		5028160	0					
ANR	5028592	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028593	Argument	argv [ 0 ]		5028160	0					
ANR	5028594	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028595	Identifier	argv		5028160	0					
ANR	5028596	PrimaryExpression	0		5028160	1					
ANR	5028597	ExpressionStatement	matchstring = arg	323:4:7458:7475	5028160	1	True				
ANR	5028598	AssignmentExpression	matchstring = arg		5028160	0		=			
ANR	5028599	Identifier	matchstring		5028160	0					
ANR	5028600	Identifier	arg		5028160	1					
ANR	5028601	ExpressionStatement	tmp ++	324:4:7481:7486	5028160	2	True				
ANR	5028602	PostIncDecOperationExpression	tmp ++		5028160	0					
ANR	5028603	Identifier	tmp		5028160	0					
ANR	5028604	IncDec	++		5028160	1					
ANR	5028605	ContinueStatement	continue ;	325:4:7535:7543	5028160	3	True				
ANR	5028606	ExpressionStatement	usage ( argv [ 0 ] )	328:3:7554:7568	5028160	5	True				
ANR	5028607	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028608	Callee	usage		5028160	0					
ANR	5028609	Identifier	usage		5028160	0					
ANR	5028610	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028611	Argument	argv [ 0 ]		5028160	0					
ANR	5028612	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028613	Identifier	argv		5028160	0					
ANR	5028614	PrimaryExpression	0		5028160	1					
ANR	5028615	IfStatement	if ( vmgahp_mode == VMGAHP_TEST_MODE )		5028160	6					
ANR	5028616	Condition	vmgahp_mode == VMGAHP_TEST_MODE	331:6:7581:7611	5028160	0	True				
ANR	5028617	EqualityExpression	vmgahp_mode == VMGAHP_TEST_MODE		5028160	0		==			
ANR	5028618	Identifier	vmgahp_mode		5028160	0					
ANR	5028619	Identifier	VMGAHP_TEST_MODE		5028160	1					
ANR	5028620	CompoundStatement		104:40:2359:2359	5028160	1					
ANR	5028621	IfStatement	if ( vmtype . Length ( ) == 0 )		5028160	0					
ANR	5028622	Condition	vmtype . Length ( ) == 0	332:7:7624:7643	5028160	0	True				
ANR	5028623	EqualityExpression	vmtype . Length ( ) == 0		5028160	0		==			
ANR	5028624	CallExpression	vmtype . Length ( )		5028160	0					
ANR	5028625	Callee	vmtype . Length		5028160	0					
ANR	5028626	MemberAccess	vmtype . Length		5028160	0					
ANR	5028627	Identifier	vmtype		5028160	0					
ANR	5028628	Identifier	Length		5028160	1					
ANR	5028629	ArgumentList			5028160	1					
ANR	5028630	PrimaryExpression	0		5028160	1					
ANR	5028631	CompoundStatement		105:30:2391:2391	5028160	1					
ANR	5028632	ExpressionStatement	usage ( argv [ 0 ] )	333:4:7653:7667	5028160	0	True				
ANR	5028633	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028634	Callee	usage		5028160	0					
ANR	5028635	Identifier	usage		5028160	0					
ANR	5028636	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028637	Argument	argv [ 0 ]		5028160	0					
ANR	5028638	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028639	Identifier	argv		5028160	0					
ANR	5028640	PrimaryExpression	0		5028160	1					
ANR	5028641	ElseStatement	else		5028160	0					
ANR	5028642	IfStatement	if ( vmgahp_mode == VMGAHP_KILL_MODE )		5028160	0					
ANR	5028643	Condition	vmgahp_mode == VMGAHP_KILL_MODE	335:12:7686:7716	5028160	0	True				
ANR	5028644	EqualityExpression	vmgahp_mode == VMGAHP_KILL_MODE		5028160	0		==			
ANR	5028645	Identifier	vmgahp_mode		5028160	0					
ANR	5028646	Identifier	VMGAHP_KILL_MODE		5028160	1					
ANR	5028647	CompoundStatement		108:46:2464:2464	5028160	1					
ANR	5028648	IfStatement	if ( ( vmtype . Length ( ) == 0 ) || ( matchstring . Length ( ) == 0 ) )		5028160	0					
ANR	5028649	Condition	( vmtype . Length ( ) == 0 ) || ( matchstring . Length ( ) == 0 )	336:7:7729:7792	5028160	0	True				
ANR	5028650	OrExpression	( vmtype . Length ( ) == 0 ) || ( matchstring . Length ( ) == 0 )		5028160	0		||			
ANR	5028651	EqualityExpression	vmtype . Length ( ) == 0		5028160	0		==			
ANR	5028652	CallExpression	vmtype . Length ( )		5028160	0					
ANR	5028653	Callee	vmtype . Length		5028160	0					
ANR	5028654	MemberAccess	vmtype . Length		5028160	0					
ANR	5028655	Identifier	vmtype		5028160	0					
ANR	5028656	Identifier	Length		5028160	1					
ANR	5028657	ArgumentList			5028160	1					
ANR	5028658	PrimaryExpression	0		5028160	1					
ANR	5028659	EqualityExpression	matchstring . Length ( ) == 0		5028160	1		==			
ANR	5028660	CallExpression	matchstring . Length ( )		5028160	0					
ANR	5028661	Callee	matchstring . Length		5028160	0					
ANR	5028662	MemberAccess	matchstring . Length		5028160	0					
ANR	5028663	Identifier	matchstring		5028160	0					
ANR	5028664	Identifier	Length		5028160	1					
ANR	5028665	ArgumentList			5028160	1					
ANR	5028666	PrimaryExpression	0		5028160	1					
ANR	5028667	CompoundStatement		111:3:2543:2543	5028160	1					
ANR	5028668	ExpressionStatement	usage ( argv [ 0 ] )	339:4:7805:7819	5028160	0	True				
ANR	5028669	CallExpression	usage ( argv [ 0 ] )		5028160	0					
ANR	5028670	Callee	usage		5028160	0					
ANR	5028671	Identifier	usage		5028160	0					
ANR	5028672	ArgumentList	argv [ 0 ]		5028160	1					
ANR	5028673	Argument	argv [ 0 ]		5028160	0					
ANR	5028674	ArrayIndexing	argv [ 0 ]		5028160	0					
ANR	5028675	Identifier	argv		5028160	0					
ANR	5028676	PrimaryExpression	0		5028160	1					
ANR	5028677	ElseStatement	else		5028160	0					
ANR	5028678	CompoundStatement		115:7:2581:2581	5028160	0					
ANR	5028679	ExpressionStatement	"vmtype = getenv ( ""VMGAHP_VMTYPE"" )"	343:2:7841:7873	5028160	0	True				
ANR	5028680	AssignmentExpression	"vmtype = getenv ( ""VMGAHP_VMTYPE"" )"		5028160	0		=			
ANR	5028681	Identifier	vmtype		5028160	0					
ANR	5028682	CallExpression	"getenv ( ""VMGAHP_VMTYPE"" )"		5028160	1					
ANR	5028683	Callee	getenv		5028160	0					
ANR	5028684	Identifier	getenv		5028160	0					
ANR	5028685	ArgumentList	"""VMGAHP_VMTYPE"""		5028160	1					
ANR	5028686	Argument	"""VMGAHP_VMTYPE"""		5028160	0					
ANR	5028687	PrimaryExpression	"""VMGAHP_VMTYPE"""		5028160	0					
ANR	5028688	IfStatement	if ( vmtype . IsEmpty ( ) )		5028160	1					
ANR	5028689	Condition	vmtype . IsEmpty ( )	344:6:7881:7896	5028160	0	True				
ANR	5028690	CallExpression	vmtype . IsEmpty ( )		5028160	0					
ANR	5028691	Callee	vmtype . IsEmpty		5028160	0					
ANR	5028692	MemberAccess	vmtype . IsEmpty		5028160	0					
ANR	5028693	Identifier	vmtype		5028160	0					
ANR	5028694	Identifier	IsEmpty		5028160	1					
ANR	5028695	ArgumentList			5028160	1					
ANR	5028696	CompoundStatement		117:25:2644:2644	5028160	1					
ANR	5028697	ExpressionStatement	"vmprintf ( D_ALWAYS , ""cannot find vmtype\\n"" )"	345:3:7905:7947	5028160	0	True				
ANR	5028698	CallExpression	"vmprintf ( D_ALWAYS , ""cannot find vmtype\\n"" )"		5028160	0					
ANR	5028699	Callee	vmprintf		5028160	0					
ANR	5028700	Identifier	vmprintf		5028160	0					
ANR	5028701	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028702	Argument	D_ALWAYS		5028160	0					
ANR	5028703	Identifier	D_ALWAYS		5028160	0					
ANR	5028704	Argument	"""cannot find vmtype\\n"""		5028160	1					
ANR	5028705	PrimaryExpression	"""cannot find vmtype\\n"""		5028160	0					
ANR	5028706	ExpressionStatement	DC_Exit ( 1 )	346:3:7952:7962	5028160	1	True				
ANR	5028707	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028708	Callee	DC_Exit		5028160	0					
ANR	5028709	Identifier	DC_Exit		5028160	0					
ANR	5028710	ArgumentList	1		5028160	1					
ANR	5028711	Argument	1		5028160	0					
ANR	5028712	PrimaryExpression	1		5028160	0					
ANR	5028713	ExpressionStatement	"workingdir = getenv ( ""VMGAHP_WORKING_DIR"" )"	349:2:7971:8012	5028160	2	True				
ANR	5028714	AssignmentExpression	"workingdir = getenv ( ""VMGAHP_WORKING_DIR"" )"		5028160	0		=			
ANR	5028715	Identifier	workingdir		5028160	0					
ANR	5028716	CallExpression	"getenv ( ""VMGAHP_WORKING_DIR"" )"		5028160	1					
ANR	5028717	Callee	getenv		5028160	0					
ANR	5028718	Identifier	getenv		5028160	0					
ANR	5028719	ArgumentList	"""VMGAHP_WORKING_DIR"""		5028160	1					
ANR	5028720	Argument	"""VMGAHP_WORKING_DIR"""		5028160	0					
ANR	5028721	PrimaryExpression	"""VMGAHP_WORKING_DIR"""		5028160	0					
ANR	5028722	IfStatement	if ( workingdir . IsEmpty ( ) )		5028160	3					
ANR	5028723	Condition	workingdir . IsEmpty ( )	350:6:8020:8039	5028160	0	True				
ANR	5028724	CallExpression	workingdir . IsEmpty ( )		5028160	0					
ANR	5028725	Callee	workingdir . IsEmpty		5028160	0					
ANR	5028726	MemberAccess	workingdir . IsEmpty		5028160	0					
ANR	5028727	Identifier	workingdir		5028160	0					
ANR	5028728	Identifier	IsEmpty		5028160	1					
ANR	5028729	ArgumentList			5028160	1					
ANR	5028730	CompoundStatement		123:29:2787:2787	5028160	1					
ANR	5028731	ExpressionStatement	"vmprintf ( D_ALWAYS , ""cannot find vmgahp working dir\\n"" )"	351:3:8048:8102	5028160	0	True				
ANR	5028732	CallExpression	"vmprintf ( D_ALWAYS , ""cannot find vmgahp working dir\\n"" )"		5028160	0					
ANR	5028733	Callee	vmprintf		5028160	0					
ANR	5028734	Identifier	vmprintf		5028160	0					
ANR	5028735	ArgumentList	D_ALWAYS		5028160	1					
ANR	5028736	Argument	D_ALWAYS		5028160	0					
ANR	5028737	Identifier	D_ALWAYS		5028160	0					
ANR	5028738	Argument	"""cannot find vmgahp working dir\\n"""		5028160	1					
ANR	5028739	PrimaryExpression	"""cannot find vmgahp working dir\\n"""		5028160	0					
ANR	5028740	ExpressionStatement	DC_Exit ( 1 )	352:3:8107:8117	5028160	1	True				
ANR	5028741	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028742	Callee	DC_Exit		5028160	0					
ANR	5028743	Identifier	DC_Exit		5028160	0					
ANR	5028744	ArgumentList	1		5028160	1					
ANR	5028745	Argument	1		5028160	0					
ANR	5028746	PrimaryExpression	1		5028160	0					
ANR	5028747	ExpressionStatement	Init ( )	356:1:8128:8134	5028160	13	True				
ANR	5028748	CallExpression	Init ( )		5028160	0					
ANR	5028749	Callee	Init		5028160	0					
ANR	5028750	Identifier	Init		5028160	0					
ANR	5028751	ArgumentList			5028160	1					
ANR	5028752	ExpressionStatement	Register ( )	357:1:8137:8147	5028160	14	True				
ANR	5028753	CallExpression	Register ( )		5028160	0					
ANR	5028754	Callee	Register		5028160	0					
ANR	5028755	Identifier	Register		5028160	0					
ANR	5028756	ArgumentList			5028160	1					
ANR	5028757	ExpressionStatement	Reconfig ( )	358:1:8150:8160	5028160	15	True				
ANR	5028758	CallExpression	Reconfig ( )		5028160	0					
ANR	5028759	Callee	Reconfig		5028160	0					
ANR	5028760	Identifier	Reconfig		5028160	0					
ANR	5028761	ArgumentList			5028160	1					
ANR	5028762	ExpressionStatement	vmtype . lower_case ( )	361:1:8195:8214	5028160	16	True				
ANR	5028763	CallExpression	vmtype . lower_case ( )		5028160	0					
ANR	5028764	Callee	vmtype . lower_case		5028160	0					
ANR	5028765	MemberAccess	vmtype . lower_case		5028160	0					
ANR	5028766	Identifier	vmtype		5028160	0					
ANR	5028767	Identifier	lower_case		5028160	1					
ANR	5028768	ArgumentList			5028160	1					
ANR	5028769	IfStatement	if ( verify_vm_type ( vmtype . Value ( ) ) == false )		5028160	17					
ANR	5028770	Condition	verify_vm_type ( vmtype . Value ( ) ) == false	364:5:8280:8318	5028160	0	True				
ANR	5028771	EqualityExpression	verify_vm_type ( vmtype . Value ( ) ) == false		5028160	0		==			
ANR	5028772	CallExpression	verify_vm_type ( vmtype . Value ( ) )		5028160	0					
ANR	5028773	Callee	verify_vm_type		5028160	0					
ANR	5028774	Identifier	verify_vm_type		5028160	0					
ANR	5028775	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028776	Argument	vmtype . Value ( )		5028160	0					
ANR	5028777	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028778	Callee	vmtype . Value		5028160	0					
ANR	5028779	MemberAccess	vmtype . Value		5028160	0					
ANR	5028780	Identifier	vmtype		5028160	0					
ANR	5028781	Identifier	Value		5028160	1					
ANR	5028782	ArgumentList			5028160	1					
ANR	5028783	Identifier	false		5028160	1					
ANR	5028784	CompoundStatement		137:47:3066:3066	5028160	1					
ANR	5028785	ExpressionStatement	DC_Exit ( 1 )	365:2:8326:8336	5028160	0	True				
ANR	5028786	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028787	Callee	DC_Exit		5028160	0					
ANR	5028788	Identifier	DC_Exit		5028160	0					
ANR	5028789	ArgumentList	1		5028160	1					
ANR	5028790	Argument	1		5028160	0					
ANR	5028791	PrimaryExpression	1		5028160	0					
ANR	5028792	ExpressionStatement	initialize_uids ( )	368:1:8343:8360	5028160	18	True				
ANR	5028793	CallExpression	initialize_uids ( )		5028160	0					
ANR	5028794	Callee	initialize_uids		5028160	0					
ANR	5028795	Identifier	initialize_uids		5028160	0					
ANR	5028796	ArgumentList			5028160	1					
ANR	5028797	IfStatement	"if ( ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 ) || ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 ) )"		5028160	19					
ANR	5028798	Condition	"( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 ) || ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 )"	371:5:8424:8541	5028160	0	True				
ANR	5028799	OrExpression	"( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 ) || ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5028160	0		||			
ANR	5028800	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5028160	0		==			
ANR	5028801	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5028160	0					
ANR	5028802	Callee	strcasecmp		5028160	0					
ANR	5028803	Identifier	strcasecmp		5028160	0					
ANR	5028804	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028805	Argument	vmtype . Value ( )		5028160	0					
ANR	5028806	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028807	Callee	vmtype . Value		5028160	0					
ANR	5028808	MemberAccess	vmtype . Value		5028160	0					
ANR	5028809	Identifier	vmtype		5028160	0					
ANR	5028810	Identifier	Value		5028160	1					
ANR	5028811	ArgumentList			5028160	1					
ANR	5028812	Argument	CONDOR_VM_UNIVERSE_XEN		5028160	1					
ANR	5028813	Identifier	CONDOR_VM_UNIVERSE_XEN		5028160	0					
ANR	5028814	PrimaryExpression	0		5028160	1					
ANR	5028815	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5028160	1		==			
ANR	5028816	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5028160	0					
ANR	5028817	Callee	strcasecmp		5028160	0					
ANR	5028818	Identifier	strcasecmp		5028160	0					
ANR	5028819	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028820	Argument	vmtype . Value ( )		5028160	0					
ANR	5028821	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028822	Callee	vmtype . Value		5028160	0					
ANR	5028823	MemberAccess	vmtype . Value		5028160	0					
ANR	5028824	Identifier	vmtype		5028160	0					
ANR	5028825	Identifier	Value		5028160	1					
ANR	5028826	ArgumentList			5028160	1					
ANR	5028827	Argument	CONDOR_VM_UNIVERSE_KVM		5028160	1					
ANR	5028828	Identifier	CONDOR_VM_UNIVERSE_KVM		5028160	0					
ANR	5028829	PrimaryExpression	0		5028160	1					
ANR	5028830	CompoundStatement		144:125:3288:3288	5028160	1					
ANR	5028831	IfStatement	if ( ! canSwitchUid ( ) )		5028160	0					
ANR	5028832	Condition	! canSwitchUid ( )	373:6:8586:8600	5028160	0	True				
ANR	5028833	UnaryOperationExpression	! canSwitchUid ( )		5028160	0					
ANR	5028834	UnaryOperator	!		5028160	0					
ANR	5028835	CallExpression	canSwitchUid ( )		5028160	1					
ANR	5028836	Callee	canSwitchUid		5028160	0					
ANR	5028837	Identifier	canSwitchUid		5028160	0					
ANR	5028838	ArgumentList			5028160	1					
ANR	5028839	CompoundStatement		146:24:3348:3348	5028160	1					
ANR	5028840	Statement	vmprintf	374:3:8609:8616	5028160	0	True				
ANR	5028841	Statement	(	374:11:8617:8617	5028160	1	True				
ANR	5028842	Statement	D_ALWAYS	374:12:8618:8625	5028160	2	True				
ANR	5028843	Statement	","	374:20:8626:8626	5028160	3	True				
ANR	5028844	Statement	"""VMGahp server for Xen or KVM requires """	374:22:8628:8667	5028160	4	True				
ANR	5028845	Statement	"""root privilege\\n"""	375:5:8674:8691	5028160	5	True				
ANR	5028846	Statement	)	375:23:8692:8692	5028160	6	True				
ANR	5028847	ExpressionStatement		375:24:8693:8693	5028160	7	True				
ANR	5028848	ExpressionStatement	DC_Exit ( 1 )	376:3:8698:8708	5028160	8	True				
ANR	5028849	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028850	Callee	DC_Exit		5028160	0					
ANR	5028851	Identifier	DC_Exit		5028160	0					
ANR	5028852	ArgumentList	1		5028160	1					
ANR	5028853	Argument	1		5028160	0					
ANR	5028854	PrimaryExpression	1		5028160	0					
ANR	5028855	Statement	VMGahpConfig	382:1:8792:8803	5028160	20	True				
ANR	5028856	Statement	*	382:14:8805:8805	5028160	21	True				
ANR	5028857	Statement	gahpconfig	382:15:8806:8815	5028160	22	True				
ANR	5028858	Statement	=	382:26:8817:8817	5028160	23	True				
ANR	5028859	Statement	new	382:28:8819:8821	5028160	24	True				
ANR	5028860	ExpressionStatement	VMGahpConfig	382:32:8823:8835	5028160	25	True				
ANR	5028861	Identifier	VMGahpConfig		5028160	0					
ANR	5028862	ExpressionStatement	ASSERT ( gahpconfig )	383:1:8838:8856	5028160	26	True				
ANR	5028863	CallExpression	ASSERT ( gahpconfig )		5028160	0					
ANR	5028864	Callee	ASSERT		5028160	0					
ANR	5028865	Identifier	ASSERT		5028160	0					
ANR	5028866	ArgumentList	gahpconfig		5028160	1					
ANR	5028867	Argument	gahpconfig		5028160	0					
ANR	5028868	Identifier	gahpconfig		5028160	0					
ANR	5028869	ExpressionStatement	set_root_priv ( )	384:1:8859:8874	5028160	27	True				
ANR	5028870	CallExpression	set_root_priv ( )		5028160	0					
ANR	5028871	Callee	set_root_priv		5028160	0					
ANR	5028872	Identifier	set_root_priv		5028160	0					
ANR	5028873	ArgumentList			5028160	1					
ANR	5028874	IfStatement	if ( gahpconfig -> init ( vmtype . Value ( ) ) == false )		5028160	28					
ANR	5028875	Condition	gahpconfig -> init ( vmtype . Value ( ) ) == false	385:5:8881:8921	5028160	0	True				
ANR	5028876	EqualityExpression	gahpconfig -> init ( vmtype . Value ( ) ) == false		5028160	0		==			
ANR	5028877	CallExpression	gahpconfig -> init ( vmtype . Value ( ) )		5028160	0					
ANR	5028878	Callee	gahpconfig -> init		5028160	0					
ANR	5028879	PtrMemberAccess	gahpconfig -> init		5028160	0					
ANR	5028880	Identifier	gahpconfig		5028160	0					
ANR	5028881	Identifier	init		5028160	1					
ANR	5028882	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028883	Argument	vmtype . Value ( )		5028160	0					
ANR	5028884	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028885	Callee	vmtype . Value		5028160	0					
ANR	5028886	MemberAccess	vmtype . Value		5028160	0					
ANR	5028887	Identifier	vmtype		5028160	0					
ANR	5028888	Identifier	Value		5028160	1					
ANR	5028889	ArgumentList			5028160	1					
ANR	5028890	Identifier	false		5028160	1					
ANR	5028891	CompoundStatement		158:49:3669:3669	5028160	1					
ANR	5028892	ExpressionStatement	DC_Exit ( 1 )	386:2:8929:8939	5028160	0	True				
ANR	5028893	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028894	Callee	DC_Exit		5028160	0					
ANR	5028895	Identifier	DC_Exit		5028160	0					
ANR	5028896	ArgumentList	1		5028160	1					
ANR	5028897	Argument	1		5028160	0					
ANR	5028898	PrimaryExpression	1		5028160	0					
ANR	5028899	ExpressionStatement	set_condor_priv ( )	389:1:8946:8963	5028160	29	True				
ANR	5028900	CallExpression	set_condor_priv ( )		5028160	0					
ANR	5028901	Callee	set_condor_priv		5028160	0					
ANR	5028902	Identifier	set_condor_priv		5028160	0					
ANR	5028903	ArgumentList			5028160	1					
ANR	5028904	IfStatement	"if ( ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 ) )"		5028160	30					
ANR	5028905	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"	399:5:9407:9463	5028160	0	True				
ANR	5028906	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5028160	0		==			
ANR	5028907	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5028160	0					
ANR	5028908	Callee	strcasecmp		5028160	0					
ANR	5028909	Identifier	strcasecmp		5028160	0					
ANR	5028910	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028911	Argument	vmtype . Value ( )		5028160	0					
ANR	5028912	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028913	Callee	vmtype . Value		5028160	0					
ANR	5028914	MemberAccess	vmtype . Value		5028160	0					
ANR	5028915	Identifier	vmtype		5028160	0					
ANR	5028916	Identifier	Value		5028160	1					
ANR	5028917	ArgumentList			5028160	1					
ANR	5028918	Argument	CONDOR_VM_UNIVERSE_XEN		5028160	1					
ANR	5028919	Identifier	CONDOR_VM_UNIVERSE_XEN		5028160	0					
ANR	5028920	PrimaryExpression	0		5028160	1					
ANR	5028921	CompoundStatement		173:2:4214:4247	5028160	1					
ANR	5028922	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	400:2:9470:9503	5028160	0	True				
ANR	5028923	IdentifierDecl	priv = set_root_priv ( )		5028160	0					
ANR	5028924	IdentifierDeclType	priv_state		5028160	0					
ANR	5028925	Identifier	priv		5028160	1					
ANR	5028926	AssignmentExpression	priv = set_root_priv ( )		5028160	2		=			
ANR	5028927	Identifier	priv		5028160	0					
ANR	5028928	CallExpression	set_root_priv ( )		5028160	1					
ANR	5028929	Callee	set_root_priv		5028160	0					
ANR	5028930	Identifier	set_root_priv		5028160	0					
ANR	5028931	ArgumentList			5028160	1					
ANR	5028932	IfStatement	if ( XenType :: checkXenParams ( gahpconfig ) == false )		5028160	1					
ANR	5028933	Condition	XenType :: checkXenParams ( gahpconfig ) == false	401:6:9511:9554	5028160	0	True				
ANR	5028934	EqualityExpression	XenType :: checkXenParams ( gahpconfig ) == false		5028160	0		==			
ANR	5028935	CallExpression	XenType :: checkXenParams ( gahpconfig )		5028160	0					
ANR	5028936	Callee	XenType :: checkXenParams		5028160	0					
ANR	5028937	Identifier	XenType :: checkXenParams		5028160	0					
ANR	5028938	ArgumentList	gahpconfig		5028160	1					
ANR	5028939	Argument	gahpconfig		5028160	0					
ANR	5028940	Identifier	gahpconfig		5028160	0					
ANR	5028941	Identifier	false		5028160	1					
ANR	5028942	CompoundStatement		174:53:4302:4302	5028160	1					
ANR	5028943	ExpressionStatement	DC_Exit ( 1 )	402:3:9563:9573	5028160	0	True				
ANR	5028944	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028945	Callee	DC_Exit		5028160	0					
ANR	5028946	Identifier	DC_Exit		5028160	0					
ANR	5028947	ArgumentList	1		5028160	1					
ANR	5028948	Argument	1		5028160	0					
ANR	5028949	PrimaryExpression	1		5028160	0					
ANR	5028950	ExpressionStatement	set_priv ( priv )	404:2:9581:9595	5028160	2	True				
ANR	5028951	CallExpression	set_priv ( priv )		5028160	0					
ANR	5028952	Callee	set_priv		5028160	0					
ANR	5028953	Identifier	set_priv		5028160	0					
ANR	5028954	ArgumentList	priv		5028160	1					
ANR	5028955	Argument	priv		5028160	0					
ANR	5028956	Identifier	priv		5028160	0					
ANR	5028957	ElseStatement	else		5028160	0					
ANR	5028958	IfStatement	"if ( ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 ) )"		5028160	0					
ANR	5028959	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"	405:11:9608:9664	5028160	0	True				
ANR	5028960	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5028160	0		==			
ANR	5028961	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5028160	0					
ANR	5028962	Callee	strcasecmp		5028160	0					
ANR	5028963	Identifier	strcasecmp		5028160	0					
ANR	5028964	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5028965	Argument	vmtype . Value ( )		5028160	0					
ANR	5028966	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5028967	Callee	vmtype . Value		5028160	0					
ANR	5028968	MemberAccess	vmtype . Value		5028160	0					
ANR	5028969	Identifier	vmtype		5028160	0					
ANR	5028970	Identifier	Value		5028160	1					
ANR	5028971	ArgumentList			5028160	1					
ANR	5028972	Argument	CONDOR_VM_UNIVERSE_KVM		5028160	1					
ANR	5028973	Identifier	CONDOR_VM_UNIVERSE_KVM		5028160	0					
ANR	5028974	PrimaryExpression	0		5028160	1					
ANR	5028975	CompoundStatement		179:16:4429:4462	5028160	1					
ANR	5028976	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	406:16:9685:9718	5028160	0	True				
ANR	5028977	IdentifierDecl	priv = set_root_priv ( )		5028160	0					
ANR	5028978	IdentifierDeclType	priv_state		5028160	0					
ANR	5028979	Identifier	priv		5028160	1					
ANR	5028980	AssignmentExpression	priv = set_root_priv ( )		5028160	2		=			
ANR	5028981	Identifier	priv		5028160	0					
ANR	5028982	CallExpression	set_root_priv ( )		5028160	1					
ANR	5028983	Callee	set_root_priv		5028160	0					
ANR	5028984	Identifier	set_root_priv		5028160	0					
ANR	5028985	ArgumentList			5028160	1					
ANR	5028986	IfStatement	if ( KVMType :: checkXenParams ( gahpconfig ) == false )		5028160	1					
ANR	5028987	Condition	KVMType :: checkXenParams ( gahpconfig ) == false	407:6:9726:9769	5028160	0	True				
ANR	5028988	EqualityExpression	KVMType :: checkXenParams ( gahpconfig ) == false		5028160	0		==			
ANR	5028989	CallExpression	KVMType :: checkXenParams ( gahpconfig )		5028160	0					
ANR	5028990	Callee	KVMType :: checkXenParams		5028160	0					
ANR	5028991	Identifier	KVMType :: checkXenParams		5028160	0					
ANR	5028992	ArgumentList	gahpconfig		5028160	1					
ANR	5028993	Argument	gahpconfig		5028160	0					
ANR	5028994	Identifier	gahpconfig		5028160	0					
ANR	5028995	Identifier	false		5028160	1					
ANR	5028996	CompoundStatement		180:53:4517:4517	5028160	1					
ANR	5028997	ExpressionStatement	DC_Exit ( 1 )	408:3:9778:9788	5028160	0	True				
ANR	5028998	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5028999	Callee	DC_Exit		5028160	0					
ANR	5029000	Identifier	DC_Exit		5028160	0					
ANR	5029001	ArgumentList	1		5028160	1					
ANR	5029002	Argument	1		5028160	0					
ANR	5029003	PrimaryExpression	1		5028160	0					
ANR	5029004	ExpressionStatement	set_priv ( priv )	410:2:9796:9810	5028160	2	True				
ANR	5029005	CallExpression	set_priv ( priv )		5028160	0					
ANR	5029006	Callee	set_priv		5028160	0					
ANR	5029007	Identifier	set_priv		5028160	0					
ANR	5029008	ArgumentList	priv		5028160	1					
ANR	5029009	Argument	priv		5028160	0					
ANR	5029010	Identifier	priv		5028160	0					
ANR	5029011	ElseStatement	else		5028160	0					
ANR	5029012	IfStatement	"if ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5028160	0					
ANR	5029013	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	413:5:9832:9889	5028160	0	True				
ANR	5029014	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5028160	0		==			
ANR	5029015	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE )"		5028160	0					
ANR	5029016	Callee	strcasecmp		5028160	0					
ANR	5029017	Identifier	strcasecmp		5028160	0					
ANR	5029018	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029019	Argument	vmtype . Value ( )		5028160	0					
ANR	5029020	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029021	Callee	vmtype . Value		5028160	0					
ANR	5029022	MemberAccess	vmtype . Value		5028160	0					
ANR	5029023	Identifier	vmtype		5028160	0					
ANR	5029024	Identifier	Value		5028160	1					
ANR	5029025	ArgumentList			5028160	1					
ANR	5029026	Argument	CONDOR_VM_UNIVERSE_VMWARE		5028160	1					
ANR	5029027	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5028160	0					
ANR	5029028	PrimaryExpression	0		5028160	1					
ANR	5029029	CompoundStatement		187:2:4641:4674	5028160	1					
ANR	5029030	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	414:2:9897:9930	5028160	0	True				
ANR	5029031	IdentifierDecl	priv = set_user_priv ( )		5028160	0					
ANR	5029032	IdentifierDeclType	priv_state		5028160	0					
ANR	5029033	Identifier	priv		5028160	1					
ANR	5029034	AssignmentExpression	priv = set_user_priv ( )		5028160	2		=			
ANR	5029035	Identifier	priv		5028160	0					
ANR	5029036	CallExpression	set_user_priv ( )		5028160	1					
ANR	5029037	Callee	set_user_priv		5028160	0					
ANR	5029038	Identifier	set_user_priv		5028160	0					
ANR	5029039	ArgumentList			5028160	1					
ANR	5029040	IfStatement	if ( VMwareType :: checkVMwareParams ( gahpconfig ) == false )		5028160	1					
ANR	5029041	Condition	VMwareType :: checkVMwareParams ( gahpconfig ) == false	415:6:9938:9987	5028160	0	True				
ANR	5029042	EqualityExpression	VMwareType :: checkVMwareParams ( gahpconfig ) == false		5028160	0		==			
ANR	5029043	CallExpression	VMwareType :: checkVMwareParams ( gahpconfig )		5028160	0					
ANR	5029044	Callee	VMwareType :: checkVMwareParams		5028160	0					
ANR	5029045	Identifier	VMwareType :: checkVMwareParams		5028160	0					
ANR	5029046	ArgumentList	gahpconfig		5028160	1					
ANR	5029047	Argument	gahpconfig		5028160	0					
ANR	5029048	Identifier	gahpconfig		5028160	0					
ANR	5029049	Identifier	false		5028160	1					
ANR	5029050	CompoundStatement		188:59:4735:4735	5028160	1					
ANR	5029051	ExpressionStatement	DC_Exit ( 1 )	416:3:9996:10006	5028160	0	True				
ANR	5029052	CallExpression	DC_Exit ( 1 )		5028160	0					
ANR	5029053	Callee	DC_Exit		5028160	0					
ANR	5029054	Identifier	DC_Exit		5028160	0					
ANR	5029055	ArgumentList	1		5028160	1					
ANR	5029056	Argument	1		5028160	0					
ANR	5029057	PrimaryExpression	1		5028160	0					
ANR	5029058	ExpressionStatement	set_priv ( priv )	418:2:10014:10028	5028160	2	True				
ANR	5029059	CallExpression	set_priv ( priv )		5028160	0					
ANR	5029060	Callee	set_priv		5028160	0					
ANR	5029061	Identifier	set_priv		5028160	0					
ANR	5029062	ArgumentList	priv		5028160	1					
ANR	5029063	Argument	priv		5028160	0					
ANR	5029064	Identifier	priv		5028160	0					
ANR	5029065	IfStatement	if ( vmgahp_mode == VMGAHP_TEST_MODE )		5028160	31					
ANR	5029066	Condition	vmgahp_mode == VMGAHP_TEST_MODE	421:5:10039:10069	5028160	0	True				
ANR	5029067	EqualityExpression	vmgahp_mode == VMGAHP_TEST_MODE		5028160	0		==			
ANR	5029068	Identifier	vmgahp_mode		5028160	0					
ANR	5029069	Identifier	VMGAHP_TEST_MODE		5028160	1					
ANR	5029070	CompoundStatement		194:39:4817:4817	5028160	1					
ANR	5029071	IfStatement	"if ( ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 ) )"		5028160	0					
ANR	5029072	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"	424:7:10155:10211	5028160	0	True				
ANR	5029073	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5028160	0		==			
ANR	5029074	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5028160	0					
ANR	5029075	Callee	strcasecmp		5028160	0					
ANR	5029076	Identifier	strcasecmp		5028160	0					
ANR	5029077	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029078	Argument	vmtype . Value ( )		5028160	0					
ANR	5029079	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029080	Callee	vmtype . Value		5028160	0					
ANR	5029081	MemberAccess	vmtype . Value		5028160	0					
ANR	5029082	Identifier	vmtype		5028160	0					
ANR	5029083	Identifier	Value		5028160	1					
ANR	5029084	ArgumentList			5028160	1					
ANR	5029085	Argument	CONDOR_VM_UNIVERSE_XEN		5028160	1					
ANR	5029086	Identifier	CONDOR_VM_UNIVERSE_XEN		5028160	0					
ANR	5029087	PrimaryExpression	0		5028160	1					
ANR	5029088	CompoundStatement		198:3:4963:4996	5028160	1					
ANR	5029089	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	425:3:10219:10252	5028160	0	True				
ANR	5029090	IdentifierDecl	priv = set_root_priv ( )		5028160	0					
ANR	5029091	IdentifierDeclType	priv_state		5028160	0					
ANR	5029092	Identifier	priv		5028160	1					
ANR	5029093	AssignmentExpression	priv = set_root_priv ( )		5028160	2		=			
ANR	5029094	Identifier	priv		5028160	0					
ANR	5029095	CallExpression	set_root_priv ( )		5028160	1					
ANR	5029096	Callee	set_root_priv		5028160	0					
ANR	5029097	Identifier	set_root_priv		5028160	0					
ANR	5029098	ArgumentList			5028160	1					
ANR	5029099	IfStatement	if ( XenType :: checkXenParams ( gahpconfig ) == false )		5028160	1					
ANR	5029100	Condition	XenType :: checkXenParams ( gahpconfig ) == false	427:7:10262:10305	5028160	0	True				
ANR	5029101	EqualityExpression	XenType :: checkXenParams ( gahpconfig ) == false		5028160	0		==			
ANR	5029102	CallExpression	XenType :: checkXenParams ( gahpconfig )		5028160	0					
ANR	5029103	Callee	XenType :: checkXenParams		5028160	0					
ANR	5029104	Identifier	XenType :: checkXenParams		5028160	0					
ANR	5029105	ArgumentList	gahpconfig		5028160	1					
ANR	5029106	Argument	gahpconfig		5028160	0					
ANR	5029107	Identifier	gahpconfig		5028160	0					
ANR	5029108	Identifier	false		5028160	1					
ANR	5029109	CompoundStatement		200:54:5053:5053	5028160	1					
ANR	5029110	Statement	vmprintf	428:4:10315:10322	5028160	0	True				
ANR	5029111	Statement	(	428:12:10323:10323	5028160	1	True				
ANR	5029112	Statement	D_ALWAYS	428:13:10324:10331	5028160	2	True				
ANR	5029113	Statement	","	428:21:10332:10332	5028160	3	True				
ANR	5029114	Statement	"""\\nERROR: the vm_type('%s') cannot """	428:23:10334:10369	5028160	4	True				
ANR	5029115	Statement	"""be used.\\n"""	429:6:10377:10388	5028160	5	True				
ANR	5029116	Statement	","	429:18:10389:10389	5028160	6	True				
ANR	5029117	Statement	vmtype	429:20:10391:10396	5028160	7	True				
ANR	5029118	Statement	.	429:26:10397:10397	5028160	8	True				
ANR	5029119	Statement	Value	429:27:10398:10402	5028160	9	True				
ANR	5029120	Statement	(	429:32:10403:10403	5028160	10	True				
ANR	5029121	Statement	)	429:33:10404:10404	5028160	11	True				
ANR	5029122	Statement	)	429:34:10405:10405	5028160	12	True				
ANR	5029123	ExpressionStatement		429:35:10406:10406	5028160	13	True				
ANR	5029124	ExpressionStatement	DC_Exit ( 0 )	430:4:10412:10422	5028160	14	True				
ANR	5029125	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029126	Callee	DC_Exit		5028160	0					
ANR	5029127	Identifier	DC_Exit		5028160	0					
ANR	5029128	ArgumentList	0		5028160	1					
ANR	5029129	Argument	0		5028160	0					
ANR	5029130	PrimaryExpression	0		5028160	0					
ANR	5029131	ExpressionStatement	set_priv ( priv )	432:3:10432:10446	5028160	2	True				
ANR	5029132	CallExpression	set_priv ( priv )		5028160	0					
ANR	5029133	Callee	set_priv		5028160	0					
ANR	5029134	Identifier	set_priv		5028160	0					
ANR	5029135	ArgumentList	priv		5028160	1					
ANR	5029136	Argument	priv		5028160	0					
ANR	5029137	Identifier	priv		5028160	0					
ANR	5029138	ElseStatement	else		5028160	0					
ANR	5029139	IfStatement	"if ( ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 ) )"		5028160	0					
ANR	5029140	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"	433:14:10462:10518	5028160	0	True				
ANR	5029141	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5028160	0		==			
ANR	5029142	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5028160	0					
ANR	5029143	Callee	strcasecmp		5028160	0					
ANR	5029144	Identifier	strcasecmp		5028160	0					
ANR	5029145	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029146	Argument	vmtype . Value ( )		5028160	0					
ANR	5029147	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029148	Callee	vmtype . Value		5028160	0					
ANR	5029149	MemberAccess	vmtype . Value		5028160	0					
ANR	5029150	Identifier	vmtype		5028160	0					
ANR	5029151	Identifier	Value		5028160	1					
ANR	5029152	ArgumentList			5028160	1					
ANR	5029153	Argument	CONDOR_VM_UNIVERSE_KVM		5028160	1					
ANR	5029154	Identifier	CONDOR_VM_UNIVERSE_KVM		5028160	0					
ANR	5029155	PrimaryExpression	0		5028160	1					
ANR	5029156	CompoundStatement		207:3:5270:5303	5028160	1					
ANR	5029157	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	434:3:10526:10559	5028160	0	True				
ANR	5029158	IdentifierDecl	priv = set_root_priv ( )		5028160	0					
ANR	5029159	IdentifierDeclType	priv_state		5028160	0					
ANR	5029160	Identifier	priv		5028160	1					
ANR	5029161	AssignmentExpression	priv = set_root_priv ( )		5028160	2		=			
ANR	5029162	Identifier	priv		5028160	0					
ANR	5029163	CallExpression	set_root_priv ( )		5028160	1					
ANR	5029164	Callee	set_root_priv		5028160	0					
ANR	5029165	Identifier	set_root_priv		5028160	0					
ANR	5029166	ArgumentList			5028160	1					
ANR	5029167	IfStatement	if ( KVMType :: checkXenParams ( gahpconfig ) == false )		5028160	1					
ANR	5029168	Condition	KVMType :: checkXenParams ( gahpconfig ) == false	436:7:10569:10612	5028160	0	True				
ANR	5029169	EqualityExpression	KVMType :: checkXenParams ( gahpconfig ) == false		5028160	0		==			
ANR	5029170	CallExpression	KVMType :: checkXenParams ( gahpconfig )		5028160	0					
ANR	5029171	Callee	KVMType :: checkXenParams		5028160	0					
ANR	5029172	Identifier	KVMType :: checkXenParams		5028160	0					
ANR	5029173	ArgumentList	gahpconfig		5028160	1					
ANR	5029174	Argument	gahpconfig		5028160	0					
ANR	5029175	Identifier	gahpconfig		5028160	0					
ANR	5029176	Identifier	false		5028160	1					
ANR	5029177	CompoundStatement		209:54:5360:5360	5028160	1					
ANR	5029178	Statement	vmprintf	437:4:10622:10629	5028160	0	True				
ANR	5029179	Statement	(	437:12:10630:10630	5028160	1	True				
ANR	5029180	Statement	D_ALWAYS	437:13:10631:10638	5028160	2	True				
ANR	5029181	Statement	","	437:21:10639:10639	5028160	3	True				
ANR	5029182	Statement	"""\\nERROR: the vm_type('%s') cannot """	437:23:10641:10676	5028160	4	True				
ANR	5029183	Statement	"""be used.\\n"""	438:6:10684:10695	5028160	5	True				
ANR	5029184	Statement	","	438:18:10696:10696	5028160	6	True				
ANR	5029185	Statement	vmtype	438:20:10698:10703	5028160	7	True				
ANR	5029186	Statement	.	438:26:10704:10704	5028160	8	True				
ANR	5029187	Statement	Value	438:27:10705:10709	5028160	9	True				
ANR	5029188	Statement	(	438:32:10710:10710	5028160	10	True				
ANR	5029189	Statement	)	438:33:10711:10711	5028160	11	True				
ANR	5029190	Statement	)	438:34:10712:10712	5028160	12	True				
ANR	5029191	ExpressionStatement		438:35:10713:10713	5028160	13	True				
ANR	5029192	ExpressionStatement	DC_Exit ( 0 )	439:4:10719:10729	5028160	14	True				
ANR	5029193	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029194	Callee	DC_Exit		5028160	0					
ANR	5029195	Identifier	DC_Exit		5028160	0					
ANR	5029196	ArgumentList	0		5028160	1					
ANR	5029197	Argument	0		5028160	0					
ANR	5029198	PrimaryExpression	0		5028160	0					
ANR	5029199	ExpressionStatement	set_priv ( priv )	441:3:10739:10753	5028160	2	True				
ANR	5029200	CallExpression	set_priv ( priv )		5028160	0					
ANR	5029201	Callee	set_priv		5028160	0					
ANR	5029202	Identifier	set_priv		5028160	0					
ANR	5029203	ArgumentList	priv		5028160	1					
ANR	5029204	Argument	priv		5028160	0					
ANR	5029205	Identifier	priv		5028160	0					
ANR	5029206	ElseStatement	else		5028160	0					
ANR	5029207	IfStatement	"if ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5028160	0					
ANR	5029208	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	445:6:10779:10836	5028160	0	True				
ANR	5029209	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5028160	0		==			
ANR	5029210	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE )"		5028160	0					
ANR	5029211	Callee	strcasecmp		5028160	0					
ANR	5029212	Identifier	strcasecmp		5028160	0					
ANR	5029213	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029214	Argument	vmtype . Value ( )		5028160	0					
ANR	5029215	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029216	Callee	vmtype . Value		5028160	0					
ANR	5029217	MemberAccess	vmtype . Value		5028160	0					
ANR	5029218	Identifier	vmtype		5028160	0					
ANR	5029219	Identifier	Value		5028160	1					
ANR	5029220	ArgumentList			5028160	1					
ANR	5029221	Argument	CONDOR_VM_UNIVERSE_VMWARE		5028160	1					
ANR	5029222	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5028160	0					
ANR	5029223	PrimaryExpression	0		5028160	1					
ANR	5029224	CompoundStatement		219:3:5589:5622	5028160	1					
ANR	5029225	IdentifierDeclStatement	priv_state priv = set_user_priv ( ) ;	446:3:10845:10878	5028160	0	True				
ANR	5029226	IdentifierDecl	priv = set_user_priv ( )		5028160	0					
ANR	5029227	IdentifierDeclType	priv_state		5028160	0					
ANR	5029228	Identifier	priv		5028160	1					
ANR	5029229	AssignmentExpression	priv = set_user_priv ( )		5028160	2		=			
ANR	5029230	Identifier	priv		5028160	0					
ANR	5029231	CallExpression	set_user_priv ( )		5028160	1					
ANR	5029232	Callee	set_user_priv		5028160	0					
ANR	5029233	Identifier	set_user_priv		5028160	0					
ANR	5029234	ArgumentList			5028160	1					
ANR	5029235	IfStatement	if ( VMwareType :: testVMware ( gahpconfig ) == false )		5028160	1					
ANR	5029236	Condition	VMwareType :: testVMware ( gahpconfig ) == false	447:7:10887:10929	5028160	0	True				
ANR	5029237	EqualityExpression	VMwareType :: testVMware ( gahpconfig ) == false		5028160	0		==			
ANR	5029238	CallExpression	VMwareType :: testVMware ( gahpconfig )		5028160	0					
ANR	5029239	Callee	VMwareType :: testVMware		5028160	0					
ANR	5029240	Identifier	VMwareType :: testVMware		5028160	0					
ANR	5029241	ArgumentList	gahpconfig		5028160	1					
ANR	5029242	Argument	gahpconfig		5028160	0					
ANR	5029243	Identifier	gahpconfig		5028160	0					
ANR	5029244	Identifier	false		5028160	1					
ANR	5029245	CompoundStatement		220:53:5677:5677	5028160	1					
ANR	5029246	Statement	vmprintf	448:4:10939:10946	5028160	0	True				
ANR	5029247	Statement	(	448:12:10947:10947	5028160	1	True				
ANR	5029248	Statement	D_ALWAYS	448:13:10948:10955	5028160	2	True				
ANR	5029249	Statement	","	448:21:10956:10956	5028160	3	True				
ANR	5029250	Statement	"""\\nERROR: the vm_type('%s') cannot """	448:23:10958:10993	5028160	4	True				
ANR	5029251	Statement	"""be used.\\n"""	449:6:11001:11012	5028160	5	True				
ANR	5029252	Statement	","	449:18:11013:11013	5028160	6	True				
ANR	5029253	Statement	vmtype	449:20:11015:11020	5028160	7	True				
ANR	5029254	Statement	.	449:26:11021:11021	5028160	8	True				
ANR	5029255	Statement	Value	449:27:11022:11026	5028160	9	True				
ANR	5029256	Statement	(	449:32:11027:11027	5028160	10	True				
ANR	5029257	Statement	)	449:33:11028:11028	5028160	11	True				
ANR	5029258	Statement	)	449:34:11029:11029	5028160	12	True				
ANR	5029259	ExpressionStatement		449:35:11030:11030	5028160	13	True				
ANR	5029260	ExpressionStatement	DC_Exit ( 0 )	450:4:11036:11046	5028160	14	True				
ANR	5029261	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029262	Callee	DC_Exit		5028160	0					
ANR	5029263	Identifier	DC_Exit		5028160	0					
ANR	5029264	ArgumentList	0		5028160	1					
ANR	5029265	Argument	0		5028160	0					
ANR	5029266	PrimaryExpression	0		5028160	0					
ANR	5029267	ExpressionStatement	set_priv ( priv )	452:3:11056:11070	5028160	2	True				
ANR	5029268	CallExpression	set_priv ( priv )		5028160	0					
ANR	5029269	Callee	set_priv		5028160	0					
ANR	5029270	Identifier	set_priv		5028160	0					
ANR	5029271	ArgumentList	priv		5028160	1					
ANR	5029272	Argument	priv		5028160	0					
ANR	5029273	Identifier	priv		5028160	0					
ANR	5029274	ExpressionStatement	"write_to_daemoncore_pipe ( ""VM_GAHP_VERSION = \\""%s\\""\\n"" , CONDOR_VMGAHP_VERSION )"	456:2:11112:11189	5028160	1	True				
ANR	5029275	CallExpression	"write_to_daemoncore_pipe ( ""VM_GAHP_VERSION = \\""%s\\""\\n"" , CONDOR_VMGAHP_VERSION )"		5028160	0					
ANR	5029276	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029277	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029278	ArgumentList	"""VM_GAHP_VERSION = \\""%s\\""\\n"""		5028160	1					
ANR	5029279	Argument	"""VM_GAHP_VERSION = \\""%s\\""\\n"""		5028160	0					
ANR	5029280	PrimaryExpression	"""VM_GAHP_VERSION = \\""%s\\""\\n"""		5028160	0					
ANR	5029281	Argument	CONDOR_VMGAHP_VERSION		5028160	1					
ANR	5029282	Identifier	CONDOR_VMGAHP_VERSION		5028160	0					
ANR	5029283	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s = \\""%s\\""\\n"" , ATTR_VM_TYPE , gahpconfig -> m_vm_type . Value ( ) )"	457:2:11193:11283	5028160	2	True				
ANR	5029284	CallExpression	"write_to_daemoncore_pipe ( ""%s = \\""%s\\""\\n"" , ATTR_VM_TYPE , gahpconfig -> m_vm_type . Value ( ) )"		5028160	0					
ANR	5029285	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029286	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029287	ArgumentList	"""%s = \\""%s\\""\\n"""		5028160	1					
ANR	5029288	Argument	"""%s = \\""%s\\""\\n"""		5028160	0					
ANR	5029289	PrimaryExpression	"""%s = \\""%s\\""\\n"""		5028160	0					
ANR	5029290	Argument	ATTR_VM_TYPE		5028160	1					
ANR	5029291	Identifier	ATTR_VM_TYPE		5028160	0					
ANR	5029292	Argument	gahpconfig -> m_vm_type . Value ( )		5028160	2					
ANR	5029293	CallExpression	gahpconfig -> m_vm_type . Value ( )		5028160	0					
ANR	5029294	Callee	gahpconfig -> m_vm_type . Value		5028160	0					
ANR	5029295	MemberAccess	gahpconfig -> m_vm_type . Value		5028160	0					
ANR	5029296	PtrMemberAccess	gahpconfig -> m_vm_type		5028160	0					
ANR	5029297	Identifier	gahpconfig		5028160	0					
ANR	5029298	Identifier	m_vm_type		5028160	1					
ANR	5029299	Identifier	Value		5028160	1					
ANR	5029300	ArgumentList			5028160	1					
ANR	5029301	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s = %d\\n"" , ATTR_VM_MEMORY , gahpconfig -> m_vm_max_memory )"	459:2:11287:11373	5028160	3	True				
ANR	5029302	CallExpression	"write_to_daemoncore_pipe ( ""%s = %d\\n"" , ATTR_VM_MEMORY , gahpconfig -> m_vm_max_memory )"		5028160	0					
ANR	5029303	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029304	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029305	ArgumentList	"""%s = %d\\n"""		5028160	1					
ANR	5029306	Argument	"""%s = %d\\n"""		5028160	0					
ANR	5029307	PrimaryExpression	"""%s = %d\\n"""		5028160	0					
ANR	5029308	Argument	ATTR_VM_MEMORY		5028160	1					
ANR	5029309	Identifier	ATTR_VM_MEMORY		5028160	0					
ANR	5029310	Argument	gahpconfig -> m_vm_max_memory		5028160	2					
ANR	5029311	PtrMemberAccess	gahpconfig -> m_vm_max_memory		5028160	0					
ANR	5029312	Identifier	gahpconfig		5028160	0					
ANR	5029313	Identifier	m_vm_max_memory		5028160	1					
ANR	5029314	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s = %s\\n"" , ATTR_VM_NETWORKING , gahpconfig -> m_vm_networking ? ""TRUE"" : ""FALSE"" )"	461:2:11377:11483	5028160	4	True				
ANR	5029315	CallExpression	"write_to_daemoncore_pipe ( ""%s = %s\\n"" , ATTR_VM_NETWORKING , gahpconfig -> m_vm_networking ? ""TRUE"" : ""FALSE"" )"		5028160	0					
ANR	5029316	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029317	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029318	ArgumentList	"""%s = %s\\n"""		5028160	1					
ANR	5029319	Argument	"""%s = %s\\n"""		5028160	0					
ANR	5029320	PrimaryExpression	"""%s = %s\\n"""		5028160	0					
ANR	5029321	Argument	ATTR_VM_NETWORKING		5028160	1					
ANR	5029322	Identifier	ATTR_VM_NETWORKING		5028160	0					
ANR	5029323	Argument	"gahpconfig -> m_vm_networking ? ""TRUE"" : ""FALSE"""		5028160	2					
ANR	5029324	ConditionalExpression	"gahpconfig -> m_vm_networking ? ""TRUE"" : ""FALSE"""		5028160	0					
ANR	5029325	Condition	gahpconfig -> m_vm_networking		5028160	0					
ANR	5029326	PtrMemberAccess	gahpconfig -> m_vm_networking		5028160	0					
ANR	5029327	Identifier	gahpconfig		5028160	0					
ANR	5029328	Identifier	m_vm_networking		5028160	1					
ANR	5029329	PrimaryExpression	"""TRUE"""		5028160	1					
ANR	5029330	PrimaryExpression	"""FALSE"""		5028160	2					
ANR	5029331	IfStatement	if ( gahpconfig -> m_vm_networking )		5028160	5					
ANR	5029332	Condition	gahpconfig -> m_vm_networking	463:6:11491:11517	5028160	0	True				
ANR	5029333	PtrMemberAccess	gahpconfig -> m_vm_networking		5028160	0					
ANR	5029334	Identifier	gahpconfig		5028160	0					
ANR	5029335	Identifier	m_vm_networking		5028160	1					
ANR	5029336	CompoundStatement		237:3:6270:6333	5028160	1					
ANR	5029337	IdentifierDeclStatement	char * tmp = gahpconfig -> m_vm_networking_types . print_to_string ( ) ;	464:3:11526:11589	5028160	0	True				
ANR	5029338	IdentifierDecl	* tmp = gahpconfig -> m_vm_networking_types . print_to_string ( )		5028160	0					
ANR	5029339	IdentifierDeclType	char *		5028160	0					
ANR	5029340	Identifier	tmp		5028160	1					
ANR	5029341	AssignmentExpression	* tmp = gahpconfig -> m_vm_networking_types . print_to_string ( )		5028160	2		=			
ANR	5029342	Identifier	tmp		5028160	0					
ANR	5029343	CallExpression	gahpconfig -> m_vm_networking_types . print_to_string ( )		5028160	1					
ANR	5029344	Callee	gahpconfig -> m_vm_networking_types . print_to_string		5028160	0					
ANR	5029345	MemberAccess	gahpconfig -> m_vm_networking_types . print_to_string		5028160	0					
ANR	5029346	PtrMemberAccess	gahpconfig -> m_vm_networking_types		5028160	0					
ANR	5029347	Identifier	gahpconfig		5028160	0					
ANR	5029348	Identifier	m_vm_networking_types		5028160	1					
ANR	5029349	Identifier	print_to_string		5028160	1					
ANR	5029350	ArgumentList			5028160	1					
ANR	5029351	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s = \\""%s\\""\\n"" , ATTR_VM_NETWORKING_TYPES , tmp ? tmp : """" )"	465:3:11594:11687	5028160	1	True				
ANR	5029352	CallExpression	"write_to_daemoncore_pipe ( ""%s = \\""%s\\""\\n"" , ATTR_VM_NETWORKING_TYPES , tmp ? tmp : """" )"		5028160	0					
ANR	5029353	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029354	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029355	ArgumentList	"""%s = \\""%s\\""\\n"""		5028160	1					
ANR	5029356	Argument	"""%s = \\""%s\\""\\n"""		5028160	0					
ANR	5029357	PrimaryExpression	"""%s = \\""%s\\""\\n"""		5028160	0					
ANR	5029358	Argument	ATTR_VM_NETWORKING_TYPES		5028160	1					
ANR	5029359	Identifier	ATTR_VM_NETWORKING_TYPES		5028160	0					
ANR	5029360	Argument	"tmp ? tmp : """""		5028160	2					
ANR	5029361	ConditionalExpression	"tmp ? tmp : """""		5028160	0					
ANR	5029362	Condition	tmp		5028160	0					
ANR	5029363	Identifier	tmp		5028160	0					
ANR	5029364	Identifier	tmp		5028160	1					
ANR	5029365	PrimaryExpression	""""""		5028160	2					
ANR	5029366	ExpressionStatement	free ( tmp )	467:3:11692:11701	5028160	2	True				
ANR	5029367	CallExpression	free ( tmp )		5028160	0					
ANR	5029368	Callee	free		5028160	0					
ANR	5029369	Identifier	free		5028160	0					
ANR	5029370	ArgumentList	tmp		5028160	1					
ANR	5029371	Argument	tmp		5028160	0					
ANR	5029372	Identifier	tmp		5028160	0					
ANR	5029373	IfStatement	if ( gahpconfig -> m_vm_hardware_vt )		5028160	6					
ANR	5029374	Condition	gahpconfig -> m_vm_hardware_vt	469:6:11713:11740	5028160	0	True				
ANR	5029375	PtrMemberAccess	gahpconfig -> m_vm_hardware_vt		5028160	0					
ANR	5029376	Identifier	gahpconfig		5028160	0					
ANR	5029377	Identifier	m_vm_hardware_vt		5028160	1					
ANR	5029378	CompoundStatement		242:37:6488:6488	5028160	1					
ANR	5029379	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s = TRUE\\n"" , ATTR_VM_HARDWARE_VT )"	470:3:11749:11809	5028160	0	True				
ANR	5029380	CallExpression	"write_to_daemoncore_pipe ( ""%s = TRUE\\n"" , ATTR_VM_HARDWARE_VT )"		5028160	0					
ANR	5029381	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029382	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029383	ArgumentList	"""%s = TRUE\\n"""		5028160	1					
ANR	5029384	Argument	"""%s = TRUE\\n"""		5028160	0					
ANR	5029385	PrimaryExpression	"""%s = TRUE\\n"""		5028160	0					
ANR	5029386	Argument	ATTR_VM_HARDWARE_VT		5028160	1					
ANR	5029387	Identifier	ATTR_VM_HARDWARE_VT		5028160	0					
ANR	5029388	ExpressionStatement	DC_Exit ( 0 )	472:2:11817:11827	5028160	7	True				
ANR	5029389	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029390	Callee	DC_Exit		5028160	0					
ANR	5029391	Identifier	DC_Exit		5028160	0					
ANR	5029392	ArgumentList	0		5028160	1					
ANR	5029393	Argument	0		5028160	0					
ANR	5029394	PrimaryExpression	0		5028160	0					
ANR	5029395	IfStatement	if ( vmgahp_mode == VMGAHP_KILL_MODE )		5028160	32					
ANR	5029396	Condition	vmgahp_mode == VMGAHP_KILL_MODE	475:5:11838:11868	5028160	0	True				
ANR	5029397	EqualityExpression	vmgahp_mode == VMGAHP_KILL_MODE		5028160	0		==			
ANR	5029398	Identifier	vmgahp_mode		5028160	0					
ANR	5029399	Identifier	VMGAHP_KILL_MODE		5028160	1					
ANR	5029400	CompoundStatement		248:39:6616:6616	5028160	1					
ANR	5029401	IfStatement	if ( matchstring . IsEmpty ( ) )		5028160	0					
ANR	5029402	Condition	matchstring . IsEmpty ( )	476:6:11880:11900	5028160	0	True				
ANR	5029403	CallExpression	matchstring . IsEmpty ( )		5028160	0					
ANR	5029404	Callee	matchstring . IsEmpty		5028160	0					
ANR	5029405	MemberAccess	matchstring . IsEmpty		5028160	0					
ANR	5029406	Identifier	matchstring		5028160	0					
ANR	5029407	Identifier	IsEmpty		5028160	1					
ANR	5029408	ArgumentList			5028160	1					
ANR	5029409	CompoundStatement		249:30:6648:6648	5028160	1					
ANR	5029410	ExpressionStatement	DC_Exit ( 0 )	477:3:11909:11919	5028160	0	True				
ANR	5029411	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029412	Callee	DC_Exit		5028160	0					
ANR	5029413	Identifier	DC_Exit		5028160	0					
ANR	5029414	ArgumentList	0		5028160	1					
ANR	5029415	Argument	0		5028160	0					
ANR	5029416	PrimaryExpression	0		5028160	0					
ANR	5029417	ExpressionStatement	set_root_priv ( )	482:2:12025:12040	5028160	1	True				
ANR	5029418	CallExpression	set_root_priv ( )		5028160	0					
ANR	5029419	Callee	set_root_priv		5028160	0					
ANR	5029420	Identifier	set_root_priv		5028160	0					
ANR	5029421	ArgumentList			5028160	1					
ANR	5029422	IfStatement	"if ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0 )"		5028160	2					
ANR	5029423	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"	485:6:12105:12159	5028160	0	True				
ANR	5029424	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN ) == 0"		5028160	0		==			
ANR	5029425	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_XEN )"		5028160	0					
ANR	5029426	Callee	strcasecmp		5028160	0					
ANR	5029427	Identifier	strcasecmp		5028160	0					
ANR	5029428	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029429	Argument	vmtype . Value ( )		5028160	0					
ANR	5029430	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029431	Callee	vmtype . Value		5028160	0					
ANR	5029432	MemberAccess	vmtype . Value		5028160	0					
ANR	5029433	Identifier	vmtype		5028160	0					
ANR	5029434	Identifier	Value		5028160	1					
ANR	5029435	ArgumentList			5028160	1					
ANR	5029436	Argument	CONDOR_VM_UNIVERSE_XEN		5028160	1					
ANR	5029437	Identifier	CONDOR_VM_UNIVERSE_XEN		5028160	0					
ANR	5029438	PrimaryExpression	0		5028160	1					
ANR	5029439	CompoundStatement		258:64:6907:6907	5028160	1					
ANR	5029440	ExpressionStatement	XenType :: killVMFast ( matchstring . Value ( ) )	486:3:12168:12208	5028160	0	True				
ANR	5029441	CallExpression	XenType :: killVMFast ( matchstring . Value ( ) )		5028160	0					
ANR	5029442	Callee	XenType :: killVMFast		5028160	0					
ANR	5029443	Identifier	XenType :: killVMFast		5028160	0					
ANR	5029444	ArgumentList	matchstring . Value ( )		5028160	1					
ANR	5029445	Argument	matchstring . Value ( )		5028160	0					
ANR	5029446	CallExpression	matchstring . Value ( )		5028160	0					
ANR	5029447	Callee	matchstring . Value		5028160	0					
ANR	5029448	MemberAccess	matchstring . Value		5028160	0					
ANR	5029449	Identifier	matchstring		5028160	0					
ANR	5029450	Identifier	Value		5028160	1					
ANR	5029451	ArgumentList			5028160	1					
ANR	5029452	ElseStatement	else		5028160	0					
ANR	5029453	IfStatement	"if ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0 )"		5028160	0					
ANR	5029454	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"	488:6:12224:12278	5028160	0	True				
ANR	5029455	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM ) == 0"		5028160	0		==			
ANR	5029456	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_KVM )"		5028160	0					
ANR	5029457	Callee	strcasecmp		5028160	0					
ANR	5029458	Identifier	strcasecmp		5028160	0					
ANR	5029459	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029460	Argument	vmtype . Value ( )		5028160	0					
ANR	5029461	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029462	Callee	vmtype . Value		5028160	0					
ANR	5029463	MemberAccess	vmtype . Value		5028160	0					
ANR	5029464	Identifier	vmtype		5028160	0					
ANR	5029465	Identifier	Value		5028160	1					
ANR	5029466	ArgumentList			5028160	1					
ANR	5029467	Argument	CONDOR_VM_UNIVERSE_KVM		5028160	1					
ANR	5029468	Identifier	CONDOR_VM_UNIVERSE_KVM		5028160	0					
ANR	5029469	PrimaryExpression	0		5028160	1					
ANR	5029470	CompoundStatement		261:64:7026:7026	5028160	1					
ANR	5029471	ExpressionStatement	KVMType :: killVMFast ( matchstring . Value ( ) )	489:3:12287:12327	5028160	0	True				
ANR	5029472	CallExpression	KVMType :: killVMFast ( matchstring . Value ( ) )		5028160	0					
ANR	5029473	Callee	KVMType :: killVMFast		5028160	0					
ANR	5029474	Identifier	KVMType :: killVMFast		5028160	0					
ANR	5029475	ArgumentList	matchstring . Value ( )		5028160	1					
ANR	5029476	Argument	matchstring . Value ( )		5028160	0					
ANR	5029477	CallExpression	matchstring . Value ( )		5028160	0					
ANR	5029478	Callee	matchstring . Value		5028160	0					
ANR	5029479	MemberAccess	matchstring . Value		5028160	0					
ANR	5029480	Identifier	matchstring		5028160	0					
ANR	5029481	Identifier	Value		5028160	1					
ANR	5029482	ArgumentList			5028160	1					
ANR	5029483	ElseStatement	else		5028160	0					
ANR	5029484	IfStatement	"if ( strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0 )"		5028160	0					
ANR	5029485	Condition	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"	492:6:12350:12408	5028160	0	True				
ANR	5029486	EqualityExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE ) == 0"		5028160	0		==			
ANR	5029487	CallExpression	"strcasecmp ( vmtype . Value ( ) , CONDOR_VM_UNIVERSE_VMWARE )"		5028160	0					
ANR	5029488	Callee	strcasecmp		5028160	0					
ANR	5029489	Identifier	strcasecmp		5028160	0					
ANR	5029490	ArgumentList	vmtype . Value ( )		5028160	1					
ANR	5029491	Argument	vmtype . Value ( )		5028160	0					
ANR	5029492	CallExpression	vmtype . Value ( )		5028160	0					
ANR	5029493	Callee	vmtype . Value		5028160	0					
ANR	5029494	MemberAccess	vmtype . Value		5028160	0					
ANR	5029495	Identifier	vmtype		5028160	0					
ANR	5029496	Identifier	Value		5028160	1					
ANR	5029497	ArgumentList			5028160	1					
ANR	5029498	Argument	CONDOR_VM_UNIVERSE_VMWARE		5028160	1					
ANR	5029499	Identifier	CONDOR_VM_UNIVERSE_VMWARE		5028160	0					
ANR	5029500	PrimaryExpression	0		5028160	1					
ANR	5029501	CompoundStatement		265:68:7156:7156	5028160	1					
ANR	5029502	ExpressionStatement	"VMwareType :: killVMFast ( gahpconfig -> m_prog_for_script . Value ( ) , gahpconfig -> m_vm_script . Value ( ) , matchstring . Value ( ) , true )"	493:3:12417:12543	5028160	0	True				
ANR	5029503	CallExpression	"VMwareType :: killVMFast ( gahpconfig -> m_prog_for_script . Value ( ) , gahpconfig -> m_vm_script . Value ( ) , matchstring . Value ( ) , true )"		5028160	0					
ANR	5029504	Callee	VMwareType :: killVMFast		5028160	0					
ANR	5029505	Identifier	VMwareType :: killVMFast		5028160	0					
ANR	5029506	ArgumentList	gahpconfig -> m_prog_for_script . Value ( )		5028160	1					
ANR	5029507	Argument	gahpconfig -> m_prog_for_script . Value ( )		5028160	0					
ANR	5029508	CallExpression	gahpconfig -> m_prog_for_script . Value ( )		5028160	0					
ANR	5029509	Callee	gahpconfig -> m_prog_for_script . Value		5028160	0					
ANR	5029510	MemberAccess	gahpconfig -> m_prog_for_script . Value		5028160	0					
ANR	5029511	PtrMemberAccess	gahpconfig -> m_prog_for_script		5028160	0					
ANR	5029512	Identifier	gahpconfig		5028160	0					
ANR	5029513	Identifier	m_prog_for_script		5028160	1					
ANR	5029514	Identifier	Value		5028160	1					
ANR	5029515	ArgumentList			5028160	1					
ANR	5029516	Argument	gahpconfig -> m_vm_script . Value ( )		5028160	1					
ANR	5029517	CallExpression	gahpconfig -> m_vm_script . Value ( )		5028160	0					
ANR	5029518	Callee	gahpconfig -> m_vm_script . Value		5028160	0					
ANR	5029519	MemberAccess	gahpconfig -> m_vm_script . Value		5028160	0					
ANR	5029520	PtrMemberAccess	gahpconfig -> m_vm_script		5028160	0					
ANR	5029521	Identifier	gahpconfig		5028160	0					
ANR	5029522	Identifier	m_vm_script		5028160	1					
ANR	5029523	Identifier	Value		5028160	1					
ANR	5029524	ArgumentList			5028160	1					
ANR	5029525	Argument	matchstring . Value ( )		5028160	2					
ANR	5029526	CallExpression	matchstring . Value ( )		5028160	0					
ANR	5029527	Callee	matchstring . Value		5028160	0					
ANR	5029528	MemberAccess	matchstring . Value		5028160	0					
ANR	5029529	Identifier	matchstring		5028160	0					
ANR	5029530	Identifier	Value		5028160	1					
ANR	5029531	ArgumentList			5028160	1					
ANR	5029532	Argument	true		5028160	3					
ANR	5029533	Identifier	true		5028160	0					
ANR	5029534	ExpressionStatement	DC_Exit ( 0 )	496:2:12551:12561	5028160	3	True				
ANR	5029535	CallExpression	DC_Exit ( 0 )		5028160	0					
ANR	5029536	Callee	DC_Exit		5028160	0					
ANR	5029537	Identifier	DC_Exit		5028160	0					
ANR	5029538	ArgumentList	0		5028160	1					
ANR	5029539	Argument	0		5028160	0					
ANR	5029540	PrimaryExpression	0		5028160	0					
ANR	5029541	ExpressionStatement	"vmgahp = new VMGahp ( gahpconfig , workingdir . Value ( ) )"	499:1:12568:12619	5028160	33	True				
ANR	5029542	AssignmentExpression	"vmgahp = new VMGahp ( gahpconfig , workingdir . Value ( ) )"		5028160	0		=			
ANR	5029543	Identifier	vmgahp		5028160	0					
ANR	5029544	Expression	"gahpconfig , workingdir . Value ( )"		5028160	1					
ANR	5029545	Identifier	gahpconfig		5028160	0					
ANR	5029546	CallExpression	workingdir . Value ( )		5028160	1					
ANR	5029547	Callee	workingdir . Value		5028160	0					
ANR	5029548	MemberAccess	workingdir . Value		5028160	0					
ANR	5029549	Identifier	workingdir		5028160	0					
ANR	5029550	Identifier	Value		5028160	1					
ANR	5029551	ArgumentList			5028160	1					
ANR	5029552	ExpressionStatement	ASSERT ( vmgahp )	500:1:12622:12636	5028160	34	True				
ANR	5029553	CallExpression	ASSERT ( vmgahp )		5028160	0					
ANR	5029554	Callee	ASSERT		5028160	0					
ANR	5029555	Identifier	ASSERT		5028160	0					
ANR	5029556	ArgumentList	vmgahp		5028160	1					
ANR	5029557	Argument	vmgahp		5028160	0					
ANR	5029558	Identifier	vmgahp		5028160	0					
ANR	5029559	ExpressionStatement	vmgahp -> startUp ( )	503:1:12664:12681	5028160	35	True				
ANR	5029560	CallExpression	vmgahp -> startUp ( )		5028160	0					
ANR	5029561	Callee	vmgahp -> startUp		5028160	0					
ANR	5029562	PtrMemberAccess	vmgahp -> startUp		5028160	0					
ANR	5029563	Identifier	vmgahp		5028160	0					
ANR	5029564	Identifier	startUp		5028160	1					
ANR	5029565	ArgumentList			5028160	1					
ANR	5029566	ExpressionStatement	"write_to_daemoncore_pipe ( ""%s\\n"" , vmgahp_version )"	505:1:12685:12733	5028160	36	True				
ANR	5029567	CallExpression	"write_to_daemoncore_pipe ( ""%s\\n"" , vmgahp_version )"		5028160	0					
ANR	5029568	Callee	write_to_daemoncore_pipe		5028160	0					
ANR	5029569	Identifier	write_to_daemoncore_pipe		5028160	0					
ANR	5029570	ArgumentList	"""%s\\n"""		5028160	1					
ANR	5029571	Argument	"""%s\\n"""		5028160	0					
ANR	5029572	PrimaryExpression	"""%s\\n"""		5028160	0					
ANR	5029573	Argument	vmgahp_version		5028160	1					
ANR	5029574	Identifier	vmgahp_version		5028160	0					
ANR	5029575	ReturnType	void		5028160	1					
ANR	5029576	Identifier	main_init		5028160	2					
ANR	5029577	ParameterList	"int argc , char * argv [ ]"		5028160	3					
ANR	5029578	Parameter	int argc	227:15:5231:5238	5028160	0	True				
ANR	5029579	ParameterType	int		5028160	0					
ANR	5029580	Identifier	argc		5028160	1					
ANR	5029581	Parameter	char * argv [ ]	227:25:5241:5252	5028160	1	True				
ANR	5029582	ParameterType	char * [ ]		5028160	0					
ANR	5029583	Identifier	argv		5028160	1					
ANR	5029584	CFGEntryNode	ENTRY		5028160		True				
ANR	5029585	CFGExitNode	EXIT		5028160		True				
ANR	5029586	Symbol	workingdir . IsEmpty		5028160						
ANR	5029587	Symbol	stdout		5028160						
ANR	5029588	Symbol	workingdir		5028160						
ANR	5029589	Symbol	opt_len		5028160						
ANR	5029590	Symbol	set_user_priv		5028160						
ANR	5029591	Symbol	* argv		5028160						
ANR	5029592	Symbol	gahpconfig -> m_vm_networking_types		5028160						
ANR	5029593	Symbol	_match		5028160						
ANR	5029594	Symbol	VMwareType :: testVMware		5028160						
ANR	5029595	Symbol	oriDebugFlags		5028160						
ANR	5029596	Symbol	strlen		5028160						
ANR	5029597	Symbol	strncmp		5028160						
ANR	5029598	Symbol	_vmtype		5028160						
ANR	5029599	Symbol	ATTR_VM_NETWORKING_TYPES		5028160						
ANR	5029600	Symbol	gahpconfig -> m_prog_for_script		5028160						
ANR	5029601	Symbol	CONDOR_VM_UNIVERSE_KVM		5028160						
ANR	5029602	Symbol	vmgahp		5028160						
ANR	5029603	Symbol	vmgahp_mode		5028160						
ANR	5029604	Symbol	tmp		5028160						
ANR	5029605	Symbol	vmgahp_stderr_pipe		5028160						
ANR	5029606	Symbol	priv		5028160						
ANR	5029607	Symbol	strcasecmp		5028160						
ANR	5029608	Symbol	VMGAHP_KILL_MODE		5028160						
ANR	5029609	Symbol	write_stderr_to_pipe		5028160						
ANR	5029610	Symbol	strcmp		5028160						
ANR	5029611	Symbol	VMGAHP_STANDALONE_MODE		5028160						
ANR	5029612	Symbol	ATTR_VM_HARDWARE_VT		5028160						
ANR	5029613	Symbol	NULL		5028160						
ANR	5029614	Symbol	ATTR_VM_MEMORY		5028160						
ANR	5029615	Symbol	vmtype . Length		5028160						
ANR	5029616	Symbol	DebugFlags		5028160						
ANR	5029617	Symbol	KVMType :: checkXenParams		5028160						
ANR	5029618	Symbol	stderr		5028160						
ANR	5029619	Symbol	workingdir . Value		5028160						
ANR	5029620	Symbol	ATTR_VM_TYPE		5028160						
ANR	5029621	Symbol	gahpconfig -> m_vm_networking		5028160						
ANR	5029622	Symbol	opt		5028160						
ANR	5029623	Symbol	fileno		5028160						
ANR	5029624	Symbol	matchstring . Value		5028160						
ANR	5029625	Symbol	* daemonCore		5028160						
ANR	5029626	Symbol	daemonCore -> Register_Timer		5028160						
ANR	5029627	Symbol	true		5028160						
ANR	5029628	Symbol	gahpconfig -> m_vm_networking_types . print_to_string		5028160						
ANR	5029629	Symbol	XenType :: checkXenParams		5028160						
ANR	5029630	Symbol	CONDOR_VM_UNIVERSE_VMWARE		5028160						
ANR	5029631	Symbol	gahpconfig -> m_vm_script . Value		5028160						
ANR	5029632	Symbol	VMGAHP_WORKER_MODE		5028160						
ANR	5029633	Symbol	matchstring		5028160						
ANR	5029634	Symbol	gahpconfig -> m_vm_type		5028160						
ANR	5029635	Symbol	* tmp		5028160						
ANR	5029636	Symbol	matchstring . IsEmpty		5028160						
ANR	5029637	Symbol	vmgahp_version		5028160						
ANR	5029638	Symbol	canSwitchUid		5028160						
ANR	5029639	Symbol	vmgahp_stdout_pipe		5028160						
ANR	5029640	Symbol	gahpconfig -> m_vm_hardware_vt		5028160						
ANR	5029641	Symbol	vmgahp_stderr_tid		5028160						
ANR	5029642	Symbol	gahpconfig		5028160						
ANR	5029643	Symbol	argv		5028160						
ANR	5029644	Symbol	vmtype . IsEmpty		5028160						
ANR	5029645	Symbol	daemonCore		5028160						
ANR	5029646	Symbol	arg		5028160						
ANR	5029647	Symbol	CONDOR_VM_UNIVERSE_XEN		5028160						
ANR	5029648	Symbol	matchstring . Length		5028160						
ANR	5029649	Symbol	VMGAHP_IO_MODE		5028160						
ANR	5029650	Symbol	CONDOR_VMGAHP_VERSION		5028160						
ANR	5029651	Symbol	ATTR_VM_NETWORKING		5028160						
ANR	5029652	Symbol	VMGAHP_MODE_MAX		5028160						
ANR	5029653	Symbol	getenv		5028160						
ANR	5029654	Symbol	argc		5028160						
ANR	5029655	Symbol	atoi		5028160						
ANR	5029656	Symbol	vmgahp_stderr_buffer		5028160						
ANR	5029657	Symbol	gahpconfig -> m_prog_for_script . Value		5028160						
ANR	5029658	Symbol	gahpconfig -> m_vm_script		5028160						
ANR	5029659	Symbol	vmtype		5028160						
ANR	5029660	Symbol	Termlog		5028160						
ANR	5029661	Symbol	false		5028160						
ANR	5029662	Symbol	D_ALWAYS		5028160						
ANR	5029663	Symbol	VMwareType :: checkVMwareParams		5028160						
ANR	5029664	Symbol	set_root_priv		5028160						
ANR	5029665	Symbol	daemonCore -> Inherit_Pipe		5028160						
ANR	5029666	Symbol	verify_vm_type		5028160						
ANR	5029667	Symbol	gahpconfig -> m_vm_type . Value		5028160						
ANR	5029668	Symbol	gahpconfig -> m_vm_max_memory		5028160						
ANR	5029669	Symbol	* gahpconfig		5028160						
ANR	5029670	Symbol	vmtype . Value		5028160						
ANR	5029671	Symbol	gahpconfig -> init		5028160						
ANR	5029672	Symbol	VMGAHP_TEST_MODE		5028160						
ANR	5029673	Function	main	508:0:12738:13075							
ANR	5029674	FunctionDef	"main (int argc , char * * argv)"		5029673	0					
ANR	5029675	CompoundStatement		510:0:12772:13075	5029673	0					
ANR	5029676	ExpressionStatement	"set_mySubSystem ( ""VM_GAHP"" , SUBSYSTEM_TYPE_GAHP )"	511:1:12775:12824	5029673	0	True				
ANR	5029677	CallExpression	"set_mySubSystem ( ""VM_GAHP"" , SUBSYSTEM_TYPE_GAHP )"		5029673	0					
ANR	5029678	Callee	set_mySubSystem		5029673	0					
ANR	5029679	Identifier	set_mySubSystem		5029673	0					
ANR	5029680	ArgumentList	"""VM_GAHP"""		5029673	1					
ANR	5029681	Argument	"""VM_GAHP"""		5029673	0					
ANR	5029682	PrimaryExpression	"""VM_GAHP"""		5029673	0					
ANR	5029683	Argument	SUBSYSTEM_TYPE_GAHP		5029673	1					
ANR	5029684	Identifier	SUBSYSTEM_TYPE_GAHP		5029673	0					
ANR	5029685	ExpressionStatement	dc_main_init = main_init	513:1:12828:12852	5029673	1	True				
ANR	5029686	AssignmentExpression	dc_main_init = main_init		5029673	0		=			
ANR	5029687	Identifier	dc_main_init		5029673	0					
ANR	5029688	Identifier	main_init		5029673	1					
ANR	5029689	ExpressionStatement	dc_main_config = main_config	514:1:12855:12883	5029673	2	True				
ANR	5029690	AssignmentExpression	dc_main_config = main_config		5029673	0		=			
ANR	5029691	Identifier	dc_main_config		5029673	0					
ANR	5029692	Identifier	main_config		5029673	1					
ANR	5029693	ExpressionStatement	dc_main_shutdown_fast = main_shutdown_fast	515:1:12886:12928	5029673	3	True				
ANR	5029694	AssignmentExpression	dc_main_shutdown_fast = main_shutdown_fast		5029673	0		=			
ANR	5029695	Identifier	dc_main_shutdown_fast		5029673	0					
ANR	5029696	Identifier	main_shutdown_fast		5029673	1					
ANR	5029697	ExpressionStatement	dc_main_shutdown_graceful = main_shutdown_graceful	516:1:12931:12981	5029673	4	True				
ANR	5029698	AssignmentExpression	dc_main_shutdown_graceful = main_shutdown_graceful		5029673	0		=			
ANR	5029699	Identifier	dc_main_shutdown_graceful		5029673	0					
ANR	5029700	Identifier	main_shutdown_graceful		5029673	1					
ANR	5029701	ExpressionStatement	dc_main_pre_command_sock_init = main_pre_command_sock_init	517:1:12984:13042	5029673	5	True				
ANR	5029702	AssignmentExpression	dc_main_pre_command_sock_init = main_pre_command_sock_init		5029673	0		=			
ANR	5029703	Identifier	dc_main_pre_command_sock_init		5029673	0					
ANR	5029704	Identifier	main_pre_command_sock_init		5029673	1					
ANR	5029705	ReturnStatement	"return dc_main ( argc , argv ) ;"	518:1:13045:13073	5029673	6	True				
ANR	5029706	CallExpression	"dc_main ( argc , argv )"		5029673	0					
ANR	5029707	Callee	dc_main		5029673	0					
ANR	5029708	Identifier	dc_main		5029673	0					
ANR	5029709	ArgumentList	argc		5029673	1					
ANR	5029710	Argument	argc		5029673	0					
ANR	5029711	Identifier	argc		5029673	0					
ANR	5029712	Argument	argv		5029673	1					
ANR	5029713	Identifier	argv		5029673	0					
ANR	5029714	ReturnType	int		5029673	1					
ANR	5029715	Identifier	main		5029673	2					
ANR	5029716	ParameterList	"int argc , char * * argv"		5029673	3					
ANR	5029717	Parameter	int argc	509:6:12748:12755	5029673	0	True				
ANR	5029718	ParameterType	int		5029673	0					
ANR	5029719	Identifier	argc		5029673	1					
ANR	5029720	Parameter	char * * argv	509:16:12758:12768	5029673	1	True				
ANR	5029721	ParameterType	char * *		5029673	0					
ANR	5029722	Identifier	argv		5029673	1					
ANR	5029723	CFGEntryNode	ENTRY		5029673		True				
ANR	5029724	CFGExitNode	EXIT		5029673		True				
ANR	5029725	Symbol	argc		5029673						
ANR	5029726	Symbol	main_shutdown_fast		5029673						
ANR	5029727	Symbol	argv		5029673						
ANR	5029728	Symbol	dc_main_init		5029673						
ANR	5029729	Symbol	main_init		5029673						
ANR	5029730	Symbol	dc_main_shutdown_fast		5029673						
ANR	5029731	Symbol	dc_main		5029673						
ANR	5029732	Symbol	dc_main_config		5029673						
ANR	5029733	Symbol	main_pre_command_sock_init		5029673						
ANR	5029734	Symbol	main_config		5029673						
ANR	5029735	Symbol	SUBSYSTEM_TYPE_GAHP		5029673						
ANR	5029736	Symbol	dc_main_shutdown_graceful		5029673						
ANR	5029737	Symbol	main_shutdown_graceful		5029673						
ANR	5029738	Symbol	dc_main_pre_command_sock_init		5029673						
