command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	1058226	File	data/converged/CVE-2011-4930_htcondor/daemon_core.cpp								
ANR	1058227	DeclStmt									
ANR	1058228	Decl							void	void ( )	Generic_stop_logging
ANR	1058229	DeclStmt									
ANR	1058230	Decl							const int	const int	DEFAULT_MAXCOMMANDS
ANR	1058231	DeclStmt									
ANR	1058232	Decl							const int	const int	DEFAULT_MAXSIGNALS
ANR	1058233	DeclStmt									
ANR	1058234	Decl							const int	const int	DEFAULT_MAXSOCKETS
ANR	1058235	DeclStmt									
ANR	1058236	Decl							const int	const int	DEFAULT_MAXPIPES
ANR	1058237	DeclStmt									
ANR	1058238	Decl							const int	const int	DEFAULT_MAXREAPS
ANR	1058239	DeclStmt									
ANR	1058240	Decl							const int	const int	DEFAULT_PIDBUCKETS
ANR	1058241	DeclStmt									
ANR	1058242	Decl							const int	const int	DEFAULT_MAX_PID_COLLISIONS
ANR	1058243	DeclStmt									
ANR	1058244	Decl							const char	const char *	DEFAULT_INDENT
ANR	1058245	DeclStmt									
ANR	1058246	Decl							const int	const int	MAX_TIME_SKIP
ANR	1058247	DeclStmt									
ANR	1058248	Decl							const int	const int	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT
ANR	1058249	DeclStmt									
ANR	1058250	Decl							const int	const int	MIN_REGISTERED_SOCKET_SAFETY_LIMIT
ANR	1058251	DeclStmt									
ANR	1058252	Decl							const int	const int	DC_PIPE_BUF_SIZE
ANR	1058253	DeclStmt									
ANR	1058254	Decl							CRITICAL_SECTION	CRITICAL_SECTION	Big_fat_mutex
ANR	1058255	DeclStmt									
ANR	1058256	Decl							const char	const char *	EMPTY_DESCRIP
ANR	1058257	DeclStmt									
ANR	1058258	Decl							const int	const int	DaemonCore :: ERRNO_EXEC_AS_ROOT
ANR	1058259	DeclStmt									
ANR	1058260	Decl							const int	const int	DaemonCore :: ERRNO_PID_COLLISION
ANR	1058261	DeclStmt									
ANR	1058262	Decl							const int	const int	DaemonCore :: ERRNO_REGISTRATION_FAILED
ANR	1058263	DeclStmt									
ANR	1058264	Decl							const int	const int	DaemonCore :: ERRNO_EXIT
ANR	1058265	ClassDef	<unnamed>	142:9:4383:4677							
ANR	1058266	DeclStmt									
ANR	1058267	Decl							long	long	osfhnd
ANR	1058268	DeclStmt									
ANR	1058269	Decl							char	char	osfile
ANR	1058270	DeclStmt									
ANR	1058271	Decl							char	char	pipech
ANR	1058272	DeclStmt									
ANR	1058273	Decl							int	int	lockinitflag
ANR	1058274	DeclStmt									
ANR	1058275	Decl							CRITICAL_SECTION	CRITICAL_SECTION	lock
ANR	1058276	DeclStmt									
ANR	1058277	Decl									ioinfo
ANR	1058278	DeclStmt									
ANR	1058279	Decl							extern _CRTIMP ioinfo	extern _CRTIMP ioinfo * [ ]	__pioinfo
ANR	1058280	DeclStmt									
ANR	1058281	Decl							extern int	extern int	_nhandle
ANR	1058282	DeclStmt									
ANR	1058283	Decl							extern void __cdecl	extern void __cdecl ( int )	_lock_fhandle
ANR	1058284	DeclStmt									
ANR	1058285	Decl							extern void __cdecl	extern void __cdecl ( int )	_unlock_fhandle
ANR	1058286	Function	tdp_wait_stopped_child	176:0:5567:6211							
ANR	1058287	FunctionDef	tdp_wait_stopped_child (pid_t pid)		1058286	0					
ANR	1058288	CompoundStatement		178:0:5606:6211	1058286	0					
ANR	1058289	IdentifierDeclStatement	int wait_val ;	180:4:5613:5625	1058286	0	True				
ANR	1058290	IdentifierDecl	wait_val		1058286	0					
ANR	1058291	IdentifierDeclType	int		1058286	0					
ANR	1058292	Identifier	wait_val		1058286	1					
ANR	1058293	IfStatement	"if ( waitpid ( pid , & wait_val , 0 ) == - 1 )"		1058286	1					
ANR	1058294	Condition	"waitpid ( pid , & wait_val , 0 ) == - 1"	182:8:5636:5667	1058286	0	True				
ANR	1058295	EqualityExpression	"waitpid ( pid , & wait_val , 0 ) == - 1"		1058286	0		==			
ANR	1058296	CallExpression	"waitpid ( pid , & wait_val , 0 )"		1058286	0					
ANR	1058297	Callee	waitpid		1058286	0					
ANR	1058298	Identifier	waitpid		1058286	0					
ANR	1058299	ArgumentList	pid		1058286	1					
ANR	1058300	Argument	pid		1058286	0					
ANR	1058301	Identifier	pid		1058286	0					
ANR	1058302	Argument	& wait_val		1058286	1					
ANR	1058303	UnaryOperationExpression	& wait_val		1058286	0					
ANR	1058304	UnaryOperator	&		1058286	0					
ANR	1058305	Identifier	wait_val		1058286	1					
ANR	1058306	Argument	0		1058286	2					
ANR	1058307	PrimaryExpression	0		1058286	0					
ANR	1058308	UnaryOperationExpression	- 1		1058286	1					
ANR	1058309	UnaryOperator	-		1058286	0					
ANR	1058310	PrimaryExpression	1		1058286	1					
ANR	1058311	CompoundStatement		5:42:63:63	1058286	1					
ANR	1058312	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child wait failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	183:1:5673:5764	1058286	0	True				
ANR	1058313	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child wait failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		1058286	0					
ANR	1058314	Callee	dprintf		1058286	0					
ANR	1058315	Identifier	dprintf		1058286	0					
ANR	1058316	ArgumentList	D_ALWAYS		1058286	1					
ANR	1058317	Argument	D_ALWAYS		1058286	0					
ANR	1058318	Identifier	D_ALWAYS		1058286	0					
ANR	1058319	Argument	"""Wait for Stopped Child wait failed: %d (%s) \\n"""		1058286	1					
ANR	1058320	PrimaryExpression	"""Wait for Stopped Child wait failed: %d (%s) \\n"""		1058286	0					
ANR	1058321	Argument	errno		1058286	2					
ANR	1058322	Identifier	errno		1058286	0					
ANR	1058323	Argument	strerror ( errno )		1058286	3					
ANR	1058324	CallExpression	strerror ( errno )		1058286	0					
ANR	1058325	Callee	strerror		1058286	0					
ANR	1058326	Identifier	strerror		1058286	0					
ANR	1058327	ArgumentList	errno		1058286	1					
ANR	1058328	Argument	errno		1058286	0					
ANR	1058329	Identifier	errno		1058286	0					
ANR	1058330	ReturnStatement	return - 1 ;	184:1:5767:5776	1058286	1	True				
ANR	1058331	UnaryOperationExpression	- 1		1058286	0					
ANR	1058332	UnaryOperator	-		1058286	0					
ANR	1058333	PrimaryExpression	1		1058286	1					
ANR	1058334	IfStatement	if ( ! WIFSTOPPED ( wait_val ) )		1058286	2					
ANR	1058335	Condition	! WIFSTOPPED ( wait_val )	187:7:5792:5812	1058286	0	True				
ANR	1058336	UnaryOperationExpression	! WIFSTOPPED ( wait_val )		1058286	0					
ANR	1058337	UnaryOperator	!		1058286	0					
ANR	1058338	CallExpression	WIFSTOPPED ( wait_val )		1058286	1					
ANR	1058339	Callee	WIFSTOPPED		1058286	0					
ANR	1058340	Identifier	WIFSTOPPED		1058286	0					
ANR	1058341	ArgumentList	wait_val		1058286	1					
ANR	1058342	Argument	wait_val		1058286	0					
ANR	1058343	Identifier	wait_val		1058286	0					
ANR	1058344	CompoundStatement		10:30:208:208	1058286	1					
ANR	1058345	ReturnStatement	return - 1 ;	188:1:5818:5827	1058286	0	True				
ANR	1058346	UnaryOperationExpression	- 1		1058286	0					
ANR	1058347	UnaryOperator	-		1058286	0					
ANR	1058348	PrimaryExpression	1		1058286	1					
ANR	1058349	IfStatement	"if ( kill ( pid , SIGSTOP ) < 0 )"		1058286	3					
ANR	1058350	Condition	"kill ( pid , SIGSTOP ) < 0"	191:8:5895:5916	1058286	0	True				
ANR	1058351	RelationalExpression	"kill ( pid , SIGSTOP ) < 0"		1058286	0		<			
ANR	1058352	CallExpression	"kill ( pid , SIGSTOP )"		1058286	0					
ANR	1058353	Callee	kill		1058286	0					
ANR	1058354	Identifier	kill		1058286	0					
ANR	1058355	ArgumentList	pid		1058286	1					
ANR	1058356	Argument	pid		1058286	0					
ANR	1058357	Identifier	pid		1058286	0					
ANR	1058358	Argument	SIGSTOP		1058286	1					
ANR	1058359	Identifier	SIGSTOP		1058286	0					
ANR	1058360	PrimaryExpression	0		1058286	1					
ANR	1058361	CompoundStatement		14:32:312:312	1058286	1					
ANR	1058362	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child kill failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	192:1:5922:6013	1058286	0	True				
ANR	1058363	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child kill failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		1058286	0					
ANR	1058364	Callee	dprintf		1058286	0					
ANR	1058365	Identifier	dprintf		1058286	0					
ANR	1058366	ArgumentList	D_ALWAYS		1058286	1					
ANR	1058367	Argument	D_ALWAYS		1058286	0					
ANR	1058368	Identifier	D_ALWAYS		1058286	0					
ANR	1058369	Argument	"""Wait for Stopped Child kill failed: %d (%s) \\n"""		1058286	1					
ANR	1058370	PrimaryExpression	"""Wait for Stopped Child kill failed: %d (%s) \\n"""		1058286	0					
ANR	1058371	Argument	errno		1058286	2					
ANR	1058372	Identifier	errno		1058286	0					
ANR	1058373	Argument	strerror ( errno )		1058286	3					
ANR	1058374	CallExpression	strerror ( errno )		1058286	0					
ANR	1058375	Callee	strerror		1058286	0					
ANR	1058376	Identifier	strerror		1058286	0					
ANR	1058377	ArgumentList	errno		1058286	1					
ANR	1058378	Argument	errno		1058286	0					
ANR	1058379	Identifier	errno		1058286	0					
ANR	1058380	ReturnStatement	return - 1 ;	193:1:6016:6025	1058286	1	True				
ANR	1058381	UnaryOperationExpression	- 1		1058286	0					
ANR	1058382	UnaryOperator	-		1058286	0					
ANR	1058383	PrimaryExpression	1		1058286	1					
ANR	1058384	IfStatement	"if ( ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0 )"		1058286	4					
ANR	1058385	Condition	"ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0"	196:8:6042:6077	1058286	0	True				
ANR	1058386	RelationalExpression	"ptrace ( PTRACE_DETACH , pid , 0 , 0 ) < 0"		1058286	0		<			
ANR	1058387	CallExpression	"ptrace ( PTRACE_DETACH , pid , 0 , 0 )"		1058286	0					
ANR	1058388	Callee	ptrace		1058286	0					
ANR	1058389	Identifier	ptrace		1058286	0					
ANR	1058390	ArgumentList	PTRACE_DETACH		1058286	1					
ANR	1058391	Argument	PTRACE_DETACH		1058286	0					
ANR	1058392	Identifier	PTRACE_DETACH		1058286	0					
ANR	1058393	Argument	pid		1058286	1					
ANR	1058394	Identifier	pid		1058286	0					
ANR	1058395	Argument	0		1058286	2					
ANR	1058396	PrimaryExpression	0		1058286	0					
ANR	1058397	Argument	0		1058286	3					
ANR	1058398	PrimaryExpression	0		1058286	0					
ANR	1058399	PrimaryExpression	0		1058286	1					
ANR	1058400	CompoundStatement		19:46:473:473	1058286	1					
ANR	1058401	ExpressionStatement	"dprintf ( D_ALWAYS , ""Wait for Stopped Child detach failed: %d (%s) \\n"" , errno , strerror ( errno ) )"	197:1:6083:6176	1058286	0	True				
ANR	1058402	CallExpression	"dprintf ( D_ALWAYS , ""Wait for Stopped Child detach failed: %d (%s) \\n"" , errno , strerror ( errno ) )"		1058286	0					
ANR	1058403	Callee	dprintf		1058286	0					
ANR	1058404	Identifier	dprintf		1058286	0					
ANR	1058405	ArgumentList	D_ALWAYS		1058286	1					
ANR	1058406	Argument	D_ALWAYS		1058286	0					
ANR	1058407	Identifier	D_ALWAYS		1058286	0					
ANR	1058408	Argument	"""Wait for Stopped Child detach failed: %d (%s) \\n"""		1058286	1					
ANR	1058409	PrimaryExpression	"""Wait for Stopped Child detach failed: %d (%s) \\n"""		1058286	0					
ANR	1058410	Argument	errno		1058286	2					
ANR	1058411	Identifier	errno		1058286	0					
ANR	1058412	Argument	strerror ( errno )		1058286	3					
ANR	1058413	CallExpression	strerror ( errno )		1058286	0					
ANR	1058414	Callee	strerror		1058286	0					
ANR	1058415	Identifier	strerror		1058286	0					
ANR	1058416	ArgumentList	errno		1058286	1					
ANR	1058417	Argument	errno		1058286	0					
ANR	1058418	Identifier	errno		1058286	0					
ANR	1058419	ReturnStatement	return - 1 ;	198:1:6179:6188	1058286	1	True				
ANR	1058420	UnaryOperationExpression	- 1		1058286	0					
ANR	1058421	UnaryOperator	-		1058286	0					
ANR	1058422	PrimaryExpression	1		1058286	1					
ANR	1058423	ReturnStatement	return 0 ;	201:4:6201:6209	1058286	5	True				
ANR	1058424	PrimaryExpression	0		1058286	0					
ANR	1058425	ReturnType	int		1058286	1					
ANR	1058426	Identifier	tdp_wait_stopped_child		1058286	2					
ANR	1058427	ParameterList	pid_t pid		1058286	3					
ANR	1058428	Parameter	pid_t pid	177:24:5595:5603	1058286	0	True				
ANR	1058429	ParameterType	pid_t		1058286	0					
ANR	1058430	Identifier	pid		1058286	1					
ANR	1058431	CFGEntryNode	ENTRY		1058286		True				
ANR	1058432	CFGExitNode	EXIT		1058286		True				
ANR	1058433	Symbol	strerror		1058286						
ANR	1058434	Symbol	errno		1058286						
ANR	1058435	Symbol	wait_val		1058286						
ANR	1058436	Symbol	ptrace		1058286						
ANR	1058437	Symbol	SIGSTOP		1058286						
ANR	1058438	Symbol	PTRACE_DETACH		1058286						
ANR	1058439	Symbol	& wait_val		1058286						
ANR	1058440	Symbol	D_ALWAYS		1058286						
ANR	1058441	Symbol	pid		1058286						
ANR	1058442	Symbol	kill		1058286						
ANR	1058443	Symbol	waitpid		1058286						
ANR	1058444	Symbol	WIFSTOPPED		1058286						
ANR	1058445	DeclStmt									
ANR	1058446	Decl							unsigned int	unsigned int	ZZZZZ
ANR	1058447	Function	ZZZ_always_increase	227:0:6782:6827							
ANR	1058448	FunctionDef	ZZZ_always_increase ()		1058447	0					
ANR	1058449	CompoundStatement		227:26:6808:6827	1058447	0					
ANR	1058450	ReturnStatement	return ZZZZZ ++ ;	228:1:6811:6825	1058447	0	True				
ANR	1058451	PostIncDecOperationExpression	ZZZZZ ++		1058447	0					
ANR	1058452	Identifier	ZZZZZ		1058447	0					
ANR	1058453	IncDec	++		1058447	1					
ANR	1058454	ReturnType	int		1058447	1					
ANR	1058455	Identifier	ZZZ_always_increase		1058447	2					
ANR	1058456	ParameterList			1058447	3					
ANR	1058457	CFGEntryNode	ENTRY		1058447		True				
ANR	1058458	CFGExitNode	EXIT		1058447		True				
ANR	1058459	Symbol	ZZZZZ		1058447						
ANR	1058460	DeclStmt									
ANR	1058461	Decl							int	int	_condor_exit_with_exec
ANR	1058462	DeclStmt									
ANR	1058463	Decl							void	void * *	curr_dataptr
ANR	1058464	DeclStmt									
ANR	1058465	Decl							void	void * *	curr_regdataptr
ANR	1058466	DeclStmt									
ANR	1058467	Decl							extern void	extern void ( void )	drop_addr_file
ANR	1058468	DeclStmt									
ANR	1058469	Decl							TimerManager	TimerManager	DaemonCore :: t
ANR	1058470	Function	compute_pid_hash	241:0:7014:7098							
ANR	1058471	FunctionDef	compute_pid_hash (const pid_t & key)		1058470	0					
ANR	1058472	CompoundStatement		242:0:7069:7098	1058470	0					
ANR	1058473	ReturnStatement	return ( unsigned int ) key ;	243:1:7072:7096	1058470	0	True				
ANR	1058474	CastExpression	( unsigned int ) key		1058470	0					
ANR	1058475	CastTarget	unsigned int		1058470	0					
ANR	1058476	Identifier	key		1058470	1					
ANR	1058477	ReturnType	static unsigned int		1058470	1					
ANR	1058478	Identifier	compute_pid_hash		1058470	2					
ANR	1058479	ParameterList	const pid_t & key		1058470	3					
ANR	1058480	Parameter	const pid_t & key	241:37:7051:7066	1058470	0	True				
ANR	1058481	ParameterType	const pid_t &		1058470	0					
ANR	1058482	Identifier	key		1058470	1					
ANR	1058483	CFGEntryNode	ENTRY		1058470		True				
ANR	1058484	CFGExitNode	EXIT		1058470		True				
ANR	1058485	Symbol	key		1058470						
ANR	1058486	Function	DaemonCore :: DaemonCore	248:0:7129:13174							
ANR	1058487	FunctionDef	"DaemonCore :: DaemonCore (int PidSize , int ComSize , int SigSize , int SocSize , int ReapSize , int PipeSize)"		1058486	0					
ANR	1058488	CompoundStatement		250:0:7233:13174	1058486	0					
ANR	1058489	IfStatement	if ( ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0 )		1058486	0					
ANR	1058490	Condition	ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0	252:4:7240:7295	1058486	0	True				
ANR	1058491	OrExpression	ComSize < 0 || SigSize < 0 || SocSize < 0 || PidSize < 0		1058486	0		||			
ANR	1058492	RelationalExpression	ComSize < 0		1058486	0		<			
ANR	1058493	Identifier	ComSize		1058486	0					
ANR	1058494	PrimaryExpression	0		1058486	1					
ANR	1058495	OrExpression	SigSize < 0 || SocSize < 0 || PidSize < 0		1058486	1		||			
ANR	1058496	RelationalExpression	SigSize < 0		1058486	0		<			
ANR	1058497	Identifier	SigSize		1058486	0					
ANR	1058498	PrimaryExpression	0		1058486	1					
ANR	1058499	OrExpression	SocSize < 0 || PidSize < 0		1058486	1		||			
ANR	1058500	RelationalExpression	SocSize < 0		1058486	0		<			
ANR	1058501	Identifier	SocSize		1058486	0					
ANR	1058502	PrimaryExpression	0		1058486	1					
ANR	1058503	RelationalExpression	PidSize < 0		1058486	1		<			
ANR	1058504	Identifier	PidSize		1058486	0					
ANR	1058505	PrimaryExpression	0		1058486	1					
ANR	1058506	CompoundStatement		4:1:65:65	1058486	1					
ANR	1058507	ExpressionStatement	"EXCEPT ( ""Invalid argument(s) for DaemonCore constructor"" )"	254:2:7303:7359	1058486	0	True				
ANR	1058508	CallExpression	"EXCEPT ( ""Invalid argument(s) for DaemonCore constructor"" )"		1058486	0					
ANR	1058509	Callee	EXCEPT		1058486	0					
ANR	1058510	Identifier	EXCEPT		1058486	0					
ANR	1058511	ArgumentList	"""Invalid argument(s) for DaemonCore constructor"""		1058486	1					
ANR	1058512	Argument	"""Invalid argument(s) for DaemonCore constructor"""		1058486	0					
ANR	1058513	PrimaryExpression	"""Invalid argument(s) for DaemonCore constructor"""		1058486	0					
ANR	1058514	ExpressionStatement	dc_stats . Init ( )	257:4:7369:7384	1058486	1	True				
ANR	1058515	CallExpression	dc_stats . Init ( )		1058486	0					
ANR	1058516	Callee	dc_stats . Init		1058486	0					
ANR	1058517	MemberAccess	dc_stats . Init		1058486	0					
ANR	1058518	Identifier	dc_stats		1058486	0					
ANR	1058519	Identifier	Init		1058486	1					
ANR	1058520	ArgumentList			1058486	1					
ANR	1058521	ExpressionStatement	dc_stats . SetWindowSize ( 20 * 60 )	258:4:7415:7444	1058486	2	True				
ANR	1058522	CallExpression	dc_stats . SetWindowSize ( 20 * 60 )		1058486	0					
ANR	1058523	Callee	dc_stats . SetWindowSize		1058486	0					
ANR	1058524	MemberAccess	dc_stats . SetWindowSize		1058486	0					
ANR	1058525	Identifier	dc_stats		1058486	0					
ANR	1058526	Identifier	SetWindowSize		1058486	1					
ANR	1058527	ArgumentList	20 * 60		1058486	1					
ANR	1058528	Argument	20 * 60		1058486	0					
ANR	1058529	MultiplicativeExpression	20 * 60		1058486	0		*			
ANR	1058530	PrimaryExpression	20		1058486	0					
ANR	1058531	PrimaryExpression	60		1058486	1					
ANR	1058532	ExpressionStatement	"daemonCoreSockAdapter . EnableDaemonCore ( this , ( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket , & DaemonCore :: Cancel_Socket , & DaemonCore :: CallSocketHandler , & DaemonCore :: CallCommandHandler , & DaemonCore :: HandleReqAsync , & DaemonCore :: Register_DataPtr , & DaemonCore :: GetDataPtr , ( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer , ( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer , & DaemonCore :: Cancel_Timer , & DaemonCore :: TooManyRegisteredSockets , & DaemonCore :: incrementPendingSockets , & DaemonCore :: decrementPendingSockets , & DaemonCore :: publicNetworkIpAddr , & DaemonCore :: Register_Command , & DaemonCore :: daemonContactInfoChanged , & DaemonCore :: Register_Timer_TS )"	264:1:7661:8572	1058486	3	True				
ANR	1058533	CallExpression	"daemonCoreSockAdapter . EnableDaemonCore ( this , ( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket , & DaemonCore :: Cancel_Socket , & DaemonCore :: CallSocketHandler , & DaemonCore :: CallCommandHandler , & DaemonCore :: HandleReqAsync , & DaemonCore :: Register_DataPtr , & DaemonCore :: GetDataPtr , ( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer , ( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer , & DaemonCore :: Cancel_Timer , & DaemonCore :: TooManyRegisteredSockets , & DaemonCore :: incrementPendingSockets , & DaemonCore :: decrementPendingSockets , & DaemonCore :: publicNetworkIpAddr , & DaemonCore :: Register_Command , & DaemonCore :: daemonContactInfoChanged , & DaemonCore :: Register_Timer_TS )"		1058486	0					
ANR	1058534	Callee	daemonCoreSockAdapter . EnableDaemonCore		1058486	0					
ANR	1058535	MemberAccess	daemonCoreSockAdapter . EnableDaemonCore		1058486	0					
ANR	1058536	Identifier	daemonCoreSockAdapter		1058486	0					
ANR	1058537	Identifier	EnableDaemonCore		1058486	1					
ANR	1058538	ArgumentList	this		1058486	1					
ANR	1058539	Argument	this		1058486	0					
ANR	1058540	Identifier	this		1058486	0					
ANR	1058541	Argument	( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket		1058486	1					
ANR	1058542	CastExpression	( DaemonCoreSockAdapterClass :: Register_Socket_fnptr ) & DaemonCore :: Register_Socket		1058486	0					
ANR	1058543	CastTarget	DaemonCoreSockAdapterClass :: Register_Socket_fnptr		1058486	0					
ANR	1058544	UnaryOperationExpression	& DaemonCore :: Register_Socket		1058486	1					
ANR	1058545	UnaryOperator	&		1058486	0					
ANR	1058546	Identifier	DaemonCore :: Register_Socket		1058486	1					
ANR	1058547	Argument	& DaemonCore :: Cancel_Socket		1058486	2					
ANR	1058548	UnaryOperationExpression	& DaemonCore :: Cancel_Socket		1058486	0					
ANR	1058549	UnaryOperator	&		1058486	0					
ANR	1058550	Identifier	DaemonCore :: Cancel_Socket		1058486	1					
ANR	1058551	Argument	& DaemonCore :: CallSocketHandler		1058486	3					
ANR	1058552	UnaryOperationExpression	& DaemonCore :: CallSocketHandler		1058486	0					
ANR	1058553	UnaryOperator	&		1058486	0					
ANR	1058554	Identifier	DaemonCore :: CallSocketHandler		1058486	1					
ANR	1058555	Argument	& DaemonCore :: CallCommandHandler		1058486	4					
ANR	1058556	UnaryOperationExpression	& DaemonCore :: CallCommandHandler		1058486	0					
ANR	1058557	UnaryOperator	&		1058486	0					
ANR	1058558	Identifier	DaemonCore :: CallCommandHandler		1058486	1					
ANR	1058559	Argument	& DaemonCore :: HandleReqAsync		1058486	5					
ANR	1058560	UnaryOperationExpression	& DaemonCore :: HandleReqAsync		1058486	0					
ANR	1058561	UnaryOperator	&		1058486	0					
ANR	1058562	Identifier	DaemonCore :: HandleReqAsync		1058486	1					
ANR	1058563	Argument	& DaemonCore :: Register_DataPtr		1058486	6					
ANR	1058564	UnaryOperationExpression	& DaemonCore :: Register_DataPtr		1058486	0					
ANR	1058565	UnaryOperator	&		1058486	0					
ANR	1058566	Identifier	DaemonCore :: Register_DataPtr		1058486	1					
ANR	1058567	Argument	& DaemonCore :: GetDataPtr		1058486	7					
ANR	1058568	UnaryOperationExpression	& DaemonCore :: GetDataPtr		1058486	0					
ANR	1058569	UnaryOperator	&		1058486	0					
ANR	1058570	Identifier	DaemonCore :: GetDataPtr		1058486	1					
ANR	1058571	Argument	( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer		1058486	8					
ANR	1058572	CastExpression	( DaemonCoreSockAdapterClass :: Register_Timer_fnptr ) & DaemonCore :: Register_Timer		1058486	0					
ANR	1058573	CastTarget	DaemonCoreSockAdapterClass :: Register_Timer_fnptr		1058486	0					
ANR	1058574	UnaryOperationExpression	& DaemonCore :: Register_Timer		1058486	1					
ANR	1058575	UnaryOperator	&		1058486	0					
ANR	1058576	Identifier	DaemonCore :: Register_Timer		1058486	1					
ANR	1058577	Argument	( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer		1058486	9					
ANR	1058578	CastExpression	( DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr ) & DaemonCore :: Register_Timer		1058486	0					
ANR	1058579	CastTarget	DaemonCoreSockAdapterClass :: Register_PeriodicTimer_fnptr		1058486	0					
ANR	1058580	UnaryOperationExpression	& DaemonCore :: Register_Timer		1058486	1					
ANR	1058581	UnaryOperator	&		1058486	0					
ANR	1058582	Identifier	DaemonCore :: Register_Timer		1058486	1					
ANR	1058583	Argument	& DaemonCore :: Cancel_Timer		1058486	10					
ANR	1058584	UnaryOperationExpression	& DaemonCore :: Cancel_Timer		1058486	0					
ANR	1058585	UnaryOperator	&		1058486	0					
ANR	1058586	Identifier	DaemonCore :: Cancel_Timer		1058486	1					
ANR	1058587	Argument	& DaemonCore :: TooManyRegisteredSockets		1058486	11					
ANR	1058588	UnaryOperationExpression	& DaemonCore :: TooManyRegisteredSockets		1058486	0					
ANR	1058589	UnaryOperator	&		1058486	0					
ANR	1058590	Identifier	DaemonCore :: TooManyRegisteredSockets		1058486	1					
ANR	1058591	Argument	& DaemonCore :: incrementPendingSockets		1058486	12					
ANR	1058592	UnaryOperationExpression	& DaemonCore :: incrementPendingSockets		1058486	0					
ANR	1058593	UnaryOperator	&		1058486	0					
ANR	1058594	Identifier	DaemonCore :: incrementPendingSockets		1058486	1					
ANR	1058595	Argument	& DaemonCore :: decrementPendingSockets		1058486	13					
ANR	1058596	UnaryOperationExpression	& DaemonCore :: decrementPendingSockets		1058486	0					
ANR	1058597	UnaryOperator	&		1058486	0					
ANR	1058598	Identifier	DaemonCore :: decrementPendingSockets		1058486	1					
ANR	1058599	Argument	& DaemonCore :: publicNetworkIpAddr		1058486	14					
ANR	1058600	UnaryOperationExpression	& DaemonCore :: publicNetworkIpAddr		1058486	0					
ANR	1058601	UnaryOperator	&		1058486	0					
ANR	1058602	Identifier	DaemonCore :: publicNetworkIpAddr		1058486	1					
ANR	1058603	Argument	& DaemonCore :: Register_Command		1058486	15					
ANR	1058604	UnaryOperationExpression	& DaemonCore :: Register_Command		1058486	0					
ANR	1058605	UnaryOperator	&		1058486	0					
ANR	1058606	Identifier	DaemonCore :: Register_Command		1058486	1					
ANR	1058607	Argument	& DaemonCore :: daemonContactInfoChanged		1058486	16					
ANR	1058608	UnaryOperationExpression	& DaemonCore :: daemonContactInfoChanged		1058486	0					
ANR	1058609	UnaryOperator	&		1058486	0					
ANR	1058610	Identifier	DaemonCore :: daemonContactInfoChanged		1058486	1					
ANR	1058611	Argument	& DaemonCore :: Register_Timer_TS		1058486	17					
ANR	1058612	UnaryOperationExpression	& DaemonCore :: Register_Timer_TS		1058486	0					
ANR	1058613	UnaryOperator	&		1058486	0					
ANR	1058614	Identifier	DaemonCore :: Register_Timer_TS		1058486	1					
ANR	1058615	IfStatement	if ( PidSize == 0 )		1058486	4					
ANR	1058616	Condition	PidSize == 0	286:6:8581:8592	1058486	0	True				
ANR	1058617	EqualityExpression	PidSize == 0		1058486	0		==			
ANR	1058618	Identifier	PidSize		1058486	0					
ANR	1058619	PrimaryExpression	0		1058486	1					
ANR	1058620	ExpressionStatement	PidSize = DEFAULT_PIDBUCKETS	287:2:8598:8626	1058486	1	True				
ANR	1058621	AssignmentExpression	PidSize = DEFAULT_PIDBUCKETS		1058486	0		=			
ANR	1058622	Identifier	PidSize		1058486	0					
ANR	1058623	Identifier	DEFAULT_PIDBUCKETS		1058486	1					
ANR	1058624	ExpressionStatement	"pidTable = new PidHashTable ( PidSize , compute_pid_hash )"	288:1:8629:8683	1058486	5	True				
ANR	1058625	AssignmentExpression	"pidTable = new PidHashTable ( PidSize , compute_pid_hash )"		1058486	0		=			
ANR	1058626	Identifier	pidTable		1058486	0					
ANR	1058627	Expression	"PidSize , compute_pid_hash"		1058486	1					
ANR	1058628	Identifier	PidSize		1058486	0					
ANR	1058629	Identifier	compute_pid_hash		1058486	1					
ANR	1058630	ExpressionStatement	ppid = 0	289:1:8686:8694	1058486	6	True				
ANR	1058631	AssignmentExpression	ppid = 0		1058486	0		=			
ANR	1058632	Identifier	ppid		1058486	0					
ANR	1058633	PrimaryExpression	0		1058486	1					
ANR	1058634	ExpressionStatement	InitializeCriticalSection ( & Big_fat_mutex )	292:1:8729:8770	1058486	7	True				
ANR	1058635	CallExpression	InitializeCriticalSection ( & Big_fat_mutex )		1058486	0					
ANR	1058636	Callee	InitializeCriticalSection		1058486	0					
ANR	1058637	Identifier	InitializeCriticalSection		1058486	0					
ANR	1058638	ArgumentList	& Big_fat_mutex		1058486	1					
ANR	1058639	Argument	& Big_fat_mutex		1058486	0					
ANR	1058640	UnaryOperationExpression	& Big_fat_mutex		1058486	0					
ANR	1058641	UnaryOperator	&		1058486	0					
ANR	1058642	Identifier	Big_fat_mutex		1058486	1					
ANR	1058643	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	293:1:8773:8809	1058486	8	True				
ANR	1058644	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		1058486	0					
ANR	1058645	Callee	EnterCriticalSection		1058486	0					
ANR	1058646	Identifier	EnterCriticalSection		1058486	0					
ANR	1058647	ArgumentList	& Big_fat_mutex		1058486	1					
ANR	1058648	Argument	& Big_fat_mutex		1058486	0					
ANR	1058649	UnaryOperationExpression	& Big_fat_mutex		1058486	0					
ANR	1058650	UnaryOperator	&		1058486	0					
ANR	1058651	Identifier	Big_fat_mutex		1058486	1					
ANR	1058652	Statement	mypid	295:1:8813:8817	1058486	9	True				
ANR	1058653	Statement	=	295:7:8819:8819	1058486	10	True				
ANR	1058654	Statement	::	295:9:8821:8822	1058486	11	True				
ANR	1058655	ExpressionStatement	GetCurrentProcessId ( )	295:11:8823:8844	1058486	12	True				
ANR	1058656	CallExpression	GetCurrentProcessId ( )		1058486	0					
ANR	1058657	Callee	GetCurrentProcessId		1058486	0					
ANR	1058658	Identifier	GetCurrentProcessId		1058486	0					
ANR	1058659	ArgumentList			1058486	1					
ANR	1058660	ExpressionStatement	m_proc_family = NULL	304:1:9067:9087	1058486	13	True				
ANR	1058661	AssignmentExpression	m_proc_family = NULL		1058486	0		=			
ANR	1058662	Identifier	m_proc_family		1058486	0					
ANR	1058663	Identifier	NULL		1058486	1					
ANR	1058664	ExpressionStatement	maxCommand = ComSize	306:1:9091:9111	1058486	14	True				
ANR	1058665	AssignmentExpression	maxCommand = ComSize		1058486	0		=			
ANR	1058666	Identifier	maxCommand		1058486	0					
ANR	1058667	Identifier	ComSize		1058486	1					
ANR	1058668	ExpressionStatement	maxSig = SigSize	307:1:9114:9130	1058486	15	True				
ANR	1058669	AssignmentExpression	maxSig = SigSize		1058486	0		=			
ANR	1058670	Identifier	maxSig		1058486	0					
ANR	1058671	Identifier	SigSize		1058486	1					
ANR	1058672	ExpressionStatement	maxSocket = SocSize	308:1:9133:9152	1058486	16	True				
ANR	1058673	AssignmentExpression	maxSocket = SocSize		1058486	0		=			
ANR	1058674	Identifier	maxSocket		1058486	0					
ANR	1058675	Identifier	SocSize		1058486	1					
ANR	1058676	ExpressionStatement	maxReap = ReapSize	309:1:9155:9173	1058486	17	True				
ANR	1058677	AssignmentExpression	maxReap = ReapSize		1058486	0		=			
ANR	1058678	Identifier	maxReap		1058486	0					
ANR	1058679	Identifier	ReapSize		1058486	1					
ANR	1058680	ExpressionStatement	maxPipe = PipeSize	310:1:9176:9194	1058486	18	True				
ANR	1058681	AssignmentExpression	maxPipe = PipeSize		1058486	0		=			
ANR	1058682	Identifier	maxPipe		1058486	0					
ANR	1058683	Identifier	PipeSize		1058486	1					
ANR	1058684	IfStatement	if ( maxCommand == 0 )		1058486	19					
ANR	1058685	Condition	maxCommand == 0	312:4:9201:9215	1058486	0	True				
ANR	1058686	EqualityExpression	maxCommand == 0		1058486	0		==			
ANR	1058687	Identifier	maxCommand		1058486	0					
ANR	1058688	PrimaryExpression	0		1058486	1					
ANR	1058689	ExpressionStatement	maxCommand = DEFAULT_MAXCOMMANDS	313:2:9220:9252	1058486	1	True				
ANR	1058690	AssignmentExpression	maxCommand = DEFAULT_MAXCOMMANDS		1058486	0		=			
ANR	1058691	Identifier	maxCommand		1058486	0					
ANR	1058692	Identifier	DEFAULT_MAXCOMMANDS		1058486	1					
ANR	1058693	ExpressionStatement	comTable = new CommandEnt [ maxCommand ]	315:1:9256:9293	1058486	20	True				
ANR	1058694	AssignmentExpression	comTable = new CommandEnt [ maxCommand ]		1058486	0		=			
ANR	1058695	Identifier	comTable		1058486	0					
ANR	1058696	Identifier	maxCommand		1058486	1					
ANR	1058697	IfStatement	if ( comTable == NULL )		1058486	21					
ANR	1058698	Condition	comTable == NULL	316:4:9299:9314	1058486	0	True				
ANR	1058699	EqualityExpression	comTable == NULL		1058486	0		==			
ANR	1058700	Identifier	comTable		1058486	0					
ANR	1058701	Identifier	NULL		1058486	1					
ANR	1058702	CompoundStatement		67:22:2083:2083	1058486	1					
ANR	1058703	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	317:2:9321:9345	1058486	0	True				
ANR	1058704	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1058486	0					
ANR	1058705	Callee	EXCEPT		1058486	0					
ANR	1058706	Identifier	EXCEPT		1058486	0					
ANR	1058707	ArgumentList	"""Out of memory!"""		1058486	1					
ANR	1058708	Argument	"""Out of memory!"""		1058486	0					
ANR	1058709	PrimaryExpression	"""Out of memory!"""		1058486	0					
ANR	1058710	ExpressionStatement	nCommand = 0	319:1:9351:9363	1058486	22	True				
ANR	1058711	AssignmentExpression	nCommand = 0		1058486	0		=			
ANR	1058712	Identifier	nCommand		1058486	0					
ANR	1058713	PrimaryExpression	0		1058486	1					
ANR	1058714	ExpressionStatement	"memset ( comTable , '\\0' , maxCommand * sizeof ( CommandEnt ) )"	320:1:9366:9417	1058486	23	True				
ANR	1058715	CallExpression	"memset ( comTable , '\\0' , maxCommand * sizeof ( CommandEnt ) )"		1058486	0					
ANR	1058716	Callee	memset		1058486	0					
ANR	1058717	Identifier	memset		1058486	0					
ANR	1058718	ArgumentList	comTable		1058486	1					
ANR	1058719	Argument	comTable		1058486	0					
ANR	1058720	Identifier	comTable		1058486	0					
ANR	1058721	Argument	'\\0'		1058486	1					
ANR	1058722	PrimaryExpression	'\\0'		1058486	0					
ANR	1058723	Argument	maxCommand * sizeof ( CommandEnt )		1058486	2					
ANR	1058724	MultiplicativeExpression	maxCommand * sizeof ( CommandEnt )		1058486	0		*			
ANR	1058725	Identifier	maxCommand		1058486	0					
ANR	1058726	SizeofExpression	sizeof ( CommandEnt )		1058486	1					
ANR	1058727	Sizeof	sizeof		1058486	0					
ANR	1058728	SizeofOperand	CommandEnt		1058486	1					
ANR	1058729	IfStatement	if ( maxSig == 0 )		1058486	24					
ANR	1058730	Condition	maxSig == 0	322:4:9424:9434	1058486	0	True				
ANR	1058731	EqualityExpression	maxSig == 0		1058486	0		==			
ANR	1058732	Identifier	maxSig		1058486	0					
ANR	1058733	PrimaryExpression	0		1058486	1					
ANR	1058734	ExpressionStatement	maxSig = DEFAULT_MAXSIGNALS	323:2:9439:9466	1058486	1	True				
ANR	1058735	AssignmentExpression	maxSig = DEFAULT_MAXSIGNALS		1058486	0		=			
ANR	1058736	Identifier	maxSig		1058486	0					
ANR	1058737	Identifier	DEFAULT_MAXSIGNALS		1058486	1					
ANR	1058738	ExpressionStatement	sigTable = new SignalEnt [ maxSig ]	325:1:9470:9502	1058486	25	True				
ANR	1058739	AssignmentExpression	sigTable = new SignalEnt [ maxSig ]		1058486	0		=			
ANR	1058740	Identifier	sigTable		1058486	0					
ANR	1058741	Identifier	maxSig		1058486	1					
ANR	1058742	IfStatement	if ( sigTable == NULL )		1058486	26					
ANR	1058743	Condition	sigTable == NULL	326:4:9508:9523	1058486	0	True				
ANR	1058744	EqualityExpression	sigTable == NULL		1058486	0		==			
ANR	1058745	Identifier	sigTable		1058486	0					
ANR	1058746	Identifier	NULL		1058486	1					
ANR	1058747	CompoundStatement		78:1:2293:2293	1058486	1					
ANR	1058748	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	328:2:9531:9555	1058486	0	True				
ANR	1058749	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1058486	0					
ANR	1058750	Callee	EXCEPT		1058486	0					
ANR	1058751	Identifier	EXCEPT		1058486	0					
ANR	1058752	ArgumentList	"""Out of memory!"""		1058486	1					
ANR	1058753	Argument	"""Out of memory!"""		1058486	0					
ANR	1058754	PrimaryExpression	"""Out of memory!"""		1058486	0					
ANR	1058755	ExpressionStatement	nSig = 0	330:1:9561:9569	1058486	27	True				
ANR	1058756	AssignmentExpression	nSig = 0		1058486	0		=			
ANR	1058757	Identifier	nSig		1058486	0					
ANR	1058758	PrimaryExpression	0		1058486	1					
ANR	1058759	ExpressionStatement	"memset ( sigTable , '\\0' , maxSig * sizeof ( SignalEnt ) )"	331:1:9572:9618	1058486	28	True				
ANR	1058760	CallExpression	"memset ( sigTable , '\\0' , maxSig * sizeof ( SignalEnt ) )"		1058486	0					
ANR	1058761	Callee	memset		1058486	0					
ANR	1058762	Identifier	memset		1058486	0					
ANR	1058763	ArgumentList	sigTable		1058486	1					
ANR	1058764	Argument	sigTable		1058486	0					
ANR	1058765	Identifier	sigTable		1058486	0					
ANR	1058766	Argument	'\\0'		1058486	1					
ANR	1058767	PrimaryExpression	'\\0'		1058486	0					
ANR	1058768	Argument	maxSig * sizeof ( SignalEnt )		1058486	2					
ANR	1058769	MultiplicativeExpression	maxSig * sizeof ( SignalEnt )		1058486	0		*			
ANR	1058770	Identifier	maxSig		1058486	0					
ANR	1058771	SizeofExpression	sizeof ( SignalEnt )		1058486	1					
ANR	1058772	Sizeof	sizeof		1058486	0					
ANR	1058773	SizeofOperand	SignalEnt		1058486	1					
ANR	1058774	IfStatement	if ( maxSocket == 0 )		1058486	29					
ANR	1058775	Condition	maxSocket == 0	333:4:9625:9638	1058486	0	True				
ANR	1058776	EqualityExpression	maxSocket == 0		1058486	0		==			
ANR	1058777	Identifier	maxSocket		1058486	0					
ANR	1058778	PrimaryExpression	0		1058486	1					
ANR	1058779	ExpressionStatement	maxSocket = DEFAULT_MAXSOCKETS	334:2:9643:9673	1058486	1	True				
ANR	1058780	AssignmentExpression	maxSocket = DEFAULT_MAXSOCKETS		1058486	0		=			
ANR	1058781	Identifier	maxSocket		1058486	0					
ANR	1058782	Identifier	DEFAULT_MAXSOCKETS		1058486	1					
ANR	1058783	ExpressionStatement	sec_man = new SecMan ( )	336:1:9677:9699	1058486	30	True				
ANR	1058784	AssignmentExpression	sec_man = new SecMan ( )		1058486	0		=			
ANR	1058785	Identifier	sec_man		1058486	0					
ANR	1058786	UnaryExpression	new SecMan ( )		1058486	1					
ANR	1058787	ExpressionStatement	sockTable = new ExtArray < SockEnt > ( maxSocket )	338:1:9703:9747	1058486	31	True				
ANR	1058788	AssignmentExpression	sockTable = new ExtArray < SockEnt > ( maxSocket )		1058486	0		=			
ANR	1058789	Identifier	sockTable		1058486	0					
ANR	1058790	Identifier	maxSocket		1058486	1					
ANR	1058791	IfStatement	if ( sockTable == NULL )		1058486	32					
ANR	1058792	Condition	sockTable == NULL	339:4:9753:9769	1058486	0	True				
ANR	1058793	EqualityExpression	sockTable == NULL		1058486	0		==			
ANR	1058794	Identifier	sockTable		1058486	0					
ANR	1058795	Identifier	NULL		1058486	1					
ANR	1058796	CompoundStatement		91:1:2539:2539	1058486	1					
ANR	1058797	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	341:2:9777:9801	1058486	0	True				
ANR	1058798	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1058486	0					
ANR	1058799	Callee	EXCEPT		1058486	0					
ANR	1058800	Identifier	EXCEPT		1058486	0					
ANR	1058801	ArgumentList	"""Out of memory!"""		1058486	1					
ANR	1058802	Argument	"""Out of memory!"""		1058486	0					
ANR	1058803	PrimaryExpression	"""Out of memory!"""		1058486	0					
ANR	1058804	ExpressionStatement	nSock = 0	343:1:9807:9816	1058486	33	True				
ANR	1058805	AssignmentExpression	nSock = 0		1058486	0		=			
ANR	1058806	Identifier	nSock		1058486	0					
ANR	1058807	PrimaryExpression	0		1058486	1					
ANR	1058808	ExpressionStatement	nPendingSockets = 0	344:1:9819:9838	1058486	34	True				
ANR	1058809	AssignmentExpression	nPendingSockets = 0		1058486	0		=			
ANR	1058810	Identifier	nPendingSockets		1058486	0					
ANR	1058811	PrimaryExpression	0		1058486	1					
ANR	1058812	IdentifierDeclStatement	SockEnt blankSockEnt ;	345:1:9841:9861	1058486	35	True				
ANR	1058813	IdentifierDecl	blankSockEnt		1058486	0					
ANR	1058814	IdentifierDeclType	SockEnt		1058486	0					
ANR	1058815	Identifier	blankSockEnt		1058486	1					
ANR	1058816	ExpressionStatement	"memset ( & blankSockEnt , '\\0' , sizeof ( SockEnt ) )"	346:1:9864:9906	1058486	36	True				
ANR	1058817	CallExpression	"memset ( & blankSockEnt , '\\0' , sizeof ( SockEnt ) )"		1058486	0					
ANR	1058818	Callee	memset		1058486	0					
ANR	1058819	Identifier	memset		1058486	0					
ANR	1058820	ArgumentList	& blankSockEnt		1058486	1					
ANR	1058821	Argument	& blankSockEnt		1058486	0					
ANR	1058822	UnaryOperationExpression	& blankSockEnt		1058486	0					
ANR	1058823	UnaryOperator	&		1058486	0					
ANR	1058824	Identifier	blankSockEnt		1058486	1					
ANR	1058825	Argument	'\\0'		1058486	1					
ANR	1058826	PrimaryExpression	'\\0'		1058486	0					
ANR	1058827	Argument	sizeof ( SockEnt )		1058486	2					
ANR	1058828	SizeofExpression	sizeof ( SockEnt )		1058486	0					
ANR	1058829	Sizeof	sizeof		1058486	0					
ANR	1058830	SizeofOperand	SockEnt		1058486	1					
ANR	1058831	ExpressionStatement	sockTable -> fill ( blankSockEnt )	347:1:9909:9938	1058486	37	True				
ANR	1058832	CallExpression	sockTable -> fill ( blankSockEnt )		1058486	0					
ANR	1058833	Callee	sockTable -> fill		1058486	0					
ANR	1058834	PtrMemberAccess	sockTable -> fill		1058486	0					
ANR	1058835	Identifier	sockTable		1058486	0					
ANR	1058836	Identifier	fill		1058486	1					
ANR	1058837	ArgumentList	blankSockEnt		1058486	1					
ANR	1058838	Argument	blankSockEnt		1058486	0					
ANR	1058839	Identifier	blankSockEnt		1058486	0					
ANR	1058840	ExpressionStatement	initial_command_sock = - 1	349:1:9942:9967	1058486	38	True				
ANR	1058841	AssignmentExpression	initial_command_sock = - 1		1058486	0		=			
ANR	1058842	Identifier	initial_command_sock		1058486	0					
ANR	1058843	UnaryOperationExpression	- 1		1058486	1					
ANR	1058844	UnaryOperator	-		1058486	0					
ANR	1058845	PrimaryExpression	1		1058486	1					
ANR	1058846	ExpressionStatement	soap_ssl_sock = - 1	351:1:9992:10010	1058486	39	True				
ANR	1058847	AssignmentExpression	soap_ssl_sock = - 1		1058486	0		=			
ANR	1058848	Identifier	soap_ssl_sock		1058486	0					
ANR	1058849	UnaryOperationExpression	- 1		1058486	1					
ANR	1058850	UnaryOperator	-		1058486	0					
ANR	1058851	PrimaryExpression	1		1058486	1					
ANR	1058852	ExpressionStatement	m_dirty_sinful = true	354:1:10021:10042	1058486	40	True				
ANR	1058853	AssignmentExpression	m_dirty_sinful = true		1058486	0		=			
ANR	1058854	Identifier	m_dirty_sinful		1058486	0					
ANR	1058855	Identifier	true		1058486	1					
ANR	1058856	IfStatement	if ( maxPipe == 0 )		1058486	41					
ANR	1058857	Condition	maxPipe == 0	356:4:10049:10060	1058486	0	True				
ANR	1058858	EqualityExpression	maxPipe == 0		1058486	0		==			
ANR	1058859	Identifier	maxPipe		1058486	0					
ANR	1058860	PrimaryExpression	0		1058486	1					
ANR	1058861	ExpressionStatement	maxPipe = DEFAULT_MAXPIPES	357:2:10065:10091	1058486	1	True				
ANR	1058862	AssignmentExpression	maxPipe = DEFAULT_MAXPIPES		1058486	0		=			
ANR	1058863	Identifier	maxPipe		1058486	0					
ANR	1058864	Identifier	DEFAULT_MAXPIPES		1058486	1					
ANR	1058865	ExpressionStatement	pipeTable = new ExtArray < PipeEnt > ( maxPipe )	359:1:10095:10137	1058486	42	True				
ANR	1058866	AssignmentExpression	pipeTable = new ExtArray < PipeEnt > ( maxPipe )		1058486	0		=			
ANR	1058867	Identifier	pipeTable		1058486	0					
ANR	1058868	Identifier	maxPipe		1058486	1					
ANR	1058869	IfStatement	if ( pipeTable == NULL )		1058486	43					
ANR	1058870	Condition	pipeTable == NULL	360:4:10143:10159	1058486	0	True				
ANR	1058871	EqualityExpression	pipeTable == NULL		1058486	0		==			
ANR	1058872	Identifier	pipeTable		1058486	0					
ANR	1058873	Identifier	NULL		1058486	1					
ANR	1058874	CompoundStatement		112:1:2929:2929	1058486	1					
ANR	1058875	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	362:2:10167:10191	1058486	0	True				
ANR	1058876	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1058486	0					
ANR	1058877	Callee	EXCEPT		1058486	0					
ANR	1058878	Identifier	EXCEPT		1058486	0					
ANR	1058879	ArgumentList	"""Out of memory!"""		1058486	1					
ANR	1058880	Argument	"""Out of memory!"""		1058486	0					
ANR	1058881	PrimaryExpression	"""Out of memory!"""		1058486	0					
ANR	1058882	ExpressionStatement	nPipe = 0	364:1:10197:10206	1058486	44	True				
ANR	1058883	AssignmentExpression	nPipe = 0		1058486	0		=			
ANR	1058884	Identifier	nPipe		1058486	0					
ANR	1058885	PrimaryExpression	0		1058486	1					
ANR	1058886	IdentifierDeclStatement	PipeEnt blankPipeEnt ;	365:1:10209:10229	1058486	45	True				
ANR	1058887	IdentifierDecl	blankPipeEnt		1058486	0					
ANR	1058888	IdentifierDeclType	PipeEnt		1058486	0					
ANR	1058889	Identifier	blankPipeEnt		1058486	1					
ANR	1058890	ExpressionStatement	"memset ( & blankPipeEnt , '\\0' , sizeof ( PipeEnt ) )"	366:1:10232:10274	1058486	46	True				
ANR	1058891	CallExpression	"memset ( & blankPipeEnt , '\\0' , sizeof ( PipeEnt ) )"		1058486	0					
ANR	1058892	Callee	memset		1058486	0					
ANR	1058893	Identifier	memset		1058486	0					
ANR	1058894	ArgumentList	& blankPipeEnt		1058486	1					
ANR	1058895	Argument	& blankPipeEnt		1058486	0					
ANR	1058896	UnaryOperationExpression	& blankPipeEnt		1058486	0					
ANR	1058897	UnaryOperator	&		1058486	0					
ANR	1058898	Identifier	blankPipeEnt		1058486	1					
ANR	1058899	Argument	'\\0'		1058486	1					
ANR	1058900	PrimaryExpression	'\\0'		1058486	0					
ANR	1058901	Argument	sizeof ( PipeEnt )		1058486	2					
ANR	1058902	SizeofExpression	sizeof ( PipeEnt )		1058486	0					
ANR	1058903	Sizeof	sizeof		1058486	0					
ANR	1058904	SizeofOperand	PipeEnt		1058486	1					
ANR	1058905	ExpressionStatement	blankPipeEnt . index = - 1	367:1:10277:10300	1058486	47	True				
ANR	1058906	AssignmentExpression	blankPipeEnt . index = - 1		1058486	0		=			
ANR	1058907	MemberAccess	blankPipeEnt . index		1058486	0					
ANR	1058908	Identifier	blankPipeEnt		1058486	0					
ANR	1058909	Identifier	index		1058486	1					
ANR	1058910	UnaryOperationExpression	- 1		1058486	1					
ANR	1058911	UnaryOperator	-		1058486	0					
ANR	1058912	PrimaryExpression	1		1058486	1					
ANR	1058913	ExpressionStatement	pipeTable -> fill ( blankPipeEnt )	368:1:10303:10332	1058486	48	True				
ANR	1058914	CallExpression	pipeTable -> fill ( blankPipeEnt )		1058486	0					
ANR	1058915	Callee	pipeTable -> fill		1058486	0					
ANR	1058916	PtrMemberAccess	pipeTable -> fill		1058486	0					
ANR	1058917	Identifier	pipeTable		1058486	0					
ANR	1058918	Identifier	fill		1058486	1					
ANR	1058919	ArgumentList	blankPipeEnt		1058486	1					
ANR	1058920	Argument	blankPipeEnt		1058486	0					
ANR	1058921	Identifier	blankPipeEnt		1058486	0					
ANR	1058922	ExpressionStatement	pipeHandleTable = new ExtArray < PipeHandle > ( maxPipe )	370:1:10336:10387	1058486	49	True				
ANR	1058923	AssignmentExpression	pipeHandleTable = new ExtArray < PipeHandle > ( maxPipe )		1058486	0		=			
ANR	1058924	Identifier	pipeHandleTable		1058486	0					
ANR	1058925	Identifier	maxPipe		1058486	1					
ANR	1058926	ExpressionStatement	maxPipeHandleIndex = - 1	371:1:10390:10413	1058486	50	True				
ANR	1058927	AssignmentExpression	maxPipeHandleIndex = - 1		1058486	0		=			
ANR	1058928	Identifier	maxPipeHandleIndex		1058486	0					
ANR	1058929	UnaryOperationExpression	- 1		1058486	1					
ANR	1058930	UnaryOperator	-		1058486	0					
ANR	1058931	PrimaryExpression	1		1058486	1					
ANR	1058932	ExpressionStatement	maxPipeBuffer = 10240	372:1:10416:10437	1058486	51	True				
ANR	1058933	AssignmentExpression	maxPipeBuffer = 10240		1058486	0		=			
ANR	1058934	Identifier	maxPipeBuffer		1058486	0					
ANR	1058935	PrimaryExpression	10240		1058486	1					
ANR	1058936	IfStatement	if ( maxReap == 0 )		1058486	52					
ANR	1058937	Condition	maxReap == 0	374:4:10444:10455	1058486	0	True				
ANR	1058938	EqualityExpression	maxReap == 0		1058486	0		==			
ANR	1058939	Identifier	maxReap		1058486	0					
ANR	1058940	PrimaryExpression	0		1058486	1					
ANR	1058941	ExpressionStatement	maxReap = DEFAULT_MAXREAPS	375:2:10460:10486	1058486	1	True				
ANR	1058942	AssignmentExpression	maxReap = DEFAULT_MAXREAPS		1058486	0		=			
ANR	1058943	Identifier	maxReap		1058486	0					
ANR	1058944	Identifier	DEFAULT_MAXREAPS		1058486	1					
ANR	1058945	ExpressionStatement	reapTable = new ReapEnt [ maxReap ]	377:1:10490:10522	1058486	53	True				
ANR	1058946	AssignmentExpression	reapTable = new ReapEnt [ maxReap ]		1058486	0		=			
ANR	1058947	Identifier	reapTable		1058486	0					
ANR	1058948	Identifier	maxReap		1058486	1					
ANR	1058949	IfStatement	if ( reapTable == NULL )		1058486	54					
ANR	1058950	Condition	reapTable == NULL	378:4:10528:10544	1058486	0	True				
ANR	1058951	EqualityExpression	reapTable == NULL		1058486	0		==			
ANR	1058952	Identifier	reapTable		1058486	0					
ANR	1058953	Identifier	NULL		1058486	1					
ANR	1058954	CompoundStatement		130:1:3314:3314	1058486	1					
ANR	1058955	ExpressionStatement	"EXCEPT ( ""Out of memory!"" )"	380:2:10552:10576	1058486	0	True				
ANR	1058956	CallExpression	"EXCEPT ( ""Out of memory!"" )"		1058486	0					
ANR	1058957	Callee	EXCEPT		1058486	0					
ANR	1058958	Identifier	EXCEPT		1058486	0					
ANR	1058959	ArgumentList	"""Out of memory!"""		1058486	1					
ANR	1058960	Argument	"""Out of memory!"""		1058486	0					
ANR	1058961	PrimaryExpression	"""Out of memory!"""		1058486	0					
ANR	1058962	ExpressionStatement	nReap = 0	382:1:10582:10591	1058486	55	True				
ANR	1058963	AssignmentExpression	nReap = 0		1058486	0		=			
ANR	1058964	Identifier	nReap		1058486	0					
ANR	1058965	PrimaryExpression	0		1058486	1					
ANR	1058966	ExpressionStatement	"memset ( reapTable , '\\0' , maxReap * sizeof ( ReapEnt ) )"	383:1:10594:10640	1058486	56	True				
ANR	1058967	CallExpression	"memset ( reapTable , '\\0' , maxReap * sizeof ( ReapEnt ) )"		1058486	0					
ANR	1058968	Callee	memset		1058486	0					
ANR	1058969	Identifier	memset		1058486	0					
ANR	1058970	ArgumentList	reapTable		1058486	1					
ANR	1058971	Argument	reapTable		1058486	0					
ANR	1058972	Identifier	reapTable		1058486	0					
ANR	1058973	Argument	'\\0'		1058486	1					
ANR	1058974	PrimaryExpression	'\\0'		1058486	0					
ANR	1058975	Argument	maxReap * sizeof ( ReapEnt )		1058486	2					
ANR	1058976	MultiplicativeExpression	maxReap * sizeof ( ReapEnt )		1058486	0		*			
ANR	1058977	Identifier	maxReap		1058486	0					
ANR	1058978	SizeofExpression	sizeof ( ReapEnt )		1058486	1					
ANR	1058979	Sizeof	sizeof		1058486	0					
ANR	1058980	SizeofOperand	ReapEnt		1058486	1					
ANR	1058981	ExpressionStatement	defaultReaper = - 1	384:1:10643:10659	1058486	57	True				
ANR	1058982	AssignmentExpression	defaultReaper = - 1		1058486	0		=			
ANR	1058983	Identifier	defaultReaper		1058486	0					
ANR	1058984	UnaryOperationExpression	- 1		1058486	1					
ANR	1058985	UnaryOperator	-		1058486	0					
ANR	1058986	PrimaryExpression	1		1058486	1					
ANR	1058987	ExpressionStatement	curr_dataptr = NULL	386:1:10663:10682	1058486	58	True				
ANR	1058988	AssignmentExpression	curr_dataptr = NULL		1058486	0		=			
ANR	1058989	Identifier	curr_dataptr		1058486	0					
ANR	1058990	Identifier	NULL		1058486	1					
ANR	1058991	ExpressionStatement	curr_regdataptr = NULL	387:1:10685:10707	1058486	59	True				
ANR	1058992	AssignmentExpression	curr_regdataptr = NULL		1058486	0		=			
ANR	1058993	Identifier	curr_regdataptr		1058486	0					
ANR	1058994	Identifier	NULL		1058486	1					
ANR	1058995	ExpressionStatement	send_child_alive_timer = - 1	389:1:10711:10738	1058486	60	True				
ANR	1058996	AssignmentExpression	send_child_alive_timer = - 1		1058486	0		=			
ANR	1058997	Identifier	send_child_alive_timer		1058486	0					
ANR	1058998	UnaryOperationExpression	- 1		1058486	1					
ANR	1058999	UnaryOperator	-		1058486	0					
ANR	1059000	PrimaryExpression	1		1058486	1					
ANR	1059001	ExpressionStatement	m_want_send_child_alive = true	390:1:10741:10771	1058486	61	True				
ANR	1059002	AssignmentExpression	m_want_send_child_alive = true		1058486	0		=			
ANR	1059003	Identifier	m_want_send_child_alive		1058486	0					
ANR	1059004	Identifier	true		1058486	1					
ANR	1059005	Statement	dcmainThreadId	393:1:10788:10801	1058486	62	True				
ANR	1059006	Statement	=	393:16:10803:10803	1058486	63	True				
ANR	1059007	Statement	::	393:18:10805:10806	1058486	64	True				
ANR	1059008	ExpressionStatement	GetCurrentThreadId ( )	393:20:10807:10827	1058486	65	True				
ANR	1059009	CallExpression	GetCurrentThreadId ( )		1058486	0					
ANR	1059010	Callee	GetCurrentThreadId		1058486	0					
ANR	1059011	Identifier	GetCurrentThreadId		1058486	0					
ANR	1059012	ArgumentList			1058486	1					
ANR	1059013	ExpressionStatement	async_sigs_unblocked = FALSE	397:1:10852:10880	1058486	66	True				
ANR	1059014	AssignmentExpression	async_sigs_unblocked = FALSE		1058486	0		=			
ANR	1059015	Identifier	async_sigs_unblocked		1058486	0					
ANR	1059016	Identifier	FALSE		1058486	1					
ANR	1059017	ExpressionStatement	async_pipe_signal = false	399:1:10890:10915	1058486	67	True				
ANR	1059018	AssignmentExpression	async_pipe_signal = false		1058486	0		=			
ANR	1059019	Identifier	async_pipe_signal		1058486	0					
ANR	1059020	Identifier	false		1058486	1					
ANR	1059021	ExpressionStatement	"m_wants_dc_udp = param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"	402:1:10985:11048	1058486	68	True				
ANR	1059022	AssignmentExpression	"m_wants_dc_udp = param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"		1058486	0		=			
ANR	1059023	Identifier	m_wants_dc_udp		1058486	0					
ANR	1059024	CallExpression	"param_boolean ( ""WANT_UDP_COMMAND_SOCKET"" , true )"		1058486	1					
ANR	1059025	Callee	param_boolean		1058486	0					
ANR	1059026	Identifier	param_boolean		1058486	0					
ANR	1059027	ArgumentList	"""WANT_UDP_COMMAND_SOCKET"""		1058486	1					
ANR	1059028	Argument	"""WANT_UDP_COMMAND_SOCKET"""		1058486	0					
ANR	1059029	PrimaryExpression	"""WANT_UDP_COMMAND_SOCKET"""		1058486	0					
ANR	1059030	Argument	true		1058486	1					
ANR	1059031	Identifier	true		1058486	0					
ANR	1059032	ExpressionStatement	m_wants_dc_udp_self = m_wants_dc_udp	403:1:11051:11087	1058486	69	True				
ANR	1059033	AssignmentExpression	m_wants_dc_udp_self = m_wants_dc_udp		1058486	0		=			
ANR	1059034	Identifier	m_wants_dc_udp_self		1058486	0					
ANR	1059035	Identifier	m_wants_dc_udp		1058486	1					
ANR	1059036	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW ) )		1058486	70					
ANR	1059037	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )	409:5:11321:11368	1058486	0	True				
ANR	1059038	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SHADOW )		1058486	0					
ANR	1059039	Callee	get_mySubSystem ( ) -> isType		1058486	0					
ANR	1059040	PtrMemberAccess	get_mySubSystem ( ) -> isType		1058486	0					
ANR	1059041	CallExpression	get_mySubSystem ( )		1058486	0					
ANR	1059042	Callee	get_mySubSystem		1058486	0					
ANR	1059043	Identifier	get_mySubSystem		1058486	0					
ANR	1059044	ArgumentList			1058486	1					
ANR	1059045	Identifier	isType		1058486	1					
ANR	1059046	ArgumentList	SUBSYSTEM_TYPE_SHADOW		1058486	1					
ANR	1059047	Argument	SUBSYSTEM_TYPE_SHADOW		1058486	0					
ANR	1059048	Identifier	SUBSYSTEM_TYPE_SHADOW		1058486	0					
ANR	1059049	CompoundStatement		160:56:4138:4138	1058486	1					
ANR	1059050	ExpressionStatement	m_wants_dc_udp_self = false	410:2:11376:11403	1058486	0	True				
ANR	1059051	AssignmentExpression	m_wants_dc_udp_self = false		1058486	0		=			
ANR	1059052	Identifier	m_wants_dc_udp_self		1058486	0					
ANR	1059053	Identifier	false		1058486	1					
ANR	1059054	ExpressionStatement	m_invalidate_sessions_via_tcp = true	413:1:11416:11452	1058486	71	True				
ANR	1059055	AssignmentExpression	m_invalidate_sessions_via_tcp = true		1058486	0		=			
ANR	1059056	Identifier	m_invalidate_sessions_via_tcp		1058486	0					
ANR	1059057	Identifier	true		1058486	1					
ANR	1059058	ExpressionStatement	dc_rsock = NULL	414:1:11455:11470	1058486	72	True				
ANR	1059059	AssignmentExpression	dc_rsock = NULL		1058486	0		=			
ANR	1059060	Identifier	dc_rsock		1058486	0					
ANR	1059061	Identifier	NULL		1058486	1					
ANR	1059062	ExpressionStatement	dc_ssock = NULL	415:1:11473:11488	1058486	73	True				
ANR	1059063	AssignmentExpression	dc_ssock = NULL		1058486	0		=			
ANR	1059064	Identifier	dc_ssock		1058486	0					
ANR	1059065	Identifier	NULL		1058486	1					
ANR	1059066	ExpressionStatement	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"	416:4:11494:11559	1058486	74	True				
ANR	1059067	AssignmentExpression	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		1058486	0		=			
ANR	1059068	Identifier	m_iMaxAcceptsPerCycle		1058486	0					
ANR	1059069	CallExpression	"param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		1058486	1					
ANR	1059070	Callee	param_integer		1058486	0					
ANR	1059071	Identifier	param_integer		1058486	0					
ANR	1059072	ArgumentList	"""MAX_ACCEPTS_PER_CYCLE"""		1058486	1					
ANR	1059073	Argument	"""MAX_ACCEPTS_PER_CYCLE"""		1058486	0					
ANR	1059074	PrimaryExpression	"""MAX_ACCEPTS_PER_CYCLE"""		1058486	0					
ANR	1059075	Argument	8		1058486	1					
ANR	1059076	PrimaryExpression	8		1058486	0					
ANR	1059077	IfStatement	if ( m_iMaxAcceptsPerCycle != 1 )		1058486	75					
ANR	1059078	Condition	m_iMaxAcceptsPerCycle != 1	417:8:11569:11594	1058486	0	True				
ANR	1059079	EqualityExpression	m_iMaxAcceptsPerCycle != 1		1058486	0		!=			
ANR	1059080	Identifier	m_iMaxAcceptsPerCycle		1058486	0					
ANR	1059081	PrimaryExpression	1		1058486	1					
ANR	1059082	CompoundStatement		168:37:4364:4364	1058486	1					
ANR	1059083	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"	418:8:11608:11690	1058486	0	True				
ANR	1059084	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"		1058486	0					
ANR	1059085	Callee	dprintf		1058486	0					
ANR	1059086	Identifier	dprintf		1058486	0					
ANR	1059087	ArgumentList	D_ALWAYS		1058486	1					
ANR	1059088	Argument	D_ALWAYS		1058486	0					
ANR	1059089	Identifier	D_ALWAYS		1058486	0					
ANR	1059090	Argument	"""Setting maximum accepts per cycle %d.\\n"""		1058486	1					
ANR	1059091	PrimaryExpression	"""Setting maximum accepts per cycle %d.\\n"""		1058486	0					
ANR	1059092	Argument	m_iMaxAcceptsPerCycle		1058486	2					
ANR	1059093	Identifier	m_iMaxAcceptsPerCycle		1058486	0					
ANR	1059094	ExpressionStatement	inheritedSocks [ 0 ] = NULL	421:1:11700:11724	1058486	76	True				
ANR	1059095	AssignmentExpression	inheritedSocks [ 0 ] = NULL		1058486	0		=			
ANR	1059096	ArrayIndexing	inheritedSocks [ 0 ]		1058486	0					
ANR	1059097	Identifier	inheritedSocks		1058486	0					
ANR	1059098	PrimaryExpression	0		1058486	1					
ANR	1059099	Identifier	NULL		1058486	1					
ANR	1059100	ExpressionStatement	inServiceCommandSocket_flag = FALSE	422:1:11727:11762	1058486	77	True				
ANR	1059101	AssignmentExpression	inServiceCommandSocket_flag = FALSE		1058486	0		=			
ANR	1059102	Identifier	inServiceCommandSocket_flag		1058486	0					
ANR	1059103	Identifier	FALSE		1058486	1					
ANR	1059104	IdentifierDeclStatement	int i ;	426:1:11866:11871	1058486	78	True				
ANR	1059105	IdentifierDecl	i		1058486	0					
ANR	1059106	IdentifierDeclType	int		1058486	0					
ANR	1059107	Identifier	i		1058486	1					
ANR	1059108	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1058486	79					
ANR	1059109	ForInit	i = 0 ;	427:6:11879:11882	1058486	0	True				
ANR	1059110	AssignmentExpression	i = 0		1058486	0		=			
ANR	1059111	Identifier	i		1058486	0					
ANR	1059112	PrimaryExpression	0		1058486	1					
ANR	1059113	Condition	i < LAST_PERM	427:11:11884:11894	1058486	1	True				
ANR	1059114	RelationalExpression	i < LAST_PERM		1058486	0		<			
ANR	1059115	Identifier	i		1058486	0					
ANR	1059116	Identifier	LAST_PERM		1058486	1					
ANR	1059117	PostIncDecOperationExpression	i ++	427:24:11897:11899	1058486	2	True				
ANR	1059118	Identifier	i		1058486	0					
ANR	1059119	IncDec	++		1058486	1					
ANR	1059120	CompoundStatement		178:30:4669:4669	1058486	3					
ANR	1059121	ExpressionStatement	SettableAttrsLists [ i ] = NULL	428:2:11907:11935	1058486	0	True				
ANR	1059122	AssignmentExpression	SettableAttrsLists [ i ] = NULL		1058486	0		=			
ANR	1059123	ArrayIndexing	SettableAttrsLists [ i ]		1058486	0					
ANR	1059124	Identifier	SettableAttrsLists		1058486	0					
ANR	1059125	Identifier	i		1058486	1					
ANR	1059126	Identifier	NULL		1058486	1					
ANR	1059127	ExpressionStatement	Default_Priv_State = PRIV_CONDOR	431:1:11942:11974	1058486	80	True				
ANR	1059128	AssignmentExpression	Default_Priv_State = PRIV_CONDOR		1058486	0		=			
ANR	1059129	Identifier	Default_Priv_State		1058486	0					
ANR	1059130	Identifier	PRIV_CONDOR		1058486	1					
ANR	1059131	ExpressionStatement	_cookie_len_old = _cookie_len = 0	433:1:11978:12013	1058486	81	True				
ANR	1059132	AssignmentExpression	_cookie_len_old = _cookie_len = 0		1058486	0		=			
ANR	1059133	Identifier	_cookie_len_old		1058486	0					
ANR	1059134	AssignmentExpression	_cookie_len = 0		1058486	1		=			
ANR	1059135	Identifier	_cookie_len		1058486	0					
ANR	1059136	PrimaryExpression	0		1058486	1					
ANR	1059137	ExpressionStatement	_cookie_data_old = _cookie_data = NULL	434:1:12016:12054	1058486	82	True				
ANR	1059138	AssignmentExpression	_cookie_data_old = _cookie_data = NULL		1058486	0		=			
ANR	1059139	Identifier	_cookie_data_old		1058486	0					
ANR	1059140	AssignmentExpression	_cookie_data = NULL		1058486	1		=			
ANR	1059141	Identifier	_cookie_data		1058486	0					
ANR	1059142	Identifier	NULL		1058486	1					
ANR	1059143	ExpressionStatement	peaceful_shutdown = false	436:1:12058:12083	1058486	83	True				
ANR	1059144	AssignmentExpression	peaceful_shutdown = false		1058486	0		=			
ANR	1059145	Identifier	peaceful_shutdown		1058486	0					
ANR	1059146	Identifier	false		1058486	1					
ANR	1059147	ExpressionStatement	mapfile = NULL	440:1:12133:12148	1058486	84	True				
ANR	1059148	AssignmentExpression	mapfile = NULL		1058486	0		=			
ANR	1059149	Identifier	mapfile		1058486	0					
ANR	1059150	Identifier	NULL		1058486	1					
ANR	1059151	ExpressionStatement	file_descriptor_safety_limit = 0	444:1:12166:12198	1058486	85	True				
ANR	1059152	AssignmentExpression	file_descriptor_safety_limit = 0		1058486	0		=			
ANR	1059153	Identifier	file_descriptor_safety_limit		1058486	0					
ANR	1059154	PrimaryExpression	0		1058486	1					
ANR	1059155	IdentifierDeclStatement	char max_fds_name [ 50 ] ;	447:1:12253:12274	1058486	86	True				
ANR	1059156	IdentifierDecl	max_fds_name [ 50 ]		1058486	0					
ANR	1059157	IdentifierDeclType	char [ 50 ]		1058486	0					
ANR	1059158	Identifier	max_fds_name		1058486	1					
ANR	1059159	PrimaryExpression	50		1058486	2					
ANR	1059160	ExpressionStatement	"sprintf ( max_fds_name , ""%s_MAX_FILE_DESCRIPTORS"" , get_mySubSystem ( ) -> getName ( ) )"	448:1:12277:12353	1058486	87	True				
ANR	1059161	CallExpression	"sprintf ( max_fds_name , ""%s_MAX_FILE_DESCRIPTORS"" , get_mySubSystem ( ) -> getName ( ) )"		1058486	0					
ANR	1059162	Callee	sprintf		1058486	0					
ANR	1059163	Identifier	sprintf		1058486	0					
ANR	1059164	ArgumentList	max_fds_name		1058486	1					
ANR	1059165	Argument	max_fds_name		1058486	0					
ANR	1059166	Identifier	max_fds_name		1058486	0					
ANR	1059167	Argument	"""%s_MAX_FILE_DESCRIPTORS"""		1058486	1					
ANR	1059168	PrimaryExpression	"""%s_MAX_FILE_DESCRIPTORS"""		1058486	0					
ANR	1059169	Argument	get_mySubSystem ( ) -> getName ( )		1058486	2					
ANR	1059170	CallExpression	get_mySubSystem ( ) -> getName ( )		1058486	0					
ANR	1059171	Callee	get_mySubSystem ( ) -> getName		1058486	0					
ANR	1059172	PtrMemberAccess	get_mySubSystem ( ) -> getName		1058486	0					
ANR	1059173	CallExpression	get_mySubSystem ( )		1058486	0					
ANR	1059174	Callee	get_mySubSystem		1058486	0					
ANR	1059175	Identifier	get_mySubSystem		1058486	0					
ANR	1059176	ArgumentList			1058486	1					
ANR	1059177	Identifier	getName		1058486	1					
ANR	1059178	ArgumentList			1058486	1					
ANR	1059179	IdentifierDeclStatement	"int max_fds = param_integer ( max_fds_name , 0 ) ;"	449:1:12356:12399	1058486	88	True				
ANR	1059180	IdentifierDecl	"max_fds = param_integer ( max_fds_name , 0 )"		1058486	0					
ANR	1059181	IdentifierDeclType	int		1058486	0					
ANR	1059182	Identifier	max_fds		1058486	1					
ANR	1059183	AssignmentExpression	"max_fds = param_integer ( max_fds_name , 0 )"		1058486	2		=			
ANR	1059184	Identifier	max_fds		1058486	0					
ANR	1059185	CallExpression	"param_integer ( max_fds_name , 0 )"		1058486	1					
ANR	1059186	Callee	param_integer		1058486	0					
ANR	1059187	Identifier	param_integer		1058486	0					
ANR	1059188	ArgumentList	max_fds_name		1058486	1					
ANR	1059189	Argument	max_fds_name		1058486	0					
ANR	1059190	Identifier	max_fds_name		1058486	0					
ANR	1059191	Argument	0		1058486	1					
ANR	1059192	PrimaryExpression	0		1058486	0					
ANR	1059193	IfStatement	if ( max_fds <= 0 )		1058486	89					
ANR	1059194	Condition	max_fds <= 0	450:5:12406:12417	1058486	0	True				
ANR	1059195	RelationalExpression	max_fds <= 0		1058486	0		<=			
ANR	1059196	Identifier	max_fds		1058486	0					
ANR	1059197	PrimaryExpression	0		1058486	1					
ANR	1059198	CompoundStatement		201:20:5187:5187	1058486	1					
ANR	1059199	ExpressionStatement	"max_fds = param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"	451:2:12425:12474	1058486	0	True				
ANR	1059200	AssignmentExpression	"max_fds = param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"		1058486	0		=			
ANR	1059201	Identifier	max_fds		1058486	0					
ANR	1059202	CallExpression	"param_integer ( ""MAX_FILE_DESCRIPTORS"" , 0 )"		1058486	1					
ANR	1059203	Callee	param_integer		1058486	0					
ANR	1059204	Identifier	param_integer		1058486	0					
ANR	1059205	ArgumentList	"""MAX_FILE_DESCRIPTORS"""		1058486	1					
ANR	1059206	Argument	"""MAX_FILE_DESCRIPTORS"""		1058486	0					
ANR	1059207	PrimaryExpression	"""MAX_FILE_DESCRIPTORS"""		1058486	0					
ANR	1059208	Argument	0		1058486	1					
ANR	1059209	PrimaryExpression	0		1058486	0					
ANR	1059210	IfStatement	if ( max_fds > 0 )		1058486	90					
ANR	1059211	Condition	max_fds > 0	453:5:12484:12494	1058486	0	True				
ANR	1059212	RelationalExpression	max_fds > 0		1058486	0		>			
ANR	1059213	Identifier	max_fds		1058486	0					
ANR	1059214	PrimaryExpression	0		1058486	1					
ANR	1059215	CompoundStatement		207:2:5342:5375	1058486	1					
ANR	1059216	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum file descriptors to %d.\\n"" , max_fds )"	454:2:12502:12571	1058486	0	True				
ANR	1059217	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum file descriptors to %d.\\n"" , max_fds )"		1058486	0					
ANR	1059218	Callee	dprintf		1058486	0					
ANR	1059219	Identifier	dprintf		1058486	0					
ANR	1059220	ArgumentList	D_ALWAYS		1058486	1					
ANR	1059221	Argument	D_ALWAYS		1058486	0					
ANR	1059222	Identifier	D_ALWAYS		1058486	0					
ANR	1059223	Argument	"""Setting maximum file descriptors to %d.\\n"""		1058486	1					
ANR	1059224	PrimaryExpression	"""Setting maximum file descriptors to %d.\\n"""		1058486	0					
ANR	1059225	Argument	max_fds		1058486	2					
ANR	1059226	Identifier	max_fds		1058486	0					
ANR	1059227	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	456:2:12576:12609	1058486	1	True				
ANR	1059228	IdentifierDecl	priv = set_root_priv ( )		1058486	0					
ANR	1059229	IdentifierDeclType	priv_state		1058486	0					
ANR	1059230	Identifier	priv		1058486	1					
ANR	1059231	AssignmentExpression	priv = set_root_priv ( )		1058486	2		=			
ANR	1059232	Identifier	priv		1058486	0					
ANR	1059233	CallExpression	set_root_priv ( )		1058486	1					
ANR	1059234	Callee	set_root_priv		1058486	0					
ANR	1059235	Identifier	set_root_priv		1058486	0					
ANR	1059236	ArgumentList			1058486	1					
ANR	1059237	ExpressionStatement	"limit ( RLIMIT_NOFILE , max_fds , CONDOR_REQUIRED_LIMIT , ""MAX_FILE_DESCRIPTORS"" )"	457:2:12613:12686	1058486	2	True				
ANR	1059238	CallExpression	"limit ( RLIMIT_NOFILE , max_fds , CONDOR_REQUIRED_LIMIT , ""MAX_FILE_DESCRIPTORS"" )"		1058486	0					
ANR	1059239	Callee	limit		1058486	0					
ANR	1059240	Identifier	limit		1058486	0					
ANR	1059241	ArgumentList	RLIMIT_NOFILE		1058486	1					
ANR	1059242	Argument	RLIMIT_NOFILE		1058486	0					
ANR	1059243	Identifier	RLIMIT_NOFILE		1058486	0					
ANR	1059244	Argument	max_fds		1058486	1					
ANR	1059245	Identifier	max_fds		1058486	0					
ANR	1059246	Argument	CONDOR_REQUIRED_LIMIT		1058486	2					
ANR	1059247	Identifier	CONDOR_REQUIRED_LIMIT		1058486	0					
ANR	1059248	Argument	"""MAX_FILE_DESCRIPTORS"""		1058486	3					
ANR	1059249	PrimaryExpression	"""MAX_FILE_DESCRIPTORS"""		1058486	0					
ANR	1059250	ExpressionStatement	set_priv ( priv )	458:2:12690:12704	1058486	3	True				
ANR	1059251	CallExpression	set_priv ( priv )		1058486	0					
ANR	1059252	Callee	set_priv		1058486	0					
ANR	1059253	Identifier	set_priv		1058486	0					
ANR	1059254	ArgumentList	priv		1058486	1					
ANR	1059255	Argument	priv		1058486	0					
ANR	1059256	Identifier	priv		1058486	0					
ANR	1059257	ExpressionStatement	soap = NULL	462:1:12718:12729	1058486	91	True				
ANR	1059258	AssignmentExpression	soap = NULL		1058486	0		=			
ANR	1059259	Identifier	soap		1058486	0					
ANR	1059260	Identifier	NULL		1058486	1					
ANR	1059261	ExpressionStatement	localAdFile = NULL	464:1:12733:12751	1058486	92	True				
ANR	1059262	AssignmentExpression	localAdFile = NULL		1058486	0		=			
ANR	1059263	Identifier	localAdFile		1058486	0					
ANR	1059264	Identifier	NULL		1058486	1					
ANR	1059265	ExpressionStatement	m_collector_list = NULL	466:1:12755:12778	1058486	93	True				
ANR	1059266	AssignmentExpression	m_collector_list = NULL		1058486	0		=			
ANR	1059267	Identifier	m_collector_list		1058486	0					
ANR	1059268	Identifier	NULL		1058486	1					
ANR	1059269	ExpressionStatement	m_wants_restart = true	467:1:12781:12803	1058486	94	True				
ANR	1059270	AssignmentExpression	m_wants_restart = true		1058486	0		=			
ANR	1059271	Identifier	m_wants_restart		1058486	0					
ANR	1059272	Identifier	true		1058486	1					
ANR	1059273	ExpressionStatement	m_in_daemon_shutdown = false	468:1:12806:12834	1058486	95	True				
ANR	1059274	AssignmentExpression	m_in_daemon_shutdown = false		1058486	0		=			
ANR	1059275	Identifier	m_in_daemon_shutdown		1058486	0					
ANR	1059276	Identifier	false		1058486	1					
ANR	1059277	ExpressionStatement	m_in_daemon_shutdown_fast = false	469:1:12837:12870	1058486	96	True				
ANR	1059278	AssignmentExpression	m_in_daemon_shutdown_fast = false		1058486	0		=			
ANR	1059279	Identifier	m_in_daemon_shutdown_fast		1058486	0					
ANR	1059280	Identifier	false		1058486	1					
ANR	1059281	ExpressionStatement	m_private_network_name = NULL	470:1:12873:12902	1058486	97	True				
ANR	1059282	AssignmentExpression	m_private_network_name = NULL		1058486	0		=			
ANR	1059283	Identifier	m_private_network_name		1058486	0					
ANR	1059284	Identifier	NULL		1058486	1					
ANR	1059285	ExpressionStatement	m_use_clone_to_create_processes = false	475:1:13008:13047	1058486	98	True				
ANR	1059286	AssignmentExpression	m_use_clone_to_create_processes = false		1058486	0		=			
ANR	1059287	Identifier	m_use_clone_to_create_processes		1058486	0					
ANR	1059288	Identifier	false		1058486	1					
ANR	1059289	ExpressionStatement	m_fake_create_thread = false	478:1:13058:13086	1058486	99	True				
ANR	1059290	AssignmentExpression	m_fake_create_thread = false		1058486	0		=			
ANR	1059291	Identifier	m_fake_create_thread		1058486	0					
ANR	1059292	Identifier	false		1058486	1					
ANR	1059293	ExpressionStatement	m_refresh_dns_timer = - 1	480:1:13090:13114	1058486	100	True				
ANR	1059294	AssignmentExpression	m_refresh_dns_timer = - 1		1058486	0		=			
ANR	1059295	Identifier	m_refresh_dns_timer		1058486	0					
ANR	1059296	UnaryOperationExpression	- 1		1058486	1					
ANR	1059297	UnaryOperator	-		1058486	0					
ANR	1059298	PrimaryExpression	1		1058486	1					
ANR	1059299	ExpressionStatement	m_ccb_listeners = NULL	482:1:13118:13140	1058486	101	True				
ANR	1059300	AssignmentExpression	m_ccb_listeners = NULL		1058486	0		=			
ANR	1059301	Identifier	m_ccb_listeners		1058486	0					
ANR	1059302	Identifier	NULL		1058486	1					
ANR	1059303	ExpressionStatement	m_shared_port_endpoint = NULL	483:1:13143:13172	1058486	102	True				
ANR	1059304	AssignmentExpression	m_shared_port_endpoint = NULL		1058486	0		=			
ANR	1059305	Identifier	m_shared_port_endpoint		1058486	0					
ANR	1059306	Identifier	NULL		1058486	1					
ANR	1059307	Identifier	DaemonCore :: DaemonCore		1058486	1					
ANR	1059308	ParameterList	"int PidSize , int ComSize , int SigSize , int SocSize , int ReapSize , int PipeSize"		1058486	2					
ANR	1059309	Parameter	int PidSize	248:23:7152:7162	1058486	0	True				
ANR	1059310	ParameterType	int		1058486	0					
ANR	1059311	Identifier	PidSize		1058486	1					
ANR	1059312	Parameter	int ComSize	248:36:7165:7175	1058486	1	True				
ANR	1059313	ParameterType	int		1058486	0					
ANR	1059314	Identifier	ComSize		1058486	1					
ANR	1059315	Parameter	int SigSize	248:48:7177:7187	1058486	2	True				
ANR	1059316	ParameterType	int		1058486	0					
ANR	1059317	Identifier	SigSize		1058486	1					
ANR	1059318	Parameter	int SocSize	249:4:7194:7204	1058486	3	True				
ANR	1059319	ParameterType	int		1058486	0					
ANR	1059320	Identifier	SocSize		1058486	1					
ANR	1059321	Parameter	int ReapSize	249:16:7206:7217	1058486	4	True				
ANR	1059322	ParameterType	int		1058486	0					
ANR	1059323	Identifier	ReapSize		1058486	1					
ANR	1059324	Parameter	int PipeSize	249:29:7219:7230	1058486	5	True				
ANR	1059325	ParameterType	int		1058486	0					
ANR	1059326	Identifier	PipeSize		1058486	1					
ANR	1059327	CFGEntryNode	ENTRY		1058486		True				
ANR	1059328	CFGExitNode	EXIT		1058486		True				
ANR	1059329	Symbol	async_pipe_signal		1058486						
ANR	1059330	Symbol	nReap		1058486						
ANR	1059331	Symbol	SUBSYSTEM_TYPE_SHADOW		1058486						
ANR	1059332	Symbol	& DaemonCore :: CallSocketHandler		1058486						
ANR	1059333	Symbol	nPipe		1058486						
ANR	1059334	Symbol	sec_man		1058486						
ANR	1059335	Symbol	defaultReaper		1058486						
ANR	1059336	Symbol	curr_dataptr		1058486						
ANR	1059337	Symbol	Default_Priv_State		1058486						
ANR	1059338	Symbol	nPendingSockets		1058486						
ANR	1059339	Symbol	blankSockEnt		1058486						
ANR	1059340	Symbol	& DaemonCore :: Register_DataPtr		1058486						
ANR	1059341	Symbol	async_sigs_unblocked		1058486						
ANR	1059342	Symbol	LAST_PERM		1058486						
ANR	1059343	Symbol	m_fake_create_thread		1058486						
ANR	1059344	Symbol	CONDOR_REQUIRED_LIMIT		1058486						
ANR	1059345	Symbol	blankPipeEnt		1058486						
ANR	1059346	Symbol	soap_ssl_sock		1058486						
ANR	1059347	Symbol	& DaemonCore :: daemonContactInfoChanged		1058486						
ANR	1059348	Symbol	ReapSize		1058486						
ANR	1059349	Symbol	ppid		1058486						
ANR	1059350	Symbol	DEFAULT_MAXSIGNALS		1058486						
ANR	1059351	Symbol	reapTable		1058486						
ANR	1059352	Symbol	compute_pid_hash		1058486						
ANR	1059353	Symbol	& DaemonCore :: HandleReqAsync		1058486						
ANR	1059354	Symbol	* inheritedSocks		1058486						
ANR	1059355	Symbol	param_integer		1058486						
ANR	1059356	Symbol	get_mySubSystem		1058486						
ANR	1059357	Symbol	& DaemonCore :: incrementPendingSockets		1058486						
ANR	1059358	Symbol	mapfile		1058486						
ANR	1059359	Symbol	m_want_send_child_alive		1058486						
ANR	1059360	Symbol	localAdFile		1058486						
ANR	1059361	Symbol	maxSig		1058486						
ANR	1059362	Symbol	_cookie_len_old		1058486						
ANR	1059363	Symbol	& DaemonCore :: decrementPendingSockets		1058486						
ANR	1059364	Symbol	_cookie_data_old		1058486						
ANR	1059365	Symbol	m_dirty_sinful		1058486						
ANR	1059366	Symbol	peaceful_shutdown		1058486						
ANR	1059367	Symbol	PipeSize		1058486						
ANR	1059368	Symbol	max_fds		1058486						
ANR	1059369	Symbol	& DaemonCore :: Register_Command		1058486						
ANR	1059370	Symbol	daemonCoreSockAdapter		1058486						
ANR	1059371	Symbol	dc_ssock		1058486						
ANR	1059372	Symbol	* SettableAttrsLists		1058486						
ANR	1059373	Symbol	inServiceCommandSocket_flag		1058486						
ANR	1059374	Symbol	sigTable		1058486						
ANR	1059375	Symbol	m_wants_dc_udp		1058486						
ANR	1059376	Symbol	RLIMIT_NOFILE		1058486						
ANR	1059377	Symbol	m_use_clone_to_create_processes		1058486						
ANR	1059378	Symbol	pidTable		1058486						
ANR	1059379	Symbol	get_mySubSystem ( ) -> isType		1058486						
ANR	1059380	Symbol	nCommand		1058486						
ANR	1059381	Symbol	m_iMaxAcceptsPerCycle		1058486						
ANR	1059382	Symbol	nSock		1058486						
ANR	1059383	Symbol	maxReap		1058486						
ANR	1059384	Symbol	i		1058486						
ANR	1059385	Symbol	set_root_priv		1058486						
ANR	1059386	Symbol	& DaemonCore :: GetDataPtr		1058486						
ANR	1059387	Symbol	initial_command_sock		1058486						
ANR	1059388	Symbol	m_shared_port_endpoint		1058486						
ANR	1059389	Symbol	comTable		1058486						
ANR	1059390	Symbol	dc_stats		1058486						
ANR	1059391	Symbol	& DaemonCore :: publicNetworkIpAddr		1058486						
ANR	1059392	Symbol	maxPipe		1058486						
ANR	1059393	Symbol	PRIV_CONDOR		1058486						
ANR	1059394	Symbol	& DaemonCore :: Register_Timer		1058486						
ANR	1059395	Symbol	& DaemonCore :: Cancel_Socket		1058486						
ANR	1059396	Symbol	m_in_daemon_shutdown		1058486						
ANR	1059397	Symbol	& blankSockEnt		1058486						
ANR	1059398	Symbol	priv		1058486						
ANR	1059399	Symbol	m_wants_dc_udp_self		1058486						
ANR	1059400	Symbol	DEFAULT_MAXSOCKETS		1058486						
ANR	1059401	Symbol	SocSize		1058486						
ANR	1059402	Symbol	& DaemonCore :: Register_Socket		1058486						
ANR	1059403	Symbol	DEFAULT_MAXREAPS		1058486						
ANR	1059404	Symbol	NULL		1058486						
ANR	1059405	Symbol	sockTable		1058486						
ANR	1059406	Symbol	this		1058486						
ANR	1059407	Symbol	param_boolean		1058486						
ANR	1059408	Symbol	m_refresh_dns_timer		1058486						
ANR	1059409	Symbol	& Big_fat_mutex		1058486						
ANR	1059410	Symbol	nSig		1058486						
ANR	1059411	Symbol	m_ccb_listeners		1058486						
ANR	1059412	Symbol	& DaemonCore :: Register_Timer_TS		1058486						
ANR	1059413	Symbol	true		1058486						
ANR	1059414	Symbol	& blankPipeEnt		1058486						
ANR	1059415	Symbol	m_in_daemon_shutdown_fast		1058486						
ANR	1059416	Symbol	maxSocket		1058486						
ANR	1059417	Symbol	m_invalidate_sessions_via_tcp		1058486						
ANR	1059418	Symbol	soap		1058486						
ANR	1059419	Symbol	curr_regdataptr		1058486						
ANR	1059420	Symbol	& DaemonCore :: CallCommandHandler		1058486						
ANR	1059421	Symbol	PidSize		1058486						
ANR	1059422	Symbol	inheritedSocks		1058486						
ANR	1059423	Symbol	ComSize		1058486						
ANR	1059424	Symbol	pipeHandleTable		1058486						
ANR	1059425	Symbol	m_wants_restart		1058486						
ANR	1059426	Symbol	_cookie_data		1058486						
ANR	1059427	Symbol	maxCommand		1058486						
ANR	1059428	Symbol	& DaemonCore :: TooManyRegisteredSockets		1058486						
ANR	1059429	Symbol	m_proc_family		1058486						
ANR	1059430	Symbol	file_descriptor_safety_limit		1058486						
ANR	1059431	Symbol	dc_rsock		1058486						
ANR	1059432	Symbol	m_private_network_name		1058486						
ANR	1059433	Symbol	get_mySubSystem ( ) -> getName		1058486						
ANR	1059434	Symbol	* get_mySubSystem		1058486						
ANR	1059435	Symbol	& DaemonCore :: Cancel_Timer		1058486						
ANR	1059436	Symbol	false		1058486						
ANR	1059437	Symbol	D_ALWAYS		1058486						
ANR	1059438	Symbol	DEFAULT_PIDBUCKETS		1058486						
ANR	1059439	Symbol	pipeTable		1058486						
ANR	1059440	Symbol	_cookie_len		1058486						
ANR	1059441	Symbol	m_collector_list		1058486						
ANR	1059442	Symbol	DEFAULT_MAXCOMMANDS		1058486						
ANR	1059443	Symbol	DEFAULT_MAXPIPES		1058486						
ANR	1059444	Symbol	send_child_alive_timer		1058486						
ANR	1059445	Symbol	* i		1058486						
ANR	1059446	Symbol	SigSize		1058486						
ANR	1059447	Symbol	SettableAttrsLists		1058486						
ANR	1059448	Symbol	maxPipeBuffer		1058486						
ANR	1059449	Symbol	maxPipeHandleIndex		1058486						
ANR	1059450	Symbol	FALSE		1058486						
ANR	1059451	Symbol	blankPipeEnt . index		1058486						
ANR	1059452	Symbol	max_fds_name		1058486						
ANR	1059453	Function	DaemonCore :: ~DaemonCore	488:0:13296:16211							
ANR	1059454	FunctionDef	DaemonCore :: ~DaemonCore ()		1059453	0					
ANR	1059455	CompoundStatement		489:0:13322:16211	1059453	0					
ANR	1059456	IdentifierDeclStatement	int i ;	490:1:13325:13331	1059453	0	True				
ANR	1059457	IdentifierDecl	i		1059453	0					
ANR	1059458	IdentifierDeclType	int		1059453	0					
ANR	1059459	Identifier	i		1059453	1					
ANR	1059460	IfStatement	if ( m_ccb_listeners )		1059453	1					
ANR	1059461	Condition	m_ccb_listeners	492:5:13339:13353	1059453	0	True				
ANR	1059462	Identifier	m_ccb_listeners		1059453	0					
ANR	1059463	CompoundStatement		4:23:34:34	1059453	1					
ANR	1059464	Statement	delete	493:2:13361:13366	1059453	0	True				
ANR	1059465	ExpressionStatement	m_ccb_listeners	493:9:13368:13383	1059453	1	True				
ANR	1059466	Identifier	m_ccb_listeners		1059453	0					
ANR	1059467	ExpressionStatement	m_ccb_listeners = NULL	494:2:13387:13409	1059453	2	True				
ANR	1059468	AssignmentExpression	m_ccb_listeners = NULL		1059453	0		=			
ANR	1059469	Identifier	m_ccb_listeners		1059453	0					
ANR	1059470	Identifier	NULL		1059453	1					
ANR	1059471	IfStatement	if ( m_shared_port_endpoint )		1059453	2					
ANR	1059472	Condition	m_shared_port_endpoint	497:5:13420:13441	1059453	0	True				
ANR	1059473	Identifier	m_shared_port_endpoint		1059453	0					
ANR	1059474	CompoundStatement		9:30:122:122	1059453	1					
ANR	1059475	Statement	delete	498:2:13449:13454	1059453	0	True				
ANR	1059476	ExpressionStatement	m_shared_port_endpoint	498:9:13456:13478	1059453	1	True				
ANR	1059477	Identifier	m_shared_port_endpoint		1059453	0					
ANR	1059478	ExpressionStatement	m_shared_port_endpoint = NULL	499:2:13482:13511	1059453	2	True				
ANR	1059479	AssignmentExpression	m_shared_port_endpoint = NULL		1059453	0		=			
ANR	1059480	Identifier	m_shared_port_endpoint		1059453	0					
ANR	1059481	Identifier	NULL		1059453	1					
ANR	1059482	ExpressionStatement	close ( async_pipe [ 1 ] )	503:1:13532:13552	1059453	3	True				
ANR	1059483	CallExpression	close ( async_pipe [ 1 ] )		1059453	0					
ANR	1059484	Callee	close		1059453	0					
ANR	1059485	Identifier	close		1059453	0					
ANR	1059486	ArgumentList	async_pipe [ 1 ]		1059453	1					
ANR	1059487	Argument	async_pipe [ 1 ]		1059453	0					
ANR	1059488	ArrayIndexing	async_pipe [ 1 ]		1059453	0					
ANR	1059489	Identifier	async_pipe		1059453	0					
ANR	1059490	PrimaryExpression	1		1059453	1					
ANR	1059491	ExpressionStatement	close ( async_pipe [ 0 ] )	504:1:13555:13575	1059453	4	True				
ANR	1059492	CallExpression	close ( async_pipe [ 0 ] )		1059453	0					
ANR	1059493	Callee	close		1059453	0					
ANR	1059494	Identifier	close		1059453	0					
ANR	1059495	ArgumentList	async_pipe [ 0 ]		1059453	1					
ANR	1059496	Argument	async_pipe [ 0 ]		1059453	0					
ANR	1059497	ArrayIndexing	async_pipe [ 0 ]		1059453	0					
ANR	1059498	Identifier	async_pipe		1059453	0					
ANR	1059499	PrimaryExpression	0		1059453	1					
ANR	1059500	IfStatement	if ( comTable != NULL )		1059453	5					
ANR	1059501	Condition	comTable != NULL	507:5:13590:13605	1059453	0	True				
ANR	1059502	EqualityExpression	comTable != NULL		1059453	0		!=			
ANR	1059503	Identifier	comTable		1059453	0					
ANR	1059504	Identifier	NULL		1059453	1					
ANR	1059505	CompoundStatement		20:1:287:287	1059453	1					
ANR	1059506	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		1059453	0					
ANR	1059507	ForInit	i = 0 ;	509:7:13619:13622	1059453	0	True				
ANR	1059508	AssignmentExpression	i = 0		1059453	0		=			
ANR	1059509	Identifier	i		1059453	0					
ANR	1059510	PrimaryExpression	0		1059453	1					
ANR	1059511	Condition	i < maxCommand	509:11:13623:13634	1059453	1	True				
ANR	1059512	RelationalExpression	i < maxCommand		1059453	0		<			
ANR	1059513	Identifier	i		1059453	0					
ANR	1059514	Identifier	maxCommand		1059453	1					
ANR	1059515	PostIncDecOperationExpression	i ++	509:24:13636:13638	1059453	2	True				
ANR	1059516	Identifier	i		1059453	0					
ANR	1059517	IncDec	++		1059453	1					
ANR	1059518	CompoundStatement		21:29:318:318	1059453	3					
ANR	1059519	ExpressionStatement	free ( comTable [ i ] . command_descrip )	510:3:13646:13681	1059453	0	True				
ANR	1059520	CallExpression	free ( comTable [ i ] . command_descrip )		1059453	0					
ANR	1059521	Callee	free		1059453	0					
ANR	1059522	Identifier	free		1059453	0					
ANR	1059523	ArgumentList	comTable [ i ] . command_descrip		1059453	1					
ANR	1059524	Argument	comTable [ i ] . command_descrip		1059453	0					
ANR	1059525	MemberAccess	comTable [ i ] . command_descrip		1059453	0					
ANR	1059526	ArrayIndexing	comTable [ i ]		1059453	0					
ANR	1059527	Identifier	comTable		1059453	0					
ANR	1059528	Identifier	i		1059453	1					
ANR	1059529	Identifier	command_descrip		1059453	1					
ANR	1059530	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	511:3:13686:13721	1059453	1	True				
ANR	1059531	CallExpression	free ( comTable [ i ] . handler_descrip )		1059453	0					
ANR	1059532	Callee	free		1059453	0					
ANR	1059533	Identifier	free		1059453	0					
ANR	1059534	ArgumentList	comTable [ i ] . handler_descrip		1059453	1					
ANR	1059535	Argument	comTable [ i ] . handler_descrip		1059453	0					
ANR	1059536	MemberAccess	comTable [ i ] . handler_descrip		1059453	0					
ANR	1059537	ArrayIndexing	comTable [ i ]		1059453	0					
ANR	1059538	Identifier	comTable		1059453	0					
ANR	1059539	Identifier	i		1059453	1					
ANR	1059540	Identifier	handler_descrip		1059453	1					
ANR	1059541	Statement	delete	513:2:13729:13734	1059453	1	True				
ANR	1059542	Statement	[	513:9:13736:13736	1059453	2	True				
ANR	1059543	Statement	]	513:10:13737:13737	1059453	3	True				
ANR	1059544	ExpressionStatement	comTable	513:11:13738:13746	1059453	4	True				
ANR	1059545	Identifier	comTable		1059453	0					
ANR	1059546	IfStatement	if ( sigTable != NULL )		1059453	6					
ANR	1059547	Condition	sigTable != NULL	516:5:13757:13772	1059453	0	True				
ANR	1059548	EqualityExpression	sigTable != NULL		1059453	0		!=			
ANR	1059549	Identifier	sigTable		1059453	0					
ANR	1059550	Identifier	NULL		1059453	1					
ANR	1059551	CompoundStatement		29:1:453:453	1059453	1					
ANR	1059552	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		1059453	0					
ANR	1059553	ForInit	i = 0 ;	518:7:13785:13788	1059453	0	True				
ANR	1059554	AssignmentExpression	i = 0		1059453	0		=			
ANR	1059555	Identifier	i		1059453	0					
ANR	1059556	PrimaryExpression	0		1059453	1					
ANR	1059557	Condition	i < maxSig	518:11:13789:13796	1059453	1	True				
ANR	1059558	RelationalExpression	i < maxSig		1059453	0		<			
ANR	1059559	Identifier	i		1059453	0					
ANR	1059560	Identifier	maxSig		1059453	1					
ANR	1059561	PostIncDecOperationExpression	i ++	518:20:13798:13800	1059453	2	True				
ANR	1059562	Identifier	i		1059453	0					
ANR	1059563	IncDec	++		1059453	1					
ANR	1059564	CompoundStatement		30:25:480:480	1059453	3					
ANR	1059565	ExpressionStatement	free ( sigTable [ i ] . sig_descrip )	519:3:13808:13839	1059453	0	True				
ANR	1059566	CallExpression	free ( sigTable [ i ] . sig_descrip )		1059453	0					
ANR	1059567	Callee	free		1059453	0					
ANR	1059568	Identifier	free		1059453	0					
ANR	1059569	ArgumentList	sigTable [ i ] . sig_descrip		1059453	1					
ANR	1059570	Argument	sigTable [ i ] . sig_descrip		1059453	0					
ANR	1059571	MemberAccess	sigTable [ i ] . sig_descrip		1059453	0					
ANR	1059572	ArrayIndexing	sigTable [ i ]		1059453	0					
ANR	1059573	Identifier	sigTable		1059453	0					
ANR	1059574	Identifier	i		1059453	1					
ANR	1059575	Identifier	sig_descrip		1059453	1					
ANR	1059576	ExpressionStatement	free ( sigTable [ i ] . handler_descrip )	520:3:13844:13879	1059453	1	True				
ANR	1059577	CallExpression	free ( sigTable [ i ] . handler_descrip )		1059453	0					
ANR	1059578	Callee	free		1059453	0					
ANR	1059579	Identifier	free		1059453	0					
ANR	1059580	ArgumentList	sigTable [ i ] . handler_descrip		1059453	1					
ANR	1059581	Argument	sigTable [ i ] . handler_descrip		1059453	0					
ANR	1059582	MemberAccess	sigTable [ i ] . handler_descrip		1059453	0					
ANR	1059583	ArrayIndexing	sigTable [ i ]		1059453	0					
ANR	1059584	Identifier	sigTable		1059453	0					
ANR	1059585	Identifier	i		1059453	1					
ANR	1059586	Identifier	handler_descrip		1059453	1					
ANR	1059587	Statement	delete	522:2:13887:13892	1059453	1	True				
ANR	1059588	Statement	[	522:9:13894:13894	1059453	2	True				
ANR	1059589	Statement	]	522:10:13895:13895	1059453	3	True				
ANR	1059590	ExpressionStatement	sigTable	522:11:13896:13904	1059453	4	True				
ANR	1059591	Identifier	sigTable		1059453	0					
ANR	1059592	IfStatement	if ( sockTable != NULL )		1059453	7					
ANR	1059593	Condition	sockTable != NULL	525:5:13915:13931	1059453	0	True				
ANR	1059594	EqualityExpression	sockTable != NULL		1059453	0		!=			
ANR	1059595	Identifier	sockTable		1059453	0					
ANR	1059596	Identifier	NULL		1059453	1					
ANR	1059597	CompoundStatement		38:1:612:612	1059453	1					
ANR	1059598	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1059453	0					
ANR	1059599	ForInit	i = 0 ;	539:7:14537:14540	1059453	0	True				
ANR	1059600	AssignmentExpression	i = 0		1059453	0		=			
ANR	1059601	Identifier	i		1059453	0					
ANR	1059602	PrimaryExpression	0		1059453	1					
ANR	1059603	Condition	i < nSock	539:11:14541:14547	1059453	1	True				
ANR	1059604	RelationalExpression	i < nSock		1059453	0		<			
ANR	1059605	Identifier	i		1059453	0					
ANR	1059606	Identifier	nSock		1059453	1					
ANR	1059607	PostIncDecOperationExpression	i ++	539:19:14549:14551	1059453	2	True				
ANR	1059608	Identifier	i		1059453	0					
ANR	1059609	IncDec	++		1059453	1					
ANR	1059610	CompoundStatement		51:24:1231:1231	1059453	3					
ANR	1059611	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	540:3:14559:14597	1059453	0	True				
ANR	1059612	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		1059453	0					
ANR	1059613	Callee	free		1059453	0					
ANR	1059614	Identifier	free		1059453	0					
ANR	1059615	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		1059453	1					
ANR	1059616	Argument	( * sockTable ) [ i ] . iosock_descrip		1059453	0					
ANR	1059617	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1059453	0					
ANR	1059618	ArrayIndexing	( * sockTable ) [ i ]		1059453	0					
ANR	1059619	UnaryOperationExpression	* sockTable		1059453	0					
ANR	1059620	UnaryOperator	*		1059453	0					
ANR	1059621	Identifier	sockTable		1059453	1					
ANR	1059622	Identifier	i		1059453	1					
ANR	1059623	Identifier	iosock_descrip		1059453	1					
ANR	1059624	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	541:3:14602:14641	1059453	1	True				
ANR	1059625	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		1059453	0					
ANR	1059626	Callee	free		1059453	0					
ANR	1059627	Identifier	free		1059453	0					
ANR	1059628	ArgumentList	( * sockTable ) [ i ] . handler_descrip		1059453	1					
ANR	1059629	Argument	( * sockTable ) [ i ] . handler_descrip		1059453	0					
ANR	1059630	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1059453	0					
ANR	1059631	ArrayIndexing	( * sockTable ) [ i ]		1059453	0					
ANR	1059632	UnaryOperationExpression	* sockTable		1059453	0					
ANR	1059633	UnaryOperator	*		1059453	0					
ANR	1059634	Identifier	sockTable		1059453	1					
ANR	1059635	Identifier	i		1059453	1					
ANR	1059636	Identifier	handler_descrip		1059453	1					
ANR	1059637	Statement	delete	543:2:14649:14654	1059453	1	True				
ANR	1059638	ExpressionStatement	sockTable	543:9:14656:14665	1059453	2	True				
ANR	1059639	Identifier	sockTable		1059453	0					
ANR	1059640	IfStatement	if ( sec_man )		1059453	8					
ANR	1059641	Condition	sec_man	546:5:14676:14682	1059453	0	True				
ANR	1059642	Identifier	sec_man		1059453	0					
ANR	1059643	CompoundStatement		62:2:1535:1594	1059453	1					
ANR	1059644	IdentifierDeclStatement	KeyCache * tmp_kt = sec_man -> session_cache ;	549:2:14812:14854	1059453	0	True				
ANR	1059645	IdentifierDecl	* tmp_kt = sec_man -> session_cache		1059453	0					
ANR	1059646	IdentifierDeclType	KeyCache *		1059453	0					
ANR	1059647	Identifier	tmp_kt		1059453	1					
ANR	1059648	AssignmentExpression	* tmp_kt = sec_man -> session_cache		1059453	2		=			
ANR	1059649	Identifier	tmp_kt		1059453	0					
ANR	1059650	PtrMemberAccess	sec_man -> session_cache		1059453	1					
ANR	1059651	Identifier	sec_man		1059453	0					
ANR	1059652	Identifier	session_cache		1059453	1					
ANR	1059653	IdentifierDeclStatement	"HashTable < MyString , MyString > * tmp_cm = sec_man -> command_map ;"	550:2:14858:14917	1059453	1	True				
ANR	1059654	IdentifierDecl	* tmp_cm = sec_man -> command_map		1059453	0					
ANR	1059655	IdentifierDeclType	"HashTable < MyString , MyString > *"		1059453	0					
ANR	1059656	Identifier	tmp_cm		1059453	1					
ANR	1059657	AssignmentExpression	* tmp_cm = sec_man -> command_map		1059453	2		=			
ANR	1059658	Identifier	tmp_cm		1059453	0					
ANR	1059659	PtrMemberAccess	sec_man -> command_map		1059453	1					
ANR	1059660	Identifier	sec_man		1059453	0					
ANR	1059661	Identifier	command_map		1059453	1					
ANR	1059662	Statement	delete	552:2:14922:14927	1059453	2	True				
ANR	1059663	ExpressionStatement	sec_man	552:9:14929:14936	1059453	3	True				
ANR	1059664	Identifier	sec_man		1059453	0					
ANR	1059665	Statement	delete	553:2:14940:14945	1059453	4	True				
ANR	1059666	ExpressionStatement	tmp_kt	553:9:14947:14953	1059453	5	True				
ANR	1059667	Identifier	tmp_kt		1059453	0					
ANR	1059668	Statement	delete	554:2:14957:14962	1059453	6	True				
ANR	1059669	ExpressionStatement	tmp_cm	554:9:14964:14970	1059453	7	True				
ANR	1059670	Identifier	tmp_cm		1059453	0					
ANR	1059671	IfStatement	if ( dc_rsock )		1059453	9					
ANR	1059672	Condition	dc_rsock	558:5:15036:15043	1059453	0	True				
ANR	1059673	Identifier	dc_rsock		1059453	0					
ANR	1059674	CompoundStatement		70:16:1724:1724	1059453	1					
ANR	1059675	Statement	delete	559:2:15051:15056	1059453	0	True				
ANR	1059676	ExpressionStatement	dc_rsock	559:9:15058:15066	1059453	1	True				
ANR	1059677	Identifier	dc_rsock		1059453	0					
ANR	1059678	IfStatement	if ( dc_ssock )		1059453	10					
ANR	1059679	Condition	dc_ssock	561:5:15076:15083	1059453	0	True				
ANR	1059680	Identifier	dc_ssock		1059453	0					
ANR	1059681	CompoundStatement		73:16:1764:1764	1059453	1					
ANR	1059682	Statement	delete	562:2:15091:15096	1059453	0	True				
ANR	1059683	ExpressionStatement	dc_ssock	562:9:15098:15106	1059453	1	True				
ANR	1059684	Identifier	dc_ssock		1059453	0					
ANR	1059685	IfStatement	if ( reapTable != NULL )		1059453	11					
ANR	1059686	Condition	reapTable != NULL	565:5:15117:15133	1059453	0	True				
ANR	1059687	EqualityExpression	reapTable != NULL		1059453	0		!=			
ANR	1059688	Identifier	reapTable		1059453	0					
ANR	1059689	Identifier	NULL		1059453	1					
ANR	1059690	CompoundStatement		78:1:1814:1814	1059453	1					
ANR	1059691	ForStatement	for ( i = 0 ; i < maxReap ; i ++ )		1059453	0					
ANR	1059692	ForInit	i = 0 ;	567:7:15146:15149	1059453	0	True				
ANR	1059693	AssignmentExpression	i = 0		1059453	0		=			
ANR	1059694	Identifier	i		1059453	0					
ANR	1059695	PrimaryExpression	0		1059453	1					
ANR	1059696	Condition	i < maxReap	567:11:15150:15158	1059453	1	True				
ANR	1059697	RelationalExpression	i < maxReap		1059453	0		<			
ANR	1059698	Identifier	i		1059453	0					
ANR	1059699	Identifier	maxReap		1059453	1					
ANR	1059700	PostIncDecOperationExpression	i ++	567:21:15160:15162	1059453	2	True				
ANR	1059701	Identifier	i		1059453	0					
ANR	1059702	IncDec	++		1059453	1					
ANR	1059703	CompoundStatement		79:26:1842:1842	1059453	3					
ANR	1059704	ExpressionStatement	free ( reapTable [ i ] . reap_descrip )	568:3:15170:15203	1059453	0	True				
ANR	1059705	CallExpression	free ( reapTable [ i ] . reap_descrip )		1059453	0					
ANR	1059706	Callee	free		1059453	0					
ANR	1059707	Identifier	free		1059453	0					
ANR	1059708	ArgumentList	reapTable [ i ] . reap_descrip		1059453	1					
ANR	1059709	Argument	reapTable [ i ] . reap_descrip		1059453	0					
ANR	1059710	MemberAccess	reapTable [ i ] . reap_descrip		1059453	0					
ANR	1059711	ArrayIndexing	reapTable [ i ]		1059453	0					
ANR	1059712	Identifier	reapTable		1059453	0					
ANR	1059713	Identifier	i		1059453	1					
ANR	1059714	Identifier	reap_descrip		1059453	1					
ANR	1059715	ExpressionStatement	free ( reapTable [ i ] . handler_descrip )	569:3:15208:15244	1059453	1	True				
ANR	1059716	CallExpression	free ( reapTable [ i ] . handler_descrip )		1059453	0					
ANR	1059717	Callee	free		1059453	0					
ANR	1059718	Identifier	free		1059453	0					
ANR	1059719	ArgumentList	reapTable [ i ] . handler_descrip		1059453	1					
ANR	1059720	Argument	reapTable [ i ] . handler_descrip		1059453	0					
ANR	1059721	MemberAccess	reapTable [ i ] . handler_descrip		1059453	0					
ANR	1059722	ArrayIndexing	reapTable [ i ]		1059453	0					
ANR	1059723	Identifier	reapTable		1059453	0					
ANR	1059724	Identifier	i		1059453	1					
ANR	1059725	Identifier	handler_descrip		1059453	1					
ANR	1059726	Statement	delete	571:2:15252:15257	1059453	1	True				
ANR	1059727	Statement	[	571:9:15259:15259	1059453	2	True				
ANR	1059728	Statement	]	571:10:15260:15260	1059453	3	True				
ANR	1059729	ExpressionStatement	reapTable	571:11:15261:15270	1059453	4	True				
ANR	1059730	Identifier	reapTable		1059453	0					
ANR	1059731	IdentifierDeclStatement	PidEntry * pid_entry ;	575:1:15340:15359	1059453	12	True				
ANR	1059732	IdentifierDecl	* pid_entry		1059453	0					
ANR	1059733	IdentifierDeclType	PidEntry *		1059453	0					
ANR	1059734	Identifier	pid_entry		1059453	1					
ANR	1059735	ExpressionStatement	pidTable -> startIterations ( )	576:1:15362:15389	1059453	13	True				
ANR	1059736	CallExpression	pidTable -> startIterations ( )		1059453	0					
ANR	1059737	Callee	pidTable -> startIterations		1059453	0					
ANR	1059738	PtrMemberAccess	pidTable -> startIterations		1059453	0					
ANR	1059739	Identifier	pidTable		1059453	0					
ANR	1059740	Identifier	startIterations		1059453	1					
ANR	1059741	ArgumentList			1059453	1					
ANR	1059742	WhileStatement	while ( pidTable -> iterate ( pid_entry ) )		1059453	14					
ANR	1059743	Condition	pidTable -> iterate ( pid_entry )	577:8:15399:15426	1059453	0	True				
ANR	1059744	CallExpression	pidTable -> iterate ( pid_entry )		1059453	0					
ANR	1059745	Callee	pidTable -> iterate		1059453	0					
ANR	1059746	PtrMemberAccess	pidTable -> iterate		1059453	0					
ANR	1059747	Identifier	pidTable		1059453	0					
ANR	1059748	Identifier	iterate		1059453	1					
ANR	1059749	ArgumentList	pid_entry		1059453	1					
ANR	1059750	Argument	pid_entry		1059453	0					
ANR	1059751	Identifier	pid_entry		1059453	0					
ANR	1059752	CompoundStatement		90:1:2107:2107	1059453	1					
ANR	1059753	IfStatement	if ( pid_entry )		1059453	0					
ANR	1059754	Condition	pid_entry	579:7:15439:15447	1059453	0	True				
ANR	1059755	Identifier	pid_entry		1059453	0					
ANR	1059756	Statement	delete	579:19:15451:15456	1059453	1	True				
ANR	1059757	ExpressionStatement	pid_entry	579:26:15458:15467	1059453	1	True				
ANR	1059758	Identifier	pid_entry		1059453	0					
ANR	1059759	Statement	delete	581:1:15473:15478	1059453	15	True				
ANR	1059760	ExpressionStatement	pidTable	581:8:15480:15488	1059453	16	True				
ANR	1059761	Identifier	pidTable		1059453	0					
ANR	1059762	IfStatement	if ( m_proc_family != NULL )		1059453	17					
ANR	1059763	Condition	m_proc_family != NULL	583:5:15496:15516	1059453	0	True				
ANR	1059764	EqualityExpression	m_proc_family != NULL		1059453	0		!=			
ANR	1059765	Identifier	m_proc_family		1059453	0					
ANR	1059766	Identifier	NULL		1059453	1					
ANR	1059767	CompoundStatement		95:28:2196:2196	1059453	1					
ANR	1059768	Statement	delete	584:2:15523:15528	1059453	0	True				
ANR	1059769	ExpressionStatement	m_proc_family	584:9:15530:15543	1059453	1	True				
ANR	1059770	Identifier	m_proc_family		1059453	0					
ANR	1059771	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1059453	18					
ANR	1059772	ForInit	i = 0 ;	587:6:15555:15558	1059453	0	True				
ANR	1059773	AssignmentExpression	i = 0		1059453	0		=			
ANR	1059774	Identifier	i		1059453	0					
ANR	1059775	PrimaryExpression	0		1059453	1					
ANR	1059776	Condition	i < LAST_PERM	587:11:15560:15570	1059453	1	True				
ANR	1059777	RelationalExpression	i < LAST_PERM		1059453	0		<			
ANR	1059778	Identifier	i		1059453	0					
ANR	1059779	Identifier	LAST_PERM		1059453	1					
ANR	1059780	PostIncDecOperationExpression	i ++	587:24:15573:15575	1059453	2	True				
ANR	1059781	Identifier	i		1059453	0					
ANR	1059782	IncDec	++		1059453	1					
ANR	1059783	CompoundStatement		99:30:2256:2256	1059453	3					
ANR	1059784	IfStatement	if ( SettableAttrsLists [ i ] )		1059453	0					
ANR	1059785	Condition	SettableAttrsLists [ i ]	588:6:15587:15607	1059453	0	True				
ANR	1059786	ArrayIndexing	SettableAttrsLists [ i ]		1059453	0					
ANR	1059787	Identifier	SettableAttrsLists		1059453	0					
ANR	1059788	Identifier	i		1059453	1					
ANR	1059789	CompoundStatement		100:30:2288:2288	1059453	1					
ANR	1059790	Statement	delete	589:3:15616:15621	1059453	0	True				
ANR	1059791	ExpressionStatement	SettableAttrsLists [ i ]	589:10:15623:15644	1059453	1	True				
ANR	1059792	ArrayIndexing	SettableAttrsLists [ i ]		1059453	0					
ANR	1059793	Identifier	SettableAttrsLists		1059453	0					
ANR	1059794	Identifier	i		1059453	1					
ANR	1059795	IfStatement	if ( pipeTable )		1059453	19					
ANR	1059796	Condition	pipeTable	593:5:15659:15667	1059453	0	True				
ANR	1059797	Identifier	pipeTable		1059453	0					
ANR	1059798	CompoundStatement		105:17:2348:2348	1059453	1					
ANR	1059799	Statement	delete	594:2:15675:15680	1059453	0	True				
ANR	1059800	ExpressionStatement	pipeTable	594:8:15681:15694	1059453	1	True				
ANR	1059801	Identifier	pipeTable		1059453	0					
ANR	1059802	IfStatement	if ( pipeHandleTable )		1059453	20					
ANR	1059803	Condition	pipeHandleTable	597:5:15705:15719	1059453	0	True				
ANR	1059804	Identifier	pipeHandleTable		1059453	0					
ANR	1059805	CompoundStatement		109:22:2399:2399	1059453	1					
ANR	1059806	Statement	delete	598:2:15726:15731	1059453	0	True				
ANR	1059807	ExpressionStatement	pipeHandleTable	598:9:15733:15748	1059453	1	True				
ANR	1059808	Identifier	pipeHandleTable		1059453	0					
ANR	1059809	ExpressionStatement	t . CancelAllTimers ( )	601:1:15755:15774	1059453	21	True				
ANR	1059810	CallExpression	t . CancelAllTimers ( )		1059453	0					
ANR	1059811	Callee	t . CancelAllTimers		1059453	0					
ANR	1059812	MemberAccess	t . CancelAllTimers		1059453	0					
ANR	1059813	Identifier	t		1059453	0					
ANR	1059814	Identifier	CancelAllTimers		1059453	1					
ANR	1059815	ArgumentList			1059453	1					
ANR	1059816	IfStatement	if ( _cookie_data )		1059453	22					
ANR	1059817	Condition	_cookie_data	603:5:15782:15793	1059453	0	True				
ANR	1059818	Identifier	_cookie_data		1059453	0					
ANR	1059819	CompoundStatement		115:19:2473:2473	1059453	1					
ANR	1059820	ExpressionStatement	free ( _cookie_data )	604:2:15800:15818	1059453	0	True				
ANR	1059821	CallExpression	free ( _cookie_data )		1059453	0					
ANR	1059822	Callee	free		1059453	0					
ANR	1059823	Identifier	free		1059453	0					
ANR	1059824	ArgumentList	_cookie_data		1059453	1					
ANR	1059825	Argument	_cookie_data		1059453	0					
ANR	1059826	Identifier	_cookie_data		1059453	0					
ANR	1059827	IfStatement	if ( _cookie_data_old )		1059453	23					
ANR	1059828	Condition	_cookie_data_old	606:5:15828:15843	1059453	0	True				
ANR	1059829	Identifier	_cookie_data_old		1059453	0					
ANR	1059830	CompoundStatement		118:23:2523:2523	1059453	1					
ANR	1059831	ExpressionStatement	free ( _cookie_data_old )	607:2:15850:15872	1059453	0	True				
ANR	1059832	CallExpression	free ( _cookie_data_old )		1059453	0					
ANR	1059833	Callee	free		1059453	0					
ANR	1059834	Identifier	free		1059453	0					
ANR	1059835	ArgumentList	_cookie_data_old		1059453	1					
ANR	1059836	Argument	_cookie_data_old		1059453	0					
ANR	1059837	Identifier	_cookie_data_old		1059453	0					
ANR	1059838	IfStatement	if ( soap )		1059453	24					
ANR	1059839	Condition	soap	611:5:15905:15908	1059453	0	True				
ANR	1059840	Identifier	soap		1059453	0					
ANR	1059841	CompoundStatement		123:12:2589:2589	1059453	1					
ANR	1059842	ExpressionStatement	dc_soap_free ( soap )	612:2:15916:15934	1059453	0	True				
ANR	1059843	CallExpression	dc_soap_free ( soap )		1059453	0					
ANR	1059844	Callee	dc_soap_free		1059453	0					
ANR	1059845	Identifier	dc_soap_free		1059453	0					
ANR	1059846	ArgumentList	soap		1059453	1					
ANR	1059847	Argument	soap		1059453	0					
ANR	1059848	Identifier	soap		1059453	0					
ANR	1059849	ExpressionStatement	soap = NULL	613:2:15938:15949	1059453	1	True				
ANR	1059850	AssignmentExpression	soap = NULL		1059453	0		=			
ANR	1059851	Identifier	soap		1059453	0					
ANR	1059852	Identifier	NULL		1059453	1					
ANR	1059853	IfStatement	if ( localAdFile )		1059453	25					
ANR	1059854	Condition	localAdFile	617:4:15966:15976	1059453	0	True				
ANR	1059855	Identifier	localAdFile		1059453	0					
ANR	1059856	CompoundStatement		129:17:2656:2656	1059453	1					
ANR	1059857	ExpressionStatement	free ( localAdFile )	618:2:15983:16000	1059453	0	True				
ANR	1059858	CallExpression	free ( localAdFile )		1059453	0					
ANR	1059859	Callee	free		1059453	0					
ANR	1059860	Identifier	free		1059453	0					
ANR	1059861	ArgumentList	localAdFile		1059453	1					
ANR	1059862	Argument	localAdFile		1059453	0					
ANR	1059863	Identifier	localAdFile		1059453	0					
ANR	1059864	ExpressionStatement	localAdFile = NULL	619:2:16004:16022	1059453	1	True				
ANR	1059865	AssignmentExpression	localAdFile = NULL		1059453	0		=			
ANR	1059866	Identifier	localAdFile		1059453	0					
ANR	1059867	Identifier	NULL		1059453	1					
ANR	1059868	IfStatement	if ( m_collector_list )		1059453	26					
ANR	1059869	Condition	m_collector_list	622:5:16034:16049	1059453	0	True				
ANR	1059870	Identifier	m_collector_list		1059453	0					
ANR	1059871	CompoundStatement		134:23:2729:2729	1059453	1					
ANR	1059872	Statement	delete	623:2:16056:16061	1059453	0	True				
ANR	1059873	ExpressionStatement	m_collector_list	623:9:16063:16079	1059453	1	True				
ANR	1059874	Identifier	m_collector_list		1059453	0					
ANR	1059875	ExpressionStatement	m_collector_list = NULL	624:2:16083:16106	1059453	2	True				
ANR	1059876	AssignmentExpression	m_collector_list = NULL		1059453	0		=			
ANR	1059877	Identifier	m_collector_list		1059453	0					
ANR	1059878	Identifier	NULL		1059453	1					
ANR	1059879	IfStatement	if ( m_private_network_name )		1059453	27					
ANR	1059880	Condition	m_private_network_name	627:5:16117:16138	1059453	0	True				
ANR	1059881	Identifier	m_private_network_name		1059453	0					
ANR	1059882	CompoundStatement		139:29:2818:2818	1059453	1					
ANR	1059883	ExpressionStatement	free ( m_private_network_name )	628:2:16145:16173	1059453	0	True				
ANR	1059884	CallExpression	free ( m_private_network_name )		1059453	0					
ANR	1059885	Callee	free		1059453	0					
ANR	1059886	Identifier	free		1059453	0					
ANR	1059887	ArgumentList	m_private_network_name		1059453	1					
ANR	1059888	Argument	m_private_network_name		1059453	0					
ANR	1059889	Identifier	m_private_network_name		1059453	0					
ANR	1059890	ExpressionStatement	m_private_network_name = NULL	629:2:16177:16206	1059453	1	True				
ANR	1059891	AssignmentExpression	m_private_network_name = NULL		1059453	0		=			
ANR	1059892	Identifier	m_private_network_name		1059453	0					
ANR	1059893	Identifier	NULL		1059453	1					
ANR	1059894	Identifier	DaemonCore :: ~DaemonCore		1059453	1					
ANR	1059895	ParameterList			1059453	2					
ANR	1059896	CFGEntryNode	ENTRY		1059453		True				
ANR	1059897	CFGExitNode	EXIT		1059453		True				
ANR	1059898	Symbol	comTable [ i ] . command_descrip		1059453						
ANR	1059899	Symbol	sigTable [ i ] . sig_descrip		1059453						
ANR	1059900	Symbol	sec_man -> command_map		1059453						
ANR	1059901	Symbol	sec_man		1059453						
ANR	1059902	Symbol	( * sockTable ) [ i ] . handler_descrip		1059453						
ANR	1059903	Symbol	( * sockTable ) [ i ] . iosock_descrip		1059453						
ANR	1059904	Symbol	pidTable -> iterate		1059453						
ANR	1059905	Symbol	LAST_PERM		1059453						
ANR	1059906	Symbol	NULL		1059453						
ANR	1059907	Symbol	pid_entry		1059453						
ANR	1059908	Symbol	sockTable		1059453						
ANR	1059909	Symbol	reapTable [ i ] . reap_descrip		1059453						
ANR	1059910	Symbol	m_ccb_listeners		1059453						
ANR	1059911	Symbol	sec_man -> session_cache		1059453						
ANR	1059912	Symbol	* sec_man		1059453						
ANR	1059913	Symbol	tmp_cm		1059453						
ANR	1059914	Symbol	reapTable		1059453						
ANR	1059915	Symbol	comTable [ i ] . handler_descrip		1059453						
ANR	1059916	Symbol	tmp_kt		1059453						
ANR	1059917	Symbol	soap		1059453						
ANR	1059918	Symbol	* async_pipe		1059453						
ANR	1059919	Symbol	localAdFile		1059453						
ANR	1059920	Symbol	sigTable [ i ] . handler_descrip		1059453						
ANR	1059921	Symbol	maxSig		1059453						
ANR	1059922	Symbol	* pidTable		1059453						
ANR	1059923	Symbol	_cookie_data_old		1059453						
ANR	1059924	Symbol	* * sockTable		1059453						
ANR	1059925	Symbol	dc_ssock		1059453						
ANR	1059926	Symbol	pipeHandleTable		1059453						
ANR	1059927	Symbol	* comTable		1059453						
ANR	1059928	Symbol	* SettableAttrsLists		1059453						
ANR	1059929	Symbol	_cookie_data		1059453						
ANR	1059930	Symbol	sigTable		1059453						
ANR	1059931	Symbol	maxCommand		1059453						
ANR	1059932	Symbol	m_proc_family		1059453						
ANR	1059933	Symbol	async_pipe		1059453						
ANR	1059934	Symbol	pidTable		1059453						
ANR	1059935	Symbol	dc_rsock		1059453						
ANR	1059936	Symbol	m_private_network_name		1059453						
ANR	1059937	Symbol	nSock		1059453						
ANR	1059938	Symbol	i		1059453						
ANR	1059939	Symbol	maxReap		1059453						
ANR	1059940	Symbol	pipeTable		1059453						
ANR	1059941	Symbol	m_collector_list		1059453						
ANR	1059942	Symbol	* i		1059453						
ANR	1059943	Symbol	* sigTable		1059453						
ANR	1059944	Symbol	* sockTable		1059453						
ANR	1059945	Symbol	t		1059453						
ANR	1059946	Symbol	m_shared_port_endpoint		1059453						
ANR	1059947	Symbol	reapTable [ i ] . handler_descrip		1059453						
ANR	1059948	Symbol	SettableAttrsLists		1059453						
ANR	1059949	Symbol	comTable		1059453						
ANR	1059950	Symbol	* reapTable		1059453						
ANR	1059951	Function	DaemonCore :: Set_Default_Reaper	633:0:16214:16297							
ANR	1059952	FunctionDef	DaemonCore :: Set_Default_Reaper (int reaper_id)		1059951	0					
ANR	1059953	CompoundStatement		634:0:16267:16297	1059951	0					
ANR	1059954	ExpressionStatement	defaultReaper = reaper_id	635:1:16270:16295	1059951	0	True				
ANR	1059955	AssignmentExpression	defaultReaper = reaper_id		1059951	0		=			
ANR	1059956	Identifier	defaultReaper		1059951	0					
ANR	1059957	Identifier	reaper_id		1059951	1					
ANR	1059958	ReturnType	void		1059951	1					
ANR	1059959	Identifier	DaemonCore :: Set_Default_Reaper		1059951	2					
ANR	1059960	ParameterList	int reaper_id		1059951	3					
ANR	1059961	Parameter	int reaper_id	633:37:16251:16263	1059951	0	True				
ANR	1059962	ParameterType	int		1059951	0					
ANR	1059963	Identifier	reaper_id		1059951	1					
ANR	1059964	CFGEntryNode	ENTRY		1059951		True				
ANR	1059965	CFGExitNode	EXIT		1059951		True				
ANR	1059966	Symbol	reaper_id		1059951						
ANR	1059967	Symbol	defaultReaper		1059951						
ANR	1059968	Function	DaemonCore :: Register_Command	643:0:16575:17006							
ANR	1059969	FunctionDef	"DaemonCore :: Register_Command (int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		1059968	0					
ANR	1059970	CompoundStatement		647:0:16809:17006	1059968	0					
ANR	1059971	ReturnStatement	"return ( Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload ) ) ;"	648:1:16812:17004	1059968	0	True				
ANR	1059972	CallExpression	"Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload )"		1059968	0					
ANR	1059973	Callee	Register_Command		1059968	0					
ANR	1059974	Identifier	Register_Command		1059968	0					
ANR	1059975	ArgumentList	command		1059968	1					
ANR	1059976	Argument	command		1059968	0					
ANR	1059977	Identifier	command		1059968	0					
ANR	1059978	Argument	com_descrip		1059968	1					
ANR	1059979	Identifier	com_descrip		1059968	0					
ANR	1059980	Argument	handler		1059968	2					
ANR	1059981	Identifier	handler		1059968	0					
ANR	1059982	Argument	( CommandHandlercpp ) NULL		1059968	3					
ANR	1059983	CastExpression	( CommandHandlercpp ) NULL		1059968	0					
ANR	1059984	CastTarget	CommandHandlercpp		1059968	0					
ANR	1059985	Identifier	NULL		1059968	1					
ANR	1059986	Argument	handler_descrip		1059968	4					
ANR	1059987	Identifier	handler_descrip		1059968	0					
ANR	1059988	Argument	s		1059968	5					
ANR	1059989	Identifier	s		1059968	0					
ANR	1059990	Argument	perm		1059968	6					
ANR	1059991	Identifier	perm		1059968	0					
ANR	1059992	Argument	dprintf_flag		1059968	7					
ANR	1059993	Identifier	dprintf_flag		1059968	0					
ANR	1059994	Argument	FALSE		1059968	8					
ANR	1059995	Identifier	FALSE		1059968	0					
ANR	1059996	Argument	force_authentication		1059968	9					
ANR	1059997	Identifier	force_authentication		1059968	0					
ANR	1059998	Argument	wait_for_payload		1059968	10					
ANR	1059999	Identifier	wait_for_payload		1059968	0					
ANR	1060000	ReturnType	int		1059968	1					
ANR	1060001	Identifier	DaemonCore :: Register_Command		1059968	2					
ANR	1060002	ParameterList	"int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		1059968	3					
ANR	1060003	Parameter	int command	643:33:16608:16618	1059968	0	True				
ANR	1060004	ParameterType	int		1059968	0					
ANR	1060005	Identifier	command		1059968	1					
ANR	1060006	Parameter	const char * com_descrip	643:46:16621:16643	1059968	1	True				
ANR	1060007	ParameterType	const char *		1059968	0					
ANR	1060008	Identifier	com_descrip		1059968	1					
ANR	1060009	Parameter	CommandHandler handler	644:4:16650:16671	1059968	2	True				
ANR	1060010	ParameterType	CommandHandler		1059968	0					
ANR	1060011	Identifier	handler		1059968	1					
ANR	1060012	Parameter	const char * handler_descrip	644:28:16674:16700	1059968	3	True				
ANR	1060013	ParameterType	const char *		1059968	0					
ANR	1060014	Identifier	handler_descrip		1059968	1					
ANR	1060015	Parameter	Service * s	644:57:16703:16712	1059968	4	True				
ANR	1060016	ParameterType	Service *		1059968	0					
ANR	1060017	Identifier	s		1059968	1					
ANR	1060018	Parameter	DCpermission perm	645:4:16719:16735	1059968	5	True				
ANR	1060019	ParameterType	DCpermission		1059968	0					
ANR	1060020	Identifier	perm		1059968	1					
ANR	1060021	Parameter	int dprintf_flag	645:23:16738:16753	1059968	6	True				
ANR	1060022	ParameterType	int		1059968	0					
ANR	1060023	Identifier	dprintf_flag		1059968	1					
ANR	1060024	Parameter	bool force_authentication	645:41:16756:16780	1059968	7	True				
ANR	1060025	ParameterType	bool		1059968	0					
ANR	1060026	Identifier	force_authentication		1059968	1					
ANR	1060027	Parameter	int wait_for_payload	646:4:16787:16806	1059968	8	True				
ANR	1060028	ParameterType	int		1059968	0					
ANR	1060029	Identifier	wait_for_payload		1059968	1					
ANR	1060030	CFGEntryNode	ENTRY		1059968		True				
ANR	1060031	CFGExitNode	EXIT		1059968		True				
ANR	1060032	Symbol	handler		1059968						
ANR	1060033	Symbol	s		1059968						
ANR	1060034	Symbol	NULL		1059968						
ANR	1060035	Symbol	handler_descrip		1059968						
ANR	1060036	Symbol	perm		1059968						
ANR	1060037	Symbol	force_authentication		1059968						
ANR	1060038	Symbol	FALSE		1059968						
ANR	1060039	Symbol	dprintf_flag		1059968						
ANR	1060040	Symbol	Register_Command		1059968						
ANR	1060041	Symbol	com_descrip		1059968						
ANR	1060042	Symbol	command		1059968						
ANR	1060043	Symbol	wait_for_payload		1059968						
ANR	1060044	Function	DaemonCore :: Register_Command	654:0:17009:17422							
ANR	1060045	FunctionDef	"DaemonCore :: Register_Command (int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		1060044	0					
ANR	1060046	CompoundStatement		658:0:17249:17422	1060044	0					
ANR	1060047	ReturnStatement	"return ( Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload ) ) ;"	659:1:17252:17420	1060044	0	True				
ANR	1060048	CallExpression	"Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload )"		1060044	0					
ANR	1060049	Callee	Register_Command		1060044	0					
ANR	1060050	Identifier	Register_Command		1060044	0					
ANR	1060051	ArgumentList	command		1060044	1					
ANR	1060052	Argument	command		1060044	0					
ANR	1060053	Identifier	command		1060044	0					
ANR	1060054	Argument	com_descrip		1060044	1					
ANR	1060055	Identifier	com_descrip		1060044	0					
ANR	1060056	Argument	NULL		1060044	2					
ANR	1060057	Identifier	NULL		1060044	0					
ANR	1060058	Argument	handlercpp		1060044	3					
ANR	1060059	Identifier	handlercpp		1060044	0					
ANR	1060060	Argument	handler_descrip		1060044	4					
ANR	1060061	Identifier	handler_descrip		1060044	0					
ANR	1060062	Argument	s		1060044	5					
ANR	1060063	Identifier	s		1060044	0					
ANR	1060064	Argument	perm		1060044	6					
ANR	1060065	Identifier	perm		1060044	0					
ANR	1060066	Argument	dprintf_flag		1060044	7					
ANR	1060067	Identifier	dprintf_flag		1060044	0					
ANR	1060068	Argument	TRUE		1060044	8					
ANR	1060069	Identifier	TRUE		1060044	0					
ANR	1060070	Argument	force_authentication		1060044	9					
ANR	1060071	Identifier	force_authentication		1060044	0					
ANR	1060072	Argument	wait_for_payload		1060044	10					
ANR	1060073	Identifier	wait_for_payload		1060044	0					
ANR	1060074	ReturnType	int		1060044	1					
ANR	1060075	Identifier	DaemonCore :: Register_Command		1060044	2					
ANR	1060076	ParameterList	"int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		1060044	3					
ANR	1060077	Parameter	int command	654:33:17042:17052	1060044	0	True				
ANR	1060078	ParameterType	int		1060044	0					
ANR	1060079	Identifier	command		1060044	1					
ANR	1060080	Parameter	const char * com_descrip	654:46:17055:17077	1060044	1	True				
ANR	1060081	ParameterType	const char *		1060044	0					
ANR	1060082	Identifier	com_descrip		1060044	1					
ANR	1060083	Parameter	CommandHandlercpp handlercpp	655:4:17084:17111	1060044	2	True				
ANR	1060084	ParameterType	CommandHandlercpp		1060044	0					
ANR	1060085	Identifier	handlercpp		1060044	1					
ANR	1060086	Parameter	const char * handler_descrip	655:34:17114:17140	1060044	3	True				
ANR	1060087	ParameterType	const char *		1060044	0					
ANR	1060088	Identifier	handler_descrip		1060044	1					
ANR	1060089	Parameter	Service * s	656:4:17147:17156	1060044	4	True				
ANR	1060090	ParameterType	Service *		1060044	0					
ANR	1060091	Identifier	s		1060044	1					
ANR	1060092	Parameter	DCpermission perm	656:16:17159:17175	1060044	5	True				
ANR	1060093	ParameterType	DCpermission		1060044	0					
ANR	1060094	Identifier	perm		1060044	1					
ANR	1060095	Parameter	int dprintf_flag	656:35:17178:17193	1060044	6	True				
ANR	1060096	ParameterType	int		1060044	0					
ANR	1060097	Identifier	dprintf_flag		1060044	1					
ANR	1060098	Parameter	bool force_authentication	657:4:17200:17224	1060044	7	True				
ANR	1060099	ParameterType	bool		1060044	0					
ANR	1060100	Identifier	force_authentication		1060044	1					
ANR	1060101	Parameter	int wait_for_payload	657:31:17227:17246	1060044	8	True				
ANR	1060102	ParameterType	int		1060044	0					
ANR	1060103	Identifier	wait_for_payload		1060044	1					
ANR	1060104	CFGEntryNode	ENTRY		1060044		True				
ANR	1060105	CFGExitNode	EXIT		1060044		True				
ANR	1060106	Symbol	s		1060044						
ANR	1060107	Symbol	NULL		1060044						
ANR	1060108	Symbol	handler_descrip		1060044						
ANR	1060109	Symbol	perm		1060044						
ANR	1060110	Symbol	force_authentication		1060044						
ANR	1060111	Symbol	TRUE		1060044						
ANR	1060112	Symbol	dprintf_flag		1060044						
ANR	1060113	Symbol	Register_Command		1060044						
ANR	1060114	Symbol	com_descrip		1060044						
ANR	1060115	Symbol	handlercpp		1060044						
ANR	1060116	Symbol	command		1060044						
ANR	1060117	Symbol	wait_for_payload		1060044						
ANR	1060118	Function	DaemonCore :: Register_CommandWithPayload	664:0:17425:17867							
ANR	1060119	FunctionDef	"DaemonCore :: Register_CommandWithPayload (int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		1060118	0					
ANR	1060120	CompoundStatement		668:0:17670:17867	1060118	0					
ANR	1060121	ReturnStatement	"return ( Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload ) ) ;"	669:1:17673:17865	1060118	0	True				
ANR	1060122	CallExpression	"Register_Command ( command , com_descrip , handler , ( CommandHandlercpp ) NULL , handler_descrip , s , perm , dprintf_flag , FALSE , force_authentication , wait_for_payload )"		1060118	0					
ANR	1060123	Callee	Register_Command		1060118	0					
ANR	1060124	Identifier	Register_Command		1060118	0					
ANR	1060125	ArgumentList	command		1060118	1					
ANR	1060126	Argument	command		1060118	0					
ANR	1060127	Identifier	command		1060118	0					
ANR	1060128	Argument	com_descrip		1060118	1					
ANR	1060129	Identifier	com_descrip		1060118	0					
ANR	1060130	Argument	handler		1060118	2					
ANR	1060131	Identifier	handler		1060118	0					
ANR	1060132	Argument	( CommandHandlercpp ) NULL		1060118	3					
ANR	1060133	CastExpression	( CommandHandlercpp ) NULL		1060118	0					
ANR	1060134	CastTarget	CommandHandlercpp		1060118	0					
ANR	1060135	Identifier	NULL		1060118	1					
ANR	1060136	Argument	handler_descrip		1060118	4					
ANR	1060137	Identifier	handler_descrip		1060118	0					
ANR	1060138	Argument	s		1060118	5					
ANR	1060139	Identifier	s		1060118	0					
ANR	1060140	Argument	perm		1060118	6					
ANR	1060141	Identifier	perm		1060118	0					
ANR	1060142	Argument	dprintf_flag		1060118	7					
ANR	1060143	Identifier	dprintf_flag		1060118	0					
ANR	1060144	Argument	FALSE		1060118	8					
ANR	1060145	Identifier	FALSE		1060118	0					
ANR	1060146	Argument	force_authentication		1060118	9					
ANR	1060147	Identifier	force_authentication		1060118	0					
ANR	1060148	Argument	wait_for_payload		1060118	10					
ANR	1060149	Identifier	wait_for_payload		1060118	0					
ANR	1060150	ReturnType	int		1060118	1					
ANR	1060151	Identifier	DaemonCore :: Register_CommandWithPayload		1060118	2					
ANR	1060152	ParameterList	"int command , const char * com_descrip , CommandHandler handler , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		1060118	3					
ANR	1060153	Parameter	int command	664:44:17469:17479	1060118	0	True				
ANR	1060154	ParameterType	int		1060118	0					
ANR	1060155	Identifier	command		1060118	1					
ANR	1060156	Parameter	const char * com_descrip	664:57:17482:17504	1060118	1	True				
ANR	1060157	ParameterType	const char *		1060118	0					
ANR	1060158	Identifier	com_descrip		1060118	1					
ANR	1060159	Parameter	CommandHandler handler	665:4:17511:17532	1060118	2	True				
ANR	1060160	ParameterType	CommandHandler		1060118	0					
ANR	1060161	Identifier	handler		1060118	1					
ANR	1060162	Parameter	const char * handler_descrip	665:28:17535:17561	1060118	3	True				
ANR	1060163	ParameterType	const char *		1060118	0					
ANR	1060164	Identifier	handler_descrip		1060118	1					
ANR	1060165	Parameter	Service * s	665:57:17564:17573	1060118	4	True				
ANR	1060166	ParameterType	Service *		1060118	0					
ANR	1060167	Identifier	s		1060118	1					
ANR	1060168	Parameter	DCpermission perm	666:4:17580:17596	1060118	5	True				
ANR	1060169	ParameterType	DCpermission		1060118	0					
ANR	1060170	Identifier	perm		1060118	1					
ANR	1060171	Parameter	int dprintf_flag	666:23:17599:17614	1060118	6	True				
ANR	1060172	ParameterType	int		1060118	0					
ANR	1060173	Identifier	dprintf_flag		1060118	1					
ANR	1060174	Parameter	bool force_authentication	666:41:17617:17641	1060118	7	True				
ANR	1060175	ParameterType	bool		1060118	0					
ANR	1060176	Identifier	force_authentication		1060118	1					
ANR	1060177	Parameter	int wait_for_payload	667:4:17648:17667	1060118	8	True				
ANR	1060178	ParameterType	int		1060118	0					
ANR	1060179	Identifier	wait_for_payload		1060118	1					
ANR	1060180	CFGEntryNode	ENTRY		1060118		True				
ANR	1060181	CFGExitNode	EXIT		1060118		True				
ANR	1060182	Symbol	handler		1060118						
ANR	1060183	Symbol	s		1060118						
ANR	1060184	Symbol	NULL		1060118						
ANR	1060185	Symbol	handler_descrip		1060118						
ANR	1060186	Symbol	perm		1060118						
ANR	1060187	Symbol	force_authentication		1060118						
ANR	1060188	Symbol	FALSE		1060118						
ANR	1060189	Symbol	dprintf_flag		1060118						
ANR	1060190	Symbol	Register_Command		1060118						
ANR	1060191	Symbol	com_descrip		1060118						
ANR	1060192	Symbol	command		1060118						
ANR	1060193	Symbol	wait_for_payload		1060118						
ANR	1060194	Function	DaemonCore :: Register_CommandWithPayload	675:0:17870:18294							
ANR	1060195	FunctionDef	"DaemonCore :: Register_CommandWithPayload (int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload)"		1060194	0					
ANR	1060196	CompoundStatement		679:0:18121:18294	1060194	0					
ANR	1060197	ReturnStatement	"return ( Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload ) ) ;"	680:1:18124:18292	1060194	0	True				
ANR	1060198	CallExpression	"Register_Command ( command , com_descrip , NULL , handlercpp , handler_descrip , s , perm , dprintf_flag , TRUE , force_authentication , wait_for_payload )"		1060194	0					
ANR	1060199	Callee	Register_Command		1060194	0					
ANR	1060200	Identifier	Register_Command		1060194	0					
ANR	1060201	ArgumentList	command		1060194	1					
ANR	1060202	Argument	command		1060194	0					
ANR	1060203	Identifier	command		1060194	0					
ANR	1060204	Argument	com_descrip		1060194	1					
ANR	1060205	Identifier	com_descrip		1060194	0					
ANR	1060206	Argument	NULL		1060194	2					
ANR	1060207	Identifier	NULL		1060194	0					
ANR	1060208	Argument	handlercpp		1060194	3					
ANR	1060209	Identifier	handlercpp		1060194	0					
ANR	1060210	Argument	handler_descrip		1060194	4					
ANR	1060211	Identifier	handler_descrip		1060194	0					
ANR	1060212	Argument	s		1060194	5					
ANR	1060213	Identifier	s		1060194	0					
ANR	1060214	Argument	perm		1060194	6					
ANR	1060215	Identifier	perm		1060194	0					
ANR	1060216	Argument	dprintf_flag		1060194	7					
ANR	1060217	Identifier	dprintf_flag		1060194	0					
ANR	1060218	Argument	TRUE		1060194	8					
ANR	1060219	Identifier	TRUE		1060194	0					
ANR	1060220	Argument	force_authentication		1060194	9					
ANR	1060221	Identifier	force_authentication		1060194	0					
ANR	1060222	Argument	wait_for_payload		1060194	10					
ANR	1060223	Identifier	wait_for_payload		1060194	0					
ANR	1060224	ReturnType	int		1060194	1					
ANR	1060225	Identifier	DaemonCore :: Register_CommandWithPayload		1060194	2					
ANR	1060226	ParameterList	"int command , const char * com_descrip , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , bool force_authentication , int wait_for_payload"		1060194	3					
ANR	1060227	Parameter	int command	675:44:17914:17924	1060194	0	True				
ANR	1060228	ParameterType	int		1060194	0					
ANR	1060229	Identifier	command		1060194	1					
ANR	1060230	Parameter	const char * com_descrip	675:57:17927:17949	1060194	1	True				
ANR	1060231	ParameterType	const char *		1060194	0					
ANR	1060232	Identifier	com_descrip		1060194	1					
ANR	1060233	Parameter	CommandHandlercpp handlercpp	676:4:17956:17983	1060194	2	True				
ANR	1060234	ParameterType	CommandHandlercpp		1060194	0					
ANR	1060235	Identifier	handlercpp		1060194	1					
ANR	1060236	Parameter	const char * handler_descrip	676:34:17986:18012	1060194	3	True				
ANR	1060237	ParameterType	const char *		1060194	0					
ANR	1060238	Identifier	handler_descrip		1060194	1					
ANR	1060239	Parameter	Service * s	677:4:18019:18028	1060194	4	True				
ANR	1060240	ParameterType	Service *		1060194	0					
ANR	1060241	Identifier	s		1060194	1					
ANR	1060242	Parameter	DCpermission perm	677:16:18031:18047	1060194	5	True				
ANR	1060243	ParameterType	DCpermission		1060194	0					
ANR	1060244	Identifier	perm		1060194	1					
ANR	1060245	Parameter	int dprintf_flag	677:35:18050:18065	1060194	6	True				
ANR	1060246	ParameterType	int		1060194	0					
ANR	1060247	Identifier	dprintf_flag		1060194	1					
ANR	1060248	Parameter	bool force_authentication	678:4:18072:18096	1060194	7	True				
ANR	1060249	ParameterType	bool		1060194	0					
ANR	1060250	Identifier	force_authentication		1060194	1					
ANR	1060251	Parameter	int wait_for_payload	678:31:18099:18118	1060194	8	True				
ANR	1060252	ParameterType	int		1060194	0					
ANR	1060253	Identifier	wait_for_payload		1060194	1					
ANR	1060254	CFGEntryNode	ENTRY		1060194		True				
ANR	1060255	CFGExitNode	EXIT		1060194		True				
ANR	1060256	Symbol	s		1060194						
ANR	1060257	Symbol	NULL		1060194						
ANR	1060258	Symbol	handler_descrip		1060194						
ANR	1060259	Symbol	perm		1060194						
ANR	1060260	Symbol	force_authentication		1060194						
ANR	1060261	Symbol	TRUE		1060194						
ANR	1060262	Symbol	dprintf_flag		1060194						
ANR	1060263	Symbol	Register_Command		1060194						
ANR	1060264	Symbol	com_descrip		1060194						
ANR	1060265	Symbol	handlercpp		1060194						
ANR	1060266	Symbol	command		1060194						
ANR	1060267	Symbol	wait_for_payload		1060194						
ANR	1060268	Function	DaemonCore :: Register_Signal	685:0:18297:18557							
ANR	1060269	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandler handler , const char * handler_descrip , Service * s)"		1060268	0					
ANR	1060270	CompoundStatement		688:0:18435:18557	1060268	0					
ANR	1060271	ReturnStatement	"return ( Register_Signal ( sig , sig_descrip , handler , ( SignalHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	689:1:18438:18555	1060268	0	True				
ANR	1060272	CallExpression	"Register_Signal ( sig , sig_descrip , handler , ( SignalHandlercpp ) NULL , handler_descrip , s , FALSE )"		1060268	0					
ANR	1060273	Callee	Register_Signal		1060268	0					
ANR	1060274	Identifier	Register_Signal		1060268	0					
ANR	1060275	ArgumentList	sig		1060268	1					
ANR	1060276	Argument	sig		1060268	0					
ANR	1060277	Identifier	sig		1060268	0					
ANR	1060278	Argument	sig_descrip		1060268	1					
ANR	1060279	Identifier	sig_descrip		1060268	0					
ANR	1060280	Argument	handler		1060268	2					
ANR	1060281	Identifier	handler		1060268	0					
ANR	1060282	Argument	( SignalHandlercpp ) NULL		1060268	3					
ANR	1060283	CastExpression	( SignalHandlercpp ) NULL		1060268	0					
ANR	1060284	CastTarget	SignalHandlercpp		1060268	0					
ANR	1060285	Identifier	NULL		1060268	1					
ANR	1060286	Argument	handler_descrip		1060268	4					
ANR	1060287	Identifier	handler_descrip		1060268	0					
ANR	1060288	Argument	s		1060268	5					
ANR	1060289	Identifier	s		1060268	0					
ANR	1060290	Argument	FALSE		1060268	6					
ANR	1060291	Identifier	FALSE		1060268	0					
ANR	1060292	ReturnType	int		1060268	1					
ANR	1060293	Identifier	DaemonCore :: Register_Signal		1060268	2					
ANR	1060294	ParameterList	"int sig , const char * sig_descrip , SignalHandler handler , const char * handler_descrip , Service * s"		1060268	3					
ANR	1060295	Parameter	int sig	685:32:18329:18335	1060268	0	True				
ANR	1060296	ParameterType	int		1060268	0					
ANR	1060297	Identifier	sig		1060268	1					
ANR	1060298	Parameter	const char * sig_descrip	685:41:18338:18360	1060268	1	True				
ANR	1060299	ParameterType	const char *		1060268	0					
ANR	1060300	Identifier	sig_descrip		1060268	1					
ANR	1060301	Parameter	SignalHandler handler	686:4:18367:18387	1060268	2	True				
ANR	1060302	ParameterType	SignalHandler		1060268	0					
ANR	1060303	Identifier	handler		1060268	1					
ANR	1060304	Parameter	const char * handler_descrip	686:27:18390:18416	1060268	3	True				
ANR	1060305	ParameterType	const char *		1060268	0					
ANR	1060306	Identifier	handler_descrip		1060268	1					
ANR	1060307	Parameter	Service * s	687:4:18423:18432	1060268	4	True				
ANR	1060308	ParameterType	Service *		1060268	0					
ANR	1060309	Identifier	s		1060268	1					
ANR	1060310	CFGEntryNode	ENTRY		1060268		True				
ANR	1060311	CFGExitNode	EXIT		1060268		True				
ANR	1060312	Symbol	sig		1060268						
ANR	1060313	Symbol	handler		1060268						
ANR	1060314	Symbol	s		1060268						
ANR	1060315	Symbol	NULL		1060268						
ANR	1060316	Symbol	handler_descrip		1060268						
ANR	1060317	Symbol	Register_Signal		1060268						
ANR	1060318	Symbol	sig_descrip		1060268						
ANR	1060319	Symbol	FALSE		1060268						
ANR	1060320	Function	DaemonCore :: Register_Signal	694:0:18560:18803							
ANR	1060321	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s)"		1060320	0					
ANR	1060322	CompoundStatement		697:0:18704:18803	1060320	0					
ANR	1060323	ReturnStatement	"return ( Register_Signal ( sig , sig_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	698:1:18707:18801	1060320	0	True				
ANR	1060324	CallExpression	"Register_Signal ( sig , sig_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		1060320	0					
ANR	1060325	Callee	Register_Signal		1060320	0					
ANR	1060326	Identifier	Register_Signal		1060320	0					
ANR	1060327	ArgumentList	sig		1060320	1					
ANR	1060328	Argument	sig		1060320	0					
ANR	1060329	Identifier	sig		1060320	0					
ANR	1060330	Argument	sig_descrip		1060320	1					
ANR	1060331	Identifier	sig_descrip		1060320	0					
ANR	1060332	Argument	NULL		1060320	2					
ANR	1060333	Identifier	NULL		1060320	0					
ANR	1060334	Argument	handlercpp		1060320	3					
ANR	1060335	Identifier	handlercpp		1060320	0					
ANR	1060336	Argument	handler_descrip		1060320	4					
ANR	1060337	Identifier	handler_descrip		1060320	0					
ANR	1060338	Argument	s		1060320	5					
ANR	1060339	Identifier	s		1060320	0					
ANR	1060340	Argument	TRUE		1060320	6					
ANR	1060341	Identifier	TRUE		1060320	0					
ANR	1060342	ReturnType	int		1060320	1					
ANR	1060343	Identifier	DaemonCore :: Register_Signal		1060320	2					
ANR	1060344	ParameterList	"int sig , const char * sig_descrip , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s"		1060320	3					
ANR	1060345	Parameter	int sig	694:32:18592:18598	1060320	0	True				
ANR	1060346	ParameterType	int		1060320	0					
ANR	1060347	Identifier	sig		1060320	1					
ANR	1060348	Parameter	const char * sig_descrip	694:41:18601:18623	1060320	1	True				
ANR	1060349	ParameterType	const char *		1060320	0					
ANR	1060350	Identifier	sig_descrip		1060320	1					
ANR	1060351	Parameter	SignalHandlercpp handlercpp	695:4:18630:18656	1060320	2	True				
ANR	1060352	ParameterType	SignalHandlercpp		1060320	0					
ANR	1060353	Identifier	handlercpp		1060320	1					
ANR	1060354	Parameter	const char * handler_descrip	695:33:18659:18685	1060320	3	True				
ANR	1060355	ParameterType	const char *		1060320	0					
ANR	1060356	Identifier	handler_descrip		1060320	1					
ANR	1060357	Parameter	Service * s	696:4:18692:18701	1060320	4	True				
ANR	1060358	ParameterType	Service *		1060320	0					
ANR	1060359	Identifier	s		1060320	1					
ANR	1060360	CFGEntryNode	ENTRY		1060320		True				
ANR	1060361	CFGExitNode	EXIT		1060320		True				
ANR	1060362	Symbol	sig		1060320						
ANR	1060363	Symbol	s		1060320						
ANR	1060364	Symbol	NULL		1060320						
ANR	1060365	Symbol	handler_descrip		1060320						
ANR	1060366	Symbol	Register_Signal		1060320						
ANR	1060367	Symbol	sig_descrip		1060320						
ANR	1060368	Symbol	TRUE		1060320						
ANR	1060369	Symbol	handlercpp		1060320						
ANR	1060370	Function	DaemonCore :: RegisteredSocketCount	702:0:18806:18892							
ANR	1060371	FunctionDef	DaemonCore :: RegisteredSocketCount ()		1060370	0					
ANR	1060372	CompoundStatement		703:0:18846:18892	1060370	0					
ANR	1060373	ReturnStatement	return nRegisteredSocks + nPendingSockets ;	704:1:18849:18890	1060370	0	True				
ANR	1060374	AdditiveExpression	nRegisteredSocks + nPendingSockets		1060370	0		+			
ANR	1060375	Identifier	nRegisteredSocks		1060370	0					
ANR	1060376	Identifier	nPendingSockets		1060370	1					
ANR	1060377	ReturnType	int		1060370	1					
ANR	1060378	Identifier	DaemonCore :: RegisteredSocketCount		1060370	2					
ANR	1060379	ParameterList			1060370	3					
ANR	1060380	CFGEntryNode	ENTRY		1060370		True				
ANR	1060381	CFGExitNode	EXIT		1060370		True				
ANR	1060382	Symbol	nPendingSockets		1060370						
ANR	1060383	Symbol	nRegisteredSocks		1060370						
ANR	1060384	Function	DaemonCore :: FileDescriptorSafetyLimit	707:0:18895:19860							
ANR	1060385	FunctionDef	DaemonCore :: FileDescriptorSafetyLimit ()		1060384	0					
ANR	1060386	CompoundStatement		708:0:18939:19860	1060384	0					
ANR	1060387	IfStatement	if ( file_descriptor_safety_limit == 0 )		1060384	0					
ANR	1060388	Condition	file_descriptor_safety_limit == 0	709:5:18946:18978	1060384	0	True				
ANR	1060389	EqualityExpression	file_descriptor_safety_limit == 0		1060384	0		==			
ANR	1060390	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060391	PrimaryExpression	0		1060384	1					
ANR	1060392	CompoundStatement		15:2:634:692	1060384	1					
ANR	1060393	IdentifierDeclStatement	int file_descriptor_max = Selector :: fd_select_size ( ) ;	712:2:19082:19134	1060384	0	True				
ANR	1060394	IdentifierDecl	file_descriptor_max = Selector :: fd_select_size ( )		1060384	0					
ANR	1060395	IdentifierDeclType	int		1060384	0					
ANR	1060396	Identifier	file_descriptor_max		1060384	1					
ANR	1060397	AssignmentExpression	file_descriptor_max = Selector :: fd_select_size ( )		1060384	2		=			
ANR	1060398	Identifier	file_descriptor_max		1060384	0					
ANR	1060399	CallExpression	Selector :: fd_select_size ( )		1060384	1					
ANR	1060400	Callee	Selector :: fd_select_size		1060384	0					
ANR	1060401	Identifier	Selector :: fd_select_size		1060384	0					
ANR	1060402	ArgumentList			1060384	1					
ANR	1060403	ExpressionStatement	file_descriptor_safety_limit = file_descriptor_max - file_descriptor_max / 5	714:2:19182:19256	1060384	1	True				
ANR	1060404	AssignmentExpression	file_descriptor_safety_limit = file_descriptor_max - file_descriptor_max / 5		1060384	0		=			
ANR	1060405	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060406	AdditiveExpression	file_descriptor_max - file_descriptor_max / 5		1060384	1		-			
ANR	1060407	Identifier	file_descriptor_max		1060384	0					
ANR	1060408	MultiplicativeExpression	file_descriptor_max / 5		1060384	1		/			
ANR	1060409	Identifier	file_descriptor_max		1060384	0					
ANR	1060410	PrimaryExpression	5		1060384	1					
ANR	1060411	IfStatement	if ( file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT )		1060384	2					
ANR	1060412	Condition	file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT	715:6:19264:19326	1060384	0	True				
ANR	1060413	RelationalExpression	file_descriptor_safety_limit < MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		1060384	0		<			
ANR	1060414	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060415	Identifier	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		1060384	1					
ANR	1060416	CompoundStatement		8:72:390:390	1060384	1					
ANR	1060417	ExpressionStatement	file_descriptor_safety_limit = MIN_FILE_DESCRIPTOR_SAFETY_LIMIT	719:3:19502:19565	1060384	0	True				
ANR	1060418	AssignmentExpression	file_descriptor_safety_limit = MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		1060384	0		=			
ANR	1060419	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060420	Identifier	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		1060384	1					
ANR	1060421	IdentifierDeclStatement	"int p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 ) ;"	722:2:19574:19632	1060384	3	True				
ANR	1060422	IdentifierDecl	"p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		1060384	0					
ANR	1060423	IdentifierDeclType	int		1060384	0					
ANR	1060424	Identifier	p		1060384	1					
ANR	1060425	AssignmentExpression	"p = param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		1060384	2		=			
ANR	1060426	Identifier	p		1060384	0					
ANR	1060427	CallExpression	"param_integer ( ""NETWORK_MAX_PENDING_CONNECTS"" , 0 )"		1060384	1					
ANR	1060428	Callee	param_integer		1060384	0					
ANR	1060429	Identifier	param_integer		1060384	0					
ANR	1060430	ArgumentList	"""NETWORK_MAX_PENDING_CONNECTS"""		1060384	1					
ANR	1060431	Argument	"""NETWORK_MAX_PENDING_CONNECTS"""		1060384	0					
ANR	1060432	PrimaryExpression	"""NETWORK_MAX_PENDING_CONNECTS"""		1060384	0					
ANR	1060433	Argument	0		1060384	1					
ANR	1060434	PrimaryExpression	0		1060384	0					
ANR	1060435	IfStatement	if ( p != 0 )		1060384	4					
ANR	1060436	Condition	p != 0	723:6:19640:19643	1060384	0	True				
ANR	1060437	EqualityExpression	p != 0		1060384	0		!=			
ANR	1060438	Identifier	p		1060384	0					
ANR	1060439	PrimaryExpression	0		1060384	1					
ANR	1060440	CompoundStatement		16:13:707:707	1060384	1					
ANR	1060441	ExpressionStatement	file_descriptor_safety_limit = p	724:3:19652:19684	1060384	0	True				
ANR	1060442	AssignmentExpression	file_descriptor_safety_limit = p		1060384	0		=			
ANR	1060443	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060444	Identifier	p		1060384	1					
ANR	1060445	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""File descriptor limits: max %d, safe %d\\n"" , file_descriptor_max , file_descriptor_safety_limit )"	727:2:19693:19816	1060384	5	True				
ANR	1060446	CallExpression	"dprintf ( D_FULLDEBUG , ""File descriptor limits: max %d, safe %d\\n"" , file_descriptor_max , file_descriptor_safety_limit )"		1060384	0					
ANR	1060447	Callee	dprintf		1060384	0					
ANR	1060448	Identifier	dprintf		1060384	0					
ANR	1060449	ArgumentList	D_FULLDEBUG		1060384	1					
ANR	1060450	Argument	D_FULLDEBUG		1060384	0					
ANR	1060451	Identifier	D_FULLDEBUG		1060384	0					
ANR	1060452	Argument	"""File descriptor limits: max %d, safe %d\\n"""		1060384	1					
ANR	1060453	PrimaryExpression	"""File descriptor limits: max %d, safe %d\\n"""		1060384	0					
ANR	1060454	Argument	file_descriptor_max		1060384	2					
ANR	1060455	Identifier	file_descriptor_max		1060384	0					
ANR	1060456	Argument	file_descriptor_safety_limit		1060384	3					
ANR	1060457	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060458	ReturnStatement	return file_descriptor_safety_limit ;	732:1:19823:19858	1060384	1	True				
ANR	1060459	Identifier	file_descriptor_safety_limit		1060384	0					
ANR	1060460	ReturnType	int		1060384	1					
ANR	1060461	Identifier	DaemonCore :: FileDescriptorSafetyLimit		1060384	2					
ANR	1060462	ParameterList			1060384	3					
ANR	1060463	CFGEntryNode	ENTRY		1060384		True				
ANR	1060464	CFGExitNode	EXIT		1060384		True				
ANR	1060465	Symbol	file_descriptor_max		1060384						
ANR	1060466	Symbol	Selector :: fd_select_size		1060384						
ANR	1060467	Symbol	p		1060384						
ANR	1060468	Symbol	MIN_FILE_DESCRIPTOR_SAFETY_LIMIT		1060384						
ANR	1060469	Symbol	param_integer		1060384						
ANR	1060470	Symbol	D_FULLDEBUG		1060384						
ANR	1060471	Symbol	file_descriptor_safety_limit		1060384						
ANR	1060472	Function	DaemonCore :: TooManyRegisteredSockets	735:0:19863:21726							
ANR	1060473	FunctionDef	"DaemonCore :: TooManyRegisteredSockets (int fd , MyString * msg , int num_fds)"		1060472	0					
ANR	1060474	CompoundStatement		736:0:19939:21726	1060472	0					
ANR	1060475	IdentifierDeclStatement	int registered_socket_count = RegisteredSocketCount ( ) ;	737:1:19942:19995	1060472	0	True				
ANR	1060476	IdentifierDecl	registered_socket_count = RegisteredSocketCount ( )		1060472	0					
ANR	1060477	IdentifierDeclType	int		1060472	0					
ANR	1060478	Identifier	registered_socket_count		1060472	1					
ANR	1060479	AssignmentExpression	registered_socket_count = RegisteredSocketCount ( )		1060472	2		=			
ANR	1060480	Identifier	registered_socket_count		1060472	0					
ANR	1060481	CallExpression	RegisteredSocketCount ( )		1060472	1					
ANR	1060482	Callee	RegisteredSocketCount		1060472	0					
ANR	1060483	Identifier	RegisteredSocketCount		1060472	0					
ANR	1060484	ArgumentList			1060472	1					
ANR	1060485	IdentifierDeclStatement	int fds_used = registered_socket_count ;	738:1:19998:20036	1060472	1	True				
ANR	1060486	IdentifierDecl	fds_used = registered_socket_count		1060472	0					
ANR	1060487	IdentifierDeclType	int		1060472	0					
ANR	1060488	Identifier	fds_used		1060472	1					
ANR	1060489	AssignmentExpression	fds_used = registered_socket_count		1060472	2		=			
ANR	1060490	Identifier	registered_socket_count		1060472	0					
ANR	1060491	Identifier	registered_socket_count		1060472	1					
ANR	1060492	IdentifierDeclStatement	int safety_limit = FileDescriptorSafetyLimit ( ) ;	739:1:20039:20085	1060472	2	True				
ANR	1060493	IdentifierDecl	safety_limit = FileDescriptorSafetyLimit ( )		1060472	0					
ANR	1060494	IdentifierDeclType	int		1060472	0					
ANR	1060495	Identifier	safety_limit		1060472	1					
ANR	1060496	AssignmentExpression	safety_limit = FileDescriptorSafetyLimit ( )		1060472	2		=			
ANR	1060497	Identifier	safety_limit		1060472	0					
ANR	1060498	CallExpression	FileDescriptorSafetyLimit ( )		1060472	1					
ANR	1060499	Callee	FileDescriptorSafetyLimit		1060472	0					
ANR	1060500	Identifier	FileDescriptorSafetyLimit		1060472	0					
ANR	1060501	ArgumentList			1060472	1					
ANR	1060502	IfStatement	if ( safety_limit < 0 )		1060472	3					
ANR	1060503	Condition	safety_limit < 0	741:5:20093:20108	1060472	0	True				
ANR	1060504	RelationalExpression	safety_limit < 0		1060472	0		<			
ANR	1060505	Identifier	safety_limit		1060472	0					
ANR	1060506	PrimaryExpression	0		1060472	1					
ANR	1060507	CompoundStatement		6:24:172:172	1060472	1					
ANR	1060508	ReturnStatement	return false ;	743:2:20132:20144	1060472	0	True				
ANR	1060509	Identifier	false		1060472	0					
ANR	1060510	IfStatement	if ( fd == - 1 )		1060472	4					
ANR	1060511	Condition	fd == - 1	750:5:20324:20331	1060472	0	True				
ANR	1060512	EqualityExpression	fd == - 1		1060472	0		==			
ANR	1060513	Identifier	fd		1060472	0					
ANR	1060514	UnaryOperationExpression	- 1		1060472	1					
ANR	1060515	UnaryOperator	-		1060472	0					
ANR	1060516	PrimaryExpression	1		1060472	1					
ANR	1060517	CompoundStatement		15:15:394:394	1060472	1					
ANR	1060518	ExpressionStatement	"fd = safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"	752:2:20400:20452	1060472	0	True				
ANR	1060519	AssignmentExpression	"fd = safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"		1060472	0		=			
ANR	1060520	Identifier	fd		1060472	0					
ANR	1060521	CallExpression	"safe_open_wrapper_follow ( NULL_FILE , O_RDONLY )"		1060472	1					
ANR	1060522	Callee	safe_open_wrapper_follow		1060472	0					
ANR	1060523	Identifier	safe_open_wrapper_follow		1060472	0					
ANR	1060524	ArgumentList	NULL_FILE		1060472	1					
ANR	1060525	Argument	NULL_FILE		1060472	0					
ANR	1060526	Identifier	NULL_FILE		1060472	0					
ANR	1060527	Argument	O_RDONLY		1060472	1					
ANR	1060528	Identifier	O_RDONLY		1060472	0					
ANR	1060529	IfStatement	if ( fd >= 0 )		1060472	1					
ANR	1060530	Condition	fd >= 0	753:7:20461:20467	1060472	0	True				
ANR	1060531	RelationalExpression	fd >= 0		1060472	0		>=			
ANR	1060532	Identifier	fd		1060472	0					
ANR	1060533	PrimaryExpression	0		1060472	1					
ANR	1060534	CompoundStatement		18:17:531:531	1060472	1					
ANR	1060535	ExpressionStatement	close ( fd )	754:3:20476:20487	1060472	0	True				
ANR	1060536	CallExpression	close ( fd )		1060472	0					
ANR	1060537	Callee	close		1060472	0					
ANR	1060538	Identifier	close		1060472	0					
ANR	1060539	ArgumentList	fd		1060472	1					
ANR	1060540	Argument	fd		1060472	0					
ANR	1060541	Identifier	fd		1060472	0					
ANR	1060542	IfStatement	if ( fd > fds_used )		1060472	5					
ANR	1060543	Condition	fd > fds_used	757:5:20501:20513	1060472	0	True				
ANR	1060544	RelationalExpression	fd > fds_used		1060472	0		>			
ANR	1060545	Identifier	fd		1060472	0					
ANR	1060546	Identifier	fds_used		1060472	1					
ANR	1060547	CompoundStatement		22:21:577:577	1060472	1					
ANR	1060548	ExpressionStatement	fds_used = fd	759:2:20579:20592	1060472	0	True				
ANR	1060549	AssignmentExpression	fds_used = fd		1060472	0		=			
ANR	1060550	Identifier	fds_used		1060472	0					
ANR	1060551	Identifier	fd		1060472	1					
ANR	1060552	IfStatement	if ( num_fds + fds_used > file_descriptor_safety_limit )		1060472	6					
ANR	1060553	Condition	num_fds + fds_used > file_descriptor_safety_limit	763:5:20610:20658	1060472	0	True				
ANR	1060554	RelationalExpression	num_fds + fds_used > file_descriptor_safety_limit		1060472	0		>			
ANR	1060555	AdditiveExpression	num_fds + fds_used		1060472	0		+			
ANR	1060556	Identifier	num_fds		1060472	0					
ANR	1060557	Identifier	fds_used		1060472	1					
ANR	1060558	Identifier	file_descriptor_safety_limit		1060472	1					
ANR	1060559	CompoundStatement		28:57:722:722	1060472	1					
ANR	1060560	IfStatement	if ( registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT )		1060472	0					
ANR	1060561	Condition	registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT	764:6:20670:20729	1060472	0	True				
ANR	1060562	RelationalExpression	registered_socket_count < MIN_REGISTERED_SOCKET_SAFETY_LIMIT		1060472	0		<			
ANR	1060563	Identifier	registered_socket_count		1060472	0					
ANR	1060564	Identifier	MIN_REGISTERED_SOCKET_SAFETY_LIMIT		1060472	1					
ANR	1060565	CompoundStatement		29:69:793:793	1060472	1					
ANR	1060566	IfStatement	if ( msg )		1060472	0					
ANR	1060567	Condition	msg	772:7:21039:21041	1060472	0	True				
ANR	1060568	Identifier	msg		1060472	0					
ANR	1060569	CompoundStatement		37:12:1104:1104	1060472	1					
ANR	1060570	Statement	dprintf	776:4:21199:21205	1060472	0	True				
ANR	1060571	Statement	(	776:11:21206:21206	1060472	1	True				
ANR	1060572	Statement	D_NETWORK	776:12:21207:21215	1060472	2	True				
ANR	1060573	Statement	|	776:21:21216:21216	1060472	3	True				
ANR	1060574	Statement	D_FULLDEBUG	776:22:21217:21227	1060472	4	True				
ANR	1060575	Statement	","	776:33:21228:21228	1060472	5	True				
ANR	1060576	Statement	"""Ignoring file descriptor safety limit (%d), because """	777:6:21236:21289	1060472	6	True				
ANR	1060577	Statement	"""only %d sockets are registered (fd is %d)\\n"""	778:6:21297:21341	1060472	7	True				
ANR	1060578	Statement	","	778:51:21342:21342	1060472	8	True				
ANR	1060579	Statement	file_descriptor_safety_limit	779:6:21350:21377	1060472	9	True				
ANR	1060580	Statement	","	779:34:21378:21378	1060472	10	True				
ANR	1060581	Statement	registered_socket_count	780:6:21386:21408	1060472	11	True				
ANR	1060582	Statement	","	780:29:21409:21409	1060472	12	True				
ANR	1060583	Statement	fd	781:6:21417:21418	1060472	13	True				
ANR	1060584	Statement	)	781:9:21420:21420	1060472	14	True				
ANR	1060585	ExpressionStatement		781:10:21421:21421	1060472	15	True				
ANR	1060586	ReturnStatement	return false ;	783:3:21431:21443	1060472	1	True				
ANR	1060587	Identifier	false		1060472	0					
ANR	1060588	IfStatement	if ( msg )		1060472	1					
ANR	1060589	Condition	msg	785:5:21454:21456	1060472	0	True				
ANR	1060590	Identifier	msg		1060472	0					
ANR	1060591	CompoundStatement		50:10:1519:1519	1060472	1					
ANR	1060592	Statement	msg	786:3:21464:21466	1060472	0	True				
ANR	1060593	Statement	->	786:6:21467:21468	1060472	1	True				
ANR	1060594	Statement	sprintf	786:8:21469:21475	1060472	2	True				
ANR	1060595	Statement	(	786:15:21476:21476	1060472	3	True				
ANR	1060596	Statement	"""file descriptor safety level exceeded: """	786:17:21478:21518	1060472	4	True				
ANR	1060597	Statement	""" limit %d, """	787:17:21537:21549	1060472	5	True				
ANR	1060598	Statement	""" registered socket count %d, """	788:17:21568:21598	1060472	6	True				
ANR	1060599	Statement	""" fd %d"""	789:17:21617:21624	1060472	7	True				
ANR	1060600	Statement	","	789:25:21625:21625	1060472	8	True				
ANR	1060601	Statement	safety_limit	790:17:21644:21655	1060472	9	True				
ANR	1060602	Statement	","	790:29:21656:21656	1060472	10	True				
ANR	1060603	Statement	registered_socket_count	790:31:21658:21680	1060472	11	True				
ANR	1060604	Statement	","	790:54:21681:21681	1060472	12	True				
ANR	1060605	Statement	fd	790:56:21683:21684	1060472	13	True				
ANR	1060606	Statement	)	790:59:21686:21686	1060472	14	True				
ANR	1060607	ExpressionStatement		790:60:21687:21687	1060472	15	True				
ANR	1060608	ReturnStatement	return true ;	792:2:21695:21706	1060472	2	True				
ANR	1060609	Identifier	true		1060472	0					
ANR	1060610	ReturnStatement	return false ;	794:1:21712:21724	1060472	7	True				
ANR	1060611	Identifier	false		1060472	0					
ANR	1060612	ReturnType	bool		1060472	1					
ANR	1060613	Identifier	DaemonCore :: TooManyRegisteredSockets		1060472	2					
ANR	1060614	ParameterList	"int fd , MyString * msg , int num_fds"		1060472	3					
ANR	1060615	Parameter	int fd	735:42:19905:19910	1060472	0	True				
ANR	1060616	ParameterType	int		1060472	0					
ANR	1060617	Identifier	fd		1060472	1					
ANR	1060618	Parameter	MyString * msg	735:49:19912:19924	1060472	1	True				
ANR	1060619	ParameterType	MyString *		1060472	0					
ANR	1060620	Identifier	msg		1060472	1					
ANR	1060621	Parameter	int num_fds	735:63:19926:19936	1060472	2	True				
ANR	1060622	ParameterType	int		1060472	0					
ANR	1060623	Identifier	num_fds		1060472	1					
ANR	1060624	CFGEntryNode	ENTRY		1060472		True				
ANR	1060625	CFGExitNode	EXIT		1060472		True				
ANR	1060626	Symbol	msg		1060472						
ANR	1060627	Symbol	safe_open_wrapper_follow		1060472						
ANR	1060628	Symbol	FileDescriptorSafetyLimit		1060472						
ANR	1060629	Symbol	false		1060472						
ANR	1060630	Symbol	fds_used		1060472						
ANR	1060631	Symbol	MIN_REGISTERED_SOCKET_SAFETY_LIMIT		1060472						
ANR	1060632	Symbol	O_RDONLY		1060472						
ANR	1060633	Symbol	RegisteredSocketCount		1060472						
ANR	1060634	Symbol	NULL_FILE		1060472						
ANR	1060635	Symbol	true		1060472						
ANR	1060636	Symbol	registered_socket_count		1060472						
ANR	1060637	Symbol	file_descriptor_safety_limit		1060472						
ANR	1060638	Symbol	num_fds		1060472						
ANR	1060639	Symbol	fd		1060472						
ANR	1060640	Symbol	safety_limit		1060472						
ANR	1060641	Function	DaemonCore :: Register_Socket	797:0:21729:22030							
ANR	1060642	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandler handler , const char * handler_descrip , Service * s , DCpermission perm)"		1060641	0					
ANR	1060643	CompoundStatement		800:0:21896:22030	1060641	0					
ANR	1060644	ReturnStatement	"return ( Register_Socket ( iosock , iosock_descrip , handler , ( SocketHandlercpp ) NULL , handler_descrip , s , perm , FALSE ) ) ;"	801:1:21899:22028	1060641	0	True				
ANR	1060645	CallExpression	"Register_Socket ( iosock , iosock_descrip , handler , ( SocketHandlercpp ) NULL , handler_descrip , s , perm , FALSE )"		1060641	0					
ANR	1060646	Callee	Register_Socket		1060641	0					
ANR	1060647	Identifier	Register_Socket		1060641	0					
ANR	1060648	ArgumentList	iosock		1060641	1					
ANR	1060649	Argument	iosock		1060641	0					
ANR	1060650	Identifier	iosock		1060641	0					
ANR	1060651	Argument	iosock_descrip		1060641	1					
ANR	1060652	Identifier	iosock_descrip		1060641	0					
ANR	1060653	Argument	handler		1060641	2					
ANR	1060654	Identifier	handler		1060641	0					
ANR	1060655	Argument	( SocketHandlercpp ) NULL		1060641	3					
ANR	1060656	CastExpression	( SocketHandlercpp ) NULL		1060641	0					
ANR	1060657	CastTarget	SocketHandlercpp		1060641	0					
ANR	1060658	Identifier	NULL		1060641	1					
ANR	1060659	Argument	handler_descrip		1060641	4					
ANR	1060660	Identifier	handler_descrip		1060641	0					
ANR	1060661	Argument	s		1060641	5					
ANR	1060662	Identifier	s		1060641	0					
ANR	1060663	Argument	perm		1060641	6					
ANR	1060664	Identifier	perm		1060641	0					
ANR	1060665	Argument	FALSE		1060641	7					
ANR	1060666	Identifier	FALSE		1060641	0					
ANR	1060667	ReturnType	int		1060641	1					
ANR	1060668	Identifier	DaemonCore :: Register_Socket		1060641	2					
ANR	1060669	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandler handler , const char * handler_descrip , Service * s , DCpermission perm"		1060641	3					
ANR	1060670	Parameter	Stream * iosock	797:32:21761:21774	1060641	0	True				
ANR	1060671	ParameterType	Stream *		1060641	0					
ANR	1060672	Identifier	iosock		1060641	1					
ANR	1060673	Parameter	const char * iosock_descrip	797:48:21777:21802	1060641	1	True				
ANR	1060674	ParameterType	const char *		1060641	0					
ANR	1060675	Identifier	iosock_descrip		1060641	1					
ANR	1060676	Parameter	SocketHandler handler	798:4:21809:21829	1060641	2	True				
ANR	1060677	ParameterType	SocketHandler		1060641	0					
ANR	1060678	Identifier	handler		1060641	1					
ANR	1060679	Parameter	const char * handler_descrip	798:27:21832:21858	1060641	3	True				
ANR	1060680	ParameterType	const char *		1060641	0					
ANR	1060681	Identifier	handler_descrip		1060641	1					
ANR	1060682	Parameter	Service * s	799:4:21865:21874	1060641	4	True				
ANR	1060683	ParameterType	Service *		1060641	0					
ANR	1060684	Identifier	s		1060641	1					
ANR	1060685	Parameter	DCpermission perm	799:16:21877:21893	1060641	5	True				
ANR	1060686	ParameterType	DCpermission		1060641	0					
ANR	1060687	Identifier	perm		1060641	1					
ANR	1060688	CFGEntryNode	ENTRY		1060641		True				
ANR	1060689	CFGExitNode	EXIT		1060641		True				
ANR	1060690	Symbol	handler		1060641						
ANR	1060691	Symbol	s		1060641						
ANR	1060692	Symbol	NULL		1060641						
ANR	1060693	Symbol	iosock		1060641						
ANR	1060694	Symbol	handler_descrip		1060641						
ANR	1060695	Symbol	perm		1060641						
ANR	1060696	Symbol	iosock_descrip		1060641						
ANR	1060697	Symbol	FALSE		1060641						
ANR	1060698	Symbol	Register_Socket		1060641						
ANR	1060699	Function	DaemonCore :: Register_Socket	806:0:22033:22317							
ANR	1060700	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm)"		1060699	0					
ANR	1060701	CompoundStatement		809:0:22206:22317	1060699	0					
ANR	1060702	ReturnStatement	"return ( Register_Socket ( iosock , iosock_descrip , NULL , handlercpp , handler_descrip , s , perm , TRUE ) ) ;"	810:1:22209:22315	1060699	0	True				
ANR	1060703	CallExpression	"Register_Socket ( iosock , iosock_descrip , NULL , handlercpp , handler_descrip , s , perm , TRUE )"		1060699	0					
ANR	1060704	Callee	Register_Socket		1060699	0					
ANR	1060705	Identifier	Register_Socket		1060699	0					
ANR	1060706	ArgumentList	iosock		1060699	1					
ANR	1060707	Argument	iosock		1060699	0					
ANR	1060708	Identifier	iosock		1060699	0					
ANR	1060709	Argument	iosock_descrip		1060699	1					
ANR	1060710	Identifier	iosock_descrip		1060699	0					
ANR	1060711	Argument	NULL		1060699	2					
ANR	1060712	Identifier	NULL		1060699	0					
ANR	1060713	Argument	handlercpp		1060699	3					
ANR	1060714	Identifier	handlercpp		1060699	0					
ANR	1060715	Argument	handler_descrip		1060699	4					
ANR	1060716	Identifier	handler_descrip		1060699	0					
ANR	1060717	Argument	s		1060699	5					
ANR	1060718	Identifier	s		1060699	0					
ANR	1060719	Argument	perm		1060699	6					
ANR	1060720	Identifier	perm		1060699	0					
ANR	1060721	Argument	TRUE		1060699	7					
ANR	1060722	Identifier	TRUE		1060699	0					
ANR	1060723	ReturnType	int		1060699	1					
ANR	1060724	Identifier	DaemonCore :: Register_Socket		1060699	2					
ANR	1060725	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm"		1060699	3					
ANR	1060726	Parameter	Stream * iosock	806:32:22065:22078	1060699	0	True				
ANR	1060727	ParameterType	Stream *		1060699	0					
ANR	1060728	Identifier	iosock		1060699	1					
ANR	1060729	Parameter	const char * iosock_descrip	806:48:22081:22106	1060699	1	True				
ANR	1060730	ParameterType	const char *		1060699	0					
ANR	1060731	Identifier	iosock_descrip		1060699	1					
ANR	1060732	Parameter	SocketHandlercpp handlercpp	807:4:22113:22139	1060699	2	True				
ANR	1060733	ParameterType	SocketHandlercpp		1060699	0					
ANR	1060734	Identifier	handlercpp		1060699	1					
ANR	1060735	Parameter	const char * handler_descrip	807:33:22142:22168	1060699	3	True				
ANR	1060736	ParameterType	const char *		1060699	0					
ANR	1060737	Identifier	handler_descrip		1060699	1					
ANR	1060738	Parameter	Service * s	808:4:22175:22184	1060699	4	True				
ANR	1060739	ParameterType	Service *		1060699	0					
ANR	1060740	Identifier	s		1060699	1					
ANR	1060741	Parameter	DCpermission perm	808:16:22187:22203	1060699	5	True				
ANR	1060742	ParameterType	DCpermission		1060699	0					
ANR	1060743	Identifier	perm		1060699	1					
ANR	1060744	CFGEntryNode	ENTRY		1060699		True				
ANR	1060745	CFGExitNode	EXIT		1060699		True				
ANR	1060746	Symbol	s		1060699						
ANR	1060747	Symbol	NULL		1060699						
ANR	1060748	Symbol	iosock		1060699						
ANR	1060749	Symbol	handler_descrip		1060699						
ANR	1060750	Symbol	perm		1060699						
ANR	1060751	Symbol	iosock_descrip		1060699						
ANR	1060752	Symbol	TRUE		1060699						
ANR	1060753	Symbol	Register_Socket		1060699						
ANR	1060754	Symbol	handlercpp		1060699						
ANR	1060755	Function	DaemonCore :: Register_Pipe	814:0:22320:22633							
ANR	1060756	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandler handler , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm)"		1060755	0					
ANR	1060757	CompoundStatement		817:0:22505:22633	1060755	0					
ANR	1060758	ReturnStatement	"return ( Register_Pipe ( pipe_end , pipe_descrip , handler , NULL , handler_descrip , s , handler_type , perm , FALSE ) ) ;"	818:1:22508:22631	1060755	0	True				
ANR	1060759	CallExpression	"Register_Pipe ( pipe_end , pipe_descrip , handler , NULL , handler_descrip , s , handler_type , perm , FALSE )"		1060755	0					
ANR	1060760	Callee	Register_Pipe		1060755	0					
ANR	1060761	Identifier	Register_Pipe		1060755	0					
ANR	1060762	ArgumentList	pipe_end		1060755	1					
ANR	1060763	Argument	pipe_end		1060755	0					
ANR	1060764	Identifier	pipe_end		1060755	0					
ANR	1060765	Argument	pipe_descrip		1060755	1					
ANR	1060766	Identifier	pipe_descrip		1060755	0					
ANR	1060767	Argument	handler		1060755	2					
ANR	1060768	Identifier	handler		1060755	0					
ANR	1060769	Argument	NULL		1060755	3					
ANR	1060770	Identifier	NULL		1060755	0					
ANR	1060771	Argument	handler_descrip		1060755	4					
ANR	1060772	Identifier	handler_descrip		1060755	0					
ANR	1060773	Argument	s		1060755	5					
ANR	1060774	Identifier	s		1060755	0					
ANR	1060775	Argument	handler_type		1060755	6					
ANR	1060776	Identifier	handler_type		1060755	0					
ANR	1060777	Argument	perm		1060755	7					
ANR	1060778	Identifier	perm		1060755	0					
ANR	1060779	Argument	FALSE		1060755	8					
ANR	1060780	Identifier	FALSE		1060755	0					
ANR	1060781	ReturnType	int		1060755	1					
ANR	1060782	Identifier	DaemonCore :: Register_Pipe		1060755	2					
ANR	1060783	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandler handler , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm"		1060755	3					
ANR	1060784	Parameter	int pipe_end	814:30:22350:22361	1060755	0	True				
ANR	1060785	ParameterType	int		1060755	0					
ANR	1060786	Identifier	pipe_end		1060755	1					
ANR	1060787	Parameter	const char * pipe_descrip	814:44:22364:22387	1060755	1	True				
ANR	1060788	ParameterType	const char *		1060755	0					
ANR	1060789	Identifier	pipe_descrip		1060755	1					
ANR	1060790	Parameter	PipeHandler handler	815:4:22394:22412	1060755	2	True				
ANR	1060791	ParameterType	PipeHandler		1060755	0					
ANR	1060792	Identifier	handler		1060755	1					
ANR	1060793	Parameter	const char * handler_descrip	815:25:22415:22441	1060755	3	True				
ANR	1060794	ParameterType	const char *		1060755	0					
ANR	1060795	Identifier	handler_descrip		1060755	1					
ANR	1060796	Parameter	Service * s	816:4:22448:22457	1060755	4	True				
ANR	1060797	ParameterType	Service *		1060755	0					
ANR	1060798	Identifier	s		1060755	1					
ANR	1060799	Parameter	HandlerType handler_type	816:16:22460:22483	1060755	5	True				
ANR	1060800	ParameterType	HandlerType		1060755	0					
ANR	1060801	Identifier	handler_type		1060755	1					
ANR	1060802	Parameter	DCpermission perm	816:42:22486:22502	1060755	6	True				
ANR	1060803	ParameterType	DCpermission		1060755	0					
ANR	1060804	Identifier	perm		1060755	1					
ANR	1060805	CFGEntryNode	ENTRY		1060755		True				
ANR	1060806	CFGExitNode	EXIT		1060755		True				
ANR	1060807	Symbol	handler		1060755						
ANR	1060808	Symbol	s		1060755						
ANR	1060809	Symbol	NULL		1060755						
ANR	1060810	Symbol	handler_descrip		1060755						
ANR	1060811	Symbol	perm		1060755						
ANR	1060812	Symbol	pipe_descrip		1060755						
ANR	1060813	Symbol	handler_type		1060755						
ANR	1060814	Symbol	pipe_end		1060755						
ANR	1060815	Symbol	FALSE		1060755						
ANR	1060816	Symbol	Register_Pipe		1060755						
ANR	1060817	Function	DaemonCore :: Register_Pipe	823:0:22636:22950							
ANR	1060818	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm)"		1060817	0					
ANR	1060819	CompoundStatement		826:0:22827:22950	1060817	0					
ANR	1060820	ReturnStatement	"return ( Register_Pipe ( pipe_end , pipe_descrip , NULL , handlercpp , handler_descrip , s , handler_type , perm , TRUE ) ) ;"	827:1:22830:22948	1060817	0	True				
ANR	1060821	CallExpression	"Register_Pipe ( pipe_end , pipe_descrip , NULL , handlercpp , handler_descrip , s , handler_type , perm , TRUE )"		1060817	0					
ANR	1060822	Callee	Register_Pipe		1060817	0					
ANR	1060823	Identifier	Register_Pipe		1060817	0					
ANR	1060824	ArgumentList	pipe_end		1060817	1					
ANR	1060825	Argument	pipe_end		1060817	0					
ANR	1060826	Identifier	pipe_end		1060817	0					
ANR	1060827	Argument	pipe_descrip		1060817	1					
ANR	1060828	Identifier	pipe_descrip		1060817	0					
ANR	1060829	Argument	NULL		1060817	2					
ANR	1060830	Identifier	NULL		1060817	0					
ANR	1060831	Argument	handlercpp		1060817	3					
ANR	1060832	Identifier	handlercpp		1060817	0					
ANR	1060833	Argument	handler_descrip		1060817	4					
ANR	1060834	Identifier	handler_descrip		1060817	0					
ANR	1060835	Argument	s		1060817	5					
ANR	1060836	Identifier	s		1060817	0					
ANR	1060837	Argument	handler_type		1060817	6					
ANR	1060838	Identifier	handler_type		1060817	0					
ANR	1060839	Argument	perm		1060817	7					
ANR	1060840	Identifier	perm		1060817	0					
ANR	1060841	Argument	TRUE		1060817	8					
ANR	1060842	Identifier	TRUE		1060817	0					
ANR	1060843	ReturnType	int		1060817	1					
ANR	1060844	Identifier	DaemonCore :: Register_Pipe		1060817	2					
ANR	1060845	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm"		1060817	3					
ANR	1060846	Parameter	int pipe_end	823:30:22666:22677	1060817	0	True				
ANR	1060847	ParameterType	int		1060817	0					
ANR	1060848	Identifier	pipe_end		1060817	1					
ANR	1060849	Parameter	const char * pipe_descrip	823:44:22680:22703	1060817	1	True				
ANR	1060850	ParameterType	const char *		1060817	0					
ANR	1060851	Identifier	pipe_descrip		1060817	1					
ANR	1060852	Parameter	PipeHandlercpp handlercpp	824:4:22710:22734	1060817	2	True				
ANR	1060853	ParameterType	PipeHandlercpp		1060817	0					
ANR	1060854	Identifier	handlercpp		1060817	1					
ANR	1060855	Parameter	const char * handler_descrip	824:31:22737:22763	1060817	3	True				
ANR	1060856	ParameterType	const char *		1060817	0					
ANR	1060857	Identifier	handler_descrip		1060817	1					
ANR	1060858	Parameter	Service * s	825:4:22770:22779	1060817	4	True				
ANR	1060859	ParameterType	Service *		1060817	0					
ANR	1060860	Identifier	s		1060817	1					
ANR	1060861	Parameter	HandlerType handler_type	825:16:22782:22805	1060817	5	True				
ANR	1060862	ParameterType	HandlerType		1060817	0					
ANR	1060863	Identifier	handler_type		1060817	1					
ANR	1060864	Parameter	DCpermission perm	825:42:22808:22824	1060817	6	True				
ANR	1060865	ParameterType	DCpermission		1060817	0					
ANR	1060866	Identifier	perm		1060817	1					
ANR	1060867	CFGEntryNode	ENTRY		1060817		True				
ANR	1060868	CFGExitNode	EXIT		1060817		True				
ANR	1060869	Symbol	s		1060817						
ANR	1060870	Symbol	NULL		1060817						
ANR	1060871	Symbol	handler_descrip		1060817						
ANR	1060872	Symbol	perm		1060817						
ANR	1060873	Symbol	pipe_descrip		1060817						
ANR	1060874	Symbol	handler_type		1060817						
ANR	1060875	Symbol	pipe_end		1060817						
ANR	1060876	Symbol	TRUE		1060817						
ANR	1060877	Symbol	Register_Pipe		1060817						
ANR	1060878	Symbol	handlercpp		1060817						
ANR	1060879	Function	DaemonCore :: Register_Reaper	831:0:22953:23201							
ANR	1060880	FunctionDef	"DaemonCore :: Register_Reaper (const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s)"		1060879	0					
ANR	1060881	CompoundStatement		833:0:23079:23201	1060879	0					
ANR	1060882	ReturnStatement	"return ( Register_Reaper ( - 1 , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	834:1:23082:23199	1060879	0	True				
ANR	1060883	CallExpression	"Register_Reaper ( - 1 , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE )"		1060879	0					
ANR	1060884	Callee	Register_Reaper		1060879	0					
ANR	1060885	Identifier	Register_Reaper		1060879	0					
ANR	1060886	ArgumentList	- 1		1060879	1					
ANR	1060887	Argument	- 1		1060879	0					
ANR	1060888	UnaryOperationExpression	- 1		1060879	0					
ANR	1060889	UnaryOperator	-		1060879	0					
ANR	1060890	PrimaryExpression	1		1060879	1					
ANR	1060891	Argument	reap_descrip		1060879	1					
ANR	1060892	Identifier	reap_descrip		1060879	0					
ANR	1060893	Argument	handler		1060879	2					
ANR	1060894	Identifier	handler		1060879	0					
ANR	1060895	Argument	( ReaperHandlercpp ) NULL		1060879	3					
ANR	1060896	CastExpression	( ReaperHandlercpp ) NULL		1060879	0					
ANR	1060897	CastTarget	ReaperHandlercpp		1060879	0					
ANR	1060898	Identifier	NULL		1060879	1					
ANR	1060899	Argument	handler_descrip		1060879	4					
ANR	1060900	Identifier	handler_descrip		1060879	0					
ANR	1060901	Argument	s		1060879	5					
ANR	1060902	Identifier	s		1060879	0					
ANR	1060903	Argument	FALSE		1060879	6					
ANR	1060904	Identifier	FALSE		1060879	0					
ANR	1060905	ReturnType	int		1060879	1					
ANR	1060906	Identifier	DaemonCore :: Register_Reaper		1060879	2					
ANR	1060907	ParameterList	"const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s"		1060879	3					
ANR	1060908	Parameter	const char * reap_descrip	831:32:22985:23008	1060879	0	True				
ANR	1060909	ParameterType	const char *		1060879	0					
ANR	1060910	Identifier	reap_descrip		1060879	1					
ANR	1060911	Parameter	ReaperHandler handler	831:58:23011:23031	1060879	1	True				
ANR	1060912	ParameterType	ReaperHandler		1060879	0					
ANR	1060913	Identifier	handler		1060879	1					
ANR	1060914	Parameter	const char * handler_descrip	832:4:23038:23064	1060879	2	True				
ANR	1060915	ParameterType	const char *		1060879	0					
ANR	1060916	Identifier	handler_descrip		1060879	1					
ANR	1060917	Parameter	Service * s	832:33:23067:23076	1060879	3	True				
ANR	1060918	ParameterType	Service *		1060879	0					
ANR	1060919	Identifier	s		1060879	1					
ANR	1060920	CFGEntryNode	ENTRY		1060879		True				
ANR	1060921	CFGExitNode	EXIT		1060879		True				
ANR	1060922	Symbol	handler		1060879						
ANR	1060923	Symbol	s		1060879						
ANR	1060924	Symbol	NULL		1060879						
ANR	1060925	Symbol	handler_descrip		1060879						
ANR	1060926	Symbol	FALSE		1060879						
ANR	1060927	Symbol	Register_Reaper		1060879						
ANR	1060928	Symbol	reap_descrip		1060879						
ANR	1060929	Function	DaemonCore :: Register_Reaper	839:0:23204:23435							
ANR	1060930	FunctionDef	"DaemonCore :: Register_Reaper (const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s)"		1060929	0					
ANR	1060931	CompoundStatement		841:0:23336:23435	1060929	0					
ANR	1060932	ReturnStatement	"return ( Register_Reaper ( - 1 , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	842:1:23339:23433	1060929	0	True				
ANR	1060933	CallExpression	"Register_Reaper ( - 1 , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		1060929	0					
ANR	1060934	Callee	Register_Reaper		1060929	0					
ANR	1060935	Identifier	Register_Reaper		1060929	0					
ANR	1060936	ArgumentList	- 1		1060929	1					
ANR	1060937	Argument	- 1		1060929	0					
ANR	1060938	UnaryOperationExpression	- 1		1060929	0					
ANR	1060939	UnaryOperator	-		1060929	0					
ANR	1060940	PrimaryExpression	1		1060929	1					
ANR	1060941	Argument	reap_descrip		1060929	1					
ANR	1060942	Identifier	reap_descrip		1060929	0					
ANR	1060943	Argument	NULL		1060929	2					
ANR	1060944	Identifier	NULL		1060929	0					
ANR	1060945	Argument	handlercpp		1060929	3					
ANR	1060946	Identifier	handlercpp		1060929	0					
ANR	1060947	Argument	handler_descrip		1060929	4					
ANR	1060948	Identifier	handler_descrip		1060929	0					
ANR	1060949	Argument	s		1060929	5					
ANR	1060950	Identifier	s		1060929	0					
ANR	1060951	Argument	TRUE		1060929	6					
ANR	1060952	Identifier	TRUE		1060929	0					
ANR	1060953	ReturnType	int		1060929	1					
ANR	1060954	Identifier	DaemonCore :: Register_Reaper		1060929	2					
ANR	1060955	ParameterList	"const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s"		1060929	3					
ANR	1060956	Parameter	const char * reap_descrip	839:32:23236:23259	1060929	0	True				
ANR	1060957	ParameterType	const char *		1060929	0					
ANR	1060958	Identifier	reap_descrip		1060929	1					
ANR	1060959	Parameter	ReaperHandlercpp handlercpp	840:4:23266:23292	1060929	1	True				
ANR	1060960	ParameterType	ReaperHandlercpp		1060929	0					
ANR	1060961	Identifier	handlercpp		1060929	1					
ANR	1060962	Parameter	const char * handler_descrip	840:33:23295:23321	1060929	2	True				
ANR	1060963	ParameterType	const char *		1060929	0					
ANR	1060964	Identifier	handler_descrip		1060929	1					
ANR	1060965	Parameter	Service * s	840:62:23324:23333	1060929	3	True				
ANR	1060966	ParameterType	Service *		1060929	0					
ANR	1060967	Identifier	s		1060929	1					
ANR	1060968	CFGEntryNode	ENTRY		1060929		True				
ANR	1060969	CFGExitNode	EXIT		1060929		True				
ANR	1060970	Symbol	s		1060929						
ANR	1060971	Symbol	NULL		1060929						
ANR	1060972	Symbol	handler_descrip		1060929						
ANR	1060973	Symbol	TRUE		1060929						
ANR	1060974	Symbol	Register_Reaper		1060929						
ANR	1060975	Symbol	reap_descrip		1060929						
ANR	1060976	Symbol	handlercpp		1060929						
ANR	1060977	Function	DaemonCore :: Reset_Reaper	846:0:23438:23693							
ANR	1060978	FunctionDef	"DaemonCore :: Reset_Reaper (int rid , const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s)"		1060977	0					
ANR	1060979	CompoundStatement		848:0:23570:23693	1060977	0					
ANR	1060980	ReturnStatement	"return ( Register_Reaper ( rid , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE ) ) ;"	849:1:23573:23691	1060977	0	True				
ANR	1060981	CallExpression	"Register_Reaper ( rid , reap_descrip , handler , ( ReaperHandlercpp ) NULL , handler_descrip , s , FALSE )"		1060977	0					
ANR	1060982	Callee	Register_Reaper		1060977	0					
ANR	1060983	Identifier	Register_Reaper		1060977	0					
ANR	1060984	ArgumentList	rid		1060977	1					
ANR	1060985	Argument	rid		1060977	0					
ANR	1060986	Identifier	rid		1060977	0					
ANR	1060987	Argument	reap_descrip		1060977	1					
ANR	1060988	Identifier	reap_descrip		1060977	0					
ANR	1060989	Argument	handler		1060977	2					
ANR	1060990	Identifier	handler		1060977	0					
ANR	1060991	Argument	( ReaperHandlercpp ) NULL		1060977	3					
ANR	1060992	CastExpression	( ReaperHandlercpp ) NULL		1060977	0					
ANR	1060993	CastTarget	ReaperHandlercpp		1060977	0					
ANR	1060994	Identifier	NULL		1060977	1					
ANR	1060995	Argument	handler_descrip		1060977	4					
ANR	1060996	Identifier	handler_descrip		1060977	0					
ANR	1060997	Argument	s		1060977	5					
ANR	1060998	Identifier	s		1060977	0					
ANR	1060999	Argument	FALSE		1060977	6					
ANR	1061000	Identifier	FALSE		1060977	0					
ANR	1061001	ReturnType	int		1060977	1					
ANR	1061002	Identifier	DaemonCore :: Reset_Reaper		1060977	2					
ANR	1061003	ParameterList	"int rid , const char * reap_descrip , ReaperHandler handler , const char * handler_descrip , Service * s"		1060977	3					
ANR	1061004	Parameter	int rid	846:29:23467:23473	1060977	0	True				
ANR	1061005	ParameterType	int		1060977	0					
ANR	1061006	Identifier	rid		1060977	1					
ANR	1061007	Parameter	const char * reap_descrip	846:38:23476:23499	1060977	1	True				
ANR	1061008	ParameterType	const char *		1060977	0					
ANR	1061009	Identifier	reap_descrip		1060977	1					
ANR	1061010	Parameter	ReaperHandler handler	847:4:23506:23526	1060977	2	True				
ANR	1061011	ParameterType	ReaperHandler		1060977	0					
ANR	1061012	Identifier	handler		1060977	1					
ANR	1061013	Parameter	const char * handler_descrip	847:27:23529:23555	1060977	3	True				
ANR	1061014	ParameterType	const char *		1060977	0					
ANR	1061015	Identifier	handler_descrip		1060977	1					
ANR	1061016	Parameter	Service * s	847:56:23558:23567	1060977	4	True				
ANR	1061017	ParameterType	Service *		1060977	0					
ANR	1061018	Identifier	s		1060977	1					
ANR	1061019	CFGEntryNode	ENTRY		1060977		True				
ANR	1061020	CFGExitNode	EXIT		1060977		True				
ANR	1061021	Symbol	handler		1060977						
ANR	1061022	Symbol	s		1060977						
ANR	1061023	Symbol	NULL		1060977						
ANR	1061024	Symbol	handler_descrip		1060977						
ANR	1061025	Symbol	FALSE		1060977						
ANR	1061026	Symbol	Register_Reaper		1060977						
ANR	1061027	Symbol	rid		1060977						
ANR	1061028	Symbol	reap_descrip		1060977						
ANR	1061029	Function	DaemonCore :: Reset_Reaper	854:0:23696:23934							
ANR	1061030	FunctionDef	"DaemonCore :: Reset_Reaper (int rid , const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s)"		1061029	0					
ANR	1061031	CompoundStatement		856:0:23834:23934	1061029	0					
ANR	1061032	ReturnStatement	"return ( Register_Reaper ( rid , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE ) ) ;"	857:1:23837:23932	1061029	0	True				
ANR	1061033	CallExpression	"Register_Reaper ( rid , reap_descrip , NULL , handlercpp , handler_descrip , s , TRUE )"		1061029	0					
ANR	1061034	Callee	Register_Reaper		1061029	0					
ANR	1061035	Identifier	Register_Reaper		1061029	0					
ANR	1061036	ArgumentList	rid		1061029	1					
ANR	1061037	Argument	rid		1061029	0					
ANR	1061038	Identifier	rid		1061029	0					
ANR	1061039	Argument	reap_descrip		1061029	1					
ANR	1061040	Identifier	reap_descrip		1061029	0					
ANR	1061041	Argument	NULL		1061029	2					
ANR	1061042	Identifier	NULL		1061029	0					
ANR	1061043	Argument	handlercpp		1061029	3					
ANR	1061044	Identifier	handlercpp		1061029	0					
ANR	1061045	Argument	handler_descrip		1061029	4					
ANR	1061046	Identifier	handler_descrip		1061029	0					
ANR	1061047	Argument	s		1061029	5					
ANR	1061048	Identifier	s		1061029	0					
ANR	1061049	Argument	TRUE		1061029	6					
ANR	1061050	Identifier	TRUE		1061029	0					
ANR	1061051	ReturnType	int		1061029	1					
ANR	1061052	Identifier	DaemonCore :: Reset_Reaper		1061029	2					
ANR	1061053	ParameterList	"int rid , const char * reap_descrip , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s"		1061029	3					
ANR	1061054	Parameter	int rid	854:29:23725:23731	1061029	0	True				
ANR	1061055	ParameterType	int		1061029	0					
ANR	1061056	Identifier	rid		1061029	1					
ANR	1061057	Parameter	const char * reap_descrip	854:38:23734:23757	1061029	1	True				
ANR	1061058	ParameterType	const char *		1061029	0					
ANR	1061059	Identifier	reap_descrip		1061029	1					
ANR	1061060	Parameter	ReaperHandlercpp handlercpp	855:4:23764:23790	1061029	2	True				
ANR	1061061	ParameterType	ReaperHandlercpp		1061029	0					
ANR	1061062	Identifier	handlercpp		1061029	1					
ANR	1061063	Parameter	const char * handler_descrip	855:33:23793:23819	1061029	3	True				
ANR	1061064	ParameterType	const char *		1061029	0					
ANR	1061065	Identifier	handler_descrip		1061029	1					
ANR	1061066	Parameter	Service * s	855:62:23822:23831	1061029	4	True				
ANR	1061067	ParameterType	Service *		1061029	0					
ANR	1061068	Identifier	s		1061029	1					
ANR	1061069	CFGEntryNode	ENTRY		1061029		True				
ANR	1061070	CFGExitNode	EXIT		1061029		True				
ANR	1061071	Symbol	s		1061029						
ANR	1061072	Symbol	NULL		1061029						
ANR	1061073	Symbol	handler_descrip		1061029						
ANR	1061074	Symbol	TRUE		1061029						
ANR	1061075	Symbol	Register_Reaper		1061029						
ANR	1061076	Symbol	rid		1061029						
ANR	1061077	Symbol	reap_descrip		1061029						
ANR	1061078	Symbol	handlercpp		1061029						
ANR	1061079	Function	DaemonCore :: Register_Timer	861:0:23937:24104							
ANR	1061080	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandler handler , const char * event_descrip)"		1061079	0					
ANR	1061081	CompoundStatement		863:0:24041:24104	1061079	0					
ANR	1061082	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , event_descrip , 0 ) ) ;"	864:1:24044:24102	1061079	0	True				
ANR	1061083	CallExpression	"t . NewTimer ( deltawhen , handler , event_descrip , 0 )"		1061079	0					
ANR	1061084	Callee	t . NewTimer		1061079	0					
ANR	1061085	MemberAccess	t . NewTimer		1061079	0					
ANR	1061086	Identifier	t		1061079	0					
ANR	1061087	Identifier	NewTimer		1061079	1					
ANR	1061088	ArgumentList	deltawhen		1061079	1					
ANR	1061089	Argument	deltawhen		1061079	0					
ANR	1061090	Identifier	deltawhen		1061079	0					
ANR	1061091	Argument	handler		1061079	1					
ANR	1061092	Identifier	handler		1061079	0					
ANR	1061093	Argument	event_descrip		1061079	2					
ANR	1061094	Identifier	event_descrip		1061079	0					
ANR	1061095	Argument	0		1061079	3					
ANR	1061096	PrimaryExpression	0		1061079	0					
ANR	1061097	ReturnType	int		1061079	1					
ANR	1061098	Identifier	DaemonCore :: Register_Timer		1061079	2					
ANR	1061099	ParameterList	"unsigned deltawhen , TimerHandler handler , const char * event_descrip"		1061079	3					
ANR	1061100	Parameter	unsigned deltawhen	861:31:23968:23985	1061079	0	True				
ANR	1061101	ParameterType	unsigned		1061079	0					
ANR	1061102	Identifier	deltawhen		1061079	1					
ANR	1061103	Parameter	TimerHandler handler	861:51:23988:24007	1061079	1	True				
ANR	1061104	ParameterType	TimerHandler		1061079	0					
ANR	1061105	Identifier	handler		1061079	1					
ANR	1061106	Parameter	const char * event_descrip	862:4:24014:24038	1061079	2	True				
ANR	1061107	ParameterType	const char *		1061079	0					
ANR	1061108	Identifier	event_descrip		1061079	1					
ANR	1061109	CFGEntryNode	ENTRY		1061079		True				
ANR	1061110	CFGExitNode	EXIT		1061079		True				
ANR	1061111	Symbol	deltawhen		1061079						
ANR	1061112	Symbol	handler		1061079						
ANR	1061113	Symbol	t		1061079						
ANR	1061114	Symbol	event_descrip		1061079						
ANR	1061115	Symbol	t . NewTimer		1061079						
ANR	1061116	Function	DaemonCore :: Register_Timer_TS	868:0:24120:24608							
ANR	1061117	FunctionDef	"DaemonCore :: Register_Timer_TS (unsigned deltawhen , TimerHandlercpp handler , const char * event_descrip , Service * s)"		1061116	0					
ANR	1061118	CompoundStatement		870:0:24242:24608	1061116	0					
ANR	1061119	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	871:1:24245:24281	1061116	0	True				
ANR	1061120	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		1061116	0					
ANR	1061121	Callee	EnterCriticalSection		1061116	0					
ANR	1061122	Identifier	EnterCriticalSection		1061116	0					
ANR	1061123	ArgumentList	& Big_fat_mutex		1061116	1					
ANR	1061124	Argument	& Big_fat_mutex		1061116	0					
ANR	1061125	UnaryOperationExpression	& Big_fat_mutex		1061116	0					
ANR	1061126	UnaryOperator	&		1061116	0					
ANR	1061127	Identifier	Big_fat_mutex		1061116	1					
ANR	1061128	IdentifierDeclStatement	"int status = Register_Timer ( deltawhen , handler , event_descrip , s ) ;"	872:1:24284:24349	1061116	1	True				
ANR	1061129	IdentifierDecl	"status = Register_Timer ( deltawhen , handler , event_descrip , s )"		1061116	0					
ANR	1061130	IdentifierDeclType	int		1061116	0					
ANR	1061131	Identifier	status		1061116	1					
ANR	1061132	AssignmentExpression	"status = Register_Timer ( deltawhen , handler , event_descrip , s )"		1061116	2		=			
ANR	1061133	Identifier	status		1061116	0					
ANR	1061134	CallExpression	"Register_Timer ( deltawhen , handler , event_descrip , s )"		1061116	1					
ANR	1061135	Callee	Register_Timer		1061116	0					
ANR	1061136	Identifier	Register_Timer		1061116	0					
ANR	1061137	ArgumentList	deltawhen		1061116	1					
ANR	1061138	Argument	deltawhen		1061116	0					
ANR	1061139	Identifier	deltawhen		1061116	0					
ANR	1061140	Argument	handler		1061116	1					
ANR	1061141	Identifier	handler		1061116	0					
ANR	1061142	Argument	event_descrip		1061116	2					
ANR	1061143	Identifier	event_descrip		1061116	0					
ANR	1061144	Argument	s		1061116	3					
ANR	1061145	Identifier	s		1061116	0					
ANR	1061146	ExpressionStatement	Do_Wake_up_select ( )	873:1:24352:24371	1061116	2	True				
ANR	1061147	CallExpression	Do_Wake_up_select ( )		1061116	0					
ANR	1061148	Callee	Do_Wake_up_select		1061116	0					
ANR	1061149	Identifier	Do_Wake_up_select		1061116	0					
ANR	1061150	ArgumentList			1061116	1					
ANR	1061151	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	874:1:24374:24410	1061116	3	True				
ANR	1061152	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		1061116	0					
ANR	1061153	Callee	LeaveCriticalSection		1061116	0					
ANR	1061154	Identifier	LeaveCriticalSection		1061116	0					
ANR	1061155	ArgumentList	& Big_fat_mutex		1061116	1					
ANR	1061156	Argument	& Big_fat_mutex		1061116	0					
ANR	1061157	UnaryOperationExpression	& Big_fat_mutex		1061116	0					
ANR	1061158	UnaryOperator	&		1061116	0					
ANR	1061159	Identifier	Big_fat_mutex		1061116	1					
ANR	1061160	ReturnStatement	return status ;	876:1:24414:24427	1061116	4	True				
ANR	1061161	Identifier	status		1061116	0					
ANR	1061162	ReturnType	int		1061116	1					
ANR	1061163	Identifier	DaemonCore :: Register_Timer_TS		1061116	2					
ANR	1061164	ParameterList	"unsigned deltawhen , TimerHandlercpp handler , const char * event_descrip , Service * s"		1061116	3					
ANR	1061165	Parameter	unsigned deltawhen	868:34:24154:24171	1061116	0	True				
ANR	1061166	ParameterType	unsigned		1061116	0					
ANR	1061167	Identifier	deltawhen		1061116	1					
ANR	1061168	Parameter	TimerHandlercpp handler	868:54:24174:24196	1061116	1	True				
ANR	1061169	ParameterType	TimerHandlercpp		1061116	0					
ANR	1061170	Identifier	handler		1061116	1					
ANR	1061171	Parameter	const char * event_descrip	869:4:24203:24227	1061116	2	True				
ANR	1061172	ParameterType	const char *		1061116	0					
ANR	1061173	Identifier	event_descrip		1061116	1					
ANR	1061174	Parameter	Service * s	869:31:24230:24239	1061116	3	True				
ANR	1061175	ParameterType	Service *		1061116	0					
ANR	1061176	Identifier	s		1061116	1					
ANR	1061177	CFGEntryNode	ENTRY		1061116		True				
ANR	1061178	CFGExitNode	EXIT		1061116		True				
ANR	1061179	Symbol	& Big_fat_mutex		1061116						
ANR	1061180	Symbol	deltawhen		1061116						
ANR	1061181	Symbol	handler		1061116						
ANR	1061182	Symbol	s		1061116						
ANR	1061183	Symbol	Register_Timer		1061116						
ANR	1061184	Symbol	event_descrip		1061116						
ANR	1061185	Symbol	status		1061116						
ANR	1061186	Function	DaemonCore :: Register_Timer	886:0:24611:24810							
ANR	1061187	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandler handler , Release release , const char * event_descrip)"		1061186	0					
ANR	1061188	CompoundStatement		888:0:24738:24810	1061186	0					
ANR	1061189	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , release , event_descrip , 0 ) ) ;"	889:1:24741:24808	1061186	0	True				
ANR	1061190	CallExpression	"t . NewTimer ( deltawhen , handler , release , event_descrip , 0 )"		1061186	0					
ANR	1061191	Callee	t . NewTimer		1061186	0					
ANR	1061192	MemberAccess	t . NewTimer		1061186	0					
ANR	1061193	Identifier	t		1061186	0					
ANR	1061194	Identifier	NewTimer		1061186	1					
ANR	1061195	ArgumentList	deltawhen		1061186	1					
ANR	1061196	Argument	deltawhen		1061186	0					
ANR	1061197	Identifier	deltawhen		1061186	0					
ANR	1061198	Argument	handler		1061186	1					
ANR	1061199	Identifier	handler		1061186	0					
ANR	1061200	Argument	release		1061186	2					
ANR	1061201	Identifier	release		1061186	0					
ANR	1061202	Argument	event_descrip		1061186	3					
ANR	1061203	Identifier	event_descrip		1061186	0					
ANR	1061204	Argument	0		1061186	4					
ANR	1061205	PrimaryExpression	0		1061186	0					
ANR	1061206	ReturnType	int		1061186	1					
ANR	1061207	Identifier	DaemonCore :: Register_Timer		1061186	2					
ANR	1061208	ParameterList	"unsigned deltawhen , TimerHandler handler , Release release , const char * event_descrip"		1061186	3					
ANR	1061209	Parameter	unsigned deltawhen	886:31:24642:24659	1061186	0	True				
ANR	1061210	ParameterType	unsigned		1061186	0					
ANR	1061211	Identifier	deltawhen		1061186	1					
ANR	1061212	Parameter	TimerHandler handler	886:51:24662:24681	1061186	1	True				
ANR	1061213	ParameterType	TimerHandler		1061186	0					
ANR	1061214	Identifier	handler		1061186	1					
ANR	1061215	Parameter	Release release	887:10:24694:24708	1061186	2	True				
ANR	1061216	ParameterType	Release		1061186	0					
ANR	1061217	Identifier	release		1061186	1					
ANR	1061218	Parameter	const char * event_descrip	887:27:24711:24735	1061186	3	True				
ANR	1061219	ParameterType	const char *		1061186	0					
ANR	1061220	Identifier	event_descrip		1061186	1					
ANR	1061221	CFGEntryNode	ENTRY		1061186		True				
ANR	1061222	CFGExitNode	EXIT		1061186		True				
ANR	1061223	Symbol	deltawhen		1061186						
ANR	1061224	Symbol	handler		1061186						
ANR	1061225	Symbol	t		1061186						
ANR	1061226	Symbol	release		1061186						
ANR	1061227	Symbol	event_descrip		1061186						
ANR	1061228	Symbol	t . NewTimer		1061186						
ANR	1061229	Function	DaemonCore :: Register_Timer	892:0:24813:25002							
ANR	1061230	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , unsigned period , TimerHandler handler , const char * event_descrip)"		1061229	0					
ANR	1061231	CompoundStatement		894:0:24934:25002	1061229	0					
ANR	1061232	ReturnStatement	"return ( t . NewTimer ( deltawhen , handler , event_descrip , period ) ) ;"	895:1:24937:25000	1061229	0	True				
ANR	1061233	CallExpression	"t . NewTimer ( deltawhen , handler , event_descrip , period )"		1061229	0					
ANR	1061234	Callee	t . NewTimer		1061229	0					
ANR	1061235	MemberAccess	t . NewTimer		1061229	0					
ANR	1061236	Identifier	t		1061229	0					
ANR	1061237	Identifier	NewTimer		1061229	1					
ANR	1061238	ArgumentList	deltawhen		1061229	1					
ANR	1061239	Argument	deltawhen		1061229	0					
ANR	1061240	Identifier	deltawhen		1061229	0					
ANR	1061241	Argument	handler		1061229	1					
ANR	1061242	Identifier	handler		1061229	0					
ANR	1061243	Argument	event_descrip		1061229	2					
ANR	1061244	Identifier	event_descrip		1061229	0					
ANR	1061245	Argument	period		1061229	3					
ANR	1061246	Identifier	period		1061229	0					
ANR	1061247	ReturnType	int		1061229	1					
ANR	1061248	Identifier	DaemonCore :: Register_Timer		1061229	2					
ANR	1061249	ParameterList	"unsigned deltawhen , unsigned period , TimerHandler handler , const char * event_descrip"		1061229	3					
ANR	1061250	Parameter	unsigned deltawhen	892:31:24844:24861	1061229	0	True				
ANR	1061251	ParameterType	unsigned		1061229	0					
ANR	1061252	Identifier	deltawhen		1061229	1					
ANR	1061253	Parameter	unsigned period	892:51:24864:24878	1061229	1	True				
ANR	1061254	ParameterType	unsigned		1061229	0					
ANR	1061255	Identifier	period		1061229	1					
ANR	1061256	Parameter	TimerHandler handler	893:4:24885:24904	1061229	2	True				
ANR	1061257	ParameterType	TimerHandler		1061229	0					
ANR	1061258	Identifier	handler		1061229	1					
ANR	1061259	Parameter	const char * event_descrip	893:26:24907:24931	1061229	3	True				
ANR	1061260	ParameterType	const char *		1061229	0					
ANR	1061261	Identifier	event_descrip		1061229	1					
ANR	1061262	CFGEntryNode	ENTRY		1061229		True				
ANR	1061263	CFGExitNode	EXIT		1061229		True				
ANR	1061264	Symbol	deltawhen		1061229						
ANR	1061265	Symbol	handler		1061229						
ANR	1061266	Symbol	period		1061229						
ANR	1061267	Symbol	t		1061229						
ANR	1061268	Symbol	event_descrip		1061229						
ANR	1061269	Symbol	t . NewTimer		1061229						
ANR	1061270	Function	DaemonCore :: Register_Timer	898:0:25005:25196							
ANR	1061271	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , TimerHandlercpp handlercpp , const char * event_descrip , Service * s)"		1061270	0					
ANR	1061272	CompoundStatement		900:0:25127:25196	1061270	0					
ANR	1061273	ReturnStatement	"return ( t . NewTimer ( s , deltawhen , handlercpp , event_descrip , 0 ) ) ;"	901:1:25130:25194	1061270	0	True				
ANR	1061274	CallExpression	"t . NewTimer ( s , deltawhen , handlercpp , event_descrip , 0 )"		1061270	0					
ANR	1061275	Callee	t . NewTimer		1061270	0					
ANR	1061276	MemberAccess	t . NewTimer		1061270	0					
ANR	1061277	Identifier	t		1061270	0					
ANR	1061278	Identifier	NewTimer		1061270	1					
ANR	1061279	ArgumentList	s		1061270	1					
ANR	1061280	Argument	s		1061270	0					
ANR	1061281	Identifier	s		1061270	0					
ANR	1061282	Argument	deltawhen		1061270	1					
ANR	1061283	Identifier	deltawhen		1061270	0					
ANR	1061284	Argument	handlercpp		1061270	2					
ANR	1061285	Identifier	handlercpp		1061270	0					
ANR	1061286	Argument	event_descrip		1061270	3					
ANR	1061287	Identifier	event_descrip		1061270	0					
ANR	1061288	Argument	0		1061270	4					
ANR	1061289	PrimaryExpression	0		1061270	0					
ANR	1061290	ReturnType	int		1061270	1					
ANR	1061291	Identifier	DaemonCore :: Register_Timer		1061270	2					
ANR	1061292	ParameterList	"unsigned deltawhen , TimerHandlercpp handlercpp , const char * event_descrip , Service * s"		1061270	3					
ANR	1061293	Parameter	unsigned deltawhen	898:31:25036:25053	1061270	0	True				
ANR	1061294	ParameterType	unsigned		1061270	0					
ANR	1061295	Identifier	deltawhen		1061270	1					
ANR	1061296	Parameter	TimerHandlercpp handlercpp	898:51:25056:25081	1061270	1	True				
ANR	1061297	ParameterType	TimerHandlercpp		1061270	0					
ANR	1061298	Identifier	handlercpp		1061270	1					
ANR	1061299	Parameter	const char * event_descrip	899:4:25088:25112	1061270	2	True				
ANR	1061300	ParameterType	const char *		1061270	0					
ANR	1061301	Identifier	event_descrip		1061270	1					
ANR	1061302	Parameter	Service * s	899:31:25115:25124	1061270	3	True				
ANR	1061303	ParameterType	Service *		1061270	0					
ANR	1061304	Identifier	s		1061270	1					
ANR	1061305	CFGEntryNode	ENTRY		1061270		True				
ANR	1061306	CFGExitNode	EXIT		1061270		True				
ANR	1061307	Symbol	deltawhen		1061270						
ANR	1061308	Symbol	s		1061270						
ANR	1061309	Symbol	t		1061270						
ANR	1061310	Symbol	event_descrip		1061270						
ANR	1061311	Symbol	t . NewTimer		1061270						
ANR	1061312	Symbol	handlercpp		1061270						
ANR	1061313	Function	DaemonCore :: Register_Timer	904:0:25199:25407							
ANR	1061314	FunctionDef	"DaemonCore :: Register_Timer (unsigned deltawhen , unsigned period , TimerHandlercpp handler , const char * event_descrip , Service * s)"		1061313	0					
ANR	1061315	CompoundStatement		906:0:25336:25407	1061313	0					
ANR	1061316	ReturnStatement	"return ( t . NewTimer ( s , deltawhen , handler , event_descrip , period ) ) ;"	907:1:25339:25405	1061313	0	True				
ANR	1061317	CallExpression	"t . NewTimer ( s , deltawhen , handler , event_descrip , period )"		1061313	0					
ANR	1061318	Callee	t . NewTimer		1061313	0					
ANR	1061319	MemberAccess	t . NewTimer		1061313	0					
ANR	1061320	Identifier	t		1061313	0					
ANR	1061321	Identifier	NewTimer		1061313	1					
ANR	1061322	ArgumentList	s		1061313	1					
ANR	1061323	Argument	s		1061313	0					
ANR	1061324	Identifier	s		1061313	0					
ANR	1061325	Argument	deltawhen		1061313	1					
ANR	1061326	Identifier	deltawhen		1061313	0					
ANR	1061327	Argument	handler		1061313	2					
ANR	1061328	Identifier	handler		1061313	0					
ANR	1061329	Argument	event_descrip		1061313	3					
ANR	1061330	Identifier	event_descrip		1061313	0					
ANR	1061331	Argument	period		1061313	4					
ANR	1061332	Identifier	period		1061313	0					
ANR	1061333	ReturnType	int		1061313	1					
ANR	1061334	Identifier	DaemonCore :: Register_Timer		1061313	2					
ANR	1061335	ParameterList	"unsigned deltawhen , unsigned period , TimerHandlercpp handler , const char * event_descrip , Service * s"		1061313	3					
ANR	1061336	Parameter	unsigned deltawhen	904:31:25230:25247	1061313	0	True				
ANR	1061337	ParameterType	unsigned		1061313	0					
ANR	1061338	Identifier	deltawhen		1061313	1					
ANR	1061339	Parameter	unsigned period	904:51:25250:25264	1061313	1	True				
ANR	1061340	ParameterType	unsigned		1061313	0					
ANR	1061341	Identifier	period		1061313	1					
ANR	1061342	Parameter	TimerHandlercpp handler	905:4:25271:25293	1061313	2	True				
ANR	1061343	ParameterType	TimerHandlercpp		1061313	0					
ANR	1061344	Identifier	handler		1061313	1					
ANR	1061345	Parameter	const char * event_descrip	905:29:25296:25320	1061313	3	True				
ANR	1061346	ParameterType	const char *		1061313	0					
ANR	1061347	Identifier	event_descrip		1061313	1					
ANR	1061348	Parameter	Service * s	905:56:25323:25332	1061313	4	True				
ANR	1061349	ParameterType	Service *		1061313	0					
ANR	1061350	Identifier	s		1061313	1					
ANR	1061351	CFGEntryNode	ENTRY		1061313		True				
ANR	1061352	CFGExitNode	EXIT		1061313		True				
ANR	1061353	Symbol	deltawhen		1061313						
ANR	1061354	Symbol	handler		1061313						
ANR	1061355	Symbol	period		1061313						
ANR	1061356	Symbol	s		1061313						
ANR	1061357	Symbol	t		1061313						
ANR	1061358	Symbol	event_descrip		1061313						
ANR	1061359	Symbol	t . NewTimer		1061313						
ANR	1061360	Function	DaemonCore :: Register_Timer	910:0:25410:25593							
ANR	1061361	FunctionDef	"DaemonCore :: Register_Timer (const Timeslice & timeslice , TimerHandlercpp handler , const char * event_descrip , Service * s)"		1061360	0					
ANR	1061362	CompoundStatement		911:0:25532:25593	1061360	0					
ANR	1061363	ReturnStatement	"return t . NewTimer ( s , timeslice , handler , event_descrip ) ;"	912:1:25535:25591	1061360	0	True				
ANR	1061364	CallExpression	"t . NewTimer ( s , timeslice , handler , event_descrip )"		1061360	0					
ANR	1061365	Callee	t . NewTimer		1061360	0					
ANR	1061366	MemberAccess	t . NewTimer		1061360	0					
ANR	1061367	Identifier	t		1061360	0					
ANR	1061368	Identifier	NewTimer		1061360	1					
ANR	1061369	ArgumentList	s		1061360	1					
ANR	1061370	Argument	s		1061360	0					
ANR	1061371	Identifier	s		1061360	0					
ANR	1061372	Argument	timeslice		1061360	1					
ANR	1061373	Identifier	timeslice		1061360	0					
ANR	1061374	Argument	handler		1061360	2					
ANR	1061375	Identifier	handler		1061360	0					
ANR	1061376	Argument	event_descrip		1061360	3					
ANR	1061377	Identifier	event_descrip		1061360	0					
ANR	1061378	ReturnType	int		1061360	1					
ANR	1061379	Identifier	DaemonCore :: Register_Timer		1061360	2					
ANR	1061380	ParameterList	"const Timeslice & timeslice , TimerHandlercpp handler , const char * event_descrip , Service * s"		1061360	3					
ANR	1061381	Parameter	const Timeslice & timeslice	910:32:25442:25467	1061360	0	True				
ANR	1061382	ParameterType	const Timeslice &		1061360	0					
ANR	1061383	Identifier	timeslice		1061360	1					
ANR	1061384	Parameter	TimerHandlercpp handler	910:59:25469:25491	1061360	1	True				
ANR	1061385	ParameterType	TimerHandlercpp		1061360	0					
ANR	1061386	Identifier	handler		1061360	1					
ANR	1061387	Parameter	const char * event_descrip	910:83:25493:25518	1061360	2	True				
ANR	1061388	ParameterType	const char *		1061360	0					
ANR	1061389	Identifier	event_descrip		1061360	1					
ANR	1061390	Parameter	Service * s	910:110:25520:25529	1061360	3	True				
ANR	1061391	ParameterType	Service *		1061360	0					
ANR	1061392	Identifier	s		1061360	1					
ANR	1061393	CFGEntryNode	ENTRY		1061360		True				
ANR	1061394	CFGExitNode	EXIT		1061360		True				
ANR	1061395	Symbol	timeslice		1061360						
ANR	1061396	Symbol	handler		1061360						
ANR	1061397	Symbol	s		1061360						
ANR	1061398	Symbol	t		1061360						
ANR	1061399	Symbol	event_descrip		1061360						
ANR	1061400	Symbol	t . NewTimer		1061360						
ANR	1061401	Function	DaemonCore :: Cancel_Timer	915:0:25596:25667							
ANR	1061402	FunctionDef	DaemonCore :: Cancel_Timer (int id)		1061401	0					
ANR	1061403	CompoundStatement		916:0:25635:25667	1061401	0					
ANR	1061404	ReturnStatement	return ( t . CancelTimer ( id ) ) ;	917:1:25638:25665	1061401	0	True				
ANR	1061405	CallExpression	t . CancelTimer ( id )		1061401	0					
ANR	1061406	Callee	t . CancelTimer		1061401	0					
ANR	1061407	MemberAccess	t . CancelTimer		1061401	0					
ANR	1061408	Identifier	t		1061401	0					
ANR	1061409	Identifier	CancelTimer		1061401	1					
ANR	1061410	ArgumentList	id		1061401	1					
ANR	1061411	Argument	id		1061401	0					
ANR	1061412	Identifier	id		1061401	0					
ANR	1061413	ReturnType	int		1061401	1					
ANR	1061414	Identifier	DaemonCore :: Cancel_Timer		1061401	2					
ANR	1061415	ParameterList	int id		1061401	3					
ANR	1061416	Parameter	int id	915:30:25626:25631	1061401	0	True				
ANR	1061417	ParameterType	int		1061401	0					
ANR	1061418	Identifier	id		1061401	1					
ANR	1061419	CFGEntryNode	ENTRY		1061401		True				
ANR	1061420	CFGExitNode	EXIT		1061401		True				
ANR	1061421	Symbol	t		1061401						
ANR	1061422	Symbol	id		1061401						
ANR	1061423	Symbol	t . CancelTimer		1061401						
ANR	1061424	Function	DaemonCore :: Reset_Timer	920:0:25670:25783							
ANR	1061425	FunctionDef	"DaemonCore :: Reset_Timer (int id , unsigned when , unsigned period)"		1061424	0					
ANR	1061426	CompoundStatement		921:0:25740:25783	1061424	0					
ANR	1061427	ReturnStatement	"return ( t . ResetTimer ( id , when , period ) ) ;"	922:1:25743:25781	1061424	0	True				
ANR	1061428	CallExpression	"t . ResetTimer ( id , when , period )"		1061424	0					
ANR	1061429	Callee	t . ResetTimer		1061424	0					
ANR	1061430	MemberAccess	t . ResetTimer		1061424	0					
ANR	1061431	Identifier	t		1061424	0					
ANR	1061432	Identifier	ResetTimer		1061424	1					
ANR	1061433	ArgumentList	id		1061424	1					
ANR	1061434	Argument	id		1061424	0					
ANR	1061435	Identifier	id		1061424	0					
ANR	1061436	Argument	when		1061424	1					
ANR	1061437	Identifier	when		1061424	0					
ANR	1061438	Argument	period		1061424	2					
ANR	1061439	Identifier	period		1061424	0					
ANR	1061440	ReturnType	int		1061424	1					
ANR	1061441	Identifier	DaemonCore :: Reset_Timer		1061424	2					
ANR	1061442	ParameterList	"int id , unsigned when , unsigned period"		1061424	3					
ANR	1061443	Parameter	int id	920:29:25699:25704	1061424	0	True				
ANR	1061444	ParameterType	int		1061424	0					
ANR	1061445	Identifier	id		1061424	1					
ANR	1061446	Parameter	unsigned when	920:37:25707:25719	1061424	1	True				
ANR	1061447	ParameterType	unsigned		1061424	0					
ANR	1061448	Identifier	when		1061424	1					
ANR	1061449	Parameter	unsigned period	920:52:25722:25736	1061424	2	True				
ANR	1061450	ParameterType	unsigned		1061424	0					
ANR	1061451	Identifier	period		1061424	1					
ANR	1061452	CFGEntryNode	ENTRY		1061424		True				
ANR	1061453	CFGExitNode	EXIT		1061424		True				
ANR	1061454	Symbol	period		1061424						
ANR	1061455	Symbol	t		1061424						
ANR	1061456	Symbol	id		1061424						
ANR	1061457	Symbol	t . ResetTimer		1061424						
ANR	1061458	Symbol	when		1061424						
ANR	1061459	Function	DaemonCore :: Reset_Timer_Period	925:0:25786:25893							
ANR	1061460	FunctionDef	"DaemonCore :: Reset_Timer_Period (int id , unsigned period)"		1061459	0					
ANR	1061461	CompoundStatement		926:0:25849:25893	1061459	0					
ANR	1061462	ReturnStatement	"return ( t . ResetTimerPeriod ( id , period ) ) ;"	927:1:25852:25891	1061459	0	True				
ANR	1061463	CallExpression	"t . ResetTimerPeriod ( id , period )"		1061459	0					
ANR	1061464	Callee	t . ResetTimerPeriod		1061459	0					
ANR	1061465	MemberAccess	t . ResetTimerPeriod		1061459	0					
ANR	1061466	Identifier	t		1061459	0					
ANR	1061467	Identifier	ResetTimerPeriod		1061459	1					
ANR	1061468	ArgumentList	id		1061459	1					
ANR	1061469	Argument	id		1061459	0					
ANR	1061470	Identifier	id		1061459	0					
ANR	1061471	Argument	period		1061459	1					
ANR	1061472	Identifier	period		1061459	0					
ANR	1061473	ReturnType	int		1061459	1					
ANR	1061474	Identifier	DaemonCore :: Reset_Timer_Period		1061459	2					
ANR	1061475	ParameterList	"int id , unsigned period"		1061459	3					
ANR	1061476	Parameter	int id	925:37:25823:25828	1061459	0	True				
ANR	1061477	ParameterType	int		1061459	0					
ANR	1061478	Identifier	id		1061459	1					
ANR	1061479	Parameter	unsigned period	925:45:25831:25845	1061459	1	True				
ANR	1061480	ParameterType	unsigned		1061459	0					
ANR	1061481	Identifier	period		1061459	1					
ANR	1061482	CFGEntryNode	ENTRY		1061459		True				
ANR	1061483	CFGExitNode	EXIT		1061459		True				
ANR	1061484	Symbol	period		1061459						
ANR	1061485	Symbol	t		1061459						
ANR	1061486	Symbol	t . ResetTimerPeriod		1061459						
ANR	1061487	Symbol	id		1061459						
ANR	1061488	Function	DaemonCore :: ResetTimerTimeslice	930:0:25896:26026							
ANR	1061489	FunctionDef	"DaemonCore :: ResetTimerTimeslice (int id , Timeslice const & new_timeslice)"		1061488	0					
ANR	1061490	CompoundStatement		931:0:25975:26026	1061488	0					
ANR	1061491	ReturnStatement	"return t . ResetTimerTimeslice ( id , new_timeslice ) ;"	932:1:25978:26024	1061488	0	True				
ANR	1061492	CallExpression	"t . ResetTimerTimeslice ( id , new_timeslice )"		1061488	0					
ANR	1061493	Callee	t . ResetTimerTimeslice		1061488	0					
ANR	1061494	MemberAccess	t . ResetTimerTimeslice		1061488	0					
ANR	1061495	Identifier	t		1061488	0					
ANR	1061496	Identifier	ResetTimerTimeslice		1061488	1					
ANR	1061497	ArgumentList	id		1061488	1					
ANR	1061498	Argument	id		1061488	0					
ANR	1061499	Identifier	id		1061488	0					
ANR	1061500	Argument	new_timeslice		1061488	1					
ANR	1061501	Identifier	new_timeslice		1061488	0					
ANR	1061502	ReturnType	int		1061488	1					
ANR	1061503	Identifier	DaemonCore :: ResetTimerTimeslice		1061488	2					
ANR	1061504	ParameterList	"int id , Timeslice const & new_timeslice"		1061488	3					
ANR	1061505	Parameter	int id	930:38:25934:25939	1061488	0	True				
ANR	1061506	ParameterType	int		1061488	0					
ANR	1061507	Identifier	id		1061488	1					
ANR	1061508	Parameter	Timeslice const & new_timeslice	930:46:25942:25971	1061488	1	True				
ANR	1061509	ParameterType	Timeslice const &		1061488	0					
ANR	1061510	Identifier	new_timeslice		1061488	1					
ANR	1061511	CFGEntryNode	ENTRY		1061488		True				
ANR	1061512	CFGExitNode	EXIT		1061488		True				
ANR	1061513	Symbol	t		1061488						
ANR	1061514	Symbol	id		1061488						
ANR	1061515	Symbol	new_timeslice		1061488						
ANR	1061516	Symbol	t . ResetTimerTimeslice		1061488						
ANR	1061517	Function	DaemonCore :: GetTimerTimeslice	935:0:26029:26144							
ANR	1061518	FunctionDef	"DaemonCore :: GetTimerTimeslice (int id , Timeslice & timeslice)"		1061517	0					
ANR	1061519	CompoundStatement		936:0:26096:26144	1061517	0					
ANR	1061520	ReturnStatement	"return t . GetTimerTimeslice ( id , timeslice ) ;"	937:1:26099:26142	1061517	0	True				
ANR	1061521	CallExpression	"t . GetTimerTimeslice ( id , timeslice )"		1061517	0					
ANR	1061522	Callee	t . GetTimerTimeslice		1061517	0					
ANR	1061523	MemberAccess	t . GetTimerTimeslice		1061517	0					
ANR	1061524	Identifier	t		1061517	0					
ANR	1061525	Identifier	GetTimerTimeslice		1061517	1					
ANR	1061526	ArgumentList	id		1061517	1					
ANR	1061527	Argument	id		1061517	0					
ANR	1061528	Identifier	id		1061517	0					
ANR	1061529	Argument	timeslice		1061517	1					
ANR	1061530	Identifier	timeslice		1061517	0					
ANR	1061531	ReturnType	bool		1061517	1					
ANR	1061532	Identifier	DaemonCore :: GetTimerTimeslice		1061517	2					
ANR	1061533	ParameterList	"int id , Timeslice & timeslice"		1061517	3					
ANR	1061534	Parameter	int id	935:36:26065:26070	1061517	0	True				
ANR	1061535	ParameterType	int		1061517	0					
ANR	1061536	Identifier	id		1061517	1					
ANR	1061537	Parameter	Timeslice & timeslice	935:44:26073:26092	1061517	1	True				
ANR	1061538	ParameterType	Timeslice &		1061517	0					
ANR	1061539	Identifier	timeslice		1061517	1					
ANR	1061540	CFGEntryNode	ENTRY		1061517		True				
ANR	1061541	CFGExitNode	EXIT		1061517		True				
ANR	1061542	Symbol	timeslice		1061517						
ANR	1061543	Symbol	t		1061517						
ANR	1061544	Symbol	id		1061517						
ANR	1061545	Symbol	t . GetTimerTimeslice		1061517						
ANR	1061546	Function	DaemonCore :: Register_Command	943:0:26224:28656							
ANR	1061547	FunctionDef	"DaemonCore :: Register_Command (int command , const char * command_descrip , CommandHandler handler , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , int is_cpp , bool force_authentication , int wait_for_payload)"		1061546	0					
ANR	1061548	CompoundStatement		948:0:26508:28656	1061546	0					
ANR	1061549	IdentifierDeclStatement	int i ;	949:4:26514:26523	1061546	0	True				
ANR	1061550	IdentifierDecl	i		1061546	0					
ANR	1061551	IdentifierDeclType	int		1061546	0					
ANR	1061552	Identifier	i		1061546	1					
ANR	1061553	IdentifierDeclStatement	int j ;	950:4:26544:26553	1061546	1	True				
ANR	1061554	IdentifierDecl	j		1061546	0					
ANR	1061555	IdentifierDeclType	int		1061546	0					
ANR	1061556	Identifier	j		1061546	1					
ANR	1061557	IfStatement	if ( handler == 0 && handlercpp == 0 )		1061546	2					
ANR	1061558	Condition	handler == 0 && handlercpp == 0	952:8:26587:26617	1061546	0	True				
ANR	1061559	AndExpression	handler == 0 && handlercpp == 0		1061546	0		&&			
ANR	1061560	EqualityExpression	handler == 0		1061546	0		==			
ANR	1061561	Identifier	handler		1061546	0					
ANR	1061562	PrimaryExpression	0		1061546	1					
ANR	1061563	EqualityExpression	handlercpp == 0		1061546	1		==			
ANR	1061564	Identifier	handlercpp		1061546	0					
ANR	1061565	PrimaryExpression	0		1061546	1					
ANR	1061566	CompoundStatement		5:42:112:112	1061546	1					
ANR	1061567	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL command handler\\n"" )"	953:2:26625:26687	1061546	0	True				
ANR	1061568	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL command handler\\n"" )"		1061546	0					
ANR	1061569	Callee	dprintf		1061546	0					
ANR	1061570	Identifier	dprintf		1061546	0					
ANR	1061571	ArgumentList	D_DAEMONCORE		1061546	1					
ANR	1061572	Argument	D_DAEMONCORE		1061546	0					
ANR	1061573	Identifier	D_DAEMONCORE		1061546	0					
ANR	1061574	Argument	"""Can't register NULL command handler\\n"""		1061546	1					
ANR	1061575	PrimaryExpression	"""Can't register NULL command handler\\n"""		1061546	0					
ANR	1061576	ReturnStatement	return - 1 ;	954:2:26691:26700	1061546	1	True				
ANR	1061577	UnaryOperationExpression	- 1		1061546	0					
ANR	1061578	UnaryOperator	-		1061546	0					
ANR	1061579	PrimaryExpression	1		1061546	1					
ANR	1061580	IfStatement	if ( nCommand >= maxCommand )		1061546	3					
ANR	1061581	Condition	nCommand >= maxCommand	957:7:26716:26737	1061546	0	True				
ANR	1061582	RelationalExpression	nCommand >= maxCommand		1061546	0		>=			
ANR	1061583	Identifier	nCommand		1061546	0					
ANR	1061584	Identifier	maxCommand		1061546	1					
ANR	1061585	CompoundStatement		10:31:231:231	1061546	1					
ANR	1061586	ExpressionStatement	"EXCEPT ( ""# of command handlers exceeded specified maximum"" )"	958:2:26744:26802	1061546	0	True				
ANR	1061587	CallExpression	"EXCEPT ( ""# of command handlers exceeded specified maximum"" )"		1061546	0					
ANR	1061588	Callee	EXCEPT		1061546	0					
ANR	1061589	Identifier	EXCEPT		1061546	0					
ANR	1061590	ArgumentList	"""# of command handlers exceeded specified maximum"""		1061546	1					
ANR	1061591	Argument	"""# of command handlers exceeded specified maximum"""		1061546	0					
ANR	1061592	PrimaryExpression	"""# of command handlers exceeded specified maximum"""		1061546	0					
ANR	1061593	IfStatement	if ( command < 0 )		1061546	4					
ANR	1061594	Condition	command < 0	963:7:26941:26951	1061546	0	True				
ANR	1061595	RelationalExpression	command < 0		1061546	0		<			
ANR	1061596	Identifier	command		1061546	0					
ANR	1061597	PrimaryExpression	0		1061546	1					
ANR	1061598	CompoundStatement		16:20:445:445	1061546	1					
ANR	1061599	ExpressionStatement	i = - command % maxCommand	964:8:26964:26989	1061546	0	True				
ANR	1061600	AssignmentExpression	i = - command % maxCommand		1061546	0		=			
ANR	1061601	Identifier	i		1061546	0					
ANR	1061602	MultiplicativeExpression	- command % maxCommand		1061546	1		%			
ANR	1061603	UnaryOperationExpression	- command		1061546	0					
ANR	1061604	UnaryOperator	-		1061546	0					
ANR	1061605	Identifier	command		1061546	1					
ANR	1061606	Identifier	maxCommand		1061546	1					
ANR	1061607	ElseStatement	else		1061546	0					
ANR	1061608	CompoundStatement		18:11:493:493	1061546	0					
ANR	1061609	ExpressionStatement	i = command % maxCommand	966:8:27012:27036	1061546	0	True				
ANR	1061610	AssignmentExpression	i = command % maxCommand		1061546	0		=			
ANR	1061611	Identifier	i		1061546	0					
ANR	1061612	MultiplicativeExpression	command % maxCommand		1061546	1		%			
ANR	1061613	Identifier	command		1061546	0					
ANR	1061614	Identifier	maxCommand		1061546	1					
ANR	1061615	IfStatement	if ( ( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp ) )		1061546	5					
ANR	1061616	Condition	( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp )	970:9:27103:27151	1061546	0	True				
ANR	1061617	OrExpression	( comTable [ i ] . handler ) || ( comTable [ i ] . handlercpp )		1061546	0		||			
ANR	1061618	MemberAccess	comTable [ i ] . handler		1061546	0					
ANR	1061619	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061620	Identifier	comTable		1061546	0					
ANR	1061621	Identifier	i		1061546	1					
ANR	1061622	Identifier	handler		1061546	1					
ANR	1061623	MemberAccess	comTable [ i ] . handlercpp		1061546	1					
ANR	1061624	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061625	Identifier	comTable		1061546	0					
ANR	1061626	Identifier	i		1061546	1					
ANR	1061627	Identifier	handlercpp		1061546	1					
ANR	1061628	CompoundStatement		23:61:646:646	1061546	1					
ANR	1061629	IfStatement	if ( comTable [ i ] . num == command )		1061546	0					
ANR	1061630	Condition	comTable [ i ] . num == command	972:11:27182:27207	1061546	0	True				
ANR	1061631	EqualityExpression	comTable [ i ] . num == command		1061546	0		==			
ANR	1061632	MemberAccess	comTable [ i ] . num		1061546	0					
ANR	1061633	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061634	Identifier	comTable		1061546	0					
ANR	1061635	Identifier	i		1061546	1					
ANR	1061636	Identifier	num		1061546	1					
ANR	1061637	Identifier	command		1061546	1					
ANR	1061638	CompoundStatement		25:39:701:701	1061546	1					
ANR	1061639	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same command registered twice"" )"	974:3:27240:27291	1061546	0	True				
ANR	1061640	CallExpression	"EXCEPT ( ""DaemonCore: Same command registered twice"" )"		1061546	0					
ANR	1061641	Callee	EXCEPT		1061546	0					
ANR	1061642	Identifier	EXCEPT		1061546	0					
ANR	1061643	ArgumentList	"""DaemonCore: Same command registered twice"""		1061546	1					
ANR	1061644	Argument	"""DaemonCore: Same command registered twice"""		1061546	0					
ANR	1061645	PrimaryExpression	"""DaemonCore: Same command registered twice"""		1061546	0					
ANR	1061646	ForStatement	for ( j = ( i + 1 ) % maxCommand ; j != i ; j = ( j + 1 ) % maxCommand )		1061546	1					
ANR	1061647	ForInit	j = ( i + 1 ) % maxCommand ;	978:12:27400:27424	1061546	0	True				
ANR	1061648	AssignmentExpression	j = ( i + 1 ) % maxCommand		1061546	0		=			
ANR	1061649	Identifier	j		1061546	0					
ANR	1061650	MultiplicativeExpression	( i + 1 ) % maxCommand		1061546	1		%			
ANR	1061651	AdditiveExpression	i + 1		1061546	0		+			
ANR	1061652	Identifier	i		1061546	0					
ANR	1061653	PrimaryExpression	1		1061546	1					
ANR	1061654	Identifier	maxCommand		1061546	1					
ANR	1061655	Condition	j != i	978:38:27426:27431	1061546	1	True				
ANR	1061656	EqualityExpression	j != i		1061546	0		!=			
ANR	1061657	Identifier	j		1061546	0					
ANR	1061658	Identifier	i		1061546	1					
ANR	1061659	AssignmentExpression	j = ( j + 1 ) % maxCommand	978:46:27434:27457	1061546	2	True	=			
ANR	1061660	Identifier	j		1061546	0					
ANR	1061661	MultiplicativeExpression	( j + 1 ) % maxCommand		1061546	1		%			
ANR	1061662	AdditiveExpression	j + 1		1061546	0		+			
ANR	1061663	Identifier	j		1061546	0					
ANR	1061664	PrimaryExpression	1		1061546	1					
ANR	1061665	Identifier	maxCommand		1061546	1					
ANR	1061666	CompoundStatement		31:72:951:951	1061546	3					
ANR	1061667	IfStatement	if ( ( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 ) )		1061546	0					
ANR	1061668	Condition	( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 )	979:16:27478:27536	1061546	0	True				
ANR	1061669	AndExpression	( comTable [ j ] . handler == 0 ) && ( comTable [ j ] . handlercpp == 0 )		1061546	0		&&			
ANR	1061670	EqualityExpression	comTable [ j ] . handler == 0		1061546	0		==			
ANR	1061671	MemberAccess	comTable [ j ] . handler		1061546	0					
ANR	1061672	ArrayIndexing	comTable [ j ]		1061546	0					
ANR	1061673	Identifier	comTable		1061546	0					
ANR	1061674	Identifier	j		1061546	1					
ANR	1061675	Identifier	handler		1061546	1					
ANR	1061676	PrimaryExpression	0		1061546	1					
ANR	1061677	EqualityExpression	comTable [ j ] . handlercpp == 0		1061546	1		==			
ANR	1061678	MemberAccess	comTable [ j ] . handlercpp		1061546	0					
ANR	1061679	ArrayIndexing	comTable [ j ]		1061546	0					
ANR	1061680	Identifier	comTable		1061546	0					
ANR	1061681	Identifier	j		1061546	1					
ANR	1061682	Identifier	handlercpp		1061546	1					
ANR	1061683	PrimaryExpression	0		1061546	1					
ANR	1061684	CompoundStatement		33:12:1043:1043	1061546	1					
ANR	1061685	ExpressionStatement	i = j	981:4:27558:27563	1061546	0	True				
ANR	1061686	AssignmentExpression	i = j		1061546	0		=			
ANR	1061687	Identifier	i		1061546	0					
ANR	1061688	Identifier	j		1061546	1					
ANR	1061689	BreakStatement	break ;	982:4:27569:27574	1061546	1	True				
ANR	1061690	ExpressionStatement	comTable [ i ] . num = command	988:1:27669:27694	1061546	6	True				
ANR	1061691	AssignmentExpression	comTable [ i ] . num = command		1061546	0		=			
ANR	1061692	MemberAccess	comTable [ i ] . num		1061546	0					
ANR	1061693	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061694	Identifier	comTable		1061546	0					
ANR	1061695	Identifier	i		1061546	1					
ANR	1061696	Identifier	num		1061546	1					
ANR	1061697	Identifier	command		1061546	1					
ANR	1061698	ExpressionStatement	comTable [ i ] . handler = handler	989:1:27697:27726	1061546	7	True				
ANR	1061699	AssignmentExpression	comTable [ i ] . handler = handler		1061546	0		=			
ANR	1061700	MemberAccess	comTable [ i ] . handler		1061546	0					
ANR	1061701	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061702	Identifier	comTable		1061546	0					
ANR	1061703	Identifier	i		1061546	1					
ANR	1061704	Identifier	handler		1061546	1					
ANR	1061705	Identifier	handler		1061546	1					
ANR	1061706	ExpressionStatement	comTable [ i ] . handlercpp = handlercpp	990:1:27729:27764	1061546	8	True				
ANR	1061707	AssignmentExpression	comTable [ i ] . handlercpp = handlercpp		1061546	0		=			
ANR	1061708	MemberAccess	comTable [ i ] . handlercpp		1061546	0					
ANR	1061709	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061710	Identifier	comTable		1061546	0					
ANR	1061711	Identifier	i		1061546	1					
ANR	1061712	Identifier	handlercpp		1061546	1					
ANR	1061713	Identifier	handlercpp		1061546	1					
ANR	1061714	ExpressionStatement	comTable [ i ] . is_cpp = is_cpp	991:1:27767:27794	1061546	9	True				
ANR	1061715	AssignmentExpression	comTable [ i ] . is_cpp = is_cpp		1061546	0		=			
ANR	1061716	MemberAccess	comTable [ i ] . is_cpp		1061546	0					
ANR	1061717	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061718	Identifier	comTable		1061546	0					
ANR	1061719	Identifier	i		1061546	1					
ANR	1061720	Identifier	is_cpp		1061546	1					
ANR	1061721	Identifier	is_cpp		1061546	1					
ANR	1061722	ExpressionStatement	comTable [ i ] . perm = perm	992:1:27797:27820	1061546	10	True				
ANR	1061723	AssignmentExpression	comTable [ i ] . perm = perm		1061546	0		=			
ANR	1061724	MemberAccess	comTable [ i ] . perm		1061546	0					
ANR	1061725	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061726	Identifier	comTable		1061546	0					
ANR	1061727	Identifier	i		1061546	1					
ANR	1061728	Identifier	perm		1061546	1					
ANR	1061729	Identifier	perm		1061546	1					
ANR	1061730	ExpressionStatement	comTable [ i ] . force_authentication = force_authentication	993:1:27823:27878	1061546	11	True				
ANR	1061731	AssignmentExpression	comTable [ i ] . force_authentication = force_authentication		1061546	0		=			
ANR	1061732	MemberAccess	comTable [ i ] . force_authentication		1061546	0					
ANR	1061733	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061734	Identifier	comTable		1061546	0					
ANR	1061735	Identifier	i		1061546	1					
ANR	1061736	Identifier	force_authentication		1061546	1					
ANR	1061737	Identifier	force_authentication		1061546	1					
ANR	1061738	ExpressionStatement	comTable [ i ] . service = s	994:1:27881:27904	1061546	12	True				
ANR	1061739	AssignmentExpression	comTable [ i ] . service = s		1061546	0		=			
ANR	1061740	MemberAccess	comTable [ i ] . service		1061546	0					
ANR	1061741	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061742	Identifier	comTable		1061546	0					
ANR	1061743	Identifier	i		1061546	1					
ANR	1061744	Identifier	service		1061546	1					
ANR	1061745	Identifier	s		1061546	1					
ANR	1061746	ExpressionStatement	comTable [ i ] . data_ptr = NULL	995:1:27907:27934	1061546	13	True				
ANR	1061747	AssignmentExpression	comTable [ i ] . data_ptr = NULL		1061546	0		=			
ANR	1061748	MemberAccess	comTable [ i ] . data_ptr		1061546	0					
ANR	1061749	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061750	Identifier	comTable		1061546	0					
ANR	1061751	Identifier	i		1061546	1					
ANR	1061752	Identifier	data_ptr		1061546	1					
ANR	1061753	Identifier	NULL		1061546	1					
ANR	1061754	ExpressionStatement	comTable [ i ] . dprintf_flag = dprintf_flag	996:1:27937:27976	1061546	14	True				
ANR	1061755	AssignmentExpression	comTable [ i ] . dprintf_flag = dprintf_flag		1061546	0		=			
ANR	1061756	MemberAccess	comTable [ i ] . dprintf_flag		1061546	0					
ANR	1061757	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061758	Identifier	comTable		1061546	0					
ANR	1061759	Identifier	i		1061546	1					
ANR	1061760	Identifier	dprintf_flag		1061546	1					
ANR	1061761	Identifier	dprintf_flag		1061546	1					
ANR	1061762	ExpressionStatement	comTable [ i ] . wait_for_payload = wait_for_payload	997:1:27979:28026	1061546	15	True				
ANR	1061763	AssignmentExpression	comTable [ i ] . wait_for_payload = wait_for_payload		1061546	0		=			
ANR	1061764	MemberAccess	comTable [ i ] . wait_for_payload		1061546	0					
ANR	1061765	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061766	Identifier	comTable		1061546	0					
ANR	1061767	Identifier	i		1061546	1					
ANR	1061768	Identifier	wait_for_payload		1061546	1					
ANR	1061769	Identifier	wait_for_payload		1061546	1					
ANR	1061770	ExpressionStatement	free ( comTable [ i ] . command_descrip )	998:1:28029:28062	1061546	16	True				
ANR	1061771	CallExpression	free ( comTable [ i ] . command_descrip )		1061546	0					
ANR	1061772	Callee	free		1061546	0					
ANR	1061773	Identifier	free		1061546	0					
ANR	1061774	ArgumentList	comTable [ i ] . command_descrip		1061546	1					
ANR	1061775	Argument	comTable [ i ] . command_descrip		1061546	0					
ANR	1061776	MemberAccess	comTable [ i ] . command_descrip		1061546	0					
ANR	1061777	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061778	Identifier	comTable		1061546	0					
ANR	1061779	Identifier	i		1061546	1					
ANR	1061780	Identifier	command_descrip		1061546	1					
ANR	1061781	IfStatement	if ( command_descrip )		1061546	17					
ANR	1061782	Condition	command_descrip	999:6:28070:28084	1061546	0	True				
ANR	1061783	Identifier	command_descrip		1061546	0					
ANR	1061784	ExpressionStatement	comTable [ i ] . command_descrip = strdup ( command_descrip )	1000:2:28090:28143	1061546	1	True				
ANR	1061785	AssignmentExpression	comTable [ i ] . command_descrip = strdup ( command_descrip )		1061546	0		=			
ANR	1061786	MemberAccess	comTable [ i ] . command_descrip		1061546	0					
ANR	1061787	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061788	Identifier	comTable		1061546	0					
ANR	1061789	Identifier	i		1061546	1					
ANR	1061790	Identifier	command_descrip		1061546	1					
ANR	1061791	CallExpression	strdup ( command_descrip )		1061546	1					
ANR	1061792	Callee	strdup		1061546	0					
ANR	1061793	Identifier	strdup		1061546	0					
ANR	1061794	ArgumentList	command_descrip		1061546	1					
ANR	1061795	Argument	command_descrip		1061546	0					
ANR	1061796	Identifier	command_descrip		1061546	0					
ANR	1061797	ElseStatement	else		1061546	0					
ANR	1061798	ExpressionStatement	comTable [ i ] . command_descrip = strdup ( EMPTY_DESCRIP )	1002:2:28153:28204	1061546	0	True				
ANR	1061799	AssignmentExpression	comTable [ i ] . command_descrip = strdup ( EMPTY_DESCRIP )		1061546	0		=			
ANR	1061800	MemberAccess	comTable [ i ] . command_descrip		1061546	0					
ANR	1061801	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061802	Identifier	comTable		1061546	0					
ANR	1061803	Identifier	i		1061546	1					
ANR	1061804	Identifier	command_descrip		1061546	1					
ANR	1061805	CallExpression	strdup ( EMPTY_DESCRIP )		1061546	1					
ANR	1061806	Callee	strdup		1061546	0					
ANR	1061807	Identifier	strdup		1061546	0					
ANR	1061808	ArgumentList	EMPTY_DESCRIP		1061546	1					
ANR	1061809	Argument	EMPTY_DESCRIP		1061546	0					
ANR	1061810	Identifier	EMPTY_DESCRIP		1061546	0					
ANR	1061811	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	1003:1:28207:28240	1061546	18	True				
ANR	1061812	CallExpression	free ( comTable [ i ] . handler_descrip )		1061546	0					
ANR	1061813	Callee	free		1061546	0					
ANR	1061814	Identifier	free		1061546	0					
ANR	1061815	ArgumentList	comTable [ i ] . handler_descrip		1061546	1					
ANR	1061816	Argument	comTable [ i ] . handler_descrip		1061546	0					
ANR	1061817	MemberAccess	comTable [ i ] . handler_descrip		1061546	0					
ANR	1061818	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061819	Identifier	comTable		1061546	0					
ANR	1061820	Identifier	i		1061546	1					
ANR	1061821	Identifier	handler_descrip		1061546	1					
ANR	1061822	IfStatement	if ( handler_descrip )		1061546	19					
ANR	1061823	Condition	handler_descrip	1004:6:28248:28262	1061546	0	True				
ANR	1061824	Identifier	handler_descrip		1061546	0					
ANR	1061825	ExpressionStatement	comTable [ i ] . handler_descrip = strdup ( handler_descrip )	1005:2:28268:28321	1061546	1	True				
ANR	1061826	AssignmentExpression	comTable [ i ] . handler_descrip = strdup ( handler_descrip )		1061546	0		=			
ANR	1061827	MemberAccess	comTable [ i ] . handler_descrip		1061546	0					
ANR	1061828	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061829	Identifier	comTable		1061546	0					
ANR	1061830	Identifier	i		1061546	1					
ANR	1061831	Identifier	handler_descrip		1061546	1					
ANR	1061832	CallExpression	strdup ( handler_descrip )		1061546	1					
ANR	1061833	Callee	strdup		1061546	0					
ANR	1061834	Identifier	strdup		1061546	0					
ANR	1061835	ArgumentList	handler_descrip		1061546	1					
ANR	1061836	Argument	handler_descrip		1061546	0					
ANR	1061837	Identifier	handler_descrip		1061546	0					
ANR	1061838	ElseStatement	else		1061546	0					
ANR	1061839	ExpressionStatement	comTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1007:2:28331:28382	1061546	0	True				
ANR	1061840	AssignmentExpression	comTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		1061546	0		=			
ANR	1061841	MemberAccess	comTable [ i ] . handler_descrip		1061546	0					
ANR	1061842	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061843	Identifier	comTable		1061546	0					
ANR	1061844	Identifier	i		1061546	1					
ANR	1061845	Identifier	handler_descrip		1061546	1					
ANR	1061846	CallExpression	strdup ( EMPTY_DESCRIP )		1061546	1					
ANR	1061847	Callee	strdup		1061546	0					
ANR	1061848	Identifier	strdup		1061546	0					
ANR	1061849	ArgumentList	EMPTY_DESCRIP		1061546	1					
ANR	1061850	Argument	EMPTY_DESCRIP		1061546	0					
ANR	1061851	Identifier	EMPTY_DESCRIP		1061546	0					
ANR	1061852	ExpressionStatement	nCommand ++	1010:1:28439:28449	1061546	20	True				
ANR	1061853	PostIncDecOperationExpression	nCommand ++		1061546	0					
ANR	1061854	Identifier	nCommand		1061546	0					
ANR	1061855	IncDec	++		1061546	1					
ANR	1061856	ExpressionStatement	curr_regdataptr = & ( comTable [ i ] . data_ptr )	1013:1:28497:28538	1061546	21	True				
ANR	1061857	AssignmentExpression	curr_regdataptr = & ( comTable [ i ] . data_ptr )		1061546	0		=			
ANR	1061858	Identifier	curr_regdataptr		1061546	0					
ANR	1061859	UnaryOperationExpression	& ( comTable [ i ] . data_ptr )		1061546	1					
ANR	1061860	UnaryOperator	&		1061546	0					
ANR	1061861	MemberAccess	comTable [ i ] . data_ptr		1061546	1					
ANR	1061862	ArrayIndexing	comTable [ i ]		1061546	0					
ANR	1061863	Identifier	comTable		1061546	0					
ANR	1061864	Identifier	i		1061546	1					
ANR	1061865	Identifier	data_ptr		1061546	1					
ANR	1061866	ExpressionStatement	DumpCommandTable ( D_FULLDEBUG | D_DAEMONCORE )	1016:1:28591:28635	1061546	22	True				
ANR	1061867	CallExpression	DumpCommandTable ( D_FULLDEBUG | D_DAEMONCORE )		1061546	0					
ANR	1061868	Callee	DumpCommandTable		1061546	0					
ANR	1061869	Identifier	DumpCommandTable		1061546	0					
ANR	1061870	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1061546	1					
ANR	1061871	Argument	D_FULLDEBUG | D_DAEMONCORE		1061546	0					
ANR	1061872	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1061546	0		|			
ANR	1061873	Identifier	D_FULLDEBUG		1061546	0					
ANR	1061874	Identifier	D_DAEMONCORE		1061546	1					
ANR	1061875	ReturnStatement	return ( command ) ;	1018:1:28639:28654	1061546	23	True				
ANR	1061876	Identifier	command		1061546	0					
ANR	1061877	ReturnType	int		1061546	1					
ANR	1061878	Identifier	DaemonCore :: Register_Command		1061546	2					
ANR	1061879	ParameterList	"int command , const char * command_descrip , CommandHandler handler , CommandHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int dprintf_flag , int is_cpp , bool force_authentication , int wait_for_payload"		1061546	3					
ANR	1061880	Parameter	int command	943:33:26257:26267	1061546	0	True				
ANR	1061881	ParameterType	int		1061546	0					
ANR	1061882	Identifier	command		1061546	1					
ANR	1061883	Parameter	const char * command_descrip	943:46:26270:26296	1061546	1	True				
ANR	1061884	ParameterType	const char *		1061546	0					
ANR	1061885	Identifier	command_descrip		1061546	1					
ANR	1061886	Parameter	CommandHandler handler	944:4:26303:26324	1061546	2	True				
ANR	1061887	ParameterType	CommandHandler		1061546	0					
ANR	1061888	Identifier	handler		1061546	1					
ANR	1061889	Parameter	CommandHandlercpp handlercpp	944:28:26327:26354	1061546	3	True				
ANR	1061890	ParameterType	CommandHandlercpp		1061546	0					
ANR	1061891	Identifier	handlercpp		1061546	1					
ANR	1061892	Parameter	const char * handler_descrip	945:4:26361:26387	1061546	4	True				
ANR	1061893	ParameterType	const char *		1061546	0					
ANR	1061894	Identifier	handler_descrip		1061546	1					
ANR	1061895	Parameter	Service * s	945:33:26390:26399	1061546	5	True				
ANR	1061896	ParameterType	Service *		1061546	0					
ANR	1061897	Identifier	s		1061546	1					
ANR	1061898	Parameter	DCpermission perm	945:45:26402:26418	1061546	6	True				
ANR	1061899	ParameterType	DCpermission		1061546	0					
ANR	1061900	Identifier	perm		1061546	1					
ANR	1061901	Parameter	int dprintf_flag	946:4:26425:26440	1061546	7	True				
ANR	1061902	ParameterType	int		1061546	0					
ANR	1061903	Identifier	dprintf_flag		1061546	1					
ANR	1061904	Parameter	int is_cpp	946:22:26443:26452	1061546	8	True				
ANR	1061905	ParameterType	int		1061546	0					
ANR	1061906	Identifier	is_cpp		1061546	1					
ANR	1061907	Parameter	bool force_authentication	946:34:26455:26479	1061546	9	True				
ANR	1061908	ParameterType	bool		1061546	0					
ANR	1061909	Identifier	force_authentication		1061546	1					
ANR	1061910	Parameter	int wait_for_payload	947:4:26486:26505	1061546	10	True				
ANR	1061911	ParameterType	int		1061546	0					
ANR	1061912	Identifier	wait_for_payload		1061546	1					
ANR	1061913	CFGEntryNode	ENTRY		1061546		True				
ANR	1061914	CFGExitNode	EXIT		1061546		True				
ANR	1061915	Symbol	curr_regdataptr		1061546						
ANR	1061916	Symbol	handler		1061546						
ANR	1061917	Symbol	comTable [ i ] . command_descrip		1061546						
ANR	1061918	Symbol	perm		1061546						
ANR	1061919	Symbol	comTable [ j ] . handler		1061546						
ANR	1061920	Symbol	comTable [ i ] . service		1061546						
ANR	1061921	Symbol	comTable [ i ] . data_ptr		1061546						
ANR	1061922	Symbol	comTable [ j ] . handlercpp		1061546						
ANR	1061923	Symbol	command_descrip		1061546						
ANR	1061924	Symbol	comTable [ i ] . is_cpp		1061546						
ANR	1061925	Symbol	comTable [ i ] . num		1061546						
ANR	1061926	Symbol	* comTable		1061546						
ANR	1061927	Symbol	handler_descrip		1061546						
ANR	1061928	Symbol	maxCommand		1061546						
ANR	1061929	Symbol	handlercpp		1061546						
ANR	1061930	Symbol	wait_for_payload		1061546						
ANR	1061931	Symbol	is_cpp		1061546						
ANR	1061932	Symbol	nCommand		1061546						
ANR	1061933	Symbol	comTable [ i ] . perm		1061546						
ANR	1061934	Symbol	NULL		1061546						
ANR	1061935	Symbol	D_DAEMONCORE		1061546						
ANR	1061936	Symbol	comTable [ i ] . wait_for_payload		1061546						
ANR	1061937	Symbol	force_authentication		1061546						
ANR	1061938	Symbol	comTable [ i ] . force_authentication		1061546						
ANR	1061939	Symbol	i		1061546						
ANR	1061940	Symbol	j		1061546						
ANR	1061941	Symbol	D_FULLDEBUG		1061546						
ANR	1061942	Symbol	dprintf_flag		1061546						
ANR	1061943	Symbol	& comTable [ i ] . data_ptr		1061546						
ANR	1061944	Symbol	comTable [ i ] . dprintf_flag		1061546						
ANR	1061945	Symbol	command		1061546						
ANR	1061946	Symbol	s		1061546						
ANR	1061947	Symbol	* i		1061546						
ANR	1061948	Symbol	* j		1061546						
ANR	1061949	Symbol	EMPTY_DESCRIP		1061546						
ANR	1061950	Symbol	comTable [ i ] . handler_descrip		1061546						
ANR	1061951	Symbol	comTable		1061546						
ANR	1061952	Symbol	comTable [ i ] . handler		1061546						
ANR	1061953	Symbol	comTable [ i ] . handlercpp		1061546						
ANR	1061954	Symbol	strdup		1061546						
ANR	1061955	Function	DaemonCore :: Cancel_Command	1021:0:28659:29102							
ANR	1061956	FunctionDef	DaemonCore :: Cancel_Command (int command)		1061955	0					
ANR	1061957	CompoundStatement		1022:0:28705:29102	1061955	0					
ANR	1061958	IdentifierDeclStatement	int i ;	1024:1:28709:28714	1061955	0	True				
ANR	1061959	IdentifierDecl	i		1061955	0					
ANR	1061960	IdentifierDeclType	int		1061955	0					
ANR	1061961	Identifier	i		1061955	1					
ANR	1061962	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		1061955	1					
ANR	1061963	ForInit	i = 0 ;	1025:5:28721:28726	1061955	0	True				
ANR	1061964	AssignmentExpression	i = 0		1061955	0		=			
ANR	1061965	Identifier	i		1061955	0					
ANR	1061966	PrimaryExpression	0		1061955	1					
ANR	1061967	Condition	i < maxCommand	1025:12:28728:28739	1061955	1	True				
ANR	1061968	RelationalExpression	i < maxCommand		1061955	0		<			
ANR	1061969	Identifier	i		1061955	0					
ANR	1061970	Identifier	maxCommand		1061955	1					
ANR	1061971	PostIncDecOperationExpression	i ++	1025:26:28742:28744	1061955	2	True				
ANR	1061972	Identifier	i		1061955	0					
ANR	1061973	IncDec	++		1061955	1					
ANR	1061974	CompoundStatement		4:31:41:41	1061955	3					
ANR	1061975	IfStatement	if ( comTable [ i ] . num == command )		1061955	0					
ANR	1061976	Condition	comTable [ i ] . num == command	1026:6:28755:28780	1061955	0	True				
ANR	1061977	EqualityExpression	comTable [ i ] . num == command		1061955	0		==			
ANR	1061978	MemberAccess	comTable [ i ] . num		1061955	0					
ANR	1061979	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1061980	Identifier	comTable		1061955	0					
ANR	1061981	Identifier	i		1061955	1					
ANR	1061982	Identifier	num		1061955	1					
ANR	1061983	Identifier	command		1061955	1					
ANR	1061984	CompoundStatement		6:2:80:80	1061955	1					
ANR	1061985	ExpressionStatement	comTable [ i ] . num = 0	1028:3:28791:28810	1061955	0	True				
ANR	1061986	AssignmentExpression	comTable [ i ] . num = 0		1061955	0		=			
ANR	1061987	MemberAccess	comTable [ i ] . num		1061955	0					
ANR	1061988	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1061989	Identifier	comTable		1061955	0					
ANR	1061990	Identifier	i		1061955	1					
ANR	1061991	Identifier	num		1061955	1					
ANR	1061992	PrimaryExpression	0		1061955	1					
ANR	1061993	ExpressionStatement	comTable [ i ] . num = 0	1029:3:28815:28834	1061955	1	True				
ANR	1061994	AssignmentExpression	comTable [ i ] . num = 0		1061955	0		=			
ANR	1061995	MemberAccess	comTable [ i ] . num		1061955	0					
ANR	1061996	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1061997	Identifier	comTable		1061955	0					
ANR	1061998	Identifier	i		1061955	1					
ANR	1061999	Identifier	num		1061955	1					
ANR	1062000	PrimaryExpression	0		1061955	1					
ANR	1062001	ExpressionStatement	comTable [ i ] . handler = 0	1030:3:28839:28862	1061955	2	True				
ANR	1062002	AssignmentExpression	comTable [ i ] . handler = 0		1061955	0		=			
ANR	1062003	MemberAccess	comTable [ i ] . handler		1061955	0					
ANR	1062004	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062005	Identifier	comTable		1061955	0					
ANR	1062006	Identifier	i		1061955	1					
ANR	1062007	Identifier	handler		1061955	1					
ANR	1062008	PrimaryExpression	0		1061955	1					
ANR	1062009	ExpressionStatement	comTable [ i ] . handlercpp = 0	1031:3:28867:28893	1061955	3	True				
ANR	1062010	AssignmentExpression	comTable [ i ] . handlercpp = 0		1061955	0		=			
ANR	1062011	MemberAccess	comTable [ i ] . handlercpp		1061955	0					
ANR	1062012	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062013	Identifier	comTable		1061955	0					
ANR	1062014	Identifier	i		1061955	1					
ANR	1062015	Identifier	handlercpp		1061955	1					
ANR	1062016	PrimaryExpression	0		1061955	1					
ANR	1062017	ExpressionStatement	free ( comTable [ i ] . command_descrip )	1032:3:28898:28931	1061955	4	True				
ANR	1062018	CallExpression	free ( comTable [ i ] . command_descrip )		1061955	0					
ANR	1062019	Callee	free		1061955	0					
ANR	1062020	Identifier	free		1061955	0					
ANR	1062021	ArgumentList	comTable [ i ] . command_descrip		1061955	1					
ANR	1062022	Argument	comTable [ i ] . command_descrip		1061955	0					
ANR	1062023	MemberAccess	comTable [ i ] . command_descrip		1061955	0					
ANR	1062024	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062025	Identifier	comTable		1061955	0					
ANR	1062026	Identifier	i		1061955	1					
ANR	1062027	Identifier	command_descrip		1061955	1					
ANR	1062028	ExpressionStatement	comTable [ i ] . command_descrip = NULL	1033:3:28936:28970	1061955	5	True				
ANR	1062029	AssignmentExpression	comTable [ i ] . command_descrip = NULL		1061955	0		=			
ANR	1062030	MemberAccess	comTable [ i ] . command_descrip		1061955	0					
ANR	1062031	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062032	Identifier	comTable		1061955	0					
ANR	1062033	Identifier	i		1061955	1					
ANR	1062034	Identifier	command_descrip		1061955	1					
ANR	1062035	Identifier	NULL		1061955	1					
ANR	1062036	ExpressionStatement	free ( comTable [ i ] . handler_descrip )	1034:3:28975:29008	1061955	6	True				
ANR	1062037	CallExpression	free ( comTable [ i ] . handler_descrip )		1061955	0					
ANR	1062038	Callee	free		1061955	0					
ANR	1062039	Identifier	free		1061955	0					
ANR	1062040	ArgumentList	comTable [ i ] . handler_descrip		1061955	1					
ANR	1062041	Argument	comTable [ i ] . handler_descrip		1061955	0					
ANR	1062042	MemberAccess	comTable [ i ] . handler_descrip		1061955	0					
ANR	1062043	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062044	Identifier	comTable		1061955	0					
ANR	1062045	Identifier	i		1061955	1					
ANR	1062046	Identifier	handler_descrip		1061955	1					
ANR	1062047	ExpressionStatement	comTable [ i ] . handler_descrip = NULL	1035:3:29013:29047	1061955	7	True				
ANR	1062048	AssignmentExpression	comTable [ i ] . handler_descrip = NULL		1061955	0		=			
ANR	1062049	MemberAccess	comTable [ i ] . handler_descrip		1061955	0					
ANR	1062050	ArrayIndexing	comTable [ i ]		1061955	0					
ANR	1062051	Identifier	comTable		1061955	0					
ANR	1062052	Identifier	i		1061955	1					
ANR	1062053	Identifier	handler_descrip		1061955	1					
ANR	1062054	Identifier	NULL		1061955	1					
ANR	1062055	ExpressionStatement	nCommand --	1036:3:29052:29062	1061955	8	True				
ANR	1062056	PostIncDecOperationExpression	nCommand --		1061955	0					
ANR	1062057	Identifier	nCommand		1061955	0					
ANR	1062058	IncDec	--		1061955	1					
ANR	1062059	ReturnStatement	return TRUE ;	1037:3:29067:29078	1061955	9	True				
ANR	1062060	Identifier	TRUE		1061955	0					
ANR	1062061	ReturnStatement	return FALSE ;	1040:1:29088:29100	1061955	2	True				
ANR	1062062	Identifier	FALSE		1061955	0					
ANR	1062063	ReturnType	int		1061955	1					
ANR	1062064	Identifier	DaemonCore :: Cancel_Command		1061955	2					
ANR	1062065	ParameterList	int command		1061955	3					
ANR	1062066	Parameter	int command	1021:32:28691:28701	1061955	0	True				
ANR	1062067	ParameterType	int		1061955	0					
ANR	1062068	Identifier	command		1061955	1					
ANR	1062069	CFGEntryNode	ENTRY		1061955		True				
ANR	1062070	CFGExitNode	EXIT		1061955		True				
ANR	1062071	Symbol	comTable [ i ] . command_descrip		1061955						
ANR	1062072	Symbol	nCommand		1061955						
ANR	1062073	Symbol	NULL		1061955						
ANR	1062074	Symbol	i		1061955						
ANR	1062075	Symbol	TRUE		1061955						
ANR	1062076	Symbol	command		1061955						
ANR	1062077	Symbol	comTable [ i ] . num		1061955						
ANR	1062078	Symbol	* comTable		1061955						
ANR	1062079	Symbol	* i		1061955						
ANR	1062080	Symbol	comTable [ i ] . handler_descrip		1061955						
ANR	1062081	Symbol	comTable		1061955						
ANR	1062082	Symbol	comTable [ i ] . handler		1061955						
ANR	1062083	Symbol	maxCommand		1061955						
ANR	1062084	Symbol	comTable [ i ] . handlercpp		1061955						
ANR	1062085	Symbol	FALSE		1061955						
ANR	1062086	Function	DaemonCore :: InfoCommandPort	1043:0:29105:29338							
ANR	1062087	FunctionDef	DaemonCore :: InfoCommandPort ()		1062086	0					
ANR	1062088	CompoundStatement		1044:0:29139:29338	1062086	0					
ANR	1062089	IfStatement	if ( initial_command_sock == - 1 )		1062086	0					
ANR	1062090	Condition	initial_command_sock == - 1	1045:6:29147:29172	1062086	0	True				
ANR	1062091	EqualityExpression	initial_command_sock == - 1		1062086	0		==			
ANR	1062092	Identifier	initial_command_sock		1062086	0					
ANR	1062093	UnaryOperationExpression	- 1		1062086	1					
ANR	1062094	UnaryOperator	-		1062086	0					
ANR	1062095	PrimaryExpression	1		1062086	1					
ANR	1062096	CompoundStatement		2:35:36:36	1062086	1					
ANR	1062097	ReturnStatement	return - 1 ;	1047:2:29211:29220	1062086	0	True				
ANR	1062098	UnaryOperationExpression	- 1		1062086	0					
ANR	1062099	UnaryOperator	-		1062086	0					
ANR	1062100	PrimaryExpression	1		1062086	1					
ANR	1062101	ReturnStatement	return ( ( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port ( ) ) ;	1051:1:29262:29336	1062086	1	True				
ANR	1062102	CallExpression	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port ( )		1062086	0					
ANR	1062103	Callee	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		1062086	0					
ANR	1062104	PtrMemberAccess	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		1062086	0					
ANR	1062105	CastExpression	( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock )		1062086	0					
ANR	1062106	CastTarget	Sock *		1062086	0					
ANR	1062107	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1062086	1					
ANR	1062108	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1062086	0					
ANR	1062109	UnaryOperationExpression	* sockTable		1062086	0					
ANR	1062110	UnaryOperator	*		1062086	0					
ANR	1062111	Identifier	sockTable		1062086	1					
ANR	1062112	Identifier	initial_command_sock		1062086	1					
ANR	1062113	Identifier	iosock		1062086	1					
ANR	1062114	Identifier	get_port		1062086	1					
ANR	1062115	ArgumentList			1062086	1					
ANR	1062116	ReturnType	int		1062086	1					
ANR	1062117	Identifier	DaemonCore :: InfoCommandPort		1062086	2					
ANR	1062118	ParameterList			1062086	3					
ANR	1062119	CFGEntryNode	ENTRY		1062086		True				
ANR	1062120	CFGExitNode	EXIT		1062086		True				
ANR	1062121	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		1062086						
ANR	1062122	Symbol	( ( Sock * ) ( ( * sockTable ) [ initial_command_sock ] . iosock ) ) -> get_port		1062086						
ANR	1062123	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		1062086						
ANR	1062124	Symbol	* * * sockTable		1062086						
ANR	1062125	Symbol	* sockTable		1062086						
ANR	1062126	Symbol	initial_command_sock		1062086						
ANR	1062127	Symbol	* * initial_command_sock		1062086						
ANR	1062128	Symbol	sockTable		1062086						
ANR	1062129	Symbol	* * sockTable		1062086						
ANR	1062130	Symbol	* initial_command_sock		1062086						
ANR	1062131	Function	DaemonCore :: InfoCommandSinfulString	1057:0:29576:30129							
ANR	1062132	FunctionDef	DaemonCore :: InfoCommandSinfulString (int pid)		1062131	0					
ANR	1062133	CompoundStatement		1058:0:29634:30129	1062131	0					
ANR	1062134	IfStatement	if ( pid == - 1 )		1062131	0					
ANR	1062135	Condition	pid == - 1	1061:6:29759:29767	1062131	0	True				
ANR	1062136	EqualityExpression	pid == - 1		1062131	0		==			
ANR	1062137	Identifier	pid		1062131	0					
ANR	1062138	UnaryOperationExpression	- 1		1062131	1					
ANR	1062139	UnaryOperator	-		1062131	0					
ANR	1062140	PrimaryExpression	1		1062131	1					
ANR	1062141	CompoundStatement		4:18:136:136	1062131	1					
ANR	1062142	ReturnStatement	return InfoCommandSinfulStringMyself ( false ) ;	1062:2:29775:29818	1062131	0	True				
ANR	1062143	CallExpression	InfoCommandSinfulStringMyself ( false )		1062131	0					
ANR	1062144	Callee	InfoCommandSinfulStringMyself		1062131	0					
ANR	1062145	Identifier	InfoCommandSinfulStringMyself		1062131	0					
ANR	1062146	ArgumentList	false		1062131	1					
ANR	1062147	Argument	false		1062131	0					
ANR	1062148	Identifier	false		1062131	0					
ANR	1062149	ElseStatement	else		1062131	0					
ANR	1062150	CompoundStatement		7:2:197:221	1062131	0					
ANR	1062151	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	1064:2:29832:29856	1062131	0	True				
ANR	1062152	IdentifierDecl	* pidinfo = NULL		1062131	0					
ANR	1062153	IdentifierDeclType	PidEntry *		1062131	0					
ANR	1062154	Identifier	pidinfo		1062131	1					
ANR	1062155	AssignmentExpression	* pidinfo = NULL		1062131	2		=			
ANR	1062156	Identifier	NULL		1062131	0					
ANR	1062157	Identifier	NULL		1062131	1					
ANR	1062158	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		1062131	1					
ANR	1062159	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	1065:6:29864:29899	1062131	0	True				
ANR	1062160	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1062131	0		<			
ANR	1062161	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1062131	0					
ANR	1062162	Callee	pidTable -> lookup		1062131	0					
ANR	1062163	PtrMemberAccess	pidTable -> lookup		1062131	0					
ANR	1062164	Identifier	pidTable		1062131	0					
ANR	1062165	Identifier	lookup		1062131	1					
ANR	1062166	ArgumentList	pid		1062131	1					
ANR	1062167	Argument	pid		1062131	0					
ANR	1062168	Identifier	pid		1062131	0					
ANR	1062169	Argument	pidinfo		1062131	1					
ANR	1062170	Identifier	pidinfo		1062131	0					
ANR	1062171	PrimaryExpression	0		1062131	1					
ANR	1062172	CompoundStatement		8:44:267:267	1062131	1					
ANR	1062173	ReturnStatement	return NULL ;	1067:3:29948:29959	1062131	0	True				
ANR	1062174	Identifier	NULL		1062131	0					
ANR	1062175	IfStatement	if ( pidinfo -> sinful_string [ 0 ] == '\\0' )		1062131	2					
ANR	1062176	Condition	pidinfo -> sinful_string [ 0 ] == '\\0'	1069:7:29972:30004	1062131	0	True				
ANR	1062177	EqualityExpression	pidinfo -> sinful_string [ 0 ] == '\\0'		1062131	0		==			
ANR	1062178	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		1062131	0					
ANR	1062179	PtrMemberAccess	pidinfo -> sinful_string		1062131	0					
ANR	1062180	Identifier	pidinfo		1062131	0					
ANR	1062181	Identifier	sinful_string		1062131	1					
ANR	1062182	PrimaryExpression	0		1062131	1					
ANR	1062183	PrimaryExpression	'\\0'		1062131	1					
ANR	1062184	CompoundStatement		12:43:373:373	1062131	1					
ANR	1062185	ReturnStatement	return NULL ;	1071:3:30068:30079	1062131	0	True				
ANR	1062186	Identifier	NULL		1062131	0					
ANR	1062187	ReturnStatement	return pidinfo -> sinful_string . Value ( ) ;	1073:2:30087:30124	1062131	3	True				
ANR	1062188	CallExpression	pidinfo -> sinful_string . Value ( )		1062131	0					
ANR	1062189	Callee	pidinfo -> sinful_string . Value		1062131	0					
ANR	1062190	MemberAccess	pidinfo -> sinful_string . Value		1062131	0					
ANR	1062191	PtrMemberAccess	pidinfo -> sinful_string		1062131	0					
ANR	1062192	Identifier	pidinfo		1062131	0					
ANR	1062193	Identifier	sinful_string		1062131	1					
ANR	1062194	Identifier	Value		1062131	1					
ANR	1062195	ArgumentList			1062131	1					
ANR	1062196	ReturnType	char const *		1062131	1					
ANR	1062197	Identifier	DaemonCore :: InfoCommandSinfulString		1062131	2					
ANR	1062198	ParameterList	int pid		1062131	3					
ANR	1062199	Parameter	int pid	1057:49:29625:29631	1062131	0	True				
ANR	1062200	ParameterType	int		1062131	0					
ANR	1062201	Identifier	pid		1062131	1					
ANR	1062202	CFGEntryNode	ENTRY		1062131		True				
ANR	1062203	CFGExitNode	EXIT		1062131		True				
ANR	1062204	Symbol	pidinfo		1062131						
ANR	1062205	Symbol	pidTable		1062131						
ANR	1062206	Symbol	InfoCommandSinfulStringMyself		1062131						
ANR	1062207	Symbol	* * pidinfo		1062131						
ANR	1062208	Symbol	pidinfo -> sinful_string . Value		1062131						
ANR	1062209	Symbol	NULL		1062131						
ANR	1062210	Symbol	* pidTable		1062131						
ANR	1062211	Symbol	false		1062131						
ANR	1062212	Symbol	pid		1062131						
ANR	1062213	Symbol	pidTable -> lookup		1062131						
ANR	1062214	Symbol	pidinfo -> sinful_string		1062131						
ANR	1062215	Symbol	* pidinfo		1062131						
ANR	1062216	Symbol	* pidinfo -> sinful_string		1062131						
ANR	1062217	Function	DaemonCore :: InfoCommandSinfulStringMyself	1081:0:30374:34499							
ANR	1062218	FunctionDef	DaemonCore :: InfoCommandSinfulStringMyself (bool usePrivateAddress)		1062217	0					
ANR	1062219	CompoundStatement		1083:0:30453:34499	1062217	0					
ANR	1062220	Statement	static	1084:1:30456:30461	1062217	0	True				
ANR	1062221	IdentifierDeclStatement	char * sinful_public = NULL ;	1084:8:30463:30490	1062217	1	True				
ANR	1062222	IdentifierDecl	* sinful_public = NULL		1062217	0					
ANR	1062223	IdentifierDeclType	char *		1062217	0					
ANR	1062224	Identifier	sinful_public		1062217	1					
ANR	1062225	AssignmentExpression	* sinful_public = NULL		1062217	2		=			
ANR	1062226	Identifier	NULL		1062217	0					
ANR	1062227	Identifier	NULL		1062217	1					
ANR	1062228	Statement	static	1085:1:30493:30498	1062217	2	True				
ANR	1062229	IdentifierDeclStatement	char * sinful_private = NULL ;	1085:8:30500:30528	1062217	3	True				
ANR	1062230	IdentifierDecl	* sinful_private = NULL		1062217	0					
ANR	1062231	IdentifierDeclType	char *		1062217	0					
ANR	1062232	Identifier	sinful_private		1062217	1					
ANR	1062233	AssignmentExpression	* sinful_private = NULL		1062217	2		=			
ANR	1062234	Identifier	NULL		1062217	0					
ANR	1062235	Identifier	NULL		1062217	1					
ANR	1062236	Statement	static	1086:1:30531:30536	1062217	4	True				
ANR	1062237	IdentifierDeclStatement	bool initialized_sinful_private = false ;	1086:8:30538:30577	1062217	5	True				
ANR	1062238	IdentifierDecl	initialized_sinful_private = false		1062217	0					
ANR	1062239	IdentifierDeclType	bool		1062217	0					
ANR	1062240	Identifier	initialized_sinful_private		1062217	1					
ANR	1062241	AssignmentExpression	initialized_sinful_private = false		1062217	2		=			
ANR	1062242	Identifier	false		1062217	0					
ANR	1062243	Identifier	false		1062217	1					
ANR	1062244	IfStatement	if ( m_shared_port_endpoint )		1062217	6					
ANR	1062245	Condition	m_shared_port_endpoint	1088:5:30585:30606	1062217	0	True				
ANR	1062246	Identifier	m_shared_port_endpoint		1062217	0					
ANR	1062247	CompoundStatement		10:2:354:417	1062217	1					
ANR	1062248	IdentifierDeclStatement	char const * addr = m_shared_port_endpoint -> GetMyRemoteAddress ( ) ;	1092:2:30808:30871	1062217	0	True				
ANR	1062249	IdentifierDecl	* addr = m_shared_port_endpoint -> GetMyRemoteAddress ( )		1062217	0					
ANR	1062250	IdentifierDeclType	char const *		1062217	0					
ANR	1062251	Identifier	addr		1062217	1					
ANR	1062252	AssignmentExpression	* addr = m_shared_port_endpoint -> GetMyRemoteAddress ( )		1062217	2		=			
ANR	1062253	Identifier	addr		1062217	0					
ANR	1062254	CallExpression	m_shared_port_endpoint -> GetMyRemoteAddress ( )		1062217	1					
ANR	1062255	Callee	m_shared_port_endpoint -> GetMyRemoteAddress		1062217	0					
ANR	1062256	PtrMemberAccess	m_shared_port_endpoint -> GetMyRemoteAddress		1062217	0					
ANR	1062257	Identifier	m_shared_port_endpoint		1062217	0					
ANR	1062258	Identifier	GetMyRemoteAddress		1062217	1					
ANR	1062259	ArgumentList			1062217	1					
ANR	1062260	IfStatement	if ( ! addr && usePrivateAddress )		1062217	1					
ANR	1062261	Condition	! addr && usePrivateAddress	1093:6:30879:30904	1062217	0	True				
ANR	1062262	AndExpression	! addr && usePrivateAddress		1062217	0		&&			
ANR	1062263	UnaryOperationExpression	! addr		1062217	0					
ANR	1062264	UnaryOperator	!		1062217	0					
ANR	1062265	Identifier	addr		1062217	1					
ANR	1062266	Identifier	usePrivateAddress		1062217	1					
ANR	1062267	CompoundStatement		11:35:454:454	1062217	1					
ANR	1062268	ExpressionStatement	addr = m_shared_port_endpoint -> GetMyLocalAddress ( )	1098:3:31135:31185	1062217	0	True				
ANR	1062269	AssignmentExpression	addr = m_shared_port_endpoint -> GetMyLocalAddress ( )		1062217	0		=			
ANR	1062270	Identifier	addr		1062217	0					
ANR	1062271	CallExpression	m_shared_port_endpoint -> GetMyLocalAddress ( )		1062217	1					
ANR	1062272	Callee	m_shared_port_endpoint -> GetMyLocalAddress		1062217	0					
ANR	1062273	PtrMemberAccess	m_shared_port_endpoint -> GetMyLocalAddress		1062217	0					
ANR	1062274	Identifier	m_shared_port_endpoint		1062217	0					
ANR	1062275	Identifier	GetMyLocalAddress		1062217	1					
ANR	1062276	ArgumentList			1062217	1					
ANR	1062277	IfStatement	if ( addr )		1062217	2					
ANR	1062278	Condition	addr	1100:6:31197:31200	1062217	0	True				
ANR	1062279	Identifier	addr		1062217	0					
ANR	1062280	CompoundStatement		18:13:750:750	1062217	1					
ANR	1062281	ReturnStatement	return addr ;	1101:3:31209:31220	1062217	0	True				
ANR	1062282	Identifier	addr		1062217	0					
ANR	1062283	IfStatement	if ( initial_command_sock == - 1 )		1062217	7					
ANR	1062284	Condition	initial_command_sock == - 1	1105:6:31236:31261	1062217	0	True				
ANR	1062285	EqualityExpression	initial_command_sock == - 1		1062217	0		==			
ANR	1062286	Identifier	initial_command_sock		1062217	0					
ANR	1062287	UnaryOperationExpression	- 1		1062217	1					
ANR	1062288	UnaryOperator	-		1062217	0					
ANR	1062289	PrimaryExpression	1		1062217	1					
ANR	1062290	CompoundStatement		23:35:811:811	1062217	1					
ANR	1062291	ReturnStatement	return NULL ;	1107:2:31300:31311	1062217	0	True				
ANR	1062292	Identifier	NULL		1062217	0					
ANR	1062293	IfStatement	if ( sinful_public == NULL || m_dirty_sinful )		1062217	8					
ANR	1062294	Condition	sinful_public == NULL || m_dirty_sinful	1111:5:31381:31419	1062217	0	True				
ANR	1062295	OrExpression	sinful_public == NULL || m_dirty_sinful		1062217	0		||			
ANR	1062296	EqualityExpression	sinful_public == NULL		1062217	0		==			
ANR	1062297	Identifier	sinful_public		1062217	0					
ANR	1062298	Identifier	NULL		1062217	1					
ANR	1062299	Identifier	m_dirty_sinful		1062217	1					
ANR	1062300	CompoundStatement		33:2:1022:1112	1062217	1					
ANR	1062301	ExpressionStatement	free ( sinful_public )	1112:2:31426:31447	1062217	0	True				
ANR	1062302	CallExpression	free ( sinful_public )		1062217	0					
ANR	1062303	Callee	free		1062217	0					
ANR	1062304	Identifier	free		1062217	0					
ANR	1062305	ArgumentList	sinful_public		1062217	1					
ANR	1062306	Argument	sinful_public		1062217	0					
ANR	1062307	Identifier	sinful_public		1062217	0					
ANR	1062308	ExpressionStatement	sinful_public = NULL	1113:2:31451:31471	1062217	1	True				
ANR	1062309	AssignmentExpression	sinful_public = NULL		1062217	0		=			
ANR	1062310	Identifier	sinful_public		1062217	0					
ANR	1062311	Identifier	NULL		1062217	1					
ANR	1062312	IdentifierDeclStatement	char const * addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( ) ;	1115:2:31476:31566	1062217	2	True				
ANR	1062313	IdentifierDecl	* addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		1062217	0					
ANR	1062314	IdentifierDeclType	char const *		1062217	0					
ANR	1062315	Identifier	addr		1062217	1					
ANR	1062316	AssignmentExpression	* addr = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		1062217	2		=			
ANR	1062317	Identifier	addr		1062217	0					
ANR	1062318	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public ( )		1062217	1					
ANR	1062319	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		1062217	0					
ANR	1062320	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		1062217	0					
ANR	1062321	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		1062217	0					
ANR	1062322	CastTarget	Sock *		1062217	0					
ANR	1062323	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1062217	1					
ANR	1062324	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1062217	0					
ANR	1062325	UnaryOperationExpression	* sockTable		1062217	0					
ANR	1062326	UnaryOperator	*		1062217	0					
ANR	1062327	Identifier	sockTable		1062217	1					
ANR	1062328	Identifier	initial_command_sock		1062217	1					
ANR	1062329	Identifier	iosock		1062217	1					
ANR	1062330	Identifier	get_sinful_public		1062217	1					
ANR	1062331	ArgumentList			1062217	1					
ANR	1062332	IfStatement	if ( ! addr )		1062217	3					
ANR	1062333	Condition	! addr	1116:6:31574:31578	1062217	0	True				
ANR	1062334	UnaryOperationExpression	! addr		1062217	0					
ANR	1062335	UnaryOperator	!		1062217	0					
ANR	1062336	Identifier	addr		1062217	1					
ANR	1062337	CompoundStatement		34:14:1128:1128	1062217	1					
ANR	1062338	ExpressionStatement	"EXCEPT ( ""Failed to get public address of command socket!"" )"	1117:3:31587:31644	1062217	0	True				
ANR	1062339	CallExpression	"EXCEPT ( ""Failed to get public address of command socket!"" )"		1062217	0					
ANR	1062340	Callee	EXCEPT		1062217	0					
ANR	1062341	Identifier	EXCEPT		1062217	0					
ANR	1062342	ArgumentList	"""Failed to get public address of command socket!"""		1062217	1					
ANR	1062343	Argument	"""Failed to get public address of command socket!"""		1062217	0					
ANR	1062344	PrimaryExpression	"""Failed to get public address of command socket!"""		1062217	0					
ANR	1062345	ExpressionStatement	sinful_public = strdup ( addr )	1119:2:31652:31682	1062217	4	True				
ANR	1062346	AssignmentExpression	sinful_public = strdup ( addr )		1062217	0		=			
ANR	1062347	Identifier	sinful_public		1062217	0					
ANR	1062348	CallExpression	strdup ( addr )		1062217	1					
ANR	1062349	Callee	strdup		1062217	0					
ANR	1062350	Identifier	strdup		1062217	0					
ANR	1062351	ArgumentList	addr		1062217	1					
ANR	1062352	Argument	addr		1062217	0					
ANR	1062353	Identifier	addr		1062217	0					
ANR	1062354	ExpressionStatement	m_dirty_sinful = true	1120:2:31686:31707	1062217	5	True				
ANR	1062355	AssignmentExpression	m_dirty_sinful = true		1062217	0		=			
ANR	1062356	Identifier	m_dirty_sinful		1062217	0					
ANR	1062357	Identifier	true		1062217	1					
ANR	1062358	IfStatement	if ( ! initialized_sinful_private || m_dirty_sinful )		1062217	9					
ANR	1062359	Condition	! initialized_sinful_private || m_dirty_sinful	1123:5:31718:31762	1062217	0	True				
ANR	1062360	OrExpression	! initialized_sinful_private || m_dirty_sinful		1062217	0		||			
ANR	1062361	UnaryOperationExpression	! initialized_sinful_private		1062217	0					
ANR	1062362	UnaryOperator	!		1062217	0					
ANR	1062363	Identifier	initialized_sinful_private		1062217	1					
ANR	1062364	Identifier	m_dirty_sinful		1062217	1					
ANR	1062365	CompoundStatement		46:2:1400:1409	1062217	1					
ANR	1062366	ExpressionStatement	free ( sinful_private )	1124:2:31769:31790	1062217	0	True				
ANR	1062367	CallExpression	free ( sinful_private )		1062217	0					
ANR	1062368	Callee	free		1062217	0					
ANR	1062369	Identifier	free		1062217	0					
ANR	1062370	ArgumentList	sinful_private		1062217	1					
ANR	1062371	Argument	sinful_private		1062217	0					
ANR	1062372	Identifier	sinful_private		1062217	0					
ANR	1062373	ExpressionStatement	sinful_private = NULL	1125:2:31794:31815	1062217	1	True				
ANR	1062374	AssignmentExpression	sinful_private = NULL		1062217	0		=			
ANR	1062375	Identifier	sinful_private		1062217	0					
ANR	1062376	Identifier	NULL		1062217	1					
ANR	1062377	IdentifierDeclStatement	MyString private_sinful_string ;	1127:2:31820:31850	1062217	2	True				
ANR	1062378	IdentifierDecl	private_sinful_string		1062217	0					
ANR	1062379	IdentifierDeclType	MyString		1062217	0					
ANR	1062380	Identifier	private_sinful_string		1062217	1					
ANR	1062381	IdentifierDeclStatement	char * tmp ;	1128:2:31854:31863	1062217	3	True				
ANR	1062382	IdentifierDecl	* tmp		1062217	0					
ANR	1062383	IdentifierDeclType	char *		1062217	0					
ANR	1062384	Identifier	tmp		1062217	1					
ANR	1062385	IfStatement	"if ( ( tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" ) ) )"		1062217	4					
ANR	1062386	Condition	"tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" )"	1129:6:31871:31912	1062217	0	True				
ANR	1062387	AssignmentExpression	"tmp = param ( ""PRIVATE_NETWORK_INTERFACE"" )"		1062217	0		=			
ANR	1062388	Identifier	tmp		1062217	0					
ANR	1062389	CallExpression	"param ( ""PRIVATE_NETWORK_INTERFACE"" )"		1062217	1					
ANR	1062390	Callee	param		1062217	0					
ANR	1062391	Identifier	param		1062217	0					
ANR	1062392	ArgumentList	"""PRIVATE_NETWORK_INTERFACE"""		1062217	1					
ANR	1062393	Argument	"""PRIVATE_NETWORK_INTERFACE"""		1062217	0					
ANR	1062394	PrimaryExpression	"""PRIVATE_NETWORK_INTERFACE"""		1062217	0					
ANR	1062395	CompoundStatement		50:3:1571:1648	1062217	1					
ANR	1062396	IdentifierDeclStatement	int port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( ) ;	1130:3:31920:31993	1062217	0	True				
ANR	1062397	IdentifierDecl	port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		1062217	0					
ANR	1062398	IdentifierDeclType	int		1062217	0					
ANR	1062399	Identifier	port		1062217	1					
ANR	1062400	AssignmentExpression	port = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		1062217	2		=			
ANR	1062401	Identifier	port		1062217	0					
ANR	1062402	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port ( )		1062217	1					
ANR	1062403	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		1062217	0					
ANR	1062404	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		1062217	0					
ANR	1062405	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		1062217	0					
ANR	1062406	CastTarget	Sock *		1062217	0					
ANR	1062407	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1062217	1					
ANR	1062408	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1062217	0					
ANR	1062409	UnaryOperationExpression	* sockTable		1062217	0					
ANR	1062410	UnaryOperator	*		1062217	0					
ANR	1062411	Identifier	sockTable		1062217	1					
ANR	1062412	Identifier	initial_command_sock		1062217	1					
ANR	1062413	Identifier	iosock		1062217	1					
ANR	1062414	Identifier	get_port		1062217	1					
ANR	1062415	ArgumentList			1062217	1					
ANR	1062416	IdentifierDeclStatement	std :: string private_ip ;	1131:3:31998:32020	1062217	1	True				
ANR	1062417	IdentifierDecl	private_ip		1062217	0					
ANR	1062418	IdentifierDeclType	std :: string		1062217	0					
ANR	1062419	Identifier	private_ip		1062217	1					
ANR	1062420	IdentifierDeclStatement	"bool ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip ) ;"	1132:3:32025:32102	1062217	2	True				
ANR	1062421	IdentifierDecl	"ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		1062217	0					
ANR	1062422	IdentifierDeclType	bool		1062217	0					
ANR	1062423	Identifier	ok		1062217	1					
ANR	1062424	AssignmentExpression	"ok = network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		1062217	2		=			
ANR	1062425	Identifier	ok		1062217	0					
ANR	1062426	CallExpression	"network_interface_to_ip ( ""PRIVATE_NETWORK_INTERFACE"" , tmp , private_ip )"		1062217	1					
ANR	1062427	Callee	network_interface_to_ip		1062217	0					
ANR	1062428	Identifier	network_interface_to_ip		1062217	0					
ANR	1062429	ArgumentList	"""PRIVATE_NETWORK_INTERFACE"""		1062217	1					
ANR	1062430	Argument	"""PRIVATE_NETWORK_INTERFACE"""		1062217	0					
ANR	1062431	PrimaryExpression	"""PRIVATE_NETWORK_INTERFACE"""		1062217	0					
ANR	1062432	Argument	tmp		1062217	1					
ANR	1062433	Identifier	tmp		1062217	0					
ANR	1062434	Argument	private_ip		1062217	2					
ANR	1062435	Identifier	private_ip		1062217	0					
ANR	1062436	IfStatement	if ( ! ok )		1062217	3					
ANR	1062437	Condition	! ok	1133:7:32111:32113	1062217	0	True				
ANR	1062438	UnaryOperationExpression	! ok		1062217	0					
ANR	1062439	UnaryOperator	!		1062217	0					
ANR	1062440	Identifier	ok		1062217	1					
ANR	1062441	CompoundStatement		51:13:1663:1663	1062217	1					
ANR	1062442	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"" , tmp )"	1134:4:32123:32239	1062217	0	True				
ANR	1062443	CallExpression	"dprintf ( D_ALWAYS , ""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"" , tmp )"		1062217	0					
ANR	1062444	Callee	dprintf		1062217	0					
ANR	1062445	Identifier	dprintf		1062217	0					
ANR	1062446	ArgumentList	D_ALWAYS		1062217	1					
ANR	1062447	Argument	D_ALWAYS		1062217	0					
ANR	1062448	Identifier	D_ALWAYS		1062217	0					
ANR	1062449	Argument	"""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"""		1062217	1					
ANR	1062450	PrimaryExpression	"""Failed to determine my private IP address using PRIVATE_NETWORK_INTERFACE=%s\\n"""		1062217	0					
ANR	1062451	Argument	tmp		1062217	2					
ANR	1062452	Identifier	tmp		1062217	0					
ANR	1062453	ElseStatement	else		1062217	0					
ANR	1062454	CompoundStatement		56:8:1800:1800	1062217	0					
ANR	1062455	ExpressionStatement	"private_sinful_string = generate_sinful ( private_ip . c_str ( ) , port )"	1139:4:32260:32325	1062217	0	True				
ANR	1062456	AssignmentExpression	"private_sinful_string = generate_sinful ( private_ip . c_str ( ) , port )"		1062217	0		=			
ANR	1062457	Identifier	private_sinful_string		1062217	0					
ANR	1062458	CallExpression	"generate_sinful ( private_ip . c_str ( ) , port )"		1062217	1					
ANR	1062459	Callee	generate_sinful		1062217	0					
ANR	1062460	Identifier	generate_sinful		1062217	0					
ANR	1062461	ArgumentList	private_ip . c_str ( )		1062217	1					
ANR	1062462	Argument	private_ip . c_str ( )		1062217	0					
ANR	1062463	CallExpression	private_ip . c_str ( )		1062217	0					
ANR	1062464	Callee	private_ip . c_str		1062217	0					
ANR	1062465	MemberAccess	private_ip . c_str		1062217	0					
ANR	1062466	Identifier	private_ip		1062217	0					
ANR	1062467	Identifier	c_str		1062217	1					
ANR	1062468	ArgumentList			1062217	1					
ANR	1062469	Argument	port		1062217	1					
ANR	1062470	Identifier	port		1062217	0					
ANR	1062471	ExpressionStatement	sinful_private = strdup ( private_sinful_string . Value ( ) )	1140:4:32331:32385	1062217	1	True				
ANR	1062472	AssignmentExpression	sinful_private = strdup ( private_sinful_string . Value ( ) )		1062217	0		=			
ANR	1062473	Identifier	sinful_private		1062217	0					
ANR	1062474	CallExpression	strdup ( private_sinful_string . Value ( ) )		1062217	1					
ANR	1062475	Callee	strdup		1062217	0					
ANR	1062476	Identifier	strdup		1062217	0					
ANR	1062477	ArgumentList	private_sinful_string . Value ( )		1062217	1					
ANR	1062478	Argument	private_sinful_string . Value ( )		1062217	0					
ANR	1062479	CallExpression	private_sinful_string . Value ( )		1062217	0					
ANR	1062480	Callee	private_sinful_string . Value		1062217	0					
ANR	1062481	MemberAccess	private_sinful_string . Value		1062217	0					
ANR	1062482	Identifier	private_sinful_string		1062217	0					
ANR	1062483	Identifier	Value		1062217	1					
ANR	1062484	ArgumentList			1062217	1					
ANR	1062485	ExpressionStatement	free ( tmp )	1142:3:32395:32404	1062217	4	True				
ANR	1062486	CallExpression	free ( tmp )		1062217	0					
ANR	1062487	Callee	free		1062217	0					
ANR	1062488	Identifier	free		1062217	0					
ANR	1062489	ArgumentList	tmp		1062217	1					
ANR	1062490	Argument	tmp		1062217	0					
ANR	1062491	Identifier	tmp		1062217	0					
ANR	1062492	ExpressionStatement	free ( m_private_network_name )	1145:2:32413:32441	1062217	5	True				
ANR	1062493	CallExpression	free ( m_private_network_name )		1062217	0					
ANR	1062494	Callee	free		1062217	0					
ANR	1062495	Identifier	free		1062217	0					
ANR	1062496	ArgumentList	m_private_network_name		1062217	1					
ANR	1062497	Argument	m_private_network_name		1062217	0					
ANR	1062498	Identifier	m_private_network_name		1062217	0					
ANR	1062499	ExpressionStatement	m_private_network_name = NULL	1146:2:32445:32474	1062217	6	True				
ANR	1062500	AssignmentExpression	m_private_network_name = NULL		1062217	0		=			
ANR	1062501	Identifier	m_private_network_name		1062217	0					
ANR	1062502	Identifier	NULL		1062217	1					
ANR	1062503	IfStatement	"if ( ( tmp = param ( ""PRIVATE_NETWORK_NAME"" ) ) )"		1062217	7					
ANR	1062504	Condition	"tmp = param ( ""PRIVATE_NETWORK_NAME"" )"	1147:6:32482:32518	1062217	0	True				
ANR	1062505	AssignmentExpression	"tmp = param ( ""PRIVATE_NETWORK_NAME"" )"		1062217	0		=			
ANR	1062506	Identifier	tmp		1062217	0					
ANR	1062507	CallExpression	"param ( ""PRIVATE_NETWORK_NAME"" )"		1062217	1					
ANR	1062508	Callee	param		1062217	0					
ANR	1062509	Identifier	param		1062217	0					
ANR	1062510	ArgumentList	"""PRIVATE_NETWORK_NAME"""		1062217	1					
ANR	1062511	Argument	"""PRIVATE_NETWORK_NAME"""		1062217	0					
ANR	1062512	PrimaryExpression	"""PRIVATE_NETWORK_NAME"""		1062217	0					
ANR	1062513	CompoundStatement		65:45:2067:2067	1062217	1					
ANR	1062514	ExpressionStatement	m_private_network_name = tmp	1148:3:32526:32554	1062217	0	True				
ANR	1062515	AssignmentExpression	m_private_network_name = tmp		1062217	0		=			
ANR	1062516	Identifier	m_private_network_name		1062217	0					
ANR	1062517	Identifier	tmp		1062217	1					
ANR	1062518	IfStatement	"if ( sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) ) )"		1062217	8					
ANR	1062519	Condition	"sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"	1152:6:32584:32661	1062217	0	True				
ANR	1062520	AndExpression	"sinful_private == NULL && ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"		1062217	0		&&			
ANR	1062521	EqualityExpression	sinful_private == NULL		1062217	0		==			
ANR	1062522	Identifier	sinful_private		1062217	0					
ANR	1062523	Identifier	NULL		1062217	1					
ANR	1062524	CallExpression	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"		1062217	1					
ANR	1062525	Callee	param_boolean		1062217	0					
ANR	1062526	Identifier	param_boolean		1062217	0					
ANR	1062527	ArgumentList	"""NET_REMAP_ENABLE"""		1062217	1					
ANR	1062528	Argument	"""NET_REMAP_ENABLE"""		1062217	0					
ANR	1062529	PrimaryExpression	"""NET_REMAP_ENABLE"""		1062217	0					
ANR	1062530	Argument	false		1062217	1					
ANR	1062531	Identifier	false		1062217	0					
ANR	1062532	Argument	false		1062217	2					
ANR	1062533	Identifier	false		1062217	0					
ANR	1062534	CompoundStatement		75:3:2354:2436	1062217	1					
ANR	1062535	IdentifierDeclStatement	struct sockaddr_in addr ;	1155:3:32733:32756	1062217	0	True				
ANR	1062536	IdentifierDecl	addr		1062217	0					
ANR	1062537	IdentifierDeclType	struct sockaddr_in		1062217	0					
ANR	1062538	Identifier	addr		1062217	1					
ANR	1062539	IdentifierDeclStatement	SOCKET_LENGTH_TYPE addr_len = sizeof ( addr ) ;	1156:3:32761:32803	1062217	1	True				
ANR	1062540	IdentifierDecl	addr_len = sizeof ( addr )		1062217	0					
ANR	1062541	IdentifierDeclType	SOCKET_LENGTH_TYPE		1062217	0					
ANR	1062542	Identifier	addr_len		1062217	1					
ANR	1062543	AssignmentExpression	addr_len = sizeof ( addr )		1062217	2		=			
ANR	1062544	Identifier	addr_len		1062217	0					
ANR	1062545	SizeofExpression	sizeof ( addr )		1062217	1					
ANR	1062546	Sizeof	sizeof		1062217	0					
ANR	1062547	SizeofOperand	addr		1062217	1					
ANR	1062548	IdentifierDeclStatement	SOCKET sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( ) ;	1157:3:32808:32890	1062217	2	True				
ANR	1062549	IdentifierDecl	sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		1062217	0					
ANR	1062550	IdentifierDeclType	SOCKET		1062217	0					
ANR	1062551	Identifier	sockd		1062217	1					
ANR	1062552	AssignmentExpression	sockd = ( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		1062217	2		=			
ANR	1062553	Identifier	sockd		1062217	0					
ANR	1062554	CallExpression	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc ( )		1062217	1					
ANR	1062555	Callee	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		1062217	0					
ANR	1062556	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		1062217	0					
ANR	1062557	CastExpression	( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock		1062217	0					
ANR	1062558	CastTarget	Sock *		1062217	0					
ANR	1062559	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1062217	1					
ANR	1062560	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1062217	0					
ANR	1062561	UnaryOperationExpression	* sockTable		1062217	0					
ANR	1062562	UnaryOperator	*		1062217	0					
ANR	1062563	Identifier	sockTable		1062217	1					
ANR	1062564	Identifier	initial_command_sock		1062217	1					
ANR	1062565	Identifier	iosock		1062217	1					
ANR	1062566	Identifier	get_file_desc		1062217	1					
ANR	1062567	ArgumentList			1062217	1					
ANR	1062568	IfStatement	"if ( GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0 )"		1062217	3					
ANR	1062569	Condition	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0"	1158:7:32899:32967	1062217	0	True				
ANR	1062570	RelationalExpression	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len ) >= 0"		1062217	0		>=			
ANR	1062571	CallExpression	"GCB_real_getsockname ( sockd , ( struct sockaddr * ) & addr , & addr_len )"		1062217	0					
ANR	1062572	Callee	GCB_real_getsockname		1062217	0					
ANR	1062573	Identifier	GCB_real_getsockname		1062217	0					
ANR	1062574	ArgumentList	sockd		1062217	1					
ANR	1062575	Argument	sockd		1062217	0					
ANR	1062576	Identifier	sockd		1062217	0					
ANR	1062577	Argument	( struct sockaddr * ) & addr		1062217	1					
ANR	1062578	CastExpression	( struct sockaddr * ) & addr		1062217	0					
ANR	1062579	CastTarget	struct sockaddr *		1062217	0					
ANR	1062580	UnaryOperationExpression	& addr		1062217	1					
ANR	1062581	UnaryOperator	&		1062217	0					
ANR	1062582	Identifier	addr		1062217	1					
ANR	1062583	Argument	& addr_len		1062217	2					
ANR	1062584	UnaryOperationExpression	& addr_len		1062217	0					
ANR	1062585	UnaryOperator	&		1062217	0					
ANR	1062586	Identifier	addr_len		1062217	1					
ANR	1062587	PrimaryExpression	0		1062217	1					
ANR	1062588	CompoundStatement		76:78:2516:2516	1062217	1					
ANR	1062589	ExpressionStatement	sinful_private = strdup ( sin_to_string ( & addr ) )	1159:4:32976:33021	1062217	0	True				
ANR	1062590	AssignmentExpression	sinful_private = strdup ( sin_to_string ( & addr ) )		1062217	0		=			
ANR	1062591	Identifier	sinful_private		1062217	0					
ANR	1062592	CallExpression	strdup ( sin_to_string ( & addr ) )		1062217	1					
ANR	1062593	Callee	strdup		1062217	0					
ANR	1062594	Identifier	strdup		1062217	0					
ANR	1062595	ArgumentList	sin_to_string ( & addr )		1062217	1					
ANR	1062596	Argument	sin_to_string ( & addr )		1062217	0					
ANR	1062597	CallExpression	sin_to_string ( & addr )		1062217	0					
ANR	1062598	Callee	sin_to_string		1062217	0					
ANR	1062599	Identifier	sin_to_string		1062217	0					
ANR	1062600	ArgumentList	& addr		1062217	1					
ANR	1062601	Argument	& addr		1062217	0					
ANR	1062602	UnaryOperationExpression	& addr		1062217	0					
ANR	1062603	UnaryOperator	&		1062217	0					
ANR	1062604	Identifier	addr		1062217	1					
ANR	1062605	ExpressionStatement	initialized_sinful_private = true	1163:2:33060:33093	1062217	9	True				
ANR	1062606	AssignmentExpression	initialized_sinful_private = true		1062217	0		=			
ANR	1062607	Identifier	initialized_sinful_private		1062217	0					
ANR	1062608	Identifier	true		1062217	1					
ANR	1062609	ExpressionStatement	m_dirty_sinful = true	1164:2:33097:33118	1062217	10	True				
ANR	1062610	AssignmentExpression	m_dirty_sinful = true		1062217	0		=			
ANR	1062611	Identifier	m_dirty_sinful		1062217	0					
ANR	1062612	Identifier	true		1062217	1					
ANR	1062613	IfStatement	if ( m_dirty_sinful )		1062217	10					
ANR	1062614	Condition	m_dirty_sinful	1167:5:33129:33142	1062217	0	True				
ANR	1062615	Identifier	m_dirty_sinful		1062217	0					
ANR	1062616	CompoundStatement		106:2:3378:3425	1062217	1					
ANR	1062617	ExpressionStatement	m_dirty_sinful = false	1168:2:33188:33210	1062217	0	True				
ANR	1062618	AssignmentExpression	m_dirty_sinful = false		1062217	0		=			
ANR	1062619	Identifier	m_dirty_sinful		1062217	0					
ANR	1062620	Identifier	false		1062217	1					
ANR	1062621	ExpressionStatement	m_sinful = Sinful ( sinful_public )	1173:2:33343:33375	1062217	1	True				
ANR	1062622	AssignmentExpression	m_sinful = Sinful ( sinful_public )		1062217	0		=			
ANR	1062623	Identifier	m_sinful		1062217	0					
ANR	1062624	CallExpression	Sinful ( sinful_public )		1062217	1					
ANR	1062625	Callee	Sinful		1062217	0					
ANR	1062626	Identifier	Sinful		1062217	0					
ANR	1062627	ArgumentList	sinful_public		1062217	1					
ANR	1062628	Argument	sinful_public		1062217	0					
ANR	1062629	Identifier	sinful_public		1062217	0					
ANR	1062630	IdentifierDeclStatement	bool publish_private_name = false ;	1177:2:33512:33545	1062217	2	True				
ANR	1062631	IdentifierDecl	publish_private_name = false		1062217	0					
ANR	1062632	IdentifierDeclType	bool		1062217	0					
ANR	1062633	Identifier	publish_private_name		1062217	1					
ANR	1062634	AssignmentExpression	publish_private_name = false		1062217	2		=			
ANR	1062635	Identifier	false		1062217	0					
ANR	1062636	Identifier	false		1062217	1					
ANR	1062637	IdentifierDeclStatement	char const * private_name = privateNetworkName ( ) ;	1179:2:33550:33597	1062217	3	True				
ANR	1062638	IdentifierDecl	* private_name = privateNetworkName ( )		1062217	0					
ANR	1062639	IdentifierDeclType	char const *		1062217	0					
ANR	1062640	Identifier	private_name		1062217	1					
ANR	1062641	AssignmentExpression	* private_name = privateNetworkName ( )		1062217	2		=			
ANR	1062642	Identifier	private_name		1062217	0					
ANR	1062643	CallExpression	privateNetworkName ( )		1062217	1					
ANR	1062644	Callee	privateNetworkName		1062217	0					
ANR	1062645	Identifier	privateNetworkName		1062217	0					
ANR	1062646	ArgumentList			1062217	1					
ANR	1062647	IfStatement	if ( private_name )		1062217	4					
ANR	1062648	Condition	private_name	1180:6:33605:33616	1062217	0	True				
ANR	1062649	Identifier	private_name		1062217	0					
ANR	1062650	CompoundStatement		98:21:3166:3166	1062217	1					
ANR	1062651	IfStatement	"if ( sinful_private && strcmp ( sinful_public , sinful_private ) )"		1062217	0					
ANR	1062652	Condition	"sinful_private && strcmp ( sinful_public , sinful_private )"	1181:7:33629:33682	1062217	0	True				
ANR	1062653	AndExpression	"sinful_private && strcmp ( sinful_public , sinful_private )"		1062217	0		&&			
ANR	1062654	Identifier	sinful_private		1062217	0					
ANR	1062655	CallExpression	"strcmp ( sinful_public , sinful_private )"		1062217	1					
ANR	1062656	Callee	strcmp		1062217	0					
ANR	1062657	Identifier	strcmp		1062217	0					
ANR	1062658	ArgumentList	sinful_public		1062217	1					
ANR	1062659	Argument	sinful_public		1062217	0					
ANR	1062660	Identifier	sinful_public		1062217	0					
ANR	1062661	Argument	sinful_private		1062217	1					
ANR	1062662	Identifier	sinful_private		1062217	0					
ANR	1062663	CompoundStatement		99:64:3232:3232	1062217	1					
ANR	1062664	ExpressionStatement	m_sinful . setPrivateAddr ( sinful_private )	1182:4:33692:33731	1062217	0	True				
ANR	1062665	CallExpression	m_sinful . setPrivateAddr ( sinful_private )		1062217	0					
ANR	1062666	Callee	m_sinful . setPrivateAddr		1062217	0					
ANR	1062667	MemberAccess	m_sinful . setPrivateAddr		1062217	0					
ANR	1062668	Identifier	m_sinful		1062217	0					
ANR	1062669	Identifier	setPrivateAddr		1062217	1					
ANR	1062670	ArgumentList	sinful_private		1062217	1					
ANR	1062671	Argument	sinful_private		1062217	0					
ANR	1062672	Identifier	sinful_private		1062217	0					
ANR	1062673	ExpressionStatement	publish_private_name = true	1183:4:33737:33764	1062217	1	True				
ANR	1062674	AssignmentExpression	publish_private_name = true		1062217	0		=			
ANR	1062675	Identifier	publish_private_name		1062217	0					
ANR	1062676	Identifier	true		1062217	1					
ANR	1062677	IdentifierDeclStatement	"char * forwarding = param ( ""TCP_FORWARDING_HOST"" ) ;"	1188:2:33832:33879	1062217	5	True				
ANR	1062678	IdentifierDecl	"* forwarding = param ( ""TCP_FORWARDING_HOST"" )"		1062217	0					
ANR	1062679	IdentifierDeclType	char *		1062217	0					
ANR	1062680	Identifier	forwarding		1062217	1					
ANR	1062681	AssignmentExpression	"* forwarding = param ( ""TCP_FORWARDING_HOST"" )"		1062217	2		=			
ANR	1062682	Identifier	forwarding		1062217	0					
ANR	1062683	CallExpression	"param ( ""TCP_FORWARDING_HOST"" )"		1062217	1					
ANR	1062684	Callee	param		1062217	0					
ANR	1062685	Identifier	param		1062217	0					
ANR	1062686	ArgumentList	"""TCP_FORWARDING_HOST"""		1062217	1					
ANR	1062687	Argument	"""TCP_FORWARDING_HOST"""		1062217	0					
ANR	1062688	PrimaryExpression	"""TCP_FORWARDING_HOST"""		1062217	0					
ANR	1062689	IfStatement	if ( forwarding )		1062217	6					
ANR	1062690	Condition	forwarding	1189:6:33887:33896	1062217	0	True				
ANR	1062691	Identifier	forwarding		1062217	0					
ANR	1062692	CompoundStatement		107:19:3446:3446	1062217	1					
ANR	1062693	ExpressionStatement	free ( forwarding )	1190:3:33905:33923	1062217	0	True				
ANR	1062694	CallExpression	free ( forwarding )		1062217	0					
ANR	1062695	Callee	free		1062217	0					
ANR	1062696	Identifier	free		1062217	0					
ANR	1062697	ArgumentList	forwarding		1062217	1					
ANR	1062698	Argument	forwarding		1062217	0					
ANR	1062699	Identifier	forwarding		1062217	0					
ANR	1062700	ExpressionStatement	m_sinful . setNoUDP ( true )	1191:3:33928:33951	1062217	1	True				
ANR	1062701	CallExpression	m_sinful . setNoUDP ( true )		1062217	0					
ANR	1062702	Callee	m_sinful . setNoUDP		1062217	0					
ANR	1062703	MemberAccess	m_sinful . setNoUDP		1062217	0					
ANR	1062704	Identifier	m_sinful		1062217	0					
ANR	1062705	Identifier	setNoUDP		1062217	1					
ANR	1062706	ArgumentList	true		1062217	1					
ANR	1062707	Argument	true		1062217	0					
ANR	1062708	Identifier	true		1062217	0					
ANR	1062709	IfStatement	if ( ! dc_ssock )		1062217	7					
ANR	1062710	Condition	! dc_ssock	1193:6:33963:33971	1062217	0	True				
ANR	1062711	UnaryOperationExpression	! dc_ssock		1062217	0					
ANR	1062712	UnaryOperator	!		1062217	0					
ANR	1062713	Identifier	dc_ssock		1062217	1					
ANR	1062714	CompoundStatement		111:18:3521:3521	1062217	1					
ANR	1062715	ExpressionStatement	m_sinful . setNoUDP ( true )	1194:3:33980:34003	1062217	0	True				
ANR	1062716	CallExpression	m_sinful . setNoUDP ( true )		1062217	0					
ANR	1062717	Callee	m_sinful . setNoUDP		1062217	0					
ANR	1062718	MemberAccess	m_sinful . setNoUDP		1062217	0					
ANR	1062719	Identifier	m_sinful		1062217	0					
ANR	1062720	Identifier	setNoUDP		1062217	1					
ANR	1062721	ArgumentList	true		1062217	1					
ANR	1062722	Argument	true		1062217	0					
ANR	1062723	Identifier	true		1062217	0					
ANR	1062724	IfStatement	if ( m_ccb_listeners )		1062217	8					
ANR	1062725	Condition	m_ccb_listeners	1197:6:34016:34030	1062217	0	True				
ANR	1062726	Identifier	m_ccb_listeners		1062217	0					
ANR	1062727	CompoundStatement		116:3:3585:3605	1062217	1					
ANR	1062728	IdentifierDeclStatement	MyString ccb_contact ;	1198:3:34039:34059	1062217	0	True				
ANR	1062729	IdentifierDecl	ccb_contact		1062217	0					
ANR	1062730	IdentifierDeclType	MyString		1062217	0					
ANR	1062731	Identifier	ccb_contact		1062217	1					
ANR	1062732	ExpressionStatement	m_ccb_listeners -> GetCCBContactString ( ccb_contact )	1199:3:34064:34113	1062217	1	True				
ANR	1062733	CallExpression	m_ccb_listeners -> GetCCBContactString ( ccb_contact )		1062217	0					
ANR	1062734	Callee	m_ccb_listeners -> GetCCBContactString		1062217	0					
ANR	1062735	PtrMemberAccess	m_ccb_listeners -> GetCCBContactString		1062217	0					
ANR	1062736	Identifier	m_ccb_listeners		1062217	0					
ANR	1062737	Identifier	GetCCBContactString		1062217	1					
ANR	1062738	ArgumentList	ccb_contact		1062217	1					
ANR	1062739	Argument	ccb_contact		1062217	0					
ANR	1062740	Identifier	ccb_contact		1062217	0					
ANR	1062741	IfStatement	if ( ! ccb_contact . IsEmpty ( ) )		1062217	2					
ANR	1062742	Condition	! ccb_contact . IsEmpty ( )	1200:7:34122:34143	1062217	0	True				
ANR	1062743	UnaryOperationExpression	! ccb_contact . IsEmpty ( )		1062217	0					
ANR	1062744	UnaryOperator	!		1062217	0					
ANR	1062745	CallExpression	ccb_contact . IsEmpty ( )		1062217	1					
ANR	1062746	Callee	ccb_contact . IsEmpty		1062217	0					
ANR	1062747	MemberAccess	ccb_contact . IsEmpty		1062217	0					
ANR	1062748	Identifier	ccb_contact		1062217	0					
ANR	1062749	Identifier	IsEmpty		1062217	1					
ANR	1062750	ArgumentList			1062217	1					
ANR	1062751	CompoundStatement		118:32:3693:3693	1062217	1					
ANR	1062752	ExpressionStatement	m_sinful . setCCBContact ( ccb_contact . Value ( ) )	1201:4:34153:34196	1062217	0	True				
ANR	1062753	CallExpression	m_sinful . setCCBContact ( ccb_contact . Value ( ) )		1062217	0					
ANR	1062754	Callee	m_sinful . setCCBContact		1062217	0					
ANR	1062755	MemberAccess	m_sinful . setCCBContact		1062217	0					
ANR	1062756	Identifier	m_sinful		1062217	0					
ANR	1062757	Identifier	setCCBContact		1062217	1					
ANR	1062758	ArgumentList	ccb_contact . Value ( )		1062217	1					
ANR	1062759	Argument	ccb_contact . Value ( )		1062217	0					
ANR	1062760	CallExpression	ccb_contact . Value ( )		1062217	0					
ANR	1062761	Callee	ccb_contact . Value		1062217	0					
ANR	1062762	MemberAccess	ccb_contact . Value		1062217	0					
ANR	1062763	Identifier	ccb_contact		1062217	0					
ANR	1062764	Identifier	Value		1062217	1					
ANR	1062765	ArgumentList			1062217	1					
ANR	1062766	ExpressionStatement	publish_private_name = true	1202:4:34202:34229	1062217	1	True				
ANR	1062767	AssignmentExpression	publish_private_name = true		1062217	0		=			
ANR	1062768	Identifier	publish_private_name		1062217	0					
ANR	1062769	Identifier	true		1062217	1					
ANR	1062770	IfStatement	if ( private_name && publish_private_name )		1062217	9					
ANR	1062771	Condition	private_name && publish_private_name	1206:6:34247:34282	1062217	0	True				
ANR	1062772	AndExpression	private_name && publish_private_name		1062217	0		&&			
ANR	1062773	Identifier	private_name		1062217	0					
ANR	1062774	Identifier	publish_private_name		1062217	1					
ANR	1062775	CompoundStatement		124:45:3832:3832	1062217	1					
ANR	1062776	ExpressionStatement	m_sinful . setPrivateNetworkName ( private_name )	1207:3:34291:34335	1062217	0	True				
ANR	1062777	CallExpression	m_sinful . setPrivateNetworkName ( private_name )		1062217	0					
ANR	1062778	Callee	m_sinful . setPrivateNetworkName		1062217	0					
ANR	1062779	MemberAccess	m_sinful . setPrivateNetworkName		1062217	0					
ANR	1062780	Identifier	m_sinful		1062217	0					
ANR	1062781	Identifier	setPrivateNetworkName		1062217	1					
ANR	1062782	ArgumentList	private_name		1062217	1					
ANR	1062783	Argument	private_name		1062217	0					
ANR	1062784	Identifier	private_name		1062217	0					
ANR	1062785	IfStatement	if ( usePrivateAddress )		1062217	11					
ANR	1062786	Condition	usePrivateAddress	1211:5:34350:34366	1062217	0	True				
ANR	1062787	Identifier	usePrivateAddress		1062217	0					
ANR	1062788	CompoundStatement		129:25:3916:3916	1062217	1					
ANR	1062789	IfStatement	if ( sinful_private )		1062217	0					
ANR	1062790	Condition	sinful_private	1212:6:34378:34391	1062217	0	True				
ANR	1062791	Identifier	sinful_private		1062217	0					
ANR	1062792	CompoundStatement		130:23:3941:3941	1062217	1					
ANR	1062793	ReturnStatement	return sinful_private ;	1213:3:34400:34421	1062217	0	True				
ANR	1062794	Identifier	sinful_private		1062217	0					
ANR	1062795	ElseStatement	else		1062217	0					
ANR	1062796	CompoundStatement		133:7:3980:3980	1062217	0					
ANR	1062797	ReturnStatement	return sinful_public ;	1216:3:34439:34459	1062217	0	True				
ANR	1062798	Identifier	sinful_public		1062217	0					
ANR	1062799	ReturnStatement	return m_sinful . getSinful ( ) ;	1220:1:34470:34497	1062217	12	True				
ANR	1062800	CallExpression	m_sinful . getSinful ( )		1062217	0					
ANR	1062801	Callee	m_sinful . getSinful		1062217	0					
ANR	1062802	MemberAccess	m_sinful . getSinful		1062217	0					
ANR	1062803	Identifier	m_sinful		1062217	0					
ANR	1062804	Identifier	getSinful		1062217	1					
ANR	1062805	ArgumentList			1062217	1					
ANR	1062806	ReturnType	char const *		1062217	1					
ANR	1062807	Identifier	DaemonCore :: InfoCommandSinfulStringMyself		1062217	2					
ANR	1062808	ParameterList	bool usePrivateAddress		1062217	3					
ANR	1062809	Parameter	bool usePrivateAddress	1082:42:30429:30450	1062217	0	True				
ANR	1062810	ParameterType	bool		1062217	0					
ANR	1062811	Identifier	usePrivateAddress		1062217	1					
ANR	1062812	CFGEntryNode	ENTRY		1062217		True				
ANR	1062813	CFGExitNode	EXIT		1062217		True				
ANR	1062814	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_sinful_public		1062217						
ANR	1062815	Symbol	publish_private_name		1062217						
ANR	1062816	Symbol	sin_to_string		1062217						
ANR	1062817	Symbol	private_sinful_string		1062217						
ANR	1062818	Symbol	* * initial_command_sock		1062217						
ANR	1062819	Symbol	tmp		1062217						
ANR	1062820	Symbol	addr_len		1062217						
ANR	1062821	Symbol	m_sinful . getSinful		1062217						
ANR	1062822	Symbol	strcmp		1062217						
ANR	1062823	Symbol	NULL		1062217						
ANR	1062824	Symbol	sockTable		1062217						
ANR	1062825	Symbol	sockd		1062217						
ANR	1062826	Symbol	param_boolean		1062217						
ANR	1062827	Symbol	network_interface_to_ip		1062217						
ANR	1062828	Symbol	m_ccb_listeners		1062217						
ANR	1062829	Symbol	* m_shared_port_endpoint		1062217						
ANR	1062830	Symbol	ccb_contact		1062217						
ANR	1062831	Symbol	port		1062217						
ANR	1062832	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_port		1062217						
ANR	1062833	Symbol	true		1062217						
ANR	1062834	Symbol	* initial_command_sock		1062217						
ANR	1062835	Symbol	private_ip . c_str		1062217						
ANR	1062836	Symbol	m_sinful		1062217						
ANR	1062837	Symbol	ccb_contact . Value		1062217						
ANR	1062838	Symbol	initialized_sinful_private		1062217						
ANR	1062839	Symbol	m_dirty_sinful		1062217						
ANR	1062840	Symbol	* * sockTable		1062217						
ANR	1062841	Symbol	forwarding		1062217						
ANR	1062842	Symbol	& addr_len		1062217						
ANR	1062843	Symbol	private_ip		1062217						
ANR	1062844	Symbol	m_shared_port_endpoint -> GetMyRemoteAddress		1062217						
ANR	1062845	Symbol	dc_ssock		1062217						
ANR	1062846	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		1062217						
ANR	1062847	Symbol	param		1062217						
ANR	1062848	Symbol	private_sinful_string . Value		1062217						
ANR	1062849	Symbol	m_shared_port_endpoint -> GetMyLocalAddress		1062217						
ANR	1062850	Symbol	Sinful		1062217						
ANR	1062851	Symbol	addr		1062217						
ANR	1062852	Symbol	ok		1062217						
ANR	1062853	Symbol	GCB_real_getsockname		1062217						
ANR	1062854	Symbol	private_name		1062217						
ANR	1062855	Symbol	m_private_network_name		1062217						
ANR	1062856	Symbol	& addr		1062217						
ANR	1062857	Symbol	* * * sockTable		1062217						
ANR	1062858	Symbol	false		1062217						
ANR	1062859	Symbol	D_ALWAYS		1062217						
ANR	1062860	Symbol	sinful_public		1062217						
ANR	1062861	Symbol	( ( Sock * ) ( * sockTable ) [ initial_command_sock ] . iosock ) -> get_file_desc		1062217						
ANR	1062862	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		1062217						
ANR	1062863	Symbol	* sockTable		1062217						
ANR	1062864	Symbol	m_shared_port_endpoint		1062217						
ANR	1062865	Symbol	initial_command_sock		1062217						
ANR	1062866	Symbol	generate_sinful		1062217						
ANR	1062867	Symbol	ccb_contact . IsEmpty		1062217						
ANR	1062868	Symbol	sinful_private		1062217						
ANR	1062869	Symbol	strdup		1062217						
ANR	1062870	Symbol	usePrivateAddress		1062217						
ANR	1062871	Symbol	privateNetworkName		1062217						
ANR	1062872	Function	DaemonCore :: daemonContactInfoChanged	1223:0:34502:34592							
ANR	1062873	FunctionDef	DaemonCore :: daemonContactInfoChanged ()		1062872	0					
ANR	1062874	CompoundStatement		1225:0:34546:34592	1062872	0					
ANR	1062875	ExpressionStatement	m_dirty_sinful = true	1226:1:34549:34570	1062872	0	True				
ANR	1062876	AssignmentExpression	m_dirty_sinful = true		1062872	0		=			
ANR	1062877	Identifier	m_dirty_sinful		1062872	0					
ANR	1062878	Identifier	true		1062872	1					
ANR	1062879	ExpressionStatement	drop_addr_file ( )	1228:1:34574:34590	1062872	1	True				
ANR	1062880	CallExpression	drop_addr_file ( )		1062872	0					
ANR	1062881	Callee	drop_addr_file		1062872	0					
ANR	1062882	Identifier	drop_addr_file		1062872	0					
ANR	1062883	ArgumentList			1062872	1					
ANR	1062884	ReturnType	void		1062872	1					
ANR	1062885	Identifier	DaemonCore :: daemonContactInfoChanged		1062872	2					
ANR	1062886	ParameterList			1062872	3					
ANR	1062887	CFGEntryNode	ENTRY		1062872		True				
ANR	1062888	CFGExitNode	EXIT		1062872		True				
ANR	1062889	Symbol	true		1062872						
ANR	1062890	Symbol	m_dirty_sinful		1062872						
ANR	1062891	Function	DaemonCore :: publicNetworkIpAddr	1231:0:34595:34707							
ANR	1062892	FunctionDef	DaemonCore :: publicNetworkIpAddr ()		1062891	0					
ANR	1062893	CompoundStatement		1232:38:34645:34707	1062891	0					
ANR	1062894	ReturnStatement	return ( const char * ) InfoCommandSinfulStringMyself ( false ) ;	1233:1:34648:34705	1062891	0	True				
ANR	1062895	CastExpression	( const char * ) InfoCommandSinfulStringMyself ( false )		1062891	0					
ANR	1062896	CastTarget	const char *		1062891	0					
ANR	1062897	CallExpression	InfoCommandSinfulStringMyself ( false )		1062891	1					
ANR	1062898	Callee	InfoCommandSinfulStringMyself		1062891	0					
ANR	1062899	Identifier	InfoCommandSinfulStringMyself		1062891	0					
ANR	1062900	ArgumentList	false		1062891	1					
ANR	1062901	Argument	false		1062891	0					
ANR	1062902	Identifier	false		1062891	0					
ANR	1062903	ReturnType	const char *		1062891	1					
ANR	1062904	Identifier	DaemonCore :: publicNetworkIpAddr		1062891	2					
ANR	1062905	ParameterList			1062891	3					
ANR	1062906	CFGEntryNode	ENTRY		1062891		True				
ANR	1062907	CFGExitNode	EXIT		1062891		True				
ANR	1062908	Symbol	InfoCommandSinfulStringMyself		1062891						
ANR	1062909	Symbol	false		1062891						
ANR	1062910	Function	DaemonCore :: privateNetworkIpAddr	1237:0:34711:34823							
ANR	1062911	FunctionDef	DaemonCore :: privateNetworkIpAddr ()		1062910	0					
ANR	1062912	CompoundStatement		1238:39:34762:34823	1062910	0					
ANR	1062913	ReturnStatement	return ( const char * ) InfoCommandSinfulStringMyself ( true ) ;	1239:1:34765:34821	1062910	0	True				
ANR	1062914	CastExpression	( const char * ) InfoCommandSinfulStringMyself ( true )		1062910	0					
ANR	1062915	CastTarget	const char *		1062910	0					
ANR	1062916	CallExpression	InfoCommandSinfulStringMyself ( true )		1062910	1					
ANR	1062917	Callee	InfoCommandSinfulStringMyself		1062910	0					
ANR	1062918	Identifier	InfoCommandSinfulStringMyself		1062910	0					
ANR	1062919	ArgumentList	true		1062910	1					
ANR	1062920	Argument	true		1062910	0					
ANR	1062921	Identifier	true		1062910	0					
ANR	1062922	ReturnType	const char *		1062910	1					
ANR	1062923	Identifier	DaemonCore :: privateNetworkIpAddr		1062910	2					
ANR	1062924	ParameterList			1062910	3					
ANR	1062925	CFGEntryNode	ENTRY		1062910		True				
ANR	1062926	CFGExitNode	EXIT		1062910		True				
ANR	1062927	Symbol	InfoCommandSinfulStringMyself		1062910						
ANR	1062928	Symbol	true		1062910						
ANR	1062929	Function	DaemonCore :: privateNetworkName	1243:0:34827:34923							
ANR	1062930	FunctionDef	DaemonCore :: privateNetworkName ()		1062929	0					
ANR	1062931	CompoundStatement		1244:37:34876:34923	1062929	0					
ANR	1062932	ReturnStatement	return ( const char * ) m_private_network_name ;	1245:1:34879:34921	1062929	0	True				
ANR	1062933	CastExpression	( const char * ) m_private_network_name		1062929	0					
ANR	1062934	CastTarget	const char *		1062929	0					
ANR	1062935	Identifier	m_private_network_name		1062929	1					
ANR	1062936	ReturnType	const char *		1062929	1					
ANR	1062937	Identifier	DaemonCore :: privateNetworkName		1062929	2					
ANR	1062938	ParameterList			1062929	3					
ANR	1062939	CFGEntryNode	ENTRY		1062929		True				
ANR	1062940	CFGExitNode	EXIT		1062929		True				
ANR	1062941	Symbol	m_private_network_name		1062929						
ANR	1062942	Function	DaemonCore :: InfoEnvironmentID	1250:0:35067:35824							
ANR	1062943	FunctionDef	"DaemonCore :: InfoEnvironmentID (PidEnvID * penvid , int pid)"		1062942	0					
ANR	1062944	CompoundStatement		1252:0:35134:35824	1062942	0					
ANR	1062945	IfStatement	if ( penvid == NULL )		1062942	0					
ANR	1062946	Condition	penvid == NULL	1253:5:35141:35154	1062942	0	True				
ANR	1062947	EqualityExpression	penvid == NULL		1062942	0		==			
ANR	1062948	Identifier	penvid		1062942	0					
ANR	1062949	Identifier	NULL		1062942	1					
ANR	1062950	CompoundStatement		2:21:22:22	1062942	1					
ANR	1062951	ReturnStatement	return NULL ;	1254:2:35161:35172	1062942	0	True				
ANR	1062952	Identifier	NULL		1062942	0					
ANR	1062953	ExpressionStatement	pidenvid_init ( penvid )	1258:1:35202:35223	1062942	1	True				
ANR	1062954	CallExpression	pidenvid_init ( penvid )		1062942	0					
ANR	1062955	Callee	pidenvid_init		1062942	0					
ANR	1062956	Identifier	pidenvid_init		1062942	0					
ANR	1062957	ArgumentList	penvid		1062942	1					
ANR	1062958	Argument	penvid		1062942	0					
ANR	1062959	Identifier	penvid		1062942	0					
ANR	1062960	IfStatement	if ( pid == - 1 )		1062942	2					
ANR	1062961	Condition	pid == - 1	1261:6:35274:35282	1062942	0	True				
ANR	1062962	EqualityExpression	pid == - 1		1062942	0		==			
ANR	1062963	Identifier	pid		1062942	0					
ANR	1062964	UnaryOperationExpression	- 1		1062942	1					
ANR	1062965	UnaryOperator	-		1062942	0					
ANR	1062966	PrimaryExpression	1		1062942	1					
ANR	1062967	CompoundStatement		10:18:151:151	1062942	1					
ANR	1062968	IfStatement	"if ( pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED )"		1062942	0					
ANR	1062969	Condition	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"	1263:6:35295:35368	1062942	0	True				
ANR	1062970	EqualityExpression	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"		1062942	0		==			
ANR	1062971	CallExpression	"pidenvid_filter_and_insert ( penvid , GetEnviron ( ) )"		1062942	0					
ANR	1062972	Callee	pidenvid_filter_and_insert		1062942	0					
ANR	1062973	Identifier	pidenvid_filter_and_insert		1062942	0					
ANR	1062974	ArgumentList	penvid		1062942	1					
ANR	1062975	Argument	penvid		1062942	0					
ANR	1062976	Identifier	penvid		1062942	0					
ANR	1062977	Argument	GetEnviron ( )		1062942	1					
ANR	1062978	CallExpression	GetEnviron ( )		1062942	0					
ANR	1062979	Callee	GetEnviron		1062942	0					
ANR	1062980	Identifier	GetEnviron		1062942	0					
ANR	1062981	ArgumentList			1062942	1					
ANR	1062982	Identifier	PIDENVID_OVERSIZED		1062942	1					
ANR	1062983	CompoundStatement		14:2:238:238	1062942	1					
ANR	1062984	Statement	EXCEPT	1266:3:35378:35383	1062942	0	True				
ANR	1062985	Statement	(	1266:9:35384:35384	1062942	1	True				
ANR	1062986	Statement	"""DaemonCore::InfoEnvironmentID: Programmer error. """	1266:11:35386:35436	1062942	2	True				
ANR	1062987	Statement	"""Tried to overstuff a PidEntryID array."""	1267:4:35442:35481	1062942	3	True				
ANR	1062988	Statement	)	1267:45:35483:35483	1062942	4	True				
ANR	1062989	ExpressionStatement		1267:46:35484:35484	1062942	5	True				
ANR	1062990	ElseStatement	else		1062942	0					
ANR	1062991	CompoundStatement		22:2:438:462	1062942	0					
ANR	1062992	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	1273:2:35573:35597	1062942	0	True				
ANR	1062993	IdentifierDecl	* pidinfo = NULL		1062942	0					
ANR	1062994	IdentifierDeclType	PidEntry *		1062942	0					
ANR	1062995	Identifier	pidinfo		1062942	1					
ANR	1062996	AssignmentExpression	* pidinfo = NULL		1062942	2		=			
ANR	1062997	Identifier	NULL		1062942	0					
ANR	1062998	Identifier	NULL		1062942	1					
ANR	1062999	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		1062942	1					
ANR	1063000	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	1274:6:35605:35640	1062942	0	True				
ANR	1063001	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1062942	0		<			
ANR	1063002	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1062942	0					
ANR	1063003	Callee	pidTable -> lookup		1062942	0					
ANR	1063004	PtrMemberAccess	pidTable -> lookup		1062942	0					
ANR	1063005	Identifier	pidTable		1062942	0					
ANR	1063006	Identifier	lookup		1062942	1					
ANR	1063007	ArgumentList	pid		1062942	1					
ANR	1063008	Argument	pid		1062942	0					
ANR	1063009	Identifier	pid		1062942	0					
ANR	1063010	Argument	pidinfo		1062942	1					
ANR	1063011	Identifier	pidinfo		1062942	0					
ANR	1063012	PrimaryExpression	0		1062942	1					
ANR	1063013	CompoundStatement		23:44:508:508	1062942	1					
ANR	1063014	ReturnStatement	return NULL ;	1276:3:35689:35700	1062942	0	True				
ANR	1063015	Identifier	NULL		1062942	0					
ANR	1063016	ExpressionStatement	"pidenvid_copy ( penvid , & pidinfo -> penvid )"	1280:2:35763:35802	1062942	2	True				
ANR	1063017	CallExpression	"pidenvid_copy ( penvid , & pidinfo -> penvid )"		1062942	0					
ANR	1063018	Callee	pidenvid_copy		1062942	0					
ANR	1063019	Identifier	pidenvid_copy		1062942	0					
ANR	1063020	ArgumentList	penvid		1062942	1					
ANR	1063021	Argument	penvid		1062942	0					
ANR	1063022	Identifier	penvid		1062942	0					
ANR	1063023	Argument	& pidinfo -> penvid		1062942	1					
ANR	1063024	UnaryOperationExpression	& pidinfo -> penvid		1062942	0					
ANR	1063025	UnaryOperator	&		1062942	0					
ANR	1063026	PtrMemberAccess	pidinfo -> penvid		1062942	1					
ANR	1063027	Identifier	pidinfo		1062942	0					
ANR	1063028	Identifier	penvid		1062942	1					
ANR	1063029	ReturnStatement	return penvid ;	1283:1:35809:35822	1062942	3	True				
ANR	1063030	Identifier	penvid		1062942	0					
ANR	1063031	ReturnType	PidEnvID *		1062942	1					
ANR	1063032	Identifier	DaemonCore :: InfoEnvironmentID		1062942	2					
ANR	1063033	ParameterList	"PidEnvID * penvid , int pid"		1062942	3					
ANR	1063034	Parameter	PidEnvID * penvid	1251:30:35107:35122	1062942	0	True				
ANR	1063035	ParameterType	PidEnvID *		1062942	0					
ANR	1063036	Identifier	penvid		1062942	1					
ANR	1063037	Parameter	int pid	1251:48:35125:35131	1062942	1	True				
ANR	1063038	ParameterType	int		1062942	0					
ANR	1063039	Identifier	pid		1062942	1					
ANR	1063040	CFGEntryNode	ENTRY		1062942		True				
ANR	1063041	CFGExitNode	EXIT		1062942		True				
ANR	1063042	Symbol	pidinfo		1062942						
ANR	1063043	Symbol	pidTable		1062942						
ANR	1063044	Symbol	PIDENVID_OVERSIZED		1062942						
ANR	1063045	Symbol	NULL		1062942						
ANR	1063046	Symbol	pidTable -> lookup		1062942						
ANR	1063047	Symbol	GetEnviron		1062942						
ANR	1063048	Symbol	* pidTable		1062942						
ANR	1063049	Symbol	penvid		1062942						
ANR	1063050	Symbol	& pidinfo -> penvid		1062942						
ANR	1063051	Symbol	pid		1062942						
ANR	1063052	Symbol	pidenvid_filter_and_insert		1062942						
ANR	1063053	Function	DaemonCore :: Register_Signal	1286:0:35827:38620							
ANR	1063054	FunctionDef	"DaemonCore :: Register_Signal (int sig , const char * sig_descrip , SignalHandler handler , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp)"		1063053	0					
ANR	1063055	CompoundStatement		1290:0:36013:38620	1063053	0					
ANR	1063056	IdentifierDeclStatement	int i ;	1291:4:36019:36028	1063053	0	True				
ANR	1063057	IdentifierDecl	i		1063053	0					
ANR	1063058	IdentifierDeclType	int		1063053	0					
ANR	1063059	Identifier	i		1063053	1					
ANR	1063060	IdentifierDeclStatement	int j ;	1292:4:36049:36058	1063053	1	True				
ANR	1063061	IdentifierDecl	j		1063053	0					
ANR	1063062	IdentifierDeclType	int		1063053	0					
ANR	1063063	Identifier	j		1063053	1					
ANR	1063064	IfStatement	if ( handler == 0 && handlercpp == 0 )		1063053	2					
ANR	1063065	Condition	handler == 0 && handlercpp == 0	1295:8:36093:36123	1063053	0	True				
ANR	1063066	AndExpression	handler == 0 && handlercpp == 0		1063053	0		&&			
ANR	1063067	EqualityExpression	handler == 0		1063053	0		==			
ANR	1063068	Identifier	handler		1063053	0					
ANR	1063069	PrimaryExpression	0		1063053	1					
ANR	1063070	EqualityExpression	handlercpp == 0		1063053	1		==			
ANR	1063071	Identifier	handlercpp		1063053	0					
ANR	1063072	PrimaryExpression	0		1063053	1					
ANR	1063073	CompoundStatement		6:42:113:113	1063053	1					
ANR	1063074	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL signal handler\\n"" )"	1296:2:36131:36192	1063053	0	True				
ANR	1063075	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL signal handler\\n"" )"		1063053	0					
ANR	1063076	Callee	dprintf		1063053	0					
ANR	1063077	Identifier	dprintf		1063053	0					
ANR	1063078	ArgumentList	D_DAEMONCORE		1063053	1					
ANR	1063079	Argument	D_DAEMONCORE		1063053	0					
ANR	1063080	Identifier	D_DAEMONCORE		1063053	0					
ANR	1063081	Argument	"""Can't register NULL signal handler\\n"""		1063053	1					
ANR	1063082	PrimaryExpression	"""Can't register NULL signal handler\\n"""		1063053	0					
ANR	1063083	ReturnStatement	return - 1 ;	1297:2:36196:36205	1063053	1	True				
ANR	1063084	UnaryOperationExpression	- 1		1063053	0					
ANR	1063085	UnaryOperator	-		1063053	0					
ANR	1063086	PrimaryExpression	1		1063053	1					
ANR	1063087	ExpressionStatement	"dc_stats . New ( ""Signal"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1300:4:36218:36305	1063053	3	True				
ANR	1063088	CallExpression	"dc_stats . New ( ""Signal"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		1063053	0					
ANR	1063089	Callee	dc_stats . New		1063053	0					
ANR	1063090	MemberAccess	dc_stats . New		1063053	0					
ANR	1063091	Identifier	dc_stats		1063053	0					
ANR	1063092	Identifier	New		1063053	1					
ANR	1063093	ArgumentList	"""Signal"""		1063053	1					
ANR	1063094	Argument	"""Signal"""		1063053	0					
ANR	1063095	PrimaryExpression	"""Signal"""		1063053	0					
ANR	1063096	Argument	handler_descrip		1063053	1					
ANR	1063097	Identifier	handler_descrip		1063053	0					
ANR	1063098	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063053	2					
ANR	1063099	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063053	0		|			
ANR	1063100	Identifier	AS_COUNT		1063053	0					
ANR	1063101	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063053	1		|			
ANR	1063102	Identifier	IS_RCT		1063053	0					
ANR	1063103	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		1063053	1		|			
ANR	1063104	Identifier	IF_NONZERO		1063053	0					
ANR	1063105	Identifier	IF_VERBOSEPUB		1063053	1					
ANR	1063106	SwitchStatement	switch ( sig )		1063053	4					
ANR	1063107	Condition	sig	1305:9:36522:36524	1063053	0	True				
ANR	1063108	Identifier	sig		1063053	0					
ANR	1063109	CompoundStatement		16:14:513:513	1063053	1					
ANR	1063110	Label	case SIGKILL :	1306:2:36531:36543	1063053	0	True				
ANR	1063111	Identifier	SIGKILL		1063053	0					
ANR	1063112	Label	case SIGSTOP :	1307:2:36547:36559	1063053	1	True				
ANR	1063113	Identifier	SIGSTOP		1063053	0					
ANR	1063114	Label	case SIGCONT :	1308:2:36563:36575	1063053	2	True				
ANR	1063115	Identifier	SIGCONT		1063053	0					
ANR	1063116	ExpressionStatement	"EXCEPT ( ""Trying to Register_Signal for sig %d which cannot be caught!"" , sig )"	1309:3:36580:36654	1063053	3	True				
ANR	1063117	CallExpression	"EXCEPT ( ""Trying to Register_Signal for sig %d which cannot be caught!"" , sig )"		1063053	0					
ANR	1063118	Callee	EXCEPT		1063053	0					
ANR	1063119	Identifier	EXCEPT		1063053	0					
ANR	1063120	ArgumentList	"""Trying to Register_Signal for sig %d which cannot be caught!"""		1063053	1					
ANR	1063121	Argument	"""Trying to Register_Signal for sig %d which cannot be caught!"""		1063053	0					
ANR	1063122	PrimaryExpression	"""Trying to Register_Signal for sig %d which cannot be caught!"""		1063053	0					
ANR	1063123	Argument	sig		1063053	1					
ANR	1063124	Identifier	sig		1063053	0					
ANR	1063125	BreakStatement	break ;	1310:3:36659:36664	1063053	4	True				
ANR	1063126	Label	case SIGCHLD :	1311:2:36668:36680	1063053	5	True				
ANR	1063127	Identifier	SIGCHLD		1063053	0					
ANR	1063128	ExpressionStatement	Cancel_Signal ( SIGCHLD )	1312:3:36685:36707	1063053	6	True				
ANR	1063129	CallExpression	Cancel_Signal ( SIGCHLD )		1063053	0					
ANR	1063130	Callee	Cancel_Signal		1063053	0					
ANR	1063131	Identifier	Cancel_Signal		1063053	0					
ANR	1063132	ArgumentList	SIGCHLD		1063053	1					
ANR	1063133	Argument	SIGCHLD		1063053	0					
ANR	1063134	Identifier	SIGCHLD		1063053	0					
ANR	1063135	BreakStatement	break ;	1313:3:36712:36717	1063053	7	True				
ANR	1063136	Label	default :	1314:2:36721:36728	1063053	8	True				
ANR	1063137	Identifier	default		1063053	0					
ANR	1063138	BreakStatement	break ;	1315:3:36733:36738	1063053	9	True				
ANR	1063139	IfStatement	if ( nSig >= maxSig )		1063053	5					
ANR	1063140	Condition	nSig >= maxSig	1318:7:36751:36764	1063053	0	True				
ANR	1063141	RelationalExpression	nSig >= maxSig		1063053	0		>=			
ANR	1063142	Identifier	nSig		1063053	0					
ANR	1063143	Identifier	maxSig		1063053	1					
ANR	1063144	CompoundStatement		29:23:753:753	1063053	1					
ANR	1063145	ExpressionStatement	"EXCEPT ( ""# of signal handlers exceeded specified maximum"" )"	1319:2:36771:36828	1063053	0	True				
ANR	1063146	CallExpression	"EXCEPT ( ""# of signal handlers exceeded specified maximum"" )"		1063053	0					
ANR	1063147	Callee	EXCEPT		1063053	0					
ANR	1063148	Identifier	EXCEPT		1063053	0					
ANR	1063149	ArgumentList	"""# of signal handlers exceeded specified maximum"""		1063053	1					
ANR	1063150	Argument	"""# of signal handlers exceeded specified maximum"""		1063053	0					
ANR	1063151	PrimaryExpression	"""# of signal handlers exceeded specified maximum"""		1063053	0					
ANR	1063152	IfStatement	if ( sig < 0 )		1063053	6					
ANR	1063153	Condition	sig < 0	1324:7:36967:36973	1063053	0	True				
ANR	1063154	RelationalExpression	sig < 0		1063053	0		<			
ANR	1063155	Identifier	sig		1063053	0					
ANR	1063156	PrimaryExpression	0		1063053	1					
ANR	1063157	CompoundStatement		35:16:962:962	1063053	1					
ANR	1063158	ExpressionStatement	i = - sig % maxSig	1325:8:36986:37003	1063053	0	True				
ANR	1063159	AssignmentExpression	i = - sig % maxSig		1063053	0		=			
ANR	1063160	Identifier	i		1063053	0					
ANR	1063161	MultiplicativeExpression	- sig % maxSig		1063053	1		%			
ANR	1063162	UnaryOperationExpression	- sig		1063053	0					
ANR	1063163	UnaryOperator	-		1063053	0					
ANR	1063164	Identifier	sig		1063053	1					
ANR	1063165	Identifier	maxSig		1063053	1					
ANR	1063166	ElseStatement	else		1063053	0					
ANR	1063167	CompoundStatement		37:11:1002:1002	1063053	0					
ANR	1063168	ExpressionStatement	i = sig % maxSig	1327:8:37026:37042	1063053	0	True				
ANR	1063169	AssignmentExpression	i = sig % maxSig		1063053	0		=			
ANR	1063170	Identifier	i		1063053	0					
ANR	1063171	MultiplicativeExpression	sig % maxSig		1063053	1		%			
ANR	1063172	Identifier	sig		1063053	0					
ANR	1063173	Identifier	maxSig		1063053	1					
ANR	1063174	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		1063053	7					
ANR	1063175	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	1333:8:37258:37302	1063053	0	True				
ANR	1063176	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		1063053	0		||			
ANR	1063177	MemberAccess	sigTable [ i ] . handler		1063053	0					
ANR	1063178	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063179	Identifier	sigTable		1063053	0					
ANR	1063180	Identifier	i		1063053	1					
ANR	1063181	Identifier	handler		1063053	1					
ANR	1063182	MemberAccess	sigTable [ i ] . handlercpp		1063053	1					
ANR	1063183	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063184	Identifier	sigTable		1063053	0					
ANR	1063185	Identifier	i		1063053	1					
ANR	1063186	Identifier	handlercpp		1063053	1					
ANR	1063187	CompoundStatement		44:56:1292:1292	1063053	1					
ANR	1063188	IfStatement	if ( sigTable [ i ] . num == sig )		1063053	0					
ANR	1063189	Condition	sigTable [ i ] . num == sig	1335:11:37336:37357	1063053	0	True				
ANR	1063190	EqualityExpression	sigTable [ i ] . num == sig		1063053	0		==			
ANR	1063191	MemberAccess	sigTable [ i ] . num		1063053	0					
ANR	1063192	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063193	Identifier	sigTable		1063053	0					
ANR	1063194	Identifier	i		1063053	1					
ANR	1063195	Identifier	num		1063053	1					
ANR	1063196	Identifier	sig		1063053	1					
ANR	1063197	CompoundStatement		46:35:1346:1346	1063053	1					
ANR	1063198	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same signal registered twice"" )"	1337:3:37390:37440	1063053	0	True				
ANR	1063199	CallExpression	"EXCEPT ( ""DaemonCore: Same signal registered twice"" )"		1063053	0					
ANR	1063200	Callee	EXCEPT		1063053	0					
ANR	1063201	Identifier	EXCEPT		1063053	0					
ANR	1063202	ArgumentList	"""DaemonCore: Same signal registered twice"""		1063053	1					
ANR	1063203	Argument	"""DaemonCore: Same signal registered twice"""		1063053	0					
ANR	1063204	PrimaryExpression	"""DaemonCore: Same signal registered twice"""		1063053	0					
ANR	1063205	ForStatement	for ( j = ( i + 1 ) % maxSig ; j != i ; j = ( j + 1 ) % maxSig )		1063053	1					
ANR	1063206	ForInit	j = ( i + 1 ) % maxSig ;	1341:12:37549:37569	1063053	0	True				
ANR	1063207	AssignmentExpression	j = ( i + 1 ) % maxSig		1063053	0		=			
ANR	1063208	Identifier	j		1063053	0					
ANR	1063209	MultiplicativeExpression	( i + 1 ) % maxSig		1063053	1		%			
ANR	1063210	AdditiveExpression	i + 1		1063053	0		+			
ANR	1063211	Identifier	i		1063053	0					
ANR	1063212	PrimaryExpression	1		1063053	1					
ANR	1063213	Identifier	maxSig		1063053	1					
ANR	1063214	Condition	j != i	1341:34:37571:37576	1063053	1	True				
ANR	1063215	EqualityExpression	j != i		1063053	0		!=			
ANR	1063216	Identifier	j		1063053	0					
ANR	1063217	Identifier	i		1063053	1					
ANR	1063218	AssignmentExpression	j = ( j + 1 ) % maxSig	1341:42:37579:37598	1063053	2	True	=			
ANR	1063219	Identifier	j		1063053	0					
ANR	1063220	MultiplicativeExpression	( j + 1 ) % maxSig		1063053	1		%			
ANR	1063221	AdditiveExpression	j + 1		1063053	0		+			
ANR	1063222	Identifier	j		1063053	0					
ANR	1063223	PrimaryExpression	1		1063053	1					
ANR	1063224	Identifier	maxSig		1063053	1					
ANR	1063225	CompoundStatement		52:64:1587:1587	1063053	3					
ANR	1063226	IfStatement	if ( ( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 ) )		1063053	0					
ANR	1063227	Condition	( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 )	1342:16:37619:37677	1063053	0	True				
ANR	1063228	AndExpression	( sigTable [ j ] . handler == 0 ) && ( sigTable [ j ] . handlercpp == 0 )		1063053	0		&&			
ANR	1063229	EqualityExpression	sigTable [ j ] . handler == 0		1063053	0		==			
ANR	1063230	MemberAccess	sigTable [ j ] . handler		1063053	0					
ANR	1063231	ArrayIndexing	sigTable [ j ]		1063053	0					
ANR	1063232	Identifier	sigTable		1063053	0					
ANR	1063233	Identifier	j		1063053	1					
ANR	1063234	Identifier	handler		1063053	1					
ANR	1063235	PrimaryExpression	0		1063053	1					
ANR	1063236	EqualityExpression	sigTable [ j ] . handlercpp == 0		1063053	1		==			
ANR	1063237	MemberAccess	sigTable [ j ] . handlercpp		1063053	0					
ANR	1063238	ArrayIndexing	sigTable [ j ]		1063053	0					
ANR	1063239	Identifier	sigTable		1063053	0					
ANR	1063240	Identifier	j		1063053	1					
ANR	1063241	Identifier	handlercpp		1063053	1					
ANR	1063242	PrimaryExpression	0		1063053	1					
ANR	1063243	CompoundStatement		54:12:1679:1679	1063053	1					
ANR	1063244	ExpressionStatement	i = j	1344:4:37699:37704	1063053	0	True				
ANR	1063245	AssignmentExpression	i = j		1063053	0		=			
ANR	1063246	Identifier	i		1063053	0					
ANR	1063247	Identifier	j		1063053	1					
ANR	1063248	BreakStatement	break ;	1345:4:37710:37715	1063053	1	True				
ANR	1063249	ExpressionStatement	sigTable [ i ] . num = sig	1351:1:37810:37831	1063053	8	True				
ANR	1063250	AssignmentExpression	sigTable [ i ] . num = sig		1063053	0		=			
ANR	1063251	MemberAccess	sigTable [ i ] . num		1063053	0					
ANR	1063252	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063253	Identifier	sigTable		1063053	0					
ANR	1063254	Identifier	i		1063053	1					
ANR	1063255	Identifier	num		1063053	1					
ANR	1063256	Identifier	sig		1063053	1					
ANR	1063257	ExpressionStatement	sigTable [ i ] . handler = handler	1352:1:37834:37863	1063053	9	True				
ANR	1063258	AssignmentExpression	sigTable [ i ] . handler = handler		1063053	0		=			
ANR	1063259	MemberAccess	sigTable [ i ] . handler		1063053	0					
ANR	1063260	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063261	Identifier	sigTable		1063053	0					
ANR	1063262	Identifier	i		1063053	1					
ANR	1063263	Identifier	handler		1063053	1					
ANR	1063264	Identifier	handler		1063053	1					
ANR	1063265	ExpressionStatement	sigTable [ i ] . handlercpp = handlercpp	1353:1:37866:37901	1063053	10	True				
ANR	1063266	AssignmentExpression	sigTable [ i ] . handlercpp = handlercpp		1063053	0		=			
ANR	1063267	MemberAccess	sigTable [ i ] . handlercpp		1063053	0					
ANR	1063268	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063269	Identifier	sigTable		1063053	0					
ANR	1063270	Identifier	i		1063053	1					
ANR	1063271	Identifier	handlercpp		1063053	1					
ANR	1063272	Identifier	handlercpp		1063053	1					
ANR	1063273	ExpressionStatement	sigTable [ i ] . is_cpp = is_cpp	1354:1:37904:37931	1063053	11	True				
ANR	1063274	AssignmentExpression	sigTable [ i ] . is_cpp = is_cpp		1063053	0		=			
ANR	1063275	MemberAccess	sigTable [ i ] . is_cpp		1063053	0					
ANR	1063276	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063277	Identifier	sigTable		1063053	0					
ANR	1063278	Identifier	i		1063053	1					
ANR	1063279	Identifier	is_cpp		1063053	1					
ANR	1063280	Identifier	is_cpp		1063053	1					
ANR	1063281	ExpressionStatement	sigTable [ i ] . service = s	1355:1:37934:37957	1063053	12	True				
ANR	1063282	AssignmentExpression	sigTable [ i ] . service = s		1063053	0		=			
ANR	1063283	MemberAccess	sigTable [ i ] . service		1063053	0					
ANR	1063284	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063285	Identifier	sigTable		1063053	0					
ANR	1063286	Identifier	i		1063053	1					
ANR	1063287	Identifier	service		1063053	1					
ANR	1063288	Identifier	s		1063053	1					
ANR	1063289	ExpressionStatement	sigTable [ i ] . is_blocked = FALSE	1356:1:37960:37990	1063053	13	True				
ANR	1063290	AssignmentExpression	sigTable [ i ] . is_blocked = FALSE		1063053	0		=			
ANR	1063291	MemberAccess	sigTable [ i ] . is_blocked		1063053	0					
ANR	1063292	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063293	Identifier	sigTable		1063053	0					
ANR	1063294	Identifier	i		1063053	1					
ANR	1063295	Identifier	is_blocked		1063053	1					
ANR	1063296	Identifier	FALSE		1063053	1					
ANR	1063297	ExpressionStatement	sigTable [ i ] . is_pending = FALSE	1357:1:37993:38023	1063053	14	True				
ANR	1063298	AssignmentExpression	sigTable [ i ] . is_pending = FALSE		1063053	0		=			
ANR	1063299	MemberAccess	sigTable [ i ] . is_pending		1063053	0					
ANR	1063300	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063301	Identifier	sigTable		1063053	0					
ANR	1063302	Identifier	i		1063053	1					
ANR	1063303	Identifier	is_pending		1063053	1					
ANR	1063304	Identifier	FALSE		1063053	1					
ANR	1063305	ExpressionStatement	free ( sigTable [ i ] . sig_descrip )	1358:1:38026:38055	1063053	15	True				
ANR	1063306	CallExpression	free ( sigTable [ i ] . sig_descrip )		1063053	0					
ANR	1063307	Callee	free		1063053	0					
ANR	1063308	Identifier	free		1063053	0					
ANR	1063309	ArgumentList	sigTable [ i ] . sig_descrip		1063053	1					
ANR	1063310	Argument	sigTable [ i ] . sig_descrip		1063053	0					
ANR	1063311	MemberAccess	sigTable [ i ] . sig_descrip		1063053	0					
ANR	1063312	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063313	Identifier	sigTable		1063053	0					
ANR	1063314	Identifier	i		1063053	1					
ANR	1063315	Identifier	sig_descrip		1063053	1					
ANR	1063316	IfStatement	if ( sig_descrip )		1063053	16					
ANR	1063317	Condition	sig_descrip	1359:6:38063:38073	1063053	0	True				
ANR	1063318	Identifier	sig_descrip		1063053	0					
ANR	1063319	ExpressionStatement	sigTable [ i ] . sig_descrip = strdup ( sig_descrip )	1360:2:38079:38124	1063053	1	True				
ANR	1063320	AssignmentExpression	sigTable [ i ] . sig_descrip = strdup ( sig_descrip )		1063053	0		=			
ANR	1063321	MemberAccess	sigTable [ i ] . sig_descrip		1063053	0					
ANR	1063322	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063323	Identifier	sigTable		1063053	0					
ANR	1063324	Identifier	i		1063053	1					
ANR	1063325	Identifier	sig_descrip		1063053	1					
ANR	1063326	CallExpression	strdup ( sig_descrip )		1063053	1					
ANR	1063327	Callee	strdup		1063053	0					
ANR	1063328	Identifier	strdup		1063053	0					
ANR	1063329	ArgumentList	sig_descrip		1063053	1					
ANR	1063330	Argument	sig_descrip		1063053	0					
ANR	1063331	Identifier	sig_descrip		1063053	0					
ANR	1063332	ElseStatement	else		1063053	0					
ANR	1063333	ExpressionStatement	sigTable [ i ] . sig_descrip = strdup ( EMPTY_DESCRIP )	1362:2:38134:38181	1063053	0	True				
ANR	1063334	AssignmentExpression	sigTable [ i ] . sig_descrip = strdup ( EMPTY_DESCRIP )		1063053	0		=			
ANR	1063335	MemberAccess	sigTable [ i ] . sig_descrip		1063053	0					
ANR	1063336	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063337	Identifier	sigTable		1063053	0					
ANR	1063338	Identifier	i		1063053	1					
ANR	1063339	Identifier	sig_descrip		1063053	1					
ANR	1063340	CallExpression	strdup ( EMPTY_DESCRIP )		1063053	1					
ANR	1063341	Callee	strdup		1063053	0					
ANR	1063342	Identifier	strdup		1063053	0					
ANR	1063343	ArgumentList	EMPTY_DESCRIP		1063053	1					
ANR	1063344	Argument	EMPTY_DESCRIP		1063053	0					
ANR	1063345	Identifier	EMPTY_DESCRIP		1063053	0					
ANR	1063346	ExpressionStatement	free ( sigTable [ i ] . handler_descrip )	1363:1:38184:38217	1063053	17	True				
ANR	1063347	CallExpression	free ( sigTable [ i ] . handler_descrip )		1063053	0					
ANR	1063348	Callee	free		1063053	0					
ANR	1063349	Identifier	free		1063053	0					
ANR	1063350	ArgumentList	sigTable [ i ] . handler_descrip		1063053	1					
ANR	1063351	Argument	sigTable [ i ] . handler_descrip		1063053	0					
ANR	1063352	MemberAccess	sigTable [ i ] . handler_descrip		1063053	0					
ANR	1063353	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063354	Identifier	sigTable		1063053	0					
ANR	1063355	Identifier	i		1063053	1					
ANR	1063356	Identifier	handler_descrip		1063053	1					
ANR	1063357	IfStatement	if ( handler_descrip )		1063053	18					
ANR	1063358	Condition	handler_descrip	1364:6:38225:38239	1063053	0	True				
ANR	1063359	Identifier	handler_descrip		1063053	0					
ANR	1063360	ExpressionStatement	sigTable [ i ] . handler_descrip = strdup ( handler_descrip )	1365:2:38245:38298	1063053	1	True				
ANR	1063361	AssignmentExpression	sigTable [ i ] . handler_descrip = strdup ( handler_descrip )		1063053	0		=			
ANR	1063362	MemberAccess	sigTable [ i ] . handler_descrip		1063053	0					
ANR	1063363	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063364	Identifier	sigTable		1063053	0					
ANR	1063365	Identifier	i		1063053	1					
ANR	1063366	Identifier	handler_descrip		1063053	1					
ANR	1063367	CallExpression	strdup ( handler_descrip )		1063053	1					
ANR	1063368	Callee	strdup		1063053	0					
ANR	1063369	Identifier	strdup		1063053	0					
ANR	1063370	ArgumentList	handler_descrip		1063053	1					
ANR	1063371	Argument	handler_descrip		1063053	0					
ANR	1063372	Identifier	handler_descrip		1063053	0					
ANR	1063373	ElseStatement	else		1063053	0					
ANR	1063374	ExpressionStatement	sigTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1367:2:38308:38359	1063053	0	True				
ANR	1063375	AssignmentExpression	sigTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		1063053	0		=			
ANR	1063376	MemberAccess	sigTable [ i ] . handler_descrip		1063053	0					
ANR	1063377	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063378	Identifier	sigTable		1063053	0					
ANR	1063379	Identifier	i		1063053	1					
ANR	1063380	Identifier	handler_descrip		1063053	1					
ANR	1063381	CallExpression	strdup ( EMPTY_DESCRIP )		1063053	1					
ANR	1063382	Callee	strdup		1063053	0					
ANR	1063383	Identifier	strdup		1063053	0					
ANR	1063384	ArgumentList	EMPTY_DESCRIP		1063053	1					
ANR	1063385	Argument	EMPTY_DESCRIP		1063053	0					
ANR	1063386	Identifier	EMPTY_DESCRIP		1063053	0					
ANR	1063387	ExpressionStatement	nSig ++	1370:1:38416:38422	1063053	19	True				
ANR	1063388	PostIncDecOperationExpression	nSig ++		1063053	0					
ANR	1063389	Identifier	nSig		1063053	0					
ANR	1063390	IncDec	++		1063053	1					
ANR	1063391	ExpressionStatement	curr_regdataptr = & ( sigTable [ i ] . data_ptr )	1373:1:38470:38511	1063053	20	True				
ANR	1063392	AssignmentExpression	curr_regdataptr = & ( sigTable [ i ] . data_ptr )		1063053	0		=			
ANR	1063393	Identifier	curr_regdataptr		1063053	0					
ANR	1063394	UnaryOperationExpression	& ( sigTable [ i ] . data_ptr )		1063053	1					
ANR	1063395	UnaryOperator	&		1063053	0					
ANR	1063396	MemberAccess	sigTable [ i ] . data_ptr		1063053	1					
ANR	1063397	ArrayIndexing	sigTable [ i ]		1063053	0					
ANR	1063398	Identifier	sigTable		1063053	0					
ANR	1063399	Identifier	i		1063053	1					
ANR	1063400	Identifier	data_ptr		1063053	1					
ANR	1063401	ExpressionStatement	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )	1376:1:38564:38604	1063053	21	True				
ANR	1063402	CallExpression	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )		1063053	0					
ANR	1063403	Callee	DumpSigTable		1063053	0					
ANR	1063404	Identifier	DumpSigTable		1063053	0					
ANR	1063405	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1063053	1					
ANR	1063406	Argument	D_FULLDEBUG | D_DAEMONCORE		1063053	0					
ANR	1063407	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1063053	0		|			
ANR	1063408	Identifier	D_FULLDEBUG		1063053	0					
ANR	1063409	Identifier	D_DAEMONCORE		1063053	1					
ANR	1063410	ReturnStatement	return sig ;	1378:1:38608:38618	1063053	22	True				
ANR	1063411	Identifier	sig		1063053	0					
ANR	1063412	ReturnType	int		1063053	1					
ANR	1063413	Identifier	DaemonCore :: Register_Signal		1063053	2					
ANR	1063414	ParameterList	"int sig , const char * sig_descrip , SignalHandler handler , SignalHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp"		1063053	3					
ANR	1063415	Parameter	int sig	1286:32:35859:35865	1063053	0	True				
ANR	1063416	ParameterType	int		1063053	0					
ANR	1063417	Identifier	sig		1063053	1					
ANR	1063418	Parameter	const char * sig_descrip	1286:41:35868:35890	1063053	1	True				
ANR	1063419	ParameterType	const char *		1063053	0					
ANR	1063420	Identifier	sig_descrip		1063053	1					
ANR	1063421	Parameter	SignalHandler handler	1287:4:35898:35918	1063053	2	True				
ANR	1063422	ParameterType	SignalHandler		1063053	0					
ANR	1063423	Identifier	handler		1063053	1					
ANR	1063424	Parameter	SignalHandlercpp handlercpp	1287:27:35921:35947	1063053	3	True				
ANR	1063425	ParameterType	SignalHandlercpp		1063053	0					
ANR	1063426	Identifier	handlercpp		1063053	1					
ANR	1063427	Parameter	const char * handler_descrip	1288:4:35955:35981	1063053	4	True				
ANR	1063428	ParameterType	const char *		1063053	0					
ANR	1063429	Identifier	handler_descrip		1063053	1					
ANR	1063430	Parameter	Service * s	1288:33:35984:35993	1063053	5	True				
ANR	1063431	ParameterType	Service *		1063053	0					
ANR	1063432	Identifier	s		1063053	1					
ANR	1063433	Parameter	int is_cpp	1289:4:36001:36010	1063053	6	True				
ANR	1063434	ParameterType	int		1063053	0					
ANR	1063435	Identifier	is_cpp		1063053	1					
ANR	1063436	CFGEntryNode	ENTRY		1063053		True				
ANR	1063437	CFGExitNode	EXIT		1063053		True				
ANR	1063438	Symbol	curr_regdataptr		1063053						
ANR	1063439	Symbol	handler		1063053						
ANR	1063440	Symbol	sigTable [ j ] . handlercpp		1063053						
ANR	1063441	Symbol	sigTable [ i ] . is_cpp		1063053						
ANR	1063442	Symbol	sigTable [ i ] . handler_descrip		1063053						
ANR	1063443	Symbol	maxSig		1063053						
ANR	1063444	Symbol	sigTable [ i ] . sig_descrip		1063053						
ANR	1063445	Symbol	sig_descrip		1063053						
ANR	1063446	Symbol	sig		1063053						
ANR	1063447	Symbol	IF_NONZERO		1063053						
ANR	1063448	Symbol	handler_descrip		1063053						
ANR	1063449	Symbol	sigTable [ i ] . handlercpp		1063053						
ANR	1063450	Symbol	sigTable		1063053						
ANR	1063451	Symbol	handlercpp		1063053						
ANR	1063452	Symbol	is_cpp		1063053						
ANR	1063453	Symbol	IS_RCT		1063053						
ANR	1063454	Symbol	AS_COUNT		1063053						
ANR	1063455	Symbol	sigTable [ i ] . service		1063053						
ANR	1063456	Symbol	sigTable [ i ] . is_pending		1063053						
ANR	1063457	Symbol	D_DAEMONCORE		1063053						
ANR	1063458	Symbol	i		1063053						
ANR	1063459	Symbol	& sigTable [ i ] . data_ptr		1063053						
ANR	1063460	Symbol	j		1063053						
ANR	1063461	Symbol	D_FULLDEBUG		1063053						
ANR	1063462	Symbol	nSig		1063053						
ANR	1063463	Symbol	SIGCHLD		1063053						
ANR	1063464	Symbol	s		1063053						
ANR	1063465	Symbol	* sigTable		1063053						
ANR	1063466	Symbol	* i		1063053						
ANR	1063467	Symbol	IF_VERBOSEPUB		1063053						
ANR	1063468	Symbol	* j		1063053						
ANR	1063469	Symbol	EMPTY_DESCRIP		1063053						
ANR	1063470	Symbol	sigTable [ i ] . num		1063053						
ANR	1063471	Symbol	sigTable [ i ] . is_blocked		1063053						
ANR	1063472	Symbol	sigTable [ j ] . handler		1063053						
ANR	1063473	Symbol	dc_stats		1063053						
ANR	1063474	Symbol	FALSE		1063053						
ANR	1063475	Symbol	strdup		1063053						
ANR	1063476	Symbol	sigTable [ i ] . handler		1063053						
ANR	1063477	Function	DaemonCore :: Cancel_Signal	1381:0:38623:40081							
ANR	1063478	FunctionDef	DaemonCore :: Cancel_Signal (int sig)		1063477	0					
ANR	1063479	CompoundStatement		1382:0:38664:40081	1063477	0					
ANR	1063480	IdentifierDeclStatement	"int i , j ;"	1383:1:38667:38674	1063477	0	True				
ANR	1063481	IdentifierDecl	i		1063477	0					
ANR	1063482	IdentifierDeclType	int		1063477	0					
ANR	1063483	Identifier	i		1063477	1					
ANR	1063484	IdentifierDecl	j		1063477	1					
ANR	1063485	IdentifierDeclType	int		1063477	0					
ANR	1063486	Identifier	j		1063477	1					
ANR	1063487	IdentifierDeclStatement	int found = - 1 ;	1384:1:38677:38691	1063477	1	True				
ANR	1063488	IdentifierDecl	found = - 1		1063477	0					
ANR	1063489	IdentifierDeclType	int		1063477	0					
ANR	1063490	Identifier	found		1063477	1					
ANR	1063491	AssignmentExpression	found = - 1		1063477	2		=			
ANR	1063492	Identifier	found		1063477	0					
ANR	1063493	UnaryOperationExpression	- 1		1063477	1					
ANR	1063494	UnaryOperator	-		1063477	0					
ANR	1063495	PrimaryExpression	1		1063477	1					
ANR	1063496	IfStatement	if ( sig < 0 )		1063477	2					
ANR	1063497	Condition	sig < 0	1388:7:38824:38830	1063477	0	True				
ANR	1063498	RelationalExpression	sig < 0		1063477	0		<			
ANR	1063499	Identifier	sig		1063477	0					
ANR	1063500	PrimaryExpression	0		1063477	1					
ANR	1063501	CompoundStatement		7:16:168:168	1063477	1					
ANR	1063502	ExpressionStatement	i = - sig % maxSig	1389:8:38843:38860	1063477	0	True				
ANR	1063503	AssignmentExpression	i = - sig % maxSig		1063477	0		=			
ANR	1063504	Identifier	i		1063477	0					
ANR	1063505	MultiplicativeExpression	- sig % maxSig		1063477	1		%			
ANR	1063506	UnaryOperationExpression	- sig		1063477	0					
ANR	1063507	UnaryOperator	-		1063477	0					
ANR	1063508	Identifier	sig		1063477	1					
ANR	1063509	Identifier	maxSig		1063477	1					
ANR	1063510	ElseStatement	else		1063477	0					
ANR	1063511	CompoundStatement		9:11:208:208	1063477	0					
ANR	1063512	ExpressionStatement	i = sig % maxSig	1391:8:38883:38899	1063477	0	True				
ANR	1063513	AssignmentExpression	i = sig % maxSig		1063477	0		=			
ANR	1063514	Identifier	i		1063477	0					
ANR	1063515	MultiplicativeExpression	sig % maxSig		1063477	1		%			
ANR	1063516	Identifier	sig		1063477	0					
ANR	1063517	Identifier	maxSig		1063477	1					
ANR	1063518	ExpressionStatement	j = i	1395:1:38943:38948	1063477	3	True				
ANR	1063519	AssignmentExpression	j = i		1063477	0		=			
ANR	1063520	Identifier	j		1063477	0					
ANR	1063521	Identifier	i		1063477	1					
ANR	1063522	DoStatement	do		1063477	4					
ANR	1063523	CompoundStatement		15:4:289:289	1063477	0					
ANR	1063524	IfStatement	if ( ( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp ) )		1063477	0					
ANR	1063525	Condition	( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp )	1397:7:38963:39043	1063477	0	True				
ANR	1063526	AndExpression	( sigTable [ j ] . num == sig ) && ( sigTable [ j ] . handler || sigTable [ j ] . handlercpp )		1063477	0		&&			
ANR	1063527	EqualityExpression	sigTable [ j ] . num == sig		1063477	0		==			
ANR	1063528	MemberAccess	sigTable [ j ] . num		1063477	0					
ANR	1063529	ArrayIndexing	sigTable [ j ]		1063477	0					
ANR	1063530	Identifier	sigTable		1063477	0					
ANR	1063531	Identifier	j		1063477	1					
ANR	1063532	Identifier	num		1063477	1					
ANR	1063533	Identifier	sig		1063477	1					
ANR	1063534	OrExpression	sigTable [ j ] . handler || sigTable [ j ] . handlercpp		1063477	1		||			
ANR	1063535	MemberAccess	sigTable [ j ] . handler		1063477	0					
ANR	1063536	ArrayIndexing	sigTable [ j ]		1063477	0					
ANR	1063537	Identifier	sigTable		1063477	0					
ANR	1063538	Identifier	j		1063477	1					
ANR	1063539	Identifier	handler		1063477	1					
ANR	1063540	MemberAccess	sigTable [ j ] . handlercpp		1063477	1					
ANR	1063541	ArrayIndexing	sigTable [ j ]		1063477	0					
ANR	1063542	Identifier	sigTable		1063477	0					
ANR	1063543	Identifier	j		1063477	1					
ANR	1063544	Identifier	handlercpp		1063477	1					
ANR	1063545	CompoundStatement		17:56:382:382	1063477	1					
ANR	1063546	ExpressionStatement	found = j	1399:3:39052:39061	1063477	0	True				
ANR	1063547	AssignmentExpression	found = j		1063477	0		=			
ANR	1063548	Identifier	found		1063477	0					
ANR	1063549	Identifier	j		1063477	1					
ANR	1063550	ElseStatement	else		1063477	0					
ANR	1063551	CompoundStatement		19:9:407:407	1063477	0					
ANR	1063552	ExpressionStatement	j = ( j + 1 ) % maxSig	1401:3:39077:39097	1063477	0	True				
ANR	1063553	AssignmentExpression	j = ( j + 1 ) % maxSig		1063477	0		=			
ANR	1063554	Identifier	j		1063477	0					
ANR	1063555	MultiplicativeExpression	( j + 1 ) % maxSig		1063477	1		%			
ANR	1063556	AdditiveExpression	j + 1		1063477	0		+			
ANR	1063557	Identifier	j		1063477	0					
ANR	1063558	PrimaryExpression	1		1063477	1					
ANR	1063559	Identifier	maxSig		1063477	1					
ANR	1063560	Condition	j != i && found == - 1	1403:11:39114:39134	1063477	1	True				
ANR	1063561	AndExpression	j != i && found == - 1		1063477	0		&&			
ANR	1063562	EqualityExpression	j != i		1063477	0		!=			
ANR	1063563	Identifier	j		1063477	0					
ANR	1063564	Identifier	i		1063477	1					
ANR	1063565	EqualityExpression	found == - 1		1063477	1		==			
ANR	1063566	Identifier	found		1063477	0					
ANR	1063567	UnaryOperationExpression	- 1		1063477	1					
ANR	1063568	UnaryOperator	-		1063477	0					
ANR	1063569	PrimaryExpression	1		1063477	1					
ANR	1063570	IfStatement	if ( found == - 1 )		1063477	5					
ANR	1063571	Condition	found == - 1	1406:6:39165:39175	1063477	0	True				
ANR	1063572	EqualityExpression	found == - 1		1063477	0		==			
ANR	1063573	Identifier	found		1063477	0					
ANR	1063574	UnaryOperationExpression	- 1		1063477	1					
ANR	1063575	UnaryOperator	-		1063477	0					
ANR	1063576	PrimaryExpression	1		1063477	1					
ANR	1063577	CompoundStatement		25:20:514:514	1063477	1					
ANR	1063578	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: signal %d not found\\n"" , sig )"	1407:2:39183:39247	1063477	0	True				
ANR	1063579	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: signal %d not found\\n"" , sig )"		1063477	0					
ANR	1063580	Callee	dprintf		1063477	0					
ANR	1063581	Identifier	dprintf		1063477	0					
ANR	1063582	ArgumentList	D_DAEMONCORE		1063477	1					
ANR	1063583	Argument	D_DAEMONCORE		1063477	0					
ANR	1063584	Identifier	D_DAEMONCORE		1063477	0					
ANR	1063585	Argument	"""Cancel_Signal: signal %d not found\\n"""		1063477	1					
ANR	1063586	PrimaryExpression	"""Cancel_Signal: signal %d not found\\n"""		1063477	0					
ANR	1063587	Argument	sig		1063477	2					
ANR	1063588	Identifier	sig		1063477	0					
ANR	1063589	ReturnStatement	return FALSE ;	1408:2:39251:39263	1063477	1	True				
ANR	1063590	Identifier	FALSE		1063477	0					
ANR	1063591	ExpressionStatement	sigTable [ found ] . num = 0	1412:1:39286:39309	1063477	6	True				
ANR	1063592	AssignmentExpression	sigTable [ found ] . num = 0		1063477	0		=			
ANR	1063593	MemberAccess	sigTable [ found ] . num		1063477	0					
ANR	1063594	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063595	Identifier	sigTable		1063477	0					
ANR	1063596	Identifier	found		1063477	1					
ANR	1063597	Identifier	num		1063477	1					
ANR	1063598	PrimaryExpression	0		1063477	1					
ANR	1063599	ExpressionStatement	sigTable [ found ] . handler = NULL	1413:1:39312:39342	1063477	7	True				
ANR	1063600	AssignmentExpression	sigTable [ found ] . handler = NULL		1063477	0		=			
ANR	1063601	MemberAccess	sigTable [ found ] . handler		1063477	0					
ANR	1063602	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063603	Identifier	sigTable		1063477	0					
ANR	1063604	Identifier	found		1063477	1					
ANR	1063605	Identifier	handler		1063477	1					
ANR	1063606	Identifier	NULL		1063477	1					
ANR	1063607	ExpressionStatement	sigTable [ found ] . handlercpp = ( SignalHandlercpp ) NULL	1414:1:39345:39396	1063477	8	True				
ANR	1063608	AssignmentExpression	sigTable [ found ] . handlercpp = ( SignalHandlercpp ) NULL		1063477	0		=			
ANR	1063609	MemberAccess	sigTable [ found ] . handlercpp		1063477	0					
ANR	1063610	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063611	Identifier	sigTable		1063477	0					
ANR	1063612	Identifier	found		1063477	1					
ANR	1063613	Identifier	handlercpp		1063477	1					
ANR	1063614	CastExpression	( SignalHandlercpp ) NULL		1063477	1					
ANR	1063615	CastTarget	SignalHandlercpp		1063477	0					
ANR	1063616	Identifier	NULL		1063477	1					
ANR	1063617	ExpressionStatement	free ( sigTable [ found ] . handler_descrip )	1415:1:39399:39438	1063477	9	True				
ANR	1063618	CallExpression	free ( sigTable [ found ] . handler_descrip )		1063477	0					
ANR	1063619	Callee	free		1063477	0					
ANR	1063620	Identifier	free		1063477	0					
ANR	1063621	ArgumentList	sigTable [ found ] . handler_descrip		1063477	1					
ANR	1063622	Argument	sigTable [ found ] . handler_descrip		1063477	0					
ANR	1063623	MemberAccess	sigTable [ found ] . handler_descrip		1063477	0					
ANR	1063624	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063625	Identifier	sigTable		1063477	0					
ANR	1063626	Identifier	found		1063477	1					
ANR	1063627	Identifier	handler_descrip		1063477	1					
ANR	1063628	ExpressionStatement	sigTable [ found ] . handler_descrip = NULL	1416:1:39441:39479	1063477	10	True				
ANR	1063629	AssignmentExpression	sigTable [ found ] . handler_descrip = NULL		1063477	0		=			
ANR	1063630	MemberAccess	sigTable [ found ] . handler_descrip		1063477	0					
ANR	1063631	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063632	Identifier	sigTable		1063477	0					
ANR	1063633	Identifier	found		1063477	1					
ANR	1063634	Identifier	handler_descrip		1063477	1					
ANR	1063635	Identifier	NULL		1063477	1					
ANR	1063636	ExpressionStatement	nSig --	1419:1:39536:39542	1063477	11	True				
ANR	1063637	PostIncDecOperationExpression	nSig --		1063477	0					
ANR	1063638	Identifier	nSig		1063477	0					
ANR	1063639	IncDec	--		1063477	1					
ANR	1063640	IfStatement	if ( curr_regdataptr == & ( sigTable [ found ] . data_ptr ) )		1063477	12					
ANR	1063641	Condition	curr_regdataptr == & ( sigTable [ found ] . data_ptr )	1422:6:39613:39658	1063477	0	True				
ANR	1063642	EqualityExpression	curr_regdataptr == & ( sigTable [ found ] . data_ptr )		1063477	0		==			
ANR	1063643	Identifier	curr_regdataptr		1063477	0					
ANR	1063644	UnaryOperationExpression	& ( sigTable [ found ] . data_ptr )		1063477	1					
ANR	1063645	UnaryOperator	&		1063477	0					
ANR	1063646	MemberAccess	sigTable [ found ] . data_ptr		1063477	1					
ANR	1063647	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063648	Identifier	sigTable		1063477	0					
ANR	1063649	Identifier	found		1063477	1					
ANR	1063650	Identifier	data_ptr		1063477	1					
ANR	1063651	ExpressionStatement	curr_regdataptr = NULL	1423:2:39664:39686	1063477	1	True				
ANR	1063652	AssignmentExpression	curr_regdataptr = NULL		1063477	0		=			
ANR	1063653	Identifier	curr_regdataptr		1063477	0					
ANR	1063654	Identifier	NULL		1063477	1					
ANR	1063655	IfStatement	if ( curr_dataptr == & ( sigTable [ found ] . data_ptr ) )		1063477	13					
ANR	1063656	Condition	curr_dataptr == & ( sigTable [ found ] . data_ptr )	1424:6:39694:39736	1063477	0	True				
ANR	1063657	EqualityExpression	curr_dataptr == & ( sigTable [ found ] . data_ptr )		1063477	0		==			
ANR	1063658	Identifier	curr_dataptr		1063477	0					
ANR	1063659	UnaryOperationExpression	& ( sigTable [ found ] . data_ptr )		1063477	1					
ANR	1063660	UnaryOperator	&		1063477	0					
ANR	1063661	MemberAccess	sigTable [ found ] . data_ptr		1063477	1					
ANR	1063662	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063663	Identifier	sigTable		1063477	0					
ANR	1063664	Identifier	found		1063477	1					
ANR	1063665	Identifier	data_ptr		1063477	1					
ANR	1063666	ExpressionStatement	curr_dataptr = NULL	1425:2:39742:39761	1063477	1	True				
ANR	1063667	AssignmentExpression	curr_dataptr = NULL		1063477	0		=			
ANR	1063668	Identifier	curr_dataptr		1063477	0					
ANR	1063669	Identifier	NULL		1063477	1					
ANR	1063670	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: cancelled signal %d <%s>\\n"" , sig , sigTable [ found ] . sig_descrip )"	1428:1:39836:39945	1063477	14	True				
ANR	1063671	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Signal: cancelled signal %d <%s>\\n"" , sig , sigTable [ found ] . sig_descrip )"		1063477	0					
ANR	1063672	Callee	dprintf		1063477	0					
ANR	1063673	Identifier	dprintf		1063477	0					
ANR	1063674	ArgumentList	D_DAEMONCORE		1063477	1					
ANR	1063675	Argument	D_DAEMONCORE		1063477	0					
ANR	1063676	Identifier	D_DAEMONCORE		1063477	0					
ANR	1063677	Argument	"""Cancel_Signal: cancelled signal %d <%s>\\n"""		1063477	1					
ANR	1063678	PrimaryExpression	"""Cancel_Signal: cancelled signal %d <%s>\\n"""		1063477	0					
ANR	1063679	Argument	sig		1063477	2					
ANR	1063680	Identifier	sig		1063477	0					
ANR	1063681	Argument	sigTable [ found ] . sig_descrip		1063477	3					
ANR	1063682	MemberAccess	sigTable [ found ] . sig_descrip		1063477	0					
ANR	1063683	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063684	Identifier	sigTable		1063477	0					
ANR	1063685	Identifier	found		1063477	1					
ANR	1063686	Identifier	sig_descrip		1063477	1					
ANR	1063687	ExpressionStatement	free ( sigTable [ found ] . sig_descrip )	1431:1:39948:39983	1063477	15	True				
ANR	1063688	CallExpression	free ( sigTable [ found ] . sig_descrip )		1063477	0					
ANR	1063689	Callee	free		1063477	0					
ANR	1063690	Identifier	free		1063477	0					
ANR	1063691	ArgumentList	sigTable [ found ] . sig_descrip		1063477	1					
ANR	1063692	Argument	sigTable [ found ] . sig_descrip		1063477	0					
ANR	1063693	MemberAccess	sigTable [ found ] . sig_descrip		1063477	0					
ANR	1063694	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063695	Identifier	sigTable		1063477	0					
ANR	1063696	Identifier	found		1063477	1					
ANR	1063697	Identifier	sig_descrip		1063477	1					
ANR	1063698	ExpressionStatement	sigTable [ found ] . sig_descrip = NULL	1432:1:39986:40020	1063477	16	True				
ANR	1063699	AssignmentExpression	sigTable [ found ] . sig_descrip = NULL		1063477	0		=			
ANR	1063700	MemberAccess	sigTable [ found ] . sig_descrip		1063477	0					
ANR	1063701	ArrayIndexing	sigTable [ found ]		1063477	0					
ANR	1063702	Identifier	sigTable		1063477	0					
ANR	1063703	Identifier	found		1063477	1					
ANR	1063704	Identifier	sig_descrip		1063477	1					
ANR	1063705	Identifier	NULL		1063477	1					
ANR	1063706	ExpressionStatement	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )	1434:1:40024:40064	1063477	17	True				
ANR	1063707	CallExpression	DumpSigTable ( D_FULLDEBUG | D_DAEMONCORE )		1063477	0					
ANR	1063708	Callee	DumpSigTable		1063477	0					
ANR	1063709	Identifier	DumpSigTable		1063477	0					
ANR	1063710	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1063477	1					
ANR	1063711	Argument	D_FULLDEBUG | D_DAEMONCORE		1063477	0					
ANR	1063712	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1063477	0		|			
ANR	1063713	Identifier	D_FULLDEBUG		1063477	0					
ANR	1063714	Identifier	D_DAEMONCORE		1063477	1					
ANR	1063715	ReturnStatement	return TRUE ;	1436:1:40068:40079	1063477	18	True				
ANR	1063716	Identifier	TRUE		1063477	0					
ANR	1063717	ReturnType	int		1063477	1					
ANR	1063718	Identifier	DaemonCore :: Cancel_Signal		1063477	2					
ANR	1063719	ParameterList	int sig		1063477	3					
ANR	1063720	Parameter	int sig	1381:31:38654:38660	1063477	0	True				
ANR	1063721	ParameterType	int		1063477	0					
ANR	1063722	Identifier	sig		1063477	1					
ANR	1063723	CFGEntryNode	ENTRY		1063477		True				
ANR	1063724	CFGExitNode	EXIT		1063477		True				
ANR	1063725	Symbol	curr_regdataptr		1063477						
ANR	1063726	Symbol	sigTable [ j ] . handlercpp		1063477						
ANR	1063727	Symbol	& sigTable [ found ] . data_ptr		1063477						
ANR	1063728	Symbol	maxSig		1063477						
ANR	1063729	Symbol	curr_dataptr		1063477						
ANR	1063730	Symbol	sig		1063477						
ANR	1063731	Symbol	found		1063477						
ANR	1063732	Symbol	sigTable		1063477						
ANR	1063733	Symbol	NULL		1063477						
ANR	1063734	Symbol	D_DAEMONCORE		1063477						
ANR	1063735	Symbol	sigTable [ found ] . handler_descrip		1063477						
ANR	1063736	Symbol	i		1063477						
ANR	1063737	Symbol	TRUE		1063477						
ANR	1063738	Symbol	j		1063477						
ANR	1063739	Symbol	D_FULLDEBUG		1063477						
ANR	1063740	Symbol	sigTable [ found ] . num		1063477						
ANR	1063741	Symbol	nSig		1063477						
ANR	1063742	Symbol	* sigTable		1063477						
ANR	1063743	Symbol	* j		1063477						
ANR	1063744	Symbol	sigTable [ found ] . sig_descrip		1063477						
ANR	1063745	Symbol	sigTable [ j ] . num		1063477						
ANR	1063746	Symbol	sigTable [ j ] . handler		1063477						
ANR	1063747	Symbol	FALSE		1063477						
ANR	1063748	Symbol	sigTable [ found ] . handler		1063477						
ANR	1063749	Symbol	sigTable [ found ] . handlercpp		1063477						
ANR	1063750	Symbol	* found		1063477						
ANR	1063751	Function	DaemonCore :: Register_Socket	1439:0:40084:45864							
ANR	1063752	FunctionDef	"DaemonCore :: Register_Socket (Stream * iosock , const char * iosock_descrip , SocketHandler handler , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int is_cpp)"		1063751	0					
ANR	1063753	CompoundStatement		1443:0:40296:45864	1063751	0					
ANR	1063754	IdentifierDeclStatement	int i ;	1444:4:40302:40311	1063751	0	True				
ANR	1063755	IdentifierDecl	i		1063751	0					
ANR	1063756	IdentifierDeclType	int		1063751	0					
ANR	1063757	Identifier	i		1063751	1					
ANR	1063758	IdentifierDeclStatement	int j ;	1445:4:40317:40326	1063751	1	True				
ANR	1063759	IdentifierDecl	j		1063751	0					
ANR	1063760	IdentifierDeclType	int		1063751	0					
ANR	1063761	Identifier	j		1063751	1					
ANR	1063762	IfStatement	if ( ! iosock )		1063751	2					
ANR	1063763	Condition	! iosock	1455:9:40759:40765	1063751	0	True				
ANR	1063764	UnaryOperationExpression	! iosock		1063751	0					
ANR	1063765	UnaryOperator	!		1063751	0					
ANR	1063766	Identifier	iosock		1063751	1					
ANR	1063767	CompoundStatement		13:19:472:472	1063751	1					
ANR	1063768	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Can't register NULL socket \\n"" )"	1456:2:40773:40827	1063751	0	True				
ANR	1063769	CallExpression	"dprintf ( D_DAEMONCORE , ""Can't register NULL socket \\n"" )"		1063751	0					
ANR	1063770	Callee	dprintf		1063751	0					
ANR	1063771	Identifier	dprintf		1063751	0					
ANR	1063772	ArgumentList	D_DAEMONCORE		1063751	1					
ANR	1063773	Argument	D_DAEMONCORE		1063751	0					
ANR	1063774	Identifier	D_DAEMONCORE		1063751	0					
ANR	1063775	Argument	"""Can't register NULL socket \\n"""		1063751	1					
ANR	1063776	PrimaryExpression	"""Can't register NULL socket \\n"""		1063751	0					
ANR	1063777	ReturnStatement	return - 1 ;	1457:2:40831:40840	1063751	1	True				
ANR	1063778	UnaryOperationExpression	- 1		1063751	0					
ANR	1063779	UnaryOperator	-		1063751	0					
ANR	1063780	PrimaryExpression	1		1063751	1					
ANR	1063781	ForStatement	for ( i = 0 ; i <= nSock ; i ++ )		1063751	3					
ANR	1063782	ForInit	i = 0 ;	1461:6:40889:40892	1063751	0	True				
ANR	1063783	AssignmentExpression	i = 0		1063751	0		=			
ANR	1063784	Identifier	i		1063751	0					
ANR	1063785	PrimaryExpression	0		1063751	1					
ANR	1063786	Condition	i <= nSock	1461:10:40893:40902	1063751	1	True				
ANR	1063787	RelationalExpression	i <= nSock		1063751	0		<=			
ANR	1063788	Identifier	i		1063751	0					
ANR	1063789	Identifier	nSock		1063751	1					
ANR	1063790	PostIncDecOperationExpression	i ++	1461:22:40905:40907	1063751	2	True				
ANR	1063791	Identifier	i		1063751	0					
ANR	1063792	IncDec	++		1063751	1					
ANR	1063793	CompoundStatement		19:27:613:613	1063751	3					
ANR	1063794	IfStatement	if ( ( * sockTable ) [ i ] . iosock == NULL )		1063751	0					
ANR	1063795	Condition	( * sockTable ) [ i ] . iosock == NULL	1462:7:40919:40948	1063751	0	True				
ANR	1063796	EqualityExpression	( * sockTable ) [ i ] . iosock == NULL		1063751	0		==			
ANR	1063797	MemberAccess	( * sockTable ) [ i ] . iosock		1063751	0					
ANR	1063798	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1063799	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063800	UnaryOperator	*		1063751	0					
ANR	1063801	Identifier	sockTable		1063751	1					
ANR	1063802	Identifier	i		1063751	1					
ANR	1063803	Identifier	iosock		1063751	1					
ANR	1063804	Identifier	NULL		1063751	1					
ANR	1063805	CompoundStatement		20:40:655:655	1063751	1					
ANR	1063806	BreakStatement	break ;	1463:3:40957:40962	1063751	0	True				
ANR	1063807	IfStatement	if ( ( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0 )		1063751	1					
ANR	1063808	Condition	( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0	1465:7:40975:41037	1063751	0	True				
ANR	1063809	AndExpression	( * sockTable ) [ i ] . remove_asap && ( * sockTable ) [ i ] . servicing_tid == 0		1063751	0		&&			
ANR	1063810	MemberAccess	( * sockTable ) [ i ] . remove_asap		1063751	0					
ANR	1063811	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1063812	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063813	UnaryOperator	*		1063751	0					
ANR	1063814	Identifier	sockTable		1063751	1					
ANR	1063815	Identifier	i		1063751	1					
ANR	1063816	Identifier	remove_asap		1063751	1					
ANR	1063817	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		1063751	1		==			
ANR	1063818	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1063751	0					
ANR	1063819	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1063820	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063821	UnaryOperator	*		1063751	0					
ANR	1063822	Identifier	sockTable		1063751	1					
ANR	1063823	Identifier	i		1063751	1					
ANR	1063824	Identifier	servicing_tid		1063751	1					
ANR	1063825	PrimaryExpression	0		1063751	1					
ANR	1063826	CompoundStatement		23:73:744:744	1063751	1					
ANR	1063827	ExpressionStatement	( * sockTable ) [ i ] . iosock = NULL	1466:3:41046:41075	1063751	0	True				
ANR	1063828	AssignmentExpression	( * sockTable ) [ i ] . iosock = NULL		1063751	0		=			
ANR	1063829	MemberAccess	( * sockTable ) [ i ] . iosock		1063751	0					
ANR	1063830	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1063831	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063832	UnaryOperator	*		1063751	0					
ANR	1063833	Identifier	sockTable		1063751	1					
ANR	1063834	Identifier	i		1063751	1					
ANR	1063835	Identifier	iosock		1063751	1					
ANR	1063836	Identifier	NULL		1063751	1					
ANR	1063837	BreakStatement	break ;	1467:3:41080:41085	1063751	1	True				
ANR	1063838	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		1063751	4					
ANR	1063839	Condition	( * sockTable ) [ i ] . iosock	1472:6:41141:41162	1063751	0	True				
ANR	1063840	MemberAccess	( * sockTable ) [ i ] . iosock		1063751	0					
ANR	1063841	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1063842	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063843	UnaryOperator	*		1063751	0					
ANR	1063844	Identifier	sockTable		1063751	1					
ANR	1063845	Identifier	i		1063751	1					
ANR	1063846	Identifier	iosock		1063751	1					
ANR	1063847	CompoundStatement		30:31:869:869	1063751	1					
ANR	1063848	ExpressionStatement	"dprintf ( D_ALWAYS , ""Socket table fubar.  nSock = %d\\n"" , nSock )"	1473:8:41176:41240	1063751	0	True				
ANR	1063849	CallExpression	"dprintf ( D_ALWAYS , ""Socket table fubar.  nSock = %d\\n"" , nSock )"		1063751	0					
ANR	1063850	Callee	dprintf		1063751	0					
ANR	1063851	Identifier	dprintf		1063751	0					
ANR	1063852	ArgumentList	D_ALWAYS		1063751	1					
ANR	1063853	Argument	D_ALWAYS		1063751	0					
ANR	1063854	Identifier	D_ALWAYS		1063751	0					
ANR	1063855	Argument	"""Socket table fubar.  nSock = %d\\n"""		1063751	1					
ANR	1063856	PrimaryExpression	"""Socket table fubar.  nSock = %d\\n"""		1063751	0					
ANR	1063857	Argument	nSock		1063751	2					
ANR	1063858	Identifier	nSock		1063751	0					
ANR	1063859	ExpressionStatement	DumpSocketTable ( D_ALWAYS )	1474:8:41250:41277	1063751	1	True				
ANR	1063860	CallExpression	DumpSocketTable ( D_ALWAYS )		1063751	0					
ANR	1063861	Callee	DumpSocketTable		1063751	0					
ANR	1063862	Identifier	DumpSocketTable		1063751	0					
ANR	1063863	ArgumentList	D_ALWAYS		1063751	1					
ANR	1063864	Argument	D_ALWAYS		1063751	0					
ANR	1063865	Identifier	D_ALWAYS		1063751	0					
ANR	1063866	ExpressionStatement	"EXCEPT ( ""DaemonCore: Socket table messed up"" )"	1475:2:41281:41325	1063751	2	True				
ANR	1063867	CallExpression	"EXCEPT ( ""DaemonCore: Socket table messed up"" )"		1063751	0					
ANR	1063868	Callee	EXCEPT		1063751	0					
ANR	1063869	Identifier	EXCEPT		1063751	0					
ANR	1063870	ArgumentList	"""DaemonCore: Socket table messed up"""		1063751	1					
ANR	1063871	Argument	"""DaemonCore: Socket table messed up"""		1063751	0					
ANR	1063872	PrimaryExpression	"""DaemonCore: Socket table messed up"""		1063751	0					
ANR	1063873	ExpressionStatement	"dc_stats . New ( ""Socket"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1478:4:41335:41422	1063751	5	True				
ANR	1063874	CallExpression	"dc_stats . New ( ""Socket"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		1063751	0					
ANR	1063875	Callee	dc_stats . New		1063751	0					
ANR	1063876	MemberAccess	dc_stats . New		1063751	0					
ANR	1063877	Identifier	dc_stats		1063751	0					
ANR	1063878	Identifier	New		1063751	1					
ANR	1063879	ArgumentList	"""Socket"""		1063751	1					
ANR	1063880	Argument	"""Socket"""		1063751	0					
ANR	1063881	PrimaryExpression	"""Socket"""		1063751	0					
ANR	1063882	Argument	handler_descrip		1063751	1					
ANR	1063883	Identifier	handler_descrip		1063751	0					
ANR	1063884	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063751	2					
ANR	1063885	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063751	0		|			
ANR	1063886	Identifier	AS_COUNT		1063751	0					
ANR	1063887	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1063751	1		|			
ANR	1063888	Identifier	IS_RCT		1063751	0					
ANR	1063889	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		1063751	1		|			
ANR	1063890	Identifier	IF_NONZERO		1063751	0					
ANR	1063891	Identifier	IF_VERBOSEPUB		1063751	1					
ANR	1063892	ExpressionStatement	nRegisteredSocks = nSock	1488:1:41941:41965	1063751	6	True				
ANR	1063893	AssignmentExpression	nRegisteredSocks = nSock		1063751	0		=			
ANR	1063894	Identifier	nRegisteredSocks		1063751	0					
ANR	1063895	Identifier	nSock		1063751	1					
ANR	1063896	IdentifierDeclStatement	int fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( ) ;	1489:1:41968:42022	1063751	7	True				
ANR	1063897	IdentifierDecl	fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	0					
ANR	1063898	IdentifierDeclType	int		1063751	0					
ANR	1063899	Identifier	fd_to_register		1063751	1					
ANR	1063900	AssignmentExpression	fd_to_register = ( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	2		=			
ANR	1063901	Identifier	fd_to_register		1063751	0					
ANR	1063902	CallExpression	( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	1					
ANR	1063903	Callee	( ( Sock * ) iosock ) -> get_file_desc		1063751	0					
ANR	1063904	PtrMemberAccess	( ( Sock * ) iosock ) -> get_file_desc		1063751	0					
ANR	1063905	CastExpression	( Sock * ) iosock		1063751	0					
ANR	1063906	CastTarget	Sock *		1063751	0					
ANR	1063907	Identifier	iosock		1063751	1					
ANR	1063908	Identifier	get_file_desc		1063751	1					
ANR	1063909	ArgumentList			1063751	1					
ANR	1063910	IdentifierDeclStatement	bool duplicate_found = false ;	1490:1:42025:42053	1063751	8	True				
ANR	1063911	IdentifierDecl	duplicate_found = false		1063751	0					
ANR	1063912	IdentifierDeclType	bool		1063751	0					
ANR	1063913	Identifier	duplicate_found		1063751	1					
ANR	1063914	AssignmentExpression	duplicate_found = false		1063751	2		=			
ANR	1063915	Identifier	false		1063751	0					
ANR	1063916	Identifier	false		1063751	1					
ANR	1063917	ForStatement	for ( j = 0 ; j < nSock ; j ++ )		1063751	9					
ANR	1063918	ForInit	j = 0 ;	1491:7:42062:42065	1063751	0	True				
ANR	1063919	AssignmentExpression	j = 0		1063751	0		=			
ANR	1063920	Identifier	j		1063751	0					
ANR	1063921	PrimaryExpression	0		1063751	1					
ANR	1063922	Condition	j < nSock	1491:12:42067:42075	1063751	1	True				
ANR	1063923	RelationalExpression	j < nSock		1063751	0		<			
ANR	1063924	Identifier	j		1063751	0					
ANR	1063925	Identifier	nSock		1063751	1					
ANR	1063926	PostIncDecOperationExpression	j ++	1491:23:42078:42080	1063751	2	True				
ANR	1063927	Identifier	j		1063751	0					
ANR	1063928	IncDec	++		1063751	1					
ANR	1063929	CompoundStatement		50:1:1788:1788	1063751	3					
ANR	1063930	IfStatement	if ( ( * sockTable ) [ j ] . iosock == iosock )		1063751	0					
ANR	1063931	Condition	( * sockTable ) [ j ] . iosock == iosock	1493:7:42096:42127	1063751	0	True				
ANR	1063932	EqualityExpression	( * sockTable ) [ j ] . iosock == iosock		1063751	0		==			
ANR	1063933	MemberAccess	( * sockTable ) [ j ] . iosock		1063751	0					
ANR	1063934	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1063935	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063936	UnaryOperator	*		1063751	0					
ANR	1063937	Identifier	sockTable		1063751	1					
ANR	1063938	Identifier	j		1063751	1					
ANR	1063939	Identifier	iosock		1063751	1					
ANR	1063940	Identifier	iosock		1063751	1					
ANR	1063941	CompoundStatement		51:42:1834:1834	1063751	1					
ANR	1063942	ExpressionStatement	duplicate_found = true	1494:3:42136:42158	1063751	0	True				
ANR	1063943	AssignmentExpression	duplicate_found = true		1063751	0		=			
ANR	1063944	Identifier	duplicate_found		1063751	0					
ANR	1063945	Identifier	true		1063751	1					
ANR	1063946	IfStatement	if ( ( * sockTable ) [ j ] . iosock && fd_to_register != - 1 )		1063751	1					
ANR	1063947	Condition	( * sockTable ) [ j ] . iosock && fd_to_register != - 1	1499:7:42305:42350	1063751	0	True				
ANR	1063948	AndExpression	( * sockTable ) [ j ] . iosock && fd_to_register != - 1		1063751	0		&&			
ANR	1063949	MemberAccess	( * sockTable ) [ j ] . iosock		1063751	0					
ANR	1063950	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1063951	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063952	UnaryOperator	*		1063751	0					
ANR	1063953	Identifier	sockTable		1063751	1					
ANR	1063954	Identifier	j		1063751	1					
ANR	1063955	Identifier	iosock		1063751	1					
ANR	1063956	EqualityExpression	fd_to_register != - 1		1063751	1		!=			
ANR	1063957	Identifier	fd_to_register		1063751	0					
ANR	1063958	UnaryOperationExpression	- 1		1063751	1					
ANR	1063959	UnaryOperator	-		1063751	0					
ANR	1063960	PrimaryExpression	1		1063751	1					
ANR	1063961	CompoundStatement		57:56:2057:2057	1063751	1					
ANR	1063962	IfStatement	if ( ( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register )		1063751	0					
ANR	1063963	Condition	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register	1500:8:42364:42438	1063751	0	True				
ANR	1063964	EqualityExpression	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( ) == fd_to_register		1063751	0		==			
ANR	1063965	CallExpression	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc ( )		1063751	0					
ANR	1063966	Callee	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		1063751	0					
ANR	1063967	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		1063751	0					
ANR	1063968	CastExpression	( Sock * ) ( * sockTable ) [ j ] . iosock		1063751	0					
ANR	1063969	CastTarget	Sock *		1063751	0					
ANR	1063970	MemberAccess	( * sockTable ) [ j ] . iosock		1063751	1					
ANR	1063971	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1063972	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063973	UnaryOperator	*		1063751	0					
ANR	1063974	Identifier	sockTable		1063751	1					
ANR	1063975	Identifier	j		1063751	1					
ANR	1063976	Identifier	iosock		1063751	1					
ANR	1063977	Identifier	get_file_desc		1063751	1					
ANR	1063978	ArgumentList			1063751	1					
ANR	1063979	Identifier	fd_to_register		1063751	1					
ANR	1063980	CompoundStatement		59:25:2145:2145	1063751	1					
ANR	1063981	ExpressionStatement	duplicate_found = true	1502:4:42448:42470	1063751	0	True				
ANR	1063982	AssignmentExpression	duplicate_found = true		1063751	0		=			
ANR	1063983	Identifier	duplicate_found		1063751	0					
ANR	1063984	Identifier	true		1063751	1					
ANR	1063985	IfStatement	if ( ( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 ) )		1063751	2					
ANR	1063986	Condition	( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 )	1507:7:42527:42685	1063751	0	True				
ANR	1063987	OrExpression	( ( * sockTable ) [ j ] . iosock == NULL ) || ( ( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0 )		1063751	0		||			
ANR	1063988	EqualityExpression	( * sockTable ) [ j ] . iosock == NULL		1063751	0		==			
ANR	1063989	MemberAccess	( * sockTable ) [ j ] . iosock		1063751	0					
ANR	1063990	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1063991	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1063992	UnaryOperator	*		1063751	0					
ANR	1063993	Identifier	sockTable		1063751	1					
ANR	1063994	Identifier	j		1063751	1					
ANR	1063995	Identifier	iosock		1063751	1					
ANR	1063996	Identifier	NULL		1063751	1					
ANR	1063997	AndExpression	( * sockTable ) [ j ] . remove_asap && ( * sockTable ) [ j ] . servicing_tid == 0		1063751	1		&&			
ANR	1063998	MemberAccess	( * sockTable ) [ j ] . remove_asap		1063751	0					
ANR	1063999	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1064000	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064001	UnaryOperator	*		1063751	0					
ANR	1064002	Identifier	sockTable		1063751	1					
ANR	1064003	Identifier	j		1063751	1					
ANR	1064004	Identifier	remove_asap		1063751	1					
ANR	1064005	EqualityExpression	( * sockTable ) [ j ] . servicing_tid == 0		1063751	1		==			
ANR	1064006	MemberAccess	( * sockTable ) [ j ] . servicing_tid		1063751	0					
ANR	1064007	ArrayIndexing	( * sockTable ) [ j ]		1063751	0					
ANR	1064008	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064009	UnaryOperator	*		1063751	0					
ANR	1064010	Identifier	sockTable		1063751	1					
ANR	1064011	Identifier	j		1063751	1					
ANR	1064012	Identifier	servicing_tid		1063751	1					
ANR	1064013	PrimaryExpression	0		1063751	1					
ANR	1064014	CompoundStatement		68:2:2395:2395	1063751	1					
ANR	1064015	ExpressionStatement	nRegisteredSocks --	1511:3:42697:42715	1063751	0	True				
ANR	1064016	PostIncDecOperationExpression	nRegisteredSocks --		1063751	0					
ANR	1064017	Identifier	nRegisteredSocks		1063751	0					
ANR	1064018	IncDec	--		1063751	1					
ANR	1064019	IfStatement	if ( duplicate_found )		1063751	10					
ANR	1064020	Condition	duplicate_found	1514:5:42767:42781	1063751	0	True				
ANR	1064021	Identifier	duplicate_found		1063751	0					
ANR	1064022	CompoundStatement		72:22:2487:2487	1063751	1					
ANR	1064023	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: Attempt to register socket twice\\n"" )"	1515:2:42788:42855	1063751	0	True				
ANR	1064024	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: Attempt to register socket twice\\n"" )"		1063751	0					
ANR	1064025	Callee	dprintf		1063751	0					
ANR	1064026	Identifier	dprintf		1063751	0					
ANR	1064027	ArgumentList	D_ALWAYS		1063751	1					
ANR	1064028	Argument	D_ALWAYS		1063751	0					
ANR	1064029	Identifier	D_ALWAYS		1063751	0					
ANR	1064030	Argument	"""DaemonCore: Attempt to register socket twice\\n"""		1063751	1					
ANR	1064031	PrimaryExpression	"""DaemonCore: Attempt to register socket twice\\n"""		1063751	0					
ANR	1064032	ReturnStatement	return - 2 ;	1516:2:42859:42868	1063751	1	True				
ANR	1064033	UnaryOperationExpression	- 2		1063751	0					
ANR	1064034	UnaryOperator	-		1063751	0					
ANR	1064035	PrimaryExpression	2		1063751	1					
ANR	1064036	IfStatement	if ( iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) )		1063751	11					
ANR	1064037	Condition	iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( )	1526:5:43282:43367	1063751	0	True				
ANR	1064038	AndExpression	iosock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) iosock ) -> is_connect_pending ( )		1063751	0		&&			
ANR	1064039	EqualityExpression	iosock -> type ( ) == Stream :: reli_sock		1063751	0		==			
ANR	1064040	CallExpression	iosock -> type ( )		1063751	0					
ANR	1064041	Callee	iosock -> type		1063751	0					
ANR	1064042	PtrMemberAccess	iosock -> type		1063751	0					
ANR	1064043	Identifier	iosock		1063751	0					
ANR	1064044	Identifier	type		1063751	1					
ANR	1064045	ArgumentList			1063751	1					
ANR	1064046	Identifier	Stream :: reli_sock		1063751	1					
ANR	1064047	CallExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( )		1063751	1					
ANR	1064048	Callee	( ( ReliSock * ) iosock ) -> is_connect_pending		1063751	0					
ANR	1064049	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_connect_pending		1063751	0					
ANR	1064050	CastExpression	( ReliSock * ) iosock		1063751	0					
ANR	1064051	CastTarget	ReliSock *		1063751	0					
ANR	1064052	Identifier	iosock		1063751	1					
ANR	1064053	Identifier	is_connect_pending		1063751	1					
ANR	1064054	ArgumentList			1063751	1					
ANR	1064055	CompoundStatement		88:2:3104:3238	1063751	1					
ANR	1064056	IdentifierDeclStatement	MyString overload_msg ;	1529:2:43376:43397	1063751	0	True				
ANR	1064057	IdentifierDecl	overload_msg		1063751	0					
ANR	1064058	IdentifierDeclType	MyString		1063751	0					
ANR	1064059	Identifier	overload_msg		1063751	1					
ANR	1064060	IdentifierDeclStatement	"bool overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg ) ;"	1530:2:43401:43535	1063751	1	True				
ANR	1064061	IdentifierDecl	"overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		1063751	0					
ANR	1064062	IdentifierDeclType	bool		1063751	0					
ANR	1064063	Identifier	overload_danger		1063751	1					
ANR	1064064	AssignmentExpression	"overload_danger = TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		1063751	2		=			
ANR	1064065	Identifier	overload_danger		1063751	0					
ANR	1064066	CallExpression	"TooManyRegisteredSockets ( ( ( Sock * ) iosock ) -> get_file_desc ( ) , & overload_msg )"		1063751	1					
ANR	1064067	Callee	TooManyRegisteredSockets		1063751	0					
ANR	1064068	Identifier	TooManyRegisteredSockets		1063751	0					
ANR	1064069	ArgumentList	( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	1					
ANR	1064070	Argument	( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	0					
ANR	1064071	CallExpression	( ( Sock * ) iosock ) -> get_file_desc ( )		1063751	0					
ANR	1064072	Callee	( ( Sock * ) iosock ) -> get_file_desc		1063751	0					
ANR	1064073	PtrMemberAccess	( ( Sock * ) iosock ) -> get_file_desc		1063751	0					
ANR	1064074	CastExpression	( Sock * ) iosock		1063751	0					
ANR	1064075	CastTarget	Sock *		1063751	0					
ANR	1064076	Identifier	iosock		1063751	1					
ANR	1064077	Identifier	get_file_desc		1063751	1					
ANR	1064078	ArgumentList			1063751	1					
ANR	1064079	Argument	& overload_msg		1063751	1					
ANR	1064080	UnaryOperationExpression	& overload_msg		1063751	0					
ANR	1064081	UnaryOperator	&		1063751	0					
ANR	1064082	Identifier	overload_msg		1063751	1					
ANR	1064083	IfStatement	if ( overload_danger )		1063751	2					
ANR	1064084	Condition	overload_danger	1534:6:43544:43558	1063751	0	True				
ANR	1064085	Identifier	overload_danger		1063751	0					
ANR	1064086	CompoundStatement		93:2:3267:3267	1063751	1					
ANR	1064087	ExpressionStatement	"dprintf ( D_ALWAYS , ""Aborting registration of socket %s %s: %s\\n"" , iosock_descrip ? iosock_descrip : """" , handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( ) , overload_msg . Value ( ) )"	1536:3:43569:43783	1063751	0	True				
ANR	1064088	CallExpression	"dprintf ( D_ALWAYS , ""Aborting registration of socket %s %s: %s\\n"" , iosock_descrip ? iosock_descrip : """" , handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( ) , overload_msg . Value ( ) )"		1063751	0					
ANR	1064089	Callee	dprintf		1063751	0					
ANR	1064090	Identifier	dprintf		1063751	0					
ANR	1064091	ArgumentList	D_ALWAYS		1063751	1					
ANR	1064092	Argument	D_ALWAYS		1063751	0					
ANR	1064093	Identifier	D_ALWAYS		1063751	0					
ANR	1064094	Argument	"""Aborting registration of socket %s %s: %s\\n"""		1063751	1					
ANR	1064095	PrimaryExpression	"""Aborting registration of socket %s %s: %s\\n"""		1063751	0					
ANR	1064096	Argument	"iosock_descrip ? iosock_descrip : """""		1063751	2					
ANR	1064097	ConditionalExpression	"iosock_descrip ? iosock_descrip : """""		1063751	0					
ANR	1064098	Condition	iosock_descrip		1063751	0					
ANR	1064099	Identifier	iosock_descrip		1063751	0					
ANR	1064100	Identifier	iosock_descrip		1063751	1					
ANR	1064101	PrimaryExpression	""""""		1063751	2					
ANR	1064102	Argument	handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( )		1063751	3					
ANR	1064103	ConditionalExpression	handler_descrip ? handler_descrip : ( ( Sock * ) iosock ) -> get_sinful_peer ( )		1063751	0					
ANR	1064104	Condition	handler_descrip		1063751	0					
ANR	1064105	Identifier	handler_descrip		1063751	0					
ANR	1064106	Identifier	handler_descrip		1063751	1					
ANR	1064107	CallExpression	( ( Sock * ) iosock ) -> get_sinful_peer ( )		1063751	2					
ANR	1064108	Callee	( ( Sock * ) iosock ) -> get_sinful_peer		1063751	0					
ANR	1064109	PtrMemberAccess	( ( Sock * ) iosock ) -> get_sinful_peer		1063751	0					
ANR	1064110	CastExpression	( Sock * ) iosock		1063751	0					
ANR	1064111	CastTarget	Sock *		1063751	0					
ANR	1064112	Identifier	iosock		1063751	1					
ANR	1064113	Identifier	get_sinful_peer		1063751	1					
ANR	1064114	ArgumentList			1063751	1					
ANR	1064115	Argument	overload_msg . Value ( )		1063751	4					
ANR	1064116	CallExpression	overload_msg . Value ( )		1063751	0					
ANR	1064117	Callee	overload_msg . Value		1063751	0					
ANR	1064118	MemberAccess	overload_msg . Value		1063751	0					
ANR	1064119	Identifier	overload_msg		1063751	0					
ANR	1064120	Identifier	Value		1063751	1					
ANR	1064121	ArgumentList			1063751	1					
ANR	1064122	ReturnStatement	return - 3 ;	1541:3:43788:43797	1063751	1	True				
ANR	1064123	UnaryOperationExpression	- 3		1063751	0					
ANR	1064124	UnaryOperator	-		1063751	0					
ANR	1064125	PrimaryExpression	3		1063751	1					
ANR	1064126	ExpressionStatement	( * sockTable ) [ i ] . servicing_tid = 0	1546:1:43869:43902	1063751	12	True				
ANR	1064127	AssignmentExpression	( * sockTable ) [ i ] . servicing_tid = 0		1063751	0		=			
ANR	1064128	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1063751	0					
ANR	1064129	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064130	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064131	UnaryOperator	*		1063751	0					
ANR	1064132	Identifier	sockTable		1063751	1					
ANR	1064133	Identifier	i		1063751	1					
ANR	1064134	Identifier	servicing_tid		1063751	1					
ANR	1064135	PrimaryExpression	0		1063751	1					
ANR	1064136	ExpressionStatement	( * sockTable ) [ i ] . remove_asap = false	1547:1:43905:43940	1063751	13	True				
ANR	1064137	AssignmentExpression	( * sockTable ) [ i ] . remove_asap = false		1063751	0		=			
ANR	1064138	MemberAccess	( * sockTable ) [ i ] . remove_asap		1063751	0					
ANR	1064139	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064140	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064141	UnaryOperator	*		1063751	0					
ANR	1064142	Identifier	sockTable		1063751	1					
ANR	1064143	Identifier	i		1063751	1					
ANR	1064144	Identifier	remove_asap		1063751	1					
ANR	1064145	Identifier	false		1063751	1					
ANR	1064146	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	1548:1:43943:43979	1063751	14	True				
ANR	1064147	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		1063751	0		=			
ANR	1064148	MemberAccess	( * sockTable ) [ i ] . call_handler		1063751	0					
ANR	1064149	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064150	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064151	UnaryOperator	*		1063751	0					
ANR	1064152	Identifier	sockTable		1063751	1					
ANR	1064153	Identifier	i		1063751	1					
ANR	1064154	Identifier	call_handler		1063751	1					
ANR	1064155	Identifier	false		1063751	1					
ANR	1064156	ExpressionStatement	( * sockTable ) [ i ] . iosock = ( Sock * ) iosock	1549:1:43982:44021	1063751	15	True				
ANR	1064157	AssignmentExpression	( * sockTable ) [ i ] . iosock = ( Sock * ) iosock		1063751	0		=			
ANR	1064158	MemberAccess	( * sockTable ) [ i ] . iosock		1063751	0					
ANR	1064159	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064160	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064161	UnaryOperator	*		1063751	0					
ANR	1064162	Identifier	sockTable		1063751	1					
ANR	1064163	Identifier	i		1063751	1					
ANR	1064164	Identifier	iosock		1063751	1					
ANR	1064165	CastExpression	( Sock * ) iosock		1063751	1					
ANR	1064166	CastTarget	Sock *		1063751	0					
ANR	1064167	Identifier	iosock		1063751	1					
ANR	1064168	SwitchStatement	switch ( iosock -> type ( ) )		1063751	16					
ANR	1064169	Condition	iosock -> type ( )	1550:10:44033:44046	1063751	0	True				
ANR	1064170	CallExpression	iosock -> type ( )		1063751	0					
ANR	1064171	Callee	iosock -> type		1063751	0					
ANR	1064172	PtrMemberAccess	iosock -> type		1063751	0					
ANR	1064173	Identifier	iosock		1063751	0					
ANR	1064174	Identifier	type		1063751	1					
ANR	1064175	ArgumentList			1063751	1					
ANR	1064176	CompoundStatement		108:27:3753:3753	1063751	1					
ANR	1064177	Label	case Stream :: reli_sock :	1551:2:44054:44077	1063751	0	True				
ANR	1064178	Identifier	Stream :: reli_sock		1063751	0					
ANR	1064179	ExpressionStatement	( * sockTable ) [ i ] . is_connect_pending = ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )	1553:3:44113:44255	1063751	1	True				
ANR	1064180	AssignmentExpression	( * sockTable ) [ i ] . is_connect_pending = ( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	0		=			
ANR	1064181	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		1063751	0					
ANR	1064182	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064183	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064184	UnaryOperator	*		1063751	0					
ANR	1064185	Identifier	sockTable		1063751	1					
ANR	1064186	Identifier	i		1063751	1					
ANR	1064187	Identifier	is_connect_pending		1063751	1					
ANR	1064188	AndExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( ) && ! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	1		&&			
ANR	1064189	CallExpression	( ( ReliSock * ) iosock ) -> is_connect_pending ( )		1063751	0					
ANR	1064190	Callee	( ( ReliSock * ) iosock ) -> is_connect_pending		1063751	0					
ANR	1064191	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_connect_pending		1063751	0					
ANR	1064192	CastExpression	( ReliSock * ) iosock		1063751	0					
ANR	1064193	CastTarget	ReliSock *		1063751	0					
ANR	1064194	Identifier	iosock		1063751	1					
ANR	1064195	Identifier	is_connect_pending		1063751	1					
ANR	1064196	ArgumentList			1063751	1					
ANR	1064197	UnaryOperationExpression	! ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	1					
ANR	1064198	UnaryOperator	!		1063751	0					
ANR	1064199	CallExpression	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	1					
ANR	1064200	Callee	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		1063751	0					
ANR	1064201	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		1063751	0					
ANR	1064202	CastExpression	( ReliSock * ) iosock		1063751	0					
ANR	1064203	CastTarget	ReliSock *		1063751	0					
ANR	1064204	Identifier	iosock		1063751	1					
ANR	1064205	Identifier	is_reverse_connect_pending		1063751	1					
ANR	1064206	ArgumentList			1063751	1					
ANR	1064207	ExpressionStatement	( * sockTable ) [ i ] . is_reverse_connect_pending = ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )	1556:3:44260:44359	1063751	2	True				
ANR	1064208	AssignmentExpression	( * sockTable ) [ i ] . is_reverse_connect_pending = ( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	0		=			
ANR	1064209	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		1063751	0					
ANR	1064210	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064211	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064212	UnaryOperator	*		1063751	0					
ANR	1064213	Identifier	sockTable		1063751	1					
ANR	1064214	Identifier	i		1063751	1					
ANR	1064215	Identifier	is_reverse_connect_pending		1063751	1					
ANR	1064216	CallExpression	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending ( )		1063751	1					
ANR	1064217	Callee	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		1063751	0					
ANR	1064218	PtrMemberAccess	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		1063751	0					
ANR	1064219	CastExpression	( ReliSock * ) iosock		1063751	0					
ANR	1064220	CastTarget	ReliSock *		1063751	0					
ANR	1064221	Identifier	iosock		1063751	1					
ANR	1064222	Identifier	is_reverse_connect_pending		1063751	1					
ANR	1064223	ArgumentList			1063751	1					
ANR	1064224	BreakStatement	break ;	1558:3:44364:44369	1063751	3	True				
ANR	1064225	Label	case Stream :: safe_sock :	1559:2:44373:44396	1063751	4	True				
ANR	1064226	Identifier	Stream :: safe_sock		1063751	0					
ANR	1064227	ExpressionStatement	( * sockTable ) [ i ] . is_connect_pending = false	1561:3:44442:44484	1063751	5	True				
ANR	1064228	AssignmentExpression	( * sockTable ) [ i ] . is_connect_pending = false		1063751	0		=			
ANR	1064229	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		1063751	0					
ANR	1064230	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064231	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064232	UnaryOperator	*		1063751	0					
ANR	1064233	Identifier	sockTable		1063751	1					
ANR	1064234	Identifier	i		1063751	1					
ANR	1064235	Identifier	is_connect_pending		1063751	1					
ANR	1064236	Identifier	false		1063751	1					
ANR	1064237	ExpressionStatement	( * sockTable ) [ i ] . is_reverse_connect_pending = false	1562:3:44489:44539	1063751	6	True				
ANR	1064238	AssignmentExpression	( * sockTable ) [ i ] . is_reverse_connect_pending = false		1063751	0		=			
ANR	1064239	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		1063751	0					
ANR	1064240	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064241	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064242	UnaryOperator	*		1063751	0					
ANR	1064243	Identifier	sockTable		1063751	1					
ANR	1064244	Identifier	i		1063751	1					
ANR	1064245	Identifier	is_reverse_connect_pending		1063751	1					
ANR	1064246	Identifier	false		1063751	1					
ANR	1064247	BreakStatement	break ;	1563:3:44544:44549	1063751	7	True				
ANR	1064248	Label	default :	1564:2:44553:44560	1063751	8	True				
ANR	1064249	Identifier	default		1063751	0					
ANR	1064250	ExpressionStatement	"EXCEPT ( ""Adding CEDAR socket of unknown type"" )"	1565:3:44565:44610	1063751	9	True				
ANR	1064251	CallExpression	"EXCEPT ( ""Adding CEDAR socket of unknown type"" )"		1063751	0					
ANR	1064252	Callee	EXCEPT		1063751	0					
ANR	1064253	Identifier	EXCEPT		1063751	0					
ANR	1064254	ArgumentList	"""Adding CEDAR socket of unknown type"""		1063751	1					
ANR	1064255	Argument	"""Adding CEDAR socket of unknown type"""		1063751	0					
ANR	1064256	PrimaryExpression	"""Adding CEDAR socket of unknown type"""		1063751	0					
ANR	1064257	BreakStatement	break ;	1566:3:44615:44620	1063751	10	True				
ANR	1064258	ExpressionStatement	( * sockTable ) [ i ] . handler = handler	1568:1:44626:44659	1063751	17	True				
ANR	1064259	AssignmentExpression	( * sockTable ) [ i ] . handler = handler		1063751	0		=			
ANR	1064260	MemberAccess	( * sockTable ) [ i ] . handler		1063751	0					
ANR	1064261	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064262	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064263	UnaryOperator	*		1063751	0					
ANR	1064264	Identifier	sockTable		1063751	1					
ANR	1064265	Identifier	i		1063751	1					
ANR	1064266	Identifier	handler		1063751	1					
ANR	1064267	Identifier	handler		1063751	1					
ANR	1064268	ExpressionStatement	( * sockTable ) [ i ] . handlercpp = handlercpp	1569:1:44662:44701	1063751	18	True				
ANR	1064269	AssignmentExpression	( * sockTable ) [ i ] . handlercpp = handlercpp		1063751	0		=			
ANR	1064270	MemberAccess	( * sockTable ) [ i ] . handlercpp		1063751	0					
ANR	1064271	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064272	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064273	UnaryOperator	*		1063751	0					
ANR	1064274	Identifier	sockTable		1063751	1					
ANR	1064275	Identifier	i		1063751	1					
ANR	1064276	Identifier	handlercpp		1063751	1					
ANR	1064277	Identifier	handlercpp		1063751	1					
ANR	1064278	ExpressionStatement	( * sockTable ) [ i ] . is_cpp = is_cpp	1570:1:44704:44735	1063751	19	True				
ANR	1064279	AssignmentExpression	( * sockTable ) [ i ] . is_cpp = is_cpp		1063751	0		=			
ANR	1064280	MemberAccess	( * sockTable ) [ i ] . is_cpp		1063751	0					
ANR	1064281	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064282	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064283	UnaryOperator	*		1063751	0					
ANR	1064284	Identifier	sockTable		1063751	1					
ANR	1064285	Identifier	i		1063751	1					
ANR	1064286	Identifier	is_cpp		1063751	1					
ANR	1064287	Identifier	is_cpp		1063751	1					
ANR	1064288	ExpressionStatement	( * sockTable ) [ i ] . perm = perm	1571:1:44738:44765	1063751	20	True				
ANR	1064289	AssignmentExpression	( * sockTable ) [ i ] . perm = perm		1063751	0		=			
ANR	1064290	MemberAccess	( * sockTable ) [ i ] . perm		1063751	0					
ANR	1064291	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064292	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064293	UnaryOperator	*		1063751	0					
ANR	1064294	Identifier	sockTable		1063751	1					
ANR	1064295	Identifier	i		1063751	1					
ANR	1064296	Identifier	perm		1063751	1					
ANR	1064297	Identifier	perm		1063751	1					
ANR	1064298	ExpressionStatement	( * sockTable ) [ i ] . service = s	1572:1:44768:44795	1063751	21	True				
ANR	1064299	AssignmentExpression	( * sockTable ) [ i ] . service = s		1063751	0		=			
ANR	1064300	MemberAccess	( * sockTable ) [ i ] . service		1063751	0					
ANR	1064301	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064302	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064303	UnaryOperator	*		1063751	0					
ANR	1064304	Identifier	sockTable		1063751	1					
ANR	1064305	Identifier	i		1063751	1					
ANR	1064306	Identifier	service		1063751	1					
ANR	1064307	Identifier	s		1063751	1					
ANR	1064308	ExpressionStatement	( * sockTable ) [ i ] . data_ptr = NULL	1573:1:44798:44829	1063751	22	True				
ANR	1064309	AssignmentExpression	( * sockTable ) [ i ] . data_ptr = NULL		1063751	0		=			
ANR	1064310	MemberAccess	( * sockTable ) [ i ] . data_ptr		1063751	0					
ANR	1064311	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064312	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064313	UnaryOperator	*		1063751	0					
ANR	1064314	Identifier	sockTable		1063751	1					
ANR	1064315	Identifier	i		1063751	1					
ANR	1064316	Identifier	data_ptr		1063751	1					
ANR	1064317	Identifier	NULL		1063751	1					
ANR	1064318	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	1574:1:44832:44868	1063751	23	True				
ANR	1064319	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		1063751	0					
ANR	1064320	Callee	free		1063751	0					
ANR	1064321	Identifier	free		1063751	0					
ANR	1064322	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		1063751	1					
ANR	1064323	Argument	( * sockTable ) [ i ] . iosock_descrip		1063751	0					
ANR	1064324	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1063751	0					
ANR	1064325	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064326	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064327	UnaryOperator	*		1063751	0					
ANR	1064328	Identifier	sockTable		1063751	1					
ANR	1064329	Identifier	i		1063751	1					
ANR	1064330	Identifier	iosock_descrip		1063751	1					
ANR	1064331	IfStatement	if ( iosock_descrip )		1063751	24					
ANR	1064332	Condition	iosock_descrip	1575:6:44876:44889	1063751	0	True				
ANR	1064333	Identifier	iosock_descrip		1063751	0					
ANR	1064334	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = strdup ( iosock_descrip )	1576:2:44895:44950	1063751	1	True				
ANR	1064335	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = strdup ( iosock_descrip )		1063751	0		=			
ANR	1064336	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1063751	0					
ANR	1064337	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064338	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064339	UnaryOperator	*		1063751	0					
ANR	1064340	Identifier	sockTable		1063751	1					
ANR	1064341	Identifier	i		1063751	1					
ANR	1064342	Identifier	iosock_descrip		1063751	1					
ANR	1064343	CallExpression	strdup ( iosock_descrip )		1063751	1					
ANR	1064344	Callee	strdup		1063751	0					
ANR	1064345	Identifier	strdup		1063751	0					
ANR	1064346	ArgumentList	iosock_descrip		1063751	1					
ANR	1064347	Argument	iosock_descrip		1063751	0					
ANR	1064348	Identifier	iosock_descrip		1063751	0					
ANR	1064349	ElseStatement	else		1063751	0					
ANR	1064350	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = strdup ( EMPTY_DESCRIP )	1578:2:44960:45014	1063751	0	True				
ANR	1064351	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = strdup ( EMPTY_DESCRIP )		1063751	0		=			
ANR	1064352	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1063751	0					
ANR	1064353	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064354	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064355	UnaryOperator	*		1063751	0					
ANR	1064356	Identifier	sockTable		1063751	1					
ANR	1064357	Identifier	i		1063751	1					
ANR	1064358	Identifier	iosock_descrip		1063751	1					
ANR	1064359	CallExpression	strdup ( EMPTY_DESCRIP )		1063751	1					
ANR	1064360	Callee	strdup		1063751	0					
ANR	1064361	Identifier	strdup		1063751	0					
ANR	1064362	ArgumentList	EMPTY_DESCRIP		1063751	1					
ANR	1064363	Argument	EMPTY_DESCRIP		1063751	0					
ANR	1064364	Identifier	EMPTY_DESCRIP		1063751	0					
ANR	1064365	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	1579:1:45017:45054	1063751	25	True				
ANR	1064366	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		1063751	0					
ANR	1064367	Callee	free		1063751	0					
ANR	1064368	Identifier	free		1063751	0					
ANR	1064369	ArgumentList	( * sockTable ) [ i ] . handler_descrip		1063751	1					
ANR	1064370	Argument	( * sockTable ) [ i ] . handler_descrip		1063751	0					
ANR	1064371	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1063751	0					
ANR	1064372	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064373	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064374	UnaryOperator	*		1063751	0					
ANR	1064375	Identifier	sockTable		1063751	1					
ANR	1064376	Identifier	i		1063751	1					
ANR	1064377	Identifier	handler_descrip		1063751	1					
ANR	1064378	IfStatement	if ( handler_descrip )		1063751	26					
ANR	1064379	Condition	handler_descrip	1580:6:45062:45076	1063751	0	True				
ANR	1064380	Identifier	handler_descrip		1063751	0					
ANR	1064381	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = strdup ( handler_descrip )	1581:2:45082:45139	1063751	1	True				
ANR	1064382	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = strdup ( handler_descrip )		1063751	0		=			
ANR	1064383	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1063751	0					
ANR	1064384	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064385	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064386	UnaryOperator	*		1063751	0					
ANR	1064387	Identifier	sockTable		1063751	1					
ANR	1064388	Identifier	i		1063751	1					
ANR	1064389	Identifier	handler_descrip		1063751	1					
ANR	1064390	CallExpression	strdup ( handler_descrip )		1063751	1					
ANR	1064391	Callee	strdup		1063751	0					
ANR	1064392	Identifier	strdup		1063751	0					
ANR	1064393	ArgumentList	handler_descrip		1063751	1					
ANR	1064394	Argument	handler_descrip		1063751	0					
ANR	1064395	Identifier	handler_descrip		1063751	0					
ANR	1064396	ElseStatement	else		1063751	0					
ANR	1064397	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1583:2:45149:45204	1063751	0	True				
ANR	1064398	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		1063751	0		=			
ANR	1064399	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1063751	0					
ANR	1064400	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064401	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064402	UnaryOperator	*		1063751	0					
ANR	1064403	Identifier	sockTable		1063751	1					
ANR	1064404	Identifier	i		1063751	1					
ANR	1064405	Identifier	handler_descrip		1063751	1					
ANR	1064406	CallExpression	strdup ( EMPTY_DESCRIP )		1063751	1					
ANR	1064407	Callee	strdup		1063751	0					
ANR	1064408	Identifier	strdup		1063751	0					
ANR	1064409	ArgumentList	EMPTY_DESCRIP		1063751	1					
ANR	1064410	Argument	EMPTY_DESCRIP		1063751	0					
ANR	1064411	Identifier	EMPTY_DESCRIP		1063751	0					
ANR	1064412	IfStatement	if ( i == nSock )		1063751	27					
ANR	1064413	Condition	i == nSock	1587:6:45303:45312	1063751	0	True				
ANR	1064414	EqualityExpression	i == nSock		1063751	0		==			
ANR	1064415	Identifier	i		1063751	0					
ANR	1064416	Identifier	nSock		1063751	1					
ANR	1064417	CompoundStatement		145:20:5020:5020	1063751	1					
ANR	1064418	ExpressionStatement	nSock ++	1588:2:45321:45328	1063751	0	True				
ANR	1064419	PostIncDecOperationExpression	nSock ++		1063751	0					
ANR	1064420	Identifier	nSock		1063751	0					
ANR	1064421	IncDec	++		1063751	1					
ANR	1064422	IfStatement	if ( initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL )		1063751	28					
ANR	1064423	Condition	initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL	1592:6:45404:45498	1063751	0	True				
ANR	1064424	AndExpression	initial_command_sock == - 1 && handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL		1063751	0		&&			
ANR	1064425	EqualityExpression	initial_command_sock == - 1		1063751	0		==			
ANR	1064426	Identifier	initial_command_sock		1063751	0					
ANR	1064427	UnaryOperationExpression	- 1		1063751	1					
ANR	1064428	UnaryOperator	-		1063751	0					
ANR	1064429	PrimaryExpression	1		1063751	1					
ANR	1064430	AndExpression	handler == 0 && handlercpp == 0 && m_shared_port_endpoint == NULL		1063751	1		&&			
ANR	1064431	EqualityExpression	handler == 0		1063751	0		==			
ANR	1064432	Identifier	handler		1063751	0					
ANR	1064433	PrimaryExpression	0		1063751	1					
ANR	1064434	AndExpression	handlercpp == 0 && m_shared_port_endpoint == NULL		1063751	1		&&			
ANR	1064435	EqualityExpression	handlercpp == 0		1063751	0		==			
ANR	1064436	Identifier	handlercpp		1063751	0					
ANR	1064437	PrimaryExpression	0		1063751	1					
ANR	1064438	EqualityExpression	m_shared_port_endpoint == NULL		1063751	1		==			
ANR	1064439	Identifier	m_shared_port_endpoint		1063751	0					
ANR	1064440	Identifier	NULL		1063751	1					
ANR	1064441	ExpressionStatement	initial_command_sock = i	1593:2:45504:45528	1063751	1	True				
ANR	1064442	AssignmentExpression	initial_command_sock = i		1063751	0		=			
ANR	1064443	Identifier	initial_command_sock		1063751	0					
ANR	1064444	Identifier	i		1063751	1					
ANR	1064445	ExpressionStatement	curr_regdataptr = & ( ( * sockTable ) [ i ] . data_ptr )	1596:1:45576:45621	1063751	29	True				
ANR	1064446	AssignmentExpression	curr_regdataptr = & ( ( * sockTable ) [ i ] . data_ptr )		1063751	0		=			
ANR	1064447	Identifier	curr_regdataptr		1063751	0					
ANR	1064448	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		1063751	1					
ANR	1064449	UnaryOperator	&		1063751	0					
ANR	1064450	MemberAccess	( * sockTable ) [ i ] . data_ptr		1063751	1					
ANR	1064451	ArrayIndexing	( * sockTable ) [ i ]		1063751	0					
ANR	1064452	UnaryOperationExpression	* sockTable		1063751	0					
ANR	1064453	UnaryOperator	*		1063751	0					
ANR	1064454	Identifier	sockTable		1063751	1					
ANR	1064455	Identifier	i		1063751	1					
ANR	1064456	Identifier	data_ptr		1063751	1					
ANR	1064457	ExpressionStatement	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )	1599:1:45674:45717	1063751	30	True				
ANR	1064458	CallExpression	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )		1063751	0					
ANR	1064459	Callee	DumpSocketTable		1063751	0					
ANR	1064460	Identifier	DumpSocketTable		1063751	0					
ANR	1064461	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1063751	1					
ANR	1064462	Argument	D_FULLDEBUG | D_DAEMONCORE		1063751	0					
ANR	1064463	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1063751	0		|			
ANR	1064464	Identifier	D_FULLDEBUG		1063751	0					
ANR	1064465	Identifier	D_DAEMONCORE		1063751	1					
ANR	1064466	ExpressionStatement	Wake_up_select ( )	1603:1:45834:45850	1063751	31	True				
ANR	1064467	CallExpression	Wake_up_select ( )		1063751	0					
ANR	1064468	Callee	Wake_up_select		1063751	0					
ANR	1064469	Identifier	Wake_up_select		1063751	0					
ANR	1064470	ArgumentList			1063751	1					
ANR	1064471	ReturnStatement	return i ;	1605:1:45854:45862	1063751	32	True				
ANR	1064472	Identifier	i		1063751	0					
ANR	1064473	ReturnType	int		1063751	1					
ANR	1064474	Identifier	DaemonCore :: Register_Socket		1063751	2					
ANR	1064475	ParameterList	"Stream * iosock , const char * iosock_descrip , SocketHandler handler , SocketHandlercpp handlercpp , const char * handler_descrip , Service * s , DCpermission perm , int is_cpp"		1063751	3					
ANR	1064476	Parameter	Stream * iosock	1439:32:40116:40129	1063751	0	True				
ANR	1064477	ParameterType	Stream *		1063751	0					
ANR	1064478	Identifier	iosock		1063751	1					
ANR	1064479	Parameter	const char * iosock_descrip	1439:48:40132:40157	1063751	1	True				
ANR	1064480	ParameterType	const char *		1063751	0					
ANR	1064481	Identifier	iosock_descrip		1063751	1					
ANR	1064482	Parameter	SocketHandler handler	1440:4:40164:40184	1063751	2	True				
ANR	1064483	ParameterType	SocketHandler		1063751	0					
ANR	1064484	Identifier	handler		1063751	1					
ANR	1064485	Parameter	SocketHandlercpp handlercpp	1440:27:40187:40213	1063751	3	True				
ANR	1064486	ParameterType	SocketHandlercpp		1063751	0					
ANR	1064487	Identifier	handlercpp		1063751	1					
ANR	1064488	Parameter	const char * handler_descrip	1441:4:40220:40246	1063751	4	True				
ANR	1064489	ParameterType	const char *		1063751	0					
ANR	1064490	Identifier	handler_descrip		1063751	1					
ANR	1064491	Parameter	Service * s	1441:33:40249:40258	1063751	5	True				
ANR	1064492	ParameterType	Service *		1063751	0					
ANR	1064493	Identifier	s		1063751	1					
ANR	1064494	Parameter	DCpermission perm	1441:45:40261:40277	1063751	6	True				
ANR	1064495	ParameterType	DCpermission		1063751	0					
ANR	1064496	Identifier	perm		1063751	1					
ANR	1064497	Parameter	int is_cpp	1442:4:40284:40293	1063751	7	True				
ANR	1064498	ParameterType	int		1063751	0					
ANR	1064499	Identifier	is_cpp		1063751	1					
ANR	1064500	CFGEntryNode	ENTRY		1063751		True				
ANR	1064501	CFGExitNode	EXIT		1063751		True				
ANR	1064502	Symbol	handler		1063751						
ANR	1064503	Symbol	& overload_msg		1063751						
ANR	1064504	Symbol	( * sockTable ) [ i ] . is_connect_pending		1063751						
ANR	1064505	Symbol	( * sockTable ) [ i ] . is_cpp		1063751						
ANR	1064506	Symbol	& ( * sockTable ) [ i ] . data_ptr		1063751						
ANR	1064507	Symbol	iosock_descrip		1063751						
ANR	1064508	Symbol	duplicate_found		1063751						
ANR	1064509	Symbol	( * sockTable ) [ i ] . data_ptr		1063751						
ANR	1064510	Symbol	( * sockTable ) [ j ] . servicing_tid		1063751						
ANR	1064511	Symbol	( * sockTable ) [ i ] . handlercpp		1063751						
ANR	1064512	Symbol	( * sockTable ) [ i ] . handler_descrip		1063751						
ANR	1064513	Symbol	( * sockTable ) [ i ] . service		1063751						
ANR	1064514	Symbol	IF_NONZERO		1063751						
ANR	1064515	Symbol	overload_msg . Value		1063751						
ANR	1064516	Symbol	( * sockTable ) [ i ] . iosock_descrip		1063751						
ANR	1064517	Symbol	iosock		1063751						
ANR	1064518	Symbol	overload_msg		1063751						
ANR	1064519	Symbol	* iosock		1063751						
ANR	1064520	Symbol	( * sockTable ) [ i ] . iosock		1063751						
ANR	1064521	Symbol	Stream :: reli_sock		1063751						
ANR	1064522	Symbol	handlercpp		1063751						
ANR	1064523	Symbol	( * sockTable ) [ i ] . remove_asap		1063751						
ANR	1064524	Symbol	is_cpp		1063751						
ANR	1064525	Symbol	* * j		1063751						
ANR	1064526	Symbol	NULL		1063751						
ANR	1064527	Symbol	( ( Sock * ) ( * sockTable ) [ j ] . iosock ) -> get_file_desc		1063751						
ANR	1064528	Symbol	sockTable		1063751						
ANR	1064529	Symbol	* ( * sockTable ) [ j ] . iosock		1063751						
ANR	1064530	Symbol	D_FULLDEBUG		1063751						
ANR	1064531	Symbol	TooManyRegisteredSockets		1063751						
ANR	1064532	Symbol	iosock -> type		1063751						
ANR	1064533	Symbol	( ( ReliSock * ) iosock ) -> is_connect_pending		1063751						
ANR	1064534	Symbol	true		1063751						
ANR	1064535	Symbol	curr_regdataptr		1063751						
ANR	1064536	Symbol	perm		1063751						
ANR	1064537	Symbol	( * sockTable ) [ i ] . is_reverse_connect_pending		1063751						
ANR	1064538	Symbol	overload_danger		1063751						
ANR	1064539	Symbol	* * sockTable		1063751						
ANR	1064540	Symbol	( * sockTable ) [ j ] . iosock		1063751						
ANR	1064541	Symbol	handler_descrip		1063751						
ANR	1064542	Symbol	fd_to_register		1063751						
ANR	1064543	Symbol	( ( ReliSock * ) iosock ) -> is_reverse_connect_pending		1063751						
ANR	1064544	Symbol	( ( Sock * ) iosock ) -> get_sinful_peer		1063751						
ANR	1064545	Symbol	IS_RCT		1063751						
ANR	1064546	Symbol	AS_COUNT		1063751						
ANR	1064547	Symbol	* * * sockTable		1063751						
ANR	1064548	Symbol	D_DAEMONCORE		1063751						
ANR	1064549	Symbol	( * sockTable ) [ j ] . remove_asap		1063751						
ANR	1064550	Symbol	nSock		1063751						
ANR	1064551	Symbol	D_ALWAYS		1063751						
ANR	1064552	Symbol	false		1063751						
ANR	1064553	Symbol	i		1063751						
ANR	1064554	Symbol	j		1063751						
ANR	1064555	Symbol	( * sockTable ) [ i ] . perm		1063751						
ANR	1064556	Symbol	nRegisteredSocks		1063751						
ANR	1064557	Symbol	s		1063751						
ANR	1064558	Symbol	* i		1063751						
ANR	1064559	Symbol	* sockTable		1063751						
ANR	1064560	Symbol	IF_VERBOSEPUB		1063751						
ANR	1064561	Symbol	( ( Sock * ) iosock ) -> get_file_desc		1063751						
ANR	1064562	Symbol	* j		1063751						
ANR	1064563	Symbol	EMPTY_DESCRIP		1063751						
ANR	1064564	Symbol	m_shared_port_endpoint		1063751						
ANR	1064565	Symbol	initial_command_sock		1063751						
ANR	1064566	Symbol	( * sockTable ) [ i ] . call_handler		1063751						
ANR	1064567	Symbol	( * sockTable ) [ i ] . servicing_tid		1063751						
ANR	1064568	Symbol	dc_stats		1063751						
ANR	1064569	Symbol	strdup		1063751						
ANR	1064570	Symbol	( * sockTable ) [ i ] . handler		1063751						
ANR	1064571	Function	DaemonCore :: Cancel_Socket	1608:0:45867:47786							
ANR	1064572	FunctionDef	DaemonCore :: Cancel_Socket (Stream * insock)		1064571	0					
ANR	1064573	CompoundStatement		1609:0:45914:47786	1064571	0					
ANR	1064574	IdentifierDeclStatement	"int i , j ;"	1610:1:45917:45924	1064571	0	True				
ANR	1064575	IdentifierDecl	i		1064571	0					
ANR	1064576	IdentifierDeclType	int		1064571	0					
ANR	1064577	Identifier	i		1064571	1					
ANR	1064578	IdentifierDecl	j		1064571	1					
ANR	1064579	IdentifierDeclType	int		1064571	0					
ANR	1064580	Identifier	j		1064571	1					
ANR	1064581	IfStatement	if ( ! insock )		1064571	1					
ANR	1064582	Condition	! insock	1612:5:45932:45938	1064571	0	True				
ANR	1064583	UnaryOperationExpression	! insock		1064571	0					
ANR	1064584	UnaryOperator	!		1064571	0					
ANR	1064585	Identifier	insock		1064571	1					
ANR	1064586	CompoundStatement		4:14:26:26	1064571	1					
ANR	1064587	ReturnStatement	return FALSE ;	1613:2:45945:45957	1064571	0	True				
ANR	1064588	Identifier	FALSE		1064571	0					
ANR	1064589	ExpressionStatement	i = - 1	1616:1:45964:45970	1064571	2	True				
ANR	1064590	AssignmentExpression	i = - 1		1064571	0		=			
ANR	1064591	Identifier	i		1064571	0					
ANR	1064592	UnaryOperationExpression	- 1		1064571	1					
ANR	1064593	UnaryOperator	-		1064571	0					
ANR	1064594	PrimaryExpression	1		1064571	1					
ANR	1064595	ForStatement	for ( j = 0 ; j < nSock ; j ++ )		1064571	3					
ANR	1064596	ForInit	j = 0 ;	1617:6:45978:45981	1064571	0	True				
ANR	1064597	AssignmentExpression	j = 0		1064571	0		=			
ANR	1064598	Identifier	j		1064571	0					
ANR	1064599	PrimaryExpression	0		1064571	1					
ANR	1064600	Condition	j < nSock	1617:10:45982:45988	1064571	1	True				
ANR	1064601	RelationalExpression	j < nSock		1064571	0		<			
ANR	1064602	Identifier	j		1064571	0					
ANR	1064603	Identifier	nSock		1064571	1					
ANR	1064604	PostIncDecOperationExpression	j ++	1617:18:45990:45992	1064571	2	True				
ANR	1064605	Identifier	j		1064571	0					
ANR	1064606	IncDec	++		1064571	1					
ANR	1064607	CompoundStatement		9:23:80:80	1064571	3					
ANR	1064608	IfStatement	if ( ( * sockTable ) [ j ] . iosock == insock )		1064571	0					
ANR	1064609	Condition	( * sockTable ) [ j ] . iosock == insock	1618:7:46004:46035	1064571	0	True				
ANR	1064610	EqualityExpression	( * sockTable ) [ j ] . iosock == insock		1064571	0		==			
ANR	1064611	MemberAccess	( * sockTable ) [ j ] . iosock		1064571	0					
ANR	1064612	ArrayIndexing	( * sockTable ) [ j ]		1064571	0					
ANR	1064613	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064614	UnaryOperator	*		1064571	0					
ANR	1064615	Identifier	sockTable		1064571	1					
ANR	1064616	Identifier	j		1064571	1					
ANR	1064617	Identifier	iosock		1064571	1					
ANR	1064618	Identifier	insock		1064571	1					
ANR	1064619	CompoundStatement		10:42:124:124	1064571	1					
ANR	1064620	ExpressionStatement	i = j	1619:3:46044:46049	1064571	0	True				
ANR	1064621	AssignmentExpression	i = j		1064571	0		=			
ANR	1064622	Identifier	i		1064571	0					
ANR	1064623	Identifier	j		1064571	1					
ANR	1064624	BreakStatement	break ;	1620:3:46054:46059	1064571	1	True				
ANR	1064625	IfStatement	if ( i == - 1 )		1064571	4					
ANR	1064626	Condition	i == - 1	1624:6:46075:46081	1064571	0	True				
ANR	1064627	EqualityExpression	i == - 1		1064571	0		==			
ANR	1064628	Identifier	i		1064571	0					
ANR	1064629	UnaryOperationExpression	- 1		1064571	1					
ANR	1064630	UnaryOperator	-		1064571	0					
ANR	1064631	PrimaryExpression	1		1064571	1					
ANR	1064632	CompoundStatement		16:16:170:170	1064571	1					
ANR	1064633	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Socket: called on non-registered socket!\\n"" )"	1625:2:46089:46159	1064571	0	True				
ANR	1064634	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Socket: called on non-registered socket!\\n"" )"		1064571	0					
ANR	1064635	Callee	dprintf		1064571	0					
ANR	1064636	Identifier	dprintf		1064571	0					
ANR	1064637	ArgumentList	D_ALWAYS		1064571	1					
ANR	1064638	Argument	D_ALWAYS		1064571	0					
ANR	1064639	Identifier	D_ALWAYS		1064571	0					
ANR	1064640	Argument	"""Cancel_Socket: called on non-registered socket!\\n"""		1064571	1					
ANR	1064641	PrimaryExpression	"""Cancel_Socket: called on non-registered socket!\\n"""		1064571	0					
ANR	1064642	IfStatement	if ( insock )		1064571	1					
ANR	1064643	Condition	insock	1626:12:46173:46178	1064571	0	True				
ANR	1064644	Identifier	insock		1064571	0					
ANR	1064645	CompoundStatement		18:21:267:267	1064571	1					
ANR	1064646	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending socket number %d to %s\\n"" , ( ( Sock * ) insock ) -> get_file_desc ( ) , insock -> peer_description ( ) )"	1627:12:46196:46356	1064571	0	True				
ANR	1064647	CallExpression	"dprintf ( D_ALWAYS , ""Offending socket number %d to %s\\n"" , ( ( Sock * ) insock ) -> get_file_desc ( ) , insock -> peer_description ( ) )"		1064571	0					
ANR	1064648	Callee	dprintf		1064571	0					
ANR	1064649	Identifier	dprintf		1064571	0					
ANR	1064650	ArgumentList	D_ALWAYS		1064571	1					
ANR	1064651	Argument	D_ALWAYS		1064571	0					
ANR	1064652	Identifier	D_ALWAYS		1064571	0					
ANR	1064653	Argument	"""Offending socket number %d to %s\\n"""		1064571	1					
ANR	1064654	PrimaryExpression	"""Offending socket number %d to %s\\n"""		1064571	0					
ANR	1064655	Argument	( ( Sock * ) insock ) -> get_file_desc ( )		1064571	2					
ANR	1064656	CallExpression	( ( Sock * ) insock ) -> get_file_desc ( )		1064571	0					
ANR	1064657	Callee	( ( Sock * ) insock ) -> get_file_desc		1064571	0					
ANR	1064658	PtrMemberAccess	( ( Sock * ) insock ) -> get_file_desc		1064571	0					
ANR	1064659	CastExpression	( Sock * ) insock		1064571	0					
ANR	1064660	CastTarget	Sock *		1064571	0					
ANR	1064661	Identifier	insock		1064571	1					
ANR	1064662	Identifier	get_file_desc		1064571	1					
ANR	1064663	ArgumentList			1064571	1					
ANR	1064664	Argument	insock -> peer_description ( )		1064571	3					
ANR	1064665	CallExpression	insock -> peer_description ( )		1064571	0					
ANR	1064666	Callee	insock -> peer_description		1064571	0					
ANR	1064667	PtrMemberAccess	insock -> peer_description		1064571	0					
ANR	1064668	Identifier	insock		1064571	0					
ANR	1064669	Identifier	peer_description		1064571	1					
ANR	1064670	ArgumentList			1064571	1					
ANR	1064671	ExpressionStatement	DumpSocketTable ( D_DAEMONCORE )	1631:2:46370:46401	1064571	2	True				
ANR	1064672	CallExpression	DumpSocketTable ( D_DAEMONCORE )		1064571	0					
ANR	1064673	Callee	DumpSocketTable		1064571	0					
ANR	1064674	Identifier	DumpSocketTable		1064571	0					
ANR	1064675	ArgumentList	D_DAEMONCORE		1064571	1					
ANR	1064676	Argument	D_DAEMONCORE		1064571	0					
ANR	1064677	Identifier	D_DAEMONCORE		1064571	0					
ANR	1064678	ReturnStatement	return FALSE ;	1632:2:46405:46417	1064571	3	True				
ANR	1064679	Identifier	FALSE		1064571	0					
ANR	1064680	IfStatement	if ( curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr ) )		1064571	5					
ANR	1064681	Condition	curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr )	1636:6:46491:46537	1064571	0	True				
ANR	1064682	EqualityExpression	curr_regdataptr == & ( ( * sockTable ) [ i ] . data_ptr )		1064571	0		==			
ANR	1064683	Identifier	curr_regdataptr		1064571	0					
ANR	1064684	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		1064571	1					
ANR	1064685	UnaryOperator	&		1064571	0					
ANR	1064686	MemberAccess	( * sockTable ) [ i ] . data_ptr		1064571	1					
ANR	1064687	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064688	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064689	UnaryOperator	*		1064571	0					
ANR	1064690	Identifier	sockTable		1064571	1					
ANR	1064691	Identifier	i		1064571	1					
ANR	1064692	Identifier	data_ptr		1064571	1					
ANR	1064693	ExpressionStatement	curr_regdataptr = NULL	1637:2:46543:46565	1064571	1	True				
ANR	1064694	AssignmentExpression	curr_regdataptr = NULL		1064571	0		=			
ANR	1064695	Identifier	curr_regdataptr		1064571	0					
ANR	1064696	Identifier	NULL		1064571	1					
ANR	1064697	IfStatement	if ( curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr ) )		1064571	6					
ANR	1064698	Condition	curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr )	1638:6:46573:46616	1064571	0	True				
ANR	1064699	EqualityExpression	curr_dataptr == & ( ( * sockTable ) [ i ] . data_ptr )		1064571	0		==			
ANR	1064700	Identifier	curr_dataptr		1064571	0					
ANR	1064701	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		1064571	1					
ANR	1064702	UnaryOperator	&		1064571	0					
ANR	1064703	MemberAccess	( * sockTable ) [ i ] . data_ptr		1064571	1					
ANR	1064704	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064705	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064706	UnaryOperator	*		1064571	0					
ANR	1064707	Identifier	sockTable		1064571	1					
ANR	1064708	Identifier	i		1064571	1					
ANR	1064709	Identifier	data_ptr		1064571	1					
ANR	1064710	ExpressionStatement	curr_dataptr = NULL	1639:2:46622:46641	1064571	1	True				
ANR	1064711	AssignmentExpression	curr_dataptr = NULL		1064571	0		=			
ANR	1064712	Identifier	curr_dataptr		1064571	0					
ANR	1064713	Identifier	NULL		1064571	1					
ANR	1064714	IfStatement	if ( ( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( ) )		1064571	7					
ANR	1064715	Condition	( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )	1641:5:46649:46759	1064571	0	True				
ANR	1064716	OrExpression	( * sockTable ) [ i ] . servicing_tid == 0 || ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		1064571	0		||			
ANR	1064717	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		1064571	0		==			
ANR	1064718	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1064571	0					
ANR	1064719	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064720	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064721	UnaryOperator	*		1064571	0					
ANR	1064722	Identifier	sockTable		1064571	1					
ANR	1064723	Identifier	i		1064571	1					
ANR	1064724	Identifier	servicing_tid		1064571	1					
ANR	1064725	PrimaryExpression	0		1064571	1					
ANR	1064726	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		1064571	1		==			
ANR	1064727	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1064571	0					
ANR	1064728	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064729	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064730	UnaryOperator	*		1064571	0					
ANR	1064731	Identifier	sockTable		1064571	1					
ANR	1064732	Identifier	i		1064571	1					
ANR	1064733	Identifier	servicing_tid		1064571	1					
ANR	1064734	CallExpression	CondorThreads :: get_handle ( ) -> get_tid ( )		1064571	1					
ANR	1064735	Callee	CondorThreads :: get_handle ( ) -> get_tid		1064571	0					
ANR	1064736	PtrMemberAccess	CondorThreads :: get_handle ( ) -> get_tid		1064571	0					
ANR	1064737	CallExpression	CondorThreads :: get_handle ( )		1064571	0					
ANR	1064738	Callee	CondorThreads :: get_handle		1064571	0					
ANR	1064739	Identifier	CondorThreads :: get_handle		1064571	0					
ANR	1064740	ArgumentList			1064571	1					
ANR	1064741	Identifier	get_tid		1064571	1					
ANR	1064742	ArgumentList			1064571	1					
ANR	1064743	CompoundStatement		35:1:848:848	1064571	1					
ANR	1064744	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: cancelled socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"	1645:2:46786:46917	1064571	0	True				
ANR	1064745	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: cancelled socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"		1064571	0					
ANR	1064746	Callee	dprintf		1064571	0					
ANR	1064747	Identifier	dprintf		1064571	0					
ANR	1064748	ArgumentList	D_DAEMONCORE		1064571	1					
ANR	1064749	Argument	D_DAEMONCORE		1064571	0					
ANR	1064750	Identifier	D_DAEMONCORE		1064571	0					
ANR	1064751	Argument	"""Cancel_Socket: cancelled socket %d <%s> %p\\n"""		1064571	1					
ANR	1064752	PrimaryExpression	"""Cancel_Socket: cancelled socket %d <%s> %p\\n"""		1064571	0					
ANR	1064753	Argument	i		1064571	2					
ANR	1064754	Identifier	i		1064571	0					
ANR	1064755	Argument	( * sockTable ) [ i ] . iosock_descrip		1064571	3					
ANR	1064756	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1064571	0					
ANR	1064757	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064758	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064759	UnaryOperator	*		1064571	0					
ANR	1064760	Identifier	sockTable		1064571	1					
ANR	1064761	Identifier	i		1064571	1					
ANR	1064762	Identifier	iosock_descrip		1064571	1					
ANR	1064763	Argument	( * sockTable ) [ i ] . iosock		1064571	4					
ANR	1064764	MemberAccess	( * sockTable ) [ i ] . iosock		1064571	0					
ANR	1064765	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064766	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064767	UnaryOperator	*		1064571	0					
ANR	1064768	Identifier	sockTable		1064571	1					
ANR	1064769	Identifier	i		1064571	1					
ANR	1064770	Identifier	iosock		1064571	1					
ANR	1064771	ExpressionStatement	( * sockTable ) [ i ] . iosock = NULL	1648:2:46990:47019	1064571	1	True				
ANR	1064772	AssignmentExpression	( * sockTable ) [ i ] . iosock = NULL		1064571	0		=			
ANR	1064773	MemberAccess	( * sockTable ) [ i ] . iosock		1064571	0					
ANR	1064774	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064775	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064776	UnaryOperator	*		1064571	0					
ANR	1064777	Identifier	sockTable		1064571	1					
ANR	1064778	Identifier	i		1064571	1					
ANR	1064779	Identifier	iosock		1064571	1					
ANR	1064780	Identifier	NULL		1064571	1					
ANR	1064781	ExpressionStatement	free ( ( * sockTable ) [ i ] . iosock_descrip )	1649:2:47023:47061	1064571	2	True				
ANR	1064782	CallExpression	free ( ( * sockTable ) [ i ] . iosock_descrip )		1064571	0					
ANR	1064783	Callee	free		1064571	0					
ANR	1064784	Identifier	free		1064571	0					
ANR	1064785	ArgumentList	( * sockTable ) [ i ] . iosock_descrip		1064571	1					
ANR	1064786	Argument	( * sockTable ) [ i ] . iosock_descrip		1064571	0					
ANR	1064787	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1064571	0					
ANR	1064788	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064789	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064790	UnaryOperator	*		1064571	0					
ANR	1064791	Identifier	sockTable		1064571	1					
ANR	1064792	Identifier	i		1064571	1					
ANR	1064793	Identifier	iosock_descrip		1064571	1					
ANR	1064794	ExpressionStatement	( * sockTable ) [ i ] . iosock_descrip = NULL	1650:2:47065:47102	1064571	3	True				
ANR	1064795	AssignmentExpression	( * sockTable ) [ i ] . iosock_descrip = NULL		1064571	0		=			
ANR	1064796	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1064571	0					
ANR	1064797	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064798	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064799	UnaryOperator	*		1064571	0					
ANR	1064800	Identifier	sockTable		1064571	1					
ANR	1064801	Identifier	i		1064571	1					
ANR	1064802	Identifier	iosock_descrip		1064571	1					
ANR	1064803	Identifier	NULL		1064571	1					
ANR	1064804	ExpressionStatement	free ( ( * sockTable ) [ i ] . handler_descrip )	1651:2:47106:47145	1064571	4	True				
ANR	1064805	CallExpression	free ( ( * sockTable ) [ i ] . handler_descrip )		1064571	0					
ANR	1064806	Callee	free		1064571	0					
ANR	1064807	Identifier	free		1064571	0					
ANR	1064808	ArgumentList	( * sockTable ) [ i ] . handler_descrip		1064571	1					
ANR	1064809	Argument	( * sockTable ) [ i ] . handler_descrip		1064571	0					
ANR	1064810	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1064571	0					
ANR	1064811	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064812	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064813	UnaryOperator	*		1064571	0					
ANR	1064814	Identifier	sockTable		1064571	1					
ANR	1064815	Identifier	i		1064571	1					
ANR	1064816	Identifier	handler_descrip		1064571	1					
ANR	1064817	ExpressionStatement	( * sockTable ) [ i ] . handler_descrip = NULL	1652:2:47149:47187	1064571	5	True				
ANR	1064818	AssignmentExpression	( * sockTable ) [ i ] . handler_descrip = NULL		1064571	0		=			
ANR	1064819	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1064571	0					
ANR	1064820	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064821	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064822	UnaryOperator	*		1064571	0					
ANR	1064823	Identifier	sockTable		1064571	1					
ANR	1064824	Identifier	i		1064571	1					
ANR	1064825	Identifier	handler_descrip		1064571	1					
ANR	1064826	Identifier	NULL		1064571	1					
ANR	1064827	IfStatement	if ( i == nSock - 1 )		1064571	6					
ANR	1064828	Condition	i == nSock - 1	1654:7:47272:47285	1064571	0	True				
ANR	1064829	EqualityExpression	i == nSock - 1		1064571	0		==			
ANR	1064830	Identifier	i		1064571	0					
ANR	1064831	AdditiveExpression	nSock - 1		1064571	1		-			
ANR	1064832	Identifier	nSock		1064571	0					
ANR	1064833	PrimaryExpression	1		1064571	1					
ANR	1064834	CompoundStatement		46:24:1374:1374	1064571	1					
ANR	1064835	ExpressionStatement	nSock --	1655:3:47294:47301	1064571	0	True				
ANR	1064836	PostIncDecOperationExpression	nSock --		1064571	0					
ANR	1064837	Identifier	nSock		1064571	0					
ANR	1064838	IncDec	--		1064571	1					
ANR	1064839	ElseStatement	else		1064571	0					
ANR	1064840	CompoundStatement		49:8:1412:1412	1064571	0					
ANR	1064841	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"	1659:2:47350:47487	1064571	0	True				
ANR	1064842	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"" , i , ( * sockTable ) [ i ] . iosock_descrip , ( * sockTable ) [ i ] . iosock )"		1064571	0					
ANR	1064843	Callee	dprintf		1064571	0					
ANR	1064844	Identifier	dprintf		1064571	0					
ANR	1064845	ArgumentList	D_DAEMONCORE		1064571	1					
ANR	1064846	Argument	D_DAEMONCORE		1064571	0					
ANR	1064847	Identifier	D_DAEMONCORE		1064571	0					
ANR	1064848	Argument	"""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"""		1064571	1					
ANR	1064849	PrimaryExpression	"""Cancel_Socket: deferred cancel socket %d <%s> %p\\n"""		1064571	0					
ANR	1064850	Argument	i		1064571	2					
ANR	1064851	Identifier	i		1064571	0					
ANR	1064852	Argument	( * sockTable ) [ i ] . iosock_descrip		1064571	3					
ANR	1064853	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1064571	0					
ANR	1064854	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064855	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064856	UnaryOperator	*		1064571	0					
ANR	1064857	Identifier	sockTable		1064571	1					
ANR	1064858	Identifier	i		1064571	1					
ANR	1064859	Identifier	iosock_descrip		1064571	1					
ANR	1064860	Argument	( * sockTable ) [ i ] . iosock		1064571	4					
ANR	1064861	MemberAccess	( * sockTable ) [ i ] . iosock		1064571	0					
ANR	1064862	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064863	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064864	UnaryOperator	*		1064571	0					
ANR	1064865	Identifier	sockTable		1064571	1					
ANR	1064866	Identifier	i		1064571	1					
ANR	1064867	Identifier	iosock		1064571	1					
ANR	1064868	ExpressionStatement	( * sockTable ) [ i ] . remove_asap = true	1661:2:47491:47525	1064571	1	True				
ANR	1064869	AssignmentExpression	( * sockTable ) [ i ] . remove_asap = true		1064571	0		=			
ANR	1064870	MemberAccess	( * sockTable ) [ i ] . remove_asap		1064571	0					
ANR	1064871	ArrayIndexing	( * sockTable ) [ i ]		1064571	0					
ANR	1064872	UnaryOperationExpression	* sockTable		1064571	0					
ANR	1064873	UnaryOperator	*		1064571	0					
ANR	1064874	Identifier	sockTable		1064571	1					
ANR	1064875	Identifier	i		1064571	1					
ANR	1064876	Identifier	remove_asap		1064571	1					
ANR	1064877	Identifier	true		1064571	1					
ANR	1064878	ExpressionStatement	nRegisteredSocks --	1664:1:47532:47550	1064571	8	True				
ANR	1064879	PostIncDecOperationExpression	nRegisteredSocks --		1064571	0					
ANR	1064880	Identifier	nRegisteredSocks		1064571	0					
ANR	1064881	IncDec	--		1064571	1					
ANR	1064882	ExpressionStatement	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )	1666:1:47593:47636	1064571	9	True				
ANR	1064883	CallExpression	DumpSocketTable ( D_FULLDEBUG | D_DAEMONCORE )		1064571	0					
ANR	1064884	Callee	DumpSocketTable		1064571	0					
ANR	1064885	Identifier	DumpSocketTable		1064571	0					
ANR	1064886	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1064571	1					
ANR	1064887	Argument	D_FULLDEBUG | D_DAEMONCORE		1064571	0					
ANR	1064888	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1064571	0		|			
ANR	1064889	Identifier	D_FULLDEBUG		1064571	0					
ANR	1064890	Identifier	D_DAEMONCORE		1064571	1					
ANR	1064891	ExpressionStatement	Wake_up_select ( )	1670:1:47753:47769	1064571	10	True				
ANR	1064892	CallExpression	Wake_up_select ( )		1064571	0					
ANR	1064893	Callee	Wake_up_select		1064571	0					
ANR	1064894	Identifier	Wake_up_select		1064571	0					
ANR	1064895	ArgumentList			1064571	1					
ANR	1064896	ReturnStatement	return TRUE ;	1672:1:47773:47784	1064571	11	True				
ANR	1064897	Identifier	TRUE		1064571	0					
ANR	1064898	ReturnType	int		1064571	1					
ANR	1064899	Identifier	DaemonCore :: Cancel_Socket		1064571	2					
ANR	1064900	ParameterList	Stream * insock		1064571	3					
ANR	1064901	Parameter	Stream * insock	1608:31:45898:45911	1064571	0	True				
ANR	1064902	ParameterType	Stream *		1064571	0					
ANR	1064903	Identifier	insock		1064571	1					
ANR	1064904	CFGEntryNode	ENTRY		1064571		True				
ANR	1064905	CFGExitNode	EXIT		1064571		True				
ANR	1064906	Symbol	curr_regdataptr		1064571						
ANR	1064907	Symbol	& ( * sockTable ) [ i ] . data_ptr		1064571						
ANR	1064908	Symbol	* * sockTable		1064571						
ANR	1064909	Symbol	( * sockTable ) [ j ] . iosock		1064571						
ANR	1064910	Symbol	curr_dataptr		1064571						
ANR	1064911	Symbol	( * sockTable ) [ i ] . handler_descrip		1064571						
ANR	1064912	Symbol	( ( Sock * ) insock ) -> get_file_desc		1064571						
ANR	1064913	Symbol	( * sockTable ) [ i ] . iosock_descrip		1064571						
ANR	1064914	Symbol	( * sockTable ) [ i ] . iosock		1064571						
ANR	1064915	Symbol	insock		1064571						
ANR	1064916	Symbol	* CondorThreads :: get_handle		1064571						
ANR	1064917	Symbol	CondorThreads :: get_handle		1064571						
ANR	1064918	Symbol	( * sockTable ) [ i ] . remove_asap		1064571						
ANR	1064919	Symbol	NULL		1064571						
ANR	1064920	Symbol	D_DAEMONCORE		1064571						
ANR	1064921	Symbol	nSock		1064571						
ANR	1064922	Symbol	sockTable		1064571						
ANR	1064923	Symbol	D_ALWAYS		1064571						
ANR	1064924	Symbol	i		1064571						
ANR	1064925	Symbol	TRUE		1064571						
ANR	1064926	Symbol	j		1064571						
ANR	1064927	Symbol	D_FULLDEBUG		1064571						
ANR	1064928	Symbol	nRegisteredSocks		1064571						
ANR	1064929	Symbol	insock -> peer_description		1064571						
ANR	1064930	Symbol	* i		1064571						
ANR	1064931	Symbol	CondorThreads :: get_handle ( ) -> get_tid		1064571						
ANR	1064932	Symbol	* sockTable		1064571						
ANR	1064933	Symbol	* j		1064571						
ANR	1064934	Symbol	* insock		1064571						
ANR	1064935	Symbol	true		1064571						
ANR	1064936	Symbol	( * sockTable ) [ i ] . servicing_tid		1064571						
ANR	1064937	Symbol	FALSE		1064571						
ANR	1064938	DeclStmt									
ANR	1064939	Decl							const int	const int	PIPE_INDEX_OFFSET
ANR	1064940	Function	DaemonCore :: pipeHandleTableInsert	1686:0:48454:48839							
ANR	1064941	FunctionDef	DaemonCore :: pipeHandleTableInsert (PipeHandle entry)		1064940	0					
ANR	1064942	CompoundStatement		1687:0:48510:48839	1064940	0					
ANR	1064943	ForStatement	for ( int i = 0 ; i <= maxPipeHandleIndex ; i ++ )		1064940	0					
ANR	1064944	ForInit	int i = 0 ;	1689:6:48546:48555	1064940	0	True				
ANR	1064945	IdentifierDeclStatement	int i = 0 ;		1064940	0					
ANR	1064946	IdentifierDecl	i = 0		1064940	0					
ANR	1064947	IdentifierDeclType	int		1064940	0					
ANR	1064948	Identifier	i		1064940	1					
ANR	1064949	AssignmentExpression	i = 0		1064940	2		=			
ANR	1064950	Identifier	i		1064940	0					
ANR	1064951	PrimaryExpression	0		1064940	1					
ANR	1064952	Condition	i <= maxPipeHandleIndex	1689:17:48557:48579	1064940	1	True				
ANR	1064953	RelationalExpression	i <= maxPipeHandleIndex		1064940	0		<=			
ANR	1064954	Identifier	i		1064940	0					
ANR	1064955	Identifier	maxPipeHandleIndex		1064940	1					
ANR	1064956	PostIncDecOperationExpression	i ++	1689:42:48582:48584	1064940	2	True				
ANR	1064957	Identifier	i		1064940	0					
ANR	1064958	IncDec	++		1064940	1					
ANR	1064959	CompoundStatement		3:47:76:76	1064940	3					
ANR	1064960	IfStatement	if ( ( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1 )		1064940	0					
ANR	1064961	Condition	( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1	1690:6:48595:48633	1064940	0	True				
ANR	1064962	EqualityExpression	( * pipeHandleTable ) [ i ] == ( PipeHandle ) - 1		1064940	0		==			
ANR	1064963	ArrayIndexing	( * pipeHandleTable ) [ i ]		1064940	0					
ANR	1064964	UnaryOperationExpression	* pipeHandleTable		1064940	0					
ANR	1064965	UnaryOperator	*		1064940	0					
ANR	1064966	Identifier	pipeHandleTable		1064940	1					
ANR	1064967	Identifier	i		1064940	1					
ANR	1064968	CastExpression	( PipeHandle ) - 1		1064940	1					
ANR	1064969	CastTarget	PipeHandle		1064940	0					
ANR	1064970	UnaryOperationExpression	- 1		1064940	1					
ANR	1064971	UnaryOperator	-		1064940	0					
ANR	1064972	PrimaryExpression	1		1064940	1					
ANR	1064973	CompoundStatement		4:47:125:125	1064940	1					
ANR	1064974	ExpressionStatement	( * pipeHandleTable ) [ i ] = entry	1691:3:48641:48670	1064940	0	True				
ANR	1064975	AssignmentExpression	( * pipeHandleTable ) [ i ] = entry		1064940	0		=			
ANR	1064976	ArrayIndexing	( * pipeHandleTable ) [ i ]		1064940	0					
ANR	1064977	UnaryOperationExpression	* pipeHandleTable		1064940	0					
ANR	1064978	UnaryOperator	*		1064940	0					
ANR	1064979	Identifier	pipeHandleTable		1064940	1					
ANR	1064980	Identifier	i		1064940	1					
ANR	1064981	Identifier	entry		1064940	1					
ANR	1064982	ReturnStatement	return i ;	1692:3:48675:48683	1064940	1	True				
ANR	1064983	Identifier	i		1064940	0					
ANR	1064984	ExpressionStatement	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ] = entry	1697:1:48761:48809	1064940	1	True				
ANR	1064985	AssignmentExpression	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ] = entry		1064940	0		=			
ANR	1064986	ArrayIndexing	( * pipeHandleTable ) [ ++ maxPipeHandleIndex ]		1064940	0					
ANR	1064987	UnaryOperationExpression	* pipeHandleTable		1064940	0					
ANR	1064988	UnaryOperator	*		1064940	0					
ANR	1064989	Identifier	pipeHandleTable		1064940	1					
ANR	1064990	UnaryExpression	++ maxPipeHandleIndex		1064940	1					
ANR	1064991	IncDec	++		1064940	0					
ANR	1064992	Identifier	maxPipeHandleIndex		1064940	1					
ANR	1064993	Identifier	entry		1064940	1					
ANR	1064994	ReturnStatement	return maxPipeHandleIndex ;	1698:1:48812:48837	1064940	2	True				
ANR	1064995	Identifier	maxPipeHandleIndex		1064940	0					
ANR	1064996	ReturnType	int		1064940	1					
ANR	1064997	Identifier	DaemonCore :: pipeHandleTableInsert		1064940	2					
ANR	1064998	ParameterList	PipeHandle entry		1064940	3					
ANR	1064999	Parameter	PipeHandle entry	1686:38:48492:48507	1064940	0	True				
ANR	1065000	ParameterType	PipeHandle		1064940	0					
ANR	1065001	Identifier	entry		1064940	1					
ANR	1065002	CFGEntryNode	ENTRY		1064940		True				
ANR	1065003	CFGExitNode	EXIT		1064940		True				
ANR	1065004	Symbol	entry		1064940						
ANR	1065005	Symbol	pipeHandleTable		1064940						
ANR	1065006	Symbol	* i		1064940						
ANR	1065007	Symbol	* maxPipeHandleIndex		1064940						
ANR	1065008	Symbol	* pipeHandleTable		1064940						
ANR	1065009	Symbol	* * pipeHandleTable		1064940						
ANR	1065010	Symbol	i		1064940						
ANR	1065011	Symbol	maxPipeHandleIndex		1064940						
ANR	1065012	Function	DaemonCore :: pipeHandleTableRemove	1701:0:48842:49078							
ANR	1065013	FunctionDef	DaemonCore :: pipeHandleTableRemove (int index)		1065012	0					
ANR	1065014	CompoundStatement		1702:0:48892:49078	1065012	0					
ANR	1065015	ExpressionStatement	( * pipeHandleTable ) [ index ] = ( PipeHandle ) - 1	1704:1:48921:48963	1065012	0	True				
ANR	1065016	AssignmentExpression	( * pipeHandleTable ) [ index ] = ( PipeHandle ) - 1		1065012	0		=			
ANR	1065017	ArrayIndexing	( * pipeHandleTable ) [ index ]		1065012	0					
ANR	1065018	UnaryOperationExpression	* pipeHandleTable		1065012	0					
ANR	1065019	UnaryOperator	*		1065012	0					
ANR	1065020	Identifier	pipeHandleTable		1065012	1					
ANR	1065021	Identifier	index		1065012	1					
ANR	1065022	CastExpression	( PipeHandle ) - 1		1065012	1					
ANR	1065023	CastTarget	PipeHandle		1065012	0					
ANR	1065024	UnaryOperationExpression	- 1		1065012	1					
ANR	1065025	UnaryOperator	-		1065012	0					
ANR	1065026	PrimaryExpression	1		1065012	1					
ANR	1065027	IfStatement	if ( index == maxPipeHandleIndex )		1065012	1					
ANR	1065028	Condition	index == maxPipeHandleIndex	1707:5:49020:49046	1065012	0	True				
ANR	1065029	EqualityExpression	index == maxPipeHandleIndex		1065012	0		==			
ANR	1065030	Identifier	index		1065012	0					
ANR	1065031	Identifier	maxPipeHandleIndex		1065012	1					
ANR	1065032	CompoundStatement		6:34:156:156	1065012	1					
ANR	1065033	ExpressionStatement	maxPipeHandleIndex --	1708:2:49053:49073	1065012	0	True				
ANR	1065034	PostIncDecOperationExpression	maxPipeHandleIndex --		1065012	0					
ANR	1065035	Identifier	maxPipeHandleIndex		1065012	0					
ANR	1065036	IncDec	--		1065012	1					
ANR	1065037	ReturnType	void		1065012	1					
ANR	1065038	Identifier	DaemonCore :: pipeHandleTableRemove		1065012	2					
ANR	1065039	ParameterList	int index		1065012	3					
ANR	1065040	Parameter	int index	1701:39:48881:48889	1065012	0	True				
ANR	1065041	ParameterType	int		1065012	0					
ANR	1065042	Identifier	index		1065012	1					
ANR	1065043	CFGEntryNode	ENTRY		1065012		True				
ANR	1065044	CFGExitNode	EXIT		1065012		True				
ANR	1065045	Symbol	pipeHandleTable		1065012						
ANR	1065046	Symbol	* pipeHandleTable		1065012						
ANR	1065047	Symbol	* index		1065012						
ANR	1065048	Symbol	* * pipeHandleTable		1065012						
ANR	1065049	Symbol	index		1065012						
ANR	1065050	Symbol	maxPipeHandleIndex		1065012						
ANR	1065051	Function	DaemonCore :: pipeHandleTableLookup	1712:0:49081:49371							
ANR	1065052	FunctionDef	"DaemonCore :: pipeHandleTableLookup (int index , PipeHandle * ph)"		1065051	0					
ANR	1065053	CompoundStatement		1713:0:49146:49371	1065051	0					
ANR	1065054	IfStatement	if ( ( index < 0 ) || ( index > maxPipeHandleIndex ) )		1065051	0					
ANR	1065055	Condition	( index < 0 ) || ( index > maxPipeHandleIndex )	1714:5:49153:49195	1065051	0	True				
ANR	1065056	OrExpression	( index < 0 ) || ( index > maxPipeHandleIndex )		1065051	0		||			
ANR	1065057	RelationalExpression	index < 0		1065051	0		<			
ANR	1065058	Identifier	index		1065051	0					
ANR	1065059	PrimaryExpression	0		1065051	1					
ANR	1065060	RelationalExpression	index > maxPipeHandleIndex		1065051	1		>			
ANR	1065061	Identifier	index		1065051	0					
ANR	1065062	Identifier	maxPipeHandleIndex		1065051	1					
ANR	1065063	CompoundStatement		2:50:51:51	1065051	1					
ANR	1065064	ReturnStatement	return FALSE ;	1715:2:49202:49214	1065051	0	True				
ANR	1065065	Identifier	FALSE		1065051	0					
ANR	1065066	IdentifierDeclStatement	PipeHandle tmp_ph = ( * pipeHandleTable ) [ index ] ;	1717:1:49220:49265	1065051	1	True				
ANR	1065067	IdentifierDecl	tmp_ph = ( * pipeHandleTable ) [ index ]		1065051	0					
ANR	1065068	IdentifierDeclType	PipeHandle		1065051	0					
ANR	1065069	Identifier	tmp_ph		1065051	1					
ANR	1065070	AssignmentExpression	tmp_ph = ( * pipeHandleTable ) [ index ]		1065051	2		=			
ANR	1065071	Identifier	tmp_ph		1065051	0					
ANR	1065072	ArrayIndexing	( * pipeHandleTable ) [ index ]		1065051	1					
ANR	1065073	UnaryOperationExpression	* pipeHandleTable		1065051	0					
ANR	1065074	UnaryOperator	*		1065051	0					
ANR	1065075	Identifier	pipeHandleTable		1065051	1					
ANR	1065076	Identifier	index		1065051	1					
ANR	1065077	IfStatement	if ( tmp_ph == ( PipeHandle ) - 1 )		1065051	2					
ANR	1065078	Condition	tmp_ph == ( PipeHandle ) - 1	1718:5:49272:49295	1065051	0	True				
ANR	1065079	EqualityExpression	tmp_ph == ( PipeHandle ) - 1		1065051	0		==			
ANR	1065080	Identifier	tmp_ph		1065051	0					
ANR	1065081	CastExpression	( PipeHandle ) - 1		1065051	1					
ANR	1065082	CastTarget	PipeHandle		1065051	0					
ANR	1065083	UnaryOperationExpression	- 1		1065051	1					
ANR	1065084	UnaryOperator	-		1065051	0					
ANR	1065085	PrimaryExpression	1		1065051	1					
ANR	1065086	CompoundStatement		6:31:151:151	1065051	1					
ANR	1065087	ReturnStatement	return FALSE ;	1719:2:49302:49314	1065051	0	True				
ANR	1065088	Identifier	FALSE		1065051	0					
ANR	1065089	IfStatement	if ( ph != NULL )		1065051	3					
ANR	1065090	Condition	ph != NULL	1721:5:49324:49333	1065051	0	True				
ANR	1065091	EqualityExpression	ph != NULL		1065051	0		!=			
ANR	1065092	Identifier	ph		1065051	0					
ANR	1065093	Identifier	NULL		1065051	1					
ANR	1065094	CompoundStatement		9:17:189:189	1065051	1					
ANR	1065095	ExpressionStatement	* ph = tmp_ph	1722:2:49340:49352	1065051	0	True				
ANR	1065096	AssignmentExpression	* ph = tmp_ph		1065051	0		=			
ANR	1065097	UnaryOperationExpression	* ph		1065051	0					
ANR	1065098	UnaryOperator	*		1065051	0					
ANR	1065099	Identifier	ph		1065051	1					
ANR	1065100	Identifier	tmp_ph		1065051	1					
ANR	1065101	ReturnStatement	return TRUE ;	1724:1:49358:49369	1065051	4	True				
ANR	1065102	Identifier	TRUE		1065051	0					
ANR	1065103	ReturnType	int		1065051	1					
ANR	1065104	Identifier	DaemonCore :: pipeHandleTableLookup		1065051	2					
ANR	1065105	ParameterList	"int index , PipeHandle * ph"		1065051	3					
ANR	1065106	Parameter	int index	1712:38:49119:49127	1065051	0	True				
ANR	1065107	ParameterType	int		1065051	0					
ANR	1065108	Identifier	index		1065051	1					
ANR	1065109	Parameter	PipeHandle * ph	1712:49:49130:49143	1065051	1	True				
ANR	1065110	ParameterType	PipeHandle *		1065051	0					
ANR	1065111	Identifier	ph		1065051	1					
ANR	1065112	CFGEntryNode	ENTRY		1065051		True				
ANR	1065113	CFGExitNode	EXIT		1065051		True				
ANR	1065114	Symbol	pipeHandleTable		1065051						
ANR	1065115	Symbol	NULL		1065051						
ANR	1065116	Symbol	tmp_ph		1065051						
ANR	1065117	Symbol	* pipeHandleTable		1065051						
ANR	1065118	Symbol	* index		1065051						
ANR	1065119	Symbol	ph		1065051						
ANR	1065120	Symbol	* * pipeHandleTable		1065051						
ANR	1065121	Symbol	index		1065051						
ANR	1065122	Symbol	TRUE		1065051						
ANR	1065123	Symbol	maxPipeHandleIndex		1065051						
ANR	1065124	Symbol	FALSE		1065051						
ANR	1065125	Symbol	* ph		1065051						
ANR	1065126	Function	DaemonCore :: Create_Pipe	1727:0:49374:50105							
ANR	1065127	FunctionDef	"DaemonCore :: Create_Pipe (int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize)"		1065126	0					
ANR	1065128	CompoundStatement		1733:0:49575:50105	1065126	0					
ANR	1065129	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Entering Create_Pipe()\\n"" )"	1734:1:49578:49626	1065126	0	True				
ANR	1065130	CallExpression	"dprintf ( D_DAEMONCORE , ""Entering Create_Pipe()\\n"" )"		1065126	0					
ANR	1065131	Callee	dprintf		1065126	0					
ANR	1065132	Identifier	dprintf		1065126	0					
ANR	1065133	ArgumentList	D_DAEMONCORE		1065126	1					
ANR	1065134	Argument	D_DAEMONCORE		1065126	0					
ANR	1065135	Identifier	D_DAEMONCORE		1065126	0					
ANR	1065136	Argument	"""Entering Create_Pipe()\\n"""		1065126	1					
ANR	1065137	PrimaryExpression	"""Entering Create_Pipe()\\n"""		1065126	0					
ANR	1065138	Statement	static	1736:1:49642:49647	1065126	1	True				
ANR	1065139	IdentifierDeclStatement	unsigned pipe_counter = 0 ;	1736:8:49649:49674	1065126	2	True				
ANR	1065140	IdentifierDecl	pipe_counter = 0		1065126	0					
ANR	1065141	IdentifierDeclType	unsigned		1065126	0					
ANR	1065142	Identifier	pipe_counter		1065126	1					
ANR	1065143	AssignmentExpression	pipe_counter = 0		1065126	2		=			
ANR	1065144	Identifier	pipe_counter		1065126	0					
ANR	1065145	PrimaryExpression	0		1065126	1					
ANR	1065146	IdentifierDeclStatement	MyString pipe_name ;	1737:1:49677:49695	1065126	3	True				
ANR	1065147	IdentifierDecl	pipe_name		1065126	0					
ANR	1065148	IdentifierDeclType	MyString		1065126	0					
ANR	1065149	Identifier	pipe_name		1065126	1					
ANR	1065150	ExpressionStatement	"pipe_name . sprintf ( ""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"" , GetCurrentProcessId ( ) , pipe_counter ++ )"	1738:1:49698:49788	1065126	4	True				
ANR	1065151	CallExpression	"pipe_name . sprintf ( ""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"" , GetCurrentProcessId ( ) , pipe_counter ++ )"		1065126	0					
ANR	1065152	Callee	pipe_name . sprintf		1065126	0					
ANR	1065153	MemberAccess	pipe_name . sprintf		1065126	0					
ANR	1065154	Identifier	pipe_name		1065126	0					
ANR	1065155	Identifier	sprintf		1065126	1					
ANR	1065156	ArgumentList	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		1065126	1					
ANR	1065157	Argument	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		1065126	0					
ANR	1065158	PrimaryExpression	"""\\\\\\\\.\\\\pipe\\\\condor_pipe_%u_%u"""		1065126	0					
ANR	1065159	Argument	GetCurrentProcessId ( )		1065126	1					
ANR	1065160	CallExpression	GetCurrentProcessId ( )		1065126	0					
ANR	1065161	Callee	GetCurrentProcessId		1065126	0					
ANR	1065162	Identifier	GetCurrentProcessId		1065126	0					
ANR	1065163	ArgumentList			1065126	1					
ANR	1065164	Argument	pipe_counter ++		1065126	2					
ANR	1065165	PostIncDecOperationExpression	pipe_counter ++		1065126	0					
ANR	1065166	Identifier	pipe_counter		1065126	0					
ANR	1065167	IncDec	++		1065126	1					
ANR	1065168	ReturnStatement	"return Create_Named_Pipe ( pipe_ends , can_register_read , can_register_write , nonblocking_read , nonblocking_write , psize , pipe_name . Value ( ) ) ;"	1739:1:49791:49940	1065126	5	True				
ANR	1065169	CallExpression	"Create_Named_Pipe ( pipe_ends , can_register_read , can_register_write , nonblocking_read , nonblocking_write , psize , pipe_name . Value ( ) )"		1065126	0					
ANR	1065170	Callee	Create_Named_Pipe		1065126	0					
ANR	1065171	Identifier	Create_Named_Pipe		1065126	0					
ANR	1065172	ArgumentList	pipe_ends		1065126	1					
ANR	1065173	Argument	pipe_ends		1065126	0					
ANR	1065174	Identifier	pipe_ends		1065126	0					
ANR	1065175	Argument	can_register_read		1065126	1					
ANR	1065176	Identifier	can_register_read		1065126	0					
ANR	1065177	Argument	can_register_write		1065126	2					
ANR	1065178	Identifier	can_register_write		1065126	0					
ANR	1065179	Argument	nonblocking_read		1065126	3					
ANR	1065180	Identifier	nonblocking_read		1065126	0					
ANR	1065181	Argument	nonblocking_write		1065126	4					
ANR	1065182	Identifier	nonblocking_write		1065126	0					
ANR	1065183	Argument	psize		1065126	5					
ANR	1065184	Identifier	psize		1065126	0					
ANR	1065185	Argument	pipe_name . Value ( )		1065126	6					
ANR	1065186	CallExpression	pipe_name . Value ( )		1065126	0					
ANR	1065187	Callee	pipe_name . Value		1065126	0					
ANR	1065188	MemberAccess	pipe_name . Value		1065126	0					
ANR	1065189	Identifier	pipe_name		1065126	0					
ANR	1065190	Identifier	Value		1065126	1					
ANR	1065191	ArgumentList			1065126	1					
ANR	1065192	ReturnType	int		1065126	1					
ANR	1065193	Identifier	DaemonCore :: Create_Pipe		1065126	2					
ANR	1065194	ParameterList	"int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize"		1065126	3					
ANR	1065195	Parameter	int * pipe_ends	1727:29:49403:49416	1065126	0	True				
ANR	1065196	ParameterType	int *		1065126	0					
ANR	1065197	Identifier	pipe_ends		1065126	1					
ANR	1065198	Parameter	bool can_register_read	1728:8:49427:49448	1065126	1	True				
ANR	1065199	ParameterType	bool		1065126	0					
ANR	1065200	Identifier	can_register_read		1065126	1					
ANR	1065201	Parameter	bool can_register_write	1729:8:49459:49481	1065126	2	True				
ANR	1065202	ParameterType	bool		1065126	0					
ANR	1065203	Identifier	can_register_write		1065126	1					
ANR	1065204	Parameter	bool nonblocking_read	1730:8:49492:49512	1065126	3	True				
ANR	1065205	ParameterType	bool		1065126	0					
ANR	1065206	Identifier	nonblocking_read		1065126	1					
ANR	1065207	Parameter	bool nonblocking_write	1731:8:49523:49544	1065126	4	True				
ANR	1065208	ParameterType	bool		1065126	0					
ANR	1065209	Identifier	nonblocking_write		1065126	1					
ANR	1065210	Parameter	unsigned int psize	1732:8:49555:49572	1065126	5	True				
ANR	1065211	ParameterType	unsigned int		1065126	0					
ANR	1065212	Identifier	psize		1065126	1					
ANR	1065213	CFGEntryNode	ENTRY		1065126		True				
ANR	1065214	CFGExitNode	EXIT		1065126		True				
ANR	1065215	Symbol	pipe_ends		1065126						
ANR	1065216	Symbol	psize		1065126						
ANR	1065217	Symbol	pipe_name		1065126						
ANR	1065218	Symbol	can_register_read		1065126						
ANR	1065219	Symbol	D_DAEMONCORE		1065126						
ANR	1065220	Symbol	pipe_name . Value		1065126						
ANR	1065221	Symbol	pipe_counter		1065126						
ANR	1065222	Symbol	Create_Named_Pipe		1065126						
ANR	1065223	Symbol	can_register_write		1065126						
ANR	1065224	Symbol	GetCurrentProcessId		1065126						
ANR	1065225	Symbol	nonblocking_read		1065126						
ANR	1065226	Symbol	nonblocking_write		1065126						
ANR	1065227	Function	DaemonCore :: Create_Named_Pipe	1758:0:50108:53792							
ANR	1065228	FunctionDef	"DaemonCore :: Create_Named_Pipe (int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize , const char * pipe_name)"		1065227	0					
ANR	1065229	CompoundStatement		1765:0:50343:53792	1065227	0					
ANR	1065230	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Entering Create_Named_Pipe()\\n"" )"	1766:1:50346:50400	1065227	0	True				
ANR	1065231	CallExpression	"dprintf ( D_DAEMONCORE , ""Entering Create_Named_Pipe()\\n"" )"		1065227	0					
ANR	1065232	Callee	dprintf		1065227	0					
ANR	1065233	Identifier	dprintf		1065227	0					
ANR	1065234	ArgumentList	D_DAEMONCORE		1065227	1					
ANR	1065235	Argument	D_DAEMONCORE		1065227	0					
ANR	1065236	Identifier	D_DAEMONCORE		1065227	0					
ANR	1065237	Argument	"""Entering Create_Named_Pipe()\\n"""		1065227	1					
ANR	1065238	PrimaryExpression	"""Entering Create_Named_Pipe()\\n"""		1065227	0					
ANR	1065239	IdentifierDeclStatement	"PipeHandle read_handle , write_handle ;"	1768:1:50404:50440	1065227	1	True				
ANR	1065240	IdentifierDecl	read_handle		1065227	0					
ANR	1065241	IdentifierDeclType	PipeHandle		1065227	0					
ANR	1065242	Identifier	read_handle		1065227	1					
ANR	1065243	IdentifierDecl	write_handle		1065227	1					
ANR	1065244	IdentifierDeclType	PipeHandle		1065227	0					
ANR	1065245	Identifier	write_handle		1065227	1					
ANR	1065246	IdentifierDeclStatement	"DWORD overlapped_read_flag = 0 , overlapped_write_flag = 0 ;"	1771:1:50457:50514	1065227	2	True				
ANR	1065247	IdentifierDecl	overlapped_read_flag = 0		1065227	0					
ANR	1065248	IdentifierDeclType	DWORD		1065227	0					
ANR	1065249	Identifier	overlapped_read_flag		1065227	1					
ANR	1065250	AssignmentExpression	overlapped_read_flag = 0		1065227	2		=			
ANR	1065251	Identifier	overlapped_read_flag		1065227	0					
ANR	1065252	PrimaryExpression	0		1065227	1					
ANR	1065253	IdentifierDecl	overlapped_write_flag = 0		1065227	1					
ANR	1065254	IdentifierDeclType	DWORD		1065227	0					
ANR	1065255	Identifier	overlapped_write_flag		1065227	1					
ANR	1065256	AssignmentExpression	overlapped_write_flag = 0		1065227	2		=			
ANR	1065257	Identifier	overlapped_write_flag		1065227	0					
ANR	1065258	PrimaryExpression	0		1065227	1					
ANR	1065259	IfStatement	if ( can_register_read )		1065227	3					
ANR	1065260	Condition	can_register_read	1772:5:50521:50537	1065227	0	True				
ANR	1065261	Identifier	can_register_read		1065227	0					
ANR	1065262	CompoundStatement		8:24:196:196	1065227	1					
ANR	1065263	ExpressionStatement	overlapped_read_flag = FILE_FLAG_OVERLAPPED	1773:2:50544:50587	1065227	0	True				
ANR	1065264	AssignmentExpression	overlapped_read_flag = FILE_FLAG_OVERLAPPED		1065227	0		=			
ANR	1065265	Identifier	overlapped_read_flag		1065227	0					
ANR	1065266	Identifier	FILE_FLAG_OVERLAPPED		1065227	1					
ANR	1065267	IfStatement	if ( can_register_write || nonblocking_write )		1065227	4					
ANR	1065268	Condition	can_register_write || nonblocking_write	1775:5:50597:50635	1065227	0	True				
ANR	1065269	OrExpression	can_register_write || nonblocking_write		1065227	0		||			
ANR	1065270	Identifier	can_register_write		1065227	0					
ANR	1065271	Identifier	nonblocking_write		1065227	1					
ANR	1065272	CompoundStatement		11:46:294:294	1065227	1					
ANR	1065273	ExpressionStatement	overlapped_write_flag = FILE_FLAG_OVERLAPPED	1776:2:50642:50686	1065227	0	True				
ANR	1065274	AssignmentExpression	overlapped_write_flag = FILE_FLAG_OVERLAPPED		1065227	0		=			
ANR	1065275	Identifier	overlapped_write_flag		1065227	0					
ANR	1065276	Identifier	FILE_FLAG_OVERLAPPED		1065227	1					
ANR	1065277	IdentifierDeclStatement	"HANDLE w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL ) ;"	1779:1:50693:51188	1065227	5	True				
ANR	1065278	IdentifierDecl	"w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		1065227	0					
ANR	1065279	IdentifierDeclType	HANDLE		1065227	0					
ANR	1065280	Identifier	w		1065227	1					
ANR	1065281	AssignmentExpression	"w = CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		1065227	2		=			
ANR	1065282	Identifier	w		1065227	0					
ANR	1065283	CallExpression	"CreateNamedPipe ( pipe_name , PIPE_ACCESS_OUTBOUND | overlapped_write_flag , 0 , PIPE_UNLIMITED_INSTANCES , psize , 0 , 0 , NULL )"		1065227	1					
ANR	1065284	Callee	CreateNamedPipe		1065227	0					
ANR	1065285	Identifier	CreateNamedPipe		1065227	0					
ANR	1065286	ArgumentList	pipe_name		1065227	1					
ANR	1065287	Argument	pipe_name		1065227	0					
ANR	1065288	Identifier	pipe_name		1065227	0					
ANR	1065289	Argument	PIPE_ACCESS_OUTBOUND | overlapped_write_flag		1065227	1					
ANR	1065290	InclusiveOrExpression	PIPE_ACCESS_OUTBOUND | overlapped_write_flag		1065227	0		|			
ANR	1065291	Identifier	PIPE_ACCESS_OUTBOUND		1065227	0					
ANR	1065292	Identifier	overlapped_write_flag		1065227	1					
ANR	1065293	Argument	0		1065227	2					
ANR	1065294	PrimaryExpression	0		1065227	0					
ANR	1065295	Argument	PIPE_UNLIMITED_INSTANCES		1065227	3					
ANR	1065296	Identifier	PIPE_UNLIMITED_INSTANCES		1065227	0					
ANR	1065297	Argument	psize		1065227	4					
ANR	1065298	Identifier	psize		1065227	0					
ANR	1065299	Argument	0		1065227	5					
ANR	1065300	PrimaryExpression	0		1065227	0					
ANR	1065301	Argument	0		1065227	6					
ANR	1065302	PrimaryExpression	0		1065227	0					
ANR	1065303	Argument	NULL		1065227	7					
ANR	1065304	Identifier	NULL		1065227	0					
ANR	1065305	IfStatement	if ( w == INVALID_HANDLE_VALUE )		1065227	6					
ANR	1065306	Condition	w == INVALID_HANDLE_VALUE	1789:5:51265:51289	1065227	0	True				
ANR	1065307	EqualityExpression	w == INVALID_HANDLE_VALUE		1065227	0		==			
ANR	1065308	Identifier	w		1065227	0					
ANR	1065309	Identifier	INVALID_HANDLE_VALUE		1065227	1					
ANR	1065310	CompoundStatement		25:32:948:948	1065227	1					
ANR	1065311	ExpressionStatement	"dprintf ( D_ALWAYS , ""CreateNamedPipe(%s) error: %d\\n"" , pipe_name , GetLastError ( ) )"	1790:2:51296:51379	1065227	0	True				
ANR	1065312	CallExpression	"dprintf ( D_ALWAYS , ""CreateNamedPipe(%s) error: %d\\n"" , pipe_name , GetLastError ( ) )"		1065227	0					
ANR	1065313	Callee	dprintf		1065227	0					
ANR	1065314	Identifier	dprintf		1065227	0					
ANR	1065315	ArgumentList	D_ALWAYS		1065227	1					
ANR	1065316	Argument	D_ALWAYS		1065227	0					
ANR	1065317	Identifier	D_ALWAYS		1065227	0					
ANR	1065318	Argument	"""CreateNamedPipe(%s) error: %d\\n"""		1065227	1					
ANR	1065319	PrimaryExpression	"""CreateNamedPipe(%s) error: %d\\n"""		1065227	0					
ANR	1065320	Argument	pipe_name		1065227	2					
ANR	1065321	Identifier	pipe_name		1065227	0					
ANR	1065322	Argument	GetLastError ( )		1065227	3					
ANR	1065323	CallExpression	GetLastError ( )		1065227	0					
ANR	1065324	Callee	GetLastError		1065227	0					
ANR	1065325	Identifier	GetLastError		1065227	0					
ANR	1065326	ArgumentList			1065227	1					
ANR	1065327	ReturnStatement	return FALSE ;	1792:2:51383:51395	1065227	1	True				
ANR	1065328	Identifier	FALSE		1065227	0					
ANR	1065329	IdentifierDeclStatement	"HANDLE r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL ) ;"	1794:1:51401:51764	1065227	7	True				
ANR	1065330	IdentifierDecl	"r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		1065227	0					
ANR	1065331	IdentifierDeclType	HANDLE		1065227	0					
ANR	1065332	Identifier	r		1065227	1					
ANR	1065333	AssignmentExpression	"r = CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		1065227	2		=			
ANR	1065334	Identifier	r		1065227	0					
ANR	1065335	CallExpression	"CreateFile ( pipe_name , GENERIC_READ , 0 , NULL , OPEN_EXISTING , overlapped_read_flag , NULL )"		1065227	1					
ANR	1065336	Callee	CreateFile		1065227	0					
ANR	1065337	Identifier	CreateFile		1065227	0					
ANR	1065338	ArgumentList	pipe_name		1065227	1					
ANR	1065339	Argument	pipe_name		1065227	0					
ANR	1065340	Identifier	pipe_name		1065227	0					
ANR	1065341	Argument	GENERIC_READ		1065227	1					
ANR	1065342	Identifier	GENERIC_READ		1065227	0					
ANR	1065343	Argument	0		1065227	2					
ANR	1065344	PrimaryExpression	0		1065227	0					
ANR	1065345	Argument	NULL		1065227	3					
ANR	1065346	Identifier	NULL		1065227	0					
ANR	1065347	Argument	OPEN_EXISTING		1065227	4					
ANR	1065348	Identifier	OPEN_EXISTING		1065227	0					
ANR	1065349	Argument	overlapped_read_flag		1065227	5					
ANR	1065350	Identifier	overlapped_read_flag		1065227	0					
ANR	1065351	Argument	NULL		1065227	6					
ANR	1065352	Identifier	NULL		1065227	0					
ANR	1065353	IfStatement	if ( r == INVALID_HANDLE_VALUE )		1065227	8					
ANR	1065354	Condition	r == INVALID_HANDLE_VALUE	1802:5:51809:51833	1065227	0	True				
ANR	1065355	EqualityExpression	r == INVALID_HANDLE_VALUE		1065227	0		==			
ANR	1065356	Identifier	r		1065227	0					
ANR	1065357	Identifier	INVALID_HANDLE_VALUE		1065227	1					
ANR	1065358	CompoundStatement		38:32:1492:1492	1065227	1					
ANR	1065359	ExpressionStatement	CloseHandle ( w )	1803:2:51840:51854	1065227	0	True				
ANR	1065360	CallExpression	CloseHandle ( w )		1065227	0					
ANR	1065361	Callee	CloseHandle		1065227	0					
ANR	1065362	Identifier	CloseHandle		1065227	0					
ANR	1065363	ArgumentList	w		1065227	1					
ANR	1065364	Argument	w		1065227	0					
ANR	1065365	Identifier	w		1065227	0					
ANR	1065366	ExpressionStatement	"dprintf ( D_ALWAYS , ""CreateFile(%s) error on named pipe: %d\\n"" , pipe_name , GetLastError ( ) )"	1804:2:51858:51950	1065227	1	True				
ANR	1065367	CallExpression	"dprintf ( D_ALWAYS , ""CreateFile(%s) error on named pipe: %d\\n"" , pipe_name , GetLastError ( ) )"		1065227	0					
ANR	1065368	Callee	dprintf		1065227	0					
ANR	1065369	Identifier	dprintf		1065227	0					
ANR	1065370	ArgumentList	D_ALWAYS		1065227	1					
ANR	1065371	Argument	D_ALWAYS		1065227	0					
ANR	1065372	Identifier	D_ALWAYS		1065227	0					
ANR	1065373	Argument	"""CreateFile(%s) error on named pipe: %d\\n"""		1065227	1					
ANR	1065374	PrimaryExpression	"""CreateFile(%s) error on named pipe: %d\\n"""		1065227	0					
ANR	1065375	Argument	pipe_name		1065227	2					
ANR	1065376	Identifier	pipe_name		1065227	0					
ANR	1065377	Argument	GetLastError ( )		1065227	3					
ANR	1065378	CallExpression	GetLastError ( )		1065227	0					
ANR	1065379	Callee	GetLastError		1065227	0					
ANR	1065380	Identifier	GetLastError		1065227	0					
ANR	1065381	ArgumentList			1065227	1					
ANR	1065382	ReturnStatement	return FALSE ;	1806:2:51954:51966	1065227	2	True				
ANR	1065383	Identifier	FALSE		1065227	0					
ANR	1065384	ExpressionStatement	"read_handle = new ReadPipeEnd ( r , overlapped_read_flag , nonblocking_read , psize )"	1808:1:51972:52051	1065227	9	True				
ANR	1065385	AssignmentExpression	"read_handle = new ReadPipeEnd ( r , overlapped_read_flag , nonblocking_read , psize )"		1065227	0		=			
ANR	1065386	Identifier	read_handle		1065227	0					
ANR	1065387	Expression	"r , overlapped_read_flag , nonblocking_read , psize"		1065227	1					
ANR	1065388	Identifier	r		1065227	0					
ANR	1065389	Expression	"overlapped_read_flag , nonblocking_read , psize"		1065227	1					
ANR	1065390	Identifier	overlapped_read_flag		1065227	0					
ANR	1065391	Expression	"nonblocking_read , psize"		1065227	1					
ANR	1065392	Identifier	nonblocking_read		1065227	0					
ANR	1065393	Identifier	psize		1065227	1					
ANR	1065394	ExpressionStatement	"write_handle = new WritePipeEnd ( w , overlapped_write_flag , nonblocking_write , psize )"	1809:1:52054:52137	1065227	10	True				
ANR	1065395	AssignmentExpression	"write_handle = new WritePipeEnd ( w , overlapped_write_flag , nonblocking_write , psize )"		1065227	0		=			
ANR	1065396	Identifier	write_handle		1065227	0					
ANR	1065397	Expression	"w , overlapped_write_flag , nonblocking_write , psize"		1065227	1					
ANR	1065398	Identifier	w		1065227	0					
ANR	1065399	Expression	"overlapped_write_flag , nonblocking_write , psize"		1065227	1					
ANR	1065400	Identifier	overlapped_write_flag		1065227	0					
ANR	1065401	Expression	"nonblocking_write , psize"		1065227	1					
ANR	1065402	Identifier	nonblocking_write		1065227	0					
ANR	1065403	Identifier	psize		1065227	1					
ANR	1065404	ExpressionStatement	pipe_ends [ 0 ] = pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET	1867:1:53516:53585	1065227	11	True				
ANR	1065405	AssignmentExpression	pipe_ends [ 0 ] = pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET		1065227	0		=			
ANR	1065406	ArrayIndexing	pipe_ends [ 0 ]		1065227	0					
ANR	1065407	Identifier	pipe_ends		1065227	0					
ANR	1065408	PrimaryExpression	0		1065227	1					
ANR	1065409	AdditiveExpression	pipeHandleTableInsert ( read_handle ) + PIPE_INDEX_OFFSET		1065227	1		+			
ANR	1065410	CallExpression	pipeHandleTableInsert ( read_handle )		1065227	0					
ANR	1065411	Callee	pipeHandleTableInsert		1065227	0					
ANR	1065412	Identifier	pipeHandleTableInsert		1065227	0					
ANR	1065413	ArgumentList	read_handle		1065227	1					
ANR	1065414	Argument	read_handle		1065227	0					
ANR	1065415	Identifier	read_handle		1065227	0					
ANR	1065416	Identifier	PIPE_INDEX_OFFSET		1065227	1					
ANR	1065417	ExpressionStatement	pipe_ends [ 1 ] = pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET	1868:1:53588:53658	1065227	12	True				
ANR	1065418	AssignmentExpression	pipe_ends [ 1 ] = pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET		1065227	0		=			
ANR	1065419	ArrayIndexing	pipe_ends [ 1 ]		1065227	0					
ANR	1065420	Identifier	pipe_ends		1065227	0					
ANR	1065421	PrimaryExpression	1		1065227	1					
ANR	1065422	AdditiveExpression	pipeHandleTableInsert ( write_handle ) + PIPE_INDEX_OFFSET		1065227	1		+			
ANR	1065423	CallExpression	pipeHandleTableInsert ( write_handle )		1065227	0					
ANR	1065424	Callee	pipeHandleTableInsert		1065227	0					
ANR	1065425	Identifier	pipeHandleTableInsert		1065227	0					
ANR	1065426	ArgumentList	write_handle		1065227	1					
ANR	1065427	Argument	write_handle		1065227	0					
ANR	1065428	Identifier	write_handle		1065227	0					
ANR	1065429	Identifier	PIPE_INDEX_OFFSET		1065227	1					
ANR	1065430	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Pipe() success read_handle=%d write_handle=%d\\n"" , pipe_ends [ 0 ] , pipe_ends [ 1 ] )"	1870:1:53662:53776	1065227	13	True				
ANR	1065431	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Pipe() success read_handle=%d write_handle=%d\\n"" , pipe_ends [ 0 ] , pipe_ends [ 1 ] )"		1065227	0					
ANR	1065432	Callee	dprintf		1065227	0					
ANR	1065433	Identifier	dprintf		1065227	0					
ANR	1065434	ArgumentList	D_DAEMONCORE		1065227	1					
ANR	1065435	Argument	D_DAEMONCORE		1065227	0					
ANR	1065436	Identifier	D_DAEMONCORE		1065227	0					
ANR	1065437	Argument	"""Create_Pipe() success read_handle=%d write_handle=%d\\n"""		1065227	1					
ANR	1065438	PrimaryExpression	"""Create_Pipe() success read_handle=%d write_handle=%d\\n"""		1065227	0					
ANR	1065439	Argument	pipe_ends [ 0 ]		1065227	2					
ANR	1065440	ArrayIndexing	pipe_ends [ 0 ]		1065227	0					
ANR	1065441	Identifier	pipe_ends		1065227	0					
ANR	1065442	PrimaryExpression	0		1065227	1					
ANR	1065443	Argument	pipe_ends [ 1 ]		1065227	3					
ANR	1065444	ArrayIndexing	pipe_ends [ 1 ]		1065227	0					
ANR	1065445	Identifier	pipe_ends		1065227	0					
ANR	1065446	PrimaryExpression	1		1065227	1					
ANR	1065447	ReturnStatement	return TRUE ;	1872:1:53779:53790	1065227	14	True				
ANR	1065448	Identifier	TRUE		1065227	0					
ANR	1065449	ReturnType	int		1065227	1					
ANR	1065450	Identifier	DaemonCore :: Create_Named_Pipe		1065227	2					
ANR	1065451	ParameterList	"int * pipe_ends , bool can_register_read , bool can_register_write , bool nonblocking_read , bool nonblocking_write , unsigned int psize , const char * pipe_name"		1065227	3					
ANR	1065452	Parameter	int * pipe_ends	1758:35:50143:50156	1065227	0	True				
ANR	1065453	ParameterType	int *		1065227	0					
ANR	1065454	Identifier	pipe_ends		1065227	1					
ANR	1065455	Parameter	bool can_register_read	1759:8:50167:50188	1065227	1	True				
ANR	1065456	ParameterType	bool		1065227	0					
ANR	1065457	Identifier	can_register_read		1065227	1					
ANR	1065458	Parameter	bool can_register_write	1760:8:50199:50221	1065227	2	True				
ANR	1065459	ParameterType	bool		1065227	0					
ANR	1065460	Identifier	can_register_write		1065227	1					
ANR	1065461	Parameter	bool nonblocking_read	1761:8:50232:50252	1065227	3	True				
ANR	1065462	ParameterType	bool		1065227	0					
ANR	1065463	Identifier	nonblocking_read		1065227	1					
ANR	1065464	Parameter	bool nonblocking_write	1762:8:50263:50284	1065227	4	True				
ANR	1065465	ParameterType	bool		1065227	0					
ANR	1065466	Identifier	nonblocking_write		1065227	1					
ANR	1065467	Parameter	unsigned int psize	1763:8:50295:50312	1065227	5	True				
ANR	1065468	ParameterType	unsigned int		1065227	0					
ANR	1065469	Identifier	psize		1065227	1					
ANR	1065470	Parameter	const char * pipe_name	1764:5:50320:50340	1065227	6	True				
ANR	1065471	ParameterType	const char *		1065227	0					
ANR	1065472	Identifier	pipe_name		1065227	1					
ANR	1065473	CFGEntryNode	ENTRY		1065227		True				
ANR	1065474	CFGExitNode	EXIT		1065227		True				
ANR	1065475	Symbol	can_register_write		1065227						
ANR	1065476	Symbol	CreateNamedPipe		1065227						
ANR	1065477	Symbol	nonblocking_write		1065227						
ANR	1065478	Symbol	* pipe_ends		1065227						
ANR	1065479	Symbol	overlapped_write_flag		1065227						
ANR	1065480	Symbol	CreateFile		1065227						
ANR	1065481	Symbol	psize		1065227						
ANR	1065482	Symbol	read_handle		1065227						
ANR	1065483	Symbol	FILE_FLAG_OVERLAPPED		1065227						
ANR	1065484	Symbol	OPEN_EXISTING		1065227						
ANR	1065485	Symbol	write_handle		1065227						
ANR	1065486	Symbol	pipe_ends		1065227						
ANR	1065487	Symbol	PIPE_INDEX_OFFSET		1065227						
ANR	1065488	Symbol	pipeHandleTableInsert		1065227						
ANR	1065489	Symbol	NULL		1065227						
ANR	1065490	Symbol	D_DAEMONCORE		1065227						
ANR	1065491	Symbol	PIPE_ACCESS_OUTBOUND		1065227						
ANR	1065492	Symbol	overlapped_read_flag		1065227						
ANR	1065493	Symbol	GENERIC_READ		1065227						
ANR	1065494	Symbol	D_ALWAYS		1065227						
ANR	1065495	Symbol	TRUE		1065227						
ANR	1065496	Symbol	nonblocking_read		1065227						
ANR	1065497	Symbol	INVALID_HANDLE_VALUE		1065227						
ANR	1065498	Symbol	pipe_name		1065227						
ANR	1065499	Symbol	can_register_read		1065227						
ANR	1065500	Symbol	r		1065227						
ANR	1065501	Symbol	GetLastError		1065227						
ANR	1065502	Symbol	w		1065227						
ANR	1065503	Symbol	FALSE		1065227						
ANR	1065504	Symbol	PIPE_UNLIMITED_INSTANCES		1065227						
ANR	1065505	Function	DaemonCore :: Inherit_Pipe	1875:0:53795:54418							
ANR	1065506	FunctionDef	"DaemonCore :: Inherit_Pipe (int fd , bool is_write , bool can_register , bool nonblocking , int psize)"		1065505	0					
ANR	1065507	CompoundStatement		1876:0:53895:54418	1065505	0					
ANR	1065508	IdentifierDeclStatement	PipeHandle pipe_handle ;	1877:1:53898:53920	1065505	0	True				
ANR	1065509	IdentifierDecl	pipe_handle		1065505	0					
ANR	1065510	IdentifierDeclType	PipeHandle		1065505	0					
ANR	1065511	Identifier	pipe_handle		1065505	1					
ANR	1065512	IdentifierDeclStatement	HANDLE h = ( HANDLE ) _get_osfhandle ( fd ) ;	1880:1:53943:53980	1065505	1	True				
ANR	1065513	IdentifierDecl	h = ( HANDLE ) _get_osfhandle ( fd )		1065505	0					
ANR	1065514	IdentifierDeclType	HANDLE		1065505	0					
ANR	1065515	Identifier	h		1065505	1					
ANR	1065516	AssignmentExpression	h = ( HANDLE ) _get_osfhandle ( fd )		1065505	2		=			
ANR	1065517	Identifier	h		1065505	0					
ANR	1065518	CastExpression	( HANDLE ) _get_osfhandle ( fd )		1065505	1					
ANR	1065519	CastTarget	HANDLE		1065505	0					
ANR	1065520	CallExpression	_get_osfhandle ( fd )		1065505	1					
ANR	1065521	Callee	_get_osfhandle		1065505	0					
ANR	1065522	Identifier	_get_osfhandle		1065505	0					
ANR	1065523	ArgumentList	fd		1065505	1					
ANR	1065524	Argument	fd		1065505	0					
ANR	1065525	Identifier	fd		1065505	0					
ANR	1065526	IfStatement	if ( is_write )		1065505	2					
ANR	1065527	Condition	is_write	1881:5:53987:53994	1065505	0	True				
ANR	1065528	Identifier	is_write		1065505	0					
ANR	1065529	CompoundStatement		6:15:101:101	1065505	1					
ANR	1065530	ExpressionStatement	"pipe_handle = new WritePipeEnd ( h , can_register , nonblocking , psize )"	1882:2:54001:54068	1065505	0	True				
ANR	1065531	AssignmentExpression	"pipe_handle = new WritePipeEnd ( h , can_register , nonblocking , psize )"		1065505	0		=			
ANR	1065532	Identifier	pipe_handle		1065505	0					
ANR	1065533	Expression	"h , can_register , nonblocking , psize"		1065505	1					
ANR	1065534	Identifier	h		1065505	0					
ANR	1065535	Expression	"can_register , nonblocking , psize"		1065505	1					
ANR	1065536	Identifier	can_register		1065505	0					
ANR	1065537	Expression	"nonblocking , psize"		1065505	1					
ANR	1065538	Identifier	nonblocking		1065505	0					
ANR	1065539	Identifier	psize		1065505	1					
ANR	1065540	ElseStatement	else		1065505	0					
ANR	1065541	CompoundStatement		9:6:183:183	1065505	0					
ANR	1065542	ExpressionStatement	"pipe_handle = new ReadPipeEnd ( h , can_register , nonblocking , psize )"	1885:2:54083:54149	1065505	0	True				
ANR	1065543	AssignmentExpression	"pipe_handle = new ReadPipeEnd ( h , can_register , nonblocking , psize )"		1065505	0		=			
ANR	1065544	Identifier	pipe_handle		1065505	0					
ANR	1065545	Expression	"h , can_register , nonblocking , psize"		1065505	1					
ANR	1065546	Identifier	h		1065505	0					
ANR	1065547	Expression	"can_register , nonblocking , psize"		1065505	1					
ANR	1065548	Identifier	can_register		1065505	0					
ANR	1065549	Expression	"nonblocking , psize"		1065505	1					
ANR	1065550	Identifier	nonblocking		1065505	0					
ANR	1065551	Identifier	psize		1065505	1					
ANR	1065552	ReturnStatement	return pipeHandleTableInsert ( pipe_handle ) + PIPE_INDEX_OFFSET ;	1898:1:54355:54416	1065505	3	True				
ANR	1065553	AdditiveExpression	pipeHandleTableInsert ( pipe_handle ) + PIPE_INDEX_OFFSET		1065505	0		+			
ANR	1065554	CallExpression	pipeHandleTableInsert ( pipe_handle )		1065505	0					
ANR	1065555	Callee	pipeHandleTableInsert		1065505	0					
ANR	1065556	Identifier	pipeHandleTableInsert		1065505	0					
ANR	1065557	ArgumentList	pipe_handle		1065505	1					
ANR	1065558	Argument	pipe_handle		1065505	0					
ANR	1065559	Identifier	pipe_handle		1065505	0					
ANR	1065560	Identifier	PIPE_INDEX_OFFSET		1065505	1					
ANR	1065561	ReturnType	int		1065505	1					
ANR	1065562	Identifier	DaemonCore :: Inherit_Pipe		1065505	2					
ANR	1065563	ParameterList	"int fd , bool is_write , bool can_register , bool nonblocking , int psize"		1065505	3					
ANR	1065564	Parameter	int fd	1875:29:53824:53829	1065505	0	True				
ANR	1065565	ParameterType	int		1065505	0					
ANR	1065566	Identifier	fd		1065505	1					
ANR	1065567	Parameter	bool is_write	1875:37:53832:53844	1065505	1	True				
ANR	1065568	ParameterType	bool		1065505	0					
ANR	1065569	Identifier	is_write		1065505	1					
ANR	1065570	Parameter	bool can_register	1875:52:53847:53863	1065505	2	True				
ANR	1065571	ParameterType	bool		1065505	0					
ANR	1065572	Identifier	can_register		1065505	1					
ANR	1065573	Parameter	bool nonblocking	1875:71:53866:53881	1065505	3	True				
ANR	1065574	ParameterType	bool		1065505	0					
ANR	1065575	Identifier	nonblocking		1065505	1					
ANR	1065576	Parameter	int psize	1875:89:53884:53892	1065505	4	True				
ANR	1065577	ParameterType	int		1065505	0					
ANR	1065578	Identifier	psize		1065505	1					
ANR	1065579	CFGEntryNode	ENTRY		1065505		True				
ANR	1065580	CFGExitNode	EXIT		1065505		True				
ANR	1065581	Symbol	PIPE_INDEX_OFFSET		1065505						
ANR	1065582	Symbol	psize		1065505						
ANR	1065583	Symbol	pipeHandleTableInsert		1065505						
ANR	1065584	Symbol	nonblocking		1065505						
ANR	1065585	Symbol	can_register		1065505						
ANR	1065586	Symbol	h		1065505						
ANR	1065587	Symbol	is_write		1065505						
ANR	1065588	Symbol	_get_osfhandle		1065505						
ANR	1065589	Symbol	fd		1065505						
ANR	1065590	Symbol	pipe_handle		1065505						
ANR	1065591	Function	DaemonCore :: Register_Pipe	1901:0:54421:57152							
ANR	1065592	FunctionDef	"DaemonCore :: Register_Pipe (int pipe_end , const char * pipe_descrip , PipeHandler handler , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm , int is_cpp)"		1065591	0					
ANR	1065593	CompoundStatement		1906:0:54653:57152	1065591	0					
ANR	1065594	IdentifierDeclStatement	int i ;	1907:4:54659:54668	1065591	0	True				
ANR	1065595	IdentifierDecl	i		1065591	0					
ANR	1065596	IdentifierDeclType	int		1065591	0					
ANR	1065597	Identifier	i		1065591	1					
ANR	1065598	IdentifierDeclStatement	int j ;	1908:4:54674:54683	1065591	1	True				
ANR	1065599	IdentifierDecl	j		1065591	0					
ANR	1065600	IdentifierDeclType	int		1065591	0					
ANR	1065601	Identifier	j		1065591	1					
ANR	1065602	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	1910:1:54687:54727	1065591	2	True				
ANR	1065603	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1065591	0					
ANR	1065604	IdentifierDeclType	int		1065591	0					
ANR	1065605	Identifier	index		1065591	1					
ANR	1065606	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1065591	2		=			
ANR	1065607	Identifier	index		1065591	0					
ANR	1065608	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1065591	1		-			
ANR	1065609	Identifier	pipe_end		1065591	0					
ANR	1065610	Identifier	PIPE_INDEX_OFFSET		1065591	1					
ANR	1065611	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		1065591	3					
ANR	1065612	Condition	pipeHandleTableLookup ( index ) == FALSE	1911:5:54734:54770	1065591	0	True				
ANR	1065613	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		1065591	0		==			
ANR	1065614	CallExpression	pipeHandleTableLookup ( index )		1065591	0					
ANR	1065615	Callee	pipeHandleTableLookup		1065591	0					
ANR	1065616	Identifier	pipeHandleTableLookup		1065591	0					
ANR	1065617	ArgumentList	index		1065591	1					
ANR	1065618	Argument	index		1065591	0					
ANR	1065619	Identifier	index		1065591	0					
ANR	1065620	Identifier	FALSE		1065591	1					
ANR	1065621	CompoundStatement		6:44:119:119	1065591	1					
ANR	1065622	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Register_Pipe: invalid index\\n"" )"	1912:2:54777:54832	1065591	0	True				
ANR	1065623	CallExpression	"dprintf ( D_DAEMONCORE , ""Register_Pipe: invalid index\\n"" )"		1065591	0					
ANR	1065624	Callee	dprintf		1065591	0					
ANR	1065625	Identifier	dprintf		1065591	0					
ANR	1065626	ArgumentList	D_DAEMONCORE		1065591	1					
ANR	1065627	Argument	D_DAEMONCORE		1065591	0					
ANR	1065628	Identifier	D_DAEMONCORE		1065591	0					
ANR	1065629	Argument	"""Register_Pipe: invalid index\\n"""		1065591	1					
ANR	1065630	PrimaryExpression	"""Register_Pipe: invalid index\\n"""		1065591	0					
ANR	1065631	ReturnStatement	return - 1 ;	1913:2:54836:54845	1065591	1	True				
ANR	1065632	UnaryOperationExpression	- 1		1065591	0					
ANR	1065633	UnaryOperator	-		1065591	0					
ANR	1065634	PrimaryExpression	1		1065591	1					
ANR	1065635	ExpressionStatement	i = nPipe	1916:1:54852:54861	1065591	4	True				
ANR	1065636	AssignmentExpression	i = nPipe		1065591	0		=			
ANR	1065637	Identifier	i		1065591	0					
ANR	1065638	Identifier	nPipe		1065591	1					
ANR	1065639	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		1065591	5					
ANR	1065640	Condition	( * pipeTable ) [ i ] . index != - 1	1919:6:54910:54936	1065591	0	True				
ANR	1065641	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		1065591	0		!=			
ANR	1065642	MemberAccess	( * pipeTable ) [ i ] . index		1065591	0					
ANR	1065643	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065644	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065645	UnaryOperator	*		1065591	0					
ANR	1065646	Identifier	pipeTable		1065591	1					
ANR	1065647	Identifier	i		1065591	1					
ANR	1065648	Identifier	index		1065591	1					
ANR	1065649	UnaryOperationExpression	- 1		1065591	1					
ANR	1065650	UnaryOperator	-		1065591	0					
ANR	1065651	PrimaryExpression	1		1065591	1					
ANR	1065652	CompoundStatement		14:36:286:286	1065591	1					
ANR	1065653	ExpressionStatement	"EXCEPT ( ""Pipe table fubar!  nPipe = %d"" , nPipe )"	1920:8:54950:54997	1065591	0	True				
ANR	1065654	CallExpression	"EXCEPT ( ""Pipe table fubar!  nPipe = %d"" , nPipe )"		1065591	0					
ANR	1065655	Callee	EXCEPT		1065591	0					
ANR	1065656	Identifier	EXCEPT		1065591	0					
ANR	1065657	ArgumentList	"""Pipe table fubar!  nPipe = %d"""		1065591	1					
ANR	1065658	Argument	"""Pipe table fubar!  nPipe = %d"""		1065591	0					
ANR	1065659	PrimaryExpression	"""Pipe table fubar!  nPipe = %d"""		1065591	0					
ANR	1065660	Argument	nPipe		1065591	1					
ANR	1065661	Identifier	nPipe		1065591	0					
ANR	1065662	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		1065591	6					
ANR	1065663	ForInit	j = 0 ;	1924:7:55070:55073	1065591	0	True				
ANR	1065664	AssignmentExpression	j = 0		1065591	0		=			
ANR	1065665	Identifier	j		1065591	0					
ANR	1065666	PrimaryExpression	0		1065591	1					
ANR	1065667	Condition	j < nPipe	1924:12:55075:55083	1065591	1	True				
ANR	1065668	RelationalExpression	j < nPipe		1065591	0		<			
ANR	1065669	Identifier	j		1065591	0					
ANR	1065670	Identifier	nPipe		1065591	1					
ANR	1065671	PostIncDecOperationExpression	j ++	1924:23:55086:55088	1065591	2	True				
ANR	1065672	Identifier	j		1065591	0					
ANR	1065673	IncDec	++		1065591	1					
ANR	1065674	CompoundStatement		20:1:439:439	1065591	3					
ANR	1065675	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		1065591	0					
ANR	1065676	Condition	( * pipeTable ) [ j ] . index == index	1926:7:55102:55131	1065591	0	True				
ANR	1065677	EqualityExpression	( * pipeTable ) [ j ] . index == index		1065591	0		==			
ANR	1065678	MemberAccess	( * pipeTable ) [ j ] . index		1065591	0					
ANR	1065679	ArrayIndexing	( * pipeTable ) [ j ]		1065591	0					
ANR	1065680	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065681	UnaryOperator	*		1065591	0					
ANR	1065682	Identifier	pipeTable		1065591	1					
ANR	1065683	Identifier	j		1065591	1					
ANR	1065684	Identifier	index		1065591	1					
ANR	1065685	Identifier	index		1065591	1					
ANR	1065686	CompoundStatement		21:40:481:481	1065591	1					
ANR	1065687	ExpressionStatement	"EXCEPT ( ""DaemonCore: Same pipe registered twice"" )"	1927:3:55140:55188	1065591	0	True				
ANR	1065688	CallExpression	"EXCEPT ( ""DaemonCore: Same pipe registered twice"" )"		1065591	0					
ANR	1065689	Callee	EXCEPT		1065591	0					
ANR	1065690	Identifier	EXCEPT		1065591	0					
ANR	1065691	ArgumentList	"""DaemonCore: Same pipe registered twice"""		1065591	1					
ANR	1065692	Argument	"""DaemonCore: Same pipe registered twice"""		1065591	0					
ANR	1065693	PrimaryExpression	"""DaemonCore: Same pipe registered twice"""		1065591	0					
ANR	1065694	ExpressionStatement	"dc_stats . New ( ""Pipe"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"	1931:4:55208:55293	1065591	7	True				
ANR	1065695	CallExpression	"dc_stats . New ( ""Pipe"" , handler_descrip , AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB )"		1065591	0					
ANR	1065696	Callee	dc_stats . New		1065591	0					
ANR	1065697	MemberAccess	dc_stats . New		1065591	0					
ANR	1065698	Identifier	dc_stats		1065591	0					
ANR	1065699	Identifier	New		1065591	1					
ANR	1065700	ArgumentList	"""Pipe"""		1065591	1					
ANR	1065701	Argument	"""Pipe"""		1065591	0					
ANR	1065702	PrimaryExpression	"""Pipe"""		1065591	0					
ANR	1065703	Argument	handler_descrip		1065591	1					
ANR	1065704	Identifier	handler_descrip		1065591	0					
ANR	1065705	Argument	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1065591	2					
ANR	1065706	InclusiveOrExpression	AS_COUNT | IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1065591	0		|			
ANR	1065707	Identifier	AS_COUNT		1065591	0					
ANR	1065708	InclusiveOrExpression	IS_RCT | IF_NONZERO | IF_VERBOSEPUB		1065591	1		|			
ANR	1065709	Identifier	IS_RCT		1065591	0					
ANR	1065710	InclusiveOrExpression	IF_NONZERO | IF_VERBOSEPUB		1065591	1		|			
ANR	1065711	Identifier	IF_NONZERO		1065591	0					
ANR	1065712	Identifier	IF_VERBOSEPUB		1065591	1					
ANR	1065713	ExpressionStatement	( * pipeTable ) [ i ] . pentry = NULL	1934:1:55358:55387	1065591	8	True				
ANR	1065714	AssignmentExpression	( * pipeTable ) [ i ] . pentry = NULL		1065591	0		=			
ANR	1065715	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1065716	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065717	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065718	UnaryOperator	*		1065591	0					
ANR	1065719	Identifier	pipeTable		1065591	1					
ANR	1065720	Identifier	i		1065591	1					
ANR	1065721	Identifier	pentry		1065591	1					
ANR	1065722	Identifier	NULL		1065591	1					
ANR	1065723	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	1935:1:55390:55426	1065591	9	True				
ANR	1065724	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		1065591	0		=			
ANR	1065725	MemberAccess	( * pipeTable ) [ i ] . call_handler		1065591	0					
ANR	1065726	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065727	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065728	UnaryOperator	*		1065591	0					
ANR	1065729	Identifier	pipeTable		1065591	1					
ANR	1065730	Identifier	i		1065591	1					
ANR	1065731	Identifier	call_handler		1065591	1					
ANR	1065732	Identifier	false		1065591	1					
ANR	1065733	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = false	1936:1:55429:55463	1065591	10	True				
ANR	1065734	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = false		1065591	0		=			
ANR	1065735	MemberAccess	( * pipeTable ) [ i ] . in_handler		1065591	0					
ANR	1065736	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065737	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065738	UnaryOperator	*		1065591	0					
ANR	1065739	Identifier	pipeTable		1065591	1					
ANR	1065740	Identifier	i		1065591	1					
ANR	1065741	Identifier	in_handler		1065591	1					
ANR	1065742	Identifier	false		1065591	1					
ANR	1065743	ExpressionStatement	( * pipeTable ) [ i ] . index = index	1937:1:55466:55495	1065591	11	True				
ANR	1065744	AssignmentExpression	( * pipeTable ) [ i ] . index = index		1065591	0		=			
ANR	1065745	MemberAccess	( * pipeTable ) [ i ] . index		1065591	0					
ANR	1065746	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065747	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065748	UnaryOperator	*		1065591	0					
ANR	1065749	Identifier	pipeTable		1065591	1					
ANR	1065750	Identifier	i		1065591	1					
ANR	1065751	Identifier	index		1065591	1					
ANR	1065752	Identifier	index		1065591	1					
ANR	1065753	ExpressionStatement	( * pipeTable ) [ i ] . handler = handler	1938:1:55498:55531	1065591	12	True				
ANR	1065754	AssignmentExpression	( * pipeTable ) [ i ] . handler = handler		1065591	0		=			
ANR	1065755	MemberAccess	( * pipeTable ) [ i ] . handler		1065591	0					
ANR	1065756	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065757	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065758	UnaryOperator	*		1065591	0					
ANR	1065759	Identifier	pipeTable		1065591	1					
ANR	1065760	Identifier	i		1065591	1					
ANR	1065761	Identifier	handler		1065591	1					
ANR	1065762	Identifier	handler		1065591	1					
ANR	1065763	ExpressionStatement	( * pipeTable ) [ i ] . handler_type = handler_type	1939:1:55534:55577	1065591	13	True				
ANR	1065764	AssignmentExpression	( * pipeTable ) [ i ] . handler_type = handler_type		1065591	0		=			
ANR	1065765	MemberAccess	( * pipeTable ) [ i ] . handler_type		1065591	0					
ANR	1065766	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065767	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065768	UnaryOperator	*		1065591	0					
ANR	1065769	Identifier	pipeTable		1065591	1					
ANR	1065770	Identifier	i		1065591	1					
ANR	1065771	Identifier	handler_type		1065591	1					
ANR	1065772	Identifier	handler_type		1065591	1					
ANR	1065773	ExpressionStatement	( * pipeTable ) [ i ] . handlercpp = handlercpp	1940:1:55580:55619	1065591	14	True				
ANR	1065774	AssignmentExpression	( * pipeTable ) [ i ] . handlercpp = handlercpp		1065591	0		=			
ANR	1065775	MemberAccess	( * pipeTable ) [ i ] . handlercpp		1065591	0					
ANR	1065776	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065777	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065778	UnaryOperator	*		1065591	0					
ANR	1065779	Identifier	pipeTable		1065591	1					
ANR	1065780	Identifier	i		1065591	1					
ANR	1065781	Identifier	handlercpp		1065591	1					
ANR	1065782	Identifier	handlercpp		1065591	1					
ANR	1065783	ExpressionStatement	( * pipeTable ) [ i ] . is_cpp = is_cpp	1941:1:55622:55653	1065591	15	True				
ANR	1065784	AssignmentExpression	( * pipeTable ) [ i ] . is_cpp = is_cpp		1065591	0		=			
ANR	1065785	MemberAccess	( * pipeTable ) [ i ] . is_cpp		1065591	0					
ANR	1065786	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065787	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065788	UnaryOperator	*		1065591	0					
ANR	1065789	Identifier	pipeTable		1065591	1					
ANR	1065790	Identifier	i		1065591	1					
ANR	1065791	Identifier	is_cpp		1065591	1					
ANR	1065792	Identifier	is_cpp		1065591	1					
ANR	1065793	ExpressionStatement	( * pipeTable ) [ i ] . perm = perm	1942:1:55656:55683	1065591	16	True				
ANR	1065794	AssignmentExpression	( * pipeTable ) [ i ] . perm = perm		1065591	0		=			
ANR	1065795	MemberAccess	( * pipeTable ) [ i ] . perm		1065591	0					
ANR	1065796	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065797	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065798	UnaryOperator	*		1065591	0					
ANR	1065799	Identifier	pipeTable		1065591	1					
ANR	1065800	Identifier	i		1065591	1					
ANR	1065801	Identifier	perm		1065591	1					
ANR	1065802	Identifier	perm		1065591	1					
ANR	1065803	ExpressionStatement	( * pipeTable ) [ i ] . service = s	1943:1:55686:55713	1065591	17	True				
ANR	1065804	AssignmentExpression	( * pipeTable ) [ i ] . service = s		1065591	0		=			
ANR	1065805	MemberAccess	( * pipeTable ) [ i ] . service		1065591	0					
ANR	1065806	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065807	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065808	UnaryOperator	*		1065591	0					
ANR	1065809	Identifier	pipeTable		1065591	1					
ANR	1065810	Identifier	i		1065591	1					
ANR	1065811	Identifier	service		1065591	1					
ANR	1065812	Identifier	s		1065591	1					
ANR	1065813	ExpressionStatement	( * pipeTable ) [ i ] . data_ptr = NULL	1944:1:55716:55747	1065591	18	True				
ANR	1065814	AssignmentExpression	( * pipeTable ) [ i ] . data_ptr = NULL		1065591	0		=			
ANR	1065815	MemberAccess	( * pipeTable ) [ i ] . data_ptr		1065591	0					
ANR	1065816	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065817	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065818	UnaryOperator	*		1065591	0					
ANR	1065819	Identifier	pipeTable		1065591	1					
ANR	1065820	Identifier	i		1065591	1					
ANR	1065821	Identifier	data_ptr		1065591	1					
ANR	1065822	Identifier	NULL		1065591	1					
ANR	1065823	ExpressionStatement	free ( ( * pipeTable ) [ i ] . pipe_descrip )	1945:1:55750:55784	1065591	19	True				
ANR	1065824	CallExpression	free ( ( * pipeTable ) [ i ] . pipe_descrip )		1065591	0					
ANR	1065825	Callee	free		1065591	0					
ANR	1065826	Identifier	free		1065591	0					
ANR	1065827	ArgumentList	( * pipeTable ) [ i ] . pipe_descrip		1065591	1					
ANR	1065828	Argument	( * pipeTable ) [ i ] . pipe_descrip		1065591	0					
ANR	1065829	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1065591	0					
ANR	1065830	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065831	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065832	UnaryOperator	*		1065591	0					
ANR	1065833	Identifier	pipeTable		1065591	1					
ANR	1065834	Identifier	i		1065591	1					
ANR	1065835	Identifier	pipe_descrip		1065591	1					
ANR	1065836	IfStatement	if ( pipe_descrip )		1065591	20					
ANR	1065837	Condition	pipe_descrip	1946:6:55792:55803	1065591	0	True				
ANR	1065838	Identifier	pipe_descrip		1065591	0					
ANR	1065839	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = strdup ( pipe_descrip )	1947:2:55809:55860	1065591	1	True				
ANR	1065840	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = strdup ( pipe_descrip )		1065591	0		=			
ANR	1065841	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1065591	0					
ANR	1065842	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065843	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065844	UnaryOperator	*		1065591	0					
ANR	1065845	Identifier	pipeTable		1065591	1					
ANR	1065846	Identifier	i		1065591	1					
ANR	1065847	Identifier	pipe_descrip		1065591	1					
ANR	1065848	CallExpression	strdup ( pipe_descrip )		1065591	1					
ANR	1065849	Callee	strdup		1065591	0					
ANR	1065850	Identifier	strdup		1065591	0					
ANR	1065851	ArgumentList	pipe_descrip		1065591	1					
ANR	1065852	Argument	pipe_descrip		1065591	0					
ANR	1065853	Identifier	pipe_descrip		1065591	0					
ANR	1065854	ElseStatement	else		1065591	0					
ANR	1065855	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = strdup ( EMPTY_DESCRIP )	1949:2:55870:55922	1065591	0	True				
ANR	1065856	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = strdup ( EMPTY_DESCRIP )		1065591	0		=			
ANR	1065857	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1065591	0					
ANR	1065858	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065859	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065860	UnaryOperator	*		1065591	0					
ANR	1065861	Identifier	pipeTable		1065591	1					
ANR	1065862	Identifier	i		1065591	1					
ANR	1065863	Identifier	pipe_descrip		1065591	1					
ANR	1065864	CallExpression	strdup ( EMPTY_DESCRIP )		1065591	1					
ANR	1065865	Callee	strdup		1065591	0					
ANR	1065866	Identifier	strdup		1065591	0					
ANR	1065867	ArgumentList	EMPTY_DESCRIP		1065591	1					
ANR	1065868	Argument	EMPTY_DESCRIP		1065591	0					
ANR	1065869	Identifier	EMPTY_DESCRIP		1065591	0					
ANR	1065870	ExpressionStatement	free ( ( * pipeTable ) [ i ] . handler_descrip )	1950:1:55925:55962	1065591	21	True				
ANR	1065871	CallExpression	free ( ( * pipeTable ) [ i ] . handler_descrip )		1065591	0					
ANR	1065872	Callee	free		1065591	0					
ANR	1065873	Identifier	free		1065591	0					
ANR	1065874	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		1065591	1					
ANR	1065875	Argument	( * pipeTable ) [ i ] . handler_descrip		1065591	0					
ANR	1065876	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1065591	0					
ANR	1065877	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065878	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065879	UnaryOperator	*		1065591	0					
ANR	1065880	Identifier	pipeTable		1065591	1					
ANR	1065881	Identifier	i		1065591	1					
ANR	1065882	Identifier	handler_descrip		1065591	1					
ANR	1065883	IfStatement	if ( handler_descrip )		1065591	22					
ANR	1065884	Condition	handler_descrip	1951:6:55970:55984	1065591	0	True				
ANR	1065885	Identifier	handler_descrip		1065591	0					
ANR	1065886	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = strdup ( handler_descrip )	1952:2:55990:56047	1065591	1	True				
ANR	1065887	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = strdup ( handler_descrip )		1065591	0		=			
ANR	1065888	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1065591	0					
ANR	1065889	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065890	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065891	UnaryOperator	*		1065591	0					
ANR	1065892	Identifier	pipeTable		1065591	1					
ANR	1065893	Identifier	i		1065591	1					
ANR	1065894	Identifier	handler_descrip		1065591	1					
ANR	1065895	CallExpression	strdup ( handler_descrip )		1065591	1					
ANR	1065896	Callee	strdup		1065591	0					
ANR	1065897	Identifier	strdup		1065591	0					
ANR	1065898	ArgumentList	handler_descrip		1065591	1					
ANR	1065899	Argument	handler_descrip		1065591	0					
ANR	1065900	Identifier	handler_descrip		1065591	0					
ANR	1065901	ElseStatement	else		1065591	0					
ANR	1065902	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	1954:2:56057:56112	1065591	0	True				
ANR	1065903	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		1065591	0		=			
ANR	1065904	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1065591	0					
ANR	1065905	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065906	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065907	UnaryOperator	*		1065591	0					
ANR	1065908	Identifier	pipeTable		1065591	1					
ANR	1065909	Identifier	i		1065591	1					
ANR	1065910	Identifier	handler_descrip		1065591	1					
ANR	1065911	CallExpression	strdup ( EMPTY_DESCRIP )		1065591	1					
ANR	1065912	Callee	strdup		1065591	0					
ANR	1065913	Identifier	strdup		1065591	0					
ANR	1065914	ArgumentList	EMPTY_DESCRIP		1065591	1					
ANR	1065915	Argument	EMPTY_DESCRIP		1065591	0					
ANR	1065916	Identifier	EMPTY_DESCRIP		1065591	0					
ANR	1065917	ExpressionStatement	nPipe ++	1957:1:56169:56176	1065591	23	True				
ANR	1065918	PostIncDecOperationExpression	nPipe ++		1065591	0					
ANR	1065919	Identifier	nPipe		1065591	0					
ANR	1065920	IncDec	++		1065591	1					
ANR	1065921	ExpressionStatement	curr_regdataptr = & ( ( * pipeTable ) [ i ] . data_ptr )	1960:1:56224:56269	1065591	24	True				
ANR	1065922	AssignmentExpression	curr_regdataptr = & ( ( * pipeTable ) [ i ] . data_ptr )		1065591	0		=			
ANR	1065923	Identifier	curr_regdataptr		1065591	0					
ANR	1065924	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		1065591	1					
ANR	1065925	UnaryOperator	&		1065591	0					
ANR	1065926	MemberAccess	( * pipeTable ) [ i ] . data_ptr		1065591	1					
ANR	1065927	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065928	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065929	UnaryOperator	*		1065591	0					
ANR	1065930	Identifier	pipeTable		1065591	1					
ANR	1065931	Identifier	i		1065591	1					
ANR	1065932	Identifier	data_ptr		1065591	1					
ANR	1065933	ExpressionStatement	Wake_up_select ( )	1966:1:56447:56463	1065591	25	True				
ANR	1065934	CallExpression	Wake_up_select ( )		1065591	0					
ANR	1065935	Callee	Wake_up_select		1065591	0					
ANR	1065936	Identifier	Wake_up_select		1065591	0					
ANR	1065937	ArgumentList			1065591	1					
ANR	1065938	ExpressionStatement	( * pipeHandleTable ) [ index ] -> set_registered ( )	1976:1:56784:56827	1065591	26	True				
ANR	1065939	CallExpression	( * pipeHandleTable ) [ index ] -> set_registered ( )		1065591	0					
ANR	1065940	Callee	( * pipeHandleTable ) [ index ] -> set_registered		1065591	0					
ANR	1065941	PtrMemberAccess	( * pipeHandleTable ) [ index ] -> set_registered		1065591	0					
ANR	1065942	ArrayIndexing	( * pipeHandleTable ) [ index ]		1065591	0					
ANR	1065943	UnaryOperationExpression	* pipeHandleTable		1065591	0					
ANR	1065944	UnaryOperator	*		1065591	0					
ANR	1065945	Identifier	pipeHandleTable		1065591	1					
ANR	1065946	Identifier	index		1065591	1					
ANR	1065947	Identifier	set_registered		1065591	1					
ANR	1065948	ArgumentList			1065591	1					
ANR	1065949	Statement	(	1978:1:56831:56831	1065591	27	True				
ANR	1065950	Statement	*	1978:2:56832:56832	1065591	28	True				
ANR	1065951	Statement	pipeTable	1978:3:56833:56841	1065591	29	True				
ANR	1065952	Statement	)	1978:12:56842:56842	1065591	30	True				
ANR	1065953	Statement	[	1978:13:56843:56843	1065591	31	True				
ANR	1065954	Statement	i	1978:14:56844:56844	1065591	32	True				
ANR	1065955	Statement	]	1978:15:56845:56845	1065591	33	True				
ANR	1065956	Statement	.	1978:16:56846:56846	1065591	34	True				
ANR	1065957	Statement	pentry	1978:17:56847:56852	1065591	35	True				
ANR	1065958	Statement	=	1978:24:56854:56854	1065591	36	True				
ANR	1065959	Statement	new	1978:26:56856:56858	1065591	37	True				
ANR	1065960	ExpressionStatement	PidEntry	1978:30:56860:56868	1065591	38	True				
ANR	1065961	Identifier	PidEntry		1065591	0					
ANR	1065962	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> hProcess = 0	1979:1:56871:56907	1065591	39	True				
ANR	1065963	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> hProcess = 0		1065591	0		=			
ANR	1065964	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> hProcess		1065591	0					
ANR	1065965	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1065966	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065967	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065968	UnaryOperator	*		1065591	0					
ANR	1065969	Identifier	pipeTable		1065591	1					
ANR	1065970	Identifier	i		1065591	1					
ANR	1065971	Identifier	pentry		1065591	1					
ANR	1065972	Identifier	hProcess		1065591	1					
ANR	1065973	PrimaryExpression	0		1065591	1					
ANR	1065974	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> hThread = 0	1980:1:56910:56945	1065591	40	True				
ANR	1065975	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> hThread = 0		1065591	0		=			
ANR	1065976	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> hThread		1065591	0					
ANR	1065977	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1065978	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065979	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065980	UnaryOperator	*		1065591	0					
ANR	1065981	Identifier	pipeTable		1065591	1					
ANR	1065982	Identifier	i		1065591	1					
ANR	1065983	Identifier	pentry		1065591	1					
ANR	1065984	Identifier	hThread		1065591	1					
ANR	1065985	PrimaryExpression	0		1065591	1					
ANR	1065986	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeReady = 0	1981:1:56948:56985	1065591	41	True				
ANR	1065987	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeReady = 0		1065591	0		=			
ANR	1065988	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeReady		1065591	0					
ANR	1065989	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1065990	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1065991	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1065992	UnaryOperator	*		1065591	0					
ANR	1065993	Identifier	pipeTable		1065591	1					
ANR	1065994	Identifier	i		1065591	1					
ANR	1065995	Identifier	pentry		1065591	1					
ANR	1065996	Identifier	pipeReady		1065591	1					
ANR	1065997	PrimaryExpression	0		1065591	1					
ANR	1065998	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> deallocate = 0	1982:1:56988:57026	1065591	42	True				
ANR	1065999	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> deallocate = 0		1065591	0		=			
ANR	1066000	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> deallocate		1065591	0					
ANR	1066001	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1066002	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1066003	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1066004	UnaryOperator	*		1065591	0					
ANR	1066005	Identifier	pipeTable		1065591	1					
ANR	1066006	Identifier	i		1065591	1					
ANR	1066007	Identifier	pentry		1065591	1					
ANR	1066008	Identifier	deallocate		1065591	1					
ANR	1066009	PrimaryExpression	0		1065591	1					
ANR	1066010	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd = ( * pipeHandleTable ) [ index ]	1983:1:57029:57088	1065591	43	True				
ANR	1066011	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd = ( * pipeHandleTable ) [ index ]		1065591	0		=			
ANR	1066012	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		1065591	0					
ANR	1066013	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1066014	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1066015	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1066016	UnaryOperator	*		1065591	0					
ANR	1066017	Identifier	pipeTable		1065591	1					
ANR	1066018	Identifier	i		1065591	1					
ANR	1066019	Identifier	pentry		1065591	1					
ANR	1066020	Identifier	pipeEnd		1065591	1					
ANR	1066021	ArrayIndexing	( * pipeHandleTable ) [ index ]		1065591	1					
ANR	1066022	UnaryOperationExpression	* pipeHandleTable		1065591	0					
ANR	1066023	UnaryOperator	*		1065591	0					
ANR	1066024	Identifier	pipeHandleTable		1065591	1					
ANR	1066025	Identifier	index		1065591	1					
ANR	1066026	ExpressionStatement	WatchPid ( ( * pipeTable ) [ i ] . pentry )	1985:1:57092:57124	1065591	44	True				
ANR	1066027	CallExpression	WatchPid ( ( * pipeTable ) [ i ] . pentry )		1065591	0					
ANR	1066028	Callee	WatchPid		1065591	0					
ANR	1066029	Identifier	WatchPid		1065591	0					
ANR	1066030	ArgumentList	( * pipeTable ) [ i ] . pentry		1065591	1					
ANR	1066031	Argument	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1066032	MemberAccess	( * pipeTable ) [ i ] . pentry		1065591	0					
ANR	1066033	ArrayIndexing	( * pipeTable ) [ i ]		1065591	0					
ANR	1066034	UnaryOperationExpression	* pipeTable		1065591	0					
ANR	1066035	UnaryOperator	*		1065591	0					
ANR	1066036	Identifier	pipeTable		1065591	1					
ANR	1066037	Identifier	i		1065591	1					
ANR	1066038	Identifier	pentry		1065591	1					
ANR	1066039	ReturnStatement	return pipe_end ;	1988:1:57135:57150	1065591	45	True				
ANR	1066040	Identifier	pipe_end		1065591	0					
ANR	1066041	ReturnType	int		1065591	1					
ANR	1066042	Identifier	DaemonCore :: Register_Pipe		1065591	2					
ANR	1066043	ParameterList	"int pipe_end , const char * pipe_descrip , PipeHandler handler , PipeHandlercpp handlercpp , const char * handler_descrip , Service * s , HandlerType handler_type , DCpermission perm , int is_cpp"		1065591	3					
ANR	1066044	Parameter	int pipe_end	1901:30:54451:54462	1065591	0	True				
ANR	1066045	ParameterType	int		1065591	0					
ANR	1066046	Identifier	pipe_end		1065591	1					
ANR	1066047	Parameter	const char * pipe_descrip	1901:44:54465:54488	1065591	1	True				
ANR	1066048	ParameterType	const char *		1065591	0					
ANR	1066049	Identifier	pipe_descrip		1065591	1					
ANR	1066050	Parameter	PipeHandler handler	1902:4:54495:54513	1065591	2	True				
ANR	1066051	ParameterType	PipeHandler		1065591	0					
ANR	1066052	Identifier	handler		1065591	1					
ANR	1066053	Parameter	PipeHandlercpp handlercpp	1902:25:54516:54540	1065591	3	True				
ANR	1066054	ParameterType	PipeHandlercpp		1065591	0					
ANR	1066055	Identifier	handlercpp		1065591	1					
ANR	1066056	Parameter	const char * handler_descrip	1903:4:54547:54573	1065591	4	True				
ANR	1066057	ParameterType	const char *		1065591	0					
ANR	1066058	Identifier	handler_descrip		1065591	1					
ANR	1066059	Parameter	Service * s	1903:33:54576:54585	1065591	5	True				
ANR	1066060	ParameterType	Service *		1065591	0					
ANR	1066061	Identifier	s		1065591	1					
ANR	1066062	Parameter	HandlerType handler_type	1904:4:54592:54615	1065591	6	True				
ANR	1066063	ParameterType	HandlerType		1065591	0					
ANR	1066064	Identifier	handler_type		1065591	1					
ANR	1066065	Parameter	DCpermission perm	1904:30:54618:54634	1065591	7	True				
ANR	1066066	ParameterType	DCpermission		1065591	0					
ANR	1066067	Identifier	perm		1065591	1					
ANR	1066068	Parameter	int is_cpp	1905:4:54641:54650	1065591	8	True				
ANR	1066069	ParameterType	int		1065591	0					
ANR	1066070	Identifier	is_cpp		1065591	1					
ANR	1066071	CFGEntryNode	ENTRY		1065591		True				
ANR	1066072	CFGExitNode	EXIT		1065591		True				
ANR	1066073	Symbol	handler		1065591						
ANR	1066074	Symbol	pipe_end		1065591						
ANR	1066075	Symbol	* index		1065591						
ANR	1066076	Symbol	nPipe		1065591						
ANR	1066077	Symbol	pipeHandleTableLookup		1065591						
ANR	1066078	Symbol	( * pipeTable ) [ i ] . pentry -> pipeEnd		1065591						
ANR	1066079	Symbol	IF_NONZERO		1065591						
ANR	1066080	Symbol	* * * pipeTable		1065591						
ANR	1066081	Symbol	( * pipeTable ) [ i ] . pipe_descrip		1065591						
ANR	1066082	Symbol	handlercpp		1065591						
ANR	1066083	Symbol	is_cpp		1065591						
ANR	1066084	Symbol	PIPE_INDEX_OFFSET		1065591						
ANR	1066085	Symbol	* * i		1065591						
ANR	1066086	Symbol	NULL		1065591						
ANR	1066087	Symbol	( * pipeTable ) [ i ] . pentry -> pipeReady		1065591						
ANR	1066088	Symbol	index		1065591						
ANR	1066089	Symbol	* pipeTable		1065591						
ANR	1066090	Symbol	& ( * pipeTable ) [ i ] . data_ptr		1065591						
ANR	1066091	Symbol	( * pipeTable ) [ i ] . index		1065591						
ANR	1066092	Symbol	( * pipeTable ) [ i ] . handler		1065591						
ANR	1066093	Symbol	( * pipeTable ) [ i ] . handler_type		1065591						
ANR	1066094	Symbol	( * pipeTable ) [ i ] . data_ptr		1065591						
ANR	1066095	Symbol	( * pipeTable ) [ i ] . call_handler		1065591						
ANR	1066096	Symbol	* ( * pipeTable ) [ i ] . pentry		1065591						
ANR	1066097	Symbol	curr_regdataptr		1065591						
ANR	1066098	Symbol	perm		1065591						
ANR	1066099	Symbol	* pipeHandleTable		1065591						
ANR	1066100	Symbol	* * pipeTable		1065591						
ANR	1066101	Symbol	( * pipeTable ) [ i ] . handler_descrip		1065591						
ANR	1066102	Symbol	( * pipeTable ) [ j ] . index		1065591						
ANR	1066103	Symbol	pipeHandleTable		1065591						
ANR	1066104	Symbol	handler_descrip		1065591						
ANR	1066105	Symbol	pipe_descrip		1065591						
ANR	1066106	Symbol	( * pipeTable ) [ i ] . pentry -> hThread		1065591						
ANR	1066107	Symbol	( * pipeTable ) [ i ] . is_cpp		1065591						
ANR	1066108	Symbol	IS_RCT		1065591						
ANR	1066109	Symbol	AS_COUNT		1065591						
ANR	1066110	Symbol	( * pipeTable ) [ i ] . pentry -> hProcess		1065591						
ANR	1066111	Symbol	handler_type		1065591						
ANR	1066112	Symbol	D_DAEMONCORE		1065591						
ANR	1066113	Symbol	( * pipeTable ) [ i ] . service		1065591						
ANR	1066114	Symbol	false		1065591						
ANR	1066115	Symbol	i		1065591						
ANR	1066116	Symbol	j		1065591						
ANR	1066117	Symbol	pipeTable		1065591						
ANR	1066118	Symbol	s		1065591						
ANR	1066119	Symbol	* i		1065591						
ANR	1066120	Symbol	( * pipeTable ) [ i ] . handlercpp		1065591						
ANR	1066121	Symbol	* j		1065591						
ANR	1066122	Symbol	IF_VERBOSEPUB		1065591						
ANR	1066123	Symbol	EMPTY_DESCRIP		1065591						
ANR	1066124	Symbol	( * pipeTable ) [ i ] . pentry		1065591						
ANR	1066125	Symbol	* * pipeHandleTable		1065591						
ANR	1066126	Symbol	FALSE		1065591						
ANR	1066127	Symbol	dc_stats		1065591						
ANR	1066128	Symbol	( * pipeTable ) [ i ] . pentry -> deallocate		1065591						
ANR	1066129	Symbol	( * pipeTable ) [ i ] . perm		1065591						
ANR	1066130	Symbol	strdup		1065591						
ANR	1066131	Symbol	( * pipeTable ) [ i ] . in_handler		1065591						
ANR	1066132	Function	DaemonCore :: Cancel_Pipe	1992:0:57156:59998							
ANR	1066133	FunctionDef	DaemonCore :: Cancel_Pipe (int pipe_end)		1066132	0					
ANR	1066134	CompoundStatement		1993:0:57200:59998	1066132	0					
ANR	1066135	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	1994:1:57203:57243	1066132	0	True				
ANR	1066136	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1066132	0					
ANR	1066137	IdentifierDeclType	int		1066132	0					
ANR	1066138	Identifier	index		1066132	1					
ANR	1066139	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1066132	2		=			
ANR	1066140	Identifier	index		1066132	0					
ANR	1066141	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1066132	1		-			
ANR	1066142	Identifier	pipe_end		1066132	0					
ANR	1066143	Identifier	PIPE_INDEX_OFFSET		1066132	1					
ANR	1066144	IfStatement	if ( index < 0 )		1066132	1					
ANR	1066145	Condition	index < 0	1995:5:57250:57258	1066132	0	True				
ANR	1066146	RelationalExpression	index < 0		1066132	0		<			
ANR	1066147	Identifier	index		1066132	0					
ANR	1066148	PrimaryExpression	0		1066132	1					
ANR	1066149	CompoundStatement		3:16:60:60	1066132	1					
ANR	1066150	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Pipe on invalid pipe end: %d\\n"" , pipe_end )"	1996:2:57265:57333	1066132	0	True				
ANR	1066151	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Pipe on invalid pipe end: %d\\n"" , pipe_end )"		1066132	0					
ANR	1066152	Callee	dprintf		1066132	0					
ANR	1066153	Identifier	dprintf		1066132	0					
ANR	1066154	ArgumentList	D_ALWAYS		1066132	1					
ANR	1066155	Argument	D_ALWAYS		1066132	0					
ANR	1066156	Identifier	D_ALWAYS		1066132	0					
ANR	1066157	Argument	"""Cancel_Pipe on invalid pipe end: %d\\n"""		1066132	1					
ANR	1066158	PrimaryExpression	"""Cancel_Pipe on invalid pipe end: %d\\n"""		1066132	0					
ANR	1066159	Argument	pipe_end		1066132	2					
ANR	1066160	Identifier	pipe_end		1066132	0					
ANR	1066161	ExpressionStatement	"EXCEPT ( ""Cancel_Pipe error"" )"	1997:2:57337:57364	1066132	1	True				
ANR	1066162	CallExpression	"EXCEPT ( ""Cancel_Pipe error"" )"		1066132	0					
ANR	1066163	Callee	EXCEPT		1066132	0					
ANR	1066164	Identifier	EXCEPT		1066132	0					
ANR	1066165	ArgumentList	"""Cancel_Pipe error"""		1066132	1					
ANR	1066166	Argument	"""Cancel_Pipe error"""		1066132	0					
ANR	1066167	PrimaryExpression	"""Cancel_Pipe error"""		1066132	0					
ANR	1066168	IdentifierDeclStatement	"int i , j ;"	2000:1:57372:57379	1066132	2	True				
ANR	1066169	IdentifierDecl	i		1066132	0					
ANR	1066170	IdentifierDeclType	int		1066132	0					
ANR	1066171	Identifier	i		1066132	1					
ANR	1066172	IdentifierDecl	j		1066132	1					
ANR	1066173	IdentifierDeclType	int		1066132	0					
ANR	1066174	Identifier	j		1066132	1					
ANR	1066175	ExpressionStatement	i = - 1	2002:1:57383:57389	1066132	3	True				
ANR	1066176	AssignmentExpression	i = - 1		1066132	0		=			
ANR	1066177	Identifier	i		1066132	0					
ANR	1066178	UnaryOperationExpression	- 1		1066132	1					
ANR	1066179	UnaryOperator	-		1066132	0					
ANR	1066180	PrimaryExpression	1		1066132	1					
ANR	1066181	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		1066132	4					
ANR	1066182	ForInit	j = 0 ;	2003:6:57397:57400	1066132	0	True				
ANR	1066183	AssignmentExpression	j = 0		1066132	0		=			
ANR	1066184	Identifier	j		1066132	0					
ANR	1066185	PrimaryExpression	0		1066132	1					
ANR	1066186	Condition	j < nPipe	2003:10:57401:57407	1066132	1	True				
ANR	1066187	RelationalExpression	j < nPipe		1066132	0		<			
ANR	1066188	Identifier	j		1066132	0					
ANR	1066189	Identifier	nPipe		1066132	1					
ANR	1066190	PostIncDecOperationExpression	j ++	2003:18:57409:57411	1066132	2	True				
ANR	1066191	Identifier	j		1066132	0					
ANR	1066192	IncDec	++		1066132	1					
ANR	1066193	CompoundStatement		11:23:213:213	1066132	3					
ANR	1066194	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		1066132	0					
ANR	1066195	Condition	( * pipeTable ) [ j ] . index == index	2004:7:57423:57452	1066132	0	True				
ANR	1066196	EqualityExpression	( * pipeTable ) [ j ] . index == index		1066132	0		==			
ANR	1066197	MemberAccess	( * pipeTable ) [ j ] . index		1066132	0					
ANR	1066198	ArrayIndexing	( * pipeTable ) [ j ]		1066132	0					
ANR	1066199	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066200	UnaryOperator	*		1066132	0					
ANR	1066201	Identifier	pipeTable		1066132	1					
ANR	1066202	Identifier	j		1066132	1					
ANR	1066203	Identifier	index		1066132	1					
ANR	1066204	Identifier	index		1066132	1					
ANR	1066205	CompoundStatement		12:40:255:255	1066132	1					
ANR	1066206	ExpressionStatement	i = j	2005:3:57461:57466	1066132	0	True				
ANR	1066207	AssignmentExpression	i = j		1066132	0		=			
ANR	1066208	Identifier	i		1066132	0					
ANR	1066209	Identifier	j		1066132	1					
ANR	1066210	BreakStatement	break ;	2006:3:57471:57476	1066132	1	True				
ANR	1066211	IfStatement	if ( i == - 1 )		1066132	5					
ANR	1066212	Condition	i == - 1	2010:6:57492:57498	1066132	0	True				
ANR	1066213	EqualityExpression	i == - 1		1066132	0		==			
ANR	1066214	Identifier	i		1066132	0					
ANR	1066215	UnaryOperationExpression	- 1		1066132	1					
ANR	1066216	UnaryOperator	-		1066132	0					
ANR	1066217	PrimaryExpression	1		1066132	1					
ANR	1066218	CompoundStatement		18:16:301:301	1066132	1					
ANR	1066219	ExpressionStatement	"dprintf ( D_ALWAYS , ""Cancel_Pipe: called on non-registered pipe!\\n"" )"	2011:2:57506:57572	1066132	0	True				
ANR	1066220	CallExpression	"dprintf ( D_ALWAYS , ""Cancel_Pipe: called on non-registered pipe!\\n"" )"		1066132	0					
ANR	1066221	Callee	dprintf		1066132	0					
ANR	1066222	Identifier	dprintf		1066132	0					
ANR	1066223	ArgumentList	D_ALWAYS		1066132	1					
ANR	1066224	Argument	D_ALWAYS		1066132	0					
ANR	1066225	Identifier	D_ALWAYS		1066132	0					
ANR	1066226	Argument	"""Cancel_Pipe: called on non-registered pipe!\\n"""		1066132	1					
ANR	1066227	PrimaryExpression	"""Cancel_Pipe: called on non-registered pipe!\\n"""		1066132	0					
ANR	1066228	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending pipe end number %d\\n"" , pipe_end )"	2012:2:57576:57638	1066132	1	True				
ANR	1066229	CallExpression	"dprintf ( D_ALWAYS , ""Offending pipe end number %d\\n"" , pipe_end )"		1066132	0					
ANR	1066230	Callee	dprintf		1066132	0					
ANR	1066231	Identifier	dprintf		1066132	0					
ANR	1066232	ArgumentList	D_ALWAYS		1066132	1					
ANR	1066233	Argument	D_ALWAYS		1066132	0					
ANR	1066234	Identifier	D_ALWAYS		1066132	0					
ANR	1066235	Argument	"""Offending pipe end number %d\\n"""		1066132	1					
ANR	1066236	PrimaryExpression	"""Offending pipe end number %d\\n"""		1066132	0					
ANR	1066237	Argument	pipe_end		1066132	2					
ANR	1066238	Identifier	pipe_end		1066132	0					
ANR	1066239	ReturnStatement	return FALSE ;	2013:2:57642:57654	1066132	2	True				
ANR	1066240	Identifier	FALSE		1066132	0					
ANR	1066241	IfStatement	if ( curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr ) )		1066132	6					
ANR	1066242	Condition	curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr )	2019:6:57799:57845	1066132	0	True				
ANR	1066243	EqualityExpression	curr_regdataptr == & ( ( * pipeTable ) [ i ] . data_ptr )		1066132	0		==			
ANR	1066244	Identifier	curr_regdataptr		1066132	0					
ANR	1066245	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		1066132	1					
ANR	1066246	UnaryOperator	&		1066132	0					
ANR	1066247	MemberAccess	( * pipeTable ) [ i ] . data_ptr		1066132	1					
ANR	1066248	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066249	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066250	UnaryOperator	*		1066132	0					
ANR	1066251	Identifier	pipeTable		1066132	1					
ANR	1066252	Identifier	i		1066132	1					
ANR	1066253	Identifier	data_ptr		1066132	1					
ANR	1066254	ExpressionStatement	curr_regdataptr = NULL	2020:2:57851:57873	1066132	1	True				
ANR	1066255	AssignmentExpression	curr_regdataptr = NULL		1066132	0		=			
ANR	1066256	Identifier	curr_regdataptr		1066132	0					
ANR	1066257	Identifier	NULL		1066132	1					
ANR	1066258	IfStatement	if ( curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr ) )		1066132	7					
ANR	1066259	Condition	curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr )	2021:6:57881:57924	1066132	0	True				
ANR	1066260	EqualityExpression	curr_dataptr == & ( ( * pipeTable ) [ i ] . data_ptr )		1066132	0		==			
ANR	1066261	Identifier	curr_dataptr		1066132	0					
ANR	1066262	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		1066132	1					
ANR	1066263	UnaryOperator	&		1066132	0					
ANR	1066264	MemberAccess	( * pipeTable ) [ i ] . data_ptr		1066132	1					
ANR	1066265	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066266	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066267	UnaryOperator	*		1066132	0					
ANR	1066268	Identifier	pipeTable		1066132	1					
ANR	1066269	Identifier	i		1066132	1					
ANR	1066270	Identifier	data_ptr		1066132	1					
ANR	1066271	ExpressionStatement	curr_dataptr = NULL	2022:2:57930:57949	1066132	1	True				
ANR	1066272	AssignmentExpression	curr_dataptr = NULL		1066132	0		=			
ANR	1066273	Identifier	curr_dataptr		1066132	0					
ANR	1066274	Identifier	NULL		1066132	1					
ANR	1066275	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"" , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip , i )"	2025:1:57971:58097	1066132	8	True				
ANR	1066276	CallExpression	"dprintf ( D_DAEMONCORE , ""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"" , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip , i )"		1066132	0					
ANR	1066277	Callee	dprintf		1066132	0					
ANR	1066278	Identifier	dprintf		1066132	0					
ANR	1066279	ArgumentList	D_DAEMONCORE		1066132	1					
ANR	1066280	Argument	D_DAEMONCORE		1066132	0					
ANR	1066281	Identifier	D_DAEMONCORE		1066132	0					
ANR	1066282	Argument	"""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"""		1066132	1					
ANR	1066283	PrimaryExpression	"""Cancel_Pipe: cancelled pipe end %d <%s> (entry=%d)\\n"""		1066132	0					
ANR	1066284	Argument	pipe_end		1066132	2					
ANR	1066285	Identifier	pipe_end		1066132	0					
ANR	1066286	Argument	( * pipeTable ) [ i ] . pipe_descrip		1066132	3					
ANR	1066287	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1066132	0					
ANR	1066288	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066289	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066290	UnaryOperator	*		1066132	0					
ANR	1066291	Identifier	pipeTable		1066132	1					
ANR	1066292	Identifier	i		1066132	1					
ANR	1066293	Identifier	pipe_descrip		1066132	1					
ANR	1066294	Argument	i		1066132	4					
ANR	1066295	Identifier	i		1066132	0					
ANR	1066296	ExpressionStatement	( * pipeTable ) [ i ] . index = - 1	2030:1:58164:58190	1066132	9	True				
ANR	1066297	AssignmentExpression	( * pipeTable ) [ i ] . index = - 1		1066132	0		=			
ANR	1066298	MemberAccess	( * pipeTable ) [ i ] . index		1066132	0					
ANR	1066299	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066300	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066301	UnaryOperator	*		1066132	0					
ANR	1066302	Identifier	pipeTable		1066132	1					
ANR	1066303	Identifier	i		1066132	1					
ANR	1066304	Identifier	index		1066132	1					
ANR	1066305	UnaryOperationExpression	- 1		1066132	1					
ANR	1066306	UnaryOperator	-		1066132	0					
ANR	1066307	PrimaryExpression	1		1066132	1					
ANR	1066308	ExpressionStatement	free ( ( * pipeTable ) [ i ] . pipe_descrip )	2031:1:58193:58229	1066132	10	True				
ANR	1066309	CallExpression	free ( ( * pipeTable ) [ i ] . pipe_descrip )		1066132	0					
ANR	1066310	Callee	free		1066132	0					
ANR	1066311	Identifier	free		1066132	0					
ANR	1066312	ArgumentList	( * pipeTable ) [ i ] . pipe_descrip		1066132	1					
ANR	1066313	Argument	( * pipeTable ) [ i ] . pipe_descrip		1066132	0					
ANR	1066314	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1066132	0					
ANR	1066315	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066316	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066317	UnaryOperator	*		1066132	0					
ANR	1066318	Identifier	pipeTable		1066132	1					
ANR	1066319	Identifier	i		1066132	1					
ANR	1066320	Identifier	pipe_descrip		1066132	1					
ANR	1066321	ExpressionStatement	( * pipeTable ) [ i ] . pipe_descrip = NULL	2032:1:58232:58267	1066132	11	True				
ANR	1066322	AssignmentExpression	( * pipeTable ) [ i ] . pipe_descrip = NULL		1066132	0		=			
ANR	1066323	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1066132	0					
ANR	1066324	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066325	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066326	UnaryOperator	*		1066132	0					
ANR	1066327	Identifier	pipeTable		1066132	1					
ANR	1066328	Identifier	i		1066132	1					
ANR	1066329	Identifier	pipe_descrip		1066132	1					
ANR	1066330	Identifier	NULL		1066132	1					
ANR	1066331	ExpressionStatement	free ( ( * pipeTable ) [ i ] . handler_descrip )	2033:1:58270:58309	1066132	12	True				
ANR	1066332	CallExpression	free ( ( * pipeTable ) [ i ] . handler_descrip )		1066132	0					
ANR	1066333	Callee	free		1066132	0					
ANR	1066334	Identifier	free		1066132	0					
ANR	1066335	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		1066132	1					
ANR	1066336	Argument	( * pipeTable ) [ i ] . handler_descrip		1066132	0					
ANR	1066337	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1066132	0					
ANR	1066338	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066339	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066340	UnaryOperator	*		1066132	0					
ANR	1066341	Identifier	pipeTable		1066132	1					
ANR	1066342	Identifier	i		1066132	1					
ANR	1066343	Identifier	handler_descrip		1066132	1					
ANR	1066344	ExpressionStatement	( * pipeTable ) [ i ] . handler_descrip = NULL	2034:1:58312:58350	1066132	13	True				
ANR	1066345	AssignmentExpression	( * pipeTable ) [ i ] . handler_descrip = NULL		1066132	0		=			
ANR	1066346	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1066132	0					
ANR	1066347	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066348	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066349	UnaryOperator	*		1066132	0					
ANR	1066350	Identifier	pipeTable		1066132	1					
ANR	1066351	Identifier	i		1066132	1					
ANR	1066352	Identifier	handler_descrip		1066132	1					
ANR	1066353	Identifier	NULL		1066132	1					
ANR	1066354	ExpressionStatement	ASSERT ( ( * pipeTable ) [ i ] . pentry )	2040:1:58528:58560	1066132	14	True				
ANR	1066355	CallExpression	ASSERT ( ( * pipeTable ) [ i ] . pentry )		1066132	0					
ANR	1066356	Callee	ASSERT		1066132	0					
ANR	1066357	Identifier	ASSERT		1066132	0					
ANR	1066358	ArgumentList	( * pipeTable ) [ i ] . pentry		1066132	1					
ANR	1066359	Argument	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066360	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066361	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066362	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066363	UnaryOperator	*		1066132	0					
ANR	1066364	Identifier	pipeTable		1066132	1					
ANR	1066365	Identifier	i		1066132	1					
ANR	1066366	Identifier	pentry		1066132	1					
ANR	1066367	ExpressionStatement	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> deallocate ) , 1L )"	2041:1:58563:58624	1066132	15	True				
ANR	1066368	CallExpression	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> deallocate ) , 1L )"		1066132	0					
ANR	1066369	Callee	InterlockedExchange		1066132	0					
ANR	1066370	Identifier	InterlockedExchange		1066132	0					
ANR	1066371	ArgumentList	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		1066132	1					
ANR	1066372	Argument	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		1066132	0					
ANR	1066373	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . pentry -> deallocate )		1066132	0					
ANR	1066374	UnaryOperator	&		1066132	0					
ANR	1066375	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> deallocate		1066132	1					
ANR	1066376	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066377	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066378	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066379	UnaryOperator	*		1066132	0					
ANR	1066380	Identifier	pipeTable		1066132	1					
ANR	1066381	Identifier	i		1066132	1					
ANR	1066382	Identifier	pentry		1066132	1					
ANR	1066383	Identifier	deallocate		1066132	1					
ANR	1066384	Argument	1L		1066132	1					
ANR	1066385	PrimaryExpression	1L		1066132	0					
ANR	1066386	IfStatement	if ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )		1066132	16					
ANR	1066387	Condition	( * pipeTable ) [ i ] . pentry -> watcherEvent	2042:5:58631:58666	1066132	0	True				
ANR	1066388	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> watcherEvent		1066132	0					
ANR	1066389	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066390	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066391	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066392	UnaryOperator	*		1066132	0					
ANR	1066393	Identifier	pipeTable		1066132	1					
ANR	1066394	Identifier	i		1066132	1					
ANR	1066395	Identifier	pentry		1066132	1					
ANR	1066396	Identifier	watcherEvent		1066132	1					
ANR	1066397	CompoundStatement		50:43:1468:1468	1066132	1					
ANR	1066398	ExpressionStatement	SetEvent ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )	2043:2:58673:58719	1066132	0	True				
ANR	1066399	CallExpression	SetEvent ( ( * pipeTable ) [ i ] . pentry -> watcherEvent )		1066132	0					
ANR	1066400	Callee	SetEvent		1066132	0					
ANR	1066401	Identifier	SetEvent		1066132	0					
ANR	1066402	ArgumentList	( * pipeTable ) [ i ] . pentry -> watcherEvent		1066132	1					
ANR	1066403	Argument	( * pipeTable ) [ i ] . pentry -> watcherEvent		1066132	0					
ANR	1066404	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> watcherEvent		1066132	0					
ANR	1066405	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066406	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066407	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066408	UnaryOperator	*		1066132	0					
ANR	1066409	Identifier	pipeTable		1066132	1					
ANR	1066410	Identifier	i		1066132	1					
ANR	1066411	Identifier	pentry		1066132	1					
ANR	1066412	Identifier	watcherEvent		1066132	1					
ANR	1066413	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel ( )	2049:1:58876:58917	1066132	17	True				
ANR	1066414	CallExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel ( )		1066132	0					
ANR	1066415	Callee	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel		1066132	0					
ANR	1066416	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd -> cancel		1066132	0					
ANR	1066417	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		1066132	0					
ANR	1066418	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066419	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066420	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066421	UnaryOperator	*		1066132	0					
ANR	1066422	Identifier	pipeTable		1066132	1					
ANR	1066423	Identifier	i		1066132	1					
ANR	1066424	Identifier	pentry		1066132	1					
ANR	1066425	Identifier	pipeEnd		1066132	1					
ANR	1066426	Identifier	cancel		1066132	1					
ANR	1066427	ArgumentList			1066132	1					
ANR	1066428	IfStatement	if ( ( * pipeTable ) [ i ] . in_handler )		1066132	18					
ANR	1066429	Condition	( * pipeTable ) [ i ] . in_handler	2051:5:58925:58950	1066132	0	True				
ANR	1066430	MemberAccess	( * pipeTable ) [ i ] . in_handler		1066132	0					
ANR	1066431	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066432	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066433	UnaryOperator	*		1066132	0					
ANR	1066434	Identifier	pipeTable		1066132	1					
ANR	1066435	Identifier	i		1066132	1					
ANR	1066436	Identifier	in_handler		1066132	1					
ANR	1066437	CompoundStatement		59:33:1752:1752	1066132	1					
ANR	1066438	ExpressionStatement	( * pipeTable ) [ i ] . pentry -> pipeEnd = NULL	2057:2:59241:59279	1066132	0	True				
ANR	1066439	AssignmentExpression	( * pipeTable ) [ i ] . pentry -> pipeEnd = NULL		1066132	0		=			
ANR	1066440	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeEnd		1066132	0					
ANR	1066441	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066442	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066443	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066444	UnaryOperator	*		1066132	0					
ANR	1066445	Identifier	pipeTable		1066132	1					
ANR	1066446	Identifier	i		1066132	1					
ANR	1066447	Identifier	pentry		1066132	1					
ANR	1066448	Identifier	pipeEnd		1066132	1					
ANR	1066449	Identifier	NULL		1066132	1					
ANR	1066450	ElseStatement	else		1066132	0					
ANR	1066451	CompoundStatement		67:6:2089:2089	1066132	0					
ANR	1066452	Statement	delete	2062:2:59374:59379	1066132	0	True				
ANR	1066453	ExpressionStatement	( * pipeTable ) [ i ] . pentry	2062:9:59381:59403	1066132	1	True				
ANR	1066454	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066455	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066456	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066457	UnaryOperator	*		1066132	0					
ANR	1066458	Identifier	pipeTable		1066132	1					
ANR	1066459	Identifier	i		1066132	1					
ANR	1066460	Identifier	pentry		1066132	1					
ANR	1066461	ExpressionStatement	( * pipeTable ) [ i ] . pentry = NULL	2065:1:59416:59445	1066132	19	True				
ANR	1066462	AssignmentExpression	( * pipeTable ) [ i ] . pentry = NULL		1066132	0		=			
ANR	1066463	MemberAccess	( * pipeTable ) [ i ] . pentry		1066132	0					
ANR	1066464	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066465	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066466	UnaryOperator	*		1066132	0					
ANR	1066467	Identifier	pipeTable		1066132	1					
ANR	1066468	Identifier	i		1066132	1					
ANR	1066469	Identifier	pentry		1066132	1					
ANR	1066470	Identifier	NULL		1066132	1					
ANR	1066471	IfStatement	if ( i < nPipe - 1 )		1066132	20					
ANR	1066472	Condition	i < nPipe - 1	2066:6:59453:59465	1066132	0	True				
ANR	1066473	RelationalExpression	i < nPipe - 1		1066132	0		<			
ANR	1066474	Identifier	i		1066132	0					
ANR	1066475	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066476	Identifier	nPipe		1066132	0					
ANR	1066477	PrimaryExpression	1		1066132	1					
ANR	1066478	CompoundStatement		74:22:2268:2268	1066132	1					
ANR	1066479	ExpressionStatement	( * pipeTable ) [ i ] = ( * pipeTable ) [ nPipe - 1 ]	2068:2:59547:59588	1066132	0	True				
ANR	1066480	AssignmentExpression	( * pipeTable ) [ i ] = ( * pipeTable ) [ nPipe - 1 ]		1066132	0		=			
ANR	1066481	ArrayIndexing	( * pipeTable ) [ i ]		1066132	0					
ANR	1066482	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066483	UnaryOperator	*		1066132	0					
ANR	1066484	Identifier	pipeTable		1066132	1					
ANR	1066485	Identifier	i		1066132	1					
ANR	1066486	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		1066132	1					
ANR	1066487	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066488	UnaryOperator	*		1066132	0					
ANR	1066489	Identifier	pipeTable		1066132	1					
ANR	1066490	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066491	Identifier	nPipe		1066132	0					
ANR	1066492	PrimaryExpression	1		1066132	1					
ANR	1066493	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . index = - 1	2069:2:59592:59626	1066132	1	True				
ANR	1066494	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . index = - 1		1066132	0		=			
ANR	1066495	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . index		1066132	0					
ANR	1066496	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		1066132	0					
ANR	1066497	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066498	UnaryOperator	*		1066132	0					
ANR	1066499	Identifier	pipeTable		1066132	1					
ANR	1066500	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066501	Identifier	nPipe		1066132	0					
ANR	1066502	PrimaryExpression	1		1066132	1					
ANR	1066503	Identifier	index		1066132	1					
ANR	1066504	UnaryOperationExpression	- 1		1066132	1					
ANR	1066505	UnaryOperator	-		1066132	0					
ANR	1066506	PrimaryExpression	1		1066132	1					
ANR	1066507	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip = NULL	2070:2:59630:59673	1066132	2	True				
ANR	1066508	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip = NULL		1066132	0		=			
ANR	1066509	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip		1066132	0					
ANR	1066510	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		1066132	0					
ANR	1066511	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066512	UnaryOperator	*		1066132	0					
ANR	1066513	Identifier	pipeTable		1066132	1					
ANR	1066514	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066515	Identifier	nPipe		1066132	0					
ANR	1066516	PrimaryExpression	1		1066132	1					
ANR	1066517	Identifier	pipe_descrip		1066132	1					
ANR	1066518	Identifier	NULL		1066132	1					
ANR	1066519	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . handler_descrip = NULL	2071:2:59677:59723	1066132	3	True				
ANR	1066520	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . handler_descrip = NULL		1066132	0		=			
ANR	1066521	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . handler_descrip		1066132	0					
ANR	1066522	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		1066132	0					
ANR	1066523	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066524	UnaryOperator	*		1066132	0					
ANR	1066525	Identifier	pipeTable		1066132	1					
ANR	1066526	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066527	Identifier	nPipe		1066132	0					
ANR	1066528	PrimaryExpression	1		1066132	1					
ANR	1066529	Identifier	handler_descrip		1066132	1					
ANR	1066530	Identifier	NULL		1066132	1					
ANR	1066531	ExpressionStatement	( * pipeTable ) [ nPipe - 1 ] . pentry = NULL	2072:2:59727:59764	1066132	4	True				
ANR	1066532	AssignmentExpression	( * pipeTable ) [ nPipe - 1 ] . pentry = NULL		1066132	0		=			
ANR	1066533	MemberAccess	( * pipeTable ) [ nPipe - 1 ] . pentry		1066132	0					
ANR	1066534	ArrayIndexing	( * pipeTable ) [ nPipe - 1 ]		1066132	0					
ANR	1066535	UnaryOperationExpression	* pipeTable		1066132	0					
ANR	1066536	UnaryOperator	*		1066132	0					
ANR	1066537	Identifier	pipeTable		1066132	1					
ANR	1066538	AdditiveExpression	nPipe - 1		1066132	1		-			
ANR	1066539	Identifier	nPipe		1066132	0					
ANR	1066540	PrimaryExpression	1		1066132	1					
ANR	1066541	Identifier	pentry		1066132	1					
ANR	1066542	Identifier	NULL		1066132	1					
ANR	1066543	ExpressionStatement	nPipe --	2074:1:59770:59777	1066132	21	True				
ANR	1066544	PostIncDecOperationExpression	nPipe --		1066132	0					
ANR	1066545	Identifier	nPipe		1066132	0					
ANR	1066546	IncDec	--		1066132	1					
ANR	1066547	ExpressionStatement	Wake_up_select ( )	2080:1:59958:59974	1066132	22	True				
ANR	1066548	CallExpression	Wake_up_select ( )		1066132	0					
ANR	1066549	Callee	Wake_up_select		1066132	0					
ANR	1066550	Identifier	Wake_up_select		1066132	0					
ANR	1066551	ArgumentList			1066132	1					
ANR	1066552	ReturnStatement	return TRUE ;	2083:1:59985:59996	1066132	23	True				
ANR	1066553	Identifier	TRUE		1066132	0					
ANR	1066554	ReturnType	int		1066132	1					
ANR	1066555	Identifier	DaemonCore :: Cancel_Pipe		1066132	2					
ANR	1066556	ParameterList	int pipe_end		1066132	3					
ANR	1066557	Parameter	int pipe_end	1992:29:57185:57196	1066132	0	True				
ANR	1066558	ParameterType	int		1066132	0					
ANR	1066559	Identifier	pipe_end		1066132	1					
ANR	1066560	CFGEntryNode	ENTRY		1066132		True				
ANR	1066561	CFGExitNode	EXIT		1066132		True				
ANR	1066562	Symbol	curr_regdataptr		1066132						
ANR	1066563	Symbol	pipe_end		1066132						
ANR	1066564	Symbol	* * pipeTable		1066132						
ANR	1066565	Symbol	( * pipeTable ) [ i ] . pentry -> watcherEvent		1066132						
ANR	1066566	Symbol	nPipe		1066132						
ANR	1066567	Symbol	curr_dataptr		1066132						
ANR	1066568	Symbol	( * pipeTable ) [ i ] . handler_descrip		1066132						
ANR	1066569	Symbol	( * pipeTable ) [ j ] . index		1066132						
ANR	1066570	Symbol	( * pipeTable ) [ i ] . pentry -> pipeEnd		1066132						
ANR	1066571	Symbol	( * pipeTable ) [ nPipe - 1 ] . handler_descrip		1066132						
ANR	1066572	Symbol	* * * pipeTable		1066132						
ANR	1066573	Symbol	* nPipe		1066132						
ANR	1066574	Symbol	( * pipeTable ) [ nPipe - 1 ] . pentry		1066132						
ANR	1066575	Symbol	( * pipeTable ) [ i ] . pipe_descrip		1066132						
ANR	1066576	Symbol	PIPE_INDEX_OFFSET		1066132						
ANR	1066577	Symbol	( * pipeTable ) [ nPipe - 1 ] . index		1066132						
ANR	1066578	Symbol	* * i		1066132						
ANR	1066579	Symbol	NULL		1066132						
ANR	1066580	Symbol	D_DAEMONCORE		1066132						
ANR	1066581	Symbol	( * pipeTable ) [ nPipe - 1 ] . pipe_descrip		1066132						
ANR	1066582	Symbol	D_ALWAYS		1066132						
ANR	1066583	Symbol	index		1066132						
ANR	1066584	Symbol	i		1066132						
ANR	1066585	Symbol	& ( * pipeTable ) [ i ] . pentry -> deallocate		1066132						
ANR	1066586	Symbol	TRUE		1066132						
ANR	1066587	Symbol	j		1066132						
ANR	1066588	Symbol	* pipeTable		1066132						
ANR	1066589	Symbol	pipeTable		1066132						
ANR	1066590	Symbol	& ( * pipeTable ) [ i ] . data_ptr		1066132						
ANR	1066591	Symbol	( * pipeTable ) [ i ] . index		1066132						
ANR	1066592	Symbol	* i		1066132						
ANR	1066593	Symbol	* j		1066132						
ANR	1066594	Symbol	( * pipeTable ) [ i ] . pentry		1066132						
ANR	1066595	Symbol	FALSE		1066132						
ANR	1066596	Symbol	( * pipeTable ) [ i ] . in_handler		1066132						
ANR	1066597	Symbol	* ( * pipeTable ) [ i ] . pentry		1066132						
ANR	1066598	Function	pipe_close_thread	2091:0:60277:60487							
ANR	1066599	FunctionDef	pipe_close_thread (void * arg)		1066598	0					
ANR	1066600	CompoundStatement		2092:0:60325:60487	1066598	0					
ANR	1066601	IdentifierDeclStatement	WritePipeEnd * wpe = ( WritePipeEnd * ) arg ;	2093:1:60328:60366	1066598	0	True				
ANR	1066602	IdentifierDecl	* wpe = ( WritePipeEnd * ) arg		1066598	0					
ANR	1066603	IdentifierDeclType	WritePipeEnd *		1066598	0					
ANR	1066604	Identifier	wpe		1066598	1					
ANR	1066605	AssignmentExpression	* wpe = ( WritePipeEnd * ) arg		1066598	2		=			
ANR	1066606	Identifier	wpe		1066598	0					
ANR	1066607	CastExpression	( WritePipeEnd * ) arg		1066598	1					
ANR	1066608	CastTarget	WritePipeEnd *		1066598	0					
ANR	1066609	Identifier	arg		1066598	1					
ANR	1066610	ExpressionStatement	wpe -> complete_async_write ( false )	2094:1:60369:60401	1066598	1	True				
ANR	1066611	CallExpression	wpe -> complete_async_write ( false )		1066598	0					
ANR	1066612	Callee	wpe -> complete_async_write		1066598	0					
ANR	1066613	PtrMemberAccess	wpe -> complete_async_write		1066598	0					
ANR	1066614	Identifier	wpe		1066598	0					
ANR	1066615	Identifier	complete_async_write		1066598	1					
ANR	1066616	ArgumentList	false		1066598	1					
ANR	1066617	Argument	false		1066598	0					
ANR	1066618	Identifier	false		1066598	0					
ANR	1066619	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""finally closing pipe %p\\n"" , wpe )"	2096:1:60405:60460	1066598	2	True				
ANR	1066620	CallExpression	"dprintf ( D_DAEMONCORE , ""finally closing pipe %p\\n"" , wpe )"		1066598	0					
ANR	1066621	Callee	dprintf		1066598	0					
ANR	1066622	Identifier	dprintf		1066598	0					
ANR	1066623	ArgumentList	D_DAEMONCORE		1066598	1					
ANR	1066624	Argument	D_DAEMONCORE		1066598	0					
ANR	1066625	Identifier	D_DAEMONCORE		1066598	0					
ANR	1066626	Argument	"""finally closing pipe %p\\n"""		1066598	1					
ANR	1066627	PrimaryExpression	"""finally closing pipe %p\\n"""		1066598	0					
ANR	1066628	Argument	wpe		1066598	2					
ANR	1066629	Identifier	wpe		1066598	0					
ANR	1066630	Statement	delete	2097:1:60463:60468	1066598	3	True				
ANR	1066631	ExpressionStatement	wpe	2097:8:60470:60473	1066598	4	True				
ANR	1066632	Identifier	wpe		1066598	0					
ANR	1066633	ReturnStatement	return 0 ;	2099:1:60477:60485	1066598	5	True				
ANR	1066634	PrimaryExpression	0		1066598	0					
ANR	1066635	ReturnType	unsigned __stdcall		1066598	1					
ANR	1066636	Identifier	pipe_close_thread		1066598	2					
ANR	1066637	ParameterList	void * arg		1066598	3					
ANR	1066638	Parameter	void * arg	2091:37:60314:60322	1066598	0	True				
ANR	1066639	ParameterType	void *		1066598	0					
ANR	1066640	Identifier	arg		1066598	1					
ANR	1066641	CFGEntryNode	ENTRY		1066598		True				
ANR	1066642	CFGExitNode	EXIT		1066598		True				
ANR	1066643	Symbol	D_DAEMONCORE		1066598						
ANR	1066644	Symbol	arg		1066598						
ANR	1066645	Symbol	false		1066598						
ANR	1066646	Symbol	wpe		1066598						
ANR	1066647	Function	DaemonCore :: Close_Pipe	2103:0:60497:62218							
ANR	1066648	FunctionDef	DaemonCore :: Close_Pipe (int pipe_end)		1066647	0					
ANR	1066649	CompoundStatement		2104:0:60540:62218	1066647	0					
ANR	1066650	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2105:1:60543:60583	1066647	0	True				
ANR	1066651	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1066647	0					
ANR	1066652	IdentifierDeclType	int		1066647	0					
ANR	1066653	Identifier	index		1066647	1					
ANR	1066654	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1066647	2		=			
ANR	1066655	Identifier	index		1066647	0					
ANR	1066656	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1066647	1		-			
ANR	1066657	Identifier	pipe_end		1066647	0					
ANR	1066658	Identifier	PIPE_INDEX_OFFSET		1066647	1					
ANR	1066659	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		1066647	1					
ANR	1066660	Condition	pipeHandleTableLookup ( index ) == FALSE	2106:5:60590:60626	1066647	0	True				
ANR	1066661	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		1066647	0		==			
ANR	1066662	CallExpression	pipeHandleTableLookup ( index )		1066647	0					
ANR	1066663	Callee	pipeHandleTableLookup		1066647	0					
ANR	1066664	Identifier	pipeHandleTableLookup		1066647	0					
ANR	1066665	ArgumentList	index		1066647	1					
ANR	1066666	Argument	index		1066647	0					
ANR	1066667	Identifier	index		1066647	0					
ANR	1066668	Identifier	FALSE		1066647	1					
ANR	1066669	CompoundStatement		3:44:88:88	1066647	1					
ANR	1066670	ExpressionStatement	"dprintf ( D_ALWAYS , ""Close_Pipe on invalid pipe end: %d\\n"" , pipe_end )"	2107:2:60633:60700	1066647	0	True				
ANR	1066671	CallExpression	"dprintf ( D_ALWAYS , ""Close_Pipe on invalid pipe end: %d\\n"" , pipe_end )"		1066647	0					
ANR	1066672	Callee	dprintf		1066647	0					
ANR	1066673	Identifier	dprintf		1066647	0					
ANR	1066674	ArgumentList	D_ALWAYS		1066647	1					
ANR	1066675	Argument	D_ALWAYS		1066647	0					
ANR	1066676	Identifier	D_ALWAYS		1066647	0					
ANR	1066677	Argument	"""Close_Pipe on invalid pipe end: %d\\n"""		1066647	1					
ANR	1066678	PrimaryExpression	"""Close_Pipe on invalid pipe end: %d\\n"""		1066647	0					
ANR	1066679	Argument	pipe_end		1066647	2					
ANR	1066680	Identifier	pipe_end		1066647	0					
ANR	1066681	ExpressionStatement	"EXCEPT ( ""Close_Pipe error"" )"	2108:2:60704:60730	1066647	1	True				
ANR	1066682	CallExpression	"EXCEPT ( ""Close_Pipe error"" )"		1066647	0					
ANR	1066683	Callee	EXCEPT		1066647	0					
ANR	1066684	Identifier	EXCEPT		1066647	0					
ANR	1066685	ArgumentList	"""Close_Pipe error"""		1066647	1					
ANR	1066686	Argument	"""Close_Pipe error"""		1066647	0					
ANR	1066687	PrimaryExpression	"""Close_Pipe error"""		1066647	0					
ANR	1066688	IdentifierDeclStatement	"int i , j ;"	2112:1:60781:60788	1066647	2	True				
ANR	1066689	IdentifierDecl	i		1066647	0					
ANR	1066690	IdentifierDeclType	int		1066647	0					
ANR	1066691	Identifier	i		1066647	1					
ANR	1066692	IdentifierDecl	j		1066647	1					
ANR	1066693	IdentifierDeclType	int		1066647	0					
ANR	1066694	Identifier	j		1066647	1					
ANR	1066695	ExpressionStatement	i = - 1	2113:1:60791:60797	1066647	3	True				
ANR	1066696	AssignmentExpression	i = - 1		1066647	0		=			
ANR	1066697	Identifier	i		1066647	0					
ANR	1066698	UnaryOperationExpression	- 1		1066647	1					
ANR	1066699	UnaryOperator	-		1066647	0					
ANR	1066700	PrimaryExpression	1		1066647	1					
ANR	1066701	ForStatement	for ( j = 0 ; j < nPipe ; j ++ )		1066647	4					
ANR	1066702	ForInit	j = 0 ;	2114:6:60805:60808	1066647	0	True				
ANR	1066703	AssignmentExpression	j = 0		1066647	0		=			
ANR	1066704	Identifier	j		1066647	0					
ANR	1066705	PrimaryExpression	0		1066647	1					
ANR	1066706	Condition	j < nPipe	2114:10:60809:60815	1066647	1	True				
ANR	1066707	RelationalExpression	j < nPipe		1066647	0		<			
ANR	1066708	Identifier	j		1066647	0					
ANR	1066709	Identifier	nPipe		1066647	1					
ANR	1066710	PostIncDecOperationExpression	j ++	2114:18:60817:60819	1066647	2	True				
ANR	1066711	Identifier	j		1066647	0					
ANR	1066712	IncDec	++		1066647	1					
ANR	1066713	CompoundStatement		11:23:281:281	1066647	3					
ANR	1066714	IfStatement	if ( ( * pipeTable ) [ j ] . index == index )		1066647	0					
ANR	1066715	Condition	( * pipeTable ) [ j ] . index == index	2115:7:60867:60896	1066647	0	True				
ANR	1066716	EqualityExpression	( * pipeTable ) [ j ] . index == index		1066647	0		==			
ANR	1066717	MemberAccess	( * pipeTable ) [ j ] . index		1066647	0					
ANR	1066718	ArrayIndexing	( * pipeTable ) [ j ]		1066647	0					
ANR	1066719	UnaryOperationExpression	* pipeTable		1066647	0					
ANR	1066720	UnaryOperator	*		1066647	0					
ANR	1066721	Identifier	pipeTable		1066647	1					
ANR	1066722	Identifier	j		1066647	1					
ANR	1066723	Identifier	index		1066647	1					
ANR	1066724	Identifier	index		1066647	1					
ANR	1066725	CompoundStatement		12:40:359:359	1066647	1					
ANR	1066726	ExpressionStatement	i = j	2116:3:60905:60910	1066647	0	True				
ANR	1066727	AssignmentExpression	i = j		1066647	0		=			
ANR	1066728	Identifier	i		1066647	0					
ANR	1066729	Identifier	j		1066647	1					
ANR	1066730	BreakStatement	break ;	2117:3:60915:60920	1066647	1	True				
ANR	1066731	IfStatement	if ( i != - 1 )		1066647	5					
ANR	1066732	Condition	i != - 1	2120:6:60935:60941	1066647	0	True				
ANR	1066733	EqualityExpression	i != - 1		1066647	0		!=			
ANR	1066734	Identifier	i		1066647	0					
ANR	1066735	UnaryOperationExpression	- 1		1066647	1					
ANR	1066736	UnaryOperator	-		1066647	0					
ANR	1066737	PrimaryExpression	1		1066647	1					
ANR	1066738	CompoundStatement		19:2:469:503	1066647	1					
ANR	1066739	IdentifierDeclStatement	int result = Cancel_Pipe ( pipe_end ) ;	2122:2:61010:61044	1066647	0	True				
ANR	1066740	IdentifierDecl	result = Cancel_Pipe ( pipe_end )		1066647	0					
ANR	1066741	IdentifierDeclType	int		1066647	0					
ANR	1066742	Identifier	result		1066647	1					
ANR	1066743	AssignmentExpression	result = Cancel_Pipe ( pipe_end )		1066647	2		=			
ANR	1066744	Identifier	result		1066647	0					
ANR	1066745	CallExpression	Cancel_Pipe ( pipe_end )		1066647	1					
ANR	1066746	Callee	Cancel_Pipe		1066647	0					
ANR	1066747	Identifier	Cancel_Pipe		1066647	0					
ANR	1066748	ArgumentList	pipe_end		1066647	1					
ANR	1066749	Argument	pipe_end		1066647	0					
ANR	1066750	Identifier	pipe_end		1066647	0					
ANR	1066751	ExpressionStatement	ASSERT ( result == TRUE )	2125:2:61184:61208	1066647	1	True				
ANR	1066752	CallExpression	ASSERT ( result == TRUE )		1066647	0					
ANR	1066753	Callee	ASSERT		1066647	0					
ANR	1066754	Identifier	ASSERT		1066647	0					
ANR	1066755	ArgumentList	result == TRUE		1066647	1					
ANR	1066756	Argument	result == TRUE		1066647	0					
ANR	1066757	EqualityExpression	result == TRUE		1066647	0		==			
ANR	1066758	Identifier	result		1066647	0					
ANR	1066759	Identifier	TRUE		1066647	1					
ANR	1066760	IdentifierDeclStatement	int retval = TRUE ;	2129:1:61240:61257	1066647	6	True				
ANR	1066761	IdentifierDecl	retval = TRUE		1066647	0					
ANR	1066762	IdentifierDeclType	int		1066647	0					
ANR	1066763	Identifier	retval		1066647	1					
ANR	1066764	AssignmentExpression	retval = TRUE		1066647	2		=			
ANR	1066765	Identifier	TRUE		1066647	0					
ANR	1066766	Identifier	TRUE		1066647	1					
ANR	1066767	Statement	WritePipeEnd	2131:1:61279:61290	1066647	7	True				
ANR	1066768	Statement	*	2131:13:61291:61291	1066647	8	True				
ANR	1066769	Statement	wpe	2131:15:61293:61295	1066647	9	True				
ANR	1066770	Statement	=	2131:19:61297:61297	1066647	10	True				
ANR	1066771	Statement	dynamic_cast	2131:21:61299:61310	1066647	11	True				
ANR	1066772	Statement	<	2131:33:61311:61311	1066647	12	True				
ANR	1066773	Statement	WritePipeEnd	2131:34:61312:61323	1066647	13	True				
ANR	1066774	Statement	*	2131:46:61324:61324	1066647	14	True				
ANR	1066775	Statement	>	2131:47:61325:61325	1066647	15	True				
ANR	1066776	ExpressionStatement	( * pipeHandleTable ) [ index ]	2131:48:61326:61353	1066647	16	True				
ANR	1066777	ArrayIndexing	( * pipeHandleTable ) [ index ]		1066647	0					
ANR	1066778	UnaryOperationExpression	* pipeHandleTable		1066647	0					
ANR	1066779	UnaryOperator	*		1066647	0					
ANR	1066780	Identifier	pipeHandleTable		1066647	1					
ANR	1066781	Identifier	index		1066647	1					
ANR	1066782	IfStatement	if ( wpe && wpe -> needs_delayed_close ( ) )		1066647	17					
ANR	1066783	Condition	wpe && wpe -> needs_delayed_close ( )	2132:5:61360:61392	1066647	0	True				
ANR	1066784	AndExpression	wpe && wpe -> needs_delayed_close ( )		1066647	0		&&			
ANR	1066785	Identifier	wpe		1066647	0					
ANR	1066786	CallExpression	wpe -> needs_delayed_close ( )		1066647	1					
ANR	1066787	Callee	wpe -> needs_delayed_close		1066647	0					
ANR	1066788	PtrMemberAccess	wpe -> needs_delayed_close		1066647	0					
ANR	1066789	Identifier	wpe		1066647	0					
ANR	1066790	Identifier	needs_delayed_close		1066647	1					
ANR	1066791	ArgumentList			1066647	1					
ANR	1066792	CompoundStatement		29:40:854:854	1066647	1					
ANR	1066793	ExpressionStatement	"CloseHandle ( ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL ) )"	2136:2:61582:61687	1066647	0	True				
ANR	1066794	CallExpression	"CloseHandle ( ( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL ) )"		1066647	0					
ANR	1066795	Callee	CloseHandle		1066647	0					
ANR	1066796	Identifier	CloseHandle		1066647	0					
ANR	1066797	ArgumentList	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		1066647	1					
ANR	1066798	Argument	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		1066647	0					
ANR	1066799	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		1066647	0					
ANR	1066800	CastTarget	HANDLE		1066647	0					
ANR	1066801	CallExpression	"_beginthreadex ( NULL , 0 , pipe_close_thread , wpe , 0 , NULL )"		1066647	1					
ANR	1066802	Callee	_beginthreadex		1066647	0					
ANR	1066803	Identifier	_beginthreadex		1066647	0					
ANR	1066804	ArgumentList	NULL		1066647	1					
ANR	1066805	Argument	NULL		1066647	0					
ANR	1066806	Identifier	NULL		1066647	0					
ANR	1066807	Argument	0		1066647	1					
ANR	1066808	PrimaryExpression	0		1066647	0					
ANR	1066809	Argument	pipe_close_thread		1066647	2					
ANR	1066810	Identifier	pipe_close_thread		1066647	0					
ANR	1066811	Argument	wpe		1066647	3					
ANR	1066812	Identifier	wpe		1066647	0					
ANR	1066813	Argument	0		1066647	4					
ANR	1066814	PrimaryExpression	0		1066647	0					
ANR	1066815	Argument	NULL		1066647	5					
ANR	1066816	Identifier	NULL		1066647	0					
ANR	1066817	ElseStatement	else		1066647	0					
ANR	1066818	CompoundStatement		37:6:1157:1157	1066647	0					
ANR	1066819	Statement	delete	2143:2:61784:61789	1066647	0	True				
ANR	1066820	ExpressionStatement	( * pipeHandleTable ) [ index ]	2143:9:61791:61816	1066647	1	True				
ANR	1066821	ArrayIndexing	( * pipeHandleTable ) [ index ]		1066647	0					
ANR	1066822	UnaryOperationExpression	* pipeHandleTable		1066647	0					
ANR	1066823	UnaryOperator	*		1066647	0					
ANR	1066824	Identifier	pipeHandleTable		1066647	1					
ANR	1066825	Identifier	index		1066647	1					
ANR	1066826	ExpressionStatement	pipeHandleTableRemove ( index )	2155:1:62067:62095	1066647	18	True				
ANR	1066827	CallExpression	pipeHandleTableRemove ( index )		1066647	0					
ANR	1066828	Callee	pipeHandleTableRemove		1066647	0					
ANR	1066829	Identifier	pipeHandleTableRemove		1066647	0					
ANR	1066830	ArgumentList	index		1066647	1					
ANR	1066831	Argument	index		1066647	0					
ANR	1066832	Identifier	index		1066647	0					
ANR	1066833	IfStatement	if ( retval == TRUE )		1066647	19					
ANR	1066834	Condition	retval == TRUE	2157:5:62103:62116	1066647	0	True				
ANR	1066835	EqualityExpression	retval == TRUE		1066647	0		==			
ANR	1066836	Identifier	retval		1066647	0					
ANR	1066837	Identifier	TRUE		1066647	1					
ANR	1066838	CompoundStatement		54:21:1578:1578	1066647	1					
ANR	1066839	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Close_Pipe(pipe_end=%d) succeeded\\n"" , pipe_end )"	2158:2:62123:62196	1066647	0	True				
ANR	1066840	CallExpression	"dprintf ( D_DAEMONCORE , ""Close_Pipe(pipe_end=%d) succeeded\\n"" , pipe_end )"		1066647	0					
ANR	1066841	Callee	dprintf		1066647	0					
ANR	1066842	Identifier	dprintf		1066647	0					
ANR	1066843	ArgumentList	D_DAEMONCORE		1066647	1					
ANR	1066844	Argument	D_DAEMONCORE		1066647	0					
ANR	1066845	Identifier	D_DAEMONCORE		1066647	0					
ANR	1066846	Argument	"""Close_Pipe(pipe_end=%d) succeeded\\n"""		1066647	1					
ANR	1066847	PrimaryExpression	"""Close_Pipe(pipe_end=%d) succeeded\\n"""		1066647	0					
ANR	1066848	Argument	pipe_end		1066647	2					
ANR	1066849	Identifier	pipe_end		1066647	0					
ANR	1066850	ReturnStatement	return retval ;	2162:1:62203:62216	1066647	20	True				
ANR	1066851	Identifier	retval		1066647	0					
ANR	1066852	ReturnType	int		1066647	1					
ANR	1066853	Identifier	DaemonCore :: Close_Pipe		1066647	2					
ANR	1066854	ParameterList	int pipe_end		1066647	3					
ANR	1066855	Parameter	int pipe_end	2103:28:60525:60536	1066647	0	True				
ANR	1066856	ParameterType	int		1066647	0					
ANR	1066857	Identifier	pipe_end		1066647	1					
ANR	1066858	CFGEntryNode	ENTRY		1066647		True				
ANR	1066859	CFGExitNode	EXIT		1066647		True				
ANR	1066860	Symbol	pipe_end		1066647						
ANR	1066861	Symbol	* pipeHandleTable		1066647						
ANR	1066862	Symbol	* * pipeTable		1066647						
ANR	1066863	Symbol	nPipe		1066647						
ANR	1066864	Symbol	_beginthreadex		1066647						
ANR	1066865	Symbol	pipeHandleTableLookup		1066647						
ANR	1066866	Symbol	pipe_close_thread		1066647						
ANR	1066867	Symbol	( * pipeTable ) [ j ] . index		1066647						
ANR	1066868	Symbol	result		1066647						
ANR	1066869	Symbol	pipeHandleTable		1066647						
ANR	1066870	Symbol	* wpe		1066647						
ANR	1066871	Symbol	PIPE_INDEX_OFFSET		1066647						
ANR	1066872	Symbol	NULL		1066647						
ANR	1066873	Symbol	D_DAEMONCORE		1066647						
ANR	1066874	Symbol	D_ALWAYS		1066647						
ANR	1066875	Symbol	wpe -> needs_delayed_close		1066647						
ANR	1066876	Symbol	index		1066647						
ANR	1066877	Symbol	i		1066647						
ANR	1066878	Symbol	TRUE		1066647						
ANR	1066879	Symbol	j		1066647						
ANR	1066880	Symbol	* pipeTable		1066647						
ANR	1066881	Symbol	pipeTable		1066647						
ANR	1066882	Symbol	wpe		1066647						
ANR	1066883	Symbol	retval		1066647						
ANR	1066884	Symbol	* j		1066647						
ANR	1066885	Symbol	FALSE		1066647						
ANR	1066886	Symbol	Cancel_Pipe		1066647						
ANR	1066887	Function	DaemonCore :: Cancel_And_Close_All_Pipes	2166:0:62222:62697							
ANR	1066888	FunctionDef	DaemonCore :: Cancel_And_Close_All_Pipes ()		1066887	0					
ANR	1066889	CompoundStatement		2168:0:62271:62697	1066887	0					
ANR	1066890	IdentifierDeclStatement	int i = 0 ;	2171:1:62396:62405	1066887	0	True				
ANR	1066891	IdentifierDecl	i = 0		1066887	0					
ANR	1066892	IdentifierDeclType	int		1066887	0					
ANR	1066893	Identifier	i		1066887	1					
ANR	1066894	AssignmentExpression	i = 0		1066887	2		=			
ANR	1066895	Identifier	i		1066887	0					
ANR	1066896	PrimaryExpression	0		1066887	1					
ANR	1066897	WhileStatement	while ( nPipe > 0 )		1066887	1					
ANR	1066898	Condition	nPipe > 0	2173:9:62417:62425	1066887	0	True				
ANR	1066899	RelationalExpression	nPipe > 0		1066887	0		>			
ANR	1066900	Identifier	nPipe		1066887	0					
ANR	1066901	PrimaryExpression	0		1066887	1					
ANR	1066902	CompoundStatement		6:21:157:157	1066887	1					
ANR	1066903	IfStatement	if ( ( * pipeTable ) [ 0 ] . index != - 1 )		1066887	0					
ANR	1066904	Condition	( * pipeTable ) [ 0 ] . index != - 1	2174:7:62438:62464	1066887	0	True				
ANR	1066905	EqualityExpression	( * pipeTable ) [ 0 ] . index != - 1		1066887	0		!=			
ANR	1066906	MemberAccess	( * pipeTable ) [ 0 ] . index		1066887	0					
ANR	1066907	ArrayIndexing	( * pipeTable ) [ 0 ]		1066887	0					
ANR	1066908	UnaryOperationExpression	* pipeTable		1066887	0					
ANR	1066909	UnaryOperator	*		1066887	0					
ANR	1066910	Identifier	pipeTable		1066887	1					
ANR	1066911	PrimaryExpression	0		1066887	1					
ANR	1066912	Identifier	index		1066887	1					
ANR	1066913	UnaryOperationExpression	- 1		1066887	1					
ANR	1066914	UnaryOperator	-		1066887	0					
ANR	1066915	PrimaryExpression	1		1066887	1					
ANR	1066916	CompoundStatement		7:37:196:196	1066887	1					
ANR	1066917	ExpressionStatement	Close_Pipe ( ( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET )	2178:3:62613:62668	1066887	0	True				
ANR	1066918	CallExpression	Close_Pipe ( ( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET )		1066887	0					
ANR	1066919	Callee	Close_Pipe		1066887	0					
ANR	1066920	Identifier	Close_Pipe		1066887	0					
ANR	1066921	ArgumentList	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		1066887	1					
ANR	1066922	Argument	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		1066887	0					
ANR	1066923	AdditiveExpression	( * pipeTable ) [ 0 ] . index + PIPE_INDEX_OFFSET		1066887	0		+			
ANR	1066924	MemberAccess	( * pipeTable ) [ 0 ] . index		1066887	0					
ANR	1066925	ArrayIndexing	( * pipeTable ) [ 0 ]		1066887	0					
ANR	1066926	UnaryOperationExpression	* pipeTable		1066887	0					
ANR	1066927	UnaryOperator	*		1066887	0					
ANR	1066928	Identifier	pipeTable		1066887	1					
ANR	1066929	PrimaryExpression	0		1066887	1					
ANR	1066930	Identifier	index		1066887	1					
ANR	1066931	Identifier	PIPE_INDEX_OFFSET		1066887	1					
ANR	1066932	ExpressionStatement	i ++	2179:3:62673:62676	1066887	1	True				
ANR	1066933	PostIncDecOperationExpression	i ++		1066887	0					
ANR	1066934	Identifier	i		1066887	0					
ANR	1066935	IncDec	++		1066887	1					
ANR	1066936	ReturnStatement	return i ;	2183:1:62687:62695	1066887	2	True				
ANR	1066937	Identifier	i		1066887	0					
ANR	1066938	ReturnType	int		1066887	1					
ANR	1066939	Identifier	DaemonCore :: Cancel_And_Close_All_Pipes		1066887	2					
ANR	1066940	ParameterList			1066887	3					
ANR	1066941	CFGEntryNode	ENTRY		1066887		True				
ANR	1066942	CFGExitNode	EXIT		1066887		True				
ANR	1066943	Symbol	PIPE_INDEX_OFFSET		1066887						
ANR	1066944	Symbol	( * pipeTable ) [ 0 ] . index		1066887						
ANR	1066945	Symbol	* * pipeTable		1066887						
ANR	1066946	Symbol	nPipe		1066887						
ANR	1066947	Symbol	i		1066887						
ANR	1066948	Symbol	* pipeTable		1066887						
ANR	1066949	Symbol	pipeTable		1066887						
ANR	1066950	Function	DaemonCore :: Read_Pipe	2186:0:62700:63265							
ANR	1066951	FunctionDef	"DaemonCore :: Read_Pipe (int pipe_end , void * buffer , int len)"		1066950	0					
ANR	1066952	CompoundStatement		2188:0:62763:63265	1066950	0					
ANR	1066953	IfStatement	if ( len < 0 )		1066950	0					
ANR	1066954	Condition	len < 0	2189:5:62770:62776	1066950	0	True				
ANR	1066955	RelationalExpression	len < 0		1066950	0		<			
ANR	1066956	Identifier	len		1066950	0					
ANR	1066957	PrimaryExpression	0		1066950	1					
ANR	1066958	CompoundStatement		2:14:15:15	1066950	1					
ANR	1066959	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid len: %d\\n"" , len )"	2190:2:62783:62837	1066950	0	True				
ANR	1066960	CallExpression	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid len: %d\\n"" , len )"		1066950	0					
ANR	1066961	Callee	dprintf		1066950	0					
ANR	1066962	Identifier	dprintf		1066950	0					
ANR	1066963	ArgumentList	D_ALWAYS		1066950	1					
ANR	1066964	Argument	D_ALWAYS		1066950	0					
ANR	1066965	Identifier	D_ALWAYS		1066950	0					
ANR	1066966	Argument	"""Read_Pipe: invalid len: %d\\n"""		1066950	1					
ANR	1066967	PrimaryExpression	"""Read_Pipe: invalid len: %d\\n"""		1066950	0					
ANR	1066968	Argument	len		1066950	2					
ANR	1066969	Identifier	len		1066950	0					
ANR	1066970	ExpressionStatement	"EXCEPT ( ""Read_Pipe"" )"	2191:2:62841:62860	1066950	1	True				
ANR	1066971	CallExpression	"EXCEPT ( ""Read_Pipe"" )"		1066950	0					
ANR	1066972	Callee	EXCEPT		1066950	0					
ANR	1066973	Identifier	EXCEPT		1066950	0					
ANR	1066974	ArgumentList	"""Read_Pipe"""		1066950	1					
ANR	1066975	Argument	"""Read_Pipe"""		1066950	0					
ANR	1066976	PrimaryExpression	"""Read_Pipe"""		1066950	0					
ANR	1066977	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2194:1:62867:62907	1066950	1	True				
ANR	1066978	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1066950	0					
ANR	1066979	IdentifierDeclType	int		1066950	0					
ANR	1066980	Identifier	index		1066950	1					
ANR	1066981	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1066950	2		=			
ANR	1066982	Identifier	index		1066950	0					
ANR	1066983	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1066950	1		-			
ANR	1066984	Identifier	pipe_end		1066950	0					
ANR	1066985	Identifier	PIPE_INDEX_OFFSET		1066950	1					
ANR	1066986	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		1066950	2					
ANR	1066987	Condition	pipeHandleTableLookup ( index ) == FALSE	2195:5:62914:62950	1066950	0	True				
ANR	1066988	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		1066950	0		==			
ANR	1066989	CallExpression	pipeHandleTableLookup ( index )		1066950	0					
ANR	1066990	Callee	pipeHandleTableLookup		1066950	0					
ANR	1066991	Identifier	pipeHandleTableLookup		1066950	0					
ANR	1066992	ArgumentList	index		1066950	1					
ANR	1066993	Argument	index		1066950	0					
ANR	1066994	Identifier	index		1066950	0					
ANR	1066995	Identifier	FALSE		1066950	1					
ANR	1066996	CompoundStatement		8:44:189:189	1066950	1					
ANR	1066997	ExpressionStatement	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"	2196:2:62957:63021	1066950	0	True				
ANR	1066998	CallExpression	"dprintf ( D_ALWAYS , ""Read_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"		1066950	0					
ANR	1066999	Callee	dprintf		1066950	0					
ANR	1067000	Identifier	dprintf		1066950	0					
ANR	1067001	ArgumentList	D_ALWAYS		1066950	1					
ANR	1067002	Argument	D_ALWAYS		1066950	0					
ANR	1067003	Identifier	D_ALWAYS		1066950	0					
ANR	1067004	Argument	"""Read_Pipe: invalid pipe_end: %d\\n"""		1066950	1					
ANR	1067005	PrimaryExpression	"""Read_Pipe: invalid pipe_end: %d\\n"""		1066950	0					
ANR	1067006	Argument	pipe_end		1066950	2					
ANR	1067007	Identifier	pipe_end		1066950	0					
ANR	1067008	ExpressionStatement	"EXCEPT ( ""Read_Pipe"" )"	2197:2:63025:63044	1066950	1	True				
ANR	1067009	CallExpression	"EXCEPT ( ""Read_Pipe"" )"		1066950	0					
ANR	1067010	Callee	EXCEPT		1066950	0					
ANR	1067011	Identifier	EXCEPT		1066950	0					
ANR	1067012	ArgumentList	"""Read_Pipe"""		1066950	1					
ANR	1067013	Argument	"""Read_Pipe"""		1066950	0					
ANR	1067014	PrimaryExpression	"""Read_Pipe"""		1066950	0					
ANR	1067015	Statement	ReadPipeEnd	2201:1:63070:63080	1066950	3	True				
ANR	1067016	Statement	*	2201:12:63081:63081	1066950	4	True				
ANR	1067017	Statement	rpe	2201:14:63083:63085	1066950	5	True				
ANR	1067018	Statement	=	2201:18:63087:63087	1066950	6	True				
ANR	1067019	Statement	dynamic_cast	2201:20:63089:63100	1066950	7	True				
ANR	1067020	Statement	<	2201:32:63101:63101	1066950	8	True				
ANR	1067021	Statement	ReadPipeEnd	2201:33:63102:63112	1066950	9	True				
ANR	1067022	Statement	*	2201:44:63113:63113	1066950	10	True				
ANR	1067023	Statement	>	2201:45:63114:63114	1066950	11	True				
ANR	1067024	ExpressionStatement	( * pipeHandleTable ) [ index ]	2201:46:63115:63142	1066950	12	True				
ANR	1067025	ArrayIndexing	( * pipeHandleTable ) [ index ]		1066950	0					
ANR	1067026	UnaryOperationExpression	* pipeHandleTable		1066950	0					
ANR	1067027	UnaryOperator	*		1066950	0					
ANR	1067028	Identifier	pipeHandleTable		1066950	1					
ANR	1067029	Identifier	index		1066950	1					
ANR	1067030	ExpressionStatement	ASSERT ( rpe != NULL )	2202:1:63145:63164	1066950	13	True				
ANR	1067031	CallExpression	ASSERT ( rpe != NULL )		1066950	0					
ANR	1067032	Callee	ASSERT		1066950	0					
ANR	1067033	Identifier	ASSERT		1066950	0					
ANR	1067034	ArgumentList	rpe != NULL		1066950	1					
ANR	1067035	Argument	rpe != NULL		1066950	0					
ANR	1067036	EqualityExpression	rpe != NULL		1066950	0		!=			
ANR	1067037	Identifier	rpe		1066950	0					
ANR	1067038	Identifier	NULL		1066950	1					
ANR	1067039	ReturnStatement	"return rpe -> read ( buffer , len ) ;"	2203:1:63167:63196	1066950	14	True				
ANR	1067040	CallExpression	"rpe -> read ( buffer , len )"		1066950	0					
ANR	1067041	Callee	rpe -> read		1066950	0					
ANR	1067042	PtrMemberAccess	rpe -> read		1066950	0					
ANR	1067043	Identifier	rpe		1066950	0					
ANR	1067044	Identifier	read		1066950	1					
ANR	1067045	ArgumentList	buffer		1066950	1					
ANR	1067046	Argument	buffer		1066950	0					
ANR	1067047	Identifier	buffer		1066950	0					
ANR	1067048	Argument	len		1066950	1					
ANR	1067049	Identifier	len		1066950	0					
ANR	1067050	ReturnType	int		1066950	1					
ANR	1067051	Identifier	DaemonCore :: Read_Pipe		1066950	2					
ANR	1067052	ParameterList	"int pipe_end , void * buffer , int len"		1066950	3					
ANR	1067053	Parameter	int pipe_end	2187:22:62726:62737	1066950	0	True				
ANR	1067054	ParameterType	int		1066950	0					
ANR	1067055	Identifier	pipe_end		1066950	1					
ANR	1067056	Parameter	void * buffer	2187:36:62740:62751	1066950	1	True				
ANR	1067057	ParameterType	void *		1066950	0					
ANR	1067058	Identifier	buffer		1066950	1					
ANR	1067059	Parameter	int len	2187:50:62754:62760	1066950	2	True				
ANR	1067060	ParameterType	int		1066950	0					
ANR	1067061	Identifier	len		1066950	1					
ANR	1067062	CFGEntryNode	ENTRY		1066950		True				
ANR	1067063	CFGExitNode	EXIT		1066950		True				
ANR	1067064	Symbol	PIPE_INDEX_OFFSET		1066950						
ANR	1067065	Symbol	NULL		1066950						
ANR	1067066	Symbol	pipe_end		1066950						
ANR	1067067	Symbol	* pipeHandleTable		1066950						
ANR	1067068	Symbol	rpe		1066950						
ANR	1067069	Symbol	D_ALWAYS		1066950						
ANR	1067070	Symbol	index		1066950						
ANR	1067071	Symbol	pipeHandleTableLookup		1066950						
ANR	1067072	Symbol	* rpe		1066950						
ANR	1067073	Symbol	pipeHandleTable		1066950						
ANR	1067074	Symbol	len		1066950						
ANR	1067075	Symbol	rpe -> read		1066950						
ANR	1067076	Symbol	FALSE		1066950						
ANR	1067077	Symbol	buffer		1066950						
ANR	1067078	Function	DaemonCore :: Write_Pipe	2209:0:63268:63866							
ANR	1067079	FunctionDef	"DaemonCore :: Write_Pipe (int pipe_end , const void * buffer , int len)"		1067078	0					
ANR	1067080	CompoundStatement		2211:0:63338:63866	1067078	0					
ANR	1067081	IfStatement	if ( len < 0 )		1067078	0					
ANR	1067082	Condition	len < 0	2212:5:63345:63351	1067078	0	True				
ANR	1067083	RelationalExpression	len < 0		1067078	0		<			
ANR	1067084	Identifier	len		1067078	0					
ANR	1067085	PrimaryExpression	0		1067078	1					
ANR	1067086	CompoundStatement		2:14:15:15	1067078	1					
ANR	1067087	ExpressionStatement	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid len: %d\\n"" , len )"	2213:2:63358:63413	1067078	0	True				
ANR	1067088	CallExpression	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid len: %d\\n"" , len )"		1067078	0					
ANR	1067089	Callee	dprintf		1067078	0					
ANR	1067090	Identifier	dprintf		1067078	0					
ANR	1067091	ArgumentList	D_ALWAYS		1067078	1					
ANR	1067092	Argument	D_ALWAYS		1067078	0					
ANR	1067093	Identifier	D_ALWAYS		1067078	0					
ANR	1067094	Argument	"""Write_Pipe: invalid len: %d\\n"""		1067078	1					
ANR	1067095	PrimaryExpression	"""Write_Pipe: invalid len: %d\\n"""		1067078	0					
ANR	1067096	Argument	len		1067078	2					
ANR	1067097	Identifier	len		1067078	0					
ANR	1067098	ExpressionStatement	"EXCEPT ( ""Write_Pipe"" )"	2214:2:63417:63437	1067078	1	True				
ANR	1067099	CallExpression	"EXCEPT ( ""Write_Pipe"" )"		1067078	0					
ANR	1067100	Callee	EXCEPT		1067078	0					
ANR	1067101	Identifier	EXCEPT		1067078	0					
ANR	1067102	ArgumentList	"""Write_Pipe"""		1067078	1					
ANR	1067103	Argument	"""Write_Pipe"""		1067078	0					
ANR	1067104	PrimaryExpression	"""Write_Pipe"""		1067078	0					
ANR	1067105	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2217:1:63444:63484	1067078	1	True				
ANR	1067106	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1067078	0					
ANR	1067107	IdentifierDeclType	int		1067078	0					
ANR	1067108	Identifier	index		1067078	1					
ANR	1067109	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1067078	2		=			
ANR	1067110	Identifier	index		1067078	0					
ANR	1067111	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1067078	1		-			
ANR	1067112	Identifier	pipe_end		1067078	0					
ANR	1067113	Identifier	PIPE_INDEX_OFFSET		1067078	1					
ANR	1067114	IfStatement	if ( pipeHandleTableLookup ( index ) == FALSE )		1067078	2					
ANR	1067115	Condition	pipeHandleTableLookup ( index ) == FALSE	2218:5:63491:63527	1067078	0	True				
ANR	1067116	EqualityExpression	pipeHandleTableLookup ( index ) == FALSE		1067078	0		==			
ANR	1067117	CallExpression	pipeHandleTableLookup ( index )		1067078	0					
ANR	1067118	Callee	pipeHandleTableLookup		1067078	0					
ANR	1067119	Identifier	pipeHandleTableLookup		1067078	0					
ANR	1067120	ArgumentList	index		1067078	1					
ANR	1067121	Argument	index		1067078	0					
ANR	1067122	Identifier	index		1067078	0					
ANR	1067123	Identifier	FALSE		1067078	1					
ANR	1067124	CompoundStatement		8:44:191:191	1067078	1					
ANR	1067125	ExpressionStatement	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"	2219:2:63534:63599	1067078	0	True				
ANR	1067126	CallExpression	"dprintf ( D_ALWAYS , ""Write_Pipe: invalid pipe_end: %d\\n"" , pipe_end )"		1067078	0					
ANR	1067127	Callee	dprintf		1067078	0					
ANR	1067128	Identifier	dprintf		1067078	0					
ANR	1067129	ArgumentList	D_ALWAYS		1067078	1					
ANR	1067130	Argument	D_ALWAYS		1067078	0					
ANR	1067131	Identifier	D_ALWAYS		1067078	0					
ANR	1067132	Argument	"""Write_Pipe: invalid pipe_end: %d\\n"""		1067078	1					
ANR	1067133	PrimaryExpression	"""Write_Pipe: invalid pipe_end: %d\\n"""		1067078	0					
ANR	1067134	Argument	pipe_end		1067078	2					
ANR	1067135	Identifier	pipe_end		1067078	0					
ANR	1067136	ExpressionStatement	"EXCEPT ( ""Write_Pipe: invalid pipe end"" )"	2220:2:63603:63641	1067078	1	True				
ANR	1067137	CallExpression	"EXCEPT ( ""Write_Pipe: invalid pipe end"" )"		1067078	0					
ANR	1067138	Callee	EXCEPT		1067078	0					
ANR	1067139	Identifier	EXCEPT		1067078	0					
ANR	1067140	ArgumentList	"""Write_Pipe: invalid pipe end"""		1067078	1					
ANR	1067141	Argument	"""Write_Pipe: invalid pipe end"""		1067078	0					
ANR	1067142	PrimaryExpression	"""Write_Pipe: invalid pipe end"""		1067078	0					
ANR	1067143	Statement	WritePipeEnd	2224:1:63667:63678	1067078	3	True				
ANR	1067144	Statement	*	2224:13:63679:63679	1067078	4	True				
ANR	1067145	Statement	wpe	2224:15:63681:63683	1067078	5	True				
ANR	1067146	Statement	=	2224:19:63685:63685	1067078	6	True				
ANR	1067147	Statement	dynamic_cast	2224:21:63687:63698	1067078	7	True				
ANR	1067148	Statement	<	2224:33:63699:63699	1067078	8	True				
ANR	1067149	Statement	WritePipeEnd	2224:34:63700:63711	1067078	9	True				
ANR	1067150	Statement	*	2224:46:63712:63712	1067078	10	True				
ANR	1067151	Statement	>	2224:47:63713:63713	1067078	11	True				
ANR	1067152	ExpressionStatement	( * pipeHandleTable ) [ index ]	2224:48:63714:63741	1067078	12	True				
ANR	1067153	ArrayIndexing	( * pipeHandleTable ) [ index ]		1067078	0					
ANR	1067154	UnaryOperationExpression	* pipeHandleTable		1067078	0					
ANR	1067155	UnaryOperator	*		1067078	0					
ANR	1067156	Identifier	pipeHandleTable		1067078	1					
ANR	1067157	Identifier	index		1067078	1					
ANR	1067158	ExpressionStatement	ASSERT ( wpe != NULL )	2225:1:63744:63763	1067078	13	True				
ANR	1067159	CallExpression	ASSERT ( wpe != NULL )		1067078	0					
ANR	1067160	Callee	ASSERT		1067078	0					
ANR	1067161	Identifier	ASSERT		1067078	0					
ANR	1067162	ArgumentList	wpe != NULL		1067078	1					
ANR	1067163	Argument	wpe != NULL		1067078	0					
ANR	1067164	EqualityExpression	wpe != NULL		1067078	0		!=			
ANR	1067165	Identifier	wpe		1067078	0					
ANR	1067166	Identifier	NULL		1067078	1					
ANR	1067167	ReturnStatement	"return wpe -> write ( buffer , len ) ;"	2226:1:63766:63796	1067078	14	True				
ANR	1067168	CallExpression	"wpe -> write ( buffer , len )"		1067078	0					
ANR	1067169	Callee	wpe -> write		1067078	0					
ANR	1067170	PtrMemberAccess	wpe -> write		1067078	0					
ANR	1067171	Identifier	wpe		1067078	0					
ANR	1067172	Identifier	write		1067078	1					
ANR	1067173	ArgumentList	buffer		1067078	1					
ANR	1067174	Argument	buffer		1067078	0					
ANR	1067175	Identifier	buffer		1067078	0					
ANR	1067176	Argument	len		1067078	1					
ANR	1067177	Identifier	len		1067078	0					
ANR	1067178	ReturnType	int		1067078	1					
ANR	1067179	Identifier	DaemonCore :: Write_Pipe		1067078	2					
ANR	1067180	ParameterList	"int pipe_end , const void * buffer , int len"		1067078	3					
ANR	1067181	Parameter	int pipe_end	2210:23:63295:63306	1067078	0	True				
ANR	1067182	ParameterType	int		1067078	0					
ANR	1067183	Identifier	pipe_end		1067078	1					
ANR	1067184	Parameter	const void * buffer	2210:37:63309:63326	1067078	1	True				
ANR	1067185	ParameterType	const void *		1067078	0					
ANR	1067186	Identifier	buffer		1067078	1					
ANR	1067187	Parameter	int len	2210:57:63329:63335	1067078	2	True				
ANR	1067188	ParameterType	int		1067078	0					
ANR	1067189	Identifier	len		1067078	1					
ANR	1067190	CFGEntryNode	ENTRY		1067078		True				
ANR	1067191	CFGExitNode	EXIT		1067078		True				
ANR	1067192	Symbol	PIPE_INDEX_OFFSET		1067078						
ANR	1067193	Symbol	NULL		1067078						
ANR	1067194	Symbol	pipe_end		1067078						
ANR	1067195	Symbol	* pipeHandleTable		1067078						
ANR	1067196	Symbol	D_ALWAYS		1067078						
ANR	1067197	Symbol	index		1067078						
ANR	1067198	Symbol	pipeHandleTableLookup		1067078						
ANR	1067199	Symbol	wpe		1067078						
ANR	1067200	Symbol	pipeHandleTable		1067078						
ANR	1067201	Symbol	len		1067078						
ANR	1067202	Symbol	* wpe		1067078						
ANR	1067203	Symbol	FALSE		1067078						
ANR	1067204	Symbol	wpe -> write		1067078						
ANR	1067205	Symbol	buffer		1067078						
ANR	1067206	Function	DaemonCore :: Get_Pipe_FD	2233:0:63889:64027							
ANR	1067207	FunctionDef	"DaemonCore :: Get_Pipe_FD (int pipe_end , int * fd)"		1067206	0					
ANR	1067208	CompoundStatement		2235:0:63940:64027	1067206	0					
ANR	1067209	IdentifierDeclStatement	int index = pipe_end - PIPE_INDEX_OFFSET ;	2236:1:63943:63983	1067206	0	True				
ANR	1067210	IdentifierDecl	index = pipe_end - PIPE_INDEX_OFFSET		1067206	0					
ANR	1067211	IdentifierDeclType	int		1067206	0					
ANR	1067212	Identifier	index		1067206	1					
ANR	1067213	AssignmentExpression	index = pipe_end - PIPE_INDEX_OFFSET		1067206	2		=			
ANR	1067214	Identifier	index		1067206	0					
ANR	1067215	AdditiveExpression	pipe_end - PIPE_INDEX_OFFSET		1067206	1		-			
ANR	1067216	Identifier	pipe_end		1067206	0					
ANR	1067217	Identifier	PIPE_INDEX_OFFSET		1067206	1					
ANR	1067218	ReturnStatement	"return pipeHandleTableLookup ( index , fd ) ;"	2237:1:63986:64025	1067206	1	True				
ANR	1067219	CallExpression	"pipeHandleTableLookup ( index , fd )"		1067206	0					
ANR	1067220	Callee	pipeHandleTableLookup		1067206	0					
ANR	1067221	Identifier	pipeHandleTableLookup		1067206	0					
ANR	1067222	ArgumentList	index		1067206	1					
ANR	1067223	Argument	index		1067206	0					
ANR	1067224	Identifier	index		1067206	0					
ANR	1067225	Argument	fd		1067206	1					
ANR	1067226	Identifier	fd		1067206	0					
ANR	1067227	ReturnType	int		1067206	1					
ANR	1067228	Identifier	DaemonCore :: Get_Pipe_FD		1067206	2					
ANR	1067229	ParameterList	"int pipe_end , int * fd"		1067206	3					
ANR	1067230	Parameter	int pipe_end	2234:24:63917:63928	1067206	0	True				
ANR	1067231	ParameterType	int		1067206	0					
ANR	1067232	Identifier	pipe_end		1067206	1					
ANR	1067233	Parameter	int * fd	2234:38:63931:63937	1067206	1	True				
ANR	1067234	ParameterType	int *		1067206	0					
ANR	1067235	Identifier	fd		1067206	1					
ANR	1067236	CFGEntryNode	ENTRY		1067206		True				
ANR	1067237	CFGExitNode	EXIT		1067206		True				
ANR	1067238	Symbol	PIPE_INDEX_OFFSET		1067206						
ANR	1067239	Symbol	pipe_end		1067206						
ANR	1067240	Symbol	index		1067206						
ANR	1067241	Symbol	pipeHandleTableLookup		1067206						
ANR	1067242	Symbol	fd		1067206						
ANR	1067243	Function	DaemonCore :: Close_FD	2241:0:64037:64237							
ANR	1067244	FunctionDef	DaemonCore :: Close_FD (int fd)		1067243	0					
ANR	1067245	CompoundStatement		2243:0:64070:64237	1067243	0					
ANR	1067246	IdentifierDeclStatement	int retval = - 1 ;	2244:1:64073:64088	1067243	0	True				
ANR	1067247	IdentifierDecl	retval = - 1		1067243	0					
ANR	1067248	IdentifierDeclType	int		1067243	0					
ANR	1067249	Identifier	retval		1067243	1					
ANR	1067250	AssignmentExpression	retval = - 1		1067243	2		=			
ANR	1067251	Identifier	retval		1067243	0					
ANR	1067252	UnaryOperationExpression	- 1		1067243	1					
ANR	1067253	UnaryOperator	-		1067243	0					
ANR	1067254	PrimaryExpression	1		1067243	1					
ANR	1067255	IfStatement	if ( fd >= PIPE_INDEX_OFFSET )		1067243	1					
ANR	1067256	Condition	fd >= PIPE_INDEX_OFFSET	2245:6:64098:64120	1067243	0	True				
ANR	1067257	RelationalExpression	fd >= PIPE_INDEX_OFFSET		1067243	0		>=			
ANR	1067258	Identifier	fd		1067243	0					
ANR	1067259	Identifier	PIPE_INDEX_OFFSET		1067243	1					
ANR	1067260	CompoundStatement		3:32:53:53	1067243	1					
ANR	1067261	ExpressionStatement	retval = ( daemonCore -> Close_Pipe ( fd ) ? 0 : - 1 )	2246:2:64130:64181	1067243	0	True				
ANR	1067262	AssignmentExpression	retval = ( daemonCore -> Close_Pipe ( fd ) ? 0 : - 1 )		1067243	0		=			
ANR	1067263	Identifier	retval		1067243	0					
ANR	1067264	ConditionalExpression	daemonCore -> Close_Pipe ( fd ) ? 0 : - 1		1067243	1					
ANR	1067265	Condition	daemonCore -> Close_Pipe ( fd )		1067243	0					
ANR	1067266	CallExpression	daemonCore -> Close_Pipe ( fd )		1067243	0					
ANR	1067267	Callee	daemonCore -> Close_Pipe		1067243	0					
ANR	1067268	PtrMemberAccess	daemonCore -> Close_Pipe		1067243	0					
ANR	1067269	Identifier	daemonCore		1067243	0					
ANR	1067270	Identifier	Close_Pipe		1067243	1					
ANR	1067271	ArgumentList	fd		1067243	1					
ANR	1067272	Argument	fd		1067243	0					
ANR	1067273	Identifier	fd		1067243	0					
ANR	1067274	PrimaryExpression	0		1067243	1					
ANR	1067275	UnaryOperationExpression	- 1		1067243	2					
ANR	1067276	UnaryOperator	-		1067243	0					
ANR	1067277	PrimaryExpression	1		1067243	1					
ANR	1067278	ElseStatement	else		1067243	0					
ANR	1067279	CompoundStatement		5:8:120:120	1067243	0					
ANR	1067280	ExpressionStatement	retval = close ( fd )	2248:2:64195:64216	1067243	0	True				
ANR	1067281	AssignmentExpression	retval = close ( fd )		1067243	0		=			
ANR	1067282	Identifier	retval		1067243	0					
ANR	1067283	CallExpression	close ( fd )		1067243	1					
ANR	1067284	Callee	close		1067243	0					
ANR	1067285	Identifier	close		1067243	0					
ANR	1067286	ArgumentList	fd		1067243	1					
ANR	1067287	Argument	fd		1067243	0					
ANR	1067288	Identifier	fd		1067243	0					
ANR	1067289	ReturnStatement	return retval ;	2250:1:64222:64235	1067243	2	True				
ANR	1067290	Identifier	retval		1067243	0					
ANR	1067291	ReturnType	int		1067243	1					
ANR	1067292	Identifier	DaemonCore :: Close_FD		1067243	2					
ANR	1067293	ParameterList	int fd		1067243	3					
ANR	1067294	Parameter	int fd	2242:21:64062:64067	1067243	0	True				
ANR	1067295	ParameterType	int		1067243	0					
ANR	1067296	Identifier	fd		1067243	1					
ANR	1067297	CFGEntryNode	ENTRY		1067243		True				
ANR	1067298	CFGExitNode	EXIT		1067243		True				
ANR	1067299	Symbol	PIPE_INDEX_OFFSET		1067243						
ANR	1067300	Symbol	daemonCore -> Close_Pipe		1067243						
ANR	1067301	Symbol	* daemonCore		1067243						
ANR	1067302	Symbol	daemonCore		1067243						
ANR	1067303	Symbol	close		1067243						
ANR	1067304	Symbol	fd		1067243						
ANR	1067305	Symbol	retval		1067243						
ANR	1067306	Function	DaemonCore :: Read_Std_Pipe	2253:0:64240:64794							
ANR	1067307	FunctionDef	"DaemonCore :: Read_Std_Pipe (int pid , int std_fd)"		1067306	0					
ANR	1067308	CompoundStatement		2254:47:64297:64794	1067306	0					
ANR	1067309	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	2255:1:64300:64324	1067306	0	True				
ANR	1067310	IdentifierDecl	* pidinfo = NULL		1067306	0					
ANR	1067311	IdentifierDeclType	PidEntry *		1067306	0					
ANR	1067312	Identifier	pidinfo		1067306	1					
ANR	1067313	AssignmentExpression	* pidinfo = NULL		1067306	2		=			
ANR	1067314	Identifier	NULL		1067306	0					
ANR	1067315	Identifier	NULL		1067306	1					
ANR	1067316	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		1067306	1					
ANR	1067317	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	2256:5:64331:64366	1067306	0	True				
ANR	1067318	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1067306	0		<			
ANR	1067319	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1067306	0					
ANR	1067320	Callee	pidTable -> lookup		1067306	0					
ANR	1067321	PtrMemberAccess	pidTable -> lookup		1067306	0					
ANR	1067322	Identifier	pidTable		1067306	0					
ANR	1067323	Identifier	lookup		1067306	1					
ANR	1067324	ArgumentList	pid		1067306	1					
ANR	1067325	Argument	pid		1067306	0					
ANR	1067326	Identifier	pid		1067306	0					
ANR	1067327	Argument	pidinfo		1067306	1					
ANR	1067328	Identifier	pidinfo		1067306	0					
ANR	1067329	PrimaryExpression	0		1067306	1					
ANR	1067330	CompoundStatement		3:43:71:71	1067306	1					
ANR	1067331	ReturnStatement	return NULL ;	2259:2:64463:64474	1067306	0	True				
ANR	1067332	Identifier	NULL		1067306	0					
ANR	1067333	ReturnStatement	return pidinfo -> pipe_buf [ std_fd ] ;	2266:1:64760:64792	1067306	2	True				
ANR	1067334	ArrayIndexing	pidinfo -> pipe_buf [ std_fd ]		1067306	0					
ANR	1067335	PtrMemberAccess	pidinfo -> pipe_buf		1067306	0					
ANR	1067336	Identifier	pidinfo		1067306	0					
ANR	1067337	Identifier	pipe_buf		1067306	1					
ANR	1067338	Identifier	std_fd		1067306	1					
ANR	1067339	ReturnType	MyString *		1067306	1					
ANR	1067340	Identifier	DaemonCore :: Read_Std_Pipe		1067306	2					
ANR	1067341	ParameterList	"int pid , int std_fd"		1067306	3					
ANR	1067342	Parameter	int pid	2254:26:64276:64282	1067306	0	True				
ANR	1067343	ParameterType	int		1067306	0					
ANR	1067344	Identifier	pid		1067306	1					
ANR	1067345	Parameter	int std_fd	2254:35:64285:64294	1067306	1	True				
ANR	1067346	ParameterType	int		1067306	0					
ANR	1067347	Identifier	std_fd		1067306	1					
ANR	1067348	CFGEntryNode	ENTRY		1067306		True				
ANR	1067349	CFGExitNode	EXIT		1067306		True				
ANR	1067350	Symbol	pidinfo		1067306						
ANR	1067351	Symbol	pidTable		1067306						
ANR	1067352	Symbol	* pidinfo -> pipe_buf		1067306						
ANR	1067353	Symbol	* * pidinfo		1067306						
ANR	1067354	Symbol	NULL		1067306						
ANR	1067355	Symbol	std_fd		1067306						
ANR	1067356	Symbol	pidTable -> lookup		1067306						
ANR	1067357	Symbol	* pidTable		1067306						
ANR	1067358	Symbol	* std_fd		1067306						
ANR	1067359	Symbol	pid		1067306						
ANR	1067360	Symbol	* pidinfo		1067306						
ANR	1067361	Symbol	pidinfo -> pipe_buf		1067306						
ANR	1067362	DeclStmt									
ANR	1067363	Decl							PidEntry	PidEntry *	pidinfo
ANR	1067364	Function	DaemonCore :: Close_Stdin_Pipe	2290:0:65453:65856							
ANR	1067365	FunctionDef	DaemonCore :: Close_Stdin_Pipe (int pid)		1067364	0					
ANR	1067366	CompoundStatement		2291:38:65496:65856	1067364	0					
ANR	1067367	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	2292:1:65499:65523	1067364	0	True				
ANR	1067368	IdentifierDecl	* pidinfo = NULL		1067364	0					
ANR	1067369	IdentifierDeclType	PidEntry *		1067364	0					
ANR	1067370	Identifier	pidinfo		1067364	1					
ANR	1067371	AssignmentExpression	* pidinfo = NULL		1067364	2		=			
ANR	1067372	Identifier	NULL		1067364	0					
ANR	1067373	Identifier	NULL		1067364	1					
ANR	1067374	IdentifierDeclStatement	int rval ;	2293:1:65526:65534	1067364	1	True				
ANR	1067375	IdentifierDecl	rval		1067364	0					
ANR	1067376	IdentifierDeclType	int		1067364	0					
ANR	1067377	Identifier	rval		1067364	1					
ANR	1067378	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) < 0 ) )"		1067364	2					
ANR	1067379	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	2295:5:65542:65577	1067364	0	True				
ANR	1067380	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1067364	0		<			
ANR	1067381	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1067364	0					
ANR	1067382	Callee	pidTable -> lookup		1067364	0					
ANR	1067383	PtrMemberAccess	pidTable -> lookup		1067364	0					
ANR	1067384	Identifier	pidTable		1067364	0					
ANR	1067385	Identifier	lookup		1067364	1					
ANR	1067386	ArgumentList	pid		1067364	1					
ANR	1067387	Argument	pid		1067364	0					
ANR	1067388	Identifier	pid		1067364	0					
ANR	1067389	Argument	pidinfo		1067364	1					
ANR	1067390	Identifier	pidinfo		1067364	0					
ANR	1067391	PrimaryExpression	0		1067364	1					
ANR	1067392	CompoundStatement		5:43:83:83	1067364	1					
ANR	1067393	ReturnStatement	return false ;	2297:2:65625:65637	1067364	0	True				
ANR	1067394	Identifier	false		1067364	0					
ANR	1067395	IfStatement	if ( pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE )		1067364	3					
ANR	1067396	Condition	pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE	2299:5:65647:65687	1067364	0	True				
ANR	1067397	EqualityExpression	pidinfo -> std_pipes [ 0 ] == DC_STD_FD_NOPIPE		1067364	0		==			
ANR	1067398	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		1067364	0					
ANR	1067399	PtrMemberAccess	pidinfo -> std_pipes		1067364	0					
ANR	1067400	Identifier	pidinfo		1067364	0					
ANR	1067401	Identifier	std_pipes		1067364	1					
ANR	1067402	PrimaryExpression	0		1067364	1					
ANR	1067403	Identifier	DC_STD_FD_NOPIPE		1067364	1					
ANR	1067404	CompoundStatement		9:48:193:193	1067364	1					
ANR	1067405	ReturnStatement	return false ;	2301:2:65715:65727	1067364	0	True				
ANR	1067406	Identifier	false		1067364	0					
ANR	1067407	ExpressionStatement	rval = Close_Pipe ( pidinfo -> std_pipes [ 0 ] )	2304:1:65734:65774	1067364	4	True				
ANR	1067408	AssignmentExpression	rval = Close_Pipe ( pidinfo -> std_pipes [ 0 ] )		1067364	0		=			
ANR	1067409	Identifier	rval		1067364	0					
ANR	1067410	CallExpression	Close_Pipe ( pidinfo -> std_pipes [ 0 ] )		1067364	1					
ANR	1067411	Callee	Close_Pipe		1067364	0					
ANR	1067412	Identifier	Close_Pipe		1067364	0					
ANR	1067413	ArgumentList	pidinfo -> std_pipes [ 0 ]		1067364	1					
ANR	1067414	Argument	pidinfo -> std_pipes [ 0 ]		1067364	0					
ANR	1067415	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		1067364	0					
ANR	1067416	PtrMemberAccess	pidinfo -> std_pipes		1067364	0					
ANR	1067417	Identifier	pidinfo		1067364	0					
ANR	1067418	Identifier	std_pipes		1067364	1					
ANR	1067419	PrimaryExpression	0		1067364	1					
ANR	1067420	IfStatement	if ( rval )		1067364	5					
ANR	1067421	Condition	rval	2305:5:65781:65784	1067364	0	True				
ANR	1067422	Identifier	rval		1067364	0					
ANR	1067423	CompoundStatement		15:11:290:290	1067364	1					
ANR	1067424	ExpressionStatement	pidinfo -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE	2306:2:65791:65831	1067364	0	True				
ANR	1067425	AssignmentExpression	pidinfo -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE		1067364	0		=			
ANR	1067426	ArrayIndexing	pidinfo -> std_pipes [ 0 ]		1067364	0					
ANR	1067427	PtrMemberAccess	pidinfo -> std_pipes		1067364	0					
ANR	1067428	Identifier	pidinfo		1067364	0					
ANR	1067429	Identifier	std_pipes		1067364	1					
ANR	1067430	PrimaryExpression	0		1067364	1					
ANR	1067431	Identifier	DC_STD_FD_NOPIPE		1067364	1					
ANR	1067432	ReturnStatement	return ( bool ) rval ;	2308:1:65837:65854	1067364	6	True				
ANR	1067433	CastExpression	( bool ) rval		1067364	0					
ANR	1067434	CastTarget	bool		1067364	0					
ANR	1067435	Identifier	rval		1067364	1					
ANR	1067436	ReturnType	bool		1067364	1					
ANR	1067437	Identifier	DaemonCore :: Close_Stdin_Pipe		1067364	2					
ANR	1067438	ParameterList	int pid		1067364	3					
ANR	1067439	Parameter	int pid	2291:29:65487:65493	1067364	0	True				
ANR	1067440	ParameterType	int		1067364	0					
ANR	1067441	Identifier	pid		1067364	1					
ANR	1067442	CFGEntryNode	ENTRY		1067364		True				
ANR	1067443	CFGExitNode	EXIT		1067364		True				
ANR	1067444	Symbol	pidinfo		1067364						
ANR	1067445	Symbol	pidTable		1067364						
ANR	1067446	Symbol	* * pidinfo		1067364						
ANR	1067447	Symbol	NULL		1067364						
ANR	1067448	Symbol	* pidTable		1067364						
ANR	1067449	Symbol	false		1067364						
ANR	1067450	Symbol	pid		1067364						
ANR	1067451	Symbol	* pidinfo -> std_pipes		1067364						
ANR	1067452	Symbol	pidTable -> lookup		1067364						
ANR	1067453	Symbol	Close_Pipe		1067364						
ANR	1067454	Symbol	pidinfo -> std_pipes		1067364						
ANR	1067455	Symbol	rval		1067364						
ANR	1067456	Symbol	* pidinfo		1067364						
ANR	1067457	Symbol	DC_STD_FD_NOPIPE		1067364						
ANR	1067458	Function	DaemonCore :: Register_Reaper	2312:0:65860:68548							
ANR	1067459	FunctionDef	"DaemonCore :: Register_Reaper (int rid , const char * reap_descrip , ReaperHandler handler , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp)"		1067458	0					
ANR	1067460	CompoundStatement		2315:0:66040:68548	1067458	0					
ANR	1067461	IdentifierDeclStatement	int i ;	2316:4:66046:66055	1067458	0	True				
ANR	1067462	IdentifierDecl	i		1067458	0					
ANR	1067463	IdentifierDeclType	int		1067458	0					
ANR	1067464	Identifier	i		1067458	1					
ANR	1067465	IdentifierDeclStatement	int j ;	2317:4:66061:66070	1067458	1	True				
ANR	1067466	IdentifierDecl	j		1067458	0					
ANR	1067467	IdentifierDeclType	int		1067458	0					
ANR	1067468	Identifier	j		1067458	1					
ANR	1067469	IfStatement	if ( rid == - 1 )		1067458	2					
ANR	1067470	Condition	rid == - 1	2332:6:66708:66716	1067458	0	True				
ANR	1067471	EqualityExpression	rid == - 1		1067458	0		==			
ANR	1067472	Identifier	rid		1067458	0					
ANR	1067473	UnaryOperationExpression	- 1		1067458	1					
ANR	1067474	UnaryOperator	-		1067458	0					
ANR	1067475	PrimaryExpression	1		1067458	1					
ANR	1067476	CompoundStatement		18:18:679:679	1067458	1					
ANR	1067477	IfStatement	if ( nReap >= maxReap )		1067458	0					
ANR	1067478	Condition	nReap >= maxReap	2334:5:66763:66778	1067458	0	True				
ANR	1067479	RelationalExpression	nReap >= maxReap		1067458	0		>=			
ANR	1067480	Identifier	nReap		1067458	0					
ANR	1067481	Identifier	maxReap		1067458	1					
ANR	1067482	CompoundStatement		20:23:740:740	1067458	1					
ANR	1067483	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"	2335:3:66786:66915	1067458	0	True				
ANR	1067484	CallExpression	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"		1067458	0					
ANR	1067485	Callee	dprintf		1067458	0					
ANR	1067486	Identifier	dprintf		1067458	0					
ANR	1067487	ArgumentList	D_ALWAYS		1067458	1					
ANR	1067488	Argument	D_ALWAYS		1067458	0					
ANR	1067489	Identifier	D_ALWAYS		1067458	0					
ANR	1067490	Argument	"""Unable to register reaper with description: %s\\n"""		1067458	1					
ANR	1067491	PrimaryExpression	"""Unable to register reaper with description: %s\\n"""		1067458	0					
ANR	1067492	Argument	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		1067458	2					
ANR	1067493	ConditionalExpression	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		1067458	0					
ANR	1067494	Condition	reap_descrip == NULL		1067458	0					
ANR	1067495	EqualityExpression	reap_descrip == NULL		1067458	0		==			
ANR	1067496	Identifier	reap_descrip		1067458	0					
ANR	1067497	Identifier	NULL		1067458	1					
ANR	1067498	PrimaryExpression	"""[Not specified]"""		1067458	1					
ANR	1067499	Identifier	reap_descrip		1067458	2					
ANR	1067500	ExpressionStatement	"EXCEPT ( ""# of reaper handlers exceeded specified maximum"" )"	2338:3:66920:66977	1067458	1	True				
ANR	1067501	CallExpression	"EXCEPT ( ""# of reaper handlers exceeded specified maximum"" )"		1067458	0					
ANR	1067502	Callee	EXCEPT		1067458	0					
ANR	1067503	Identifier	EXCEPT		1067458	0					
ANR	1067504	ArgumentList	"""# of reaper handlers exceeded specified maximum"""		1067458	1					
ANR	1067505	Argument	"""# of reaper handlers exceeded specified maximum"""		1067458	0					
ANR	1067506	PrimaryExpression	"""# of reaper handlers exceeded specified maximum"""		1067458	0					
ANR	1067507	ForStatement	"for ( i = nReap % maxReap , j = 0 ; j < maxReap ; j ++ , i = ( i + 1 ) % maxReap )"		1067458	1					
ANR	1067508	ForInit	"i = nReap % maxReap , j = 0 ;"	2342:6:67101:67125	1067458	0	True				
ANR	1067509	Expression	"i = nReap % maxReap , j = 0"		1067458	0					
ANR	1067510	AssignmentExpression	i = nReap % maxReap		1067458	0		=			
ANR	1067511	Identifier	i		1067458	0					
ANR	1067512	MultiplicativeExpression	nReap % maxReap		1067458	1		%			
ANR	1067513	Identifier	nReap		1067458	0					
ANR	1067514	Identifier	maxReap		1067458	1					
ANR	1067515	AssignmentExpression	j = 0		1067458	1		=			
ANR	1067516	Identifier	j		1067458	0					
ANR	1067517	PrimaryExpression	0		1067458	1					
ANR	1067518	Condition	j < maxReap	2342:32:67127:67137	1067458	1	True				
ANR	1067519	RelationalExpression	j < maxReap		1067458	0		<			
ANR	1067520	Identifier	j		1067458	0					
ANR	1067521	Identifier	maxReap		1067458	1					
ANR	1067522	Expression	"j ++ , i = ( i + 1 ) % maxReap"	2342:45:67140:67165	1067458	2	True				
ANR	1067523	PostIncDecOperationExpression	j ++		1067458	0					
ANR	1067524	Identifier	j		1067458	0					
ANR	1067525	IncDec	++		1067458	1					
ANR	1067526	AssignmentExpression	i = ( i + 1 ) % maxReap		1067458	1		=			
ANR	1067527	Identifier	i		1067458	0					
ANR	1067528	MultiplicativeExpression	( i + 1 ) % maxReap		1067458	1		%			
ANR	1067529	AdditiveExpression	i + 1		1067458	0		+			
ANR	1067530	Identifier	i		1067458	0					
ANR	1067531	PrimaryExpression	1		1067458	1					
ANR	1067532	Identifier	maxReap		1067458	1					
ANR	1067533	CompoundStatement		29:2:1129:1129	1067458	3					
ANR	1067534	IfStatement	if ( reapTable [ i ] . num == 0 )		1067458	0					
ANR	1067535	Condition	reapTable [ i ] . num == 0	2344:8:67180:67200	1067458	0	True				
ANR	1067536	EqualityExpression	reapTable [ i ] . num == 0		1067458	0		==			
ANR	1067537	MemberAccess	reapTable [ i ] . num		1067458	0					
ANR	1067538	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067539	Identifier	reapTable		1067458	0					
ANR	1067540	Identifier	i		1067458	1					
ANR	1067541	Identifier	num		1067458	1					
ANR	1067542	PrimaryExpression	0		1067458	1					
ANR	1067543	CompoundStatement		30:32:1163:1163	1067458	1					
ANR	1067544	BreakStatement	break ;	2345:4:67210:67215	1067458	0	True				
ANR	1067545	ElseStatement	else		1067458	0					
ANR	1067546	CompoundStatement		32:10:1186:1186	1067458	0					
ANR	1067547	IfStatement	if ( reapTable [ i ] . num != i + 1 )		1067458	0					
ANR	1067548	Condition	reapTable [ i ] . num != i + 1	2347:9:67238:67262	1067458	0	True				
ANR	1067549	EqualityExpression	reapTable [ i ] . num != i + 1		1067458	0		!=			
ANR	1067550	MemberAccess	reapTable [ i ] . num		1067458	0					
ANR	1067551	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067552	Identifier	reapTable		1067458	0					
ANR	1067553	Identifier	i		1067458	1					
ANR	1067554	Identifier	num		1067458	1					
ANR	1067555	AdditiveExpression	i + 1		1067458	1		+			
ANR	1067556	Identifier	i		1067458	0					
ANR	1067557	PrimaryExpression	1		1067458	1					
ANR	1067558	CompoundStatement		33:37:1225:1225	1067458	1					
ANR	1067559	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"	2348:5:67273:67406	1067458	0	True				
ANR	1067560	CallExpression	"dprintf ( D_ALWAYS , ""Unable to register reaper with description: %s\\n"" , reap_descrip == NULL ? ""[Not specified]"" : reap_descrip )"		1067458	0					
ANR	1067561	Callee	dprintf		1067458	0					
ANR	1067562	Identifier	dprintf		1067458	0					
ANR	1067563	ArgumentList	D_ALWAYS		1067458	1					
ANR	1067564	Argument	D_ALWAYS		1067458	0					
ANR	1067565	Identifier	D_ALWAYS		1067458	0					
ANR	1067566	Argument	"""Unable to register reaper with description: %s\\n"""		1067458	1					
ANR	1067567	PrimaryExpression	"""Unable to register reaper with description: %s\\n"""		1067458	0					
ANR	1067568	Argument	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		1067458	2					
ANR	1067569	ConditionalExpression	"reap_descrip == NULL ? ""[Not specified]"" : reap_descrip"		1067458	0					
ANR	1067570	Condition	reap_descrip == NULL		1067458	0					
ANR	1067571	EqualityExpression	reap_descrip == NULL		1067458	0		==			
ANR	1067572	Identifier	reap_descrip		1067458	0					
ANR	1067573	Identifier	NULL		1067458	1					
ANR	1067574	PrimaryExpression	"""[Not specified]"""		1067458	1					
ANR	1067575	Identifier	reap_descrip		1067458	2					
ANR	1067576	ExpressionStatement	"EXCEPT ( ""reaper table messed up"" )"	2351:5:67413:67445	1067458	1	True				
ANR	1067577	CallExpression	"EXCEPT ( ""reaper table messed up"" )"		1067458	0					
ANR	1067578	Callee	EXCEPT		1067458	0					
ANR	1067579	Identifier	EXCEPT		1067458	0					
ANR	1067580	ArgumentList	"""reaper table messed up"""		1067458	1					
ANR	1067581	Argument	"""reaper table messed up"""		1067458	0					
ANR	1067582	PrimaryExpression	"""reaper table messed up"""		1067458	0					
ANR	1067583	ExpressionStatement	nReap ++	2355:2:67464:67471	1067458	2	True				
ANR	1067584	PostIncDecOperationExpression	nReap ++		1067458	0					
ANR	1067585	Identifier	nReap		1067458	0					
ANR	1067586	IncDec	++		1067458	1					
ANR	1067587	ExpressionStatement	rid = i + 1	2356:2:67524:67535	1067458	3	True				
ANR	1067588	AssignmentExpression	rid = i + 1		1067458	0		=			
ANR	1067589	Identifier	rid		1067458	0					
ANR	1067590	AdditiveExpression	i + 1		1067458	1		+			
ANR	1067591	Identifier	i		1067458	0					
ANR	1067592	PrimaryExpression	1		1067458	1					
ANR	1067593	ElseStatement	else		1067458	0					
ANR	1067594	CompoundStatement		43:8:1504:1504	1067458	0					
ANR	1067595	IfStatement	if ( ( rid < 1 ) || ( rid > maxReap ) )		1067458	0					
ANR	1067596	Condition	( rid < 1 ) || ( rid > maxReap )	2358:7:67554:67581	1067458	0	True				
ANR	1067597	OrExpression	( rid < 1 ) || ( rid > maxReap )		1067458	0		||			
ANR	1067598	RelationalExpression	rid < 1		1067458	0		<			
ANR	1067599	Identifier	rid		1067458	0					
ANR	1067600	PrimaryExpression	1		1067458	1					
ANR	1067601	RelationalExpression	rid > maxReap		1067458	1		>			
ANR	1067602	Identifier	rid		1067458	0					
ANR	1067603	Identifier	maxReap		1067458	1					
ANR	1067604	ReturnStatement	return FALSE ;	2359:3:67588:67600	1067458	1	True				
ANR	1067605	Identifier	FALSE		1067458	0					
ANR	1067606	IfStatement	if ( ( reapTable [ rid - 1 ] . num ) != rid )		1067458	1					
ANR	1067607	Condition	( reapTable [ rid - 1 ] . num ) != rid	2360:7:67637:67667	1067458	0	True				
ANR	1067608	EqualityExpression	( reapTable [ rid - 1 ] . num ) != rid		1067458	0		!=			
ANR	1067609	MemberAccess	reapTable [ rid - 1 ] . num		1067458	0					
ANR	1067610	ArrayIndexing	reapTable [ rid - 1 ]		1067458	0					
ANR	1067611	Identifier	reapTable		1067458	0					
ANR	1067612	AdditiveExpression	rid - 1		1067458	1		-			
ANR	1067613	Identifier	rid		1067458	0					
ANR	1067614	PrimaryExpression	1		1067458	1					
ANR	1067615	Identifier	num		1067458	1					
ANR	1067616	Identifier	rid		1067458	1					
ANR	1067617	ReturnStatement	return FALSE ;	2361:3:67674:67686	1067458	1	True				
ANR	1067618	Identifier	FALSE		1067458	0					
ANR	1067619	ExpressionStatement	i = rid - 1	2362:2:67736:67747	1067458	2	True				
ANR	1067620	AssignmentExpression	i = rid - 1		1067458	0		=			
ANR	1067621	Identifier	i		1067458	0					
ANR	1067622	AdditiveExpression	rid - 1		1067458	1		-			
ANR	1067623	Identifier	rid		1067458	0					
ANR	1067624	PrimaryExpression	1		1067458	1					
ANR	1067625	ExpressionStatement	reapTable [ i ] . num = rid	2366:1:67818:67840	1067458	3	True				
ANR	1067626	AssignmentExpression	reapTable [ i ] . num = rid		1067458	0		=			
ANR	1067627	MemberAccess	reapTable [ i ] . num		1067458	0					
ANR	1067628	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067629	Identifier	reapTable		1067458	0					
ANR	1067630	Identifier	i		1067458	1					
ANR	1067631	Identifier	num		1067458	1					
ANR	1067632	Identifier	rid		1067458	1					
ANR	1067633	ExpressionStatement	reapTable [ i ] . handler = handler	2367:1:67843:67873	1067458	4	True				
ANR	1067634	AssignmentExpression	reapTable [ i ] . handler = handler		1067458	0		=			
ANR	1067635	MemberAccess	reapTable [ i ] . handler		1067458	0					
ANR	1067636	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067637	Identifier	reapTable		1067458	0					
ANR	1067638	Identifier	i		1067458	1					
ANR	1067639	Identifier	handler		1067458	1					
ANR	1067640	Identifier	handler		1067458	1					
ANR	1067641	ExpressionStatement	reapTable [ i ] . handlercpp = handlercpp	2368:1:67876:67912	1067458	5	True				
ANR	1067642	AssignmentExpression	reapTable [ i ] . handlercpp = handlercpp		1067458	0		=			
ANR	1067643	MemberAccess	reapTable [ i ] . handlercpp		1067458	0					
ANR	1067644	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067645	Identifier	reapTable		1067458	0					
ANR	1067646	Identifier	i		1067458	1					
ANR	1067647	Identifier	handlercpp		1067458	1					
ANR	1067648	Identifier	handlercpp		1067458	1					
ANR	1067649	ExpressionStatement	reapTable [ i ] . is_cpp = is_cpp	2369:1:67915:67943	1067458	6	True				
ANR	1067650	AssignmentExpression	reapTable [ i ] . is_cpp = is_cpp		1067458	0		=			
ANR	1067651	MemberAccess	reapTable [ i ] . is_cpp		1067458	0					
ANR	1067652	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067653	Identifier	reapTable		1067458	0					
ANR	1067654	Identifier	i		1067458	1					
ANR	1067655	Identifier	is_cpp		1067458	1					
ANR	1067656	Identifier	is_cpp		1067458	1					
ANR	1067657	ExpressionStatement	reapTable [ i ] . service = s	2370:1:67946:67970	1067458	7	True				
ANR	1067658	AssignmentExpression	reapTable [ i ] . service = s		1067458	0		=			
ANR	1067659	MemberAccess	reapTable [ i ] . service		1067458	0					
ANR	1067660	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067661	Identifier	reapTable		1067458	0					
ANR	1067662	Identifier	i		1067458	1					
ANR	1067663	Identifier	service		1067458	1					
ANR	1067664	Identifier	s		1067458	1					
ANR	1067665	ExpressionStatement	reapTable [ i ] . data_ptr = NULL	2371:1:67973:68001	1067458	8	True				
ANR	1067666	AssignmentExpression	reapTable [ i ] . data_ptr = NULL		1067458	0		=			
ANR	1067667	MemberAccess	reapTable [ i ] . data_ptr		1067458	0					
ANR	1067668	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067669	Identifier	reapTable		1067458	0					
ANR	1067670	Identifier	i		1067458	1					
ANR	1067671	Identifier	data_ptr		1067458	1					
ANR	1067672	Identifier	NULL		1067458	1					
ANR	1067673	ExpressionStatement	free ( reapTable [ i ] . reap_descrip )	2372:1:68004:68035	1067458	9	True				
ANR	1067674	CallExpression	free ( reapTable [ i ] . reap_descrip )		1067458	0					
ANR	1067675	Callee	free		1067458	0					
ANR	1067676	Identifier	free		1067458	0					
ANR	1067677	ArgumentList	reapTable [ i ] . reap_descrip		1067458	1					
ANR	1067678	Argument	reapTable [ i ] . reap_descrip		1067458	0					
ANR	1067679	MemberAccess	reapTable [ i ] . reap_descrip		1067458	0					
ANR	1067680	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067681	Identifier	reapTable		1067458	0					
ANR	1067682	Identifier	i		1067458	1					
ANR	1067683	Identifier	reap_descrip		1067458	1					
ANR	1067684	IfStatement	if ( reap_descrip )		1067458	10					
ANR	1067685	Condition	reap_descrip	2373:6:68043:68054	1067458	0	True				
ANR	1067686	Identifier	reap_descrip		1067458	0					
ANR	1067687	ExpressionStatement	reapTable [ i ] . reap_descrip = strdup ( reap_descrip )	2374:2:68060:68108	1067458	1	True				
ANR	1067688	AssignmentExpression	reapTable [ i ] . reap_descrip = strdup ( reap_descrip )		1067458	0		=			
ANR	1067689	MemberAccess	reapTable [ i ] . reap_descrip		1067458	0					
ANR	1067690	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067691	Identifier	reapTable		1067458	0					
ANR	1067692	Identifier	i		1067458	1					
ANR	1067693	Identifier	reap_descrip		1067458	1					
ANR	1067694	CallExpression	strdup ( reap_descrip )		1067458	1					
ANR	1067695	Callee	strdup		1067458	0					
ANR	1067696	Identifier	strdup		1067458	0					
ANR	1067697	ArgumentList	reap_descrip		1067458	1					
ANR	1067698	Argument	reap_descrip		1067458	0					
ANR	1067699	Identifier	reap_descrip		1067458	0					
ANR	1067700	ElseStatement	else		1067458	0					
ANR	1067701	ExpressionStatement	reapTable [ i ] . reap_descrip = strdup ( EMPTY_DESCRIP )	2376:2:68118:68167	1067458	0	True				
ANR	1067702	AssignmentExpression	reapTable [ i ] . reap_descrip = strdup ( EMPTY_DESCRIP )		1067458	0		=			
ANR	1067703	MemberAccess	reapTable [ i ] . reap_descrip		1067458	0					
ANR	1067704	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067705	Identifier	reapTable		1067458	0					
ANR	1067706	Identifier	i		1067458	1					
ANR	1067707	Identifier	reap_descrip		1067458	1					
ANR	1067708	CallExpression	strdup ( EMPTY_DESCRIP )		1067458	1					
ANR	1067709	Callee	strdup		1067458	0					
ANR	1067710	Identifier	strdup		1067458	0					
ANR	1067711	ArgumentList	EMPTY_DESCRIP		1067458	1					
ANR	1067712	Argument	EMPTY_DESCRIP		1067458	0					
ANR	1067713	Identifier	EMPTY_DESCRIP		1067458	0					
ANR	1067714	ExpressionStatement	free ( reapTable [ i ] . handler_descrip )	2377:1:68170:68204	1067458	11	True				
ANR	1067715	CallExpression	free ( reapTable [ i ] . handler_descrip )		1067458	0					
ANR	1067716	Callee	free		1067458	0					
ANR	1067717	Identifier	free		1067458	0					
ANR	1067718	ArgumentList	reapTable [ i ] . handler_descrip		1067458	1					
ANR	1067719	Argument	reapTable [ i ] . handler_descrip		1067458	0					
ANR	1067720	MemberAccess	reapTable [ i ] . handler_descrip		1067458	0					
ANR	1067721	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067722	Identifier	reapTable		1067458	0					
ANR	1067723	Identifier	i		1067458	1					
ANR	1067724	Identifier	handler_descrip		1067458	1					
ANR	1067725	IfStatement	if ( handler_descrip )		1067458	12					
ANR	1067726	Condition	handler_descrip	2378:6:68212:68226	1067458	0	True				
ANR	1067727	Identifier	handler_descrip		1067458	0					
ANR	1067728	ExpressionStatement	reapTable [ i ] . handler_descrip = strdup ( handler_descrip )	2379:2:68232:68286	1067458	1	True				
ANR	1067729	AssignmentExpression	reapTable [ i ] . handler_descrip = strdup ( handler_descrip )		1067458	0		=			
ANR	1067730	MemberAccess	reapTable [ i ] . handler_descrip		1067458	0					
ANR	1067731	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067732	Identifier	reapTable		1067458	0					
ANR	1067733	Identifier	i		1067458	1					
ANR	1067734	Identifier	handler_descrip		1067458	1					
ANR	1067735	CallExpression	strdup ( handler_descrip )		1067458	1					
ANR	1067736	Callee	strdup		1067458	0					
ANR	1067737	Identifier	strdup		1067458	0					
ANR	1067738	ArgumentList	handler_descrip		1067458	1					
ANR	1067739	Argument	handler_descrip		1067458	0					
ANR	1067740	Identifier	handler_descrip		1067458	0					
ANR	1067741	ElseStatement	else		1067458	0					
ANR	1067742	ExpressionStatement	reapTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )	2381:2:68296:68348	1067458	0	True				
ANR	1067743	AssignmentExpression	reapTable [ i ] . handler_descrip = strdup ( EMPTY_DESCRIP )		1067458	0		=			
ANR	1067744	MemberAccess	reapTable [ i ] . handler_descrip		1067458	0					
ANR	1067745	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067746	Identifier	reapTable		1067458	0					
ANR	1067747	Identifier	i		1067458	1					
ANR	1067748	Identifier	handler_descrip		1067458	1					
ANR	1067749	CallExpression	strdup ( EMPTY_DESCRIP )		1067458	1					
ANR	1067750	Callee	strdup		1067458	0					
ANR	1067751	Identifier	strdup		1067458	0					
ANR	1067752	ArgumentList	EMPTY_DESCRIP		1067458	1					
ANR	1067753	Argument	EMPTY_DESCRIP		1067458	0					
ANR	1067754	Identifier	EMPTY_DESCRIP		1067458	0					
ANR	1067755	ExpressionStatement	curr_regdataptr = & ( reapTable [ i ] . data_ptr )	2384:1:68396:68438	1067458	13	True				
ANR	1067756	AssignmentExpression	curr_regdataptr = & ( reapTable [ i ] . data_ptr )		1067458	0		=			
ANR	1067757	Identifier	curr_regdataptr		1067458	0					
ANR	1067758	UnaryOperationExpression	& ( reapTable [ i ] . data_ptr )		1067458	1					
ANR	1067759	UnaryOperator	&		1067458	0					
ANR	1067760	MemberAccess	reapTable [ i ] . data_ptr		1067458	1					
ANR	1067761	ArrayIndexing	reapTable [ i ]		1067458	0					
ANR	1067762	Identifier	reapTable		1067458	0					
ANR	1067763	Identifier	i		1067458	1					
ANR	1067764	Identifier	data_ptr		1067458	1					
ANR	1067765	ExpressionStatement	DumpReapTable ( D_FULLDEBUG | D_DAEMONCORE )	2387:1:68491:68532	1067458	14	True				
ANR	1067766	CallExpression	DumpReapTable ( D_FULLDEBUG | D_DAEMONCORE )		1067458	0					
ANR	1067767	Callee	DumpReapTable		1067458	0					
ANR	1067768	Identifier	DumpReapTable		1067458	0					
ANR	1067769	ArgumentList	D_FULLDEBUG | D_DAEMONCORE		1067458	1					
ANR	1067770	Argument	D_FULLDEBUG | D_DAEMONCORE		1067458	0					
ANR	1067771	InclusiveOrExpression	D_FULLDEBUG | D_DAEMONCORE		1067458	0		|			
ANR	1067772	Identifier	D_FULLDEBUG		1067458	0					
ANR	1067773	Identifier	D_DAEMONCORE		1067458	1					
ANR	1067774	ReturnStatement	return rid ;	2389:1:68536:68546	1067458	15	True				
ANR	1067775	Identifier	rid		1067458	0					
ANR	1067776	ReturnType	int		1067458	1					
ANR	1067777	Identifier	DaemonCore :: Register_Reaper		1067458	2					
ANR	1067778	ParameterList	"int rid , const char * reap_descrip , ReaperHandler handler , ReaperHandlercpp handlercpp , const char * handler_descrip , Service * s , int is_cpp"		1067458	3					
ANR	1067779	Parameter	int rid	2312:32:65892:65898	1067458	0	True				
ANR	1067780	ParameterType	int		1067458	0					
ANR	1067781	Identifier	rid		1067458	1					
ANR	1067782	Parameter	const char * reap_descrip	2312:41:65901:65924	1067458	1	True				
ANR	1067783	ParameterType	const char *		1067458	0					
ANR	1067784	Identifier	reap_descrip		1067458	1					
ANR	1067785	Parameter	ReaperHandler handler	2313:4:65931:65951	1067458	2	True				
ANR	1067786	ParameterType	ReaperHandler		1067458	0					
ANR	1067787	Identifier	handler		1067458	1					
ANR	1067788	Parameter	ReaperHandlercpp handlercpp	2313:27:65954:65980	1067458	3	True				
ANR	1067789	ParameterType	ReaperHandlercpp		1067458	0					
ANR	1067790	Identifier	handlercpp		1067458	1					
ANR	1067791	Parameter	const char * handler_descrip	2314:4:65987:66013	1067458	4	True				
ANR	1067792	ParameterType	const char *		1067458	0					
ANR	1067793	Identifier	handler_descrip		1067458	1					
ANR	1067794	Parameter	Service * s	2314:33:66016:66025	1067458	5	True				
ANR	1067795	ParameterType	Service *		1067458	0					
ANR	1067796	Identifier	s		1067458	1					
ANR	1067797	Parameter	int is_cpp	2314:45:66028:66037	1067458	6	True				
ANR	1067798	ParameterType	int		1067458	0					
ANR	1067799	Identifier	is_cpp		1067458	1					
ANR	1067800	CFGEntryNode	ENTRY		1067458		True				
ANR	1067801	CFGExitNode	EXIT		1067458		True				
ANR	1067802	Symbol	curr_regdataptr		1067458						
ANR	1067803	Symbol	handler		1067458						
ANR	1067804	Symbol	reapTable [ i ] . data_ptr		1067458						
ANR	1067805	Symbol	nReap		1067458						
ANR	1067806	Symbol	rid		1067458						
ANR	1067807	Symbol	handler_descrip		1067458						
ANR	1067808	Symbol	reapTable [ i ] . num		1067458						
ANR	1067809	Symbol	reapTable [ i ] . handler		1067458						
ANR	1067810	Symbol	handlercpp		1067458						
ANR	1067811	Symbol	& reapTable [ i ] . data_ptr		1067458						
ANR	1067812	Symbol	is_cpp		1067458						
ANR	1067813	Symbol	reapTable [ i ] . is_cpp		1067458						
ANR	1067814	Symbol	NULL		1067458						
ANR	1067815	Symbol	D_DAEMONCORE		1067458						
ANR	1067816	Symbol	reapTable [ i ] . service		1067458						
ANR	1067817	Symbol	D_ALWAYS		1067458						
ANR	1067818	Symbol	reapTable [ i ] . reap_descrip		1067458						
ANR	1067819	Symbol	i		1067458						
ANR	1067820	Symbol	maxReap		1067458						
ANR	1067821	Symbol	j		1067458						
ANR	1067822	Symbol	D_FULLDEBUG		1067458						
ANR	1067823	Symbol	reapTable [ rid - 1 ] . num		1067458						
ANR	1067824	Symbol	s		1067458						
ANR	1067825	Symbol	* i		1067458						
ANR	1067826	Symbol	reapTable		1067458						
ANR	1067827	Symbol	EMPTY_DESCRIP		1067458						
ANR	1067828	Symbol	reapTable [ i ] . handler_descrip		1067458						
ANR	1067829	Symbol	* rid		1067458						
ANR	1067830	Symbol	reapTable [ i ] . handlercpp		1067458						
ANR	1067831	Symbol	* reapTable		1067458						
ANR	1067832	Symbol	FALSE		1067458						
ANR	1067833	Symbol	strdup		1067458						
ANR	1067834	Symbol	reap_descrip		1067458						
ANR	1067835	Function	DaemonCore :: Lookup_Socket	2393:0:68552:68709							
ANR	1067836	FunctionDef	DaemonCore :: Lookup_Socket (Stream * insock)		1067835	0					
ANR	1067837	CompoundStatement		2394:0:68600:68709	1067835	0					
ANR	1067838	ForStatement	for ( int i = 0 ; i < nSock ; i ++ )		1067835	0					
ANR	1067839	ForInit	int i = 0 ;	2395:6:68608:68615	1067835	0	True				
ANR	1067840	IdentifierDeclStatement	int i = 0 ;		1067835	0					
ANR	1067841	IdentifierDecl	i = 0		1067835	0					
ANR	1067842	IdentifierDeclType	int		1067835	0					
ANR	1067843	Identifier	i		1067835	1					
ANR	1067844	AssignmentExpression	i = 0		1067835	2		=			
ANR	1067845	Identifier	i		1067835	0					
ANR	1067846	PrimaryExpression	0		1067835	1					
ANR	1067847	Condition	i < nSock	2395:15:68617:68625	1067835	1	True				
ANR	1067848	RelationalExpression	i < nSock		1067835	0		<			
ANR	1067849	Identifier	i		1067835	0					
ANR	1067850	Identifier	nSock		1067835	1					
ANR	1067851	PostIncDecOperationExpression	i ++	2395:26:68628:68630	1067835	2	True				
ANR	1067852	Identifier	i		1067835	0					
ANR	1067853	IncDec	++		1067835	1					
ANR	1067854	CompoundStatement		2:31:32:32	1067835	3					
ANR	1067855	IfStatement	if ( ( * sockTable ) [ i ] . iosock == insock )		1067835	0					
ANR	1067856	Condition	( * sockTable ) [ i ] . iosock == insock	2396:6:68641:68672	1067835	0	True				
ANR	1067857	EqualityExpression	( * sockTable ) [ i ] . iosock == insock		1067835	0		==			
ANR	1067858	MemberAccess	( * sockTable ) [ i ] . iosock		1067835	0					
ANR	1067859	ArrayIndexing	( * sockTable ) [ i ]		1067835	0					
ANR	1067860	UnaryOperationExpression	* sockTable		1067835	0					
ANR	1067861	UnaryOperator	*		1067835	0					
ANR	1067862	Identifier	sockTable		1067835	1					
ANR	1067863	Identifier	i		1067835	1					
ANR	1067864	Identifier	iosock		1067835	1					
ANR	1067865	Identifier	insock		1067835	1					
ANR	1067866	CompoundStatement		3:40:74:74	1067835	1					
ANR	1067867	ReturnStatement	return i ;	2397:3:68680:68688	1067835	0	True				
ANR	1067868	Identifier	i		1067835	0					
ANR	1067869	ReturnStatement	return - 1 ;	2400:1:68698:68707	1067835	1	True				
ANR	1067870	UnaryOperationExpression	- 1		1067835	0					
ANR	1067871	UnaryOperator	-		1067835	0					
ANR	1067872	PrimaryExpression	1		1067835	1					
ANR	1067873	ReturnType	int		1067835	1					
ANR	1067874	Identifier	DaemonCore :: Lookup_Socket		1067835	2					
ANR	1067875	ParameterList	Stream * insock		1067835	3					
ANR	1067876	Parameter	Stream * insock	2393:31:68583:68596	1067835	0	True				
ANR	1067877	ParameterType	Stream *		1067835	0					
ANR	1067878	Identifier	insock		1067835	1					
ANR	1067879	CFGEntryNode	ENTRY		1067835		True				
ANR	1067880	CFGExitNode	EXIT		1067835		True				
ANR	1067881	Symbol	* i		1067835						
ANR	1067882	Symbol	* sockTable		1067835						
ANR	1067883	Symbol	nSock		1067835						
ANR	1067884	Symbol	sockTable		1067835						
ANR	1067885	Symbol	( * sockTable ) [ i ] . iosock		1067835						
ANR	1067886	Symbol	insock		1067835						
ANR	1067887	Symbol	i		1067835						
ANR	1067888	Symbol	* * sockTable		1067835						
ANR	1067889	Function	DaemonCore :: Dump	2413:0:68867:69047							
ANR	1067890	FunctionDef	"DaemonCore :: Dump (int flag , const char * indent)"		1067889	0					
ANR	1067891	CompoundStatement		2414:0:68919:69047	1067889	0					
ANR	1067892	ExpressionStatement	"DumpCommandTable ( flag , indent )"	2415:1:68922:68952	1067889	0	True				
ANR	1067893	CallExpression	"DumpCommandTable ( flag , indent )"		1067889	0					
ANR	1067894	Callee	DumpCommandTable		1067889	0					
ANR	1067895	Identifier	DumpCommandTable		1067889	0					
ANR	1067896	ArgumentList	flag		1067889	1					
ANR	1067897	Argument	flag		1067889	0					
ANR	1067898	Identifier	flag		1067889	0					
ANR	1067899	Argument	indent		1067889	1					
ANR	1067900	Identifier	indent		1067889	0					
ANR	1067901	ExpressionStatement	"DumpSigTable ( flag , indent )"	2416:1:68955:68981	1067889	1	True				
ANR	1067902	CallExpression	"DumpSigTable ( flag , indent )"		1067889	0					
ANR	1067903	Callee	DumpSigTable		1067889	0					
ANR	1067904	Identifier	DumpSigTable		1067889	0					
ANR	1067905	ArgumentList	flag		1067889	1					
ANR	1067906	Argument	flag		1067889	0					
ANR	1067907	Identifier	flag		1067889	0					
ANR	1067908	Argument	indent		1067889	1					
ANR	1067909	Identifier	indent		1067889	0					
ANR	1067910	ExpressionStatement	"DumpSocketTable ( flag , indent )"	2417:1:68984:69013	1067889	2	True				
ANR	1067911	CallExpression	"DumpSocketTable ( flag , indent )"		1067889	0					
ANR	1067912	Callee	DumpSocketTable		1067889	0					
ANR	1067913	Identifier	DumpSocketTable		1067889	0					
ANR	1067914	ArgumentList	flag		1067889	1					
ANR	1067915	Argument	flag		1067889	0					
ANR	1067916	Identifier	flag		1067889	0					
ANR	1067917	Argument	indent		1067889	1					
ANR	1067918	Identifier	indent		1067889	0					
ANR	1067919	ExpressionStatement	"t . DumpTimerList ( flag , indent )"	2418:1:69016:69045	1067889	3	True				
ANR	1067920	CallExpression	"t . DumpTimerList ( flag , indent )"		1067889	0					
ANR	1067921	Callee	t . DumpTimerList		1067889	0					
ANR	1067922	MemberAccess	t . DumpTimerList		1067889	0					
ANR	1067923	Identifier	t		1067889	0					
ANR	1067924	Identifier	DumpTimerList		1067889	1					
ANR	1067925	ArgumentList	flag		1067889	1					
ANR	1067926	Argument	flag		1067889	0					
ANR	1067927	Identifier	flag		1067889	0					
ANR	1067928	Argument	indent		1067889	1					
ANR	1067929	Identifier	indent		1067889	0					
ANR	1067930	ReturnType	void		1067889	1					
ANR	1067931	Identifier	DaemonCore :: Dump		1067889	2					
ANR	1067932	ParameterList	"int flag , const char * indent"		1067889	3					
ANR	1067933	Parameter	int flag	2413:22:68889:68896	1067889	0	True				
ANR	1067934	ParameterType	int		1067889	0					
ANR	1067935	Identifier	flag		1067889	1					
ANR	1067936	Parameter	const char * indent	2413:32:68899:68916	1067889	1	True				
ANR	1067937	ParameterType	const char *		1067889	0					
ANR	1067938	Identifier	indent		1067889	1					
ANR	1067939	CFGEntryNode	ENTRY		1067889		True				
ANR	1067940	CFGExitNode	EXIT		1067889		True				
ANR	1067941	Symbol	flag		1067889						
ANR	1067942	Symbol	t		1067889						
ANR	1067943	Symbol	indent		1067889						
ANR	1067944	Function	DaemonCore :: DumpCommandTable	2421:0:69050:70095							
ANR	1067945	FunctionDef	"DaemonCore :: DumpCommandTable (int flag , const char * indent)"		1067944	0					
ANR	1067946	CompoundStatement		2422:0:69114:70095	1067944	0					
ANR	1067947	IdentifierDeclStatement	int i ;	2423:1:69117:69124	1067944	0	True				
ANR	1067948	IdentifierDecl	i		1067944	0					
ANR	1067949	IdentifierDeclType	int		1067944	0					
ANR	1067950	Identifier	i		1067944	1					
ANR	1067951	IdentifierDeclStatement	const char * descrip1 ;	2424:1:69127:69147	1067944	1	True				
ANR	1067952	IdentifierDecl	* descrip1		1067944	0					
ANR	1067953	IdentifierDeclType	const char *		1067944	0					
ANR	1067954	Identifier	descrip1		1067944	1					
ANR	1067955	IdentifierDeclStatement	const char * descrip2 ;	2425:1:69150:69170	1067944	2	True				
ANR	1067956	IdentifierDecl	* descrip2		1067944	0					
ANR	1067957	IdentifierDeclType	const char *		1067944	0					
ANR	1067958	Identifier	descrip2		1067944	1					
ANR	1067959	IfStatement	if ( ( flag & DebugFlags ) != flag )		1067944	3					
ANR	1067960	Condition	( flag & DebugFlags ) != flag	2432:6:69461:69487	1067944	0	True				
ANR	1067961	EqualityExpression	( flag & DebugFlags ) != flag		1067944	0		!=			
ANR	1067962	BitAndExpression	flag & DebugFlags		1067944	0		&			
ANR	1067963	Identifier	flag		1067944	0					
ANR	1067964	Identifier	DebugFlags		1067944	1					
ANR	1067965	Identifier	flag		1067944	1					
ANR	1067966	ReturnStatement	return ;	2433:2:69493:69499	1067944	1	True				
ANR	1067967	IfStatement	if ( indent == NULL )		1067944	4					
ANR	1067968	Condition	indent == NULL	2435:6:69508:69521	1067944	0	True				
ANR	1067969	EqualityExpression	indent == NULL		1067944	0		==			
ANR	1067970	Identifier	indent		1067944	0					
ANR	1067971	Identifier	NULL		1067944	1					
ANR	1067972	ExpressionStatement	indent = DEFAULT_INDENT	2436:2:69526:69549	1067944	1	True				
ANR	1067973	AssignmentExpression	indent = DEFAULT_INDENT		1067944	0		=			
ANR	1067974	Identifier	indent		1067944	0					
ANR	1067975	Identifier	DEFAULT_INDENT		1067944	1					
ANR	1067976	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2438:1:69553:69571	1067944	5	True				
ANR	1067977	CallExpression	"dprintf ( flag , ""\\n"" )"		1067944	0					
ANR	1067978	Callee	dprintf		1067944	0					
ANR	1067979	Identifier	dprintf		1067944	0					
ANR	1067980	ArgumentList	flag		1067944	1					
ANR	1067981	Argument	flag		1067944	0					
ANR	1067982	Identifier	flag		1067944	0					
ANR	1067983	Argument	"""\\n"""		1067944	1					
ANR	1067984	PrimaryExpression	"""\\n"""		1067944	0					
ANR	1067985	ExpressionStatement	"dprintf ( flag , ""%sCommands Registered\\n"" , indent )"	2439:1:69574:69622	1067944	6	True				
ANR	1067986	CallExpression	"dprintf ( flag , ""%sCommands Registered\\n"" , indent )"		1067944	0					
ANR	1067987	Callee	dprintf		1067944	0					
ANR	1067988	Identifier	dprintf		1067944	0					
ANR	1067989	ArgumentList	flag		1067944	1					
ANR	1067990	Argument	flag		1067944	0					
ANR	1067991	Identifier	flag		1067944	0					
ANR	1067992	Argument	"""%sCommands Registered\\n"""		1067944	1					
ANR	1067993	PrimaryExpression	"""%sCommands Registered\\n"""		1067944	0					
ANR	1067994	Argument	indent		1067944	2					
ANR	1067995	Identifier	indent		1067944	0					
ANR	1067996	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2440:1:69625:69673	1067944	7	True				
ANR	1067997	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		1067944	0					
ANR	1067998	Callee	dprintf		1067944	0					
ANR	1067999	Identifier	dprintf		1067944	0					
ANR	1068000	ArgumentList	flag		1067944	1					
ANR	1068001	Argument	flag		1067944	0					
ANR	1068002	Identifier	flag		1067944	0					
ANR	1068003	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1067944	1					
ANR	1068004	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1067944	0					
ANR	1068005	Argument	indent		1067944	2					
ANR	1068006	Identifier	indent		1067944	0					
ANR	1068007	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		1067944	8					
ANR	1068008	ForInit	i = 0 ;	2441:6:69681:69686	1067944	0	True				
ANR	1068009	AssignmentExpression	i = 0		1067944	0		=			
ANR	1068010	Identifier	i		1067944	0					
ANR	1068011	PrimaryExpression	0		1067944	1					
ANR	1068012	Condition	i < maxCommand	2441:13:69688:69701	1067944	1	True				
ANR	1068013	RelationalExpression	i < maxCommand		1067944	0		<			
ANR	1068014	Identifier	i		1067944	0					
ANR	1068015	Identifier	maxCommand		1067944	1					
ANR	1068016	PostIncDecOperationExpression	i ++	2441:29:69704:69706	1067944	2	True				
ANR	1068017	Identifier	i		1067944	0					
ANR	1068018	IncDec	++		1067944	1					
ANR	1068019	CompoundStatement		20:34:594:594	1067944	3					
ANR	1068020	IfStatement	if ( comTable [ i ] . handler || comTable [ i ] . handlercpp )		1067944	0					
ANR	1068021	Condition	comTable [ i ] . handler || comTable [ i ] . handlercpp	2442:6:69717:69761	1067944	0	True				
ANR	1068022	OrExpression	comTable [ i ] . handler || comTable [ i ] . handlercpp		1067944	0		||			
ANR	1068023	MemberAccess	comTable [ i ] . handler		1067944	0					
ANR	1068024	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068025	Identifier	comTable		1067944	0					
ANR	1068026	Identifier	i		1067944	1					
ANR	1068027	Identifier	handler		1067944	1					
ANR	1068028	MemberAccess	comTable [ i ] . handlercpp		1067944	1					
ANR	1068029	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068030	Identifier	comTable		1067944	0					
ANR	1068031	Identifier	i		1067944	1					
ANR	1068032	Identifier	handlercpp		1067944	1					
ANR	1068033	CompoundStatement		22:2:652:652	1067944	1					
ANR	1068034	ExpressionStatement	"descrip1 = ""NULL"""	2444:3:69772:69789	1067944	0	True				
ANR	1068035	AssignmentExpression	"descrip1 = ""NULL"""		1067944	0		=			
ANR	1068036	Identifier	descrip1		1067944	0					
ANR	1068037	PrimaryExpression	"""NULL"""		1067944	1					
ANR	1068038	ExpressionStatement	descrip2 = descrip1	2445:3:69794:69813	1067944	1	True				
ANR	1068039	AssignmentExpression	descrip2 = descrip1		1067944	0		=			
ANR	1068040	Identifier	descrip2		1067944	0					
ANR	1068041	Identifier	descrip1		1067944	1					
ANR	1068042	IfStatement	if ( comTable [ i ] . command_descrip )		1067944	2					
ANR	1068043	Condition	comTable [ i ] . command_descrip	2446:8:69823:69849	1067944	0	True				
ANR	1068044	MemberAccess	comTable [ i ] . command_descrip		1067944	0					
ANR	1068045	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068046	Identifier	comTable		1067944	0					
ANR	1068047	Identifier	i		1067944	1					
ANR	1068048	Identifier	command_descrip		1067944	1					
ANR	1068049	ExpressionStatement	descrip1 = comTable [ i ] . command_descrip	2447:4:69857:69895	1067944	1	True				
ANR	1068050	AssignmentExpression	descrip1 = comTable [ i ] . command_descrip		1067944	0		=			
ANR	1068051	Identifier	descrip1		1067944	0					
ANR	1068052	MemberAccess	comTable [ i ] . command_descrip		1067944	1					
ANR	1068053	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068054	Identifier	comTable		1067944	0					
ANR	1068055	Identifier	i		1067944	1					
ANR	1068056	Identifier	command_descrip		1067944	1					
ANR	1068057	IfStatement	if ( comTable [ i ] . handler_descrip )		1067944	3					
ANR	1068058	Condition	comTable [ i ] . handler_descrip	2448:8:69905:69931	1067944	0	True				
ANR	1068059	MemberAccess	comTable [ i ] . handler_descrip		1067944	0					
ANR	1068060	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068061	Identifier	comTable		1067944	0					
ANR	1068062	Identifier	i		1067944	1					
ANR	1068063	Identifier	handler_descrip		1067944	1					
ANR	1068064	ExpressionStatement	descrip2 = comTable [ i ] . handler_descrip	2449:4:69939:69977	1067944	1	True				
ANR	1068065	AssignmentExpression	descrip2 = comTable [ i ] . handler_descrip		1067944	0		=			
ANR	1068066	Identifier	descrip2		1067944	0					
ANR	1068067	MemberAccess	comTable [ i ] . handler_descrip		1067944	1					
ANR	1068068	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068069	Identifier	comTable		1067944	0					
ANR	1068070	Identifier	i		1067944	1					
ANR	1068071	Identifier	handler_descrip		1067944	1					
ANR	1068072	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , comTable [ i ] . num , descrip1 , descrip2 )"	2450:3:69982:70064	1067944	4	True				
ANR	1068073	CallExpression	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , comTable [ i ] . num , descrip1 , descrip2 )"		1067944	0					
ANR	1068074	Callee	dprintf		1067944	0					
ANR	1068075	Identifier	dprintf		1067944	0					
ANR	1068076	ArgumentList	flag		1067944	1					
ANR	1068077	Argument	flag		1067944	0					
ANR	1068078	Identifier	flag		1067944	0					
ANR	1068079	Argument	"""%s%d: %s %s\\n"""		1067944	1					
ANR	1068080	PrimaryExpression	"""%s%d: %s %s\\n"""		1067944	0					
ANR	1068081	Argument	indent		1067944	2					
ANR	1068082	Identifier	indent		1067944	0					
ANR	1068083	Argument	comTable [ i ] . num		1067944	3					
ANR	1068084	MemberAccess	comTable [ i ] . num		1067944	0					
ANR	1068085	ArrayIndexing	comTable [ i ]		1067944	0					
ANR	1068086	Identifier	comTable		1067944	0					
ANR	1068087	Identifier	i		1067944	1					
ANR	1068088	Identifier	num		1067944	1					
ANR	1068089	Argument	descrip1		1067944	4					
ANR	1068090	Identifier	descrip1		1067944	0					
ANR	1068091	Argument	descrip2		1067944	5					
ANR	1068092	Identifier	descrip2		1067944	0					
ANR	1068093	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2454:1:70074:70093	1067944	9	True				
ANR	1068094	CallExpression	"dprintf ( flag , ""\\n"" )"		1067944	0					
ANR	1068095	Callee	dprintf		1067944	0					
ANR	1068096	Identifier	dprintf		1067944	0					
ANR	1068097	ArgumentList	flag		1067944	1					
ANR	1068098	Argument	flag		1067944	0					
ANR	1068099	Identifier	flag		1067944	0					
ANR	1068100	Argument	"""\\n"""		1067944	1					
ANR	1068101	PrimaryExpression	"""\\n"""		1067944	0					
ANR	1068102	ReturnType	void		1067944	1					
ANR	1068103	Identifier	DaemonCore :: DumpCommandTable		1067944	2					
ANR	1068104	ParameterList	"int flag , const char * indent"		1067944	3					
ANR	1068105	Parameter	int flag	2421:34:69084:69091	1067944	0	True				
ANR	1068106	ParameterType	int		1067944	0					
ANR	1068107	Identifier	flag		1067944	1					
ANR	1068108	Parameter	const char * indent	2421:44:69094:69111	1067944	1	True				
ANR	1068109	ParameterType	const char *		1067944	0					
ANR	1068110	Identifier	indent		1067944	1					
ANR	1068111	CFGEntryNode	ENTRY		1067944		True				
ANR	1068112	CFGExitNode	EXIT		1067944		True				
ANR	1068113	Symbol	comTable [ i ] . command_descrip		1067944						
ANR	1068114	Symbol	flag		1067944						
ANR	1068115	Symbol	NULL		1067944						
ANR	1068116	Symbol	indent		1067944						
ANR	1068117	Symbol	DEFAULT_INDENT		1067944						
ANR	1068118	Symbol	i		1067944						
ANR	1068119	Symbol	DebugFlags		1067944						
ANR	1068120	Symbol	comTable [ i ] . num		1067944						
ANR	1068121	Symbol	* i		1067944						
ANR	1068122	Symbol	* comTable		1067944						
ANR	1068123	Symbol	comTable [ i ] . handler_descrip		1067944						
ANR	1068124	Symbol	comTable [ i ] . handler		1067944						
ANR	1068125	Symbol	comTable		1067944						
ANR	1068126	Symbol	descrip1		1067944						
ANR	1068127	Symbol	maxCommand		1067944						
ANR	1068128	Symbol	comTable [ i ] . handlercpp		1067944						
ANR	1068129	Symbol	descrip2		1067944						
ANR	1068130	Function	DaemonCore :: GetCommandsInAuthLevel	2457:0:70098:70769							
ANR	1068131	FunctionDef	"DaemonCore :: GetCommandsInAuthLevel (DCpermission perm , bool is_authenticated)"		1068130	0					
ANR	1068132	CompoundStatement		2457:85:70183:70769	1068130	0					
ANR	1068133	IdentifierDeclStatement	MyString res ;	2458:1:70186:70198	1068130	0	True				
ANR	1068134	IdentifierDecl	res		1068130	0					
ANR	1068135	IdentifierDeclType	MyString		1068130	0					
ANR	1068136	Identifier	res		1068130	1					
ANR	1068137	IdentifierDeclStatement	int i ;	2459:1:70201:70207	1068130	1	True				
ANR	1068138	IdentifierDecl	i		1068130	0					
ANR	1068139	IdentifierDeclType	int		1068130	0					
ANR	1068140	Identifier	i		1068130	1					
ANR	1068141	IdentifierDeclStatement	DCpermissionHierarchy hierarchy ( perm ) ;	2460:1:70210:70249	1068130	2	True				
ANR	1068142	IdentifierDecl	hierarchy ( perm )		1068130	0					
ANR	1068143	IdentifierDeclType	DCpermissionHierarchy		1068130	0					
ANR	1068144	Identifier	hierarchy		1068130	1					
ANR	1068145	Identifier	perm		1068130	2					
ANR	1068146	IdentifierDeclStatement	DCpermission const * perms = hierarchy . getImpliedPerms ( ) ;	2461:1:70252:70307	1068130	3	True				
ANR	1068147	IdentifierDecl	* perms = hierarchy . getImpliedPerms ( )		1068130	0					
ANR	1068148	IdentifierDeclType	DCpermission const *		1068130	0					
ANR	1068149	Identifier	perms		1068130	1					
ANR	1068150	AssignmentExpression	* perms = hierarchy . getImpliedPerms ( )		1068130	2		=			
ANR	1068151	Identifier	perms		1068130	0					
ANR	1068152	CallExpression	hierarchy . getImpliedPerms ( )		1068130	1					
ANR	1068153	Callee	hierarchy . getImpliedPerms		1068130	0					
ANR	1068154	MemberAccess	hierarchy . getImpliedPerms		1068130	0					
ANR	1068155	Identifier	hierarchy		1068130	0					
ANR	1068156	Identifier	getImpliedPerms		1068130	1					
ANR	1068157	ArgumentList			1068130	1					
ANR	1068158	ForStatement	for ( perm = * ( perms ++ ) ; perm != LAST_PERM ; perm = * ( perms ++ ) )		1068130	4					
ANR	1068159	ForInit	perm = * ( perms ++ ) ;	2464:6:70385:70402	1068130	0	True				
ANR	1068160	AssignmentExpression	perm = * ( perms ++ )		1068130	0		=			
ANR	1068161	Identifier	perm		1068130	0					
ANR	1068162	UnaryOperationExpression	* ( perms ++ )		1068130	1					
ANR	1068163	UnaryOperator	*		1068130	0					
ANR	1068164	PostIncDecOperationExpression	perms ++		1068130	1					
ANR	1068165	Identifier	perms		1068130	0					
ANR	1068166	IncDec	++		1068130	1					
ANR	1068167	Condition	perm != LAST_PERM	2464:25:70404:70420	1068130	1	True				
ANR	1068168	EqualityExpression	perm != LAST_PERM		1068130	0		!=			
ANR	1068169	Identifier	perm		1068130	0					
ANR	1068170	Identifier	LAST_PERM		1068130	1					
ANR	1068171	AssignmentExpression	perm = * ( perms ++ )	2464:44:70423:70439	1068130	2	True	=			
ANR	1068172	Identifier	perm		1068130	0					
ANR	1068173	UnaryOperationExpression	* ( perms ++ )		1068130	1					
ANR	1068174	UnaryOperator	*		1068130	0					
ANR	1068175	PostIncDecOperationExpression	perms ++		1068130	1					
ANR	1068176	Identifier	perms		1068130	0					
ANR	1068177	IncDec	++		1068130	1					
ANR	1068178	CompoundStatement		8:63:258:258	1068130	3					
ANR	1068179	ForStatement	for ( i = 0 ; i < maxCommand ; i ++ )		1068130	0					
ANR	1068180	ForInit	i = 0 ;	2465:7:70451:70456	1068130	0	True				
ANR	1068181	AssignmentExpression	i = 0		1068130	0		=			
ANR	1068182	Identifier	i		1068130	0					
ANR	1068183	PrimaryExpression	0		1068130	1					
ANR	1068184	Condition	i < maxCommand	2465:14:70458:70471	1068130	1	True				
ANR	1068185	RelationalExpression	i < maxCommand		1068130	0		<			
ANR	1068186	Identifier	i		1068130	0					
ANR	1068187	Identifier	maxCommand		1068130	1					
ANR	1068188	PostIncDecOperationExpression	i ++	2465:30:70474:70476	1068130	2	True				
ANR	1068189	Identifier	i		1068130	0					
ANR	1068190	IncDec	++		1068130	1					
ANR	1068191	CompoundStatement		9:35:295:295	1068130	3					
ANR	1068192	IfStatement	if ( ( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated ) )		1068130	0					
ANR	1068193	Condition	( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )	2466:7:70488:70631	1068130	0	True				
ANR	1068194	AndExpression	( comTable [ i ] . handler || comTable [ i ] . handlercpp ) && ( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )		1068130	0		&&			
ANR	1068195	OrExpression	comTable [ i ] . handler || comTable [ i ] . handlercpp		1068130	0		||			
ANR	1068196	MemberAccess	comTable [ i ] . handler		1068130	0					
ANR	1068197	ArrayIndexing	comTable [ i ]		1068130	0					
ANR	1068198	Identifier	comTable		1068130	0					
ANR	1068199	Identifier	i		1068130	1					
ANR	1068200	Identifier	handler		1068130	1					
ANR	1068201	MemberAccess	comTable [ i ] . handlercpp		1068130	1					
ANR	1068202	ArrayIndexing	comTable [ i ]		1068130	0					
ANR	1068203	Identifier	comTable		1068130	0					
ANR	1068204	Identifier	i		1068130	1					
ANR	1068205	Identifier	handlercpp		1068130	1					
ANR	1068206	AndExpression	( comTable [ i ] . perm == perm ) && ( ! comTable [ i ] . force_authentication || is_authenticated )		1068130	1		&&			
ANR	1068207	EqualityExpression	comTable [ i ] . perm == perm		1068130	0		==			
ANR	1068208	MemberAccess	comTable [ i ] . perm		1068130	0					
ANR	1068209	ArrayIndexing	comTable [ i ]		1068130	0					
ANR	1068210	Identifier	comTable		1068130	0					
ANR	1068211	Identifier	i		1068130	1					
ANR	1068212	Identifier	perm		1068130	1					
ANR	1068213	Identifier	perm		1068130	1					
ANR	1068214	OrExpression	! comTable [ i ] . force_authentication || is_authenticated		1068130	1		||			
ANR	1068215	UnaryOperationExpression	! comTable [ i ] . force_authentication		1068130	0					
ANR	1068216	UnaryOperator	!		1068130	0					
ANR	1068217	MemberAccess	comTable [ i ] . force_authentication		1068130	1					
ANR	1068218	ArrayIndexing	comTable [ i ]		1068130	0					
ANR	1068219	Identifier	comTable		1068130	0					
ANR	1068220	Identifier	i		1068130	1					
ANR	1068221	Identifier	force_authentication		1068130	1					
ANR	1068222	Identifier	is_authenticated		1068130	1					
ANR	1068223	CompoundStatement		14:4:459:502	1068130	1					
ANR	1068224	IdentifierDeclStatement	"char const * comma = res . Length ( ) ? "","" : """" ;"	2470:4:70643:70686	1068130	0	True				
ANR	1068225	IdentifierDecl	"* comma = res . Length ( ) ? "","" : """""		1068130	0					
ANR	1068226	IdentifierDeclType	char const *		1068130	0					
ANR	1068227	Identifier	comma		1068130	1					
ANR	1068228	AssignmentExpression	"* comma = res . Length ( ) ? "","" : """""		1068130	2		=			
ANR	1068229	Identifier	comma		1068130	0					
ANR	1068230	ConditionalExpression	"res . Length ( ) ? "","" : """""		1068130	1					
ANR	1068231	Condition	res . Length ( )		1068130	0					
ANR	1068232	CallExpression	res . Length ( )		1068130	0					
ANR	1068233	Callee	res . Length		1068130	0					
ANR	1068234	MemberAccess	res . Length		1068130	0					
ANR	1068235	Identifier	res		1068130	0					
ANR	1068236	Identifier	Length		1068130	1					
ANR	1068237	ArgumentList			1068130	1					
ANR	1068238	PrimaryExpression	""","""		1068130	1					
ANR	1068239	PrimaryExpression	""""""		1068130	2					
ANR	1068240	ExpressionStatement	"res . sprintf_cat ( ""%s%i"" , comma , comTable [ i ] . num )"	2471:4:70692:70741	1068130	1	True				
ANR	1068241	CallExpression	"res . sprintf_cat ( ""%s%i"" , comma , comTable [ i ] . num )"		1068130	0					
ANR	1068242	Callee	res . sprintf_cat		1068130	0					
ANR	1068243	MemberAccess	res . sprintf_cat		1068130	0					
ANR	1068244	Identifier	res		1068130	0					
ANR	1068245	Identifier	sprintf_cat		1068130	1					
ANR	1068246	ArgumentList	"""%s%i"""		1068130	1					
ANR	1068247	Argument	"""%s%i"""		1068130	0					
ANR	1068248	PrimaryExpression	"""%s%i"""		1068130	0					
ANR	1068249	Argument	comma		1068130	1					
ANR	1068250	Identifier	comma		1068130	0					
ANR	1068251	Argument	comTable [ i ] . num		1068130	2					
ANR	1068252	MemberAccess	comTable [ i ] . num		1068130	0					
ANR	1068253	ArrayIndexing	comTable [ i ]		1068130	0					
ANR	1068254	Identifier	comTable		1068130	0					
ANR	1068255	Identifier	i		1068130	1					
ANR	1068256	Identifier	num		1068130	1					
ANR	1068257	ReturnStatement	return res ;	2476:1:70757:70767	1068130	5	True				
ANR	1068258	Identifier	res		1068130	0					
ANR	1068259	ReturnType	MyString		1068130	1					
ANR	1068260	Identifier	DaemonCore :: GetCommandsInAuthLevel		1068130	2					
ANR	1068261	ParameterList	"DCpermission perm , bool is_authenticated"		1068130	3					
ANR	1068262	Parameter	DCpermission perm	2457:44:70142:70158	1068130	0	True				
ANR	1068263	ParameterType	DCpermission		1068130	0					
ANR	1068264	Identifier	perm		1068130	1					
ANR	1068265	Parameter	bool is_authenticated	2457:62:70160:70180	1068130	1	True				
ANR	1068266	ParameterType	bool		1068130	0					
ANR	1068267	Identifier	is_authenticated		1068130	1					
ANR	1068268	CFGEntryNode	ENTRY		1068130		True				
ANR	1068269	CFGExitNode	EXIT		1068130		True				
ANR	1068270	Symbol	LAST_PERM		1068130						
ANR	1068271	Symbol	res		1068130						
ANR	1068272	Symbol	comTable [ i ] . perm		1068130						
ANR	1068273	Symbol	perm		1068130						
ANR	1068274	Symbol	hierarchy . getImpliedPerms		1068130						
ANR	1068275	Symbol	hierarchy		1068130						
ANR	1068276	Symbol	comTable [ i ] . force_authentication		1068130						
ANR	1068277	Symbol	i		1068130						
ANR	1068278	Symbol	res . Length		1068130						
ANR	1068279	Symbol	* ( perms ++ )		1068130						
ANR	1068280	Symbol	comTable [ i ] . num		1068130						
ANR	1068281	Symbol	comma		1068130						
ANR	1068282	Symbol	* i		1068130						
ANR	1068283	Symbol	* comTable		1068130						
ANR	1068284	Symbol	comTable		1068130						
ANR	1068285	Symbol	comTable [ i ] . handler		1068130						
ANR	1068286	Symbol	maxCommand		1068130						
ANR	1068287	Symbol	comTable [ i ] . handlercpp		1068130						
ANR	1068288	Symbol	perms		1068130						
ANR	1068289	Symbol	is_authenticated		1068130						
ANR	1068290	Function	DaemonCore :: DumpReapTable	2479:0:70772:71809							
ANR	1068291	FunctionDef	"DaemonCore :: DumpReapTable (int flag , const char * indent)"		1068290	0					
ANR	1068292	CompoundStatement		2480:0:70833:71809	1068290	0					
ANR	1068293	IdentifierDeclStatement	int i ;	2481:1:70836:70843	1068290	0	True				
ANR	1068294	IdentifierDecl	i		1068290	0					
ANR	1068295	IdentifierDeclType	int		1068290	0					
ANR	1068296	Identifier	i		1068290	1					
ANR	1068297	IdentifierDeclStatement	const char * descrip1 ;	2482:1:70846:70866	1068290	1	True				
ANR	1068298	IdentifierDecl	* descrip1		1068290	0					
ANR	1068299	IdentifierDeclType	const char *		1068290	0					
ANR	1068300	Identifier	descrip1		1068290	1					
ANR	1068301	IdentifierDeclStatement	const char * descrip2 ;	2483:1:70869:70889	1068290	2	True				
ANR	1068302	IdentifierDecl	* descrip2		1068290	0					
ANR	1068303	IdentifierDeclType	const char *		1068290	0					
ANR	1068304	Identifier	descrip2		1068290	1					
ANR	1068305	IfStatement	if ( ( flag & DebugFlags ) != flag )		1068290	3					
ANR	1068306	Condition	( flag & DebugFlags ) != flag	2490:6:71180:71206	1068290	0	True				
ANR	1068307	EqualityExpression	( flag & DebugFlags ) != flag		1068290	0		!=			
ANR	1068308	BitAndExpression	flag & DebugFlags		1068290	0		&			
ANR	1068309	Identifier	flag		1068290	0					
ANR	1068310	Identifier	DebugFlags		1068290	1					
ANR	1068311	Identifier	flag		1068290	1					
ANR	1068312	ReturnStatement	return ;	2491:2:71212:71218	1068290	1	True				
ANR	1068313	IfStatement	if ( indent == NULL )		1068290	4					
ANR	1068314	Condition	indent == NULL	2493:6:71227:71240	1068290	0	True				
ANR	1068315	EqualityExpression	indent == NULL		1068290	0		==			
ANR	1068316	Identifier	indent		1068290	0					
ANR	1068317	Identifier	NULL		1068290	1					
ANR	1068318	ExpressionStatement	indent = DEFAULT_INDENT	2494:2:71245:71268	1068290	1	True				
ANR	1068319	AssignmentExpression	indent = DEFAULT_INDENT		1068290	0		=			
ANR	1068320	Identifier	indent		1068290	0					
ANR	1068321	Identifier	DEFAULT_INDENT		1068290	1					
ANR	1068322	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2496:1:71272:71290	1068290	5	True				
ANR	1068323	CallExpression	"dprintf ( flag , ""\\n"" )"		1068290	0					
ANR	1068324	Callee	dprintf		1068290	0					
ANR	1068325	Identifier	dprintf		1068290	0					
ANR	1068326	ArgumentList	flag		1068290	1					
ANR	1068327	Argument	flag		1068290	0					
ANR	1068328	Identifier	flag		1068290	0					
ANR	1068329	Argument	"""\\n"""		1068290	1					
ANR	1068330	PrimaryExpression	"""\\n"""		1068290	0					
ANR	1068331	ExpressionStatement	"dprintf ( flag , ""%sReapers Registered\\n"" , indent )"	2497:1:71293:71340	1068290	6	True				
ANR	1068332	CallExpression	"dprintf ( flag , ""%sReapers Registered\\n"" , indent )"		1068290	0					
ANR	1068333	Callee	dprintf		1068290	0					
ANR	1068334	Identifier	dprintf		1068290	0					
ANR	1068335	ArgumentList	flag		1068290	1					
ANR	1068336	Argument	flag		1068290	0					
ANR	1068337	Identifier	flag		1068290	0					
ANR	1068338	Argument	"""%sReapers Registered\\n"""		1068290	1					
ANR	1068339	PrimaryExpression	"""%sReapers Registered\\n"""		1068290	0					
ANR	1068340	Argument	indent		1068290	2					
ANR	1068341	Identifier	indent		1068290	0					
ANR	1068342	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2498:1:71343:71391	1068290	7	True				
ANR	1068343	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		1068290	0					
ANR	1068344	Callee	dprintf		1068290	0					
ANR	1068345	Identifier	dprintf		1068290	0					
ANR	1068346	ArgumentList	flag		1068290	1					
ANR	1068347	Argument	flag		1068290	0					
ANR	1068348	Identifier	flag		1068290	0					
ANR	1068349	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1068290	1					
ANR	1068350	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1068290	0					
ANR	1068351	Argument	indent		1068290	2					
ANR	1068352	Identifier	indent		1068290	0					
ANR	1068353	ForStatement	for ( i = 0 ; i < maxReap ; i ++ )		1068290	8					
ANR	1068354	ForInit	i = 0 ;	2499:6:71399:71404	1068290	0	True				
ANR	1068355	AssignmentExpression	i = 0		1068290	0		=			
ANR	1068356	Identifier	i		1068290	0					
ANR	1068357	PrimaryExpression	0		1068290	1					
ANR	1068358	Condition	i < maxReap	2499:13:71406:71416	1068290	1	True				
ANR	1068359	RelationalExpression	i < maxReap		1068290	0		<			
ANR	1068360	Identifier	i		1068290	0					
ANR	1068361	Identifier	maxReap		1068290	1					
ANR	1068362	PostIncDecOperationExpression	i ++	2499:26:71419:71421	1068290	2	True				
ANR	1068363	Identifier	i		1068290	0					
ANR	1068364	IncDec	++		1068290	1					
ANR	1068365	CompoundStatement		20:31:590:590	1068290	3					
ANR	1068366	IfStatement	if ( reapTable [ i ] . handler || reapTable [ i ] . handlercpp )		1068290	0					
ANR	1068367	Condition	reapTable [ i ] . handler || reapTable [ i ] . handlercpp	2500:6:71432:71478	1068290	0	True				
ANR	1068368	OrExpression	reapTable [ i ] . handler || reapTable [ i ] . handlercpp		1068290	0		||			
ANR	1068369	MemberAccess	reapTable [ i ] . handler		1068290	0					
ANR	1068370	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068371	Identifier	reapTable		1068290	0					
ANR	1068372	Identifier	i		1068290	1					
ANR	1068373	Identifier	handler		1068290	1					
ANR	1068374	MemberAccess	reapTable [ i ] . handlercpp		1068290	1					
ANR	1068375	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068376	Identifier	reapTable		1068290	0					
ANR	1068377	Identifier	i		1068290	1					
ANR	1068378	Identifier	handlercpp		1068290	1					
ANR	1068379	CompoundStatement		21:56:648:648	1068290	1					
ANR	1068380	ExpressionStatement	"descrip1 = ""NULL"""	2501:3:71487:71504	1068290	0	True				
ANR	1068381	AssignmentExpression	"descrip1 = ""NULL"""		1068290	0		=			
ANR	1068382	Identifier	descrip1		1068290	0					
ANR	1068383	PrimaryExpression	"""NULL"""		1068290	1					
ANR	1068384	ExpressionStatement	descrip2 = descrip1	2502:3:71509:71528	1068290	1	True				
ANR	1068385	AssignmentExpression	descrip2 = descrip1		1068290	0		=			
ANR	1068386	Identifier	descrip2		1068290	0					
ANR	1068387	Identifier	descrip1		1068290	1					
ANR	1068388	IfStatement	if ( reapTable [ i ] . reap_descrip )		1068290	2					
ANR	1068389	Condition	reapTable [ i ] . reap_descrip	2503:8:71538:71562	1068290	0	True				
ANR	1068390	MemberAccess	reapTable [ i ] . reap_descrip		1068290	0					
ANR	1068391	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068392	Identifier	reapTable		1068290	0					
ANR	1068393	Identifier	i		1068290	1					
ANR	1068394	Identifier	reap_descrip		1068290	1					
ANR	1068395	ExpressionStatement	descrip1 = reapTable [ i ] . reap_descrip	2504:4:71570:71606	1068290	1	True				
ANR	1068396	AssignmentExpression	descrip1 = reapTable [ i ] . reap_descrip		1068290	0		=			
ANR	1068397	Identifier	descrip1		1068290	0					
ANR	1068398	MemberAccess	reapTable [ i ] . reap_descrip		1068290	1					
ANR	1068399	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068400	Identifier	reapTable		1068290	0					
ANR	1068401	Identifier	i		1068290	1					
ANR	1068402	Identifier	reap_descrip		1068290	1					
ANR	1068403	IfStatement	if ( reapTable [ i ] . handler_descrip )		1068290	3					
ANR	1068404	Condition	reapTable [ i ] . handler_descrip	2505:8:71616:71643	1068290	0	True				
ANR	1068405	MemberAccess	reapTable [ i ] . handler_descrip		1068290	0					
ANR	1068406	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068407	Identifier	reapTable		1068290	0					
ANR	1068408	Identifier	i		1068290	1					
ANR	1068409	Identifier	handler_descrip		1068290	1					
ANR	1068410	ExpressionStatement	descrip2 = reapTable [ i ] . handler_descrip	2506:4:71651:71690	1068290	1	True				
ANR	1068411	AssignmentExpression	descrip2 = reapTable [ i ] . handler_descrip		1068290	0		=			
ANR	1068412	Identifier	descrip2		1068290	0					
ANR	1068413	MemberAccess	reapTable [ i ] . handler_descrip		1068290	1					
ANR	1068414	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068415	Identifier	reapTable		1068290	0					
ANR	1068416	Identifier	i		1068290	1					
ANR	1068417	Identifier	handler_descrip		1068290	1					
ANR	1068418	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , reapTable [ i ] . num , descrip1 , descrip2 )"	2507:3:71695:71778	1068290	4	True				
ANR	1068419	CallExpression	"dprintf ( flag , ""%s%d: %s %s\\n"" , indent , reapTable [ i ] . num , descrip1 , descrip2 )"		1068290	0					
ANR	1068420	Callee	dprintf		1068290	0					
ANR	1068421	Identifier	dprintf		1068290	0					
ANR	1068422	ArgumentList	flag		1068290	1					
ANR	1068423	Argument	flag		1068290	0					
ANR	1068424	Identifier	flag		1068290	0					
ANR	1068425	Argument	"""%s%d: %s %s\\n"""		1068290	1					
ANR	1068426	PrimaryExpression	"""%s%d: %s %s\\n"""		1068290	0					
ANR	1068427	Argument	indent		1068290	2					
ANR	1068428	Identifier	indent		1068290	0					
ANR	1068429	Argument	reapTable [ i ] . num		1068290	3					
ANR	1068430	MemberAccess	reapTable [ i ] . num		1068290	0					
ANR	1068431	ArrayIndexing	reapTable [ i ]		1068290	0					
ANR	1068432	Identifier	reapTable		1068290	0					
ANR	1068433	Identifier	i		1068290	1					
ANR	1068434	Identifier	num		1068290	1					
ANR	1068435	Argument	descrip1		1068290	4					
ANR	1068436	Identifier	descrip1		1068290	0					
ANR	1068437	Argument	descrip2		1068290	5					
ANR	1068438	Identifier	descrip2		1068290	0					
ANR	1068439	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2511:1:71788:71807	1068290	9	True				
ANR	1068440	CallExpression	"dprintf ( flag , ""\\n"" )"		1068290	0					
ANR	1068441	Callee	dprintf		1068290	0					
ANR	1068442	Identifier	dprintf		1068290	0					
ANR	1068443	ArgumentList	flag		1068290	1					
ANR	1068444	Argument	flag		1068290	0					
ANR	1068445	Identifier	flag		1068290	0					
ANR	1068446	Argument	"""\\n"""		1068290	1					
ANR	1068447	PrimaryExpression	"""\\n"""		1068290	0					
ANR	1068448	ReturnType	void		1068290	1					
ANR	1068449	Identifier	DaemonCore :: DumpReapTable		1068290	2					
ANR	1068450	ParameterList	"int flag , const char * indent"		1068290	3					
ANR	1068451	Parameter	int flag	2479:31:70803:70810	1068290	0	True				
ANR	1068452	ParameterType	int		1068290	0					
ANR	1068453	Identifier	flag		1068290	1					
ANR	1068454	Parameter	const char * indent	2479:41:70813:70830	1068290	1	True				
ANR	1068455	ParameterType	const char *		1068290	0					
ANR	1068456	Identifier	indent		1068290	1					
ANR	1068457	CFGEntryNode	ENTRY		1068290		True				
ANR	1068458	CFGExitNode	EXIT		1068290		True				
ANR	1068459	Symbol	flag		1068290						
ANR	1068460	Symbol	NULL		1068290						
ANR	1068461	Symbol	indent		1068290						
ANR	1068462	Symbol	DEFAULT_INDENT		1068290						
ANR	1068463	Symbol	reapTable [ i ] . reap_descrip		1068290						
ANR	1068464	Symbol	i		1068290						
ANR	1068465	Symbol	maxReap		1068290						
ANR	1068466	Symbol	DebugFlags		1068290						
ANR	1068467	Symbol	* i		1068290						
ANR	1068468	Symbol	reapTable		1068290						
ANR	1068469	Symbol	reapTable [ i ] . handler_descrip		1068290						
ANR	1068470	Symbol	reapTable [ i ] . handlercpp		1068290						
ANR	1068471	Symbol	descrip1		1068290						
ANR	1068472	Symbol	reapTable [ i ] . num		1068290						
ANR	1068473	Symbol	descrip2		1068290						
ANR	1068474	Symbol	* reapTable		1068290						
ANR	1068475	Symbol	reapTable [ i ] . handler		1068290						
ANR	1068476	Function	DaemonCore :: DumpSigTable	2514:0:71812:72916							
ANR	1068477	FunctionDef	"DaemonCore :: DumpSigTable (int flag , const char * indent)"		1068476	0					
ANR	1068478	CompoundStatement		2515:0:71872:72916	1068476	0					
ANR	1068479	IdentifierDeclStatement	int i ;	2516:1:71875:71882	1068476	0	True				
ANR	1068480	IdentifierDecl	i		1068476	0					
ANR	1068481	IdentifierDeclType	int		1068476	0					
ANR	1068482	Identifier	i		1068476	1					
ANR	1068483	IdentifierDeclStatement	const char * descrip1 ;	2517:1:71885:71905	1068476	1	True				
ANR	1068484	IdentifierDecl	* descrip1		1068476	0					
ANR	1068485	IdentifierDeclType	const char *		1068476	0					
ANR	1068486	Identifier	descrip1		1068476	1					
ANR	1068487	IdentifierDeclStatement	const char * descrip2 ;	2518:1:71908:71928	1068476	2	True				
ANR	1068488	IdentifierDecl	* descrip2		1068476	0					
ANR	1068489	IdentifierDeclType	const char *		1068476	0					
ANR	1068490	Identifier	descrip2		1068476	1					
ANR	1068491	IfStatement	if ( ( flag & DebugFlags ) != flag )		1068476	3					
ANR	1068492	Condition	( flag & DebugFlags ) != flag	2525:6:72219:72245	1068476	0	True				
ANR	1068493	EqualityExpression	( flag & DebugFlags ) != flag		1068476	0		!=			
ANR	1068494	BitAndExpression	flag & DebugFlags		1068476	0		&			
ANR	1068495	Identifier	flag		1068476	0					
ANR	1068496	Identifier	DebugFlags		1068476	1					
ANR	1068497	Identifier	flag		1068476	1					
ANR	1068498	ReturnStatement	return ;	2526:2:72251:72257	1068476	1	True				
ANR	1068499	IfStatement	if ( indent == NULL )		1068476	4					
ANR	1068500	Condition	indent == NULL	2528:6:72266:72279	1068476	0	True				
ANR	1068501	EqualityExpression	indent == NULL		1068476	0		==			
ANR	1068502	Identifier	indent		1068476	0					
ANR	1068503	Identifier	NULL		1068476	1					
ANR	1068504	ExpressionStatement	indent = DEFAULT_INDENT	2529:2:72284:72307	1068476	1	True				
ANR	1068505	AssignmentExpression	indent = DEFAULT_INDENT		1068476	0		=			
ANR	1068506	Identifier	indent		1068476	0					
ANR	1068507	Identifier	DEFAULT_INDENT		1068476	1					
ANR	1068508	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2531:1:72311:72330	1068476	5	True				
ANR	1068509	CallExpression	"dprintf ( flag , ""\\n"" )"		1068476	0					
ANR	1068510	Callee	dprintf		1068476	0					
ANR	1068511	Identifier	dprintf		1068476	0					
ANR	1068512	ArgumentList	flag		1068476	1					
ANR	1068513	Argument	flag		1068476	0					
ANR	1068514	Identifier	flag		1068476	0					
ANR	1068515	Argument	"""\\n"""		1068476	1					
ANR	1068516	PrimaryExpression	"""\\n"""		1068476	0					
ANR	1068517	ExpressionStatement	"dprintf ( flag , ""%sSignals Registered\\n"" , indent )"	2532:1:72333:72380	1068476	6	True				
ANR	1068518	CallExpression	"dprintf ( flag , ""%sSignals Registered\\n"" , indent )"		1068476	0					
ANR	1068519	Callee	dprintf		1068476	0					
ANR	1068520	Identifier	dprintf		1068476	0					
ANR	1068521	ArgumentList	flag		1068476	1					
ANR	1068522	Argument	flag		1068476	0					
ANR	1068523	Identifier	flag		1068476	0					
ANR	1068524	Argument	"""%sSignals Registered\\n"""		1068476	1					
ANR	1068525	PrimaryExpression	"""%sSignals Registered\\n"""		1068476	0					
ANR	1068526	Argument	indent		1068476	2					
ANR	1068527	Identifier	indent		1068476	0					
ANR	1068528	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2533:1:72383:72430	1068476	7	True				
ANR	1068529	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~\\n"" , indent )"		1068476	0					
ANR	1068530	Callee	dprintf		1068476	0					
ANR	1068531	Identifier	dprintf		1068476	0					
ANR	1068532	ArgumentList	flag		1068476	1					
ANR	1068533	Argument	flag		1068476	0					
ANR	1068534	Identifier	flag		1068476	0					
ANR	1068535	Argument	"""%s~~~~~~~~~~~~~~~~~~\\n"""		1068476	1					
ANR	1068536	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~\\n"""		1068476	0					
ANR	1068537	Argument	indent		1068476	2					
ANR	1068538	Identifier	indent		1068476	0					
ANR	1068539	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		1068476	8					
ANR	1068540	ForInit	i = 0 ;	2534:6:72438:72443	1068476	0	True				
ANR	1068541	AssignmentExpression	i = 0		1068476	0		=			
ANR	1068542	Identifier	i		1068476	0					
ANR	1068543	PrimaryExpression	0		1068476	1					
ANR	1068544	Condition	i < maxSig	2534:13:72445:72454	1068476	1	True				
ANR	1068545	RelationalExpression	i < maxSig		1068476	0		<			
ANR	1068546	Identifier	i		1068476	0					
ANR	1068547	Identifier	maxSig		1068476	1					
ANR	1068548	PostIncDecOperationExpression	i ++	2534:25:72457:72459	1068476	2	True				
ANR	1068549	Identifier	i		1068476	0					
ANR	1068550	IncDec	++		1068476	1					
ANR	1068551	CompoundStatement		20:30:589:589	1068476	3					
ANR	1068552	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		1068476	0					
ANR	1068553	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	2535:6:72470:72514	1068476	0	True				
ANR	1068554	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		1068476	0		||			
ANR	1068555	MemberAccess	sigTable [ i ] . handler		1068476	0					
ANR	1068556	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068557	Identifier	sigTable		1068476	0					
ANR	1068558	Identifier	i		1068476	1					
ANR	1068559	Identifier	handler		1068476	1					
ANR	1068560	MemberAccess	sigTable [ i ] . handlercpp		1068476	1					
ANR	1068561	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068562	Identifier	sigTable		1068476	0					
ANR	1068563	Identifier	i		1068476	1					
ANR	1068564	Identifier	handlercpp		1068476	1					
ANR	1068565	CompoundStatement		21:54:645:645	1068476	1					
ANR	1068566	ExpressionStatement	"descrip1 = ""NULL"""	2536:3:72523:72540	1068476	0	True				
ANR	1068567	AssignmentExpression	"descrip1 = ""NULL"""		1068476	0		=			
ANR	1068568	Identifier	descrip1		1068476	0					
ANR	1068569	PrimaryExpression	"""NULL"""		1068476	1					
ANR	1068570	ExpressionStatement	descrip2 = descrip1	2537:3:72545:72564	1068476	1	True				
ANR	1068571	AssignmentExpression	descrip2 = descrip1		1068476	0		=			
ANR	1068572	Identifier	descrip2		1068476	0					
ANR	1068573	Identifier	descrip1		1068476	1					
ANR	1068574	IfStatement	if ( sigTable [ i ] . sig_descrip )		1068476	2					
ANR	1068575	Condition	sigTable [ i ] . sig_descrip	2538:8:72574:72596	1068476	0	True				
ANR	1068576	MemberAccess	sigTable [ i ] . sig_descrip		1068476	0					
ANR	1068577	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068578	Identifier	sigTable		1068476	0					
ANR	1068579	Identifier	i		1068476	1					
ANR	1068580	Identifier	sig_descrip		1068476	1					
ANR	1068581	ExpressionStatement	descrip1 = sigTable [ i ] . sig_descrip	2539:4:72604:72638	1068476	1	True				
ANR	1068582	AssignmentExpression	descrip1 = sigTable [ i ] . sig_descrip		1068476	0		=			
ANR	1068583	Identifier	descrip1		1068476	0					
ANR	1068584	MemberAccess	sigTable [ i ] . sig_descrip		1068476	1					
ANR	1068585	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068586	Identifier	sigTable		1068476	0					
ANR	1068587	Identifier	i		1068476	1					
ANR	1068588	Identifier	sig_descrip		1068476	1					
ANR	1068589	IfStatement	if ( sigTable [ i ] . handler_descrip )		1068476	3					
ANR	1068590	Condition	sigTable [ i ] . handler_descrip	2540:8:72648:72674	1068476	0	True				
ANR	1068591	MemberAccess	sigTable [ i ] . handler_descrip		1068476	0					
ANR	1068592	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068593	Identifier	sigTable		1068476	0					
ANR	1068594	Identifier	i		1068476	1					
ANR	1068595	Identifier	handler_descrip		1068476	1					
ANR	1068596	ExpressionStatement	descrip2 = sigTable [ i ] . handler_descrip	2541:4:72682:72720	1068476	1	True				
ANR	1068597	AssignmentExpression	descrip2 = sigTable [ i ] . handler_descrip		1068476	0		=			
ANR	1068598	Identifier	descrip2		1068476	0					
ANR	1068599	MemberAccess	sigTable [ i ] . handler_descrip		1068476	1					
ANR	1068600	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068601	Identifier	sigTable		1068476	0					
ANR	1068602	Identifier	i		1068476	1					
ANR	1068603	Identifier	handler_descrip		1068476	1					
ANR	1068604	ExpressionStatement	"dprintf ( flag , ""%s%d: %s %s, Blocked:%d Pending:%d\\n"" , indent , sigTable [ i ] . num , descrip1 , descrip2 , sigTable [ i ] . is_blocked , sigTable [ i ] . is_pending )"	2542:3:72725:72885	1068476	4	True				
ANR	1068605	CallExpression	"dprintf ( flag , ""%s%d: %s %s, Blocked:%d Pending:%d\\n"" , indent , sigTable [ i ] . num , descrip1 , descrip2 , sigTable [ i ] . is_blocked , sigTable [ i ] . is_pending )"		1068476	0					
ANR	1068606	Callee	dprintf		1068476	0					
ANR	1068607	Identifier	dprintf		1068476	0					
ANR	1068608	ArgumentList	flag		1068476	1					
ANR	1068609	Argument	flag		1068476	0					
ANR	1068610	Identifier	flag		1068476	0					
ANR	1068611	Argument	"""%s%d: %s %s, Blocked:%d Pending:%d\\n"""		1068476	1					
ANR	1068612	PrimaryExpression	"""%s%d: %s %s, Blocked:%d Pending:%d\\n"""		1068476	0					
ANR	1068613	Argument	indent		1068476	2					
ANR	1068614	Identifier	indent		1068476	0					
ANR	1068615	Argument	sigTable [ i ] . num		1068476	3					
ANR	1068616	MemberAccess	sigTable [ i ] . num		1068476	0					
ANR	1068617	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068618	Identifier	sigTable		1068476	0					
ANR	1068619	Identifier	i		1068476	1					
ANR	1068620	Identifier	num		1068476	1					
ANR	1068621	Argument	descrip1		1068476	4					
ANR	1068622	Identifier	descrip1		1068476	0					
ANR	1068623	Argument	descrip2		1068476	5					
ANR	1068624	Identifier	descrip2		1068476	0					
ANR	1068625	Argument	sigTable [ i ] . is_blocked		1068476	6					
ANR	1068626	MemberAccess	sigTable [ i ] . is_blocked		1068476	0					
ANR	1068627	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068628	Identifier	sigTable		1068476	0					
ANR	1068629	Identifier	i		1068476	1					
ANR	1068630	Identifier	is_blocked		1068476	1					
ANR	1068631	Argument	sigTable [ i ] . is_pending		1068476	7					
ANR	1068632	MemberAccess	sigTable [ i ] . is_pending		1068476	0					
ANR	1068633	ArrayIndexing	sigTable [ i ]		1068476	0					
ANR	1068634	Identifier	sigTable		1068476	0					
ANR	1068635	Identifier	i		1068476	1					
ANR	1068636	Identifier	is_pending		1068476	1					
ANR	1068637	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2547:1:72895:72914	1068476	9	True				
ANR	1068638	CallExpression	"dprintf ( flag , ""\\n"" )"		1068476	0					
ANR	1068639	Callee	dprintf		1068476	0					
ANR	1068640	Identifier	dprintf		1068476	0					
ANR	1068641	ArgumentList	flag		1068476	1					
ANR	1068642	Argument	flag		1068476	0					
ANR	1068643	Identifier	flag		1068476	0					
ANR	1068644	Argument	"""\\n"""		1068476	1					
ANR	1068645	PrimaryExpression	"""\\n"""		1068476	0					
ANR	1068646	ReturnType	void		1068476	1					
ANR	1068647	Identifier	DaemonCore :: DumpSigTable		1068476	2					
ANR	1068648	ParameterList	"int flag , const char * indent"		1068476	3					
ANR	1068649	Parameter	int flag	2514:30:71842:71849	1068476	0	True				
ANR	1068650	ParameterType	int		1068476	0					
ANR	1068651	Identifier	flag		1068476	1					
ANR	1068652	Parameter	const char * indent	2514:40:71852:71869	1068476	1	True				
ANR	1068653	ParameterType	const char *		1068476	0					
ANR	1068654	Identifier	indent		1068476	1					
ANR	1068655	CFGEntryNode	ENTRY		1068476		True				
ANR	1068656	CFGExitNode	EXIT		1068476		True				
ANR	1068657	Symbol	sigTable [ i ] . handler_descrip		1068476						
ANR	1068658	Symbol	sigTable [ i ] . is_pending		1068476						
ANR	1068659	Symbol	flag		1068476						
ANR	1068660	Symbol	NULL		1068476						
ANR	1068661	Symbol	maxSig		1068476						
ANR	1068662	Symbol	sigTable [ i ] . sig_descrip		1068476						
ANR	1068663	Symbol	indent		1068476						
ANR	1068664	Symbol	DEFAULT_INDENT		1068476						
ANR	1068665	Symbol	i		1068476						
ANR	1068666	Symbol	DebugFlags		1068476						
ANR	1068667	Symbol	* i		1068476						
ANR	1068668	Symbol	* sigTable		1068476						
ANR	1068669	Symbol	sigTable [ i ] . num		1068476						
ANR	1068670	Symbol	sigTable [ i ] . handlercpp		1068476						
ANR	1068671	Symbol	sigTable [ i ] . is_blocked		1068476						
ANR	1068672	Symbol	sigTable		1068476						
ANR	1068673	Symbol	descrip1		1068476						
ANR	1068674	Symbol	descrip2		1068476						
ANR	1068675	Symbol	sigTable [ i ] . handler		1068476						
ANR	1068676	Function	DaemonCore :: DumpSocketTable	2550:0:72919:73987							
ANR	1068677	FunctionDef	"DaemonCore :: DumpSocketTable (int flag , const char * indent)"		1068676	0					
ANR	1068678	CompoundStatement		2551:0:72982:73987	1068676	0					
ANR	1068679	IdentifierDeclStatement	int i ;	2552:1:72985:72992	1068676	0	True				
ANR	1068680	IdentifierDecl	i		1068676	0					
ANR	1068681	IdentifierDeclType	int		1068676	0					
ANR	1068682	Identifier	i		1068676	1					
ANR	1068683	IdentifierDeclStatement	const char * descrip1 ;	2553:1:72995:73015	1068676	1	True				
ANR	1068684	IdentifierDecl	* descrip1		1068676	0					
ANR	1068685	IdentifierDeclType	const char *		1068676	0					
ANR	1068686	Identifier	descrip1		1068676	1					
ANR	1068687	IdentifierDeclStatement	const char * descrip2 ;	2554:1:73018:73038	1068676	2	True				
ANR	1068688	IdentifierDecl	* descrip2		1068676	0					
ANR	1068689	IdentifierDeclType	const char *		1068676	0					
ANR	1068690	Identifier	descrip2		1068676	1					
ANR	1068691	IfStatement	if ( ( flag & DebugFlags ) != flag )		1068676	3					
ANR	1068692	Condition	( flag & DebugFlags ) != flag	2561:6:73329:73355	1068676	0	True				
ANR	1068693	EqualityExpression	( flag & DebugFlags ) != flag		1068676	0		!=			
ANR	1068694	BitAndExpression	flag & DebugFlags		1068676	0		&			
ANR	1068695	Identifier	flag		1068676	0					
ANR	1068696	Identifier	DebugFlags		1068676	1					
ANR	1068697	Identifier	flag		1068676	1					
ANR	1068698	ReturnStatement	return ;	2562:2:73361:73367	1068676	1	True				
ANR	1068699	IfStatement	if ( indent == NULL )		1068676	4					
ANR	1068700	Condition	indent == NULL	2564:6:73376:73389	1068676	0	True				
ANR	1068701	EqualityExpression	indent == NULL		1068676	0		==			
ANR	1068702	Identifier	indent		1068676	0					
ANR	1068703	Identifier	NULL		1068676	1					
ANR	1068704	ExpressionStatement	indent = DEFAULT_INDENT	2565:2:73394:73417	1068676	1	True				
ANR	1068705	AssignmentExpression	indent = DEFAULT_INDENT		1068676	0		=			
ANR	1068706	Identifier	indent		1068676	0					
ANR	1068707	Identifier	DEFAULT_INDENT		1068676	1					
ANR	1068708	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2567:1:73421:73439	1068676	5	True				
ANR	1068709	CallExpression	"dprintf ( flag , ""\\n"" )"		1068676	0					
ANR	1068710	Callee	dprintf		1068676	0					
ANR	1068711	Identifier	dprintf		1068676	0					
ANR	1068712	ArgumentList	flag		1068676	1					
ANR	1068713	Argument	flag		1068676	0					
ANR	1068714	Identifier	flag		1068676	0					
ANR	1068715	Argument	"""\\n"""		1068676	1					
ANR	1068716	PrimaryExpression	"""\\n"""		1068676	0					
ANR	1068717	ExpressionStatement	"dprintf ( flag , ""%sSockets Registered\\n"" , indent )"	2568:1:73442:73489	1068676	6	True				
ANR	1068718	CallExpression	"dprintf ( flag , ""%sSockets Registered\\n"" , indent )"		1068676	0					
ANR	1068719	Callee	dprintf		1068676	0					
ANR	1068720	Identifier	dprintf		1068676	0					
ANR	1068721	ArgumentList	flag		1068676	1					
ANR	1068722	Argument	flag		1068676	0					
ANR	1068723	Identifier	flag		1068676	0					
ANR	1068724	Argument	"""%sSockets Registered\\n"""		1068676	1					
ANR	1068725	PrimaryExpression	"""%sSockets Registered\\n"""		1068676	0					
ANR	1068726	Argument	indent		1068676	2					
ANR	1068727	Identifier	indent		1068676	0					
ANR	1068728	ExpressionStatement	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"	2569:1:73492:73540	1068676	7	True				
ANR	1068729	CallExpression	"dprintf ( flag , ""%s~~~~~~~~~~~~~~~~~~~\\n"" , indent )"		1068676	0					
ANR	1068730	Callee	dprintf		1068676	0					
ANR	1068731	Identifier	dprintf		1068676	0					
ANR	1068732	ArgumentList	flag		1068676	1					
ANR	1068733	Argument	flag		1068676	0					
ANR	1068734	Identifier	flag		1068676	0					
ANR	1068735	Argument	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1068676	1					
ANR	1068736	PrimaryExpression	"""%s~~~~~~~~~~~~~~~~~~~\\n"""		1068676	0					
ANR	1068737	Argument	indent		1068676	2					
ANR	1068738	Identifier	indent		1068676	0					
ANR	1068739	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1068676	8					
ANR	1068740	ForInit	i = 0 ;	2570:6:73548:73553	1068676	0	True				
ANR	1068741	AssignmentExpression	i = 0		1068676	0		=			
ANR	1068742	Identifier	i		1068676	0					
ANR	1068743	PrimaryExpression	0		1068676	1					
ANR	1068744	Condition	i < nSock	2570:13:73555:73563	1068676	1	True				
ANR	1068745	RelationalExpression	i < nSock		1068676	0		<			
ANR	1068746	Identifier	i		1068676	0					
ANR	1068747	Identifier	nSock		1068676	1					
ANR	1068748	PostIncDecOperationExpression	i ++	2570:24:73566:73568	1068676	2	True				
ANR	1068749	Identifier	i		1068676	0					
ANR	1068750	IncDec	++		1068676	1					
ANR	1068751	CompoundStatement		20:29:588:588	1068676	3					
ANR	1068752	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		1068676	0					
ANR	1068753	Condition	( * sockTable ) [ i ] . iosock	2571:7:73580:73601	1068676	0	True				
ANR	1068754	MemberAccess	( * sockTable ) [ i ] . iosock		1068676	0					
ANR	1068755	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068756	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068757	UnaryOperator	*		1068676	0					
ANR	1068758	Identifier	sockTable		1068676	1					
ANR	1068759	Identifier	i		1068676	1					
ANR	1068760	Identifier	iosock		1068676	1					
ANR	1068761	CompoundStatement		21:32:622:622	1068676	1					
ANR	1068762	ExpressionStatement	"descrip1 = ""NULL"""	2572:3:73610:73627	1068676	0	True				
ANR	1068763	AssignmentExpression	"descrip1 = ""NULL"""		1068676	0		=			
ANR	1068764	Identifier	descrip1		1068676	0					
ANR	1068765	PrimaryExpression	"""NULL"""		1068676	1					
ANR	1068766	ExpressionStatement	descrip2 = descrip1	2573:3:73632:73651	1068676	1	True				
ANR	1068767	AssignmentExpression	descrip2 = descrip1		1068676	0		=			
ANR	1068768	Identifier	descrip2		1068676	0					
ANR	1068769	Identifier	descrip1		1068676	1					
ANR	1068770	IfStatement	if ( ( * sockTable ) [ i ] . iosock_descrip )		1068676	2					
ANR	1068771	Condition	( * sockTable ) [ i ] . iosock_descrip	2574:8:73661:73690	1068676	0	True				
ANR	1068772	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1068676	0					
ANR	1068773	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068774	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068775	UnaryOperator	*		1068676	0					
ANR	1068776	Identifier	sockTable		1068676	1					
ANR	1068777	Identifier	i		1068676	1					
ANR	1068778	Identifier	iosock_descrip		1068676	1					
ANR	1068779	ExpressionStatement	descrip1 = ( * sockTable ) [ i ] . iosock_descrip	2575:4:73698:73739	1068676	1	True				
ANR	1068780	AssignmentExpression	descrip1 = ( * sockTable ) [ i ] . iosock_descrip		1068676	0		=			
ANR	1068781	Identifier	descrip1		1068676	0					
ANR	1068782	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1068676	1					
ANR	1068783	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068784	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068785	UnaryOperator	*		1068676	0					
ANR	1068786	Identifier	sockTable		1068676	1					
ANR	1068787	Identifier	i		1068676	1					
ANR	1068788	Identifier	iosock_descrip		1068676	1					
ANR	1068789	IfStatement	if ( ( * sockTable ) [ i ] . handler_descrip )		1068676	3					
ANR	1068790	Condition	( * sockTable ) [ i ] . handler_descrip	2576:8:73749:73779	1068676	0	True				
ANR	1068791	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1068676	0					
ANR	1068792	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068793	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068794	UnaryOperator	*		1068676	0					
ANR	1068795	Identifier	sockTable		1068676	1					
ANR	1068796	Identifier	i		1068676	1					
ANR	1068797	Identifier	handler_descrip		1068676	1					
ANR	1068798	ExpressionStatement	descrip2 = ( * sockTable ) [ i ] . handler_descrip	2577:4:73787:73829	1068676	1	True				
ANR	1068799	AssignmentExpression	descrip2 = ( * sockTable ) [ i ] . handler_descrip		1068676	0		=			
ANR	1068800	Identifier	descrip2		1068676	0					
ANR	1068801	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1068676	1					
ANR	1068802	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068803	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068804	UnaryOperator	*		1068676	0					
ANR	1068805	Identifier	sockTable		1068676	1					
ANR	1068806	Identifier	i		1068676	1					
ANR	1068807	Identifier	handler_descrip		1068676	1					
ANR	1068808	ExpressionStatement	"dprintf ( flag , ""%s%d: %d %s %s\\n"" , indent , i , ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( ) , descrip1 , descrip2 )"	2578:3:73834:73956	1068676	4	True				
ANR	1068809	CallExpression	"dprintf ( flag , ""%s%d: %d %s %s\\n"" , indent , i , ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( ) , descrip1 , descrip2 )"		1068676	0					
ANR	1068810	Callee	dprintf		1068676	0					
ANR	1068811	Identifier	dprintf		1068676	0					
ANR	1068812	ArgumentList	flag		1068676	1					
ANR	1068813	Argument	flag		1068676	0					
ANR	1068814	Identifier	flag		1068676	0					
ANR	1068815	Argument	"""%s%d: %d %s %s\\n"""		1068676	1					
ANR	1068816	PrimaryExpression	"""%s%d: %d %s %s\\n"""		1068676	0					
ANR	1068817	Argument	indent		1068676	2					
ANR	1068818	Identifier	indent		1068676	0					
ANR	1068819	Argument	i		1068676	3					
ANR	1068820	Identifier	i		1068676	0					
ANR	1068821	Argument	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( )		1068676	4					
ANR	1068822	CallExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc ( )		1068676	0					
ANR	1068823	Callee	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		1068676	0					
ANR	1068824	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		1068676	0					
ANR	1068825	CastExpression	( Sock * ) ( * sockTable ) [ i ] . iosock		1068676	0					
ANR	1068826	CastTarget	Sock *		1068676	0					
ANR	1068827	MemberAccess	( * sockTable ) [ i ] . iosock		1068676	1					
ANR	1068828	ArrayIndexing	( * sockTable ) [ i ]		1068676	0					
ANR	1068829	UnaryOperationExpression	* sockTable		1068676	0					
ANR	1068830	UnaryOperator	*		1068676	0					
ANR	1068831	Identifier	sockTable		1068676	1					
ANR	1068832	Identifier	i		1068676	1					
ANR	1068833	Identifier	iosock		1068676	1					
ANR	1068834	Identifier	get_file_desc		1068676	1					
ANR	1068835	ArgumentList			1068676	1					
ANR	1068836	Argument	descrip1		1068676	5					
ANR	1068837	Identifier	descrip1		1068676	0					
ANR	1068838	Argument	descrip2		1068676	6					
ANR	1068839	Identifier	descrip2		1068676	0					
ANR	1068840	ExpressionStatement	"dprintf ( flag , ""\\n"" )"	2582:1:73966:73985	1068676	9	True				
ANR	1068841	CallExpression	"dprintf ( flag , ""\\n"" )"		1068676	0					
ANR	1068842	Callee	dprintf		1068676	0					
ANR	1068843	Identifier	dprintf		1068676	0					
ANR	1068844	ArgumentList	flag		1068676	1					
ANR	1068845	Argument	flag		1068676	0					
ANR	1068846	Identifier	flag		1068676	0					
ANR	1068847	Argument	"""\\n"""		1068676	1					
ANR	1068848	PrimaryExpression	"""\\n"""		1068676	0					
ANR	1068849	ReturnType	void		1068676	1					
ANR	1068850	Identifier	DaemonCore :: DumpSocketTable		1068676	2					
ANR	1068851	ParameterList	"int flag , const char * indent"		1068676	3					
ANR	1068852	Parameter	int flag	2550:33:72952:72959	1068676	0	True				
ANR	1068853	ParameterType	int		1068676	0					
ANR	1068854	Identifier	flag		1068676	1					
ANR	1068855	Parameter	const char * indent	2550:43:72962:72979	1068676	1	True				
ANR	1068856	ParameterType	const char *		1068676	0					
ANR	1068857	Identifier	indent		1068676	1					
ANR	1068858	CFGEntryNode	ENTRY		1068676		True				
ANR	1068859	CFGExitNode	EXIT		1068676		True				
ANR	1068860	Symbol	* * i		1068676						
ANR	1068861	Symbol	flag		1068676						
ANR	1068862	Symbol	NULL		1068676						
ANR	1068863	Symbol	* * * sockTable		1068676						
ANR	1068864	Symbol	indent		1068676						
ANR	1068865	Symbol	nSock		1068676						
ANR	1068866	Symbol	sockTable		1068676						
ANR	1068867	Symbol	DEFAULT_INDENT		1068676						
ANR	1068868	Symbol	i		1068676						
ANR	1068869	Symbol	DebugFlags		1068676						
ANR	1068870	Symbol	* * sockTable		1068676						
ANR	1068871	Symbol	( * sockTable ) [ i ] . handler_descrip		1068676						
ANR	1068872	Symbol	* i		1068676						
ANR	1068873	Symbol	( * sockTable ) [ i ] . iosock_descrip		1068676						
ANR	1068874	Symbol	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> get_file_desc		1068676						
ANR	1068875	Symbol	* sockTable		1068676						
ANR	1068876	Symbol	( * sockTable ) [ i ] . iosock		1068676						
ANR	1068877	Symbol	descrip1		1068676						
ANR	1068878	Symbol	descrip2		1068676						
ANR	1068879	Symbol	* ( * sockTable ) [ i ] . iosock		1068676						
ANR	1068880	Function	DaemonCore :: refreshDNS	2585:0:73990:74189							
ANR	1068881	FunctionDef	DaemonCore :: refreshDNS ()		1068880	0					
ANR	1068882	CompoundStatement		2586:25:74020:74189	1068880	0					
ANR	1068883	ExpressionStatement	res_init ( )	2589:1:74126:74136	1068880	0	True				
ANR	1068884	CallExpression	res_init ( )		1068880	0					
ANR	1068885	Callee	res_init		1068880	0					
ANR	1068886	Identifier	res_init		1068880	0					
ANR	1068887	ArgumentList			1068880	1					
ANR	1068888	ExpressionStatement	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS ( )	2592:1:74147:74187	1068880	1	True				
ANR	1068889	CallExpression	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS ( )		1068880	0					
ANR	1068890	Callee	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS		1068880	0					
ANR	1068891	PtrMemberAccess	getSecMan ( ) -> getIpVerify ( ) -> refreshDNS		1068880	0					
ANR	1068892	CallExpression	getSecMan ( ) -> getIpVerify ( )		1068880	0					
ANR	1068893	Callee	getSecMan ( ) -> getIpVerify		1068880	0					
ANR	1068894	PtrMemberAccess	getSecMan ( ) -> getIpVerify		1068880	0					
ANR	1068895	CallExpression	getSecMan ( )		1068880	0					
ANR	1068896	Callee	getSecMan		1068880	0					
ANR	1068897	Identifier	getSecMan		1068880	0					
ANR	1068898	ArgumentList			1068880	1					
ANR	1068899	Identifier	getIpVerify		1068880	1					
ANR	1068900	ArgumentList			1068880	1					
ANR	1068901	Identifier	refreshDNS		1068880	1					
ANR	1068902	ArgumentList			1068880	1					
ANR	1068903	ReturnType	void		1068880	1					
ANR	1068904	Identifier	DaemonCore :: refreshDNS		1068880	2					
ANR	1068905	ParameterList			1068880	3					
ANR	1068906	CFGEntryNode	ENTRY		1068880		True				
ANR	1068907	CFGExitNode	EXIT		1068880		True				
ANR	1068908	Symbol	* getSecMan		1068880						
ANR	1068909	Symbol	getSecMan ( ) -> getIpVerify		1068880						
ANR	1068910	Symbol	getSecMan		1068880						
ANR	1068911	ClassDef	DCThreadState	2595:0:74192:74411							
ANR	1068912	Function	DCThreadState	2597:1:74241:74313							
ANR	1068913	FunctionDef	DCThreadState (int tid)		1068912	0					
ANR	1068914	CompoundStatement		2598:2:74267:74313	1068912	0					
ANR	1068915	ExpressionStatement	m_tid = tid	2598:0:74268:74277	1068912	0	True				
ANR	1068916	AssignmentExpression	m_tid = tid		1068912	0		=			
ANR	1068917	Identifier	m_tid		1068912	0					
ANR	1068918	Identifier	tid		1068912	1					
ANR	1068919	ExpressionStatement	m_dataptr = NULL	2598:11:74279:74293	1068912	1	True				
ANR	1068920	AssignmentExpression	m_dataptr = NULL		1068912	0		=			
ANR	1068921	Identifier	m_dataptr		1068912	0					
ANR	1068922	Identifier	NULL		1068912	1					
ANR	1068923	ExpressionStatement	m_regdataptr = NULL	2598:27:74295:74312	1068912	2	True				
ANR	1068924	AssignmentExpression	m_regdataptr = NULL		1068912	0		=			
ANR	1068925	Identifier	m_regdataptr		1068912	0					
ANR	1068926	Identifier	NULL		1068912	1					
ANR	1068927	Identifier	DCThreadState		1068912	1					
ANR	1068928	ParameterList	int tid		1068912	2					
ANR	1068929	Parameter	int tid	2597:15:74255:74261	1068912	0	True				
ANR	1068930	ParameterType	int		1068912	0					
ANR	1068931	Identifier	tid		1068912	1					
ANR	1068932	CFGEntryNode	ENTRY		1068912		True				
ANR	1068933	CFGExitNode	EXIT		1068912		True				
ANR	1068934	Symbol	m_tid		1068912						
ANR	1068935	Symbol	NULL		1068912						
ANR	1068936	Symbol	m_regdataptr		1068912						
ANR	1068937	Symbol	m_dataptr		1068912						
ANR	1068938	Symbol	tid		1068912						
ANR	1068939	Function	get_tid	2599:1:74316:74346							
ANR	1068940	FunctionDef	get_tid ()		1068939	1					
ANR	1068941	CompoundStatement		2599:15:74330:74346	1068939	0					
ANR	1068942	ReturnStatement	return m_tid ;	2599:1:74332:74344	1068939	0	True				
ANR	1068943	Identifier	m_tid		1068939	0					
ANR	1068944	ReturnType	int		1068939	1					
ANR	1068945	Identifier	get_tid		1068939	2					
ANR	1068946	ParameterList			1068939	3					
ANR	1068947	CFGEntryNode	ENTRY		1068939		True				
ANR	1068948	CFGExitNode	EXIT		1068939		True				
ANR	1068949	Symbol	m_tid		1068939						
ANR	1068950	DeclStmt									
ANR	1068951	Decl							void	void * *	m_dataptr
ANR	1068952	DeclStmt									
ANR	1068953	Decl							void	void * *	m_regdataptr
ANR	1068954	DeclStmt									
ANR	1068955	Decl							int	int	m_tid
ANR	1068956	Function	DaemonCore :: thread_switch_callback	2606:0:74415:76465							
ANR	1068957	FunctionDef	DaemonCore :: thread_switch_callback (void * & incoming_contextVP)		1068956	0					
ANR	1068958	CompoundStatement		2608:0:74484:76465	1068956	0					
ANR	1068959	Statement	static	2609:1:74487:74492	1068956	0	True				
ANR	1068960	IdentifierDeclStatement	int last_tid = 1 ;	2609:8:74494:74510	1068956	1	True				
ANR	1068961	IdentifierDecl	last_tid = 1		1068956	0					
ANR	1068962	IdentifierDeclType	int		1068956	0					
ANR	1068963	Identifier	last_tid		1068956	1					
ANR	1068964	AssignmentExpression	last_tid = 1		1068956	2		=			
ANR	1068965	Identifier	last_tid		1068956	0					
ANR	1068966	PrimaryExpression	1		1068956	1					
ANR	1068967	IdentifierDeclStatement	DCThreadState * outgoing_context = NULL ;	2610:1:74544:74582	1068956	2	True				
ANR	1068968	IdentifierDecl	* outgoing_context = NULL		1068956	0					
ANR	1068969	IdentifierDeclType	DCThreadState *		1068956	0					
ANR	1068970	Identifier	outgoing_context		1068956	1					
ANR	1068971	AssignmentExpression	* outgoing_context = NULL		1068956	2		=			
ANR	1068972	Identifier	NULL		1068956	0					
ANR	1068973	Identifier	NULL		1068956	1					
ANR	1068974	IdentifierDeclStatement	DCThreadState * incoming_context = ( DCThreadState * ) incoming_contextVP ;	2611:1:74585:74655	1068956	3	True				
ANR	1068975	IdentifierDecl	* incoming_context = ( DCThreadState * ) incoming_contextVP		1068956	0					
ANR	1068976	IdentifierDeclType	DCThreadState *		1068956	0					
ANR	1068977	Identifier	incoming_context		1068956	1					
ANR	1068978	AssignmentExpression	* incoming_context = ( DCThreadState * ) incoming_contextVP		1068956	2		=			
ANR	1068979	Identifier	incoming_context		1068956	0					
ANR	1068980	CastExpression	( DCThreadState * ) incoming_contextVP		1068956	1					
ANR	1068981	CastTarget	DCThreadState *		1068956	0					
ANR	1068982	Identifier	incoming_contextVP		1068956	1					
ANR	1068983	IdentifierDeclStatement	int current_tid = CondorThreads :: get_tid ( ) ;	2612:1:74658:74700	1068956	4	True				
ANR	1068984	IdentifierDecl	current_tid = CondorThreads :: get_tid ( )		1068956	0					
ANR	1068985	IdentifierDeclType	int		1068956	0					
ANR	1068986	Identifier	current_tid		1068956	1					
ANR	1068987	AssignmentExpression	current_tid = CondorThreads :: get_tid ( )		1068956	2		=			
ANR	1068988	Identifier	current_tid		1068956	0					
ANR	1068989	CallExpression	CondorThreads :: get_tid ( )		1068956	1					
ANR	1068990	Callee	CondorThreads :: get_tid		1068956	0					
ANR	1068991	Identifier	CondorThreads :: get_tid		1068956	0					
ANR	1068992	ArgumentList			1068956	1					
ANR	1068993	ExpressionStatement	"dprintf ( D_THREADS , ""DaemonCore context switch from tid %d to %d\\n"" , last_tid , current_tid )"	2618:1:74871:74963	1068956	5	True				
ANR	1068994	CallExpression	"dprintf ( D_THREADS , ""DaemonCore context switch from tid %d to %d\\n"" , last_tid , current_tid )"		1068956	0					
ANR	1068995	Callee	dprintf		1068956	0					
ANR	1068996	Identifier	dprintf		1068956	0					
ANR	1068997	ArgumentList	D_THREADS		1068956	1					
ANR	1068998	Argument	D_THREADS		1068956	0					
ANR	1068999	Identifier	D_THREADS		1068956	0					
ANR	1069000	Argument	"""DaemonCore context switch from tid %d to %d\\n"""		1068956	1					
ANR	1069001	PrimaryExpression	"""DaemonCore context switch from tid %d to %d\\n"""		1068956	0					
ANR	1069002	Argument	last_tid		1068956	2					
ANR	1069003	Identifier	last_tid		1068956	0					
ANR	1069004	Argument	current_tid		1068956	3					
ANR	1069005	Identifier	current_tid		1068956	0					
ANR	1069006	IfStatement	if ( ! incoming_context )		1068956	6					
ANR	1069007	Condition	! incoming_context	2621:5:74971:74987	1068956	0	True				
ANR	1069008	UnaryOperationExpression	! incoming_context		1068956	0					
ANR	1069009	UnaryOperator	!		1068956	0					
ANR	1069010	Identifier	incoming_context		1068956	1					
ANR	1069011	CompoundStatement		14:24:505:505	1068956	1					
ANR	1069012	ExpressionStatement	incoming_context = new DCThreadState ( current_tid )	2625:2:75137:75186	1068956	0	True				
ANR	1069013	AssignmentExpression	incoming_context = new DCThreadState ( current_tid )		1068956	0		=			
ANR	1069014	Identifier	incoming_context		1068956	0					
ANR	1069015	Identifier	current_tid		1068956	1					
ANR	1069016	ExpressionStatement	ASSERT ( incoming_context )	2626:2:75190:75214	1068956	1	True				
ANR	1069017	CallExpression	ASSERT ( incoming_context )		1068956	0					
ANR	1069018	Callee	ASSERT		1068956	0					
ANR	1069019	Identifier	ASSERT		1068956	0					
ANR	1069020	ArgumentList	incoming_context		1068956	1					
ANR	1069021	Argument	incoming_context		1068956	0					
ANR	1069022	Identifier	incoming_context		1068956	0					
ANR	1069023	ExpressionStatement	incoming_contextVP = ( void * ) incoming_context	2627:2:75218:75264	1068956	2	True				
ANR	1069024	AssignmentExpression	incoming_contextVP = ( void * ) incoming_context		1068956	0		=			
ANR	1069025	Identifier	incoming_contextVP		1068956	0					
ANR	1069026	CastExpression	( void * ) incoming_context		1068956	1					
ANR	1069027	CastTarget	void *		1068956	0					
ANR	1069028	Identifier	incoming_context		1068956	1					
ANR	1069029	IdentifierDeclStatement	WorkerThreadPtr_t context = CondorThreads :: get_handle ( last_tid ) ;	2638:1:75685:75748	1068956	7	True				
ANR	1069030	IdentifierDecl	context = CondorThreads :: get_handle ( last_tid )		1068956	0					
ANR	1069031	IdentifierDeclType	WorkerThreadPtr_t		1068956	0					
ANR	1069032	Identifier	context		1068956	1					
ANR	1069033	AssignmentExpression	context = CondorThreads :: get_handle ( last_tid )		1068956	2		=			
ANR	1069034	Identifier	context		1068956	0					
ANR	1069035	CallExpression	CondorThreads :: get_handle ( last_tid )		1068956	1					
ANR	1069036	Callee	CondorThreads :: get_handle		1068956	0					
ANR	1069037	Identifier	CondorThreads :: get_handle		1068956	0					
ANR	1069038	ArgumentList	last_tid		1068956	1					
ANR	1069039	Argument	last_tid		1068956	0					
ANR	1069040	Identifier	last_tid		1068956	0					
ANR	1069041	IfStatement	if ( ! context . is_null ( ) )		1068956	8					
ANR	1069042	Condition	! context . is_null ( )	2639:6:75756:75773	1068956	0	True				
ANR	1069043	UnaryOperationExpression	! context . is_null ( )		1068956	0					
ANR	1069044	UnaryOperator	!		1068956	0					
ANR	1069045	CallExpression	context . is_null ( )		1068956	1					
ANR	1069046	Callee	context . is_null		1068956	0					
ANR	1069047	MemberAccess	context . is_null		1068956	0					
ANR	1069048	Identifier	context		1068956	0					
ANR	1069049	Identifier	is_null		1068956	1					
ANR	1069050	ArgumentList			1068956	1					
ANR	1069051	CompoundStatement		32:27:1292:1292	1068956	1					
ANR	1069052	ExpressionStatement	outgoing_context = ( DCThreadState * ) context -> user_pointer_	2640:2:75781:75840	1068956	0	True				
ANR	1069053	AssignmentExpression	outgoing_context = ( DCThreadState * ) context -> user_pointer_		1068956	0		=			
ANR	1069054	Identifier	outgoing_context		1068956	0					
ANR	1069055	CastExpression	( DCThreadState * ) context -> user_pointer_		1068956	1					
ANR	1069056	CastTarget	DCThreadState *		1068956	0					
ANR	1069057	PtrMemberAccess	context -> user_pointer_		1068956	1					
ANR	1069058	Identifier	context		1068956	0					
ANR	1069059	Identifier	user_pointer_		1068956	1					
ANR	1069060	IfStatement	if ( ! outgoing_context )		1068956	1					
ANR	1069061	Condition	! outgoing_context	2641:6:75848:75864	1068956	0	True				
ANR	1069062	UnaryOperationExpression	! outgoing_context		1068956	0					
ANR	1069063	UnaryOperator	!		1068956	0					
ANR	1069064	Identifier	outgoing_context		1068956	1					
ANR	1069065	CompoundStatement		34:25:1382:1382	1068956	1					
ANR	1069066	ExpressionStatement	"EXCEPT ( ""ERROR: daemonCore - no thread context for tid %d\\n"" , last_tid )"	2642:4:75873:75949	1068956	0	True				
ANR	1069067	CallExpression	"EXCEPT ( ""ERROR: daemonCore - no thread context for tid %d\\n"" , last_tid )"		1068956	0					
ANR	1069068	Callee	EXCEPT		1068956	0					
ANR	1069069	Identifier	EXCEPT		1068956	0					
ANR	1069070	ArgumentList	"""ERROR: daemonCore - no thread context for tid %d\\n"""		1068956	1					
ANR	1069071	Argument	"""ERROR: daemonCore - no thread context for tid %d\\n"""		1068956	0					
ANR	1069072	PrimaryExpression	"""ERROR: daemonCore - no thread context for tid %d\\n"""		1068956	0					
ANR	1069073	Argument	last_tid		1068956	1					
ANR	1069074	Identifier	last_tid		1068956	0					
ANR	1069075	IfStatement	if ( outgoing_context )		1068956	9					
ANR	1069076	Condition	outgoing_context	2648:6:76021:76036	1068956	0	True				
ANR	1069077	Identifier	outgoing_context		1068956	0					
ANR	1069078	CompoundStatement		41:25:1555:1555	1068956	1					
ANR	1069079	ExpressionStatement	ASSERT ( outgoing_context -> get_tid ( ) == last_tid )	2649:2:76044:76091	1068956	0	True				
ANR	1069080	CallExpression	ASSERT ( outgoing_context -> get_tid ( ) == last_tid )		1068956	0					
ANR	1069081	Callee	ASSERT		1068956	0					
ANR	1069082	Identifier	ASSERT		1068956	0					
ANR	1069083	ArgumentList	outgoing_context -> get_tid ( ) == last_tid		1068956	1					
ANR	1069084	Argument	outgoing_context -> get_tid ( ) == last_tid		1068956	0					
ANR	1069085	EqualityExpression	outgoing_context -> get_tid ( ) == last_tid		1068956	0		==			
ANR	1069086	CallExpression	outgoing_context -> get_tid ( )		1068956	0					
ANR	1069087	Callee	outgoing_context -> get_tid		1068956	0					
ANR	1069088	PtrMemberAccess	outgoing_context -> get_tid		1068956	0					
ANR	1069089	Identifier	outgoing_context		1068956	0					
ANR	1069090	Identifier	get_tid		1068956	1					
ANR	1069091	ArgumentList			1068956	1					
ANR	1069092	Identifier	last_tid		1068956	1					
ANR	1069093	ExpressionStatement	outgoing_context -> m_dataptr = curr_dataptr	2650:2:76095:76137	1068956	1	True				
ANR	1069094	AssignmentExpression	outgoing_context -> m_dataptr = curr_dataptr		1068956	0		=			
ANR	1069095	PtrMemberAccess	outgoing_context -> m_dataptr		1068956	0					
ANR	1069096	Identifier	outgoing_context		1068956	0					
ANR	1069097	Identifier	m_dataptr		1068956	1					
ANR	1069098	Identifier	curr_dataptr		1068956	1					
ANR	1069099	ExpressionStatement	outgoing_context -> m_regdataptr = curr_regdataptr	2651:2:76141:76189	1068956	2	True				
ANR	1069100	AssignmentExpression	outgoing_context -> m_regdataptr = curr_regdataptr		1068956	0		=			
ANR	1069101	PtrMemberAccess	outgoing_context -> m_regdataptr		1068956	0					
ANR	1069102	Identifier	outgoing_context		1068956	0					
ANR	1069103	Identifier	m_regdataptr		1068956	1					
ANR	1069104	Identifier	curr_regdataptr		1068956	1					
ANR	1069105	ExpressionStatement	ASSERT ( incoming_context -> get_tid ( ) == current_tid )	2655:1:76246:76296	1068956	10	True				
ANR	1069106	CallExpression	ASSERT ( incoming_context -> get_tid ( ) == current_tid )		1068956	0					
ANR	1069107	Callee	ASSERT		1068956	0					
ANR	1069108	Identifier	ASSERT		1068956	0					
ANR	1069109	ArgumentList	incoming_context -> get_tid ( ) == current_tid		1068956	1					
ANR	1069110	Argument	incoming_context -> get_tid ( ) == current_tid		1068956	0					
ANR	1069111	EqualityExpression	incoming_context -> get_tid ( ) == current_tid		1068956	0		==			
ANR	1069112	CallExpression	incoming_context -> get_tid ( )		1068956	0					
ANR	1069113	Callee	incoming_context -> get_tid		1068956	0					
ANR	1069114	PtrMemberAccess	incoming_context -> get_tid		1068956	0					
ANR	1069115	Identifier	incoming_context		1068956	0					
ANR	1069116	Identifier	get_tid		1068956	1					
ANR	1069117	ArgumentList			1068956	1					
ANR	1069118	Identifier	current_tid		1068956	1					
ANR	1069119	ExpressionStatement	curr_dataptr = incoming_context -> m_dataptr	2656:1:76299:76341	1068956	11	True				
ANR	1069120	AssignmentExpression	curr_dataptr = incoming_context -> m_dataptr		1068956	0		=			
ANR	1069121	Identifier	curr_dataptr		1068956	0					
ANR	1069122	PtrMemberAccess	incoming_context -> m_dataptr		1068956	1					
ANR	1069123	Identifier	incoming_context		1068956	0					
ANR	1069124	Identifier	m_dataptr		1068956	1					
ANR	1069125	ExpressionStatement	curr_regdataptr = incoming_context -> m_regdataptr	2657:1:76344:76392	1068956	12	True				
ANR	1069126	AssignmentExpression	curr_regdataptr = incoming_context -> m_regdataptr		1068956	0		=			
ANR	1069127	Identifier	curr_regdataptr		1068956	0					
ANR	1069128	PtrMemberAccess	incoming_context -> m_regdataptr		1068956	1					
ANR	1069129	Identifier	incoming_context		1068956	0					
ANR	1069130	Identifier	m_regdataptr		1068956	1					
ANR	1069131	ExpressionStatement	last_tid = current_tid	2660:1:76441:76463	1068956	13	True				
ANR	1069132	AssignmentExpression	last_tid = current_tid		1068956	0		=			
ANR	1069133	Identifier	last_tid		1068956	0					
ANR	1069134	Identifier	current_tid		1068956	1					
ANR	1069135	ReturnType	void		1068956	1					
ANR	1069136	Identifier	DaemonCore :: thread_switch_callback		1068956	2					
ANR	1069137	ParameterList	void * & incoming_contextVP		1068956	3					
ANR	1069138	Parameter	void * & incoming_contextVP	2607:35:74456:74481	1068956	0	True				
ANR	1069139	ParameterType	void * &		1068956	0					
ANR	1069140	Identifier	incoming_contextVP		1068956	1					
ANR	1069141	CFGEntryNode	ENTRY		1068956		True				
ANR	1069142	CFGExitNode	EXIT		1068956		True				
ANR	1069143	Symbol	CondorThreads :: get_tid		1068956						
ANR	1069144	Symbol	curr_regdataptr		1068956						
ANR	1069145	Symbol	incoming_context -> m_regdataptr		1068956						
ANR	1069146	Symbol	NULL		1068956						
ANR	1069147	Symbol	context -> user_pointer_		1068956						
ANR	1069148	Symbol	incoming_context -> m_dataptr		1068956						
ANR	1069149	Symbol	* incoming_context		1068956						
ANR	1069150	Symbol	D_THREADS		1068956						
ANR	1069151	Symbol	* outgoing_context		1068956						
ANR	1069152	Symbol	incoming_context		1068956						
ANR	1069153	Symbol	curr_dataptr		1068956						
ANR	1069154	Symbol	last_tid		1068956						
ANR	1069155	Symbol	* context		1068956						
ANR	1069156	Symbol	outgoing_context -> m_dataptr		1068956						
ANR	1069157	Symbol	context . is_null		1068956						
ANR	1069158	Symbol	current_tid		1068956						
ANR	1069159	Symbol	outgoing_context		1068956						
ANR	1069160	Symbol	outgoing_context -> m_regdataptr		1068956						
ANR	1069161	Symbol	incoming_contextVP		1068956						
ANR	1069162	Symbol	context		1068956						
ANR	1069163	Symbol	outgoing_context -> get_tid		1068956						
ANR	1069164	Symbol	CondorThreads :: get_handle		1068956						
ANR	1069165	Symbol	incoming_context -> get_tid		1068956						
ANR	1069166	Function	DaemonCore :: reconfig	2663:0:76468:84038							
ANR	1069167	FunctionDef	DaemonCore :: reconfig ()		1069166	0					
ANR	1069168	CompoundStatement		2664:27:76500:84038	1069166	0					
ANR	1069169	ExpressionStatement	ClassAd :: Reconfig ( )	2674:1:76867:76886	1069166	0	True				
ANR	1069170	CallExpression	ClassAd :: Reconfig ( )		1069166	0					
ANR	1069171	Callee	ClassAd :: Reconfig		1069166	0					
ANR	1069172	Identifier	ClassAd :: Reconfig		1069166	0					
ANR	1069173	ArgumentList			1069166	1					
ANR	1069174	ExpressionStatement	dc_stats . Reconfig ( )	2677:4:76974:76993	1069166	1	True				
ANR	1069175	CallExpression	dc_stats . Reconfig ( )		1069166	0					
ANR	1069176	Callee	dc_stats . Reconfig		1069166	0					
ANR	1069177	MemberAccess	dc_stats . Reconfig		1069166	0					
ANR	1069178	Identifier	dc_stats		1069166	0					
ANR	1069179	Identifier	Reconfig		1069166	1					
ANR	1069180	ArgumentList			1069166	1					
ANR	1069181	ExpressionStatement	m_dirty_sinful = true	2679:1:76997:77018	1069166	2	True				
ANR	1069182	AssignmentExpression	m_dirty_sinful = true		1069166	0		=			
ANR	1069183	Identifier	m_dirty_sinful		1069166	0					
ANR	1069184	Identifier	true		1069166	1					
ANR	1069185	IdentifierDeclStatement	SecMan * secman = getSecMan ( ) ;	2681:1:77071:77099	1069166	3	True				
ANR	1069186	IdentifierDecl	* secman = getSecMan ( )		1069166	0					
ANR	1069187	IdentifierDeclType	SecMan *		1069166	0					
ANR	1069188	Identifier	secman		1069166	1					
ANR	1069189	AssignmentExpression	* secman = getSecMan ( )		1069166	2		=			
ANR	1069190	Identifier	secman		1069166	0					
ANR	1069191	CallExpression	getSecMan ( )		1069166	1					
ANR	1069192	Callee	getSecMan		1069166	0					
ANR	1069193	Identifier	getSecMan		1069166	0					
ANR	1069194	ArgumentList			1069166	1					
ANR	1069195	ExpressionStatement	secman -> reconfig ( )	2682:1:77102:77120	1069166	4	True				
ANR	1069196	CallExpression	secman -> reconfig ( )		1069166	0					
ANR	1069197	Callee	secman -> reconfig		1069166	0					
ANR	1069198	PtrMemberAccess	secman -> reconfig		1069166	0					
ANR	1069199	Identifier	secman		1069166	0					
ANR	1069200	Identifier	reconfig		1069166	1					
ANR	1069201	ArgumentList			1069166	1					
ANR	1069202	IdentifierDeclStatement	"int dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 ) ;"	2685:1:77171:77259	1069166	5	True				
ANR	1069203	IdentifierDecl	"dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		1069166	0					
ANR	1069204	IdentifierDeclType	int		1069166	0					
ANR	1069205	Identifier	dns_interval		1069166	1					
ANR	1069206	AssignmentExpression	"dns_interval = param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		1069166	2		=			
ANR	1069207	Identifier	dns_interval		1069166	0					
ANR	1069208	CallExpression	"param_integer ( ""DNS_CACHE_REFRESH"" , 8 * 60 * 60 + ( rand ( ) % 600 ) , 0 )"		1069166	1					
ANR	1069209	Callee	param_integer		1069166	0					
ANR	1069210	Identifier	param_integer		1069166	0					
ANR	1069211	ArgumentList	"""DNS_CACHE_REFRESH"""		1069166	1					
ANR	1069212	Argument	"""DNS_CACHE_REFRESH"""		1069166	0					
ANR	1069213	PrimaryExpression	"""DNS_CACHE_REFRESH"""		1069166	0					
ANR	1069214	Argument	8 * 60 * 60 + ( rand ( ) % 600 )		1069166	1					
ANR	1069215	AdditiveExpression	8 * 60 * 60 + ( rand ( ) % 600 )		1069166	0		+			
ANR	1069216	MultiplicativeExpression	8 * 60 * 60		1069166	0		*			
ANR	1069217	PrimaryExpression	8		1069166	0					
ANR	1069218	MultiplicativeExpression	60 * 60		1069166	1		*			
ANR	1069219	PrimaryExpression	60		1069166	0					
ANR	1069220	PrimaryExpression	60		1069166	1					
ANR	1069221	MultiplicativeExpression	rand ( ) % 600		1069166	1		%			
ANR	1069222	CallExpression	rand ( )		1069166	0					
ANR	1069223	Callee	rand		1069166	0					
ANR	1069224	Identifier	rand		1069166	0					
ANR	1069225	ArgumentList			1069166	1					
ANR	1069226	PrimaryExpression	600		1069166	1					
ANR	1069227	Argument	0		1069166	2					
ANR	1069228	PrimaryExpression	0		1069166	0					
ANR	1069229	IfStatement	if ( dns_interval > 0 )		1069166	6					
ANR	1069230	Condition	dns_interval > 0	2687:5:77266:77281	1069166	0	True				
ANR	1069231	RelationalExpression	dns_interval > 0		1069166	0		>			
ANR	1069232	Identifier	dns_interval		1069166	0					
ANR	1069233	PrimaryExpression	0		1069166	1					
ANR	1069234	CompoundStatement		24:24:784:784	1069166	1					
ANR	1069235	IfStatement	if ( m_refresh_dns_timer < 0 )		1069166	0					
ANR	1069236	Condition	m_refresh_dns_timer < 0	2688:6:77293:77315	1069166	0	True				
ANR	1069237	RelationalExpression	m_refresh_dns_timer < 0		1069166	0		<			
ANR	1069238	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069239	PrimaryExpression	0		1069166	1					
ANR	1069240	CompoundStatement		25:32:818:818	1069166	1					
ANR	1069241	ExpressionStatement	"m_refresh_dns_timer = Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"	2689:3:77324:77492	1069166	0	True				
ANR	1069242	AssignmentExpression	"m_refresh_dns_timer = Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"		1069166	0		=			
ANR	1069243	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069244	CallExpression	"Register_Timer ( dns_interval , dns_interval , ( TimerHandlercpp ) & DaemonCore :: refreshDNS , ""DaemonCore::refreshDNS()"" , daemonCore )"		1069166	1					
ANR	1069245	Callee	Register_Timer		1069166	0					
ANR	1069246	Identifier	Register_Timer		1069166	0					
ANR	1069247	ArgumentList	dns_interval		1069166	1					
ANR	1069248	Argument	dns_interval		1069166	0					
ANR	1069249	Identifier	dns_interval		1069166	0					
ANR	1069250	Argument	dns_interval		1069166	1					
ANR	1069251	Identifier	dns_interval		1069166	0					
ANR	1069252	Argument	( TimerHandlercpp ) & DaemonCore :: refreshDNS		1069166	2					
ANR	1069253	CastExpression	( TimerHandlercpp ) & DaemonCore :: refreshDNS		1069166	0					
ANR	1069254	CastTarget	TimerHandlercpp		1069166	0					
ANR	1069255	UnaryOperationExpression	& DaemonCore :: refreshDNS		1069166	1					
ANR	1069256	UnaryOperator	&		1069166	0					
ANR	1069257	Identifier	DaemonCore :: refreshDNS		1069166	1					
ANR	1069258	Argument	"""DaemonCore::refreshDNS()"""		1069166	3					
ANR	1069259	PrimaryExpression	"""DaemonCore::refreshDNS()"""		1069166	0					
ANR	1069260	Argument	daemonCore		1069166	4					
ANR	1069261	Identifier	daemonCore		1069166	0					
ANR	1069262	ElseStatement	else		1069166	0					
ANR	1069263	CompoundStatement		30:9:1002:1002	1069166	0					
ANR	1069264	ExpressionStatement	"Reset_Timer ( m_refresh_dns_timer , dns_interval , dns_interval )"	2694:3:77508:77570	1069166	0	True				
ANR	1069265	CallExpression	"Reset_Timer ( m_refresh_dns_timer , dns_interval , dns_interval )"		1069166	0					
ANR	1069266	Callee	Reset_Timer		1069166	0					
ANR	1069267	Identifier	Reset_Timer		1069166	0					
ANR	1069268	ArgumentList	m_refresh_dns_timer		1069166	1					
ANR	1069269	Argument	m_refresh_dns_timer		1069166	0					
ANR	1069270	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069271	Argument	dns_interval		1069166	1					
ANR	1069272	Identifier	dns_interval		1069166	0					
ANR	1069273	Argument	dns_interval		1069166	2					
ANR	1069274	Identifier	dns_interval		1069166	0					
ANR	1069275	ElseStatement	else		1069166	0					
ANR	1069276	IfStatement	if ( m_refresh_dns_timer != - 1 )		1069166	0					
ANR	1069277	Condition	m_refresh_dns_timer != - 1	2697:10:77589:77613	1069166	0	True				
ANR	1069278	EqualityExpression	m_refresh_dns_timer != - 1		1069166	0		!=			
ANR	1069279	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069280	UnaryOperationExpression	- 1		1069166	1					
ANR	1069281	UnaryOperator	-		1069166	0					
ANR	1069282	PrimaryExpression	1		1069166	1					
ANR	1069283	CompoundStatement		34:38:1116:1116	1069166	1					
ANR	1069284	ExpressionStatement	daemonCore -> Cancel_Timer ( m_refresh_dns_timer )	2698:2:77621:77668	1069166	0	True				
ANR	1069285	CallExpression	daemonCore -> Cancel_Timer ( m_refresh_dns_timer )		1069166	0					
ANR	1069286	Callee	daemonCore -> Cancel_Timer		1069166	0					
ANR	1069287	PtrMemberAccess	daemonCore -> Cancel_Timer		1069166	0					
ANR	1069288	Identifier	daemonCore		1069166	0					
ANR	1069289	Identifier	Cancel_Timer		1069166	1					
ANR	1069290	ArgumentList	m_refresh_dns_timer		1069166	1					
ANR	1069291	Argument	m_refresh_dns_timer		1069166	0					
ANR	1069292	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069293	ExpressionStatement	m_refresh_dns_timer = - 1	2699:2:77672:77696	1069166	1	True				
ANR	1069294	AssignmentExpression	m_refresh_dns_timer = - 1		1069166	0		=			
ANR	1069295	Identifier	m_refresh_dns_timer		1069166	0					
ANR	1069296	UnaryOperationExpression	- 1		1069166	1					
ANR	1069297	UnaryOperator	-		1069166	0					
ANR	1069298	PrimaryExpression	1		1069166	1					
ANR	1069299	ExpressionStatement	"maxPipeBuffer = param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"	2704:1:77799:77854	1069166	7	True				
ANR	1069300	AssignmentExpression	"maxPipeBuffer = param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"		1069166	0		=			
ANR	1069301	Identifier	maxPipeBuffer		1069166	0					
ANR	1069302	CallExpression	"param_integer ( ""PIPE_BUFFER_MAX"" , 10240 )"		1069166	1					
ANR	1069303	Callee	param_integer		1069166	0					
ANR	1069304	Identifier	param_integer		1069166	0					
ANR	1069305	ArgumentList	"""PIPE_BUFFER_MAX"""		1069166	1					
ANR	1069306	Argument	"""PIPE_BUFFER_MAX"""		1069166	0					
ANR	1069307	PrimaryExpression	"""PIPE_BUFFER_MAX"""		1069166	0					
ANR	1069308	Argument	10240		1069166	1					
ANR	1069309	PrimaryExpression	10240		1069166	0					
ANR	1069310	ExpressionStatement	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"	2706:4:77861:77926	1069166	8	True				
ANR	1069311	AssignmentExpression	"m_iMaxAcceptsPerCycle = param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		1069166	0		=			
ANR	1069312	Identifier	m_iMaxAcceptsPerCycle		1069166	0					
ANR	1069313	CallExpression	"param_integer ( ""MAX_ACCEPTS_PER_CYCLE"" , 8 )"		1069166	1					
ANR	1069314	Callee	param_integer		1069166	0					
ANR	1069315	Identifier	param_integer		1069166	0					
ANR	1069316	ArgumentList	"""MAX_ACCEPTS_PER_CYCLE"""		1069166	1					
ANR	1069317	Argument	"""MAX_ACCEPTS_PER_CYCLE"""		1069166	0					
ANR	1069318	PrimaryExpression	"""MAX_ACCEPTS_PER_CYCLE"""		1069166	0					
ANR	1069319	Argument	8		1069166	1					
ANR	1069320	PrimaryExpression	8		1069166	0					
ANR	1069321	IfStatement	if ( m_iMaxAcceptsPerCycle != 1 )		1069166	9					
ANR	1069322	Condition	m_iMaxAcceptsPerCycle != 1	2707:8:77936:77961	1069166	0	True				
ANR	1069323	EqualityExpression	m_iMaxAcceptsPerCycle != 1		1069166	0		!=			
ANR	1069324	Identifier	m_iMaxAcceptsPerCycle		1069166	0					
ANR	1069325	PrimaryExpression	1		1069166	1					
ANR	1069326	CompoundStatement		44:37:1464:1464	1069166	1					
ANR	1069327	ExpressionStatement	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"	2708:8:77975:78057	1069166	0	True				
ANR	1069328	CallExpression	"dprintf ( D_ALWAYS , ""Setting maximum accepts per cycle %d.\\n"" , m_iMaxAcceptsPerCycle )"		1069166	0					
ANR	1069329	Callee	dprintf		1069166	0					
ANR	1069330	Identifier	dprintf		1069166	0					
ANR	1069331	ArgumentList	D_ALWAYS		1069166	1					
ANR	1069332	Argument	D_ALWAYS		1069166	0					
ANR	1069333	Identifier	D_ALWAYS		1069166	0					
ANR	1069334	Argument	"""Setting maximum accepts per cycle %d.\\n"""		1069166	1					
ANR	1069335	PrimaryExpression	"""Setting maximum accepts per cycle %d.\\n"""		1069166	0					
ANR	1069336	Argument	m_iMaxAcceptsPerCycle		1069166	2					
ANR	1069337	Identifier	m_iMaxAcceptsPerCycle		1069166	0					
ANR	1069338	ExpressionStatement	initCollectorList ( )	2712:1:78122:78141	1069166	10	True				
ANR	1069339	CallExpression	initCollectorList ( )		1069166	0					
ANR	1069340	Callee	initCollectorList		1069166	0					
ANR	1069341	Identifier	initCollectorList		1069166	0					
ANR	1069342	ArgumentList			1069166	1					
ANR	1069343	ExpressionStatement	InitSettableAttrsLists ( )	2717:1:78332:78356	1069166	11	True				
ANR	1069344	CallExpression	InitSettableAttrsLists ( )		1069166	0					
ANR	1069345	Callee	InitSettableAttrsLists		1069166	0					
ANR	1069346	Identifier	InitSettableAttrsLists		1069166	0					
ANR	1069347	ArgumentList			1069166	1					
ANR	1069348	IfStatement	"if ( param_boolean ( ""NET_REMAP_ENABLE"" , false , false ) )"		1069166	12					
ANR	1069349	Condition	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"	2720:8:78382:78428	1069166	0	True				
ANR	1069350	CallExpression	"param_boolean ( ""NET_REMAP_ENABLE"" , false , false )"		1069166	0					
ANR	1069351	Callee	param_boolean		1069166	0					
ANR	1069352	Identifier	param_boolean		1069166	0					
ANR	1069353	ArgumentList	"""NET_REMAP_ENABLE"""		1069166	1					
ANR	1069354	Argument	"""NET_REMAP_ENABLE"""		1069166	0					
ANR	1069355	PrimaryExpression	"""NET_REMAP_ENABLE"""		1069166	0					
ANR	1069356	Argument	false		1069166	1					
ANR	1069357	Identifier	false		1069166	0					
ANR	1069358	Argument	false		1069166	2					
ANR	1069359	Identifier	false		1069166	0					
ANR	1069360	CompoundStatement		57:57:1930:1930	1069166	1					
ANR	1069361	ExpressionStatement	m_use_clone_to_create_processes = false	2721:2:78435:78474	1069166	0	True				
ANR	1069362	AssignmentExpression	m_use_clone_to_create_processes = false		1069166	0		=			
ANR	1069363	Identifier	m_use_clone_to_create_processes		1069166	0					
ANR	1069364	Identifier	false		1069166	1					
ANR	1069365	ExpressionStatement	"dprintf ( D_CONFIG , ""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"	2722:2:78478:78574	1069166	1	True				
ANR	1069366	CallExpression	"dprintf ( D_CONFIG , ""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"		1069166	0					
ANR	1069367	Callee	dprintf		1069166	0					
ANR	1069368	Identifier	dprintf		1069166	0					
ANR	1069369	ArgumentList	D_CONFIG		1069166	1					
ANR	1069370	Argument	D_CONFIG		1069166	0					
ANR	1069371	Identifier	D_CONFIG		1069166	0					
ANR	1069372	Argument	"""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		1069166	1					
ANR	1069373	PrimaryExpression	"""NET_REMAP_ENABLE is TRUE, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		1069166	0					
ANR	1069374	ElseStatement	else		1069166	0					
ANR	1069375	CompoundStatement		61:6:2084:2084	1069166	0					
ANR	1069376	ExpressionStatement	"m_use_clone_to_create_processes = param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"	2725:2:78589:78675	1069166	0	True				
ANR	1069377	AssignmentExpression	"m_use_clone_to_create_processes = param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"		1069166	0		=			
ANR	1069378	Identifier	m_use_clone_to_create_processes		1069166	0					
ANR	1069379	CallExpression	"param_boolean ( ""USE_CLONE_TO_CREATE_PROCESSES"" , true )"		1069166	1					
ANR	1069380	Callee	param_boolean		1069166	0					
ANR	1069381	Identifier	param_boolean		1069166	0					
ANR	1069382	ArgumentList	"""USE_CLONE_TO_CREATE_PROCESSES"""		1069166	1					
ANR	1069383	Argument	"""USE_CLONE_TO_CREATE_PROCESSES"""		1069166	0					
ANR	1069384	PrimaryExpression	"""USE_CLONE_TO_CREATE_PROCESSES"""		1069166	0					
ANR	1069385	Argument	true		1069166	1					
ANR	1069386	Identifier	true		1069166	0					
ANR	1069387	IfStatement	if ( RUNNING_ON_VALGRIND )		1069166	13					
ANR	1069388	Condition	RUNNING_ON_VALGRIND	2727:5:78685:78703	1069166	0	True				
ANR	1069389	Identifier	RUNNING_ON_VALGRIND		1069166	0					
ANR	1069390	CompoundStatement		64:26:2205:2205	1069166	1					
ANR	1069391	ExpressionStatement	"dprintf ( D_ALWAYS , ""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"	2728:2:78710:78814	1069166	0	True				
ANR	1069392	CallExpression	"dprintf ( D_ALWAYS , ""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"" )"		1069166	0					
ANR	1069393	Callee	dprintf		1069166	0					
ANR	1069394	Identifier	dprintf		1069166	0					
ANR	1069395	ArgumentList	D_ALWAYS		1069166	1					
ANR	1069396	Argument	D_ALWAYS		1069166	0					
ANR	1069397	Identifier	D_ALWAYS		1069166	0					
ANR	1069398	Argument	"""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		1069166	1					
ANR	1069399	PrimaryExpression	"""Looks like we are under valgrind, forcing USE_CLONE_TO_CREATE_PROCESSES to FALSE.\\n"""		1069166	0					
ANR	1069400	ExpressionStatement	m_use_clone_to_create_processes = false	2729:2:78818:78857	1069166	1	True				
ANR	1069401	AssignmentExpression	m_use_clone_to_create_processes = false		1069166	0		=			
ANR	1069402	Identifier	m_use_clone_to_create_processes		1069166	0					
ANR	1069403	Identifier	false		1069166	1					
ANR	1069404	IfStatement	if ( ! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) ) )		1069166	14					
ANR	1069405	Condition	! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) )	2735:6:79031:79081	1069166	0	True				
ANR	1069406	UnaryOperationExpression	! ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD ) )		1069166	0					
ANR	1069407	UnaryOperator	!		1069166	0					
ANR	1069408	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_SCHEDD )		1069166	1					
ANR	1069409	Callee	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069410	PtrMemberAccess	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069411	CallExpression	get_mySubSystem ( )		1069166	0					
ANR	1069412	Callee	get_mySubSystem		1069166	0					
ANR	1069413	Identifier	get_mySubSystem		1069166	0					
ANR	1069414	ArgumentList			1069166	1					
ANR	1069415	Identifier	isType		1069166	1					
ANR	1069416	ArgumentList	SUBSYSTEM_TYPE_SCHEDD		1069166	1					
ANR	1069417	Argument	SUBSYSTEM_TYPE_SCHEDD		1069166	0					
ANR	1069418	Identifier	SUBSYSTEM_TYPE_SCHEDD		1069166	0					
ANR	1069419	CompoundStatement		72:60:2584:2584	1069166	1					
ANR	1069420	ExpressionStatement	m_use_clone_to_create_processes = false	2736:2:79089:79128	1069166	0	True				
ANR	1069421	AssignmentExpression	m_use_clone_to_create_processes = false		1069166	0		=			
ANR	1069422	Identifier	m_use_clone_to_create_processes		1069166	0					
ANR	1069423	Identifier	false		1069166	1					
ANR	1069424	ExpressionStatement	"m_invalidate_sessions_via_tcp = param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"	2740:1:79159:79245	1069166	15	True				
ANR	1069425	AssignmentExpression	"m_invalidate_sessions_via_tcp = param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"		1069166	0		=			
ANR	1069426	Identifier	m_invalidate_sessions_via_tcp		1069166	0					
ANR	1069427	CallExpression	"param_boolean ( ""SEC_INVALIDATE_SESSIONS_VIA_TCP"" , true )"		1069166	1					
ANR	1069428	Callee	param_boolean		1069166	0					
ANR	1069429	Identifier	param_boolean		1069166	0					
ANR	1069430	ArgumentList	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		1069166	1					
ANR	1069431	Argument	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		1069166	0					
ANR	1069432	PrimaryExpression	"""SEC_INVALIDATE_SESSIONS_VIA_TCP"""		1069166	0					
ANR	1069433	Argument	true		1069166	1					
ANR	1069434	Identifier	true		1069166	0					
ANR	1069435	IfStatement	"if ( param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false ) )"		1069166	16					
ANR	1069436	Condition	"param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false )"	2743:5:79275:79354	1069166	0	True				
ANR	1069437	OrExpression	"param_boolean ( ""ENABLE_SOAP"" , false ) || param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		1069166	0		||			
ANR	1069438	CallExpression	"param_boolean ( ""ENABLE_SOAP"" , false )"		1069166	0					
ANR	1069439	Callee	param_boolean		1069166	0					
ANR	1069440	Identifier	param_boolean		1069166	0					
ANR	1069441	ArgumentList	"""ENABLE_SOAP"""		1069166	1					
ANR	1069442	Argument	"""ENABLE_SOAP"""		1069166	0					
ANR	1069443	PrimaryExpression	"""ENABLE_SOAP"""		1069166	0					
ANR	1069444	Argument	false		1069166	1					
ANR	1069445	Identifier	false		1069166	0					
ANR	1069446	CallExpression	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		1069166	1					
ANR	1069447	Callee	param_boolean		1069166	0					
ANR	1069448	Identifier	param_boolean		1069166	0					
ANR	1069449	ArgumentList	"""ENABLE_WEB_SERVER"""		1069166	1					
ANR	1069450	Argument	"""ENABLE_WEB_SERVER"""		1069166	0					
ANR	1069451	PrimaryExpression	"""ENABLE_WEB_SERVER"""		1069166	0					
ANR	1069452	Argument	false		1069166	1					
ANR	1069453	Identifier	false		1069166	0					
ANR	1069454	CompoundStatement		82:1:2858:2858	1069166	1					
ANR	1069455	IfStatement	if ( soap )		1069166	0					
ANR	1069456	Condition	soap	2747:6:79410:79413	1069166	0	True				
ANR	1069457	Identifier	soap		1069166	0					
ANR	1069458	CompoundStatement		84:13:2916:2916	1069166	1					
ANR	1069459	ExpressionStatement	dc_soap_free ( soap )	2748:3:79422:79440	1069166	0	True				
ANR	1069460	CallExpression	dc_soap_free ( soap )		1069166	0					
ANR	1069461	Callee	dc_soap_free		1069166	0					
ANR	1069462	Identifier	dc_soap_free		1069166	0					
ANR	1069463	ArgumentList	soap		1069166	1					
ANR	1069464	Argument	soap		1069166	0					
ANR	1069465	Identifier	soap		1069166	0					
ANR	1069466	ExpressionStatement	soap = NULL	2749:3:79445:79456	1069166	1	True				
ANR	1069467	AssignmentExpression	soap = NULL		1069166	0		=			
ANR	1069468	Identifier	soap		1069166	0					
ANR	1069469	Identifier	NULL		1069166	1					
ANR	1069470	ExpressionStatement	dc_soap_init ( soap )	2752:2:79465:79483	1069166	1	True				
ANR	1069471	CallExpression	dc_soap_init ( soap )		1069166	0					
ANR	1069472	Callee	dc_soap_init		1069166	0					
ANR	1069473	Identifier	dc_soap_init		1069166	0					
ANR	1069474	ArgumentList	soap		1069166	1					
ANR	1069475	Argument	soap		1069166	0					
ANR	1069476	Identifier	soap		1069166	0					
ANR	1069477	ElseStatement	else		1069166	0					
ANR	1069478	CompoundStatement		92:6:2996:2996	1069166	0					
ANR	1069479	IdentifierDeclStatement	MyString subsys = MyString ( get_mySubSystem ( ) -> getName ( ) ) ;	2763:1:79727:79783	1069166	17	True				
ANR	1069480	IdentifierDecl	subsys = MyString ( get_mySubSystem ( ) -> getName ( ) )		1069166	0					
ANR	1069481	IdentifierDeclType	MyString		1069166	0					
ANR	1069482	Identifier	subsys		1069166	1					
ANR	1069483	AssignmentExpression	subsys = MyString ( get_mySubSystem ( ) -> getName ( ) )		1069166	2		=			
ANR	1069484	Identifier	subsys		1069166	0					
ANR	1069485	CallExpression	MyString ( get_mySubSystem ( ) -> getName ( ) )		1069166	1					
ANR	1069486	Callee	MyString		1069166	0					
ANR	1069487	Identifier	MyString		1069166	0					
ANR	1069488	ArgumentList	get_mySubSystem ( ) -> getName ( )		1069166	1					
ANR	1069489	Argument	get_mySubSystem ( ) -> getName ( )		1069166	0					
ANR	1069490	CallExpression	get_mySubSystem ( ) -> getName ( )		1069166	0					
ANR	1069491	Callee	get_mySubSystem ( ) -> getName		1069166	0					
ANR	1069492	PtrMemberAccess	get_mySubSystem ( ) -> getName		1069166	0					
ANR	1069493	CallExpression	get_mySubSystem ( )		1069166	0					
ANR	1069494	Callee	get_mySubSystem		1069166	0					
ANR	1069495	Identifier	get_mySubSystem		1069166	0					
ANR	1069496	ArgumentList			1069166	1					
ANR	1069497	Identifier	getName		1069166	1					
ANR	1069498	ArgumentList			1069166	1					
ANR	1069499	IdentifierDeclStatement	"bool enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false ) ;"	2764:1:79786:79848	1069166	18	True				
ANR	1069500	IdentifierDecl	"enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		1069166	0					
ANR	1069501	IdentifierDeclType	bool		1069166	0					
ANR	1069502	Identifier	enable_soap_ssl		1069166	1					
ANR	1069503	AssignmentExpression	"enable_soap_ssl = param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		1069166	2		=			
ANR	1069504	Identifier	enable_soap_ssl		1069166	0					
ANR	1069505	CallExpression	"param_boolean ( ""ENABLE_SOAP_SSL"" , false )"		1069166	1					
ANR	1069506	Callee	param_boolean		1069166	0					
ANR	1069507	Identifier	param_boolean		1069166	0					
ANR	1069508	ArgumentList	"""ENABLE_SOAP_SSL"""		1069166	1					
ANR	1069509	Argument	"""ENABLE_SOAP_SSL"""		1069166	0					
ANR	1069510	PrimaryExpression	"""ENABLE_SOAP_SSL"""		1069166	0					
ANR	1069511	Argument	false		1069166	1					
ANR	1069512	Identifier	false		1069166	0					
ANR	1069513	IfStatement	if ( enable_soap_ssl )		1069166	19					
ANR	1069514	Condition	enable_soap_ssl	2766:5:79856:79870	1069166	0	True				
ANR	1069515	Identifier	enable_soap_ssl		1069166	0					
ANR	1069516	CompoundStatement		118:2:3879:3887	1069166	1					
ANR	1069517	IfStatement	if ( mapfile )		1069166	0					
ANR	1069518	Condition	mapfile	2767:6:79881:79887	1069166	0	True				
ANR	1069519	Identifier	mapfile		1069166	0					
ANR	1069520	CompoundStatement		104:15:3389:3389	1069166	1					
ANR	1069521	Statement	delete	2768:3:79895:79900	1069166	0	True				
ANR	1069522	ExpressionStatement	mapfile	2768:10:79902:79909	1069166	1	True				
ANR	1069523	Identifier	mapfile		1069166	0					
ANR	1069524	ExpressionStatement	mapfile = NULL	2768:19:79911:79925	1069166	2	True				
ANR	1069525	AssignmentExpression	mapfile = NULL		1069166	0		=			
ANR	1069526	Identifier	mapfile		1069166	0					
ANR	1069527	Identifier	NULL		1069166	1					
ANR	1069528	Statement	mapfile	2770:2:79933:79939	1069166	1	True				
ANR	1069529	Statement	=	2770:10:79941:79941	1069166	2	True				
ANR	1069530	Statement	new	2770:12:79943:79945	1069166	3	True				
ANR	1069531	ExpressionStatement	MapFile	2770:16:79947:79954	1069166	4	True				
ANR	1069532	Identifier	MapFile		1069166	0					
ANR	1069533	IdentifierDeclStatement	char * credential_mapfile ;	2771:2:79958:79983	1069166	5	True				
ANR	1069534	IdentifierDecl	* credential_mapfile		1069166	0					
ANR	1069535	IdentifierDeclType	char *		1069166	0					
ANR	1069536	Identifier	credential_mapfile		1069166	1					
ANR	1069537	IfStatement	"if ( NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) ) )"		1069166	6					
ANR	1069538	Condition	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"	2772:6:79991:80049	1069166	0	True				
ANR	1069539	EqualityExpression	"NULL == ( credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" ) )"		1069166	0		==			
ANR	1069540	Identifier	NULL		1069166	0					
ANR	1069541	AssignmentExpression	"credential_mapfile = param ( ""CERTIFICATE_MAPFILE"" )"		1069166	1		=			
ANR	1069542	Identifier	credential_mapfile		1069166	0					
ANR	1069543	CallExpression	"param ( ""CERTIFICATE_MAPFILE"" )"		1069166	1					
ANR	1069544	Callee	param		1069166	0					
ANR	1069545	Identifier	param		1069166	0					
ANR	1069546	ArgumentList	"""CERTIFICATE_MAPFILE"""		1069166	1					
ANR	1069547	Argument	"""CERTIFICATE_MAPFILE"""		1069166	0					
ANR	1069548	PrimaryExpression	"""CERTIFICATE_MAPFILE"""		1069166	0					
ANR	1069549	CompoundStatement		109:67:3551:3551	1069166	1					
ANR	1069550	Statement	EXCEPT	2773:3:80057:80062	1069166	0	True				
ANR	1069551	Statement	(	2773:9:80063:80063	1069166	1	True				
ANR	1069552	Statement	"""DaemonCore: No CERTIFICATE_MAPFILE defined, """	2773:10:80064:80109	1069166	2	True				
ANR	1069553	Statement	"""unable to identify users, required by ENABLE_SOAP_SSL"""	2774:7:80118:80172	1069166	3	True				
ANR	1069554	Statement	)	2774:62:80173:80173	1069166	4	True				
ANR	1069555	ExpressionStatement		2774:63:80174:80174	1069166	5	True				
ANR	1069556	IdentifierDeclStatement	char * user_mapfile ;	2776:2:80182:80201	1069166	7	True				
ANR	1069557	IdentifierDecl	* user_mapfile		1069166	0					
ANR	1069558	IdentifierDeclType	char *		1069166	0					
ANR	1069559	Identifier	user_mapfile		1069166	1					
ANR	1069560	IfStatement	"if ( NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) ) )"		1069166	8					
ANR	1069561	Condition	"NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) )"	2777:6:80209:80254	1069166	0	True				
ANR	1069562	EqualityExpression	"NULL == ( user_mapfile = param ( ""USER_MAPFILE"" ) )"		1069166	0		==			
ANR	1069563	Identifier	NULL		1069166	0					
ANR	1069564	AssignmentExpression	"user_mapfile = param ( ""USER_MAPFILE"" )"		1069166	1		=			
ANR	1069565	Identifier	user_mapfile		1069166	0					
ANR	1069566	CallExpression	"param ( ""USER_MAPFILE"" )"		1069166	1					
ANR	1069567	Callee	param		1069166	0					
ANR	1069568	Identifier	param		1069166	0					
ANR	1069569	ArgumentList	"""USER_MAPFILE"""		1069166	1					
ANR	1069570	Argument	"""USER_MAPFILE"""		1069166	0					
ANR	1069571	PrimaryExpression	"""USER_MAPFILE"""		1069166	0					
ANR	1069572	CompoundStatement		114:54:3756:3756	1069166	1					
ANR	1069573	Statement	EXCEPT	2778:3:80262:80267	1069166	0	True				
ANR	1069574	Statement	(	2778:9:80268:80268	1069166	1	True				
ANR	1069575	Statement	"""DaemonCore: No USER_MAPFILE defined, """	2778:10:80269:80307	1069166	2	True				
ANR	1069576	Statement	"""unable to identify users, required by ENABLE_SOAP_SSL"""	2779:7:80316:80370	1069166	3	True				
ANR	1069577	Statement	)	2779:62:80371:80371	1069166	4	True				
ANR	1069578	ExpressionStatement		2779:63:80372:80372	1069166	5	True				
ANR	1069579	IdentifierDeclStatement	int line ;	2781:2:80380:80388	1069166	9	True				
ANR	1069580	IdentifierDecl	line		1069166	0					
ANR	1069581	IdentifierDeclType	int		1069166	0					
ANR	1069582	Identifier	line		1069166	1					
ANR	1069583	IfStatement	if ( 0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) ) )		1069166	10					
ANR	1069584	Condition	0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) )	2782:6:80396:80463	1069166	0	True				
ANR	1069585	EqualityExpression	0 != ( line = mapfile -> ParseCanonicalizationFile ( credential_mapfile ) )		1069166	0		!=			
ANR	1069586	PrimaryExpression	0		1069166	0					
ANR	1069587	AssignmentExpression	line = mapfile -> ParseCanonicalizationFile ( credential_mapfile )		1069166	1		=			
ANR	1069588	Identifier	line		1069166	0					
ANR	1069589	CallExpression	mapfile -> ParseCanonicalizationFile ( credential_mapfile )		1069166	1					
ANR	1069590	Callee	mapfile -> ParseCanonicalizationFile		1069166	0					
ANR	1069591	PtrMemberAccess	mapfile -> ParseCanonicalizationFile		1069166	0					
ANR	1069592	Identifier	mapfile		1069166	0					
ANR	1069593	Identifier	ParseCanonicalizationFile		1069166	1					
ANR	1069594	ArgumentList	credential_mapfile		1069166	1					
ANR	1069595	Argument	credential_mapfile		1069166	0					
ANR	1069596	Identifier	credential_mapfile		1069166	0					
ANR	1069597	CompoundStatement		119:76:3965:3965	1069166	1					
ANR	1069598	ExpressionStatement	"EXCEPT ( ""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"" , line )"	2783:3:80471:80550	1069166	0	True				
ANR	1069599	CallExpression	"EXCEPT ( ""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"" , line )"		1069166	0					
ANR	1069600	Callee	EXCEPT		1069166	0					
ANR	1069601	Identifier	EXCEPT		1069166	0					
ANR	1069602	ArgumentList	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		1069166	1					
ANR	1069603	Argument	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		1069166	0					
ANR	1069604	PrimaryExpression	"""DaemonCore: Error parsing CERTIFICATE_MAPFILE at line %d"""		1069166	0					
ANR	1069605	Argument	line		1069166	1					
ANR	1069606	Identifier	line		1069166	0					
ANR	1069607	IfStatement	if ( 0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) ) )		1069166	11					
ANR	1069608	Condition	0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) )	2786:6:80561:80613	1069166	0	True				
ANR	1069609	EqualityExpression	0 != ( line = mapfile -> ParseUsermapFile ( user_mapfile ) )		1069166	0		!=			
ANR	1069610	PrimaryExpression	0		1069166	0					
ANR	1069611	AssignmentExpression	line = mapfile -> ParseUsermapFile ( user_mapfile )		1069166	1		=			
ANR	1069612	Identifier	line		1069166	0					
ANR	1069613	CallExpression	mapfile -> ParseUsermapFile ( user_mapfile )		1069166	1					
ANR	1069614	Callee	mapfile -> ParseUsermapFile		1069166	0					
ANR	1069615	PtrMemberAccess	mapfile -> ParseUsermapFile		1069166	0					
ANR	1069616	Identifier	mapfile		1069166	0					
ANR	1069617	Identifier	ParseUsermapFile		1069166	1					
ANR	1069618	ArgumentList	user_mapfile		1069166	1					
ANR	1069619	Argument	user_mapfile		1069166	0					
ANR	1069620	Identifier	user_mapfile		1069166	0					
ANR	1069621	CompoundStatement		123:61:4115:4115	1069166	1					
ANR	1069622	ExpressionStatement	"EXCEPT ( ""DaemonCore: Error parsing USER_MAPFILE at line %d"" , line )"	2787:3:80621:80686	1069166	0	True				
ANR	1069623	CallExpression	"EXCEPT ( ""DaemonCore: Error parsing USER_MAPFILE at line %d"" , line )"		1069166	0					
ANR	1069624	Callee	EXCEPT		1069166	0					
ANR	1069625	Identifier	EXCEPT		1069166	0					
ANR	1069626	ArgumentList	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		1069166	1					
ANR	1069627	Argument	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		1069166	0					
ANR	1069628	PrimaryExpression	"""DaemonCore: Error parsing USER_MAPFILE at line %d"""		1069166	0					
ANR	1069629	Argument	line		1069166	1					
ANR	1069630	Identifier	line		1069166	0					
ANR	1069631	ExpressionStatement	"m_fake_create_thread = param_boolean ( ""FAKE_CREATE_THREAD"" , true )"	2799:1:80997:81060	1069166	20	True				
ANR	1069632	AssignmentExpression	"m_fake_create_thread = param_boolean ( ""FAKE_CREATE_THREAD"" , true )"		1069166	0		=			
ANR	1069633	Identifier	m_fake_create_thread		1069166	0					
ANR	1069634	CallExpression	"param_boolean ( ""FAKE_CREATE_THREAD"" , true )"		1069166	1					
ANR	1069635	Callee	param_boolean		1069166	0					
ANR	1069636	Identifier	param_boolean		1069166	0					
ANR	1069637	ArgumentList	"""FAKE_CREATE_THREAD"""		1069166	1					
ANR	1069638	Argument	"""FAKE_CREATE_THREAD"""		1069166	0					
ANR	1069639	PrimaryExpression	"""FAKE_CREATE_THREAD"""		1069166	0					
ANR	1069640	Argument	true		1069166	1					
ANR	1069641	Identifier	true		1069166	0					
ANR	1069642	IfStatement	if ( ppid && m_want_send_child_alive )		1069166	21					
ANR	1069643	Condition	ppid && m_want_send_child_alive	2807:6:81312:81342	1069166	0	True				
ANR	1069644	AndExpression	ppid && m_want_send_child_alive		1069166	0		&&			
ANR	1069645	Identifier	ppid		1069166	0					
ANR	1069646	Identifier	m_want_send_child_alive		1069166	1					
ANR	1069647	CompoundStatement		145:2:4849:4861	1069166	1					
ANR	1069648	IdentifierDeclStatement	MyString buf ;	2808:2:81350:81362	1069166	0	True				
ANR	1069649	IdentifierDecl	buf		1069166	0					
ANR	1069650	IdentifierDeclType	MyString		1069166	0					
ANR	1069651	Identifier	buf		1069166	1					
ANR	1069652	ExpressionStatement	"buf . sprintf ( ""%s_NOT_RESPONDING_TIMEOUT"" , get_mySubSystem ( ) -> getName ( ) )"	2809:2:81366:81435	1069166	1	True				
ANR	1069653	CallExpression	"buf . sprintf ( ""%s_NOT_RESPONDING_TIMEOUT"" , get_mySubSystem ( ) -> getName ( ) )"		1069166	0					
ANR	1069654	Callee	buf . sprintf		1069166	0					
ANR	1069655	MemberAccess	buf . sprintf		1069166	0					
ANR	1069656	Identifier	buf		1069166	0					
ANR	1069657	Identifier	sprintf		1069166	1					
ANR	1069658	ArgumentList	"""%s_NOT_RESPONDING_TIMEOUT"""		1069166	1					
ANR	1069659	Argument	"""%s_NOT_RESPONDING_TIMEOUT"""		1069166	0					
ANR	1069660	PrimaryExpression	"""%s_NOT_RESPONDING_TIMEOUT"""		1069166	0					
ANR	1069661	Argument	get_mySubSystem ( ) -> getName ( )		1069166	1					
ANR	1069662	CallExpression	get_mySubSystem ( ) -> getName ( )		1069166	0					
ANR	1069663	Callee	get_mySubSystem ( ) -> getName		1069166	0					
ANR	1069664	PtrMemberAccess	get_mySubSystem ( ) -> getName		1069166	0					
ANR	1069665	CallExpression	get_mySubSystem ( )		1069166	0					
ANR	1069666	Callee	get_mySubSystem		1069166	0					
ANR	1069667	Identifier	get_mySubSystem		1069166	0					
ANR	1069668	ArgumentList			1069166	1					
ANR	1069669	Identifier	getName		1069166	1					
ANR	1069670	ArgumentList			1069166	1					
ANR	1069671	ExpressionStatement	"max_hang_time = param_integer ( buf . Value ( ) , - 1 )"	2810:2:81439:81484	1069166	2	True				
ANR	1069672	AssignmentExpression	"max_hang_time = param_integer ( buf . Value ( ) , - 1 )"		1069166	0		=			
ANR	1069673	Identifier	max_hang_time		1069166	0					
ANR	1069674	CallExpression	"param_integer ( buf . Value ( ) , - 1 )"		1069166	1					
ANR	1069675	Callee	param_integer		1069166	0					
ANR	1069676	Identifier	param_integer		1069166	0					
ANR	1069677	ArgumentList	buf . Value ( )		1069166	1					
ANR	1069678	Argument	buf . Value ( )		1069166	0					
ANR	1069679	CallExpression	buf . Value ( )		1069166	0					
ANR	1069680	Callee	buf . Value		1069166	0					
ANR	1069681	MemberAccess	buf . Value		1069166	0					
ANR	1069682	Identifier	buf		1069166	0					
ANR	1069683	Identifier	Value		1069166	1					
ANR	1069684	ArgumentList			1069166	1					
ANR	1069685	Argument	- 1		1069166	1					
ANR	1069686	UnaryOperationExpression	- 1		1069166	0					
ANR	1069687	UnaryOperator	-		1069166	0					
ANR	1069688	PrimaryExpression	1		1069166	1					
ANR	1069689	IfStatement	if ( max_hang_time == ( unsigned int ) - 1 )		1069166	3					
ANR	1069690	Condition	max_hang_time == ( unsigned int ) - 1	2811:6:81492:81524	1069166	0	True				
ANR	1069691	EqualityExpression	max_hang_time == ( unsigned int ) - 1		1069166	0		==			
ANR	1069692	Identifier	max_hang_time		1069166	0					
ANR	1069693	CastExpression	( unsigned int ) - 1		1069166	1					
ANR	1069694	CastTarget	unsigned int		1069166	0					
ANR	1069695	UnaryOperationExpression	- 1		1069166	1					
ANR	1069696	UnaryOperator	-		1069166	0					
ANR	1069697	PrimaryExpression	1		1069166	1					
ANR	1069698	CompoundStatement		148:42:5027:5027	1069166	1					
ANR	1069699	ExpressionStatement	"max_hang_time = param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"	2812:3:81533:81590	1069166	0	True				
ANR	1069700	AssignmentExpression	"max_hang_time = param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"		1069166	0		=			
ANR	1069701	Identifier	max_hang_time		1069166	0					
ANR	1069702	CallExpression	"param_integer ( ""NOT_RESPONDING_TIMEOUT"" , 0 )"		1069166	1					
ANR	1069703	Callee	param_integer		1069166	0					
ANR	1069704	Identifier	param_integer		1069166	0					
ANR	1069705	ArgumentList	"""NOT_RESPONDING_TIMEOUT"""		1069166	1					
ANR	1069706	Argument	"""NOT_RESPONDING_TIMEOUT"""		1069166	0					
ANR	1069707	PrimaryExpression	"""NOT_RESPONDING_TIMEOUT"""		1069166	0					
ANR	1069708	Argument	0		1069166	1					
ANR	1069709	PrimaryExpression	0		1069166	0					
ANR	1069710	IfStatement	if ( ! max_hang_time )		1069166	4					
ANR	1069711	Condition	! max_hang_time	2814:7:81603:81616	1069166	0	True				
ANR	1069712	UnaryOperationExpression	! max_hang_time		1069166	0					
ANR	1069713	UnaryOperator	!		1069166	0					
ANR	1069714	Identifier	max_hang_time		1069166	1					
ANR	1069715	CompoundStatement		151:24:5119:5119	1069166	1					
ANR	1069716	ExpressionStatement	max_hang_time = 60 * 60	2815:3:81625:81648	1069166	0	True				
ANR	1069717	AssignmentExpression	max_hang_time = 60 * 60		1069166	0		=			
ANR	1069718	Identifier	max_hang_time		1069166	0					
ANR	1069719	MultiplicativeExpression	60 * 60		1069166	1		*			
ANR	1069720	PrimaryExpression	60		1069166	0					
ANR	1069721	PrimaryExpression	60		1069166	1					
ANR	1069722	ExpressionStatement	m_child_alive_period = ( max_hang_time / 3 ) - 30	2817:2:81677:81724	1069166	5	True				
ANR	1069723	AssignmentExpression	m_child_alive_period = ( max_hang_time / 3 ) - 30		1069166	0		=			
ANR	1069724	Identifier	m_child_alive_period		1069166	0					
ANR	1069725	AdditiveExpression	( max_hang_time / 3 ) - 30		1069166	1		-			
ANR	1069726	MultiplicativeExpression	max_hang_time / 3		1069166	0		/			
ANR	1069727	Identifier	max_hang_time		1069166	0					
ANR	1069728	PrimaryExpression	3		1069166	1					
ANR	1069729	PrimaryExpression	30		1069166	1					
ANR	1069730	IfStatement	if ( m_child_alive_period < 1 )		1069166	6					
ANR	1069731	Condition	m_child_alive_period < 1	2818:7:81733:81756	1069166	0	True				
ANR	1069732	RelationalExpression	m_child_alive_period < 1		1069166	0		<			
ANR	1069733	Identifier	m_child_alive_period		1069166	0					
ANR	1069734	PrimaryExpression	1		1069166	1					
ANR	1069735	ExpressionStatement	m_child_alive_period = 1	2819:3:81763:81787	1069166	1	True				
ANR	1069736	AssignmentExpression	m_child_alive_period = 1		1069166	0		=			
ANR	1069737	Identifier	m_child_alive_period		1069166	0					
ANR	1069738	PrimaryExpression	1		1069166	1					
ANR	1069739	IfStatement	if ( send_child_alive_timer == - 1 )		1069166	7					
ANR	1069740	Condition	send_child_alive_timer == - 1	2820:7:81796:81823	1069166	0	True				
ANR	1069741	EqualityExpression	send_child_alive_timer == - 1		1069166	0		==			
ANR	1069742	Identifier	send_child_alive_timer		1069166	0					
ANR	1069743	UnaryOperationExpression	- 1		1069166	1					
ANR	1069744	UnaryOperator	-		1069166	0					
ANR	1069745	PrimaryExpression	1		1069166	1					
ANR	1069746	CompoundStatement		157:38:5326:5326	1069166	1					
ANR	1069747	ExpressionStatement	"send_child_alive_timer = Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"	2833:3:82373:82551	1069166	0	True				
ANR	1069748	AssignmentExpression	"send_child_alive_timer = Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"		1069166	0		=			
ANR	1069749	Identifier	send_child_alive_timer		1069166	0					
ANR	1069750	CallExpression	"Register_Timer ( 0 , ( unsigned ) m_child_alive_period , ( TimerHandlercpp ) & DaemonCore :: SendAliveToParent , ""DaemonCore::SendAliveToParent"" , this )"		1069166	1					
ANR	1069751	Callee	Register_Timer		1069166	0					
ANR	1069752	Identifier	Register_Timer		1069166	0					
ANR	1069753	ArgumentList	0		1069166	1					
ANR	1069754	Argument	0		1069166	0					
ANR	1069755	PrimaryExpression	0		1069166	0					
ANR	1069756	Argument	( unsigned ) m_child_alive_period		1069166	1					
ANR	1069757	CastExpression	( unsigned ) m_child_alive_period		1069166	0					
ANR	1069758	CastTarget	unsigned		1069166	0					
ANR	1069759	Identifier	m_child_alive_period		1069166	1					
ANR	1069760	Argument	( TimerHandlercpp ) & DaemonCore :: SendAliveToParent		1069166	2					
ANR	1069761	CastExpression	( TimerHandlercpp ) & DaemonCore :: SendAliveToParent		1069166	0					
ANR	1069762	CastTarget	TimerHandlercpp		1069166	0					
ANR	1069763	UnaryOperationExpression	& DaemonCore :: SendAliveToParent		1069166	1					
ANR	1069764	UnaryOperator	&		1069166	0					
ANR	1069765	Identifier	DaemonCore :: SendAliveToParent		1069166	1					
ANR	1069766	Argument	"""DaemonCore::SendAliveToParent"""		1069166	3					
ANR	1069767	PrimaryExpression	"""DaemonCore::SendAliveToParent"""		1069166	0					
ANR	1069768	Argument	this		1069166	4					
ANR	1069769	Identifier	this		1069166	0					
ANR	1069770	ElseStatement	else		1069166	0					
ANR	1069771	CompoundStatement		179:9:6247:6247	1069166	0					
ANR	1069772	ExpressionStatement	"Reset_Timer ( send_child_alive_timer , 1 , m_child_alive_period )"	2843:3:82753:82813	1069166	0	True				
ANR	1069773	CallExpression	"Reset_Timer ( send_child_alive_timer , 1 , m_child_alive_period )"		1069166	0					
ANR	1069774	Callee	Reset_Timer		1069166	0					
ANR	1069775	Identifier	Reset_Timer		1069166	0					
ANR	1069776	ArgumentList	send_child_alive_timer		1069166	1					
ANR	1069777	Argument	send_child_alive_timer		1069166	0					
ANR	1069778	Identifier	send_child_alive_timer		1069166	0					
ANR	1069779	Argument	1		1069166	1					
ANR	1069780	PrimaryExpression	1		1069166	0					
ANR	1069781	Argument	m_child_alive_period		1069166	2					
ANR	1069782	Identifier	m_child_alive_period		1069166	0					
ANR	1069783	ExpressionStatement	file_descriptor_safety_limit = 0	2847:1:82824:82856	1069166	22	True				
ANR	1069784	AssignmentExpression	file_descriptor_safety_limit = 0		1069166	0		=			
ANR	1069785	Identifier	file_descriptor_safety_limit		1069166	0					
ANR	1069786	PrimaryExpression	0		1069166	1					
ANR	1069787	ExpressionStatement	InitSharedPort ( )	2849:1:82897:82913	1069166	23	True				
ANR	1069788	CallExpression	InitSharedPort ( )		1069166	0					
ANR	1069789	Callee	InitSharedPort		1069166	0					
ANR	1069790	Identifier	InitSharedPort		1069166	0					
ANR	1069791	ArgumentList			1069166	1					
ANR	1069792	IdentifierDeclStatement	bool never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN ) ;	2851:1:82917:83040	1069166	24	True				
ANR	1069793	IdentifierDecl	never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1069166	0					
ANR	1069794	IdentifierDeclType	bool		1069166	0					
ANR	1069795	Identifier	never_use_ccb		1069166	1					
ANR	1069796	AssignmentExpression	never_use_ccb = get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1069166	2		=			
ANR	1069797	Identifier	never_use_ccb		1069166	0					
ANR	1069798	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1069166	1		||			
ANR	1069799	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP )		1069166	0					
ANR	1069800	Callee	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069801	PtrMemberAccess	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069802	CallExpression	get_mySubSystem ( )		1069166	0					
ANR	1069803	Callee	get_mySubSystem		1069166	0					
ANR	1069804	Identifier	get_mySubSystem		1069166	0					
ANR	1069805	ArgumentList			1069166	1					
ANR	1069806	Identifier	isType		1069166	1					
ANR	1069807	ArgumentList	SUBSYSTEM_TYPE_GAHP		1069166	1					
ANR	1069808	Argument	SUBSYSTEM_TYPE_GAHP		1069166	0					
ANR	1069809	Identifier	SUBSYSTEM_TYPE_GAHP		1069166	0					
ANR	1069810	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1069166	1					
ANR	1069811	Callee	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069812	PtrMemberAccess	get_mySubSystem ( ) -> isType		1069166	0					
ANR	1069813	CallExpression	get_mySubSystem ( )		1069166	0					
ANR	1069814	Callee	get_mySubSystem		1069166	0					
ANR	1069815	Identifier	get_mySubSystem		1069166	0					
ANR	1069816	ArgumentList			1069166	1					
ANR	1069817	Identifier	isType		1069166	1					
ANR	1069818	ArgumentList	SUBSYSTEM_TYPE_DAGMAN		1069166	1					
ANR	1069819	Argument	SUBSYSTEM_TYPE_DAGMAN		1069166	0					
ANR	1069820	Identifier	SUBSYSTEM_TYPE_DAGMAN		1069166	0					
ANR	1069821	IfStatement	if ( ! never_use_ccb )		1069166	25					
ANR	1069822	Condition	! never_use_ccb	2855:5:83048:83061	1069166	0	True				
ANR	1069823	UnaryOperationExpression	! never_use_ccb		1069166	0					
ANR	1069824	UnaryOperator	!		1069166	0					
ANR	1069825	Identifier	never_use_ccb		1069166	1					
ANR	1069826	CompoundStatement		207:2:6967:6993	1069166	1					
ANR	1069827	IfStatement	if ( ! m_ccb_listeners )		1069166	0					
ANR	1069828	Condition	! m_ccb_listeners	2856:6:83073:83088	1069166	0	True				
ANR	1069829	UnaryOperationExpression	! m_ccb_listeners		1069166	0					
ANR	1069830	UnaryOperator	!		1069166	0					
ANR	1069831	Identifier	m_ccb_listeners		1069166	1					
ANR	1069832	CompoundStatement		193:25:6591:6591	1069166	1					
ANR	1069833	Statement	m_ccb_listeners	2857:3:83097:83111	1069166	0	True				
ANR	1069834	Statement	=	2857:19:83113:83113	1069166	1	True				
ANR	1069835	Statement	new	2857:21:83115:83117	1069166	2	True				
ANR	1069836	ExpressionStatement	CCBListeners	2857:25:83119:83131	1069166	3	True				
ANR	1069837	Identifier	CCBListeners		1069166	0					
ANR	1069838	IdentifierDeclStatement	"char * ccb_addresses = param ( ""CCB_ADDRESS"" ) ;"	2860:2:83140:83182	1069166	1	True				
ANR	1069839	IdentifierDecl	"* ccb_addresses = param ( ""CCB_ADDRESS"" )"		1069166	0					
ANR	1069840	IdentifierDeclType	char *		1069166	0					
ANR	1069841	Identifier	ccb_addresses		1069166	1					
ANR	1069842	AssignmentExpression	"* ccb_addresses = param ( ""CCB_ADDRESS"" )"		1069166	2		=			
ANR	1069843	Identifier	ccb_addresses		1069166	0					
ANR	1069844	CallExpression	"param ( ""CCB_ADDRESS"" )"		1069166	1					
ANR	1069845	Callee	param		1069166	0					
ANR	1069846	Identifier	param		1069166	0					
ANR	1069847	ArgumentList	"""CCB_ADDRESS"""		1069166	1					
ANR	1069848	Argument	"""CCB_ADDRESS"""		1069166	0					
ANR	1069849	PrimaryExpression	"""CCB_ADDRESS"""		1069166	0					
ANR	1069850	IfStatement	if ( m_shared_port_endpoint )		1069166	2					
ANR	1069851	Condition	m_shared_port_endpoint	2861:6:83190:83211	1069166	0	True				
ANR	1069852	Identifier	m_shared_port_endpoint		1069166	0					
ANR	1069853	CompoundStatement		198:31:6714:6714	1069166	1					
ANR	1069854	ExpressionStatement	free ( ccb_addresses )	2864:3:83341:83362	1069166	0	True				
ANR	1069855	CallExpression	free ( ccb_addresses )		1069166	0					
ANR	1069856	Callee	free		1069166	0					
ANR	1069857	Identifier	free		1069166	0					
ANR	1069858	ArgumentList	ccb_addresses		1069166	1					
ANR	1069859	Argument	ccb_addresses		1069166	0					
ANR	1069860	Identifier	ccb_addresses		1069166	0					
ANR	1069861	ExpressionStatement	ccb_addresses = NULL	2865:3:83367:83387	1069166	1	True				
ANR	1069862	AssignmentExpression	ccb_addresses = NULL		1069166	0		=			
ANR	1069863	Identifier	ccb_addresses		1069166	0					
ANR	1069864	Identifier	NULL		1069166	1					
ANR	1069865	ExpressionStatement	m_ccb_listeners -> Configure ( ccb_addresses )	2867:2:83395:83438	1069166	3	True				
ANR	1069866	CallExpression	m_ccb_listeners -> Configure ( ccb_addresses )		1069166	0					
ANR	1069867	Callee	m_ccb_listeners -> Configure		1069166	0					
ANR	1069868	PtrMemberAccess	m_ccb_listeners -> Configure		1069166	0					
ANR	1069869	Identifier	m_ccb_listeners		1069166	0					
ANR	1069870	Identifier	Configure		1069166	1					
ANR	1069871	ArgumentList	ccb_addresses		1069166	1					
ANR	1069872	Argument	ccb_addresses		1069166	0					
ANR	1069873	Identifier	ccb_addresses		1069166	0					
ANR	1069874	ExpressionStatement	free ( ccb_addresses )	2868:2:83442:83463	1069166	4	True				
ANR	1069875	CallExpression	free ( ccb_addresses )		1069166	0					
ANR	1069876	Callee	free		1069166	0					
ANR	1069877	Identifier	free		1069166	0					
ANR	1069878	ArgumentList	ccb_addresses		1069166	1					
ANR	1069879	Argument	ccb_addresses		1069166	0					
ANR	1069880	Identifier	ccb_addresses		1069166	0					
ANR	1069881	IdentifierDeclStatement	const bool blocking = true ;	2870:2:83468:83494	1069166	5	True				
ANR	1069882	IdentifierDecl	blocking = true		1069166	0					
ANR	1069883	IdentifierDeclType	const bool		1069166	0					
ANR	1069884	Identifier	blocking		1069166	1					
ANR	1069885	AssignmentExpression	blocking = true		1069166	2		=			
ANR	1069886	Identifier	true		1069166	0					
ANR	1069887	Identifier	true		1069166	1					
ANR	1069888	ExpressionStatement	m_ccb_listeners -> RegisterWithCCBServer ( blocking )	2871:2:83498:83546	1069166	6	True				
ANR	1069889	CallExpression	m_ccb_listeners -> RegisterWithCCBServer ( blocking )		1069166	0					
ANR	1069890	Callee	m_ccb_listeners -> RegisterWithCCBServer		1069166	0					
ANR	1069891	PtrMemberAccess	m_ccb_listeners -> RegisterWithCCBServer		1069166	0					
ANR	1069892	Identifier	m_ccb_listeners		1069166	0					
ANR	1069893	Identifier	RegisterWithCCBServer		1069166	1					
ANR	1069894	ArgumentList	blocking		1069166	1					
ANR	1069895	Argument	blocking		1069166	0					
ANR	1069896	Identifier	blocking		1069166	0					
ANR	1069897	ExpressionStatement	CondorThreads :: pool_init ( )	2875:1:83580:83606	1069166	26	True				
ANR	1069898	CallExpression	CondorThreads :: pool_init ( )		1069166	0					
ANR	1069899	Callee	CondorThreads :: pool_init		1069166	0					
ANR	1069900	Identifier	CondorThreads :: pool_init		1069166	0					
ANR	1069901	ArgumentList			1069166	1					
ANR	1069902	ExpressionStatement	"_mark_thread_safe_callback ( CondorThreads :: start_thread_safe_block , CondorThreads :: stop_thread_safe_block )"	2878:1:83701:83816	1069166	27	True				
ANR	1069903	CallExpression	"_mark_thread_safe_callback ( CondorThreads :: start_thread_safe_block , CondorThreads :: stop_thread_safe_block )"		1069166	0					
ANR	1069904	Callee	_mark_thread_safe_callback		1069166	0					
ANR	1069905	Identifier	_mark_thread_safe_callback		1069166	0					
ANR	1069906	ArgumentList	CondorThreads :: start_thread_safe_block		1069166	1					
ANR	1069907	Argument	CondorThreads :: start_thread_safe_block		1069166	0					
ANR	1069908	Identifier	CondorThreads :: start_thread_safe_block		1069166	0					
ANR	1069909	Argument	CondorThreads :: stop_thread_safe_block		1069166	1					
ANR	1069910	Identifier	CondorThreads :: stop_thread_safe_block		1069166	0					
ANR	1069911	ExpressionStatement	CondorThreads :: set_switch_callback ( thread_switch_callback )	2881:1:83883:83943	1069166	28	True				
ANR	1069912	CallExpression	CondorThreads :: set_switch_callback ( thread_switch_callback )		1069166	0					
ANR	1069913	Callee	CondorThreads :: set_switch_callback		1069166	0					
ANR	1069914	Identifier	CondorThreads :: set_switch_callback		1069166	0					
ANR	1069915	ArgumentList	thread_switch_callback		1069166	1					
ANR	1069916	Argument	thread_switch_callback		1069166	0					
ANR	1069917	Identifier	thread_switch_callback		1069166	0					
ANR	1069918	ExpressionStatement	daemonContactInfoChanged ( )	2884:1:84010:84036	1069166	29	True				
ANR	1069919	CallExpression	daemonContactInfoChanged ( )		1069166	0					
ANR	1069920	Callee	daemonContactInfoChanged		1069166	0					
ANR	1069921	Identifier	daemonContactInfoChanged		1069166	0					
ANR	1069922	ArgumentList			1069166	1					
ANR	1069923	ReturnType	void		1069166	1					
ANR	1069924	Identifier	DaemonCore :: reconfig		1069166	2					
ANR	1069925	ParameterList			1069166	3					
ANR	1069926	CFGEntryNode	ENTRY		1069166		True				
ANR	1069927	CFGExitNode	EXIT		1069166		True				
ANR	1069928	Symbol	RUNNING_ON_VALGRIND		1069166						
ANR	1069929	Symbol	mapfile -> ParseCanonicalizationFile		1069166						
ANR	1069930	Symbol	D_CONFIG		1069166						
ANR	1069931	Symbol	rand		1069166						
ANR	1069932	Symbol	max_hang_time		1069166						
ANR	1069933	Symbol	secman		1069166						
ANR	1069934	Symbol	SUBSYSTEM_TYPE_DAGMAN		1069166						
ANR	1069935	Symbol	never_use_ccb		1069166						
ANR	1069936	Symbol	dns_interval		1069166						
ANR	1069937	Symbol	m_child_alive_period		1069166						
ANR	1069938	Symbol	m_fake_create_thread		1069166						
ANR	1069939	Symbol	enable_soap_ssl		1069166						
ANR	1069940	Symbol	NULL		1069166						
ANR	1069941	Symbol	* mapfile		1069166						
ANR	1069942	Symbol	this		1069166						
ANR	1069943	Symbol	param_boolean		1069166						
ANR	1069944	Symbol	m_refresh_dns_timer		1069166						
ANR	1069945	Symbol	thread_switch_callback		1069166						
ANR	1069946	Symbol	getSecMan		1069166						
ANR	1069947	Symbol	ppid		1069166						
ANR	1069948	Symbol	m_ccb_listeners		1069166						
ANR	1069949	Symbol	user_mapfile		1069166						
ANR	1069950	Symbol	true		1069166						
ANR	1069951	Symbol	& DaemonCore :: SendAliveToParent		1069166						
ANR	1069952	Symbol	param_integer		1069166						
ANR	1069953	Symbol	MyString		1069166						
ANR	1069954	Symbol	get_mySubSystem		1069166						
ANR	1069955	Symbol	m_invalidate_sessions_via_tcp		1069166						
ANR	1069956	Symbol	soap		1069166						
ANR	1069957	Symbol	mapfile		1069166						
ANR	1069958	Symbol	m_want_send_child_alive		1069166						
ANR	1069959	Symbol	line		1069166						
ANR	1069960	Symbol	CondorThreads :: stop_thread_safe_block		1069166						
ANR	1069961	Symbol	m_dirty_sinful		1069166						
ANR	1069962	Symbol	SUBSYSTEM_TYPE_SCHEDD		1069166						
ANR	1069963	Symbol	subsys		1069166						
ANR	1069964	Symbol	param		1069166						
ANR	1069965	Symbol	blocking		1069166						
ANR	1069966	Symbol	daemonCore		1069166						
ANR	1069967	Symbol	buf . Value		1069166						
ANR	1069968	Symbol	& DaemonCore :: refreshDNS		1069166						
ANR	1069969	Symbol	file_descriptor_safety_limit		1069166						
ANR	1069970	Symbol	m_use_clone_to_create_processes		1069166						
ANR	1069971	Symbol	get_mySubSystem ( ) -> isType		1069166						
ANR	1069972	Symbol	Register_Timer		1069166						
ANR	1069973	Symbol	m_iMaxAcceptsPerCycle		1069166						
ANR	1069974	Symbol	get_mySubSystem ( ) -> getName		1069166						
ANR	1069975	Symbol	credential_mapfile		1069166						
ANR	1069976	Symbol	* get_mySubSystem		1069166						
ANR	1069977	Symbol	D_ALWAYS		1069166						
ANR	1069978	Symbol	false		1069166						
ANR	1069979	Symbol	ccb_addresses		1069166						
ANR	1069980	Symbol	mapfile -> ParseUsermapFile		1069166						
ANR	1069981	Symbol	send_child_alive_timer		1069166						
ANR	1069982	Symbol	buf		1069166						
ANR	1069983	Symbol	m_shared_port_endpoint		1069166						
ANR	1069984	Symbol	maxPipeBuffer		1069166						
ANR	1069985	Symbol	dc_stats		1069166						
ANR	1069986	Symbol	CondorThreads :: start_thread_safe_block		1069166						
ANR	1069987	Symbol	SUBSYSTEM_TYPE_GAHP		1069166						
ANR	1069988	Function	DaemonCore :: InitSharedPort	2887:0:84041:85116							
ANR	1069989	FunctionDef	DaemonCore :: InitSharedPort (bool in_init_dc_command_socket)		1069988	0					
ANR	1069990	CompoundStatement		2889:0:84105:85116	1069988	0					
ANR	1069991	IdentifierDeclStatement	MyString why_not ;	2890:1:84108:84124	1069988	0	True				
ANR	1069992	IdentifierDecl	why_not		1069988	0					
ANR	1069993	IdentifierDeclType	MyString		1069988	0					
ANR	1069994	Identifier	why_not		1069988	1					
ANR	1069995	IdentifierDeclStatement	bool already_open = m_shared_port_endpoint != NULL ;	2891:1:84127:84177	1069988	1	True				
ANR	1069996	IdentifierDecl	already_open = m_shared_port_endpoint != NULL		1069988	0					
ANR	1069997	IdentifierDeclType	bool		1069988	0					
ANR	1069998	Identifier	already_open		1069988	1					
ANR	1069999	AssignmentExpression	already_open = m_shared_port_endpoint != NULL		1069988	2		=			
ANR	1070000	Identifier	already_open		1069988	0					
ANR	1070001	EqualityExpression	m_shared_port_endpoint != NULL		1069988	1		!=			
ANR	1070002	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070003	Identifier	NULL		1069988	1					
ANR	1070004	IfStatement	"if ( SharedPortEndpoint :: UseSharedPort ( & why_not , already_open ) )"		1069988	2					
ANR	1070005	Condition	"SharedPortEndpoint :: UseSharedPort ( & why_not , already_open )"	2893:5:84185:84240	1069988	0	True				
ANR	1070006	CallExpression	"SharedPortEndpoint :: UseSharedPort ( & why_not , already_open )"		1069988	0					
ANR	1070007	Callee	SharedPortEndpoint :: UseSharedPort		1069988	0					
ANR	1070008	Identifier	SharedPortEndpoint :: UseSharedPort		1069988	0					
ANR	1070009	ArgumentList	& why_not		1069988	1					
ANR	1070010	Argument	& why_not		1069988	0					
ANR	1070011	UnaryOperationExpression	& why_not		1069988	0					
ANR	1070012	UnaryOperator	&		1069988	0					
ANR	1070013	Identifier	why_not		1069988	1					
ANR	1070014	Argument	already_open		1069988	1					
ANR	1070015	Identifier	already_open		1069988	0					
ANR	1070016	CompoundStatement		5:64:138:138	1069988	1					
ANR	1070017	IfStatement	if ( ! m_shared_port_endpoint )		1069988	0					
ANR	1070018	Condition	! m_shared_port_endpoint	2894:6:84252:84274	1069988	0	True				
ANR	1070019	UnaryOperationExpression	! m_shared_port_endpoint		1069988	0					
ANR	1070020	UnaryOperator	!		1069988	0					
ANR	1070021	Identifier	m_shared_port_endpoint		1069988	1					
ANR	1070022	CompoundStatement		7:3:177:227	1069988	1					
ANR	1070023	IdentifierDeclStatement	char const * sock_name = m_daemon_sock_name . Value ( ) ;	2895:3:84283:84333	1069988	0	True				
ANR	1070024	IdentifierDecl	* sock_name = m_daemon_sock_name . Value ( )		1069988	0					
ANR	1070025	IdentifierDeclType	char const *		1069988	0					
ANR	1070026	Identifier	sock_name		1069988	1					
ANR	1070027	AssignmentExpression	* sock_name = m_daemon_sock_name . Value ( )		1069988	2		=			
ANR	1070028	Identifier	sock_name		1069988	0					
ANR	1070029	CallExpression	m_daemon_sock_name . Value ( )		1069988	1					
ANR	1070030	Callee	m_daemon_sock_name . Value		1069988	0					
ANR	1070031	MemberAccess	m_daemon_sock_name . Value		1069988	0					
ANR	1070032	Identifier	m_daemon_sock_name		1069988	0					
ANR	1070033	Identifier	Value		1069988	1					
ANR	1070034	ArgumentList			1069988	1					
ANR	1070035	IfStatement	if ( ! * sock_name )		1069988	1					
ANR	1070036	Condition	! * sock_name	2896:7:84342:84352	1069988	0	True				
ANR	1070037	UnaryOperationExpression	! * sock_name		1069988	0					
ANR	1070038	UnaryOperator	!		1069988	0					
ANR	1070039	UnaryOperationExpression	* sock_name		1069988	1					
ANR	1070040	UnaryOperator	*		1069988	0					
ANR	1070041	Identifier	sock_name		1069988	1					
ANR	1070042	ExpressionStatement	sock_name = NULL	2896:21:84356:84372	1069988	1	True				
ANR	1070043	AssignmentExpression	sock_name = NULL		1069988	0		=			
ANR	1070044	Identifier	sock_name		1069988	0					
ANR	1070045	Identifier	NULL		1069988	1					
ANR	1070046	ExpressionStatement	m_shared_port_endpoint = new SharedPortEndpoint ( sock_name )	2897:3:84377:84435	1069988	2	True				
ANR	1070047	AssignmentExpression	m_shared_port_endpoint = new SharedPortEndpoint ( sock_name )		1069988	0		=			
ANR	1070048	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070049	Identifier	sock_name		1069988	1					
ANR	1070050	ExpressionStatement	m_shared_port_endpoint -> InitAndReconfig ( )	2899:2:84443:84484	1069988	1	True				
ANR	1070051	CallExpression	m_shared_port_endpoint -> InitAndReconfig ( )		1069988	0					
ANR	1070052	Callee	m_shared_port_endpoint -> InitAndReconfig		1069988	0					
ANR	1070053	PtrMemberAccess	m_shared_port_endpoint -> InitAndReconfig		1069988	0					
ANR	1070054	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070055	Identifier	InitAndReconfig		1069988	1					
ANR	1070056	ArgumentList			1069988	1					
ANR	1070057	IfStatement	if ( ! m_shared_port_endpoint -> StartListener ( ) )		1069988	2					
ANR	1070058	Condition	! m_shared_port_endpoint -> StartListener ( )	2900:6:84492:84531	1069988	0	True				
ANR	1070059	UnaryOperationExpression	! m_shared_port_endpoint -> StartListener ( )		1069988	0					
ANR	1070060	UnaryOperator	!		1069988	0					
ANR	1070061	CallExpression	m_shared_port_endpoint -> StartListener ( )		1069988	1					
ANR	1070062	Callee	m_shared_port_endpoint -> StartListener		1069988	0					
ANR	1070063	PtrMemberAccess	m_shared_port_endpoint -> StartListener		1069988	0					
ANR	1070064	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070065	Identifier	StartListener		1069988	1					
ANR	1070066	ArgumentList			1069988	1					
ANR	1070067	CompoundStatement		12:49:429:429	1069988	1					
ANR	1070068	ExpressionStatement	"EXCEPT ( ""Failed to start local listener (USE_SHARED_PORT=true)"" )"	2901:3:84540:84603	1069988	0	True				
ANR	1070069	CallExpression	"EXCEPT ( ""Failed to start local listener (USE_SHARED_PORT=true)"" )"		1069988	0					
ANR	1070070	Callee	EXCEPT		1069988	0					
ANR	1070071	Identifier	EXCEPT		1069988	0					
ANR	1070072	ArgumentList	"""Failed to start local listener (USE_SHARED_PORT=true)"""		1069988	1					
ANR	1070073	Argument	"""Failed to start local listener (USE_SHARED_PORT=true)"""		1069988	0					
ANR	1070074	PrimaryExpression	"""Failed to start local listener (USE_SHARED_PORT=true)"""		1069988	0					
ANR	1070075	ElseStatement	else		1069988	0					
ANR	1070076	IfStatement	if ( m_shared_port_endpoint )		1069988	0					
ANR	1070077	Condition	m_shared_port_endpoint	2904:10:84622:84643	1069988	0	True				
ANR	1070078	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070079	CompoundStatement		16:35:541:541	1069988	1					
ANR	1070080	ExpressionStatement	"dprintf ( D_ALWAYS , ""Turning off shared port endpoint because %s\\n"" , why_not . Value ( ) )"	2905:2:84651:84737	1069988	0	True				
ANR	1070081	CallExpression	"dprintf ( D_ALWAYS , ""Turning off shared port endpoint because %s\\n"" , why_not . Value ( ) )"		1069988	0					
ANR	1070082	Callee	dprintf		1069988	0					
ANR	1070083	Identifier	dprintf		1069988	0					
ANR	1070084	ArgumentList	D_ALWAYS		1069988	1					
ANR	1070085	Argument	D_ALWAYS		1069988	0					
ANR	1070086	Identifier	D_ALWAYS		1069988	0					
ANR	1070087	Argument	"""Turning off shared port endpoint because %s\\n"""		1069988	1					
ANR	1070088	PrimaryExpression	"""Turning off shared port endpoint because %s\\n"""		1069988	0					
ANR	1070089	Argument	why_not . Value ( )		1069988	2					
ANR	1070090	CallExpression	why_not . Value ( )		1069988	0					
ANR	1070091	Callee	why_not . Value		1069988	0					
ANR	1070092	MemberAccess	why_not . Value		1069988	0					
ANR	1070093	Identifier	why_not		1069988	0					
ANR	1070094	Identifier	Value		1069988	1					
ANR	1070095	ArgumentList			1069988	1					
ANR	1070096	Statement	delete	2907:2:84741:84746	1069988	1	True				
ANR	1070097	ExpressionStatement	m_shared_port_endpoint	2907:9:84748:84770	1069988	2	True				
ANR	1070098	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070099	ExpressionStatement	m_shared_port_endpoint = NULL	2908:2:84774:84803	1069988	3	True				
ANR	1070100	AssignmentExpression	m_shared_port_endpoint = NULL		1069988	0		=			
ANR	1070101	Identifier	m_shared_port_endpoint		1069988	0					
ANR	1070102	Identifier	NULL		1069988	1					
ANR	1070103	IfStatement	if ( ! in_init_dc_command_socket )		1069988	4					
ANR	1070104	Condition	! in_init_dc_command_socket	2912:6:84932:84957	1069988	0	True				
ANR	1070105	UnaryOperationExpression	! in_init_dc_command_socket		1069988	0					
ANR	1070106	UnaryOperator	!		1069988	0					
ANR	1070107	Identifier	in_init_dc_command_socket		1069988	1					
ANR	1070108	CompoundStatement		24:35:855:855	1069988	1					
ANR	1070109	ExpressionStatement	InitDCCommandSocket ( 1 )	2913:3:84966:84988	1069988	0	True				
ANR	1070110	CallExpression	InitDCCommandSocket ( 1 )		1069988	0					
ANR	1070111	Callee	InitDCCommandSocket		1069988	0					
ANR	1070112	Identifier	InitDCCommandSocket		1069988	0					
ANR	1070113	ArgumentList	1		1069988	1					
ANR	1070114	Argument	1		1069988	0					
ANR	1070115	PrimaryExpression	1		1069988	0					
ANR	1070116	ElseStatement	else		1069988	0					
ANR	1070117	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1069988	0					
ANR	1070118	Condition	DebugFlags & D_FULLDEBUG	2916:10:85007:85030	1069988	0	True				
ANR	1070119	BitAndExpression	DebugFlags & D_FULLDEBUG		1069988	0		&			
ANR	1070120	Identifier	DebugFlags		1069988	0					
ANR	1070121	Identifier	D_FULLDEBUG		1069988	1					
ANR	1070122	CompoundStatement		28:37:928:928	1069988	1					
ANR	1070123	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Not using shared port because %s\\n"" , why_not . Value ( ) )"	2917:2:85038:85111	1069988	0	True				
ANR	1070124	CallExpression	"dprintf ( D_FULLDEBUG , ""Not using shared port because %s\\n"" , why_not . Value ( ) )"		1069988	0					
ANR	1070125	Callee	dprintf		1069988	0					
ANR	1070126	Identifier	dprintf		1069988	0					
ANR	1070127	ArgumentList	D_FULLDEBUG		1069988	1					
ANR	1070128	Argument	D_FULLDEBUG		1069988	0					
ANR	1070129	Identifier	D_FULLDEBUG		1069988	0					
ANR	1070130	Argument	"""Not using shared port because %s\\n"""		1069988	1					
ANR	1070131	PrimaryExpression	"""Not using shared port because %s\\n"""		1069988	0					
ANR	1070132	Argument	why_not . Value ( )		1069988	2					
ANR	1070133	CallExpression	why_not . Value ( )		1069988	0					
ANR	1070134	Callee	why_not . Value		1069988	0					
ANR	1070135	MemberAccess	why_not . Value		1069988	0					
ANR	1070136	Identifier	why_not		1069988	0					
ANR	1070137	Identifier	Value		1069988	1					
ANR	1070138	ArgumentList			1069988	1					
ANR	1070139	ReturnType	void		1069988	1					
ANR	1070140	Identifier	DaemonCore :: InitSharedPort		1069988	2					
ANR	1070141	ParameterList	bool in_init_dc_command_socket		1069988	3					
ANR	1070142	Parameter	bool in_init_dc_command_socket	2888:27:84073:84102	1069988	0	True				
ANR	1070143	ParameterType	bool		1069988	0					
ANR	1070144	Identifier	in_init_dc_command_socket		1069988	1					
ANR	1070145	CFGEntryNode	ENTRY		1069988		True				
ANR	1070146	CFGExitNode	EXIT		1069988		True				
ANR	1070147	Symbol	why_not . Value		1069988						
ANR	1070148	Symbol	NULL		1069988						
ANR	1070149	Symbol	& why_not		1069988						
ANR	1070150	Symbol	m_shared_port_endpoint -> StartListener		1069988						
ANR	1070151	Symbol	D_ALWAYS		1069988						
ANR	1070152	Symbol	DebugFlags		1069988						
ANR	1070153	Symbol	D_FULLDEBUG		1069988						
ANR	1070154	Symbol	sock_name		1069988						
ANR	1070155	Symbol	in_init_dc_command_socket		1069988						
ANR	1070156	Symbol	why_not		1069988						
ANR	1070157	Symbol	* sock_name		1069988						
ANR	1070158	Symbol	* m_shared_port_endpoint		1069988						
ANR	1070159	Symbol	m_daemon_sock_name		1069988						
ANR	1070160	Symbol	m_shared_port_endpoint		1069988						
ANR	1070161	Symbol	m_daemon_sock_name . Value		1069988						
ANR	1070162	Symbol	already_open		1069988						
ANR	1070163	Symbol	SharedPortEndpoint :: UseSharedPort		1069988						
ANR	1070164	Function	DaemonCore :: ReloadSharedPortServerAddr	2921:0:85119:85258							
ANR	1070165	FunctionDef	DaemonCore :: ReloadSharedPortServerAddr ()		1070164	0					
ANR	1070166	CompoundStatement		2923:0:85165:85258	1070164	0					
ANR	1070167	IfStatement	if ( m_shared_port_endpoint )		1070164	0					
ANR	1070168	Condition	m_shared_port_endpoint	2924:5:85172:85193	1070164	0	True				
ANR	1070169	Identifier	m_shared_port_endpoint		1070164	0					
ANR	1070170	CompoundStatement		2:30:31:31	1070164	1					
ANR	1070171	ExpressionStatement	m_shared_port_endpoint -> ReloadSharedPortServerAddr ( )	2925:2:85201:85253	1070164	0	True				
ANR	1070172	CallExpression	m_shared_port_endpoint -> ReloadSharedPortServerAddr ( )		1070164	0					
ANR	1070173	Callee	m_shared_port_endpoint -> ReloadSharedPortServerAddr		1070164	0					
ANR	1070174	PtrMemberAccess	m_shared_port_endpoint -> ReloadSharedPortServerAddr		1070164	0					
ANR	1070175	Identifier	m_shared_port_endpoint		1070164	0					
ANR	1070176	Identifier	ReloadSharedPortServerAddr		1070164	1					
ANR	1070177	ArgumentList			1070164	1					
ANR	1070178	ReturnType	void		1070164	1					
ANR	1070179	Identifier	DaemonCore :: ReloadSharedPortServerAddr		1070164	2					
ANR	1070180	ParameterList			1070164	3					
ANR	1070181	CFGEntryNode	ENTRY		1070164		True				
ANR	1070182	CFGExitNode	EXIT		1070164		True				
ANR	1070183	Symbol	m_shared_port_endpoint		1070164						
ANR	1070184	Function	DaemonCore :: Verify	2929:0:85261:86450							
ANR	1070185	FunctionDef	"DaemonCore :: Verify (char const * command_descrip , DCpermission perm , const condor_sockaddr & addr , const char * fqu)"		1070184	0					
ANR	1070186	CompoundStatement		2931:0:85379:86450	1070184	0					
ANR	1070187	IdentifierDeclStatement	MyString deny_reason ;	2932:1:85382:85402	1070184	0	True				
ANR	1070188	IdentifierDecl	deny_reason		1070184	0					
ANR	1070189	IdentifierDeclType	MyString		1070184	0					
ANR	1070190	Identifier	deny_reason		1070184	1					
ANR	1070191	IdentifierDeclStatement	MyString * allow_reason = NULL ;	2933:1:85450:85479	1070184	1	True				
ANR	1070192	IdentifierDecl	* allow_reason = NULL		1070184	0					
ANR	1070193	IdentifierDeclType	MyString *		1070184	0					
ANR	1070194	Identifier	allow_reason		1070184	1					
ANR	1070195	AssignmentExpression	* allow_reason = NULL		1070184	2		=			
ANR	1070196	Identifier	NULL		1070184	0					
ANR	1070197	Identifier	NULL		1070184	1					
ANR	1070198	IdentifierDeclStatement	MyString allow_reason_buf ;	2934:1:85482:85507	1070184	2	True				
ANR	1070199	IdentifierDecl	allow_reason_buf		1070184	0					
ANR	1070200	IdentifierDeclType	MyString		1070184	0					
ANR	1070201	Identifier	allow_reason_buf		1070184	1					
ANR	1070202	IfStatement	if ( ( DebugFlags & D_SECURITY ) )		1070184	3					
ANR	1070203	Condition	DebugFlags & D_SECURITY	2935:5:85514:85538	1070184	0	True				
ANR	1070204	BitAndExpression	DebugFlags & D_SECURITY		1070184	0		&			
ANR	1070205	Identifier	DebugFlags		1070184	0					
ANR	1070206	Identifier	D_SECURITY		1070184	1					
ANR	1070207	CompoundStatement		5:33:162:162	1070184	1					
ANR	1070208	ExpressionStatement	allow_reason = & allow_reason_buf	2937:2:85603:85635	1070184	0	True				
ANR	1070209	AssignmentExpression	allow_reason = & allow_reason_buf		1070184	0		=			
ANR	1070210	Identifier	allow_reason		1070184	0					
ANR	1070211	UnaryOperationExpression	& allow_reason_buf		1070184	1					
ANR	1070212	UnaryOperator	&		1070184	0					
ANR	1070213	Identifier	allow_reason_buf		1070184	1					
ANR	1070214	IdentifierDeclStatement	"int result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason ) ;"	2940:1:85642:85719	1070184	4	True				
ANR	1070215	IdentifierDecl	"result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		1070184	0					
ANR	1070216	IdentifierDeclType	int		1070184	0					
ANR	1070217	Identifier	result		1070184	1					
ANR	1070218	AssignmentExpression	"result = getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		1070184	2		=			
ANR	1070219	Identifier	result		1070184	0					
ANR	1070220	CallExpression	"getSecMan ( ) -> Verify ( perm , addr , fqu , allow_reason , & deny_reason )"		1070184	1					
ANR	1070221	Callee	getSecMan ( ) -> Verify		1070184	0					
ANR	1070222	PtrMemberAccess	getSecMan ( ) -> Verify		1070184	0					
ANR	1070223	CallExpression	getSecMan ( )		1070184	0					
ANR	1070224	Callee	getSecMan		1070184	0					
ANR	1070225	Identifier	getSecMan		1070184	0					
ANR	1070226	ArgumentList			1070184	1					
ANR	1070227	Identifier	Verify		1070184	1					
ANR	1070228	ArgumentList	perm		1070184	1					
ANR	1070229	Argument	perm		1070184	0					
ANR	1070230	Identifier	perm		1070184	0					
ANR	1070231	Argument	addr		1070184	1					
ANR	1070232	Identifier	addr		1070184	0					
ANR	1070233	Argument	fqu		1070184	2					
ANR	1070234	Identifier	fqu		1070184	0					
ANR	1070235	Argument	allow_reason		1070184	3					
ANR	1070236	Identifier	allow_reason		1070184	0					
ANR	1070237	Argument	& deny_reason		1070184	4					
ANR	1070238	UnaryOperationExpression	& deny_reason		1070184	0					
ANR	1070239	UnaryOperator	&		1070184	0					
ANR	1070240	Identifier	deny_reason		1070184	1					
ANR	1070241	IdentifierDeclStatement	MyString * reason = result ? allow_reason : & deny_reason ;	2942:1:85723:85778	1070184	5	True				
ANR	1070242	IdentifierDecl	* reason = result ? allow_reason : & deny_reason		1070184	0					
ANR	1070243	IdentifierDeclType	MyString *		1070184	0					
ANR	1070244	Identifier	reason		1070184	1					
ANR	1070245	AssignmentExpression	* reason = result ? allow_reason : & deny_reason		1070184	2		=			
ANR	1070246	Identifier	reason		1070184	0					
ANR	1070247	ConditionalExpression	result ? allow_reason : & deny_reason		1070184	1					
ANR	1070248	Condition	result		1070184	0					
ANR	1070249	Identifier	result		1070184	0					
ANR	1070250	Identifier	allow_reason		1070184	1					
ANR	1070251	UnaryOperationExpression	& deny_reason		1070184	2					
ANR	1070252	UnaryOperator	&		1070184	0					
ANR	1070253	Identifier	deny_reason		1070184	1					
ANR	1070254	IdentifierDeclStatement	"char const * result_desc = result ? ""GRANTED"" : ""DENIED"" ;"	2943:1:85781:85836	1070184	6	True				
ANR	1070255	IdentifierDecl	"* result_desc = result ? ""GRANTED"" : ""DENIED"""		1070184	0					
ANR	1070256	IdentifierDeclType	char const *		1070184	0					
ANR	1070257	Identifier	result_desc		1070184	1					
ANR	1070258	AssignmentExpression	"* result_desc = result ? ""GRANTED"" : ""DENIED"""		1070184	2		=			
ANR	1070259	Identifier	result_desc		1070184	0					
ANR	1070260	ConditionalExpression	"result ? ""GRANTED"" : ""DENIED"""		1070184	1					
ANR	1070261	Condition	result		1070184	0					
ANR	1070262	Identifier	result		1070184	0					
ANR	1070263	PrimaryExpression	"""GRANTED"""		1070184	1					
ANR	1070264	PrimaryExpression	"""DENIED"""		1070184	2					
ANR	1070265	IfStatement	if ( reason )		1070184	7					
ANR	1070266	Condition	reason	2945:5:85844:85849	1070184	0	True				
ANR	1070267	Identifier	reason		1070184	0					
ANR	1070268	CompoundStatement		16:2:477:507	1070184	1					
ANR	1070269	IdentifierDeclStatement	char ipstr [ IP_STRING_BUF_SIZE ] ;	2946:2:85857:85887	1070184	0	True				
ANR	1070270	IdentifierDecl	ipstr [ IP_STRING_BUF_SIZE ]		1070184	0					
ANR	1070271	IdentifierDeclType	char [ IP_STRING_BUF_SIZE ]		1070184	0					
ANR	1070272	Identifier	ipstr		1070184	1					
ANR	1070273	Identifier	IP_STRING_BUF_SIZE		1070184	2					
ANR	1070274	ExpressionStatement	"strcpy ( ipstr , ""(unknown)"" )"	2947:2:85891:85917	1070184	1	True				
ANR	1070275	CallExpression	"strcpy ( ipstr , ""(unknown)"" )"		1070184	0					
ANR	1070276	Callee	strcpy		1070184	0					
ANR	1070277	Identifier	strcpy		1070184	0					
ANR	1070278	ArgumentList	ipstr		1070184	1					
ANR	1070279	Argument	ipstr		1070184	0					
ANR	1070280	Identifier	ipstr		1070184	0					
ANR	1070281	Argument	"""(unknown)"""		1070184	1					
ANR	1070282	PrimaryExpression	"""(unknown)"""		1070184	0					
ANR	1070283	ExpressionStatement	"addr . to_ip_string ( ipstr , sizeof ( ipstr ) )"	2948:2:85921:85960	1070184	2	True				
ANR	1070284	CallExpression	"addr . to_ip_string ( ipstr , sizeof ( ipstr ) )"		1070184	0					
ANR	1070285	Callee	addr . to_ip_string		1070184	0					
ANR	1070286	MemberAccess	addr . to_ip_string		1070184	0					
ANR	1070287	Identifier	addr		1070184	0					
ANR	1070288	Identifier	to_ip_string		1070184	1					
ANR	1070289	ArgumentList	ipstr		1070184	1					
ANR	1070290	Argument	ipstr		1070184	0					
ANR	1070291	Identifier	ipstr		1070184	0					
ANR	1070292	Argument	sizeof ( ipstr )		1070184	1					
ANR	1070293	SizeofExpression	sizeof ( ipstr )		1070184	0					
ANR	1070294	Sizeof	sizeof		1070184	0					
ANR	1070295	SizeofOperand	ipstr		1070184	1					
ANR	1070296	Statement	dprintf	2953:2:86130:86136	1070184	3	True				
ANR	1070297	Statement	(	2953:9:86137:86137	1070184	4	True				
ANR	1070298	Statement	D_ALWAYS	2953:11:86139:86146	1070184	5	True				
ANR	1070299	Statement	","	2953:19:86147:86147	1070184	6	True				
ANR	1070300	Statement	"""PERMISSION %s to %s from host %s for %s, """	2954:5:86154:86196	1070184	7	True				
ANR	1070301	Statement	"""access level %s: reason: %s\\n"""	2955:5:86203:86233	1070184	8	True				
ANR	1070302	Statement	","	2955:36:86234:86234	1070184	9	True				
ANR	1070303	Statement	result_desc	2956:5:86241:86251	1070184	10	True				
ANR	1070304	Statement	","	2956:16:86252:86252	1070184	11	True				
ANR	1070305	Statement	(	2957:5:86259:86259	1070184	12	True				
ANR	1070306	Statement	fqu	2957:6:86260:86262	1070184	13	True				
ANR	1070307	Statement	&&	2957:10:86264:86265	1070184	14	True				
ANR	1070308	Statement	*	2957:13:86267:86267	1070184	15	True				
ANR	1070309	Statement	fqu	2957:14:86268:86270	1070184	16	True				
ANR	1070310	Statement	)	2957:17:86271:86271	1070184	17	True				
ANR	1070311	Statement	?	2957:19:86273:86273	1070184	18	True				
ANR	1070312	Label	fqu :	2957:21:86275:86279	1070184	19	True				
ANR	1070313	Identifier	fqu		1070184	0					
ANR	1070314	Statement	"""unauthenticated user"""	2957:27:86281:86302	1070184	20	True				
ANR	1070315	Statement	","	2957:49:86303:86303	1070184	21	True				
ANR	1070316	Statement	ipstr	2958:5:86310:86314	1070184	22	True				
ANR	1070317	Statement	","	2958:10:86315:86315	1070184	23	True				
ANR	1070318	Statement	command_descrip	2959:5:86322:86336	1070184	24	True				
ANR	1070319	Statement	?	2959:21:86338:86338	1070184	25	True				
ANR	1070320	Label	command_descrip :	2959:23:86340:86356	1070184	26	True				
ANR	1070321	Identifier	command_descrip		1070184	0					
ANR	1070322	Statement	"""unspecified operation"""	2959:41:86358:86380	1070184	27	True				
ANR	1070323	Statement	","	2959:64:86381:86381	1070184	28	True				
ANR	1070324	Statement	PermString	2960:5:86388:86397	1070184	29	True				
ANR	1070325	Statement	(	2960:15:86398:86398	1070184	30	True				
ANR	1070326	Statement	perm	2960:16:86399:86402	1070184	31	True				
ANR	1070327	Statement	)	2960:20:86403:86403	1070184	32	True				
ANR	1070328	Statement	","	2960:21:86404:86404	1070184	33	True				
ANR	1070329	Statement	reason	2961:5:86411:86416	1070184	34	True				
ANR	1070330	Statement	->	2961:11:86417:86418	1070184	35	True				
ANR	1070331	Statement	Value	2961:13:86419:86423	1070184	36	True				
ANR	1070332	Statement	(	2961:18:86424:86424	1070184	37	True				
ANR	1070333	Statement	)	2961:19:86425:86425	1070184	38	True				
ANR	1070334	Statement	)	2961:21:86427:86427	1070184	39	True				
ANR	1070335	ExpressionStatement		2961:22:86428:86428	1070184	40	True				
ANR	1070336	ReturnStatement	return result ;	2964:1:86435:86448	1070184	8	True				
ANR	1070337	Identifier	result		1070184	0					
ANR	1070338	ReturnType	int		1070184	1					
ANR	1070339	Identifier	DaemonCore :: Verify		1070184	2					
ANR	1070340	ParameterList	"char const * command_descrip , DCpermission perm , const condor_sockaddr & addr , const char * fqu"		1070184	3					
ANR	1070341	Parameter	char const * command_descrip	2930:19:85284:85310	1070184	0	True				
ANR	1070342	ParameterType	char const *		1070184	0					
ANR	1070343	Identifier	command_descrip		1070184	1					
ANR	1070344	Parameter	DCpermission perm	2930:47:85312:85328	1070184	1	True				
ANR	1070345	ParameterType	DCpermission		1070184	0					
ANR	1070346	Identifier	perm		1070184	1					
ANR	1070347	Parameter	const condor_sockaddr & addr	2930:66:85331:85357	1070184	2	True				
ANR	1070348	ParameterType	const condor_sockaddr &		1070184	0					
ANR	1070349	Identifier	addr		1070184	1					
ANR	1070350	Parameter	const char * fqu	2930:95:85360:85375	1070184	3	True				
ANR	1070351	ParameterType	const char *		1070184	0					
ANR	1070352	Identifier	fqu		1070184	1					
ANR	1070353	CFGEntryNode	ENTRY		1070184		True				
ANR	1070354	CFGExitNode	EXIT		1070184		True				
ANR	1070355	Symbol	getSecMan ( ) -> Verify		1070184						
ANR	1070356	Symbol	reason		1070184						
ANR	1070357	Symbol	NULL		1070184						
ANR	1070358	Symbol	perm		1070184						
ANR	1070359	Symbol	D_SECURITY		1070184						
ANR	1070360	Symbol	result_desc		1070184						
ANR	1070361	Symbol	command_descrip		1070184						
ANR	1070362	Symbol	DebugFlags		1070184						
ANR	1070363	Symbol	fqu		1070184						
ANR	1070364	Symbol	& allow_reason_buf		1070184						
ANR	1070365	Symbol	* getSecMan		1070184						
ANR	1070366	Symbol	deny_reason		1070184						
ANR	1070367	Symbol	allow_reason		1070184						
ANR	1070368	Symbol	allow_reason_buf		1070184						
ANR	1070369	Symbol	getSecMan		1070184						
ANR	1070370	Symbol	result		1070184						
ANR	1070371	Symbol	ipstr		1070184						
ANR	1070372	Symbol	addr		1070184						
ANR	1070373	Symbol	& deny_reason		1070184						
ANR	1070374	Function	DaemonCore :: Wake_up_select	2967:0:86453:87232							
ANR	1070375	FunctionDef	DaemonCore :: Wake_up_select ()		1070374	0					
ANR	1070376	CompoundStatement		2969:0:86487:87232	1070374	0					
ANR	1070377	IfStatement	if ( CondorThreads :: get_tid ( ) <= 1 )		1070374	0					
ANR	1070378	Condition	CondorThreads :: get_tid ( ) <= 1	2976:5:86949:86977	1070374	0	True				
ANR	1070379	RelationalExpression	CondorThreads :: get_tid ( ) <= 1		1070374	0		<=			
ANR	1070380	CallExpression	CondorThreads :: get_tid ( )		1070374	0					
ANR	1070381	Callee	CondorThreads :: get_tid		1070374	0					
ANR	1070382	Identifier	CondorThreads :: get_tid		1070374	0					
ANR	1070383	ArgumentList			1070374	1					
ANR	1070384	PrimaryExpression	1		1070374	1					
ANR	1070385	CompoundStatement		8:36:492:492	1070374	1					
ANR	1070386	IfStatement	if ( GetCurrentThreadId ( ) != dcmainThreadId )		1070374	0					
ANR	1070387	Condition	GetCurrentThreadId ( ) != dcmainThreadId	2978:6:87001:87038	1070374	0	True				
ANR	1070388	EqualityExpression	GetCurrentThreadId ( ) != dcmainThreadId		1070374	0		!=			
ANR	1070389	CallExpression	GetCurrentThreadId ( )		1070374	0					
ANR	1070390	Callee	GetCurrentThreadId		1070374	0					
ANR	1070391	Identifier	GetCurrentThreadId		1070374	0					
ANR	1070392	ArgumentList			1070374	1					
ANR	1070393	Identifier	dcmainThreadId		1070374	1					
ANR	1070394	CompoundStatement		10:46:553:553	1070374	1					
ANR	1070395	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"" , GetCurrentThreadId ( ) )"	2979:3:87046:87169	1070374	0	True				
ANR	1070396	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"" , GetCurrentThreadId ( ) )"		1070374	0					
ANR	1070397	Callee	dprintf		1070374	0					
ANR	1070398	Identifier	dprintf		1070374	0					
ANR	1070399	ArgumentList	D_ALWAYS		1070374	1					
ANR	1070400	Argument	D_ALWAYS		1070374	0					
ANR	1070401	Identifier	D_ALWAYS		1070374	0					
ANR	1070402	Argument	"""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"""		1070374	1					
ANR	1070403	PrimaryExpression	"""DaemonCore::Wake_up_select called from an unknown thread. windows tid = %d"""		1070374	0					
ANR	1070404	Argument	GetCurrentThreadId ( )		1070374	2					
ANR	1070405	CallExpression	GetCurrentThreadId ( )		1070374	0					
ANR	1070406	Callee	GetCurrentThreadId		1070374	0					
ANR	1070407	Identifier	GetCurrentThreadId		1070374	0					
ANR	1070408	ArgumentList			1070374	1					
ANR	1070409	ReturnStatement	return false ;	2984:2:87185:87197	1070374	1	True				
ANR	1070410	Identifier	false		1070374	0					
ANR	1070411	ReturnStatement	return Do_Wake_up_select ( ) ;	2987:1:87204:87230	1070374	1	True				
ANR	1070412	CallExpression	Do_Wake_up_select ( )		1070374	0					
ANR	1070413	Callee	Do_Wake_up_select		1070374	0					
ANR	1070414	Identifier	Do_Wake_up_select		1070374	0					
ANR	1070415	ArgumentList			1070374	1					
ANR	1070416	ReturnType	bool		1070374	1					
ANR	1070417	Identifier	DaemonCore :: Wake_up_select		1070374	2					
ANR	1070418	ParameterList			1070374	3					
ANR	1070419	CFGEntryNode	ENTRY		1070374		True				
ANR	1070420	CFGExitNode	EXIT		1070374		True				
ANR	1070421	Symbol	CondorThreads :: get_tid		1070374						
ANR	1070422	Symbol	GetCurrentThreadId		1070374						
ANR	1070423	Symbol	D_ALWAYS		1070374						
ANR	1070424	Symbol	false		1070374						
ANR	1070425	Symbol	dcmainThreadId		1070374						
ANR	1070426	Symbol	Do_Wake_up_select		1070374						
ANR	1070427	Function	DaemonCore :: Do_Wake_up_select	2990:0:87235:88202							
ANR	1070428	FunctionDef	DaemonCore :: Do_Wake_up_select ()		1070427	0					
ANR	1070429	CompoundStatement		2992:0:87272:88202	1070427	0					
ANR	1070430	IdentifierDeclStatement	bool fSuccess = true ;	2998:1:87548:87568	1070427	0	True				
ANR	1070431	IdentifierDecl	fSuccess = true		1070427	0					
ANR	1070432	IdentifierDeclType	bool		1070427	0					
ANR	1070433	Identifier	fSuccess		1070427	1					
ANR	1070434	AssignmentExpression	fSuccess = true		1070427	2		=			
ANR	1070435	Identifier	true		1070427	0					
ANR	1070436	Identifier	true		1070427	1					
ANR	1070437	IfStatement	if ( ! async_pipe_signal )		1070427	1					
ANR	1070438	Condition	! async_pipe_signal	2999:6:87620:87638	1070427	0	True				
ANR	1070439	UnaryOperationExpression	! async_pipe_signal		1070427	0					
ANR	1070440	UnaryOperator	!		1070427	0					
ANR	1070441	Identifier	async_pipe_signal		1070427	1					
ANR	1070442	CompoundStatement		8:27:368:368	1070427	1					
ANR	1070443	ExpressionStatement	async_pipe_signal = true	3003:2:87846:87870	1070427	0	True				
ANR	1070444	AssignmentExpression	async_pipe_signal = true		1070427	0		=			
ANR	1070445	Identifier	async_pipe_signal		1070427	0					
ANR	1070446	Identifier	true		1070427	1					
ANR	1070447	IfStatement	if ( GetCurrentThreadId ( ) == dcmainThreadId )		1070427	1					
ANR	1070448	Condition	GetCurrentThreadId ( ) == dcmainThreadId	3005:6:87891:87928	1070427	0	True				
ANR	1070449	EqualityExpression	GetCurrentThreadId ( ) == dcmainThreadId		1070427	0		==			
ANR	1070450	CallExpression	GetCurrentThreadId ( )		1070427	0					
ANR	1070451	Callee	GetCurrentThreadId		1070427	0					
ANR	1070452	Identifier	GetCurrentThreadId		1070427	0					
ANR	1070453	ArgumentList			1070427	1					
ANR	1070454	Identifier	dcmainThreadId		1070427	1					
ANR	1070455	CompoundStatement		14:46:658:658	1070427	1					
ANR	1070456	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."" )"	3006:3:87936:88038	1070427	0	True				
ANR	1070457	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."" )"		1070427	0					
ANR	1070458	Callee	dprintf		1070427	0					
ANR	1070459	Identifier	dprintf		1070427	0					
ANR	1070460	ArgumentList	D_ALWAYS		1070427	1					
ANR	1070461	Argument	D_ALWAYS		1070427	0					
ANR	1070462	Identifier	D_ALWAYS		1070427	0					
ANR	1070463	Argument	"""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."""		1070427	1					
ANR	1070464	PrimaryExpression	"""DaemonCore::Do_Wake_up_select called from main thread. this should never happen."""		1070427	0					
ANR	1070465	ReturnStatement	return false ;	3007:3:88043:88055	1070427	1	True				
ANR	1070466	Identifier	false		1070427	0					
ANR	1070467	ExpressionStatement	"fSuccess = send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"	3009:2:88063:88121	1070427	2	True				
ANR	1070468	AssignmentExpression	"fSuccess = send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"		1070427	0		=			
ANR	1070469	Identifier	fSuccess		1070427	0					
ANR	1070470	RelationalExpression	"send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 ) > 0"		1070427	1		>			
ANR	1070471	CallExpression	"send ( async_pipe [ 1 ] . get_socket ( ) , ""!"" , 1 , 0 )"		1070427	0					
ANR	1070472	Callee	send		1070427	0					
ANR	1070473	Identifier	send		1070427	0					
ANR	1070474	ArgumentList	async_pipe [ 1 ] . get_socket ( )		1070427	1					
ANR	1070475	Argument	async_pipe [ 1 ] . get_socket ( )		1070427	0					
ANR	1070476	CallExpression	async_pipe [ 1 ] . get_socket ( )		1070427	0					
ANR	1070477	Callee	async_pipe [ 1 ] . get_socket		1070427	0					
ANR	1070478	MemberAccess	async_pipe [ 1 ] . get_socket		1070427	0					
ANR	1070479	ArrayIndexing	async_pipe [ 1 ]		1070427	0					
ANR	1070480	Identifier	async_pipe		1070427	0					
ANR	1070481	PrimaryExpression	1		1070427	1					
ANR	1070482	Identifier	get_socket		1070427	1					
ANR	1070483	ArgumentList			1070427	1					
ANR	1070484	Argument	"""!"""		1070427	1					
ANR	1070485	PrimaryExpression	"""!"""		1070427	0					
ANR	1070486	Argument	1		1070427	2					
ANR	1070487	PrimaryExpression	1		1070427	0					
ANR	1070488	Argument	0		1070427	3					
ANR	1070489	PrimaryExpression	0		1070427	0					
ANR	1070490	PrimaryExpression	0		1070427	1					
ANR	1070491	ReturnStatement	return fSuccess ;	3014:1:88185:88200	1070427	2	True				
ANR	1070492	Identifier	fSuccess		1070427	0					
ANR	1070493	ReturnType	bool		1070427	1					
ANR	1070494	Identifier	DaemonCore :: Do_Wake_up_select		1070427	2					
ANR	1070495	ParameterList			1070427	3					
ANR	1070496	CFGEntryNode	ENTRY		1070427		True				
ANR	1070497	CFGExitNode	EXIT		1070427		True				
ANR	1070498	Symbol	* async_pipe		1070427						
ANR	1070499	Symbol	async_pipe_signal		1070427						
ANR	1070500	Symbol	GetCurrentThreadId		1070427						
ANR	1070501	Symbol	fSuccess		1070427						
ANR	1070502	Symbol	true		1070427						
ANR	1070503	Symbol	D_ALWAYS		1070427						
ANR	1070504	Symbol	false		1070427						
ANR	1070505	Symbol	async_pipe [ 1 ] . get_socket		1070427						
ANR	1070506	Symbol	dcmainThreadId		1070427						
ANR	1070507	Symbol	async_pipe		1070427						
ANR	1070508	Symbol	send		1070427						
ANR	1070509	Function	DaemonCore :: Driver	3019:0:88347:109909							
ANR	1070510	FunctionDef	DaemonCore :: Driver ()		1070509	0					
ANR	1070511	CompoundStatement		3020:0:88373:109909	1070509	0					
ANR	1070512	IdentifierDeclStatement	Selector selector ;	3021:1:88376:88393	1070509	0	True				
ANR	1070513	IdentifierDecl	selector		1070509	0					
ANR	1070514	IdentifierDeclType	Selector		1070509	0					
ANR	1070515	Identifier	selector		1070509	1					
ANR	1070516	IdentifierDeclStatement	int i ;	3022:1:88396:88403	1070509	1	True				
ANR	1070517	IdentifierDecl	i		1070509	0					
ANR	1070518	IdentifierDeclType	int		1070509	0					
ANR	1070519	Identifier	i		1070509	1					
ANR	1070520	IdentifierDeclStatement	int tmpErrno ;	3023:1:88406:88420	1070509	2	True				
ANR	1070521	IdentifierDecl	tmpErrno		1070509	0					
ANR	1070522	IdentifierDeclType	int		1070509	0					
ANR	1070523	Identifier	tmpErrno		1070509	1					
ANR	1070524	IdentifierDeclStatement	time_t timeout ;	3024:1:88423:88438	1070509	3	True				
ANR	1070525	IdentifierDecl	timeout		1070509	0					
ANR	1070526	IdentifierDeclType	time_t		1070509	0					
ANR	1070527	Identifier	timeout		1070509	1					
ANR	1070528	IdentifierDeclStatement	time_t min_deadline ;	3025:1:88441:88460	1070509	4	True				
ANR	1070529	IdentifierDecl	min_deadline		1070509	0					
ANR	1070530	IdentifierDeclType	time_t		1070509	0					
ANR	1070531	Identifier	min_deadline		1070509	1					
ANR	1070532	IdentifierDeclStatement	"sigset_t fullset , emptyset ;"	3028:1:88478:88504	1070509	5	True				
ANR	1070533	IdentifierDecl	fullset		1070509	0					
ANR	1070534	IdentifierDeclType	sigset_t		1070509	0					
ANR	1070535	Identifier	fullset		1070509	1					
ANR	1070536	IdentifierDecl	emptyset		1070509	1					
ANR	1070537	IdentifierDeclType	sigset_t		1070509	0					
ANR	1070538	Identifier	emptyset		1070509	1					
ANR	1070539	ExpressionStatement	sigfillset ( & fullset )	3029:1:88507:88529	1070509	6	True				
ANR	1070540	CallExpression	sigfillset ( & fullset )		1070509	0					
ANR	1070541	Callee	sigfillset		1070509	0					
ANR	1070542	Identifier	sigfillset		1070509	0					
ANR	1070543	ArgumentList	& fullset		1070509	1					
ANR	1070544	Argument	& fullset		1070509	0					
ANR	1070545	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070546	UnaryOperator	&		1070509	0					
ANR	1070547	Identifier	fullset		1070509	1					
ANR	1070548	ExpressionStatement	"sigdelset ( & fullset , SIGSEGV )"	3031:2:88591:88619	1070509	7	True				
ANR	1070549	CallExpression	"sigdelset ( & fullset , SIGSEGV )"		1070509	0					
ANR	1070550	Callee	sigdelset		1070509	0					
ANR	1070551	Identifier	sigdelset		1070509	0					
ANR	1070552	ArgumentList	& fullset		1070509	1					
ANR	1070553	Argument	& fullset		1070509	0					
ANR	1070554	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070555	UnaryOperator	&		1070509	0					
ANR	1070556	Identifier	fullset		1070509	1					
ANR	1070557	Argument	SIGSEGV		1070509	1					
ANR	1070558	Identifier	SIGSEGV		1070509	0					
ANR	1070559	ExpressionStatement	"sigdelset ( & fullset , SIGABRT )"	3032:2:88657:88685	1070509	8	True				
ANR	1070560	CallExpression	"sigdelset ( & fullset , SIGABRT )"		1070509	0					
ANR	1070561	Callee	sigdelset		1070509	0					
ANR	1070562	Identifier	sigdelset		1070509	0					
ANR	1070563	ArgumentList	& fullset		1070509	1					
ANR	1070564	Argument	& fullset		1070509	0					
ANR	1070565	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070566	UnaryOperator	&		1070509	0					
ANR	1070567	Identifier	fullset		1070509	1					
ANR	1070568	Argument	SIGABRT		1070509	1					
ANR	1070569	Identifier	SIGABRT		1070509	0					
ANR	1070570	ExpressionStatement	"sigdelset ( & fullset , SIGILL )"	3033:2:88729:88756	1070509	9	True				
ANR	1070571	CallExpression	"sigdelset ( & fullset , SIGILL )"		1070509	0					
ANR	1070572	Callee	sigdelset		1070509	0					
ANR	1070573	Identifier	sigdelset		1070509	0					
ANR	1070574	ArgumentList	& fullset		1070509	1					
ANR	1070575	Argument	& fullset		1070509	0					
ANR	1070576	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070577	UnaryOperator	&		1070509	0					
ANR	1070578	Identifier	fullset		1070509	1					
ANR	1070579	Argument	SIGILL		1070509	1					
ANR	1070580	Identifier	SIGILL		1070509	0					
ANR	1070581	ExpressionStatement	"sigdelset ( & fullset , SIGBUS )"	3034:2:88795:88822	1070509	10	True				
ANR	1070582	CallExpression	"sigdelset ( & fullset , SIGBUS )"		1070509	0					
ANR	1070583	Callee	sigdelset		1070509	0					
ANR	1070584	Identifier	sigdelset		1070509	0					
ANR	1070585	ArgumentList	& fullset		1070509	1					
ANR	1070586	Argument	& fullset		1070509	0					
ANR	1070587	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070588	UnaryOperator	&		1070509	0					
ANR	1070589	Identifier	fullset		1070509	1					
ANR	1070590	Argument	SIGBUS		1070509	1					
ANR	1070591	Identifier	SIGBUS		1070509	0					
ANR	1070592	ExpressionStatement	"sigdelset ( & fullset , SIGFPE )"	3035:2:88861:88888	1070509	11	True				
ANR	1070593	CallExpression	"sigdelset ( & fullset , SIGFPE )"		1070509	0					
ANR	1070594	Callee	sigdelset		1070509	0					
ANR	1070595	Identifier	sigdelset		1070509	0					
ANR	1070596	ArgumentList	& fullset		1070509	1					
ANR	1070597	Argument	& fullset		1070509	0					
ANR	1070598	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070599	UnaryOperator	&		1070509	0					
ANR	1070600	Identifier	fullset		1070509	1					
ANR	1070601	Argument	SIGFPE		1070509	1					
ANR	1070602	Identifier	SIGFPE		1070509	0					
ANR	1070603	ExpressionStatement	"sigdelset ( & fullset , SIGTRAP )"	3036:2:88927:88955	1070509	12	True				
ANR	1070604	CallExpression	"sigdelset ( & fullset , SIGTRAP )"		1070509	0					
ANR	1070605	Callee	sigdelset		1070509	0					
ANR	1070606	Identifier	sigdelset		1070509	0					
ANR	1070607	ArgumentList	& fullset		1070509	1					
ANR	1070608	Argument	& fullset		1070509	0					
ANR	1070609	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070610	UnaryOperator	&		1070509	0					
ANR	1070611	Identifier	fullset		1070509	1					
ANR	1070612	Argument	SIGTRAP		1070509	1					
ANR	1070613	Identifier	SIGTRAP		1070509	0					
ANR	1070614	ExpressionStatement	"sigdelset ( & fullset , SIGPROF )"	3037:2:88999:89027	1070509	13	True				
ANR	1070615	CallExpression	"sigdelset ( & fullset , SIGPROF )"		1070509	0					
ANR	1070616	Callee	sigdelset		1070509	0					
ANR	1070617	Identifier	sigdelset		1070509	0					
ANR	1070618	ArgumentList	& fullset		1070509	1					
ANR	1070619	Argument	& fullset		1070509	0					
ANR	1070620	UnaryOperationExpression	& fullset		1070509	0					
ANR	1070621	UnaryOperator	&		1070509	0					
ANR	1070622	Identifier	fullset		1070509	1					
ANR	1070623	Argument	SIGPROF		1070509	1					
ANR	1070624	Identifier	SIGPROF		1070509	0					
ANR	1070625	ExpressionStatement	sigemptyset ( & emptyset )	3039:1:89052:89076	1070509	14	True				
ANR	1070626	CallExpression	sigemptyset ( & emptyset )		1070509	0					
ANR	1070627	Callee	sigemptyset		1070509	0					
ANR	1070628	Identifier	sigemptyset		1070509	0					
ANR	1070629	ArgumentList	& emptyset		1070509	1					
ANR	1070630	Argument	& emptyset		1070509	0					
ANR	1070631	UnaryOperationExpression	& emptyset		1070509	0					
ANR	1070632	UnaryOperator	&		1070509	0					
ANR	1070633	Identifier	emptyset		1070509	1					
ANR	1070634	IdentifierDeclStatement	char asyncpipe_buf [ 10 ] ;	3040:1:89079:89101	1070509	15	True				
ANR	1070635	IdentifierDecl	asyncpipe_buf [ 10 ]		1070509	0					
ANR	1070636	IdentifierDeclType	char [ 10 ]		1070509	0					
ANR	1070637	Identifier	asyncpipe_buf		1070509	1					
ANR	1070638	PrimaryExpression	10		1070509	2					
ANR	1070639	IfStatement	"if ( param_boolean ( ""ENABLE_STDOUT_TESTING"" , false ) )"		1070509	16					
ANR	1070640	Condition	"param_boolean ( ""ENABLE_STDOUT_TESTING"" , false )"	3043:6:89117:89163	1070509	0	True				
ANR	1070641	CallExpression	"param_boolean ( ""ENABLE_STDOUT_TESTING"" , false )"		1070509	0					
ANR	1070642	Callee	param_boolean		1070509	0					
ANR	1070643	Identifier	param_boolean		1070509	0					
ANR	1070644	ArgumentList	"""ENABLE_STDOUT_TESTING"""		1070509	1					
ANR	1070645	Argument	"""ENABLE_STDOUT_TESTING"""		1070509	0					
ANR	1070646	PrimaryExpression	"""ENABLE_STDOUT_TESTING"""		1070509	0					
ANR	1070647	Argument	false		1070509	1					
ANR	1070648	Identifier	false		1070509	0					
ANR	1070649	CompoundStatement		25:1:794:794	1070509	1					
ANR	1070650	ExpressionStatement	"dprintf ( D_ALWAYS , ""Testing stdout & stderr\\n"" )"	3045:2:89172:89220	1070509	0	True				
ANR	1070651	CallExpression	"dprintf ( D_ALWAYS , ""Testing stdout & stderr\\n"" )"		1070509	0					
ANR	1070652	Callee	dprintf		1070509	0					
ANR	1070653	Identifier	dprintf		1070509	0					
ANR	1070654	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070655	Argument	D_ALWAYS		1070509	0					
ANR	1070656	Identifier	D_ALWAYS		1070509	0					
ANR	1070657	Argument	"""Testing stdout & stderr\\n"""		1070509	1					
ANR	1070658	PrimaryExpression	"""Testing stdout & stderr\\n"""		1070509	0					
ANR	1070659	CompoundStatement		31:3:945:978	1070509	1					
ANR	1070660	IdentifierDeclStatement	char buf [ 1024 ] ;	3047:3:89229:89243	1070509	0	True				
ANR	1070661	IdentifierDecl	buf [ 1024 ]		1070509	0					
ANR	1070662	IdentifierDeclType	char [ 1024 ]		1070509	0					
ANR	1070663	Identifier	buf		1070509	1					
ANR	1070664	PrimaryExpression	1024		1070509	2					
ANR	1070665	ExpressionStatement	"memset ( buf , 0 , sizeof ( buf ) )"	3048:3:89248:89276	1070509	1	True				
ANR	1070666	CallExpression	"memset ( buf , 0 , sizeof ( buf ) )"		1070509	0					
ANR	1070667	Callee	memset		1070509	0					
ANR	1070668	Identifier	memset		1070509	0					
ANR	1070669	ArgumentList	buf		1070509	1					
ANR	1070670	Argument	buf		1070509	0					
ANR	1070671	Identifier	buf		1070509	0					
ANR	1070672	Argument	0		1070509	1					
ANR	1070673	PrimaryExpression	0		1070509	0					
ANR	1070674	Argument	sizeof ( buf )		1070509	2					
ANR	1070675	SizeofExpression	sizeof ( buf )		1070509	0					
ANR	1070676	Sizeof	sizeof		1070509	0					
ANR	1070677	SizeofOperand	buf		1070509	1					
ANR	1070678	IdentifierDeclStatement	"bool do_out = true , do_err = true ;"	3049:3:89281:89314	1070509	2	True				
ANR	1070679	IdentifierDecl	do_out = true		1070509	0					
ANR	1070680	IdentifierDeclType	bool		1070509	0					
ANR	1070681	Identifier	do_out		1070509	1					
ANR	1070682	AssignmentExpression	do_out = true		1070509	2		=			
ANR	1070683	Identifier	true		1070509	0					
ANR	1070684	Identifier	true		1070509	1					
ANR	1070685	IdentifierDecl	do_err = true		1070509	1					
ANR	1070686	IdentifierDeclType	bool		1070509	0					
ANR	1070687	Identifier	do_err		1070509	1					
ANR	1070688	AssignmentExpression	do_err = true		1070509	2		=			
ANR	1070689	Identifier	true		1070509	0					
ANR	1070690	Identifier	true		1070509	1					
ANR	1070691	IdentifierDeclStatement	"bool do_fd1 = true , do_fd2 = true ;"	3050:3:89319:89352	1070509	3	True				
ANR	1070692	IdentifierDecl	do_fd1 = true		1070509	0					
ANR	1070693	IdentifierDeclType	bool		1070509	0					
ANR	1070694	Identifier	do_fd1		1070509	1					
ANR	1070695	AssignmentExpression	do_fd1 = true		1070509	2		=			
ANR	1070696	Identifier	true		1070509	0					
ANR	1070697	Identifier	true		1070509	1					
ANR	1070698	IdentifierDecl	do_fd2 = true		1070509	1					
ANR	1070699	IdentifierDeclType	bool		1070509	0					
ANR	1070700	Identifier	do_fd2		1070509	1					
ANR	1070701	AssignmentExpression	do_fd2 = true		1070509	2		=			
ANR	1070702	Identifier	true		1070509	0					
ANR	1070703	Identifier	true		1070509	1					
ANR	1070704	ForStatement	for ( i = 0 ; i < 16 * 1024 ; i ++ )		1070509	4					
ANR	1070705	ForInit	i = 0 ;	3051:9:89363:89366	1070509	0	True				
ANR	1070706	AssignmentExpression	i = 0		1070509	0		=			
ANR	1070707	Identifier	i		1070509	0					
ANR	1070708	PrimaryExpression	0		1070509	1					
ANR	1070709	Condition	i < 16 * 1024	3051:15:89369:89377	1070509	1	True				
ANR	1070710	RelationalExpression	i < 16 * 1024		1070509	0		<			
ANR	1070711	Identifier	i		1070509	0					
ANR	1070712	MultiplicativeExpression	16 * 1024		1070509	1		*			
ANR	1070713	PrimaryExpression	16		1070509	0					
ANR	1070714	PrimaryExpression	1024		1070509	1					
ANR	1070715	PostIncDecOperationExpression	i ++	3051:27:89381:89383	1070509	2	True				
ANR	1070716	Identifier	i		1070509	0					
ANR	1070717	IncDec	++		1070509	1					
ANR	1070718	CompoundStatement		33:3:1016:1016	1070509	3					
ANR	1070719	IfStatement	"if ( do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1 )"		1070509	0					
ANR	1070720	Condition	"do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"	3053:9:89401:89452	1070509	0	True				
ANR	1070721	AndExpression	"do_out && fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"		1070509	0		&&			
ANR	1070722	Identifier	do_out		1070509	0					
ANR	1070723	EqualityExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stdout ) != 1"		1070509	1		!=			
ANR	1070724	CallExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stdout )"		1070509	0					
ANR	1070725	Callee	fwrite		1070509	0					
ANR	1070726	Identifier	fwrite		1070509	0					
ANR	1070727	ArgumentList	buf		1070509	1					
ANR	1070728	Argument	buf		1070509	0					
ANR	1070729	Identifier	buf		1070509	0					
ANR	1070730	Argument	sizeof ( buf )		1070509	1					
ANR	1070731	SizeofExpression	sizeof ( buf )		1070509	0					
ANR	1070732	Sizeof	sizeof		1070509	0					
ANR	1070733	SizeofOperand	buf		1070509	1					
ANR	1070734	Argument	1		1070509	2					
ANR	1070735	PrimaryExpression	1		1070509	0					
ANR	1070736	Argument	stdout		1070509	3					
ANR	1070737	Identifier	stdout		1070509	0					
ANR	1070738	PrimaryExpression	1		1070509	1					
ANR	1070739	CompoundStatement		35:4:1086:1086	1070509	1					
ANR	1070740	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to stdout: %s\\n"" , strerror ( errno ) )"	3055:5:89467:89548	1070509	0	True				
ANR	1070741	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to stdout: %s\\n"" , strerror ( errno ) )"		1070509	0					
ANR	1070742	Callee	dprintf		1070509	0					
ANR	1070743	Identifier	dprintf		1070509	0					
ANR	1070744	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070745	Argument	D_ALWAYS		1070509	0					
ANR	1070746	Identifier	D_ALWAYS		1070509	0					
ANR	1070747	Argument	"""Failed to write to stdout: %s\\n"""		1070509	1					
ANR	1070748	PrimaryExpression	"""Failed to write to stdout: %s\\n"""		1070509	0					
ANR	1070749	Argument	strerror ( errno )		1070509	2					
ANR	1070750	CallExpression	strerror ( errno )		1070509	0					
ANR	1070751	Callee	strerror		1070509	0					
ANR	1070752	Identifier	strerror		1070509	0					
ANR	1070753	ArgumentList	errno		1070509	1					
ANR	1070754	Argument	errno		1070509	0					
ANR	1070755	Identifier	errno		1070509	0					
ANR	1070756	ExpressionStatement	do_out = false	3057:5:89555:89569	1070509	1	True				
ANR	1070757	AssignmentExpression	do_out = false		1070509	0		=			
ANR	1070758	Identifier	do_out		1070509	0					
ANR	1070759	Identifier	false		1070509	1					
ANR	1070760	IfStatement	"if ( do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1 )"		1070509	1					
ANR	1070761	Condition	"do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"	3059:9:89586:89637	1070509	0	True				
ANR	1070762	AndExpression	"do_err && fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"		1070509	0		&&			
ANR	1070763	Identifier	do_err		1070509	0					
ANR	1070764	EqualityExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stderr ) != 1"		1070509	1		!=			
ANR	1070765	CallExpression	"fwrite ( buf , sizeof ( buf ) , 1 , stderr )"		1070509	0					
ANR	1070766	Callee	fwrite		1070509	0					
ANR	1070767	Identifier	fwrite		1070509	0					
ANR	1070768	ArgumentList	buf		1070509	1					
ANR	1070769	Argument	buf		1070509	0					
ANR	1070770	Identifier	buf		1070509	0					
ANR	1070771	Argument	sizeof ( buf )		1070509	1					
ANR	1070772	SizeofExpression	sizeof ( buf )		1070509	0					
ANR	1070773	Sizeof	sizeof		1070509	0					
ANR	1070774	SizeofOperand	buf		1070509	1					
ANR	1070775	Argument	1		1070509	2					
ANR	1070776	PrimaryExpression	1		1070509	0					
ANR	1070777	Argument	stderr		1070509	3					
ANR	1070778	Identifier	stderr		1070509	0					
ANR	1070779	PrimaryExpression	1		1070509	1					
ANR	1070780	CompoundStatement		41:4:1271:1271	1070509	1					
ANR	1070781	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to stderr: %s\\n"" , strerror ( errno ) )"	3061:5:89652:89733	1070509	0	True				
ANR	1070782	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to stderr: %s\\n"" , strerror ( errno ) )"		1070509	0					
ANR	1070783	Callee	dprintf		1070509	0					
ANR	1070784	Identifier	dprintf		1070509	0					
ANR	1070785	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070786	Argument	D_ALWAYS		1070509	0					
ANR	1070787	Identifier	D_ALWAYS		1070509	0					
ANR	1070788	Argument	"""Failed to write to stderr: %s\\n"""		1070509	1					
ANR	1070789	PrimaryExpression	"""Failed to write to stderr: %s\\n"""		1070509	0					
ANR	1070790	Argument	strerror ( errno )		1070509	2					
ANR	1070791	CallExpression	strerror ( errno )		1070509	0					
ANR	1070792	Callee	strerror		1070509	0					
ANR	1070793	Identifier	strerror		1070509	0					
ANR	1070794	ArgumentList	errno		1070509	1					
ANR	1070795	Argument	errno		1070509	0					
ANR	1070796	Identifier	errno		1070509	0					
ANR	1070797	ExpressionStatement	do_err = false	3063:5:89740:89754	1070509	1	True				
ANR	1070798	AssignmentExpression	do_err = false		1070509	0		=			
ANR	1070799	Identifier	do_err		1070509	0					
ANR	1070800	Identifier	false		1070509	1					
ANR	1070801	IfStatement	"if ( do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf ) )"		1070509	2					
ANR	1070802	Condition	"do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"	3065:9:89771:89823	1070509	0	True				
ANR	1070803	AndExpression	"do_fd1 && write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"		1070509	0		&&			
ANR	1070804	Identifier	do_fd1		1070509	0					
ANR	1070805	EqualityExpression	"write ( 1 , buf , sizeof ( buf ) ) != sizeof ( buf )"		1070509	1		!=			
ANR	1070806	CallExpression	"write ( 1 , buf , sizeof ( buf ) )"		1070509	0					
ANR	1070807	Callee	write		1070509	0					
ANR	1070808	Identifier	write		1070509	0					
ANR	1070809	ArgumentList	1		1070509	1					
ANR	1070810	Argument	1		1070509	0					
ANR	1070811	PrimaryExpression	1		1070509	0					
ANR	1070812	Argument	buf		1070509	1					
ANR	1070813	Identifier	buf		1070509	0					
ANR	1070814	Argument	sizeof ( buf )		1070509	2					
ANR	1070815	SizeofExpression	sizeof ( buf )		1070509	0					
ANR	1070816	Sizeof	sizeof		1070509	0					
ANR	1070817	SizeofOperand	buf		1070509	1					
ANR	1070818	SizeofExpression	sizeof ( buf )		1070509	1					
ANR	1070819	Sizeof	sizeof		1070509	0					
ANR	1070820	SizeofOperand	buf		1070509	1					
ANR	1070821	CompoundStatement		47:4:1457:1457	1070509	1					
ANR	1070822	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to fd 1: %s\\n"" , strerror ( errno ) )"	3067:5:89838:89917	1070509	0	True				
ANR	1070823	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to fd 1: %s\\n"" , strerror ( errno ) )"		1070509	0					
ANR	1070824	Callee	dprintf		1070509	0					
ANR	1070825	Identifier	dprintf		1070509	0					
ANR	1070826	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070827	Argument	D_ALWAYS		1070509	0					
ANR	1070828	Identifier	D_ALWAYS		1070509	0					
ANR	1070829	Argument	"""Failed to write to fd 1: %s\\n"""		1070509	1					
ANR	1070830	PrimaryExpression	"""Failed to write to fd 1: %s\\n"""		1070509	0					
ANR	1070831	Argument	strerror ( errno )		1070509	2					
ANR	1070832	CallExpression	strerror ( errno )		1070509	0					
ANR	1070833	Callee	strerror		1070509	0					
ANR	1070834	Identifier	strerror		1070509	0					
ANR	1070835	ArgumentList	errno		1070509	1					
ANR	1070836	Argument	errno		1070509	0					
ANR	1070837	Identifier	errno		1070509	0					
ANR	1070838	ExpressionStatement	do_fd1 = false	3069:5:89924:89938	1070509	1	True				
ANR	1070839	AssignmentExpression	do_fd1 = false		1070509	0		=			
ANR	1070840	Identifier	do_fd1		1070509	0					
ANR	1070841	Identifier	false		1070509	1					
ANR	1070842	IfStatement	"if ( do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf ) )"		1070509	3					
ANR	1070843	Condition	"do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"	3071:9:89955:90007	1070509	0	True				
ANR	1070844	AndExpression	"do_fd2 && write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"		1070509	0		&&			
ANR	1070845	Identifier	do_fd2		1070509	0					
ANR	1070846	EqualityExpression	"write ( 2 , buf , sizeof ( buf ) ) != sizeof ( buf )"		1070509	1		!=			
ANR	1070847	CallExpression	"write ( 2 , buf , sizeof ( buf ) )"		1070509	0					
ANR	1070848	Callee	write		1070509	0					
ANR	1070849	Identifier	write		1070509	0					
ANR	1070850	ArgumentList	2		1070509	1					
ANR	1070851	Argument	2		1070509	0					
ANR	1070852	PrimaryExpression	2		1070509	0					
ANR	1070853	Argument	buf		1070509	1					
ANR	1070854	Identifier	buf		1070509	0					
ANR	1070855	Argument	sizeof ( buf )		1070509	2					
ANR	1070856	SizeofExpression	sizeof ( buf )		1070509	0					
ANR	1070857	Sizeof	sizeof		1070509	0					
ANR	1070858	SizeofOperand	buf		1070509	1					
ANR	1070859	SizeofExpression	sizeof ( buf )		1070509	1					
ANR	1070860	Sizeof	sizeof		1070509	0					
ANR	1070861	SizeofOperand	buf		1070509	1					
ANR	1070862	CompoundStatement		53:4:1641:1641	1070509	1					
ANR	1070863	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to write to fd 2: %s\\n"" , strerror ( errno ) )"	3073:5:90022:90101	1070509	0	True				
ANR	1070864	CallExpression	"dprintf ( D_ALWAYS , ""Failed to write to fd 2: %s\\n"" , strerror ( errno ) )"		1070509	0					
ANR	1070865	Callee	dprintf		1070509	0					
ANR	1070866	Identifier	dprintf		1070509	0					
ANR	1070867	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070868	Argument	D_ALWAYS		1070509	0					
ANR	1070869	Identifier	D_ALWAYS		1070509	0					
ANR	1070870	Argument	"""Failed to write to fd 2: %s\\n"""		1070509	1					
ANR	1070871	PrimaryExpression	"""Failed to write to fd 2: %s\\n"""		1070509	0					
ANR	1070872	Argument	strerror ( errno )		1070509	2					
ANR	1070873	CallExpression	strerror ( errno )		1070509	0					
ANR	1070874	Callee	strerror		1070509	0					
ANR	1070875	Identifier	strerror		1070509	0					
ANR	1070876	ArgumentList	errno		1070509	1					
ANR	1070877	Argument	errno		1070509	0					
ANR	1070878	Identifier	errno		1070509	0					
ANR	1070879	ExpressionStatement	do_fd2 = false	3075:5:90108:90122	1070509	1	True				
ANR	1070880	AssignmentExpression	do_fd2 = false		1070509	0		=			
ANR	1070881	Identifier	do_fd2		1070509	0					
ANR	1070882	Identifier	false		1070509	1					
ANR	1070883	ExpressionStatement	"dprintf ( D_ALWAYS , ""Done with stdout & stderr tests\\n"" )"	3079:2:90141:90197	1070509	2	True				
ANR	1070884	CallExpression	"dprintf ( D_ALWAYS , ""Done with stdout & stderr tests\\n"" )"		1070509	0					
ANR	1070885	Callee	dprintf		1070509	0					
ANR	1070886	Identifier	dprintf		1070509	0					
ANR	1070887	ArgumentList	D_ALWAYS		1070509	1					
ANR	1070888	Argument	D_ALWAYS		1070509	0					
ANR	1070889	Identifier	D_ALWAYS		1070509	0					
ANR	1070890	Argument	"""Done with stdout & stderr tests\\n"""		1070509	1					
ANR	1070891	PrimaryExpression	"""Done with stdout & stderr tests\\n"""		1070509	0					
ANR	1070892	IdentifierDeclStatement	double runtime = UtcTime :: getTimeDouble ( ) ;	3082:1:90204:90245	1070509	17	True				
ANR	1070893	IdentifierDecl	runtime = UtcTime :: getTimeDouble ( )		1070509	0					
ANR	1070894	IdentifierDeclType	double		1070509	0					
ANR	1070895	Identifier	runtime		1070509	1					
ANR	1070896	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	2		=			
ANR	1070897	Identifier	runtime		1070509	0					
ANR	1070898	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1070899	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1070900	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1070901	ArgumentList			1070509	1					
ANR	1070902	IdentifierDeclStatement	double group_runtime = runtime ;	3083:1:90248:90278	1070509	18	True				
ANR	1070903	IdentifierDecl	group_runtime = runtime		1070509	0					
ANR	1070904	IdentifierDeclType	double		1070509	0					
ANR	1070905	Identifier	group_runtime		1070509	1					
ANR	1070906	AssignmentExpression	group_runtime = runtime		1070509	2		=			
ANR	1070907	Identifier	runtime		1070509	0					
ANR	1070908	Identifier	runtime		1070509	1					
ANR	1070909	IdentifierDeclStatement	double pump_cycle_begin_time = runtime ;	3084:4:90284:90322	1070509	19	True				
ANR	1070910	IdentifierDecl	pump_cycle_begin_time = runtime		1070509	0					
ANR	1070911	IdentifierDeclType	double		1070509	0					
ANR	1070912	Identifier	pump_cycle_begin_time		1070509	1					
ANR	1070913	AssignmentExpression	pump_cycle_begin_time = runtime		1070509	2		=			
ANR	1070914	Identifier	runtime		1070509	0					
ANR	1070915	Identifier	runtime		1070509	1					
ANR	1070916	ForStatement	for ( ; ; )		1070509	20					
ANR	1070917	CompoundStatement		261:2:9035:9062	1070509	0					
ANR	1070918	ExpressionStatement	sent_signal = FALSE	3090:2:90390:90409	1070509	0	True				
ANR	1070919	AssignmentExpression	sent_signal = FALSE		1070509	0		=			
ANR	1070920	Identifier	sent_signal		1070509	0					
ANR	1070921	Identifier	FALSE		1070509	1					
ANR	1070922	ForStatement	for ( i = 0 ; i < maxSig ; i ++ )		1070509	1					
ANR	1070923	ForInit	i = 0 ;	3091:8:90455:90458	1070509	0	True				
ANR	1070924	AssignmentExpression	i = 0		1070509	0		=			
ANR	1070925	Identifier	i		1070509	0					
ANR	1070926	PrimaryExpression	0		1070509	1					
ANR	1070927	Condition	i < maxSig	3091:12:90459:90466	1070509	1	True				
ANR	1070928	RelationalExpression	i < maxSig		1070509	0		<			
ANR	1070929	Identifier	i		1070509	0					
ANR	1070930	Identifier	maxSig		1070509	1					
ANR	1070931	PostIncDecOperationExpression	i ++	3091:21:90468:90470	1070509	2	True				
ANR	1070932	Identifier	i		1070509	0					
ANR	1070933	IncDec	++		1070509	1					
ANR	1070934	CompoundStatement		72:26:2099:2099	1070509	3					
ANR	1070935	IfStatement	if ( sigTable [ i ] . handler || sigTable [ i ] . handlercpp )		1070509	0					
ANR	1070936	Condition	sigTable [ i ] . handler || sigTable [ i ] . handlercpp	3092:9:90484:90528	1070509	0	True				
ANR	1070937	OrExpression	sigTable [ i ] . handler || sigTable [ i ] . handlercpp		1070509	0		||			
ANR	1070938	MemberAccess	sigTable [ i ] . handler		1070509	0					
ANR	1070939	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070940	Identifier	sigTable		1070509	0					
ANR	1070941	Identifier	i		1070509	1					
ANR	1070942	Identifier	handler		1070509	1					
ANR	1070943	MemberAccess	sigTable [ i ] . handlercpp		1070509	1					
ANR	1070944	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070945	Identifier	sigTable		1070509	0					
ANR	1070946	Identifier	i		1070509	1					
ANR	1070947	Identifier	handlercpp		1070509	1					
ANR	1070948	CompoundStatement		73:57:2158:2158	1070509	1					
ANR	1070949	IfStatement	if ( sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked )		1070509	0					
ANR	1070950	Condition	sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked	3094:10:90604:90652	1070509	0	True				
ANR	1070951	AndExpression	sigTable [ i ] . is_pending && ! sigTable [ i ] . is_blocked		1070509	0		&&			
ANR	1070952	MemberAccess	sigTable [ i ] . is_pending		1070509	0					
ANR	1070953	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070954	Identifier	sigTable		1070509	0					
ANR	1070955	Identifier	i		1070509	1					
ANR	1070956	Identifier	is_pending		1070509	1					
ANR	1070957	UnaryOperationExpression	! sigTable [ i ] . is_blocked		1070509	1					
ANR	1070958	UnaryOperator	!		1070509	0					
ANR	1070959	MemberAccess	sigTable [ i ] . is_blocked		1070509	1					
ANR	1070960	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070961	Identifier	sigTable		1070509	0					
ANR	1070962	Identifier	i		1070509	1					
ANR	1070963	Identifier	is_blocked		1070509	1					
ANR	1070964	CompoundStatement		75:62:2282:2282	1070509	1					
ANR	1070965	ExpressionStatement	sigTable [ i ] . is_pending = 0	3096:6:90716:90742	1070509	0	True				
ANR	1070966	AssignmentExpression	sigTable [ i ] . is_pending = 0		1070509	0		=			
ANR	1070967	MemberAccess	sigTable [ i ] . is_pending		1070509	0					
ANR	1070968	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070969	Identifier	sigTable		1070509	0					
ANR	1070970	Identifier	i		1070509	1					
ANR	1070971	Identifier	is_pending		1070509	1					
ANR	1070972	PrimaryExpression	0		1070509	1					
ANR	1070973	ExpressionStatement	curr_dataptr = & ( sigTable [ i ] . data_ptr )	3098:6:90796:90834	1070509	1	True				
ANR	1070974	AssignmentExpression	curr_dataptr = & ( sigTable [ i ] . data_ptr )		1070509	0		=			
ANR	1070975	Identifier	curr_dataptr		1070509	0					
ANR	1070976	UnaryOperationExpression	& ( sigTable [ i ] . data_ptr )		1070509	1					
ANR	1070977	UnaryOperator	&		1070509	0					
ANR	1070978	MemberAccess	sigTable [ i ] . data_ptr		1070509	1					
ANR	1070979	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1070980	Identifier	sigTable		1070509	0					
ANR	1070981	Identifier	i		1070509	1					
ANR	1070982	Identifier	data_ptr		1070509	1					
ANR	1070983	ExpressionStatement	dc_stats . Signals += 1	3100:24:90905:90926	1070509	2	True				
ANR	1070984	AssignmentExpression	dc_stats . Signals += 1		1070509	0		+=			
ANR	1070985	MemberAccess	dc_stats . Signals		1070509	0					
ANR	1070986	Identifier	dc_stats		1070509	0					
ANR	1070987	Identifier	Signals		1070509	1					
ANR	1070988	PrimaryExpression	1		1070509	1					
ANR	1070989	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Signal %d <%s>\\n"" , sigTable [ i ] . handler_descrip , sigTable [ i ] . num , sigTable [ i ] . sig_descrip )"	3103:6:90958:91124	1070509	3	True				
ANR	1070990	CallExpression	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Signal %d <%s>\\n"" , sigTable [ i ] . handler_descrip , sigTable [ i ] . num , sigTable [ i ] . sig_descrip )"		1070509	0					
ANR	1070991	Callee	dprintf		1070509	0					
ANR	1070992	Identifier	dprintf		1070509	0					
ANR	1070993	ArgumentList	D_DAEMONCORE		1070509	1					
ANR	1070994	Argument	D_DAEMONCORE		1070509	0					
ANR	1070995	Identifier	D_DAEMONCORE		1070509	0					
ANR	1070996	Argument	"""Calling Handler <%s> for Signal %d <%s>\\n"""		1070509	1					
ANR	1070997	PrimaryExpression	"""Calling Handler <%s> for Signal %d <%s>\\n"""		1070509	0					
ANR	1070998	Argument	sigTable [ i ] . handler_descrip		1070509	2					
ANR	1070999	MemberAccess	sigTable [ i ] . handler_descrip		1070509	0					
ANR	1071000	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071001	Identifier	sigTable		1070509	0					
ANR	1071002	Identifier	i		1070509	1					
ANR	1071003	Identifier	handler_descrip		1070509	1					
ANR	1071004	Argument	sigTable [ i ] . num		1070509	3					
ANR	1071005	MemberAccess	sigTable [ i ] . num		1070509	0					
ANR	1071006	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071007	Identifier	sigTable		1070509	0					
ANR	1071008	Identifier	i		1070509	1					
ANR	1071009	Identifier	num		1070509	1					
ANR	1071010	Argument	sigTable [ i ] . sig_descrip		1070509	4					
ANR	1071011	MemberAccess	sigTable [ i ] . sig_descrip		1070509	0					
ANR	1071012	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071013	Identifier	sigTable		1070509	0					
ANR	1071014	Identifier	i		1070509	1					
ANR	1071015	Identifier	sig_descrip		1070509	1					
ANR	1071016	IfStatement	if ( sigTable [ i ] . is_cpp )		1070509	4					
ANR	1071017	Condition	sigTable [ i ] . is_cpp	3108:11:91163:91180	1070509	0	True				
ANR	1071018	MemberAccess	sigTable [ i ] . is_cpp		1070509	0					
ANR	1071019	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071020	Identifier	sigTable		1070509	0					
ANR	1071021	Identifier	i		1070509	1					
ANR	1071022	Identifier	is_cpp		1070509	1					
ANR	1071023	Statement	(	3109:7:91191:91191	1070509	1	True				
ANR	1071024	ElseStatement	else		1070509	0					
ANR	1071025	ExpressionStatement	"( * sigTable [ i ] . handler ) ( sigTable [ i ] . service , sigTable [ i ] . num )"	3111:7:91276:91335	1070509	0	True				
ANR	1071026	CallExpression	"( * sigTable [ i ] . handler ) ( sigTable [ i ] . service , sigTable [ i ] . num )"		1070509	0					
ANR	1071027	Callee	* sigTable [ i ] . handler		1070509	0					
ANR	1071028	UnaryOperationExpression	* sigTable [ i ] . handler		1070509	0					
ANR	1071029	UnaryOperator	*		1070509	0					
ANR	1071030	MemberAccess	sigTable [ i ] . handler		1070509	1					
ANR	1071031	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071032	Identifier	sigTable		1070509	0					
ANR	1071033	Identifier	i		1070509	1					
ANR	1071034	Identifier	handler		1070509	1					
ANR	1071035	ArgumentList	sigTable [ i ] . service		1070509	1					
ANR	1071036	Argument	sigTable [ i ] . service		1070509	0					
ANR	1071037	MemberAccess	sigTable [ i ] . service		1070509	0					
ANR	1071038	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071039	Identifier	sigTable		1070509	0					
ANR	1071040	Identifier	i		1070509	1					
ANR	1071041	Identifier	service		1070509	1					
ANR	1071042	Argument	sigTable [ i ] . num		1070509	1					
ANR	1071043	MemberAccess	sigTable [ i ] . num		1070509	0					
ANR	1071044	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071045	Identifier	sigTable		1070509	0					
ANR	1071046	Identifier	i		1070509	1					
ANR	1071047	Identifier	num		1070509	1					
ANR	1071048	Statement	sigTable	3109:8:91192:91199	1070509	5	True				
ANR	1071049	Statement	[	3109:16:91200:91200	1070509	6	True				
ANR	1071050	Statement	i	3109:17:91201:91201	1070509	7	True				
ANR	1071051	Statement	]	3109:18:91202:91202	1070509	8	True				
ANR	1071052	Statement	.	3109:19:91203:91203	1070509	9	True				
ANR	1071053	Statement	service	3109:20:91204:91210	1070509	10	True				
ANR	1071054	Statement	->*	3109:27:91211:91213	1070509	11	True				
ANR	1071055	Statement	(	3109:30:91214:91214	1070509	12	True				
ANR	1071056	Statement	sigTable	3109:31:91215:91222	1070509	13	True				
ANR	1071057	Statement	[	3109:39:91223:91223	1070509	14	True				
ANR	1071058	Statement	i	3109:40:91224:91224	1070509	15	True				
ANR	1071059	Statement	]	3109:41:91225:91225	1070509	16	True				
ANR	1071060	Statement	.	3109:42:91226:91226	1070509	17	True				
ANR	1071061	Statement	handlercpp	3109:43:91227:91236	1070509	18	True				
ANR	1071062	Statement	)	3109:53:91237:91237	1070509	19	True				
ANR	1071063	Statement	)	3109:54:91238:91238	1070509	20	True				
ANR	1071064	ExpressionStatement	sigTable [ i ] . num	3109:55:91239:91256	1070509	21	True				
ANR	1071065	MemberAccess	sigTable [ i ] . num		1070509	0					
ANR	1071066	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071067	Identifier	sigTable		1070509	0					
ANR	1071068	Identifier	i		1070509	1					
ANR	1071069	Identifier	num		1070509	1					
ANR	1071070	ExpressionStatement	curr_dataptr = NULL	3113:6:91371:91390	1070509	22	True				
ANR	1071071	AssignmentExpression	curr_dataptr = NULL		1070509	0		=			
ANR	1071072	Identifier	curr_dataptr		1070509	0					
ANR	1071073	Identifier	NULL		1070509	1					
ANR	1071074	ExpressionStatement	CheckPrivState ( )	3115:6:91447:91463	1070509	23	True				
ANR	1071075	CallExpression	CheckPrivState ( )		1070509	0					
ANR	1071076	Callee	CheckPrivState		1070509	0					
ANR	1071077	Identifier	CheckPrivState		1070509	0					
ANR	1071078	ArgumentList			1070509	1					
ANR	1071079	ExpressionStatement	"runtime = dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"	3118:24:91563:91630	1070509	24	True				
ANR	1071080	AssignmentExpression	"runtime = dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"		1070509	0		=			
ANR	1071081	Identifier	runtime		1070509	0					
ANR	1071082	CallExpression	"dc_stats . AddRuntime ( sigTable [ i ] . handler_descrip , runtime )"		1070509	1					
ANR	1071083	Callee	dc_stats . AddRuntime		1070509	0					
ANR	1071084	MemberAccess	dc_stats . AddRuntime		1070509	0					
ANR	1071085	Identifier	dc_stats		1070509	0					
ANR	1071086	Identifier	AddRuntime		1070509	1					
ANR	1071087	ArgumentList	sigTable [ i ] . handler_descrip		1070509	1					
ANR	1071088	Argument	sigTable [ i ] . handler_descrip		1070509	0					
ANR	1071089	MemberAccess	sigTable [ i ] . handler_descrip		1070509	0					
ANR	1071090	ArrayIndexing	sigTable [ i ]		1070509	0					
ANR	1071091	Identifier	sigTable		1070509	0					
ANR	1071092	Identifier	i		1070509	1					
ANR	1071093	Identifier	handler_descrip		1070509	1					
ANR	1071094	Argument	runtime		1070509	1					
ANR	1071095	Identifier	runtime		1070509	0					
ANR	1071096	ExpressionStatement	async_pipe_signal = false	3126:2:91797:91822	1070509	2	True				
ANR	1071097	AssignmentExpression	async_pipe_signal = false		1070509	0		=			
ANR	1071098	Identifier	async_pipe_signal		1070509	0					
ANR	1071099	Identifier	false		1070509	1					
ANR	1071100	WhileStatement	"while ( read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0 )"		1070509	3					
ANR	1071101	Condition	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0"	3130:9:92047:92085	1070509	0	True				
ANR	1071102	RelationalExpression	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 ) > 0"		1070509	0		>			
ANR	1071103	CallExpression	"read ( async_pipe [ 0 ] , asyncpipe_buf , 8 )"		1070509	0					
ANR	1071104	Callee	read		1070509	0					
ANR	1071105	Identifier	read		1070509	0					
ANR	1071106	ArgumentList	async_pipe [ 0 ]		1070509	1					
ANR	1071107	Argument	async_pipe [ 0 ]		1070509	0					
ANR	1071108	ArrayIndexing	async_pipe [ 0 ]		1070509	0					
ANR	1071109	Identifier	async_pipe		1070509	0					
ANR	1071110	PrimaryExpression	0		1070509	1					
ANR	1071111	Argument	asyncpipe_buf		1070509	1					
ANR	1071112	Identifier	asyncpipe_buf		1070509	0					
ANR	1071113	Argument	8		1070509	2					
ANR	1071114	PrimaryExpression	8		1070509	0					
ANR	1071115	PrimaryExpression	0		1070509	1					
ANR	1071116	ExpressionStatement		3130:50:92088:92088	1070509	1	True				
ANR	1071117	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3136:8:92247:92281	1070509	4	True				
ANR	1071118	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1071119	Identifier	runtime		1070509	0					
ANR	1071120	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1071121	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1071122	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1071123	ArgumentList			1070509	1					
ANR	1071124	ExpressionStatement	dc_stats . SignalRuntime += ( runtime - group_runtime )	3137:8:92291:92342	1070509	5	True				
ANR	1071125	AssignmentExpression	dc_stats . SignalRuntime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1071126	MemberAccess	dc_stats . SignalRuntime		1070509	0					
ANR	1071127	Identifier	dc_stats		1070509	0					
ANR	1071128	Identifier	SignalRuntime		1070509	1					
ANR	1071129	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1071130	Identifier	runtime		1070509	0					
ANR	1071131	Identifier	group_runtime		1070509	1					
ANR	1071132	ExpressionStatement	group_runtime = runtime	3138:8:92352:92375	1070509	6	True				
ANR	1071133	AssignmentExpression	group_runtime = runtime		1070509	0		=			
ANR	1071134	Identifier	group_runtime		1070509	0					
ANR	1071135	Identifier	runtime		1070509	1					
ANR	1071136	IdentifierDeclStatement	int num_timers_fired = 0 ;	3153:8:93043:93067	1070509	7	True				
ANR	1071137	IdentifierDecl	num_timers_fired = 0		1070509	0					
ANR	1071138	IdentifierDeclType	int		1070509	0					
ANR	1071139	Identifier	num_timers_fired		1070509	1					
ANR	1071140	AssignmentExpression	num_timers_fired = 0		1070509	2		=			
ANR	1071141	Identifier	num_timers_fired		1070509	0					
ANR	1071142	PrimaryExpression	0		1070509	1					
ANR	1071143	ExpressionStatement	"timeout = t . Timeout ( & num_timers_fired , & runtime )"	3154:2:93071:93119	1070509	8	True				
ANR	1071144	AssignmentExpression	"timeout = t . Timeout ( & num_timers_fired , & runtime )"		1070509	0		=			
ANR	1071145	Identifier	timeout		1070509	0					
ANR	1071146	CallExpression	"t . Timeout ( & num_timers_fired , & runtime )"		1070509	1					
ANR	1071147	Callee	t . Timeout		1070509	0					
ANR	1071148	MemberAccess	t . Timeout		1070509	0					
ANR	1071149	Identifier	t		1070509	0					
ANR	1071150	Identifier	Timeout		1070509	1					
ANR	1071151	ArgumentList	& num_timers_fired		1070509	1					
ANR	1071152	Argument	& num_timers_fired		1070509	0					
ANR	1071153	UnaryOperationExpression	& num_timers_fired		1070509	0					
ANR	1071154	UnaryOperator	&		1070509	0					
ANR	1071155	Identifier	num_timers_fired		1070509	1					
ANR	1071156	Argument	& runtime		1070509	1					
ANR	1071157	UnaryOperationExpression	& runtime		1070509	0					
ANR	1071158	UnaryOperator	&		1070509	0					
ANR	1071159	Identifier	runtime		1070509	1					
ANR	1071160	ExpressionStatement	dc_stats . TimersFired += num_timers_fired	3156:8:93130:93170	1070509	9	True				
ANR	1071161	AssignmentExpression	dc_stats . TimersFired += num_timers_fired		1070509	0		+=			
ANR	1071162	MemberAccess	dc_stats . TimersFired		1070509	0					
ANR	1071163	Identifier	dc_stats		1070509	0					
ANR	1071164	Identifier	TimersFired		1070509	1					
ANR	1071165	Identifier	num_timers_fired		1070509	1					
ANR	1071166	IfStatement	if ( sent_signal == TRUE )		1070509	10					
ANR	1071167	Condition	sent_signal == TRUE	3158:7:93180:93198	1070509	0	True				
ANR	1071168	EqualityExpression	sent_signal == TRUE		1070509	0		==			
ANR	1071169	Identifier	sent_signal		1070509	0					
ANR	1071170	Identifier	TRUE		1070509	1					
ANR	1071171	CompoundStatement		139:29:4828:4828	1070509	1					
ANR	1071172	ExpressionStatement	timeout = 0	3159:3:93207:93218	1070509	0	True				
ANR	1071173	AssignmentExpression	timeout = 0		1070509	0		=			
ANR	1071174	Identifier	timeout		1070509	0					
ANR	1071175	PrimaryExpression	0		1070509	1					
ANR	1071176	IfStatement	if ( timeout < 0 )		1070509	11					
ANR	1071177	Condition	timeout < 0	3161:7:93231:93241	1070509	0	True				
ANR	1071178	RelationalExpression	timeout < 0		1070509	0		<			
ANR	1071179	Identifier	timeout		1070509	0					
ANR	1071180	PrimaryExpression	0		1070509	1					
ANR	1071181	CompoundStatement		142:21:4871:4871	1070509	1					
ANR	1071182	ExpressionStatement	timeout = TIME_T_NEVER	3162:3:93250:93272	1070509	0	True				
ANR	1071183	AssignmentExpression	timeout = TIME_T_NEVER		1070509	0		=			
ANR	1071184	Identifier	timeout		1070509	0					
ANR	1071185	Identifier	TIME_T_NEVER		1070509	1					
ANR	1071186	ExpressionStatement	dc_stats . TimerRuntime += ( runtime - group_runtime )	3167:8:93406:93456	1070509	12	True				
ANR	1071187	AssignmentExpression	dc_stats . TimerRuntime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1071188	MemberAccess	dc_stats . TimerRuntime		1070509	0					
ANR	1071189	Identifier	dc_stats		1070509	0					
ANR	1071190	Identifier	TimerRuntime		1070509	1					
ANR	1071191	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1071192	Identifier	runtime		1070509	0					
ANR	1071193	Identifier	group_runtime		1070509	1					
ANR	1071194	ExpressionStatement	group_runtime = runtime	3168:8:93466:93489	1070509	13	True				
ANR	1071195	AssignmentExpression	group_runtime = runtime		1070509	0		=			
ANR	1071196	Identifier	group_runtime		1070509	0					
ANR	1071197	Identifier	runtime		1070509	1					
ANR	1071198	ExpressionStatement	selector . reset ( )	3173:2:93682:93698	1070509	14	True				
ANR	1071199	CallExpression	selector . reset ( )		1070509	0					
ANR	1071200	Callee	selector . reset		1070509	0					
ANR	1071201	MemberAccess	selector . reset		1070509	0					
ANR	1071202	Identifier	selector		1070509	0					
ANR	1071203	Identifier	reset		1070509	1					
ANR	1071204	ArgumentList			1070509	1					
ANR	1071205	ExpressionStatement	min_deadline = 0	3174:2:93702:93718	1070509	15	True				
ANR	1071206	AssignmentExpression	min_deadline = 0		1070509	0		=			
ANR	1071207	Identifier	min_deadline		1070509	0					
ANR	1071208	PrimaryExpression	0		1070509	1					
ANR	1071209	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1070509	16					
ANR	1071210	ForInit	i = 0 ;	3175:7:93727:93732	1070509	0	True				
ANR	1071211	AssignmentExpression	i = 0		1070509	0		=			
ANR	1071212	Identifier	i		1070509	0					
ANR	1071213	PrimaryExpression	0		1070509	1					
ANR	1071214	Condition	i < nSock	3175:14:93734:93742	1070509	1	True				
ANR	1071215	RelationalExpression	i < nSock		1070509	0		<			
ANR	1071216	Identifier	i		1070509	0					
ANR	1071217	Identifier	nSock		1070509	1					
ANR	1071218	PostIncDecOperationExpression	i ++	3175:25:93745:93747	1070509	2	True				
ANR	1071219	Identifier	i		1070509	0					
ANR	1071220	IncDec	++		1070509	1					
ANR	1071221	CompoundStatement		156:30:5376:5376	1070509	3					
ANR	1071222	IfStatement	if ( ( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false )		1070509	0					
ANR	1071223	Condition	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false	3177:8:93826:93934	1070509	0	True				
ANR	1071224	AndExpression	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		1070509	0		&&			
ANR	1071225	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071226	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071227	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071228	UnaryOperator	*		1070509	0					
ANR	1071229	Identifier	sockTable		1070509	1					
ANR	1071230	Identifier	i		1070509	1					
ANR	1071231	Identifier	iosock		1070509	1					
ANR	1071232	AndExpression	( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		1070509	1		&&			
ANR	1071233	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		1070509	0		==			
ANR	1071234	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1070509	0					
ANR	1071235	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071236	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071237	UnaryOperator	*		1070509	0					
ANR	1071238	Identifier	sockTable		1070509	1					
ANR	1071239	Identifier	i		1070509	1					
ANR	1071240	Identifier	servicing_tid		1070509	1					
ANR	1071241	PrimaryExpression	0		1070509	1					
ANR	1071242	EqualityExpression	( * sockTable ) [ i ] . remove_asap == false		1070509	1		==			
ANR	1071243	MemberAccess	( * sockTable ) [ i ] . remove_asap		1070509	0					
ANR	1071244	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071245	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071246	UnaryOperator	*		1070509	0					
ANR	1071247	Identifier	sockTable		1070509	1					
ANR	1071248	Identifier	i		1070509	1					
ANR	1071249	Identifier	remove_asap		1070509	1					
ANR	1071250	Identifier	false		1070509	1					
ANR	1071251	CompoundStatement		187:4:6752:6808	1070509	1					
ANR	1071252	IfStatement	if ( ( * sockTable ) [ i ] . is_reverse_connect_pending )		1070509	0					
ANR	1071253	Condition	( * sockTable ) [ i ] . is_reverse_connect_pending	3181:9:93975:94016	1070509	0	True				
ANR	1071254	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		1070509	0					
ANR	1071255	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071256	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071257	UnaryOperator	*		1070509	0					
ANR	1071258	Identifier	sockTable		1070509	1					
ANR	1071259	Identifier	i		1070509	1					
ANR	1071260	Identifier	is_reverse_connect_pending		1070509	1					
ANR	1071261	CompoundStatement		162:54:5646:5646	1070509	1					
ANR	1071262	ContinueStatement	continue ;	3189:5:94404:94412	1070509	0	True				
ANR	1071263	ElseStatement	else		1070509	0					
ANR	1071264	IfStatement	if ( ( * sockTable ) [ i ] . is_connect_pending )		1070509	0					
ANR	1071265	Condition	( * sockTable ) [ i ] . is_connect_pending	3191:14:94434:94467	1070509	0	True				
ANR	1071266	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		1070509	0					
ANR	1071267	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071268	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071269	UnaryOperator	*		1070509	0					
ANR	1071270	Identifier	sockTable		1070509	1					
ANR	1071271	Identifier	i		1070509	1					
ANR	1071272	Identifier	is_connect_pending		1070509	1					
ANR	1071273	CompoundStatement		172:51:6097:6097	1070509	1					
ANR	1071274	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"	3196:5:94681:94759	1070509	0	True				
ANR	1071275	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"		1070509	0					
ANR	1071276	Callee	selector . add_fd		1070509	0					
ANR	1071277	MemberAccess	selector . add_fd		1070509	0					
ANR	1071278	Identifier	selector		1070509	0					
ANR	1071279	Identifier	add_fd		1070509	1					
ANR	1071280	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1071281	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071282	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071283	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071284	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071285	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071286	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071287	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071288	UnaryOperator	*		1070509	0					
ANR	1071289	Identifier	sockTable		1070509	1					
ANR	1071290	Identifier	i		1070509	1					
ANR	1071291	Identifier	iosock		1070509	1					
ANR	1071292	Identifier	get_file_desc		1070509	1					
ANR	1071293	ArgumentList			1070509	1					
ANR	1071294	Argument	Selector :: IO_WRITE		1070509	1					
ANR	1071295	Identifier	Selector :: IO_WRITE		1070509	0					
ANR	1071296	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"	3197:5:94766:94845	1070509	1	True				
ANR	1071297	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"		1070509	0					
ANR	1071298	Callee	selector . add_fd		1070509	0					
ANR	1071299	MemberAccess	selector . add_fd		1070509	0					
ANR	1071300	Identifier	selector		1070509	0					
ANR	1071301	Identifier	add_fd		1070509	1					
ANR	1071302	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1071303	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071304	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071305	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071306	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071307	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071308	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071309	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071310	UnaryOperator	*		1070509	0					
ANR	1071311	Identifier	sockTable		1070509	1					
ANR	1071312	Identifier	i		1070509	1					
ANR	1071313	Identifier	iosock		1070509	1					
ANR	1071314	Identifier	get_file_desc		1070509	1					
ANR	1071315	ArgumentList			1070509	1					
ANR	1071316	Argument	Selector :: IO_EXCEPT		1070509	1					
ANR	1071317	Identifier	Selector :: IO_EXCEPT		1070509	0					
ANR	1071318	ElseStatement	else		1070509	0					
ANR	1071319	CompoundStatement		179:11:6484:6484	1070509	0					
ANR	1071320	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3201:5:94936:95013	1070509	0	True				
ANR	1071321	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		1070509	0					
ANR	1071322	Callee	selector . add_fd		1070509	0					
ANR	1071323	MemberAccess	selector . add_fd		1070509	0					
ANR	1071324	Identifier	selector		1070509	0					
ANR	1071325	Identifier	add_fd		1070509	1					
ANR	1071326	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1071327	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071328	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071329	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071330	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071331	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071332	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071333	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071334	UnaryOperator	*		1070509	0					
ANR	1071335	Identifier	sockTable		1070509	1					
ANR	1071336	Identifier	i		1070509	1					
ANR	1071337	Identifier	iosock		1070509	1					
ANR	1071338	Identifier	get_file_desc		1070509	1					
ANR	1071339	ArgumentList			1070509	1					
ANR	1071340	Argument	Selector :: IO_READ		1070509	1					
ANR	1071341	Identifier	Selector :: IO_READ		1070509	0					
ANR	1071342	IdentifierDeclStatement	time_t deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( ) ;	3206:4:95126:95182	1070509	1	True				
ANR	1071343	IdentifierDecl	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	0					
ANR	1071344	IdentifierDeclType	time_t		1070509	0					
ANR	1071345	Identifier	deadline		1070509	1					
ANR	1071346	AssignmentExpression	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	2		=			
ANR	1071347	Identifier	deadline		1070509	0					
ANR	1071348	CallExpression	( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	1					
ANR	1071349	Callee	( * sockTable ) [ i ] . iosock -> get_deadline		1070509	0					
ANR	1071350	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_deadline		1070509	0					
ANR	1071351	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071352	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071353	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071354	UnaryOperator	*		1070509	0					
ANR	1071355	Identifier	sockTable		1070509	1					
ANR	1071356	Identifier	i		1070509	1					
ANR	1071357	Identifier	iosock		1070509	1					
ANR	1071358	Identifier	get_deadline		1070509	1					
ANR	1071359	ArgumentList			1070509	1					
ANR	1071360	IfStatement	if ( deadline )		1070509	2					
ANR	1071361	Condition	deadline	3207:7:95191:95198	1070509	0	True				
ANR	1071362	Identifier	deadline		1070509	0					
ANR	1071363	CompoundStatement		188:17:6827:6827	1070509	1					
ANR	1071364	IfStatement	if ( min_deadline == 0 || min_deadline > deadline )		1070509	0					
ANR	1071365	Condition	min_deadline == 0 || min_deadline > deadline	3208:8:95247:95290	1070509	0	True				
ANR	1071366	OrExpression	min_deadline == 0 || min_deadline > deadline		1070509	0		||			
ANR	1071367	EqualityExpression	min_deadline == 0		1070509	0		==			
ANR	1071368	Identifier	min_deadline		1070509	0					
ANR	1071369	PrimaryExpression	0		1070509	1					
ANR	1071370	RelationalExpression	min_deadline > deadline		1070509	1		>			
ANR	1071371	Identifier	min_deadline		1070509	0					
ANR	1071372	Identifier	deadline		1070509	1					
ANR	1071373	CompoundStatement		189:54:6919:6919	1070509	1					
ANR	1071374	ExpressionStatement	min_deadline = deadline	3209:6:95301:95324	1070509	0	True				
ANR	1071375	AssignmentExpression	min_deadline = deadline		1070509	0		=			
ANR	1071376	Identifier	min_deadline		1070509	0					
ANR	1071377	Identifier	deadline		1070509	1					
ANR	1071378	IfStatement	if ( min_deadline )		1070509	17					
ANR	1071379	Condition	min_deadline	3215:6:95364:95375	1070509	0	True				
ANR	1071380	Identifier	min_deadline		1070509	0					
ANR	1071381	CompoundStatement		197:3:7010:7062	1070509	1					
ANR	1071382	IdentifierDeclStatement	int deadline_timeout = min_deadline - time ( NULL ) + 1 ;	3216:3:95384:95436	1070509	0	True				
ANR	1071383	IdentifierDecl	deadline_timeout = min_deadline - time ( NULL ) + 1		1070509	0					
ANR	1071384	IdentifierDeclType	int		1070509	0					
ANR	1071385	Identifier	deadline_timeout		1070509	1					
ANR	1071386	AssignmentExpression	deadline_timeout = min_deadline - time ( NULL ) + 1		1070509	2		=			
ANR	1071387	Identifier	deadline_timeout		1070509	0					
ANR	1071388	AdditiveExpression	min_deadline - time ( NULL ) + 1		1070509	1		-			
ANR	1071389	Identifier	min_deadline		1070509	0					
ANR	1071390	AdditiveExpression	time ( NULL ) + 1		1070509	1		+			
ANR	1071391	CallExpression	time ( NULL )		1070509	0					
ANR	1071392	Callee	time		1070509	0					
ANR	1071393	Identifier	time		1070509	0					
ANR	1071394	ArgumentList	NULL		1070509	1					
ANR	1071395	Argument	NULL		1070509	0					
ANR	1071396	Identifier	NULL		1070509	0					
ANR	1071397	PrimaryExpression	1		1070509	1					
ANR	1071398	IfStatement	if ( deadline_timeout < timeout )		1070509	1					
ANR	1071399	Condition	deadline_timeout < timeout	3217:6:95444:95469	1070509	0	True				
ANR	1071400	RelationalExpression	deadline_timeout < timeout		1070509	0		<			
ANR	1071401	Identifier	deadline_timeout		1070509	0					
ANR	1071402	Identifier	timeout		1070509	1					
ANR	1071403	CompoundStatement		198:34:7098:7098	1070509	1					
ANR	1071404	IfStatement	if ( deadline_timeout < 0 )		1070509	0					
ANR	1071405	Condition	deadline_timeout < 0	3218:7:95481:95500	1070509	0	True				
ANR	1071406	RelationalExpression	deadline_timeout < 0		1070509	0		<			
ANR	1071407	Identifier	deadline_timeout		1070509	0					
ANR	1071408	PrimaryExpression	0		1070509	1					
ANR	1071409	ExpressionStatement	deadline_timeout = 0	3218:29:95503:95523	1070509	1	True				
ANR	1071410	AssignmentExpression	deadline_timeout = 0		1070509	0		=			
ANR	1071411	Identifier	deadline_timeout		1070509	0					
ANR	1071412	PrimaryExpression	0		1070509	1					
ANR	1071413	ExpressionStatement	timeout = deadline_timeout	3219:4:95529:95555	1070509	1	True				
ANR	1071414	AssignmentExpression	timeout = deadline_timeout		1070509	0		=			
ANR	1071415	Identifier	timeout		1070509	0					
ANR	1071416	Identifier	deadline_timeout		1070509	1					
ANR	1071417	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		1070509	18					
ANR	1071418	ForInit	i = 0 ;	3226:7:95675:95680	1070509	0	True				
ANR	1071419	AssignmentExpression	i = 0		1070509	0		=			
ANR	1071420	Identifier	i		1070509	0					
ANR	1071421	PrimaryExpression	0		1070509	1					
ANR	1071422	Condition	i < nPipe	3226:14:95682:95690	1070509	1	True				
ANR	1071423	RelationalExpression	i < nPipe		1070509	0		<			
ANR	1071424	Identifier	i		1070509	0					
ANR	1071425	Identifier	nPipe		1070509	1					
ANR	1071426	PostIncDecOperationExpression	i ++	3226:25:95693:95695	1070509	2	True				
ANR	1071427	Identifier	i		1070509	0					
ANR	1071428	IncDec	++		1070509	1					
ANR	1071429	CompoundStatement		207:30:7324:7324	1070509	3					
ANR	1071430	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		1070509	0					
ANR	1071431	Condition	( * pipeTable ) [ i ] . index != - 1	3227:8:95708:95734	1070509	0	True				
ANR	1071432	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		1070509	0		!=			
ANR	1071433	MemberAccess	( * pipeTable ) [ i ] . index		1070509	0					
ANR	1071434	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1071435	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1071436	UnaryOperator	*		1070509	0					
ANR	1071437	Identifier	pipeTable		1070509	1					
ANR	1071438	Identifier	i		1070509	1					
ANR	1071439	Identifier	index		1070509	1					
ANR	1071440	UnaryOperationExpression	- 1		1070509	1					
ANR	1071441	UnaryOperator	-		1070509	0					
ANR	1071442	PrimaryExpression	1		1070509	1					
ANR	1071443	CompoundStatement		209:4:7394:7448	1070509	1					
ANR	1071444	IdentifierDeclStatement	int pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ] ;	3228:4:95768:95822	1070509	0	True				
ANR	1071445	IdentifierDecl	pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		1070509	0					
ANR	1071446	IdentifierDeclType	int		1070509	0					
ANR	1071447	Identifier	pipefd		1070509	1					
ANR	1071448	AssignmentExpression	pipefd = ( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		1070509	2		=			
ANR	1071449	Identifier	pipefd		1070509	0					
ANR	1071450	ArrayIndexing	( * pipeHandleTable ) [ ( * pipeTable ) [ i ] . index ]		1070509	1					
ANR	1071451	UnaryOperationExpression	* pipeHandleTable		1070509	0					
ANR	1071452	UnaryOperator	*		1070509	0					
ANR	1071453	Identifier	pipeHandleTable		1070509	1					
ANR	1071454	MemberAccess	( * pipeTable ) [ i ] . index		1070509	1					
ANR	1071455	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1071456	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1071457	UnaryOperator	*		1070509	0					
ANR	1071458	Identifier	pipeTable		1070509	1					
ANR	1071459	Identifier	i		1070509	1					
ANR	1071460	Identifier	index		1070509	1					
ANR	1071461	SwitchStatement	switch ( ( * pipeTable ) [ i ] . handler_type )		1070509	1					
ANR	1071462	Condition	( * pipeTable ) [ i ] . handler_type	3229:12:95836:95863	1070509	0	True				
ANR	1071463	MemberAccess	( * pipeTable ) [ i ] . handler_type		1070509	0					
ANR	1071464	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1071465	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1071466	UnaryOperator	*		1070509	0					
ANR	1071467	Identifier	pipeTable		1070509	1					
ANR	1071468	Identifier	i		1070509	1					
ANR	1071469	Identifier	handler_type		1070509	1					
ANR	1071470	CompoundStatement		210:43:7493:7493	1070509	1					
ANR	1071471	Label	case HANDLE_READ :	3230:4:95873:95889	1070509	0	True				
ANR	1071472	Identifier	HANDLE_READ		1070509	0					
ANR	1071473	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_READ )"	3231:5:95896:95940	1070509	1	True				
ANR	1071474	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_READ )"		1070509	0					
ANR	1071475	Callee	selector . add_fd		1070509	0					
ANR	1071476	MemberAccess	selector . add_fd		1070509	0					
ANR	1071477	Identifier	selector		1070509	0					
ANR	1071478	Identifier	add_fd		1070509	1					
ANR	1071479	ArgumentList	pipefd		1070509	1					
ANR	1071480	Argument	pipefd		1070509	0					
ANR	1071481	Identifier	pipefd		1070509	0					
ANR	1071482	Argument	Selector :: IO_READ		1070509	1					
ANR	1071483	Identifier	Selector :: IO_READ		1070509	0					
ANR	1071484	BreakStatement	break ;	3232:5:95947:95952	1070509	2	True				
ANR	1071485	Label	case HANDLE_WRITE :	3233:4:95958:95975	1070509	3	True				
ANR	1071486	Identifier	HANDLE_WRITE		1070509	0					
ANR	1071487	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"	3234:5:95982:96027	1070509	4	True				
ANR	1071488	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"		1070509	0					
ANR	1071489	Callee	selector . add_fd		1070509	0					
ANR	1071490	MemberAccess	selector . add_fd		1070509	0					
ANR	1071491	Identifier	selector		1070509	0					
ANR	1071492	Identifier	add_fd		1070509	1					
ANR	1071493	ArgumentList	pipefd		1070509	1					
ANR	1071494	Argument	pipefd		1070509	0					
ANR	1071495	Identifier	pipefd		1070509	0					
ANR	1071496	Argument	Selector :: IO_WRITE		1070509	1					
ANR	1071497	Identifier	Selector :: IO_WRITE		1070509	0					
ANR	1071498	BreakStatement	break ;	3235:5:96034:96039	1070509	5	True				
ANR	1071499	Label	case HANDLE_READ_WRITE :	3236:4:96045:96067	1070509	6	True				
ANR	1071500	Identifier	HANDLE_READ_WRITE		1070509	0					
ANR	1071501	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_READ )"	3237:5:96074:96118	1070509	7	True				
ANR	1071502	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_READ )"		1070509	0					
ANR	1071503	Callee	selector . add_fd		1070509	0					
ANR	1071504	MemberAccess	selector . add_fd		1070509	0					
ANR	1071505	Identifier	selector		1070509	0					
ANR	1071506	Identifier	add_fd		1070509	1					
ANR	1071507	ArgumentList	pipefd		1070509	1					
ANR	1071508	Argument	pipefd		1070509	0					
ANR	1071509	Identifier	pipefd		1070509	0					
ANR	1071510	Argument	Selector :: IO_READ		1070509	1					
ANR	1071511	Identifier	Selector :: IO_READ		1070509	0					
ANR	1071512	ExpressionStatement	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"	3238:5:96125:96170	1070509	8	True				
ANR	1071513	CallExpression	"selector . add_fd ( pipefd , Selector :: IO_WRITE )"		1070509	0					
ANR	1071514	Callee	selector . add_fd		1070509	0					
ANR	1071515	MemberAccess	selector . add_fd		1070509	0					
ANR	1071516	Identifier	selector		1070509	0					
ANR	1071517	Identifier	add_fd		1070509	1					
ANR	1071518	ArgumentList	pipefd		1070509	1					
ANR	1071519	Argument	pipefd		1070509	0					
ANR	1071520	Identifier	pipefd		1070509	0					
ANR	1071521	Argument	Selector :: IO_WRITE		1070509	1					
ANR	1071522	Identifier	Selector :: IO_WRITE		1070509	0					
ANR	1071523	BreakStatement	break ;	3239:5:96177:96182	1070509	9	True				
ANR	1071524	IfStatement	if ( ! async_pipe [ 0 ] . is_connected ( ) )		1070509	19					
ANR	1071525	Condition	! async_pipe [ 0 ] . is_connected ( )	3250:7:96443:96472	1070509	0	True				
ANR	1071526	UnaryOperationExpression	! async_pipe [ 0 ] . is_connected ( )		1070509	0					
ANR	1071527	UnaryOperator	!		1070509	0					
ANR	1071528	CallExpression	async_pipe [ 0 ] . is_connected ( )		1070509	1					
ANR	1071529	Callee	async_pipe [ 0 ] . is_connected		1070509	0					
ANR	1071530	MemberAccess	async_pipe [ 0 ] . is_connected		1070509	0					
ANR	1071531	ArrayIndexing	async_pipe [ 0 ]		1070509	0					
ANR	1071532	Identifier	async_pipe		1070509	0					
ANR	1071533	PrimaryExpression	0		1070509	1					
ANR	1071534	Identifier	is_connected		1070509	1					
ANR	1071535	ArgumentList			1070509	1					
ANR	1071536	CompoundStatement		231:39:8101:8101	1070509	1					
ANR	1071537	ExpressionStatement	"EXCEPT ( ""DaemonCore:: async_pipe has been unexpectedly closed!"" )"	3251:3:96480:96543	1070509	0	True				
ANR	1071538	CallExpression	"EXCEPT ( ""DaemonCore:: async_pipe has been unexpectedly closed!"" )"		1070509	0					
ANR	1071539	Callee	EXCEPT		1070509	0					
ANR	1071540	Identifier	EXCEPT		1070509	0					
ANR	1071541	ArgumentList	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		1070509	1					
ANR	1071542	Argument	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		1070509	0					
ANR	1071543	PrimaryExpression	"""DaemonCore:: async_pipe has been unexpectedly closed!"""		1070509	0					
ANR	1071544	ExpressionStatement	"selector . add_fd ( async_pipe [ 0 ] . get_file_desc ( ) , Selector :: IO_READ )"	3253:2:96552:96620	1070509	20	True				
ANR	1071545	CallExpression	"selector . add_fd ( async_pipe [ 0 ] . get_file_desc ( ) , Selector :: IO_READ )"		1070509	0					
ANR	1071546	Callee	selector . add_fd		1070509	0					
ANR	1071547	MemberAccess	selector . add_fd		1070509	0					
ANR	1071548	Identifier	selector		1070509	0					
ANR	1071549	Identifier	add_fd		1070509	1					
ANR	1071550	ArgumentList	async_pipe [ 0 ] . get_file_desc ( )		1070509	1					
ANR	1071551	Argument	async_pipe [ 0 ] . get_file_desc ( )		1070509	0					
ANR	1071552	CallExpression	async_pipe [ 0 ] . get_file_desc ( )		1070509	0					
ANR	1071553	Callee	async_pipe [ 0 ] . get_file_desc		1070509	0					
ANR	1071554	MemberAccess	async_pipe [ 0 ] . get_file_desc		1070509	0					
ANR	1071555	ArrayIndexing	async_pipe [ 0 ]		1070509	0					
ANR	1071556	Identifier	async_pipe		1070509	0					
ANR	1071557	PrimaryExpression	0		1070509	1					
ANR	1071558	Identifier	get_file_desc		1070509	1					
ANR	1071559	ArgumentList			1070509	1					
ANR	1071560	Argument	Selector :: IO_READ		1070509	1					
ANR	1071561	Identifier	Selector :: IO_READ		1070509	0					
ANR	1071562	ExpressionStatement	CondorThreads :: enable_parallel ( true )	3259:2:96751:96787	1070509	21	True				
ANR	1071563	CallExpression	CondorThreads :: enable_parallel ( true )		1070509	0					
ANR	1071564	Callee	CondorThreads :: enable_parallel		1070509	0					
ANR	1071565	Identifier	CondorThreads :: enable_parallel		1070509	0					
ANR	1071566	ArgumentList	true		1070509	1					
ANR	1071567	Argument	true		1070509	0					
ANR	1071568	Identifier	true		1070509	0					
ANR	1071569	ExpressionStatement	async_sigs_unblocked = TRUE	3266:2:97078:97105	1070509	22	True				
ANR	1071570	AssignmentExpression	async_sigs_unblocked = TRUE		1070509	0		=			
ANR	1071571	Identifier	async_sigs_unblocked		1070509	0					
ANR	1071572	Identifier	TRUE		1070509	1					
ANR	1071573	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & emptyset , NULL )"	3270:2:97183:97226	1070509	23	True				
ANR	1071574	CallExpression	"sigprocmask ( SIG_SETMASK , & emptyset , NULL )"		1070509	0					
ANR	1071575	Callee	sigprocmask		1070509	0					
ANR	1071576	Identifier	sigprocmask		1070509	0					
ANR	1071577	ArgumentList	SIG_SETMASK		1070509	1					
ANR	1071578	Argument	SIG_SETMASK		1070509	0					
ANR	1071579	Identifier	SIG_SETMASK		1070509	0					
ANR	1071580	Argument	& emptyset		1070509	1					
ANR	1071581	UnaryOperationExpression	& emptyset		1070509	0					
ANR	1071582	UnaryOperator	&		1070509	0					
ANR	1071583	Identifier	emptyset		1070509	1					
ANR	1071584	Argument	NULL		1070509	2					
ANR	1071585	Identifier	NULL		1070509	0					
ANR	1071586	ExpressionStatement	selector . set_timeout ( timeout )	3276:2:97325:97356	1070509	24	True				
ANR	1071587	CallExpression	selector . set_timeout ( timeout )		1070509	0					
ANR	1071588	Callee	selector . set_timeout		1070509	0					
ANR	1071589	MemberAccess	selector . set_timeout		1070509	0					
ANR	1071590	Identifier	selector		1070509	0					
ANR	1071591	Identifier	set_timeout		1070509	1					
ANR	1071592	ArgumentList	timeout		1070509	1					
ANR	1071593	Argument	timeout		1070509	0					
ANR	1071594	Identifier	timeout		1070509	0					
ANR	1071595	ExpressionStatement	errno = 0	3278:2:97361:97370	1070509	25	True				
ANR	1071596	AssignmentExpression	errno = 0		1070509	0		=			
ANR	1071597	Identifier	errno		1070509	0					
ANR	1071598	PrimaryExpression	0		1070509	1					
ANR	1071599	IdentifierDeclStatement	time_t time_before = time ( NULL ) ;	3279:2:97374:97405	1070509	26	True				
ANR	1071600	IdentifierDecl	time_before = time ( NULL )		1070509	0					
ANR	1071601	IdentifierDeclType	time_t		1070509	0					
ANR	1071602	Identifier	time_before		1070509	1					
ANR	1071603	AssignmentExpression	time_before = time ( NULL )		1070509	2		=			
ANR	1071604	Identifier	time_before		1070509	0					
ANR	1071605	CallExpression	time ( NULL )		1070509	1					
ANR	1071606	Callee	time		1070509	0					
ANR	1071607	Identifier	time		1070509	0					
ANR	1071608	ArgumentList	NULL		1070509	1					
ANR	1071609	Argument	NULL		1070509	0					
ANR	1071610	Identifier	NULL		1070509	0					
ANR	1071611	IdentifierDeclStatement	time_t okay_delta = timeout ;	3280:2:97409:97436	1070509	27	True				
ANR	1071612	IdentifierDecl	okay_delta = timeout		1070509	0					
ANR	1071613	IdentifierDeclType	time_t		1070509	0					
ANR	1071614	Identifier	okay_delta		1070509	1					
ANR	1071615	AssignmentExpression	okay_delta = timeout		1070509	2		=			
ANR	1071616	Identifier	timeout		1070509	0					
ANR	1071617	Identifier	timeout		1070509	1					
ANR	1071618	IfStatement	if ( DebugFlags & D_PERF_TRACE )		1070509	28					
ANR	1071619	Condition	DebugFlags & D_PERF_TRACE	3285:6:97599:97623	1070509	0	True				
ANR	1071620	BitAndExpression	DebugFlags & D_PERF_TRACE		1070509	0		&			
ANR	1071621	Identifier	DebugFlags		1070509	0					
ANR	1071622	Identifier	D_PERF_TRACE		1070509	1					
ANR	1071623	CompoundStatement		266:33:9252:9252	1070509	1					
ANR	1071624	ExpressionStatement	"dprintf ( D_ALWAYS , ""PERF: entering select\\n"" )"	3286:3:97631:97675	1070509	0	True				
ANR	1071625	CallExpression	"dprintf ( D_ALWAYS , ""PERF: entering select\\n"" )"		1070509	0					
ANR	1071626	Callee	dprintf		1070509	0					
ANR	1071627	Identifier	dprintf		1070509	0					
ANR	1071628	ArgumentList	D_ALWAYS		1070509	1					
ANR	1071629	Argument	D_ALWAYS		1070509	0					
ANR	1071630	Identifier	D_ALWAYS		1070509	0					
ANR	1071631	Argument	"""PERF: entering select\\n"""		1070509	1					
ANR	1071632	PrimaryExpression	"""PERF: entering select\\n"""		1070509	0					
ANR	1071633	ExpressionStatement	selector . execute ( )	3289:2:97684:97702	1070509	29	True				
ANR	1071634	CallExpression	selector . execute ( )		1070509	0					
ANR	1071635	Callee	selector . execute		1070509	0					
ANR	1071636	MemberAccess	selector . execute		1070509	0					
ANR	1071637	Identifier	selector		1070509	0					
ANR	1071638	Identifier	execute		1070509	1					
ANR	1071639	ArgumentList			1070509	1					
ANR	1071640	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3292:8:97775:97809	1070509	30	True				
ANR	1071641	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1071642	Identifier	runtime		1070509	0					
ANR	1071643	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1071644	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1071645	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1071646	ArgumentList			1070509	1					
ANR	1071647	ExpressionStatement	dc_stats . SelectWaittime += ( runtime - group_runtime )	3293:8:97819:97871	1070509	31	True				
ANR	1071648	AssignmentExpression	dc_stats . SelectWaittime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1071649	MemberAccess	dc_stats . SelectWaittime		1070509	0					
ANR	1071650	Identifier	dc_stats		1070509	0					
ANR	1071651	Identifier	SelectWaittime		1070509	1					
ANR	1071652	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1071653	Identifier	runtime		1070509	0					
ANR	1071654	Identifier	group_runtime		1070509	1					
ANR	1071655	ExpressionStatement	tmpErrno = errno	3296:2:97936:97952	1070509	32	True				
ANR	1071656	AssignmentExpression	tmpErrno = errno		1070509	0		=			
ANR	1071657	Identifier	tmpErrno		1070509	0					
ANR	1071658	Identifier	errno		1070509	1					
ANR	1071659	ExpressionStatement	"CheckForTimeSkip ( time_before , okay_delta )"	3298:2:97957:97998	1070509	33	True				
ANR	1071660	CallExpression	"CheckForTimeSkip ( time_before , okay_delta )"		1070509	0					
ANR	1071661	Callee	CheckForTimeSkip		1070509	0					
ANR	1071662	Identifier	CheckForTimeSkip		1070509	0					
ANR	1071663	ArgumentList	time_before		1070509	1					
ANR	1071664	Argument	time_before		1070509	0					
ANR	1071665	Identifier	time_before		1070509	0					
ANR	1071666	Argument	okay_delta		1070509	1					
ANR	1071667	Identifier	okay_delta		1070509	0					
ANR	1071668	ExpressionStatement	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"	3305:2:98105:98147	1070509	34	True				
ANR	1071669	CallExpression	"sigprocmask ( SIG_SETMASK , & fullset , NULL )"		1070509	0					
ANR	1071670	Callee	sigprocmask		1070509	0					
ANR	1071671	Identifier	sigprocmask		1070509	0					
ANR	1071672	ArgumentList	SIG_SETMASK		1070509	1					
ANR	1071673	Argument	SIG_SETMASK		1070509	0					
ANR	1071674	Identifier	SIG_SETMASK		1070509	0					
ANR	1071675	Argument	& fullset		1070509	1					
ANR	1071676	UnaryOperationExpression	& fullset		1070509	0					
ANR	1071677	UnaryOperator	&		1070509	0					
ANR	1071678	Identifier	fullset		1070509	1					
ANR	1071679	Argument	NULL		1070509	2					
ANR	1071680	Identifier	NULL		1070509	0					
ANR	1071681	ExpressionStatement	async_sigs_unblocked = FALSE	3310:2:98302:98330	1070509	35	True				
ANR	1071682	AssignmentExpression	async_sigs_unblocked = FALSE		1070509	0		=			
ANR	1071683	Identifier	async_sigs_unblocked		1070509	0					
ANR	1071684	Identifier	FALSE		1070509	1					
ANR	1071685	IfStatement	if ( selector . failed ( ) )		1070509	36					
ANR	1071686	Condition	selector . failed ( )	3312:7:98340:98356	1070509	0	True				
ANR	1071687	CallExpression	selector . failed ( )		1070509	0					
ANR	1071688	Callee	selector . failed		1070509	0					
ANR	1071689	MemberAccess	selector . failed		1070509	0					
ANR	1071690	Identifier	selector		1070509	0					
ANR	1071691	Identifier	failed		1070509	1					
ANR	1071692	ArgumentList			1070509	1					
ANR	1071693	CompoundStatement		293:27:9986:9986	1070509	1					
ANR	1071694	ExpressionStatement	"dprintf ( D_ALWAYS , ""Socket Table:\\n"" )"	3314:4:98408:98443	1070509	0	True				
ANR	1071695	CallExpression	"dprintf ( D_ALWAYS , ""Socket Table:\\n"" )"		1070509	0					
ANR	1071696	Callee	dprintf		1070509	0					
ANR	1071697	Identifier	dprintf		1070509	0					
ANR	1071698	ArgumentList	D_ALWAYS		1070509	1					
ANR	1071699	Argument	D_ALWAYS		1070509	0					
ANR	1071700	Identifier	D_ALWAYS		1070509	0					
ANR	1071701	Argument	"""Socket Table:\\n"""		1070509	1					
ANR	1071702	PrimaryExpression	"""Socket Table:\\n"""		1070509	0					
ANR	1071703	ExpressionStatement	DumpSocketTable ( D_ALWAYS )	3315:10:98455:98482	1070509	1	True				
ANR	1071704	CallExpression	DumpSocketTable ( D_ALWAYS )		1070509	0					
ANR	1071705	Callee	DumpSocketTable		1070509	0					
ANR	1071706	Identifier	DumpSocketTable		1070509	0					
ANR	1071707	ArgumentList	D_ALWAYS		1070509	1					
ANR	1071708	Argument	D_ALWAYS		1070509	0					
ANR	1071709	Identifier	D_ALWAYS		1070509	0					
ANR	1071710	ExpressionStatement	"dprintf ( D_ALWAYS , ""State of selector:\\n"" )"	3316:4:98488:98528	1070509	2	True				
ANR	1071711	CallExpression	"dprintf ( D_ALWAYS , ""State of selector:\\n"" )"		1070509	0					
ANR	1071712	Callee	dprintf		1070509	0					
ANR	1071713	Identifier	dprintf		1070509	0					
ANR	1071714	ArgumentList	D_ALWAYS		1070509	1					
ANR	1071715	Argument	D_ALWAYS		1070509	0					
ANR	1071716	Identifier	D_ALWAYS		1070509	0					
ANR	1071717	Argument	"""State of selector:\\n"""		1070509	1					
ANR	1071718	PrimaryExpression	"""State of selector:\\n"""		1070509	0					
ANR	1071719	ExpressionStatement	selector . display ( )	3317:4:98534:98552	1070509	3	True				
ANR	1071720	CallExpression	selector . display ( )		1070509	0					
ANR	1071721	Callee	selector . display		1070509	0					
ANR	1071722	MemberAccess	selector . display		1070509	0					
ANR	1071723	Identifier	selector		1070509	0					
ANR	1071724	Identifier	display		1070509	1					
ANR	1071725	ArgumentList			1070509	1					
ANR	1071726	ExpressionStatement	"EXCEPT ( ""DaemonCore: select() returned an unexpected error: %d (%s)"" , tmpErrno , strerror ( tmpErrno ) )"	3318:4:98558:98654	1070509	4	True				
ANR	1071727	CallExpression	"EXCEPT ( ""DaemonCore: select() returned an unexpected error: %d (%s)"" , tmpErrno , strerror ( tmpErrno ) )"		1070509	0					
ANR	1071728	Callee	EXCEPT		1070509	0					
ANR	1071729	Identifier	EXCEPT		1070509	0					
ANR	1071730	ArgumentList	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		1070509	1					
ANR	1071731	Argument	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		1070509	0					
ANR	1071732	PrimaryExpression	"""DaemonCore: select() returned an unexpected error: %d (%s)"""		1070509	0					
ANR	1071733	Argument	tmpErrno		1070509	1					
ANR	1071734	Identifier	tmpErrno		1070509	0					
ANR	1071735	Argument	strerror ( tmpErrno )		1070509	2					
ANR	1071736	CallExpression	strerror ( tmpErrno )		1070509	0					
ANR	1071737	Callee	strerror		1070509	0					
ANR	1071738	Identifier	strerror		1070509	0					
ANR	1071739	ArgumentList	tmpErrno		1070509	1					
ANR	1071740	Argument	tmpErrno		1070509	0					
ANR	1071741	Identifier	tmpErrno		1070509	0					
ANR	1071742	IfStatement	if ( DebugFlags & D_PERF_TRACE )		1070509	37					
ANR	1071743	Condition	DebugFlags & D_PERF_TRACE	3356:6:99939:99963	1070509	0	True				
ANR	1071744	BitAndExpression	DebugFlags & D_PERF_TRACE		1070509	0		&			
ANR	1071745	Identifier	DebugFlags		1070509	0					
ANR	1071746	Identifier	D_PERF_TRACE		1070509	1					
ANR	1071747	CompoundStatement		337:33:11592:11592	1070509	1					
ANR	1071748	ExpressionStatement	"dprintf ( D_ALWAYS , ""PERF: leaving select\\n"" )"	3357:3:99971:100014	1070509	0	True				
ANR	1071749	CallExpression	"dprintf ( D_ALWAYS , ""PERF: leaving select\\n"" )"		1070509	0					
ANR	1071750	Callee	dprintf		1070509	0					
ANR	1071751	Identifier	dprintf		1070509	0					
ANR	1071752	ArgumentList	D_ALWAYS		1070509	1					
ANR	1071753	Argument	D_ALWAYS		1070509	0					
ANR	1071754	Identifier	D_ALWAYS		1070509	0					
ANR	1071755	Argument	"""PERF: leaving select\\n"""		1070509	1					
ANR	1071756	PrimaryExpression	"""PERF: leaving select\\n"""		1070509	0					
ANR	1071757	ExpressionStatement	selector . display ( )	3358:3:100019:100037	1070509	1	True				
ANR	1071758	CallExpression	selector . display ( )		1070509	0					
ANR	1071759	Callee	selector . display		1070509	0					
ANR	1071760	MemberAccess	selector . display		1070509	0					
ANR	1071761	Identifier	selector		1070509	0					
ANR	1071762	Identifier	display		1070509	1					
ANR	1071763	ArgumentList			1070509	1					
ANR	1071764	ExpressionStatement	CondorThreads :: enable_parallel ( false )	3363:2:100136:100173	1070509	38	True				
ANR	1071765	CallExpression	CondorThreads :: enable_parallel ( false )		1070509	0					
ANR	1071766	Callee	CondorThreads :: enable_parallel		1070509	0					
ANR	1071767	Identifier	CondorThreads :: enable_parallel		1070509	0					
ANR	1071768	ArgumentList	false		1070509	1					
ANR	1071769	Argument	false		1070509	0					
ANR	1071770	Identifier	false		1070509	0					
ANR	1071771	ExpressionStatement	runtime = group_runtime = UtcTime :: getTimeDouble ( )	3365:8:100184:100234	1070509	39	True				
ANR	1071772	AssignmentExpression	runtime = group_runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1071773	Identifier	runtime		1070509	0					
ANR	1071774	AssignmentExpression	group_runtime = UtcTime :: getTimeDouble ( )		1070509	1		=			
ANR	1071775	Identifier	group_runtime		1070509	0					
ANR	1071776	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1071777	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1071778	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1071779	ArgumentList			1070509	1					
ANR	1071780	IfStatement	if ( selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) ) )		1070509	40					
ANR	1071781	Condition	selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) )	3367:7:100244:100347	1070509	0	True				
ANR	1071782	OrExpression	selector . has_ready ( ) || ( selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL ) )		1070509	0		||			
ANR	1071783	CallExpression	selector . has_ready ( )		1070509	0					
ANR	1071784	Callee	selector . has_ready		1070509	0					
ANR	1071785	MemberAccess	selector . has_ready		1070509	0					
ANR	1071786	Identifier	selector		1070509	0					
ANR	1071787	Identifier	has_ready		1070509	1					
ANR	1071788	ArgumentList			1070509	1					
ANR	1071789	AndExpression	selector . timed_out ( ) && min_deadline && min_deadline < time ( NULL )		1070509	1		&&			
ANR	1071790	CallExpression	selector . timed_out ( )		1070509	0					
ANR	1071791	Callee	selector . timed_out		1070509	0					
ANR	1071792	MemberAccess	selector . timed_out		1070509	0					
ANR	1071793	Identifier	selector		1070509	0					
ANR	1071794	Identifier	timed_out		1070509	1					
ANR	1071795	ArgumentList			1070509	1					
ANR	1071796	AndExpression	min_deadline && min_deadline < time ( NULL )		1070509	1		&&			
ANR	1071797	Identifier	min_deadline		1070509	0					
ANR	1071798	RelationalExpression	min_deadline < time ( NULL )		1070509	1		<			
ANR	1071799	Identifier	min_deadline		1070509	0					
ANR	1071800	CallExpression	time ( NULL )		1070509	1					
ANR	1071801	Callee	time		1070509	0					
ANR	1071802	Identifier	time		1070509	0					
ANR	1071803	ArgumentList	NULL		1070509	1					
ANR	1071804	Argument	NULL		1070509	0					
ANR	1071805	Identifier	NULL		1070509	0					
ANR	1071806	CompoundStatement		360:3:12261:12288	1070509	1					
ANR	1071807	IdentifierDeclStatement	time_t now = time ( NULL ) ;	3377:3:100606:100629	1070509	0	True				
ANR	1071808	IdentifierDecl	now = time ( NULL )		1070509	0					
ANR	1071809	IdentifierDeclType	time_t		1070509	0					
ANR	1071810	Identifier	now		1070509	1					
ANR	1071811	AssignmentExpression	now = time ( NULL )		1070509	2		=			
ANR	1071812	Identifier	now		1070509	0					
ANR	1071813	CallExpression	time ( NULL )		1070509	1					
ANR	1071814	Callee	time		1070509	0					
ANR	1071815	Identifier	time		1070509	0					
ANR	1071816	ArgumentList	NULL		1070509	1					
ANR	1071817	Argument	NULL		1070509	0					
ANR	1071818	Identifier	NULL		1070509	0					
ANR	1071819	IdentifierDeclStatement	bool recheck_status = false ;	3379:3:100635:100662	1070509	1	True				
ANR	1071820	IdentifierDecl	recheck_status = false		1070509	0					
ANR	1071821	IdentifierDeclType	bool		1070509	0					
ANR	1071822	Identifier	recheck_status		1070509	1					
ANR	1071823	AssignmentExpression	recheck_status = false		1070509	2		=			
ANR	1071824	Identifier	false		1070509	0					
ANR	1071825	Identifier	false		1070509	1					
ANR	1071826	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1070509	2					
ANR	1071827	ForInit	i = 0 ;	3383:7:100777:100782	1070509	0	True				
ANR	1071828	AssignmentExpression	i = 0		1070509	0		=			
ANR	1071829	Identifier	i		1070509	0					
ANR	1071830	PrimaryExpression	0		1070509	1					
ANR	1071831	Condition	i < nSock	3383:14:100784:100792	1070509	1	True				
ANR	1071832	RelationalExpression	i < nSock		1070509	0		<			
ANR	1071833	Identifier	i		1070509	0					
ANR	1071834	Identifier	nSock		1070509	1					
ANR	1071835	PostIncDecOperationExpression	i ++	3383:25:100795:100797	1070509	2	True				
ANR	1071836	Identifier	i		1070509	0					
ANR	1071837	IncDec	++		1070509	1					
ANR	1071838	CompoundStatement		364:30:12426:12426	1070509	3					
ANR	1071839	IfStatement	if ( ( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false )		1070509	0					
ANR	1071840	Condition	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false	3384:9:100811:100921	1070509	0	True				
ANR	1071841	AndExpression	( * sockTable ) [ i ] . iosock && ( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		1070509	0		&&			
ANR	1071842	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071843	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071844	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071845	UnaryOperator	*		1070509	0					
ANR	1071846	Identifier	sockTable		1070509	1					
ANR	1071847	Identifier	i		1070509	1					
ANR	1071848	Identifier	iosock		1070509	1					
ANR	1071849	AndExpression	( * sockTable ) [ i ] . servicing_tid == 0 && ( * sockTable ) [ i ] . remove_asap == false		1070509	1		&&			
ANR	1071850	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == 0		1070509	0		==			
ANR	1071851	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1070509	0					
ANR	1071852	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071853	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071854	UnaryOperator	*		1070509	0					
ANR	1071855	Identifier	sockTable		1070509	1					
ANR	1071856	Identifier	i		1070509	1					
ANR	1071857	Identifier	servicing_tid		1070509	1					
ANR	1071858	PrimaryExpression	0		1070509	1					
ANR	1071859	EqualityExpression	( * sockTable ) [ i ] . remove_asap == false		1070509	1		==			
ANR	1071860	MemberAccess	( * sockTable ) [ i ] . remove_asap		1070509	0					
ANR	1071861	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071862	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071863	UnaryOperator	*		1070509	0					
ANR	1071864	Identifier	sockTable		1070509	1					
ANR	1071865	Identifier	i		1070509	1					
ANR	1071866	Identifier	remove_asap		1070509	1					
ANR	1071867	Identifier	false		1070509	1					
ANR	1071868	CompoundStatement		374:5:12869:12921	1070509	1					
ANR	1071869	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	3391:5:101137:101173	1070509	0	True				
ANR	1071870	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		1070509	0		=			
ANR	1071871	MemberAccess	( * sockTable ) [ i ] . call_handler		1070509	0					
ANR	1071872	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071873	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071874	UnaryOperator	*		1070509	0					
ANR	1071875	Identifier	sockTable		1070509	1					
ANR	1071876	Identifier	i		1070509	1					
ANR	1071877	Identifier	call_handler		1070509	1					
ANR	1071878	Identifier	false		1070509	1					
ANR	1071879	IdentifierDeclStatement	time_t deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( ) ;	3392:5:101180:101236	1070509	1	True				
ANR	1071880	IdentifierDecl	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	0					
ANR	1071881	IdentifierDeclType	time_t		1070509	0					
ANR	1071882	Identifier	deadline		1070509	1					
ANR	1071883	AssignmentExpression	deadline = ( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	2		=			
ANR	1071884	Identifier	deadline		1070509	0					
ANR	1071885	CallExpression	( * sockTable ) [ i ] . iosock -> get_deadline ( )		1070509	1					
ANR	1071886	Callee	( * sockTable ) [ i ] . iosock -> get_deadline		1070509	0					
ANR	1071887	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_deadline		1070509	0					
ANR	1071888	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071889	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071890	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071891	UnaryOperator	*		1070509	0					
ANR	1071892	Identifier	sockTable		1070509	1					
ANR	1071893	Identifier	i		1070509	1					
ANR	1071894	Identifier	iosock		1070509	1					
ANR	1071895	Identifier	get_deadline		1070509	1					
ANR	1071896	ArgumentList			1070509	1					
ANR	1071897	IdentifierDeclStatement	bool sock_timed_out = ( deadline && deadline < now ) ;	3393:5:101243:101295	1070509	2	True				
ANR	1071898	IdentifierDecl	sock_timed_out = ( deadline && deadline < now )		1070509	0					
ANR	1071899	IdentifierDeclType	bool		1070509	0					
ANR	1071900	Identifier	sock_timed_out		1070509	1					
ANR	1071901	AssignmentExpression	sock_timed_out = ( deadline && deadline < now )		1070509	2		=			
ANR	1071902	Identifier	sock_timed_out		1070509	0					
ANR	1071903	AndExpression	deadline && deadline < now		1070509	1		&&			
ANR	1071904	Identifier	deadline		1070509	0					
ANR	1071905	RelationalExpression	deadline < now		1070509	1		<			
ANR	1071906	Identifier	deadline		1070509	0					
ANR	1071907	Identifier	now		1070509	1					
ANR	1071908	IfStatement	if ( ( * sockTable ) [ i ] . is_reverse_connect_pending )		1070509	3					
ANR	1071909	Condition	( * sockTable ) [ i ] . is_reverse_connect_pending	3395:10:101308:101349	1070509	0	True				
ANR	1071910	MemberAccess	( * sockTable ) [ i ] . is_reverse_connect_pending		1070509	0					
ANR	1071911	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071912	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071913	UnaryOperator	*		1070509	0					
ANR	1071914	Identifier	sockTable		1070509	1					
ANR	1071915	Identifier	i		1070509	1					
ANR	1071916	Identifier	is_reverse_connect_pending		1070509	1					
ANR	1071917	CompoundStatement		376:55:12979:12979	1070509	1					
ANR	1071918	ElseStatement	else		1070509	0					
ANR	1071919	IfStatement	if ( ( * sockTable ) [ i ] . is_connect_pending )		1070509	0					
ANR	1071920	Condition	( * sockTable ) [ i ] . is_connect_pending	3398:15:101400:101433	1070509	0	True				
ANR	1071921	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		1070509	0					
ANR	1071922	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071923	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071924	UnaryOperator	*		1070509	0					
ANR	1071925	Identifier	sockTable		1070509	1					
ANR	1071926	Identifier	i		1070509	1					
ANR	1071927	Identifier	is_connect_pending		1070509	1					
ANR	1071928	CompoundStatement		379:52:13063:13063	1070509	1					
ANR	1071929	IfStatement	"if ( selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out )"		1070509	0					
ANR	1071930	Condition	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"	3400:11:101451:101673	1070509	0	True				
ANR	1071931	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE ) || selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"		1070509	0		||			
ANR	1071932	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_WRITE )"		1070509	0					
ANR	1071933	Callee	selector . fd_ready		1070509	0					
ANR	1071934	MemberAccess	selector . fd_ready		1070509	0					
ANR	1071935	Identifier	selector		1070509	0					
ANR	1071936	Identifier	fd_ready		1070509	1					
ANR	1071937	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1071938	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071939	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071940	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071941	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071942	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071943	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071944	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071945	UnaryOperator	*		1070509	0					
ANR	1071946	Identifier	sockTable		1070509	1					
ANR	1071947	Identifier	i		1070509	1					
ANR	1071948	Identifier	iosock		1070509	1					
ANR	1071949	Identifier	get_file_desc		1070509	1					
ANR	1071950	ArgumentList			1070509	1					
ANR	1071951	Argument	Selector :: IO_WRITE		1070509	1					
ANR	1071952	Identifier	Selector :: IO_WRITE		1070509	0					
ANR	1071953	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT ) || sock_timed_out"		1070509	1		||			
ANR	1071954	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_EXCEPT )"		1070509	0					
ANR	1071955	Callee	selector . fd_ready		1070509	0					
ANR	1071956	MemberAccess	selector . fd_ready		1070509	0					
ANR	1071957	Identifier	selector		1070509	0					
ANR	1071958	Identifier	fd_ready		1070509	1					
ANR	1071959	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1071960	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071961	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1071962	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071963	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1071964	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071965	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071966	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071967	UnaryOperator	*		1070509	0					
ANR	1071968	Identifier	sockTable		1070509	1					
ANR	1071969	Identifier	i		1070509	1					
ANR	1071970	Identifier	iosock		1070509	1					
ANR	1071971	Identifier	get_file_desc		1070509	1					
ANR	1071972	ArgumentList			1070509	1					
ANR	1071973	Argument	Selector :: IO_EXCEPT		1070509	1					
ANR	1071974	Identifier	Selector :: IO_EXCEPT		1070509	0					
ANR	1071975	Identifier	sock_timed_out		1070509	1					
ANR	1071976	CompoundStatement		386:6:13309:13309	1070509	1					
ANR	1071977	IfStatement	if ( ( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK )		1070509	0					
ANR	1071978	Condition	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK	3411:12:101893:101980	1070509	0	True				
ANR	1071979	EqualityExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( ) != CEDAR_EWOULDBLOCK		1070509	0		!=			
ANR	1071980	CallExpression	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish ( )		1070509	0					
ANR	1071981	Callee	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		1070509	0					
ANR	1071982	PtrMemberAccess	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		1070509	0					
ANR	1071983	CastExpression	( Sock * ) ( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1071984	CastTarget	Sock *		1070509	0					
ANR	1071985	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	1					
ANR	1071986	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1071987	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1071988	UnaryOperator	*		1070509	0					
ANR	1071989	Identifier	sockTable		1070509	1					
ANR	1071990	Identifier	i		1070509	1					
ANR	1071991	Identifier	iosock		1070509	1					
ANR	1071992	Identifier	do_connect_finish		1070509	1					
ANR	1071993	ArgumentList			1070509	1					
ANR	1071994	Identifier	CEDAR_EWOULDBLOCK		1070509	1					
ANR	1071995	CompoundStatement		394:7:13616:13616	1070509	1					
ANR	1071996	ExpressionStatement	( * sockTable ) [ i ] . call_handler = true	3414:8:102000:102035	1070509	0	True				
ANR	1071997	AssignmentExpression	( * sockTable ) [ i ] . call_handler = true		1070509	0		=			
ANR	1071998	MemberAccess	( * sockTable ) [ i ] . call_handler		1070509	0					
ANR	1071999	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072000	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072001	UnaryOperator	*		1070509	0					
ANR	1072002	Identifier	sockTable		1070509	1					
ANR	1072003	Identifier	i		1070509	1					
ANR	1072004	Identifier	call_handler		1070509	1					
ANR	1072005	Identifier	true		1070509	1					
ANR	1072006	ElseStatement	else		1070509	0					
ANR	1072007	CompoundStatement		398:12:13692:13692	1070509	0					
ANR	1072008	IfStatement	"if ( selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out )"		1070509	0					
ANR	1072009	Condition	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out"	3418:11:102079:102195	1070509	0	True				
ANR	1072010	OrExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ ) || sock_timed_out"		1070509	0		||			
ANR	1072011	CallExpression	"selector . fd_ready ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		1070509	0					
ANR	1072012	Callee	selector . fd_ready		1070509	0					
ANR	1072013	MemberAccess	selector . fd_ready		1070509	0					
ANR	1072014	Identifier	selector		1070509	0					
ANR	1072015	Identifier	fd_ready		1070509	1					
ANR	1072016	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1072017	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1072018	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1072019	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1072020	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1072021	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1072022	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072023	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072024	UnaryOperator	*		1070509	0					
ANR	1072025	Identifier	sockTable		1070509	1					
ANR	1072026	Identifier	i		1070509	1					
ANR	1072027	Identifier	iosock		1070509	1					
ANR	1072028	Identifier	get_file_desc		1070509	1					
ANR	1072029	ArgumentList			1070509	1					
ANR	1072030	Argument	Selector :: IO_READ		1070509	1					
ANR	1072031	Identifier	Selector :: IO_READ		1070509	0					
ANR	1072032	Identifier	sock_timed_out		1070509	1					
ANR	1072033	CompoundStatement		402:6:13831:13831	1070509	1					
ANR	1072034	ExpressionStatement	( * sockTable ) [ i ] . call_handler = true	3422:7:102214:102249	1070509	0	True				
ANR	1072035	AssignmentExpression	( * sockTable ) [ i ] . call_handler = true		1070509	0		=			
ANR	1072036	MemberAccess	( * sockTable ) [ i ] . call_handler		1070509	0					
ANR	1072037	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072038	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072039	UnaryOperator	*		1070509	0					
ANR	1072040	Identifier	sockTable		1070509	1					
ANR	1072041	Identifier	i		1070509	1					
ANR	1072042	Identifier	call_handler		1070509	1					
ANR	1072043	Identifier	true		1070509	1					
ANR	1072044	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3428:12:102364:102398	1070509	3	True				
ANR	1072045	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1072046	Identifier	runtime		1070509	0					
ANR	1072047	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1072048	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1072049	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1072050	ArgumentList			1070509	1					
ANR	1072051	ExpressionStatement	dc_stats . SocketRuntime += ( runtime - group_runtime )	3429:12:102412:102463	1070509	4	True				
ANR	1072052	AssignmentExpression	dc_stats . SocketRuntime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1072053	MemberAccess	dc_stats . SocketRuntime		1070509	0					
ANR	1072054	Identifier	dc_stats		1070509	0					
ANR	1072055	Identifier	SocketRuntime		1070509	1					
ANR	1072056	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1072057	Identifier	runtime		1070509	0					
ANR	1072058	Identifier	group_runtime		1070509	1					
ANR	1072059	ExpressionStatement	group_runtime = runtime	3430:12:102477:102500	1070509	5	True				
ANR	1072060	AssignmentExpression	group_runtime = runtime		1070509	0		=			
ANR	1072061	Identifier	group_runtime		1070509	0					
ANR	1072062	Identifier	runtime		1070509	1					
ANR	1072063	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		1070509	6					
ANR	1072064	ForInit	i = 0 ;	3433:7:102576:102581	1070509	0	True				
ANR	1072065	AssignmentExpression	i = 0		1070509	0		=			
ANR	1072066	Identifier	i		1070509	0					
ANR	1072067	PrimaryExpression	0		1070509	1					
ANR	1072068	Condition	i < nPipe	3433:14:102583:102591	1070509	1	True				
ANR	1072069	RelationalExpression	i < nPipe		1070509	0		<			
ANR	1072070	Identifier	i		1070509	0					
ANR	1072071	Identifier	nPipe		1070509	1					
ANR	1072072	PostIncDecOperationExpression	i ++	3433:25:102594:102596	1070509	2	True				
ANR	1072073	Identifier	i		1070509	0					
ANR	1072074	IncDec	++		1070509	1					
ANR	1072075	CompoundStatement		414:30:14225:14225	1070509	3					
ANR	1072076	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		1070509	0					
ANR	1072077	Condition	( * pipeTable ) [ i ] . index != - 1	3434:9:102610:102636	1070509	0	True				
ANR	1072078	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		1070509	0		!=			
ANR	1072079	MemberAccess	( * pipeTable ) [ i ] . index		1070509	0					
ANR	1072080	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072081	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072082	UnaryOperator	*		1070509	0					
ANR	1072083	Identifier	pipeTable		1070509	1					
ANR	1072084	Identifier	i		1070509	1					
ANR	1072085	Identifier	index		1070509	1					
ANR	1072086	UnaryOperationExpression	- 1		1070509	1					
ANR	1072087	UnaryOperator	-		1070509	0					
ANR	1072088	PrimaryExpression	1		1070509	1					
ANR	1072089	CompoundStatement		415:39:14266:14266	1070509	1					
ANR	1072090	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	3436:5:102718:102754	1070509	0	True				
ANR	1072091	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		1070509	0		=			
ANR	1072092	MemberAccess	( * pipeTable ) [ i ] . call_handler		1070509	0					
ANR	1072093	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072094	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072095	UnaryOperator	*		1070509	0					
ANR	1072096	Identifier	pipeTable		1070509	1					
ANR	1072097	Identifier	i		1070509	1					
ANR	1072098	Identifier	call_handler		1070509	1					
ANR	1072099	Identifier	false		1070509	1					
ANR	1072100	ExpressionStatement	ASSERT ( ( * pipeTable ) [ i ] . pentry )	3439:5:102839:102871	1070509	1	True				
ANR	1072101	CallExpression	ASSERT ( ( * pipeTable ) [ i ] . pentry )		1070509	0					
ANR	1072102	Callee	ASSERT		1070509	0					
ANR	1072103	Identifier	ASSERT		1070509	0					
ANR	1072104	ArgumentList	( * pipeTable ) [ i ] . pentry		1070509	1					
ANR	1072105	Argument	( * pipeTable ) [ i ] . pentry		1070509	0					
ANR	1072106	MemberAccess	( * pipeTable ) [ i ] . pentry		1070509	0					
ANR	1072107	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072108	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072109	UnaryOperator	*		1070509	0					
ANR	1072110	Identifier	pipeTable		1070509	1					
ANR	1072111	Identifier	i		1070509	1					
ANR	1072112	Identifier	pentry		1070509	1					
ANR	1072113	IfStatement	"if ( InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L ) )"		1070509	2					
ANR	1072114	Condition	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L )"	3440:9:102882:102941	1070509	0	True				
ANR	1072115	CallExpression	"InterlockedExchange ( & ( ( * pipeTable ) [ i ] . pentry -> pipeReady ) , 0L )"		1070509	0					
ANR	1072116	Callee	InterlockedExchange		1070509	0					
ANR	1072117	Identifier	InterlockedExchange		1070509	0					
ANR	1072118	ArgumentList	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		1070509	1					
ANR	1072119	Argument	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		1070509	0					
ANR	1072120	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . pentry -> pipeReady )		1070509	0					
ANR	1072121	UnaryOperator	&		1070509	0					
ANR	1072122	PtrMemberAccess	( * pipeTable ) [ i ] . pentry -> pipeReady		1070509	1					
ANR	1072123	MemberAccess	( * pipeTable ) [ i ] . pentry		1070509	0					
ANR	1072124	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072125	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072126	UnaryOperator	*		1070509	0					
ANR	1072127	Identifier	pipeTable		1070509	1					
ANR	1072128	Identifier	i		1070509	1					
ANR	1072129	Identifier	pentry		1070509	1					
ANR	1072130	Identifier	pipeReady		1070509	1					
ANR	1072131	Argument	0L		1070509	1					
ANR	1072132	PrimaryExpression	0L		1070509	0					
ANR	1072133	CompoundStatement		422:5:14575:14575	1070509	1					
ANR	1072134	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = true	3443:6:103015:103050	1070509	0	True				
ANR	1072135	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = true		1070509	0		=			
ANR	1072136	MemberAccess	( * pipeTable ) [ i ] . call_handler		1070509	0					
ANR	1072137	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072138	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072139	UnaryOperator	*		1070509	0					
ANR	1072140	Identifier	pipeTable		1070509	1					
ANR	1072141	Identifier	i		1070509	1					
ANR	1072142	Identifier	call_handler		1070509	1					
ANR	1072143	Identifier	true		1070509	1					
ANR	1072144	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3462:12:103582:103616	1070509	7	True				
ANR	1072145	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1072146	Identifier	runtime		1070509	0					
ANR	1072147	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1072148	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1072149	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1072150	ArgumentList			1070509	1					
ANR	1072151	ForStatement	for ( i = 0 ; i < nPipe ; i ++ )		1070509	8					
ANR	1072152	ForInit	i = 0 ;	3463:7:103625:103630	1070509	0	True				
ANR	1072153	AssignmentExpression	i = 0		1070509	0		=			
ANR	1072154	Identifier	i		1070509	0					
ANR	1072155	PrimaryExpression	0		1070509	1					
ANR	1072156	Condition	i < nPipe	3463:14:103632:103640	1070509	1	True				
ANR	1072157	RelationalExpression	i < nPipe		1070509	0		<			
ANR	1072158	Identifier	i		1070509	0					
ANR	1072159	Identifier	nPipe		1070509	1					
ANR	1072160	PostIncDecOperationExpression	i ++	3463:25:103643:103645	1070509	2	True				
ANR	1072161	Identifier	i		1070509	0					
ANR	1072162	IncDec	++		1070509	1					
ANR	1072163	CompoundStatement		444:30:15274:15274	1070509	3					
ANR	1072164	IfStatement	if ( ( * pipeTable ) [ i ] . index != - 1 )		1070509	0					
ANR	1072165	Condition	( * pipeTable ) [ i ] . index != - 1	3464:9:103659:103685	1070509	0	True				
ANR	1072166	EqualityExpression	( * pipeTable ) [ i ] . index != - 1		1070509	0		!=			
ANR	1072167	MemberAccess	( * pipeTable ) [ i ] . index		1070509	0					
ANR	1072168	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072169	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072170	UnaryOperator	*		1070509	0					
ANR	1072171	Identifier	pipeTable		1070509	1					
ANR	1072172	Identifier	i		1070509	1					
ANR	1072173	Identifier	index		1070509	1					
ANR	1072174	UnaryOperationExpression	- 1		1070509	1					
ANR	1072175	UnaryOperator	-		1070509	0					
ANR	1072176	PrimaryExpression	1		1070509	1					
ANR	1072177	CompoundStatement		445:39:15315:15315	1070509	1					
ANR	1072178	IfStatement	if ( ( * pipeTable ) [ i ] . call_handler )		1070509	0					
ANR	1072179	Condition	( * pipeTable ) [ i ] . call_handler	3466:10:103725:103752	1070509	0	True				
ANR	1072180	MemberAccess	( * pipeTable ) [ i ] . call_handler		1070509	0					
ANR	1072181	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072182	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072183	UnaryOperator	*		1070509	0					
ANR	1072184	Identifier	pipeTable		1070509	1					
ANR	1072185	Identifier	i		1070509	1					
ANR	1072186	Identifier	call_handler		1070509	1					
ANR	1072187	CompoundStatement		494:6:17052:17108	1070509	1					
ANR	1072188	ExpressionStatement	( * pipeTable ) [ i ] . call_handler = false	3468:6:103765:103801	1070509	0	True				
ANR	1072189	AssignmentExpression	( * pipeTable ) [ i ] . call_handler = false		1070509	0		=			
ANR	1072190	MemberAccess	( * pipeTable ) [ i ] . call_handler		1070509	0					
ANR	1072191	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072192	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072193	UnaryOperator	*		1070509	0					
ANR	1072194	Identifier	pipeTable		1070509	1					
ANR	1072195	Identifier	i		1070509	1					
ANR	1072196	Identifier	call_handler		1070509	1					
ANR	1072197	Identifier	false		1070509	1					
ANR	1072198	ExpressionStatement	dc_stats . PipeMessages += 1	3470:24:103828:103854	1070509	1	True				
ANR	1072199	AssignmentExpression	dc_stats . PipeMessages += 1		1070509	0		+=			
ANR	1072200	MemberAccess	dc_stats . PipeMessages		1070509	0					
ANR	1072201	Identifier	dc_stats		1070509	0					
ANR	1072202	Identifier	PipeMessages		1070509	1					
ANR	1072203	PrimaryExpression	1		1070509	1					
ANR	1072204	IdentifierDeclStatement	PidEntry * saved_pentry = ( * pipeTable ) [ i ] . pentry ;	3474:6:103982:104029	1070509	2	True				
ANR	1072205	IdentifierDecl	* saved_pentry = ( * pipeTable ) [ i ] . pentry		1070509	0					
ANR	1072206	IdentifierDeclType	PidEntry *		1070509	0					
ANR	1072207	Identifier	saved_pentry		1070509	1					
ANR	1072208	AssignmentExpression	* saved_pentry = ( * pipeTable ) [ i ] . pentry		1070509	2		=			
ANR	1072209	Identifier	saved_pentry		1070509	0					
ANR	1072210	MemberAccess	( * pipeTable ) [ i ] . pentry		1070509	1					
ANR	1072211	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072212	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072213	UnaryOperator	*		1070509	0					
ANR	1072214	Identifier	pipeTable		1070509	1					
ANR	1072215	Identifier	i		1070509	1					
ANR	1072216	Identifier	pentry		1070509	1					
ANR	1072217	IfStatement	if ( recheck_status || saved_pentry )		1070509	3					
ANR	1072218	Condition	recheck_status || saved_pentry	3476:11:104043:104072	1070509	0	True				
ANR	1072219	OrExpression	recheck_status || saved_pentry		1070509	0		||			
ANR	1072220	Identifier	recheck_status		1070509	0					
ANR	1072221	Identifier	saved_pentry		1070509	1					
ANR	1072222	CompoundStatement		457:44:15702:15702	1070509	1					
ANR	1072223	IfStatement	if ( ! saved_pentry -> pipeEnd -> io_ready ( ) )		1070509	0					
ANR	1072224	Condition	! saved_pentry -> pipeEnd -> io_ready ( )	3490:11:104793:104826	1070509	0	True				
ANR	1072225	UnaryOperationExpression	! saved_pentry -> pipeEnd -> io_ready ( )		1070509	0					
ANR	1072226	UnaryOperator	!		1070509	0					
ANR	1072227	CallExpression	saved_pentry -> pipeEnd -> io_ready ( )		1070509	1					
ANR	1072228	Callee	saved_pentry -> pipeEnd -> io_ready		1070509	0					
ANR	1072229	PtrMemberAccess	saved_pentry -> pipeEnd -> io_ready		1070509	0					
ANR	1072230	PtrMemberAccess	saved_pentry -> pipeEnd		1070509	0					
ANR	1072231	Identifier	saved_pentry		1070509	0					
ANR	1072232	Identifier	pipeEnd		1070509	1					
ANR	1072233	Identifier	io_ready		1070509	1					
ANR	1072234	ArgumentList			1070509	1					
ANR	1072235	CompoundStatement		471:47:16455:16455	1070509	1					
ANR	1072236	ExpressionStatement	WatchPid ( saved_pentry )	3492:8:104900:104922	1070509	0	True				
ANR	1072237	CallExpression	WatchPid ( saved_pentry )		1070509	0					
ANR	1072238	Callee	WatchPid		1070509	0					
ANR	1072239	Identifier	WatchPid		1070509	0					
ANR	1072240	ArgumentList	saved_pentry		1070509	1					
ANR	1072241	Argument	saved_pentry		1070509	0					
ANR	1072242	Identifier	saved_pentry		1070509	0					
ANR	1072243	ContinueStatement	continue ;	3493:8:104932:104940	1070509	1	True				
ANR	1072244	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = true	3510:6:105361:105394	1070509	4	True				
ANR	1072245	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = true		1070509	0		=			
ANR	1072246	MemberAccess	( * pipeTable ) [ i ] . in_handler		1070509	0					
ANR	1072247	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072248	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072249	UnaryOperator	*		1070509	0					
ANR	1072250	Identifier	pipeTable		1070509	1					
ANR	1072251	Identifier	i		1070509	1					
ANR	1072252	Identifier	in_handler		1070509	1					
ANR	1072253	Identifier	true		1070509	1					
ANR	1072254	IdentifierDeclStatement	int pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET ;	3513:6:105426:105482	1070509	5	True				
ANR	1072255	IdentifierDecl	pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		1070509	0					
ANR	1072256	IdentifierDeclType	int		1070509	0					
ANR	1072257	Identifier	pipe_end		1070509	1					
ANR	1072258	AssignmentExpression	pipe_end = ( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		1070509	2		=			
ANR	1072259	Identifier	pipe_end		1070509	0					
ANR	1072260	AdditiveExpression	( * pipeTable ) [ i ] . index + PIPE_INDEX_OFFSET		1070509	1		+			
ANR	1072261	MemberAccess	( * pipeTable ) [ i ] . index		1070509	0					
ANR	1072262	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072263	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072264	UnaryOperator	*		1070509	0					
ANR	1072265	Identifier	pipeTable		1070509	1					
ANR	1072266	Identifier	i		1070509	1					
ANR	1072267	Identifier	index		1070509	1					
ANR	1072268	Identifier	PIPE_INDEX_OFFSET		1070509	1					
ANR	1072269	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"" , ( * pipeTable ) [ i ] . handler_descrip , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip )"	3514:6:105490:105659	1070509	6	True				
ANR	1072270	CallExpression	"dprintf ( D_COMMAND , ""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"" , ( * pipeTable ) [ i ] . handler_descrip , pipe_end , ( * pipeTable ) [ i ] . pipe_descrip )"		1070509	0					
ANR	1072271	Callee	dprintf		1070509	0					
ANR	1072272	Identifier	dprintf		1070509	0					
ANR	1072273	ArgumentList	D_COMMAND		1070509	1					
ANR	1072274	Argument	D_COMMAND		1070509	0					
ANR	1072275	Identifier	D_COMMAND		1070509	0					
ANR	1072276	Argument	"""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"""		1070509	1					
ANR	1072277	PrimaryExpression	"""Calling pipe Handler <%s> for Pipe end=%d <%s>\\n"""		1070509	0					
ANR	1072278	Argument	( * pipeTable ) [ i ] . handler_descrip		1070509	2					
ANR	1072279	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1070509	0					
ANR	1072280	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072281	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072282	UnaryOperator	*		1070509	0					
ANR	1072283	Identifier	pipeTable		1070509	1					
ANR	1072284	Identifier	i		1070509	1					
ANR	1072285	Identifier	handler_descrip		1070509	1					
ANR	1072286	Argument	pipe_end		1070509	3					
ANR	1072287	Identifier	pipe_end		1070509	0					
ANR	1072288	Argument	( * pipeTable ) [ i ] . pipe_descrip		1070509	4					
ANR	1072289	MemberAccess	( * pipeTable ) [ i ] . pipe_descrip		1070509	0					
ANR	1072290	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072291	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072292	UnaryOperator	*		1070509	0					
ANR	1072293	Identifier	pipeTable		1070509	1					
ANR	1072294	Identifier	i		1070509	1					
ANR	1072295	Identifier	pipe_descrip		1070509	1					
ANR	1072296	ExpressionStatement	curr_dataptr = & ( ( * pipeTable ) [ i ] . data_ptr )	3520:6:105714:105757	1070509	7	True				
ANR	1072297	AssignmentExpression	curr_dataptr = & ( ( * pipeTable ) [ i ] . data_ptr )		1070509	0		=			
ANR	1072298	Identifier	curr_dataptr		1070509	0					
ANR	1072299	UnaryOperationExpression	& ( ( * pipeTable ) [ i ] . data_ptr )		1070509	1					
ANR	1072300	UnaryOperator	&		1070509	0					
ANR	1072301	MemberAccess	( * pipeTable ) [ i ] . data_ptr		1070509	1					
ANR	1072302	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072303	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072304	UnaryOperator	*		1070509	0					
ANR	1072305	Identifier	pipeTable		1070509	1					
ANR	1072306	Identifier	i		1070509	1					
ANR	1072307	Identifier	data_ptr		1070509	1					
ANR	1072308	ExpressionStatement	recheck_status = true	3521:6:105765:105786	1070509	8	True				
ANR	1072309	AssignmentExpression	recheck_status = true		1070509	0		=			
ANR	1072310	Identifier	recheck_status		1070509	0					
ANR	1072311	Identifier	true		1070509	1					
ANR	1072312	IfStatement	if ( ( * pipeTable ) [ i ] . handler )		1070509	9					
ANR	1072313	Condition	( * pipeTable ) [ i ] . handler	3522:11:105799:105821	1070509	0	True				
ANR	1072314	MemberAccess	( * pipeTable ) [ i ] . handler		1070509	0					
ANR	1072315	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072316	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072317	UnaryOperator	*		1070509	0					
ANR	1072318	Identifier	pipeTable		1070509	1					
ANR	1072319	Identifier	i		1070509	1					
ANR	1072320	Identifier	handler		1070509	1					
ANR	1072321	ExpressionStatement	"( * ( ( * pipeTable ) [ i ] . handler ) ) ( ( * pipeTable ) [ i ] . service , pipe_end )"	3524:7:105854:105919	1070509	1	True				
ANR	1072322	CallExpression	"( * ( ( * pipeTable ) [ i ] . handler ) ) ( ( * pipeTable ) [ i ] . service , pipe_end )"		1070509	0					
ANR	1072323	Callee	* ( ( * pipeTable ) [ i ] . handler )		1070509	0					
ANR	1072324	UnaryOperationExpression	* ( ( * pipeTable ) [ i ] . handler )		1070509	0					
ANR	1072325	UnaryOperator	*		1070509	0					
ANR	1072326	MemberAccess	( * pipeTable ) [ i ] . handler		1070509	1					
ANR	1072327	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072328	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072329	UnaryOperator	*		1070509	0					
ANR	1072330	Identifier	pipeTable		1070509	1					
ANR	1072331	Identifier	i		1070509	1					
ANR	1072332	Identifier	handler		1070509	1					
ANR	1072333	ArgumentList	( * pipeTable ) [ i ] . service		1070509	1					
ANR	1072334	Argument	( * pipeTable ) [ i ] . service		1070509	0					
ANR	1072335	MemberAccess	( * pipeTable ) [ i ] . service		1070509	0					
ANR	1072336	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072337	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072338	UnaryOperator	*		1070509	0					
ANR	1072339	Identifier	pipeTable		1070509	1					
ANR	1072340	Identifier	i		1070509	1					
ANR	1072341	Identifier	service		1070509	1					
ANR	1072342	Argument	pipe_end		1070509	1					
ANR	1072343	Identifier	pipe_end		1070509	0					
ANR	1072344	ElseStatement	else		1070509	0					
ANR	1072345	IfStatement	if ( ( * pipeTable ) [ i ] . handlercpp )		1070509	0					
ANR	1072346	Condition	( * pipeTable ) [ i ] . handlercpp	3526:11:105943:105968	1070509	0	True				
ANR	1072347	MemberAccess	( * pipeTable ) [ i ] . handlercpp		1070509	0					
ANR	1072348	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072349	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072350	UnaryOperator	*		1070509	0					
ANR	1072351	Identifier	pipeTable		1070509	1					
ANR	1072352	Identifier	i		1070509	1					
ANR	1072353	Identifier	handlercpp		1070509	1					
ANR	1072354	Statement	(	3528:7:106003:106003	1070509	1	True				
ANR	1072355	ElseStatement	else		1070509	0					
ANR	1072356	CompoundStatement		511:6:17715:17715	1070509	0					
ANR	1072357	ExpressionStatement	"EXCEPT ( ""No pipe handler callback"" )"	3532:7:106130:106164	1070509	0	True				
ANR	1072358	CallExpression	"EXCEPT ( ""No pipe handler callback"" )"		1070509	0					
ANR	1072359	Callee	EXCEPT		1070509	0					
ANR	1072360	Identifier	EXCEPT		1070509	0					
ANR	1072361	ArgumentList	"""No pipe handler callback"""		1070509	1					
ANR	1072362	Argument	"""No pipe handler callback"""		1070509	0					
ANR	1072363	PrimaryExpression	"""No pipe handler callback"""		1070509	0					
ANR	1072364	Statement	(	3528:8:106004:106004	1070509	10	True				
ANR	1072365	Statement	*	3528:9:106005:106005	1070509	11	True				
ANR	1072366	Statement	pipeTable	3528:10:106006:106014	1070509	12	True				
ANR	1072367	Statement	)	3528:19:106015:106015	1070509	13	True				
ANR	1072368	Statement	[	3528:20:106016:106016	1070509	14	True				
ANR	1072369	Statement	i	3528:21:106017:106017	1070509	15	True				
ANR	1072370	Statement	]	3528:22:106018:106018	1070509	16	True				
ANR	1072371	Statement	.	3528:23:106019:106019	1070509	17	True				
ANR	1072372	Statement	service	3528:24:106020:106026	1070509	18	True				
ANR	1072373	Statement	->*	3528:31:106027:106029	1070509	19	True				
ANR	1072374	Statement	(	3528:34:106030:106030	1070509	20	True				
ANR	1072375	Statement	(	3528:36:106032:106032	1070509	21	True				
ANR	1072376	Statement	*	3528:37:106033:106033	1070509	22	True				
ANR	1072377	Statement	pipeTable	3528:38:106034:106042	1070509	23	True				
ANR	1072378	Statement	)	3528:47:106043:106043	1070509	24	True				
ANR	1072379	Statement	[	3528:48:106044:106044	1070509	25	True				
ANR	1072380	Statement	i	3528:49:106045:106045	1070509	26	True				
ANR	1072381	Statement	]	3528:50:106046:106046	1070509	27	True				
ANR	1072382	Statement	.	3528:51:106047:106047	1070509	28	True				
ANR	1072383	Statement	handlercpp	3528:52:106048:106057	1070509	29	True				
ANR	1072384	Statement	)	3528:62:106058:106058	1070509	30	True				
ANR	1072385	Statement	)	3528:63:106059:106059	1070509	31	True				
ANR	1072386	ExpressionStatement	pipe_end	3528:64:106060:106070	1070509	32	True				
ANR	1072387	Identifier	pipe_end		1070509	0					
ANR	1072388	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from pipe Handler\\n"" )"	3535:6:106181:106228	1070509	33	True				
ANR	1072389	CallExpression	"dprintf ( D_COMMAND , ""Return from pipe Handler\\n"" )"		1070509	0					
ANR	1072390	Callee	dprintf		1070509	0					
ANR	1072391	Identifier	dprintf		1070509	0					
ANR	1072392	ArgumentList	D_COMMAND		1070509	1					
ANR	1072393	Argument	D_COMMAND		1070509	0					
ANR	1072394	Identifier	D_COMMAND		1070509	0					
ANR	1072395	Argument	"""Return from pipe Handler\\n"""		1070509	1					
ANR	1072396	PrimaryExpression	"""Return from pipe Handler\\n"""		1070509	0					
ANR	1072397	ExpressionStatement	( * pipeTable ) [ i ] . in_handler = false	3537:6:106237:106271	1070509	34	True				
ANR	1072398	AssignmentExpression	( * pipeTable ) [ i ] . in_handler = false		1070509	0		=			
ANR	1072399	MemberAccess	( * pipeTable ) [ i ] . in_handler		1070509	0					
ANR	1072400	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072401	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072402	UnaryOperator	*		1070509	0					
ANR	1072403	Identifier	pipeTable		1070509	1					
ANR	1072404	Identifier	i		1070509	1					
ANR	1072405	Identifier	in_handler		1070509	1					
ANR	1072406	Identifier	false		1070509	1					
ANR	1072407	ExpressionStatement	CheckPrivState ( )	3540:6:106329:106345	1070509	35	True				
ANR	1072408	CallExpression	CheckPrivState ( )		1070509	0					
ANR	1072409	Callee	CheckPrivState		1070509	0					
ANR	1072410	Identifier	CheckPrivState		1070509	0					
ANR	1072411	ArgumentList			1070509	1					
ANR	1072412	ExpressionStatement	curr_dataptr = NULL	3543:6:106382:106401	1070509	36	True				
ANR	1072413	AssignmentExpression	curr_dataptr = NULL		1070509	0		=			
ANR	1072414	Identifier	curr_dataptr		1070509	0					
ANR	1072415	Identifier	NULL		1070509	1					
ANR	1072416	IfStatement	if ( saved_pentry -> pipeEnd )		1070509	37					
ANR	1072417	Condition	saved_pentry -> pipeEnd	3550:11:106624:106644	1070509	0	True				
ANR	1072418	PtrMemberAccess	saved_pentry -> pipeEnd		1070509	0					
ANR	1072419	Identifier	saved_pentry		1070509	0					
ANR	1072420	Identifier	pipeEnd		1070509	1					
ANR	1072421	CompoundStatement		531:35:18274:18274	1070509	1					
ANR	1072422	ExpressionStatement	WatchPid ( saved_pentry )	3551:7:106657:106679	1070509	0	True				
ANR	1072423	CallExpression	WatchPid ( saved_pentry )		1070509	0					
ANR	1072424	Callee	WatchPid		1070509	0					
ANR	1072425	Identifier	WatchPid		1070509	0					
ANR	1072426	ArgumentList	saved_pentry		1070509	1					
ANR	1072427	Argument	saved_pentry		1070509	0					
ANR	1072428	Identifier	saved_pentry		1070509	0					
ANR	1072429	ExpressionStatement	"runtime = dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"	3556:24:106786:106857	1070509	38	True				
ANR	1072430	AssignmentExpression	"runtime = dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"		1070509	0		=			
ANR	1072431	Identifier	runtime		1070509	0					
ANR	1072432	CallExpression	"dc_stats . AddRuntime ( ( * pipeTable ) [ i ] . handler_descrip , runtime )"		1070509	1					
ANR	1072433	Callee	dc_stats . AddRuntime		1070509	0					
ANR	1072434	MemberAccess	dc_stats . AddRuntime		1070509	0					
ANR	1072435	Identifier	dc_stats		1070509	0					
ANR	1072436	Identifier	AddRuntime		1070509	1					
ANR	1072437	ArgumentList	( * pipeTable ) [ i ] . handler_descrip		1070509	1					
ANR	1072438	Argument	( * pipeTable ) [ i ] . handler_descrip		1070509	0					
ANR	1072439	MemberAccess	( * pipeTable ) [ i ] . handler_descrip		1070509	0					
ANR	1072440	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072441	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072442	UnaryOperator	*		1070509	0					
ANR	1072443	Identifier	pipeTable		1070509	1					
ANR	1072444	Identifier	i		1070509	1					
ANR	1072445	Identifier	handler_descrip		1070509	1					
ANR	1072446	Argument	runtime		1070509	1					
ANR	1072447	Identifier	runtime		1070509	0					
ANR	1072448	IfStatement	if ( ( * pipeTable ) [ i ] . call_handler == true )		1070509	39					
ANR	1072449	Condition	( * pipeTable ) [ i ] . call_handler == true	3558:11:106871:106906	1070509	0	True				
ANR	1072450	EqualityExpression	( * pipeTable ) [ i ] . call_handler == true		1070509	0		==			
ANR	1072451	MemberAccess	( * pipeTable ) [ i ] . call_handler		1070509	0					
ANR	1072452	ArrayIndexing	( * pipeTable ) [ i ]		1070509	0					
ANR	1072453	UnaryOperationExpression	* pipeTable		1070509	0					
ANR	1072454	UnaryOperator	*		1070509	0					
ANR	1072455	Identifier	pipeTable		1070509	1					
ANR	1072456	Identifier	i		1070509	1					
ANR	1072457	Identifier	call_handler		1070509	1					
ANR	1072458	Identifier	true		1070509	1					
ANR	1072459	CompoundStatement		539:50:18536:18536	1070509	1					
ANR	1072460	ExpressionStatement	i --	3563:7:107141:107144	1070509	0	True				
ANR	1072461	PostIncDecOperationExpression	i --		1070509	0					
ANR	1072462	Identifier	i		1070509	0					
ANR	1072463	IncDec	--		1070509	1					
ANR	1072464	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3571:12:107298:107332	1070509	9	True				
ANR	1072465	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1072466	Identifier	runtime		1070509	0					
ANR	1072467	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1072468	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1072469	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1072470	ArgumentList			1070509	1					
ANR	1072471	ExpressionStatement	dc_stats . PipeRuntime += ( runtime - group_runtime )	3572:12:107346:107395	1070509	10	True				
ANR	1072472	AssignmentExpression	dc_stats . PipeRuntime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1072473	MemberAccess	dc_stats . PipeRuntime		1070509	0					
ANR	1072474	Identifier	dc_stats		1070509	0					
ANR	1072475	Identifier	PipeRuntime		1070509	1					
ANR	1072476	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1072477	Identifier	runtime		1070509	0					
ANR	1072478	Identifier	group_runtime		1070509	1					
ANR	1072479	ExpressionStatement	group_runtime = runtime	3573:12:107409:107432	1070509	11	True				
ANR	1072480	AssignmentExpression	group_runtime = runtime		1070509	0		=			
ANR	1072481	Identifier	group_runtime		1070509	0					
ANR	1072482	Identifier	runtime		1070509	1					
ANR	1072483	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1070509	12					
ANR	1072484	ForInit	i = 0 ;	3576:7:107513:107518	1070509	0	True				
ANR	1072485	AssignmentExpression	i = 0		1070509	0		=			
ANR	1072486	Identifier	i		1070509	0					
ANR	1072487	PrimaryExpression	0		1070509	1					
ANR	1072488	Condition	i < nSock	3576:14:107520:107528	1070509	1	True				
ANR	1072489	RelationalExpression	i < nSock		1070509	0		<			
ANR	1072490	Identifier	i		1070509	0					
ANR	1072491	Identifier	nSock		1070509	1					
ANR	1072492	PostIncDecOperationExpression	i ++	3576:25:107531:107533	1070509	2	True				
ANR	1072493	Identifier	i		1070509	0					
ANR	1072494	IncDec	++		1070509	1					
ANR	1072495	CompoundStatement		557:30:19162:19162	1070509	3					
ANR	1072496	IfStatement	if ( ( * sockTable ) [ i ] . iosock )		1070509	0					
ANR	1072497	Condition	( * sockTable ) [ i ] . iosock	3577:9:107547:107568	1070509	0	True				
ANR	1072498	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1072499	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072500	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072501	UnaryOperator	*		1070509	0					
ANR	1072502	Identifier	sockTable		1070509	1					
ANR	1072503	Identifier	i		1070509	1					
ANR	1072504	Identifier	iosock		1070509	1					
ANR	1072505	CompoundStatement		558:34:19198:19198	1070509	1					
ANR	1072506	IfStatement	if ( ( * sockTable ) [ i ] . call_handler )		1070509	0					
ANR	1072507	Condition	( * sockTable ) [ i ] . call_handler	3579:10:107608:107635	1070509	0	True				
ANR	1072508	MemberAccess	( * sockTable ) [ i ] . call_handler		1070509	0					
ANR	1072509	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072510	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072511	UnaryOperator	*		1070509	0					
ANR	1072512	Identifier	sockTable		1070509	1					
ANR	1072513	Identifier	i		1070509	1					
ANR	1072514	Identifier	call_handler		1070509	1					
ANR	1072515	CompoundStatement		560:41:19265:19265	1070509	1					
ANR	1072516	ExpressionStatement	( * sockTable ) [ i ] . call_handler = false	3581:6:107648:107684	1070509	0	True				
ANR	1072517	AssignmentExpression	( * sockTable ) [ i ] . call_handler = false		1070509	0		=			
ANR	1072518	MemberAccess	( * sockTable ) [ i ] . call_handler		1070509	0					
ANR	1072519	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072520	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072521	UnaryOperator	*		1070509	0					
ANR	1072522	Identifier	sockTable		1070509	1					
ANR	1072523	Identifier	i		1070509	1					
ANR	1072524	Identifier	call_handler		1070509	1					
ANR	1072525	Identifier	false		1070509	1					
ANR	1072526	ExpressionStatement	dc_stats . SockMessages += 1	3583:24:107711:107737	1070509	1	True				
ANR	1072527	AssignmentExpression	dc_stats . SockMessages += 1		1070509	0		+=			
ANR	1072528	MemberAccess	dc_stats . SockMessages		1070509	0					
ANR	1072529	Identifier	dc_stats		1070509	0					
ANR	1072530	Identifier	SockMessages		1070509	1					
ANR	1072531	PrimaryExpression	1		1070509	1					
ANR	1072532	IfStatement	if ( recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false ) )		1070509	2					
ANR	1072533	Condition	recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false )	3585:11:107751:107821	1070509	0	True				
ANR	1072534	AndExpression	recheck_status && ( ( * sockTable ) [ i ] . is_connect_pending == false )		1070509	0		&&			
ANR	1072535	Identifier	recheck_status		1070509	0					
ANR	1072536	EqualityExpression	( * sockTable ) [ i ] . is_connect_pending == false		1070509	1		==			
ANR	1072537	MemberAccess	( * sockTable ) [ i ] . is_connect_pending		1070509	0					
ANR	1072538	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072539	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072540	UnaryOperator	*		1070509	0					
ANR	1072541	Identifier	sockTable		1070509	1					
ANR	1072542	Identifier	i		1070509	1					
ANR	1072543	Identifier	is_connect_pending		1070509	1					
ANR	1072544	Identifier	false		1070509	1					
ANR	1072545	CompoundStatement		568:6:19457:19457	1070509	1					
ANR	1072546	ExpressionStatement	selector . reset ( )	3593:7:108136:108152	1070509	0	True				
ANR	1072547	CallExpression	selector . reset ( )		1070509	0					
ANR	1072548	Callee	selector . reset		1070509	0					
ANR	1072549	MemberAccess	selector . reset		1070509	0					
ANR	1072550	Identifier	selector		1070509	0					
ANR	1072551	Identifier	reset		1070509	1					
ANR	1072552	ArgumentList			1070509	1					
ANR	1072553	ExpressionStatement	selector . set_timeout ( 0 )	3594:7:108161:108186	1070509	1	True				
ANR	1072554	CallExpression	selector . set_timeout ( 0 )		1070509	0					
ANR	1072555	Callee	selector . set_timeout		1070509	0					
ANR	1072556	MemberAccess	selector . set_timeout		1070509	0					
ANR	1072557	Identifier	selector		1070509	0					
ANR	1072558	Identifier	set_timeout		1070509	1					
ANR	1072559	ArgumentList	0		1070509	1					
ANR	1072560	Argument	0		1070509	0					
ANR	1072561	PrimaryExpression	0		1070509	0					
ANR	1072562	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3595:7:108220:108309	1070509	2	True				
ANR	1072563	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		1070509	0					
ANR	1072564	Callee	selector . add_fd		1070509	0					
ANR	1072565	MemberAccess	selector . add_fd		1070509	0					
ANR	1072566	Identifier	selector		1070509	0					
ANR	1072567	Identifier	add_fd		1070509	1					
ANR	1072568	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	1					
ANR	1072569	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1072570	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1070509	0					
ANR	1072571	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1072572	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509	0					
ANR	1072573	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1072574	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072575	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072576	UnaryOperator	*		1070509	0					
ANR	1072577	Identifier	sockTable		1070509	1					
ANR	1072578	Identifier	i		1070509	1					
ANR	1072579	Identifier	iosock		1070509	1					
ANR	1072580	Identifier	get_file_desc		1070509	1					
ANR	1072581	ArgumentList			1070509	1					
ANR	1072582	Argument	Selector :: IO_READ		1070509	1					
ANR	1072583	Identifier	Selector :: IO_READ		1070509	0					
ANR	1072584	ExpressionStatement	selector . execute ( )	3598:7:108319:108337	1070509	3	True				
ANR	1072585	CallExpression	selector . execute ( )		1070509	0					
ANR	1072586	Callee	selector . execute		1070509	0					
ANR	1072587	MemberAccess	selector . execute		1070509	0					
ANR	1072588	Identifier	selector		1070509	0					
ANR	1072589	Identifier	execute		1070509	1					
ANR	1072590	ArgumentList			1070509	1					
ANR	1072591	IfStatement	if ( selector . timed_out ( ) )		1070509	4					
ANR	1072592	Condition	selector . timed_out ( )	3599:12:108351:108370	1070509	0	True				
ANR	1072593	CallExpression	selector . timed_out ( )		1070509	0					
ANR	1072594	Callee	selector . timed_out		1070509	0					
ANR	1072595	MemberAccess	selector . timed_out		1070509	0					
ANR	1072596	Identifier	selector		1070509	0					
ANR	1072597	Identifier	timed_out		1070509	1					
ANR	1072598	ArgumentList			1070509	1					
ANR	1072599	CompoundStatement		580:35:20000:20000	1070509	1					
ANR	1072600	ContinueStatement	continue ;	3601:8:108436:108444	1070509	0	True				
ANR	1072601	IfStatement	if ( ( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock )		1070509	3					
ANR	1072602	Condition	( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock	3610:11:108730:108780	1070509	0	True				
ANR	1072603	EqualityExpression	( * sockTable ) [ i ] . iosock -> type ( ) == Stream :: safe_sock		1070509	0		==			
ANR	1072604	CallExpression	( * sockTable ) [ i ] . iosock -> type ( )		1070509	0					
ANR	1072605	Callee	( * sockTable ) [ i ] . iosock -> type		1070509	0					
ANR	1072606	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> type		1070509	0					
ANR	1072607	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1072608	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072609	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072610	UnaryOperator	*		1070509	0					
ANR	1072611	Identifier	sockTable		1070509	1					
ANR	1072612	Identifier	i		1070509	1					
ANR	1072613	Identifier	iosock		1070509	1					
ANR	1072614	Identifier	type		1070509	1					
ANR	1072615	ArgumentList			1070509	1					
ANR	1072616	Identifier	Stream :: safe_sock		1070509	1					
ANR	1072617	CompoundStatement		593:7:20425:20474	1070509	1					
ANR	1072618	IdentifierDeclStatement	SafeSock * ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock ;	3612:7:108799:108848	1070509	0	True				
ANR	1072619	IdentifierDecl	* ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock		1070509	0					
ANR	1072620	IdentifierDeclType	SafeSock *		1070509	0					
ANR	1072621	Identifier	ss		1070509	1					
ANR	1072622	AssignmentExpression	* ss = ( SafeSock * ) ( * sockTable ) [ i ] . iosock		1070509	2		=			
ANR	1072623	Identifier	ss		1070509	0					
ANR	1072624	CastExpression	( SafeSock * ) ( * sockTable ) [ i ] . iosock		1070509	1					
ANR	1072625	CastTarget	SafeSock *		1070509	0					
ANR	1072626	MemberAccess	( * sockTable ) [ i ] . iosock		1070509	1					
ANR	1072627	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072628	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072629	UnaryOperator	*		1070509	0					
ANR	1072630	Identifier	sockTable		1070509	1					
ANR	1072631	Identifier	i		1070509	1					
ANR	1072632	Identifier	iosock		1070509	1					
ANR	1072633	IfStatement	if ( ! ( ss -> handle_incoming_packet ( ) ) )		1070509	1					
ANR	1072634	Condition	! ( ss -> handle_incoming_packet ( ) )	3616:12:109025:109055	1070509	0	True				
ANR	1072635	UnaryOperationExpression	! ( ss -> handle_incoming_packet ( ) )		1070509	0					
ANR	1072636	UnaryOperator	!		1070509	0					
ANR	1072637	CallExpression	ss -> handle_incoming_packet ( )		1070509	1					
ANR	1072638	Callee	ss -> handle_incoming_packet		1070509	0					
ANR	1072639	PtrMemberAccess	ss -> handle_incoming_packet		1070509	0					
ANR	1072640	Identifier	ss		1070509	0					
ANR	1072641	Identifier	handle_incoming_packet		1070509	1					
ANR	1072642	ArgumentList			1070509	1					
ANR	1072643	CompoundStatement		597:46:20685:20685	1070509	1					
ANR	1072644	ContinueStatement	continue ;	3620:8:109214:109222	1070509	0	True				
ANR	1072645	ExpressionStatement	recheck_status = true	3624:6:109248:109269	1070509	4	True				
ANR	1072646	AssignmentExpression	recheck_status = true		1070509	0		=			
ANR	1072647	Identifier	recheck_status		1070509	0					
ANR	1072648	Identifier	true		1070509	1					
ANR	1072649	ExpressionStatement	"CallSocketHandler ( i , true )"	3625:6:109277:109305	1070509	5	True				
ANR	1072650	CallExpression	"CallSocketHandler ( i , true )"		1070509	0					
ANR	1072651	Callee	CallSocketHandler		1070509	0					
ANR	1072652	Identifier	CallSocketHandler		1070509	0					
ANR	1072653	ArgumentList	i		1070509	1					
ANR	1072654	Argument	i		1070509	0					
ANR	1072655	Identifier	i		1070509	0					
ANR	1072656	Argument	true		1070509	1					
ANR	1072657	Identifier	true		1070509	0					
ANR	1072658	ExpressionStatement	"runtime = dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"	3628:24:109397:109468	1070509	6	True				
ANR	1072659	AssignmentExpression	"runtime = dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"		1070509	0		=			
ANR	1072660	Identifier	runtime		1070509	0					
ANR	1072661	CallExpression	"dc_stats . AddRuntime ( ( * sockTable ) [ i ] . handler_descrip , runtime )"		1070509	1					
ANR	1072662	Callee	dc_stats . AddRuntime		1070509	0					
ANR	1072663	MemberAccess	dc_stats . AddRuntime		1070509	0					
ANR	1072664	Identifier	dc_stats		1070509	0					
ANR	1072665	Identifier	AddRuntime		1070509	1					
ANR	1072666	ArgumentList	( * sockTable ) [ i ] . handler_descrip		1070509	1					
ANR	1072667	Argument	( * sockTable ) [ i ] . handler_descrip		1070509	0					
ANR	1072668	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1070509	0					
ANR	1072669	ArrayIndexing	( * sockTable ) [ i ]		1070509	0					
ANR	1072670	UnaryOperationExpression	* sockTable		1070509	0					
ANR	1072671	UnaryOperator	*		1070509	0					
ANR	1072672	Identifier	sockTable		1070509	1					
ANR	1072673	Identifier	i		1070509	1					
ANR	1072674	Identifier	handler_descrip		1070509	1					
ANR	1072675	Argument	runtime		1070509	1					
ANR	1072676	Identifier	runtime		1070509	0					
ANR	1072677	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	3634:12:109613:109647	1070509	13	True				
ANR	1072678	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1070509	0		=			
ANR	1072679	Identifier	runtime		1070509	0					
ANR	1072680	CallExpression	UtcTime :: getTimeDouble ( )		1070509	1					
ANR	1072681	Callee	UtcTime :: getTimeDouble		1070509	0					
ANR	1072682	Identifier	UtcTime :: getTimeDouble		1070509	0					
ANR	1072683	ArgumentList			1070509	1					
ANR	1072684	ExpressionStatement	dc_stats . SocketRuntime += ( runtime - group_runtime )	3635:12:109661:109712	1070509	14	True				
ANR	1072685	AssignmentExpression	dc_stats . SocketRuntime += ( runtime - group_runtime )		1070509	0		+=			
ANR	1072686	MemberAccess	dc_stats . SocketRuntime		1070509	0					
ANR	1072687	Identifier	dc_stats		1070509	0					
ANR	1072688	Identifier	SocketRuntime		1070509	1					
ANR	1072689	AdditiveExpression	runtime - group_runtime		1070509	1		-			
ANR	1072690	Identifier	runtime		1070509	0					
ANR	1072691	Identifier	group_runtime		1070509	1					
ANR	1072692	ExpressionStatement	group_runtime = runtime	3636:12:109726:109749	1070509	15	True				
ANR	1072693	AssignmentExpression	group_runtime = runtime		1070509	0		=			
ANR	1072694	Identifier	group_runtime		1070509	0					
ANR	1072695	Identifier	runtime		1070509	1					
ANR	1072696	ExpressionStatement	dc_stats . PumpCycle += ( runtime - pump_cycle_begin_time )	3641:8:109779:109834	1070509	41	True				
ANR	1072697	AssignmentExpression	dc_stats . PumpCycle += ( runtime - pump_cycle_begin_time )		1070509	0		+=			
ANR	1072698	MemberAccess	dc_stats . PumpCycle		1070509	0					
ANR	1072699	Identifier	dc_stats		1070509	0					
ANR	1072700	Identifier	PumpCycle		1070509	1					
ANR	1072701	AdditiveExpression	runtime - pump_cycle_begin_time		1070509	1		-			
ANR	1072702	Identifier	runtime		1070509	0					
ANR	1072703	Identifier	pump_cycle_begin_time		1070509	1					
ANR	1072704	ExpressionStatement	pump_cycle_begin_time = runtime	3642:8:109844:109875	1070509	42	True				
ANR	1072705	AssignmentExpression	pump_cycle_begin_time = runtime		1070509	0		=			
ANR	1072706	Identifier	pump_cycle_begin_time		1070509	0					
ANR	1072707	Identifier	runtime		1070509	1					
ANR	1072708	ReturnType	void		1070509	1					
ANR	1072709	Identifier	DaemonCore :: Driver		1070509	2					
ANR	1072710	ParameterList			1070509	3					
ANR	1072711	CFGEntryNode	ENTRY		1070509		True				
ANR	1072712	CFGExitNode	EXIT		1070509		True				
ANR	1072713	InfiniteForNode	true		1070509		True				
ANR	1072714	Symbol	& ( * pipeTable ) [ i ] . pentry -> pipeReady		1070509						
ANR	1072715	Symbol	async_pipe_signal		1070509						
ANR	1072716	Symbol	sigTable [ i ] . sig_descrip		1070509						
ANR	1072717	Symbol	& num_timers_fired		1070509						
ANR	1072718	Symbol	* ss		1070509						
ANR	1072719	Symbol	( * sockTable ) [ i ] . is_connect_pending		1070509						
ANR	1072720	Symbol	pipe_end		1070509						
ANR	1072721	Symbol	nPipe		1070509						
ANR	1072722	Symbol	ss -> handle_incoming_packet		1070509						
ANR	1072723	Symbol	( * sockTable ) [ i ] . iosock -> type		1070509						
ANR	1072724	Symbol	curr_dataptr		1070509						
ANR	1072725	Symbol	Selector :: IO_READ		1070509						
ANR	1072726	Symbol	( * sockTable ) [ i ] . handler_descrip		1070509						
ANR	1072727	Symbol	* * saved_pentry		1070509						
ANR	1072728	Symbol	time_before		1070509						
ANR	1072729	Symbol	sigTable [ i ] . handlercpp		1070509						
ANR	1072730	Symbol	SIGTRAP		1070509						
ANR	1072731	Symbol	async_pipe [ 0 ] . is_connected		1070509						
ANR	1072732	Symbol	write		1070509						
ANR	1072733	Symbol	( * sockTable ) [ i ] . remove_asap		1070509						
ANR	1072734	Symbol	D_COMMAND		1070509						
ANR	1072735	Symbol	UtcTime :: getTimeDouble		1070509						
ANR	1072736	Symbol	pump_cycle_begin_time		1070509						
ANR	1072737	Symbol	async_sigs_unblocked		1070509						
ANR	1072738	Symbol	PIPE_INDEX_OFFSET		1070509						
ANR	1072739	Symbol	dc_stats . SockMessages		1070509						
ANR	1072740	Symbol	errno		1070509						
ANR	1072741	Symbol	dc_stats . PipeRuntime		1070509						
ANR	1072742	Symbol	saved_pentry		1070509						
ANR	1072743	Symbol	& ( * pipeTable ) [ i ] . data_ptr		1070509						
ANR	1072744	Symbol	( * pipeTable ) [ i ] . handler		1070509						
ANR	1072745	Symbol	deadline_timeout		1070509						
ANR	1072746	Symbol	dc_stats . SocketRuntime		1070509						
ANR	1072747	Symbol	sigTable [ i ] . is_blocked		1070509						
ANR	1072748	Symbol	tmpErrno		1070509						
ANR	1072749	Symbol	* async_pipe		1070509						
ANR	1072750	Symbol	D_PERF_TRACE		1070509						
ANR	1072751	Symbol	sigTable [ i ] . handler_descrip		1070509						
ANR	1072752	Symbol	maxSig		1070509						
ANR	1072753	Symbol	( * sockTable ) [ i ] . is_reverse_connect_pending		1070509						
ANR	1072754	Symbol	* pipeHandleTable		1070509						
ANR	1072755	Symbol	( * pipeTable ) [ i ] . handler_descrip		1070509						
ANR	1072756	Symbol	* ( * pipeTable ) [ i ] . index		1070509						
ANR	1072757	Symbol	selector . fd_ready		1070509						
ANR	1072758	Symbol	sigTable		1070509						
ANR	1072759	Symbol	InterlockedExchange		1070509						
ANR	1072760	Symbol	do_err		1070509						
ANR	1072761	Symbol	deadline		1070509						
ANR	1072762	Symbol	* ( * sockTable ) [ i ] . iosock		1070509						
ANR	1072763	Symbol	ss		1070509						
ANR	1072764	Symbol	& runtime		1070509						
ANR	1072765	Symbol	recheck_status		1070509						
ANR	1072766	Symbol	sigTable [ i ] . is_pending		1070509						
ANR	1072767	Symbol	num_timers_fired		1070509						
ANR	1072768	Symbol	* * * sockTable		1070509						
ANR	1072769	Symbol	group_runtime		1070509						
ANR	1072770	Symbol	nSock		1070509						
ANR	1072771	Symbol	SIG_SETMASK		1070509						
ANR	1072772	Symbol	i		1070509						
ANR	1072773	Symbol	SIGABRT		1070509						
ANR	1072774	Symbol	dc_stats . SignalRuntime		1070509						
ANR	1072775	Symbol	emptyset		1070509						
ANR	1072776	Symbol	do_fd2		1070509						
ANR	1072777	Symbol	saved_pentry -> pipeEnd		1070509						
ANR	1072778	Symbol	buf		1070509						
ANR	1072779	Symbol	* sigTable		1070509						
ANR	1072780	Symbol	( * pipeTable ) [ i ] . handlercpp		1070509						
ANR	1072781	Symbol	t		1070509						
ANR	1072782	Symbol	* sockTable		1070509						
ANR	1072783	Symbol	do_out		1070509						
ANR	1072784	Symbol	dc_stats		1070509						
ANR	1072785	Symbol	dc_stats . TimerRuntime		1070509						
ANR	1072786	Symbol	( * pipeTable ) [ i ] . in_handler		1070509						
ANR	1072787	Symbol	sigTable [ i ] . handler		1070509						
ANR	1072788	Symbol	asyncpipe_buf		1070509						
ANR	1072789	Symbol	stdout		1070509						
ANR	1072790	Symbol	* saved_pentry -> pipeEnd		1070509						
ANR	1072791	Symbol	Stream :: safe_sock		1070509						
ANR	1072792	Symbol	saved_pentry -> pipeEnd -> io_ready		1070509						
ANR	1072793	Symbol	t . Timeout		1070509						
ANR	1072794	Symbol	do_fd1		1070509						
ANR	1072795	Symbol	* * * pipeTable		1070509						
ANR	1072796	Symbol	CEDAR_EWOULDBLOCK		1070509						
ANR	1072797	Symbol	( * sockTable ) [ i ] . iosock		1070509						
ANR	1072798	Symbol	( * pipeTable ) [ i ] . pipe_descrip		1070509						
ANR	1072799	Symbol	SIGFPE		1070509						
ANR	1072800	Symbol	* * i		1070509						
ANR	1072801	Symbol	& emptyset		1070509						
ANR	1072802	Symbol	NULL		1070509						
ANR	1072803	Symbol	read		1070509						
ANR	1072804	Symbol	dc_stats . TimersFired		1070509						
ANR	1072805	Symbol	Selector :: IO_EXCEPT		1070509						
ANR	1072806	Symbol	sockTable		1070509						
ANR	1072807	Symbol	selector . timed_out		1070509						
ANR	1072808	Symbol	runtime		1070509						
ANR	1072809	Symbol	& sigTable [ i ] . data_ptr		1070509						
ANR	1072810	Symbol	TRUE		1070509						
ANR	1072811	Symbol	param_boolean		1070509						
ANR	1072812	Symbol	* pipeTable		1070509						
ANR	1072813	Symbol	DebugFlags		1070509						
ANR	1072814	Symbol	* saved_pentry		1070509						
ANR	1072815	Symbol	& fullset		1070509						
ANR	1072816	Symbol	stderr		1070509						
ANR	1072817	Symbol	dc_stats . AddRuntime		1070509						
ANR	1072818	Symbol	okay_delta		1070509						
ANR	1072819	Symbol	strerror		1070509						
ANR	1072820	Symbol	( * sockTable ) [ i ] . iosock -> get_deadline		1070509						
ANR	1072821	Symbol	( * pipeTable ) [ i ] . index		1070509						
ANR	1072822	Symbol	SIGSEGV		1070509						
ANR	1072823	Symbol	dc_stats . Signals		1070509						
ANR	1072824	Symbol	async_pipe [ 0 ] . get_file_desc		1070509						
ANR	1072825	Symbol	true		1070509						
ANR	1072826	Symbol	( * pipeTable ) [ i ] . handler_type		1070509						
ANR	1072827	Symbol	dc_stats . SelectWaittime		1070509						
ANR	1072828	Symbol	( ( Sock * ) ( * sockTable ) [ i ] . iosock ) -> do_connect_finish		1070509						
ANR	1072829	Symbol	Selector :: IO_WRITE		1070509						
ANR	1072830	Symbol	dc_stats . PipeMessages		1070509						
ANR	1072831	Symbol	( * pipeTable ) [ i ] . call_handler		1070509						
ANR	1072832	Symbol	sigTable [ i ] . is_cpp		1070509						
ANR	1072833	Symbol	( * sockTable ) [ i ] . iosock -> get_file_desc		1070509						
ANR	1072834	Symbol	selector . failed		1070509						
ANR	1072835	Symbol	SIGBUS		1070509						
ANR	1072836	Symbol	* * pipeTable		1070509						
ANR	1072837	Symbol	* * sockTable		1070509						
ANR	1072838	Symbol	min_deadline		1070509						
ANR	1072839	Symbol	timeout		1070509						
ANR	1072840	Symbol	SIGPROF		1070509						
ANR	1072841	Symbol	pipeHandleTable		1070509						
ANR	1072842	Symbol	now		1070509						
ANR	1072843	Symbol	selector		1070509						
ANR	1072844	Symbol	async_pipe		1070509						
ANR	1072845	Symbol	sigTable [ i ] . service		1070509						
ANR	1072846	Symbol	TIME_T_NEVER		1070509						
ANR	1072847	Symbol	sock_timed_out		1070509						
ANR	1072848	Symbol	sent_signal		1070509						
ANR	1072849	Symbol	D_DAEMONCORE		1070509						
ANR	1072850	Symbol	selector . has_ready		1070509						
ANR	1072851	Symbol	( * pipeTable ) [ i ] . service		1070509						
ANR	1072852	Symbol	false		1070509						
ANR	1072853	Symbol	D_ALWAYS		1070509						
ANR	1072854	Symbol	fwrite		1070509						
ANR	1072855	Symbol	pipeTable		1070509						
ANR	1072856	Symbol	SIGILL		1070509						
ANR	1072857	Symbol	dc_stats . PumpCycle		1070509						
ANR	1072858	Symbol	* i		1070509						
ANR	1072859	Symbol	fullset		1070509						
ANR	1072860	Symbol	sigTable [ i ] . num		1070509						
ANR	1072861	Symbol	( * pipeTable ) [ i ] . pentry		1070509						
ANR	1072862	Symbol	pipefd		1070509						
ANR	1072863	Symbol	( * sockTable ) [ i ] . call_handler		1070509						
ANR	1072864	Symbol	* * pipeHandleTable		1070509						
ANR	1072865	Symbol	( * sockTable ) [ i ] . servicing_tid		1070509						
ANR	1072866	Symbol	FALSE		1070509						
ANR	1072867	Symbol	time		1070509						
ANR	1072868	Function	DaemonCore :: SocketIsRegistered	3647:0:109912:110026							
ANR	1072869	FunctionDef	DaemonCore :: SocketIsRegistered (Stream * sock)		1072868	0					
ANR	1072870	CompoundStatement		3649:0:109964:110026	1072868	0					
ANR	1072871	IdentifierDeclStatement	int i = GetRegisteredSocketIndex ( sock ) ;	3650:1:109967:110007	1072868	0	True				
ANR	1072872	IdentifierDecl	i = GetRegisteredSocketIndex ( sock )		1072868	0					
ANR	1072873	IdentifierDeclType	int		1072868	0					
ANR	1072874	Identifier	i		1072868	1					
ANR	1072875	AssignmentExpression	i = GetRegisteredSocketIndex ( sock )		1072868	2		=			
ANR	1072876	Identifier	i		1072868	0					
ANR	1072877	CallExpression	GetRegisteredSocketIndex ( sock )		1072868	1					
ANR	1072878	Callee	GetRegisteredSocketIndex		1072868	0					
ANR	1072879	Identifier	GetRegisteredSocketIndex		1072868	0					
ANR	1072880	ArgumentList	sock		1072868	1					
ANR	1072881	Argument	sock		1072868	0					
ANR	1072882	Identifier	sock		1072868	0					
ANR	1072883	ReturnStatement	return i != - 1 ;	3651:1:110010:110024	1072868	1	True				
ANR	1072884	EqualityExpression	i != - 1		1072868	0		!=			
ANR	1072885	Identifier	i		1072868	0					
ANR	1072886	UnaryOperationExpression	- 1		1072868	1					
ANR	1072887	UnaryOperator	-		1072868	0					
ANR	1072888	PrimaryExpression	1		1072868	1					
ANR	1072889	ReturnType	bool		1072868	1					
ANR	1072890	Identifier	DaemonCore :: SocketIsRegistered		1072868	2					
ANR	1072891	ParameterList	Stream * sock		1072868	3					
ANR	1072892	Parameter	Stream * sock	3648:32:109949:109960	1072868	0	True				
ANR	1072893	ParameterType	Stream *		1072868	0					
ANR	1072894	Identifier	sock		1072868	1					
ANR	1072895	CFGEntryNode	ENTRY		1072868		True				
ANR	1072896	CFGExitNode	EXIT		1072868		True				
ANR	1072897	Symbol	sock		1072868						
ANR	1072898	Symbol	i		1072868						
ANR	1072899	Symbol	GetRegisteredSocketIndex		1072868						
ANR	1072900	Function	DaemonCore :: GetRegisteredSocketIndex	3654:0:110029:110196							
ANR	1072901	FunctionDef	DaemonCore :: GetRegisteredSocketIndex (Stream * sock)		1072900	0					
ANR	1072902	CompoundStatement		3656:0:110086:110196	1072900	0					
ANR	1072903	IdentifierDeclStatement	int i ;	3657:1:110089:110094	1072900	0	True				
ANR	1072904	IdentifierDecl	i		1072900	0					
ANR	1072905	IdentifierDeclType	int		1072900	0					
ANR	1072906	Identifier	i		1072900	1					
ANR	1072907	ForStatement	for ( i = 0 ; i < nSock ; i ++ )		1072900	1					
ANR	1072908	ForInit	i = 0 ;	3659:6:110103:110106	1072900	0	True				
ANR	1072909	AssignmentExpression	i = 0		1072900	0		=			
ANR	1072910	Identifier	i		1072900	0					
ANR	1072911	PrimaryExpression	0		1072900	1					
ANR	1072912	Condition	i < nSock	3659:10:110107:110113	1072900	1	True				
ANR	1072913	RelationalExpression	i < nSock		1072900	0		<			
ANR	1072914	Identifier	i		1072900	0					
ANR	1072915	Identifier	nSock		1072900	1					
ANR	1072916	PostIncDecOperationExpression	i ++	3659:18:110115:110117	1072900	2	True				
ANR	1072917	Identifier	i		1072900	0					
ANR	1072918	IncDec	++		1072900	1					
ANR	1072919	CompoundStatement		4:23:33:33	1072900	3					
ANR	1072920	IfStatement	if ( ( * sockTable ) [ i ] . iosock == sock )		1072900	0					
ANR	1072921	Condition	( * sockTable ) [ i ] . iosock == sock	3660:7:110129:110158	1072900	0	True				
ANR	1072922	EqualityExpression	( * sockTable ) [ i ] . iosock == sock		1072900	0		==			
ANR	1072923	MemberAccess	( * sockTable ) [ i ] . iosock		1072900	0					
ANR	1072924	ArrayIndexing	( * sockTable ) [ i ]		1072900	0					
ANR	1072925	UnaryOperationExpression	* sockTable		1072900	0					
ANR	1072926	UnaryOperator	*		1072900	0					
ANR	1072927	Identifier	sockTable		1072900	1					
ANR	1072928	Identifier	i		1072900	1					
ANR	1072929	Identifier	iosock		1072900	1					
ANR	1072930	Identifier	sock		1072900	1					
ANR	1072931	CompoundStatement		5:40:75:75	1072900	1					
ANR	1072932	ReturnStatement	return i ;	3661:3:110167:110175	1072900	0	True				
ANR	1072933	Identifier	i		1072900	0					
ANR	1072934	ReturnStatement	return - 1 ;	3664:1:110185:110194	1072900	2	True				
ANR	1072935	UnaryOperationExpression	- 1		1072900	0					
ANR	1072936	UnaryOperator	-		1072900	0					
ANR	1072937	PrimaryExpression	1		1072900	1					
ANR	1072938	ReturnType	int		1072900	1					
ANR	1072939	Identifier	DaemonCore :: GetRegisteredSocketIndex		1072900	2					
ANR	1072940	ParameterList	Stream * sock		1072900	3					
ANR	1072941	Parameter	Stream * sock	3655:38:110071:110082	1072900	0	True				
ANR	1072942	ParameterType	Stream *		1072900	0					
ANR	1072943	Identifier	sock		1072900	1					
ANR	1072944	CFGEntryNode	ENTRY		1072900		True				
ANR	1072945	CFGExitNode	EXIT		1072900		True				
ANR	1072946	Symbol	sock		1072900						
ANR	1072947	Symbol	* i		1072900						
ANR	1072948	Symbol	* sockTable		1072900						
ANR	1072949	Symbol	nSock		1072900						
ANR	1072950	Symbol	sockTable		1072900						
ANR	1072951	Symbol	( * sockTable ) [ i ] . iosock		1072900						
ANR	1072952	Symbol	i		1072900						
ANR	1072953	Symbol	* * sockTable		1072900						
ANR	1072954	Function	DaemonCore :: CallSocketHandler	3667:0:110199:110580							
ANR	1072955	FunctionDef	"DaemonCore :: CallSocketHandler (Stream * sock , bool default_to_HandleCommand)"		1072954	0					
ANR	1072956	CompoundStatement		3669:0:110281:110580	1072954	0					
ANR	1072957	IdentifierDeclStatement	int i = GetRegisteredSocketIndex ( sock ) ;	3670:1:110284:110324	1072954	0	True				
ANR	1072958	IdentifierDecl	i = GetRegisteredSocketIndex ( sock )		1072954	0					
ANR	1072959	IdentifierDeclType	int		1072954	0					
ANR	1072960	Identifier	i		1072954	1					
ANR	1072961	AssignmentExpression	i = GetRegisteredSocketIndex ( sock )		1072954	2		=			
ANR	1072962	Identifier	i		1072954	0					
ANR	1072963	CallExpression	GetRegisteredSocketIndex ( sock )		1072954	1					
ANR	1072964	Callee	GetRegisteredSocketIndex		1072954	0					
ANR	1072965	Identifier	GetRegisteredSocketIndex		1072954	0					
ANR	1072966	ArgumentList	sock		1072954	1					
ANR	1072967	Argument	sock		1072954	0					
ANR	1072968	Identifier	sock		1072954	0					
ANR	1072969	IfStatement	if ( i == - 1 )		1072954	1					
ANR	1072970	Condition	i == - 1	3672:6:110333:110339	1072954	0	True				
ANR	1072971	EqualityExpression	i == - 1		1072954	0		==			
ANR	1072972	Identifier	i		1072954	0					
ANR	1072973	UnaryOperationExpression	- 1		1072954	1					
ANR	1072974	UnaryOperator	-		1072954	0					
ANR	1072975	PrimaryExpression	1		1072954	1					
ANR	1072976	CompoundStatement		4:16:61:61	1072954	1					
ANR	1072977	ExpressionStatement	"dprintf ( D_ALWAYS , ""CallSocketHandler: called on non-registered socket!\\n"" )"	3673:2:110347:110421	1072954	0	True				
ANR	1072978	CallExpression	"dprintf ( D_ALWAYS , ""CallSocketHandler: called on non-registered socket!\\n"" )"		1072954	0					
ANR	1072979	Callee	dprintf		1072954	0					
ANR	1072980	Identifier	dprintf		1072954	0					
ANR	1072981	ArgumentList	D_ALWAYS		1072954	1					
ANR	1072982	Argument	D_ALWAYS		1072954	0					
ANR	1072983	Identifier	D_ALWAYS		1072954	0					
ANR	1072984	Argument	"""CallSocketHandler: called on non-registered socket!\\n"""		1072954	1					
ANR	1072985	PrimaryExpression	"""CallSocketHandler: called on non-registered socket!\\n"""		1072954	0					
ANR	1072986	ExpressionStatement	"dprintf ( D_ALWAYS , ""Offending socket number %d\\n"" , i )"	3674:2:110425:110478	1072954	1	True				
ANR	1072987	CallExpression	"dprintf ( D_ALWAYS , ""Offending socket number %d\\n"" , i )"		1072954	0					
ANR	1072988	Callee	dprintf		1072954	0					
ANR	1072989	Identifier	dprintf		1072954	0					
ANR	1072990	ArgumentList	D_ALWAYS		1072954	1					
ANR	1072991	Argument	D_ALWAYS		1072954	0					
ANR	1072992	Identifier	D_ALWAYS		1072954	0					
ANR	1072993	Argument	"""Offending socket number %d\\n"""		1072954	1					
ANR	1072994	PrimaryExpression	"""Offending socket number %d\\n"""		1072954	0					
ANR	1072995	Argument	i		1072954	2					
ANR	1072996	Identifier	i		1072954	0					
ANR	1072997	ExpressionStatement	DumpSocketTable ( D_DAEMONCORE )	3675:2:110482:110513	1072954	2	True				
ANR	1072998	CallExpression	DumpSocketTable ( D_DAEMONCORE )		1072954	0					
ANR	1072999	Callee	DumpSocketTable		1072954	0					
ANR	1073000	Identifier	DumpSocketTable		1072954	0					
ANR	1073001	ArgumentList	D_DAEMONCORE		1072954	1					
ANR	1073002	Argument	D_DAEMONCORE		1072954	0					
ANR	1073003	Identifier	D_DAEMONCORE		1072954	0					
ANR	1073004	ReturnStatement	return ;	3676:2:110517:110523	1072954	3	True				
ANR	1073005	ExpressionStatement	"CallSocketHandler ( i , default_to_HandleCommand )"	3679:1:110530:110578	1072954	2	True				
ANR	1073006	CallExpression	"CallSocketHandler ( i , default_to_HandleCommand )"		1072954	0					
ANR	1073007	Callee	CallSocketHandler		1072954	0					
ANR	1073008	Identifier	CallSocketHandler		1072954	0					
ANR	1073009	ArgumentList	i		1072954	1					
ANR	1073010	Argument	i		1072954	0					
ANR	1073011	Identifier	i		1072954	0					
ANR	1073012	Argument	default_to_HandleCommand		1072954	1					
ANR	1073013	Identifier	default_to_HandleCommand		1072954	0					
ANR	1073014	ReturnType	void		1072954	1					
ANR	1073015	Identifier	DaemonCore :: CallSocketHandler		1072954	2					
ANR	1073016	ParameterList	"Stream * sock , bool default_to_HandleCommand"		1072954	3					
ANR	1073017	Parameter	Stream * sock	3668:31:110235:110246	1072954	0	True				
ANR	1073018	ParameterType	Stream *		1072954	0					
ANR	1073019	Identifier	sock		1072954	1					
ANR	1073020	Parameter	bool default_to_HandleCommand	3668:45:110249:110277	1072954	1	True				
ANR	1073021	ParameterType	bool		1072954	0					
ANR	1073022	Identifier	default_to_HandleCommand		1072954	1					
ANR	1073023	CFGEntryNode	ENTRY		1072954		True				
ANR	1073024	CFGExitNode	EXIT		1072954		True				
ANR	1073025	Symbol	sock		1072954						
ANR	1073026	Symbol	D_DAEMONCORE		1072954						
ANR	1073027	Symbol	D_ALWAYS		1072954						
ANR	1073028	Symbol	i		1072954						
ANR	1073029	Symbol	default_to_HandleCommand		1072954						
ANR	1073030	Symbol	GetRegisteredSocketIndex		1072954						
ANR	1073031	ClassDef	CallSocketHandler_args	3682:0:110583:110679							
ANR	1073032	DeclStmt									
ANR	1073033	Decl							int	int	i
ANR	1073034	DeclStmt									
ANR	1073035	Decl							bool	bool	default_to_HandleCommand
ANR	1073036	DeclStmt									
ANR	1073037	Decl							Stream	Stream *	accepted_sock
ANR	1073038	Function	DaemonCore :: CallSocketHandler	3688:0:110683:113097							
ANR	1073039	FunctionDef	"DaemonCore :: CallSocketHandler (int & i , bool default_to_HandleCommand)"		1073038	0					
ANR	1073040	CompoundStatement		3690:0:110759:113097	1073038	0					
ANR	1073041	IdentifierDeclStatement	unsigned int iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1 ;	3691:4:110765:110848	1073038	0	True				
ANR	1073042	IdentifierDecl	iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		1073038	0					
ANR	1073043	IdentifierDeclType	unsigned int		1073038	0					
ANR	1073044	Identifier	iAcceptCnt		1073038	1					
ANR	1073045	AssignmentExpression	iAcceptCnt = ( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		1073038	2		=			
ANR	1073046	Identifier	iAcceptCnt		1073038	0					
ANR	1073047	ConditionalExpression	( m_iMaxAcceptsPerCycle > 0 ) ? m_iMaxAcceptsPerCycle : - 1		1073038	1					
ANR	1073048	Condition	m_iMaxAcceptsPerCycle > 0		1073038	0					
ANR	1073049	RelationalExpression	m_iMaxAcceptsPerCycle > 0		1073038	0		>			
ANR	1073050	Identifier	m_iMaxAcceptsPerCycle		1073038	0					
ANR	1073051	PrimaryExpression	0		1073038	1					
ANR	1073052	Identifier	m_iMaxAcceptsPerCycle		1073038	1					
ANR	1073053	UnaryOperationExpression	- 1		1073038	2					
ANR	1073054	UnaryOperator	-		1073038	0					
ANR	1073055	PrimaryExpression	1		1073038	1					
ANR	1073056	WhileStatement	while ( iAcceptCnt )		1073038	1					
ANR	1073057	Condition	iAcceptCnt	3695:12:110950:110959	1073038	0	True				
ANR	1073058	Identifier	iAcceptCnt		1073038	0					
ANR	1073059	CompoundStatement		56:5:1959:1975	1073038	1					
ANR	1073060	IdentifierDeclStatement	bool set_service_tid = false ;	3697:5:110974:111002	1073038	0	True				
ANR	1073061	IdentifierDecl	set_service_tid = false		1073038	0					
ANR	1073062	IdentifierDeclType	bool		1073038	0					
ANR	1073063	Identifier	set_service_tid		1073038	1					
ANR	1073064	AssignmentExpression	set_service_tid = false		1073038	2		=			
ANR	1073065	Identifier	false		1073038	0					
ANR	1073066	Identifier	false		1073038	1					
ANR	1073067	IdentifierDeclStatement	struct CallSocketHandler_args * args ;	3700:5:111070:111105	1073038	1	True				
ANR	1073068	IdentifierDecl	* args		1073038	0					
ANR	1073069	IdentifierDeclType	struct CallSocketHandler_args *		1073038	0					
ANR	1073070	Identifier	args		1073038	1					
ANR	1073071	Statement	args	3701:5:111112:111115	1073038	2	True				
ANR	1073072	Statement	=	3701:10:111117:111117	1073038	3	True				
ANR	1073073	Statement	new	3701:12:111119:111121	1073038	4	True				
ANR	1073074	Statement	struct	3701:16:111123:111128	1073038	5	True				
ANR	1073075	ExpressionStatement	CallSocketHandler_args	3701:23:111130:111152	1073038	6	True				
ANR	1073076	Identifier	CallSocketHandler_args		1073038	0					
ANR	1073077	ExpressionStatement	args -> accepted_sock = NULL	3706:5:111323:111349	1073038	7	True				
ANR	1073078	AssignmentExpression	args -> accepted_sock = NULL		1073038	0		=			
ANR	1073079	PtrMemberAccess	args -> accepted_sock		1073038	0					
ANR	1073080	Identifier	args		1073038	0					
ANR	1073081	Identifier	accepted_sock		1073038	1					
ANR	1073082	Identifier	NULL		1073038	1					
ANR	1073083	IdentifierDeclStatement	Stream * insock = ( * sockTable ) [ i ] . iosock ;	3707:5:111356:111395	1073038	8	True				
ANR	1073084	IdentifierDecl	* insock = ( * sockTable ) [ i ] . iosock		1073038	0					
ANR	1073085	IdentifierDeclType	Stream *		1073038	0					
ANR	1073086	Identifier	insock		1073038	1					
ANR	1073087	AssignmentExpression	* insock = ( * sockTable ) [ i ] . iosock		1073038	2		=			
ANR	1073088	Identifier	insock		1073038	0					
ANR	1073089	MemberAccess	( * sockTable ) [ i ] . iosock		1073038	1					
ANR	1073090	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073091	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073092	UnaryOperator	*		1073038	0					
ANR	1073093	Identifier	sockTable		1073038	1					
ANR	1073094	Identifier	i		1073038	1					
ANR	1073095	Identifier	iosock		1073038	1					
ANR	1073096	ExpressionStatement	ASSERT ( insock )	3708:5:111402:111416	1073038	9	True				
ANR	1073097	CallExpression	ASSERT ( insock )		1073038	0					
ANR	1073098	Callee	ASSERT		1073038	0					
ANR	1073099	Identifier	ASSERT		1073038	0					
ANR	1073100	ArgumentList	insock		1073038	1					
ANR	1073101	Argument	insock		1073038	0					
ANR	1073102	Identifier	insock		1073038	0					
ANR	1073103	IfStatement	if ( ( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen )		1073038	10					
ANR	1073104	Condition	( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen	3709:10:111428:111706	1073038	0	True				
ANR	1073105	AndExpression	( * sockTable ) [ i ] . handler == NULL && ( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	0		&&			
ANR	1073106	EqualityExpression	( * sockTable ) [ i ] . handler == NULL		1073038	0		==			
ANR	1073107	MemberAccess	( * sockTable ) [ i ] . handler		1073038	0					
ANR	1073108	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073109	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073110	UnaryOperator	*		1073038	0					
ANR	1073111	Identifier	sockTable		1073038	1					
ANR	1073112	Identifier	i		1073038	1					
ANR	1073113	Identifier	handler		1073038	1					
ANR	1073114	Identifier	NULL		1073038	1					
ANR	1073115	AndExpression	( * sockTable ) [ i ] . handlercpp == NULL && default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	1		&&			
ANR	1073116	EqualityExpression	( * sockTable ) [ i ] . handlercpp == NULL		1073038	0		==			
ANR	1073117	MemberAccess	( * sockTable ) [ i ] . handlercpp		1073038	0					
ANR	1073118	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073119	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073120	UnaryOperator	*		1073038	0					
ANR	1073121	Identifier	sockTable		1073038	1					
ANR	1073122	Identifier	i		1073038	1					
ANR	1073123	Identifier	handlercpp		1073038	1					
ANR	1073124	Identifier	NULL		1073038	1					
ANR	1073125	AndExpression	default_to_HandleCommand && insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	1		&&			
ANR	1073126	Identifier	default_to_HandleCommand		1073038	0					
ANR	1073127	AndExpression	insock -> type ( ) == Stream :: reli_sock && ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	1		&&			
ANR	1073128	EqualityExpression	insock -> type ( ) == Stream :: reli_sock		1073038	0		==			
ANR	1073129	CallExpression	insock -> type ( )		1073038	0					
ANR	1073130	Callee	insock -> type		1073038	0					
ANR	1073131	PtrMemberAccess	insock -> type		1073038	0					
ANR	1073132	Identifier	insock		1073038	0					
ANR	1073133	Identifier	type		1073038	1					
ANR	1073134	ArgumentList			1073038	1					
ANR	1073135	Identifier	Stream :: reli_sock		1073038	1					
ANR	1073136	AndExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	1		&&			
ANR	1073137	EqualityExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special		1073038	0		==			
ANR	1073138	PtrMemberAccess	( ( ReliSock * ) insock ) -> _state		1073038	0					
ANR	1073139	CastExpression	( ReliSock * ) insock		1073038	0					
ANR	1073140	CastTarget	ReliSock *		1073038	0					
ANR	1073141	Identifier	insock		1073038	1					
ANR	1073142	Identifier	_state		1073038	1					
ANR	1073143	Identifier	Sock :: sock_special		1073038	1					
ANR	1073144	EqualityExpression	( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1073038	1		==			
ANR	1073145	PtrMemberAccess	( ( ReliSock * ) insock ) -> _special_state		1073038	0					
ANR	1073146	CastExpression	( ReliSock * ) insock		1073038	0					
ANR	1073147	CastTarget	ReliSock *		1073038	0					
ANR	1073148	Identifier	insock		1073038	1					
ANR	1073149	Identifier	_special_state		1073038	1					
ANR	1073150	Identifier	ReliSock :: relisock_listen		1073038	1					
ANR	1073151	CompoundStatement		28:12:1093:1110	1073038	1					
ANR	1073152	IdentifierDeclStatement	Selector selector ;	3717:12:111853:111870	1073038	0	True				
ANR	1073153	IdentifierDecl	selector		1073038	0					
ANR	1073154	IdentifierDeclType	Selector		1073038	0					
ANR	1073155	Identifier	selector		1073038	1					
ANR	1073156	ExpressionStatement	"selector . set_timeout ( 0 , 0 )"	3718:12:111884:111912	1073038	1	True				
ANR	1073157	CallExpression	"selector . set_timeout ( 0 , 0 )"		1073038	0					
ANR	1073158	Callee	selector . set_timeout		1073038	0					
ANR	1073159	MemberAccess	selector . set_timeout		1073038	0					
ANR	1073160	Identifier	selector		1073038	0					
ANR	1073161	Identifier	set_timeout		1073038	1					
ANR	1073162	ArgumentList	0		1073038	1					
ANR	1073163	Argument	0		1073038	0					
ANR	1073164	PrimaryExpression	0		1073038	0					
ANR	1073165	Argument	0		1073038	1					
ANR	1073166	PrimaryExpression	0		1073038	0					
ANR	1073167	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	3719:12:111926:112003	1073038	2	True				
ANR	1073168	CallExpression	"selector . add_fd ( ( * sockTable ) [ i ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		1073038	0					
ANR	1073169	Callee	selector . add_fd		1073038	0					
ANR	1073170	MemberAccess	selector . add_fd		1073038	0					
ANR	1073171	Identifier	selector		1073038	0					
ANR	1073172	Identifier	add_fd		1073038	1					
ANR	1073173	ArgumentList	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1073038	1					
ANR	1073174	Argument	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1073038	0					
ANR	1073175	CallExpression	( * sockTable ) [ i ] . iosock -> get_file_desc ( )		1073038	0					
ANR	1073176	Callee	( * sockTable ) [ i ] . iosock -> get_file_desc		1073038	0					
ANR	1073177	PtrMemberAccess	( * sockTable ) [ i ] . iosock -> get_file_desc		1073038	0					
ANR	1073178	MemberAccess	( * sockTable ) [ i ] . iosock		1073038	0					
ANR	1073179	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073180	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073181	UnaryOperator	*		1073038	0					
ANR	1073182	Identifier	sockTable		1073038	1					
ANR	1073183	Identifier	i		1073038	1					
ANR	1073184	Identifier	iosock		1073038	1					
ANR	1073185	Identifier	get_file_desc		1073038	1					
ANR	1073186	ArgumentList			1073038	1					
ANR	1073187	Argument	Selector :: IO_READ		1073038	1					
ANR	1073188	Identifier	Selector :: IO_READ		1073038	0					
ANR	1073189	ExpressionStatement	selector . execute ( )	3720:12:112017:112035	1073038	3	True				
ANR	1073190	CallExpression	selector . execute ( )		1073038	0					
ANR	1073191	Callee	selector . execute		1073038	0					
ANR	1073192	MemberAccess	selector . execute		1073038	0					
ANR	1073193	Identifier	selector		1073038	0					
ANR	1073194	Identifier	execute		1073038	1					
ANR	1073195	ArgumentList			1073038	1					
ANR	1073196	IfStatement	if ( ! selector . has_ready ( ) )		1073038	4					
ANR	1073197	Condition	! selector . has_ready ( )	3722:17:112055:112075	1073038	0	True				
ANR	1073198	UnaryOperationExpression	! selector . has_ready ( )		1073038	0					
ANR	1073199	UnaryOperator	!		1073038	0					
ANR	1073200	CallExpression	selector . has_ready ( )		1073038	1					
ANR	1073201	Callee	selector . has_ready		1073038	0					
ANR	1073202	MemberAccess	selector . has_ready		1073038	0					
ANR	1073203	Identifier	selector		1073038	0					
ANR	1073204	Identifier	has_ready		1073038	1					
ANR	1073205	ArgumentList			1073038	1					
ANR	1073206	CompoundStatement		33:41:1319:1319	1073038	1					
ANR	1073207	Statement	delete	3724:16:112192:112197	1073038	0	True				
ANR	1073208	ExpressionStatement	args	3724:23:112199:112203	1073038	1	True				
ANR	1073209	Identifier	args		1073038	0					
ANR	1073210	ReturnStatement	return ;	3725:16:112221:112227	1073038	2	True				
ANR	1073211	ExpressionStatement	args -> accepted_sock = ( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )	3728:6:112250:112313	1073038	5	True				
ANR	1073212	AssignmentExpression	args -> accepted_sock = ( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )		1073038	0		=			
ANR	1073213	PtrMemberAccess	args -> accepted_sock		1073038	0					
ANR	1073214	Identifier	args		1073038	0					
ANR	1073215	Identifier	accepted_sock		1073038	1					
ANR	1073216	CastExpression	( Stream * ) ( ( ReliSock * ) insock ) -> accept ( )		1073038	1					
ANR	1073217	CastTarget	Stream *		1073038	0					
ANR	1073218	CallExpression	( ( ReliSock * ) insock ) -> accept ( )		1073038	1					
ANR	1073219	Callee	( ( ReliSock * ) insock ) -> accept		1073038	0					
ANR	1073220	PtrMemberAccess	( ( ReliSock * ) insock ) -> accept		1073038	0					
ANR	1073221	CastExpression	( ReliSock * ) insock		1073038	0					
ANR	1073222	CastTarget	ReliSock *		1073038	0					
ANR	1073223	Identifier	insock		1073038	1					
ANR	1073224	Identifier	accept		1073038	1					
ANR	1073225	ArgumentList			1073038	1					
ANR	1073226	IfStatement	if ( ! ( args -> accepted_sock ) )		1073038	6					
ANR	1073227	Condition	! ( args -> accepted_sock )	3730:11:112327:112348	1073038	0	True				
ANR	1073228	UnaryOperationExpression	! ( args -> accepted_sock )		1073038	0					
ANR	1073229	UnaryOperator	!		1073038	0					
ANR	1073230	PtrMemberAccess	args -> accepted_sock		1073038	1					
ANR	1073231	Identifier	args		1073038	0					
ANR	1073232	Identifier	accepted_sock		1073038	1					
ANR	1073233	CompoundStatement		41:36:1592:1592	1073038	1					
ANR	1073234	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"	3731:10:112364:112413	1073038	0	True				
ANR	1073235	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"		1073038	0					
ANR	1073236	Callee	dprintf		1073038	0					
ANR	1073237	Identifier	dprintf		1073038	0					
ANR	1073238	ArgumentList	D_ALWAYS		1073038	1					
ANR	1073239	Argument	D_ALWAYS		1073038	0					
ANR	1073240	Identifier	D_ALWAYS		1073038	0					
ANR	1073241	Argument	"""DaemonCore: accept() failed!"""		1073038	1					
ANR	1073242	PrimaryExpression	"""DaemonCore: accept() failed!"""		1073038	0					
ANR	1073243	Statement	delete	3733:10:112487:112492	1073038	1	True				
ANR	1073244	ExpressionStatement	args	3733:17:112494:112498	1073038	2	True				
ANR	1073245	Identifier	args		1073038	0					
ANR	1073246	ReturnStatement	return ;	3734:10:112510:112516	1073038	3	True				
ANR	1073247	ExpressionStatement	iAcceptCnt --	3737:12:112539:112552	1073038	7	True				
ANR	1073248	PostIncDecOperationExpression	iAcceptCnt --		1073038	0					
ANR	1073249	Identifier	iAcceptCnt		1073038	0					
ANR	1073250	IncDec	--		1073038	1					
ANR	1073251	ElseStatement	else		1073038	0					
ANR	1073252	CompoundStatement		50:12:1807:1807	1073038	0					
ANR	1073253	ExpressionStatement	set_service_tid = true	3740:6:112575:112597	1073038	0	True				
ANR	1073254	AssignmentExpression	set_service_tid = true		1073038	0		=			
ANR	1073255	Identifier	set_service_tid		1073038	0					
ANR	1073256	Identifier	true		1073038	1					
ANR	1073257	ExpressionStatement	iAcceptCnt = 0	3741:12:112611:112623	1073038	1	True				
ANR	1073258	AssignmentExpression	iAcceptCnt = 0		1073038	0		=			
ANR	1073259	Identifier	iAcceptCnt		1073038	0					
ANR	1073260	PrimaryExpression	0		1073038	1					
ANR	1073261	ExpressionStatement	args -> i = i	3743:5:112637:112648	1073038	11	True				
ANR	1073262	AssignmentExpression	args -> i = i		1073038	0		=			
ANR	1073263	PtrMemberAccess	args -> i		1073038	0					
ANR	1073264	Identifier	args		1073038	0					
ANR	1073265	Identifier	i		1073038	1					
ANR	1073266	Identifier	i		1073038	1					
ANR	1073267	ExpressionStatement	args -> default_to_HandleCommand = default_to_HandleCommand	3744:5:112655:112712	1073038	12	True				
ANR	1073268	AssignmentExpression	args -> default_to_HandleCommand = default_to_HandleCommand		1073038	0		=			
ANR	1073269	PtrMemberAccess	args -> default_to_HandleCommand		1073038	0					
ANR	1073270	Identifier	args		1073038	0					
ANR	1073271	Identifier	default_to_HandleCommand		1073038	1					
ANR	1073272	Identifier	default_to_HandleCommand		1073038	1					
ANR	1073273	IdentifierDeclStatement	int * pTid = NULL ;	3745:5:112719:112735	1073038	13	True				
ANR	1073274	IdentifierDecl	* pTid = NULL		1073038	0					
ANR	1073275	IdentifierDeclType	int *		1073038	0					
ANR	1073276	Identifier	pTid		1073038	1					
ANR	1073277	AssignmentExpression	* pTid = NULL		1073038	2		=			
ANR	1073278	Identifier	NULL		1073038	0					
ANR	1073279	Identifier	NULL		1073038	1					
ANR	1073280	IfStatement	if ( set_service_tid )		1073038	14					
ANR	1073281	Condition	set_service_tid	3746:10:112747:112761	1073038	0	True				
ANR	1073282	Identifier	set_service_tid		1073038	0					
ANR	1073283	CompoundStatement		57:28:2005:2005	1073038	1					
ANR	1073284	ExpressionStatement	pTid = & ( ( * sockTable ) [ i ] . servicing_tid )	3749:6:112908:112947	1073038	0	True				
ANR	1073285	AssignmentExpression	pTid = & ( ( * sockTable ) [ i ] . servicing_tid )		1073038	0		=			
ANR	1073286	Identifier	pTid		1073038	0					
ANR	1073287	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . servicing_tid )		1073038	1					
ANR	1073288	UnaryOperator	&		1073038	0					
ANR	1073289	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1073038	1					
ANR	1073290	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073291	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073292	UnaryOperator	*		1073038	0					
ANR	1073293	Identifier	sockTable		1073038	1					
ANR	1073294	Identifier	i		1073038	1					
ANR	1073295	Identifier	servicing_tid		1073038	1					
ANR	1073296	ExpressionStatement	"CondorThreads :: pool_add ( DaemonCore :: CallSocketHandler_worker_demarshall , args , pTid , ( * sockTable ) [ i ] . handler_descrip )"	3751:5:112961:113088	1073038	15	True				
ANR	1073297	CallExpression	"CondorThreads :: pool_add ( DaemonCore :: CallSocketHandler_worker_demarshall , args , pTid , ( * sockTable ) [ i ] . handler_descrip )"		1073038	0					
ANR	1073298	Callee	CondorThreads :: pool_add		1073038	0					
ANR	1073299	Identifier	CondorThreads :: pool_add		1073038	0					
ANR	1073300	ArgumentList	DaemonCore :: CallSocketHandler_worker_demarshall		1073038	1					
ANR	1073301	Argument	DaemonCore :: CallSocketHandler_worker_demarshall		1073038	0					
ANR	1073302	Identifier	DaemonCore :: CallSocketHandler_worker_demarshall		1073038	0					
ANR	1073303	Argument	args		1073038	1					
ANR	1073304	Identifier	args		1073038	0					
ANR	1073305	Argument	pTid		1073038	2					
ANR	1073306	Identifier	pTid		1073038	0					
ANR	1073307	Argument	( * sockTable ) [ i ] . handler_descrip		1073038	3					
ANR	1073308	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1073038	0					
ANR	1073309	ArrayIndexing	( * sockTable ) [ i ]		1073038	0					
ANR	1073310	UnaryOperationExpression	* sockTable		1073038	0					
ANR	1073311	UnaryOperator	*		1073038	0					
ANR	1073312	Identifier	sockTable		1073038	1					
ANR	1073313	Identifier	i		1073038	1					
ANR	1073314	Identifier	handler_descrip		1073038	1					
ANR	1073315	ReturnType	void		1073038	1					
ANR	1073316	Identifier	DaemonCore :: CallSocketHandler		1073038	2					
ANR	1073317	ParameterList	"int & i , bool default_to_HandleCommand"		1073038	3					
ANR	1073318	Parameter	int & i	3689:31:110719:110724	1073038	0	True				
ANR	1073319	ParameterType	int &		1073038	0					
ANR	1073320	Identifier	i		1073038	1					
ANR	1073321	Parameter	bool default_to_HandleCommand	3689:39:110727:110755	1073038	1	True				
ANR	1073322	ParameterType	bool		1073038	0					
ANR	1073323	Identifier	default_to_HandleCommand		1073038	1					
ANR	1073324	CFGEntryNode	ENTRY		1073038		True				
ANR	1073325	CFGExitNode	EXIT		1073038		True				
ANR	1073326	Symbol	( * sockTable ) [ i ] . iosock -> get_file_desc		1073038						
ANR	1073327	Symbol	Sock :: sock_special		1073038						
ANR	1073328	Symbol	* * sockTable		1073038						
ANR	1073329	Symbol	( ( ReliSock * ) insock ) -> _special_state		1073038						
ANR	1073330	Symbol	pTid		1073038						
ANR	1073331	Symbol	iAcceptCnt		1073038						
ANR	1073332	Symbol	( * sockTable ) [ i ] . handlercpp		1073038						
ANR	1073333	Symbol	Selector :: IO_READ		1073038						
ANR	1073334	Symbol	( * sockTable ) [ i ] . handler_descrip		1073038						
ANR	1073335	Symbol	* args		1073038						
ANR	1073336	Symbol	args -> default_to_HandleCommand		1073038						
ANR	1073337	Symbol	set_service_tid		1073038						
ANR	1073338	Symbol	( * sockTable ) [ i ] . iosock		1073038						
ANR	1073339	Symbol	insock		1073038						
ANR	1073340	Symbol	Stream :: reli_sock		1073038						
ANR	1073341	Symbol	selector		1073038						
ANR	1073342	Symbol	ReliSock :: relisock_listen		1073038						
ANR	1073343	Symbol	* ( * sockTable ) [ i ] . iosock		1073038						
ANR	1073344	Symbol	* * i		1073038						
ANR	1073345	Symbol	NULL		1073038						
ANR	1073346	Symbol	m_iMaxAcceptsPerCycle		1073038						
ANR	1073347	Symbol	* * * sockTable		1073038						
ANR	1073348	Symbol	sockTable		1073038						
ANR	1073349	Symbol	selector . has_ready		1073038						
ANR	1073350	Symbol	false		1073038						
ANR	1073351	Symbol	D_ALWAYS		1073038						
ANR	1073352	Symbol	i		1073038						
ANR	1073353	Symbol	args -> accepted_sock		1073038						
ANR	1073354	Symbol	args		1073038						
ANR	1073355	Symbol	( ( ReliSock * ) insock ) -> _state		1073038						
ANR	1073356	Symbol	insock -> type		1073038						
ANR	1073357	Symbol	* i		1073038						
ANR	1073358	Symbol	* sockTable		1073038						
ANR	1073359	Symbol	* insock		1073038						
ANR	1073360	Symbol	args -> i		1073038						
ANR	1073361	Symbol	DaemonCore :: CallSocketHandler_worker_demarshall		1073038						
ANR	1073362	Symbol	true		1073038						
ANR	1073363	Symbol	& ( * sockTable ) [ i ] . servicing_tid		1073038						
ANR	1073364	Symbol	( ( ReliSock * ) insock ) -> accept		1073038						
ANR	1073365	Symbol	default_to_HandleCommand		1073038						
ANR	1073366	Symbol	( * sockTable ) [ i ] . handler		1073038						
ANR	1073367	Function	DaemonCore :: CallSocketHandler_worker_demarshall	3757:0:113100:113374							
ANR	1073368	FunctionDef	DaemonCore :: CallSocketHandler_worker_demarshall (void * arg)		1073367	0					
ANR	1073369	CompoundStatement		3759:0:113164:113374	1073367	0					
ANR	1073370	IdentifierDeclStatement	struct CallSocketHandler_args * args = ( struct CallSocketHandler_args * ) arg ;	3760:1:113167:113241	1073367	0	True				
ANR	1073371	IdentifierDecl	* args = ( struct CallSocketHandler_args * ) arg		1073367	0					
ANR	1073372	IdentifierDeclType	struct CallSocketHandler_args *		1073367	0					
ANR	1073373	Identifier	args		1073367	1					
ANR	1073374	AssignmentExpression	* args = ( struct CallSocketHandler_args * ) arg		1073367	2		=			
ANR	1073375	Identifier	args		1073367	0					
ANR	1073376	CastExpression	( struct CallSocketHandler_args * ) arg		1073367	1					
ANR	1073377	CastTarget	struct CallSocketHandler_args *		1073367	0					
ANR	1073378	Identifier	arg		1073367	1					
ANR	1073379	ExpressionStatement	"daemonCore -> CallSocketHandler_worker ( args -> i , args -> default_to_HandleCommand , args -> accepted_sock )"	3762:1:113245:113357	1073367	1	True				
ANR	1073380	CallExpression	"daemonCore -> CallSocketHandler_worker ( args -> i , args -> default_to_HandleCommand , args -> accepted_sock )"		1073367	0					
ANR	1073381	Callee	daemonCore -> CallSocketHandler_worker		1073367	0					
ANR	1073382	PtrMemberAccess	daemonCore -> CallSocketHandler_worker		1073367	0					
ANR	1073383	Identifier	daemonCore		1073367	0					
ANR	1073384	Identifier	CallSocketHandler_worker		1073367	1					
ANR	1073385	ArgumentList	args -> i		1073367	1					
ANR	1073386	Argument	args -> i		1073367	0					
ANR	1073387	PtrMemberAccess	args -> i		1073367	0					
ANR	1073388	Identifier	args		1073367	0					
ANR	1073389	Identifier	i		1073367	1					
ANR	1073390	Argument	args -> default_to_HandleCommand		1073367	1					
ANR	1073391	PtrMemberAccess	args -> default_to_HandleCommand		1073367	0					
ANR	1073392	Identifier	args		1073367	0					
ANR	1073393	Identifier	default_to_HandleCommand		1073367	1					
ANR	1073394	Argument	args -> accepted_sock		1073367	2					
ANR	1073395	PtrMemberAccess	args -> accepted_sock		1073367	0					
ANR	1073396	Identifier	args		1073367	0					
ANR	1073397	Identifier	accepted_sock		1073367	1					
ANR	1073398	Statement	delete	3766:1:113361:113366	1073367	2	True				
ANR	1073399	ExpressionStatement	args	3766:8:113368:113372	1073367	3	True				
ANR	1073400	Identifier	args		1073367	0					
ANR	1073401	ReturnType	void		1073367	1					
ANR	1073402	Identifier	DaemonCore :: CallSocketHandler_worker_demarshall		1073367	2					
ANR	1073403	ParameterList	void * arg		1073367	3					
ANR	1073404	Parameter	void * arg	3758:48:113153:113161	1073367	0	True				
ANR	1073405	ParameterType	void *		1073367	0					
ANR	1073406	Identifier	arg		1073367	1					
ANR	1073407	CFGEntryNode	ENTRY		1073367		True				
ANR	1073408	CFGExitNode	EXIT		1073367		True				
ANR	1073409	Symbol	args		1073367						
ANR	1073410	Symbol	args -> default_to_HandleCommand		1073367						
ANR	1073411	Symbol	args -> i		1073367						
ANR	1073412	Symbol	arg		1073367						
ANR	1073413	Symbol	daemonCore		1073367						
ANR	1073414	Symbol	* args		1073367						
ANR	1073415	Symbol	args -> accepted_sock		1073367						
ANR	1073416	Function	DaemonCore :: CallSocketHandler_worker	3769:0:113377:116057							
ANR	1073417	FunctionDef	"DaemonCore :: CallSocketHandler_worker (int i , bool default_to_HandleCommand , Stream * asock)"		1073416	0					
ANR	1073418	CompoundStatement		3771:0:113474:116057	1073416	0					
ANR	1073419	IdentifierDeclStatement	char * handlerName = NULL ;	3772:1:113477:113501	1073416	0	True				
ANR	1073420	IdentifierDecl	* handlerName = NULL		1073416	0					
ANR	1073421	IdentifierDeclType	char *		1073416	0					
ANR	1073422	Identifier	handlerName		1073416	1					
ANR	1073423	AssignmentExpression	* handlerName = NULL		1073416	2		=			
ANR	1073424	Identifier	NULL		1073416	0					
ANR	1073425	Identifier	NULL		1073416	1					
ANR	1073426	IdentifierDeclStatement	int result = 0 ;	3773:1:113504:113516	1073416	1	True				
ANR	1073427	IdentifierDecl	result = 0		1073416	0					
ANR	1073428	IdentifierDeclType	int		1073416	0					
ANR	1073429	Identifier	result		1073416	1					
ANR	1073430	AssignmentExpression	result = 0		1073416	2		=			
ANR	1073431	Identifier	result		1073416	0					
ANR	1073432	PrimaryExpression	0		1073416	1					
ANR	1073433	ExpressionStatement	curr_dataptr = & ( ( * sockTable ) [ i ] . data_ptr )	3782:1:113792:113835	1073416	2	True				
ANR	1073434	AssignmentExpression	curr_dataptr = & ( ( * sockTable ) [ i ] . data_ptr )		1073416	0		=			
ANR	1073435	Identifier	curr_dataptr		1073416	0					
ANR	1073436	UnaryOperationExpression	& ( ( * sockTable ) [ i ] . data_ptr )		1073416	1					
ANR	1073437	UnaryOperator	&		1073416	0					
ANR	1073438	MemberAccess	( * sockTable ) [ i ] . data_ptr		1073416	1					
ANR	1073439	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073440	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073441	UnaryOperator	*		1073416	0					
ANR	1073442	Identifier	sockTable		1073416	1					
ANR	1073443	Identifier	i		1073416	1					
ANR	1073444	Identifier	data_ptr		1073416	1					
ANR	1073445	IfStatement	if ( ( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp )		1073416	3					
ANR	1073446	Condition	( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp	3785:6:113863:113915	1073416	0	True				
ANR	1073447	OrExpression	( * sockTable ) [ i ] . handler || ( * sockTable ) [ i ] . handlercpp		1073416	0		||			
ANR	1073448	MemberAccess	( * sockTable ) [ i ] . handler		1073416	0					
ANR	1073449	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073450	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073451	UnaryOperator	*		1073416	0					
ANR	1073452	Identifier	sockTable		1073416	1					
ANR	1073453	Identifier	i		1073416	1					
ANR	1073454	Identifier	handler		1073416	1					
ANR	1073455	MemberAccess	( * sockTable ) [ i ] . handlercpp		1073416	1					
ANR	1073456	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073457	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073458	UnaryOperator	*		1073416	0					
ANR	1073459	Identifier	sockTable		1073416	1					
ANR	1073460	Identifier	i		1073416	1					
ANR	1073461	Identifier	handlercpp		1073416	1					
ANR	1073462	CompoundStatement		37:2:1156:1226	1073416	1					
ANR	1073463	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Socket <%s>\\n"" , ( * sockTable ) [ i ] . handler_descrip , ( * sockTable ) [ i ] . iosock_descrip )"	3787:3:113926:114069	1073416	0	True				
ANR	1073464	CallExpression	"dprintf ( D_DAEMONCORE , ""Calling Handler <%s> for Socket <%s>\\n"" , ( * sockTable ) [ i ] . handler_descrip , ( * sockTable ) [ i ] . iosock_descrip )"		1073416	0					
ANR	1073465	Callee	dprintf		1073416	0					
ANR	1073466	Identifier	dprintf		1073416	0					
ANR	1073467	ArgumentList	D_DAEMONCORE		1073416	1					
ANR	1073468	Argument	D_DAEMONCORE		1073416	0					
ANR	1073469	Identifier	D_DAEMONCORE		1073416	0					
ANR	1073470	Argument	"""Calling Handler <%s> for Socket <%s>\\n"""		1073416	1					
ANR	1073471	PrimaryExpression	"""Calling Handler <%s> for Socket <%s>\\n"""		1073416	0					
ANR	1073472	Argument	( * sockTable ) [ i ] . handler_descrip		1073416	2					
ANR	1073473	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1073416	0					
ANR	1073474	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073475	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073476	UnaryOperator	*		1073416	0					
ANR	1073477	Identifier	sockTable		1073416	1					
ANR	1073478	Identifier	i		1073416	1					
ANR	1073479	Identifier	handler_descrip		1073416	1					
ANR	1073480	Argument	( * sockTable ) [ i ] . iosock_descrip		1073416	3					
ANR	1073481	MemberAccess	( * sockTable ) [ i ] . iosock_descrip		1073416	0					
ANR	1073482	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073483	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073484	UnaryOperator	*		1073416	0					
ANR	1073485	Identifier	sockTable		1073416	1					
ANR	1073486	Identifier	i		1073416	1					
ANR	1073487	Identifier	iosock_descrip		1073416	1					
ANR	1073488	ExpressionStatement	handlerName = strdup ( ( * sockTable ) [ i ] . handler_descrip )	3791:3:114074:114127	1073416	1	True				
ANR	1073489	AssignmentExpression	handlerName = strdup ( ( * sockTable ) [ i ] . handler_descrip )		1073416	0		=			
ANR	1073490	Identifier	handlerName		1073416	0					
ANR	1073491	CallExpression	strdup ( ( * sockTable ) [ i ] . handler_descrip )		1073416	1					
ANR	1073492	Callee	strdup		1073416	0					
ANR	1073493	Identifier	strdup		1073416	0					
ANR	1073494	ArgumentList	( * sockTable ) [ i ] . handler_descrip		1073416	1					
ANR	1073495	Argument	( * sockTable ) [ i ] . handler_descrip		1073416	0					
ANR	1073496	MemberAccess	( * sockTable ) [ i ] . handler_descrip		1073416	0					
ANR	1073497	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073498	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073499	UnaryOperator	*		1073416	0					
ANR	1073500	Identifier	sockTable		1073416	1					
ANR	1073501	Identifier	i		1073416	1					
ANR	1073502	Identifier	handler_descrip		1073416	1					
ANR	1073503	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling Handler <%s> (%d)\\n"" , handlerName , i )"	3792:3:114132:114196	1073416	2	True				
ANR	1073504	CallExpression	"dprintf ( D_COMMAND , ""Calling Handler <%s> (%d)\\n"" , handlerName , i )"		1073416	0					
ANR	1073505	Callee	dprintf		1073416	0					
ANR	1073506	Identifier	dprintf		1073416	0					
ANR	1073507	ArgumentList	D_COMMAND		1073416	1					
ANR	1073508	Argument	D_COMMAND		1073416	0					
ANR	1073509	Identifier	D_COMMAND		1073416	0					
ANR	1073510	Argument	"""Calling Handler <%s> (%d)\\n"""		1073416	1					
ANR	1073511	PrimaryExpression	"""Calling Handler <%s> (%d)\\n"""		1073416	0					
ANR	1073512	Argument	handlerName		1073416	2					
ANR	1073513	Identifier	handlerName		1073416	0					
ANR	1073514	Argument	i		1073416	3					
ANR	1073515	Identifier	i		1073416	0					
ANR	1073516	IdentifierDeclStatement	UtcTime handler_start_time ;	3794:2:114201:114227	1073416	3	True				
ANR	1073517	IdentifierDecl	handler_start_time		1073416	0					
ANR	1073518	IdentifierDeclType	UtcTime		1073416	0					
ANR	1073519	Identifier	handler_start_time		1073416	1					
ANR	1073520	ExpressionStatement	handler_start_time . getTime ( )	3795:2:114231:114259	1073416	4	True				
ANR	1073521	CallExpression	handler_start_time . getTime ( )		1073416	0					
ANR	1073522	Callee	handler_start_time . getTime		1073416	0					
ANR	1073523	MemberAccess	handler_start_time . getTime		1073416	0					
ANR	1073524	Identifier	handler_start_time		1073416	0					
ANR	1073525	Identifier	getTime		1073416	1					
ANR	1073526	ArgumentList			1073416	1					
ANR	1073527	IfStatement	if ( ( * sockTable ) [ i ] . handler )		1073416	5					
ANR	1073528	Condition	( * sockTable ) [ i ] . handler	3797:6:114268:114290	1073416	0	True				
ANR	1073529	MemberAccess	( * sockTable ) [ i ] . handler		1073416	0					
ANR	1073530	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073531	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073532	UnaryOperator	*		1073416	0					
ANR	1073533	Identifier	sockTable		1073416	1					
ANR	1073534	Identifier	i		1073416	1					
ANR	1073535	Identifier	handler		1073416	1					
ANR	1073536	CompoundStatement		27:32:819:819	1073416	1					
ANR	1073537	ExpressionStatement	"result = ( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"	3799:2:114316:114404	1073416	0	True				
ANR	1073538	AssignmentExpression	"result = ( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"		1073416	0		=			
ANR	1073539	Identifier	result		1073416	0					
ANR	1073540	CallExpression	"( * ( ( * sockTable ) [ i ] . handler ) ) ( ( * sockTable ) [ i ] . service , ( * sockTable ) [ i ] . iosock )"		1073416	1					
ANR	1073541	Callee	* ( ( * sockTable ) [ i ] . handler )		1073416	0					
ANR	1073542	UnaryOperationExpression	* ( ( * sockTable ) [ i ] . handler )		1073416	0					
ANR	1073543	UnaryOperator	*		1073416	0					
ANR	1073544	MemberAccess	( * sockTable ) [ i ] . handler		1073416	1					
ANR	1073545	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073546	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073547	UnaryOperator	*		1073416	0					
ANR	1073548	Identifier	sockTable		1073416	1					
ANR	1073549	Identifier	i		1073416	1					
ANR	1073550	Identifier	handler		1073416	1					
ANR	1073551	ArgumentList	( * sockTable ) [ i ] . service		1073416	1					
ANR	1073552	Argument	( * sockTable ) [ i ] . service		1073416	0					
ANR	1073553	MemberAccess	( * sockTable ) [ i ] . service		1073416	0					
ANR	1073554	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073555	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073556	UnaryOperator	*		1073416	0					
ANR	1073557	Identifier	sockTable		1073416	1					
ANR	1073558	Identifier	i		1073416	1					
ANR	1073559	Identifier	service		1073416	1					
ANR	1073560	Argument	( * sockTable ) [ i ] . iosock		1073416	1					
ANR	1073561	MemberAccess	( * sockTable ) [ i ] . iosock		1073416	0					
ANR	1073562	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073563	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073564	UnaryOperator	*		1073416	0					
ANR	1073565	Identifier	sockTable		1073416	1					
ANR	1073566	Identifier	i		1073416	1					
ANR	1073567	Identifier	iosock		1073416	1					
ANR	1073568	ElseStatement	else		1073416	0					
ANR	1073569	IfStatement	if ( ( * sockTable ) [ i ] . handlercpp )		1073416	0					
ANR	1073570	Condition	( * sockTable ) [ i ] . handlercpp	3800:13:114419:114444	1073416	0	True				
ANR	1073571	MemberAccess	( * sockTable ) [ i ] . handlercpp		1073416	0					
ANR	1073572	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073573	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073574	UnaryOperator	*		1073416	0					
ANR	1073575	Identifier	sockTable		1073416	1					
ANR	1073576	Identifier	i		1073416	1					
ANR	1073577	Identifier	handlercpp		1073416	1					
ANR	1073578	CompoundStatement		30:42:973:973	1073416	1					
ANR	1073579	Statement	result	3802:2:114472:114477	1073416	0	True				
ANR	1073580	Statement	=	3802:9:114479:114479	1073416	1	True				
ANR	1073581	Statement	(	3802:11:114481:114481	1073416	2	True				
ANR	1073582	Statement	(	3802:12:114482:114482	1073416	3	True				
ANR	1073583	Statement	*	3802:13:114483:114483	1073416	4	True				
ANR	1073584	Statement	sockTable	3802:14:114484:114492	1073416	5	True				
ANR	1073585	Statement	)	3802:23:114493:114493	1073416	6	True				
ANR	1073586	Statement	[	3802:24:114494:114494	1073416	7	True				
ANR	1073587	Statement	i	3802:25:114495:114495	1073416	8	True				
ANR	1073588	Statement	]	3802:26:114496:114496	1073416	9	True				
ANR	1073589	Statement	.	3802:27:114497:114497	1073416	10	True				
ANR	1073590	Statement	service	3802:28:114498:114504	1073416	11	True				
ANR	1073591	Statement	->*	3802:35:114505:114507	1073416	12	True				
ANR	1073592	Statement	(	3802:38:114508:114508	1073416	13	True				
ANR	1073593	Statement	(	3802:40:114510:114510	1073416	14	True				
ANR	1073594	Statement	*	3802:41:114511:114511	1073416	15	True				
ANR	1073595	Statement	sockTable	3802:42:114512:114520	1073416	16	True				
ANR	1073596	Statement	)	3802:51:114521:114521	1073416	17	True				
ANR	1073597	Statement	[	3802:52:114522:114522	1073416	18	True				
ANR	1073598	Statement	i	3802:53:114523:114523	1073416	19	True				
ANR	1073599	Statement	]	3802:54:114524:114524	1073416	20	True				
ANR	1073600	Statement	.	3802:55:114525:114525	1073416	21	True				
ANR	1073601	Statement	handlercpp	3802:56:114526:114535	1073416	22	True				
ANR	1073602	Statement	)	3802:66:114536:114536	1073416	23	True				
ANR	1073603	Statement	)	3802:67:114537:114537	1073416	24	True				
ANR	1073604	ExpressionStatement	( * sockTable ) [ i ] . iosock	3802:68:114538:114562	1073416	25	True				
ANR	1073605	MemberAccess	( * sockTable ) [ i ] . iosock		1073416	0					
ANR	1073606	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073607	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073608	UnaryOperator	*		1073416	0					
ANR	1073609	Identifier	sockTable		1073416	1					
ANR	1073610	Identifier	i		1073416	1					
ANR	1073611	Identifier	iosock		1073416	1					
ANR	1073612	IdentifierDeclStatement	UtcTime handler_stop_time ;	3805:2:114571:114596	1073416	6	True				
ANR	1073613	IdentifierDecl	handler_stop_time		1073416	0					
ANR	1073614	IdentifierDeclType	UtcTime		1073416	0					
ANR	1073615	Identifier	handler_stop_time		1073416	1					
ANR	1073616	ExpressionStatement	handler_stop_time . getTime ( )	3806:2:114600:114627	1073416	7	True				
ANR	1073617	CallExpression	handler_stop_time . getTime ( )		1073416	0					
ANR	1073618	Callee	handler_stop_time . getTime		1073416	0					
ANR	1073619	MemberAccess	handler_stop_time . getTime		1073416	0					
ANR	1073620	Identifier	handler_stop_time		1073416	0					
ANR	1073621	Identifier	getTime		1073416	1					
ANR	1073622	ArgumentList			1073416	1					
ANR	1073623	IdentifierDeclStatement	float handler_time = handler_stop_time . difference ( & handler_start_time ) ;	3807:2:114631:114701	1073416	8	True				
ANR	1073624	IdentifierDecl	handler_time = handler_stop_time . difference ( & handler_start_time )		1073416	0					
ANR	1073625	IdentifierDeclType	float		1073416	0					
ANR	1073626	Identifier	handler_time		1073416	1					
ANR	1073627	AssignmentExpression	handler_time = handler_stop_time . difference ( & handler_start_time )		1073416	2		=			
ANR	1073628	Identifier	handler_time		1073416	0					
ANR	1073629	CallExpression	handler_stop_time . difference ( & handler_start_time )		1073416	1					
ANR	1073630	Callee	handler_stop_time . difference		1073416	0					
ANR	1073631	MemberAccess	handler_stop_time . difference		1073416	0					
ANR	1073632	Identifier	handler_stop_time		1073416	0					
ANR	1073633	Identifier	difference		1073416	1					
ANR	1073634	ArgumentList	& handler_start_time		1073416	1					
ANR	1073635	Argument	& handler_start_time		1073416	0					
ANR	1073636	UnaryOperationExpression	& handler_start_time		1073416	0					
ANR	1073637	UnaryOperator	&		1073416	0					
ANR	1073638	Identifier	handler_start_time		1073416	1					
ANR	1073639	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from Handler <%s> %.4fs\\n"" , handlerName , handler_time )"	3809:2:114706:114787	1073416	9	True				
ANR	1073640	CallExpression	"dprintf ( D_COMMAND , ""Return from Handler <%s> %.4fs\\n"" , handlerName , handler_time )"		1073416	0					
ANR	1073641	Callee	dprintf		1073416	0					
ANR	1073642	Identifier	dprintf		1073416	0					
ANR	1073643	ArgumentList	D_COMMAND		1073416	1					
ANR	1073644	Argument	D_COMMAND		1073416	0					
ANR	1073645	Identifier	D_COMMAND		1073416	0					
ANR	1073646	Argument	"""Return from Handler <%s> %.4fs\\n"""		1073416	1					
ANR	1073647	PrimaryExpression	"""Return from Handler <%s> %.4fs\\n"""		1073416	0					
ANR	1073648	Argument	handlerName		1073416	2					
ANR	1073649	Identifier	handlerName		1073416	0					
ANR	1073650	Argument	handler_time		1073416	3					
ANR	1073651	Identifier	handler_time		1073416	0					
ANR	1073652	ExpressionStatement	free ( handlerName )	3810:2:114791:114808	1073416	10	True				
ANR	1073653	CallExpression	free ( handlerName )		1073416	0					
ANR	1073654	Callee	free		1073416	0					
ANR	1073655	Identifier	free		1073416	0					
ANR	1073656	ArgumentList	handlerName		1073416	1					
ANR	1073657	Argument	handlerName		1073416	0					
ANR	1073658	Identifier	handlerName		1073416	0					
ANR	1073659	ElseStatement	else		1073416	0					
ANR	1073660	IfStatement	if ( default_to_HandleCommand )		1073416	0					
ANR	1073661	Condition	default_to_HandleCommand	3812:10:114823:114846	1073416	0	True				
ANR	1073662	Identifier	default_to_HandleCommand		1073416	0					
ANR	1073663	CompoundStatement		42:37:1375:1375	1073416	1					
ANR	1073664	ExpressionStatement	"result = HandleReq ( i , asock )"	3816:2:114990:115017	1073416	0	True				
ANR	1073665	AssignmentExpression	"result = HandleReq ( i , asock )"		1073416	0		=			
ANR	1073666	Identifier	result		1073416	0					
ANR	1073667	CallExpression	"HandleReq ( i , asock )"		1073416	1					
ANR	1073668	Callee	HandleReq		1073416	0					
ANR	1073669	Identifier	HandleReq		1073416	0					
ANR	1073670	ArgumentList	i		1073416	1					
ANR	1073671	Argument	i		1073416	0					
ANR	1073672	Identifier	i		1073416	0					
ANR	1073673	Argument	asock		1073416	1					
ANR	1073674	Identifier	asock		1073416	0					
ANR	1073675	ElseStatement	else		1073416	0					
ANR	1073676	CompoundStatement		48:6:1553:1553	1073416	0					
ANR	1073677	ExpressionStatement	result = FALSE	3822:2:115159:115173	1073416	0	True				
ANR	1073678	AssignmentExpression	result = FALSE		1073416	0		=			
ANR	1073679	Identifier	result		1073416	0					
ANR	1073680	Identifier	FALSE		1073416	1					
ANR	1073681	ExpressionStatement	CheckPrivState ( )	3826:1:115225:115241	1073416	4	True				
ANR	1073682	CallExpression	CheckPrivState ( )		1073416	0					
ANR	1073683	Callee	CheckPrivState		1073416	0					
ANR	1073684	Identifier	CheckPrivState		1073416	0					
ANR	1073685	ArgumentList			1073416	1					
ANR	1073686	ExpressionStatement	curr_dataptr = NULL	3829:1:115269:115288	1073416	5	True				
ANR	1073687	AssignmentExpression	curr_dataptr = NULL		1073416	0		=			
ANR	1073688	Identifier	curr_dataptr		1073416	0					
ANR	1073689	Identifier	NULL		1073416	1					
ANR	1073690	IfStatement	if ( result != KEEP_STREAM )		1073416	6					
ANR	1073691	Condition	result != KEEP_STREAM	3834:6:115417:115437	1073416	0	True				
ANR	1073692	EqualityExpression	result != KEEP_STREAM		1073416	0		!=			
ANR	1073693	Identifier	result		1073416	0					
ANR	1073694	Identifier	KEEP_STREAM		1073416	1					
ANR	1073695	CompoundStatement		64:30:1966:1966	1073416	1					
ANR	1073696	Statement	delete	3836:2:115475:115480	1073416	0	True				
ANR	1073697	ExpressionStatement	( * sockTable ) [ i ] . iosock	3836:9:115482:115504	1073416	1	True				
ANR	1073698	MemberAccess	( * sockTable ) [ i ] . iosock		1073416	0					
ANR	1073699	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073700	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073701	UnaryOperator	*		1073416	0					
ANR	1073702	Identifier	sockTable		1073416	1					
ANR	1073703	Identifier	i		1073416	1					
ANR	1073704	Identifier	iosock		1073416	1					
ANR	1073705	ExpressionStatement	Cancel_Socket ( ( * sockTable ) [ i ] . iosock )	3838:2:115540:115579	1073416	2	True				
ANR	1073706	CallExpression	Cancel_Socket ( ( * sockTable ) [ i ] . iosock )		1073416	0					
ANR	1073707	Callee	Cancel_Socket		1073416	0					
ANR	1073708	Identifier	Cancel_Socket		1073416	0					
ANR	1073709	ArgumentList	( * sockTable ) [ i ] . iosock		1073416	1					
ANR	1073710	Argument	( * sockTable ) [ i ] . iosock		1073416	0					
ANR	1073711	MemberAccess	( * sockTable ) [ i ] . iosock		1073416	0					
ANR	1073712	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073713	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073714	UnaryOperator	*		1073416	0					
ANR	1073715	Identifier	sockTable		1073416	1					
ANR	1073716	Identifier	i		1073416	1					
ANR	1073717	Identifier	iosock		1073416	1					
ANR	1073718	ElseStatement	else		1073416	0					
ANR	1073719	CompoundStatement		69:8:2114:2114	1073416	0					
ANR	1073720	IfStatement	if ( ( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( ) )		1073416	0					
ANR	1073721	Condition	( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )	3844:7:115804:115916	1073416	0	True				
ANR	1073722	AndExpression	( * sockTable ) [ i ] . servicing_tid && ( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		1073416	0		&&			
ANR	1073723	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1073416	0					
ANR	1073724	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073725	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073726	UnaryOperator	*		1073416	0					
ANR	1073727	Identifier	sockTable		1073416	1					
ANR	1073728	Identifier	i		1073416	1					
ANR	1073729	Identifier	servicing_tid		1073416	1					
ANR	1073730	EqualityExpression	( * sockTable ) [ i ] . servicing_tid == CondorThreads :: get_handle ( ) -> get_tid ( )		1073416	1		==			
ANR	1073731	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1073416	0					
ANR	1073732	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073733	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073734	UnaryOperator	*		1073416	0					
ANR	1073735	Identifier	sockTable		1073416	1					
ANR	1073736	Identifier	i		1073416	1					
ANR	1073737	Identifier	servicing_tid		1073416	1					
ANR	1073738	CallExpression	CondorThreads :: get_handle ( ) -> get_tid ( )		1073416	1					
ANR	1073739	Callee	CondorThreads :: get_handle ( ) -> get_tid		1073416	0					
ANR	1073740	PtrMemberAccess	CondorThreads :: get_handle ( ) -> get_tid		1073416	0					
ANR	1073741	CallExpression	CondorThreads :: get_handle ( )		1073416	0					
ANR	1073742	Callee	CondorThreads :: get_handle		1073416	0					
ANR	1073743	Identifier	CondorThreads :: get_handle		1073416	0					
ANR	1073744	ArgumentList			1073416	1					
ANR	1073745	Identifier	get_tid		1073416	1					
ANR	1073746	ArgumentList			1073416	1					
ANR	1073747	CompoundStatement		77:2:2448:2448	1073416	1					
ANR	1073748	ExpressionStatement	( * sockTable ) [ i ] . servicing_tid = 0	3848:4:115929:115962	1073416	0	True				
ANR	1073749	AssignmentExpression	( * sockTable ) [ i ] . servicing_tid = 0		1073416	0		=			
ANR	1073750	MemberAccess	( * sockTable ) [ i ] . servicing_tid		1073416	0					
ANR	1073751	ArrayIndexing	( * sockTable ) [ i ]		1073416	0					
ANR	1073752	UnaryOperationExpression	* sockTable		1073416	0					
ANR	1073753	UnaryOperator	*		1073416	0					
ANR	1073754	Identifier	sockTable		1073416	1					
ANR	1073755	Identifier	i		1073416	1					
ANR	1073756	Identifier	servicing_tid		1073416	1					
ANR	1073757	PrimaryExpression	0		1073416	1					
ANR	1073758	ExpressionStatement	daemonCore -> Wake_up_select ( )	3850:4:116019:116047	1073416	1	True				
ANR	1073759	CallExpression	daemonCore -> Wake_up_select ( )		1073416	0					
ANR	1073760	Callee	daemonCore -> Wake_up_select		1073416	0					
ANR	1073761	PtrMemberAccess	daemonCore -> Wake_up_select		1073416	0					
ANR	1073762	Identifier	daemonCore		1073416	0					
ANR	1073763	Identifier	Wake_up_select		1073416	1					
ANR	1073764	ArgumentList			1073416	1					
ANR	1073765	ReturnType	void		1073416	1					
ANR	1073766	Identifier	DaemonCore :: CallSocketHandler_worker		1073416	2					
ANR	1073767	ParameterList	"int i , bool default_to_HandleCommand , Stream * asock"		1073416	3					
ANR	1073768	Parameter	int i	3770:38:113420:113424	1073416	0	True				
ANR	1073769	ParameterType	int		1073416	0					
ANR	1073770	Identifier	i		1073416	1					
ANR	1073771	Parameter	bool default_to_HandleCommand	3770:45:113427:113455	1073416	1	True				
ANR	1073772	ParameterType	bool		1073416	0					
ANR	1073773	Identifier	default_to_HandleCommand		1073416	1					
ANR	1073774	Parameter	Stream * asock	3770:76:113458:113470	1073416	2	True				
ANR	1073775	ParameterType	Stream *		1073416	0					
ANR	1073776	Identifier	asock		1073416	1					
ANR	1073777	CFGEntryNode	ENTRY		1073416		True				
ANR	1073778	CFGExitNode	EXIT		1073416		True				
ANR	1073779	Symbol	& ( * sockTable ) [ i ] . data_ptr		1073416						
ANR	1073780	Symbol	handler_time		1073416						
ANR	1073781	Symbol	handlerName		1073416						
ANR	1073782	Symbol	* * sockTable		1073416						
ANR	1073783	Symbol	curr_dataptr		1073416						
ANR	1073784	Symbol	( * sockTable ) [ i ] . handlercpp		1073416						
ANR	1073785	Symbol	( * sockTable ) [ i ] . handler_descrip		1073416						
ANR	1073786	Symbol	KEEP_STREAM		1073416						
ANR	1073787	Symbol	result		1073416						
ANR	1073788	Symbol	( * sockTable ) [ i ] . service		1073416						
ANR	1073789	Symbol	( * sockTable ) [ i ] . iosock_descrip		1073416						
ANR	1073790	Symbol	& handler_start_time		1073416						
ANR	1073791	Symbol	daemonCore		1073416						
ANR	1073792	Symbol	( * sockTable ) [ i ] . iosock		1073416						
ANR	1073793	Symbol	* CondorThreads :: get_handle		1073416						
ANR	1073794	Symbol	CondorThreads :: get_handle		1073416						
ANR	1073795	Symbol	D_COMMAND		1073416						
ANR	1073796	Symbol	handler_stop_time . difference		1073416						
ANR	1073797	Symbol	* * i		1073416						
ANR	1073798	Symbol	NULL		1073416						
ANR	1073799	Symbol	handler_start_time		1073416						
ANR	1073800	Symbol	* * * sockTable		1073416						
ANR	1073801	Symbol	D_DAEMONCORE		1073416						
ANR	1073802	Symbol	* ( * sockTable ) [ i ] . handler		1073416						
ANR	1073803	Symbol	handler_stop_time		1073416						
ANR	1073804	Symbol	sockTable		1073416						
ANR	1073805	Symbol	i		1073416						
ANR	1073806	Symbol	asock		1073416						
ANR	1073807	Symbol	HandleReq		1073416						
ANR	1073808	Symbol	* i		1073416						
ANR	1073809	Symbol	CondorThreads :: get_handle ( ) -> get_tid		1073416						
ANR	1073810	Symbol	* sockTable		1073416						
ANR	1073811	Symbol	* ( ( * sockTable ) [ i ] . handler )		1073416						
ANR	1073812	Symbol	( * sockTable ) [ i ] . servicing_tid		1073416						
ANR	1073813	Symbol	FALSE		1073416						
ANR	1073814	Symbol	strdup		1073416						
ANR	1073815	Symbol	default_to_HandleCommand		1073416						
ANR	1073816	Symbol	( * sockTable ) [ i ] . handler		1073416						
ANR	1073817	Function	DaemonCore :: CommandNumToTableIndex	3855:0:116060:116564							
ANR	1073818	FunctionDef	"DaemonCore :: CommandNumToTableIndex (int cmd , int * cmd_index)"		1073817	0					
ANR	1073819	CompoundStatement		3857:0:116124:116564	1073817	0					
ANR	1073820	IfStatement	if ( cmd < 0 )		1073817	0					
ANR	1073821	Condition	cmd < 0	3859:6:116160:116166	1073817	0	True				
ANR	1073822	RelationalExpression	cmd < 0		1073817	0		<			
ANR	1073823	Identifier	cmd		1073817	0					
ANR	1073824	PrimaryExpression	0		1073817	1					
ANR	1073825	ExpressionStatement	* cmd_index = - cmd % maxCommand	3860:2:116172:116202	1073817	1	True				
ANR	1073826	AssignmentExpression	* cmd_index = - cmd % maxCommand		1073817	0		=			
ANR	1073827	UnaryOperationExpression	* cmd_index		1073817	0					
ANR	1073828	UnaryOperator	*		1073817	0					
ANR	1073829	Identifier	cmd_index		1073817	1					
ANR	1073830	MultiplicativeExpression	- cmd % maxCommand		1073817	1		%			
ANR	1073831	UnaryOperationExpression	- cmd		1073817	0					
ANR	1073832	UnaryOperator	-		1073817	0					
ANR	1073833	Identifier	cmd		1073817	1					
ANR	1073834	Identifier	maxCommand		1073817	1					
ANR	1073835	ElseStatement	else		1073817	0					
ANR	1073836	ExpressionStatement	* cmd_index = cmd % maxCommand	3862:2:116212:116241	1073817	0	True				
ANR	1073837	AssignmentExpression	* cmd_index = cmd % maxCommand		1073817	0		=			
ANR	1073838	UnaryOperationExpression	* cmd_index		1073817	0					
ANR	1073839	UnaryOperator	*		1073817	0					
ANR	1073840	Identifier	cmd_index		1073817	1					
ANR	1073841	MultiplicativeExpression	cmd % maxCommand		1073817	1		%			
ANR	1073842	Identifier	cmd		1073817	0					
ANR	1073843	Identifier	maxCommand		1073817	1					
ANR	1073844	IfStatement	if ( comTable [ * cmd_index ] . num == cmd )		1073817	1					
ANR	1073845	Condition	comTable [ * cmd_index ] . num == cmd	3864:5:116249:116279	1073817	0	True				
ANR	1073846	EqualityExpression	comTable [ * cmd_index ] . num == cmd		1073817	0		==			
ANR	1073847	MemberAccess	comTable [ * cmd_index ] . num		1073817	0					
ANR	1073848	ArrayIndexing	comTable [ * cmd_index ]		1073817	0					
ANR	1073849	Identifier	comTable		1073817	0					
ANR	1073850	UnaryOperationExpression	* cmd_index		1073817	1					
ANR	1073851	UnaryOperator	*		1073817	0					
ANR	1073852	Identifier	cmd_index		1073817	1					
ANR	1073853	Identifier	num		1073817	1					
ANR	1073854	Identifier	cmd		1073817	1					
ANR	1073855	CompoundStatement		8:38:157:157	1073817	1					
ANR	1073856	ReturnStatement	return true ;	3866:2:116324:116335	1073817	0	True				
ANR	1073857	Identifier	true		1073817	0					
ANR	1073858	IdentifierDeclStatement	int j ;	3870:1:116383:116388	1073817	2	True				
ANR	1073859	IdentifierDecl	j		1073817	0					
ANR	1073860	IdentifierDeclType	int		1073817	0					
ANR	1073861	Identifier	j		1073817	1					
ANR	1073862	ForStatement	for ( j = ( * cmd_index + 1 ) % maxCommand ; j != * cmd_index ; j = ( j + 1 ) % maxCommand )		1073817	3					
ANR	1073863	ForInit	j = ( * cmd_index + 1 ) % maxCommand ;	3871:6:116396:116429	1073817	0	True				
ANR	1073864	AssignmentExpression	j = ( * cmd_index + 1 ) % maxCommand		1073817	0		=			
ANR	1073865	Identifier	j		1073817	0					
ANR	1073866	MultiplicativeExpression	( * cmd_index + 1 ) % maxCommand		1073817	1		%			
ANR	1073867	AdditiveExpression	* cmd_index + 1		1073817	0		+			
ANR	1073868	UnaryOperationExpression	* cmd_index		1073817	0					
ANR	1073869	UnaryOperator	*		1073817	0					
ANR	1073870	Identifier	cmd_index		1073817	1					
ANR	1073871	PrimaryExpression	1		1073817	1					
ANR	1073872	Identifier	maxCommand		1073817	1					
ANR	1073873	Condition	j != * cmd_index	3871:41:116431:116445	1073817	1	True				
ANR	1073874	EqualityExpression	j != * cmd_index		1073817	0		!=			
ANR	1073875	Identifier	j		1073817	0					
ANR	1073876	UnaryOperationExpression	* cmd_index		1073817	1					
ANR	1073877	UnaryOperator	*		1073817	0					
ANR	1073878	Identifier	cmd_index		1073817	1					
ANR	1073879	AssignmentExpression	j = ( j + 1 ) % maxCommand	3871:58:116448:116471	1073817	2	True	=			
ANR	1073880	Identifier	j		1073817	0					
ANR	1073881	MultiplicativeExpression	( j + 1 ) % maxCommand		1073817	1		%			
ANR	1073882	AdditiveExpression	j + 1		1073817	0		+			
ANR	1073883	Identifier	j		1073817	0					
ANR	1073884	PrimaryExpression	1		1073817	1					
ANR	1073885	Identifier	maxCommand		1073817	1					
ANR	1073886	CompoundStatement		15:84:349:349	1073817	3					
ANR	1073887	IfStatement	if ( comTable [ j ] . num == cmd )		1073817	0					
ANR	1073888	Condition	comTable [ j ] . num == cmd	3872:5:116481:116502	1073817	0	True				
ANR	1073889	EqualityExpression	comTable [ j ] . num == cmd		1073817	0		==			
ANR	1073890	MemberAccess	comTable [ j ] . num		1073817	0					
ANR	1073891	ArrayIndexing	comTable [ j ]		1073817	0					
ANR	1073892	Identifier	comTable		1073817	0					
ANR	1073893	Identifier	j		1073817	1					
ANR	1073894	Identifier	num		1073817	1					
ANR	1073895	Identifier	cmd		1073817	1					
ANR	1073896	CompoundStatement		16:29:380:380	1073817	1					
ANR	1073897	ExpressionStatement	* cmd_index = j	3873:3:116510:116524	1073817	0	True				
ANR	1073898	AssignmentExpression	* cmd_index = j		1073817	0		=			
ANR	1073899	UnaryOperationExpression	* cmd_index		1073817	0					
ANR	1073900	UnaryOperator	*		1073817	0					
ANR	1073901	Identifier	cmd_index		1073817	1					
ANR	1073902	Identifier	j		1073817	1					
ANR	1073903	ReturnStatement	return true ;	3874:3:116529:116540	1073817	1	True				
ANR	1073904	Identifier	true		1073817	0					
ANR	1073905	ReturnStatement	return false ;	3877:1:116550:116562	1073817	4	True				
ANR	1073906	Identifier	false		1073817	0					
ANR	1073907	ReturnType	bool		1073817	1					
ANR	1073908	Identifier	DaemonCore :: CommandNumToTableIndex		1073817	2					
ANR	1073909	ParameterList	"int cmd , int * cmd_index"		1073817	3					
ANR	1073910	Parameter	int cmd	3856:35:116100:116106	1073817	0	True				
ANR	1073911	ParameterType	int		1073817	0					
ANR	1073912	Identifier	cmd		1073817	1					
ANR	1073913	Parameter	int * cmd_index	3856:43:116108:116121	1073817	1	True				
ANR	1073914	ParameterType	int *		1073817	0					
ANR	1073915	Identifier	cmd_index		1073817	1					
ANR	1073916	CFGEntryNode	ENTRY		1073817		True				
ANR	1073917	CFGExitNode	EXIT		1073817		True				
ANR	1073918	Symbol	* * cmd_index		1073817						
ANR	1073919	Symbol	* cmd_index		1073817						
ANR	1073920	Symbol	comTable [ * cmd_index ] . num		1073817						
ANR	1073921	Symbol	false		1073817						
ANR	1073922	Symbol	j		1073817						
ANR	1073923	Symbol	cmd_index		1073817						
ANR	1073924	Symbol	* comTable		1073817						
ANR	1073925	Symbol	comTable [ j ] . num		1073817						
ANR	1073926	Symbol	* j		1073817						
ANR	1073927	Symbol	comTable		1073817						
ANR	1073928	Symbol	true		1073817						
ANR	1073929	Symbol	maxCommand		1073817						
ANR	1073930	Symbol	cmd		1073817						
ANR	1073931	ClassDef	CallCommandHandlerInfo	3880:0:116567:116867							
ANR	1073932	Function	CallCommandHandlerInfo	3881:1:116600:116782							
ANR	1073933	FunctionDef	"CallCommandHandlerInfo (int req , time_t deadline , float time_spent_on_sec)"		1073932	0					
ANR	1073934	CompoundStatement		3885:1:116753:116782	1073932	0					
ANR	1073935	ExpressionStatement	m_start_time . getTime ( )	3886:2:116757:116779	1073932	0	True				
ANR	1073936	CallExpression	m_start_time . getTime ( )		1073932	0					
ANR	1073937	Callee	m_start_time . getTime		1073932	0					
ANR	1073938	MemberAccess	m_start_time . getTime		1073932	0					
ANR	1073939	Identifier	m_start_time		1073932	0					
ANR	1073940	Identifier	getTime		1073932	1					
ANR	1073941	ArgumentList			1073932	1					
ANR	1073942	Identifier	CallCommandHandlerInfo		1073932	1					
ANR	1073943	ParameterList	"int req , time_t deadline , float time_spent_on_sec"		1073932	2					
ANR	1073944	Parameter	int req	3881:24:116623:116629	1073932	0	True				
ANR	1073945	ParameterType	int		1073932	0					
ANR	1073946	Identifier	req		1073932	1					
ANR	1073947	Parameter	time_t deadline	3881:32:116631:116645	1073932	1	True				
ANR	1073948	ParameterType	time_t		1073932	0					
ANR	1073949	Identifier	deadline		1073932	1					
ANR	1073950	Parameter	float time_spent_on_sec	3881:48:116647:116669	1073932	2	True				
ANR	1073951	ParameterType	float		1073932	0					
ANR	1073952	Identifier	time_spent_on_sec		1073932	1					
ANR	1073953	CFGEntryNode	ENTRY		1073932		True				
ANR	1073954	CFGExitNode	EXIT		1073932		True				
ANR	1073955	Symbol	m_start_time		1073932						
ANR	1073956	Symbol	time_spent_on_sec		1073932						
ANR	1073957	Symbol	deadline		1073932						
ANR	1073958	Symbol	req		1073932						
ANR	1073959	DeclStmt									
ANR	1073960	Decl							int	int	m_req
ANR	1073961	DeclStmt									
ANR	1073962	Decl							time_t	time_t	m_deadline
ANR	1073963	DeclStmt									
ANR	1073964	Decl							float	float	m_time_spent_on_sec
ANR	1073965	DeclStmt									
ANR	1073966	Decl							UtcTime	UtcTime	m_start_time
ANR	1073967	Function	DaemonCore :: HandleReqPayloadReady	3894:0:116871:118134							
ANR	1073968	FunctionDef	DaemonCore :: HandleReqPayloadReady (Stream * stream)		1073967	0					
ANR	1073969	CompoundStatement		3896:0:116925:118134	1073967	0					
ANR	1073970	IdentifierDeclStatement	int result = FALSE ;	3899:1:116999:117017	1073967	0	True				
ANR	1073971	IdentifierDecl	result = FALSE		1073967	0					
ANR	1073972	IdentifierDeclType	int		1073967	0					
ANR	1073973	Identifier	result		1073967	1					
ANR	1073974	AssignmentExpression	result = FALSE		1073967	2		=			
ANR	1073975	Identifier	FALSE		1073967	0					
ANR	1073976	Identifier	FALSE		1073967	1					
ANR	1073977	IdentifierDeclStatement	CallCommandHandlerInfo * callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( ) ;	3900:1:117020:117098	1073967	1	True				
ANR	1073978	IdentifierDecl	* callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( )		1073967	0					
ANR	1073979	IdentifierDeclType	CallCommandHandlerInfo *		1073967	0					
ANR	1073980	Identifier	callback_info		1073967	1					
ANR	1073981	AssignmentExpression	* callback_info = ( CallCommandHandlerInfo * ) GetDataPtr ( )		1073967	2		=			
ANR	1073982	Identifier	callback_info		1073967	0					
ANR	1073983	CastExpression	( CallCommandHandlerInfo * ) GetDataPtr ( )		1073967	1					
ANR	1073984	CastTarget	CallCommandHandlerInfo *		1073967	0					
ANR	1073985	CallExpression	GetDataPtr ( )		1073967	1					
ANR	1073986	Callee	GetDataPtr		1073967	0					
ANR	1073987	Identifier	GetDataPtr		1073967	0					
ANR	1073988	ArgumentList			1073967	1					
ANR	1073989	IdentifierDeclStatement	int req = callback_info -> m_req ;	3901:1:117101:117131	1073967	2	True				
ANR	1073990	IdentifierDecl	req = callback_info -> m_req		1073967	0					
ANR	1073991	IdentifierDeclType	int		1073967	0					
ANR	1073992	Identifier	req		1073967	1					
ANR	1073993	AssignmentExpression	req = callback_info -> m_req		1073967	2		=			
ANR	1073994	Identifier	req		1073967	0					
ANR	1073995	PtrMemberAccess	callback_info -> m_req		1073967	1					
ANR	1073996	Identifier	callback_info		1073967	0					
ANR	1073997	Identifier	m_req		1073967	1					
ANR	1073998	IdentifierDeclStatement	time_t orig_deadline = callback_info -> m_deadline ;	3902:1:117134:117182	1073967	3	True				
ANR	1073999	IdentifierDecl	orig_deadline = callback_info -> m_deadline		1073967	0					
ANR	1074000	IdentifierDeclType	time_t		1073967	0					
ANR	1074001	Identifier	orig_deadline		1073967	1					
ANR	1074002	AssignmentExpression	orig_deadline = callback_info -> m_deadline		1073967	2		=			
ANR	1074003	Identifier	orig_deadline		1073967	0					
ANR	1074004	PtrMemberAccess	callback_info -> m_deadline		1073967	1					
ANR	1074005	Identifier	callback_info		1073967	0					
ANR	1074006	Identifier	m_deadline		1073967	1					
ANR	1074007	IdentifierDeclStatement	float time_spent_on_sec = callback_info -> m_time_spent_on_sec ;	3903:1:117185:117245	1073967	4	True				
ANR	1074008	IdentifierDecl	time_spent_on_sec = callback_info -> m_time_spent_on_sec		1073967	0					
ANR	1074009	IdentifierDeclType	float		1073967	0					
ANR	1074010	Identifier	time_spent_on_sec		1073967	1					
ANR	1074011	AssignmentExpression	time_spent_on_sec = callback_info -> m_time_spent_on_sec		1073967	2		=			
ANR	1074012	Identifier	time_spent_on_sec		1073967	0					
ANR	1074013	PtrMemberAccess	callback_info -> m_time_spent_on_sec		1073967	1					
ANR	1074014	Identifier	callback_info		1073967	0					
ANR	1074015	Identifier	m_time_spent_on_sec		1073967	1					
ANR	1074016	IdentifierDeclStatement	UtcTime now ;	3904:1:117248:117259	1073967	5	True				
ANR	1074017	IdentifierDecl	now		1073967	0					
ANR	1074018	IdentifierDeclType	UtcTime		1073967	0					
ANR	1074019	Identifier	now		1073967	1					
ANR	1074020	ExpressionStatement	now . getTime ( )	3905:1:117262:117275	1073967	6	True				
ANR	1074021	CallExpression	now . getTime ( )		1073967	0					
ANR	1074022	Callee	now . getTime		1073967	0					
ANR	1074023	MemberAccess	now . getTime		1073967	0					
ANR	1074024	Identifier	now		1073967	0					
ANR	1074025	Identifier	getTime		1073967	1					
ANR	1074026	ArgumentList			1073967	1					
ANR	1074027	IdentifierDeclStatement	float time_waiting_for_payload = now . difference ( callback_info -> m_start_time ) ;	3906:1:117278:117354	1073967	7	True				
ANR	1074028	IdentifierDecl	time_waiting_for_payload = now . difference ( callback_info -> m_start_time )		1073967	0					
ANR	1074029	IdentifierDeclType	float		1073967	0					
ANR	1074030	Identifier	time_waiting_for_payload		1073967	1					
ANR	1074031	AssignmentExpression	time_waiting_for_payload = now . difference ( callback_info -> m_start_time )		1073967	2		=			
ANR	1074032	Identifier	time_waiting_for_payload		1073967	0					
ANR	1074033	CallExpression	now . difference ( callback_info -> m_start_time )		1073967	1					
ANR	1074034	Callee	now . difference		1073967	0					
ANR	1074035	MemberAccess	now . difference		1073967	0					
ANR	1074036	Identifier	now		1073967	0					
ANR	1074037	Identifier	difference		1073967	1					
ANR	1074038	ArgumentList	callback_info -> m_start_time		1073967	1					
ANR	1074039	Argument	callback_info -> m_start_time		1073967	0					
ANR	1074040	PtrMemberAccess	callback_info -> m_start_time		1073967	0					
ANR	1074041	Identifier	callback_info		1073967	0					
ANR	1074042	Identifier	m_start_time		1073967	1					
ANR	1074043	Statement	delete	3908:1:117358:117363	1073967	8	True				
ANR	1074044	ExpressionStatement	callback_info	3908:8:117365:117378	1073967	9	True				
ANR	1074045	Identifier	callback_info		1073967	0					
ANR	1074046	ExpressionStatement	Cancel_Socket ( stream )	3910:1:117382:117405	1073967	10	True				
ANR	1074047	CallExpression	Cancel_Socket ( stream )		1073967	0					
ANR	1074048	Callee	Cancel_Socket		1073967	0					
ANR	1074049	Identifier	Cancel_Socket		1073967	0					
ANR	1074050	ArgumentList	stream		1073967	1					
ANR	1074051	Argument	stream		1073967	0					
ANR	1074052	Identifier	stream		1073967	0					
ANR	1074053	IdentifierDeclStatement	int index = 0 ;	3912:1:117409:117422	1073967	11	True				
ANR	1074054	IdentifierDecl	index = 0		1073967	0					
ANR	1074055	IdentifierDeclType	int		1073967	0					
ANR	1074056	Identifier	index		1073967	1					
ANR	1074057	AssignmentExpression	index = 0		1073967	2		=			
ANR	1074058	Identifier	index		1073967	0					
ANR	1074059	PrimaryExpression	0		1073967	1					
ANR	1074060	IdentifierDeclStatement	"bool reqFound = CommandNumToTableIndex ( req , & index ) ;"	3913:1:117425:117475	1073967	12	True				
ANR	1074061	IdentifierDecl	"reqFound = CommandNumToTableIndex ( req , & index )"		1073967	0					
ANR	1074062	IdentifierDeclType	bool		1073967	0					
ANR	1074063	Identifier	reqFound		1073967	1					
ANR	1074064	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		1073967	2		=			
ANR	1074065	Identifier	reqFound		1073967	0					
ANR	1074066	CallExpression	"CommandNumToTableIndex ( req , & index )"		1073967	1					
ANR	1074067	Callee	CommandNumToTableIndex		1073967	0					
ANR	1074068	Identifier	CommandNumToTableIndex		1073967	0					
ANR	1074069	ArgumentList	req		1073967	1					
ANR	1074070	Argument	req		1073967	0					
ANR	1074071	Identifier	req		1073967	0					
ANR	1074072	Argument	& index		1073967	1					
ANR	1074073	UnaryOperationExpression	& index		1073967	0					
ANR	1074074	UnaryOperator	&		1073967	0					
ANR	1074075	Identifier	index		1073967	1					
ANR	1074076	IfStatement	if ( ! reqFound )		1073967	13					
ANR	1074077	Condition	! reqFound	3915:5:117483:117491	1073967	0	True				
ANR	1074078	UnaryOperationExpression	! reqFound		1073967	0					
ANR	1074079	UnaryOperator	!		1073967	0					
ANR	1074080	Identifier	reqFound		1073967	1					
ANR	1074081	CompoundStatement		20:17:569:569	1073967	1					
ANR	1074082	ExpressionStatement	"dprintf ( D_ALWAYS , ""Command %d from %s is no longer recognized!\\n"" , req , stream -> peer_description ( ) )"	3916:2:117499:117605	1073967	0	True				
ANR	1074083	CallExpression	"dprintf ( D_ALWAYS , ""Command %d from %s is no longer recognized!\\n"" , req , stream -> peer_description ( ) )"		1073967	0					
ANR	1074084	Callee	dprintf		1073967	0					
ANR	1074085	Identifier	dprintf		1073967	0					
ANR	1074086	ArgumentList	D_ALWAYS		1073967	1					
ANR	1074087	Argument	D_ALWAYS		1073967	0					
ANR	1074088	Identifier	D_ALWAYS		1073967	0					
ANR	1074089	Argument	"""Command %d from %s is no longer recognized!\\n"""		1073967	1					
ANR	1074090	PrimaryExpression	"""Command %d from %s is no longer recognized!\\n"""		1073967	0					
ANR	1074091	Argument	req		1073967	2					
ANR	1074092	Identifier	req		1073967	0					
ANR	1074093	Argument	stream -> peer_description ( )		1073967	3					
ANR	1074094	CallExpression	stream -> peer_description ( )		1073967	0					
ANR	1074095	Callee	stream -> peer_description		1073967	0					
ANR	1074096	PtrMemberAccess	stream -> peer_description		1073967	0					
ANR	1074097	Identifier	stream		1073967	0					
ANR	1074098	Identifier	peer_description		1073967	1					
ANR	1074099	ArgumentList			1073967	1					
ANR	1074100	GotoStatement	goto wrapup ;	3919:2:117609:117620	1073967	1	True				
ANR	1074101	Identifier	wrapup		1073967	0					
ANR	1074102	IfStatement	if ( stream -> deadline_expired ( ) )		1073967	14					
ANR	1074103	Condition	stream -> deadline_expired ( )	3922:5:117631:117656	1073967	0	True				
ANR	1074104	CallExpression	stream -> deadline_expired ( )		1073967	0					
ANR	1074105	Callee	stream -> deadline_expired		1073967	0					
ANR	1074106	PtrMemberAccess	stream -> deadline_expired		1073967	0					
ANR	1074107	Identifier	stream		1073967	0					
ANR	1074108	Identifier	deadline_expired		1073967	1					
ANR	1074109	ArgumentList			1073967	1					
ANR	1074110	CompoundStatement		27:34:734:734	1073967	1					
ANR	1074111	Statement	dprintf	3923:2:117664:117670	1073967	0	True				
ANR	1074112	Statement	(	3923:9:117671:117671	1073967	1	True				
ANR	1074113	Statement	D_ALWAYS	3923:10:117672:117679	1073967	2	True				
ANR	1074114	Statement	","	3923:18:117680:117680	1073967	3	True				
ANR	1074115	Statement	"""Deadline expired after %.3fs waiting for %s """	3924:4:117686:117731	1073967	4	True				
ANR	1074116	Statement	"""to send payload for command %d %s.\\n"""	3925:4:117737:117774	1073967	5	True				
ANR	1074117	Statement	","	3925:42:117775:117775	1073967	6	True				
ANR	1074118	Statement	time_waiting_for_payload	3926:4:117781:117804	1073967	7	True				
ANR	1074119	Statement	","	3926:28:117805:117805	1073967	8	True				
ANR	1074120	Statement	stream	3926:29:117806:117811	1073967	9	True				
ANR	1074121	Statement	->	3926:35:117812:117813	1073967	10	True				
ANR	1074122	Statement	peer_description	3926:37:117814:117829	1073967	11	True				
ANR	1074123	Statement	(	3926:53:117830:117830	1073967	12	True				
ANR	1074124	Statement	)	3926:54:117831:117831	1073967	13	True				
ANR	1074125	Statement	","	3926:55:117832:117832	1073967	14	True				
ANR	1074126	Statement	req	3927:4:117838:117840	1073967	15	True				
ANR	1074127	Statement	","	3927:7:117841:117841	1073967	16	True				
ANR	1074128	Statement	comTable	3927:8:117842:117849	1073967	17	True				
ANR	1074129	Statement	[	3927:16:117850:117850	1073967	18	True				
ANR	1074130	Statement	index	3927:17:117851:117855	1073967	19	True				
ANR	1074131	Statement	]	3927:22:117856:117856	1073967	20	True				
ANR	1074132	Statement	.	3927:23:117857:117857	1073967	21	True				
ANR	1074133	Statement	command_descrip	3927:24:117858:117872	1073967	22	True				
ANR	1074134	Statement	)	3927:39:117873:117873	1073967	23	True				
ANR	1074135	ExpressionStatement		3927:40:117874:117874	1073967	24	True				
ANR	1074136	GotoStatement	goto wrapup ;	3928:2:117878:117889	1073967	25	True				
ANR	1074137	Identifier	wrapup		1073967	0					
ANR	1074138	ExpressionStatement	stream -> set_deadline ( orig_deadline )	3931:1:117896:117933	1073967	15	True				
ANR	1074139	CallExpression	stream -> set_deadline ( orig_deadline )		1073967	0					
ANR	1074140	Callee	stream -> set_deadline		1073967	0					
ANR	1074141	PtrMemberAccess	stream -> set_deadline		1073967	0					
ANR	1074142	Identifier	stream		1073967	0					
ANR	1074143	Identifier	set_deadline		1073967	1					
ANR	1074144	ArgumentList	orig_deadline		1073967	1					
ANR	1074145	Argument	orig_deadline		1073967	0					
ANR	1074146	Identifier	orig_deadline		1073967	0					
ANR	1074147	ExpressionStatement	"result = CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"	3933:1:117937:118031	1073967	16	True				
ANR	1074148	AssignmentExpression	"result = CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"		1073967	0		=			
ANR	1074149	Identifier	result		1073967	0					
ANR	1074150	CallExpression	"CallCommandHandler ( req , stream , false , false , time_spent_on_sec , time_waiting_for_payload )"		1073967	1					
ANR	1074151	Callee	CallCommandHandler		1073967	0					
ANR	1074152	Identifier	CallCommandHandler		1073967	0					
ANR	1074153	ArgumentList	req		1073967	1					
ANR	1074154	Argument	req		1073967	0					
ANR	1074155	Identifier	req		1073967	0					
ANR	1074156	Argument	stream		1073967	1					
ANR	1074157	Identifier	stream		1073967	0					
ANR	1074158	Argument	false		1073967	2					
ANR	1074159	Identifier	false		1073967	0					
ANR	1074160	Argument	false		1073967	3					
ANR	1074161	Identifier	false		1073967	0					
ANR	1074162	Argument	time_spent_on_sec		1073967	4					
ANR	1074163	Identifier	time_spent_on_sec		1073967	0					
ANR	1074164	Argument	time_waiting_for_payload		1073967	5					
ANR	1074165	Identifier	time_waiting_for_payload		1073967	0					
ANR	1074166	Label	wrapup :	3935:1:118035:118041	1073967	17	True				
ANR	1074167	Identifier	wrapup		1073967	0					
ANR	1074168	IfStatement	if ( result != KEEP_STREAM )		1073967	18					
ANR	1074169	Condition	result != KEEP_STREAM	3936:5:118048:118068	1073967	0	True				
ANR	1074170	EqualityExpression	result != KEEP_STREAM		1073967	0		!=			
ANR	1074171	Identifier	result		1073967	0					
ANR	1074172	Identifier	KEEP_STREAM		1073967	1					
ANR	1074173	CompoundStatement		41:29:1146:1146	1073967	1					
ANR	1074174	Statement	delete	3937:2:118076:118081	1073967	0	True				
ANR	1074175	ExpressionStatement	stream	3937:9:118083:118089	1073967	1	True				
ANR	1074176	Identifier	stream		1073967	0					
ANR	1074177	ExpressionStatement	result = KEEP_STREAM	3938:2:118093:118113	1073967	2	True				
ANR	1074178	AssignmentExpression	result = KEEP_STREAM		1073967	0		=			
ANR	1074179	Identifier	result		1073967	0					
ANR	1074180	Identifier	KEEP_STREAM		1073967	1					
ANR	1074181	ReturnStatement	return result ;	3940:1:118119:118132	1073967	19	True				
ANR	1074182	Identifier	result		1073967	0					
ANR	1074183	ReturnType	int		1073967	1					
ANR	1074184	Identifier	DaemonCore :: HandleReqPayloadReady		1073967	2					
ANR	1074185	ParameterList	Stream * stream		1073967	3					
ANR	1074186	Parameter	Stream * stream	3895:34:116909:116922	1073967	0	True				
ANR	1074187	ParameterType	Stream *		1073967	0					
ANR	1074188	Identifier	stream		1073967	1					
ANR	1074189	CFGEntryNode	ENTRY		1073967		True				
ANR	1074190	CFGExitNode	EXIT		1073967		True				
ANR	1074191	Symbol	stream -> deadline_expired		1073967						
ANR	1074192	Symbol	* callback_info		1073967						
ANR	1074193	Symbol	callback_info -> m_deadline		1073967						
ANR	1074194	Symbol	KEEP_STREAM		1073967						
ANR	1074195	Symbol	result		1073967						
ANR	1074196	Symbol	callback_info -> m_start_time		1073967						
ANR	1074197	Symbol	stream		1073967						
ANR	1074198	Symbol	now		1073967						
ANR	1074199	Symbol	time_waiting_for_payload		1073967						
ANR	1074200	Symbol	callback_info -> m_time_spent_on_sec		1073967						
ANR	1074201	Symbol	& index		1073967						
ANR	1074202	Symbol	CommandNumToTableIndex		1073967						
ANR	1074203	Symbol	req		1073967						
ANR	1074204	Symbol	stream -> peer_description		1073967						
ANR	1074205	Symbol	CallCommandHandler		1073967						
ANR	1074206	Symbol	time_spent_on_sec		1073967						
ANR	1074207	Symbol	D_ALWAYS		1073967						
ANR	1074208	Symbol	false		1073967						
ANR	1074209	Symbol	now . difference		1073967						
ANR	1074210	Symbol	index		1073967						
ANR	1074211	Symbol	callback_info		1073967						
ANR	1074212	Symbol	GetDataPtr		1073967						
ANR	1074213	Symbol	* stream		1073967						
ANR	1074214	Symbol	callback_info -> m_req		1073967						
ANR	1074215	Symbol	orig_deadline		1073967						
ANR	1074216	Symbol	reqFound		1073967						
ANR	1074217	Symbol	FALSE		1073967						
ANR	1074218	Function	DaemonCore :: CallCommandHandler	3943:0:118137:121055							
ANR	1074219	FunctionDef	"DaemonCore :: CallCommandHandler (int req , Stream * stream , bool delete_stream , bool check_payload , float time_spent_on_sec , float time_spent_waiting_for_payload)"		1074218	0					
ANR	1074220	CompoundStatement		3945:0:118295:121055	1074218	0					
ANR	1074221	IdentifierDeclStatement	int result = FALSE ;	3946:1:118298:118316	1074218	0	True				
ANR	1074222	IdentifierDecl	result = FALSE		1074218	0					
ANR	1074223	IdentifierDeclType	int		1074218	0					
ANR	1074224	Identifier	result		1074218	1					
ANR	1074225	AssignmentExpression	result = FALSE		1074218	2		=			
ANR	1074226	Identifier	FALSE		1074218	0					
ANR	1074227	Identifier	FALSE		1074218	1					
ANR	1074228	IdentifierDeclStatement	int index = 0 ;	3947:1:118319:118332	1074218	1	True				
ANR	1074229	IdentifierDecl	index = 0		1074218	0					
ANR	1074230	IdentifierDeclType	int		1074218	0					
ANR	1074231	Identifier	index		1074218	1					
ANR	1074232	AssignmentExpression	index = 0		1074218	2		=			
ANR	1074233	Identifier	index		1074218	0					
ANR	1074234	PrimaryExpression	0		1074218	1					
ANR	1074235	IdentifierDeclStatement	"bool reqFound = CommandNumToTableIndex ( req , & index ) ;"	3948:1:118335:118385	1074218	2	True				
ANR	1074236	IdentifierDecl	"reqFound = CommandNumToTableIndex ( req , & index )"		1074218	0					
ANR	1074237	IdentifierDeclType	bool		1074218	0					
ANR	1074238	Identifier	reqFound		1074218	1					
ANR	1074239	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		1074218	2		=			
ANR	1074240	Identifier	reqFound		1074218	0					
ANR	1074241	CallExpression	"CommandNumToTableIndex ( req , & index )"		1074218	1					
ANR	1074242	Callee	CommandNumToTableIndex		1074218	0					
ANR	1074243	Identifier	CommandNumToTableIndex		1074218	0					
ANR	1074244	ArgumentList	req		1074218	1					
ANR	1074245	Argument	req		1074218	0					
ANR	1074246	Identifier	req		1074218	0					
ANR	1074247	Argument	& index		1074218	1					
ANR	1074248	UnaryOperationExpression	& index		1074218	0					
ANR	1074249	UnaryOperator	&		1074218	0					
ANR	1074250	Identifier	index		1074218	1					
ANR	1074251	IdentifierDeclStatement	char const * user = NULL ;	3949:1:118388:118411	1074218	3	True				
ANR	1074252	IdentifierDecl	* user = NULL		1074218	0					
ANR	1074253	IdentifierDeclType	char const *		1074218	0					
ANR	1074254	Identifier	user		1074218	1					
ANR	1074255	AssignmentExpression	* user = NULL		1074218	2		=			
ANR	1074256	Identifier	NULL		1074218	0					
ANR	1074257	Identifier	NULL		1074218	1					
ANR	1074258	IdentifierDeclStatement	Sock * sock = ( Sock * ) stream ;	3950:1:118414:118441	1074218	4	True				
ANR	1074259	IdentifierDecl	* sock = ( Sock * ) stream		1074218	0					
ANR	1074260	IdentifierDeclType	Sock *		1074218	0					
ANR	1074261	Identifier	sock		1074218	1					
ANR	1074262	AssignmentExpression	* sock = ( Sock * ) stream		1074218	2		=			
ANR	1074263	Identifier	sock		1074218	0					
ANR	1074264	CastExpression	( Sock * ) stream		1074218	1					
ANR	1074265	CastTarget	Sock *		1074218	0					
ANR	1074266	Identifier	stream		1074218	1					
ANR	1074267	IfStatement	if ( reqFound )		1074218	5					
ANR	1074268	Condition	reqFound	3952:6:118450:118457	1074218	0	True				
ANR	1074269	Identifier	reqFound		1074218	0					
ANR	1074270	CompoundStatement		75:2:2397:2467	1074218	1					
ANR	1074271	IfStatement	if ( stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload )		1074218	0					
ANR	1074272	Condition	stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload	3954:6:118470:118577	1074218	0	True				
ANR	1074273	AndExpression	stream && stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload		1074218	0		&&			
ANR	1074274	Identifier	stream		1074218	0					
ANR	1074275	AndExpression	stream -> type ( ) == Stream :: reli_sock && comTable [ index ] . wait_for_payload > 0 && check_payload		1074218	1		&&			
ANR	1074276	EqualityExpression	stream -> type ( ) == Stream :: reli_sock		1074218	0		==			
ANR	1074277	CallExpression	stream -> type ( )		1074218	0					
ANR	1074278	Callee	stream -> type		1074218	0					
ANR	1074279	PtrMemberAccess	stream -> type		1074218	0					
ANR	1074280	Identifier	stream		1074218	0					
ANR	1074281	Identifier	type		1074218	1					
ANR	1074282	ArgumentList			1074218	1					
ANR	1074283	Identifier	Stream :: reli_sock		1074218	1					
ANR	1074284	AndExpression	comTable [ index ] . wait_for_payload > 0 && check_payload		1074218	1		&&			
ANR	1074285	RelationalExpression	comTable [ index ] . wait_for_payload > 0		1074218	0		>			
ANR	1074286	MemberAccess	comTable [ index ] . wait_for_payload		1074218	0					
ANR	1074287	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074288	Identifier	comTable		1074218	0					
ANR	1074289	Identifier	index		1074218	1					
ANR	1074290	Identifier	wait_for_payload		1074218	1					
ANR	1074291	PrimaryExpression	0		1074218	1					
ANR	1074292	Identifier	check_payload		1074218	1					
ANR	1074293	CompoundStatement		12:2:287:287	1074218	1					
ANR	1074294	IfStatement	if ( ! sock -> readReady ( ) )		1074218	0					
ANR	1074295	Condition	! sock -> readReady ( )	3957:7:118592:118609	1074218	0	True				
ANR	1074296	UnaryOperationExpression	! sock -> readReady ( )		1074218	0					
ANR	1074297	UnaryOperator	!		1074218	0					
ANR	1074298	CallExpression	sock -> readReady ( )		1074218	1					
ANR	1074299	Callee	sock -> readReady		1074218	0					
ANR	1074300	PtrMemberAccess	sock -> readReady		1074218	0					
ANR	1074301	Identifier	sock		1074218	0					
ANR	1074302	Identifier	readReady		1074218	1					
ANR	1074303	ArgumentList			1074218	1					
ANR	1074304	CompoundStatement		13:28:317:317	1074218	1					
ANR	1074305	IfStatement	if ( sock -> deadline_expired ( ) )		1074218	0					
ANR	1074306	Condition	sock -> deadline_expired ( )	3958:8:118623:118646	1074218	0	True				
ANR	1074307	CallExpression	sock -> deadline_expired ( )		1074218	0					
ANR	1074308	Callee	sock -> deadline_expired		1074218	0					
ANR	1074309	PtrMemberAccess	sock -> deadline_expired		1074218	0					
ANR	1074310	Identifier	sock		1074218	0					
ANR	1074311	Identifier	deadline_expired		1074218	1					
ANR	1074312	ArgumentList			1074218	1					
ANR	1074313	CompoundStatement		14:35:354:354	1074218	1					
ANR	1074314	ExpressionStatement	"dprintf ( D_ALWAYS , ""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"" , req , stream -> peer_description ( ) )"	3959:5:118657:118829	1074218	0	True				
ANR	1074315	CallExpression	"dprintf ( D_ALWAYS , ""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"" , req , stream -> peer_description ( ) )"		1074218	0					
ANR	1074316	Callee	dprintf		1074218	0					
ANR	1074317	Identifier	dprintf		1074218	0					
ANR	1074318	ArgumentList	D_ALWAYS		1074218	1					
ANR	1074319	Argument	D_ALWAYS		1074218	0					
ANR	1074320	Identifier	D_ALWAYS		1074218	0					
ANR	1074321	Argument	"""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"""		1074218	1					
ANR	1074322	PrimaryExpression	"""The payload has not arrived for command %d from %s, but the deadline has expired, so continuing to the command handler.\\n"""		1074218	0					
ANR	1074323	Argument	req		1074218	2					
ANR	1074324	Identifier	req		1074218	0					
ANR	1074325	Argument	stream -> peer_description ( )		1074218	3					
ANR	1074326	CallExpression	stream -> peer_description ( )		1074218	0					
ANR	1074327	Callee	stream -> peer_description		1074218	0					
ANR	1074328	PtrMemberAccess	stream -> peer_description		1074218	0					
ANR	1074329	Identifier	stream		1074218	0					
ANR	1074330	Identifier	peer_description		1074218	1					
ANR	1074331	ArgumentList			1074218	1					
ANR	1074332	ElseStatement	else		1074218	0					
ANR	1074333	CompoundStatement		23:5:773:949	1074218	0					
ANR	1074334	IdentifierDeclStatement	time_t old_deadline = sock -> get_deadline ( ) ;	3962:5:118853:118895	1074218	0	True				
ANR	1074335	IdentifierDecl	old_deadline = sock -> get_deadline ( )		1074218	0					
ANR	1074336	IdentifierDeclType	time_t		1074218	0					
ANR	1074337	Identifier	old_deadline		1074218	1					
ANR	1074338	AssignmentExpression	old_deadline = sock -> get_deadline ( )		1074218	2		=			
ANR	1074339	Identifier	old_deadline		1074218	0					
ANR	1074340	CallExpression	sock -> get_deadline ( )		1074218	1					
ANR	1074341	Callee	sock -> get_deadline		1074218	0					
ANR	1074342	PtrMemberAccess	sock -> get_deadline		1074218	0					
ANR	1074343	Identifier	sock		1074218	0					
ANR	1074344	Identifier	get_deadline		1074218	1					
ANR	1074345	ArgumentList			1074218	1					
ANR	1074346	ExpressionStatement	sock -> set_deadline_timeout ( comTable [ index ] . wait_for_payload )	3963:5:118902:118962	1074218	1	True				
ANR	1074347	CallExpression	sock -> set_deadline_timeout ( comTable [ index ] . wait_for_payload )		1074218	0					
ANR	1074348	Callee	sock -> set_deadline_timeout		1074218	0					
ANR	1074349	PtrMemberAccess	sock -> set_deadline_timeout		1074218	0					
ANR	1074350	Identifier	sock		1074218	0					
ANR	1074351	Identifier	set_deadline_timeout		1074218	1					
ANR	1074352	ArgumentList	comTable [ index ] . wait_for_payload		1074218	1					
ANR	1074353	Argument	comTable [ index ] . wait_for_payload		1074218	0					
ANR	1074354	MemberAccess	comTable [ index ] . wait_for_payload		1074218	0					
ANR	1074355	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074356	Identifier	comTable		1074218	0					
ANR	1074357	Identifier	index		1074218	1					
ANR	1074358	Identifier	wait_for_payload		1074218	1					
ANR	1074359	IdentifierDeclStatement	char callback_desc [ 50 ] ;	3965:5:118970:118992	1074218	2	True				
ANR	1074360	IdentifierDecl	callback_desc [ 50 ]		1074218	0					
ANR	1074361	IdentifierDeclType	char [ 50 ]		1074218	0					
ANR	1074362	Identifier	callback_desc		1074218	1					
ANR	1074363	PrimaryExpression	50		1074218	2					
ANR	1074364	ExpressionStatement	"snprintf ( callback_desc , 50 , ""Waiting for command %d payload"" , req )"	3966:5:118999:119062	1074218	3	True				
ANR	1074365	CallExpression	"snprintf ( callback_desc , 50 , ""Waiting for command %d payload"" , req )"		1074218	0					
ANR	1074366	Callee	snprintf		1074218	0					
ANR	1074367	Identifier	snprintf		1074218	0					
ANR	1074368	ArgumentList	callback_desc		1074218	1					
ANR	1074369	Argument	callback_desc		1074218	0					
ANR	1074370	Identifier	callback_desc		1074218	0					
ANR	1074371	Argument	50		1074218	1					
ANR	1074372	PrimaryExpression	50		1074218	0					
ANR	1074373	Argument	"""Waiting for command %d payload"""		1074218	2					
ANR	1074374	PrimaryExpression	"""Waiting for command %d payload"""		1074218	0					
ANR	1074375	Argument	req		1074218	3					
ANR	1074376	Identifier	req		1074218	0					
ANR	1074377	IdentifierDeclStatement	"int rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this ) ;"	3967:5:119069:119245	1074218	4	True				
ANR	1074378	IdentifierDecl	"rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		1074218	0					
ANR	1074379	IdentifierDeclType	int		1074218	0					
ANR	1074380	Identifier	rc		1074218	1					
ANR	1074381	AssignmentExpression	"rc = Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		1074218	2		=			
ANR	1074382	Identifier	rc		1074218	0					
ANR	1074383	CallExpression	"Register_Socket ( stream , callback_desc , ( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady , ""DaemonCore::HandleReqPayloadReady"" , this )"		1074218	1					
ANR	1074384	Callee	Register_Socket		1074218	0					
ANR	1074385	Identifier	Register_Socket		1074218	0					
ANR	1074386	ArgumentList	stream		1074218	1					
ANR	1074387	Argument	stream		1074218	0					
ANR	1074388	Identifier	stream		1074218	0					
ANR	1074389	Argument	callback_desc		1074218	1					
ANR	1074390	Identifier	callback_desc		1074218	0					
ANR	1074391	Argument	( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady		1074218	2					
ANR	1074392	CastExpression	( SocketHandlercpp ) & DaemonCore :: HandleReqPayloadReady		1074218	0					
ANR	1074393	CastTarget	SocketHandlercpp		1074218	0					
ANR	1074394	UnaryOperationExpression	& DaemonCore :: HandleReqPayloadReady		1074218	1					
ANR	1074395	UnaryOperator	&		1074218	0					
ANR	1074396	Identifier	DaemonCore :: HandleReqPayloadReady		1074218	1					
ANR	1074397	Argument	"""DaemonCore::HandleReqPayloadReady"""		1074218	3					
ANR	1074398	PrimaryExpression	"""DaemonCore::HandleReqPayloadReady"""		1074218	0					
ANR	1074399	Argument	this		1074218	4					
ANR	1074400	Identifier	this		1074218	0					
ANR	1074401	IfStatement	if ( rc >= 0 )		1074218	5					
ANR	1074402	Condition	rc >= 0	3973:9:119256:119262	1074218	0	True				
ANR	1074403	RelationalExpression	rc >= 0		1074218	0		>=			
ANR	1074404	Identifier	rc		1074218	0					
ANR	1074405	PrimaryExpression	0		1074218	1					
ANR	1074406	CompoundStatement		30:6:978:1080	1074218	1					
ANR	1074407	IdentifierDeclStatement	"CallCommandHandlerInfo * callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec ) ;"	3974:6:119274:119376	1074218	0	True				
ANR	1074408	IdentifierDecl	"* callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec )"		1074218	0					
ANR	1074409	IdentifierDeclType	CallCommandHandlerInfo *		1074218	0					
ANR	1074410	Identifier	callback_info		1074218	1					
ANR	1074411	AssignmentExpression	"* callback_info = new CallCommandHandlerInfo ( req , old_deadline , time_spent_on_sec )"		1074218	2		=			
ANR	1074412	Identifier	callback_info		1074218	0					
ANR	1074413	Expression	"req , old_deadline , time_spent_on_sec"		1074218	1					
ANR	1074414	Identifier	req		1074218	0					
ANR	1074415	Expression	"old_deadline , time_spent_on_sec"		1074218	1					
ANR	1074416	Identifier	old_deadline		1074218	0					
ANR	1074417	Identifier	time_spent_on_sec		1074218	1					
ANR	1074418	ExpressionStatement	Register_DataPtr ( ( void * ) callback_info )	3975:6:119384:119423	1074218	1	True				
ANR	1074419	CallExpression	Register_DataPtr ( ( void * ) callback_info )		1074218	0					
ANR	1074420	Callee	Register_DataPtr		1074218	0					
ANR	1074421	Identifier	Register_DataPtr		1074218	0					
ANR	1074422	ArgumentList	( void * ) callback_info		1074218	1					
ANR	1074423	Argument	( void * ) callback_info		1074218	0					
ANR	1074424	CastExpression	( void * ) callback_info		1074218	0					
ANR	1074425	CastTarget	void *		1074218	0					
ANR	1074426	Identifier	callback_info		1074218	1					
ANR	1074427	ReturnStatement	return KEEP_STREAM ;	3976:6:119431:119449	1074218	2	True				
ANR	1074428	Identifier	KEEP_STREAM		1074218	0					
ANR	1074429	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to register callback to wait for command %d payload from %s.\\n"" , req , stream -> peer_description ( ) )"	3979:5:119464:119584	1074218	6	True				
ANR	1074430	CallExpression	"dprintf ( D_ALWAYS , ""Failed to register callback to wait for command %d payload from %s.\\n"" , req , stream -> peer_description ( ) )"		1074218	0					
ANR	1074431	Callee	dprintf		1074218	0					
ANR	1074432	Identifier	dprintf		1074218	0					
ANR	1074433	ArgumentList	D_ALWAYS		1074218	1					
ANR	1074434	Argument	D_ALWAYS		1074218	0					
ANR	1074435	Identifier	D_ALWAYS		1074218	0					
ANR	1074436	Argument	"""Failed to register callback to wait for command %d payload from %s.\\n"""		1074218	1					
ANR	1074437	PrimaryExpression	"""Failed to register callback to wait for command %d payload from %s.\\n"""		1074218	0					
ANR	1074438	Argument	req		1074218	2					
ANR	1074439	Identifier	req		1074218	0					
ANR	1074440	Argument	stream -> peer_description ( )		1074218	3					
ANR	1074441	CallExpression	stream -> peer_description ( )		1074218	0					
ANR	1074442	Callee	stream -> peer_description		1074218	0					
ANR	1074443	PtrMemberAccess	stream -> peer_description		1074218	0					
ANR	1074444	Identifier	stream		1074218	0					
ANR	1074445	Identifier	peer_description		1074218	1					
ANR	1074446	ArgumentList			1074218	1					
ANR	1074447	ExpressionStatement	sock -> set_deadline ( old_deadline )	3980:5:119591:119625	1074218	7	True				
ANR	1074448	CallExpression	sock -> set_deadline ( old_deadline )		1074218	0					
ANR	1074449	Callee	sock -> set_deadline		1074218	0					
ANR	1074450	PtrMemberAccess	sock -> set_deadline		1074218	0					
ANR	1074451	Identifier	sock		1074218	0					
ANR	1074452	Identifier	set_deadline		1074218	1					
ANR	1074453	ArgumentList	old_deadline		1074218	1					
ANR	1074454	Argument	old_deadline		1074218	0					
ANR	1074455	Identifier	old_deadline		1074218	0					
ANR	1074456	ExpressionStatement	user = sock -> getFullyQualifiedUser ( )	3986:2:119684:119720	1074218	1	True				
ANR	1074457	AssignmentExpression	user = sock -> getFullyQualifiedUser ( )		1074218	0		=			
ANR	1074458	Identifier	user		1074218	0					
ANR	1074459	CallExpression	sock -> getFullyQualifiedUser ( )		1074218	1					
ANR	1074460	Callee	sock -> getFullyQualifiedUser		1074218	0					
ANR	1074461	PtrMemberAccess	sock -> getFullyQualifiedUser		1074218	0					
ANR	1074462	Identifier	sock		1074218	0					
ANR	1074463	Identifier	getFullyQualifiedUser		1074218	1					
ANR	1074464	ArgumentList			1074218	1					
ANR	1074465	IfStatement	if ( ! user )		1074218	2					
ANR	1074466	Condition	! user	3987:6:119728:119732	1074218	0	True				
ANR	1074467	UnaryOperationExpression	! user		1074218	0					
ANR	1074468	UnaryOperator	!		1074218	0					
ANR	1074469	Identifier	user		1074218	1					
ANR	1074470	CompoundStatement		43:14:1440:1440	1074218	1					
ANR	1074471	ExpressionStatement	"user = """""	3988:3:119741:119750	1074218	0	True				
ANR	1074472	AssignmentExpression	"user = """""		1074218	0		=			
ANR	1074473	Identifier	user		1074218	0					
ANR	1074474	PrimaryExpression	""""""		1074218	1					
ANR	1074475	ExpressionStatement	"dprintf ( D_COMMAND , ""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"" , comTable [ index ] . handler_descrip , inServiceCommandSocket_flag , req , comTable [ index ] . command_descrip , user , stream -> peer_description ( ) )"	3990:2:119758:119998	1074218	3	True				
ANR	1074476	CallExpression	"dprintf ( D_COMMAND , ""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"" , comTable [ index ] . handler_descrip , inServiceCommandSocket_flag , req , comTable [ index ] . command_descrip , user , stream -> peer_description ( ) )"		1074218	0					
ANR	1074477	Callee	dprintf		1074218	0					
ANR	1074478	Identifier	dprintf		1074218	0					
ANR	1074479	ArgumentList	D_COMMAND		1074218	1					
ANR	1074480	Argument	D_COMMAND		1074218	0					
ANR	1074481	Identifier	D_COMMAND		1074218	0					
ANR	1074482	Argument	"""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"""		1074218	1					
ANR	1074483	PrimaryExpression	"""Calling HandleReq <%s> (%d) for command %d (%s) from %s %s\\n"""		1074218	0					
ANR	1074484	Argument	comTable [ index ] . handler_descrip		1074218	2					
ANR	1074485	MemberAccess	comTable [ index ] . handler_descrip		1074218	0					
ANR	1074486	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074487	Identifier	comTable		1074218	0					
ANR	1074488	Identifier	index		1074218	1					
ANR	1074489	Identifier	handler_descrip		1074218	1					
ANR	1074490	Argument	inServiceCommandSocket_flag		1074218	3					
ANR	1074491	Identifier	inServiceCommandSocket_flag		1074218	0					
ANR	1074492	Argument	req		1074218	4					
ANR	1074493	Identifier	req		1074218	0					
ANR	1074494	Argument	comTable [ index ] . command_descrip		1074218	5					
ANR	1074495	MemberAccess	comTable [ index ] . command_descrip		1074218	0					
ANR	1074496	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074497	Identifier	comTable		1074218	0					
ANR	1074498	Identifier	index		1074218	1					
ANR	1074499	Identifier	command_descrip		1074218	1					
ANR	1074500	Argument	user		1074218	6					
ANR	1074501	Identifier	user		1074218	0					
ANR	1074502	Argument	stream -> peer_description ( )		1074218	7					
ANR	1074503	CallExpression	stream -> peer_description ( )		1074218	0					
ANR	1074504	Callee	stream -> peer_description		1074218	0					
ANR	1074505	PtrMemberAccess	stream -> peer_description		1074218	0					
ANR	1074506	Identifier	stream		1074218	0					
ANR	1074507	Identifier	peer_description		1074218	1					
ANR	1074508	ArgumentList			1074218	1					
ANR	1074509	IdentifierDeclStatement	UtcTime handler_start_time ;	3998:2:120003:120029	1074218	4	True				
ANR	1074510	IdentifierDecl	handler_start_time		1074218	0					
ANR	1074511	IdentifierDeclType	UtcTime		1074218	0					
ANR	1074512	Identifier	handler_start_time		1074218	1					
ANR	1074513	ExpressionStatement	handler_start_time . getTime ( )	3999:2:120033:120061	1074218	5	True				
ANR	1074514	CallExpression	handler_start_time . getTime ( )		1074218	0					
ANR	1074515	Callee	handler_start_time . getTime		1074218	0					
ANR	1074516	MemberAccess	handler_start_time . getTime		1074218	0					
ANR	1074517	Identifier	handler_start_time		1074218	0					
ANR	1074518	Identifier	getTime		1074218	1					
ANR	1074519	ArgumentList			1074218	1					
ANR	1074520	ExpressionStatement	curr_dataptr = & ( comTable [ index ] . data_ptr )	4002:2:120134:120176	1074218	6	True				
ANR	1074521	AssignmentExpression	curr_dataptr = & ( comTable [ index ] . data_ptr )		1074218	0		=			
ANR	1074522	Identifier	curr_dataptr		1074218	0					
ANR	1074523	UnaryOperationExpression	& ( comTable [ index ] . data_ptr )		1074218	1					
ANR	1074524	UnaryOperator	&		1074218	0					
ANR	1074525	MemberAccess	comTable [ index ] . data_ptr		1074218	1					
ANR	1074526	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074527	Identifier	comTable		1074218	0					
ANR	1074528	Identifier	index		1074218	1					
ANR	1074529	Identifier	data_ptr		1074218	1					
ANR	1074530	IfStatement	if ( comTable [ index ] . is_cpp )		1074218	7					
ANR	1074531	Condition	comTable [ index ] . is_cpp	4004:7:120186:120207	1074218	0	True				
ANR	1074532	MemberAccess	comTable [ index ] . is_cpp		1074218	0					
ANR	1074533	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074534	Identifier	comTable		1074218	0					
ANR	1074535	Identifier	index		1074218	1					
ANR	1074536	Identifier	is_cpp		1074218	1					
ANR	1074537	CompoundStatement		60:32:1915:1915	1074218	1					
ANR	1074538	IfStatement	if ( comTable [ index ] . handlercpp )		1074218	0					
ANR	1074539	Condition	comTable [ index ] . handlercpp	4006:8:120279:120304	1074218	0	True				
ANR	1074540	MemberAccess	comTable [ index ] . handlercpp		1074218	0					
ANR	1074541	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074542	Identifier	comTable		1074218	0					
ANR	1074543	Identifier	index		1074218	1					
ANR	1074544	Identifier	handlercpp		1074218	1					
ANR	1074545	Statement	result	4007:4:120312:120317	1074218	1	True				
ANR	1074546	Statement	=	4007:11:120319:120319	1074218	1	True				
ANR	1074547	Statement	(	4007:13:120321:120321	1074218	2	True				
ANR	1074548	Statement	comTable	4007:14:120322:120329	1074218	3	True				
ANR	1074549	Statement	[	4007:22:120330:120330	1074218	4	True				
ANR	1074550	Statement	index	4007:23:120331:120335	1074218	5	True				
ANR	1074551	Statement	]	4007:28:120336:120336	1074218	6	True				
ANR	1074552	Statement	.	4007:29:120337:120337	1074218	7	True				
ANR	1074553	Statement	service	4007:30:120338:120344	1074218	8	True				
ANR	1074554	Statement	->*	4007:37:120345:120347	1074218	9	True				
ANR	1074555	Statement	(	4007:40:120348:120348	1074218	10	True				
ANR	1074556	Statement	comTable	4007:41:120349:120356	1074218	11	True				
ANR	1074557	Statement	[	4007:49:120357:120357	1074218	12	True				
ANR	1074558	Statement	index	4007:50:120358:120362	1074218	13	True				
ANR	1074559	Statement	]	4007:55:120363:120363	1074218	14	True				
ANR	1074560	Statement	.	4007:56:120364:120364	1074218	15	True				
ANR	1074561	Statement	handlercpp	4007:57:120365:120374	1074218	16	True				
ANR	1074562	Statement	)	4007:67:120375:120375	1074218	17	True				
ANR	1074563	Statement	)	4007:68:120376:120376	1074218	18	True				
ANR	1074564	ExpressionStatement	"req , stream"	4007:69:120377:120389	1074218	19	True				
ANR	1074565	Expression	"req , stream"		1074218	0					
ANR	1074566	Identifier	req		1074218	0					
ANR	1074567	Identifier	stream		1074218	1					
ANR	1074568	ElseStatement	else		1074218	0					
ANR	1074569	CompoundStatement		64:9:2104:2104	1074218	0					
ANR	1074570	IfStatement	if ( comTable [ index ] . handler )		1074218	0					
ANR	1074571	Condition	comTable [ index ] . handler	4010:8:120473:120495	1074218	0	True				
ANR	1074572	MemberAccess	comTable [ index ] . handler		1074218	0					
ANR	1074573	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074574	Identifier	comTable		1074218	0					
ANR	1074575	Identifier	index		1074218	1					
ANR	1074576	Identifier	handler		1074218	1					
ANR	1074577	ExpressionStatement	"result = ( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"	4011:4:120503:120576	1074218	1	True				
ANR	1074578	AssignmentExpression	"result = ( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"		1074218	0		=			
ANR	1074579	Identifier	result		1074218	0					
ANR	1074580	CallExpression	"( * ( comTable [ index ] . handler ) ) ( comTable [ index ] . service , req , stream )"		1074218	1					
ANR	1074581	Callee	* ( comTable [ index ] . handler )		1074218	0					
ANR	1074582	UnaryOperationExpression	* ( comTable [ index ] . handler )		1074218	0					
ANR	1074583	UnaryOperator	*		1074218	0					
ANR	1074584	MemberAccess	comTable [ index ] . handler		1074218	1					
ANR	1074585	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074586	Identifier	comTable		1074218	0					
ANR	1074587	Identifier	index		1074218	1					
ANR	1074588	Identifier	handler		1074218	1					
ANR	1074589	ArgumentList	comTable [ index ] . service		1074218	1					
ANR	1074590	Argument	comTable [ index ] . service		1074218	0					
ANR	1074591	MemberAccess	comTable [ index ] . service		1074218	0					
ANR	1074592	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074593	Identifier	comTable		1074218	0					
ANR	1074594	Identifier	index		1074218	1					
ANR	1074595	Identifier	service		1074218	1					
ANR	1074596	Argument	req		1074218	1					
ANR	1074597	Identifier	req		1074218	0					
ANR	1074598	Argument	stream		1074218	2					
ANR	1074599	Identifier	stream		1074218	0					
ANR	1074600	ExpressionStatement	curr_dataptr = NULL	4015:2:120609:120628	1074218	8	True				
ANR	1074601	AssignmentExpression	curr_dataptr = NULL		1074218	0		=			
ANR	1074602	Identifier	curr_dataptr		1074218	0					
ANR	1074603	Identifier	NULL		1074218	1					
ANR	1074604	IdentifierDeclStatement	UtcTime handler_stop_time ;	4017:2:120633:120658	1074218	9	True				
ANR	1074605	IdentifierDecl	handler_stop_time		1074218	0					
ANR	1074606	IdentifierDeclType	UtcTime		1074218	0					
ANR	1074607	Identifier	handler_stop_time		1074218	1					
ANR	1074608	ExpressionStatement	handler_stop_time . getTime ( )	4018:2:120662:120689	1074218	10	True				
ANR	1074609	CallExpression	handler_stop_time . getTime ( )		1074218	0					
ANR	1074610	Callee	handler_stop_time . getTime		1074218	0					
ANR	1074611	MemberAccess	handler_stop_time . getTime		1074218	0					
ANR	1074612	Identifier	handler_stop_time		1074218	0					
ANR	1074613	Identifier	getTime		1074218	1					
ANR	1074614	ArgumentList			1074218	1					
ANR	1074615	IdentifierDeclStatement	float handler_time = handler_stop_time . difference ( & handler_start_time ) ;	4019:2:120693:120763	1074218	11	True				
ANR	1074616	IdentifierDecl	handler_time = handler_stop_time . difference ( & handler_start_time )		1074218	0					
ANR	1074617	IdentifierDeclType	float		1074218	0					
ANR	1074618	Identifier	handler_time		1074218	1					
ANR	1074619	AssignmentExpression	handler_time = handler_stop_time . difference ( & handler_start_time )		1074218	2		=			
ANR	1074620	Identifier	handler_time		1074218	0					
ANR	1074621	CallExpression	handler_stop_time . difference ( & handler_start_time )		1074218	1					
ANR	1074622	Callee	handler_stop_time . difference		1074218	0					
ANR	1074623	MemberAccess	handler_stop_time . difference		1074218	0					
ANR	1074624	Identifier	handler_stop_time		1074218	0					
ANR	1074625	Identifier	difference		1074218	1					
ANR	1074626	ArgumentList	& handler_start_time		1074218	1					
ANR	1074627	Argument	& handler_start_time		1074218	0					
ANR	1074628	UnaryOperationExpression	& handler_start_time		1074218	0					
ANR	1074629	UnaryOperator	&		1074218	0					
ANR	1074630	Identifier	handler_start_time		1074218	1					
ANR	1074631	ExpressionStatement	"dprintf ( D_COMMAND , ""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"" , comTable [ index ] . handler_descrip , handler_time , time_spent_on_sec , time_spent_waiting_for_payload )"	4021:2:120768:120962	1074218	12	True				
ANR	1074632	CallExpression	"dprintf ( D_COMMAND , ""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"" , comTable [ index ] . handler_descrip , handler_time , time_spent_on_sec , time_spent_waiting_for_payload )"		1074218	0					
ANR	1074633	Callee	dprintf		1074218	0					
ANR	1074634	Identifier	dprintf		1074218	0					
ANR	1074635	ArgumentList	D_COMMAND		1074218	1					
ANR	1074636	Argument	D_COMMAND		1074218	0					
ANR	1074637	Identifier	D_COMMAND		1074218	0					
ANR	1074638	Argument	"""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"""		1074218	1					
ANR	1074639	PrimaryExpression	"""Return from HandleReq <%s> (handler: %.3fs, sec: %.3fs, payload: %.3fs)\\n"""		1074218	0					
ANR	1074640	Argument	comTable [ index ] . handler_descrip		1074218	2					
ANR	1074641	MemberAccess	comTable [ index ] . handler_descrip		1074218	0					
ANR	1074642	ArrayIndexing	comTable [ index ]		1074218	0					
ANR	1074643	Identifier	comTable		1074218	0					
ANR	1074644	Identifier	index		1074218	1					
ANR	1074645	Identifier	handler_descrip		1074218	1					
ANR	1074646	Argument	handler_time		1074218	3					
ANR	1074647	Identifier	handler_time		1074218	0					
ANR	1074648	Argument	time_spent_on_sec		1074218	4					
ANR	1074649	Identifier	time_spent_on_sec		1074218	0					
ANR	1074650	Argument	time_spent_waiting_for_payload		1074218	5					
ANR	1074651	Identifier	time_spent_waiting_for_payload		1074218	0					
ANR	1074652	IfStatement	if ( delete_stream && result != KEEP_STREAM )		1074218	6					
ANR	1074653	Condition	delete_stream && result != KEEP_STREAM	4025:6:120975:121012	1074218	0	True				
ANR	1074654	AndExpression	delete_stream && result != KEEP_STREAM		1074218	0		&&			
ANR	1074655	Identifier	delete_stream		1074218	0					
ANR	1074656	EqualityExpression	result != KEEP_STREAM		1074218	1		!=			
ANR	1074657	Identifier	result		1074218	0					
ANR	1074658	Identifier	KEEP_STREAM		1074218	1					
ANR	1074659	CompoundStatement		81:47:2720:2720	1074218	1					
ANR	1074660	Statement	delete	4026:2:121020:121025	1074218	0	True				
ANR	1074661	ExpressionStatement	stream	4026:9:121027:121033	1074218	1	True				
ANR	1074662	Identifier	stream		1074218	0					
ANR	1074663	ReturnStatement	return result ;	4029:1:121040:121053	1074218	7	True				
ANR	1074664	Identifier	result		1074218	0					
ANR	1074665	ReturnType	int		1074218	1					
ANR	1074666	Identifier	DaemonCore :: CallCommandHandler		1074218	2					
ANR	1074667	ParameterList	"int req , Stream * stream , bool delete_stream , bool check_payload , float time_spent_on_sec , float time_spent_waiting_for_payload"		1074218	3					
ANR	1074668	Parameter	int req	3944:31:118172:118178	1074218	0	True				
ANR	1074669	ParameterType	int		1074218	0					
ANR	1074670	Identifier	req		1074218	1					
ANR	1074671	Parameter	Stream * stream	3944:39:118180:118193	1074218	1	True				
ANR	1074672	ParameterType	Stream *		1074218	0					
ANR	1074673	Identifier	stream		1074218	1					
ANR	1074674	Parameter	bool delete_stream	3944:54:118195:118212	1074218	2	True				
ANR	1074675	ParameterType	bool		1074218	0					
ANR	1074676	Identifier	delete_stream		1074218	1					
ANR	1074677	Parameter	bool check_payload	3944:73:118214:118231	1074218	3	True				
ANR	1074678	ParameterType	bool		1074218	0					
ANR	1074679	Identifier	check_payload		1074218	1					
ANR	1074680	Parameter	float time_spent_on_sec	3944:92:118233:118255	1074218	4	True				
ANR	1074681	ParameterType	float		1074218	0					
ANR	1074682	Identifier	time_spent_on_sec		1074218	1					
ANR	1074683	Parameter	float time_spent_waiting_for_payload	3944:116:118257:118292	1074218	5	True				
ANR	1074684	ParameterType	float		1074218	0					
ANR	1074685	Identifier	time_spent_waiting_for_payload		1074218	1					
ANR	1074686	CFGEntryNode	ENTRY		1074218		True				
ANR	1074687	CFGExitNode	EXIT		1074218		True				
ANR	1074688	Symbol	* index		1074218						
ANR	1074689	Symbol	& DaemonCore :: HandleReqPayloadReady		1074218						
ANR	1074690	Symbol	comTable [ index ] . handlercpp		1074218						
ANR	1074691	Symbol	Register_Socket		1074218						
ANR	1074692	Symbol	curr_dataptr		1074218						
ANR	1074693	Symbol	KEEP_STREAM		1074218						
ANR	1074694	Symbol	* ( comTable [ index ] . handler )		1074218						
ANR	1074695	Symbol	comTable [ index ] . command_descrip		1074218						
ANR	1074696	Symbol	& handler_start_time		1074218						
ANR	1074697	Symbol	stream -> type		1074218						
ANR	1074698	Symbol	Stream :: reli_sock		1074218						
ANR	1074699	Symbol	& index		1074218						
ANR	1074700	Symbol	sock -> get_deadline		1074218						
ANR	1074701	Symbol	CommandNumToTableIndex		1074218						
ANR	1074702	Symbol	D_COMMAND		1074218						
ANR	1074703	Symbol	req		1074218						
ANR	1074704	Symbol	stream -> peer_description		1074218						
ANR	1074705	Symbol	NULL		1074218						
ANR	1074706	Symbol	time_spent_on_sec		1074218						
ANR	1074707	Symbol	this		1074218						
ANR	1074708	Symbol	index		1074218						
ANR	1074709	Symbol	rc		1074218						
ANR	1074710	Symbol	* * comTable		1074218						
ANR	1074711	Symbol	callback_desc		1074218						
ANR	1074712	Symbol	* stream		1074218						
ANR	1074713	Symbol	comTable [ index ] . wait_for_payload		1074218						
ANR	1074714	Symbol	sock -> deadline_expired		1074218						
ANR	1074715	Symbol	comTable [ index ] . handler		1074218						
ANR	1074716	Symbol	handler_time		1074218						
ANR	1074717	Symbol	delete_stream		1074218						
ANR	1074718	Symbol	result		1074218						
ANR	1074719	Symbol	sock -> getFullyQualifiedUser		1074218						
ANR	1074720	Symbol	* comTable		1074218						
ANR	1074721	Symbol	stream		1074218						
ANR	1074722	Symbol	comTable [ index ] . is_cpp		1074218						
ANR	1074723	Symbol	time_spent_waiting_for_payload		1074218						
ANR	1074724	Symbol	inServiceCommandSocket_flag		1074218						
ANR	1074725	Symbol	& comTable [ index ] . data_ptr		1074218						
ANR	1074726	Symbol	* comTable [ index ] . handler		1074218						
ANR	1074727	Symbol	* * index		1074218						
ANR	1074728	Symbol	* sock		1074218						
ANR	1074729	Symbol	handler_stop_time . difference		1074218						
ANR	1074730	Symbol	handler_start_time		1074218						
ANR	1074731	Symbol	handler_stop_time		1074218						
ANR	1074732	Symbol	D_ALWAYS		1074218						
ANR	1074733	Symbol	check_payload		1074218						
ANR	1074734	Symbol	callback_info		1074218						
ANR	1074735	Symbol	comTable [ index ] . handler_descrip		1074218						
ANR	1074736	Symbol	old_deadline		1074218						
ANR	1074737	Symbol	sock		1074218						
ANR	1074738	Symbol	sock -> readReady		1074218						
ANR	1074739	Symbol	comTable		1074218						
ANR	1074740	Symbol	reqFound		1074218						
ANR	1074741	Symbol	FALSE		1074218						
ANR	1074742	Symbol	user		1074218						
ANR	1074743	Symbol	comTable [ index ] . service		1074218						
ANR	1074744	Function	DaemonCore :: CheckPrivState	4032:0:121058:121798							
ANR	1074745	FunctionDef	DaemonCore :: CheckPrivState ()		1074744	0					
ANR	1074746	CompoundStatement		4034:0:121098:121798	1074744	0					
ANR	1074747	IdentifierDeclStatement	priv_state old_priv = set_priv ( Default_Priv_State ) ;	4037:1:121216:121268	1074744	0	True				
ANR	1074748	IdentifierDecl	old_priv = set_priv ( Default_Priv_State )		1074744	0					
ANR	1074749	IdentifierDeclType	priv_state		1074744	0					
ANR	1074750	Identifier	old_priv		1074744	1					
ANR	1074751	AssignmentExpression	old_priv = set_priv ( Default_Priv_State )		1074744	2		=			
ANR	1074752	Identifier	old_priv		1074744	0					
ANR	1074753	CallExpression	set_priv ( Default_Priv_State )		1074744	1					
ANR	1074754	Callee	set_priv		1074744	0					
ANR	1074755	Identifier	set_priv		1074744	0					
ANR	1074756	ArgumentList	Default_Priv_State		1074744	1					
ANR	1074757	Argument	Default_Priv_State		1074744	0					
ANR	1074758	Identifier	Default_Priv_State		1074744	0					
ANR	1074759	IfStatement	if ( Default_Priv_State == PRIV_USER )		1074744	1					
ANR	1074760	Condition	Default_Priv_State == PRIV_USER	4041:6:121356:121386	1074744	0	True				
ANR	1074761	EqualityExpression	Default_Priv_State == PRIV_USER		1074744	0		==			
ANR	1074762	Identifier	Default_Priv_State		1074744	0					
ANR	1074763	Identifier	PRIV_USER		1074744	1					
ANR	1074764	CompoundStatement		8:40:291:291	1074744	1					
ANR	1074765	ReturnStatement	return ;	4042:2:121394:121400	1074744	0	True				
ANR	1074766	IfStatement	if ( old_priv != Default_Priv_State )		1074744	2					
ANR	1074767	Condition	old_priv != Default_Priv_State	4047:5:121464:121493	1074744	0	True				
ANR	1074768	EqualityExpression	old_priv != Default_Priv_State		1074744	0		!=			
ANR	1074769	Identifier	old_priv		1074744	0					
ANR	1074770	Identifier	Default_Priv_State		1074744	1					
ANR	1074771	CompoundStatement		14:38:398:398	1074744	1					
ANR	1074772	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore ERROR: Handler returned with priv state %d\\n"" , old_priv )"	4048:2:121501:121599	1074744	0	True				
ANR	1074773	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore ERROR: Handler returned with priv state %d\\n"" , old_priv )"		1074744	0					
ANR	1074774	Callee	dprintf		1074744	0					
ANR	1074775	Identifier	dprintf		1074744	0					
ANR	1074776	ArgumentList	D_ALWAYS		1074744	1					
ANR	1074777	Argument	D_ALWAYS		1074744	0					
ANR	1074778	Identifier	D_ALWAYS		1074744	0					
ANR	1074779	Argument	"""DaemonCore ERROR: Handler returned with priv state %d\\n"""		1074744	1					
ANR	1074780	PrimaryExpression	"""DaemonCore ERROR: Handler returned with priv state %d\\n"""		1074744	0					
ANR	1074781	Argument	old_priv		1074744	2					
ANR	1074782	Identifier	old_priv		1074744	0					
ANR	1074783	ExpressionStatement	"dprintf ( D_ALWAYS , ""History of priv-state changes:\\n"" )"	4051:2:121603:121658	1074744	1	True				
ANR	1074784	CallExpression	"dprintf ( D_ALWAYS , ""History of priv-state changes:\\n"" )"		1074744	0					
ANR	1074785	Callee	dprintf		1074744	0					
ANR	1074786	Identifier	dprintf		1074744	0					
ANR	1074787	ArgumentList	D_ALWAYS		1074744	1					
ANR	1074788	Argument	D_ALWAYS		1074744	0					
ANR	1074789	Identifier	D_ALWAYS		1074744	0					
ANR	1074790	Argument	"""History of priv-state changes:\\n"""		1074744	1					
ANR	1074791	PrimaryExpression	"""History of priv-state changes:\\n"""		1074744	0					
ANR	1074792	ExpressionStatement	display_priv_log ( )	4052:2:121662:121680	1074744	2	True				
ANR	1074793	CallExpression	display_priv_log ( )		1074744	0					
ANR	1074794	Callee	display_priv_log		1074744	0					
ANR	1074795	Identifier	display_priv_log		1074744	0					
ANR	1074796	ArgumentList			1074744	1					
ANR	1074797	IfStatement	"if ( param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false ) )"		1074744	3					
ANR	1074798	Condition	"param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false )"	4053:6:121688:121733	1074744	0	True				
ANR	1074799	CallExpression	"param_boolean_crufty ( ""EXCEPT_ON_ERROR"" , false )"		1074744	0					
ANR	1074800	Callee	param_boolean_crufty		1074744	0					
ANR	1074801	Identifier	param_boolean_crufty		1074744	0					
ANR	1074802	ArgumentList	"""EXCEPT_ON_ERROR"""		1074744	1					
ANR	1074803	Argument	"""EXCEPT_ON_ERROR"""		1074744	0					
ANR	1074804	PrimaryExpression	"""EXCEPT_ON_ERROR"""		1074744	0					
ANR	1074805	Argument	false		1074744	1					
ANR	1074806	Identifier	false		1074744	0					
ANR	1074807	CompoundStatement		20:54:637:637	1074744	1					
ANR	1074808	ExpressionStatement	"EXCEPT ( ""Priv-state error found by DaemonCore"" )"	4054:3:121741:121789	1074744	0	True				
ANR	1074809	CallExpression	"EXCEPT ( ""Priv-state error found by DaemonCore"" )"		1074744	0					
ANR	1074810	Callee	EXCEPT		1074744	0					
ANR	1074811	Identifier	EXCEPT		1074744	0					
ANR	1074812	ArgumentList	"""Priv-state error found by DaemonCore"""		1074744	1					
ANR	1074813	Argument	"""Priv-state error found by DaemonCore"""		1074744	0					
ANR	1074814	PrimaryExpression	"""Priv-state error found by DaemonCore"""		1074744	0					
ANR	1074815	ReturnType	void		1074744	1					
ANR	1074816	Identifier	DaemonCore :: CheckPrivState		1074744	2					
ANR	1074817	ParameterList			1074744	3					
ANR	1074818	CFGEntryNode	ENTRY		1074744		True				
ANR	1074819	CFGExitNode	EXIT		1074744		True				
ANR	1074820	Symbol	old_priv		1074744						
ANR	1074821	Symbol	set_priv		1074744						
ANR	1074822	Symbol	PRIV_USER		1074744						
ANR	1074823	Symbol	D_ALWAYS		1074744						
ANR	1074824	Symbol	false		1074744						
ANR	1074825	Symbol	param_boolean_crufty		1074744						
ANR	1074826	Symbol	Default_Priv_State		1074744						
ANR	1074827	Function	DaemonCore :: ServiceCommandSocket	4059:0:121801:123075							
ANR	1074828	FunctionDef	DaemonCore :: ServiceCommandSocket ()		1074827	0					
ANR	1074829	CompoundStatement		4060:0:121840:123075	1074827	0					
ANR	1074830	IdentifierDeclStatement	Selector selector ;	4061:1:121843:121860	1074827	0	True				
ANR	1074831	IdentifierDecl	selector		1074827	0					
ANR	1074832	IdentifierDeclType	Selector		1074827	0					
ANR	1074833	Identifier	selector		1074827	1					
ANR	1074834	IdentifierDeclStatement	int commands_served = 0 ;	4062:1:121863:121886	1074827	1	True				
ANR	1074835	IdentifierDecl	commands_served = 0		1074827	0					
ANR	1074836	IdentifierDeclType	int		1074827	0					
ANR	1074837	Identifier	commands_served		1074827	1					
ANR	1074838	AssignmentExpression	commands_served = 0		1074827	2		=			
ANR	1074839	Identifier	commands_served		1074827	0					
ANR	1074840	PrimaryExpression	0		1074827	1					
ANR	1074841	IfStatement	if ( inServiceCommandSocket_flag )		1074827	2					
ANR	1074842	Condition	inServiceCommandSocket_flag	4064:6:121895:121921	1074827	0	True				
ANR	1074843	Identifier	inServiceCommandSocket_flag		1074827	0					
ANR	1074844	CompoundStatement		5:36:84:84	1074827	1					
ANR	1074845	ReturnStatement	return 0 ;	4067:2:122027:122035	1074827	0	True				
ANR	1074846	PrimaryExpression	0		1074827	0					
ANR	1074847	IfStatement	if ( initial_command_sock == - 1 )		1074827	3					
ANR	1074848	Condition	initial_command_sock == - 1	4071:6:122093:122118	1074827	0	True				
ANR	1074849	EqualityExpression	initial_command_sock == - 1		1074827	0		==			
ANR	1074850	Identifier	initial_command_sock		1074827	0					
ANR	1074851	UnaryOperationExpression	- 1		1074827	1					
ANR	1074852	UnaryOperator	-		1074827	0					
ANR	1074853	PrimaryExpression	1		1074827	1					
ANR	1074854	ReturnStatement	return 0 ;	4072:2:122124:122132	1074827	1	True				
ANR	1074855	PrimaryExpression	0		1074827	0					
ANR	1074856	IfStatement	if ( ! ( ( * sockTable ) [ initial_command_sock ] . iosock ) )		1074827	4					
ANR	1074857	Condition	! ( ( * sockTable ) [ initial_command_sock ] . iosock )	4073:6:122140:122184	1074827	0	True				
ANR	1074858	UnaryOperationExpression	! ( ( * sockTable ) [ initial_command_sock ] . iosock )		1074827	0					
ANR	1074859	UnaryOperator	!		1074827	0					
ANR	1074860	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1074827	1					
ANR	1074861	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1074827	0					
ANR	1074862	UnaryOperationExpression	* sockTable		1074827	0					
ANR	1074863	UnaryOperator	*		1074827	0					
ANR	1074864	Identifier	sockTable		1074827	1					
ANR	1074865	Identifier	initial_command_sock		1074827	1					
ANR	1074866	Identifier	iosock		1074827	1					
ANR	1074867	ReturnStatement	return 0 ;	4074:2:122190:122198	1074827	1	True				
ANR	1074868	PrimaryExpression	0		1074827	0					
ANR	1074869	ExpressionStatement	selector . set_timeout ( 0 )	4077:1:122273:122298	1074827	5	True				
ANR	1074870	CallExpression	selector . set_timeout ( 0 )		1074827	0					
ANR	1074871	Callee	selector . set_timeout		1074827	0					
ANR	1074872	MemberAccess	selector . set_timeout		1074827	0					
ANR	1074873	Identifier	selector		1074827	0					
ANR	1074874	Identifier	set_timeout		1074827	1					
ANR	1074875	ArgumentList	0		1074827	1					
ANR	1074876	Argument	0		1074827	0					
ANR	1074877	PrimaryExpression	0		1074827	0					
ANR	1074878	ExpressionStatement	"selector . add_fd ( ( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"	4078:1:122301:122403	1074827	6	True				
ANR	1074879	CallExpression	"selector . add_fd ( ( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( ) , Selector :: IO_READ )"		1074827	0					
ANR	1074880	Callee	selector . add_fd		1074827	0					
ANR	1074881	MemberAccess	selector . add_fd		1074827	0					
ANR	1074882	Identifier	selector		1074827	0					
ANR	1074883	Identifier	add_fd		1074827	1					
ANR	1074884	ArgumentList	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		1074827	1					
ANR	1074885	Argument	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		1074827	0					
ANR	1074886	CallExpression	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc ( )		1074827	0					
ANR	1074887	Callee	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		1074827	0					
ANR	1074888	PtrMemberAccess	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		1074827	0					
ANR	1074889	MemberAccess	( * sockTable ) [ initial_command_sock ] . iosock		1074827	0					
ANR	1074890	ArrayIndexing	( * sockTable ) [ initial_command_sock ]		1074827	0					
ANR	1074891	UnaryOperationExpression	* sockTable		1074827	0					
ANR	1074892	UnaryOperator	*		1074827	0					
ANR	1074893	Identifier	sockTable		1074827	1					
ANR	1074894	Identifier	initial_command_sock		1074827	1					
ANR	1074895	Identifier	iosock		1074827	1					
ANR	1074896	Identifier	get_file_desc		1074827	1					
ANR	1074897	ArgumentList			1074827	1					
ANR	1074898	Argument	Selector :: IO_READ		1074827	1					
ANR	1074899	Identifier	Selector :: IO_READ		1074827	0					
ANR	1074900	ExpressionStatement	inServiceCommandSocket_flag = TRUE	4081:1:122407:122441	1074827	7	True				
ANR	1074901	AssignmentExpression	inServiceCommandSocket_flag = TRUE		1074827	0		=			
ANR	1074902	Identifier	inServiceCommandSocket_flag		1074827	0					
ANR	1074903	Identifier	TRUE		1074827	1					
ANR	1074904	DoStatement	do		1074827	8					
ANR	1074905	CompoundStatement		23:4:606:606	1074827	0					
ANR	1074906	ExpressionStatement	errno = 0	4084:2:122452:122461	1074827	0	True				
ANR	1074907	AssignmentExpression	errno = 0		1074827	0		=			
ANR	1074908	Identifier	errno		1074827	0					
ANR	1074909	PrimaryExpression	0		1074827	1					
ANR	1074910	ExpressionStatement	selector . execute ( )	4085:2:122465:122483	1074827	1	True				
ANR	1074911	CallExpression	selector . execute ( )		1074827	0					
ANR	1074912	Callee	selector . execute		1074827	0					
ANR	1074913	MemberAccess	selector . execute		1074827	0					
ANR	1074914	Identifier	selector		1074827	0					
ANR	1074915	Identifier	execute		1074827	1					
ANR	1074916	ArgumentList			1074827	1					
ANR	1074917	IfStatement	if ( selector . failed ( ) )		1074827	2					
ANR	1074918	Condition	selector . failed ( )	4088:7:122516:122532	1074827	0	True				
ANR	1074919	CallExpression	selector . failed ( )		1074827	0					
ANR	1074920	Callee	selector . failed		1074827	0					
ANR	1074921	MemberAccess	selector . failed		1074827	0					
ANR	1074922	Identifier	selector		1074827	0					
ANR	1074923	Identifier	failed		1074827	1					
ANR	1074924	ArgumentList			1074827	1					
ANR	1074925	CompoundStatement		29:27:695:695	1074827	1					
ANR	1074926	ExpressionStatement	"EXCEPT ( ""select, error # = %d"" , errno )"	4090:4:122585:122622	1074827	0	True				
ANR	1074927	CallExpression	"EXCEPT ( ""select, error # = %d"" , errno )"		1074827	0					
ANR	1074928	Callee	EXCEPT		1074827	0					
ANR	1074929	Identifier	EXCEPT		1074827	0					
ANR	1074930	ArgumentList	"""select, error # = %d"""		1074827	1					
ANR	1074931	Argument	"""select, error # = %d"""		1074827	0					
ANR	1074932	PrimaryExpression	"""select, error # = %d"""		1074827	0					
ANR	1074933	Argument	errno		1074827	1					
ANR	1074934	Identifier	errno		1074827	0					
ANR	1074935	IfStatement	if ( selector . has_ready ( ) )		1074827	3					
ANR	1074936	Condition	selector . has_ready ( )	4099:7:122769:122788	1074827	0	True				
ANR	1074937	CallExpression	selector . has_ready ( )		1074827	0					
ANR	1074938	Callee	selector . has_ready		1074827	0					
ANR	1074939	MemberAccess	selector . has_ready		1074827	0					
ANR	1074940	Identifier	selector		1074827	0					
ANR	1074941	Identifier	has_ready		1074827	1					
ANR	1074942	ArgumentList			1074827	1					
ANR	1074943	CompoundStatement		40:30:951:951	1074827	1					
ANR	1074944	ExpressionStatement	HandleReq ( initial_command_sock )	4100:3:122797:122830	1074827	0	True				
ANR	1074945	CallExpression	HandleReq ( initial_command_sock )		1074827	0					
ANR	1074946	Callee	HandleReq		1074827	0					
ANR	1074947	Identifier	HandleReq		1074827	0					
ANR	1074948	ArgumentList	initial_command_sock		1074827	1					
ANR	1074949	Argument	initial_command_sock		1074827	0					
ANR	1074950	Identifier	initial_command_sock		1074827	0					
ANR	1074951	ExpressionStatement	commands_served ++	4101:3:122835:122852	1074827	1	True				
ANR	1074952	PostIncDecOperationExpression	commands_served ++		1074827	0					
ANR	1074953	Identifier	commands_served		1074827	0					
ANR	1074954	IncDec	++		1074827	1					
ANR	1074955	ExpressionStatement	CheckPrivState ( )	4103:3:122904:122920	1074827	2	True				
ANR	1074956	CallExpression	CheckPrivState ( )		1074827	0					
ANR	1074957	Callee	CheckPrivState		1074827	0					
ANR	1074958	Identifier	CheckPrivState		1074827	0					
ANR	1074959	ArgumentList			1074827	1					
ANR	1074960	Condition	selector . has_ready ( )	4106:11:122938:122957	1074827	1	True				
ANR	1074961	CallExpression	selector . has_ready ( )		1074827	0					
ANR	1074962	Callee	selector . has_ready		1074827	0					
ANR	1074963	MemberAccess	selector . has_ready		1074827	0					
ANR	1074964	Identifier	selector		1074827	0					
ANR	1074965	Identifier	has_ready		1074827	1					
ANR	1074966	ArgumentList			1074827	1					
ANR	1074967	ExpressionStatement	inServiceCommandSocket_flag = FALSE	4108:1:123013:123048	1074827	9	True				
ANR	1074968	AssignmentExpression	inServiceCommandSocket_flag = FALSE		1074827	0		=			
ANR	1074969	Identifier	inServiceCommandSocket_flag		1074827	0					
ANR	1074970	Identifier	FALSE		1074827	1					
ANR	1074971	ReturnStatement	return commands_served ;	4109:1:123051:123073	1074827	10	True				
ANR	1074972	Identifier	commands_served		1074827	0					
ANR	1074973	ReturnType	int		1074827	1					
ANR	1074974	Identifier	DaemonCore :: ServiceCommandSocket		1074827	2					
ANR	1074975	ParameterList			1074827	3					
ANR	1074976	CFGEntryNode	ENTRY		1074827		True				
ANR	1074977	CFGExitNode	EXIT		1074827		True				
ANR	1074978	Symbol	errno		1074827						
ANR	1074979	Symbol	* * * sockTable		1074827						
ANR	1074980	Symbol	( * sockTable ) [ initial_command_sock ] . iosock -> get_file_desc		1074827						
ANR	1074981	Symbol	selector . failed		1074827						
ANR	1074982	Symbol	sockTable		1074827						
ANR	1074983	Symbol	selector . has_ready		1074827						
ANR	1074984	Symbol	TRUE		1074827						
ANR	1074985	Symbol	* * sockTable		1074827						
ANR	1074986	Symbol	Selector :: IO_READ		1074827						
ANR	1074987	Symbol	commands_served		1074827						
ANR	1074988	Symbol	* ( * sockTable ) [ initial_command_sock ] . iosock		1074827						
ANR	1074989	Symbol	( * sockTable ) [ initial_command_sock ] . iosock		1074827						
ANR	1074990	Symbol	* sockTable		1074827						
ANR	1074991	Symbol	initial_command_sock		1074827						
ANR	1074992	Symbol	* * initial_command_sock		1074827						
ANR	1074993	Symbol	inServiceCommandSocket_flag		1074827						
ANR	1074994	Symbol	selector		1074827						
ANR	1074995	Symbol	FALSE		1074827						
ANR	1074996	Symbol	* initial_command_sock		1074827						
ANR	1074997	Function	DaemonCore :: HandleReqSocketTimerHandler	4113:0:123079:123739							
ANR	1074998	FunctionDef	DaemonCore :: HandleReqSocketTimerHandler ()		1074997	0					
ANR	1074999	CompoundStatement		4114:0:123125:123739	1074997	0					
ANR	1075000	IdentifierDeclStatement	Stream * stream = NULL ;	4115:1:123128:123149	1074997	0	True				
ANR	1075001	IdentifierDecl	* stream = NULL		1074997	0					
ANR	1075002	IdentifierDeclType	Stream *		1074997	0					
ANR	1075003	Identifier	stream		1074997	1					
ANR	1075004	AssignmentExpression	* stream = NULL		1074997	2		=			
ANR	1075005	Identifier	NULL		1074997	0					
ANR	1075006	Identifier	NULL		1074997	1					
ANR	1075007	ExpressionStatement	stream = ( Stream * ) GetDataPtr ( )	4123:1:123412:123443	1074997	1	True				
ANR	1075008	AssignmentExpression	stream = ( Stream * ) GetDataPtr ( )		1074997	0		=			
ANR	1075009	Identifier	stream		1074997	0					
ANR	1075010	CastExpression	( Stream * ) GetDataPtr ( )		1074997	1					
ANR	1075011	CastTarget	Stream *		1074997	0					
ANR	1075012	CallExpression	GetDataPtr ( )		1074997	1					
ANR	1075013	Callee	GetDataPtr		1074997	0					
ANR	1075014	Identifier	GetDataPtr		1074997	0					
ANR	1075015	ArgumentList			1074997	1					
ANR	1075016	ExpressionStatement	ASSERT ( stream )	4124:1:123446:123460	1074997	2	True				
ANR	1075017	CallExpression	ASSERT ( stream )		1074997	0					
ANR	1075018	Callee	ASSERT		1074997	0					
ANR	1075019	Identifier	ASSERT		1074997	0					
ANR	1075020	ArgumentList	stream		1074997	1					
ANR	1075021	Argument	stream		1074997	0					
ANR	1075022	Identifier	stream		1074997	0					
ANR	1075023	ExpressionStatement	ASSERT ( stream -> type ( ) == Stream :: reli_sock )	4125:1:123463:123508	1074997	3	True				
ANR	1075024	CallExpression	ASSERT ( stream -> type ( ) == Stream :: reli_sock )		1074997	0					
ANR	1075025	Callee	ASSERT		1074997	0					
ANR	1075026	Identifier	ASSERT		1074997	0					
ANR	1075027	ArgumentList	stream -> type ( ) == Stream :: reli_sock		1074997	1					
ANR	1075028	Argument	stream -> type ( ) == Stream :: reli_sock		1074997	0					
ANR	1075029	EqualityExpression	stream -> type ( ) == Stream :: reli_sock		1074997	0		==			
ANR	1075030	CallExpression	stream -> type ( )		1074997	0					
ANR	1075031	Callee	stream -> type		1074997	0					
ANR	1075032	PtrMemberAccess	stream -> type		1074997	0					
ANR	1075033	Identifier	stream		1074997	0					
ANR	1075034	Identifier	type		1074997	1					
ANR	1075035	ArgumentList			1074997	1					
ANR	1075036	Identifier	Stream :: reli_sock		1074997	1					
ANR	1075037	ExpressionStatement	Cancel_Socket ( stream )	4128:1:123541:123562	1074997	4	True				
ANR	1075038	CallExpression	Cancel_Socket ( stream )		1074997	0					
ANR	1075039	Callee	Cancel_Socket		1074997	0					
ANR	1075040	Identifier	Cancel_Socket		1074997	0					
ANR	1075041	ArgumentList	stream		1074997	1					
ANR	1075042	Argument	stream		1074997	0					
ANR	1075043	Identifier	stream		1074997	0					
ANR	1075044	ExpressionStatement	"dprintf ( D_ALWAYS , ""Closing socket from %s - no data received\\n"" , ( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( ) )"	4131:1:123590:123706	1074997	5	True				
ANR	1075045	CallExpression	"dprintf ( D_ALWAYS , ""Closing socket from %s - no data received\\n"" , ( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( ) )"		1074997	0					
ANR	1075046	Callee	dprintf		1074997	0					
ANR	1075047	Identifier	dprintf		1074997	0					
ANR	1075048	ArgumentList	D_ALWAYS		1074997	1					
ANR	1075049	Argument	D_ALWAYS		1074997	0					
ANR	1075050	Identifier	D_ALWAYS		1074997	0					
ANR	1075051	Argument	"""Closing socket from %s - no data received\\n"""		1074997	1					
ANR	1075052	PrimaryExpression	"""Closing socket from %s - no data received\\n"""		1074997	0					
ANR	1075053	Argument	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( )		1074997	2					
ANR	1075054	CallExpression	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value ( )		1074997	0					
ANR	1075055	Callee	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		1074997	0					
ANR	1075056	MemberAccess	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		1074997	0					
ANR	1075057	CallExpression	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( )		1074997	0					
ANR	1075058	Callee	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		1074997	0					
ANR	1075059	MemberAccess	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		1074997	0					
ANR	1075060	CallExpression	( ( Sock * ) stream ) -> peer_addr ( )		1074997	0					
ANR	1075061	Callee	( ( Sock * ) stream ) -> peer_addr		1074997	0					
ANR	1075062	PtrMemberAccess	( ( Sock * ) stream ) -> peer_addr		1074997	0					
ANR	1075063	CastExpression	( Sock * ) stream		1074997	0					
ANR	1075064	CastTarget	Sock *		1074997	0					
ANR	1075065	Identifier	stream		1074997	1					
ANR	1075066	Identifier	peer_addr		1074997	1					
ANR	1075067	ArgumentList			1074997	1					
ANR	1075068	Identifier	to_sinful		1074997	1					
ANR	1075069	ArgumentList			1074997	1					
ANR	1075070	Identifier	Value		1074997	1					
ANR	1075071	ArgumentList			1074997	1					
ANR	1075072	Statement	delete	4133:1:123709:123714	1074997	6	True				
ANR	1075073	ExpressionStatement	stream	4133:8:123716:123722	1074997	7	True				
ANR	1075074	Identifier	stream		1074997	0					
ANR	1075075	ReturnStatement	return TRUE ;	4135:1:123726:123737	1074997	8	True				
ANR	1075076	Identifier	TRUE		1074997	0					
ANR	1075077	ReturnType	int		1074997	1					
ANR	1075078	Identifier	DaemonCore :: HandleReqSocketTimerHandler		1074997	2					
ANR	1075079	ParameterList			1074997	3					
ANR	1075080	CFGEntryNode	ENTRY		1074997		True				
ANR	1075081	CFGExitNode	EXIT		1074997		True				
ANR	1075082	Symbol	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful		1074997						
ANR	1075083	Symbol	( ( Sock * ) stream ) -> peer_addr ( ) . to_sinful ( ) . Value		1074997						
ANR	1075084	Symbol	NULL		1074997						
ANR	1075085	Symbol	stream		1074997						
ANR	1075086	Symbol	( ( Sock * ) stream ) -> peer_addr		1074997						
ANR	1075087	Symbol	stream -> type		1074997						
ANR	1075088	Symbol	* stream		1074997						
ANR	1075089	Symbol	D_ALWAYS		1074997						
ANR	1075090	Symbol	TRUE		1074997						
ANR	1075091	Symbol	GetDataPtr		1074997						
ANR	1075092	Symbol	Stream :: reli_sock		1074997						
ANR	1075093	Function	DaemonCore :: HandleReqSocketHandler	4139:0:123743:124842							
ANR	1075094	FunctionDef	DaemonCore :: HandleReqSocketHandler (Stream * stream)		1075093	0					
ANR	1075095	CompoundStatement		4140:0:123798:124842	1075093	0					
ANR	1075096	IdentifierDeclStatement	int * timeout_tid = NULL ;	4141:1:123801:123824	1075093	0	True				
ANR	1075097	IdentifierDecl	* timeout_tid = NULL		1075093	0					
ANR	1075098	IdentifierDeclType	int *		1075093	0					
ANR	1075099	Identifier	timeout_tid		1075093	1					
ANR	1075100	AssignmentExpression	* timeout_tid = NULL		1075093	2		=			
ANR	1075101	Identifier	NULL		1075093	0					
ANR	1075102	Identifier	NULL		1075093	1					
ANR	1075103	ExpressionStatement	timeout_tid = ( int * ) GetDataPtr ( )	4149:1:124041:124075	1075093	1	True				
ANR	1075104	AssignmentExpression	timeout_tid = ( int * ) GetDataPtr ( )		1075093	0		=			
ANR	1075105	Identifier	timeout_tid		1075093	0					
ANR	1075106	CastExpression	( int * ) GetDataPtr ( )		1075093	1					
ANR	1075107	CastTarget	int *		1075093	0					
ANR	1075108	CallExpression	GetDataPtr ( )		1075093	1					
ANR	1075109	Callee	GetDataPtr		1075093	0					
ANR	1075110	Identifier	GetDataPtr		1075093	0					
ANR	1075111	ArgumentList			1075093	1					
ANR	1075112	ExpressionStatement	ASSERT ( timeout_tid )	4150:1:124078:124097	1075093	2	True				
ANR	1075113	CallExpression	ASSERT ( timeout_tid )		1075093	0					
ANR	1075114	Callee	ASSERT		1075093	0					
ANR	1075115	Identifier	ASSERT		1075093	0					
ANR	1075116	ArgumentList	timeout_tid		1075093	1					
ANR	1075117	Argument	timeout_tid		1075093	0					
ANR	1075118	Identifier	timeout_tid		1075093	0					
ANR	1075119	ExpressionStatement	Cancel_Timer ( * timeout_tid )	4152:1:124101:124127	1075093	3	True				
ANR	1075120	CallExpression	Cancel_Timer ( * timeout_tid )		1075093	0					
ANR	1075121	Callee	Cancel_Timer		1075093	0					
ANR	1075122	Identifier	Cancel_Timer		1075093	0					
ANR	1075123	ArgumentList	* timeout_tid		1075093	1					
ANR	1075124	Argument	* timeout_tid		1075093	0					
ANR	1075125	UnaryOperationExpression	* timeout_tid		1075093	0					
ANR	1075126	UnaryOperator	*		1075093	0					
ANR	1075127	Identifier	timeout_tid		1075093	1					
ANR	1075128	Statement	delete	4153:1:124130:124135	1075093	4	True				
ANR	1075129	ExpressionStatement	timeout_tid	4153:8:124137:124148	1075093	5	True				
ANR	1075130	Identifier	timeout_tid		1075093	0					
ANR	1075131	ExpressionStatement	Cancel_Socket ( stream )	4159:1:124448:124469	1075093	6	True				
ANR	1075132	CallExpression	Cancel_Socket ( stream )		1075093	0					
ANR	1075133	Callee	Cancel_Socket		1075093	0					
ANR	1075134	Identifier	Cancel_Socket		1075093	0					
ANR	1075135	ArgumentList	stream		1075093	1					
ANR	1075136	Argument	stream		1075093	0					
ANR	1075137	Identifier	stream		1075093	0					
ANR	1075138	IdentifierDeclStatement	int ret_val = HandleReq ( stream ) ;	4162:1:124547:124579	1075093	7	True				
ANR	1075139	IdentifierDecl	ret_val = HandleReq ( stream )		1075093	0					
ANR	1075140	IdentifierDeclType	int		1075093	0					
ANR	1075141	Identifier	ret_val		1075093	1					
ANR	1075142	AssignmentExpression	ret_val = HandleReq ( stream )		1075093	2		=			
ANR	1075143	Identifier	ret_val		1075093	0					
ANR	1075144	CallExpression	HandleReq ( stream )		1075093	1					
ANR	1075145	Callee	HandleReq		1075093	0					
ANR	1075146	Identifier	HandleReq		1075093	0					
ANR	1075147	ArgumentList	stream		1075093	1					
ANR	1075148	Argument	stream		1075093	0					
ANR	1075149	Identifier	stream		1075093	0					
ANR	1075150	IfStatement	if ( ret_val != KEEP_STREAM )		1075093	8					
ANR	1075151	Condition	ret_val != KEEP_STREAM	4165:6:124656:124677	1075093	0	True				
ANR	1075152	EqualityExpression	ret_val != KEEP_STREAM		1075093	0		!=			
ANR	1075153	Identifier	ret_val		1075093	0					
ANR	1075154	Identifier	KEEP_STREAM		1075093	1					
ANR	1075155	CompoundStatement		26:31:882:882	1075093	1					
ANR	1075156	Statement	delete	4166:2:124685:124690	1075093	0	True				
ANR	1075157	ExpressionStatement	stream	4166:9:124692:124698	1075093	1	True				
ANR	1075158	Identifier	stream		1075093	0					
ANR	1075159	ReturnStatement	return KEEP_STREAM ;	4171:1:124822:124840	1075093	9	True				
ANR	1075160	Identifier	KEEP_STREAM		1075093	0					
ANR	1075161	ReturnType	int		1075093	1					
ANR	1075162	Identifier	DaemonCore :: HandleReqSocketHandler		1075093	2					
ANR	1075163	ParameterList	Stream * stream		1075093	3					
ANR	1075164	Parameter	Stream * stream	4139:39:123782:123795	1075093	0	True				
ANR	1075165	ParameterType	Stream *		1075093	0					
ANR	1075166	Identifier	stream		1075093	1					
ANR	1075167	CFGEntryNode	ENTRY		1075093		True				
ANR	1075168	CFGExitNode	EXIT		1075093		True				
ANR	1075169	Symbol	HandleReq		1075093						
ANR	1075170	Symbol	NULL		1075093						
ANR	1075171	Symbol	* timeout_tid		1075093						
ANR	1075172	Symbol	stream		1075093						
ANR	1075173	Symbol	timeout_tid		1075093						
ANR	1075174	Symbol	GetDataPtr		1075093						
ANR	1075175	Symbol	ret_val		1075093						
ANR	1075176	Symbol	KEEP_STREAM		1075093						
ANR	1075177	Function	DaemonCore :: RegisterSocketForHandleReq	4174:0:124845:126651							
ANR	1075178	FunctionDef	DaemonCore :: RegisterSocketForHandleReq (Stream * stream)		1075177	0					
ANR	1075179	CompoundStatement		4176:0:124905:126651	1075177	0					
ANR	1075180	IdentifierDeclStatement	"int tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this ) ;"	4185:1:125370:125531	1075177	0	True				
ANR	1075181	IdentifierDecl	"tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		1075177	0					
ANR	1075182	IdentifierDeclType	int		1075177	0					
ANR	1075183	Identifier	tid		1075177	1					
ANR	1075184	AssignmentExpression	"tid = daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		1075177	2		=			
ANR	1075185	Identifier	tid		1075177	0					
ANR	1075186	CallExpression	"daemonCore -> Register_Timer ( 200 , ( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler , ""DaemonCore::HandleReqSocketTimerHandler"" , this )"		1075177	1					
ANR	1075187	Callee	daemonCore -> Register_Timer		1075177	0					
ANR	1075188	PtrMemberAccess	daemonCore -> Register_Timer		1075177	0					
ANR	1075189	Identifier	daemonCore		1075177	0					
ANR	1075190	Identifier	Register_Timer		1075177	1					
ANR	1075191	ArgumentList	200		1075177	1					
ANR	1075192	Argument	200		1075177	0					
ANR	1075193	PrimaryExpression	200		1075177	0					
ANR	1075194	Argument	( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler		1075177	1					
ANR	1075195	CastExpression	( TimerHandlercpp ) & DaemonCore :: HandleReqSocketTimerHandler		1075177	0					
ANR	1075196	CastTarget	TimerHandlercpp		1075177	0					
ANR	1075197	UnaryOperationExpression	& DaemonCore :: HandleReqSocketTimerHandler		1075177	1					
ANR	1075198	UnaryOperator	&		1075177	0					
ANR	1075199	Identifier	DaemonCore :: HandleReqSocketTimerHandler		1075177	1					
ANR	1075200	Argument	"""DaemonCore::HandleReqSocketTimerHandler"""		1075177	2					
ANR	1075201	PrimaryExpression	"""DaemonCore::HandleReqSocketTimerHandler"""		1075177	0					
ANR	1075202	Argument	this		1075177	3					
ANR	1075203	Identifier	this		1075177	0					
ANR	1075204	ExpressionStatement	daemonCore -> Register_DataPtr ( ( void * ) stream )	4191:1:125572:125615	1075177	1	True				
ANR	1075205	CallExpression	daemonCore -> Register_DataPtr ( ( void * ) stream )		1075177	0					
ANR	1075206	Callee	daemonCore -> Register_DataPtr		1075177	0					
ANR	1075207	PtrMemberAccess	daemonCore -> Register_DataPtr		1075177	0					
ANR	1075208	Identifier	daemonCore		1075177	0					
ANR	1075209	Identifier	Register_DataPtr		1075177	1					
ANR	1075210	ArgumentList	( void * ) stream		1075177	1					
ANR	1075211	Argument	( void * ) stream		1075177	0					
ANR	1075212	CastExpression	( void * ) stream		1075177	0					
ANR	1075213	CastTarget	void *		1075177	0					
ANR	1075214	Identifier	stream		1075177	1					
ANR	1075215	IdentifierDeclStatement	"int tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this ) ;"	4196:1:125852:126032	1075177	2	True				
ANR	1075216	IdentifierDecl	"tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		1075177	0					
ANR	1075217	IdentifierDeclType	int		1075177	0					
ANR	1075218	Identifier	tmp_result		1075177	1					
ANR	1075219	AssignmentExpression	"tmp_result = daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		1075177	2		=			
ANR	1075220	Identifier	tmp_result		1075177	0					
ANR	1075221	CallExpression	"daemonCore -> Register_Socket ( stream , ""Incoming command"" , ( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler , ""DaemonCore::HandleReqSocketHandler"" , this )"		1075177	1					
ANR	1075222	Callee	daemonCore -> Register_Socket		1075177	0					
ANR	1075223	PtrMemberAccess	daemonCore -> Register_Socket		1075177	0					
ANR	1075224	Identifier	daemonCore		1075177	0					
ANR	1075225	Identifier	Register_Socket		1075177	1					
ANR	1075226	ArgumentList	stream		1075177	1					
ANR	1075227	Argument	stream		1075177	0					
ANR	1075228	Identifier	stream		1075177	0					
ANR	1075229	Argument	"""Incoming command"""		1075177	1					
ANR	1075230	PrimaryExpression	"""Incoming command"""		1075177	0					
ANR	1075231	Argument	( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler		1075177	2					
ANR	1075232	CastExpression	( SocketHandlercpp ) & DaemonCore :: HandleReqSocketHandler		1075177	0					
ANR	1075233	CastTarget	SocketHandlercpp		1075177	0					
ANR	1075234	UnaryOperationExpression	& DaemonCore :: HandleReqSocketHandler		1075177	1					
ANR	1075235	UnaryOperator	&		1075177	0					
ANR	1075236	Identifier	DaemonCore :: HandleReqSocketHandler		1075177	1					
ANR	1075237	Argument	"""DaemonCore::HandleReqSocketHandler"""		1075177	3					
ANR	1075238	PrimaryExpression	"""DaemonCore::HandleReqSocketHandler"""		1075177	0					
ANR	1075239	Argument	this		1075177	4					
ANR	1075240	Identifier	this		1075177	0					
ANR	1075241	IfStatement	if ( tmp_result >= 0 )		1075177	3					
ANR	1075242	Condition	tmp_result >= 0	4201:6:126040:126054	1075177	0	True				
ANR	1075243	RelationalExpression	tmp_result >= 0		1075177	0		>=			
ANR	1075244	Identifier	tmp_result		1075177	0					
ANR	1075245	PrimaryExpression	0		1075177	1					
ANR	1075246	CompoundStatement		26:25:1153:1153	1075177	1					
ANR	1075247	Statement	int	4203:2:126097:126099	1075177	0	True				
ANR	1075248	Statement	*	4203:5:126100:126100	1075177	1	True				
ANR	1075249	Statement	stashed_tid	4203:7:126102:126112	1075177	2	True				
ANR	1075250	Statement	=	4203:19:126114:126114	1075177	3	True				
ANR	1075251	Statement	new	4203:21:126116:126118	1075177	4	True				
ANR	1075252	ExpressionStatement	int	4203:25:126120:126123	1075177	5	True				
ANR	1075253	Identifier	int		1075177	0					
ANR	1075254	ExpressionStatement	* stashed_tid = tid	4204:2:126127:126145	1075177	6	True				
ANR	1075255	AssignmentExpression	* stashed_tid = tid		1075177	0		=			
ANR	1075256	UnaryOperationExpression	* stashed_tid		1075177	0					
ANR	1075257	UnaryOperator	*		1075177	0					
ANR	1075258	Identifier	stashed_tid		1075177	1					
ANR	1075259	Identifier	tid		1075177	1					
ANR	1075260	ExpressionStatement	daemonCore -> Register_DataPtr ( ( void * ) stashed_tid )	4206:2:126213:126261	1075177	7	True				
ANR	1075261	CallExpression	daemonCore -> Register_DataPtr ( ( void * ) stashed_tid )		1075177	0					
ANR	1075262	Callee	daemonCore -> Register_DataPtr		1075177	0					
ANR	1075263	PtrMemberAccess	daemonCore -> Register_DataPtr		1075177	0					
ANR	1075264	Identifier	daemonCore		1075177	0					
ANR	1075265	Identifier	Register_DataPtr		1075177	1					
ANR	1075266	ArgumentList	( void * ) stashed_tid		1075177	1					
ANR	1075267	Argument	( void * ) stashed_tid		1075177	0					
ANR	1075268	CastExpression	( void * ) stashed_tid		1075177	0					
ANR	1075269	CastTarget	void *		1075177	0					
ANR	1075270	Identifier	stashed_tid		1075177	1					
ANR	1075271	ReturnStatement	return true ;	4209:2:126398:126409	1075177	8	True				
ANR	1075272	Identifier	true		1075177	0					
ANR	1075273	ElseStatement	else		1075177	0					
ANR	1075274	CompoundStatement		35:8:1513:1513	1075177	0					
ANR	1075275	ExpressionStatement	daemonCore -> Cancel_Timer ( tid )	4215:2:126602:126631	1075177	0	True				
ANR	1075276	CallExpression	daemonCore -> Cancel_Timer ( tid )		1075177	0					
ANR	1075277	Callee	daemonCore -> Cancel_Timer		1075177	0					
ANR	1075278	PtrMemberAccess	daemonCore -> Cancel_Timer		1075177	0					
ANR	1075279	Identifier	daemonCore		1075177	0					
ANR	1075280	Identifier	Cancel_Timer		1075177	1					
ANR	1075281	ArgumentList	tid		1075177	1					
ANR	1075282	Argument	tid		1075177	0					
ANR	1075283	Identifier	tid		1075177	0					
ANR	1075284	ReturnStatement	return false ;	4217:1:126637:126649	1075177	4	True				
ANR	1075285	Identifier	false		1075177	0					
ANR	1075286	ReturnType	bool		1075177	1					
ANR	1075287	Identifier	DaemonCore :: RegisterSocketForHandleReq		1075177	2					
ANR	1075288	ParameterList	Stream * stream		1075177	3					
ANR	1075289	Parameter	Stream * stream	4175:39:124889:124902	1075177	0	True				
ANR	1075290	ParameterType	Stream *		1075177	0					
ANR	1075291	Identifier	stream		1075177	1					
ANR	1075292	CFGEntryNode	ENTRY		1075177		True				
ANR	1075293	CFGExitNode	EXIT		1075177		True				
ANR	1075294	Symbol	this		1075177						
ANR	1075295	Symbol	false		1075177						
ANR	1075296	Symbol	stashed_tid		1075177						
ANR	1075297	Symbol	tid		1075177						
ANR	1075298	Symbol	tmp_result		1075177						
ANR	1075299	Symbol	* stashed_tid		1075177						
ANR	1075300	Symbol	& DaemonCore :: HandleReqSocketTimerHandler		1075177						
ANR	1075301	Symbol	stream		1075177						
ANR	1075302	Symbol	* daemonCore		1075177						
ANR	1075303	Symbol	& DaemonCore :: HandleReqSocketHandler		1075177						
ANR	1075304	Symbol	daemonCore -> Register_Socket		1075177						
ANR	1075305	Symbol	daemonCore -> Register_Timer		1075177						
ANR	1075306	Symbol	daemonCore		1075177						
ANR	1075307	Symbol	true		1075177						
ANR	1075308	Function	DaemonCore :: HandleReqAsync	4220:0:126654:126817							
ANR	1075309	FunctionDef	DaemonCore :: HandleReqAsync (Stream * stream)		1075308	0					
ANR	1075310	CompoundStatement		4222:0:126702:126817	1075308	0					
ANR	1075311	IfStatement	if ( ! RegisterSocketForHandleReq ( stream ) )		1075308	0					
ANR	1075312	Condition	! RegisterSocketForHandleReq ( stream )	4223:5:126709:126743	1075308	0	True				
ANR	1075313	UnaryOperationExpression	! RegisterSocketForHandleReq ( stream )		1075308	0					
ANR	1075314	UnaryOperator	!		1075308	0					
ANR	1075315	CallExpression	RegisterSocketForHandleReq ( stream )		1075308	1					
ANR	1075316	Callee	RegisterSocketForHandleReq		1075308	0					
ANR	1075317	Identifier	RegisterSocketForHandleReq		1075308	0					
ANR	1075318	ArgumentList	stream		1075308	1					
ANR	1075319	Argument	stream		1075308	0					
ANR	1075320	Identifier	stream		1075308	0					
ANR	1075321	CompoundStatement		2:43:44:44	1075308	1					
ANR	1075322	IfStatement	if ( HandleReq ( stream ) != KEEP_STREAM )		1075308	0					
ANR	1075323	Condition	HandleReq ( stream ) != KEEP_STREAM	4224:6:126755:126786	1075308	0	True				
ANR	1075324	EqualityExpression	HandleReq ( stream ) != KEEP_STREAM		1075308	0		!=			
ANR	1075325	CallExpression	HandleReq ( stream )		1075308	0					
ANR	1075326	Callee	HandleReq		1075308	0					
ANR	1075327	Identifier	HandleReq		1075308	0					
ANR	1075328	ArgumentList	stream		1075308	1					
ANR	1075329	Argument	stream		1075308	0					
ANR	1075330	Identifier	stream		1075308	0					
ANR	1075331	Identifier	KEEP_STREAM		1075308	1					
ANR	1075332	CompoundStatement		3:41:87:87	1075308	1					
ANR	1075333	Statement	delete	4225:3:126795:126800	1075308	0	True				
ANR	1075334	ExpressionStatement	stream	4225:10:126802:126808	1075308	1	True				
ANR	1075335	Identifier	stream		1075308	0					
ANR	1075336	ReturnType	void		1075308	1					
ANR	1075337	Identifier	DaemonCore :: HandleReqAsync		1075308	2					
ANR	1075338	ParameterList	Stream * stream		1075308	3					
ANR	1075339	Parameter	Stream * stream	4221:27:126686:126699	1075308	0	True				
ANR	1075340	ParameterType	Stream *		1075308	0					
ANR	1075341	Identifier	stream		1075308	1					
ANR	1075342	CFGEntryNode	ENTRY		1075308		True				
ANR	1075343	CFGExitNode	EXIT		1075308		True				
ANR	1075344	Symbol	HandleReq		1075308						
ANR	1075345	Symbol	stream		1075308						
ANR	1075346	Symbol	RegisterSocketForHandleReq		1075308						
ANR	1075347	Symbol	KEEP_STREAM		1075308						
ANR	1075348	Function	DaemonCore :: HandleReq	4230:0:126820:126966							
ANR	1075349	FunctionDef	"DaemonCore :: HandleReq (int socki , Stream * asock)"		1075348	0					
ANR	1075350	CompoundStatement		4231:0:126872:126966	1075348	0					
ANR	1075351	IdentifierDeclStatement	Stream * insock ;	4232:1:126875:126889	1075348	0	True				
ANR	1075352	IdentifierDecl	* insock		1075348	0					
ANR	1075353	IdentifierDeclType	Stream *		1075348	0					
ANR	1075354	Identifier	insock		1075348	1					
ANR	1075355	ExpressionStatement	insock = ( * sockTable ) [ socki ] . iosock	4234:1:126894:126929	1075348	1	True				
ANR	1075356	AssignmentExpression	insock = ( * sockTable ) [ socki ] . iosock		1075348	0		=			
ANR	1075357	Identifier	insock		1075348	0					
ANR	1075358	MemberAccess	( * sockTable ) [ socki ] . iosock		1075348	1					
ANR	1075359	ArrayIndexing	( * sockTable ) [ socki ]		1075348	0					
ANR	1075360	UnaryOperationExpression	* sockTable		1075348	0					
ANR	1075361	UnaryOperator	*		1075348	0					
ANR	1075362	Identifier	sockTable		1075348	1					
ANR	1075363	Identifier	socki		1075348	1					
ANR	1075364	Identifier	iosock		1075348	1					
ANR	1075365	ReturnStatement	"return HandleReq ( insock , asock ) ;"	4236:1:126933:126964	1075348	2	True				
ANR	1075366	CallExpression	"HandleReq ( insock , asock )"		1075348	0					
ANR	1075367	Callee	HandleReq		1075348	0					
ANR	1075368	Identifier	HandleReq		1075348	0					
ANR	1075369	ArgumentList	insock		1075348	1					
ANR	1075370	Argument	insock		1075348	0					
ANR	1075371	Identifier	insock		1075348	0					
ANR	1075372	Argument	asock		1075348	1					
ANR	1075373	Identifier	asock		1075348	0					
ANR	1075374	ReturnType	int		1075348	1					
ANR	1075375	Identifier	DaemonCore :: HandleReq		1075348	2					
ANR	1075376	ParameterList	"int socki , Stream * asock"		1075348	3					
ANR	1075377	Parameter	int socki	4230:26:126846:126854	1075348	0	True				
ANR	1075378	ParameterType	int		1075348	0					
ANR	1075379	Identifier	socki		1075348	1					
ANR	1075380	Parameter	Stream * asock	4230:37:126857:126869	1075348	1	True				
ANR	1075381	ParameterType	Stream *		1075348	0					
ANR	1075382	Identifier	asock		1075348	1					
ANR	1075383	CFGEntryNode	ENTRY		1075348		True				
ANR	1075384	CFGExitNode	EXIT		1075348		True				
ANR	1075385	Symbol	HandleReq		1075348						
ANR	1075386	Symbol	( * sockTable ) [ socki ] . iosock		1075348						
ANR	1075387	Symbol	* sockTable		1075348						
ANR	1075388	Symbol	* socki		1075348						
ANR	1075389	Symbol	sockTable		1075348						
ANR	1075390	Symbol	asock		1075348						
ANR	1075391	Symbol	insock		1075348						
ANR	1075392	Symbol	* * sockTable		1075348						
ANR	1075393	Symbol	socki		1075348						
ANR	1075394	Function	DaemonCore :: HandleReq	4239:0:126969:168113							
ANR	1075395	FunctionDef	"DaemonCore :: HandleReq (Stream * insock , Stream * asock)"		1075394	0					
ANR	1075396	CompoundStatement		4240:0:127026:168113	1075394	0					
ANR	1075397	IdentifierDeclStatement	Sock * sock = NULL ;	4241:1:127029:127049	1075394	0	True				
ANR	1075398	IdentifierDecl	* sock = NULL		1075394	0					
ANR	1075399	IdentifierDeclType	Sock *		1075394	0					
ANR	1075400	Identifier	sock		1075394	1					
ANR	1075401	AssignmentExpression	* sock = NULL		1075394	2		=			
ANR	1075402	Identifier	NULL		1075394	0					
ANR	1075403	Identifier	NULL		1075394	1					
ANR	1075404	IdentifierDeclStatement	int is_tcp = 0 ;	4243:1:127053:127069	1075394	1	True				
ANR	1075405	IdentifierDecl	is_tcp = 0		1075394	0					
ANR	1075406	IdentifierDeclType	int		1075394	0					
ANR	1075407	Identifier	is_tcp		1075394	1					
ANR	1075408	AssignmentExpression	is_tcp = 0		1075394	2		=			
ANR	1075409	Identifier	is_tcp		1075394	0					
ANR	1075410	PrimaryExpression	0		1075394	1					
ANR	1075411	IdentifierDeclStatement	int req = 0 ;	4244:1:127072:127099	1075394	2	True				
ANR	1075412	IdentifierDecl	req = 0		1075394	0					
ANR	1075413	IdentifierDeclType	int		1075394	0					
ANR	1075414	Identifier	req		1075394	1					
ANR	1075415	AssignmentExpression	req = 0		1075394	2		=			
ANR	1075416	Identifier	req		1075394	0					
ANR	1075417	PrimaryExpression	0		1075394	1					
ANR	1075418	IdentifierDeclStatement	int index ;	4245:1:127102:127115	1075394	3	True				
ANR	1075419	IdentifierDecl	index		1075394	0					
ANR	1075420	IdentifierDeclType	int		1075394	0					
ANR	1075421	Identifier	index		1075394	1					
ANR	1075422	IdentifierDeclStatement	int reqFound = FALSE ;	4246:1:127118:127142	1075394	4	True				
ANR	1075423	IdentifierDecl	reqFound = FALSE		1075394	0					
ANR	1075424	IdentifierDeclType	int		1075394	0					
ANR	1075425	Identifier	reqFound		1075394	1					
ANR	1075426	AssignmentExpression	reqFound = FALSE		1075394	2		=			
ANR	1075427	Identifier	FALSE		1075394	0					
ANR	1075428	Identifier	FALSE		1075394	1					
ANR	1075429	IdentifierDeclStatement	int result = FALSE ;	4247:1:127145:127167	1075394	5	True				
ANR	1075430	IdentifierDecl	result = FALSE		1075394	0					
ANR	1075431	IdentifierDeclType	int		1075394	0					
ANR	1075432	Identifier	result		1075394	1					
ANR	1075433	AssignmentExpression	result = FALSE		1075394	2		=			
ANR	1075434	Identifier	FALSE		1075394	0					
ANR	1075435	Identifier	FALSE		1075394	1					
ANR	1075436	IdentifierDeclStatement	int perm = USER_AUTH_FAILURE ;	4248:4:127173:127225	1075394	6	True				
ANR	1075437	IdentifierDecl	perm = USER_AUTH_FAILURE		1075394	0					
ANR	1075438	IdentifierDeclType	int		1075394	0					
ANR	1075439	Identifier	perm		1075394	1					
ANR	1075440	AssignmentExpression	perm = USER_AUTH_FAILURE		1075394	2		=			
ANR	1075441	Identifier	USER_AUTH_FAILURE		1075394	0					
ANR	1075442	Identifier	USER_AUTH_FAILURE		1075394	1					
ANR	1075443	IdentifierDeclStatement	MyString user ;	4249:1:127228:127252	1075394	7	True				
ANR	1075444	IdentifierDecl	user		1075394	0					
ANR	1075445	IdentifierDeclType	MyString		1075394	0					
ANR	1075446	Identifier	user		1075394	1					
ANR	1075447	IdentifierDeclStatement	ClassAd * the_policy = NULL ;	4250:4:127258:127288	1075394	8	True				
ANR	1075448	IdentifierDecl	* the_policy = NULL		1075394	0					
ANR	1075449	IdentifierDeclType	ClassAd *		1075394	0					
ANR	1075450	Identifier	the_policy		1075394	1					
ANR	1075451	AssignmentExpression	* the_policy = NULL		1075394	2		=			
ANR	1075452	Identifier	NULL		1075394	0					
ANR	1075453	Identifier	NULL		1075394	1					
ANR	1075454	IdentifierDeclStatement	KeyInfo * the_key = NULL ;	4251:4:127294:127324	1075394	9	True				
ANR	1075455	IdentifierDecl	* the_key = NULL		1075394	0					
ANR	1075456	IdentifierDeclType	KeyInfo *		1075394	0					
ANR	1075457	Identifier	the_key		1075394	1					
ANR	1075458	AssignmentExpression	* the_key = NULL		1075394	2		=			
ANR	1075459	Identifier	NULL		1075394	0					
ANR	1075460	Identifier	NULL		1075394	1					
ANR	1075461	IdentifierDeclStatement	char * the_sid = NULL ;	4252:4:127330:127360	1075394	10	True				
ANR	1075462	IdentifierDecl	* the_sid = NULL		1075394	0					
ANR	1075463	IdentifierDeclType	char *		1075394	0					
ANR	1075464	Identifier	the_sid		1075394	1					
ANR	1075465	AssignmentExpression	* the_sid = NULL		1075394	2		=			
ANR	1075466	Identifier	NULL		1075394	0					
ANR	1075467	Identifier	NULL		1075394	1					
ANR	1075468	IdentifierDeclStatement	char * who = NULL ;	4253:4:127366:127386	1075394	11	True				
ANR	1075469	IdentifierDecl	* who = NULL		1075394	0					
ANR	1075470	IdentifierDeclType	char *		1075394	0					
ANR	1075471	Identifier	who		1075394	1					
ANR	1075472	AssignmentExpression	* who = NULL		1075394	2		=			
ANR	1075473	Identifier	NULL		1075394	0					
ANR	1075474	Identifier	NULL		1075394	1					
ANR	1075475	IdentifierDeclStatement	bool is_http_post = false ;	4255:1:127428:127453	1075394	12	True				
ANR	1075476	IdentifierDecl	is_http_post = false		1075394	0					
ANR	1075477	IdentifierDeclType	bool		1075394	0					
ANR	1075478	Identifier	is_http_post		1075394	1					
ANR	1075479	AssignmentExpression	is_http_post = false		1075394	2		=			
ANR	1075480	Identifier	false		1075394	0					
ANR	1075481	Identifier	false		1075394	1					
ANR	1075482	IdentifierDeclStatement	bool is_http_get = false ;	4256:1:127484:127508	1075394	13	True				
ANR	1075483	IdentifierDecl	is_http_get = false		1075394	0					
ANR	1075484	IdentifierDeclType	bool		1075394	0					
ANR	1075485	Identifier	is_http_get		1075394	1					
ANR	1075486	AssignmentExpression	is_http_get = false		1075394	2		=			
ANR	1075487	Identifier	false		1075394	0					
ANR	1075488	Identifier	false		1075394	1					
ANR	1075489	IdentifierDeclStatement	UtcTime handle_req_start_time ;	4259:1:127549:127578	1075394	14	True				
ANR	1075490	IdentifierDecl	handle_req_start_time		1075394	0					
ANR	1075491	IdentifierDeclType	UtcTime		1075394	0					
ANR	1075492	Identifier	handle_req_start_time		1075394	1					
ANR	1075493	ExpressionStatement	handle_req_start_time . getTime ( )	4260:1:127581:127612	1075394	15	True				
ANR	1075494	CallExpression	handle_req_start_time . getTime ( )		1075394	0					
ANR	1075495	Callee	handle_req_start_time . getTime		1075394	0					
ANR	1075496	MemberAccess	handle_req_start_time . getTime		1075394	0					
ANR	1075497	Identifier	handle_req_start_time		1075394	0					
ANR	1075498	Identifier	getTime		1075394	1					
ANR	1075499	ArgumentList			1075394	1					
ANR	1075500	ExpressionStatement	ASSERT ( insock )	4262:1:127616:127630	1075394	16	True				
ANR	1075501	CallExpression	ASSERT ( insock )		1075394	0					
ANR	1075502	Callee	ASSERT		1075394	0					
ANR	1075503	Identifier	ASSERT		1075394	0					
ANR	1075504	ArgumentList	insock		1075394	1					
ANR	1075505	Argument	insock		1075394	0					
ANR	1075506	Identifier	insock		1075394	0					
ANR	1075507	SwitchStatement	switch ( insock -> type ( ) )		1075394	17					
ANR	1075508	Condition	insock -> type ( )	4264:10:127643:127656	1075394	0	True				
ANR	1075509	CallExpression	insock -> type ( )		1075394	0					
ANR	1075510	Callee	insock -> type		1075394	0					
ANR	1075511	PtrMemberAccess	insock -> type		1075394	0					
ANR	1075512	Identifier	insock		1075394	0					
ANR	1075513	Identifier	type		1075394	1					
ANR	1075514	ArgumentList			1075394	1					
ANR	1075515	CompoundStatement		25:27:633:633	1075394	1					
ANR	1075516	Label	case Stream :: reli_sock :	4265:2:127664:127687	1075394	0	True				
ANR	1075517	Identifier	Stream :: reli_sock		1075394	0					
ANR	1075518	ExpressionStatement	is_tcp = TRUE	4266:3:127692:127705	1075394	1	True				
ANR	1075519	AssignmentExpression	is_tcp = TRUE		1075394	0		=			
ANR	1075520	Identifier	is_tcp		1075394	0					
ANR	1075521	Identifier	TRUE		1075394	1					
ANR	1075522	BreakStatement	break ;	4267:3:127710:127715	1075394	2	True				
ANR	1075523	Label	case Stream :: safe_sock :	4268:2:127719:127742	1075394	3	True				
ANR	1075524	Identifier	Stream :: safe_sock		1075394	0					
ANR	1075525	ExpressionStatement	is_tcp = FALSE	4269:3:127747:127761	1075394	4	True				
ANR	1075526	AssignmentExpression	is_tcp = FALSE		1075394	0		=			
ANR	1075527	Identifier	is_tcp		1075394	0					
ANR	1075528	Identifier	FALSE		1075394	1					
ANR	1075529	BreakStatement	break ;	4270:3:127766:127771	1075394	5	True				
ANR	1075530	Label	default :	4271:2:127775:127782	1075394	6	True				
ANR	1075531	Identifier	default		1075394	0					
ANR	1075532	ExpressionStatement	"EXCEPT ( ""DaemonCore: HandleReq(): unrecognized Stream sock"" )"	4273:3:127818:127877	1075394	7	True				
ANR	1075533	CallExpression	"EXCEPT ( ""DaemonCore: HandleReq(): unrecognized Stream sock"" )"		1075394	0					
ANR	1075534	Callee	EXCEPT		1075394	0					
ANR	1075535	Identifier	EXCEPT		1075394	0					
ANR	1075536	ArgumentList	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		1075394	1					
ANR	1075537	Argument	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		1075394	0					
ANR	1075538	PrimaryExpression	"""DaemonCore: HandleReq(): unrecognized Stream sock"""		1075394	0					
ANR	1075539	IdentifierDeclStatement	CondorError errstack ;	4276:1:127884:127904	1075394	18	True				
ANR	1075540	IdentifierDecl	errstack		1075394	0					
ANR	1075541	IdentifierDeclType	CondorError		1075394	0					
ANR	1075542	Identifier	errstack		1075394	1					
ANR	1075543	IfStatement	if ( is_tcp )		1075394	19					
ANR	1075544	Condition	is_tcp	4279:6:127954:127959	1075394	0	True				
ANR	1075545	Identifier	is_tcp		1075394	0					
ANR	1075546	CompoundStatement		40:15:936:936	1075394	1					
ANR	1075547	IfStatement	if ( ( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen )		1075394	0					
ANR	1075548	Condition	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen	4282:7:128043:128164	1075394	0	True				
ANR	1075549	AndExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special && ( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1075394	0		&&			
ANR	1075550	EqualityExpression	( ( ReliSock * ) insock ) -> _state == Sock :: sock_special		1075394	0		==			
ANR	1075551	PtrMemberAccess	( ( ReliSock * ) insock ) -> _state		1075394	0					
ANR	1075552	CastExpression	( ReliSock * ) insock		1075394	0					
ANR	1075553	CastTarget	ReliSock *		1075394	0					
ANR	1075554	Identifier	insock		1075394	1					
ANR	1075555	Identifier	_state		1075394	1					
ANR	1075556	Identifier	Sock :: sock_special		1075394	1					
ANR	1075557	EqualityExpression	( ( ReliSock * ) insock ) -> _special_state == ReliSock :: relisock_listen		1075394	1		==			
ANR	1075558	PtrMemberAccess	( ( ReliSock * ) insock ) -> _special_state		1075394	0					
ANR	1075559	CastExpression	( ReliSock * ) insock		1075394	0					
ANR	1075560	CastTarget	ReliSock *		1075394	0					
ANR	1075561	Identifier	insock		1075394	1					
ANR	1075562	Identifier	_special_state		1075394	1					
ANR	1075563	Identifier	ReliSock :: relisock_listen		1075394	1					
ANR	1075564	CompoundStatement		45:2:1143:1143	1075394	1					
ANR	1075565	IfStatement	if ( asock )		1075394	0					
ANR	1075566	Condition	asock	4285:8:128180:128184	1075394	0	True				
ANR	1075567	Identifier	asock		1075394	0					
ANR	1075568	CompoundStatement		46:16:1161:1161	1075394	1					
ANR	1075569	ExpressionStatement	sock = ( Sock * ) asock	4286:4:128194:128214	1075394	0	True				
ANR	1075570	AssignmentExpression	sock = ( Sock * ) asock		1075394	0		=			
ANR	1075571	Identifier	sock		1075394	0					
ANR	1075572	CastExpression	( Sock * ) asock		1075394	1					
ANR	1075573	CastTarget	Sock *		1075394	0					
ANR	1075574	Identifier	asock		1075394	1					
ANR	1075575	ElseStatement	else		1075394	0					
ANR	1075576	CompoundStatement		48:10:1199:1199	1075394	0					
ANR	1075577	ExpressionStatement	sock = ( ( ReliSock * ) insock ) -> accept ( )	4288:4:128232:128269	1075394	0	True				
ANR	1075578	AssignmentExpression	sock = ( ( ReliSock * ) insock ) -> accept ( )		1075394	0		=			
ANR	1075579	Identifier	sock		1075394	0					
ANR	1075580	CallExpression	( ( ReliSock * ) insock ) -> accept ( )		1075394	1					
ANR	1075581	Callee	( ( ReliSock * ) insock ) -> accept		1075394	0					
ANR	1075582	PtrMemberAccess	( ( ReliSock * ) insock ) -> accept		1075394	0					
ANR	1075583	CastExpression	( ReliSock * ) insock		1075394	0					
ANR	1075584	CastTarget	ReliSock *		1075394	0					
ANR	1075585	Identifier	insock		1075394	1					
ANR	1075586	Identifier	accept		1075394	1					
ANR	1075587	ArgumentList			1075394	1					
ANR	1075588	IfStatement	if ( ! sock )		1075394	1					
ANR	1075589	Condition	! sock	4290:8:128284:128288	1075394	0	True				
ANR	1075590	UnaryOperationExpression	! sock		1075394	0					
ANR	1075591	UnaryOperator	!		1075394	0					
ANR	1075592	Identifier	sock		1075394	1					
ANR	1075593	CompoundStatement		51:16:1265:1265	1075394	1					
ANR	1075594	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"	4291:4:128298:128347	1075394	0	True				
ANR	1075595	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: accept() failed!"" )"		1075394	0					
ANR	1075596	Callee	dprintf		1075394	0					
ANR	1075597	Identifier	dprintf		1075394	0					
ANR	1075598	ArgumentList	D_ALWAYS		1075394	1					
ANR	1075599	Argument	D_ALWAYS		1075394	0					
ANR	1075600	Identifier	D_ALWAYS		1075394	0					
ANR	1075601	Argument	"""DaemonCore: accept() failed!"""		1075394	1					
ANR	1075602	PrimaryExpression	"""DaemonCore: accept() failed!"""		1075394	0					
ANR	1075603	ReturnStatement	return KEEP_STREAM ;	4293:4:128408:128426	1075394	1	True				
ANR	1075604	Identifier	KEEP_STREAM		1075394	0					
ANR	1075605	IfStatement	if ( ( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4 )		1075394	2					
ANR	1075606	Condition	( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4	4300:8:128700:128748	1075394	0	True				
ANR	1075607	RelationalExpression	( ( ReliSock * ) sock ) -> bytes_available_to_read ( ) < 4		1075394	0		<			
ANR	1075608	CallExpression	( ( ReliSock * ) sock ) -> bytes_available_to_read ( )		1075394	0					
ANR	1075609	Callee	( ( ReliSock * ) sock ) -> bytes_available_to_read		1075394	0					
ANR	1075610	PtrMemberAccess	( ( ReliSock * ) sock ) -> bytes_available_to_read		1075394	0					
ANR	1075611	CastExpression	( ReliSock * ) sock		1075394	0					
ANR	1075612	CastTarget	ReliSock *		1075394	0					
ANR	1075613	Identifier	sock		1075394	1					
ANR	1075614	Identifier	bytes_available_to_read		1075394	1					
ANR	1075615	ArgumentList			1075394	1					
ANR	1075616	PrimaryExpression	4		1075394	1					
ANR	1075617	CompoundStatement		62:3:1729:1729	1075394	1					
ANR	1075618	IfStatement	if ( RegisterSocketForHandleReq ( sock ) )		1075394	0					
ANR	1075619	Condition	RegisterSocketForHandleReq ( sock )	4302:8:128766:128799	1075394	0	True				
ANR	1075620	CallExpression	RegisterSocketForHandleReq ( sock )		1075394	0					
ANR	1075621	Callee	RegisterSocketForHandleReq		1075394	0					
ANR	1075622	Identifier	RegisterSocketForHandleReq		1075394	0					
ANR	1075623	ArgumentList	sock		1075394	1					
ANR	1075624	Argument	sock		1075394	0					
ANR	1075625	Identifier	sock		1075394	0					
ANR	1075626	CompoundStatement		63:45:1776:1776	1075394	1					
ANR	1075627	ReturnStatement	return KEEP_STREAM ;	4303:5:128810:128828	1075394	0	True				
ANR	1075628	Identifier	KEEP_STREAM		1075394	0					
ANR	1075629	ElseStatement	else		1075394	0					
ANR	1075630	CompoundStatement		69:7:1890:1890	1075394	0					
ANR	1075631	ExpressionStatement	sock = ( Sock * ) insock	4309:3:128922:128943	1075394	0	True				
ANR	1075632	AssignmentExpression	sock = ( Sock * ) insock		1075394	0		=			
ANR	1075633	Identifier	sock		1075394	0					
ANR	1075634	CastExpression	( Sock * ) insock		1075394	1					
ANR	1075635	CastTarget	Sock *		1075394	0					
ANR	1075636	Identifier	insock		1075394	1					
ANR	1075637	ElseStatement	else		1075394	0					
ANR	1075638	CompoundStatement		92:2:2598:2629	1075394	0					
ANR	1075639	ExpressionStatement	sock = ( Sock * ) insock	4318:2:129187:129208	1075394	0	True				
ANR	1075640	AssignmentExpression	sock = ( Sock * ) insock		1075394	0		=			
ANR	1075641	Identifier	sock		1075394	0					
ANR	1075642	CastExpression	( Sock * ) insock		1075394	1					
ANR	1075643	CastTarget	Sock *		1075394	0					
ANR	1075644	Identifier	insock		1075394	1					
ANR	1075645	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received UDP packet from %s.\\n"" , sock -> peer_description ( ) )"	4323:2:129375:129485	1075394	1	True				
ANR	1075646	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received UDP packet from %s.\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1075647	Callee	dprintf		1075394	0					
ANR	1075648	Identifier	dprintf		1075394	0					
ANR	1075649	ArgumentList	D_SECURITY		1075394	1					
ANR	1075650	Argument	D_SECURITY		1075394	0					
ANR	1075651	Identifier	D_SECURITY		1075394	0					
ANR	1075652	Argument	"""DC_AUTHENTICATE: received UDP packet from %s.\\n"""		1075394	1					
ANR	1075653	PrimaryExpression	"""DC_AUTHENTICATE: received UDP packet from %s.\\n"""		1075394	0					
ANR	1075654	Argument	sock -> peer_description ( )		1075394	2					
ANR	1075655	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1075656	Callee	sock -> peer_description		1075394	0					
ANR	1075657	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1075658	Identifier	sock		1075394	0					
ANR	1075659	Identifier	peer_description		1075394	1					
ANR	1075660	ArgumentList			1075394	1					
ANR	1075661	IdentifierDeclStatement	const char * cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( ) ;	4329:2:129526:129596	1075394	2	True				
ANR	1075662	IdentifierDecl	* cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		1075394	0					
ANR	1075663	IdentifierDeclType	const char *		1075394	0					
ANR	1075664	Identifier	cleartext_info		1075394	1					
ANR	1075665	AssignmentExpression	* cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		1075394	2		=			
ANR	1075666	Identifier	cleartext_info		1075394	0					
ANR	1075667	CallExpression	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed ( )		1075394	1					
ANR	1075668	Callee	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		1075394	0					
ANR	1075669	PtrMemberAccess	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		1075394	0					
ANR	1075670	CastExpression	( SafeSock * ) sock		1075394	0					
ANR	1075671	CastTarget	SafeSock *		1075394	0					
ANR	1075672	Identifier	sock		1075394	1					
ANR	1075673	Identifier	isIncomingDataMD5ed		1075394	1					
ANR	1075674	ArgumentList			1075394	1					
ANR	1075675	IdentifierDeclStatement	char * sess_id = NULL ;	4330:2:129600:129621	1075394	3	True				
ANR	1075676	IdentifierDecl	* sess_id = NULL		1075394	0					
ANR	1075677	IdentifierDeclType	char *		1075394	0					
ANR	1075678	Identifier	sess_id		1075394	1					
ANR	1075679	AssignmentExpression	* sess_id = NULL		1075394	2		=			
ANR	1075680	Identifier	NULL		1075394	0					
ANR	1075681	Identifier	NULL		1075394	1					
ANR	1075682	IdentifierDeclStatement	char * return_address_ss = NULL ;	4331:2:129625:129656	1075394	4	True				
ANR	1075683	IdentifierDecl	* return_address_ss = NULL		1075394	0					
ANR	1075684	IdentifierDeclType	char *		1075394	0					
ANR	1075685	Identifier	return_address_ss		1075394	1					
ANR	1075686	AssignmentExpression	* return_address_ss = NULL		1075394	2		=			
ANR	1075687	Identifier	NULL		1075394	0					
ANR	1075688	Identifier	NULL		1075394	1					
ANR	1075689	IfStatement	if ( cleartext_info )		1075394	5					
ANR	1075690	Condition	cleartext_info	4333:6:129665:129678	1075394	0	True				
ANR	1075691	Identifier	cleartext_info		1075394	0					
ANR	1075692	CompoundStatement		96:3:2700:2717	1075394	1					
ANR	1075693	IdentifierDeclStatement	StringList info_list ( cleartext_info ) ;	4334:3:129686:129722	1075394	0	True				
ANR	1075694	IdentifierDecl	info_list ( cleartext_info )		1075394	0					
ANR	1075695	IdentifierDeclType	StringList		1075394	0					
ANR	1075696	Identifier	info_list		1075394	1					
ANR	1075697	Identifier	cleartext_info		1075394	2					
ANR	1075698	IdentifierDeclStatement	char * tmp = NULL ;	4335:3:129727:129744	1075394	1	True				
ANR	1075699	IdentifierDecl	* tmp = NULL		1075394	0					
ANR	1075700	IdentifierDeclType	char *		1075394	0					
ANR	1075701	Identifier	tmp		1075394	1					
ANR	1075702	AssignmentExpression	* tmp = NULL		1075394	2		=			
ANR	1075703	Identifier	NULL		1075394	0					
ANR	1075704	Identifier	NULL		1075394	1					
ANR	1075705	ExpressionStatement	info_list . rewind ( )	4337:3:129750:129768	1075394	2	True				
ANR	1075706	CallExpression	info_list . rewind ( )		1075394	0					
ANR	1075707	Callee	info_list . rewind		1075394	0					
ANR	1075708	MemberAccess	info_list . rewind		1075394	0					
ANR	1075709	Identifier	info_list		1075394	0					
ANR	1075710	Identifier	rewind		1075394	1					
ANR	1075711	ArgumentList			1075394	1					
ANR	1075712	ExpressionStatement	tmp = info_list . next ( )	4338:3:129773:129795	1075394	3	True				
ANR	1075713	AssignmentExpression	tmp = info_list . next ( )		1075394	0		=			
ANR	1075714	Identifier	tmp		1075394	0					
ANR	1075715	CallExpression	info_list . next ( )		1075394	1					
ANR	1075716	Callee	info_list . next		1075394	0					
ANR	1075717	MemberAccess	info_list . next		1075394	0					
ANR	1075718	Identifier	info_list		1075394	0					
ANR	1075719	Identifier	next		1075394	1					
ANR	1075720	ArgumentList			1075394	1					
ANR	1075721	IfStatement	if ( tmp )		1075394	4					
ANR	1075722	Condition	tmp	4339:7:129804:129806	1075394	0	True				
ANR	1075723	Identifier	tmp		1075394	0					
ANR	1075724	CompoundStatement		100:12:2782:2782	1075394	1					
ANR	1075725	ExpressionStatement	sess_id = strdup ( tmp )	4340:4:129815:129836	1075394	0	True				
ANR	1075726	AssignmentExpression	sess_id = strdup ( tmp )		1075394	0		=			
ANR	1075727	Identifier	sess_id		1075394	0					
ANR	1075728	CallExpression	strdup ( tmp )		1075394	1					
ANR	1075729	Callee	strdup		1075394	0					
ANR	1075730	Identifier	strdup		1075394	0					
ANR	1075731	ArgumentList	tmp		1075394	1					
ANR	1075732	Argument	tmp		1075394	0					
ANR	1075733	Identifier	tmp		1075394	0					
ANR	1075734	ExpressionStatement	tmp = info_list . next ( )	4341:4:129842:129864	1075394	1	True				
ANR	1075735	AssignmentExpression	tmp = info_list . next ( )		1075394	0		=			
ANR	1075736	Identifier	tmp		1075394	0					
ANR	1075737	CallExpression	info_list . next ( )		1075394	1					
ANR	1075738	Callee	info_list . next		1075394	0					
ANR	1075739	MemberAccess	info_list . next		1075394	0					
ANR	1075740	Identifier	info_list		1075394	0					
ANR	1075741	Identifier	next		1075394	1					
ANR	1075742	ArgumentList			1075394	1					
ANR	1075743	IfStatement	if ( tmp )		1075394	2					
ANR	1075744	Condition	tmp	4342:8:129874:129876	1075394	0	True				
ANR	1075745	Identifier	tmp		1075394	0					
ANR	1075746	CompoundStatement		103:13:2852:2852	1075394	1					
ANR	1075747	ExpressionStatement	return_address_ss = strdup ( tmp )	4343:5:129886:129917	1075394	0	True				
ANR	1075748	AssignmentExpression	return_address_ss = strdup ( tmp )		1075394	0		=			
ANR	1075749	Identifier	return_address_ss		1075394	0					
ANR	1075750	CallExpression	strdup ( tmp )		1075394	1					
ANR	1075751	Callee	strdup		1075394	0					
ANR	1075752	Identifier	strdup		1075394	0					
ANR	1075753	ArgumentList	tmp		1075394	1					
ANR	1075754	Argument	tmp		1075394	0					
ANR	1075755	Identifier	tmp		1075394	0					
ANR	1075756	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"" , return_address_ss , sess_id )"	4344:5:129924:130038	1075394	1	True				
ANR	1075757	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"" , return_address_ss , sess_id )"		1075394	0					
ANR	1075758	Callee	dprintf		1075394	0					
ANR	1075759	Identifier	dprintf		1075394	0					
ANR	1075760	ArgumentList	D_SECURITY		1075394	1					
ANR	1075761	Argument	D_SECURITY		1075394	0					
ANR	1075762	Identifier	D_SECURITY		1075394	0					
ANR	1075763	Argument	"""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"""		1075394	1					
ANR	1075764	PrimaryExpression	"""DC_AUTHENTICATE: packet from %s uses MD5 session %s.\\n"""		1075394	0					
ANR	1075765	Argument	return_address_ss		1075394	2					
ANR	1075766	Identifier	return_address_ss		1075394	0					
ANR	1075767	Argument	sess_id		1075394	3					
ANR	1075768	Identifier	sess_id		1075394	0					
ANR	1075769	ElseStatement	else		1075394	0					
ANR	1075770	CompoundStatement		107:11:3024:3024	1075394	0					
ANR	1075771	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"" , sess_id )"	4347:5:130058:130138	1075394	0	True				
ANR	1075772	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"" , sess_id )"		1075394	0					
ANR	1075773	Callee	dprintf		1075394	0					
ANR	1075774	Identifier	dprintf		1075394	0					
ANR	1075775	ArgumentList	D_SECURITY		1075394	1					
ANR	1075776	Argument	D_SECURITY		1075394	0					
ANR	1075777	Identifier	D_SECURITY		1075394	0					
ANR	1075778	Argument	"""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"""		1075394	1					
ANR	1075779	PrimaryExpression	"""DC_AUTHENTICATE: packet uses MD5 session %s.\\n"""		1075394	0					
ANR	1075780	Argument	sess_id		1075394	2					
ANR	1075781	Identifier	sess_id		1075394	0					
ANR	1075782	ElseStatement	else		1075394	0					
ANR	1075783	CompoundStatement		111:10:3130:3130	1075394	0					
ANR	1075784	IfStatement	if ( sess_id )		1075394	6					
ANR	1075785	Condition	sess_id	4357:6:130330:130336	1075394	0	True				
ANR	1075786	Identifier	sess_id		1075394	0					
ANR	1075787	CompoundStatement		120:3:3351:3417	1075394	1					
ANR	1075788	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4358:3:130344:130373	1075394	0	True				
ANR	1075789	IdentifierDecl	* session = NULL		1075394	0					
ANR	1075790	IdentifierDeclType	KeyCacheEntry *		1075394	0					
ANR	1075791	Identifier	session		1075394	1					
ANR	1075792	AssignmentExpression	* session = NULL		1075394	2		=			
ANR	1075793	Identifier	NULL		1075394	0					
ANR	1075794	Identifier	NULL		1075394	1					
ANR	1075795	IdentifierDeclStatement	"bool found_sess = sec_man -> session_cache -> lookup ( sess_id , session ) ;"	4359:3:130378:130444	1075394	1	True				
ANR	1075796	IdentifierDecl	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	0					
ANR	1075797	IdentifierDeclType	bool		1075394	0					
ANR	1075798	Identifier	found_sess		1075394	1					
ANR	1075799	AssignmentExpression	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	2		=			
ANR	1075800	Identifier	found_sess		1075394	0					
ANR	1075801	CallExpression	"sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	1					
ANR	1075802	Callee	sec_man -> session_cache -> lookup		1075394	0					
ANR	1075803	PtrMemberAccess	sec_man -> session_cache -> lookup		1075394	0					
ANR	1075804	PtrMemberAccess	sec_man -> session_cache		1075394	0					
ANR	1075805	Identifier	sec_man		1075394	0					
ANR	1075806	Identifier	session_cache		1075394	1					
ANR	1075807	Identifier	lookup		1075394	1					
ANR	1075808	ArgumentList	sess_id		1075394	1					
ANR	1075809	Argument	sess_id		1075394	0					
ANR	1075810	Identifier	sess_id		1075394	0					
ANR	1075811	Argument	session		1075394	1					
ANR	1075812	Identifier	session		1075394	0					
ANR	1075813	IfStatement	if ( ! found_sess )		1075394	2					
ANR	1075814	Condition	! found_sess	4361:7:130454:130464	1075394	0	True				
ANR	1075815	UnaryOperationExpression	! found_sess		1075394	0					
ANR	1075816	UnaryOperator	!		1075394	0					
ANR	1075817	Identifier	found_sess		1075394	1					
ANR	1075818	CompoundStatement		122:20:3440:3440	1075394	1					
ANR	1075819	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4362:4:130473:130677	1075394	0	True				
ANR	1075820	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1075821	Callee	dprintf		1075394	0					
ANR	1075822	Identifier	dprintf		1075394	0					
ANR	1075823	ArgumentList	D_ALWAYS		1075394	1					
ANR	1075824	Argument	D_ALWAYS		1075394	0					
ANR	1075825	Identifier	D_ALWAYS		1075394	0					
ANR	1075826	Argument	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1075827	PrimaryExpression	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1075828	Argument	sess_id		1075394	2					
ANR	1075829	Identifier	sess_id		1075394	0					
ANR	1075830	Argument	sock -> peer_description ( )		1075394	3					
ANR	1075831	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1075832	Callee	sock -> peer_description		1075394	0					
ANR	1075833	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1075834	Identifier	sock		1075394	0					
ANR	1075835	Identifier	peer_description		1075394	1					
ANR	1075836	ArgumentList			1075394	1					
ANR	1075837	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1075838	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1075839	Condition	return_address_ss		1075394	0					
ANR	1075840	Identifier	return_address_ss		1075394	0					
ANR	1075841	Identifier	return_address_ss		1075394	1					
ANR	1075842	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1075843	ExpressionStatement	"send_invalidate_session ( return_address_ss , sess_id )"	4367:4:130835:130889	1075394	1	True				
ANR	1075844	CallExpression	"send_invalidate_session ( return_address_ss , sess_id )"		1075394	0					
ANR	1075845	Callee	send_invalidate_session		1075394	0					
ANR	1075846	Identifier	send_invalidate_session		1075394	0					
ANR	1075847	ArgumentList	return_address_ss		1075394	1					
ANR	1075848	Argument	return_address_ss		1075394	0					
ANR	1075849	Identifier	return_address_ss		1075394	0					
ANR	1075850	Argument	sess_id		1075394	1					
ANR	1075851	Identifier	sess_id		1075394	0					
ANR	1075852	IfStatement	if ( return_address_ss )		1075394	2					
ANR	1075853	Condition	return_address_ss	4369:8:130900:130916	1075394	0	True				
ANR	1075854	Identifier	return_address_ss		1075394	0					
ANR	1075855	CompoundStatement		130:28:3893:3893	1075394	1					
ANR	1075856	ExpressionStatement	free ( return_address_ss )	4370:5:130927:130952	1075394	0	True				
ANR	1075857	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1075858	Callee	free		1075394	0					
ANR	1075859	Identifier	free		1075394	0					
ANR	1075860	ArgumentList	return_address_ss		1075394	1					
ANR	1075861	Argument	return_address_ss		1075394	0					
ANR	1075862	Identifier	return_address_ss		1075394	0					
ANR	1075863	ExpressionStatement	return_address_ss = NULL	4371:5:130959:130983	1075394	1	True				
ANR	1075864	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1075865	Identifier	return_address_ss		1075394	0					
ANR	1075866	Identifier	NULL		1075394	1					
ANR	1075867	ExpressionStatement	free ( sess_id )	4373:4:130995:131010	1075394	3	True				
ANR	1075868	CallExpression	free ( sess_id )		1075394	0					
ANR	1075869	Callee	free		1075394	0					
ANR	1075870	Identifier	free		1075394	0					
ANR	1075871	ArgumentList	sess_id		1075394	1					
ANR	1075872	Argument	sess_id		1075394	0					
ANR	1075873	Identifier	sess_id		1075394	0					
ANR	1075874	ExpressionStatement	sess_id = NULL	4374:4:131016:131030	1075394	4	True				
ANR	1075875	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1075876	Identifier	sess_id		1075394	0					
ANR	1075877	Identifier	NULL		1075394	1					
ANR	1075878	ExpressionStatement	result = FALSE	4375:4:131036:131050	1075394	5	True				
ANR	1075879	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1075880	Identifier	result		1075394	0					
ANR	1075881	Identifier	FALSE		1075394	1					
ANR	1075882	GotoStatement	goto finalize ;	4376:4:131056:131069	1075394	6	True				
ANR	1075883	Identifier	finalize		1075394	0					
ANR	1075884	ExpressionStatement	session -> renewLease ( )	4379:3:131080:131101	1075394	3	True				
ANR	1075885	CallExpression	session -> renewLease ( )		1075394	0					
ANR	1075886	Callee	session -> renewLease		1075394	0					
ANR	1075887	PtrMemberAccess	session -> renewLease		1075394	0					
ANR	1075888	Identifier	session		1075394	0					
ANR	1075889	Identifier	renewLease		1075394	1					
ANR	1075890	ArgumentList			1075394	1					
ANR	1075891	IfStatement	if ( ! session -> key ( ) )		1075394	4					
ANR	1075892	Condition	! session -> key ( )	4381:7:131111:131125	1075394	0	True				
ANR	1075893	UnaryOperationExpression	! session -> key ( )		1075394	0					
ANR	1075894	UnaryOperator	!		1075394	0					
ANR	1075895	CallExpression	session -> key ( )		1075394	1					
ANR	1075896	Callee	session -> key		1075394	0					
ANR	1075897	PtrMemberAccess	session -> key		1075394	0					
ANR	1075898	Identifier	session		1075394	0					
ANR	1075899	Identifier	key		1075394	1					
ANR	1075900	ArgumentList			1075394	1					
ANR	1075901	CompoundStatement		142:24:4101:4101	1075394	1					
ANR	1075902	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4382:4:131134:131347	1075394	0	True				
ANR	1075903	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1075904	Callee	dprintf		1075394	0					
ANR	1075905	Identifier	dprintf		1075394	0					
ANR	1075906	ArgumentList	D_ALWAYS		1075394	1					
ANR	1075907	Argument	D_ALWAYS		1075394	0					
ANR	1075908	Identifier	D_ALWAYS		1075394	0					
ANR	1075909	Argument	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1075910	PrimaryExpression	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1075911	Argument	sess_id		1075394	2					
ANR	1075912	Identifier	sess_id		1075394	0					
ANR	1075913	Argument	sock -> peer_description ( )		1075394	3					
ANR	1075914	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1075915	Callee	sock -> peer_description		1075394	0					
ANR	1075916	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1075917	Identifier	sock		1075394	0					
ANR	1075918	Identifier	peer_description		1075394	1					
ANR	1075919	ArgumentList			1075394	1					
ANR	1075920	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1075921	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1075922	Condition	return_address_ss		1075394	0					
ANR	1075923	Identifier	return_address_ss		1075394	0					
ANR	1075924	Identifier	return_address_ss		1075394	1					
ANR	1075925	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1075926	IfStatement	if ( return_address_ss )		1075394	1					
ANR	1075927	Condition	return_address_ss	4384:8:131397:131413	1075394	0	True				
ANR	1075928	Identifier	return_address_ss		1075394	0					
ANR	1075929	CompoundStatement		145:28:4390:4390	1075394	1					
ANR	1075930	ExpressionStatement	free ( return_address_ss )	4385:5:131424:131449	1075394	0	True				
ANR	1075931	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1075932	Callee	free		1075394	0					
ANR	1075933	Identifier	free		1075394	0					
ANR	1075934	ArgumentList	return_address_ss		1075394	1					
ANR	1075935	Argument	return_address_ss		1075394	0					
ANR	1075936	Identifier	return_address_ss		1075394	0					
ANR	1075937	ExpressionStatement	return_address_ss = NULL	4386:5:131456:131480	1075394	1	True				
ANR	1075938	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1075939	Identifier	return_address_ss		1075394	0					
ANR	1075940	Identifier	NULL		1075394	1					
ANR	1075941	ExpressionStatement	free ( sess_id )	4388:4:131492:131507	1075394	2	True				
ANR	1075942	CallExpression	free ( sess_id )		1075394	0					
ANR	1075943	Callee	free		1075394	0					
ANR	1075944	Identifier	free		1075394	0					
ANR	1075945	ArgumentList	sess_id		1075394	1					
ANR	1075946	Argument	sess_id		1075394	0					
ANR	1075947	Identifier	sess_id		1075394	0					
ANR	1075948	ExpressionStatement	sess_id = NULL	4389:4:131513:131527	1075394	3	True				
ANR	1075949	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1075950	Identifier	sess_id		1075394	0					
ANR	1075951	Identifier	NULL		1075394	1					
ANR	1075952	ExpressionStatement	result = FALSE	4390:4:131533:131547	1075394	4	True				
ANR	1075953	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1075954	Identifier	result		1075394	0					
ANR	1075955	Identifier	FALSE		1075394	1					
ANR	1075956	GotoStatement	goto finalize ;	4391:4:131553:131566	1075394	5	True				
ANR	1075957	Identifier	finalize		1075394	0					
ANR	1075958	IfStatement	"if ( ! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) ) )"		1075394	5					
ANR	1075959	Condition	"! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"	4394:7:131581:131628	1075394	0	True				
ANR	1075960	UnaryOperationExpression	"! sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"		1075394	0					
ANR	1075961	UnaryOperator	!		1075394	0					
ANR	1075962	CallExpression	"sock -> set_MD_mode ( MD_ALWAYS_ON , session -> key ( ) )"		1075394	1					
ANR	1075963	Callee	sock -> set_MD_mode		1075394	0					
ANR	1075964	PtrMemberAccess	sock -> set_MD_mode		1075394	0					
ANR	1075965	Identifier	sock		1075394	0					
ANR	1075966	Identifier	set_MD_mode		1075394	1					
ANR	1075967	ArgumentList	MD_ALWAYS_ON		1075394	1					
ANR	1075968	Argument	MD_ALWAYS_ON		1075394	0					
ANR	1075969	Identifier	MD_ALWAYS_ON		1075394	0					
ANR	1075970	Argument	session -> key ( )		1075394	1					
ANR	1075971	CallExpression	session -> key ( )		1075394	0					
ANR	1075972	Callee	session -> key		1075394	0					
ANR	1075973	PtrMemberAccess	session -> key		1075394	0					
ANR	1075974	Identifier	session		1075394	0					
ANR	1075975	Identifier	key		1075394	1					
ANR	1075976	ArgumentList			1075394	1					
ANR	1075977	CompoundStatement		155:57:4604:4604	1075394	1					
ANR	1075978	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4395:4:131637:131882	1075394	0	True				
ANR	1075979	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1075980	Callee	dprintf		1075394	0					
ANR	1075981	Identifier	dprintf		1075394	0					
ANR	1075982	ArgumentList	D_ALWAYS		1075394	1					
ANR	1075983	Argument	D_ALWAYS		1075394	0					
ANR	1075984	Identifier	D_ALWAYS		1075394	0					
ANR	1075985	Argument	"""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1075986	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on message authenticator for session %s, failing; this session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1075987	Argument	sess_id		1075394	2					
ANR	1075988	Identifier	sess_id		1075394	0					
ANR	1075989	Argument	sock -> peer_description ( )		1075394	3					
ANR	1075990	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1075991	Callee	sock -> peer_description		1075394	0					
ANR	1075992	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1075993	Identifier	sock		1075394	0					
ANR	1075994	Identifier	peer_description		1075394	1					
ANR	1075995	ArgumentList			1075394	1					
ANR	1075996	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1075997	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1075998	Condition	return_address_ss		1075394	0					
ANR	1075999	Identifier	return_address_ss		1075394	0					
ANR	1076000	Identifier	return_address_ss		1075394	1					
ANR	1076001	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1076002	IfStatement	if ( return_address_ss )		1075394	1					
ANR	1076003	Condition	return_address_ss	4396:8:131892:131908	1075394	0	True				
ANR	1076004	Identifier	return_address_ss		1075394	0					
ANR	1076005	CompoundStatement		157:28:4885:4885	1075394	1					
ANR	1076006	ExpressionStatement	free ( return_address_ss )	4397:5:131919:131944	1075394	0	True				
ANR	1076007	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076008	Callee	free		1075394	0					
ANR	1076009	Identifier	free		1075394	0					
ANR	1076010	ArgumentList	return_address_ss		1075394	1					
ANR	1076011	Argument	return_address_ss		1075394	0					
ANR	1076012	Identifier	return_address_ss		1075394	0					
ANR	1076013	ExpressionStatement	return_address_ss = NULL	4398:5:131951:131975	1075394	1	True				
ANR	1076014	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1076015	Identifier	return_address_ss		1075394	0					
ANR	1076016	Identifier	NULL		1075394	1					
ANR	1076017	ExpressionStatement	free ( sess_id )	4400:4:131987:132002	1075394	2	True				
ANR	1076018	CallExpression	free ( sess_id )		1075394	0					
ANR	1076019	Callee	free		1075394	0					
ANR	1076020	Identifier	free		1075394	0					
ANR	1076021	ArgumentList	sess_id		1075394	1					
ANR	1076022	Argument	sess_id		1075394	0					
ANR	1076023	Identifier	sess_id		1075394	0					
ANR	1076024	ExpressionStatement	sess_id = NULL	4401:4:132008:132022	1075394	3	True				
ANR	1076025	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1076026	Identifier	sess_id		1075394	0					
ANR	1076027	Identifier	NULL		1075394	1					
ANR	1076028	ExpressionStatement	result = FALSE	4402:4:132028:132042	1075394	4	True				
ANR	1076029	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1076030	Identifier	result		1075394	0					
ANR	1076031	Identifier	FALSE		1075394	1					
ANR	1076032	GotoStatement	goto finalize ;	4403:4:132048:132061	1075394	5	True				
ANR	1076033	Identifier	finalize		1075394	0					
ANR	1076034	ElseStatement	else		1075394	0					
ANR	1076035	CompoundStatement		165:10:5046:5046	1075394	0					
ANR	1076036	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , sess_id )"	4405:4:132079:132176	1075394	0	True				
ANR	1076037	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , sess_id )"		1075394	0					
ANR	1076038	Callee	dprintf		1075394	0					
ANR	1076039	Identifier	dprintf		1075394	0					
ANR	1076040	ArgumentList	D_SECURITY		1075394	1					
ANR	1076041	Argument	D_SECURITY		1075394	0					
ANR	1076042	Identifier	D_SECURITY		1075394	0					
ANR	1076043	Argument	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		1075394	1					
ANR	1076044	PrimaryExpression	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		1075394	0					
ANR	1076045	Argument	sess_id		1075394	2					
ANR	1076046	Identifier	sess_id		1075394	0					
ANR	1076047	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"	4406:4:132182:132230	1075394	1	True				
ANR	1076048	CallExpression	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"		1075394	0					
ANR	1076049	Callee	sec_man -> key_printf		1075394	0					
ANR	1076050	PtrMemberAccess	sec_man -> key_printf		1075394	0					
ANR	1076051	Identifier	sec_man		1075394	0					
ANR	1076052	Identifier	key_printf		1075394	1					
ANR	1076053	ArgumentList	D_SECURITY		1075394	1					
ANR	1076054	Argument	D_SECURITY		1075394	0					
ANR	1076055	Identifier	D_SECURITY		1075394	0					
ANR	1076056	Argument	session -> key ( )		1075394	1					
ANR	1076057	CallExpression	session -> key ( )		1075394	0					
ANR	1076058	Callee	session -> key		1075394	0					
ANR	1076059	PtrMemberAccess	session -> key		1075394	0					
ANR	1076060	Identifier	session		1075394	0					
ANR	1076061	Identifier	key		1075394	1					
ANR	1076062	ArgumentList			1075394	1					
ANR	1076063	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"	4410:12:132284:132336	1075394	6	True				
ANR	1076064	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"		1075394	0					
ANR	1076065	Callee	session -> policy ( ) -> LookupString		1075394	0					
ANR	1076066	PtrMemberAccess	session -> policy ( ) -> LookupString		1075394	0					
ANR	1076067	CallExpression	session -> policy ( )		1075394	0					
ANR	1076068	Callee	session -> policy		1075394	0					
ANR	1076069	PtrMemberAccess	session -> policy		1075394	0					
ANR	1076070	Identifier	session		1075394	0					
ANR	1076071	Identifier	policy		1075394	1					
ANR	1076072	ArgumentList			1075394	1					
ANR	1076073	Identifier	LookupString		1075394	1					
ANR	1076074	ArgumentList	ATTR_SEC_USER		1075394	1					
ANR	1076075	Argument	ATTR_SEC_USER		1075394	0					
ANR	1076076	Identifier	ATTR_SEC_USER		1075394	0					
ANR	1076077	Argument	& who		1075394	1					
ANR	1076078	UnaryOperationExpression	& who		1075394	0					
ANR	1076079	UnaryOperator	&		1075394	0					
ANR	1076080	Identifier	who		1075394	1					
ANR	1076081	ExpressionStatement	free ( sess_id )	4412:3:132342:132357	1075394	7	True				
ANR	1076082	CallExpression	free ( sess_id )		1075394	0					
ANR	1076083	Callee	free		1075394	0					
ANR	1076084	Identifier	free		1075394	0					
ANR	1076085	ArgumentList	sess_id		1075394	1					
ANR	1076086	Argument	sess_id		1075394	0					
ANR	1076087	Identifier	sess_id		1075394	0					
ANR	1076088	IfStatement	if ( return_address_ss )		1075394	8					
ANR	1076089	Condition	return_address_ss	4414:7:132367:132383	1075394	0	True				
ANR	1076090	Identifier	return_address_ss		1075394	0					
ANR	1076091	CompoundStatement		175:26:5359:5359	1075394	1					
ANR	1076092	ExpressionStatement	free ( return_address_ss )	4415:4:132392:132417	1075394	0	True				
ANR	1076093	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076094	Callee	free		1075394	0					
ANR	1076095	Identifier	free		1075394	0					
ANR	1076096	ArgumentList	return_address_ss		1075394	1					
ANR	1076097	Argument	return_address_ss		1075394	0					
ANR	1076098	Identifier	return_address_ss		1075394	0					
ANR	1076099	ExpressionStatement	cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )	4421:2:132467:132528	1075394	7	True				
ANR	1076100	AssignmentExpression	cleartext_info = ( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )		1075394	0		=			
ANR	1076101	Identifier	cleartext_info		1075394	0					
ANR	1076102	CallExpression	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted ( )		1075394	1					
ANR	1076103	Callee	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		1075394	0					
ANR	1076104	PtrMemberAccess	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		1075394	0					
ANR	1076105	CastExpression	( SafeSock * ) sock		1075394	0					
ANR	1076106	CastTarget	SafeSock *		1075394	0					
ANR	1076107	Identifier	sock		1075394	1					
ANR	1076108	Identifier	isIncomingDataEncrypted		1075394	1					
ANR	1076109	ArgumentList			1075394	1					
ANR	1076110	ExpressionStatement	sess_id = NULL	4422:2:132532:132546	1075394	8	True				
ANR	1076111	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1076112	Identifier	sess_id		1075394	0					
ANR	1076113	Identifier	NULL		1075394	1					
ANR	1076114	ExpressionStatement	return_address_ss = NULL	4423:2:132550:132574	1075394	9	True				
ANR	1076115	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1076116	Identifier	return_address_ss		1075394	0					
ANR	1076117	Identifier	NULL		1075394	1					
ANR	1076118	IfStatement	if ( cleartext_info )		1075394	10					
ANR	1076119	Condition	cleartext_info	4425:6:132583:132596	1075394	0	True				
ANR	1076120	Identifier	cleartext_info		1075394	0					
ANR	1076121	CompoundStatement		188:3:5618:5635	1075394	1					
ANR	1076122	IdentifierDeclStatement	StringList info_list ( cleartext_info ) ;	4426:3:132604:132640	1075394	0	True				
ANR	1076123	IdentifierDecl	info_list ( cleartext_info )		1075394	0					
ANR	1076124	IdentifierDeclType	StringList		1075394	0					
ANR	1076125	Identifier	info_list		1075394	1					
ANR	1076126	Identifier	cleartext_info		1075394	2					
ANR	1076127	IdentifierDeclStatement	char * tmp = NULL ;	4427:3:132645:132662	1075394	1	True				
ANR	1076128	IdentifierDecl	* tmp = NULL		1075394	0					
ANR	1076129	IdentifierDeclType	char *		1075394	0					
ANR	1076130	Identifier	tmp		1075394	1					
ANR	1076131	AssignmentExpression	* tmp = NULL		1075394	2		=			
ANR	1076132	Identifier	NULL		1075394	0					
ANR	1076133	Identifier	NULL		1075394	1					
ANR	1076134	ExpressionStatement	info_list . rewind ( )	4429:3:132668:132686	1075394	2	True				
ANR	1076135	CallExpression	info_list . rewind ( )		1075394	0					
ANR	1076136	Callee	info_list . rewind		1075394	0					
ANR	1076137	MemberAccess	info_list . rewind		1075394	0					
ANR	1076138	Identifier	info_list		1075394	0					
ANR	1076139	Identifier	rewind		1075394	1					
ANR	1076140	ArgumentList			1075394	1					
ANR	1076141	ExpressionStatement	tmp = info_list . next ( )	4430:3:132691:132713	1075394	3	True				
ANR	1076142	AssignmentExpression	tmp = info_list . next ( )		1075394	0		=			
ANR	1076143	Identifier	tmp		1075394	0					
ANR	1076144	CallExpression	info_list . next ( )		1075394	1					
ANR	1076145	Callee	info_list . next		1075394	0					
ANR	1076146	MemberAccess	info_list . next		1075394	0					
ANR	1076147	Identifier	info_list		1075394	0					
ANR	1076148	Identifier	next		1075394	1					
ANR	1076149	ArgumentList			1075394	1					
ANR	1076150	IfStatement	if ( tmp )		1075394	4					
ANR	1076151	Condition	tmp	4431:7:132722:132724	1075394	0	True				
ANR	1076152	Identifier	tmp		1075394	0					
ANR	1076153	CompoundStatement		192:12:5700:5700	1075394	1					
ANR	1076154	ExpressionStatement	sess_id = strdup ( tmp )	4432:4:132733:132754	1075394	0	True				
ANR	1076155	AssignmentExpression	sess_id = strdup ( tmp )		1075394	0		=			
ANR	1076156	Identifier	sess_id		1075394	0					
ANR	1076157	CallExpression	strdup ( tmp )		1075394	1					
ANR	1076158	Callee	strdup		1075394	0					
ANR	1076159	Identifier	strdup		1075394	0					
ANR	1076160	ArgumentList	tmp		1075394	1					
ANR	1076161	Argument	tmp		1075394	0					
ANR	1076162	Identifier	tmp		1075394	0					
ANR	1076163	ExpressionStatement	tmp = info_list . next ( )	4434:4:132761:132783	1075394	1	True				
ANR	1076164	AssignmentExpression	tmp = info_list . next ( )		1075394	0		=			
ANR	1076165	Identifier	tmp		1075394	0					
ANR	1076166	CallExpression	info_list . next ( )		1075394	1					
ANR	1076167	Callee	info_list . next		1075394	0					
ANR	1076168	MemberAccess	info_list . next		1075394	0					
ANR	1076169	Identifier	info_list		1075394	0					
ANR	1076170	Identifier	next		1075394	1					
ANR	1076171	ArgumentList			1075394	1					
ANR	1076172	IfStatement	if ( tmp )		1075394	2					
ANR	1076173	Condition	tmp	4435:8:132793:132795	1075394	0	True				
ANR	1076174	Identifier	tmp		1075394	0					
ANR	1076175	CompoundStatement		196:13:5771:5771	1075394	1					
ANR	1076176	ExpressionStatement	return_address_ss = strdup ( tmp )	4436:5:132805:132836	1075394	0	True				
ANR	1076177	AssignmentExpression	return_address_ss = strdup ( tmp )		1075394	0		=			
ANR	1076178	Identifier	return_address_ss		1075394	0					
ANR	1076179	CallExpression	strdup ( tmp )		1075394	1					
ANR	1076180	Callee	strdup		1075394	0					
ANR	1076181	Identifier	strdup		1075394	0					
ANR	1076182	ArgumentList	tmp		1075394	1					
ANR	1076183	Argument	tmp		1075394	0					
ANR	1076184	Identifier	tmp		1075394	0					
ANR	1076185	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"" , return_address_ss , sess_id )"	4437:5:132843:132960	1075394	1	True				
ANR	1076186	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"" , return_address_ss , sess_id )"		1075394	0					
ANR	1076187	Callee	dprintf		1075394	0					
ANR	1076188	Identifier	dprintf		1075394	0					
ANR	1076189	ArgumentList	D_SECURITY		1075394	1					
ANR	1076190	Argument	D_SECURITY		1075394	0					
ANR	1076191	Identifier	D_SECURITY		1075394	0					
ANR	1076192	Argument	"""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"""		1075394	1					
ANR	1076193	PrimaryExpression	"""DC_AUTHENTICATE: packet from %s uses crypto session %s.\\n"""		1075394	0					
ANR	1076194	Argument	return_address_ss		1075394	2					
ANR	1076195	Identifier	return_address_ss		1075394	0					
ANR	1076196	Argument	sess_id		1075394	3					
ANR	1076197	Identifier	sess_id		1075394	0					
ANR	1076198	ElseStatement	else		1075394	0					
ANR	1076199	CompoundStatement		200:11:5946:5946	1075394	0					
ANR	1076200	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses crypto session %s.\\n"" , sess_id )"	4440:5:132980:133063	1075394	0	True				
ANR	1076201	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: packet uses crypto session %s.\\n"" , sess_id )"		1075394	0					
ANR	1076202	Callee	dprintf		1075394	0					
ANR	1076203	Identifier	dprintf		1075394	0					
ANR	1076204	ArgumentList	D_SECURITY		1075394	1					
ANR	1076205	Argument	D_SECURITY		1075394	0					
ANR	1076206	Identifier	D_SECURITY		1075394	0					
ANR	1076207	Argument	"""DC_AUTHENTICATE: packet uses crypto session %s.\\n"""		1075394	1					
ANR	1076208	PrimaryExpression	"""DC_AUTHENTICATE: packet uses crypto session %s.\\n"""		1075394	0					
ANR	1076209	Argument	sess_id		1075394	2					
ANR	1076210	Identifier	sess_id		1075394	0					
ANR	1076211	ElseStatement	else		1075394	0					
ANR	1076212	CompoundStatement		204:10:6055:6055	1075394	0					
ANR	1076213	IfStatement	if ( sess_id )		1075394	11					
ANR	1076214	Condition	sess_id	4451:6:133256:133262	1075394	0	True				
ANR	1076215	Identifier	sess_id		1075394	0					
ANR	1076216	CompoundStatement		281:3:9050:9083	1075394	1					
ANR	1076217	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4452:3:133270:133299	1075394	0	True				
ANR	1076218	IdentifierDecl	* session = NULL		1075394	0					
ANR	1076219	IdentifierDeclType	KeyCacheEntry *		1075394	0					
ANR	1076220	Identifier	session		1075394	1					
ANR	1076221	AssignmentExpression	* session = NULL		1075394	2		=			
ANR	1076222	Identifier	NULL		1075394	0					
ANR	1076223	Identifier	NULL		1075394	1					
ANR	1076224	IdentifierDeclStatement	"bool found_sess = sec_man -> session_cache -> lookup ( sess_id , session ) ;"	4453:3:133304:133370	1075394	1	True				
ANR	1076225	IdentifierDecl	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	0					
ANR	1076226	IdentifierDeclType	bool		1075394	0					
ANR	1076227	Identifier	found_sess		1075394	1					
ANR	1076228	AssignmentExpression	"found_sess = sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	2		=			
ANR	1076229	Identifier	found_sess		1075394	0					
ANR	1076230	CallExpression	"sec_man -> session_cache -> lookup ( sess_id , session )"		1075394	1					
ANR	1076231	Callee	sec_man -> session_cache -> lookup		1075394	0					
ANR	1076232	PtrMemberAccess	sec_man -> session_cache -> lookup		1075394	0					
ANR	1076233	PtrMemberAccess	sec_man -> session_cache		1075394	0					
ANR	1076234	Identifier	sec_man		1075394	0					
ANR	1076235	Identifier	session_cache		1075394	1					
ANR	1076236	Identifier	lookup		1075394	1					
ANR	1076237	ArgumentList	sess_id		1075394	1					
ANR	1076238	Argument	sess_id		1075394	0					
ANR	1076239	Identifier	sess_id		1075394	0					
ANR	1076240	Argument	session		1075394	1					
ANR	1076241	Identifier	session		1075394	0					
ANR	1076242	IfStatement	if ( ! found_sess )		1075394	2					
ANR	1076243	Condition	! found_sess	4455:7:133380:133390	1075394	0	True				
ANR	1076244	UnaryOperationExpression	! found_sess		1075394	0					
ANR	1076245	UnaryOperator	!		1075394	0					
ANR	1076246	Identifier	found_sess		1075394	1					
ANR	1076247	CompoundStatement		216:20:6366:6366	1075394	1					
ANR	1076248	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4456:4:133399:133603	1075394	0	True				
ANR	1076249	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1076250	Callee	dprintf		1075394	0					
ANR	1076251	Identifier	dprintf		1075394	0					
ANR	1076252	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076253	Argument	D_ALWAYS		1075394	0					
ANR	1076254	Identifier	D_ALWAYS		1075394	0					
ANR	1076255	Argument	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1076256	PrimaryExpression	"""DC_AUTHENTICATE: session %s NOT FOUND; this session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1076257	Argument	sess_id		1075394	2					
ANR	1076258	Identifier	sess_id		1075394	0					
ANR	1076259	Argument	sock -> peer_description ( )		1075394	3					
ANR	1076260	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1076261	Callee	sock -> peer_description		1075394	0					
ANR	1076262	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1076263	Identifier	sock		1075394	0					
ANR	1076264	Identifier	peer_description		1075394	1					
ANR	1076265	ArgumentList			1075394	1					
ANR	1076266	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1076267	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1076268	Condition	return_address_ss		1075394	0					
ANR	1076269	Identifier	return_address_ss		1075394	0					
ANR	1076270	Identifier	return_address_ss		1075394	1					
ANR	1076271	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1076272	ExpressionStatement	"send_invalidate_session ( return_address_ss , sess_id )"	4460:4:133702:133755	1075394	1	True				
ANR	1076273	CallExpression	"send_invalidate_session ( return_address_ss , sess_id )"		1075394	0					
ANR	1076274	Callee	send_invalidate_session		1075394	0					
ANR	1076275	Identifier	send_invalidate_session		1075394	0					
ANR	1076276	ArgumentList	return_address_ss		1075394	1					
ANR	1076277	Argument	return_address_ss		1075394	0					
ANR	1076278	Identifier	return_address_ss		1075394	0					
ANR	1076279	Argument	sess_id		1075394	1					
ANR	1076280	Identifier	sess_id		1075394	0					
ANR	1076281	IfStatement	if ( return_address_ss )		1075394	2					
ANR	1076282	Condition	return_address_ss	4462:8:133766:133782	1075394	0	True				
ANR	1076283	Identifier	return_address_ss		1075394	0					
ANR	1076284	CompoundStatement		223:28:6759:6759	1075394	1					
ANR	1076285	ExpressionStatement	free ( return_address_ss )	4463:5:133793:133818	1075394	0	True				
ANR	1076286	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076287	Callee	free		1075394	0					
ANR	1076288	Identifier	free		1075394	0					
ANR	1076289	ArgumentList	return_address_ss		1075394	1					
ANR	1076290	Argument	return_address_ss		1075394	0					
ANR	1076291	Identifier	return_address_ss		1075394	0					
ANR	1076292	ExpressionStatement	return_address_ss = NULL	4464:5:133825:133849	1075394	1	True				
ANR	1076293	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1076294	Identifier	return_address_ss		1075394	0					
ANR	1076295	Identifier	NULL		1075394	1					
ANR	1076296	ExpressionStatement	free ( sess_id )	4466:4:133861:133876	1075394	3	True				
ANR	1076297	CallExpression	free ( sess_id )		1075394	0					
ANR	1076298	Callee	free		1075394	0					
ANR	1076299	Identifier	free		1075394	0					
ANR	1076300	ArgumentList	sess_id		1075394	1					
ANR	1076301	Argument	sess_id		1075394	0					
ANR	1076302	Identifier	sess_id		1075394	0					
ANR	1076303	ExpressionStatement	sess_id = NULL	4467:4:133882:133896	1075394	4	True				
ANR	1076304	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1076305	Identifier	sess_id		1075394	0					
ANR	1076306	Identifier	NULL		1075394	1					
ANR	1076307	ExpressionStatement	result = FALSE	4468:4:133902:133916	1075394	5	True				
ANR	1076308	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1076309	Identifier	result		1075394	0					
ANR	1076310	Identifier	FALSE		1075394	1					
ANR	1076311	GotoStatement	goto finalize ;	4469:4:133922:133935	1075394	6	True				
ANR	1076312	Identifier	finalize		1075394	0					
ANR	1076313	ExpressionStatement	session -> renewLease ( )	4472:3:133946:133967	1075394	3	True				
ANR	1076314	CallExpression	session -> renewLease ( )		1075394	0					
ANR	1076315	Callee	session -> renewLease		1075394	0					
ANR	1076316	PtrMemberAccess	session -> renewLease		1075394	0					
ANR	1076317	Identifier	session		1075394	0					
ANR	1076318	Identifier	renewLease		1075394	1					
ANR	1076319	ArgumentList			1075394	1					
ANR	1076320	IfStatement	if ( ! session -> key ( ) )		1075394	4					
ANR	1076321	Condition	! session -> key ( )	4474:7:133977:133991	1075394	0	True				
ANR	1076322	UnaryOperationExpression	! session -> key ( )		1075394	0					
ANR	1076323	UnaryOperator	!		1075394	0					
ANR	1076324	CallExpression	session -> key ( )		1075394	1					
ANR	1076325	Callee	session -> key		1075394	0					
ANR	1076326	PtrMemberAccess	session -> key		1075394	0					
ANR	1076327	Identifier	session		1075394	0					
ANR	1076328	Identifier	key		1075394	1					
ANR	1076329	ArgumentList			1075394	1					
ANR	1076330	CompoundStatement		235:24:6967:6967	1075394	1					
ANR	1076331	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4475:4:134000:134213	1075394	0	True				
ANR	1076332	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1076333	Callee	dprintf		1075394	0					
ANR	1076334	Identifier	dprintf		1075394	0					
ANR	1076335	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076336	Argument	D_ALWAYS		1075394	0					
ANR	1076337	Identifier	D_ALWAYS		1075394	0					
ANR	1076338	Argument	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1076339	PrimaryExpression	"""DC_AUTHENTICATE: session %s is missing the key! This session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1076340	Argument	sess_id		1075394	2					
ANR	1076341	Identifier	sess_id		1075394	0					
ANR	1076342	Argument	sock -> peer_description ( )		1075394	3					
ANR	1076343	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1076344	Callee	sock -> peer_description		1075394	0					
ANR	1076345	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1076346	Identifier	sock		1075394	0					
ANR	1076347	Identifier	peer_description		1075394	1					
ANR	1076348	ArgumentList			1075394	1					
ANR	1076349	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1076350	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1076351	Condition	return_address_ss		1075394	0					
ANR	1076352	Identifier	return_address_ss		1075394	0					
ANR	1076353	Identifier	return_address_ss		1075394	1					
ANR	1076354	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1076355	IfStatement	if ( return_address_ss )		1075394	1					
ANR	1076356	Condition	return_address_ss	4477:8:134263:134279	1075394	0	True				
ANR	1076357	Identifier	return_address_ss		1075394	0					
ANR	1076358	CompoundStatement		238:28:7256:7256	1075394	1					
ANR	1076359	ExpressionStatement	free ( return_address_ss )	4478:5:134290:134315	1075394	0	True				
ANR	1076360	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076361	Callee	free		1075394	0					
ANR	1076362	Identifier	free		1075394	0					
ANR	1076363	ArgumentList	return_address_ss		1075394	1					
ANR	1076364	Argument	return_address_ss		1075394	0					
ANR	1076365	Identifier	return_address_ss		1075394	0					
ANR	1076366	ExpressionStatement	return_address_ss = NULL	4479:5:134322:134346	1075394	1	True				
ANR	1076367	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1076368	Identifier	return_address_ss		1075394	0					
ANR	1076369	Identifier	NULL		1075394	1					
ANR	1076370	ExpressionStatement	free ( sess_id )	4481:4:134358:134373	1075394	2	True				
ANR	1076371	CallExpression	free ( sess_id )		1075394	0					
ANR	1076372	Callee	free		1075394	0					
ANR	1076373	Identifier	free		1075394	0					
ANR	1076374	ArgumentList	sess_id		1075394	1					
ANR	1076375	Argument	sess_id		1075394	0					
ANR	1076376	Identifier	sess_id		1075394	0					
ANR	1076377	ExpressionStatement	sess_id = NULL	4482:4:134379:134393	1075394	3	True				
ANR	1076378	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1076379	Identifier	sess_id		1075394	0					
ANR	1076380	Identifier	NULL		1075394	1					
ANR	1076381	ExpressionStatement	result = FALSE	4483:4:134399:134413	1075394	4	True				
ANR	1076382	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1076383	Identifier	result		1075394	0					
ANR	1076384	Identifier	FALSE		1075394	1					
ANR	1076385	GotoStatement	goto finalize ;	4484:4:134419:134432	1075394	5	True				
ANR	1076386	Identifier	finalize		1075394	0					
ANR	1076387	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION ) ;"	4496:3:134967:135082	1075394	5	True				
ANR	1076388	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		1075394	0					
ANR	1076389	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1076390	Identifier	will_enable_encryption		1075394	1					
ANR	1076391	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		1075394	2		=			
ANR	1076392	Identifier	will_enable_encryption		1075394	0					
ANR	1076393	CallExpression	"sec_man -> sec_lookup_feat_act ( * session -> policy ( ) , ATTR_SEC_ENCRYPTION )"		1075394	1					
ANR	1076394	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1076395	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1076396	Identifier	sec_man		1075394	0					
ANR	1076397	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1076398	ArgumentList	* session -> policy ( )		1075394	1					
ANR	1076399	Argument	* session -> policy ( )		1075394	0					
ANR	1076400	UnaryOperationExpression	* session -> policy ( )		1075394	0					
ANR	1076401	UnaryOperator	*		1075394	0					
ANR	1076402	CallExpression	session -> policy ( )		1075394	1					
ANR	1076403	Callee	session -> policy		1075394	0					
ANR	1076404	PtrMemberAccess	session -> policy		1075394	0					
ANR	1076405	Identifier	session		1075394	0					
ANR	1076406	Identifier	policy		1075394	1					
ANR	1076407	ArgumentList			1075394	1					
ANR	1076408	Argument	ATTR_SEC_ENCRYPTION		1075394	1					
ANR	1076409	Identifier	ATTR_SEC_ENCRYPTION		1075394	0					
ANR	1076410	IdentifierDeclStatement	bool turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES ;	4497:3:135087:135163	1075394	6	True				
ANR	1076411	IdentifierDecl	turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		1075394	0					
ANR	1076412	IdentifierDeclType	bool		1075394	0					
ANR	1076413	Identifier	turn_encryption_on		1075394	1					
ANR	1076414	AssignmentExpression	turn_encryption_on = will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		1075394	2		=			
ANR	1076415	Identifier	turn_encryption_on		1075394	0					
ANR	1076416	EqualityExpression	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		1075394	1		==			
ANR	1076417	Identifier	will_enable_encryption		1075394	0					
ANR	1076418	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1076419	IfStatement	"if ( ! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) ) )"		1075394	7					
ANR	1076420	Condition	"! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"	4499:7:135173:135229	1075394	0	True				
ANR	1076421	UnaryOperationExpression	"! sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"		1075394	0					
ANR	1076422	UnaryOperator	!		1075394	0					
ANR	1076423	CallExpression	"sock -> set_crypto_key ( turn_encryption_on , session -> key ( ) )"		1075394	1					
ANR	1076424	Callee	sock -> set_crypto_key		1075394	0					
ANR	1076425	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1076426	Identifier	sock		1075394	0					
ANR	1076427	Identifier	set_crypto_key		1075394	1					
ANR	1076428	ArgumentList	turn_encryption_on		1075394	1					
ANR	1076429	Argument	turn_encryption_on		1075394	0					
ANR	1076430	Identifier	turn_encryption_on		1075394	0					
ANR	1076431	Argument	session -> key ( )		1075394	1					
ANR	1076432	CallExpression	session -> key ( )		1075394	0					
ANR	1076433	Callee	session -> key		1075394	0					
ANR	1076434	PtrMemberAccess	session -> key		1075394	0					
ANR	1076435	Identifier	session		1075394	0					
ANR	1076436	Identifier	key		1075394	1					
ANR	1076437	ArgumentList			1075394	1					
ANR	1076438	CompoundStatement		260:66:8205:8205	1075394	1					
ANR	1076439	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"	4500:4:135238:135472	1075394	0	True				
ANR	1076440	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"" , sess_id , sock -> peer_description ( ) , return_address_ss ? return_address_ss : ""(none)"" )"		1075394	0					
ANR	1076441	Callee	dprintf		1075394	0					
ANR	1076442	Identifier	dprintf		1075394	0					
ANR	1076443	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076444	Argument	D_ALWAYS		1075394	0					
ANR	1076445	Identifier	D_ALWAYS		1075394	0					
ANR	1076446	Argument	"""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"""		1075394	1					
ANR	1076447	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on encryption for session %s, failing; this session was requested by %s with return address %s\\n"""		1075394	0					
ANR	1076448	Argument	sess_id		1075394	2					
ANR	1076449	Identifier	sess_id		1075394	0					
ANR	1076450	Argument	sock -> peer_description ( )		1075394	3					
ANR	1076451	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1076452	Callee	sock -> peer_description		1075394	0					
ANR	1076453	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1076454	Identifier	sock		1075394	0					
ANR	1076455	Identifier	peer_description		1075394	1					
ANR	1076456	ArgumentList			1075394	1					
ANR	1076457	Argument	"return_address_ss ? return_address_ss : ""(none)"""		1075394	4					
ANR	1076458	ConditionalExpression	"return_address_ss ? return_address_ss : ""(none)"""		1075394	0					
ANR	1076459	Condition	return_address_ss		1075394	0					
ANR	1076460	Identifier	return_address_ss		1075394	0					
ANR	1076461	Identifier	return_address_ss		1075394	1					
ANR	1076462	PrimaryExpression	"""(none)"""		1075394	2					
ANR	1076463	IfStatement	if ( return_address_ss )		1075394	1					
ANR	1076464	Condition	return_address_ss	4501:8:135482:135498	1075394	0	True				
ANR	1076465	Identifier	return_address_ss		1075394	0					
ANR	1076466	CompoundStatement		262:28:8475:8475	1075394	1					
ANR	1076467	ExpressionStatement	free ( return_address_ss )	4502:5:135509:135534	1075394	0	True				
ANR	1076468	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076469	Callee	free		1075394	0					
ANR	1076470	Identifier	free		1075394	0					
ANR	1076471	ArgumentList	return_address_ss		1075394	1					
ANR	1076472	Argument	return_address_ss		1075394	0					
ANR	1076473	Identifier	return_address_ss		1075394	0					
ANR	1076474	ExpressionStatement	return_address_ss = NULL	4503:5:135541:135565	1075394	1	True				
ANR	1076475	AssignmentExpression	return_address_ss = NULL		1075394	0		=			
ANR	1076476	Identifier	return_address_ss		1075394	0					
ANR	1076477	Identifier	NULL		1075394	1					
ANR	1076478	ExpressionStatement	free ( sess_id )	4505:4:135577:135592	1075394	2	True				
ANR	1076479	CallExpression	free ( sess_id )		1075394	0					
ANR	1076480	Callee	free		1075394	0					
ANR	1076481	Identifier	free		1075394	0					
ANR	1076482	ArgumentList	sess_id		1075394	1					
ANR	1076483	Argument	sess_id		1075394	0					
ANR	1076484	Identifier	sess_id		1075394	0					
ANR	1076485	ExpressionStatement	sess_id = NULL	4506:4:135598:135612	1075394	3	True				
ANR	1076486	AssignmentExpression	sess_id = NULL		1075394	0		=			
ANR	1076487	Identifier	sess_id		1075394	0					
ANR	1076488	Identifier	NULL		1075394	1					
ANR	1076489	ExpressionStatement	result = FALSE	4507:4:135618:135632	1075394	4	True				
ANR	1076490	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1076491	Identifier	result		1075394	0					
ANR	1076492	Identifier	FALSE		1075394	1					
ANR	1076493	GotoStatement	goto finalize ;	4508:4:135638:135651	1075394	5	True				
ANR	1076494	Identifier	finalize		1075394	0					
ANR	1076495	ElseStatement	else		1075394	0					
ANR	1076496	CompoundStatement		270:10:8636:8636	1075394	0					
ANR	1076497	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"" , sess_id , turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"" )"	4510:4:135669:135858	1075394	0	True				
ANR	1076498	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"" , sess_id , turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"" )"		1075394	0					
ANR	1076499	Callee	dprintf		1075394	0					
ANR	1076500	Identifier	dprintf		1075394	0					
ANR	1076501	ArgumentList	D_SECURITY		1075394	1					
ANR	1076502	Argument	D_SECURITY		1075394	0					
ANR	1076503	Identifier	D_SECURITY		1075394	0					
ANR	1076504	Argument	"""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"""		1075394	1					
ANR	1076505	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled with key id %s%s.\\n"""		1075394	0					
ANR	1076506	Argument	sess_id		1075394	2					
ANR	1076507	Identifier	sess_id		1075394	0					
ANR	1076508	Argument	"turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"""		1075394	3					
ANR	1076509	ConditionalExpression	"turn_encryption_on ? """" : "" (but encryption mode is off by default for this packet)"""		1075394	0					
ANR	1076510	Condition	turn_encryption_on		1075394	0					
ANR	1076511	Identifier	turn_encryption_on		1075394	0					
ANR	1076512	PrimaryExpression	""""""		1075394	1					
ANR	1076513	PrimaryExpression	""" (but encryption mode is off by default for this packet)"""		1075394	2					
ANR	1076514	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"	4514:4:135864:135912	1075394	1	True				
ANR	1076515	CallExpression	"sec_man -> key_printf ( D_SECURITY , session -> key ( ) )"		1075394	0					
ANR	1076516	Callee	sec_man -> key_printf		1075394	0					
ANR	1076517	PtrMemberAccess	sec_man -> key_printf		1075394	0					
ANR	1076518	Identifier	sec_man		1075394	0					
ANR	1076519	Identifier	key_printf		1075394	1					
ANR	1076520	ArgumentList	D_SECURITY		1075394	1					
ANR	1076521	Argument	D_SECURITY		1075394	0					
ANR	1076522	Identifier	D_SECURITY		1075394	0					
ANR	1076523	Argument	session -> key ( )		1075394	1					
ANR	1076524	CallExpression	session -> key ( )		1075394	0					
ANR	1076525	Callee	session -> key		1075394	0					
ANR	1076526	PtrMemberAccess	session -> key		1075394	0					
ANR	1076527	Identifier	session		1075394	0					
ANR	1076528	Identifier	key		1075394	1					
ANR	1076529	ArgumentList			1075394	1					
ANR	1076530	IfStatement	if ( who == NULL )		1075394	8					
ANR	1076531	Condition	who == NULL	4517:16:135975:135985	1075394	0	True				
ANR	1076532	EqualityExpression	who == NULL		1075394	0		==			
ANR	1076533	Identifier	who		1075394	0					
ANR	1076534	Identifier	NULL		1075394	1					
ANR	1076535	CompoundStatement		278:29:8961:8961	1075394	1					
ANR	1076536	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"	4518:16:136006:136058	1075394	0	True				
ANR	1076537	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_USER , & who )"		1075394	0					
ANR	1076538	Callee	session -> policy ( ) -> LookupString		1075394	0					
ANR	1076539	PtrMemberAccess	session -> policy ( ) -> LookupString		1075394	0					
ANR	1076540	CallExpression	session -> policy ( )		1075394	0					
ANR	1076541	Callee	session -> policy		1075394	0					
ANR	1076542	PtrMemberAccess	session -> policy		1075394	0					
ANR	1076543	Identifier	session		1075394	0					
ANR	1076544	Identifier	policy		1075394	1					
ANR	1076545	ArgumentList			1075394	1					
ANR	1076546	Identifier	LookupString		1075394	1					
ANR	1076547	ArgumentList	ATTR_SEC_USER		1075394	1					
ANR	1076548	Argument	ATTR_SEC_USER		1075394	0					
ANR	1076549	Identifier	ATTR_SEC_USER		1075394	0					
ANR	1076550	Argument	& who		1075394	1					
ANR	1076551	UnaryOperationExpression	& who		1075394	0					
ANR	1076552	UnaryOperator	&		1075394	0					
ANR	1076553	Identifier	who		1075394	1					
ANR	1076554	IdentifierDeclStatement	bool tried_authentication = false ;	4520:3:136077:136110	1075394	9	True				
ANR	1076555	IdentifierDecl	tried_authentication = false		1075394	0					
ANR	1076556	IdentifierDeclType	bool		1075394	0					
ANR	1076557	Identifier	tried_authentication		1075394	1					
ANR	1076558	AssignmentExpression	tried_authentication = false		1075394	2		=			
ANR	1076559	Identifier	false		1075394	0					
ANR	1076560	Identifier	false		1075394	1					
ANR	1076561	ExpressionStatement	"session -> policy ( ) -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"	4521:3:136115:136196	1075394	10	True				
ANR	1076562	CallExpression	"session -> policy ( ) -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"		1075394	0					
ANR	1076563	Callee	session -> policy ( ) -> LookupBool		1075394	0					
ANR	1076564	PtrMemberAccess	session -> policy ( ) -> LookupBool		1075394	0					
ANR	1076565	CallExpression	session -> policy ( )		1075394	0					
ANR	1076566	Callee	session -> policy		1075394	0					
ANR	1076567	PtrMemberAccess	session -> policy		1075394	0					
ANR	1076568	Identifier	session		1075394	0					
ANR	1076569	Identifier	policy		1075394	1					
ANR	1076570	ArgumentList			1075394	1					
ANR	1076571	Identifier	LookupBool		1075394	1					
ANR	1076572	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		1075394	1					
ANR	1076573	Argument	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1076574	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1076575	Argument	tried_authentication		1075394	1					
ANR	1076576	Identifier	tried_authentication		1075394	0					
ANR	1076577	ExpressionStatement	sock -> setTriedAuthentication ( tried_authentication )	4522:3:136201:136251	1075394	11	True				
ANR	1076578	CallExpression	sock -> setTriedAuthentication ( tried_authentication )		1075394	0					
ANR	1076579	Callee	sock -> setTriedAuthentication		1075394	0					
ANR	1076580	PtrMemberAccess	sock -> setTriedAuthentication		1075394	0					
ANR	1076581	Identifier	sock		1075394	0					
ANR	1076582	Identifier	setTriedAuthentication		1075394	1					
ANR	1076583	ArgumentList	tried_authentication		1075394	1					
ANR	1076584	Argument	tried_authentication		1075394	0					
ANR	1076585	Identifier	tried_authentication		1075394	0					
ANR	1076586	ExpressionStatement	free ( sess_id )	4524:3:136257:136272	1075394	12	True				
ANR	1076587	CallExpression	free ( sess_id )		1075394	0					
ANR	1076588	Callee	free		1075394	0					
ANR	1076589	Identifier	free		1075394	0					
ANR	1076590	ArgumentList	sess_id		1075394	1					
ANR	1076591	Argument	sess_id		1075394	0					
ANR	1076592	Identifier	sess_id		1075394	0					
ANR	1076593	IfStatement	if ( return_address_ss )		1075394	13					
ANR	1076594	Condition	return_address_ss	4525:7:136281:136297	1075394	0	True				
ANR	1076595	Identifier	return_address_ss		1075394	0					
ANR	1076596	CompoundStatement		286:26:9273:9273	1075394	1					
ANR	1076597	ExpressionStatement	free ( return_address_ss )	4526:4:136306:136331	1075394	0	True				
ANR	1076598	CallExpression	free ( return_address_ss )		1075394	0					
ANR	1076599	Callee	free		1075394	0					
ANR	1076600	Identifier	free		1075394	0					
ANR	1076601	ArgumentList	return_address_ss		1075394	1					
ANR	1076602	Argument	return_address_ss		1075394	0					
ANR	1076603	Identifier	return_address_ss		1075394	0					
ANR	1076604	IfStatement	if ( who != NULL )		1075394	12					
ANR	1076605	Condition	who != NULL	4530:12:136355:136365	1075394	0	True				
ANR	1076606	EqualityExpression	who != NULL		1075394	0		!=			
ANR	1076607	Identifier	who		1075394	0					
ANR	1076608	Identifier	NULL		1075394	1					
ANR	1076609	CompoundStatement		291:25:9341:9341	1075394	1					
ANR	1076610	ExpressionStatement	sock -> setFullyQualifiedUser ( who )	4531:12:136382:136414	1075394	0	True				
ANR	1076611	CallExpression	sock -> setFullyQualifiedUser ( who )		1075394	0					
ANR	1076612	Callee	sock -> setFullyQualifiedUser		1075394	0					
ANR	1076613	PtrMemberAccess	sock -> setFullyQualifiedUser		1075394	0					
ANR	1076614	Identifier	sock		1075394	0					
ANR	1076615	Identifier	setFullyQualifiedUser		1075394	1					
ANR	1076616	ArgumentList	who		1075394	1					
ANR	1076617	Argument	who		1075394	0					
ANR	1076618	Identifier	who		1075394	0					
ANR	1076619	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: UDP message is from %s.\\n"" , who )"	4532:3:136419:136490	1075394	1	True				
ANR	1076620	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: UDP message is from %s.\\n"" , who )"		1075394	0					
ANR	1076621	Callee	dprintf		1075394	0					
ANR	1076622	Identifier	dprintf		1075394	0					
ANR	1076623	ArgumentList	D_SECURITY		1075394	1					
ANR	1076624	Argument	D_SECURITY		1075394	0					
ANR	1076625	Identifier	D_SECURITY		1075394	0					
ANR	1076626	Argument	"""DC_AUTHENTICATE: UDP message is from %s.\\n"""		1075394	1					
ANR	1076627	PrimaryExpression	"""DC_AUTHENTICATE: UDP message is from %s.\\n"""		1075394	0					
ANR	1076628	Argument	who		1075394	2					
ANR	1076629	Identifier	who		1075394	0					
ANR	1076630	ExpressionStatement	sock -> decode ( )	4537:1:136508:136522	1075394	20	True				
ANR	1076631	CallExpression	sock -> decode ( )		1075394	0					
ANR	1076632	Callee	sock -> decode		1075394	0					
ANR	1076633	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1076634	Identifier	sock		1075394	0					
ANR	1076635	Identifier	decode		1075394	1					
ANR	1076636	ArgumentList			1075394	1					
ANR	1076637	IdentifierDeclStatement	char tmpbuf [ 5 ] ;	4545:1:136916:136930	1075394	21	True				
ANR	1076638	IdentifierDecl	tmpbuf [ 5 ]		1075394	0					
ANR	1076639	IdentifierDeclType	char [ 5 ]		1075394	0					
ANR	1076640	Identifier	tmpbuf		1075394	1					
ANR	1076641	PrimaryExpression	5		1075394	2					
ANR	1076642	ExpressionStatement	"memset ( tmpbuf , 0 , sizeof ( tmpbuf ) )"	4546:1:136933:136964	1075394	22	True				
ANR	1076643	CallExpression	"memset ( tmpbuf , 0 , sizeof ( tmpbuf ) )"		1075394	0					
ANR	1076644	Callee	memset		1075394	0					
ANR	1076645	Identifier	memset		1075394	0					
ANR	1076646	ArgumentList	tmpbuf		1075394	1					
ANR	1076647	Argument	tmpbuf		1075394	0					
ANR	1076648	Identifier	tmpbuf		1075394	0					
ANR	1076649	Argument	0		1075394	1					
ANR	1076650	PrimaryExpression	0		1075394	0					
ANR	1076651	Argument	sizeof ( tmpbuf )		1075394	2					
ANR	1076652	SizeofExpression	sizeof ( tmpbuf )		1075394	0					
ANR	1076653	Sizeof	sizeof		1075394	0					
ANR	1076654	SizeofOperand	tmpbuf		1075394	1					
ANR	1076655	IfStatement	if ( is_tcp )		1075394	23					
ANR	1076656	Condition	is_tcp	4547:6:136972:136977	1075394	0	True				
ANR	1076657	Identifier	is_tcp		1075394	0					
ANR	1076658	CompoundStatement		308:15:9954:9954	1075394	1					
ANR	1076659	ExpressionStatement	"condor_read ( sock -> peer_description ( ) , sock -> get_file_desc ( ) , tmpbuf , sizeof ( tmpbuf ) - 1 , 1 , MSG_PEEK )"	4549:2:137051:137155	1075394	0	True				
ANR	1076660	CallExpression	"condor_read ( sock -> peer_description ( ) , sock -> get_file_desc ( ) , tmpbuf , sizeof ( tmpbuf ) - 1 , 1 , MSG_PEEK )"		1075394	0					
ANR	1076661	Callee	condor_read		1075394	0					
ANR	1076662	Identifier	condor_read		1075394	0					
ANR	1076663	ArgumentList	sock -> peer_description ( )		1075394	1					
ANR	1076664	Argument	sock -> peer_description ( )		1075394	0					
ANR	1076665	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1076666	Callee	sock -> peer_description		1075394	0					
ANR	1076667	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1076668	Identifier	sock		1075394	0					
ANR	1076669	Identifier	peer_description		1075394	1					
ANR	1076670	ArgumentList			1075394	1					
ANR	1076671	Argument	sock -> get_file_desc ( )		1075394	1					
ANR	1076672	CallExpression	sock -> get_file_desc ( )		1075394	0					
ANR	1076673	Callee	sock -> get_file_desc		1075394	0					
ANR	1076674	PtrMemberAccess	sock -> get_file_desc		1075394	0					
ANR	1076675	Identifier	sock		1075394	0					
ANR	1076676	Identifier	get_file_desc		1075394	1					
ANR	1076677	ArgumentList			1075394	1					
ANR	1076678	Argument	tmpbuf		1075394	2					
ANR	1076679	Identifier	tmpbuf		1075394	0					
ANR	1076680	Argument	sizeof ( tmpbuf ) - 1		1075394	3					
ANR	1076681	AdditiveExpression	sizeof ( tmpbuf ) - 1		1075394	0		-			
ANR	1076682	SizeofExpression	sizeof ( tmpbuf )		1075394	0					
ANR	1076683	Sizeof	sizeof		1075394	0					
ANR	1076684	SizeofOperand	tmpbuf		1075394	1					
ANR	1076685	PrimaryExpression	1		1075394	1					
ANR	1076686	Argument	1		1075394	4					
ANR	1076687	PrimaryExpression	1		1075394	0					
ANR	1076688	Argument	MSG_PEEK		1075394	5					
ANR	1076689	Identifier	MSG_PEEK		1075394	0					
ANR	1076690	IfStatement	"if ( strstr ( tmpbuf , ""GET"" ) )"		1075394	24					
ANR	1076691	Condition	"strstr ( tmpbuf , ""GET"" )"	4553:6:137188:137207	1075394	0	True				
ANR	1076692	CallExpression	"strstr ( tmpbuf , ""GET"" )"		1075394	0					
ANR	1076693	Callee	strstr		1075394	0					
ANR	1076694	Identifier	strstr		1075394	0					
ANR	1076695	ArgumentList	tmpbuf		1075394	1					
ANR	1076696	Argument	tmpbuf		1075394	0					
ANR	1076697	Identifier	tmpbuf		1075394	0					
ANR	1076698	Argument	"""GET"""		1075394	1					
ANR	1076699	PrimaryExpression	"""GET"""		1075394	0					
ANR	1076700	CompoundStatement		314:29:10184:10184	1075394	1					
ANR	1076701	IfStatement	"if ( param_boolean ( ""ENABLE_WEB_SERVER"" , false ) )"		1075394	0					
ANR	1076702	Condition	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"	4554:7:137220:137259	1075394	0	True				
ANR	1076703	CallExpression	"param_boolean ( ""ENABLE_WEB_SERVER"" , false )"		1075394	0					
ANR	1076704	Callee	param_boolean		1075394	0					
ANR	1076705	Identifier	param_boolean		1075394	0					
ANR	1076706	ArgumentList	"""ENABLE_WEB_SERVER"""		1075394	1					
ANR	1076707	Argument	"""ENABLE_WEB_SERVER"""		1075394	0					
ANR	1076708	PrimaryExpression	"""ENABLE_WEB_SERVER"""		1075394	0					
ANR	1076709	Argument	false		1075394	1					
ANR	1076710	Identifier	false		1075394	0					
ANR	1076711	CompoundStatement		315:50:10236:10236	1075394	1					
ANR	1076712	IfStatement	"if ( Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL ) )"		1075394	0					
ANR	1076713	Condition	"Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL )"	4556:8:137324:137370	1075394	0	True				
ANR	1076714	CallExpression	"Verify ( ""HTTP GET"" , READ , sock -> peer_addr ( ) , NULL )"		1075394	0					
ANR	1076715	Callee	Verify		1075394	0					
ANR	1076716	Identifier	Verify		1075394	0					
ANR	1076717	ArgumentList	"""HTTP GET"""		1075394	1					
ANR	1076718	Argument	"""HTTP GET"""		1075394	0					
ANR	1076719	PrimaryExpression	"""HTTP GET"""		1075394	0					
ANR	1076720	Argument	READ		1075394	1					
ANR	1076721	Identifier	READ		1075394	0					
ANR	1076722	Argument	sock -> peer_addr ( )		1075394	2					
ANR	1076723	CallExpression	sock -> peer_addr ( )		1075394	0					
ANR	1076724	Callee	sock -> peer_addr		1075394	0					
ANR	1076725	PtrMemberAccess	sock -> peer_addr		1075394	0					
ANR	1076726	Identifier	sock		1075394	0					
ANR	1076727	Identifier	peer_addr		1075394	1					
ANR	1076728	ArgumentList			1075394	1					
ANR	1076729	Argument	NULL		1075394	3					
ANR	1076730	Identifier	NULL		1075394	0					
ANR	1076731	CompoundStatement		317:58:10347:10347	1075394	1					
ANR	1076732	ExpressionStatement	is_http_get = true	4557:4:137380:137398	1075394	0	True				
ANR	1076733	AssignmentExpression	is_http_get = true		1075394	0		=			
ANR	1076734	Identifier	is_http_get		1075394	0					
ANR	1076735	Identifier	true		1075394	1					
ANR	1076736	ElseStatement	else		1075394	0					
ANR	1076737	CompoundStatement		320:9:10387:10387	1075394	0					
ANR	1076738	Statement	dprintf	4560:3:137419:137425	1075394	0	True				
ANR	1076739	Statement	(	4560:10:137426:137426	1075394	1	True				
ANR	1076740	Statement	D_ALWAYS	4560:11:137427:137434	1075394	2	True				
ANR	1076741	Statement	","	4560:19:137435:137435	1075394	3	True				
ANR	1076742	Statement	"""Received HTTP GET connection from %s -- """	4560:20:137436:137477	1075394	4	True				
ANR	1076743	Statement	"""DENIED because ENABLE_WEB_SERVER=FALSE\\n"""	4561:17:137496:137537	1075394	5	True				
ANR	1076744	Statement	","	4561:59:137538:137538	1075394	6	True				
ANR	1076745	Statement	sock	4562:8:137548:137551	1075394	7	True				
ANR	1076746	Statement	->	4562:12:137552:137553	1075394	8	True				
ANR	1076747	Statement	peer_description	4562:14:137554:137569	1075394	9	True				
ANR	1076748	Statement	(	4562:30:137570:137570	1075394	10	True				
ANR	1076749	Statement	)	4562:31:137571:137571	1075394	11	True				
ANR	1076750	Statement	)	4562:32:137572:137572	1075394	12	True				
ANR	1076751	ExpressionStatement		4562:33:137573:137573	1075394	13	True				
ANR	1076752	ElseStatement	else		1075394	0					
ANR	1076753	CompoundStatement		325:8:10560:10560	1075394	0					
ANR	1076754	IfStatement	"if ( strstr ( tmpbuf , ""POST"" ) )"		1075394	0					
ANR	1076755	Condition	"strstr ( tmpbuf , ""POST"" )"	4565:7:137596:137616	1075394	0	True				
ANR	1076756	CallExpression	"strstr ( tmpbuf , ""POST"" )"		1075394	0					
ANR	1076757	Callee	strstr		1075394	0					
ANR	1076758	Identifier	strstr		1075394	0					
ANR	1076759	ArgumentList	tmpbuf		1075394	1					
ANR	1076760	Argument	tmpbuf		1075394	0					
ANR	1076761	Identifier	tmpbuf		1075394	0					
ANR	1076762	Argument	"""POST"""		1075394	1					
ANR	1076763	PrimaryExpression	"""POST"""		1075394	0					
ANR	1076764	CompoundStatement		326:31:10593:10593	1075394	1					
ANR	1076765	IfStatement	"if ( param_boolean ( ""ENABLE_SOAP"" , false ) )"		1075394	0					
ANR	1076766	Condition	"param_boolean ( ""ENABLE_SOAP"" , false )"	4566:8:137630:137663	1075394	0	True				
ANR	1076767	CallExpression	"param_boolean ( ""ENABLE_SOAP"" , false )"		1075394	0					
ANR	1076768	Callee	param_boolean		1075394	0					
ANR	1076769	Identifier	param_boolean		1075394	0					
ANR	1076770	ArgumentList	"""ENABLE_SOAP"""		1075394	1					
ANR	1076771	Argument	"""ENABLE_SOAP"""		1075394	0					
ANR	1076772	PrimaryExpression	"""ENABLE_SOAP"""		1075394	0					
ANR	1076773	Argument	false		1075394	1					
ANR	1076774	Identifier	false		1075394	0					
ANR	1076775	CompoundStatement		327:45:10640:10640	1075394	1					
ANR	1076776	IfStatement	"if ( Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL ) )"		1075394	0					
ANR	1076777	Condition	"Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL )"	4568:9:137719:137770	1075394	0	True				
ANR	1076778	CallExpression	"Verify ( ""HTTP POST"" , SOAP_PERM , sock -> peer_addr ( ) , NULL )"		1075394	0					
ANR	1076779	Callee	Verify		1075394	0					
ANR	1076780	Identifier	Verify		1075394	0					
ANR	1076781	ArgumentList	"""HTTP POST"""		1075394	1					
ANR	1076782	Argument	"""HTTP POST"""		1075394	0					
ANR	1076783	PrimaryExpression	"""HTTP POST"""		1075394	0					
ANR	1076784	Argument	SOAP_PERM		1075394	1					
ANR	1076785	Identifier	SOAP_PERM		1075394	0					
ANR	1076786	Argument	sock -> peer_addr ( )		1075394	2					
ANR	1076787	CallExpression	sock -> peer_addr ( )		1075394	0					
ANR	1076788	Callee	sock -> peer_addr		1075394	0					
ANR	1076789	PtrMemberAccess	sock -> peer_addr		1075394	0					
ANR	1076790	Identifier	sock		1075394	0					
ANR	1076791	Identifier	peer_addr		1075394	1					
ANR	1076792	ArgumentList			1075394	1					
ANR	1076793	Argument	NULL		1075394	3					
ANR	1076794	Identifier	NULL		1075394	0					
ANR	1076795	CompoundStatement		329:64:10747:10747	1075394	1					
ANR	1076796	ExpressionStatement	is_http_post = true	4569:5:137781:137800	1075394	0	True				
ANR	1076797	AssignmentExpression	is_http_post = true		1075394	0		=			
ANR	1076798	Identifier	is_http_post		1075394	0					
ANR	1076799	Identifier	true		1075394	1					
ANR	1076800	ElseStatement	else		1075394	0					
ANR	1076801	CompoundStatement		332:10:10791:10791	1075394	0					
ANR	1076802	Statement	dprintf	4572:4:137824:137830	1075394	0	True				
ANR	1076803	Statement	(	4572:11:137831:137831	1075394	1	True				
ANR	1076804	Statement	D_ALWAYS	4572:12:137832:137839	1075394	2	True				
ANR	1076805	Statement	","	4572:20:137840:137840	1075394	3	True				
ANR	1076806	Statement	"""Received HTTP POST connection from %s -- """	4572:21:137841:137883	1075394	4	True				
ANR	1076807	Statement	"""DENIED because ENABLE_SOAP=FALSE\\n"""	4573:8:137893:137928	1075394	5	True				
ANR	1076808	Statement	","	4573:44:137929:137929	1075394	6	True				
ANR	1076809	Statement	sock	4574:8:137939:137942	1075394	7	True				
ANR	1076810	Statement	->	4574:12:137943:137944	1075394	8	True				
ANR	1076811	Statement	peer_description	4574:14:137945:137960	1075394	9	True				
ANR	1076812	Statement	(	4574:30:137961:137961	1075394	10	True				
ANR	1076813	Statement	)	4574:31:137962:137962	1075394	11	True				
ANR	1076814	Statement	)	4574:32:137963:137963	1075394	12	True				
ANR	1076815	ExpressionStatement		4574:33:137964:137964	1075394	13	True				
ANR	1076816	IfStatement	if ( is_http_post || is_http_get )		1075394	25					
ANR	1076817	Condition	is_http_post || is_http_get	4578:6:137984:138010	1075394	0	True				
ANR	1076818	OrExpression	is_http_post || is_http_get		1075394	0		||			
ANR	1076819	Identifier	is_http_post		1075394	0					
ANR	1076820	Identifier	is_http_get		1075394	1					
ANR	1076821	CompoundStatement		341:2:10992:11012	1075394	1					
ANR	1076822	IdentifierDeclStatement	struct soap * cursoap ;	4580:2:138019:138039	1075394	0	True				
ANR	1076823	IdentifierDecl	* cursoap		1075394	0					
ANR	1076824	IdentifierDeclType	struct soap *		1075394	0					
ANR	1076825	Identifier	cursoap		1075394	1					
ANR	1076826	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received HTTP %s connection from %s\\n"" , is_http_get ? ""GET"" : ""POST"" , sock -> peer_description ( ) )"	4583:2:138094:138215	1075394	1	True				
ANR	1076827	CallExpression	"dprintf ( D_ALWAYS , ""Received HTTP %s connection from %s\\n"" , is_http_get ? ""GET"" : ""POST"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1076828	Callee	dprintf		1075394	0					
ANR	1076829	Identifier	dprintf		1075394	0					
ANR	1076830	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076831	Argument	D_ALWAYS		1075394	0					
ANR	1076832	Identifier	D_ALWAYS		1075394	0					
ANR	1076833	Argument	"""Received HTTP %s connection from %s\\n"""		1075394	1					
ANR	1076834	PrimaryExpression	"""Received HTTP %s connection from %s\\n"""		1075394	0					
ANR	1076835	Argument	"is_http_get ? ""GET"" : ""POST"""		1075394	2					
ANR	1076836	ConditionalExpression	"is_http_get ? ""GET"" : ""POST"""		1075394	0					
ANR	1076837	Condition	is_http_get		1075394	0					
ANR	1076838	Identifier	is_http_get		1075394	0					
ANR	1076839	PrimaryExpression	"""GET"""		1075394	1					
ANR	1076840	PrimaryExpression	"""POST"""		1075394	2					
ANR	1076841	Argument	sock -> peer_description ( )		1075394	3					
ANR	1076842	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1076843	Callee	sock -> peer_description		1075394	0					
ANR	1076844	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1076845	Identifier	sock		1075394	0					
ANR	1076846	Identifier	peer_description		1075394	1					
ANR	1076847	ArgumentList			1075394	1					
ANR	1076848	ExpressionStatement	ASSERT ( soap )	4588:2:138221:138235	1075394	2	True				
ANR	1076849	CallExpression	ASSERT ( soap )		1075394	0					
ANR	1076850	Callee	ASSERT		1075394	0					
ANR	1076851	Identifier	ASSERT		1075394	0					
ANR	1076852	ArgumentList	soap		1075394	1					
ANR	1076853	Argument	soap		1075394	0					
ANR	1076854	Identifier	soap		1075394	0					
ANR	1076855	ExpressionStatement	"cursoap = dc_soap_accept ( sock , soap )"	4589:2:138239:138275	1075394	3	True				
ANR	1076856	AssignmentExpression	"cursoap = dc_soap_accept ( sock , soap )"		1075394	0		=			
ANR	1076857	Identifier	cursoap		1075394	0					
ANR	1076858	CallExpression	"dc_soap_accept ( sock , soap )"		1075394	1					
ANR	1076859	Callee	dc_soap_accept		1075394	0					
ANR	1076860	Identifier	dc_soap_accept		1075394	0					
ANR	1076861	ArgumentList	sock		1075394	1					
ANR	1076862	Argument	sock		1075394	0					
ANR	1076863	Identifier	sock		1075394	0					
ANR	1076864	Argument	soap		1075394	1					
ANR	1076865	Identifier	soap		1075394	0					
ANR	1076866	ExpressionStatement	"dprintf ( D_ALWAYS , ""About to serve HTTP request...\\n"" )"	4592:2:138336:138388	1075394	4	True				
ANR	1076867	CallExpression	"dprintf ( D_ALWAYS , ""About to serve HTTP request...\\n"" )"		1075394	0					
ANR	1076868	Callee	dprintf		1075394	0					
ANR	1076869	Identifier	dprintf		1075394	0					
ANR	1076870	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076871	Argument	D_ALWAYS		1075394	0					
ANR	1076872	Identifier	D_ALWAYS		1075394	0					
ANR	1076873	Argument	"""About to serve HTTP request...\\n"""		1075394	1					
ANR	1076874	PrimaryExpression	"""About to serve HTTP request...\\n"""		1075394	0					
ANR	1076875	ExpressionStatement	dc_soap_serve ( cursoap )	4593:2:138392:138414	1075394	5	True				
ANR	1076876	CallExpression	dc_soap_serve ( cursoap )		1075394	0					
ANR	1076877	Callee	dc_soap_serve		1075394	0					
ANR	1076878	Identifier	dc_soap_serve		1075394	0					
ANR	1076879	ArgumentList	cursoap		1075394	1					
ANR	1076880	Argument	cursoap		1075394	0					
ANR	1076881	Identifier	cursoap		1075394	0					
ANR	1076882	ExpressionStatement	dc_soap_free ( cursoap )	4594:2:138418:138439	1075394	6	True				
ANR	1076883	CallExpression	dc_soap_free ( cursoap )		1075394	0					
ANR	1076884	Callee	dc_soap_free		1075394	0					
ANR	1076885	Identifier	dc_soap_free		1075394	0					
ANR	1076886	ArgumentList	cursoap		1075394	1					
ANR	1076887	Argument	cursoap		1075394	0					
ANR	1076888	Identifier	cursoap		1075394	0					
ANR	1076889	ExpressionStatement	"dprintf ( D_ALWAYS , ""Completed servicing HTTP request\\n"" )"	4595:2:138443:138498	1075394	7	True				
ANR	1076890	CallExpression	"dprintf ( D_ALWAYS , ""Completed servicing HTTP request\\n"" )"		1075394	0					
ANR	1076891	Callee	dprintf		1075394	0					
ANR	1076892	Identifier	dprintf		1075394	0					
ANR	1076893	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076894	Argument	D_ALWAYS		1075394	0					
ANR	1076895	Identifier	D_ALWAYS		1075394	0					
ANR	1076896	Argument	"""Completed servicing HTTP request\\n"""		1075394	1					
ANR	1076897	PrimaryExpression	"""Completed servicing HTTP request\\n"""		1075394	0					
ANR	1076898	ExpressionStatement	sock -> _sock = INVALID_SOCKET	4600:2:138680:138708	1075394	8	True				
ANR	1076899	AssignmentExpression	sock -> _sock = INVALID_SOCKET		1075394	0		=			
ANR	1076900	PtrMemberAccess	sock -> _sock		1075394	0					
ANR	1076901	Identifier	sock		1075394	0					
ANR	1076902	Identifier	_sock		1075394	1					
ANR	1076903	Identifier	INVALID_SOCKET		1075394	1					
ANR	1076904	ExpressionStatement	result = TRUE	4602:2:138714:138727	1075394	9	True				
ANR	1076905	AssignmentExpression	result = TRUE		1075394	0		=			
ANR	1076906	Identifier	result		1075394	0					
ANR	1076907	Identifier	TRUE		1075394	1					
ANR	1076908	GotoStatement	goto finalize ;	4603:2:138731:138744	1075394	10	True				
ANR	1076909	Identifier	finalize		1075394	0					
ANR	1076910	ExpressionStatement	sock -> timeout ( 1 )	4609:1:138914:138930	1075394	26	True				
ANR	1076911	CallExpression	sock -> timeout ( 1 )		1075394	0					
ANR	1076912	Callee	sock -> timeout		1075394	0					
ANR	1076913	PtrMemberAccess	sock -> timeout		1075394	0					
ANR	1076914	Identifier	sock		1075394	0					
ANR	1076915	Identifier	timeout		1075394	1					
ANR	1076916	ArgumentList	1		1075394	1					
ANR	1076917	Argument	1		1075394	0					
ANR	1076918	PrimaryExpression	1		1075394	0					
ANR	1076919	ExpressionStatement	result = sock -> code ( req )	4610:1:138933:138957	1075394	27	True				
ANR	1076920	AssignmentExpression	result = sock -> code ( req )		1075394	0		=			
ANR	1076921	Identifier	result		1075394	0					
ANR	1076922	CallExpression	sock -> code ( req )		1075394	1					
ANR	1076923	Callee	sock -> code		1075394	0					
ANR	1076924	PtrMemberAccess	sock -> code		1075394	0					
ANR	1076925	Identifier	sock		1075394	0					
ANR	1076926	Identifier	code		1075394	1					
ANR	1076927	ArgumentList	req		1075394	1					
ANR	1076928	Argument	req		1075394	0					
ANR	1076929	Identifier	req		1075394	0					
ANR	1076930	ExpressionStatement	sock -> timeout ( 20 )	4613:1:139088:139105	1075394	28	True				
ANR	1076931	CallExpression	sock -> timeout ( 20 )		1075394	0					
ANR	1076932	Callee	sock -> timeout		1075394	0					
ANR	1076933	PtrMemberAccess	sock -> timeout		1075394	0					
ANR	1076934	Identifier	sock		1075394	0					
ANR	1076935	Identifier	timeout		1075394	1					
ANR	1076936	ArgumentList	20		1075394	1					
ANR	1076937	Argument	20		1075394	0					
ANR	1076938	PrimaryExpression	20		1075394	0					
ANR	1076939	IfStatement	if ( ! result )		1075394	29					
ANR	1076940	Condition	! result	4614:4:139111:139117	1075394	0	True				
ANR	1076941	UnaryOperationExpression	! result		1075394	0					
ANR	1076942	UnaryOperator	!		1075394	0					
ANR	1076943	Identifier	result		1075394	1					
ANR	1076944	CompoundStatement		376:2:12097:12133	1075394	1					
ANR	1076945	IdentifierDeclStatement	char const * ip = sock -> peer_ip_str ( ) ;	4615:2:139124:139160	1075394	0	True				
ANR	1076946	IdentifierDecl	* ip = sock -> peer_ip_str ( )		1075394	0					
ANR	1076947	IdentifierDeclType	char const *		1075394	0					
ANR	1076948	Identifier	ip		1075394	1					
ANR	1076949	AssignmentExpression	* ip = sock -> peer_ip_str ( )		1075394	2		=			
ANR	1076950	Identifier	ip		1075394	0					
ANR	1076951	CallExpression	sock -> peer_ip_str ( )		1075394	1					
ANR	1076952	Callee	sock -> peer_ip_str		1075394	0					
ANR	1076953	PtrMemberAccess	sock -> peer_ip_str		1075394	0					
ANR	1076954	Identifier	sock		1075394	0					
ANR	1076955	Identifier	peer_ip_str		1075394	1					
ANR	1076956	ArgumentList			1075394	1					
ANR	1076957	IfStatement	if ( ! ip )		1075394	1					
ANR	1076958	Condition	! ip	4616:5:139167:139169	1075394	0	True				
ANR	1076959	UnaryOperationExpression	! ip		1075394	0					
ANR	1076960	UnaryOperator	!		1075394	0					
ANR	1076961	Identifier	ip		1075394	1					
ANR	1076962	CompoundStatement		377:10:12145:12145	1075394	1					
ANR	1076963	ExpressionStatement	"ip = ""unknown address"""	4617:3:139177:139199	1075394	0	True				
ANR	1076964	AssignmentExpression	"ip = ""unknown address"""		1075394	0		=			
ANR	1076965	Identifier	ip		1075394	0					
ANR	1076966	PrimaryExpression	"""unknown address"""		1075394	1					
ANR	1076967	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"" , ip )"	4619:2:139207:139307	1075394	2	True				
ANR	1076968	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"" , ip )"		1075394	0					
ANR	1076969	Callee	dprintf		1075394	0					
ANR	1076970	Identifier	dprintf		1075394	0					
ANR	1076971	ArgumentList	D_ALWAYS		1075394	1					
ANR	1076972	Argument	D_ALWAYS		1075394	0					
ANR	1076973	Identifier	D_ALWAYS		1075394	0					
ANR	1076974	Argument	"""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"""		1075394	1					
ANR	1076975	PrimaryExpression	"""DaemonCore: Can't receive command request from %s (perhaps a timeout?)\\n"""		1075394	0					
ANR	1076976	Argument	ip		1075394	2					
ANR	1076977	Identifier	ip		1075394	0					
ANR	1076978	ExpressionStatement	result = FALSE	4621:2:139311:139325	1075394	3	True				
ANR	1076979	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1076980	Identifier	result		1075394	0					
ANR	1076981	Identifier	FALSE		1075394	1					
ANR	1076982	GotoStatement	goto finalize ;	4622:2:139329:139342	1075394	4	True				
ANR	1076983	Identifier	finalize		1075394	0					
ANR	1076984	IfStatement	if ( req == DC_AUTHENTICATE )		1075394	30					
ANR	1076985	Condition	req == DC_AUTHENTICATE	4625:5:139353:139374	1075394	0	True				
ANR	1076986	EqualityExpression	req == DC_AUTHENTICATE		1075394	0		==			
ANR	1076987	Identifier	req		1075394	0					
ANR	1076988	Identifier	DC_AUTHENTICATE		1075394	1					
ANR	1076989	CompoundStatement		459:2:14285:14315	1075394	1					
ANR	1076990	ExpressionStatement	ScopedEnableParallel ( true )	4628:2:139459:139485	1075394	0	True				
ANR	1076991	CallExpression	ScopedEnableParallel ( true )		1075394	0					
ANR	1076992	Callee	ScopedEnableParallel		1075394	0					
ANR	1076993	Identifier	ScopedEnableParallel		1075394	0					
ANR	1076994	ArgumentList	true		1075394	1					
ANR	1076995	Argument	true		1075394	0					
ANR	1076996	Identifier	true		1075394	0					
ANR	1076997	ExpressionStatement	sock -> decode ( )	4630:2:139490:139504	1075394	1	True				
ANR	1076998	CallExpression	sock -> decode ( )		1075394	0					
ANR	1076999	Callee	sock -> decode		1075394	0					
ANR	1077000	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1077001	Identifier	sock		1075394	0					
ANR	1077002	Identifier	decode		1075394	1					
ANR	1077003	ArgumentList			1075394	1					
ANR	1077004	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"" , sock -> peer_description ( ) )"	4632:2:139509:139610	1075394	2	True				
ANR	1077005	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1077006	Callee	dprintf		1075394	0					
ANR	1077007	Identifier	dprintf		1075394	0					
ANR	1077008	ArgumentList	D_SECURITY		1075394	1					
ANR	1077009	Argument	D_SECURITY		1075394	0					
ANR	1077010	Identifier	D_SECURITY		1075394	0					
ANR	1077011	Argument	"""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"""		1075394	1					
ANR	1077012	PrimaryExpression	"""DC_AUTHENTICATE: received DC_AUTHENTICATE from %s\\n"""		1075394	0					
ANR	1077013	Argument	sock -> peer_description ( )		1075394	2					
ANR	1077014	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1077015	Callee	sock -> peer_description		1075394	0					
ANR	1077016	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1077017	Identifier	sock		1075394	0					
ANR	1077018	Identifier	peer_description		1075394	1					
ANR	1077019	ArgumentList			1075394	1					
ANR	1077020	IdentifierDeclStatement	ClassAd auth_info ;	4634:2:139615:139632	1075394	3	True				
ANR	1077021	IdentifierDecl	auth_info		1075394	0					
ANR	1077022	IdentifierDeclType	ClassAd		1075394	0					
ANR	1077023	Identifier	auth_info		1075394	1					
ANR	1077024	IfStatement	if ( ! auth_info . initFromStream ( * sock ) )		1075394	4					
ANR	1077025	Condition	! auth_info . initFromStream ( * sock )	4635:6:139640:139671	1075394	0	True				
ANR	1077026	UnaryOperationExpression	! auth_info . initFromStream ( * sock )		1075394	0					
ANR	1077027	UnaryOperator	!		1075394	0					
ANR	1077028	CallExpression	auth_info . initFromStream ( * sock )		1075394	1					
ANR	1077029	Callee	auth_info . initFromStream		1075394	0					
ANR	1077030	MemberAccess	auth_info . initFromStream		1075394	0					
ANR	1077031	Identifier	auth_info		1075394	0					
ANR	1077032	Identifier	initFromStream		1075394	1					
ANR	1077033	ArgumentList	* sock		1075394	1					
ANR	1077034	Argument	* sock		1075394	0					
ANR	1077035	UnaryOperationExpression	* sock		1075394	0					
ANR	1077036	UnaryOperator	*		1075394	0					
ANR	1077037	Identifier	sock		1075394	1					
ANR	1077038	CompoundStatement		396:40:12647:12647	1075394	1					
ANR	1077039	Statement	dprintf	4636:3:139679:139685	1075394	0	True				
ANR	1077040	Statement	(	4636:11:139687:139687	1075394	1	True				
ANR	1077041	Statement	D_ALWAYS	4636:12:139688:139695	1075394	2	True				
ANR	1077042	Statement	","	4636:20:139696:139696	1075394	3	True				
ANR	1077043	Statement	"""ERROR: DC_AUTHENTICATE unable to """	4636:22:139698:139732	1075394	4	True				
ANR	1077044	Statement	"""receive auth_info from %s!\\n"""	4637:6:139740:139769	1075394	5	True				
ANR	1077045	Statement	","	4637:36:139770:139770	1075394	6	True				
ANR	1077046	Statement	sock	4637:38:139772:139775	1075394	7	True				
ANR	1077047	Statement	->	4637:42:139776:139777	1075394	8	True				
ANR	1077048	Statement	peer_description	4637:44:139778:139793	1075394	9	True				
ANR	1077049	Statement	(	4637:60:139794:139794	1075394	10	True				
ANR	1077050	Statement	)	4637:61:139795:139795	1075394	11	True				
ANR	1077051	Statement	)	4637:62:139796:139796	1075394	12	True				
ANR	1077052	ExpressionStatement		4637:63:139797:139797	1075394	13	True				
ANR	1077053	ExpressionStatement	result = FALSE	4638:3:139802:139816	1075394	14	True				
ANR	1077054	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077055	Identifier	result		1075394	0					
ANR	1077056	Identifier	FALSE		1075394	1					
ANR	1077057	GotoStatement	goto finalize ;	4639:3:139821:139834	1075394	15	True				
ANR	1077058	Identifier	finalize		1075394	0					
ANR	1077059	IfStatement	if ( is_tcp && ! sock -> end_of_message ( ) )		1075394	5					
ANR	1077060	Condition	is_tcp && ! sock -> end_of_message ( )	4642:7:139848:139880	1075394	0	True				
ANR	1077061	AndExpression	is_tcp && ! sock -> end_of_message ( )		1075394	0		&&			
ANR	1077062	Identifier	is_tcp		1075394	0					
ANR	1077063	UnaryOperationExpression	! sock -> end_of_message ( )		1075394	1					
ANR	1077064	UnaryOperator	!		1075394	0					
ANR	1077065	CallExpression	sock -> end_of_message ( )		1075394	1					
ANR	1077066	Callee	sock -> end_of_message		1075394	0					
ANR	1077067	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1077068	Identifier	sock		1075394	0					
ANR	1077069	Identifier	end_of_message		1075394	1					
ANR	1077070	ArgumentList			1075394	1					
ANR	1077071	CompoundStatement		403:42:12856:12856	1075394	1					
ANR	1077072	Statement	dprintf	4643:3:139888:139894	1075394	0	True				
ANR	1077073	Statement	(	4643:11:139896:139896	1075394	1	True				
ANR	1077074	Statement	D_ALWAYS	4643:12:139897:139904	1075394	2	True				
ANR	1077075	Statement	","	4643:20:139905:139905	1075394	3	True				
ANR	1077076	Statement	"""ERROR: DC_AUTHENTICATE is TCP, unable to """	4643:22:139907:139949	1075394	4	True				
ANR	1077077	Statement	"""receive eom!\\n"""	4644:8:139959:139974	1075394	5	True				
ANR	1077078	Statement	)	4644:24:139975:139975	1075394	6	True				
ANR	1077079	ExpressionStatement		4644:25:139976:139976	1075394	7	True				
ANR	1077080	ExpressionStatement	result = FALSE	4645:3:139981:139995	1075394	8	True				
ANR	1077081	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077082	Identifier	result		1075394	0					
ANR	1077083	Identifier	FALSE		1075394	1					
ANR	1077084	GotoStatement	goto finalize ;	4646:3:140000:140013	1075394	9	True				
ANR	1077085	Identifier	finalize		1075394	0					
ANR	1077086	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	6					
ANR	1077087	Condition	DebugFlags & D_FULLDEBUG	4649:6:140026:140049	1075394	0	True				
ANR	1077088	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1077089	Identifier	DebugFlags		1075394	0					
ANR	1077090	Identifier	D_FULLDEBUG		1075394	1					
ANR	1077091	CompoundStatement		410:32:13025:13025	1075394	1					
ANR	1077092	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received following ClassAd:\\n"" )"	4650:3:140057:140127	1075394	0	True				
ANR	1077093	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: received following ClassAd:\\n"" )"		1075394	0					
ANR	1077094	Callee	dprintf		1075394	0					
ANR	1077095	Identifier	dprintf		1075394	0					
ANR	1077096	ArgumentList	D_SECURITY		1075394	1					
ANR	1077097	Argument	D_SECURITY		1075394	0					
ANR	1077098	Identifier	D_SECURITY		1075394	0					
ANR	1077099	Argument	"""DC_AUTHENTICATE: received following ClassAd:\\n"""		1075394	1					
ANR	1077100	PrimaryExpression	"""DC_AUTHENTICATE: received following ClassAd:\\n"""		1075394	0					
ANR	1077101	ExpressionStatement	auth_info . dPrint ( D_SECURITY )	4651:3:140132:140161	1075394	1	True				
ANR	1077102	CallExpression	auth_info . dPrint ( D_SECURITY )		1075394	0					
ANR	1077103	Callee	auth_info . dPrint		1075394	0					
ANR	1077104	MemberAccess	auth_info . dPrint		1075394	0					
ANR	1077105	Identifier	auth_info		1075394	0					
ANR	1077106	Identifier	dPrint		1075394	1					
ANR	1077107	ArgumentList	D_SECURITY		1075394	1					
ANR	1077108	Argument	D_SECURITY		1075394	0					
ANR	1077109	Identifier	D_SECURITY		1075394	0					
ANR	1077110	IdentifierDeclStatement	MyString peer_version ;	4654:2:140170:140191	1075394	7	True				
ANR	1077111	IdentifierDecl	peer_version		1075394	0					
ANR	1077112	IdentifierDeclType	MyString		1075394	0					
ANR	1077113	Identifier	peer_version		1075394	1					
ANR	1077114	IfStatement	"if ( auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version ) )"		1075394	8					
ANR	1077115	Condition	"auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version )"	4655:6:140199:140261	1075394	0	True				
ANR	1077116	CallExpression	"auth_info . LookupString ( ATTR_SEC_REMOTE_VERSION , peer_version )"		1075394	0					
ANR	1077117	Callee	auth_info . LookupString		1075394	0					
ANR	1077118	MemberAccess	auth_info . LookupString		1075394	0					
ANR	1077119	Identifier	auth_info		1075394	0					
ANR	1077120	Identifier	LookupString		1075394	1					
ANR	1077121	ArgumentList	ATTR_SEC_REMOTE_VERSION		1075394	1					
ANR	1077122	Argument	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1077123	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1077124	Argument	peer_version		1075394	1					
ANR	1077125	Identifier	peer_version		1075394	0					
ANR	1077126	CompoundStatement		417:3:13243:13293	1075394	1					
ANR	1077127	IdentifierDeclStatement	CondorVersionInfo ver_info ( peer_version . Value ( ) ) ;	4656:3:140270:140320	1075394	0	True				
ANR	1077128	IdentifierDecl	ver_info ( peer_version . Value ( ) )		1075394	0					
ANR	1077129	IdentifierDeclType	CondorVersionInfo		1075394	0					
ANR	1077130	Identifier	ver_info		1075394	1					
ANR	1077131	CallExpression	peer_version . Value ( )		1075394	2					
ANR	1077132	Callee	peer_version . Value		1075394	0					
ANR	1077133	MemberAccess	peer_version . Value		1075394	0					
ANR	1077134	Identifier	peer_version		1075394	0					
ANR	1077135	Identifier	Value		1075394	1					
ANR	1077136	ArgumentList			1075394	1					
ANR	1077137	ExpressionStatement	sock -> set_peer_version ( & ver_info )	4657:3:140325:140360	1075394	1	True				
ANR	1077138	CallExpression	sock -> set_peer_version ( & ver_info )		1075394	0					
ANR	1077139	Callee	sock -> set_peer_version		1075394	0					
ANR	1077140	PtrMemberAccess	sock -> set_peer_version		1075394	0					
ANR	1077141	Identifier	sock		1075394	0					
ANR	1077142	Identifier	set_peer_version		1075394	1					
ANR	1077143	ArgumentList	& ver_info		1075394	1					
ANR	1077144	Argument	& ver_info		1075394	0					
ANR	1077145	UnaryOperationExpression	& ver_info		1075394	0					
ANR	1077146	UnaryOperator	&		1075394	0					
ANR	1077147	Identifier	ver_info		1075394	1					
ANR	1077148	IdentifierDeclStatement	int real_cmd = 0 ;	4661:2:140415:140431	1075394	9	True				
ANR	1077149	IdentifierDecl	real_cmd = 0		1075394	0					
ANR	1077150	IdentifierDeclType	int		1075394	0					
ANR	1077151	Identifier	real_cmd		1075394	1					
ANR	1077152	AssignmentExpression	real_cmd = 0		1075394	2		=			
ANR	1077153	Identifier	real_cmd		1075394	0					
ANR	1077154	PrimaryExpression	0		1075394	1					
ANR	1077155	IdentifierDeclStatement	int tmp_cmd = 0 ;	4662:2:140435:140450	1075394	10	True				
ANR	1077156	IdentifierDecl	tmp_cmd = 0		1075394	0					
ANR	1077157	IdentifierDeclType	int		1075394	0					
ANR	1077158	Identifier	tmp_cmd		1075394	1					
ANR	1077159	AssignmentExpression	tmp_cmd = 0		1075394	2		=			
ANR	1077160	Identifier	tmp_cmd		1075394	0					
ANR	1077161	PrimaryExpression	0		1075394	1					
ANR	1077162	ExpressionStatement	"auth_info . LookupInteger ( ATTR_SEC_COMMAND , real_cmd )"	4663:2:140454:140505	1075394	11	True				
ANR	1077163	CallExpression	"auth_info . LookupInteger ( ATTR_SEC_COMMAND , real_cmd )"		1075394	0					
ANR	1077164	Callee	auth_info . LookupInteger		1075394	0					
ANR	1077165	MemberAccess	auth_info . LookupInteger		1075394	0					
ANR	1077166	Identifier	auth_info		1075394	0					
ANR	1077167	Identifier	LookupInteger		1075394	1					
ANR	1077168	ArgumentList	ATTR_SEC_COMMAND		1075394	1					
ANR	1077169	Argument	ATTR_SEC_COMMAND		1075394	0					
ANR	1077170	Identifier	ATTR_SEC_COMMAND		1075394	0					
ANR	1077171	Argument	real_cmd		1075394	1					
ANR	1077172	Identifier	real_cmd		1075394	0					
ANR	1077173	IfStatement	if ( real_cmd == DC_AUTHENTICATE )		1075394	12					
ANR	1077174	Condition	real_cmd == DC_AUTHENTICATE	4665:6:140514:140540	1075394	0	True				
ANR	1077175	EqualityExpression	real_cmd == DC_AUTHENTICATE		1075394	0		==			
ANR	1077176	Identifier	real_cmd		1075394	0					
ANR	1077177	Identifier	DC_AUTHENTICATE		1075394	1					
ANR	1077178	CompoundStatement		426:35:13516:13516	1075394	1					
ANR	1077179	ExpressionStatement	"auth_info . LookupInteger ( ATTR_SEC_AUTH_COMMAND , tmp_cmd )"	4667:3:140587:140642	1075394	0	True				
ANR	1077180	CallExpression	"auth_info . LookupInteger ( ATTR_SEC_AUTH_COMMAND , tmp_cmd )"		1075394	0					
ANR	1077181	Callee	auth_info . LookupInteger		1075394	0					
ANR	1077182	MemberAccess	auth_info . LookupInteger		1075394	0					
ANR	1077183	Identifier	auth_info		1075394	0					
ANR	1077184	Identifier	LookupInteger		1075394	1					
ANR	1077185	ArgumentList	ATTR_SEC_AUTH_COMMAND		1075394	1					
ANR	1077186	Argument	ATTR_SEC_AUTH_COMMAND		1075394	0					
ANR	1077187	Identifier	ATTR_SEC_AUTH_COMMAND		1075394	0					
ANR	1077188	Argument	tmp_cmd		1075394	1					
ANR	1077189	Identifier	tmp_cmd		1075394	0					
ANR	1077190	ElseStatement	else		1075394	0					
ANR	1077191	CompoundStatement		429:9:13626:13626	1075394	0					
ANR	1077192	ExpressionStatement	tmp_cmd = real_cmd	4669:3:140658:140676	1075394	0	True				
ANR	1077193	AssignmentExpression	tmp_cmd = real_cmd		1075394	0		=			
ANR	1077194	Identifier	tmp_cmd		1075394	0					
ANR	1077195	Identifier	real_cmd		1075394	1					
ANR	1077196	IdentifierDeclStatement	int cmd_index = 0 ;	4674:2:140758:140775	1075394	13	True				
ANR	1077197	IdentifierDecl	cmd_index = 0		1075394	0					
ANR	1077198	IdentifierDeclType	int		1075394	0					
ANR	1077199	Identifier	cmd_index		1075394	1					
ANR	1077200	AssignmentExpression	cmd_index = 0		1075394	2		=			
ANR	1077201	Identifier	cmd_index		1075394	0					
ANR	1077202	PrimaryExpression	0		1075394	1					
ANR	1077203	ExpressionStatement	"reqFound = CommandNumToTableIndex ( tmp_cmd , & cmd_index )"	4675:2:140779:140832	1075394	14	True				
ANR	1077204	AssignmentExpression	"reqFound = CommandNumToTableIndex ( tmp_cmd , & cmd_index )"		1075394	0		=			
ANR	1077205	Identifier	reqFound		1075394	0					
ANR	1077206	CallExpression	"CommandNumToTableIndex ( tmp_cmd , & cmd_index )"		1075394	1					
ANR	1077207	Callee	CommandNumToTableIndex		1075394	0					
ANR	1077208	Identifier	CommandNumToTableIndex		1075394	0					
ANR	1077209	ArgumentList	tmp_cmd		1075394	1					
ANR	1077210	Argument	tmp_cmd		1075394	0					
ANR	1077211	Identifier	tmp_cmd		1075394	0					
ANR	1077212	Argument	& cmd_index		1075394	1					
ANR	1077213	UnaryOperationExpression	& cmd_index		1075394	0					
ANR	1077214	UnaryOperator	&		1075394	0					
ANR	1077215	Identifier	cmd_index		1075394	1					
ANR	1077216	IfStatement	if ( ! reqFound )		1075394	15					
ANR	1077217	Condition	! reqFound	4677:6:140841:140849	1075394	0	True				
ANR	1077218	UnaryOperationExpression	! reqFound		1075394	0					
ANR	1077219	UnaryOperator	!		1075394	0					
ANR	1077220	Identifier	reqFound		1075394	1					
ANR	1077221	CompoundStatement		438:17:13825:13825	1075394	1					
ANR	1077222	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received %s command (%d) (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , tmp_cmd , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"	4681:3:140935:141128	1075394	0	True				
ANR	1077223	CallExpression	"dprintf ( D_ALWAYS , ""Received %s command (%d) (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , tmp_cmd , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"		1075394	0					
ANR	1077224	Callee	dprintf		1075394	0					
ANR	1077225	Identifier	dprintf		1075394	0					
ANR	1077226	ArgumentList	D_ALWAYS		1075394	1					
ANR	1077227	Argument	D_ALWAYS		1075394	0					
ANR	1077228	Identifier	D_ALWAYS		1075394	0					
ANR	1077229	Argument	"""Received %s command (%d) (%s) from %s %s\\n"""		1075394	1					
ANR	1077230	PrimaryExpression	"""Received %s command (%d) (%s) from %s %s\\n"""		1075394	0					
ANR	1077231	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	2					
ANR	1077232	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	0					
ANR	1077233	Condition	is_tcp		1075394	0					
ANR	1077234	Identifier	is_tcp		1075394	0					
ANR	1077235	PrimaryExpression	"""TCP"""		1075394	1					
ANR	1077236	PrimaryExpression	"""UDP"""		1075394	2					
ANR	1077237	Argument	tmp_cmd		1075394	3					
ANR	1077238	Identifier	tmp_cmd		1075394	0					
ANR	1077239	Argument	"""UNREGISTERED COMMAND!"""		1075394	4					
ANR	1077240	PrimaryExpression	"""UNREGISTERED COMMAND!"""		1075394	0					
ANR	1077241	Argument	user . Value ( )		1075394	5					
ANR	1077242	CallExpression	user . Value ( )		1075394	0					
ANR	1077243	Callee	user . Value		1075394	0					
ANR	1077244	MemberAccess	user . Value		1075394	0					
ANR	1077245	Identifier	user		1075394	0					
ANR	1077246	Identifier	Value		1075394	1					
ANR	1077247	ArgumentList			1075394	1					
ANR	1077248	Argument	sock -> peer_description ( )		1075394	6					
ANR	1077249	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1077250	Callee	sock -> peer_description		1075394	0					
ANR	1077251	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1077252	Identifier	sock		1075394	0					
ANR	1077253	Identifier	peer_description		1075394	1					
ANR	1077254	ArgumentList			1075394	1					
ANR	1077255	ExpressionStatement	result = FALSE	4689:3:141134:141148	1075394	1	True				
ANR	1077256	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077257	Identifier	result		1075394	0					
ANR	1077258	Identifier	FALSE		1075394	1					
ANR	1077259	GotoStatement	goto finalize ;	4690:3:141153:141166	1075394	2	True				
ANR	1077260	Identifier	finalize		1075394	0					
ANR	1077261	IdentifierDeclStatement	bool new_session = false ;	4693:2:141175:141206	1075394	16	True				
ANR	1077262	IdentifierDecl	new_session = false		1075394	0					
ANR	1077263	IdentifierDeclType	bool		1075394	0					
ANR	1077264	Identifier	new_session		1075394	1					
ANR	1077265	AssignmentExpression	new_session = false		1075394	2		=			
ANR	1077266	Identifier	false		1075394	0					
ANR	1077267	Identifier	false		1075394	1					
ANR	1077268	IdentifierDeclStatement	bool using_cookie = false ;	4694:2:141210:141241	1075394	17	True				
ANR	1077269	IdentifierDecl	using_cookie = false		1075394	0					
ANR	1077270	IdentifierDeclType	bool		1075394	0					
ANR	1077271	Identifier	using_cookie		1075394	1					
ANR	1077272	AssignmentExpression	using_cookie = false		1075394	2		=			
ANR	1077273	Identifier	false		1075394	0					
ANR	1077274	Identifier	false		1075394	1					
ANR	1077275	IdentifierDeclStatement	bool valid_cookie = false ;	4695:2:141245:141271	1075394	18	True				
ANR	1077276	IdentifierDecl	valid_cookie = false		1075394	0					
ANR	1077277	IdentifierDeclType	bool		1075394	0					
ANR	1077278	Identifier	valid_cookie		1075394	1					
ANR	1077279	AssignmentExpression	valid_cookie = false		1075394	2		=			
ANR	1077280	Identifier	false		1075394	0					
ANR	1077281	Identifier	false		1075394	1					
ANR	1077282	IdentifierDeclStatement	char * incoming_cookie = NULL ;	4698:2:141312:141342	1075394	19	True				
ANR	1077283	IdentifierDecl	* incoming_cookie = NULL		1075394	0					
ANR	1077284	IdentifierDeclType	char *		1075394	0					
ANR	1077285	Identifier	incoming_cookie		1075394	1					
ANR	1077286	AssignmentExpression	* incoming_cookie = NULL		1075394	2		=			
ANR	1077287	Identifier	NULL		1075394	0					
ANR	1077288	Identifier	NULL		1075394	1					
ANR	1077289	IfStatement	"if ( auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie ) )"		1075394	20					
ANR	1077290	Condition	"auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie )"	4699:6:141350:141406	1075394	0	True				
ANR	1077291	CallExpression	"auth_info . LookupString ( ATTR_SEC_COOKIE , & incoming_cookie )"		1075394	0					
ANR	1077292	Callee	auth_info . LookupString		1075394	0					
ANR	1077293	MemberAccess	auth_info . LookupString		1075394	0					
ANR	1077294	Identifier	auth_info		1075394	0					
ANR	1077295	Identifier	LookupString		1075394	1					
ANR	1077296	ArgumentList	ATTR_SEC_COOKIE		1075394	1					
ANR	1077297	Argument	ATTR_SEC_COOKIE		1075394	0					
ANR	1077298	Identifier	ATTR_SEC_COOKIE		1075394	0					
ANR	1077299	Argument	& incoming_cookie		1075394	1					
ANR	1077300	UnaryOperationExpression	& incoming_cookie		1075394	0					
ANR	1077301	UnaryOperator	&		1075394	0					
ANR	1077302	Identifier	incoming_cookie		1075394	1					
ANR	1077303	CompoundStatement		460:65:14382:14382	1075394	1					
ANR	1077304	ExpressionStatement	valid_cookie = cookie_is_valid ( ( unsigned char * ) incoming_cookie )	4702:3:141462:141525	1075394	0	True				
ANR	1077305	AssignmentExpression	valid_cookie = cookie_is_valid ( ( unsigned char * ) incoming_cookie )		1075394	0		=			
ANR	1077306	Identifier	valid_cookie		1075394	0					
ANR	1077307	CallExpression	cookie_is_valid ( ( unsigned char * ) incoming_cookie )		1075394	1					
ANR	1077308	Callee	cookie_is_valid		1075394	0					
ANR	1077309	Identifier	cookie_is_valid		1075394	0					
ANR	1077310	ArgumentList	( unsigned char * ) incoming_cookie		1075394	1					
ANR	1077311	Argument	( unsigned char * ) incoming_cookie		1075394	0					
ANR	1077312	CastExpression	( unsigned char * ) incoming_cookie		1075394	0					
ANR	1077313	CastTarget	unsigned char *		1075394	0					
ANR	1077314	Identifier	incoming_cookie		1075394	1					
ANR	1077315	ExpressionStatement	free ( incoming_cookie )	4703:3:141530:141552	1075394	1	True				
ANR	1077316	CallExpression	free ( incoming_cookie )		1075394	0					
ANR	1077317	Callee	free		1075394	0					
ANR	1077318	Identifier	free		1075394	0					
ANR	1077319	ArgumentList	incoming_cookie		1075394	1					
ANR	1077320	Argument	incoming_cookie		1075394	0					
ANR	1077321	Identifier	incoming_cookie		1075394	0					
ANR	1077322	IfStatement	if ( valid_cookie )		1075394	2					
ANR	1077323	Condition	valid_cookie	4705:8:141563:141574	1075394	0	True				
ANR	1077324	Identifier	valid_cookie		1075394	0					
ANR	1077325	CompoundStatement		466:23:14551:14551	1075394	1					
ANR	1077326	ExpressionStatement	using_cookie = true	4707:4:141630:141649	1075394	0	True				
ANR	1077327	AssignmentExpression	using_cookie = true		1075394	0		=			
ANR	1077328	Identifier	using_cookie		1075394	0					
ANR	1077329	Identifier	true		1075394	1					
ANR	1077330	ElseStatement	else		1075394	0					
ANR	1077331	CompoundStatement		469:10:14634:14634	1075394	0					
ANR	1077332	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"" , sock -> peer_description ( ) )"	4710:4:141688:141790	1075394	0	True				
ANR	1077333	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1077334	Callee	dprintf		1075394	0					
ANR	1077335	Identifier	dprintf		1075394	0					
ANR	1077336	ArgumentList	D_ALWAYS		1075394	1					
ANR	1077337	Argument	D_ALWAYS		1075394	0					
ANR	1077338	Identifier	D_ALWAYS		1075394	0					
ANR	1077339	Argument	"""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"""		1075394	1					
ANR	1077340	PrimaryExpression	"""DC_AUTHENTICATE: recieved invalid cookie from %s!!!\\n"""		1075394	0					
ANR	1077341	Argument	sock -> peer_description ( )		1075394	2					
ANR	1077342	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1077343	Callee	sock -> peer_description		1075394	0					
ANR	1077344	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1077345	Identifier	sock		1075394	0					
ANR	1077346	Identifier	peer_description		1075394	1					
ANR	1077347	ArgumentList			1075394	1					
ANR	1077348	ExpressionStatement	result = FALSE	4711:4:141796:141810	1075394	1	True				
ANR	1077349	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077350	Identifier	result		1075394	0					
ANR	1077351	Identifier	FALSE		1075394	1					
ANR	1077352	GotoStatement	goto finalize ;	4712:4:141816:141829	1075394	2	True				
ANR	1077353	Identifier	finalize		1075394	0					
ANR	1077354	IfStatement	if ( ! using_cookie )		1075394	21					
ANR	1077355	Condition	! using_cookie	4718:6:141897:141909	1075394	0	True				
ANR	1077356	UnaryOperationExpression	! using_cookie		1075394	0					
ANR	1077357	UnaryOperator	!		1075394	0					
ANR	1077358	Identifier	using_cookie		1075394	1					
ANR	1077359	CompoundStatement		479:21:14885:14885	1075394	1					
ANR	1077360	IfStatement	"if ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES )"		1075394	0					
ANR	1077361	Condition	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"	4720:8:141923:142011	1075394	0	True				
ANR	1077362	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"		1075394	0		==			
ANR	1077363	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_USE_SESSION )"		1075394	0					
ANR	1077364	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077365	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077366	Identifier	sec_man		1075394	0					
ANR	1077367	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1077368	ArgumentList	auth_info		1075394	1					
ANR	1077369	Argument	auth_info		1075394	0					
ANR	1077370	Identifier	auth_info		1075394	0					
ANR	1077371	Argument	ATTR_SEC_USE_SESSION		1075394	1					
ANR	1077372	Identifier	ATTR_SEC_USE_SESSION		1075394	0					
ANR	1077373	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1077374	CompoundStatement		483:4:14994:15023	1075394	1					
ANR	1077375	IdentifierDeclStatement	KeyCacheEntry * session = NULL ;	4722:4:142021:142050	1075394	0	True				
ANR	1077376	IdentifierDecl	* session = NULL		1075394	0					
ANR	1077377	IdentifierDeclType	KeyCacheEntry *		1075394	0					
ANR	1077378	Identifier	session		1075394	1					
ANR	1077379	AssignmentExpression	* session = NULL		1075394	2		=			
ANR	1077380	Identifier	NULL		1075394	0					
ANR	1077381	Identifier	NULL		1075394	1					
ANR	1077382	IfStatement	"if ( ! auth_info . LookupString ( ATTR_SEC_SID , & the_sid ) )"		1075394	1					
ANR	1077383	Condition	"! auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"	4724:8:142061:142108	1075394	0	True				
ANR	1077384	UnaryOperationExpression	"! auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"		1075394	0					
ANR	1077385	UnaryOperator	!		1075394	0					
ANR	1077386	CallExpression	"auth_info . LookupString ( ATTR_SEC_SID , & the_sid )"		1075394	1					
ANR	1077387	Callee	auth_info . LookupString		1075394	0					
ANR	1077388	MemberAccess	auth_info . LookupString		1075394	0					
ANR	1077389	Identifier	auth_info		1075394	0					
ANR	1077390	Identifier	LookupString		1075394	1					
ANR	1077391	ArgumentList	ATTR_SEC_SID		1075394	1					
ANR	1077392	Argument	ATTR_SEC_SID		1075394	0					
ANR	1077393	Identifier	ATTR_SEC_SID		1075394	0					
ANR	1077394	Argument	& the_sid		1075394	1					
ANR	1077395	UnaryOperationExpression	& the_sid		1075394	0					
ANR	1077396	UnaryOperator	&		1075394	0					
ANR	1077397	Identifier	the_sid		1075394	1					
ANR	1077398	CompoundStatement		485:58:15084:15084	1075394	1					
ANR	1077399	Statement	dprintf	4725:5:142118:142124	1075394	0	True				
ANR	1077400	Statement	(	4725:13:142126:142126	1075394	1	True				
ANR	1077401	Statement	D_ALWAYS	4725:14:142127:142134	1075394	2	True				
ANR	1077402	Statement	","	4725:22:142135:142135	1075394	3	True				
ANR	1077403	Statement	"""ERROR: DC_AUTHENTICATE unable to """	4725:24:142137:142171	1075394	4	True				
ANR	1077404	Statement	"""extract auth_info.%s from %s!\\n"""	4726:8:142181:142213	1075394	5	True				
ANR	1077405	Statement	","	4726:41:142214:142214	1075394	6	True				
ANR	1077406	Statement	ATTR_SEC_SID	4726:43:142216:142227	1075394	7	True				
ANR	1077407	Statement	","	4726:55:142228:142228	1075394	8	True				
ANR	1077408	Statement	sock	4727:8:142238:142241	1075394	9	True				
ANR	1077409	Statement	->	4727:12:142242:142243	1075394	10	True				
ANR	1077410	Statement	peer_description	4727:14:142244:142259	1075394	11	True				
ANR	1077411	Statement	(	4727:30:142260:142260	1075394	12	True				
ANR	1077412	Statement	)	4727:31:142261:142261	1075394	13	True				
ANR	1077413	Statement	)	4727:32:142262:142262	1075394	14	True				
ANR	1077414	ExpressionStatement		4727:33:142263:142263	1075394	15	True				
ANR	1077415	ExpressionStatement	result = FALSE	4728:5:142270:142284	1075394	16	True				
ANR	1077416	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077417	Identifier	result		1075394	0					
ANR	1077418	Identifier	FALSE		1075394	1					
ANR	1077419	GotoStatement	goto finalize ;	4729:5:142291:142304	1075394	17	True				
ANR	1077420	Identifier	finalize		1075394	0					
ANR	1077421	IfStatement	"if ( ! sec_man -> session_cache -> lookup ( the_sid , session ) )"		1075394	2					
ANR	1077422	Condition	"! sec_man -> session_cache -> lookup ( the_sid , session )"	4733:8:142353:142401	1075394	0	True				
ANR	1077423	UnaryOperationExpression	"! sec_man -> session_cache -> lookup ( the_sid , session )"		1075394	0					
ANR	1077424	UnaryOperator	!		1075394	0					
ANR	1077425	CallExpression	"sec_man -> session_cache -> lookup ( the_sid , session )"		1075394	1					
ANR	1077426	Callee	sec_man -> session_cache -> lookup		1075394	0					
ANR	1077427	PtrMemberAccess	sec_man -> session_cache -> lookup		1075394	0					
ANR	1077428	PtrMemberAccess	sec_man -> session_cache		1075394	0					
ANR	1077429	Identifier	sec_man		1075394	0					
ANR	1077430	Identifier	session_cache		1075394	1					
ANR	1077431	Identifier	lookup		1075394	1					
ANR	1077432	ArgumentList	the_sid		1075394	1					
ANR	1077433	Argument	the_sid		1075394	0					
ANR	1077434	Identifier	the_sid		1075394	0					
ANR	1077435	Argument	session		1075394	1					
ANR	1077436	Identifier	session		1075394	0					
ANR	1077437	CompoundStatement		499:5:15465:15490	1075394	1					
ANR	1077438	IdentifierDeclStatement	char * return_addr = NULL ;	4738:5:142492:142517	1075394	0	True				
ANR	1077439	IdentifierDecl	* return_addr = NULL		1075394	0					
ANR	1077440	IdentifierDeclType	char *		1075394	0					
ANR	1077441	Identifier	return_addr		1075394	1					
ANR	1077442	AssignmentExpression	* return_addr = NULL		1075394	2		=			
ANR	1077443	Identifier	NULL		1075394	0					
ANR	1077444	Identifier	NULL		1075394	1					
ANR	1077445	ExpressionStatement	"auth_info . LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	4739:5:142524:142590	1075394	1	True				
ANR	1077446	CallExpression	"auth_info . LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		1075394	0					
ANR	1077447	Callee	auth_info . LookupString		1075394	0					
ANR	1077448	MemberAccess	auth_info . LookupString		1075394	0					
ANR	1077449	Identifier	auth_info		1075394	0					
ANR	1077450	Identifier	LookupString		1075394	1					
ANR	1077451	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	1					
ANR	1077452	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1077453	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1077454	Argument	& return_addr		1075394	1					
ANR	1077455	UnaryOperationExpression	& return_addr		1075394	0					
ANR	1077456	UnaryOperator	&		1075394	0					
ANR	1077457	Identifier	return_addr		1075394	1					
ANR	1077458	Statement	dprintf	4741:5:142598:142604	1075394	2	True				
ANR	1077459	Statement	(	4741:13:142606:142606	1075394	3	True				
ANR	1077460	Statement	D_ALWAYS	4741:14:142607:142614	1075394	4	True				
ANR	1077461	Statement	","	4741:22:142615:142615	1075394	5	True				
ANR	1077462	Statement	"""DC_AUTHENTICATE: attempt to open """	4741:24:142617:142651	1075394	6	True				
ANR	1077463	Statement	"""invalid session %s, failing; this session was requested by %s with return address %s\\n"""	4742:10:142663:142750	1075394	7	True				
ANR	1077464	Statement	","	4742:98:142751:142751	1075394	8	True				
ANR	1077465	Statement	the_sid	4742:100:142753:142759	1075394	9	True				
ANR	1077466	Statement	","	4742:107:142760:142760	1075394	10	True				
ANR	1077467	Statement	sock	4742:109:142762:142765	1075394	11	True				
ANR	1077468	Statement	->	4742:113:142766:142767	1075394	12	True				
ANR	1077469	Statement	peer_description	4742:115:142768:142783	1075394	13	True				
ANR	1077470	Statement	(	4742:131:142784:142784	1075394	14	True				
ANR	1077471	Statement	)	4742:132:142785:142785	1075394	15	True				
ANR	1077472	Statement	","	4742:133:142786:142786	1075394	16	True				
ANR	1077473	Statement	return_addr	4742:135:142788:142798	1075394	17	True				
ANR	1077474	Statement	?	4742:147:142800:142800	1075394	18	True				
ANR	1077475	Label	return_addr :	4742:149:142802:142814	1075394	19	True				
ANR	1077476	Identifier	return_addr		1075394	0					
ANR	1077477	Statement	"""(none)"""	4742:163:142816:142823	1075394	20	True				
ANR	1077478	Statement	)	4742:171:142824:142824	1075394	21	True				
ANR	1077479	ExpressionStatement		4742:172:142825:142825	1075394	22	True				
ANR	1077480	IfStatement	if ( return_addr )		1075394	23					
ANR	1077481	Condition	return_addr	4744:9:142837:142847	1075394	0	True				
ANR	1077482	Identifier	return_addr		1075394	0					
ANR	1077483	CompoundStatement		505:23:15824:15824	1075394	1					
ANR	1077484	ExpressionStatement	"send_invalidate_session ( return_addr , the_sid )"	4745:6:142859:142906	1075394	0	True				
ANR	1077485	CallExpression	"send_invalidate_session ( return_addr , the_sid )"		1075394	0					
ANR	1077486	Callee	send_invalidate_session		1075394	0					
ANR	1077487	Identifier	send_invalidate_session		1075394	0					
ANR	1077488	ArgumentList	return_addr		1075394	1					
ANR	1077489	Argument	return_addr		1075394	0					
ANR	1077490	Identifier	return_addr		1075394	0					
ANR	1077491	Argument	the_sid		1075394	1					
ANR	1077492	Identifier	the_sid		1075394	0					
ANR	1077493	ExpressionStatement	free ( return_addr )	4746:6:142914:142932	1075394	1	True				
ANR	1077494	CallExpression	free ( return_addr )		1075394	0					
ANR	1077495	Callee	free		1075394	0					
ANR	1077496	Identifier	free		1075394	0					
ANR	1077497	ArgumentList	return_addr		1075394	1					
ANR	1077498	Argument	return_addr		1075394	0					
ANR	1077499	Identifier	return_addr		1075394	0					
ANR	1077500	ExpressionStatement	sock -> decode ( )	4750:5:142984:142998	1075394	24	True				
ANR	1077501	CallExpression	sock -> decode ( )		1075394	0					
ANR	1077502	Callee	sock -> decode		1075394	0					
ANR	1077503	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1077504	Identifier	sock		1075394	0					
ANR	1077505	Identifier	decode		1075394	1					
ANR	1077506	ArgumentList			1075394	1					
ANR	1077507	ExpressionStatement	sock -> end_of_message ( )	4751:5:143005:143027	1075394	25	True				
ANR	1077508	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1077509	Callee	sock -> end_of_message		1075394	0					
ANR	1077510	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1077511	Identifier	sock		1075394	0					
ANR	1077512	Identifier	end_of_message		1075394	1					
ANR	1077513	ArgumentList			1075394	1					
ANR	1077514	ExpressionStatement	result = FALSE	4754:5:143065:143079	1075394	26	True				
ANR	1077515	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077516	Identifier	result		1075394	0					
ANR	1077517	Identifier	FALSE		1075394	1					
ANR	1077518	GotoStatement	goto finalize ;	4755:5:143086:143099	1075394	27	True				
ANR	1077519	Identifier	finalize		1075394	0					
ANR	1077520	ElseStatement	else		1075394	0					
ANR	1077521	CompoundStatement		518:11:16086:16086	1075394	0					
ANR	1077522	IfStatement	if ( DebugFlags & D_SECURITY )		1075394	0					
ANR	1077523	Condition	DebugFlags & D_SECURITY	4760:9:143192:143214	1075394	0	True				
ANR	1077524	BitAndExpression	DebugFlags & D_SECURITY		1075394	0		&			
ANR	1077525	Identifier	DebugFlags		1075394	0					
ANR	1077526	Identifier	D_SECURITY		1075394	1					
ANR	1077527	CompoundStatement		522:6:16198:16222	1075394	1					
ANR	1077528	IdentifierDeclStatement	char * return_addr = NULL ;	4761:6:143225:143249	1075394	0	True				
ANR	1077529	IdentifierDecl	* return_addr = NULL		1075394	0					
ANR	1077530	IdentifierDeclType	char *		1075394	0					
ANR	1077531	Identifier	return_addr		1075394	1					
ANR	1077532	AssignmentExpression	* return_addr = NULL		1075394	2		=			
ANR	1077533	Identifier	NULL		1075394	0					
ANR	1077534	Identifier	NULL		1075394	1					
ANR	1077535	IfStatement	if ( session -> policy ( ) )		1075394	1					
ANR	1077536	Condition	session -> policy ( )	4762:9:143260:143276	1075394	0	True				
ANR	1077537	CallExpression	session -> policy ( )		1075394	0					
ANR	1077538	Callee	session -> policy		1075394	0					
ANR	1077539	PtrMemberAccess	session -> policy		1075394	0					
ANR	1077540	Identifier	session		1075394	0					
ANR	1077541	Identifier	policy		1075394	1					
ANR	1077542	ArgumentList			1075394	1					
ANR	1077543	CompoundStatement		523:28:16252:16252	1075394	1					
ANR	1077544	ExpressionStatement	"session -> policy ( ) -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	4763:7:143288:143362	1075394	0	True				
ANR	1077545	CallExpression	"session -> policy ( ) -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		1075394	0					
ANR	1077546	Callee	session -> policy ( ) -> LookupString		1075394	0					
ANR	1077547	PtrMemberAccess	session -> policy ( ) -> LookupString		1075394	0					
ANR	1077548	CallExpression	session -> policy ( )		1075394	0					
ANR	1077549	Callee	session -> policy		1075394	0					
ANR	1077550	PtrMemberAccess	session -> policy		1075394	0					
ANR	1077551	Identifier	session		1075394	0					
ANR	1077552	Identifier	policy		1075394	1					
ANR	1077553	ArgumentList			1075394	1					
ANR	1077554	Identifier	LookupString		1075394	1					
ANR	1077555	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	1					
ANR	1077556	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1077557	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1077558	Argument	& return_addr		1075394	1					
ANR	1077559	UnaryOperationExpression	& return_addr		1075394	0					
ANR	1077560	UnaryOperator	&		1075394	0					
ANR	1077561	Identifier	return_addr		1075394	1					
ANR	1077562	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"" , session -> id ( ) , return_addr ? "" with return address "" : """" , return_addr ? return_addr : """" )"	4765:6:143378:143584	1075394	2	True				
ANR	1077563	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"" , session -> id ( ) , return_addr ? "" with return address "" : """" , return_addr ? return_addr : """" )"		1075394	0					
ANR	1077564	Callee	dprintf		1075394	0					
ANR	1077565	Identifier	dprintf		1075394	0					
ANR	1077566	ArgumentList	D_SECURITY		1075394	1					
ANR	1077567	Argument	D_SECURITY		1075394	0					
ANR	1077568	Identifier	D_SECURITY		1075394	0					
ANR	1077569	Argument	"""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"""		1075394	1					
ANR	1077570	PrimaryExpression	"""DC_AUTHENTICATE: resuming session id %s%s%s:\\n"""		1075394	0					
ANR	1077571	Argument	session -> id ( )		1075394	2					
ANR	1077572	CallExpression	session -> id ( )		1075394	0					
ANR	1077573	Callee	session -> id		1075394	0					
ANR	1077574	PtrMemberAccess	session -> id		1075394	0					
ANR	1077575	Identifier	session		1075394	0					
ANR	1077576	Identifier	id		1075394	1					
ANR	1077577	ArgumentList			1075394	1					
ANR	1077578	Argument	"return_addr ? "" with return address "" : """""		1075394	3					
ANR	1077579	ConditionalExpression	"return_addr ? "" with return address "" : """""		1075394	0					
ANR	1077580	Condition	return_addr		1075394	0					
ANR	1077581	Identifier	return_addr		1075394	0					
ANR	1077582	PrimaryExpression	""" with return address """		1075394	1					
ANR	1077583	PrimaryExpression	""""""		1075394	2					
ANR	1077584	Argument	"return_addr ? return_addr : """""		1075394	4					
ANR	1077585	ConditionalExpression	"return_addr ? return_addr : """""		1075394	0					
ANR	1077586	Condition	return_addr		1075394	0					
ANR	1077587	Identifier	return_addr		1075394	0					
ANR	1077588	Identifier	return_addr		1075394	1					
ANR	1077589	PrimaryExpression	""""""		1075394	2					
ANR	1077590	ExpressionStatement	free ( return_addr )	4769:6:143592:143609	1075394	3	True				
ANR	1077591	CallExpression	free ( return_addr )		1075394	0					
ANR	1077592	Callee	free		1075394	0					
ANR	1077593	Identifier	free		1075394	0					
ANR	1077594	ArgumentList	return_addr		1075394	1					
ANR	1077595	Argument	return_addr		1075394	0					
ANR	1077596	Identifier	return_addr		1075394	0					
ANR	1077597	ExpressionStatement	session -> renewLease ( )	4773:4:143629:143650	1075394	3	True				
ANR	1077598	CallExpression	session -> renewLease ( )		1075394	0					
ANR	1077599	Callee	session -> renewLease		1075394	0					
ANR	1077600	PtrMemberAccess	session -> renewLease		1075394	0					
ANR	1077601	Identifier	session		1075394	0					
ANR	1077602	Identifier	renewLease		1075394	1					
ANR	1077603	ArgumentList			1075394	1					
ANR	1077604	IfStatement	if ( session -> key ( ) )		1075394	4					
ANR	1077605	Condition	session -> key ( )	4775:8:143661:143674	1075394	0	True				
ANR	1077606	CallExpression	session -> key ( )		1075394	0					
ANR	1077607	Callee	session -> key		1075394	0					
ANR	1077608	PtrMemberAccess	session -> key		1075394	0					
ANR	1077609	Identifier	session		1075394	0					
ANR	1077610	Identifier	key		1075394	1					
ANR	1077611	ArgumentList			1075394	1					
ANR	1077612	CompoundStatement		536:24:16650:16650	1075394	1					
ANR	1077613	ExpressionStatement	the_key = new KeyInfo ( * session -> key ( ) )	4777:5:143727:143765	1075394	0	True				
ANR	1077614	AssignmentExpression	the_key = new KeyInfo ( * session -> key ( ) )		1075394	0		=			
ANR	1077615	Identifier	the_key		1075394	0					
ANR	1077616	UnaryOperationExpression	* session -> key ( )		1075394	1					
ANR	1077617	UnaryOperator	*		1075394	0					
ANR	1077618	CallExpression	session -> key ( )		1075394	1					
ANR	1077619	Callee	session -> key		1075394	0					
ANR	1077620	PtrMemberAccess	session -> key		1075394	0					
ANR	1077621	Identifier	session		1075394	0					
ANR	1077622	Identifier	key		1075394	1					
ANR	1077623	ArgumentList			1075394	1					
ANR	1077624	IfStatement	if ( session -> policy ( ) )		1075394	5					
ANR	1077625	Condition	session -> policy ( )	4780:8:143782:143798	1075394	0	True				
ANR	1077626	CallExpression	session -> policy ( )		1075394	0					
ANR	1077627	Callee	session -> policy		1075394	0					
ANR	1077628	PtrMemberAccess	session -> policy		1075394	0					
ANR	1077629	Identifier	session		1075394	0					
ANR	1077630	Identifier	policy		1075394	1					
ANR	1077631	ArgumentList			1075394	1					
ANR	1077632	CompoundStatement		541:27:16774:16774	1075394	1					
ANR	1077633	ExpressionStatement	the_policy = new ClassAd ( * session -> policy ( ) )	4782:5:143851:143895	1075394	0	True				
ANR	1077634	AssignmentExpression	the_policy = new ClassAd ( * session -> policy ( ) )		1075394	0		=			
ANR	1077635	Identifier	the_policy		1075394	0					
ANR	1077636	UnaryOperationExpression	* session -> policy ( )		1075394	1					
ANR	1077637	UnaryOperator	*		1075394	0					
ANR	1077638	CallExpression	session -> policy ( )		1075394	1					
ANR	1077639	Callee	session -> policy		1075394	0					
ANR	1077640	PtrMemberAccess	session -> policy		1075394	0					
ANR	1077641	Identifier	session		1075394	0					
ANR	1077642	Identifier	policy		1075394	1					
ANR	1077643	ArgumentList			1075394	1					
ANR	1077644	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	1					
ANR	1077645	Condition	DebugFlags & D_FULLDEBUG	4783:9:143906:143929	1075394	0	True				
ANR	1077646	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1077647	Identifier	DebugFlags		1075394	0					
ANR	1077648	Identifier	D_FULLDEBUG		1075394	1					
ANR	1077649	CompoundStatement		544:35:16905:16905	1075394	1					
ANR	1077650	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Cached Session:\\n"" )"	4784:6:143940:143998	1075394	0	True				
ANR	1077651	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Cached Session:\\n"" )"		1075394	0					
ANR	1077652	Callee	dprintf		1075394	0					
ANR	1077653	Identifier	dprintf		1075394	0					
ANR	1077654	ArgumentList	D_SECURITY		1075394	1					
ANR	1077655	Argument	D_SECURITY		1075394	0					
ANR	1077656	Identifier	D_SECURITY		1075394	0					
ANR	1077657	Argument	"""DC_AUTHENTICATE: Cached Session:\\n"""		1075394	1					
ANR	1077658	PrimaryExpression	"""DC_AUTHENTICATE: Cached Session:\\n"""		1075394	0					
ANR	1077659	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4785:6:144006:144037	1075394	1	True				
ANR	1077660	CallExpression	the_policy -> dPrint ( D_SECURITY )		1075394	0					
ANR	1077661	Callee	the_policy -> dPrint		1075394	0					
ANR	1077662	PtrMemberAccess	the_policy -> dPrint		1075394	0					
ANR	1077663	Identifier	the_policy		1075394	0					
ANR	1077664	Identifier	dPrint		1075394	1					
ANR	1077665	ArgumentList	D_SECURITY		1075394	1					
ANR	1077666	Argument	D_SECURITY		1075394	0					
ANR	1077667	Identifier	D_SECURITY		1075394	0					
ANR	1077668	IfStatement	if ( the_policy )		1075394	6					
ANR	1077669	Condition	the_policy	4790:8:144101:144110	1075394	0	True				
ANR	1077670	Identifier	the_policy		1075394	0					
ANR	1077671	CompoundStatement		561:5:17323:17354	1075394	1					
ANR	1077672	IdentifierDeclStatement	char * the_user = NULL ;	4791:5:144120:144142	1075394	0	True				
ANR	1077673	IdentifierDecl	* the_user = NULL		1075394	0					
ANR	1077674	IdentifierDeclType	char *		1075394	0					
ANR	1077675	Identifier	the_user		1075394	1					
ANR	1077676	AssignmentExpression	* the_user = NULL		1075394	2		=			
ANR	1077677	Identifier	NULL		1075394	0					
ANR	1077678	Identifier	NULL		1075394	1					
ANR	1077679	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_USER , & the_user )"	4792:5:144149:144200	1075394	1	True				
ANR	1077680	CallExpression	"the_policy -> LookupString ( ATTR_SEC_USER , & the_user )"		1075394	0					
ANR	1077681	Callee	the_policy -> LookupString		1075394	0					
ANR	1077682	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1077683	Identifier	the_policy		1075394	0					
ANR	1077684	Identifier	LookupString		1075394	1					
ANR	1077685	ArgumentList	ATTR_SEC_USER		1075394	1					
ANR	1077686	Argument	ATTR_SEC_USER		1075394	0					
ANR	1077687	Identifier	ATTR_SEC_USER		1075394	0					
ANR	1077688	Argument	& the_user		1075394	1					
ANR	1077689	UnaryOperationExpression	& the_user		1075394	0					
ANR	1077690	UnaryOperator	&		1075394	0					
ANR	1077691	Identifier	the_user		1075394	1					
ANR	1077692	IfStatement	if ( the_user )		1075394	2					
ANR	1077693	Condition	the_user	4793:9:144211:144218	1075394	0	True				
ANR	1077694	Identifier	the_user		1075394	0					
ANR	1077695	CompoundStatement		554:19:17194:17194	1075394	1					
ANR	1077696	ExpressionStatement	user = the_user	4795:6:144273:144288	1075394	0	True				
ANR	1077697	AssignmentExpression	user = the_user		1075394	0		=			
ANR	1077698	Identifier	user		1075394	0					
ANR	1077699	Identifier	the_user		1075394	1					
ANR	1077700	ExpressionStatement	free ( the_user )	4796:6:144296:144312	1075394	1	True				
ANR	1077701	CallExpression	free ( the_user )		1075394	0					
ANR	1077702	Callee	free		1075394	0					
ANR	1077703	Identifier	free		1075394	0					
ANR	1077704	ArgumentList	the_user		1075394	1					
ANR	1077705	Argument	the_user		1075394	0					
ANR	1077706	Identifier	the_user		1075394	0					
ANR	1077707	ExpressionStatement	the_user = NULL	4797:6:144320:144335	1075394	2	True				
ANR	1077708	AssignmentExpression	the_user = NULL		1075394	0		=			
ANR	1077709	Identifier	the_user		1075394	0					
ANR	1077710	Identifier	NULL		1075394	1					
ANR	1077711	IdentifierDeclStatement	bool tried_authentication = false ;	4800:5:144350:144381	1075394	3	True				
ANR	1077712	IdentifierDecl	tried_authentication = false		1075394	0					
ANR	1077713	IdentifierDeclType	bool		1075394	0					
ANR	1077714	Identifier	tried_authentication		1075394	1					
ANR	1077715	AssignmentExpression	tried_authentication = false		1075394	2		=			
ANR	1077716	Identifier	false		1075394	0					
ANR	1077717	Identifier	false		1075394	1					
ANR	1077718	ExpressionStatement	"the_policy -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"	4801:5:144388:144462	1075394	4	True				
ANR	1077719	CallExpression	"the_policy -> LookupBool ( ATTR_SEC_TRIED_AUTHENTICATION , tried_authentication )"		1075394	0					
ANR	1077720	Callee	the_policy -> LookupBool		1075394	0					
ANR	1077721	PtrMemberAccess	the_policy -> LookupBool		1075394	0					
ANR	1077722	Identifier	the_policy		1075394	0					
ANR	1077723	Identifier	LookupBool		1075394	1					
ANR	1077724	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		1075394	1					
ANR	1077725	Argument	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1077726	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1077727	Argument	tried_authentication		1075394	1					
ANR	1077728	Identifier	tried_authentication		1075394	0					
ANR	1077729	ExpressionStatement	sock -> setTriedAuthentication ( tried_authentication )	4802:5:144469:144519	1075394	5	True				
ANR	1077730	CallExpression	sock -> setTriedAuthentication ( tried_authentication )		1075394	0					
ANR	1077731	Callee	sock -> setTriedAuthentication		1075394	0					
ANR	1077732	PtrMemberAccess	sock -> setTriedAuthentication		1075394	0					
ANR	1077733	Identifier	sock		1075394	0					
ANR	1077734	Identifier	setTriedAuthentication		1075394	1					
ANR	1077735	ArgumentList	tried_authentication		1075394	1					
ANR	1077736	Argument	tried_authentication		1075394	0					
ANR	1077737	Identifier	tried_authentication		1075394	0					
ANR	1077738	ExpressionStatement	new_session = false	4804:4:144531:144550	1075394	7	True				
ANR	1077739	AssignmentExpression	new_session = false		1075394	0		=			
ANR	1077740	Identifier	new_session		1075394	0					
ANR	1077741	Identifier	false		1075394	1					
ANR	1077742	ElseStatement	else		1075394	0					
ANR	1077743	CompoundStatement		610:4:18806:18918	1075394	0					
ANR	1077744	IdentifierDeclStatement	ClassAd our_policy ;	4809:4:144686:144704	1075394	0	True				
ANR	1077745	IdentifierDecl	our_policy		1075394	0					
ANR	1077746	IdentifierDeclType	ClassAd		1075394	0					
ANR	1077747	Identifier	our_policy		1075394	1					
ANR	1077748	IfStatement	"if ( ! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication ) )"		1075394	1					
ANR	1077749	Condition	"! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"	4810:8:144714:144868	1075394	0	True				
ANR	1077750	UnaryOperationExpression	"! sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"		1075394	0					
ANR	1077751	UnaryOperator	!		1075394	0					
ANR	1077752	CallExpression	"sec_man -> FillInSecurityPolicyAd ( comTable [ cmd_index ] . perm , & our_policy , false , false , comTable [ cmd_index ] . force_authentication )"		1075394	1					
ANR	1077753	Callee	sec_man -> FillInSecurityPolicyAd		1075394	0					
ANR	1077754	PtrMemberAccess	sec_man -> FillInSecurityPolicyAd		1075394	0					
ANR	1077755	Identifier	sec_man		1075394	0					
ANR	1077756	Identifier	FillInSecurityPolicyAd		1075394	1					
ANR	1077757	ArgumentList	comTable [ cmd_index ] . perm		1075394	1					
ANR	1077758	Argument	comTable [ cmd_index ] . perm		1075394	0					
ANR	1077759	MemberAccess	comTable [ cmd_index ] . perm		1075394	0					
ANR	1077760	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1077761	Identifier	comTable		1075394	0					
ANR	1077762	Identifier	cmd_index		1075394	1					
ANR	1077763	Identifier	perm		1075394	1					
ANR	1077764	Argument	& our_policy		1075394	1					
ANR	1077765	UnaryOperationExpression	& our_policy		1075394	0					
ANR	1077766	UnaryOperator	&		1075394	0					
ANR	1077767	Identifier	our_policy		1075394	1					
ANR	1077768	Argument	false		1075394	2					
ANR	1077769	Identifier	false		1075394	0					
ANR	1077770	Argument	false		1075394	3					
ANR	1077771	Identifier	false		1075394	0					
ANR	1077772	Argument	comTable [ cmd_index ] . force_authentication		1075394	4					
ANR	1077773	MemberAccess	comTable [ cmd_index ] . force_authentication		1075394	0					
ANR	1077774	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1077775	Identifier	comTable		1075394	0					
ANR	1077776	Identifier	cmd_index		1075394	1					
ANR	1077777	Identifier	force_authentication		1075394	1					
ANR	1077778	CompoundStatement		577:4:17849:17849	1075394	1					
ANR	1077779	Statement	dprintf	4819:5:144969:144975	1075394	0	True				
ANR	1077780	Statement	(	4819:12:144976:144976	1075394	1	True				
ANR	1077781	Statement	D_ALWAYS	4819:14:144978:144985	1075394	2	True				
ANR	1077782	Statement	","	4819:22:144986:144986	1075394	3	True				
ANR	1077783	Statement	"""DC_AUTHENTICATE: """	4819:24:144988:145006	1075394	4	True				
ANR	1077784	Statement	"""Our security policy is invalid!\\n"""	4820:8:145016:145050	1075394	5	True				
ANR	1077785	Statement	)	4820:44:145052:145052	1075394	6	True				
ANR	1077786	ExpressionStatement		4820:45:145053:145053	1075394	7	True				
ANR	1077787	ExpressionStatement	result = FALSE	4821:5:145060:145074	1075394	8	True				
ANR	1077788	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077789	Identifier	result		1075394	0					
ANR	1077790	Identifier	FALSE		1075394	1					
ANR	1077791	GotoStatement	goto finalize ;	4822:5:145081:145094	1075394	9	True				
ANR	1077792	Identifier	finalize		1075394	0					
ANR	1077793	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	2					
ANR	1077794	Condition	DebugFlags & D_FULLDEBUG	4825:8:145111:145134	1075394	0	True				
ANR	1077795	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1077796	Identifier	DebugFlags		1075394	0					
ANR	1077797	Identifier	D_FULLDEBUG		1075394	1					
ANR	1077798	CompoundStatement		586:34:18110:18110	1075394	1					
ANR	1077799	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: our_policy:\\n"" )"	4826:5:145144:145200	1075394	0	True				
ANR	1077800	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: our_policy:\\n"" )"		1075394	0					
ANR	1077801	Callee	dprintf		1075394	0					
ANR	1077802	Identifier	dprintf		1075394	0					
ANR	1077803	ArgumentList	D_SECURITY		1075394	1					
ANR	1077804	Argument	D_SECURITY		1075394	0					
ANR	1077805	Identifier	D_SECURITY		1075394	0					
ANR	1077806	Argument	"""DC_AUTHENTICATE: our_policy:\\n"""		1075394	1					
ANR	1077807	PrimaryExpression	"""DC_AUTHENTICATE: our_policy:\\n"""		1075394	0					
ANR	1077808	ExpressionStatement	our_policy . dPrint ( D_SECURITY )	4827:5:145207:145236	1075394	1	True				
ANR	1077809	CallExpression	our_policy . dPrint ( D_SECURITY )		1075394	0					
ANR	1077810	Callee	our_policy . dPrint		1075394	0					
ANR	1077811	MemberAccess	our_policy . dPrint		1075394	0					
ANR	1077812	Identifier	our_policy		1075394	0					
ANR	1077813	Identifier	dPrint		1075394	1					
ANR	1077814	ArgumentList	D_SECURITY		1075394	1					
ANR	1077815	Argument	D_SECURITY		1075394	0					
ANR	1077816	Identifier	D_SECURITY		1075394	0					
ANR	1077817	ExpressionStatement	"the_policy = sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"	4831:4:145293:145384	1075394	3	True				
ANR	1077818	AssignmentExpression	"the_policy = sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"		1075394	0		=			
ANR	1077819	Identifier	the_policy		1075394	0					
ANR	1077820	CallExpression	"sec_man -> ReconcileSecurityPolicyAds ( auth_info , our_policy )"		1075394	1					
ANR	1077821	Callee	sec_man -> ReconcileSecurityPolicyAds		1075394	0					
ANR	1077822	PtrMemberAccess	sec_man -> ReconcileSecurityPolicyAds		1075394	0					
ANR	1077823	Identifier	sec_man		1075394	0					
ANR	1077824	Identifier	ReconcileSecurityPolicyAds		1075394	1					
ANR	1077825	ArgumentList	auth_info		1075394	1					
ANR	1077826	Argument	auth_info		1075394	0					
ANR	1077827	Identifier	auth_info		1075394	0					
ANR	1077828	Argument	our_policy		1075394	1					
ANR	1077829	Identifier	our_policy		1075394	0					
ANR	1077830	IfStatement	if ( ! the_policy )		1075394	4					
ANR	1077831	Condition	! the_policy	4834:8:145395:145405	1075394	0	True				
ANR	1077832	UnaryOperationExpression	! the_policy		1075394	0					
ANR	1077833	UnaryOperator	!		1075394	0					
ANR	1077834	Identifier	the_policy		1075394	1					
ANR	1077835	CompoundStatement		595:21:18381:18381	1075394	1					
ANR	1077836	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: Unable to reconcile!\\n"" )"	4835:5:145415:145475	1075394	0	True				
ANR	1077837	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: Unable to reconcile!\\n"" )"		1075394	0					
ANR	1077838	Callee	dprintf		1075394	0					
ANR	1077839	Identifier	dprintf		1075394	0					
ANR	1077840	ArgumentList	D_ALWAYS		1075394	1					
ANR	1077841	Argument	D_ALWAYS		1075394	0					
ANR	1077842	Identifier	D_ALWAYS		1075394	0					
ANR	1077843	Argument	"""DC_AUTHENTICATE: Unable to reconcile!\\n"""		1075394	1					
ANR	1077844	PrimaryExpression	"""DC_AUTHENTICATE: Unable to reconcile!\\n"""		1075394	0					
ANR	1077845	ExpressionStatement	result = FALSE	4836:5:145482:145496	1075394	1	True				
ANR	1077846	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1077847	Identifier	result		1075394	0					
ANR	1077848	Identifier	FALSE		1075394	1					
ANR	1077849	GotoStatement	goto finalize ;	4837:5:145503:145516	1075394	2	True				
ANR	1077850	Identifier	finalize		1075394	0					
ANR	1077851	ElseStatement	else		1075394	0					
ANR	1077852	CompoundStatement		599:11:18502:18502	1075394	0					
ANR	1077853	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	0					
ANR	1077854	Condition	DebugFlags & D_FULLDEBUG	4839:9:145540:145563	1075394	0	True				
ANR	1077855	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1077856	Identifier	DebugFlags		1075394	0					
ANR	1077857	Identifier	D_FULLDEBUG		1075394	1					
ANR	1077858	CompoundStatement		600:35:18539:18539	1075394	1					
ANR	1077859	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: the_policy:\\n"" )"	4840:6:145574:145630	1075394	0	True				
ANR	1077860	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: the_policy:\\n"" )"		1075394	0					
ANR	1077861	Callee	dprintf		1075394	0					
ANR	1077862	Identifier	dprintf		1075394	0					
ANR	1077863	ArgumentList	D_SECURITY		1075394	1					
ANR	1077864	Argument	D_SECURITY		1075394	0					
ANR	1077865	Identifier	D_SECURITY		1075394	0					
ANR	1077866	Argument	"""DC_AUTHENTICATE: the_policy:\\n"""		1075394	1					
ANR	1077867	PrimaryExpression	"""DC_AUTHENTICATE: the_policy:\\n"""		1075394	0					
ANR	1077868	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4841:6:145638:145668	1075394	1	True				
ANR	1077869	CallExpression	the_policy -> dPrint ( D_SECURITY )		1075394	0					
ANR	1077870	Callee	the_policy -> dPrint		1075394	0					
ANR	1077871	PtrMemberAccess	the_policy -> dPrint		1075394	0					
ANR	1077872	Identifier	the_policy		1075394	0					
ANR	1077873	Identifier	dPrint		1075394	1					
ANR	1077874	ArgumentList	D_SECURITY		1075394	1					
ANR	1077875	Argument	D_SECURITY		1075394	0					
ANR	1077876	Identifier	D_SECURITY		1075394	0					
ANR	1077877	ExpressionStatement	"the_policy -> Assign ( ATTR_SEC_REMOTE_VERSION , CondorVersion ( ) )"	4846:4:145741:145801	1075394	5	True				
ANR	1077878	CallExpression	"the_policy -> Assign ( ATTR_SEC_REMOTE_VERSION , CondorVersion ( ) )"		1075394	0					
ANR	1077879	Callee	the_policy -> Assign		1075394	0					
ANR	1077880	PtrMemberAccess	the_policy -> Assign		1075394	0					
ANR	1077881	Identifier	the_policy		1075394	0					
ANR	1077882	Identifier	Assign		1075394	1					
ANR	1077883	ArgumentList	ATTR_SEC_REMOTE_VERSION		1075394	1					
ANR	1077884	Argument	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1077885	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1077886	Argument	CondorVersion ( )		1075394	1					
ANR	1077887	CallExpression	CondorVersion ( )		1075394	0					
ANR	1077888	Callee	CondorVersion		1075394	0					
ANR	1077889	Identifier	CondorVersion		1075394	0					
ANR	1077890	ArgumentList			1075394	1					
ANR	1077891	IdentifierDeclStatement	"SecMan :: sec_feat_act will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION ) ;"	4849:4:145833:145945	1075394	6	True				
ANR	1077892	IdentifierDecl	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	0					
ANR	1077893	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1077894	Identifier	will_authenticate		1075394	1					
ANR	1077895	AssignmentExpression	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	2		=			
ANR	1077896	Identifier	will_authenticate		1075394	0					
ANR	1077897	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	1					
ANR	1077898	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077899	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077900	Identifier	sec_man		1075394	0					
ANR	1077901	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1077902	ArgumentList	* the_policy		1075394	1					
ANR	1077903	Argument	* the_policy		1075394	0					
ANR	1077904	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1077905	UnaryOperator	*		1075394	0					
ANR	1077906	Identifier	the_policy		1075394	1					
ANR	1077907	Argument	ATTR_SEC_AUTHENTICATION		1075394	1					
ANR	1077908	Identifier	ATTR_SEC_AUTHENTICATION		1075394	0					
ANR	1077909	IfStatement	"if ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES )"		1075394	7					
ANR	1077910	Condition	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"	4851:8:145956:146044	1075394	0	True				
ANR	1077911	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION ) == SecMan :: SEC_FEAT_ACT_YES"		1075394	0		==			
ANR	1077912	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_NEW_SESSION )"		1075394	0					
ANR	1077913	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077914	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1077915	Identifier	sec_man		1075394	0					
ANR	1077916	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1077917	ArgumentList	auth_info		1075394	1					
ANR	1077918	Argument	auth_info		1075394	0					
ANR	1077919	Identifier	auth_info		1075394	0					
ANR	1077920	Argument	ATTR_SEC_NEW_SESSION		1075394	1					
ANR	1077921	Identifier	ATTR_SEC_NEW_SESSION		1075394	0					
ANR	1077922	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1077923	CompoundStatement		617:5:19090:19105	1075394	1					
ANR	1077924	IdentifierDeclStatement	MyString tmpStr ;	4856:5:146117:146132	1075394	0	True				
ANR	1077925	IdentifierDecl	tmpStr		1075394	0					
ANR	1077926	IdentifierDeclType	MyString		1075394	0					
ANR	1077927	Identifier	tmpStr		1075394	1					
ANR	1077928	ExpressionStatement	"tmpStr . sprintf ( ""%s:%i:%i:%i"" , get_local_hostname ( ) . Value ( ) , mypid , ( int ) time ( 0 ) , ZZZ_always_increase ( ) )"	4857:5:146139:146262	1075394	1	True				
ANR	1077929	CallExpression	"tmpStr . sprintf ( ""%s:%i:%i:%i"" , get_local_hostname ( ) . Value ( ) , mypid , ( int ) time ( 0 ) , ZZZ_always_increase ( ) )"		1075394	0					
ANR	1077930	Callee	tmpStr . sprintf		1075394	0					
ANR	1077931	MemberAccess	tmpStr . sprintf		1075394	0					
ANR	1077932	Identifier	tmpStr		1075394	0					
ANR	1077933	Identifier	sprintf		1075394	1					
ANR	1077934	ArgumentList	"""%s:%i:%i:%i"""		1075394	1					
ANR	1077935	Argument	"""%s:%i:%i:%i"""		1075394	0					
ANR	1077936	PrimaryExpression	"""%s:%i:%i:%i"""		1075394	0					
ANR	1077937	Argument	get_local_hostname ( ) . Value ( )		1075394	1					
ANR	1077938	CallExpression	get_local_hostname ( ) . Value ( )		1075394	0					
ANR	1077939	Callee	get_local_hostname ( ) . Value		1075394	0					
ANR	1077940	MemberAccess	get_local_hostname ( ) . Value		1075394	0					
ANR	1077941	CallExpression	get_local_hostname ( )		1075394	0					
ANR	1077942	Callee	get_local_hostname		1075394	0					
ANR	1077943	Identifier	get_local_hostname		1075394	0					
ANR	1077944	ArgumentList			1075394	1					
ANR	1077945	Identifier	Value		1075394	1					
ANR	1077946	ArgumentList			1075394	1					
ANR	1077947	Argument	mypid		1075394	2					
ANR	1077948	Identifier	mypid		1075394	0					
ANR	1077949	Argument	( int ) time ( 0 )		1075394	3					
ANR	1077950	CastExpression	( int ) time ( 0 )		1075394	0					
ANR	1077951	CastTarget	int		1075394	0					
ANR	1077952	CallExpression	time ( 0 )		1075394	1					
ANR	1077953	Callee	time		1075394	0					
ANR	1077954	Identifier	time		1075394	0					
ANR	1077955	ArgumentList	0		1075394	1					
ANR	1077956	Argument	0		1075394	0					
ANR	1077957	PrimaryExpression	0		1075394	0					
ANR	1077958	Argument	ZZZ_always_increase ( )		1075394	4					
ANR	1077959	CallExpression	ZZZ_always_increase ( )		1075394	0					
ANR	1077960	Callee	ZZZ_always_increase		1075394	0					
ANR	1077961	Identifier	ZZZ_always_increase		1075394	0					
ANR	1077962	ArgumentList			1075394	1					
ANR	1077963	ExpressionStatement	assert ( the_sid == NULL )	4860:5:146269:146293	1075394	2	True				
ANR	1077964	CallExpression	assert ( the_sid == NULL )		1075394	0					
ANR	1077965	Callee	assert		1075394	0					
ANR	1077966	Identifier	assert		1075394	0					
ANR	1077967	ArgumentList	the_sid == NULL		1075394	1					
ANR	1077968	Argument	the_sid == NULL		1075394	0					
ANR	1077969	EqualityExpression	the_sid == NULL		1075394	0		==			
ANR	1077970	Identifier	the_sid		1075394	0					
ANR	1077971	Identifier	NULL		1075394	1					
ANR	1077972	ExpressionStatement	the_sid = strdup ( tmpStr . Value ( ) )	4861:5:146300:146332	1075394	3	True				
ANR	1077973	AssignmentExpression	the_sid = strdup ( tmpStr . Value ( ) )		1075394	0		=			
ANR	1077974	Identifier	the_sid		1075394	0					
ANR	1077975	CallExpression	strdup ( tmpStr . Value ( ) )		1075394	1					
ANR	1077976	Callee	strdup		1075394	0					
ANR	1077977	Identifier	strdup		1075394	0					
ANR	1077978	ArgumentList	tmpStr . Value ( )		1075394	1					
ANR	1077979	Argument	tmpStr . Value ( )		1075394	0					
ANR	1077980	CallExpression	tmpStr . Value ( )		1075394	0					
ANR	1077981	Callee	tmpStr . Value		1075394	0					
ANR	1077982	MemberAccess	tmpStr . Value		1075394	0					
ANR	1077983	Identifier	tmpStr		1075394	0					
ANR	1077984	Identifier	Value		1075394	1					
ANR	1077985	ArgumentList			1075394	1					
ANR	1077986	IfStatement	if ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )		1075394	4					
ANR	1077987	Condition	will_authenticate == SecMan :: SEC_FEAT_ACT_YES	4863:9:146344:146388	1075394	0	True				
ANR	1077988	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		1075394	0		==			
ANR	1077989	Identifier	will_authenticate		1075394	0					
ANR	1077990	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1077991	CompoundStatement		634:6:19746:19769	1075394	1					
ANR	1077992	IdentifierDeclStatement	char * crypto_method = NULL ;	4865:6:146400:146426	1075394	0	True				
ANR	1077993	IdentifierDecl	* crypto_method = NULL		1075394	0					
ANR	1077994	IdentifierDeclType	char *		1075394	0					
ANR	1077995	Identifier	crypto_method		1075394	1					
ANR	1077996	AssignmentExpression	* crypto_method = NULL		1075394	2		=			
ANR	1077997	Identifier	NULL		1075394	0					
ANR	1077998	Identifier	NULL		1075394	1					
ANR	1077999	IfStatement	"if ( ! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method ) )"		1075394	1					
ANR	1078000	Condition	"! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"	4866:10:146438:146503	1075394	0	True				
ANR	1078001	UnaryOperationExpression	"! the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"		1075394	0					
ANR	1078002	UnaryOperator	!		1075394	0					
ANR	1078003	CallExpression	"the_policy -> LookupString ( ATTR_SEC_CRYPTO_METHODS , & crypto_method )"		1075394	1					
ANR	1078004	Callee	the_policy -> LookupString		1075394	0					
ANR	1078005	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1078006	Identifier	the_policy		1075394	0					
ANR	1078007	Identifier	LookupString		1075394	1					
ANR	1078008	ArgumentList	ATTR_SEC_CRYPTO_METHODS		1075394	1					
ANR	1078009	Argument	ATTR_SEC_CRYPTO_METHODS		1075394	0					
ANR	1078010	Identifier	ATTR_SEC_CRYPTO_METHODS		1075394	0					
ANR	1078011	Argument	& crypto_method		1075394	1					
ANR	1078012	UnaryOperationExpression	& crypto_method		1075394	0					
ANR	1078013	UnaryOperator	&		1075394	0					
ANR	1078014	Identifier	crypto_method		1075394	1					
ANR	1078015	CompoundStatement		627:78:19479:19479	1075394	1					
ANR	1078016	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"" , sock -> peer_description ( ) )"	4867:7:146515:146649	1075394	0	True				
ANR	1078017	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1078018	Callee	dprintf		1075394	0					
ANR	1078019	Identifier	dprintf		1075394	0					
ANR	1078020	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078021	Argument	D_ALWAYS		1075394	0					
ANR	1078022	Identifier	D_ALWAYS		1075394	0					
ANR	1078023	Argument	"""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"""		1075394	1					
ANR	1078024	PrimaryExpression	"""DC_AUTHENTICATE: tried to enable encryption for request from %s, but we have none!\\n"""		1075394	0					
ANR	1078025	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078026	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078027	Callee	sock -> peer_description		1075394	0					
ANR	1078028	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078029	Identifier	sock		1075394	0					
ANR	1078030	Identifier	peer_description		1075394	1					
ANR	1078031	ArgumentList			1075394	1					
ANR	1078032	ExpressionStatement	result = FALSE	4868:7:146658:146672	1075394	1	True				
ANR	1078033	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078034	Identifier	result		1075394	0					
ANR	1078035	Identifier	FALSE		1075394	1					
ANR	1078036	GotoStatement	goto finalize ;	4869:7:146681:146694	1075394	2	True				
ANR	1078037	Identifier	finalize		1075394	0					
ANR	1078038	IdentifierDeclStatement	unsigned char * rkey = Condor_Crypt_Base :: randomKey ( 24 ) ;	4872:6:146711:146765	1075394	2	True				
ANR	1078039	IdentifierDecl	* rkey = Condor_Crypt_Base :: randomKey ( 24 )		1075394	0					
ANR	1078040	IdentifierDeclType	unsigned char *		1075394	0					
ANR	1078041	Identifier	rkey		1075394	1					
ANR	1078042	AssignmentExpression	* rkey = Condor_Crypt_Base :: randomKey ( 24 )		1075394	2		=			
ANR	1078043	Identifier	rkey		1075394	0					
ANR	1078044	CallExpression	Condor_Crypt_Base :: randomKey ( 24 )		1075394	1					
ANR	1078045	Callee	Condor_Crypt_Base :: randomKey		1075394	0					
ANR	1078046	Identifier	Condor_Crypt_Base :: randomKey		1075394	0					
ANR	1078047	ArgumentList	24		1075394	1					
ANR	1078048	Argument	24		1075394	0					
ANR	1078049	PrimaryExpression	24		1075394	0					
ANR	1078050	IdentifierDeclStatement	unsigned char rbuf [ 24 ] ;	4873:6:146773:146796	1075394	3	True				
ANR	1078051	IdentifierDecl	rbuf [ 24 ]		1075394	0					
ANR	1078052	IdentifierDeclType	unsigned char [ 24 ]		1075394	0					
ANR	1078053	Identifier	rbuf		1075394	1					
ANR	1078054	PrimaryExpression	24		1075394	2					
ANR	1078055	IfStatement	if ( rkey )		1075394	4					
ANR	1078056	Condition	rkey	4874:10:146808:146811	1075394	0	True				
ANR	1078057	Identifier	rkey		1075394	0					
ANR	1078058	CompoundStatement		635:16:19787:19787	1075394	1					
ANR	1078059	ExpressionStatement	"memcpy ( rbuf , rkey , 24 )"	4875:7:146823:146846	1075394	0	True				
ANR	1078060	CallExpression	"memcpy ( rbuf , rkey , 24 )"		1075394	0					
ANR	1078061	Callee	memcpy		1075394	0					
ANR	1078062	Identifier	memcpy		1075394	0					
ANR	1078063	ArgumentList	rbuf		1075394	1					
ANR	1078064	Argument	rbuf		1075394	0					
ANR	1078065	Identifier	rbuf		1075394	0					
ANR	1078066	Argument	rkey		1075394	1					
ANR	1078067	Identifier	rkey		1075394	0					
ANR	1078068	Argument	24		1075394	2					
ANR	1078069	PrimaryExpression	24		1075394	0					
ANR	1078070	ExpressionStatement	free ( rkey )	4877:7:146896:146907	1075394	1	True				
ANR	1078071	CallExpression	free ( rkey )		1075394	0					
ANR	1078072	Callee	free		1075394	0					
ANR	1078073	Identifier	free		1075394	0					
ANR	1078074	ArgumentList	rkey		1075394	1					
ANR	1078075	Argument	rkey		1075394	0					
ANR	1078076	Identifier	rkey		1075394	0					
ANR	1078077	ElseStatement	else		1075394	0					
ANR	1078078	CompoundStatement		639:13:19895:19895	1075394	0					
ANR	1078079	ExpressionStatement	"memset ( rbuf , 0 , 24 )"	4879:7:146931:146951	1075394	0	True				
ANR	1078080	CallExpression	"memset ( rbuf , 0 , 24 )"		1075394	0					
ANR	1078081	Callee	memset		1075394	0					
ANR	1078082	Identifier	memset		1075394	0					
ANR	1078083	ArgumentList	rbuf		1075394	1					
ANR	1078084	Argument	rbuf		1075394	0					
ANR	1078085	Identifier	rbuf		1075394	0					
ANR	1078086	Argument	0		1075394	1					
ANR	1078087	PrimaryExpression	0		1075394	0					
ANR	1078088	Argument	24		1075394	2					
ANR	1078089	PrimaryExpression	24		1075394	0					
ANR	1078090	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"" , sock -> peer_description ( ) )"	4880:7:146960:147094	1075394	1	True				
ANR	1078091	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1078092	Callee	dprintf		1075394	0					
ANR	1078093	Identifier	dprintf		1075394	0					
ANR	1078094	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078095	Argument	D_ALWAYS		1075394	0					
ANR	1078096	Identifier	D_ALWAYS		1075394	0					
ANR	1078097	Argument	"""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"""		1075394	1					
ANR	1078098	PrimaryExpression	"""DC_AUTHENTICATE: unable to generate key for request from %s - no crypto available!\\n"""		1075394	0					
ANR	1078099	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078100	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078101	Callee	sock -> peer_description		1075394	0					
ANR	1078102	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078103	Identifier	sock		1075394	0					
ANR	1078104	Identifier	peer_description		1075394	1					
ANR	1078105	ArgumentList			1075394	1					
ANR	1078106	ExpressionStatement	free ( crypto_method )	4881:7:147110:147131	1075394	2	True				
ANR	1078107	CallExpression	free ( crypto_method )		1075394	0					
ANR	1078108	Callee	free		1075394	0					
ANR	1078109	Identifier	free		1075394	0					
ANR	1078110	ArgumentList	crypto_method		1075394	1					
ANR	1078111	Argument	crypto_method		1075394	0					
ANR	1078112	Identifier	crypto_method		1075394	0					
ANR	1078113	ExpressionStatement	crypto_method = NULL	4882:7:147140:147160	1075394	3	True				
ANR	1078114	AssignmentExpression	crypto_method = NULL		1075394	0		=			
ANR	1078115	Identifier	crypto_method		1075394	0					
ANR	1078116	Identifier	NULL		1075394	1					
ANR	1078117	ExpressionStatement	result = FALSE	4883:7:147169:147183	1075394	4	True				
ANR	1078118	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078119	Identifier	result		1075394	0					
ANR	1078120	Identifier	FALSE		1075394	1					
ANR	1078121	GotoStatement	goto finalize ;	4884:7:147192:147205	1075394	5	True				
ANR	1078122	Identifier	finalize		1075394	0					
ANR	1078123	SwitchStatement	switch ( toupper ( crypto_method [ 0 ] ) )		1075394	5					
ANR	1078124	Condition	toupper ( crypto_method [ 0 ] )	4887:14:147230:147254	1075394	0	True				
ANR	1078125	CallExpression	toupper ( crypto_method [ 0 ] )		1075394	0					
ANR	1078126	Callee	toupper		1075394	0					
ANR	1078127	Identifier	toupper		1075394	0					
ANR	1078128	ArgumentList	crypto_method [ 0 ]		1075394	1					
ANR	1078129	Argument	crypto_method [ 0 ]		1075394	0					
ANR	1078130	ArrayIndexing	crypto_method [ 0 ]		1075394	0					
ANR	1078131	Identifier	crypto_method		1075394	0					
ANR	1078132	PrimaryExpression	0		1075394	1					
ANR	1078133	CompoundStatement		648:41:20230:20230	1075394	1					
ANR	1078134	Label	case 'B' :	4888:7:147266:147274	1075394	0	True				
ANR	1078135	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"" , the_sid )"	4889:8:147296:147389	1075394	1	True				
ANR	1078136	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"" , the_sid )"		1075394	0					
ANR	1078137	Callee	dprintf		1075394	0					
ANR	1078138	Identifier	dprintf		1075394	0					
ANR	1078139	ArgumentList	D_SECURITY		1075394	1					
ANR	1078140	Argument	D_SECURITY		1075394	0					
ANR	1078141	Identifier	D_SECURITY		1075394	0					
ANR	1078142	Argument	"""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"""		1075394	1					
ANR	1078143	PrimaryExpression	"""DC_AUTHENTICATE: generating BLOWFISH key for session %s...\\n"""		1075394	0					
ANR	1078144	Argument	the_sid		1075394	2					
ANR	1078145	Identifier	the_sid		1075394	0					
ANR	1078146	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_BLOWFISH )"	4890:8:147399:147447	1075394	2	True				
ANR	1078147	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_BLOWFISH )"		1075394	0		=			
ANR	1078148	Identifier	the_key		1075394	0					
ANR	1078149	Expression	"rbuf , 24 , CONDOR_BLOWFISH"		1075394	1					
ANR	1078150	Identifier	rbuf		1075394	0					
ANR	1078151	Expression	"24 , CONDOR_BLOWFISH"		1075394	1					
ANR	1078152	PrimaryExpression	24		1075394	0					
ANR	1078153	Identifier	CONDOR_BLOWFISH		1075394	1					
ANR	1078154	BreakStatement	break ;	4891:8:147457:147462	1075394	3	True				
ANR	1078155	Label	case '3' :	4892:7:147471:147479	1075394	4	True				
ANR	1078156	Label	case 'T' :	4893:7:147496:147504	1075394	5	True				
ANR	1078157	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"" , the_sid )"	4894:8:147527:147616	1075394	6	True				
ANR	1078158	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"" , the_sid )"		1075394	0					
ANR	1078159	Callee	dprintf		1075394	0					
ANR	1078160	Identifier	dprintf		1075394	0					
ANR	1078161	ArgumentList	D_SECURITY		1075394	1					
ANR	1078162	Argument	D_SECURITY		1075394	0					
ANR	1078163	Identifier	D_SECURITY		1075394	0					
ANR	1078164	Argument	"""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"""		1075394	1					
ANR	1078165	PrimaryExpression	"""DC_AUTHENTICATE: generating 3DES key for session %s...\\n"""		1075394	0					
ANR	1078166	Argument	the_sid		1075394	2					
ANR	1078167	Identifier	the_sid		1075394	0					
ANR	1078168	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_3DES )"	4895:8:147626:147670	1075394	7	True				
ANR	1078169	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 , CONDOR_3DES )"		1075394	0		=			
ANR	1078170	Identifier	the_key		1075394	0					
ANR	1078171	Expression	"rbuf , 24 , CONDOR_3DES"		1075394	1					
ANR	1078172	Identifier	rbuf		1075394	0					
ANR	1078173	Expression	"24 , CONDOR_3DES"		1075394	1					
ANR	1078174	PrimaryExpression	24		1075394	0					
ANR	1078175	Identifier	CONDOR_3DES		1075394	1					
ANR	1078176	BreakStatement	break ;	4896:8:147680:147685	1075394	8	True				
ANR	1078177	Label	default :	4897:7:147694:147701	1075394	9	True				
ANR	1078178	Identifier	default		1075394	0					
ANR	1078179	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"" , the_sid )"	4898:8:147711:147802	1075394	10	True				
ANR	1078180	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"" , the_sid )"		1075394	0					
ANR	1078181	Callee	dprintf		1075394	0					
ANR	1078182	Identifier	dprintf		1075394	0					
ANR	1078183	ArgumentList	D_SECURITY		1075394	1					
ANR	1078184	Argument	D_SECURITY		1075394	0					
ANR	1078185	Identifier	D_SECURITY		1075394	0					
ANR	1078186	Argument	"""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"""		1075394	1					
ANR	1078187	PrimaryExpression	"""DC_AUTHENTICATE: generating RANDOM key for session %s...\\n"""		1075394	0					
ANR	1078188	Argument	the_sid		1075394	2					
ANR	1078189	Identifier	the_sid		1075394	0					
ANR	1078190	ExpressionStatement	"the_key = new KeyInfo ( rbuf , 24 )"	4899:8:147812:147843	1075394	11	True				
ANR	1078191	AssignmentExpression	"the_key = new KeyInfo ( rbuf , 24 )"		1075394	0		=			
ANR	1078192	Identifier	the_key		1075394	0					
ANR	1078193	Expression	"rbuf , 24"		1075394	1					
ANR	1078194	Identifier	rbuf		1075394	0					
ANR	1078195	PrimaryExpression	24		1075394	1					
ANR	1078196	BreakStatement	break ;	4900:8:147853:147858	1075394	12	True				
ANR	1078197	ExpressionStatement	free ( crypto_method )	4903:6:147875:147896	1075394	6	True				
ANR	1078198	CallExpression	free ( crypto_method )		1075394	0					
ANR	1078199	Callee	free		1075394	0					
ANR	1078200	Identifier	free		1075394	0					
ANR	1078201	ArgumentList	crypto_method		1075394	1					
ANR	1078202	Argument	crypto_method		1075394	0					
ANR	1078203	Identifier	crypto_method		1075394	0					
ANR	1078204	ExpressionStatement	crypto_method = NULL	4904:6:147904:147924	1075394	7	True				
ANR	1078205	AssignmentExpression	crypto_method = NULL		1075394	0		=			
ANR	1078206	Identifier	crypto_method		1075394	0					
ANR	1078207	Identifier	NULL		1075394	1					
ANR	1078208	IfStatement	if ( ! the_key )		1075394	8					
ANR	1078209	Condition	! the_key	4906:10:147937:147944	1075394	0	True				
ANR	1078210	UnaryOperationExpression	! the_key		1075394	0					
ANR	1078211	UnaryOperator	!		1075394	0					
ANR	1078212	Identifier	the_key		1075394	1					
ANR	1078213	CompoundStatement		667:20:20920:20920	1075394	1					
ANR	1078214	ExpressionStatement	result = FALSE	4907:7:147956:147970	1075394	0	True				
ANR	1078215	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078216	Identifier	result		1075394	0					
ANR	1078217	Identifier	FALSE		1075394	1					
ANR	1078218	GotoStatement	goto finalize ;	4908:7:147979:147992	1075394	1	True				
ANR	1078219	Identifier	finalize		1075394	0					
ANR	1078220	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , the_key )"	4911:6:148009:148050	1075394	9	True				
ANR	1078221	CallExpression	"sec_man -> key_printf ( D_SECURITY , the_key )"		1075394	0					
ANR	1078222	Callee	sec_man -> key_printf		1075394	0					
ANR	1078223	PtrMemberAccess	sec_man -> key_printf		1075394	0					
ANR	1078224	Identifier	sec_man		1075394	0					
ANR	1078225	Identifier	key_printf		1075394	1					
ANR	1078226	ArgumentList	D_SECURITY		1075394	1					
ANR	1078227	Argument	D_SECURITY		1075394	0					
ANR	1078228	Identifier	D_SECURITY		1075394	0					
ANR	1078229	Argument	the_key		1075394	1					
ANR	1078230	Identifier	the_key		1075394	0					
ANR	1078231	ExpressionStatement	new_session = true	4914:5:148065:148083	1075394	5	True				
ANR	1078232	AssignmentExpression	new_session = true		1075394	0		=			
ANR	1078233	Identifier	new_session		1075394	0					
ANR	1078234	Identifier	true		1075394	1					
ANR	1078235	IfStatement	"if ( is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO ) )"		1075394	8					
ANR	1078236	Condition	"is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO )"	4918:8:148132:148225	1075394	0	True				
ANR	1078237	AndExpression	"is_tcp && ( sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO )"		1075394	0		&&			
ANR	1078238	Identifier	is_tcp		1075394	0					
ANR	1078239	EqualityExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) == SecMan :: SEC_FEAT_ACT_NO"		1075394	1		==			
ANR	1078240	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT )"		1075394	0					
ANR	1078241	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078242	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078243	Identifier	sec_man		1075394	0					
ANR	1078244	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078245	ArgumentList	auth_info		1075394	1					
ANR	1078246	Argument	auth_info		1075394	0					
ANR	1078247	Identifier	auth_info		1075394	0					
ANR	1078248	Argument	ATTR_SEC_ENACT		1075394	1					
ANR	1078249	Identifier	ATTR_SEC_ENACT		1075394	0					
ANR	1078250	Identifier	SecMan :: SEC_FEAT_ACT_NO		1075394	1					
ANR	1078251	CompoundStatement		679:104:21201:21201	1075394	1					
ANR	1078252	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	0					
ANR	1078253	Condition	DebugFlags & D_FULLDEBUG	4919:9:148239:148262	1075394	0	True				
ANR	1078254	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1078255	Identifier	DebugFlags		1075394	0					
ANR	1078256	Identifier	D_FULLDEBUG		1075394	1					
ANR	1078257	CompoundStatement		680:35:21238:21238	1075394	1					
ANR	1078258	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: Sending following response ClassAd:\\n"" )"	4920:6:148273:148342	1075394	0	True				
ANR	1078259	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: Sending following response ClassAd:\\n"" )"		1075394	0					
ANR	1078260	Callee	dprintf		1075394	0					
ANR	1078261	Identifier	dprintf		1075394	0					
ANR	1078262	ArgumentList	D_SECURITY		1075394	1					
ANR	1078263	Argument	D_SECURITY		1075394	0					
ANR	1078264	Identifier	D_SECURITY		1075394	0					
ANR	1078265	Argument	"""SECMAN: Sending following response ClassAd:\\n"""		1075394	1					
ANR	1078266	PrimaryExpression	"""SECMAN: Sending following response ClassAd:\\n"""		1075394	0					
ANR	1078267	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	4921:6:148350:148382	1075394	1	True				
ANR	1078268	CallExpression	the_policy -> dPrint ( D_SECURITY )		1075394	0					
ANR	1078269	Callee	the_policy -> dPrint		1075394	0					
ANR	1078270	PtrMemberAccess	the_policy -> dPrint		1075394	0					
ANR	1078271	Identifier	the_policy		1075394	0					
ANR	1078272	Identifier	dPrint		1075394	1					
ANR	1078273	ArgumentList	D_SECURITY		1075394	1					
ANR	1078274	Argument	D_SECURITY		1075394	0					
ANR	1078275	Identifier	D_SECURITY		1075394	0					
ANR	1078276	ExpressionStatement	sock -> encode ( )	4923:5:148396:148410	1075394	1	True				
ANR	1078277	CallExpression	sock -> encode ( )		1075394	0					
ANR	1078278	Callee	sock -> encode		1075394	0					
ANR	1078279	PtrMemberAccess	sock -> encode		1075394	0					
ANR	1078280	Identifier	sock		1075394	0					
ANR	1078281	Identifier	encode		1075394	1					
ANR	1078282	ArgumentList			1075394	1					
ANR	1078283	IfStatement	if ( ! the_policy -> put ( * sock ) || ! sock -> end_of_message ( ) )		1075394	2					
ANR	1078284	Condition	! the_policy -> put ( * sock ) || ! sock -> end_of_message ( )	4924:9:148421:148476	1075394	0	True				
ANR	1078285	OrExpression	! the_policy -> put ( * sock ) || ! sock -> end_of_message ( )		1075394	0		||			
ANR	1078286	UnaryOperationExpression	! the_policy -> put ( * sock )		1075394	0					
ANR	1078287	UnaryOperator	!		1075394	0					
ANR	1078288	CallExpression	the_policy -> put ( * sock )		1075394	1					
ANR	1078289	Callee	the_policy -> put		1075394	0					
ANR	1078290	PtrMemberAccess	the_policy -> put		1075394	0					
ANR	1078291	Identifier	the_policy		1075394	0					
ANR	1078292	Identifier	put		1075394	1					
ANR	1078293	ArgumentList	* sock		1075394	1					
ANR	1078294	Argument	* sock		1075394	0					
ANR	1078295	UnaryOperationExpression	* sock		1075394	0					
ANR	1078296	UnaryOperator	*		1075394	0					
ANR	1078297	Identifier	sock		1075394	1					
ANR	1078298	UnaryOperationExpression	! sock -> end_of_message ( )		1075394	1					
ANR	1078299	UnaryOperator	!		1075394	0					
ANR	1078300	CallExpression	sock -> end_of_message ( )		1075394	1					
ANR	1078301	Callee	sock -> end_of_message		1075394	0					
ANR	1078302	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1078303	Identifier	sock		1075394	0					
ANR	1078304	Identifier	end_of_message		1075394	1					
ANR	1078305	ArgumentList			1075394	1					
ANR	1078306	CompoundStatement		686:31:21452:21452	1075394	1					
ANR	1078307	ExpressionStatement	"dprintf ( D_ALWAYS , ""SECMAN: Error sending response classad to %s!\\n"" , sock -> peer_description ( ) )"	4926:6:148487:148582	1075394	0	True				
ANR	1078308	CallExpression	"dprintf ( D_ALWAYS , ""SECMAN: Error sending response classad to %s!\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1078309	Callee	dprintf		1075394	0					
ANR	1078310	Identifier	dprintf		1075394	0					
ANR	1078311	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078312	Argument	D_ALWAYS		1075394	0					
ANR	1078313	Identifier	D_ALWAYS		1075394	0					
ANR	1078314	Argument	"""SECMAN: Error sending response classad to %s!\\n"""		1075394	1					
ANR	1078315	PrimaryExpression	"""SECMAN: Error sending response classad to %s!\\n"""		1075394	0					
ANR	1078316	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078317	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078318	Callee	sock -> peer_description		1075394	0					
ANR	1078319	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078320	Identifier	sock		1075394	0					
ANR	1078321	Identifier	peer_description		1075394	1					
ANR	1078322	ArgumentList			1075394	1					
ANR	1078323	ExpressionStatement	auth_info . dPrint ( D_ALWAYS )	4927:6:148590:148617	1075394	1	True				
ANR	1078324	CallExpression	auth_info . dPrint ( D_ALWAYS )		1075394	0					
ANR	1078325	Callee	auth_info . dPrint		1075394	0					
ANR	1078326	MemberAccess	auth_info . dPrint		1075394	0					
ANR	1078327	Identifier	auth_info		1075394	0					
ANR	1078328	Identifier	dPrint		1075394	1					
ANR	1078329	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078330	Argument	D_ALWAYS		1075394	0					
ANR	1078331	Identifier	D_ALWAYS		1075394	0					
ANR	1078332	ExpressionStatement	result = FALSE	4928:6:148625:148639	1075394	2	True				
ANR	1078333	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078334	Identifier	result		1075394	0					
ANR	1078335	Identifier	FALSE		1075394	1					
ANR	1078336	GotoStatement	goto finalize ;	4929:6:148647:148660	1075394	3	True				
ANR	1078337	Identifier	finalize		1075394	0					
ANR	1078338	ExpressionStatement	sock -> decode ( )	4931:5:148674:148688	1075394	3	True				
ANR	1078339	CallExpression	sock -> decode ( )		1075394	0					
ANR	1078340	Callee	sock -> decode		1075394	0					
ANR	1078341	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1078342	Identifier	sock		1075394	0					
ANR	1078343	Identifier	decode		1075394	1					
ANR	1078344	ArgumentList			1075394	1					
ANR	1078345	ElseStatement	else		1075394	0					
ANR	1078346	CompoundStatement		693:11:21674:21674	1075394	0					
ANR	1078347	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: Enact was '%s', not sending response.\\n"" , SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ] )"	4933:5:148708:148869	1075394	0	True				
ANR	1078348	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: Enact was '%s', not sending response.\\n"" , SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ] )"		1075394	0					
ANR	1078349	Callee	dprintf		1075394	0					
ANR	1078350	Identifier	dprintf		1075394	0					
ANR	1078351	ArgumentList	D_SECURITY		1075394	1					
ANR	1078352	Argument	D_SECURITY		1075394	0					
ANR	1078353	Identifier	D_SECURITY		1075394	0					
ANR	1078354	Argument	"""SECMAN: Enact was '%s', not sending response.\\n"""		1075394	1					
ANR	1078355	PrimaryExpression	"""SECMAN: Enact was '%s', not sending response.\\n"""		1075394	0					
ANR	1078356	Argument	"SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ]"		1075394	2					
ANR	1078357	ArrayIndexing	"SecMan :: sec_feat_act_rev [ sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT ) ]"		1075394	0					
ANR	1078358	Identifier	SecMan :: sec_feat_act_rev		1075394	0					
ANR	1078359	CallExpression	"sec_man -> sec_lookup_feat_act ( auth_info , ATTR_SEC_ENACT )"		1075394	1					
ANR	1078360	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078361	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078362	Identifier	sec_man		1075394	0					
ANR	1078363	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078364	ArgumentList	auth_info		1075394	1					
ANR	1078365	Argument	auth_info		1075394	0					
ANR	1078366	Identifier	auth_info		1075394	0					
ANR	1078367	Argument	ATTR_SEC_ENACT		1075394	1					
ANR	1078368	Identifier	ATTR_SEC_ENACT		1075394	0					
ANR	1078369	IfStatement	if ( ! is_tcp )		1075394	1					
ANR	1078370	Condition	! is_tcp	4939:7:148891:148897	1075394	0	True				
ANR	1078371	UnaryOperationExpression	! is_tcp		1075394	0					
ANR	1078372	UnaryOperator	!		1075394	0					
ANR	1078373	Identifier	is_tcp		1075394	1					
ANR	1078374	CompoundStatement		710:4:22294:22402	1075394	1					
ANR	1078375	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION ) ;"	4949:4:149321:149429	1075394	0	True				
ANR	1078376	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	0					
ANR	1078377	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1078378	Identifier	will_enable_encryption		1075394	1					
ANR	1078379	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	2		=			
ANR	1078380	Identifier	will_enable_encryption		1075394	0					
ANR	1078381	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	1					
ANR	1078382	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078383	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078384	Identifier	sec_man		1075394	0					
ANR	1078385	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078386	ArgumentList	* the_policy		1075394	1					
ANR	1078387	Argument	* the_policy		1075394	0					
ANR	1078388	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1078389	UnaryOperator	*		1075394	0					
ANR	1078390	Identifier	the_policy		1075394	1					
ANR	1078391	Argument	ATTR_SEC_ENCRYPTION		1075394	1					
ANR	1078392	Identifier	ATTR_SEC_ENCRYPTION		1075394	0					
ANR	1078393	IfStatement	if ( will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key )		1075394	1					
ANR	1078394	Condition	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key	4951:8:149440:149505	1075394	0	True				
ANR	1078395	AndExpression	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES && the_key		1075394	0		&&			
ANR	1078396	EqualityExpression	will_enable_encryption != SecMan :: SEC_FEAT_ACT_YES		1075394	0		!=			
ANR	1078397	Identifier	will_enable_encryption		1075394	0					
ANR	1078398	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1078399	Identifier	the_key		1075394	1					
ANR	1078400	CompoundStatement		714:4:22486:22486	1075394	1					
ANR	1078401	ExpressionStatement	"sock -> set_crypto_key ( false , the_key )"	4954:5:149520:149556	1075394	0	True				
ANR	1078402	CallExpression	"sock -> set_crypto_key ( false , the_key )"		1075394	0					
ANR	1078403	Callee	sock -> set_crypto_key		1075394	0					
ANR	1078404	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1078405	Identifier	sock		1075394	0					
ANR	1078406	Identifier	set_crypto_key		1075394	1					
ANR	1078407	ArgumentList	false		1075394	1					
ANR	1078408	Argument	false		1075394	0					
ANR	1078409	Identifier	false		1075394	0					
ANR	1078410	Argument	the_key		1075394	1					
ANR	1078411	Identifier	the_key		1075394	0					
ANR	1078412	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"" , the_sid ? the_sid : ""(null)"" )"	4955:5:149563:149733	1075394	1	True				
ANR	1078413	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"" , the_sid ? the_sid : ""(null)"" )"		1075394	0					
ANR	1078414	Callee	dprintf		1075394	0					
ANR	1078415	Identifier	dprintf		1075394	0					
ANR	1078416	ArgumentList	D_SECURITY		1075394	1					
ANR	1078417	Argument	D_SECURITY		1075394	0					
ANR	1078418	Identifier	D_SECURITY		1075394	0					
ANR	1078419	Argument	"""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"""		1075394	1					
ANR	1078420	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled with session key id %s (but encryption mode is off by default for this packet).\\n"""		1075394	0					
ANR	1078421	Argument	"the_sid ? the_sid : ""(null)"""		1075394	2					
ANR	1078422	ConditionalExpression	"the_sid ? the_sid : ""(null)"""		1075394	0					
ANR	1078423	Condition	the_sid		1075394	0					
ANR	1078424	Identifier	the_sid		1075394	0					
ANR	1078425	Identifier	the_sid		1075394	1					
ANR	1078426	PrimaryExpression	"""(null)"""		1075394	2					
ANR	1078427	IfStatement	if ( is_tcp )		1075394	2					
ANR	1078428	Condition	is_tcp	4959:7:149754:149759	1075394	0	True				
ANR	1078429	Identifier	is_tcp		1075394	0					
ANR	1078430	CompoundStatement		727:4:23026:23133	1075394	1					
ANR	1078431	IdentifierDeclStatement	"SecMan :: sec_feat_act will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION ) ;"	4964:4:149821:149933	1075394	0	True				
ANR	1078432	IdentifierDecl	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	0					
ANR	1078433	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1078434	Identifier	will_authenticate		1075394	1					
ANR	1078435	AssignmentExpression	"will_authenticate = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	2		=			
ANR	1078436	Identifier	will_authenticate		1075394	0					
ANR	1078437	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_AUTHENTICATION )"		1075394	1					
ANR	1078438	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078439	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078440	Identifier	sec_man		1075394	0					
ANR	1078441	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078442	ArgumentList	* the_policy		1075394	1					
ANR	1078443	Argument	* the_policy		1075394	0					
ANR	1078444	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1078445	UnaryOperator	*		1075394	0					
ANR	1078446	Identifier	the_policy		1075394	1					
ANR	1078447	Argument	ATTR_SEC_AUTHENTICATION		1075394	1					
ANR	1078448	Identifier	ATTR_SEC_AUTHENTICATION		1075394	0					
ANR	1078449	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION ) ;"	4965:4:149939:150047	1075394	1	True				
ANR	1078450	IdentifierDecl	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	0					
ANR	1078451	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1078452	Identifier	will_enable_encryption		1075394	1					
ANR	1078453	AssignmentExpression	"will_enable_encryption = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	2		=			
ANR	1078454	Identifier	will_enable_encryption		1075394	0					
ANR	1078455	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_ENCRYPTION )"		1075394	1					
ANR	1078456	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078457	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078458	Identifier	sec_man		1075394	0					
ANR	1078459	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078460	ArgumentList	* the_policy		1075394	1					
ANR	1078461	Argument	* the_policy		1075394	0					
ANR	1078462	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1078463	UnaryOperator	*		1075394	0					
ANR	1078464	Identifier	the_policy		1075394	1					
ANR	1078465	Argument	ATTR_SEC_ENCRYPTION		1075394	1					
ANR	1078466	Identifier	ATTR_SEC_ENCRYPTION		1075394	0					
ANR	1078467	IdentifierDeclStatement	"SecMan :: sec_feat_act will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY ) ;"	4966:4:150053:150160	1075394	2	True				
ANR	1078468	IdentifierDecl	"will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		1075394	0					
ANR	1078469	IdentifierDeclType	SecMan :: sec_feat_act		1075394	0					
ANR	1078470	Identifier	will_enable_integrity		1075394	1					
ANR	1078471	AssignmentExpression	"will_enable_integrity = sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		1075394	2		=			
ANR	1078472	Identifier	will_enable_integrity		1075394	0					
ANR	1078473	CallExpression	"sec_man -> sec_lookup_feat_act ( * the_policy , ATTR_SEC_INTEGRITY )"		1075394	1					
ANR	1078474	Callee	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078475	PtrMemberAccess	sec_man -> sec_lookup_feat_act		1075394	0					
ANR	1078476	Identifier	sec_man		1075394	0					
ANR	1078477	Identifier	sec_lookup_feat_act		1075394	1					
ANR	1078478	ArgumentList	* the_policy		1075394	1					
ANR	1078479	Argument	* the_policy		1075394	0					
ANR	1078480	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1078481	UnaryOperator	*		1075394	0					
ANR	1078482	Identifier	the_policy		1075394	1					
ANR	1078483	Argument	ATTR_SEC_INTEGRITY		1075394	1					
ANR	1078484	Identifier	ATTR_SEC_INTEGRITY		1075394	0					
ANR	1078485	IfStatement	if ( ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES ) )		1075394	3					
ANR	1078486	Condition	will_authenticate == SecMan :: SEC_FEAT_ACT_YES	4980:8:150585:150631	1075394	0	True				
ANR	1078487	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		1075394	0		==			
ANR	1078488	Identifier	will_authenticate		1075394	0					
ANR	1078489	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1078490	CompoundStatement		741:57:23607:23607	1075394	1					
ANR	1078491	IfStatement	if ( ( ! new_session ) )		1075394	0					
ANR	1078492	Condition	! new_session	4981:9:150645:150658	1075394	0	True				
ANR	1078493	UnaryOperationExpression	! new_session		1075394	0					
ANR	1078494	UnaryOperator	!		1075394	0					
ANR	1078495	Identifier	new_session		1075394	1					
ANR	1078496	CompoundStatement		743:6:23642:23670	1075394	1					
ANR	1078497	IdentifierDeclStatement	char * remote_version = NULL ;	4982:6:150669:150697	1075394	0	True				
ANR	1078498	IdentifierDecl	* remote_version = NULL		1075394	0					
ANR	1078499	IdentifierDeclType	char *		1075394	0					
ANR	1078500	Identifier	remote_version		1075394	1					
ANR	1078501	AssignmentExpression	* remote_version = NULL		1075394	2		=			
ANR	1078502	Identifier	NULL		1075394	0					
ANR	1078503	Identifier	NULL		1075394	1					
ANR	1078504	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"	4983:6:150705:150771	1075394	1	True				
ANR	1078505	CallExpression	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"		1075394	0					
ANR	1078506	Callee	the_policy -> LookupString		1075394	0					
ANR	1078507	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1078508	Identifier	the_policy		1075394	0					
ANR	1078509	Identifier	LookupString		1075394	1					
ANR	1078510	ArgumentList	ATTR_SEC_REMOTE_VERSION		1075394	1					
ANR	1078511	Argument	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1078512	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1078513	Argument	& remote_version		1075394	1					
ANR	1078514	UnaryOperationExpression	& remote_version		1075394	0					
ANR	1078515	UnaryOperator	&		1075394	0					
ANR	1078516	Identifier	remote_version		1075394	1					
ANR	1078517	IfStatement	if ( remote_version )		1075394	2					
ANR	1078518	Condition	remote_version	4984:9:150782:150795	1075394	0	True				
ANR	1078519	Identifier	remote_version		1075394	0					
ANR	1078520	CompoundStatement		745:25:23771:23771	1075394	1					
ANR	1078521	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: other side is %s, NOT reauthenticating.\\n"" , remote_version )"	4988:7:150986:151076	1075394	0	True				
ANR	1078522	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: other side is %s, NOT reauthenticating.\\n"" , remote_version )"		1075394	0					
ANR	1078523	Callee	dprintf		1075394	0					
ANR	1078524	Identifier	dprintf		1075394	0					
ANR	1078525	ArgumentList	D_SECURITY		1075394	1					
ANR	1078526	Argument	D_SECURITY		1075394	0					
ANR	1078527	Identifier	D_SECURITY		1075394	0					
ANR	1078528	Argument	"""SECMAN: other side is %s, NOT reauthenticating.\\n"""		1075394	1					
ANR	1078529	PrimaryExpression	"""SECMAN: other side is %s, NOT reauthenticating.\\n"""		1075394	0					
ANR	1078530	Argument	remote_version		1075394	2					
ANR	1078531	Identifier	remote_version		1075394	0					
ANR	1078532	ExpressionStatement	will_authenticate = SecMan :: SEC_FEAT_ACT_NO	4989:7:151085:151128	1075394	1	True				
ANR	1078533	AssignmentExpression	will_authenticate = SecMan :: SEC_FEAT_ACT_NO		1075394	0		=			
ANR	1078534	Identifier	will_authenticate		1075394	0					
ANR	1078535	Identifier	SecMan :: SEC_FEAT_ACT_NO		1075394	1					
ANR	1078536	ExpressionStatement	free ( remote_version )	4991:7:151138:151159	1075394	2	True				
ANR	1078537	CallExpression	free ( remote_version )		1075394	0					
ANR	1078538	Callee	free		1075394	0					
ANR	1078539	Identifier	free		1075394	0					
ANR	1078540	ArgumentList	remote_version		1075394	1					
ANR	1078541	Argument	remote_version		1075394	0					
ANR	1078542	Identifier	remote_version		1075394	0					
ANR	1078543	ElseStatement	else		1075394	0					
ANR	1078544	CompoundStatement		753:13:24147:24147	1075394	0					
ANR	1078545	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"" )"	4993:7:151183:151260	1075394	0	True				
ANR	1078546	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"" )"		1075394	0					
ANR	1078547	Callee	dprintf		1075394	0					
ANR	1078548	Identifier	dprintf		1075394	0					
ANR	1078549	ArgumentList	D_SECURITY		1075394	1					
ANR	1078550	Argument	D_SECURITY		1075394	0					
ANR	1078551	Identifier	D_SECURITY		1075394	0					
ANR	1078552	Argument	"""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"""		1075394	1					
ANR	1078553	PrimaryExpression	"""SECMAN: other side is pre 6.6.1, reauthenticating.\\n"""		1075394	0					
ANR	1078554	ElseStatement	else		1075394	0					
ANR	1078555	CompoundStatement		756:12:24255:24255	1075394	0					
ANR	1078556	ExpressionStatement	"dprintf ( D_SECURITY , ""SECMAN: new session, doing initial authentication.\\n"" )"	4996:6:151290:151367	1075394	0	True				
ANR	1078557	CallExpression	"dprintf ( D_SECURITY , ""SECMAN: new session, doing initial authentication.\\n"" )"		1075394	0					
ANR	1078558	Callee	dprintf		1075394	0					
ANR	1078559	Identifier	dprintf		1075394	0					
ANR	1078560	ArgumentList	D_SECURITY		1075394	1					
ANR	1078561	Argument	D_SECURITY		1075394	0					
ANR	1078562	Identifier	D_SECURITY		1075394	0					
ANR	1078563	Argument	"""SECMAN: new session, doing initial authentication.\\n"""		1075394	1					
ANR	1078564	PrimaryExpression	"""SECMAN: new session, doing initial authentication.\\n"""		1075394	0					
ANR	1078565	IfStatement	if ( is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES ) )		1075394	4					
ANR	1078566	Condition	is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )	5002:8:151393:151449	1075394	0	True				
ANR	1078567	AndExpression	is_tcp && ( will_authenticate == SecMan :: SEC_FEAT_ACT_YES )		1075394	0		&&			
ANR	1078568	Identifier	is_tcp		1075394	0					
ANR	1078569	EqualityExpression	will_authenticate == SecMan :: SEC_FEAT_ACT_YES		1075394	1		==			
ANR	1078570	Identifier	will_authenticate		1075394	0					
ANR	1078571	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1078572	CompoundStatement		789:5:25442:25542	1075394	1					
ANR	1078573	IdentifierDeclStatement	char * auth_methods = NULL ;	5013:5:151917:151943	1075394	0	True				
ANR	1078574	IdentifierDecl	* auth_methods = NULL		1075394	0					
ANR	1078575	IdentifierDeclType	char *		1075394	0					
ANR	1078576	Identifier	auth_methods		1075394	1					
ANR	1078577	AssignmentExpression	* auth_methods = NULL		1075394	2		=			
ANR	1078578	Identifier	NULL		1075394	0					
ANR	1078579	Identifier	NULL		1075394	1					
ANR	1078580	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_AUTHENTICATION_METHODS_LIST , & auth_methods )"	5014:5:151950:152027	1075394	1	True				
ANR	1078581	CallExpression	"the_policy -> LookupString ( ATTR_SEC_AUTHENTICATION_METHODS_LIST , & auth_methods )"		1075394	0					
ANR	1078582	Callee	the_policy -> LookupString		1075394	0					
ANR	1078583	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1078584	Identifier	the_policy		1075394	0					
ANR	1078585	Identifier	LookupString		1075394	1					
ANR	1078586	ArgumentList	ATTR_SEC_AUTHENTICATION_METHODS_LIST		1075394	1					
ANR	1078587	Argument	ATTR_SEC_AUTHENTICATION_METHODS_LIST		1075394	0					
ANR	1078588	Identifier	ATTR_SEC_AUTHENTICATION_METHODS_LIST		1075394	0					
ANR	1078589	Argument	& auth_methods		1075394	1					
ANR	1078590	UnaryOperationExpression	& auth_methods		1075394	0					
ANR	1078591	UnaryOperator	&		1075394	0					
ANR	1078592	Identifier	auth_methods		1075394	1					
ANR	1078593	IfStatement	if ( ! auth_methods )		1075394	2					
ANR	1078594	Condition	! auth_methods	5016:9:152039:152051	1075394	0	True				
ANR	1078595	UnaryOperationExpression	! auth_methods		1075394	0					
ANR	1078596	UnaryOperator	!		1075394	0					
ANR	1078597	Identifier	auth_methods		1075394	1					
ANR	1078598	CompoundStatement		777:24:25027:25027	1075394	1					
ANR	1078599	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"" , sock -> peer_description ( ) )"	5017:6:152062:152179	1075394	0	True				
ANR	1078600	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1078601	Callee	dprintf		1075394	0					
ANR	1078602	Identifier	dprintf		1075394	0					
ANR	1078603	ArgumentList	D_SECURITY		1075394	1					
ANR	1078604	Argument	D_SECURITY		1075394	0					
ANR	1078605	Identifier	D_SECURITY		1075394	0					
ANR	1078606	Argument	"""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"""		1075394	1					
ANR	1078607	PrimaryExpression	"""DC_AUTHENTICATE: no auth methods in response ad from %s, failing!\\n"""		1075394	0					
ANR	1078608	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078609	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078610	Callee	sock -> peer_description		1075394	0					
ANR	1078611	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078612	Identifier	sock		1075394	0					
ANR	1078613	Identifier	peer_description		1075394	1					
ANR	1078614	ArgumentList			1075394	1					
ANR	1078615	ExpressionStatement	result = FALSE	5018:6:152187:152201	1075394	1	True				
ANR	1078616	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078617	Identifier	result		1075394	0					
ANR	1078618	Identifier	FALSE		1075394	1					
ANR	1078619	GotoStatement	goto finalize ;	5019:6:152209:152222	1075394	2	True				
ANR	1078620	Identifier	finalize		1075394	0					
ANR	1078621	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	3					
ANR	1078622	Condition	DebugFlags & D_FULLDEBUG	5022:9:152241:152264	1075394	0	True				
ANR	1078623	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1078624	Identifier	DebugFlags		1075394	0					
ANR	1078625	Identifier	D_FULLDEBUG		1075394	1					
ANR	1078626	CompoundStatement		783:35:25240:25240	1075394	1					
ANR	1078627	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"" )"	5023:6:152275:152343	1075394	0	True				
ANR	1078628	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"" )"		1075394	0					
ANR	1078629	Callee	dprintf		1075394	0					
ANR	1078630	Identifier	dprintf		1075394	0					
ANR	1078631	ArgumentList	D_SECURITY		1075394	1					
ANR	1078632	Argument	D_SECURITY		1075394	0					
ANR	1078633	Identifier	D_SECURITY		1075394	0					
ANR	1078634	Argument	"""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"""		1075394	1					
ANR	1078635	PrimaryExpression	"""DC_AUTHENTICATE: authenticating RIGHT NOW.\\n"""		1075394	0					
ANR	1078636	IdentifierDeclStatement	int auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm ) ;	5026:5:152358:152431	1075394	4	True				
ANR	1078637	IdentifierDecl	auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		1075394	0					
ANR	1078638	IdentifierDeclType	int		1075394	0					
ANR	1078639	Identifier	auth_timeout		1075394	1					
ANR	1078640	AssignmentExpression	auth_timeout = getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		1075394	2		=			
ANR	1078641	Identifier	auth_timeout		1075394	0					
ANR	1078642	CallExpression	getSecMan ( ) -> getSecTimeout ( comTable [ cmd_index ] . perm )		1075394	1					
ANR	1078643	Callee	getSecMan ( ) -> getSecTimeout		1075394	0					
ANR	1078644	PtrMemberAccess	getSecMan ( ) -> getSecTimeout		1075394	0					
ANR	1078645	CallExpression	getSecMan ( )		1075394	0					
ANR	1078646	Callee	getSecMan		1075394	0					
ANR	1078647	Identifier	getSecMan		1075394	0					
ANR	1078648	ArgumentList			1075394	1					
ANR	1078649	Identifier	getSecTimeout		1075394	1					
ANR	1078650	ArgumentList	comTable [ cmd_index ] . perm		1075394	1					
ANR	1078651	Argument	comTable [ cmd_index ] . perm		1075394	0					
ANR	1078652	MemberAccess	comTable [ cmd_index ] . perm		1075394	0					
ANR	1078653	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1078654	Identifier	comTable		1075394	0					
ANR	1078655	Identifier	cmd_index		1075394	1					
ANR	1078656	Identifier	perm		1075394	1					
ANR	1078657	IdentifierDeclStatement	char * method_used = NULL ;	5027:5:152438:152462	1075394	5	True				
ANR	1078658	IdentifierDecl	* method_used = NULL		1075394	0					
ANR	1078659	IdentifierDeclType	char *		1075394	0					
ANR	1078660	Identifier	method_used		1075394	1					
ANR	1078661	AssignmentExpression	* method_used = NULL		1075394	2		=			
ANR	1078662	Identifier	NULL		1075394	0					
ANR	1078663	Identifier	NULL		1075394	1					
ANR	1078664	IdentifierDeclStatement	"bool auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used ) ;"	5028:5:152469:152569	1075394	6	True				
ANR	1078665	IdentifierDecl	"auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		1075394	0					
ANR	1078666	IdentifierDeclType	bool		1075394	0					
ANR	1078667	Identifier	auth_success		1075394	1					
ANR	1078668	AssignmentExpression	"auth_success = sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		1075394	2		=			
ANR	1078669	Identifier	auth_success		1075394	0					
ANR	1078670	CallExpression	"sock -> authenticate ( the_key , auth_methods , & errstack , auth_timeout , & method_used )"		1075394	1					
ANR	1078671	Callee	sock -> authenticate		1075394	0					
ANR	1078672	PtrMemberAccess	sock -> authenticate		1075394	0					
ANR	1078673	Identifier	sock		1075394	0					
ANR	1078674	Identifier	authenticate		1075394	1					
ANR	1078675	ArgumentList	the_key		1075394	1					
ANR	1078676	Argument	the_key		1075394	0					
ANR	1078677	Identifier	the_key		1075394	0					
ANR	1078678	Argument	auth_methods		1075394	1					
ANR	1078679	Identifier	auth_methods		1075394	0					
ANR	1078680	Argument	& errstack		1075394	2					
ANR	1078681	UnaryOperationExpression	& errstack		1075394	0					
ANR	1078682	UnaryOperator	&		1075394	0					
ANR	1078683	Identifier	errstack		1075394	1					
ANR	1078684	Argument	auth_timeout		1075394	3					
ANR	1078685	Identifier	auth_timeout		1075394	0					
ANR	1078686	Argument	& method_used		1075394	4					
ANR	1078687	UnaryOperationExpression	& method_used		1075394	0					
ANR	1078688	UnaryOperator	&		1075394	0					
ANR	1078689	Identifier	method_used		1075394	1					
ANR	1078690	IfStatement	if ( method_used )		1075394	7					
ANR	1078691	Condition	method_used	5030:10:152582:152592	1075394	0	True				
ANR	1078692	Identifier	method_used		1075394	0					
ANR	1078693	CompoundStatement		791:24:25569:25569	1075394	1					
ANR	1078694	ExpressionStatement	"the_policy -> Assign ( ATTR_SEC_AUTHENTICATION_METHODS , method_used )"	5031:6:152604:152668	1075394	0	True				
ANR	1078695	CallExpression	"the_policy -> Assign ( ATTR_SEC_AUTHENTICATION_METHODS , method_used )"		1075394	0					
ANR	1078696	Callee	the_policy -> Assign		1075394	0					
ANR	1078697	PtrMemberAccess	the_policy -> Assign		1075394	0					
ANR	1078698	Identifier	the_policy		1075394	0					
ANR	1078699	Identifier	Assign		1075394	1					
ANR	1078700	ArgumentList	ATTR_SEC_AUTHENTICATION_METHODS		1075394	1					
ANR	1078701	Argument	ATTR_SEC_AUTHENTICATION_METHODS		1075394	0					
ANR	1078702	Identifier	ATTR_SEC_AUTHENTICATION_METHODS		1075394	0					
ANR	1078703	Argument	method_used		1075394	1					
ANR	1078704	Identifier	method_used		1075394	0					
ANR	1078705	ExpressionStatement	free ( auth_methods )	5034:5:152683:152703	1075394	8	True				
ANR	1078706	CallExpression	free ( auth_methods )		1075394	0					
ANR	1078707	Callee	free		1075394	0					
ANR	1078708	Identifier	free		1075394	0					
ANR	1078709	ArgumentList	auth_methods		1075394	1					
ANR	1078710	Argument	auth_methods		1075394	0					
ANR	1078711	Identifier	auth_methods		1075394	0					
ANR	1078712	ExpressionStatement	free ( method_used )	5035:5:152710:152729	1075394	9	True				
ANR	1078713	CallExpression	free ( method_used )		1075394	0					
ANR	1078714	Callee	free		1075394	0					
ANR	1078715	Identifier	free		1075394	0					
ANR	1078716	ArgumentList	method_used		1075394	1					
ANR	1078717	Argument	method_used		1075394	0					
ANR	1078718	Identifier	method_used		1075394	0					
ANR	1078719	IfStatement	if ( comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( ) )		1075394	10					
ANR	1078720	Condition	comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( )	5037:9:152741:152810	1075394	0	True				
ANR	1078721	AndExpression	comTable [ cmd_index ] . force_authentication && ! sock -> isMappedFQU ( )		1075394	0		&&			
ANR	1078722	MemberAccess	comTable [ cmd_index ] . force_authentication		1075394	0					
ANR	1078723	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1078724	Identifier	comTable		1075394	0					
ANR	1078725	Identifier	cmd_index		1075394	1					
ANR	1078726	Identifier	force_authentication		1075394	1					
ANR	1078727	UnaryOperationExpression	! sock -> isMappedFQU ( )		1075394	1					
ANR	1078728	UnaryOperator	!		1075394	0					
ANR	1078729	CallExpression	sock -> isMappedFQU ( )		1075394	1					
ANR	1078730	Callee	sock -> isMappedFQU		1075394	0					
ANR	1078731	PtrMemberAccess	sock -> isMappedFQU		1075394	0					
ANR	1078732	Identifier	sock		1075394	0					
ANR	1078733	Identifier	isMappedFQU		1075394	1					
ANR	1078734	ArgumentList			1075394	1					
ANR	1078735	CompoundStatement		800:5:25792:25792	1075394	1					
ANR	1078736	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , tmp_cmd , comTable [ cmd_index ] . command_descrip )"	5040:6:152827:153085	1075394	0	True				
ANR	1078737	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , tmp_cmd , comTable [ cmd_index ] . command_descrip )"		1075394	0					
ANR	1078738	Callee	dprintf		1075394	0					
ANR	1078739	Identifier	dprintf		1075394	0					
ANR	1078740	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078741	Argument	D_ALWAYS		1075394	0					
ANR	1078742	Identifier	D_ALWAYS		1075394	0					
ANR	1078743	Argument	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		1075394	1					
ANR	1078744	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		1075394	0					
ANR	1078745	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078746	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078747	Callee	sock -> peer_description		1075394	0					
ANR	1078748	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078749	Identifier	sock		1075394	0					
ANR	1078750	Identifier	peer_description		1075394	1					
ANR	1078751	ArgumentList			1075394	1					
ANR	1078752	Argument	tmp_cmd		1075394	3					
ANR	1078753	Identifier	tmp_cmd		1075394	0					
ANR	1078754	Argument	comTable [ cmd_index ] . command_descrip		1075394	4					
ANR	1078755	MemberAccess	comTable [ cmd_index ] . command_descrip		1075394	0					
ANR	1078756	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1078757	Identifier	comTable		1075394	0					
ANR	1078758	Identifier	cmd_index		1075394	1					
ANR	1078759	Identifier	command_descrip		1075394	1					
ANR	1078760	IfStatement	if ( ! auth_success )		1075394	1					
ANR	1078761	Condition	! auth_success	5044:10:153097:153109	1075394	0	True				
ANR	1078762	UnaryOperationExpression	! auth_success		1075394	0					
ANR	1078763	UnaryOperator	!		1075394	0					
ANR	1078764	Identifier	auth_success		1075394	1					
ANR	1078765	CompoundStatement		805:26:26086:26086	1075394	1					
ANR	1078766	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: reason for authentication failure: %s\\n"" , errstack . getFullText ( ) )"	5045:7:153122:153245	1075394	0	True				
ANR	1078767	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: reason for authentication failure: %s\\n"" , errstack . getFullText ( ) )"		1075394	0					
ANR	1078768	Callee	dprintf		1075394	0					
ANR	1078769	Identifier	dprintf		1075394	0					
ANR	1078770	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078771	Argument	D_ALWAYS		1075394	0					
ANR	1078772	Identifier	D_ALWAYS		1075394	0					
ANR	1078773	Argument	"""DC_AUTHENTICATE: reason for authentication failure: %s\\n"""		1075394	1					
ANR	1078774	PrimaryExpression	"""DC_AUTHENTICATE: reason for authentication failure: %s\\n"""		1075394	0					
ANR	1078775	Argument	errstack . getFullText ( )		1075394	2					
ANR	1078776	CallExpression	errstack . getFullText ( )		1075394	0					
ANR	1078777	Callee	errstack . getFullText		1075394	0					
ANR	1078778	MemberAccess	errstack . getFullText		1075394	0					
ANR	1078779	Identifier	errstack		1075394	0					
ANR	1078780	Identifier	getFullText		1075394	1					
ANR	1078781	ArgumentList			1075394	1					
ANR	1078782	ExpressionStatement	result = FALSE	5049:6:153261:153275	1075394	2	True				
ANR	1078783	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078784	Identifier	result		1075394	0					
ANR	1078785	Identifier	FALSE		1075394	1					
ANR	1078786	GotoStatement	goto finalize ;	5050:6:153283:153296	1075394	3	True				
ANR	1078787	Identifier	finalize		1075394	0					
ANR	1078788	IfStatement	if ( auth_success )		1075394	11					
ANR	1078789	Condition	auth_success	5053:9:153315:153326	1075394	0	True				
ANR	1078790	Identifier	auth_success		1075394	0					
ANR	1078791	CompoundStatement		814:24:26303:26303	1075394	1					
ANR	1078792	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authentication of %s complete.\\n"" , sock -> peer_ip_str ( ) )"	5054:6:153338:153432	1075394	0	True				
ANR	1078793	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: authentication of %s complete.\\n"" , sock -> peer_ip_str ( ) )"		1075394	0					
ANR	1078794	Callee	dprintf		1075394	0					
ANR	1078795	Identifier	dprintf		1075394	0					
ANR	1078796	ArgumentList	D_SECURITY		1075394	1					
ANR	1078797	Argument	D_SECURITY		1075394	0					
ANR	1078798	Identifier	D_SECURITY		1075394	0					
ANR	1078799	Argument	"""DC_AUTHENTICATE: authentication of %s complete.\\n"""		1075394	1					
ANR	1078800	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s complete.\\n"""		1075394	0					
ANR	1078801	Argument	sock -> peer_ip_str ( )		1075394	2					
ANR	1078802	CallExpression	sock -> peer_ip_str ( )		1075394	0					
ANR	1078803	Callee	sock -> peer_ip_str		1075394	0					
ANR	1078804	PtrMemberAccess	sock -> peer_ip_str		1075394	0					
ANR	1078805	Identifier	sock		1075394	0					
ANR	1078806	Identifier	peer_ip_str		1075394	1					
ANR	1078807	ArgumentList			1075394	1					
ANR	1078808	ElseStatement	else		1075394	0					
ANR	1078809	CompoundStatement		818:6:26432:26457	1075394	0					
ANR	1078810	IdentifierDeclStatement	bool auth_required = true ;	5057:6:153459:153484	1075394	0	True				
ANR	1078811	IdentifierDecl	auth_required = true		1075394	0					
ANR	1078812	IdentifierDeclType	bool		1075394	0					
ANR	1078813	Identifier	auth_required		1075394	1					
ANR	1078814	AssignmentExpression	auth_required = true		1075394	2		=			
ANR	1078815	Identifier	true		1075394	0					
ANR	1078816	Identifier	true		1075394	1					
ANR	1078817	ExpressionStatement	"the_policy -> LookupBool ( ATTR_SEC_AUTH_REQUIRED , auth_required )"	5058:6:153492:153552	1075394	1	True				
ANR	1078818	CallExpression	"the_policy -> LookupBool ( ATTR_SEC_AUTH_REQUIRED , auth_required )"		1075394	0					
ANR	1078819	Callee	the_policy -> LookupBool		1075394	0					
ANR	1078820	PtrMemberAccess	the_policy -> LookupBool		1075394	0					
ANR	1078821	Identifier	the_policy		1075394	0					
ANR	1078822	Identifier	LookupBool		1075394	1					
ANR	1078823	ArgumentList	ATTR_SEC_AUTH_REQUIRED		1075394	1					
ANR	1078824	Argument	ATTR_SEC_AUTH_REQUIRED		1075394	0					
ANR	1078825	Identifier	ATTR_SEC_AUTH_REQUIRED		1075394	0					
ANR	1078826	Argument	auth_required		1075394	1					
ANR	1078827	Identifier	auth_required		1075394	0					
ANR	1078828	IfStatement	if ( ! auth_required )		1075394	2					
ANR	1078829	Condition	! auth_required	5060:10:153565:153578	1075394	0	True				
ANR	1078830	UnaryOperationExpression	! auth_required		1075394	0					
ANR	1078831	UnaryOperator	!		1075394	0					
ANR	1078832	Identifier	auth_required		1075394	1					
ANR	1078833	CompoundStatement		821:27:26555:26555	1075394	1					
ANR	1078834	ExpressionStatement	"dprintf ( D_SECURITY | D_FULLDEBUG , ""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"" , sock -> peer_ip_str ( ) )"	5061:7:153591:153747	1075394	0	True				
ANR	1078835	CallExpression	"dprintf ( D_SECURITY | D_FULLDEBUG , ""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"" , sock -> peer_ip_str ( ) )"		1075394	0					
ANR	1078836	Callee	dprintf		1075394	0					
ANR	1078837	Identifier	dprintf		1075394	0					
ANR	1078838	ArgumentList	D_SECURITY | D_FULLDEBUG		1075394	1					
ANR	1078839	Argument	D_SECURITY | D_FULLDEBUG		1075394	0					
ANR	1078840	InclusiveOrExpression	D_SECURITY | D_FULLDEBUG		1075394	0		|			
ANR	1078841	Identifier	D_SECURITY		1075394	0					
ANR	1078842	Identifier	D_FULLDEBUG		1075394	1					
ANR	1078843	Argument	"""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"""		1075394	1					
ANR	1078844	PrimaryExpression	"""DC_SECURITY: authentication of %s failed but was not required, so continuing.\\n"""		1075394	0					
ANR	1078845	Argument	sock -> peer_ip_str ( )		1075394	2					
ANR	1078846	CallExpression	sock -> peer_ip_str ( )		1075394	0					
ANR	1078847	Callee	sock -> peer_ip_str		1075394	0					
ANR	1078848	PtrMemberAccess	sock -> peer_ip_str		1075394	0					
ANR	1078849	Identifier	sock		1075394	0					
ANR	1078850	Identifier	peer_ip_str		1075394	1					
ANR	1078851	ArgumentList			1075394	1					
ANR	1078852	ElseStatement	else		1075394	0					
ANR	1078853	CompoundStatement		826:11:26741:26741	1075394	0					
ANR	1078854	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"" , sock -> peer_ip_str ( ) , errstack . getFullText ( ) )"	5066:7:153777:153934	1075394	0	True				
ANR	1078855	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"" , sock -> peer_ip_str ( ) , errstack . getFullText ( ) )"		1075394	0					
ANR	1078856	Callee	dprintf		1075394	0					
ANR	1078857	Identifier	dprintf		1075394	0					
ANR	1078858	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078859	Argument	D_ALWAYS		1075394	0					
ANR	1078860	Identifier	D_ALWAYS		1075394	0					
ANR	1078861	Argument	"""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"""		1075394	1					
ANR	1078862	PrimaryExpression	"""DC_AUTHENTICATE: required authentication of %s failed: %s\\n"""		1075394	0					
ANR	1078863	Argument	sock -> peer_ip_str ( )		1075394	2					
ANR	1078864	CallExpression	sock -> peer_ip_str ( )		1075394	0					
ANR	1078865	Callee	sock -> peer_ip_str		1075394	0					
ANR	1078866	PtrMemberAccess	sock -> peer_ip_str		1075394	0					
ANR	1078867	Identifier	sock		1075394	0					
ANR	1078868	Identifier	peer_ip_str		1075394	1					
ANR	1078869	ArgumentList			1075394	1					
ANR	1078870	Argument	errstack . getFullText ( )		1075394	3					
ANR	1078871	CallExpression	errstack . getFullText ( )		1075394	0					
ANR	1078872	Callee	errstack . getFullText		1075394	0					
ANR	1078873	MemberAccess	errstack . getFullText		1075394	0					
ANR	1078874	Identifier	errstack		1075394	0					
ANR	1078875	Identifier	getFullText		1075394	1					
ANR	1078876	ArgumentList			1075394	1					
ANR	1078877	ExpressionStatement	result = FALSE	5070:7:153943:153957	1075394	1	True				
ANR	1078878	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078879	Identifier	result		1075394	0					
ANR	1078880	Identifier	FALSE		1075394	1					
ANR	1078881	GotoStatement	goto finalize ;	5071:7:153966:153979	1075394	2	True				
ANR	1078882	Identifier	finalize		1075394	0					
ANR	1078883	ElseStatement	else		1075394	0					
ANR	1078884	CompoundStatement		836:11:26981:26981	1075394	0					
ANR	1078885	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	0					
ANR	1078886	Condition	DebugFlags & D_FULLDEBUG	5076:9:154019:154042	1075394	0	True				
ANR	1078887	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1078888	Identifier	DebugFlags		1075394	0					
ANR	1078889	Identifier	D_FULLDEBUG		1075394	1					
ANR	1078890	CompoundStatement		837:35:27018:27018	1075394	1					
ANR	1078891	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: not authenticating.\\n"" )"	5077:6:154053:154115	1075394	0	True				
ANR	1078892	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: not authenticating.\\n"" )"		1075394	0					
ANR	1078893	Callee	dprintf		1075394	0					
ANR	1078894	Identifier	dprintf		1075394	0					
ANR	1078895	ArgumentList	D_SECURITY		1075394	1					
ANR	1078896	Argument	D_SECURITY		1075394	0					
ANR	1078897	Identifier	D_SECURITY		1075394	0					
ANR	1078898	Argument	"""DC_AUTHENTICATE: not authenticating.\\n"""		1075394	1					
ANR	1078899	PrimaryExpression	"""DC_AUTHENTICATE: not authenticating.\\n"""		1075394	0					
ANR	1078900	IfStatement	if ( will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES )		1075394	5					
ANR	1078901	Condition	will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES	5082:8:154140:154188	1075394	0	True				
ANR	1078902	EqualityExpression	will_enable_integrity == SecMan :: SEC_FEAT_ACT_YES		1075394	0		==			
ANR	1078903	Identifier	will_enable_integrity		1075394	0					
ANR	1078904	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1078905	CompoundStatement		843:59:27164:27164	1075394	1					
ANR	1078906	IfStatement	if ( ! the_key )		1075394	0					
ANR	1078907	Condition	! the_key	5084:9:154203:154210	1075394	0	True				
ANR	1078908	UnaryOperationExpression	! the_key		1075394	0					
ANR	1078909	UnaryOperator	!		1075394	0					
ANR	1078910	Identifier	the_key		1075394	1					
ANR	1078911	CompoundStatement		845:19:27186:27186	1075394	1					
ANR	1078912	ExpressionStatement	result = FALSE	5086:6:154263:154277	1075394	0	True				
ANR	1078913	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078914	Identifier	result		1075394	0					
ANR	1078915	Identifier	FALSE		1075394	1					
ANR	1078916	GotoStatement	goto finalize ;	5087:6:154285:154298	1075394	1	True				
ANR	1078917	Identifier	finalize		1075394	0					
ANR	1078918	ExpressionStatement	sock -> decode ( )	5090:5:154313:154327	1075394	1	True				
ANR	1078919	CallExpression	sock -> decode ( )		1075394	0					
ANR	1078920	Callee	sock -> decode		1075394	0					
ANR	1078921	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1078922	Identifier	sock		1075394	0					
ANR	1078923	Identifier	decode		1075394	1					
ANR	1078924	ArgumentList			1075394	1					
ANR	1078925	IfStatement	"if ( ! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key ) )"		1075394	2					
ANR	1078926	Condition	"! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"	5091:9:154338:154378	1075394	0	True				
ANR	1078927	UnaryOperationExpression	"! sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"		1075394	0					
ANR	1078928	UnaryOperator	!		1075394	0					
ANR	1078929	CallExpression	"sock -> set_MD_mode ( MD_ALWAYS_ON , the_key )"		1075394	1					
ANR	1078930	Callee	sock -> set_MD_mode		1075394	0					
ANR	1078931	PtrMemberAccess	sock -> set_MD_mode		1075394	0					
ANR	1078932	Identifier	sock		1075394	0					
ANR	1078933	Identifier	set_MD_mode		1075394	1					
ANR	1078934	ArgumentList	MD_ALWAYS_ON		1075394	1					
ANR	1078935	Argument	MD_ALWAYS_ON		1075394	0					
ANR	1078936	Identifier	MD_ALWAYS_ON		1075394	0					
ANR	1078937	Argument	the_key		1075394	1					
ANR	1078938	Identifier	the_key		1075394	0					
ANR	1078939	CompoundStatement		852:52:27354:27354	1075394	1					
ANR	1078940	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"" , sock -> peer_description ( ) )"	5092:6:154389:154521	1075394	0	True				
ANR	1078941	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1078942	Callee	dprintf		1075394	0					
ANR	1078943	Identifier	dprintf		1075394	0					
ANR	1078944	ArgumentList	D_ALWAYS		1075394	1					
ANR	1078945	Argument	D_ALWAYS		1075394	0					
ANR	1078946	Identifier	D_ALWAYS		1075394	0					
ANR	1078947	Argument	"""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"""		1075394	1					
ANR	1078948	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on message authenticator, failing request from %s.\\n"""		1075394	0					
ANR	1078949	Argument	sock -> peer_description ( )		1075394	2					
ANR	1078950	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1078951	Callee	sock -> peer_description		1075394	0					
ANR	1078952	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1078953	Identifier	sock		1075394	0					
ANR	1078954	Identifier	peer_description		1075394	1					
ANR	1078955	ArgumentList			1075394	1					
ANR	1078956	ExpressionStatement	result = FALSE	5093:6:154529:154543	1075394	1	True				
ANR	1078957	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1078958	Identifier	result		1075394	0					
ANR	1078959	Identifier	FALSE		1075394	1					
ANR	1078960	GotoStatement	goto finalize ;	5094:6:154551:154564	1075394	2	True				
ANR	1078961	Identifier	finalize		1075394	0					
ANR	1078962	ElseStatement	else		1075394	0					
ANR	1078963	CompoundStatement		856:12:27551:27551	1075394	0					
ANR	1078964	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , the_sid )"	5096:6:154586:154683	1075394	0	True				
ANR	1078965	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"" , the_sid )"		1075394	0					
ANR	1078966	Callee	dprintf		1075394	0					
ANR	1078967	Identifier	dprintf		1075394	0					
ANR	1078968	ArgumentList	D_SECURITY		1075394	1					
ANR	1078969	Argument	D_SECURITY		1075394	0					
ANR	1078970	Identifier	D_SECURITY		1075394	0					
ANR	1078971	Argument	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		1075394	1					
ANR	1078972	PrimaryExpression	"""DC_AUTHENTICATE: message authenticator enabled with key id %s.\\n"""		1075394	0					
ANR	1078973	Argument	the_sid		1075394	2					
ANR	1078974	Identifier	the_sid		1075394	0					
ANR	1078975	ExpressionStatement	"sec_man -> key_printf ( D_SECURITY , the_key )"	5097:6:154691:154732	1075394	1	True				
ANR	1078976	CallExpression	"sec_man -> key_printf ( D_SECURITY , the_key )"		1075394	0					
ANR	1078977	Callee	sec_man -> key_printf		1075394	0					
ANR	1078978	PtrMemberAccess	sec_man -> key_printf		1075394	0					
ANR	1078979	Identifier	sec_man		1075394	0					
ANR	1078980	Identifier	key_printf		1075394	1					
ANR	1078981	ArgumentList	D_SECURITY		1075394	1					
ANR	1078982	Argument	D_SECURITY		1075394	0					
ANR	1078983	Identifier	D_SECURITY		1075394	0					
ANR	1078984	Argument	the_key		1075394	1					
ANR	1078985	Identifier	the_key		1075394	0					
ANR	1078986	ElseStatement	else		1075394	0					
ANR	1078987	CompoundStatement		860:11:27725:27725	1075394	0					
ANR	1078988	ExpressionStatement	"sock -> set_MD_mode ( MD_OFF , the_key )"	5100:5:154759:154793	1075394	0	True				
ANR	1078989	CallExpression	"sock -> set_MD_mode ( MD_OFF , the_key )"		1075394	0					
ANR	1078990	Callee	sock -> set_MD_mode		1075394	0					
ANR	1078991	PtrMemberAccess	sock -> set_MD_mode		1075394	0					
ANR	1078992	Identifier	sock		1075394	0					
ANR	1078993	Identifier	set_MD_mode		1075394	1					
ANR	1078994	ArgumentList	MD_OFF		1075394	1					
ANR	1078995	Argument	MD_OFF		1075394	0					
ANR	1078996	Identifier	MD_OFF		1075394	0					
ANR	1078997	Argument	the_key		1075394	1					
ANR	1078998	Identifier	the_key		1075394	0					
ANR	1078999	IfStatement	if ( will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES )		1075394	6					
ANR	1079000	Condition	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES	5104:8:154811:154860	1075394	0	True				
ANR	1079001	EqualityExpression	will_enable_encryption == SecMan :: SEC_FEAT_ACT_YES		1075394	0		==			
ANR	1079002	Identifier	will_enable_encryption		1075394	0					
ANR	1079003	Identifier	SecMan :: SEC_FEAT_ACT_YES		1075394	1					
ANR	1079004	CompoundStatement		865:60:27836:27836	1075394	1					
ANR	1079005	IfStatement	if ( ! the_key )		1075394	0					
ANR	1079006	Condition	! the_key	5106:9:154875:154882	1075394	0	True				
ANR	1079007	UnaryOperationExpression	! the_key		1075394	0					
ANR	1079008	UnaryOperator	!		1075394	0					
ANR	1079009	Identifier	the_key		1075394	1					
ANR	1079010	CompoundStatement		867:19:27858:27858	1075394	1					
ANR	1079011	ExpressionStatement	result = FALSE	5108:6:154935:154949	1075394	0	True				
ANR	1079012	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1079013	Identifier	result		1075394	0					
ANR	1079014	Identifier	FALSE		1075394	1					
ANR	1079015	GotoStatement	goto finalize ;	5109:6:154957:154970	1075394	1	True				
ANR	1079016	Identifier	finalize		1075394	0					
ANR	1079017	ExpressionStatement	sock -> decode ( )	5112:5:154985:154999	1075394	1	True				
ANR	1079018	CallExpression	sock -> decode ( )		1075394	0					
ANR	1079019	Callee	sock -> decode		1075394	0					
ANR	1079020	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1079021	Identifier	sock		1075394	0					
ANR	1079022	Identifier	decode		1075394	1					
ANR	1079023	ArgumentList			1075394	1					
ANR	1079024	IfStatement	"if ( ! sock -> set_crypto_key ( true , the_key ) )"		1075394	2					
ANR	1079025	Condition	"! sock -> set_crypto_key ( true , the_key )"	5113:9:155010:155045	1075394	0	True				
ANR	1079026	UnaryOperationExpression	"! sock -> set_crypto_key ( true , the_key )"		1075394	0					
ANR	1079027	UnaryOperator	!		1075394	0					
ANR	1079028	CallExpression	"sock -> set_crypto_key ( true , the_key )"		1075394	1					
ANR	1079029	Callee	sock -> set_crypto_key		1075394	0					
ANR	1079030	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1079031	Identifier	sock		1075394	0					
ANR	1079032	Identifier	set_crypto_key		1075394	1					
ANR	1079033	ArgumentList	true		1075394	1					
ANR	1079034	Argument	true		1075394	0					
ANR	1079035	Identifier	true		1075394	0					
ANR	1079036	Argument	the_key		1075394	1					
ANR	1079037	Identifier	the_key		1075394	0					
ANR	1079038	CompoundStatement		874:48:28022:28022	1075394	1					
ANR	1079039	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"" , sock -> peer_description ( ) )"	5114:6:155057:155178	1075394	0	True				
ANR	1079040	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"" , sock -> peer_description ( ) )"		1075394	0					
ANR	1079041	Callee	dprintf		1075394	0					
ANR	1079042	Identifier	dprintf		1075394	0					
ANR	1079043	ArgumentList	D_ALWAYS		1075394	1					
ANR	1079044	Argument	D_ALWAYS		1075394	0					
ANR	1079045	Identifier	D_ALWAYS		1075394	0					
ANR	1079046	Argument	"""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"""		1075394	1					
ANR	1079047	PrimaryExpression	"""DC_AUTHENTICATE: unable to turn on encryption, failing request from %s.\\n"""		1075394	0					
ANR	1079048	Argument	sock -> peer_description ( )		1075394	2					
ANR	1079049	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1079050	Callee	sock -> peer_description		1075394	0					
ANR	1079051	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1079052	Identifier	sock		1075394	0					
ANR	1079053	Identifier	peer_description		1075394	1					
ANR	1079054	ArgumentList			1075394	1					
ANR	1079055	ExpressionStatement	result = FALSE	5115:6:155186:155200	1075394	1	True				
ANR	1079056	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1079057	Identifier	result		1075394	0					
ANR	1079058	Identifier	FALSE		1075394	1					
ANR	1079059	GotoStatement	goto finalize ;	5116:6:155208:155221	1075394	2	True				
ANR	1079060	Identifier	finalize		1075394	0					
ANR	1079061	ElseStatement	else		1075394	0					
ANR	1079062	CompoundStatement		878:12:28208:28208	1075394	0					
ANR	1079063	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled for session %s\\n"" , the_sid )"	5118:6:155243:155328	1075394	0	True				
ANR	1079064	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: encryption enabled for session %s\\n"" , the_sid )"		1075394	0					
ANR	1079065	Callee	dprintf		1075394	0					
ANR	1079066	Identifier	dprintf		1075394	0					
ANR	1079067	ArgumentList	D_SECURITY		1075394	1					
ANR	1079068	Argument	D_SECURITY		1075394	0					
ANR	1079069	Identifier	D_SECURITY		1075394	0					
ANR	1079070	Argument	"""DC_AUTHENTICATE: encryption enabled for session %s\\n"""		1075394	1					
ANR	1079071	PrimaryExpression	"""DC_AUTHENTICATE: encryption enabled for session %s\\n"""		1075394	0					
ANR	1079072	Argument	the_sid		1075394	2					
ANR	1079073	Identifier	the_sid		1075394	0					
ANR	1079074	ElseStatement	else		1075394	0					
ANR	1079075	CompoundStatement		881:11:28321:28321	1075394	0					
ANR	1079076	ExpressionStatement	"sock -> set_crypto_key ( false , the_key )"	5121:5:155355:155391	1075394	0	True				
ANR	1079077	CallExpression	"sock -> set_crypto_key ( false , the_key )"		1075394	0					
ANR	1079078	Callee	sock -> set_crypto_key		1075394	0					
ANR	1079079	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1079080	Identifier	sock		1075394	0					
ANR	1079081	Identifier	set_crypto_key		1075394	1					
ANR	1079082	ArgumentList	false		1075394	1					
ANR	1079083	Argument	false		1075394	0					
ANR	1079084	Identifier	false		1075394	0					
ANR	1079085	Argument	the_key		1075394	1					
ANR	1079086	Identifier	the_key		1075394	0					
ANR	1079087	IfStatement	if ( new_session )		1075394	7					
ANR	1079088	Condition	new_session	5125:8:155409:155419	1075394	0	True				
ANR	1079089	Identifier	new_session		1075394	0					
ANR	1079090	CompoundStatement		993:5:32748:32838	1075394	1					
ANR	1079091	ExpressionStatement	sock -> decode ( )	5127:5:155454:155468	1075394	0	True				
ANR	1079092	CallExpression	sock -> decode ( )		1075394	0					
ANR	1079093	Callee	sock -> decode		1075394	0					
ANR	1079094	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1079095	Identifier	sock		1075394	0					
ANR	1079096	Identifier	decode		1075394	1					
ANR	1079097	ArgumentList			1075394	1					
ANR	1079098	ExpressionStatement	sock -> end_of_message ( )	5128:5:155475:155497	1075394	1	True				
ANR	1079099	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1079100	Callee	sock -> end_of_message		1075394	0					
ANR	1079101	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1079102	Identifier	sock		1075394	0					
ANR	1079103	Identifier	end_of_message		1075394	1					
ANR	1079104	ArgumentList			1075394	1					
ANR	1079105	IdentifierDeclStatement	ClassAd pa_ad ;	5131:5:155537:155550	1075394	2	True				
ANR	1079106	IdentifierDecl	pa_ad		1075394	0					
ANR	1079107	IdentifierDeclType	ClassAd		1075394	0					
ANR	1079108	Identifier	pa_ad		1075394	1					
ANR	1079109	IdentifierDeclStatement	const char * fully_qualified_user = sock -> getFullyQualifiedUser ( ) ;	5134:5:155579:155643	1075394	3	True				
ANR	1079110	IdentifierDecl	* fully_qualified_user = sock -> getFullyQualifiedUser ( )		1075394	0					
ANR	1079111	IdentifierDeclType	const char *		1075394	0					
ANR	1079112	Identifier	fully_qualified_user		1075394	1					
ANR	1079113	AssignmentExpression	* fully_qualified_user = sock -> getFullyQualifiedUser ( )		1075394	2		=			
ANR	1079114	Identifier	fully_qualified_user		1075394	0					
ANR	1079115	CallExpression	sock -> getFullyQualifiedUser ( )		1075394	1					
ANR	1079116	Callee	sock -> getFullyQualifiedUser		1075394	0					
ANR	1079117	PtrMemberAccess	sock -> getFullyQualifiedUser		1075394	0					
ANR	1079118	Identifier	sock		1075394	0					
ANR	1079119	Identifier	getFullyQualifiedUser		1075394	1					
ANR	1079120	ArgumentList			1075394	1					
ANR	1079121	IfStatement	if ( fully_qualified_user )		1075394	4					
ANR	1079122	Condition	fully_qualified_user	5135:10:155655:155674	1075394	0	True				
ANR	1079123	Identifier	fully_qualified_user		1075394	0					
ANR	1079124	CompoundStatement		896:33:28651:28651	1075394	1					
ANR	1079125	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_USER , fully_qualified_user )"	5136:6:155686:155734	1075394	0	True				
ANR	1079126	CallExpression	"pa_ad . Assign ( ATTR_SEC_USER , fully_qualified_user )"		1075394	0					
ANR	1079127	Callee	pa_ad . Assign		1075394	0					
ANR	1079128	MemberAccess	pa_ad . Assign		1075394	0					
ANR	1079129	Identifier	pa_ad		1075394	0					
ANR	1079130	Identifier	Assign		1075394	1					
ANR	1079131	ArgumentList	ATTR_SEC_USER		1075394	1					
ANR	1079132	Argument	ATTR_SEC_USER		1075394	0					
ANR	1079133	Identifier	ATTR_SEC_USER		1075394	0					
ANR	1079134	Argument	fully_qualified_user		1075394	1					
ANR	1079135	Identifier	fully_qualified_user		1075394	0					
ANR	1079136	IfStatement	if ( sock -> triedAuthentication ( ) )		1075394	5					
ANR	1079137	Condition	sock -> triedAuthentication ( )	5139:9:155753:155779	1075394	0	True				
ANR	1079138	CallExpression	sock -> triedAuthentication ( )		1075394	0					
ANR	1079139	Callee	sock -> triedAuthentication		1075394	0					
ANR	1079140	PtrMemberAccess	sock -> triedAuthentication		1075394	0					
ANR	1079141	Identifier	sock		1075394	0					
ANR	1079142	Identifier	triedAuthentication		1075394	1					
ANR	1079143	ArgumentList			1075394	1					
ANR	1079144	CompoundStatement		912:6:29458:29499	1075394	1					
ANR	1079145	IdentifierDeclStatement	char * remote_version = NULL ;	5149:6:156375:156403	1075394	0	True				
ANR	1079146	IdentifierDecl	* remote_version = NULL		1075394	0					
ANR	1079147	IdentifierDeclType	char *		1075394	0					
ANR	1079148	Identifier	remote_version		1075394	1					
ANR	1079149	AssignmentExpression	* remote_version = NULL		1075394	2		=			
ANR	1079150	Identifier	NULL		1075394	0					
ANR	1079151	Identifier	NULL		1075394	1					
ANR	1079152	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"	5150:6:156411:156477	1075394	1	True				
ANR	1079153	CallExpression	"the_policy -> LookupString ( ATTR_SEC_REMOTE_VERSION , & remote_version )"		1075394	0					
ANR	1079154	Callee	the_policy -> LookupString		1075394	0					
ANR	1079155	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1079156	Identifier	the_policy		1075394	0					
ANR	1079157	Identifier	LookupString		1075394	1					
ANR	1079158	ArgumentList	ATTR_SEC_REMOTE_VERSION		1075394	1					
ANR	1079159	Argument	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1079160	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1079161	Argument	& remote_version		1075394	1					
ANR	1079162	UnaryOperationExpression	& remote_version		1075394	0					
ANR	1079163	UnaryOperator	&		1075394	0					
ANR	1079164	Identifier	remote_version		1075394	1					
ANR	1079165	IdentifierDeclStatement	CondorVersionInfo verinfo ( remote_version ) ;	5151:6:156485:156526	1075394	2	True				
ANR	1079166	IdentifierDecl	verinfo ( remote_version )		1075394	0					
ANR	1079167	IdentifierDeclType	CondorVersionInfo		1075394	0					
ANR	1079168	Identifier	verinfo		1075394	1					
ANR	1079169	Identifier	remote_version		1075394	2					
ANR	1079170	ExpressionStatement	free ( remote_version )	5152:6:156534:156554	1075394	3	True				
ANR	1079171	CallExpression	free ( remote_version )		1075394	0					
ANR	1079172	Callee	free		1075394	0					
ANR	1079173	Identifier	free		1075394	0					
ANR	1079174	ArgumentList	remote_version		1075394	1					
ANR	1079175	Argument	remote_version		1075394	0					
ANR	1079176	Identifier	remote_version		1075394	0					
ANR	1079177	IfStatement	"if ( verinfo . built_since_version ( 7 , 1 , 2 ) )"		1075394	4					
ANR	1079178	Condition	"verinfo . built_since_version ( 7 , 1 , 2 )"	5154:10:156567:156600	1075394	0	True				
ANR	1079179	CallExpression	"verinfo . built_since_version ( 7 , 1 , 2 )"		1075394	0					
ANR	1079180	Callee	verinfo . built_since_version		1075394	0					
ANR	1079181	MemberAccess	verinfo . built_since_version		1075394	0					
ANR	1079182	Identifier	verinfo		1075394	0					
ANR	1079183	Identifier	built_since_version		1075394	1					
ANR	1079184	ArgumentList	7		1075394	1					
ANR	1079185	Argument	7		1075394	0					
ANR	1079186	PrimaryExpression	7		1075394	0					
ANR	1079187	Argument	1		1075394	1					
ANR	1079188	PrimaryExpression	1		1075394	0					
ANR	1079189	Argument	2		1075394	2					
ANR	1079190	PrimaryExpression	2		1075394	0					
ANR	1079191	CompoundStatement		915:46:29576:29576	1075394	1					
ANR	1079192	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_TRIED_AUTHENTICATION , sock -> triedAuthentication ( ) )"	5155:7:156612:156683	1075394	0	True				
ANR	1079193	CallExpression	"pa_ad . Assign ( ATTR_SEC_TRIED_AUTHENTICATION , sock -> triedAuthentication ( ) )"		1075394	0					
ANR	1079194	Callee	pa_ad . Assign		1075394	0					
ANR	1079195	MemberAccess	pa_ad . Assign		1075394	0					
ANR	1079196	Identifier	pa_ad		1075394	0					
ANR	1079197	Identifier	Assign		1075394	1					
ANR	1079198	ArgumentList	ATTR_SEC_TRIED_AUTHENTICATION		1075394	1					
ANR	1079199	Argument	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1079200	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1079201	Argument	sock -> triedAuthentication ( )		1075394	1					
ANR	1079202	CallExpression	sock -> triedAuthentication ( )		1075394	0					
ANR	1079203	Callee	sock -> triedAuthentication		1075394	0					
ANR	1079204	PtrMemberAccess	sock -> triedAuthentication		1075394	0					
ANR	1079205	Identifier	sock		1075394	0					
ANR	1079206	Identifier	triedAuthentication		1075394	1					
ANR	1079207	ArgumentList			1075394	1					
ANR	1079208	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_TRIED_AUTHENTICATION )"	5161:5:156768:156848	1075394	6	True				
ANR	1079209	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_TRIED_AUTHENTICATION )"		1075394	0					
ANR	1079210	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079211	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079212	Identifier	sec_man		1075394	0					
ANR	1079213	Identifier	sec_copy_attribute		1075394	1					
ANR	1079214	ArgumentList	* the_policy		1075394	1					
ANR	1079215	Argument	* the_policy		1075394	0					
ANR	1079216	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079217	UnaryOperator	*		1075394	0					
ANR	1079218	Identifier	the_policy		1075394	1					
ANR	1079219	Argument	pa_ad		1075394	1					
ANR	1079220	Identifier	pa_ad		1075394	0					
ANR	1079221	Argument	ATTR_SEC_TRIED_AUTHENTICATION		1075394	2					
ANR	1079222	Identifier	ATTR_SEC_TRIED_AUTHENTICATION		1075394	0					
ANR	1079223	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_SID , the_sid )"	5164:5:156875:156910	1075394	7	True				
ANR	1079224	CallExpression	"pa_ad . Assign ( ATTR_SEC_SID , the_sid )"		1075394	0					
ANR	1079225	Callee	pa_ad . Assign		1075394	0					
ANR	1079226	MemberAccess	pa_ad . Assign		1075394	0					
ANR	1079227	Identifier	pa_ad		1075394	0					
ANR	1079228	Identifier	Assign		1075394	1					
ANR	1079229	ArgumentList	ATTR_SEC_SID		1075394	1					
ANR	1079230	Argument	ATTR_SEC_SID		1075394	0					
ANR	1079231	Identifier	ATTR_SEC_SID		1075394	0					
ANR	1079232	Argument	the_sid		1075394	1					
ANR	1079233	Identifier	the_sid		1075394	0					
ANR	1079234	ExpressionStatement	"pa_ad . Assign ( ATTR_SEC_VALID_COMMANDS , GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( ) )"	5167:5:156966:157081	1075394	8	True				
ANR	1079235	CallExpression	"pa_ad . Assign ( ATTR_SEC_VALID_COMMANDS , GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( ) )"		1075394	0					
ANR	1079236	Callee	pa_ad . Assign		1075394	0					
ANR	1079237	MemberAccess	pa_ad . Assign		1075394	0					
ANR	1079238	Identifier	pa_ad		1075394	0					
ANR	1079239	Identifier	Assign		1075394	1					
ANR	1079240	ArgumentList	ATTR_SEC_VALID_COMMANDS		1075394	1					
ANR	1079241	Argument	ATTR_SEC_VALID_COMMANDS		1075394	0					
ANR	1079242	Identifier	ATTR_SEC_VALID_COMMANDS		1075394	0					
ANR	1079243	Argument	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( )"		1075394	1					
ANR	1079244	CallExpression	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value ( )"		1075394	0					
ANR	1079245	Callee	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		1075394	0					
ANR	1079246	MemberAccess	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		1075394	0					
ANR	1079247	CallExpression	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) )"		1075394	0					
ANR	1079248	Callee	GetCommandsInAuthLevel		1075394	0					
ANR	1079249	Identifier	GetCommandsInAuthLevel		1075394	0					
ANR	1079250	ArgumentList	comTable [ cmd_index ] . perm		1075394	1					
ANR	1079251	Argument	comTable [ cmd_index ] . perm		1075394	0					
ANR	1079252	MemberAccess	comTable [ cmd_index ] . perm		1075394	0					
ANR	1079253	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1079254	Identifier	comTable		1075394	0					
ANR	1079255	Identifier	cmd_index		1075394	1					
ANR	1079256	Identifier	perm		1075394	1					
ANR	1079257	Argument	sock -> isMappedFQU ( )		1075394	1					
ANR	1079258	CallExpression	sock -> isMappedFQU ( )		1075394	0					
ANR	1079259	Callee	sock -> isMappedFQU		1075394	0					
ANR	1079260	PtrMemberAccess	sock -> isMappedFQU		1075394	0					
ANR	1079261	Identifier	sock		1075394	0					
ANR	1079262	Identifier	isMappedFQU		1075394	1					
ANR	1079263	ArgumentList			1075394	1					
ANR	1079264	Identifier	Value		1075394	1					
ANR	1079265	ArgumentList			1075394	1					
ANR	1079266	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SUBSYSTEM )"	5170:5:157160:157233	1075394	9	True				
ANR	1079267	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SUBSYSTEM )"		1075394	0					
ANR	1079268	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079269	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079270	Identifier	sec_man		1075394	0					
ANR	1079271	Identifier	sec_copy_attribute		1075394	1					
ANR	1079272	ArgumentList	* the_policy		1075394	1					
ANR	1079273	Argument	* the_policy		1075394	0					
ANR	1079274	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079275	UnaryOperator	*		1075394	0					
ANR	1079276	Identifier	the_policy		1075394	1					
ANR	1079277	Argument	auth_info		1075394	1					
ANR	1079278	Identifier	auth_info		1075394	0					
ANR	1079279	Argument	ATTR_SEC_SUBSYSTEM		1075394	2					
ANR	1079280	Identifier	ATTR_SEC_SUBSYSTEM		1075394	0					
ANR	1079281	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_COMMAND_SOCK )"	5171:5:157240:157323	1075394	10	True				
ANR	1079282	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_COMMAND_SOCK )"		1075394	0					
ANR	1079283	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079284	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079285	Identifier	sec_man		1075394	0					
ANR	1079286	Identifier	sec_copy_attribute		1075394	1					
ANR	1079287	ArgumentList	* the_policy		1075394	1					
ANR	1079288	Argument	* the_policy		1075394	0					
ANR	1079289	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079290	UnaryOperator	*		1075394	0					
ANR	1079291	Identifier	the_policy		1075394	1					
ANR	1079292	Argument	auth_info		1075394	1					
ANR	1079293	Identifier	auth_info		1075394	0					
ANR	1079294	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	2					
ANR	1079295	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1079296	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_PARENT_UNIQUE_ID )"	5172:5:157330:157410	1075394	11	True				
ANR	1079297	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_PARENT_UNIQUE_ID )"		1075394	0					
ANR	1079298	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079299	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079300	Identifier	sec_man		1075394	0					
ANR	1079301	Identifier	sec_copy_attribute		1075394	1					
ANR	1079302	ArgumentList	* the_policy		1075394	1					
ANR	1079303	Argument	* the_policy		1075394	0					
ANR	1079304	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079305	UnaryOperator	*		1075394	0					
ANR	1079306	Identifier	the_policy		1075394	1					
ANR	1079307	Argument	auth_info		1075394	1					
ANR	1079308	Identifier	auth_info		1075394	0					
ANR	1079309	Argument	ATTR_SEC_PARENT_UNIQUE_ID		1075394	2					
ANR	1079310	Identifier	ATTR_SEC_PARENT_UNIQUE_ID		1075394	0					
ANR	1079311	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_PID )"	5173:5:157417:157491	1075394	12	True				
ANR	1079312	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_SERVER_PID )"		1075394	0					
ANR	1079313	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079314	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079315	Identifier	sec_man		1075394	0					
ANR	1079316	Identifier	sec_copy_attribute		1075394	1					
ANR	1079317	ArgumentList	* the_policy		1075394	1					
ANR	1079318	Argument	* the_policy		1075394	0					
ANR	1079319	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079320	UnaryOperator	*		1075394	0					
ANR	1079321	Identifier	the_policy		1075394	1					
ANR	1079322	Argument	auth_info		1075394	1					
ANR	1079323	Identifier	auth_info		1075394	0					
ANR	1079324	Argument	ATTR_SEC_SERVER_PID		1075394	2					
ANR	1079325	Identifier	ATTR_SEC_SERVER_PID		1075394	0					
ANR	1079326	ExpressionStatement	the_policy -> Delete ( ATTR_SEC_REMOTE_VERSION )	5175:5:157574:157619	1075394	13	True				
ANR	1079327	CallExpression	the_policy -> Delete ( ATTR_SEC_REMOTE_VERSION )		1075394	0					
ANR	1079328	Callee	the_policy -> Delete		1075394	0					
ANR	1079329	PtrMemberAccess	the_policy -> Delete		1075394	0					
ANR	1079330	Identifier	the_policy		1075394	0					
ANR	1079331	Identifier	Delete		1075394	1					
ANR	1079332	ArgumentList	ATTR_SEC_REMOTE_VERSION		1075394	1					
ANR	1079333	Argument	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1079334	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1079335	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_REMOTE_VERSION )"	5176:5:157626:157704	1075394	14	True				
ANR	1079336	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , auth_info , ATTR_SEC_REMOTE_VERSION )"		1075394	0					
ANR	1079337	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079338	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079339	Identifier	sec_man		1075394	0					
ANR	1079340	Identifier	sec_copy_attribute		1075394	1					
ANR	1079341	ArgumentList	* the_policy		1075394	1					
ANR	1079342	Argument	* the_policy		1075394	0					
ANR	1079343	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079344	UnaryOperator	*		1075394	0					
ANR	1079345	Identifier	the_policy		1075394	1					
ANR	1079346	Argument	auth_info		1075394	1					
ANR	1079347	Identifier	auth_info		1075394	0					
ANR	1079348	Argument	ATTR_SEC_REMOTE_VERSION		1075394	2					
ANR	1079349	Identifier	ATTR_SEC_REMOTE_VERSION		1075394	0					
ANR	1079350	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_USER )"	5177:5:157711:157775	1075394	15	True				
ANR	1079351	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_USER )"		1075394	0					
ANR	1079352	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079353	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079354	Identifier	sec_man		1075394	0					
ANR	1079355	Identifier	sec_copy_attribute		1075394	1					
ANR	1079356	ArgumentList	* the_policy		1075394	1					
ANR	1079357	Argument	* the_policy		1075394	0					
ANR	1079358	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079359	UnaryOperator	*		1075394	0					
ANR	1079360	Identifier	the_policy		1075394	1					
ANR	1079361	Argument	pa_ad		1075394	1					
ANR	1079362	Identifier	pa_ad		1075394	0					
ANR	1079363	Argument	ATTR_SEC_USER		1075394	2					
ANR	1079364	Identifier	ATTR_SEC_USER		1075394	0					
ANR	1079365	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_SID )"	5178:5:157782:157845	1075394	16	True				
ANR	1079366	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_SID )"		1075394	0					
ANR	1079367	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079368	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079369	Identifier	sec_man		1075394	0					
ANR	1079370	Identifier	sec_copy_attribute		1075394	1					
ANR	1079371	ArgumentList	* the_policy		1075394	1					
ANR	1079372	Argument	* the_policy		1075394	0					
ANR	1079373	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079374	UnaryOperator	*		1075394	0					
ANR	1079375	Identifier	the_policy		1075394	1					
ANR	1079376	Argument	pa_ad		1075394	1					
ANR	1079377	Identifier	pa_ad		1075394	0					
ANR	1079378	Argument	ATTR_SEC_SID		1075394	2					
ANR	1079379	Identifier	ATTR_SEC_SID		1075394	0					
ANR	1079380	ExpressionStatement	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_VALID_COMMANDS )"	5179:5:157852:157926	1075394	17	True				
ANR	1079381	CallExpression	"sec_man -> sec_copy_attribute ( * the_policy , pa_ad , ATTR_SEC_VALID_COMMANDS )"		1075394	0					
ANR	1079382	Callee	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079383	PtrMemberAccess	sec_man -> sec_copy_attribute		1075394	0					
ANR	1079384	Identifier	sec_man		1075394	0					
ANR	1079385	Identifier	sec_copy_attribute		1075394	1					
ANR	1079386	ArgumentList	* the_policy		1075394	1					
ANR	1079387	Argument	* the_policy		1075394	0					
ANR	1079388	UnaryOperationExpression	* the_policy		1075394	0					
ANR	1079389	UnaryOperator	*		1075394	0					
ANR	1079390	Identifier	the_policy		1075394	1					
ANR	1079391	Argument	pa_ad		1075394	1					
ANR	1079392	Identifier	pa_ad		1075394	0					
ANR	1079393	Argument	ATTR_SEC_VALID_COMMANDS		1075394	2					
ANR	1079394	Identifier	ATTR_SEC_VALID_COMMANDS		1075394	0					
ANR	1079395	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	18					
ANR	1079396	Condition	DebugFlags & D_FULLDEBUG	5181:9:157938:157961	1075394	0	True				
ANR	1079397	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1079398	Identifier	DebugFlags		1075394	0					
ANR	1079399	Identifier	D_FULLDEBUG		1075394	1					
ANR	1079400	CompoundStatement		942:35:30937:30937	1075394	1					
ANR	1079401	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sending session ad:\\n"" )"	5182:6:157972:158034	1075394	0	True				
ANR	1079402	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sending session ad:\\n"" )"		1075394	0					
ANR	1079403	Callee	dprintf		1075394	0					
ANR	1079404	Identifier	dprintf		1075394	0					
ANR	1079405	ArgumentList	D_SECURITY		1075394	1					
ANR	1079406	Argument	D_SECURITY		1075394	0					
ANR	1079407	Identifier	D_SECURITY		1075394	0					
ANR	1079408	Argument	"""DC_AUTHENTICATE: sending session ad:\\n"""		1075394	1					
ANR	1079409	PrimaryExpression	"""DC_AUTHENTICATE: sending session ad:\\n"""		1075394	0					
ANR	1079410	ExpressionStatement	pa_ad . dPrint ( D_SECURITY )	5183:6:158042:158068	1075394	1	True				
ANR	1079411	CallExpression	pa_ad . dPrint ( D_SECURITY )		1075394	0					
ANR	1079412	Callee	pa_ad . dPrint		1075394	0					
ANR	1079413	MemberAccess	pa_ad . dPrint		1075394	0					
ANR	1079414	Identifier	pa_ad		1075394	0					
ANR	1079415	Identifier	dPrint		1075394	1					
ANR	1079416	ArgumentList	D_SECURITY		1075394	1					
ANR	1079417	Argument	D_SECURITY		1075394	0					
ANR	1079418	Identifier	D_SECURITY		1075394	0					
ANR	1079419	ExpressionStatement	sock -> encode ( )	5186:5:158083:158097	1075394	19	True				
ANR	1079420	CallExpression	sock -> encode ( )		1075394	0					
ANR	1079421	Callee	sock -> encode		1075394	0					
ANR	1079422	PtrMemberAccess	sock -> encode		1075394	0					
ANR	1079423	Identifier	sock		1075394	0					
ANR	1079424	Identifier	encode		1075394	1					
ANR	1079425	ArgumentList			1075394	1					
ANR	1079426	IfStatement	if ( ! pa_ad . put ( * sock ) || ! sock -> end_of_message ( ) )		1075394	20					
ANR	1079427	Condition	! pa_ad . put ( * sock ) || ! sock -> end_of_message ( )	5187:9:158108:158159	1075394	0	True				
ANR	1079428	OrExpression	! pa_ad . put ( * sock ) || ! sock -> end_of_message ( )		1075394	0		||			
ANR	1079429	UnaryOperationExpression	! pa_ad . put ( * sock )		1075394	0					
ANR	1079430	UnaryOperator	!		1075394	0					
ANR	1079431	CallExpression	pa_ad . put ( * sock )		1075394	1					
ANR	1079432	Callee	pa_ad . put		1075394	0					
ANR	1079433	MemberAccess	pa_ad . put		1075394	0					
ANR	1079434	Identifier	pa_ad		1075394	0					
ANR	1079435	Identifier	put		1075394	1					
ANR	1079436	ArgumentList	* sock		1075394	1					
ANR	1079437	Argument	* sock		1075394	0					
ANR	1079438	UnaryOperationExpression	* sock		1075394	0					
ANR	1079439	UnaryOperator	*		1075394	0					
ANR	1079440	Identifier	sock		1075394	1					
ANR	1079441	UnaryOperationExpression	! sock -> end_of_message ( )		1075394	1					
ANR	1079442	UnaryOperator	!		1075394	0					
ANR	1079443	CallExpression	sock -> end_of_message ( )		1075394	1					
ANR	1079444	Callee	sock -> end_of_message		1075394	0					
ANR	1079445	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1079446	Identifier	sock		1075394	0					
ANR	1079447	Identifier	end_of_message		1075394	1					
ANR	1079448	ArgumentList			1075394	1					
ANR	1079449	CompoundStatement		949:33:31136:31136	1075394	1					
ANR	1079450	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"" , the_sid , sock -> peer_description ( ) )"	5189:6:158171:158284	1075394	0	True				
ANR	1079451	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"" , the_sid , sock -> peer_description ( ) )"		1075394	0					
ANR	1079452	Callee	dprintf		1075394	0					
ANR	1079453	Identifier	dprintf		1075394	0					
ANR	1079454	ArgumentList	D_ALWAYS		1075394	1					
ANR	1079455	Argument	D_ALWAYS		1075394	0					
ANR	1079456	Identifier	D_ALWAYS		1075394	0					
ANR	1079457	Argument	"""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"""		1075394	1					
ANR	1079458	PrimaryExpression	"""DC_AUTHENTICATE: unable to send session %s info to %s!\\n"""		1075394	0					
ANR	1079459	Argument	the_sid		1075394	2					
ANR	1079460	Identifier	the_sid		1075394	0					
ANR	1079461	Argument	sock -> peer_description ( )		1075394	3					
ANR	1079462	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1079463	Callee	sock -> peer_description		1075394	0					
ANR	1079464	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1079465	Identifier	sock		1075394	0					
ANR	1079466	Identifier	peer_description		1075394	1					
ANR	1079467	ArgumentList			1075394	1					
ANR	1079468	ExpressionStatement	result = FALSE	5190:6:158292:158306	1075394	1	True				
ANR	1079469	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1079470	Identifier	result		1075394	0					
ANR	1079471	Identifier	FALSE		1075394	1					
ANR	1079472	GotoStatement	goto finalize ;	5191:6:158314:158327	1075394	2	True				
ANR	1079473	Identifier	finalize		1075394	0					
ANR	1079474	ElseStatement	else		1075394	0					
ANR	1079475	CompoundStatement		953:12:31314:31314	1075394	0					
ANR	1079476	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	0					
ANR	1079477	Condition	DebugFlags & D_FULLDEBUG	5193:10:158353:158376	1075394	0	True				
ANR	1079478	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1079479	Identifier	DebugFlags		1075394	0					
ANR	1079480	Identifier	D_FULLDEBUG		1075394	1					
ANR	1079481	CompoundStatement		954:36:31352:31352	1075394	1					
ANR	1079482	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sent session %s info!\\n"" , the_sid )"	5194:7:158388:158461	1075394	0	True				
ANR	1079483	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: sent session %s info!\\n"" , the_sid )"		1075394	0					
ANR	1079484	Callee	dprintf		1075394	0					
ANR	1079485	Identifier	dprintf		1075394	0					
ANR	1079486	ArgumentList	D_SECURITY		1075394	1					
ANR	1079487	Argument	D_SECURITY		1075394	0					
ANR	1079488	Identifier	D_SECURITY		1075394	0					
ANR	1079489	Argument	"""DC_AUTHENTICATE: sent session %s info!\\n"""		1075394	1					
ANR	1079490	PrimaryExpression	"""DC_AUTHENTICATE: sent session %s info!\\n"""		1075394	0					
ANR	1079491	Argument	the_sid		1075394	2					
ANR	1079492	Identifier	the_sid		1075394	0					
ANR	1079493	IdentifierDeclStatement	char * dur = NULL ;	5199:5:158521:158537	1075394	21	True				
ANR	1079494	IdentifierDecl	* dur = NULL		1075394	0					
ANR	1079495	IdentifierDeclType	char *		1075394	0					
ANR	1079496	Identifier	dur		1075394	1					
ANR	1079497	AssignmentExpression	* dur = NULL		1075394	2		=			
ANR	1079498	Identifier	NULL		1075394	0					
ANR	1079499	Identifier	NULL		1075394	1					
ANR	1079500	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_SESSION_DURATION , & dur )"	5200:5:158544:158601	1075394	22	True				
ANR	1079501	CallExpression	"the_policy -> LookupString ( ATTR_SEC_SESSION_DURATION , & dur )"		1075394	0					
ANR	1079502	Callee	the_policy -> LookupString		1075394	0					
ANR	1079503	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1079504	Identifier	the_policy		1075394	0					
ANR	1079505	Identifier	LookupString		1075394	1					
ANR	1079506	ArgumentList	ATTR_SEC_SESSION_DURATION		1075394	1					
ANR	1079507	Argument	ATTR_SEC_SESSION_DURATION		1075394	0					
ANR	1079508	Identifier	ATTR_SEC_SESSION_DURATION		1075394	0					
ANR	1079509	Argument	& dur		1075394	1					
ANR	1079510	UnaryOperationExpression	& dur		1075394	0					
ANR	1079511	UnaryOperator	&		1075394	0					
ANR	1079512	Identifier	dur		1075394	1					
ANR	1079513	IdentifierDeclStatement	char * return_addr = NULL ;	5202:5:158609:158633	1075394	23	True				
ANR	1079514	IdentifierDecl	* return_addr = NULL		1075394	0					
ANR	1079515	IdentifierDeclType	char *		1075394	0					
ANR	1079516	Identifier	return_addr		1075394	1					
ANR	1079517	AssignmentExpression	* return_addr = NULL		1075394	2		=			
ANR	1079518	Identifier	NULL		1075394	0					
ANR	1079519	Identifier	NULL		1075394	1					
ANR	1079520	ExpressionStatement	"the_policy -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"	5203:5:158640:158708	1075394	24	True				
ANR	1079521	CallExpression	"the_policy -> LookupString ( ATTR_SEC_SERVER_COMMAND_SOCK , & return_addr )"		1075394	0					
ANR	1079522	Callee	the_policy -> LookupString		1075394	0					
ANR	1079523	PtrMemberAccess	the_policy -> LookupString		1075394	0					
ANR	1079524	Identifier	the_policy		1075394	0					
ANR	1079525	Identifier	LookupString		1075394	1					
ANR	1079526	ArgumentList	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	1					
ANR	1079527	Argument	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1079528	Identifier	ATTR_SEC_SERVER_COMMAND_SOCK		1075394	0					
ANR	1079529	Argument	& return_addr		1075394	1					
ANR	1079530	UnaryOperationExpression	& return_addr		1075394	0					
ANR	1079531	UnaryOperator	&		1075394	0					
ANR	1079532	Identifier	return_addr		1075394	1					
ANR	1079533	IdentifierDeclStatement	"int slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 ) ;"	5209:5:158967:159024	1075394	25	True				
ANR	1079534	IdentifierDecl	"slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		1075394	0					
ANR	1079535	IdentifierDeclType	int		1075394	0					
ANR	1079536	Identifier	slop		1075394	1					
ANR	1079537	AssignmentExpression	"slop = param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		1075394	2		=			
ANR	1079538	Identifier	slop		1075394	0					
ANR	1079539	CallExpression	"param_integer ( ""SEC_SESSION_DURATION_SLOP"" , 20 )"		1075394	1					
ANR	1079540	Callee	param_integer		1075394	0					
ANR	1079541	Identifier	param_integer		1075394	0					
ANR	1079542	ArgumentList	"""SEC_SESSION_DURATION_SLOP"""		1075394	1					
ANR	1079543	Argument	"""SEC_SESSION_DURATION_SLOP"""		1075394	0					
ANR	1079544	PrimaryExpression	"""SEC_SESSION_DURATION_SLOP"""		1075394	0					
ANR	1079545	Argument	20		1075394	1					
ANR	1079546	PrimaryExpression	20		1075394	0					
ANR	1079547	IdentifierDeclStatement	int durint = atoi ( dur ) + slop ;	5210:5:159031:159060	1075394	26	True				
ANR	1079548	IdentifierDecl	durint = atoi ( dur ) + slop		1075394	0					
ANR	1079549	IdentifierDeclType	int		1075394	0					
ANR	1079550	Identifier	durint		1075394	1					
ANR	1079551	AssignmentExpression	durint = atoi ( dur ) + slop		1075394	2		=			
ANR	1079552	Identifier	durint		1075394	0					
ANR	1079553	AdditiveExpression	atoi ( dur ) + slop		1075394	1		+			
ANR	1079554	CallExpression	atoi ( dur )		1075394	0					
ANR	1079555	Callee	atoi		1075394	0					
ANR	1079556	Identifier	atoi		1075394	0					
ANR	1079557	ArgumentList	dur		1075394	1					
ANR	1079558	Argument	dur		1075394	0					
ANR	1079559	Identifier	dur		1075394	0					
ANR	1079560	Identifier	slop		1075394	1					
ANR	1079561	IdentifierDeclStatement	time_t now = time ( 0 ) ;	5211:5:159067:159087	1075394	27	True				
ANR	1079562	IdentifierDecl	now = time ( 0 )		1075394	0					
ANR	1079563	IdentifierDeclType	time_t		1075394	0					
ANR	1079564	Identifier	now		1075394	1					
ANR	1079565	AssignmentExpression	now = time ( 0 )		1075394	2		=			
ANR	1079566	Identifier	now		1075394	0					
ANR	1079567	CallExpression	time ( 0 )		1075394	1					
ANR	1079568	Callee	time		1075394	0					
ANR	1079569	Identifier	time		1075394	0					
ANR	1079570	ArgumentList	0		1075394	1					
ANR	1079571	Argument	0		1075394	0					
ANR	1079572	PrimaryExpression	0		1075394	0					
ANR	1079573	IdentifierDeclStatement	int expiration_time = now + durint ;	5212:5:159094:159128	1075394	28	True				
ANR	1079574	IdentifierDecl	expiration_time = now + durint		1075394	0					
ANR	1079575	IdentifierDeclType	int		1075394	0					
ANR	1079576	Identifier	expiration_time		1075394	1					
ANR	1079577	AssignmentExpression	expiration_time = now + durint		1075394	2		=			
ANR	1079578	Identifier	expiration_time		1075394	0					
ANR	1079579	AdditiveExpression	now + durint		1075394	1		+			
ANR	1079580	Identifier	now		1075394	0					
ANR	1079581	Identifier	durint		1075394	1					
ANR	1079582	IdentifierDeclStatement	int session_lease = 0 ;	5215:5:159193:159214	1075394	29	True				
ANR	1079583	IdentifierDecl	session_lease = 0		1075394	0					
ANR	1079584	IdentifierDeclType	int		1075394	0					
ANR	1079585	Identifier	session_lease		1075394	1					
ANR	1079586	AssignmentExpression	session_lease = 0		1075394	2		=			
ANR	1079587	Identifier	session_lease		1075394	0					
ANR	1079588	PrimaryExpression	0		1075394	1					
ANR	1079589	ExpressionStatement	"the_policy -> LookupInteger ( ATTR_SEC_SESSION_LEASE , session_lease )"	5216:5:159221:159285	1075394	30	True				
ANR	1079590	CallExpression	"the_policy -> LookupInteger ( ATTR_SEC_SESSION_LEASE , session_lease )"		1075394	0					
ANR	1079591	Callee	the_policy -> LookupInteger		1075394	0					
ANR	1079592	PtrMemberAccess	the_policy -> LookupInteger		1075394	0					
ANR	1079593	Identifier	the_policy		1075394	0					
ANR	1079594	Identifier	LookupInteger		1075394	1					
ANR	1079595	ArgumentList	ATTR_SEC_SESSION_LEASE		1075394	1					
ANR	1079596	Argument	ATTR_SEC_SESSION_LEASE		1075394	0					
ANR	1079597	Identifier	ATTR_SEC_SESSION_LEASE		1075394	0					
ANR	1079598	Argument	session_lease		1075394	1					
ANR	1079599	Identifier	session_lease		1075394	0					
ANR	1079600	IfStatement	if ( session_lease )		1075394	31					
ANR	1079601	Condition	session_lease	5217:9:159296:159308	1075394	0	True				
ANR	1079602	Identifier	session_lease		1075394	0					
ANR	1079603	CompoundStatement		978:25:32285:32285	1075394	1					
ANR	1079604	ExpressionStatement	session_lease += slop	5221:6:159453:159474	1075394	0	True				
ANR	1079605	AssignmentExpression	session_lease += slop		1075394	0		+=			
ANR	1079606	Identifier	session_lease		1075394	0					
ANR	1079607	Identifier	slop		1075394	1					
ANR	1079608	IdentifierDeclStatement	"KeyCacheEntry tmp_key ( the_sid , NULL , the_key , the_policy , expiration_time , session_lease ) ;"	5232:5:159775:159865	1075394	32	True				
ANR	1079609	IdentifierDecl	"tmp_key ( the_sid , NULL , the_key , the_policy , expiration_time , session_lease )"		1075394	0					
ANR	1079610	IdentifierDeclType	KeyCacheEntry		1075394	0					
ANR	1079611	Identifier	tmp_key		1075394	1					
ANR	1079612	Expression	"the_sid , NULL , the_key , the_policy , expiration_time , session_lease"		1075394	2					
ANR	1079613	Identifier	the_sid		1075394	0					
ANR	1079614	Expression	"NULL , the_key , the_policy , expiration_time , session_lease"		1075394	1					
ANR	1079615	Identifier	NULL		1075394	0					
ANR	1079616	Expression	"the_key , the_policy , expiration_time , session_lease"		1075394	1					
ANR	1079617	Identifier	the_key		1075394	0					
ANR	1079618	Expression	"the_policy , expiration_time , session_lease"		1075394	1					
ANR	1079619	Identifier	the_policy		1075394	0					
ANR	1079620	Expression	"expiration_time , session_lease"		1075394	1					
ANR	1079621	Identifier	expiration_time		1075394	0					
ANR	1079622	Identifier	session_lease		1075394	1					
ANR	1079623	ExpressionStatement	sec_man -> session_cache -> insert ( tmp_key )	5233:5:159872:159911	1075394	33	True				
ANR	1079624	CallExpression	sec_man -> session_cache -> insert ( tmp_key )		1075394	0					
ANR	1079625	Callee	sec_man -> session_cache -> insert		1075394	0					
ANR	1079626	PtrMemberAccess	sec_man -> session_cache -> insert		1075394	0					
ANR	1079627	PtrMemberAccess	sec_man -> session_cache		1075394	0					
ANR	1079628	Identifier	sec_man		1075394	0					
ANR	1079629	Identifier	session_cache		1075394	1					
ANR	1079630	Identifier	insert		1075394	1					
ANR	1079631	ArgumentList	tmp_key		1075394	1					
ANR	1079632	Argument	tmp_key		1075394	0					
ANR	1079633	Identifier	tmp_key		1075394	0					
ANR	1079634	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"" , the_sid , durint , session_lease , return_addr ? return_addr : ""unknown"" )"	5234:5:159918:160122	1075394	34	True				
ANR	1079635	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"" , the_sid , durint , session_lease , return_addr ? return_addr : ""unknown"" )"		1075394	0					
ANR	1079636	Callee	dprintf		1075394	0					
ANR	1079637	Identifier	dprintf		1075394	0					
ANR	1079638	ArgumentList	D_SECURITY		1075394	1					
ANR	1079639	Argument	D_SECURITY		1075394	0					
ANR	1079640	Identifier	D_SECURITY		1075394	0					
ANR	1079641	Argument	"""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"""		1075394	1					
ANR	1079642	PrimaryExpression	"""DC_AUTHENTICATE: added incoming session id %s to cache for %i seconds (lease is %ds, return address is %s).\\n"""		1075394	0					
ANR	1079643	Argument	the_sid		1075394	2					
ANR	1079644	Identifier	the_sid		1075394	0					
ANR	1079645	Argument	durint		1075394	3					
ANR	1079646	Identifier	durint		1075394	0					
ANR	1079647	Argument	session_lease		1075394	4					
ANR	1079648	Identifier	session_lease		1075394	0					
ANR	1079649	Argument	"return_addr ? return_addr : ""unknown"""		1075394	5					
ANR	1079650	ConditionalExpression	"return_addr ? return_addr : ""unknown"""		1075394	0					
ANR	1079651	Condition	return_addr		1075394	0					
ANR	1079652	Identifier	return_addr		1075394	0					
ANR	1079653	Identifier	return_addr		1075394	1					
ANR	1079654	PrimaryExpression	"""unknown"""		1075394	2					
ANR	1079655	IfStatement	if ( DebugFlags & D_FULLDEBUG )		1075394	35					
ANR	1079656	Condition	DebugFlags & D_FULLDEBUG	5235:9:160133:160156	1075394	0	True				
ANR	1079657	BitAndExpression	DebugFlags & D_FULLDEBUG		1075394	0		&			
ANR	1079658	Identifier	DebugFlags		1075394	0					
ANR	1079659	Identifier	D_FULLDEBUG		1075394	1					
ANR	1079660	CompoundStatement		996:35:33132:33132	1075394	1					
ANR	1079661	ExpressionStatement	the_policy -> dPrint ( D_SECURITY )	5236:6:160167:160197	1075394	0	True				
ANR	1079662	CallExpression	the_policy -> dPrint ( D_SECURITY )		1075394	0					
ANR	1079663	Callee	the_policy -> dPrint		1075394	0					
ANR	1079664	PtrMemberAccess	the_policy -> dPrint		1075394	0					
ANR	1079665	Identifier	the_policy		1075394	0					
ANR	1079666	Identifier	dPrint		1075394	1					
ANR	1079667	ArgumentList	D_SECURITY		1075394	1					
ANR	1079668	Argument	D_SECURITY		1075394	0					
ANR	1079669	Identifier	D_SECURITY		1075394	0					
ANR	1079670	ExpressionStatement	free ( dur )	5239:5:160212:160223	1075394	36	True				
ANR	1079671	CallExpression	free ( dur )		1075394	0					
ANR	1079672	Callee	free		1075394	0					
ANR	1079673	Identifier	free		1075394	0					
ANR	1079674	ArgumentList	dur		1075394	1					
ANR	1079675	Argument	dur		1075394	0					
ANR	1079676	Identifier	dur		1075394	0					
ANR	1079677	ExpressionStatement	dur = NULL	5240:5:160230:160240	1075394	37	True				
ANR	1079678	AssignmentExpression	dur = NULL		1075394	0		=			
ANR	1079679	Identifier	dur		1075394	0					
ANR	1079680	Identifier	NULL		1075394	1					
ANR	1079681	ExpressionStatement	free ( return_addr )	5241:5:160247:160266	1075394	38	True				
ANR	1079682	CallExpression	free ( return_addr )		1075394	0					
ANR	1079683	Callee	free		1075394	0					
ANR	1079684	Identifier	free		1075394	0					
ANR	1079685	ArgumentList	return_addr		1075394	1					
ANR	1079686	Argument	return_addr		1075394	0					
ANR	1079687	Identifier	return_addr		1075394	0					
ANR	1079688	ExpressionStatement	return_addr = NULL	5242:5:160273:160291	1075394	39	True				
ANR	1079689	AssignmentExpression	return_addr = NULL		1075394	0		=			
ANR	1079690	Identifier	return_addr		1075394	0					
ANR	1079691	Identifier	NULL		1075394	1					
ANR	1079692	IfStatement	if ( real_cmd == DC_AUTHENTICATE )		1075394	22					
ANR	1079693	Condition	real_cmd == DC_AUTHENTICATE	5247:6:160315:160341	1075394	0	True				
ANR	1079694	EqualityExpression	real_cmd == DC_AUTHENTICATE		1075394	0		==			
ANR	1079695	Identifier	real_cmd		1075394	0					
ANR	1079696	Identifier	DC_AUTHENTICATE		1075394	1					
ANR	1079697	CompoundStatement		1008:35:33317:33317	1075394	1					
ANR	1079698	ExpressionStatement	result = TRUE	5248:3:160349:160362	1075394	0	True				
ANR	1079699	AssignmentExpression	result = TRUE		1075394	0		=			
ANR	1079700	Identifier	result		1075394	0					
ANR	1079701	Identifier	TRUE		1075394	1					
ANR	1079702	GotoStatement	goto finalize ;	5249:3:160367:160380	1075394	1	True				
ANR	1079703	Identifier	finalize		1075394	0					
ANR	1079704	ExpressionStatement	req = real_cmd	5252:2:160389:160403	1075394	23	True				
ANR	1079705	AssignmentExpression	req = real_cmd		1075394	0		=			
ANR	1079706	Identifier	req		1075394	0					
ANR	1079707	Identifier	real_cmd		1075394	1					
ANR	1079708	ExpressionStatement	result = TRUE	5253:2:160407:160420	1075394	24	True				
ANR	1079709	AssignmentExpression	result = TRUE		1075394	0		=			
ANR	1079710	Identifier	result		1075394	0					
ANR	1079711	Identifier	TRUE		1075394	1					
ANR	1079712	ExpressionStatement	sock -> decode ( )	5255:2:160425:160439	1075394	25	True				
ANR	1079713	CallExpression	sock -> decode ( )		1075394	0					
ANR	1079714	Callee	sock -> decode		1075394	0					
ANR	1079715	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1079716	Identifier	sock		1075394	0					
ANR	1079717	Identifier	decode		1075394	1					
ANR	1079718	ArgumentList			1075394	1					
ANR	1079719	IfStatement	if ( comTable [ cmd_index ] . wait_for_payload == 0 )		1075394	26					
ANR	1079720	Condition	comTable [ cmd_index ] . wait_for_payload == 0	5256:6:160447:160487	1075394	0	True				
ANR	1079721	EqualityExpression	comTable [ cmd_index ] . wait_for_payload == 0		1075394	0		==			
ANR	1079722	MemberAccess	comTable [ cmd_index ] . wait_for_payload		1075394	0					
ANR	1079723	ArrayIndexing	comTable [ cmd_index ]		1075394	0					
ANR	1079724	Identifier	comTable		1075394	0					
ANR	1079725	Identifier	cmd_index		1075394	1					
ANR	1079726	Identifier	wait_for_payload		1075394	1					
ANR	1079727	PrimaryExpression	0		1075394	1					
ANR	1079728	CompoundStatement		1017:50:33464:33464	1075394	1					
ANR	1079729	ExpressionStatement	sock -> allow_one_empty_message ( )	5265:3:160838:160869	1075394	0	True				
ANR	1079730	CallExpression	sock -> allow_one_empty_message ( )		1075394	0					
ANR	1079731	Callee	sock -> allow_one_empty_message		1075394	0					
ANR	1079732	PtrMemberAccess	sock -> allow_one_empty_message		1075394	0					
ANR	1079733	Identifier	sock		1075394	0					
ANR	1079734	Identifier	allow_one_empty_message		1075394	1					
ANR	1079735	ArgumentList			1075394	1					
ANR	1079736	ExpressionStatement	reqFound = TRUE	5269:2:160908:160923	1075394	27	True				
ANR	1079737	AssignmentExpression	reqFound = TRUE		1075394	0		=			
ANR	1079738	Identifier	reqFound		1075394	0					
ANR	1079739	Identifier	TRUE		1075394	1					
ANR	1079740	ExpressionStatement	index = cmd_index	5270:2:160927:160944	1075394	28	True				
ANR	1079741	AssignmentExpression	index = cmd_index		1075394	0		=			
ANR	1079742	Identifier	index		1075394	0					
ANR	1079743	Identifier	cmd_index		1075394	1					
ANR	1079744	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Success.\\n"" )"	5272:2:160949:161000	1075394	29	True				
ANR	1079745	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: Success.\\n"" )"		1075394	0					
ANR	1079746	Callee	dprintf		1075394	0					
ANR	1079747	Identifier	dprintf		1075394	0					
ANR	1079748	ArgumentList	D_SECURITY		1075394	1					
ANR	1079749	Argument	D_SECURITY		1075394	0					
ANR	1079750	Identifier	D_SECURITY		1075394	0					
ANR	1079751	Argument	"""DC_AUTHENTICATE: Success.\\n"""		1075394	1					
ANR	1079752	PrimaryExpression	"""DC_AUTHENTICATE: Success.\\n"""		1075394	0					
ANR	1079753	ElseStatement	else		1075394	0					
ANR	1079754	CompoundStatement		1034:8:33983:33983	1075394	0					
ANR	1079755	ExpressionStatement	"reqFound = CommandNumToTableIndex ( req , & index )"	5276:2:161101:161146	1075394	0	True				
ANR	1079756	AssignmentExpression	"reqFound = CommandNumToTableIndex ( req , & index )"		1075394	0		=			
ANR	1079757	Identifier	reqFound		1075394	0					
ANR	1079758	CallExpression	"CommandNumToTableIndex ( req , & index )"		1075394	1					
ANR	1079759	Callee	CommandNumToTableIndex		1075394	0					
ANR	1079760	Identifier	CommandNumToTableIndex		1075394	0					
ANR	1079761	ArgumentList	req		1075394	1					
ANR	1079762	Argument	req		1075394	0					
ANR	1079763	Identifier	req		1075394	0					
ANR	1079764	Argument	& index		1075394	1					
ANR	1079765	UnaryOperationExpression	& index		1075394	0					
ANR	1079766	UnaryOperator	&		1075394	0					
ANR	1079767	Identifier	index		1075394	1					
ANR	1079768	IfStatement	if ( reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( ) )		1075394	1					
ANR	1079769	Condition	reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )	5284:6:161415:161544	1075394	0	True				
ANR	1079770	AndExpression	reqFound && is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		1075394	0		&&			
ANR	1079771	Identifier	reqFound		1075394	0					
ANR	1079772	AndExpression	is_tcp && ! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		1075394	1		&&			
ANR	1079773	Identifier	is_tcp		1075394	0					
ANR	1079774	AndExpression	! sock -> isAuthenticated ( ) && comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		1075394	1		&&			
ANR	1079775	UnaryOperationExpression	! sock -> isAuthenticated ( )		1075394	0					
ANR	1079776	UnaryOperator	!		1075394	0					
ANR	1079777	CallExpression	sock -> isAuthenticated ( )		1075394	1					
ANR	1079778	Callee	sock -> isAuthenticated		1075394	0					
ANR	1079779	PtrMemberAccess	sock -> isAuthenticated		1075394	0					
ANR	1079780	Identifier	sock		1075394	0					
ANR	1079781	Identifier	isAuthenticated		1075394	1					
ANR	1079782	ArgumentList			1075394	1					
ANR	1079783	AndExpression	comTable [ index ] . force_authentication && ! sock -> triedAuthentication ( )		1075394	1		&&			
ANR	1079784	MemberAccess	comTable [ index ] . force_authentication		1075394	0					
ANR	1079785	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079786	Identifier	comTable		1075394	0					
ANR	1079787	Identifier	index		1075394	1					
ANR	1079788	Identifier	force_authentication		1075394	1					
ANR	1079789	UnaryOperationExpression	! sock -> triedAuthentication ( )		1075394	1					
ANR	1079790	UnaryOperator	!		1075394	0					
ANR	1079791	CallExpression	sock -> triedAuthentication ( )		1075394	1					
ANR	1079792	Callee	sock -> triedAuthentication		1075394	0					
ANR	1079793	PtrMemberAccess	sock -> triedAuthentication		1075394	0					
ANR	1079794	Identifier	sock		1075394	0					
ANR	1079795	Identifier	triedAuthentication		1075394	1					
ANR	1079796	ArgumentList			1075394	1					
ANR	1079797	CompoundStatement		1050:2:34523:34523	1075394	1					
ANR	1079798	ExpressionStatement	"SecMan :: authenticate_sock ( sock , WRITE , & errstack )"	5290:3:161555:161604	1075394	0	True				
ANR	1079799	CallExpression	"SecMan :: authenticate_sock ( sock , WRITE , & errstack )"		1075394	0					
ANR	1079800	Callee	SecMan :: authenticate_sock		1075394	0					
ANR	1079801	Identifier	SecMan :: authenticate_sock		1075394	0					
ANR	1079802	ArgumentList	sock		1075394	1					
ANR	1079803	Argument	sock		1075394	0					
ANR	1079804	Identifier	sock		1075394	0					
ANR	1079805	Argument	WRITE		1075394	1					
ANR	1079806	Identifier	WRITE		1075394	0					
ANR	1079807	Argument	& errstack		1075394	2					
ANR	1079808	UnaryOperationExpression	& errstack		1075394	0					
ANR	1079809	UnaryOperator	&		1075394	0					
ANR	1079810	Identifier	errstack		1075394	1					
ANR	1079811	IfStatement	if ( reqFound && ! sock -> isAuthenticated ( ) )		1075394	2					
ANR	1079812	Condition	reqFound && ! sock -> isAuthenticated ( )	5295:6:161739:161774	1075394	0	True				
ANR	1079813	AndExpression	reqFound && ! sock -> isAuthenticated ( )		1075394	0		&&			
ANR	1079814	Identifier	reqFound		1075394	0					
ANR	1079815	UnaryOperationExpression	! sock -> isAuthenticated ( )		1075394	1					
ANR	1079816	UnaryOperator	!		1075394	0					
ANR	1079817	CallExpression	sock -> isAuthenticated ( )		1075394	1					
ANR	1079818	Callee	sock -> isAuthenticated		1075394	0					
ANR	1079819	PtrMemberAccess	sock -> isAuthenticated		1075394	0					
ANR	1079820	Identifier	sock		1075394	0					
ANR	1079821	Identifier	isAuthenticated		1075394	1					
ANR	1079822	ArgumentList			1075394	1					
ANR	1079823	CompoundStatement		1056:44:34750:34750	1075394	1					
ANR	1079824	ExpressionStatement	"dprintf ( D_SECURITY , ""DaemonCore received UNAUTHENTICATED command %i %s.\\n"" , req , comTable [ index ] . command_descrip )"	5298:3:161850:161964	1075394	0	True				
ANR	1079825	CallExpression	"dprintf ( D_SECURITY , ""DaemonCore received UNAUTHENTICATED command %i %s.\\n"" , req , comTable [ index ] . command_descrip )"		1075394	0					
ANR	1079826	Callee	dprintf		1075394	0					
ANR	1079827	Identifier	dprintf		1075394	0					
ANR	1079828	ArgumentList	D_SECURITY		1075394	1					
ANR	1079829	Argument	D_SECURITY		1075394	0					
ANR	1079830	Identifier	D_SECURITY		1075394	0					
ANR	1079831	Argument	"""DaemonCore received UNAUTHENTICATED command %i %s.\\n"""		1075394	1					
ANR	1079832	PrimaryExpression	"""DaemonCore received UNAUTHENTICATED command %i %s.\\n"""		1075394	0					
ANR	1079833	Argument	req		1075394	2					
ANR	1079834	Identifier	req		1075394	0					
ANR	1079835	Argument	comTable [ index ] . command_descrip		1075394	3					
ANR	1079836	MemberAccess	comTable [ index ] . command_descrip		1075394	0					
ANR	1079837	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079838	Identifier	comTable		1075394	0					
ANR	1079839	Identifier	index		1075394	1					
ANR	1079840	Identifier	command_descrip		1075394	1					
ANR	1079841	IfStatement	if ( comTable [ index ] . perm != ALLOW )		1075394	1					
ANR	1079842	Condition	comTable [ index ] . perm != ALLOW	5302:7:162100:162128	1075394	0	True				
ANR	1079843	EqualityExpression	comTable [ index ] . perm != ALLOW		1075394	0		!=			
ANR	1079844	MemberAccess	comTable [ index ] . perm		1075394	0					
ANR	1079845	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079846	Identifier	comTable		1075394	0					
ANR	1079847	Identifier	index		1075394	1					
ANR	1079848	Identifier	perm		1075394	1					
ANR	1079849	Identifier	ALLOW		1075394	1					
ANR	1079850	CompoundStatement		1065:4:35111:35129	1075394	1					
ANR	1079851	IdentifierDeclStatement	ClassAd our_policy ;	5304:4:162138:162156	1075394	0	True				
ANR	1079852	IdentifierDecl	our_policy		1075394	0					
ANR	1079853	IdentifierDeclType	ClassAd		1075394	0					
ANR	1079854	Identifier	our_policy		1075394	1					
ANR	1079855	IfStatement	"if ( ! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication ) )"		1075394	1					
ANR	1079856	Condition	"! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"	5305:8:162166:162312	1075394	0	True				
ANR	1079857	UnaryOperationExpression	"! sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"		1075394	0					
ANR	1079858	UnaryOperator	!		1075394	0					
ANR	1079859	CallExpression	"sec_man -> FillInSecurityPolicyAd ( comTable [ index ] . perm , & our_policy , false , false , comTable [ index ] . force_authentication )"		1075394	1					
ANR	1079860	Callee	sec_man -> FillInSecurityPolicyAd		1075394	0					
ANR	1079861	PtrMemberAccess	sec_man -> FillInSecurityPolicyAd		1075394	0					
ANR	1079862	Identifier	sec_man		1075394	0					
ANR	1079863	Identifier	FillInSecurityPolicyAd		1075394	1					
ANR	1079864	ArgumentList	comTable [ index ] . perm		1075394	1					
ANR	1079865	Argument	comTable [ index ] . perm		1075394	0					
ANR	1079866	MemberAccess	comTable [ index ] . perm		1075394	0					
ANR	1079867	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079868	Identifier	comTable		1075394	0					
ANR	1079869	Identifier	index		1075394	1					
ANR	1079870	Identifier	perm		1075394	1					
ANR	1079871	Argument	& our_policy		1075394	1					
ANR	1079872	UnaryOperationExpression	& our_policy		1075394	0					
ANR	1079873	UnaryOperator	&		1075394	0					
ANR	1079874	Identifier	our_policy		1075394	1					
ANR	1079875	Argument	false		1075394	2					
ANR	1079876	Identifier	false		1075394	0					
ANR	1079877	Argument	false		1075394	3					
ANR	1079878	Identifier	false		1075394	0					
ANR	1079879	Argument	comTable [ index ] . force_authentication		1075394	4					
ANR	1079880	MemberAccess	comTable [ index ] . force_authentication		1075394	0					
ANR	1079881	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079882	Identifier	comTable		1075394	0					
ANR	1079883	Identifier	index		1075394	1					
ANR	1079884	Identifier	force_authentication		1075394	1					
ANR	1079885	CompoundStatement		1072:4:35293:35293	1075394	1					
ANR	1079886	Statement	dprintf	5312:5:162327:162333	1075394	0	True				
ANR	1079887	Statement	(	5312:12:162334:162334	1075394	1	True				
ANR	1079888	Statement	D_ALWAYS	5312:14:162336:162343	1075394	2	True				
ANR	1079889	Statement	","	5312:22:162344:162344	1075394	3	True				
ANR	1079890	Statement	"""DC_AUTHENTICATE: """	5312:24:162346:162364	1075394	4	True				
ANR	1079891	Statement	"""Our security policy is invalid!\\n"""	5313:8:162374:162408	1075394	5	True				
ANR	1079892	Statement	)	5313:44:162410:162410	1075394	6	True				
ANR	1079893	ExpressionStatement		5313:45:162411:162411	1075394	7	True				
ANR	1079894	ExpressionStatement	result = FALSE	5314:5:162418:162432	1075394	8	True				
ANR	1079895	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1079896	Identifier	result		1075394	0					
ANR	1079897	Identifier	FALSE		1075394	1					
ANR	1079898	GotoStatement	goto finalize ;	5315:5:162439:162452	1075394	9	True				
ANR	1079899	Identifier	finalize		1075394	0					
ANR	1079900	IfStatement	"if ( ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED ) )"		1075394	2					
ANR	1079901	Condition	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"	5322:10:162612:163024	1075394	0	True				
ANR	1079902	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		1075394	0		||			
ANR	1079903	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION ) == SecMan :: SEC_REQ_REQUIRED"		1075394	0		==			
ANR	1079904	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_NEGOTIATION )"		1075394	0					
ANR	1079905	Callee	sec_man -> sec_lookup_req		1075394	0					
ANR	1079906	PtrMemberAccess	sec_man -> sec_lookup_req		1075394	0					
ANR	1079907	Identifier	sec_man		1075394	0					
ANR	1079908	Identifier	sec_lookup_req		1075394	1					
ANR	1079909	ArgumentList	our_policy		1075394	1					
ANR	1079910	Argument	our_policy		1075394	0					
ANR	1079911	Identifier	our_policy		1075394	0					
ANR	1079912	Argument	ATTR_SEC_NEGOTIATION		1075394	1					
ANR	1079913	Identifier	ATTR_SEC_NEGOTIATION		1075394	0					
ANR	1079914	Identifier	SecMan :: SEC_REQ_REQUIRED		1075394	1					
ANR	1079915	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		1075394	1		||			
ANR	1079916	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION ) == SecMan :: SEC_REQ_REQUIRED"		1075394	0		==			
ANR	1079917	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_AUTHENTICATION )"		1075394	0					
ANR	1079918	Callee	sec_man -> sec_lookup_req		1075394	0					
ANR	1079919	PtrMemberAccess	sec_man -> sec_lookup_req		1075394	0					
ANR	1079920	Identifier	sec_man		1075394	0					
ANR	1079921	Identifier	sec_lookup_req		1075394	1					
ANR	1079922	ArgumentList	our_policy		1075394	1					
ANR	1079923	Argument	our_policy		1075394	0					
ANR	1079924	Identifier	our_policy		1075394	0					
ANR	1079925	Argument	ATTR_SEC_AUTHENTICATION		1075394	1					
ANR	1079926	Identifier	ATTR_SEC_AUTHENTICATION		1075394	0					
ANR	1079927	Identifier	SecMan :: SEC_REQ_REQUIRED		1075394	1					
ANR	1079928	OrExpression	"( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED ) || ( sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED )"		1075394	1		||			
ANR	1079929	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION ) == SecMan :: SEC_REQ_REQUIRED"		1075394	0		==			
ANR	1079930	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_ENCRYPTION )"		1075394	0					
ANR	1079931	Callee	sec_man -> sec_lookup_req		1075394	0					
ANR	1079932	PtrMemberAccess	sec_man -> sec_lookup_req		1075394	0					
ANR	1079933	Identifier	sec_man		1075394	0					
ANR	1079934	Identifier	sec_lookup_req		1075394	1					
ANR	1079935	ArgumentList	our_policy		1075394	1					
ANR	1079936	Argument	our_policy		1075394	0					
ANR	1079937	Identifier	our_policy		1075394	0					
ANR	1079938	Argument	ATTR_SEC_ENCRYPTION		1075394	1					
ANR	1079939	Identifier	ATTR_SEC_ENCRYPTION		1075394	0					
ANR	1079940	Identifier	SecMan :: SEC_REQ_REQUIRED		1075394	1					
ANR	1079941	EqualityExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY ) == SecMan :: SEC_REQ_REQUIRED"		1075394	1		==			
ANR	1079942	CallExpression	"sec_man -> sec_lookup_req ( our_policy , ATTR_SEC_INTEGRITY )"		1075394	0					
ANR	1079943	Callee	sec_man -> sec_lookup_req		1075394	0					
ANR	1079944	PtrMemberAccess	sec_man -> sec_lookup_req		1075394	0					
ANR	1079945	Identifier	sec_man		1075394	0					
ANR	1079946	Identifier	sec_lookup_req		1075394	1					
ANR	1079947	ArgumentList	our_policy		1075394	1					
ANR	1079948	Argument	our_policy		1075394	0					
ANR	1079949	Identifier	our_policy		1075394	0					
ANR	1079950	Argument	ATTR_SEC_INTEGRITY		1075394	1					
ANR	1079951	Identifier	ATTR_SEC_INTEGRITY		1075394	0					
ANR	1079952	Identifier	SecMan :: SEC_REQ_REQUIRED		1075394	1					
ANR	1079953	CompoundStatement		1090:39:36001:36001	1075394	1					
ANR	1079954	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"" , req , comTable [ index ] . command_descrip , ( is_tcp ) ? ""TCP"" : ""UDP"" , ! user . IsEmpty ( ) ? "" from "" : """" , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"	5333:5:163068:163393	1075394	0	True				
ANR	1079955	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"" , req , comTable [ index ] . command_descrip , ( is_tcp ) ? ""TCP"" : ""UDP"" , ! user . IsEmpty ( ) ? "" from "" : """" , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"		1075394	0					
ANR	1079956	Callee	dprintf		1075394	0					
ANR	1079957	Identifier	dprintf		1075394	0					
ANR	1079958	ArgumentList	D_ALWAYS		1075394	1					
ANR	1079959	Argument	D_ALWAYS		1075394	0					
ANR	1079960	Identifier	D_ALWAYS		1075394	0					
ANR	1079961	Argument	"""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"""		1075394	1					
ANR	1079962	PrimaryExpression	"""DaemonCore: PERMISSION DENIED for %d (%s) via %s%s%s from host %s (access level %s)\\n"""		1075394	0					
ANR	1079963	Argument	req		1075394	2					
ANR	1079964	Identifier	req		1075394	0					
ANR	1079965	Argument	comTable [ index ] . command_descrip		1075394	3					
ANR	1079966	MemberAccess	comTable [ index ] . command_descrip		1075394	0					
ANR	1079967	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1079968	Identifier	comTable		1075394	0					
ANR	1079969	Identifier	index		1075394	1					
ANR	1079970	Identifier	command_descrip		1075394	1					
ANR	1079971	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	4					
ANR	1079972	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	0					
ANR	1079973	Condition	is_tcp		1075394	0					
ANR	1079974	Identifier	is_tcp		1075394	0					
ANR	1079975	PrimaryExpression	"""TCP"""		1075394	1					
ANR	1079976	PrimaryExpression	"""UDP"""		1075394	2					
ANR	1079977	Argument	"! user . IsEmpty ( ) ? "" from "" : """""		1075394	5					
ANR	1079978	ConditionalExpression	"! user . IsEmpty ( ) ? "" from "" : """""		1075394	0					
ANR	1079979	Condition	! user . IsEmpty ( )		1075394	0					
ANR	1079980	UnaryOperationExpression	! user . IsEmpty ( )		1075394	0					
ANR	1079981	UnaryOperator	!		1075394	0					
ANR	1079982	CallExpression	user . IsEmpty ( )		1075394	1					
ANR	1079983	Callee	user . IsEmpty		1075394	0					
ANR	1079984	MemberAccess	user . IsEmpty		1075394	0					
ANR	1079985	Identifier	user		1075394	0					
ANR	1079986	Identifier	IsEmpty		1075394	1					
ANR	1079987	ArgumentList			1075394	1					
ANR	1079988	PrimaryExpression	""" from """		1075394	1					
ANR	1079989	PrimaryExpression	""""""		1075394	2					
ANR	1079990	Argument	user . Value ( )		1075394	6					
ANR	1079991	CallExpression	user . Value ( )		1075394	0					
ANR	1079992	Callee	user . Value		1075394	0					
ANR	1079993	MemberAccess	user . Value		1075394	0					
ANR	1079994	Identifier	user		1075394	0					
ANR	1079995	Identifier	Value		1075394	1					
ANR	1079996	ArgumentList			1075394	1					
ANR	1079997	Argument	sock -> peer_description ( )		1075394	7					
ANR	1079998	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1079999	Callee	sock -> peer_description		1075394	0					
ANR	1080000	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1080001	Identifier	sock		1075394	0					
ANR	1080002	Identifier	peer_description		1075394	1					
ANR	1080003	ArgumentList			1075394	1					
ANR	1080004	Argument	PermString ( comTable [ index ] . perm )		1075394	8					
ANR	1080005	CallExpression	PermString ( comTable [ index ] . perm )		1075394	0					
ANR	1080006	Callee	PermString		1075394	0					
ANR	1080007	Identifier	PermString		1075394	0					
ANR	1080008	ArgumentList	comTable [ index ] . perm		1075394	1					
ANR	1080009	Argument	comTable [ index ] . perm		1075394	0					
ANR	1080010	MemberAccess	comTable [ index ] . perm		1075394	0					
ANR	1080011	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080012	Identifier	comTable		1075394	0					
ANR	1080013	Identifier	index		1075394	1					
ANR	1080014	Identifier	perm		1075394	1					
ANR	1080015	ExpressionStatement	result = FALSE	5343:5:163401:163415	1075394	1	True				
ANR	1080016	AssignmentExpression	result = FALSE		1075394	0		=			
ANR	1080017	Identifier	result		1075394	0					
ANR	1080018	Identifier	FALSE		1075394	1					
ANR	1080019	GotoStatement	goto finalize ;	5344:5:163422:163435	1075394	2	True				
ANR	1080020	Identifier	finalize		1075394	0					
ANR	1080021	IfStatement	if ( reqFound == TRUE )		1075394	31					
ANR	1080022	Condition	reqFound == TRUE	5351:6:163463:163478	1075394	0	True				
ANR	1080023	EqualityExpression	reqFound == TRUE		1075394	0		==			
ANR	1080024	Identifier	reqFound		1075394	0					
ANR	1080025	Identifier	TRUE		1075394	1					
ANR	1080026	CompoundStatement		1131:2:36921:36942	1075394	1					
ANR	1080027	IfStatement	if ( user . Length ( ) && ! sock -> isAuthenticated ( ) )		1075394	0					
ANR	1080028	Condition	user . Length ( ) && ! sock -> isAuthenticated ( )	5358:6:163697:163737	1075394	0	True				
ANR	1080029	AndExpression	user . Length ( ) && ! sock -> isAuthenticated ( )		1075394	0		&&			
ANR	1080030	CallExpression	user . Length ( )		1075394	0					
ANR	1080031	Callee	user . Length		1075394	0					
ANR	1080032	MemberAccess	user . Length		1075394	0					
ANR	1080033	Identifier	user		1075394	0					
ANR	1080034	Identifier	Length		1075394	1					
ANR	1080035	ArgumentList			1075394	1					
ANR	1080036	UnaryOperationExpression	! sock -> isAuthenticated ( )		1075394	1					
ANR	1080037	UnaryOperator	!		1075394	0					
ANR	1080038	CallExpression	sock -> isAuthenticated ( )		1075394	1					
ANR	1080039	Callee	sock -> isAuthenticated		1075394	0					
ANR	1080040	PtrMemberAccess	sock -> isAuthenticated		1075394	0					
ANR	1080041	Identifier	sock		1075394	0					
ANR	1080042	Identifier	isAuthenticated		1075394	1					
ANR	1080043	ArgumentList			1075394	1					
ANR	1080044	CompoundStatement		1119:50:36714:36714	1075394	1					
ANR	1080045	ExpressionStatement	sock -> setFullyQualifiedUser ( user . Value ( ) )	5359:3:163746:163787	1075394	0	True				
ANR	1080046	CallExpression	sock -> setFullyQualifiedUser ( user . Value ( ) )		1075394	0					
ANR	1080047	Callee	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080048	PtrMemberAccess	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080049	Identifier	sock		1075394	0					
ANR	1080050	Identifier	setFullyQualifiedUser		1075394	1					
ANR	1080051	ArgumentList	user . Value ( )		1075394	1					
ANR	1080052	Argument	user . Value ( )		1075394	0					
ANR	1080053	CallExpression	user . Value ( )		1075394	0					
ANR	1080054	Callee	user . Value		1075394	0					
ANR	1080055	MemberAccess	user . Value		1075394	0					
ANR	1080056	Identifier	user		1075394	0					
ANR	1080057	Identifier	Value		1075394	1					
ANR	1080058	ArgumentList			1075394	1					
ANR	1080059	IfStatement	if ( is_tcp )		1075394	1					
ANR	1080060	Condition	is_tcp	5363:12:163841:163846	1075394	0	True				
ANR	1080061	Identifier	is_tcp		1075394	0					
ANR	1080062	CompoundStatement		1125:12:36836:36881	1075394	1					
ANR	1080063	IdentifierDeclStatement	const char * u = sock -> getFullyQualifiedUser ( ) ;	5364:12:163863:163908	1075394	0	True				
ANR	1080064	IdentifierDecl	* u = sock -> getFullyQualifiedUser ( )		1075394	0					
ANR	1080065	IdentifierDeclType	const char *		1075394	0					
ANR	1080066	Identifier	u		1075394	1					
ANR	1080067	AssignmentExpression	* u = sock -> getFullyQualifiedUser ( )		1075394	2		=			
ANR	1080068	Identifier	u		1075394	0					
ANR	1080069	CallExpression	sock -> getFullyQualifiedUser ( )		1075394	1					
ANR	1080070	Callee	sock -> getFullyQualifiedUser		1075394	0					
ANR	1080071	PtrMemberAccess	sock -> getFullyQualifiedUser		1075394	0					
ANR	1080072	Identifier	sock		1075394	0					
ANR	1080073	Identifier	getFullyQualifiedUser		1075394	1					
ANR	1080074	ArgumentList			1075394	1					
ANR	1080075	IfStatement	if ( u )		1075394	1					
ANR	1080076	Condition	u	5365:7:163917:163917	1075394	0	True				
ANR	1080077	Identifier	u		1075394	0					
ANR	1080078	CompoundStatement		1126:10:36893:36893	1075394	1					
ANR	1080079	ExpressionStatement	user = u	5366:4:163926:163934	1075394	0	True				
ANR	1080080	AssignmentExpression	user = u		1075394	0		=			
ANR	1080081	Identifier	user		1075394	0					
ANR	1080082	Identifier	u		1075394	1					
ANR	1080083	IdentifierDeclStatement	MyString command_desc ;	5370:2:163948:163969	1075394	2	True				
ANR	1080084	IdentifierDecl	command_desc		1075394	0					
ANR	1080085	IdentifierDeclType	MyString		1075394	0					
ANR	1080086	Identifier	command_desc		1075394	1					
ANR	1080087	ExpressionStatement	"command_desc . sprintf ( ""command %d (%s)"" , req , comTable [ index ] . command_descrip )"	5371:2:163973:164048	1075394	3	True				
ANR	1080088	CallExpression	"command_desc . sprintf ( ""command %d (%s)"" , req , comTable [ index ] . command_descrip )"		1075394	0					
ANR	1080089	Callee	command_desc . sprintf		1075394	0					
ANR	1080090	MemberAccess	command_desc . sprintf		1075394	0					
ANR	1080091	Identifier	command_desc		1075394	0					
ANR	1080092	Identifier	sprintf		1075394	1					
ANR	1080093	ArgumentList	"""command %d (%s)"""		1075394	1					
ANR	1080094	Argument	"""command %d (%s)"""		1075394	0					
ANR	1080095	PrimaryExpression	"""command %d (%s)"""		1075394	0					
ANR	1080096	Argument	req		1075394	1					
ANR	1080097	Identifier	req		1075394	0					
ANR	1080098	Argument	comTable [ index ] . command_descrip		1075394	2					
ANR	1080099	MemberAccess	comTable [ index ] . command_descrip		1075394	0					
ANR	1080100	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080101	Identifier	comTable		1075394	0					
ANR	1080102	Identifier	index		1075394	1					
ANR	1080103	Identifier	command_descrip		1075394	1					
ANR	1080104	IfStatement	if ( comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( ) )		1075394	4					
ANR	1080105	Condition	comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( )	5373:6:164057:164119	1075394	0	True				
ANR	1080106	AndExpression	comTable [ index ] . force_authentication && ! sock -> isMappedFQU ( )		1075394	0		&&			
ANR	1080107	MemberAccess	comTable [ index ] . force_authentication		1075394	0					
ANR	1080108	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080109	Identifier	comTable		1075394	0					
ANR	1080110	Identifier	index		1075394	1					
ANR	1080111	Identifier	force_authentication		1075394	1					
ANR	1080112	UnaryOperationExpression	! sock -> isMappedFQU ( )		1075394	1					
ANR	1080113	UnaryOperator	!		1075394	0					
ANR	1080114	CallExpression	sock -> isMappedFQU ( )		1075394	1					
ANR	1080115	Callee	sock -> isMappedFQU		1075394	0					
ANR	1080116	PtrMemberAccess	sock -> isMappedFQU		1075394	0					
ANR	1080117	Identifier	sock		1075394	0					
ANR	1080118	Identifier	isMappedFQU		1075394	1					
ANR	1080119	ArgumentList			1075394	1					
ANR	1080120	CompoundStatement		1136:2:37098:37098	1075394	1					
ANR	1080121	ExpressionStatement	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , req , comTable [ index ] . command_descrip )"	5376:3:164130:164371	1075394	0	True				
ANR	1080122	CallExpression	"dprintf ( D_ALWAYS , ""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"" , sock -> peer_description ( ) , req , comTable [ index ] . command_descrip )"		1075394	0					
ANR	1080123	Callee	dprintf		1075394	0					
ANR	1080124	Identifier	dprintf		1075394	0					
ANR	1080125	ArgumentList	D_ALWAYS		1075394	1					
ANR	1080126	Argument	D_ALWAYS		1075394	0					
ANR	1080127	Identifier	D_ALWAYS		1075394	0					
ANR	1080128	Argument	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		1075394	1					
ANR	1080129	PrimaryExpression	"""DC_AUTHENTICATE: authentication of %s did not result in a valid mapped user name, which is required for this command (%d %s), so aborting.\\n"""		1075394	0					
ANR	1080130	Argument	sock -> peer_description ( )		1075394	2					
ANR	1080131	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1080132	Callee	sock -> peer_description		1075394	0					
ANR	1080133	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1080134	Identifier	sock		1075394	0					
ANR	1080135	Identifier	peer_description		1075394	1					
ANR	1080136	ArgumentList			1075394	1					
ANR	1080137	Argument	req		1075394	3					
ANR	1080138	Identifier	req		1075394	0					
ANR	1080139	Argument	comTable [ index ] . command_descrip		1075394	4					
ANR	1080140	MemberAccess	comTable [ index ] . command_descrip		1075394	0					
ANR	1080141	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080142	Identifier	comTable		1075394	0					
ANR	1080143	Identifier	index		1075394	1					
ANR	1080144	Identifier	command_descrip		1075394	1					
ANR	1080145	ExpressionStatement	perm = USER_AUTH_FAILURE	5381:3:164377:164401	1075394	1	True				
ANR	1080146	AssignmentExpression	perm = USER_AUTH_FAILURE		1075394	0		=			
ANR	1080147	Identifier	perm		1075394	0					
ANR	1080148	Identifier	USER_AUTH_FAILURE		1075394	1					
ANR	1080149	ElseStatement	else		1075394	0					
ANR	1080150	CompoundStatement		1144:7:37387:37387	1075394	0					
ANR	1080151	ExpressionStatement	"perm = Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"	5384:3:164419:164543	1075394	0	True				
ANR	1080152	AssignmentExpression	"perm = Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"		1075394	0		=			
ANR	1080153	Identifier	perm		1075394	0					
ANR	1080154	CallExpression	"Verify ( command_desc . Value ( ) , comTable [ index ] . perm , sock -> peer_addr ( ) , user . Value ( ) )"		1075394	1					
ANR	1080155	Callee	Verify		1075394	0					
ANR	1080156	Identifier	Verify		1075394	0					
ANR	1080157	ArgumentList	command_desc . Value ( )		1075394	1					
ANR	1080158	Argument	command_desc . Value ( )		1075394	0					
ANR	1080159	CallExpression	command_desc . Value ( )		1075394	0					
ANR	1080160	Callee	command_desc . Value		1075394	0					
ANR	1080161	MemberAccess	command_desc . Value		1075394	0					
ANR	1080162	Identifier	command_desc		1075394	0					
ANR	1080163	Identifier	Value		1075394	1					
ANR	1080164	ArgumentList			1075394	1					
ANR	1080165	Argument	comTable [ index ] . perm		1075394	1					
ANR	1080166	MemberAccess	comTable [ index ] . perm		1075394	0					
ANR	1080167	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080168	Identifier	comTable		1075394	0					
ANR	1080169	Identifier	index		1075394	1					
ANR	1080170	Identifier	perm		1075394	1					
ANR	1080171	Argument	sock -> peer_addr ( )		1075394	2					
ANR	1080172	CallExpression	sock -> peer_addr ( )		1075394	0					
ANR	1080173	Callee	sock -> peer_addr		1075394	0					
ANR	1080174	PtrMemberAccess	sock -> peer_addr		1075394	0					
ANR	1080175	Identifier	sock		1075394	0					
ANR	1080176	Identifier	peer_addr		1075394	1					
ANR	1080177	ArgumentList			1075394	1					
ANR	1080178	Argument	user . Value ( )		1075394	3					
ANR	1080179	CallExpression	user . Value ( )		1075394	0					
ANR	1080180	Callee	user . Value		1075394	0					
ANR	1080181	MemberAccess	user . Value		1075394	0					
ANR	1080182	Identifier	user		1075394	0					
ANR	1080183	Identifier	Value		1075394	1					
ANR	1080184	ArgumentList			1075394	1					
ANR	1080185	IfStatement	if ( perm != USER_AUTH_SUCCESS )		1075394	5					
ANR	1080186	Condition	perm != USER_AUTH_SUCCESS	5391:6:164556:164580	1075394	0	True				
ANR	1080187	EqualityExpression	perm != USER_AUTH_SUCCESS		1075394	0		!=			
ANR	1080188	Identifier	perm		1075394	0					
ANR	1080189	Identifier	USER_AUTH_SUCCESS		1075394	1					
ANR	1080190	CompoundStatement		1153:2:37559:37559	1075394	1					
ANR	1080191	ExpressionStatement	reqFound = FALSE	5394:3:164621:164637	1075394	0	True				
ANR	1080192	AssignmentExpression	reqFound = FALSE		1075394	0		=			
ANR	1080193	Identifier	reqFound		1075394	0					
ANR	1080194	Identifier	FALSE		1075394	1					
ANR	1080195	ExpressionStatement	result = 0	5396:3:164761:164771	1075394	1	True				
ANR	1080196	AssignmentExpression	result = 0		1075394	0		=			
ANR	1080197	Identifier	result		1075394	0					
ANR	1080198	PrimaryExpression	0		1075394	1					
ANR	1080199	IfStatement	if ( ! is_tcp )		1075394	2					
ANR	1080200	Condition	! is_tcp	5399:8:164854:164860	1075394	0	True				
ANR	1080201	UnaryOperationExpression	! is_tcp		1075394	0					
ANR	1080202	UnaryOperator	!		1075394	0					
ANR	1080203	Identifier	is_tcp		1075394	1					
ANR	1080204	ExpressionStatement	sock -> end_of_message ( )	5400:4:164867:164889	1075394	1	True				
ANR	1080205	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1080206	Callee	sock -> end_of_message		1075394	0					
ANR	1080207	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1080208	Identifier	sock		1075394	0					
ANR	1080209	Identifier	end_of_message		1075394	1					
ANR	1080210	ArgumentList			1075394	1					
ANR	1080211	ElseStatement	else		1075394	0					
ANR	1080212	CompoundStatement		1163:9:37874:37874	1075394	0					
ANR	1080213	ExpressionStatement	"dprintf ( comTable [ index ] . dprintf_flag | D_COMMAND , ""Received %s command %d (%s) from %s %s, access level %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , comTable [ index ] . command_descrip , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"	5403:3:164906:165189	1075394	0	True				
ANR	1080214	CallExpression	"dprintf ( comTable [ index ] . dprintf_flag | D_COMMAND , ""Received %s command %d (%s) from %s %s, access level %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , comTable [ index ] . command_descrip , user . Value ( ) , sock -> peer_description ( ) , PermString ( comTable [ index ] . perm ) )"		1075394	0					
ANR	1080215	Callee	dprintf		1075394	0					
ANR	1080216	Identifier	dprintf		1075394	0					
ANR	1080217	ArgumentList	comTable [ index ] . dprintf_flag | D_COMMAND		1075394	1					
ANR	1080218	Argument	comTable [ index ] . dprintf_flag | D_COMMAND		1075394	0					
ANR	1080219	InclusiveOrExpression	comTable [ index ] . dprintf_flag | D_COMMAND		1075394	0		|			
ANR	1080220	MemberAccess	comTable [ index ] . dprintf_flag		1075394	0					
ANR	1080221	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080222	Identifier	comTable		1075394	0					
ANR	1080223	Identifier	index		1075394	1					
ANR	1080224	Identifier	dprintf_flag		1075394	1					
ANR	1080225	Identifier	D_COMMAND		1075394	1					
ANR	1080226	Argument	"""Received %s command %d (%s) from %s %s, access level %s\\n"""		1075394	1					
ANR	1080227	PrimaryExpression	"""Received %s command %d (%s) from %s %s, access level %s\\n"""		1075394	0					
ANR	1080228	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	2					
ANR	1080229	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	0					
ANR	1080230	Condition	is_tcp		1075394	0					
ANR	1080231	Identifier	is_tcp		1075394	0					
ANR	1080232	PrimaryExpression	"""TCP"""		1075394	1					
ANR	1080233	PrimaryExpression	"""UDP"""		1075394	2					
ANR	1080234	Argument	req		1075394	3					
ANR	1080235	Identifier	req		1075394	0					
ANR	1080236	Argument	comTable [ index ] . command_descrip		1075394	4					
ANR	1080237	MemberAccess	comTable [ index ] . command_descrip		1075394	0					
ANR	1080238	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080239	Identifier	comTable		1075394	0					
ANR	1080240	Identifier	index		1075394	1					
ANR	1080241	Identifier	command_descrip		1075394	1					
ANR	1080242	Argument	user . Value ( )		1075394	5					
ANR	1080243	CallExpression	user . Value ( )		1075394	0					
ANR	1080244	Callee	user . Value		1075394	0					
ANR	1080245	MemberAccess	user . Value		1075394	0					
ANR	1080246	Identifier	user		1075394	0					
ANR	1080247	Identifier	Value		1075394	1					
ANR	1080248	ArgumentList			1075394	1					
ANR	1080249	Argument	sock -> peer_description ( )		1075394	6					
ANR	1080250	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1080251	Callee	sock -> peer_description		1075394	0					
ANR	1080252	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1080253	Identifier	sock		1075394	0					
ANR	1080254	Identifier	peer_description		1075394	1					
ANR	1080255	ArgumentList			1075394	1					
ANR	1080256	Argument	PermString ( comTable [ index ] . perm )		1075394	7					
ANR	1080257	CallExpression	PermString ( comTable [ index ] . perm )		1075394	0					
ANR	1080258	Callee	PermString		1075394	0					
ANR	1080259	Identifier	PermString		1075394	0					
ANR	1080260	ArgumentList	comTable [ index ] . perm		1075394	1					
ANR	1080261	Argument	comTable [ index ] . perm		1075394	0					
ANR	1080262	MemberAccess	comTable [ index ] . perm		1075394	0					
ANR	1080263	ArrayIndexing	comTable [ index ]		1075394	0					
ANR	1080264	Identifier	comTable		1075394	0					
ANR	1080265	Identifier	index		1075394	1					
ANR	1080266	Identifier	perm		1075394	1					
ANR	1080267	ElseStatement	else		1075394	0					
ANR	1080268	CompoundStatement		1174:8:38177:38177	1075394	0					
ANR	1080269	ExpressionStatement	"dprintf ( D_ALWAYS , ""Received %s command %d (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"	5414:3:165209:165396	1075394	0	True				
ANR	1080270	CallExpression	"dprintf ( D_ALWAYS , ""Received %s command %d (%s) from %s %s\\n"" , ( is_tcp ) ? ""TCP"" : ""UDP"" , req , ""UNREGISTERED COMMAND!"" , user . Value ( ) , sock -> peer_description ( ) )"		1075394	0					
ANR	1080271	Callee	dprintf		1075394	0					
ANR	1080272	Identifier	dprintf		1075394	0					
ANR	1080273	ArgumentList	D_ALWAYS		1075394	1					
ANR	1080274	Argument	D_ALWAYS		1075394	0					
ANR	1080275	Identifier	D_ALWAYS		1075394	0					
ANR	1080276	Argument	"""Received %s command %d (%s) from %s %s\\n"""		1075394	1					
ANR	1080277	PrimaryExpression	"""Received %s command %d (%s) from %s %s\\n"""		1075394	0					
ANR	1080278	Argument	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	2					
ANR	1080279	ConditionalExpression	"( is_tcp ) ? ""TCP"" : ""UDP"""		1075394	0					
ANR	1080280	Condition	is_tcp		1075394	0					
ANR	1080281	Identifier	is_tcp		1075394	0					
ANR	1080282	PrimaryExpression	"""TCP"""		1075394	1					
ANR	1080283	PrimaryExpression	"""UDP"""		1075394	2					
ANR	1080284	Argument	req		1075394	3					
ANR	1080285	Identifier	req		1075394	0					
ANR	1080286	Argument	"""UNREGISTERED COMMAND!"""		1075394	4					
ANR	1080287	PrimaryExpression	"""UNREGISTERED COMMAND!"""		1075394	0					
ANR	1080288	Argument	user . Value ( )		1075394	5					
ANR	1080289	CallExpression	user . Value ( )		1075394	0					
ANR	1080290	Callee	user . Value		1075394	0					
ANR	1080291	MemberAccess	user . Value		1075394	0					
ANR	1080292	Identifier	user		1075394	0					
ANR	1080293	Identifier	Value		1075394	1					
ANR	1080294	ArgumentList			1075394	1					
ANR	1080295	Argument	sock -> peer_description ( )		1075394	6					
ANR	1080296	CallExpression	sock -> peer_description ( )		1075394	0					
ANR	1080297	Callee	sock -> peer_description		1075394	0					
ANR	1080298	PtrMemberAccess	sock -> peer_description		1075394	0					
ANR	1080299	Identifier	sock		1075394	0					
ANR	1080300	Identifier	peer_description		1075394	1					
ANR	1080301	ArgumentList			1075394	1					
ANR	1080302	ExpressionStatement	result = 0	5422:2:165470:165480	1075394	1	True				
ANR	1080303	AssignmentExpression	result = 0		1075394	0		=			
ANR	1080304	Identifier	result		1075394	0					
ANR	1080305	PrimaryExpression	0		1075394	1					
ANR	1080306	IfStatement	if ( ! is_tcp )		1075394	2					
ANR	1080307	Condition	! is_tcp	5424:7:165560:165566	1075394	0	True				
ANR	1080308	UnaryOperationExpression	! is_tcp		1075394	0					
ANR	1080309	UnaryOperator	!		1075394	0					
ANR	1080310	Identifier	is_tcp		1075394	1					
ANR	1080311	ExpressionStatement	sock -> end_of_message ( )	5425:3:165572:165594	1075394	1	True				
ANR	1080312	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1080313	Callee	sock -> end_of_message		1075394	0					
ANR	1080314	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1080315	Identifier	sock		1075394	0					
ANR	1080316	Identifier	end_of_message		1075394	1					
ANR	1080317	ArgumentList			1075394	1					
ANR	1080318	IfStatement	if ( reqFound == TRUE )		1075394	32					
ANR	1080319	Condition	reqFound == TRUE	5436:6:165845:165860	1075394	0	True				
ANR	1080320	EqualityExpression	reqFound == TRUE		1075394	0		==			
ANR	1080321	Identifier	reqFound		1075394	0					
ANR	1080322	Identifier	TRUE		1075394	1					
ANR	1080323	CompoundStatement		1203:2:39003:39073	1075394	1					
ANR	1080324	ExpressionStatement	ScopedEnableParallel ( false )	5438:2:165936:165963	1075394	0	True				
ANR	1080325	CallExpression	ScopedEnableParallel ( false )		1075394	0					
ANR	1080326	Callee	ScopedEnableParallel		1075394	0					
ANR	1080327	Identifier	ScopedEnableParallel		1075394	0					
ANR	1080328	ArgumentList	false		1075394	1					
ANR	1080329	Argument	false		1075394	0					
ANR	1080330	Identifier	false		1075394	0					
ANR	1080331	IdentifierDeclStatement	UtcTime handler_start_time ;	5440:2:165968:165994	1075394	1	True				
ANR	1080332	IdentifierDecl	handler_start_time		1075394	0					
ANR	1080333	IdentifierDeclType	UtcTime		1075394	0					
ANR	1080334	Identifier	handler_start_time		1075394	1					
ANR	1080335	ExpressionStatement	handler_start_time . getTime ( )	5441:2:165998:166026	1075394	2	True				
ANR	1080336	CallExpression	handler_start_time . getTime ( )		1075394	0					
ANR	1080337	Callee	handler_start_time . getTime		1075394	0					
ANR	1080338	MemberAccess	handler_start_time . getTime		1075394	0					
ANR	1080339	Identifier	handler_start_time		1075394	0					
ANR	1080340	Identifier	getTime		1075394	1					
ANR	1080341	ArgumentList			1075394	1					
ANR	1080342	IdentifierDeclStatement	float sec_time = handler_start_time . difference ( & handle_req_start_time ) ;	5442:2:166030:166100	1075394	3	True				
ANR	1080343	IdentifierDecl	sec_time = handler_start_time . difference ( & handle_req_start_time )		1075394	0					
ANR	1080344	IdentifierDeclType	float		1075394	0					
ANR	1080345	Identifier	sec_time		1075394	1					
ANR	1080346	AssignmentExpression	sec_time = handler_start_time . difference ( & handle_req_start_time )		1075394	2		=			
ANR	1080347	Identifier	sec_time		1075394	0					
ANR	1080348	CallExpression	handler_start_time . difference ( & handle_req_start_time )		1075394	1					
ANR	1080349	Callee	handler_start_time . difference		1075394	0					
ANR	1080350	MemberAccess	handler_start_time . difference		1075394	0					
ANR	1080351	Identifier	handler_start_time		1075394	0					
ANR	1080352	Identifier	difference		1075394	1					
ANR	1080353	ArgumentList	& handle_req_start_time		1075394	1					
ANR	1080354	Argument	& handle_req_start_time		1075394	0					
ANR	1080355	UnaryOperationExpression	& handle_req_start_time		1075394	0					
ANR	1080356	UnaryOperator	&		1075394	0					
ANR	1080357	Identifier	handle_req_start_time		1075394	1					
ANR	1080358	ExpressionStatement	"result = CallCommandHandler ( req , sock , false , true , sec_time , 0 )"	5444:2:166105:166212	1075394	4	True				
ANR	1080359	AssignmentExpression	"result = CallCommandHandler ( req , sock , false , true , sec_time , 0 )"		1075394	0		=			
ANR	1080360	Identifier	result		1075394	0					
ANR	1080361	CallExpression	"CallCommandHandler ( req , sock , false , true , sec_time , 0 )"		1075394	1					
ANR	1080362	Callee	CallCommandHandler		1075394	0					
ANR	1080363	Identifier	CallCommandHandler		1075394	0					
ANR	1080364	ArgumentList	req		1075394	1					
ANR	1080365	Argument	req		1075394	0					
ANR	1080366	Identifier	req		1075394	0					
ANR	1080367	Argument	sock		1075394	1					
ANR	1080368	Identifier	sock		1075394	0					
ANR	1080369	Argument	false		1075394	2					
ANR	1080370	Identifier	false		1075394	0					
ANR	1080371	Argument	true		1075394	3					
ANR	1080372	Identifier	true		1075394	0					
ANR	1080373	Argument	sec_time		1075394	4					
ANR	1080374	Identifier	sec_time		1075394	0					
ANR	1080375	Argument	0		1075394	5					
ANR	1080376	PrimaryExpression	0		1075394	0					
ANR	1080377	Label	finalize :	5447:0:166218:166226	1075394	33	True				
ANR	1080378	Identifier	finalize		1075394	0					
ANR	1080379	IfStatement	if ( the_policy )		1075394	34					
ANR	1080380	Condition	the_policy	5456:8:166702:166711	1075394	0	True				
ANR	1080381	Identifier	the_policy		1075394	0					
ANR	1080382	CompoundStatement		1217:20:39687:39687	1075394	1					
ANR	1080383	Statement	delete	5457:8:166724:166729	1075394	0	True				
ANR	1080384	ExpressionStatement	the_policy	5457:15:166731:166741	1075394	1	True				
ANR	1080385	Identifier	the_policy		1075394	0					
ANR	1080386	IfStatement	if ( the_key )		1075394	35					
ANR	1080387	Condition	the_key	5459:8:166757:166763	1075394	0	True				
ANR	1080388	Identifier	the_key		1075394	0					
ANR	1080389	CompoundStatement		1220:17:39739:39739	1075394	1					
ANR	1080390	Statement	delete	5460:8:166776:166781	1075394	0	True				
ANR	1080391	ExpressionStatement	the_key	5460:15:166783:166790	1075394	1	True				
ANR	1080392	Identifier	the_key		1075394	0					
ANR	1080393	IfStatement	if ( the_sid )		1075394	36					
ANR	1080394	Condition	the_sid	5462:8:166806:166812	1075394	0	True				
ANR	1080395	Identifier	the_sid		1075394	0					
ANR	1080396	CompoundStatement		1223:17:39788:39788	1075394	1					
ANR	1080397	ExpressionStatement	free ( the_sid )	5463:8:166825:166838	1075394	0	True				
ANR	1080398	CallExpression	free ( the_sid )		1075394	0					
ANR	1080399	Callee	free		1075394	0					
ANR	1080400	Identifier	free		1075394	0					
ANR	1080401	ArgumentList	the_sid		1075394	1					
ANR	1080402	Argument	the_sid		1075394	0					
ANR	1080403	Identifier	the_sid		1075394	0					
ANR	1080404	IfStatement	if ( who )		1075394	37					
ANR	1080405	Condition	who	5465:8:166854:166856	1075394	0	True				
ANR	1080406	Identifier	who		1075394	0					
ANR	1080407	CompoundStatement		1226:13:39832:39832	1075394	1					
ANR	1080408	ExpressionStatement	free ( who )	5466:8:166869:166878	1075394	0	True				
ANR	1080409	CallExpression	free ( who )		1075394	0					
ANR	1080410	Callee	free		1075394	0					
ANR	1080411	Identifier	free		1075394	0					
ANR	1080412	ArgumentList	who		1075394	1					
ANR	1080413	Argument	who		1075394	0					
ANR	1080414	Identifier	who		1075394	0					
ANR	1080415	IfStatement	if ( result != KEEP_STREAM )		1075394	38					
ANR	1080416	Condition	result != KEEP_STREAM	5468:6:166892:166912	1075394	0	True				
ANR	1080417	EqualityExpression	result != KEEP_STREAM		1075394	0		!=			
ANR	1080418	Identifier	result		1075394	0					
ANR	1080419	Identifier	KEEP_STREAM		1075394	1					
ANR	1080420	CompoundStatement		1229:30:39889:39889	1075394	1					
ANR	1080421	IfStatement	if ( is_tcp )		1075394	0					
ANR	1080422	Condition	is_tcp	5469:7:166925:166930	1075394	0	True				
ANR	1080423	Identifier	is_tcp		1075394	0					
ANR	1080424	CompoundStatement		1230:16:39907:39907	1075394	1					
ANR	1080425	ExpressionStatement	sock -> encode ( )	5470:3:166939:166953	1075394	0	True				
ANR	1080426	CallExpression	sock -> encode ( )		1075394	0					
ANR	1080427	Callee	sock -> encode		1075394	0					
ANR	1080428	PtrMemberAccess	sock -> encode		1075394	0					
ANR	1080429	Identifier	sock		1075394	0					
ANR	1080430	Identifier	encode		1075394	1					
ANR	1080431	ArgumentList			1075394	1					
ANR	1080432	ExpressionStatement	sock -> end_of_message ( )	5471:3:167008:167030	1075394	1	True				
ANR	1080433	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1080434	Callee	sock -> end_of_message		1075394	0					
ANR	1080435	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1080436	Identifier	sock		1075394	0					
ANR	1080437	Identifier	end_of_message		1075394	1					
ANR	1080438	ArgumentList			1075394	1					
ANR	1080439	IfStatement	if ( insock != sock )		1075394	2					
ANR	1080440	Condition	insock != sock	5472:8:167082:167095	1075394	0	True				
ANR	1080441	EqualityExpression	insock != sock		1075394	0		!=			
ANR	1080442	Identifier	insock		1075394	0					
ANR	1080443	Identifier	sock		1075394	1					
ANR	1080444	Statement	delete	5473:4:167157:167162	1075394	1	True				
ANR	1080445	ExpressionStatement	sock	5473:11:167164:167168	1075394	3	True				
ANR	1080446	Identifier	sock		1075394	0					
ANR	1080447	ElseStatement	else		1075394	0					
ANR	1080448	CompoundStatement		1235:9:40216:40216	1075394	0					
ANR	1080449	ExpressionStatement	sock -> decode ( )	5475:3:167248:167262	1075394	0	True				
ANR	1080450	CallExpression	sock -> decode ( )		1075394	0					
ANR	1080451	Callee	sock -> decode		1075394	0					
ANR	1080452	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1080453	Identifier	sock		1075394	0					
ANR	1080454	Identifier	decode		1075394	1					
ANR	1080455	ArgumentList			1075394	1					
ANR	1080456	ExpressionStatement	sock -> end_of_message ( )	5476:3:167267:167289	1075394	1	True				
ANR	1080457	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1080458	Callee	sock -> end_of_message		1075394	0					
ANR	1080459	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1080460	Identifier	sock		1075394	0					
ANR	1080461	Identifier	end_of_message		1075394	1					
ANR	1080462	ArgumentList			1075394	1					
ANR	1080463	ExpressionStatement	sock -> set_MD_mode ( MD_OFF )	5479:3:167334:167359	1075394	2	True				
ANR	1080464	CallExpression	sock -> set_MD_mode ( MD_OFF )		1075394	0					
ANR	1080465	Callee	sock -> set_MD_mode		1075394	0					
ANR	1080466	PtrMemberAccess	sock -> set_MD_mode		1075394	0					
ANR	1080467	Identifier	sock		1075394	0					
ANR	1080468	Identifier	set_MD_mode		1075394	1					
ANR	1080469	ArgumentList	MD_OFF		1075394	1					
ANR	1080470	Argument	MD_OFF		1075394	0					
ANR	1080471	Identifier	MD_OFF		1075394	0					
ANR	1080472	ExpressionStatement	"sock -> set_crypto_key ( false , NULL )"	5480:3:167364:167397	1075394	3	True				
ANR	1080473	CallExpression	"sock -> set_crypto_key ( false , NULL )"		1075394	0					
ANR	1080474	Callee	sock -> set_crypto_key		1075394	0					
ANR	1080475	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1080476	Identifier	sock		1075394	0					
ANR	1080477	Identifier	set_crypto_key		1075394	1					
ANR	1080478	ArgumentList	false		1075394	1					
ANR	1080479	Argument	false		1075394	0					
ANR	1080480	Identifier	false		1075394	0					
ANR	1080481	Argument	NULL		1075394	1					
ANR	1080482	Identifier	NULL		1075394	0					
ANR	1080483	ExpressionStatement	sock -> setFullyQualifiedUser ( NULL )	5483:3:167439:167472	1075394	4	True				
ANR	1080484	CallExpression	sock -> setFullyQualifiedUser ( NULL )		1075394	0					
ANR	1080485	Callee	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080486	PtrMemberAccess	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080487	Identifier	sock		1075394	0					
ANR	1080488	Identifier	setFullyQualifiedUser		1075394	1					
ANR	1080489	ArgumentList	NULL		1075394	1					
ANR	1080490	Argument	NULL		1075394	0					
ANR	1080491	Identifier	NULL		1075394	0					
ANR	1080492	ExpressionStatement	result = KEEP_STREAM	5485:3:167478:167498	1075394	5	True				
ANR	1080493	AssignmentExpression	result = KEEP_STREAM		1075394	0		=			
ANR	1080494	Identifier	result		1075394	0					
ANR	1080495	Identifier	KEEP_STREAM		1075394	1					
ANR	1080496	ElseStatement	else		1075394	0					
ANR	1080497	CompoundStatement		1249:8:40607:40607	1075394	0					
ANR	1080498	IfStatement	if ( ! is_tcp )		1075394	0					
ANR	1080499	Condition	! is_tcp	5489:6:167642:167648	1075394	0	True				
ANR	1080500	UnaryOperationExpression	! is_tcp		1075394	0					
ANR	1080501	UnaryOperator	!		1075394	0					
ANR	1080502	Identifier	is_tcp		1075394	1					
ANR	1080503	CompoundStatement		1250:15:40624:40624	1075394	1					
ANR	1080504	ExpressionStatement	sock -> decode ( )	5490:3:167656:167670	1075394	0	True				
ANR	1080505	CallExpression	sock -> decode ( )		1075394	0					
ANR	1080506	Callee	sock -> decode		1075394	0					
ANR	1080507	PtrMemberAccess	sock -> decode		1075394	0					
ANR	1080508	Identifier	sock		1075394	0					
ANR	1080509	Identifier	decode		1075394	1					
ANR	1080510	ArgumentList			1075394	1					
ANR	1080511	ExpressionStatement	sock -> end_of_message ( )	5491:3:167675:167697	1075394	1	True				
ANR	1080512	CallExpression	sock -> end_of_message ( )		1075394	0					
ANR	1080513	Callee	sock -> end_of_message		1075394	0					
ANR	1080514	PtrMemberAccess	sock -> end_of_message		1075394	0					
ANR	1080515	Identifier	sock		1075394	0					
ANR	1080516	Identifier	end_of_message		1075394	1					
ANR	1080517	ArgumentList			1075394	1					
ANR	1080518	ExpressionStatement	sock -> set_MD_mode ( MD_OFF )	5492:3:167702:167727	1075394	2	True				
ANR	1080519	CallExpression	sock -> set_MD_mode ( MD_OFF )		1075394	0					
ANR	1080520	Callee	sock -> set_MD_mode		1075394	0					
ANR	1080521	PtrMemberAccess	sock -> set_MD_mode		1075394	0					
ANR	1080522	Identifier	sock		1075394	0					
ANR	1080523	Identifier	set_MD_mode		1075394	1					
ANR	1080524	ArgumentList	MD_OFF		1075394	1					
ANR	1080525	Argument	MD_OFF		1075394	0					
ANR	1080526	Identifier	MD_OFF		1075394	0					
ANR	1080527	ExpressionStatement	"sock -> set_crypto_key ( false , NULL )"	5493:3:167732:167765	1075394	3	True				
ANR	1080528	CallExpression	"sock -> set_crypto_key ( false , NULL )"		1075394	0					
ANR	1080529	Callee	sock -> set_crypto_key		1075394	0					
ANR	1080530	PtrMemberAccess	sock -> set_crypto_key		1075394	0					
ANR	1080531	Identifier	sock		1075394	0					
ANR	1080532	Identifier	set_crypto_key		1075394	1					
ANR	1080533	ArgumentList	false		1075394	1					
ANR	1080534	Argument	false		1075394	0					
ANR	1080535	Identifier	false		1075394	0					
ANR	1080536	Argument	NULL		1075394	1					
ANR	1080537	Identifier	NULL		1075394	0					
ANR	1080538	ExpressionStatement	sock -> setFullyQualifiedUser ( NULL )	5494:3:167770:167803	1075394	4	True				
ANR	1080539	CallExpression	sock -> setFullyQualifiedUser ( NULL )		1075394	0					
ANR	1080540	Callee	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080541	PtrMemberAccess	sock -> setFullyQualifiedUser		1075394	0					
ANR	1080542	Identifier	sock		1075394	0					
ANR	1080543	Identifier	setFullyQualifiedUser		1075394	1					
ANR	1080544	ArgumentList	NULL		1075394	1					
ANR	1080545	Argument	NULL		1075394	0					
ANR	1080546	Identifier	NULL		1075394	0					
ANR	1080547	IfStatement	if ( result == KEEP_STREAM || insock != sock )		1075394	39					
ANR	1080548	Condition	result == KEEP_STREAM || insock != sock	5501:6:168028:168066	1075394	0	True				
ANR	1080549	OrExpression	result == KEEP_STREAM || insock != sock		1075394	0		||			
ANR	1080550	EqualityExpression	result == KEEP_STREAM		1075394	0		==			
ANR	1080551	Identifier	result		1075394	0					
ANR	1080552	Identifier	KEEP_STREAM		1075394	1					
ANR	1080553	EqualityExpression	insock != sock		1075394	1		!=			
ANR	1080554	Identifier	insock		1075394	0					
ANR	1080555	Identifier	sock		1075394	1					
ANR	1080556	ReturnStatement	return KEEP_STREAM ;	5502:2:168072:168090	1075394	1	True				
ANR	1080557	Identifier	KEEP_STREAM		1075394	0					
ANR	1080558	ElseStatement	else		1075394	0					
ANR	1080559	ReturnStatement	return TRUE ;	5504:2:168100:168111	1075394	0	True				
ANR	1080560	Identifier	TRUE		1075394	0					
ANR	1080561	ReturnType	int		1075394	1					
ANR	1080562	Identifier	DaemonCore :: HandleReq		1075394	2					
ANR	1080563	ParameterList	"Stream * insock , Stream * asock"		1075394	3					
ANR	1080564	Parameter	Stream * insock	4239:26:126995:127008	1075394	0	True				
ANR	1080565	ParameterType	Stream *		1075394	0					
ANR	1080566	Identifier	insock		1075394	1					
ANR	1080567	Parameter	Stream * asock	4239:42:127011:127023	1075394	1	True				
ANR	1080568	ParameterType	Stream *		1075394	0					
ANR	1080569	Identifier	asock		1075394	1					
ANR	1080570	CFGEntryNode	ENTRY		1075394		True				
ANR	1080571	CFGExitNode	EXIT		1075394		True				
ANR	1080572	Symbol	dur		1075394						
ANR	1080573	Symbol	ATTR_SEC_ENCRYPTION		1075394						
ANR	1080574	Symbol	* getSecMan		1075394						
ANR	1080575	Symbol	KEEP_STREAM		1075394						
ANR	1080576	Symbol	sock -> peer_addr		1075394						
ANR	1080577	Symbol	peer_version		1075394						
ANR	1080578	Symbol	the_policy -> LookupString		1075394						
ANR	1080579	Symbol	command_desc . Value		1075394						
ANR	1080580	Symbol	the_key		1075394						
ANR	1080581	Symbol	( ( SafeSock * ) sock ) -> isIncomingDataMD5ed		1075394						
ANR	1080582	Symbol	sess_id		1075394						
ANR	1080583	Symbol	& errstack		1075394						
ANR	1080584	Symbol	Verify		1075394						
ANR	1080585	Symbol	CommandNumToTableIndex		1075394						
ANR	1080586	Symbol	D_COMMAND		1075394						
ANR	1080587	Symbol	* session -> key ( )		1075394						
ANR	1080588	Symbol	* session -> key		1075394						
ANR	1080589	Symbol	SOAP_PERM		1075394						
ANR	1080590	Symbol	verinfo		1075394						
ANR	1080591	Symbol	asock		1075394						
ANR	1080592	Symbol	ATTR_SEC_SESSION_LEASE		1075394						
ANR	1080593	Symbol	ATTR_SEC_NEGOTIATION		1075394						
ANR	1080594	Symbol	insock -> type		1075394						
ANR	1080595	Symbol	* insock		1075394						
ANR	1080596	Symbol	param_integer		1075394						
ANR	1080597	Symbol	* session -> policy		1075394						
ANR	1080598	Symbol	valid_cookie		1075394						
ANR	1080599	Symbol	& remote_version		1075394						
ANR	1080600	Symbol	DC_AUTHENTICATE		1075394						
ANR	1080601	Symbol	* crypto_method		1075394						
ANR	1080602	Symbol	ATTR_SEC_COMMAND		1075394						
ANR	1080603	Symbol	ATTR_SEC_AUTHENTICATION		1075394						
ANR	1080604	Symbol	ATTR_SEC_TRIED_AUTHENTICATION		1075394						
ANR	1080605	Symbol	* * session		1075394						
ANR	1080606	Symbol	INVALID_SOCKET		1075394						
ANR	1080607	Symbol	result		1075394						
ANR	1080608	Symbol	ZZZ_always_increase		1075394						
ANR	1080609	Symbol	* sock		1075394						
ANR	1080610	Symbol	* session -> policy ( )		1075394						
ANR	1080611	Symbol	auth_info . initFromStream		1075394						
ANR	1080612	Symbol	mypid		1075394						
ANR	1080613	Symbol	ATTR_SEC_AUTH_COMMAND		1075394						
ANR	1080614	Symbol	SecMan :: sec_feat_act_rev		1075394						
ANR	1080615	Symbol	will_enable_encryption		1075394						
ANR	1080616	Symbol	& cmd_index		1075394						
ANR	1080617	Symbol	cleartext_info		1075394						
ANR	1080618	Symbol	u		1075394						
ANR	1080619	Symbol	comTable		1075394						
ANR	1080620	Symbol	reqFound		1075394						
ANR	1080621	Symbol	errstack . getFullText		1075394						
ANR	1080622	Symbol	session -> policy		1075394						
ANR	1080623	Symbol	the_policy -> put		1075394						
ANR	1080624	Symbol	& crypto_method		1075394						
ANR	1080625	Symbol	info_list . next		1075394						
ANR	1080626	Symbol	& our_policy		1075394						
ANR	1080627	Symbol	fully_qualified_user		1075394						
ANR	1080628	Symbol	* sec_man -> session_cache		1075394						
ANR	1080629	Symbol	ATTR_SEC_SERVER_PID		1075394						
ANR	1080630	Symbol	& ver_info		1075394						
ANR	1080631	Symbol	rkey		1075394						
ANR	1080632	Symbol	will_enable_integrity		1075394						
ANR	1080633	Symbol	method_used		1075394						
ANR	1080634	Symbol	& index		1075394						
ANR	1080635	Symbol	ReliSock :: relisock_listen		1075394						
ANR	1080636	Symbol	MSG_PEEK		1075394						
ANR	1080637	Symbol	ALLOW		1075394						
ANR	1080638	Symbol	req		1075394						
ANR	1080639	Symbol	ATTR_SEC_AUTHENTICATION_METHODS		1075394						
ANR	1080640	Symbol	comTable [ cmd_index ] . perm		1075394						
ANR	1080641	Symbol	ATTR_SEC_VALID_COMMANDS		1075394						
ANR	1080642	Symbol	sock -> _sock		1075394						
ANR	1080643	Symbol	sec_time		1075394						
ANR	1080644	Symbol	ATTR_SEC_SID		1075394						
ANR	1080645	Symbol	tmpStr . Value		1075394						
ANR	1080646	Symbol	param_boolean		1075394						
ANR	1080647	Symbol	D_FULLDEBUG		1075394						
ANR	1080648	Symbol	ATTR_SEC_NEW_SESSION		1075394						
ANR	1080649	Symbol	comTable [ index ] . force_authentication		1075394						
ANR	1080650	Symbol	sock -> isMappedFQU		1075394						
ANR	1080651	Symbol	SecMan :: SEC_FEAT_ACT_NO		1075394						
ANR	1080652	Symbol	incoming_cookie		1075394						
ANR	1080653	Symbol	( ( ReliSock * ) insock ) -> _state		1075394						
ANR	1080654	Symbol	* sec_man		1075394						
ANR	1080655	Symbol	strstr		1075394						
ANR	1080656	Symbol	ATTR_SEC_AUTHENTICATION_METHODS_LIST		1075394						
ANR	1080657	Symbol	tmp_cmd		1075394						
ANR	1080658	Symbol	( ( ReliSock * ) insock ) -> accept		1075394						
ANR	1080659	Symbol	return_addr		1075394						
ANR	1080660	Symbol	using_cookie		1075394						
ANR	1080661	Symbol	perm		1075394						
ANR	1080662	Symbol	D_SECURITY		1075394						
ANR	1080663	Symbol	sock -> end_of_message		1075394						
ANR	1080664	Symbol	crypto_method		1075394						
ANR	1080665	Symbol	session		1075394						
ANR	1080666	Symbol	tried_authentication		1075394						
ANR	1080667	Symbol	cmd_index		1075394						
ANR	1080668	Symbol	is_http_get		1075394						
ANR	1080669	Symbol	pa_ad . put		1075394						
ANR	1080670	Symbol	sock -> get_file_desc		1075394						
ANR	1080671	Symbol	now		1075394						
ANR	1080672	Symbol	sec_man -> FillInSecurityPolicyAd		1075394						
ANR	1080673	Symbol	ATTR_SEC_CRYPTO_METHODS		1075394						
ANR	1080674	Symbol	is_tcp		1075394						
ANR	1080675	Symbol	user . Value		1075394						
ANR	1080676	Symbol	& who		1075394						
ANR	1080677	Symbol	ATTR_SEC_SESSION_DURATION		1075394						
ANR	1080678	Symbol	cursoap		1075394						
ANR	1080679	Symbol	false		1075394						
ANR	1080680	Symbol	D_ALWAYS		1075394						
ANR	1080681	Symbol	GetCommandsInAuthLevel		1075394						
ANR	1080682	Symbol	info_list		1075394						
ANR	1080683	Symbol	ATTR_SEC_USER		1075394						
ANR	1080684	Symbol	sock -> authenticate		1075394						
ANR	1080685	Symbol	auth_info . LookupString		1075394						
ANR	1080686	Symbol	cookie_is_valid		1075394						
ANR	1080687	Symbol	rbuf		1075394						
ANR	1080688	Symbol	FALSE		1075394						
ANR	1080689	Symbol	session_lease		1075394						
ANR	1080690	Symbol	strdup		1075394						
ANR	1080691	Symbol	time		1075394						
ANR	1080692	Symbol	ATTR_SEC_INTEGRITY		1075394						
ANR	1080693	Symbol	comTable [ cmd_index ] . wait_for_payload		1075394						
ANR	1080694	Symbol	& incoming_cookie		1075394						
ANR	1080695	Symbol	will_authenticate		1075394						
ANR	1080696	Symbol	durint		1075394						
ANR	1080697	Symbol	( ( ReliSock * ) sock ) -> bytes_available_to_read		1075394						
ANR	1080698	Symbol	* cmd_index		1075394						
ANR	1080699	Symbol	& method_used		1075394						
ANR	1080700	Symbol	* index		1075394						
ANR	1080701	Symbol	the_policy		1075394						
ANR	1080702	Symbol	sec_man		1075394						
ANR	1080703	Symbol	( ( ReliSock * ) insock ) -> _special_state		1075394						
ANR	1080704	Symbol	* session		1075394						
ANR	1080705	Symbol	& handle_req_start_time		1075394						
ANR	1080706	Symbol	found_sess		1075394						
ANR	1080707	Symbol	CondorVersion		1075394						
ANR	1080708	Symbol	auth_required		1075394						
ANR	1080709	Symbol	tmp		1075394						
ANR	1080710	Symbol	insock		1075394						
ANR	1080711	Symbol	new_session		1075394						
ANR	1080712	Symbol	CONDOR_BLOWFISH		1075394						
ANR	1080713	Symbol	& dur		1075394						
ANR	1080714	Symbol	CONDOR_3DES		1075394						
ANR	1080715	Symbol	sock -> peer_description		1075394						
ANR	1080716	Symbol	ATTR_SEC_USE_SESSION		1075394						
ANR	1080717	Symbol	ip		1075394						
ANR	1080718	Symbol	index		1075394						
ANR	1080719	Symbol	sock -> set_crypto_key		1075394						
ANR	1080720	Symbol	getSecMan		1075394						
ANR	1080721	Symbol	( ( SafeSock * ) sock ) -> isIncomingDataEncrypted		1075394						
ANR	1080722	Symbol	user . Length		1075394						
ANR	1080723	Symbol	sec_man -> session_cache		1075394						
ANR	1080724	Symbol	errstack		1075394						
ANR	1080725	Symbol	ATTR_SEC_REMOTE_VERSION		1075394						
ANR	1080726	Symbol	PermString		1075394						
ANR	1080727	Symbol	SecMan :: SEC_REQ_REQUIRED		1075394						
ANR	1080728	Symbol	auth_success		1075394						
ANR	1080729	Symbol	& the_user		1075394						
ANR	1080730	Symbol	ATTR_SEC_SUBSYSTEM		1075394						
ANR	1080731	Symbol	verinfo . built_since_version		1075394						
ANR	1080732	Symbol	Condor_Crypt_Base :: randomKey		1075394						
ANR	1080733	Symbol	get_local_hostname ( ) . Value		1075394						
ANR	1080734	Symbol	session -> key		1075394						
ANR	1080735	Symbol	WRITE		1075394						
ANR	1080736	Symbol	"GetCommandsInAuthLevel ( comTable [ cmd_index ] . perm , sock -> isMappedFQU ( ) ) . Value"		1075394						
ANR	1080737	Symbol	* comTable		1075394						
ANR	1080738	Symbol	sec_man -> ReconcileSecurityPolicyAds		1075394						
ANR	1080739	Symbol	comTable [ index ] . dprintf_flag		1075394						
ANR	1080740	Symbol	ATTR_SEC_AUTH_REQUIRED		1075394						
ANR	1080741	Symbol	ver_info		1075394						
ANR	1080742	Symbol	sock -> isAuthenticated		1075394						
ANR	1080743	Symbol	atoi		1075394						
ANR	1080744	Symbol	sec_man -> sec_lookup_feat_act		1075394						
ANR	1080745	Symbol	toupper		1075394						
ANR	1080746	Symbol	pa_ad		1075394						
ANR	1080747	Symbol	* SecMan :: sec_feat_act_rev		1075394						
ANR	1080748	Symbol	& auth_methods		1075394						
ANR	1080749	Symbol	sock -> triedAuthentication		1075394						
ANR	1080750	Symbol	auth_methods		1075394						
ANR	1080751	Symbol	* * sec_man		1075394						
ANR	1080752	Symbol	SecMan :: SEC_FEAT_ACT_YES		1075394						
ANR	1080753	Symbol	the_user		1075394						
ANR	1080754	Symbol	handle_req_start_time		1075394						
ANR	1080755	Symbol	the_sid		1075394						
ANR	1080756	Symbol	ATTR_SEC_ENACT		1075394						
ANR	1080757	Symbol	ATTR_SEC_PARENT_UNIQUE_ID		1075394						
ANR	1080758	Symbol	sock -> peer_ip_str		1075394						
ANR	1080759	Symbol	return_address_ss		1075394						
ANR	1080760	Symbol	handler_start_time . difference		1075394						
ANR	1080761	Symbol	comTable [ index ] . command_descrip		1075394						
ANR	1080762	Symbol	sock -> set_MD_mode		1075394						
ANR	1080763	Symbol	command_desc		1075394						
ANR	1080764	Symbol	tmp_key		1075394						
ANR	1080765	Symbol	session -> id		1075394						
ANR	1080766	Symbol	NULL		1075394						
ANR	1080767	Symbol	comTable [ cmd_index ] . force_authentication		1075394						
ANR	1080768	Symbol	dc_soap_accept		1075394						
ANR	1080769	Symbol	CallCommandHandler		1075394						
ANR	1080770	Symbol	RegisterSocketForHandleReq		1075394						
ANR	1080771	Symbol	TRUE		1075394						
ANR	1080772	Symbol	DebugFlags		1075394						
ANR	1080773	Symbol	sec_man -> sec_lookup_req		1075394						
ANR	1080774	Symbol	& return_addr		1075394						
ANR	1080775	Symbol	READ		1075394						
ANR	1080776	Symbol	is_http_post		1075394						
ANR	1080777	Symbol	USER_AUTH_SUCCESS		1075394						
ANR	1080778	Symbol	comTable [ index ] . perm		1075394						
ANR	1080779	Symbol	user . IsEmpty		1075394						
ANR	1080780	Symbol	MD_ALWAYS_ON		1075394						
ANR	1080781	Symbol	true		1075394						
ANR	1080782	Symbol	tmpStr		1075394						
ANR	1080783	Symbol	USER_AUTH_FAILURE		1075394						
ANR	1080784	Symbol	soap		1075394						
ANR	1080785	Symbol	who		1075394						
ANR	1080786	Symbol	Sock :: sock_special		1075394						
ANR	1080787	Symbol	turn_encryption_on		1075394						
ANR	1080788	Symbol	our_policy		1075394						
ANR	1080789	Symbol	sec_man -> session_cache -> lookup		1075394						
ANR	1080790	Symbol	getSecMan ( ) -> getSecTimeout		1075394						
ANR	1080791	Symbol	slop		1075394						
ANR	1080792	Symbol	sock -> getFullyQualifiedUser		1075394						
ANR	1080793	Symbol	remote_version		1075394						
ANR	1080794	Symbol	* sec_man -> sec_lookup_feat_act		1075394						
ANR	1080795	Symbol	& the_sid		1075394						
ANR	1080796	Symbol	real_cmd		1075394						
ANR	1080797	Symbol	tmpbuf		1075394						
ANR	1080798	Symbol	auth_timeout		1075394						
ANR	1080799	Symbol	handler_start_time		1075394						
ANR	1080800	Symbol	expiration_time		1075394						
ANR	1080801	Symbol	MD_OFF		1075394						
ANR	1080802	Symbol	get_local_hostname		1075394						
ANR	1080803	Symbol	auth_info		1075394						
ANR	1080804	Symbol	sock		1075394						
ANR	1080805	Symbol	ATTR_SEC_COOKIE		1075394						
ANR	1080806	Symbol	* the_policy		1075394						
ANR	1080807	Symbol	sock -> code		1075394						
ANR	1080808	Symbol	ATTR_SEC_SERVER_COMMAND_SOCK		1075394						
ANR	1080809	Symbol	comTable [ cmd_index ] . command_descrip		1075394						
ANR	1080810	Symbol	user		1075394						
ANR	1080811	Function	DaemonCore :: HandleSigCommand	5508:0:168117:168482							
ANR	1080812	FunctionDef	"DaemonCore :: HandleSigCommand (int command , Stream * stream)"		1080811	0					
ANR	1080813	CompoundStatement		5508:62:168179:168482	1080811	0					
ANR	1080814	IdentifierDeclStatement	int sig = 0 ;	5509:1:168182:168193	1080811	0	True				
ANR	1080815	IdentifierDecl	sig = 0		1080811	0					
ANR	1080816	IdentifierDeclType	int		1080811	0					
ANR	1080817	Identifier	sig		1080811	1					
ANR	1080818	AssignmentExpression	sig = 0		1080811	2		=			
ANR	1080819	Identifier	sig		1080811	0					
ANR	1080820	PrimaryExpression	0		1080811	1					
ANR	1080821	ExpressionStatement	assert ( command == DC_RAISESIGNAL )	5511:1:168197:168232	1080811	1	True				
ANR	1080822	CallExpression	assert ( command == DC_RAISESIGNAL )		1080811	0					
ANR	1080823	Callee	assert		1080811	0					
ANR	1080824	Identifier	assert		1080811	0					
ANR	1080825	ArgumentList	command == DC_RAISESIGNAL		1080811	1					
ANR	1080826	Argument	command == DC_RAISESIGNAL		1080811	0					
ANR	1080827	EqualityExpression	command == DC_RAISESIGNAL		1080811	0		==			
ANR	1080828	Identifier	command		1080811	0					
ANR	1080829	Identifier	DC_RAISESIGNAL		1080811	1					
ANR	1080830	IfStatement	if ( ! stream -> code ( sig ) )		1080811	2					
ANR	1080831	Condition	! stream -> code ( sig )	5516:5:168331:168348	1080811	0	True				
ANR	1080832	UnaryOperationExpression	! stream -> code ( sig )		1080811	0					
ANR	1080833	UnaryOperator	!		1080811	0					
ANR	1080834	CallExpression	stream -> code ( sig )		1080811	1					
ANR	1080835	Callee	stream -> code		1080811	0					
ANR	1080836	PtrMemberAccess	stream -> code		1080811	0					
ANR	1080837	Identifier	stream		1080811	0					
ANR	1080838	Identifier	code		1080811	1					
ANR	1080839	ArgumentList	sig		1080811	1					
ANR	1080840	Argument	sig		1080811	0					
ANR	1080841	Identifier	sig		1080811	0					
ANR	1080842	ReturnStatement	return FALSE ;	5517:2:168353:168365	1080811	1	True				
ANR	1080843	Identifier	FALSE		1080811	0					
ANR	1080844	ExpressionStatement	stream -> end_of_message ( )	5519:1:168369:168393	1080811	3	True				
ANR	1080845	CallExpression	stream -> end_of_message ( )		1080811	0					
ANR	1080846	Callee	stream -> end_of_message		1080811	0					
ANR	1080847	PtrMemberAccess	stream -> end_of_message		1080811	0					
ANR	1080848	Identifier	stream		1080811	0					
ANR	1080849	Identifier	end_of_message		1080811	1					
ANR	1080850	ArgumentList			1080811	1					
ANR	1080851	ReturnStatement	"return ( HandleSig ( _DC_RAISESIGNAL , sig ) ) ;"	5522:1:168440:168480	1080811	4	True				
ANR	1080852	CallExpression	"HandleSig ( _DC_RAISESIGNAL , sig )"		1080811	0					
ANR	1080853	Callee	HandleSig		1080811	0					
ANR	1080854	Identifier	HandleSig		1080811	0					
ANR	1080855	ArgumentList	_DC_RAISESIGNAL		1080811	1					
ANR	1080856	Argument	_DC_RAISESIGNAL		1080811	0					
ANR	1080857	Identifier	_DC_RAISESIGNAL		1080811	0					
ANR	1080858	Argument	sig		1080811	1					
ANR	1080859	Identifier	sig		1080811	0					
ANR	1080860	ReturnType	int		1080811	1					
ANR	1080861	Identifier	DaemonCore :: HandleSigCommand		1080811	2					
ANR	1080862	ParameterList	"int command , Stream * stream"		1080811	3					
ANR	1080863	Parameter	int command	5508:33:168150:168160	1080811	0	True				
ANR	1080864	ParameterType	int		1080811	0					
ANR	1080865	Identifier	command		1080811	1					
ANR	1080866	Parameter	Stream * stream	5508:46:168163:168176	1080811	1	True				
ANR	1080867	ParameterType	Stream *		1080811	0					
ANR	1080868	Identifier	stream		1080811	1					
ANR	1080869	CFGEntryNode	ENTRY		1080811		True				
ANR	1080870	CFGExitNode	EXIT		1080811		True				
ANR	1080871	Symbol	sig		1080811						
ANR	1080872	Symbol	stream		1080811						
ANR	1080873	Symbol	stream -> code		1080811						
ANR	1080874	Symbol	DC_RAISESIGNAL		1080811						
ANR	1080875	Symbol	* stream		1080811						
ANR	1080876	Symbol	FALSE		1080811						
ANR	1080877	Symbol	_DC_RAISESIGNAL		1080811						
ANR	1080878	Symbol	HandleSig		1080811						
ANR	1080879	Symbol	command		1080811						
ANR	1080880	Function	DaemonCore :: HandleSig	5525:0:168485:170146							
ANR	1080881	FunctionDef	"DaemonCore :: HandleSig (int command , int sig)"		1080880	0					
ANR	1080882	CompoundStatement		5526:0:168532:170146	1080880	0					
ANR	1080883	IdentifierDeclStatement	"int j , index ;"	5527:1:168535:168546	1080880	0	True				
ANR	1080884	IdentifierDecl	j		1080880	0					
ANR	1080885	IdentifierDeclType	int		1080880	0					
ANR	1080886	Identifier	j		1080880	1					
ANR	1080887	IdentifierDecl	index		1080880	1					
ANR	1080888	IdentifierDeclType	int		1080880	0					
ANR	1080889	Identifier	index		1080880	1					
ANR	1080890	IdentifierDeclStatement	int sigFound ;	5528:1:168549:168561	1080880	1	True				
ANR	1080891	IdentifierDecl	sigFound		1080880	0					
ANR	1080892	IdentifierDeclType	int		1080880	0					
ANR	1080893	Identifier	sigFound		1080880	1					
ANR	1080894	IfStatement	if ( sig < 0 )		1080880	2					
ANR	1080895	Condition	sig < 0	5532:6:168636:168642	1080880	0	True				
ANR	1080896	RelationalExpression	sig < 0		1080880	0		<			
ANR	1080897	Identifier	sig		1080880	0					
ANR	1080898	PrimaryExpression	0		1080880	1					
ANR	1080899	ExpressionStatement	index = - sig % maxSig	5533:2:168648:168669	1080880	1	True				
ANR	1080900	AssignmentExpression	index = - sig % maxSig		1080880	0		=			
ANR	1080901	Identifier	index		1080880	0					
ANR	1080902	MultiplicativeExpression	- sig % maxSig		1080880	1		%			
ANR	1080903	UnaryOperationExpression	- sig		1080880	0					
ANR	1080904	UnaryOperator	-		1080880	0					
ANR	1080905	Identifier	sig		1080880	1					
ANR	1080906	Identifier	maxSig		1080880	1					
ANR	1080907	ElseStatement	else		1080880	0					
ANR	1080908	ExpressionStatement	index = sig % maxSig	5535:2:168679:168699	1080880	0	True				
ANR	1080909	AssignmentExpression	index = sig % maxSig		1080880	0		=			
ANR	1080910	Identifier	index		1080880	0					
ANR	1080911	MultiplicativeExpression	sig % maxSig		1080880	1		%			
ANR	1080912	Identifier	sig		1080880	0					
ANR	1080913	Identifier	maxSig		1080880	1					
ANR	1080914	ExpressionStatement	sigFound = FALSE	5537:1:168703:168719	1080880	3	True				
ANR	1080915	AssignmentExpression	sigFound = FALSE		1080880	0		=			
ANR	1080916	Identifier	sigFound		1080880	0					
ANR	1080917	Identifier	FALSE		1080880	1					
ANR	1080918	IfStatement	if ( sigTable [ index ] . num == sig )		1080880	4					
ANR	1080919	Condition	sigTable [ index ] . num == sig	5538:5:168726:168751	1080880	0	True				
ANR	1080920	EqualityExpression	sigTable [ index ] . num == sig		1080880	0		==			
ANR	1080921	MemberAccess	sigTable [ index ] . num		1080880	0					
ANR	1080922	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1080923	Identifier	sigTable		1080880	0					
ANR	1080924	Identifier	index		1080880	1					
ANR	1080925	Identifier	num		1080880	1					
ANR	1080926	Identifier	sig		1080880	1					
ANR	1080927	CompoundStatement		13:33:221:221	1080880	1					
ANR	1080928	ExpressionStatement	sigFound = TRUE	5540:2:168795:168810	1080880	0	True				
ANR	1080929	AssignmentExpression	sigFound = TRUE		1080880	0		=			
ANR	1080930	Identifier	sigFound		1080880	0					
ANR	1080931	Identifier	TRUE		1080880	1					
ANR	1080932	ElseStatement	else		1080880	0					
ANR	1080933	CompoundStatement		16:8:287:287	1080880	0					
ANR	1080934	ForStatement	for ( j = ( index + 1 ) % maxSig ; j != index ; j = ( j + 1 ) % maxSig )		1080880	0					
ANR	1080935	ForInit	j = ( index + 1 ) % maxSig ;	5543:7:168870:168894	1080880	0	True				
ANR	1080936	AssignmentExpression	j = ( index + 1 ) % maxSig		1080880	0		=			
ANR	1080937	Identifier	j		1080880	0					
ANR	1080938	MultiplicativeExpression	( index + 1 ) % maxSig		1080880	1		%			
ANR	1080939	AdditiveExpression	index + 1		1080880	0		+			
ANR	1080940	Identifier	index		1080880	0					
ANR	1080941	PrimaryExpression	1		1080880	1					
ANR	1080942	Identifier	maxSig		1080880	1					
ANR	1080943	Condition	j != index	5543:33:168896:168905	1080880	1	True				
ANR	1080944	EqualityExpression	j != index		1080880	0		!=			
ANR	1080945	Identifier	j		1080880	0					
ANR	1080946	Identifier	index		1080880	1					
ANR	1080947	AssignmentExpression	j = ( j + 1 ) % maxSig	5543:45:168908:168927	1080880	2	True	=			
ANR	1080948	Identifier	j		1080880	0					
ANR	1080949	MultiplicativeExpression	( j + 1 ) % maxSig		1080880	1		%			
ANR	1080950	AdditiveExpression	j + 1		1080880	0		+			
ANR	1080951	Identifier	j		1080880	0					
ANR	1080952	PrimaryExpression	1		1080880	1					
ANR	1080953	Identifier	maxSig		1080880	1					
ANR	1080954	IfStatement	if ( sigTable [ j ] . num == sig )		1080880	3					
ANR	1080955	Condition	sigTable [ j ] . num == sig	5544:6:168936:168957	1080880	0	True				
ANR	1080956	EqualityExpression	sigTable [ j ] . num == sig		1080880	0		==			
ANR	1080957	MemberAccess	sigTable [ j ] . num		1080880	0					
ANR	1080958	ArrayIndexing	sigTable [ j ]		1080880	0					
ANR	1080959	Identifier	sigTable		1080880	0					
ANR	1080960	Identifier	j		1080880	1					
ANR	1080961	Identifier	num		1080880	1					
ANR	1080962	Identifier	sig		1080880	1					
ANR	1080963	CompoundStatement		19:30:427:427	1080880	1					
ANR	1080964	ExpressionStatement	sigFound = TRUE	5545:4:168966:168981	1080880	0	True				
ANR	1080965	AssignmentExpression	sigFound = TRUE		1080880	0		=			
ANR	1080966	Identifier	sigFound		1080880	0					
ANR	1080967	Identifier	TRUE		1080880	1					
ANR	1080968	ExpressionStatement	index = j	5546:4:168987:168996	1080880	1	True				
ANR	1080969	AssignmentExpression	index = j		1080880	0		=			
ANR	1080970	Identifier	index		1080880	0					
ANR	1080971	Identifier	j		1080880	1					
ANR	1080972	BreakStatement	break ;	5547:4:169002:169007	1080880	2	True				
ANR	1080973	IfStatement	if ( sigFound == FALSE )		1080880	5					
ANR	1080974	Condition	sigFound == FALSE	5551:6:169024:169040	1080880	0	True				
ANR	1080975	EqualityExpression	sigFound == FALSE		1080880	0		==			
ANR	1080976	Identifier	sigFound		1080880	0					
ANR	1080977	Identifier	FALSE		1080880	1					
ANR	1080978	CompoundStatement		26:26:511:511	1080880	1					
ANR	1080979	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: received request for unregistered Signal %d !\\n"" , sig )"	5552:2:169048:169135	1080880	0	True				
ANR	1080980	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: received request for unregistered Signal %d !\\n"" , sig )"		1080880	0					
ANR	1080981	Callee	dprintf		1080880	0					
ANR	1080982	Identifier	dprintf		1080880	0					
ANR	1080983	ArgumentList	D_ALWAYS		1080880	1					
ANR	1080984	Argument	D_ALWAYS		1080880	0					
ANR	1080985	Identifier	D_ALWAYS		1080880	0					
ANR	1080986	Argument	"""DaemonCore: received request for unregistered Signal %d !\\n"""		1080880	1					
ANR	1080987	PrimaryExpression	"""DaemonCore: received request for unregistered Signal %d !\\n"""		1080880	0					
ANR	1080988	Argument	sig		1080880	2					
ANR	1080989	Identifier	sig		1080880	0					
ANR	1080990	ReturnStatement	return FALSE ;	5554:2:169139:169151	1080880	1	True				
ANR	1080991	Identifier	FALSE		1080880	0					
ANR	1080992	SwitchStatement	switch ( command )		1080880	6					
ANR	1080993	Condition	command	5557:9:169166:169172	1080880	0	True				
ANR	1080994	Identifier	command		1080880	0					
ANR	1080995	CompoundStatement		32:18:642:642	1080880	1					
ANR	1080996	Label	case _DC_RAISESIGNAL :	5558:2:169179:169199	1080880	0	True				
ANR	1080997	Identifier	_DC_RAISESIGNAL		1080880	0					
ANR	1080998	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: received Signal %d (%s), raising event %s\\n"" , sig , sigTable [ index ] . sig_descrip , sigTable [ index ] . handler_descrip )"	5559:3:169204:169359	1080880	1	True				
ANR	1080999	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: received Signal %d (%s), raising event %s\\n"" , sig , sigTable [ index ] . sig_descrip , sigTable [ index ] . handler_descrip )"		1080880	0					
ANR	1081000	Callee	dprintf		1080880	0					
ANR	1081001	Identifier	dprintf		1080880	0					
ANR	1081002	ArgumentList	D_DAEMONCORE		1080880	1					
ANR	1081003	Argument	D_DAEMONCORE		1080880	0					
ANR	1081004	Identifier	D_DAEMONCORE		1080880	0					
ANR	1081005	Argument	"""DaemonCore: received Signal %d (%s), raising event %s\\n"""		1080880	1					
ANR	1081006	PrimaryExpression	"""DaemonCore: received Signal %d (%s), raising event %s\\n"""		1080880	0					
ANR	1081007	Argument	sig		1080880	2					
ANR	1081008	Identifier	sig		1080880	0					
ANR	1081009	Argument	sigTable [ index ] . sig_descrip		1080880	3					
ANR	1081010	MemberAccess	sigTable [ index ] . sig_descrip		1080880	0					
ANR	1081011	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081012	Identifier	sigTable		1080880	0					
ANR	1081013	Identifier	index		1080880	1					
ANR	1081014	Identifier	sig_descrip		1080880	1					
ANR	1081015	Argument	sigTable [ index ] . handler_descrip		1080880	4					
ANR	1081016	MemberAccess	sigTable [ index ] . handler_descrip		1080880	0					
ANR	1081017	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081018	Identifier	sigTable		1080880	0					
ANR	1081019	Identifier	index		1080880	1					
ANR	1081020	Identifier	handler_descrip		1080880	1					
ANR	1081021	ExpressionStatement	sigTable [ index ] . is_pending = TRUE	5565:3:169484:169517	1080880	2	True				
ANR	1081022	AssignmentExpression	sigTable [ index ] . is_pending = TRUE		1080880	0		=			
ANR	1081023	MemberAccess	sigTable [ index ] . is_pending		1080880	0					
ANR	1081024	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081025	Identifier	sigTable		1080880	0					
ANR	1081026	Identifier	index		1080880	1					
ANR	1081027	Identifier	is_pending		1080880	1					
ANR	1081028	Identifier	TRUE		1080880	1					
ANR	1081029	BreakStatement	break ;	5566:3:169522:169527	1080880	3	True				
ANR	1081030	Label	case _DC_BLOCKSIGNAL :	5567:2:169531:169551	1080880	4	True				
ANR	1081031	Identifier	_DC_BLOCKSIGNAL		1080880	0					
ANR	1081032	ExpressionStatement	sigTable [ index ] . is_blocked = TRUE	5568:3:169556:169589	1080880	5	True				
ANR	1081033	AssignmentExpression	sigTable [ index ] . is_blocked = TRUE		1080880	0		=			
ANR	1081034	MemberAccess	sigTable [ index ] . is_blocked		1080880	0					
ANR	1081035	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081036	Identifier	sigTable		1080880	0					
ANR	1081037	Identifier	index		1080880	1					
ANR	1081038	Identifier	is_blocked		1080880	1					
ANR	1081039	Identifier	TRUE		1080880	1					
ANR	1081040	BreakStatement	break ;	5569:3:169594:169599	1080880	6	True				
ANR	1081041	Label	case _DC_UNBLOCKSIGNAL :	5570:2:169603:169625	1080880	7	True				
ANR	1081042	Identifier	_DC_UNBLOCKSIGNAL		1080880	0					
ANR	1081043	ExpressionStatement	sigTable [ index ] . is_blocked = FALSE	5571:3:169630:169664	1080880	8	True				
ANR	1081044	AssignmentExpression	sigTable [ index ] . is_blocked = FALSE		1080880	0		=			
ANR	1081045	MemberAccess	sigTable [ index ] . is_blocked		1080880	0					
ANR	1081046	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081047	Identifier	sigTable		1080880	0					
ANR	1081048	Identifier	index		1080880	1					
ANR	1081049	Identifier	is_blocked		1080880	1					
ANR	1081050	Identifier	FALSE		1080880	1					
ANR	1081051	IfStatement	if ( sigTable [ index ] . is_pending == TRUE )		1080880	9					
ANR	1081052	Condition	sigTable [ index ] . is_pending == TRUE	5576:8:169910:169943	1080880	0	True				
ANR	1081053	EqualityExpression	sigTable [ index ] . is_pending == TRUE		1080880	0		==			
ANR	1081054	MemberAccess	sigTable [ index ] . is_pending		1080880	0					
ANR	1081055	ArrayIndexing	sigTable [ index ]		1080880	0					
ANR	1081056	Identifier	sigTable		1080880	0					
ANR	1081057	Identifier	index		1080880	1					
ANR	1081058	Identifier	is_pending		1080880	1					
ANR	1081059	Identifier	TRUE		1080880	1					
ANR	1081060	ExpressionStatement	sent_signal = TRUE	5577:4:169951:169969	1080880	1	True				
ANR	1081061	AssignmentExpression	sent_signal = TRUE		1080880	0		=			
ANR	1081062	Identifier	sent_signal		1080880	0					
ANR	1081063	Identifier	TRUE		1080880	1					
ANR	1081064	BreakStatement	break ;	5578:3:169974:169979	1080880	10	True				
ANR	1081065	Label	default :	5579:2:169983:169990	1080880	11	True				
ANR	1081066	Identifier	default		1080880	0					
ANR	1081067	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: HandleSig(): unrecognized command\\n"" )"	5580:3:169995:170071	1080880	12	True				
ANR	1081068	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: HandleSig(): unrecognized command\\n"" )"		1080880	0					
ANR	1081069	Callee	dprintf		1080880	0					
ANR	1081070	Identifier	dprintf		1080880	0					
ANR	1081071	ArgumentList	D_DAEMONCORE		1080880	1					
ANR	1081072	Argument	D_DAEMONCORE		1080880	0					
ANR	1081073	Identifier	D_DAEMONCORE		1080880	0					
ANR	1081074	Argument	"""DaemonCore: HandleSig(): unrecognized command\\n"""		1080880	1					
ANR	1081075	PrimaryExpression	"""DaemonCore: HandleSig(): unrecognized command\\n"""		1080880	0					
ANR	1081076	ReturnStatement	return FALSE ;	5582:3:170076:170088	1080880	13	True				
ANR	1081077	Identifier	FALSE		1080880	0					
ANR	1081078	BreakStatement	break ;	5583:3:170093:170098	1080880	14	True				
ANR	1081079	ReturnStatement	return TRUE ;	5587:1:170133:170144	1080880	7	True				
ANR	1081080	Identifier	TRUE		1080880	0					
ANR	1081081	ReturnType	int		1080880	1					
ANR	1081082	Identifier	DaemonCore :: HandleSig		1080880	2					
ANR	1081083	ParameterList	"int command , int sig"		1080880	3					
ANR	1081084	Parameter	int command	5525:26:168511:168521	1080880	0	True				
ANR	1081085	ParameterType	int		1080880	0					
ANR	1081086	Identifier	command		1080880	1					
ANR	1081087	Parameter	int sig	5525:38:168523:168529	1080880	1	True				
ANR	1081088	ParameterType	int		1080880	0					
ANR	1081089	Identifier	sig		1080880	1					
ANR	1081090	CFGEntryNode	ENTRY		1080880		True				
ANR	1081091	CFGExitNode	EXIT		1080880		True				
ANR	1081092	Symbol	maxSig		1080880						
ANR	1081093	Symbol	sigTable [ index ] . is_blocked		1080880						
ANR	1081094	Symbol	sent_signal		1080880						
ANR	1081095	Symbol	D_DAEMONCORE		1080880						
ANR	1081096	Symbol	* index		1080880						
ANR	1081097	Symbol	sigTable [ index ] . sig_descrip		1080880						
ANR	1081098	Symbol	D_ALWAYS		1080880						
ANR	1081099	Symbol	index		1080880						
ANR	1081100	Symbol	TRUE		1080880						
ANR	1081101	Symbol	j		1080880						
ANR	1081102	Symbol	command		1080880						
ANR	1081103	Symbol	sig		1080880						
ANR	1081104	Symbol	sigTable [ index ] . num		1080880						
ANR	1081105	Symbol	* sigTable		1080880						
ANR	1081106	Symbol	* j		1080880						
ANR	1081107	Symbol	sigTable [ index ] . is_pending		1080880						
ANR	1081108	Symbol	sigFound		1080880						
ANR	1081109	Symbol	sigTable		1080880						
ANR	1081110	Symbol	sigTable [ j ] . num		1080880						
ANR	1081111	Symbol	FALSE		1080880						
ANR	1081112	Symbol	sigTable [ index ] . handler_descrip		1080880						
ANR	1081113	DeclStmt									
ANR	1081114	Decl							char const	char const *	status
ANR	1081115	Function	DCSignalMsg :: signalName	5624:0:170896:171449							
ANR	1081116	FunctionDef	DCSignalMsg :: signalName ()		1081115	0					
ANR	1081117	CompoundStatement		5625:0:170934:171449	1081115	0					
ANR	1081118	SwitchStatement	switch ( theSignal ( ) )		1081115	0					
ANR	1081119	Condition	theSignal ( )	5626:8:170944:170954	1081115	0	True				
ANR	1081120	CallExpression	theSignal ( )		1081115	0					
ANR	1081121	Callee	theSignal		1081115	0					
ANR	1081122	Identifier	theSignal		1081115	0					
ANR	1081123	ArgumentList			1081115	1					
ANR	1081124	CompoundStatement		2:21:22:22	1081115	1					
ANR	1081125	Label	case SIGUSR1 :	5627:1:170960:170972	1081115	0	True				
ANR	1081126	Identifier	SIGUSR1		1081115	0					
ANR	1081127	ReturnStatement	"return ""SIGUSR1"" ;"	5628:2:170976:170992	1081115	1	True				
ANR	1081128	PrimaryExpression	"""SIGUSR1"""		1081115	0					
ANR	1081129	Label	case SIGUSR2 :	5629:1:170995:171007	1081115	2	True				
ANR	1081130	Identifier	SIGUSR2		1081115	0					
ANR	1081131	ReturnStatement	"return ""SIGUSR2"" ;"	5630:2:171011:171027	1081115	3	True				
ANR	1081132	PrimaryExpression	"""SIGUSR2"""		1081115	0					
ANR	1081133	Label	case SIGTERM :	5631:1:171030:171042	1081115	4	True				
ANR	1081134	Identifier	SIGTERM		1081115	0					
ANR	1081135	ReturnStatement	"return ""SIGTERM"" ;"	5632:2:171046:171062	1081115	5	True				
ANR	1081136	PrimaryExpression	"""SIGTERM"""		1081115	0					
ANR	1081137	Label	case SIGSTOP :	5633:1:171065:171077	1081115	6	True				
ANR	1081138	Identifier	SIGSTOP		1081115	0					
ANR	1081139	ReturnStatement	"return ""SIGSTOP"" ;"	5634:2:171081:171097	1081115	7	True				
ANR	1081140	PrimaryExpression	"""SIGSTOP"""		1081115	0					
ANR	1081141	Label	case SIGCONT :	5635:1:171100:171112	1081115	8	True				
ANR	1081142	Identifier	SIGCONT		1081115	0					
ANR	1081143	ReturnStatement	"return ""SIGCONT"" ;"	5636:2:171116:171132	1081115	9	True				
ANR	1081144	PrimaryExpression	"""SIGCONT"""		1081115	0					
ANR	1081145	Label	case SIGQUIT :	5637:1:171135:171147	1081115	10	True				
ANR	1081146	Identifier	SIGQUIT		1081115	0					
ANR	1081147	ReturnStatement	"return ""SIGQUIT"" ;"	5638:2:171151:171167	1081115	11	True				
ANR	1081148	PrimaryExpression	"""SIGQUIT"""		1081115	0					
ANR	1081149	Label	case SIGKILL :	5639:1:171170:171182	1081115	12	True				
ANR	1081150	Identifier	SIGKILL		1081115	0					
ANR	1081151	ReturnStatement	"return ""SIGKILL"" ;"	5640:2:171186:171202	1081115	13	True				
ANR	1081152	PrimaryExpression	"""SIGKILL"""		1081115	0					
ANR	1081153	IdentifierDeclStatement	char const * sigName = getCommandString ( theSignal ( ) ) ;	5645:1:171277:171328	1081115	1	True				
ANR	1081154	IdentifierDecl	* sigName = getCommandString ( theSignal ( ) )		1081115	0					
ANR	1081155	IdentifierDeclType	char const *		1081115	0					
ANR	1081156	Identifier	sigName		1081115	1					
ANR	1081157	AssignmentExpression	* sigName = getCommandString ( theSignal ( ) )		1081115	2		=			
ANR	1081158	Identifier	sigName		1081115	0					
ANR	1081159	CallExpression	getCommandString ( theSignal ( ) )		1081115	1					
ANR	1081160	Callee	getCommandString		1081115	0					
ANR	1081161	Identifier	getCommandString		1081115	0					
ANR	1081162	ArgumentList	theSignal ( )		1081115	1					
ANR	1081163	Argument	theSignal ( )		1081115	0					
ANR	1081164	CallExpression	theSignal ( )		1081115	0					
ANR	1081165	Callee	theSignal		1081115	0					
ANR	1081166	Identifier	theSignal		1081115	0					
ANR	1081167	ArgumentList			1081115	1					
ANR	1081168	IfStatement	if ( ! sigName )		1081115	2					
ANR	1081169	Condition	! sigName	5646:4:171334:171341	1081115	0	True				
ANR	1081170	UnaryOperationExpression	! sigName		1081115	0					
ANR	1081171	UnaryOperator	!		1081115	0					
ANR	1081172	Identifier	sigName		1081115	1					
ANR	1081173	CompoundStatement		22:14:409:409	1081115	1					
ANR	1081174	ReturnStatement	"return """" ;"	5648:2:171418:171427	1081115	0	True				
ANR	1081175	PrimaryExpression	""""""		1081115	0					
ANR	1081176	ReturnStatement	return sigName ;	5650:1:171433:171447	1081115	3	True				
ANR	1081177	Identifier	sigName		1081115	0					
ANR	1081178	ReturnType	char const *		1081115	1					
ANR	1081179	Identifier	DCSignalMsg :: signalName		1081115	2					
ANR	1081180	ParameterList			1081115	3					
ANR	1081181	CFGEntryNode	ENTRY		1081115		True				
ANR	1081182	CFGExitNode	EXIT		1081115		True				
ANR	1081183	Symbol	theSignal		1081115						
ANR	1081184	Symbol	sigName		1081115						
ANR	1081185	Symbol	getCommandString		1081115						
ANR	1081186	Function	DaemonCore :: Send_Signal	5653:0:171452:171733							
ANR	1081187	FunctionDef	"DaemonCore :: Send_Signal (pid_t pid , int sig)"		1081186	0					
ANR	1081188	CompoundStatement		5654:0:171501:171733	1081186	0					
ANR	1081189	IdentifierDeclStatement	"classy_counted_ptr < DCSignalMsg > msg = new DCSignalMsg ( pid , sig ) ;"	5655:1:171504:171566	1081186	0	True				
ANR	1081190	IdentifierDecl	"msg = new DCSignalMsg ( pid , sig )"		1081186	0					
ANR	1081191	IdentifierDeclType	classy_counted_ptr < DCSignalMsg >		1081186	0					
ANR	1081192	Identifier	msg		1081186	1					
ANR	1081193	AssignmentExpression	"msg = new DCSignalMsg ( pid , sig )"		1081186	2		=			
ANR	1081194	Identifier	msg		1081186	0					
ANR	1081195	Expression	"pid , sig"		1081186	1					
ANR	1081196	Identifier	pid		1081186	0					
ANR	1081197	Identifier	sig		1081186	1					
ANR	1081198	ExpressionStatement	"Send_Signal ( msg , false )"	5656:1:171569:171592	1081186	1	True				
ANR	1081199	CallExpression	"Send_Signal ( msg , false )"		1081186	0					
ANR	1081200	Callee	Send_Signal		1081186	0					
ANR	1081201	Identifier	Send_Signal		1081186	0					
ANR	1081202	ArgumentList	msg		1081186	1					
ANR	1081203	Argument	msg		1081186	0					
ANR	1081204	Identifier	msg		1081186	0					
ANR	1081205	Argument	false		1081186	1					
ANR	1081206	Identifier	false		1081186	0					
ANR	1081207	ReturnStatement	return msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED ;	5660:1:171674:171731	1081186	2	True				
ANR	1081208	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		1081186	0		==			
ANR	1081209	CallExpression	msg -> deliveryStatus ( )		1081186	0					
ANR	1081210	Callee	msg -> deliveryStatus		1081186	0					
ANR	1081211	PtrMemberAccess	msg -> deliveryStatus		1081186	0					
ANR	1081212	Identifier	msg		1081186	0					
ANR	1081213	Identifier	deliveryStatus		1081186	1					
ANR	1081214	ArgumentList			1081186	1					
ANR	1081215	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081186	1					
ANR	1081216	ReturnType	bool		1081186	1					
ANR	1081217	Identifier	DaemonCore :: Send_Signal		1081186	2					
ANR	1081218	ParameterList	"pid_t pid , int sig"		1081186	3					
ANR	1081219	Parameter	pid_t pid	5653:29:171481:171489	1081186	0	True				
ANR	1081220	ParameterType	pid_t		1081186	0					
ANR	1081221	Identifier	pid		1081186	1					
ANR	1081222	Parameter	int sig	5653:40:171492:171498	1081186	1	True				
ANR	1081223	ParameterType	int		1081186	0					
ANR	1081224	Identifier	sig		1081186	1					
ANR	1081225	CFGEntryNode	ENTRY		1081186		True				
ANR	1081226	CFGExitNode	EXIT		1081186		True				
ANR	1081227	Symbol	sig		1081186						
ANR	1081228	Symbol	msg		1081186						
ANR	1081229	Symbol	DCMsg :: DELIVERY_SUCCEEDED		1081186						
ANR	1081230	Symbol	msg -> deliveryStatus		1081186						
ANR	1081231	Symbol	false		1081186						
ANR	1081232	Symbol	pid		1081186						
ANR	1081233	Symbol	* msg		1081186						
ANR	1081234	Function	DaemonCore :: Send_Signal_nonblocking	5663:0:171736:172437							
ANR	1081235	FunctionDef	DaemonCore :: Send_Signal_nonblocking (classy_counted_ptr < DCSignalMsg > msg)		1081234	0					
ANR	1081236	CompoundStatement		5663:78:171814:172437	1081234	0					
ANR	1081237	ExpressionStatement	"Send_Signal ( msg , true )"	5664:1:171817:171841	1081234	0	True				
ANR	1081238	CallExpression	"Send_Signal ( msg , true )"		1081234	0					
ANR	1081239	Callee	Send_Signal		1081234	0					
ANR	1081240	Identifier	Send_Signal		1081234	0					
ANR	1081241	ArgumentList	msg		1081234	1					
ANR	1081242	Argument	msg		1081234	0					
ANR	1081243	Identifier	msg		1081234	0					
ANR	1081244	Argument	true		1081234	1					
ANR	1081245	Identifier	true		1081234	0					
ANR	1081246	IfStatement	if ( ! msg -> messengerDelivery ( ) )		1081234	1					
ANR	1081247	Condition	! msg -> messengerDelivery ( )	5670:5:172004:172028	1081234	0	True				
ANR	1081248	UnaryOperationExpression	! msg -> messengerDelivery ( )		1081234	0					
ANR	1081249	UnaryOperator	!		1081234	0					
ANR	1081250	CallExpression	msg -> messengerDelivery ( )		1081234	1					
ANR	1081251	Callee	msg -> messengerDelivery		1081234	0					
ANR	1081252	PtrMemberAccess	msg -> messengerDelivery		1081234	0					
ANR	1081253	Identifier	msg		1081234	0					
ANR	1081254	Identifier	messengerDelivery		1081234	1					
ANR	1081255	ArgumentList			1081234	1					
ANR	1081256	CompoundStatement		8:33:217:217	1081234	1					
ANR	1081257	SwitchStatement	switch ( msg -> deliveryStatus ( ) )		1081234	0					
ANR	1081258	Condition	msg -> deliveryStatus ( )	5671:10:172044:172064	1081234	0	True				
ANR	1081259	CallExpression	msg -> deliveryStatus ( )		1081234	0					
ANR	1081260	Callee	msg -> deliveryStatus		1081234	0					
ANR	1081261	PtrMemberAccess	msg -> deliveryStatus		1081234	0					
ANR	1081262	Identifier	msg		1081234	0					
ANR	1081263	Identifier	deliveryStatus		1081234	1					
ANR	1081264	ArgumentList			1081234	1					
ANR	1081265	CompoundStatement		9:34:253:253	1081234	1					
ANR	1081266	Label	case DCMsg :: DELIVERY_SUCCEEDED :	5672:2:172072:172102	1081234	0	True				
ANR	1081267	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081234	0					
ANR	1081268	ExpressionStatement	"msg -> messageSent ( NULL , NULL )"	5673:3:172107:172137	1081234	1	True				
ANR	1081269	CallExpression	"msg -> messageSent ( NULL , NULL )"		1081234	0					
ANR	1081270	Callee	msg -> messageSent		1081234	0					
ANR	1081271	PtrMemberAccess	msg -> messageSent		1081234	0					
ANR	1081272	Identifier	msg		1081234	0					
ANR	1081273	Identifier	messageSent		1081234	1					
ANR	1081274	ArgumentList	NULL		1081234	1					
ANR	1081275	Argument	NULL		1081234	0					
ANR	1081276	Identifier	NULL		1081234	0					
ANR	1081277	Argument	NULL		1081234	1					
ANR	1081278	Identifier	NULL		1081234	0					
ANR	1081279	BreakStatement	break ;	5674:3:172142:172147	1081234	2	True				
ANR	1081280	Label	case DCMsg :: DELIVERY_FAILED :	5675:2:172151:172178	1081234	3	True				
ANR	1081281	Identifier	DCMsg :: DELIVERY_FAILED		1081234	0					
ANR	1081282	Label	case DCMsg :: DELIVERY_PENDING :	5676:2:172182:172210	1081234	4	True				
ANR	1081283	Identifier	DCMsg :: DELIVERY_PENDING		1081234	0					
ANR	1081284	Label	case DCMsg :: DELIVERY_CANCELED :	5677:2:172214:172243	1081234	5	True				
ANR	1081285	Identifier	DCMsg :: DELIVERY_CANCELED		1081234	0					
ANR	1081286	ExpressionStatement	msg -> messageSendFailed ( NULL )	5681:3:172388:172418	1081234	6	True				
ANR	1081287	CallExpression	msg -> messageSendFailed ( NULL )		1081234	0					
ANR	1081288	Callee	msg -> messageSendFailed		1081234	0					
ANR	1081289	PtrMemberAccess	msg -> messageSendFailed		1081234	0					
ANR	1081290	Identifier	msg		1081234	0					
ANR	1081291	Identifier	messageSendFailed		1081234	1					
ANR	1081292	ArgumentList	NULL		1081234	1					
ANR	1081293	Argument	NULL		1081234	0					
ANR	1081294	Identifier	NULL		1081234	0					
ANR	1081295	BreakStatement	break ;	5682:3:172423:172428	1081234	7	True				
ANR	1081296	ReturnType	void		1081234	1					
ANR	1081297	Identifier	DaemonCore :: Send_Signal_nonblocking		1081234	2					
ANR	1081298	ParameterList	classy_counted_ptr < DCSignalMsg > msg		1081234	3					
ANR	1081299	Parameter	classy_counted_ptr < DCSignalMsg > msg	5663:41:171777:171811	1081234	0	True				
ANR	1081300	ParameterType	classy_counted_ptr < DCSignalMsg >		1081234	0					
ANR	1081301	Identifier	msg		1081234	1					
ANR	1081302	CFGEntryNode	ENTRY		1081234		True				
ANR	1081303	CFGExitNode	EXIT		1081234		True				
ANR	1081304	Symbol	msg		1081234						
ANR	1081305	Symbol	NULL		1081234						
ANR	1081306	Symbol	msg -> deliveryStatus		1081234						
ANR	1081307	Symbol	msg -> messengerDelivery		1081234						
ANR	1081308	Symbol	true		1081234						
ANR	1081309	Symbol	* msg		1081234						
ANR	1081310	Function	DaemonCore :: Send_Signal	5687:0:172440:179578							
ANR	1081311	FunctionDef	"DaemonCore :: Send_Signal (classy_counted_ptr < DCSignalMsg > msg , bool nonblocking)"		1081310	0					
ANR	1081312	CompoundStatement		5688:0:172524:179578	1081310	0					
ANR	1081313	IdentifierDeclStatement	pid_t pid = msg -> thePid ( ) ;	5689:1:172527:172552	1081310	0	True				
ANR	1081314	IdentifierDecl	pid = msg -> thePid ( )		1081310	0					
ANR	1081315	IdentifierDeclType	pid_t		1081310	0					
ANR	1081316	Identifier	pid		1081310	1					
ANR	1081317	AssignmentExpression	pid = msg -> thePid ( )		1081310	2		=			
ANR	1081318	Identifier	pid		1081310	0					
ANR	1081319	CallExpression	msg -> thePid ( )		1081310	1					
ANR	1081320	Callee	msg -> thePid		1081310	0					
ANR	1081321	PtrMemberAccess	msg -> thePid		1081310	0					
ANR	1081322	Identifier	msg		1081310	0					
ANR	1081323	Identifier	thePid		1081310	1					
ANR	1081324	ArgumentList			1081310	1					
ANR	1081325	IdentifierDeclStatement	int sig = msg -> theSignal ( ) ;	5690:1:172555:172581	1081310	1	True				
ANR	1081326	IdentifierDecl	sig = msg -> theSignal ( )		1081310	0					
ANR	1081327	IdentifierDeclType	int		1081310	0					
ANR	1081328	Identifier	sig		1081310	1					
ANR	1081329	AssignmentExpression	sig = msg -> theSignal ( )		1081310	2		=			
ANR	1081330	Identifier	sig		1081310	0					
ANR	1081331	CallExpression	msg -> theSignal ( )		1081310	1					
ANR	1081332	Callee	msg -> theSignal		1081310	0					
ANR	1081333	PtrMemberAccess	msg -> theSignal		1081310	0					
ANR	1081334	Identifier	msg		1081310	0					
ANR	1081335	Identifier	theSignal		1081310	1					
ANR	1081336	ArgumentList			1081310	1					
ANR	1081337	IdentifierDeclStatement	PidEntry * pidinfo = NULL ;	5691:1:172584:172609	1081310	2	True				
ANR	1081338	IdentifierDecl	* pidinfo = NULL		1081310	0					
ANR	1081339	IdentifierDeclType	PidEntry *		1081310	0					
ANR	1081340	Identifier	pidinfo		1081310	1					
ANR	1081341	AssignmentExpression	* pidinfo = NULL		1081310	2		=			
ANR	1081342	Identifier	NULL		1081310	0					
ANR	1081343	Identifier	NULL		1081310	1					
ANR	1081344	IdentifierDeclStatement	"int same_thread , is_local ;"	5692:1:172612:172637	1081310	3	True				
ANR	1081345	IdentifierDecl	same_thread		1081310	0					
ANR	1081346	IdentifierDeclType	int		1081310	0					
ANR	1081347	Identifier	same_thread		1081310	1					
ANR	1081348	IdentifierDecl	is_local		1081310	1					
ANR	1081349	IdentifierDeclType	int		1081310	0					
ANR	1081350	Identifier	is_local		1081310	1					
ANR	1081351	IdentifierDeclStatement	char const * destination ;	5693:1:172640:172663	1081310	4	True				
ANR	1081352	IdentifierDecl	* destination		1081310	0					
ANR	1081353	IdentifierDeclType	char const *		1081310	0					
ANR	1081354	Identifier	destination		1081310	1					
ANR	1081355	IdentifierDeclStatement	int target_has_dcpm = TRUE ;	5694:1:172666:172692	1081310	5	True				
ANR	1081356	IdentifierDecl	target_has_dcpm = TRUE		1081310	0					
ANR	1081357	IdentifierDeclType	int		1081310	0					
ANR	1081358	Identifier	target_has_dcpm		1081310	1					
ANR	1081359	AssignmentExpression	target_has_dcpm = TRUE		1081310	2		=			
ANR	1081360	Identifier	TRUE		1081310	0					
ANR	1081361	Identifier	TRUE		1081310	1					
ANR	1081362	IdentifierDeclStatement	int signed_pid = ( int ) pid ;	5698:1:172871:172897	1081310	6	True				
ANR	1081363	IdentifierDecl	signed_pid = ( int ) pid		1081310	0					
ANR	1081364	IdentifierDeclType	int		1081310	0					
ANR	1081365	Identifier	signed_pid		1081310	1					
ANR	1081366	AssignmentExpression	signed_pid = ( int ) pid		1081310	2		=			
ANR	1081367	Identifier	signed_pid		1081310	0					
ANR	1081368	CastExpression	( int ) pid		1081310	1					
ANR	1081369	CastTarget	int		1081310	0					
ANR	1081370	Identifier	pid		1081310	1					
ANR	1081371	IfStatement	if ( signed_pid > - 10 && signed_pid < 3 )		1081310	7					
ANR	1081372	Condition	signed_pid > - 10 && signed_pid < 3	5699:6:172905:172938	1081310	0	True				
ANR	1081373	AndExpression	signed_pid > - 10 && signed_pid < 3		1081310	0		&&			
ANR	1081374	RelationalExpression	signed_pid > - 10		1081310	0		>			
ANR	1081375	Identifier	signed_pid		1081310	0					
ANR	1081376	UnaryOperationExpression	- 10		1081310	1					
ANR	1081377	UnaryOperator	-		1081310	0					
ANR	1081378	PrimaryExpression	10		1081310	1					
ANR	1081379	RelationalExpression	signed_pid < 3		1081310	1		<			
ANR	1081380	Identifier	signed_pid		1081310	0					
ANR	1081381	PrimaryExpression	3		1081310	1					
ANR	1081382	CompoundStatement		12:43:417:417	1081310	1					
ANR	1081383	ExpressionStatement	"EXCEPT ( ""Send_Signal: sent unsafe pid (%d)"" , signed_pid )"	5700:2:172946:173000	1081310	0	True				
ANR	1081384	CallExpression	"EXCEPT ( ""Send_Signal: sent unsafe pid (%d)"" , signed_pid )"		1081310	0					
ANR	1081385	Callee	EXCEPT		1081310	0					
ANR	1081386	Identifier	EXCEPT		1081310	0					
ANR	1081387	ArgumentList	"""Send_Signal: sent unsafe pid (%d)"""		1081310	1					
ANR	1081388	Argument	"""Send_Signal: sent unsafe pid (%d)"""		1081310	0					
ANR	1081389	PrimaryExpression	"""Send_Signal: sent unsafe pid (%d)"""		1081310	0					
ANR	1081390	Argument	signed_pid		1081310	1					
ANR	1081391	Identifier	signed_pid		1081310	0					
ANR	1081392	IfStatement	if ( pid != mypid )		1081310	8					
ANR	1081393	Condition	pid != mypid	5705:6:173158:173169	1081310	0	True				
ANR	1081394	EqualityExpression	pid != mypid		1081310	0		!=			
ANR	1081395	Identifier	pid		1081310	0					
ANR	1081396	Identifier	mypid		1081310	1					
ANR	1081397	CompoundStatement		18:21:648:648	1081310	1					
ANR	1081398	IfStatement	"if ( pidTable -> lookup ( pid , pidinfo ) < 0 )"		1081310	0					
ANR	1081399	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	5706:7:173182:173214	1081310	0	True				
ANR	1081400	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1081310	0		<			
ANR	1081401	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1081310	0					
ANR	1081402	Callee	pidTable -> lookup		1081310	0					
ANR	1081403	PtrMemberAccess	pidTable -> lookup		1081310	0					
ANR	1081404	Identifier	pidTable		1081310	0					
ANR	1081405	Identifier	lookup		1081310	1					
ANR	1081406	ArgumentList	pid		1081310	1					
ANR	1081407	Argument	pid		1081310	0					
ANR	1081408	Identifier	pid		1081310	0					
ANR	1081409	Argument	pidinfo		1081310	1					
ANR	1081410	Identifier	pidinfo		1081310	0					
ANR	1081411	PrimaryExpression	0		1081310	1					
ANR	1081412	CompoundStatement		19:43:693:693	1081310	1					
ANR	1081413	ExpressionStatement	pidinfo = NULL	5708:3:173271:173285	1081310	0	True				
ANR	1081414	AssignmentExpression	pidinfo = NULL		1081310	0		=			
ANR	1081415	Identifier	pidinfo		1081310	0					
ANR	1081416	Identifier	NULL		1081310	1					
ANR	1081417	ExpressionStatement	target_has_dcpm = FALSE	5709:3:173290:173313	1081310	1	True				
ANR	1081418	AssignmentExpression	target_has_dcpm = FALSE		1081310	0		=			
ANR	1081419	Identifier	target_has_dcpm		1081310	0					
ANR	1081420	Identifier	FALSE		1081310	1					
ANR	1081421	IfStatement	if ( pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0' )		1081310	1					
ANR	1081422	Condition	pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0'	5711:7:173326:173369	1081310	0	True				
ANR	1081423	AndExpression	pidinfo && pidinfo -> sinful_string [ 0 ] == '\\0'		1081310	0		&&			
ANR	1081424	Identifier	pidinfo		1081310	0					
ANR	1081425	EqualityExpression	pidinfo -> sinful_string [ 0 ] == '\\0'		1081310	1		==			
ANR	1081426	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		1081310	0					
ANR	1081427	PtrMemberAccess	pidinfo -> sinful_string		1081310	0					
ANR	1081428	Identifier	pidinfo		1081310	0					
ANR	1081429	Identifier	sinful_string		1081310	1					
ANR	1081430	PrimaryExpression	0		1081310	1					
ANR	1081431	PrimaryExpression	'\\0'		1081310	1					
ANR	1081432	CompoundStatement		24:54:848:848	1081310	1					
ANR	1081433	ExpressionStatement	target_has_dcpm = FALSE	5714:3:173486:173509	1081310	0	True				
ANR	1081434	AssignmentExpression	target_has_dcpm = FALSE		1081310	0		=			
ANR	1081435	Identifier	target_has_dcpm		1081310	0					
ANR	1081436	Identifier	FALSE		1081310	1					
ANR	1081437	IfStatement	if ( ProcessExitedButNotReaped ( pid ) )		1081310	9					
ANR	1081438	Condition	ProcessExitedButNotReaped ( pid )	5718:5:173524:173553	1081310	0	True				
ANR	1081439	CallExpression	ProcessExitedButNotReaped ( pid )		1081310	0					
ANR	1081440	Callee	ProcessExitedButNotReaped		1081310	0					
ANR	1081441	Identifier	ProcessExitedButNotReaped		1081310	0					
ANR	1081442	ArgumentList	pid		1081310	1					
ANR	1081443	Argument	pid		1081310	0					
ANR	1081444	Identifier	pid		1081310	0					
ANR	1081445	CompoundStatement		31:38:1032:1032	1081310	1					
ANR	1081446	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_FAILED )	5719:2:173561:173606	1081310	0	True				
ANR	1081447	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_FAILED )		1081310	0					
ANR	1081448	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081449	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081450	Identifier	msg		1081310	0					
ANR	1081451	Identifier	deliveryStatus		1081310	1					
ANR	1081452	ArgumentList	DCMsg :: DELIVERY_FAILED		1081310	1					
ANR	1081453	Argument	DCMsg :: DELIVERY_FAILED		1081310	0					
ANR	1081454	Identifier	DCMsg :: DELIVERY_FAILED		1081310	0					
ANR	1081455	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"" , sig , pid )"	5720:2:173610:173735	1081310	1	True				
ANR	1081456	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"" , sig , pid )"		1081310	0					
ANR	1081457	Callee	dprintf		1081310	0					
ANR	1081458	Identifier	dprintf		1081310	0					
ANR	1081459	ArgumentList	D_ALWAYS		1081310	1					
ANR	1081460	Argument	D_ALWAYS		1081310	0					
ANR	1081461	Identifier	D_ALWAYS		1081310	0					
ANR	1081462	Argument	"""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"""		1081310	1					
ANR	1081463	PrimaryExpression	"""Send_Signal: attempt to send signal %d to process %d, which has exited but not yet been reaped.\\n"""		1081310	0					
ANR	1081464	Argument	sig		1081310	2					
ANR	1081465	Identifier	sig		1081310	0					
ANR	1081466	Argument	pid		1081310	3					
ANR	1081467	Identifier	pid		1081310	0					
ANR	1081468	ReturnStatement	return ;	5721:2:173739:173745	1081310	2	True				
ANR	1081469	IfStatement	"if ( privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false ) )"		1081310	10					
ANR	1081470	Condition	"privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false )"	5727:5:173890:173944	1081310	0	True				
ANR	1081471	OrExpression	"privsep_enabled ( ) || param_boolean ( ""GLEXEC_JOB"" , false )"		1081310	0		||			
ANR	1081472	CallExpression	privsep_enabled ( )		1081310	0					
ANR	1081473	Callee	privsep_enabled		1081310	0					
ANR	1081474	Identifier	privsep_enabled		1081310	0					
ANR	1081475	ArgumentList			1081310	1					
ANR	1081476	CallExpression	"param_boolean ( ""GLEXEC_JOB"" , false )"		1081310	1					
ANR	1081477	Callee	param_boolean		1081310	0					
ANR	1081478	Identifier	param_boolean		1081310	0					
ANR	1081479	ArgumentList	"""GLEXEC_JOB"""		1081310	1					
ANR	1081480	Argument	"""GLEXEC_JOB"""		1081310	0					
ANR	1081481	PrimaryExpression	"""GLEXEC_JOB"""		1081310	0					
ANR	1081482	Argument	false		1081310	1					
ANR	1081483	Identifier	false		1081310	0					
ANR	1081484	CompoundStatement		40:62:1422:1422	1081310	1					
ANR	1081485	IfStatement	if ( ! target_has_dcpm && pidinfo && pidinfo -> new_process_group )		1081310	0					
ANR	1081486	Condition	! target_has_dcpm && pidinfo && pidinfo -> new_process_group	5728:6:173955:174011	1081310	0	True				
ANR	1081487	AndExpression	! target_has_dcpm && pidinfo && pidinfo -> new_process_group		1081310	0		&&			
ANR	1081488	UnaryOperationExpression	! target_has_dcpm		1081310	0					
ANR	1081489	UnaryOperator	!		1081310	0					
ANR	1081490	Identifier	target_has_dcpm		1081310	1					
ANR	1081491	AndExpression	pidinfo && pidinfo -> new_process_group		1081310	1		&&			
ANR	1081492	Identifier	pidinfo		1081310	0					
ANR	1081493	PtrMemberAccess	pidinfo -> new_process_group		1081310	1					
ANR	1081494	Identifier	pidinfo		1081310	0					
ANR	1081495	Identifier	new_process_group		1081310	1					
ANR	1081496	CompoundStatement		43:3:1528:1578	1081310	1					
ANR	1081497	ExpressionStatement	ASSERT ( m_proc_family != NULL )	5729:3:174019:174048	1081310	0	True				
ANR	1081498	CallExpression	ASSERT ( m_proc_family != NULL )		1081310	0					
ANR	1081499	Callee	ASSERT		1081310	0					
ANR	1081500	Identifier	ASSERT		1081310	0					
ANR	1081501	ArgumentList	m_proc_family != NULL		1081310	1					
ANR	1081502	Argument	m_proc_family != NULL		1081310	0					
ANR	1081503	EqualityExpression	m_proc_family != NULL		1081310	0		!=			
ANR	1081504	Identifier	m_proc_family		1081310	0					
ANR	1081505	Identifier	NULL		1081310	1					
ANR	1081506	IdentifierDeclStatement	"bool ok = m_proc_family -> signal_process ( pid , sig ) ;"	5730:3:174053:174103	1081310	1	True				
ANR	1081507	IdentifierDecl	"ok = m_proc_family -> signal_process ( pid , sig )"		1081310	0					
ANR	1081508	IdentifierDeclType	bool		1081310	0					
ANR	1081509	Identifier	ok		1081310	1					
ANR	1081510	AssignmentExpression	"ok = m_proc_family -> signal_process ( pid , sig )"		1081310	2		=			
ANR	1081511	Identifier	ok		1081310	0					
ANR	1081512	CallExpression	"m_proc_family -> signal_process ( pid , sig )"		1081310	1					
ANR	1081513	Callee	m_proc_family -> signal_process		1081310	0					
ANR	1081514	PtrMemberAccess	m_proc_family -> signal_process		1081310	0					
ANR	1081515	Identifier	m_proc_family		1081310	0					
ANR	1081516	Identifier	signal_process		1081310	1					
ANR	1081517	ArgumentList	pid		1081310	1					
ANR	1081518	Argument	pid		1081310	0					
ANR	1081519	Identifier	pid		1081310	0					
ANR	1081520	Argument	sig		1081310	1					
ANR	1081521	Identifier	sig		1081310	0					
ANR	1081522	IfStatement	if ( ok )		1081310	2					
ANR	1081523	Condition	ok	5731:7:174112:174113	1081310	0	True				
ANR	1081524	Identifier	ok		1081310	0					
ANR	1081525	CompoundStatement		44:11:1591:1591	1081310	1					
ANR	1081526	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5733:4:174150:174198	1081310	0	True				
ANR	1081527	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081528	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081529	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081530	Identifier	msg		1081310	0					
ANR	1081531	Identifier	deliveryStatus		1081310	1					
ANR	1081532	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081533	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081534	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081535	ElseStatement	else		1081310	0					
ANR	1081536	CompoundStatement		47:10:1685:1685	1081310	0					
ANR	1081537	ExpressionStatement	"dprintf ( D_ALWAYS , ""error using procd to send signal %d to pid %u\\n"" , sig , pid )"	5735:4:174216:174330	1081310	0	True				
ANR	1081538	CallExpression	"dprintf ( D_ALWAYS , ""error using procd to send signal %d to pid %u\\n"" , sig , pid )"		1081310	0					
ANR	1081539	Callee	dprintf		1081310	0					
ANR	1081540	Identifier	dprintf		1081310	0					
ANR	1081541	ArgumentList	D_ALWAYS		1081310	1					
ANR	1081542	Argument	D_ALWAYS		1081310	0					
ANR	1081543	Identifier	D_ALWAYS		1081310	0					
ANR	1081544	Argument	"""error using procd to send signal %d to pid %u\\n"""		1081310	1					
ANR	1081545	PrimaryExpression	"""error using procd to send signal %d to pid %u\\n"""		1081310	0					
ANR	1081546	Argument	sig		1081310	2					
ANR	1081547	Identifier	sig		1081310	0					
ANR	1081548	Argument	pid		1081310	3					
ANR	1081549	Identifier	pid		1081310	0					
ANR	1081550	ReturnStatement	return ;	5740:3:174340:174346	1081310	3	True				
ANR	1081551	ElseStatement	else		1081310	0					
ANR	1081552	ExpressionStatement	same_thread = FALSE	5845:2:177432:177451	1081310	0	True				
ANR	1081553	AssignmentExpression	same_thread = FALSE		1081310	0		=			
ANR	1081554	Identifier	same_thread		1081310	0					
ANR	1081555	Identifier	FALSE		1081310	1					
ANR	1081556	SwitchStatement	switch ( sig )		1081310	11					
ANR	1081557	Condition	sig	5746:9:174467:174469	1081310	0	True				
ANR	1081558	Identifier	sig		1081310	0					
ANR	1081559	CompoundStatement		59:14:1947:1947	1081310	1					
ANR	1081560	Label	case SIGKILL :	5747:2:174476:174488	1081310	0	True				
ANR	1081561	Identifier	SIGKILL		1081310	0					
ANR	1081562	IfStatement	if ( Shutdown_Fast ( pid ) )		1081310	1					
ANR	1081563	Condition	Shutdown_Fast ( pid )	5748:7:174497:174514	1081310	0	True				
ANR	1081564	CallExpression	Shutdown_Fast ( pid )		1081310	0					
ANR	1081565	Callee	Shutdown_Fast		1081310	0					
ANR	1081566	Identifier	Shutdown_Fast		1081310	0					
ANR	1081567	ArgumentList	pid		1081310	1					
ANR	1081568	Argument	pid		1081310	0					
ANR	1081569	Identifier	pid		1081310	0					
ANR	1081570	CompoundStatement		61:28:1993:1993	1081310	1					
ANR	1081571	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5749:4:174524:174572	1081310	0	True				
ANR	1081572	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081573	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081574	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081575	Identifier	msg		1081310	0					
ANR	1081576	Identifier	deliveryStatus		1081310	1					
ANR	1081577	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081578	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081579	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081580	ReturnStatement	return ;	5751:3:174582:174588	1081310	2	True				
ANR	1081581	BreakStatement	break ;	5752:3:174593:174598	1081310	3	True				
ANR	1081582	Label	case SIGSTOP :	5753:2:174602:174614	1081310	4	True				
ANR	1081583	Identifier	SIGSTOP		1081310	0					
ANR	1081584	IfStatement	if ( Suspend_Process ( pid ) )		1081310	5					
ANR	1081585	Condition	Suspend_Process ( pid )	5754:7:174623:174642	1081310	0	True				
ANR	1081586	CallExpression	Suspend_Process ( pid )		1081310	0					
ANR	1081587	Callee	Suspend_Process		1081310	0					
ANR	1081588	Identifier	Suspend_Process		1081310	0					
ANR	1081589	ArgumentList	pid		1081310	1					
ANR	1081590	Argument	pid		1081310	0					
ANR	1081591	Identifier	pid		1081310	0					
ANR	1081592	CompoundStatement		67:30:2121:2121	1081310	1					
ANR	1081593	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5755:4:174652:174700	1081310	0	True				
ANR	1081594	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081595	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081596	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081597	Identifier	msg		1081310	0					
ANR	1081598	Identifier	deliveryStatus		1081310	1					
ANR	1081599	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081600	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081601	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081602	ReturnStatement	return ;	5757:3:174710:174716	1081310	6	True				
ANR	1081603	BreakStatement	break ;	5758:3:174721:174726	1081310	7	True				
ANR	1081604	Label	case SIGCONT :	5759:2:174730:174742	1081310	8	True				
ANR	1081605	Identifier	SIGCONT		1081310	0					
ANR	1081606	IfStatement	if ( Continue_Process ( pid ) )		1081310	9					
ANR	1081607	Condition	Continue_Process ( pid )	5760:7:174751:174771	1081310	0	True				
ANR	1081608	CallExpression	Continue_Process ( pid )		1081310	0					
ANR	1081609	Callee	Continue_Process		1081310	0					
ANR	1081610	Identifier	Continue_Process		1081310	0					
ANR	1081611	ArgumentList	pid		1081310	1					
ANR	1081612	Argument	pid		1081310	0					
ANR	1081613	Identifier	pid		1081310	0					
ANR	1081614	CompoundStatement		73:31:2250:2250	1081310	1					
ANR	1081615	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5761:4:174781:174829	1081310	0	True				
ANR	1081616	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081617	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081618	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081619	Identifier	msg		1081310	0					
ANR	1081620	Identifier	deliveryStatus		1081310	1					
ANR	1081621	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081622	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081623	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081624	ReturnStatement	return ;	5763:3:174839:174845	1081310	10	True				
ANR	1081625	BreakStatement	break ;	5764:3:174850:174855	1081310	11	True				
ANR	1081626	Label	case SIGTERM :	5766:2:174872:174884	1081310	12	True				
ANR	1081627	Identifier	SIGTERM		1081310	0					
ANR	1081628	IfStatement	if ( pid != mypid && target_has_dcpm == FALSE )		1081310	13					
ANR	1081629	Condition	pid != mypid && target_has_dcpm == FALSE	5772:8:175147:175186	1081310	0	True				
ANR	1081630	AndExpression	pid != mypid && target_has_dcpm == FALSE		1081310	0		&&			
ANR	1081631	EqualityExpression	pid != mypid		1081310	0		!=			
ANR	1081632	Identifier	pid		1081310	0					
ANR	1081633	Identifier	mypid		1081310	1					
ANR	1081634	EqualityExpression	target_has_dcpm == FALSE		1081310	1		==			
ANR	1081635	Identifier	target_has_dcpm		1081310	0					
ANR	1081636	Identifier	FALSE		1081310	1					
ANR	1081637	CompoundStatement		85:51:2665:2665	1081310	1					
ANR	1081638	IfStatement	if ( Shutdown_Graceful ( pid ) )		1081310	0					
ANR	1081639	Condition	Shutdown_Graceful ( pid )	5773:8:175200:175221	1081310	0	True				
ANR	1081640	CallExpression	Shutdown_Graceful ( pid )		1081310	0					
ANR	1081641	Callee	Shutdown_Graceful		1081310	0					
ANR	1081642	Identifier	Shutdown_Graceful		1081310	0					
ANR	1081643	ArgumentList	pid		1081310	1					
ANR	1081644	Argument	pid		1081310	0					
ANR	1081645	Identifier	pid		1081310	0					
ANR	1081646	CompoundStatement		86:33:2700:2700	1081310	1					
ANR	1081647	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5774:5:175232:175280	1081310	0	True				
ANR	1081648	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081649	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081650	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081651	Identifier	msg		1081310	0					
ANR	1081652	Identifier	deliveryStatus		1081310	1					
ANR	1081653	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081654	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081655	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081656	ReturnStatement	return ;	5776:4:175292:175298	1081310	1	True				
ANR	1081657	BreakStatement	break ;	5778:3:175308:175313	1081310	14	True				
ANR	1081658	Label	default :	5780:2:175324:175331	1081310	15	True				
ANR	1081659	Identifier	default		1081310	0					
ANR	1081660	CompoundStatement		95:3:2827:2848	1081310	16					
ANR	1081661	IdentifierDeclStatement	bool use_kill = false ;	5782:3:175352:175373	1081310	0	True				
ANR	1081662	IdentifierDecl	use_kill = false		1081310	0					
ANR	1081663	IdentifierDeclType	bool		1081310	0					
ANR	1081664	Identifier	use_kill		1081310	1					
ANR	1081665	AssignmentExpression	use_kill = false		1081310	2		=			
ANR	1081666	Identifier	false		1081310	0					
ANR	1081667	Identifier	false		1081310	1					
ANR	1081668	IfStatement	if ( pid == mypid )		1081310	1					
ANR	1081669	Condition	pid == mypid	5783:7:175382:175393	1081310	0	True				
ANR	1081670	EqualityExpression	pid == mypid		1081310	0		==			
ANR	1081671	Identifier	pid		1081310	0					
ANR	1081672	Identifier	mypid		1081310	1					
ANR	1081673	CompoundStatement		96:22:2872:2872	1081310	1					
ANR	1081674	ExpressionStatement	use_kill = false	5787:4:175554:175570	1081310	0	True				
ANR	1081675	AssignmentExpression	use_kill = false		1081310	0		=			
ANR	1081676	Identifier	use_kill		1081310	0					
ANR	1081677	Identifier	false		1081310	1					
ANR	1081678	ElseStatement	else		1081310	0					
ANR	1081679	IfStatement	if ( target_has_dcpm == FALSE )		1081310	0					
ANR	1081680	Condition	target_has_dcpm == FALSE	5789:12:175589:175612	1081310	0	True				
ANR	1081681	EqualityExpression	target_has_dcpm == FALSE		1081310	0		==			
ANR	1081682	Identifier	target_has_dcpm		1081310	0					
ANR	1081683	Identifier	FALSE		1081310	1					
ANR	1081684	CompoundStatement		102:39:3091:3091	1081310	1					
ANR	1081685	ExpressionStatement	use_kill = true	5790:4:175622:175637	1081310	0	True				
ANR	1081686	AssignmentExpression	use_kill = true		1081310	0		=			
ANR	1081687	Identifier	use_kill		1081310	0					
ANR	1081688	Identifier	true		1081310	1					
ANR	1081689	ElseStatement	else		1081310	0					
ANR	1081690	IfStatement	if ( target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP ) )		1081310	0					
ANR	1081691	Condition	target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP )	5792:12:175656:175794	1081310	0	True				
ANR	1081692	AndExpression	target_has_dcpm == TRUE && ( sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP )		1081310	0		&&			
ANR	1081693	EqualityExpression	target_has_dcpm == TRUE		1081310	0		==			
ANR	1081694	Identifier	target_has_dcpm		1081310	0					
ANR	1081695	Identifier	TRUE		1081310	1					
ANR	1081696	OrExpression	sig == SIGUSR1 || sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		1081310	1		||			
ANR	1081697	EqualityExpression	sig == SIGUSR1		1081310	0		==			
ANR	1081698	Identifier	sig		1081310	0					
ANR	1081699	Identifier	SIGUSR1		1081310	1					
ANR	1081700	OrExpression	sig == SIGUSR2 || sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		1081310	1		||			
ANR	1081701	EqualityExpression	sig == SIGUSR2		1081310	0		==			
ANR	1081702	Identifier	sig		1081310	0					
ANR	1081703	Identifier	SIGUSR2		1081310	1					
ANR	1081704	OrExpression	sig == SIGQUIT || sig == SIGTERM || sig == SIGHUP		1081310	1		||			
ANR	1081705	EqualityExpression	sig == SIGQUIT		1081310	0		==			
ANR	1081706	Identifier	sig		1081310	0					
ANR	1081707	Identifier	SIGQUIT		1081310	1					
ANR	1081708	OrExpression	sig == SIGTERM || sig == SIGHUP		1081310	1		||			
ANR	1081709	EqualityExpression	sig == SIGTERM		1081310	0		==			
ANR	1081710	Identifier	sig		1081310	0					
ANR	1081711	Identifier	SIGTERM		1081310	1					
ANR	1081712	EqualityExpression	sig == SIGHUP		1081310	1		==			
ANR	1081713	Identifier	sig		1081310	0					
ANR	1081714	Identifier	SIGHUP		1081310	1					
ANR	1081715	CompoundStatement		108:3:3276:3276	1081310	1					
ANR	1081716	ExpressionStatement	use_kill = true	5805:4:176197:176212	1081310	0	True				
ANR	1081717	AssignmentExpression	use_kill = true		1081310	0		=			
ANR	1081718	Identifier	use_kill		1081310	0					
ANR	1081719	Identifier	true		1081310	1					
ANR	1081720	IfStatement	if ( use_kill )		1081310	2					
ANR	1081721	Condition	use_kill	5808:8:176228:176235	1081310	0	True				
ANR	1081722	Identifier	use_kill		1081310	0					
ANR	1081723	CompoundStatement		126:4:3877:3910	1081310	1					
ANR	1081724	IdentifierDeclStatement	const char * tmp = signalName ( sig ) ;	5809:4:176245:176278	1081310	0	True				
ANR	1081725	IdentifierDecl	* tmp = signalName ( sig )		1081310	0					
ANR	1081726	IdentifierDeclType	const char *		1081310	0					
ANR	1081727	Identifier	tmp		1081310	1					
ANR	1081728	AssignmentExpression	* tmp = signalName ( sig )		1081310	2		=			
ANR	1081729	Identifier	tmp		1081310	0					
ANR	1081730	CallExpression	signalName ( sig )		1081310	1					
ANR	1081731	Callee	signalName		1081310	0					
ANR	1081732	Identifier	signalName		1081310	0					
ANR	1081733	ArgumentList	sig		1081310	1					
ANR	1081734	Argument	sig		1081310	0					
ANR	1081735	Identifier	sig		1081310	0					
ANR	1081736	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Send_Signal(): Doing kill(%d,%d) [%s]\\n"" , pid , sig , tmp ? tmp : ""Unknown"" )"	5810:4:176284:176396	1081310	1	True				
ANR	1081737	CallExpression	"dprintf ( D_FULLDEBUG , ""Send_Signal(): Doing kill(%d,%d) [%s]\\n"" , pid , sig , tmp ? tmp : ""Unknown"" )"		1081310	0					
ANR	1081738	Callee	dprintf		1081310	0					
ANR	1081739	Identifier	dprintf		1081310	0					
ANR	1081740	ArgumentList	D_FULLDEBUG		1081310	1					
ANR	1081741	Argument	D_FULLDEBUG		1081310	0					
ANR	1081742	Identifier	D_FULLDEBUG		1081310	0					
ANR	1081743	Argument	"""Send_Signal(): Doing kill(%d,%d) [%s]\\n"""		1081310	1					
ANR	1081744	PrimaryExpression	"""Send_Signal(): Doing kill(%d,%d) [%s]\\n"""		1081310	0					
ANR	1081745	Argument	pid		1081310	2					
ANR	1081746	Identifier	pid		1081310	0					
ANR	1081747	Argument	sig		1081310	3					
ANR	1081748	Identifier	sig		1081310	0					
ANR	1081749	Argument	"tmp ? tmp : ""Unknown"""		1081310	4					
ANR	1081750	ConditionalExpression	"tmp ? tmp : ""Unknown"""		1081310	0					
ANR	1081751	Condition	tmp		1081310	0					
ANR	1081752	Identifier	tmp		1081310	0					
ANR	1081753	Identifier	tmp		1081310	1					
ANR	1081754	PrimaryExpression	"""Unknown"""		1081310	2					
ANR	1081755	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	5813:4:176402:176435	1081310	2	True				
ANR	1081756	IdentifierDecl	priv = set_root_priv ( )		1081310	0					
ANR	1081757	IdentifierDeclType	priv_state		1081310	0					
ANR	1081758	Identifier	priv		1081310	1					
ANR	1081759	AssignmentExpression	priv = set_root_priv ( )		1081310	2		=			
ANR	1081760	Identifier	priv		1081310	0					
ANR	1081761	CallExpression	set_root_priv ( )		1081310	1					
ANR	1081762	Callee	set_root_priv		1081310	0					
ANR	1081763	Identifier	set_root_priv		1081310	0					
ANR	1081764	ArgumentList			1081310	1					
ANR	1081765	Statement	int	5814:4:176441:176443	1081310	3	True				
ANR	1081766	Statement	status	5814:8:176445:176450	1081310	4	True				
ANR	1081767	Statement	=	5814:15:176452:176452	1081310	5	True				
ANR	1081768	Statement	::	5814:17:176454:176455	1081310	6	True				
ANR	1081769	ExpressionStatement	"kill ( pid , sig )"	5814:19:176456:176470	1081310	7	True				
ANR	1081770	CallExpression	"kill ( pid , sig )"		1081310	0					
ANR	1081771	Callee	kill		1081310	0					
ANR	1081772	Identifier	kill		1081310	0					
ANR	1081773	ArgumentList	pid		1081310	1					
ANR	1081774	Argument	pid		1081310	0					
ANR	1081775	Identifier	pid		1081310	0					
ANR	1081776	Argument	sig		1081310	1					
ANR	1081777	Identifier	sig		1081310	0					
ANR	1081778	ExpressionStatement	set_priv ( priv )	5815:4:176476:176490	1081310	8	True				
ANR	1081779	CallExpression	set_priv ( priv )		1081310	0					
ANR	1081780	Callee	set_priv		1081310	0					
ANR	1081781	Identifier	set_priv		1081310	0					
ANR	1081782	ArgumentList	priv		1081310	1					
ANR	1081783	Argument	priv		1081310	0					
ANR	1081784	Identifier	priv		1081310	0					
ANR	1081785	IfStatement	if ( status >= 0 )		1081310	9					
ANR	1081786	Condition	status >= 0	5817:8:176546:176556	1081310	0	True				
ANR	1081787	RelationalExpression	status >= 0		1081310	0		>=			
ANR	1081788	Identifier	status		1081310	0					
ANR	1081789	PrimaryExpression	0		1081310	1					
ANR	1081790	CompoundStatement		130:21:4034:4034	1081310	1					
ANR	1081791	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5818:5:176566:176614	1081310	0	True				
ANR	1081792	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081793	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081794	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081795	Identifier	msg		1081310	0					
ANR	1081796	Identifier	deliveryStatus		1081310	1					
ANR	1081797	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081798	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081799	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081800	ElseStatement	else		1081310	0					
ANR	1081801	IfStatement	if ( target_has_dcpm == TRUE )		1081310	0					
ANR	1081802	Condition	target_has_dcpm == TRUE	5820:13:176635:176657	1081310	0	True				
ANR	1081803	EqualityExpression	target_has_dcpm == TRUE		1081310	0		==			
ANR	1081804	Identifier	target_has_dcpm		1081310	0					
ANR	1081805	Identifier	TRUE		1081310	1					
ANR	1081806	CompoundStatement		133:39:4136:4136	1081310	1					
ANR	1081807	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"" , pid , sig , errno , strerror ( errno ) )"	5822:5:176721:176831	1081310	0	True				
ANR	1081808	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"" , pid , sig , errno , strerror ( errno ) )"		1081310	0					
ANR	1081809	Callee	dprintf		1081310	0					
ANR	1081810	Identifier	dprintf		1081310	0					
ANR	1081811	ArgumentList	D_ALWAYS		1081310	1					
ANR	1081812	Argument	D_ALWAYS		1081310	0					
ANR	1081813	Identifier	D_ALWAYS		1081310	0					
ANR	1081814	Argument	"""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"""		1081310	1					
ANR	1081815	PrimaryExpression	"""Send_Signal error: kill(%d,%d) failed: errno=%d %s\\n"""		1081310	0					
ANR	1081816	Argument	pid		1081310	2					
ANR	1081817	Identifier	pid		1081310	0					
ANR	1081818	Argument	sig		1081310	3					
ANR	1081819	Identifier	sig		1081310	0					
ANR	1081820	Argument	errno		1081310	4					
ANR	1081821	Identifier	errno		1081310	0					
ANR	1081822	Argument	strerror ( errno )		1081310	5					
ANR	1081823	CallExpression	strerror ( errno )		1081310	0					
ANR	1081824	Callee	strerror		1081310	0					
ANR	1081825	Identifier	strerror		1081310	0					
ANR	1081826	ArgumentList	errno		1081310	1					
ANR	1081827	Argument	errno		1081310	0					
ANR	1081828	Identifier	errno		1081310	0					
ANR	1081829	BreakStatement	break ;	5824:5:176838:176843	1081310	1	True				
ANR	1081830	ReturnStatement	return ;	5826:4:176855:176861	1081310	10	True				
ANR	1081831	BreakStatement	break ;	5829:3:176900:176905	1081310	3	True				
ANR	1081832	Statement	if	5842:1:177354:177355	1081310	12	True				
ANR	1081833	Statement	(	5842:4:177357:177357	1081310	13	True				
ANR	1081834	Statement	dcmainThreadId	5842:6:177359:177372	1081310	14	True				
ANR	1081835	Statement	==	5842:21:177374:177375	1081310	15	True				
ANR	1081836	Statement	::	5842:24:177377:177378	1081310	16	True				
ANR	1081837	Statement	GetCurrentThreadId	5842:26:177379:177396	1081310	17	True				
ANR	1081838	Statement	(	5842:44:177397:177397	1081310	18	True				
ANR	1081839	Statement	)	5842:45:177398:177398	1081310	19	True				
ANR	1081840	Statement	)	5842:47:177400:177400	1081310	20	True				
ANR	1081841	ExpressionStatement	same_thread = TRUE	5843:2:177404:177422	1081310	21	True				
ANR	1081842	AssignmentExpression	same_thread = TRUE		1081310	0		=			
ANR	1081843	Identifier	same_thread		1081310	0					
ANR	1081844	Identifier	TRUE		1081310	1					
ANR	1081845	IfStatement	if ( pid == mypid )		1081310	22					
ANR	1081846	Condition	pid == mypid	5852:6:177620:177631	1081310	0	True				
ANR	1081847	EqualityExpression	pid == mypid		1081310	0		==			
ANR	1081848	Identifier	pid		1081310	0					
ANR	1081849	Identifier	mypid		1081310	1					
ANR	1081850	CompoundStatement		165:21:5110:5110	1081310	1					
ANR	1081851	IfStatement	if ( same_thread == TRUE )		1081310	0					
ANR	1081852	Condition	same_thread == TRUE	5853:7:177644:177662	1081310	0	True				
ANR	1081853	EqualityExpression	same_thread == TRUE		1081310	0		==			
ANR	1081854	Identifier	same_thread		1081310	0					
ANR	1081855	Identifier	TRUE		1081310	1					
ANR	1081856	CompoundStatement		166:29:5141:5141	1081310	1					
ANR	1081857	ExpressionStatement	"HandleSig ( _DC_RAISESIGNAL , sig )"	5856:3:177789:177819	1081310	0	True				
ANR	1081858	CallExpression	"HandleSig ( _DC_RAISESIGNAL , sig )"		1081310	0					
ANR	1081859	Callee	HandleSig		1081310	0					
ANR	1081860	Identifier	HandleSig		1081310	0					
ANR	1081861	ArgumentList	_DC_RAISESIGNAL		1081310	1					
ANR	1081862	Argument	_DC_RAISESIGNAL		1081310	0					
ANR	1081863	Identifier	_DC_RAISESIGNAL		1081310	0					
ANR	1081864	Argument	sig		1081310	1					
ANR	1081865	Identifier	sig		1081310	0					
ANR	1081866	ExpressionStatement	sent_signal = TRUE	5857:3:177824:177842	1081310	1	True				
ANR	1081867	AssignmentExpression	sent_signal = TRUE		1081310	0		=			
ANR	1081868	Identifier	sent_signal		1081310	0					
ANR	1081869	Identifier	TRUE		1081310	1					
ANR	1081870	IfStatement	if ( async_sigs_unblocked == TRUE )		1081310	2					
ANR	1081871	Condition	async_sigs_unblocked == TRUE	5864:8:178175:178202	1081310	0	True				
ANR	1081872	EqualityExpression	async_sigs_unblocked == TRUE		1081310	0		==			
ANR	1081873	Identifier	async_sigs_unblocked		1081310	0					
ANR	1081874	Identifier	TRUE		1081310	1					
ANR	1081875	CompoundStatement		177:39:5681:5681	1081310	1					
ANR	1081876	ExpressionStatement	"write ( async_pipe [ 1 ] , ""!"" , 1 )"	5865:4:178212:178238	1081310	0	True				
ANR	1081877	CallExpression	"write ( async_pipe [ 1 ] , ""!"" , 1 )"		1081310	0					
ANR	1081878	Callee	write		1081310	0					
ANR	1081879	Identifier	write		1081310	0					
ANR	1081880	ArgumentList	async_pipe [ 1 ]		1081310	1					
ANR	1081881	Argument	async_pipe [ 1 ]		1081310	0					
ANR	1081882	ArrayIndexing	async_pipe [ 1 ]		1081310	0					
ANR	1081883	Identifier	async_pipe		1081310	0					
ANR	1081884	PrimaryExpression	1		1081310	1					
ANR	1081885	Argument	"""!"""		1081310	1					
ANR	1081886	PrimaryExpression	"""!"""		1081310	0					
ANR	1081887	Argument	1		1081310	2					
ANR	1081888	PrimaryExpression	1		1081310	0					
ANR	1081889	ExpressionStatement	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )	5868:3:178255:178303	1081310	3	True				
ANR	1081890	CallExpression	msg -> deliveryStatus ( DCMsg :: DELIVERY_SUCCEEDED )		1081310	0					
ANR	1081891	Callee	msg -> deliveryStatus		1081310	0					
ANR	1081892	PtrMemberAccess	msg -> deliveryStatus		1081310	0					
ANR	1081893	Identifier	msg		1081310	0					
ANR	1081894	Identifier	deliveryStatus		1081310	1					
ANR	1081895	ArgumentList	DCMsg :: DELIVERY_SUCCEEDED		1081310	1					
ANR	1081896	Argument	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081897	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1081310	0					
ANR	1081898	ReturnStatement	return ;	5869:3:178308:178314	1081310	4	True				
ANR	1081899	ElseStatement	else		1081310	0					
ANR	1081900	CompoundStatement		183:9:5800:5800	1081310	0					
ANR	1081901	ExpressionStatement	destination = InfoCommandSinfulString ( )	5874:3:178470:178509	1081310	0	True				
ANR	1081902	AssignmentExpression	destination = InfoCommandSinfulString ( )		1081310	0		=			
ANR	1081903	Identifier	destination		1081310	0					
ANR	1081904	CallExpression	InfoCommandSinfulString ( )		1081310	1					
ANR	1081905	Callee	InfoCommandSinfulString		1081310	0					
ANR	1081906	Identifier	InfoCommandSinfulString		1081310	0					
ANR	1081907	ArgumentList			1081310	1					
ANR	1081908	ExpressionStatement	is_local = TRUE	5875:3:178514:178529	1081310	1	True				
ANR	1081909	AssignmentExpression	is_local = TRUE		1081310	0		=			
ANR	1081910	Identifier	is_local		1081310	0					
ANR	1081911	Identifier	TRUE		1081310	1					
ANR	1081912	IfStatement	if ( pid != mypid )		1081310	23					
ANR	1081913	Condition	pid != mypid	5880:6:178613:178624	1081310	0	True				
ANR	1081914	EqualityExpression	pid != mypid		1081310	0		!=			
ANR	1081915	Identifier	pid		1081310	0					
ANR	1081916	Identifier	mypid		1081310	1					
ANR	1081917	CompoundStatement		193:21:6103:6103	1081310	1					
ANR	1081918	IfStatement	if ( target_has_dcpm == FALSE || pidinfo == NULL )		1081310	0					
ANR	1081919	Condition	target_has_dcpm == FALSE || pidinfo == NULL	5881:7:178637:178679	1081310	0	True				
ANR	1081920	OrExpression	target_has_dcpm == FALSE || pidinfo == NULL		1081310	0		||			
ANR	1081921	EqualityExpression	target_has_dcpm == FALSE		1081310	0		==			
ANR	1081922	Identifier	target_has_dcpm		1081310	0					
ANR	1081923	Identifier	FALSE		1081310	1					
ANR	1081924	EqualityExpression	pidinfo == NULL		1081310	1		==			
ANR	1081925	Identifier	pidinfo		1081310	0					
ANR	1081926	Identifier	NULL		1081310	1					
ANR	1081927	CompoundStatement		194:52:6157:6157	1081310	1					
ANR	1081928	ExpressionStatement	"dprintf ( D_ALWAYS , ""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"" , sig , pid , pid )"	5883:3:178743:178875	1081310	0	True				
ANR	1081929	CallExpression	"dprintf ( D_ALWAYS , ""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"" , sig , pid , pid )"		1081310	0					
ANR	1081930	Callee	dprintf		1081310	0					
ANR	1081931	Identifier	dprintf		1081310	0					
ANR	1081932	ArgumentList	D_ALWAYS		1081310	1					
ANR	1081933	Argument	D_ALWAYS		1081310	0					
ANR	1081934	Identifier	D_ALWAYS		1081310	0					
ANR	1081935	Argument	"""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"""		1081310	1					
ANR	1081936	PrimaryExpression	"""Send_Signal: ERROR Attempt to send signal %d to pid %d, but pid %d has no command socket\\n"""		1081310	0					
ANR	1081937	Argument	sig		1081310	2					
ANR	1081938	Identifier	sig		1081310	0					
ANR	1081939	Argument	pid		1081310	3					
ANR	1081940	Identifier	pid		1081310	0					
ANR	1081941	Argument	pid		1081310	4					
ANR	1081942	Identifier	pid		1081310	0					
ANR	1081943	ReturnStatement	return ;	5886:3:178880:178886	1081310	1	True				
ANR	1081944	ExpressionStatement	is_local = pidinfo -> is_local	5889:2:178895:178923	1081310	1	True				
ANR	1081945	AssignmentExpression	is_local = pidinfo -> is_local		1081310	0		=			
ANR	1081946	Identifier	is_local		1081310	0					
ANR	1081947	PtrMemberAccess	pidinfo -> is_local		1081310	1					
ANR	1081948	Identifier	pidinfo		1081310	0					
ANR	1081949	Identifier	is_local		1081310	1					
ANR	1081950	ExpressionStatement	destination = pidinfo -> sinful_string . Value ( )	5890:2:178927:178971	1081310	2	True				
ANR	1081951	AssignmentExpression	destination = pidinfo -> sinful_string . Value ( )		1081310	0		=			
ANR	1081952	Identifier	destination		1081310	0					
ANR	1081953	CallExpression	pidinfo -> sinful_string . Value ( )		1081310	1					
ANR	1081954	Callee	pidinfo -> sinful_string . Value		1081310	0					
ANR	1081955	MemberAccess	pidinfo -> sinful_string . Value		1081310	0					
ANR	1081956	PtrMemberAccess	pidinfo -> sinful_string		1081310	0					
ANR	1081957	Identifier	pidinfo		1081310	0					
ANR	1081958	Identifier	sinful_string		1081310	1					
ANR	1081959	Identifier	Value		1081310	1					
ANR	1081960	ArgumentList			1081310	1					
ANR	1081961	IdentifierDeclStatement	"classy_counted_ptr < Daemon > d = new Daemon ( DT_ANY , destination ) ;"	5893:1:178978:179042	1081310	24	True				
ANR	1081962	IdentifierDecl	"d = new Daemon ( DT_ANY , destination )"		1081310	0					
ANR	1081963	IdentifierDeclType	classy_counted_ptr < Daemon >		1081310	0					
ANR	1081964	Identifier	d		1081310	1					
ANR	1081965	AssignmentExpression	"d = new Daemon ( DT_ANY , destination )"		1081310	2		=			
ANR	1081966	Identifier	d		1081310	0					
ANR	1081967	Expression	"DT_ANY , destination"		1081310	1					
ANR	1081968	Identifier	DT_ANY		1081310	0					
ANR	1081969	Identifier	destination		1081310	1					
ANR	1081970	IfStatement	if ( is_local == TRUE && d -> hasUDPCommandPort ( ) )		1081310	25					
ANR	1081971	Condition	is_local == TRUE && d -> hasUDPCommandPort ( )	5896:6:179127:179168	1081310	0	True				
ANR	1081972	AndExpression	is_local == TRUE && d -> hasUDPCommandPort ( )		1081310	0		&&			
ANR	1081973	EqualityExpression	is_local == TRUE		1081310	0		==			
ANR	1081974	Identifier	is_local		1081310	0					
ANR	1081975	Identifier	TRUE		1081310	1					
ANR	1081976	CallExpression	d -> hasUDPCommandPort ( )		1081310	1					
ANR	1081977	Callee	d -> hasUDPCommandPort		1081310	0					
ANR	1081978	PtrMemberAccess	d -> hasUDPCommandPort		1081310	0					
ANR	1081979	Identifier	d		1081310	0					
ANR	1081980	Identifier	hasUDPCommandPort		1081310	1					
ANR	1081981	ArgumentList			1081310	1					
ANR	1081982	CompoundStatement		209:50:6646:6646	1081310	1					
ANR	1081983	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	5897:2:179175:179212	1081310	0	True				
ANR	1081984	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		1081310	0					
ANR	1081985	Callee	msg -> setStreamType		1081310	0					
ANR	1081986	PtrMemberAccess	msg -> setStreamType		1081310	0					
ANR	1081987	Identifier	msg		1081310	0					
ANR	1081988	Identifier	setStreamType		1081310	1					
ANR	1081989	ArgumentList	Stream :: safe_sock		1081310	1					
ANR	1081990	Argument	Stream :: safe_sock		1081310	0					
ANR	1081991	Identifier	Stream :: safe_sock		1081310	0					
ANR	1081992	IfStatement	if ( ! nonblocking )		1081310	1					
ANR	1081993	Condition	! nonblocking	5898:6:179220:179231	1081310	0	True				
ANR	1081994	UnaryOperationExpression	! nonblocking		1081310	0					
ANR	1081995	UnaryOperator	!		1081310	0					
ANR	1081996	Identifier	nonblocking		1081310	1					
ANR	1081997	ExpressionStatement	msg -> setTimeout ( 3 )	5898:21:179235:179253	1081310	1	True				
ANR	1081998	CallExpression	msg -> setTimeout ( 3 )		1081310	0					
ANR	1081999	Callee	msg -> setTimeout		1081310	0					
ANR	1082000	PtrMemberAccess	msg -> setTimeout		1081310	0					
ANR	1082001	Identifier	msg		1081310	0					
ANR	1082002	Identifier	setTimeout		1081310	1					
ANR	1082003	ArgumentList	3		1081310	1					
ANR	1082004	Argument	3		1081310	0					
ANR	1082005	PrimaryExpression	3		1081310	0					
ANR	1082006	ElseStatement	else		1081310	0					
ANR	1082007	CompoundStatement		213:6:6739:6739	1081310	0					
ANR	1082008	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	5901:2:179268:179305	1081310	0	True				
ANR	1082009	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		1081310	0					
ANR	1082010	Callee	msg -> setStreamType		1081310	0					
ANR	1082011	PtrMemberAccess	msg -> setStreamType		1081310	0					
ANR	1082012	Identifier	msg		1081310	0					
ANR	1082013	Identifier	setStreamType		1081310	1					
ANR	1082014	ArgumentList	Stream :: reli_sock		1081310	1					
ANR	1082015	Argument	Stream :: reli_sock		1081310	0					
ANR	1082016	Identifier	Stream :: reli_sock		1081310	0					
ANR	1082017	IfStatement	if ( pidinfo && pidinfo -> child_session_id )		1081310	26					
ANR	1082018	Condition	pidinfo && pidinfo -> child_session_id	5903:5:179315:179350	1081310	0	True				
ANR	1082019	AndExpression	pidinfo && pidinfo -> child_session_id		1081310	0		&&			
ANR	1082020	Identifier	pidinfo		1081310	0					
ANR	1082021	PtrMemberAccess	pidinfo -> child_session_id		1081310	1					
ANR	1082022	Identifier	pidinfo		1081310	0					
ANR	1082023	Identifier	child_session_id		1081310	1					
ANR	1082024	CompoundStatement		217:1:6829:6829	1081310	1					
ANR	1082025	ExpressionStatement	msg -> setSecSessionId ( pidinfo -> child_session_id )	5905:2:179358:179405	1081310	0	True				
ANR	1082026	CallExpression	msg -> setSecSessionId ( pidinfo -> child_session_id )		1081310	0					
ANR	1082027	Callee	msg -> setSecSessionId		1081310	0					
ANR	1082028	PtrMemberAccess	msg -> setSecSessionId		1081310	0					
ANR	1082029	Identifier	msg		1081310	0					
ANR	1082030	Identifier	setSecSessionId		1081310	1					
ANR	1082031	ArgumentList	pidinfo -> child_session_id		1081310	1					
ANR	1082032	Argument	pidinfo -> child_session_id		1081310	0					
ANR	1082033	PtrMemberAccess	pidinfo -> child_session_id		1081310	0					
ANR	1082034	Identifier	pidinfo		1081310	0					
ANR	1082035	Identifier	child_session_id		1081310	1					
ANR	1082036	ExpressionStatement	msg -> messengerDelivery ( true )	5907:1:179411:179441	1081310	27	True				
ANR	1082037	CallExpression	msg -> messengerDelivery ( true )		1081310	0					
ANR	1082038	Callee	msg -> messengerDelivery		1081310	0					
ANR	1082039	PtrMemberAccess	msg -> messengerDelivery		1081310	0					
ANR	1082040	Identifier	msg		1081310	0					
ANR	1082041	Identifier	messengerDelivery		1081310	1					
ANR	1082042	ArgumentList	true		1081310	1					
ANR	1082043	Argument	true		1081310	0					
ANR	1082044	Identifier	true		1081310	0					
ANR	1082045	IfStatement	if ( nonblocking )		1081310	28					
ANR	1082046	Condition	nonblocking	5908:5:179486:179496	1081310	0	True				
ANR	1082047	Identifier	nonblocking		1081310	0					
ANR	1082048	CompoundStatement		221:19:6975:6975	1081310	1					
ANR	1082049	ExpressionStatement	d -> sendMsg ( msg . get ( ) )	5909:2:179504:179527	1081310	0	True				
ANR	1082050	CallExpression	d -> sendMsg ( msg . get ( ) )		1081310	0					
ANR	1082051	Callee	d -> sendMsg		1081310	0					
ANR	1082052	PtrMemberAccess	d -> sendMsg		1081310	0					
ANR	1082053	Identifier	d		1081310	0					
ANR	1082054	Identifier	sendMsg		1081310	1					
ANR	1082055	ArgumentList	msg . get ( )		1081310	1					
ANR	1082056	Argument	msg . get ( )		1081310	0					
ANR	1082057	CallExpression	msg . get ( )		1081310	0					
ANR	1082058	Callee	msg . get		1081310	0					
ANR	1082059	MemberAccess	msg . get		1081310	0					
ANR	1082060	Identifier	msg		1081310	0					
ANR	1082061	Identifier	get		1081310	1					
ANR	1082062	ArgumentList			1081310	1					
ANR	1082063	ElseStatement	else		1081310	0					
ANR	1082064	CompoundStatement		224:6:7013:7013	1081310	0					
ANR	1082065	ExpressionStatement	d -> sendBlockingMsg ( msg . get ( ) )	5912:2:179542:179573	1081310	0	True				
ANR	1082066	CallExpression	d -> sendBlockingMsg ( msg . get ( ) )		1081310	0					
ANR	1082067	Callee	d -> sendBlockingMsg		1081310	0					
ANR	1082068	PtrMemberAccess	d -> sendBlockingMsg		1081310	0					
ANR	1082069	Identifier	d		1081310	0					
ANR	1082070	Identifier	sendBlockingMsg		1081310	1					
ANR	1082071	ArgumentList	msg . get ( )		1081310	1					
ANR	1082072	Argument	msg . get ( )		1081310	0					
ANR	1082073	CallExpression	msg . get ( )		1081310	0					
ANR	1082074	Callee	msg . get		1081310	0					
ANR	1082075	MemberAccess	msg . get		1081310	0					
ANR	1082076	Identifier	msg		1081310	0					
ANR	1082077	Identifier	get		1081310	1					
ANR	1082078	ArgumentList			1081310	1					
ANR	1082079	ReturnType	void		1081310	1					
ANR	1082080	Identifier	DaemonCore :: Send_Signal		1081310	2					
ANR	1082081	ParameterList	"classy_counted_ptr < DCSignalMsg > msg , bool nonblocking"		1081310	3					
ANR	1082082	Parameter	classy_counted_ptr < DCSignalMsg > msg	5687:29:172469:172503	1081310	0	True				
ANR	1082083	ParameterType	classy_counted_ptr < DCSignalMsg >		1081310	0					
ANR	1082084	Identifier	msg		1081310	1					
ANR	1082085	Parameter	bool nonblocking	5687:66:172506:172521	1081310	1	True				
ANR	1082086	ParameterType	bool		1081310	0					
ANR	1082087	Identifier	nonblocking		1081310	1					
ANR	1082088	CFGEntryNode	ENTRY		1081310		True				
ANR	1082089	CFGExitNode	EXIT		1081310		True				
ANR	1082090	Symbol	msg		1081310						
ANR	1082091	Symbol	Stream :: safe_sock		1081310						
ANR	1082092	Symbol	msg -> theSignal		1081310						
ANR	1082093	Symbol	pid		1081310						
ANR	1082094	Symbol	use_kill		1081310						
ANR	1082095	Symbol	pidTable -> lookup		1081310						
ANR	1082096	Symbol	tmp		1081310						
ANR	1082097	Symbol	Stream :: reli_sock		1081310						
ANR	1082098	Symbol	msg . get		1081310						
ANR	1082099	Symbol	priv		1081310						
ANR	1082100	Symbol	is_local		1081310						
ANR	1082101	Symbol	_DC_RAISESIGNAL		1081310						
ANR	1082102	Symbol	* pidinfo -> sinful_string		1081310						
ANR	1082103	Symbol	pidinfo		1081310						
ANR	1082104	Symbol	async_sigs_unblocked		1081310						
ANR	1082105	Symbol	errno		1081310						
ANR	1082106	Symbol	NULL		1081310						
ANR	1082107	Symbol	target_has_dcpm		1081310						
ANR	1082108	Symbol	SIGUSR2		1081310						
ANR	1082109	Symbol	TRUE		1081310						
ANR	1082110	Symbol	SIGUSR1		1081310						
ANR	1082111	Symbol	param_boolean		1081310						
ANR	1082112	Symbol	D_FULLDEBUG		1081310						
ANR	1082113	Symbol	strerror		1081310						
ANR	1082114	Symbol	msg -> thePid		1081310						
ANR	1082115	Symbol	DCMsg :: DELIVERY_SUCCEEDED		1081310						
ANR	1082116	Symbol	Shutdown_Graceful		1081310						
ANR	1082117	Symbol	true		1081310						
ANR	1082118	Symbol	* pidinfo		1081310						
ANR	1082119	Symbol	status		1081310						
ANR	1082120	Symbol	* async_pipe		1081310						
ANR	1082121	Symbol	Shutdown_Fast		1081310						
ANR	1082122	Symbol	Suspend_Process		1081310						
ANR	1082123	Symbol	pidinfo -> sinful_string . Value		1081310						
ANR	1082124	Symbol	SIGQUIT		1081310						
ANR	1082125	Symbol	* pidTable		1081310						
ANR	1082126	Symbol	destination		1081310						
ANR	1082127	Symbol	DT_ANY		1081310						
ANR	1082128	Symbol	InfoCommandSinfulString		1081310						
ANR	1082129	Symbol	sig		1081310						
ANR	1082130	Symbol	Continue_Process		1081310						
ANR	1082131	Symbol	same_thread		1081310						
ANR	1082132	Symbol	d -> hasUDPCommandPort		1081310						
ANR	1082133	Symbol	m_proc_family		1081310						
ANR	1082134	Symbol	SIGHUP		1081310						
ANR	1082135	Symbol	SIGTERM		1081310						
ANR	1082136	Symbol	ok		1081310						
ANR	1082137	Symbol	async_pipe		1081310						
ANR	1082138	Symbol	* m_proc_family		1081310						
ANR	1082139	Symbol	pidTable		1081310						
ANR	1082140	Symbol	pidinfo -> new_process_group		1081310						
ANR	1082141	Symbol	* * pidinfo		1081310						
ANR	1082142	Symbol	signalName		1081310						
ANR	1082143	Symbol	sent_signal		1081310						
ANR	1082144	Symbol	d		1081310						
ANR	1082145	Symbol	nonblocking		1081310						
ANR	1082146	Symbol	m_proc_family -> signal_process		1081310						
ANR	1082147	Symbol	mypid		1081310						
ANR	1082148	Symbol	DCMsg :: DELIVERY_FAILED		1081310						
ANR	1082149	Symbol	D_ALWAYS		1081310						
ANR	1082150	Symbol	false		1081310						
ANR	1082151	Symbol	set_root_priv		1081310						
ANR	1082152	Symbol	* msg		1081310						
ANR	1082153	Symbol	* d		1081310						
ANR	1082154	Symbol	pidinfo -> child_session_id		1081310						
ANR	1082155	Symbol	pidinfo -> is_local		1081310						
ANR	1082156	Symbol	ProcessExitedButNotReaped		1081310						
ANR	1082157	Symbol	signed_pid		1081310						
ANR	1082158	Symbol	pidinfo -> sinful_string		1081310						
ANR	1082159	Symbol	privsep_enabled		1081310						
ANR	1082160	Symbol	FALSE		1081310						
ANR	1082161	Function	DaemonCore :: Shutdown_Fast	5916:0:179581:181750							
ANR	1082162	FunctionDef	"DaemonCore :: Shutdown_Fast (pid_t pid , bool want_core)"		1082161	0					
ANR	1082163	CompoundStatement		5917:0:179639:181750	1082161	0					
ANR	1082164	ExpressionStatement	( void ) want_core	5918:1:179642:179658	1082161	0	True				
ANR	1082165	CastExpression	( void ) want_core		1082161	0					
ANR	1082166	CastTarget	void		1082161	0					
ANR	1082167	Identifier	want_core		1082161	1					
ANR	1082168	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Fast(%d)\\n"" , pid )"	5920:1:179678:179747	1082161	1	True				
ANR	1082169	CallExpression	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Fast(%d)\\n"" , pid )"		1082161	0					
ANR	1082170	Callee	dprintf		1082161	0					
ANR	1082171	Identifier	dprintf		1082161	0					
ANR	1082172	ArgumentList	D_PROCFAMILY		1082161	1					
ANR	1082173	Argument	D_PROCFAMILY		1082161	0					
ANR	1082174	Identifier	D_PROCFAMILY		1082161	0					
ANR	1082175	Argument	"""called DaemonCore::Shutdown_Fast(%d)\\n"""		1082161	1					
ANR	1082176	PrimaryExpression	"""called DaemonCore::Shutdown_Fast(%d)\\n"""		1082161	0					
ANR	1082177	Argument	pid		1082161	2					
ANR	1082178	Identifier	pid		1082161	0					
ANR	1082179	IfStatement	if ( pid == ppid )		1082161	2					
ANR	1082180	Condition	pid == ppid	5923:6:179756:179766	1082161	0	True				
ANR	1082181	EqualityExpression	pid == ppid		1082161	0		==			
ANR	1082182	Identifier	pid		1082161	0					
ANR	1082183	Identifier	ppid		1082161	1					
ANR	1082184	ReturnStatement	return FALSE ;	5924:2:179772:179784	1082161	1	True				
ANR	1082185	Identifier	FALSE		1082161	0					
ANR	1082186	ExpressionStatement	clearSession ( pid )	5927:4:179871:179888	1082161	3	True				
ANR	1082187	CallExpression	clearSession ( pid )		1082161	0					
ANR	1082188	Callee	clearSession		1082161	0					
ANR	1082189	Identifier	clearSession		1082161	0					
ANR	1082190	ArgumentList	pid		1082161	1					
ANR	1082191	Argument	pid		1082161	0					
ANR	1082192	Identifier	pid		1082161	0					
ANR	1082193	IfStatement	if ( Shutdown_Graceful ( pid ) == TRUE )		1082161	4					
ANR	1082194	Condition	Shutdown_Graceful ( pid ) == TRUE	5933:6:180077:180106	1082161	0	True				
ANR	1082195	EqualityExpression	Shutdown_Graceful ( pid ) == TRUE		1082161	0		==			
ANR	1082196	CallExpression	Shutdown_Graceful ( pid )		1082161	0					
ANR	1082197	Callee	Shutdown_Graceful		1082161	0					
ANR	1082198	Identifier	Shutdown_Graceful		1082161	0					
ANR	1082199	ArgumentList	pid		1082161	1					
ANR	1082200	Argument	pid		1082161	0					
ANR	1082201	Identifier	pid		1082161	0					
ANR	1082202	Identifier	TRUE		1082161	1					
ANR	1082203	CompoundStatement		17:39:470:470	1082161	1					
ANR	1082204	ExpressionStatement	Sleep ( 250 )	5937:2:180269:180279	1082161	0	True				
ANR	1082205	CallExpression	Sleep ( 250 )		1082161	0					
ANR	1082206	Callee	Sleep		1082161	0					
ANR	1082207	Identifier	Sleep		1082161	0					
ANR	1082208	ArgumentList	250		1082161	1					
ANR	1082209	Argument	250		1082161	0					
ANR	1082210	PrimaryExpression	250		1082161	0					
ANR	1082211	IdentifierDeclStatement	PidEntry * pidinfo ;	5940:1:180332:180349	1082161	5	True				
ANR	1082212	IdentifierDecl	* pidinfo		1082161	0					
ANR	1082213	IdentifierDeclType	PidEntry *		1082161	0					
ANR	1082214	Identifier	pidinfo		1082161	1					
ANR	1082215	IdentifierDeclStatement	HANDLE pidHandle ;	5941:1:180352:180368	1082161	6	True				
ANR	1082216	IdentifierDecl	pidHandle		1082161	0					
ANR	1082217	IdentifierDeclType	HANDLE		1082161	0					
ANR	1082218	Identifier	pidHandle		1082161	1					
ANR	1082219	IdentifierDeclStatement	bool must_free_handle = false ;	5942:1:180371:180400	1082161	7	True				
ANR	1082220	IdentifierDecl	must_free_handle = false		1082161	0					
ANR	1082221	IdentifierDeclType	bool		1082161	0					
ANR	1082222	Identifier	must_free_handle		1082161	1					
ANR	1082223	AssignmentExpression	must_free_handle = false		1082161	2		=			
ANR	1082224	Identifier	false		1082161	0					
ANR	1082225	Identifier	false		1082161	1					
ANR	1082226	IdentifierDeclStatement	int ret_value ;	5943:1:180403:180416	1082161	8	True				
ANR	1082227	IdentifierDecl	ret_value		1082161	0					
ANR	1082228	IdentifierDeclType	int		1082161	0					
ANR	1082229	Identifier	ret_value		1082161	1					
ANR	1082230	IfStatement	"if ( pidTable -> lookup ( pid , pidinfo ) < 0 )"		1082161	9					
ANR	1082231	Condition	"pidTable -> lookup ( pid , pidinfo ) < 0"	5944:5:180423:180456	1082161	0	True				
ANR	1082232	RelationalExpression	"pidTable -> lookup ( pid , pidinfo ) < 0"		1082161	0		<			
ANR	1082233	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1082161	0					
ANR	1082234	Callee	pidTable -> lookup		1082161	0					
ANR	1082235	PtrMemberAccess	pidTable -> lookup		1082161	0					
ANR	1082236	Identifier	pidTable		1082161	0					
ANR	1082237	Identifier	lookup		1082161	1					
ANR	1082238	ArgumentList	pid		1082161	1					
ANR	1082239	Argument	pid		1082161	0					
ANR	1082240	Identifier	pid		1082161	0					
ANR	1082241	Argument	pidinfo		1082161	1					
ANR	1082242	Identifier	pidinfo		1082161	0					
ANR	1082243	PrimaryExpression	0		1082161	1					
ANR	1082244	CompoundStatement		28:41:819:819	1082161	1					
ANR	1082245	Statement	pidHandle	5947:2:180562:180570	1082161	0	True				
ANR	1082246	Statement	=	5947:12:180572:180572	1082161	1	True				
ANR	1082247	Statement	::	5947:14:180574:180575	1082161	2	True				
ANR	1082248	ExpressionStatement	"OpenProcess ( PROCESS_TERMINATE , FALSE , pid )"	5947:16:180576:180616	1082161	3	True				
ANR	1082249	CallExpression	"OpenProcess ( PROCESS_TERMINATE , FALSE , pid )"		1082161	0					
ANR	1082250	Callee	OpenProcess		1082161	0					
ANR	1082251	Identifier	OpenProcess		1082161	0					
ANR	1082252	ArgumentList	PROCESS_TERMINATE		1082161	1					
ANR	1082253	Argument	PROCESS_TERMINATE		1082161	0					
ANR	1082254	Identifier	PROCESS_TERMINATE		1082161	0					
ANR	1082255	Argument	FALSE		1082161	1					
ANR	1082256	Identifier	FALSE		1082161	0					
ANR	1082257	Argument	pid		1082161	2					
ANR	1082258	Identifier	pid		1082161	0					
ANR	1082259	IfStatement	if ( pidHandle == NULL )		1082161	4					
ANR	1082260	Condition	pidHandle == NULL	5948:7:180625:180641	1082161	0	True				
ANR	1082261	EqualityExpression	pidHandle == NULL		1082161	0		==			
ANR	1082262	Identifier	pidHandle		1082161	0					
ANR	1082263	Identifier	NULL		1082161	1					
ANR	1082264	CompoundStatement		32:27:1005:1005	1082161	1					
ANR	1082265	ReturnStatement	return FALSE ;	5950:3:180700:180712	1082161	0	True				
ANR	1082266	Identifier	FALSE		1082161	0					
ANR	1082267	ExpressionStatement	must_free_handle = true	5952:2:180720:180743	1082161	5	True				
ANR	1082268	AssignmentExpression	must_free_handle = true		1082161	0		=			
ANR	1082269	Identifier	must_free_handle		1082161	0					
ANR	1082270	Identifier	true		1082161	1					
ANR	1082271	ElseStatement	else		1082161	0					
ANR	1082272	CompoundStatement		37:8:1113:1113	1082161	0					
ANR	1082273	ExpressionStatement	pidHandle = pidinfo -> hProcess	5955:2:180790:180819	1082161	0	True				
ANR	1082274	AssignmentExpression	pidHandle = pidinfo -> hProcess		1082161	0		=			
ANR	1082275	Identifier	pidHandle		1082161	0					
ANR	1082276	PtrMemberAccess	pidinfo -> hProcess		1082161	1					
ANR	1082277	Identifier	pidinfo		1082161	0					
ANR	1082278	Identifier	hProcess		1082161	1					
ANR	1082279	IfStatement	if ( ( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG ) )		1082161	10					
ANR	1082280	Condition	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )	5958:5:180830:180886	1082161	0	True				
ANR	1082281	AndExpression	( DebugFlags & D_PROCFAMILY ) && ( DebugFlags & D_FULLDEBUG )		1082161	0		&&			
ANR	1082282	BitAndExpression	DebugFlags & D_PROCFAMILY		1082161	0		&			
ANR	1082283	Identifier	DebugFlags		1082161	0					
ANR	1082284	Identifier	D_PROCFAMILY		1082161	1					
ANR	1082285	BitAndExpression	DebugFlags & D_FULLDEBUG		1082161	1		&			
ANR	1082286	Identifier	DebugFlags		1082161	0					
ANR	1082287	Identifier	D_FULLDEBUG		1082161	1					
ANR	1082288	CompoundStatement		44:3:1285:1301	1082161	1					
ANR	1082289	IdentifierDeclStatement	char check_name [ MAX_PATH ] ;	5959:3:180895:180920	1082161	0	True				
ANR	1082290	IdentifierDecl	check_name [ MAX_PATH ]		1082161	0					
ANR	1082291	IdentifierDeclType	char [ MAX_PATH ]		1082161	0					
ANR	1082292	Identifier	check_name		1082161	1					
ANR	1082293	Identifier	MAX_PATH		1082161	2					
ANR	1082294	IdentifierDeclStatement	CSysinfo sysinfo ;	5960:3:180925:180941	1082161	1	True				
ANR	1082295	IdentifierDecl	sysinfo		1082161	0					
ANR	1082296	IdentifierDeclType	CSysinfo		1082161	0					
ANR	1082297	Identifier	sysinfo		1082161	1					
ANR	1082298	ExpressionStatement	"sysinfo . GetProcessName ( pid , check_name , sizeof ( check_name ) )"	5961:3:180946:181004	1082161	2	True				
ANR	1082299	CallExpression	"sysinfo . GetProcessName ( pid , check_name , sizeof ( check_name ) )"		1082161	0					
ANR	1082300	Callee	sysinfo . GetProcessName		1082161	0					
ANR	1082301	MemberAccess	sysinfo . GetProcessName		1082161	0					
ANR	1082302	Identifier	sysinfo		1082161	0					
ANR	1082303	Identifier	GetProcessName		1082161	1					
ANR	1082304	ArgumentList	pid		1082161	1					
ANR	1082305	Argument	pid		1082161	0					
ANR	1082306	Identifier	pid		1082161	0					
ANR	1082307	Argument	check_name		1082161	1					
ANR	1082308	Identifier	check_name		1082161	0					
ANR	1082309	Argument	sizeof ( check_name )		1082161	2					
ANR	1082310	SizeofExpression	sizeof ( check_name )		1082161	0					
ANR	1082311	Sizeof	sizeof		1082161	0					
ANR	1082312	SizeofOperand	check_name		1082161	1					
ANR	1082313	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"" , pid , pidHandle , check_name )"	5962:3:181009:181138	1082161	3	True				
ANR	1082314	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"" , pid , pidHandle , check_name )"		1082161	0					
ANR	1082315	Callee	dprintf		1082161	0					
ANR	1082316	Identifier	dprintf		1082161	0					
ANR	1082317	ArgumentList	D_PROCFAMILY		1082161	1					
ANR	1082318	Argument	D_PROCFAMILY		1082161	0					
ANR	1082319	Identifier	D_PROCFAMILY		1082161	0					
ANR	1082320	Argument	"""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"""		1082161	1					
ANR	1082321	PrimaryExpression	"""Shutdown_Fast(%d):calling TerminateProcess handle=%x check_name='%s'\\n"""		1082161	0					
ANR	1082322	Argument	pid		1082161	2					
ANR	1082323	Identifier	pid		1082161	0					
ANR	1082324	Argument	pidHandle		1082161	3					
ANR	1082325	Identifier	pidHandle		1082161	0					
ANR	1082326	Argument	check_name		1082161	4					
ANR	1082327	Identifier	check_name		1082161	0					
ANR	1082328	IfStatement	"if ( TerminateProcess ( pidHandle , 0 ) )"		1082161	11					
ANR	1082329	Condition	"TerminateProcess ( pidHandle , 0 )"	5967:5:181149:181177	1082161	0	True				
ANR	1082330	CallExpression	"TerminateProcess ( pidHandle , 0 )"		1082161	0					
ANR	1082331	Callee	TerminateProcess		1082161	0					
ANR	1082332	Identifier	TerminateProcess		1082161	0					
ANR	1082333	ArgumentList	pidHandle		1082161	1					
ANR	1082334	Argument	pidHandle		1082161	0					
ANR	1082335	Identifier	pidHandle		1082161	0					
ANR	1082336	Argument	0		1082161	1					
ANR	1082337	PrimaryExpression	0		1082161	0					
ANR	1082338	CompoundStatement		51:36:1540:1540	1082161	1					
ANR	1082339	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast:Successfully terminated pid %d\\n"" , pid )"	5968:2:181184:181263	1082161	0	True				
ANR	1082340	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast:Successfully terminated pid %d\\n"" , pid )"		1082161	0					
ANR	1082341	Callee	dprintf		1082161	0					
ANR	1082342	Identifier	dprintf		1082161	0					
ANR	1082343	ArgumentList	D_PROCFAMILY		1082161	1					
ANR	1082344	Argument	D_PROCFAMILY		1082161	0					
ANR	1082345	Identifier	D_PROCFAMILY		1082161	0					
ANR	1082346	Argument	"""Shutdown_Fast:Successfully terminated pid %d\\n"""		1082161	1					
ANR	1082347	PrimaryExpression	"""Shutdown_Fast:Successfully terminated pid %d\\n"""		1082161	0					
ANR	1082348	Argument	pid		1082161	2					
ANR	1082349	Identifier	pid		1082161	0					
ANR	1082350	ExpressionStatement	ret_value = TRUE	5970:2:181267:181283	1082161	1	True				
ANR	1082351	AssignmentExpression	ret_value = TRUE		1082161	0		=			
ANR	1082352	Identifier	ret_value		1082161	0					
ANR	1082353	Identifier	TRUE		1082161	1					
ANR	1082354	ElseStatement	else		1082161	0					
ANR	1082355	CompoundStatement		55:8:1653:1653	1082161	0					
ANR	1082356	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"" , pid )"	5974:2:181371:181456	1082161	0	True				
ANR	1082357	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"" , pid )"		1082161	0					
ANR	1082358	Callee	dprintf		1082161	0					
ANR	1082359	Identifier	dprintf		1082161	0					
ANR	1082360	ArgumentList	D_PROCFAMILY		1082161	1					
ANR	1082361	Argument	D_PROCFAMILY		1082161	0					
ANR	1082362	Identifier	D_PROCFAMILY		1082161	0					
ANR	1082363	Argument	"""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"""		1082161	1					
ANR	1082364	PrimaryExpression	"""Shutdown_Fast: Failed to TerminateProcess on pid %d\\n"""		1082161	0					
ANR	1082365	Argument	pid		1082161	2					
ANR	1082366	Identifier	pid		1082161	0					
ANR	1082367	ExpressionStatement	ret_value = FALSE	5976:2:181460:181477	1082161	1	True				
ANR	1082368	AssignmentExpression	ret_value = FALSE		1082161	0		=			
ANR	1082369	Identifier	ret_value		1082161	0					
ANR	1082370	Identifier	FALSE		1082161	1					
ANR	1082371	IfStatement	if ( must_free_handle )		1082161	12					
ANR	1082372	Condition	must_free_handle	5978:6:181488:181503	1082161	0	True				
ANR	1082373	Identifier	must_free_handle		1082161	0					
ANR	1082374	CompoundStatement		62:25:1867:1867	1082161	1					
ANR	1082375	Statement	::	5979:2:181511:181512	1082161	0	True				
ANR	1082376	ExpressionStatement	CloseHandle ( pidHandle )	5979:4:181513:181537	1082161	1	True				
ANR	1082377	CallExpression	CloseHandle ( pidHandle )		1082161	0					
ANR	1082378	Callee	CloseHandle		1082161	0					
ANR	1082379	Identifier	CloseHandle		1082161	0					
ANR	1082380	ArgumentList	pidHandle		1082161	1					
ANR	1082381	Argument	pidHandle		1082161	0					
ANR	1082382	Identifier	pidHandle		1082161	0					
ANR	1082383	ReturnStatement	return ret_value ;	5981:1:181543:181559	1082161	13	True				
ANR	1082384	Identifier	ret_value		1082161	0					
ANR	1082385	ReturnType	int		1082161	1					
ANR	1082386	Identifier	DaemonCore :: Shutdown_Fast		1082161	2					
ANR	1082387	ParameterList	"pid_t pid , bool want_core"		1082161	3					
ANR	1082388	Parameter	pid_t pid	5916:30:179611:179619	1082161	0	True				
ANR	1082389	ParameterType	pid_t		1082161	0					
ANR	1082390	Identifier	pid		1082161	1					
ANR	1082391	Parameter	bool want_core	5916:41:179622:179635	1082161	1	True				
ANR	1082392	ParameterType	bool		1082161	0					
ANR	1082393	Identifier	want_core		1082161	1					
ANR	1082394	CFGEntryNode	ENTRY		1082161		True				
ANR	1082395	CFGExitNode	EXIT		1082161		True				
ANR	1082396	Symbol	PROCESS_TERMINATE		1082161						
ANR	1082397	Symbol	D_PROCFAMILY		1082161						
ANR	1082398	Symbol	want_core		1082161						
ANR	1082399	Symbol	* pidTable		1082161						
ANR	1082400	Symbol	must_free_handle		1082161						
ANR	1082401	Symbol	pid		1082161						
ANR	1082402	Symbol	pidinfo -> hProcess		1082161						
ANR	1082403	Symbol	pidTable -> lookup		1082161						
ANR	1082404	Symbol	sysinfo		1082161						
ANR	1082405	Symbol	pidinfo		1082161						
ANR	1082406	Symbol	pidTable		1082161						
ANR	1082407	Symbol	TerminateProcess		1082161						
ANR	1082408	Symbol	NULL		1082161						
ANR	1082409	Symbol	false		1082161						
ANR	1082410	Symbol	TRUE		1082161						
ANR	1082411	Symbol	D_FULLDEBUG		1082161						
ANR	1082412	Symbol	DebugFlags		1082161						
ANR	1082413	Symbol	ppid		1082161						
ANR	1082414	Symbol	pidHandle		1082161						
ANR	1082415	Symbol	Shutdown_Graceful		1082161						
ANR	1082416	Symbol	ret_value		1082161						
ANR	1082417	Symbol	true		1082161						
ANR	1082418	Symbol	FALSE		1082161						
ANR	1082419	Symbol	* pidinfo		1082161						
ANR	1082420	Symbol	check_name		1082161						
ANR	1082421	Function	DaemonCore :: Shutdown_Graceful	5990:0:181753:184072							
ANR	1082422	FunctionDef	DaemonCore :: Shutdown_Graceful (pid_t pid)		1082421	0					
ANR	1082423	CompoundStatement		5991:0:181798:184072	1082421	0					
ANR	1082424	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Graceful(%d)\\n"" , pid )"	5992:1:181801:181874	1082421	0	True				
ANR	1082425	CallExpression	"dprintf ( D_PROCFAMILY , ""called DaemonCore::Shutdown_Graceful(%d)\\n"" , pid )"		1082421	0					
ANR	1082426	Callee	dprintf		1082421	0					
ANR	1082427	Identifier	dprintf		1082421	0					
ANR	1082428	ArgumentList	D_PROCFAMILY		1082421	1					
ANR	1082429	Argument	D_PROCFAMILY		1082421	0					
ANR	1082430	Identifier	D_PROCFAMILY		1082421	0					
ANR	1082431	Argument	"""called DaemonCore::Shutdown_Graceful(%d)\\n"""		1082421	1					
ANR	1082432	PrimaryExpression	"""called DaemonCore::Shutdown_Graceful(%d)\\n"""		1082421	0					
ANR	1082433	Argument	pid		1082421	2					
ANR	1082434	Identifier	pid		1082421	0					
ANR	1082435	IfStatement	if ( pid == ppid )		1082421	1					
ANR	1082436	Condition	pid == ppid	5995:6:181883:181893	1082421	0	True				
ANR	1082437	EqualityExpression	pid == ppid		1082421	0		==			
ANR	1082438	Identifier	pid		1082421	0					
ANR	1082439	Identifier	ppid		1082421	1					
ANR	1082440	ReturnStatement	return FALSE ;	5996:2:181899:181911	1082421	1	True				
ANR	1082441	Identifier	FALSE		1082421	0					
ANR	1082442	ExpressionStatement	clearSession ( pid )	5999:4:181998:182015	1082421	2	True				
ANR	1082443	CallExpression	clearSession ( pid )		1082421	0					
ANR	1082444	Callee	clearSession		1082421	0					
ANR	1082445	Identifier	clearSession		1082421	0					
ANR	1082446	ArgumentList	pid		1082421	1					
ANR	1082447	Argument	pid		1082421	0					
ANR	1082448	Identifier	pid		1082421	0					
ANR	1082449	IdentifierDeclStatement	PidEntry * pidinfo ;	6007:1:182111:182128	1082421	3	True				
ANR	1082450	IdentifierDecl	* pidinfo		1082421	0					
ANR	1082451	IdentifierDeclType	PidEntry *		1082421	0					
ANR	1082452	Identifier	pidinfo		1082421	1					
ANR	1082453	IfStatement	"if ( ( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' ) )"		1082421	4					
ANR	1082454	Condition	"( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' )"	6008:5:182135:182216	1082421	0	True				
ANR	1082455	AndExpression	"( pidTable -> lookup ( pid , pidinfo ) != - 1 ) && ( pidinfo -> sinful_string [ 0 ] != '\\0' )"		1082421	0		&&			
ANR	1082456	EqualityExpression	"pidTable -> lookup ( pid , pidinfo ) != - 1"		1082421	0		!=			
ANR	1082457	CallExpression	"pidTable -> lookup ( pid , pidinfo )"		1082421	0					
ANR	1082458	Callee	pidTable -> lookup		1082421	0					
ANR	1082459	PtrMemberAccess	pidTable -> lookup		1082421	0					
ANR	1082460	Identifier	pidTable		1082421	0					
ANR	1082461	Identifier	lookup		1082421	1					
ANR	1082462	ArgumentList	pid		1082421	1					
ANR	1082463	Argument	pid		1082421	0					
ANR	1082464	Identifier	pid		1082421	0					
ANR	1082465	Argument	pidinfo		1082421	1					
ANR	1082466	Identifier	pidinfo		1082421	0					
ANR	1082467	UnaryOperationExpression	- 1		1082421	1					
ANR	1082468	UnaryOperator	-		1082421	0					
ANR	1082469	PrimaryExpression	1		1082421	1					
ANR	1082470	EqualityExpression	pidinfo -> sinful_string [ 0 ] != '\\0'		1082421	1		!=			
ANR	1082471	ArrayIndexing	pidinfo -> sinful_string [ 0 ]		1082421	0					
ANR	1082472	PtrMemberAccess	pidinfo -> sinful_string		1082421	0					
ANR	1082473	Identifier	pidinfo		1082421	0					
ANR	1082474	Identifier	sinful_string		1082421	1					
ANR	1082475	PrimaryExpression	0		1082421	1					
ANR	1082476	PrimaryExpression	'\\0'		1082421	1					
ANR	1082477	CompoundStatement		20:1:421:421	1082421	1					
ANR	1082478	ExpressionStatement	"dprintf ( D_PROCFAMILY , ""Shutdown_Graceful: Sending pid %d SIGTERM\\n"" , pid )"	6011:2:182224:182317	1082421	0	True				
ANR	1082479	CallExpression	"dprintf ( D_PROCFAMILY , ""Shutdown_Graceful: Sending pid %d SIGTERM\\n"" , pid )"		1082421	0					
ANR	1082480	Callee	dprintf		1082421	0					
ANR	1082481	Identifier	dprintf		1082421	0					
ANR	1082482	ArgumentList	D_PROCFAMILY		1082421	1					
ANR	1082483	Argument	D_PROCFAMILY		1082421	0					
ANR	1082484	Identifier	D_PROCFAMILY		1082421	0					
ANR	1082485	Argument	"""Shutdown_Graceful: Sending pid %d SIGTERM\\n"""		1082421	1					
ANR	1082486	PrimaryExpression	"""Shutdown_Graceful: Sending pid %d SIGTERM\\n"""		1082421	0					
ANR	1082487	Argument	pid		1082421	2					
ANR	1082488	Identifier	pid		1082421	0					
ANR	1082489	ReturnStatement	"return Send_Signal ( pid , SIGTERM ) ;"	6014:2:182321:182353	1082421	1	True				
ANR	1082490	CallExpression	"Send_Signal ( pid , SIGTERM )"		1082421	0					
ANR	1082491	Callee	Send_Signal		1082421	0					
ANR	1082492	Identifier	Send_Signal		1082421	0					
ANR	1082493	ArgumentList	pid		1082421	1					
ANR	1082494	Argument	pid		1082421	0					
ANR	1082495	Identifier	pid		1082421	0					
ANR	1082496	Argument	SIGTERM		1082421	1					
ANR	1082497	Identifier	SIGTERM		1082421	0					
ANR	1082498	IdentifierDeclStatement	ArgList args ;	6021:1:182523:182535	1082421	5	True				
ANR	1082499	IdentifierDecl	args		1082421	0					
ANR	1082500	IdentifierDeclType	ArgList		1082421	0					
ANR	1082501	Identifier	args		1082421	1					
ANR	1082502	IdentifierDeclStatement	"char * softkill_binary = param ( ""WINDOWS_SOFTKILL"" ) ;"	6022:1:182538:182587	1082421	6	True				
ANR	1082503	IdentifierDecl	"* softkill_binary = param ( ""WINDOWS_SOFTKILL"" )"		1082421	0					
ANR	1082504	IdentifierDeclType	char *		1082421	0					
ANR	1082505	Identifier	softkill_binary		1082421	1					
ANR	1082506	AssignmentExpression	"* softkill_binary = param ( ""WINDOWS_SOFTKILL"" )"		1082421	2		=			
ANR	1082507	Identifier	softkill_binary		1082421	0					
ANR	1082508	CallExpression	"param ( ""WINDOWS_SOFTKILL"" )"		1082421	1					
ANR	1082509	Callee	param		1082421	0					
ANR	1082510	Identifier	param		1082421	0					
ANR	1082511	ArgumentList	"""WINDOWS_SOFTKILL"""		1082421	1					
ANR	1082512	Argument	"""WINDOWS_SOFTKILL"""		1082421	0					
ANR	1082513	PrimaryExpression	"""WINDOWS_SOFTKILL"""		1082421	0					
ANR	1082514	IfStatement	if ( softkill_binary == NULL )		1082421	7					
ANR	1082515	Condition	softkill_binary == NULL	6023:5:182594:182616	1082421	0	True				
ANR	1082516	EqualityExpression	softkill_binary == NULL		1082421	0		==			
ANR	1082517	Identifier	softkill_binary		1082421	0					
ANR	1082518	Identifier	NULL		1082421	1					
ANR	1082519	CompoundStatement		33:30:820:820	1082421	1					
ANR	1082520	ExpressionStatement	"dprintf ( D_ALWAYS , ""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"" )"	6024:2:182623:182702	1082421	0	True				
ANR	1082521	CallExpression	"dprintf ( D_ALWAYS , ""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"" )"		1082421	0					
ANR	1082522	Callee	dprintf		1082421	0					
ANR	1082523	Identifier	dprintf		1082421	0					
ANR	1082524	ArgumentList	D_ALWAYS		1082421	1					
ANR	1082525	Argument	D_ALWAYS		1082421	0					
ANR	1082526	Identifier	D_ALWAYS		1082421	0					
ANR	1082527	Argument	"""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"""		1082421	1					
ANR	1082528	PrimaryExpression	"""cannot send softkill since WINDOWS_SOFTKILL is undefined\\n"""		1082421	0					
ANR	1082529	ReturnStatement	return FALSE ;	6025:2:182706:182718	1082421	1	True				
ANR	1082530	Identifier	FALSE		1082421	0					
ANR	1082531	ExpressionStatement	args . AppendArg ( softkill_binary )	6027:1:182724:182755	1082421	8	True				
ANR	1082532	CallExpression	args . AppendArg ( softkill_binary )		1082421	0					
ANR	1082533	Callee	args . AppendArg		1082421	0					
ANR	1082534	MemberAccess	args . AppendArg		1082421	0					
ANR	1082535	Identifier	args		1082421	0					
ANR	1082536	Identifier	AppendArg		1082421	1					
ANR	1082537	ArgumentList	softkill_binary		1082421	1					
ANR	1082538	Argument	softkill_binary		1082421	0					
ANR	1082539	Identifier	softkill_binary		1082421	0					
ANR	1082540	ExpressionStatement	free ( softkill_binary )	6028:1:182758:182779	1082421	9	True				
ANR	1082541	CallExpression	free ( softkill_binary )		1082421	0					
ANR	1082542	Callee	free		1082421	0					
ANR	1082543	Identifier	free		1082421	0					
ANR	1082544	ArgumentList	softkill_binary		1082421	1					
ANR	1082545	Argument	softkill_binary		1082421	0					
ANR	1082546	Identifier	softkill_binary		1082421	0					
ANR	1082547	ExpressionStatement	args . AppendArg ( pid )	6029:1:182782:182801	1082421	10	True				
ANR	1082548	CallExpression	args . AppendArg ( pid )		1082421	0					
ANR	1082549	Callee	args . AppendArg		1082421	0					
ANR	1082550	MemberAccess	args . AppendArg		1082421	0					
ANR	1082551	Identifier	args		1082421	0					
ANR	1082552	Identifier	AppendArg		1082421	1					
ANR	1082553	ArgumentList	pid		1082421	1					
ANR	1082554	Argument	pid		1082421	0					
ANR	1082555	Identifier	pid		1082421	0					
ANR	1082556	IdentifierDeclStatement	int ret = my_system ( args ) ;	6031:1:182846:182871	1082421	11	True				
ANR	1082557	IdentifierDecl	ret = my_system ( args )		1082421	0					
ANR	1082558	IdentifierDeclType	int		1082421	0					
ANR	1082559	Identifier	ret		1082421	1					
ANR	1082560	AssignmentExpression	ret = my_system ( args )		1082421	2		=			
ANR	1082561	Identifier	ret		1082421	0					
ANR	1082562	CallExpression	my_system ( args )		1082421	1					
ANR	1082563	Callee	my_system		1082421	0					
ANR	1082564	Identifier	my_system		1082421	0					
ANR	1082565	ArgumentList	args		1082421	1					
ANR	1082566	Argument	args		1082421	0					
ANR	1082567	Identifier	args		1082421	0					
ANR	1082568	ExpressionStatement	"dprintf ( ( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS , ""return value from my_system for softkill: %d\\n"" , ret )"	6032:1:182874:182991	1082421	12	True				
ANR	1082569	CallExpression	"dprintf ( ( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS , ""return value from my_system for softkill: %d\\n"" , ret )"		1082421	0					
ANR	1082570	Callee	dprintf		1082421	0					
ANR	1082571	Identifier	dprintf		1082421	0					
ANR	1082572	ArgumentList	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		1082421	1					
ANR	1082573	Argument	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		1082421	0					
ANR	1082574	ConditionalExpression	( ret == 0 ) ? D_FULLDEBUG : D_ALWAYS		1082421	0					
ANR	1082575	Condition	ret == 0		1082421	0					
ANR	1082576	EqualityExpression	ret == 0		1082421	0		==			
ANR	1082577	Identifier	ret		1082421	0					
ANR	1082578	PrimaryExpression	0		1082421	1					
ANR	1082579	Identifier	D_FULLDEBUG		1082421	1					
ANR	1082580	Identifier	D_ALWAYS		1082421	2					
ANR	1082581	Argument	"""return value from my_system for softkill: %d\\n"""		1082421	1					
ANR	1082582	PrimaryExpression	"""return value from my_system for softkill: %d\\n"""		1082421	0					
ANR	1082583	Argument	ret		1082421	2					
ANR	1082584	Identifier	ret		1082421	0					
ANR	1082585	ReturnStatement	return ( ret == 0 ) ;	6035:1:182994:183011	1082421	13	True				
ANR	1082586	EqualityExpression	ret == 0		1082421	0		==			
ANR	1082587	Identifier	ret		1082421	0					
ANR	1082588	PrimaryExpression	0		1082421	1					
ANR	1082589	ReturnType	int		1082421	1					
ANR	1082590	Identifier	DaemonCore :: Shutdown_Graceful		1082421	2					
ANR	1082591	ParameterList	pid_t pid		1082421	3					
ANR	1082592	Parameter	pid_t pid	5990:34:181787:181795	1082421	0	True				
ANR	1082593	ParameterType	pid_t		1082421	0					
ANR	1082594	Identifier	pid		1082421	1					
ANR	1082595	CFGEntryNode	ENTRY		1082421		True				
ANR	1082596	CFGExitNode	EXIT		1082421		True				
ANR	1082597	Symbol	pidinfo		1082421						
ANR	1082598	Symbol	pidTable		1082421						
ANR	1082599	Symbol	ret		1082421						
ANR	1082600	Symbol	* * pidinfo		1082421						
ANR	1082601	Symbol	D_PROCFAMILY		1082421						
ANR	1082602	Symbol	NULL		1082421						
ANR	1082603	Symbol	* pidTable		1082421						
ANR	1082604	Symbol	D_ALWAYS		1082421						
ANR	1082605	Symbol	pid		1082421						
ANR	1082606	Symbol	D_FULLDEBUG		1082421						
ANR	1082607	Symbol	ppid		1082421						
ANR	1082608	Symbol	args		1082421						
ANR	1082609	Symbol	softkill_binary		1082421						
ANR	1082610	Symbol	pidTable -> lookup		1082421						
ANR	1082611	Symbol	pidinfo -> sinful_string		1082421						
ANR	1082612	Symbol	param		1082421						
ANR	1082613	Symbol	Send_Signal		1082421						
ANR	1082614	Symbol	FALSE		1082421						
ANR	1082615	Symbol	* pidinfo		1082421						
ANR	1082616	Symbol	SIGTERM		1082421						
ANR	1082617	Symbol	* pidinfo -> sinful_string		1082421						
ANR	1082618	Symbol	my_system		1082421						
ANR	1082619	Function	DaemonCore :: Suspend_Thread	6069:0:184075:184968							
ANR	1082620	FunctionDef	DaemonCore :: Suspend_Thread (int tid)		1082619	0					
ANR	1082621	CompoundStatement		6070:0:184115:184968	1082619	0					
ANR	1082622	IdentifierDeclStatement	PidEntry * pidinfo ;	6071:1:184118:184135	1082619	0	True				
ANR	1082623	IdentifierDecl	* pidinfo		1082619	0					
ANR	1082624	IdentifierDeclType	PidEntry *		1082619	0					
ANR	1082625	Identifier	pidinfo		1082619	1					
ANR	1082626	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Thread(%d)\\n"" , tid )"	6073:1:184139:184209	1082619	1	True				
ANR	1082627	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Thread(%d)\\n"" , tid )"		1082619	0					
ANR	1082628	Callee	dprintf		1082619	0					
ANR	1082629	Identifier	dprintf		1082619	0					
ANR	1082630	ArgumentList	D_DAEMONCORE		1082619	1					
ANR	1082631	Argument	D_DAEMONCORE		1082619	0					
ANR	1082632	Identifier	D_DAEMONCORE		1082619	0					
ANR	1082633	Argument	"""called DaemonCore::Suspend_Thread(%d)\\n"""		1082619	1					
ANR	1082634	PrimaryExpression	"""called DaemonCore::Suspend_Thread(%d)\\n"""		1082619	0					
ANR	1082635	Argument	tid		1082619	2					
ANR	1082636	Identifier	tid		1082619	0					
ANR	1082637	Statement	if	6077:1:184257:184258	1082619	2	True				
ANR	1082638	Statement	(	6077:4:184260:184260	1082619	3	True				
ANR	1082639	Statement	(	6077:6:184262:184262	1082619	4	True				
ANR	1082640	Statement	pidTable	6077:7:184263:184270	1082619	5	True				
ANR	1082641	Statement	->	6077:15:184271:184272	1082619	6	True				
ANR	1082642	Statement	lookup	6077:17:184273:184278	1082619	7	True				
ANR	1082643	Statement	(	6077:23:184279:184279	1082619	8	True				
ANR	1082644	Statement	tid	6077:24:184280:184282	1082619	9	True				
ANR	1082645	Statement	","	6077:27:184283:184283	1082619	10	True				
ANR	1082646	Statement	pidinfo	6077:29:184285:184291	1082619	11	True				
ANR	1082647	Statement	)	6077:36:184292:184292	1082619	12	True				
ANR	1082648	Statement	<	6077:38:184294:184294	1082619	13	True				
ANR	1082649	Statement	0	6077:40:184296:184296	1082619	14	True				
ANR	1082650	Statement	)	6077:41:184297:184297	1082619	15	True				
ANR	1082651	Statement	||	6080:2:184383:184384	1082619	16	True				
ANR	1082652	Statement	(	6080:5:184386:184386	1082619	17	True				
ANR	1082653	Statement	pidinfo	6080:6:184387:184393	1082619	18	True				
ANR	1082654	Statement	->	6080:13:184394:184395	1082619	19	True				
ANR	1082655	Statement	hProcess	6080:15:184396:184403	1082619	20	True				
ANR	1082656	Statement	!=	6080:24:184405:184406	1082619	21	True				
ANR	1082657	Statement	NULL	6080:27:184408:184411	1082619	22	True				
ANR	1082658	Statement	)	6080:31:184412:184412	1082619	23	True				
ANR	1082659	Statement	||	6082:2:184454:184455	1082619	24	True				
ANR	1082660	Statement	(	6082:5:184457:184457	1082619	25	True				
ANR	1082661	Statement	pidinfo	6082:6:184458:184464	1082619	26	True				
ANR	1082662	Statement	->	6082:13:184465:184466	1082619	27	True				
ANR	1082663	Statement	hThread	6082:15:184467:184473	1082619	28	True				
ANR	1082664	Statement	==	6082:23:184475:184476	1082619	29	True				
ANR	1082665	Statement	NULL	6082:26:184478:184481	1082619	30	True				
ANR	1082666	Statement	)	6082:31:184483:184483	1082619	31	True				
ANR	1082667	Statement	)	6084:2:184494:184494	1082619	32	True				
ANR	1082668	CompoundStatement		16:1:381:381	1082619	33					
ANR	1082669	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"" , tid )"	6086:2:184501:184576	1082619	0	True				
ANR	1082670	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"" , tid )"		1082619	0					
ANR	1082671	Callee	dprintf		1082619	0					
ANR	1082672	Identifier	dprintf		1082619	0					
ANR	1082673	ArgumentList	D_ALWAYS		1082619	1					
ANR	1082674	Argument	D_ALWAYS		1082619	0					
ANR	1082675	Identifier	D_ALWAYS		1082619	0					
ANR	1082676	Argument	"""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"""		1082619	1					
ANR	1082677	PrimaryExpression	"""DaemonCore:Suspend_Thread(%d) failed, bad tid\\n"""		1082619	0					
ANR	1082678	Argument	tid		1082619	2					
ANR	1082679	Identifier	tid		1082619	0					
ANR	1082680	ReturnStatement	return FALSE ;	6088:2:184580:184592	1082619	1	True				
ANR	1082681	Identifier	FALSE		1082619	0					
ANR	1082682	ReturnStatement	return Suspend_Process ( tid ) ;	6093:1:184667:184694	1082619	34	True				
ANR	1082683	CallExpression	Suspend_Process ( tid )		1082619	0					
ANR	1082684	Callee	Suspend_Process		1082619	0					
ANR	1082685	Identifier	Suspend_Process		1082619	0					
ANR	1082686	ArgumentList	tid		1082619	1					
ANR	1082687	Argument	tid		1082619	0					
ANR	1082688	Identifier	tid		1082619	0					
ANR	1082689	ReturnType	int		1082619	1					
ANR	1082690	Identifier	DaemonCore :: Suspend_Thread		1082619	2					
ANR	1082691	ParameterList	int tid		1082619	3					
ANR	1082692	Parameter	int tid	6069:31:184106:184112	1082619	0	True				
ANR	1082693	ParameterType	int		1082619	0					
ANR	1082694	Identifier	tid		1082619	1					
ANR	1082695	CFGEntryNode	ENTRY		1082619		True				
ANR	1082696	CFGExitNode	EXIT		1082619		True				
ANR	1082697	Symbol	pidinfo		1082619						
ANR	1082698	Symbol	Suspend_Process		1082619						
ANR	1082699	Symbol	D_DAEMONCORE		1082619						
ANR	1082700	Symbol	D_ALWAYS		1082619						
ANR	1082701	Symbol	FALSE		1082619						
ANR	1082702	Symbol	tid		1082619						
ANR	1082703	Function	DaemonCore :: Continue_Thread	6105:0:184971:186002							
ANR	1082704	FunctionDef	DaemonCore :: Continue_Thread (int tid)		1082703	0					
ANR	1082705	CompoundStatement		6106:0:185012:186002	1082703	0					
ANR	1082706	IdentifierDeclStatement	PidEntry * pidinfo ;	6107:1:185015:185032	1082703	0	True				
ANR	1082707	IdentifierDecl	* pidinfo		1082703	0					
ANR	1082708	IdentifierDeclType	PidEntry *		1082703	0					
ANR	1082709	Identifier	pidinfo		1082703	1					
ANR	1082710	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Thread(%d)\\n"" , tid )"	6109:1:185036:185107	1082703	1	True				
ANR	1082711	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Thread(%d)\\n"" , tid )"		1082703	0					
ANR	1082712	Callee	dprintf		1082703	0					
ANR	1082713	Identifier	dprintf		1082703	0					
ANR	1082714	ArgumentList	D_DAEMONCORE		1082703	1					
ANR	1082715	Argument	D_DAEMONCORE		1082703	0					
ANR	1082716	Identifier	D_DAEMONCORE		1082703	0					
ANR	1082717	Argument	"""called DaemonCore::Continue_Thread(%d)\\n"""		1082703	1					
ANR	1082718	PrimaryExpression	"""called DaemonCore::Continue_Thread(%d)\\n"""		1082703	0					
ANR	1082719	Argument	tid		1082703	2					
ANR	1082720	Identifier	tid		1082703	0					
ANR	1082721	Statement	if	6113:1:185155:185156	1082703	2	True				
ANR	1082722	Statement	(	6113:4:185158:185158	1082703	3	True				
ANR	1082723	Statement	(	6113:6:185160:185160	1082703	4	True				
ANR	1082724	Statement	pidTable	6113:7:185161:185168	1082703	5	True				
ANR	1082725	Statement	->	6113:15:185169:185170	1082703	6	True				
ANR	1082726	Statement	lookup	6113:17:185171:185176	1082703	7	True				
ANR	1082727	Statement	(	6113:23:185177:185177	1082703	8	True				
ANR	1082728	Statement	tid	6113:24:185178:185180	1082703	9	True				
ANR	1082729	Statement	","	6113:27:185181:185181	1082703	10	True				
ANR	1082730	Statement	pidinfo	6113:29:185183:185189	1082703	11	True				
ANR	1082731	Statement	)	6113:36:185190:185190	1082703	12	True				
ANR	1082732	Statement	<	6113:38:185192:185192	1082703	13	True				
ANR	1082733	Statement	0	6113:40:185194:185194	1082703	14	True				
ANR	1082734	Statement	)	6113:41:185195:185195	1082703	15	True				
ANR	1082735	Statement	||	6116:2:185281:185282	1082703	16	True				
ANR	1082736	Statement	(	6116:5:185284:185284	1082703	17	True				
ANR	1082737	Statement	pidinfo	6116:6:185285:185291	1082703	18	True				
ANR	1082738	Statement	->	6116:13:185292:185293	1082703	19	True				
ANR	1082739	Statement	hProcess	6116:15:185294:185301	1082703	20	True				
ANR	1082740	Statement	!=	6116:24:185303:185304	1082703	21	True				
ANR	1082741	Statement	NULL	6116:27:185306:185309	1082703	22	True				
ANR	1082742	Statement	)	6116:31:185310:185310	1082703	23	True				
ANR	1082743	Statement	||	6118:2:185352:185353	1082703	24	True				
ANR	1082744	Statement	(	6118:5:185355:185355	1082703	25	True				
ANR	1082745	Statement	pidinfo	6118:6:185356:185362	1082703	26	True				
ANR	1082746	Statement	->	6118:13:185363:185364	1082703	27	True				
ANR	1082747	Statement	hThread	6118:15:185365:185371	1082703	28	True				
ANR	1082748	Statement	==	6118:23:185373:185374	1082703	29	True				
ANR	1082749	Statement	NULL	6118:26:185376:185379	1082703	30	True				
ANR	1082750	Statement	)	6118:31:185381:185381	1082703	31	True				
ANR	1082751	Statement	)	6120:2:185392:185392	1082703	32	True				
ANR	1082752	CompoundStatement		16:1:382:382	1082703	33					
ANR	1082753	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"" , tid )"	6122:2:185399:185475	1082703	0	True				
ANR	1082754	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"" , tid )"		1082703	0					
ANR	1082755	Callee	dprintf		1082703	0					
ANR	1082756	Identifier	dprintf		1082703	0					
ANR	1082757	ArgumentList	D_ALWAYS		1082703	1					
ANR	1082758	Argument	D_ALWAYS		1082703	0					
ANR	1082759	Identifier	D_ALWAYS		1082703	0					
ANR	1082760	Argument	"""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"""		1082703	1					
ANR	1082761	PrimaryExpression	"""DaemonCore:Continue_Thread(%d) failed, bad tid\\n"""		1082703	0					
ANR	1082762	Argument	tid		1082703	2					
ANR	1082763	Identifier	tid		1082703	0					
ANR	1082764	ReturnStatement	return FALSE ;	6124:2:185479:185491	1082703	1	True				
ANR	1082765	Identifier	FALSE		1082703	0					
ANR	1082766	ReturnStatement	return Continue_Process ( tid ) ;	6129:1:185566:185594	1082703	34	True				
ANR	1082767	CallExpression	Continue_Process ( tid )		1082703	0					
ANR	1082768	Callee	Continue_Process		1082703	0					
ANR	1082769	Identifier	Continue_Process		1082703	0					
ANR	1082770	ArgumentList	tid		1082703	1					
ANR	1082771	Argument	tid		1082703	0					
ANR	1082772	Identifier	tid		1082703	0					
ANR	1082773	ReturnType	int		1082703	1					
ANR	1082774	Identifier	DaemonCore :: Continue_Thread		1082703	2					
ANR	1082775	ParameterList	int tid		1082703	3					
ANR	1082776	Parameter	int tid	6105:32:185003:185009	1082703	0	True				
ANR	1082777	ParameterType	int		1082703	0					
ANR	1082778	Identifier	tid		1082703	1					
ANR	1082779	CFGEntryNode	ENTRY		1082703		True				
ANR	1082780	CFGExitNode	EXIT		1082703		True				
ANR	1082781	Symbol	pidinfo		1082703						
ANR	1082782	Symbol	Continue_Process		1082703						
ANR	1082783	Symbol	D_DAEMONCORE		1082703						
ANR	1082784	Symbol	D_ALWAYS		1082703						
ANR	1082785	Symbol	FALSE		1082703						
ANR	1082786	Symbol	tid		1082703						
ANR	1082787	Function	DaemonCore :: Suspend_Process	6149:0:186005:186406							
ANR	1082788	FunctionDef	DaemonCore :: Suspend_Process (pid_t pid)		1082787	0					
ANR	1082789	CompoundStatement		6150:0:186048:186406	1082787	0					
ANR	1082790	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Process(%d)\\n"" , pid )"	6151:1:186051:186122	1082787	0	True				
ANR	1082791	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Suspend_Process(%d)\\n"" , pid )"		1082787	0					
ANR	1082792	Callee	dprintf		1082787	0					
ANR	1082793	Identifier	dprintf		1082787	0					
ANR	1082794	ArgumentList	D_DAEMONCORE		1082787	1					
ANR	1082795	Argument	D_DAEMONCORE		1082787	0					
ANR	1082796	Identifier	D_DAEMONCORE		1082787	0					
ANR	1082797	Argument	"""called DaemonCore::Suspend_Process(%d)\\n"""		1082787	1					
ANR	1082798	PrimaryExpression	"""called DaemonCore::Suspend_Process(%d)\\n"""		1082787	0					
ANR	1082799	Argument	pid		1082787	2					
ANR	1082800	Identifier	pid		1082787	0					
ANR	1082801	IfStatement	if ( pid == ppid )		1082787	1					
ANR	1082802	Condition	pid == ppid	6154:6:186131:186141	1082787	0	True				
ANR	1082803	EqualityExpression	pid == ppid		1082787	0		==			
ANR	1082804	Identifier	pid		1082787	0					
ANR	1082805	Identifier	ppid		1082787	1					
ANR	1082806	ReturnStatement	return FALSE ;	6155:2:186147:186159	1082787	1	True				
ANR	1082807	Identifier	FALSE		1082787	0					
ANR	1082808	ReturnStatement	return windows_suspend ( pid ) ;	6158:1:186211:186238	1082787	2	True				
ANR	1082809	CallExpression	windows_suspend ( pid )		1082787	0					
ANR	1082810	Callee	windows_suspend		1082787	0					
ANR	1082811	Identifier	windows_suspend		1082787	0					
ANR	1082812	ArgumentList	pid		1082787	1					
ANR	1082813	Argument	pid		1082787	0					
ANR	1082814	Identifier	pid		1082787	0					
ANR	1082815	ReturnType	int		1082787	1					
ANR	1082816	Identifier	DaemonCore :: Suspend_Process		1082787	2					
ANR	1082817	ParameterList	pid_t pid		1082787	3					
ANR	1082818	Parameter	pid_t pid	6149:32:186037:186045	1082787	0	True				
ANR	1082819	ParameterType	pid_t		1082787	0					
ANR	1082820	Identifier	pid		1082787	1					
ANR	1082821	CFGEntryNode	ENTRY		1082787		True				
ANR	1082822	CFGExitNode	EXIT		1082787		True				
ANR	1082823	Symbol	D_DAEMONCORE		1082787						
ANR	1082824	Symbol	pid		1082787						
ANR	1082825	Symbol	FALSE		1082787						
ANR	1082826	Symbol	windows_suspend		1082787						
ANR	1082827	Symbol	ppid		1082787						
ANR	1082828	Function	DaemonCore :: Continue_Process	6167:0:186409:186747							
ANR	1082829	FunctionDef	DaemonCore :: Continue_Process (pid_t pid)		1082828	0					
ANR	1082830	CompoundStatement		6168:0:186453:186747	1082828	0					
ANR	1082831	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Process(%d)\\n"" , pid )"	6169:1:186456:186528	1082828	0	True				
ANR	1082832	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Continue_Process(%d)\\n"" , pid )"		1082828	0					
ANR	1082833	Callee	dprintf		1082828	0					
ANR	1082834	Identifier	dprintf		1082828	0					
ANR	1082835	ArgumentList	D_DAEMONCORE		1082828	1					
ANR	1082836	Argument	D_DAEMONCORE		1082828	0					
ANR	1082837	Identifier	D_DAEMONCORE		1082828	0					
ANR	1082838	Argument	"""called DaemonCore::Continue_Process(%d)\\n"""		1082828	1					
ANR	1082839	PrimaryExpression	"""called DaemonCore::Continue_Process(%d)\\n"""		1082828	0					
ANR	1082840	Argument	pid		1082828	2					
ANR	1082841	Identifier	pid		1082828	0					
ANR	1082842	ReturnStatement	return windows_continue ( pid ) ;	6173:1:186551:186579	1082828	1	True				
ANR	1082843	CallExpression	windows_continue ( pid )		1082828	0					
ANR	1082844	Callee	windows_continue		1082828	0					
ANR	1082845	Identifier	windows_continue		1082828	0					
ANR	1082846	ArgumentList	pid		1082828	1					
ANR	1082847	Argument	pid		1082828	0					
ANR	1082848	Identifier	pid		1082828	0					
ANR	1082849	ReturnType	int		1082828	1					
ANR	1082850	Identifier	DaemonCore :: Continue_Process		1082828	2					
ANR	1082851	ParameterList	pid_t pid		1082828	3					
ANR	1082852	Parameter	pid_t pid	6167:33:186442:186450	1082828	0	True				
ANR	1082853	ParameterType	pid_t		1082828	0					
ANR	1082854	Identifier	pid		1082828	1					
ANR	1082855	CFGEntryNode	ENTRY		1082828		True				
ANR	1082856	CFGExitNode	EXIT		1082828		True				
ANR	1082857	Symbol	windows_continue		1082828						
ANR	1082858	Symbol	D_DAEMONCORE		1082828						
ANR	1082859	Symbol	pid		1082828						
ANR	1082860	Function	DaemonCore :: SetDataPtr	6182:0:186750:186992							
ANR	1082861	FunctionDef	DaemonCore :: SetDataPtr (void * dptr)		1082860	0					
ANR	1082862	CompoundStatement		6183:0:186789:186992	1082860	0					
ANR	1082863	IfStatement	if ( curr_dataptr == NULL )		1082860	0					
ANR	1082864	Condition	curr_dataptr == NULL	6187:6:186909:186928	1082860	0	True				
ANR	1082865	EqualityExpression	curr_dataptr == NULL		1082860	0		==			
ANR	1082866	Identifier	curr_dataptr		1082860	0					
ANR	1082867	Identifier	NULL		1082860	1					
ANR	1082868	CompoundStatement		5:29:142:142	1082860	1					
ANR	1082869	ReturnStatement	return FALSE ;	6188:2:186936:186948	1082860	0	True				
ANR	1082870	Identifier	FALSE		1082860	0					
ANR	1082871	ExpressionStatement	* curr_dataptr = dptr	6191:1:186955:186975	1082860	1	True				
ANR	1082872	AssignmentExpression	* curr_dataptr = dptr		1082860	0		=			
ANR	1082873	UnaryOperationExpression	* curr_dataptr		1082860	0					
ANR	1082874	UnaryOperator	*		1082860	0					
ANR	1082875	Identifier	curr_dataptr		1082860	1					
ANR	1082876	Identifier	dptr		1082860	1					
ANR	1082877	ReturnStatement	return TRUE ;	6193:1:186979:186990	1082860	2	True				
ANR	1082878	Identifier	TRUE		1082860	0					
ANR	1082879	ReturnType	int		1082860	1					
ANR	1082880	Identifier	DaemonCore :: SetDataPtr		1082860	2					
ANR	1082881	ParameterList	void * dptr		1082860	3					
ANR	1082882	Parameter	void * dptr	6182:27:186777:186786	1082860	0	True				
ANR	1082883	ParameterType	void *		1082860	0					
ANR	1082884	Identifier	dptr		1082860	1					
ANR	1082885	CFGEntryNode	ENTRY		1082860		True				
ANR	1082886	CFGExitNode	EXIT		1082860		True				
ANR	1082887	Symbol	* curr_dataptr		1082860						
ANR	1082888	Symbol	NULL		1082860						
ANR	1082889	Symbol	dptr		1082860						
ANR	1082890	Symbol	TRUE		1082860						
ANR	1082891	Symbol	FALSE		1082860						
ANR	1082892	Symbol	curr_dataptr		1082860						
ANR	1082893	Function	DaemonCore :: Register_DataPtr	6196:0:186995:187249							
ANR	1082894	FunctionDef	DaemonCore :: Register_DataPtr (void * dptr)		1082893	0					
ANR	1082895	CompoundStatement		6197:0:187040:187249	1082893	0					
ANR	1082896	IfStatement	if ( curr_regdataptr == NULL )		1082893	0					
ANR	1082897	Condition	curr_regdataptr == NULL	6201:6:187160:187182	1082893	0	True				
ANR	1082898	EqualityExpression	curr_regdataptr == NULL		1082893	0		==			
ANR	1082899	Identifier	curr_regdataptr		1082893	0					
ANR	1082900	Identifier	NULL		1082893	1					
ANR	1082901	CompoundStatement		5:32:145:145	1082893	1					
ANR	1082902	ReturnStatement	return FALSE ;	6202:2:187190:187202	1082893	0	True				
ANR	1082903	Identifier	FALSE		1082893	0					
ANR	1082904	ExpressionStatement	* curr_regdataptr = dptr	6205:1:187209:187232	1082893	1	True				
ANR	1082905	AssignmentExpression	* curr_regdataptr = dptr		1082893	0		=			
ANR	1082906	UnaryOperationExpression	* curr_regdataptr		1082893	0					
ANR	1082907	UnaryOperator	*		1082893	0					
ANR	1082908	Identifier	curr_regdataptr		1082893	1					
ANR	1082909	Identifier	dptr		1082893	1					
ANR	1082910	ReturnStatement	return TRUE ;	6207:1:187236:187247	1082893	2	True				
ANR	1082911	Identifier	TRUE		1082893	0					
ANR	1082912	ReturnType	int		1082893	1					
ANR	1082913	Identifier	DaemonCore :: Register_DataPtr		1082893	2					
ANR	1082914	ParameterList	void * dptr		1082893	3					
ANR	1082915	Parameter	void * dptr	6196:33:187028:187037	1082893	0	True				
ANR	1082916	ParameterType	void *		1082893	0					
ANR	1082917	Identifier	dptr		1082893	1					
ANR	1082918	CFGEntryNode	ENTRY		1082893		True				
ANR	1082919	CFGExitNode	EXIT		1082893		True				
ANR	1082920	Symbol	curr_regdataptr		1082893						
ANR	1082921	Symbol	* curr_regdataptr		1082893						
ANR	1082922	Symbol	NULL		1082893						
ANR	1082923	Symbol	dptr		1082893						
ANR	1082924	Symbol	TRUE		1082893						
ANR	1082925	Symbol	FALSE		1082893						
ANR	1082926	Function	DaemonCore :: GetDataPtr	6210:0:187252:187469							
ANR	1082927	FunctionDef	DaemonCore :: GetDataPtr ()		1082926	0					
ANR	1082928	CompoundStatement		6211:0:187283:187469	1082926	0					
ANR	1082929	IfStatement	if ( curr_dataptr == NULL )		1082926	0					
ANR	1082930	Condition	curr_dataptr == NULL	6215:6:187403:187422	1082926	0	True				
ANR	1082931	EqualityExpression	curr_dataptr == NULL		1082926	0		==			
ANR	1082932	Identifier	curr_dataptr		1082926	0					
ANR	1082933	Identifier	NULL		1082926	1					
ANR	1082934	ReturnStatement	return NULL ;	6216:2:187428:187439	1082926	1	True				
ANR	1082935	Identifier	NULL		1082926	0					
ANR	1082936	ReturnStatement	return ( * curr_dataptr ) ;	6218:1:187443:187467	1082926	1	True				
ANR	1082937	UnaryOperationExpression	* curr_dataptr		1082926	0					
ANR	1082938	UnaryOperator	*		1082926	0					
ANR	1082939	Identifier	curr_dataptr		1082926	1					
ANR	1082940	ReturnType	void *		1082926	1					
ANR	1082941	Identifier	DaemonCore :: GetDataPtr		1082926	2					
ANR	1082942	ParameterList			1082926	3					
ANR	1082943	CFGEntryNode	ENTRY		1082926		True				
ANR	1082944	CFGExitNode	EXIT		1082926		True				
ANR	1082945	Symbol	* curr_dataptr		1082926						
ANR	1082946	Symbol	NULL		1082926						
ANR	1082947	Symbol	curr_dataptr		1082926						
ANR	1082948	Function	DaemonCore :: SetFDInheritFlag	6226:0:187721:188612							
ANR	1082949	FunctionDef	"DaemonCore :: SetFDInheritFlag (int fh , int flag)"		1082948	0					
ANR	1082950	CompoundStatement		6227:0:187772:188612	1082948	0					
ANR	1082951	IdentifierDeclStatement	long underlying_handle ;	6228:1:187775:187797	1082948	0	True				
ANR	1082952	IdentifierDecl	underlying_handle		1082948	0					
ANR	1082953	IdentifierDeclType	long		1082948	0					
ANR	1082954	Identifier	underlying_handle		1082948	1					
ANR	1082955	ExpressionStatement	underlying_handle = _get_osfhandle ( fh )	6230:1:187801:187839	1082948	1	True				
ANR	1082956	AssignmentExpression	underlying_handle = _get_osfhandle ( fh )		1082948	0		=			
ANR	1082957	Identifier	underlying_handle		1082948	0					
ANR	1082958	CallExpression	_get_osfhandle ( fh )		1082948	1					
ANR	1082959	Callee	_get_osfhandle		1082948	0					
ANR	1082960	Identifier	_get_osfhandle		1082948	0					
ANR	1082961	ArgumentList	fh		1082948	1					
ANR	1082962	Argument	fh		1082948	0					
ANR	1082963	Identifier	fh		1082948	0					
ANR	1082964	IfStatement	if ( underlying_handle == - 1L )		1082948	2					
ANR	1082965	Condition	underlying_handle == - 1L	6232:6:187848:187871	1082948	0	True				
ANR	1082966	EqualityExpression	underlying_handle == - 1L		1082948	0		==			
ANR	1082967	Identifier	underlying_handle		1082948	0					
ANR	1082968	UnaryOperationExpression	- 1L		1082948	1					
ANR	1082969	UnaryOperator	-		1082948	0					
ANR	1082970	PrimaryExpression	1L		1082948	1					
ANR	1082971	CompoundStatement		6:33:102:102	1082948	1					
ANR	1082972	ReturnStatement	return TRUE ;	6235:2:187961:187972	1082948	0	True				
ANR	1082973	Identifier	TRUE		1082948	0					
ANR	1082974	Statement	if	6239:1:188033:188034	1082948	3	True				
ANR	1082975	Statement	(	6239:4:188036:188036	1082948	4	True				
ANR	1082976	Statement	!	6239:5:188037:188037	1082948	5	True				
ANR	1082977	Statement	::	6239:6:188038:188039	1082948	6	True				
ANR	1082978	Statement	SetHandleInformation	6239:8:188040:188059	1082948	7	True				
ANR	1082979	Statement	(	6239:28:188060:188060	1082948	8	True				
ANR	1082980	Statement	(	6239:29:188061:188061	1082948	9	True				
ANR	1082981	Statement	HANDLE	6239:30:188062:188067	1082948	10	True				
ANR	1082982	Statement	)	6239:36:188068:188068	1082948	11	True				
ANR	1082983	Statement	underlying_handle	6239:37:188069:188085	1082948	12	True				
ANR	1082984	Statement	","	6239:54:188086:188086	1082948	13	True				
ANR	1082985	Statement	HANDLE_FLAG_INHERIT	6240:2:188090:188108	1082948	14	True				
ANR	1082986	Statement	","	6240:21:188109:188109	1082948	15	True				
ANR	1082987	Statement	flag	6240:23:188111:188114	1082948	16	True				
ANR	1082988	Statement	?	6240:28:188116:188116	1082948	17	True				
ANR	1082989	Label	HANDLE_FLAG_INHERIT :	6240:30:188118:188138	1082948	18	True				
ANR	1082990	Identifier	HANDLE_FLAG_INHERIT		1082948	0					
ANR	1082991	Statement	0	6240:52:188140:188140	1082948	19	True				
ANR	1082992	Statement	)	6240:53:188141:188141	1082948	20	True				
ANR	1082993	Statement	)	6240:55:188143:188143	1082948	21	True				
ANR	1082994	CompoundStatement		16:3:402:431	1082948	22					
ANR	1082995	IdentifierDeclStatement	DWORD whynot = GetLastError ( ) ;	6242:3:188175:188204	1082948	0	True				
ANR	1082996	IdentifierDecl	whynot = GetLastError ( )		1082948	0					
ANR	1082997	IdentifierDeclType	DWORD		1082948	0					
ANR	1082998	Identifier	whynot		1082948	1					
ANR	1082999	AssignmentExpression	whynot = GetLastError ( )		1082948	2		=			
ANR	1083000	Identifier	whynot		1082948	0					
ANR	1083001	CallExpression	GetLastError ( )		1082948	1					
ANR	1083002	Callee	GetLastError		1082948	0					
ANR	1083003	Identifier	GetLastError		1082948	0					
ANR	1083004	ArgumentList			1082948	1					
ANR	1083005	IfStatement	if ( whynot == ERROR_INVALID_HANDLE )		1082948	1					
ANR	1083006	Condition	whynot == ERROR_INVALID_HANDLE	6244:8:188215:188244	1082948	0	True				
ANR	1083007	EqualityExpression	whynot == ERROR_INVALID_HANDLE		1082948	0		==			
ANR	1083008	Identifier	whynot		1082948	0					
ANR	1083009	Identifier	ERROR_INVALID_HANDLE		1082948	1					
ANR	1083010	CompoundStatement		18:41:475:475	1082948	1					
ANR	1083011	ReturnStatement	return TRUE ;	6248:4:188428:188439	1082948	0	True				
ANR	1083012	Identifier	TRUE		1082948	0					
ANR	1083013	Statement	dprintf	6251:3:188450:188456	1082948	2	True				
ANR	1083014	Statement	(	6251:10:188457:188457	1082948	3	True				
ANR	1083015	Statement	D_ALWAYS	6251:11:188458:188465	1082948	4	True				
ANR	1083016	Statement	","	6251:19:188466:188466	1082948	5	True				
ANR	1083017	Statement	"""ERROR: SetHandleInformation() failed in SetFDInheritFlag(%d,%d),"""	6252:4:188472:188537	1082948	6	True				
ANR	1083018	Statement	"""err=%d\\n"""	6253:4:188543:188552	1082948	7	True				
ANR	1083019	Statement	","	6254:4:188558:188558	1082948	8	True				
ANR	1083020	Statement	fh	6254:5:188559:188560	1082948	9	True				
ANR	1083021	Statement	","	6254:7:188561:188561	1082948	10	True				
ANR	1083022	Statement	flag	6254:8:188562:188565	1082948	11	True				
ANR	1083023	Statement	","	6254:12:188566:188566	1082948	12	True				
ANR	1083024	Statement	whynot	6254:13:188567:188572	1082948	13	True				
ANR	1083025	Statement	)	6254:19:188573:188573	1082948	14	True				
ANR	1083026	ExpressionStatement		6254:20:188574:188574	1082948	15	True				
ANR	1083027	ReturnStatement	return FALSE ;	6256:3:188580:188592	1082948	16	True				
ANR	1083028	Identifier	FALSE		1082948	0					
ANR	1083029	ReturnStatement	return TRUE ;	6259:1:188599:188610	1082948	23	True				
ANR	1083030	Identifier	TRUE		1082948	0					
ANR	1083031	ReturnType	int		1082948	1					
ANR	1083032	Identifier	DaemonCore :: SetFDInheritFlag		1082948	2					
ANR	1083033	ParameterList	"int fh , int flag"		1082948	3					
ANR	1083034	Parameter	int fh	6226:33:187754:187759	1082948	0	True				
ANR	1083035	ParameterType	int		1082948	0					
ANR	1083036	Identifier	fh		1082948	1					
ANR	1083037	Parameter	int flag	6226:41:187762:187769	1082948	1	True				
ANR	1083038	ParameterType	int		1082948	0					
ANR	1083039	Identifier	flag		1082948	1					
ANR	1083040	CFGEntryNode	ENTRY		1082948		True				
ANR	1083041	CFGExitNode	EXIT		1082948		True				
ANR	1083042	Symbol	underlying_handle		1082948						
ANR	1083043	Symbol	fh		1082948						
ANR	1083044	Symbol	flag		1082948						
ANR	1083045	Symbol	GetLastError		1082948						
ANR	1083046	Symbol	TRUE		1082948						
ANR	1083047	Symbol	whynot		1082948						
ANR	1083048	Symbol	ERROR_INVALID_HANDLE		1082948						
ANR	1083049	Symbol	FALSE		1082948						
ANR	1083050	Symbol	_get_osfhandle		1082948						
ANR	1083051	Function	DaemonCore :: Forked_Child_Wants_Exit_By_Exec	6265:0:188642:188769							
ANR	1083052	FunctionDef	DaemonCore :: Forked_Child_Wants_Exit_By_Exec (bool exit_by_exec)		1083051	0					
ANR	1083053	CompoundStatement		6267:0:188712:188769	1083051	0					
ANR	1083054	IfStatement	if ( exit_by_exec )		1083051	0					
ANR	1083055	Condition	exit_by_exec	6268:5:188719:188730	1083051	0	True				
ANR	1083056	Identifier	exit_by_exec		1083051	0					
ANR	1083057	CompoundStatement		2:20:21:21	1083051	1					
ANR	1083058	ExpressionStatement	_condor_exit_with_exec = 1	6269:2:188738:188764	1083051	0	True				
ANR	1083059	AssignmentExpression	_condor_exit_with_exec = 1		1083051	0		=			
ANR	1083060	Identifier	_condor_exit_with_exec		1083051	0					
ANR	1083061	PrimaryExpression	1		1083051	1					
ANR	1083062	ReturnType	void		1083051	1					
ANR	1083063	Identifier	DaemonCore :: Forked_Child_Wants_Exit_By_Exec		1083051	2					
ANR	1083064	ParameterList	bool exit_by_exec		1083051	3					
ANR	1083065	Parameter	bool exit_by_exec	6266:45:188692:188708	1083051	0	True				
ANR	1083066	ParameterType	bool		1083051	0					
ANR	1083067	Identifier	exit_by_exec		1083051	1					
ANR	1083068	CFGEntryNode	ENTRY		1083051		True				
ANR	1083069	CFGExitNode	EXIT		1083051		True				
ANR	1083070	Symbol	exit_by_exec		1083051						
ANR	1083071	Symbol	_condor_exit_with_exec		1083051						
ANR	1083072	DeclStmt									
ANR	1083073	Decl							int	int	g_create_process_errorpipe
ANR	1083074	Function	enterCreateProcessChild	6276:0:188830:188962							
ANR	1083075	FunctionDef	enterCreateProcessChild (int errorpipe)		1083074	0					
ANR	1083076	CompoundStatement		6277:39:188874:188962	1083074	0					
ANR	1083077	ExpressionStatement	ASSERT ( g_create_process_errorpipe == - 1 )	6278:1:188877:188919	1083074	0	True				
ANR	1083078	CallExpression	ASSERT ( g_create_process_errorpipe == - 1 )		1083074	0					
ANR	1083079	Callee	ASSERT		1083074	0					
ANR	1083080	Identifier	ASSERT		1083074	0					
ANR	1083081	ArgumentList	g_create_process_errorpipe == - 1		1083074	1					
ANR	1083082	Argument	g_create_process_errorpipe == - 1		1083074	0					
ANR	1083083	EqualityExpression	g_create_process_errorpipe == - 1		1083074	0		==			
ANR	1083084	Identifier	g_create_process_errorpipe		1083074	0					
ANR	1083085	UnaryOperationExpression	- 1		1083074	1					
ANR	1083086	UnaryOperator	-		1083074	0					
ANR	1083087	PrimaryExpression	1		1083074	1					
ANR	1083088	ExpressionStatement	g_create_process_errorpipe = errorpipe	6279:1:188922:188960	1083074	1	True				
ANR	1083089	AssignmentExpression	g_create_process_errorpipe = errorpipe		1083074	0		=			
ANR	1083090	Identifier	g_create_process_errorpipe		1083074	0					
ANR	1083091	Identifier	errorpipe		1083074	1					
ANR	1083092	ReturnType	void		1083074	1					
ANR	1083093	Identifier	enterCreateProcessChild		1083074	2					
ANR	1083094	ParameterList	int errorpipe		1083074	3					
ANR	1083095	Parameter	int errorpipe	6277:24:188859:188871	1083074	0	True				
ANR	1083096	ParameterType	int		1083074	0					
ANR	1083097	Identifier	errorpipe		1083074	1					
ANR	1083098	CFGEntryNode	ENTRY		1083074		True				
ANR	1083099	CFGExitNode	EXIT		1083074		True				
ANR	1083100	Symbol	errorpipe		1083074						
ANR	1083101	Symbol	g_create_process_errorpipe		1083074						
ANR	1083102	Function	exitCreateProcessChild	6282:0:188965:189031							
ANR	1083103	FunctionDef	exitCreateProcessChild ()		1083102	0					
ANR	1083104	CompoundStatement		6283:25:188995:189031	1083102	0					
ANR	1083105	ExpressionStatement	g_create_process_errorpipe = - 1	6284:1:188998:189029	1083102	0	True				
ANR	1083106	AssignmentExpression	g_create_process_errorpipe = - 1		1083102	0		=			
ANR	1083107	Identifier	g_create_process_errorpipe		1083102	0					
ANR	1083108	UnaryOperationExpression	- 1		1083102	1					
ANR	1083109	UnaryOperator	-		1083102	0					
ANR	1083110	PrimaryExpression	1		1083102	1					
ANR	1083111	ReturnType	void		1083102	1					
ANR	1083112	Identifier	exitCreateProcessChild		1083102	2					
ANR	1083113	ParameterList			1083102	3					
ANR	1083114	CFGEntryNode	ENTRY		1083102		True				
ANR	1083115	CFGExitNode	EXIT		1083102		True				
ANR	1083116	Symbol	g_create_process_errorpipe		1083102						
ANR	1083117	DeclStmt									
ANR	1083118	Decl							void	void ( int status )	__real_exit
ANR	1083119	Function	__wrap_exit	6313:0:190431:192561							
ANR	1083120	FunctionDef	__wrap_exit (int status)		1083119	0					
ANR	1083121	CompoundStatement		6314:0:190460:192561	1083119	0					
ANR	1083122	IfStatement	if ( _condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1 )		1083119	0					
ANR	1083123	Condition	_condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1	6315:6:190468:190530	1083119	0	True				
ANR	1083124	AndExpression	_condor_exit_with_exec == 0 && g_create_process_errorpipe == - 1		1083119	0		&&			
ANR	1083125	EqualityExpression	_condor_exit_with_exec == 0		1083119	0		==			
ANR	1083126	Identifier	_condor_exit_with_exec		1083119	0					
ANR	1083127	PrimaryExpression	0		1083119	1					
ANR	1083128	EqualityExpression	g_create_process_errorpipe == - 1		1083119	1		==			
ANR	1083129	Identifier	g_create_process_errorpipe		1083119	0					
ANR	1083130	UnaryOperationExpression	- 1		1083119	1					
ANR	1083131	UnaryOperator	-		1083119	0					
ANR	1083132	PrimaryExpression	1		1083119	1					
ANR	1083133	CompoundStatement		2:72:73:73	1083119	1					
ANR	1083134	ExpressionStatement	__real_exit ( status )	6319:2:190696:190715	1083119	0	True				
ANR	1083135	CallExpression	__real_exit ( status )		1083119	0					
ANR	1083136	Callee	__real_exit		1083119	0					
ANR	1083137	Identifier	__real_exit		1083119	0					
ANR	1083138	ArgumentList	status		1083119	1					
ANR	1083139	Argument	status		1083119	0					
ANR	1083140	Identifier	status		1083119	0					
ANR	1083141	ExpressionStatement	fflush ( stdout )	6334:1:191157:191173	1083119	1	True				
ANR	1083142	CallExpression	fflush ( stdout )		1083119	0					
ANR	1083143	Callee	fflush		1083119	0					
ANR	1083144	Identifier	fflush		1083119	0					
ANR	1083145	ArgumentList	stdout		1083119	1					
ANR	1083146	Argument	stdout		1083119	0					
ANR	1083147	Identifier	stdout		1083119	0					
ANR	1083148	ExpressionStatement	fflush ( stderr )	6335:1:191176:191192	1083119	2	True				
ANR	1083149	CallExpression	fflush ( stderr )		1083119	0					
ANR	1083150	Callee	fflush		1083119	0					
ANR	1083151	Identifier	fflush		1083119	0					
ANR	1083152	ArgumentList	stderr		1083119	1					
ANR	1083153	Argument	stderr		1083119	0					
ANR	1083154	Identifier	stderr		1083119	0					
ANR	1083155	IfStatement	if ( g_create_process_errorpipe != - 1 )		1083119	3					
ANR	1083156	Condition	g_create_process_errorpipe != - 1	6337:5:191200:191231	1083119	0	True				
ANR	1083157	EqualityExpression	g_create_process_errorpipe != - 1		1083119	0		!=			
ANR	1083158	Identifier	g_create_process_errorpipe		1083119	0					
ANR	1083159	UnaryOperationExpression	- 1		1083119	1					
ANR	1083160	UnaryOperator	-		1083119	0					
ANR	1083161	PrimaryExpression	1		1083119	1					
ANR	1083162	CompoundStatement		27:2:901:941	1083119	1					
ANR	1083163	IdentifierDeclStatement	int child_errno = DaemonCore :: ERRNO_EXIT ;	6340:2:191362:191402	1083119	0	True				
ANR	1083164	IdentifierDecl	child_errno = DaemonCore :: ERRNO_EXIT		1083119	0					
ANR	1083165	IdentifierDeclType	int		1083119	0					
ANR	1083166	Identifier	child_errno		1083119	1					
ANR	1083167	AssignmentExpression	child_errno = DaemonCore :: ERRNO_EXIT		1083119	2		=			
ANR	1083168	Identifier	DaemonCore :: ERRNO_EXIT		1083119	0					
ANR	1083169	Identifier	DaemonCore :: ERRNO_EXIT		1083119	1					
ANR	1083170	ExpressionStatement	"write ( g_create_process_errorpipe , & child_errno , sizeof ( child_errno ) )"	6341:2:191406:191474	1083119	1	True				
ANR	1083171	CallExpression	"write ( g_create_process_errorpipe , & child_errno , sizeof ( child_errno ) )"		1083119	0					
ANR	1083172	Callee	write		1083119	0					
ANR	1083173	Identifier	write		1083119	0					
ANR	1083174	ArgumentList	g_create_process_errorpipe		1083119	1					
ANR	1083175	Argument	g_create_process_errorpipe		1083119	0					
ANR	1083176	Identifier	g_create_process_errorpipe		1083119	0					
ANR	1083177	Argument	& child_errno		1083119	1					
ANR	1083178	UnaryOperationExpression	& child_errno		1083119	0					
ANR	1083179	UnaryOperator	&		1083119	0					
ANR	1083180	Identifier	child_errno		1083119	1					
ANR	1083181	Argument	sizeof ( child_errno )		1083119	2					
ANR	1083182	SizeofExpression	sizeof ( child_errno )		1083119	0					
ANR	1083183	Sizeof	sizeof		1083119	0					
ANR	1083184	SizeofOperand	child_errno		1083119	1					
ANR	1083185	IfStatement	if ( _condor_exit_with_exec == 0 )		1083119	4					
ANR	1083186	Condition	_condor_exit_with_exec == 0	6344:6:191486:191512	1083119	0	True				
ANR	1083187	EqualityExpression	_condor_exit_with_exec == 0		1083119	0		==			
ANR	1083188	Identifier	_condor_exit_with_exec		1083119	0					
ANR	1083189	PrimaryExpression	0		1083119	1					
ANR	1083190	CompoundStatement		31:36:1055:1055	1083119	1					
ANR	1083191	ExpressionStatement	_exit ( status )	6345:2:191520:191533	1083119	0	True				
ANR	1083192	CallExpression	_exit ( status )		1083119	0					
ANR	1083193	Callee	_exit		1083119	0					
ANR	1083194	Identifier	_exit		1083119	0					
ANR	1083195	ArgumentList	status		1083119	1					
ANR	1083196	Argument	status		1083119	0					
ANR	1083197	Identifier	status		1083119	0					
ANR	1083198	IdentifierDeclStatement	const char * my_argv [ 2 ] ;	6348:1:191540:191562	1083119	5	True				
ANR	1083199	IdentifierDecl	* my_argv [ 2 ]		1083119	0					
ANR	1083200	IdentifierDeclType	const char * [ 2 ]		1083119	0					
ANR	1083201	Identifier	my_argv		1083119	1					
ANR	1083202	PrimaryExpression	2		1083119	2					
ANR	1083203	IdentifierDeclStatement	const char * my_env [ 1 ] ;	6349:1:191565:191586	1083119	6	True				
ANR	1083204	IdentifierDecl	* my_env [ 1 ]		1083119	0					
ANR	1083205	IdentifierDeclType	const char * [ 1 ]		1083119	0					
ANR	1083206	Identifier	my_env		1083119	1					
ANR	1083207	PrimaryExpression	1		1083119	2					
ANR	1083208	ExpressionStatement	my_argv [ 1 ] = NULL	6350:1:191589:191606	1083119	7	True				
ANR	1083209	AssignmentExpression	my_argv [ 1 ] = NULL		1083119	0		=			
ANR	1083210	ArrayIndexing	my_argv [ 1 ]		1083119	0					
ANR	1083211	Identifier	my_argv		1083119	0					
ANR	1083212	PrimaryExpression	1		1083119	1					
ANR	1083213	Identifier	NULL		1083119	1					
ANR	1083214	ExpressionStatement	my_env [ 0 ] = NULL	6351:1:191609:191625	1083119	8	True				
ANR	1083215	AssignmentExpression	my_env [ 0 ] = NULL		1083119	0		=			
ANR	1083216	ArrayIndexing	my_env [ 0 ]		1083119	0					
ANR	1083217	Identifier	my_env		1083119	0					
ANR	1083218	PrimaryExpression	0		1083119	1					
ANR	1083219	Identifier	NULL		1083119	1					
ANR	1083220	IfStatement	if ( status == 0 )		1083119	9					
ANR	1083221	Condition	status == 0	6354:6:191686:191696	1083119	0	True				
ANR	1083222	EqualityExpression	status == 0		1083119	0		==			
ANR	1083223	Identifier	status		1083119	0					
ANR	1083224	PrimaryExpression	0		1083119	1					
ANR	1083225	CompoundStatement		41:20:1239:1239	1083119	1					
ANR	1083226	ExpressionStatement	"my_argv [ 0 ] = ""/bin/true"""	6355:2:191704:191728	1083119	0	True				
ANR	1083227	AssignmentExpression	"my_argv [ 0 ] = ""/bin/true"""		1083119	0		=			
ANR	1083228	ArrayIndexing	my_argv [ 0 ]		1083119	0					
ANR	1083229	Identifier	my_argv		1083119	0					
ANR	1083230	PrimaryExpression	0		1083119	1					
ANR	1083231	PrimaryExpression	"""/bin/true"""		1083119	1					
ANR	1083232	Statement	execve	6356:2:191732:191737	1083119	1	True				
ANR	1083233	Statement	(	6356:8:191738:191738	1083119	2	True				
ANR	1083234	Statement	"""/bin/true"""	6356:10:191740:191750	1083119	3	True				
ANR	1083235	Statement	","	6356:21:191751:191751	1083119	4	True				
ANR	1083236	Statement	const_cast	6357:4:191757:191766	1083119	5	True				
ANR	1083237	Statement	<	6357:14:191767:191767	1083119	6	True				
ANR	1083238	Statement	char	6357:15:191768:191771	1083119	7	True				
ANR	1083239	Statement	*	6357:20:191773:191773	1083119	8	True				
ANR	1083240	Statement	const	6357:21:191774:191778	1083119	9	True				
ANR	1083241	Statement	*	6357:26:191779:191779	1083119	10	True				
ANR	1083242	Statement	>	6357:27:191780:191780	1083119	11	True				
ANR	1083243	Statement	(	6357:28:191781:191781	1083119	12	True				
ANR	1083244	Statement	my_argv	6357:29:191782:191788	1083119	13	True				
ANR	1083245	Statement	)	6357:36:191789:191789	1083119	14	True				
ANR	1083246	Statement	","	6357:37:191790:191790	1083119	15	True				
ANR	1083247	Statement	const_cast	6358:4:191796:191805	1083119	16	True				
ANR	1083248	Statement	<	6358:14:191806:191806	1083119	17	True				
ANR	1083249	Statement	char	6358:15:191807:191810	1083119	18	True				
ANR	1083250	Statement	*	6358:20:191812:191812	1083119	19	True				
ANR	1083251	Statement	const	6358:21:191813:191817	1083119	20	True				
ANR	1083252	Statement	*	6358:26:191818:191818	1083119	21	True				
ANR	1083253	Statement	>	6358:27:191819:191819	1083119	22	True				
ANR	1083254	Statement	(	6358:28:191820:191820	1083119	23	True				
ANR	1083255	Statement	my_env	6358:29:191821:191826	1083119	24	True				
ANR	1083256	Statement	)	6358:35:191827:191827	1083119	25	True				
ANR	1083257	Statement	)	6358:38:191830:191830	1083119	26	True				
ANR	1083258	ExpressionStatement		6358:39:191831:191831	1083119	27	True				
ANR	1083259	ExpressionStatement	"my_argv [ 0 ] = ""/usr/bin/true"""	6359:2:191835:191863	1083119	28	True				
ANR	1083260	AssignmentExpression	"my_argv [ 0 ] = ""/usr/bin/true"""		1083119	0		=			
ANR	1083261	ArrayIndexing	my_argv [ 0 ]		1083119	0					
ANR	1083262	Identifier	my_argv		1083119	0					
ANR	1083263	PrimaryExpression	0		1083119	1					
ANR	1083264	PrimaryExpression	"""/usr/bin/true"""		1083119	1					
ANR	1083265	Statement	execve	6360:2:191867:191872	1083119	29	True				
ANR	1083266	Statement	(	6360:8:191873:191873	1083119	30	True				
ANR	1083267	Statement	"""/usr/bin/true"""	6360:10:191875:191889	1083119	31	True				
ANR	1083268	Statement	","	6360:25:191890:191890	1083119	32	True				
ANR	1083269	Statement	const_cast	6361:4:191896:191905	1083119	33	True				
ANR	1083270	Statement	<	6361:14:191906:191906	1083119	34	True				
ANR	1083271	Statement	char	6361:15:191907:191910	1083119	35	True				
ANR	1083272	Statement	*	6361:20:191912:191912	1083119	36	True				
ANR	1083273	Statement	const	6361:21:191913:191917	1083119	37	True				
ANR	1083274	Statement	*	6361:26:191918:191918	1083119	38	True				
ANR	1083275	Statement	>	6361:27:191919:191919	1083119	39	True				
ANR	1083276	Statement	(	6361:28:191920:191920	1083119	40	True				
ANR	1083277	Statement	my_argv	6361:29:191921:191927	1083119	41	True				
ANR	1083278	Statement	)	6361:36:191928:191928	1083119	42	True				
ANR	1083279	Statement	","	6361:37:191929:191929	1083119	43	True				
ANR	1083280	Statement	const_cast	6362:4:191935:191944	1083119	44	True				
ANR	1083281	Statement	<	6362:14:191945:191945	1083119	45	True				
ANR	1083282	Statement	char	6362:15:191946:191949	1083119	46	True				
ANR	1083283	Statement	*	6362:20:191951:191951	1083119	47	True				
ANR	1083284	Statement	const	6362:21:191952:191956	1083119	48	True				
ANR	1083285	Statement	*	6362:26:191957:191957	1083119	49	True				
ANR	1083286	Statement	>	6362:27:191958:191958	1083119	50	True				
ANR	1083287	Statement	(	6362:28:191959:191959	1083119	51	True				
ANR	1083288	Statement	my_env	6362:29:191960:191965	1083119	52	True				
ANR	1083289	Statement	)	6362:35:191966:191966	1083119	53	True				
ANR	1083290	Statement	)	6362:38:191969:191969	1083119	54	True				
ANR	1083291	ExpressionStatement		6362:39:191970:191970	1083119	55	True				
ANR	1083292	ElseStatement	else		1083119	0					
ANR	1083293	CompoundStatement		50:8:1519:1519	1083119	0					
ANR	1083294	ExpressionStatement	"my_argv [ 0 ] = ""/bin/false"""	6364:2:191984:192009	1083119	0	True				
ANR	1083295	AssignmentExpression	"my_argv [ 0 ] = ""/bin/false"""		1083119	0		=			
ANR	1083296	ArrayIndexing	my_argv [ 0 ]		1083119	0					
ANR	1083297	Identifier	my_argv		1083119	0					
ANR	1083298	PrimaryExpression	0		1083119	1					
ANR	1083299	PrimaryExpression	"""/bin/false"""		1083119	1					
ANR	1083300	Statement	execve	6365:2:192013:192018	1083119	1	True				
ANR	1083301	Statement	(	6365:8:192019:192019	1083119	2	True				
ANR	1083302	Statement	"""/bin/false"""	6365:10:192021:192032	1083119	3	True				
ANR	1083303	Statement	","	6365:22:192033:192033	1083119	4	True				
ANR	1083304	Statement	const_cast	6366:4:192039:192048	1083119	5	True				
ANR	1083305	Statement	<	6366:14:192049:192049	1083119	6	True				
ANR	1083306	Statement	char	6366:15:192050:192053	1083119	7	True				
ANR	1083307	Statement	*	6366:20:192055:192055	1083119	8	True				
ANR	1083308	Statement	const	6366:21:192056:192060	1083119	9	True				
ANR	1083309	Statement	*	6366:26:192061:192061	1083119	10	True				
ANR	1083310	Statement	>	6366:27:192062:192062	1083119	11	True				
ANR	1083311	Statement	(	6366:28:192063:192063	1083119	12	True				
ANR	1083312	Statement	my_argv	6366:29:192064:192070	1083119	13	True				
ANR	1083313	Statement	)	6366:36:192071:192071	1083119	14	True				
ANR	1083314	Statement	","	6366:37:192072:192072	1083119	15	True				
ANR	1083315	Statement	const_cast	6367:4:192078:192087	1083119	16	True				
ANR	1083316	Statement	<	6367:14:192088:192088	1083119	17	True				
ANR	1083317	Statement	char	6367:15:192089:192092	1083119	18	True				
ANR	1083318	Statement	*	6367:20:192094:192094	1083119	19	True				
ANR	1083319	Statement	const	6367:21:192095:192099	1083119	20	True				
ANR	1083320	Statement	*	6367:26:192100:192100	1083119	21	True				
ANR	1083321	Statement	>	6367:27:192101:192101	1083119	22	True				
ANR	1083322	Statement	(	6367:28:192102:192102	1083119	23	True				
ANR	1083323	Statement	my_env	6367:29:192103:192108	1083119	24	True				
ANR	1083324	Statement	)	6367:35:192109:192109	1083119	25	True				
ANR	1083325	Statement	)	6367:38:192112:192112	1083119	26	True				
ANR	1083326	ExpressionStatement		6367:39:192113:192113	1083119	27	True				
ANR	1083327	ExpressionStatement	"my_argv [ 0 ] = ""/usr/bin/false"""	6368:2:192117:192146	1083119	28	True				
ANR	1083328	AssignmentExpression	"my_argv [ 0 ] = ""/usr/bin/false"""		1083119	0		=			
ANR	1083329	ArrayIndexing	my_argv [ 0 ]		1083119	0					
ANR	1083330	Identifier	my_argv		1083119	0					
ANR	1083331	PrimaryExpression	0		1083119	1					
ANR	1083332	PrimaryExpression	"""/usr/bin/false"""		1083119	1					
ANR	1083333	Statement	execve	6369:2:192150:192155	1083119	29	True				
ANR	1083334	Statement	(	6369:8:192156:192156	1083119	30	True				
ANR	1083335	Statement	"""/usr/bin/false"""	6369:10:192158:192173	1083119	31	True				
ANR	1083336	Statement	","	6369:26:192174:192174	1083119	32	True				
ANR	1083337	Statement	const_cast	6370:4:192180:192189	1083119	33	True				
ANR	1083338	Statement	<	6370:14:192190:192190	1083119	34	True				
ANR	1083339	Statement	char	6370:15:192191:192194	1083119	35	True				
ANR	1083340	Statement	*	6370:20:192196:192196	1083119	36	True				
ANR	1083341	Statement	const	6370:21:192197:192201	1083119	37	True				
ANR	1083342	Statement	*	6370:26:192202:192202	1083119	38	True				
ANR	1083343	Statement	>	6370:27:192203:192203	1083119	39	True				
ANR	1083344	Statement	(	6370:28:192204:192204	1083119	40	True				
ANR	1083345	Statement	my_argv	6370:29:192205:192211	1083119	41	True				
ANR	1083346	Statement	)	6370:36:192212:192212	1083119	42	True				
ANR	1083347	Statement	","	6370:37:192213:192213	1083119	43	True				
ANR	1083348	Statement	const_cast	6371:4:192219:192228	1083119	44	True				
ANR	1083349	Statement	<	6371:14:192229:192229	1083119	45	True				
ANR	1083350	Statement	char	6371:15:192230:192233	1083119	46	True				
ANR	1083351	Statement	*	6371:20:192235:192235	1083119	47	True				
ANR	1083352	Statement	const	6371:21:192236:192240	1083119	48	True				
ANR	1083353	Statement	*	6371:26:192241:192241	1083119	49	True				
ANR	1083354	Statement	>	6371:27:192242:192242	1083119	50	True				
ANR	1083355	Statement	(	6371:28:192243:192243	1083119	51	True				
ANR	1083356	Statement	my_env	6371:29:192244:192249	1083119	52	True				
ANR	1083357	Statement	)	6371:35:192250:192250	1083119	53	True				
ANR	1083358	Statement	)	6371:38:192253:192253	1083119	54	True				
ANR	1083359	ExpressionStatement		6371:39:192254:192254	1083119	55	True				
ANR	1083360	ExpressionStatement	_condor_exit_with_exec = 0	6381:1:192509:192535	1083119	10	True				
ANR	1083361	AssignmentExpression	_condor_exit_with_exec = 0		1083119	0		=			
ANR	1083362	Identifier	_condor_exit_with_exec		1083119	0					
ANR	1083363	PrimaryExpression	0		1083119	1					
ANR	1083364	ExpressionStatement	_exit ( status ? 1 : 0 )	6382:1:192538:192559	1083119	11	True				
ANR	1083365	CallExpression	_exit ( status ? 1 : 0 )		1083119	0					
ANR	1083366	Callee	_exit		1083119	0					
ANR	1083367	Identifier	_exit		1083119	0					
ANR	1083368	ArgumentList	status ? 1 : 0		1083119	1					
ANR	1083369	Argument	status ? 1 : 0		1083119	0					
ANR	1083370	ConditionalExpression	status ? 1 : 0		1083119	0					
ANR	1083371	Condition	status		1083119	0					
ANR	1083372	Identifier	status		1083119	0					
ANR	1083373	PrimaryExpression	1		1083119	1					
ANR	1083374	PrimaryExpression	0		1083119	2					
ANR	1083375	ReturnType	void		1083119	1					
ANR	1083376	Identifier	__wrap_exit		1083119	2					
ANR	1083377	ParameterList	int status		1083119	3					
ANR	1083378	Parameter	int status	6313:17:190448:190457	1083119	0	True				
ANR	1083379	ParameterType	int		1083119	0					
ANR	1083380	Identifier	status		1083119	1					
ANR	1083381	CFGEntryNode	ENTRY		1083119		True				
ANR	1083382	CFGExitNode	EXIT		1083119		True				
ANR	1083383	Symbol	DaemonCore :: ERRNO_EXIT		1083119						
ANR	1083384	Symbol	NULL		1083119						
ANR	1083385	Symbol	stdout		1083119						
ANR	1083386	Symbol	child_errno		1083119						
ANR	1083387	Symbol	& child_errno		1083119						
ANR	1083388	Symbol	g_create_process_errorpipe		1083119						
ANR	1083389	Symbol	stderr		1083119						
ANR	1083390	Symbol	my_env		1083119						
ANR	1083391	Symbol	* my_argv		1083119						
ANR	1083392	Symbol	my_argv		1083119						
ANR	1083393	Symbol	_condor_exit_with_exec		1083119						
ANR	1083394	Symbol	* my_env		1083119						
ANR	1083395	Symbol	status		1083119						
ANR	1083396	Function	DaemonCore :: Register_Family	6397:0:193151:196577							
ANR	1083397	FunctionDef	"DaemonCore :: Register_Family (pid_t child_pid , pid_t parent_pid , int max_snapshot_interval , PidEnvID * penvid , const char * login , gid_t * group , const char * cgroup , const char * glexec_proxy)"		1083396	0					
ANR	1083398	CompoundStatement		6406:0:193545:196577	1083396	0					
ANR	1083399	IdentifierDeclStatement	double begintime = UtcTime :: getTimeDouble ( ) ;	6407:4:193551:193594	1083396	0	True				
ANR	1083400	IdentifierDecl	begintime = UtcTime :: getTimeDouble ( )		1083396	0					
ANR	1083401	IdentifierDeclType	double		1083396	0					
ANR	1083402	Identifier	begintime		1083396	1					
ANR	1083403	AssignmentExpression	begintime = UtcTime :: getTimeDouble ( )		1083396	2		=			
ANR	1083404	Identifier	begintime		1083396	0					
ANR	1083405	CallExpression	UtcTime :: getTimeDouble ( )		1083396	1					
ANR	1083406	Callee	UtcTime :: getTimeDouble		1083396	0					
ANR	1083407	Identifier	UtcTime :: getTimeDouble		1083396	0					
ANR	1083408	ArgumentList			1083396	1					
ANR	1083409	IdentifierDeclStatement	double runtime = begintime ;	6408:4:193600:193626	1083396	1	True				
ANR	1083410	IdentifierDecl	runtime = begintime		1083396	0					
ANR	1083411	IdentifierDeclType	double		1083396	0					
ANR	1083412	Identifier	runtime		1083396	1					
ANR	1083413	AssignmentExpression	runtime = begintime		1083396	2		=			
ANR	1083414	Identifier	begintime		1083396	0					
ANR	1083415	Identifier	begintime		1083396	1					
ANR	1083416	IdentifierDeclStatement	bool success = false ;	6410:1:193630:193650	1083396	2	True				
ANR	1083417	IdentifierDecl	success = false		1083396	0					
ANR	1083418	IdentifierDeclType	bool		1083396	0					
ANR	1083419	Identifier	success		1083396	1					
ANR	1083420	AssignmentExpression	success = false		1083396	2		=			
ANR	1083421	Identifier	false		1083396	0					
ANR	1083422	Identifier	false		1083396	1					
ANR	1083423	IdentifierDeclStatement	bool family_registered = false ;	6411:1:193653:193683	1083396	3	True				
ANR	1083424	IdentifierDecl	family_registered = false		1083396	0					
ANR	1083425	IdentifierDeclType	bool		1083396	0					
ANR	1083426	Identifier	family_registered		1083396	1					
ANR	1083427	AssignmentExpression	family_registered = false		1083396	2		=			
ANR	1083428	Identifier	false		1083396	0					
ANR	1083429	Identifier	false		1083396	1					
ANR	1083430	IfStatement	"if ( ! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval ) )"		1083396	4					
ANR	1083431	Condition	"! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"	6412:5:193690:193849	1083396	0	True				
ANR	1083432	UnaryOperationExpression	"! m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"		1083396	0					
ANR	1083433	UnaryOperator	!		1083396	0					
ANR	1083434	CallExpression	"m_proc_family -> register_subfamily ( child_pid , parent_pid , max_snapshot_interval )"		1083396	1					
ANR	1083435	Callee	m_proc_family -> register_subfamily		1083396	0					
ANR	1083436	PtrMemberAccess	m_proc_family -> register_subfamily		1083396	0					
ANR	1083437	Identifier	m_proc_family		1083396	0					
ANR	1083438	Identifier	register_subfamily		1083396	1					
ANR	1083439	ArgumentList	child_pid		1083396	1					
ANR	1083440	Argument	child_pid		1083396	0					
ANR	1083441	Identifier	child_pid		1083396	0					
ANR	1083442	Argument	parent_pid		1083396	1					
ANR	1083443	Identifier	parent_pid		1083396	0					
ANR	1083444	Argument	max_snapshot_interval		1083396	2					
ANR	1083445	Identifier	max_snapshot_interval		1083396	0					
ANR	1083446	CompoundStatement		10:1:307:307	1083396	1					
ANR	1083447	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: error registering family for pid %u\\n"" , child_pid )"	6416:2:193857:193962	1083396	0	True				
ANR	1083448	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: error registering family for pid %u\\n"" , child_pid )"		1083396	0					
ANR	1083449	Callee	dprintf		1083396	0					
ANR	1083450	Identifier	dprintf		1083396	0					
ANR	1083451	ArgumentList	D_ALWAYS		1083396	1					
ANR	1083452	Argument	D_ALWAYS		1083396	0					
ANR	1083453	Identifier	D_ALWAYS		1083396	0					
ANR	1083454	Argument	"""Create_Process: error registering family for pid %u\\n"""		1083396	1					
ANR	1083455	PrimaryExpression	"""Create_Process: error registering family for pid %u\\n"""		1083396	0					
ANR	1083456	Argument	child_pid		1083396	2					
ANR	1083457	Identifier	child_pid		1083396	0					
ANR	1083458	GotoStatement	goto REGISTER_FAMILY_DONE ;	6419:2:193966:193991	1083396	1	True				
ANR	1083459	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083460	ExpressionStatement	family_registered = true	6421:1:193997:194021	1083396	5	True				
ANR	1083461	AssignmentExpression	family_registered = true		1083396	0		=			
ANR	1083462	Identifier	family_registered		1083396	0					
ANR	1083463	Identifier	true		1083396	1					
ANR	1083464	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"	6422:4:194027:194111	1083396	6	True				
ANR	1083465	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"		1083396	0		=			
ANR	1083466	Identifier	runtime		1083396	0					
ANR	1083467	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRregister_subfamily"" , IF_VERBOSEPUB , runtime )"		1083396	1					
ANR	1083468	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083469	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083470	Identifier	dc_stats		1083396	0					
ANR	1083471	Identifier	AddRuntimeSample		1083396	1					
ANR	1083472	ArgumentList	"""DCRregister_subfamily"""		1083396	1					
ANR	1083473	Argument	"""DCRregister_subfamily"""		1083396	0					
ANR	1083474	PrimaryExpression	"""DCRregister_subfamily"""		1083396	0					
ANR	1083475	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083476	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083477	Argument	runtime		1083396	2					
ANR	1083478	Identifier	runtime		1083396	0					
ANR	1083479	IfStatement	if ( penvid != NULL )		1083396	7					
ANR	1083480	Condition	penvid != NULL	6423:5:194118:194131	1083396	0	True				
ANR	1083481	EqualityExpression	penvid != NULL		1083396	0		!=			
ANR	1083482	Identifier	penvid		1083396	0					
ANR	1083483	Identifier	NULL		1083396	1					
ANR	1083484	CompoundStatement		18:21:588:588	1083396	1					
ANR	1083485	IfStatement	"if ( ! m_proc_family -> track_family_via_environment ( child_pid , * penvid ) )"		1083396	0					
ANR	1083486	Condition	"! m_proc_family -> track_family_via_environment ( child_pid , * penvid )"	6424:6:194142:194205	1083396	0	True				
ANR	1083487	UnaryOperationExpression	"! m_proc_family -> track_family_via_environment ( child_pid , * penvid )"		1083396	0					
ANR	1083488	UnaryOperator	!		1083396	0					
ANR	1083489	CallExpression	"m_proc_family -> track_family_via_environment ( child_pid , * penvid )"		1083396	1					
ANR	1083490	Callee	m_proc_family -> track_family_via_environment		1083396	0					
ANR	1083491	PtrMemberAccess	m_proc_family -> track_family_via_environment		1083396	0					
ANR	1083492	Identifier	m_proc_family		1083396	0					
ANR	1083493	Identifier	track_family_via_environment		1083396	1					
ANR	1083494	ArgumentList	child_pid		1083396	1					
ANR	1083495	Argument	child_pid		1083396	0					
ANR	1083496	Identifier	child_pid		1083396	0					
ANR	1083497	Argument	* penvid		1083396	1					
ANR	1083498	UnaryOperationExpression	* penvid		1083396	0					
ANR	1083499	UnaryOperator	*		1083396	0					
ANR	1083500	Identifier	penvid		1083396	1					
ANR	1083501	CompoundStatement		19:72:662:662	1083396	1					
ANR	1083502	Statement	dprintf	6425:3:194213:194219	1083396	0	True				
ANR	1083503	Statement	(	6425:10:194220:194220	1083396	1	True				
ANR	1083504	Statement	D_ALWAYS	6425:11:194221:194228	1083396	2	True				
ANR	1083505	Statement	","	6425:19:194229:194229	1083396	3	True				
ANR	1083506	Statement	"""Create_Process: error tracking family """	6426:11:194242:194281	1083396	4	True				
ANR	1083507	Statement	"""with root %u via environment\\n"""	6427:15:194298:194329	1083396	5	True				
ANR	1083508	Statement	","	6427:47:194330:194330	1083396	6	True				
ANR	1083509	Statement	child_pid	6428:5:194337:194345	1083396	7	True				
ANR	1083510	Statement	)	6428:14:194346:194346	1083396	8	True				
ANR	1083511	ExpressionStatement		6428:15:194347:194347	1083396	9	True				
ANR	1083512	GotoStatement	goto REGISTER_FAMILY_DONE ;	6429:3:194352:194377	1083396	10	True				
ANR	1083513	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083514	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"	6431:7:194390:194476	1083396	1	True				
ANR	1083515	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"		1083396	0		=			
ANR	1083516	Identifier	runtime		1083396	0					
ANR	1083517	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_env"" , IF_VERBOSEPUB , runtime )"		1083396	1					
ANR	1083518	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083519	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083520	Identifier	dc_stats		1083396	0					
ANR	1083521	Identifier	AddRuntimeSample		1083396	1					
ANR	1083522	ArgumentList	"""DCRtrack_family_via_env"""		1083396	1					
ANR	1083523	Argument	"""DCRtrack_family_via_env"""		1083396	0					
ANR	1083524	PrimaryExpression	"""DCRtrack_family_via_env"""		1083396	0					
ANR	1083525	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083526	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083527	Argument	runtime		1083396	2					
ANR	1083528	Identifier	runtime		1083396	0					
ANR	1083529	IfStatement	if ( login != NULL )		1083396	8					
ANR	1083530	Condition	login != NULL	6433:5:194486:194498	1083396	0	True				
ANR	1083531	EqualityExpression	login != NULL		1083396	0		!=			
ANR	1083532	Identifier	login		1083396	0					
ANR	1083533	Identifier	NULL		1083396	1					
ANR	1083534	CompoundStatement		28:20:955:955	1083396	1					
ANR	1083535	IfStatement	"if ( ! m_proc_family -> track_family_via_login ( child_pid , login ) )"		1083396	0					
ANR	1083536	Condition	"! m_proc_family -> track_family_via_login ( child_pid , login )"	6434:6:194509:194564	1083396	0	True				
ANR	1083537	UnaryOperationExpression	"! m_proc_family -> track_family_via_login ( child_pid , login )"		1083396	0					
ANR	1083538	UnaryOperator	!		1083396	0					
ANR	1083539	CallExpression	"m_proc_family -> track_family_via_login ( child_pid , login )"		1083396	1					
ANR	1083540	Callee	m_proc_family -> track_family_via_login		1083396	0					
ANR	1083541	PtrMemberAccess	m_proc_family -> track_family_via_login		1083396	0					
ANR	1083542	Identifier	m_proc_family		1083396	0					
ANR	1083543	Identifier	track_family_via_login		1083396	1					
ANR	1083544	ArgumentList	child_pid		1083396	1					
ANR	1083545	Argument	child_pid		1083396	0					
ANR	1083546	Identifier	child_pid		1083396	0					
ANR	1083547	Argument	login		1083396	1					
ANR	1083548	Identifier	login		1083396	0					
ANR	1083549	CompoundStatement		29:64:1021:1021	1083396	1					
ANR	1083550	Statement	dprintf	6435:3:194572:194578	1083396	0	True				
ANR	1083551	Statement	(	6435:10:194579:194579	1083396	1	True				
ANR	1083552	Statement	D_ALWAYS	6435:11:194580:194587	1083396	2	True				
ANR	1083553	Statement	","	6435:19:194588:194588	1083396	3	True				
ANR	1083554	Statement	"""Create_Process: error tracking family """	6436:11:194601:194640	1083396	4	True				
ANR	1083555	Statement	"""with root %u via login (name: %s)\\n"""	6437:15:194657:194693	1083396	5	True				
ANR	1083556	Statement	","	6437:52:194694:194694	1083396	6	True				
ANR	1083557	Statement	child_pid	6438:11:194707:194715	1083396	7	True				
ANR	1083558	Statement	","	6438:20:194716:194716	1083396	8	True				
ANR	1083559	Statement	login	6439:11:194729:194733	1083396	9	True				
ANR	1083560	Statement	)	6439:16:194734:194734	1083396	10	True				
ANR	1083561	ExpressionStatement		6439:17:194735:194735	1083396	11	True				
ANR	1083562	GotoStatement	goto REGISTER_FAMILY_DONE ;	6440:3:194740:194765	1083396	12	True				
ANR	1083563	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083564	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"	6442:7:194778:194866	1083396	1	True				
ANR	1083565	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"		1083396	0		=			
ANR	1083566	Identifier	runtime		1083396	0					
ANR	1083567	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRtrack_family_via_login"" , IF_VERBOSEPUB , runtime )"		1083396	1					
ANR	1083568	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083569	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083570	Identifier	dc_stats		1083396	0					
ANR	1083571	Identifier	AddRuntimeSample		1083396	1					
ANR	1083572	ArgumentList	"""DCRtrack_family_via_login"""		1083396	1					
ANR	1083573	Argument	"""DCRtrack_family_via_login"""		1083396	0					
ANR	1083574	PrimaryExpression	"""DCRtrack_family_via_login"""		1083396	0					
ANR	1083575	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083576	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083577	Argument	runtime		1083396	2					
ANR	1083578	Identifier	runtime		1083396	0					
ANR	1083579	IfStatement	if ( group != NULL )		1083396	9					
ANR	1083580	Condition	group != NULL	6444:5:194876:194888	1083396	0	True				
ANR	1083581	EqualityExpression	group != NULL		1083396	0		!=			
ANR	1083582	Identifier	group		1083396	0					
ANR	1083583	Identifier	NULL		1083396	1					
ANR	1083584	CompoundStatement		39:20:1345:1345	1083396	1					
ANR	1083585	IfStatement	"if ( ! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group ) )"		1083396	0					
ANR	1083586	Condition	"! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"	6446:6:194918:195002	1083396	0	True				
ANR	1083587	UnaryOperationExpression	"! m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"		1083396	0					
ANR	1083588	UnaryOperator	!		1083396	0					
ANR	1083589	CallExpression	"m_proc_family -> track_family_via_allocated_supplementary_group ( child_pid , * group )"		1083396	1					
ANR	1083590	Callee	m_proc_family -> track_family_via_allocated_supplementary_group		1083396	0					
ANR	1083591	PtrMemberAccess	m_proc_family -> track_family_via_allocated_supplementary_group		1083396	0					
ANR	1083592	Identifier	m_proc_family		1083396	0					
ANR	1083593	Identifier	track_family_via_allocated_supplementary_group		1083396	1					
ANR	1083594	ArgumentList	child_pid		1083396	1					
ANR	1083595	Argument	child_pid		1083396	0					
ANR	1083596	Identifier	child_pid		1083396	0					
ANR	1083597	Argument	* group		1083396	1					
ANR	1083598	UnaryOperationExpression	* group		1083396	0					
ANR	1083599	UnaryOperator	*		1083396	0					
ANR	1083600	Identifier	group		1083396	1					
ANR	1083601	CompoundStatement		43:2:1461:1461	1083396	1					
ANR	1083602	Statement	dprintf	6449:3:195012:195018	1083396	0	True				
ANR	1083603	Statement	(	6449:10:195019:195019	1083396	1	True				
ANR	1083604	Statement	D_ALWAYS	6449:11:195020:195027	1083396	2	True				
ANR	1083605	Statement	","	6449:19:195028:195028	1083396	3	True				
ANR	1083606	Statement	"""Create_Process: error tracking family """	6450:11:195041:195080	1083396	4	True				
ANR	1083607	Statement	"""with root %u via group ID\\n"""	6451:15:195097:195125	1083396	5	True				
ANR	1083608	Statement	","	6451:44:195126:195126	1083396	6	True				
ANR	1083609	Statement	child_pid	6452:11:195139:195147	1083396	7	True				
ANR	1083610	Statement	)	6452:20:195148:195148	1083396	8	True				
ANR	1083611	ExpressionStatement		6452:21:195149:195149	1083396	9	True				
ANR	1083612	GotoStatement	goto REGISTER_FAMILY_DONE ;	6453:3:195154:195179	1083396	10	True				
ANR	1083613	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083614	IfStatement	if ( cgroup != NULL )		1083396	10					
ANR	1083615	Condition	cgroup != NULL	6460:5:195301:195314	1083396	0	True				
ANR	1083616	EqualityExpression	cgroup != NULL		1083396	0		!=			
ANR	1083617	Identifier	cgroup		1083396	0					
ANR	1083618	Identifier	NULL		1083396	1					
ANR	1083619	CompoundStatement		55:21:1771:1771	1083396	1					
ANR	1083620	IfStatement	"if ( ! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup ) )"		1083396	0					
ANR	1083621	Condition	"! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"	6462:6:195357:195414	1083396	0	True				
ANR	1083622	UnaryOperationExpression	"! m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"		1083396	0					
ANR	1083623	UnaryOperator	!		1083396	0					
ANR	1083624	CallExpression	"m_proc_family -> track_family_via_cgroup ( child_pid , cgroup )"		1083396	1					
ANR	1083625	Callee	m_proc_family -> track_family_via_cgroup		1083396	0					
ANR	1083626	PtrMemberAccess	m_proc_family -> track_family_via_cgroup		1083396	0					
ANR	1083627	Identifier	m_proc_family		1083396	0					
ANR	1083628	Identifier	track_family_via_cgroup		1083396	1					
ANR	1083629	ArgumentList	child_pid		1083396	1					
ANR	1083630	Argument	child_pid		1083396	0					
ANR	1083631	Identifier	child_pid		1083396	0					
ANR	1083632	Argument	cgroup		1083396	1					
ANR	1083633	Identifier	cgroup		1083396	0					
ANR	1083634	CompoundStatement		58:2:1873:1873	1083396	1					
ANR	1083635	Statement	dprintf	6464:3:195424:195430	1083396	0	True				
ANR	1083636	Statement	(	6464:10:195431:195431	1083396	1	True				
ANR	1083637	Statement	D_ALWAYS	6464:11:195432:195439	1083396	2	True				
ANR	1083638	Statement	","	6464:19:195440:195440	1083396	3	True				
ANR	1083639	Statement	"""Create_Process: error tracking family """	6465:4:195446:195485	1083396	4	True				
ANR	1083640	Statement	"""with root %u via cgroup %s\\n"""	6466:8:195495:195524	1083396	5	True				
ANR	1083641	Statement	","	6466:38:195525:195525	1083396	6	True				
ANR	1083642	Statement	child_pid	6467:4:195531:195539	1083396	7	True				
ANR	1083643	Statement	","	6467:13:195540:195540	1083396	8	True				
ANR	1083644	Statement	cgroup	6467:15:195542:195547	1083396	9	True				
ANR	1083645	Statement	)	6467:21:195548:195548	1083396	10	True				
ANR	1083646	ExpressionStatement		6467:22:195549:195549	1083396	11	True				
ANR	1083647	GotoStatement	goto REGISTER_FAMILY_DONE ;	6468:3:195554:195579	1083396	12	True				
ANR	1083648	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083649	IfStatement	if ( glexec_proxy != NULL )		1083396	11					
ANR	1083650	Condition	glexec_proxy != NULL	6475:5:195700:195719	1083396	0	True				
ANR	1083651	EqualityExpression	glexec_proxy != NULL		1083396	0		!=			
ANR	1083652	Identifier	glexec_proxy		1083396	0					
ANR	1083653	Identifier	NULL		1083396	1					
ANR	1083654	CompoundStatement		70:27:2176:2176	1083396	1					
ANR	1083655	IfStatement	"if ( ! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy ) )"		1083396	0					
ANR	1083656	Condition	"! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"	6476:6:195730:195835	1083396	0	True				
ANR	1083657	UnaryOperationExpression	"! m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"		1083396	0					
ANR	1083658	UnaryOperator	!		1083396	0					
ANR	1083659	CallExpression	"m_proc_family -> use_glexec_for_family ( child_pid , glexec_proxy )"		1083396	1					
ANR	1083660	Callee	m_proc_family -> use_glexec_for_family		1083396	0					
ANR	1083661	PtrMemberAccess	m_proc_family -> use_glexec_for_family		1083396	0					
ANR	1083662	Identifier	m_proc_family		1083396	0					
ANR	1083663	Identifier	use_glexec_for_family		1083396	1					
ANR	1083664	ArgumentList	child_pid		1083396	1					
ANR	1083665	Argument	child_pid		1083396	0					
ANR	1083666	Identifier	child_pid		1083396	0					
ANR	1083667	Argument	glexec_proxy		1083396	1					
ANR	1083668	Identifier	glexec_proxy		1083396	0					
ANR	1083669	CompoundStatement		73:2:2294:2294	1083396	1					
ANR	1083670	Statement	dprintf	6479:3:195845:195851	1083396	0	True				
ANR	1083671	Statement	(	6479:10:195852:195852	1083396	1	True				
ANR	1083672	Statement	D_ALWAYS	6479:11:195853:195860	1083396	2	True				
ANR	1083673	Statement	","	6479:19:195861:195861	1083396	3	True				
ANR	1083674	Statement	"""Create_Process: error using GLExec for """	6480:11:195874:195914	1083396	4	True				
ANR	1083675	Statement	"""family with root %u\\n"""	6481:8:195924:195946	1083396	5	True				
ANR	1083676	Statement	","	6481:31:195947:195947	1083396	6	True				
ANR	1083677	Statement	child_pid	6482:11:195960:195968	1083396	7	True				
ANR	1083678	Statement	)	6482:20:195969:195969	1083396	8	True				
ANR	1083679	ExpressionStatement		6482:21:195970:195970	1083396	9	True				
ANR	1083680	GotoStatement	goto REGISTER_FAMILY_DONE ;	6483:3:195975:196000	1083396	10	True				
ANR	1083681	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083682	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"	6485:7:196013:196100	1083396	1	True				
ANR	1083683	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"		1083396	0		=			
ANR	1083684	Identifier	runtime		1083396	0					
ANR	1083685	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRuse_glexec_for_family"" , IF_VERBOSEPUB , runtime )"		1083396	1					
ANR	1083686	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083687	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083688	Identifier	dc_stats		1083396	0					
ANR	1083689	Identifier	AddRuntimeSample		1083396	1					
ANR	1083690	ArgumentList	"""DCRuse_glexec_for_family"""		1083396	1					
ANR	1083691	Argument	"""DCRuse_glexec_for_family"""		1083396	0					
ANR	1083692	PrimaryExpression	"""DCRuse_glexec_for_family"""		1083396	0					
ANR	1083693	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083694	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083695	Argument	runtime		1083396	2					
ANR	1083696	Identifier	runtime		1083396	0					
ANR	1083697	ExpressionStatement	success = true	6487:1:196106:196120	1083396	12	True				
ANR	1083698	AssignmentExpression	success = true		1083396	0		=			
ANR	1083699	Identifier	success		1083396	0					
ANR	1083700	Identifier	true		1083396	1					
ANR	1083701	Label	REGISTER_FAMILY_DONE :	6488:0:196122:196142	1083396	13	True				
ANR	1083702	Identifier	REGISTER_FAMILY_DONE		1083396	0					
ANR	1083703	IfStatement	if ( family_registered && ! success )		1083396	14					
ANR	1083704	Condition	family_registered && ! success	6489:5:196149:196177	1083396	0	True				
ANR	1083705	AndExpression	family_registered && ! success		1083396	0		&&			
ANR	1083706	Identifier	family_registered		1083396	0					
ANR	1083707	UnaryOperationExpression	! success		1083396	1					
ANR	1083708	UnaryOperator	!		1083396	0					
ANR	1083709	Identifier	success		1083396	1					
ANR	1083710	CompoundStatement		84:36:2634:2634	1083396	1					
ANR	1083711	IfStatement	if ( ! m_proc_family -> unregister_family ( child_pid ) )		1083396	0					
ANR	1083712	Condition	! m_proc_family -> unregister_family ( child_pid )	6490:6:196188:196231	1083396	0	True				
ANR	1083713	UnaryOperationExpression	! m_proc_family -> unregister_family ( child_pid )		1083396	0					
ANR	1083714	UnaryOperator	!		1083396	0					
ANR	1083715	CallExpression	m_proc_family -> unregister_family ( child_pid )		1083396	1					
ANR	1083716	Callee	m_proc_family -> unregister_family		1083396	0					
ANR	1083717	PtrMemberAccess	m_proc_family -> unregister_family		1083396	0					
ANR	1083718	Identifier	m_proc_family		1083396	0					
ANR	1083719	Identifier	unregister_family		1083396	1					
ANR	1083720	ArgumentList	child_pid		1083396	1					
ANR	1083721	Argument	child_pid		1083396	0					
ANR	1083722	Identifier	child_pid		1083396	0					
ANR	1083723	CompoundStatement		85:52:2688:2688	1083396	1					
ANR	1083724	Statement	dprintf	6491:3:196239:196245	1083396	0	True				
ANR	1083725	Statement	(	6491:10:196246:196246	1083396	1	True				
ANR	1083726	Statement	D_ALWAYS	6491:11:196247:196254	1083396	2	True				
ANR	1083727	Statement	","	6491:19:196255:196255	1083396	3	True				
ANR	1083728	Statement	"""Create_Process: error unregistering family """	6492:11:196268:196312	1083396	4	True				
ANR	1083729	Statement	"""with root %u\\n"""	6493:15:196329:196344	1083396	5	True				
ANR	1083730	Statement	","	6493:31:196345:196345	1083396	6	True				
ANR	1083731	Statement	child_pid	6494:11:196358:196366	1083396	7	True				
ANR	1083732	Statement	)	6494:20:196367:196367	1083396	8	True				
ANR	1083733	ExpressionStatement		6494:21:196368:196368	1083396	9	True				
ANR	1083734	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"	6496:8:196382:196465	1083396	1	True				
ANR	1083735	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"		1083396	0		=			
ANR	1083736	Identifier	runtime		1083396	0					
ANR	1083737	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRunregister_family"" , IF_VERBOSEPUB , runtime )"		1083396	1					
ANR	1083738	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083739	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083740	Identifier	dc_stats		1083396	0					
ANR	1083741	Identifier	AddRuntimeSample		1083396	1					
ANR	1083742	ArgumentList	"""DCRunregister_family"""		1083396	1					
ANR	1083743	Argument	"""DCRunregister_family"""		1083396	0					
ANR	1083744	PrimaryExpression	"""DCRunregister_family"""		1083396	0					
ANR	1083745	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083746	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083747	Argument	runtime		1083396	2					
ANR	1083748	Identifier	runtime		1083396	0					
ANR	1083749	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"	6499:4:196475:196557	1083396	15	True				
ANR	1083750	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"		1083396	0		=			
ANR	1083751	Identifier	runtime		1083396	0					
ANR	1083752	CallExpression	"dc_stats . AddRuntimeSample ( ""DCRegister_Family"" , IF_VERBOSEPUB , begintime )"		1083396	1					
ANR	1083753	Callee	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083754	MemberAccess	dc_stats . AddRuntimeSample		1083396	0					
ANR	1083755	Identifier	dc_stats		1083396	0					
ANR	1083756	Identifier	AddRuntimeSample		1083396	1					
ANR	1083757	ArgumentList	"""DCRegister_Family"""		1083396	1					
ANR	1083758	Argument	"""DCRegister_Family"""		1083396	0					
ANR	1083759	PrimaryExpression	"""DCRegister_Family"""		1083396	0					
ANR	1083760	Argument	IF_VERBOSEPUB		1083396	1					
ANR	1083761	Identifier	IF_VERBOSEPUB		1083396	0					
ANR	1083762	Argument	begintime		1083396	2					
ANR	1083763	Identifier	begintime		1083396	0					
ANR	1083764	ReturnStatement	return success ;	6501:1:196561:196575	1083396	16	True				
ANR	1083765	Identifier	success		1083396	0					
ANR	1083766	ReturnType	bool		1083396	1					
ANR	1083767	Identifier	DaemonCore :: Register_Family		1083396	2					
ANR	1083768	ParameterList	"pid_t child_pid , pid_t parent_pid , int max_snapshot_interval , PidEnvID * penvid , const char * login , gid_t * group , const char * cgroup , const char * glexec_proxy"		1083396	3					
ANR	1083769	Parameter	pid_t child_pid	6398:28:193184:193204	1083396	0	True				
ANR	1083770	ParameterType	pid_t		1083396	0					
ANR	1083771	Identifier	child_pid		1083396	1					
ANR	1083772	Parameter	pid_t parent_pid	6399:28:193235:193256	1083396	1	True				
ANR	1083773	ParameterType	pid_t		1083396	0					
ANR	1083774	Identifier	parent_pid		1083396	1					
ANR	1083775	Parameter	int max_snapshot_interval	6400:28:193287:193319	1083396	2	True				
ANR	1083776	ParameterType	int		1083396	0					
ANR	1083777	Identifier	max_snapshot_interval		1083396	1					
ANR	1083778	Parameter	PidEnvID * penvid	6401:28:193350:193367	1083396	3	True				
ANR	1083779	ParameterType	PidEnvID *		1083396	0					
ANR	1083780	Identifier	penvid		1083396	1					
ANR	1083781	Parameter	const char * login	6402:28:193398:193414	1083396	4	True				
ANR	1083782	ParameterType	const char *		1083396	0					
ANR	1083783	Identifier	login		1083396	1					
ANR	1083784	Parameter	gid_t * group	6403:28:193445:193461	1083396	5	True				
ANR	1083785	ParameterType	gid_t *		1083396	0					
ANR	1083786	Identifier	group		1083396	1					
ANR	1083787	Parameter	const char * cgroup	6404:7:193471:193488	1083396	6	True				
ANR	1083788	ParameterType	const char *		1083396	0					
ANR	1083789	Identifier	cgroup		1083396	1					
ANR	1083790	Parameter	const char * glexec_proxy	6405:28:193519:193542	1083396	7	True				
ANR	1083791	ParameterType	const char *		1083396	0					
ANR	1083792	Identifier	glexec_proxy		1083396	1					
ANR	1083793	CFGEntryNode	ENTRY		1083396		True				
ANR	1083794	CFGExitNode	EXIT		1083396		True				
ANR	1083795	Symbol	m_proc_family -> use_glexec_for_family		1083396						
ANR	1083796	Symbol	m_proc_family -> register_subfamily		1083396						
ANR	1083797	Symbol	family_registered		1083396						
ANR	1083798	Symbol	* group		1083396						
ANR	1083799	Symbol	login		1083396						
ANR	1083800	Symbol	m_proc_family -> track_family_via_cgroup		1083396						
ANR	1083801	Symbol	m_proc_family -> track_family_via_allocated_supplementary_group		1083396						
ANR	1083802	Symbol	* penvid		1083396						
ANR	1083803	Symbol	m_proc_family -> unregister_family		1083396						
ANR	1083804	Symbol	parent_pid		1083396						
ANR	1083805	Symbol	m_proc_family		1083396						
ANR	1083806	Symbol	group		1083396						
ANR	1083807	Symbol	* m_proc_family		1083396						
ANR	1083808	Symbol	UtcTime :: getTimeDouble		1083396						
ANR	1083809	Symbol	m_proc_family -> track_family_via_environment		1083396						
ANR	1083810	Symbol	NULL		1083396						
ANR	1083811	Symbol	m_proc_family -> track_family_via_login		1083396						
ANR	1083812	Symbol	false		1083396						
ANR	1083813	Symbol	D_ALWAYS		1083396						
ANR	1083814	Symbol	runtime		1083396						
ANR	1083815	Symbol	begintime		1083396						
ANR	1083816	Symbol	cgroup		1083396						
ANR	1083817	Symbol	child_pid		1083396						
ANR	1083818	Symbol	dc_stats . AddRuntimeSample		1083396						
ANR	1083819	Symbol	max_snapshot_interval		1083396						
ANR	1083820	Symbol	IF_VERBOSEPUB		1083396						
ANR	1083821	Symbol	success		1083396						
ANR	1083822	Symbol	true		1083396						
ANR	1083823	Symbol	penvid		1083396						
ANR	1083824	Symbol	dc_stats		1083396						
ANR	1083825	Symbol	glexec_proxy		1083396						
ANR	1083826	ClassDef	CreateProcessForkit	6512:0:196912:199880							
ANR	1083827	Function	CreateProcessForkit	6514:1:196949:198341							
ANR	1083828	FunctionDef	"CreateProcessForkit (const int ( & the_errorpipe ) [ 2 ] , const ArgList & the_args , int the_job_opt_mask , const Env * the_env , const MyString & the_inheritbuf , const MyString & the_privateinheritbuf , pid_t the_forker_pid , time_t the_time_of_fork , unsigned int the_mii , const FamilyInfo * the_family_info , const char * the_cwd , const char * the_executable , const char * the_executable_fullpath , const int * the_std , int the_numInheritFds , const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ] , int the_nice_inc , const priv_state & the_priv , int the_want_command_port , const sigset_t * the_sigmask , size_t * core_hard_limit , int * affinity_mask)"		1083827	0					
ANR	1083829	CompoundStatement		6552:1:198338:198341	1083827	0					
ANR	1083830	Identifier	CreateProcessForkit		1083827	1					
ANR	1083831	ParameterList	"const int ( & the_errorpipe ) [ 2 ] , const ArgList & the_args , int the_job_opt_mask , const Env * the_env , const MyString & the_inheritbuf , const MyString & the_privateinheritbuf , pid_t the_forker_pid , time_t the_time_of_fork , unsigned int the_mii , const FamilyInfo * the_family_info , const char * the_cwd , const char * the_executable , const char * the_executable_fullpath , const int * the_std , int the_numInheritFds , const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ] , int the_nice_inc , const priv_state & the_priv , int the_want_command_port , const sigset_t * the_sigmask , size_t * core_hard_limit , int * affinity_mask"		1083827	2					
ANR	1083832	Parameter	const int ( & the_errorpipe ) [ 2 ]	6515:2:196972:197000	1083827	0	True				
ANR	1083833	ParameterType	([ 2 ] const int) &		1083827	0					
ANR	1083834	Identifier	the_errorpipe		1083827	1					
ANR	1083835	Parameter	const ArgList & the_args	6516:2:197005:197027	1083827	1	True				
ANR	1083836	ParameterType	const ArgList &		1083827	0					
ANR	1083837	Identifier	the_args		1083827	1					
ANR	1083838	Parameter	int the_job_opt_mask	6517:2:197032:197051	1083827	2	True				
ANR	1083839	ParameterType	int		1083827	0					
ANR	1083840	Identifier	the_job_opt_mask		1083827	1					
ANR	1083841	Parameter	const Env * the_env	6518:2:197056:197073	1083827	3	True				
ANR	1083842	ParameterType	const Env *		1083827	0					
ANR	1083843	Identifier	the_env		1083827	1					
ANR	1083844	Parameter	const MyString & the_inheritbuf	6519:2:197078:197107	1083827	4	True				
ANR	1083845	ParameterType	const MyString &		1083827	0					
ANR	1083846	Identifier	the_inheritbuf		1083827	1					
ANR	1083847	Parameter	const MyString & the_privateinheritbuf	6520:2:197112:197148	1083827	5	True				
ANR	1083848	ParameterType	const MyString &		1083827	0					
ANR	1083849	Identifier	the_privateinheritbuf		1083827	1					
ANR	1083850	Parameter	pid_t the_forker_pid	6521:2:197153:197172	1083827	6	True				
ANR	1083851	ParameterType	pid_t		1083827	0					
ANR	1083852	Identifier	the_forker_pid		1083827	1					
ANR	1083853	Parameter	time_t the_time_of_fork	6522:2:197177:197199	1083827	7	True				
ANR	1083854	ParameterType	time_t		1083827	0					
ANR	1083855	Identifier	the_time_of_fork		1083827	1					
ANR	1083856	Parameter	unsigned int the_mii	6523:2:197204:197223	1083827	8	True				
ANR	1083857	ParameterType	unsigned int		1083827	0					
ANR	1083858	Identifier	the_mii		1083827	1					
ANR	1083859	Parameter	const FamilyInfo * the_family_info	6524:2:197228:197260	1083827	9	True				
ANR	1083860	ParameterType	const FamilyInfo *		1083827	0					
ANR	1083861	Identifier	the_family_info		1083827	1					
ANR	1083862	Parameter	const char * the_cwd	6525:2:197265:197283	1083827	10	True				
ANR	1083863	ParameterType	const char *		1083827	0					
ANR	1083864	Identifier	the_cwd		1083827	1					
ANR	1083865	Parameter	const char * the_executable	6526:2:197288:197313	1083827	11	True				
ANR	1083866	ParameterType	const char *		1083827	0					
ANR	1083867	Identifier	the_executable		1083827	1					
ANR	1083868	Parameter	const char * the_executable_fullpath	6527:2:197318:197352	1083827	12	True				
ANR	1083869	ParameterType	const char *		1083827	0					
ANR	1083870	Identifier	the_executable_fullpath		1083827	1					
ANR	1083871	Parameter	const int * the_std	6528:2:197357:197374	1083827	13	True				
ANR	1083872	ParameterType	const int *		1083827	0					
ANR	1083873	Identifier	the_std		1083827	1					
ANR	1083874	Parameter	int the_numInheritFds	6529:2:197379:197399	1083827	14	True				
ANR	1083875	ParameterType	int		1083827	0					
ANR	1083876	Identifier	the_numInheritFds		1083827	1					
ANR	1083877	Parameter	const int ( & the_inheritFds ) [ MAX_INHERIT_FDS ]	6530:2:197404:197447	1083827	15	True				
ANR	1083878	ParameterType	([ MAX_INHERIT_FDS ] const int) &		1083827	0					
ANR	1083879	Identifier	the_inheritFds		1083827	1					
ANR	1083880	Parameter	int the_nice_inc	6531:2:197452:197467	1083827	16	True				
ANR	1083881	ParameterType	int		1083827	0					
ANR	1083882	Identifier	the_nice_inc		1083827	1					
ANR	1083883	Parameter	const priv_state & the_priv	6532:2:197472:197497	1083827	17	True				
ANR	1083884	ParameterType	const priv_state &		1083827	0					
ANR	1083885	Identifier	the_priv		1083827	1					
ANR	1083886	Parameter	int the_want_command_port	6533:2:197502:197526	1083827	18	True				
ANR	1083887	ParameterType	int		1083827	0					
ANR	1083888	Identifier	the_want_command_port		1083827	1					
ANR	1083889	Parameter	const sigset_t * the_sigmask	6534:2:197531:197557	1083827	19	True				
ANR	1083890	ParameterType	const sigset_t *		1083827	0					
ANR	1083891	Identifier	the_sigmask		1083827	1					
ANR	1083892	Parameter	size_t * core_hard_limit	6535:2:197562:197584	1083827	20	True				
ANR	1083893	ParameterType	size_t *		1083827	0					
ANR	1083894	Identifier	core_hard_limit		1083827	1					
ANR	1083895	Parameter	int * affinity_mask	6536:2:197589:197607	1083827	21	True				
ANR	1083896	ParameterType	int *		1083827	0					
ANR	1083897	Identifier	affinity_mask		1083827	1					
ANR	1083898	CFGEntryNode	ENTRY		1083827		True				
ANR	1083899	CFGExitNode	EXIT		1083827		True				
ANR	1083900	Symbol	the_forker_pid		1083827						
ANR	1083901	Symbol	the_inheritFds		1083827						
ANR	1083902	Symbol	the_cwd		1083827						
ANR	1083903	Symbol	the_priv		1083827						
ANR	1083904	Symbol	the_family_info		1083827						
ANR	1083905	Symbol	the_privateinheritbuf		1083827						
ANR	1083906	Symbol	affinity_mask		1083827						
ANR	1083907	Symbol	the_executable		1083827						
ANR	1083908	Symbol	the_nice_inc		1083827						
ANR	1083909	Symbol	the_inheritbuf		1083827						
ANR	1083910	Symbol	core_hard_limit		1083827						
ANR	1083911	Symbol	the_time_of_fork		1083827						
ANR	1083912	Symbol	the_sigmask		1083827						
ANR	1083913	Symbol	the_std		1083827						
ANR	1083914	Symbol	the_want_command_port		1083827						
ANR	1083915	Symbol	the_numInheritFds		1083827						
ANR	1083916	Symbol	the_args		1083827						
ANR	1083917	Symbol	the_env		1083827						
ANR	1083918	Symbol	the_mii		1083827						
ANR	1083919	Symbol	the_job_opt_mask		1083827						
ANR	1083920	Symbol	the_executable_fullpath		1083827						
ANR	1083921	Symbol	the_errorpipe		1083827						
ANR	1083922	Function	~CreateProcessForkit	6555:1:198345:198529							
ANR	1083923	FunctionDef	~CreateProcessForkit ()		1083922	1					
ANR	1083924	CompoundStatement		6555:24:198368:198529	1083922	0					
ANR	1083925	ExpressionStatement	deleteStringArray ( m_unix_args )	6558:2:198463:198493	1083922	0	True				
ANR	1083926	CallExpression	deleteStringArray ( m_unix_args )		1083922	0					
ANR	1083927	Callee	deleteStringArray		1083922	0					
ANR	1083928	Identifier	deleteStringArray		1083922	0					
ANR	1083929	ArgumentList	m_unix_args		1083922	1					
ANR	1083930	Argument	m_unix_args		1083922	0					
ANR	1083931	Identifier	m_unix_args		1083922	0					
ANR	1083932	ExpressionStatement	deleteStringArray ( m_unix_env )	6559:2:198497:198526	1083922	1	True				
ANR	1083933	CallExpression	deleteStringArray ( m_unix_env )		1083922	0					
ANR	1083934	Callee	deleteStringArray		1083922	0					
ANR	1083935	Identifier	deleteStringArray		1083922	0					
ANR	1083936	ArgumentList	m_unix_env		1083922	1					
ANR	1083937	Argument	m_unix_env		1083922	0					
ANR	1083938	Identifier	m_unix_env		1083922	0					
ANR	1083939	Identifier	~CreateProcessForkit		1083922	1					
ANR	1083940	ParameterList			1083922	2					
ANR	1083941	CFGEntryNode	ENTRY		1083922		True				
ANR	1083942	CFGExitNode	EXIT		1083922		True				
ANR	1083943	Symbol	m_unix_args		1083922						
ANR	1083944	Symbol	m_unix_env		1083922						
ANR	1083945	DeclStmt									
ANR	1083946	Decl							pid_t	pid_t ( )	fork_exec
ANR	1083947	DeclStmt									
ANR	1083948	Decl							void	void ( )	exec
ANR	1083949	DeclStmt									
ANR	1083950	Decl							int	int ( void * arg )	clone_fn
ANR	1083951	DeclStmt									
ANR	1083952	Decl							pid_t	pid_t ( )	clone_safe_getpid
ANR	1083953	DeclStmt									
ANR	1083954	Decl							pid_t	pid_t ( )	clone_safe_getppid
ANR	1083955	DeclStmt									
ANR	1083956	Decl							const int ( & ) [ 2 ]	const int ( & ) [ 2 ]	m_errorpipe
ANR	1083957	DeclStmt									
ANR	1083958	Decl							const ArgList	const ArgList &	m_args
ANR	1083959	DeclStmt									
ANR	1083960	Decl							const int	const int	m_job_opt_mask
ANR	1083961	DeclStmt									
ANR	1083962	Decl							const Env	const Env *	m_env
ANR	1083963	DeclStmt									
ANR	1083964	Decl							const MyString	const MyString &	m_inheritbuf
ANR	1083965	DeclStmt									
ANR	1083966	Decl							const MyString	const MyString &	m_privateinheritbuf
ANR	1083967	DeclStmt									
ANR	1083968	Decl							const pid_t	const pid_t	m_forker_pid
ANR	1083969	DeclStmt									
ANR	1083970	Decl							const time_t	const time_t	m_time_of_fork
ANR	1083971	DeclStmt									
ANR	1083972	Decl							const unsigned int	const unsigned int	m_mii
ANR	1083973	DeclStmt									
ANR	1083974	Decl							const FamilyInfo	const FamilyInfo *	m_family_info
ANR	1083975	DeclStmt									
ANR	1083976	Decl							const char	const char *	m_cwd
ANR	1083977	DeclStmt									
ANR	1083978	Decl							const char	const char *	m_executable
ANR	1083979	DeclStmt									
ANR	1083980	Decl							const char	const char *	m_executable_fullpath
ANR	1083981	DeclStmt									
ANR	1083982	Decl							const int	const int *	m_std
ANR	1083983	DeclStmt									
ANR	1083984	Decl							const int	const int	m_numInheritFds
ANR	1083985	DeclStmt									
ANR	1083986	Decl							const int ( & ) [ MAX_INHERIT_FDS ]	const int ( & ) [ MAX_INHERIT_FDS ]	m_inheritFds
ANR	1083987	DeclStmt									
ANR	1083988	Decl							int	int	m_nice_inc
ANR	1083989	DeclStmt									
ANR	1083990	Decl							const priv_state	const priv_state &	m_priv
ANR	1083991	DeclStmt									
ANR	1083992	Decl							const int	const int	m_want_command_port
ANR	1083993	DeclStmt									
ANR	1083994	Decl							const sigset_t	const sigset_t *	m_sigmask
ANR	1083995	DeclStmt									
ANR	1083996	Decl							char	char * *	m_unix_args
ANR	1083997	DeclStmt									
ANR	1083998	Decl							char	char * *	m_unix_env
ANR	1083999	DeclStmt									
ANR	1084000	Decl							size_t	size_t *	m_core_hard_limit
ANR	1084001	DeclStmt									
ANR	1084002	Decl							const int	const int *	m_affinity_mask
ANR	1084003	DeclStmt									
ANR	1084004	Decl							Env	Env	m_envobject
ANR	1084005	ClassDef	<unnamed>	6607:0:199884:199940							
ANR	1084006	DeclStmt									
ANR	1084007	Decl							volatile int	volatile int	location
ANR	1084008	Function	CreateProcessForkit :: clone_safe_getpid	6621:0:200168:200571							
ANR	1084009	FunctionDef	CreateProcessForkit :: clone_safe_getpid ()		1084008	0					
ANR	1084010	CompoundStatement		6621:47:200215:200571	1084008	0					
ANR	1084011	ReturnStatement	return syscall ( SYS_getpid ) ;	6628:1:200510:200536	1084008	0	True				
ANR	1084012	CallExpression	syscall ( SYS_getpid )		1084008	0					
ANR	1084013	Callee	syscall		1084008	0					
ANR	1084014	Identifier	syscall		1084008	0					
ANR	1084015	ArgumentList	SYS_getpid		1084008	1					
ANR	1084016	Argument	SYS_getpid		1084008	0					
ANR	1084017	Identifier	SYS_getpid		1084008	0					
ANR	1084018	ReturnType	pid_t		1084008	1					
ANR	1084019	Identifier	CreateProcessForkit :: clone_safe_getpid		1084008	2					
ANR	1084020	ParameterList			1084008	3					
ANR	1084021	CFGEntryNode	ENTRY		1084008		True				
ANR	1084022	CFGExitNode	EXIT		1084008		True				
ANR	1084023	Symbol	syscall		1084008						
ANR	1084024	Symbol	SYS_getpid		1084008						
ANR	1084025	Function	CreateProcessForkit :: clone_safe_getppid	6633:0:200573:200797							
ANR	1084026	FunctionDef	CreateProcessForkit :: clone_safe_getppid ()		1084025	0					
ANR	1084027	CompoundStatement		6633:48:200621:200797	1084025	0					
ANR	1084028	ReturnStatement	return syscall ( SYS_getppid ) ;	6637:1:200734:200761	1084025	0	True				
ANR	1084029	CallExpression	syscall ( SYS_getppid )		1084025	0					
ANR	1084030	Callee	syscall		1084025	0					
ANR	1084031	Identifier	syscall		1084025	0					
ANR	1084032	ArgumentList	SYS_getppid		1084025	1					
ANR	1084033	Argument	SYS_getppid		1084025	0					
ANR	1084034	Identifier	SYS_getppid		1084025	0					
ANR	1084035	ReturnType	pid_t		1084025	1					
ANR	1084036	Identifier	CreateProcessForkit :: clone_safe_getppid		1084025	2					
ANR	1084037	ParameterList			1084025	3					
ANR	1084038	CFGEntryNode	ENTRY		1084025		True				
ANR	1084039	CFGExitNode	EXIT		1084025		True				
ANR	1084040	Symbol	syscall		1084025						
ANR	1084041	Symbol	SYS_getppid		1084025						
ANR	1084042	Function	CreateProcessForkit :: fork_exec	6643:0:200800:203558							
ANR	1084043	FunctionDef	CreateProcessForkit :: fork_exec ()		1084042	0					
ANR	1084044	CompoundStatement		6643:39:200839:203558	1084042	0					
ANR	1084045	IdentifierDeclStatement	pid_t newpid ;	6644:1:200842:200854	1084042	0	True				
ANR	1084046	IdentifierDecl	newpid		1084042	0					
ANR	1084047	IdentifierDeclType	pid_t		1084042	0					
ANR	1084048	Identifier	newpid		1084042	1					
ANR	1084049	IfStatement	if ( daemonCore -> UseCloneToCreateProcesses ( ) )		1084042	1					
ANR	1084050	Condition	daemonCore -> UseCloneToCreateProcesses ( )	6661:5:201643:201681	1084042	0	True				
ANR	1084051	CallExpression	daemonCore -> UseCloneToCreateProcesses ( )		1084042	0					
ANR	1084052	Callee	daemonCore -> UseCloneToCreateProcesses		1084042	0					
ANR	1084053	PtrMemberAccess	daemonCore -> UseCloneToCreateProcesses		1084042	0					
ANR	1084054	Identifier	daemonCore		1084042	0					
ANR	1084055	Identifier	UseCloneToCreateProcesses		1084042	1					
ANR	1084056	ArgumentList			1084042	1					
ANR	1084057	CompoundStatement		36:2:1584:1619	1084042	1					
ANR	1084058	Statement	dprintf	6662:2:201689:201695	1084042	0	True				
ANR	1084059	Statement	(	6662:9:201696:201696	1084042	1	True				
ANR	1084060	Statement	D_FULLDEBUG	6662:10:201697:201707	1084042	2	True				
ANR	1084061	Statement	","	6662:21:201708:201708	1084042	3	True				
ANR	1084062	Statement	"""Create_Process: using fast clone() """	6662:22:201709:201745	1084042	4	True				
ANR	1084063	Statement	"""to create child process.\\n"""	6663:22:201769:201796	1084042	5	True				
ANR	1084064	Statement	)	6663:50:201797:201797	1084042	6	True				
ANR	1084065	ExpressionStatement		6663:51:201798:201798	1084042	7	True				
ANR	1084066	IdentifierDeclStatement	const int stack_size = 16384 ;	6672:2:202208:202236	1084042	8	True				
ANR	1084067	IdentifierDecl	stack_size = 16384		1084042	0					
ANR	1084068	IdentifierDeclType	const int		1084042	0					
ANR	1084069	Identifier	stack_size		1084042	1					
ANR	1084070	AssignmentExpression	stack_size = 16384		1084042	2		=			
ANR	1084071	Identifier	stack_size		1084042	0					
ANR	1084072	PrimaryExpression	16384		1084042	1					
ANR	1084073	IdentifierDeclStatement	char child_stack [ stack_size ] ;	6673:2:202240:202268	1084042	9	True				
ANR	1084074	IdentifierDecl	child_stack [ stack_size ]		1084042	0					
ANR	1084075	IdentifierDeclType	char [ stack_size ]		1084042	0					
ANR	1084076	Identifier	child_stack		1084042	1					
ANR	1084077	Identifier	stack_size		1084042	2					
ANR	1084078	IdentifierDeclStatement	char * child_stack_ptr = child_stack ;	6678:2:202424:202459	1084042	10	True				
ANR	1084079	IdentifierDecl	* child_stack_ptr = child_stack		1084042	0					
ANR	1084080	IdentifierDeclType	char *		1084042	0					
ANR	1084081	Identifier	child_stack_ptr		1084042	1					
ANR	1084082	AssignmentExpression	* child_stack_ptr = child_stack		1084042	2		=			
ANR	1084083	Identifier	child_stack		1084042	0					
ANR	1084084	Identifier	child_stack		1084042	1					
ANR	1084085	IfStatement	if ( stack_direction ( ) == STACK_GROWS_DOWN )		1084042	11					
ANR	1084086	Condition	stack_direction ( ) == STACK_GROWS_DOWN	6679:6:202467:202503	1084042	0	True				
ANR	1084087	EqualityExpression	stack_direction ( ) == STACK_GROWS_DOWN		1084042	0		==			
ANR	1084088	CallExpression	stack_direction ( )		1084042	0					
ANR	1084089	Callee	stack_direction		1084042	0					
ANR	1084090	Identifier	stack_direction		1084042	0					
ANR	1084091	ArgumentList			1084042	1					
ANR	1084092	Identifier	STACK_GROWS_DOWN		1084042	1					
ANR	1084093	CompoundStatement		37:46:1667:1667	1084042	1					
ANR	1084094	ExpressionStatement	child_stack_ptr += stack_size	6680:3:202512:202541	1084042	0	True				
ANR	1084095	AssignmentExpression	child_stack_ptr += stack_size		1084042	0		+=			
ANR	1084096	Identifier	child_stack_ptr		1084042	0					
ANR	1084097	Identifier	stack_size		1084042	1					
ANR	1084098	ExpressionStatement	dprintf_before_shared_mem_clone ( )	6684:2:202583:202616	1084042	12	True				
ANR	1084099	CallExpression	dprintf_before_shared_mem_clone ( )		1084042	0					
ANR	1084100	Callee	dprintf_before_shared_mem_clone		1084042	0					
ANR	1084101	Identifier	dprintf_before_shared_mem_clone		1084042	0					
ANR	1084102	ArgumentList			1084042	1					
ANR	1084103	ExpressionStatement	enterCreateProcessChild ( m_errorpipe [ 1 ] )	6694:2:203029:203068	1084042	13	True				
ANR	1084104	CallExpression	enterCreateProcessChild ( m_errorpipe [ 1 ] )		1084042	0					
ANR	1084105	Callee	enterCreateProcessChild		1084042	0					
ANR	1084106	Identifier	enterCreateProcessChild		1084042	0					
ANR	1084107	ArgumentList	m_errorpipe [ 1 ]		1084042	1					
ANR	1084108	Argument	m_errorpipe [ 1 ]		1084042	0					
ANR	1084109	ArrayIndexing	m_errorpipe [ 1 ]		1084042	0					
ANR	1084110	Identifier	m_errorpipe		1084042	0					
ANR	1084111	PrimaryExpression	1		1084042	1					
ANR	1084112	ExpressionStatement	"newpid = clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"	6696:2:203073:203187	1084042	14	True				
ANR	1084113	AssignmentExpression	"newpid = clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"		1084042	0		=			
ANR	1084114	Identifier	newpid		1084042	0					
ANR	1084115	CallExpression	"clone ( CreateProcessForkit :: clone_fn , child_stack_ptr , ( CLONE_VM | CLONE_VFORK | SIGCHLD ) , this )"		1084042	1					
ANR	1084116	Callee	clone		1084042	0					
ANR	1084117	Identifier	clone		1084042	0					
ANR	1084118	ArgumentList	CreateProcessForkit :: clone_fn		1084042	1					
ANR	1084119	Argument	CreateProcessForkit :: clone_fn		1084042	0					
ANR	1084120	Identifier	CreateProcessForkit :: clone_fn		1084042	0					
ANR	1084121	Argument	child_stack_ptr		1084042	1					
ANR	1084122	Identifier	child_stack_ptr		1084042	0					
ANR	1084123	Argument	CLONE_VM | CLONE_VFORK | SIGCHLD		1084042	2					
ANR	1084124	InclusiveOrExpression	CLONE_VM | CLONE_VFORK | SIGCHLD		1084042	0		|			
ANR	1084125	Identifier	CLONE_VM		1084042	0					
ANR	1084126	InclusiveOrExpression	CLONE_VFORK | SIGCHLD		1084042	1		|			
ANR	1084127	Identifier	CLONE_VFORK		1084042	0					
ANR	1084128	Identifier	SIGCHLD		1084042	1					
ANR	1084129	Argument	this		1084042	3					
ANR	1084130	Identifier	this		1084042	0					
ANR	1084131	ExpressionStatement	exitCreateProcessChild ( )	6702:2:203192:203216	1084042	15	True				
ANR	1084132	CallExpression	exitCreateProcessChild ( )		1084042	0					
ANR	1084133	Callee	exitCreateProcessChild		1084042	0					
ANR	1084134	Identifier	exitCreateProcessChild		1084042	0					
ANR	1084135	ArgumentList			1084042	1					
ANR	1084136	ExpressionStatement	dprintf_after_shared_mem_clone ( )	6708:2:203334:203366	1084042	16	True				
ANR	1084137	CallExpression	dprintf_after_shared_mem_clone ( )		1084042	0					
ANR	1084138	Callee	dprintf_after_shared_mem_clone		1084042	0					
ANR	1084139	Identifier	dprintf_after_shared_mem_clone		1084042	0					
ANR	1084140	ArgumentList			1084042	1					
ANR	1084141	ReturnStatement	return newpid ;	6710:2:203371:203384	1084042	17	True				
ANR	1084142	Identifier	newpid		1084042	0					
ANR	1084143	ExpressionStatement	newpid = fork ( )	6714:1:203415:203430	1084042	2	True				
ANR	1084144	AssignmentExpression	newpid = fork ( )		1084042	0		=			
ANR	1084145	Identifier	newpid		1084042	0					
ANR	1084146	CallExpression	fork ( )		1084042	1					
ANR	1084147	Callee	fork		1084042	0					
ANR	1084148	Identifier	fork		1084042	0					
ANR	1084149	ArgumentList			1084042	1					
ANR	1084150	IfStatement	if ( newpid == 0 )		1084042	3					
ANR	1084151	Condition	newpid == 0	6715:5:203437:203447	1084042	0	True				
ANR	1084152	EqualityExpression	newpid == 0		1084042	0		==			
ANR	1084153	Identifier	newpid		1084042	0					
ANR	1084154	PrimaryExpression	0		1084042	1					
ANR	1084155	CompoundStatement		73:19:2611:2611	1084042	1					
ANR	1084156	ExpressionStatement	enterCreateProcessChild ( m_errorpipe [ 1 ] )	6717:2:203470:203509	1084042	0	True				
ANR	1084157	CallExpression	enterCreateProcessChild ( m_errorpipe [ 1 ] )		1084042	0					
ANR	1084158	Callee	enterCreateProcessChild		1084042	0					
ANR	1084159	Identifier	enterCreateProcessChild		1084042	0					
ANR	1084160	ArgumentList	m_errorpipe [ 1 ]		1084042	1					
ANR	1084161	Argument	m_errorpipe [ 1 ]		1084042	0					
ANR	1084162	ArrayIndexing	m_errorpipe [ 1 ]		1084042	0					
ANR	1084163	Identifier	m_errorpipe		1084042	0					
ANR	1084164	PrimaryExpression	1		1084042	1					
ANR	1084165	ExpressionStatement	exec ( )	6718:2:203513:203519	1084042	1	True				
ANR	1084166	CallExpression	exec ( )		1084042	0					
ANR	1084167	Callee	exec		1084042	0					
ANR	1084168	Identifier	exec		1084042	0					
ANR	1084169	ArgumentList			1084042	1					
ANR	1084170	ReturnStatement	return newpid ;	6721:1:203543:203556	1084042	4	True				
ANR	1084171	Identifier	newpid		1084042	0					
ANR	1084172	ReturnType	pid_t		1084042	1					
ANR	1084173	Identifier	CreateProcessForkit :: fork_exec		1084042	2					
ANR	1084174	ParameterList			1084042	3					
ANR	1084175	CFGEntryNode	ENTRY		1084042		True				
ANR	1084176	CFGExitNode	EXIT		1084042		True				
ANR	1084177	Symbol	child_stack		1084042						
ANR	1084178	Symbol	stack_direction		1084042						
ANR	1084179	Symbol	STACK_GROWS_DOWN		1084042						
ANR	1084180	Symbol	this		1084042						
ANR	1084181	Symbol	child_stack_ptr		1084042						
ANR	1084182	Symbol	* m_errorpipe		1084042						
ANR	1084183	Symbol	CreateProcessForkit :: clone_fn		1084042						
ANR	1084184	Symbol	SIGCHLD		1084042						
ANR	1084185	Symbol	fork		1084042						
ANR	1084186	Symbol	* daemonCore		1084042						
ANR	1084187	Symbol	m_errorpipe		1084042						
ANR	1084188	Symbol	newpid		1084042						
ANR	1084189	Symbol	daemonCore		1084042						
ANR	1084190	Symbol	clone		1084042						
ANR	1084191	Symbol	stack_size		1084042						
ANR	1084192	Symbol	CLONE_VM		1084042						
ANR	1084193	Symbol	daemonCore -> UseCloneToCreateProcesses		1084042						
ANR	1084194	Symbol	CLONE_VFORK		1084042						
ANR	1084195	Function	CreateProcessForkit :: clone_fn	6724:0:203561:203822							
ANR	1084196	FunctionDef	CreateProcessForkit :: clone_fn (void * arg)		1084195	0					
ANR	1084197	CompoundStatement		6724:47:203608:203822	1084195	0					
ANR	1084198	ExpressionStatement	( ( CreateProcessForkit * ) arg ) -> exec ( )	6728:1:203773:203809	1084195	0	True				
ANR	1084199	CallExpression	( ( CreateProcessForkit * ) arg ) -> exec ( )		1084195	0					
ANR	1084200	Callee	( ( CreateProcessForkit * ) arg ) -> exec		1084195	0					
ANR	1084201	PtrMemberAccess	( ( CreateProcessForkit * ) arg ) -> exec		1084195	0					
ANR	1084202	CastExpression	( CreateProcessForkit * ) arg		1084195	0					
ANR	1084203	CastTarget	CreateProcessForkit *		1084195	0					
ANR	1084204	Identifier	arg		1084195	1					
ANR	1084205	Identifier	exec		1084195	1					
ANR	1084206	ArgumentList			1084195	1					
ANR	1084207	ReturnStatement	return 0 ;	6729:1:203812:203820	1084195	1	True				
ANR	1084208	PrimaryExpression	0		1084195	0					
ANR	1084209	ReturnType	int		1084195	1					
ANR	1084210	Identifier	CreateProcessForkit :: clone_fn		1084195	2					
ANR	1084211	ParameterList	void * arg		1084195	3					
ANR	1084212	Parameter	void * arg	6724:35:203596:203604	1084195	0	True				
ANR	1084213	ParameterType	void *		1084195	0					
ANR	1084214	Identifier	arg		1084195	1					
ANR	1084215	CFGEntryNode	ENTRY		1084195		True				
ANR	1084216	CFGExitNode	EXIT		1084195		True				
ANR	1084217	Symbol	arg		1084195						
ANR	1084218	Function	CreateProcessForkit :: exec	6732:0:203825:223370							
ANR	1084219	FunctionDef	CreateProcessForkit :: exec ()		1084218	0					
ANR	1084220	CompoundStatement		6732:33:203858:223370	1084218	0					
ANR	1084221	ExpressionStatement	dprintf_init_fork_child ( )	6753:1:204931:204956	1084218	0	True				
ANR	1084222	CallExpression	dprintf_init_fork_child ( )		1084218	0					
ANR	1084223	Callee	dprintf_init_fork_child		1084218	0					
ANR	1084224	Identifier	dprintf_init_fork_child		1084218	0					
ANR	1084225	ArgumentList			1084218	1					
ANR	1084226	ExpressionStatement	close ( m_errorpipe [ 0 ] )	6757:1:205055:205076	1084218	1	True				
ANR	1084227	CallExpression	close ( m_errorpipe [ 0 ] )		1084218	0					
ANR	1084228	Callee	close		1084218	0					
ANR	1084229	Identifier	close		1084218	0					
ANR	1084230	ArgumentList	m_errorpipe [ 0 ]		1084218	1					
ANR	1084231	Argument	m_errorpipe [ 0 ]		1084218	0					
ANR	1084232	ArrayIndexing	m_errorpipe [ 0 ]		1084218	0					
ANR	1084233	Identifier	m_errorpipe		1084218	0					
ANR	1084234	PrimaryExpression	0		1084218	1					
ANR	1084235	ExpressionStatement	"fcntl ( m_errorpipe [ 1 ] , F_SETFD , FD_CLOEXEC )"	6758:1:205079:205121	1084218	2	True				
ANR	1084236	CallExpression	"fcntl ( m_errorpipe [ 1 ] , F_SETFD , FD_CLOEXEC )"		1084218	0					
ANR	1084237	Callee	fcntl		1084218	0					
ANR	1084238	Identifier	fcntl		1084218	0					
ANR	1084239	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084240	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084241	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084242	Identifier	m_errorpipe		1084218	0					
ANR	1084243	PrimaryExpression	1		1084218	1					
ANR	1084244	Argument	F_SETFD		1084218	1					
ANR	1084245	Identifier	F_SETFD		1084218	0					
ANR	1084246	Argument	FD_CLOEXEC		1084218	2					
ANR	1084247	Identifier	FD_CLOEXEC		1084218	0					
ANR	1084248	IdentifierDeclStatement	pid_t pid = clone_safe_getpid ( ) ;	6787:1:206654:206685	1084218	3	True				
ANR	1084249	IdentifierDecl	pid = clone_safe_getpid ( )		1084218	0					
ANR	1084250	IdentifierDeclType	pid_t		1084218	0					
ANR	1084251	Identifier	pid		1084218	1					
ANR	1084252	AssignmentExpression	pid = clone_safe_getpid ( )		1084218	2		=			
ANR	1084253	Identifier	pid		1084218	0					
ANR	1084254	CallExpression	clone_safe_getpid ( )		1084218	1					
ANR	1084255	Callee	clone_safe_getpid		1084218	0					
ANR	1084256	Identifier	clone_safe_getpid		1084218	0					
ANR	1084257	ArgumentList			1084218	1					
ANR	1084258	IdentifierDeclStatement	pid_t ppid = clone_safe_getppid ( ) ;	6788:1:206688:206721	1084218	4	True				
ANR	1084259	IdentifierDecl	ppid = clone_safe_getppid ( )		1084218	0					
ANR	1084260	IdentifierDeclType	pid_t		1084218	0					
ANR	1084261	Identifier	ppid		1084218	1					
ANR	1084262	AssignmentExpression	ppid = clone_safe_getppid ( )		1084218	2		=			
ANR	1084263	Identifier	ppid		1084218	0					
ANR	1084264	CallExpression	clone_safe_getppid ( )		1084218	1					
ANR	1084265	Callee	clone_safe_getppid		1084218	0					
ANR	1084266	Identifier	clone_safe_getppid		1084218	0					
ANR	1084267	ArgumentList			1084218	1					
ANR	1084268	IdentifierDeclStatement	DaemonCore :: PidEntry * pidinfo = NULL ;	6789:1:206724:206760	1084218	5	True				
ANR	1084269	IdentifierDecl	* pidinfo = NULL		1084218	0					
ANR	1084270	IdentifierDeclType	DaemonCore :: PidEntry *		1084218	0					
ANR	1084271	Identifier	pidinfo		1084218	1					
ANR	1084272	AssignmentExpression	* pidinfo = NULL		1084218	2		=			
ANR	1084273	Identifier	NULL		1084218	0					
ANR	1084274	Identifier	NULL		1084218	1					
ANR	1084275	IfStatement	"if ( ( daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0 ) )"		1084218	6					
ANR	1084276	Condition	"daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0"	6790:5:206767:206815	1084218	0	True				
ANR	1084277	RelationalExpression	"daemonCore -> pidTable -> lookup ( pid , pidinfo ) >= 0"		1084218	0		>=			
ANR	1084278	CallExpression	"daemonCore -> pidTable -> lookup ( pid , pidinfo )"		1084218	0					
ANR	1084279	Callee	daemonCore -> pidTable -> lookup		1084218	0					
ANR	1084280	PtrMemberAccess	daemonCore -> pidTable -> lookup		1084218	0					
ANR	1084281	PtrMemberAccess	daemonCore -> pidTable		1084218	0					
ANR	1084282	Identifier	daemonCore		1084218	0					
ANR	1084283	Identifier	pidTable		1084218	1					
ANR	1084284	Identifier	lookup		1084218	1					
ANR	1084285	ArgumentList	pid		1084218	1					
ANR	1084286	Argument	pid		1084218	0					
ANR	1084287	Identifier	pid		1084218	0					
ANR	1084288	Argument	pidinfo		1084218	1					
ANR	1084289	Identifier	pidinfo		1084218	0					
ANR	1084290	PrimaryExpression	0		1084218	1					
ANR	1084291	CompoundStatement		62:2:3076:3125	1084218	1					
ANR	1084292	IdentifierDeclStatement	int child_errno = DaemonCore :: ERRNO_PID_COLLISION ;	6793:2:206935:206984	1084218	0	True				
ANR	1084293	IdentifierDecl	child_errno = DaemonCore :: ERRNO_PID_COLLISION		1084218	0					
ANR	1084294	IdentifierDeclType	int		1084218	0					
ANR	1084295	Identifier	child_errno		1084218	1					
ANR	1084296	AssignmentExpression	child_errno = DaemonCore :: ERRNO_PID_COLLISION		1084218	2		=			
ANR	1084297	Identifier	DaemonCore :: ERRNO_PID_COLLISION		1084218	0					
ANR	1084298	Identifier	DaemonCore :: ERRNO_PID_COLLISION		1084218	1					
ANR	1084299	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & child_errno , sizeof ( child_errno ) )"	6794:2:206988:207044	1084218	1	True				
ANR	1084300	CallExpression	"write ( m_errorpipe [ 1 ] , & child_errno , sizeof ( child_errno ) )"		1084218	0					
ANR	1084301	Callee	write		1084218	0					
ANR	1084302	Identifier	write		1084218	0					
ANR	1084303	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084304	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084305	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084306	Identifier	m_errorpipe		1084218	0					
ANR	1084307	PrimaryExpression	1		1084218	1					
ANR	1084308	Argument	& child_errno		1084218	1					
ANR	1084309	UnaryOperationExpression	& child_errno		1084218	0					
ANR	1084310	UnaryOperator	&		1084218	0					
ANR	1084311	Identifier	child_errno		1084218	1					
ANR	1084312	Argument	sizeof ( child_errno )		1084218	2					
ANR	1084313	SizeofExpression	sizeof ( child_errno )		1084218	0					
ANR	1084314	Sizeof	sizeof		1084218	0					
ANR	1084315	SizeofOperand	child_errno		1084218	1					
ANR	1084316	ExpressionStatement	_exit ( 4 )	6795:2:207048:207056	1084218	2	True				
ANR	1084317	CallExpression	_exit ( 4 )		1084218	0					
ANR	1084318	Callee	_exit		1084218	0					
ANR	1084319	Identifier	_exit		1084218	0					
ANR	1084320	ArgumentList	4		1084218	1					
ANR	1084321	Argument	4		1084218	0					
ANR	1084322	PrimaryExpression	4		1084218	0					
ANR	1084323	IfStatement	if ( HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask ) )		1084218	7					
ANR	1084324	Condition	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )	6806:5:207485:207524	1084218	0	True				
ANR	1084325	CallExpression	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )		1084218	0					
ANR	1084326	Callee	HAS_DCJOBOPT_ENV_INHERIT		1084218	0					
ANR	1084327	Identifier	HAS_DCJOBOPT_ENV_INHERIT		1084218	0					
ANR	1084328	ArgumentList	m_job_opt_mask		1084218	1					
ANR	1084329	Argument	m_job_opt_mask		1084218	0					
ANR	1084330	Identifier	m_job_opt_mask		1084218	0					
ANR	1084331	CompoundStatement		75:48:3669:3669	1084218	1					
ANR	1084332	ExpressionStatement	m_envobject . MergeFrom ( GetEnviron ( ) )	6807:2:207532:207567	1084218	0	True				
ANR	1084333	CallExpression	m_envobject . MergeFrom ( GetEnviron ( ) )		1084218	0					
ANR	1084334	Callee	m_envobject . MergeFrom		1084218	0					
ANR	1084335	MemberAccess	m_envobject . MergeFrom		1084218	0					
ANR	1084336	Identifier	m_envobject		1084218	0					
ANR	1084337	Identifier	MergeFrom		1084218	1					
ANR	1084338	ArgumentList	GetEnviron ( )		1084218	1					
ANR	1084339	Argument	GetEnviron ( )		1084218	0					
ANR	1084340	CallExpression	GetEnviron ( )		1084218	0					
ANR	1084341	Callee	GetEnviron		1084218	0					
ANR	1084342	Identifier	GetEnviron		1084218	0					
ANR	1084343	ArgumentList			1084218	1					
ANR	1084344	IfStatement	if ( m_env )		1084218	8					
ANR	1084345	Condition	m_env	6813:4:207766:207770	1084218	0	True				
ANR	1084346	Identifier	m_env		1084218	0					
ANR	1084347	CompoundStatement		82:11:3914:3914	1084218	1					
ANR	1084348	ExpressionStatement	m_envobject . MergeFrom ( * m_env )	6814:2:207777:207806	1084218	0	True				
ANR	1084349	CallExpression	m_envobject . MergeFrom ( * m_env )		1084218	0					
ANR	1084350	Callee	m_envobject . MergeFrom		1084218	0					
ANR	1084351	MemberAccess	m_envobject . MergeFrom		1084218	0					
ANR	1084352	Identifier	m_envobject		1084218	0					
ANR	1084353	Identifier	MergeFrom		1084218	1					
ANR	1084354	ArgumentList	* m_env		1084218	1					
ANR	1084355	Argument	* m_env		1084218	0					
ANR	1084356	UnaryOperationExpression	* m_env		1084218	0					
ANR	1084357	UnaryOperator	*		1084218	0					
ANR	1084358	Identifier	m_env		1084218	1					
ANR	1084359	IfStatement	if ( HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask ) )		1084218	9					
ANR	1084360	Condition	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )	6819:5:207958:207997	1084218	0	True				
ANR	1084361	CallExpression	HAS_DCJOBOPT_ENV_INHERIT ( m_job_opt_mask )		1084218	0					
ANR	1084362	Callee	HAS_DCJOBOPT_ENV_INHERIT		1084218	0					
ANR	1084363	Identifier	HAS_DCJOBOPT_ENV_INHERIT		1084218	0					
ANR	1084364	ArgumentList	m_job_opt_mask		1084218	1					
ANR	1084365	Argument	m_job_opt_mask		1084218	0					
ANR	1084366	Identifier	m_job_opt_mask		1084218	0					
ANR	1084367	CompoundStatement		102:2:4724:4737	1084218	1					
ANR	1084368	ExpressionStatement	"m_envobject . SetEnv ( EnvGetName ( ENV_INHERIT ) , m_inheritbuf . Value ( ) )"	6823:2:208093:208162	1084218	0	True				
ANR	1084369	CallExpression	"m_envobject . SetEnv ( EnvGetName ( ENV_INHERIT ) , m_inheritbuf . Value ( ) )"		1084218	0					
ANR	1084370	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084371	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084372	Identifier	m_envobject		1084218	0					
ANR	1084373	Identifier	SetEnv		1084218	1					
ANR	1084374	ArgumentList	EnvGetName ( ENV_INHERIT )		1084218	1					
ANR	1084375	Argument	EnvGetName ( ENV_INHERIT )		1084218	0					
ANR	1084376	CallExpression	EnvGetName ( ENV_INHERIT )		1084218	0					
ANR	1084377	Callee	EnvGetName		1084218	0					
ANR	1084378	Identifier	EnvGetName		1084218	0					
ANR	1084379	ArgumentList	ENV_INHERIT		1084218	1					
ANR	1084380	Argument	ENV_INHERIT		1084218	0					
ANR	1084381	Identifier	ENV_INHERIT		1084218	0					
ANR	1084382	Argument	m_inheritbuf . Value ( )		1084218	1					
ANR	1084383	CallExpression	m_inheritbuf . Value ( )		1084218	0					
ANR	1084384	Callee	m_inheritbuf . Value		1084218	0					
ANR	1084385	MemberAccess	m_inheritbuf . Value		1084218	0					
ANR	1084386	Identifier	m_inheritbuf		1084218	0					
ANR	1084387	Identifier	Value		1084218	1					
ANR	1084388	ArgumentList			1084218	1					
ANR	1084389	IfStatement	if ( ! m_privateinheritbuf . IsEmpty ( ) )		1084218	1					
ANR	1084390	Condition	! m_privateinheritbuf . IsEmpty ( )	6825:6:208171:208200	1084218	0	True				
ANR	1084391	UnaryOperationExpression	! m_privateinheritbuf . IsEmpty ( )		1084218	0					
ANR	1084392	UnaryOperator	!		1084218	0					
ANR	1084393	CallExpression	m_privateinheritbuf . IsEmpty ( )		1084218	1					
ANR	1084394	Callee	m_privateinheritbuf . IsEmpty		1084218	0					
ANR	1084395	MemberAccess	m_privateinheritbuf . IsEmpty		1084218	0					
ANR	1084396	Identifier	m_privateinheritbuf		1084218	0					
ANR	1084397	Identifier	IsEmpty		1084218	1					
ANR	1084398	ArgumentList			1084218	1					
ANR	1084399	CompoundStatement		94:39:4345:4345	1084218	1					
ANR	1084400	ExpressionStatement	"m_envobject . SetEnv ( EnvGetName ( ENV_PRIVATE ) , m_privateinheritbuf . Value ( ) )"	6826:3:208209:208285	1084218	0	True				
ANR	1084401	CallExpression	"m_envobject . SetEnv ( EnvGetName ( ENV_PRIVATE ) , m_privateinheritbuf . Value ( ) )"		1084218	0					
ANR	1084402	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084403	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084404	Identifier	m_envobject		1084218	0					
ANR	1084405	Identifier	SetEnv		1084218	1					
ANR	1084406	ArgumentList	EnvGetName ( ENV_PRIVATE )		1084218	1					
ANR	1084407	Argument	EnvGetName ( ENV_PRIVATE )		1084218	0					
ANR	1084408	CallExpression	EnvGetName ( ENV_PRIVATE )		1084218	0					
ANR	1084409	Callee	EnvGetName		1084218	0					
ANR	1084410	Identifier	EnvGetName		1084218	0					
ANR	1084411	ArgumentList	ENV_PRIVATE		1084218	1					
ANR	1084412	Argument	ENV_PRIVATE		1084218	0					
ANR	1084413	Identifier	ENV_PRIVATE		1084218	0					
ANR	1084414	Argument	m_privateinheritbuf . Value ( )		1084218	1					
ANR	1084415	CallExpression	m_privateinheritbuf . Value ( )		1084218	0					
ANR	1084416	Callee	m_privateinheritbuf . Value		1084218	0					
ANR	1084417	MemberAccess	m_privateinheritbuf . Value		1084218	0					
ANR	1084418	Identifier	m_privateinheritbuf		1084218	0					
ANR	1084419	Identifier	Value		1084218	1					
ANR	1084420	ArgumentList			1084218	1					
ANR	1084421	IdentifierDeclStatement	char * display ;	6833:2:208583:208596	1084218	2	True				
ANR	1084422	IdentifierDecl	* display		1084218	0					
ANR	1084423	IdentifierDeclType	char *		1084218	0					
ANR	1084424	Identifier	display		1084218	1					
ANR	1084425	ExpressionStatement	"display = param ( ""PURIFY_DISPLAY"" )"	6834:2:208600:208636	1084218	3	True				
ANR	1084426	AssignmentExpression	"display = param ( ""PURIFY_DISPLAY"" )"		1084218	0		=			
ANR	1084427	Identifier	display		1084218	0					
ANR	1084428	CallExpression	"param ( ""PURIFY_DISPLAY"" )"		1084218	1					
ANR	1084429	Callee	param		1084218	0					
ANR	1084430	Identifier	param		1084218	0					
ANR	1084431	ArgumentList	"""PURIFY_DISPLAY"""		1084218	1					
ANR	1084432	Argument	"""PURIFY_DISPLAY"""		1084218	0					
ANR	1084433	PrimaryExpression	"""PURIFY_DISPLAY"""		1084218	0					
ANR	1084434	IfStatement	if ( display )		1084218	4					
ANR	1084435	Condition	display	6835:7:208645:208651	1084218	0	True				
ANR	1084436	Identifier	display		1084218	0					
ANR	1084437	CompoundStatement		107:3:4867:4880	1084218	1					
ANR	1084438	ExpressionStatement	"m_envobject . SetEnv ( ""DISPLAY"" , display )"	6836:3:208660:208700	1084218	0	True				
ANR	1084439	CallExpression	"m_envobject . SetEnv ( ""DISPLAY"" , display )"		1084218	0					
ANR	1084440	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084441	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084442	Identifier	m_envobject		1084218	0					
ANR	1084443	Identifier	SetEnv		1084218	1					
ANR	1084444	ArgumentList	"""DISPLAY"""		1084218	1					
ANR	1084445	Argument	"""DISPLAY"""		1084218	0					
ANR	1084446	PrimaryExpression	"""DISPLAY"""		1084218	0					
ANR	1084447	Argument	display		1084218	1					
ANR	1084448	Identifier	display		1084218	0					
ANR	1084449	ExpressionStatement	free ( display )	6837:3:208705:208721	1084218	1	True				
ANR	1084450	CallExpression	free ( display )		1084218	0					
ANR	1084451	Callee	free		1084218	0					
ANR	1084452	Identifier	free		1084218	0					
ANR	1084453	ArgumentList	display		1084218	1					
ANR	1084454	Argument	display		1084218	0					
ANR	1084455	Identifier	display		1084218	0					
ANR	1084456	IdentifierDeclStatement	char * purebuf ;	6838:3:208726:208739	1084218	2	True				
ANR	1084457	IdentifierDecl	* purebuf		1084218	0					
ANR	1084458	IdentifierDeclType	char *		1084218	0					
ANR	1084459	Identifier	purebuf		1084218	1					
ANR	1084460	ExpressionStatement	"purebuf = ( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"	6839:3:208744:208858	1084218	3	True				
ANR	1084461	AssignmentExpression	"purebuf = ( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		1084218	0		=			
ANR	1084462	Identifier	purebuf		1084218	0					
ANR	1084463	CastExpression	"( char * ) malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		1084218	1					
ANR	1084464	CastTarget	char *		1084218	0					
ANR	1084465	CallExpression	"malloc ( sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 ) )"		1084218	1					
ANR	1084466	Callee	malloc		1084218	0					
ANR	1084467	Identifier	malloc		1084218	0					
ANR	1084468	ArgumentList	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		1084218	1					
ANR	1084469	Argument	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		1084218	0					
ANR	1084470	MultiplicativeExpression	"sizeof ( char ) * ( strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1 )"		1084218	0		*			
ANR	1084471	SizeofExpression	sizeof ( char )		1084218	0					
ANR	1084472	Sizeof	sizeof		1084218	0					
ANR	1084473	SizeofOperand	char		1084218	1					
ANR	1084474	AdditiveExpression	"strlen ( ""-program-name="" ) + strlen ( m_executable ) + 1"		1084218	1		+			
ANR	1084475	CallExpression	"strlen ( ""-program-name="" )"		1084218	0					
ANR	1084476	Callee	strlen		1084218	0					
ANR	1084477	Identifier	strlen		1084218	0					
ANR	1084478	ArgumentList	"""-program-name="""		1084218	1					
ANR	1084479	Argument	"""-program-name="""		1084218	0					
ANR	1084480	PrimaryExpression	"""-program-name="""		1084218	0					
ANR	1084481	AdditiveExpression	strlen ( m_executable ) + 1		1084218	1		+			
ANR	1084482	CallExpression	strlen ( m_executable )		1084218	0					
ANR	1084483	Callee	strlen		1084218	0					
ANR	1084484	Identifier	strlen		1084218	0					
ANR	1084485	ArgumentList	m_executable		1084218	1					
ANR	1084486	Argument	m_executable		1084218	0					
ANR	1084487	Identifier	m_executable		1084218	0					
ANR	1084488	PrimaryExpression	1		1084218	1					
ANR	1084489	IfStatement	if ( purebuf == NULL )		1084218	4					
ANR	1084490	Condition	purebuf == NULL	6842:7:208867:208881	1084218	0	True				
ANR	1084491	EqualityExpression	purebuf == NULL		1084218	0		==			
ANR	1084492	Identifier	purebuf		1084218	0					
ANR	1084493	Identifier	NULL		1084218	1					
ANR	1084494	CompoundStatement		111:24:5025:5025	1084218	1					
ANR	1084495	ExpressionStatement	"EXCEPT ( ""Create_Process: PUREOPTIONS is out of memory!"" )"	6843:4:208890:208945	1084218	0	True				
ANR	1084496	CallExpression	"EXCEPT ( ""Create_Process: PUREOPTIONS is out of memory!"" )"		1084218	0					
ANR	1084497	Callee	EXCEPT		1084218	0					
ANR	1084498	Identifier	EXCEPT		1084218	0					
ANR	1084499	ArgumentList	"""Create_Process: PUREOPTIONS is out of memory!"""		1084218	1					
ANR	1084500	Argument	"""Create_Process: PUREOPTIONS is out of memory!"""		1084218	0					
ANR	1084501	PrimaryExpression	"""Create_Process: PUREOPTIONS is out of memory!"""		1084218	0					
ANR	1084502	ExpressionStatement	"sprintf ( purebuf , ""-program-name=%s"" , m_executable )"	6845:3:208955:209008	1084218	5	True				
ANR	1084503	CallExpression	"sprintf ( purebuf , ""-program-name=%s"" , m_executable )"		1084218	0					
ANR	1084504	Callee	sprintf		1084218	0					
ANR	1084505	Identifier	sprintf		1084218	0					
ANR	1084506	ArgumentList	purebuf		1084218	1					
ANR	1084507	Argument	purebuf		1084218	0					
ANR	1084508	Identifier	purebuf		1084218	0					
ANR	1084509	Argument	"""-program-name=%s"""		1084218	1					
ANR	1084510	PrimaryExpression	"""-program-name=%s"""		1084218	0					
ANR	1084511	Argument	m_executable		1084218	2					
ANR	1084512	Identifier	m_executable		1084218	0					
ANR	1084513	ExpressionStatement	"m_envobject . SetEnv ( ""PUREOPTIONS"" , purebuf )"	6846:3:209013:209057	1084218	6	True				
ANR	1084514	CallExpression	"m_envobject . SetEnv ( ""PUREOPTIONS"" , purebuf )"		1084218	0					
ANR	1084515	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084516	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084517	Identifier	m_envobject		1084218	0					
ANR	1084518	Identifier	SetEnv		1084218	1					
ANR	1084519	ArgumentList	"""PUREOPTIONS"""		1084218	1					
ANR	1084520	Argument	"""PUREOPTIONS"""		1084218	0					
ANR	1084521	PrimaryExpression	"""PUREOPTIONS"""		1084218	0					
ANR	1084522	Argument	purebuf		1084218	1					
ANR	1084523	Identifier	purebuf		1084218	0					
ANR	1084524	ExpressionStatement	free ( purebuf )	6847:3:209062:209075	1084218	7	True				
ANR	1084525	CallExpression	free ( purebuf )		1084218	0					
ANR	1084526	Callee	free		1084218	0					
ANR	1084527	Identifier	free		1084218	0					
ANR	1084528	ArgumentList	purebuf		1084218	1					
ANR	1084529	Argument	purebuf		1084218	0					
ANR	1084530	Identifier	purebuf		1084218	0					
ANR	1084531	IdentifierDeclStatement	char envid [ PIDENVID_ENVID_SIZE ] ;	6860:1:209567:209598	1084218	10	True				
ANR	1084532	IdentifierDecl	envid [ PIDENVID_ENVID_SIZE ]		1084218	0					
ANR	1084533	IdentifierDeclType	char [ PIDENVID_ENVID_SIZE ]		1084218	0					
ANR	1084534	Identifier	envid		1084218	1					
ANR	1084535	Identifier	PIDENVID_ENVID_SIZE		1084218	2					
ANR	1084536	IdentifierDeclStatement	PidEnvID penvid ;	6865:1:209799:209814	1084218	11	True				
ANR	1084537	IdentifierDecl	penvid		1084218	0					
ANR	1084538	IdentifierDeclType	PidEnvID		1084218	0					
ANR	1084539	Identifier	penvid		1084218	1					
ANR	1084540	ExpressionStatement	pidenvid_init ( & penvid )	6866:1:209817:209839	1084218	12	True				
ANR	1084541	CallExpression	pidenvid_init ( & penvid )		1084218	0					
ANR	1084542	Callee	pidenvid_init		1084218	0					
ANR	1084543	Identifier	pidenvid_init		1084218	0					
ANR	1084544	ArgumentList	& penvid		1084218	1					
ANR	1084545	Argument	& penvid		1084218	0					
ANR	1084546	UnaryOperationExpression	& penvid		1084218	0					
ANR	1084547	UnaryOperator	&		1084218	0					
ANR	1084548	Identifier	penvid		1084218	1					
ANR	1084549	IfStatement	if ( HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask ) )		1084218	13					
ANR	1084550	Condition	HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask )	6871:6:210003:210045	1084218	0	True				
ANR	1084551	CallExpression	HAS_DCJOBOPT_NO_ENV_INHERIT ( m_job_opt_mask )		1084218	0					
ANR	1084552	Callee	HAS_DCJOBOPT_NO_ENV_INHERIT		1084218	0					
ANR	1084553	Identifier	HAS_DCJOBOPT_NO_ENV_INHERIT		1084218	0					
ANR	1084554	ArgumentList	m_job_opt_mask		1084218	1					
ANR	1084555	Argument	m_job_opt_mask		1084218	0					
ANR	1084556	Identifier	m_job_opt_mask		1084218	0					
ANR	1084557	CompoundStatement		141:2:6194:6199	1084218	1					
ANR	1084558	IdentifierDeclStatement	int i ;	6872:2:210053:210058	1084218	0	True				
ANR	1084559	IdentifierDecl	i		1084218	0					
ANR	1084560	IdentifierDeclType	int		1084218	0					
ANR	1084561	Identifier	i		1084218	1					
ANR	1084562	IfStatement	"if ( pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED )"		1084218	1					
ANR	1084563	Condition	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"	6876:6:210231:210304	1084218	0	True				
ANR	1084564	EqualityExpression	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) ) == PIDENVID_OVERSIZED"		1084218	0		==			
ANR	1084565	CallExpression	"pidenvid_filter_and_insert ( & penvid , GetEnviron ( ) )"		1084218	0					
ANR	1084566	Callee	pidenvid_filter_and_insert		1084218	0					
ANR	1084567	Identifier	pidenvid_filter_and_insert		1084218	0					
ANR	1084568	ArgumentList	& penvid		1084218	1					
ANR	1084569	Argument	& penvid		1084218	0					
ANR	1084570	UnaryOperationExpression	& penvid		1084218	0					
ANR	1084571	UnaryOperator	&		1084218	0					
ANR	1084572	Identifier	penvid		1084218	1					
ANR	1084573	Argument	GetEnviron ( )		1084218	1					
ANR	1084574	CallExpression	GetEnviron ( )		1084218	0					
ANR	1084575	Callee	GetEnviron		1084218	0					
ANR	1084576	Identifier	GetEnviron		1084218	0					
ANR	1084577	ArgumentList			1084218	1					
ANR	1084578	Identifier	PIDENVID_OVERSIZED		1084218	1					
ANR	1084579	CompoundStatement		147:3:6451:6451	1084218	1					
ANR	1084580	Statement	dprintf	6879:4:210316:210322	1084218	0	True				
ANR	1084581	Statement	(	6879:12:210324:210324	1084218	1	True				
ANR	1084582	Statement	D_ALWAYS	6879:14:210326:210333	1084218	2	True				
ANR	1084583	Statement	","	6879:22:210334:210334	1084218	3	True				
ANR	1084584	Statement	"""Create_Process: Failed to filter ancestor """	6879:24:210336:210379	1084218	4	True				
ANR	1084585	Statement	"""history from parent's environment because there are more """	6880:8:210389:210447	1084218	5	True				
ANR	1084586	Statement	"""than PIDENVID_MAX(%d) of them! Programmer Error.\\n"""	6881:8:210457:210508	1084218	6	True				
ANR	1084587	Statement	","	6881:60:210509:210509	1084218	7	True				
ANR	1084588	Statement	PIDENVID_MAX	6882:8:210519:210530	1084218	8	True				
ANR	1084589	Statement	)	6882:21:210532:210532	1084218	9	True				
ANR	1084590	ExpressionStatement		6882:22:210533:210533	1084218	10	True				
ANR	1084591	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6885:4:210638:210682	1084218	11	True				
ANR	1084592	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1084593	Callee	write		1084218	0					
ANR	1084594	Identifier	write		1084218	0					
ANR	1084595	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084596	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084597	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084598	Identifier	m_errorpipe		1084218	0					
ANR	1084599	PrimaryExpression	1		1084218	1					
ANR	1084600	Argument	& errno		1084218	1					
ANR	1084601	UnaryOperationExpression	& errno		1084218	0					
ANR	1084602	UnaryOperator	&		1084218	0					
ANR	1084603	Identifier	errno		1084218	1					
ANR	1084604	Argument	sizeof ( errno )		1084218	2					
ANR	1084605	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1084606	Sizeof	sizeof		1084218	0					
ANR	1084607	SizeofOperand	errno		1084218	1					
ANR	1084608	ExpressionStatement	_exit ( errno )	6886:4:210688:210700	1084218	12	True				
ANR	1084609	CallExpression	_exit ( errno )		1084218	0					
ANR	1084610	Callee	_exit		1084218	0					
ANR	1084611	Identifier	_exit		1084218	0					
ANR	1084612	ArgumentList	errno		1084218	1					
ANR	1084613	Argument	errno		1084218	0					
ANR	1084614	Identifier	errno		1084218	0					
ANR	1084615	ForStatement	for ( i = 0 ; i < PIDENVID_MAX ; i ++ )		1084218	2					
ANR	1084616	ForInit	i = 0 ;	6890:7:210779:210784	1084218	0	True				
ANR	1084617	AssignmentExpression	i = 0		1084218	0		=			
ANR	1084618	Identifier	i		1084218	0					
ANR	1084619	PrimaryExpression	0		1084218	1					
ANR	1084620	Condition	i < PIDENVID_MAX	6890:14:210786:210801	1084218	1	True				
ANR	1084621	RelationalExpression	i < PIDENVID_MAX		1084218	0		<			
ANR	1084622	Identifier	i		1084218	0					
ANR	1084623	Identifier	PIDENVID_MAX		1084218	1					
ANR	1084624	PostIncDecOperationExpression	i ++	6890:32:210804:210806	1084218	2	True				
ANR	1084625	Identifier	i		1084218	0					
ANR	1084626	IncDec	++		1084218	1					
ANR	1084627	CompoundStatement		159:37:6950:6950	1084218	3					
ANR	1084628	IfStatement	if ( penvid . ancestors [ i ] . active == TRUE )		1084218	0					
ANR	1084629	Condition	penvid . ancestors [ i ] . active == TRUE	6891:7:210818:210851	1084218	0	True				
ANR	1084630	EqualityExpression	penvid . ancestors [ i ] . active == TRUE		1084218	0		==			
ANR	1084631	MemberAccess	penvid . ancestors [ i ] . active		1084218	0					
ANR	1084632	ArrayIndexing	penvid . ancestors [ i ]		1084218	0					
ANR	1084633	MemberAccess	penvid . ancestors		1084218	0					
ANR	1084634	Identifier	penvid		1084218	0					
ANR	1084635	Identifier	ancestors		1084218	1					
ANR	1084636	Identifier	i		1084218	1					
ANR	1084637	Identifier	active		1084218	1					
ANR	1084638	Identifier	TRUE		1084218	1					
ANR	1084639	CompoundStatement		160:43:6995:6995	1084218	1					
ANR	1084640	ExpressionStatement	m_envobject . SetEnv ( penvid . ancestors [ i ] . envid )	6892:4:210861:210908	1084218	0	True				
ANR	1084641	CallExpression	m_envobject . SetEnv ( penvid . ancestors [ i ] . envid )		1084218	0					
ANR	1084642	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084643	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084644	Identifier	m_envobject		1084218	0					
ANR	1084645	Identifier	SetEnv		1084218	1					
ANR	1084646	ArgumentList	penvid . ancestors [ i ] . envid		1084218	1					
ANR	1084647	Argument	penvid . ancestors [ i ] . envid		1084218	0					
ANR	1084648	MemberAccess	penvid . ancestors [ i ] . envid		1084218	0					
ANR	1084649	ArrayIndexing	penvid . ancestors [ i ]		1084218	0					
ANR	1084650	MemberAccess	penvid . ancestors		1084218	0					
ANR	1084651	Identifier	penvid		1084218	0					
ANR	1084652	Identifier	ancestors		1084218	1					
ANR	1084653	Identifier	i		1084218	1					
ANR	1084654	Identifier	envid		1084218	1					
ANR	1084655	ElseStatement	else		1084218	0					
ANR	1084656	CompoundStatement		162:10:7061:7061	1084218	0					
ANR	1084657	BreakStatement	break ;	6896:4:211005:211010	1084218	0	True				
ANR	1084658	IfStatement	"if ( pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT )"		1084218	14					
ANR	1084659	Condition	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT"	6902:5:211093:211219	1084218	0	True				
ANR	1084660	EqualityExpression	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii ) == PIDENVID_BAD_FORMAT"		1084218	0		==			
ANR	1084661	CallExpression	"pidenvid_format_to_envid ( envid , PIDENVID_ENVID_SIZE , m_forker_pid , pid , m_time_of_fork , m_mii )"		1084218	0					
ANR	1084662	Callee	pidenvid_format_to_envid		1084218	0					
ANR	1084663	Identifier	pidenvid_format_to_envid		1084218	0					
ANR	1084664	ArgumentList	envid		1084218	1					
ANR	1084665	Argument	envid		1084218	0					
ANR	1084666	Identifier	envid		1084218	0					
ANR	1084667	Argument	PIDENVID_ENVID_SIZE		1084218	1					
ANR	1084668	Identifier	PIDENVID_ENVID_SIZE		1084218	0					
ANR	1084669	Argument	m_forker_pid		1084218	2					
ANR	1084670	Identifier	m_forker_pid		1084218	0					
ANR	1084671	Argument	pid		1084218	3					
ANR	1084672	Identifier	pid		1084218	0					
ANR	1084673	Argument	m_time_of_fork		1084218	4					
ANR	1084674	Identifier	m_time_of_fork		1084218	0					
ANR	1084675	Argument	m_mii		1084218	5					
ANR	1084676	Identifier	m_mii		1084218	0					
ANR	1084677	Identifier	PIDENVID_BAD_FORMAT		1084218	1					
ANR	1084678	CompoundStatement		173:2:7366:7366	1084218	1					
ANR	1084679	Statement	dprintf	6905:3:211230:211236	1084218	0	True				
ANR	1084680	Statement	(	6905:11:211238:211238	1084218	1	True				
ANR	1084681	Statement	D_ALWAYS	6905:13:211240:211247	1084218	2	True				
ANR	1084682	Statement	","	6905:21:211248:211248	1084218	3	True				
ANR	1084683	Statement	"""Create_Process: Failed to create envid """	6905:23:211250:211290	1084218	4	True				
ANR	1084684	Statement	"""\\""%s\\"" due to bad format. !\\n"""	6906:7:211299:211329	1084218	5	True				
ANR	1084685	Statement	","	6906:38:211330:211330	1084218	6	True				
ANR	1084686	Statement	envid	6906:40:211332:211336	1084218	7	True				
ANR	1084687	Statement	)	6906:46:211338:211338	1084218	8	True				
ANR	1084688	ExpressionStatement		6906:47:211339:211339	1084218	9	True				
ANR	1084689	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6909:3:211441:211485	1084218	10	True				
ANR	1084690	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1084691	Callee	write		1084218	0					
ANR	1084692	Identifier	write		1084218	0					
ANR	1084693	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084694	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084695	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084696	Identifier	m_errorpipe		1084218	0					
ANR	1084697	PrimaryExpression	1		1084218	1					
ANR	1084698	Argument	& errno		1084218	1					
ANR	1084699	UnaryOperationExpression	& errno		1084218	0					
ANR	1084700	UnaryOperator	&		1084218	0					
ANR	1084701	Identifier	errno		1084218	1					
ANR	1084702	Argument	sizeof ( errno )		1084218	2					
ANR	1084703	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1084704	Sizeof	sizeof		1084218	0					
ANR	1084705	SizeofOperand	errno		1084218	1					
ANR	1084706	ExpressionStatement	_exit ( errno )	6910:3:211490:211502	1084218	11	True				
ANR	1084707	CallExpression	_exit ( errno )		1084218	0					
ANR	1084708	Callee	_exit		1084218	0					
ANR	1084709	Identifier	_exit		1084218	0					
ANR	1084710	ArgumentList	errno		1084218	1					
ANR	1084711	Argument	errno		1084218	0					
ANR	1084712	Identifier	errno		1084218	0					
ANR	1084713	IfStatement	"if ( pidenvid_append ( & penvid , envid ) == PIDENVID_OK )"		1084218	15					
ANR	1084714	Condition	"pidenvid_append ( & penvid , envid ) == PIDENVID_OK"	6915:5:211640:211685	1084218	0	True				
ANR	1084715	EqualityExpression	"pidenvid_append ( & penvid , envid ) == PIDENVID_OK"		1084218	0		==			
ANR	1084716	CallExpression	"pidenvid_append ( & penvid , envid )"		1084218	0					
ANR	1084717	Callee	pidenvid_append		1084218	0					
ANR	1084718	Identifier	pidenvid_append		1084218	0					
ANR	1084719	ArgumentList	& penvid		1084218	1					
ANR	1084720	Argument	& penvid		1084218	0					
ANR	1084721	UnaryOperationExpression	& penvid		1084218	0					
ANR	1084722	UnaryOperator	&		1084218	0					
ANR	1084723	Identifier	penvid		1084218	1					
ANR	1084724	Argument	envid		1084218	1					
ANR	1084725	Identifier	envid		1084218	0					
ANR	1084726	Identifier	PIDENVID_OK		1084218	1					
ANR	1084727	CompoundStatement		184:53:7829:7829	1084218	1					
ANR	1084728	ExpressionStatement	m_envobject . SetEnv ( envid )	6916:2:211692:211719	1084218	0	True				
ANR	1084729	CallExpression	m_envobject . SetEnv ( envid )		1084218	0					
ANR	1084730	Callee	m_envobject . SetEnv		1084218	0					
ANR	1084731	MemberAccess	m_envobject . SetEnv		1084218	0					
ANR	1084732	Identifier	m_envobject		1084218	0					
ANR	1084733	Identifier	SetEnv		1084218	1					
ANR	1084734	ArgumentList	envid		1084218	1					
ANR	1084735	Argument	envid		1084218	0					
ANR	1084736	Identifier	envid		1084218	0					
ANR	1084737	ElseStatement	else		1084218	0					
ANR	1084738	CompoundStatement		186:8:7870:7870	1084218	0					
ANR	1084739	Statement	dprintf	6918:2:211733:211739	1084218	0	True				
ANR	1084740	Statement	(	6918:10:211741:211741	1084218	1	True				
ANR	1084741	Statement	D_ALWAYS	6918:12:211743:211750	1084218	2	True				
ANR	1084742	Statement	","	6918:20:211751:211751	1084218	3	True				
ANR	1084743	Statement	"""Create_Process: Failed to insert envid """	6918:22:211753:211793	1084218	4	True				
ANR	1084744	Statement	"""\\""%s\\"" because its insertion would mean more than """	6919:6:211801:211852	1084218	5	True				
ANR	1084745	Statement	"""PIDENVID_MAX entries in a process! Programmer """	6920:6:211860:211907	1084218	6	True				
ANR	1084746	Statement	"""Error.\\n"""	6921:6:211915:211924	1084218	7	True				
ANR	1084747	Statement	","	6921:16:211925:211925	1084218	8	True				
ANR	1084748	Statement	envid	6921:18:211927:211931	1084218	9	True				
ANR	1084749	Statement	)	6921:24:211933:211933	1084218	10	True				
ANR	1084750	ExpressionStatement		6921:25:211934:211934	1084218	11	True				
ANR	1084751	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6924:2:212033:212077	1084218	12	True				
ANR	1084752	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1084753	Callee	write		1084218	0					
ANR	1084754	Identifier	write		1084218	0					
ANR	1084755	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084756	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084757	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084758	Identifier	m_errorpipe		1084218	0					
ANR	1084759	PrimaryExpression	1		1084218	1					
ANR	1084760	Argument	& errno		1084218	1					
ANR	1084761	UnaryOperationExpression	& errno		1084218	0					
ANR	1084762	UnaryOperator	&		1084218	0					
ANR	1084763	Identifier	errno		1084218	1					
ANR	1084764	Argument	sizeof ( errno )		1084218	2					
ANR	1084765	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1084766	Sizeof	sizeof		1084218	0					
ANR	1084767	SizeofOperand	errno		1084218	1					
ANR	1084768	ExpressionStatement	_exit ( errno )	6925:2:212081:212093	1084218	13	True				
ANR	1084769	CallExpression	_exit ( errno )		1084218	0					
ANR	1084770	Callee	_exit		1084218	0					
ANR	1084771	Identifier	_exit		1084218	0					
ANR	1084772	ArgumentList	errno		1084218	1					
ANR	1084773	Argument	errno		1084218	0					
ANR	1084774	Identifier	errno		1084218	0					
ANR	1084775	ExpressionStatement	m_unix_env = m_envobject . getStringArray ( )	6930:1:212178:212219	1084218	16	True				
ANR	1084776	AssignmentExpression	m_unix_env = m_envobject . getStringArray ( )		1084218	0		=			
ANR	1084777	Identifier	m_unix_env		1084218	0					
ANR	1084778	CallExpression	m_envobject . getStringArray ( )		1084218	1					
ANR	1084779	Callee	m_envobject . getStringArray		1084218	0					
ANR	1084780	MemberAccess	m_envobject . getStringArray		1084218	0					
ANR	1084781	Identifier	m_envobject		1084218	0					
ANR	1084782	Identifier	getStringArray		1084218	1					
ANR	1084783	ArgumentList			1084218	1					
ANR	1084784	IfStatement	if ( m_args . Count ( ) == 0 )		1084218	17					
ANR	1084785	Condition	m_args . Count ( ) == 0	6937:5:212424:212442	1084218	0	True				
ANR	1084786	EqualityExpression	m_args . Count ( ) == 0		1084218	0		==			
ANR	1084787	CallExpression	m_args . Count ( )		1084218	0					
ANR	1084788	Callee	m_args . Count		1084218	0					
ANR	1084789	MemberAccess	m_args . Count		1084218	0					
ANR	1084790	Identifier	m_args		1084218	0					
ANR	1084791	Identifier	Count		1084218	1					
ANR	1084792	ArgumentList			1084218	1					
ANR	1084793	PrimaryExpression	0		1084218	1					
ANR	1084794	CompoundStatement		208:2:8647:8662	1084218	1					
ANR	1084795	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: NULL\\n"" )"	6938:2:212450:212502	1084218	0	True				
ANR	1084796	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: NULL\\n"" )"		1084218	0					
ANR	1084797	Callee	dprintf		1084218	0					
ANR	1084798	Identifier	dprintf		1084218	0					
ANR	1084799	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1084800	Argument	D_DAEMONCORE		1084218	0					
ANR	1084801	Identifier	D_DAEMONCORE		1084218	0					
ANR	1084802	Argument	"""Create_Process: Arg: NULL\\n"""		1084218	1					
ANR	1084803	PrimaryExpression	"""Create_Process: Arg: NULL\\n"""		1084218	0					
ANR	1084804	IdentifierDeclStatement	ArgList tmpargs ;	6939:2:212506:212521	1084218	1	True				
ANR	1084805	IdentifierDecl	tmpargs		1084218	0					
ANR	1084806	IdentifierDeclType	ArgList		1084218	0					
ANR	1084807	Identifier	tmpargs		1084218	1					
ANR	1084808	ExpressionStatement	tmpargs . AppendArg ( m_executable )	6940:2:212525:212556	1084218	2	True				
ANR	1084809	CallExpression	tmpargs . AppendArg ( m_executable )		1084218	0					
ANR	1084810	Callee	tmpargs . AppendArg		1084218	0					
ANR	1084811	MemberAccess	tmpargs . AppendArg		1084218	0					
ANR	1084812	Identifier	tmpargs		1084218	0					
ANR	1084813	Identifier	AppendArg		1084218	1					
ANR	1084814	ArgumentList	m_executable		1084218	1					
ANR	1084815	Argument	m_executable		1084218	0					
ANR	1084816	Identifier	m_executable		1084218	0					
ANR	1084817	ExpressionStatement	m_unix_args = tmpargs . GetStringArray ( )	6941:2:212560:212598	1084218	3	True				
ANR	1084818	AssignmentExpression	m_unix_args = tmpargs . GetStringArray ( )		1084218	0		=			
ANR	1084819	Identifier	m_unix_args		1084218	0					
ANR	1084820	CallExpression	tmpargs . GetStringArray ( )		1084218	1					
ANR	1084821	Callee	tmpargs . GetStringArray		1084218	0					
ANR	1084822	MemberAccess	tmpargs . GetStringArray		1084218	0					
ANR	1084823	Identifier	tmpargs		1084218	0					
ANR	1084824	Identifier	GetStringArray		1084218	1					
ANR	1084825	ArgumentList			1084218	1					
ANR	1084826	ElseStatement	else		1084218	0					
ANR	1084827	CompoundStatement		212:6:8750:8750	1084218	0					
ANR	1084828	IfStatement	if ( DebugFlags & D_DAEMONCORE )		1084218	0					
ANR	1084829	Condition	DebugFlags & D_DAEMONCORE	6944:5:212616:212640	1084218	0	True				
ANR	1084830	BitAndExpression	DebugFlags & D_DAEMONCORE		1084218	0		&			
ANR	1084831	Identifier	DebugFlags		1084218	0					
ANR	1084832	Identifier	D_DAEMONCORE		1084218	1					
ANR	1084833	CompoundStatement		214:3:8789:8808	1084218	1					
ANR	1084834	IdentifierDeclStatement	MyString arg_string ;	6945:3:212648:212667	1084218	0	True				
ANR	1084835	IdentifierDecl	arg_string		1084218	0					
ANR	1084836	IdentifierDeclType	MyString		1084218	0					
ANR	1084837	Identifier	arg_string		1084218	1					
ANR	1084838	ExpressionStatement	m_args . GetArgsStringForDisplay ( & arg_string )	6946:3:212672:212715	1084218	1	True				
ANR	1084839	CallExpression	m_args . GetArgsStringForDisplay ( & arg_string )		1084218	0					
ANR	1084840	Callee	m_args . GetArgsStringForDisplay		1084218	0					
ANR	1084841	MemberAccess	m_args . GetArgsStringForDisplay		1084218	0					
ANR	1084842	Identifier	m_args		1084218	0					
ANR	1084843	Identifier	GetArgsStringForDisplay		1084218	1					
ANR	1084844	ArgumentList	& arg_string		1084218	1					
ANR	1084845	Argument	& arg_string		1084218	0					
ANR	1084846	UnaryOperationExpression	& arg_string		1084218	0					
ANR	1084847	UnaryOperator	&		1084218	0					
ANR	1084848	Identifier	arg_string		1084218	1					
ANR	1084849	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: %s\\n"" , arg_string . Value ( ) )"	6947:3:212720:212790	1084218	2	True				
ANR	1084850	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Process: Arg: %s\\n"" , arg_string . Value ( ) )"		1084218	0					
ANR	1084851	Callee	dprintf		1084218	0					
ANR	1084852	Identifier	dprintf		1084218	0					
ANR	1084853	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1084854	Argument	D_DAEMONCORE		1084218	0					
ANR	1084855	Identifier	D_DAEMONCORE		1084218	0					
ANR	1084856	Argument	"""Create_Process: Arg: %s\\n"""		1084218	1					
ANR	1084857	PrimaryExpression	"""Create_Process: Arg: %s\\n"""		1084218	0					
ANR	1084858	Argument	arg_string . Value ( )		1084218	2					
ANR	1084859	CallExpression	arg_string . Value ( )		1084218	0					
ANR	1084860	Callee	arg_string . Value		1084218	0					
ANR	1084861	MemberAccess	arg_string . Value		1084218	0					
ANR	1084862	Identifier	arg_string		1084218	0					
ANR	1084863	Identifier	Value		1084218	1					
ANR	1084864	ArgumentList			1084218	1					
ANR	1084865	ExpressionStatement	m_unix_args = m_args . GetStringArray ( )	6949:2:212798:212835	1084218	1	True				
ANR	1084866	AssignmentExpression	m_unix_args = m_args . GetStringArray ( )		1084218	0		=			
ANR	1084867	Identifier	m_unix_args		1084218	0					
ANR	1084868	CallExpression	m_args . GetStringArray ( )		1084218	1					
ANR	1084869	Callee	m_args . GetStringArray		1084218	0					
ANR	1084870	MemberAccess	m_args . GetStringArray		1084218	0					
ANR	1084871	Identifier	m_args		1084218	0					
ANR	1084872	Identifier	GetStringArray		1084218	1					
ANR	1084873	ArgumentList			1084218	1					
ANR	1084874	IfStatement	if ( ( m_family_info != NULL ) )		1084218	18					
ANR	1084875	Condition	m_family_info != NULL	6954:5:212888:212912	1084218	0	True				
ANR	1084876	EqualityExpression	m_family_info != NULL		1084218	0		!=			
ANR	1084877	Identifier	m_family_info		1084218	0					
ANR	1084878	Identifier	NULL		1084218	1					
ANR	1084879	CompoundStatement		223:33:9057:9057	1084218	1					
ANR	1084880	IfStatement	"if ( param_boolean ( ""USE_PROCESS_GROUPS"" , true ) )"		1084218	0					
ANR	1084881	Condition	"param_boolean ( ""USE_PROCESS_GROUPS"" , true )"	6957:5:212978:213020	1084218	0	True				
ANR	1084882	CallExpression	"param_boolean ( ""USE_PROCESS_GROUPS"" , true )"		1084218	0					
ANR	1084883	Callee	param_boolean		1084218	0					
ANR	1084884	Identifier	param_boolean		1084218	0					
ANR	1084885	ArgumentList	"""USE_PROCESS_GROUPS"""		1084218	1					
ANR	1084886	Argument	"""USE_PROCESS_GROUPS"""		1084218	0					
ANR	1084887	PrimaryExpression	"""USE_PROCESS_GROUPS"""		1084218	0					
ANR	1084888	Argument	true		1084218	1					
ANR	1084889	Identifier	true		1084218	0					
ANR	1084890	CompoundStatement		226:50:9164:9164	1084218	1					
ANR	1084891	IfStatement	if ( setsid ( ) == - 1 )		1084218	0					
ANR	1084892	Condition	setsid ( ) == - 1	6960:7:213094:213107	1084218	0	True				
ANR	1084893	EqualityExpression	setsid ( ) == - 1		1084218	0		==			
ANR	1084894	CallExpression	setsid ( )		1084218	0					
ANR	1084895	Callee	setsid		1084218	0					
ANR	1084896	Identifier	setsid		1084218	0					
ANR	1084897	ArgumentList			1084218	1					
ANR	1084898	UnaryOperationExpression	- 1		1084218	1					
ANR	1084899	UnaryOperator	-		1084218	0					
ANR	1084900	PrimaryExpression	1		1084218	1					
ANR	1084901	CompoundStatement		230:4:9256:9256	1084218	1					
ANR	1084902	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: setsid() failed: %s\\n"" , strerror ( errno ) )"	6962:5:213122:213205	1084218	0	True				
ANR	1084903	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: setsid() failed: %s\\n"" , strerror ( errno ) )"		1084218	0					
ANR	1084904	Callee	dprintf		1084218	0					
ANR	1084905	Identifier	dprintf		1084218	0					
ANR	1084906	ArgumentList	D_ALWAYS		1084218	1					
ANR	1084907	Argument	D_ALWAYS		1084218	0					
ANR	1084908	Identifier	D_ALWAYS		1084218	0					
ANR	1084909	Argument	"""Create_Process: setsid() failed: %s\\n"""		1084218	1					
ANR	1084910	PrimaryExpression	"""Create_Process: setsid() failed: %s\\n"""		1084218	0					
ANR	1084911	Argument	strerror ( errno )		1084218	2					
ANR	1084912	CallExpression	strerror ( errno )		1084218	0					
ANR	1084913	Callee	strerror		1084218	0					
ANR	1084914	Identifier	strerror		1084218	0					
ANR	1084915	ArgumentList	errno		1084218	1					
ANR	1084916	Argument	errno		1084218	0					
ANR	1084917	Identifier	errno		1084218	0					
ANR	1084918	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	6966:5:213313:213357	1084218	1	True				
ANR	1084919	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1084920	Callee	write		1084218	0					
ANR	1084921	Identifier	write		1084218	0					
ANR	1084922	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1084923	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1084924	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1084925	Identifier	m_errorpipe		1084218	0					
ANR	1084926	PrimaryExpression	1		1084218	1					
ANR	1084927	Argument	& errno		1084218	1					
ANR	1084928	UnaryOperationExpression	& errno		1084218	0					
ANR	1084929	UnaryOperator	&		1084218	0					
ANR	1084930	Identifier	errno		1084218	1					
ANR	1084931	Argument	sizeof ( errno )		1084218	2					
ANR	1084932	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1084933	Sizeof	sizeof		1084218	0					
ANR	1084934	SizeofOperand	errno		1084218	1					
ANR	1084935	ExpressionStatement	_exit ( errno )	6967:5:213364:213376	1084218	2	True				
ANR	1084936	CallExpression	_exit ( errno )		1084218	0					
ANR	1084937	Callee	_exit		1084218	0					
ANR	1084938	Identifier	_exit		1084218	0					
ANR	1084939	ArgumentList	errno		1084218	1					
ANR	1084940	Argument	errno		1084218	0					
ANR	1084941	Identifier	errno		1084218	0					
ANR	1084942	ExpressionStatement	ASSERT ( daemonCore -> m_proc_family != NULL )	6975:2:213535:213576	1084218	1	True				
ANR	1084943	CallExpression	ASSERT ( daemonCore -> m_proc_family != NULL )		1084218	0					
ANR	1084944	Callee	ASSERT		1084218	0					
ANR	1084945	Identifier	ASSERT		1084218	0					
ANR	1084946	ArgumentList	daemonCore -> m_proc_family != NULL		1084218	1					
ANR	1084947	Argument	daemonCore -> m_proc_family != NULL		1084218	0					
ANR	1084948	EqualityExpression	daemonCore -> m_proc_family != NULL		1084218	0		!=			
ANR	1084949	PtrMemberAccess	daemonCore -> m_proc_family		1084218	0					
ANR	1084950	Identifier	daemonCore		1084218	0					
ANR	1084951	Identifier	m_proc_family		1084218	1					
ANR	1084952	Identifier	NULL		1084218	1					
ANR	1084953	IfStatement	if ( daemonCore -> m_proc_family -> register_from_child ( ) )		1084218	2					
ANR	1084954	Condition	daemonCore -> m_proc_family -> register_from_child ( )	6976:6:213584:213631	1084218	0	True				
ANR	1084955	CallExpression	daemonCore -> m_proc_family -> register_from_child ( )		1084218	0					
ANR	1084956	Callee	daemonCore -> m_proc_family -> register_from_child		1084218	0					
ANR	1084957	PtrMemberAccess	daemonCore -> m_proc_family -> register_from_child		1084218	0					
ANR	1084958	PtrMemberAccess	daemonCore -> m_proc_family		1084218	0					
ANR	1084959	Identifier	daemonCore		1084218	0					
ANR	1084960	Identifier	m_proc_family		1084218	1					
ANR	1084961	Identifier	register_from_child		1084218	1					
ANR	1084962	ArgumentList			1084218	1					
ANR	1084963	CompoundStatement		269:3:10545:10942	1084218	1					
ANR	1084964	IdentifierDeclStatement	PidEnvID * penvid_ptr = & penvid ;	6988:3:214143:214173	1084218	0	True				
ANR	1084965	IdentifierDecl	* penvid_ptr = & penvid		1084218	0					
ANR	1084966	IdentifierDeclType	PidEnvID *		1084218	0					
ANR	1084967	Identifier	penvid_ptr		1084218	1					
ANR	1084968	AssignmentExpression	* penvid_ptr = & penvid		1084218	2		=			
ANR	1084969	Identifier	penvid_ptr		1084218	0					
ANR	1084970	UnaryOperationExpression	& penvid		1084218	1					
ANR	1084971	UnaryOperator	&		1084218	0					
ANR	1084972	Identifier	penvid		1084218	1					
ANR	1084973	IdentifierDeclStatement	gid_t * tracking_gid_ptr = NULL ;	6995:3:214294:214324	1084218	1	True				
ANR	1084974	IdentifierDecl	* tracking_gid_ptr = NULL		1084218	0					
ANR	1084975	IdentifierDeclType	gid_t *		1084218	0					
ANR	1084976	Identifier	tracking_gid_ptr		1084218	1					
ANR	1084977	AssignmentExpression	* tracking_gid_ptr = NULL		1084218	2		=			
ANR	1084978	Identifier	NULL		1084218	0					
ANR	1084979	Identifier	NULL		1084218	1					
ANR	1084980	ExpressionStatement	tracking_gid_ptr = m_family_info -> group_ptr	6997:3:214348:214391	1084218	2	True				
ANR	1084981	AssignmentExpression	tracking_gid_ptr = m_family_info -> group_ptr		1084218	0		=			
ANR	1084982	Identifier	tracking_gid_ptr		1084218	0					
ANR	1084983	PtrMemberAccess	m_family_info -> group_ptr		1084218	1					
ANR	1084984	Identifier	m_family_info		1084218	0					
ANR	1084985	Identifier	group_ptr		1084218	1					
ANR	1084986	IdentifierDeclStatement	"bool ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy ) ;"	7000:3:214404:214801	1084218	3	True				
ANR	1084987	IdentifierDecl	"ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		1084218	0					
ANR	1084988	IdentifierDeclType	bool		1084218	0					
ANR	1084989	Identifier	ok		1084218	1					
ANR	1084990	AssignmentExpression	"ok = daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		1084218	2		=			
ANR	1084991	Identifier	ok		1084218	0					
ANR	1084992	CallExpression	"daemonCore -> Register_Family ( pid , ppid , m_family_info -> max_snapshot_interval , penvid_ptr , m_family_info -> login , tracking_gid_ptr , m_family_info -> cgroup , m_family_info -> glexec_proxy )"		1084218	1					
ANR	1084993	Callee	daemonCore -> Register_Family		1084218	0					
ANR	1084994	PtrMemberAccess	daemonCore -> Register_Family		1084218	0					
ANR	1084995	Identifier	daemonCore		1084218	0					
ANR	1084996	Identifier	Register_Family		1084218	1					
ANR	1084997	ArgumentList	pid		1084218	1					
ANR	1084998	Argument	pid		1084218	0					
ANR	1084999	Identifier	pid		1084218	0					
ANR	1085000	Argument	ppid		1084218	1					
ANR	1085001	Identifier	ppid		1084218	0					
ANR	1085002	Argument	m_family_info -> max_snapshot_interval		1084218	2					
ANR	1085003	PtrMemberAccess	m_family_info -> max_snapshot_interval		1084218	0					
ANR	1085004	Identifier	m_family_info		1084218	0					
ANR	1085005	Identifier	max_snapshot_interval		1084218	1					
ANR	1085006	Argument	penvid_ptr		1084218	3					
ANR	1085007	Identifier	penvid_ptr		1084218	0					
ANR	1085008	Argument	m_family_info -> login		1084218	4					
ANR	1085009	PtrMemberAccess	m_family_info -> login		1084218	0					
ANR	1085010	Identifier	m_family_info		1084218	0					
ANR	1085011	Identifier	login		1084218	1					
ANR	1085012	Argument	tracking_gid_ptr		1084218	5					
ANR	1085013	Identifier	tracking_gid_ptr		1084218	0					
ANR	1085014	Argument	m_family_info -> cgroup		1084218	6					
ANR	1085015	PtrMemberAccess	m_family_info -> cgroup		1084218	0					
ANR	1085016	Identifier	m_family_info		1084218	0					
ANR	1085017	Identifier	cgroup		1084218	1					
ANR	1085018	Argument	m_family_info -> glexec_proxy		1084218	7					
ANR	1085019	PtrMemberAccess	m_family_info -> glexec_proxy		1084218	0					
ANR	1085020	Identifier	m_family_info		1084218	0					
ANR	1085021	Identifier	glexec_proxy		1084218	1					
ANR	1085022	IfStatement	if ( ! ok )		1084218	4					
ANR	1085023	Condition	! ok	7009:7:214810:214812	1084218	0	True				
ANR	1085024	UnaryOperationExpression	! ok		1084218	0					
ANR	1085025	UnaryOperator	!		1084218	0					
ANR	1085026	Identifier	ok		1084218	1					
ANR	1085027	CompoundStatement		278:12:10956:10956	1084218	1					
ANR	1085028	ExpressionStatement	errno = DaemonCore :: ERRNO_REGISTRATION_FAILED	7010:4:214821:214866	1084218	0	True				
ANR	1085029	AssignmentExpression	errno = DaemonCore :: ERRNO_REGISTRATION_FAILED		1084218	0		=			
ANR	1085030	Identifier	errno		1084218	0					
ANR	1085031	Identifier	DaemonCore :: ERRNO_REGISTRATION_FAILED		1084218	1					
ANR	1085032	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7011:4:214872:214916	1084218	1	True				
ANR	1085033	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1085034	Callee	write		1084218	0					
ANR	1085035	Identifier	write		1084218	0					
ANR	1085036	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1085037	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1085038	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1085039	Identifier	m_errorpipe		1084218	0					
ANR	1085040	PrimaryExpression	1		1084218	1					
ANR	1085041	Argument	& errno		1084218	1					
ANR	1085042	UnaryOperationExpression	& errno		1084218	0					
ANR	1085043	UnaryOperator	&		1084218	0					
ANR	1085044	Identifier	errno		1084218	1					
ANR	1085045	Argument	sizeof ( errno )		1084218	2					
ANR	1085046	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1085047	Sizeof	sizeof		1084218	0					
ANR	1085048	SizeofOperand	errno		1084218	1					
ANR	1085049	ExpressionStatement	_exit ( 4 )	7012:4:214922:214930	1084218	2	True				
ANR	1085050	CallExpression	_exit ( 4 )		1084218	0					
ANR	1085051	Callee	_exit		1084218	0					
ANR	1085052	Identifier	_exit		1084218	0					
ANR	1085053	ArgumentList	4		1084218	1					
ANR	1085054	Argument	4		1084218	0					
ANR	1085055	PrimaryExpression	4		1084218	0					
ANR	1085056	IfStatement	if ( tracking_gid_ptr != NULL )		1084218	5					
ANR	1085057	Condition	tracking_gid_ptr != NULL	7015:7:214945:214968	1084218	0	True				
ANR	1085058	EqualityExpression	tracking_gid_ptr != NULL		1084218	0		!=			
ANR	1085059	Identifier	tracking_gid_ptr		1084218	0					
ANR	1085060	Identifier	NULL		1084218	1					
ANR	1085061	CompoundStatement		284:33:11112:11112	1084218	1					
ANR	1085062	ExpressionStatement	set_user_tracking_gid ( * tracking_gid_ptr )	7016:4:214977:215017	1084218	0	True				
ANR	1085063	CallExpression	set_user_tracking_gid ( * tracking_gid_ptr )		1084218	0					
ANR	1085064	Callee	set_user_tracking_gid		1084218	0					
ANR	1085065	Identifier	set_user_tracking_gid		1084218	0					
ANR	1085066	ArgumentList	* tracking_gid_ptr		1084218	1					
ANR	1085067	Argument	* tracking_gid_ptr		1084218	0					
ANR	1085068	UnaryOperationExpression	* tracking_gid_ptr		1084218	0					
ANR	1085069	UnaryOperator	*		1084218	0					
ANR	1085070	Identifier	tracking_gid_ptr		1084218	1					
ANR	1085071	IdentifierDeclStatement	int openfds = getdtablesize ( ) ;	7021:1:215033:215062	1084218	19	True				
ANR	1085072	IdentifierDecl	openfds = getdtablesize ( )		1084218	0					
ANR	1085073	IdentifierDeclType	int		1084218	0					
ANR	1085074	Identifier	openfds		1084218	1					
ANR	1085075	AssignmentExpression	openfds = getdtablesize ( )		1084218	2		=			
ANR	1085076	Identifier	openfds		1084218	0					
ANR	1085077	CallExpression	getdtablesize ( )		1084218	1					
ANR	1085078	Callee	getdtablesize		1084218	0					
ANR	1085079	Identifier	getdtablesize		1084218	0					
ANR	1085080	ArgumentList			1084218	1					
ANR	1085081	IfStatement	if ( m_std )		1084218	20					
ANR	1085082	Condition	m_std	7024:6:215129:215133	1084218	0	True				
ANR	1085083	Identifier	m_std		1084218	0					
ANR	1085084	CompoundStatement		293:14:11278:11278	1084218	1					
ANR	1085085	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Re-mapping std(in|out|err) in child.\\n"" )"	7026:2:215142:215207	1084218	0	True				
ANR	1085086	CallExpression	"dprintf ( D_DAEMONCORE , ""Re-mapping std(in|out|err) in child.\\n"" )"		1084218	0					
ANR	1085087	Callee	dprintf		1084218	0					
ANR	1085088	Identifier	dprintf		1084218	0					
ANR	1085089	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1085090	Argument	D_DAEMONCORE		1084218	0					
ANR	1085091	Identifier	D_DAEMONCORE		1084218	0					
ANR	1085092	Argument	"""Re-mapping std(in|out|err) in child.\\n"""		1084218	1					
ANR	1085093	PrimaryExpression	"""Re-mapping std(in|out|err) in child.\\n"""		1084218	0					
ANR	1085094	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )		1084218	1					
ANR	1085095	ForInit	int i = 0 ;	7028:7:215217:215226	1084218	0	True				
ANR	1085096	IdentifierDeclStatement	int i = 0 ;		1084218	0					
ANR	1085097	IdentifierDecl	i = 0		1084218	0					
ANR	1085098	IdentifierDeclType	int		1084218	0					
ANR	1085099	Identifier	i		1084218	1					
ANR	1085100	AssignmentExpression	i = 0		1084218	2		=			
ANR	1085101	Identifier	i		1084218	0					
ANR	1085102	PrimaryExpression	0		1084218	1					
ANR	1085103	Condition	i < 3	7028:18:215228:215232	1084218	1	True				
ANR	1085104	RelationalExpression	i < 3		1084218	0		<			
ANR	1085105	Identifier	i		1084218	0					
ANR	1085106	PrimaryExpression	3		1084218	1					
ANR	1085107	PostIncDecOperationExpression	i ++	7028:25:215235:215237	1084218	2	True				
ANR	1085108	Identifier	i		1084218	0					
ANR	1085109	IncDec	++		1084218	1					
ANR	1085110	CompoundStatement		297:30:11381:11381	1084218	3					
ANR	1085111	IfStatement	if ( m_std [ i ] > - 1 )		1084218	0					
ANR	1085112	Condition	m_std [ i ] > - 1	7029:8:215250:215262	1084218	0	True				
ANR	1085113	RelationalExpression	m_std [ i ] > - 1		1084218	0		>			
ANR	1085114	ArrayIndexing	m_std [ i ]		1084218	0					
ANR	1085115	Identifier	m_std		1084218	0					
ANR	1085116	Identifier	i		1084218	1					
ANR	1085117	UnaryOperationExpression	- 1		1084218	1					
ANR	1085118	UnaryOperator	-		1084218	0					
ANR	1085119	PrimaryExpression	1		1084218	1					
ANR	1085120	CompoundStatement		299:4:11413:11430	1084218	1					
ANR	1085121	IdentifierDeclStatement	int fd = m_std [ i ] ;	7030:4:215272:215289	1084218	0	True				
ANR	1085122	IdentifierDecl	fd = m_std [ i ]		1084218	0					
ANR	1085123	IdentifierDeclType	int		1084218	0					
ANR	1085124	Identifier	fd		1084218	1					
ANR	1085125	AssignmentExpression	fd = m_std [ i ]		1084218	2		=			
ANR	1085126	Identifier	fd		1084218	0					
ANR	1085127	ArrayIndexing	m_std [ i ]		1084218	1					
ANR	1085128	Identifier	m_std		1084218	0					
ANR	1085129	Identifier	i		1084218	1					
ANR	1085130	IfStatement	if ( fd >= PIPE_INDEX_OFFSET )		1084218	1					
ANR	1085131	Condition	fd >= PIPE_INDEX_OFFSET	7031:8:215299:215321	1084218	0	True				
ANR	1085132	RelationalExpression	fd >= PIPE_INDEX_OFFSET		1084218	0		>=			
ANR	1085133	Identifier	fd		1084218	0					
ANR	1085134	Identifier	PIPE_INDEX_OFFSET		1084218	1					
ANR	1085135	CompoundStatement		304:5:11654:11688	1084218	1					
ANR	1085136	IdentifierDeclStatement	int index = fd - PIPE_INDEX_OFFSET ;	7035:5:215513:215547	1084218	0	True				
ANR	1085137	IdentifierDecl	index = fd - PIPE_INDEX_OFFSET		1084218	0					
ANR	1085138	IdentifierDeclType	int		1084218	0					
ANR	1085139	Identifier	index		1084218	1					
ANR	1085140	AssignmentExpression	index = fd - PIPE_INDEX_OFFSET		1084218	2		=			
ANR	1085141	Identifier	index		1084218	0					
ANR	1085142	AdditiveExpression	fd - PIPE_INDEX_OFFSET		1084218	1		-			
ANR	1085143	Identifier	fd		1084218	0					
ANR	1085144	Identifier	PIPE_INDEX_OFFSET		1084218	1					
ANR	1085145	ExpressionStatement	fd = ( * daemonCore -> pipeHandleTable ) [ index ]	7036:5:215554:215596	1084218	1	True				
ANR	1085146	AssignmentExpression	fd = ( * daemonCore -> pipeHandleTable ) [ index ]		1084218	0		=			
ANR	1085147	Identifier	fd		1084218	0					
ANR	1085148	ArrayIndexing	( * daemonCore -> pipeHandleTable ) [ index ]		1084218	1					
ANR	1085149	UnaryOperationExpression	* daemonCore -> pipeHandleTable		1084218	0					
ANR	1085150	UnaryOperator	*		1084218	0					
ANR	1085151	PtrMemberAccess	daemonCore -> pipeHandleTable		1084218	1					
ANR	1085152	Identifier	daemonCore		1084218	0					
ANR	1085153	Identifier	pipeHandleTable		1084218	1					
ANR	1085154	Identifier	index		1084218	1					
ANR	1085155	IfStatement	"if ( ( dup2 ( fd , i ) ) == - 1 )"		1084218	2					
ANR	1085156	Condition	"( dup2 ( fd , i ) ) == - 1"	7038:9:215613:215636	1084218	0	True				
ANR	1085157	EqualityExpression	"( dup2 ( fd , i ) ) == - 1"		1084218	0		==			
ANR	1085158	CallExpression	"dup2 ( fd , i )"		1084218	0					
ANR	1085159	Callee	dup2		1084218	0					
ANR	1085160	Identifier	dup2		1084218	0					
ANR	1085161	ArgumentList	fd		1084218	1					
ANR	1085162	Argument	fd		1084218	0					
ANR	1085163	Identifier	fd		1084218	0					
ANR	1085164	Argument	i		1084218	1					
ANR	1085165	Identifier	i		1084218	0					
ANR	1085166	UnaryOperationExpression	- 1		1084218	1					
ANR	1085167	UnaryOperator	-		1084218	0					
ANR	1085168	PrimaryExpression	1		1084218	1					
ANR	1085169	CompoundStatement		307:36:11781:11781	1084218	1					
ANR	1085170	ExpressionStatement	"dprintf ( D_ALWAYS , ""dup2 of m_std[%d] failed: %s (%d)\\n"" , i , strerror ( errno ) , errno )"	7039:5:215647:215764	1084218	0	True				
ANR	1085171	CallExpression	"dprintf ( D_ALWAYS , ""dup2 of m_std[%d] failed: %s (%d)\\n"" , i , strerror ( errno ) , errno )"		1084218	0					
ANR	1085172	Callee	dprintf		1084218	0					
ANR	1085173	Identifier	dprintf		1084218	0					
ANR	1085174	ArgumentList	D_ALWAYS		1084218	1					
ANR	1085175	Argument	D_ALWAYS		1084218	0					
ANR	1085176	Identifier	D_ALWAYS		1084218	0					
ANR	1085177	Argument	"""dup2 of m_std[%d] failed: %s (%d)\\n"""		1084218	1					
ANR	1085178	PrimaryExpression	"""dup2 of m_std[%d] failed: %s (%d)\\n"""		1084218	0					
ANR	1085179	Argument	i		1084218	2					
ANR	1085180	Identifier	i		1084218	0					
ANR	1085181	Argument	strerror ( errno )		1084218	3					
ANR	1085182	CallExpression	strerror ( errno )		1084218	0					
ANR	1085183	Callee	strerror		1084218	0					
ANR	1085184	Identifier	strerror		1084218	0					
ANR	1085185	ArgumentList	errno		1084218	1					
ANR	1085186	Argument	errno		1084218	0					
ANR	1085187	Identifier	errno		1084218	0					
ANR	1085188	Argument	errno		1084218	4					
ANR	1085189	Identifier	errno		1084218	0					
ANR	1085190	ElseStatement	else		1084218	0					
ANR	1085191	CompoundStatement		314:10:11923:11923	1084218	0					
ANR	1085192	ExpressionStatement	close ( i )	7048:4:215865:215875	1084218	0	True				
ANR	1085193	CallExpression	close ( i )		1084218	0					
ANR	1085194	Callee	close		1084218	0					
ANR	1085195	Identifier	close		1084218	0					
ANR	1085196	ArgumentList	i		1084218	1					
ANR	1085197	Argument	i		1084218	0					
ANR	1085198	Identifier	i		1084218	0					
ANR	1085199	ElseStatement	else		1084218	0					
ANR	1085200	CompoundStatement		333:2:12425:12442	1084218	0					
ANR	1085201	IdentifierDeclStatement	"MyString msg = ""Just closed standard file fd(s): "" ;"	7053:2:215899:215949	1084218	0	True				
ANR	1085202	IdentifierDecl	"msg = ""Just closed standard file fd(s): """		1084218	0					
ANR	1085203	IdentifierDeclType	MyString		1084218	0					
ANR	1085204	Identifier	msg		1084218	1					
ANR	1085205	AssignmentExpression	"msg = ""Just closed standard file fd(s): """		1084218	2		=			
ANR	1085206	Identifier	msg		1084218	0					
ANR	1085207	PrimaryExpression	"""Just closed standard file fd(s): """		1084218	1					
ANR	1085208	IdentifierDeclStatement	int num_closed = 0 ;	7063:2:216262:216280	1084218	1	True				
ANR	1085209	IdentifierDecl	num_closed = 0		1084218	0					
ANR	1085210	IdentifierDeclType	int		1084218	0					
ANR	1085211	Identifier	num_closed		1084218	1					
ANR	1085212	AssignmentExpression	num_closed = 0		1084218	2		=			
ANR	1085213	Identifier	num_closed		1084218	0					
ANR	1085214	PrimaryExpression	0		1084218	1					
ANR	1085215	IdentifierDeclStatement	int closed_fds [ 3 ] ;	7064:2:216284:216301	1084218	2	True				
ANR	1085216	IdentifierDecl	closed_fds [ 3 ]		1084218	0					
ANR	1085217	IdentifierDeclType	int [ 3 ]		1084218	0					
ANR	1085218	Identifier	closed_fds		1084218	1					
ANR	1085219	PrimaryExpression	3		1084218	2					
ANR	1085220	ForStatement	for ( int q = 0 ; ( q < openfds ) && ( q < 3 ) ; q ++ )		1084218	3					
ANR	1085221	ForInit	int q = 0 ;	7065:8:216311:216319	1084218	0	True				
ANR	1085222	IdentifierDeclStatement	int q = 0 ;		1084218	0					
ANR	1085223	IdentifierDecl	q = 0		1084218	0					
ANR	1085224	IdentifierDeclType	int		1084218	0					
ANR	1085225	Identifier	q		1084218	1					
ANR	1085226	AssignmentExpression	q = 0		1084218	2		=			
ANR	1085227	Identifier	q		1084218	0					
ANR	1085228	PrimaryExpression	0		1084218	1					
ANR	1085229	Condition	( q < openfds ) && ( q < 3 )	7065:18:216321:216340	1084218	1	True				
ANR	1085230	AndExpression	( q < openfds ) && ( q < 3 )		1084218	0		&&			
ANR	1085231	RelationalExpression	q < openfds		1084218	0		<			
ANR	1085232	Identifier	q		1084218	0					
ANR	1085233	Identifier	openfds		1084218	1					
ANR	1085234	RelationalExpression	q < 3		1084218	1		<			
ANR	1085235	Identifier	q		1084218	0					
ANR	1085236	PrimaryExpression	3		1084218	1					
ANR	1085237	PostIncDecOperationExpression	q ++	7065:41:216344:216346	1084218	2	True				
ANR	1085238	Identifier	q		1084218	0					
ANR	1085239	IncDec	++		1084218	1					
ANR	1085240	CompoundStatement		335:3:12496:12514	1084218	3					
ANR	1085241	IdentifierDeclStatement	bool found = FALSE ;	7066:3:216355:216373	1084218	0	True				
ANR	1085242	IdentifierDecl	found = FALSE		1084218	0					
ANR	1085243	IdentifierDeclType	bool		1084218	0					
ANR	1085244	Identifier	found		1084218	1					
ANR	1085245	AssignmentExpression	found = FALSE		1084218	2		=			
ANR	1085246	Identifier	FALSE		1084218	0					
ANR	1085247	Identifier	FALSE		1084218	1					
ANR	1085248	ForStatement	for ( int k = 0 ; k < m_numInheritFds ; k ++ )		1084218	1					
ANR	1085249	ForInit	int k = 0 ;	7067:9:216384:216392	1084218	0	True				
ANR	1085250	IdentifierDeclStatement	int k = 0 ;		1084218	0					
ANR	1085251	IdentifierDecl	k = 0		1084218	0					
ANR	1085252	IdentifierDeclType	int		1084218	0					
ANR	1085253	Identifier	k		1084218	1					
ANR	1085254	AssignmentExpression	k = 0		1084218	2		=			
ANR	1085255	Identifier	k		1084218	0					
ANR	1085256	PrimaryExpression	0		1084218	1					
ANR	1085257	Condition	k < m_numInheritFds	7067:19:216394:216412	1084218	1	True				
ANR	1085258	RelationalExpression	k < m_numInheritFds		1084218	0		<			
ANR	1085259	Identifier	k		1084218	0					
ANR	1085260	Identifier	m_numInheritFds		1084218	1					
ANR	1085261	PostIncDecOperationExpression	k ++	7067:41:216416:216418	1084218	2	True				
ANR	1085262	Identifier	k		1084218	0					
ANR	1085263	IncDec	++		1084218	1					
ANR	1085264	CompoundStatement		336:47:12563:12563	1084218	3					
ANR	1085265	IfStatement	if ( m_inheritFds [ k ] == q )		1084218	0					
ANR	1085266	Condition	m_inheritFds [ k ] == q	7068:9:216433:216452	1084218	0	True				
ANR	1085267	EqualityExpression	m_inheritFds [ k ] == q		1084218	0		==			
ANR	1085268	ArrayIndexing	m_inheritFds [ k ]		1084218	0					
ANR	1085269	Identifier	m_inheritFds		1084218	0					
ANR	1085270	Identifier	k		1084218	1					
ANR	1085271	Identifier	q		1084218	1					
ANR	1085272	CompoundStatement		337:32:12597:12597	1084218	1					
ANR	1085273	ExpressionStatement	found = TRUE	7069:5:216463:216475	1084218	0	True				
ANR	1085274	AssignmentExpression	found = TRUE		1084218	0		=			
ANR	1085275	Identifier	found		1084218	0					
ANR	1085276	Identifier	TRUE		1084218	1					
ANR	1085277	BreakStatement	break ;	7070:5:216482:216487	1084218	1	True				
ANR	1085278	IfStatement	if ( ( ! found ) && ( close ( q ) != - 1 ) )		1084218	2					
ANR	1085279	Condition	( ! found ) && ( close ( q ) != - 1 )	7074:8:216571:216606	1084218	0	True				
ANR	1085280	AndExpression	( ! found ) && ( close ( q ) != - 1 )		1084218	0		&&			
ANR	1085281	UnaryOperationExpression	! found		1084218	0					
ANR	1085282	UnaryOperator	!		1084218	0					
ANR	1085283	Identifier	found		1084218	1					
ANR	1085284	EqualityExpression	close ( q ) != - 1		1084218	1		!=			
ANR	1085285	CallExpression	close ( q )		1084218	0					
ANR	1085286	Callee	close		1084218	0					
ANR	1085287	Identifier	close		1084218	0					
ANR	1085288	ArgumentList	q		1084218	1					
ANR	1085289	Argument	q		1084218	0					
ANR	1085290	Identifier	q		1084218	0					
ANR	1085291	UnaryOperationExpression	- 1		1084218	1					
ANR	1085292	UnaryOperator	-		1084218	0					
ANR	1085293	PrimaryExpression	1		1084218	1					
ANR	1085294	CompoundStatement		343:47:12751:12751	1084218	1					
ANR	1085295	ExpressionStatement	closed_fds [ num_closed ++ ] = q	7075:4:216616:216644	1084218	0	True				
ANR	1085296	AssignmentExpression	closed_fds [ num_closed ++ ] = q		1084218	0		=			
ANR	1085297	ArrayIndexing	closed_fds [ num_closed ++ ]		1084218	0					
ANR	1085298	Identifier	closed_fds		1084218	0					
ANR	1085299	PostIncDecOperationExpression	num_closed ++		1084218	1					
ANR	1085300	Identifier	num_closed		1084218	0					
ANR	1085301	IncDec	++		1084218	1					
ANR	1085302	Identifier	q		1084218	1					
ANR	1085303	ExpressionStatement	msg += q	7076:4:216650:216658	1084218	1	True				
ANR	1085304	AssignmentExpression	msg += q		1084218	0		+=			
ANR	1085305	Identifier	msg		1084218	0					
ANR	1085306	Identifier	q		1084218	1					
ANR	1085307	ExpressionStatement	msg += ' '	7077:4:216664:216674	1084218	2	True				
ANR	1085308	AssignmentExpression	msg += ' '		1084218	0		+=			
ANR	1085309	Identifier	msg		1084218	0					
ANR	1085310	PrimaryExpression	' '		1084218	1					
ANR	1085311	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"	7080:2:216687:216731	1084218	4	True				
ANR	1085312	CallExpression	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"		1084218	0					
ANR	1085313	Callee	dprintf		1084218	0					
ANR	1085314	Identifier	dprintf		1084218	0					
ANR	1085315	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1085316	Argument	D_DAEMONCORE		1084218	0					
ANR	1085317	Identifier	D_DAEMONCORE		1084218	0					
ANR	1085318	Argument	"""%s\\n"""		1084218	1					
ANR	1085319	PrimaryExpression	"""%s\\n"""		1084218	0					
ANR	1085320	Argument	msg . Value ( )		1084218	2					
ANR	1085321	CallExpression	msg . Value ( )		1084218	0					
ANR	1085322	Callee	msg . Value		1084218	0					
ANR	1085323	MemberAccess	msg . Value		1084218	0					
ANR	1085324	Identifier	msg		1084218	0					
ANR	1085325	Identifier	Value		1084218	1					
ANR	1085326	ArgumentList			1084218	1					
ANR	1085327	IfStatement	if ( num_closed )		1084218	5					
ANR	1085328	Condition	num_closed	7083:7:216798:216807	1084218	0	True				
ANR	1085329	Identifier	num_closed		1084218	0					
ANR	1085330	CompoundStatement		353:3:12957:13016	1084218	1					
ANR	1085331	IdentifierDeclStatement	"int fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR ) ;"	7084:3:216816:216875	1084218	0	True				
ANR	1085332	IdentifierDecl	"fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		1084218	0					
ANR	1085333	IdentifierDeclType	int		1084218	0					
ANR	1085334	Identifier	fd_null		1084218	1					
ANR	1085335	AssignmentExpression	"fd_null = safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		1084218	2		=			
ANR	1085336	Identifier	fd_null		1084218	0					
ANR	1085337	CallExpression	"safe_open_wrapper_follow ( NULL_FILE , O_RDWR )"		1084218	1					
ANR	1085338	Callee	safe_open_wrapper_follow		1084218	0					
ANR	1085339	Identifier	safe_open_wrapper_follow		1084218	0					
ANR	1085340	ArgumentList	NULL_FILE		1084218	1					
ANR	1085341	Argument	NULL_FILE		1084218	0					
ANR	1085342	Identifier	NULL_FILE		1084218	0					
ANR	1085343	Argument	O_RDWR		1084218	1					
ANR	1085344	Identifier	O_RDWR		1084218	0					
ANR	1085345	IfStatement	if ( fd_null < 0 )		1084218	1					
ANR	1085346	Condition	fd_null < 0	7085:8:216885:216895	1084218	0	True				
ANR	1085347	RelationalExpression	fd_null < 0		1084218	0		<			
ANR	1085348	Identifier	fd_null		1084218	0					
ANR	1085349	PrimaryExpression	0		1084218	1					
ANR	1085350	CompoundStatement		354:22:13040:13040	1084218	1					
ANR	1085351	ExpressionStatement	"dprintf ( D_ALWAYS , ""Unable to open %s: %s\\n"" , NULL_FILE , strerror ( errno ) )"	7086:4:216905:216986	1084218	0	True				
ANR	1085352	CallExpression	"dprintf ( D_ALWAYS , ""Unable to open %s: %s\\n"" , NULL_FILE , strerror ( errno ) )"		1084218	0					
ANR	1085353	Callee	dprintf		1084218	0					
ANR	1085354	Identifier	dprintf		1084218	0					
ANR	1085355	ArgumentList	D_ALWAYS		1084218	1					
ANR	1085356	Argument	D_ALWAYS		1084218	0					
ANR	1085357	Identifier	D_ALWAYS		1084218	0					
ANR	1085358	Argument	"""Unable to open %s: %s\\n"""		1084218	1					
ANR	1085359	PrimaryExpression	"""Unable to open %s: %s\\n"""		1084218	0					
ANR	1085360	Argument	NULL_FILE		1084218	2					
ANR	1085361	Identifier	NULL_FILE		1084218	0					
ANR	1085362	Argument	strerror ( errno )		1084218	3					
ANR	1085363	CallExpression	strerror ( errno )		1084218	0					
ANR	1085364	Callee	strerror		1084218	0					
ANR	1085365	Identifier	strerror		1084218	0					
ANR	1085366	ArgumentList	errno		1084218	1					
ANR	1085367	Argument	errno		1084218	0					
ANR	1085368	Identifier	errno		1084218	0					
ANR	1085369	ElseStatement	else		1084218	0					
ANR	1085370	CompoundStatement		358:4:13145:13151	1084218	0					
ANR	1085371	IdentifierDeclStatement	int i ;	7089:4:217004:217010	1084218	0	True				
ANR	1085372	IdentifierDecl	i		1084218	0					
ANR	1085373	IdentifierDeclType	int		1084218	0					
ANR	1085374	Identifier	i		1084218	1					
ANR	1085375	ForStatement	for ( i = 0 ; i < num_closed ; i ++ )		1084218	1					
ANR	1085376	ForInit	i = 0 ;	7090:10:217022:217025	1084218	0	True				
ANR	1085377	AssignmentExpression	i = 0		1084218	0		=			
ANR	1085378	Identifier	i		1084218	0					
ANR	1085379	PrimaryExpression	0		1084218	1					
ANR	1085380	Condition	i < num_closed	7090:16:217028:217039	1084218	1	True				
ANR	1085381	RelationalExpression	i < num_closed		1084218	0		<			
ANR	1085382	Identifier	i		1084218	0					
ANR	1085383	Identifier	num_closed		1084218	1					
ANR	1085384	PostIncDecOperationExpression	i ++	7090:31:217043:217045	1084218	2	True				
ANR	1085385	Identifier	i		1084218	0					
ANR	1085386	IncDec	++		1084218	1					
ANR	1085387	CompoundStatement		359:37:13190:13190	1084218	3					
ANR	1085388	IfStatement	"if ( ( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 ) )"		1084218	0					
ANR	1085389	Condition	"( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 )"	7091:10:217061:217137	1084218	0	True				
ANR	1085390	AndExpression	"( closed_fds [ i ] != fd_null ) && ( dup2 ( fd_null , closed_fds [ i ] ) < 0 )"		1084218	0		&&			
ANR	1085391	EqualityExpression	closed_fds [ i ] != fd_null		1084218	0		!=			
ANR	1085392	ArrayIndexing	closed_fds [ i ]		1084218	0					
ANR	1085393	Identifier	closed_fds		1084218	0					
ANR	1085394	Identifier	i		1084218	1					
ANR	1085395	Identifier	fd_null		1084218	1					
ANR	1085396	RelationalExpression	"dup2 ( fd_null , closed_fds [ i ] ) < 0"		1084218	1		<			
ANR	1085397	CallExpression	"dup2 ( fd_null , closed_fds [ i ] )"		1084218	0					
ANR	1085398	Callee	dup2		1084218	0					
ANR	1085399	Identifier	dup2		1084218	0					
ANR	1085400	ArgumentList	fd_null		1084218	1					
ANR	1085401	Argument	fd_null		1084218	0					
ANR	1085402	Identifier	fd_null		1084218	0					
ANR	1085403	Argument	closed_fds [ i ]		1084218	1					
ANR	1085404	ArrayIndexing	closed_fds [ i ]		1084218	0					
ANR	1085405	Identifier	closed_fds		1084218	0					
ANR	1085406	Identifier	i		1084218	1					
ANR	1085407	PrimaryExpression	0		1084218	1					
ANR	1085408	CompoundStatement		361:48:13282:13282	1084218	1					
ANR	1085409	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error dup2()ing %s -> %d: %s\\n"" , NULL_FILE , closed_fds [ i ] , strerror ( errno ) )"	7093:6:217149:217272	1084218	0	True				
ANR	1085410	CallExpression	"dprintf ( D_ALWAYS , ""Error dup2()ing %s -> %d: %s\\n"" , NULL_FILE , closed_fds [ i ] , strerror ( errno ) )"		1084218	0					
ANR	1085411	Callee	dprintf		1084218	0					
ANR	1085412	Identifier	dprintf		1084218	0					
ANR	1085413	ArgumentList	D_ALWAYS		1084218	1					
ANR	1085414	Argument	D_ALWAYS		1084218	0					
ANR	1085415	Identifier	D_ALWAYS		1084218	0					
ANR	1085416	Argument	"""Error dup2()ing %s -> %d: %s\\n"""		1084218	1					
ANR	1085417	PrimaryExpression	"""Error dup2()ing %s -> %d: %s\\n"""		1084218	0					
ANR	1085418	Argument	NULL_FILE		1084218	2					
ANR	1085419	Identifier	NULL_FILE		1084218	0					
ANR	1085420	Argument	closed_fds [ i ]		1084218	3					
ANR	1085421	ArrayIndexing	closed_fds [ i ]		1084218	0					
ANR	1085422	Identifier	closed_fds		1084218	0					
ANR	1085423	Identifier	i		1084218	1					
ANR	1085424	Argument	strerror ( errno )		1084218	4					
ANR	1085425	CallExpression	strerror ( errno )		1084218	0					
ANR	1085426	Callee	strerror		1084218	0					
ANR	1085427	Identifier	strerror		1084218	0					
ANR	1085428	ArgumentList	errno		1084218	1					
ANR	1085429	Argument	errno		1084218	0					
ANR	1085430	Identifier	errno		1084218	0					
ANR	1085431	IfStatement	if ( fd_null > 2 )		1084218	2					
ANR	1085432	Condition	fd_null > 2	7100:9:217363:217373	1084218	0	True				
ANR	1085433	RelationalExpression	fd_null > 2		1084218	0		>			
ANR	1085434	Identifier	fd_null		1084218	0					
ANR	1085435	PrimaryExpression	2		1084218	1					
ANR	1085436	CompoundStatement		369:23:13518:13518	1084218	1					
ANR	1085437	ExpressionStatement	close ( fd_null )	7101:5:217384:217400	1084218	0	True				
ANR	1085438	CallExpression	close ( fd_null )		1084218	0					
ANR	1085439	Callee	close		1084218	0					
ANR	1085440	Identifier	close		1084218	0					
ANR	1085441	ArgumentList	fd_null		1084218	1					
ANR	1085442	Argument	fd_null		1084218	0					
ANR	1085443	Identifier	fd_null		1084218	0					
ANR	1085444	IfStatement	if ( m_nice_inc > 0 )		1084218	21					
ANR	1085445	Condition	m_nice_inc > 0	7109:5:217451:217464	1084218	0	True				
ANR	1085446	RelationalExpression	m_nice_inc > 0		1084218	0		>			
ANR	1085447	Identifier	m_nice_inc		1084218	0					
ANR	1085448	PrimaryExpression	0		1084218	1					
ANR	1085449	CompoundStatement		384:2:13738:13770	1084218	1					
ANR	1085450	IfStatement	if ( m_nice_inc > 19 )		1084218	0					
ANR	1085451	Condition	m_nice_inc > 19	7110:6:217476:217490	1084218	0	True				
ANR	1085452	RelationalExpression	m_nice_inc > 19		1084218	0		>			
ANR	1085453	Identifier	m_nice_inc		1084218	0					
ANR	1085454	PrimaryExpression	19		1084218	1					
ANR	1085455	CompoundStatement		379:24:13635:13635	1084218	1					
ANR	1085456	ExpressionStatement	m_nice_inc = 19	7111:3:217499:217514	1084218	0	True				
ANR	1085457	AssignmentExpression	m_nice_inc = 19		1084218	0		=			
ANR	1085458	Identifier	m_nice_inc		1084218	0					
ANR	1085459	PrimaryExpression	19		1084218	1					
ANR	1085460	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""calling nice(%d)\\n"" , m_nice_inc )"	7113:2:217522:217580	1084218	1	True				
ANR	1085461	CallExpression	"dprintf ( D_DAEMONCORE , ""calling nice(%d)\\n"" , m_nice_inc )"		1084218	0					
ANR	1085462	Callee	dprintf		1084218	0					
ANR	1085463	Identifier	dprintf		1084218	0					
ANR	1085464	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1085465	Argument	D_DAEMONCORE		1084218	0					
ANR	1085466	Identifier	D_DAEMONCORE		1084218	0					
ANR	1085467	Argument	"""calling nice(%d)\\n"""		1084218	1					
ANR	1085468	PrimaryExpression	"""calling nice(%d)\\n"""		1084218	0					
ANR	1085469	Argument	m_nice_inc		1084218	2					
ANR	1085470	Identifier	m_nice_inc		1084218	0					
ANR	1085471	ExpressionStatement	errno = 0	7114:2:217584:217593	1084218	2	True				
ANR	1085472	AssignmentExpression	errno = 0		1084218	0		=			
ANR	1085473	Identifier	errno		1084218	0					
ANR	1085474	PrimaryExpression	0		1084218	1					
ANR	1085475	IdentifierDeclStatement	int newnice = nice ( m_nice_inc ) ;	7115:2:217597:217629	1084218	3	True				
ANR	1085476	IdentifierDecl	newnice = nice ( m_nice_inc )		1084218	0					
ANR	1085477	IdentifierDeclType	int		1084218	0					
ANR	1085478	Identifier	newnice		1084218	1					
ANR	1085479	AssignmentExpression	newnice = nice ( m_nice_inc )		1084218	2		=			
ANR	1085480	Identifier	newnice		1084218	0					
ANR	1085481	CallExpression	nice ( m_nice_inc )		1084218	1					
ANR	1085482	Callee	nice		1084218	0					
ANR	1085483	Identifier	nice		1084218	0					
ANR	1085484	ArgumentList	m_nice_inc		1084218	1					
ANR	1085485	Argument	m_nice_inc		1084218	0					
ANR	1085486	Identifier	m_nice_inc		1084218	0					
ANR	1085487	IfStatement	if ( errno != 0 )		1084218	4					
ANR	1085488	Condition	errno != 0	7121:5:217909:217918	1084218	0	True				
ANR	1085489	EqualityExpression	errno != 0		1084218	0		!=			
ANR	1085490	Identifier	errno		1084218	0					
ANR	1085491	PrimaryExpression	0		1084218	1					
ANR	1085492	CompoundStatement		390:17:14062:14062	1084218	1					
ANR	1085493	ExpressionStatement	"dprintf ( D_ALWAYS , ""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"" , m_nice_inc , newnice , errno , strerror ( errno ) )"	7122:3:217926:218091	1084218	0	True				
ANR	1085494	CallExpression	"dprintf ( D_ALWAYS , ""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"" , m_nice_inc , newnice , errno , strerror ( errno ) )"		1084218	0					
ANR	1085495	Callee	dprintf		1084218	0					
ANR	1085496	Identifier	dprintf		1084218	0					
ANR	1085497	ArgumentList	D_ALWAYS		1084218	1					
ANR	1085498	Argument	D_ALWAYS		1084218	0					
ANR	1085499	Identifier	D_ALWAYS		1084218	0					
ANR	1085500	Argument	"""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"""		1084218	1					
ANR	1085501	PrimaryExpression	"""Warning: When attempting to exec a new process, failed to nice(%d): return code: %d, errno: %d %s\\n"""		1084218	0					
ANR	1085502	Argument	m_nice_inc		1084218	2					
ANR	1085503	Identifier	m_nice_inc		1084218	0					
ANR	1085504	Argument	newnice		1084218	3					
ANR	1085505	Identifier	newnice		1084218	0					
ANR	1085506	Argument	errno		1084218	4					
ANR	1085507	Identifier	errno		1084218	0					
ANR	1085508	Argument	strerror ( errno )		1084218	5					
ANR	1085509	CallExpression	strerror ( errno )		1084218	0					
ANR	1085510	Callee	strerror		1084218	0					
ANR	1085511	Identifier	strerror		1084218	0					
ANR	1085512	ArgumentList	errno		1084218	1					
ANR	1085513	Argument	errno		1084218	0					
ANR	1085514	Identifier	errno		1084218	0					
ANR	1085515	IfStatement	if ( m_affinity_mask )		1084218	22					
ANR	1085516	Condition	m_affinity_mask	7128:5:218167:218181	1084218	0	True				
ANR	1085517	Identifier	m_affinity_mask		1084218	0					
ANR	1085518	CompoundStatement		407:2:14637:14677	1084218	1					
ANR	1085519	IdentifierDeclStatement	cpu_set_t mask ;	7129:2:218188:218202	1084218	0	True				
ANR	1085520	IdentifierDecl	mask		1084218	0					
ANR	1085521	IdentifierDeclType	cpu_set_t		1084218	0					
ANR	1085522	Identifier	mask		1084218	1					
ANR	1085523	ExpressionStatement	CPU_ZERO ( & mask )	7130:2:218206:218221	1084218	1	True				
ANR	1085524	CallExpression	CPU_ZERO ( & mask )		1084218	0					
ANR	1085525	Callee	CPU_ZERO		1084218	0					
ANR	1085526	Identifier	CPU_ZERO		1084218	0					
ANR	1085527	ArgumentList	& mask		1084218	1					
ANR	1085528	Argument	& mask		1084218	0					
ANR	1085529	UnaryOperationExpression	& mask		1084218	0					
ANR	1085530	UnaryOperator	&		1084218	0					
ANR	1085531	Identifier	mask		1084218	1					
ANR	1085532	ForStatement	for ( int i = 1 ; i < m_affinity_mask [ 0 ] ; i ++ )		1084218	2					
ANR	1085533	ForInit	int i = 1 ;	7131:7:218230:218239	1084218	0	True				
ANR	1085534	IdentifierDeclStatement	int i = 1 ;		1084218	0					
ANR	1085535	IdentifierDecl	i = 1		1084218	0					
ANR	1085536	IdentifierDeclType	int		1084218	0					
ANR	1085537	Identifier	i		1084218	1					
ANR	1085538	AssignmentExpression	i = 1		1084218	2		=			
ANR	1085539	Identifier	i		1084218	0					
ANR	1085540	PrimaryExpression	1		1084218	1					
ANR	1085541	Condition	i < m_affinity_mask [ 0 ]	7131:18:218241:218262	1084218	1	True				
ANR	1085542	RelationalExpression	i < m_affinity_mask [ 0 ]		1084218	0		<			
ANR	1085543	Identifier	i		1084218	0					
ANR	1085544	ArrayIndexing	m_affinity_mask [ 0 ]		1084218	1					
ANR	1085545	Identifier	m_affinity_mask		1084218	0					
ANR	1085546	PrimaryExpression	0		1084218	1					
ANR	1085547	PostIncDecOperationExpression	i ++	7131:42:218265:218267	1084218	2	True				
ANR	1085548	Identifier	i		1084218	0					
ANR	1085549	IncDec	++		1084218	1					
ANR	1085550	CompoundStatement		400:47:14411:14411	1084218	3					
ANR	1085551	ExpressionStatement	"CPU_SET ( m_affinity_mask [ i ] , & mask )"	7132:3:218275:218309	1084218	0	True				
ANR	1085552	CallExpression	"CPU_SET ( m_affinity_mask [ i ] , & mask )"		1084218	0					
ANR	1085553	Callee	CPU_SET		1084218	0					
ANR	1085554	Identifier	CPU_SET		1084218	0					
ANR	1085555	ArgumentList	m_affinity_mask [ i ]		1084218	1					
ANR	1085556	Argument	m_affinity_mask [ i ]		1084218	0					
ANR	1085557	ArrayIndexing	m_affinity_mask [ i ]		1084218	0					
ANR	1085558	Identifier	m_affinity_mask		1084218	0					
ANR	1085559	Identifier	i		1084218	1					
ANR	1085560	Argument	& mask		1084218	1					
ANR	1085561	UnaryOperationExpression	& mask		1084218	0					
ANR	1085562	UnaryOperator	&		1084218	0					
ANR	1085563	Identifier	mask		1084218	1					
ANR	1085564	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Calling sched_setaffinity\\n"" )"	7134:2:218317:218368	1084218	3	True				
ANR	1085565	CallExpression	"dprintf ( D_FULLDEBUG , ""Calling sched_setaffinity\\n"" )"		1084218	0					
ANR	1085566	Callee	dprintf		1084218	0					
ANR	1085567	Identifier	dprintf		1084218	0					
ANR	1085568	ArgumentList	D_FULLDEBUG		1084218	1					
ANR	1085569	Argument	D_FULLDEBUG		1084218	0					
ANR	1085570	Identifier	D_FULLDEBUG		1084218	0					
ANR	1085571	Argument	"""Calling sched_setaffinity\\n"""		1084218	1					
ANR	1085572	PrimaryExpression	"""Calling sched_setaffinity\\n"""		1084218	0					
ANR	1085573	IdentifierDeclStatement	"int result = sched_setaffinity ( 0 , & mask ) ;"	7138:2:218496:218536	1084218	4	True				
ANR	1085574	IdentifierDecl	"result = sched_setaffinity ( 0 , & mask )"		1084218	0					
ANR	1085575	IdentifierDeclType	int		1084218	0					
ANR	1085576	Identifier	result		1084218	1					
ANR	1085577	AssignmentExpression	"result = sched_setaffinity ( 0 , & mask )"		1084218	2		=			
ANR	1085578	Identifier	result		1084218	0					
ANR	1085579	CallExpression	"sched_setaffinity ( 0 , & mask )"		1084218	1					
ANR	1085580	Callee	sched_setaffinity		1084218	0					
ANR	1085581	Identifier	sched_setaffinity		1084218	0					
ANR	1085582	ArgumentList	0		1084218	1					
ANR	1085583	Argument	0		1084218	0					
ANR	1085584	PrimaryExpression	0		1084218	0					
ANR	1085585	Argument	& mask		1084218	1					
ANR	1085586	UnaryOperationExpression	& mask		1084218	0					
ANR	1085587	UnaryOperator	&		1084218	0					
ANR	1085588	Identifier	mask		1084218	1					
ANR	1085589	IfStatement	if ( result != 0 )		1084218	5					
ANR	1085590	Condition	result != 0	7142:6:218615:218625	1084218	0	True				
ANR	1085591	EqualityExpression	result != 0		1084218	0		!=			
ANR	1085592	Identifier	result		1084218	0					
ANR	1085593	PrimaryExpression	0		1084218	1					
ANR	1085594	CompoundStatement		411:19:14769:14769	1084218	1					
ANR	1085595	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error calling sched_setaffinity: %d\\n"" , errno )"	7143:3:218633:218698	1084218	0	True				
ANR	1085596	CallExpression	"dprintf ( D_ALWAYS , ""Error calling sched_setaffinity: %d\\n"" , errno )"		1084218	0					
ANR	1085597	Callee	dprintf		1084218	0					
ANR	1085598	Identifier	dprintf		1084218	0					
ANR	1085599	ArgumentList	D_ALWAYS		1084218	1					
ANR	1085600	Argument	D_ALWAYS		1084218	0					
ANR	1085601	Identifier	D_ALWAYS		1084218	0					
ANR	1085602	Argument	"""Error calling sched_setaffinity: %d\\n"""		1084218	1					
ANR	1085603	PrimaryExpression	"""Error calling sched_setaffinity: %d\\n"""		1084218	0					
ANR	1085604	Argument	errno		1084218	2					
ANR	1085605	Identifier	errno		1084218	0					
ANR	1085606	IfStatement	if ( DebugFlags & D_DAEMONCORE )		1084218	23					
ANR	1085607	Condition	DebugFlags & D_DAEMONCORE	7148:5:218720:218744	1084218	0	True				
ANR	1085608	BitAndExpression	DebugFlags & D_DAEMONCORE		1084218	0		&			
ANR	1085609	Identifier	DebugFlags		1084218	0					
ANR	1085610	Identifier	D_DAEMONCORE		1084218	1					
ANR	1085611	CompoundStatement		420:2:15003:15045	1084218	1					
ANR	1085612	IdentifierDeclStatement	"MyString msg = ""Printing fds to inherit: "" ;"	7151:2:218862:218904	1084218	0	True				
ANR	1085613	IdentifierDecl	"msg = ""Printing fds to inherit: """		1084218	0					
ANR	1085614	IdentifierDeclType	MyString		1084218	0					
ANR	1085615	Identifier	msg		1084218	1					
ANR	1085616	AssignmentExpression	"msg = ""Printing fds to inherit: """		1084218	2		=			
ANR	1085617	Identifier	msg		1084218	0					
ANR	1085618	PrimaryExpression	"""Printing fds to inherit: """		1084218	1					
ANR	1085619	ForStatement	for ( int a = 0 ; a < m_numInheritFds ; a ++ )		1084218	1					
ANR	1085620	ForInit	int a = 0 ;	7152:8:218914:218922	1084218	0	True				
ANR	1085621	IdentifierDeclStatement	int a = 0 ;		1084218	0					
ANR	1085622	IdentifierDecl	a = 0		1084218	0					
ANR	1085623	IdentifierDeclType	int		1084218	0					
ANR	1085624	Identifier	a		1084218	1					
ANR	1085625	AssignmentExpression	a = 0		1084218	2		=			
ANR	1085626	Identifier	a		1084218	0					
ANR	1085627	PrimaryExpression	0		1084218	1					
ANR	1085628	Condition	a < m_numInheritFds	7152:18:218924:218940	1084218	1	True				
ANR	1085629	RelationalExpression	a < m_numInheritFds		1084218	0		<			
ANR	1085630	Identifier	a		1084218	0					
ANR	1085631	Identifier	m_numInheritFds		1084218	1					
ANR	1085632	PostIncDecOperationExpression	a ++	7152:38:218944:218946	1084218	2	True				
ANR	1085633	Identifier	a		1084218	0					
ANR	1085634	IncDec	++		1084218	1					
ANR	1085635	CompoundStatement		421:44:15091:15091	1084218	3					
ANR	1085636	ExpressionStatement	msg += m_inheritFds [ a ]	7153:3:218955:218977	1084218	0	True				
ANR	1085637	AssignmentExpression	msg += m_inheritFds [ a ]		1084218	0		+=			
ANR	1085638	Identifier	msg		1084218	0					
ANR	1085639	ArrayIndexing	m_inheritFds [ a ]		1084218	1					
ANR	1085640	Identifier	m_inheritFds		1084218	0					
ANR	1085641	Identifier	a		1084218	1					
ANR	1085642	ExpressionStatement	msg += ' '	7154:3:218982:218992	1084218	1	True				
ANR	1085643	AssignmentExpression	msg += ' '		1084218	0		+=			
ANR	1085644	Identifier	msg		1084218	0					
ANR	1085645	PrimaryExpression	' '		1084218	1					
ANR	1085646	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"	7156:2:219000:219044	1084218	2	True				
ANR	1085647	CallExpression	"dprintf ( D_DAEMONCORE , ""%s\\n"" , msg . Value ( ) )"		1084218	0					
ANR	1085648	Callee	dprintf		1084218	0					
ANR	1085649	Identifier	dprintf		1084218	0					
ANR	1085650	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1085651	Argument	D_DAEMONCORE		1084218	0					
ANR	1085652	Identifier	D_DAEMONCORE		1084218	0					
ANR	1085653	Argument	"""%s\\n"""		1084218	1					
ANR	1085654	PrimaryExpression	"""%s\\n"""		1084218	0					
ANR	1085655	Argument	msg . Value ( )		1084218	2					
ANR	1085656	CallExpression	msg . Value ( )		1084218	0					
ANR	1085657	Callee	msg . Value		1084218	0					
ANR	1085658	MemberAccess	msg . Value		1084218	0					
ANR	1085659	Identifier	msg		1084218	0					
ANR	1085660	Identifier	Value		1084218	1					
ANR	1085661	ArgumentList			1084218	1					
ANR	1085662	IfStatement	if ( m_core_hard_limit != NULL )		1084218	24					
ANR	1085663	Condition	m_core_hard_limit != NULL	7164:5:219370:219394	1084218	0	True				
ANR	1085664	EqualityExpression	m_core_hard_limit != NULL		1084218	0		!=			
ANR	1085665	Identifier	m_core_hard_limit		1084218	0					
ANR	1085666	Identifier	NULL		1084218	1					
ANR	1085667	CompoundStatement		433:32:15538:15538	1084218	1					
ANR	1085668	ExpressionStatement	"limit ( RLIMIT_CORE , * m_core_hard_limit , CONDOR_HARD_LIMIT , ""max core size"" )"	7165:2:219401:219475	1084218	0	True				
ANR	1085669	CallExpression	"limit ( RLIMIT_CORE , * m_core_hard_limit , CONDOR_HARD_LIMIT , ""max core size"" )"		1084218	0					
ANR	1085670	Callee	limit		1084218	0					
ANR	1085671	Identifier	limit		1084218	0					
ANR	1085672	ArgumentList	RLIMIT_CORE		1084218	1					
ANR	1085673	Argument	RLIMIT_CORE		1084218	0					
ANR	1085674	Identifier	RLIMIT_CORE		1084218	0					
ANR	1085675	Argument	* m_core_hard_limit		1084218	1					
ANR	1085676	UnaryOperationExpression	* m_core_hard_limit		1084218	0					
ANR	1085677	UnaryOperator	*		1084218	0					
ANR	1085678	Identifier	m_core_hard_limit		1084218	1					
ANR	1085679	Argument	CONDOR_HARD_LIMIT		1084218	2					
ANR	1085680	Identifier	CONDOR_HARD_LIMIT		1084218	0					
ANR	1085681	Argument	"""max core size"""		1084218	3					
ANR	1085682	PrimaryExpression	"""max core size"""		1084218	0					
ANR	1085683	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""About to exec \\""%s\\""\\n"" , m_executable_fullpath )"	7168:1:219482:219555	1084218	25	True				
ANR	1085684	CallExpression	"dprintf ( D_DAEMONCORE , ""About to exec \\""%s\\""\\n"" , m_executable_fullpath )"		1084218	0					
ANR	1085685	Callee	dprintf		1084218	0					
ANR	1085686	Identifier	dprintf		1084218	0					
ANR	1085687	ArgumentList	D_DAEMONCORE		1084218	1					
ANR	1085688	Argument	D_DAEMONCORE		1084218	0					
ANR	1085689	Identifier	D_DAEMONCORE		1084218	0					
ANR	1085690	Argument	"""About to exec \\""%s\\""\\n"""		1084218	1					
ANR	1085691	PrimaryExpression	"""About to exec \\""%s\\""\\n"""		1084218	0					
ANR	1085692	Argument	m_executable_fullpath		1084218	2					
ANR	1085693	Identifier	m_executable_fullpath		1084218	0					
ANR	1085694	ExpressionStatement	Generic_stop_logging ( )	7194:1:220487:220509	1084218	26	True				
ANR	1085695	CallExpression	Generic_stop_logging ( )		1084218	0					
ANR	1085696	Callee	Generic_stop_logging		1084218	0					
ANR	1085697	Identifier	Generic_stop_logging		1084218	0					
ANR	1085698	ArgumentList			1084218	1					
ANR	1085699	ExpressionStatement	dprintf_wrapup_fork_child ( )	7197:1:220520:220547	1084218	27	True				
ANR	1085700	CallExpression	dprintf_wrapup_fork_child ( )		1084218	0					
ANR	1085701	Callee	dprintf_wrapup_fork_child		1084218	0					
ANR	1085702	Identifier	dprintf_wrapup_fork_child		1084218	0					
ANR	1085703	ArgumentList			1084218	1					
ANR	1085704	IdentifierDeclStatement	bool found ;	7199:1:220551:220561	1084218	28	True				
ANR	1085705	IdentifierDecl	found		1084218	0					
ANR	1085706	IdentifierDeclType	bool		1084218	0					
ANR	1085707	Identifier	found		1084218	1					
ANR	1085708	ForStatement	for ( int j = 3 ; j < openfds ; j ++ )		1084218	29					
ANR	1085709	ForInit	int j = 3 ;	7200:7:220570:220578	1084218	0	True				
ANR	1085710	IdentifierDeclStatement	int j = 3 ;		1084218	0					
ANR	1085711	IdentifierDecl	j = 3		1084218	0					
ANR	1085712	IdentifierDeclType	int		1084218	0					
ANR	1085713	Identifier	j		1084218	1					
ANR	1085714	AssignmentExpression	j = 3		1084218	2		=			
ANR	1085715	Identifier	j		1084218	0					
ANR	1085716	PrimaryExpression	3		1084218	1					
ANR	1085717	Condition	j < openfds	7200:17:220580:220590	1084218	1	True				
ANR	1085718	RelationalExpression	j < openfds		1084218	0		<			
ANR	1085719	Identifier	j		1084218	0					
ANR	1085720	Identifier	openfds		1084218	1					
ANR	1085721	PostIncDecOperationExpression	j ++	7200:31:220594:220596	1084218	2	True				
ANR	1085722	Identifier	j		1084218	0					
ANR	1085723	IncDec	++		1084218	1					
ANR	1085724	CompoundStatement		469:37:16741:16741	1084218	3					
ANR	1085725	IfStatement	if ( j == m_errorpipe [ 1 ] )		1084218	0					
ANR	1085726	Condition	j == m_errorpipe [ 1 ]	7201:7:220609:220627	1084218	0	True				
ANR	1085727	EqualityExpression	j == m_errorpipe [ 1 ]		1084218	0		==			
ANR	1085728	Identifier	j		1084218	0					
ANR	1085729	ArrayIndexing	m_errorpipe [ 1 ]		1084218	1					
ANR	1085730	Identifier	m_errorpipe		1084218	0					
ANR	1085731	PrimaryExpression	1		1084218	1					
ANR	1085732	ContinueStatement	continue ;	7201:29:220631:220639	1084218	1	True				
ANR	1085733	ExpressionStatement	found = FALSE	7203:2:220674:220687	1084218	1	True				
ANR	1085734	AssignmentExpression	found = FALSE		1084218	0		=			
ANR	1085735	Identifier	found		1084218	0					
ANR	1085736	Identifier	FALSE		1084218	1					
ANR	1085737	ForStatement	for ( int k = 0 ; k < m_numInheritFds ; k ++ )		1084218	2					
ANR	1085738	ForInit	int k = 0 ;	7204:8:220697:220705	1084218	0	True				
ANR	1085739	IdentifierDeclStatement	int k = 0 ;		1084218	0					
ANR	1085740	IdentifierDecl	k = 0		1084218	0					
ANR	1085741	IdentifierDeclType	int		1084218	0					
ANR	1085742	Identifier	k		1084218	1					
ANR	1085743	AssignmentExpression	k = 0		1084218	2		=			
ANR	1085744	Identifier	k		1084218	0					
ANR	1085745	PrimaryExpression	0		1084218	1					
ANR	1085746	Condition	k < m_numInheritFds	7204:18:220707:220725	1084218	1	True				
ANR	1085747	RelationalExpression	k < m_numInheritFds		1084218	0		<			
ANR	1085748	Identifier	k		1084218	0					
ANR	1085749	Identifier	m_numInheritFds		1084218	1					
ANR	1085750	PostIncDecOperationExpression	k ++	7204:40:220729:220731	1084218	2	True				
ANR	1085751	Identifier	k		1084218	0					
ANR	1085752	IncDec	++		1084218	1					
ANR	1085753	CompoundStatement		473:46:16876:16876	1084218	3					
ANR	1085754	IfStatement	if ( m_inheritFds [ k ] == j )		1084218	0					
ANR	1085755	Condition	m_inheritFds [ k ] == j	7205:8:220745:220764	1084218	0	True				
ANR	1085756	EqualityExpression	m_inheritFds [ k ] == j		1084218	0		==			
ANR	1085757	ArrayIndexing	m_inheritFds [ k ]		1084218	0					
ANR	1085758	Identifier	m_inheritFds		1084218	0					
ANR	1085759	Identifier	k		1084218	1					
ANR	1085760	Identifier	j		1084218	1					
ANR	1085761	CompoundStatement		474:31:16909:16909	1084218	1					
ANR	1085762	ExpressionStatement	found = TRUE	7206:4:220774:220786	1084218	0	True				
ANR	1085763	AssignmentExpression	found = TRUE		1084218	0		=			
ANR	1085764	Identifier	found		1084218	0					
ANR	1085765	Identifier	TRUE		1084218	1					
ANR	1085766	BreakStatement	break ;	7207:4:220792:220797	1084218	1	True				
ANR	1085767	IfStatement	if ( ! found )		1084218	3					
ANR	1085768	Condition	! found	7211:6:220815:220820	1084218	0	True				
ANR	1085769	UnaryOperationExpression	! found		1084218	0					
ANR	1085770	UnaryOperator	!		1084218	0					
ANR	1085771	Identifier	found		1084218	1					
ANR	1085772	CompoundStatement		480:15:16965:16965	1084218	1					
ANR	1085773	ExpressionStatement	close ( j )	7212:3:220829:220839	1084218	0	True				
ANR	1085774	CallExpression	close ( j )		1084218	0					
ANR	1085775	Callee	close		1084218	0					
ANR	1085776	Identifier	close		1084218	0					
ANR	1085777	ArgumentList	j		1084218	1					
ANR	1085778	Argument	j		1084218	0					
ANR	1085779	Identifier	j		1084218	0					
ANR	1085780	IfStatement	if ( m_priv != PRIV_UNKNOWN )		1084218	30					
ANR	1085781	Condition	m_priv != PRIV_UNKNOWN	7217:6:220899:220920	1084218	0	True				
ANR	1085782	EqualityExpression	m_priv != PRIV_UNKNOWN		1084218	0		!=			
ANR	1085783	Identifier	m_priv		1084218	0					
ANR	1085784	Identifier	PRIV_UNKNOWN		1084218	1					
ANR	1085785	CompoundStatement		486:31:17065:17065	1084218	1					
ANR	1085786	ExpressionStatement	set_priv_no_memory_changes ( m_priv )	7223:2:221242:221278	1084218	0	True				
ANR	1085787	CallExpression	set_priv_no_memory_changes ( m_priv )		1084218	0					
ANR	1085788	Callee	set_priv_no_memory_changes		1084218	0					
ANR	1085789	Identifier	set_priv_no_memory_changes		1084218	0					
ANR	1085790	ArgumentList	m_priv		1084218	1					
ANR	1085791	Argument	m_priv		1084218	0					
ANR	1085792	Identifier	m_priv		1084218	0					
ANR	1085793	ExpressionStatement	unset_user_tracking_gid ( )	7228:2:221438:221463	1084218	1	True				
ANR	1085794	CallExpression	unset_user_tracking_gid ( )		1084218	0					
ANR	1085795	Callee	unset_user_tracking_gid		1084218	0					
ANR	1085796	Identifier	unset_user_tracking_gid		1084218	0					
ANR	1085797	ArgumentList			1084218	1					
ANR	1085798	IfStatement	if ( m_priv != PRIV_ROOT )		1084218	31					
ANR	1085799	Condition	m_priv != PRIV_ROOT	7237:6:221758:221776	1084218	0	True				
ANR	1085800	EqualityExpression	m_priv != PRIV_ROOT		1084218	0		!=			
ANR	1085801	Identifier	m_priv		1084218	0					
ANR	1085802	Identifier	PRIV_ROOT		1084218	1					
ANR	1085803	CompoundStatement		506:28:17921:17921	1084218	1					
ANR	1085804	IfStatement	if ( getuid ( ) == 0 )		1084218	0					
ANR	1085805	Condition	getuid ( ) == 0	7239:6:221843:221855	1084218	0	True				
ANR	1085806	EqualityExpression	getuid ( ) == 0		1084218	0		==			
ANR	1085807	CallExpression	getuid ( )		1084218	0					
ANR	1085808	Callee	getuid		1084218	0					
ANR	1085809	Identifier	getuid		1084218	0					
ANR	1085810	ArgumentList			1084218	1					
ANR	1085811	PrimaryExpression	0		1084218	1					
ANR	1085812	CompoundStatement		509:3:18005:18052	1084218	1					
ANR	1085813	IdentifierDeclStatement	int priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT ;	7240:3:221864:221911	1084218	0	True				
ANR	1085814	IdentifierDecl	priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT		1084218	0					
ANR	1085815	IdentifierDeclType	int		1084218	0					
ANR	1085816	Identifier	priv_errno		1084218	1					
ANR	1085817	AssignmentExpression	priv_errno = DaemonCore :: ERRNO_EXEC_AS_ROOT		1084218	2		=			
ANR	1085818	Identifier	DaemonCore :: ERRNO_EXEC_AS_ROOT		1084218	0					
ANR	1085819	Identifier	DaemonCore :: ERRNO_EXEC_AS_ROOT		1084218	1					
ANR	1085820	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & priv_errno , sizeof ( priv_errno ) )"	7241:3:221916:221970	1084218	1	True				
ANR	1085821	CallExpression	"write ( m_errorpipe [ 1 ] , & priv_errno , sizeof ( priv_errno ) )"		1084218	0					
ANR	1085822	Callee	write		1084218	0					
ANR	1085823	Identifier	write		1084218	0					
ANR	1085824	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1085825	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1085826	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1085827	Identifier	m_errorpipe		1084218	0					
ANR	1085828	PrimaryExpression	1		1084218	1					
ANR	1085829	Argument	& priv_errno		1084218	1					
ANR	1085830	UnaryOperationExpression	& priv_errno		1084218	0					
ANR	1085831	UnaryOperator	&		1084218	0					
ANR	1085832	Identifier	priv_errno		1084218	1					
ANR	1085833	Argument	sizeof ( priv_errno )		1084218	2					
ANR	1085834	SizeofExpression	sizeof ( priv_errno )		1084218	0					
ANR	1085835	Sizeof	sizeof		1084218	0					
ANR	1085836	SizeofOperand	priv_errno		1084218	1					
ANR	1085837	ExpressionStatement	_exit ( 4 )	7242:3:221975:221983	1084218	2	True				
ANR	1085838	CallExpression	_exit ( 4 )		1084218	0					
ANR	1085839	Callee	_exit		1084218	0					
ANR	1085840	Identifier	_exit		1084218	0					
ANR	1085841	ArgumentList	4		1084218	1					
ANR	1085842	Argument	4		1084218	0					
ANR	1085843	PrimaryExpression	4		1084218	0					
ANR	1085844	IfStatement	if ( m_cwd && m_cwd [ 0 ] )		1084218	32					
ANR	1085845	Condition	m_cwd && m_cwd [ 0 ]	7247:6:222057:222073	1084218	0	True				
ANR	1085846	AndExpression	m_cwd && m_cwd [ 0 ]		1084218	0		&&			
ANR	1085847	Identifier	m_cwd		1084218	0					
ANR	1085848	ArrayIndexing	m_cwd [ 0 ]		1084218	1					
ANR	1085849	Identifier	m_cwd		1084218	0					
ANR	1085850	PrimaryExpression	0		1084218	1					
ANR	1085851	CompoundStatement		516:26:18218:18218	1084218	1					
ANR	1085852	IfStatement	if ( chdir ( m_cwd ) == - 1 )		1084218	0					
ANR	1085853	Condition	chdir ( m_cwd ) == - 1	7248:6:222085:222102	1084218	0	True				
ANR	1085854	EqualityExpression	chdir ( m_cwd ) == - 1		1084218	0		==			
ANR	1085855	CallExpression	chdir ( m_cwd )		1084218	0					
ANR	1085856	Callee	chdir		1084218	0					
ANR	1085857	Identifier	chdir		1084218	0					
ANR	1085858	ArgumentList	m_cwd		1084218	1					
ANR	1085859	Argument	m_cwd		1084218	0					
ANR	1085860	Identifier	m_cwd		1084218	0					
ANR	1085861	UnaryOperationExpression	- 1		1084218	1					
ANR	1085862	UnaryOperator	-		1084218	0					
ANR	1085863	PrimaryExpression	1		1084218	1					
ANR	1085864	CompoundStatement		517:27:18247:18247	1084218	1					
ANR	1085865	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7251:3:222208:222252	1084218	0	True				
ANR	1085866	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1085867	Callee	write		1084218	0					
ANR	1085868	Identifier	write		1084218	0					
ANR	1085869	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1085870	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1085871	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1085872	Identifier	m_errorpipe		1084218	0					
ANR	1085873	PrimaryExpression	1		1084218	1					
ANR	1085874	Argument	& errno		1084218	1					
ANR	1085875	UnaryOperationExpression	& errno		1084218	0					
ANR	1085876	UnaryOperator	&		1084218	0					
ANR	1085877	Identifier	errno		1084218	1					
ANR	1085878	Argument	sizeof ( errno )		1084218	2					
ANR	1085879	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1085880	Sizeof	sizeof		1084218	0					
ANR	1085881	SizeofOperand	errno		1084218	1					
ANR	1085882	ExpressionStatement	_exit ( errno )	7252:3:222257:222269	1084218	1	True				
ANR	1085883	CallExpression	_exit ( errno )		1084218	0					
ANR	1085884	Callee	_exit		1084218	0					
ANR	1085885	Identifier	_exit		1084218	0					
ANR	1085886	ArgumentList	errno		1084218	1					
ANR	1085887	Argument	errno		1084218	0					
ANR	1085888	Identifier	errno		1084218	0					
ANR	1085889	IfStatement	if ( ! m_want_command_port )		1084218	33					
ANR	1085890	Condition	! m_want_command_port	7258:6:222415:222434	1084218	0	True				
ANR	1085891	UnaryOperationExpression	! m_want_command_port		1084218	0					
ANR	1085892	UnaryOperator	!		1084218	0					
ANR	1085893	Identifier	m_want_command_port		1084218	1					
ANR	1085894	CompoundStatement		529:2:18623:18642	1084218	1					
ANR	1085895	IdentifierDeclStatement	const sigset_t * new_mask = m_sigmask ;	7259:2:222442:222478	1084218	0	True				
ANR	1085896	IdentifierDecl	* new_mask = m_sigmask		1084218	0					
ANR	1085897	IdentifierDeclType	const sigset_t *		1084218	0					
ANR	1085898	Identifier	new_mask		1084218	1					
ANR	1085899	AssignmentExpression	* new_mask = m_sigmask		1084218	2		=			
ANR	1085900	Identifier	m_sigmask		1084218	0					
ANR	1085901	Identifier	m_sigmask		1084218	1					
ANR	1085902	IdentifierDeclStatement	sigset_t empty_mask ;	7260:2:222482:222501	1084218	1	True				
ANR	1085903	IdentifierDecl	empty_mask		1084218	0					
ANR	1085904	IdentifierDeclType	sigset_t		1084218	0					
ANR	1085905	Identifier	empty_mask		1084218	1					
ANR	1085906	IfStatement	if ( new_mask == NULL )		1084218	2					
ANR	1085907	Condition	new_mask == NULL	7261:6:222509:222524	1084218	0	True				
ANR	1085908	EqualityExpression	new_mask == NULL		1084218	0		==			
ANR	1085909	Identifier	new_mask		1084218	0					
ANR	1085910	Identifier	NULL		1084218	1					
ANR	1085911	CompoundStatement		530:24:18668:18668	1084218	1					
ANR	1085912	ExpressionStatement	sigemptyset ( & empty_mask )	7262:3:222532:222556	1084218	0	True				
ANR	1085913	CallExpression	sigemptyset ( & empty_mask )		1084218	0					
ANR	1085914	Callee	sigemptyset		1084218	0					
ANR	1085915	Identifier	sigemptyset		1084218	0					
ANR	1085916	ArgumentList	& empty_mask		1084218	1					
ANR	1085917	Argument	& empty_mask		1084218	0					
ANR	1085918	UnaryOperationExpression	& empty_mask		1084218	0					
ANR	1085919	UnaryOperator	&		1084218	0					
ANR	1085920	Identifier	empty_mask		1084218	1					
ANR	1085921	ExpressionStatement	new_mask = & empty_mask	7263:3:222561:222583	1084218	1	True				
ANR	1085922	AssignmentExpression	new_mask = & empty_mask		1084218	0		=			
ANR	1085923	Identifier	new_mask		1084218	0					
ANR	1085924	UnaryOperationExpression	& empty_mask		1084218	1					
ANR	1085925	UnaryOperator	&		1084218	0					
ANR	1085926	Identifier	empty_mask		1084218	1					
ANR	1085927	IfStatement	"if ( sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1 )"		1084218	3					
ANR	1085928	Condition	"sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1"	7265:6:222595:222640	1084218	0	True				
ANR	1085929	EqualityExpression	"sigprocmask ( SIG_SETMASK , new_mask , NULL ) == - 1"		1084218	0		==			
ANR	1085930	CallExpression	"sigprocmask ( SIG_SETMASK , new_mask , NULL )"		1084218	0					
ANR	1085931	Callee	sigprocmask		1084218	0					
ANR	1085932	Identifier	sigprocmask		1084218	0					
ANR	1085933	ArgumentList	SIG_SETMASK		1084218	1					
ANR	1085934	Argument	SIG_SETMASK		1084218	0					
ANR	1085935	Identifier	SIG_SETMASK		1084218	0					
ANR	1085936	Argument	new_mask		1084218	1					
ANR	1085937	Identifier	new_mask		1084218	0					
ANR	1085938	Argument	NULL		1084218	2					
ANR	1085939	Identifier	NULL		1084218	0					
ANR	1085940	UnaryOperationExpression	- 1		1084218	1					
ANR	1085941	UnaryOperator	-		1084218	0					
ANR	1085942	PrimaryExpression	1		1084218	1					
ANR	1085943	CompoundStatement		534:54:18784:18784	1084218	1					
ANR	1085944	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7266:3:222648:222692	1084218	0	True				
ANR	1085945	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1085946	Callee	write		1084218	0					
ANR	1085947	Identifier	write		1084218	0					
ANR	1085948	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1085949	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1085950	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1085951	Identifier	m_errorpipe		1084218	0					
ANR	1085952	PrimaryExpression	1		1084218	1					
ANR	1085953	Argument	& errno		1084218	1					
ANR	1085954	UnaryOperationExpression	& errno		1084218	0					
ANR	1085955	UnaryOperator	&		1084218	0					
ANR	1085956	Identifier	errno		1084218	1					
ANR	1085957	Argument	sizeof ( errno )		1084218	2					
ANR	1085958	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1085959	Sizeof	sizeof		1084218	0					
ANR	1085960	SizeofOperand	errno		1084218	1					
ANR	1085961	ExpressionStatement	_exit ( errno )	7267:3:222697:222709	1084218	1	True				
ANR	1085962	CallExpression	_exit ( errno )		1084218	0					
ANR	1085963	Callee	_exit		1084218	0					
ANR	1085964	Identifier	_exit		1084218	0					
ANR	1085965	ArgumentList	errno		1084218	1					
ANR	1085966	Argument	errno		1084218	0					
ANR	1085967	Identifier	errno		1084218	0					
ANR	1085968	IfStatement	if ( HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask ) )		1084218	34					
ANR	1085969	Condition	HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask )	7272:5:222759:222802	1084218	0	True				
ANR	1085970	CallExpression	HAS_DCJOBOPT_SUSPEND_ON_EXEC ( m_job_opt_mask )		1084218	0					
ANR	1085971	Callee	HAS_DCJOBOPT_SUSPEND_ON_EXEC		1084218	0					
ANR	1085972	Identifier	HAS_DCJOBOPT_SUSPEND_ON_EXEC		1084218	0					
ANR	1085973	ArgumentList	m_job_opt_mask		1084218	1					
ANR	1085974	Argument	m_job_opt_mask		1084218	0					
ANR	1085975	Identifier	m_job_opt_mask		1084218	0					
ANR	1085976	CompoundStatement		541:52:18947:18947	1084218	1					
ANR	1085977	IfStatement	"if ( ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1 )"		1084218	0					
ANR	1085978	Condition	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1"	7273:5:222813:222849	1084218	0	True				
ANR	1085979	EqualityExpression	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 ) == - 1"		1084218	0		==			
ANR	1085980	CallExpression	"ptrace ( PTRACE_TRACEME , 0 , 0 , 0 )"		1084218	0					
ANR	1085981	Callee	ptrace		1084218	0					
ANR	1085982	Identifier	ptrace		1084218	0					
ANR	1085983	ArgumentList	PTRACE_TRACEME		1084218	1					
ANR	1085984	Argument	PTRACE_TRACEME		1084218	0					
ANR	1085985	Identifier	PTRACE_TRACEME		1084218	0					
ANR	1085986	Argument	0		1084218	1					
ANR	1085987	PrimaryExpression	0		1084218	0					
ANR	1085988	Argument	0		1084218	2					
ANR	1085989	PrimaryExpression	0		1084218	0					
ANR	1085990	Argument	0		1084218	3					
ANR	1085991	PrimaryExpression	0		1084218	0					
ANR	1085992	UnaryOperationExpression	- 1		1084218	1					
ANR	1085993	UnaryOperator	-		1084218	0					
ANR	1085994	PrimaryExpression	1		1084218	1					
ANR	1085995	CompoundStatement		542:44:18993:18993	1084218	1					
ANR	1085996	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7274:3:222857:222901	1084218	0	True				
ANR	1085997	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1085998	Callee	write		1084218	0					
ANR	1085999	Identifier	write		1084218	0					
ANR	1086000	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1086001	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1086002	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1086003	Identifier	m_errorpipe		1084218	0					
ANR	1086004	PrimaryExpression	1		1084218	1					
ANR	1086005	Argument	& errno		1084218	1					
ANR	1086006	UnaryOperationExpression	& errno		1084218	0					
ANR	1086007	UnaryOperator	&		1084218	0					
ANR	1086008	Identifier	errno		1084218	1					
ANR	1086009	Argument	sizeof ( errno )		1084218	2					
ANR	1086010	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1086011	Sizeof	sizeof		1084218	0					
ANR	1086012	SizeofOperand	errno		1084218	1					
ANR	1086013	ExpressionStatement	_exit ( errno )	7275:3:222906:222919	1084218	1	True				
ANR	1086014	CallExpression	_exit ( errno )		1084218	0					
ANR	1086015	Callee	_exit		1084218	0					
ANR	1086016	Identifier	_exit		1084218	0					
ANR	1086017	ArgumentList	errno		1084218	1					
ANR	1086018	Argument	errno		1084218	0					
ANR	1086019	Identifier	errno		1084218	0					
ANR	1086020	ExpressionStatement	pidenvid_optimize_final_env ( m_unix_env )	7281:1:222938:222977	1084218	35	True				
ANR	1086021	CallExpression	pidenvid_optimize_final_env ( m_unix_env )		1084218	0					
ANR	1086022	Callee	pidenvid_optimize_final_env		1084218	0					
ANR	1086023	Identifier	pidenvid_optimize_final_env		1084218	0					
ANR	1086024	ArgumentList	m_unix_env		1084218	1					
ANR	1086025	Argument	m_unix_env		1084218	0					
ANR	1086026	Identifier	m_unix_env		1084218	0					
ANR	1086027	IdentifierDeclStatement	int exec_results ;	7284:1:223008:223024	1084218	36	True				
ANR	1086028	IdentifierDecl	exec_results		1084218	0					
ANR	1086029	IdentifierDeclType	int		1084218	0					
ANR	1086030	Identifier	exec_results		1084218	1					
ANR	1086031	ExpressionStatement	"exec_results = execve ( m_executable_fullpath , m_unix_args , m_unix_env )"	7285:1:223027:223097	1084218	37	True				
ANR	1086032	AssignmentExpression	"exec_results = execve ( m_executable_fullpath , m_unix_args , m_unix_env )"		1084218	0		=			
ANR	1086033	Identifier	exec_results		1084218	0					
ANR	1086034	CallExpression	"execve ( m_executable_fullpath , m_unix_args , m_unix_env )"		1084218	1					
ANR	1086035	Callee	execve		1084218	0					
ANR	1086036	Identifier	execve		1084218	0					
ANR	1086037	ArgumentList	m_executable_fullpath		1084218	1					
ANR	1086038	Argument	m_executable_fullpath		1084218	0					
ANR	1086039	Identifier	m_executable_fullpath		1084218	0					
ANR	1086040	Argument	m_unix_args		1084218	1					
ANR	1086041	Identifier	m_unix_args		1084218	0					
ANR	1086042	Argument	m_unix_env		1084218	2					
ANR	1086043	Identifier	m_unix_env		1084218	0					
ANR	1086044	IfStatement	if ( exec_results == - 1 )		1084218	38					
ANR	1086045	Condition	exec_results == - 1	7287:5:223105:223122	1084218	0	True				
ANR	1086046	EqualityExpression	exec_results == - 1		1084218	0		==			
ANR	1086047	Identifier	exec_results		1084218	0					
ANR	1086048	UnaryOperationExpression	- 1		1084218	1					
ANR	1086049	UnaryOperator	-		1084218	0					
ANR	1086050	PrimaryExpression	1		1084218	1					
ANR	1086051	CompoundStatement		556:26:19267:19267	1084218	1					
ANR	1086052	ExpressionStatement	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"	7292:2:223305:223349	1084218	0	True				
ANR	1086053	CallExpression	"write ( m_errorpipe [ 1 ] , & errno , sizeof ( errno ) )"		1084218	0					
ANR	1086054	Callee	write		1084218	0					
ANR	1086055	Identifier	write		1084218	0					
ANR	1086056	ArgumentList	m_errorpipe [ 1 ]		1084218	1					
ANR	1086057	Argument	m_errorpipe [ 1 ]		1084218	0					
ANR	1086058	ArrayIndexing	m_errorpipe [ 1 ]		1084218	0					
ANR	1086059	Identifier	m_errorpipe		1084218	0					
ANR	1086060	PrimaryExpression	1		1084218	1					
ANR	1086061	Argument	& errno		1084218	1					
ANR	1086062	UnaryOperationExpression	& errno		1084218	0					
ANR	1086063	UnaryOperator	&		1084218	0					
ANR	1086064	Identifier	errno		1084218	1					
ANR	1086065	Argument	sizeof ( errno )		1084218	2					
ANR	1086066	SizeofExpression	sizeof ( errno )		1084218	0					
ANR	1086067	Sizeof	sizeof		1084218	0					
ANR	1086068	SizeofOperand	errno		1084218	1					
ANR	1086069	ExpressionStatement	_exit ( errno )	7293:2:223353:223365	1084218	1	True				
ANR	1086070	CallExpression	_exit ( errno )		1084218	0					
ANR	1086071	Callee	_exit		1084218	0					
ANR	1086072	Identifier	_exit		1084218	0					
ANR	1086073	ArgumentList	errno		1084218	1					
ANR	1086074	Argument	errno		1084218	0					
ANR	1086075	Identifier	errno		1084218	0					
ANR	1086076	ReturnType	void		1084218	1					
ANR	1086077	Identifier	CreateProcessForkit :: exec		1084218	2					
ANR	1086078	ParameterList			1084218	3					
ANR	1086079	CFGEntryNode	ENTRY		1084218		True				
ANR	1086080	CFGExitNode	EXIT		1084218		True				
ANR	1086081	Symbol	ENV_INHERIT		1084218						
ANR	1086082	Symbol	m_args		1084218						
ANR	1086083	Symbol	* index		1084218						
ANR	1086084	Symbol	HAS_DCJOBOPT_SUSPEND_ON_EXEC		1084218						
ANR	1086085	Symbol	& empty_mask		1084218						
ANR	1086086	Symbol	* * * daemonCore		1084218						
ANR	1086087	Symbol	envid		1084218						
ANR	1086088	Symbol	m_nice_inc		1084218						
ANR	1086089	Symbol	m_family_info -> group_ptr		1084218						
ANR	1086090	Symbol	DaemonCore :: ERRNO_PID_COLLISION		1084218						
ANR	1086091	Symbol	pidinfo		1084218						
ANR	1086092	Symbol	PIPE_INDEX_OFFSET		1084218						
ANR	1086093	Symbol	errno		1084218						
ANR	1086094	Symbol	penvid . ancestors		1084218						
ANR	1086095	Symbol	execve		1084218						
ANR	1086096	Symbol	child_errno		1084218						
ANR	1086097	Symbol	* m_affinity_mask		1084218						
ANR	1086098	Symbol	* m_env		1084218						
ANR	1086099	Symbol	index		1084218						
ANR	1086100	Symbol	FD_CLOEXEC		1084218						
ANR	1086101	Symbol	m_priv		1084218						
ANR	1086102	Symbol	ppid		1084218						
ANR	1086103	Symbol	setsid		1084218						
ANR	1086104	Symbol	RLIMIT_CORE		1084218						
ANR	1086105	Symbol	m_time_of_fork		1084218						
ANR	1086106	Symbol	arg_string		1084218						
ANR	1086107	Symbol	m_affinity_mask		1084218						
ANR	1086108	Symbol	m_errorpipe		1084218						
ANR	1086109	Symbol	* daemonCore		1084218						
ANR	1086110	Symbol	m_env		1084218						
ANR	1086111	Symbol	NULL_FILE		1084218						
ANR	1086112	Symbol	PRIV_ROOT		1084218						
ANR	1086113	Symbol	PIDENVID_MAX		1084218						
ANR	1086114	Symbol	* daemonCore -> m_proc_family		1084218						
ANR	1086115	Symbol	dup2		1084218						
ANR	1086116	Symbol	m_unix_env		1084218						
ANR	1086117	Symbol	m_envobject . getStringArray		1084218						
ANR	1086118	Symbol	new_mask		1084218						
ANR	1086119	Symbol	* * daemonCore -> pipeHandleTable		1084218						
ANR	1086120	Symbol	* tracking_gid_ptr		1084218						
ANR	1086121	Symbol	m_sigmask		1084218						
ANR	1086122	Symbol	m_privateinheritbuf . Value		1084218						
ANR	1086123	Symbol	empty_mask		1084218						
ANR	1086124	Symbol	sched_setaffinity		1084218						
ANR	1086125	Symbol	penvid . ancestors [ i ] . active		1084218						
ANR	1086126	Symbol	m_args . Count		1084218						
ANR	1086127	Symbol	daemonCore -> pidTable -> lookup		1084218						
ANR	1086128	Symbol	result		1084218						
ANR	1086129	Symbol	m_inheritFds		1084218						
ANR	1086130	Symbol	O_RDWR		1084218						
ANR	1086131	Symbol	found		1084218						
ANR	1086132	Symbol	* m_std		1084218						
ANR	1086133	Symbol	m_executable_fullpath		1084218						
ANR	1086134	Symbol	daemonCore		1084218						
ANR	1086135	Symbol	m_mii		1084218						
ANR	1086136	Symbol	m_inheritbuf . Value		1084218						
ANR	1086137	Symbol	penvid_ptr		1084218						
ANR	1086138	Symbol	m_args . GetStringArray		1084218						
ANR	1086139	Symbol	m_family_info -> glexec_proxy		1084218						
ANR	1086140	Symbol	close		1084218						
ANR	1086141	Symbol	openfds		1084218						
ANR	1086142	Symbol	* m_inheritFds		1084218						
ANR	1086143	Symbol	malloc		1084218						
ANR	1086144	Symbol	a		1084218						
ANR	1086145	Symbol	PIDENVID_BAD_FORMAT		1084218						
ANR	1086146	Symbol	m_family_info -> max_snapshot_interval		1084218						
ANR	1086147	Symbol	ptrace		1084218						
ANR	1086148	Symbol	display		1084218						
ANR	1086149	Symbol	getdtablesize		1084218						
ANR	1086150	Symbol	& mask		1084218						
ANR	1086151	Symbol	SIG_SETMASK		1084218						
ANR	1086152	Symbol	clone_safe_getpid		1084218						
ANR	1086153	Symbol	i		1084218						
ANR	1086154	Symbol	j		1084218						
ANR	1086155	Symbol	* m_errorpipe		1084218						
ANR	1086156	Symbol	k		1084218						
ANR	1086157	Symbol	PIDENVID_OK		1084218						
ANR	1086158	Symbol	sigprocmask		1084218						
ANR	1086159	Symbol	nice		1084218						
ANR	1086160	Symbol	ENV_PRIVATE		1084218						
ANR	1086161	Symbol	CONDOR_HARD_LIMIT		1084218						
ANR	1086162	Symbol	q		1084218						
ANR	1086163	Symbol	m_inheritbuf		1084218						
ANR	1086164	Symbol	& arg_string		1084218						
ANR	1086165	Symbol	daemonCore -> pipeHandleTable		1084218						
ANR	1086166	Symbol	DaemonCore :: ERRNO_EXEC_AS_ROOT		1084218						
ANR	1086167	Symbol	& priv_errno		1084218						
ANR	1086168	Symbol	m_std		1084218						
ANR	1086169	Symbol	num_closed		1084218						
ANR	1086170	Symbol	closed_fds		1084218						
ANR	1086171	Symbol	msg		1084218						
ANR	1086172	Symbol	daemonCore -> m_proc_family -> register_from_child		1084218						
ANR	1086173	Symbol	F_SETFD		1084218						
ANR	1086174	Symbol	& penvid		1084218						
ANR	1086175	Symbol	m_numInheritFds		1084218						
ANR	1086176	Symbol	pidenvid_format_to_envid		1084218						
ANR	1086177	Symbol	* m_family_info		1084218						
ANR	1086178	Symbol	pid		1084218						
ANR	1086179	Symbol	daemonCore -> pidTable		1084218						
ANR	1086180	Symbol	PRIV_UNKNOWN		1084218						
ANR	1086181	Symbol	* m_core_hard_limit		1084218						
ANR	1086182	Symbol	strlen		1084218						
ANR	1086183	Symbol	* penvid		1084218						
ANR	1086184	Symbol	m_envobject		1084218						
ANR	1086185	Symbol	m_want_command_port		1084218						
ANR	1086186	Symbol	priv_errno		1084218						
ANR	1086187	Symbol	HAS_DCJOBOPT_ENV_INHERIT		1084218						
ANR	1086188	Symbol	NULL		1084218						
ANR	1086189	Symbol	HAS_DCJOBOPT_NO_ENV_INHERIT		1084218						
ANR	1086190	Symbol	* m_cwd		1084218						
ANR	1086191	Symbol	fd_null		1084218						
ANR	1086192	Symbol	m_unix_args		1084218						
ANR	1086193	Symbol	m_family_info -> login		1084218						
ANR	1086194	Symbol	* daemonCore -> pipeHandleTable		1084218						
ANR	1086195	Symbol	TRUE		1084218						
ANR	1086196	Symbol	DebugFlags		1084218						
ANR	1086197	Symbol	param_boolean		1084218						
ANR	1086198	Symbol	D_FULLDEBUG		1084218						
ANR	1086199	Symbol	chdir		1084218						
ANR	1086200	Symbol	purebuf		1084218						
ANR	1086201	Symbol	tmpargs . GetStringArray		1084218						
ANR	1086202	Symbol	msg . Value		1084218						
ANR	1086203	Symbol	strerror		1084218						
ANR	1086204	Symbol	getuid		1084218						
ANR	1086205	Symbol	m_cwd		1084218						
ANR	1086206	Symbol	true		1084218						
ANR	1086207	Symbol	PTRACE_TRACEME		1084218						
ANR	1086208	Symbol	penvid		1084218						
ANR	1086209	Symbol	m_family_info -> cgroup		1084218						
ANR	1086210	Symbol	* * daemonCore		1084218						
ANR	1086211	Symbol	m_privateinheritbuf . IsEmpty		1084218						
ANR	1086212	Symbol	fd		1084218						
ANR	1086213	Symbol	* penvid . ancestors		1084218						
ANR	1086214	Symbol	safe_open_wrapper_follow		1084218						
ANR	1086215	Symbol	& child_errno		1084218						
ANR	1086216	Symbol	GetEnviron		1084218						
ANR	1086217	Symbol	arg_string . Value		1084218						
ANR	1086218	Symbol	m_job_opt_mask		1084218						
ANR	1086219	Symbol	pidenvid_append		1084218						
ANR	1086220	Symbol	m_core_hard_limit		1084218						
ANR	1086221	Symbol	penvid . ancestors [ i ] . envid		1084218						
ANR	1086222	Symbol	pidenvid_filter_and_insert		1084218						
ANR	1086223	Symbol	EnvGetName		1084218						
ANR	1086224	Symbol	* closed_fds		1084218						
ANR	1086225	Symbol	param		1084218						
ANR	1086226	Symbol	daemonCore -> Register_Family		1084218						
ANR	1086227	Symbol	* daemonCore -> pidTable		1084218						
ANR	1086228	Symbol	tracking_gid_ptr		1084218						
ANR	1086229	Symbol	ok		1084218						
ANR	1086230	Symbol	tmpargs		1084218						
ANR	1086231	Symbol	mask		1084218						
ANR	1086232	Symbol	m_privateinheritbuf		1084218						
ANR	1086233	Symbol	& errno		1084218						
ANR	1086234	Symbol	D_DAEMONCORE		1084218						
ANR	1086235	Symbol	D_ALWAYS		1084218						
ANR	1086236	Symbol	DaemonCore :: ERRNO_REGISTRATION_FAILED		1084218						
ANR	1086237	Symbol	* a		1084218						
ANR	1086238	Symbol	PIDENVID_OVERSIZED		1084218						
ANR	1086239	Symbol	PIDENVID_ENVID_SIZE		1084218						
ANR	1086240	Symbol	* i		1084218						
ANR	1086241	Symbol	m_forker_pid		1084218						
ANR	1086242	Symbol	clone_safe_getppid		1084218						
ANR	1086243	Symbol	* k		1084218						
ANR	1086244	Symbol	m_family_info		1084218						
ANR	1086245	Symbol	m_executable		1084218						
ANR	1086246	Symbol	daemonCore -> m_proc_family		1084218						
ANR	1086247	Symbol	FALSE		1084218						
ANR	1086248	Symbol	newnice		1084218						
ANR	1086249	Symbol	exec_results		1084218						
ANR	1086250	Function	DaemonCore :: Create_Process	7298:0:223380:266730							
ANR	1086251	FunctionDef	"DaemonCore :: Create_Process (const char * executable , ArgList const & args , priv_state priv , int reaper_id , int want_command_port , Env const * env , const char * cwd , FamilyInfo * family_info , Stream * sock_inherit_list [ ] , int std [ ] , int fd_inherit_list [ ] , int nice_inc , sigset_t * sigmask , int job_opt_mask , size_t * core_hard_limit , int * affinity_mask , char const * daemon_sock , MyString * err_return_msg)"		1086250	0					
ANR	1086252	CompoundStatement		7318:0:223954:266730	1086250	0					
ANR	1086253	IdentifierDeclStatement	"int i , j ;"	7319:1:223957:223965	1086250	0	True				
ANR	1086254	IdentifierDecl	i		1086250	0					
ANR	1086255	IdentifierDeclType	int		1086250	0					
ANR	1086256	Identifier	i		1086250	1					
ANR	1086257	IdentifierDecl	j		1086250	1					
ANR	1086258	IdentifierDeclType	int		1086250	0					
ANR	1086259	Identifier	j		1086250	1					
ANR	1086260	IdentifierDeclStatement	char * ptmp ;	7320:1:223968:223978	1086250	1	True				
ANR	1086261	IdentifierDecl	* ptmp		1086250	0					
ANR	1086262	IdentifierDeclType	char *		1086250	0					
ANR	1086263	Identifier	ptmp		1086250	1					
ANR	1086264	IdentifierDeclStatement	int inheritFds [ MAX_INHERIT_FDS ] ;	7321:1:223981:224012	1086250	2	True				
ANR	1086265	IdentifierDecl	inheritFds [ MAX_INHERIT_FDS ]		1086250	0					
ANR	1086266	IdentifierDeclType	int [ MAX_INHERIT_FDS ]		1086250	0					
ANR	1086267	Identifier	inheritFds		1086250	1					
ANR	1086268	Identifier	MAX_INHERIT_FDS		1086250	2					
ANR	1086269	IdentifierDeclStatement	int numInheritFds = 0 ;	7322:1:224015:224036	1086250	3	True				
ANR	1086270	IdentifierDecl	numInheritFds = 0		1086250	0					
ANR	1086271	IdentifierDeclType	int		1086250	0					
ANR	1086272	Identifier	numInheritFds		1086250	1					
ANR	1086273	AssignmentExpression	numInheritFds = 0		1086250	2		=			
ANR	1086274	Identifier	numInheritFds		1086250	0					
ANR	1086275	PrimaryExpression	0		1086250	1					
ANR	1086276	IdentifierDeclStatement	MyString executable_buf ;	7323:1:224039:224062	1086250	4	True				
ANR	1086277	IdentifierDecl	executable_buf		1086250	0					
ANR	1086278	IdentifierDeclType	MyString		1086250	0					
ANR	1086279	Identifier	executable_buf		1086250	1					
ANR	1086280	IdentifierDeclStatement	priv_state current_priv = PRIV_UNKNOWN ;	7324:1:224065:224103	1086250	5	True				
ANR	1086281	IdentifierDecl	current_priv = PRIV_UNKNOWN		1086250	0					
ANR	1086282	IdentifierDeclType	priv_state		1086250	0					
ANR	1086283	Identifier	current_priv		1086250	1					
ANR	1086284	AssignmentExpression	current_priv = PRIV_UNKNOWN		1086250	2		=			
ANR	1086285	Identifier	PRIV_UNKNOWN		1086250	0					
ANR	1086286	Identifier	PRIV_UNKNOWN		1086250	1					
ANR	1086287	Statement	int	7327:1:224139:224141	1086250	6	True				
ANR	1086288	Statement	dc_pipe_fds	7327:5:224143:224153	1086250	7	True				
ANR	1086289	Statement	[	7327:16:224154:224154	1086250	8	True				
ANR	1086290	Statement	3	7327:17:224155:224155	1086250	9	True				
ANR	1086291	Statement	]	7327:18:224156:224156	1086250	10	True				
ANR	1086292	Statement	[	7327:19:224157:224157	1086250	11	True				
ANR	1086293	Statement	2	7327:20:224158:224158	1086250	12	True				
ANR	1086294	Statement	]	7327:21:224159:224159	1086250	13	True				
ANR	1086295	Statement	=	7327:23:224161:224161	1086250	14	True				
ANR	1086296	CompoundStatement		10:25:208:208	1086250	15					
ANR	1086297	CompoundStatement		10:26:209:209	1086250	0					
ANR	1086298	Statement	-	7327:27:224165:224165	1086250	0	True				
ANR	1086299	Statement	1	7327:28:224166:224166	1086250	1	True				
ANR	1086300	Statement	","	7327:29:224167:224167	1086250	2	True				
ANR	1086301	Statement	-	7327:31:224169:224169	1086250	3	True				
ANR	1086302	Statement	1	7327:32:224170:224170	1086250	4	True				
ANR	1086303	Statement	","	7327:34:224172:224172	1086250	1	True				
ANR	1086304	CompoundStatement		10:36:219:219	1086250	2					
ANR	1086305	Statement	-	7327:37:224175:224175	1086250	0	True				
ANR	1086306	Statement	1	7327:38:224176:224176	1086250	1	True				
ANR	1086307	Statement	","	7327:39:224177:224177	1086250	2	True				
ANR	1086308	Statement	-	7327:41:224179:224179	1086250	3	True				
ANR	1086309	Statement	1	7327:42:224180:224180	1086250	4	True				
ANR	1086310	Statement	","	7327:44:224182:224182	1086250	3	True				
ANR	1086311	CompoundStatement		10:46:229:229	1086250	4					
ANR	1086312	Statement	-	7327:47:224185:224185	1086250	0	True				
ANR	1086313	Statement	1	7327:48:224186:224186	1086250	1	True				
ANR	1086314	Statement	","	7327:49:224187:224187	1086250	2	True				
ANR	1086315	Statement	-	7327:51:224189:224189	1086250	3	True				
ANR	1086316	Statement	1	7327:52:224190:224190	1086250	4	True				
ANR	1086317	ExpressionStatement		7327:55:224193:224193	1086250	16	True				
ANR	1086318	IdentifierDeclStatement	int return_errno = 0 ;	7332:1:224367:224387	1086250	17	True				
ANR	1086319	IdentifierDecl	return_errno = 0		1086250	0					
ANR	1086320	IdentifierDeclType	int		1086250	0					
ANR	1086321	Identifier	return_errno		1086250	1					
ANR	1086322	AssignmentExpression	return_errno = 0		1086250	2		=			
ANR	1086323	Identifier	return_errno		1086250	0					
ANR	1086324	PrimaryExpression	0		1086250	1					
ANR	1086325	IdentifierDeclStatement	pid_t newpid = FALSE ;	7333:1:224390:224410	1086250	18	True				
ANR	1086326	IdentifierDecl	newpid = FALSE		1086250	0					
ANR	1086327	IdentifierDeclType	pid_t		1086250	0					
ANR	1086328	Identifier	newpid		1086250	1					
ANR	1086329	AssignmentExpression	newpid = FALSE		1086250	2		=			
ANR	1086330	Identifier	FALSE		1086250	0					
ANR	1086331	Identifier	FALSE		1086250	1					
ANR	1086332	IdentifierDeclStatement	MyString inheritbuf ;	7335:1:224451:224470	1086250	19	True				
ANR	1086333	IdentifierDecl	inheritbuf		1086250	0					
ANR	1086334	IdentifierDeclType	MyString		1086250	0					
ANR	1086335	Identifier	inheritbuf		1086250	1					
ANR	1086336	IdentifierDeclStatement	ReliSock rsock ;	7338:1:224569:224583	1086250	20	True				
ANR	1086337	IdentifierDecl	rsock		1086250	0					
ANR	1086338	IdentifierDeclType	ReliSock		1086250	0					
ANR	1086339	Identifier	rsock		1086250	1					
ANR	1086340	IdentifierDeclStatement	SharedPortEndpoint shared_port_endpoint ( daemon_sock ) ;	7339:1:224586:224640	1086250	21	True				
ANR	1086341	IdentifierDecl	shared_port_endpoint ( daemon_sock )		1086250	0					
ANR	1086342	IdentifierDeclType	SharedPortEndpoint		1086250	0					
ANR	1086343	Identifier	shared_port_endpoint		1086250	1					
ANR	1086344	Identifier	daemon_sock		1086250	2					
ANR	1086345	IdentifierDeclStatement	SafeSock ssock ;	7340:1:224643:224657	1086250	22	True				
ANR	1086346	IdentifierDecl	ssock		1086250	0					
ANR	1086347	IdentifierDeclType	SafeSock		1086250	0					
ANR	1086348	Identifier	ssock		1086250	1					
ANR	1086349	IdentifierDeclStatement	PidEntry * pidtmp ;	7341:1:224660:224676	1086250	23	True				
ANR	1086350	IdentifierDecl	* pidtmp		1086250	0					
ANR	1086351	IdentifierDeclType	PidEntry *		1086250	0					
ANR	1086352	Identifier	pidtmp		1086250	1					
ANR	1086353	IdentifierDeclStatement	time_t time_of_fork ;	7344:1:224750:224769	1086250	24	True				
ANR	1086354	IdentifierDecl	time_of_fork		1086250	0					
ANR	1086355	IdentifierDeclType	time_t		1086250	0					
ANR	1086356	Identifier	time_of_fork		1086250	1					
ANR	1086357	IdentifierDeclStatement	unsigned int mii ;	7345:1:224772:224788	1086250	25	True				
ANR	1086358	IdentifierDecl	mii		1086250	0					
ANR	1086359	IdentifierDeclType	unsigned int		1086250	0					
ANR	1086360	Identifier	mii		1086250	1					
ANR	1086361	IdentifierDeclStatement	pid_t forker_pid ;	7346:1:224791:224807	1086250	26	True				
ANR	1086362	IdentifierDecl	forker_pid		1086250	0					
ANR	1086363	IdentifierDeclType	pid_t		1086250	0					
ANR	1086364	Identifier	forker_pid		1086250	1					
ANR	1086365	IdentifierDeclStatement	std :: string session_id ;	7348:1:224890:224912	1086250	27	True				
ANR	1086366	IdentifierDecl	session_id		1086250	0					
ANR	1086367	IdentifierDeclType	std :: string		1086250	0					
ANR	1086368	Identifier	session_id		1086250	1					
ANR	1086369	IdentifierDeclStatement	MyString privateinheritbuf ;	7349:1:224915:224941	1086250	28	True				
ANR	1086370	IdentifierDecl	privateinheritbuf		1086250	0					
ANR	1086371	IdentifierDeclType	MyString		1086250	0					
ANR	1086372	Identifier	privateinheritbuf		1086250	1					
ANR	1086373	IdentifierDeclStatement	DWORD create_process_flags = 0 ;	7355:1:225078:225108	1086250	29	True				
ANR	1086374	IdentifierDecl	create_process_flags = 0		1086250	0					
ANR	1086375	IdentifierDeclType	DWORD		1086250	0					
ANR	1086376	Identifier	create_process_flags		1086250	1					
ANR	1086377	AssignmentExpression	create_process_flags = 0		1086250	2		=			
ANR	1086378	Identifier	create_process_flags		1086250	0					
ANR	1086379	PrimaryExpression	0		1086250	1					
ANR	1086380	IdentifierDeclStatement	BOOL inherit_handles = FALSE ;	7356:1:225111:225139	1086250	30	True				
ANR	1086381	IdentifierDecl	inherit_handles = FALSE		1086250	0					
ANR	1086382	IdentifierDeclType	BOOL		1086250	0					
ANR	1086383	Identifier	inherit_handles		1086250	1					
ANR	1086384	AssignmentExpression	inherit_handles = FALSE		1086250	2		=			
ANR	1086385	Identifier	FALSE		1086250	0					
ANR	1086386	Identifier	FALSE		1086250	1					
ANR	1086387	IdentifierDeclStatement	char * newenv = NULL ;	7357:1:225142:225161	1086250	31	True				
ANR	1086388	IdentifierDecl	* newenv = NULL		1086250	0					
ANR	1086389	IdentifierDeclType	char *		1086250	0					
ANR	1086390	Identifier	newenv		1086250	1					
ANR	1086391	AssignmentExpression	* newenv = NULL		1086250	2		=			
ANR	1086392	Identifier	NULL		1086250	0					
ANR	1086393	Identifier	NULL		1086250	1					
ANR	1086394	IdentifierDeclStatement	MyString strArgs ;	7358:1:225164:225180	1086250	32	True				
ANR	1086395	IdentifierDecl	strArgs		1086250	0					
ANR	1086396	IdentifierDeclType	MyString		1086250	0					
ANR	1086397	Identifier	strArgs		1086250	1					
ANR	1086398	IdentifierDeclStatement	MyString args_errors ;	7359:1:225183:225203	1086250	33	True				
ANR	1086399	IdentifierDecl	args_errors		1086250	0					
ANR	1086400	IdentifierDeclType	MyString		1086250	0					
ANR	1086401	Identifier	args_errors		1086250	1					
ANR	1086402	IdentifierDeclStatement	int namelen = 0 ;	7360:1:225206:225221	1086250	34	True				
ANR	1086403	IdentifierDecl	namelen = 0		1086250	0					
ANR	1086404	IdentifierDeclType	int		1086250	0					
ANR	1086405	Identifier	namelen		1086250	1					
ANR	1086406	AssignmentExpression	namelen = 0		1086250	2		=			
ANR	1086407	Identifier	namelen		1086250	0					
ANR	1086408	PrimaryExpression	0		1086250	1					
ANR	1086409	IdentifierDeclStatement	bool bIs16Bit = FALSE ;	7361:1:225224:225245	1086250	35	True				
ANR	1086410	IdentifierDecl	bIs16Bit = FALSE		1086250	0					
ANR	1086411	IdentifierDeclType	bool		1086250	0					
ANR	1086412	Identifier	bIs16Bit		1086250	1					
ANR	1086413	AssignmentExpression	bIs16Bit = FALSE		1086250	2		=			
ANR	1086414	Identifier	FALSE		1086250	0					
ANR	1086415	Identifier	FALSE		1086250	1					
ANR	1086416	IdentifierDeclStatement	int first_arg_to_copy = 0 ;	7362:1:225248:225273	1086250	36	True				
ANR	1086417	IdentifierDecl	first_arg_to_copy = 0		1086250	0					
ANR	1086418	IdentifierDeclType	int		1086250	0					
ANR	1086419	Identifier	first_arg_to_copy		1086250	1					
ANR	1086420	AssignmentExpression	first_arg_to_copy = 0		1086250	2		=			
ANR	1086421	Identifier	first_arg_to_copy		1086250	0					
ANR	1086422	PrimaryExpression	0		1086250	1					
ANR	1086423	IdentifierDeclStatement	bool args_success = false ;	7363:1:225276:225301	1086250	37	True				
ANR	1086424	IdentifierDecl	args_success = false		1086250	0					
ANR	1086425	IdentifierDeclType	bool		1086250	0					
ANR	1086426	Identifier	args_success		1086250	1					
ANR	1086427	AssignmentExpression	args_success = false		1086250	2		=			
ANR	1086428	Identifier	false		1086250	0					
ANR	1086429	Identifier	false		1086250	1					
ANR	1086430	IdentifierDeclStatement	const char * extension = NULL ;	7364:1:225304:225332	1086250	38	True				
ANR	1086431	IdentifierDecl	* extension = NULL		1086250	0					
ANR	1086432	IdentifierDeclType	const char *		1086250	0					
ANR	1086433	Identifier	extension		1086250	1					
ANR	1086434	AssignmentExpression	* extension = NULL		1086250	2		=			
ANR	1086435	Identifier	NULL		1086250	0					
ANR	1086436	Identifier	NULL		1086250	1					
ANR	1086437	IdentifierDeclStatement	bool allow_scripts = true ;	7365:1:225335:225360	1086250	39	True				
ANR	1086438	IdentifierDecl	allow_scripts = true		1086250	0					
ANR	1086439	IdentifierDeclType	bool		1086250	0					
ANR	1086440	Identifier	allow_scripts		1086250	1					
ANR	1086441	AssignmentExpression	allow_scripts = true		1086250	2		=			
ANR	1086442	Identifier	true		1086250	0					
ANR	1086443	Identifier	true		1086250	1					
ANR	1086444	IdentifierDeclStatement	bool batch_file = false ;	7366:1:225363:225386	1086250	40	True				
ANR	1086445	IdentifierDecl	batch_file = false		1086250	0					
ANR	1086446	IdentifierDeclType	bool		1086250	0					
ANR	1086447	Identifier	batch_file		1086250	1					
ANR	1086448	AssignmentExpression	batch_file = false		1086250	2		=			
ANR	1086449	Identifier	false		1086250	0					
ANR	1086450	Identifier	false		1086250	1					
ANR	1086451	IdentifierDeclStatement	bool binary_executable = false ;	7367:1:225389:225419	1086250	41	True				
ANR	1086452	IdentifierDecl	binary_executable = false		1086250	0					
ANR	1086453	IdentifierDeclType	bool		1086250	0					
ANR	1086454	Identifier	binary_executable		1086250	1					
ANR	1086455	AssignmentExpression	binary_executable = false		1086250	2		=			
ANR	1086456	Identifier	false		1086250	0					
ANR	1086457	Identifier	false		1086250	1					
ANR	1086458	IdentifierDeclStatement	CHAR interpreter [ MAX_PATH + 1 ] ;	7368:1:225422:225450	1086250	42	True				
ANR	1086459	IdentifierDecl	interpreter [ MAX_PATH + 1 ]		1086250	0					
ANR	1086460	IdentifierDeclType	CHAR [ MAX_PATH + 1 ]		1086250	0					
ANR	1086461	Identifier	interpreter		1086250	1					
ANR	1086462	AdditiveExpression	MAX_PATH + 1		1086250	2		+			
ANR	1086463	Identifier	MAX_PATH		1086250	0					
ANR	1086464	PrimaryExpression	1		1086250	1					
ANR	1086465	IdentifierDeclStatement	MyString description ;	7369:1:225453:225473	1086250	43	True				
ANR	1086466	IdentifierDecl	description		1086250	0					
ANR	1086467	IdentifierDeclType	MyString		1086250	0					
ANR	1086468	Identifier	description		1086250	1					
ANR	1086469	IdentifierDeclStatement	BOOL ok ;	7370:1:225476:225483	1086250	44	True				
ANR	1086470	IdentifierDecl	ok		1086250	0					
ANR	1086471	IdentifierDeclType	BOOL		1086250	0					
ANR	1086472	Identifier	ok		1086250	1					
ANR	1086473	IdentifierDeclStatement	MyString executable_with_exe ;	7371:1:225486:225514	1086250	45	True				
ANR	1086474	IdentifierDecl	executable_with_exe		1086250	0					
ANR	1086475	IdentifierDeclType	MyString		1086250	0					
ANR	1086476	Identifier	executable_with_exe		1086250	1					
ANR	1086477	IdentifierDeclStatement	bool want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp ;	7382:1:225757:225825	1086250	46	True				
ANR	1086478	IdentifierDecl	want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		1086250	0					
ANR	1086479	IdentifierDeclType	bool		1086250	0					
ANR	1086480	Identifier	want_udp		1086250	1					
ANR	1086481	AssignmentExpression	want_udp = ! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		1086250	2		=			
ANR	1086482	Identifier	want_udp		1086250	0					
ANR	1086483	AndExpression	! HAS_DCJOBOPT_NO_UDP ( job_opt_mask ) && m_wants_dc_udp		1086250	1		&&			
ANR	1086484	UnaryOperationExpression	! HAS_DCJOBOPT_NO_UDP ( job_opt_mask )		1086250	0					
ANR	1086485	UnaryOperator	!		1086250	0					
ANR	1086486	CallExpression	HAS_DCJOBOPT_NO_UDP ( job_opt_mask )		1086250	1					
ANR	1086487	Callee	HAS_DCJOBOPT_NO_UDP		1086250	0					
ANR	1086488	Identifier	HAS_DCJOBOPT_NO_UDP		1086250	0					
ANR	1086489	ArgumentList	job_opt_mask		1086250	1					
ANR	1086490	Argument	job_opt_mask		1086250	0					
ANR	1086491	Identifier	job_opt_mask		1086250	0					
ANR	1086492	Identifier	m_wants_dc_udp		1086250	1					
ANR	1086493	IdentifierDeclStatement	double runtime = UtcTime :: getTimeDouble ( ) ;	7384:1:225829:225870	1086250	47	True				
ANR	1086494	IdentifierDecl	runtime = UtcTime :: getTimeDouble ( )		1086250	0					
ANR	1086495	IdentifierDeclType	double		1086250	0					
ANR	1086496	Identifier	runtime		1086250	1					
ANR	1086497	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1086250	2		=			
ANR	1086498	Identifier	runtime		1086250	0					
ANR	1086499	CallExpression	UtcTime :: getTimeDouble ( )		1086250	1					
ANR	1086500	Callee	UtcTime :: getTimeDouble		1086250	0					
ANR	1086501	Identifier	UtcTime :: getTimeDouble		1086250	0					
ANR	1086502	ArgumentList			1086250	1					
ANR	1086503	IdentifierDeclStatement	double create_process_begin_time = runtime ;	7385:4:225876:225918	1086250	48	True				
ANR	1086504	IdentifierDecl	create_process_begin_time = runtime		1086250	0					
ANR	1086505	IdentifierDeclType	double		1086250	0					
ANR	1086506	Identifier	create_process_begin_time		1086250	1					
ANR	1086507	AssignmentExpression	create_process_begin_time = runtime		1086250	2		=			
ANR	1086508	Identifier	runtime		1086250	0					
ANR	1086509	Identifier	runtime		1086250	1					
ANR	1086510	IdentifierDeclStatement	double delta_runtime = 0 ;	7386:4:225924:225948	1086250	49	True				
ANR	1086511	IdentifierDecl	delta_runtime = 0		1086250	0					
ANR	1086512	IdentifierDeclType	double		1086250	0					
ANR	1086513	Identifier	delta_runtime		1086250	1					
ANR	1086514	AssignmentExpression	delta_runtime = 0		1086250	2		=			
ANR	1086515	Identifier	delta_runtime		1086250	0					
ANR	1086516	PrimaryExpression	0		1086250	1					
ANR	1086517	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""In DaemonCore::Create_Process(%s,...)\\n"" , executable ? executable : ""NULL"" )"	7387:1:225951:226047	1086250	50	True				
ANR	1086518	CallExpression	"dprintf ( D_DAEMONCORE , ""In DaemonCore::Create_Process(%s,...)\\n"" , executable ? executable : ""NULL"" )"		1086250	0					
ANR	1086519	Callee	dprintf		1086250	0					
ANR	1086520	Identifier	dprintf		1086250	0					
ANR	1086521	ArgumentList	D_DAEMONCORE		1086250	1					
ANR	1086522	Argument	D_DAEMONCORE		1086250	0					
ANR	1086523	Identifier	D_DAEMONCORE		1086250	0					
ANR	1086524	Argument	"""In DaemonCore::Create_Process(%s,...)\\n"""		1086250	1					
ANR	1086525	PrimaryExpression	"""In DaemonCore::Create_Process(%s,...)\\n"""		1086250	0					
ANR	1086526	Argument	"executable ? executable : ""NULL"""		1086250	2					
ANR	1086527	ConditionalExpression	"executable ? executable : ""NULL"""		1086250	0					
ANR	1086528	Condition	executable		1086250	0					
ANR	1086529	Identifier	executable		1086250	0					
ANR	1086530	Identifier	executable		1086250	1					
ANR	1086531	PrimaryExpression	"""NULL"""		1086250	2					
ANR	1086532	IfStatement	if ( ( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) ) )		1086250	51					
ANR	1086533	Condition	( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )	7392:6:226207:226309	1086250	0	True				
ANR	1086534	OrExpression	( reaper_id < 0 ) || ( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )		1086250	0		||			
ANR	1086535	RelationalExpression	reaper_id < 0		1086250	0		<			
ANR	1086536	Identifier	reaper_id		1086250	0					
ANR	1086537	PrimaryExpression	0		1086250	1					
ANR	1086538	OrExpression	( reaper_id > maxReap ) || ( ( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 ) )		1086250	1		||			
ANR	1086539	RelationalExpression	reaper_id > maxReap		1086250	0		>			
ANR	1086540	Identifier	reaper_id		1086250	0					
ANR	1086541	Identifier	maxReap		1086250	1					
ANR	1086542	AndExpression	( reaper_id > 0 ) && ( reapTable [ reaper_id - 1 ] . num == 0 )		1086250	1		&&			
ANR	1086543	RelationalExpression	reaper_id > 0		1086250	0		>			
ANR	1086544	Identifier	reaper_id		1086250	0					
ANR	1086545	PrimaryExpression	0		1086250	1					
ANR	1086546	EqualityExpression	reapTable [ reaper_id - 1 ] . num == 0		1086250	1		==			
ANR	1086547	MemberAccess	reapTable [ reaper_id - 1 ] . num		1086250	0					
ANR	1086548	ArrayIndexing	reapTable [ reaper_id - 1 ]		1086250	0					
ANR	1086549	Identifier	reapTable		1086250	0					
ANR	1086550	AdditiveExpression	reaper_id - 1		1086250	1		-			
ANR	1086551	Identifier	reaper_id		1086250	0					
ANR	1086552	PrimaryExpression	1		1086250	1					
ANR	1086553	Identifier	num		1086250	1					
ANR	1086554	PrimaryExpression	0		1086250	1					
ANR	1086555	CompoundStatement		76:62:2358:2358	1086250	1					
ANR	1086556	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: invalid reaper_id\\n"" )"	7394:2:226317:226372	1086250	0	True				
ANR	1086557	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: invalid reaper_id\\n"" )"		1086250	0					
ANR	1086558	Callee	dprintf		1086250	0					
ANR	1086559	Identifier	dprintf		1086250	0					
ANR	1086560	ArgumentList	D_ALWAYS		1086250	1					
ANR	1086561	Argument	D_ALWAYS		1086250	0					
ANR	1086562	Identifier	D_ALWAYS		1086250	0					
ANR	1086563	Argument	"""Create_Process: invalid reaper_id\\n"""		1086250	1					
ANR	1086564	PrimaryExpression	"""Create_Process: invalid reaper_id\\n"""		1086250	0					
ANR	1086565	GotoStatement	goto wrapup ;	7395:2:226376:226387	1086250	1	True				
ANR	1086566	Identifier	wrapup		1086250	0					
ANR	1086567	IfStatement	if ( ! executable )		1086250	52					
ANR	1086568	Condition	! executable	7399:6:226423:226433	1086250	0	True				
ANR	1086569	UnaryOperationExpression	! executable		1086250	0					
ANR	1086570	UnaryOperator	!		1086250	0					
ANR	1086571	Identifier	executable		1086250	1					
ANR	1086572	CompoundStatement		82:20:2482:2482	1086250	1					
ANR	1086573	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: null name to exec\\n"" )"	7400:2:226441:226496	1086250	0	True				
ANR	1086574	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: null name to exec\\n"" )"		1086250	0					
ANR	1086575	Callee	dprintf		1086250	0					
ANR	1086576	Identifier	dprintf		1086250	0					
ANR	1086577	ArgumentList	D_ALWAYS		1086250	1					
ANR	1086578	Argument	D_ALWAYS		1086250	0					
ANR	1086579	Identifier	D_ALWAYS		1086250	0					
ANR	1086580	Argument	"""Create_Process: null name to exec\\n"""		1086250	1					
ANR	1086581	PrimaryExpression	"""Create_Process: null name to exec\\n"""		1086250	0					
ANR	1086582	GotoStatement	goto wrapup ;	7401:2:226500:226511	1086250	1	True				
ANR	1086583	Identifier	wrapup		1086250	0					
ANR	1086584	ExpressionStatement	"inheritbuf . sprintf ( ""%lu "" , ( unsigned long ) mypid )"	7404:1:226518:226565	1086250	53	True				
ANR	1086585	CallExpression	"inheritbuf . sprintf ( ""%lu "" , ( unsigned long ) mypid )"		1086250	0					
ANR	1086586	Callee	inheritbuf . sprintf		1086250	0					
ANR	1086587	MemberAccess	inheritbuf . sprintf		1086250	0					
ANR	1086588	Identifier	inheritbuf		1086250	0					
ANR	1086589	Identifier	sprintf		1086250	1					
ANR	1086590	ArgumentList	"""%lu """		1086250	1					
ANR	1086591	Argument	"""%lu """		1086250	0					
ANR	1086592	PrimaryExpression	"""%lu """		1086250	0					
ANR	1086593	Argument	( unsigned long ) mypid		1086250	1					
ANR	1086594	CastExpression	( unsigned long ) mypid		1086250	0					
ANR	1086595	CastTarget	unsigned long		1086250	0					
ANR	1086596	Identifier	mypid		1086250	1					
ANR	1086597	CompoundStatement		94:2:2810:2862	1086250	54					
ANR	1086598	IdentifierDeclStatement	MyString mysin = InfoCommandSinfulStringMyself ( true ) ;	7411:2:226765:226817	1086250	0	True				
ANR	1086599	IdentifierDecl	mysin = InfoCommandSinfulStringMyself ( true )		1086250	0					
ANR	1086600	IdentifierDeclType	MyString		1086250	0					
ANR	1086601	Identifier	mysin		1086250	1					
ANR	1086602	AssignmentExpression	mysin = InfoCommandSinfulStringMyself ( true )		1086250	2		=			
ANR	1086603	Identifier	mysin		1086250	0					
ANR	1086604	CallExpression	InfoCommandSinfulStringMyself ( true )		1086250	1					
ANR	1086605	Callee	InfoCommandSinfulStringMyself		1086250	0					
ANR	1086606	Identifier	InfoCommandSinfulStringMyself		1086250	0					
ANR	1086607	ArgumentList	true		1086250	1					
ANR	1086608	Argument	true		1086250	0					
ANR	1086609	Identifier	true		1086250	0					
ANR	1086610	ExpressionStatement	ASSERT ( mysin . Length ( ) > 0 )	7412:2:226821:226847	1086250	1	True				
ANR	1086611	CallExpression	ASSERT ( mysin . Length ( ) > 0 )		1086250	0					
ANR	1086612	Callee	ASSERT		1086250	0					
ANR	1086613	Identifier	ASSERT		1086250	0					
ANR	1086614	ArgumentList	mysin . Length ( ) > 0		1086250	1					
ANR	1086615	Argument	mysin . Length ( ) > 0		1086250	0					
ANR	1086616	RelationalExpression	mysin . Length ( ) > 0		1086250	0		>			
ANR	1086617	CallExpression	mysin . Length ( )		1086250	0					
ANR	1086618	Callee	mysin . Length		1086250	0					
ANR	1086619	MemberAccess	mysin . Length		1086250	0					
ANR	1086620	Identifier	mysin		1086250	0					
ANR	1086621	Identifier	Length		1086250	1					
ANR	1086622	ArgumentList			1086250	1					
ANR	1086623	PrimaryExpression	0		1086250	1					
ANR	1086624	ExpressionStatement	inheritbuf += mysin	7413:2:226891:226910	1086250	2	True				
ANR	1086625	AssignmentExpression	inheritbuf += mysin		1086250	0		+=			
ANR	1086626	Identifier	inheritbuf		1086250	0					
ANR	1086627	Identifier	mysin		1086250	1					
ANR	1086628	IfStatement	if ( sock_inherit_list )		1086250	55					
ANR	1086629	Condition	sock_inherit_list	7416:6:226922:226938	1086250	0	True				
ANR	1086630	Identifier	sock_inherit_list		1086250	0					
ANR	1086631	CompoundStatement		99:26:2987:2987	1086250	1					
ANR	1086632	ExpressionStatement	inherit_handles = TRUE	7417:2:226946:226968	1086250	0	True				
ANR	1086633	AssignmentExpression	inherit_handles = TRUE		1086250	0		=			
ANR	1086634	Identifier	inherit_handles		1086250	0					
ANR	1086635	Identifier	TRUE		1086250	1					
ANR	1086636	ForStatement	for ( i = 0 ; ( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS ) ; i ++ )		1086250	1					
ANR	1086637	ForInit	i = 0 ;	7418:7:226977:226983	1086250	0	True				
ANR	1086638	AssignmentExpression	i = 0		1086250	0		=			
ANR	1086639	Identifier	i		1086250	0					
ANR	1086640	PrimaryExpression	0		1086250	1					
ANR	1086641	Condition	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )	7419:4:226989:227045	1086250	1	True				
ANR	1086642	AndExpression	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )		1086250	0		&&			
ANR	1086643	EqualityExpression	sock_inherit_list [ i ] != NULL		1086250	0		!=			
ANR	1086644	ArrayIndexing	sock_inherit_list [ i ]		1086250	0					
ANR	1086645	Identifier	sock_inherit_list		1086250	0					
ANR	1086646	Identifier	i		1086250	1					
ANR	1086647	Identifier	NULL		1086250	1					
ANR	1086648	RelationalExpression	i < MAX_INHERIT_SOCKS		1086250	1		<			
ANR	1086649	Identifier	i		1086250	0					
ANR	1086650	Identifier	MAX_INHERIT_SOCKS		1086250	1					
ANR	1086651	PostIncDecOperationExpression	i ++	7420:4:227053:227055	1086250	2	True				
ANR	1086652	Identifier	i		1086250	0					
ANR	1086653	IncDec	++		1086250	1					
ANR	1086654	CompoundStatement		108:12:3298:3347	1086250	3					
ANR	1086655	IdentifierDeclStatement	Sock * tempSock = ( ( Sock * ) sock_inherit_list [ i ] ) ;	7425:12:227253:227302	1086250	0	True				
ANR	1086656	IdentifierDecl	* tempSock = ( ( Sock * ) sock_inherit_list [ i ] )		1086250	0					
ANR	1086657	IdentifierDeclType	Sock *		1086250	0					
ANR	1086658	Identifier	tempSock		1086250	1					
ANR	1086659	AssignmentExpression	* tempSock = ( ( Sock * ) sock_inherit_list [ i ] )		1086250	2		=			
ANR	1086660	Identifier	tempSock		1086250	0					
ANR	1086661	CastExpression	( Sock * ) sock_inherit_list [ i ]		1086250	1					
ANR	1086662	CastTarget	Sock *		1086250	0					
ANR	1086663	ArrayIndexing	sock_inherit_list [ i ]		1086250	1					
ANR	1086664	Identifier	sock_inherit_list		1086250	0					
ANR	1086665	Identifier	i		1086250	1					
ANR	1086666	IfStatement	if ( tempSock )		1086250	1					
ANR	1086667	Condition	tempSock	7426:17:227321:227328	1086250	0	True				
ANR	1086668	Identifier	tempSock		1086250	0					
ANR	1086669	CompoundStatement		109:28:3377:3377	1086250	1					
ANR	1086670	ExpressionStatement	inheritFds [ numInheritFds ] = tempSock -> get_file_desc ( )	7427:16:227350:227403	1086250	0	True				
ANR	1086671	AssignmentExpression	inheritFds [ numInheritFds ] = tempSock -> get_file_desc ( )		1086250	0		=			
ANR	1086672	ArrayIndexing	inheritFds [ numInheritFds ]		1086250	0					
ANR	1086673	Identifier	inheritFds		1086250	0					
ANR	1086674	Identifier	numInheritFds		1086250	1					
ANR	1086675	CallExpression	tempSock -> get_file_desc ( )		1086250	1					
ANR	1086676	Callee	tempSock -> get_file_desc		1086250	0					
ANR	1086677	PtrMemberAccess	tempSock -> get_file_desc		1086250	0					
ANR	1086678	Identifier	tempSock		1086250	0					
ANR	1086679	Identifier	get_file_desc		1086250	1					
ANR	1086680	ArgumentList			1086250	1					
ANR	1086681	ExpressionStatement	numInheritFds ++	7428:16:227421:227436	1086250	1	True				
ANR	1086682	PostIncDecOperationExpression	numInheritFds ++		1086250	0					
ANR	1086683	Identifier	numInheritFds		1086250	0					
ANR	1086684	IncDec	++		1086250	1					
ANR	1086685	IfStatement	if ( ! ( tempSock -> set_inheritable ( TRUE ) ) )		1086250	2					
ANR	1086686	Condition	! ( tempSock -> set_inheritable ( TRUE ) )	7430:21:227527:227560	1086250	0	True				
ANR	1086687	UnaryOperationExpression	! ( tempSock -> set_inheritable ( TRUE ) )		1086250	0					
ANR	1086688	UnaryOperator	!		1086250	0					
ANR	1086689	CallExpression	tempSock -> set_inheritable ( TRUE )		1086250	1					
ANR	1086690	Callee	tempSock -> set_inheritable		1086250	0					
ANR	1086691	PtrMemberAccess	tempSock -> set_inheritable		1086250	0					
ANR	1086692	Identifier	tempSock		1086250	0					
ANR	1086693	Identifier	set_inheritable		1086250	1					
ANR	1086694	ArgumentList	TRUE		1086250	1					
ANR	1086695	Argument	TRUE		1086250	0					
ANR	1086696	Identifier	TRUE		1086250	0					
ANR	1086697	CompoundStatement		113:58:3609:3609	1086250	1					
ANR	1086698	GotoStatement	goto wrapup ;	7431:5:227571:227582	1086250	0	True				
ANR	1086699	Identifier	wrapup		1086250	0					
ANR	1086700	ElseStatement	else		1086250	0					
ANR	1086701	CompoundStatement		117:17:3678:3678	1086250	0					
ANR	1086702	ExpressionStatement	"dprintf ( D_ALWAYS , ""Dynamic cast failure!\\n"" )"	7435:16:227651:227698	1086250	0	True				
ANR	1086703	CallExpression	"dprintf ( D_ALWAYS , ""Dynamic cast failure!\\n"" )"		1086250	0					
ANR	1086704	Callee	dprintf		1086250	0					
ANR	1086705	Identifier	dprintf		1086250	0					
ANR	1086706	ArgumentList	D_ALWAYS		1086250	1					
ANR	1086707	Argument	D_ALWAYS		1086250	0					
ANR	1086708	Identifier	D_ALWAYS		1086250	0					
ANR	1086709	Argument	"""Dynamic cast failure!\\n"""		1086250	1					
ANR	1086710	PrimaryExpression	"""Dynamic cast failure!\\n"""		1086250	0					
ANR	1086711	ExpressionStatement	"EXCEPT ( ""dynamic_cast"" )"	7436:16:227716:227740	1086250	1	True				
ANR	1086712	CallExpression	"EXCEPT ( ""dynamic_cast"" )"		1086250	0					
ANR	1086713	Callee	EXCEPT		1086250	0					
ANR	1086714	Identifier	EXCEPT		1086250	0					
ANR	1086715	ArgumentList	"""dynamic_cast"""		1086250	1					
ANR	1086716	Argument	"""dynamic_cast"""		1086250	0					
ANR	1086717	PrimaryExpression	"""dynamic_cast"""		1086250	0					
ANR	1086718	SwitchStatement	switch ( sock_inherit_list [ i ] -> type ( ) )		1086250	2					
ANR	1086719	Condition	sock_inherit_list [ i ] -> type ( )	7440:13:227821:227848	1086250	0	True				
ANR	1086720	CallExpression	sock_inherit_list [ i ] -> type ( )		1086250	0					
ANR	1086721	Callee	sock_inherit_list [ i ] -> type		1086250	0					
ANR	1086722	PtrMemberAccess	sock_inherit_list [ i ] -> type		1086250	0					
ANR	1086723	ArrayIndexing	sock_inherit_list [ i ]		1086250	0					
ANR	1086724	Identifier	sock_inherit_list		1086250	0					
ANR	1086725	Identifier	i		1086250	1					
ANR	1086726	Identifier	type		1086250	1					
ANR	1086727	ArgumentList			1086250	1					
ANR	1086728	CompoundStatement		123:44:3897:3897	1086250	1					
ANR	1086729	Label	case Stream :: reli_sock :	7441:4:227858:227881	1086250	0	True				
ANR	1086730	Identifier	Stream :: reli_sock		1086250	0					
ANR	1086731	ExpressionStatement	"inheritbuf += "" 1 """	7442:5:227888:227907	1086250	1	True				
ANR	1086732	AssignmentExpression	"inheritbuf += "" 1 """		1086250	0		+=			
ANR	1086733	Identifier	inheritbuf		1086250	0					
ANR	1086734	PrimaryExpression	""" 1 """		1086250	1					
ANR	1086735	BreakStatement	break ;	7443:5:227914:227919	1086250	2	True				
ANR	1086736	Label	case Stream :: safe_sock :	7444:4:227925:227948	1086250	3	True				
ANR	1086737	Identifier	Stream :: safe_sock		1086250	0					
ANR	1086738	ExpressionStatement	"inheritbuf += "" 2 """	7445:5:227955:227974	1086250	4	True				
ANR	1086739	AssignmentExpression	"inheritbuf += "" 2 """		1086250	0		+=			
ANR	1086740	Identifier	inheritbuf		1086250	0					
ANR	1086741	PrimaryExpression	""" 2 """		1086250	1					
ANR	1086742	BreakStatement	break ;	7446:5:227981:227986	1086250	5	True				
ANR	1086743	Label	default :	7447:4:227992:227999	1086250	6	True				
ANR	1086744	Identifier	default		1086250	0					
ANR	1086745	ExpressionStatement	assert ( 0 )	7449:5:228067:228076	1086250	7	True				
ANR	1086746	CallExpression	assert ( 0 )		1086250	0					
ANR	1086747	Callee	assert		1086250	0					
ANR	1086748	Identifier	assert		1086250	0					
ANR	1086749	ArgumentList	0		1086250	1					
ANR	1086750	Argument	0		1086250	0					
ANR	1086751	PrimaryExpression	0		1086250	0					
ANR	1086752	BreakStatement	break ;	7450:5:228083:228088	1086250	8	True				
ANR	1086753	ExpressionStatement	ptmp = sock_inherit_list [ i ] -> serialize ( )	7453:4:228142:228182	1086250	3	True				
ANR	1086754	AssignmentExpression	ptmp = sock_inherit_list [ i ] -> serialize ( )		1086250	0		=			
ANR	1086755	Identifier	ptmp		1086250	0					
ANR	1086756	CallExpression	sock_inherit_list [ i ] -> serialize ( )		1086250	1					
ANR	1086757	Callee	sock_inherit_list [ i ] -> serialize		1086250	0					
ANR	1086758	PtrMemberAccess	sock_inherit_list [ i ] -> serialize		1086250	0					
ANR	1086759	ArrayIndexing	sock_inherit_list [ i ]		1086250	0					
ANR	1086760	Identifier	sock_inherit_list		1086250	0					
ANR	1086761	Identifier	i		1086250	1					
ANR	1086762	Identifier	serialize		1086250	1					
ANR	1086763	ArgumentList			1086250	1					
ANR	1086764	ExpressionStatement	inheritbuf += ptmp	7454:4:228188:228206	1086250	4	True				
ANR	1086765	AssignmentExpression	inheritbuf += ptmp		1086250	0		+=			
ANR	1086766	Identifier	inheritbuf		1086250	0					
ANR	1086767	Identifier	ptmp		1086250	1					
ANR	1086768	Statement	delete	7455:4:228212:228217	1086250	5	True				
ANR	1086769	Statement	[	7455:11:228219:228219	1086250	6	True				
ANR	1086770	Statement	]	7455:12:228220:228220	1086250	7	True				
ANR	1086771	ExpressionStatement	ptmp	7455:13:228221:228225	1086250	8	True				
ANR	1086772	Identifier	ptmp		1086250	0					
ANR	1086773	ExpressionStatement	"inheritbuf += "" 0"""	7458:1:228235:228253	1086250	56	True				
ANR	1086774	AssignmentExpression	"inheritbuf += "" 0"""		1086250	0		+=			
ANR	1086775	Identifier	inheritbuf		1086250	0					
ANR	1086776	PrimaryExpression	""" 0"""		1086250	1					
ANR	1086777	IfStatement	if ( want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( ) )		1086250	57					
ANR	1086778	Condition	want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )	7466:6:228622:228771	1086250	0	True				
ANR	1086779	AndExpression	want_command_port != FALSE && want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		1086250	0		&&			
ANR	1086780	EqualityExpression	want_command_port != FALSE		1086250	0		!=			
ANR	1086781	Identifier	want_command_port		1086250	0					
ANR	1086782	Identifier	FALSE		1086250	1					
ANR	1086783	AndExpression	want_command_port <= 1 && ! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		1086250	1		&&			
ANR	1086784	RelationalExpression	want_command_port <= 1		1086250	0		<=			
ANR	1086785	Identifier	want_command_port		1086250	0					
ANR	1086786	PrimaryExpression	1		1086250	1					
ANR	1086787	AndExpression	! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask ) && SharedPortEndpoint :: UseSharedPort ( )		1086250	1		&&			
ANR	1086788	UnaryOperationExpression	! HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask )		1086250	0					
ANR	1086789	UnaryOperator	!		1086250	0					
ANR	1086790	CallExpression	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT ( job_opt_mask )		1086250	1					
ANR	1086791	Callee	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		1086250	0					
ANR	1086792	Identifier	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		1086250	0					
ANR	1086793	ArgumentList	job_opt_mask		1086250	1					
ANR	1086794	Argument	job_opt_mask		1086250	0					
ANR	1086795	Identifier	job_opt_mask		1086250	0					
ANR	1086796	CallExpression	SharedPortEndpoint :: UseSharedPort ( )		1086250	1					
ANR	1086797	Callee	SharedPortEndpoint :: UseSharedPort		1086250	0					
ANR	1086798	Identifier	SharedPortEndpoint :: UseSharedPort		1086250	0					
ANR	1086799	ArgumentList			1086250	1					
ANR	1086800	CompoundStatement		166:2:5289:5300	1086250	1					
ANR	1086801	ExpressionStatement	shared_port_endpoint . InitAndReconfig ( )	7470:2:228780:228818	1086250	0	True				
ANR	1086802	CallExpression	shared_port_endpoint . InitAndReconfig ( )		1086250	0					
ANR	1086803	Callee	shared_port_endpoint . InitAndReconfig		1086250	0					
ANR	1086804	MemberAccess	shared_port_endpoint . InitAndReconfig		1086250	0					
ANR	1086805	Identifier	shared_port_endpoint		1086250	0					
ANR	1086806	Identifier	InitAndReconfig		1086250	1					
ANR	1086807	ArgumentList			1086250	1					
ANR	1086808	IfStatement	if ( ! shared_port_endpoint . CreateListener ( ) )		1086250	1					
ANR	1086809	Condition	! shared_port_endpoint . CreateListener ( )	7471:6:228826:228863	1086250	0	True				
ANR	1086810	UnaryOperationExpression	! shared_port_endpoint . CreateListener ( )		1086250	0					
ANR	1086811	UnaryOperator	!		1086250	0					
ANR	1086812	CallExpression	shared_port_endpoint . CreateListener ( )		1086250	1					
ANR	1086813	Callee	shared_port_endpoint . CreateListener		1086250	0					
ANR	1086814	MemberAccess	shared_port_endpoint . CreateListener		1086250	0					
ANR	1086815	Identifier	shared_port_endpoint		1086250	0					
ANR	1086816	Identifier	CreateListener		1086250	1					
ANR	1086817	ArgumentList			1086250	1					
ANR	1086818	CompoundStatement		154:47:4912:4912	1086250	1					
ANR	1086819	GotoStatement	goto wrapup ;	7472:3:228872:228883	1086250	0	True				
ANR	1086820	Identifier	wrapup		1086250	0					
ANR	1086821	IfStatement	if ( ! shared_port_endpoint . ChownSocket ( priv ) )		1086250	2					
ANR	1086822	Condition	! shared_port_endpoint . ChownSocket ( priv )	7475:6:228896:228934	1086250	0	True				
ANR	1086823	UnaryOperationExpression	! shared_port_endpoint . ChownSocket ( priv )		1086250	0					
ANR	1086824	UnaryOperator	!		1086250	0					
ANR	1086825	CallExpression	shared_port_endpoint . ChownSocket ( priv )		1086250	1					
ANR	1086826	Callee	shared_port_endpoint . ChownSocket		1086250	0					
ANR	1086827	MemberAccess	shared_port_endpoint . ChownSocket		1086250	0					
ANR	1086828	Identifier	shared_port_endpoint		1086250	0					
ANR	1086829	Identifier	ChownSocket		1086250	1					
ANR	1086830	ArgumentList	priv		1086250	1					
ANR	1086831	Argument	priv		1086250	0					
ANR	1086832	Identifier	priv		1086250	0					
ANR	1086833	CompoundStatement		158:48:4983:4983	1086250	1					
ANR	1086834	ExpressionStatement	"dprintf ( D_FULLDEBUG | D_NETWORK , ""Created shared port endpoint for child process (%s)\\n"" , shared_port_endpoint . GetSharedPortID ( ) )"	7481:2:229083:229208	1086250	3	True				
ANR	1086835	CallExpression	"dprintf ( D_FULLDEBUG | D_NETWORK , ""Created shared port endpoint for child process (%s)\\n"" , shared_port_endpoint . GetSharedPortID ( ) )"		1086250	0					
ANR	1086836	Callee	dprintf		1086250	0					
ANR	1086837	Identifier	dprintf		1086250	0					
ANR	1086838	ArgumentList	D_FULLDEBUG | D_NETWORK		1086250	1					
ANR	1086839	Argument	D_FULLDEBUG | D_NETWORK		1086250	0					
ANR	1086840	InclusiveOrExpression	D_FULLDEBUG | D_NETWORK		1086250	0		|			
ANR	1086841	Identifier	D_FULLDEBUG		1086250	0					
ANR	1086842	Identifier	D_NETWORK		1086250	1					
ANR	1086843	Argument	"""Created shared port endpoint for child process (%s)\\n"""		1086250	1					
ANR	1086844	PrimaryExpression	"""Created shared port endpoint for child process (%s)\\n"""		1086250	0					
ANR	1086845	Argument	shared_port_endpoint . GetSharedPortID ( )		1086250	2					
ANR	1086846	CallExpression	shared_port_endpoint . GetSharedPortID ( )		1086250	0					
ANR	1086847	Callee	shared_port_endpoint . GetSharedPortID		1086250	0					
ANR	1086848	MemberAccess	shared_port_endpoint . GetSharedPortID		1086250	0					
ANR	1086849	Identifier	shared_port_endpoint		1086250	0					
ANR	1086850	Identifier	GetSharedPortID		1086250	1					
ANR	1086851	ArgumentList			1086250	1					
ANR	1086852	ExpressionStatement	"inheritbuf += "" SharedPort:"""	7482:2:229212:229240	1086250	4	True				
ANR	1086853	AssignmentExpression	"inheritbuf += "" SharedPort:"""		1086250	0		+=			
ANR	1086854	Identifier	inheritbuf		1086250	0					
ANR	1086855	PrimaryExpression	""" SharedPort:"""		1086250	1					
ANR	1086856	IdentifierDeclStatement	int fd = - 1 ;	7483:2:229244:229255	1086250	5	True				
ANR	1086857	IdentifierDecl	fd = - 1		1086250	0					
ANR	1086858	IdentifierDeclType	int		1086250	0					
ANR	1086859	Identifier	fd		1086250	1					
ANR	1086860	AssignmentExpression	fd = - 1		1086250	2		=			
ANR	1086861	Identifier	fd		1086250	0					
ANR	1086862	UnaryOperationExpression	- 1		1086250	1					
ANR	1086863	UnaryOperator	-		1086250	0					
ANR	1086864	PrimaryExpression	1		1086250	1					
ANR	1086865	ExpressionStatement	"shared_port_endpoint . serialize ( inheritbuf , fd )"	7484:2:229259:229304	1086250	6	True				
ANR	1086866	CallExpression	"shared_port_endpoint . serialize ( inheritbuf , fd )"		1086250	0					
ANR	1086867	Callee	shared_port_endpoint . serialize		1086250	0					
ANR	1086868	MemberAccess	shared_port_endpoint . serialize		1086250	0					
ANR	1086869	Identifier	shared_port_endpoint		1086250	0					
ANR	1086870	Identifier	serialize		1086250	1					
ANR	1086871	ArgumentList	inheritbuf		1086250	1					
ANR	1086872	Argument	inheritbuf		1086250	0					
ANR	1086873	Identifier	inheritbuf		1086250	0					
ANR	1086874	Argument	fd		1086250	1					
ANR	1086875	Identifier	fd		1086250	0					
ANR	1086876	ExpressionStatement	inheritFds [ numInheritFds ++ ] = fd	7485:8:229314:229346	1086250	7	True				
ANR	1086877	AssignmentExpression	inheritFds [ numInheritFds ++ ] = fd		1086250	0		=			
ANR	1086878	ArrayIndexing	inheritFds [ numInheritFds ++ ]		1086250	0					
ANR	1086879	Identifier	inheritFds		1086250	0					
ANR	1086880	PostIncDecOperationExpression	numInheritFds ++		1086250	1					
ANR	1086881	Identifier	numInheritFds		1086250	0					
ANR	1086882	IncDec	++		1086250	1					
ANR	1086883	Identifier	fd		1086250	1					
ANR	1086884	ExpressionStatement	inherit_handles = true	7486:2:229350:229372	1086250	8	True				
ANR	1086885	AssignmentExpression	inherit_handles = true		1086250	0		=			
ANR	1086886	Identifier	inherit_handles		1086250	0					
ANR	1086887	Identifier	true		1086250	1					
ANR	1086888	ElseStatement	else		1086250	0					
ANR	1086889	IfStatement	if ( want_command_port != FALSE )		1086250	0					
ANR	1086890	Condition	want_command_port != FALSE	7488:11:229388:229413	1086250	0	True				
ANR	1086891	EqualityExpression	want_command_port != FALSE		1086250	0		!=			
ANR	1086892	Identifier	want_command_port		1086250	0					
ANR	1086893	Identifier	FALSE		1086250	1					
ANR	1086894	CompoundStatement		173:2:5492:5538	1086250	1					
ANR	1086895	ExpressionStatement	inherit_handles = TRUE	7489:2:229421:229443	1086250	0	True				
ANR	1086896	AssignmentExpression	inherit_handles = TRUE		1086250	0		=			
ANR	1086897	Identifier	inherit_handles		1086250	0					
ANR	1086898	Identifier	TRUE		1086250	1					
ANR	1086899	IdentifierDeclStatement	SafeSock * ssock_ptr = want_udp ? & ssock : NULL ;	7490:2:229447:229493	1086250	1	True				
ANR	1086900	IdentifierDecl	* ssock_ptr = want_udp ? & ssock : NULL		1086250	0					
ANR	1086901	IdentifierDeclType	SafeSock *		1086250	0					
ANR	1086902	Identifier	ssock_ptr		1086250	1					
ANR	1086903	AssignmentExpression	* ssock_ptr = want_udp ? & ssock : NULL		1086250	2		=			
ANR	1086904	Identifier	ssock_ptr		1086250	0					
ANR	1086905	ConditionalExpression	want_udp ? & ssock : NULL		1086250	1					
ANR	1086906	Condition	want_udp		1086250	0					
ANR	1086907	Identifier	want_udp		1086250	0					
ANR	1086908	UnaryOperationExpression	& ssock		1086250	1					
ANR	1086909	UnaryOperator	&		1086250	0					
ANR	1086910	Identifier	ssock		1086250	1					
ANR	1086911	Identifier	NULL		1086250	2					
ANR	1086912	IfStatement	"if ( ! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false ) )"		1086250	2					
ANR	1086913	Condition	"! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"	7491:6:229501:229564	1086250	0	True				
ANR	1086914	UnaryOperationExpression	"! InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"		1086250	0					
ANR	1086915	UnaryOperator	!		1086250	0					
ANR	1086916	CallExpression	"InitCommandSockets ( want_command_port , & rsock , ssock_ptr , false )"		1086250	1					
ANR	1086917	Callee	InitCommandSockets		1086250	0					
ANR	1086918	Identifier	InitCommandSockets		1086250	0					
ANR	1086919	ArgumentList	want_command_port		1086250	1					
ANR	1086920	Argument	want_command_port		1086250	0					
ANR	1086921	Identifier	want_command_port		1086250	0					
ANR	1086922	Argument	& rsock		1086250	1					
ANR	1086923	UnaryOperationExpression	& rsock		1086250	0					
ANR	1086924	UnaryOperator	&		1086250	0					
ANR	1086925	Identifier	rsock		1086250	1					
ANR	1086926	Argument	ssock_ptr		1086250	2					
ANR	1086927	Identifier	ssock_ptr		1086250	0					
ANR	1086928	Argument	false		1086250	3					
ANR	1086929	Identifier	false		1086250	0					
ANR	1086930	CompoundStatement		174:72:5612:5612	1086250	1					
ANR	1086931	GotoStatement	goto wrapup ;	7493:3:229634:229645	1086250	0	True				
ANR	1086932	Identifier	wrapup		1086250	0					
ANR	1086933	IfStatement	if ( ( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) ) )		1086250	3					
ANR	1086934	Condition	( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) )	7497:7:229723:229808	1086250	0	True				
ANR	1086935	OrExpression	( ! rsock . set_inheritable ( TRUE ) ) || ( m_wants_dc_udp && ! ssock . set_inheritable ( TRUE ) )		1086250	0		||			
ANR	1086936	UnaryOperationExpression	! rsock . set_inheritable ( TRUE )		1086250	0					
ANR	1086937	UnaryOperator	!		1086250	0					
ANR	1086938	CallExpression	rsock . set_inheritable ( TRUE )		1086250	1					
ANR	1086939	Callee	rsock . set_inheritable		1086250	0					
ANR	1086940	MemberAccess	rsock . set_inheritable		1086250	0					
ANR	1086941	Identifier	rsock		1086250	0					
ANR	1086942	Identifier	set_inheritable		1086250	1					
ANR	1086943	ArgumentList	TRUE		1086250	1					
ANR	1086944	Argument	TRUE		1086250	0					
ANR	1086945	Identifier	TRUE		1086250	0					
ANR	1086946	AndExpression	m_wants_dc_udp && ! ssock . set_inheritable ( TRUE )		1086250	1		&&			
ANR	1086947	Identifier	m_wants_dc_udp		1086250	0					
ANR	1086948	UnaryOperationExpression	! ssock . set_inheritable ( TRUE )		1086250	1					
ANR	1086949	UnaryOperator	!		1086250	0					
ANR	1086950	CallExpression	ssock . set_inheritable ( TRUE )		1086250	1					
ANR	1086951	Callee	ssock . set_inheritable		1086250	0					
ANR	1086952	MemberAccess	ssock . set_inheritable		1086250	0					
ANR	1086953	Identifier	ssock		1086250	0					
ANR	1086954	Identifier	set_inheritable		1086250	1					
ANR	1086955	ArgumentList	TRUE		1086250	1					
ANR	1086956	Argument	TRUE		1086250	0					
ANR	1086957	Identifier	TRUE		1086250	0					
ANR	1086958	CompoundStatement		181:55:5857:5857	1086250	1					
ANR	1086959	Statement	dprintf	7499:3:229817:229823	1086250	0	True				
ANR	1086960	Statement	(	7499:10:229824:229824	1086250	1	True				
ANR	1086961	Statement	D_ALWAYS	7499:11:229825:229832	1086250	2	True				
ANR	1086962	Statement	","	7499:19:229833:229833	1086250	3	True				
ANR	1086963	Statement	"""Create_Process:Failed to set command """	7499:20:229834:229872	1086250	4	True				
ANR	1086964	Statement	"""socks inheritable\\n"""	7500:5:229879:229899	1086250	5	True				
ANR	1086965	Statement	)	7500:26:229900:229900	1086250	6	True				
ANR	1086966	ExpressionStatement		7500:27:229901:229901	1086250	7	True				
ANR	1086967	GotoStatement	goto wrapup ;	7501:3:229906:229917	1086250	8	True				
ANR	1086968	Identifier	wrapup		1086250	0					
ANR	1086969	ExpressionStatement	"inheritbuf += "" """	7505:2:229987:230004	1086250	4	True				
ANR	1086970	AssignmentExpression	"inheritbuf += "" """		1086250	0		+=			
ANR	1086971	Identifier	inheritbuf		1086250	0					
ANR	1086972	PrimaryExpression	""" """		1086250	1					
ANR	1086973	ExpressionStatement	ptmp = rsock . serialize ( )	7506:2:230008:230032	1086250	5	True				
ANR	1086974	AssignmentExpression	ptmp = rsock . serialize ( )		1086250	0		=			
ANR	1086975	Identifier	ptmp		1086250	0					
ANR	1086976	CallExpression	rsock . serialize ( )		1086250	1					
ANR	1086977	Callee	rsock . serialize		1086250	0					
ANR	1086978	MemberAccess	rsock . serialize		1086250	0					
ANR	1086979	Identifier	rsock		1086250	0					
ANR	1086980	Identifier	serialize		1086250	1					
ANR	1086981	ArgumentList			1086250	1					
ANR	1086982	ExpressionStatement	inheritbuf += ptmp	7507:2:230036:230054	1086250	6	True				
ANR	1086983	AssignmentExpression	inheritbuf += ptmp		1086250	0		+=			
ANR	1086984	Identifier	inheritbuf		1086250	0					
ANR	1086985	Identifier	ptmp		1086250	1					
ANR	1086986	Statement	delete	7508:2:230058:230063	1086250	7	True				
ANR	1086987	Statement	[	7508:9:230065:230065	1086250	8	True				
ANR	1086988	Statement	]	7508:10:230066:230066	1086250	9	True				
ANR	1086989	ExpressionStatement	ptmp	7508:11:230067:230071	1086250	10	True				
ANR	1086990	Identifier	ptmp		1086250	0					
ANR	1086991	IfStatement	if ( want_udp )		1086250	11					
ANR	1086992	Condition	want_udp	7509:6:230079:230086	1086250	0	True				
ANR	1086993	Identifier	want_udp		1086250	0					
ANR	1086994	CompoundStatement		192:16:6134:6134	1086250	1					
ANR	1086995	ExpressionStatement	"inheritbuf += "" """	7510:3:230094:230111	1086250	0	True				
ANR	1086996	AssignmentExpression	"inheritbuf += "" """		1086250	0		+=			
ANR	1086997	Identifier	inheritbuf		1086250	0					
ANR	1086998	PrimaryExpression	""" """		1086250	1					
ANR	1086999	ExpressionStatement	ptmp = ssock . serialize ( )	7511:3:230116:230140	1086250	1	True				
ANR	1087000	AssignmentExpression	ptmp = ssock . serialize ( )		1086250	0		=			
ANR	1087001	Identifier	ptmp		1086250	0					
ANR	1087002	CallExpression	ssock . serialize ( )		1086250	1					
ANR	1087003	Callee	ssock . serialize		1086250	0					
ANR	1087004	MemberAccess	ssock . serialize		1086250	0					
ANR	1087005	Identifier	ssock		1086250	0					
ANR	1087006	Identifier	serialize		1086250	1					
ANR	1087007	ArgumentList			1086250	1					
ANR	1087008	ExpressionStatement	inheritbuf += ptmp	7512:3:230145:230163	1086250	2	True				
ANR	1087009	AssignmentExpression	inheritbuf += ptmp		1086250	0		+=			
ANR	1087010	Identifier	inheritbuf		1086250	0					
ANR	1087011	Identifier	ptmp		1086250	1					
ANR	1087012	Statement	delete	7513:3:230168:230173	1086250	3	True				
ANR	1087013	Statement	[	7513:10:230175:230175	1086250	4	True				
ANR	1087014	Statement	]	7513:11:230176:230176	1086250	5	True				
ANR	1087015	ExpressionStatement	ptmp	7513:12:230177:230181	1086250	6	True				
ANR	1087016	Identifier	ptmp		1086250	0					
ANR	1087017	ExpressionStatement	inheritFds [ numInheritFds ++ ] = rsock . get_file_desc ( )	7517:8:230266:230317	1086250	12	True				
ANR	1087018	AssignmentExpression	inheritFds [ numInheritFds ++ ] = rsock . get_file_desc ( )		1086250	0		=			
ANR	1087019	ArrayIndexing	inheritFds [ numInheritFds ++ ]		1086250	0					
ANR	1087020	Identifier	inheritFds		1086250	0					
ANR	1087021	PostIncDecOperationExpression	numInheritFds ++		1086250	1					
ANR	1087022	Identifier	numInheritFds		1086250	0					
ANR	1087023	IncDec	++		1086250	1					
ANR	1087024	CallExpression	rsock . get_file_desc ( )		1086250	1					
ANR	1087025	Callee	rsock . get_file_desc		1086250	0					
ANR	1087026	MemberAccess	rsock . get_file_desc		1086250	0					
ANR	1087027	Identifier	rsock		1086250	0					
ANR	1087028	Identifier	get_file_desc		1086250	1					
ANR	1087029	ArgumentList			1086250	1					
ANR	1087030	IfStatement	if ( want_udp )		1086250	13					
ANR	1087031	Condition	want_udp	7518:6:230325:230332	1086250	0	True				
ANR	1087032	Identifier	want_udp		1086250	0					
ANR	1087033	CompoundStatement		201:16:6380:6380	1086250	1					
ANR	1087034	ExpressionStatement	inheritFds [ numInheritFds ++ ] = ssock . get_file_desc ( )	7519:3:230340:230391	1086250	0	True				
ANR	1087035	AssignmentExpression	inheritFds [ numInheritFds ++ ] = ssock . get_file_desc ( )		1086250	0		=			
ANR	1087036	ArrayIndexing	inheritFds [ numInheritFds ++ ]		1086250	0					
ANR	1087037	Identifier	inheritFds		1086250	0					
ANR	1087038	PostIncDecOperationExpression	numInheritFds ++		1086250	1					
ANR	1087039	Identifier	numInheritFds		1086250	0					
ANR	1087040	IncDec	++		1086250	1					
ANR	1087041	CallExpression	ssock . get_file_desc ( )		1086250	1					
ANR	1087042	Callee	ssock . get_file_desc		1086250	0					
ANR	1087043	MemberAccess	ssock . get_file_desc		1086250	0					
ANR	1087044	Identifier	ssock		1086250	0					
ANR	1087045	Identifier	get_file_desc		1086250	1					
ANR	1087046	ArgumentList			1086250	1					
ANR	1087047	ExpressionStatement	"inheritbuf += "" 0"""	7522:1:230401:230419	1086250	58	True				
ANR	1087048	AssignmentExpression	"inheritbuf += "" 0"""		1086250	0		+=			
ANR	1087049	Identifier	inheritbuf		1086250	0					
ANR	1087050	PrimaryExpression	""" 0"""		1086250	1					
ANR	1087051	IfStatement	if ( want_command_port != FALSE )		1086250	59					
ANR	1087052	Condition	want_command_port != FALSE	7537:4:231065:231090	1086250	0	True				
ANR	1087053	EqualityExpression	want_command_port != FALSE		1086250	0		!=			
ANR	1087054	Identifier	want_command_port		1086250	0					
ANR	1087055	Identifier	FALSE		1086250	1					
ANR	1087056	CompoundStatement		264:2:8482:8562	1086250	1					
ANR	1087057	IdentifierDeclStatement	char * c_session_id = Condor_Crypt_Base :: randomHexKey ( ) ;	7539:2:231098:231152	1086250	0	True				
ANR	1087058	IdentifierDecl	* c_session_id = Condor_Crypt_Base :: randomHexKey ( )		1086250	0					
ANR	1087059	IdentifierDeclType	char *		1086250	0					
ANR	1087060	Identifier	c_session_id		1086250	1					
ANR	1087061	AssignmentExpression	* c_session_id = Condor_Crypt_Base :: randomHexKey ( )		1086250	2		=			
ANR	1087062	Identifier	c_session_id		1086250	0					
ANR	1087063	CallExpression	Condor_Crypt_Base :: randomHexKey ( )		1086250	1					
ANR	1087064	Callee	Condor_Crypt_Base :: randomHexKey		1086250	0					
ANR	1087065	Identifier	Condor_Crypt_Base :: randomHexKey		1086250	0					
ANR	1087066	ArgumentList			1086250	1					
ANR	1087067	IdentifierDeclStatement	char * c_session_key = Condor_Crypt_Base :: randomHexKey ( ) ;	7540:2:231156:231211	1086250	1	True				
ANR	1087068	IdentifierDecl	* c_session_key = Condor_Crypt_Base :: randomHexKey ( )		1086250	0					
ANR	1087069	IdentifierDeclType	char *		1086250	0					
ANR	1087070	Identifier	c_session_key		1086250	1					
ANR	1087071	AssignmentExpression	* c_session_key = Condor_Crypt_Base :: randomHexKey ( )		1086250	2		=			
ANR	1087072	Identifier	c_session_key		1086250	0					
ANR	1087073	CallExpression	Condor_Crypt_Base :: randomHexKey ( )		1086250	1					
ANR	1087074	Callee	Condor_Crypt_Base :: randomHexKey		1086250	0					
ANR	1087075	Identifier	Condor_Crypt_Base :: randomHexKey		1086250	0					
ANR	1087076	ArgumentList			1086250	1					
ANR	1087077	ExpressionStatement	session_id . assign ( c_session_id )	7542:2:231216:231247	1086250	2	True				
ANR	1087078	CallExpression	session_id . assign ( c_session_id )		1086250	0					
ANR	1087079	Callee	session_id . assign		1086250	0					
ANR	1087080	MemberAccess	session_id . assign		1086250	0					
ANR	1087081	Identifier	session_id		1086250	0					
ANR	1087082	Identifier	assign		1086250	1					
ANR	1087083	ArgumentList	c_session_id		1086250	1					
ANR	1087084	Argument	c_session_id		1086250	0					
ANR	1087085	Identifier	c_session_id		1086250	0					
ANR	1087086	IdentifierDeclStatement	std :: string session_key ( c_session_key ) ;	7543:2:231251:231289	1086250	3	True				
ANR	1087087	IdentifierDecl	session_key ( c_session_key )		1086250	0					
ANR	1087088	IdentifierDeclType	std :: string		1086250	0					
ANR	1087089	Identifier	session_key		1086250	1					
ANR	1087090	Identifier	c_session_key		1086250	2					
ANR	1087091	ExpressionStatement	free ( c_session_id )	7545:2:231294:231312	1086250	4	True				
ANR	1087092	CallExpression	free ( c_session_id )		1086250	0					
ANR	1087093	Callee	free		1086250	0					
ANR	1087094	Identifier	free		1086250	0					
ANR	1087095	ArgumentList	c_session_id		1086250	1					
ANR	1087096	Argument	c_session_id		1086250	0					
ANR	1087097	Identifier	c_session_id		1086250	0					
ANR	1087098	ExpressionStatement	free ( c_session_key )	7546:2:231316:231335	1086250	5	True				
ANR	1087099	CallExpression	free ( c_session_key )		1086250	0					
ANR	1087100	Callee	free		1086250	0					
ANR	1087101	Identifier	free		1086250	0					
ANR	1087102	ArgumentList	c_session_key		1086250	1					
ANR	1087103	Argument	c_session_key		1086250	0					
ANR	1087104	Identifier	c_session_key		1086250	0					
ANR	1087105	IdentifierDeclStatement	char const * session_id_c_str = session_id . c_str ( ) ;	7555:2:231757:231806	1086250	6	True				
ANR	1087106	IdentifierDecl	* session_id_c_str = session_id . c_str ( )		1086250	0					
ANR	1087107	IdentifierDeclType	char const *		1086250	0					
ANR	1087108	Identifier	session_id_c_str		1086250	1					
ANR	1087109	AssignmentExpression	* session_id_c_str = session_id . c_str ( )		1086250	2		=			
ANR	1087110	Identifier	session_id_c_str		1086250	0					
ANR	1087111	CallExpression	session_id . c_str ( )		1086250	1					
ANR	1087112	Callee	session_id . c_str		1086250	0					
ANR	1087113	MemberAccess	session_id . c_str		1086250	0					
ANR	1087114	Identifier	session_id		1086250	0					
ANR	1087115	Identifier	c_str		1086250	1					
ANR	1087116	ArgumentList			1086250	1					
ANR	1087117	IdentifierDeclStatement	char const * session_key_c_str = session_key . c_str ( ) ;	7556:2:231810:231861	1086250	7	True				
ANR	1087118	IdentifierDecl	* session_key_c_str = session_key . c_str ( )		1086250	0					
ANR	1087119	IdentifierDeclType	char const *		1086250	0					
ANR	1087120	Identifier	session_key_c_str		1086250	1					
ANR	1087121	AssignmentExpression	* session_key_c_str = session_key . c_str ( )		1086250	2		=			
ANR	1087122	Identifier	session_key_c_str		1086250	0					
ANR	1087123	CallExpression	session_key . c_str ( )		1086250	1					
ANR	1087124	Callee	session_key . c_str		1086250	0					
ANR	1087125	MemberAccess	session_key . c_str		1086250	0					
ANR	1087126	Identifier	session_key		1086250	0					
ANR	1087127	Identifier	c_str		1086250	1					
ANR	1087128	ArgumentList			1086250	1					
ANR	1087129	IdentifierDeclStatement	"bool rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 ) ;"	7558:2:231866:232023	1086250	8	True				
ANR	1087130	IdentifierDecl	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		1086250	0					
ANR	1087131	IdentifierDeclType	bool		1086250	0					
ANR	1087132	Identifier	rc		1086250	1					
ANR	1087133	AssignmentExpression	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		1086250	2		=			
ANR	1087134	Identifier	rc		1086250	0					
ANR	1087135	CallExpression	"getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , session_id_c_str , session_key_c_str , NULL , CONDOR_CHILD_FQU , NULL , 0 )"		1086250	1					
ANR	1087136	Callee	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1086250	0					
ANR	1087137	PtrMemberAccess	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1086250	0					
ANR	1087138	CallExpression	getSecMan ( )		1086250	0					
ANR	1087139	Callee	getSecMan		1086250	0					
ANR	1087140	Identifier	getSecMan		1086250	0					
ANR	1087141	ArgumentList			1086250	1					
ANR	1087142	Identifier	CreateNonNegotiatedSecuritySession		1086250	1					
ANR	1087143	ArgumentList	DAEMON		1086250	1					
ANR	1087144	Argument	DAEMON		1086250	0					
ANR	1087145	Identifier	DAEMON		1086250	0					
ANR	1087146	Argument	session_id_c_str		1086250	1					
ANR	1087147	Identifier	session_id_c_str		1086250	0					
ANR	1087148	Argument	session_key_c_str		1086250	2					
ANR	1087149	Identifier	session_key_c_str		1086250	0					
ANR	1087150	Argument	NULL		1086250	3					
ANR	1087151	Identifier	NULL		1086250	0					
ANR	1087152	Argument	CONDOR_CHILD_FQU		1086250	4					
ANR	1087153	Identifier	CONDOR_CHILD_FQU		1086250	0					
ANR	1087154	Argument	NULL		1086250	5					
ANR	1087155	Identifier	NULL		1086250	0					
ANR	1087156	Argument	0		1086250	6					
ANR	1087157	PrimaryExpression	0		1086250	0					
ANR	1087158	IfStatement	if ( ! rc )		1086250	9					
ANR	1087159	Condition	! rc	7567:5:232031:232033	1086250	0	True				
ANR	1087160	UnaryOperationExpression	! rc		1086250	0					
ANR	1087161	UnaryOperator	!		1086250	0					
ANR	1087162	Identifier	rc		1086250	1					
ANR	1087163	CompoundStatement		251:2:8083:8083	1086250	1					
ANR	1087164	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to create security session for child daemon.\\n"" )"	7569:3:232043:232139	1086250	0	True				
ANR	1087165	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to create security session for child daemon.\\n"" )"		1086250	0					
ANR	1087166	Callee	dprintf		1086250	0					
ANR	1087167	Identifier	dprintf		1086250	0					
ANR	1087168	ArgumentList	D_ALWAYS		1086250	1					
ANR	1087169	Argument	D_ALWAYS		1086250	0					
ANR	1087170	Identifier	D_ALWAYS		1086250	0					
ANR	1087171	Argument	"""ERROR: Create_Process failed to create security session for child daemon.\\n"""		1086250	1					
ANR	1087172	PrimaryExpression	"""ERROR: Create_Process failed to create security session for child daemon.\\n"""		1086250	0					
ANR	1087173	GotoStatement	goto wrapup ;	7570:3:232144:232155	1086250	1	True				
ANR	1087174	Identifier	wrapup		1086250	0					
ANR	1087175	ExpressionStatement	"privateinheritbuf += "" SessionKey:"""	7572:2:232163:232198	1086250	10	True				
ANR	1087176	AssignmentExpression	"privateinheritbuf += "" SessionKey:"""		1086250	0		+=			
ANR	1087177	Identifier	privateinheritbuf		1086250	0					
ANR	1087178	PrimaryExpression	""" SessionKey:"""		1086250	1					
ANR	1087179	IdentifierDeclStatement	MyString session_info ;	7574:2:232203:232224	1086250	11	True				
ANR	1087180	IdentifierDecl	session_info		1086250	0					
ANR	1087181	IdentifierDeclType	MyString		1086250	0					
ANR	1087182	Identifier	session_info		1086250	1					
ANR	1087183	ExpressionStatement	"rc = getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"	7575:2:232228:232298	1086250	12	True				
ANR	1087184	AssignmentExpression	"rc = getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"		1086250	0		=			
ANR	1087185	Identifier	rc		1086250	0					
ANR	1087186	CallExpression	"getSecMan ( ) -> ExportSecSessionInfo ( session_id_c_str , session_info )"		1086250	1					
ANR	1087187	Callee	getSecMan ( ) -> ExportSecSessionInfo		1086250	0					
ANR	1087188	PtrMemberAccess	getSecMan ( ) -> ExportSecSessionInfo		1086250	0					
ANR	1087189	CallExpression	getSecMan ( )		1086250	0					
ANR	1087190	Callee	getSecMan		1086250	0					
ANR	1087191	Identifier	getSecMan		1086250	0					
ANR	1087192	ArgumentList			1086250	1					
ANR	1087193	Identifier	ExportSecSessionInfo		1086250	1					
ANR	1087194	ArgumentList	session_id_c_str		1086250	1					
ANR	1087195	Argument	session_id_c_str		1086250	0					
ANR	1087196	Identifier	session_id_c_str		1086250	0					
ANR	1087197	Argument	session_info		1086250	1					
ANR	1087198	Identifier	session_info		1086250	0					
ANR	1087199	IfStatement	if ( ! rc )		1086250	13					
ANR	1087200	Condition	! rc	7576:5:232305:232307	1086250	0	True				
ANR	1087201	UnaryOperationExpression	! rc		1086250	0					
ANR	1087202	UnaryOperator	!		1086250	0					
ANR	1087203	Identifier	rc		1086250	1					
ANR	1087204	CompoundStatement		260:2:8357:8357	1086250	1					
ANR	1087205	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to export security session for child daemon.\\n"" )"	7578:3:232317:232413	1086250	0	True				
ANR	1087206	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Create_Process failed to export security session for child daemon.\\n"" )"		1086250	0					
ANR	1087207	Callee	dprintf		1086250	0					
ANR	1087208	Identifier	dprintf		1086250	0					
ANR	1087209	ArgumentList	D_ALWAYS		1086250	1					
ANR	1087210	Argument	D_ALWAYS		1086250	0					
ANR	1087211	Identifier	D_ALWAYS		1086250	0					
ANR	1087212	Argument	"""ERROR: Create_Process failed to export security session for child daemon.\\n"""		1086250	1					
ANR	1087213	PrimaryExpression	"""ERROR: Create_Process failed to export security session for child daemon.\\n"""		1086250	0					
ANR	1087214	GotoStatement	goto wrapup ;	7579:3:232418:232429	1086250	1	True				
ANR	1087215	Identifier	wrapup		1086250	0					
ANR	1087216	IdentifierDeclStatement	"ClaimIdParser claimId ( session_id_c_str , session_info . Value ( ) , session_key_c_str ) ;"	7581:2:232437:232517	1086250	14	True				
ANR	1087217	IdentifierDecl	"claimId ( session_id_c_str , session_info . Value ( ) , session_key_c_str )"		1086250	0					
ANR	1087218	IdentifierDeclType	ClaimIdParser		1086250	0					
ANR	1087219	Identifier	claimId		1086250	1					
ANR	1087220	Expression	"session_id_c_str , session_info . Value ( ) , session_key_c_str"		1086250	2					
ANR	1087221	Identifier	session_id_c_str		1086250	0					
ANR	1087222	Expression	"session_info . Value ( ) , session_key_c_str"		1086250	1					
ANR	1087223	CallExpression	session_info . Value ( )		1086250	0					
ANR	1087224	Callee	session_info . Value		1086250	0					
ANR	1087225	MemberAccess	session_info . Value		1086250	0					
ANR	1087226	Identifier	session_info		1086250	0					
ANR	1087227	Identifier	Value		1086250	1					
ANR	1087228	ArgumentList			1086250	1					
ANR	1087229	Identifier	session_key_c_str		1086250	1					
ANR	1087230	ExpressionStatement	privateinheritbuf += claimId . claimId ( )	7582:2:232521:232559	1086250	15	True				
ANR	1087231	AssignmentExpression	privateinheritbuf += claimId . claimId ( )		1086250	0		+=			
ANR	1087232	Identifier	privateinheritbuf		1086250	0					
ANR	1087233	CallExpression	claimId . claimId ( )		1086250	1					
ANR	1087234	Callee	claimId . claimId		1086250	0					
ANR	1087235	MemberAccess	claimId . claimId		1086250	0					
ANR	1087236	Identifier	claimId		1086250	0					
ANR	1087237	Identifier	claimId		1086250	1					
ANR	1087238	ArgumentList			1086250	1					
ANR	1087239	IfStatement	if ( fd_inherit_list != NULL )		1086250	60					
ANR	1087240	Condition	fd_inherit_list != NULL	7588:5:232759:232781	1086250	0	True				
ANR	1087241	EqualityExpression	fd_inherit_list != NULL		1086250	0		!=			
ANR	1087242	Identifier	fd_inherit_list		1086250	0					
ANR	1087243	Identifier	NULL		1086250	1					
ANR	1087244	CompoundStatement		271:30:8829:8829	1086250	1					
ANR	1087245	Statement	EXCEPT	7590:2:232807:232812	1086250	0	True				
ANR	1087246	Statement	(	7590:8:232813:232813	1086250	1	True				
ANR	1087247	Statement	"""Create_Process: fd_inherit_list specified, """	7590:9:232814:232858	1086250	2	True				
ANR	1087248	Statement	"""but not implemented on Windows: programmer error"""	7591:13:232873:232922	1086250	3	True				
ANR	1087249	Statement	)	7591:63:232923:232923	1086250	4	True				
ANR	1087250	ExpressionStatement		7591:64:232924:232924	1086250	5	True				
ANR	1087251	ExpressionStatement	"create_id ( & time_of_fork , & mii )"	7605:1:233319:233349	1086250	61	True				
ANR	1087252	CallExpression	"create_id ( & time_of_fork , & mii )"		1086250	0					
ANR	1087253	Callee	create_id		1086250	0					
ANR	1087254	Identifier	create_id		1086250	0					
ANR	1087255	ArgumentList	& time_of_fork		1086250	1					
ANR	1087256	Argument	& time_of_fork		1086250	0					
ANR	1087257	UnaryOperationExpression	& time_of_fork		1086250	0					
ANR	1087258	UnaryOperator	&		1086250	0					
ANR	1087259	Identifier	time_of_fork		1086250	1					
ANR	1087260	Argument	& mii		1086250	1					
ANR	1087261	UnaryOperationExpression	& mii		1086250	0					
ANR	1087262	UnaryOperator	&		1086250	0					
ANR	1087263	Identifier	mii		1086250	1					
ANR	1087264	IfStatement	if ( ( family_info != NULL ) && ( m_proc_family == NULL ) )		1086250	62					
ANR	1087265	Condition	( family_info != NULL ) && ( m_proc_family == NULL )	7612:5:233585:233632	1086250	0	True				
ANR	1087266	AndExpression	( family_info != NULL ) && ( m_proc_family == NULL )		1086250	0		&&			
ANR	1087267	EqualityExpression	family_info != NULL		1086250	0		!=			
ANR	1087268	Identifier	family_info		1086250	0					
ANR	1087269	Identifier	NULL		1086250	1					
ANR	1087270	EqualityExpression	m_proc_family == NULL		1086250	1		==			
ANR	1087271	Identifier	m_proc_family		1086250	0					
ANR	1087272	Identifier	NULL		1086250	1					
ANR	1087273	CompoundStatement		295:55:9680:9680	1086250	1					
ANR	1087274	ExpressionStatement	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )	7613:2:233639:233712	1086250	0	True				
ANR	1087275	AssignmentExpression	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		1086250	0		=			
ANR	1087276	Identifier	m_proc_family		1086250	0					
ANR	1087277	CallExpression	ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		1086250	1					
ANR	1087278	Callee	ProcFamilyInterface :: create		1086250	0					
ANR	1087279	Identifier	ProcFamilyInterface :: create		1086250	0					
ANR	1087280	ArgumentList	get_mySubSystem ( ) -> getName ( )		1086250	1					
ANR	1087281	Argument	get_mySubSystem ( ) -> getName ( )		1086250	0					
ANR	1087282	CallExpression	get_mySubSystem ( ) -> getName ( )		1086250	0					
ANR	1087283	Callee	get_mySubSystem ( ) -> getName		1086250	0					
ANR	1087284	PtrMemberAccess	get_mySubSystem ( ) -> getName		1086250	0					
ANR	1087285	CallExpression	get_mySubSystem ( )		1086250	0					
ANR	1087286	Callee	get_mySubSystem		1086250	0					
ANR	1087287	Identifier	get_mySubSystem		1086250	0					
ANR	1087288	ArgumentList			1086250	1					
ANR	1087289	Identifier	getName		1086250	1					
ANR	1087290	ArgumentList			1086250	1					
ANR	1087291	ExpressionStatement	ASSERT ( m_proc_family )	7614:2:233716:233737	1086250	1	True				
ANR	1087292	CallExpression	ASSERT ( m_proc_family )		1086250	0					
ANR	1087293	Callee	ASSERT		1086250	0					
ANR	1087294	Identifier	ASSERT		1086250	0					
ANR	1087295	ArgumentList	m_proc_family		1086250	1					
ANR	1087296	Argument	m_proc_family		1086250	0					
ANR	1087297	Identifier	m_proc_family		1086250	0					
ANR	1087298	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		1086250	63					
ANR	1087299	ForInit	i = 0 ;	7620:6:233940:233943	1086250	0	True				
ANR	1087300	AssignmentExpression	i = 0		1086250	0		=			
ANR	1087301	Identifier	i		1086250	0					
ANR	1087302	PrimaryExpression	0		1086250	1					
ANR	1087303	Condition	i <= 2	7620:11:233945:233948	1086250	1	True				
ANR	1087304	RelationalExpression	i <= 2		1086250	0		<=			
ANR	1087305	Identifier	i		1086250	0					
ANR	1087306	PrimaryExpression	2		1086250	1					
ANR	1087307	PostIncDecOperationExpression	i ++	7620:17:233951:233953	1086250	2	True				
ANR	1087308	Identifier	i		1086250	0					
ANR	1087309	IncDec	++		1086250	1					
ANR	1087310	CompoundStatement		303:22:10001:10001	1086250	3					
ANR	1087311	IfStatement	if ( std && std [ i ] == DC_STD_FD_PIPE )		1086250	0					
ANR	1087312	Condition	std && std [ i ] == DC_STD_FD_PIPE	7621:6:233964:233994	1086250	0	True				
ANR	1087313	AndExpression	std && std [ i ] == DC_STD_FD_PIPE		1086250	0		&&			
ANR	1087314	Identifier	std		1086250	0					
ANR	1087315	EqualityExpression	std [ i ] == DC_STD_FD_PIPE		1086250	1		==			
ANR	1087316	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087317	Identifier	std		1086250	0					
ANR	1087318	Identifier	i		1086250	1					
ANR	1087319	Identifier	DC_STD_FD_PIPE		1086250	1					
ANR	1087320	CompoundStatement		304:39:10042:10042	1086250	1					
ANR	1087321	IfStatement	if ( i == 0 )		1086250	0					
ANR	1087322	Condition	i == 0	7622:7:234006:234011	1086250	0	True				
ANR	1087323	EqualityExpression	i == 0		1086250	0		==			
ANR	1087324	Identifier	i		1086250	0					
ANR	1087325	PrimaryExpression	0		1086250	1					
ANR	1087326	CompoundStatement		305:15:10059:10059	1086250	1					
ANR	1087327	IfStatement	"if ( ! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true ) )"		1086250	0					
ANR	1087328	Condition	"! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"	7623:8:234024:234078	1086250	0	True				
ANR	1087329	UnaryOperationExpression	"! Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"		1086250	0					
ANR	1087330	UnaryOperator	!		1086250	0					
ANR	1087331	CallExpression	"Create_Pipe ( dc_pipe_fds [ i ] , false , false , false , true )"		1086250	1					
ANR	1087332	Callee	Create_Pipe		1086250	0					
ANR	1087333	Identifier	Create_Pipe		1086250	0					
ANR	1087334	ArgumentList	dc_pipe_fds [ i ]		1086250	1					
ANR	1087335	Argument	dc_pipe_fds [ i ]		1086250	0					
ANR	1087336	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1087337	Identifier	dc_pipe_fds		1086250	0					
ANR	1087338	Identifier	i		1086250	1					
ANR	1087339	Argument	false		1086250	1					
ANR	1087340	Identifier	false		1086250	0					
ANR	1087341	Argument	false		1086250	2					
ANR	1087342	Identifier	false		1086250	0					
ANR	1087343	Argument	false		1086250	3					
ANR	1087344	Identifier	false		1086250	0					
ANR	1087345	Argument	true		1086250	4					
ANR	1087346	Identifier	true		1086250	0					
ANR	1087347	CompoundStatement		306:65:10126:10126	1086250	1					
ANR	1087348	Statement	dprintf	7624:5:234088:234094	1086250	0	True				
ANR	1087349	Statement	(	7624:12:234095:234095	1086250	1	True				
ANR	1087350	Statement	D_ALWAYS	7624:13:234096:234103	1086250	2	True				
ANR	1087351	Statement	|	7624:21:234104:234104	1086250	3	True				
ANR	1087352	Statement	D_FAILURE	7624:22:234105:234113	1086250	4	True				
ANR	1087353	Statement	","	7624:31:234114:234114	1086250	5	True				
ANR	1087354	Statement	"""ERROR: Create_Process: """	7624:33:234116:234140	1086250	6	True				
ANR	1087355	Statement	"""Can't create DC pipe for stdin.\\n"""	7625:7:234149:234183	1086250	7	True				
ANR	1087356	Statement	)	7625:42:234184:234184	1086250	8	True				
ANR	1087357	ExpressionStatement		7625:43:234185:234185	1086250	9	True				
ANR	1087358	GotoStatement	goto wrapup ;	7626:5:234192:234203	1086250	10	True				
ANR	1087359	Identifier	wrapup		1086250	0					
ANR	1087360	ExpressionStatement	std [ i ] = dc_pipe_fds [ i ] [ 0 ]	7629:4:234271:234297	1086250	1	True				
ANR	1087361	AssignmentExpression	std [ i ] = dc_pipe_fds [ i ] [ 0 ]		1086250	0		=			
ANR	1087362	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087363	Identifier	std		1086250	0					
ANR	1087364	Identifier	i		1086250	1					
ANR	1087365	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	1					
ANR	1087366	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1087367	Identifier	dc_pipe_fds		1086250	0					
ANR	1087368	Identifier	i		1086250	1					
ANR	1087369	PrimaryExpression	0		1086250	1					
ANR	1087370	ElseStatement	else		1086250	0					
ANR	1087371	CompoundStatement		314:8:10357:10357	1086250	0					
ANR	1087372	IfStatement	"if ( ! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true ) )"		1086250	0					
ANR	1087373	Condition	"! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"	7632:8:234322:234368	1086250	0	True				
ANR	1087374	UnaryOperationExpression	"! Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"		1086250	0					
ANR	1087375	UnaryOperator	!		1086250	0					
ANR	1087376	CallExpression	"Create_Pipe ( dc_pipe_fds [ i ] , true , false , true )"		1086250	1					
ANR	1087377	Callee	Create_Pipe		1086250	0					
ANR	1087378	Identifier	Create_Pipe		1086250	0					
ANR	1087379	ArgumentList	dc_pipe_fds [ i ]		1086250	1					
ANR	1087380	Argument	dc_pipe_fds [ i ]		1086250	0					
ANR	1087381	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1087382	Identifier	dc_pipe_fds		1086250	0					
ANR	1087383	Identifier	i		1086250	1					
ANR	1087384	Argument	true		1086250	1					
ANR	1087385	Identifier	true		1086250	0					
ANR	1087386	Argument	false		1086250	2					
ANR	1087387	Identifier	false		1086250	0					
ANR	1087388	Argument	true		1086250	3					
ANR	1087389	Identifier	true		1086250	0					
ANR	1087390	CompoundStatement		315:57:10416:10416	1086250	1					
ANR	1087391	Statement	dprintf	7633:5:234378:234384	1086250	0	True				
ANR	1087392	Statement	(	7633:12:234385:234385	1086250	1	True				
ANR	1087393	Statement	D_ALWAYS	7633:13:234386:234393	1086250	2	True				
ANR	1087394	Statement	|	7633:21:234394:234394	1086250	3	True				
ANR	1087395	Statement	D_FAILURE	7633:22:234395:234403	1086250	4	True				
ANR	1087396	Statement	","	7633:31:234404:234404	1086250	5	True				
ANR	1087397	Statement	"""ERROR: Create_Process: """	7633:33:234406:234430	1086250	6	True				
ANR	1087398	Statement	"""Can't create DC pipe for %s.\\n"""	7634:7:234439:234470	1086250	7	True				
ANR	1087399	Statement	","	7634:39:234471:234471	1086250	8	True				
ANR	1087400	Statement	i	7635:7:234480:234480	1086250	9	True				
ANR	1087401	Statement	==	7635:9:234482:234483	1086250	10	True				
ANR	1087402	Statement	1	7635:12:234485:234485	1086250	11	True				
ANR	1087403	Statement	?	7635:14:234487:234487	1086250	12	True				
ANR	1087404	Statement	"""stdout"""	7635:16:234489:234496	1086250	13	True				
ANR	1087405	Statement	:	7635:25:234498:234498	1086250	14	True				
ANR	1087406	Statement	"""stderr"""	7635:27:234500:234507	1086250	15	True				
ANR	1087407	Statement	)	7635:35:234508:234508	1086250	16	True				
ANR	1087408	ExpressionStatement		7635:36:234509:234509	1086250	17	True				
ANR	1087409	GotoStatement	goto wrapup ;	7636:5:234516:234527	1086250	18	True				
ANR	1087410	Identifier	wrapup		1086250	0					
ANR	1087411	ExpressionStatement	std [ i ] = dc_pipe_fds [ i ] [ 1 ]	7639:4:234596:234622	1086250	1	True				
ANR	1087412	AssignmentExpression	std [ i ] = dc_pipe_fds [ i ] [ 1 ]		1086250	0		=			
ANR	1087413	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087414	Identifier	std		1086250	0					
ANR	1087415	Identifier	i		1086250	1					
ANR	1087416	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		1086250	1					
ANR	1087417	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1087418	Identifier	dc_pipe_fds		1086250	0					
ANR	1087419	Identifier	i		1086250	1					
ANR	1087420	PrimaryExpression	1		1086250	1					
ANR	1087421	IdentifierDeclStatement	STARTUPINFO si ;	7648:1:234686:234700	1086250	64	True				
ANR	1087422	IdentifierDecl	si		1086250	0					
ANR	1087423	IdentifierDeclType	STARTUPINFO		1086250	0					
ANR	1087424	Identifier	si		1086250	1					
ANR	1087425	IdentifierDeclStatement	PROCESS_INFORMATION piProcess ;	7649:1:234703:234732	1086250	65	True				
ANR	1087426	IdentifierDecl	piProcess		1086250	0					
ANR	1087427	IdentifierDeclType	PROCESS_INFORMATION		1086250	0					
ANR	1087428	Identifier	piProcess		1086250	1					
ANR	1087429	ExpressionStatement	"ZeroMemory ( & si , sizeof ( si ) )"	7652:1:234792:234818	1086250	66	True				
ANR	1087430	CallExpression	"ZeroMemory ( & si , sizeof ( si ) )"		1086250	0					
ANR	1087431	Callee	ZeroMemory		1086250	0					
ANR	1087432	Identifier	ZeroMemory		1086250	0					
ANR	1087433	ArgumentList	& si		1086250	1					
ANR	1087434	Argument	& si		1086250	0					
ANR	1087435	UnaryOperationExpression	& si		1086250	0					
ANR	1087436	UnaryOperator	&		1086250	0					
ANR	1087437	Identifier	si		1086250	1					
ANR	1087438	Argument	sizeof ( si )		1086250	1					
ANR	1087439	SizeofExpression	sizeof ( si )		1086250	0					
ANR	1087440	Sizeof	sizeof		1086250	0					
ANR	1087441	SizeofOperand	si		1086250	1					
ANR	1087442	ExpressionStatement	si . cb = sizeof ( si )	7653:1:234821:234839	1086250	67	True				
ANR	1087443	AssignmentExpression	si . cb = sizeof ( si )		1086250	0		=			
ANR	1087444	MemberAccess	si . cb		1086250	0					
ANR	1087445	Identifier	si		1086250	0					
ANR	1087446	Identifier	cb		1086250	1					
ANR	1087447	SizeofExpression	sizeof ( si )		1086250	1					
ANR	1087448	Sizeof	sizeof		1086250	0					
ANR	1087449	SizeofOperand	si		1086250	1					
ANR	1087450	Statement	forker_pid	7656:1:234900:234909	1086250	68	True				
ANR	1087451	Statement	=	7656:12:234911:234911	1086250	69	True				
ANR	1087452	Statement	::	7656:14:234913:234914	1086250	70	True				
ANR	1087453	ExpressionStatement	GetCurrentProcessId ( )	7656:16:234915:234936	1086250	71	True				
ANR	1087454	CallExpression	GetCurrentProcessId ( )		1086250	0					
ANR	1087455	Callee	GetCurrentProcessId		1086250	0					
ANR	1087456	Identifier	GetCurrentProcessId		1086250	0					
ANR	1087457	ArgumentList			1086250	1					
ANR	1087458	IfStatement	if ( std )		1086250	72					
ANR	1087459	Condition	std	7678:6:235850:235852	1086250	0	True				
ANR	1087460	Identifier	std		1086250	0					
ANR	1087461	CompoundStatement		363:2:11926:11997	1086250	1					
ANR	1087462	IdentifierDeclStatement	int valid = FALSE ;	7679:2:235860:235877	1086250	0	True				
ANR	1087463	IdentifierDecl	valid = FALSE		1086250	0					
ANR	1087464	IdentifierDeclType	int		1086250	0					
ANR	1087465	Identifier	valid		1086250	1					
ANR	1087466	AssignmentExpression	valid = FALSE		1086250	2		=			
ANR	1087467	Identifier	FALSE		1086250	0					
ANR	1087468	Identifier	FALSE		1086250	1					
ANR	1087469	IdentifierDeclStatement	"HANDLE * std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError } ;"	7680:2:235881:235952	1086250	1	True				
ANR	1087470	IdentifierDecl	"* std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError }"		1086250	0					
ANR	1087471	IdentifierDeclType	HANDLE * [ 3 ]		1086250	0					
ANR	1087472	Identifier	std_handles		1086250	1					
ANR	1087473	PrimaryExpression	3		1086250	2					
ANR	1087474	AssignmentExpression	"* std_handles [ 3 ] = { & si . hStdInput , & si . hStdOutput , & si . hStdError }"		1086250	3		=			
ANR	1087475	Identifier	std_handles		1086250	0					
ANR	1087476	InitializerList	& si . hStdInput		1086250	1					
ANR	1087477	UnaryOperationExpression	& si . hStdInput		1086250	0					
ANR	1087478	UnaryOperator	&		1086250	0					
ANR	1087479	MemberAccess	si . hStdInput		1086250	1					
ANR	1087480	Identifier	si		1086250	0					
ANR	1087481	Identifier	hStdInput		1086250	1					
ANR	1087482	UnaryOperationExpression	& si . hStdOutput		1086250	1					
ANR	1087483	UnaryOperator	&		1086250	0					
ANR	1087484	MemberAccess	si . hStdOutput		1086250	1					
ANR	1087485	Identifier	si		1086250	0					
ANR	1087486	Identifier	hStdOutput		1086250	1					
ANR	1087487	UnaryOperationExpression	& si . hStdError		1086250	2					
ANR	1087488	UnaryOperator	&		1086250	0					
ANR	1087489	MemberAccess	si . hStdError		1086250	1					
ANR	1087490	Identifier	si		1086250	0					
ANR	1087491	Identifier	hStdError		1086250	1					
ANR	1087492	ForStatement	for ( int i = 0 ; i < 3 ; i ++ )		1086250	2					
ANR	1087493	ForInit	int i = 0 ;	7681:7:235961:235970	1086250	0	True				
ANR	1087494	IdentifierDeclStatement	int i = 0 ;		1086250	0					
ANR	1087495	IdentifierDecl	i = 0		1086250	0					
ANR	1087496	IdentifierDeclType	int		1086250	0					
ANR	1087497	Identifier	i		1086250	1					
ANR	1087498	AssignmentExpression	i = 0		1086250	2		=			
ANR	1087499	Identifier	i		1086250	0					
ANR	1087500	PrimaryExpression	0		1086250	1					
ANR	1087501	Condition	i < 3	7681:18:235972:235976	1086250	1	True				
ANR	1087502	RelationalExpression	i < 3		1086250	0		<			
ANR	1087503	Identifier	i		1086250	0					
ANR	1087504	PrimaryExpression	3		1086250	1					
ANR	1087505	PostIncDecOperationExpression	i ++	7681:25:235979:235981	1086250	2	True				
ANR	1087506	Identifier	i		1086250	0					
ANR	1087507	IncDec	++		1086250	1					
ANR	1087508	CompoundStatement		364:30:12029:12029	1086250	3					
ANR	1087509	IfStatement	if ( std [ i ] > - 1 )		1086250	0					
ANR	1087510	Condition	std [ i ] > - 1	7682:8:235994:236004	1086250	0	True				
ANR	1087511	RelationalExpression	std [ i ] > - 1		1086250	0		>			
ANR	1087512	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087513	Identifier	std		1086250	0					
ANR	1087514	Identifier	i		1086250	1					
ANR	1087515	UnaryOperationExpression	- 1		1086250	1					
ANR	1087516	UnaryOperator	-		1086250	0					
ANR	1087517	PrimaryExpression	1		1086250	1					
ANR	1087518	CompoundStatement		365:22:12053:12053	1086250	1					
ANR	1087519	IfStatement	if ( std [ i ] >= PIPE_INDEX_OFFSET )		1086250	0					
ANR	1087520	Condition	std [ i ] >= PIPE_INDEX_OFFSET	7683:8:236018:236044	1086250	0	True				
ANR	1087521	RelationalExpression	std [ i ] >= PIPE_INDEX_OFFSET		1086250	0		>=			
ANR	1087522	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087523	Identifier	std		1086250	0					
ANR	1087524	Identifier	i		1086250	1					
ANR	1087525	Identifier	PIPE_INDEX_OFFSET		1086250	1					
ANR	1087526	CompoundStatement		368:5:12145:12183	1086250	1					
ANR	1087527	IdentifierDeclStatement	int index = std [ i ] - PIPE_INDEX_OFFSET ;	7685:5:236100:236138	1086250	0	True				
ANR	1087528	IdentifierDecl	index = std [ i ] - PIPE_INDEX_OFFSET		1086250	0					
ANR	1087529	IdentifierDeclType	int		1086250	0					
ANR	1087530	Identifier	index		1086250	1					
ANR	1087531	AssignmentExpression	index = std [ i ] - PIPE_INDEX_OFFSET		1086250	2		=			
ANR	1087532	Identifier	index		1086250	0					
ANR	1087533	AdditiveExpression	std [ i ] - PIPE_INDEX_OFFSET		1086250	1		-			
ANR	1087534	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087535	Identifier	std		1086250	0					
ANR	1087536	Identifier	i		1086250	1					
ANR	1087537	Identifier	PIPE_INDEX_OFFSET		1086250	1					
ANR	1087538	ExpressionStatement	* std_handles [ i ] = ( * pipeHandleTable ) [ index ] -> get_handle ( )	7686:5:236145:236202	1086250	1	True				
ANR	1087539	AssignmentExpression	* std_handles [ i ] = ( * pipeHandleTable ) [ index ] -> get_handle ( )		1086250	0		=			
ANR	1087540	UnaryOperationExpression	* std_handles [ i ]		1086250	0					
ANR	1087541	UnaryOperator	*		1086250	0					
ANR	1087542	ArrayIndexing	std_handles [ i ]		1086250	1					
ANR	1087543	Identifier	std_handles		1086250	0					
ANR	1087544	Identifier	i		1086250	1					
ANR	1087545	CallExpression	( * pipeHandleTable ) [ index ] -> get_handle ( )		1086250	1					
ANR	1087546	Callee	( * pipeHandleTable ) [ index ] -> get_handle		1086250	0					
ANR	1087547	PtrMemberAccess	( * pipeHandleTable ) [ index ] -> get_handle		1086250	0					
ANR	1087548	ArrayIndexing	( * pipeHandleTable ) [ index ]		1086250	0					
ANR	1087549	UnaryOperationExpression	* pipeHandleTable		1086250	0					
ANR	1087550	UnaryOperator	*		1086250	0					
ANR	1087551	Identifier	pipeHandleTable		1086250	1					
ANR	1087552	Identifier	index		1086250	1					
ANR	1087553	Identifier	get_handle		1086250	1					
ANR	1087554	ArgumentList			1086250	1					
ANR	1087555	ExpressionStatement	"SetHandleInformation ( * std_handles [ i ] , HANDLE_FLAG_INHERIT , HANDLE_FLAG_INHERIT )"	7687:5:236209:236288	1086250	2	True				
ANR	1087556	CallExpression	"SetHandleInformation ( * std_handles [ i ] , HANDLE_FLAG_INHERIT , HANDLE_FLAG_INHERIT )"		1086250	0					
ANR	1087557	Callee	SetHandleInformation		1086250	0					
ANR	1087558	Identifier	SetHandleInformation		1086250	0					
ANR	1087559	ArgumentList	* std_handles [ i ]		1086250	1					
ANR	1087560	Argument	* std_handles [ i ]		1086250	0					
ANR	1087561	UnaryOperationExpression	* std_handles [ i ]		1086250	0					
ANR	1087562	UnaryOperator	*		1086250	0					
ANR	1087563	ArrayIndexing	std_handles [ i ]		1086250	1					
ANR	1087564	Identifier	std_handles		1086250	0					
ANR	1087565	Identifier	i		1086250	1					
ANR	1087566	Argument	HANDLE_FLAG_INHERIT		1086250	1					
ANR	1087567	Identifier	HANDLE_FLAG_INHERIT		1086250	0					
ANR	1087568	Argument	HANDLE_FLAG_INHERIT		1086250	2					
ANR	1087569	Identifier	HANDLE_FLAG_INHERIT		1086250	0					
ANR	1087570	ExpressionStatement	valid = TRUE	7688:5:236295:236307	1086250	3	True				
ANR	1087571	AssignmentExpression	valid = TRUE		1086250	0		=			
ANR	1087572	Identifier	valid		1086250	0					
ANR	1087573	Identifier	TRUE		1086250	1					
ANR	1087574	ElseStatement	else		1086250	0					
ANR	1087575	CompoundStatement		376:5:12481:12519	1086250	0					
ANR	1087576	ExpressionStatement	"SetFDInheritFlag ( std [ i ] , TRUE )"	7692:5:236374:236403	1086250	0	True				
ANR	1087577	CallExpression	"SetFDInheritFlag ( std [ i ] , TRUE )"		1086250	0					
ANR	1087578	Callee	SetFDInheritFlag		1086250	0					
ANR	1087579	Identifier	SetFDInheritFlag		1086250	0					
ANR	1087580	ArgumentList	std [ i ]		1086250	1					
ANR	1087581	Argument	std [ i ]		1086250	0					
ANR	1087582	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087583	Identifier	std		1086250	0					
ANR	1087584	Identifier	i		1086250	1					
ANR	1087585	Argument	TRUE		1086250	1					
ANR	1087586	Identifier	TRUE		1086250	0					
ANR	1087587	IdentifierDeclStatement	long longTemp = _get_osfhandle ( std [ i ] ) ;	7693:5:236436:236474	1086250	1	True				
ANR	1087588	IdentifierDecl	longTemp = _get_osfhandle ( std [ i ] )		1086250	0					
ANR	1087589	IdentifierDeclType	long		1086250	0					
ANR	1087590	Identifier	longTemp		1086250	1					
ANR	1087591	AssignmentExpression	longTemp = _get_osfhandle ( std [ i ] )		1086250	2		=			
ANR	1087592	Identifier	longTemp		1086250	0					
ANR	1087593	CallExpression	_get_osfhandle ( std [ i ] )		1086250	1					
ANR	1087594	Callee	_get_osfhandle		1086250	0					
ANR	1087595	Identifier	_get_osfhandle		1086250	0					
ANR	1087596	ArgumentList	std [ i ]		1086250	1					
ANR	1087597	Argument	std [ i ]		1086250	0					
ANR	1087598	ArrayIndexing	std [ i ]		1086250	0					
ANR	1087599	Identifier	std		1086250	0					
ANR	1087600	Identifier	i		1086250	1					
ANR	1087601	IfStatement	if ( longTemp != - 1 )		1086250	2					
ANR	1087602	Condition	longTemp != - 1	7694:9:236485:236498	1086250	0	True				
ANR	1087603	EqualityExpression	longTemp != - 1		1086250	0		!=			
ANR	1087604	Identifier	longTemp		1086250	0					
ANR	1087605	UnaryOperationExpression	- 1		1086250	1					
ANR	1087606	UnaryOperator	-		1086250	0					
ANR	1087607	PrimaryExpression	1		1086250	1					
ANR	1087608	CompoundStatement		377:26:12547:12547	1086250	1					
ANR	1087609	ExpressionStatement	valid = TRUE	7695:6:236510:236522	1086250	0	True				
ANR	1087610	AssignmentExpression	valid = TRUE		1086250	0		=			
ANR	1087611	Identifier	valid		1086250	0					
ANR	1087612	Identifier	TRUE		1086250	1					
ANR	1087613	ExpressionStatement	* std_handles [ i ] = ( HANDLE ) longTemp	7696:6:236530:236564	1086250	1	True				
ANR	1087614	AssignmentExpression	* std_handles [ i ] = ( HANDLE ) longTemp		1086250	0		=			
ANR	1087615	UnaryOperationExpression	* std_handles [ i ]		1086250	0					
ANR	1087616	UnaryOperator	*		1086250	0					
ANR	1087617	ArrayIndexing	std_handles [ i ]		1086250	1					
ANR	1087618	Identifier	std_handles		1086250	0					
ANR	1087619	Identifier	i		1086250	1					
ANR	1087620	CastExpression	( HANDLE ) longTemp		1086250	1					
ANR	1087621	CastTarget	HANDLE		1086250	0					
ANR	1087622	Identifier	longTemp		1086250	1					
ANR	1087623	IfStatement	if ( valid )		1086250	3					
ANR	1087624	Condition	valid	7701:7:236595:236599	1086250	0	True				
ANR	1087625	Identifier	valid		1086250	0					
ANR	1087626	CompoundStatement		384:15:12648:12648	1086250	1					
ANR	1087627	ExpressionStatement	si . dwFlags |= STARTF_USESTDHANDLES	7702:3:236608:236642	1086250	0	True				
ANR	1087628	AssignmentExpression	si . dwFlags |= STARTF_USESTDHANDLES		1086250	0		|=			
ANR	1087629	MemberAccess	si . dwFlags		1086250	0					
ANR	1087630	Identifier	si		1086250	0					
ANR	1087631	Identifier	dwFlags		1086250	1					
ANR	1087632	Identifier	STARTF_USESTDHANDLES		1086250	1					
ANR	1087633	ExpressionStatement	inherit_handles = TRUE	7703:3:236647:236669	1086250	1	True				
ANR	1087634	AssignmentExpression	inherit_handles = TRUE		1086250	0		=			
ANR	1087635	Identifier	inherit_handles		1086250	0					
ANR	1087636	Identifier	TRUE		1086250	1					
ANR	1087637	IfStatement	if ( family_info != NULL )		1086250	73					
ANR	1087638	Condition	family_info != NULL	7707:5:236684:236702	1086250	0	True				
ANR	1087639	EqualityExpression	family_info != NULL		1086250	0		!=			
ANR	1087640	Identifier	family_info		1086250	0					
ANR	1087641	Identifier	NULL		1086250	1					
ANR	1087642	CompoundStatement		390:26:12750:12750	1086250	1					
ANR	1087643	ExpressionStatement	create_process_flags |= CREATE_NEW_PROCESS_GROUP	7708:2:236709:236757	1086250	0	True				
ANR	1087644	AssignmentExpression	create_process_flags |= CREATE_NEW_PROCESS_GROUP		1086250	0		|=			
ANR	1087645	Identifier	create_process_flags		1086250	0					
ANR	1087646	Identifier	CREATE_NEW_PROCESS_GROUP		1086250	1					
ANR	1087647	IfStatement	if ( nice_inc > 0 )		1086250	74					
ANR	1087648	Condition	nice_inc > 0	7718:9:237065:237076	1086250	0	True				
ANR	1087649	RelationalExpression	nice_inc > 0		1086250	0		>			
ANR	1087650	Identifier	nice_inc		1086250	0					
ANR	1087651	PrimaryExpression	0		1086250	1					
ANR	1087652	CompoundStatement		401:24:13125:13125	1086250	1					
ANR	1087653	ExpressionStatement	create_process_flags |= IDLE_PRIORITY_CLASS	7720:2:237140:237183	1086250	0	True				
ANR	1087654	AssignmentExpression	create_process_flags |= IDLE_PRIORITY_CLASS		1086250	0		|=			
ANR	1087655	Identifier	create_process_flags		1086250	0					
ANR	1087656	Identifier	IDLE_PRIORITY_CLASS		1086250	1					
ANR	1087657	CompoundStatement		465:2:15091:15100	1086250	75					
ANR	1087658	IdentifierDeclStatement	Env job_environ ;	7729:2:237346:237361	1086250	0	True				
ANR	1087659	IdentifierDecl	job_environ		1086250	0					
ANR	1087660	IdentifierDeclType	Env		1086250	0					
ANR	1087661	Identifier	job_environ		1086250	1					
ANR	1087662	IfStatement	if ( HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask ) )		1086250	1					
ANR	1087663	Condition	HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask )	7733:7:237494:237534	1086250	0	True				
ANR	1087664	CallExpression	HAS_DCJOBOPT_NO_ENV_INHERIT ( job_opt_mask )		1086250	0					
ANR	1087665	Callee	HAS_DCJOBOPT_NO_ENV_INHERIT		1086250	0					
ANR	1087666	Identifier	HAS_DCJOBOPT_NO_ENV_INHERIT		1086250	0					
ANR	1087667	ArgumentList	job_opt_mask		1086250	1					
ANR	1087668	Argument	job_opt_mask		1086250	0					
ANR	1087669	Identifier	job_opt_mask		1086250	0					
ANR	1087670	CompoundStatement		429:3:13980:13998	1086250	1					
ANR	1087671	IdentifierDeclStatement	MyString path ;	7738:3:237740:237753	1086250	0	True				
ANR	1087672	IdentifierDecl	path		1086250	0					
ANR	1087673	IdentifierDeclType	MyString		1086250	0					
ANR	1087674	Identifier	path		1086250	1					
ANR	1087675	ExpressionStatement	"GetEnv ( ""PATH"" , path )"	7739:3:237758:237777	1086250	1	True				
ANR	1087676	CallExpression	"GetEnv ( ""PATH"" , path )"		1086250	0					
ANR	1087677	Callee	GetEnv		1086250	0					
ANR	1087678	Identifier	GetEnv		1086250	0					
ANR	1087679	ArgumentList	"""PATH"""		1086250	1					
ANR	1087680	Argument	"""PATH"""		1086250	0					
ANR	1087681	PrimaryExpression	"""PATH"""		1086250	0					
ANR	1087682	Argument	path		1086250	1					
ANR	1087683	Identifier	path		1086250	0					
ANR	1087684	IfStatement	if ( path . Length ( ) )		1086250	2					
ANR	1087685	Condition	path . Length ( )	7740:7:237786:237798	1086250	0	True				
ANR	1087686	CallExpression	path . Length ( )		1086250	0					
ANR	1087687	Callee	path . Length		1086250	0					
ANR	1087688	MemberAccess	path . Length		1086250	0					
ANR	1087689	Identifier	path		1086250	0					
ANR	1087690	Identifier	Length		1086250	1					
ANR	1087691	ArgumentList			1086250	1					
ANR	1087692	CompoundStatement		423:22:13846:13846	1086250	1					
ANR	1087693	ExpressionStatement	"job_environ . SetEnv ( ""PATH"" , path . Value ( ) )"	7741:4:237807:237846	1086250	0	True				
ANR	1087694	CallExpression	"job_environ . SetEnv ( ""PATH"" , path . Value ( ) )"		1086250	0					
ANR	1087695	Callee	job_environ . SetEnv		1086250	0					
ANR	1087696	MemberAccess	job_environ . SetEnv		1086250	0					
ANR	1087697	Identifier	job_environ		1086250	0					
ANR	1087698	Identifier	SetEnv		1086250	1					
ANR	1087699	ArgumentList	"""PATH"""		1086250	1					
ANR	1087700	Argument	"""PATH"""		1086250	0					
ANR	1087701	PrimaryExpression	"""PATH"""		1086250	0					
ANR	1087702	Argument	path . Value ( )		1086250	1					
ANR	1087703	CallExpression	path . Value ( )		1086250	0					
ANR	1087704	Callee	path . Value		1086250	0					
ANR	1087705	MemberAccess	path . Value		1086250	0					
ANR	1087706	Identifier	path		1086250	0					
ANR	1087707	Identifier	Value		1086250	1					
ANR	1087708	ArgumentList			1086250	1					
ANR	1087709	IdentifierDeclStatement	MyString temp_path ;	7746:3:237935:237953	1086250	3	True				
ANR	1087710	IdentifierDecl	temp_path		1086250	0					
ANR	1087711	IdentifierDeclType	MyString		1086250	0					
ANR	1087712	Identifier	temp_path		1086250	1					
ANR	1087713	ExpressionStatement	"GetEnv ( ""TEMP"" , temp_path )"	7747:3:237958:237982	1086250	4	True				
ANR	1087714	CallExpression	"GetEnv ( ""TEMP"" , temp_path )"		1086250	0					
ANR	1087715	Callee	GetEnv		1086250	0					
ANR	1087716	Identifier	GetEnv		1086250	0					
ANR	1087717	ArgumentList	"""TEMP"""		1086250	1					
ANR	1087718	Argument	"""TEMP"""		1086250	0					
ANR	1087719	PrimaryExpression	"""TEMP"""		1086250	0					
ANR	1087720	Argument	temp_path		1086250	1					
ANR	1087721	Identifier	temp_path		1086250	0					
ANR	1087722	IfStatement	if ( temp_path . Length ( ) )		1086250	5					
ANR	1087723	Condition	temp_path . Length ( )	7748:7:237991:238008	1086250	0	True				
ANR	1087724	CallExpression	temp_path . Length ( )		1086250	0					
ANR	1087725	Callee	temp_path . Length		1086250	0					
ANR	1087726	MemberAccess	temp_path . Length		1086250	0					
ANR	1087727	Identifier	temp_path		1086250	0					
ANR	1087728	Identifier	Length		1086250	1					
ANR	1087729	ArgumentList			1086250	1					
ANR	1087730	CompoundStatement		431:27:14056:14056	1086250	1					
ANR	1087731	ExpressionStatement	"job_environ . SetEnv ( ""TEMP"" , temp_path . Value ( ) )"	7749:4:238017:238061	1086250	0	True				
ANR	1087732	CallExpression	"job_environ . SetEnv ( ""TEMP"" , temp_path . Value ( ) )"		1086250	0					
ANR	1087733	Callee	job_environ . SetEnv		1086250	0					
ANR	1087734	MemberAccess	job_environ . SetEnv		1086250	0					
ANR	1087735	Identifier	job_environ		1086250	0					
ANR	1087736	Identifier	SetEnv		1086250	1					
ANR	1087737	ArgumentList	"""TEMP"""		1086250	1					
ANR	1087738	Argument	"""TEMP"""		1086250	0					
ANR	1087739	PrimaryExpression	"""TEMP"""		1086250	0					
ANR	1087740	Argument	temp_path . Value ( )		1086250	1					
ANR	1087741	CallExpression	temp_path . Value ( )		1086250	0					
ANR	1087742	Callee	temp_path . Value		1086250	0					
ANR	1087743	MemberAccess	temp_path . Value		1086250	0					
ANR	1087744	Identifier	temp_path		1086250	0					
ANR	1087745	Identifier	Value		1086250	1					
ANR	1087746	ArgumentList			1086250	1					
ANR	1087747	ElseStatement	else		1086250	0					
ANR	1087748	CompoundStatement		436:3:14129:14167	1086250	0					
ANR	1087749	IdentifierDeclStatement	char * my_env = GetEnvironmentStrings ( ) ;	7753:3:238084:238122	1086250	0	True				
ANR	1087750	IdentifierDecl	* my_env = GetEnvironmentStrings ( )		1086250	0					
ANR	1087751	IdentifierDeclType	char *		1086250	0					
ANR	1087752	Identifier	my_env		1086250	1					
ANR	1087753	AssignmentExpression	* my_env = GetEnvironmentStrings ( )		1086250	2		=			
ANR	1087754	Identifier	my_env		1086250	0					
ANR	1087755	CallExpression	GetEnvironmentStrings ( )		1086250	1					
ANR	1087756	Callee	GetEnvironmentStrings		1086250	0					
ANR	1087757	Identifier	GetEnvironmentStrings		1086250	0					
ANR	1087758	ArgumentList			1086250	1					
ANR	1087759	IfStatement	if ( my_env == NULL )		1086250	1					
ANR	1087760	Condition	my_env == NULL	7754:7:238131:238144	1086250	0	True				
ANR	1087761	EqualityExpression	my_env == NULL		1086250	0		==			
ANR	1087762	Identifier	my_env		1086250	0					
ANR	1087763	Identifier	NULL		1086250	1					
ANR	1087764	CompoundStatement		437:23:14192:14192	1086250	1					
ANR	1087765	ExpressionStatement	"dprintf ( D_ALWAYS , ""GetEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"	7755:4:238153:238247	1086250	0	True				
ANR	1087766	CallExpression	"dprintf ( D_ALWAYS , ""GetEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"		1086250	0					
ANR	1087767	Callee	dprintf		1086250	0					
ANR	1087768	Identifier	dprintf		1086250	0					
ANR	1087769	ArgumentList	D_ALWAYS		1086250	1					
ANR	1087770	Argument	D_ALWAYS		1086250	0					
ANR	1087771	Identifier	D_ALWAYS		1086250	0					
ANR	1087772	Argument	"""GetEnvironmentStrings error: %u\\n"""		1086250	1					
ANR	1087773	PrimaryExpression	"""GetEnvironmentStrings error: %u\\n"""		1086250	0					
ANR	1087774	Argument	GetLastError ( )		1086250	2					
ANR	1087775	CallExpression	GetLastError ( )		1086250	0					
ANR	1087776	Callee	GetLastError		1086250	0					
ANR	1087777	Identifier	GetLastError		1086250	0					
ANR	1087778	ArgumentList			1086250	1					
ANR	1087779	ElseStatement	else		1086250	0					
ANR	1087780	CompoundStatement		442:8:14307:14307	1086250	0					
ANR	1087781	ExpressionStatement	job_environ . MergeFrom ( my_env )	7760:4:238268:238297	1086250	0	True				
ANR	1087782	CallExpression	job_environ . MergeFrom ( my_env )		1086250	0					
ANR	1087783	Callee	job_environ . MergeFrom		1086250	0					
ANR	1087784	MemberAccess	job_environ . MergeFrom		1086250	0					
ANR	1087785	Identifier	job_environ		1086250	0					
ANR	1087786	Identifier	MergeFrom		1086250	1					
ANR	1087787	ArgumentList	my_env		1086250	1					
ANR	1087788	Argument	my_env		1086250	0					
ANR	1087789	Identifier	my_env		1086250	0					
ANR	1087790	IfStatement	if ( FreeEnvironmentStrings ( my_env ) == FALSE )		1086250	1					
ANR	1087791	Condition	FreeEnvironmentStrings ( my_env ) == FALSE	7761:8:238307:238345	1086250	0	True				
ANR	1087792	EqualityExpression	FreeEnvironmentStrings ( my_env ) == FALSE		1086250	0		==			
ANR	1087793	CallExpression	FreeEnvironmentStrings ( my_env )		1086250	0					
ANR	1087794	Callee	FreeEnvironmentStrings		1086250	0					
ANR	1087795	Identifier	FreeEnvironmentStrings		1086250	0					
ANR	1087796	ArgumentList	my_env		1086250	1					
ANR	1087797	Argument	my_env		1086250	0					
ANR	1087798	Identifier	my_env		1086250	0					
ANR	1087799	Identifier	FALSE		1086250	1					
ANR	1087800	CompoundStatement		444:49:14393:14393	1086250	1					
ANR	1087801	ExpressionStatement	"dprintf ( D_ALWAYS , ""FreeEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"	7762:5:238355:238452	1086250	0	True				
ANR	1087802	CallExpression	"dprintf ( D_ALWAYS , ""FreeEnvironmentStrings error: %u\\n"" , GetLastError ( ) )"		1086250	0					
ANR	1087803	Callee	dprintf		1086250	0					
ANR	1087804	Identifier	dprintf		1086250	0					
ANR	1087805	ArgumentList	D_ALWAYS		1086250	1					
ANR	1087806	Argument	D_ALWAYS		1086250	0					
ANR	1087807	Identifier	D_ALWAYS		1086250	0					
ANR	1087808	Argument	"""FreeEnvironmentStrings error: %u\\n"""		1086250	1					
ANR	1087809	PrimaryExpression	"""FreeEnvironmentStrings error: %u\\n"""		1086250	0					
ANR	1087810	Argument	GetLastError ( )		1086250	2					
ANR	1087811	CallExpression	GetLastError ( )		1086250	0					
ANR	1087812	Callee	GetLastError		1086250	0					
ANR	1087813	Identifier	GetLastError		1086250	0					
ANR	1087814	ArgumentList			1086250	1					
ANR	1087815	IfStatement	if ( env )		1086250	2					
ANR	1087816	Condition	env	7770:5:238511:238513	1086250	0	True				
ANR	1087817	Identifier	env		1086250	0					
ANR	1087818	CompoundStatement		453:10:14561:14561	1086250	1					
ANR	1087819	ExpressionStatement	job_environ . MergeFrom ( * env )	7771:3:238521:238548	1086250	0	True				
ANR	1087820	CallExpression	job_environ . MergeFrom ( * env )		1086250	0					
ANR	1087821	Callee	job_environ . MergeFrom		1086250	0					
ANR	1087822	MemberAccess	job_environ . MergeFrom		1086250	0					
ANR	1087823	Identifier	job_environ		1086250	0					
ANR	1087824	Identifier	MergeFrom		1086250	1					
ANR	1087825	ArgumentList	* env		1086250	1					
ANR	1087826	Argument	* env		1086250	0					
ANR	1087827	UnaryOperationExpression	* env		1086250	0					
ANR	1087828	UnaryOperator	*		1086250	0					
ANR	1087829	Identifier	env		1086250	1					
ANR	1087830	IdentifierDeclStatement	"const char * default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" } ;"	7777:2:238754:239007	1086250	3	True				
ANR	1087831	IdentifierDecl	"* default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" }"		1086250	0					
ANR	1087832	IdentifierDeclType	const char * [ ]		1086250	0					
ANR	1087833	Identifier	default_vars		1086250	1					
ANR	1087834	AssignmentExpression	"* default_vars [ ] = { ""SystemDrive"" , ""SystemRoot"" , ""COMPUTERNAME"" , ""NUMBER_OF_PROCESSORS"" , ""OS"" , ""COMSPEC"" , ""PROCESSOR_ARCHITECTURE"" , ""PROCESSOR_IDENTIFIER"" , ""PROCESSOR_LEVEL"" , ""PROCESSOR_REVISION"" , ""PROGRAMFILES"" , ""WINDIR"" , ""\\0"" }"		1086250	2		=			
ANR	1087835	Identifier	default_vars		1086250	0					
ANR	1087836	InitializerList	"""SystemDrive"""		1086250	1					
ANR	1087837	PrimaryExpression	"""SystemDrive"""		1086250	0					
ANR	1087838	PrimaryExpression	"""SystemRoot"""		1086250	1					
ANR	1087839	PrimaryExpression	"""COMPUTERNAME"""		1086250	2					
ANR	1087840	PrimaryExpression	"""NUMBER_OF_PROCESSORS"""		1086250	3					
ANR	1087841	PrimaryExpression	"""OS"""		1086250	4					
ANR	1087842	PrimaryExpression	"""COMSPEC"""		1086250	5					
ANR	1087843	PrimaryExpression	"""PROCESSOR_ARCHITECTURE"""		1086250	6					
ANR	1087844	PrimaryExpression	"""PROCESSOR_IDENTIFIER"""		1086250	7					
ANR	1087845	PrimaryExpression	"""PROCESSOR_LEVEL"""		1086250	8					
ANR	1087846	PrimaryExpression	"""PROCESSOR_REVISION"""		1086250	9					
ANR	1087847	PrimaryExpression	"""PROGRAMFILES"""		1086250	10					
ANR	1087848	PrimaryExpression	"""WINDIR"""		1086250	11					
ANR	1087849	PrimaryExpression	"""\\0"""		1086250	12					
ANR	1087850	IdentifierDeclStatement	int i = 0 ;	7782:2:239046:239055	1086250	4	True				
ANR	1087851	IdentifierDecl	i = 0		1086250	0					
ANR	1087852	IdentifierDeclType	int		1086250	0					
ANR	1087853	Identifier	i		1086250	1					
ANR	1087854	AssignmentExpression	i = 0		1086250	2		=			
ANR	1087855	Identifier	i		1086250	0					
ANR	1087856	PrimaryExpression	0		1086250	1					
ANR	1087857	WhileStatement	while ( default_vars [ i ] [ 0 ] )		1086250	5					
ANR	1087858	Condition	default_vars [ i ] [ 0 ]	7783:10:239067:239084	1086250	0	True				
ANR	1087859	ArrayIndexing	default_vars [ i ] [ 0 ]		1086250	0					
ANR	1087860	ArrayIndexing	default_vars [ i ]		1086250	0					
ANR	1087861	Identifier	default_vars		1086250	0					
ANR	1087862	Identifier	i		1086250	1					
ANR	1087863	PrimaryExpression	0		1086250	1					
ANR	1087864	CompoundStatement		467:3:15138:15153	1086250	1					
ANR	1087865	IdentifierDeclStatement	MyString envbuf ;	7784:3:239093:239108	1086250	0	True				
ANR	1087866	IdentifierDecl	envbuf		1086250	0					
ANR	1087867	IdentifierDeclType	MyString		1086250	0					
ANR	1087868	Identifier	envbuf		1086250	1					
ANR	1087869	ExpressionStatement	"GetEnv ( default_vars [ i ] , envbuf )"	7785:3:239113:239143	1086250	1	True				
ANR	1087870	CallExpression	"GetEnv ( default_vars [ i ] , envbuf )"		1086250	0					
ANR	1087871	Callee	GetEnv		1086250	0					
ANR	1087872	Identifier	GetEnv		1086250	0					
ANR	1087873	ArgumentList	default_vars [ i ]		1086250	1					
ANR	1087874	Argument	default_vars [ i ]		1086250	0					
ANR	1087875	ArrayIndexing	default_vars [ i ]		1086250	0					
ANR	1087876	Identifier	default_vars		1086250	0					
ANR	1087877	Identifier	i		1086250	1					
ANR	1087878	Argument	envbuf		1086250	1					
ANR	1087879	Identifier	envbuf		1086250	0					
ANR	1087880	IfStatement	if ( envbuf . Length ( ) )		1086250	2					
ANR	1087881	Condition	envbuf . Length ( )	7786:7:239152:239166	1086250	0	True				
ANR	1087882	CallExpression	envbuf . Length ( )		1086250	0					
ANR	1087883	Callee	envbuf . Length		1086250	0					
ANR	1087884	MemberAccess	envbuf . Length		1086250	0					
ANR	1087885	Identifier	envbuf		1086250	0					
ANR	1087886	Identifier	Length		1086250	1					
ANR	1087887	ArgumentList			1086250	1					
ANR	1087888	CompoundStatement		469:24:15214:15214	1086250	1					
ANR	1087889	ExpressionStatement	"job_environ . SetEnv ( default_vars [ i ] , envbuf . Value ( ) )"	7787:4:239175:239225	1086250	0	True				
ANR	1087890	CallExpression	"job_environ . SetEnv ( default_vars [ i ] , envbuf . Value ( ) )"		1086250	0					
ANR	1087891	Callee	job_environ . SetEnv		1086250	0					
ANR	1087892	MemberAccess	job_environ . SetEnv		1086250	0					
ANR	1087893	Identifier	job_environ		1086250	0					
ANR	1087894	Identifier	SetEnv		1086250	1					
ANR	1087895	ArgumentList	default_vars [ i ]		1086250	1					
ANR	1087896	Argument	default_vars [ i ]		1086250	0					
ANR	1087897	ArrayIndexing	default_vars [ i ]		1086250	0					
ANR	1087898	Identifier	default_vars		1086250	0					
ANR	1087899	Identifier	i		1086250	1					
ANR	1087900	Argument	envbuf . Value ( )		1086250	1					
ANR	1087901	CallExpression	envbuf . Value ( )		1086250	0					
ANR	1087902	Callee	envbuf . Value		1086250	0					
ANR	1087903	MemberAccess	envbuf . Value		1086250	0					
ANR	1087904	Identifier	envbuf		1086250	0					
ANR	1087905	Identifier	Value		1086250	1					
ANR	1087906	ArgumentList			1086250	1					
ANR	1087907	ExpressionStatement	i ++	7789:3:239235:239238	1086250	3	True				
ANR	1087908	PostIncDecOperationExpression	i ++		1086250	0					
ANR	1087909	Identifier	i		1086250	0					
ANR	1087910	IncDec	++		1086250	1					
ANR	1087911	ExpressionStatement	"job_environ . SetEnv ( EnvGetName ( ENV_INHERIT ) , inheritbuf . Value ( ) )"	7793:2:239281:239348	1086250	6	True				
ANR	1087912	CallExpression	"job_environ . SetEnv ( EnvGetName ( ENV_INHERIT ) , inheritbuf . Value ( ) )"		1086250	0					
ANR	1087913	Callee	job_environ . SetEnv		1086250	0					
ANR	1087914	MemberAccess	job_environ . SetEnv		1086250	0					
ANR	1087915	Identifier	job_environ		1086250	0					
ANR	1087916	Identifier	SetEnv		1086250	1					
ANR	1087917	ArgumentList	EnvGetName ( ENV_INHERIT )		1086250	1					
ANR	1087918	Argument	EnvGetName ( ENV_INHERIT )		1086250	0					
ANR	1087919	CallExpression	EnvGetName ( ENV_INHERIT )		1086250	0					
ANR	1087920	Callee	EnvGetName		1086250	0					
ANR	1087921	Identifier	EnvGetName		1086250	0					
ANR	1087922	ArgumentList	ENV_INHERIT		1086250	1					
ANR	1087923	Argument	ENV_INHERIT		1086250	0					
ANR	1087924	Identifier	ENV_INHERIT		1086250	0					
ANR	1087925	Argument	inheritbuf . Value ( )		1086250	1					
ANR	1087926	CallExpression	inheritbuf . Value ( )		1086250	0					
ANR	1087927	Callee	inheritbuf . Value		1086250	0					
ANR	1087928	MemberAccess	inheritbuf . Value		1086250	0					
ANR	1087929	Identifier	inheritbuf		1086250	0					
ANR	1087930	Identifier	Value		1086250	1					
ANR	1087931	ArgumentList			1086250	1					
ANR	1087932	IfStatement	if ( ! privateinheritbuf . IsEmpty ( ) )		1086250	7					
ANR	1087933	Condition	! privateinheritbuf . IsEmpty ( )	7795:6:239357:239384	1086250	0	True				
ANR	1087934	UnaryOperationExpression	! privateinheritbuf . IsEmpty ( )		1086250	0					
ANR	1087935	UnaryOperator	!		1086250	0					
ANR	1087936	CallExpression	privateinheritbuf . IsEmpty ( )		1086250	1					
ANR	1087937	Callee	privateinheritbuf . IsEmpty		1086250	0					
ANR	1087938	MemberAccess	privateinheritbuf . IsEmpty		1086250	0					
ANR	1087939	Identifier	privateinheritbuf		1086250	0					
ANR	1087940	Identifier	IsEmpty		1086250	1					
ANR	1087941	ArgumentList			1086250	1					
ANR	1087942	ExpressionStatement	"job_environ . SetEnv ( EnvGetName ( ENV_PRIVATE ) , privateinheritbuf . Value ( ) )"	7796:3:239391:239465	1086250	1	True				
ANR	1087943	CallExpression	"job_environ . SetEnv ( EnvGetName ( ENV_PRIVATE ) , privateinheritbuf . Value ( ) )"		1086250	0					
ANR	1087944	Callee	job_environ . SetEnv		1086250	0					
ANR	1087945	MemberAccess	job_environ . SetEnv		1086250	0					
ANR	1087946	Identifier	job_environ		1086250	0					
ANR	1087947	Identifier	SetEnv		1086250	1					
ANR	1087948	ArgumentList	EnvGetName ( ENV_PRIVATE )		1086250	1					
ANR	1087949	Argument	EnvGetName ( ENV_PRIVATE )		1086250	0					
ANR	1087950	CallExpression	EnvGetName ( ENV_PRIVATE )		1086250	0					
ANR	1087951	Callee	EnvGetName		1086250	0					
ANR	1087952	Identifier	EnvGetName		1086250	0					
ANR	1087953	ArgumentList	ENV_PRIVATE		1086250	1					
ANR	1087954	Argument	ENV_PRIVATE		1086250	0					
ANR	1087955	Identifier	ENV_PRIVATE		1086250	0					
ANR	1087956	Argument	privateinheritbuf . Value ( )		1086250	1					
ANR	1087957	CallExpression	privateinheritbuf . Value ( )		1086250	0					
ANR	1087958	Callee	privateinheritbuf . Value		1086250	0					
ANR	1087959	MemberAccess	privateinheritbuf . Value		1086250	0					
ANR	1087960	Identifier	privateinheritbuf		1086250	0					
ANR	1087961	Identifier	Value		1086250	1					
ANR	1087962	ArgumentList			1086250	1					
ANR	1087963	ExpressionStatement	newenv = job_environ . getWindowsEnvironmentString ( )	7801:2:239640:239690	1086250	8	True				
ANR	1087964	AssignmentExpression	newenv = job_environ . getWindowsEnvironmentString ( )		1086250	0		=			
ANR	1087965	Identifier	newenv		1086250	0					
ANR	1087966	CallExpression	job_environ . getWindowsEnvironmentString ( )		1086250	1					
ANR	1087967	Callee	job_environ . getWindowsEnvironmentString		1086250	0					
ANR	1087968	MemberAccess	job_environ . getWindowsEnvironmentString		1086250	0					
ANR	1087969	Identifier	job_environ		1086250	0					
ANR	1087970	Identifier	getWindowsEnvironmentString		1086250	1					
ANR	1087971	ArgumentList			1086250	1					
ANR	1087972	ExpressionStatement	bIs16Bit = false	7806:1:239780:239796	1086250	76	True				
ANR	1087973	AssignmentExpression	bIs16Bit = false		1086250	0		=			
ANR	1087974	Identifier	bIs16Bit		1086250	0					
ANR	1087975	Identifier	false		1086250	1					
ANR	1087976	IdentifierDeclStatement	LOADED_IMAGE loaded ;	7807:1:239799:239818	1086250	77	True				
ANR	1087977	IdentifierDecl	loaded		1086250	0					
ANR	1087978	IdentifierDeclType	LOADED_IMAGE		1086250	0					
ANR	1087979	Identifier	loaded		1086250	1					
ANR	1087980	IdentifierDeclStatement	BOOL map_and_load_result ;	7808:1:239821:239845	1086250	78	True				
ANR	1087981	IdentifierDecl	map_and_load_result		1086250	0					
ANR	1087982	IdentifierDeclType	BOOL		1086250	0					
ANR	1087983	Identifier	map_and_load_result		1086250	1					
ANR	1087984	ExpressionStatement	loaded . fDOSImage = FALSE	7816:1:240325:240349	1086250	79	True				
ANR	1087985	AssignmentExpression	loaded . fDOSImage = FALSE		1086250	0		=			
ANR	1087986	MemberAccess	loaded . fDOSImage		1086250	0					
ANR	1087987	Identifier	loaded		1086250	0					
ANR	1087988	Identifier	fDOSImage		1086250	1					
ANR	1087989	Identifier	FALSE		1086250	1					
ANR	1087990	ExpressionStatement	"map_and_load_result = MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"	7817:1:240352:240432	1086250	80	True				
ANR	1087991	AssignmentExpression	"map_and_load_result = MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"		1086250	0		=			
ANR	1087992	Identifier	map_and_load_result		1086250	0					
ANR	1087993	CallExpression	"MapAndLoad ( ( char * ) executable , NULL , & loaded , FALSE , TRUE )"		1086250	1					
ANR	1087994	Callee	MapAndLoad		1086250	0					
ANR	1087995	Identifier	MapAndLoad		1086250	0					
ANR	1087996	ArgumentList	( char * ) executable		1086250	1					
ANR	1087997	Argument	( char * ) executable		1086250	0					
ANR	1087998	CastExpression	( char * ) executable		1086250	0					
ANR	1087999	CastTarget	char *		1086250	0					
ANR	1088000	Identifier	executable		1086250	1					
ANR	1088001	Argument	NULL		1086250	1					
ANR	1088002	Identifier	NULL		1086250	0					
ANR	1088003	Argument	& loaded		1086250	2					
ANR	1088004	UnaryOperationExpression	& loaded		1086250	0					
ANR	1088005	UnaryOperator	&		1086250	0					
ANR	1088006	Identifier	loaded		1086250	1					
ANR	1088007	Argument	FALSE		1086250	3					
ANR	1088008	Identifier	FALSE		1086250	0					
ANR	1088009	Argument	TRUE		1086250	4					
ANR	1088010	Identifier	TRUE		1086250	0					
ANR	1088011	IfStatement	if ( loaded . fDOSImage == TRUE )		1086250	81					
ANR	1088012	Condition	loaded . fDOSImage == TRUE	7818:5:240439:240462	1086250	0	True				
ANR	1088013	EqualityExpression	loaded . fDOSImage == TRUE		1086250	0		==			
ANR	1088014	MemberAccess	loaded . fDOSImage		1086250	0					
ANR	1088015	Identifier	loaded		1086250	0					
ANR	1088016	Identifier	fDOSImage		1086250	1					
ANR	1088017	Identifier	TRUE		1086250	1					
ANR	1088018	ExpressionStatement	bIs16Bit = true	7819:2:240467:240482	1086250	1	True				
ANR	1088019	AssignmentExpression	bIs16Bit = true		1086250	0		=			
ANR	1088020	Identifier	bIs16Bit		1086250	0					
ANR	1088021	Identifier	true		1086250	1					
ANR	1088022	IfStatement	if ( map_and_load_result )		1086250	82					
ANR	1088023	Condition	map_and_load_result	7820:5:240489:240507	1086250	0	True				
ANR	1088024	Identifier	map_and_load_result		1086250	0					
ANR	1088025	ExpressionStatement	UnMapAndLoad ( & loaded )	7821:2:240512:240533	1086250	1	True				
ANR	1088026	CallExpression	UnMapAndLoad ( & loaded )		1086250	0					
ANR	1088027	Callee	UnMapAndLoad		1086250	0					
ANR	1088028	Identifier	UnMapAndLoad		1086250	0					
ANR	1088029	ArgumentList	& loaded		1086250	1					
ANR	1088030	Argument	& loaded		1086250	0					
ANR	1088031	UnaryOperationExpression	& loaded		1086250	0					
ANR	1088032	UnaryOperator	&		1086250	0					
ANR	1088033	Identifier	loaded		1086250	1					
ANR	1088034	ExpressionStatement	namelen = strlen ( executable )	7824:1:240591:240622	1086250	83	True				
ANR	1088035	AssignmentExpression	namelen = strlen ( executable )		1086250	0		=			
ANR	1088036	Identifier	namelen		1086250	0					
ANR	1088037	CallExpression	strlen ( executable )		1086250	1					
ANR	1088038	Callee	strlen		1086250	0					
ANR	1088039	Identifier	strlen		1086250	0					
ANR	1088040	ArgumentList	executable		1086250	1					
ANR	1088041	Argument	executable		1086250	0					
ANR	1088042	Identifier	executable		1086250	0					
ANR	1088043	ExpressionStatement	extension = namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL	7825:1:240625:240684	1086250	84	True				
ANR	1088044	AssignmentExpression	extension = namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL		1086250	0		=			
ANR	1088045	Identifier	extension		1086250	0					
ANR	1088046	ConditionalExpression	namelen > 3 ? & ( executable [ namelen - 4 ] ) : NULL		1086250	1					
ANR	1088047	Condition	namelen > 3		1086250	0					
ANR	1088048	RelationalExpression	namelen > 3		1086250	0		>			
ANR	1088049	Identifier	namelen		1086250	0					
ANR	1088050	PrimaryExpression	3		1086250	1					
ANR	1088051	UnaryOperationExpression	& ( executable [ namelen - 4 ] )		1086250	1					
ANR	1088052	UnaryOperator	&		1086250	0					
ANR	1088053	ArrayIndexing	executable [ namelen - 4 ]		1086250	1					
ANR	1088054	Identifier	executable		1086250	0					
ANR	1088055	AdditiveExpression	namelen - 4		1086250	1		-			
ANR	1088056	Identifier	namelen		1086250	0					
ANR	1088057	PrimaryExpression	4		1086250	1					
ANR	1088058	Identifier	NULL		1086250	2					
ANR	1088059	ExpressionStatement	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) ) , allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"	7826:1:240687:241064	1086250	85	True				
ANR	1088060	Expression	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) ) , allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		1086250	0					
ANR	1088061	AssignmentExpression	"batch_file = ( extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) ) )"		1086250	0		=			
ANR	1088062	Identifier	batch_file		1086250	0					
ANR	1088063	AndExpression	"extension && ( MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension ) )"		1086250	1		&&			
ANR	1088064	Identifier	extension		1086250	0					
ANR	1088065	OrExpression	"MATCH == strcasecmp ( "".bat"" , extension ) || MATCH == strcasecmp ( "".cmd"" , extension )"		1086250	1		||			
ANR	1088066	EqualityExpression	"MATCH == strcasecmp ( "".bat"" , extension )"		1086250	0		==			
ANR	1088067	Identifier	MATCH		1086250	0					
ANR	1088068	CallExpression	"strcasecmp ( "".bat"" , extension )"		1086250	1					
ANR	1088069	Callee	strcasecmp		1086250	0					
ANR	1088070	Identifier	strcasecmp		1086250	0					
ANR	1088071	ArgumentList	""".bat"""		1086250	1					
ANR	1088072	Argument	""".bat"""		1086250	0					
ANR	1088073	PrimaryExpression	""".bat"""		1086250	0					
ANR	1088074	Argument	extension		1086250	1					
ANR	1088075	Identifier	extension		1086250	0					
ANR	1088076	EqualityExpression	"MATCH == strcasecmp ( "".cmd"" , extension )"		1086250	1		==			
ANR	1088077	Identifier	MATCH		1086250	0					
ANR	1088078	CallExpression	"strcasecmp ( "".cmd"" , extension )"		1086250	1					
ANR	1088079	Callee	strcasecmp		1086250	0					
ANR	1088080	Identifier	strcasecmp		1086250	0					
ANR	1088081	ArgumentList	""".cmd"""		1086250	1					
ANR	1088082	Argument	""".cmd"""		1086250	0					
ANR	1088083	PrimaryExpression	""".cmd"""		1086250	0					
ANR	1088084	Argument	extension		1086250	1					
ANR	1088085	Identifier	extension		1086250	0					
ANR	1088086	Expression	"allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true ) , binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		1086250	1					
ANR	1088087	AssignmentExpression	"allow_scripts = param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true )"		1086250	0		=			
ANR	1088088	Identifier	allow_scripts		1086250	0					
ANR	1088089	CallExpression	"param_boolean ( ""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"" , true )"		1086250	1					
ANR	1088090	Callee	param_boolean		1086250	0					
ANR	1088091	Identifier	param_boolean		1086250	0					
ANR	1088092	ArgumentList	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		1086250	1					
ANR	1088093	Argument	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		1086250	0					
ANR	1088094	PrimaryExpression	"""ALLOW_SCRIPTS_TO_RUN_AS_EXECUTABLES"""		1086250	0					
ANR	1088095	Argument	true		1086250	1					
ANR	1088096	Identifier	true		1086250	0					
ANR	1088097	AssignmentExpression	"binary_executable = ( extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) ) )"		1086250	1		=			
ANR	1088098	Identifier	binary_executable		1086250	0					
ANR	1088099	AndExpression	"extension && ( MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension ) )"		1086250	1		&&			
ANR	1088100	Identifier	extension		1086250	0					
ANR	1088101	OrExpression	"MATCH == strcasecmp ( "".exe"" , extension ) || MATCH == strcasecmp ( "".com"" , extension )"		1086250	1		||			
ANR	1088102	EqualityExpression	"MATCH == strcasecmp ( "".exe"" , extension )"		1086250	0		==			
ANR	1088103	Identifier	MATCH		1086250	0					
ANR	1088104	CallExpression	"strcasecmp ( "".exe"" , extension )"		1086250	1					
ANR	1088105	Callee	strcasecmp		1086250	0					
ANR	1088106	Identifier	strcasecmp		1086250	0					
ANR	1088107	ArgumentList	""".exe"""		1086250	1					
ANR	1088108	Argument	""".exe"""		1086250	0					
ANR	1088109	PrimaryExpression	""".exe"""		1086250	0					
ANR	1088110	Argument	extension		1086250	1					
ANR	1088111	Identifier	extension		1086250	0					
ANR	1088112	EqualityExpression	"MATCH == strcasecmp ( "".com"" , extension )"		1086250	1		==			
ANR	1088113	Identifier	MATCH		1086250	0					
ANR	1088114	CallExpression	"strcasecmp ( "".com"" , extension )"		1086250	1					
ANR	1088115	Callee	strcasecmp		1086250	0					
ANR	1088116	Identifier	strcasecmp		1086250	0					
ANR	1088117	ArgumentList	""".com"""		1086250	1					
ANR	1088118	Argument	""".com"""		1086250	0					
ANR	1088119	PrimaryExpression	""".com"""		1086250	0					
ANR	1088120	Argument	extension		1086250	1					
ANR	1088121	Identifier	extension		1086250	0					
ANR	1088122	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Create_Process(): executable: '%s'\\n"" , executable )"	7835:1:241068:241149	1086250	86	True				
ANR	1088123	CallExpression	"dprintf ( D_FULLDEBUG , ""Create_Process(): executable: '%s'\\n"" , executable )"		1086250	0					
ANR	1088124	Callee	dprintf		1086250	0					
ANR	1088125	Identifier	dprintf		1086250	0					
ANR	1088126	ArgumentList	D_FULLDEBUG		1086250	1					
ANR	1088127	Argument	D_FULLDEBUG		1086250	0					
ANR	1088128	Identifier	D_FULLDEBUG		1086250	0					
ANR	1088129	Argument	"""Create_Process(): executable: '%s'\\n"""		1086250	1					
ANR	1088130	PrimaryExpression	"""Create_Process(): executable: '%s'\\n"""		1086250	0					
ANR	1088131	Argument	executable		1086250	2					
ANR	1088132	Identifier	executable		1086250	0					
ANR	1088133	IfStatement	if ( bIs16Bit )		1086250	87					
ANR	1088134	Condition	bIs16Bit	7840:6:241159:241166	1086250	0	True				
ANR	1088135	Identifier	bIs16Bit		1086250	0					
ANR	1088136	CompoundStatement		523:17:17215:17215	1086250	1					
ANR	1088137	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"""" , executable )"	7850:2:241433:241480	1086250	0	True				
ANR	1088138	CallExpression	"strArgs . sprintf ( ""\\""%s\\"""" , executable )"		1086250	0					
ANR	1088139	Callee	strArgs . sprintf		1086250	0					
ANR	1088140	MemberAccess	strArgs . sprintf		1086250	0					
ANR	1088141	Identifier	strArgs		1086250	0					
ANR	1088142	Identifier	sprintf		1086250	1					
ANR	1088143	ArgumentList	"""\\""%s\\"""""		1086250	1					
ANR	1088144	Argument	"""\\""%s\\"""""		1086250	0					
ANR	1088145	PrimaryExpression	"""\\""%s\\"""""		1086250	0					
ANR	1088146	Argument	executable		1086250	1					
ANR	1088147	Identifier	executable		1086250	0					
ANR	1088148	ExpressionStatement	"strArgs . replaceString ( ""/"" , ""\\\\"" , 0 )"	7855:2:241534:241583	1086250	1	True				
ANR	1088149	CallExpression	"strArgs . replaceString ( ""/"" , ""\\\\"" , 0 )"		1086250	0					
ANR	1088150	Callee	strArgs . replaceString		1086250	0					
ANR	1088151	MemberAccess	strArgs . replaceString		1086250	0					
ANR	1088152	Identifier	strArgs		1086250	0					
ANR	1088153	Identifier	replaceString		1086250	1					
ANR	1088154	ArgumentList	"""/"""		1086250	1					
ANR	1088155	Argument	"""/"""		1086250	0					
ANR	1088156	PrimaryExpression	"""/"""		1086250	0					
ANR	1088157	Argument	"""\\\\"""		1086250	1					
ANR	1088158	PrimaryExpression	"""\\\\"""		1086250	0					
ANR	1088159	Argument	0		1086250	2					
ANR	1088160	PrimaryExpression	0		1086250	0					
ANR	1088161	ExpressionStatement	first_arg_to_copy = 1	7860:2:241588:241609	1086250	2	True				
ANR	1088162	AssignmentExpression	first_arg_to_copy = 1		1086250	0		=			
ANR	1088163	Identifier	first_arg_to_copy		1086250	0					
ANR	1088164	PrimaryExpression	1		1086250	1					
ANR	1088165	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7861:2:241613:241707	1086250	3	True				
ANR	1088166	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	0		=			
ANR	1088167	Identifier	args_success		1086250	0					
ANR	1088168	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	1					
ANR	1088169	Callee	args . GetArgsStringWin32		1086250	0					
ANR	1088170	MemberAccess	args . GetArgsStringWin32		1086250	0					
ANR	1088171	Identifier	args		1086250	0					
ANR	1088172	Identifier	GetArgsStringWin32		1086250	1					
ANR	1088173	ArgumentList	& strArgs		1086250	1					
ANR	1088174	Argument	& strArgs		1086250	0					
ANR	1088175	UnaryOperationExpression	& strArgs		1086250	0					
ANR	1088176	UnaryOperator	&		1086250	0					
ANR	1088177	Identifier	strArgs		1086250	1					
ANR	1088178	Argument	first_arg_to_copy		1086250	1					
ANR	1088179	Identifier	first_arg_to_copy		1086250	0					
ANR	1088180	Argument	& args_errors		1086250	2					
ANR	1088181	UnaryOperationExpression	& args_errors		1086250	0					
ANR	1088182	UnaryOperator	&		1086250	0					
ANR	1088183	Identifier	args_errors		1086250	1					
ANR	1088184	Statement	dprintf	7866:2:241712:241718	1086250	4	True				
ANR	1088185	Statement	(	7866:10:241720:241720	1086250	5	True				
ANR	1088186	Statement	D_ALWAYS	7867:3:241726:241733	1086250	6	True				
ANR	1088187	Statement	","	7867:11:241734:241734	1086250	7	True				
ANR	1088188	Statement	"""Executable is 16-bit, """	7868:3:241740:241763	1086250	8	True				
ANR	1088189	Statement	"""args=%s\\n"""	7869:3:241768:241778	1086250	9	True				
ANR	1088190	Statement	","	7869:14:241779:241779	1086250	10	True				
ANR	1088191	Statement	args	7870:3:241785:241788	1086250	11	True				
ANR	1088192	Statement	)	7870:8:241790:241790	1086250	12	True				
ANR	1088193	ExpressionStatement		7870:9:241791:241791	1086250	13	True				
ANR	1088194	ElseStatement	else		1086250	0					
ANR	1088195	IfStatement	if ( batch_file )		1086250	0					
ANR	1088196	Condition	batch_file	7872:13:241807:241816	1086250	0	True				
ANR	1088197	Identifier	batch_file		1086250	0					
ANR	1088198	CompoundStatement		561:2:17985:18043	1086250	1					
ANR	1088199	IdentifierDeclStatement	char systemshell [ MAX_PATH + 1 ] ;	7874:2:241825:241853	1086250	0	True				
ANR	1088200	IdentifierDecl	systemshell [ MAX_PATH + 1 ]		1086250	0					
ANR	1088201	IdentifierDeclType	char [ MAX_PATH + 1 ]		1086250	0					
ANR	1088202	Identifier	systemshell		1086250	1					
ANR	1088203	AdditiveExpression	MAX_PATH + 1		1086250	2		+			
ANR	1088204	Identifier	MAX_PATH		1086250	0					
ANR	1088205	PrimaryExpression	1		1086250	1					
ANR	1088206	IdentifierDeclStatement	"UINT length = GetSystemDirectory ( systemshell , MAX_PATH ) ;"	7878:2:241940:241998	1086250	1	True				
ANR	1088207	IdentifierDecl	"length = GetSystemDirectory ( systemshell , MAX_PATH )"		1086250	0					
ANR	1088208	IdentifierDeclType	UINT		1086250	0					
ANR	1088209	Identifier	length		1086250	1					
ANR	1088210	AssignmentExpression	"length = GetSystemDirectory ( systemshell , MAX_PATH )"		1086250	2		=			
ANR	1088211	Identifier	length		1086250	0					
ANR	1088212	CallExpression	"GetSystemDirectory ( systemshell , MAX_PATH )"		1086250	1					
ANR	1088213	Callee	GetSystemDirectory		1086250	0					
ANR	1088214	Identifier	GetSystemDirectory		1086250	0					
ANR	1088215	ArgumentList	systemshell		1086250	1					
ANR	1088216	Argument	systemshell		1086250	0					
ANR	1088217	Identifier	systemshell		1086250	0					
ANR	1088218	Argument	MAX_PATH		1086250	1					
ANR	1088219	Identifier	MAX_PATH		1086250	0					
ANR	1088220	ExpressionStatement	"strncat ( systemshell , ""\\\\cmd.exe"" , MAX_PATH - length - 1 )"	7879:2:242002:242061	1086250	2	True				
ANR	1088221	CallExpression	"strncat ( systemshell , ""\\\\cmd.exe"" , MAX_PATH - length - 1 )"		1086250	0					
ANR	1088222	Callee	strncat		1086250	0					
ANR	1088223	Identifier	strncat		1086250	0					
ANR	1088224	ArgumentList	systemshell		1086250	1					
ANR	1088225	Argument	systemshell		1086250	0					
ANR	1088226	Identifier	systemshell		1086250	0					
ANR	1088227	Argument	"""\\\\cmd.exe"""		1086250	1					
ANR	1088228	PrimaryExpression	"""\\\\cmd.exe"""		1086250	0					
ANR	1088229	Argument	MAX_PATH - length - 1		1086250	2					
ANR	1088230	AdditiveExpression	MAX_PATH - length - 1		1086250	0		-			
ANR	1088231	Identifier	MAX_PATH		1086250	0					
ANR	1088232	AdditiveExpression	length - 1		1086250	1		-			
ANR	1088233	Identifier	length		1086250	0					
ANR	1088234	PrimaryExpression	1		1086250	1					
ANR	1088235	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"" /Q /C \\""%s\\"""" , systemshell , executable )"	7883:2:242138:242214	1086250	3	True				
ANR	1088236	CallExpression	"strArgs . sprintf ( ""\\""%s\\"" /Q /C \\""%s\\"""" , systemshell , executable )"		1086250	0					
ANR	1088237	Callee	strArgs . sprintf		1086250	0					
ANR	1088238	MemberAccess	strArgs . sprintf		1086250	0					
ANR	1088239	Identifier	strArgs		1086250	0					
ANR	1088240	Identifier	sprintf		1086250	1					
ANR	1088241	ArgumentList	"""\\""%s\\"" /Q /C \\""%s\\"""""		1086250	1					
ANR	1088242	Argument	"""\\""%s\\"" /Q /C \\""%s\\"""""		1086250	0					
ANR	1088243	PrimaryExpression	"""\\""%s\\"" /Q /C \\""%s\\"""""		1086250	0					
ANR	1088244	Argument	systemshell		1086250	1					
ANR	1088245	Identifier	systemshell		1086250	0					
ANR	1088246	Argument	executable		1086250	2					
ANR	1088247	Identifier	executable		1086250	0					
ANR	1088248	ExpressionStatement	executable_buf = systemshell	7889:2:242264:242292	1086250	4	True				
ANR	1088249	AssignmentExpression	executable_buf = systemshell		1086250	0		=			
ANR	1088250	Identifier	executable_buf		1086250	0					
ANR	1088251	Identifier	systemshell		1086250	1					
ANR	1088252	ExpressionStatement	executable = executable_buf . Value ( )	7890:2:242296:242332	1086250	5	True				
ANR	1088253	AssignmentExpression	executable = executable_buf . Value ( )		1086250	0		=			
ANR	1088254	Identifier	executable		1086250	0					
ANR	1088255	CallExpression	executable_buf . Value ( )		1086250	1					
ANR	1088256	Callee	executable_buf . Value		1086250	0					
ANR	1088257	MemberAccess	executable_buf . Value		1086250	0					
ANR	1088258	Identifier	executable_buf		1086250	0					
ANR	1088259	Identifier	Value		1086250	1					
ANR	1088260	ArgumentList			1086250	1					
ANR	1088261	ExpressionStatement	first_arg_to_copy = 1	7894:2:242436:242457	1086250	6	True				
ANR	1088262	AssignmentExpression	first_arg_to_copy = 1		1086250	0		=			
ANR	1088263	Identifier	first_arg_to_copy		1086250	0					
ANR	1088264	PrimaryExpression	1		1086250	1					
ANR	1088265	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7895:2:242461:242553	1086250	7	True				
ANR	1088266	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	0		=			
ANR	1088267	Identifier	args_success		1086250	0					
ANR	1088268	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	1					
ANR	1088269	Callee	args . GetArgsStringWin32		1086250	0					
ANR	1088270	MemberAccess	args . GetArgsStringWin32		1086250	0					
ANR	1088271	Identifier	args		1086250	0					
ANR	1088272	Identifier	GetArgsStringWin32		1086250	1					
ANR	1088273	ArgumentList	& strArgs		1086250	1					
ANR	1088274	Argument	& strArgs		1086250	0					
ANR	1088275	UnaryOperationExpression	& strArgs		1086250	0					
ANR	1088276	UnaryOperator	&		1086250	0					
ANR	1088277	Identifier	strArgs		1086250	1					
ANR	1088278	Argument	first_arg_to_copy		1086250	1					
ANR	1088279	Identifier	first_arg_to_copy		1086250	0					
ANR	1088280	Argument	& args_errors		1086250	2					
ANR	1088281	UnaryOperationExpression	& args_errors		1086250	0					
ANR	1088282	UnaryOperator	&		1086250	0					
ANR	1088283	Identifier	args_errors		1086250	1					
ANR	1088284	Statement	dprintf	7900:2:242558:242564	1086250	8	True				
ANR	1088285	Statement	(	7900:10:242566:242566	1086250	9	True				
ANR	1088286	Statement	D_ALWAYS	7901:3:242572:242579	1086250	10	True				
ANR	1088287	Statement	","	7901:11:242580:242580	1086250	11	True				
ANR	1088288	Statement	"""Executable is a batch file, """	7902:3:242586:242615	1086250	12	True				
ANR	1088289	Statement	"""running: %s\\n"""	7903:3:242620:242634	1086250	13	True				
ANR	1088290	Statement	","	7903:18:242635:242635	1086250	14	True				
ANR	1088291	Statement	strArgs	7904:3:242640:242646	1086250	15	True				
ANR	1088292	Statement	.	7904:10:242647:242647	1086250	16	True				
ANR	1088293	Statement	Value	7904:11:242648:242652	1086250	17	True				
ANR	1088294	Statement	(	7904:17:242654:242654	1086250	18	True				
ANR	1088295	Statement	)	7904:18:242655:242655	1086250	19	True				
ANR	1088296	Statement	)	7904:20:242657:242657	1086250	20	True				
ANR	1088297	ExpressionStatement		7904:21:242658:242658	1086250	21	True				
ANR	1088298	ElseStatement	else		1086250	0					
ANR	1088299	IfStatement	if ( allow_scripts && ! binary_executable )		1086250	0					
ANR	1088300	Condition	allow_scripts && ! binary_executable	7906:13:242674:242708	1086250	0	True				
ANR	1088301	AndExpression	allow_scripts && ! binary_executable		1086250	0		&&			
ANR	1088302	Identifier	allow_scripts		1086250	0					
ANR	1088303	UnaryOperationExpression	! binary_executable		1086250	1					
ANR	1088304	UnaryOperator	!		1086250	0					
ANR	1088305	Identifier	binary_executable		1086250	1					
ANR	1088306	CompoundStatement		589:51:18757:18757	1086250	1					
ANR	1088307	ExpressionStatement	"extension = strrchr ( condor_basename ( executable ) , '.' )"	7911:2:242845:242901	1086250	0	True				
ANR	1088308	AssignmentExpression	"extension = strrchr ( condor_basename ( executable ) , '.' )"		1086250	0		=			
ANR	1088309	Identifier	extension		1086250	0					
ANR	1088310	CallExpression	"strrchr ( condor_basename ( executable ) , '.' )"		1086250	1					
ANR	1088311	Callee	strrchr		1086250	0					
ANR	1088312	Identifier	strrchr		1086250	0					
ANR	1088313	ArgumentList	condor_basename ( executable )		1086250	1					
ANR	1088314	Argument	condor_basename ( executable )		1086250	0					
ANR	1088315	CallExpression	condor_basename ( executable )		1086250	0					
ANR	1088316	Callee	condor_basename		1086250	0					
ANR	1088317	Identifier	condor_basename		1086250	0					
ANR	1088318	ArgumentList	executable		1086250	1					
ANR	1088319	Argument	executable		1086250	0					
ANR	1088320	Identifier	executable		1086250	0					
ANR	1088321	Argument	'.'		1086250	1					
ANR	1088322	PrimaryExpression	'.'		1086250	0					
ANR	1088323	IfStatement	if ( ! extension )		1086250	1					
ANR	1088324	Condition	! extension	7913:7:242911:242920	1086250	0	True				
ANR	1088325	UnaryOperationExpression	! extension		1086250	0					
ANR	1088326	UnaryOperator	!		1086250	0					
ANR	1088327	Identifier	extension		1086250	1					
ANR	1088328	CompoundStatement		596:20:18969:18969	1086250	1					
ANR	1088329	Statement	dprintf	7915:3:242930:242936	1086250	0	True				
ANR	1088330	Statement	(	7915:11:242938:242938	1086250	1	True				
ANR	1088331	Statement	D_ALWAYS	7916:4:242945:242952	1086250	2	True				
ANR	1088332	Statement	","	7916:12:242953:242953	1086250	3	True				
ANR	1088333	Statement	"""Create_Process(): Failed to extract """	7917:4:242960:242997	1086250	4	True				
ANR	1088334	Statement	"""the extension from file %s.\\n"""	7918:4:243003:243033	1086250	5	True				
ANR	1088335	Statement	","	7918:35:243034:243034	1086250	6	True				
ANR	1088336	Statement	executable	7918:37:243036:243045	1086250	7	True				
ANR	1088337	Statement	)	7918:48:243047:243047	1086250	8	True				
ANR	1088338	ExpressionStatement		7918:49:243048:243048	1086250	9	True				
ANR	1088339	ExpressionStatement	binary_executable = true	7929:3:243410:243434	1086250	10	True				
ANR	1088340	AssignmentExpression	binary_executable = true		1086250	0		=			
ANR	1088341	Identifier	binary_executable		1086250	0					
ANR	1088342	Identifier	true		1086250	1					
ANR	1088343	ElseStatement	else		1086250	0					
ANR	1088344	CompoundStatement		614:9:19491:19491	1086250	0					
ANR	1088345	ExpressionStatement	"ok = GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"	7935:3:243531:243616	1086250	0	True				
ANR	1088346	AssignmentExpression	"ok = GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"		1086250	0		=			
ANR	1088347	Identifier	ok		1086250	0					
ANR	1088348	CallExpression	"GetExecutableAndArgumentTemplateByExtention ( extension , interpreter )"		1086250	1					
ANR	1088349	Callee	GetExecutableAndArgumentTemplateByExtention		1086250	0					
ANR	1088350	Identifier	GetExecutableAndArgumentTemplateByExtention		1086250	0					
ANR	1088351	ArgumentList	extension		1086250	1					
ANR	1088352	Argument	extension		1086250	0					
ANR	1088353	Identifier	extension		1086250	0					
ANR	1088354	Argument	interpreter		1086250	1					
ANR	1088355	Identifier	interpreter		1086250	0					
ANR	1088356	IfStatement	if ( ! ok )		1086250	1					
ANR	1088357	Condition	! ok	7939:8:243627:243629	1086250	0	True				
ANR	1088358	UnaryOperationExpression	! ok		1086250	0					
ANR	1088359	UnaryOperator	!		1086250	0					
ANR	1088360	Identifier	ok		1086250	1					
ANR	1088361	CompoundStatement		622:14:19678:19678	1086250	1					
ANR	1088362	Statement	dprintf	7941:4:243640:243646	1086250	0	True				
ANR	1088363	Statement	(	7941:12:243648:243648	1086250	1	True				
ANR	1088364	Statement	D_ALWAYS	7942:5:243656:243663	1086250	2	True				
ANR	1088365	Statement	","	7942:13:243664:243664	1086250	3	True				
ANR	1088366	Statement	"""Create_Process(): Failed to find an """	7943:5:243672:243709	1086250	4	True				
ANR	1088367	Statement	"""executable for extension *%s\\n"""	7944:5:243716:243747	1086250	5	True				
ANR	1088368	Statement	","	7944:37:243748:243748	1086250	6	True				
ANR	1088369	Statement	extension	7945:5:243755:243763	1086250	7	True				
ANR	1088370	Statement	)	7945:15:243765:243765	1086250	8	True				
ANR	1088371	ExpressionStatement		7945:16:243766:243766	1086250	9	True				
ANR	1088372	ExpressionStatement	binary_executable = true	7951:4:243984:244008	1086250	10	True				
ANR	1088373	AssignmentExpression	binary_executable = true		1086250	0		=			
ANR	1088374	Identifier	binary_executable		1086250	0					
ANR	1088375	Identifier	true		1086250	1					
ANR	1088376	ElseStatement	else		1086250	0					
ANR	1088377	CompoundStatement		636:10:20066:20066	1086250	0					
ANR	1088378	ExpressionStatement	"strArgs . sprintf ( ""\\""%s\\"" \\""%s\\"""" , interpreter , executable )"	7957:4:244120:244196	1086250	0	True				
ANR	1088379	CallExpression	"strArgs . sprintf ( ""\\""%s\\"" \\""%s\\"""" , interpreter , executable )"		1086250	0					
ANR	1088380	Callee	strArgs . sprintf		1086250	0					
ANR	1088381	MemberAccess	strArgs . sprintf		1086250	0					
ANR	1088382	Identifier	strArgs		1086250	0					
ANR	1088383	Identifier	sprintf		1086250	1					
ANR	1088384	ArgumentList	"""\\""%s\\"" \\""%s\\"""""		1086250	1					
ANR	1088385	Argument	"""\\""%s\\"" \\""%s\\"""""		1086250	0					
ANR	1088386	PrimaryExpression	"""\\""%s\\"" \\""%s\\"""""		1086250	0					
ANR	1088387	Argument	interpreter		1086250	1					
ANR	1088388	Identifier	interpreter		1086250	0					
ANR	1088389	Argument	executable		1086250	2					
ANR	1088390	Identifier	executable		1086250	0					
ANR	1088391	ExpressionStatement	executable_buf = interpreter	7964:4:244295:244323	1086250	1	True				
ANR	1088392	AssignmentExpression	executable_buf = interpreter		1086250	0		=			
ANR	1088393	Identifier	executable_buf		1086250	0					
ANR	1088394	Identifier	interpreter		1086250	1					
ANR	1088395	ExpressionStatement	executable = executable_buf . Value ( )	7965:4:244329:244366	1086250	2	True				
ANR	1088396	AssignmentExpression	executable = executable_buf . Value ( )		1086250	0		=			
ANR	1088397	Identifier	executable		1086250	0					
ANR	1088398	CallExpression	executable_buf . Value ( )		1086250	1					
ANR	1088399	Callee	executable_buf . Value		1086250	0					
ANR	1088400	MemberAccess	executable_buf . Value		1086250	0					
ANR	1088401	Identifier	executable_buf		1086250	0					
ANR	1088402	Identifier	Value		1086250	1					
ANR	1088403	ArgumentList			1086250	1					
ANR	1088404	ExpressionStatement	first_arg_to_copy = 1	7969:4:244472:244493	1086250	3	True				
ANR	1088405	AssignmentExpression	first_arg_to_copy = 1		1086250	0		=			
ANR	1088406	Identifier	first_arg_to_copy		1086250	0					
ANR	1088407	PrimaryExpression	1		1086250	1					
ANR	1088408	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7970:4:244499:244598	1086250	4	True				
ANR	1088409	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	0		=			
ANR	1088410	Identifier	args_success		1086250	0					
ANR	1088411	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	1					
ANR	1088412	Callee	args . GetArgsStringWin32		1086250	0					
ANR	1088413	MemberAccess	args . GetArgsStringWin32		1086250	0					
ANR	1088414	Identifier	args		1086250	0					
ANR	1088415	Identifier	GetArgsStringWin32		1086250	1					
ANR	1088416	ArgumentList	& strArgs		1086250	1					
ANR	1088417	Argument	& strArgs		1086250	0					
ANR	1088418	UnaryOperationExpression	& strArgs		1086250	0					
ANR	1088419	UnaryOperator	&		1086250	0					
ANR	1088420	Identifier	strArgs		1086250	1					
ANR	1088421	Argument	first_arg_to_copy		1086250	1					
ANR	1088422	Identifier	first_arg_to_copy		1086250	0					
ANR	1088423	Argument	& args_errors		1086250	2					
ANR	1088424	UnaryOperationExpression	& args_errors		1086250	0					
ANR	1088425	UnaryOperator	&		1086250	0					
ANR	1088426	Identifier	args_errors		1086250	1					
ANR	1088427	Statement	dprintf	7975:4:244609:244615	1086250	5	True				
ANR	1088428	Statement	(	7975:12:244617:244617	1086250	6	True				
ANR	1088429	Statement	D_FULLDEBUG	7976:5:244624:244634	1086250	7	True				
ANR	1088430	Statement	","	7976:16:244635:244635	1086250	8	True				
ANR	1088431	Statement	"""Executable is a *%s script, """	7977:5:244642:244671	1086250	9	True				
ANR	1088432	Statement	"""running: %s\\n"""	7978:5:244678:244692	1086250	10	True				
ANR	1088433	Statement	","	7978:20:244693:244693	1086250	11	True				
ANR	1088434	Statement	extension	7979:5:244700:244708	1086250	12	True				
ANR	1088435	Statement	","	7979:14:244709:244709	1086250	13	True				
ANR	1088436	Statement	strArgs	7980:5:244716:244722	1086250	14	True				
ANR	1088437	Statement	.	7980:12:244723:244723	1086250	15	True				
ANR	1088438	Statement	Value	7980:13:244724:244728	1086250	16	True				
ANR	1088439	Statement	(	7980:19:244730:244730	1086250	17	True				
ANR	1088440	Statement	)	7980:20:244731:244731	1086250	18	True				
ANR	1088441	Statement	)	7980:22:244733:244733	1086250	19	True				
ANR	1088442	ExpressionStatement		7980:23:244734:244734	1086250	20	True				
ANR	1088443	IfStatement	if ( binary_executable && ! bIs16Bit )		1086250	88					
ANR	1088444	Condition	binary_executable && ! bIs16Bit	7992:6:244996:245025	1086250	0	True				
ANR	1088445	AndExpression	binary_executable && ! bIs16Bit		1086250	0		&&			
ANR	1088446	Identifier	binary_executable		1086250	0					
ANR	1088447	UnaryOperationExpression	! bIs16Bit		1086250	1					
ANR	1088448	UnaryOperator	!		1086250	0					
ANR	1088449	Identifier	bIs16Bit		1086250	1					
ANR	1088450	CompoundStatement		675:39:21074:21074	1086250	1					
ANR	1088451	ExpressionStatement	first_arg_to_copy = 0	7995:2:245090:245111	1086250	0	True				
ANR	1088452	AssignmentExpression	first_arg_to_copy = 0		1086250	0		=			
ANR	1088453	Identifier	first_arg_to_copy		1086250	0					
ANR	1088454	PrimaryExpression	0		1086250	1					
ANR	1088455	ExpressionStatement	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"	7996:2:245115:245208	1086250	1	True				
ANR	1088456	AssignmentExpression	"args_success = args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	0		=			
ANR	1088457	Identifier	args_success		1086250	0					
ANR	1088458	CallExpression	"args . GetArgsStringWin32 ( & strArgs , first_arg_to_copy , & args_errors )"		1086250	1					
ANR	1088459	Callee	args . GetArgsStringWin32		1086250	0					
ANR	1088460	MemberAccess	args . GetArgsStringWin32		1086250	0					
ANR	1088461	Identifier	args		1086250	0					
ANR	1088462	Identifier	GetArgsStringWin32		1086250	1					
ANR	1088463	ArgumentList	& strArgs		1086250	1					
ANR	1088464	Argument	& strArgs		1086250	0					
ANR	1088465	UnaryOperationExpression	& strArgs		1086250	0					
ANR	1088466	UnaryOperator	&		1086250	0					
ANR	1088467	Identifier	strArgs		1086250	1					
ANR	1088468	Argument	first_arg_to_copy		1086250	1					
ANR	1088469	Identifier	first_arg_to_copy		1086250	0					
ANR	1088470	Argument	& args_errors		1086250	2					
ANR	1088471	UnaryOperationExpression	& args_errors		1086250	0					
ANR	1088472	UnaryOperator	&		1086250	0					
ANR	1088473	Identifier	args_errors		1086250	1					
ANR	1088474	IfStatement	if ( ! args_success )		1086250	89					
ANR	1088475	Condition	! args_success	8003:4:245219:245231	1086250	0	True				
ANR	1088476	UnaryOperationExpression	! args_success		1086250	0					
ANR	1088477	UnaryOperator	!		1086250	0					
ANR	1088478	Identifier	args_success		1086250	1					
ANR	1088479	CompoundStatement		686:19:21279:21279	1086250	1					
ANR	1088480	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"" , args_errors . Value ( ) )"	8004:2:245238:245350	1086250	0	True				
ANR	1088481	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"" , args_errors . Value ( ) )"		1086250	0					
ANR	1088482	Callee	dprintf		1086250	0					
ANR	1088483	Identifier	dprintf		1086250	0					
ANR	1088484	ArgumentList	D_ALWAYS		1086250	1					
ANR	1088485	Argument	D_ALWAYS		1086250	0					
ANR	1088486	Identifier	D_ALWAYS		1086250	0					
ANR	1088487	Argument	"""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"""		1086250	1					
ANR	1088488	PrimaryExpression	"""ERROR: failed to produce Win32 argument string from CreateProcess: %s\\n"""		1086250	0					
ANR	1088489	Argument	args_errors . Value ( )		1086250	2					
ANR	1088490	CallExpression	args_errors . Value ( )		1086250	0					
ANR	1088491	Callee	args_errors . Value		1086250	0					
ANR	1088492	MemberAccess	args_errors . Value		1086250	0					
ANR	1088493	Identifier	args_errors		1086250	0					
ANR	1088494	Identifier	Value		1086250	1					
ANR	1088495	ArgumentList			1086250	1					
ANR	1088496	GotoStatement	goto wrapup ;	8005:2:245354:245365	1086250	1	True				
ANR	1088497	Identifier	wrapup		1086250	0					
ANR	1088498	IdentifierDeclStatement	"BOOL cp_result , gbt_result ;"	8008:1:245372:245398	1086250	90	True				
ANR	1088499	IdentifierDecl	cp_result		1086250	0					
ANR	1088500	IdentifierDeclType	BOOL		1086250	0					
ANR	1088501	Identifier	cp_result		1086250	1					
ANR	1088502	IdentifierDecl	gbt_result		1086250	1					
ANR	1088503	IdentifierDeclType	BOOL		1086250	0					
ANR	1088504	Identifier	gbt_result		1086250	1					
ANR	1088505	IdentifierDeclStatement	DWORD binType ;	8009:1:245401:245414	1086250	91	True				
ANR	1088506	IdentifierDecl	binType		1086250	0					
ANR	1088507	IdentifierDeclType	DWORD		1086250	0					
ANR	1088508	Identifier	binType		1086250	1					
ANR	1088509	ExpressionStatement	"gbt_result = GetBinaryType ( executable , & binType )"	8010:1:245417:245465	1086250	92	True				
ANR	1088510	AssignmentExpression	"gbt_result = GetBinaryType ( executable , & binType )"		1086250	0		=			
ANR	1088511	Identifier	gbt_result		1086250	0					
ANR	1088512	CallExpression	"GetBinaryType ( executable , & binType )"		1086250	1					
ANR	1088513	Callee	GetBinaryType		1086250	0					
ANR	1088514	Identifier	GetBinaryType		1086250	0					
ANR	1088515	ArgumentList	executable		1086250	1					
ANR	1088516	Argument	executable		1086250	0					
ANR	1088517	Identifier	executable		1086250	0					
ANR	1088518	Argument	& binType		1086250	1					
ANR	1088519	UnaryOperationExpression	& binType		1086250	0					
ANR	1088520	UnaryOperator	&		1086250	0					
ANR	1088521	Identifier	binType		1086250	1					
ANR	1088522	IfStatement	if ( ! gbt_result )		1086250	93					
ANR	1088523	Condition	! gbt_result	8017:6:245764:245774	1086250	0	True				
ANR	1088524	UnaryOperationExpression	! gbt_result		1086250	0					
ANR	1088525	UnaryOperator	!		1086250	0					
ANR	1088526	Identifier	gbt_result		1086250	1					
ANR	1088527	CompoundStatement		701:2:21827:21881	1086250	1					
ANR	1088528	IdentifierDeclStatement	char * alt_name = alternate_exec_pathname ( executable ) ;	8018:2:245782:245836	1086250	0	True				
ANR	1088529	IdentifierDecl	* alt_name = alternate_exec_pathname ( executable )		1086250	0					
ANR	1088530	IdentifierDeclType	char *		1086250	0					
ANR	1088531	Identifier	alt_name		1086250	1					
ANR	1088532	AssignmentExpression	* alt_name = alternate_exec_pathname ( executable )		1086250	2		=			
ANR	1088533	Identifier	alt_name		1086250	0					
ANR	1088534	CallExpression	alternate_exec_pathname ( executable )		1086250	1					
ANR	1088535	Callee	alternate_exec_pathname		1086250	0					
ANR	1088536	Identifier	alternate_exec_pathname		1086250	0					
ANR	1088537	ArgumentList	executable		1086250	1					
ANR	1088538	Argument	executable		1086250	0					
ANR	1088539	Identifier	executable		1086250	0					
ANR	1088540	IfStatement	if ( alt_name )		1086250	1					
ANR	1088541	Condition	alt_name	8019:7:245845:245852	1086250	0	True				
ANR	1088542	Identifier	alt_name		1086250	0					
ANR	1088543	CompoundStatement		702:18:21901:21901	1086250	1					
ANR	1088544	ExpressionStatement	executable_with_exe = alt_name	8020:3:245861:245891	1086250	0	True				
ANR	1088545	AssignmentExpression	executable_with_exe = alt_name		1086250	0		=			
ANR	1088546	Identifier	executable_with_exe		1086250	0					
ANR	1088547	Identifier	alt_name		1086250	1					
ANR	1088548	ExpressionStatement	executable = executable_with_exe . Value ( )	8021:3:245896:245936	1086250	1	True				
ANR	1088549	AssignmentExpression	executable = executable_with_exe . Value ( )		1086250	0		=			
ANR	1088550	Identifier	executable		1086250	0					
ANR	1088551	CallExpression	executable_with_exe . Value ( )		1086250	1					
ANR	1088552	Callee	executable_with_exe . Value		1086250	0					
ANR	1088553	MemberAccess	executable_with_exe . Value		1086250	0					
ANR	1088554	Identifier	executable_with_exe		1086250	0					
ANR	1088555	Identifier	Value		1086250	1					
ANR	1088556	ArgumentList			1086250	1					
ANR	1088557	ExpressionStatement	free ( alt_name )	8022:3:245941:245955	1086250	2	True				
ANR	1088558	CallExpression	free ( alt_name )		1086250	0					
ANR	1088559	Callee	free		1086250	0					
ANR	1088560	Identifier	free		1086250	0					
ANR	1088561	ArgumentList	alt_name		1086250	1					
ANR	1088562	Argument	alt_name		1086250	0					
ANR	1088563	Identifier	alt_name		1086250	0					
ANR	1088564	ExpressionStatement	"gbt_result = GetBinaryType ( executable , & binType )"	8024:3:245994:246042	1086250	3	True				
ANR	1088565	AssignmentExpression	"gbt_result = GetBinaryType ( executable , & binType )"		1086250	0		=			
ANR	1088566	Identifier	gbt_result		1086250	0					
ANR	1088567	CallExpression	"GetBinaryType ( executable , & binType )"		1086250	1					
ANR	1088568	Callee	GetBinaryType		1086250	0					
ANR	1088569	Identifier	GetBinaryType		1086250	0					
ANR	1088570	ArgumentList	executable		1086250	1					
ANR	1088571	Argument	executable		1086250	0					
ANR	1088572	Identifier	executable		1086250	0					
ANR	1088573	Argument	& binType		1086250	1					
ANR	1088574	UnaryOperationExpression	& binType		1086250	0					
ANR	1088575	UnaryOperator	&		1086250	0					
ANR	1088576	Identifier	binType		1086250	1					
ANR	1088577	IfStatement	if ( ! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit ) )		1086250	94					
ANR	1088578	Condition	! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit )	8031:6:246269:246324	1086250	0	True				
ANR	1088579	OrExpression	! gbt_result || ( binType == SCS_DOS_BINARY && ! bIs16Bit )		1086250	0		||			
ANR	1088580	UnaryOperationExpression	! gbt_result		1086250	0					
ANR	1088581	UnaryOperator	!		1086250	0					
ANR	1088582	Identifier	gbt_result		1086250	1					
ANR	1088583	AndExpression	binType == SCS_DOS_BINARY && ! bIs16Bit		1086250	1		&&			
ANR	1088584	EqualityExpression	binType == SCS_DOS_BINARY		1086250	0		==			
ANR	1088585	Identifier	binType		1086250	0					
ANR	1088586	Identifier	SCS_DOS_BINARY		1086250	1					
ANR	1088587	UnaryOperationExpression	! bIs16Bit		1086250	1					
ANR	1088588	UnaryOperator	!		1086250	0					
ANR	1088589	Identifier	bIs16Bit		1086250	1					
ANR	1088590	CompoundStatement		714:65:22373:22373	1086250	1					
ANR	1088591	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: %s is not a valid Windows executable\\n"" , executable )"	8033:2:246333:246418	1086250	0	True				
ANR	1088592	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: %s is not a valid Windows executable\\n"" , executable )"		1086250	0					
ANR	1088593	Callee	dprintf		1086250	0					
ANR	1088594	Identifier	dprintf		1086250	0					
ANR	1088595	ArgumentList	D_ALWAYS		1086250	1					
ANR	1088596	Argument	D_ALWAYS		1086250	0					
ANR	1088597	Identifier	D_ALWAYS		1086250	0					
ANR	1088598	Argument	"""ERROR: %s is not a valid Windows executable\\n"""		1086250	1					
ANR	1088599	PrimaryExpression	"""ERROR: %s is not a valid Windows executable\\n"""		1086250	0					
ANR	1088600	Argument	executable		1086250	2					
ANR	1088601	Identifier	executable		1086250	0					
ANR	1088602	ExpressionStatement	cp_result = 0	8035:2:246422:246435	1086250	1	True				
ANR	1088603	AssignmentExpression	cp_result = 0		1086250	0		=			
ANR	1088604	Identifier	cp_result		1086250	0					
ANR	1088605	PrimaryExpression	0		1086250	1					
ANR	1088606	GotoStatement	goto wrapup ;	8037:2:246440:246451	1086250	2	True				
ANR	1088607	Identifier	wrapup		1086250	0					
ANR	1088608	ElseStatement	else		1086250	0					
ANR	1088609	CompoundStatement		721:8:22506:22506	1086250	0					
ANR	1088610	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""GetBinaryType() returned %d\\n"" , binType )"	8039:2:246465:246527	1086250	0	True				
ANR	1088611	CallExpression	"dprintf ( D_FULLDEBUG , ""GetBinaryType() returned %d\\n"" , binType )"		1086250	0					
ANR	1088612	Callee	dprintf		1086250	0					
ANR	1088613	Identifier	dprintf		1086250	0					
ANR	1088614	ArgumentList	D_FULLDEBUG		1086250	1					
ANR	1088615	Argument	D_FULLDEBUG		1086250	0					
ANR	1088616	Identifier	D_FULLDEBUG		1086250	0					
ANR	1088617	Argument	"""GetBinaryType() returned %d\\n"""		1086250	1					
ANR	1088618	PrimaryExpression	"""GetBinaryType() returned %d\\n"""		1086250	0					
ANR	1088619	Argument	binType		1086250	2					
ANR	1088620	Identifier	binType		1086250	0					
ANR	1088621	IfStatement	if ( family_info != NULL )		1086250	95					
ANR	1088622	Condition	family_info != NULL	8046:5:246689:246707	1086250	0	True				
ANR	1088623	EqualityExpression	family_info != NULL		1086250	0		!=			
ANR	1088624	Identifier	family_info		1086250	0					
ANR	1088625	Identifier	NULL		1086250	1					
ANR	1088626	CompoundStatement		729:26:22755:22755	1086250	1					
ANR	1088627	ExpressionStatement	create_process_flags |= CREATE_SUSPENDED	8047:2:246714:246754	1086250	0	True				
ANR	1088628	AssignmentExpression	create_process_flags |= CREATE_SUSPENDED		1086250	0		|=			
ANR	1088629	Identifier	create_process_flags		1086250	0					
ANR	1088630	Identifier	CREATE_SUSPENDED		1086250	1					
ANR	1088631	IfStatement	if ( priv == PRIV_USER_FINAL )		1086250	96					
ANR	1088632	Condition	priv == PRIV_USER_FINAL	8055:6:247011:247033	1086250	0	True				
ANR	1088633	EqualityExpression	priv == PRIV_USER_FINAL		1086250	0		==			
ANR	1088634	Identifier	priv		1086250	0					
ANR	1088635	Identifier	PRIV_USER_FINAL		1086250	1					
ANR	1088636	CompoundStatement		738:32:23082:23082	1086250	1					
ANR	1088637	ExpressionStatement	create_process_flags |= CREATE_NEW_CONSOLE	8056:2:247041:247083	1086250	0	True				
ANR	1088638	AssignmentExpression	create_process_flags |= CREATE_NEW_CONSOLE		1086250	0		|=			
ANR	1088639	Identifier	create_process_flags		1086250	0					
ANR	1088640	Identifier	CREATE_NEW_CONSOLE		1086250	1					
ANR	1088641	ExpressionStatement	si . dwFlags |= STARTF_USESHOWWINDOW	8057:2:247087:247121	1086250	1	True				
ANR	1088642	AssignmentExpression	si . dwFlags |= STARTF_USESHOWWINDOW		1086250	0		|=			
ANR	1088643	MemberAccess	si . dwFlags		1086250	0					
ANR	1088644	Identifier	si		1086250	0					
ANR	1088645	Identifier	dwFlags		1086250	1					
ANR	1088646	Identifier	STARTF_USESHOWWINDOW		1086250	1					
ANR	1088647	ExpressionStatement	si . wShowWindow = SW_SHOWNOACTIVATE	8058:8:247131:247165	1086250	2	True				
ANR	1088648	AssignmentExpression	si . wShowWindow = SW_SHOWNOACTIVATE		1086250	0		=			
ANR	1088649	MemberAccess	si . wShowWindow		1086250	0					
ANR	1088650	Identifier	si		1086250	0					
ANR	1088651	Identifier	wShowWindow		1086250	1					
ANR	1088652	Identifier	SW_SHOWNOACTIVATE		1086250	1					
ANR	1088653	IdentifierDeclStatement	const char * cwdBackup ;	8061:1:247172:247193	1086250	97	True				
ANR	1088654	IdentifierDecl	* cwdBackup		1086250	0					
ANR	1088655	IdentifierDeclType	const char *		1086250	0					
ANR	1088656	Identifier	cwdBackup		1086250	1					
ANR	1088657	IfStatement	if ( cwd && ( cwd [ 0 ] == '\\0' ) )		1086250	98					
ANR	1088658	Condition	cwd && ( cwd [ 0 ] == '\\0' )	8062:5:247200:247222	1086250	0	True				
ANR	1088659	AndExpression	cwd && ( cwd [ 0 ] == '\\0' )		1086250	0		&&			
ANR	1088660	Identifier	cwd		1086250	0					
ANR	1088661	EqualityExpression	cwd [ 0 ] == '\\0'		1086250	1		==			
ANR	1088662	ArrayIndexing	cwd [ 0 ]		1086250	0					
ANR	1088663	Identifier	cwd		1086250	0					
ANR	1088664	PrimaryExpression	0		1086250	1					
ANR	1088665	PrimaryExpression	'\\0'		1086250	1					
ANR	1088666	CompoundStatement		745:30:23270:23270	1086250	1					
ANR	1088667	ExpressionStatement	cwdBackup = NULL	8063:2:247229:247245	1086250	0	True				
ANR	1088668	AssignmentExpression	cwdBackup = NULL		1086250	0		=			
ANR	1088669	Identifier	cwdBackup		1086250	0					
ANR	1088670	Identifier	NULL		1086250	1					
ANR	1088671	ElseStatement	else		1086250	0					
ANR	1088672	CompoundStatement		747:8:23300:23300	1086250	0					
ANR	1088673	ExpressionStatement	cwdBackup = cwd	8065:2:247259:247274	1086250	0	True				
ANR	1088674	AssignmentExpression	cwdBackup = cwd		1086250	0		=			
ANR	1088675	Identifier	cwdBackup		1086250	0					
ANR	1088676	Identifier	cwd		1086250	1					
ANR	1088677	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"	8068:4:247286:247368	1086250	99	True				
ANR	1088678	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"		1086250	0		=			
ANR	1088679	Identifier	runtime		1086250	0					
ANR	1088680	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_Process000"" , IF_VERBOSEPUB , runtime )"		1086250	1					
ANR	1088681	Callee	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088682	MemberAccess	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088683	Identifier	dc_stats		1086250	0					
ANR	1088684	Identifier	AddRuntimeSample		1086250	1					
ANR	1088685	ArgumentList	"""DCCreate_Process000"""		1086250	1					
ANR	1088686	Argument	"""DCCreate_Process000"""		1086250	0					
ANR	1088687	PrimaryExpression	"""DCCreate_Process000"""		1086250	0					
ANR	1088688	Argument	IF_VERBOSEPUB		1086250	1					
ANR	1088689	Identifier	IF_VERBOSEPUB		1086250	0					
ANR	1088690	Argument	runtime		1086250	2					
ANR	1088691	Identifier	runtime		1086250	0					
ANR	1088692	IfStatement	if ( priv != PRIV_USER_FINAL || ! can_switch_ids ( ) )		1086250	100					
ANR	1088693	Condition	priv != PRIV_USER_FINAL || ! can_switch_ids ( )	8070:9:247380:247423	1086250	0	True				
ANR	1088694	OrExpression	priv != PRIV_USER_FINAL || ! can_switch_ids ( )		1086250	0		||			
ANR	1088695	EqualityExpression	priv != PRIV_USER_FINAL		1086250	0		!=			
ANR	1088696	Identifier	priv		1086250	0					
ANR	1088697	Identifier	PRIV_USER_FINAL		1086250	1					
ANR	1088698	UnaryOperationExpression	! can_switch_ids ( )		1086250	1					
ANR	1088699	UnaryOperator	!		1086250	0					
ANR	1088700	CallExpression	can_switch_ids ( )		1086250	1					
ANR	1088701	Callee	can_switch_ids		1086250	0					
ANR	1088702	Identifier	can_switch_ids		1086250	0					
ANR	1088703	ArgumentList			1086250	1					
ANR	1088704	CompoundStatement		753:56:23472:23472	1086250	1					
ANR	1088705	Statement	cp_result	8071:2:247431:247439	1086250	0	True				
ANR	1088706	Statement	=	8071:12:247441:247441	1086250	1	True				
ANR	1088707	Statement	::	8071:14:247443:247444	1086250	2	True				
ANR	1088708	ExpressionStatement	"CreateProcess ( bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"	8071:16:247445:247595	1086250	3	True				
ANR	1088709	CallExpression	"CreateProcess ( bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"		1086250	0					
ANR	1088710	Callee	CreateProcess		1086250	0					
ANR	1088711	Identifier	CreateProcess		1086250	0					
ANR	1088712	ArgumentList	bIs16Bit ? NULL : executable		1086250	1					
ANR	1088713	Argument	bIs16Bit ? NULL : executable		1086250	0					
ANR	1088714	ConditionalExpression	bIs16Bit ? NULL : executable		1086250	0					
ANR	1088715	Condition	bIs16Bit		1086250	0					
ANR	1088716	Identifier	bIs16Bit		1086250	0					
ANR	1088717	Identifier	NULL		1086250	1					
ANR	1088718	Identifier	executable		1086250	2					
ANR	1088719	Argument	( char * ) strArgs . Value ( )		1086250	1					
ANR	1088720	CastExpression	( char * ) strArgs . Value ( )		1086250	0					
ANR	1088721	CastTarget	char *		1086250	0					
ANR	1088722	CallExpression	strArgs . Value ( )		1086250	1					
ANR	1088723	Callee	strArgs . Value		1086250	0					
ANR	1088724	MemberAccess	strArgs . Value		1086250	0					
ANR	1088725	Identifier	strArgs		1086250	0					
ANR	1088726	Identifier	Value		1086250	1					
ANR	1088727	ArgumentList			1086250	1					
ANR	1088728	Argument	NULL		1086250	2					
ANR	1088729	Identifier	NULL		1086250	0					
ANR	1088730	Argument	NULL		1086250	3					
ANR	1088731	Identifier	NULL		1086250	0					
ANR	1088732	Argument	inherit_handles		1086250	4					
ANR	1088733	Identifier	inherit_handles		1086250	0					
ANR	1088734	Argument	create_process_flags		1086250	5					
ANR	1088735	Identifier	create_process_flags		1086250	0					
ANR	1088736	Argument	newenv		1086250	6					
ANR	1088737	Identifier	newenv		1086250	0					
ANR	1088738	Argument	cwdBackup		1086250	7					
ANR	1088739	Identifier	cwdBackup		1086250	0					
ANR	1088740	Argument	& si		1086250	8					
ANR	1088741	UnaryOperationExpression	& si		1086250	0					
ANR	1088742	UnaryOperator	&		1086250	0					
ANR	1088743	Identifier	si		1086250	1					
ANR	1088744	Argument	& piProcess		1086250	9					
ANR	1088745	UnaryOperationExpression	& piProcess		1086250	0					
ANR	1088746	UnaryOperator	&		1086250	0					
ANR	1088747	Identifier	piProcess		1086250	1					
ANR	1088748	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"	8074:8:247606:247687	1086250	4	True				
ANR	1088749	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"		1086250	0		=			
ANR	1088750	Identifier	runtime		1086250	0					
ANR	1088751	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreateProcessW32"" , IF_VERBOSEPUB , runtime )"		1086250	1					
ANR	1088752	Callee	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088753	MemberAccess	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088754	Identifier	dc_stats		1086250	0					
ANR	1088755	Identifier	AddRuntimeSample		1086250	1					
ANR	1088756	ArgumentList	"""DCCreateProcessW32"""		1086250	1					
ANR	1088757	Argument	"""DCCreateProcessW32"""		1086250	0					
ANR	1088758	PrimaryExpression	"""DCCreateProcessW32"""		1086250	0					
ANR	1088759	Argument	IF_VERBOSEPUB		1086250	1					
ANR	1088760	Identifier	IF_VERBOSEPUB		1086250	0					
ANR	1088761	Argument	runtime		1086250	2					
ANR	1088762	Identifier	runtime		1086250	0					
ANR	1088763	ElseStatement	else		1086250	0					
ANR	1088764	CompoundStatement		801:2:25415:25445	1086250	0					
ANR	1088765	IdentifierDeclStatement	HANDLE user_token = priv_state_get_handle ( ) ;	8080:2:247802:247845	1086250	0	True				
ANR	1088766	IdentifierDecl	user_token = priv_state_get_handle ( )		1086250	0					
ANR	1088767	IdentifierDeclType	HANDLE		1086250	0					
ANR	1088768	Identifier	user_token		1086250	1					
ANR	1088769	AssignmentExpression	user_token = priv_state_get_handle ( )		1086250	2		=			
ANR	1088770	Identifier	user_token		1086250	0					
ANR	1088771	CallExpression	priv_state_get_handle ( )		1086250	1					
ANR	1088772	Callee	priv_state_get_handle		1086250	0					
ANR	1088773	Identifier	priv_state_get_handle		1086250	0					
ANR	1088774	ArgumentList			1086250	1					
ANR	1088775	ExpressionStatement	ASSERT ( user_token )	8081:2:247849:247867	1086250	1	True				
ANR	1088776	CallExpression	ASSERT ( user_token )		1086250	0					
ANR	1088777	Callee	ASSERT		1086250	0					
ANR	1088778	Identifier	ASSERT		1086250	0					
ANR	1088779	ArgumentList	user_token		1086250	1					
ANR	1088780	Argument	user_token		1086250	0					
ANR	1088781	Identifier	user_token		1086250	0					
ANR	1088782	ExpressionStatement	"si . lpDesktop = """""	8086:2:248011:248028	1086250	2	True				
ANR	1088783	AssignmentExpression	"si . lpDesktop = """""		1086250	0		=			
ANR	1088784	MemberAccess	si . lpDesktop		1086250	0					
ANR	1088785	Identifier	si		1086250	0					
ANR	1088786	Identifier	lpDesktop		1086250	1					
ANR	1088787	PrimaryExpression	""""""		1086250	1					
ANR	1088788	IfStatement	"if ( param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false ) )"		1086250	3					
ANR	1088789	Condition	"param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false )"	8091:6:248213:248262	1086250	0	True				
ANR	1088790	CallExpression	"param_boolean_crufty ( ""USE_VISIBLE_DESKTOP"" , false )"		1086250	0					
ANR	1088791	Callee	param_boolean_crufty		1086250	0					
ANR	1088792	Identifier	param_boolean_crufty		1086250	0					
ANR	1088793	ArgumentList	"""USE_VISIBLE_DESKTOP"""		1086250	1					
ANR	1088794	Argument	"""USE_VISIBLE_DESKTOP"""		1086250	0					
ANR	1088795	PrimaryExpression	"""USE_VISIBLE_DESKTOP"""		1086250	0					
ANR	1088796	Argument	false		1086250	1					
ANR	1088797	Identifier	false		1086250	0					
ANR	1088798	CompoundStatement		774:58:24310:24310	1086250	1					
ANR	1088799	IfStatement	if ( GrantDesktopAccess ( user_token ) == 0 )		1086250	0					
ANR	1088800	Condition	GrantDesktopAccess ( user_token ) == 0	8094:8:248376:248410	1086250	0	True				
ANR	1088801	EqualityExpression	GrantDesktopAccess ( user_token ) == 0		1086250	0		==			
ANR	1088802	CallExpression	GrantDesktopAccess ( user_token )		1086250	0					
ANR	1088803	Callee	GrantDesktopAccess		1086250	0					
ANR	1088804	Identifier	GrantDesktopAccess		1086250	0					
ANR	1088805	ArgumentList	user_token		1086250	1					
ANR	1088806	Argument	user_token		1086250	0					
ANR	1088807	Identifier	user_token		1086250	0					
ANR	1088808	PrimaryExpression	0		1086250	1					
ANR	1088809	CompoundStatement		777:46:24459:24459	1086250	1					
ANR	1088810	ExpressionStatement	"si . lpDesktop = ""winsta0\\\\default"""	8097:4:248526:248559	1086250	0	True				
ANR	1088811	AssignmentExpression	"si . lpDesktop = ""winsta0\\\\default"""		1086250	0		=			
ANR	1088812	MemberAccess	si . lpDesktop		1086250	0					
ANR	1088813	Identifier	si		1086250	0					
ANR	1088814	Identifier	lpDesktop		1086250	1					
ANR	1088815	PrimaryExpression	"""winsta0\\\\default"""		1086250	1					
ANR	1088816	ElseStatement	else		1086250	0					
ANR	1088817	CompoundStatement		781:10:24616:24616	1086250	0					
ANR	1088818	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: Unable to use visible desktop\\n"" )"	8102:4:248747:248820	1086250	0	True				
ANR	1088819	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: Unable to use visible desktop\\n"" )"		1086250	0					
ANR	1088820	Callee	dprintf		1086250	0					
ANR	1088821	Identifier	dprintf		1086250	0					
ANR	1088822	ArgumentList	D_ALWAYS		1086250	1					
ANR	1088823	Argument	D_ALWAYS		1086250	0					
ANR	1088824	Identifier	D_ALWAYS		1086250	0					
ANR	1088825	Argument	"""Create_Process: Unable to use visible desktop\\n"""		1086250	1					
ANR	1088826	PrimaryExpression	"""Create_Process: Unable to use visible desktop\\n"""		1086250	0					
ANR	1088827	IdentifierDeclStatement	priv_state s = set_user_priv ( ) ;	8118:2:249370:249400	1086250	4	True				
ANR	1088828	IdentifierDecl	s = set_user_priv ( )		1086250	0					
ANR	1088829	IdentifierDeclType	priv_state		1086250	0					
ANR	1088830	Identifier	s		1086250	1					
ANR	1088831	AssignmentExpression	s = set_user_priv ( )		1086250	2		=			
ANR	1088832	Identifier	s		1086250	0					
ANR	1088833	CallExpression	set_user_priv ( )		1086250	1					
ANR	1088834	Callee	set_user_priv		1086250	0					
ANR	1088835	Identifier	set_user_priv		1086250	0					
ANR	1088836	ArgumentList			1086250	1					
ANR	1088837	Statement	cp_result	8120:2:249405:249413	1086250	5	True				
ANR	1088838	Statement	=	8120:12:249415:249415	1086250	6	True				
ANR	1088839	Statement	::	8120:14:249417:249418	1086250	7	True				
ANR	1088840	ExpressionStatement	"CreateProcessAsUser ( user_token , bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"	8120:16:249419:249592	1086250	8	True				
ANR	1088841	CallExpression	"CreateProcessAsUser ( user_token , bIs16Bit ? NULL : executable , ( char * ) strArgs . Value ( ) , NULL , NULL , inherit_handles , create_process_flags , newenv , cwdBackup , & si , & piProcess )"		1086250	0					
ANR	1088842	Callee	CreateProcessAsUser		1086250	0					
ANR	1088843	Identifier	CreateProcessAsUser		1086250	0					
ANR	1088844	ArgumentList	user_token		1086250	1					
ANR	1088845	Argument	user_token		1086250	0					
ANR	1088846	Identifier	user_token		1086250	0					
ANR	1088847	Argument	bIs16Bit ? NULL : executable		1086250	1					
ANR	1088848	ConditionalExpression	bIs16Bit ? NULL : executable		1086250	0					
ANR	1088849	Condition	bIs16Bit		1086250	0					
ANR	1088850	Identifier	bIs16Bit		1086250	0					
ANR	1088851	Identifier	NULL		1086250	1					
ANR	1088852	Identifier	executable		1086250	2					
ANR	1088853	Argument	( char * ) strArgs . Value ( )		1086250	2					
ANR	1088854	CastExpression	( char * ) strArgs . Value ( )		1086250	0					
ANR	1088855	CastTarget	char *		1086250	0					
ANR	1088856	CallExpression	strArgs . Value ( )		1086250	1					
ANR	1088857	Callee	strArgs . Value		1086250	0					
ANR	1088858	MemberAccess	strArgs . Value		1086250	0					
ANR	1088859	Identifier	strArgs		1086250	0					
ANR	1088860	Identifier	Value		1086250	1					
ANR	1088861	ArgumentList			1086250	1					
ANR	1088862	Argument	NULL		1086250	3					
ANR	1088863	Identifier	NULL		1086250	0					
ANR	1088864	Argument	NULL		1086250	4					
ANR	1088865	Identifier	NULL		1086250	0					
ANR	1088866	Argument	inherit_handles		1086250	5					
ANR	1088867	Identifier	inherit_handles		1086250	0					
ANR	1088868	Argument	create_process_flags		1086250	6					
ANR	1088869	Identifier	create_process_flags		1086250	0					
ANR	1088870	Argument	newenv		1086250	7					
ANR	1088871	Identifier	newenv		1086250	0					
ANR	1088872	Argument	cwdBackup		1086250	8					
ANR	1088873	Identifier	cwdBackup		1086250	0					
ANR	1088874	Argument	& si		1086250	9					
ANR	1088875	UnaryOperationExpression	& si		1086250	0					
ANR	1088876	UnaryOperator	&		1086250	0					
ANR	1088877	Identifier	si		1086250	1					
ANR	1088878	Argument	& piProcess		1086250	10					
ANR	1088879	UnaryOperationExpression	& piProcess		1086250	0					
ANR	1088880	UnaryOperator	&		1086250	0					
ANR	1088881	Identifier	piProcess		1086250	1					
ANR	1088882	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"	8124:8:249603:249687	1086250	9	True				
ANR	1088883	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"		1086250	0		=			
ANR	1088884	Identifier	runtime		1086250	0					
ANR	1088885	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreateProcessAsUser"" , IF_VERBOSEPUB , runtime )"		1086250	1					
ANR	1088886	Callee	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088887	MemberAccess	dc_stats . AddRuntimeSample		1086250	0					
ANR	1088888	Identifier	dc_stats		1086250	0					
ANR	1088889	Identifier	AddRuntimeSample		1086250	1					
ANR	1088890	ArgumentList	"""DCCreateProcessAsUser"""		1086250	1					
ANR	1088891	Argument	"""DCCreateProcessAsUser"""		1086250	0					
ANR	1088892	PrimaryExpression	"""DCCreateProcessAsUser"""		1086250	0					
ANR	1088893	Argument	IF_VERBOSEPUB		1086250	1					
ANR	1088894	Identifier	IF_VERBOSEPUB		1086250	0					
ANR	1088895	Argument	runtime		1086250	2					
ANR	1088896	Identifier	runtime		1086250	0					
ANR	1088897	ExpressionStatement	set_priv ( s )	8126:2:249692:249703	1086250	10	True				
ANR	1088898	CallExpression	set_priv ( s )		1086250	0					
ANR	1088899	Callee	set_priv		1086250	0					
ANR	1088900	Identifier	set_priv		1086250	0					
ANR	1088901	ArgumentList	s		1086250	1					
ANR	1088902	Argument	s		1086250	0					
ANR	1088903	Identifier	s		1086250	0					
ANR	1088904	IfStatement	if ( ! cp_result )		1086250	101					
ANR	1088905	Condition	! cp_result	8129:6:249715:249724	1086250	0	True				
ANR	1088906	UnaryOperationExpression	! cp_result		1086250	0					
ANR	1088907	UnaryOperator	!		1086250	0					
ANR	1088908	Identifier	cp_result		1086250	1					
ANR	1088909	CompoundStatement		812:19:25773:25773	1086250	1					
ANR	1088910	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Process: CreateProcess failed, errno=%d\\n"" , GetLastError ( ) )"	8130:2:249732:249819	1086250	0	True				
ANR	1088911	CallExpression	"dprintf ( D_ALWAYS , ""Create_Process: CreateProcess failed, errno=%d\\n"" , GetLastError ( ) )"		1086250	0					
ANR	1088912	Callee	dprintf		1086250	0					
ANR	1088913	Identifier	dprintf		1086250	0					
ANR	1088914	ArgumentList	D_ALWAYS		1086250	1					
ANR	1088915	Argument	D_ALWAYS		1086250	0					
ANR	1088916	Identifier	D_ALWAYS		1086250	0					
ANR	1088917	Argument	"""Create_Process: CreateProcess failed, errno=%d\\n"""		1086250	1					
ANR	1088918	PrimaryExpression	"""Create_Process: CreateProcess failed, errno=%d\\n"""		1086250	0					
ANR	1088919	Argument	GetLastError ( )		1086250	2					
ANR	1088920	CallExpression	GetLastError ( )		1086250	0					
ANR	1088921	Callee	GetLastError		1086250	0					
ANR	1088922	Identifier	GetLastError		1086250	0					
ANR	1088923	ArgumentList			1086250	1					
ANR	1088924	GotoStatement	goto wrapup ;	8132:2:249823:249834	1086250	1	True				
ANR	1088925	Identifier	wrapup		1086250	0					
ANR	1088926	ExpressionStatement	newpid = piProcess . dwProcessId	8137:1:249880:249910	1086250	102	True				
ANR	1088927	AssignmentExpression	newpid = piProcess . dwProcessId		1086250	0		=			
ANR	1088928	Identifier	newpid		1086250	0					
ANR	1088929	MemberAccess	piProcess . dwProcessId		1086250	1					
ANR	1088930	Identifier	piProcess		1086250	0					
ANR	1088931	Identifier	dwProcessId		1086250	1					
ANR	1088932	IfStatement	if ( affinity_mask )		1086250	103					
ANR	1088933	Condition	affinity_mask	8141:6:249997:250009	1086250	0	True				
ANR	1088934	Identifier	affinity_mask		1086250	0					
ANR	1088935	CompoundStatement		837:2:26327:26396	1086250	1					
ANR	1088936	IdentifierDeclStatement	DWORD_PTR mask = 0 ;	8144:2:250062:250080	1086250	0	True				
ANR	1088937	IdentifierDecl	mask = 0		1086250	0					
ANR	1088938	IdentifierDeclType	DWORD_PTR		1086250	0					
ANR	1088939	Identifier	mask		1086250	1					
ANR	1088940	AssignmentExpression	mask = 0		1086250	2		=			
ANR	1088941	Identifier	mask		1086250	0					
ANR	1088942	PrimaryExpression	0		1086250	1					
ANR	1088943	ForStatement	for ( int i = 1 ; i < affinity_mask [ 0 ] ; ++ i )		1086250	1					
ANR	1088944	ForInit	int i = 1 ;	8145:8:250090:250099	1086250	0	True				
ANR	1088945	IdentifierDeclStatement	int i = 1 ;		1086250	0					
ANR	1088946	IdentifierDecl	i = 1		1086250	0					
ANR	1088947	IdentifierDeclType	int		1086250	0					
ANR	1088948	Identifier	i		1086250	1					
ANR	1088949	AssignmentExpression	i = 1		1086250	2		=			
ANR	1088950	Identifier	i		1086250	0					
ANR	1088951	PrimaryExpression	1		1086250	1					
ANR	1088952	Condition	i < affinity_mask [ 0 ]	8145:19:250101:250120	1086250	1	True				
ANR	1088953	RelationalExpression	i < affinity_mask [ 0 ]		1086250	0		<			
ANR	1088954	Identifier	i		1086250	0					
ANR	1088955	ArrayIndexing	affinity_mask [ 0 ]		1086250	1					
ANR	1088956	Identifier	affinity_mask		1086250	0					
ANR	1088957	PrimaryExpression	0		1086250	1					
ANR	1088958	UnaryExpression	++ i	8145:41:250123:250125	1086250	2	True				
ANR	1088959	IncDec	++		1086250	0					
ANR	1088960	Identifier	i		1086250	1					
ANR	1088961	CompoundStatement		828:47:26174:26174	1086250	3					
ANR	1088962	ExpressionStatement	mask |= ( 1 << affinity_mask [ i ] )	8146:3:250134:250167	1086250	0	True				
ANR	1088963	AssignmentExpression	mask |= ( 1 << affinity_mask [ i ] )		1086250	0		|=			
ANR	1088964	Identifier	mask		1086250	0					
ANR	1088965	ShiftExpression	1 << affinity_mask [ i ]		1086250	1		<<			
ANR	1088966	PrimaryExpression	1		1086250	0					
ANR	1088967	ArrayIndexing	affinity_mask [ i ]		1086250	1					
ANR	1088968	Identifier	affinity_mask		1086250	0					
ANR	1088969	Identifier	i		1086250	1					
ANR	1088970	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Setting process affinity\\n"" )"	8149:2:250176:250237	1086250	2	True				
ANR	1088971	CallExpression	"dprintf ( D_FULLDEBUG , ""Setting process affinity\\n"" )"		1086250	0					
ANR	1088972	Callee	dprintf		1086250	0					
ANR	1088973	Identifier	dprintf		1086250	0					
ANR	1088974	ArgumentList	D_FULLDEBUG		1086250	1					
ANR	1088975	Argument	D_FULLDEBUG		1086250	0					
ANR	1088976	Identifier	D_FULLDEBUG		1086250	0					
ANR	1088977	Argument	"""Setting process affinity\\n"""		1086250	1					
ANR	1088978	PrimaryExpression	"""Setting process affinity\\n"""		1086250	0					
ANR	1088979	IdentifierDeclStatement	"BOOL ok = SetProcessAffinityMask ( piProcess . hProcess , mask ) ;"	8154:2:250282:250351	1086250	3	True				
ANR	1088980	IdentifierDecl	"ok = SetProcessAffinityMask ( piProcess . hProcess , mask )"		1086250	0					
ANR	1088981	IdentifierDeclType	BOOL		1086250	0					
ANR	1088982	Identifier	ok		1086250	1					
ANR	1088983	AssignmentExpression	"ok = SetProcessAffinityMask ( piProcess . hProcess , mask )"		1086250	2		=			
ANR	1088984	Identifier	ok		1086250	0					
ANR	1088985	CallExpression	"SetProcessAffinityMask ( piProcess . hProcess , mask )"		1086250	1					
ANR	1088986	Callee	SetProcessAffinityMask		1086250	0					
ANR	1088987	Identifier	SetProcessAffinityMask		1086250	0					
ANR	1088988	ArgumentList	piProcess . hProcess		1086250	1					
ANR	1088989	Argument	piProcess . hProcess		1086250	0					
ANR	1088990	MemberAccess	piProcess . hProcess		1086250	0					
ANR	1088991	Identifier	piProcess		1086250	0					
ANR	1088992	Identifier	hProcess		1086250	1					
ANR	1088993	Argument	mask		1086250	1					
ANR	1088994	Identifier	mask		1086250	0					
ANR	1088995	IfStatement	if ( ! ok )		1086250	4					
ANR	1088996	Condition	! ok	8158:7:250363:250365	1086250	0	True				
ANR	1088997	UnaryOperationExpression	! ok		1086250	0					
ANR	1088998	UnaryOperator	!		1086250	0					
ANR	1088999	Identifier	ok		1086250	1					
ANR	1089000	CompoundStatement		841:13:26414:26414	1086250	1					
ANR	1089001	Statement	dprintf	8160:3:250375:250381	1086250	0	True				
ANR	1089002	Statement	(	8160:11:250383:250383	1086250	1	True				
ANR	1089003	Statement	D_ALWAYS	8160:13:250385:250392	1086250	2	True				
ANR	1089004	Statement	","	8160:21:250393:250393	1086250	3	True				
ANR	1089005	Statement	"""Failed to set process affinity. """	8161:4:250400:250433	1086250	4	True				
ANR	1089006	Statement	"""(last-error=%d)\\n"""	8162:4:250439:250457	1086250	5	True				
ANR	1089007	Statement	","	8162:23:250458:250458	1086250	6	True				
ANR	1089008	Statement	GetLastError	8163:4:250465:250476	1086250	7	True				
ANR	1089009	Statement	(	8163:17:250478:250478	1086250	8	True				
ANR	1089010	Statement	)	8163:18:250479:250479	1086250	9	True				
ANR	1089011	Statement	)	8163:20:250481:250481	1086250	10	True				
ANR	1089012	ExpressionStatement		8163:21:250482:250482	1086250	11	True				
ANR	1089013	IfStatement	if ( family_info != NULL )		1086250	104					
ANR	1089014	Condition	family_info != NULL	8176:5:250660:250678	1086250	0	True				
ANR	1089015	EqualityExpression	family_info != NULL		1086250	0		!=			
ANR	1089016	Identifier	family_info		1086250	0					
ANR	1089017	Identifier	NULL		1086250	1					
ANR	1089018	CompoundStatement		861:2:26763:27097	1086250	1					
ANR	1089019	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8177:2:250685:250714	1086250	0	True				
ANR	1089020	CallExpression	ASSERT ( m_proc_family != NULL )		1086250	0					
ANR	1089021	Callee	ASSERT		1086250	0					
ANR	1089022	Identifier	ASSERT		1086250	0					
ANR	1089023	ArgumentList	m_proc_family != NULL		1086250	1					
ANR	1089024	Argument	m_proc_family != NULL		1086250	0					
ANR	1089025	EqualityExpression	m_proc_family != NULL		1086250	0		!=			
ANR	1089026	Identifier	m_proc_family		1086250	0					
ANR	1089027	Identifier	NULL		1086250	1					
ANR	1089028	IdentifierDeclStatement	"bool ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy ) ;"	8178:2:250718:251052	1086250	1	True				
ANR	1089029	IdentifierDecl	"ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		1086250	0					
ANR	1089030	IdentifierDeclType	bool		1086250	0					
ANR	1089031	Identifier	ok		1086250	1					
ANR	1089032	AssignmentExpression	"ok = Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		1086250	2		=			
ANR	1089033	Identifier	ok		1086250	0					
ANR	1089034	CallExpression	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , NULL , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		1086250	1					
ANR	1089035	Callee	Register_Family		1086250	0					
ANR	1089036	Identifier	Register_Family		1086250	0					
ANR	1089037	ArgumentList	newpid		1086250	1					
ANR	1089038	Argument	newpid		1086250	0					
ANR	1089039	Identifier	newpid		1086250	0					
ANR	1089040	Argument	getpid ( )		1086250	1					
ANR	1089041	CallExpression	getpid ( )		1086250	0					
ANR	1089042	Callee	getpid		1086250	0					
ANR	1089043	Identifier	getpid		1086250	0					
ANR	1089044	ArgumentList			1086250	1					
ANR	1089045	Argument	family_info -> max_snapshot_interval		1086250	2					
ANR	1089046	PtrMemberAccess	family_info -> max_snapshot_interval		1086250	0					
ANR	1089047	Identifier	family_info		1086250	0					
ANR	1089048	Identifier	max_snapshot_interval		1086250	1					
ANR	1089049	Argument	NULL		1086250	3					
ANR	1089050	Identifier	NULL		1086250	0					
ANR	1089051	Argument	family_info -> login		1086250	4					
ANR	1089052	PtrMemberAccess	family_info -> login		1086250	0					
ANR	1089053	Identifier	family_info		1086250	0					
ANR	1089054	Identifier	login		1086250	1					
ANR	1089055	Argument	NULL		1086250	5					
ANR	1089056	Identifier	NULL		1086250	0					
ANR	1089057	Argument	family_info -> cgroup		1086250	6					
ANR	1089058	PtrMemberAccess	family_info -> cgroup		1086250	0					
ANR	1089059	Identifier	family_info		1086250	0					
ANR	1089060	Identifier	cgroup		1086250	1					
ANR	1089061	Argument	family_info -> glexec_proxy		1086250	7					
ANR	1089062	PtrMemberAccess	family_info -> glexec_proxy		1086250	0					
ANR	1089063	Identifier	family_info		1086250	0					
ANR	1089064	Identifier	glexec_proxy		1086250	1					
ANR	1089065	IfStatement	if ( ! ok )		1086250	2					
ANR	1089066	Condition	! ok	8186:6:251060:251062	1086250	0	True				
ANR	1089067	UnaryOperationExpression	! ok		1086250	0					
ANR	1089068	UnaryOperator	!		1086250	0					
ANR	1089069	Identifier	ok		1086250	1					
ANR	1089070	CompoundStatement		869:11:27110:27110	1086250	1					
ANR	1089071	ExpressionStatement	"EXCEPT ( ""error registering process family with procd"" )"	8187:3:251070:251123	1086250	0	True				
ANR	1089072	CallExpression	"EXCEPT ( ""error registering process family with procd"" )"		1086250	0					
ANR	1089073	Callee	EXCEPT		1086250	0					
ANR	1089074	Identifier	EXCEPT		1086250	0					
ANR	1089075	ArgumentList	"""error registering process family with procd"""		1086250	1					
ANR	1089076	Argument	"""error registering process family with procd"""		1086250	0					
ANR	1089077	PrimaryExpression	"""error registering process family with procd"""		1086250	0					
ANR	1089078	IfStatement	if ( ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1 )		1086250	3					
ANR	1089079	Condition	ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1	8189:6:251135:251178	1086250	0	True				
ANR	1089080	EqualityExpression	ResumeThread ( piProcess . hThread ) == ( DWORD ) - 1		1086250	0		==			
ANR	1089081	CallExpression	ResumeThread ( piProcess . hThread )		1086250	0					
ANR	1089082	Callee	ResumeThread		1086250	0					
ANR	1089083	Identifier	ResumeThread		1086250	0					
ANR	1089084	ArgumentList	piProcess . hThread		1086250	1					
ANR	1089085	Argument	piProcess . hThread		1086250	0					
ANR	1089086	MemberAccess	piProcess . hThread		1086250	0					
ANR	1089087	Identifier	piProcess		1086250	0					
ANR	1089088	Identifier	hThread		1086250	1					
ANR	1089089	CastExpression	( DWORD ) - 1		1086250	1					
ANR	1089090	CastTarget	DWORD		1086250	0					
ANR	1089091	UnaryOperationExpression	- 1		1086250	1					
ANR	1089092	UnaryOperator	-		1086250	0					
ANR	1089093	PrimaryExpression	1		1086250	1					
ANR	1089094	CompoundStatement		872:52:27226:27226	1086250	1					
ANR	1089095	ExpressionStatement	"EXCEPT ( ""error resuming newly created process: %u"" , GetLastError ( ) )"	8190:3:251186:251262	1086250	0	True				
ANR	1089096	CallExpression	"EXCEPT ( ""error resuming newly created process: %u"" , GetLastError ( ) )"		1086250	0					
ANR	1089097	Callee	EXCEPT		1086250	0					
ANR	1089098	Identifier	EXCEPT		1086250	0					
ANR	1089099	ArgumentList	"""error resuming newly created process: %u"""		1086250	1					
ANR	1089100	Argument	"""error resuming newly created process: %u"""		1086250	0					
ANR	1089101	PrimaryExpression	"""error resuming newly created process: %u"""		1086250	0					
ANR	1089102	Argument	GetLastError ( )		1086250	1					
ANR	1089103	CallExpression	GetLastError ( )		1086250	0					
ANR	1089104	Callee	GetLastError		1086250	0					
ANR	1089105	Identifier	GetLastError		1086250	0					
ANR	1089106	ArgumentList			1086250	1					
ANR	1089107	IfStatement	if ( sock_inherit_list )		1086250	105					
ANR	1089108	Condition	sock_inherit_list	8197:6:251360:251376	1086250	0	True				
ANR	1089109	Identifier	sock_inherit_list		1086250	0					
ANR	1089110	CompoundStatement		880:26:27425:27425	1086250	1					
ANR	1089111	ForStatement	for ( i = 0 ; ( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS ) ; i ++ )		1086250	0					
ANR	1089112	ForInit	i = 0 ;	8198:7:251389:251395	1086250	0	True				
ANR	1089113	AssignmentExpression	i = 0		1086250	0		=			
ANR	1089114	Identifier	i		1086250	0					
ANR	1089115	PrimaryExpression	0		1086250	1					
ANR	1089116	Condition	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )	8199:4:251401:251457	1086250	1	True				
ANR	1089117	AndExpression	( sock_inherit_list [ i ] != NULL ) && ( i < MAX_INHERIT_SOCKS )		1086250	0		&&			
ANR	1089118	EqualityExpression	sock_inherit_list [ i ] != NULL		1086250	0		!=			
ANR	1089119	ArrayIndexing	sock_inherit_list [ i ]		1086250	0					
ANR	1089120	Identifier	sock_inherit_list		1086250	0					
ANR	1089121	Identifier	i		1086250	1					
ANR	1089122	Identifier	NULL		1086250	1					
ANR	1089123	RelationalExpression	i < MAX_INHERIT_SOCKS		1086250	1		<			
ANR	1089124	Identifier	i		1086250	0					
ANR	1089125	Identifier	MAX_INHERIT_SOCKS		1086250	1					
ANR	1089126	PostIncDecOperationExpression	i ++	8200:4:251465:251467	1086250	2	True				
ANR	1089127	Identifier	i		1086250	0					
ANR	1089128	IncDec	++		1086250	1					
ANR	1089129	CompoundStatement		884:8:27523:27523	1086250	3					
ANR	1089130	ExpressionStatement	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable ( FALSE )	8202:3:251483:251537	1086250	0	True				
ANR	1089131	CallExpression	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable ( FALSE )		1086250	0					
ANR	1089132	Callee	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable		1086250	0					
ANR	1089133	PtrMemberAccess	( ( Sock * ) sock_inherit_list [ i ] ) -> set_inheritable		1086250	0					
ANR	1089134	CastExpression	( Sock * ) sock_inherit_list [ i ]		1086250	0					
ANR	1089135	CastTarget	Sock *		1086250	0					
ANR	1089136	ArrayIndexing	sock_inherit_list [ i ]		1086250	1					
ANR	1089137	Identifier	sock_inherit_list		1086250	0					
ANR	1089138	Identifier	i		1086250	1					
ANR	1089139	Identifier	set_inheritable		1086250	1					
ANR	1089140	ArgumentList	FALSE		1086250	1					
ANR	1089141	Argument	FALSE		1086250	0					
ANR	1089142	Identifier	FALSE		1086250	0					
ANR	1089143	Statement	pidtmp	8518:1:261408:261413	1086250	106	True				
ANR	1089144	Statement	=	8518:8:261415:261415	1086250	107	True				
ANR	1089145	Statement	new	8518:10:261417:261419	1086250	108	True				
ANR	1089146	ExpressionStatement	PidEntry	8518:14:261421:261429	1086250	109	True				
ANR	1089147	Identifier	PidEntry		1086250	0					
ANR	1089148	ExpressionStatement	pidtmp -> pid = newpid	8519:1:261432:261452	1086250	110	True				
ANR	1089149	AssignmentExpression	pidtmp -> pid = newpid		1086250	0		=			
ANR	1089150	PtrMemberAccess	pidtmp -> pid		1086250	0					
ANR	1089151	Identifier	pidtmp		1086250	0					
ANR	1089152	Identifier	pid		1086250	1					
ANR	1089153	Identifier	newpid		1086250	1					
ANR	1089154	ExpressionStatement	pidtmp -> new_process_group = ( family_info != NULL )	8520:1:261455:261504	1086250	111	True				
ANR	1089155	AssignmentExpression	pidtmp -> new_process_group = ( family_info != NULL )		1086250	0		=			
ANR	1089156	PtrMemberAccess	pidtmp -> new_process_group		1086250	0					
ANR	1089157	Identifier	pidtmp		1086250	0					
ANR	1089158	Identifier	new_process_group		1086250	1					
ANR	1089159	EqualityExpression	family_info != NULL		1086250	1		!=			
ANR	1089160	Identifier	family_info		1086250	0					
ANR	1089161	Identifier	NULL		1086250	1					
ANR	1089162	CompoundStatement		1206:2:37557:37629	1086250	112					
ANR	1089163	IdentifierDeclStatement	char const * shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( ) ;	8523:2:261512:261584	1086250	0	True				
ANR	1089164	IdentifierDecl	* shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( )		1086250	0					
ANR	1089165	IdentifierDeclType	char const *		1086250	0					
ANR	1089166	Identifier	shared_port_addr		1086250	1					
ANR	1089167	AssignmentExpression	* shared_port_addr = shared_port_endpoint . GetMyRemoteAddress ( )		1086250	2		=			
ANR	1089168	Identifier	shared_port_addr		1086250	0					
ANR	1089169	CallExpression	shared_port_endpoint . GetMyRemoteAddress ( )		1086250	1					
ANR	1089170	Callee	shared_port_endpoint . GetMyRemoteAddress		1086250	0					
ANR	1089171	MemberAccess	shared_port_endpoint . GetMyRemoteAddress		1086250	0					
ANR	1089172	Identifier	shared_port_endpoint		1086250	0					
ANR	1089173	Identifier	GetMyRemoteAddress		1086250	1					
ANR	1089174	ArgumentList			1086250	1					
ANR	1089175	IfStatement	if ( ! shared_port_addr )		1086250	1					
ANR	1089176	Condition	! shared_port_addr	8524:6:261592:261608	1086250	0	True				
ANR	1089177	UnaryOperationExpression	! shared_port_addr		1086250	0					
ANR	1089178	UnaryOperator	!		1086250	0					
ANR	1089179	Identifier	shared_port_addr		1086250	1					
ANR	1089180	CompoundStatement		1207:26:37657:37657	1086250	1					
ANR	1089181	ExpressionStatement	shared_port_addr = shared_port_endpoint . GetMyLocalAddress ( )	8525:3:261617:261676	1086250	0	True				
ANR	1089182	AssignmentExpression	shared_port_addr = shared_port_endpoint . GetMyLocalAddress ( )		1086250	0		=			
ANR	1089183	Identifier	shared_port_addr		1086250	0					
ANR	1089184	CallExpression	shared_port_endpoint . GetMyLocalAddress ( )		1086250	1					
ANR	1089185	Callee	shared_port_endpoint . GetMyLocalAddress		1086250	0					
ANR	1089186	MemberAccess	shared_port_endpoint . GetMyLocalAddress		1086250	0					
ANR	1089187	Identifier	shared_port_endpoint		1086250	0					
ANR	1089188	Identifier	GetMyLocalAddress		1086250	1					
ANR	1089189	ArgumentList			1086250	1					
ANR	1089190	IfStatement	if ( shared_port_addr )		1086250	2					
ANR	1089191	Condition	shared_port_addr	8528:6:261689:261704	1086250	0	True				
ANR	1089192	Identifier	shared_port_addr		1086250	0					
ANR	1089193	CompoundStatement		1211:25:37753:37753	1086250	1					
ANR	1089194	ExpressionStatement	pidtmp -> sinful_string = shared_port_addr	8529:3:261713:261753	1086250	0	True				
ANR	1089195	AssignmentExpression	pidtmp -> sinful_string = shared_port_addr		1086250	0		=			
ANR	1089196	PtrMemberAccess	pidtmp -> sinful_string		1086250	0					
ANR	1089197	Identifier	pidtmp		1086250	0					
ANR	1089198	Identifier	sinful_string		1086250	1					
ANR	1089199	Identifier	shared_port_addr		1086250	1					
ANR	1089200	ExpressionStatement	pidtmp -> shared_port_fname = shared_port_endpoint . GetSocketFileName ( )	8531:3:261814:261882	1086250	1	True				
ANR	1089201	AssignmentExpression	pidtmp -> shared_port_fname = shared_port_endpoint . GetSocketFileName ( )		1086250	0		=			
ANR	1089202	PtrMemberAccess	pidtmp -> shared_port_fname		1086250	0					
ANR	1089203	Identifier	pidtmp		1086250	0					
ANR	1089204	Identifier	shared_port_fname		1086250	1					
ANR	1089205	CallExpression	shared_port_endpoint . GetSocketFileName ( )		1086250	1					
ANR	1089206	Callee	shared_port_endpoint . GetSocketFileName		1086250	0					
ANR	1089207	MemberAccess	shared_port_endpoint . GetSocketFileName		1086250	0					
ANR	1089208	Identifier	shared_port_endpoint		1086250	0					
ANR	1089209	Identifier	GetSocketFileName		1086250	1					
ANR	1089210	ArgumentList			1086250	1					
ANR	1089211	ElseStatement	else		1086250	0					
ANR	1089212	IfStatement	if ( want_command_port != FALSE )		1086250	0					
ANR	1089213	Condition	want_command_port != FALSE	8533:12:261900:261925	1086250	0	True				
ANR	1089214	EqualityExpression	want_command_port != FALSE		1086250	0		!=			
ANR	1089215	Identifier	want_command_port		1086250	0					
ANR	1089216	Identifier	FALSE		1086250	1					
ANR	1089217	CompoundStatement		1217:3:37979:38021	1086250	1					
ANR	1089218	IdentifierDeclStatement	Sinful sinful ( sock_to_string ( rsock . _sock ) ) ;	8534:3:261934:261976	1086250	0	True				
ANR	1089219	IdentifierDecl	sinful ( sock_to_string ( rsock . _sock ) )		1086250	0					
ANR	1089220	IdentifierDeclType	Sinful		1086250	0					
ANR	1089221	Identifier	sinful		1086250	1					
ANR	1089222	CallExpression	sock_to_string ( rsock . _sock )		1086250	2					
ANR	1089223	Callee	sock_to_string		1086250	0					
ANR	1089224	Identifier	sock_to_string		1086250	0					
ANR	1089225	ArgumentList	rsock . _sock		1086250	1					
ANR	1089226	Argument	rsock . _sock		1086250	0					
ANR	1089227	MemberAccess	rsock . _sock		1086250	0					
ANR	1089228	Identifier	rsock		1086250	0					
ANR	1089229	Identifier	_sock		1086250	1					
ANR	1089230	IfStatement	if ( ! want_udp )		1086250	1					
ANR	1089231	Condition	! want_udp	8535:7:261985:261993	1086250	0	True				
ANR	1089232	UnaryOperationExpression	! want_udp		1086250	0					
ANR	1089233	UnaryOperator	!		1086250	0					
ANR	1089234	Identifier	want_udp		1086250	1					
ANR	1089235	CompoundStatement		1218:19:38042:38042	1086250	1					
ANR	1089236	ExpressionStatement	sinful . setNoUDP ( true )	8536:4:262003:262024	1086250	0	True				
ANR	1089237	CallExpression	sinful . setNoUDP ( true )		1086250	0					
ANR	1089238	Callee	sinful . setNoUDP		1086250	0					
ANR	1089239	MemberAccess	sinful . setNoUDP		1086250	0					
ANR	1089240	Identifier	sinful		1086250	0					
ANR	1089241	Identifier	setNoUDP		1086250	1					
ANR	1089242	ArgumentList	true		1086250	1					
ANR	1089243	Argument	true		1086250	0					
ANR	1089244	Identifier	true		1086250	0					
ANR	1089245	ExpressionStatement	pidtmp -> sinful_string = sinful . getSinful ( )	8538:3:262034:262076	1086250	2	True				
ANR	1089246	AssignmentExpression	pidtmp -> sinful_string = sinful . getSinful ( )		1086250	0		=			
ANR	1089247	PtrMemberAccess	pidtmp -> sinful_string		1086250	0					
ANR	1089248	Identifier	pidtmp		1086250	0					
ANR	1089249	Identifier	sinful_string		1086250	1					
ANR	1089250	CallExpression	sinful . getSinful ( )		1086250	1					
ANR	1089251	Callee	sinful . getSinful		1086250	0					
ANR	1089252	MemberAccess	sinful . getSinful		1086250	0					
ANR	1089253	Identifier	sinful		1086250	0					
ANR	1089254	Identifier	getSinful		1086250	1					
ANR	1089255	ArgumentList			1086250	1					
ANR	1089256	ExpressionStatement	pidtmp -> is_local = TRUE	8542:1:262087:262110	1086250	113	True				
ANR	1089257	AssignmentExpression	pidtmp -> is_local = TRUE		1086250	0		=			
ANR	1089258	PtrMemberAccess	pidtmp -> is_local		1086250	0					
ANR	1089259	Identifier	pidtmp		1086250	0					
ANR	1089260	Identifier	is_local		1086250	1					
ANR	1089261	Identifier	TRUE		1086250	1					
ANR	1089262	ExpressionStatement	pidtmp -> parent_is_local = TRUE	8543:1:262113:262143	1086250	114	True				
ANR	1089263	AssignmentExpression	pidtmp -> parent_is_local = TRUE		1086250	0		=			
ANR	1089264	PtrMemberAccess	pidtmp -> parent_is_local		1086250	0					
ANR	1089265	Identifier	pidtmp		1086250	0					
ANR	1089266	Identifier	parent_is_local		1086250	1					
ANR	1089267	Identifier	TRUE		1086250	1					
ANR	1089268	ExpressionStatement	pidtmp -> reaper_id = reaper_id	8544:1:262146:262175	1086250	115	True				
ANR	1089269	AssignmentExpression	pidtmp -> reaper_id = reaper_id		1086250	0		=			
ANR	1089270	PtrMemberAccess	pidtmp -> reaper_id		1086250	0					
ANR	1089271	Identifier	pidtmp		1086250	0					
ANR	1089272	Identifier	reaper_id		1086250	1					
ANR	1089273	Identifier	reaper_id		1086250	1					
ANR	1089274	ExpressionStatement	pidtmp -> hung_tid = - 1	8545:1:262178:262199	1086250	116	True				
ANR	1089275	AssignmentExpression	pidtmp -> hung_tid = - 1		1086250	0		=			
ANR	1089276	PtrMemberAccess	pidtmp -> hung_tid		1086250	0					
ANR	1089277	Identifier	pidtmp		1086250	0					
ANR	1089278	Identifier	hung_tid		1086250	1					
ANR	1089279	UnaryOperationExpression	- 1		1086250	1					
ANR	1089280	UnaryOperator	-		1086250	0					
ANR	1089281	PrimaryExpression	1		1086250	1					
ANR	1089282	ExpressionStatement	pidtmp -> was_not_responding = FALSE	8546:1:262202:262236	1086250	117	True				
ANR	1089283	AssignmentExpression	pidtmp -> was_not_responding = FALSE		1086250	0		=			
ANR	1089284	PtrMemberAccess	pidtmp -> was_not_responding		1086250	0					
ANR	1089285	Identifier	pidtmp		1086250	0					
ANR	1089286	Identifier	was_not_responding		1086250	1					
ANR	1089287	Identifier	FALSE		1086250	1					
ANR	1089288	IfStatement	if ( ! session_id . empty ( ) )		1086250	118					
ANR	1089289	Condition	! session_id . empty ( )	8547:4:262242:262260	1086250	0	True				
ANR	1089290	UnaryOperationExpression	! session_id . empty ( )		1086250	0					
ANR	1089291	UnaryOperator	!		1086250	0					
ANR	1089292	CallExpression	session_id . empty ( )		1086250	1					
ANR	1089293	Callee	session_id . empty		1086250	0					
ANR	1089294	MemberAccess	session_id . empty		1086250	0					
ANR	1089295	Identifier	session_id		1086250	0					
ANR	1089296	Identifier	empty		1086250	1					
ANR	1089297	ArgumentList			1086250	1					
ANR	1089298	CompoundStatement		1231:1:38309:38309	1086250	1					
ANR	1089299	ExpressionStatement	pidtmp -> child_session_id = strdup ( session_id . c_str ( ) )	8549:2:262268:262321	1086250	0	True				
ANR	1089300	AssignmentExpression	pidtmp -> child_session_id = strdup ( session_id . c_str ( ) )		1086250	0		=			
ANR	1089301	PtrMemberAccess	pidtmp -> child_session_id		1086250	0					
ANR	1089302	Identifier	pidtmp		1086250	0					
ANR	1089303	Identifier	child_session_id		1086250	1					
ANR	1089304	CallExpression	strdup ( session_id . c_str ( ) )		1086250	1					
ANR	1089305	Callee	strdup		1086250	0					
ANR	1089306	Identifier	strdup		1086250	0					
ANR	1089307	ArgumentList	session_id . c_str ( )		1086250	1					
ANR	1089308	Argument	session_id . c_str ( )		1086250	0					
ANR	1089309	CallExpression	session_id . c_str ( )		1086250	0					
ANR	1089310	Callee	session_id . c_str		1086250	0					
ANR	1089311	MemberAccess	session_id . c_str		1086250	0					
ANR	1089312	Identifier	session_id		1086250	0					
ANR	1089313	Identifier	c_str		1086250	1					
ANR	1089314	ArgumentList			1086250	1					
ANR	1089315	ExpressionStatement	pidtmp -> hProcess = piProcess . hProcess	8552:1:262340:262377	1086250	119	True				
ANR	1089316	AssignmentExpression	pidtmp -> hProcess = piProcess . hProcess		1086250	0		=			
ANR	1089317	PtrMemberAccess	pidtmp -> hProcess		1086250	0					
ANR	1089318	Identifier	pidtmp		1086250	0					
ANR	1089319	Identifier	hProcess		1086250	1					
ANR	1089320	MemberAccess	piProcess . hProcess		1086250	1					
ANR	1089321	Identifier	piProcess		1086250	0					
ANR	1089322	Identifier	hProcess		1086250	1					
ANR	1089323	ExpressionStatement	pidtmp -> hThread = piProcess . hThread	8553:1:262380:262415	1086250	120	True				
ANR	1089324	AssignmentExpression	pidtmp -> hThread = piProcess . hThread		1086250	0		=			
ANR	1089325	PtrMemberAccess	pidtmp -> hThread		1086250	0					
ANR	1089326	Identifier	pidtmp		1086250	0					
ANR	1089327	Identifier	hThread		1086250	1					
ANR	1089328	MemberAccess	piProcess . hThread		1086250	1					
ANR	1089329	Identifier	piProcess		1086250	0					
ANR	1089330	Identifier	hThread		1086250	1					
ANR	1089331	ExpressionStatement	pidtmp -> pipeEnd = NULL	8554:1:262418:262440	1086250	121	True				
ANR	1089332	AssignmentExpression	pidtmp -> pipeEnd = NULL		1086250	0		=			
ANR	1089333	PtrMemberAccess	pidtmp -> pipeEnd		1086250	0					
ANR	1089334	Identifier	pidtmp		1086250	0					
ANR	1089335	Identifier	pipeEnd		1086250	1					
ANR	1089336	Identifier	NULL		1086250	1					
ANR	1089337	ExpressionStatement	pidtmp -> tid = piProcess . dwThreadId	8555:1:262443:262477	1086250	122	True				
ANR	1089338	AssignmentExpression	pidtmp -> tid = piProcess . dwThreadId		1086250	0		=			
ANR	1089339	PtrMemberAccess	pidtmp -> tid		1086250	0					
ANR	1089340	Identifier	pidtmp		1086250	0					
ANR	1089341	Identifier	tid		1086250	1					
ANR	1089342	MemberAccess	piProcess . dwThreadId		1086250	1					
ANR	1089343	Identifier	piProcess		1086250	0					
ANR	1089344	Identifier	dwThreadId		1086250	1					
ANR	1089345	ExpressionStatement	pidtmp -> hWnd = 0	8556:1:262480:262496	1086250	123	True				
ANR	1089346	AssignmentExpression	pidtmp -> hWnd = 0		1086250	0		=			
ANR	1089347	PtrMemberAccess	pidtmp -> hWnd		1086250	0					
ANR	1089348	Identifier	pidtmp		1086250	0					
ANR	1089349	Identifier	hWnd		1086250	1					
ANR	1089350	PrimaryExpression	0		1086250	1					
ANR	1089351	ExpressionStatement	pidtmp -> pipeReady = 0	8557:1:262499:262520	1086250	124	True				
ANR	1089352	AssignmentExpression	pidtmp -> pipeReady = 0		1086250	0		=			
ANR	1089353	PtrMemberAccess	pidtmp -> pipeReady		1086250	0					
ANR	1089354	Identifier	pidtmp		1086250	0					
ANR	1089355	Identifier	pipeReady		1086250	1					
ANR	1089356	PrimaryExpression	0		1086250	1					
ANR	1089357	ExpressionStatement	pidtmp -> deallocate = 0	8558:1:262523:262545	1086250	125	True				
ANR	1089358	AssignmentExpression	pidtmp -> deallocate = 0		1086250	0		=			
ANR	1089359	PtrMemberAccess	pidtmp -> deallocate		1086250	0					
ANR	1089360	Identifier	pidtmp		1086250	0					
ANR	1089361	Identifier	deallocate		1086250	1					
ANR	1089362	PrimaryExpression	0		1086250	1					
ANR	1089363	ExpressionStatement	shared_port_endpoint . Detach ( )	8562:1:262623:262652	1086250	126	True				
ANR	1089364	CallExpression	shared_port_endpoint . Detach ( )		1086250	0					
ANR	1089365	Callee	shared_port_endpoint . Detach		1086250	0					
ANR	1089366	MemberAccess	shared_port_endpoint . Detach		1086250	0					
ANR	1089367	Identifier	shared_port_endpoint		1086250	0					
ANR	1089368	Identifier	Detach		1086250	1					
ANR	1089369	ArgumentList			1086250	1					
ANR	1089370	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		1086250	127					
ANR	1089371	ForInit	i = 0 ;	8565:6:262712:262715	1086250	0	True				
ANR	1089372	AssignmentExpression	i = 0		1086250	0		=			
ANR	1089373	Identifier	i		1086250	0					
ANR	1089374	PrimaryExpression	0		1086250	1					
ANR	1089375	Condition	i <= 2	8565:11:262717:262720	1086250	1	True				
ANR	1089376	RelationalExpression	i <= 2		1086250	0		<=			
ANR	1089377	Identifier	i		1086250	0					
ANR	1089378	PrimaryExpression	2		1086250	1					
ANR	1089379	PostIncDecOperationExpression	i ++	8565:17:262723:262725	1086250	2	True				
ANR	1089380	Identifier	i		1086250	0					
ANR	1089381	IncDec	++		1086250	1					
ANR	1089382	CompoundStatement		1248:22:38773:38773	1086250	3					
ANR	1089383	IfStatement	if ( dc_pipe_fds [ i ] [ 0 ] != - 1 )		1086250	0					
ANR	1089384	Condition	dc_pipe_fds [ i ] [ 0 ] != - 1	8566:6:262736:262758	1086250	0	True				
ANR	1089385	EqualityExpression	dc_pipe_fds [ i ] [ 0 ] != - 1		1086250	0		!=			
ANR	1089386	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089387	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089388	Identifier	dc_pipe_fds		1086250	0					
ANR	1089389	Identifier	i		1086250	1					
ANR	1089390	PrimaryExpression	0		1086250	1					
ANR	1089391	UnaryOperationExpression	- 1		1086250	1					
ANR	1089392	UnaryOperator	-		1086250	0					
ANR	1089393	PrimaryExpression	1		1086250	1					
ANR	1089394	CompoundStatement		1249:31:38806:38806	1086250	1					
ANR	1089395	IfStatement	if ( i == 0 )		1086250	0					
ANR	1089396	Condition	i == 0	8569:7:262884:262889	1086250	0	True				
ANR	1089397	EqualityExpression	i == 0		1086250	0		==			
ANR	1089398	Identifier	i		1086250	0					
ANR	1089399	PrimaryExpression	0		1086250	1					
ANR	1089400	CompoundStatement		1252:15:38937:38937	1086250	1					
ANR	1089401	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ 0 ] )	8572:4:262984:263013	1086250	0	True				
ANR	1089402	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ 0 ] )		1086250	0					
ANR	1089403	Callee	Close_Pipe		1086250	0					
ANR	1089404	Identifier	Close_Pipe		1086250	0					
ANR	1089405	ArgumentList	dc_pipe_fds [ i ] [ 0 ]		1086250	1					
ANR	1089406	Argument	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089407	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089408	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089409	Identifier	dc_pipe_fds		1086250	0					
ANR	1089410	Identifier	i		1086250	1					
ANR	1089411	PrimaryExpression	0		1086250	1					
ANR	1089412	ExpressionStatement	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 1 ]	8573:4:263019:263059	1086250	1	True				
ANR	1089413	AssignmentExpression	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 1 ]		1086250	0		=			
ANR	1089414	ArrayIndexing	pidtmp -> std_pipes [ i ]		1086250	0					
ANR	1089415	PtrMemberAccess	pidtmp -> std_pipes		1086250	0					
ANR	1089416	Identifier	pidtmp		1086250	0					
ANR	1089417	Identifier	std_pipes		1086250	1					
ANR	1089418	Identifier	i		1086250	1					
ANR	1089419	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		1086250	1					
ANR	1089420	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089421	Identifier	dc_pipe_fds		1086250	0					
ANR	1089422	Identifier	i		1086250	1					
ANR	1089423	PrimaryExpression	1		1086250	1					
ANR	1089424	ElseStatement	else		1086250	0					
ANR	1089425	CompoundStatement		1264:4:39334:39363	1086250	0					
ANR	1089426	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ 1 ] )	8578:4:263181:263210	1086250	0	True				
ANR	1089427	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ 1 ] )		1086250	0					
ANR	1089428	Callee	Close_Pipe		1086250	0					
ANR	1089429	Identifier	Close_Pipe		1086250	0					
ANR	1089430	ArgumentList	dc_pipe_fds [ i ] [ 1 ]		1086250	1					
ANR	1089431	Argument	dc_pipe_fds [ i ] [ 1 ]		1086250	0					
ANR	1089432	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		1086250	0					
ANR	1089433	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089434	Identifier	dc_pipe_fds		1086250	0					
ANR	1089435	Identifier	i		1086250	1					
ANR	1089436	PrimaryExpression	1		1086250	1					
ANR	1089437	ExpressionStatement	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 0 ]	8579:4:263216:263256	1086250	1	True				
ANR	1089438	AssignmentExpression	pidtmp -> std_pipes [ i ] = dc_pipe_fds [ i ] [ 0 ]		1086250	0		=			
ANR	1089439	ArrayIndexing	pidtmp -> std_pipes [ i ]		1086250	0					
ANR	1089440	PtrMemberAccess	pidtmp -> std_pipes		1086250	0					
ANR	1089441	Identifier	pidtmp		1086250	0					
ANR	1089442	Identifier	std_pipes		1086250	1					
ANR	1089443	Identifier	i		1086250	1					
ANR	1089444	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	1					
ANR	1089445	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089446	Identifier	dc_pipe_fds		1086250	0					
ANR	1089447	Identifier	i		1086250	1					
ANR	1089448	PrimaryExpression	0		1086250	1					
ANR	1089449	IdentifierDeclStatement	const char * pipe_desc ;	8580:4:263262:263283	1086250	2	True				
ANR	1089450	IdentifierDecl	* pipe_desc		1086250	0					
ANR	1089451	IdentifierDeclType	const char *		1086250	0					
ANR	1089452	Identifier	pipe_desc		1086250	1					
ANR	1089453	IdentifierDeclStatement	const char * pipe_handler_desc ;	8581:4:263289:263318	1086250	3	True				
ANR	1089454	IdentifierDecl	* pipe_handler_desc		1086250	0					
ANR	1089455	IdentifierDeclType	const char *		1086250	0					
ANR	1089456	Identifier	pipe_handler_desc		1086250	1					
ANR	1089457	IfStatement	if ( i == 1 )		1086250	4					
ANR	1089458	Condition	i == 1	8582:8:263328:263333	1086250	0	True				
ANR	1089459	EqualityExpression	i == 1		1086250	0		==			
ANR	1089460	Identifier	i		1086250	0					
ANR	1089461	PrimaryExpression	1		1086250	1					
ANR	1089462	CompoundStatement		1265:16:39381:39381	1086250	1					
ANR	1089463	ExpressionStatement	"pipe_desc = ""DC stdout pipe"""	8583:5:263343:263371	1086250	0	True				
ANR	1089464	AssignmentExpression	"pipe_desc = ""DC stdout pipe"""		1086250	0		=			
ANR	1089465	Identifier	pipe_desc		1086250	0					
ANR	1089466	PrimaryExpression	"""DC stdout pipe"""		1086250	1					
ANR	1089467	ExpressionStatement	"pipe_handler_desc = ""DC stdout pipe handler"""	8584:5:263378:263422	1086250	1	True				
ANR	1089468	AssignmentExpression	"pipe_handler_desc = ""DC stdout pipe handler"""		1086250	0		=			
ANR	1089469	Identifier	pipe_handler_desc		1086250	0					
ANR	1089470	PrimaryExpression	"""DC stdout pipe handler"""		1086250	1					
ANR	1089471	ElseStatement	else		1086250	0					
ANR	1089472	CompoundStatement		1269:9:39484:39484	1086250	0					
ANR	1089473	ExpressionStatement	"pipe_desc = ""DC stderr pipe"""	8587:5:263446:263474	1086250	0	True				
ANR	1089474	AssignmentExpression	"pipe_desc = ""DC stderr pipe"""		1086250	0		=			
ANR	1089475	Identifier	pipe_desc		1086250	0					
ANR	1089476	PrimaryExpression	"""DC stderr pipe"""		1086250	1					
ANR	1089477	ExpressionStatement	"pipe_handler_desc = ""DC stderr pipe handler"""	8588:5:263481:263525	1086250	1	True				
ANR	1089478	AssignmentExpression	"pipe_handler_desc = ""DC stderr pipe handler"""		1086250	0		=			
ANR	1089479	Identifier	pipe_handler_desc		1086250	0					
ANR	1089480	PrimaryExpression	"""DC stderr pipe handler"""		1086250	1					
ANR	1089481	ExpressionStatement	"Register_Pipe ( dc_pipe_fds [ i ] [ 0 ] , pipe_desc , static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler ) , pipe_handler_desc , pidtmp )"	8590:4:263537:263686	1086250	5	True				
ANR	1089482	CallExpression	"Register_Pipe ( dc_pipe_fds [ i ] [ 0 ] , pipe_desc , static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler ) , pipe_handler_desc , pidtmp )"		1086250	0					
ANR	1089483	Callee	Register_Pipe		1086250	0					
ANR	1089484	Identifier	Register_Pipe		1086250	0					
ANR	1089485	ArgumentList	dc_pipe_fds [ i ] [ 0 ]		1086250	1					
ANR	1089486	Argument	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089487	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089488	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089489	Identifier	dc_pipe_fds		1086250	0					
ANR	1089490	Identifier	i		1086250	1					
ANR	1089491	PrimaryExpression	0		1086250	1					
ANR	1089492	Argument	pipe_desc		1086250	1					
ANR	1089493	Identifier	pipe_desc		1086250	0					
ANR	1089494	Argument	static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		1086250	2					
ANR	1089495	RelationalExpression	static_cast < PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		1086250	0		<			
ANR	1089496	Identifier	static_cast		1086250	0					
ANR	1089497	RelationalExpression	PipeHandlercpp > ( & DaemonCore :: PidEntry :: pipeHandler )		1086250	1		>			
ANR	1089498	Identifier	PipeHandlercpp		1086250	0					
ANR	1089499	UnaryOperationExpression	& DaemonCore :: PidEntry :: pipeHandler		1086250	1					
ANR	1089500	UnaryOperator	&		1086250	0					
ANR	1089501	Identifier	DaemonCore :: PidEntry :: pipeHandler		1086250	1					
ANR	1089502	Argument	pipe_handler_desc		1086250	3					
ANR	1089503	Identifier	pipe_handler_desc		1086250	0					
ANR	1089504	Argument	pidtmp		1086250	4					
ANR	1089505	Identifier	pidtmp		1086250	0					
ANR	1089506	ExpressionStatement	dc_pipe_fds [ i ] [ 0 ] = dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE	8597:3:263853:263909	1086250	1	True				
ANR	1089507	AssignmentExpression	dc_pipe_fds [ i ] [ 0 ] = dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE		1086250	0		=			
ANR	1089508	ArrayIndexing	dc_pipe_fds [ i ] [ 0 ]		1086250	0					
ANR	1089509	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089510	Identifier	dc_pipe_fds		1086250	0					
ANR	1089511	Identifier	i		1086250	1					
ANR	1089512	PrimaryExpression	0		1086250	1					
ANR	1089513	AssignmentExpression	dc_pipe_fds [ i ] [ 1 ] = DC_STD_FD_NOPIPE		1086250	1		=			
ANR	1089514	ArrayIndexing	dc_pipe_fds [ i ] [ 1 ]		1086250	0					
ANR	1089515	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089516	Identifier	dc_pipe_fds		1086250	0					
ANR	1089517	Identifier	i		1086250	1					
ANR	1089518	PrimaryExpression	1		1086250	1					
ANR	1089519	Identifier	DC_STD_FD_NOPIPE		1086250	1					
ANR	1089520	ExpressionStatement	pidenvid_init ( & pidtmp -> penvid )	8602:1:263970:264000	1086250	128	True				
ANR	1089521	CallExpression	pidenvid_init ( & pidtmp -> penvid )		1086250	0					
ANR	1089522	Callee	pidenvid_init		1086250	0					
ANR	1089523	Identifier	pidenvid_init		1086250	0					
ANR	1089524	ArgumentList	& pidtmp -> penvid		1086250	1					
ANR	1089525	Argument	& pidtmp -> penvid		1086250	0					
ANR	1089526	UnaryOperationExpression	& pidtmp -> penvid		1086250	0					
ANR	1089527	UnaryOperator	&		1086250	0					
ANR	1089528	PtrMemberAccess	pidtmp -> penvid		1086250	1					
ANR	1089529	Identifier	pidtmp		1086250	0					
ANR	1089530	Identifier	penvid		1086250	1					
ANR	1089531	IfStatement	"if ( pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK )"		1086250	129					
ANR	1089532	Condition	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK"	8603:5:264007:264080	1086250	0	True				
ANR	1089533	EqualityExpression	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) ) != PIDENVID_OK"		1086250	0		!=			
ANR	1089534	CallExpression	"pidenvid_filter_and_insert ( & pidtmp -> penvid , GetEnviron ( ) )"		1086250	0					
ANR	1089535	Callee	pidenvid_filter_and_insert		1086250	0					
ANR	1089536	Identifier	pidenvid_filter_and_insert		1086250	0					
ANR	1089537	ArgumentList	& pidtmp -> penvid		1086250	1					
ANR	1089538	Argument	& pidtmp -> penvid		1086250	0					
ANR	1089539	UnaryOperationExpression	& pidtmp -> penvid		1086250	0					
ANR	1089540	UnaryOperator	&		1086250	0					
ANR	1089541	PtrMemberAccess	pidtmp -> penvid		1086250	1					
ANR	1089542	Identifier	pidtmp		1086250	0					
ANR	1089543	Identifier	penvid		1086250	1					
ANR	1089544	Argument	GetEnviron ( )		1086250	1					
ANR	1089545	CallExpression	GetEnviron ( )		1086250	0					
ANR	1089546	Callee	GetEnviron		1086250	0					
ANR	1089547	Identifier	GetEnviron		1086250	0					
ANR	1089548	ArgumentList			1086250	1					
ANR	1089549	Identifier	PIDENVID_OK		1086250	1					
ANR	1089550	CompoundStatement		1288:1:40129:40129	1086250	1					
ANR	1089551	Statement	EXCEPT	8606:2:264088:264093	1086250	0	True				
ANR	1089552	Statement	(	8606:8:264094:264094	1086250	1	True				
ANR	1089553	Statement	"""Create_Process: More ancestor environment IDs found than """	8606:10:264096:264154	1086250	2	True				
ANR	1089554	Statement	"""PIDENVID_MAX which is currently %d. Programmer Error."""	8607:4:264160:264214	1086250	3	True				
ANR	1089555	Statement	","	8607:59:264215:264215	1086250	4	True				
ANR	1089556	Statement	PIDENVID_MAX	8608:4:264221:264232	1086250	5	True				
ANR	1089557	Statement	)	8608:17:264234:264234	1086250	6	True				
ANR	1089558	ExpressionStatement		8608:18:264235:264235	1086250	7	True				
ANR	1089559	IfStatement	"if ( pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED )"		1086250	130					
ANR	1089560	Condition	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED"	8610:5:264245:264348	1086250	0	True				
ANR	1089561	EqualityExpression	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii ) == PIDENVID_OVERSIZED"		1086250	0		==			
ANR	1089562	CallExpression	"pidenvid_append_direct ( & pidtmp -> penvid , forker_pid , newpid , time_of_fork , mii )"		1086250	0					
ANR	1089563	Callee	pidenvid_append_direct		1086250	0					
ANR	1089564	Identifier	pidenvid_append_direct		1086250	0					
ANR	1089565	ArgumentList	& pidtmp -> penvid		1086250	1					
ANR	1089566	Argument	& pidtmp -> penvid		1086250	0					
ANR	1089567	UnaryOperationExpression	& pidtmp -> penvid		1086250	0					
ANR	1089568	UnaryOperator	&		1086250	0					
ANR	1089569	PtrMemberAccess	pidtmp -> penvid		1086250	1					
ANR	1089570	Identifier	pidtmp		1086250	0					
ANR	1089571	Identifier	penvid		1086250	1					
ANR	1089572	Argument	forker_pid		1086250	1					
ANR	1089573	Identifier	forker_pid		1086250	0					
ANR	1089574	Argument	newpid		1086250	2					
ANR	1089575	Identifier	newpid		1086250	0					
ANR	1089576	Argument	time_of_fork		1086250	3					
ANR	1089577	Identifier	time_of_fork		1086250	0					
ANR	1089578	Argument	mii		1086250	4					
ANR	1089579	Identifier	mii		1086250	0					
ANR	1089580	Identifier	PIDENVID_OVERSIZED		1086250	1					
ANR	1089581	CompoundStatement		1295:1:40397:40397	1086250	1					
ANR	1089582	Statement	EXCEPT	8613:2:264356:264361	1086250	0	True				
ANR	1089583	Statement	(	8613:8:264362:264362	1086250	1	True				
ANR	1089584	Statement	"""Create_Process: Cannot add child pid to PidEnvID table """	8613:10:264364:264420	1086250	2	True				
ANR	1089585	Statement	"""because there aren't enough entries. PIDENVID_MAX is """	8614:4:264426:264480	1086250	3	True				
ANR	1089586	Statement	"""currently %d! Programmer Error."""	8615:4:264486:264518	1086250	4	True				
ANR	1089587	Statement	","	8615:37:264519:264519	1086250	5	True				
ANR	1089588	Statement	PIDENVID_MAX	8615:39:264521:264532	1086250	6	True				
ANR	1089589	Statement	)	8615:52:264534:264534	1086250	7	True				
ANR	1089590	ExpressionStatement		8615:53:264535:264535	1086250	8	True				
ANR	1089591	CompoundStatement		1303:4:40624:40675	1086250	131					
ANR	1089592	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( newpid , pidtmp ) ;"	8620:4:264579:264630	1086250	0	True				
ANR	1089593	IdentifierDecl	"insert_result = pidTable -> insert ( newpid , pidtmp )"		1086250	0					
ANR	1089594	IdentifierDeclType	int		1086250	0					
ANR	1089595	Identifier	insert_result		1086250	1					
ANR	1089596	AssignmentExpression	"insert_result = pidTable -> insert ( newpid , pidtmp )"		1086250	2		=			
ANR	1089597	Identifier	insert_result		1086250	0					
ANR	1089598	CallExpression	"pidTable -> insert ( newpid , pidtmp )"		1086250	1					
ANR	1089599	Callee	pidTable -> insert		1086250	0					
ANR	1089600	PtrMemberAccess	pidTable -> insert		1086250	0					
ANR	1089601	Identifier	pidTable		1086250	0					
ANR	1089602	Identifier	insert		1086250	1					
ANR	1089603	ArgumentList	newpid		1086250	1					
ANR	1089604	Argument	newpid		1086250	0					
ANR	1089605	Identifier	newpid		1086250	0					
ANR	1089606	Argument	pidtmp		1086250	1					
ANR	1089607	Identifier	pidtmp		1086250	0					
ANR	1089608	ExpressionStatement	assert ( insert_result == 0 )	8621:4:264636:264663	1086250	1	True				
ANR	1089609	CallExpression	assert ( insert_result == 0 )		1086250	0					
ANR	1089610	Callee	assert		1086250	0					
ANR	1089611	Identifier	assert		1086250	0					
ANR	1089612	ArgumentList	insert_result == 0		1086250	1					
ANR	1089613	Argument	insert_result == 0		1086250	0					
ANR	1089614	EqualityExpression	insert_result == 0		1086250	0		==			
ANR	1089615	Identifier	insert_result		1086250	0					
ANR	1089616	PrimaryExpression	0		1086250	1					
ANR	1089617	IfStatement	if ( ( family_info != NULL ) && ! m_proc_family -> register_from_child ( ) )		1086250	132					
ANR	1089618	Condition	( family_info != NULL ) && ! m_proc_family -> register_from_child ( )	8628:5:264800:264861	1086250	0	True				
ANR	1089619	AndExpression	( family_info != NULL ) && ! m_proc_family -> register_from_child ( )		1086250	0		&&			
ANR	1089620	EqualityExpression	family_info != NULL		1086250	0		!=			
ANR	1089621	Identifier	family_info		1086250	0					
ANR	1089622	Identifier	NULL		1086250	1					
ANR	1089623	UnaryOperationExpression	! m_proc_family -> register_from_child ( )		1086250	1					
ANR	1089624	UnaryOperator	!		1086250	0					
ANR	1089625	CallExpression	m_proc_family -> register_from_child ( )		1086250	1					
ANR	1089626	Callee	m_proc_family -> register_from_child		1086250	0					
ANR	1089627	PtrMemberAccess	m_proc_family -> register_from_child		1086250	0					
ANR	1089628	Identifier	m_proc_family		1086250	0					
ANR	1089629	Identifier	register_from_child		1086250	1					
ANR	1089630	ArgumentList			1086250	1					
ANR	1089631	CompoundStatement		1311:69:40909:40909	1086250	1					
ANR	1089632	ExpressionStatement	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , & pidtmp -> penvid , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"	8629:2:264868:265140	1086250	0	True				
ANR	1089633	CallExpression	"Register_Family ( newpid , getpid ( ) , family_info -> max_snapshot_interval , & pidtmp -> penvid , family_info -> login , NULL , family_info -> cgroup , family_info -> glexec_proxy )"		1086250	0					
ANR	1089634	Callee	Register_Family		1086250	0					
ANR	1089635	Identifier	Register_Family		1086250	0					
ANR	1089636	ArgumentList	newpid		1086250	1					
ANR	1089637	Argument	newpid		1086250	0					
ANR	1089638	Identifier	newpid		1086250	0					
ANR	1089639	Argument	getpid ( )		1086250	1					
ANR	1089640	CallExpression	getpid ( )		1086250	0					
ANR	1089641	Callee	getpid		1086250	0					
ANR	1089642	Identifier	getpid		1086250	0					
ANR	1089643	ArgumentList			1086250	1					
ANR	1089644	Argument	family_info -> max_snapshot_interval		1086250	2					
ANR	1089645	PtrMemberAccess	family_info -> max_snapshot_interval		1086250	0					
ANR	1089646	Identifier	family_info		1086250	0					
ANR	1089647	Identifier	max_snapshot_interval		1086250	1					
ANR	1089648	Argument	& pidtmp -> penvid		1086250	3					
ANR	1089649	UnaryOperationExpression	& pidtmp -> penvid		1086250	0					
ANR	1089650	UnaryOperator	&		1086250	0					
ANR	1089651	PtrMemberAccess	pidtmp -> penvid		1086250	1					
ANR	1089652	Identifier	pidtmp		1086250	0					
ANR	1089653	Identifier	penvid		1086250	1					
ANR	1089654	Argument	family_info -> login		1086250	4					
ANR	1089655	PtrMemberAccess	family_info -> login		1086250	0					
ANR	1089656	Identifier	family_info		1086250	0					
ANR	1089657	Identifier	login		1086250	1					
ANR	1089658	Argument	NULL		1086250	5					
ANR	1089659	Identifier	NULL		1086250	0					
ANR	1089660	Argument	family_info -> cgroup		1086250	6					
ANR	1089661	PtrMemberAccess	family_info -> cgroup		1086250	0					
ANR	1089662	Identifier	family_info		1086250	0					
ANR	1089663	Identifier	cgroup		1086250	1					
ANR	1089664	Argument	family_info -> glexec_proxy		1086250	7					
ANR	1089665	PtrMemberAccess	family_info -> glexec_proxy		1086250	0					
ANR	1089666	Identifier	family_info		1086250	0					
ANR	1089667	Identifier	glexec_proxy		1086250	1					
ANR	1089668	ExpressionStatement	runtime = UtcTime :: getTimeDouble ( )	8640:4:265157:265191	1086250	133	True				
ANR	1089669	AssignmentExpression	runtime = UtcTime :: getTimeDouble ( )		1086250	0		=			
ANR	1089670	Identifier	runtime		1086250	0					
ANR	1089671	CallExpression	UtcTime :: getTimeDouble ( )		1086250	1					
ANR	1089672	Callee	UtcTime :: getTimeDouble		1086250	0					
ANR	1089673	Identifier	UtcTime :: getTimeDouble		1086250	0					
ANR	1089674	ArgumentList			1086250	1					
ANR	1089675	ExpressionStatement	delta_runtime = ( runtime - create_process_begin_time )	8641:4:265197:265250	1086250	134	True				
ANR	1089676	AssignmentExpression	delta_runtime = ( runtime - create_process_begin_time )		1086250	0		=			
ANR	1089677	Identifier	delta_runtime		1086250	0					
ANR	1089678	AdditiveExpression	runtime - create_process_begin_time		1086250	1		-			
ANR	1089679	Identifier	runtime		1086250	0					
ANR	1089680	Identifier	create_process_begin_time		1086250	1					
ANR	1089681	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Child Process: pid %lu at %s (%.2f sec)\\n"" , ( unsigned long ) newpid , pidtmp -> sinful_string . Value ( ) , delta_runtime )"	8642:1:265253:265410	1086250	135	True				
ANR	1089682	CallExpression	"dprintf ( D_DAEMONCORE , ""Child Process: pid %lu at %s (%.2f sec)\\n"" , ( unsigned long ) newpid , pidtmp -> sinful_string . Value ( ) , delta_runtime )"		1086250	0					
ANR	1089683	Callee	dprintf		1086250	0					
ANR	1089684	Identifier	dprintf		1086250	0					
ANR	1089685	ArgumentList	D_DAEMONCORE		1086250	1					
ANR	1089686	Argument	D_DAEMONCORE		1086250	0					
ANR	1089687	Identifier	D_DAEMONCORE		1086250	0					
ANR	1089688	Argument	"""Child Process: pid %lu at %s (%.2f sec)\\n"""		1086250	1					
ANR	1089689	PrimaryExpression	"""Child Process: pid %lu at %s (%.2f sec)\\n"""		1086250	0					
ANR	1089690	Argument	( unsigned long ) newpid		1086250	2					
ANR	1089691	CastExpression	( unsigned long ) newpid		1086250	0					
ANR	1089692	CastTarget	unsigned long		1086250	0					
ANR	1089693	Identifier	newpid		1086250	1					
ANR	1089694	Argument	pidtmp -> sinful_string . Value ( )		1086250	3					
ANR	1089695	CallExpression	pidtmp -> sinful_string . Value ( )		1086250	0					
ANR	1089696	Callee	pidtmp -> sinful_string . Value		1086250	0					
ANR	1089697	MemberAccess	pidtmp -> sinful_string . Value		1086250	0					
ANR	1089698	PtrMemberAccess	pidtmp -> sinful_string		1086250	0					
ANR	1089699	Identifier	pidtmp		1086250	0					
ANR	1089700	Identifier	sinful_string		1086250	1					
ANR	1089701	Identifier	Value		1086250	1					
ANR	1089702	ArgumentList			1086250	1					
ANR	1089703	Argument	delta_runtime		1086250	4					
ANR	1089704	Identifier	delta_runtime		1086250	0					
ANR	1089705	ExpressionStatement	WatchPid ( pidtmp )	8648:1:265426:265442	1086250	136	True				
ANR	1089706	CallExpression	WatchPid ( pidtmp )		1086250	0					
ANR	1089707	Callee	WatchPid		1086250	0					
ANR	1089708	Identifier	WatchPid		1086250	0					
ANR	1089709	ArgumentList	pidtmp		1086250	1					
ANR	1089710	Argument	pidtmp		1086250	0					
ANR	1089711	Identifier	pidtmp		1086250	0					
ANR	1089712	Label	wrapup :	8655:1:265660:265666	1086250	137	True				
ANR	1089713	Identifier	wrapup		1086250	0					
ANR	1089714	ExpressionStatement	num_pid_collisions = 0	8661:1:265841:265863	1086250	138	True				
ANR	1089715	AssignmentExpression	num_pid_collisions = 0		1086250	0		=			
ANR	1089716	Identifier	num_pid_collisions		1086250	0					
ANR	1089717	PrimaryExpression	0		1086250	1					
ANR	1089718	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		1086250	139					
ANR	1089719	ForInit	i = 0 ;	8670:6:266046:266049	1086250	0	True				
ANR	1089720	AssignmentExpression	i = 0		1086250	0		=			
ANR	1089721	Identifier	i		1086250	0					
ANR	1089722	PrimaryExpression	0		1086250	1					
ANR	1089723	Condition	i <= 2	8670:11:266051:266054	1086250	1	True				
ANR	1089724	RelationalExpression	i <= 2		1086250	0		<=			
ANR	1089725	Identifier	i		1086250	0					
ANR	1089726	PrimaryExpression	2		1086250	1					
ANR	1089727	PostIncDecOperationExpression	i ++	8670:17:266057:266059	1086250	2	True				
ANR	1089728	Identifier	i		1086250	0					
ANR	1089729	IncDec	++		1086250	1					
ANR	1089730	CompoundStatement		1353:22:42107:42107	1086250	3					
ANR	1089731	ForStatement	for ( j = 0 ; j <= 1 ; j ++ )		1086250	0					
ANR	1089732	ForInit	j = 0 ;	8671:7:266071:266074	1086250	0	True				
ANR	1089733	AssignmentExpression	j = 0		1086250	0		=			
ANR	1089734	Identifier	j		1086250	0					
ANR	1089735	PrimaryExpression	0		1086250	1					
ANR	1089736	Condition	j <= 1	8671:12:266076:266079	1086250	1	True				
ANR	1089737	RelationalExpression	j <= 1		1086250	0		<=			
ANR	1089738	Identifier	j		1086250	0					
ANR	1089739	PrimaryExpression	1		1086250	1					
ANR	1089740	PostIncDecOperationExpression	j ++	8671:18:266082:266084	1086250	2	True				
ANR	1089741	Identifier	j		1086250	0					
ANR	1089742	IncDec	++		1086250	1					
ANR	1089743	CompoundStatement		1354:23:42132:42132	1086250	3					
ANR	1089744	IfStatement	if ( dc_pipe_fds [ i ] [ j ] != - 1 )		1086250	0					
ANR	1089745	Condition	dc_pipe_fds [ i ] [ j ] != - 1	8672:7:266096:266118	1086250	0	True				
ANR	1089746	EqualityExpression	dc_pipe_fds [ i ] [ j ] != - 1		1086250	0		!=			
ANR	1089747	ArrayIndexing	dc_pipe_fds [ i ] [ j ]		1086250	0					
ANR	1089748	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089749	Identifier	dc_pipe_fds		1086250	0					
ANR	1089750	Identifier	i		1086250	1					
ANR	1089751	Identifier	j		1086250	1					
ANR	1089752	UnaryOperationExpression	- 1		1086250	1					
ANR	1089753	UnaryOperator	-		1086250	0					
ANR	1089754	PrimaryExpression	1		1086250	1					
ANR	1089755	CompoundStatement		1355:32:42166:42166	1086250	1					
ANR	1089756	ExpressionStatement	Close_Pipe ( dc_pipe_fds [ i ] [ j ] )	8673:4:266127:266156	1086250	0	True				
ANR	1089757	CallExpression	Close_Pipe ( dc_pipe_fds [ i ] [ j ] )		1086250	0					
ANR	1089758	Callee	Close_Pipe		1086250	0					
ANR	1089759	Identifier	Close_Pipe		1086250	0					
ANR	1089760	ArgumentList	dc_pipe_fds [ i ] [ j ]		1086250	1					
ANR	1089761	Argument	dc_pipe_fds [ i ] [ j ]		1086250	0					
ANR	1089762	ArrayIndexing	dc_pipe_fds [ i ] [ j ]		1086250	0					
ANR	1089763	ArrayIndexing	dc_pipe_fds [ i ]		1086250	0					
ANR	1089764	Identifier	dc_pipe_fds		1086250	0					
ANR	1089765	Identifier	i		1086250	1					
ANR	1089766	Identifier	j		1086250	1					
ANR	1089767	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"	8678:4:266175:266257	1086250	140	True				
ANR	1089768	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"		1086250	0		=			
ANR	1089769	Identifier	runtime		1086250	0					
ANR	1089770	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_Process001"" , IF_VERBOSEPUB , runtime )"		1086250	1					
ANR	1089771	Callee	dc_stats . AddRuntimeSample		1086250	0					
ANR	1089772	MemberAccess	dc_stats . AddRuntimeSample		1086250	0					
ANR	1089773	Identifier	dc_stats		1086250	0					
ANR	1089774	Identifier	AddRuntimeSample		1086250	1					
ANR	1089775	ArgumentList	"""DCCreate_Process001"""		1086250	1					
ANR	1089776	Argument	"""DCCreate_Process001"""		1086250	0					
ANR	1089777	PrimaryExpression	"""DCCreate_Process001"""		1086250	0					
ANR	1089778	Argument	IF_VERBOSEPUB		1086250	1					
ANR	1089779	Identifier	IF_VERBOSEPUB		1086250	0					
ANR	1089780	Argument	runtime		1086250	2					
ANR	1089781	Identifier	runtime		1086250	0					
ANR	1089782	ExpressionStatement	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"	8679:4:266263:266363	1086250	141	True				
ANR	1089783	AssignmentExpression	"runtime = dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"		1086250	0		=			
ANR	1089784	Identifier	runtime		1086250	0					
ANR	1089785	CallExpression	"dc_stats . AddRuntimeSample ( ""DCCreate_ProcessTot"" , IF_VERBOSEPUB , create_process_begin_time )"		1086250	1					
ANR	1089786	Callee	dc_stats . AddRuntimeSample		1086250	0					
ANR	1089787	MemberAccess	dc_stats . AddRuntimeSample		1086250	0					
ANR	1089788	Identifier	dc_stats		1086250	0					
ANR	1089789	Identifier	AddRuntimeSample		1086250	1					
ANR	1089790	ArgumentList	"""DCCreate_ProcessTot"""		1086250	1					
ANR	1089791	Argument	"""DCCreate_ProcessTot"""		1086250	0					
ANR	1089792	PrimaryExpression	"""DCCreate_ProcessTot"""		1086250	0					
ANR	1089793	Argument	IF_VERBOSEPUB		1086250	1					
ANR	1089794	Identifier	IF_VERBOSEPUB		1086250	0					
ANR	1089795	Argument	create_process_begin_time		1086250	2					
ANR	1089796	Identifier	create_process_begin_time		1086250	0					
ANR	1089797	IfStatement	if ( ( runtime - create_process_begin_time ) > delta_runtime + 0.5 )		1086250	142					
ANR	1089798	Condition	( runtime - create_process_begin_time ) > delta_runtime + 0.5	8680:8:266373:266431	1086250	0	True				
ANR	1089799	RelationalExpression	( runtime - create_process_begin_time ) > delta_runtime + 0.5		1086250	0		>			
ANR	1089800	AdditiveExpression	runtime - create_process_begin_time		1086250	0		-			
ANR	1089801	Identifier	runtime		1086250	0					
ANR	1089802	Identifier	create_process_begin_time		1086250	1					
ANR	1089803	AdditiveExpression	delta_runtime + 0.5		1086250	1		+			
ANR	1089804	Identifier	delta_runtime		1086250	0					
ANR	1089805	PrimaryExpression	0.5		1086250	1					
ANR	1089806	CompoundStatement		1363:69:42479:42479	1086250	1					
ANR	1089807	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"" , ( runtime - create_process_begin_time ) - delta_runtime , ( runtime - create_process_begin_time ) )"	8681:4:266440:266682	1086250	0	True				
ANR	1089808	CallExpression	"dprintf ( D_DAEMONCORE , ""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"" , ( runtime - create_process_begin_time ) - delta_runtime , ( runtime - create_process_begin_time ) )"		1086250	0					
ANR	1089809	Callee	dprintf		1086250	0					
ANR	1089810	Identifier	dprintf		1086250	0					
ANR	1089811	ArgumentList	D_DAEMONCORE		1086250	1					
ANR	1089812	Argument	D_DAEMONCORE		1086250	0					
ANR	1089813	Identifier	D_DAEMONCORE		1086250	0					
ANR	1089814	Argument	"""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"""		1086250	1					
ANR	1089815	PrimaryExpression	"""Warning: cleanup from Create_Process took %.3f sec, Create_Process took %.3f sec overall\\n"""		1086250	0					
ANR	1089816	Argument	( runtime - create_process_begin_time ) - delta_runtime		1086250	2					
ANR	1089817	AdditiveExpression	( runtime - create_process_begin_time ) - delta_runtime		1086250	0		-			
ANR	1089818	AdditiveExpression	runtime - create_process_begin_time		1086250	0		-			
ANR	1089819	Identifier	runtime		1086250	0					
ANR	1089820	Identifier	create_process_begin_time		1086250	1					
ANR	1089821	Identifier	delta_runtime		1086250	1					
ANR	1089822	Argument	runtime - create_process_begin_time		1086250	3					
ANR	1089823	AdditiveExpression	runtime - create_process_begin_time		1086250	0		-			
ANR	1089824	Identifier	runtime		1086250	0					
ANR	1089825	Identifier	create_process_begin_time		1086250	1					
ANR	1089826	ExpressionStatement	errno = return_errno	8687:1:266692:266712	1086250	143	True				
ANR	1089827	AssignmentExpression	errno = return_errno		1086250	0		=			
ANR	1089828	Identifier	errno		1086250	0					
ANR	1089829	Identifier	return_errno		1086250	1					
ANR	1089830	ReturnStatement	return newpid ;	8688:1:266715:266728	1086250	144	True				
ANR	1089831	Identifier	newpid		1086250	0					
ANR	1089832	ReturnType	int		1086250	1					
ANR	1089833	Identifier	DaemonCore :: Create_Process		1086250	2					
ANR	1089834	ParameterList	"const char * executable , ArgList const & args , priv_state priv , int reaper_id , int want_command_port , Env const * env , const char * cwd , FamilyInfo * family_info , Stream * sock_inherit_list [ ] , int std [ ] , int fd_inherit_list [ ] , int nice_inc , sigset_t * sigmask , int job_opt_mask , size_t * core_hard_limit , int * affinity_mask , char const * daemon_sock , MyString * err_return_msg"		1086250	3					
ANR	1089835	Parameter	const char * executable	7299:3:223415:223439	1086250	0	True				
ANR	1089836	ParameterType	const char *		1086250	0					
ANR	1089837	Identifier	executable		1086250	1					
ANR	1089838	Parameter	ArgList const & args	7300:3:223445:223463	1086250	1	True				
ANR	1089839	ParameterType	ArgList const &		1086250	0					
ANR	1089840	Identifier	args		1086250	1					
ANR	1089841	Parameter	priv_state priv	7301:3:223469:223486	1086250	2	True				
ANR	1089842	ParameterType	priv_state		1086250	0					
ANR	1089843	Identifier	priv		1086250	1					
ANR	1089844	Parameter	int reaper_id	7302:3:223492:223514	1086250	3	True				
ANR	1089845	ParameterType	int		1086250	0					
ANR	1089846	Identifier	reaper_id		1086250	1					
ANR	1089847	Parameter	int want_command_port	7303:3:223520:223550	1086250	4	True				
ANR	1089848	ParameterType	int		1086250	0					
ANR	1089849	Identifier	want_command_port		1086250	1					
ANR	1089850	Parameter	Env const * env	7304:3:223556:223573	1086250	5	True				
ANR	1089851	ParameterType	Env const *		1086250	0					
ANR	1089852	Identifier	env		1086250	1					
ANR	1089853	Parameter	const char * cwd	7305:3:223579:223596	1086250	6	True				
ANR	1089854	ParameterType	const char *		1086250	0					
ANR	1089855	Identifier	cwd		1086250	1					
ANR	1089856	Parameter	FamilyInfo * family_info	7306:3:223602:223627	1086250	7	True				
ANR	1089857	ParameterType	FamilyInfo *		1086250	0					
ANR	1089858	Identifier	family_info		1086250	1					
ANR	1089859	Parameter	Stream * sock_inherit_list [ ]	7307:3:223633:223666	1086250	8	True				
ANR	1089860	ParameterType	Stream * [ ]		1086250	0					
ANR	1089861	Identifier	sock_inherit_list		1086250	1					
ANR	1089862	Parameter	int std [ ]	7308:3:223672:223690	1086250	9	True				
ANR	1089863	ParameterType	int [ ]		1086250	0					
ANR	1089864	Identifier	std		1086250	1					
ANR	1089865	Parameter	int fd_inherit_list [ ]	7309:3:223696:223726	1086250	10	True				
ANR	1089866	ParameterType	int [ ]		1086250	0					
ANR	1089867	Identifier	fd_inherit_list		1086250	1					
ANR	1089868	Parameter	int nice_inc	7310:3:223732:223753	1086250	11	True				
ANR	1089869	ParameterType	int		1086250	0					
ANR	1089870	Identifier	nice_inc		1086250	1					
ANR	1089871	Parameter	sigset_t * sigmask	7311:3:223759:223780	1086250	12	True				
ANR	1089872	ParameterType	sigset_t *		1086250	0					
ANR	1089873	Identifier	sigmask		1086250	1					
ANR	1089874	Parameter	int job_opt_mask	7312:3:223786:223811	1086250	13	True				
ANR	1089875	ParameterType	int		1086250	0					
ANR	1089876	Identifier	job_opt_mask		1086250	1					
ANR	1089877	Parameter	size_t * core_hard_limit	7313:3:223817:223846	1086250	14	True				
ANR	1089878	ParameterType	size_t *		1086250	0					
ANR	1089879	Identifier	core_hard_limit		1086250	1					
ANR	1089880	Parameter	int * affinity_mask	7314:3:223852:223873	1086250	15	True				
ANR	1089881	ParameterType	int *		1086250	0					
ANR	1089882	Identifier	affinity_mask		1086250	1					
ANR	1089883	Parameter	char const * daemon_sock	7315:3:223879:223904	1086250	16	True				
ANR	1089884	ParameterType	char const *		1086250	0					
ANR	1089885	Identifier	daemon_sock		1086250	1					
ANR	1089886	Parameter	MyString * err_return_msg	7316:3:223910:223938	1086250	17	True				
ANR	1089887	ParameterType	MyString *		1086250	0					
ANR	1089888	Identifier	err_return_msg		1086250	1					
ANR	1089889	CFGEntryNode	ENTRY		1086250		True				
ANR	1089890	CFGExitNode	EXIT		1086250		True				
ANR	1089891	Symbol	& si . hStdInput		1086250						
ANR	1089892	Symbol	MAX_INHERIT_SOCKS		1086250						
ANR	1089893	Symbol	forker_pid		1086250						
ANR	1089894	Symbol	executable_buf . Value		1086250						
ANR	1089895	Symbol	set_user_priv		1086250						
ANR	1089896	Symbol	allow_scripts		1086250						
ANR	1089897	Symbol	* getSecMan		1086250						
ANR	1089898	Symbol	path		1086250						
ANR	1089899	Symbol	can_switch_ids		1086250						
ANR	1089900	Symbol	( * pipeHandleTable ) [ index ] -> get_handle		1086250						
ANR	1089901	Symbol	session_id . c_str		1086250						
ANR	1089902	Symbol	bIs16Bit		1086250						
ANR	1089903	Symbol	std		1086250						
ANR	1089904	Symbol	errno		1086250						
ANR	1089905	Symbol	inheritFds		1086250						
ANR	1089906	Symbol	nice_inc		1086250						
ANR	1089907	Symbol	reapTable [ reaper_id - 1 ] . num		1086250						
ANR	1089908	Symbol	piProcess		1086250						
ANR	1089909	Symbol	pidtmp -> sinful_string . Value		1086250						
ANR	1089910	Symbol	* inheritFds		1086250						
ANR	1089911	Symbol	interpreter		1086250						
ANR	1089912	Symbol	longTemp		1086250						
ANR	1089913	Symbol	executable_with_exe		1086250						
ANR	1089914	Symbol	pidtmp -> child_session_id		1086250						
ANR	1089915	Symbol	rc		1086250						
ANR	1089916	Symbol	shared_port_endpoint		1086250						
ANR	1089917	Symbol	reapTable		1086250						
ANR	1089918	Symbol	pidtmp -> reaper_id		1086250						
ANR	1089919	Symbol	job_environ		1086250						
ANR	1089920	Symbol	newenv		1086250						
ANR	1089921	Symbol	binary_executable		1086250						
ANR	1089922	Symbol	* reaper_id		1086250						
ANR	1089923	Symbol	sock_inherit_list		1086250						
ANR	1089924	Symbol	current_priv		1086250						
ANR	1089925	Symbol	ssock		1086250						
ANR	1089926	Symbol	get_mySubSystem		1086250						
ANR	1089927	Symbol	want_udp		1086250						
ANR	1089928	Symbol	HANDLE_FLAG_INHERIT		1086250						
ANR	1089929	Symbol	condor_basename		1086250						
ANR	1089930	Symbol	* pipeHandleTable		1086250						
ANR	1089931	Symbol	inheritbuf . Value		1086250						
ANR	1089932	Symbol	num_pid_collisions		1086250						
ANR	1089933	Symbol	ssock . set_inheritable		1086250						
ANR	1089934	Symbol	mii		1086250						
ANR	1089935	Symbol	pidtmp -> was_not_responding		1086250						
ANR	1089936	Symbol	* affinity_mask		1086250						
ANR	1089937	Symbol	getSecMan ( ) -> ExportSecSessionInfo		1086250						
ANR	1089938	Symbol	STARTF_USESTDHANDLES		1086250						
ANR	1089939	Symbol	priv_state_get_handle		1086250						
ANR	1089940	Symbol	default_vars		1086250						
ANR	1089941	Symbol	si		1086250						
ANR	1089942	Symbol	param_boolean_crufty		1086250						
ANR	1089943	Symbol	shared_port_endpoint . GetMyRemoteAddress		1086250						
ANR	1089944	Symbol	DC_STD_FD_NOPIPE		1086250						
ANR	1089945	Symbol	args_errors		1086250						
ANR	1089946	Symbol	pidtmp -> pipeReady		1086250						
ANR	1089947	Symbol	CREATE_NEW_PROCESS_GROUP		1086250						
ANR	1089948	Symbol	privateinheritbuf		1086250						
ANR	1089949	Symbol	GrantDesktopAccess		1086250						
ANR	1089950	Symbol	create_process_flags		1086250						
ANR	1089951	Symbol	cwdBackup		1086250						
ANR	1089952	Symbol	mypid		1086250						
ANR	1089953	Symbol	i		1086250						
ANR	1089954	Symbol	session_id		1086250						
ANR	1089955	Symbol	j		1086250						
ANR	1089956	Symbol	insert_result		1086250						
ANR	1089957	Symbol	PIDENVID_OK		1086250						
ANR	1089958	Symbol	executable		1086250						
ANR	1089959	Symbol	ENV_PRIVATE		1086250						
ANR	1089960	Symbol	cwd		1086250						
ANR	1089961	Symbol	* sock_inherit_list		1086250						
ANR	1089962	Symbol	dc_stats . AddRuntimeSample		1086250						
ANR	1089963	Symbol	pipe_handler_desc		1086250						
ANR	1089964	Symbol	s		1086250						
ANR	1089965	Symbol	* std_handles		1086250						
ANR	1089966	Symbol	IF_VERBOSEPUB		1086250						
ANR	1089967	Symbol	create_process_begin_time		1086250						
ANR	1089968	Symbol	HAS_DCJOBOPT_NEVER_USE_SHARED_PORT		1086250						
ANR	1089969	Symbol	temp_path . Length		1086250						
ANR	1089970	Symbol	privateinheritbuf . Value		1086250						
ANR	1089971	Symbol	D_NETWORK		1086250						
ANR	1089972	Symbol	temp_path . Value		1086250						
ANR	1089973	Symbol	executable_buf		1086250						
ANR	1089974	Symbol	& si		1086250						
ANR	1089975	Symbol	pidtmp -> pipeEnd		1086250						
ANR	1089976	Symbol	ProcFamilyInterface :: create		1086250						
ANR	1089977	Symbol	path . Length		1086250						
ANR	1089978	Symbol	claimId . claimId		1086250						
ANR	1089979	Symbol	& DaemonCore :: PidEntry :: pipeHandler		1086250						
ANR	1089980	Symbol	* dc_pipe_fds		1086250						
ANR	1089981	Symbol	_get_osfhandle		1086250						
ANR	1089982	Symbol	loaded		1086250						
ANR	1089983	Symbol	strlen		1086250						
ANR	1089984	Symbol	ptmp		1086250						
ANR	1089985	Symbol	newpid		1086250						
ANR	1089986	Symbol	tempSock		1086250						
ANR	1089987	Symbol	cp_result		1086250						
ANR	1089988	Symbol	priv		1086250						
ANR	1089989	Symbol	daemon_sock		1086250						
ANR	1089990	Symbol	batch_file		1086250						
ANR	1089991	Symbol	GetSystemDirectory		1086250						
ANR	1089992	Symbol	* * i		1086250						
ANR	1089993	Symbol	& strArgs		1086250						
ANR	1089994	Symbol	delta_runtime		1086250						
ANR	1089995	Symbol	D_FULLDEBUG		1086250						
ANR	1089996	Symbol	param_boolean		1086250						
ANR	1089997	Symbol	claimId		1086250						
ANR	1089998	Symbol	* pidtmp		1086250						
ANR	1089999	Symbol	family_info -> cgroup		1086250						
ANR	1090000	Symbol	static_cast		1086250						
ANR	1090001	Symbol	tempSock -> get_file_desc		1086250						
ANR	1090002	Symbol	shared_port_addr		1086250						
ANR	1090003	Symbol	pidtmp		1086250						
ANR	1090004	Symbol	fd		1086250						
ANR	1090005	Symbol	strArgs . Value		1086250						
ANR	1090006	Symbol	* * std_handles		1086250						
ANR	1090007	Symbol	shared_port_endpoint . GetMyLocalAddress		1086250						
ANR	1090008	Symbol	GetEnviron		1086250						
ANR	1090009	Symbol	alternate_exec_pathname		1086250						
ANR	1090010	Symbol	* pidTable		1086250						
ANR	1090011	Symbol	description		1086250						
ANR	1090012	Symbol	EnvGetName		1086250						
ANR	1090013	Symbol	piProcess . dwProcessId		1086250						
ANR	1090014	Symbol	family_info		1086250						
ANR	1090015	Symbol	shared_port_endpoint . GetSocketFileName		1086250						
ANR	1090016	Symbol	pidtmp -> new_process_group		1086250						
ANR	1090017	Symbol	PRIV_USER_FINAL		1086250						
ANR	1090018	Symbol	PipeHandlercpp		1086250						
ANR	1090019	Symbol	time_of_fork		1086250						
ANR	1090020	Symbol	ResumeThread		1086250						
ANR	1090021	Symbol	pidtmp -> hung_tid		1086250						
ANR	1090022	Symbol	MapAndLoad		1086250						
ANR	1090023	Symbol	* * index		1086250						
ANR	1090024	Symbol	temp_path		1086250						
ANR	1090025	Symbol	ssock_ptr		1086250						
ANR	1090026	Symbol	mask		1086250						
ANR	1090027	Symbol	pidtmp -> hWnd		1086250						
ANR	1090028	Symbol	* * dc_pipe_fds		1086250						
ANR	1090029	Symbol	false		1086250						
ANR	1090030	Symbol	D_ALWAYS		1086250						
ANR	1090031	Symbol	length		1086250						
ANR	1090032	Symbol	si . wShowWindow		1086250						
ANR	1090033	Symbol	& args_errors		1086250						
ANR	1090034	Symbol	pidtmp -> tid		1086250						
ANR	1090035	Symbol	env		1086250						
ANR	1090036	Symbol	HAS_DCJOBOPT_NO_UDP		1086250						
ANR	1090037	Symbol	return_errno		1086250						
ANR	1090038	Symbol	args		1086250						
ANR	1090039	Symbol	* * pidtmp		1086250						
ANR	1090040	Symbol	systemshell		1086250						
ANR	1090041	Symbol	envbuf		1086250						
ANR	1090042	Symbol	rsock . set_inheritable		1086250						
ANR	1090043	Symbol	fd_inherit_list		1086250						
ANR	1090044	Symbol	FALSE		1086250						
ANR	1090045	Symbol	* reapTable		1086250						
ANR	1090046	Symbol	CONDOR_CHILD_FQU		1086250						
ANR	1090047	Symbol	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1086250						
ANR	1090048	Symbol	MAX_PATH		1086250						
ANR	1090049	Symbol	strdup		1086250						
ANR	1090050	Symbol	Create_Pipe		1086250						
ANR	1090051	Symbol	pidtmp -> parent_is_local		1086250						
ANR	1090052	Symbol	GetEnvironmentStrings		1086250						
ANR	1090053	Symbol	ENV_INHERIT		1086250						
ANR	1090054	Symbol	m_proc_family -> register_from_child		1086250						
ANR	1090055	Symbol	* index		1086250						
ANR	1090056	Symbol	piProcess . hProcess		1086250						
ANR	1090057	Symbol	* * default_vars		1086250						
ANR	1090058	Symbol	affinity_mask		1086250						
ANR	1090059	Symbol	namelen		1086250						
ANR	1090060	Symbol	args . GetArgsStringWin32		1086250						
ANR	1090061	Symbol	my_env		1086250						
ANR	1090062	Symbol	session_key . c_str		1086250						
ANR	1090063	Symbol	pidtmp -> std_pipes		1086250						
ANR	1090064	Symbol	args_success		1086250						
ANR	1090065	Symbol	family_info -> glexec_proxy		1086250						
ANR	1090066	Symbol	c_session_key		1086250						
ANR	1090067	Symbol	UtcTime :: getTimeDouble		1086250						
ANR	1090068	Symbol	PIPE_INDEX_OFFSET		1086250						
ANR	1090069	Symbol	piProcess . dwThreadId		1086250						
ANR	1090070	Symbol	IDLE_PRIORITY_CLASS		1086250						
ANR	1090071	Symbol	& pidtmp -> penvid		1086250						
ANR	1090072	Symbol	* tempSock		1086250						
ANR	1090073	Symbol	job_environ . getWindowsEnvironmentString		1086250						
ANR	1090074	Symbol	* cwd		1086250						
ANR	1090075	Symbol	index		1086250						
ANR	1090076	Symbol	session_id_c_str		1086250						
ANR	1090077	Symbol	getSecMan		1086250						
ANR	1090078	Symbol	SCS_DOS_BINARY		1086250						
ANR	1090079	Symbol	& binType		1086250						
ANR	1090080	Symbol	pidtmp -> sinful_string		1086250						
ANR	1090081	Symbol	DAEMON		1086250						
ANR	1090082	Symbol	GetExecutableAndArgumentTemplateByExtention		1086250						
ANR	1090083	Symbol	envbuf . Value		1086250						
ANR	1090084	Symbol	loaded . fDOSImage		1086250						
ANR	1090085	Symbol	STARTF_USESHOWWINDOW		1086250						
ANR	1090086	Symbol	si . dwFlags		1086250						
ANR	1090087	Symbol	pidtmp -> is_local		1086250						
ANR	1090088	Symbol	extension		1086250						
ANR	1090089	Symbol	session_id . empty		1086250						
ANR	1090090	Symbol	family_info -> max_snapshot_interval		1086250						
ANR	1090091	Symbol	ssock . serialize		1086250						
ANR	1090092	Symbol	sigmask		1086250						
ANR	1090093	Symbol	rsock		1086250						
ANR	1090094	Symbol	pipe_desc		1086250						
ANR	1090095	Symbol	* std		1086250						
ANR	1090096	Symbol	* pidtmp -> std_pipes		1086250						
ANR	1090097	Symbol	valid		1086250						
ANR	1090098	Symbol	* * * pipeHandleTable		1086250						
ANR	1090099	Symbol	m_wants_dc_udp		1086250						
ANR	1090100	Symbol	Condor_Crypt_Base :: randomHexKey		1086250						
ANR	1090101	Symbol	pidenvid_append_direct		1086250						
ANR	1090102	Symbol	session_key_c_str		1086250						
ANR	1090103	Symbol	c_session_id		1086250						
ANR	1090104	Symbol	pidTable		1086250						
ANR	1090105	Symbol	executable_with_exe . Value		1086250						
ANR	1090106	Symbol	SW_SHOWNOACTIVATE		1086250						
ANR	1090107	Symbol	binType		1086250						
ANR	1090108	Symbol	maxReap		1086250						
ANR	1090109	Symbol	strArgs		1086250						
ANR	1090110	Symbol	si . cb		1086250						
ANR	1090111	Symbol	& ssock		1086250						
ANR	1090112	Symbol	& si . hStdOutput		1086250						
ANR	1090113	Symbol	& mii		1086250						
ANR	1090114	Symbol	strrchr		1086250						
ANR	1090115	Symbol	inherit_handles		1086250						
ANR	1090116	Symbol	dc_stats		1086250						
ANR	1090117	Symbol	SetProcessAffinityMask		1086250						
ANR	1090118	Symbol	privateinheritbuf . IsEmpty		1086250						
ANR	1090119	Symbol	first_arg_to_copy		1086250						
ANR	1090120	Symbol	InitCommandSockets		1086250						
ANR	1090121	Symbol	shared_port_endpoint . CreateListener		1086250						
ANR	1090122	Symbol	err_return_msg		1086250						
ANR	1090123	Symbol	CREATE_SUSPENDED		1086250						
ANR	1090124	Symbol	pidtmp -> shared_port_fname		1086250						
ANR	1090125	Symbol	core_hard_limit		1086250						
ANR	1090126	Symbol	PRIV_UNKNOWN		1086250						
ANR	1090127	Symbol	& piProcess		1086250						
ANR	1090128	Symbol	map_and_load_result		1086250						
ANR	1090129	Symbol	sinful . getSinful		1086250						
ANR	1090130	Symbol	* std_handles [ i ]		1086250						
ANR	1090131	Symbol	Register_Family		1086250						
ANR	1090132	Symbol	mysin		1086250						
ANR	1090133	Symbol	FreeEnvironmentStrings		1086250						
ANR	1090134	Symbol	session_key		1086250						
ANR	1090135	Symbol	path . Value		1086250						
ANR	1090136	Symbol	strcasecmp		1086250						
ANR	1090137	Symbol	& si . hStdError		1086250						
ANR	1090138	Symbol	sinful		1086250						
ANR	1090139	Symbol	* family_info		1086250						
ANR	1090140	Symbol	* default_vars		1086250						
ANR	1090141	Symbol	NULL		1086250						
ANR	1090142	Symbol	session_info		1086250						
ANR	1090143	Symbol	pidtmp -> hProcess		1086250						
ANR	1090144	Symbol	HAS_DCJOBOPT_NO_ENV_INHERIT		1086250						
ANR	1090145	Symbol	args_errors . Value		1086250						
ANR	1090146	Symbol	gbt_result		1086250						
ANR	1090147	Symbol	rsock . serialize		1086250						
ANR	1090148	Symbol	rsock . _sock		1086250						
ANR	1090149	Symbol	shared_port_endpoint . GetSharedPortID		1086250						
ANR	1090150	Symbol	* env		1086250						
ANR	1090151	Symbol	runtime		1086250						
ANR	1090152	Symbol	TRUE		1086250						
ANR	1090153	Symbol	numInheritFds		1086250						
ANR	1090154	Symbol	shared_port_endpoint . ChownSocket		1086250						
ANR	1090155	Symbol	alt_name		1086250						
ANR	1090156	Symbol	std_handles		1086250						
ANR	1090157	Symbol	GetLastError		1086250						
ANR	1090158	Symbol	true		1086250						
ANR	1090159	Symbol	SharedPortEndpoint :: UseSharedPort		1086250						
ANR	1090160	Symbol	ssock . get_file_desc		1086250						
ANR	1090161	Symbol	InfoCommandSinfulStringMyself		1086250						
ANR	1090162	Symbol	family_info -> login		1086250						
ANR	1090163	Symbol	inheritbuf		1086250						
ANR	1090164	Symbol	sock_inherit_list [ i ] -> type		1086250						
ANR	1090165	Symbol	& time_of_fork		1086250						
ANR	1090166	Symbol	dc_pipe_fds		1086250						
ANR	1090167	Symbol	job_opt_mask		1086250						
ANR	1090168	Symbol	pidtmp -> deallocate		1086250						
ANR	1090169	Symbol	pidenvid_filter_and_insert		1086250						
ANR	1090170	Symbol	piProcess . hThread		1086250						
ANR	1090171	Symbol	pipeHandleTable		1086250						
ANR	1090172	Symbol	GetBinaryType		1086250						
ANR	1090173	Symbol	* * sock_inherit_list		1086250						
ANR	1090174	Symbol	m_proc_family		1086250						
ANR	1090175	Symbol	CREATE_NEW_CONSOLE		1086250						
ANR	1090176	Symbol	user_token		1086250						
ANR	1090177	Symbol	ok		1086250						
ANR	1090178	Symbol	sock_inherit_list [ i ] -> serialize		1086250						
ANR	1090179	Symbol	rsock . get_file_desc		1086250						
ANR	1090180	Symbol	* m_proc_family		1086250						
ANR	1090181	Symbol	reaper_id		1086250						
ANR	1090182	Symbol	get_mySubSystem ( ) -> getName		1086250						
ANR	1090183	Symbol	D_DAEMONCORE		1086250						
ANR	1090184	Symbol	* get_mySubSystem		1086250						
ANR	1090185	Symbol	pidTable -> insert		1086250						
ANR	1090186	Symbol	mysin . Length		1086250						
ANR	1090187	Symbol	DC_STD_FD_PIPE		1086250						
ANR	1090188	Symbol	* numInheritFds		1086250						
ANR	1090189	Symbol	pidtmp -> pid		1086250						
ANR	1090190	Symbol	PIDENVID_OVERSIZED		1086250						
ANR	1090191	Symbol	* i		1086250						
ANR	1090192	Symbol	tempSock -> set_inheritable		1086250						
ANR	1090193	Symbol	* j		1086250						
ANR	1090194	Symbol	& loaded		1086250						
ANR	1090195	Symbol	pidtmp -> hThread		1086250						
ANR	1090196	Symbol	& rsock		1086250						
ANR	1090197	Symbol	* * pipeHandleTable		1086250						
ANR	1090198	Symbol	si . lpDesktop		1086250						
ANR	1090199	Symbol	envbuf . Length		1086250						
ANR	1090200	Symbol	want_command_port		1086250						
ANR	1090201	Symbol	getpid		1086250						
ANR	1090202	Symbol	MATCH		1086250						
ANR	1090203	ClassDef	thread_info	8693:0:266774:266869							
ANR	1090204	DeclStmt									
ANR	1090205	Decl							ThreadStartFunc	ThreadStartFunc	start_func
ANR	1090206	DeclStmt									
ANR	1090207	Decl							void	void *	arg
ANR	1090208	DeclStmt									
ANR	1090209	Decl							Stream	Stream *	sock
ANR	1090210	DeclStmt									
ANR	1090211	Decl							priv_state	priv_state	priv
ANR	1090212	Function	win32_thread_start_func	8700:0:266873:267248							
ANR	1090213	FunctionDef	win32_thread_start_func (void * arg)		1090212	0					
ANR	1090214	CompoundStatement		8701:35:266917:267248	1090212	0					
ANR	1090215	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""In win32_thread_start_func\\n"" )"	8702:1:266920:266971	1090212	0	True				
ANR	1090216	CallExpression	"dprintf ( D_FULLDEBUG , ""In win32_thread_start_func\\n"" )"		1090212	0					
ANR	1090217	Callee	dprintf		1090212	0					
ANR	1090218	Identifier	dprintf		1090212	0					
ANR	1090219	ArgumentList	D_FULLDEBUG		1090212	1					
ANR	1090220	Argument	D_FULLDEBUG		1090212	0					
ANR	1090221	Identifier	D_FULLDEBUG		1090212	0					
ANR	1090222	Argument	"""In win32_thread_start_func\\n"""		1090212	1					
ANR	1090223	PrimaryExpression	"""In win32_thread_start_func\\n"""		1090212	0					
ANR	1090224	IdentifierDeclStatement	thread_info * tinfo = ( thread_info * ) arg ;	8703:1:266974:267013	1090212	1	True				
ANR	1090225	IdentifierDecl	* tinfo = ( thread_info * ) arg		1090212	0					
ANR	1090226	IdentifierDeclType	thread_info *		1090212	0					
ANR	1090227	Identifier	tinfo		1090212	1					
ANR	1090228	AssignmentExpression	* tinfo = ( thread_info * ) arg		1090212	2		=			
ANR	1090229	Identifier	tinfo		1090212	0					
ANR	1090230	CastExpression	( thread_info * ) arg		1090212	1					
ANR	1090231	CastTarget	thread_info *		1090212	0					
ANR	1090232	Identifier	arg		1090212	1					
ANR	1090233	IdentifierDeclStatement	int rval ;	8704:1:267016:267024	1090212	2	True				
ANR	1090234	IdentifierDecl	rval		1090212	0					
ANR	1090235	IdentifierDeclType	int		1090212	0					
ANR	1090236	Identifier	rval		1090212	1					
ANR	1090237	ExpressionStatement	set_priv ( tinfo -> priv )	8705:1:267027:267048	1090212	3	True				
ANR	1090238	CallExpression	set_priv ( tinfo -> priv )		1090212	0					
ANR	1090239	Callee	set_priv		1090212	0					
ANR	1090240	Identifier	set_priv		1090212	0					
ANR	1090241	ArgumentList	tinfo -> priv		1090212	1					
ANR	1090242	Argument	tinfo -> priv		1090212	0					
ANR	1090243	PtrMemberAccess	tinfo -> priv		1090212	0					
ANR	1090244	Identifier	tinfo		1090212	0					
ANR	1090245	Identifier	priv		1090212	1					
ANR	1090246	ExpressionStatement	"rval = tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"	8706:1:267096:267145	1090212	4	True				
ANR	1090247	AssignmentExpression	"rval = tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"		1090212	0		=			
ANR	1090248	Identifier	rval		1090212	0					
ANR	1090249	CallExpression	"tinfo -> start_func ( tinfo -> arg , tinfo -> sock )"		1090212	1					
ANR	1090250	Callee	tinfo -> start_func		1090212	0					
ANR	1090251	PtrMemberAccess	tinfo -> start_func		1090212	0					
ANR	1090252	Identifier	tinfo		1090212	0					
ANR	1090253	Identifier	start_func		1090212	1					
ANR	1090254	ArgumentList	tinfo -> arg		1090212	1					
ANR	1090255	Argument	tinfo -> arg		1090212	0					
ANR	1090256	PtrMemberAccess	tinfo -> arg		1090212	0					
ANR	1090257	Identifier	tinfo		1090212	0					
ANR	1090258	Identifier	arg		1090212	1					
ANR	1090259	Argument	tinfo -> sock		1090212	1					
ANR	1090260	PtrMemberAccess	tinfo -> sock		1090212	0					
ANR	1090261	Identifier	tinfo		1090212	0					
ANR	1090262	Identifier	sock		1090212	1					
ANR	1090263	IfStatement	if ( tinfo -> arg )		1090212	5					
ANR	1090264	Condition	tinfo -> arg	8707:5:267152:267161	1090212	0	True				
ANR	1090265	PtrMemberAccess	tinfo -> arg		1090212	0					
ANR	1090266	Identifier	tinfo		1090212	0					
ANR	1090267	Identifier	arg		1090212	1					
ANR	1090268	ExpressionStatement	free ( tinfo -> arg )	8707:17:267164:267180	1090212	1	True				
ANR	1090269	CallExpression	free ( tinfo -> arg )		1090212	0					
ANR	1090270	Callee	free		1090212	0					
ANR	1090271	Identifier	free		1090212	0					
ANR	1090272	ArgumentList	tinfo -> arg		1090212	1					
ANR	1090273	Argument	tinfo -> arg		1090212	0					
ANR	1090274	PtrMemberAccess	tinfo -> arg		1090212	0					
ANR	1090275	Identifier	tinfo		1090212	0					
ANR	1090276	Identifier	arg		1090212	1					
ANR	1090277	IfStatement	if ( tinfo -> sock )		1090212	6					
ANR	1090278	Condition	tinfo -> sock	8708:5:267187:267197	1090212	0	True				
ANR	1090279	PtrMemberAccess	tinfo -> sock		1090212	0					
ANR	1090280	Identifier	tinfo		1090212	0					
ANR	1090281	Identifier	sock		1090212	1					
ANR	1090282	Statement	delete	8708:18:267200:267205	1090212	1	True				
ANR	1090283	ExpressionStatement	tinfo -> sock	8708:25:267207:267218	1090212	7	True				
ANR	1090284	PtrMemberAccess	tinfo -> sock		1090212	0					
ANR	1090285	Identifier	tinfo		1090212	0					
ANR	1090286	Identifier	sock		1090212	1					
ANR	1090287	ExpressionStatement	free ( tinfo )	8709:1:267221:267232	1090212	8	True				
ANR	1090288	CallExpression	free ( tinfo )		1090212	0					
ANR	1090289	Callee	free		1090212	0					
ANR	1090290	Identifier	free		1090212	0					
ANR	1090291	ArgumentList	tinfo		1090212	1					
ANR	1090292	Argument	tinfo		1090212	0					
ANR	1090293	Identifier	tinfo		1090212	0					
ANR	1090294	ReturnStatement	return rval ;	8710:1:267235:267246	1090212	9	True				
ANR	1090295	Identifier	rval		1090212	0					
ANR	1090296	ReturnType	unsigned		1090212	1					
ANR	1090297	Identifier	win32_thread_start_func		1090212	2					
ANR	1090298	ParameterList	void * arg		1090212	3					
ANR	1090299	Parameter	void * arg	8701:24:266906:266914	1090212	0	True				
ANR	1090300	ParameterType	void *		1090212	0					
ANR	1090301	Identifier	arg		1090212	1					
ANR	1090302	CFGEntryNode	ENTRY		1090212		True				
ANR	1090303	CFGExitNode	EXIT		1090212		True				
ANR	1090304	Symbol	tinfo -> priv		1090212						
ANR	1090305	Symbol	tinfo		1090212						
ANR	1090306	Symbol	tinfo -> sock		1090212						
ANR	1090307	Symbol	arg		1090212						
ANR	1090308	Symbol	* tinfo		1090212						
ANR	1090309	Symbol	tinfo -> arg		1090212						
ANR	1090310	Symbol	D_FULLDEBUG		1090212						
ANR	1090311	Symbol	rval		1090212						
ANR	1090312	Symbol	tinfo -> start_func		1090212						
ANR	1090313	ClassDef	FakeCreateThreadReaperCaller	8714:0:267258:267513							
ANR	1090314	DeclStmt									
ANR	1090315	Decl							void	void ( )	CallReaper
ANR	1090316	Function	FakeThreadID	8720:1:267404:267439							
ANR	1090317	FunctionDef	FakeThreadID ()		1090316	1					
ANR	1090318	CompoundStatement		8720:20:267423:267439	1090316	0					
ANR	1090319	ReturnStatement	return m_tid ;	8720:1:267425:267437	1090316	0	True				
ANR	1090320	Identifier	m_tid		1090316	0					
ANR	1090321	ReturnType	int		1090316	1					
ANR	1090322	Identifier	FakeThreadID		1090316	2					
ANR	1090323	ParameterList			1090316	3					
ANR	1090324	CFGEntryNode	ENTRY		1090316		True				
ANR	1090325	CFGExitNode	EXIT		1090316		True				
ANR	1090326	Symbol	m_tid		1090316						
ANR	1090327	DeclStmt									
ANR	1090328	Decl							int	int	m_tid
ANR	1090329	DeclStmt									
ANR	1090330	Decl							int	int	m_exit_status
ANR	1090331	DeclStmt									
ANR	1090332	Decl							int	int	m_reaper_id
ANR	1090333	Function	FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller	8728:0:267517:268027							
ANR	1090334	FunctionDef	"FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller (int exit_status , int reaper_id)"		1090333	0					
ANR	1090335	CompoundStatement		8730:0:267660:268027	1090333	0					
ANR	1090336	ExpressionStatement	"m_tid = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"	8734:1:267842:268001	1090333	0	True				
ANR	1090337	AssignmentExpression	"m_tid = daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"		1090333	0		=			
ANR	1090338	Identifier	m_tid		1090333	0					
ANR	1090339	CallExpression	"daemonCore -> Register_Timer ( 0 , ( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper , ""FakeCreateThreadReaperCaller::CallReaper()"" , this )"		1090333	1					
ANR	1090340	Callee	daemonCore -> Register_Timer		1090333	0					
ANR	1090341	PtrMemberAccess	daemonCore -> Register_Timer		1090333	0					
ANR	1090342	Identifier	daemonCore		1090333	0					
ANR	1090343	Identifier	Register_Timer		1090333	1					
ANR	1090344	ArgumentList	0		1090333	1					
ANR	1090345	Argument	0		1090333	0					
ANR	1090346	PrimaryExpression	0		1090333	0					
ANR	1090347	Argument	( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper		1090333	1					
ANR	1090348	CastExpression	( TimerHandlercpp ) & FakeCreateThreadReaperCaller :: CallReaper		1090333	0					
ANR	1090349	CastTarget	TimerHandlercpp		1090333	0					
ANR	1090350	UnaryOperationExpression	& FakeCreateThreadReaperCaller :: CallReaper		1090333	1					
ANR	1090351	UnaryOperator	&		1090333	0					
ANR	1090352	Identifier	FakeCreateThreadReaperCaller :: CallReaper		1090333	1					
ANR	1090353	Argument	"""FakeCreateThreadReaperCaller::CallReaper()"""		1090333	2					
ANR	1090354	PrimaryExpression	"""FakeCreateThreadReaperCaller::CallReaper()"""		1090333	0					
ANR	1090355	Argument	this		1090333	3					
ANR	1090356	Identifier	this		1090333	0					
ANR	1090357	ExpressionStatement	ASSERT ( m_tid >= 0 )	8740:1:268005:268025	1090333	1	True				
ANR	1090358	CallExpression	ASSERT ( m_tid >= 0 )		1090333	0					
ANR	1090359	Callee	ASSERT		1090333	0					
ANR	1090360	Identifier	ASSERT		1090333	0					
ANR	1090361	ArgumentList	m_tid >= 0		1090333	1					
ANR	1090362	Argument	m_tid >= 0		1090333	0					
ANR	1090363	RelationalExpression	m_tid >= 0		1090333	0		>=			
ANR	1090364	Identifier	m_tid		1090333	0					
ANR	1090365	PrimaryExpression	0		1090333	1					
ANR	1090366	Identifier	FakeCreateThreadReaperCaller :: FakeCreateThreadReaperCaller		1090333	1					
ANR	1090367	ParameterList	"int exit_status , int reaper_id"		1090333	2					
ANR	1090368	Parameter	int exit_status	8728:59:267576:267590	1090333	0	True				
ANR	1090369	ParameterType	int		1090333	0					
ANR	1090370	Identifier	exit_status		1090333	1					
ANR	1090371	Parameter	int reaper_id	8728:75:267592:267604	1090333	1	True				
ANR	1090372	ParameterType	int		1090333	0					
ANR	1090373	Identifier	reaper_id		1090333	1					
ANR	1090374	CFGEntryNode	ENTRY		1090333		True				
ANR	1090375	CFGExitNode	EXIT		1090333		True				
ANR	1090376	Symbol	m_tid		1090333						
ANR	1090377	Symbol	reaper_id		1090333						
ANR	1090378	Symbol	* daemonCore		1090333						
ANR	1090379	Symbol	& FakeCreateThreadReaperCaller :: CallReaper		1090333						
ANR	1090380	Symbol	daemonCore		1090333						
ANR	1090381	Symbol	daemonCore -> Register_Timer		1090333						
ANR	1090382	Symbol	this		1090333						
ANR	1090383	Symbol	exit_status		1090333						
ANR	1090384	Function	FakeCreateThreadReaperCaller :: CallReaper	8743:0:268030:268171							
ANR	1090385	FunctionDef	FakeCreateThreadReaperCaller :: CallReaper ()		1090384	0					
ANR	1090386	CompoundStatement		8744:43:268078:268171	1090384	0					
ANR	1090387	ExpressionStatement	"daemonCore -> CallReaper ( m_reaper_id , ""fake thread"" , m_tid , m_exit_status )"	8745:1:268081:268155	1090384	0	True				
ANR	1090388	CallExpression	"daemonCore -> CallReaper ( m_reaper_id , ""fake thread"" , m_tid , m_exit_status )"		1090384	0					
ANR	1090389	Callee	daemonCore -> CallReaper		1090384	0					
ANR	1090390	PtrMemberAccess	daemonCore -> CallReaper		1090384	0					
ANR	1090391	Identifier	daemonCore		1090384	0					
ANR	1090392	Identifier	CallReaper		1090384	1					
ANR	1090393	ArgumentList	m_reaper_id		1090384	1					
ANR	1090394	Argument	m_reaper_id		1090384	0					
ANR	1090395	Identifier	m_reaper_id		1090384	0					
ANR	1090396	Argument	"""fake thread"""		1090384	1					
ANR	1090397	PrimaryExpression	"""fake thread"""		1090384	0					
ANR	1090398	Argument	m_tid		1090384	2					
ANR	1090399	Identifier	m_tid		1090384	0					
ANR	1090400	Argument	m_exit_status		1090384	3					
ANR	1090401	Identifier	m_exit_status		1090384	0					
ANR	1090402	Statement	delete	8746:1:268158:268163	1090384	1	True				
ANR	1090403	ExpressionStatement	this	8746:8:268165:268169	1090384	2	True				
ANR	1090404	Identifier	this		1090384	0					
ANR	1090405	ReturnType	void		1090384	1					
ANR	1090406	Identifier	FakeCreateThreadReaperCaller :: CallReaper		1090384	2					
ANR	1090407	ParameterList			1090384	3					
ANR	1090408	CFGEntryNode	ENTRY		1090384		True				
ANR	1090409	CFGExitNode	EXIT		1090384		True				
ANR	1090410	Symbol	m_tid		1090384						
ANR	1090411	Symbol	m_exit_status		1090384						
ANR	1090412	Symbol	daemonCore		1090384						
ANR	1090413	Symbol	m_reaper_id		1090384						
ANR	1090414	Function	DaemonCore :: Create_Thread	8749:0:268174:275383							
ANR	1090415	FunctionDef	"DaemonCore :: Create_Thread (ThreadStartFunc start_func , void * arg , Stream * sock , int reaper_id)"		1090414	0					
ANR	1090416	CompoundStatement		8752:0:268280:275383	1090414	0					
ANR	1090417	IfStatement	if ( ( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 ) )		1090414	0					
ANR	1090418	Condition	( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )	8754:6:268317:268398	1090414	0	True				
ANR	1090419	OrExpression	( reaper_id < 1 ) || ( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )		1090414	0		||			
ANR	1090420	RelationalExpression	reaper_id < 1		1090414	0		<			
ANR	1090421	Identifier	reaper_id		1090414	0					
ANR	1090422	PrimaryExpression	1		1090414	1					
ANR	1090423	OrExpression	( reaper_id > maxReap ) || ( reapTable [ reaper_id - 1 ] . num == 0 )		1090414	1		||			
ANR	1090424	RelationalExpression	reaper_id > maxReap		1090414	0		>			
ANR	1090425	Identifier	reaper_id		1090414	0					
ANR	1090426	Identifier	maxReap		1090414	1					
ANR	1090427	EqualityExpression	reapTable [ reaper_id - 1 ] . num == 0		1090414	1		==			
ANR	1090428	MemberAccess	reapTable [ reaper_id - 1 ] . num		1090414	0					
ANR	1090429	ArrayIndexing	reapTable [ reaper_id - 1 ]		1090414	0					
ANR	1090430	Identifier	reapTable		1090414	0					
ANR	1090431	AdditiveExpression	reaper_id - 1		1090414	1		-			
ANR	1090432	Identifier	reaper_id		1090414	0					
ANR	1090433	PrimaryExpression	1		1090414	1					
ANR	1090434	Identifier	num		1090414	1					
ANR	1090435	PrimaryExpression	0		1090414	1					
ANR	1090436	CompoundStatement		4:44:121:121	1090414	1					
ANR	1090437	ExpressionStatement	"dprintf ( D_ALWAYS , ""Create_Thread: invalid reaper_id\\n"" )"	8756:2:268406:268460	1090414	0	True				
ANR	1090438	CallExpression	"dprintf ( D_ALWAYS , ""Create_Thread: invalid reaper_id\\n"" )"		1090414	0					
ANR	1090439	Callee	dprintf		1090414	0					
ANR	1090440	Identifier	dprintf		1090414	0					
ANR	1090441	ArgumentList	D_ALWAYS		1090414	1					
ANR	1090442	Argument	D_ALWAYS		1090414	0					
ANR	1090443	Identifier	D_ALWAYS		1090414	0					
ANR	1090444	Argument	"""Create_Thread: invalid reaper_id\\n"""		1090414	1					
ANR	1090445	PrimaryExpression	"""Create_Thread: invalid reaper_id\\n"""		1090414	0					
ANR	1090446	ReturnStatement	return FALSE ;	8757:2:268464:268476	1090414	1	True				
ANR	1090447	Identifier	FALSE		1090414	0					
ANR	1090448	IfStatement	if ( DoFakeCreateThread ( ) )		1090414	1					
ANR	1090449	Condition	DoFakeCreateThread ( )	8760:5:268487:268506	1090414	0	True				
ANR	1090450	CallExpression	DoFakeCreateThread ( )		1090414	0					
ANR	1090451	Callee	DoFakeCreateThread		1090414	0					
ANR	1090452	Identifier	DoFakeCreateThread		1090414	0					
ANR	1090453	ArgumentList			1090414	1					
ANR	1090454	CompoundStatement		38:2:1142:1249	1090414	1					
ANR	1090455	IdentifierDeclStatement	Stream * s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL ;	8767:2:268783:268838	1090414	0	True				
ANR	1090456	IdentifierDecl	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	0					
ANR	1090457	IdentifierDeclType	Stream *		1090414	0					
ANR	1090458	Identifier	s		1090414	1					
ANR	1090459	AssignmentExpression	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	2		=			
ANR	1090460	Identifier	s		1090414	0					
ANR	1090461	ConditionalExpression	sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	1					
ANR	1090462	Condition	sock		1090414	0					
ANR	1090463	Identifier	sock		1090414	0					
ANR	1090464	CallExpression	sock -> CloneStream ( )		1090414	1					
ANR	1090465	Callee	sock -> CloneStream		1090414	0					
ANR	1090466	PtrMemberAccess	sock -> CloneStream		1090414	0					
ANR	1090467	Identifier	sock		1090414	0					
ANR	1090468	Identifier	CloneStream		1090414	1					
ANR	1090469	ArgumentList			1090414	1					
ANR	1090470	CastExpression	( Stream * ) NULL		1090414	2					
ANR	1090471	CastTarget	Stream *		1090414	0					
ANR	1090472	Identifier	NULL		1090414	1					
ANR	1090473	IdentifierDeclStatement	priv_state saved_priv = get_priv ( ) ;	8769:2:268843:268877	1090414	1	True				
ANR	1090474	IdentifierDecl	saved_priv = get_priv ( )		1090414	0					
ANR	1090475	IdentifierDeclType	priv_state		1090414	0					
ANR	1090476	Identifier	saved_priv		1090414	1					
ANR	1090477	AssignmentExpression	saved_priv = get_priv ( )		1090414	2		=			
ANR	1090478	Identifier	saved_priv		1090414	0					
ANR	1090479	CallExpression	get_priv ( )		1090414	1					
ANR	1090480	Callee	get_priv		1090414	0					
ANR	1090481	Identifier	get_priv		1090414	0					
ANR	1090482	ArgumentList			1090414	1					
ANR	1090483	IdentifierDeclStatement	"int exit_status = start_func ( arg , s ) ;"	8770:2:268881:268916	1090414	2	True				
ANR	1090484	IdentifierDecl	"exit_status = start_func ( arg , s )"		1090414	0					
ANR	1090485	IdentifierDeclType	int		1090414	0					
ANR	1090486	Identifier	exit_status		1090414	1					
ANR	1090487	AssignmentExpression	"exit_status = start_func ( arg , s )"		1090414	2		=			
ANR	1090488	Identifier	exit_status		1090414	0					
ANR	1090489	CallExpression	"start_func ( arg , s )"		1090414	1					
ANR	1090490	Callee	start_func		1090414	0					
ANR	1090491	Identifier	start_func		1090414	0					
ANR	1090492	ArgumentList	arg		1090414	1					
ANR	1090493	Argument	arg		1090414	0					
ANR	1090494	Identifier	arg		1090414	0					
ANR	1090495	Argument	s		1090414	1					
ANR	1090496	Identifier	s		1090414	0					
ANR	1090497	IfStatement	if ( s )		1090414	3					
ANR	1090498	Condition	s	8772:6:268925:268925	1090414	0	True				
ANR	1090499	Identifier	s		1090414	0					
ANR	1090500	Statement	delete	8772:9:268928:268933	1090414	1	True				
ANR	1090501	ExpressionStatement	s	8772:16:268935:268936	1090414	4	True				
ANR	1090502	Identifier	s		1090414	0					
ANR	1090503	ExpressionStatement	exit_status = exit_status << 8	8775:2:269025:269053	1090414	5	True				
ANR	1090504	AssignmentExpression	exit_status = exit_status << 8		1090414	0		=			
ANR	1090505	Identifier	exit_status		1090414	0					
ANR	1090506	ShiftExpression	exit_status << 8		1090414	1		<<			
ANR	1090507	Identifier	exit_status		1090414	0					
ANR	1090508	PrimaryExpression	8		1090414	1					
ANR	1090509	IdentifierDeclStatement	priv_state new_priv = get_priv ( ) ;	8778:2:269065:269097	1090414	6	True				
ANR	1090510	IdentifierDecl	new_priv = get_priv ( )		1090414	0					
ANR	1090511	IdentifierDeclType	priv_state		1090414	0					
ANR	1090512	Identifier	new_priv		1090414	1					
ANR	1090513	AssignmentExpression	new_priv = get_priv ( )		1090414	2		=			
ANR	1090514	Identifier	new_priv		1090414	0					
ANR	1090515	CallExpression	get_priv ( )		1090414	1					
ANR	1090516	Callee	get_priv		1090414	0					
ANR	1090517	Identifier	get_priv		1090414	0					
ANR	1090518	ArgumentList			1090414	1					
ANR	1090519	IfStatement	if ( saved_priv != new_priv )		1090414	7					
ANR	1090520	Condition	saved_priv != new_priv	8779:6:269105:269126	1090414	0	True				
ANR	1090521	EqualityExpression	saved_priv != new_priv		1090414	0		!=			
ANR	1090522	Identifier	saved_priv		1090414	0					
ANR	1090523	Identifier	new_priv		1090414	1					
ANR	1090524	CompoundStatement		29:3:854:913	1090414	1					
ANR	1090525	IdentifierDeclStatement	char const * reaper = reapTable [ reaper_id - 1 ] . handler_descrip ;	8780:3:269135:269194	1090414	0	True				
ANR	1090526	IdentifierDecl	* reaper = reapTable [ reaper_id - 1 ] . handler_descrip		1090414	0					
ANR	1090527	IdentifierDeclType	char const *		1090414	0					
ANR	1090528	Identifier	reaper		1090414	1					
ANR	1090529	AssignmentExpression	* reaper = reapTable [ reaper_id - 1 ] . handler_descrip		1090414	2		=			
ANR	1090530	Identifier	reaper		1090414	0					
ANR	1090531	MemberAccess	reapTable [ reaper_id - 1 ] . handler_descrip		1090414	1					
ANR	1090532	ArrayIndexing	reapTable [ reaper_id - 1 ]		1090414	0					
ANR	1090533	Identifier	reapTable		1090414	0					
ANR	1090534	AdditiveExpression	reaper_id - 1		1090414	1		-			
ANR	1090535	Identifier	reaper_id		1090414	0					
ANR	1090536	PrimaryExpression	1		1090414	1					
ANR	1090537	Identifier	handler_descrip		1090414	1					
ANR	1090538	Statement	dprintf	8781:3:269199:269205	1090414	1	True				
ANR	1090539	Statement	(	8781:10:269206:269206	1090414	2	True				
ANR	1090540	Statement	D_ALWAYS	8781:11:269207:269214	1090414	3	True				
ANR	1090541	Statement	","	8781:19:269215:269215	1090414	4	True				
ANR	1090542	Statement	"""Create_Thread: UNEXPECTED: priv state changed """	8782:5:269222:269269	1090414	5	True				
ANR	1090543	Statement	"""during worker function: %d %d (%s)\\n"""	8783:5:269276:269313	1090414	6	True				
ANR	1090544	Statement	","	8783:43:269314:269314	1090414	7	True				
ANR	1090545	Statement	(	8784:5:269321:269321	1090414	8	True				
ANR	1090546	Statement	int	8784:6:269322:269324	1090414	9	True				
ANR	1090547	Statement	)	8784:9:269325:269325	1090414	10	True				
ANR	1090548	Statement	saved_priv	8784:10:269326:269335	1090414	11	True				
ANR	1090549	Statement	","	8784:20:269336:269336	1090414	12	True				
ANR	1090550	Statement	(	8784:22:269338:269338	1090414	13	True				
ANR	1090551	Statement	int	8784:23:269339:269341	1090414	14	True				
ANR	1090552	Statement	)	8784:26:269342:269342	1090414	15	True				
ANR	1090553	Statement	new_priv	8784:27:269343:269350	1090414	16	True				
ANR	1090554	Statement	","	8784:35:269351:269351	1090414	17	True				
ANR	1090555	Statement	reaper	8785:5:269358:269363	1090414	18	True				
ANR	1090556	Statement	?	8785:12:269365:269365	1090414	19	True				
ANR	1090557	Label	reaper :	8785:14:269367:269374	1090414	20	True				
ANR	1090558	Identifier	reaper		1090414	0					
ANR	1090559	Statement	"""no reaper"""	8785:23:269376:269386	1090414	21	True				
ANR	1090560	Statement	)	8785:35:269388:269388	1090414	22	True				
ANR	1090561	ExpressionStatement		8785:36:269389:269389	1090414	23	True				
ANR	1090562	ExpressionStatement	set_priv ( saved_priv )	8786:3:269394:269414	1090414	24	True				
ANR	1090563	CallExpression	set_priv ( saved_priv )		1090414	0					
ANR	1090564	Callee	set_priv		1090414	0					
ANR	1090565	Identifier	set_priv		1090414	0					
ANR	1090566	ArgumentList	saved_priv		1090414	1					
ANR	1090567	Argument	saved_priv		1090414	0					
ANR	1090568	Identifier	saved_priv		1090414	0					
ANR	1090569	IdentifierDeclStatement	"FakeCreateThreadReaperCaller * reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id ) ;"	8789:2:269423:269530	1090414	8	True				
ANR	1090570	IdentifierDecl	"* reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id )"		1090414	0					
ANR	1090571	IdentifierDeclType	FakeCreateThreadReaperCaller *		1090414	0					
ANR	1090572	Identifier	reaper_caller		1090414	1					
ANR	1090573	AssignmentExpression	"* reaper_caller = new FakeCreateThreadReaperCaller ( exit_status , reaper_id )"		1090414	2		=			
ANR	1090574	Identifier	reaper_caller		1090414	0					
ANR	1090575	Expression	"exit_status , reaper_id"		1090414	1					
ANR	1090576	Identifier	exit_status		1090414	0					
ANR	1090577	Identifier	reaper_id		1090414	1					
ANR	1090578	ReturnStatement	return reaper_caller -> FakeThreadID ( ) ;	8792:2:269535:269571	1090414	9	True				
ANR	1090579	CallExpression	reaper_caller -> FakeThreadID ( )		1090414	0					
ANR	1090580	Callee	reaper_caller -> FakeThreadID		1090414	0					
ANR	1090581	PtrMemberAccess	reaper_caller -> FakeThreadID		1090414	0					
ANR	1090582	Identifier	reaper_caller		1090414	0					
ANR	1090583	Identifier	FakeThreadID		1090414	1					
ANR	1090584	ArgumentList			1090414	1					
ANR	1090585	ExpressionStatement	( void ) InfoCommandSinfulString ( )	8798:1:269789:269820	1090414	2	True				
ANR	1090586	CastExpression	( void ) InfoCommandSinfulString ( )		1090414	0					
ANR	1090587	CastTarget	void		1090414	0					
ANR	1090588	CallExpression	InfoCommandSinfulString ( )		1090414	1					
ANR	1090589	Callee	InfoCommandSinfulString		1090414	0					
ANR	1090590	Identifier	InfoCommandSinfulString		1090414	0					
ANR	1090591	ArgumentList			1090414	1					
ANR	1090592	IdentifierDeclStatement	unsigned tid ;	8801:1:269837:269849	1090414	3	True				
ANR	1090593	IdentifierDecl	tid		1090414	0					
ANR	1090594	IdentifierDeclType	unsigned		1090414	0					
ANR	1090595	Identifier	tid		1090414	1					
ANR	1090596	IdentifierDeclStatement	HANDLE hThread ;	8802:1:269852:269866	1090414	4	True				
ANR	1090597	IdentifierDecl	hThread		1090414	0					
ANR	1090598	IdentifierDeclType	HANDLE		1090414	0					
ANR	1090599	Identifier	hThread		1090414	1					
ANR	1090600	IdentifierDeclStatement	priv_state priv ;	8803:1:269869:269884	1090414	5	True				
ANR	1090601	IdentifierDecl	priv		1090414	0					
ANR	1090602	IdentifierDeclType	priv_state		1090414	0					
ANR	1090603	Identifier	priv		1090414	1					
ANR	1090604	IdentifierDeclStatement	Stream * s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL ;	8805:1:269960:270015	1090414	6	True				
ANR	1090605	IdentifierDecl	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	0					
ANR	1090606	IdentifierDeclType	Stream *		1090414	0					
ANR	1090607	Identifier	s		1090414	1					
ANR	1090608	AssignmentExpression	* s = sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	2		=			
ANR	1090609	Identifier	s		1090414	0					
ANR	1090610	ConditionalExpression	sock ? sock -> CloneStream ( ) : ( Stream * ) NULL		1090414	1					
ANR	1090611	Condition	sock		1090414	0					
ANR	1090612	Identifier	sock		1090414	0					
ANR	1090613	CallExpression	sock -> CloneStream ( )		1090414	1					
ANR	1090614	Callee	sock -> CloneStream		1090414	0					
ANR	1090615	PtrMemberAccess	sock -> CloneStream		1090414	0					
ANR	1090616	Identifier	sock		1090414	0					
ANR	1090617	Identifier	CloneStream		1090414	1					
ANR	1090618	ArgumentList			1090414	1					
ANR	1090619	CastExpression	( Stream * ) NULL		1090414	2					
ANR	1090620	CastTarget	Stream *		1090414	0					
ANR	1090621	Identifier	NULL		1090414	1					
ANR	1090622	IdentifierDeclStatement	thread_info * tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) ) ;	8807:1:270019:270082	1090414	7	True				
ANR	1090623	IdentifierDecl	* tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) )		1090414	0					
ANR	1090624	IdentifierDeclType	thread_info *		1090414	0					
ANR	1090625	Identifier	tinfo		1090414	1					
ANR	1090626	AssignmentExpression	* tinfo = ( thread_info * ) malloc ( sizeof ( thread_info ) )		1090414	2		=			
ANR	1090627	Identifier	tinfo		1090414	0					
ANR	1090628	CastExpression	( thread_info * ) malloc ( sizeof ( thread_info ) )		1090414	1					
ANR	1090629	CastTarget	thread_info *		1090414	0					
ANR	1090630	CallExpression	malloc ( sizeof ( thread_info ) )		1090414	1					
ANR	1090631	Callee	malloc		1090414	0					
ANR	1090632	Identifier	malloc		1090414	0					
ANR	1090633	ArgumentList	sizeof ( thread_info )		1090414	1					
ANR	1090634	Argument	sizeof ( thread_info )		1090414	0					
ANR	1090635	SizeofExpression	sizeof ( thread_info )		1090414	0					
ANR	1090636	Sizeof	sizeof		1090414	0					
ANR	1090637	SizeofOperand	thread_info		1090414	1					
ANR	1090638	ExpressionStatement	tinfo -> start_func = start_func	8808:1:270085:270115	1090414	8	True				
ANR	1090639	AssignmentExpression	tinfo -> start_func = start_func		1090414	0		=			
ANR	1090640	PtrMemberAccess	tinfo -> start_func		1090414	0					
ANR	1090641	Identifier	tinfo		1090414	0					
ANR	1090642	Identifier	start_func		1090414	1					
ANR	1090643	Identifier	start_func		1090414	1					
ANR	1090644	ExpressionStatement	tinfo -> arg = arg	8809:1:270118:270134	1090414	9	True				
ANR	1090645	AssignmentExpression	tinfo -> arg = arg		1090414	0		=			
ANR	1090646	PtrMemberAccess	tinfo -> arg		1090414	0					
ANR	1090647	Identifier	tinfo		1090414	0					
ANR	1090648	Identifier	arg		1090414	1					
ANR	1090649	Identifier	arg		1090414	1					
ANR	1090650	ExpressionStatement	tinfo -> sock = s	8810:1:270137:270152	1090414	10	True				
ANR	1090651	AssignmentExpression	tinfo -> sock = s		1090414	0		=			
ANR	1090652	PtrMemberAccess	tinfo -> sock		1090414	0					
ANR	1090653	Identifier	tinfo		1090414	0					
ANR	1090654	Identifier	sock		1090414	1					
ANR	1090655	Identifier	s		1090414	1					
ANR	1090656	ExpressionStatement	priv = set_condor_priv ( )	8814:1:270358:270382	1090414	11	True				
ANR	1090657	AssignmentExpression	priv = set_condor_priv ( )		1090414	0		=			
ANR	1090658	Identifier	priv		1090414	0					
ANR	1090659	CallExpression	set_condor_priv ( )		1090414	1					
ANR	1090660	Callee	set_condor_priv		1090414	0					
ANR	1090661	Identifier	set_condor_priv		1090414	0					
ANR	1090662	ArgumentList			1090414	1					
ANR	1090663	ExpressionStatement	set_priv ( priv )	8815:1:270385:270399	1090414	12	True				
ANR	1090664	CallExpression	set_priv ( priv )		1090414	0					
ANR	1090665	Callee	set_priv		1090414	0					
ANR	1090666	Identifier	set_priv		1090414	0					
ANR	1090667	ArgumentList	priv		1090414	1					
ANR	1090668	Argument	priv		1090414	0					
ANR	1090669	Identifier	priv		1090414	0					
ANR	1090670	ExpressionStatement	tinfo -> priv = priv	8816:1:270402:270420	1090414	13	True				
ANR	1090671	AssignmentExpression	tinfo -> priv = priv		1090414	0		=			
ANR	1090672	PtrMemberAccess	tinfo -> priv		1090414	0					
ANR	1090673	Identifier	tinfo		1090414	0					
ANR	1090674	Identifier	priv		1090414	1					
ANR	1090675	Identifier	priv		1090414	1					
ANR	1090676	ExpressionStatement	"hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"	8818:1:270447:270571	1090414	14	True				
ANR	1090677	AssignmentExpression	"hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		1090414	0		=			
ANR	1090678	Identifier	hThread		1090414	0					
ANR	1090679	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		1090414	1					
ANR	1090680	CastTarget	HANDLE		1090414	0					
ANR	1090681	CallExpression	"_beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) win32_thread_start_func , ( void * ) tinfo , 0 , & tid )"		1090414	1					
ANR	1090682	Callee	_beginthreadex		1090414	0					
ANR	1090683	Identifier	_beginthreadex		1090414	0					
ANR	1090684	ArgumentList	NULL		1090414	1					
ANR	1090685	Argument	NULL		1090414	0					
ANR	1090686	Identifier	NULL		1090414	0					
ANR	1090687	Argument	1024		1090414	1					
ANR	1090688	PrimaryExpression	1024		1090414	0					
ANR	1090689	Argument	( CRT_THREAD_HANDLER ) win32_thread_start_func		1090414	2					
ANR	1090690	CastExpression	( CRT_THREAD_HANDLER ) win32_thread_start_func		1090414	0					
ANR	1090691	CastTarget	CRT_THREAD_HANDLER		1090414	0					
ANR	1090692	Identifier	win32_thread_start_func		1090414	1					
ANR	1090693	Argument	( void * ) tinfo		1090414	3					
ANR	1090694	CastExpression	( void * ) tinfo		1090414	0					
ANR	1090695	CastTarget	void *		1090414	0					
ANR	1090696	Identifier	tinfo		1090414	1					
ANR	1090697	Argument	0		1090414	4					
ANR	1090698	PrimaryExpression	0		1090414	0					
ANR	1090699	Argument	& tid		1090414	5					
ANR	1090700	UnaryOperationExpression	& tid		1090414	0					
ANR	1090701	UnaryOperator	&		1090414	0					
ANR	1090702	Identifier	tid		1090414	1					
ANR	1090703	IfStatement	if ( hThread == NULL )		1090414	15					
ANR	1090704	Condition	hThread == NULL	8821:6:270579:270593	1090414	0	True				
ANR	1090705	EqualityExpression	hThread == NULL		1090414	0		==			
ANR	1090706	Identifier	hThread		1090414	0					
ANR	1090707	Identifier	NULL		1090414	1					
ANR	1090708	CompoundStatement		70:24:2316:2316	1090414	1					
ANR	1090709	ExpressionStatement	"EXCEPT ( ""CreateThread failed"" )"	8822:2:270601:270630	1090414	0	True				
ANR	1090710	CallExpression	"EXCEPT ( ""CreateThread failed"" )"		1090414	0					
ANR	1090711	Callee	EXCEPT		1090414	0					
ANR	1090712	Identifier	EXCEPT		1090414	0					
ANR	1090713	ArgumentList	"""CreateThread failed"""		1090414	1					
ANR	1090714	Argument	"""CreateThread failed"""		1090414	0					
ANR	1090715	PrimaryExpression	"""CreateThread failed"""		1090414	0					
ANR	1090716	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Create_Thread: created new thread, tid=%d\\n"" , tid )"	8916:1:274077:274148	1090414	16	True				
ANR	1090717	CallExpression	"dprintf ( D_DAEMONCORE , ""Create_Thread: created new thread, tid=%d\\n"" , tid )"		1090414	0					
ANR	1090718	Callee	dprintf		1090414	0					
ANR	1090719	Identifier	dprintf		1090414	0					
ANR	1090720	ArgumentList	D_DAEMONCORE		1090414	1					
ANR	1090721	Argument	D_DAEMONCORE		1090414	0					
ANR	1090722	Identifier	D_DAEMONCORE		1090414	0					
ANR	1090723	Argument	"""Create_Thread: created new thread, tid=%d\\n"""		1090414	1					
ANR	1090724	PrimaryExpression	"""Create_Thread: created new thread, tid=%d\\n"""		1090414	0					
ANR	1090725	Argument	tid		1090414	2					
ANR	1090726	Identifier	tid		1090414	0					
ANR	1090727	Statement	PidEntry	8923:1:274461:274468	1090414	17	True				
ANR	1090728	Statement	*	8923:10:274470:274470	1090414	18	True				
ANR	1090729	Statement	pidtmp	8923:11:274471:274476	1090414	19	True				
ANR	1090730	Statement	=	8923:18:274478:274478	1090414	20	True				
ANR	1090731	Statement	new	8923:20:274480:274482	1090414	21	True				
ANR	1090732	ExpressionStatement	PidEntry	8923:24:274484:274492	1090414	22	True				
ANR	1090733	Identifier	PidEntry		1090414	0					
ANR	1090734	ExpressionStatement	pidtmp -> new_process_group = FALSE	8924:1:274495:274528	1090414	23	True				
ANR	1090735	AssignmentExpression	pidtmp -> new_process_group = FALSE		1090414	0		=			
ANR	1090736	PtrMemberAccess	pidtmp -> new_process_group		1090414	0					
ANR	1090737	Identifier	pidtmp		1090414	0					
ANR	1090738	Identifier	new_process_group		1090414	1					
ANR	1090739	Identifier	FALSE		1090414	1					
ANR	1090740	ExpressionStatement	pidtmp -> is_local = TRUE	8925:1:274531:274554	1090414	24	True				
ANR	1090741	AssignmentExpression	pidtmp -> is_local = TRUE		1090414	0		=			
ANR	1090742	PtrMemberAccess	pidtmp -> is_local		1090414	0					
ANR	1090743	Identifier	pidtmp		1090414	0					
ANR	1090744	Identifier	is_local		1090414	1					
ANR	1090745	Identifier	TRUE		1090414	1					
ANR	1090746	ExpressionStatement	pidtmp -> parent_is_local = TRUE	8926:1:274557:274587	1090414	25	True				
ANR	1090747	AssignmentExpression	pidtmp -> parent_is_local = TRUE		1090414	0		=			
ANR	1090748	PtrMemberAccess	pidtmp -> parent_is_local		1090414	0					
ANR	1090749	Identifier	pidtmp		1090414	0					
ANR	1090750	Identifier	parent_is_local		1090414	1					
ANR	1090751	Identifier	TRUE		1090414	1					
ANR	1090752	ExpressionStatement	pidtmp -> reaper_id = reaper_id	8927:1:274590:274619	1090414	26	True				
ANR	1090753	AssignmentExpression	pidtmp -> reaper_id = reaper_id		1090414	0		=			
ANR	1090754	PtrMemberAccess	pidtmp -> reaper_id		1090414	0					
ANR	1090755	Identifier	pidtmp		1090414	0					
ANR	1090756	Identifier	reaper_id		1090414	1					
ANR	1090757	Identifier	reaper_id		1090414	1					
ANR	1090758	ExpressionStatement	pidtmp -> hung_tid = - 1	8928:1:274622:274643	1090414	27	True				
ANR	1090759	AssignmentExpression	pidtmp -> hung_tid = - 1		1090414	0		=			
ANR	1090760	PtrMemberAccess	pidtmp -> hung_tid		1090414	0					
ANR	1090761	Identifier	pidtmp		1090414	0					
ANR	1090762	Identifier	hung_tid		1090414	1					
ANR	1090763	UnaryOperationExpression	- 1		1090414	1					
ANR	1090764	UnaryOperator	-		1090414	0					
ANR	1090765	PrimaryExpression	1		1090414	1					
ANR	1090766	ExpressionStatement	pidtmp -> was_not_responding = FALSE	8929:1:274646:274680	1090414	28	True				
ANR	1090767	AssignmentExpression	pidtmp -> was_not_responding = FALSE		1090414	0		=			
ANR	1090768	PtrMemberAccess	pidtmp -> was_not_responding		1090414	0					
ANR	1090769	Identifier	pidtmp		1090414	0					
ANR	1090770	Identifier	was_not_responding		1090414	1					
ANR	1090771	Identifier	FALSE		1090414	1					
ANR	1090772	ExpressionStatement	pidtmp -> pid = tid	8936:1:275007:275024	1090414	29	True				
ANR	1090773	AssignmentExpression	pidtmp -> pid = tid		1090414	0		=			
ANR	1090774	PtrMemberAccess	pidtmp -> pid		1090414	0					
ANR	1090775	Identifier	pidtmp		1090414	0					
ANR	1090776	Identifier	pid		1090414	1					
ANR	1090777	Identifier	tid		1090414	1					
ANR	1090778	ExpressionStatement	pidtmp -> hProcess = NULL	8937:1:275027:275050	1090414	30	True				
ANR	1090779	AssignmentExpression	pidtmp -> hProcess = NULL		1090414	0		=			
ANR	1090780	PtrMemberAccess	pidtmp -> hProcess		1090414	0					
ANR	1090781	Identifier	pidtmp		1090414	0					
ANR	1090782	Identifier	hProcess		1090414	1					
ANR	1090783	Identifier	NULL		1090414	1					
ANR	1090784	ExpressionStatement	pidtmp -> hThread = hThread	8938:1:275100:275125	1090414	31	True				
ANR	1090785	AssignmentExpression	pidtmp -> hThread = hThread		1090414	0		=			
ANR	1090786	PtrMemberAccess	pidtmp -> hThread		1090414	0					
ANR	1090787	Identifier	pidtmp		1090414	0					
ANR	1090788	Identifier	hThread		1090414	1					
ANR	1090789	Identifier	hThread		1090414	1					
ANR	1090790	ExpressionStatement	pidtmp -> pipeEnd = NULL	8939:1:275128:275150	1090414	32	True				
ANR	1090791	AssignmentExpression	pidtmp -> pipeEnd = NULL		1090414	0		=			
ANR	1090792	PtrMemberAccess	pidtmp -> pipeEnd		1090414	0					
ANR	1090793	Identifier	pidtmp		1090414	0					
ANR	1090794	Identifier	pipeEnd		1090414	1					
ANR	1090795	Identifier	NULL		1090414	1					
ANR	1090796	ExpressionStatement	pidtmp -> tid = tid	8940:1:275153:275170	1090414	33	True				
ANR	1090797	AssignmentExpression	pidtmp -> tid = tid		1090414	0		=			
ANR	1090798	PtrMemberAccess	pidtmp -> tid		1090414	0					
ANR	1090799	Identifier	pidtmp		1090414	0					
ANR	1090800	Identifier	tid		1090414	1					
ANR	1090801	Identifier	tid		1090414	1					
ANR	1090802	ExpressionStatement	pidtmp -> hWnd = 0	8941:1:275173:275189	1090414	34	True				
ANR	1090803	AssignmentExpression	pidtmp -> hWnd = 0		1090414	0		=			
ANR	1090804	PtrMemberAccess	pidtmp -> hWnd		1090414	0					
ANR	1090805	Identifier	pidtmp		1090414	0					
ANR	1090806	Identifier	hWnd		1090414	1					
ANR	1090807	PrimaryExpression	0		1090414	1					
ANR	1090808	ExpressionStatement	pidtmp -> deallocate = 0	8942:1:275192:275214	1090414	35	True				
ANR	1090809	AssignmentExpression	pidtmp -> deallocate = 0		1090414	0		=			
ANR	1090810	PtrMemberAccess	pidtmp -> deallocate		1090414	0					
ANR	1090811	Identifier	pidtmp		1090414	0					
ANR	1090812	Identifier	deallocate		1090414	1					
ANR	1090813	PrimaryExpression	0		1090414	1					
ANR	1090814	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( tid , pidtmp ) ;"	8946:1:275250:275298	1090414	36	True				
ANR	1090815	IdentifierDecl	"insert_result = pidTable -> insert ( tid , pidtmp )"		1090414	0					
ANR	1090816	IdentifierDeclType	int		1090414	0					
ANR	1090817	Identifier	insert_result		1090414	1					
ANR	1090818	AssignmentExpression	"insert_result = pidTable -> insert ( tid , pidtmp )"		1090414	2		=			
ANR	1090819	Identifier	insert_result		1090414	0					
ANR	1090820	CallExpression	"pidTable -> insert ( tid , pidtmp )"		1090414	1					
ANR	1090821	Callee	pidTable -> insert		1090414	0					
ANR	1090822	PtrMemberAccess	pidTable -> insert		1090414	0					
ANR	1090823	Identifier	pidTable		1090414	0					
ANR	1090824	Identifier	insert		1090414	1					
ANR	1090825	ArgumentList	tid		1090414	1					
ANR	1090826	Argument	tid		1090414	0					
ANR	1090827	Identifier	tid		1090414	0					
ANR	1090828	Argument	pidtmp		1090414	1					
ANR	1090829	Identifier	pidtmp		1090414	0					
ANR	1090830	ExpressionStatement	assert ( insert_result == 0 )	8947:1:275301:275329	1090414	37	True				
ANR	1090831	CallExpression	assert ( insert_result == 0 )		1090414	0					
ANR	1090832	Callee	assert		1090414	0					
ANR	1090833	Identifier	assert		1090414	0					
ANR	1090834	ArgumentList	insert_result == 0		1090414	1					
ANR	1090835	Argument	insert_result == 0		1090414	0					
ANR	1090836	EqualityExpression	insert_result == 0		1090414	0		==			
ANR	1090837	Identifier	insert_result		1090414	0					
ANR	1090838	PrimaryExpression	0		1090414	1					
ANR	1090839	ExpressionStatement	WatchPid ( pidtmp )	8949:1:275345:275361	1090414	38	True				
ANR	1090840	CallExpression	WatchPid ( pidtmp )		1090414	0					
ANR	1090841	Callee	WatchPid		1090414	0					
ANR	1090842	Identifier	WatchPid		1090414	0					
ANR	1090843	ArgumentList	pidtmp		1090414	1					
ANR	1090844	Argument	pidtmp		1090414	0					
ANR	1090845	Identifier	pidtmp		1090414	0					
ANR	1090846	ReturnStatement	return tid ;	8951:1:275371:275381	1090414	39	True				
ANR	1090847	Identifier	tid		1090414	0					
ANR	1090848	ReturnType	int		1090414	1					
ANR	1090849	Identifier	DaemonCore :: Create_Thread		1090414	2					
ANR	1090850	ParameterList	"ThreadStartFunc start_func , void * arg , Stream * sock , int reaper_id"		1090414	3					
ANR	1090851	Parameter	ThreadStartFunc start_func	8750:26:268204:268229	1090414	0	True				
ANR	1090852	ParameterType	ThreadStartFunc		1090414	0					
ANR	1090853	Identifier	start_func		1090414	1					
ANR	1090854	Parameter	void * arg	8750:54:268232:268240	1090414	1	True				
ANR	1090855	ParameterType	void *		1090414	0					
ANR	1090856	Identifier	arg		1090414	1					
ANR	1090857	Parameter	Stream * sock	8750:65:268243:268254	1090414	2	True				
ANR	1090858	ParameterType	Stream *		1090414	0					
ANR	1090859	Identifier	sock		1090414	1					
ANR	1090860	Parameter	int reaper_id	8751:8:268265:268277	1090414	3	True				
ANR	1090861	ParameterType	int		1090414	0					
ANR	1090862	Identifier	reaper_id		1090414	1					
ANR	1090863	CFGEntryNode	ENTRY		1090414		True				
ANR	1090864	CFGExitNode	EXIT		1090414		True				
ANR	1090865	Symbol	pidtmp -> pipeEnd		1090414						
ANR	1090866	Symbol	set_condor_priv		1090414						
ANR	1090867	Symbol	win32_thread_start_func		1090414						
ANR	1090868	Symbol	reapTable [ reaper_id - 1 ] . handler_descrip		1090414						
ANR	1090869	Symbol	tinfo -> sock		1090414						
ANR	1090870	Symbol	reaper		1090414						
ANR	1090871	Symbol	_beginthreadex		1090414						
ANR	1090872	Symbol	tid		1090414						
ANR	1090873	Symbol	tinfo -> start_func		1090414						
ANR	1090874	Symbol	tinfo -> priv		1090414						
ANR	1090875	Symbol	priv		1090414						
ANR	1090876	Symbol	reaper_caller		1090414						
ANR	1090877	Symbol	NULL		1090414						
ANR	1090878	Symbol	pidtmp -> hProcess		1090414						
ANR	1090879	Symbol	* reaper_caller		1090414						
ANR	1090880	Symbol	reapTable [ reaper_id - 1 ] . num		1090414						
ANR	1090881	Symbol	TRUE		1090414						
ANR	1090882	Symbol	sock -> CloneStream		1090414						
ANR	1090883	Symbol	reaper_caller -> FakeThreadID		1090414						
ANR	1090884	Symbol	* pidtmp		1090414						
ANR	1090885	Symbol	& tid		1090414						
ANR	1090886	Symbol	start_func		1090414						
ANR	1090887	Symbol	reapTable		1090414						
ANR	1090888	Symbol	pidtmp -> reaper_id		1090414						
ANR	1090889	Symbol	* reaper_id		1090414						
ANR	1090890	Symbol	tinfo		1090414						
ANR	1090891	Symbol	get_priv		1090414						
ANR	1090892	Symbol	pidtmp		1090414						
ANR	1090893	Symbol	pidtmp -> is_local		1090414						
ANR	1090894	Symbol	* pidTable		1090414						
ANR	1090895	Symbol	exit_status		1090414						
ANR	1090896	Symbol	pidtmp -> was_not_responding		1090414						
ANR	1090897	Symbol	pidtmp -> deallocate		1090414						
ANR	1090898	Symbol	pidtmp -> new_process_group		1090414						
ANR	1090899	Symbol	DoFakeCreateThread		1090414						
ANR	1090900	Symbol	pidtmp -> hung_tid		1090414						
ANR	1090901	Symbol	arg		1090414						
ANR	1090902	Symbol	* tinfo		1090414						
ANR	1090903	Symbol	hThread		1090414						
ANR	1090904	Symbol	* sock		1090414						
ANR	1090905	Symbol	pidtmp -> hWnd		1090414						
ANR	1090906	Symbol	pidTable		1090414						
ANR	1090907	Symbol	malloc		1090414						
ANR	1090908	Symbol	reaper_id		1090414						
ANR	1090909	Symbol	D_DAEMONCORE		1090414						
ANR	1090910	Symbol	pidTable -> insert		1090414						
ANR	1090911	Symbol	D_ALWAYS		1090414						
ANR	1090912	Symbol	maxReap		1090414						
ANR	1090913	Symbol	tinfo -> arg		1090414						
ANR	1090914	Symbol	pidtmp -> tid		1090414						
ANR	1090915	Symbol	insert_result		1090414						
ANR	1090916	Symbol	pidtmp -> pid		1090414						
ANR	1090917	Symbol	sock		1090414						
ANR	1090918	Symbol	s		1090414						
ANR	1090919	Symbol	pidtmp -> hThread		1090414						
ANR	1090920	Symbol	saved_priv		1090414						
ANR	1090921	Symbol	new_priv		1090414						
ANR	1090922	Symbol	* reapTable		1090414						
ANR	1090923	Symbol	FALSE		1090414						
ANR	1090924	Symbol	pidtmp -> parent_is_local		1090414						
ANR	1090925	Function	DaemonCore :: Kill_Thread	8954:0:275386:276045							
ANR	1090926	FunctionDef	DaemonCore :: Kill_Thread (int tid)		1090925	0					
ANR	1090927	CompoundStatement		8956:0:275423:276045	1090925	0					
ANR	1090928	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Kill_Thread(%d)\\n"" , tid )"	8957:1:275426:275491	1090925	0	True				
ANR	1090929	CallExpression	"dprintf ( D_DAEMONCORE , ""called DaemonCore::Kill_Thread(%d)\\n"" , tid )"		1090925	0					
ANR	1090930	Callee	dprintf		1090925	0					
ANR	1090931	Identifier	dprintf		1090925	0					
ANR	1090932	ArgumentList	D_DAEMONCORE		1090925	1					
ANR	1090933	Argument	D_DAEMONCORE		1090925	0					
ANR	1090934	Identifier	D_DAEMONCORE		1090925	0					
ANR	1090935	Argument	"""called DaemonCore::Kill_Thread(%d)\\n"""		1090925	1					
ANR	1090936	PrimaryExpression	"""called DaemonCore::Kill_Thread(%d)\\n"""		1090925	0					
ANR	1090937	Argument	tid		1090925	2					
ANR	1090938	Identifier	tid		1090925	0					
ANR	1090939	ReturnStatement	return 1 ;	8967:1:275869:275877	1090925	1	True				
ANR	1090940	PrimaryExpression	1		1090925	0					
ANR	1090941	ReturnType	int		1090925	1					
ANR	1090942	Identifier	DaemonCore :: Kill_Thread		1090925	2					
ANR	1090943	ParameterList	int tid		1090925	3					
ANR	1090944	Parameter	int tid	8955:24:275414:275420	1090925	0	True				
ANR	1090945	ParameterType	int		1090925	0					
ANR	1090946	Identifier	tid		1090925	1					
ANR	1090947	CFGEntryNode	ENTRY		1090925		True				
ANR	1090948	CFGExitNode	EXIT		1090925		True				
ANR	1090949	Symbol	D_DAEMONCORE		1090925						
ANR	1090950	Symbol	tid		1090925						
ANR	1090951	Function	DaemonCore :: Get_Family_Usage	8976:0:276048:276213							
ANR	1090952	FunctionDef	"DaemonCore :: Get_Family_Usage (pid_t pid , ProcFamilyUsage & usage , bool full)"		1090951	0					
ANR	1090953	CompoundStatement		8978:0:276127:276213	1090951	0					
ANR	1090954	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8979:1:276130:276159	1090951	0	True				
ANR	1090955	CallExpression	ASSERT ( m_proc_family != NULL )		1090951	0					
ANR	1090956	Callee	ASSERT		1090951	0					
ANR	1090957	Identifier	ASSERT		1090951	0					
ANR	1090958	ArgumentList	m_proc_family != NULL		1090951	1					
ANR	1090959	Argument	m_proc_family != NULL		1090951	0					
ANR	1090960	EqualityExpression	m_proc_family != NULL		1090951	0		!=			
ANR	1090961	Identifier	m_proc_family		1090951	0					
ANR	1090962	Identifier	NULL		1090951	1					
ANR	1090963	ReturnStatement	"return m_proc_family -> get_usage ( pid , usage , full ) ;"	8980:1:276162:276211	1090951	1	True				
ANR	1090964	CallExpression	"m_proc_family -> get_usage ( pid , usage , full )"		1090951	0					
ANR	1090965	Callee	m_proc_family -> get_usage		1090951	0					
ANR	1090966	PtrMemberAccess	m_proc_family -> get_usage		1090951	0					
ANR	1090967	Identifier	m_proc_family		1090951	0					
ANR	1090968	Identifier	get_usage		1090951	1					
ANR	1090969	ArgumentList	pid		1090951	1					
ANR	1090970	Argument	pid		1090951	0					
ANR	1090971	Identifier	pid		1090951	0					
ANR	1090972	Argument	usage		1090951	1					
ANR	1090973	Identifier	usage		1090951	0					
ANR	1090974	Argument	full		1090951	2					
ANR	1090975	Identifier	full		1090951	0					
ANR	1090976	ReturnType	int		1090951	1					
ANR	1090977	Identifier	DaemonCore :: Get_Family_Usage		1090951	2					
ANR	1090978	ParameterList	"pid_t pid , ProcFamilyUsage & usage , bool full"		1090951	3					
ANR	1090979	Parameter	pid_t pid	8977:29:276081:276089	1090951	0	True				
ANR	1090980	ParameterType	pid_t		1090951	0					
ANR	1090981	Identifier	pid		1090951	1					
ANR	1090982	Parameter	ProcFamilyUsage & usage	8977:40:276092:276113	1090951	1	True				
ANR	1090983	ParameterType	ProcFamilyUsage &		1090951	0					
ANR	1090984	Identifier	usage		1090951	1					
ANR	1090985	Parameter	bool full	8977:64:276116:276124	1090951	2	True				
ANR	1090986	ParameterType	bool		1090951	0					
ANR	1090987	Identifier	full		1090951	1					
ANR	1090988	CFGEntryNode	ENTRY		1090951		True				
ANR	1090989	CFGExitNode	EXIT		1090951		True				
ANR	1090990	Symbol	NULL		1090951						
ANR	1090991	Symbol	usage		1090951						
ANR	1090992	Symbol	pid		1090951						
ANR	1090993	Symbol	m_proc_family		1090951						
ANR	1090994	Symbol	m_proc_family -> get_usage		1090951						
ANR	1090995	Symbol	full		1090951						
ANR	1090996	Symbol	* m_proc_family		1090951						
ANR	1090997	Function	DaemonCore :: Suspend_Family	8983:0:276216:276336							
ANR	1090998	FunctionDef	DaemonCore :: Suspend_Family (pid_t pid)		1090997	0					
ANR	1090999	CompoundStatement		8985:0:276258:276336	1090997	0					
ANR	1091000	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8986:1:276261:276290	1090997	0	True				
ANR	1091001	CallExpression	ASSERT ( m_proc_family != NULL )		1090997	0					
ANR	1091002	Callee	ASSERT		1090997	0					
ANR	1091003	Identifier	ASSERT		1090997	0					
ANR	1091004	ArgumentList	m_proc_family != NULL		1090997	1					
ANR	1091005	Argument	m_proc_family != NULL		1090997	0					
ANR	1091006	EqualityExpression	m_proc_family != NULL		1090997	0		!=			
ANR	1091007	Identifier	m_proc_family		1090997	0					
ANR	1091008	Identifier	NULL		1090997	1					
ANR	1091009	ReturnStatement	return m_proc_family -> suspend_family ( pid ) ;	8987:1:276293:276334	1090997	1	True				
ANR	1091010	CallExpression	m_proc_family -> suspend_family ( pid )		1090997	0					
ANR	1091011	Callee	m_proc_family -> suspend_family		1090997	0					
ANR	1091012	PtrMemberAccess	m_proc_family -> suspend_family		1090997	0					
ANR	1091013	Identifier	m_proc_family		1090997	0					
ANR	1091014	Identifier	suspend_family		1090997	1					
ANR	1091015	ArgumentList	pid		1090997	1					
ANR	1091016	Argument	pid		1090997	0					
ANR	1091017	Identifier	pid		1090997	0					
ANR	1091018	ReturnType	int		1090997	1					
ANR	1091019	Identifier	DaemonCore :: Suspend_Family		1090997	2					
ANR	1091020	ParameterList	pid_t pid		1090997	3					
ANR	1091021	Parameter	pid_t pid	8984:27:276247:276255	1090997	0	True				
ANR	1091022	ParameterType	pid_t		1090997	0					
ANR	1091023	Identifier	pid		1090997	1					
ANR	1091024	CFGEntryNode	ENTRY		1090997		True				
ANR	1091025	CFGExitNode	EXIT		1090997		True				
ANR	1091026	Symbol	NULL		1090997						
ANR	1091027	Symbol	m_proc_family -> suspend_family		1090997						
ANR	1091028	Symbol	pid		1090997						
ANR	1091029	Symbol	m_proc_family		1090997						
ANR	1091030	Symbol	* m_proc_family		1090997						
ANR	1091031	Function	DaemonCore :: Continue_Family	8990:0:276339:276461							
ANR	1091032	FunctionDef	DaemonCore :: Continue_Family (pid_t pid)		1091031	0					
ANR	1091033	CompoundStatement		8992:0:276382:276461	1091031	0					
ANR	1091034	ExpressionStatement	ASSERT ( m_proc_family != NULL )	8993:1:276385:276414	1091031	0	True				
ANR	1091035	CallExpression	ASSERT ( m_proc_family != NULL )		1091031	0					
ANR	1091036	Callee	ASSERT		1091031	0					
ANR	1091037	Identifier	ASSERT		1091031	0					
ANR	1091038	ArgumentList	m_proc_family != NULL		1091031	1					
ANR	1091039	Argument	m_proc_family != NULL		1091031	0					
ANR	1091040	EqualityExpression	m_proc_family != NULL		1091031	0		!=			
ANR	1091041	Identifier	m_proc_family		1091031	0					
ANR	1091042	Identifier	NULL		1091031	1					
ANR	1091043	ReturnStatement	return m_proc_family -> continue_family ( pid ) ;	8994:1:276417:276459	1091031	1	True				
ANR	1091044	CallExpression	m_proc_family -> continue_family ( pid )		1091031	0					
ANR	1091045	Callee	m_proc_family -> continue_family		1091031	0					
ANR	1091046	PtrMemberAccess	m_proc_family -> continue_family		1091031	0					
ANR	1091047	Identifier	m_proc_family		1091031	0					
ANR	1091048	Identifier	continue_family		1091031	1					
ANR	1091049	ArgumentList	pid		1091031	1					
ANR	1091050	Argument	pid		1091031	0					
ANR	1091051	Identifier	pid		1091031	0					
ANR	1091052	ReturnType	int		1091031	1					
ANR	1091053	Identifier	DaemonCore :: Continue_Family		1091031	2					
ANR	1091054	ParameterList	pid_t pid		1091031	3					
ANR	1091055	Parameter	pid_t pid	8991:28:276371:276379	1091031	0	True				
ANR	1091056	ParameterType	pid_t		1091031	0					
ANR	1091057	Identifier	pid		1091031	1					
ANR	1091058	CFGEntryNode	ENTRY		1091031		True				
ANR	1091059	CFGExitNode	EXIT		1091031		True				
ANR	1091060	Symbol	m_proc_family -> continue_family		1091031						
ANR	1091061	Symbol	NULL		1091031						
ANR	1091062	Symbol	pid		1091031						
ANR	1091063	Symbol	m_proc_family		1091031						
ANR	1091064	Symbol	* m_proc_family		1091031						
ANR	1091065	Function	DaemonCore :: Kill_Family	8997:0:276464:276578							
ANR	1091066	FunctionDef	DaemonCore :: Kill_Family (pid_t pid)		1091065	0					
ANR	1091067	CompoundStatement		8999:0:276503:276578	1091065	0					
ANR	1091068	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9000:1:276506:276535	1091065	0	True				
ANR	1091069	CallExpression	ASSERT ( m_proc_family != NULL )		1091065	0					
ANR	1091070	Callee	ASSERT		1091065	0					
ANR	1091071	Identifier	ASSERT		1091065	0					
ANR	1091072	ArgumentList	m_proc_family != NULL		1091065	1					
ANR	1091073	Argument	m_proc_family != NULL		1091065	0					
ANR	1091074	EqualityExpression	m_proc_family != NULL		1091065	0		!=			
ANR	1091075	Identifier	m_proc_family		1091065	0					
ANR	1091076	Identifier	NULL		1091065	1					
ANR	1091077	ReturnStatement	return m_proc_family -> kill_family ( pid ) ;	9001:1:276538:276576	1091065	1	True				
ANR	1091078	CallExpression	m_proc_family -> kill_family ( pid )		1091065	0					
ANR	1091079	Callee	m_proc_family -> kill_family		1091065	0					
ANR	1091080	PtrMemberAccess	m_proc_family -> kill_family		1091065	0					
ANR	1091081	Identifier	m_proc_family		1091065	0					
ANR	1091082	Identifier	kill_family		1091065	1					
ANR	1091083	ArgumentList	pid		1091065	1					
ANR	1091084	Argument	pid		1091065	0					
ANR	1091085	Identifier	pid		1091065	0					
ANR	1091086	ReturnType	int		1091065	1					
ANR	1091087	Identifier	DaemonCore :: Kill_Family		1091065	2					
ANR	1091088	ParameterList	pid_t pid		1091065	3					
ANR	1091089	Parameter	pid_t pid	8998:24:276492:276500	1091065	0	True				
ANR	1091090	ParameterType	pid_t		1091065	0					
ANR	1091091	Identifier	pid		1091065	1					
ANR	1091092	CFGEntryNode	ENTRY		1091065		True				
ANR	1091093	CFGExitNode	EXIT		1091065		True				
ANR	1091094	Symbol	NULL		1091065						
ANR	1091095	Symbol	m_proc_family -> kill_family		1091065						
ANR	1091096	Symbol	pid		1091065						
ANR	1091097	Symbol	m_proc_family		1091065						
ANR	1091098	Symbol	* m_proc_family		1091065						
ANR	1091099	Function	DaemonCore :: Signal_Process	9004:0:276581:276788							
ANR	1091100	FunctionDef	"DaemonCore :: Signal_Process (pid_t pid , int sig)"		1091099	0					
ANR	1091101	CompoundStatement		9006:0:276632:276788	1091099	0					
ANR	1091102	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9007:1:276635:276664	1091099	0	True				
ANR	1091103	CallExpression	ASSERT ( m_proc_family != NULL )		1091099	0					
ANR	1091104	Callee	ASSERT		1091099	0					
ANR	1091105	Identifier	ASSERT		1091099	0					
ANR	1091106	ArgumentList	m_proc_family != NULL		1091099	1					
ANR	1091107	Argument	m_proc_family != NULL		1091099	0					
ANR	1091108	EqualityExpression	m_proc_family != NULL		1091099	0		!=			
ANR	1091109	Identifier	m_proc_family		1091099	0					
ANR	1091110	Identifier	NULL		1091099	1					
ANR	1091111	ExpressionStatement	"dprintf ( D_ALWAYS , ""sending signal %d to process with pid %u\\n"" , sig , pid )"	9008:1:276667:276738	1091099	1	True				
ANR	1091112	CallExpression	"dprintf ( D_ALWAYS , ""sending signal %d to process with pid %u\\n"" , sig , pid )"		1091099	0					
ANR	1091113	Callee	dprintf		1091099	0					
ANR	1091114	Identifier	dprintf		1091099	0					
ANR	1091115	ArgumentList	D_ALWAYS		1091099	1					
ANR	1091116	Argument	D_ALWAYS		1091099	0					
ANR	1091117	Identifier	D_ALWAYS		1091099	0					
ANR	1091118	Argument	"""sending signal %d to process with pid %u\\n"""		1091099	1					
ANR	1091119	PrimaryExpression	"""sending signal %d to process with pid %u\\n"""		1091099	0					
ANR	1091120	Argument	sig		1091099	2					
ANR	1091121	Identifier	sig		1091099	0					
ANR	1091122	Argument	pid		1091099	3					
ANR	1091123	Identifier	pid		1091099	0					
ANR	1091124	ReturnStatement	"return m_proc_family -> signal_process ( pid , sig ) ;"	9009:1:276741:276786	1091099	2	True				
ANR	1091125	CallExpression	"m_proc_family -> signal_process ( pid , sig )"		1091099	0					
ANR	1091126	Callee	m_proc_family -> signal_process		1091099	0					
ANR	1091127	PtrMemberAccess	m_proc_family -> signal_process		1091099	0					
ANR	1091128	Identifier	m_proc_family		1091099	0					
ANR	1091129	Identifier	signal_process		1091099	1					
ANR	1091130	ArgumentList	pid		1091099	1					
ANR	1091131	Argument	pid		1091099	0					
ANR	1091132	Identifier	pid		1091099	0					
ANR	1091133	Argument	sig		1091099	1					
ANR	1091134	Identifier	sig		1091099	0					
ANR	1091135	ReturnType	int		1091099	1					
ANR	1091136	Identifier	DaemonCore :: Signal_Process		1091099	2					
ANR	1091137	ParameterList	"pid_t pid , int sig"		1091099	3					
ANR	1091138	Parameter	pid_t pid	9005:27:276612:276620	1091099	0	True				
ANR	1091139	ParameterType	pid_t		1091099	0					
ANR	1091140	Identifier	pid		1091099	1					
ANR	1091141	Parameter	int sig	9005:38:276623:276629	1091099	1	True				
ANR	1091142	ParameterType	int		1091099	0					
ANR	1091143	Identifier	sig		1091099	1					
ANR	1091144	CFGEntryNode	ENTRY		1091099		True				
ANR	1091145	CFGExitNode	EXIT		1091099		True				
ANR	1091146	Symbol	sig		1091099						
ANR	1091147	Symbol	NULL		1091099						
ANR	1091148	Symbol	m_proc_family -> signal_process		1091099						
ANR	1091149	Symbol	D_ALWAYS		1091099						
ANR	1091150	Symbol	pid		1091099						
ANR	1091151	Symbol	m_proc_family		1091099						
ANR	1091152	Symbol	* m_proc_family		1091099						
ANR	1091153	Function	DaemonCore :: Proc_Family_Init	9012:0:276791:276964							
ANR	1091154	FunctionDef	DaemonCore :: Proc_Family_Init ()		1091153	0					
ANR	1091155	CompoundStatement		9014:0:276827:276964	1091153	0					
ANR	1091156	IfStatement	if ( m_proc_family == NULL )		1091153	0					
ANR	1091157	Condition	m_proc_family == NULL	9015:5:276834:276854	1091153	0	True				
ANR	1091158	EqualityExpression	m_proc_family == NULL		1091153	0		==			
ANR	1091159	Identifier	m_proc_family		1091153	0					
ANR	1091160	Identifier	NULL		1091153	1					
ANR	1091161	CompoundStatement		2:28:29:29	1091153	1					
ANR	1091162	ExpressionStatement	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )	9016:2:276861:276934	1091153	0	True				
ANR	1091163	AssignmentExpression	m_proc_family = ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		1091153	0		=			
ANR	1091164	Identifier	m_proc_family		1091153	0					
ANR	1091165	CallExpression	ProcFamilyInterface :: create ( get_mySubSystem ( ) -> getName ( ) )		1091153	1					
ANR	1091166	Callee	ProcFamilyInterface :: create		1091153	0					
ANR	1091167	Identifier	ProcFamilyInterface :: create		1091153	0					
ANR	1091168	ArgumentList	get_mySubSystem ( ) -> getName ( )		1091153	1					
ANR	1091169	Argument	get_mySubSystem ( ) -> getName ( )		1091153	0					
ANR	1091170	CallExpression	get_mySubSystem ( ) -> getName ( )		1091153	0					
ANR	1091171	Callee	get_mySubSystem ( ) -> getName		1091153	0					
ANR	1091172	PtrMemberAccess	get_mySubSystem ( ) -> getName		1091153	0					
ANR	1091173	CallExpression	get_mySubSystem ( )		1091153	0					
ANR	1091174	Callee	get_mySubSystem		1091153	0					
ANR	1091175	Identifier	get_mySubSystem		1091153	0					
ANR	1091176	ArgumentList			1091153	1					
ANR	1091177	Identifier	getName		1091153	1					
ANR	1091178	ArgumentList			1091153	1					
ANR	1091179	ExpressionStatement	ASSERT ( m_proc_family )	9017:2:276938:276959	1091153	1	True				
ANR	1091180	CallExpression	ASSERT ( m_proc_family )		1091153	0					
ANR	1091181	Callee	ASSERT		1091153	0					
ANR	1091182	Identifier	ASSERT		1091153	0					
ANR	1091183	ArgumentList	m_proc_family		1091153	1					
ANR	1091184	Argument	m_proc_family		1091153	0					
ANR	1091185	Identifier	m_proc_family		1091153	0					
ANR	1091186	ReturnType	void		1091153	1					
ANR	1091187	Identifier	DaemonCore :: Proc_Family_Init		1091153	2					
ANR	1091188	ParameterList			1091153	3					
ANR	1091189	CFGEntryNode	ENTRY		1091153		True				
ANR	1091190	CFGExitNode	EXIT		1091153		True				
ANR	1091191	Symbol	ProcFamilyInterface :: create		1091153						
ANR	1091192	Symbol	NULL		1091153						
ANR	1091193	Symbol	get_mySubSystem ( ) -> getName		1091153						
ANR	1091194	Symbol	* get_mySubSystem		1091153						
ANR	1091195	Symbol	m_proc_family		1091153						
ANR	1091196	Symbol	get_mySubSystem		1091153						
ANR	1091197	Function	DaemonCore :: Proc_Family_Cleanup	9021:0:276967:277081							
ANR	1091198	FunctionDef	DaemonCore :: Proc_Family_Cleanup ()		1091197	0					
ANR	1091199	CompoundStatement		9023:0:277006:277081	1091197	0					
ANR	1091200	IfStatement	if ( m_proc_family )		1091197	0					
ANR	1091201	Condition	m_proc_family	9024:5:277013:277025	1091197	0	True				
ANR	1091202	Identifier	m_proc_family		1091197	0					
ANR	1091203	CompoundStatement		2:20:21:21	1091197	1					
ANR	1091204	Statement	delete	9025:2:277032:277037	1091197	0	True				
ANR	1091205	ExpressionStatement	m_proc_family	9025:9:277039:277052	1091197	1	True				
ANR	1091206	Identifier	m_proc_family		1091197	0					
ANR	1091207	ExpressionStatement	m_proc_family = NULL	9026:2:277056:277076	1091197	2	True				
ANR	1091208	AssignmentExpression	m_proc_family = NULL		1091197	0		=			
ANR	1091209	Identifier	m_proc_family		1091197	0					
ANR	1091210	Identifier	NULL		1091197	1					
ANR	1091211	ReturnType	void		1091197	1					
ANR	1091212	Identifier	DaemonCore :: Proc_Family_Cleanup		1091197	2					
ANR	1091213	ParameterList			1091197	3					
ANR	1091214	CFGEntryNode	ENTRY		1091197		True				
ANR	1091215	CFGExitNode	EXIT		1091197		True				
ANR	1091216	Symbol	NULL		1091197						
ANR	1091217	Symbol	m_proc_family		1091197						
ANR	1091218	Function	DaemonCore :: Inherit	9030:0:277084:283648							
ANR	1091219	FunctionDef	DaemonCore :: Inherit ()		1091218	0					
ANR	1091220	CompoundStatement		9032:0:277117:283648	1091218	0					
ANR	1091221	IdentifierDeclStatement	char * inheritbuf = NULL ;	9033:1:277120:277143	1091218	0	True				
ANR	1091222	IdentifierDecl	* inheritbuf = NULL		1091218	0					
ANR	1091223	IdentifierDeclType	char *		1091218	0					
ANR	1091224	Identifier	inheritbuf		1091218	1					
ANR	1091225	AssignmentExpression	* inheritbuf = NULL		1091218	2		=			
ANR	1091226	Identifier	NULL		1091218	0					
ANR	1091227	Identifier	NULL		1091218	1					
ANR	1091228	IdentifierDeclStatement	int numInheritedSocks = 0 ;	9034:1:277146:277171	1091218	1	True				
ANR	1091229	IdentifierDecl	numInheritedSocks = 0		1091218	0					
ANR	1091230	IdentifierDeclType	int		1091218	0					
ANR	1091231	Identifier	numInheritedSocks		1091218	1					
ANR	1091232	AssignmentExpression	numInheritedSocks = 0		1091218	2		=			
ANR	1091233	Identifier	numInheritedSocks		1091218	0					
ANR	1091234	PrimaryExpression	0		1091218	1					
ANR	1091235	IdentifierDeclStatement	char * ptmp ;	9035:1:277174:277184	1091218	2	True				
ANR	1091236	IdentifierDecl	* ptmp		1091218	0					
ANR	1091237	IdentifierDeclType	char *		1091218	0					
ANR	1091238	Identifier	ptmp		1091218	1					
ANR	1091239	Statement	static	9036:1:277187:277192	1091218	3	True				
ANR	1091240	IdentifierDeclStatement	bool already_inherited = false ;	9036:8:277194:277224	1091218	4	True				
ANR	1091241	IdentifierDecl	already_inherited = false		1091218	0					
ANR	1091242	IdentifierDeclType	bool		1091218	0					
ANR	1091243	Identifier	already_inherited		1091218	1					
ANR	1091244	AssignmentExpression	already_inherited = false		1091218	2		=			
ANR	1091245	Identifier	false		1091218	0					
ANR	1091246	Identifier	false		1091218	1					
ANR	1091247	IfStatement	if ( already_inherited )		1091218	5					
ANR	1091248	Condition	already_inherited	9038:5:277232:277248	1091218	0	True				
ANR	1091249	Identifier	already_inherited		1091218	0					
ANR	1091250	CompoundStatement		7:25:134:134	1091218	1					
ANR	1091251	ReturnStatement	return ;	9039:2:277256:277262	1091218	0	True				
ANR	1091252	ExpressionStatement	already_inherited = true	9041:1:277268:277292	1091218	6	True				
ANR	1091253	AssignmentExpression	already_inherited = true		1091218	0		=			
ANR	1091254	Identifier	already_inherited		1091218	0					
ANR	1091255	Identifier	true		1091218	1					
ANR	1091256	IdentifierDeclStatement	const char * envName = EnvGetName ( ENV_INHERIT ) ;	9054:1:277869:277916	1091218	7	True				
ANR	1091257	IdentifierDecl	* envName = EnvGetName ( ENV_INHERIT )		1091218	0					
ANR	1091258	IdentifierDeclType	const char *		1091218	0					
ANR	1091259	Identifier	envName		1091218	1					
ANR	1091260	AssignmentExpression	* envName = EnvGetName ( ENV_INHERIT )		1091218	2		=			
ANR	1091261	Identifier	envName		1091218	0					
ANR	1091262	CallExpression	EnvGetName ( ENV_INHERIT )		1091218	1					
ANR	1091263	Callee	EnvGetName		1091218	0					
ANR	1091264	Identifier	EnvGetName		1091218	0					
ANR	1091265	ArgumentList	ENV_INHERIT		1091218	1					
ANR	1091266	Argument	ENV_INHERIT		1091218	0					
ANR	1091267	Identifier	ENV_INHERIT		1091218	0					
ANR	1091268	IdentifierDeclStatement	const char * tmp = GetEnv ( envName ) ;	9055:1:277919:277954	1091218	8	True				
ANR	1091269	IdentifierDecl	* tmp = GetEnv ( envName )		1091218	0					
ANR	1091270	IdentifierDeclType	const char *		1091218	0					
ANR	1091271	Identifier	tmp		1091218	1					
ANR	1091272	AssignmentExpression	* tmp = GetEnv ( envName )		1091218	2		=			
ANR	1091273	Identifier	tmp		1091218	0					
ANR	1091274	CallExpression	GetEnv ( envName )		1091218	1					
ANR	1091275	Callee	GetEnv		1091218	0					
ANR	1091276	Identifier	GetEnv		1091218	0					
ANR	1091277	ArgumentList	envName		1091218	1					
ANR	1091278	Argument	envName		1091218	0					
ANR	1091279	Identifier	envName		1091218	0					
ANR	1091280	IfStatement	if ( tmp != NULL )		1091218	9					
ANR	1091281	Condition	tmp != NULL	9056:6:277962:277972	1091218	0	True				
ANR	1091282	EqualityExpression	tmp != NULL		1091218	0		!=			
ANR	1091283	Identifier	tmp		1091218	0					
ANR	1091284	Identifier	NULL		1091218	1					
ANR	1091285	CompoundStatement		25:20:858:858	1091218	1					
ANR	1091286	ExpressionStatement	inheritbuf = strdup ( tmp )	9057:2:277980:278006	1091218	0	True				
ANR	1091287	AssignmentExpression	inheritbuf = strdup ( tmp )		1091218	0		=			
ANR	1091288	Identifier	inheritbuf		1091218	0					
ANR	1091289	CallExpression	strdup ( tmp )		1091218	1					
ANR	1091290	Callee	strdup		1091218	0					
ANR	1091291	Identifier	strdup		1091218	0					
ANR	1091292	ArgumentList	tmp		1091218	1					
ANR	1091293	Argument	tmp		1091218	0					
ANR	1091294	Identifier	tmp		1091218	0					
ANR	1091295	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s: \\""%s\\""\\n"" , envName , inheritbuf )"	9058:2:278010:278071	1091218	1	True				
ANR	1091296	CallExpression	"dprintf ( D_DAEMONCORE , ""%s: \\""%s\\""\\n"" , envName , inheritbuf )"		1091218	0					
ANR	1091297	Callee	dprintf		1091218	0					
ANR	1091298	Identifier	dprintf		1091218	0					
ANR	1091299	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091300	Argument	D_DAEMONCORE		1091218	0					
ANR	1091301	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091302	Argument	"""%s: \\""%s\\""\\n"""		1091218	1					
ANR	1091303	PrimaryExpression	"""%s: \\""%s\\""\\n"""		1091218	0					
ANR	1091304	Argument	envName		1091218	2					
ANR	1091305	Identifier	envName		1091218	0					
ANR	1091306	Argument	inheritbuf		1091218	3					
ANR	1091307	Identifier	inheritbuf		1091218	0					
ANR	1091308	ExpressionStatement	UnsetEnv ( envName )	9059:2:278075:278094	1091218	2	True				
ANR	1091309	CallExpression	UnsetEnv ( envName )		1091218	0					
ANR	1091310	Callee	UnsetEnv		1091218	0					
ANR	1091311	Identifier	UnsetEnv		1091218	0					
ANR	1091312	ArgumentList	envName		1091218	1					
ANR	1091313	Argument	envName		1091218	0					
ANR	1091314	Identifier	envName		1091218	0					
ANR	1091315	ElseStatement	else		1091218	0					
ANR	1091316	CompoundStatement		29:8:986:986	1091218	0					
ANR	1091317	ExpressionStatement	"inheritbuf = strdup ( """" )"	9061:2:278108:278133	1091218	0	True				
ANR	1091318	AssignmentExpression	"inheritbuf = strdup ( """" )"		1091218	0		=			
ANR	1091319	Identifier	inheritbuf		1091218	0					
ANR	1091320	CallExpression	"strdup ( """" )"		1091218	1					
ANR	1091321	Callee	strdup		1091218	0					
ANR	1091322	Identifier	strdup		1091218	0					
ANR	1091323	ArgumentList	""""""		1091218	1					
ANR	1091324	Argument	""""""		1091218	0					
ANR	1091325	PrimaryExpression	""""""		1091218	0					
ANR	1091326	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""%s: is NULL\\n"" , envName )"	9062:2:278137:278187	1091218	1	True				
ANR	1091327	CallExpression	"dprintf ( D_DAEMONCORE , ""%s: is NULL\\n"" , envName )"		1091218	0					
ANR	1091328	Callee	dprintf		1091218	0					
ANR	1091329	Identifier	dprintf		1091218	0					
ANR	1091330	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091331	Argument	D_DAEMONCORE		1091218	0					
ANR	1091332	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091333	Argument	"""%s: is NULL\\n"""		1091218	1					
ANR	1091334	PrimaryExpression	"""%s: is NULL\\n"""		1091218	0					
ANR	1091335	Argument	envName		1091218	2					
ANR	1091336	Identifier	envName		1091218	0					
ANR	1091337	IdentifierDeclStatement	"StringList inherit_list ( inheritbuf , "" "" ) ;"	9065:1:278194:278233	1091218	10	True				
ANR	1091338	IdentifierDecl	"inherit_list ( inheritbuf , "" "" )"		1091218	0					
ANR	1091339	IdentifierDeclType	StringList		1091218	0					
ANR	1091340	Identifier	inherit_list		1091218	1					
ANR	1091341	Expression	"inheritbuf , "" """		1091218	2					
ANR	1091342	Identifier	inheritbuf		1091218	0					
ANR	1091343	PrimaryExpression	""" """		1091218	1					
ANR	1091344	IfStatement	if ( inheritbuf != NULL )		1091218	11					
ANR	1091345	Condition	inheritbuf != NULL	9066:6:278241:278258	1091218	0	True				
ANR	1091346	EqualityExpression	inheritbuf != NULL		1091218	0		!=			
ANR	1091347	Identifier	inheritbuf		1091218	0					
ANR	1091348	Identifier	NULL		1091218	1					
ANR	1091349	CompoundStatement		35:27:1144:1144	1091218	1					
ANR	1091350	ExpressionStatement	free ( inheritbuf )	9067:2:278266:278284	1091218	0	True				
ANR	1091351	CallExpression	free ( inheritbuf )		1091218	0					
ANR	1091352	Callee	free		1091218	0					
ANR	1091353	Identifier	free		1091218	0					
ANR	1091354	ArgumentList	inheritbuf		1091218	1					
ANR	1091355	Argument	inheritbuf		1091218	0					
ANR	1091356	Identifier	inheritbuf		1091218	0					
ANR	1091357	ExpressionStatement	inheritbuf = NULL	9068:2:278288:278305	1091218	1	True				
ANR	1091358	AssignmentExpression	inheritbuf = NULL		1091218	0		=			
ANR	1091359	Identifier	inheritbuf		1091218	0					
ANR	1091360	Identifier	NULL		1091218	1					
ANR	1091361	ExpressionStatement	inherit_list . rewind ( )	9070:1:278311:278332	1091218	12	True				
ANR	1091362	CallExpression	inherit_list . rewind ( )		1091218	0					
ANR	1091363	Callee	inherit_list . rewind		1091218	0					
ANR	1091364	MemberAccess	inherit_list . rewind		1091218	0					
ANR	1091365	Identifier	inherit_list		1091218	0					
ANR	1091366	Identifier	rewind		1091218	1					
ANR	1091367	ArgumentList			1091218	1					
ANR	1091368	IfStatement	if ( ( ptmp = inherit_list . next ( ) ) != NULL && * ptmp )		1091218	13					
ANR	1091369	Condition	( ptmp = inherit_list . next ( ) ) != NULL && * ptmp	9071:6:278340:278382	1091218	0	True				
ANR	1091370	AndExpression	( ptmp = inherit_list . next ( ) ) != NULL && * ptmp		1091218	0		&&			
ANR	1091371	EqualityExpression	( ptmp = inherit_list . next ( ) ) != NULL		1091218	0		!=			
ANR	1091372	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091373	Identifier	ptmp		1091218	0					
ANR	1091374	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091375	Callee	inherit_list . next		1091218	0					
ANR	1091376	MemberAccess	inherit_list . next		1091218	0					
ANR	1091377	Identifier	inherit_list		1091218	0					
ANR	1091378	Identifier	next		1091218	1					
ANR	1091379	ArgumentList			1091218	1					
ANR	1091380	Identifier	NULL		1091218	1					
ANR	1091381	UnaryOperationExpression	* ptmp		1091218	1					
ANR	1091382	UnaryOperator	*		1091218	0					
ANR	1091383	Identifier	ptmp		1091218	1					
ANR	1091384	CompoundStatement		88:2:2826:2875	1091218	1					
ANR	1091385	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Parent PID = %s\\n"" , ptmp )"	9075:2:278479:278525	1091218	0	True				
ANR	1091386	CallExpression	"dprintf ( D_DAEMONCORE , ""Parent PID = %s\\n"" , ptmp )"		1091218	0					
ANR	1091387	Callee	dprintf		1091218	0					
ANR	1091388	Identifier	dprintf		1091218	0					
ANR	1091389	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091390	Argument	D_DAEMONCORE		1091218	0					
ANR	1091391	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091392	Argument	"""Parent PID = %s\\n"""		1091218	1					
ANR	1091393	PrimaryExpression	"""Parent PID = %s\\n"""		1091218	0					
ANR	1091394	Argument	ptmp		1091218	2					
ANR	1091395	Identifier	ptmp		1091218	0					
ANR	1091396	ExpressionStatement	ppid = atoi ( ptmp )	9076:2:278529:278546	1091218	1	True				
ANR	1091397	AssignmentExpression	ppid = atoi ( ptmp )		1091218	0		=			
ANR	1091398	Identifier	ppid		1091218	0					
ANR	1091399	CallExpression	atoi ( ptmp )		1091218	1					
ANR	1091400	Callee	atoi		1091218	0					
ANR	1091401	Identifier	atoi		1091218	0					
ANR	1091402	ArgumentList	ptmp		1091218	1					
ANR	1091403	Argument	ptmp		1091218	0					
ANR	1091404	Identifier	ptmp		1091218	0					
ANR	1091405	Statement	PidEntry	9077:2:278550:278557	1091218	2	True				
ANR	1091406	Statement	*	9077:11:278559:278559	1091218	3	True				
ANR	1091407	Statement	pidtmp	9077:12:278560:278565	1091218	4	True				
ANR	1091408	Statement	=	9077:19:278567:278567	1091218	5	True				
ANR	1091409	Statement	new	9077:21:278569:278571	1091218	6	True				
ANR	1091410	ExpressionStatement	PidEntry	9077:25:278573:278581	1091218	7	True				
ANR	1091411	Identifier	PidEntry		1091218	0					
ANR	1091412	ExpressionStatement	pidtmp -> pid = ppid	9078:2:278585:278603	1091218	8	True				
ANR	1091413	AssignmentExpression	pidtmp -> pid = ppid		1091218	0		=			
ANR	1091414	PtrMemberAccess	pidtmp -> pid		1091218	0					
ANR	1091415	Identifier	pidtmp		1091218	0					
ANR	1091416	Identifier	pid		1091218	1					
ANR	1091417	Identifier	ppid		1091218	1					
ANR	1091418	ExpressionStatement	ptmp = inherit_list . next ( )	9079:2:278607:278631	1091218	9	True				
ANR	1091419	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091420	Identifier	ptmp		1091218	0					
ANR	1091421	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091422	Callee	inherit_list . next		1091218	0					
ANR	1091423	MemberAccess	inherit_list . next		1091218	0					
ANR	1091424	Identifier	inherit_list		1091218	0					
ANR	1091425	Identifier	next		1091218	1					
ANR	1091426	ArgumentList			1091218	1					
ANR	1091427	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Parent Command Sock = %s\\n"" , ptmp )"	9080:2:278635:278690	1091218	10	True				
ANR	1091428	CallExpression	"dprintf ( D_DAEMONCORE , ""Parent Command Sock = %s\\n"" , ptmp )"		1091218	0					
ANR	1091429	Callee	dprintf		1091218	0					
ANR	1091430	Identifier	dprintf		1091218	0					
ANR	1091431	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091432	Argument	D_DAEMONCORE		1091218	0					
ANR	1091433	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091434	Argument	"""Parent Command Sock = %s\\n"""		1091218	1					
ANR	1091435	PrimaryExpression	"""Parent Command Sock = %s\\n"""		1091218	0					
ANR	1091436	Argument	ptmp		1091218	2					
ANR	1091437	Identifier	ptmp		1091218	0					
ANR	1091438	ExpressionStatement	pidtmp -> sinful_string = ptmp	9081:2:278694:278722	1091218	11	True				
ANR	1091439	AssignmentExpression	pidtmp -> sinful_string = ptmp		1091218	0		=			
ANR	1091440	PtrMemberAccess	pidtmp -> sinful_string		1091218	0					
ANR	1091441	Identifier	pidtmp		1091218	0					
ANR	1091442	Identifier	sinful_string		1091218	1					
ANR	1091443	Identifier	ptmp		1091218	1					
ANR	1091444	ExpressionStatement	pidtmp -> is_local = TRUE	9082:2:278726:278749	1091218	12	True				
ANR	1091445	AssignmentExpression	pidtmp -> is_local = TRUE		1091218	0		=			
ANR	1091446	PtrMemberAccess	pidtmp -> is_local		1091218	0					
ANR	1091447	Identifier	pidtmp		1091218	0					
ANR	1091448	Identifier	is_local		1091218	1					
ANR	1091449	Identifier	TRUE		1091218	1					
ANR	1091450	ExpressionStatement	pidtmp -> parent_is_local = TRUE	9083:2:278753:278783	1091218	13	True				
ANR	1091451	AssignmentExpression	pidtmp -> parent_is_local = TRUE		1091218	0		=			
ANR	1091452	PtrMemberAccess	pidtmp -> parent_is_local		1091218	0					
ANR	1091453	Identifier	pidtmp		1091218	0					
ANR	1091454	Identifier	parent_is_local		1091218	1					
ANR	1091455	Identifier	TRUE		1091218	1					
ANR	1091456	ExpressionStatement	pidtmp -> reaper_id = 0	9084:2:278787:278808	1091218	14	True				
ANR	1091457	AssignmentExpression	pidtmp -> reaper_id = 0		1091218	0		=			
ANR	1091458	PtrMemberAccess	pidtmp -> reaper_id		1091218	0					
ANR	1091459	Identifier	pidtmp		1091218	0					
ANR	1091460	Identifier	reaper_id		1091218	1					
ANR	1091461	PrimaryExpression	0		1091218	1					
ANR	1091462	ExpressionStatement	pidtmp -> hung_tid = - 1	9085:2:278812:278833	1091218	15	True				
ANR	1091463	AssignmentExpression	pidtmp -> hung_tid = - 1		1091218	0		=			
ANR	1091464	PtrMemberAccess	pidtmp -> hung_tid		1091218	0					
ANR	1091465	Identifier	pidtmp		1091218	0					
ANR	1091466	Identifier	hung_tid		1091218	1					
ANR	1091467	UnaryOperationExpression	- 1		1091218	1					
ANR	1091468	UnaryOperator	-		1091218	0					
ANR	1091469	PrimaryExpression	1		1091218	1					
ANR	1091470	ExpressionStatement	pidtmp -> was_not_responding = FALSE	9086:2:278837:278871	1091218	16	True				
ANR	1091471	AssignmentExpression	pidtmp -> was_not_responding = FALSE		1091218	0		=			
ANR	1091472	PtrMemberAccess	pidtmp -> was_not_responding		1091218	0					
ANR	1091473	Identifier	pidtmp		1091218	0					
ANR	1091474	Identifier	was_not_responding		1091218	1					
ANR	1091475	Identifier	FALSE		1091218	1					
ANR	1091476	ExpressionStatement	pidtmp -> deallocate = 0L	9088:2:278888:278911	1091218	17	True				
ANR	1091477	AssignmentExpression	pidtmp -> deallocate = 0L		1091218	0		=			
ANR	1091478	PtrMemberAccess	pidtmp -> deallocate		1091218	0					
ANR	1091479	Identifier	pidtmp		1091218	0					
ANR	1091480	Identifier	deallocate		1091218	1					
ANR	1091481	PrimaryExpression	0L		1091218	1					
ANR	1091482	Statement	pidtmp	9090:2:278916:278921	1091218	18	True				
ANR	1091483	Statement	->	9090:8:278922:278923	1091218	19	True				
ANR	1091484	Statement	hProcess	9090:10:278924:278931	1091218	20	True				
ANR	1091485	Statement	=	9090:19:278933:278933	1091218	21	True				
ANR	1091486	Statement	::	9090:21:278935:278936	1091218	22	True				
ANR	1091487	ExpressionStatement	"OpenProcess ( SYNCHRONIZE | PROCESS_QUERY_INFORMATION , FALSE , ppid )"	9090:23:278937:279008	1091218	23	True				
ANR	1091488	CallExpression	"OpenProcess ( SYNCHRONIZE | PROCESS_QUERY_INFORMATION , FALSE , ppid )"		1091218	0					
ANR	1091489	Callee	OpenProcess		1091218	0					
ANR	1091490	Identifier	OpenProcess		1091218	0					
ANR	1091491	ArgumentList	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		1091218	1					
ANR	1091492	Argument	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		1091218	0					
ANR	1091493	InclusiveOrExpression	SYNCHRONIZE | PROCESS_QUERY_INFORMATION		1091218	0		|			
ANR	1091494	Identifier	SYNCHRONIZE		1091218	0					
ANR	1091495	Identifier	PROCESS_QUERY_INFORMATION		1091218	1					
ANR	1091496	Argument	FALSE		1091218	1					
ANR	1091497	Identifier	FALSE		1091218	0					
ANR	1091498	Argument	ppid		1091218	2					
ANR	1091499	Identifier	ppid		1091218	0					
ANR	1091500	IdentifierDeclStatement	bool watch_ppid = true ;	9102:2:279464:279486	1091218	24	True				
ANR	1091501	IdentifierDecl	watch_ppid = true		1091218	0					
ANR	1091502	IdentifierDeclType	bool		1091218	0					
ANR	1091503	Identifier	watch_ppid		1091218	1					
ANR	1091504	AssignmentExpression	watch_ppid = true		1091218	2		=			
ANR	1091505	Identifier	true		1091218	0					
ANR	1091506	Identifier	true		1091218	1					
ANR	1091507	IfStatement	if ( pidtmp -> hProcess == NULL )		1091218	25					
ANR	1091508	Condition	pidtmp -> hProcess == NULL	9104:7:279496:279519	1091218	0	True				
ANR	1091509	EqualityExpression	pidtmp -> hProcess == NULL		1091218	0		==			
ANR	1091510	PtrMemberAccess	pidtmp -> hProcess		1091218	0					
ANR	1091511	Identifier	pidtmp		1091218	0					
ANR	1091512	Identifier	hProcess		1091218	1					
ANR	1091513	Identifier	NULL		1091218	1					
ANR	1091514	CompoundStatement		73:34:2405:2405	1091218	1					
ANR	1091515	IfStatement	if ( GetLastError ( ) == ERROR_ACCESS_DENIED )		1091218	0					
ANR	1091516	Condition	GetLastError ( ) == ERROR_ACCESS_DENIED	9105:8:279533:279569	1091218	0	True				
ANR	1091517	EqualityExpression	GetLastError ( ) == ERROR_ACCESS_DENIED		1091218	0		==			
ANR	1091518	CallExpression	GetLastError ( )		1091218	0					
ANR	1091519	Callee	GetLastError		1091218	0					
ANR	1091520	Identifier	GetLastError		1091218	0					
ANR	1091521	ArgumentList			1091218	1					
ANR	1091522	Identifier	ERROR_ACCESS_DENIED		1091218	1					
ANR	1091523	CompoundStatement		74:48:2455:2455	1091218	1					
ANR	1091524	Statement	dprintf	9106:4:279579:279585	1091218	0	True				
ANR	1091525	Statement	(	9106:11:279586:279586	1091218	1	True				
ANR	1091526	Statement	D_FULLDEBUG	9106:12:279587:279597	1091218	2	True				
ANR	1091527	Statement	","	9106:23:279598:279598	1091218	3	True				
ANR	1091528	Statement	"""OpenProcess() failed - """	9106:25:279600:279624	1091218	4	True				
ANR	1091529	Statement	"""ACCESS DENIED. We can't watch parent process.\\n"""	9107:6:279632:279680	1091218	5	True				
ANR	1091530	Statement	)	9107:55:279681:279681	1091218	6	True				
ANR	1091531	ExpressionStatement		9107:56:279682:279682	1091218	7	True				
ANR	1091532	ExpressionStatement	watch_ppid = false	9108:4:279688:279706	1091218	8	True				
ANR	1091533	AssignmentExpression	watch_ppid = false		1091218	0		=			
ANR	1091534	Identifier	watch_ppid		1091218	0					
ANR	1091535	Identifier	false		1091218	1					
ANR	1091536	ElseStatement	else		1091218	0					
ANR	1091537	CompoundStatement		78:10:2600:2600	1091218	0					
ANR	1091538	ExpressionStatement	"dprintf ( D_ALWAYS , ""OpenProcess() failed - Error %d\\n"" , GetLastError ( ) )"	9110:4:279724:279803	1091218	0	True				
ANR	1091539	CallExpression	"dprintf ( D_ALWAYS , ""OpenProcess() failed - Error %d\\n"" , GetLastError ( ) )"		1091218	0					
ANR	1091540	Callee	dprintf		1091218	0					
ANR	1091541	Identifier	dprintf		1091218	0					
ANR	1091542	ArgumentList	D_ALWAYS		1091218	1					
ANR	1091543	Argument	D_ALWAYS		1091218	0					
ANR	1091544	Identifier	D_ALWAYS		1091218	0					
ANR	1091545	Argument	"""OpenProcess() failed - Error %d\\n"""		1091218	1					
ANR	1091546	PrimaryExpression	"""OpenProcess() failed - Error %d\\n"""		1091218	0					
ANR	1091547	Argument	GetLastError ( )		1091218	2					
ANR	1091548	CallExpression	GetLastError ( )		1091218	0					
ANR	1091549	Callee	GetLastError		1091218	0					
ANR	1091550	Identifier	GetLastError		1091218	0					
ANR	1091551	ArgumentList			1091218	1					
ANR	1091552	ExpressionStatement	pidtmp -> hThread = NULL	9115:2:279817:279839	1091218	26	True				
ANR	1091553	AssignmentExpression	pidtmp -> hThread = NULL		1091218	0		=			
ANR	1091554	PtrMemberAccess	pidtmp -> hThread		1091218	0					
ANR	1091555	Identifier	pidtmp		1091218	0					
ANR	1091556	Identifier	hThread		1091218	1					
ANR	1091557	Identifier	NULL		1091218	1					
ANR	1091558	ExpressionStatement	pidtmp -> pipeEnd = NULL	9116:2:279884:279906	1091218	27	True				
ANR	1091559	AssignmentExpression	pidtmp -> pipeEnd = NULL		1091218	0		=			
ANR	1091560	PtrMemberAccess	pidtmp -> pipeEnd		1091218	0					
ANR	1091561	Identifier	pidtmp		1091218	0					
ANR	1091562	Identifier	pipeEnd		1091218	1					
ANR	1091563	Identifier	NULL		1091218	1					
ANR	1091564	ExpressionStatement	pidtmp -> deallocate = 0L	9117:2:279910:279933	1091218	28	True				
ANR	1091565	AssignmentExpression	pidtmp -> deallocate = 0L		1091218	0		=			
ANR	1091566	PtrMemberAccess	pidtmp -> deallocate		1091218	0					
ANR	1091567	Identifier	pidtmp		1091218	0					
ANR	1091568	Identifier	deallocate		1091218	1					
ANR	1091569	PrimaryExpression	0L		1091218	1					
ANR	1091570	IdentifierDeclStatement	"int insert_result = pidTable -> insert ( ppid , pidtmp ) ;"	9119:2:279944:279993	1091218	29	True				
ANR	1091571	IdentifierDecl	"insert_result = pidTable -> insert ( ppid , pidtmp )"		1091218	0					
ANR	1091572	IdentifierDeclType	int		1091218	0					
ANR	1091573	Identifier	insert_result		1091218	1					
ANR	1091574	AssignmentExpression	"insert_result = pidTable -> insert ( ppid , pidtmp )"		1091218	2		=			
ANR	1091575	Identifier	insert_result		1091218	0					
ANR	1091576	CallExpression	"pidTable -> insert ( ppid , pidtmp )"		1091218	1					
ANR	1091577	Callee	pidTable -> insert		1091218	0					
ANR	1091578	PtrMemberAccess	pidTable -> insert		1091218	0					
ANR	1091579	Identifier	pidTable		1091218	0					
ANR	1091580	Identifier	insert		1091218	1					
ANR	1091581	ArgumentList	ppid		1091218	1					
ANR	1091582	Argument	ppid		1091218	0					
ANR	1091583	Identifier	ppid		1091218	0					
ANR	1091584	Argument	pidtmp		1091218	1					
ANR	1091585	Identifier	pidtmp		1091218	0					
ANR	1091586	ExpressionStatement	assert ( insert_result == 0 )	9120:2:279997:280025	1091218	30	True				
ANR	1091587	CallExpression	assert ( insert_result == 0 )		1091218	0					
ANR	1091588	Callee	assert		1091218	0					
ANR	1091589	Identifier	assert		1091218	0					
ANR	1091590	ArgumentList	insert_result == 0		1091218	1					
ANR	1091591	Argument	insert_result == 0		1091218	0					
ANR	1091592	EqualityExpression	insert_result == 0		1091218	0		==			
ANR	1091593	Identifier	insert_result		1091218	0					
ANR	1091594	PrimaryExpression	0		1091218	1					
ANR	1091595	IfStatement	if ( watch_ppid )		1091218	31					
ANR	1091596	Condition	watch_ppid	9122:7:280047:280056	1091218	0	True				
ANR	1091597	Identifier	watch_ppid		1091218	0					
ANR	1091598	CompoundStatement		91:20:2942:2942	1091218	1					
ANR	1091599	ExpressionStatement	assert ( pidtmp -> hProcess )	9123:3:280065:280089	1091218	0	True				
ANR	1091600	CallExpression	assert ( pidtmp -> hProcess )		1091218	0					
ANR	1091601	Callee	assert		1091218	0					
ANR	1091602	Identifier	assert		1091218	0					
ANR	1091603	ArgumentList	pidtmp -> hProcess		1091218	1					
ANR	1091604	Argument	pidtmp -> hProcess		1091218	0					
ANR	1091605	PtrMemberAccess	pidtmp -> hProcess		1091218	0					
ANR	1091606	Identifier	pidtmp		1091218	0					
ANR	1091607	Identifier	hProcess		1091218	1					
ANR	1091608	ExpressionStatement	WatchPid ( pidtmp )	9124:3:280094:280110	1091218	1	True				
ANR	1091609	CallExpression	WatchPid ( pidtmp )		1091218	0					
ANR	1091610	Callee	WatchPid		1091218	0					
ANR	1091611	Identifier	WatchPid		1091218	0					
ANR	1091612	ArgumentList	pidtmp		1091218	1					
ANR	1091613	Argument	pidtmp		1091218	0					
ANR	1091614	Identifier	pidtmp		1091218	0					
ANR	1091615	ExpressionStatement	ptmp = inherit_list . next ( )	9129:2:280151:280175	1091218	32	True				
ANR	1091616	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091617	Identifier	ptmp		1091218	0					
ANR	1091618	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091619	Callee	inherit_list . next		1091218	0					
ANR	1091620	MemberAccess	inherit_list . next		1091218	0					
ANR	1091621	Identifier	inherit_list		1091218	0					
ANR	1091622	Identifier	next		1091218	1					
ANR	1091623	ArgumentList			1091218	1					
ANR	1091624	WhileStatement	while ( ptmp && ( * ptmp != '0' ) )		1091218	33					
ANR	1091625	Condition	ptmp && ( * ptmp != '0' )	9130:10:280187:280208	1091218	0	True				
ANR	1091626	AndExpression	ptmp && ( * ptmp != '0' )		1091218	0		&&			
ANR	1091627	Identifier	ptmp		1091218	0					
ANR	1091628	EqualityExpression	* ptmp != '0'		1091218	1		!=			
ANR	1091629	UnaryOperationExpression	* ptmp		1091218	0					
ANR	1091630	UnaryOperator	*		1091218	0					
ANR	1091631	Identifier	ptmp		1091218	1					
ANR	1091632	PrimaryExpression	'0'		1091218	1					
ANR	1091633	CompoundStatement		99:35:3094:3094	1091218	1					
ANR	1091634	IfStatement	if ( numInheritedSocks >= MAX_SOCKS_INHERITED )		1091218	0					
ANR	1091635	Condition	numInheritedSocks >= MAX_SOCKS_INHERITED	9131:7:280221:280260	1091218	0	True				
ANR	1091636	RelationalExpression	numInheritedSocks >= MAX_SOCKS_INHERITED		1091218	0		>=			
ANR	1091637	Identifier	numInheritedSocks		1091218	0					
ANR	1091638	Identifier	MAX_SOCKS_INHERITED		1091218	1					
ANR	1091639	CompoundStatement		100:49:3145:3145	1091218	1					
ANR	1091640	ExpressionStatement	"EXCEPT ( ""MAX_SOCKS_INHERITED reached."" )"	9132:4:280269:280307	1091218	0	True				
ANR	1091641	CallExpression	"EXCEPT ( ""MAX_SOCKS_INHERITED reached."" )"		1091218	0					
ANR	1091642	Callee	EXCEPT		1091218	0					
ANR	1091643	Identifier	EXCEPT		1091218	0					
ANR	1091644	ArgumentList	"""MAX_SOCKS_INHERITED reached."""		1091218	1					
ANR	1091645	Argument	"""MAX_SOCKS_INHERITED reached."""		1091218	0					
ANR	1091646	PrimaryExpression	"""MAX_SOCKS_INHERITED reached."""		1091218	0					
ANR	1091647	SwitchStatement	switch ( * ptmp )		1091218	1					
ANR	1091648	Condition	* ptmp	9134:12:280326:280330	1091218	0	True				
ANR	1091649	UnaryOperationExpression	* ptmp		1091218	0					
ANR	1091650	UnaryOperator	*		1091218	0					
ANR	1091651	Identifier	ptmp		1091218	1					
ANR	1091652	CompoundStatement		103:20:3216:3216	1091218	1					
ANR	1091653	Label	case '1' :	9135:4:280340:280349	1091218	0	True				
ANR	1091654	ExpressionStatement	dc_rsock = new ReliSock ( )	9137:5:280383:280408	1091218	1	True				
ANR	1091655	AssignmentExpression	dc_rsock = new ReliSock ( )		1091218	0		=			
ANR	1091656	Identifier	dc_rsock		1091218	0					
ANR	1091657	UnaryExpression	new ReliSock ( )		1091218	1					
ANR	1091658	ExpressionStatement	ptmp = inherit_list . next ( )	9138:5:280415:280439	1091218	2	True				
ANR	1091659	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091660	Identifier	ptmp		1091218	0					
ANR	1091661	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091662	Callee	inherit_list . next		1091218	0					
ANR	1091663	MemberAccess	inherit_list . next		1091218	0					
ANR	1091664	Identifier	inherit_list		1091218	0					
ANR	1091665	Identifier	next		1091218	1					
ANR	1091666	ArgumentList			1091218	1					
ANR	1091667	ExpressionStatement	dc_rsock -> serialize ( ptmp )	9139:5:280446:280471	1091218	3	True				
ANR	1091668	CallExpression	dc_rsock -> serialize ( ptmp )		1091218	0					
ANR	1091669	Callee	dc_rsock -> serialize		1091218	0					
ANR	1091670	PtrMemberAccess	dc_rsock -> serialize		1091218	0					
ANR	1091671	Identifier	dc_rsock		1091218	0					
ANR	1091672	Identifier	serialize		1091218	1					
ANR	1091673	ArgumentList	ptmp		1091218	1					
ANR	1091674	Argument	ptmp		1091218	0					
ANR	1091675	Identifier	ptmp		1091218	0					
ANR	1091676	ExpressionStatement	dc_rsock -> set_inheritable ( FALSE )	9140:5:280478:280510	1091218	4	True				
ANR	1091677	CallExpression	dc_rsock -> set_inheritable ( FALSE )		1091218	0					
ANR	1091678	Callee	dc_rsock -> set_inheritable		1091218	0					
ANR	1091679	PtrMemberAccess	dc_rsock -> set_inheritable		1091218	0					
ANR	1091680	Identifier	dc_rsock		1091218	0					
ANR	1091681	Identifier	set_inheritable		1091218	1					
ANR	1091682	ArgumentList	FALSE		1091218	1					
ANR	1091683	Argument	FALSE		1091218	0					
ANR	1091684	Identifier	FALSE		1091218	0					
ANR	1091685	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inherited a ReliSock\\n"" )"	9141:5:280517:280563	1091218	5	True				
ANR	1091686	CallExpression	"dprintf ( D_DAEMONCORE , ""Inherited a ReliSock\\n"" )"		1091218	0					
ANR	1091687	Callee	dprintf		1091218	0					
ANR	1091688	Identifier	dprintf		1091218	0					
ANR	1091689	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091690	Argument	D_DAEMONCORE		1091218	0					
ANR	1091691	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091692	Argument	"""Inherited a ReliSock\\n"""		1091218	1					
ANR	1091693	PrimaryExpression	"""Inherited a ReliSock\\n"""		1091218	0					
ANR	1091694	ExpressionStatement	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_rsock	9143:5:280598:280654	1091218	6	True				
ANR	1091695	AssignmentExpression	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_rsock		1091218	0		=			
ANR	1091696	ArrayIndexing	inheritedSocks [ numInheritedSocks ++ ]		1091218	0					
ANR	1091697	Identifier	inheritedSocks		1091218	0					
ANR	1091698	PostIncDecOperationExpression	numInheritedSocks ++		1091218	1					
ANR	1091699	Identifier	numInheritedSocks		1091218	0					
ANR	1091700	IncDec	++		1091218	1					
ANR	1091701	CastExpression	( Stream * ) dc_rsock		1091218	1					
ANR	1091702	CastTarget	Stream *		1091218	0					
ANR	1091703	Identifier	dc_rsock		1091218	1					
ANR	1091704	BreakStatement	break ;	9144:5:280661:280666	1091218	7	True				
ANR	1091705	Label	case '2' :	9145:4:280672:280680	1091218	8	True				
ANR	1091706	ExpressionStatement	dc_ssock = new SafeSock ( )	9146:5:280687:280712	1091218	9	True				
ANR	1091707	AssignmentExpression	dc_ssock = new SafeSock ( )		1091218	0		=			
ANR	1091708	Identifier	dc_ssock		1091218	0					
ANR	1091709	UnaryExpression	new SafeSock ( )		1091218	1					
ANR	1091710	ExpressionStatement	ptmp = inherit_list . next ( )	9147:5:280719:280743	1091218	10	True				
ANR	1091711	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091712	Identifier	ptmp		1091218	0					
ANR	1091713	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091714	Callee	inherit_list . next		1091218	0					
ANR	1091715	MemberAccess	inherit_list . next		1091218	0					
ANR	1091716	Identifier	inherit_list		1091218	0					
ANR	1091717	Identifier	next		1091218	1					
ANR	1091718	ArgumentList			1091218	1					
ANR	1091719	ExpressionStatement	dc_ssock -> serialize ( ptmp )	9148:5:280750:280775	1091218	11	True				
ANR	1091720	CallExpression	dc_ssock -> serialize ( ptmp )		1091218	0					
ANR	1091721	Callee	dc_ssock -> serialize		1091218	0					
ANR	1091722	PtrMemberAccess	dc_ssock -> serialize		1091218	0					
ANR	1091723	Identifier	dc_ssock		1091218	0					
ANR	1091724	Identifier	serialize		1091218	1					
ANR	1091725	ArgumentList	ptmp		1091218	1					
ANR	1091726	Argument	ptmp		1091218	0					
ANR	1091727	Identifier	ptmp		1091218	0					
ANR	1091728	ExpressionStatement	dc_ssock -> set_inheritable ( FALSE )	9149:5:280782:280814	1091218	12	True				
ANR	1091729	CallExpression	dc_ssock -> set_inheritable ( FALSE )		1091218	0					
ANR	1091730	Callee	dc_ssock -> set_inheritable		1091218	0					
ANR	1091731	PtrMemberAccess	dc_ssock -> set_inheritable		1091218	0					
ANR	1091732	Identifier	dc_ssock		1091218	0					
ANR	1091733	Identifier	set_inheritable		1091218	1					
ANR	1091734	ArgumentList	FALSE		1091218	1					
ANR	1091735	Argument	FALSE		1091218	0					
ANR	1091736	Identifier	FALSE		1091218	0					
ANR	1091737	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inherited a SafeSock\\n"" )"	9150:5:280821:280867	1091218	13	True				
ANR	1091738	CallExpression	"dprintf ( D_DAEMONCORE , ""Inherited a SafeSock\\n"" )"		1091218	0					
ANR	1091739	Callee	dprintf		1091218	0					
ANR	1091740	Identifier	dprintf		1091218	0					
ANR	1091741	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091742	Argument	D_DAEMONCORE		1091218	0					
ANR	1091743	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091744	Argument	"""Inherited a SafeSock\\n"""		1091218	1					
ANR	1091745	PrimaryExpression	"""Inherited a SafeSock\\n"""		1091218	0					
ANR	1091746	ExpressionStatement	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_ssock	9152:5:280902:280958	1091218	14	True				
ANR	1091747	AssignmentExpression	inheritedSocks [ numInheritedSocks ++ ] = ( Stream * ) dc_ssock		1091218	0		=			
ANR	1091748	ArrayIndexing	inheritedSocks [ numInheritedSocks ++ ]		1091218	0					
ANR	1091749	Identifier	inheritedSocks		1091218	0					
ANR	1091750	PostIncDecOperationExpression	numInheritedSocks ++		1091218	1					
ANR	1091751	Identifier	numInheritedSocks		1091218	0					
ANR	1091752	IncDec	++		1091218	1					
ANR	1091753	CastExpression	( Stream * ) dc_ssock		1091218	1					
ANR	1091754	CastTarget	Stream *		1091218	0					
ANR	1091755	Identifier	dc_ssock		1091218	1					
ANR	1091756	BreakStatement	break ;	9153:5:280965:280970	1091218	15	True				
ANR	1091757	Label	default :	9154:4:280976:280983	1091218	16	True				
ANR	1091758	Identifier	default		1091218	0					
ANR	1091759	ExpressionStatement	"EXCEPT ( ""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"" , * ptmp , ( int ) * ptmp )"	9155:5:280990:281082	1091218	17	True				
ANR	1091760	CallExpression	"EXCEPT ( ""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"" , * ptmp , ( int ) * ptmp )"		1091218	0					
ANR	1091761	Callee	EXCEPT		1091218	0					
ANR	1091762	Identifier	EXCEPT		1091218	0					
ANR	1091763	ArgumentList	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		1091218	1					
ANR	1091764	Argument	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		1091218	0					
ANR	1091765	PrimaryExpression	"""Daemoncore: Can only inherit SafeSock or ReliSocks, not %c (%d)"""		1091218	0					
ANR	1091766	Argument	* ptmp		1091218	1					
ANR	1091767	UnaryOperationExpression	* ptmp		1091218	0					
ANR	1091768	UnaryOperator	*		1091218	0					
ANR	1091769	Identifier	ptmp		1091218	1					
ANR	1091770	Argument	( int ) * ptmp		1091218	2					
ANR	1091771	CastExpression	( int ) * ptmp		1091218	0					
ANR	1091772	CastTarget	int		1091218	0					
ANR	1091773	UnaryOperationExpression	* ptmp		1091218	1					
ANR	1091774	UnaryOperator	*		1091218	0					
ANR	1091775	Identifier	ptmp		1091218	1					
ANR	1091776	BreakStatement	break ;	9156:5:281089:281094	1091218	18	True				
ANR	1091777	ExpressionStatement	ptmp = inherit_list . next ( )	9158:3:281121:281145	1091218	2	True				
ANR	1091778	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091779	Identifier	ptmp		1091218	0					
ANR	1091780	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091781	Callee	inherit_list . next		1091218	0					
ANR	1091782	MemberAccess	inherit_list . next		1091218	0					
ANR	1091783	Identifier	inherit_list		1091218	0					
ANR	1091784	Identifier	next		1091218	1					
ANR	1091785	ArgumentList			1091218	1					
ANR	1091786	ExpressionStatement	inheritedSocks [ numInheritedSocks ] = NULL	9160:2:281153:281193	1091218	34	True				
ANR	1091787	AssignmentExpression	inheritedSocks [ numInheritedSocks ] = NULL		1091218	0		=			
ANR	1091788	ArrayIndexing	inheritedSocks [ numInheritedSocks ]		1091218	0					
ANR	1091789	Identifier	inheritedSocks		1091218	0					
ANR	1091790	Identifier	numInheritedSocks		1091218	1					
ANR	1091791	Identifier	NULL		1091218	1					
ANR	1091792	ExpressionStatement	dc_rsock = NULL	9165:2:281361:281376	1091218	35	True				
ANR	1091793	AssignmentExpression	dc_rsock = NULL		1091218	0		=			
ANR	1091794	Identifier	dc_rsock		1091218	0					
ANR	1091795	Identifier	NULL		1091218	1					
ANR	1091796	ExpressionStatement	dc_ssock = NULL	9166:2:281380:281395	1091218	36	True				
ANR	1091797	AssignmentExpression	dc_ssock = NULL		1091218	0		=			
ANR	1091798	Identifier	dc_ssock		1091218	0					
ANR	1091799	Identifier	NULL		1091218	1					
ANR	1091800	ExpressionStatement	ptmp = inherit_list . next ( )	9167:2:281399:281423	1091218	37	True				
ANR	1091801	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091802	Identifier	ptmp		1091218	0					
ANR	1091803	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091804	Callee	inherit_list . next		1091218	0					
ANR	1091805	MemberAccess	inherit_list . next		1091218	0					
ANR	1091806	Identifier	inherit_list		1091218	0					
ANR	1091807	Identifier	next		1091218	1					
ANR	1091808	ArgumentList			1091218	1					
ANR	1091809	IfStatement	"if ( ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0 )"		1091218	38					
ANR	1091810	Condition	"ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"	9168:6:281431:281471	1091218	0	True				
ANR	1091811	AndExpression	"ptmp && strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"		1091218	0		&&			
ANR	1091812	Identifier	ptmp		1091218	0					
ANR	1091813	EqualityExpression	"strncmp ( ptmp , ""SharedPort:"" , 11 ) == 0"		1091218	1		==			
ANR	1091814	CallExpression	"strncmp ( ptmp , ""SharedPort:"" , 11 )"		1091218	0					
ANR	1091815	Callee	strncmp		1091218	0					
ANR	1091816	Identifier	strncmp		1091218	0					
ANR	1091817	ArgumentList	ptmp		1091218	1					
ANR	1091818	Argument	ptmp		1091218	0					
ANR	1091819	Identifier	ptmp		1091218	0					
ANR	1091820	Argument	"""SharedPort:"""		1091218	1					
ANR	1091821	PrimaryExpression	"""SharedPort:"""		1091218	0					
ANR	1091822	Argument	11		1091218	2					
ANR	1091823	PrimaryExpression	11		1091218	0					
ANR	1091824	PrimaryExpression	0		1091218	1					
ANR	1091825	CompoundStatement		137:50:4357:4357	1091218	1					
ANR	1091826	ExpressionStatement	ptmp += 11	9169:3:281480:281490	1091218	0	True				
ANR	1091827	AssignmentExpression	ptmp += 11		1091218	0		+=			
ANR	1091828	Identifier	ptmp		1091218	0					
ANR	1091829	PrimaryExpression	11		1091218	1					
ANR	1091830	Statement	delete	9170:3:281495:281500	1091218	1	True				
ANR	1091831	ExpressionStatement	m_shared_port_endpoint	9170:10:281502:281524	1091218	2	True				
ANR	1091832	Identifier	m_shared_port_endpoint		1091218	0					
ANR	1091833	ExpressionStatement	m_shared_port_endpoint = new SharedPortEndpoint ( )	9171:3:281529:281578	1091218	3	True				
ANR	1091834	AssignmentExpression	m_shared_port_endpoint = new SharedPortEndpoint ( )		1091218	0		=			
ANR	1091835	Identifier	m_shared_port_endpoint		1091218	0					
ANR	1091836	UnaryExpression	new SharedPortEndpoint ( )		1091218	1					
ANR	1091837	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inheriting a shared port pipe.\\n"" )"	9172:3:281583:281640	1091218	4	True				
ANR	1091838	CallExpression	"dprintf ( D_DAEMONCORE , ""Inheriting a shared port pipe.\\n"" )"		1091218	0					
ANR	1091839	Callee	dprintf		1091218	0					
ANR	1091840	Identifier	dprintf		1091218	0					
ANR	1091841	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091842	Argument	D_DAEMONCORE		1091218	0					
ANR	1091843	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091844	Argument	"""Inheriting a shared port pipe.\\n"""		1091218	1					
ANR	1091845	PrimaryExpression	"""Inheriting a shared port pipe.\\n"""		1091218	0					
ANR	1091846	ExpressionStatement	m_shared_port_endpoint -> deserialize ( ptmp )	9173:3:281645:281686	1091218	5	True				
ANR	1091847	CallExpression	m_shared_port_endpoint -> deserialize ( ptmp )		1091218	0					
ANR	1091848	Callee	m_shared_port_endpoint -> deserialize		1091218	0					
ANR	1091849	PtrMemberAccess	m_shared_port_endpoint -> deserialize		1091218	0					
ANR	1091850	Identifier	m_shared_port_endpoint		1091218	0					
ANR	1091851	Identifier	deserialize		1091218	1					
ANR	1091852	ArgumentList	ptmp		1091218	1					
ANR	1091853	Argument	ptmp		1091218	0					
ANR	1091854	Identifier	ptmp		1091218	0					
ANR	1091855	ExpressionStatement	ptmp = inherit_list . next ( )	9174:3:281691:281715	1091218	6	True				
ANR	1091856	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091857	Identifier	ptmp		1091218	0					
ANR	1091858	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091859	Callee	inherit_list . next		1091218	0					
ANR	1091860	MemberAccess	inherit_list . next		1091218	0					
ANR	1091861	Identifier	inherit_list		1091218	0					
ANR	1091862	Identifier	next		1091218	1					
ANR	1091863	ArgumentList			1091218	1					
ANR	1091864	IfStatement	"if ( ptmp && ( strcmp ( ptmp , ""0"" ) != 0 ) )"		1091218	39					
ANR	1091865	Condition	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"	9176:7:281728:281758	1091218	0	True				
ANR	1091866	AndExpression	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"		1091218	0		&&			
ANR	1091867	Identifier	ptmp		1091218	0					
ANR	1091868	EqualityExpression	"strcmp ( ptmp , ""0"" ) != 0"		1091218	1		!=			
ANR	1091869	CallExpression	"strcmp ( ptmp , ""0"" )"		1091218	0					
ANR	1091870	Callee	strcmp		1091218	0					
ANR	1091871	Identifier	strcmp		1091218	0					
ANR	1091872	ArgumentList	ptmp		1091218	1					
ANR	1091873	Argument	ptmp		1091218	0					
ANR	1091874	Identifier	ptmp		1091218	0					
ANR	1091875	Argument	"""0"""		1091218	1					
ANR	1091876	PrimaryExpression	"""0"""		1091218	0					
ANR	1091877	PrimaryExpression	0		1091218	1					
ANR	1091878	CompoundStatement		145:41:4644:4644	1091218	1					
ANR	1091879	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Inheriting Command Sockets\\n"" )"	9177:3:281767:281819	1091218	0	True				
ANR	1091880	CallExpression	"dprintf ( D_DAEMONCORE , ""Inheriting Command Sockets\\n"" )"		1091218	0					
ANR	1091881	Callee	dprintf		1091218	0					
ANR	1091882	Identifier	dprintf		1091218	0					
ANR	1091883	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091884	Argument	D_DAEMONCORE		1091218	0					
ANR	1091885	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091886	Argument	"""Inheriting Command Sockets\\n"""		1091218	1					
ANR	1091887	PrimaryExpression	"""Inheriting Command Sockets\\n"""		1091218	0					
ANR	1091888	ExpressionStatement	dc_rsock = new ReliSock ( )	9178:3:281824:281849	1091218	1	True				
ANR	1091889	AssignmentExpression	dc_rsock = new ReliSock ( )		1091218	0		=			
ANR	1091890	Identifier	dc_rsock		1091218	0					
ANR	1091891	UnaryExpression	new ReliSock ( )		1091218	1					
ANR	1091892	ExpressionStatement	( ( ReliSock * ) dc_rsock ) -> serialize ( ptmp )	9179:3:281854:281893	1091218	2	True				
ANR	1091893	CallExpression	( ( ReliSock * ) dc_rsock ) -> serialize ( ptmp )		1091218	0					
ANR	1091894	Callee	( ( ReliSock * ) dc_rsock ) -> serialize		1091218	0					
ANR	1091895	PtrMemberAccess	( ( ReliSock * ) dc_rsock ) -> serialize		1091218	0					
ANR	1091896	CastExpression	( ReliSock * ) dc_rsock		1091218	0					
ANR	1091897	CastTarget	ReliSock *		1091218	0					
ANR	1091898	Identifier	dc_rsock		1091218	1					
ANR	1091899	Identifier	serialize		1091218	1					
ANR	1091900	ArgumentList	ptmp		1091218	1					
ANR	1091901	Argument	ptmp		1091218	0					
ANR	1091902	Identifier	ptmp		1091218	0					
ANR	1091903	ExpressionStatement	dc_rsock -> set_inheritable ( FALSE )	9180:3:281898:281930	1091218	3	True				
ANR	1091904	CallExpression	dc_rsock -> set_inheritable ( FALSE )		1091218	0					
ANR	1091905	Callee	dc_rsock -> set_inheritable		1091218	0					
ANR	1091906	PtrMemberAccess	dc_rsock -> set_inheritable		1091218	0					
ANR	1091907	Identifier	dc_rsock		1091218	0					
ANR	1091908	Identifier	set_inheritable		1091218	1					
ANR	1091909	ArgumentList	FALSE		1091218	1					
ANR	1091910	Argument	FALSE		1091218	0					
ANR	1091911	Identifier	FALSE		1091218	0					
ANR	1091912	ExpressionStatement	ptmp = inherit_list . next ( )	9181:3:281935:281959	1091218	4	True				
ANR	1091913	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091914	Identifier	ptmp		1091218	0					
ANR	1091915	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091916	Callee	inherit_list . next		1091218	0					
ANR	1091917	MemberAccess	inherit_list . next		1091218	0					
ANR	1091918	Identifier	inherit_list		1091218	0					
ANR	1091919	Identifier	next		1091218	1					
ANR	1091920	ArgumentList			1091218	1					
ANR	1091921	IfStatement	"if ( ptmp && ( strcmp ( ptmp , ""0"" ) != 0 ) )"		1091218	40					
ANR	1091922	Condition	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"	9183:7:281972:282002	1091218	0	True				
ANR	1091923	AndExpression	"ptmp && ( strcmp ( ptmp , ""0"" ) != 0 )"		1091218	0		&&			
ANR	1091924	Identifier	ptmp		1091218	0					
ANR	1091925	EqualityExpression	"strcmp ( ptmp , ""0"" ) != 0"		1091218	1		!=			
ANR	1091926	CallExpression	"strcmp ( ptmp , ""0"" )"		1091218	0					
ANR	1091927	Callee	strcmp		1091218	0					
ANR	1091928	Identifier	strcmp		1091218	0					
ANR	1091929	ArgumentList	ptmp		1091218	1					
ANR	1091930	Argument	ptmp		1091218	0					
ANR	1091931	Identifier	ptmp		1091218	0					
ANR	1091932	Argument	"""0"""		1091218	1					
ANR	1091933	PrimaryExpression	"""0"""		1091218	0					
ANR	1091934	PrimaryExpression	0		1091218	1					
ANR	1091935	CompoundStatement		152:41:4888:4888	1091218	1					
ANR	1091936	IfStatement	if ( ! m_wants_dc_udp_self )		1091218	0					
ANR	1091937	Condition	! m_wants_dc_udp_self	9184:7:282015:282034	1091218	0	True				
ANR	1091938	UnaryOperationExpression	! m_wants_dc_udp_self		1091218	0					
ANR	1091939	UnaryOperator	!		1091218	0					
ANR	1091940	Identifier	m_wants_dc_udp_self		1091218	1					
ANR	1091941	CompoundStatement		153:30:4920:4920	1091218	1					
ANR	1091942	ExpressionStatement	Sock :: close_serialized_socket ( ptmp )	9187:4:282162:282197	1091218	0	True				
ANR	1091943	CallExpression	Sock :: close_serialized_socket ( ptmp )		1091218	0					
ANR	1091944	Callee	Sock :: close_serialized_socket		1091218	0					
ANR	1091945	Identifier	Sock :: close_serialized_socket		1091218	0					
ANR	1091946	ArgumentList	ptmp		1091218	1					
ANR	1091947	Argument	ptmp		1091218	0					
ANR	1091948	Identifier	ptmp		1091218	0					
ANR	1091949	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removing inherited UDP command socket.\\n"" )"	9188:4:282203:282267	1091218	1	True				
ANR	1091950	CallExpression	"dprintf ( D_DAEMONCORE , ""Removing inherited UDP command socket.\\n"" )"		1091218	0					
ANR	1091951	Callee	dprintf		1091218	0					
ANR	1091952	Identifier	dprintf		1091218	0					
ANR	1091953	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1091954	Argument	D_DAEMONCORE		1091218	0					
ANR	1091955	Identifier	D_DAEMONCORE		1091218	0					
ANR	1091956	Argument	"""Removing inherited UDP command socket.\\n"""		1091218	1					
ANR	1091957	PrimaryExpression	"""Removing inherited UDP command socket.\\n"""		1091218	0					
ANR	1091958	ElseStatement	else		1091218	0					
ANR	1091959	CompoundStatement		159:8:5164:5164	1091218	0					
ANR	1091960	ExpressionStatement	dc_ssock = new SafeSock ( )	9191:4:282288:282313	1091218	0	True				
ANR	1091961	AssignmentExpression	dc_ssock = new SafeSock ( )		1091218	0		=			
ANR	1091962	Identifier	dc_ssock		1091218	0					
ANR	1091963	UnaryExpression	new SafeSock ( )		1091218	1					
ANR	1091964	ExpressionStatement	dc_ssock -> serialize ( ptmp )	9192:4:282319:282344	1091218	1	True				
ANR	1091965	CallExpression	dc_ssock -> serialize ( ptmp )		1091218	0					
ANR	1091966	Callee	dc_ssock -> serialize		1091218	0					
ANR	1091967	PtrMemberAccess	dc_ssock -> serialize		1091218	0					
ANR	1091968	Identifier	dc_ssock		1091218	0					
ANR	1091969	Identifier	serialize		1091218	1					
ANR	1091970	ArgumentList	ptmp		1091218	1					
ANR	1091971	Argument	ptmp		1091218	0					
ANR	1091972	Identifier	ptmp		1091218	0					
ANR	1091973	ExpressionStatement	dc_ssock -> set_inheritable ( FALSE )	9193:4:282350:282382	1091218	2	True				
ANR	1091974	CallExpression	dc_ssock -> set_inheritable ( FALSE )		1091218	0					
ANR	1091975	Callee	dc_ssock -> set_inheritable		1091218	0					
ANR	1091976	PtrMemberAccess	dc_ssock -> set_inheritable		1091218	0					
ANR	1091977	Identifier	dc_ssock		1091218	0					
ANR	1091978	Identifier	set_inheritable		1091218	1					
ANR	1091979	ArgumentList	FALSE		1091218	1					
ANR	1091980	Argument	FALSE		1091218	0					
ANR	1091981	Identifier	FALSE		1091218	0					
ANR	1091982	ExpressionStatement	ptmp = inherit_list . next ( )	9196:3:282393:282417	1091218	1	True				
ANR	1091983	AssignmentExpression	ptmp = inherit_list . next ( )		1091218	0		=			
ANR	1091984	Identifier	ptmp		1091218	0					
ANR	1091985	CallExpression	inherit_list . next ( )		1091218	1					
ANR	1091986	Callee	inherit_list . next		1091218	0					
ANR	1091987	MemberAccess	inherit_list . next		1091218	0					
ANR	1091988	Identifier	inherit_list		1091218	0					
ANR	1091989	Identifier	next		1091218	1					
ANR	1091990	ArgumentList			1091218	1					
ANR	1091991	IdentifierDeclStatement	const char * privEnvName = EnvGetName ( ENV_PRIVATE ) ;	9206:1:282678:282729	1091218	14	True				
ANR	1091992	IdentifierDecl	* privEnvName = EnvGetName ( ENV_PRIVATE )		1091218	0					
ANR	1091993	IdentifierDeclType	const char *		1091218	0					
ANR	1091994	Identifier	privEnvName		1091218	1					
ANR	1091995	AssignmentExpression	* privEnvName = EnvGetName ( ENV_PRIVATE )		1091218	2		=			
ANR	1091996	Identifier	privEnvName		1091218	0					
ANR	1091997	CallExpression	EnvGetName ( ENV_PRIVATE )		1091218	1					
ANR	1091998	Callee	EnvGetName		1091218	0					
ANR	1091999	Identifier	EnvGetName		1091218	0					
ANR	1092000	ArgumentList	ENV_PRIVATE		1091218	1					
ANR	1092001	Argument	ENV_PRIVATE		1091218	0					
ANR	1092002	Identifier	ENV_PRIVATE		1091218	0					
ANR	1092003	IdentifierDeclStatement	const char * privTmp = GetEnv ( privEnvName ) ;	9207:1:282732:282775	1091218	15	True				
ANR	1092004	IdentifierDecl	* privTmp = GetEnv ( privEnvName )		1091218	0					
ANR	1092005	IdentifierDeclType	const char *		1091218	0					
ANR	1092006	Identifier	privTmp		1091218	1					
ANR	1092007	AssignmentExpression	* privTmp = GetEnv ( privEnvName )		1091218	2		=			
ANR	1092008	Identifier	privTmp		1091218	0					
ANR	1092009	CallExpression	GetEnv ( privEnvName )		1091218	1					
ANR	1092010	Callee	GetEnv		1091218	0					
ANR	1092011	Identifier	GetEnv		1091218	0					
ANR	1092012	ArgumentList	privEnvName		1091218	1					
ANR	1092013	Argument	privEnvName		1091218	0					
ANR	1092014	Identifier	privEnvName		1091218	0					
ANR	1092015	IfStatement	if ( privTmp != NULL )		1091218	16					
ANR	1092016	Condition	privTmp != NULL	9208:6:282783:282797	1091218	0	True				
ANR	1092017	EqualityExpression	privTmp != NULL		1091218	0		!=			
ANR	1092018	Identifier	privTmp		1091218	0					
ANR	1092019	Identifier	NULL		1091218	1					
ANR	1092020	CompoundStatement		177:24:5683:5683	1091218	1					
ANR	1092021	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Processing %s from parent\\n"" , privEnvName )"	9209:2:282805:282873	1091218	0	True				
ANR	1092022	CallExpression	"dprintf ( D_DAEMONCORE , ""Processing %s from parent\\n"" , privEnvName )"		1091218	0					
ANR	1092023	Callee	dprintf		1091218	0					
ANR	1092024	Identifier	dprintf		1091218	0					
ANR	1092025	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1092026	Argument	D_DAEMONCORE		1091218	0					
ANR	1092027	Identifier	D_DAEMONCORE		1091218	0					
ANR	1092028	Argument	"""Processing %s from parent\\n"""		1091218	1					
ANR	1092029	PrimaryExpression	"""Processing %s from parent\\n"""		1091218	0					
ANR	1092030	Argument	privEnvName		1091218	2					
ANR	1092031	Identifier	privEnvName		1091218	0					
ANR	1092032	IfStatement	if ( ! privTmp )		1091218	17					
ANR	1092033	Condition	! privTmp	9211:4:282882:282889	1091218	0	True				
ANR	1092034	UnaryOperationExpression	! privTmp		1091218	0					
ANR	1092035	UnaryOperator	!		1091218	0					
ANR	1092036	Identifier	privTmp		1091218	1					
ANR	1092037	CompoundStatement		181:1:5775:5775	1091218	1					
ANR	1092038	ReturnStatement	return ;	9213:2:282897:282903	1091218	0	True				
ANR	1092039	IdentifierDeclStatement	"StringList private_list ( privTmp , "" "" ) ;"	9216:1:282911:282948	1091218	18	True				
ANR	1092040	IdentifierDecl	"private_list ( privTmp , "" "" )"		1091218	0					
ANR	1092041	IdentifierDeclType	StringList		1091218	0					
ANR	1092042	Identifier	private_list		1091218	1					
ANR	1092043	Expression	"privTmp , "" """		1091218	2					
ANR	1092044	Identifier	privTmp		1091218	0					
ANR	1092045	PrimaryExpression	""" """		1091218	1					
ANR	1092046	ExpressionStatement	UnsetEnv ( privEnvName )	9217:1:282951:282974	1091218	19	True				
ANR	1092047	CallExpression	UnsetEnv ( privEnvName )		1091218	0					
ANR	1092048	Callee	UnsetEnv		1091218	0					
ANR	1092049	Identifier	UnsetEnv		1091218	0					
ANR	1092050	ArgumentList	privEnvName		1091218	1					
ANR	1092051	Argument	privEnvName		1091218	0					
ANR	1092052	Identifier	privEnvName		1091218	0					
ANR	1092053	ExpressionStatement	private_list . rewind ( )	9219:1:282978:282999	1091218	20	True				
ANR	1092054	CallExpression	private_list . rewind ( )		1091218	0					
ANR	1092055	Callee	private_list . rewind		1091218	0					
ANR	1092056	MemberAccess	private_list . rewind		1091218	0					
ANR	1092057	Identifier	private_list		1091218	0					
ANR	1092058	Identifier	rewind		1091218	1					
ANR	1092059	ArgumentList			1091218	1					
ANR	1092060	WhileStatement	while ( ( ptmp = private_list . next ( ) ) != NULL )		1091218	21					
ANR	1092061	Condition	( ptmp = private_list . next ( ) ) != NULL	9220:7:283008:283043	1091218	0	True				
ANR	1092062	EqualityExpression	( ptmp = private_list . next ( ) ) != NULL		1091218	0		!=			
ANR	1092063	AssignmentExpression	ptmp = private_list . next ( )		1091218	0		=			
ANR	1092064	Identifier	ptmp		1091218	0					
ANR	1092065	CallExpression	private_list . next ( )		1091218	1					
ANR	1092066	Callee	private_list . next		1091218	0					
ANR	1092067	MemberAccess	private_list . next		1091218	0					
ANR	1092068	Identifier	private_list		1091218	0					
ANR	1092069	Identifier	next		1091218	1					
ANR	1092070	ArgumentList			1091218	1					
ANR	1092071	Identifier	NULL		1091218	1					
ANR	1092072	CompoundStatement		190:1:5929:5929	1091218	1					
ANR	1092073	IfStatement	"if ( ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0 )"		1091218	0					
ANR	1092074	Condition	"ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"	9222:6:283055:283095	1091218	0	True				
ANR	1092075	AndExpression	"ptmp && strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"		1091218	0		&&			
ANR	1092076	Identifier	ptmp		1091218	0					
ANR	1092077	EqualityExpression	"strncmp ( ptmp , ""SessionKey:"" , 11 ) == 0"		1091218	1		==			
ANR	1092078	CallExpression	"strncmp ( ptmp , ""SessionKey:"" , 11 )"		1091218	0					
ANR	1092079	Callee	strncmp		1091218	0					
ANR	1092080	Identifier	strncmp		1091218	0					
ANR	1092081	ArgumentList	ptmp		1091218	1					
ANR	1092082	Argument	ptmp		1091218	0					
ANR	1092083	Identifier	ptmp		1091218	0					
ANR	1092084	Argument	"""SessionKey:"""		1091218	1					
ANR	1092085	PrimaryExpression	"""SessionKey:"""		1091218	0					
ANR	1092086	Argument	11		1091218	2					
ANR	1092087	PrimaryExpression	11		1091218	0					
ANR	1092088	PrimaryExpression	0		1091218	1					
ANR	1092089	CompoundStatement		207:3:6432:6443	1091218	1					
ANR	1092090	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Removing session key.\\n"" )"	9223:3:283104:283152	1091218	0	True				
ANR	1092091	CallExpression	"dprintf ( D_DAEMONCORE , ""Removing session key.\\n"" )"		1091218	0					
ANR	1092092	Callee	dprintf		1091218	0					
ANR	1092093	Identifier	dprintf		1091218	0					
ANR	1092094	ArgumentList	D_DAEMONCORE		1091218	1					
ANR	1092095	Argument	D_DAEMONCORE		1091218	0					
ANR	1092096	Identifier	D_DAEMONCORE		1091218	0					
ANR	1092097	Argument	"""Removing session key.\\n"""		1091218	1					
ANR	1092098	PrimaryExpression	"""Removing session key.\\n"""		1091218	0					
ANR	1092099	IdentifierDeclStatement	ClaimIdParser claimid ( ptmp + 11 ) ;	9224:3:283157:283187	1091218	1	True				
ANR	1092100	IdentifierDecl	claimid ( ptmp + 11 )		1091218	0					
ANR	1092101	IdentifierDeclType	ClaimIdParser		1091218	0					
ANR	1092102	Identifier	claimid		1091218	1					
ANR	1092103	AdditiveExpression	ptmp + 11		1091218	2		+			
ANR	1092104	Identifier	ptmp		1091218	0					
ANR	1092105	PrimaryExpression	11		1091218	1					
ANR	1092106	IdentifierDeclStatement	"bool rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 ) ;"	9225:3:283192:283389	1091218	2	True				
ANR	1092107	IdentifierDecl	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		1091218	0					
ANR	1092108	IdentifierDeclType	bool		1091218	0					
ANR	1092109	Identifier	rc		1091218	1					
ANR	1092110	AssignmentExpression	"rc = getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		1091218	2		=			
ANR	1092111	Identifier	rc		1091218	0					
ANR	1092112	CallExpression	"getSecMan ( ) -> CreateNonNegotiatedSecuritySession ( DAEMON , claimid . secSessionId ( ) , claimid . secSessionKey ( ) , claimid . secSessionInfo ( ) , CONDOR_PARENT_FQU , NULL , 0 )"		1091218	1					
ANR	1092113	Callee	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1091218	0					
ANR	1092114	PtrMemberAccess	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1091218	0					
ANR	1092115	CallExpression	getSecMan ( )		1091218	0					
ANR	1092116	Callee	getSecMan		1091218	0					
ANR	1092117	Identifier	getSecMan		1091218	0					
ANR	1092118	ArgumentList			1091218	1					
ANR	1092119	Identifier	CreateNonNegotiatedSecuritySession		1091218	1					
ANR	1092120	ArgumentList	DAEMON		1091218	1					
ANR	1092121	Argument	DAEMON		1091218	0					
ANR	1092122	Identifier	DAEMON		1091218	0					
ANR	1092123	Argument	claimid . secSessionId ( )		1091218	1					
ANR	1092124	CallExpression	claimid . secSessionId ( )		1091218	0					
ANR	1092125	Callee	claimid . secSessionId		1091218	0					
ANR	1092126	MemberAccess	claimid . secSessionId		1091218	0					
ANR	1092127	Identifier	claimid		1091218	0					
ANR	1092128	Identifier	secSessionId		1091218	1					
ANR	1092129	ArgumentList			1091218	1					
ANR	1092130	Argument	claimid . secSessionKey ( )		1091218	2					
ANR	1092131	CallExpression	claimid . secSessionKey ( )		1091218	0					
ANR	1092132	Callee	claimid . secSessionKey		1091218	0					
ANR	1092133	MemberAccess	claimid . secSessionKey		1091218	0					
ANR	1092134	Identifier	claimid		1091218	0					
ANR	1092135	Identifier	secSessionKey		1091218	1					
ANR	1092136	ArgumentList			1091218	1					
ANR	1092137	Argument	claimid . secSessionInfo ( )		1091218	3					
ANR	1092138	CallExpression	claimid . secSessionInfo ( )		1091218	0					
ANR	1092139	Callee	claimid . secSessionInfo		1091218	0					
ANR	1092140	MemberAccess	claimid . secSessionInfo		1091218	0					
ANR	1092141	Identifier	claimid		1091218	0					
ANR	1092142	Identifier	secSessionInfo		1091218	1					
ANR	1092143	ArgumentList			1091218	1					
ANR	1092144	Argument	CONDOR_PARENT_FQU		1091218	4					
ANR	1092145	Identifier	CONDOR_PARENT_FQU		1091218	0					
ANR	1092146	Argument	NULL		1091218	5					
ANR	1092147	Identifier	NULL		1091218	0					
ANR	1092148	Argument	0		1091218	6					
ANR	1092149	PrimaryExpression	0		1091218	0					
ANR	1092150	IfStatement	if ( ! rc )		1091218	3					
ANR	1092151	Condition	! rc	9233:6:283397:283399	1091218	0	True				
ANR	1092152	UnaryOperationExpression	! rc		1091218	0					
ANR	1092153	UnaryOperator	!		1091218	0					
ANR	1092154	Identifier	rc		1091218	1					
ANR	1092155	CompoundStatement		203:3:6287:6287	1091218	1					
ANR	1092156	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: Failed to recreate security session in child daemon.\\n"" )"	9235:4:283411:283493	1091218	0	True				
ANR	1092157	CallExpression	"dprintf ( D_ALWAYS , ""Error: Failed to recreate security session in child daemon.\\n"" )"		1091218	0					
ANR	1092158	Callee	dprintf		1091218	0					
ANR	1092159	Identifier	dprintf		1091218	0					
ANR	1092160	ArgumentList	D_ALWAYS		1091218	1					
ANR	1092161	Argument	D_ALWAYS		1091218	0					
ANR	1092162	Identifier	D_ALWAYS		1091218	0					
ANR	1092163	Argument	"""Error: Failed to recreate security session in child daemon.\\n"""		1091218	1					
ANR	1092164	PrimaryExpression	"""Error: Failed to recreate security session in child daemon.\\n"""		1091218	0					
ANR	1092165	IdentifierDeclStatement	IpVerify * ipv = getSecMan ( ) -> getIpVerify ( ) ;	9237:3:283503:283545	1091218	4	True				
ANR	1092166	IdentifierDecl	* ipv = getSecMan ( ) -> getIpVerify ( )		1091218	0					
ANR	1092167	IdentifierDeclType	IpVerify *		1091218	0					
ANR	1092168	Identifier	ipv		1091218	1					
ANR	1092169	AssignmentExpression	* ipv = getSecMan ( ) -> getIpVerify ( )		1091218	2		=			
ANR	1092170	Identifier	ipv		1091218	0					
ANR	1092171	CallExpression	getSecMan ( ) -> getIpVerify ( )		1091218	1					
ANR	1092172	Callee	getSecMan ( ) -> getIpVerify		1091218	0					
ANR	1092173	PtrMemberAccess	getSecMan ( ) -> getIpVerify		1091218	0					
ANR	1092174	CallExpression	getSecMan ( )		1091218	0					
ANR	1092175	Callee	getSecMan		1091218	0					
ANR	1092176	Identifier	getSecMan		1091218	0					
ANR	1092177	ArgumentList			1091218	1					
ANR	1092178	Identifier	getIpVerify		1091218	1					
ANR	1092179	ArgumentList			1091218	1					
ANR	1092180	IdentifierDeclStatement	MyString id ;	9238:3:283550:283561	1091218	5	True				
ANR	1092181	IdentifierDecl	id		1091218	0					
ANR	1092182	IdentifierDeclType	MyString		1091218	0					
ANR	1092183	Identifier	id		1091218	1					
ANR	1092184	ExpressionStatement	"id . sprintf ( ""%s"" , CONDOR_PARENT_FQU )"	9239:3:283566:283601	1091218	6	True				
ANR	1092185	CallExpression	"id . sprintf ( ""%s"" , CONDOR_PARENT_FQU )"		1091218	0					
ANR	1092186	Callee	id . sprintf		1091218	0					
ANR	1092187	MemberAccess	id . sprintf		1091218	0					
ANR	1092188	Identifier	id		1091218	0					
ANR	1092189	Identifier	sprintf		1091218	1					
ANR	1092190	ArgumentList	"""%s"""		1091218	1					
ANR	1092191	Argument	"""%s"""		1091218	0					
ANR	1092192	PrimaryExpression	"""%s"""		1091218	0					
ANR	1092193	Argument	CONDOR_PARENT_FQU		1091218	1					
ANR	1092194	Identifier	CONDOR_PARENT_FQU		1091218	0					
ANR	1092195	ExpressionStatement	"ipv -> PunchHole ( DAEMON , id )"	9240:3:283606:283632	1091218	7	True				
ANR	1092196	CallExpression	"ipv -> PunchHole ( DAEMON , id )"		1091218	0					
ANR	1092197	Callee	ipv -> PunchHole		1091218	0					
ANR	1092198	PtrMemberAccess	ipv -> PunchHole		1091218	0					
ANR	1092199	Identifier	ipv		1091218	0					
ANR	1092200	Identifier	PunchHole		1091218	1					
ANR	1092201	ArgumentList	DAEMON		1091218	1					
ANR	1092202	Argument	DAEMON		1091218	0					
ANR	1092203	Identifier	DAEMON		1091218	0					
ANR	1092204	Argument	id		1091218	1					
ANR	1092205	Identifier	id		1091218	0					
ANR	1092206	ReturnType	void		1091218	1					
ANR	1092207	Identifier	DaemonCore :: Inherit		1091218	2					
ANR	1092208	ParameterList			1091218	3					
ANR	1092209	CFGEntryNode	ENTRY		1091218		True				
ANR	1092210	CFGExitNode	EXIT		1091218		True				
ANR	1092211	Symbol	ENV_INHERIT		1091218						
ANR	1092212	Symbol	watch_ppid		1091218						
ANR	1092213	Symbol	pidtmp -> pipeEnd		1091218						
ANR	1092214	Symbol	claimid . secSessionInfo		1091218						
ANR	1092215	Symbol	numInheritedSocks		1091218						
ANR	1092216	Symbol	claimid		1091218						
ANR	1092217	Symbol	* getSecMan		1091218						
ANR	1092218	Symbol	claimid . secSessionKey		1091218						
ANR	1092219	Symbol	ERROR_ACCESS_DENIED		1091218						
ANR	1092220	Symbol	strncmp		1091218						
ANR	1092221	Symbol	SYNCHRONIZE		1091218						
ANR	1092222	Symbol	ptmp		1091218						
ANR	1092223	Symbol	inherit_list . next		1091218						
ANR	1092224	Symbol	tmp		1091218						
ANR	1092225	Symbol	CONDOR_PARENT_FQU		1091218						
ANR	1092226	Symbol	id		1091218						
ANR	1092227	Symbol	m_wants_dc_udp_self		1091218						
ANR	1092228	Symbol	already_inherited		1091218						
ANR	1092229	Symbol	strcmp		1091218						
ANR	1092230	Symbol	NULL		1091218						
ANR	1092231	Symbol	pidtmp -> hProcess		1091218						
ANR	1092232	Symbol	privTmp		1091218						
ANR	1092233	Symbol	TRUE		1091218						
ANR	1092234	Symbol	* pidtmp		1091218						
ANR	1092235	Symbol	getSecMan		1091218						
ANR	1092236	Symbol	ipv		1091218						
ANR	1092237	Symbol	ppid		1091218						
ANR	1092238	Symbol	rc		1091218						
ANR	1092239	Symbol	pidtmp -> reaper_id		1091218						
ANR	1092240	Symbol	envName		1091218						
ANR	1092241	Symbol	GetLastError		1091218						
ANR	1092242	Symbol	true		1091218						
ANR	1092243	Symbol	pidtmp -> sinful_string		1091218						
ANR	1092244	Symbol	* inheritedSocks		1091218						
ANR	1092245	Symbol	pidtmp		1091218						
ANR	1092246	Symbol	GetEnv		1091218						
ANR	1092247	Symbol	DAEMON		1091218						
ANR	1092248	Symbol	pidtmp -> is_local		1091218						
ANR	1092249	Symbol	inheritbuf		1091218						
ANR	1092250	Symbol	* pidTable		1091218						
ANR	1092251	Symbol	pidtmp -> was_not_responding		1091218						
ANR	1092252	Symbol	pidtmp -> deallocate		1091218						
ANR	1092253	Symbol	EnvGetName		1091218						
ANR	1092254	Symbol	inheritedSocks		1091218						
ANR	1092255	Symbol	dc_ssock		1091218						
ANR	1092256	Symbol	pidtmp -> hung_tid		1091218						
ANR	1092257	Symbol	atoi		1091218						
ANR	1092258	Symbol	pidTable		1091218						
ANR	1092259	Symbol	dc_rsock		1091218						
ANR	1092260	Symbol	claimid . secSessionId		1091218						
ANR	1092261	Symbol	private_list . next		1091218						
ANR	1092262	Symbol	D_DAEMONCORE		1091218						
ANR	1092263	Symbol	pidTable -> insert		1091218						
ANR	1092264	Symbol	* numInheritedSocks		1091218						
ANR	1092265	Symbol	false		1091218						
ANR	1092266	Symbol	D_ALWAYS		1091218						
ANR	1092267	Symbol	inherit_list		1091218						
ANR	1092268	Symbol	MAX_SOCKS_INHERITED		1091218						
ANR	1092269	Symbol	insert_result		1091218						
ANR	1092270	Symbol	privEnvName		1091218						
ANR	1092271	Symbol	getSecMan ( ) -> getIpVerify		1091218						
ANR	1092272	Symbol	pidtmp -> pid		1091218						
ANR	1092273	Symbol	ENV_PRIVATE		1091218						
ANR	1092274	Symbol	m_shared_port_endpoint		1091218						
ANR	1092275	Symbol	pidtmp -> hThread		1091218						
ANR	1092276	Symbol	FALSE		1091218						
ANR	1092277	Symbol	getSecMan ( ) -> CreateNonNegotiatedSecuritySession		1091218						
ANR	1092278	Symbol	strdup		1091218						
ANR	1092279	Symbol	PROCESS_QUERY_INFORMATION		1091218						
ANR	1092280	Symbol	private_list		1091218						
ANR	1092281	Symbol	* ptmp		1091218						
ANR	1092282	Symbol	pidtmp -> parent_is_local		1091218						
ANR	1092283	Function	DaemonCore :: SetDaemonSockName	9246:0:283651:283746							
ANR	1092284	FunctionDef	DaemonCore :: SetDaemonSockName (char const * sock_name)		1092283	0					
ANR	1092285	CompoundStatement		9248:0:283711:283746	1092283	0					
ANR	1092286	ExpressionStatement	m_daemon_sock_name = sock_name	9249:1:283714:283744	1092283	0	True				
ANR	1092287	AssignmentExpression	m_daemon_sock_name = sock_name		1092283	0		=			
ANR	1092288	Identifier	m_daemon_sock_name		1092283	0					
ANR	1092289	Identifier	sock_name		1092283	1					
ANR	1092290	ReturnType	void		1092283	1					
ANR	1092291	Identifier	DaemonCore :: SetDaemonSockName		1092283	2					
ANR	1092292	ParameterList	char const * sock_name		1092283	3					
ANR	1092293	Parameter	char const * sock_name	9247:31:283687:283707	1092283	0	True				
ANR	1092294	ParameterType	char const *		1092283	0					
ANR	1092295	Identifier	sock_name		1092283	1					
ANR	1092296	CFGEntryNode	ENTRY		1092283		True				
ANR	1092297	CFGExitNode	EXIT		1092283		True				
ANR	1092298	Symbol	m_daemon_sock_name		1092283						
ANR	1092299	Symbol	sock_name		1092283						
ANR	1092300	Function	DaemonCore :: InitDCCommandSocket	9252:0:283749:288173							
ANR	1092301	FunctionDef	DaemonCore :: InitDCCommandSocket (int command_port)		1092300	0					
ANR	1092302	CompoundStatement		9254:0:283806:288173	1092300	0					
ANR	1092303	IfStatement	if ( command_port == 0 )		1092300	0					
ANR	1092304	Condition	command_port == 0	9255:5:283813:283829	1092300	0	True				
ANR	1092305	EqualityExpression	command_port == 0		1092300	0		==			
ANR	1092306	Identifier	command_port		1092300	0					
ANR	1092307	PrimaryExpression	0		1092300	1					
ANR	1092308	CompoundStatement		2:25:26:26	1092300	1					
ANR	1092309	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: No command port requested.\\n"" )"	9257:2:283878:283941	1092300	0	True				
ANR	1092310	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: No command port requested.\\n"" )"		1092300	0					
ANR	1092311	Callee	dprintf		1092300	0					
ANR	1092312	Identifier	dprintf		1092300	0					
ANR	1092313	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092314	Argument	D_ALWAYS		1092300	0					
ANR	1092315	Identifier	D_ALWAYS		1092300	0					
ANR	1092316	Argument	"""DaemonCore: No command port requested.\\n"""		1092300	1					
ANR	1092317	PrimaryExpression	"""DaemonCore: No command port requested.\\n"""		1092300	0					
ANR	1092318	ReturnStatement	return ;	9258:2:283945:283951	1092300	1	True				
ANR	1092319	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Setting up command socket\\n"" )"	9261:1:283958:284012	1092300	1	True				
ANR	1092320	CallExpression	"dprintf ( D_DAEMONCORE , ""Setting up command socket\\n"" )"		1092300	0					
ANR	1092321	Callee	dprintf		1092300	0					
ANR	1092322	Identifier	dprintf		1092300	0					
ANR	1092323	ArgumentList	D_DAEMONCORE		1092300	1					
ANR	1092324	Argument	D_DAEMONCORE		1092300	0					
ANR	1092325	Identifier	D_DAEMONCORE		1092300	0					
ANR	1092326	Argument	"""Setting up command socket\\n"""		1092300	1					
ANR	1092327	PrimaryExpression	"""Setting up command socket\\n"""		1092300	0					
ANR	1092328	ExpressionStatement	Inherit ( )	9264:1:284072:284081	1092300	2	True				
ANR	1092329	CallExpression	Inherit ( )		1092300	0					
ANR	1092330	Callee	Inherit		1092300	0					
ANR	1092331	Identifier	Inherit		1092300	0					
ANR	1092332	ArgumentList			1092300	1					
ANR	1092333	ExpressionStatement	InitSharedPort ( true )	9267:1:284143:284163	1092300	3	True				
ANR	1092334	CallExpression	InitSharedPort ( true )		1092300	0					
ANR	1092335	Callee	InitSharedPort		1092300	0					
ANR	1092336	Identifier	InitSharedPort		1092300	0					
ANR	1092337	ArgumentList	true		1092300	1					
ANR	1092338	Argument	true		1092300	0					
ANR	1092339	Identifier	true		1092300	0					
ANR	1092340	IfStatement	if ( ! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) ) )		1092300	4					
ANR	1092341	Condition	! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) )	9271:5:284281:284370	1092300	0	True				
ANR	1092342	AndExpression	! m_shared_port_endpoint && ( dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL ) )		1092300	0		&&			
ANR	1092343	UnaryOperationExpression	! m_shared_port_endpoint		1092300	0					
ANR	1092344	UnaryOperator	!		1092300	0					
ANR	1092345	Identifier	m_shared_port_endpoint		1092300	1					
ANR	1092346	OrExpression	dc_rsock == NULL || ( m_wants_dc_udp_self && dc_ssock == NULL )		1092300	1		||			
ANR	1092347	EqualityExpression	dc_rsock == NULL		1092300	0		==			
ANR	1092348	Identifier	dc_rsock		1092300	0					
ANR	1092349	Identifier	NULL		1092300	1					
ANR	1092350	AndExpression	m_wants_dc_udp_self && dc_ssock == NULL		1092300	1		&&			
ANR	1092351	Identifier	m_wants_dc_udp_self		1092300	0					
ANR	1092352	EqualityExpression	dc_ssock == NULL		1092300	1		==			
ANR	1092353	Identifier	dc_ssock		1092300	0					
ANR	1092354	Identifier	NULL		1092300	1					
ANR	1092355	CompoundStatement		18:98:567:567	1092300	1					
ANR	1092356	IfStatement	if ( ! dc_rsock )		1092300	0					
ANR	1092357	Condition	! dc_rsock	9272:6:284382:284390	1092300	0	True				
ANR	1092358	UnaryOperationExpression	! dc_rsock		1092300	0					
ANR	1092359	UnaryOperator	!		1092300	0					
ANR	1092360	Identifier	dc_rsock		1092300	1					
ANR	1092361	CompoundStatement		19:18:587:587	1092300	1					
ANR	1092362	Statement	dc_rsock	9273:3:284399:284406	1092300	0	True				
ANR	1092363	Statement	=	9273:12:284408:284408	1092300	1	True				
ANR	1092364	Statement	new	9273:14:284410:284412	1092300	2	True				
ANR	1092365	ExpressionStatement	ReliSock	9273:18:284414:284422	1092300	3	True				
ANR	1092366	Identifier	ReliSock		1092300	0					
ANR	1092367	IfStatement	if ( ! dc_rsock )		1092300	1					
ANR	1092368	Condition	! dc_rsock	9275:6:284434:284442	1092300	0	True				
ANR	1092369	UnaryOperationExpression	! dc_rsock		1092300	0					
ANR	1092370	UnaryOperator	!		1092300	0					
ANR	1092371	Identifier	dc_rsock		1092300	1					
ANR	1092372	CompoundStatement		22:18:639:639	1092300	1					
ANR	1092373	ExpressionStatement	"EXCEPT ( ""Unable to create command Relisock"" )"	9276:3:284451:284496	1092300	0	True				
ANR	1092374	CallExpression	"EXCEPT ( ""Unable to create command Relisock"" )"		1092300	0					
ANR	1092375	Callee	EXCEPT		1092300	0					
ANR	1092376	Identifier	EXCEPT		1092300	0					
ANR	1092377	ArgumentList	"""Unable to create command Relisock"""		1092300	1					
ANR	1092378	Argument	"""Unable to create command Relisock"""		1092300	0					
ANR	1092379	PrimaryExpression	"""Unable to create command Relisock"""		1092300	0					
ANR	1092380	IfStatement	if ( m_wants_dc_udp_self )		1092300	2					
ANR	1092381	Condition	m_wants_dc_udp_self	9278:6:284508:284526	1092300	0	True				
ANR	1092382	Identifier	m_wants_dc_udp_self		1092300	0					
ANR	1092383	CompoundStatement		25:27:722:722	1092300	1					
ANR	1092384	IfStatement	if ( ! dc_ssock )		1092300	0					
ANR	1092385	Condition	! dc_ssock	9279:7:284538:284546	1092300	0	True				
ANR	1092386	UnaryOperationExpression	! dc_ssock		1092300	0					
ANR	1092387	UnaryOperator	!		1092300	0					
ANR	1092388	Identifier	dc_ssock		1092300	1					
ANR	1092389	CompoundStatement		26:19:743:743	1092300	1					
ANR	1092390	Statement	dc_ssock	9280:4:284556:284563	1092300	0	True				
ANR	1092391	Statement	=	9280:13:284565:284565	1092300	1	True				
ANR	1092392	Statement	new	9280:15:284567:284569	1092300	2	True				
ANR	1092393	ExpressionStatement	SafeSock	9280:19:284571:284579	1092300	3	True				
ANR	1092394	Identifier	SafeSock		1092300	0					
ANR	1092395	IfStatement	if ( ! dc_ssock )		1092300	1					
ANR	1092396	Condition	! dc_ssock	9282:7:284593:284601	1092300	0	True				
ANR	1092397	UnaryOperationExpression	! dc_ssock		1092300	0					
ANR	1092398	UnaryOperator	!		1092300	0					
ANR	1092399	Identifier	dc_ssock		1092300	1					
ANR	1092400	CompoundStatement		29:19:798:798	1092300	1					
ANR	1092401	ExpressionStatement	"EXCEPT ( ""Unable to create command SafeSock"" )"	9283:4:284611:284656	1092300	0	True				
ANR	1092402	CallExpression	"EXCEPT ( ""Unable to create command SafeSock"" )"		1092300	0					
ANR	1092403	Callee	EXCEPT		1092300	0					
ANR	1092404	Identifier	EXCEPT		1092300	0					
ANR	1092405	ArgumentList	"""Unable to create command SafeSock"""		1092300	1					
ANR	1092406	Argument	"""Unable to create command SafeSock"""		1092300	0					
ANR	1092407	PrimaryExpression	"""Unable to create command SafeSock"""		1092300	0					
ANR	1092408	ElseStatement	else		1092300	0					
ANR	1092409	CompoundStatement		33:7:867:867	1092300	0					
ANR	1092410	ExpressionStatement	ASSERT ( dc_ssock == NULL )	9287:3:284679:284703	1092300	0	True				
ANR	1092411	CallExpression	ASSERT ( dc_ssock == NULL )		1092300	0					
ANR	1092412	Callee	ASSERT		1092300	0					
ANR	1092413	Identifier	ASSERT		1092300	0					
ANR	1092414	ArgumentList	dc_ssock == NULL		1092300	1					
ANR	1092415	Argument	dc_ssock == NULL		1092300	0					
ANR	1092416	EqualityExpression	dc_ssock == NULL		1092300	0		==			
ANR	1092417	Identifier	dc_ssock		1092300	0					
ANR	1092418	Identifier	NULL		1092300	1					
ANR	1092419	ExpressionStatement	"InitCommandSockets ( command_port , dc_rsock , dc_ssock , true )"	9290:2:284776:284834	1092300	3	True				
ANR	1092420	CallExpression	"InitCommandSockets ( command_port , dc_rsock , dc_ssock , true )"		1092300	0					
ANR	1092421	Callee	InitCommandSockets		1092300	0					
ANR	1092422	Identifier	InitCommandSockets		1092300	0					
ANR	1092423	ArgumentList	command_port		1092300	1					
ANR	1092424	Argument	command_port		1092300	0					
ANR	1092425	Identifier	command_port		1092300	0					
ANR	1092426	Argument	dc_rsock		1092300	1					
ANR	1092427	Identifier	dc_rsock		1092300	0					
ANR	1092428	Argument	dc_ssock		1092300	2					
ANR	1092429	Identifier	dc_ssock		1092300	0					
ANR	1092430	Argument	true		1092300	3					
ANR	1092431	Identifier	true		1092300	0					
ANR	1092432	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR ) )		1092300	5					
ANR	1092433	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )	9296:5:285009:285059	1092300	0	True				
ANR	1092434	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_COLLECTOR )		1092300	0					
ANR	1092435	Callee	get_mySubSystem ( ) -> isType		1092300	0					
ANR	1092436	PtrMemberAccess	get_mySubSystem ( ) -> isType		1092300	0					
ANR	1092437	CallExpression	get_mySubSystem ( )		1092300	0					
ANR	1092438	Callee	get_mySubSystem		1092300	0					
ANR	1092439	Identifier	get_mySubSystem		1092300	0					
ANR	1092440	ArgumentList			1092300	1					
ANR	1092441	Identifier	isType		1092300	1					
ANR	1092442	ArgumentList	SUBSYSTEM_TYPE_COLLECTOR		1092300	1					
ANR	1092443	Argument	SUBSYSTEM_TYPE_COLLECTOR		1092300	0					
ANR	1092444	Identifier	SUBSYSTEM_TYPE_COLLECTOR		1092300	0					
ANR	1092445	CompoundStatement		47:2:1326:1338	1092300	1					
ANR	1092446	IdentifierDeclStatement	int desired_size ;	9297:2:285067:285083	1092300	0	True				
ANR	1092447	IdentifierDecl	desired_size		1092300	0					
ANR	1092448	IdentifierDeclType	int		1092300	0					
ANR	1092449	Identifier	desired_size		1092300	1					
ANR	1092450	IdentifierDeclStatement	MyString msg ;	9300:2:285133:285145	1092300	1	True				
ANR	1092451	IdentifierDecl	msg		1092300	0					
ANR	1092452	IdentifierDeclType	MyString		1092300	0					
ANR	1092453	Identifier	msg		1092300	1					
ANR	1092454	IfStatement	if ( dc_ssock )		1092300	2					
ANR	1092455	Condition	dc_ssock	9302:6:285154:285161	1092300	0	True				
ANR	1092456	Identifier	dc_ssock		1092300	0					
ANR	1092457	CompoundStatement		54:3:1547:1601	1092300	1					
ANR	1092458	ExpressionStatement	"desired_size = param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"	9305:3:285262:285349	1092300	0	True				
ANR	1092459	AssignmentExpression	"desired_size = param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"		1092300	0		=			
ANR	1092460	Identifier	desired_size		1092300	0					
ANR	1092461	CallExpression	"param_integer ( ""COLLECTOR_SOCKET_BUFSIZE"" , 10000 * 1024 , 1024 )"		1092300	1					
ANR	1092462	Callee	param_integer		1092300	0					
ANR	1092463	Identifier	param_integer		1092300	0					
ANR	1092464	ArgumentList	"""COLLECTOR_SOCKET_BUFSIZE"""		1092300	1					
ANR	1092465	Argument	"""COLLECTOR_SOCKET_BUFSIZE"""		1092300	0					
ANR	1092466	PrimaryExpression	"""COLLECTOR_SOCKET_BUFSIZE"""		1092300	0					
ANR	1092467	Argument	10000 * 1024		1092300	1					
ANR	1092468	MultiplicativeExpression	10000 * 1024		1092300	0		*			
ANR	1092469	PrimaryExpression	10000		1092300	0					
ANR	1092470	PrimaryExpression	1024		1092300	1					
ANR	1092471	Argument	1024		1092300	2					
ANR	1092472	PrimaryExpression	1024		1092300	0					
ANR	1092473	IdentifierDeclStatement	int final_udp = dc_ssock -> set_os_buffers ( desired_size ) ;	9307:3:285354:285408	1092300	1	True				
ANR	1092474	IdentifierDecl	final_udp = dc_ssock -> set_os_buffers ( desired_size )		1092300	0					
ANR	1092475	IdentifierDeclType	int		1092300	0					
ANR	1092476	Identifier	final_udp		1092300	1					
ANR	1092477	AssignmentExpression	final_udp = dc_ssock -> set_os_buffers ( desired_size )		1092300	2		=			
ANR	1092478	Identifier	final_udp		1092300	0					
ANR	1092479	CallExpression	dc_ssock -> set_os_buffers ( desired_size )		1092300	1					
ANR	1092480	Callee	dc_ssock -> set_os_buffers		1092300	0					
ANR	1092481	PtrMemberAccess	dc_ssock -> set_os_buffers		1092300	0					
ANR	1092482	Identifier	dc_ssock		1092300	0					
ANR	1092483	Identifier	set_os_buffers		1092300	1					
ANR	1092484	ArgumentList	desired_size		1092300	1					
ANR	1092485	Argument	desired_size		1092300	0					
ANR	1092486	Identifier	desired_size		1092300	0					
ANR	1092487	ExpressionStatement	msg += ( int ) ( final_udp / 1024 )	9308:3:285413:285443	1092300	2	True				
ANR	1092488	AssignmentExpression	msg += ( int ) ( final_udp / 1024 )		1092300	0		+=			
ANR	1092489	Identifier	msg		1092300	0					
ANR	1092490	CastExpression	( int ) ( final_udp / 1024 )		1092300	1					
ANR	1092491	CastTarget	int		1092300	0					
ANR	1092492	MultiplicativeExpression	final_udp / 1024		1092300	1		/			
ANR	1092493	Identifier	final_udp		1092300	0					
ANR	1092494	PrimaryExpression	1024		1092300	1					
ANR	1092495	ExpressionStatement	"msg += ""k (UDP), """	9309:3:285448:285466	1092300	3	True				
ANR	1092496	AssignmentExpression	"msg += ""k (UDP), """		1092300	0		+=			
ANR	1092497	Identifier	msg		1092300	0					
ANR	1092498	PrimaryExpression	"""k (UDP), """		1092300	1					
ANR	1092499	IfStatement	if ( dc_rsock )		1092300	3					
ANR	1092500	Condition	dc_rsock	9314:6:285614:285621	1092300	0	True				
ANR	1092501	Identifier	dc_rsock		1092300	0					
ANR	1092502	CompoundStatement		64:3:1918:1980	1092300	1					
ANR	1092503	ExpressionStatement	"desired_size = param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"	9315:3:285630:285720	1092300	0	True				
ANR	1092504	AssignmentExpression	"desired_size = param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"		1092300	0		=			
ANR	1092505	Identifier	desired_size		1092300	0					
ANR	1092506	CallExpression	"param_integer ( ""COLLECTOR_TCP_SOCKET_BUFSIZE"" , 128 * 1024 , 1024 )"		1092300	1					
ANR	1092507	Callee	param_integer		1092300	0					
ANR	1092508	Identifier	param_integer		1092300	0					
ANR	1092509	ArgumentList	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		1092300	1					
ANR	1092510	Argument	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		1092300	0					
ANR	1092511	PrimaryExpression	"""COLLECTOR_TCP_SOCKET_BUFSIZE"""		1092300	0					
ANR	1092512	Argument	128 * 1024		1092300	1					
ANR	1092513	MultiplicativeExpression	128 * 1024		1092300	0		*			
ANR	1092514	PrimaryExpression	128		1092300	0					
ANR	1092515	PrimaryExpression	1024		1092300	1					
ANR	1092516	Argument	1024		1092300	2					
ANR	1092517	PrimaryExpression	1024		1092300	0					
ANR	1092518	IdentifierDeclStatement	"int final_tcp = dc_rsock -> set_os_buffers ( desired_size , true ) ;"	9317:3:285725:285787	1092300	1	True				
ANR	1092519	IdentifierDecl	"final_tcp = dc_rsock -> set_os_buffers ( desired_size , true )"		1092300	0					
ANR	1092520	IdentifierDeclType	int		1092300	0					
ANR	1092521	Identifier	final_tcp		1092300	1					
ANR	1092522	AssignmentExpression	"final_tcp = dc_rsock -> set_os_buffers ( desired_size , true )"		1092300	2		=			
ANR	1092523	Identifier	final_tcp		1092300	0					
ANR	1092524	CallExpression	"dc_rsock -> set_os_buffers ( desired_size , true )"		1092300	1					
ANR	1092525	Callee	dc_rsock -> set_os_buffers		1092300	0					
ANR	1092526	PtrMemberAccess	dc_rsock -> set_os_buffers		1092300	0					
ANR	1092527	Identifier	dc_rsock		1092300	0					
ANR	1092528	Identifier	set_os_buffers		1092300	1					
ANR	1092529	ArgumentList	desired_size		1092300	1					
ANR	1092530	Argument	desired_size		1092300	0					
ANR	1092531	Identifier	desired_size		1092300	0					
ANR	1092532	Argument	true		1092300	1					
ANR	1092533	Identifier	true		1092300	0					
ANR	1092534	ExpressionStatement	msg += ( int ) ( final_tcp / 1024 )	9319:3:285793:285823	1092300	2	True				
ANR	1092535	AssignmentExpression	msg += ( int ) ( final_tcp / 1024 )		1092300	0		+=			
ANR	1092536	Identifier	msg		1092300	0					
ANR	1092537	CastExpression	( int ) ( final_tcp / 1024 )		1092300	1					
ANR	1092538	CastTarget	int		1092300	0					
ANR	1092539	MultiplicativeExpression	final_tcp / 1024		1092300	1		/			
ANR	1092540	Identifier	final_tcp		1092300	0					
ANR	1092541	PrimaryExpression	1024		1092300	1					
ANR	1092542	ExpressionStatement	"msg += ""k (TCP)"""	9320:3:285828:285844	1092300	3	True				
ANR	1092543	AssignmentExpression	"msg += ""k (TCP)"""		1092300	0		+=			
ANR	1092544	Identifier	msg		1092300	0					
ANR	1092545	PrimaryExpression	"""k (TCP)"""		1092300	1					
ANR	1092546	IfStatement	if ( ! msg . IsEmpty ( ) )		1092300	4					
ANR	1092547	Condition	! msg . IsEmpty ( )	9322:6:285856:285869	1092300	0	True				
ANR	1092548	UnaryOperationExpression	! msg . IsEmpty ( )		1092300	0					
ANR	1092549	UnaryOperator	!		1092300	0					
ANR	1092550	CallExpression	msg . IsEmpty ( )		1092300	1					
ANR	1092551	Callee	msg . IsEmpty		1092300	0					
ANR	1092552	MemberAccess	msg . IsEmpty		1092300	0					
ANR	1092553	Identifier	msg		1092300	0					
ANR	1092554	Identifier	IsEmpty		1092300	1					
ANR	1092555	ArgumentList			1092300	1					
ANR	1092556	CompoundStatement		69:23:2066:2066	1092300	1					
ANR	1092557	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Reset OS socket buffer size to %s\\n"" , msg . Value ( ) )"	9323:3:285878:285955	1092300	0	True				
ANR	1092558	CallExpression	"dprintf ( D_FULLDEBUG , ""Reset OS socket buffer size to %s\\n"" , msg . Value ( ) )"		1092300	0					
ANR	1092559	Callee	dprintf		1092300	0					
ANR	1092560	Identifier	dprintf		1092300	0					
ANR	1092561	ArgumentList	D_FULLDEBUG		1092300	1					
ANR	1092562	Argument	D_FULLDEBUG		1092300	0					
ANR	1092563	Identifier	D_FULLDEBUG		1092300	0					
ANR	1092564	Argument	"""Reset OS socket buffer size to %s\\n"""		1092300	1					
ANR	1092565	PrimaryExpression	"""Reset OS socket buffer size to %s\\n"""		1092300	0					
ANR	1092566	Argument	msg . Value ( )		1092300	2					
ANR	1092567	CallExpression	msg . Value ( )		1092300	0					
ANR	1092568	Callee	msg . Value		1092300	0					
ANR	1092569	MemberAccess	msg . Value		1092300	0					
ANR	1092570	Identifier	msg		1092300	0					
ANR	1092571	Identifier	Value		1092300	1					
ANR	1092572	ArgumentList			1092300	1					
ANR	1092573	IfStatement	if ( dc_rsock )		1092300	6					
ANR	1092574	Condition	dc_rsock	9332:5:286167:286174	1092300	0	True				
ANR	1092575	Identifier	dc_rsock		1092300	0					
ANR	1092576	CompoundStatement		79:16:2371:2371	1092300	1					
ANR	1092577	ExpressionStatement	Register_Command_Socket ( ( Stream * ) dc_rsock )	9333:2:286182:286226	1092300	0	True				
ANR	1092578	CallExpression	Register_Command_Socket ( ( Stream * ) dc_rsock )		1092300	0					
ANR	1092579	Callee	Register_Command_Socket		1092300	0					
ANR	1092580	Identifier	Register_Command_Socket		1092300	0					
ANR	1092581	ArgumentList	( Stream * ) dc_rsock		1092300	1					
ANR	1092582	Argument	( Stream * ) dc_rsock		1092300	0					
ANR	1092583	CastExpression	( Stream * ) dc_rsock		1092300	0					
ANR	1092584	CastTarget	Stream *		1092300	0					
ANR	1092585	Identifier	dc_rsock		1092300	1					
ANR	1092586	IfStatement	if ( dc_ssock )		1092300	7					
ANR	1092587	Condition	dc_ssock	9335:5:286236:286243	1092300	0	True				
ANR	1092588	Identifier	dc_ssock		1092300	0					
ANR	1092589	CompoundStatement		82:15:2439:2439	1092300	1					
ANR	1092590	ExpressionStatement	Register_Command_Socket ( ( Stream * ) dc_ssock )	9336:2:286250:286294	1092300	0	True				
ANR	1092591	CallExpression	Register_Command_Socket ( ( Stream * ) dc_ssock )		1092300	0					
ANR	1092592	Callee	Register_Command_Socket		1092300	0					
ANR	1092593	Identifier	Register_Command_Socket		1092300	0					
ANR	1092594	ArgumentList	( Stream * ) dc_ssock		1092300	1					
ANR	1092595	Argument	( Stream * ) dc_ssock		1092300	0					
ANR	1092596	CastExpression	( Stream * ) dc_ssock		1092300	0					
ANR	1092597	CastTarget	Stream *		1092300	0					
ANR	1092598	Identifier	dc_ssock		1092300	1					
ANR	1092599	IdentifierDeclStatement	char const * addr = publicNetworkIpAddr ( ) ;	9338:1:286300:286340	1092300	8	True				
ANR	1092600	IdentifierDecl	* addr = publicNetworkIpAddr ( )		1092300	0					
ANR	1092601	IdentifierDeclType	char const *		1092300	0					
ANR	1092602	Identifier	addr		1092300	1					
ANR	1092603	AssignmentExpression	* addr = publicNetworkIpAddr ( )		1092300	2		=			
ANR	1092604	Identifier	addr		1092300	0					
ANR	1092605	CallExpression	publicNetworkIpAddr ( )		1092300	1					
ANR	1092606	Callee	publicNetworkIpAddr		1092300	0					
ANR	1092607	Identifier	publicNetworkIpAddr		1092300	0					
ANR	1092608	ArgumentList			1092300	1					
ANR	1092609	IfStatement	if ( addr )		1092300	9					
ANR	1092610	Condition	addr	9339:5:286347:286350	1092300	0	True				
ANR	1092611	Identifier	addr		1092300	0					
ANR	1092612	CompoundStatement		86:12:2547:2547	1092300	1					
ANR	1092613	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: command socket at %s\\n"" , addr )"	9340:2:286358:286420	1092300	0	True				
ANR	1092614	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: command socket at %s\\n"" , addr )"		1092300	0					
ANR	1092615	Callee	dprintf		1092300	0					
ANR	1092616	Identifier	dprintf		1092300	0					
ANR	1092617	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092618	Argument	D_ALWAYS		1092300	0					
ANR	1092619	Identifier	D_ALWAYS		1092300	0					
ANR	1092620	Argument	"""DaemonCore: command socket at %s\\n"""		1092300	1					
ANR	1092621	PrimaryExpression	"""DaemonCore: command socket at %s\\n"""		1092300	0					
ANR	1092622	Argument	addr		1092300	2					
ANR	1092623	Identifier	addr		1092300	0					
ANR	1092624	IdentifierDeclStatement	char const * priv_addr = privateNetworkIpAddr ( ) ;	9342:1:286426:286472	1092300	10	True				
ANR	1092625	IdentifierDecl	* priv_addr = privateNetworkIpAddr ( )		1092300	0					
ANR	1092626	IdentifierDeclType	char const *		1092300	0					
ANR	1092627	Identifier	priv_addr		1092300	1					
ANR	1092628	AssignmentExpression	* priv_addr = privateNetworkIpAddr ( )		1092300	2		=			
ANR	1092629	Identifier	priv_addr		1092300	0					
ANR	1092630	CallExpression	privateNetworkIpAddr ( )		1092300	1					
ANR	1092631	Callee	privateNetworkIpAddr		1092300	0					
ANR	1092632	Identifier	privateNetworkIpAddr		1092300	0					
ANR	1092633	ArgumentList			1092300	1					
ANR	1092634	IfStatement	if ( priv_addr )		1092300	11					
ANR	1092635	Condition	priv_addr	9343:5:286479:286487	1092300	0	True				
ANR	1092636	Identifier	priv_addr		1092300	0					
ANR	1092637	CompoundStatement		90:17:2684:2684	1092300	1					
ANR	1092638	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: private command socket at %s\\n"" , priv_addr )"	9344:2:286495:286570	1092300	0	True				
ANR	1092639	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: private command socket at %s\\n"" , priv_addr )"		1092300	0					
ANR	1092640	Callee	dprintf		1092300	0					
ANR	1092641	Identifier	dprintf		1092300	0					
ANR	1092642	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092643	Argument	D_ALWAYS		1092300	0					
ANR	1092644	Identifier	D_ALWAYS		1092300	0					
ANR	1092645	Argument	"""DaemonCore: private command socket at %s\\n"""		1092300	1					
ANR	1092646	PrimaryExpression	"""DaemonCore: private command socket at %s\\n"""		1092300	0					
ANR	1092647	Argument	priv_addr		1092300	2					
ANR	1092648	Identifier	priv_addr		1092300	0					
ANR	1092649	IfStatement	if ( dc_rsock && m_shared_port_endpoint )		1092300	12					
ANR	1092650	Condition	dc_rsock && m_shared_port_endpoint	9347:5:286581:286614	1092300	0	True				
ANR	1092651	AndExpression	dc_rsock && m_shared_port_endpoint		1092300	0		&&			
ANR	1092652	Identifier	dc_rsock		1092300	0					
ANR	1092653	Identifier	m_shared_port_endpoint		1092300	1					
ANR	1092654	CompoundStatement		94:42:2811:2811	1092300	1					
ANR	1092655	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: non-shared command socket at %s\\n"" , dc_rsock -> get_sinful ( ) )"	9350:2:286732:286828	1092300	0	True				
ANR	1092656	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: non-shared command socket at %s\\n"" , dc_rsock -> get_sinful ( ) )"		1092300	0					
ANR	1092657	Callee	dprintf		1092300	0					
ANR	1092658	Identifier	dprintf		1092300	0					
ANR	1092659	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092660	Argument	D_ALWAYS		1092300	0					
ANR	1092661	Identifier	D_ALWAYS		1092300	0					
ANR	1092662	Argument	"""DaemonCore: non-shared command socket at %s\\n"""		1092300	1					
ANR	1092663	PrimaryExpression	"""DaemonCore: non-shared command socket at %s\\n"""		1092300	0					
ANR	1092664	Argument	dc_rsock -> get_sinful ( )		1092300	2					
ANR	1092665	CallExpression	dc_rsock -> get_sinful ( )		1092300	0					
ANR	1092666	Callee	dc_rsock -> get_sinful		1092300	0					
ANR	1092667	PtrMemberAccess	dc_rsock -> get_sinful		1092300	0					
ANR	1092668	Identifier	dc_rsock		1092300	0					
ANR	1092669	Identifier	get_sinful		1092300	1					
ANR	1092670	ArgumentList			1092300	1					
ANR	1092671	IfStatement	if ( ! dc_ssock )		1092300	13					
ANR	1092672	Condition	! dc_ssock	9354:5:286839:286847	1092300	0	True				
ANR	1092673	UnaryOperationExpression	! dc_ssock		1092300	0					
ANR	1092674	UnaryOperator	!		1092300	0					
ANR	1092675	Identifier	dc_ssock		1092300	1					
ANR	1092676	CompoundStatement		101:16:3043:3043	1092300	1					
ANR	1092677	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: UDP Command socket not created.\\n"" )"	9355:2:286854:286924	1092300	0	True				
ANR	1092678	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: UDP Command socket not created.\\n"" )"		1092300	0					
ANR	1092679	Callee	dprintf		1092300	0					
ANR	1092680	Identifier	dprintf		1092300	0					
ANR	1092681	ArgumentList	D_FULLDEBUG		1092300	1					
ANR	1092682	Argument	D_FULLDEBUG		1092300	0					
ANR	1092683	Identifier	D_FULLDEBUG		1092300	0					
ANR	1092684	Argument	"""DaemonCore: UDP Command socket not created.\\n"""		1092300	1					
ANR	1092685	PrimaryExpression	"""DaemonCore: UDP Command socket not created.\\n"""		1092300	0					
ANR	1092686	IfStatement	if ( dc_rsock )		1092300	14					
ANR	1092687	Condition	dc_rsock	9362:5:287126:287133	1092300	0	True				
ANR	1092688	Identifier	dc_rsock		1092300	0					
ANR	1092689	CompoundStatement		109:16:3330:3330	1092300	1					
ANR	1092690	IfStatement	if ( dc_rsock -> my_addr ( ) . is_loopback ( ) )		1092300	0					
ANR	1092691	Condition	dc_rsock -> my_addr ( ) . is_loopback ( )	9363:7:287146:287178	1092300	0	True				
ANR	1092692	CallExpression	dc_rsock -> my_addr ( ) . is_loopback ( )		1092300	0					
ANR	1092693	Callee	dc_rsock -> my_addr ( ) . is_loopback		1092300	0					
ANR	1092694	MemberAccess	dc_rsock -> my_addr ( ) . is_loopback		1092300	0					
ANR	1092695	CallExpression	dc_rsock -> my_addr ( )		1092300	0					
ANR	1092696	Callee	dc_rsock -> my_addr		1092300	0					
ANR	1092697	PtrMemberAccess	dc_rsock -> my_addr		1092300	0					
ANR	1092698	Identifier	dc_rsock		1092300	0					
ANR	1092699	Identifier	my_addr		1092300	1					
ANR	1092700	ArgumentList			1092300	1					
ANR	1092701	Identifier	is_loopback		1092300	1					
ANR	1092702	ArgumentList			1092300	1					
ANR	1092703	CompoundStatement		110:43:3375:3375	1092300	1					
ANR	1092704	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"" )"	9364:3:287187:287274	1092300	0	True				
ANR	1092705	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"" )"		1092300	0					
ANR	1092706	Callee	dprintf		1092300	0					
ANR	1092707	Identifier	dprintf		1092300	0					
ANR	1092708	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092709	Argument	D_ALWAYS		1092300	0					
ANR	1092710	Identifier	D_ALWAYS		1092300	0					
ANR	1092711	Argument	"""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"""		1092300	1					
ANR	1092712	PrimaryExpression	"""WARNING: Condor is running on the loopback address (127.0.0.1)\\n"""		1092300	0					
ANR	1092713	ExpressionStatement	"dprintf ( D_ALWAYS , ""         of this machine, and is not visible to other hosts!\\n"" )"	9365:3:287279:287364	1092300	1	True				
ANR	1092714	CallExpression	"dprintf ( D_ALWAYS , ""         of this machine, and is not visible to other hosts!\\n"" )"		1092300	0					
ANR	1092715	Callee	dprintf		1092300	0					
ANR	1092716	Identifier	dprintf		1092300	0					
ANR	1092717	ArgumentList	D_ALWAYS		1092300	1					
ANR	1092718	Argument	D_ALWAYS		1092300	0					
ANR	1092719	Identifier	D_ALWAYS		1092300	0					
ANR	1092720	Argument	"""         of this machine, and is not visible to other hosts!\\n"""		1092300	1					
ANR	1092721	PrimaryExpression	"""         of this machine, and is not visible to other hosts!\\n"""		1092300	0					
ANR	1092722	ExpressionStatement	drop_addr_file ( )	9371:1:287467:287483	1092300	15	True				
ANR	1092723	CallExpression	drop_addr_file ( )		1092300	0					
ANR	1092724	Callee	drop_addr_file		1092300	0					
ANR	1092725	Identifier	drop_addr_file		1092300	0					
ANR	1092726	ArgumentList			1092300	1					
ANR	1092727	Statement	static	9375:1:287540:287545	1092300	16	True				
ANR	1092728	IdentifierDeclStatement	int already_registered = false ;	9375:8:287547:287577	1092300	17	True				
ANR	1092729	IdentifierDecl	already_registered = false		1092300	0					
ANR	1092730	IdentifierDeclType	int		1092300	0					
ANR	1092731	Identifier	already_registered		1092300	1					
ANR	1092732	AssignmentExpression	already_registered = false		1092300	2		=			
ANR	1092733	Identifier	false		1092300	0					
ANR	1092734	Identifier	false		1092300	1					
ANR	1092735	IfStatement	if ( ! already_registered )		1092300	18					
ANR	1092736	Condition	! already_registered	9376:5:287584:287602	1092300	0	True				
ANR	1092737	UnaryOperationExpression	! already_registered		1092300	0					
ANR	1092738	UnaryOperator	!		1092300	0					
ANR	1092739	Identifier	already_registered		1092300	1					
ANR	1092740	CompoundStatement		123:27:3799:3799	1092300	1					
ANR	1092741	ExpressionStatement	already_registered = true	9377:2:287610:287635	1092300	0	True				
ANR	1092742	AssignmentExpression	already_registered = true		1092300	0		=			
ANR	1092743	Identifier	already_registered		1092300	0					
ANR	1092744	Identifier	true		1092300	1					
ANR	1092745	ExpressionStatement	"daemonCore -> Register_Command ( DC_RAISESIGNAL , ""DC_RAISESIGNAL"" , ( CommandHandlercpp ) & DaemonCore :: HandleSigCommand , ""HandleSigCommand()"" , daemonCore , DAEMON )"	9380:2:287699:287861	1092300	1	True				
ANR	1092746	CallExpression	"daemonCore -> Register_Command ( DC_RAISESIGNAL , ""DC_RAISESIGNAL"" , ( CommandHandlercpp ) & DaemonCore :: HandleSigCommand , ""HandleSigCommand()"" , daemonCore , DAEMON )"		1092300	0					
ANR	1092747	Callee	daemonCore -> Register_Command		1092300	0					
ANR	1092748	PtrMemberAccess	daemonCore -> Register_Command		1092300	0					
ANR	1092749	Identifier	daemonCore		1092300	0					
ANR	1092750	Identifier	Register_Command		1092300	1					
ANR	1092751	ArgumentList	DC_RAISESIGNAL		1092300	1					
ANR	1092752	Argument	DC_RAISESIGNAL		1092300	0					
ANR	1092753	Identifier	DC_RAISESIGNAL		1092300	0					
ANR	1092754	Argument	"""DC_RAISESIGNAL"""		1092300	1					
ANR	1092755	PrimaryExpression	"""DC_RAISESIGNAL"""		1092300	0					
ANR	1092756	Argument	( CommandHandlercpp ) & DaemonCore :: HandleSigCommand		1092300	2					
ANR	1092757	CastExpression	( CommandHandlercpp ) & DaemonCore :: HandleSigCommand		1092300	0					
ANR	1092758	CastTarget	CommandHandlercpp		1092300	0					
ANR	1092759	UnaryOperationExpression	& DaemonCore :: HandleSigCommand		1092300	1					
ANR	1092760	UnaryOperator	&		1092300	0					
ANR	1092761	Identifier	DaemonCore :: HandleSigCommand		1092300	1					
ANR	1092762	Argument	"""HandleSigCommand()"""		1092300	3					
ANR	1092763	PrimaryExpression	"""HandleSigCommand()"""		1092300	0					
ANR	1092764	Argument	daemonCore		1092300	4					
ANR	1092765	Identifier	daemonCore		1092300	0					
ANR	1092766	Argument	DAEMON		1092300	5					
ANR	1092767	Identifier	DAEMON		1092300	0					
ANR	1092768	ExpressionStatement	"daemonCore -> Register_Command ( DC_CHILDALIVE , ""DC_CHILDALIVE"" , ( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand , ""HandleChildAliveCommand"" , daemonCore , DAEMON , D_FULLDEBUG )"	9386:2:287981:288168	1092300	2	True				
ANR	1092769	CallExpression	"daemonCore -> Register_Command ( DC_CHILDALIVE , ""DC_CHILDALIVE"" , ( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand , ""HandleChildAliveCommand"" , daemonCore , DAEMON , D_FULLDEBUG )"		1092300	0					
ANR	1092770	Callee	daemonCore -> Register_Command		1092300	0					
ANR	1092771	PtrMemberAccess	daemonCore -> Register_Command		1092300	0					
ANR	1092772	Identifier	daemonCore		1092300	0					
ANR	1092773	Identifier	Register_Command		1092300	1					
ANR	1092774	ArgumentList	DC_CHILDALIVE		1092300	1					
ANR	1092775	Argument	DC_CHILDALIVE		1092300	0					
ANR	1092776	Identifier	DC_CHILDALIVE		1092300	0					
ANR	1092777	Argument	"""DC_CHILDALIVE"""		1092300	1					
ANR	1092778	PrimaryExpression	"""DC_CHILDALIVE"""		1092300	0					
ANR	1092779	Argument	( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand		1092300	2					
ANR	1092780	CastExpression	( CommandHandlercpp ) & DaemonCore :: HandleChildAliveCommand		1092300	0					
ANR	1092781	CastTarget	CommandHandlercpp		1092300	0					
ANR	1092782	UnaryOperationExpression	& DaemonCore :: HandleChildAliveCommand		1092300	1					
ANR	1092783	UnaryOperator	&		1092300	0					
ANR	1092784	Identifier	DaemonCore :: HandleChildAliveCommand		1092300	1					
ANR	1092785	Argument	"""HandleChildAliveCommand"""		1092300	3					
ANR	1092786	PrimaryExpression	"""HandleChildAliveCommand"""		1092300	0					
ANR	1092787	Argument	daemonCore		1092300	4					
ANR	1092788	Identifier	daemonCore		1092300	0					
ANR	1092789	Argument	DAEMON		1092300	5					
ANR	1092790	Identifier	DAEMON		1092300	0					
ANR	1092791	Argument	D_FULLDEBUG		1092300	6					
ANR	1092792	Identifier	D_FULLDEBUG		1092300	0					
ANR	1092793	ReturnType	void		1092300	1					
ANR	1092794	Identifier	DaemonCore :: InitDCCommandSocket		1092300	2					
ANR	1092795	ParameterList	int command_port		1092300	3					
ANR	1092796	Parameter	int command_port	9253:33:283787:283802	1092300	0	True				
ANR	1092797	ParameterType	int		1092300	0					
ANR	1092798	Identifier	command_port		1092300	1					
ANR	1092799	CFGEntryNode	ENTRY		1092300		True				
ANR	1092800	CFGExitNode	EXIT		1092300		True				
ANR	1092801	Symbol	msg		1092300						
ANR	1092802	Symbol	& DaemonCore :: HandleChildAliveCommand		1092300						
ANR	1092803	Symbol	DC_CHILDALIVE		1092300						
ANR	1092804	Symbol	publicNetworkIpAddr		1092300						
ANR	1092805	Symbol	already_registered		1092300						
ANR	1092806	Symbol	final_udp		1092300						
ANR	1092807	Symbol	& DaemonCore :: HandleSigCommand		1092300						
ANR	1092808	Symbol	msg . IsEmpty		1092300						
ANR	1092809	Symbol	privateNetworkIpAddr		1092300						
ANR	1092810	Symbol	dc_rsock -> set_os_buffers		1092300						
ANR	1092811	Symbol	SUBSYSTEM_TYPE_COLLECTOR		1092300						
ANR	1092812	Symbol	dc_ssock		1092300						
ANR	1092813	Symbol	* dc_ssock		1092300						
ANR	1092814	Symbol	daemonCore		1092300						
ANR	1092815	Symbol	DC_RAISESIGNAL		1092300						
ANR	1092816	Symbol	desired_size		1092300						
ANR	1092817	Symbol	addr		1092300						
ANR	1092818	Symbol	dc_ssock -> set_os_buffers		1092300						
ANR	1092819	Symbol	* dc_rsock		1092300						
ANR	1092820	Symbol	m_wants_dc_udp_self		1092300						
ANR	1092821	Symbol	dc_rsock -> my_addr ( ) . is_loopback		1092300						
ANR	1092822	Symbol	get_mySubSystem ( ) -> isType		1092300						
ANR	1092823	Symbol	dc_rsock -> my_addr		1092300						
ANR	1092824	Symbol	dc_rsock		1092300						
ANR	1092825	Symbol	NULL		1092300						
ANR	1092826	Symbol	D_DAEMONCORE		1092300						
ANR	1092827	Symbol	* get_mySubSystem		1092300						
ANR	1092828	Symbol	D_ALWAYS		1092300						
ANR	1092829	Symbol	priv_addr		1092300						
ANR	1092830	Symbol	false		1092300						
ANR	1092831	Symbol	dc_rsock -> get_sinful		1092300						
ANR	1092832	Symbol	final_tcp		1092300						
ANR	1092833	Symbol	D_FULLDEBUG		1092300						
ANR	1092834	Symbol	command_port		1092300						
ANR	1092835	Symbol	msg . Value		1092300						
ANR	1092836	Symbol	m_shared_port_endpoint		1092300						
ANR	1092837	Symbol	true		1092300						
ANR	1092838	Symbol	param_integer		1092300						
ANR	1092839	Symbol	DAEMON		1092300						
ANR	1092840	Symbol	get_mySubSystem		1092300						
ANR	1092841	Function	DaemonCore :: HandleDC_SIGCHLD	9395:0:288191:290120							
ANR	1092842	FunctionDef	DaemonCore :: HandleDC_SIGCHLD (int sig)		1092841	0					
ANR	1092843	CompoundStatement		9397:0:288233:290120	1092841	0					
ANR	1092844	IdentifierDeclStatement	pid_t pid ;	9402:1:288441:288450	1092841	0	True				
ANR	1092845	IdentifierDecl	pid		1092841	0					
ANR	1092846	IdentifierDeclType	pid_t		1092841	0					
ANR	1092847	Identifier	pid		1092841	1					
ANR	1092848	IdentifierDeclStatement	int status ;	9403:1:288453:288463	1092841	1	True				
ANR	1092849	IdentifierDecl	status		1092841	0					
ANR	1092850	IdentifierDeclType	int		1092841	0					
ANR	1092851	Identifier	status		1092841	1					
ANR	1092852	IdentifierDeclStatement	WaitpidEntry wait_entry ;	9404:1:288466:288489	1092841	2	True				
ANR	1092853	IdentifierDecl	wait_entry		1092841	0					
ANR	1092854	IdentifierDeclType	WaitpidEntry		1092841	0					
ANR	1092855	Identifier	wait_entry		1092841	1					
ANR	1092856	IdentifierDeclStatement	bool first_time = true ;	9405:1:288492:288514	1092841	3	True				
ANR	1092857	IdentifierDecl	first_time = true		1092841	0					
ANR	1092858	IdentifierDeclType	bool		1092841	0					
ANR	1092859	Identifier	first_time		1092841	1					
ANR	1092860	AssignmentExpression	first_time = true		1092841	2		=			
ANR	1092861	Identifier	true		1092841	0					
ANR	1092862	Identifier	true		1092841	1					
ANR	1092863	ExpressionStatement	assert ( sig == SIGCHLD )	9408:1:288519:288543	1092841	4	True				
ANR	1092864	CallExpression	assert ( sig == SIGCHLD )		1092841	0					
ANR	1092865	Callee	assert		1092841	0					
ANR	1092866	Identifier	assert		1092841	0					
ANR	1092867	ArgumentList	sig == SIGCHLD		1092841	1					
ANR	1092868	Argument	sig == SIGCHLD		1092841	0					
ANR	1092869	EqualityExpression	sig == SIGCHLD		1092841	0		==			
ANR	1092870	Identifier	sig		1092841	0					
ANR	1092871	Identifier	SIGCHLD		1092841	1					
ANR	1092872	ForStatement	for ( ; ; )		1092841	5					
ANR	1092873	CompoundStatement		14:9:321:321	1092841	0					
ANR	1092874	ExpressionStatement	errno = 0	9411:2:288559:288568	1092841	0	True				
ANR	1092875	AssignmentExpression	errno = 0		1092841	0		=			
ANR	1092876	Identifier	errno		1092841	0					
ANR	1092877	PrimaryExpression	0		1092841	1					
ANR	1092878	IfStatement	"if ( ( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0 )"		1092841	1					
ANR	1092879	Condition	"( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0"	9412:12:288582:288621	1092841	0	True				
ANR	1092880	RelationalExpression	"( pid = waitpid ( - 1 , & status , WNOHANG ) ) <= 0"		1092841	0		<=			
ANR	1092881	AssignmentExpression	"pid = waitpid ( - 1 , & status , WNOHANG )"		1092841	0		=			
ANR	1092882	Identifier	pid		1092841	0					
ANR	1092883	CallExpression	"waitpid ( - 1 , & status , WNOHANG )"		1092841	1					
ANR	1092884	Callee	waitpid		1092841	0					
ANR	1092885	Identifier	waitpid		1092841	0					
ANR	1092886	ArgumentList	- 1		1092841	1					
ANR	1092887	Argument	- 1		1092841	0					
ANR	1092888	UnaryOperationExpression	- 1		1092841	0					
ANR	1092889	UnaryOperator	-		1092841	0					
ANR	1092890	PrimaryExpression	1		1092841	1					
ANR	1092891	Argument	& status		1092841	1					
ANR	1092892	UnaryOperationExpression	& status		1092841	0					
ANR	1092893	UnaryOperator	&		1092841	0					
ANR	1092894	Identifier	status		1092841	1					
ANR	1092895	Argument	WNOHANG		1092841	2					
ANR	1092896	Identifier	WNOHANG		1092841	0					
ANR	1092897	PrimaryExpression	0		1092841	1					
ANR	1092898	CompoundStatement		16:55:391:391	1092841	1					
ANR	1092899	IfStatement	if ( errno == EINTR )		1092841	0					
ANR	1092900	Condition	errno == EINTR	9413:7:288634:288647	1092841	0	True				
ANR	1092901	EqualityExpression	errno == EINTR		1092841	0		==			
ANR	1092902	Identifier	errno		1092841	0					
ANR	1092903	Identifier	EINTR		1092841	1					
ANR	1092904	CompoundStatement		17:24:417:417	1092841	1					
ANR	1092905	ContinueStatement	continue ;	9420:4:288972:288980	1092841	0	True				
ANR	1092906	IfStatement	if ( errno == ECHILD || errno == EAGAIN || errno == 0 )		1092841	1					
ANR	1092907	Condition	errno == ECHILD || errno == EAGAIN || errno == 0	9423:7:288995:289042	1092841	0	True				
ANR	1092908	OrExpression	errno == ECHILD || errno == EAGAIN || errno == 0		1092841	0		||			
ANR	1092909	EqualityExpression	errno == ECHILD		1092841	0		==			
ANR	1092910	Identifier	errno		1092841	0					
ANR	1092911	Identifier	ECHILD		1092841	1					
ANR	1092912	OrExpression	errno == EAGAIN || errno == 0		1092841	1		||			
ANR	1092913	EqualityExpression	errno == EAGAIN		1092841	0		==			
ANR	1092914	Identifier	errno		1092841	0					
ANR	1092915	Identifier	EAGAIN		1092841	1					
ANR	1092916	EqualityExpression	errno == 0		1092841	1		==			
ANR	1092917	Identifier	errno		1092841	0					
ANR	1092918	PrimaryExpression	0		1092841	1					
ANR	1092919	CompoundStatement		27:58:812:812	1092841	1					
ANR	1092920	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: No more children processes to reap.\\n"" )"	9424:4:289052:289134	1092841	0	True				
ANR	1092921	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: No more children processes to reap.\\n"" )"		1092841	0					
ANR	1092922	Callee	dprintf		1092841	0					
ANR	1092923	Identifier	dprintf		1092841	0					
ANR	1092924	ArgumentList	D_FULLDEBUG		1092841	1					
ANR	1092925	Argument	D_FULLDEBUG		1092841	0					
ANR	1092926	Identifier	D_FULLDEBUG		1092841	0					
ANR	1092927	Argument	"""DaemonCore: No more children processes to reap.\\n"""		1092841	1					
ANR	1092928	PrimaryExpression	"""DaemonCore: No more children processes to reap.\\n"""		1092841	0					
ANR	1092929	ElseStatement	else		1092841	0					
ANR	1092930	CompoundStatement		30:10:912:912	1092841	0					
ANR	1092931	ExpressionStatement	"dprintf ( D_ALWAYS , ""waitpid() returned %d, errno = %d\\n"" , pid , errno )"	9428:4:289205:289282	1092841	0	True				
ANR	1092932	CallExpression	"dprintf ( D_ALWAYS , ""waitpid() returned %d, errno = %d\\n"" , pid , errno )"		1092841	0					
ANR	1092933	Callee	dprintf		1092841	0					
ANR	1092934	Identifier	dprintf		1092841	0					
ANR	1092935	ArgumentList	D_ALWAYS		1092841	1					
ANR	1092936	Argument	D_ALWAYS		1092841	0					
ANR	1092937	Identifier	D_ALWAYS		1092841	0					
ANR	1092938	Argument	"""waitpid() returned %d, errno = %d\\n"""		1092841	1					
ANR	1092939	PrimaryExpression	"""waitpid() returned %d, errno = %d\\n"""		1092841	0					
ANR	1092940	Argument	pid		1092841	2					
ANR	1092941	Identifier	pid		1092841	0					
ANR	1092942	Argument	errno		1092841	3					
ANR	1092943	Identifier	errno		1092841	0					
ANR	1092944	BreakStatement	break ;	9431:12:289301:289306	1092841	2	True				
ANR	1092945	IfStatement	if ( WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP )		1092841	2					
ANR	1092946	Condition	WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP	9434:6:289417:289466	1092841	0	True				
ANR	1092947	AndExpression	WIFSIGNALED ( status ) && WTERMSIG ( status ) == SIGTRAP		1092841	0		&&			
ANR	1092948	CallExpression	WIFSIGNALED ( status )		1092841	0					
ANR	1092949	Callee	WIFSIGNALED		1092841	0					
ANR	1092950	Identifier	WIFSIGNALED		1092841	0					
ANR	1092951	ArgumentList	status		1092841	1					
ANR	1092952	Argument	status		1092841	0					
ANR	1092953	Identifier	status		1092841	0					
ANR	1092954	EqualityExpression	WTERMSIG ( status ) == SIGTRAP		1092841	1		==			
ANR	1092955	CallExpression	WTERMSIG ( status )		1092841	0					
ANR	1092956	Callee	WTERMSIG		1092841	0					
ANR	1092957	Identifier	WTERMSIG		1092841	0					
ANR	1092958	ArgumentList	status		1092841	1					
ANR	1092959	Argument	status		1092841	0					
ANR	1092960	Identifier	status		1092841	0					
ANR	1092961	Identifier	SIGTRAP		1092841	1					
ANR	1092962	CompoundStatement		38:59:1236:1236	1092841	1					
ANR	1092963	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""received SIGCHLD from stopped TDP process\\n"" )"	9440:3:289757:289825	1092841	0	True				
ANR	1092964	CallExpression	"dprintf ( D_FULLDEBUG , ""received SIGCHLD from stopped TDP process\\n"" )"		1092841	0					
ANR	1092965	Callee	dprintf		1092841	0					
ANR	1092966	Identifier	dprintf		1092841	0					
ANR	1092967	ArgumentList	D_FULLDEBUG		1092841	1					
ANR	1092968	Argument	D_FULLDEBUG		1092841	0					
ANR	1092969	Identifier	D_FULLDEBUG		1092841	0					
ANR	1092970	Argument	"""received SIGCHLD from stopped TDP process\\n"""		1092841	1					
ANR	1092971	PrimaryExpression	"""received SIGCHLD from stopped TDP process\\n"""		1092841	0					
ANR	1092972	ContinueStatement	continue ;	9441:3:289830:289838	1092841	1	True				
ANR	1092973	ExpressionStatement	wait_entry . child_pid = pid	9446:2:289910:289936	1092841	3	True				
ANR	1092974	AssignmentExpression	wait_entry . child_pid = pid		1092841	0		=			
ANR	1092975	MemberAccess	wait_entry . child_pid		1092841	0					
ANR	1092976	Identifier	wait_entry		1092841	0					
ANR	1092977	Identifier	child_pid		1092841	1					
ANR	1092978	Identifier	pid		1092841	1					
ANR	1092979	ExpressionStatement	wait_entry . exit_status = status	9447:2:289940:289971	1092841	4	True				
ANR	1092980	AssignmentExpression	wait_entry . exit_status = status		1092841	0		=			
ANR	1092981	MemberAccess	wait_entry . exit_status		1092841	0					
ANR	1092982	Identifier	wait_entry		1092841	0					
ANR	1092983	Identifier	exit_status		1092841	1					
ANR	1092984	Identifier	status		1092841	1					
ANR	1092985	ExpressionStatement	WaitpidQueue . enqueue ( wait_entry )	9448:2:289975:290007	1092841	5	True				
ANR	1092986	CallExpression	WaitpidQueue . enqueue ( wait_entry )		1092841	0					
ANR	1092987	Callee	WaitpidQueue . enqueue		1092841	0					
ANR	1092988	MemberAccess	WaitpidQueue . enqueue		1092841	0					
ANR	1092989	Identifier	WaitpidQueue		1092841	0					
ANR	1092990	Identifier	enqueue		1092841	1					
ANR	1092991	ArgumentList	wait_entry		1092841	1					
ANR	1092992	Argument	wait_entry		1092841	0					
ANR	1092993	Identifier	wait_entry		1092841	0					
ANR	1092994	IfStatement	if ( first_time )		1092841	6					
ANR	1092995	Condition	first_time	9449:6:290015:290024	1092841	0	True				
ANR	1092996	Identifier	first_time		1092841	0					
ANR	1092997	CompoundStatement		53:18:1793:1793	1092841	1					
ANR	1092998	ExpressionStatement	"Send_Signal ( mypid , DC_SERVICEWAITPIDS )"	9450:3:290032:290072	1092841	0	True				
ANR	1092999	CallExpression	"Send_Signal ( mypid , DC_SERVICEWAITPIDS )"		1092841	0					
ANR	1093000	Callee	Send_Signal		1092841	0					
ANR	1093001	Identifier	Send_Signal		1092841	0					
ANR	1093002	ArgumentList	mypid		1092841	1					
ANR	1093003	Argument	mypid		1092841	0					
ANR	1093004	Identifier	mypid		1092841	0					
ANR	1093005	Argument	DC_SERVICEWAITPIDS		1092841	1					
ANR	1093006	Identifier	DC_SERVICEWAITPIDS		1092841	0					
ANR	1093007	ExpressionStatement	first_time = false	9451:3:290077:290095	1092841	1	True				
ANR	1093008	AssignmentExpression	first_time = false		1092841	0		=			
ANR	1093009	Identifier	first_time		1092841	0					
ANR	1093010	Identifier	false		1092841	1					
ANR	1093011	ReturnStatement	return TRUE ;	9456:1:290107:290118	1092841	6	True				
ANR	1093012	Identifier	TRUE		1092841	0					
ANR	1093013	ReturnType	int		1092841	1					
ANR	1093014	Identifier	DaemonCore :: HandleDC_SIGCHLD		1092841	2					
ANR	1093015	ParameterList	int sig		1092841	3					
ANR	1093016	Parameter	int sig	9396:29:288224:288230	1092841	0	True				
ANR	1093017	ParameterType	int		1092841	0					
ANR	1093018	Identifier	sig		1092841	1					
ANR	1093019	CFGEntryNode	ENTRY		1092841		True				
ANR	1093020	CFGExitNode	EXIT		1092841		True				
ANR	1093021	InfiniteForNode	true		1092841		True				
ANR	1093022	Symbol	wait_entry . child_pid		1092841						
ANR	1093023	Symbol	EINTR		1092841						
ANR	1093024	Symbol	ECHILD		1092841						
ANR	1093025	Symbol	DC_SERVICEWAITPIDS		1092841						
ANR	1093026	Symbol	pid		1092841						
ANR	1093027	Symbol	sig		1092841						
ANR	1093028	Symbol	first_time		1092841						
ANR	1093029	Symbol	SIGTRAP		1092841						
ANR	1093030	Symbol	WNOHANG		1092841						
ANR	1093031	Symbol	WIFSIGNALED		1092841						
ANR	1093032	Symbol	errno		1092841						
ANR	1093033	Symbol	mypid		1092841						
ANR	1093034	Symbol	EAGAIN		1092841						
ANR	1093035	Symbol	D_ALWAYS		1092841						
ANR	1093036	Symbol	false		1092841						
ANR	1093037	Symbol	TRUE		1092841						
ANR	1093038	Symbol	D_FULLDEBUG		1092841						
ANR	1093039	Symbol	& status		1092841						
ANR	1093040	Symbol	WaitpidQueue		1092841						
ANR	1093041	Symbol	SIGCHLD		1092841						
ANR	1093042	Symbol	wait_entry		1092841						
ANR	1093043	Symbol	wait_entry . exit_status		1092841						
ANR	1093044	Symbol	true		1092841						
ANR	1093045	Symbol	WTERMSIG		1092841						
ANR	1093046	Symbol	status		1092841						
ANR	1093047	Symbol	waitpid		1092841						
ANR	1093048	DeclStmt									
ANR	1093049	Decl							WaitpidEntry	WaitpidEntry	wait_entry
ANR	1093050	Function	pidWatcherThread	9487:0:290789:298433							
ANR	1093051	FunctionDef	pidWatcherThread (void * arg)		1093050	0					
ANR	1093052	CompoundStatement		9489:0:290828:298433	1093050	0					
ANR	1093053	IdentifierDeclStatement	DaemonCore :: PidWatcherEntry * entry ;	9490:1:290831:290865	1093050	0	True				
ANR	1093054	IdentifierDecl	* entry		1093050	0					
ANR	1093055	IdentifierDeclType	DaemonCore :: PidWatcherEntry *		1093050	0					
ANR	1093056	Identifier	entry		1093050	1					
ANR	1093057	IdentifierDeclStatement	int i ;	9491:1:290868:290873	1093050	1	True				
ANR	1093058	IdentifierDecl	i		1093050	0					
ANR	1093059	IdentifierDeclType	int		1093050	0					
ANR	1093060	Identifier	i		1093050	1					
ANR	1093061	IdentifierDeclStatement	unsigned int numentries ;	9492:1:290876:290899	1093050	2	True				
ANR	1093062	IdentifierDecl	numentries		1093050	0					
ANR	1093063	IdentifierDeclType	unsigned int		1093050	0					
ANR	1093064	Identifier	numentries		1093050	1					
ANR	1093065	IdentifierDeclStatement	bool must_send_signal = false ;	9493:1:290902:290931	1093050	3	True				
ANR	1093066	IdentifierDecl	must_send_signal = false		1093050	0					
ANR	1093067	IdentifierDeclType	bool		1093050	0					
ANR	1093068	Identifier	must_send_signal		1093050	1					
ANR	1093069	AssignmentExpression	must_send_signal = false		1093050	2		=			
ANR	1093070	Identifier	false		1093050	0					
ANR	1093071	Identifier	false		1093050	1					
ANR	1093072	IdentifierDeclStatement	HANDLE hKids [ MAXIMUM_WAIT_OBJECTS ] ;	9494:1:290934:290968	1093050	4	True				
ANR	1093073	IdentifierDecl	hKids [ MAXIMUM_WAIT_OBJECTS ]		1093050	0					
ANR	1093074	IdentifierDeclType	HANDLE [ MAXIMUM_WAIT_OBJECTS ]		1093050	0					
ANR	1093075	Identifier	hKids		1093050	1					
ANR	1093076	Identifier	MAXIMUM_WAIT_OBJECTS		1093050	2					
ANR	1093077	IdentifierDeclStatement	int last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5 ;	9495:1:290971:291022	1093050	5	True				
ANR	1093078	IdentifierDecl	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		1093050	0					
ANR	1093079	IdentifierDeclType	int		1093050	0					
ANR	1093080	Identifier	last_pidentry_exited		1093050	1					
ANR	1093081	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		1093050	2		=			
ANR	1093082	Identifier	last_pidentry_exited		1093050	0					
ANR	1093083	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		1093050	1		+			
ANR	1093084	Identifier	MAXIMUM_WAIT_OBJECTS		1093050	0					
ANR	1093085	PrimaryExpression	5		1093050	1					
ANR	1093086	IdentifierDeclStatement	unsigned int exited_pid ;	9496:1:291025:291048	1093050	6	True				
ANR	1093087	IdentifierDecl	exited_pid		1093050	0					
ANR	1093088	IdentifierDeclType	unsigned int		1093050	0					
ANR	1093089	Identifier	exited_pid		1093050	1					
ANR	1093090	IdentifierDeclStatement	DWORD result ;	9497:1:291051:291063	1093050	7	True				
ANR	1093091	IdentifierDecl	result		1093050	0					
ANR	1093092	IdentifierDeclType	DWORD		1093050	0					
ANR	1093093	Identifier	result		1093050	1					
ANR	1093094	IdentifierDeclStatement	Queue < DaemonCore :: WaitpidEntry > MyExitedQueue ;	9498:1:291066:291111	1093050	8	True				
ANR	1093095	IdentifierDecl	MyExitedQueue		1093050	0					
ANR	1093096	IdentifierDeclType	Queue < DaemonCore :: WaitpidEntry >		1093050	0					
ANR	1093097	Identifier	MyExitedQueue		1093050	1					
ANR	1093098	IdentifierDeclStatement	DaemonCore :: WaitpidEntry wait_entry ;	9499:1:291114:291149	1093050	9	True				
ANR	1093099	IdentifierDecl	wait_entry		1093050	0					
ANR	1093100	IdentifierDeclType	DaemonCore :: WaitpidEntry		1093050	0					
ANR	1093101	Identifier	wait_entry		1093050	1					
ANR	1093102	ExpressionStatement	entry = ( DaemonCore :: PidWatcherEntry * ) arg	9501:1:291153:291196	1093050	10	True				
ANR	1093103	AssignmentExpression	entry = ( DaemonCore :: PidWatcherEntry * ) arg		1093050	0		=			
ANR	1093104	Identifier	entry		1093050	0					
ANR	1093105	CastExpression	( DaemonCore :: PidWatcherEntry * ) arg		1093050	1					
ANR	1093106	CastTarget	DaemonCore :: PidWatcherEntry *		1093050	0					
ANR	1093107	Identifier	arg		1093050	1					
ANR	1093108	ForStatement	for ( ; ; )		1093050	11					
ANR	1093109	CompoundStatement		15:10:380:380	1093050	0					
ANR	1093110	Statement	::	9505:1:291213:291214	1093050	0	True				
ANR	1093111	ExpressionStatement	EnterCriticalSection ( & ( entry -> crit_section ) )	9505:3:291215:291259	1093050	1	True				
ANR	1093112	CallExpression	EnterCriticalSection ( & ( entry -> crit_section ) )		1093050	0					
ANR	1093113	Callee	EnterCriticalSection		1093050	0					
ANR	1093114	Identifier	EnterCriticalSection		1093050	0					
ANR	1093115	ArgumentList	& ( entry -> crit_section )		1093050	1					
ANR	1093116	Argument	& ( entry -> crit_section )		1093050	0					
ANR	1093117	UnaryOperationExpression	& ( entry -> crit_section )		1093050	0					
ANR	1093118	UnaryOperator	&		1093050	0					
ANR	1093119	PtrMemberAccess	entry -> crit_section		1093050	1					
ANR	1093120	Identifier	entry		1093050	0					
ANR	1093121	Identifier	crit_section		1093050	1					
ANR	1093122	ExpressionStatement	numentries = 0	9506:1:291262:291276	1093050	2	True				
ANR	1093123	AssignmentExpression	numentries = 0		1093050	0		=			
ANR	1093124	Identifier	numentries		1093050	0					
ANR	1093125	PrimaryExpression	0		1093050	1					
ANR	1093126	ForStatement	for ( i = 0 ; i < entry -> nEntries ; i ++ )		1093050	3					
ANR	1093127	ForInit	i = 0 ;	9507:6:291284:291287	1093050	0	True				
ANR	1093128	AssignmentExpression	i = 0		1093050	0		=			
ANR	1093129	Identifier	i		1093050	0					
ANR	1093130	PrimaryExpression	0		1093050	1					
ANR	1093131	Condition	i < entry -> nEntries	9507:11:291289:291307	1093050	1	True				
ANR	1093132	RelationalExpression	i < entry -> nEntries		1093050	0		<			
ANR	1093133	Identifier	i		1093050	0					
ANR	1093134	PtrMemberAccess	entry -> nEntries		1093050	1					
ANR	1093135	Identifier	entry		1093050	0					
ANR	1093136	Identifier	nEntries		1093050	1					
ANR	1093137	PostIncDecOperationExpression	i ++	9507:32:291310:291312	1093050	2	True				
ANR	1093138	Identifier	i		1093050	0					
ANR	1093139	IncDec	++		1093050	1					
ANR	1093140	CompoundStatement		19:38:487:487	1093050	3					
ANR	1093141	IfStatement	if ( ( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] ) )		1093050	0					
ANR	1093142	Condition	( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] )	9508:7:291325:291377	1093050	0	True				
ANR	1093143	AndExpression	( i != last_pidentry_exited ) && ( entry -> pidentries [ i ] )		1093050	0		&&			
ANR	1093144	EqualityExpression	i != last_pidentry_exited		1093050	0		!=			
ANR	1093145	Identifier	i		1093050	0					
ANR	1093146	Identifier	last_pidentry_exited		1093050	1					
ANR	1093147	ArrayIndexing	entry -> pidentries [ i ]		1093050	1					
ANR	1093148	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093149	Identifier	entry		1093050	0					
ANR	1093150	Identifier	pidentries		1093050	1					
ANR	1093151	Identifier	i		1093050	1					
ANR	1093152	CompoundStatement		20:63:552:552	1093050	1					
ANR	1093153	IfStatement	"if ( InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L ) )"		1093050	0					
ANR	1093154	Condition	"InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L )"	9509:7:291390:291448	1093050	0	True				
ANR	1093155	CallExpression	"InterlockedExchange ( & ( entry -> pidentries [ i ] -> deallocate ) , 0L )"		1093050	0					
ANR	1093156	Callee	InterlockedExchange		1093050	0					
ANR	1093157	Identifier	InterlockedExchange		1093050	0					
ANR	1093158	ArgumentList	& ( entry -> pidentries [ i ] -> deallocate )		1093050	1					
ANR	1093159	Argument	& ( entry -> pidentries [ i ] -> deallocate )		1093050	0					
ANR	1093160	UnaryOperationExpression	& ( entry -> pidentries [ i ] -> deallocate )		1093050	0					
ANR	1093161	UnaryOperator	&		1093050	0					
ANR	1093162	PtrMemberAccess	entry -> pidentries [ i ] -> deallocate		1093050	1					
ANR	1093163	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093164	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093165	Identifier	entry		1093050	0					
ANR	1093166	Identifier	pidentries		1093050	1					
ANR	1093167	Identifier	i		1093050	1					
ANR	1093168	Identifier	deallocate		1093050	1					
ANR	1093169	Argument	0L		1093050	1					
ANR	1093170	PrimaryExpression	0L		1093050	0					
ANR	1093171	CompoundStatement		22:3:625:625	1093050	1					
ANR	1093172	ExpressionStatement	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered ( )	9515:4:291640:291689	1093050	0	True				
ANR	1093173	CallExpression	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered ( )		1093050	0					
ANR	1093174	Callee	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered		1093050	0					
ANR	1093175	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd -> set_unregistered		1093050	0					
ANR	1093176	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd		1093050	0					
ANR	1093177	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093178	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093179	Identifier	entry		1093050	0					
ANR	1093180	Identifier	pidentries		1093050	1					
ANR	1093181	Identifier	i		1093050	1					
ANR	1093182	Identifier	pipeEnd		1093050	1					
ANR	1093183	Identifier	set_unregistered		1093050	1					
ANR	1093184	ArgumentList			1093050	1					
ANR	1093185	ExpressionStatement	entry -> pidentries [ i ] = NULL	9516:4:291695:291722	1093050	1	True				
ANR	1093186	AssignmentExpression	entry -> pidentries [ i ] = NULL		1093050	0		=			
ANR	1093187	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093188	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093189	Identifier	entry		1093050	0					
ANR	1093190	Identifier	pidentries		1093050	1					
ANR	1093191	Identifier	i		1093050	1					
ANR	1093192	Identifier	NULL		1093050	1					
ANR	1093193	ContinueStatement	continue ;	9517:4:291728:291736	1093050	2	True				
ANR	1093194	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> hProcess	9519:3:291769:291819	1093050	1	True				
ANR	1093195	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> hProcess		1093050	0		=			
ANR	1093196	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093197	Identifier	hKids		1093050	0					
ANR	1093198	Identifier	numentries		1093050	1					
ANR	1093199	PtrMemberAccess	entry -> pidentries [ i ] -> hProcess		1093050	1					
ANR	1093200	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093201	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093202	Identifier	entry		1093050	0					
ANR	1093203	Identifier	pidentries		1093050	1					
ANR	1093204	Identifier	i		1093050	1					
ANR	1093205	Identifier	hProcess		1093050	1					
ANR	1093206	IfStatement	if ( hKids [ numentries ] == NULL )		1093050	2					
ANR	1093207	Condition	hKids [ numentries ] == NULL	9521:8:291884:291908	1093050	0	True				
ANR	1093208	EqualityExpression	hKids [ numentries ] == NULL		1093050	0		==			
ANR	1093209	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093210	Identifier	hKids		1093050	0					
ANR	1093211	Identifier	numentries		1093050	1					
ANR	1093212	Identifier	NULL		1093050	1					
ANR	1093213	CompoundStatement		33:36:1083:1083	1093050	1					
ANR	1093214	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> hThread	9523:4:291969:292018	1093050	0	True				
ANR	1093215	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> hThread		1093050	0		=			
ANR	1093216	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093217	Identifier	hKids		1093050	0					
ANR	1093218	Identifier	numentries		1093050	1					
ANR	1093219	PtrMemberAccess	entry -> pidentries [ i ] -> hThread		1093050	1					
ANR	1093220	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093221	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093222	Identifier	entry		1093050	0					
ANR	1093223	Identifier	pidentries		1093050	1					
ANR	1093224	Identifier	i		1093050	1					
ANR	1093225	Identifier	hThread		1093050	1					
ANR	1093226	IfStatement	if ( hKids [ numentries ] == NULL )		1093050	3					
ANR	1093227	Condition	hKids [ numentries ] == NULL	9525:8:292033:292057	1093050	0	True				
ANR	1093228	EqualityExpression	hKids [ numentries ] == NULL		1093050	0		==			
ANR	1093229	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093230	Identifier	hKids		1093050	0					
ANR	1093231	Identifier	numentries		1093050	1					
ANR	1093232	Identifier	NULL		1093050	1					
ANR	1093233	CompoundStatement		37:36:1232:1232	1093050	1					
ANR	1093234	ExpressionStatement	hKids [ numentries ] = entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )	9530:4:292234:292295	1093050	0	True				
ANR	1093235	AssignmentExpression	hKids [ numentries ] = entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )		1093050	0		=			
ANR	1093236	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093237	Identifier	hKids		1093050	0					
ANR	1093238	Identifier	numentries		1093050	1					
ANR	1093239	CallExpression	entry -> pidentries [ i ] -> pipeEnd -> pre_wait ( )		1093050	1					
ANR	1093240	Callee	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		1093050	0					
ANR	1093241	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		1093050	0					
ANR	1093242	PtrMemberAccess	entry -> pidentries [ i ] -> pipeEnd		1093050	0					
ANR	1093243	ArrayIndexing	entry -> pidentries [ i ]		1093050	0					
ANR	1093244	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093245	Identifier	entry		1093050	0					
ANR	1093246	Identifier	pidentries		1093050	1					
ANR	1093247	Identifier	i		1093050	1					
ANR	1093248	Identifier	pipeEnd		1093050	1					
ANR	1093249	Identifier	pre_wait		1093050	1					
ANR	1093250	ArgumentList			1093050	1					
ANR	1093251	ExpressionStatement	entry -> pidentries [ numentries ] = entry -> pidentries [ i ]	9532:3:292305:292357	1093050	4	True				
ANR	1093252	AssignmentExpression	entry -> pidentries [ numentries ] = entry -> pidentries [ i ]		1093050	0		=			
ANR	1093253	ArrayIndexing	entry -> pidentries [ numentries ]		1093050	0					
ANR	1093254	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093255	Identifier	entry		1093050	0					
ANR	1093256	Identifier	pidentries		1093050	1					
ANR	1093257	Identifier	numentries		1093050	1					
ANR	1093258	ArrayIndexing	entry -> pidentries [ i ]		1093050	1					
ANR	1093259	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093260	Identifier	entry		1093050	0					
ANR	1093261	Identifier	pidentries		1093050	1					
ANR	1093262	Identifier	i		1093050	1					
ANR	1093263	ExpressionStatement	numentries ++	9533:3:292362:292374	1093050	5	True				
ANR	1093264	PostIncDecOperationExpression	numentries ++		1093050	0					
ANR	1093265	Identifier	numentries		1093050	0					
ANR	1093266	IncDec	++		1093050	1					
ANR	1093267	ExpressionStatement	hKids [ numentries ] = entry -> event	9536:1:292384:292416	1093050	4	True				
ANR	1093268	AssignmentExpression	hKids [ numentries ] = entry -> event		1093050	0		=			
ANR	1093269	ArrayIndexing	hKids [ numentries ]		1093050	0					
ANR	1093270	Identifier	hKids		1093050	0					
ANR	1093271	Identifier	numentries		1093050	1					
ANR	1093272	PtrMemberAccess	entry -> event		1093050	1					
ANR	1093273	Identifier	entry		1093050	0					
ANR	1093274	Identifier	event		1093050	1					
ANR	1093275	ExpressionStatement	entry -> nEntries = numentries	9537:1:292419:292447	1093050	5	True				
ANR	1093276	AssignmentExpression	entry -> nEntries = numentries		1093050	0		=			
ANR	1093277	PtrMemberAccess	entry -> nEntries		1093050	0					
ANR	1093278	Identifier	entry		1093050	0					
ANR	1093279	Identifier	nEntries		1093050	1					
ANR	1093280	Identifier	numentries		1093050	1					
ANR	1093281	Statement	::	9538:1:292450:292451	1093050	6	True				
ANR	1093282	ExpressionStatement	LeaveCriticalSection ( & ( entry -> crit_section ) )	9538:3:292452:292496	1093050	7	True				
ANR	1093283	CallExpression	LeaveCriticalSection ( & ( entry -> crit_section ) )		1093050	0					
ANR	1093284	Callee	LeaveCriticalSection		1093050	0					
ANR	1093285	Identifier	LeaveCriticalSection		1093050	0					
ANR	1093286	ArgumentList	& ( entry -> crit_section )		1093050	1					
ANR	1093287	Argument	& ( entry -> crit_section )		1093050	0					
ANR	1093288	UnaryOperationExpression	& ( entry -> crit_section )		1093050	0					
ANR	1093289	UnaryOperator	&		1093050	0					
ANR	1093290	PtrMemberAccess	entry -> crit_section		1093050	1					
ANR	1093291	Identifier	entry		1093050	0					
ANR	1093292	Identifier	crit_section		1093050	1					
ANR	1093293	IfStatement	if ( numentries == 0 && ! must_send_signal )		1093050	8					
ANR	1093294	Condition	numentries == 0 && ! must_send_signal	9543:6:292641:292676	1093050	0	True				
ANR	1093295	AndExpression	numentries == 0 && ! must_send_signal		1093050	0		&&			
ANR	1093296	EqualityExpression	numentries == 0		1093050	0		==			
ANR	1093297	Identifier	numentries		1093050	0					
ANR	1093298	PrimaryExpression	0		1093050	1					
ANR	1093299	UnaryOperationExpression	! must_send_signal		1093050	1					
ANR	1093300	UnaryOperator	!		1093050	0					
ANR	1093301	Identifier	must_send_signal		1093050	1					
ANR	1093302	ReturnStatement	return TRUE ;	9544:2:292682:292693	1093050	1	True				
ANR	1093303	Identifier	TRUE		1093050	0					
ANR	1093304	ExpressionStatement	result = WAIT_TIMEOUT	9557:1:293380:293401	1093050	9	True				
ANR	1093305	AssignmentExpression	result = WAIT_TIMEOUT		1093050	0		=			
ANR	1093306	Identifier	result		1093050	0					
ANR	1093307	Identifier	WAIT_TIMEOUT		1093050	1					
ANR	1093308	IfStatement	if ( numentries )		1093050	10					
ANR	1093309	Condition	numentries	9560:5:293542:293551	1093050	0	True				
ANR	1093310	Identifier	numentries		1093050	0					
ANR	1093311	CompoundStatement		72:17:2725:2725	1093050	1					
ANR	1093312	Statement	result	9561:2:293558:293563	1093050	0	True				
ANR	1093313	Statement	=	9561:9:293565:293565	1093050	1	True				
ANR	1093314	Statement	::	9561:11:293567:293568	1093050	2	True				
ANR	1093315	ExpressionStatement	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , 0 )"	9561:13:293569:293624	1093050	3	True				
ANR	1093316	CallExpression	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , 0 )"		1093050	0					
ANR	1093317	Callee	WaitForMultipleObjects		1093050	0					
ANR	1093318	Identifier	WaitForMultipleObjects		1093050	0					
ANR	1093319	ArgumentList	numentries + 1		1093050	1					
ANR	1093320	Argument	numentries + 1		1093050	0					
ANR	1093321	AdditiveExpression	numentries + 1		1093050	0		+			
ANR	1093322	Identifier	numentries		1093050	0					
ANR	1093323	PrimaryExpression	1		1093050	1					
ANR	1093324	Argument	hKids		1093050	1					
ANR	1093325	Identifier	hKids		1093050	0					
ANR	1093326	Argument	FALSE		1093050	2					
ANR	1093327	Identifier	FALSE		1093050	0					
ANR	1093328	Argument	0		1093050	3					
ANR	1093329	PrimaryExpression	0		1093050	0					
ANR	1093330	IfStatement	if ( result == WAIT_TIMEOUT )		1093050	11					
ANR	1093331	Condition	result == WAIT_TIMEOUT	9563:6:293635:293656	1093050	0	True				
ANR	1093332	EqualityExpression	result == WAIT_TIMEOUT		1093050	0		==			
ANR	1093333	Identifier	result		1093050	0					
ANR	1093334	Identifier	WAIT_TIMEOUT		1093050	1					
ANR	1093335	CompoundStatement		81:2:3068:3086	1093050	1					
ANR	1093336	IdentifierDeclStatement	bool notify_failed ;	9569:2:293897:293915	1093050	0	True				
ANR	1093337	IdentifierDecl	notify_failed		1093050	0					
ANR	1093338	IdentifierDeclType	bool		1093050	0					
ANR	1093339	Identifier	notify_failed		1093050	1					
ANR	1093340	WhileStatement	while ( must_send_signal )		1093050	1					
ANR	1093341	Condition	must_send_signal	9570:10:293927:293942	1093050	0	True				
ANR	1093342	Identifier	must_send_signal		1093050	0					
ANR	1093343	CompoundStatement		92:3:3502:3602	1093050	1					
ANR	1093344	Statement	::	9574:3:294050:294051	1093050	0	True				
ANR	1093345	ExpressionStatement	EnterCriticalSection ( & Big_fat_mutex )	9574:5:294052:294088	1093050	1	True				
ANR	1093346	CallExpression	EnterCriticalSection ( & Big_fat_mutex )		1093050	0					
ANR	1093347	Callee	EnterCriticalSection		1093050	0					
ANR	1093348	Identifier	EnterCriticalSection		1093050	0					
ANR	1093349	ArgumentList	& Big_fat_mutex		1093050	1					
ANR	1093350	Argument	& Big_fat_mutex		1093050	0					
ANR	1093351	UnaryOperationExpression	& Big_fat_mutex		1093050	0					
ANR	1093352	UnaryOperator	&		1093050	0					
ANR	1093353	Identifier	Big_fat_mutex		1093050	1					
ANR	1093354	IdentifierDeclStatement	"Daemon d ( DT_ANY , daemonCore -> privateNetworkIpAddr ( ) ) ;"	9577:3:294228:294282	1093050	2	True				
ANR	1093355	IdentifierDecl	"d ( DT_ANY , daemonCore -> privateNetworkIpAddr ( ) )"		1093050	0					
ANR	1093356	IdentifierDeclType	Daemon		1093050	0					
ANR	1093357	Identifier	d		1093050	1					
ANR	1093358	Expression	"DT_ANY , daemonCore -> privateNetworkIpAddr ( )"		1093050	2					
ANR	1093359	Identifier	DT_ANY		1093050	0					
ANR	1093360	CallExpression	daemonCore -> privateNetworkIpAddr ( )		1093050	1					
ANR	1093361	Callee	daemonCore -> privateNetworkIpAddr		1093050	0					
ANR	1093362	PtrMemberAccess	daemonCore -> privateNetworkIpAddr		1093050	0					
ANR	1093363	Identifier	daemonCore		1093050	0					
ANR	1093364	Identifier	privateNetworkIpAddr		1093050	1					
ANR	1093365	ArgumentList			1093050	1					
ANR	1093366	IdentifierDeclStatement	SafeSock ssock ;	9578:9:294293:294307	1093050	3	True				
ANR	1093367	IdentifierDecl	ssock		1093050	0					
ANR	1093368	IdentifierDeclType	SafeSock		1093050	0					
ANR	1093369	Identifier	ssock		1093050	1					
ANR	1093370	IdentifierDeclStatement	ReliSock rsock ;	9579:3:294312:294326	1093050	4	True				
ANR	1093371	IdentifierDecl	rsock		1093050	0					
ANR	1093372	IdentifierDeclType	ReliSock		1093050	0					
ANR	1093373	Identifier	rsock		1093050	1					
ANR	1093374	IdentifierDeclStatement	Sock & sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock ;	9580:3:294331:294431	1093050	5	True				
ANR	1093375	IdentifierDecl	& sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		1093050	0					
ANR	1093376	IdentifierDeclType	Sock &		1093050	0					
ANR	1093377	Identifier	sock		1093050	1					
ANR	1093378	AssignmentExpression	& sock = ( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		1093050	2		=			
ANR	1093379	Identifier	sock		1093050	0					
ANR	1093380	ConditionalExpression	( d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock ) ? * ( Sock * ) & ssock : * ( Sock * ) & rsock		1093050	1					
ANR	1093381	Condition	d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock		1093050	0					
ANR	1093382	AndExpression	d . hasUDPCommandPort ( ) && daemonCore -> dc_ssock		1093050	0		&&			
ANR	1093383	CallExpression	d . hasUDPCommandPort ( )		1093050	0					
ANR	1093384	Callee	d . hasUDPCommandPort		1093050	0					
ANR	1093385	MemberAccess	d . hasUDPCommandPort		1093050	0					
ANR	1093386	Identifier	d		1093050	0					
ANR	1093387	Identifier	hasUDPCommandPort		1093050	1					
ANR	1093388	ArgumentList			1093050	1					
ANR	1093389	PtrMemberAccess	daemonCore -> dc_ssock		1093050	1					
ANR	1093390	Identifier	daemonCore		1093050	0					
ANR	1093391	Identifier	dc_ssock		1093050	1					
ANR	1093392	UnaryOperationExpression	* ( Sock * ) & ssock		1093050	1					
ANR	1093393	UnaryOperator	*		1093050	0					
ANR	1093394	CastExpression	( Sock * ) & ssock		1093050	1					
ANR	1093395	CastTarget	Sock *		1093050	0					
ANR	1093396	UnaryOperationExpression	& ssock		1093050	1					
ANR	1093397	UnaryOperator	&		1093050	0					
ANR	1093398	Identifier	ssock		1093050	1					
ANR	1093399	UnaryOperationExpression	* ( Sock * ) & rsock		1093050	2					
ANR	1093400	UnaryOperator	*		1093050	0					
ANR	1093401	CastExpression	( Sock * ) & rsock		1093050	1					
ANR	1093402	CastTarget	Sock *		1093050	0					
ANR	1093403	UnaryOperationExpression	& rsock		1093050	1					
ANR	1093404	UnaryOperator	&		1093050	0					
ANR	1093405	Identifier	rsock		1093050	1					
ANR	1093406	ExpressionStatement	"notify_failed = ! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"	9583:3:294498:294635	1093050	6	True				
ANR	1093407	AssignmentExpression	"notify_failed = ! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		1093050	0		=			
ANR	1093408	Identifier	notify_failed		1093050	0					
ANR	1093409	OrExpression	"! d . connectSock ( & sock , 1 ) || ! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		1093050	1		||			
ANR	1093410	UnaryOperationExpression	"! d . connectSock ( & sock , 1 )"		1093050	0					
ANR	1093411	UnaryOperator	!		1093050	0					
ANR	1093412	CallExpression	"d . connectSock ( & sock , 1 )"		1093050	1					
ANR	1093413	Callee	d . connectSock		1093050	0					
ANR	1093414	MemberAccess	d . connectSock		1093050	0					
ANR	1093415	Identifier	d		1093050	0					
ANR	1093416	Identifier	connectSock		1093050	1					
ANR	1093417	ArgumentList	& sock		1093050	1					
ANR	1093418	Argument	& sock		1093050	0					
ANR	1093419	UnaryOperationExpression	& sock		1093050	0					
ANR	1093420	UnaryOperator	&		1093050	0					
ANR	1093421	Identifier	sock		1093050	1					
ANR	1093422	Argument	1		1093050	1					
ANR	1093423	PrimaryExpression	1		1093050	0					
ANR	1093424	OrExpression	"! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true ) || ! sock . end_of_message ( )"		1093050	1		||			
ANR	1093425	UnaryOperationExpression	"! d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true )"		1093050	0					
ANR	1093426	UnaryOperator	!		1093050	0					
ANR	1093427	CallExpression	"d . startCommand ( DC_NOP , & sock , 1 , NULL , ""DC_NOP"" , true )"		1093050	1					
ANR	1093428	Callee	d . startCommand		1093050	0					
ANR	1093429	MemberAccess	d . startCommand		1093050	0					
ANR	1093430	Identifier	d		1093050	0					
ANR	1093431	Identifier	startCommand		1093050	1					
ANR	1093432	ArgumentList	DC_NOP		1093050	1					
ANR	1093433	Argument	DC_NOP		1093050	0					
ANR	1093434	Identifier	DC_NOP		1093050	0					
ANR	1093435	Argument	& sock		1093050	1					
ANR	1093436	UnaryOperationExpression	& sock		1093050	0					
ANR	1093437	UnaryOperator	&		1093050	0					
ANR	1093438	Identifier	sock		1093050	1					
ANR	1093439	Argument	1		1093050	2					
ANR	1093440	PrimaryExpression	1		1093050	0					
ANR	1093441	Argument	NULL		1093050	3					
ANR	1093442	Identifier	NULL		1093050	0					
ANR	1093443	Argument	"""DC_NOP"""		1093050	4					
ANR	1093444	PrimaryExpression	"""DC_NOP"""		1093050	0					
ANR	1093445	Argument	true		1093050	5					
ANR	1093446	Identifier	true		1093050	0					
ANR	1093447	UnaryOperationExpression	! sock . end_of_message ( )		1093050	1					
ANR	1093448	UnaryOperator	!		1093050	0					
ANR	1093449	CallExpression	sock . end_of_message ( )		1093050	1					
ANR	1093450	Callee	sock . end_of_message		1093050	0					
ANR	1093451	MemberAccess	sock . end_of_message		1093050	0					
ANR	1093452	Identifier	sock		1093050	0					
ANR	1093453	Identifier	end_of_message		1093050	1					
ANR	1093454	ArgumentList			1093050	1					
ANR	1093455	IfStatement	if ( ! MyExitedQueue . IsEmpty ( ) )		1093050	7					
ANR	1093456	Condition	! MyExitedQueue . IsEmpty ( )	9594:8:294942:294965	1093050	0	True				
ANR	1093457	UnaryOperationExpression	! MyExitedQueue . IsEmpty ( )		1093050	0					
ANR	1093458	UnaryOperator	!		1093050	0					
ANR	1093459	CallExpression	MyExitedQueue . IsEmpty ( )		1093050	1					
ANR	1093460	Callee	MyExitedQueue . IsEmpty		1093050	0					
ANR	1093461	MemberAccess	MyExitedQueue . IsEmpty		1093050	0					
ANR	1093462	Identifier	MyExitedQueue		1093050	0					
ANR	1093463	Identifier	IsEmpty		1093050	1					
ANR	1093464	ArgumentList			1093050	1					
ANR	1093465	CompoundStatement		106:35:4140:4140	1093050	1					
ANR	1093466	ExpressionStatement	"daemonCore -> HandleSig ( _DC_RAISESIGNAL , DC_SERVICEWAITPIDS )"	9595:4:294975:295032	1093050	0	True				
ANR	1093467	CallExpression	"daemonCore -> HandleSig ( _DC_RAISESIGNAL , DC_SERVICEWAITPIDS )"		1093050	0					
ANR	1093468	Callee	daemonCore -> HandleSig		1093050	0					
ANR	1093469	PtrMemberAccess	daemonCore -> HandleSig		1093050	0					
ANR	1093470	Identifier	daemonCore		1093050	0					
ANR	1093471	Identifier	HandleSig		1093050	1					
ANR	1093472	ArgumentList	_DC_RAISESIGNAL		1093050	1					
ANR	1093473	Argument	_DC_RAISESIGNAL		1093050	0					
ANR	1093474	Identifier	_DC_RAISESIGNAL		1093050	0					
ANR	1093475	Argument	DC_SERVICEWAITPIDS		1093050	1					
ANR	1093476	Identifier	DC_SERVICEWAITPIDS		1093050	0					
ANR	1093477	WhileStatement	while ( MyExitedQueue . dequeue ( wait_entry ) == 0 )		1093050	8					
ANR	1093478	Condition	MyExitedQueue . dequeue ( wait_entry ) == 0	9597:10:295049:295084	1093050	0	True				
ANR	1093479	EqualityExpression	MyExitedQueue . dequeue ( wait_entry ) == 0		1093050	0		==			
ANR	1093480	CallExpression	MyExitedQueue . dequeue ( wait_entry )		1093050	0					
ANR	1093481	Callee	MyExitedQueue . dequeue		1093050	0					
ANR	1093482	MemberAccess	MyExitedQueue . dequeue		1093050	0					
ANR	1093483	Identifier	MyExitedQueue		1093050	0					
ANR	1093484	Identifier	dequeue		1093050	1					
ANR	1093485	ArgumentList	wait_entry		1093050	1					
ANR	1093486	Argument	wait_entry		1093050	0					
ANR	1093487	Identifier	wait_entry		1093050	0					
ANR	1093488	PrimaryExpression	0		1093050	1					
ANR	1093489	CompoundStatement		109:48:4258:4258	1093050	1					
ANR	1093490	ExpressionStatement	daemonCore -> WaitpidQueue . enqueue ( wait_entry )	9598:4:295093:295139	1093050	0	True				
ANR	1093491	CallExpression	daemonCore -> WaitpidQueue . enqueue ( wait_entry )		1093050	0					
ANR	1093492	Callee	daemonCore -> WaitpidQueue . enqueue		1093050	0					
ANR	1093493	MemberAccess	daemonCore -> WaitpidQueue . enqueue		1093050	0					
ANR	1093494	PtrMemberAccess	daemonCore -> WaitpidQueue		1093050	0					
ANR	1093495	Identifier	daemonCore		1093050	0					
ANR	1093496	Identifier	WaitpidQueue		1093050	1					
ANR	1093497	Identifier	enqueue		1093050	1					
ANR	1093498	ArgumentList	wait_entry		1093050	1					
ANR	1093499	Argument	wait_entry		1093050	0					
ANR	1093500	Identifier	wait_entry		1093050	0					
ANR	1093501	ExpressionStatement	notify_failed = ! daemonCore -> Do_Wake_up_select ( )	9605:3:295415:295464	1093050	9	True				
ANR	1093502	AssignmentExpression	notify_failed = ! daemonCore -> Do_Wake_up_select ( )		1093050	0		=			
ANR	1093503	Identifier	notify_failed		1093050	0					
ANR	1093504	UnaryOperationExpression	! daemonCore -> Do_Wake_up_select ( )		1093050	1					
ANR	1093505	UnaryOperator	!		1093050	0					
ANR	1093506	CallExpression	daemonCore -> Do_Wake_up_select ( )		1093050	1					
ANR	1093507	Callee	daemonCore -> Do_Wake_up_select		1093050	0					
ANR	1093508	PtrMemberAccess	daemonCore -> Do_Wake_up_select		1093050	0					
ANR	1093509	Identifier	daemonCore		1093050	0					
ANR	1093510	Identifier	Do_Wake_up_select		1093050	1					
ANR	1093511	ArgumentList			1093050	1					
ANR	1093512	Statement	::	9607:3:295470:295471	1093050	10	True				
ANR	1093513	ExpressionStatement	LeaveCriticalSection ( & Big_fat_mutex )	9607:5:295472:295508	1093050	11	True				
ANR	1093514	CallExpression	LeaveCriticalSection ( & Big_fat_mutex )		1093050	0					
ANR	1093515	Callee	LeaveCriticalSection		1093050	0					
ANR	1093516	Identifier	LeaveCriticalSection		1093050	0					
ANR	1093517	ArgumentList	& Big_fat_mutex		1093050	1					
ANR	1093518	Argument	& Big_fat_mutex		1093050	0					
ANR	1093519	UnaryOperationExpression	& Big_fat_mutex		1093050	0					
ANR	1093520	UnaryOperator	&		1093050	0					
ANR	1093521	Identifier	Big_fat_mutex		1093050	1					
ANR	1093522	IfStatement	if ( notify_failed )		1093050	12					
ANR	1093523	Condition	notify_failed	9609:17:295551:295563	1093050	0	True				
ANR	1093524	Identifier	notify_failed		1093050	0					
ANR	1093525	CompoundStatement		122:3:4741:4741	1093050	1					
ANR	1093526	Statement	dprintf	9613:4:295692:295698	1093050	0	True				
ANR	1093527	Statement	(	9613:11:295699:295699	1093050	1	True				
ANR	1093528	Statement	D_ALWAYS	9613:12:295700:295707	1093050	2	True				
ANR	1093529	Statement	","	9613:20:295708:295708	1093050	3	True				
ANR	1093530	Statement	"""PidWatcher thread couldn't notify main thread """	9614:5:295715:295762	1093050	4	True				
ANR	1093531	Statement	"""(exited_pid=%d)\\n"""	9615:5:295769:295787	1093050	5	True				
ANR	1093532	Statement	","	9615:24:295788:295788	1093050	6	True				
ANR	1093533	Statement	exited_pid	9615:26:295790:295799	1093050	7	True				
ANR	1093534	Statement	)	9615:36:295800:295800	1093050	8	True				
ANR	1093535	ExpressionStatement		9615:37:295801:295801	1093050	9	True				
ANR	1093536	Statement	::	9617:4:295808:295809	1093050	10	True				
ANR	1093537	ExpressionStatement	Sleep ( 500 )	9617:6:295810:295820	1093050	11	True				
ANR	1093538	CallExpression	Sleep ( 500 )		1093050	0					
ANR	1093539	Callee	Sleep		1093050	0					
ANR	1093540	Identifier	Sleep		1093050	0					
ANR	1093541	ArgumentList	500		1093050	1					
ANR	1093542	Argument	500		1093050	0					
ANR	1093543	PrimaryExpression	500		1093050	0					
ANR	1093544	ElseStatement	else		1093050	0					
ANR	1093545	CompoundStatement		130:10:5041:5041	1093050	0					
ANR	1093546	ExpressionStatement	must_send_signal = false	9619:4:295876:295900	1093050	0	True				
ANR	1093547	AssignmentExpression	must_send_signal = false		1093050	0		=			
ANR	1093548	Identifier	must_send_signal		1093050	0					
ANR	1093549	Identifier	false		1093050	1					
ANR	1093550	IfStatement	if ( numentries == 0 )		1093050	2					
ANR	1093551	Condition	numentries == 0	9622:6:295917:295931	1093050	0	True				
ANR	1093552	EqualityExpression	numentries == 0		1093050	0		==			
ANR	1093553	Identifier	numentries		1093050	0					
ANR	1093554	PrimaryExpression	0		1093050	1					
ANR	1093555	CompoundStatement		134:23:5105:5105	1093050	1					
ANR	1093556	ReturnStatement	return TRUE ;	9625:3:296020:296031	1093050	0	True				
ANR	1093557	Identifier	TRUE		1093050	0					
ANR	1093558	Statement	result	9629:2:296108:296113	1093050	3	True				
ANR	1093559	Statement	=	9629:9:296115:296115	1093050	4	True				
ANR	1093560	Statement	::	9629:11:296117:296118	1093050	5	True				
ANR	1093561	ExpressionStatement	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , INFINITE )"	9629:13:296119:296181	1093050	6	True				
ANR	1093562	CallExpression	"WaitForMultipleObjects ( numentries + 1 , hKids , FALSE , INFINITE )"		1093050	0					
ANR	1093563	Callee	WaitForMultipleObjects		1093050	0					
ANR	1093564	Identifier	WaitForMultipleObjects		1093050	0					
ANR	1093565	ArgumentList	numentries + 1		1093050	1					
ANR	1093566	Argument	numentries + 1		1093050	0					
ANR	1093567	AdditiveExpression	numentries + 1		1093050	0		+			
ANR	1093568	Identifier	numentries		1093050	0					
ANR	1093569	PrimaryExpression	1		1093050	1					
ANR	1093570	Argument	hKids		1093050	1					
ANR	1093571	Identifier	hKids		1093050	0					
ANR	1093572	Argument	FALSE		1093050	2					
ANR	1093573	Identifier	FALSE		1093050	0					
ANR	1093574	Argument	INFINITE		1093050	3					
ANR	1093575	Identifier	INFINITE		1093050	0					
ANR	1093576	IfStatement	if ( result == WAIT_FAILED )		1093050	12					
ANR	1093577	Condition	result == WAIT_FAILED	9633:6:296194:296214	1093050	0	True				
ANR	1093578	EqualityExpression	result == WAIT_FAILED		1093050	0		==			
ANR	1093579	Identifier	result		1093050	0					
ANR	1093580	Identifier	WAIT_FAILED		1093050	1					
ANR	1093581	CompoundStatement		145:30:5389:5389	1093050	1					
ANR	1093582	ExpressionStatement	"EXCEPT ( ""WaitForMultipleObjects Failed"" )"	9634:2:296222:296261	1093050	0	True				
ANR	1093583	CallExpression	"EXCEPT ( ""WaitForMultipleObjects Failed"" )"		1093050	0					
ANR	1093584	Callee	EXCEPT		1093050	0					
ANR	1093585	Identifier	EXCEPT		1093050	0					
ANR	1093586	ArgumentList	"""WaitForMultipleObjects Failed"""		1093050	1					
ANR	1093587	Argument	"""WaitForMultipleObjects Failed"""		1093050	0					
ANR	1093588	PrimaryExpression	"""WaitForMultipleObjects Failed"""		1093050	0					
ANR	1093589	ExpressionStatement	result = result - WAIT_OBJECT_0	9637:1:296268:296299	1093050	13	True				
ANR	1093590	AssignmentExpression	result = result - WAIT_OBJECT_0		1093050	0		=			
ANR	1093591	Identifier	result		1093050	0					
ANR	1093592	AdditiveExpression	result - WAIT_OBJECT_0		1093050	1		-			
ANR	1093593	Identifier	result		1093050	0					
ANR	1093594	Identifier	WAIT_OBJECT_0		1093050	1					
ANR	1093595	IfStatement	if ( ( result < numentries ) && ( result >= 0 ) )		1093050	14					
ANR	1093596	Condition	( result < numentries ) && ( result >= 0 )	9643:6:296538:296575	1093050	0	True				
ANR	1093597	AndExpression	( result < numentries ) && ( result >= 0 )		1093050	0		&&			
ANR	1093598	RelationalExpression	result < numentries		1093050	0		<			
ANR	1093599	Identifier	result		1093050	0					
ANR	1093600	Identifier	numentries		1093050	1					
ANR	1093601	RelationalExpression	result >= 0		1093050	1		>=			
ANR	1093602	Identifier	result		1093050	0					
ANR	1093603	PrimaryExpression	0		1093050	1					
ANR	1093604	CompoundStatement		155:47:5750:5750	1093050	1					
ANR	1093605	ExpressionStatement	last_pidentry_exited = result	9645:2:296584:296613	1093050	0	True				
ANR	1093606	AssignmentExpression	last_pidentry_exited = result		1093050	0		=			
ANR	1093607	Identifier	last_pidentry_exited		1093050	0					
ANR	1093608	Identifier	result		1093050	1					
ANR	1093609	IfStatement	if ( entry -> pidentries [ result ] -> pipeEnd )		1093050	1					
ANR	1093610	Condition	entry -> pidentries [ result ] -> pipeEnd	9651:7:296824:296857	1093050	0	True				
ANR	1093611	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd		1093050	0					
ANR	1093612	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093613	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093614	Identifier	entry		1093050	0					
ANR	1093615	Identifier	pidentries		1093050	1					
ANR	1093616	Identifier	result		1093050	1					
ANR	1093617	Identifier	pipeEnd		1093050	1					
ANR	1093618	CompoundStatement		163:44:6032:6032	1093050	1					
ANR	1093619	ExpressionStatement	exited_pid = 0	9652:3:296866:296880	1093050	0	True				
ANR	1093620	AssignmentExpression	exited_pid = 0		1093050	0		=			
ANR	1093621	Identifier	exited_pid		1093050	0					
ANR	1093622	PrimaryExpression	0		1093050	1					
ANR	1093623	IfStatement	if ( entry -> pidentries [ result ] -> deallocate )		1093050	1					
ANR	1093624	Condition	entry -> pidentries [ result ] -> deallocate	9653:7:296889:296925	1093050	0	True				
ANR	1093625	PtrMemberAccess	entry -> pidentries [ result ] -> deallocate		1093050	0					
ANR	1093626	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093627	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093628	Identifier	entry		1093050	0					
ANR	1093629	Identifier	pidentries		1093050	1					
ANR	1093630	Identifier	result		1093050	1					
ANR	1093631	Identifier	deallocate		1093050	1					
ANR	1093632	CompoundStatement		165:46:6099:6099	1093050	1					
ANR	1093633	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9658:4:297182:297229	1093050	0	True				
ANR	1093634	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		1093050	0		=			
ANR	1093635	Identifier	last_pidentry_exited		1093050	0					
ANR	1093636	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		1093050	1		+			
ANR	1093637	Identifier	MAXIMUM_WAIT_OBJECTS		1093050	0					
ANR	1093638	PrimaryExpression	5		1093050	1					
ANR	1093639	ElseStatement	else		1093050	0					
ANR	1093640	CompoundStatement		171:10:6412:6412	1093050	0					
ANR	1093641	IfStatement	if ( entry -> pidentries [ result ] -> pipeEnd -> post_wait ( ) )		1093050	0					
ANR	1093642	Condition	entry -> pidentries [ result ] -> pipeEnd -> post_wait ( )	9661:8:297302:297348	1093050	0	True				
ANR	1093643	CallExpression	entry -> pidentries [ result ] -> pipeEnd -> post_wait ( )		1093050	0					
ANR	1093644	Callee	entry -> pidentries [ result ] -> pipeEnd -> post_wait		1093050	0					
ANR	1093645	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd -> post_wait		1093050	0					
ANR	1093646	PtrMemberAccess	entry -> pidentries [ result ] -> pipeEnd		1093050	0					
ANR	1093647	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093648	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093649	Identifier	entry		1093050	0					
ANR	1093650	Identifier	pidentries		1093050	1					
ANR	1093651	Identifier	result		1093050	1					
ANR	1093652	Identifier	pipeEnd		1093050	1					
ANR	1093653	Identifier	post_wait		1093050	1					
ANR	1093654	ArgumentList			1093050	1					
ANR	1093655	CompoundStatement		173:57:6522:6522	1093050	1					
ANR	1093656	ExpressionStatement	"InterlockedExchange ( & ( entry -> pidentries [ result ] -> pipeReady ) , 1L )"	9663:5:297399:297462	1093050	0	True				
ANR	1093657	CallExpression	"InterlockedExchange ( & ( entry -> pidentries [ result ] -> pipeReady ) , 1L )"		1093050	0					
ANR	1093658	Callee	InterlockedExchange		1093050	0					
ANR	1093659	Identifier	InterlockedExchange		1093050	0					
ANR	1093660	ArgumentList	& ( entry -> pidentries [ result ] -> pipeReady )		1093050	1					
ANR	1093661	Argument	& ( entry -> pidentries [ result ] -> pipeReady )		1093050	0					
ANR	1093662	UnaryOperationExpression	& ( entry -> pidentries [ result ] -> pipeReady )		1093050	0					
ANR	1093663	UnaryOperator	&		1093050	0					
ANR	1093664	PtrMemberAccess	entry -> pidentries [ result ] -> pipeReady		1093050	1					
ANR	1093665	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093666	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093667	Identifier	entry		1093050	0					
ANR	1093668	Identifier	pidentries		1093050	1					
ANR	1093669	Identifier	result		1093050	1					
ANR	1093670	Identifier	pipeReady		1093050	1					
ANR	1093671	Argument	1L		1093050	1					
ANR	1093672	PrimaryExpression	1L		1093050	0					
ANR	1093673	ExpressionStatement	must_send_signal = true	9664:5:297469:297492	1093050	1	True				
ANR	1093674	AssignmentExpression	must_send_signal = true		1093050	0		=			
ANR	1093675	Identifier	must_send_signal		1093050	0					
ANR	1093676	Identifier	true		1093050	1					
ANR	1093677	ElseStatement	else		1093050	0					
ANR	1093678	CompoundStatement		178:9:6680:6680	1093050	0					
ANR	1093679	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9668:5:297541:297588	1093050	0	True				
ANR	1093680	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		1093050	0		=			
ANR	1093681	Identifier	last_pidentry_exited		1093050	0					
ANR	1093682	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		1093050	1		+			
ANR	1093683	Identifier	MAXIMUM_WAIT_OBJECTS		1093050	0					
ANR	1093684	PrimaryExpression	5		1093050	1					
ANR	1093685	ElseStatement	else		1093050	0					
ANR	1093686	CompoundStatement		183:9:6781:6781	1093050	0					
ANR	1093687	ExpressionStatement	exited_pid = entry -> pidentries [ result ] -> pid	9672:3:297615:297658	1093050	0	True				
ANR	1093688	AssignmentExpression	exited_pid = entry -> pidentries [ result ] -> pid		1093050	0		=			
ANR	1093689	Identifier	exited_pid		1093050	0					
ANR	1093690	PtrMemberAccess	entry -> pidentries [ result ] -> pid		1093050	1					
ANR	1093691	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093692	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093693	Identifier	entry		1093050	0					
ANR	1093694	Identifier	pidentries		1093050	1					
ANR	1093695	Identifier	result		1093050	1					
ANR	1093696	Identifier	pid		1093050	1					
ANR	1093697	IfStatement	if ( exited_pid )		1093050	2					
ANR	1093698	Condition	exited_pid	9675:7:297672:297681	1093050	0	True				
ANR	1093699	Identifier	exited_pid		1093050	0					
ANR	1093700	CompoundStatement		187:20:6856:6856	1093050	1					
ANR	1093701	ExpressionStatement	wait_entry . child_pid = exited_pid	9679:3:297863:297896	1093050	0	True				
ANR	1093702	AssignmentExpression	wait_entry . child_pid = exited_pid		1093050	0		=			
ANR	1093703	MemberAccess	wait_entry . child_pid		1093050	0					
ANR	1093704	Identifier	wait_entry		1093050	0					
ANR	1093705	Identifier	child_pid		1093050	1					
ANR	1093706	Identifier	exited_pid		1093050	1					
ANR	1093707	ExpressionStatement	wait_entry . exit_status = 0	9680:3:297901:297927	1093050	1	True				
ANR	1093708	AssignmentExpression	wait_entry . exit_status = 0		1093050	0		=			
ANR	1093709	MemberAccess	wait_entry . exit_status		1093050	0					
ANR	1093710	Identifier	wait_entry		1093050	0					
ANR	1093711	Identifier	exit_status		1093050	1					
ANR	1093712	PrimaryExpression	0		1093050	1					
ANR	1093713	ExpressionStatement	MyExitedQueue . enqueue ( wait_entry )	9681:3:297963:297996	1093050	2	True				
ANR	1093714	CallExpression	MyExitedQueue . enqueue ( wait_entry )		1093050	0					
ANR	1093715	Callee	MyExitedQueue . enqueue		1093050	0					
ANR	1093716	MemberAccess	MyExitedQueue . enqueue		1093050	0					
ANR	1093717	Identifier	MyExitedQueue		1093050	0					
ANR	1093718	Identifier	enqueue		1093050	1					
ANR	1093719	ArgumentList	wait_entry		1093050	1					
ANR	1093720	Argument	wait_entry		1093050	0					
ANR	1093721	Identifier	wait_entry		1093050	0					
ANR	1093722	ExpressionStatement	must_send_signal = true	9682:3:298001:298024	1093050	3	True				
ANR	1093723	AssignmentExpression	must_send_signal = true		1093050	0		=			
ANR	1093724	Identifier	must_send_signal		1093050	0					
ANR	1093725	Identifier	true		1093050	1					
ANR	1093726	ExpressionStatement	entry -> pidentries [ result ] -> watcherEvent = NULL	9687:2:298123:298169	1093050	3	True				
ANR	1093727	AssignmentExpression	entry -> pidentries [ result ] -> watcherEvent = NULL		1093050	0		=			
ANR	1093728	PtrMemberAccess	entry -> pidentries [ result ] -> watcherEvent		1093050	0					
ANR	1093729	ArrayIndexing	entry -> pidentries [ result ]		1093050	0					
ANR	1093730	PtrMemberAccess	entry -> pidentries		1093050	0					
ANR	1093731	Identifier	entry		1093050	0					
ANR	1093732	Identifier	pidentries		1093050	1					
ANR	1093733	Identifier	result		1093050	1					
ANR	1093734	Identifier	watcherEvent		1093050	1					
ANR	1093735	Identifier	NULL		1093050	1					
ANR	1093736	ElseStatement	else		1093050	0					
ANR	1093737	CompoundStatement		201:8:7351:7351	1093050	0					
ANR	1093738	ExpressionStatement	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5	9693:2:298348:298395	1093050	0	True				
ANR	1093739	AssignmentExpression	last_pidentry_exited = MAXIMUM_WAIT_OBJECTS + 5		1093050	0		=			
ANR	1093740	Identifier	last_pidentry_exited		1093050	0					
ANR	1093741	AdditiveExpression	MAXIMUM_WAIT_OBJECTS + 5		1093050	1		+			
ANR	1093742	Identifier	MAXIMUM_WAIT_OBJECTS		1093050	0					
ANR	1093743	PrimaryExpression	5		1093050	1					
ANR	1093744	ReturnType	unsigned		1093050	1					
ANR	1093745	Identifier	pidWatcherThread		1093050	2					
ANR	1093746	ParameterList	void * arg		1093050	3					
ANR	1093747	Parameter	void * arg	9488:18:290816:290824	1093050	0	True				
ANR	1093748	ParameterType	void *		1093050	0					
ANR	1093749	Identifier	arg		1093050	1					
ANR	1093750	CFGEntryNode	ENTRY		1093050		True				
ANR	1093751	CFGExitNode	EXIT		1093050		True				
ANR	1093752	InfiniteForNode	true		1093050		True				
ANR	1093753	Symbol	entry -> pidentries [ result ] -> pipeEnd		1093050						
ANR	1093754	Symbol	must_send_signal		1093050						
ANR	1093755	Symbol	entry -> pidentries [ result ] -> watcherEvent		1093050						
ANR	1093756	Symbol	wait_entry . child_pid		1093050						
ANR	1093757	Symbol	* * entry		1093050						
ANR	1093758	Symbol	entry -> pidentries [ i ] -> hProcess		1093050						
ANR	1093759	Symbol	d . hasUDPCommandPort		1093050						
ANR	1093760	Symbol	entry -> nEntries		1093050						
ANR	1093761	Symbol	entry -> pidentries [ i ] -> pipeEnd		1093050						
ANR	1093762	Symbol	DC_SERVICEWAITPIDS		1093050						
ANR	1093763	Symbol	DC_NOP		1093050						
ANR	1093764	Symbol	* numentries		1093050						
ANR	1093765	Symbol	entry -> pidentries [ result ] -> deallocate		1093050						
ANR	1093766	Symbol	& entry -> pidentries [ result ] -> pipeReady		1093050						
ANR	1093767	Symbol	WAIT_TIMEOUT		1093050						
ANR	1093768	Symbol	WAIT_FAILED		1093050						
ANR	1093769	Symbol	& entry -> crit_section		1093050						
ANR	1093770	Symbol	* * * entry -> pidentries		1093050						
ANR	1093771	Symbol	_DC_RAISESIGNAL		1093050						
ANR	1093772	Symbol	numentries		1093050						
ANR	1093773	Symbol	* * i		1093050						
ANR	1093774	Symbol	NULL		1093050						
ANR	1093775	Symbol	daemonCore -> WaitpidQueue		1093050						
ANR	1093776	Symbol	* * * entry		1093050						
ANR	1093777	Symbol	hKids		1093050						
ANR	1093778	Symbol	TRUE		1093050						
ANR	1093779	Symbol	* * result		1093050						
ANR	1093780	Symbol	entry -> pidentries [ result ] -> pipeEnd -> post_wait		1093050						
ANR	1093781	Symbol	& sock		1093050						
ANR	1093782	Symbol	last_pidentry_exited		1093050						
ANR	1093783	Symbol	& Big_fat_mutex		1093050						
ANR	1093784	Symbol	entry		1093050						
ANR	1093785	Symbol	d . startCommand		1093050						
ANR	1093786	Symbol	* daemonCore		1093050						
ANR	1093787	Symbol	wait_entry		1093050						
ANR	1093788	Symbol	* * * i		1093050						
ANR	1093789	Symbol	true		1093050						
ANR	1093790	Symbol	* * entry -> pidentries		1093050						
ANR	1093791	Symbol	ssock		1093050						
ANR	1093792	Symbol	notify_failed		1093050						
ANR	1093793	Symbol	* hKids		1093050						
ANR	1093794	Symbol	exited_pid		1093050						
ANR	1093795	Symbol	rsock		1093050						
ANR	1093796	Symbol	d . connectSock		1093050						
ANR	1093797	Symbol	result		1093050						
ANR	1093798	Symbol	MAXIMUM_WAIT_OBJECTS		1093050						
ANR	1093799	Symbol	sock . end_of_message		1093050						
ANR	1093800	Symbol	* result		1093050						
ANR	1093801	Symbol	* entry -> pidentries		1093050						
ANR	1093802	Symbol	daemonCore -> dc_ssock		1093050						
ANR	1093803	Symbol	arg		1093050						
ANR	1093804	Symbol	& entry -> pidentries [ i ] -> deallocate		1093050						
ANR	1093805	Symbol	daemonCore		1093050						
ANR	1093806	Symbol	WAIT_OBJECT_0		1093050						
ANR	1093807	Symbol	MyExitedQueue		1093050						
ANR	1093808	Symbol	InterlockedExchange		1093050						
ANR	1093809	Symbol	* entry		1093050						
ANR	1093810	Symbol	* ( Sock * ) & rsock		1093050						
ANR	1093811	Symbol	* * * result		1093050						
ANR	1093812	Symbol	d		1093050						
ANR	1093813	Symbol	MyExitedQueue . IsEmpty		1093050						
ANR	1093814	Symbol	* entry -> pidentries [ result ] -> pipeEnd		1093050						
ANR	1093815	Symbol	false		1093050						
ANR	1093816	Symbol	i		1093050						
ANR	1093817	Symbol	* entry -> pidentries [ i ] -> pipeEnd		1093050						
ANR	1093818	Symbol	INFINITE		1093050						
ANR	1093819	Symbol	* ( Sock * ) & ssock		1093050						
ANR	1093820	Symbol	& ssock		1093050						
ANR	1093821	Symbol	daemonCore -> Do_Wake_up_select		1093050						
ANR	1093822	Symbol	* * * * entry		1093050						
ANR	1093823	Symbol	entry -> pidentries [ result ] -> pid		1093050						
ANR	1093824	Symbol	entry -> pidentries [ i ] -> hThread		1093050						
ANR	1093825	Symbol	sock		1093050						
ANR	1093826	Symbol	* i		1093050						
ANR	1093827	Symbol	entry -> pidentries		1093050						
ANR	1093828	Symbol	MyExitedQueue . dequeue		1093050						
ANR	1093829	Symbol	entry -> pidentries [ i ] -> pipeEnd -> pre_wait		1093050						
ANR	1093830	Symbol	wait_entry . exit_status		1093050						
ANR	1093831	Symbol	& rsock		1093050						
ANR	1093832	Symbol	entry -> event		1093050						
ANR	1093833	Symbol	FALSE		1093050						
ANR	1093834	Function	DaemonCore :: WatchPid	9701:0:298496:300471							
ANR	1093835	FunctionDef	DaemonCore :: WatchPid (PidEntry * pidentry)		1093834	0					
ANR	1093836	CompoundStatement		9703:0:298541:300471	1093834	0					
ANR	1093837	IdentifierDeclStatement	struct PidWatcherEntry * entry = NULL ;	9704:1:298544:298580	1093834	0	True				
ANR	1093838	IdentifierDecl	* entry = NULL		1093834	0					
ANR	1093839	IdentifierDeclType	struct PidWatcherEntry *		1093834	0					
ANR	1093840	Identifier	entry		1093834	1					
ANR	1093841	AssignmentExpression	* entry = NULL		1093834	2		=			
ANR	1093842	Identifier	NULL		1093834	0					
ANR	1093843	Identifier	NULL		1093834	1					
ANR	1093844	IdentifierDeclStatement	int alldone = FALSE ;	9705:1:298583:298602	1093834	1	True				
ANR	1093845	IdentifierDecl	alldone = FALSE		1093834	0					
ANR	1093846	IdentifierDeclType	int		1093834	0					
ANR	1093847	Identifier	alldone		1093834	1					
ANR	1093848	AssignmentExpression	alldone = FALSE		1093834	2		=			
ANR	1093849	Identifier	FALSE		1093834	0					
ANR	1093850	Identifier	FALSE		1093834	1					
ANR	1093851	IfStatement	if ( pidentry -> pipeEnd )		1093834	2					
ANR	1093852	Condition	pidentry -> pipeEnd	9709:5:298735:298751	1093834	0	True				
ANR	1093853	PtrMemberAccess	pidentry -> pipeEnd		1093834	0					
ANR	1093854	Identifier	pidentry		1093834	0					
ANR	1093855	Identifier	pipeEnd		1093834	1					
ANR	1093856	CompoundStatement		7:24:212:212	1093834	1					
ANR	1093857	ExpressionStatement	pidentry -> pipeEnd -> set_watched ( )	9710:2:298758:298790	1093834	0	True				
ANR	1093858	CallExpression	pidentry -> pipeEnd -> set_watched ( )		1093834	0					
ANR	1093859	Callee	pidentry -> pipeEnd -> set_watched		1093834	0					
ANR	1093860	PtrMemberAccess	pidentry -> pipeEnd -> set_watched		1093834	0					
ANR	1093861	PtrMemberAccess	pidentry -> pipeEnd		1093834	0					
ANR	1093862	Identifier	pidentry		1093834	0					
ANR	1093863	Identifier	pipeEnd		1093834	1					
ANR	1093864	Identifier	set_watched		1093834	1					
ANR	1093865	ArgumentList			1093834	1					
ANR	1093866	ExpressionStatement	PidWatcherList . Rewind ( )	9714:1:298863:298886	1093834	3	True				
ANR	1093867	CallExpression	PidWatcherList . Rewind ( )		1093834	0					
ANR	1093868	Callee	PidWatcherList . Rewind		1093834	0					
ANR	1093869	MemberAccess	PidWatcherList . Rewind		1093834	0					
ANR	1093870	Identifier	PidWatcherList		1093834	0					
ANR	1093871	Identifier	Rewind		1093834	1					
ANR	1093872	ArgumentList			1093834	1					
ANR	1093873	WhileStatement	while ( ( entry = PidWatcherList . Next ( ) ) )		1093834	4					
ANR	1093874	Condition	entry = PidWatcherList . Next ( )	9715:9:298897:298925	1093834	0	True				
ANR	1093875	AssignmentExpression	entry = PidWatcherList . Next ( )		1093834	0		=			
ANR	1093876	Identifier	entry		1093834	0					
ANR	1093877	CallExpression	PidWatcherList . Next ( )		1093834	1					
ANR	1093878	Callee	PidWatcherList . Next		1093834	0					
ANR	1093879	MemberAccess	PidWatcherList . Next		1093834	0					
ANR	1093880	Identifier	PidWatcherList		1093834	0					
ANR	1093881	Identifier	Next		1093834	1					
ANR	1093882	ArgumentList			1093834	1					
ANR	1093883	CompoundStatement		13:41:387:387	1093834	1					
ANR	1093884	Statement	::	9717:2:298934:298935	1093834	0	True				
ANR	1093885	ExpressionStatement	EnterCriticalSection ( & ( entry -> crit_section ) )	9717:4:298936:298980	1093834	1	True				
ANR	1093886	CallExpression	EnterCriticalSection ( & ( entry -> crit_section ) )		1093834	0					
ANR	1093887	Callee	EnterCriticalSection		1093834	0					
ANR	1093888	Identifier	EnterCriticalSection		1093834	0					
ANR	1093889	ArgumentList	& ( entry -> crit_section )		1093834	1					
ANR	1093890	Argument	& ( entry -> crit_section )		1093834	0					
ANR	1093891	UnaryOperationExpression	& ( entry -> crit_section )		1093834	0					
ANR	1093892	UnaryOperator	&		1093834	0					
ANR	1093893	PtrMemberAccess	entry -> crit_section		1093834	1					
ANR	1093894	Identifier	entry		1093834	0					
ANR	1093895	Identifier	crit_section		1093834	1					
ANR	1093896	IfStatement	if ( entry -> nEntries == 0 )		1093834	2					
ANR	1093897	Condition	entry -> nEntries == 0	9719:7:298990:299009	1093834	0	True				
ANR	1093898	EqualityExpression	entry -> nEntries == 0		1093834	0		==			
ANR	1093899	PtrMemberAccess	entry -> nEntries		1093834	0					
ANR	1093900	Identifier	entry		1093834	0					
ANR	1093901	Identifier	nEntries		1093834	1					
ANR	1093902	PrimaryExpression	0		1093834	1					
ANR	1093903	CompoundStatement		17:30:471:471	1093834	1					
ANR	1093904	Statement	::	9722:3:299141:299142	1093834	0	True				
ANR	1093905	ExpressionStatement	DeleteCriticalSection ( & ( entry -> crit_section ) )	9722:5:299143:299188	1093834	1	True				
ANR	1093906	CallExpression	DeleteCriticalSection ( & ( entry -> crit_section ) )		1093834	0					
ANR	1093907	Callee	DeleteCriticalSection		1093834	0					
ANR	1093908	Identifier	DeleteCriticalSection		1093834	0					
ANR	1093909	ArgumentList	& ( entry -> crit_section )		1093834	1					
ANR	1093910	Argument	& ( entry -> crit_section )		1093834	0					
ANR	1093911	UnaryOperationExpression	& ( entry -> crit_section )		1093834	0					
ANR	1093912	UnaryOperator	&		1093834	0					
ANR	1093913	PtrMemberAccess	entry -> crit_section		1093834	1					
ANR	1093914	Identifier	entry		1093834	0					
ANR	1093915	Identifier	crit_section		1093834	1					
ANR	1093916	Statement	::	9723:3:299193:299194	1093834	2	True				
ANR	1093917	ExpressionStatement	CloseHandle ( entry -> event )	9723:5:299195:299220	1093834	3	True				
ANR	1093918	CallExpression	CloseHandle ( entry -> event )		1093834	0					
ANR	1093919	Callee	CloseHandle		1093834	0					
ANR	1093920	Identifier	CloseHandle		1093834	0					
ANR	1093921	ArgumentList	entry -> event		1093834	1					
ANR	1093922	Argument	entry -> event		1093834	0					
ANR	1093923	PtrMemberAccess	entry -> event		1093834	0					
ANR	1093924	Identifier	entry		1093834	0					
ANR	1093925	Identifier	event		1093834	1					
ANR	1093926	Statement	::	9724:3:299225:299226	1093834	4	True				
ANR	1093927	ExpressionStatement	CloseHandle ( entry -> hThread )	9724:5:299227:299254	1093834	5	True				
ANR	1093928	CallExpression	CloseHandle ( entry -> hThread )		1093834	0					
ANR	1093929	Callee	CloseHandle		1093834	0					
ANR	1093930	Identifier	CloseHandle		1093834	0					
ANR	1093931	ArgumentList	entry -> hThread		1093834	1					
ANR	1093932	Argument	entry -> hThread		1093834	0					
ANR	1093933	PtrMemberAccess	entry -> hThread		1093834	0					
ANR	1093934	Identifier	entry		1093834	0					
ANR	1093935	Identifier	hThread		1093834	1					
ANR	1093936	ExpressionStatement	PidWatcherList . DeleteCurrent ( )	9725:3:299259:299289	1093834	6	True				
ANR	1093937	CallExpression	PidWatcherList . DeleteCurrent ( )		1093834	0					
ANR	1093938	Callee	PidWatcherList . DeleteCurrent		1093834	0					
ANR	1093939	MemberAccess	PidWatcherList . DeleteCurrent		1093834	0					
ANR	1093940	Identifier	PidWatcherList		1093834	0					
ANR	1093941	Identifier	DeleteCurrent		1093834	1					
ANR	1093942	ArgumentList			1093834	1					
ANR	1093943	Statement	delete	9726:3:299294:299299	1093834	7	True				
ANR	1093944	ExpressionStatement	entry	9726:10:299301:299306	1093834	8	True				
ANR	1093945	Identifier	entry		1093834	0					
ANR	1093946	ContinueStatement	continue ;	9727:3:299311:299319	1093834	9	True				
ANR	1093947	IfStatement	if ( entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 ) )		1093834	3					
ANR	1093948	Condition	entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 )	9730:7:299382:299427	1093834	0	True				
ANR	1093949	RelationalExpression	entry -> nEntries < ( MAXIMUM_WAIT_OBJECTS - 1 )		1093834	0		<			
ANR	1093950	PtrMemberAccess	entry -> nEntries		1093834	0					
ANR	1093951	Identifier	entry		1093834	0					
ANR	1093952	Identifier	nEntries		1093834	1					
ANR	1093953	AdditiveExpression	MAXIMUM_WAIT_OBJECTS - 1		1093834	1		-			
ANR	1093954	Identifier	MAXIMUM_WAIT_OBJECTS		1093834	0					
ANR	1093955	PrimaryExpression	1		1093834	1					
ANR	1093956	CompoundStatement		28:56:889:889	1093834	1					
ANR	1093957	ExpressionStatement	entry -> pidentries [ entry -> nEntries ] = pidentry	9732:3:299463:299508	1093834	0	True				
ANR	1093958	AssignmentExpression	entry -> pidentries [ entry -> nEntries ] = pidentry		1093834	0		=			
ANR	1093959	ArrayIndexing	entry -> pidentries [ entry -> nEntries ]		1093834	0					
ANR	1093960	PtrMemberAccess	entry -> pidentries		1093834	0					
ANR	1093961	Identifier	entry		1093834	0					
ANR	1093962	Identifier	pidentries		1093834	1					
ANR	1093963	PtrMemberAccess	entry -> nEntries		1093834	1					
ANR	1093964	Identifier	entry		1093834	0					
ANR	1093965	Identifier	nEntries		1093834	1					
ANR	1093966	Identifier	pidentry		1093834	1					
ANR	1093967	ExpressionStatement	pidentry -> watcherEvent = entry -> event	9733:3:299513:299550	1093834	1	True				
ANR	1093968	AssignmentExpression	pidentry -> watcherEvent = entry -> event		1093834	0		=			
ANR	1093969	PtrMemberAccess	pidentry -> watcherEvent		1093834	0					
ANR	1093970	Identifier	pidentry		1093834	0					
ANR	1093971	Identifier	watcherEvent		1093834	1					
ANR	1093972	PtrMemberAccess	entry -> event		1093834	1					
ANR	1093973	Identifier	entry		1093834	0					
ANR	1093974	Identifier	event		1093834	1					
ANR	1093975	ExpressionStatement	( entry -> nEntries ) ++	9734:3:299555:299574	1093834	2	True				
ANR	1093976	PostIncDecOperationExpression	( entry -> nEntries ) ++		1093834	0					
ANR	1093977	PtrMemberAccess	entry -> nEntries		1093834	0					
ANR	1093978	Identifier	entry		1093834	0					
ANR	1093979	Identifier	nEntries		1093834	1					
ANR	1093980	IncDec	++		1093834	1					
ANR	1093981	Statement	if	9735:3:299579:299580	1093834	3	True				
ANR	1093982	Statement	(	9735:6:299582:299582	1093834	4	True				
ANR	1093983	Statement	!	9735:8:299584:299584	1093834	5	True				
ANR	1093984	Statement	::	9735:9:299585:299586	1093834	6	True				
ANR	1093985	Statement	SetEvent	9735:11:299587:299594	1093834	7	True				
ANR	1093986	Statement	(	9735:19:299595:299595	1093834	8	True				
ANR	1093987	Statement	entry	9735:20:299596:299600	1093834	9	True				
ANR	1093988	Statement	->	9735:25:299601:299602	1093834	10	True				
ANR	1093989	Statement	event	9735:27:299603:299607	1093834	11	True				
ANR	1093990	Statement	)	9735:32:299608:299608	1093834	12	True				
ANR	1093991	Statement	)	9735:34:299610:299610	1093834	13	True				
ANR	1093992	CompoundStatement		33:36:1070:1070	1093834	14					
ANR	1093993	ExpressionStatement	"EXCEPT ( ""SetEvent failed"" )"	9736:4:299618:299643	1093834	0	True				
ANR	1093994	CallExpression	"EXCEPT ( ""SetEvent failed"" )"		1093834	0					
ANR	1093995	Callee	EXCEPT		1093834	0					
ANR	1093996	Identifier	EXCEPT		1093834	0					
ANR	1093997	ArgumentList	"""SetEvent failed"""		1093834	1					
ANR	1093998	Argument	"""SetEvent failed"""		1093834	0					
ANR	1093999	PrimaryExpression	"""SetEvent failed"""		1093834	0					
ANR	1094000	ExpressionStatement	alldone = TRUE	9738:3:299653:299667	1093834	15	True				
ANR	1094001	AssignmentExpression	alldone = TRUE		1093834	0		=			
ANR	1094002	Identifier	alldone		1093834	0					
ANR	1094003	Identifier	TRUE		1093834	1					
ANR	1094004	Statement	::	9741:2:299676:299677	1093834	4	True				
ANR	1094005	ExpressionStatement	LeaveCriticalSection ( & ( entry -> crit_section ) )	9741:4:299678:299722	1093834	5	True				
ANR	1094006	CallExpression	LeaveCriticalSection ( & ( entry -> crit_section ) )		1093834	0					
ANR	1094007	Callee	LeaveCriticalSection		1093834	0					
ANR	1094008	Identifier	LeaveCriticalSection		1093834	0					
ANR	1094009	ArgumentList	& ( entry -> crit_section )		1093834	1					
ANR	1094010	Argument	& ( entry -> crit_section )		1093834	0					
ANR	1094011	UnaryOperationExpression	& ( entry -> crit_section )		1093834	0					
ANR	1094012	UnaryOperator	&		1093834	0					
ANR	1094013	PtrMemberAccess	entry -> crit_section		1093834	1					
ANR	1094014	Identifier	entry		1093834	0					
ANR	1094015	Identifier	crit_section		1093834	1					
ANR	1094016	IfStatement	if ( alldone == TRUE )		1093834	6					
ANR	1094017	Condition	alldone == TRUE	9743:6:299731:299745	1093834	0	True				
ANR	1094018	EqualityExpression	alldone == TRUE		1093834	0		==			
ANR	1094019	Identifier	alldone		1093834	0					
ANR	1094020	Identifier	TRUE		1093834	1					
ANR	1094021	ReturnStatement	return TRUE ;	9744:3:299752:299763	1093834	1	True				
ANR	1094022	Identifier	TRUE		1093834	0					
ANR	1094023	Statement	entry	9749:1:299897:299901	1093834	5	True				
ANR	1094024	Statement	=	9749:7:299903:299903	1093834	6	True				
ANR	1094025	Statement	new	9749:9:299905:299907	1093834	7	True				
ANR	1094026	ExpressionStatement	PidWatcherEntry	9749:13:299909:299924	1093834	8	True				
ANR	1094027	Identifier	PidWatcherEntry		1093834	0					
ANR	1094028	Statement	::	9750:1:299927:299928	1093834	9	True				
ANR	1094029	ExpressionStatement	InitializeCriticalSection ( & ( entry -> crit_section ) )	9750:3:299929:299978	1093834	10	True				
ANR	1094030	CallExpression	InitializeCriticalSection ( & ( entry -> crit_section ) )		1093834	0					
ANR	1094031	Callee	InitializeCriticalSection		1093834	0					
ANR	1094032	Identifier	InitializeCriticalSection		1093834	0					
ANR	1094033	ArgumentList	& ( entry -> crit_section )		1093834	1					
ANR	1094034	Argument	& ( entry -> crit_section )		1093834	0					
ANR	1094035	UnaryOperationExpression	& ( entry -> crit_section )		1093834	0					
ANR	1094036	UnaryOperator	&		1093834	0					
ANR	1094037	PtrMemberAccess	entry -> crit_section		1093834	1					
ANR	1094038	Identifier	entry		1093834	0					
ANR	1094039	Identifier	crit_section		1093834	1					
ANR	1094040	Statement	entry	9751:1:299981:299985	1093834	11	True				
ANR	1094041	Statement	->	9751:6:299986:299987	1093834	12	True				
ANR	1094042	Statement	event	9751:8:299988:299992	1093834	13	True				
ANR	1094043	Statement	=	9751:14:299994:299994	1093834	14	True				
ANR	1094044	Statement	::	9751:16:299996:299997	1093834	15	True				
ANR	1094045	ExpressionStatement	"CreateEvent ( NULL , FALSE , FALSE , NULL )"	9751:18:299998:300032	1093834	16	True				
ANR	1094046	CallExpression	"CreateEvent ( NULL , FALSE , FALSE , NULL )"		1093834	0					
ANR	1094047	Callee	CreateEvent		1093834	0					
ANR	1094048	Identifier	CreateEvent		1093834	0					
ANR	1094049	ArgumentList	NULL		1093834	1					
ANR	1094050	Argument	NULL		1093834	0					
ANR	1094051	Identifier	NULL		1093834	0					
ANR	1094052	Argument	FALSE		1093834	1					
ANR	1094053	Identifier	FALSE		1093834	0					
ANR	1094054	Argument	FALSE		1093834	2					
ANR	1094055	Identifier	FALSE		1093834	0					
ANR	1094056	Argument	NULL		1093834	3					
ANR	1094057	Identifier	NULL		1093834	0					
ANR	1094058	IfStatement	if ( entry -> event == NULL )		1093834	17					
ANR	1094059	Condition	entry -> event == NULL	9752:6:300060:300079	1093834	0	True				
ANR	1094060	EqualityExpression	entry -> event == NULL		1093834	0		==			
ANR	1094061	PtrMemberAccess	entry -> event		1093834	0					
ANR	1094062	Identifier	entry		1093834	0					
ANR	1094063	Identifier	event		1093834	1					
ANR	1094064	Identifier	NULL		1093834	1					
ANR	1094065	CompoundStatement		50:29:1541:1541	1093834	1					
ANR	1094066	ExpressionStatement	"EXCEPT ( ""CreateEvent failed"" )"	9753:2:300087:300115	1093834	0	True				
ANR	1094067	CallExpression	"EXCEPT ( ""CreateEvent failed"" )"		1093834	0					
ANR	1094068	Callee	EXCEPT		1093834	0					
ANR	1094069	Identifier	EXCEPT		1093834	0					
ANR	1094070	ArgumentList	"""CreateEvent failed"""		1093834	1					
ANR	1094071	Argument	"""CreateEvent failed"""		1093834	0					
ANR	1094072	PrimaryExpression	"""CreateEvent failed"""		1093834	0					
ANR	1094073	ExpressionStatement	entry -> pidentries [ 0 ] = pidentry	9755:1:300121:300152	1093834	18	True				
ANR	1094074	AssignmentExpression	entry -> pidentries [ 0 ] = pidentry		1093834	0		=			
ANR	1094075	ArrayIndexing	entry -> pidentries [ 0 ]		1093834	0					
ANR	1094076	PtrMemberAccess	entry -> pidentries		1093834	0					
ANR	1094077	Identifier	entry		1093834	0					
ANR	1094078	Identifier	pidentries		1093834	1					
ANR	1094079	PrimaryExpression	0		1093834	1					
ANR	1094080	Identifier	pidentry		1093834	1					
ANR	1094081	ExpressionStatement	pidentry -> watcherEvent = entry -> event	9756:1:300155:300192	1093834	19	True				
ANR	1094082	AssignmentExpression	pidentry -> watcherEvent = entry -> event		1093834	0		=			
ANR	1094083	PtrMemberAccess	pidentry -> watcherEvent		1093834	0					
ANR	1094084	Identifier	pidentry		1093834	0					
ANR	1094085	Identifier	watcherEvent		1093834	1					
ANR	1094086	PtrMemberAccess	entry -> event		1093834	1					
ANR	1094087	Identifier	entry		1093834	0					
ANR	1094088	Identifier	event		1093834	1					
ANR	1094089	ExpressionStatement	entry -> nEntries = 1	9757:1:300195:300214	1093834	20	True				
ANR	1094090	AssignmentExpression	entry -> nEntries = 1		1093834	0		=			
ANR	1094091	PtrMemberAccess	entry -> nEntries		1093834	0					
ANR	1094092	Identifier	entry		1093834	0					
ANR	1094093	Identifier	nEntries		1093834	1					
ANR	1094094	PrimaryExpression	1		1093834	1					
ANR	1094095	IdentifierDeclStatement	unsigned threadId ;	9758:1:300217:300234	1093834	21	True				
ANR	1094096	IdentifierDecl	threadId		1093834	0					
ANR	1094097	IdentifierDeclType	unsigned		1093834	0					
ANR	1094098	Identifier	threadId		1093834	1					
ANR	1094099	ExpressionStatement	"entry -> hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"	9759:1:300237:300353	1093834	22	True				
ANR	1094100	AssignmentExpression	"entry -> hThread = ( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		1093834	0		=			
ANR	1094101	PtrMemberAccess	entry -> hThread		1093834	0					
ANR	1094102	Identifier	entry		1093834	0					
ANR	1094103	Identifier	hThread		1093834	1					
ANR	1094104	CastExpression	"( HANDLE ) _beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		1093834	1					
ANR	1094105	CastTarget	HANDLE		1093834	0					
ANR	1094106	CallExpression	"_beginthreadex ( NULL , 1024 , ( CRT_THREAD_HANDLER ) pidWatcherThread , entry , 0 , & threadId )"		1093834	1					
ANR	1094107	Callee	_beginthreadex		1093834	0					
ANR	1094108	Identifier	_beginthreadex		1093834	0					
ANR	1094109	ArgumentList	NULL		1093834	1					
ANR	1094110	Argument	NULL		1093834	0					
ANR	1094111	Identifier	NULL		1093834	0					
ANR	1094112	Argument	1024		1093834	1					
ANR	1094113	PrimaryExpression	1024		1093834	0					
ANR	1094114	Argument	( CRT_THREAD_HANDLER ) pidWatcherThread		1093834	2					
ANR	1094115	CastExpression	( CRT_THREAD_HANDLER ) pidWatcherThread		1093834	0					
ANR	1094116	CastTarget	CRT_THREAD_HANDLER		1093834	0					
ANR	1094117	Identifier	pidWatcherThread		1093834	1					
ANR	1094118	Argument	entry		1093834	3					
ANR	1094119	Identifier	entry		1093834	0					
ANR	1094120	Argument	0		1093834	4					
ANR	1094121	PrimaryExpression	0		1093834	0					
ANR	1094122	Argument	& threadId		1093834	5					
ANR	1094123	UnaryOperationExpression	& threadId		1093834	0					
ANR	1094124	UnaryOperator	&		1093834	0					
ANR	1094125	Identifier	threadId		1093834	1					
ANR	1094126	IfStatement	if ( entry -> hThread == NULL )		1093834	23					
ANR	1094127	Condition	entry -> hThread == NULL	9762:6:300361:300382	1093834	0	True				
ANR	1094128	EqualityExpression	entry -> hThread == NULL		1093834	0		==			
ANR	1094129	PtrMemberAccess	entry -> hThread		1093834	0					
ANR	1094130	Identifier	entry		1093834	0					
ANR	1094131	Identifier	hThread		1093834	1					
ANR	1094132	Identifier	NULL		1093834	1					
ANR	1094133	CompoundStatement		60:31:1844:1844	1093834	1					
ANR	1094134	ExpressionStatement	"EXCEPT ( ""CreateThread failed"" )"	9763:2:300390:300419	1093834	0	True				
ANR	1094135	CallExpression	"EXCEPT ( ""CreateThread failed"" )"		1093834	0					
ANR	1094136	Callee	EXCEPT		1093834	0					
ANR	1094137	Identifier	EXCEPT		1093834	0					
ANR	1094138	ArgumentList	"""CreateThread failed"""		1093834	1					
ANR	1094139	Argument	"""CreateThread failed"""		1093834	0					
ANR	1094140	PrimaryExpression	"""CreateThread failed"""		1093834	0					
ANR	1094141	ExpressionStatement	PidWatcherList . Append ( entry )	9766:1:300426:300454	1093834	24	True				
ANR	1094142	CallExpression	PidWatcherList . Append ( entry )		1093834	0					
ANR	1094143	Callee	PidWatcherList . Append		1093834	0					
ANR	1094144	MemberAccess	PidWatcherList . Append		1093834	0					
ANR	1094145	Identifier	PidWatcherList		1093834	0					
ANR	1094146	Identifier	Append		1093834	1					
ANR	1094147	ArgumentList	entry		1093834	1					
ANR	1094148	Argument	entry		1093834	0					
ANR	1094149	Identifier	entry		1093834	0					
ANR	1094150	ReturnStatement	return TRUE ;	9768:1:300458:300469	1093834	25	True				
ANR	1094151	Identifier	TRUE		1093834	0					
ANR	1094152	ReturnType	int		1093834	1					
ANR	1094153	Identifier	DaemonCore :: WatchPid		1093834	2					
ANR	1094154	ParameterList	PidEntry * pidentry		1093834	3					
ANR	1094155	Parameter	PidEntry * pidentry	9702:21:298521:298538	1093834	0	True				
ANR	1094156	ParameterType	PidEntry *		1093834	0					
ANR	1094157	Identifier	pidentry		1093834	1					
ANR	1094158	CFGEntryNode	ENTRY		1093834		True				
ANR	1094159	CFGExitNode	EXIT		1093834		True				
ANR	1094160	Symbol	pidentry -> pipeEnd		1093834						
ANR	1094161	Symbol	* * entry		1093834						
ANR	1094162	Symbol	entry -> nEntries		1093834						
ANR	1094163	Symbol	* pidentry		1093834						
ANR	1094164	Symbol	PidWatcherList . Next		1093834						
ANR	1094165	Symbol	_beginthreadex		1093834						
ANR	1094166	Symbol	alldone		1093834						
ANR	1094167	Symbol	threadId		1093834						
ANR	1094168	Symbol	MAXIMUM_WAIT_OBJECTS		1093834						
ANR	1094169	Symbol	* entry -> pidentries		1093834						
ANR	1094170	Symbol	pidWatcherThread		1093834						
ANR	1094171	Symbol	& entry -> crit_section		1093834						
ANR	1094172	Symbol	pidentry		1093834						
ANR	1094173	Symbol	* entry		1093834						
ANR	1094174	Symbol	pidentry -> watcherEvent		1093834						
ANR	1094175	Symbol	NULL		1093834						
ANR	1094176	Symbol	TRUE		1093834						
ANR	1094177	Symbol	PidWatcherList		1093834						
ANR	1094178	Symbol	entry		1093834						
ANR	1094179	Symbol	entry -> pidentries		1093834						
ANR	1094180	Symbol	& threadId		1093834						
ANR	1094181	Symbol	* entry -> nEntries		1093834						
ANR	1094182	Symbol	entry -> hThread		1093834						
ANR	1094183	Symbol	entry -> event		1093834						
ANR	1094184	Symbol	FALSE		1093834						
ANR	1094185	Function	DaemonCore :: CallReaper	9774:0:300496:301723							
ANR	1094186	FunctionDef	"DaemonCore :: CallReaper (int reaper_id , char const * whatexited , pid_t pid , int exit_status)"		1094185	0					
ANR	1094187	CompoundStatement		9776:0:300591:301723	1094185	0					
ANR	1094188	IdentifierDeclStatement	ReapEnt * reaper = NULL ;	9777:1:300594:300616	1094185	0	True				
ANR	1094189	IdentifierDecl	* reaper = NULL		1094185	0					
ANR	1094190	IdentifierDeclType	ReapEnt *		1094185	0					
ANR	1094191	Identifier	reaper		1094185	1					
ANR	1094192	AssignmentExpression	* reaper = NULL		1094185	2		=			
ANR	1094193	Identifier	NULL		1094185	0					
ANR	1094194	Identifier	NULL		1094185	1					
ANR	1094195	IfStatement	if ( reaper_id > 0 )		1094185	1					
ANR	1094196	Condition	reaper_id > 0	9779:5:300624:300636	1094185	0	True				
ANR	1094197	RelationalExpression	reaper_id > 0		1094185	0		>			
ANR	1094198	Identifier	reaper_id		1094185	0					
ANR	1094199	PrimaryExpression	0		1094185	1					
ANR	1094200	CompoundStatement		4:21:48:48	1094185	1					
ANR	1094201	ExpressionStatement	reaper = & ( reapTable [ reaper_id - 1 ] )	9780:2:300644:300678	1094185	0	True				
ANR	1094202	AssignmentExpression	reaper = & ( reapTable [ reaper_id - 1 ] )		1094185	0		=			
ANR	1094203	Identifier	reaper		1094185	0					
ANR	1094204	UnaryOperationExpression	& ( reapTable [ reaper_id - 1 ] )		1094185	1					
ANR	1094205	UnaryOperator	&		1094185	0					
ANR	1094206	ArrayIndexing	reapTable [ reaper_id - 1 ]		1094185	1					
ANR	1094207	Identifier	reapTable		1094185	0					
ANR	1094208	AdditiveExpression	reaper_id - 1		1094185	1		-			
ANR	1094209	Identifier	reaper_id		1094185	0					
ANR	1094210	PrimaryExpression	1		1094185	1					
ANR	1094211	IfStatement	if ( ! reaper || ! ( reaper -> handler || reaper -> handlercpp ) )		1094185	2					
ANR	1094212	Condition	! reaper || ! ( reaper -> handler || reaper -> handlercpp )	9782:5:300688:300738	1094185	0	True				
ANR	1094213	OrExpression	! reaper || ! ( reaper -> handler || reaper -> handlercpp )		1094185	0		||			
ANR	1094214	UnaryOperationExpression	! reaper		1094185	0					
ANR	1094215	UnaryOperator	!		1094185	0					
ANR	1094216	Identifier	reaper		1094185	1					
ANR	1094217	UnaryOperationExpression	! ( reaper -> handler || reaper -> handlercpp )		1094185	1					
ANR	1094218	UnaryOperator	!		1094185	0					
ANR	1094219	OrExpression	reaper -> handler || reaper -> handlercpp		1094185	1		||			
ANR	1094220	PtrMemberAccess	reaper -> handler		1094185	0					
ANR	1094221	Identifier	reaper		1094185	0					
ANR	1094222	Identifier	handler		1094185	1					
ANR	1094223	PtrMemberAccess	reaper -> handlercpp		1094185	1					
ANR	1094224	Identifier	reaper		1094185	0					
ANR	1094225	Identifier	handlercpp		1094185	1					
ANR	1094226	CompoundStatement		7:59:150:150	1094185	1					
ANR	1094227	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"" , whatexited , ( unsigned long ) pid , exit_status )"	9784:3:300774:300915	1094185	0	True				
ANR	1094228	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"" , whatexited , ( unsigned long ) pid , exit_status )"		1094185	0					
ANR	1094229	Callee	dprintf		1094185	0					
ANR	1094230	Identifier	dprintf		1094185	0					
ANR	1094231	ArgumentList	D_DAEMONCORE		1094185	1					
ANR	1094232	Argument	D_DAEMONCORE		1094185	0					
ANR	1094233	Identifier	D_DAEMONCORE		1094185	0					
ANR	1094234	Argument	"""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"""		1094185	1					
ANR	1094235	PrimaryExpression	"""DaemonCore: %s %lu exited with status %d; no registered reaper\\n"""		1094185	0					
ANR	1094236	Argument	whatexited		1094185	2					
ANR	1094237	Identifier	whatexited		1094185	0					
ANR	1094238	Argument	( unsigned long ) pid		1094185	3					
ANR	1094239	CastExpression	( unsigned long ) pid		1094185	0					
ANR	1094240	CastTarget	unsigned long		1094185	0					
ANR	1094241	Identifier	pid		1094185	1					
ANR	1094242	Argument	exit_status		1094185	4					
ANR	1094243	Identifier	exit_status		1094185	0					
ANR	1094244	ReturnStatement	return ;	9787:2:300919:300925	1094185	1	True				
ANR	1094245	ExpressionStatement	curr_dataptr = & ( reaper -> data_ptr )	9791:1:300975:301009	1094185	3	True				
ANR	1094246	AssignmentExpression	curr_dataptr = & ( reaper -> data_ptr )		1094185	0		=			
ANR	1094247	Identifier	curr_dataptr		1094185	0					
ANR	1094248	UnaryOperationExpression	& ( reaper -> data_ptr )		1094185	1					
ANR	1094249	UnaryOperator	&		1094185	0					
ANR	1094250	PtrMemberAccess	reaper -> data_ptr		1094185	1					
ANR	1094251	Identifier	reaper		1094185	0					
ANR	1094252	Identifier	data_ptr		1094185	1					
ANR	1094253	IdentifierDeclStatement	const char * hdescrip = reaper -> handler_descrip ;	9794:1:301032:301078	1094185	4	True				
ANR	1094254	IdentifierDecl	* hdescrip = reaper -> handler_descrip		1094185	0					
ANR	1094255	IdentifierDeclType	const char *		1094185	0					
ANR	1094256	Identifier	hdescrip		1094185	1					
ANR	1094257	AssignmentExpression	* hdescrip = reaper -> handler_descrip		1094185	2		=			
ANR	1094258	Identifier	hdescrip		1094185	0					
ANR	1094259	PtrMemberAccess	reaper -> handler_descrip		1094185	1					
ANR	1094260	Identifier	reaper		1094185	0					
ANR	1094261	Identifier	handler_descrip		1094185	1					
ANR	1094262	IfStatement	if ( ! hdescrip )		1094185	5					
ANR	1094263	Condition	! hdescrip	9795:6:301086:301094	1094185	0	True				
ANR	1094264	UnaryOperationExpression	! hdescrip		1094185	0					
ANR	1094265	UnaryOperator	!		1094185	0					
ANR	1094266	Identifier	hdescrip		1094185	1					
ANR	1094267	CompoundStatement		20:18:506:506	1094185	1					
ANR	1094268	ExpressionStatement	hdescrip = EMPTY_DESCRIP	9796:2:301102:301126	1094185	0	True				
ANR	1094269	AssignmentExpression	hdescrip = EMPTY_DESCRIP		1094185	0		=			
ANR	1094270	Identifier	hdescrip		1094185	0					
ANR	1094271	Identifier	EMPTY_DESCRIP		1094185	1					
ANR	1094272	Statement	dprintf	9798:1:301132:301138	1094185	6	True				
ANR	1094273	Statement	(	9798:8:301139:301139	1094185	7	True				
ANR	1094274	Statement	D_COMMAND	9798:9:301140:301148	1094185	8	True				
ANR	1094275	Statement	","	9798:18:301149:301149	1094185	9	True				
ANR	1094276	Statement	"""DaemonCore: %s %lu exited with status %d, invoking reaper """	9799:2:301153:301212	1094185	10	True				
ANR	1094277	Statement	"""%d <%s>\\n"""	9800:2:301216:301226	1094185	11	True				
ANR	1094278	Statement	","	9800:13:301227:301227	1094185	12	True				
ANR	1094279	Statement	whatexited	9801:2:301231:301240	1094185	13	True				
ANR	1094280	Statement	","	9801:12:301241:301241	1094185	14	True				
ANR	1094281	Statement	(	9801:14:301243:301243	1094185	15	True				
ANR	1094282	Statement	unsigned	9801:15:301244:301251	1094185	16	True				
ANR	1094283	Statement	long	9801:24:301253:301256	1094185	17	True				
ANR	1094284	Statement	)	9801:28:301257:301257	1094185	18	True				
ANR	1094285	Statement	pid	9801:29:301258:301260	1094185	19	True				
ANR	1094286	Statement	","	9801:32:301261:301261	1094185	20	True				
ANR	1094287	Statement	exit_status	9801:34:301263:301273	1094185	21	True				
ANR	1094288	Statement	","	9801:45:301274:301274	1094185	22	True				
ANR	1094289	Statement	reaper_id	9801:47:301276:301284	1094185	23	True				
ANR	1094290	Statement	","	9801:56:301285:301285	1094185	24	True				
ANR	1094291	Statement	hdescrip	9801:58:301287:301294	1094185	25	True				
ANR	1094292	Statement	)	9801:66:301295:301295	1094185	26	True				
ANR	1094293	ExpressionStatement		9801:67:301296:301296	1094185	27	True				
ANR	1094294	IfStatement	if ( reaper -> handler )		1094185	28					
ANR	1094295	Condition	reaper -> handler	9803:6:301305:301319	1094185	0	True				
ANR	1094296	PtrMemberAccess	reaper -> handler		1094185	0					
ANR	1094297	Identifier	reaper		1094185	0					
ANR	1094298	Identifier	handler		1094185	1					
ANR	1094299	CompoundStatement		28:24:731:731	1094185	1					
ANR	1094300	ExpressionStatement	"( * ( reaper -> handler ) ) ( reaper -> service , pid , exit_status )"	9805:2:301344:301397	1094185	0	True				
ANR	1094301	CallExpression	"( * ( reaper -> handler ) ) ( reaper -> service , pid , exit_status )"		1094185	0					
ANR	1094302	Callee	* ( reaper -> handler )		1094185	0					
ANR	1094303	UnaryOperationExpression	* ( reaper -> handler )		1094185	0					
ANR	1094304	UnaryOperator	*		1094185	0					
ANR	1094305	PtrMemberAccess	reaper -> handler		1094185	1					
ANR	1094306	Identifier	reaper		1094185	0					
ANR	1094307	Identifier	handler		1094185	1					
ANR	1094308	ArgumentList	reaper -> service		1094185	1					
ANR	1094309	Argument	reaper -> service		1094185	0					
ANR	1094310	PtrMemberAccess	reaper -> service		1094185	0					
ANR	1094311	Identifier	reaper		1094185	0					
ANR	1094312	Identifier	service		1094185	1					
ANR	1094313	Argument	pid		1094185	1					
ANR	1094314	Identifier	pid		1094185	0					
ANR	1094315	Argument	exit_status		1094185	2					
ANR	1094316	Identifier	exit_status		1094185	0					
ANR	1094317	ElseStatement	else		1094185	0					
ANR	1094318	IfStatement	if ( reaper -> handlercpp )		1094185	0					
ANR	1094319	Condition	reaper -> handlercpp	9807:11:301413:301430	1094185	0	True				
ANR	1094320	PtrMemberAccess	reaper -> handlercpp		1094185	0					
ANR	1094321	Identifier	reaper		1094185	0					
ANR	1094322	Identifier	handlercpp		1094185	1					
ANR	1094323	CompoundStatement		32:32:842:842	1094185	1					
ANR	1094324	Statement	(	9809:2:301457:301457	1094185	0	True				
ANR	1094325	Statement	reaper	9809:3:301458:301463	1094185	1	True				
ANR	1094326	Statement	->	9809:9:301464:301465	1094185	2	True				
ANR	1094327	Statement	service	9809:11:301466:301472	1094185	3	True				
ANR	1094328	Statement	->*	9809:18:301473:301475	1094185	4	True				
ANR	1094329	Statement	(	9809:21:301476:301476	1094185	5	True				
ANR	1094330	Statement	reaper	9809:22:301477:301482	1094185	6	True				
ANR	1094331	Statement	->	9809:28:301483:301484	1094185	7	True				
ANR	1094332	Statement	handlercpp	9809:30:301485:301494	1094185	8	True				
ANR	1094333	Statement	)	9809:40:301495:301495	1094185	9	True				
ANR	1094334	Statement	)	9809:41:301496:301496	1094185	10	True				
ANR	1094335	ExpressionStatement	"pid , exit_status"	9809:42:301497:301514	1094185	11	True				
ANR	1094336	Expression	"pid , exit_status"		1094185	0					
ANR	1094337	Identifier	pid		1094185	0					
ANR	1094338	Identifier	exit_status		1094185	1					
ANR	1094339	ExpressionStatement	"dprintf ( D_COMMAND , ""DaemonCore: return from reaper for pid %lu\\n"" , ( unsigned long ) pid )"	9812:1:301521:301610	1094185	29	True				
ANR	1094340	CallExpression	"dprintf ( D_COMMAND , ""DaemonCore: return from reaper for pid %lu\\n"" , ( unsigned long ) pid )"		1094185	0					
ANR	1094341	Callee	dprintf		1094185	0					
ANR	1094342	Identifier	dprintf		1094185	0					
ANR	1094343	ArgumentList	D_COMMAND		1094185	1					
ANR	1094344	Argument	D_COMMAND		1094185	0					
ANR	1094345	Identifier	D_COMMAND		1094185	0					
ANR	1094346	Argument	"""DaemonCore: return from reaper for pid %lu\\n"""		1094185	1					
ANR	1094347	PrimaryExpression	"""DaemonCore: return from reaper for pid %lu\\n"""		1094185	0					
ANR	1094348	Argument	( unsigned long ) pid		1094185	2					
ANR	1094349	CastExpression	( unsigned long ) pid		1094185	0					
ANR	1094350	CastTarget	unsigned long		1094185	0					
ANR	1094351	Identifier	pid		1094185	1					
ANR	1094352	ExpressionStatement	CheckPrivState ( )	9816:1:301659:301675	1094185	30	True				
ANR	1094353	CallExpression	CheckPrivState ( )		1094185	0					
ANR	1094354	Callee	CheckPrivState		1094185	0					
ANR	1094355	Identifier	CheckPrivState		1094185	0					
ANR	1094356	ArgumentList			1094185	1					
ANR	1094357	ExpressionStatement	curr_dataptr = NULL	9819:1:301702:301721	1094185	31	True				
ANR	1094358	AssignmentExpression	curr_dataptr = NULL		1094185	0		=			
ANR	1094359	Identifier	curr_dataptr		1094185	0					
ANR	1094360	Identifier	NULL		1094185	1					
ANR	1094361	ReturnType	void		1094185	1					
ANR	1094362	Identifier	DaemonCore :: CallReaper		1094185	2					
ANR	1094363	ParameterList	"int reaper_id , char const * whatexited , pid_t pid , int exit_status"		1094185	3					
ANR	1094364	Parameter	int reaper_id	9775:23:300524:300536	1094185	0	True				
ANR	1094365	ParameterType	int		1094185	0					
ANR	1094366	Identifier	reaper_id		1094185	1					
ANR	1094367	Parameter	char const * whatexited	9775:38:300539:300560	1094185	1	True				
ANR	1094368	ParameterType	char const *		1094185	0					
ANR	1094369	Identifier	whatexited		1094185	1					
ANR	1094370	Parameter	pid_t pid	9775:62:300563:300571	1094185	2	True				
ANR	1094371	ParameterType	pid_t		1094185	0					
ANR	1094372	Identifier	pid		1094185	1					
ANR	1094373	Parameter	int exit_status	9775:73:300574:300588	1094185	3	True				
ANR	1094374	ParameterType	int		1094185	0					
ANR	1094375	Identifier	exit_status		1094185	1					
ANR	1094376	CFGEntryNode	ENTRY		1094185		True				
ANR	1094377	CFGExitNode	EXIT		1094185		True				
ANR	1094378	Symbol	& reaper -> data_ptr		1094185						
ANR	1094379	Symbol	reaper -> handler		1094185						
ANR	1094380	Symbol	NULL		1094185						
ANR	1094381	Symbol	reaper_id		1094185						
ANR	1094382	Symbol	D_DAEMONCORE		1094185						
ANR	1094383	Symbol	hdescrip		1094185						
ANR	1094384	Symbol	pid		1094185						
ANR	1094385	Symbol	reaper		1094185						
ANR	1094386	Symbol	exit_status		1094185						
ANR	1094387	Symbol	curr_dataptr		1094185						
ANR	1094388	Symbol	reaper -> handlercpp		1094185						
ANR	1094389	Symbol	reaper -> service		1094185						
ANR	1094390	Symbol	reapTable		1094185						
ANR	1094391	Symbol	EMPTY_DESCRIP		1094185						
ANR	1094392	Symbol	whatexited		1094185						
ANR	1094393	Symbol	reaper -> handler_descrip		1094185						
ANR	1094394	Symbol	* reaper		1094185						
ANR	1094395	Symbol	D_COMMAND		1094185						
ANR	1094396	Function	DaemonCore :: HandleProcessExit	9825:0:301948:306052							
ANR	1094397	FunctionDef	"DaemonCore :: HandleProcessExit (pid_t pid , int exit_status)"		1094396	0					
ANR	1094398	CompoundStatement		9826:0:302010:306052	1094396	0					
ANR	1094399	IdentifierDeclStatement	PidEntry * pidentry ;	9827:1:302013:302031	1094396	0	True				
ANR	1094400	IdentifierDecl	* pidentry		1094396	0					
ANR	1094401	IdentifierDeclType	PidEntry *		1094396	0					
ANR	1094402	Identifier	pidentry		1094396	1					
ANR	1094403	IdentifierDeclStatement	"const char * whatexited = ""pid"" ;"	9828:1:302034:302064	1094396	1	True				
ANR	1094404	IdentifierDecl	"* whatexited = ""pid"""		1094396	0					
ANR	1094405	IdentifierDeclType	const char *		1094396	0					
ANR	1094406	Identifier	whatexited		1094396	1					
ANR	1094407	AssignmentExpression	"* whatexited = ""pid"""		1094396	2		=			
ANR	1094408	Identifier	whatexited		1094396	0					
ANR	1094409	PrimaryExpression	"""pid"""		1094396	1					
ANR	1094410	IdentifierDeclStatement	int i ;	9829:1:302096:302101	1094396	2	True				
ANR	1094411	IdentifierDecl	i		1094396	0					
ANR	1094412	IdentifierDeclType	int		1094396	0					
ANR	1094413	Identifier	i		1094396	1					
ANR	1094414	IfStatement	"if ( pidTable -> lookup ( pid , pidentry ) == - 1 )"		1094396	3					
ANR	1094415	Condition	"pidTable -> lookup ( pid , pidentry ) == - 1"	9832:6:302167:302202	1094396	0	True				
ANR	1094416	EqualityExpression	"pidTable -> lookup ( pid , pidentry ) == - 1"		1094396	0		==			
ANR	1094417	CallExpression	"pidTable -> lookup ( pid , pidentry )"		1094396	0					
ANR	1094418	Callee	pidTable -> lookup		1094396	0					
ANR	1094419	PtrMemberAccess	pidTable -> lookup		1094396	0					
ANR	1094420	Identifier	pidTable		1094396	0					
ANR	1094421	Identifier	lookup		1094396	1					
ANR	1094422	ArgumentList	pid		1094396	1					
ANR	1094423	Argument	pid		1094396	0					
ANR	1094424	Identifier	pid		1094396	0					
ANR	1094425	Argument	pidentry		1094396	1					
ANR	1094426	Identifier	pidentry		1094396	0					
ANR	1094427	UnaryOperationExpression	- 1		1094396	1					
ANR	1094428	UnaryOperator	-		1094396	0					
ANR	1094429	PrimaryExpression	1		1094396	1					
ANR	1094430	CompoundStatement		7:45:195:195	1094396	1					
ANR	1094431	IfStatement	if ( defaultReaper != - 1 )		1094396	0					
ANR	1094432	Condition	defaultReaper != - 1	9834:6:302215:302231	1094396	0	True				
ANR	1094433	EqualityExpression	defaultReaper != - 1		1094396	0		!=			
ANR	1094434	Identifier	defaultReaper		1094396	0					
ANR	1094435	UnaryOperationExpression	- 1		1094396	1					
ANR	1094436	UnaryOperator	-		1094396	0					
ANR	1094437	PrimaryExpression	1		1094396	1					
ANR	1094438	CompoundStatement		9:26:224:224	1094396	1					
ANR	1094439	Statement	pidentry	9835:3:302240:302247	1094396	0	True				
ANR	1094440	Statement	=	9835:12:302249:302249	1094396	1	True				
ANR	1094441	Statement	new	9835:14:302251:302253	1094396	2	True				
ANR	1094442	ExpressionStatement	PidEntry	9835:18:302255:302263	1094396	3	True				
ANR	1094443	Identifier	PidEntry		1094396	0					
ANR	1094444	ExpressionStatement	ASSERT ( pidentry )	9836:3:302268:302284	1094396	4	True				
ANR	1094445	CallExpression	ASSERT ( pidentry )		1094396	0					
ANR	1094446	Callee	ASSERT		1094396	0					
ANR	1094447	Identifier	ASSERT		1094396	0					
ANR	1094448	ArgumentList	pidentry		1094396	1					
ANR	1094449	Argument	pidentry		1094396	0					
ANR	1094450	Identifier	pidentry		1094396	0					
ANR	1094451	ExpressionStatement	pidentry -> parent_is_local = TRUE	9837:3:302289:302321	1094396	5	True				
ANR	1094452	AssignmentExpression	pidentry -> parent_is_local = TRUE		1094396	0		=			
ANR	1094453	PtrMemberAccess	pidentry -> parent_is_local		1094396	0					
ANR	1094454	Identifier	pidentry		1094396	0					
ANR	1094455	Identifier	parent_is_local		1094396	1					
ANR	1094456	Identifier	TRUE		1094396	1					
ANR	1094457	ExpressionStatement	pidentry -> reaper_id = defaultReaper	9838:3:302326:302361	1094396	6	True				
ANR	1094458	AssignmentExpression	pidentry -> reaper_id = defaultReaper		1094396	0		=			
ANR	1094459	PtrMemberAccess	pidentry -> reaper_id		1094396	0					
ANR	1094460	Identifier	pidentry		1094396	0					
ANR	1094461	Identifier	reaper_id		1094396	1					
ANR	1094462	Identifier	defaultReaper		1094396	1					
ANR	1094463	ExpressionStatement	pidentry -> hung_tid = - 1	9839:3:302366:302389	1094396	7	True				
ANR	1094464	AssignmentExpression	pidentry -> hung_tid = - 1		1094396	0		=			
ANR	1094465	PtrMemberAccess	pidentry -> hung_tid		1094396	0					
ANR	1094466	Identifier	pidentry		1094396	0					
ANR	1094467	Identifier	hung_tid		1094396	1					
ANR	1094468	UnaryOperationExpression	- 1		1094396	1					
ANR	1094469	UnaryOperator	-		1094396	0					
ANR	1094470	PrimaryExpression	1		1094396	1					
ANR	1094471	ExpressionStatement	pidentry -> new_process_group = FALSE	9840:3:302394:302429	1094396	8	True				
ANR	1094472	AssignmentExpression	pidentry -> new_process_group = FALSE		1094396	0		=			
ANR	1094473	PtrMemberAccess	pidentry -> new_process_group		1094396	0					
ANR	1094474	Identifier	pidentry		1094396	0					
ANR	1094475	Identifier	new_process_group		1094396	1					
ANR	1094476	Identifier	FALSE		1094396	1					
ANR	1094477	ElseStatement	else		1094396	0					
ANR	1094478	CompoundStatement		16:9:429:429	1094396	0					
ANR	1094479	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""Unknown process exited (popen?) - pid=%d\\n"" , pid )"	9846:3:302544:302619	1094396	0	True				
ANR	1094480	CallExpression	"dprintf ( D_DAEMONCORE , ""Unknown process exited (popen?) - pid=%d\\n"" , pid )"		1094396	0					
ANR	1094481	Callee	dprintf		1094396	0					
ANR	1094482	Identifier	dprintf		1094396	0					
ANR	1094483	ArgumentList	D_DAEMONCORE		1094396	1					
ANR	1094484	Argument	D_DAEMONCORE		1094396	0					
ANR	1094485	Identifier	D_DAEMONCORE		1094396	0					
ANR	1094486	Argument	"""Unknown process exited (popen?) - pid=%d\\n"""		1094396	1					
ANR	1094487	PrimaryExpression	"""Unknown process exited (popen?) - pid=%d\\n"""		1094396	0					
ANR	1094488	Argument	pid		1094396	2					
ANR	1094489	Identifier	pid		1094396	0					
ANR	1094490	ReturnStatement	return FALSE ;	9848:3:302624:302636	1094396	1	True				
ANR	1094491	Identifier	FALSE		1094396	0					
ANR	1094492	ForStatement	for ( i = 1 ; i <= 2 ; i ++ )		1094396	4					
ANR	1094493	ForInit	i = 1 ;	9854:6:302777:302780	1094396	0	True				
ANR	1094494	AssignmentExpression	i = 1		1094396	0		=			
ANR	1094495	Identifier	i		1094396	0					
ANR	1094496	PrimaryExpression	1		1094396	1					
ANR	1094497	Condition	i <= 2	9854:11:302782:302785	1094396	1	True				
ANR	1094498	RelationalExpression	i <= 2		1094396	0		<=			
ANR	1094499	Identifier	i		1094396	0					
ANR	1094500	PrimaryExpression	2		1094396	1					
ANR	1094501	PostIncDecOperationExpression	i ++	9854:17:302788:302790	1094396	2	True				
ANR	1094502	Identifier	i		1094396	0					
ANR	1094503	IncDec	++		1094396	1					
ANR	1094504	CompoundStatement		29:22:782:782	1094396	3					
ANR	1094505	IfStatement	if ( pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE )		1094396	0					
ANR	1094506	Condition	pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE	9855:6:302801:302842	1094396	0	True				
ANR	1094507	EqualityExpression	pidentry -> std_pipes [ i ] != DC_STD_FD_NOPIPE		1094396	0		!=			
ANR	1094508	ArrayIndexing	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094509	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094510	Identifier	pidentry		1094396	0					
ANR	1094511	Identifier	std_pipes		1094396	1					
ANR	1094512	Identifier	i		1094396	1					
ANR	1094513	Identifier	DC_STD_FD_NOPIPE		1094396	1					
ANR	1094514	CompoundStatement		30:50:834:834	1094396	1					
ANR	1094515	ExpressionStatement	pidentry -> pipeHandler ( pidentry -> std_pipes [ i ] )	9856:3:302850:302895	1094396	0	True				
ANR	1094516	CallExpression	pidentry -> pipeHandler ( pidentry -> std_pipes [ i ] )		1094396	0					
ANR	1094517	Callee	pidentry -> pipeHandler		1094396	0					
ANR	1094518	PtrMemberAccess	pidentry -> pipeHandler		1094396	0					
ANR	1094519	Identifier	pidentry		1094396	0					
ANR	1094520	Identifier	pipeHandler		1094396	1					
ANR	1094521	ArgumentList	pidentry -> std_pipes [ i ]		1094396	1					
ANR	1094522	Argument	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094523	ArrayIndexing	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094524	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094525	Identifier	pidentry		1094396	0					
ANR	1094526	Identifier	std_pipes		1094396	1					
ANR	1094527	Identifier	i		1094396	1					
ANR	1094528	ExpressionStatement	Close_Pipe ( pidentry -> std_pipes [ i ] )	9857:3:302900:302934	1094396	1	True				
ANR	1094529	CallExpression	Close_Pipe ( pidentry -> std_pipes [ i ] )		1094396	0					
ANR	1094530	Callee	Close_Pipe		1094396	0					
ANR	1094531	Identifier	Close_Pipe		1094396	0					
ANR	1094532	ArgumentList	pidentry -> std_pipes [ i ]		1094396	1					
ANR	1094533	Argument	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094534	ArrayIndexing	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094535	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094536	Identifier	pidentry		1094396	0					
ANR	1094537	Identifier	std_pipes		1094396	1					
ANR	1094538	Identifier	i		1094396	1					
ANR	1094539	ExpressionStatement	pidentry -> std_pipes [ i ] = DC_STD_FD_NOPIPE	9858:3:302939:302980	1094396	2	True				
ANR	1094540	AssignmentExpression	pidentry -> std_pipes [ i ] = DC_STD_FD_NOPIPE		1094396	0		=			
ANR	1094541	ArrayIndexing	pidentry -> std_pipes [ i ]		1094396	0					
ANR	1094542	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094543	Identifier	pidentry		1094396	0					
ANR	1094544	Identifier	std_pipes		1094396	1					
ANR	1094545	Identifier	i		1094396	1					
ANR	1094546	Identifier	DC_STD_FD_NOPIPE		1094396	1					
ANR	1094547	IfStatement	if ( pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE )		1094396	5					
ANR	1094548	Condition	pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE	9863:5:303057:303098	1094396	0	True				
ANR	1094549	EqualityExpression	pidentry -> std_pipes [ 0 ] != DC_STD_FD_NOPIPE		1094396	0		!=			
ANR	1094550	ArrayIndexing	pidentry -> std_pipes [ 0 ]		1094396	0					
ANR	1094551	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094552	Identifier	pidentry		1094396	0					
ANR	1094553	Identifier	std_pipes		1094396	1					
ANR	1094554	PrimaryExpression	0		1094396	1					
ANR	1094555	Identifier	DC_STD_FD_NOPIPE		1094396	1					
ANR	1094556	CompoundStatement		38:49:1090:1090	1094396	1					
ANR	1094557	ExpressionStatement	Close_Pipe ( pidentry -> std_pipes [ 0 ] )	9864:2:303105:303139	1094396	0	True				
ANR	1094558	CallExpression	Close_Pipe ( pidentry -> std_pipes [ 0 ] )		1094396	0					
ANR	1094559	Callee	Close_Pipe		1094396	0					
ANR	1094560	Identifier	Close_Pipe		1094396	0					
ANR	1094561	ArgumentList	pidentry -> std_pipes [ 0 ]		1094396	1					
ANR	1094562	Argument	pidentry -> std_pipes [ 0 ]		1094396	0					
ANR	1094563	ArrayIndexing	pidentry -> std_pipes [ 0 ]		1094396	0					
ANR	1094564	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094565	Identifier	pidentry		1094396	0					
ANR	1094566	Identifier	std_pipes		1094396	1					
ANR	1094567	PrimaryExpression	0		1094396	1					
ANR	1094568	ExpressionStatement	pidentry -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE	9865:2:303143:303184	1094396	1	True				
ANR	1094569	AssignmentExpression	pidentry -> std_pipes [ 0 ] = DC_STD_FD_NOPIPE		1094396	0		=			
ANR	1094570	ArrayIndexing	pidentry -> std_pipes [ 0 ]		1094396	0					
ANR	1094571	PtrMemberAccess	pidentry -> std_pipes		1094396	0					
ANR	1094572	Identifier	pidentry		1094396	0					
ANR	1094573	Identifier	std_pipes		1094396	1					
ANR	1094574	PrimaryExpression	0		1094396	1					
ANR	1094575	Identifier	DC_STD_FD_NOPIPE		1094396	1					
ANR	1094576	ExpressionStatement	clearSession ( pid )	9869:4:303270:303287	1094396	6	True				
ANR	1094577	CallExpression	clearSession ( pid )		1094396	0					
ANR	1094578	Callee	clearSession		1094396	0					
ANR	1094579	Identifier	clearSession		1094396	0					
ANR	1094580	ArgumentList	pid		1094396	1					
ANR	1094581	Argument	pid		1094396	0					
ANR	1094582	Identifier	pid		1094396	0					
ANR	1094583	ExpressionStatement	pidentry -> deallocate = 0L	9875:1:303500:303525	1094396	7	True				
ANR	1094584	AssignmentExpression	pidentry -> deallocate = 0L		1094396	0		=			
ANR	1094585	PtrMemberAccess	pidentry -> deallocate		1094396	0					
ANR	1094586	Identifier	pidentry		1094396	0					
ANR	1094587	Identifier	deallocate		1094396	1					
ANR	1094588	PrimaryExpression	0L		1094396	1					
ANR	1094589	IfStatement	if ( pidentry -> is_local )		1094396	8					
ANR	1094590	Condition	pidentry -> is_local	9877:6:303562:303579	1094396	0	True				
ANR	1094591	PtrMemberAccess	pidentry -> is_local		1094396	0					
ANR	1094592	Identifier	pidentry		1094396	0					
ANR	1094593	Identifier	is_local		1094396	1					
ANR	1094594	CompoundStatement		53:2:1576:1589	1094396	1					
ANR	1094595	IdentifierDeclStatement	DWORD winexit ;	9878:2:303587:303600	1094396	0	True				
ANR	1094596	IdentifierDecl	winexit		1094396	0					
ANR	1094597	IdentifierDeclType	DWORD		1094396	0					
ANR	1094598	Identifier	winexit		1094396	1					
ANR	1094599	IfStatement	if ( pidentry -> hProcess )		1094396	1					
ANR	1094600	Condition	pidentry -> hProcess	9882:7:303703:303720	1094396	0	True				
ANR	1094601	PtrMemberAccess	pidentry -> hProcess		1094396	0					
ANR	1094602	Identifier	pidentry		1094396	0					
ANR	1094603	Identifier	hProcess		1094396	1					
ANR	1094604	CompoundStatement		57:28:1713:1713	1094396	1					
ANR	1094605	Statement	if	9884:3:303752:303753	1094396	0	True				
ANR	1094606	Statement	(	9884:6:303755:303755	1094396	1	True				
ANR	1094607	Statement	!	9884:8:303757:303757	1094396	2	True				
ANR	1094608	Statement	::	9884:9:303758:303759	1094396	3	True				
ANR	1094609	Statement	GetExitCodeProcess	9884:11:303760:303777	1094396	4	True				
ANR	1094610	Statement	(	9884:29:303778:303778	1094396	5	True				
ANR	1094611	Statement	pidentry	9884:30:303779:303786	1094396	6	True				
ANR	1094612	Statement	->	9884:38:303787:303788	1094396	7	True				
ANR	1094613	Statement	hProcess	9884:40:303789:303796	1094396	8	True				
ANR	1094614	Statement	","	9884:48:303797:303797	1094396	9	True				
ANR	1094615	Statement	&	9884:49:303798:303798	1094396	10	True				
ANR	1094616	Statement	winexit	9884:50:303799:303805	1094396	11	True				
ANR	1094617	Statement	)	9884:57:303806:303806	1094396	12	True				
ANR	1094618	Statement	)	9884:59:303808:303808	1094396	13	True				
ANR	1094619	CompoundStatement		59:61:1799:1799	1094396	14					
ANR	1094620	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for pid = %d\\n"" , pid )"	9885:4:303816:303892	1094396	0	True				
ANR	1094621	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for pid = %d\\n"" , pid )"		1094396	0					
ANR	1094622	Callee	dprintf		1094396	0					
ANR	1094623	Identifier	dprintf		1094396	0					
ANR	1094624	ArgumentList	D_ALWAYS		1094396	1					
ANR	1094625	Argument	D_ALWAYS		1094396	0					
ANR	1094626	Identifier	D_ALWAYS		1094396	0					
ANR	1094627	Argument	"""WARNING: Cannot get exit status for pid = %d\\n"""		1094396	1					
ANR	1094628	PrimaryExpression	"""WARNING: Cannot get exit status for pid = %d\\n"""		1094396	0					
ANR	1094629	Argument	pid		1094396	2					
ANR	1094630	Identifier	pid		1094396	0					
ANR	1094631	ReturnStatement	return FALSE ;	9887:4:303898:303910	1094396	1	True				
ANR	1094632	Identifier	FALSE		1094396	0					
ANR	1094633	ElseStatement	else		1094396	0					
ANR	1094634	CompoundStatement		64:9:1915:1915	1094396	0					
ANR	1094635	Statement	if	9891:3:303983:303984	1094396	0	True				
ANR	1094636	Statement	(	9891:6:303986:303986	1094396	1	True				
ANR	1094637	Statement	!	9891:8:303988:303988	1094396	2	True				
ANR	1094638	Statement	::	9891:9:303989:303990	1094396	3	True				
ANR	1094639	Statement	GetExitCodeThread	9891:11:303991:304007	1094396	4	True				
ANR	1094640	Statement	(	9891:28:304008:304008	1094396	5	True				
ANR	1094641	Statement	pidentry	9891:29:304009:304016	1094396	6	True				
ANR	1094642	Statement	->	9891:37:304017:304018	1094396	7	True				
ANR	1094643	Statement	hThread	9891:39:304019:304025	1094396	8	True				
ANR	1094644	Statement	","	9891:46:304026:304026	1094396	9	True				
ANR	1094645	Statement	&	9891:47:304027:304027	1094396	10	True				
ANR	1094646	Statement	winexit	9891:48:304028:304034	1094396	11	True				
ANR	1094647	Statement	)	9891:55:304035:304035	1094396	12	True				
ANR	1094648	Statement	)	9891:57:304037:304037	1094396	13	True				
ANR	1094649	CompoundStatement		66:59:2028:2028	1094396	14					
ANR	1094650	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for tid = %d\\n"" , pid )"	9892:4:304045:304121	1094396	0	True				
ANR	1094651	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Cannot get exit status for tid = %d\\n"" , pid )"		1094396	0					
ANR	1094652	Callee	dprintf		1094396	0					
ANR	1094653	Identifier	dprintf		1094396	0					
ANR	1094654	ArgumentList	D_ALWAYS		1094396	1					
ANR	1094655	Argument	D_ALWAYS		1094396	0					
ANR	1094656	Identifier	D_ALWAYS		1094396	0					
ANR	1094657	Argument	"""WARNING: Cannot get exit status for tid = %d\\n"""		1094396	1					
ANR	1094658	PrimaryExpression	"""WARNING: Cannot get exit status for tid = %d\\n"""		1094396	0					
ANR	1094659	Argument	pid		1094396	2					
ANR	1094660	Identifier	pid		1094396	0					
ANR	1094661	ReturnStatement	return FALSE ;	9894:4:304127:304139	1094396	1	True				
ANR	1094662	Identifier	FALSE		1094396	0					
ANR	1094663	ExpressionStatement	"whatexited = ""tid"""	9896:3:304149:304167	1094396	15	True				
ANR	1094664	AssignmentExpression	"whatexited = ""tid"""		1094396	0		=			
ANR	1094665	Identifier	whatexited		1094396	0					
ANR	1094666	PrimaryExpression	"""tid"""		1094396	1					
ANR	1094667	IfStatement	if ( winexit == STILL_ACTIVE )		1094396	2					
ANR	1094668	Condition	winexit == STILL_ACTIVE	9898:7:304180:304202	1094396	0	True				
ANR	1094669	EqualityExpression	winexit == STILL_ACTIVE		1094396	0		==			
ANR	1094670	Identifier	winexit		1094396	0					
ANR	1094671	Identifier	STILL_ACTIVE		1094396	1					
ANR	1094672	CompoundStatement		73:33:2195:2195	1094396	1					
ANR	1094673	ExpressionStatement	"EXCEPT ( ""DaemonCore: HandleProcessExit() and %s %d still running"" , whatexited , pid )"	9899:3:304234:304320	1094396	0	True				
ANR	1094674	CallExpression	"EXCEPT ( ""DaemonCore: HandleProcessExit() and %s %d still running"" , whatexited , pid )"		1094396	0					
ANR	1094675	Callee	EXCEPT		1094396	0					
ANR	1094676	Identifier	EXCEPT		1094396	0					
ANR	1094677	ArgumentList	"""DaemonCore: HandleProcessExit() and %s %d still running"""		1094396	1					
ANR	1094678	Argument	"""DaemonCore: HandleProcessExit() and %s %d still running"""		1094396	0					
ANR	1094679	PrimaryExpression	"""DaemonCore: HandleProcessExit() and %s %d still running"""		1094396	0					
ANR	1094680	Argument	whatexited		1094396	1					
ANR	1094681	Identifier	whatexited		1094396	0					
ANR	1094682	Argument	pid		1094396	2					
ANR	1094683	Identifier	pid		1094396	0					
ANR	1094684	ExpressionStatement	exit_status = winexit	9902:2:304328:304349	1094396	3	True				
ANR	1094685	AssignmentExpression	exit_status = winexit		1094396	0		=			
ANR	1094686	Identifier	exit_status		1094396	0					
ANR	1094687	Identifier	winexit		1094396	1					
ANR	1094688	IfStatement	if ( pidentry -> parent_is_local )		1094396	9					
ANR	1094689	Condition	pidentry -> parent_is_local	9908:6:304494:304518	1094396	0	True				
ANR	1094690	PtrMemberAccess	pidentry -> parent_is_local		1094396	0					
ANR	1094691	Identifier	pidentry		1094396	0					
ANR	1094692	Identifier	parent_is_local		1094396	1					
ANR	1094693	CompoundStatement		83:34:2511:2511	1094396	1					
ANR	1094694	ExpressionStatement	"CallReaper ( pidentry -> reaper_id , whatexited , pid , exit_status )"	9909:2:304526:304589	1094396	0	True				
ANR	1094695	CallExpression	"CallReaper ( pidentry -> reaper_id , whatexited , pid , exit_status )"		1094396	0					
ANR	1094696	Callee	CallReaper		1094396	0					
ANR	1094697	Identifier	CallReaper		1094396	0					
ANR	1094698	ArgumentList	pidentry -> reaper_id		1094396	1					
ANR	1094699	Argument	pidentry -> reaper_id		1094396	0					
ANR	1094700	PtrMemberAccess	pidentry -> reaper_id		1094396	0					
ANR	1094701	Identifier	pidentry		1094396	0					
ANR	1094702	Identifier	reaper_id		1094396	1					
ANR	1094703	Argument	whatexited		1094396	1					
ANR	1094704	Identifier	whatexited		1094396	0					
ANR	1094705	Argument	pid		1094396	2					
ANR	1094706	Identifier	pid		1094396	0					
ANR	1094707	Argument	exit_status		1094396	3					
ANR	1094708	Identifier	exit_status		1094396	0					
ANR	1094709	ElseStatement	else		1094396	0					
ANR	1094710	CompoundStatement		85:8:2588:2588	1094396	0					
ANR	1094711	IfStatement	if ( pidentry -> new_process_group == TRUE )		1094396	10					
ANR	1094712	Condition	pidentry -> new_process_group == TRUE	9918:5:304849:304883	1094396	0	True				
ANR	1094713	EqualityExpression	pidentry -> new_process_group == TRUE		1094396	0		==			
ANR	1094714	PtrMemberAccess	pidentry -> new_process_group		1094396	0					
ANR	1094715	Identifier	pidentry		1094396	0					
ANR	1094716	Identifier	new_process_group		1094396	1					
ANR	1094717	Identifier	TRUE		1094396	1					
ANR	1094718	CompoundStatement		93:42:2875:2875	1094396	1					
ANR	1094719	ExpressionStatement	ASSERT ( m_proc_family != NULL )	9919:2:304890:304919	1094396	0	True				
ANR	1094720	CallExpression	ASSERT ( m_proc_family != NULL )		1094396	0					
ANR	1094721	Callee	ASSERT		1094396	0					
ANR	1094722	Identifier	ASSERT		1094396	0					
ANR	1094723	ArgumentList	m_proc_family != NULL		1094396	1					
ANR	1094724	Argument	m_proc_family != NULL		1094396	0					
ANR	1094725	EqualityExpression	m_proc_family != NULL		1094396	0		!=			
ANR	1094726	Identifier	m_proc_family		1094396	0					
ANR	1094727	Identifier	NULL		1094396	1					
ANR	1094728	IfStatement	if ( ! m_proc_family -> unregister_family ( pid ) )		1094396	1					
ANR	1094729	Condition	! m_proc_family -> unregister_family ( pid )	9920:6:304927:304964	1094396	0	True				
ANR	1094730	UnaryOperationExpression	! m_proc_family -> unregister_family ( pid )		1094396	0					
ANR	1094731	UnaryOperator	!		1094396	0					
ANR	1094732	CallExpression	m_proc_family -> unregister_family ( pid )		1094396	1					
ANR	1094733	Callee	m_proc_family -> unregister_family		1094396	0					
ANR	1094734	PtrMemberAccess	m_proc_family -> unregister_family		1094396	0					
ANR	1094735	Identifier	m_proc_family		1094396	0					
ANR	1094736	Identifier	unregister_family		1094396	1					
ANR	1094737	ArgumentList	pid		1094396	1					
ANR	1094738	Argument	pid		1094396	0					
ANR	1094739	Identifier	pid		1094396	0					
ANR	1094740	CompoundStatement		95:46:2956:2956	1094396	1					
ANR	1094741	ExpressionStatement	"dprintf ( D_ALWAYS , ""error unregistering pid %u with the procd\\n"" , pid )"	9921:3:304972:305063	1094396	0	True				
ANR	1094742	CallExpression	"dprintf ( D_ALWAYS , ""error unregistering pid %u with the procd\\n"" , pid )"		1094396	0					
ANR	1094743	Callee	dprintf		1094396	0					
ANR	1094744	Identifier	dprintf		1094396	0					
ANR	1094745	ArgumentList	D_ALWAYS		1094396	1					
ANR	1094746	Argument	D_ALWAYS		1094396	0					
ANR	1094747	Identifier	D_ALWAYS		1094396	0					
ANR	1094748	Argument	"""error unregistering pid %u with the procd\\n"""		1094396	1					
ANR	1094749	PrimaryExpression	"""error unregistering pid %u with the procd\\n"""		1094396	0					
ANR	1094750	Argument	pid		1094396	2					
ANR	1094751	Identifier	pid		1094396	0					
ANR	1094752	IfStatement	if ( pidentry -> child_session_id )		1094396	11					
ANR	1094753	Condition	pidentry -> child_session_id	9927:4:305111:305136	1094396	0	True				
ANR	1094754	PtrMemberAccess	pidentry -> child_session_id		1094396	0					
ANR	1094755	Identifier	pidentry		1094396	0					
ANR	1094756	Identifier	child_session_id		1094396	1					
ANR	1094757	ExpressionStatement	getSecMan ( ) -> session_cache -> remove ( pidentry -> child_session_id )	9928:2:305141:305203	1094396	1	True				
ANR	1094758	CallExpression	getSecMan ( ) -> session_cache -> remove ( pidentry -> child_session_id )		1094396	0					
ANR	1094759	Callee	getSecMan ( ) -> session_cache -> remove		1094396	0					
ANR	1094760	PtrMemberAccess	getSecMan ( ) -> session_cache -> remove		1094396	0					
ANR	1094761	PtrMemberAccess	getSecMan ( ) -> session_cache		1094396	0					
ANR	1094762	CallExpression	getSecMan ( )		1094396	0					
ANR	1094763	Callee	getSecMan		1094396	0					
ANR	1094764	Identifier	getSecMan		1094396	0					
ANR	1094765	ArgumentList			1094396	1					
ANR	1094766	Identifier	session_cache		1094396	1					
ANR	1094767	Identifier	remove		1094396	1					
ANR	1094768	ArgumentList	pidentry -> child_session_id		1094396	1					
ANR	1094769	Argument	pidentry -> child_session_id		1094396	0					
ANR	1094770	PtrMemberAccess	pidentry -> child_session_id		1094396	0					
ANR	1094771	Identifier	pidentry		1094396	0					
ANR	1094772	Identifier	child_session_id		1094396	1					
ANR	1094773	ExpressionStatement	pidTable -> remove ( pid )	9931:1:305279:305300	1094396	12	True				
ANR	1094774	CallExpression	pidTable -> remove ( pid )		1094396	0					
ANR	1094775	Callee	pidTable -> remove		1094396	0					
ANR	1094776	PtrMemberAccess	pidTable -> remove		1094396	0					
ANR	1094777	Identifier	pidTable		1094396	0					
ANR	1094778	Identifier	remove		1094396	1					
ANR	1094779	ArgumentList	pid		1094396	1					
ANR	1094780	Argument	pid		1094396	0					
ANR	1094781	Identifier	pid		1094396	0					
ANR	1094782	Statement	::	9934:1:305341:305342	1094396	13	True				
ANR	1094783	ExpressionStatement	CloseHandle ( pidentry -> hThread )	9934:3:305343:305373	1094396	14	True				
ANR	1094784	CallExpression	CloseHandle ( pidentry -> hThread )		1094396	0					
ANR	1094785	Callee	CloseHandle		1094396	0					
ANR	1094786	Identifier	CloseHandle		1094396	0					
ANR	1094787	ArgumentList	pidentry -> hThread		1094396	1					
ANR	1094788	Argument	pidentry -> hThread		1094396	0					
ANR	1094789	PtrMemberAccess	pidentry -> hThread		1094396	0					
ANR	1094790	Identifier	pidentry		1094396	0					
ANR	1094791	Identifier	hThread		1094396	1					
ANR	1094792	IfStatement	if ( pidentry -> hProcess )		1094396	15					
ANR	1094793	Condition	pidentry -> hProcess	9936:5:305439:305456	1094396	0	True				
ANR	1094794	PtrMemberAccess	pidentry -> hProcess		1094396	0					
ANR	1094795	Identifier	pidentry		1094396	0					
ANR	1094796	Identifier	hProcess		1094396	1					
ANR	1094797	CompoundStatement		111:25:3448:3448	1094396	1					
ANR	1094798	Statement	::	9937:2:305463:305464	1094396	0	True				
ANR	1094799	ExpressionStatement	CloseHandle ( pidentry -> hProcess )	9937:4:305465:305496	1094396	1	True				
ANR	1094800	CallExpression	CloseHandle ( pidentry -> hProcess )		1094396	0					
ANR	1094801	Callee	CloseHandle		1094396	0					
ANR	1094802	Identifier	CloseHandle		1094396	0					
ANR	1094803	ArgumentList	pidentry -> hProcess		1094396	1					
ANR	1094804	Argument	pidentry -> hProcess		1094396	0					
ANR	1094805	PtrMemberAccess	pidentry -> hProcess		1094396	0					
ANR	1094806	Identifier	pidentry		1094396	0					
ANR	1094807	Identifier	hProcess		1094396	1					
ANR	1094808	IfStatement	if ( pidentry -> hung_tid != - 1 )		1094396	16					
ANR	1094809	Condition	pidentry -> hung_tid != - 1	9941:6:305555:305578	1094396	0	True				
ANR	1094810	EqualityExpression	pidentry -> hung_tid != - 1		1094396	0		!=			
ANR	1094811	PtrMemberAccess	pidentry -> hung_tid		1094396	0					
ANR	1094812	Identifier	pidentry		1094396	0					
ANR	1094813	Identifier	hung_tid		1094396	1					
ANR	1094814	UnaryOperationExpression	- 1		1094396	1					
ANR	1094815	UnaryOperator	-		1094396	0					
ANR	1094816	PrimaryExpression	1		1094396	1					
ANR	1094817	CompoundStatement		116:33:3571:3571	1094396	1					
ANR	1094818	ExpressionStatement	Cancel_Timer ( pidentry -> hung_tid )	9942:2:305586:305618	1094396	0	True				
ANR	1094819	CallExpression	Cancel_Timer ( pidentry -> hung_tid )		1094396	0					
ANR	1094820	Callee	Cancel_Timer		1094396	0					
ANR	1094821	Identifier	Cancel_Timer		1094396	0					
ANR	1094822	ArgumentList	pidentry -> hung_tid		1094396	1					
ANR	1094823	Argument	pidentry -> hung_tid		1094396	0					
ANR	1094824	PtrMemberAccess	pidentry -> hung_tid		1094396	0					
ANR	1094825	Identifier	pidentry		1094396	0					
ANR	1094826	Identifier	hung_tid		1094396	1					
ANR	1094827	Statement	delete	9945:1:305652:305657	1094396	17	True				
ANR	1094828	ExpressionStatement	pidentry	9945:8:305659:305667	1094396	18	True				
ANR	1094829	Identifier	pidentry		1094396	0					
ANR	1094830	IfStatement	if ( pid == ppid )		1094396	19					
ANR	1094831	Condition	pid == ppid	9950:5:305849:305859	1094396	0	True				
ANR	1094832	EqualityExpression	pid == ppid		1094396	0		==			
ANR	1094833	Identifier	pid		1094396	0					
ANR	1094834	Identifier	ppid		1094396	1					
ANR	1094835	CompoundStatement		125:18:3851:3851	1094396	1					
ANR	1094836	ExpressionStatement	"dprintf ( D_ALWAYS , ""Our Parent process (pid %lu) exited; shutting down\\n"" , ( unsigned long ) pid )"	9951:2:305866:305967	1094396	0	True				
ANR	1094837	CallExpression	"dprintf ( D_ALWAYS , ""Our Parent process (pid %lu) exited; shutting down\\n"" , ( unsigned long ) pid )"		1094396	0					
ANR	1094838	Callee	dprintf		1094396	0					
ANR	1094839	Identifier	dprintf		1094396	0					
ANR	1094840	ArgumentList	D_ALWAYS		1094396	1					
ANR	1094841	Argument	D_ALWAYS		1094396	0					
ANR	1094842	Identifier	D_ALWAYS		1094396	0					
ANR	1094843	Argument	"""Our Parent process (pid %lu) exited; shutting down\\n"""		1094396	1					
ANR	1094844	PrimaryExpression	"""Our Parent process (pid %lu) exited; shutting down\\n"""		1094396	0					
ANR	1094845	Argument	( unsigned long ) pid		1094396	2					
ANR	1094846	CastExpression	( unsigned long ) pid		1094396	0					
ANR	1094847	CastTarget	unsigned long		1094396	0					
ANR	1094848	Identifier	pid		1094396	1					
ANR	1094849	ExpressionStatement	"Send_Signal ( mypid , SIGTERM )"	9954:2:305971:305997	1094396	1	True				
ANR	1094850	CallExpression	"Send_Signal ( mypid , SIGTERM )"		1094396	0					
ANR	1094851	Callee	Send_Signal		1094396	0					
ANR	1094852	Identifier	Send_Signal		1094396	0					
ANR	1094853	ArgumentList	mypid		1094396	1					
ANR	1094854	Argument	mypid		1094396	0					
ANR	1094855	Identifier	mypid		1094396	0					
ANR	1094856	Argument	SIGTERM		1094396	1					
ANR	1094857	Identifier	SIGTERM		1094396	0					
ANR	1094858	ReturnStatement	return TRUE ;	9957:1:306039:306050	1094396	20	True				
ANR	1094859	Identifier	TRUE		1094396	0					
ANR	1094860	ReturnType	int		1094396	1					
ANR	1094861	Identifier	DaemonCore :: HandleProcessExit		1094396	2					
ANR	1094862	ParameterList	"pid_t pid , int exit_status"		1094396	3					
ANR	1094863	Parameter	pid_t pid	9825:34:301982:301990	1094396	0	True				
ANR	1094864	ParameterType	pid_t		1094396	0					
ANR	1094865	Identifier	pid		1094396	1					
ANR	1094866	Parameter	int exit_status	9825:45:301993:302007	1094396	1	True				
ANR	1094867	ParameterType	int		1094396	0					
ANR	1094868	Identifier	exit_status		1094396	1					
ANR	1094869	CFGEntryNode	ENTRY		1094396		True				
ANR	1094870	CFGExitNode	EXIT		1094396		True				
ANR	1094871	Symbol	* pidentry -> std_pipes		1094396						
ANR	1094872	Symbol	getSecMan ( ) -> session_cache		1094396						
ANR	1094873	Symbol	* pidTable		1094396						
ANR	1094874	Symbol	* pidentry		1094396						
ANR	1094875	Symbol	pidentry -> parent_is_local		1094396						
ANR	1094876	Symbol	pidentry -> is_local		1094396						
ANR	1094877	Symbol	pid		1094396						
ANR	1094878	Symbol	defaultReaper		1094396						
ANR	1094879	Symbol	pidentry -> new_process_group		1094396						
ANR	1094880	Symbol	winexit		1094396						
ANR	1094881	Symbol	exit_status		1094396						
ANR	1094882	Symbol	* getSecMan		1094396						
ANR	1094883	Symbol	pidentry -> std_pipes		1094396						
ANR	1094884	Symbol	pidTable -> lookup		1094396						
ANR	1094885	Symbol	m_proc_family -> unregister_family		1094396						
ANR	1094886	Symbol	DC_STD_FD_NOPIPE		1094396						
ANR	1094887	Symbol	m_proc_family		1094396						
ANR	1094888	Symbol	SIGTERM		1094396						
ANR	1094889	Symbol	* * pidentry		1094396						
ANR	1094890	Symbol	pidentry		1094396						
ANR	1094891	Symbol	* m_proc_family		1094396						
ANR	1094892	Symbol	pidTable		1094396						
ANR	1094893	Symbol	pidentry -> child_session_id		1094396						
ANR	1094894	Symbol	pidentry -> deallocate		1094396						
ANR	1094895	Symbol	NULL		1094396						
ANR	1094896	Symbol	D_DAEMONCORE		1094396						
ANR	1094897	Symbol	pidentry -> hProcess		1094396						
ANR	1094898	Symbol	mypid		1094396						
ANR	1094899	Symbol	D_ALWAYS		1094396						
ANR	1094900	Symbol	i		1094396						
ANR	1094901	Symbol	TRUE		1094396						
ANR	1094902	Symbol	STILL_ACTIVE		1094396						
ANR	1094903	Symbol	getSecMan		1094396						
ANR	1094904	Symbol	ppid		1094396						
ANR	1094905	Symbol	pidentry -> hung_tid		1094396						
ANR	1094906	Symbol	pidentry -> reaper_id		1094396						
ANR	1094907	Symbol	* i		1094396						
ANR	1094908	Symbol	pidentry -> hThread		1094396						
ANR	1094909	Symbol	whatexited		1094396						
ANR	1094910	Symbol	FALSE		1094396						
ANR	1094911	Function	DaemonCore :: GetExceptionString	9960:0:306055:306474							
ANR	1094912	FunctionDef	DaemonCore :: GetExceptionString (int sig)		1094911	0					
ANR	1094913	CompoundStatement		9961:0:306107:306474	1094911	0					
ANR	1094914	Statement	static	9962:1:306110:306115	1094911	0	True				
ANR	1094915	IdentifierDeclStatement	char exception_string [ 80 ] ;	9962:8:306117:306142	1094911	1	True				
ANR	1094916	IdentifierDecl	exception_string [ 80 ]		1094911	0					
ANR	1094917	IdentifierDeclType	char [ 80 ]		1094911	0					
ANR	1094918	Identifier	exception_string		1094911	1					
ANR	1094919	PrimaryExpression	80		1094911	2					
ANR	1094920	ExpressionStatement	"sprintf ( exception_string , ""exception %s"" , ExceptionHandler :: GetExceptionString ( sig ) )"	9965:1:306159:306244	1094911	2	True				
ANR	1094921	CallExpression	"sprintf ( exception_string , ""exception %s"" , ExceptionHandler :: GetExceptionString ( sig ) )"		1094911	0					
ANR	1094922	Callee	sprintf		1094911	0					
ANR	1094923	Identifier	sprintf		1094911	0					
ANR	1094924	ArgumentList	exception_string		1094911	1					
ANR	1094925	Argument	exception_string		1094911	0					
ANR	1094926	Identifier	exception_string		1094911	0					
ANR	1094927	Argument	"""exception %s"""		1094911	1					
ANR	1094928	PrimaryExpression	"""exception %s"""		1094911	0					
ANR	1094929	Argument	ExceptionHandler :: GetExceptionString ( sig )		1094911	2					
ANR	1094930	CallExpression	ExceptionHandler :: GetExceptionString ( sig )		1094911	0					
ANR	1094931	Callee	ExceptionHandler :: GetExceptionString		1094911	0					
ANR	1094932	Identifier	ExceptionHandler :: GetExceptionString		1094911	0					
ANR	1094933	ArgumentList	sig		1094911	1					
ANR	1094934	Argument	sig		1094911	0					
ANR	1094935	Identifier	sig		1094911	0					
ANR	1094936	ReturnStatement	return exception_string ;	9978:1:306449:306472	1094911	3	True				
ANR	1094937	Identifier	exception_string		1094911	0					
ANR	1094938	ReturnType	const char *		1094911	1					
ANR	1094939	Identifier	DaemonCore :: GetExceptionString		1094911	2					
ANR	1094940	ParameterList	int sig		1094911	3					
ANR	1094941	Parameter	int sig	9960:43:306098:306104	1094911	0	True				
ANR	1094942	ParameterType	int		1094911	0					
ANR	1094943	Identifier	sig		1094911	1					
ANR	1094944	CFGEntryNode	ENTRY		1094911		True				
ANR	1094945	CFGExitNode	EXIT		1094911		True				
ANR	1094946	Symbol	sig		1094911						
ANR	1094947	Symbol	ExceptionHandler :: GetExceptionString		1094911						
ANR	1094948	Symbol	exception_string		1094911						
ANR	1094949	DeclStmt									
ANR	1094950	Decl							pid_t	pid_t	child_pid
ANR	1094951	DeclStmt									
ANR	1094952	Decl							unsigned int	unsigned int	timeout_secs
ANR	1094953	DeclStmt									
ANR	1094954	Decl							PidEntry	PidEntry *	pidentry
ANR	1094955	DeclStmt									
ANR	1094956	Decl							int	int	ret_value
ANR	1094957	DeclStmt									
ANR	1094958	Decl							double	double	dprintf_lock_delay
ANR	1094959	DeclStmt									
ANR	1094960	Decl							time_t	time_t	last_email
ANR	1094961	DeclStmt									
ANR	1094962	Decl							std :: string	std :: string	subject
ANR	1094963	DeclStmt									
ANR	1094964	Decl							FILE	FILE *	mailer
ANR	1094965	Function	DaemonCore :: HungChildTimeout	10088:0:310153:313440							
ANR	1094966	FunctionDef	DaemonCore :: HungChildTimeout ()		1094965	0					
ANR	1094967	CompoundStatement		10089:0:310188:313440	1094965	0					
ANR	1094968	IdentifierDeclStatement	pid_t hung_child_pid ;	10090:1:310191:310211	1094965	0	True				
ANR	1094969	IdentifierDecl	hung_child_pid		1094965	0					
ANR	1094970	IdentifierDeclType	pid_t		1094965	0					
ANR	1094971	Identifier	hung_child_pid		1094965	1					
ANR	1094972	IdentifierDeclStatement	pid_t * hung_child_pid_ptr ;	10091:1:310214:310239	1094965	1	True				
ANR	1094973	IdentifierDecl	* hung_child_pid_ptr		1094965	0					
ANR	1094974	IdentifierDeclType	pid_t *		1094965	0					
ANR	1094975	Identifier	hung_child_pid_ptr		1094965	1					
ANR	1094976	IdentifierDeclStatement	PidEntry * pidentry ;	10092:1:310242:310260	1094965	2	True				
ANR	1094977	IdentifierDecl	* pidentry		1094965	0					
ANR	1094978	IdentifierDeclType	PidEntry *		1094965	0					
ANR	1094979	Identifier	pidentry		1094965	1					
ANR	1094980	IdentifierDeclStatement	bool first_time = true ;	10093:1:310263:310285	1094965	3	True				
ANR	1094981	IdentifierDecl	first_time = true		1094965	0					
ANR	1094982	IdentifierDeclType	bool		1094965	0					
ANR	1094983	Identifier	first_time		1094965	1					
ANR	1094984	AssignmentExpression	first_time = true		1094965	2		=			
ANR	1094985	Identifier	true		1094965	0					
ANR	1094986	Identifier	true		1094965	1					
ANR	1094987	ExpressionStatement	hung_child_pid_ptr = ( pid_t * ) GetDataPtr ( )	10096:1:310355:310396	1094965	4	True				
ANR	1094988	AssignmentExpression	hung_child_pid_ptr = ( pid_t * ) GetDataPtr ( )		1094965	0		=			
ANR	1094989	Identifier	hung_child_pid_ptr		1094965	0					
ANR	1094990	CastExpression	( pid_t * ) GetDataPtr ( )		1094965	1					
ANR	1094991	CastTarget	pid_t *		1094965	0					
ANR	1094992	CallExpression	GetDataPtr ( )		1094965	1					
ANR	1094993	Callee	GetDataPtr		1094965	0					
ANR	1094994	Identifier	GetDataPtr		1094965	0					
ANR	1094995	ArgumentList			1094965	1					
ANR	1094996	ExpressionStatement	hung_child_pid = * hung_child_pid_ptr	10097:1:310399:310435	1094965	5	True				
ANR	1094997	AssignmentExpression	hung_child_pid = * hung_child_pid_ptr		1094965	0		=			
ANR	1094998	Identifier	hung_child_pid		1094965	0					
ANR	1094999	UnaryOperationExpression	* hung_child_pid_ptr		1094965	1					
ANR	1095000	UnaryOperator	*		1094965	0					
ANR	1095001	Identifier	hung_child_pid_ptr		1094965	1					
ANR	1095002	IfStatement	"if ( ( pidTable -> lookup ( hung_child_pid , pidentry ) < 0 ) )"		1094965	6					
ANR	1095003	Condition	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"	10099:5:310443:310490	1094965	0	True				
ANR	1095004	RelationalExpression	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"		1094965	0		<			
ANR	1095005	CallExpression	"pidTable -> lookup ( hung_child_pid , pidentry )"		1094965	0					
ANR	1095006	Callee	pidTable -> lookup		1094965	0					
ANR	1095007	PtrMemberAccess	pidTable -> lookup		1094965	0					
ANR	1095008	Identifier	pidTable		1094965	0					
ANR	1095009	Identifier	lookup		1094965	1					
ANR	1095010	ArgumentList	hung_child_pid		1094965	1					
ANR	1095011	Argument	hung_child_pid		1094965	0					
ANR	1095012	Identifier	hung_child_pid		1094965	0					
ANR	1095013	Argument	pidentry		1094965	1					
ANR	1095014	Identifier	pidentry		1094965	0					
ANR	1095015	PrimaryExpression	0		1094965	1					
ANR	1095016	CompoundStatement		11:55:304:304	1094965	1					
ANR	1095017	ReturnStatement	return FALSE ;	10101:2:310558:310570	1094965	0	True				
ANR	1095018	Identifier	FALSE		1094965	0					
ANR	1095019	ExpressionStatement	pidentry -> hung_tid = - 1	10106:1:310678:310701	1094965	7	True				
ANR	1095020	AssignmentExpression	pidentry -> hung_tid = - 1		1094965	0		=			
ANR	1095021	PtrMemberAccess	pidentry -> hung_tid		1094965	0					
ANR	1095022	Identifier	pidentry		1094965	0					
ANR	1095023	Identifier	hung_tid		1094965	1					
ANR	1095024	UnaryOperationExpression	- 1		1094965	1					
ANR	1095025	UnaryOperator	-		1094965	0					
ANR	1095026	PrimaryExpression	1		1094965	1					
ANR	1095027	IfStatement	if ( ProcessExitedButNotReaped ( hung_child_pid ) )		1094965	8					
ANR	1095028	Condition	ProcessExitedButNotReaped ( hung_child_pid )	10108:5:310709:310751	1094965	0	True				
ANR	1095029	CallExpression	ProcessExitedButNotReaped ( hung_child_pid )		1094965	0					
ANR	1095030	Callee	ProcessExitedButNotReaped		1094965	0					
ANR	1095031	Identifier	ProcessExitedButNotReaped		1094965	0					
ANR	1095032	ArgumentList	hung_child_pid		1094965	1					
ANR	1095033	Argument	hung_child_pid		1094965	0					
ANR	1095034	Identifier	hung_child_pid		1094965	0					
ANR	1095035	CompoundStatement		20:51:566:566	1094965	1					
ANR	1095036	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"" , hung_child_pid )"	10111:2:310858:310987	1094965	0	True				
ANR	1095037	CallExpression	"dprintf ( D_FULLDEBUG , ""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"" , hung_child_pid )"		1094965	0					
ANR	1095038	Callee	dprintf		1094965	0					
ANR	1095039	Identifier	dprintf		1094965	0					
ANR	1095040	ArgumentList	D_FULLDEBUG		1094965	1					
ANR	1095041	Argument	D_FULLDEBUG		1094965	0					
ANR	1095042	Identifier	D_FULLDEBUG		1094965	0					
ANR	1095043	Argument	"""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"""		1094965	1					
ANR	1095044	PrimaryExpression	"""Canceling hung child timer for pid %d, because it has exited but has not been reaped yet.\\n"""		1094965	0					
ANR	1095045	Argument	hung_child_pid		1094965	2					
ANR	1095046	Identifier	hung_child_pid		1094965	0					
ANR	1095047	ReturnStatement	return FALSE ;	10112:2:310991:311003	1094965	1	True				
ANR	1095048	Identifier	FALSE		1094965	0					
ANR	1095049	IfStatement	if ( pidentry -> was_not_responding )		1094965	9					
ANR	1095050	Condition	pidentry -> was_not_responding	10117:5:311109:311136	1094965	0	True				
ANR	1095051	PtrMemberAccess	pidentry -> was_not_responding		1094965	0					
ANR	1095052	Identifier	pidentry		1094965	0					
ANR	1095053	Identifier	was_not_responding		1094965	1					
ANR	1095054	CompoundStatement		29:36:951:951	1094965	1					
ANR	1095055	ExpressionStatement	first_time = false	10118:2:311144:311162	1094965	0	True				
ANR	1095056	AssignmentExpression	first_time = false		1094965	0		=			
ANR	1095057	Identifier	first_time		1094965	0					
ANR	1095058	Identifier	false		1094965	1					
ANR	1095059	ElseStatement	else		1094965	0					
ANR	1095060	CompoundStatement		32:6:984:984	1094965	0					
ANR	1095061	ExpressionStatement	pidentry -> was_not_responding = TRUE	10121:1:311176:311211	1094965	0	True				
ANR	1095062	AssignmentExpression	pidentry -> was_not_responding = TRUE		1094965	0		=			
ANR	1095063	PtrMemberAccess	pidentry -> was_not_responding		1094965	0					
ANR	1095064	Identifier	pidentry		1094965	0					
ANR	1095065	Identifier	was_not_responding		1094965	1					
ANR	1095066	Identifier	TRUE		1094965	1					
ANR	1095067	ExpressionStatement	ServiceCommandSocket ( )	10133:1:311829:311851	1094965	10	True				
ANR	1095068	CallExpression	ServiceCommandSocket ( )		1094965	0					
ANR	1095069	Callee	ServiceCommandSocket		1094965	0					
ANR	1095070	Identifier	ServiceCommandSocket		1094965	0					
ANR	1095071	ArgumentList			1094965	1					
ANR	1095072	IfStatement	"if ( ( pidTable -> lookup ( hung_child_pid , pidentry ) < 0 ) )"		1094965	11					
ANR	1095073	Condition	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"	10138:5:312055:312102	1094965	0	True				
ANR	1095074	RelationalExpression	"pidTable -> lookup ( hung_child_pid , pidentry ) < 0"		1094965	0		<			
ANR	1095075	CallExpression	"pidTable -> lookup ( hung_child_pid , pidentry )"		1094965	0					
ANR	1095076	Callee	pidTable -> lookup		1094965	0					
ANR	1095077	PtrMemberAccess	pidTable -> lookup		1094965	0					
ANR	1095078	Identifier	pidTable		1094965	0					
ANR	1095079	Identifier	lookup		1094965	1					
ANR	1095080	ArgumentList	hung_child_pid		1094965	1					
ANR	1095081	Argument	hung_child_pid		1094965	0					
ANR	1095082	Identifier	hung_child_pid		1094965	0					
ANR	1095083	Argument	pidentry		1094965	1					
ANR	1095084	Identifier	pidentry		1094965	0					
ANR	1095085	PrimaryExpression	0		1094965	1					
ANR	1095086	CompoundStatement		50:55:1916:1916	1094965	1					
ANR	1095087	ReturnStatement	return FALSE ;	10140:2:312178:312190	1094965	0	True				
ANR	1095088	Identifier	FALSE		1094965	0					
ANR	1095089	IfStatement	if ( pidentry -> was_not_responding == FALSE )		1094965	12					
ANR	1095090	Condition	pidentry -> was_not_responding == FALSE	10144:6:312258:312294	1094965	0	True				
ANR	1095091	EqualityExpression	pidentry -> was_not_responding == FALSE		1094965	0		==			
ANR	1095092	PtrMemberAccess	pidentry -> was_not_responding		1094965	0					
ANR	1095093	Identifier	pidentry		1094965	0					
ANR	1095094	Identifier	was_not_responding		1094965	1					
ANR	1095095	Identifier	FALSE		1094965	1					
ANR	1095096	CompoundStatement		56:46:2109:2109	1094965	1					
ANR	1095097	ReturnStatement	return FALSE ;	10146:2:312331:312343	1094965	0	True				
ANR	1095098	Identifier	FALSE		1094965	0					
ANR	1095099	ExpressionStatement	"dprintf ( D_ALWAYS , ""ERROR: Child pid %d appears hung! Killing it hard.\\n"" , hung_child_pid )"	10149:1:312350:312440	1094965	13	True				
ANR	1095100	CallExpression	"dprintf ( D_ALWAYS , ""ERROR: Child pid %d appears hung! Killing it hard.\\n"" , hung_child_pid )"		1094965	0					
ANR	1095101	Callee	dprintf		1094965	0					
ANR	1095102	Identifier	dprintf		1094965	0					
ANR	1095103	ArgumentList	D_ALWAYS		1094965	1					
ANR	1095104	Argument	D_ALWAYS		1094965	0					
ANR	1095105	Identifier	D_ALWAYS		1094965	0					
ANR	1095106	Argument	"""ERROR: Child pid %d appears hung! Killing it hard.\\n"""		1094965	1					
ANR	1095107	PrimaryExpression	"""ERROR: Child pid %d appears hung! Killing it hard.\\n"""		1094965	0					
ANR	1095108	Argument	hung_child_pid		1094965	2					
ANR	1095109	Identifier	hung_child_pid		1094965	0					
ANR	1095110	IdentifierDeclStatement	"bool want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false ) ;"	10153:1:312474:312541	1094965	14	True				
ANR	1095111	IdentifierDecl	"want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		1094965	0					
ANR	1095112	IdentifierDeclType	bool		1094965	0					
ANR	1095113	Identifier	want_core		1094965	1					
ANR	1095114	AssignmentExpression	"want_core = param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		1094965	2		=			
ANR	1095115	Identifier	want_core		1094965	0					
ANR	1095116	CallExpression	"param_boolean ( ""NOT_RESPONDING_WANT_CORE"" , false )"		1094965	1					
ANR	1095117	Callee	param_boolean		1094965	0					
ANR	1095118	Identifier	param_boolean		1094965	0					
ANR	1095119	ArgumentList	"""NOT_RESPONDING_WANT_CORE"""		1094965	1					
ANR	1095120	Argument	"""NOT_RESPONDING_WANT_CORE"""		1094965	0					
ANR	1095121	PrimaryExpression	"""NOT_RESPONDING_WANT_CORE"""		1094965	0					
ANR	1095122	Argument	false		1094965	1					
ANR	1095123	Identifier	false		1094965	0					
ANR	1095124	IfStatement	if ( want_core )		1094965	15					
ANR	1095125	Condition	want_core	10155:5:312562:312570	1094965	0	True				
ANR	1095126	Identifier	want_core		1094965	0					
ANR	1095127	CompoundStatement		67:17:2385:2385	1094965	1					
ANR	1095128	IfStatement	if ( ! first_time )		1094965	0					
ANR	1095129	Condition	! first_time	10161:6:312888:312898	1094965	0	True				
ANR	1095130	UnaryOperationExpression	! first_time		1094965	0					
ANR	1095131	UnaryOperator	!		1094965	0					
ANR	1095132	Identifier	first_time		1094965	1					
ANR	1095133	CompoundStatement		73:20:2713:2713	1094965	1					
ANR	1095134	ExpressionStatement	"dprintf ( D_ALWAYS , ""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"" , hung_child_pid )"	10162:3:312907:313044	1094965	0	True				
ANR	1095135	CallExpression	"dprintf ( D_ALWAYS , ""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"" , hung_child_pid )"		1094965	0					
ANR	1095136	Callee	dprintf		1094965	0					
ANR	1095137	Identifier	dprintf		1094965	0					
ANR	1095138	ArgumentList	D_ALWAYS		1094965	1					
ANR	1095139	Argument	D_ALWAYS		1094965	0					
ANR	1095140	Identifier	D_ALWAYS		1094965	0					
ANR	1095141	Argument	"""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"""		1094965	1					
ANR	1095142	PrimaryExpression	"""Child pid %d is still hung!  Perhaps it hung while generating a core file.  Killing it harder.\\n"""		1094965	0					
ANR	1095143	Argument	hung_child_pid		1094965	2					
ANR	1095144	Identifier	hung_child_pid		1094965	0					
ANR	1095145	ExpressionStatement	want_core = false	10164:3:313049:313066	1094965	1	True				
ANR	1095146	AssignmentExpression	want_core = false		1094965	0		=			
ANR	1095147	Identifier	want_core		1094965	0					
ANR	1095148	Identifier	false		1094965	1					
ANR	1095149	ElseStatement	else		1094965	0					
ANR	1095150	CompoundStatement		79:3:2895:2928	1094965	0					
ANR	1095151	IdentifierDeclStatement	const int want_core_timeout = 600 ;	10167:3:313084:313117	1094965	0	True				
ANR	1095152	IdentifierDecl	want_core_timeout = 600		1094965	0					
ANR	1095153	IdentifierDeclType	const int		1094965	0					
ANR	1095154	Identifier	want_core_timeout		1094965	1					
ANR	1095155	AssignmentExpression	want_core_timeout = 600		1094965	2		=			
ANR	1095156	Identifier	want_core_timeout		1094965	0					
ANR	1095157	PrimaryExpression	600		1094965	1					
ANR	1095158	ExpressionStatement	"pidentry -> hung_tid = Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"	10168:3:313122:313287	1094965	1	True				
ANR	1095159	AssignmentExpression	"pidentry -> hung_tid = Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"		1094965	0		=			
ANR	1095160	PtrMemberAccess	pidentry -> hung_tid		1094965	0					
ANR	1095161	Identifier	pidentry		1094965	0					
ANR	1095162	Identifier	hung_tid		1094965	1					
ANR	1095163	CallExpression	"Register_Timer ( want_core_timeout , ( TimerHandlercpp ) & DaemonCore :: HungChildTimeout , ""DaemonCore::HungChildTimeout"" , this )"		1094965	1					
ANR	1095164	Callee	Register_Timer		1094965	0					
ANR	1095165	Identifier	Register_Timer		1094965	0					
ANR	1095166	ArgumentList	want_core_timeout		1094965	1					
ANR	1095167	Argument	want_core_timeout		1094965	0					
ANR	1095168	Identifier	want_core_timeout		1094965	0					
ANR	1095169	Argument	( TimerHandlercpp ) & DaemonCore :: HungChildTimeout		1094965	1					
ANR	1095170	CastExpression	( TimerHandlercpp ) & DaemonCore :: HungChildTimeout		1094965	0					
ANR	1095171	CastTarget	TimerHandlercpp		1094965	0					
ANR	1095172	UnaryOperationExpression	& DaemonCore :: HungChildTimeout		1094965	1					
ANR	1095173	UnaryOperator	&		1094965	0					
ANR	1095174	Identifier	DaemonCore :: HungChildTimeout		1094965	1					
ANR	1095175	Argument	"""DaemonCore::HungChildTimeout"""		1094965	2					
ANR	1095176	PrimaryExpression	"""DaemonCore::HungChildTimeout"""		1094965	0					
ANR	1095177	Argument	this		1094965	3					
ANR	1095178	Identifier	this		1094965	0					
ANR	1095179	ExpressionStatement	ASSERT ( pidentry -> hung_tid != - 1 )	10172:3:313292:313326	1094965	2	True				
ANR	1095180	CallExpression	ASSERT ( pidentry -> hung_tid != - 1 )		1094965	0					
ANR	1095181	Callee	ASSERT		1094965	0					
ANR	1095182	Identifier	ASSERT		1094965	0					
ANR	1095183	ArgumentList	pidentry -> hung_tid != - 1		1094965	1					
ANR	1095184	Argument	pidentry -> hung_tid != - 1		1094965	0					
ANR	1095185	EqualityExpression	pidentry -> hung_tid != - 1		1094965	0		!=			
ANR	1095186	PtrMemberAccess	pidentry -> hung_tid		1094965	0					
ANR	1095187	Identifier	pidentry		1094965	0					
ANR	1095188	Identifier	hung_tid		1094965	1					
ANR	1095189	UnaryOperationExpression	- 1		1094965	1					
ANR	1095190	UnaryOperator	-		1094965	0					
ANR	1095191	PrimaryExpression	1		1094965	1					
ANR	1095192	ExpressionStatement	Register_DataPtr ( & pidentry -> pid )	10173:3:313331:313365	1094965	3	True				
ANR	1095193	CallExpression	Register_DataPtr ( & pidentry -> pid )		1094965	0					
ANR	1095194	Callee	Register_DataPtr		1094965	0					
ANR	1095195	Identifier	Register_DataPtr		1094965	0					
ANR	1095196	ArgumentList	& pidentry -> pid		1094965	1					
ANR	1095197	Argument	& pidentry -> pid		1094965	0					
ANR	1095198	UnaryOperationExpression	& pidentry -> pid		1094965	0					
ANR	1095199	UnaryOperator	&		1094965	0					
ANR	1095200	PtrMemberAccess	pidentry -> pid		1094965	1					
ANR	1095201	Identifier	pidentry		1094965	0					
ANR	1095202	Identifier	pid		1094965	1					
ANR	1095203	ExpressionStatement	"Shutdown_Fast ( hung_child_pid , want_core )"	10177:1:313382:313423	1094965	16	True				
ANR	1095204	CallExpression	"Shutdown_Fast ( hung_child_pid , want_core )"		1094965	0					
ANR	1095205	Callee	Shutdown_Fast		1094965	0					
ANR	1095206	Identifier	Shutdown_Fast		1094965	0					
ANR	1095207	ArgumentList	hung_child_pid		1094965	1					
ANR	1095208	Argument	hung_child_pid		1094965	0					
ANR	1095209	Identifier	hung_child_pid		1094965	0					
ANR	1095210	Argument	want_core		1094965	1					
ANR	1095211	Identifier	want_core		1094965	0					
ANR	1095212	ReturnStatement	return TRUE ;	10179:1:313427:313438	1094965	17	True				
ANR	1095213	Identifier	TRUE		1094965	0					
ANR	1095214	ReturnType	int		1094965	1					
ANR	1095215	Identifier	DaemonCore :: HungChildTimeout		1094965	2					
ANR	1095216	ParameterList			1094965	3					
ANR	1095217	CFGEntryNode	ENTRY		1094965		True				
ANR	1095218	CFGExitNode	EXIT		1094965		True				
ANR	1095219	Symbol	hung_child_pid		1094965						
ANR	1095220	Symbol	want_core		1094965						
ANR	1095221	Symbol	* pidTable		1094965						
ANR	1095222	Symbol	* pidentry		1094965						
ANR	1095223	Symbol	pidTable -> lookup		1094965						
ANR	1095224	Symbol	first_time		1094965						
ANR	1095225	Symbol	* hung_child_pid_ptr		1094965						
ANR	1095226	Symbol	pidentry		1094965						
ANR	1095227	Symbol	pidTable		1094965						
ANR	1095228	Symbol	want_core_timeout		1094965						
ANR	1095229	Symbol	Register_Timer		1094965						
ANR	1095230	Symbol	false		1094965						
ANR	1095231	Symbol	D_ALWAYS		1094965						
ANR	1095232	Symbol	& DaemonCore :: HungChildTimeout		1094965						
ANR	1095233	Symbol	this		1094965						
ANR	1095234	Symbol	TRUE		1094965						
ANR	1095235	Symbol	GetDataPtr		1094965						
ANR	1095236	Symbol	D_FULLDEBUG		1094965						
ANR	1095237	Symbol	param_boolean		1094965						
ANR	1095238	Symbol	pidentry -> was_not_responding		1094965						
ANR	1095239	Symbol	pidentry -> hung_tid		1094965						
ANR	1095240	Symbol	ProcessExitedButNotReaped		1094965						
ANR	1095241	Symbol	hung_child_pid_ptr		1094965						
ANR	1095242	Symbol	& pidentry -> pid		1094965						
ANR	1095243	Symbol	true		1094965						
ANR	1095244	Symbol	FALSE		1094965						
ANR	1095245	Function	DaemonCore :: Was_Not_Responding	10182:0:313443:313685							
ANR	1095246	FunctionDef	DaemonCore :: Was_Not_Responding (pid_t pid)		1095245	0					
ANR	1095247	CompoundStatement		10183:0:313489:313685	1095245	0					
ANR	1095248	IdentifierDeclStatement	PidEntry * pidentry ;	10184:1:313492:313510	1095245	0	True				
ANR	1095249	IdentifierDecl	* pidentry		1095245	0					
ANR	1095250	IdentifierDeclType	PidEntry *		1095245	0					
ANR	1095251	Identifier	pidentry		1095245	1					
ANR	1095252	IfStatement	"if ( ( pidTable -> lookup ( pid , pidentry ) < 0 ) )"		1095245	1					
ANR	1095253	Condition	"pidTable -> lookup ( pid , pidentry ) < 0"	10186:5:313518:313554	1095245	0	True				
ANR	1095254	RelationalExpression	"pidTable -> lookup ( pid , pidentry ) < 0"		1095245	0		<			
ANR	1095255	CallExpression	"pidTable -> lookup ( pid , pidentry )"		1095245	0					
ANR	1095256	Callee	pidTable -> lookup		1095245	0					
ANR	1095257	PtrMemberAccess	pidTable -> lookup		1095245	0					
ANR	1095258	Identifier	pidTable		1095245	0					
ANR	1095259	Identifier	lookup		1095245	1					
ANR	1095260	ArgumentList	pid		1095245	1					
ANR	1095261	Argument	pid		1095245	0					
ANR	1095262	Identifier	pid		1095245	0					
ANR	1095263	Argument	pidentry		1095245	1					
ANR	1095264	Identifier	pidentry		1095245	0					
ANR	1095265	PrimaryExpression	0		1095245	1					
ANR	1095266	CompoundStatement		4:44:67:67	1095245	1					
ANR	1095267	ReturnStatement	return FALSE ;	10189:2:313629:313641	1095245	0	True				
ANR	1095268	Identifier	FALSE		1095245	0					
ANR	1095269	ReturnStatement	return pidentry -> was_not_responding ;	10192:1:313648:313683	1095245	2	True				
ANR	1095270	PtrMemberAccess	pidentry -> was_not_responding		1095245	0					
ANR	1095271	Identifier	pidentry		1095245	0					
ANR	1095272	Identifier	was_not_responding		1095245	1					
ANR	1095273	ReturnType	int		1095245	1					
ANR	1095274	Identifier	DaemonCore :: Was_Not_Responding		1095245	2					
ANR	1095275	ParameterList	pid_t pid		1095245	3					
ANR	1095276	Parameter	pid_t pid	10182:35:313478:313486	1095245	0	True				
ANR	1095277	ParameterType	pid_t		1095245	0					
ANR	1095278	Identifier	pid		1095245	1					
ANR	1095279	CFGEntryNode	ENTRY		1095245		True				
ANR	1095280	CFGExitNode	EXIT		1095245		True				
ANR	1095281	Symbol	pidTable		1095245						
ANR	1095282	Symbol	pidTable -> lookup		1095245						
ANR	1095283	Symbol	* pidTable		1095245						
ANR	1095284	Symbol	* pidentry		1095245						
ANR	1095285	Symbol	pid		1095245						
ANR	1095286	Symbol	FALSE		1095245						
ANR	1095287	Symbol	pidentry -> was_not_responding		1095245						
ANR	1095288	Symbol	pidentry		1095245						
ANR	1095289	Function	DaemonCore :: SendAliveToParent	10196:0:313689:317358							
ANR	1095290	FunctionDef	DaemonCore :: SendAliveToParent ()		1095289	0					
ANR	1095291	CompoundStatement		10197:0:313725:317358	1095289	0					
ANR	1095292	IdentifierDeclStatement	MyString parent_sinful_string_buf ;	10198:1:313728:313761	1095289	0	True				
ANR	1095293	IdentifierDecl	parent_sinful_string_buf		1095289	0					
ANR	1095294	IdentifierDeclType	MyString		1095289	0					
ANR	1095295	Identifier	parent_sinful_string_buf		1095289	1					
ANR	1095296	IdentifierDeclStatement	char const * parent_sinful_string ;	10199:1:313764:313796	1095289	1	True				
ANR	1095297	IdentifierDecl	* parent_sinful_string		1095289	0					
ANR	1095298	IdentifierDeclType	char const *		1095289	0					
ANR	1095299	Identifier	parent_sinful_string		1095289	1					
ANR	1095300	IdentifierDeclStatement	char const * tmp ;	10200:1:313799:313814	1095289	2	True				
ANR	1095301	IdentifierDecl	* tmp		1095289	0					
ANR	1095302	IdentifierDeclType	char const *		1095289	0					
ANR	1095303	Identifier	tmp		1095289	1					
ANR	1095304	IdentifierDeclStatement	int ret_val ;	10201:1:313817:313828	1095289	3	True				
ANR	1095305	IdentifierDecl	ret_val		1095289	0					
ANR	1095306	IdentifierDeclType	int		1095289	0					
ANR	1095307	Identifier	ret_val		1095289	1					
ANR	1095308	Statement	static	10202:1:313831:313836	1095289	4	True				
ANR	1095309	IdentifierDeclStatement	bool first_time = true ;	10202:8:313838:313860	1095289	5	True				
ANR	1095310	IdentifierDecl	first_time = true		1095289	0					
ANR	1095311	IdentifierDeclType	bool		1095289	0					
ANR	1095312	Identifier	first_time		1095289	1					
ANR	1095313	AssignmentExpression	first_time = true		1095289	2		=			
ANR	1095314	Identifier	true		1095289	0					
ANR	1095315	Identifier	true		1095289	1					
ANR	1095316	IdentifierDeclStatement	int number_of_tries = 3 ;	10203:1:313863:313886	1095289	6	True				
ANR	1095317	IdentifierDecl	number_of_tries = 3		1095289	0					
ANR	1095318	IdentifierDeclType	int		1095289	0					
ANR	1095319	Identifier	number_of_tries		1095289	1					
ANR	1095320	AssignmentExpression	number_of_tries = 3		1095289	2		=			
ANR	1095321	Identifier	number_of_tries		1095289	0					
ANR	1095322	PrimaryExpression	3		1095289	1					
ANR	1095323	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent()\\n"" )"	10205:1:313890:313949	1095289	7	True				
ANR	1095324	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent()\\n"" )"		1095289	0					
ANR	1095325	Callee	dprintf		1095289	0					
ANR	1095326	Identifier	dprintf		1095289	0					
ANR	1095327	ArgumentList	D_FULLDEBUG		1095289	1					
ANR	1095328	Argument	D_FULLDEBUG		1095289	0					
ANR	1095329	Identifier	D_FULLDEBUG		1095289	0					
ANR	1095330	Argument	"""DaemonCore: in SendAliveToParent()\\n"""		1095289	1					
ANR	1095331	PrimaryExpression	"""DaemonCore: in SendAliveToParent()\\n"""		1095289	0					
ANR	1095332	IfStatement	if ( ! ppid )		1095289	8					
ANR	1095333	Condition	! ppid	10207:6:313958:313962	1095289	0	True				
ANR	1095334	UnaryOperationExpression	! ppid		1095289	0					
ANR	1095335	UnaryOperator	!		1095289	0					
ANR	1095336	Identifier	ppid		1095289	1					
ANR	1095337	CompoundStatement		11:14:240:240	1095289	1					
ANR	1095338	ReturnStatement	return FALSE ;	10209:2:314014:314026	1095289	0	True				
ANR	1095339	Identifier	FALSE		1095289	0					
ANR	1095340	IfStatement	if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN ) )		1095289	9					
ANR	1095341	Condition	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )	10219:5:314472:314573	1095289	0	True				
ANR	1095342	OrExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP ) || get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1095289	0		||			
ANR	1095343	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_GAHP )		1095289	0					
ANR	1095344	Callee	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095345	PtrMemberAccess	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095346	CallExpression	get_mySubSystem ( )		1095289	0					
ANR	1095347	Callee	get_mySubSystem		1095289	0					
ANR	1095348	Identifier	get_mySubSystem		1095289	0					
ANR	1095349	ArgumentList			1095289	1					
ANR	1095350	Identifier	isType		1095289	1					
ANR	1095351	ArgumentList	SUBSYSTEM_TYPE_GAHP		1095289	1					
ANR	1095352	Argument	SUBSYSTEM_TYPE_GAHP		1095289	0					
ANR	1095353	Identifier	SUBSYSTEM_TYPE_GAHP		1095289	0					
ANR	1095354	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_DAGMAN )		1095289	1					
ANR	1095355	Callee	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095356	PtrMemberAccess	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095357	CallExpression	get_mySubSystem ( )		1095289	0					
ANR	1095358	Callee	get_mySubSystem		1095289	0					
ANR	1095359	Identifier	get_mySubSystem		1095289	0					
ANR	1095360	ArgumentList			1095289	1					
ANR	1095361	Identifier	isType		1095289	1					
ANR	1095362	ArgumentList	SUBSYSTEM_TYPE_DAGMAN		1095289	1					
ANR	1095363	Argument	SUBSYSTEM_TYPE_DAGMAN		1095289	0					
ANR	1095364	Identifier	SUBSYSTEM_TYPE_DAGMAN		1095289	0					
ANR	1095365	CompoundStatement		25:1:851:851	1095289	1					
ANR	1095366	ReturnStatement	return FALSE ;	10222:2:314581:314593	1095289	0	True				
ANR	1095367	Identifier	FALSE		1095289	0					
ANR	1095368	IfStatement	if ( ! Is_Pid_Alive ( ppid ) )		1095289	10					
ANR	1095369	Condition	! Is_Pid_Alive ( ppid )	10231:6:314914:314932	1095289	0	True				
ANR	1095370	UnaryOperationExpression	! Is_Pid_Alive ( ppid )		1095289	0					
ANR	1095371	UnaryOperator	!		1095289	0					
ANR	1095372	CallExpression	Is_Pid_Alive ( ppid )		1095289	1					
ANR	1095373	Callee	Is_Pid_Alive		1095289	0					
ANR	1095374	Identifier	Is_Pid_Alive		1095289	0					
ANR	1095375	ArgumentList	ppid		1095289	1					
ANR	1095376	Argument	ppid		1095289	0					
ANR	1095377	Identifier	ppid		1095289	0					
ANR	1095378	CompoundStatement		35:28:1210:1210	1095289	1					
ANR	1095379	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"" , ppid )"	10232:2:314940:315036	1095289	0	True				
ANR	1095380	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"" , ppid )"		1095289	0					
ANR	1095381	Callee	dprintf		1095289	0					
ANR	1095382	Identifier	dprintf		1095289	0					
ANR	1095383	ArgumentList	D_FULLDEBUG		1095289	1					
ANR	1095384	Argument	D_FULLDEBUG		1095289	0					
ANR	1095385	Identifier	D_FULLDEBUG		1095289	0					
ANR	1095386	Argument	"""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"""		1095289	1					
ANR	1095387	PrimaryExpression	"""DaemonCore: in SendAliveToParent() - ppid %ul disappeared!\\n"""		1095289	0					
ANR	1095388	Argument	ppid		1095289	2					
ANR	1095389	Identifier	ppid		1095289	0					
ANR	1095390	ReturnStatement	return FALSE ;	10235:2:315040:315052	1095289	1	True				
ANR	1095391	Identifier	FALSE		1095289	0					
ANR	1095392	ExpressionStatement	tmp = InfoCommandSinfulString ( ppid )	10238:1:315059:315094	1095289	11	True				
ANR	1095393	AssignmentExpression	tmp = InfoCommandSinfulString ( ppid )		1095289	0		=			
ANR	1095394	Identifier	tmp		1095289	0					
ANR	1095395	CallExpression	InfoCommandSinfulString ( ppid )		1095289	1					
ANR	1095396	Callee	InfoCommandSinfulString		1095289	0					
ANR	1095397	Identifier	InfoCommandSinfulString		1095289	0					
ANR	1095398	ArgumentList	ppid		1095289	1					
ANR	1095399	Argument	ppid		1095289	0					
ANR	1095400	Identifier	ppid		1095289	0					
ANR	1095401	IfStatement	if ( tmp )		1095289	12					
ANR	1095402	Condition	tmp	10239:6:315102:315104	1095289	0	True				
ANR	1095403	Identifier	tmp		1095289	0					
ANR	1095404	CompoundStatement		43:12:1382:1382	1095289	1					
ANR	1095405	ExpressionStatement	parent_sinful_string_buf = tmp	10242:2:315221:315251	1095289	0	True				
ANR	1095406	AssignmentExpression	parent_sinful_string_buf = tmp		1095289	0		=			
ANR	1095407	Identifier	parent_sinful_string_buf		1095289	0					
ANR	1095408	Identifier	tmp		1095289	1					
ANR	1095409	ExpressionStatement	parent_sinful_string = parent_sinful_string_buf . Value ( )	10243:2:315255:315310	1095289	1	True				
ANR	1095410	AssignmentExpression	parent_sinful_string = parent_sinful_string_buf . Value ( )		1095289	0		=			
ANR	1095411	Identifier	parent_sinful_string		1095289	0					
ANR	1095412	CallExpression	parent_sinful_string_buf . Value ( )		1095289	1					
ANR	1095413	Callee	parent_sinful_string_buf . Value		1095289	0					
ANR	1095414	MemberAccess	parent_sinful_string_buf . Value		1095289	0					
ANR	1095415	Identifier	parent_sinful_string_buf		1095289	0					
ANR	1095416	Identifier	Value		1095289	1					
ANR	1095417	ArgumentList			1095289	1					
ANR	1095418	ElseStatement	else		1095289	0					
ANR	1095419	CompoundStatement		48:8:1594:1594	1095289	0					
ANR	1095420	Statement	dprintf	10245:2:315324:315330	1095289	0	True				
ANR	1095421	Statement	(	10245:9:315331:315331	1095289	1	True				
ANR	1095422	Statement	D_FULLDEBUG	10245:10:315332:315342	1095289	2	True				
ANR	1095423	Statement	","	10245:21:315343:315343	1095289	3	True				
ANR	1095424	Statement	"""DaemonCore: No parent_sinful_string. """	10245:22:315344:315382	1095289	4	True				
ANR	1095425	Statement	"""SendAliveToParent() failed.\\n"""	10246:3:315387:315417	1095289	5	True				
ANR	1095426	Statement	)	10246:34:315418:315418	1095289	6	True				
ANR	1095427	ExpressionStatement		10246:35:315419:315419	1095289	7	True				
ANR	1095428	ReturnStatement	return FALSE ;	10248:2:315450:315462	1095289	8	True				
ANR	1095429	Identifier	FALSE		1095289	0					
ANR	1095430	IfStatement	"if ( get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false ) )"		1095289	13					
ANR	1095431	Condition	"get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false )"	10257:6:315841:315935	1095289	0	True				
ANR	1095432	AndExpression	"get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER ) && param_boolean ( ""GLEXEC_STARTER"" , false )"		1095289	0		&&			
ANR	1095433	CallExpression	get_mySubSystem ( ) -> isType ( SUBSYSTEM_TYPE_STARTER )		1095289	0					
ANR	1095434	Callee	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095435	PtrMemberAccess	get_mySubSystem ( ) -> isType		1095289	0					
ANR	1095436	CallExpression	get_mySubSystem ( )		1095289	0					
ANR	1095437	Callee	get_mySubSystem		1095289	0					
ANR	1095438	Identifier	get_mySubSystem		1095289	0					
ANR	1095439	ArgumentList			1095289	1					
ANR	1095440	Identifier	isType		1095289	1					
ANR	1095441	ArgumentList	SUBSYSTEM_TYPE_STARTER		1095289	1					
ANR	1095442	Argument	SUBSYSTEM_TYPE_STARTER		1095289	0					
ANR	1095443	Identifier	SUBSYSTEM_TYPE_STARTER		1095289	0					
ANR	1095444	CallExpression	"param_boolean ( ""GLEXEC_STARTER"" , false )"		1095289	1					
ANR	1095445	Callee	param_boolean		1095289	0					
ANR	1095446	Identifier	param_boolean		1095289	0					
ANR	1095447	ArgumentList	"""GLEXEC_STARTER"""		1095289	1					
ANR	1095448	Argument	"""GLEXEC_STARTER"""		1095289	0					
ANR	1095449	PrimaryExpression	"""GLEXEC_STARTER"""		1095289	0					
ANR	1095450	Argument	false		1095289	1					
ANR	1095451	Identifier	false		1095289	0					
ANR	1095452	CompoundStatement		63:1:2214:2214	1095289	1					
ANR	1095453	ExpressionStatement	first_time = false	10260:2:315944:315962	1095289	0	True				
ANR	1095454	AssignmentExpression	first_time = false		1095289	0		=			
ANR	1095455	Identifier	first_time		1095289	0					
ANR	1095456	Identifier	false		1095289	1					
ANR	1095457	IdentifierDeclStatement	double dprintf_lock_delay = dprintf_get_lock_delay ( ) ;	10263:1:315969:316021	1095289	14	True				
ANR	1095458	IdentifierDecl	dprintf_lock_delay = dprintf_get_lock_delay ( )		1095289	0					
ANR	1095459	IdentifierDeclType	double		1095289	0					
ANR	1095460	Identifier	dprintf_lock_delay		1095289	1					
ANR	1095461	AssignmentExpression	dprintf_lock_delay = dprintf_get_lock_delay ( )		1095289	2		=			
ANR	1095462	Identifier	dprintf_lock_delay		1095289	0					
ANR	1095463	CallExpression	dprintf_get_lock_delay ( )		1095289	1					
ANR	1095464	Callee	dprintf_get_lock_delay		1095289	0					
ANR	1095465	Identifier	dprintf_get_lock_delay		1095289	0					
ANR	1095466	ArgumentList			1095289	1					
ANR	1095467	ExpressionStatement	dprintf_reset_lock_delay ( )	10264:1:316024:316050	1095289	15	True				
ANR	1095468	CallExpression	dprintf_reset_lock_delay ( )		1095289	0					
ANR	1095469	Callee	dprintf_reset_lock_delay		1095289	0					
ANR	1095470	Identifier	dprintf_reset_lock_delay		1095289	0					
ANR	1095471	ArgumentList			1095289	1					
ANR	1095472	IdentifierDeclStatement	bool blocking = first_time ;	10266:1:316054:316080	1095289	16	True				
ANR	1095473	IdentifierDecl	blocking = first_time		1095289	0					
ANR	1095474	IdentifierDeclType	bool		1095289	0					
ANR	1095475	Identifier	blocking		1095289	1					
ANR	1095476	AssignmentExpression	blocking = first_time		1095289	2		=			
ANR	1095477	Identifier	first_time		1095289	0					
ANR	1095478	Identifier	first_time		1095289	1					
ANR	1095479	IdentifierDeclStatement	"classy_counted_ptr < Daemon > d = new Daemon ( DT_ANY , parent_sinful_string ) ;"	10267:1:316083:316153	1095289	17	True				
ANR	1095480	IdentifierDecl	"d = new Daemon ( DT_ANY , parent_sinful_string )"		1095289	0					
ANR	1095481	IdentifierDeclType	classy_counted_ptr < Daemon >		1095289	0					
ANR	1095482	Identifier	d		1095289	1					
ANR	1095483	AssignmentExpression	"d = new Daemon ( DT_ANY , parent_sinful_string )"		1095289	2		=			
ANR	1095484	Identifier	d		1095289	0					
ANR	1095485	Expression	"DT_ANY , parent_sinful_string"		1095289	1					
ANR	1095486	Identifier	DT_ANY		1095289	0					
ANR	1095487	Identifier	parent_sinful_string		1095289	1					
ANR	1095488	IdentifierDeclStatement	"classy_counted_ptr < ChildAliveMsg > msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking ) ;"	10268:1:316156:316278	1095289	18	True				
ANR	1095489	IdentifierDecl	"msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking )"		1095289	0					
ANR	1095490	IdentifierDeclType	classy_counted_ptr < ChildAliveMsg >		1095289	0					
ANR	1095491	Identifier	msg		1095289	1					
ANR	1095492	AssignmentExpression	"msg = new ChildAliveMsg ( mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking )"		1095289	2		=			
ANR	1095493	Identifier	msg		1095289	0					
ANR	1095494	Expression	"mypid , max_hang_time , number_of_tries , dprintf_lock_delay , blocking"		1095289	1					
ANR	1095495	Identifier	mypid		1095289	0					
ANR	1095496	Expression	"max_hang_time , number_of_tries , dprintf_lock_delay , blocking"		1095289	1					
ANR	1095497	Identifier	max_hang_time		1095289	0					
ANR	1095498	Expression	"number_of_tries , dprintf_lock_delay , blocking"		1095289	1					
ANR	1095499	Identifier	number_of_tries		1095289	0					
ANR	1095500	Expression	"dprintf_lock_delay , blocking"		1095289	1					
ANR	1095501	Identifier	dprintf_lock_delay		1095289	0					
ANR	1095502	Identifier	blocking		1095289	1					
ANR	1095503	IdentifierDeclStatement	int timeout = m_child_alive_period / number_of_tries ;	10270:1:316282:316334	1095289	19	True				
ANR	1095504	IdentifierDecl	timeout = m_child_alive_period / number_of_tries		1095289	0					
ANR	1095505	IdentifierDeclType	int		1095289	0					
ANR	1095506	Identifier	timeout		1095289	1					
ANR	1095507	AssignmentExpression	timeout = m_child_alive_period / number_of_tries		1095289	2		=			
ANR	1095508	Identifier	timeout		1095289	0					
ANR	1095509	MultiplicativeExpression	m_child_alive_period / number_of_tries		1095289	1		/			
ANR	1095510	Identifier	m_child_alive_period		1095289	0					
ANR	1095511	Identifier	number_of_tries		1095289	1					
ANR	1095512	IfStatement	if ( timeout < 60 )		1095289	20					
ANR	1095513	Condition	timeout < 60	10271:5:316341:316352	1095289	0	True				
ANR	1095514	RelationalExpression	timeout < 60		1095289	0		<			
ANR	1095515	Identifier	timeout		1095289	0					
ANR	1095516	PrimaryExpression	60		1095289	1					
ANR	1095517	CompoundStatement		75:20:2630:2630	1095289	1					
ANR	1095518	ExpressionStatement	timeout = 60	10272:2:316360:316372	1095289	0	True				
ANR	1095519	AssignmentExpression	timeout = 60		1095289	0		=			
ANR	1095520	Identifier	timeout		1095289	0					
ANR	1095521	PrimaryExpression	60		1095289	1					
ANR	1095522	ExpressionStatement	msg -> setDeadlineTimeout ( timeout )	10274:1:316379:316413	1095289	21	True				
ANR	1095523	CallExpression	msg -> setDeadlineTimeout ( timeout )		1095289	0					
ANR	1095524	Callee	msg -> setDeadlineTimeout		1095289	0					
ANR	1095525	PtrMemberAccess	msg -> setDeadlineTimeout		1095289	0					
ANR	1095526	Identifier	msg		1095289	0					
ANR	1095527	Identifier	setDeadlineTimeout		1095289	1					
ANR	1095528	ArgumentList	timeout		1095289	1					
ANR	1095529	Argument	timeout		1095289	0					
ANR	1095530	Identifier	timeout		1095289	0					
ANR	1095531	ExpressionStatement	msg -> setTimeout ( timeout )	10275:1:316416:316442	1095289	22	True				
ANR	1095532	CallExpression	msg -> setTimeout ( timeout )		1095289	0					
ANR	1095533	Callee	msg -> setTimeout		1095289	0					
ANR	1095534	PtrMemberAccess	msg -> setTimeout		1095289	0					
ANR	1095535	Identifier	msg		1095289	0					
ANR	1095536	Identifier	setTimeout		1095289	1					
ANR	1095537	ArgumentList	timeout		1095289	1					
ANR	1095538	Argument	timeout		1095289	0					
ANR	1095539	Identifier	timeout		1095289	0					
ANR	1095540	IfStatement	if ( blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp )		1095289	23					
ANR	1095541	Condition	blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp	10277:5:316450:316503	1095289	0	True				
ANR	1095542	OrExpression	blocking || ! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp		1095289	0		||			
ANR	1095543	Identifier	blocking		1095289	0					
ANR	1095544	OrExpression	! d -> hasUDPCommandPort ( ) || ! m_wants_dc_udp		1095289	1		||			
ANR	1095545	UnaryOperationExpression	! d -> hasUDPCommandPort ( )		1095289	0					
ANR	1095546	UnaryOperator	!		1095289	0					
ANR	1095547	CallExpression	d -> hasUDPCommandPort ( )		1095289	1					
ANR	1095548	Callee	d -> hasUDPCommandPort		1095289	0					
ANR	1095549	PtrMemberAccess	d -> hasUDPCommandPort		1095289	0					
ANR	1095550	Identifier	d		1095289	0					
ANR	1095551	Identifier	hasUDPCommandPort		1095289	1					
ANR	1095552	ArgumentList			1095289	1					
ANR	1095553	UnaryOperationExpression	! m_wants_dc_udp		1095289	1					
ANR	1095554	UnaryOperator	!		1095289	0					
ANR	1095555	Identifier	m_wants_dc_udp		1095289	1					
ANR	1095556	CompoundStatement		81:62:2781:2781	1095289	1					
ANR	1095557	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	10278:2:316511:316550	1095289	0	True				
ANR	1095558	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		1095289	0					
ANR	1095559	Callee	msg -> setStreamType		1095289	0					
ANR	1095560	PtrMemberAccess	msg -> setStreamType		1095289	0					
ANR	1095561	Identifier	msg		1095289	0					
ANR	1095562	Identifier	setStreamType		1095289	1					
ANR	1095563	ArgumentList	Stream :: reli_sock		1095289	1					
ANR	1095564	Argument	Stream :: reli_sock		1095289	0					
ANR	1095565	Identifier	Stream :: reli_sock		1095289	0					
ANR	1095566	ElseStatement	else		1095289	0					
ANR	1095567	CompoundStatement		84:6:2837:2837	1095289	0					
ANR	1095568	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	10281:2:316567:316606	1095289	0	True				
ANR	1095569	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		1095289	0					
ANR	1095570	Callee	msg -> setStreamType		1095289	0					
ANR	1095571	PtrMemberAccess	msg -> setStreamType		1095289	0					
ANR	1095572	Identifier	msg		1095289	0					
ANR	1095573	Identifier	setStreamType		1095289	1					
ANR	1095574	ArgumentList	Stream :: safe_sock		1095289	1					
ANR	1095575	Argument	Stream :: safe_sock		1095289	0					
ANR	1095576	Identifier	Stream :: safe_sock		1095289	0					
ANR	1095577	IfStatement	if ( blocking )		1095289	24					
ANR	1095578	Condition	blocking	10284:5:316618:316625	1095289	0	True				
ANR	1095579	Identifier	blocking		1095289	0					
ANR	1095580	CompoundStatement		88:16:2903:2903	1095289	1					
ANR	1095581	ExpressionStatement	d -> sendBlockingMsg ( msg . get ( ) )	10285:2:316633:316664	1095289	0	True				
ANR	1095582	CallExpression	d -> sendBlockingMsg ( msg . get ( ) )		1095289	0					
ANR	1095583	Callee	d -> sendBlockingMsg		1095289	0					
ANR	1095584	PtrMemberAccess	d -> sendBlockingMsg		1095289	0					
ANR	1095585	Identifier	d		1095289	0					
ANR	1095586	Identifier	sendBlockingMsg		1095289	1					
ANR	1095587	ArgumentList	msg . get ( )		1095289	1					
ANR	1095588	Argument	msg . get ( )		1095289	0					
ANR	1095589	CallExpression	msg . get ( )		1095289	0					
ANR	1095590	Callee	msg . get		1095289	0					
ANR	1095591	MemberAccess	msg . get		1095289	0					
ANR	1095592	Identifier	msg		1095289	0					
ANR	1095593	Identifier	get		1095289	1					
ANR	1095594	ArgumentList			1095289	1					
ANR	1095595	ExpressionStatement	ret_val = msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED	10286:2:316668:316728	1095289	1	True				
ANR	1095596	AssignmentExpression	ret_val = msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		1095289	0		=			
ANR	1095597	Identifier	ret_val		1095289	0					
ANR	1095598	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		1095289	1		==			
ANR	1095599	CallExpression	msg -> deliveryStatus ( )		1095289	0					
ANR	1095600	Callee	msg -> deliveryStatus		1095289	0					
ANR	1095601	PtrMemberAccess	msg -> deliveryStatus		1095289	0					
ANR	1095602	Identifier	msg		1095289	0					
ANR	1095603	Identifier	deliveryStatus		1095289	1					
ANR	1095604	ArgumentList			1095289	1					
ANR	1095605	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1095289	1					
ANR	1095606	ElseStatement	else		1095289	0					
ANR	1095607	CompoundStatement		92:6:3015:3015	1095289	0					
ANR	1095608	ExpressionStatement	d -> sendMsg ( msg . get ( ) )	10289:2:316745:316768	1095289	0	True				
ANR	1095609	CallExpression	d -> sendMsg ( msg . get ( ) )		1095289	0					
ANR	1095610	Callee	d -> sendMsg		1095289	0					
ANR	1095611	PtrMemberAccess	d -> sendMsg		1095289	0					
ANR	1095612	Identifier	d		1095289	0					
ANR	1095613	Identifier	sendMsg		1095289	1					
ANR	1095614	ArgumentList	msg . get ( )		1095289	1					
ANR	1095615	Argument	msg . get ( )		1095289	0					
ANR	1095616	CallExpression	msg . get ( )		1095289	0					
ANR	1095617	Callee	msg . get		1095289	0					
ANR	1095618	MemberAccess	msg . get		1095289	0					
ANR	1095619	Identifier	msg		1095289	0					
ANR	1095620	Identifier	get		1095289	1					
ANR	1095621	ArgumentList			1095289	1					
ANR	1095622	ExpressionStatement	ret_val = TRUE	10290:2:316772:316786	1095289	1	True				
ANR	1095623	AssignmentExpression	ret_val = TRUE		1095289	0		=			
ANR	1095624	Identifier	ret_val		1095289	0					
ANR	1095625	Identifier	TRUE		1095289	1					
ANR	1095626	IfStatement	if ( first_time )		1095289	25					
ANR	1095627	Condition	first_time	10293:6:316799:316808	1095289	0	True				
ANR	1095628	Identifier	first_time		1095289	0					
ANR	1095629	CompoundStatement		97:19:3086:3086	1095289	1					
ANR	1095630	ExpressionStatement	first_time = false	10294:2:316816:316834	1095289	0	True				
ANR	1095631	AssignmentExpression	first_time = false		1095289	0		=			
ANR	1095632	Identifier	first_time		1095289	0					
ANR	1095633	Identifier	false		1095289	1					
ANR	1095634	IfStatement	if ( ret_val == FALSE )		1095289	1					
ANR	1095635	Condition	ret_val == FALSE	10295:7:316843:316858	1095289	0	True				
ANR	1095636	EqualityExpression	ret_val == FALSE		1095289	0		==			
ANR	1095637	Identifier	ret_val		1095289	0					
ANR	1095638	Identifier	FALSE		1095289	1					
ANR	1095639	CompoundStatement		99:26:3136:3136	1095289	1					
ANR	1095640	ExpressionStatement	"EXCEPT ( ""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"" , parent_sinful_string )"	10296:3:316867:316953	1095289	0	True				
ANR	1095641	CallExpression	"EXCEPT ( ""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"" , parent_sinful_string )"		1095289	0					
ANR	1095642	Callee	EXCEPT		1095289	0					
ANR	1095643	Identifier	EXCEPT		1095289	0					
ANR	1095644	ArgumentList	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		1095289	1					
ANR	1095645	Argument	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		1095289	0					
ANR	1095646	PrimaryExpression	"""FAILED TO SEND INITIAL KEEP ALIVE TO OUR PARENT %s"""		1095289	0					
ANR	1095647	Argument	parent_sinful_string		1095289	1					
ANR	1095648	Identifier	parent_sinful_string		1095289	0					
ANR	1095649	IfStatement	if ( ret_val == FALSE )		1095289	26					
ANR	1095650	Condition	ret_val == FALSE	10301:5:316968:316983	1095289	0	True				
ANR	1095651	EqualityExpression	ret_val == FALSE		1095289	0		==			
ANR	1095652	Identifier	ret_val		1095289	0					
ANR	1095653	Identifier	FALSE		1095289	1					
ANR	1095654	CompoundStatement		105:23:3260:3260	1095289	1					
ANR	1095655	Statement	dprintf	10302:2:316990:316996	1095289	0	True				
ANR	1095656	Statement	(	10302:9:316997:316997	1095289	1	True				
ANR	1095657	Statement	D_ALWAYS	10302:10:316998:317005	1095289	2	True				
ANR	1095658	Statement	","	10302:18:317006:317006	1095289	3	True				
ANR	1095659	Statement	"""DaemonCore: Leaving SendAliveToParent() - """	10302:19:317007:317050	1095289	4	True				
ANR	1095660	Statement	"""FAILED sending to %s\\n"""	10303:3:317055:317078	1095289	5	True				
ANR	1095661	Statement	","	10303:27:317079:317079	1095289	6	True				
ANR	1095662	Statement	parent_sinful_string	10304:3:317084:317103	1095289	7	True				
ANR	1095663	Statement	)	10304:23:317104:317104	1095289	8	True				
ANR	1095664	ExpressionStatement		10304:24:317105:317105	1095289	9	True				
ANR	1095665	ElseStatement	else		1095289	0					
ANR	1095666	IfStatement	if ( msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED )		1095289	0					
ANR	1095667	Condition	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED	10305:12:317119:317168	1095289	0	True				
ANR	1095668	EqualityExpression	msg -> deliveryStatus ( ) == DCMsg :: DELIVERY_SUCCEEDED		1095289	0		==			
ANR	1095669	CallExpression	msg -> deliveryStatus ( )		1095289	0					
ANR	1095670	Callee	msg -> deliveryStatus		1095289	0					
ANR	1095671	PtrMemberAccess	msg -> deliveryStatus		1095289	0					
ANR	1095672	Identifier	msg		1095289	0					
ANR	1095673	Identifier	deliveryStatus		1095289	1					
ANR	1095674	ArgumentList			1095289	1					
ANR	1095675	Identifier	DCMsg :: DELIVERY_SUCCEEDED		1095289	1					
ANR	1095676	CompoundStatement		109:65:3446:3446	1095289	1					
ANR	1095677	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - success\\n"" )"	10306:2:317176:317250	1095289	0	True				
ANR	1095678	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - success\\n"" )"		1095289	0					
ANR	1095679	Callee	dprintf		1095289	0					
ANR	1095680	Identifier	dprintf		1095289	0					
ANR	1095681	ArgumentList	D_FULLDEBUG		1095289	1					
ANR	1095682	Argument	D_FULLDEBUG		1095289	0					
ANR	1095683	Identifier	D_FULLDEBUG		1095289	0					
ANR	1095684	Argument	"""DaemonCore: Leaving SendAliveToParent() - success\\n"""		1095289	1					
ANR	1095685	PrimaryExpression	"""DaemonCore: Leaving SendAliveToParent() - success\\n"""		1095289	0					
ANR	1095686	ElseStatement	else		1095289	0					
ANR	1095687	CompoundStatement		111:8:3534:3534	1095289	0					
ANR	1095688	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - pending\\n"" )"	10308:2:317264:317338	1095289	0	True				
ANR	1095689	CallExpression	"dprintf ( D_FULLDEBUG , ""DaemonCore: Leaving SendAliveToParent() - pending\\n"" )"		1095289	0					
ANR	1095690	Callee	dprintf		1095289	0					
ANR	1095691	Identifier	dprintf		1095289	0					
ANR	1095692	ArgumentList	D_FULLDEBUG		1095289	1					
ANR	1095693	Argument	D_FULLDEBUG		1095289	0					
ANR	1095694	Identifier	D_FULLDEBUG		1095289	0					
ANR	1095695	Argument	"""DaemonCore: Leaving SendAliveToParent() - pending\\n"""		1095289	1					
ANR	1095696	PrimaryExpression	"""DaemonCore: Leaving SendAliveToParent() - pending\\n"""		1095289	0					
ANR	1095697	ReturnStatement	return TRUE ;	10311:1:317345:317356	1095289	27	True				
ANR	1095698	Identifier	TRUE		1095289	0					
ANR	1095699	ReturnType	int		1095289	1					
ANR	1095700	Identifier	DaemonCore :: SendAliveToParent		1095289	2					
ANR	1095701	ParameterList			1095289	3					
ANR	1095702	CFGEntryNode	ENTRY		1095289		True				
ANR	1095703	CFGExitNode	EXIT		1095289		True				
ANR	1095704	Symbol	msg		1095289						
ANR	1095705	Symbol	msg -> deliveryStatus		1095289						
ANR	1095706	Symbol	Stream :: safe_sock		1095289						
ANR	1095707	Symbol	DT_ANY		1095289						
ANR	1095708	Symbol	timeout		1095289						
ANR	1095709	Symbol	InfoCommandSinfulString		1095289						
ANR	1095710	Symbol	Is_Pid_Alive		1095289						
ANR	1095711	Symbol	max_hang_time		1095289						
ANR	1095712	Symbol	SUBSYSTEM_TYPE_DAGMAN		1095289						
ANR	1095713	Symbol	tmp		1095289						
ANR	1095714	Symbol	first_time		1095289						
ANR	1095715	Symbol	blocking		1095289						
ANR	1095716	Symbol	d -> hasUDPCommandPort		1095289						
ANR	1095717	Symbol	m_wants_dc_udp		1095289						
ANR	1095718	Symbol	Stream :: reli_sock		1095289						
ANR	1095719	Symbol	msg . get		1095289						
ANR	1095720	Symbol	parent_sinful_string_buf . Value		1095289						
ANR	1095721	Symbol	parent_sinful_string		1095289						
ANR	1095722	Symbol	m_child_alive_period		1095289						
ANR	1095723	Symbol	get_mySubSystem ( ) -> isType		1095289						
ANR	1095724	Symbol	d		1095289						
ANR	1095725	Symbol	* get_mySubSystem		1095289						
ANR	1095726	Symbol	dprintf_lock_delay		1095289						
ANR	1095727	Symbol	dprintf_get_lock_delay		1095289						
ANR	1095728	Symbol	mypid		1095289						
ANR	1095729	Symbol	false		1095289						
ANR	1095730	Symbol	TRUE		1095289						
ANR	1095731	Symbol	D_FULLDEBUG		1095289						
ANR	1095732	Symbol	param_boolean		1095289						
ANR	1095733	Symbol	* msg		1095289						
ANR	1095734	Symbol	ret_val		1095289						
ANR	1095735	Symbol	SUBSYSTEM_TYPE_STARTER		1095289						
ANR	1095736	Symbol	* d		1095289						
ANR	1095737	Symbol	ppid		1095289						
ANR	1095738	Symbol	number_of_tries		1095289						
ANR	1095739	Symbol	DCMsg :: DELIVERY_SUCCEEDED		1095289						
ANR	1095740	Symbol	parent_sinful_string_buf		1095289						
ANR	1095741	Symbol	true		1095289						
ANR	1095742	Symbol	FALSE		1095289						
ANR	1095743	Symbol	get_mySubSystem		1095289						
ANR	1095744	Symbol	SUBSYSTEM_TYPE_GAHP		1095289						
ANR	1095745	Function	DaemonCore :: ParseArgsString	10315:0:317375:318322							
ANR	1095746	FunctionDef	DaemonCore :: ParseArgsString (const char * str)		1095745	0					
ANR	1095747	CompoundStatement		10316:0:317427:318322	1095745	0					
ANR	1095748	IdentifierDeclStatement	"char separator1 , separator2 ;"	10317:1:317430:317457	1095745	0	True				
ANR	1095749	IdentifierDecl	separator1		1095745	0					
ANR	1095750	IdentifierDeclType	char		1095745	0					
ANR	1095751	Identifier	separator1		1095745	1					
ANR	1095752	IdentifierDecl	separator2		1095745	1					
ANR	1095753	IdentifierDeclType	char		1095745	0					
ANR	1095754	Identifier	separator2		1095745	1					
ANR	1095755	IdentifierDeclStatement	int maxlength ;	10318:1:317460:317473	1095745	1	True				
ANR	1095756	IdentifierDecl	maxlength		1095745	0					
ANR	1095757	IdentifierDeclType	int		1095745	0					
ANR	1095758	Identifier	maxlength		1095745	1					
ANR	1095759	IdentifierDeclStatement	"char * * argv , * arg ;"	10319:1:317476:317493	1095745	2	True				
ANR	1095760	IdentifierDecl	* * argv		1095745	0					
ANR	1095761	IdentifierDeclType	char * *		1095745	0					
ANR	1095762	Identifier	argv		1095745	1					
ANR	1095763	IdentifierDecl	* arg		1095745	1					
ANR	1095764	IdentifierDeclType	char *		1095745	0					
ANR	1095765	Identifier	arg		1095745	1					
ANR	1095766	IdentifierDeclStatement	int nargs = 0 ;	10320:1:317496:317507	1095745	3	True				
ANR	1095767	IdentifierDecl	nargs = 0		1095745	0					
ANR	1095768	IdentifierDeclType	int		1095745	0					
ANR	1095769	Identifier	nargs		1095745	1					
ANR	1095770	AssignmentExpression	nargs = 0		1095745	2		=			
ANR	1095771	Identifier	nargs		1095745	0					
ANR	1095772	PrimaryExpression	0		1095745	1					
ANR	1095773	ExpressionStatement	separator1 = ' '	10322:1:317511:317527	1095745	4	True				
ANR	1095774	AssignmentExpression	separator1 = ' '		1095745	0		=			
ANR	1095775	Identifier	separator1		1095745	0					
ANR	1095776	PrimaryExpression	' '		1095745	1					
ANR	1095777	ExpressionStatement	separator2 = '\\t'	10323:1:317530:317547	1095745	5	True				
ANR	1095778	AssignmentExpression	separator2 = '\\t'		1095745	0		=			
ANR	1095779	Identifier	separator2		1095745	0					
ANR	1095780	PrimaryExpression	'\\t'		1095745	1					
ANR	1095781	ExpressionStatement	maxlength = strlen ( str ) + 1	10331:1:317715:317740	1095745	6	True				
ANR	1095782	AssignmentExpression	maxlength = strlen ( str ) + 1		1095745	0		=			
ANR	1095783	Identifier	maxlength		1095745	0					
ANR	1095784	AdditiveExpression	strlen ( str ) + 1		1095745	1		+			
ANR	1095785	CallExpression	strlen ( str )		1095745	0					
ANR	1095786	Callee	strlen		1095745	0					
ANR	1095787	Identifier	strlen		1095745	0					
ANR	1095788	ArgumentList	str		1095745	1					
ANR	1095789	Argument	str		1095745	0					
ANR	1095790	Identifier	str		1095745	0					
ANR	1095791	PrimaryExpression	1		1095745	1					
ANR	1095792	Statement	argv	10333:1:317744:317747	1095745	7	True				
ANR	1095793	Statement	=	10333:6:317749:317749	1095745	8	True				
ANR	1095794	Statement	new	10333:8:317751:317753	1095745	9	True				
ANR	1095795	Statement	char	10333:12:317755:317758	1095745	10	True				
ANR	1095796	Statement	*	10333:16:317759:317759	1095745	11	True				
ANR	1095797	Statement	[	10333:17:317760:317760	1095745	12	True				
ANR	1095798	Statement	maxlength	10333:18:317761:317769	1095745	13	True				
ANR	1095799	Statement	]	10333:27:317770:317770	1095745	14	True				
ANR	1095800	ExpressionStatement		10333:28:317771:317771	1095745	15	True				
ANR	1095801	WhileStatement	while ( * str )		1095745	16					
ANR	1095802	Condition	* str	10336:7:317823:317826	1095745	0	True				
ANR	1095803	UnaryOperationExpression	* str		1095745	0					
ANR	1095804	UnaryOperator	*		1095745	0					
ANR	1095805	Identifier	str		1095745	1					
ANR	1095806	CompoundStatement		21:13:401:401	1095745	1					
ANR	1095807	WhileStatement	while ( * str == separator1 || * str == separator2 )		1095745	0					
ANR	1095808	Condition	* str == separator1 || * str == separator2	10338:9:317885:317924	1095745	0	True				
ANR	1095809	OrExpression	* str == separator1 || * str == separator2		1095745	0		||			
ANR	1095810	EqualityExpression	* str == separator1		1095745	0		==			
ANR	1095811	UnaryOperationExpression	* str		1095745	0					
ANR	1095812	UnaryOperator	*		1095745	0					
ANR	1095813	Identifier	str		1095745	1					
ANR	1095814	Identifier	separator1		1095745	1					
ANR	1095815	EqualityExpression	* str == separator2		1095745	1		==			
ANR	1095816	UnaryOperationExpression	* str		1095745	0					
ANR	1095817	UnaryOperator	*		1095745	0					
ANR	1095818	Identifier	str		1095745	1					
ANR	1095819	Identifier	separator2		1095745	1					
ANR	1095820	CompoundStatement		23:52:500:500	1095745	1					
ANR	1095821	ExpressionStatement	str ++	10339:3:317933:317938	1095745	0	True				
ANR	1095822	PostIncDecOperationExpression	str ++		1095745	0					
ANR	1095823	Identifier	str		1095745	0					
ANR	1095824	IncDec	++		1095745	1					
ANR	1095825	IfStatement	if ( * str )		1095745	1					
ANR	1095826	Condition	* str	10343:5:317986:317989	1095745	0	True				
ANR	1095827	UnaryOperationExpression	* str		1095745	0					
ANR	1095828	UnaryOperator	*		1095745	0					
ANR	1095829	Identifier	str		1095745	1					
ANR	1095830	CompoundStatement		28:11:564:564	1095745	1					
ANR	1095831	ExpressionStatement	argv [ nargs ] = new char [ maxlength ]	10346:3:318029:318062	1095745	0	True				
ANR	1095832	AssignmentExpression	argv [ nargs ] = new char [ maxlength ]		1095745	0		=			
ANR	1095833	ArrayIndexing	argv [ nargs ]		1095745	0					
ANR	1095834	Identifier	argv		1095745	0					
ANR	1095835	Identifier	nargs		1095745	1					
ANR	1095836	Identifier	maxlength		1095745	1					
ANR	1095837	ExpressionStatement	arg = argv [ nargs ]	10349:3:318110:318127	1095745	1	True				
ANR	1095838	AssignmentExpression	arg = argv [ nargs ]		1095745	0		=			
ANR	1095839	Identifier	arg		1095745	0					
ANR	1095840	ArrayIndexing	argv [ nargs ]		1095745	1					
ANR	1095841	Identifier	argv		1095745	0					
ANR	1095842	Identifier	nargs		1095745	1					
ANR	1095843	WhileStatement	while ( * str && * str != separator1 && * str != separator2 )		1095745	2					
ANR	1095844	Condition	* str && * str != separator1 && * str != separator2	10350:10:318139:318186	1095745	0	True				
ANR	1095845	AndExpression	* str && * str != separator1 && * str != separator2		1095745	0		&&			
ANR	1095846	UnaryOperationExpression	* str		1095745	0					
ANR	1095847	UnaryOperator	*		1095745	0					
ANR	1095848	Identifier	str		1095745	1					
ANR	1095849	AndExpression	* str != separator1 && * str != separator2		1095745	1		&&			
ANR	1095850	EqualityExpression	* str != separator1		1095745	0		!=			
ANR	1095851	UnaryOperationExpression	* str		1095745	0					
ANR	1095852	UnaryOperator	*		1095745	0					
ANR	1095853	Identifier	str		1095745	1					
ANR	1095854	Identifier	separator1		1095745	1					
ANR	1095855	EqualityExpression	* str != separator2		1095745	1		!=			
ANR	1095856	UnaryOperationExpression	* str		1095745	0					
ANR	1095857	UnaryOperator	*		1095745	0					
ANR	1095858	Identifier	str		1095745	1					
ANR	1095859	Identifier	separator2		1095745	1					
ANR	1095860	CompoundStatement		35:61:762:762	1095745	1					
ANR	1095861	ExpressionStatement	* arg ++ = * str ++	10351:4:318196:318211	1095745	0	True				
ANR	1095862	AssignmentExpression	* arg ++ = * str ++		1095745	0		=			
ANR	1095863	UnaryOperationExpression	* arg ++		1095745	0					
ANR	1095864	UnaryOperator	*		1095745	0					
ANR	1095865	PostIncDecOperationExpression	arg ++		1095745	1					
ANR	1095866	Identifier	arg		1095745	0					
ANR	1095867	IncDec	++		1095745	1					
ANR	1095868	UnaryOperationExpression	* str ++		1095745	1					
ANR	1095869	UnaryOperator	*		1095745	0					
ANR	1095870	PostIncDecOperationExpression	str ++		1095745	1					
ANR	1095871	Identifier	str		1095745	0					
ANR	1095872	IncDec	++		1095745	1					
ANR	1095873	ExpressionStatement	* arg = 0	10353:3:318221:318229	1095745	3	True				
ANR	1095874	AssignmentExpression	* arg = 0		1095745	0		=			
ANR	1095875	UnaryOperationExpression	* arg		1095745	0					
ANR	1095876	UnaryOperator	*		1095745	0					
ANR	1095877	Identifier	arg		1095745	1					
ANR	1095878	PrimaryExpression	0		1095745	1					
ANR	1095879	ExpressionStatement	nargs ++	10356:3:318273:318280	1095745	4	True				
ANR	1095880	PostIncDecOperationExpression	nargs ++		1095745	0					
ANR	1095881	Identifier	nargs		1095745	0					
ANR	1095882	IncDec	++		1095745	1					
ANR	1095883	ExpressionStatement	argv [ nargs ] = 0	10360:1:318291:318306	1095745	17	True				
ANR	1095884	AssignmentExpression	argv [ nargs ] = 0		1095745	0		=			
ANR	1095885	ArrayIndexing	argv [ nargs ]		1095745	0					
ANR	1095886	Identifier	argv		1095745	0					
ANR	1095887	Identifier	nargs		1095745	1					
ANR	1095888	PrimaryExpression	0		1095745	1					
ANR	1095889	ReturnStatement	return argv ;	10361:1:318309:318320	1095745	18	True				
ANR	1095890	Identifier	argv		1095745	0					
ANR	1095891	ReturnType	char * *		1095745	1					
ANR	1095892	Identifier	DaemonCore :: ParseArgsString		1095745	2					
ANR	1095893	ParameterList	const char * str		1095745	3					
ANR	1095894	Parameter	const char * str	10315:35:317410:317424	1095745	0	True				
ANR	1095895	ParameterType	const char *		1095745	0					
ANR	1095896	Identifier	str		1095745	1					
ANR	1095897	CFGEntryNode	ENTRY		1095745		True				
ANR	1095898	CFGExitNode	EXIT		1095745		True				
ANR	1095899	Symbol	maxlength		1095745						
ANR	1095900	Symbol	* str ++		1095745						
ANR	1095901	Symbol	* nargs		1095745						
ANR	1095902	Symbol	* argv		1095745						
ANR	1095903	Symbol	argv		1095745						
ANR	1095904	Symbol	str		1095745						
ANR	1095905	Symbol	nargs		1095745						
ANR	1095906	Symbol	strlen		1095745						
ANR	1095907	Symbol	* arg ++		1095745						
ANR	1095908	Symbol	arg		1095745						
ANR	1095909	Symbol	* str		1095745						
ANR	1095910	Symbol	separator2		1095745						
ANR	1095911	Symbol	separator1		1095745						
ANR	1095912	Symbol	* arg		1095745						
ANR	1095913	Function	BindAnyCommandPort	10365:0:318332:319157							
ANR	1095914	FunctionDef	"BindAnyCommandPort (ReliSock * rsock , SafeSock * ssock)"		1095913	0					
ANR	1095915	CompoundStatement		10367:0:318389:319157	1095913	0					
ANR	1095916	ForStatement	for ( int i = 0 ; i < 1000 ; i ++ )		1095913	0					
ANR	1095917	ForInit	int i = 0 ;	10368:5:318396:318405	1095913	0	True				
ANR	1095918	IdentifierDeclStatement	int i = 0 ;		1095913	0					
ANR	1095919	IdentifierDecl	i = 0		1095913	0					
ANR	1095920	IdentifierDeclType	int		1095913	0					
ANR	1095921	Identifier	i		1095913	1					
ANR	1095922	AssignmentExpression	i = 0		1095913	2		=			
ANR	1095923	Identifier	i		1095913	0					
ANR	1095924	PrimaryExpression	0		1095913	1					
ANR	1095925	Condition	i < 1000	10368:16:318407:318414	1095913	1	True				
ANR	1095926	RelationalExpression	i < 1000		1095913	0		<			
ANR	1095927	Identifier	i		1095913	0					
ANR	1095928	PrimaryExpression	1000		1095913	1					
ANR	1095929	PostIncDecOperationExpression	i ++	10368:26:318417:318419	1095913	2	True				
ANR	1095930	Identifier	i		1095913	0					
ANR	1095931	IncDec	++		1095913	1					
ANR	1095932	CompoundStatement		2:31:32:32	1095913	3					
ANR	1095933	IfStatement	if ( ! rsock -> bind ( FALSE ) )		1095913	0					
ANR	1095934	Condition	! rsock -> bind ( FALSE )	10370:7:318492:318510	1095913	0	True				
ANR	1095935	UnaryOperationExpression	! rsock -> bind ( FALSE )		1095913	0					
ANR	1095936	UnaryOperator	!		1095913	0					
ANR	1095937	CallExpression	rsock -> bind ( FALSE )		1095913	1					
ANR	1095938	Callee	rsock -> bind		1095913	0					
ANR	1095939	PtrMemberAccess	rsock -> bind		1095913	0					
ANR	1095940	Identifier	rsock		1095913	0					
ANR	1095941	Identifier	bind		1095913	1					
ANR	1095942	ArgumentList	FALSE		1095913	1					
ANR	1095943	Argument	FALSE		1095913	0					
ANR	1095944	Identifier	FALSE		1095913	0					
ANR	1095945	CompoundStatement		4:29:124:124	1095913	1					
ANR	1095946	ExpressionStatement	"dprintf ( D_ALWAYS , ""Failed to bind to command ReliSock\\n"" )"	10371:3:318519:318576	1095913	0	True				
ANR	1095947	CallExpression	"dprintf ( D_ALWAYS , ""Failed to bind to command ReliSock\\n"" )"		1095913	0					
ANR	1095948	Callee	dprintf		1095913	0					
ANR	1095949	Identifier	dprintf		1095913	0					
ANR	1095950	ArgumentList	D_ALWAYS		1095913	1					
ANR	1095951	Argument	D_ALWAYS		1095913	0					
ANR	1095952	Identifier	D_ALWAYS		1095913	0					
ANR	1095953	Argument	"""Failed to bind to command ReliSock\\n"""		1095913	1					
ANR	1095954	PrimaryExpression	"""Failed to bind to command ReliSock\\n"""		1095913	0					
ANR	1095955	ExpressionStatement	"dprintf ( D_ALWAYS , ""(Make sure your IP address is correct in /etc/hosts.)\\n"" )"	10374:3:318596:318672	1095913	1	True				
ANR	1095956	CallExpression	"dprintf ( D_ALWAYS , ""(Make sure your IP address is correct in /etc/hosts.)\\n"" )"		1095913	0					
ANR	1095957	Callee	dprintf		1095913	0					
ANR	1095958	Identifier	dprintf		1095913	0					
ANR	1095959	ArgumentList	D_ALWAYS		1095913	1					
ANR	1095960	Argument	D_ALWAYS		1095913	0					
ANR	1095961	Identifier	D_ALWAYS		1095913	0					
ANR	1095962	Argument	"""(Make sure your IP address is correct in /etc/hosts.)\\n"""		1095913	1					
ANR	1095963	PrimaryExpression	"""(Make sure your IP address is correct in /etc/hosts.)\\n"""		1095913	0					
ANR	1095964	ExpressionStatement	"dprintf ( D_ALWAYS , ""(Your system network settings might be invalid.)\\n"" )"	10377:3:318697:318768	1095913	2	True				
ANR	1095965	CallExpression	"dprintf ( D_ALWAYS , ""(Your system network settings might be invalid.)\\n"" )"		1095913	0					
ANR	1095966	Callee	dprintf		1095913	0					
ANR	1095967	Identifier	dprintf		1095913	0					
ANR	1095968	ArgumentList	D_ALWAYS		1095913	1					
ANR	1095969	Argument	D_ALWAYS		1095913	0					
ANR	1095970	Identifier	D_ALWAYS		1095913	0					
ANR	1095971	Argument	"""(Your system network settings might be invalid.)\\n"""		1095913	1					
ANR	1095972	PrimaryExpression	"""(Your system network settings might be invalid.)\\n"""		1095913	0					
ANR	1095973	ReturnStatement	return FALSE ;	10380:3:318781:318793	1095913	3	True				
ANR	1095974	Identifier	FALSE		1095913	0					
ANR	1095975	IfStatement	"if ( ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) ) )"		1095913	1					
ANR	1095976	Condition	"ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) )"	10385:6:318978:319024	1095913	0	True				
ANR	1095977	AndExpression	"ssock && ! ssock -> bind ( FALSE , rsock -> get_port ( ) )"		1095913	0		&&			
ANR	1095978	Identifier	ssock		1095913	0					
ANR	1095979	UnaryOperationExpression	"! ssock -> bind ( FALSE , rsock -> get_port ( ) )"		1095913	1					
ANR	1095980	UnaryOperator	!		1095913	0					
ANR	1095981	CallExpression	"ssock -> bind ( FALSE , rsock -> get_port ( ) )"		1095913	1					
ANR	1095982	Callee	ssock -> bind		1095913	0					
ANR	1095983	PtrMemberAccess	ssock -> bind		1095913	0					
ANR	1095984	Identifier	ssock		1095913	0					
ANR	1095985	Identifier	bind		1095913	1					
ANR	1095986	ArgumentList	FALSE		1095913	1					
ANR	1095987	Argument	FALSE		1095913	0					
ANR	1095988	Identifier	FALSE		1095913	0					
ANR	1095989	Argument	rsock -> get_port ( )		1095913	1					
ANR	1095990	CallExpression	rsock -> get_port ( )		1095913	0					
ANR	1095991	Callee	rsock -> get_port		1095913	0					
ANR	1095992	PtrMemberAccess	rsock -> get_port		1095913	0					
ANR	1095993	Identifier	rsock		1095913	0					
ANR	1095994	Identifier	get_port		1095913	1					
ANR	1095995	ArgumentList			1095913	1					
ANR	1095996	CompoundStatement		19:55:637:637	1095913	1					
ANR	1095997	ExpressionStatement	rsock -> close ( )	10386:3:319032:319046	1095913	0	True				
ANR	1095998	CallExpression	rsock -> close ( )		1095913	0					
ANR	1095999	Callee	rsock -> close		1095913	0					
ANR	1096000	PtrMemberAccess	rsock -> close		1095913	0					
ANR	1096001	Identifier	rsock		1095913	0					
ANR	1096002	Identifier	close		1095913	1					
ANR	1096003	ArgumentList			1095913	1					
ANR	1096004	ContinueStatement	continue ;	10387:3:319051:319059	1095913	1	True				
ANR	1096005	ReturnStatement	return TRUE ;	10389:2:319067:319078	1095913	2	True				
ANR	1096006	Identifier	TRUE		1095913	0					
ANR	1096007	ExpressionStatement	"dprintf ( D_ALWAYS , ""Error: BindAnyCommandPort failed!\\n"" )"	10391:1:319084:319140	1095913	1	True				
ANR	1096008	CallExpression	"dprintf ( D_ALWAYS , ""Error: BindAnyCommandPort failed!\\n"" )"		1095913	0					
ANR	1096009	Callee	dprintf		1095913	0					
ANR	1096010	Identifier	dprintf		1095913	0					
ANR	1096011	ArgumentList	D_ALWAYS		1095913	1					
ANR	1096012	Argument	D_ALWAYS		1095913	0					
ANR	1096013	Identifier	D_ALWAYS		1095913	0					
ANR	1096014	Argument	"""Error: BindAnyCommandPort failed!\\n"""		1095913	1					
ANR	1096015	PrimaryExpression	"""Error: BindAnyCommandPort failed!\\n"""		1095913	0					
ANR	1096016	ReturnStatement	return FALSE ;	10392:1:319143:319155	1095913	2	True				
ANR	1096017	Identifier	FALSE		1095913	0					
ANR	1096018	ReturnType	int		1095913	1					
ANR	1096019	Identifier	BindAnyCommandPort		1095913	2					
ANR	1096020	ParameterList	"ReliSock * rsock , SafeSock * ssock"		1095913	3					
ANR	1096021	Parameter	ReliSock * rsock	10366:19:318355:318369	1095913	0	True				
ANR	1096022	ParameterType	ReliSock *		1095913	0					
ANR	1096023	Identifier	rsock		1095913	1					
ANR	1096024	Parameter	SafeSock * ssock	10366:36:318372:318386	1095913	1	True				
ANR	1096025	ParameterType	SafeSock *		1095913	0					
ANR	1096026	Identifier	ssock		1095913	1					
ANR	1096027	CFGEntryNode	ENTRY		1095913		True				
ANR	1096028	CFGExitNode	EXIT		1095913		True				
ANR	1096029	Symbol	D_ALWAYS		1095913						
ANR	1096030	Symbol	i		1095913						
ANR	1096031	Symbol	rsock -> get_port		1095913						
ANR	1096032	Symbol	TRUE		1095913						
ANR	1096033	Symbol	rsock		1095913						
ANR	1096034	Symbol	FALSE		1095913						
ANR	1096035	Symbol	* ssock		1095913						
ANR	1096036	Symbol	ssock -> bind		1095913						
ANR	1096037	Symbol	ssock		1095913						
ANR	1096038	Symbol	* rsock		1095913						
ANR	1096039	Symbol	rsock -> bind		1095913						
ANR	1096040	Function	InitCommandSockets	10395:0:319160:322578							
ANR	1096041	FunctionDef	"InitCommandSockets (int port , ReliSock * rsock , SafeSock * ssock , bool fatal)"		1096040	0					
ANR	1096042	CompoundStatement		10397:0:319240:322578	1096040	0					
ANR	1096043	ExpressionStatement	ASSERT ( port != 0 )	10410:1:319838:319855	1096040	0	True				
ANR	1096044	CallExpression	ASSERT ( port != 0 )		1096040	0					
ANR	1096045	Callee	ASSERT		1096040	0					
ANR	1096046	Identifier	ASSERT		1096040	0					
ANR	1096047	ArgumentList	port != 0		1096040	1					
ANR	1096048	Argument	port != 0		1096040	0					
ANR	1096049	EqualityExpression	port != 0		1096040	0		!=			
ANR	1096050	Identifier	port		1096040	0					
ANR	1096051	PrimaryExpression	0		1096040	1					
ANR	1096052	IfStatement	if ( port <= 1 )		1096040	1					
ANR	1096053	Condition	port <= 1	10411:5:319862:319870	1096040	0	True				
ANR	1096054	RelationalExpression	port <= 1		1096040	0		<=			
ANR	1096055	Identifier	port		1096040	0					
ANR	1096056	PrimaryExpression	1		1096040	1					
ANR	1096057	CompoundStatement		15:16:632:632	1096040	1					
ANR	1096058	IfStatement	"if ( ! BindAnyCommandPort ( rsock , ssock ) )"		1096040	0					
ANR	1096059	Condition	"! BindAnyCommandPort ( rsock , ssock )"	10413:6:319922:319954	1096040	0	True				
ANR	1096060	UnaryOperationExpression	"! BindAnyCommandPort ( rsock , ssock )"		1096040	0					
ANR	1096061	UnaryOperator	!		1096040	0					
ANR	1096062	CallExpression	"BindAnyCommandPort ( rsock , ssock )"		1096040	1					
ANR	1096063	Callee	BindAnyCommandPort		1096040	0					
ANR	1096064	Identifier	BindAnyCommandPort		1096040	0					
ANR	1096065	ArgumentList	rsock		1096040	1					
ANR	1096066	Argument	rsock		1096040	0					
ANR	1096067	Identifier	rsock		1096040	0					
ANR	1096068	Argument	ssock		1096040	1					
ANR	1096069	Identifier	ssock		1096040	0					
ANR	1096070	CompoundStatement		17:42:717:717	1096040	1					
ANR	1096071	IfStatement	if ( fatal )		1096040	0					
ANR	1096072	Condition	fatal	10414:7:319967:319971	1096040	0	True				
ANR	1096073	Identifier	fatal		1096040	0					
ANR	1096074	CompoundStatement		18:14:733:733	1096040	1					
ANR	1096075	ExpressionStatement	"EXCEPT ( ""BindAnyCommandPort() failed"" )"	10415:4:319980:320017	1096040	0	True				
ANR	1096076	CallExpression	"EXCEPT ( ""BindAnyCommandPort() failed"" )"		1096040	0					
ANR	1096077	Callee	EXCEPT		1096040	0					
ANR	1096078	Identifier	EXCEPT		1096040	0					
ANR	1096079	ArgumentList	"""BindAnyCommandPort() failed"""		1096040	1					
ANR	1096080	Argument	"""BindAnyCommandPort() failed"""		1096040	0					
ANR	1096081	PrimaryExpression	"""BindAnyCommandPort() failed"""		1096040	0					
ANR	1096082	ElseStatement	else		1096040	0					
ANR	1096083	CompoundStatement		21:8:791:791	1096040	0					
ANR	1096084	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""BindAnyCommandPort() failed\\n"" )"	10418:4:320038:320100	1096040	0	True				
ANR	1096085	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""BindAnyCommandPort() failed\\n"" )"		1096040	0					
ANR	1096086	Callee	dprintf		1096040	0					
ANR	1096087	Identifier	dprintf		1096040	0					
ANR	1096088	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096089	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096090	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096091	Identifier	D_ALWAYS		1096040	0					
ANR	1096092	Identifier	D_FAILURE		1096040	1					
ANR	1096093	Argument	"""BindAnyCommandPort() failed\\n"""		1096040	1					
ANR	1096094	PrimaryExpression	"""BindAnyCommandPort() failed\\n"""		1096040	0					
ANR	1096095	ReturnStatement	return false ;	10419:4:320106:320118	1096040	1	True				
ANR	1096096	Identifier	false		1096040	0					
ANR	1096097	IfStatement	if ( ! rsock -> listen ( ) )		1096040	1					
ANR	1096098	Condition	! rsock -> listen ( )	10423:6:320136:320151	1096040	0	True				
ANR	1096099	UnaryOperationExpression	! rsock -> listen ( )		1096040	0					
ANR	1096100	UnaryOperator	!		1096040	0					
ANR	1096101	CallExpression	rsock -> listen ( )		1096040	1					
ANR	1096102	Callee	rsock -> listen		1096040	0					
ANR	1096103	PtrMemberAccess	rsock -> listen		1096040	0					
ANR	1096104	Identifier	rsock		1096040	0					
ANR	1096105	Identifier	listen		1096040	1					
ANR	1096106	ArgumentList			1096040	1					
ANR	1096107	CompoundStatement		27:25:914:914	1096040	1					
ANR	1096108	IfStatement	if ( fatal )		1096040	0					
ANR	1096109	Condition	fatal	10424:7:320164:320168	1096040	0	True				
ANR	1096110	Identifier	fatal		1096040	0					
ANR	1096111	CompoundStatement		28:14:930:930	1096040	1					
ANR	1096112	ExpressionStatement	"EXCEPT ( ""Failed to post listen on command ReliSock"" )"	10425:4:320177:320230	1096040	0	True				
ANR	1096113	CallExpression	"EXCEPT ( ""Failed to post listen on command ReliSock"" )"		1096040	0					
ANR	1096114	Callee	EXCEPT		1096040	0					
ANR	1096115	Identifier	EXCEPT		1096040	0					
ANR	1096116	ArgumentList	"""Failed to post listen on command ReliSock"""		1096040	1					
ANR	1096117	Argument	"""Failed to post listen on command ReliSock"""		1096040	0					
ANR	1096118	PrimaryExpression	"""Failed to post listen on command ReliSock"""		1096040	0					
ANR	1096119	ElseStatement	else		1096040	0					
ANR	1096120	CompoundStatement		31:8:1004:1004	1096040	0					
ANR	1096121	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to post listen on command ReliSock\\n"" )"	10428:4:320251:320333	1096040	0	True				
ANR	1096122	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to post listen on command ReliSock\\n"" )"		1096040	0					
ANR	1096123	Callee	dprintf		1096040	0					
ANR	1096124	Identifier	dprintf		1096040	0					
ANR	1096125	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096126	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096127	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096128	Identifier	D_ALWAYS		1096040	0					
ANR	1096129	Identifier	D_FAILURE		1096040	1					
ANR	1096130	Argument	"""Failed to post listen on command ReliSock\\n"""		1096040	1					
ANR	1096131	PrimaryExpression	"""Failed to post listen on command ReliSock\\n"""		1096040	0					
ANR	1096132	ReturnStatement	return false ;	10430:4:320339:320351	1096040	1	True				
ANR	1096133	Identifier	false		1096040	0					
ANR	1096134	ElseStatement	else		1096040	0					
ANR	1096135	CompoundStatement		41:2:1206:1234	1096040	0					
ANR	1096136	IdentifierDeclStatement	int on = 1 ;	10436:2:320433:320443	1096040	0	True				
ANR	1096137	IdentifierDecl	on = 1		1096040	0					
ANR	1096138	IdentifierDeclType	int		1096040	0					
ANR	1096139	Identifier	on		1096040	1					
ANR	1096140	AssignmentExpression	on = 1		1096040	2		=			
ANR	1096141	Identifier	on		1096040	0					
ANR	1096142	PrimaryExpression	1		1096040	1					
ANR	1096143	IdentifierDeclStatement	int so_option = SO_REUSEADDR ;	10437:2:320447:320475	1096040	1	True				
ANR	1096144	IdentifierDecl	so_option = SO_REUSEADDR		1096040	0					
ANR	1096145	IdentifierDeclType	int		1096040	0					
ANR	1096146	Identifier	so_option		1096040	1					
ANR	1096147	AssignmentExpression	so_option = SO_REUSEADDR		1096040	2		=			
ANR	1096148	Identifier	SO_REUSEADDR		1096040	0					
ANR	1096149	Identifier	SO_REUSEADDR		1096040	1					
ANR	1096150	ExpressionStatement	so_option = SO_EXCLUSIVEADDRUSE	10446:2:320776:320807	1096040	2	True				
ANR	1096151	AssignmentExpression	so_option = SO_EXCLUSIVEADDRUSE		1096040	0		=			
ANR	1096152	Identifier	so_option		1096040	0					
ANR	1096153	Identifier	SO_EXCLUSIVEADDRUSE		1096040	1					
ANR	1096154	IfStatement	"if ( ! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) ) )"		1096040	3					
ANR	1096155	Condition	"! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"	10453:6:321028:321102	1096040	0	True				
ANR	1096156	UnaryOperationExpression	"! rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		1096040	0					
ANR	1096157	UnaryOperator	!		1096040	0					
ANR	1096158	CallExpression	"rsock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		1096040	1					
ANR	1096159	Callee	rsock -> setsockopt		1096040	0					
ANR	1096160	PtrMemberAccess	rsock -> setsockopt		1096040	0					
ANR	1096161	Identifier	rsock		1096040	0					
ANR	1096162	Identifier	setsockopt		1096040	1					
ANR	1096163	ArgumentList	SOL_SOCKET		1096040	1					
ANR	1096164	Argument	SOL_SOCKET		1096040	0					
ANR	1096165	Identifier	SOL_SOCKET		1096040	0					
ANR	1096166	Argument	so_option		1096040	1					
ANR	1096167	Identifier	so_option		1096040	0					
ANR	1096168	Argument	( char * ) & on		1096040	2					
ANR	1096169	CastExpression	( char * ) & on		1096040	0					
ANR	1096170	CastTarget	char *		1096040	0					
ANR	1096171	UnaryOperationExpression	& on		1096040	1					
ANR	1096172	UnaryOperator	&		1096040	0					
ANR	1096173	Identifier	on		1096040	1					
ANR	1096174	Argument	sizeof ( on )		1096040	3					
ANR	1096175	SizeofExpression	sizeof ( on )		1096040	0					
ANR	1096176	Sizeof	sizeof		1096040	0					
ANR	1096177	SizeofOperand	on		1096040	1					
ANR	1096178	CompoundStatement		58:36:1865:1865	1096040	1					
ANR	1096179	IfStatement	if ( fatal )		1096040	0					
ANR	1096180	Condition	fatal	10455:7:321115:321119	1096040	0	True				
ANR	1096181	Identifier	fatal		1096040	0					
ANR	1096182	CompoundStatement		59:14:1881:1881	1096040	1					
ANR	1096183	ExpressionStatement	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on TCP command port"" )"	10456:4:321128:321190	1096040	0	True				
ANR	1096184	CallExpression	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on TCP command port"" )"		1096040	0					
ANR	1096185	Callee	EXCEPT		1096040	0					
ANR	1096186	Identifier	EXCEPT		1096040	0					
ANR	1096187	ArgumentList	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		1096040	1					
ANR	1096188	Argument	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		1096040	0					
ANR	1096189	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on TCP command port"""		1096040	0					
ANR	1096190	ElseStatement	else		1096040	0					
ANR	1096191	CompoundStatement		62:8:1964:1964	1096040	0					
ANR	1096192	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on TCP command port\\n"" )"	10459:4:321211:321304	1096040	0	True				
ANR	1096193	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on TCP command port\\n"" )"		1096040	0					
ANR	1096194	Callee	dprintf		1096040	0					
ANR	1096195	Identifier	dprintf		1096040	0					
ANR	1096196	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096197	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096198	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096199	Identifier	D_ALWAYS		1096040	0					
ANR	1096200	Identifier	D_FAILURE		1096040	1					
ANR	1096201	Argument	"""setsockopt() SO_REUSEADDR failed on TCP command port\\n"""		1096040	1					
ANR	1096202	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on TCP command port\\n"""		1096040	0					
ANR	1096203	ReturnStatement	return false ;	10461:4:321310:321322	1096040	1	True				
ANR	1096204	Identifier	false		1096040	0					
ANR	1096205	IfStatement	"if ( ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) ) )"		1096040	4					
ANR	1096206	Condition	"ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"	10464:6:321339:321425	1096040	0	True				
ANR	1096207	AndExpression	"ssock && ! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		1096040	0		&&			
ANR	1096208	Identifier	ssock		1096040	0					
ANR	1096209	UnaryOperationExpression	"! ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		1096040	1					
ANR	1096210	UnaryOperator	!		1096040	0					
ANR	1096211	CallExpression	"ssock -> setsockopt ( SOL_SOCKET , so_option , ( char * ) & on , sizeof ( on ) )"		1096040	1					
ANR	1096212	Callee	ssock -> setsockopt		1096040	0					
ANR	1096213	PtrMemberAccess	ssock -> setsockopt		1096040	0					
ANR	1096214	Identifier	ssock		1096040	0					
ANR	1096215	Identifier	setsockopt		1096040	1					
ANR	1096216	ArgumentList	SOL_SOCKET		1096040	1					
ANR	1096217	Argument	SOL_SOCKET		1096040	0					
ANR	1096218	Identifier	SOL_SOCKET		1096040	0					
ANR	1096219	Argument	so_option		1096040	1					
ANR	1096220	Identifier	so_option		1096040	0					
ANR	1096221	Argument	( char * ) & on		1096040	2					
ANR	1096222	CastExpression	( char * ) & on		1096040	0					
ANR	1096223	CastTarget	char *		1096040	0					
ANR	1096224	UnaryOperationExpression	& on		1096040	1					
ANR	1096225	UnaryOperator	&		1096040	0					
ANR	1096226	Identifier	on		1096040	1					
ANR	1096227	Argument	sizeof ( on )		1096040	3					
ANR	1096228	SizeofExpression	sizeof ( on )		1096040	0					
ANR	1096229	Sizeof	sizeof		1096040	0					
ANR	1096230	SizeofOperand	on		1096040	1					
ANR	1096231	CompoundStatement		70:36:2188:2188	1096040	1					
ANR	1096232	IfStatement	if ( fatal )		1096040	0					
ANR	1096233	Condition	fatal	10467:7:321438:321442	1096040	0	True				
ANR	1096234	Identifier	fatal		1096040	0					
ANR	1096235	CompoundStatement		71:14:2204:2204	1096040	1					
ANR	1096236	ExpressionStatement	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on UDP command port"" )"	10468:4:321451:321513	1096040	0	True				
ANR	1096237	CallExpression	"EXCEPT ( ""setsockopt() SO_REUSEADDR failed on UDP command port"" )"		1096040	0					
ANR	1096238	Callee	EXCEPT		1096040	0					
ANR	1096239	Identifier	EXCEPT		1096040	0					
ANR	1096240	ArgumentList	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		1096040	1					
ANR	1096241	Argument	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		1096040	0					
ANR	1096242	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on UDP command port"""		1096040	0					
ANR	1096243	ElseStatement	else		1096040	0					
ANR	1096244	CompoundStatement		74:8:2287:2287	1096040	0					
ANR	1096245	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on UDP command port\\n"" )"	10471:4:321534:321627	1096040	0	True				
ANR	1096246	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""setsockopt() SO_REUSEADDR failed on UDP command port\\n"" )"		1096040	0					
ANR	1096247	Callee	dprintf		1096040	0					
ANR	1096248	Identifier	dprintf		1096040	0					
ANR	1096249	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096250	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096251	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096252	Identifier	D_ALWAYS		1096040	0					
ANR	1096253	Identifier	D_FAILURE		1096040	1					
ANR	1096254	Argument	"""setsockopt() SO_REUSEADDR failed on UDP command port\\n"""		1096040	1					
ANR	1096255	PrimaryExpression	"""setsockopt() SO_REUSEADDR failed on UDP command port\\n"""		1096040	0					
ANR	1096256	ReturnStatement	return false ;	10473:4:321633:321645	1096040	1	True				
ANR	1096257	Identifier	false		1096040	0					
ANR	1096258	IfStatement	"if ( ! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) ) )"		1096040	5					
ANR	1096259	Condition	"! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"	10481:6:321835:321912	1096040	0	True				
ANR	1096260	UnaryOperationExpression	"! rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"		1096040	0					
ANR	1096261	UnaryOperator	!		1096040	0					
ANR	1096262	CallExpression	"rsock -> setsockopt ( IPPROTO_TCP , TCP_NODELAY , ( char * ) & on , sizeof ( on ) )"		1096040	1					
ANR	1096263	Callee	rsock -> setsockopt		1096040	0					
ANR	1096264	PtrMemberAccess	rsock -> setsockopt		1096040	0					
ANR	1096265	Identifier	rsock		1096040	0					
ANR	1096266	Identifier	setsockopt		1096040	1					
ANR	1096267	ArgumentList	IPPROTO_TCP		1096040	1					
ANR	1096268	Argument	IPPROTO_TCP		1096040	0					
ANR	1096269	Identifier	IPPROTO_TCP		1096040	0					
ANR	1096270	Argument	TCP_NODELAY		1096040	1					
ANR	1096271	Identifier	TCP_NODELAY		1096040	0					
ANR	1096272	Argument	( char * ) & on		1096040	2					
ANR	1096273	CastExpression	( char * ) & on		1096040	0					
ANR	1096274	CastTarget	char *		1096040	0					
ANR	1096275	UnaryOperationExpression	& on		1096040	1					
ANR	1096276	UnaryOperator	&		1096040	0					
ANR	1096277	Identifier	on		1096040	1					
ANR	1096278	Argument	sizeof ( on )		1096040	3					
ANR	1096279	SizeofExpression	sizeof ( on )		1096040	0					
ANR	1096280	Sizeof	sizeof		1096040	0					
ANR	1096281	SizeofOperand	on		1096040	1					
ANR	1096282	CompoundStatement		86:36:2675:2675	1096040	1					
ANR	1096283	ExpressionStatement	"dprintf ( D_ALWAYS , ""Warning: setsockopt() TCP_NODELAY failed\\n"" )"	10483:3:321921:321984	1096040	0	True				
ANR	1096284	CallExpression	"dprintf ( D_ALWAYS , ""Warning: setsockopt() TCP_NODELAY failed\\n"" )"		1096040	0					
ANR	1096285	Callee	dprintf		1096040	0					
ANR	1096286	Identifier	dprintf		1096040	0					
ANR	1096287	ArgumentList	D_ALWAYS		1096040	1					
ANR	1096288	Argument	D_ALWAYS		1096040	0					
ANR	1096289	Identifier	D_ALWAYS		1096040	0					
ANR	1096290	Argument	"""Warning: setsockopt() TCP_NODELAY failed\\n"""		1096040	1					
ANR	1096291	PrimaryExpression	"""Warning: setsockopt() TCP_NODELAY failed\\n"""		1096040	0					
ANR	1096292	IfStatement	if ( ! rsock -> listen ( port ) )		1096040	6					
ANR	1096293	Condition	! rsock -> listen ( port )	10486:6:321997:322016	1096040	0	True				
ANR	1096294	UnaryOperationExpression	! rsock -> listen ( port )		1096040	0					
ANR	1096295	UnaryOperator	!		1096040	0					
ANR	1096296	CallExpression	rsock -> listen ( port )		1096040	1					
ANR	1096297	Callee	rsock -> listen		1096040	0					
ANR	1096298	PtrMemberAccess	rsock -> listen		1096040	0					
ANR	1096299	Identifier	rsock		1096040	0					
ANR	1096300	Identifier	listen		1096040	1					
ANR	1096301	ArgumentList	port		1096040	1					
ANR	1096302	Argument	port		1096040	0					
ANR	1096303	Identifier	port		1096040	0					
ANR	1096304	CompoundStatement		90:28:2778:2778	1096040	1					
ANR	1096305	IfStatement	if ( fatal )		1096040	0					
ANR	1096306	Condition	fatal	10487:7:322028:322032	1096040	0	True				
ANR	1096307	Identifier	fatal		1096040	0					
ANR	1096308	CompoundStatement		91:14:2794:2794	1096040	1					
ANR	1096309	ExpressionStatement	"EXCEPT ( ""Failed to listen(%d) on TCP command socket."" , port )"	10488:4:322041:322100	1096040	0	True				
ANR	1096310	CallExpression	"EXCEPT ( ""Failed to listen(%d) on TCP command socket."" , port )"		1096040	0					
ANR	1096311	Callee	EXCEPT		1096040	0					
ANR	1096312	Identifier	EXCEPT		1096040	0					
ANR	1096313	ArgumentList	"""Failed to listen(%d) on TCP command socket."""		1096040	1					
ANR	1096314	Argument	"""Failed to listen(%d) on TCP command socket."""		1096040	0					
ANR	1096315	PrimaryExpression	"""Failed to listen(%d) on TCP command socket."""		1096040	0					
ANR	1096316	Argument	port		1096040	1					
ANR	1096317	Identifier	port		1096040	0					
ANR	1096318	ElseStatement	else		1096040	0					
ANR	1096319	CompoundStatement		94:8:2874:2874	1096040	0					
ANR	1096320	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to listen(%d) on TCP command socket.\\n"" , port )"	10491:4:322121:322211	1096040	0	True				
ANR	1096321	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to listen(%d) on TCP command socket.\\n"" , port )"		1096040	0					
ANR	1096322	Callee	dprintf		1096040	0					
ANR	1096323	Identifier	dprintf		1096040	0					
ANR	1096324	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096325	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096326	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096327	Identifier	D_ALWAYS		1096040	0					
ANR	1096328	Identifier	D_FAILURE		1096040	1					
ANR	1096329	Argument	"""Failed to listen(%d) on TCP command socket.\\n"""		1096040	1					
ANR	1096330	PrimaryExpression	"""Failed to listen(%d) on TCP command socket.\\n"""		1096040	0					
ANR	1096331	Argument	port		1096040	2					
ANR	1096332	Identifier	port		1096040	0					
ANR	1096333	ReturnStatement	return false ;	10493:4:322217:322229	1096040	1	True				
ANR	1096334	Identifier	false		1096040	0					
ANR	1096335	IfStatement	"if ( ssock && ! ssock -> bind ( FALSE , port ) )"		1096040	7					
ANR	1096336	Condition	"ssock && ! ssock -> bind ( FALSE , port )"	10497:6:322308:322341	1096040	0	True				
ANR	1096337	AndExpression	"ssock && ! ssock -> bind ( FALSE , port )"		1096040	0		&&			
ANR	1096338	Identifier	ssock		1096040	0					
ANR	1096339	UnaryOperationExpression	"! ssock -> bind ( FALSE , port )"		1096040	1					
ANR	1096340	UnaryOperator	!		1096040	0					
ANR	1096341	CallExpression	"ssock -> bind ( FALSE , port )"		1096040	1					
ANR	1096342	Callee	ssock -> bind		1096040	0					
ANR	1096343	PtrMemberAccess	ssock -> bind		1096040	0					
ANR	1096344	Identifier	ssock		1096040	0					
ANR	1096345	Identifier	bind		1096040	1					
ANR	1096346	ArgumentList	FALSE		1096040	1					
ANR	1096347	Argument	FALSE		1096040	0					
ANR	1096348	Identifier	FALSE		1096040	0					
ANR	1096349	Argument	port		1096040	1					
ANR	1096350	Identifier	port		1096040	0					
ANR	1096351	CompoundStatement		101:42:3103:3103	1096040	1					
ANR	1096352	IfStatement	if ( fatal )		1096040	0					
ANR	1096353	Condition	fatal	10498:7:322353:322357	1096040	0	True				
ANR	1096354	Identifier	fatal		1096040	0					
ANR	1096355	CompoundStatement		102:14:3119:3119	1096040	1					
ANR	1096356	ExpressionStatement	"EXCEPT ( ""Failed to bind(%d) on UDP command socket."" , port )"	10499:4:322366:322423	1096040	0	True				
ANR	1096357	CallExpression	"EXCEPT ( ""Failed to bind(%d) on UDP command socket."" , port )"		1096040	0					
ANR	1096358	Callee	EXCEPT		1096040	0					
ANR	1096359	Identifier	EXCEPT		1096040	0					
ANR	1096360	ArgumentList	"""Failed to bind(%d) on UDP command socket."""		1096040	1					
ANR	1096361	Argument	"""Failed to bind(%d) on UDP command socket."""		1096040	0					
ANR	1096362	PrimaryExpression	"""Failed to bind(%d) on UDP command socket."""		1096040	0					
ANR	1096363	Argument	port		1096040	1					
ANR	1096364	Identifier	port		1096040	0					
ANR	1096365	ElseStatement	else		1096040	0					
ANR	1096366	CompoundStatement		105:8:3197:3197	1096040	0					
ANR	1096367	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to bind(%d) on UDP command socket.\\n"" , port )"	10502:4:322444:322532	1096040	0	True				
ANR	1096368	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""Failed to bind(%d) on UDP command socket.\\n"" , port )"		1096040	0					
ANR	1096369	Callee	dprintf		1096040	0					
ANR	1096370	Identifier	dprintf		1096040	0					
ANR	1096371	ArgumentList	D_ALWAYS | D_FAILURE		1096040	1					
ANR	1096372	Argument	D_ALWAYS | D_FAILURE		1096040	0					
ANR	1096373	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1096040	0		|			
ANR	1096374	Identifier	D_ALWAYS		1096040	0					
ANR	1096375	Identifier	D_FAILURE		1096040	1					
ANR	1096376	Argument	"""Failed to bind(%d) on UDP command socket.\\n"""		1096040	1					
ANR	1096377	PrimaryExpression	"""Failed to bind(%d) on UDP command socket.\\n"""		1096040	0					
ANR	1096378	Argument	port		1096040	2					
ANR	1096379	Identifier	port		1096040	0					
ANR	1096380	ReturnStatement	return false ;	10504:4:322538:322550	1096040	1	True				
ANR	1096381	Identifier	false		1096040	0					
ANR	1096382	ReturnStatement	return true ;	10508:1:322565:322576	1096040	2	True				
ANR	1096383	Identifier	true		1096040	0					
ANR	1096384	ReturnType	bool		1096040	1					
ANR	1096385	Identifier	InitCommandSockets		1096040	2					
ANR	1096386	ParameterList	"int port , ReliSock * rsock , SafeSock * ssock , bool fatal"		1096040	3					
ANR	1096387	Parameter	int port	10396:19:319184:319191	1096040	0	True				
ANR	1096388	ParameterType	int		1096040	0					
ANR	1096389	Identifier	port		1096040	1					
ANR	1096390	Parameter	ReliSock * rsock	10396:29:319194:319208	1096040	1	True				
ANR	1096391	ParameterType	ReliSock *		1096040	0					
ANR	1096392	Identifier	rsock		1096040	1					
ANR	1096393	Parameter	SafeSock * ssock	10396:46:319211:319225	1096040	2	True				
ANR	1096394	ParameterType	SafeSock *		1096040	0					
ANR	1096395	Identifier	ssock		1096040	1					
ANR	1096396	Parameter	bool fatal	10396:63:319228:319237	1096040	3	True				
ANR	1096397	ParameterType	bool		1096040	0					
ANR	1096398	Identifier	fatal		1096040	1					
ANR	1096399	CFGEntryNode	ENTRY		1096040		True				
ANR	1096400	CFGExitNode	EXIT		1096040		True				
ANR	1096401	Symbol	so_option		1096040						
ANR	1096402	Symbol	SO_EXCLUSIVEADDRUSE		1096040						
ANR	1096403	Symbol	ssock -> setsockopt		1096040						
ANR	1096404	Symbol	D_ALWAYS		1096040						
ANR	1096405	Symbol	false		1096040						
ANR	1096406	Symbol	& on		1096040						
ANR	1096407	Symbol	rsock		1096040						
ANR	1096408	Symbol	SO_REUSEADDR		1096040						
ANR	1096409	Symbol	* ssock		1096040						
ANR	1096410	Symbol	D_FAILURE		1096040						
ANR	1096411	Symbol	ssock -> bind		1096040						
ANR	1096412	Symbol	TCP_NODELAY		1096040						
ANR	1096413	Symbol	fatal		1096040						
ANR	1096414	Symbol	SOL_SOCKET		1096040						
ANR	1096415	Symbol	BindAnyCommandPort		1096040						
ANR	1096416	Symbol	rsock -> listen		1096040						
ANR	1096417	Symbol	port		1096040						
ANR	1096418	Symbol	IPPROTO_TCP		1096040						
ANR	1096419	Symbol	true		1096040						
ANR	1096420	Symbol	FALSE		1096040						
ANR	1096421	Symbol	ssock		1096040						
ANR	1096422	Symbol	* rsock		1096040						
ANR	1096423	Symbol	on		1096040						
ANR	1096424	Symbol	rsock -> setsockopt		1096040						
ANR	1096425	Function	DaemonCore :: ProcessExitedButNotReaped	10512:0:322582:322791							
ANR	1096426	FunctionDef	DaemonCore :: ProcessExitedButNotReaped (pid_t pid)		1096425	0					
ANR	1096427	CompoundStatement		10513:0:322636:322791	1096425	0					
ANR	1096428	IdentifierDeclStatement	WaitpidEntry wait_entry ;	10516:1:322654:322677	1096425	0	True				
ANR	1096429	IdentifierDecl	wait_entry		1096425	0					
ANR	1096430	IdentifierDeclType	WaitpidEntry		1096425	0					
ANR	1096431	Identifier	wait_entry		1096425	1					
ANR	1096432	ExpressionStatement	wait_entry . child_pid = pid	10517:1:322680:322706	1096425	1	True				
ANR	1096433	AssignmentExpression	wait_entry . child_pid = pid		1096425	0		=			
ANR	1096434	MemberAccess	wait_entry . child_pid		1096425	0					
ANR	1096435	Identifier	wait_entry		1096425	0					
ANR	1096436	Identifier	child_pid		1096425	1					
ANR	1096437	Identifier	pid		1096425	1					
ANR	1096438	IfStatement	if ( WaitpidQueue . IsMember ( wait_entry ) )		1096425	2					
ANR	1096439	Condition	WaitpidQueue . IsMember ( wait_entry )	10519:4:322713:322745	1096425	0	True				
ANR	1096440	CallExpression	WaitpidQueue . IsMember ( wait_entry )		1096425	0					
ANR	1096441	Callee	WaitpidQueue . IsMember		1096425	0					
ANR	1096442	MemberAccess	WaitpidQueue . IsMember		1096425	0					
ANR	1096443	Identifier	WaitpidQueue		1096425	0					
ANR	1096444	Identifier	IsMember		1096425	1					
ANR	1096445	ArgumentList	wait_entry		1096425	1					
ANR	1096446	Argument	wait_entry		1096425	0					
ANR	1096447	Identifier	wait_entry		1096425	0					
ANR	1096448	CompoundStatement		7:39:111:111	1096425	1					
ANR	1096449	ReturnStatement	return true ;	10520:2:322752:322763	1096425	0	True				
ANR	1096450	Identifier	true		1096425	0					
ANR	1096451	ReturnStatement	return false ;	10524:1:322777:322789	1096425	3	True				
ANR	1096452	Identifier	false		1096425	0					
ANR	1096453	ReturnType	bool		1096425	1					
ANR	1096454	Identifier	DaemonCore :: ProcessExitedButNotReaped		1096425	2					
ANR	1096455	ParameterList	pid_t pid		1096425	3					
ANR	1096456	Parameter	pid_t pid	10512:43:322625:322633	1096425	0	True				
ANR	1096457	ParameterType	pid_t		1096425	0					
ANR	1096458	Identifier	pid		1096425	1					
ANR	1096459	CFGEntryNode	ENTRY		1096425		True				
ANR	1096460	CFGExitNode	EXIT		1096425		True				
ANR	1096461	Symbol	WaitpidQueue		1096425						
ANR	1096462	Symbol	WaitpidQueue . IsMember		1096425						
ANR	1096463	Symbol	wait_entry . child_pid		1096425						
ANR	1096464	Symbol	wait_entry		1096425						
ANR	1096465	Symbol	true		1096425						
ANR	1096466	Symbol	false		1096425						
ANR	1096467	Symbol	pid		1096425						
ANR	1096468	Function	DaemonCore :: Is_Pid_Alive	10534:0:323147:325334							
ANR	1096469	FunctionDef	DaemonCore :: Is_Pid_Alive (pid_t pid)		1096468	0					
ANR	1096470	CompoundStatement		10535:0:323187:325334	1096468	0					
ANR	1096471	IdentifierDeclStatement	int status = FALSE ;	10536:1:323190:323208	1096468	0	True				
ANR	1096472	IdentifierDecl	status = FALSE		1096468	0					
ANR	1096473	IdentifierDeclType	int		1096468	0					
ANR	1096474	Identifier	status		1096468	1					
ANR	1096475	AssignmentExpression	status = FALSE		1096468	2		=			
ANR	1096476	Identifier	FALSE		1096468	0					
ANR	1096477	Identifier	FALSE		1096468	1					
ANR	1096478	IfStatement	if ( ProcessExitedButNotReaped ( pid ) )		1096468	1					
ANR	1096479	Condition	ProcessExitedButNotReaped ( pid )	10544:5:323378:323407	1096468	0	True				
ANR	1096480	CallExpression	ProcessExitedButNotReaped ( pid )		1096468	0					
ANR	1096481	Callee	ProcessExitedButNotReaped		1096468	0					
ANR	1096482	Identifier	ProcessExitedButNotReaped		1096468	0					
ANR	1096483	ArgumentList	pid		1096468	1					
ANR	1096484	Argument	pid		1096468	0					
ANR	1096485	Identifier	pid		1096468	0					
ANR	1096486	CompoundStatement		10:38:223:223	1096468	1					
ANR	1096487	ExpressionStatement	status = TRUE	10545:2:323415:323428	1096468	0	True				
ANR	1096488	AssignmentExpression	status = TRUE		1096468	0		=			
ANR	1096489	Identifier	status		1096468	0					
ANR	1096490	Identifier	TRUE		1096468	1					
ANR	1096491	ReturnStatement	return status ;	10546:2:323432:323445	1096468	1	True				
ANR	1096492	Identifier	status		1096468	0					
ANR	1096493	ElseStatement	else		1096468	0					
ANR	1096494	CompoundStatement		24:8:661:661	1096468	0					
ANR	1096495	IfStatement	if ( errno == EPERM )		1096468	0					
ANR	1096496	Condition	errno == EPERM	10564:7:324095:324108	1096468	0	True				
ANR	1096497	EqualityExpression	errno == EPERM		1096468	0		==			
ANR	1096498	Identifier	errno		1096468	0					
ANR	1096499	Identifier	EPERM		1096468	1					
ANR	1096500	CompoundStatement		30:24:924:924	1096468	1					
ANR	1096501	Statement	dprintf	10565:3:324117:324123	1096468	0	True				
ANR	1096502	Statement	(	10565:10:324124:324124	1096468	1	True				
ANR	1096503	Statement	D_FULLDEBUG	10565:11:324125:324135	1096468	2	True				
ANR	1096504	Statement	","	10565:22:324136:324136	1096468	3	True				
ANR	1096505	Statement	"""DaemonCore::IsPidAlive(): kill returned """	10565:24:324138:324179	1096468	4	True				
ANR	1096506	Statement	"""EPERM, assuming pid %d is alive.\\n"""	10566:4:324185:324220	1096468	5	True				
ANR	1096507	Statement	","	10566:40:324221:324221	1096468	6	True				
ANR	1096508	Statement	pid	10566:42:324223:324225	1096468	7	True				
ANR	1096509	Statement	)	10566:45:324226:324226	1096468	8	True				
ANR	1096510	ExpressionStatement		10566:46:324227:324227	1096468	9	True				
ANR	1096511	ExpressionStatement	status = TRUE	10567:3:324232:324245	1096468	10	True				
ANR	1096512	AssignmentExpression	status = TRUE		1096468	0		=			
ANR	1096513	Identifier	status		1096468	0					
ANR	1096514	Identifier	TRUE		1096468	1					
ANR	1096515	ElseStatement	else		1096468	0					
ANR	1096516	CompoundStatement		34:9:1068:1068	1096468	0					
ANR	1096517	Statement	dprintf	10569:3:324261:324267	1096468	0	True				
ANR	1096518	Statement	(	10569:10:324268:324268	1096468	1	True				
ANR	1096519	Statement	D_FULLDEBUG	10569:11:324269:324279	1096468	2	True				
ANR	1096520	Statement	","	10569:22:324280:324280	1096468	3	True				
ANR	1096521	Statement	"""DaemonCore::IsPidAlive(): kill returned """	10569:24:324282:324323	1096468	4	True				
ANR	1096522	Statement	"""errno %d, assuming pid %d is dead.\\n"""	10570:4:324329:324366	1096468	5	True				
ANR	1096523	Statement	","	10570:42:324367:324367	1096468	6	True				
ANR	1096524	Statement	errno	10570:44:324369:324373	1096468	7	True				
ANR	1096525	Statement	","	10570:49:324374:324374	1096468	8	True				
ANR	1096526	Statement	pid	10570:51:324376:324378	1096468	9	True				
ANR	1096527	Statement	)	10570:54:324379:324379	1096468	10	True				
ANR	1096528	ExpressionStatement		10570:55:324380:324380	1096468	11	True				
ANR	1096529	ExpressionStatement	status = FALSE	10571:3:324385:324399	1096468	12	True				
ANR	1096530	AssignmentExpression	status = FALSE		1096468	0		=			
ANR	1096531	Identifier	status		1096468	0					
ANR	1096532	Identifier	FALSE		1096468	1					
ANR	1096533	IdentifierDeclStatement	priv_state priv = set_root_priv ( ) ;	10553:1:323747:323780	1096468	2	True				
ANR	1096534	IdentifierDecl	priv = set_root_priv ( )		1096468	0					
ANR	1096535	IdentifierDeclType	priv_state		1096468	0					
ANR	1096536	Identifier	priv		1096468	1					
ANR	1096537	AssignmentExpression	priv = set_root_priv ( )		1096468	2		=			
ANR	1096538	Identifier	priv		1096468	0					
ANR	1096539	CallExpression	set_root_priv ( )		1096468	1					
ANR	1096540	Callee	set_root_priv		1096468	0					
ANR	1096541	Identifier	set_root_priv		1096468	0					
ANR	1096542	ArgumentList			1096468	1					
ANR	1096543	ExpressionStatement	errno = 0	10555:1:323784:323793	1096468	3	True				
ANR	1096544	AssignmentExpression	errno = 0		1096468	0		=			
ANR	1096545	Identifier	errno		1096468	0					
ANR	1096546	PrimaryExpression	0		1096468	1					
ANR	1096547	Statement	if	10556:1:323796:323797	1096468	4	True				
ANR	1096548	Statement	(	10556:4:323799:323799	1096468	5	True				
ANR	1096549	Statement	::	10556:6:323801:323802	1096468	6	True				
ANR	1096550	Statement	kill	10556:8:323803:323806	1096468	7	True				
ANR	1096551	Statement	(	10556:12:323807:323807	1096468	8	True				
ANR	1096552	Statement	pid	10556:13:323808:323810	1096468	9	True				
ANR	1096553	Statement	","	10556:16:323811:323811	1096468	10	True				
ANR	1096554	Statement	0	10556:17:323812:323812	1096468	11	True				
ANR	1096555	Statement	)	10556:18:323813:323813	1096468	12	True				
ANR	1096556	Statement	==	10556:20:323815:323816	1096468	13	True				
ANR	1096557	Statement	0	10556:23:323818:323818	1096468	14	True				
ANR	1096558	Statement	)	10556:25:323820:323820	1096468	15	True				
ANR	1096559	CompoundStatement		22:27:634:634	1096468	16					
ANR	1096560	ExpressionStatement	status = TRUE	10557:2:323826:323839	1096468	0	True				
ANR	1096561	AssignmentExpression	status = TRUE		1096468	0		=			
ANR	1096562	Identifier	status		1096468	0					
ANR	1096563	Identifier	TRUE		1096468	1					
ANR	1096564	ExpressionStatement	set_priv ( priv )	10574:1:324434:324448	1096468	17	True				
ANR	1096565	CallExpression	set_priv ( priv )		1096468	0					
ANR	1096566	Callee	set_priv		1096468	0					
ANR	1096567	Identifier	set_priv		1096468	0					
ANR	1096568	ArgumentList	priv		1096468	1					
ANR	1096569	Argument	priv		1096468	0					
ANR	1096570	Identifier	priv		1096468	0					
ANR	1096571	ReturnStatement	return status ;	10601:1:325319:325332	1096468	18	True				
ANR	1096572	Identifier	status		1096468	0					
ANR	1096573	ReturnType	int		1096468	1					
ANR	1096574	Identifier	DaemonCore :: Is_Pid_Alive		1096468	2					
ANR	1096575	ParameterList	pid_t pid		1096468	3					
ANR	1096576	Parameter	pid_t pid	10534:29:323176:323184	1096468	0	True				
ANR	1096577	ParameterType	pid_t		1096468	0					
ANR	1096578	Identifier	pid		1096468	1					
ANR	1096579	CFGEntryNode	ENTRY		1096468		True				
ANR	1096580	CFGExitNode	EXIT		1096468		True				
ANR	1096581	Symbol	errno		1096468						
ANR	1096582	Symbol	ProcessExitedButNotReaped		1096468						
ANR	1096583	Symbol	EPERM		1096468						
ANR	1096584	Symbol	TRUE		1096468						
ANR	1096585	Symbol	pid		1096468						
ANR	1096586	Symbol	FALSE		1096468						
ANR	1096587	Symbol	set_root_priv		1096468						
ANR	1096588	Symbol	priv		1096468						
ANR	1096589	Symbol	status		1096468						
ANR	1096590	Function	DaemonCore :: Register_Priv_State	10605:0:325338:325491							
ANR	1096591	FunctionDef	DaemonCore :: Register_Priv_State (priv_state priv)		1096590	0					
ANR	1096592	CompoundStatement		10607:0:325400:325491	1096590	0					
ANR	1096593	IdentifierDeclStatement	priv_state old_priv = Default_Priv_State ;	10608:1:325403:325443	1096590	0	True				
ANR	1096594	IdentifierDecl	old_priv = Default_Priv_State		1096590	0					
ANR	1096595	IdentifierDeclType	priv_state		1096590	0					
ANR	1096596	Identifier	old_priv		1096590	1					
ANR	1096597	AssignmentExpression	old_priv = Default_Priv_State		1096590	2		=			
ANR	1096598	Identifier	Default_Priv_State		1096590	0					
ANR	1096599	Identifier	Default_Priv_State		1096590	1					
ANR	1096600	ExpressionStatement	Default_Priv_State = priv	10609:1:325446:325471	1096590	1	True				
ANR	1096601	AssignmentExpression	Default_Priv_State = priv		1096590	0		=			
ANR	1096602	Identifier	Default_Priv_State		1096590	0					
ANR	1096603	Identifier	priv		1096590	1					
ANR	1096604	ReturnStatement	return old_priv ;	10610:1:325474:325489	1096590	2	True				
ANR	1096605	Identifier	old_priv		1096590	0					
ANR	1096606	ReturnType	priv_state		1096590	1					
ANR	1096607	Identifier	DaemonCore :: Register_Priv_State		1096590	2					
ANR	1096608	ParameterList	priv_state priv		1096590	3					
ANR	1096609	Parameter	priv_state priv	10606:33:325382:325396	1096590	0	True				
ANR	1096610	ParameterType	priv_state		1096590	0					
ANR	1096611	Identifier	priv		1096590	1					
ANR	1096612	CFGEntryNode	ENTRY		1096590		True				
ANR	1096613	CFGExitNode	EXIT		1096590		True				
ANR	1096614	Symbol	old_priv		1096590						
ANR	1096615	Symbol	priv		1096590						
ANR	1096616	Symbol	Default_Priv_State		1096590						
ANR	1096617	Function	DaemonCore :: CheckConfigSecurity	10613:0:325494:326246							
ANR	1096618	FunctionDef	"DaemonCore :: CheckConfigSecurity (const char * config , Sock * sock)"		1096617	0					
ANR	1096619	CompoundStatement		10615:0:325565:326246	1096617	0					
ANR	1096620	IdentifierDeclStatement	"StringList all_attrs ( config , ""\\n"" ) ;"	10619:1:325695:325730	1096617	0	True				
ANR	1096621	IdentifierDecl	"all_attrs ( config , ""\\n"" )"		1096617	0					
ANR	1096622	IdentifierDeclType	StringList		1096617	0					
ANR	1096623	Identifier	all_attrs		1096617	1					
ANR	1096624	Expression	"config , ""\\n"""		1096617	2					
ANR	1096625	Identifier	config		1096617	0					
ANR	1096626	PrimaryExpression	"""\\n"""		1096617	1					
ANR	1096627	IdentifierDeclStatement	bool all_attrs_okay = true ;	10623:1:325861:325888	1096617	1	True				
ANR	1096628	IdentifierDecl	all_attrs_okay = true		1096617	0					
ANR	1096629	IdentifierDeclType	bool		1096617	0					
ANR	1096630	Identifier	all_attrs_okay		1096617	1					
ANR	1096631	AssignmentExpression	all_attrs_okay = true		1096617	2		=			
ANR	1096632	Identifier	true		1096617	0					
ANR	1096633	Identifier	true		1096617	1					
ANR	1096634	IdentifierDeclStatement	char * single_attr ;	10625:1:325892:325909	1096617	2	True				
ANR	1096635	IdentifierDecl	* single_attr		1096617	0					
ANR	1096636	IdentifierDeclType	char *		1096617	0					
ANR	1096637	Identifier	single_attr		1096617	1					
ANR	1096638	ExpressionStatement	all_attrs . rewind ( )	10626:1:325912:325930	1096617	3	True				
ANR	1096639	CallExpression	all_attrs . rewind ( )		1096617	0					
ANR	1096640	Callee	all_attrs . rewind		1096617	0					
ANR	1096641	MemberAccess	all_attrs . rewind		1096617	0					
ANR	1096642	Identifier	all_attrs		1096617	0					
ANR	1096643	Identifier	rewind		1096617	1					
ANR	1096644	ArgumentList			1096617	1					
ANR	1096645	WhileStatement	while ( all_attrs_okay && ( single_attr = all_attrs . next ( ) ) )		1096617	4					
ANR	1096646	Condition	all_attrs_okay && ( single_attr = all_attrs . next ( ) )	10630:8:326048:326097	1096617	0	True				
ANR	1096647	AndExpression	all_attrs_okay && ( single_attr = all_attrs . next ( ) )		1096617	0		&&			
ANR	1096648	Identifier	all_attrs_okay		1096617	0					
ANR	1096649	AssignmentExpression	single_attr = all_attrs . next ( )		1096617	1		=			
ANR	1096650	Identifier	single_attr		1096617	0					
ANR	1096651	CallExpression	all_attrs . next ( )		1096617	1					
ANR	1096652	Callee	all_attrs . next		1096617	0					
ANR	1096653	MemberAccess	all_attrs . next		1096617	0					
ANR	1096654	Identifier	all_attrs		1096617	0					
ANR	1096655	Identifier	next		1096617	1					
ANR	1096656	ArgumentList			1096617	1					
ANR	1096657	CompoundStatement		16:60:534:534	1096617	1					
ANR	1096658	IfStatement	"if ( ! CheckConfigAttrSecurity ( single_attr , sock ) )"		1096617	0					
ANR	1096659	Condition	"! CheckConfigAttrSecurity ( single_attr , sock )"	10632:6:326140:326182	1096617	0	True				
ANR	1096660	UnaryOperationExpression	"! CheckConfigAttrSecurity ( single_attr , sock )"		1096617	0					
ANR	1096661	UnaryOperator	!		1096617	0					
ANR	1096662	CallExpression	"CheckConfigAttrSecurity ( single_attr , sock )"		1096617	1					
ANR	1096663	Callee	CheckConfigAttrSecurity		1096617	0					
ANR	1096664	Identifier	CheckConfigAttrSecurity		1096617	0					
ANR	1096665	ArgumentList	single_attr		1096617	1					
ANR	1096666	Argument	single_attr		1096617	0					
ANR	1096667	Identifier	single_attr		1096617	0					
ANR	1096668	Argument	sock		1096617	1					
ANR	1096669	Identifier	sock		1096617	0					
ANR	1096670	CompoundStatement		18:51:619:619	1096617	1					
ANR	1096671	ExpressionStatement	all_attrs_okay = false	10633:3:326190:326212	1096617	0	True				
ANR	1096672	AssignmentExpression	all_attrs_okay = false		1096617	0		=			
ANR	1096673	Identifier	all_attrs_okay		1096617	0					
ANR	1096674	Identifier	false		1096617	1					
ANR	1096675	ReturnStatement	return all_attrs_okay ;	10637:1:326223:326244	1096617	5	True				
ANR	1096676	Identifier	all_attrs_okay		1096617	0					
ANR	1096677	ReturnType	bool		1096617	1					
ANR	1096678	Identifier	DaemonCore :: CheckConfigSecurity		1096617	2					
ANR	1096679	ParameterList	"const char * config , Sock * sock"		1096617	3					
ANR	1096680	Parameter	const char * config	10614:33:325532:325549	1096617	0	True				
ANR	1096681	ParameterType	const char *		1096617	0					
ANR	1096682	Identifier	config		1096617	1					
ANR	1096683	Parameter	Sock * sock	10614:53:325552:325561	1096617	1	True				
ANR	1096684	ParameterType	Sock *		1096617	0					
ANR	1096685	Identifier	sock		1096617	1					
ANR	1096686	CFGEntryNode	ENTRY		1096617		True				
ANR	1096687	CFGExitNode	EXIT		1096617		True				
ANR	1096688	Symbol	sock		1096617						
ANR	1096689	Symbol	all_attrs		1096617						
ANR	1096690	Symbol	single_attr		1096617						
ANR	1096691	Symbol	CheckConfigAttrSecurity		1096617						
ANR	1096692	Symbol	true		1096617						
ANR	1096693	Symbol	false		1096617						
ANR	1096694	Symbol	all_attrs . next		1096617						
ANR	1096695	Symbol	config		1096617						
ANR	1096696	Symbol	all_attrs_okay		1096617						
ANR	1096697	Function	DaemonCore :: CheckConfigAttrSecurity	10642:0:326251:328379							
ANR	1096698	FunctionDef	"DaemonCore :: CheckConfigAttrSecurity (const char * name , Sock * sock)"		1096697	0					
ANR	1096699	CompoundStatement		10644:0:326324:328379	1096697	0					
ANR	1096700	IdentifierDeclStatement	const char * ip_str ;	10645:1:326327:326345	1096697	0	True				
ANR	1096701	IdentifierDecl	* ip_str		1096697	0					
ANR	1096702	IdentifierDeclType	const char *		1096697	0					
ANR	1096703	Identifier	ip_str		1096697	1					
ANR	1096704	IdentifierDeclStatement	int i ;	10646:1:326348:326353	1096697	1	True				
ANR	1096705	IdentifierDecl	i		1096697	0					
ANR	1096706	IdentifierDeclType	int		1096697	0					
ANR	1096707	Identifier	i		1096697	1					
ANR	1096708	ExpressionStatement	"dprintf ( D_ALWAYS , ""CheckConfigSecurity: name is: %s\\n"" , name )"	10649:2:326390:326453	1096697	2	True				
ANR	1096709	CallExpression	"dprintf ( D_ALWAYS , ""CheckConfigSecurity: name is: %s\\n"" , name )"		1096697	0					
ANR	1096710	Callee	dprintf		1096697	0					
ANR	1096711	Identifier	dprintf		1096697	0					
ANR	1096712	ArgumentList	D_ALWAYS		1096697	1					
ANR	1096713	Argument	D_ALWAYS		1096697	0					
ANR	1096714	Identifier	D_ALWAYS		1096697	0					
ANR	1096715	Argument	"""CheckConfigSecurity: name is: %s\\n"""		1096697	1					
ANR	1096716	PrimaryExpression	"""CheckConfigSecurity: name is: %s\\n"""		1096697	0					
ANR	1096717	Argument	name		1096697	2					
ANR	1096718	Identifier	name		1096697	0					
ANR	1096719	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1096697	3					
ANR	1096720	ForInit	i = 0 ;	10658:6:326813:326816	1096697	0	True				
ANR	1096721	AssignmentExpression	i = 0		1096697	0		=			
ANR	1096722	Identifier	i		1096697	0					
ANR	1096723	PrimaryExpression	0		1096697	1					
ANR	1096724	Condition	i < LAST_PERM	10658:11:326818:326828	1096697	1	True				
ANR	1096725	RelationalExpression	i < LAST_PERM		1096697	0		<			
ANR	1096726	Identifier	i		1096697	0					
ANR	1096727	Identifier	LAST_PERM		1096697	1					
ANR	1096728	PostIncDecOperationExpression	i ++	10658:24:326831:326833	1096697	2	True				
ANR	1096729	Identifier	i		1096697	0					
ANR	1096730	IncDec	++		1096697	1					
ANR	1096731	CompoundStatement		32:2:918:939	1096697	3					
ANR	1096732	IfStatement	if ( i == ALLOW )		1096697	0					
ANR	1096733	Condition	i == ALLOW	10661:6:326906:326915	1096697	0	True				
ANR	1096734	EqualityExpression	i == ALLOW		1096697	0		==			
ANR	1096735	Identifier	i		1096697	0					
ANR	1096736	Identifier	ALLOW		1096697	1					
ANR	1096737	CompoundStatement		18:19:594:594	1096697	1					
ANR	1096738	ContinueStatement	continue ;	10662:3:326924:326932	1096697	0	True				
ANR	1096739	IfStatement	if ( ! SettableAttrsLists [ i ] )		1096697	1					
ANR	1096740	Condition	! SettableAttrsLists [ i ]	10665:6:326945:326967	1096697	0	True				
ANR	1096741	UnaryOperationExpression	! SettableAttrsLists [ i ]		1096697	0					
ANR	1096742	UnaryOperator	!		1096697	0					
ANR	1096743	ArrayIndexing	SettableAttrsLists [ i ]		1096697	1					
ANR	1096744	Identifier	SettableAttrsLists		1096697	0					
ANR	1096745	Identifier	i		1096697	1					
ANR	1096746	CompoundStatement		22:32:646:646	1096697	1					
ANR	1096747	ContinueStatement	continue ;	10667:3:327029:327037	1096697	0	True				
ANR	1096748	IdentifierDeclStatement	MyString command_desc ;	10675:2:327243:327264	1096697	2	True				
ANR	1096749	IdentifierDecl	command_desc		1096697	0					
ANR	1096750	IdentifierDeclType	MyString		1096697	0					
ANR	1096751	Identifier	command_desc		1096697	1					
ANR	1096752	ExpressionStatement	"command_desc . sprintf ( ""remote config %s"" , name )"	10676:2:327268:327313	1096697	3	True				
ANR	1096753	CallExpression	"command_desc . sprintf ( ""remote config %s"" , name )"		1096697	0					
ANR	1096754	Callee	command_desc . sprintf		1096697	0					
ANR	1096755	MemberAccess	command_desc . sprintf		1096697	0					
ANR	1096756	Identifier	command_desc		1096697	0					
ANR	1096757	Identifier	sprintf		1096697	1					
ANR	1096758	ArgumentList	"""remote config %s"""		1096697	1					
ANR	1096759	Argument	"""remote config %s"""		1096697	0					
ANR	1096760	PrimaryExpression	"""remote config %s"""		1096697	0					
ANR	1096761	Argument	name		1096697	1					
ANR	1096762	Identifier	name		1096697	0					
ANR	1096763	IfStatement	"if ( Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) ) )"		1096697	4					
ANR	1096764	Condition	"Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) )"	10678:6:327322:327415	1096697	0	True				
ANR	1096765	CallExpression	"Verify ( command_desc . Value ( ) , ( DCpermission ) i , sock -> peer_addr ( ) , sock -> getFullyQualifiedUser ( ) )"		1096697	0					
ANR	1096766	Callee	Verify		1096697	0					
ANR	1096767	Identifier	Verify		1096697	0					
ANR	1096768	ArgumentList	command_desc . Value ( )		1096697	1					
ANR	1096769	Argument	command_desc . Value ( )		1096697	0					
ANR	1096770	CallExpression	command_desc . Value ( )		1096697	0					
ANR	1096771	Callee	command_desc . Value		1096697	0					
ANR	1096772	MemberAccess	command_desc . Value		1096697	0					
ANR	1096773	Identifier	command_desc		1096697	0					
ANR	1096774	Identifier	Value		1096697	1					
ANR	1096775	ArgumentList			1096697	1					
ANR	1096776	Argument	( DCpermission ) i		1096697	1					
ANR	1096777	CastExpression	( DCpermission ) i		1096697	0					
ANR	1096778	CastTarget	DCpermission		1096697	0					
ANR	1096779	Identifier	i		1096697	1					
ANR	1096780	Argument	sock -> peer_addr ( )		1096697	2					
ANR	1096781	CallExpression	sock -> peer_addr ( )		1096697	0					
ANR	1096782	Callee	sock -> peer_addr		1096697	0					
ANR	1096783	PtrMemberAccess	sock -> peer_addr		1096697	0					
ANR	1096784	Identifier	sock		1096697	0					
ANR	1096785	Identifier	peer_addr		1096697	1					
ANR	1096786	ArgumentList			1096697	1					
ANR	1096787	Argument	sock -> getFullyQualifiedUser ( )		1096697	3					
ANR	1096788	CallExpression	sock -> getFullyQualifiedUser ( )		1096697	0					
ANR	1096789	Callee	sock -> getFullyQualifiedUser		1096697	0					
ANR	1096790	PtrMemberAccess	sock -> getFullyQualifiedUser		1096697	0					
ANR	1096791	Identifier	sock		1096697	0					
ANR	1096792	Identifier	getFullyQualifiedUser		1096697	1					
ANR	1096793	ArgumentList			1096697	1					
ANR	1096794	CompoundStatement		35:102:1093:1093	1096697	1					
ANR	1096795	IfStatement	if ( ( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name ) )		1096697	0					
ANR	1096796	Condition	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name )	10681:7:327520:327584	1096697	0	True				
ANR	1096797	CallExpression	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard ( name )		1096697	0					
ANR	1096798	Callee	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		1096697	0					
ANR	1096799	PtrMemberAccess	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		1096697	0					
ANR	1096800	ArrayIndexing	SettableAttrsLists [ i ]		1096697	0					
ANR	1096801	Identifier	SettableAttrsLists		1096697	0					
ANR	1096802	Identifier	i		1096697	1					
ANR	1096803	Identifier	contains_anycase_withwildcard		1096697	1					
ANR	1096804	ArgumentList	name		1096697	1					
ANR	1096805	Argument	name		1096697	0					
ANR	1096806	Identifier	name		1096697	0					
ANR	1096807	CompoundStatement		39:42:1263:1263	1096697	1					
ANR	1096808	Statement	dprintf	10686:4:327667:327673	1096697	0	True				
ANR	1096809	Statement	(	10686:11:327674:327674	1096697	1	True				
ANR	1096810	Statement	D_ALWAYS	10686:13:327676:327683	1096697	2	True				
ANR	1096811	Statement	","	10686:21:327684:327684	1096697	3	True				
ANR	1096812	Statement	"""CheckConfigSecurity: """	10686:23:327686:327708	1096697	4	True				
ANR	1096813	Statement	"""found %s at access level %s\\n"""	10687:7:327717:327747	1096697	5	True				
ANR	1096814	Statement	","	10687:38:327748:327748	1096697	6	True				
ANR	1096815	Statement	name	10687:40:327750:327753	1096697	7	True				
ANR	1096816	Statement	","	10687:44:327754:327754	1096697	8	True				
ANR	1096817	Statement	PermString	10688:7:327763:327772	1096697	9	True				
ANR	1096818	Statement	(	10688:17:327773:327773	1096697	10	True				
ANR	1096819	Statement	(	10688:18:327774:327774	1096697	11	True				
ANR	1096820	Statement	DCpermission	10688:19:327775:327786	1096697	12	True				
ANR	1096821	Statement	)	10688:31:327787:327787	1096697	13	True				
ANR	1096822	Statement	i	10688:32:327788:327788	1096697	14	True				
ANR	1096823	Statement	)	10688:33:327789:327789	1096697	15	True				
ANR	1096824	Statement	)	10688:35:327791:327791	1096697	16	True				
ANR	1096825	ExpressionStatement		10688:36:327792:327792	1096697	17	True				
ANR	1096826	ReturnStatement	return true ;	10691:4:327806:327817	1096697	18	True				
ANR	1096827	Identifier	true		1096697	0					
ANR	1096828	ExpressionStatement	ip_str = sock -> peer_ip_str ( )	10702:1:328129:328157	1096697	4	True				
ANR	1096829	AssignmentExpression	ip_str = sock -> peer_ip_str ( )		1096697	0		=			
ANR	1096830	Identifier	ip_str		1096697	0					
ANR	1096831	CallExpression	sock -> peer_ip_str ( )		1096697	1					
ANR	1096832	Callee	sock -> peer_ip_str		1096697	0					
ANR	1096833	PtrMemberAccess	sock -> peer_ip_str		1096697	0					
ANR	1096834	Identifier	sock		1096697	0					
ANR	1096835	Identifier	peer_ip_str		1096697	1					
ANR	1096836	ArgumentList			1096697	1					
ANR	1096837	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"" , ip_str , name )"	10705:1:328181:328277	1096697	5	True				
ANR	1096838	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"" , ip_str , name )"		1096697	0					
ANR	1096839	Callee	dprintf		1096697	0					
ANR	1096840	Identifier	dprintf		1096697	0					
ANR	1096841	ArgumentList	D_ALWAYS		1096697	1					
ANR	1096842	Argument	D_ALWAYS		1096697	0					
ANR	1096843	Identifier	D_ALWAYS		1096697	0					
ANR	1096844	Argument	"""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"""		1096697	1					
ANR	1096845	PrimaryExpression	"""WARNING: Someone at %s is trying to modify \\""%s\\""\\n"""		1096697	0					
ANR	1096846	Argument	ip_str		1096697	2					
ANR	1096847	Identifier	ip_str		1096697	0					
ANR	1096848	Argument	name		1096697	3					
ANR	1096849	Identifier	name		1096697	0					
ANR	1096850	ExpressionStatement	"dprintf ( D_ALWAYS , ""WARNING: Potential security problem, request refused\\n"" )"	10708:1:328280:328361	1096697	6	True				
ANR	1096851	CallExpression	"dprintf ( D_ALWAYS , ""WARNING: Potential security problem, request refused\\n"" )"		1096697	0					
ANR	1096852	Callee	dprintf		1096697	0					
ANR	1096853	Identifier	dprintf		1096697	0					
ANR	1096854	ArgumentList	D_ALWAYS		1096697	1					
ANR	1096855	Argument	D_ALWAYS		1096697	0					
ANR	1096856	Identifier	D_ALWAYS		1096697	0					
ANR	1096857	Argument	"""WARNING: Potential security problem, request refused\\n"""		1096697	1					
ANR	1096858	PrimaryExpression	"""WARNING: Potential security problem, request refused\\n"""		1096697	0					
ANR	1096859	ReturnStatement	return false ;	10711:1:328365:328377	1096697	7	True				
ANR	1096860	Identifier	false		1096697	0					
ANR	1096861	ReturnType	bool		1096697	1					
ANR	1096862	Identifier	DaemonCore :: CheckConfigAttrSecurity		1096697	2					
ANR	1096863	ParameterList	"const char * name , Sock * sock"		1096697	3					
ANR	1096864	Parameter	const char * name	10643:37:326293:326308	1096697	0	True				
ANR	1096865	ParameterType	const char *		1096697	0					
ANR	1096866	Identifier	name		1096697	1					
ANR	1096867	Parameter	Sock * sock	10643:55:326311:326320	1096697	1	True				
ANR	1096868	ParameterType	Sock *		1096697	0					
ANR	1096869	Identifier	sock		1096697	1					
ANR	1096870	CFGEntryNode	ENTRY		1096697		True				
ANR	1096871	CFGExitNode	EXIT		1096697		True				
ANR	1096872	Symbol	LAST_PERM		1096697						
ANR	1096873	Symbol	* * i		1096697						
ANR	1096874	Symbol	D_ALWAYS		1096697						
ANR	1096875	Symbol	false		1096697						
ANR	1096876	Symbol	i		1096697						
ANR	1096877	Symbol	sock -> peer_ip_str		1096697						
ANR	1096878	Symbol	sock -> peer_addr		1096697						
ANR	1096879	Symbol	sock -> getFullyQualifiedUser		1096697						
ANR	1096880	Symbol	sock		1096697						
ANR	1096881	Symbol	* i		1096697						
ANR	1096882	Symbol	* SettableAttrsLists		1096697						
ANR	1096883	Symbol	command_desc . Value		1096697						
ANR	1096884	Symbol	SettableAttrsLists		1096697						
ANR	1096885	Symbol	command_desc		1096697						
ANR	1096886	Symbol	name		1096697						
ANR	1096887	Symbol	true		1096697						
ANR	1096888	Symbol	* * SettableAttrsLists		1096697						
ANR	1096889	Symbol	Verify		1096697						
ANR	1096890	Symbol	ip_str		1096697						
ANR	1096891	Symbol	ALLOW		1096697						
ANR	1096892	Symbol	* sock		1096697						
ANR	1096893	Symbol	( SettableAttrsLists [ i ] ) -> contains_anycase_withwildcard		1096697						
ANR	1096894	Function	DaemonCore :: InitSettableAttrsLists	10715:0:328383:329699							
ANR	1096895	FunctionDef	DaemonCore :: InitSettableAttrsLists ()		1096894	0					
ANR	1096896	CompoundStatement		10717:0:328431:329699	1096894	0					
ANR	1096897	IdentifierDeclStatement	int i ;	10718:1:328434:328439	1096894	0	True				
ANR	1096898	IdentifierDecl	i		1096894	0					
ANR	1096899	IdentifierDeclType	int		1096894	0					
ANR	1096900	Identifier	i		1096894	1					
ANR	1096901	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1096894	1					
ANR	1096902	ForInit	i = 0 ;	10721:6:328508:328511	1096894	0	True				
ANR	1096903	AssignmentExpression	i = 0		1096894	0		=			
ANR	1096904	Identifier	i		1096894	0					
ANR	1096905	PrimaryExpression	0		1096894	1					
ANR	1096906	Condition	i < LAST_PERM	10721:11:328513:328523	1096894	1	True				
ANR	1096907	RelationalExpression	i < LAST_PERM		1096894	0		<			
ANR	1096908	Identifier	i		1096894	0					
ANR	1096909	Identifier	LAST_PERM		1096894	1					
ANR	1096910	PostIncDecOperationExpression	i ++	10721:24:328526:328528	1096894	2	True				
ANR	1096911	Identifier	i		1096894	0					
ANR	1096912	IncDec	++		1096894	1					
ANR	1096913	CompoundStatement		5:30:100:100	1096894	3					
ANR	1096914	IfStatement	if ( SettableAttrsLists [ i ] )		1096894	0					
ANR	1096915	Condition	SettableAttrsLists [ i ]	10722:6:328540:328560	1096894	0	True				
ANR	1096916	ArrayIndexing	SettableAttrsLists [ i ]		1096894	0					
ANR	1096917	Identifier	SettableAttrsLists		1096894	0					
ANR	1096918	Identifier	i		1096894	1					
ANR	1096919	CompoundStatement		6:30:132:132	1096894	1					
ANR	1096920	Statement	delete	10723:3:328569:328574	1096894	0	True				
ANR	1096921	ExpressionStatement	SettableAttrsLists [ i ]	10723:10:328576:328597	1096894	1	True				
ANR	1096922	ArrayIndexing	SettableAttrsLists [ i ]		1096894	0					
ANR	1096923	Identifier	SettableAttrsLists		1096894	0					
ANR	1096924	Identifier	i		1096894	1					
ANR	1096925	ExpressionStatement	SettableAttrsLists [ i ] = NULL	10724:3:328602:328630	1096894	2	True				
ANR	1096926	AssignmentExpression	SettableAttrsLists [ i ] = NULL		1096894	0		=			
ANR	1096927	ArrayIndexing	SettableAttrsLists [ i ]		1096894	0					
ANR	1096928	Identifier	SettableAttrsLists		1096894	0					
ANR	1096929	Identifier	i		1096894	1					
ANR	1096930	Identifier	NULL		1096894	1					
ANR	1096931	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1096894	2					
ANR	1096932	ForInit	i = 0 ;	10732:6:328886:328889	1096894	0	True				
ANR	1096933	AssignmentExpression	i = 0		1096894	0		=			
ANR	1096934	Identifier	i		1096894	0					
ANR	1096935	PrimaryExpression	0		1096894	1					
ANR	1096936	Condition	i < LAST_PERM	10732:11:328891:328901	1096894	1	True				
ANR	1096937	RelationalExpression	i < LAST_PERM		1096894	0		<			
ANR	1096938	Identifier	i		1096894	0					
ANR	1096939	Identifier	LAST_PERM		1096894	1					
ANR	1096940	PostIncDecOperationExpression	i ++	10732:24:328904:328906	1096894	2	True				
ANR	1096941	Identifier	i		1096894	0					
ANR	1096942	IncDec	++		1096894	1					
ANR	1096943	CompoundStatement		16:30:478:478	1096894	3					
ANR	1096944	IfStatement	if ( i == ALLOW )		1096894	0					
ANR	1096945	Condition	i == ALLOW	10734:6:328978:328987	1096894	0	True				
ANR	1096946	EqualityExpression	i == ALLOW		1096894	0		==			
ANR	1096947	Identifier	i		1096894	0					
ANR	1096948	Identifier	ALLOW		1096894	1					
ANR	1096949	CompoundStatement		18:19:559:559	1096894	1					
ANR	1096950	ContinueStatement	continue ;	10735:3:328996:329004	1096894	0	True				
ANR	1096951	IfStatement	"if ( InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i ) )"		1096894	1					
ANR	1096952	Condition	"InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i )"	10737:6:329016:329069	1096894	0	True				
ANR	1096953	CallExpression	"InitSettableAttrsList ( get_mySubSystem ( ) -> getName ( ) , i )"		1096894	0					
ANR	1096954	Callee	InitSettableAttrsList		1096894	0					
ANR	1096955	Identifier	InitSettableAttrsList		1096894	0					
ANR	1096956	ArgumentList	get_mySubSystem ( ) -> getName ( )		1096894	1					
ANR	1096957	Argument	get_mySubSystem ( ) -> getName ( )		1096894	0					
ANR	1096958	CallExpression	get_mySubSystem ( ) -> getName ( )		1096894	0					
ANR	1096959	Callee	get_mySubSystem ( ) -> getName		1096894	0					
ANR	1096960	PtrMemberAccess	get_mySubSystem ( ) -> getName		1096894	0					
ANR	1096961	CallExpression	get_mySubSystem ( )		1096894	0					
ANR	1096962	Callee	get_mySubSystem		1096894	0					
ANR	1096963	Identifier	get_mySubSystem		1096894	0					
ANR	1096964	ArgumentList			1096894	1					
ANR	1096965	Identifier	getName		1096894	1					
ANR	1096966	ArgumentList			1096894	1					
ANR	1096967	Argument	i		1096894	1					
ANR	1096968	Identifier	i		1096894	0					
ANR	1096969	CompoundStatement		21:63:641:641	1096894	1					
ANR	1096970	ContinueStatement	continue ;	10739:3:329129:329137	1096894	0	True				
ANR	1096971	ExpressionStatement	"InitSettableAttrsList ( NULL , i )"	10744:2:329323:329355	1096894	2	True				
ANR	1096972	CallExpression	"InitSettableAttrsList ( NULL , i )"		1096894	0					
ANR	1096973	Callee	InitSettableAttrsList		1096894	0					
ANR	1096974	Identifier	InitSettableAttrsList		1096894	0					
ANR	1096975	ArgumentList	NULL		1096894	1					
ANR	1096976	Argument	NULL		1096894	0					
ANR	1096977	Identifier	NULL		1096894	0					
ANR	1096978	Argument	i		1096894	1					
ANR	1096979	Identifier	i		1096894	0					
ANR	1096980	IdentifierDeclStatement	char * tmp ;	10749:1:329440:329449	1096894	3	True				
ANR	1096981	IdentifierDecl	* tmp		1096894	0					
ANR	1096982	IdentifierDeclType	char *		1096894	0					
ANR	1096983	Identifier	tmp		1096894	1					
ANR	1096984	ForStatement	for ( i = 0 ; i < LAST_PERM ; i ++ )		1096894	4					
ANR	1096985	ForInit	i = 0 ;	10750:6:329457:329460	1096894	0	True				
ANR	1096986	AssignmentExpression	i = 0		1096894	0		=			
ANR	1096987	Identifier	i		1096894	0					
ANR	1096988	PrimaryExpression	0		1096894	1					
ANR	1096989	Condition	i < LAST_PERM	10750:11:329462:329472	1096894	1	True				
ANR	1096990	RelationalExpression	i < LAST_PERM		1096894	0		<			
ANR	1096991	Identifier	i		1096894	0					
ANR	1096992	Identifier	LAST_PERM		1096894	1					
ANR	1096993	PostIncDecOperationExpression	i ++	10750:24:329475:329477	1096894	2	True				
ANR	1096994	Identifier	i		1096894	0					
ANR	1096995	IncDec	++		1096894	1					
ANR	1096996	CompoundStatement		34:30:1049:1049	1096894	3					
ANR	1096997	IfStatement	if ( SettableAttrsLists [ i ] )		1096894	0					
ANR	1096998	Condition	SettableAttrsLists [ i ]	10751:6:329489:329509	1096894	0	True				
ANR	1096999	ArrayIndexing	SettableAttrsLists [ i ]		1096894	0					
ANR	1097000	Identifier	SettableAttrsLists		1096894	0					
ANR	1097001	Identifier	i		1096894	1					
ANR	1097002	CompoundStatement		35:30:1081:1081	1096894	1					
ANR	1097003	ExpressionStatement	tmp = ( SettableAttrsLists [ i ] ) -> print_to_string ( )	10752:3:329518:329566	1096894	0	True				
ANR	1097004	AssignmentExpression	tmp = ( SettableAttrsLists [ i ] ) -> print_to_string ( )		1096894	0		=			
ANR	1097005	Identifier	tmp		1096894	0					
ANR	1097006	CallExpression	( SettableAttrsLists [ i ] ) -> print_to_string ( )		1096894	1					
ANR	1097007	Callee	( SettableAttrsLists [ i ] ) -> print_to_string		1096894	0					
ANR	1097008	PtrMemberAccess	( SettableAttrsLists [ i ] ) -> print_to_string		1096894	0					
ANR	1097009	ArrayIndexing	SettableAttrsLists [ i ]		1096894	0					
ANR	1097010	Identifier	SettableAttrsLists		1096894	0					
ANR	1097011	Identifier	i		1096894	1					
ANR	1097012	Identifier	print_to_string		1096894	1					
ANR	1097013	ArgumentList			1096894	1					
ANR	1097014	ExpressionStatement	"dprintf ( D_ALWAYS , ""SettableAttrList[%s]: %s\\n"" , PermString ( ( DCpermission ) i ) , tmp ? tmp : """" )"	10753:3:329571:329667	1096894	1	True				
ANR	1097015	CallExpression	"dprintf ( D_ALWAYS , ""SettableAttrList[%s]: %s\\n"" , PermString ( ( DCpermission ) i ) , tmp ? tmp : """" )"		1096894	0					
ANR	1097016	Callee	dprintf		1096894	0					
ANR	1097017	Identifier	dprintf		1096894	0					
ANR	1097018	ArgumentList	D_ALWAYS		1096894	1					
ANR	1097019	Argument	D_ALWAYS		1096894	0					
ANR	1097020	Identifier	D_ALWAYS		1096894	0					
ANR	1097021	Argument	"""SettableAttrList[%s]: %s\\n"""		1096894	1					
ANR	1097022	PrimaryExpression	"""SettableAttrList[%s]: %s\\n"""		1096894	0					
ANR	1097023	Argument	PermString ( ( DCpermission ) i )		1096894	2					
ANR	1097024	CallExpression	PermString ( ( DCpermission ) i )		1096894	0					
ANR	1097025	Callee	PermString		1096894	0					
ANR	1097026	Identifier	PermString		1096894	0					
ANR	1097027	ArgumentList	( DCpermission ) i		1096894	1					
ANR	1097028	Argument	( DCpermission ) i		1096894	0					
ANR	1097029	CastExpression	( DCpermission ) i		1096894	0					
ANR	1097030	CastTarget	DCpermission		1096894	0					
ANR	1097031	Identifier	i		1096894	1					
ANR	1097032	Argument	"tmp ? tmp : """""		1096894	3					
ANR	1097033	ConditionalExpression	"tmp ? tmp : """""		1096894	0					
ANR	1097034	Condition	tmp		1096894	0					
ANR	1097035	Identifier	tmp		1096894	0					
ANR	1097036	Identifier	tmp		1096894	1					
ANR	1097037	PrimaryExpression	""""""		1096894	2					
ANR	1097038	ExpressionStatement	free ( tmp )	10755:3:329672:329683	1096894	2	True				
ANR	1097039	CallExpression	free ( tmp )		1096894	0					
ANR	1097040	Callee	free		1096894	0					
ANR	1097041	Identifier	free		1096894	0					
ANR	1097042	ArgumentList	tmp		1096894	1					
ANR	1097043	Argument	tmp		1096894	0					
ANR	1097044	Identifier	tmp		1096894	0					
ANR	1097045	ReturnType	void		1096894	1					
ANR	1097046	Identifier	DaemonCore :: InitSettableAttrsLists		1096894	2					
ANR	1097047	ParameterList			1096894	3					
ANR	1097048	CFGEntryNode	ENTRY		1096894		True				
ANR	1097049	CFGExitNode	EXIT		1096894		True				
ANR	1097050	Symbol	LAST_PERM		1096894						
ANR	1097051	Symbol	* * i		1096894						
ANR	1097052	Symbol	NULL		1096894						
ANR	1097053	Symbol	get_mySubSystem ( ) -> getName		1096894						
ANR	1097054	Symbol	* get_mySubSystem		1096894						
ANR	1097055	Symbol	D_ALWAYS		1096894						
ANR	1097056	Symbol	i		1096894						
ANR	1097057	Symbol	InitSettableAttrsList		1096894						
ANR	1097058	Symbol	* i		1096894						
ANR	1097059	Symbol	* SettableAttrsLists		1096894						
ANR	1097060	Symbol	tmp		1096894						
ANR	1097061	Symbol	SettableAttrsLists		1096894						
ANR	1097062	Symbol	* * SettableAttrsLists		1096894						
ANR	1097063	Symbol	( SettableAttrsLists [ i ] ) -> print_to_string		1096894						
ANR	1097064	Symbol	PermString		1096894						
ANR	1097065	Symbol	get_mySubSystem		1096894						
ANR	1097066	Symbol	ALLOW		1096894						
ANR	1097067	DeclStmt									
ANR	1097068	Decl							MyString	MyString	param_name
ANR	1097069	DeclStmt									
ANR	1097070	Decl							char	char *	tmp
ANR	1097071	Function	DaemonCore :: getKeyCache	10787:0:330271:330341							
ANR	1097072	FunctionDef	DaemonCore :: getKeyCache ()		1097071	0					
ANR	1097073	CompoundStatement		10788:26:330307:330341	1097071	0					
ANR	1097074	ReturnStatement	return sec_man -> session_cache ;	10789:1:330310:330339	1097071	0	True				
ANR	1097075	PtrMemberAccess	sec_man -> session_cache		1097071	0					
ANR	1097076	Identifier	sec_man		1097071	0					
ANR	1097077	Identifier	session_cache		1097071	1					
ANR	1097078	ReturnType	KeyCache *		1097071	1					
ANR	1097079	Identifier	DaemonCore :: getKeyCache		1097071	2					
ANR	1097080	ParameterList			1097071	3					
ANR	1097081	CFGEntryNode	ENTRY		1097071		True				
ANR	1097082	CFGExitNode	EXIT		1097071		True				
ANR	1097083	Symbol	sec_man -> session_cache		1097071						
ANR	1097084	Symbol	* sec_man		1097071						
ANR	1097085	Symbol	sec_man		1097071						
ANR	1097086	Function	DaemonCore :: getSecMan	10792:0:330344:330400							
ANR	1097087	FunctionDef	DaemonCore :: getSecMan ()		1097086	0					
ANR	1097088	CompoundStatement		10793:0:330378:330400	1097086	0					
ANR	1097089	ReturnStatement	return sec_man ;	10794:4:330384:330398	1097086	0	True				
ANR	1097090	Identifier	sec_man		1097086	0					
ANR	1097091	ReturnType	SecMan *		1097086	1					
ANR	1097092	Identifier	DaemonCore :: getSecMan		1097086	2					
ANR	1097093	ParameterList			1097086	3					
ANR	1097094	CFGEntryNode	ENTRY		1097086		True				
ANR	1097095	CFGExitNode	EXIT		1097086		True				
ANR	1097096	Symbol	sec_man		1097086						
ANR	1097097	Function	DaemonCore :: clearSession	10797:0:330403:330984							
ANR	1097098	FunctionDef	DaemonCore :: clearSession (pid_t pid)		1097097	0					
ANR	1097099	CompoundStatement		10798:0:330446:330984	1097097	0					
ANR	1097100	IfStatement	if ( sec_man )		1097097	0					
ANR	1097101	Condition	sec_man	10802:4:330626:330632	1097097	0	True				
ANR	1097102	Identifier	sec_man		1097097	0					
ANR	1097103	CompoundStatement		5:13:188:188	1097097	1					
ANR	1097104	ExpressionStatement	"sec_man -> invalidateByParentAndPid ( sec_man -> my_unique_id ( ) , pid )"	10803:2:330639:330702	1097097	0	True				
ANR	1097105	CallExpression	"sec_man -> invalidateByParentAndPid ( sec_man -> my_unique_id ( ) , pid )"		1097097	0					
ANR	1097106	Callee	sec_man -> invalidateByParentAndPid		1097097	0					
ANR	1097107	PtrMemberAccess	sec_man -> invalidateByParentAndPid		1097097	0					
ANR	1097108	Identifier	sec_man		1097097	0					
ANR	1097109	Identifier	invalidateByParentAndPid		1097097	1					
ANR	1097110	ArgumentList	sec_man -> my_unique_id ( )		1097097	1					
ANR	1097111	Argument	sec_man -> my_unique_id ( )		1097097	0					
ANR	1097112	CallExpression	sec_man -> my_unique_id ( )		1097097	0					
ANR	1097113	Callee	sec_man -> my_unique_id		1097097	0					
ANR	1097114	PtrMemberAccess	sec_man -> my_unique_id		1097097	0					
ANR	1097115	Identifier	sec_man		1097097	0					
ANR	1097116	Identifier	my_unique_id		1097097	1					
ANR	1097117	ArgumentList			1097097	1					
ANR	1097118	Argument	pid		1097097	1					
ANR	1097119	Identifier	pid		1097097	0					
ANR	1097120	IdentifierDeclStatement	PidEntry * pidentry = NULL ;	10807:4:330784:330810	1097097	1	True				
ANR	1097121	IdentifierDecl	* pidentry = NULL		1097097	0					
ANR	1097122	IdentifierDeclType	PidEntry *		1097097	0					
ANR	1097123	Identifier	pidentry		1097097	1					
ANR	1097124	AssignmentExpression	* pidentry = NULL		1097097	2		=			
ANR	1097125	Identifier	NULL		1097097	0					
ANR	1097126	Identifier	NULL		1097097	1					
ANR	1097127	IfStatement	"if ( pidTable -> lookup ( pid , pidentry ) != - 1 )"		1097097	2					
ANR	1097128	Condition	"pidTable -> lookup ( pid , pidentry ) != - 1"	10809:9:330822:330857	1097097	0	True				
ANR	1097129	EqualityExpression	"pidTable -> lookup ( pid , pidentry ) != - 1"		1097097	0		!=			
ANR	1097130	CallExpression	"pidTable -> lookup ( pid , pidentry )"		1097097	0					
ANR	1097131	Callee	pidTable -> lookup		1097097	0					
ANR	1097132	PtrMemberAccess	pidTable -> lookup		1097097	0					
ANR	1097133	Identifier	pidTable		1097097	0					
ANR	1097134	Identifier	lookup		1097097	1					
ANR	1097135	ArgumentList	pid		1097097	1					
ANR	1097136	Argument	pid		1097097	0					
ANR	1097137	Identifier	pid		1097097	0					
ANR	1097138	Argument	pidentry		1097097	1					
ANR	1097139	Identifier	pidentry		1097097	0					
ANR	1097140	UnaryOperationExpression	- 1		1097097	1					
ANR	1097141	UnaryOperator	-		1097097	0					
ANR	1097142	PrimaryExpression	1		1097097	1					
ANR	1097143	CompoundStatement		12:48:414:414	1097097	1					
ANR	1097144	IfStatement	if ( sec_man && pidentry )		1097097	0					
ANR	1097145	Condition	sec_man && pidentry	10810:12:330875:330893	1097097	0	True				
ANR	1097146	AndExpression	sec_man && pidentry		1097097	0		&&			
ANR	1097147	Identifier	sec_man		1097097	0					
ANR	1097148	Identifier	pidentry		1097097	1					
ANR	1097149	CompoundStatement		13:33:449:449	1097097	1					
ANR	1097150	ExpressionStatement	sec_man -> invalidateHost ( pidentry -> sinful_string . Value ( ) )	10811:12:330910:330966	1097097	0	True				
ANR	1097151	CallExpression	sec_man -> invalidateHost ( pidentry -> sinful_string . Value ( ) )		1097097	0					
ANR	1097152	Callee	sec_man -> invalidateHost		1097097	0					
ANR	1097153	PtrMemberAccess	sec_man -> invalidateHost		1097097	0					
ANR	1097154	Identifier	sec_man		1097097	0					
ANR	1097155	Identifier	invalidateHost		1097097	1					
ANR	1097156	ArgumentList	pidentry -> sinful_string . Value ( )		1097097	1					
ANR	1097157	Argument	pidentry -> sinful_string . Value ( )		1097097	0					
ANR	1097158	CallExpression	pidentry -> sinful_string . Value ( )		1097097	0					
ANR	1097159	Callee	pidentry -> sinful_string . Value		1097097	0					
ANR	1097160	MemberAccess	pidentry -> sinful_string . Value		1097097	0					
ANR	1097161	PtrMemberAccess	pidentry -> sinful_string		1097097	0					
ANR	1097162	Identifier	pidentry		1097097	0					
ANR	1097163	Identifier	sinful_string		1097097	1					
ANR	1097164	Identifier	Value		1097097	1					
ANR	1097165	ArgumentList			1097097	1					
ANR	1097166	ReturnType	void		1097097	1					
ANR	1097167	Identifier	DaemonCore :: clearSession		1097097	2					
ANR	1097168	ParameterList	pid_t pid		1097097	3					
ANR	1097169	Parameter	pid_t pid	10797:32:330435:330443	1097097	0	True				
ANR	1097170	ParameterType	pid_t		1097097	0					
ANR	1097171	Identifier	pid		1097097	1					
ANR	1097172	CFGEntryNode	ENTRY		1097097		True				
ANR	1097173	CFGExitNode	EXIT		1097097		True				
ANR	1097174	Symbol	pidTable		1097097						
ANR	1097175	Symbol	* sec_man		1097097						
ANR	1097176	Symbol	NULL		1097097						
ANR	1097177	Symbol	pidTable -> lookup		1097097						
ANR	1097178	Symbol	pidentry -> sinful_string . Value		1097097						
ANR	1097179	Symbol	* pidTable		1097097						
ANR	1097180	Symbol	pidentry -> sinful_string		1097097						
ANR	1097181	Symbol	* pidentry		1097097						
ANR	1097182	Symbol	pid		1097097						
ANR	1097183	Symbol	sec_man		1097097						
ANR	1097184	Symbol	sec_man -> my_unique_id		1097097						
ANR	1097185	Symbol	pidentry		1097097						
ANR	1097186	Function	DaemonCore :: invalidateSessionCache	10816:0:330987:331158							
ANR	1097187	FunctionDef	DaemonCore :: invalidateSessionCache ()		1097186	0					
ANR	1097188	CompoundStatement		10817:0:331031:331158	1097186	0					
ANR	1097189	ReturnStatement	return ;	10819:1:331085:331091	1097186	0	True				
ANR	1097190	IfStatement	if ( sec_man )		1097186	1					
ANR	1097191	Condition	sec_man	10821:8:331102:331108	1097186	0	True				
ANR	1097192	Identifier	sec_man		1097186	0					
ANR	1097193	CompoundStatement		5:17:79:79	1097186	1					
ANR	1097194	ExpressionStatement	sec_man -> invalidateAllCache ( )	10822:8:331121:331150	1097186	0	True				
ANR	1097195	CallExpression	sec_man -> invalidateAllCache ( )		1097186	0					
ANR	1097196	Callee	sec_man -> invalidateAllCache		1097186	0					
ANR	1097197	PtrMemberAccess	sec_man -> invalidateAllCache		1097186	0					
ANR	1097198	Identifier	sec_man		1097186	0					
ANR	1097199	Identifier	invalidateAllCache		1097186	1					
ANR	1097200	ArgumentList			1097186	1					
ANR	1097201	ReturnType	void		1097186	1					
ANR	1097202	Identifier	DaemonCore :: invalidateSessionCache		1097186	2					
ANR	1097203	ParameterList			1097186	3					
ANR	1097204	CFGEntryNode	ENTRY		1097186		True				
ANR	1097205	CFGExitNode	EXIT		1097186		True				
ANR	1097206	Symbol	sec_man		1097186						
ANR	1097207	Function	DaemonCore :: set_cookie	10827:0:331162:331781							
ANR	1097208	FunctionDef	"DaemonCore :: set_cookie (int len , const unsigned char * data)"		1097207	0					
ANR	1097209	CompoundStatement		10827:68:331230:331781	1097207	0					
ANR	1097210	IfStatement	if ( _cookie_data )		1097207	0					
ANR	1097211	Condition	_cookie_data	10828:5:331237:331248	1097207	0	True				
ANR	1097212	Identifier	_cookie_data		1097207	0					
ANR	1097213	CompoundStatement		2:19:20:20	1097207	1					
ANR	1097214	IfStatement	if ( _cookie_data_old )		1097207	0					
ANR	1097215	Condition	_cookie_data_old	10832:7:331376:331391	1097207	0	True				
ANR	1097216	Identifier	_cookie_data_old		1097207	0					
ANR	1097217	CompoundStatement		6:26:164:164	1097207	1					
ANR	1097218	ExpressionStatement	free ( _cookie_data_old )	10833:3:331400:331422	1097207	0	True				
ANR	1097219	CallExpression	free ( _cookie_data_old )		1097207	0					
ANR	1097220	Callee	free		1097207	0					
ANR	1097221	Identifier	free		1097207	0					
ANR	1097222	ArgumentList	_cookie_data_old		1097207	1					
ANR	1097223	Argument	_cookie_data_old		1097207	0					
ANR	1097224	Identifier	_cookie_data_old		1097207	0					
ANR	1097225	ExpressionStatement	_cookie_data_old = _cookie_data	10835:2:331430:331461	1097207	1	True				
ANR	1097226	AssignmentExpression	_cookie_data_old = _cookie_data		1097207	0		=			
ANR	1097227	Identifier	_cookie_data_old		1097207	0					
ANR	1097228	Identifier	_cookie_data		1097207	1					
ANR	1097229	ExpressionStatement	_cookie_len_old = _cookie_len	10836:2:331465:331495	1097207	2	True				
ANR	1097230	AssignmentExpression	_cookie_len_old = _cookie_len		1097207	0		=			
ANR	1097231	Identifier	_cookie_len_old		1097207	0					
ANR	1097232	Identifier	_cookie_len		1097207	1					
ANR	1097233	ExpressionStatement	_cookie_data = NULL	10839:2:331539:331558	1097207	3	True				
ANR	1097234	AssignmentExpression	_cookie_data = NULL		1097207	0		=			
ANR	1097235	Identifier	_cookie_data		1097207	0					
ANR	1097236	Identifier	NULL		1097207	1					
ANR	1097237	ExpressionStatement	_cookie_len = 0	10840:2:331562:331578	1097207	4	True				
ANR	1097238	AssignmentExpression	_cookie_len = 0		1097207	0		=			
ANR	1097239	Identifier	_cookie_len		1097207	0					
ANR	1097240	PrimaryExpression	0		1097207	1					
ANR	1097241	IfStatement	if ( data )		1097207	1					
ANR	1097242	Condition	data	10843:5:331589:331592	1097207	0	True				
ANR	1097243	Identifier	data		1097207	0					
ANR	1097244	CompoundStatement		17:11:364:364	1097207	1					
ANR	1097245	ExpressionStatement	_cookie_data = ( unsigned char * ) malloc ( len )	10844:2:331599:331643	1097207	0	True				
ANR	1097246	AssignmentExpression	_cookie_data = ( unsigned char * ) malloc ( len )		1097207	0		=			
ANR	1097247	Identifier	_cookie_data		1097207	0					
ANR	1097248	CastExpression	( unsigned char * ) malloc ( len )		1097207	1					
ANR	1097249	CastTarget	unsigned char *		1097207	0					
ANR	1097250	CallExpression	malloc ( len )		1097207	1					
ANR	1097251	Callee	malloc		1097207	0					
ANR	1097252	Identifier	malloc		1097207	0					
ANR	1097253	ArgumentList	len		1097207	1					
ANR	1097254	Argument	len		1097207	0					
ANR	1097255	Identifier	len		1097207	0					
ANR	1097256	IfStatement	if ( ! _cookie_data )		1097207	1					
ANR	1097257	Condition	! _cookie_data	10845:6:331651:331663	1097207	0	True				
ANR	1097258	UnaryOperationExpression	! _cookie_data		1097207	0					
ANR	1097259	UnaryOperator	!		1097207	0					
ANR	1097260	Identifier	_cookie_data		1097207	1					
ANR	1097261	CompoundStatement		19:21:435:435	1097207	1					
ANR	1097262	ReturnStatement	return false ;	10847:3:331688:331700	1097207	0	True				
ANR	1097263	Identifier	false		1097207	0					
ANR	1097264	ExpressionStatement	_cookie_len = len	10849:2:331708:331725	1097207	2	True				
ANR	1097265	AssignmentExpression	_cookie_len = len		1097207	0		=			
ANR	1097266	Identifier	_cookie_len		1097207	0					
ANR	1097267	Identifier	len		1097207	1					
ANR	1097268	ExpressionStatement	"memcpy ( _cookie_data , data , len )"	10850:2:331729:331761	1097207	3	True				
ANR	1097269	CallExpression	"memcpy ( _cookie_data , data , len )"		1097207	0					
ANR	1097270	Callee	memcpy		1097207	0					
ANR	1097271	Identifier	memcpy		1097207	0					
ANR	1097272	ArgumentList	_cookie_data		1097207	1					
ANR	1097273	Argument	_cookie_data		1097207	0					
ANR	1097274	Identifier	_cookie_data		1097207	0					
ANR	1097275	Argument	data		1097207	1					
ANR	1097276	Identifier	data		1097207	0					
ANR	1097277	Argument	len		1097207	2					
ANR	1097278	Identifier	len		1097207	0					
ANR	1097279	ReturnStatement	return true ;	10853:1:331768:331779	1097207	2	True				
ANR	1097280	Identifier	true		1097207	0					
ANR	1097281	ReturnType	bool		1097207	1					
ANR	1097282	Identifier	DaemonCore :: set_cookie		1097207	2					
ANR	1097283	ParameterList	"int len , const unsigned char * data"		1097207	3					
ANR	1097284	Parameter	int len	10827:31:331193:331199	1097207	0	True				
ANR	1097285	ParameterType	int		1097207	0					
ANR	1097286	Identifier	len		1097207	1					
ANR	1097287	Parameter	const unsigned char * data	10827:40:331202:331226	1097207	1	True				
ANR	1097288	ParameterType	const unsigned char *		1097207	0					
ANR	1097289	Identifier	data		1097207	1					
ANR	1097290	CFGEntryNode	ENTRY		1097207		True				
ANR	1097291	CFGExitNode	EXIT		1097207		True				
ANR	1097292	Symbol	malloc		1097207						
ANR	1097293	Symbol	_cookie_len_old		1097207						
ANR	1097294	Symbol	NULL		1097207						
ANR	1097295	Symbol	len		1097207						
ANR	1097296	Symbol	data		1097207						
ANR	1097297	Symbol	_cookie_data		1097207						
ANR	1097298	Symbol	_cookie_data_old		1097207						
ANR	1097299	Symbol	false		1097207						
ANR	1097300	Symbol	true		1097207						
ANR	1097301	Symbol	_cookie_len		1097207						
ANR	1097302	Function	DaemonCore :: get_cookie	10856:0:331784:332065							
ANR	1097303	FunctionDef	"DaemonCore :: get_cookie (int & len , unsigned char * & data)"		1097302	0					
ANR	1097304	CompoundStatement		10856:64:331848:332065	1097302	0					
ANR	1097305	IfStatement	if ( data != NULL )		1097302	0					
ANR	1097306	Condition	data != NULL	10857:5:331855:331866	1097302	0	True				
ANR	1097307	EqualityExpression	data != NULL		1097302	0		!=			
ANR	1097308	Identifier	data		1097302	0					
ANR	1097309	Identifier	NULL		1097302	1					
ANR	1097310	CompoundStatement		2:19:20:20	1097302	1					
ANR	1097311	ReturnStatement	return false ;	10858:2:331873:331885	1097302	0	True				
ANR	1097312	Identifier	false		1097302	0					
ANR	1097313	ExpressionStatement	data = ( unsigned char * ) malloc ( _cookie_len )	10860:1:331891:331935	1097302	1	True				
ANR	1097314	AssignmentExpression	data = ( unsigned char * ) malloc ( _cookie_len )		1097302	0		=			
ANR	1097315	Identifier	data		1097302	0					
ANR	1097316	CastExpression	( unsigned char * ) malloc ( _cookie_len )		1097302	1					
ANR	1097317	CastTarget	unsigned char *		1097302	0					
ANR	1097318	CallExpression	malloc ( _cookie_len )		1097302	1					
ANR	1097319	Callee	malloc		1097302	0					
ANR	1097320	Identifier	malloc		1097302	0					
ANR	1097321	ArgumentList	_cookie_len		1097302	1					
ANR	1097322	Argument	_cookie_len		1097302	0					
ANR	1097323	Identifier	_cookie_len		1097302	0					
ANR	1097324	IfStatement	if ( ! data )		1097302	2					
ANR	1097325	Condition	! data	10861:5:331942:331946	1097302	0	True				
ANR	1097326	UnaryOperationExpression	! data		1097302	0					
ANR	1097327	UnaryOperator	!		1097302	0					
ANR	1097328	Identifier	data		1097302	1					
ANR	1097329	CompoundStatement		6:12:100:100	1097302	1					
ANR	1097330	ReturnStatement	return false ;	10863:2:331969:331981	1097302	0	True				
ANR	1097331	Identifier	false		1097302	0					
ANR	1097332	ExpressionStatement	len = _cookie_len	10866:1:331988:332005	1097302	3	True				
ANR	1097333	AssignmentExpression	len = _cookie_len		1097302	0		=			
ANR	1097334	Identifier	len		1097302	0					
ANR	1097335	Identifier	_cookie_len		1097302	1					
ANR	1097336	ExpressionStatement	"memcpy ( data , _cookie_data , _cookie_len )"	10867:1:332008:332048	1097302	4	True				
ANR	1097337	CallExpression	"memcpy ( data , _cookie_data , _cookie_len )"		1097302	0					
ANR	1097338	Callee	memcpy		1097302	0					
ANR	1097339	Identifier	memcpy		1097302	0					
ANR	1097340	ArgumentList	data		1097302	1					
ANR	1097341	Argument	data		1097302	0					
ANR	1097342	Identifier	data		1097302	0					
ANR	1097343	Argument	_cookie_data		1097302	1					
ANR	1097344	Identifier	_cookie_data		1097302	0					
ANR	1097345	Argument	_cookie_len		1097302	2					
ANR	1097346	Identifier	_cookie_len		1097302	0					
ANR	1097347	ReturnStatement	return true ;	10869:1:332052:332063	1097302	5	True				
ANR	1097348	Identifier	true		1097302	0					
ANR	1097349	ReturnType	bool		1097302	1					
ANR	1097350	Identifier	DaemonCore :: get_cookie		1097302	2					
ANR	1097351	ParameterList	"int & len , unsigned char * & data"		1097302	3					
ANR	1097352	Parameter	int & len	10856:31:331815:331822	1097302	0	True				
ANR	1097353	ParameterType	int &		1097302	0					
ANR	1097354	Identifier	len		1097302	1					
ANR	1097355	Parameter	unsigned char * & data	10856:41:331825:331844	1097302	1	True				
ANR	1097356	ParameterType	unsigned char * &		1097302	0					
ANR	1097357	Identifier	data		1097302	1					
ANR	1097358	CFGEntryNode	ENTRY		1097302		True				
ANR	1097359	CFGExitNode	EXIT		1097302		True				
ANR	1097360	Symbol	malloc		1097302						
ANR	1097361	Symbol	NULL		1097302						
ANR	1097362	Symbol	len		1097302						
ANR	1097363	Symbol	data		1097302						
ANR	1097364	Symbol	_cookie_data		1097302						
ANR	1097365	Symbol	false		1097302						
ANR	1097366	Symbol	true		1097302						
ANR	1097367	Symbol	_cookie_len		1097302						
ANR	1097368	Function	DaemonCore :: cookie_is_valid	10872:0:332068:332669							
ANR	1097369	FunctionDef	DaemonCore :: cookie_is_valid (const unsigned char * data)		1097368	0					
ANR	1097370	CompoundStatement		10872:64:332132:332669	1097368	0					
ANR	1097371	IfStatement	if ( data == NULL || _cookie_data == NULL )		1097368	0					
ANR	1097372	Condition	data == NULL || _cookie_data == NULL	10874:6:332141:332176	1097368	0	True				
ANR	1097373	OrExpression	data == NULL || _cookie_data == NULL		1097368	0		||			
ANR	1097374	EqualityExpression	data == NULL		1097368	0		==			
ANR	1097375	Identifier	data		1097368	0					
ANR	1097376	Identifier	NULL		1097368	1					
ANR	1097377	EqualityExpression	_cookie_data == NULL		1097368	1		==			
ANR	1097378	Identifier	_cookie_data		1097368	0					
ANR	1097379	Identifier	NULL		1097368	1					
ANR	1097380	CompoundStatement		3:45:47:47	1097368	1					
ANR	1097381	ReturnStatement	return false ;	10875:2:332184:332196	1097368	0	True				
ANR	1097382	Identifier	false		1097368	0					
ANR	1097383	IfStatement	"if ( strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0 )"		1097368	1					
ANR	1097384	Condition	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0"	10878:6:332208:332264	1097368	0	True				
ANR	1097385	EqualityExpression	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data ) == 0"		1097368	0		==			
ANR	1097386	CallExpression	"strcmp ( ( const char * ) _cookie_data , ( const char * ) data )"		1097368	0					
ANR	1097387	Callee	strcmp		1097368	0					
ANR	1097388	Identifier	strcmp		1097368	0					
ANR	1097389	ArgumentList	( const char * ) _cookie_data		1097368	1					
ANR	1097390	Argument	( const char * ) _cookie_data		1097368	0					
ANR	1097391	CastExpression	( const char * ) _cookie_data		1097368	0					
ANR	1097392	CastTarget	const char *		1097368	0					
ANR	1097393	Identifier	_cookie_data		1097368	1					
ANR	1097394	Argument	( const char * ) data		1097368	1					
ANR	1097395	CastExpression	( const char * ) data		1097368	0					
ANR	1097396	CastTarget	const char *		1097368	0					
ANR	1097397	Identifier	data		1097368	1					
ANR	1097398	PrimaryExpression	0		1097368	1					
ANR	1097399	CompoundStatement		7:66:135:135	1097368	1					
ANR	1097400	ReturnStatement	return true ;	10880:2:332316:332327	1097368	0	True				
ANR	1097401	Identifier	true		1097368	0					
ANR	1097402	ElseStatement	else		1097368	0					
ANR	1097403	IfStatement	if ( _cookie_data_old != NULL )		1097368	0					
ANR	1097404	Condition	_cookie_data_old != NULL	10881:13:332342:332365	1097368	0	True				
ANR	1097405	EqualityExpression	_cookie_data_old != NULL		1097368	0		!=			
ANR	1097406	Identifier	_cookie_data_old		1097368	0					
ANR	1097407	Identifier	NULL		1097368	1					
ANR	1097408	CompoundStatement		10:40:236:236	1097368	1					
ANR	1097409	IfStatement	"if ( strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0 )"		1097368	0					
ANR	1097410	Condition	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0"	10887:7:332487:332547	1097368	0	True				
ANR	1097411	EqualityExpression	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data ) == 0"		1097368	0		==			
ANR	1097412	CallExpression	"strcmp ( ( const char * ) _cookie_data_old , ( const char * ) data )"		1097368	0					
ANR	1097413	Callee	strcmp		1097368	0					
ANR	1097414	Identifier	strcmp		1097368	0					
ANR	1097415	ArgumentList	( const char * ) _cookie_data_old		1097368	1					
ANR	1097416	Argument	( const char * ) _cookie_data_old		1097368	0					
ANR	1097417	CastExpression	( const char * ) _cookie_data_old		1097368	0					
ANR	1097418	CastTarget	const char *		1097368	0					
ANR	1097419	Identifier	_cookie_data_old		1097368	1					
ANR	1097420	Argument	( const char * ) data		1097368	1					
ANR	1097421	CastExpression	( const char * ) data		1097368	0					
ANR	1097422	CastTarget	const char *		1097368	0					
ANR	1097423	Identifier	data		1097368	1					
ANR	1097424	PrimaryExpression	0		1097368	1					
ANR	1097425	CompoundStatement		16:71:418:418	1097368	1					
ANR	1097426	ReturnStatement	return true ;	10888:3:332556:332567	1097368	0	True				
ANR	1097427	Identifier	true		1097368	0					
ANR	1097428	ElseStatement	else		1097368	0					
ANR	1097429	CompoundStatement		18:9:445:445	1097368	0					
ANR	1097430	ReturnStatement	return false ;	10892:3:332609:332621	1097368	0	True				
ANR	1097431	Identifier	false		1097368	0					
ANR	1097432	ReturnStatement	return false ;	10895:1:332631:332643	1097368	2	True				
ANR	1097433	Identifier	false		1097368	0					
ANR	1097434	ReturnType	bool		1097368	1					
ANR	1097435	Identifier	DaemonCore :: cookie_is_valid		1097368	2					
ANR	1097436	ParameterList	const unsigned char * data		1097368	3					
ANR	1097437	Parameter	const unsigned char * data	10872:36:332104:332128	1097368	0	True				
ANR	1097438	ParameterType	const unsigned char *		1097368	0					
ANR	1097439	Identifier	data		1097368	1					
ANR	1097440	CFGEntryNode	ENTRY		1097368		True				
ANR	1097441	CFGExitNode	EXIT		1097368		True				
ANR	1097442	Symbol	strcmp		1097368						
ANR	1097443	Symbol	NULL		1097368						
ANR	1097444	Symbol	data		1097368						
ANR	1097445	Symbol	_cookie_data		1097368						
ANR	1097446	Symbol	_cookie_data_old		1097368						
ANR	1097447	Symbol	false		1097368						
ANR	1097448	Symbol	true		1097368						
ANR	1097449	Function	DaemonCore :: GetPeacefulShutdown	10898:0:332672:332740							
ANR	1097450	FunctionDef	DaemonCore :: GetPeacefulShutdown ()		1097449	0					
ANR	1097451	CompoundStatement		10899:34:332711:332740	1097449	0					
ANR	1097452	ReturnStatement	return peaceful_shutdown ;	10900:1:332714:332738	1097449	0	True				
ANR	1097453	Identifier	peaceful_shutdown		1097449	0					
ANR	1097454	ReturnType	bool		1097449	1					
ANR	1097455	Identifier	DaemonCore :: GetPeacefulShutdown		1097449	2					
ANR	1097456	ParameterList			1097449	3					
ANR	1097457	CFGEntryNode	ENTRY		1097449		True				
ANR	1097458	CFGExitNode	EXIT		1097449		True				
ANR	1097459	Symbol	peaceful_shutdown		1097449						
ANR	1097460	Function	DaemonCore :: SetPeacefulShutdown	10903:0:332743:332822							
ANR	1097461	FunctionDef	DaemonCore :: SetPeacefulShutdown (bool value)		1097460	0					
ANR	1097462	CompoundStatement		10904:44:332792:332822	1097460	0					
ANR	1097463	ExpressionStatement	peaceful_shutdown = value	10905:1:332795:332820	1097460	0	True				
ANR	1097464	AssignmentExpression	peaceful_shutdown = value		1097460	0		=			
ANR	1097465	Identifier	peaceful_shutdown		1097460	0					
ANR	1097466	Identifier	value		1097460	1					
ANR	1097467	ReturnType	void		1097460	1					
ANR	1097468	Identifier	DaemonCore :: SetPeacefulShutdown		1097460	2					
ANR	1097469	ParameterList	bool value		1097460	3					
ANR	1097470	Parameter	bool value	10904:32:332780:332789	1097460	0	True				
ANR	1097471	ParameterType	bool		1097460	0					
ANR	1097472	Identifier	value		1097460	1					
ANR	1097473	CFGEntryNode	ENTRY		1097460		True				
ANR	1097474	CFGExitNode	EXIT		1097460		True				
ANR	1097475	Symbol	peaceful_shutdown		1097460						
ANR	1097476	Symbol	value		1097460						
ANR	1097477	Function	DaemonCore :: RegisterTimeSkipCallback	10908:0:332825:333144							
ANR	1097478	FunctionDef	"DaemonCore :: RegisterTimeSkipCallback (TimeSkipFunc fnc , void * data)"		1097477	0					
ANR	1097479	CompoundStatement		10910:0:332899:333144	1097477	0					
ANR	1097480	Statement	TimeSkipWatcher	10911:1:332902:332916	1097477	0	True				
ANR	1097481	Statement	*	10911:17:332918:332918	1097477	1	True				
ANR	1097482	Statement	watcher	10911:19:332920:332926	1097477	2	True				
ANR	1097483	Statement	=	10911:27:332928:332928	1097477	3	True				
ANR	1097484	Statement	new	10911:29:332930:332932	1097477	4	True				
ANR	1097485	ExpressionStatement	TimeSkipWatcher	10911:33:332934:332949	1097477	5	True				
ANR	1097486	Identifier	TimeSkipWatcher		1097477	0					
ANR	1097487	ExpressionStatement	ASSERT ( fnc )	10912:1:332952:332963	1097477	6	True				
ANR	1097488	CallExpression	ASSERT ( fnc )		1097477	0					
ANR	1097489	Callee	ASSERT		1097477	0					
ANR	1097490	Identifier	ASSERT		1097477	0					
ANR	1097491	ArgumentList	fnc		1097477	1					
ANR	1097492	Argument	fnc		1097477	0					
ANR	1097493	Identifier	fnc		1097477	0					
ANR	1097494	ExpressionStatement	watcher -> fn = fnc	10913:1:332966:332983	1097477	7	True				
ANR	1097495	AssignmentExpression	watcher -> fn = fnc		1097477	0		=			
ANR	1097496	PtrMemberAccess	watcher -> fn		1097477	0					
ANR	1097497	Identifier	watcher		1097477	0					
ANR	1097498	Identifier	fn		1097477	1					
ANR	1097499	Identifier	fnc		1097477	1					
ANR	1097500	ExpressionStatement	watcher -> data = data	10914:1:332986:333006	1097477	8	True				
ANR	1097501	AssignmentExpression	watcher -> data = data		1097477	0		=			
ANR	1097502	PtrMemberAccess	watcher -> data		1097477	0					
ANR	1097503	Identifier	watcher		1097477	0					
ANR	1097504	Identifier	data		1097477	1					
ANR	1097505	Identifier	data		1097477	1					
ANR	1097506	IfStatement	if ( ! m_TimeSkipWatchers . Append ( watcher ) )		1097477	9					
ANR	1097507	Condition	! m_TimeSkipWatchers . Append ( watcher )	10915:5:333013:333048	1097477	0	True				
ANR	1097508	UnaryOperationExpression	! m_TimeSkipWatchers . Append ( watcher )		1097477	0					
ANR	1097509	UnaryOperator	!		1097477	0					
ANR	1097510	CallExpression	m_TimeSkipWatchers . Append ( watcher )		1097477	1					
ANR	1097511	Callee	m_TimeSkipWatchers . Append		1097477	0					
ANR	1097512	MemberAccess	m_TimeSkipWatchers . Append		1097477	0					
ANR	1097513	Identifier	m_TimeSkipWatchers		1097477	0					
ANR	1097514	Identifier	Append		1097477	1					
ANR	1097515	ArgumentList	watcher		1097477	1					
ANR	1097516	Argument	watcher		1097477	0					
ANR	1097517	Identifier	watcher		1097477	0					
ANR	1097518	CompoundStatement		6:43:151:151	1097477	1					
ANR	1097519	ExpressionStatement	"EXCEPT ( ""Unable to register time skip callback.  Possible out of memory condition."" )"	10916:2:333055:333138	1097477	0	True				
ANR	1097520	CallExpression	"EXCEPT ( ""Unable to register time skip callback.  Possible out of memory condition."" )"		1097477	0					
ANR	1097521	Callee	EXCEPT		1097477	0					
ANR	1097522	Identifier	EXCEPT		1097477	0					
ANR	1097523	ArgumentList	"""Unable to register time skip callback.  Possible out of memory condition."""		1097477	1					
ANR	1097524	Argument	"""Unable to register time skip callback.  Possible out of memory condition."""		1097477	0					
ANR	1097525	PrimaryExpression	"""Unable to register time skip callback.  Possible out of memory condition."""		1097477	0					
ANR	1097526	ReturnType	void		1097477	1					
ANR	1097527	Identifier	DaemonCore :: RegisterTimeSkipCallback		1097477	2					
ANR	1097528	ParameterList	"TimeSkipFunc fnc , void * data"		1097477	3					
ANR	1097529	Parameter	TimeSkipFunc fnc	10909:37:332868:332883	1097477	0	True				
ANR	1097530	ParameterType	TimeSkipFunc		1097477	0					
ANR	1097531	Identifier	fnc		1097477	1					
ANR	1097532	Parameter	void * data	10909:55:332886:332896	1097477	1	True				
ANR	1097533	ParameterType	void *		1097477	0					
ANR	1097534	Identifier	data		1097477	1					
ANR	1097535	CFGEntryNode	ENTRY		1097477		True				
ANR	1097536	CFGExitNode	EXIT		1097477		True				
ANR	1097537	Symbol	watcher		1097477						
ANR	1097538	Symbol	m_TimeSkipWatchers . Append		1097477						
ANR	1097539	Symbol	data		1097477						
ANR	1097540	Symbol	watcher -> data		1097477						
ANR	1097541	Symbol	watcher -> fn		1097477						
ANR	1097542	Symbol	fnc		1097477						
ANR	1097543	Symbol	* watcher		1097477						
ANR	1097544	Symbol	m_TimeSkipWatchers		1097477						
ANR	1097545	Function	DaemonCore :: UnregisterTimeSkipCallback	10920:0:333147:333515							
ANR	1097546	FunctionDef	"DaemonCore :: UnregisterTimeSkipCallback (TimeSkipFunc fnc , void * data)"		1097545	0					
ANR	1097547	CompoundStatement		10922:0:333223:333515	1097545	0					
ANR	1097548	ExpressionStatement	m_TimeSkipWatchers . Rewind ( )	10923:1:333226:333253	1097545	0	True				
ANR	1097549	CallExpression	m_TimeSkipWatchers . Rewind ( )		1097545	0					
ANR	1097550	Callee	m_TimeSkipWatchers . Rewind		1097545	0					
ANR	1097551	MemberAccess	m_TimeSkipWatchers . Rewind		1097545	0					
ANR	1097552	Identifier	m_TimeSkipWatchers		1097545	0					
ANR	1097553	Identifier	Rewind		1097545	1					
ANR	1097554	ArgumentList			1097545	1					
ANR	1097555	IdentifierDeclStatement	TimeSkipWatcher * p ;	10924:1:333256:333275	1097545	1	True				
ANR	1097556	IdentifierDecl	* p		1097545	0					
ANR	1097557	IdentifierDeclType	TimeSkipWatcher *		1097545	0					
ANR	1097558	Identifier	p		1097545	1					
ANR	1097559	WhileStatement	while ( ( p = m_TimeSkipWatchers . Next ( ) ) )		1097545	2					
ANR	1097560	Condition	p = m_TimeSkipWatchers . Next ( )	10925:8:333285:333315	1097545	0	True				
ANR	1097561	AssignmentExpression	p = m_TimeSkipWatchers . Next ( )		1097545	0		=			
ANR	1097562	Identifier	p		1097545	0					
ANR	1097563	CallExpression	m_TimeSkipWatchers . Next ( )		1097545	1					
ANR	1097564	Callee	m_TimeSkipWatchers . Next		1097545	0					
ANR	1097565	MemberAccess	m_TimeSkipWatchers . Next		1097545	0					
ANR	1097566	Identifier	m_TimeSkipWatchers		1097545	0					
ANR	1097567	Identifier	Next		1097545	1					
ANR	1097568	ArgumentList			1097545	1					
ANR	1097569	CompoundStatement		4:42:95:95	1097545	1					
ANR	1097570	IfStatement	if ( p -> fn == fnc && p -> data == data )		1097545	0					
ANR	1097571	Condition	p -> fn == fnc && p -> data == data	10926:5:333326:333356	1097545	0	True				
ANR	1097572	AndExpression	p -> fn == fnc && p -> data == data		1097545	0		&&			
ANR	1097573	EqualityExpression	p -> fn == fnc		1097545	0		==			
ANR	1097574	PtrMemberAccess	p -> fn		1097545	0					
ANR	1097575	Identifier	p		1097545	0					
ANR	1097576	Identifier	fn		1097545	1					
ANR	1097577	Identifier	fnc		1097545	1					
ANR	1097578	EqualityExpression	p -> data == data		1097545	1		==			
ANR	1097579	PtrMemberAccess	p -> data		1097545	0					
ANR	1097580	Identifier	p		1097545	0					
ANR	1097581	Identifier	data		1097545	1					
ANR	1097582	Identifier	data		1097545	1					
ANR	1097583	CompoundStatement		5:38:135:135	1097545	1					
ANR	1097584	ExpressionStatement	m_TimeSkipWatchers . DeleteCurrent ( )	10927:3:333364:333398	1097545	0	True				
ANR	1097585	CallExpression	m_TimeSkipWatchers . DeleteCurrent ( )		1097545	0					
ANR	1097586	Callee	m_TimeSkipWatchers . DeleteCurrent		1097545	0					
ANR	1097587	MemberAccess	m_TimeSkipWatchers . DeleteCurrent		1097545	0					
ANR	1097588	Identifier	m_TimeSkipWatchers		1097545	0					
ANR	1097589	Identifier	DeleteCurrent		1097545	1					
ANR	1097590	ArgumentList			1097545	1					
ANR	1097591	ReturnStatement	return ;	10928:3:333403:333409	1097545	1	True				
ANR	1097592	ExpressionStatement	"EXCEPT ( ""Attempted to remove time skip watcher (%p, %p), but it was not registered"" , fnc , data )"	10931:1:333419:333513	1097545	3	True				
ANR	1097593	CallExpression	"EXCEPT ( ""Attempted to remove time skip watcher (%p, %p), but it was not registered"" , fnc , data )"		1097545	0					
ANR	1097594	Callee	EXCEPT		1097545	0					
ANR	1097595	Identifier	EXCEPT		1097545	0					
ANR	1097596	ArgumentList	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		1097545	1					
ANR	1097597	Argument	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		1097545	0					
ANR	1097598	PrimaryExpression	"""Attempted to remove time skip watcher (%p, %p), but it was not registered"""		1097545	0					
ANR	1097599	Argument	fnc		1097545	1					
ANR	1097600	Identifier	fnc		1097545	0					
ANR	1097601	Argument	data		1097545	2					
ANR	1097602	Identifier	data		1097545	0					
ANR	1097603	ReturnType	void		1097545	1					
ANR	1097604	Identifier	DaemonCore :: UnregisterTimeSkipCallback		1097545	2					
ANR	1097605	ParameterList	"TimeSkipFunc fnc , void * data"		1097545	3					
ANR	1097606	Parameter	TimeSkipFunc fnc	10921:39:333192:333207	1097545	0	True				
ANR	1097607	ParameterType	TimeSkipFunc		1097545	0					
ANR	1097608	Identifier	fnc		1097545	1					
ANR	1097609	Parameter	void * data	10921:57:333210:333220	1097545	1	True				
ANR	1097610	ParameterType	void *		1097545	0					
ANR	1097611	Identifier	data		1097545	1					
ANR	1097612	CFGEntryNode	ENTRY		1097545		True				
ANR	1097613	CFGExitNode	EXIT		1097545		True				
ANR	1097614	Symbol	p		1097545						
ANR	1097615	Symbol	m_TimeSkipWatchers . Next		1097545						
ANR	1097616	Symbol	data		1097545						
ANR	1097617	Symbol	p -> data		1097545						
ANR	1097618	Symbol	fnc		1097545						
ANR	1097619	Symbol	* p		1097545						
ANR	1097620	Symbol	p -> fn		1097545						
ANR	1097621	Symbol	m_TimeSkipWatchers		1097545						
ANR	1097622	Function	DaemonCore :: CheckForTimeSkip	10934:0:333518:334989							
ANR	1097623	FunctionDef	"DaemonCore :: CheckForTimeSkip (time_t time_before , time_t okay_delta)"		1097622	0					
ANR	1097624	CompoundStatement		10936:0:333591:334989	1097622	0					
ANR	1097625	IfStatement	if ( m_TimeSkipWatchers . Number ( ) == 0 )		1097622	0					
ANR	1097626	Condition	m_TimeSkipWatchers . Number ( ) == 0	10937:4:333597:333628	1097622	0	True				
ANR	1097627	EqualityExpression	m_TimeSkipWatchers . Number ( ) == 0		1097622	0		==			
ANR	1097628	CallExpression	m_TimeSkipWatchers . Number ( )		1097622	0					
ANR	1097629	Callee	m_TimeSkipWatchers . Number		1097622	0					
ANR	1097630	MemberAccess	m_TimeSkipWatchers . Number		1097622	0					
ANR	1097631	Identifier	m_TimeSkipWatchers		1097622	0					
ANR	1097632	Identifier	Number		1097622	1					
ANR	1097633	ArgumentList			1097622	1					
ANR	1097634	PrimaryExpression	0		1097622	1					
ANR	1097635	CompoundStatement		2:38:39:39	1097622	1					
ANR	1097636	ReturnStatement	return ;	10939:2:333674:333680	1097622	0	True				
ANR	1097637	IdentifierDeclStatement	time_t time_after = time ( NULL ) ;	10944:1:333752:333782	1097622	1	True				
ANR	1097638	IdentifierDecl	time_after = time ( NULL )		1097622	0					
ANR	1097639	IdentifierDeclType	time_t		1097622	0					
ANR	1097640	Identifier	time_after		1097622	1					
ANR	1097641	AssignmentExpression	time_after = time ( NULL )		1097622	2		=			
ANR	1097642	Identifier	time_after		1097622	0					
ANR	1097643	CallExpression	time ( NULL )		1097622	1					
ANR	1097644	Callee	time		1097622	0					
ANR	1097645	Identifier	time		1097622	0					
ANR	1097646	ArgumentList	NULL		1097622	1					
ANR	1097647	Argument	NULL		1097622	0					
ANR	1097648	Identifier	NULL		1097622	0					
ANR	1097649	IdentifierDeclStatement	int delta = 0 ;	10945:1:333785:333798	1097622	2	True				
ANR	1097650	IdentifierDecl	delta = 0		1097622	0					
ANR	1097651	IdentifierDeclType	int		1097622	0					
ANR	1097652	Identifier	delta		1097622	1					
ANR	1097653	AssignmentExpression	delta = 0		1097622	2		=			
ANR	1097654	Identifier	delta		1097622	0					
ANR	1097655	PrimaryExpression	0		1097622	1					
ANR	1097656	IfStatement	if ( ( time_after + MAX_TIME_SKIP ) < time_before )		1097622	3					
ANR	1097657	Condition	( time_after + MAX_TIME_SKIP ) < time_before	10951:4:334024:334065	1097622	0	True				
ANR	1097658	RelationalExpression	( time_after + MAX_TIME_SKIP ) < time_before		1097622	0		<			
ANR	1097659	AdditiveExpression	time_after + MAX_TIME_SKIP		1097622	0		+			
ANR	1097660	Identifier	time_after		1097622	0					
ANR	1097661	Identifier	MAX_TIME_SKIP		1097622	1					
ANR	1097662	Identifier	time_before		1097622	1					
ANR	1097663	CompoundStatement		16:48:476:476	1097622	1					
ANR	1097664	ExpressionStatement	delta = - ( int ) ( time_before - time_after )	10958:2:334266:334306	1097622	0	True				
ANR	1097665	AssignmentExpression	delta = - ( int ) ( time_before - time_after )		1097622	0		=			
ANR	1097666	Identifier	delta		1097622	0					
ANR	1097667	UnaryOperationExpression	- ( int ) ( time_before - time_after )		1097622	1					
ANR	1097668	UnaryOperator	-		1097622	0					
ANR	1097669	CastExpression	( int ) ( time_before - time_after )		1097622	1					
ANR	1097670	CastTarget	int		1097622	0					
ANR	1097671	AdditiveExpression	time_before - time_after		1097622	1		-			
ANR	1097672	Identifier	time_before		1097622	0					
ANR	1097673	Identifier	time_after		1097622	1					
ANR	1097674	IfStatement	if ( ( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after )		1097622	4					
ANR	1097675	Condition	( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after	10960:4:334315:334371	1097622	0	True				
ANR	1097676	RelationalExpression	( time_before + okay_delta * 2 + MAX_TIME_SKIP ) < time_after		1097622	0		<			
ANR	1097677	AdditiveExpression	time_before + okay_delta * 2 + MAX_TIME_SKIP		1097622	0		+			
ANR	1097678	Identifier	time_before		1097622	0					
ANR	1097679	AdditiveExpression	okay_delta * 2 + MAX_TIME_SKIP		1097622	1		+			
ANR	1097680	MultiplicativeExpression	okay_delta * 2		1097622	0		*			
ANR	1097681	Identifier	okay_delta		1097622	0					
ANR	1097682	PrimaryExpression	2		1097622	1					
ANR	1097683	Identifier	MAX_TIME_SKIP		1097622	1					
ANR	1097684	Identifier	time_after		1097622	1					
ANR	1097685	CompoundStatement		25:63:782:782	1097622	1					
ANR	1097686	ExpressionStatement	delta = time_after - time_before - okay_delta	10967:2:334532:334577	1097622	0	True				
ANR	1097687	AssignmentExpression	delta = time_after - time_before - okay_delta		1097622	0		=			
ANR	1097688	Identifier	delta		1097622	0					
ANR	1097689	AdditiveExpression	time_after - time_before - okay_delta		1097622	1		-			
ANR	1097690	Identifier	time_after		1097622	0					
ANR	1097691	AdditiveExpression	time_before - okay_delta		1097622	1		-			
ANR	1097692	Identifier	time_before		1097622	0					
ANR	1097693	Identifier	okay_delta		1097622	1					
ANR	1097694	IfStatement	if ( delta == 0 )		1097622	5					
ANR	1097695	Condition	delta == 0	10969:4:334586:334595	1097622	0	True				
ANR	1097696	EqualityExpression	delta == 0		1097622	0		==			
ANR	1097697	Identifier	delta		1097622	0					
ANR	1097698	PrimaryExpression	0		1097622	1					
ANR	1097699	CompoundStatement		34:16:1006:1006	1097622	1					
ANR	1097700	ReturnStatement	return ;	10971:2:334668:334674	1097622	0	True				
ANR	1097701	ExpressionStatement	"dprintf ( D_FULLDEBUG , ""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"" , delta )"	10973:1:334680:334782	1097622	6	True				
ANR	1097702	CallExpression	"dprintf ( D_FULLDEBUG , ""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"" , delta )"		1097622	0					
ANR	1097703	Callee	dprintf		1097622	0					
ANR	1097704	Identifier	dprintf		1097622	0					
ANR	1097705	ArgumentList	D_FULLDEBUG		1097622	1					
ANR	1097706	Argument	D_FULLDEBUG		1097622	0					
ANR	1097707	Identifier	D_FULLDEBUG		1097622	0					
ANR	1097708	Argument	"""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"""		1097622	1					
ANR	1097709	PrimaryExpression	"""Time skip noticed.  The system clock jumped approximately %d seconds.\\n"""		1097622	0					
ANR	1097710	Argument	delta		1097622	2					
ANR	1097711	Identifier	delta		1097622	0					
ANR	1097712	ExpressionStatement	m_TimeSkipWatchers . Rewind ( )	10976:1:334849:334876	1097622	7	True				
ANR	1097713	CallExpression	m_TimeSkipWatchers . Rewind ( )		1097622	0					
ANR	1097714	Callee	m_TimeSkipWatchers . Rewind		1097622	0					
ANR	1097715	MemberAccess	m_TimeSkipWatchers . Rewind		1097622	0					
ANR	1097716	Identifier	m_TimeSkipWatchers		1097622	0					
ANR	1097717	Identifier	Rewind		1097622	1					
ANR	1097718	ArgumentList			1097622	1					
ANR	1097719	IdentifierDeclStatement	TimeSkipWatcher * p ;	10977:1:334879:334898	1097622	8	True				
ANR	1097720	IdentifierDecl	* p		1097622	0					
ANR	1097721	IdentifierDeclType	TimeSkipWatcher *		1097622	0					
ANR	1097722	Identifier	p		1097622	1					
ANR	1097723	WhileStatement	while ( ( p = m_TimeSkipWatchers . Next ( ) ) )		1097622	9					
ANR	1097724	Condition	p = m_TimeSkipWatchers . Next ( )	10978:8:334908:334938	1097622	0	True				
ANR	1097725	AssignmentExpression	p = m_TimeSkipWatchers . Next ( )		1097622	0		=			
ANR	1097726	Identifier	p		1097622	0					
ANR	1097727	CallExpression	m_TimeSkipWatchers . Next ( )		1097622	1					
ANR	1097728	Callee	m_TimeSkipWatchers . Next		1097622	0					
ANR	1097729	MemberAccess	m_TimeSkipWatchers . Next		1097622	0					
ANR	1097730	Identifier	m_TimeSkipWatchers		1097622	0					
ANR	1097731	Identifier	Next		1097622	1					
ANR	1097732	ArgumentList			1097622	1					
ANR	1097733	CompoundStatement		43:42:1350:1350	1097622	1					
ANR	1097734	ExpressionStatement	ASSERT ( p -> fn )	10979:2:334946:334959	1097622	0	True				
ANR	1097735	CallExpression	ASSERT ( p -> fn )		1097622	0					
ANR	1097736	Callee	ASSERT		1097622	0					
ANR	1097737	Identifier	ASSERT		1097622	0					
ANR	1097738	ArgumentList	p -> fn		1097622	1					
ANR	1097739	Argument	p -> fn		1097622	0					
ANR	1097740	PtrMemberAccess	p -> fn		1097622	0					
ANR	1097741	Identifier	p		1097622	0					
ANR	1097742	Identifier	fn		1097622	1					
ANR	1097743	ExpressionStatement	"p -> fn ( p -> data , delta )"	10980:2:334963:334984	1097622	1	True				
ANR	1097744	CallExpression	"p -> fn ( p -> data , delta )"		1097622	0					
ANR	1097745	Callee	p -> fn		1097622	0					
ANR	1097746	PtrMemberAccess	p -> fn		1097622	0					
ANR	1097747	Identifier	p		1097622	0					
ANR	1097748	Identifier	fn		1097622	1					
ANR	1097749	ArgumentList	p -> data		1097622	1					
ANR	1097750	Argument	p -> data		1097622	0					
ANR	1097751	PtrMemberAccess	p -> data		1097622	0					
ANR	1097752	Identifier	p		1097622	0					
ANR	1097753	Identifier	data		1097622	1					
ANR	1097754	Argument	delta		1097622	1					
ANR	1097755	Identifier	delta		1097622	0					
ANR	1097756	ReturnType	void		1097622	1					
ANR	1097757	Identifier	DaemonCore :: CheckForTimeSkip		1097622	2					
ANR	1097758	ParameterList	"time_t time_before , time_t okay_delta"		1097622	3					
ANR	1097759	Parameter	time_t time_before	10935:29:333552:333569	1097622	0	True				
ANR	1097760	ParameterType	time_t		1097622	0					
ANR	1097761	Identifier	time_before		1097622	1					
ANR	1097762	Parameter	time_t okay_delta	10935:49:333572:333588	1097622	1	True				
ANR	1097763	ParameterType	time_t		1097622	0					
ANR	1097764	Identifier	okay_delta		1097622	1					
ANR	1097765	CFGEntryNode	ENTRY		1097622		True				
ANR	1097766	CFGExitNode	EXIT		1097622		True				
ANR	1097767	Symbol	m_TimeSkipWatchers . Next		1097622						
ANR	1097768	Symbol	NULL		1097622						
ANR	1097769	Symbol	p -> data		1097622						
ANR	1097770	Symbol	delta		1097622						
ANR	1097771	Symbol	D_FULLDEBUG		1097622						
ANR	1097772	Symbol	p -> fn		1097622						
ANR	1097773	Symbol	okay_delta		1097622						
ANR	1097774	Symbol	m_TimeSkipWatchers		1097622						
ANR	1097775	Symbol	p		1097622						
ANR	1097776	Symbol	time_before		1097622						
ANR	1097777	Symbol	MAX_TIME_SKIP		1097622						
ANR	1097778	Symbol	* p		1097622						
ANR	1097779	Symbol	time_after		1097622						
ANR	1097780	Symbol	time		1097622						
ANR	1097781	Symbol	m_TimeSkipWatchers . Number		1097622						
ANR	1097782	Function	DaemonCore :: UpdateLocalAd	10985:0:334993:336465							
ANR	1097783	FunctionDef	"DaemonCore :: UpdateLocalAd (ClassAd * daemonAd , char const * fname)"		1097782	0					
ANR	1097784	CompoundStatement		10987:0:335062:336465	1097782	0					
ANR	1097785	IdentifierDeclStatement	FILE * AD_FILE ;	10988:4:335068:335084	1097782	0	True				
ANR	1097786	IdentifierDecl	* AD_FILE		1097782	0					
ANR	1097787	IdentifierDeclType	FILE *		1097782	0					
ANR	1097788	Identifier	AD_FILE		1097782	1					
ANR	1097789	IfStatement	if ( ! fname )		1097782	1					
ANR	1097790	Condition	! fname	10990:5:335092:335097	1097782	0	True				
ANR	1097791	UnaryOperationExpression	! fname		1097782	0					
ANR	1097792	UnaryOperator	!		1097782	0					
ANR	1097793	Identifier	fname		1097782	1					
ANR	1097794	CompoundStatement		5:2:42:67	1097782	1					
ANR	1097795	IdentifierDeclStatement	char localAd_path [ 100 ] ;	10991:2:335105:335130	1097782	0	True				
ANR	1097796	IdentifierDecl	localAd_path [ 100 ]		1097782	0					
ANR	1097797	IdentifierDeclType	char [ 100 ]		1097782	0					
ANR	1097798	Identifier	localAd_path		1097782	1					
ANR	1097799	PrimaryExpression	100		1097782	2					
ANR	1097800	ExpressionStatement	"sprintf ( localAd_path , ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"	10992:2:335134:335208	1097782	1	True				
ANR	1097801	CallExpression	"sprintf ( localAd_path , ""%s_DAEMON_AD_FILE"" , get_mySubSystem ( ) -> getName ( ) )"		1097782	0					
ANR	1097802	Callee	sprintf		1097782	0					
ANR	1097803	Identifier	sprintf		1097782	0					
ANR	1097804	ArgumentList	localAd_path		1097782	1					
ANR	1097805	Argument	localAd_path		1097782	0					
ANR	1097806	Identifier	localAd_path		1097782	0					
ANR	1097807	Argument	"""%s_DAEMON_AD_FILE"""		1097782	1					
ANR	1097808	PrimaryExpression	"""%s_DAEMON_AD_FILE"""		1097782	0					
ANR	1097809	Argument	get_mySubSystem ( ) -> getName ( )		1097782	2					
ANR	1097810	CallExpression	get_mySubSystem ( ) -> getName ( )		1097782	0					
ANR	1097811	Callee	get_mySubSystem ( ) -> getName		1097782	0					
ANR	1097812	PtrMemberAccess	get_mySubSystem ( ) -> getName		1097782	0					
ANR	1097813	CallExpression	get_mySubSystem ( )		1097782	0					
ANR	1097814	Callee	get_mySubSystem		1097782	0					
ANR	1097815	Identifier	get_mySubSystem		1097782	0					
ANR	1097816	ArgumentList			1097782	1					
ANR	1097817	Identifier	getName		1097782	1					
ANR	1097818	ArgumentList			1097782	1					
ANR	1097819	IfStatement	if ( localAdFile )		1097782	2					
ANR	1097820	Condition	localAdFile	10996:6:335305:335315	1097782	0	True				
ANR	1097821	Identifier	localAdFile		1097782	0					
ANR	1097822	CompoundStatement		10:20:256:256	1097782	1					
ANR	1097823	ExpressionStatement	free ( localAdFile )	10997:3:335324:335343	1097782	0	True				
ANR	1097824	CallExpression	free ( localAdFile )		1097782	0					
ANR	1097825	Callee	free		1097782	0					
ANR	1097826	Identifier	free		1097782	0					
ANR	1097827	ArgumentList	localAdFile		1097782	1					
ANR	1097828	Argument	localAdFile		1097782	0					
ANR	1097829	Identifier	localAdFile		1097782	0					
ANR	1097830	ExpressionStatement	localAdFile = param ( localAd_path )	10999:2:335351:335386	1097782	3	True				
ANR	1097831	AssignmentExpression	localAdFile = param ( localAd_path )		1097782	0		=			
ANR	1097832	Identifier	localAdFile		1097782	0					
ANR	1097833	CallExpression	param ( localAd_path )		1097782	1					
ANR	1097834	Callee	param		1097782	0					
ANR	1097835	Identifier	param		1097782	0					
ANR	1097836	ArgumentList	localAd_path		1097782	1					
ANR	1097837	Argument	localAd_path		1097782	0					
ANR	1097838	Identifier	localAd_path		1097782	0					
ANR	1097839	ExpressionStatement	fname = localAdFile	11000:2:335390:335409	1097782	4	True				
ANR	1097840	AssignmentExpression	fname = localAdFile		1097782	0		=			
ANR	1097841	Identifier	fname		1097782	0					
ANR	1097842	Identifier	localAdFile		1097782	1					
ANR	1097843	IfStatement	if ( fname )		1097782	2					
ANR	1097844	Condition	fname	11003:8:335423:335427	1097782	0	True				
ANR	1097845	Identifier	fname		1097782	0					
ANR	1097846	CompoundStatement		18:2:372:395	1097782	1					
ANR	1097847	IdentifierDeclStatement	MyString newLocalAdFile ;	11004:2:335435:335458	1097782	0	True				
ANR	1097848	IdentifierDecl	newLocalAdFile		1097782	0					
ANR	1097849	IdentifierDeclType	MyString		1097782	0					
ANR	1097850	Identifier	newLocalAdFile		1097782	1					
ANR	1097851	ExpressionStatement	"newLocalAdFile . sprintf ( ""%s.new"" , fname )"	11005:2:335462:335500	1097782	1	True				
ANR	1097852	CallExpression	"newLocalAdFile . sprintf ( ""%s.new"" , fname )"		1097782	0					
ANR	1097853	Callee	newLocalAdFile . sprintf		1097782	0					
ANR	1097854	MemberAccess	newLocalAdFile . sprintf		1097782	0					
ANR	1097855	Identifier	newLocalAdFile		1097782	0					
ANR	1097856	Identifier	sprintf		1097782	1					
ANR	1097857	ArgumentList	"""%s.new"""		1097782	1					
ANR	1097858	Argument	"""%s.new"""		1097782	0					
ANR	1097859	PrimaryExpression	"""%s.new"""		1097782	0					
ANR	1097860	Argument	fname		1097782	1					
ANR	1097861	Identifier	fname		1097782	0					
ANR	1097862	IfStatement	"if ( ( AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" ) ) )"		1097782	2					
ANR	1097863	Condition	"AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"	11006:12:335514:335579	1097782	0	True				
ANR	1097864	AssignmentExpression	"AD_FILE = safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"		1097782	0		=			
ANR	1097865	Identifier	AD_FILE		1097782	0					
ANR	1097866	CallExpression	"safe_fopen_wrapper_follow ( newLocalAdFile . Value ( ) , ""w"" )"		1097782	1					
ANR	1097867	Callee	safe_fopen_wrapper_follow		1097782	0					
ANR	1097868	Identifier	safe_fopen_wrapper_follow		1097782	0					
ANR	1097869	ArgumentList	newLocalAdFile . Value ( )		1097782	1					
ANR	1097870	Argument	newLocalAdFile . Value ( )		1097782	0					
ANR	1097871	CallExpression	newLocalAdFile . Value ( )		1097782	0					
ANR	1097872	Callee	newLocalAdFile . Value		1097782	0					
ANR	1097873	MemberAccess	newLocalAdFile . Value		1097782	0					
ANR	1097874	Identifier	newLocalAdFile		1097782	0					
ANR	1097875	Identifier	Value		1097782	1					
ANR	1097876	ArgumentList			1097782	1					
ANR	1097877	Argument	"""w"""		1097782	1					
ANR	1097878	PrimaryExpression	"""w"""		1097782	0					
ANR	1097879	CompoundStatement		20:81:520:520	1097782	1					
ANR	1097880	ExpressionStatement	daemonAd -> fPrint ( AD_FILE )	11007:12:335597:335622	1097782	0	True				
ANR	1097881	CallExpression	daemonAd -> fPrint ( AD_FILE )		1097782	0					
ANR	1097882	Callee	daemonAd -> fPrint		1097782	0					
ANR	1097883	PtrMemberAccess	daemonAd -> fPrint		1097782	0					
ANR	1097884	Identifier	daemonAd		1097782	0					
ANR	1097885	Identifier	fPrint		1097782	1					
ANR	1097886	ArgumentList	AD_FILE		1097782	1					
ANR	1097887	Argument	AD_FILE		1097782	0					
ANR	1097888	Identifier	AD_FILE		1097782	0					
ANR	1097889	ExpressionStatement	fclose ( AD_FILE )	11008:12:335636:335653	1097782	1	True				
ANR	1097890	CallExpression	fclose ( AD_FILE )		1097782	0					
ANR	1097891	Callee	fclose		1097782	0					
ANR	1097892	Identifier	fclose		1097782	0					
ANR	1097893	ArgumentList	AD_FILE		1097782	1					
ANR	1097894	Argument	AD_FILE		1097782	0					
ANR	1097895	Identifier	AD_FILE		1097782	0					
ANR	1097896	IfStatement	"if ( rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0 )"		1097782	2					
ANR	1097897	Condition	"rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0"	11009:7:335662:335705	1097782	0	True				
ANR	1097898	EqualityExpression	"rotate_file ( newLocalAdFile . Value ( ) , fname ) != 0"		1097782	0		!=			
ANR	1097899	CallExpression	"rotate_file ( newLocalAdFile . Value ( ) , fname )"		1097782	0					
ANR	1097900	Callee	rotate_file		1097782	0					
ANR	1097901	Identifier	rotate_file		1097782	0					
ANR	1097902	ArgumentList	newLocalAdFile . Value ( )		1097782	1					
ANR	1097903	Argument	newLocalAdFile . Value ( )		1097782	0					
ANR	1097904	CallExpression	newLocalAdFile . Value ( )		1097782	0					
ANR	1097905	Callee	newLocalAdFile . Value		1097782	0					
ANR	1097906	MemberAccess	newLocalAdFile . Value		1097782	0					
ANR	1097907	Identifier	newLocalAdFile		1097782	0					
ANR	1097908	Identifier	Value		1097782	1					
ANR	1097909	ArgumentList			1097782	1					
ANR	1097910	Argument	fname		1097782	1					
ANR	1097911	Identifier	fname		1097782	0					
ANR	1097912	PrimaryExpression	0		1097782	1					
ANR	1097913	CompoundStatement		23:54:646:646	1097782	1					
ANR	1097914	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: WARNING: failed to rotate %s to %s\\n"" , newLocalAdFile . Value ( ) , fname )"	11016:4:336007:336129	1097782	0	True				
ANR	1097915	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: WARNING: failed to rotate %s to %s\\n"" , newLocalAdFile . Value ( ) , fname )"		1097782	0					
ANR	1097916	Callee	dprintf		1097782	0					
ANR	1097917	Identifier	dprintf		1097782	0					
ANR	1097918	ArgumentList	D_ALWAYS		1097782	1					
ANR	1097919	Argument	D_ALWAYS		1097782	0					
ANR	1097920	Identifier	D_ALWAYS		1097782	0					
ANR	1097921	Argument	"""DaemonCore: WARNING: failed to rotate %s to %s\\n"""		1097782	1					
ANR	1097922	PrimaryExpression	"""DaemonCore: WARNING: failed to rotate %s to %s\\n"""		1097782	0					
ANR	1097923	Argument	newLocalAdFile . Value ( )		1097782	2					
ANR	1097924	CallExpression	newLocalAdFile . Value ( )		1097782	0					
ANR	1097925	Callee	newLocalAdFile . Value		1097782	0					
ANR	1097926	MemberAccess	newLocalAdFile . Value		1097782	0					
ANR	1097927	Identifier	newLocalAdFile		1097782	0					
ANR	1097928	Identifier	Value		1097782	1					
ANR	1097929	ArgumentList			1097782	1					
ANR	1097930	Argument	fname		1097782	3					
ANR	1097931	Identifier	fname		1097782	0					
ANR	1097932	ElseStatement	else		1097782	0					
ANR	1097933	CompoundStatement		41:15:1227:1227	1097782	0					
ANR	1097934	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open daemon address file %s\\n"" , newLocalAdFile . Value ( ) )"	11028:12:336304:336447	1097782	0	True				
ANR	1097935	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore: ERROR: Can't open daemon address file %s\\n"" , newLocalAdFile . Value ( ) )"		1097782	0					
ANR	1097936	Callee	dprintf		1097782	0					
ANR	1097937	Identifier	dprintf		1097782	0					
ANR	1097938	ArgumentList	D_ALWAYS		1097782	1					
ANR	1097939	Argument	D_ALWAYS		1097782	0					
ANR	1097940	Identifier	D_ALWAYS		1097782	0					
ANR	1097941	Argument	"""DaemonCore: ERROR: Can't open daemon address file %s\\n"""		1097782	1					
ANR	1097942	PrimaryExpression	"""DaemonCore: ERROR: Can't open daemon address file %s\\n"""		1097782	0					
ANR	1097943	Argument	newLocalAdFile . Value ( )		1097782	2					
ANR	1097944	CallExpression	newLocalAdFile . Value ( )		1097782	0					
ANR	1097945	Callee	newLocalAdFile . Value		1097782	0					
ANR	1097946	MemberAccess	newLocalAdFile . Value		1097782	0					
ANR	1097947	Identifier	newLocalAdFile		1097782	0					
ANR	1097948	Identifier	Value		1097782	1					
ANR	1097949	ArgumentList			1097782	1					
ANR	1097950	ReturnType	void		1097782	1					
ANR	1097951	Identifier	DaemonCore :: UpdateLocalAd		1097782	2					
ANR	1097952	ParameterList	"ClassAd * daemonAd , char const * fname"		1097782	3					
ANR	1097953	Parameter	ClassAd * daemonAd	10986:26:335024:335040	1097782	0	True				
ANR	1097954	ParameterType	ClassAd *		1097782	0					
ANR	1097955	Identifier	daemonAd		1097782	1					
ANR	1097956	Parameter	char const * fname	10986:44:335042:335058	1097782	1	True				
ANR	1097957	ParameterType	char const *		1097782	0					
ANR	1097958	Identifier	fname		1097782	1					
ANR	1097959	CFGEntryNode	ENTRY		1097782		True				
ANR	1097960	CFGExitNode	EXIT		1097782		True				
ANR	1097961	Symbol	localAdFile		1097782						
ANR	1097962	Symbol	fname		1097782						
ANR	1097963	Symbol	localAd_path		1097782						
ANR	1097964	Symbol	AD_FILE		1097782						
ANR	1097965	Symbol	newLocalAdFile . Value		1097782						
ANR	1097966	Symbol	get_mySubSystem ( ) -> getName		1097782						
ANR	1097967	Symbol	* get_mySubSystem		1097782						
ANR	1097968	Symbol	D_ALWAYS		1097782						
ANR	1097969	Symbol	newLocalAdFile		1097782						
ANR	1097970	Symbol	param		1097782						
ANR	1097971	Symbol	daemonAd		1097782						
ANR	1097972	Symbol	rotate_file		1097782						
ANR	1097973	Symbol	get_mySubSystem		1097782						
ANR	1097974	Symbol	safe_fopen_wrapper_follow		1097782						
ANR	1097975	Function	DaemonCore :: publish	11036:0:336469:337261							
ANR	1097976	FunctionDef	DaemonCore :: publish (ClassAd * ad)		1097975	0					
ANR	1097977	CompoundStatement		11037:33:336507:337261	1097975	0					
ANR	1097978	IdentifierDeclStatement	const char * tmp ;	11038:1:336510:336525	1097975	0	True				
ANR	1097979	IdentifierDecl	* tmp		1097975	0					
ANR	1097980	IdentifierDeclType	const char *		1097975	0					
ANR	1097981	Identifier	tmp		1097975	1					
ANR	1097982	ExpressionStatement	config_fill_ad ( ad )	11042:1:336612:336630	1097975	1	True				
ANR	1097983	CallExpression	config_fill_ad ( ad )		1097975	0					
ANR	1097984	Callee	config_fill_ad		1097975	0					
ANR	1097985	Identifier	config_fill_ad		1097975	0					
ANR	1097986	ArgumentList	ad		1097975	1					
ANR	1097987	Argument	ad		1097975	0					
ANR	1097988	Identifier	ad		1097975	0					
ANR	1097989	ExpressionStatement	"ad -> Assign ( ATTR_MY_CURRENT_TIME , ( int ) time ( NULL ) )"	11045:1:336671:336720	1097975	2	True				
ANR	1097990	CallExpression	"ad -> Assign ( ATTR_MY_CURRENT_TIME , ( int ) time ( NULL ) )"		1097975	0					
ANR	1097991	Callee	ad -> Assign		1097975	0					
ANR	1097992	PtrMemberAccess	ad -> Assign		1097975	0					
ANR	1097993	Identifier	ad		1097975	0					
ANR	1097994	Identifier	Assign		1097975	1					
ANR	1097995	ArgumentList	ATTR_MY_CURRENT_TIME		1097975	1					
ANR	1097996	Argument	ATTR_MY_CURRENT_TIME		1097975	0					
ANR	1097997	Identifier	ATTR_MY_CURRENT_TIME		1097975	0					
ANR	1097998	Argument	( int ) time ( NULL )		1097975	1					
ANR	1097999	CastExpression	( int ) time ( NULL )		1097975	0					
ANR	1098000	CastTarget	int		1097975	0					
ANR	1098001	CallExpression	time ( NULL )		1097975	1					
ANR	1098002	Callee	time		1097975	0					
ANR	1098003	Identifier	time		1097975	0					
ANR	1098004	ArgumentList	NULL		1097975	1					
ANR	1098005	Argument	NULL		1097975	0					
ANR	1098006	Identifier	NULL		1097975	0					
ANR	1098007	ExpressionStatement	"ad -> Assign ( ATTR_MACHINE , get_local_fqdn ( ) . Value ( ) )"	11048:1:336786:336836	1097975	3	True				
ANR	1098008	CallExpression	"ad -> Assign ( ATTR_MACHINE , get_local_fqdn ( ) . Value ( ) )"		1097975	0					
ANR	1098009	Callee	ad -> Assign		1097975	0					
ANR	1098010	PtrMemberAccess	ad -> Assign		1097975	0					
ANR	1098011	Identifier	ad		1097975	0					
ANR	1098012	Identifier	Assign		1097975	1					
ANR	1098013	ArgumentList	ATTR_MACHINE		1097975	1					
ANR	1098014	Argument	ATTR_MACHINE		1097975	0					
ANR	1098015	Identifier	ATTR_MACHINE		1097975	0					
ANR	1098016	Argument	get_local_fqdn ( ) . Value ( )		1097975	1					
ANR	1098017	CallExpression	get_local_fqdn ( ) . Value ( )		1097975	0					
ANR	1098018	Callee	get_local_fqdn ( ) . Value		1097975	0					
ANR	1098019	MemberAccess	get_local_fqdn ( ) . Value		1097975	0					
ANR	1098020	CallExpression	get_local_fqdn ( )		1097975	0					
ANR	1098021	Callee	get_local_fqdn		1097975	0					
ANR	1098022	Identifier	get_local_fqdn		1097975	0					
ANR	1098023	ArgumentList			1097975	1					
ANR	1098024	Identifier	Value		1097975	1					
ANR	1098025	ArgumentList			1097975	1					
ANR	1098026	ExpressionStatement	tmp = privateNetworkName ( )	11051:1:336892:336918	1097975	4	True				
ANR	1098027	AssignmentExpression	tmp = privateNetworkName ( )		1097975	0		=			
ANR	1098028	Identifier	tmp		1097975	0					
ANR	1098029	CallExpression	privateNetworkName ( )		1097975	1					
ANR	1098030	Callee	privateNetworkName		1097975	0					
ANR	1098031	Identifier	privateNetworkName		1097975	0					
ANR	1098032	ArgumentList			1097975	1					
ANR	1098033	IfStatement	if ( tmp )		1097975	5					
ANR	1098034	Condition	tmp	11052:5:336925:336927	1097975	0	True				
ANR	1098035	Identifier	tmp		1097975	0					
ANR	1098036	CompoundStatement		16:10:422:422	1097975	1					
ANR	1098037	ExpressionStatement	"ad -> Assign ( ATTR_PRIVATE_NETWORK_NAME , tmp )"	11057:2:337131:337173	1097975	0	True				
ANR	1098038	CallExpression	"ad -> Assign ( ATTR_PRIVATE_NETWORK_NAME , tmp )"		1097975	0					
ANR	1098039	Callee	ad -> Assign		1097975	0					
ANR	1098040	PtrMemberAccess	ad -> Assign		1097975	0					
ANR	1098041	Identifier	ad		1097975	0					
ANR	1098042	Identifier	Assign		1097975	1					
ANR	1098043	ArgumentList	ATTR_PRIVATE_NETWORK_NAME		1097975	1					
ANR	1098044	Argument	ATTR_PRIVATE_NETWORK_NAME		1097975	0					
ANR	1098045	Identifier	ATTR_PRIVATE_NETWORK_NAME		1097975	0					
ANR	1098046	Argument	tmp		1097975	1					
ANR	1098047	Identifier	tmp		1097975	0					
ANR	1098048	ExpressionStatement	tmp = publicNetworkIpAddr ( )	11060:1:337180:337207	1097975	6	True				
ANR	1098049	AssignmentExpression	tmp = publicNetworkIpAddr ( )		1097975	0		=			
ANR	1098050	Identifier	tmp		1097975	0					
ANR	1098051	CallExpression	publicNetworkIpAddr ( )		1097975	1					
ANR	1098052	Callee	publicNetworkIpAddr		1097975	0					
ANR	1098053	Identifier	publicNetworkIpAddr		1097975	0					
ANR	1098054	ArgumentList			1097975	1					
ANR	1098055	IfStatement	if ( tmp )		1097975	7					
ANR	1098056	Condition	tmp	11061:5:337214:337216	1097975	0	True				
ANR	1098057	Identifier	tmp		1097975	0					
ANR	1098058	CompoundStatement		25:11:712:712	1097975	1					
ANR	1098059	ExpressionStatement	"ad -> Assign ( ATTR_MY_ADDRESS , tmp )"	11062:2:337224:337256	1097975	0	True				
ANR	1098060	CallExpression	"ad -> Assign ( ATTR_MY_ADDRESS , tmp )"		1097975	0					
ANR	1098061	Callee	ad -> Assign		1097975	0					
ANR	1098062	PtrMemberAccess	ad -> Assign		1097975	0					
ANR	1098063	Identifier	ad		1097975	0					
ANR	1098064	Identifier	Assign		1097975	1					
ANR	1098065	ArgumentList	ATTR_MY_ADDRESS		1097975	1					
ANR	1098066	Argument	ATTR_MY_ADDRESS		1097975	0					
ANR	1098067	Identifier	ATTR_MY_ADDRESS		1097975	0					
ANR	1098068	Argument	tmp		1097975	1					
ANR	1098069	Identifier	tmp		1097975	0					
ANR	1098070	ReturnType	void		1097975	1					
ANR	1098071	Identifier	DaemonCore :: publish		1097975	2					
ANR	1098072	ParameterList	ClassAd * ad		1097975	3					
ANR	1098073	Parameter	ClassAd * ad	11037:20:336494:336504	1097975	0	True				
ANR	1098074	ParameterType	ClassAd *		1097975	0					
ANR	1098075	Identifier	ad		1097975	1					
ANR	1098076	CFGEntryNode	ENTRY		1097975		True				
ANR	1098077	CFGExitNode	EXIT		1097975		True				
ANR	1098078	Symbol	ad		1097975						
ANR	1098079	Symbol	NULL		1097975						
ANR	1098080	Symbol	get_local_fqdn ( ) . Value		1097975						
ANR	1098081	Symbol	tmp		1097975						
ANR	1098082	Symbol	publicNetworkIpAddr		1097975						
ANR	1098083	Symbol	ATTR_MY_CURRENT_TIME		1097975						
ANR	1098084	Symbol	time		1097975						
ANR	1098085	Symbol	get_local_fqdn		1097975						
ANR	1098086	Symbol	ATTR_PRIVATE_NETWORK_NAME		1097975						
ANR	1098087	Symbol	ATTR_MY_ADDRESS		1097975						
ANR	1098088	Symbol	privateNetworkName		1097975						
ANR	1098089	Symbol	ATTR_MACHINE		1097975						
ANR	1098090	Function	DaemonCore :: initCollectorList	11067:0:337265:337404							
ANR	1098091	FunctionDef	DaemonCore :: initCollectorList ()		1098090	0					
ANR	1098092	CompoundStatement		11068:32:337302:337404	1098090	0					
ANR	1098093	IfStatement	if ( m_collector_list )		1098090	0					
ANR	1098094	Condition	m_collector_list	11069:5:337309:337324	1098090	0	True				
ANR	1098095	Identifier	m_collector_list		1098090	0					
ANR	1098096	CompoundStatement		2:23:24:24	1098090	1					
ANR	1098097	Statement	delete	11070:2:337331:337336	1098090	0	True				
ANR	1098098	ExpressionStatement	m_collector_list	11070:9:337338:337354	1098090	1	True				
ANR	1098099	Identifier	m_collector_list		1098090	0					
ANR	1098100	ExpressionStatement	m_collector_list = CollectorList :: create ( )	11072:1:337360:337402	1098090	1	True				
ANR	1098101	AssignmentExpression	m_collector_list = CollectorList :: create ( )		1098090	0		=			
ANR	1098102	Identifier	m_collector_list		1098090	0					
ANR	1098103	CallExpression	CollectorList :: create ( )		1098090	1					
ANR	1098104	Callee	CollectorList :: create		1098090	0					
ANR	1098105	Identifier	CollectorList :: create		1098090	0					
ANR	1098106	ArgumentList			1098090	1					
ANR	1098107	ReturnType	void		1098090	1					
ANR	1098108	Identifier	DaemonCore :: initCollectorList		1098090	2					
ANR	1098109	ParameterList			1098090	3					
ANR	1098110	CFGEntryNode	ENTRY		1098090		True				
ANR	1098111	CFGExitNode	EXIT		1098090		True				
ANR	1098112	Symbol	m_collector_list		1098090						
ANR	1098113	Symbol	CollectorList :: create		1098090						
ANR	1098114	Function	DaemonCore :: getCollectorList	11076:0:337408:337482							
ANR	1098115	FunctionDef	DaemonCore :: getCollectorList ()		1098114	0					
ANR	1098116	CompoundStatement		11077:31:337454:337482	1098114	0					
ANR	1098117	ReturnStatement	return m_collector_list ;	11078:1:337457:337480	1098114	0	True				
ANR	1098118	Identifier	m_collector_list		1098114	0					
ANR	1098119	ReturnType	CollectorList *		1098114	1					
ANR	1098120	Identifier	DaemonCore :: getCollectorList		1098114	2					
ANR	1098121	ParameterList			1098114	3					
ANR	1098122	CFGEntryNode	ENTRY		1098114		True				
ANR	1098123	CFGExitNode	EXIT		1098114		True				
ANR	1098124	Symbol	m_collector_list		1098114						
ANR	1098125	Function	DaemonCore :: sendUpdates	11082:0:337486:338452							
ANR	1098126	FunctionDef	"DaemonCore :: sendUpdates (int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblock)"		1098125	0					
ANR	1098127	CompoundStatement		11084:0:337568:338452	1098125	0					
ANR	1098128	ExpressionStatement	ASSERT ( ad1 )	11085:1:337571:337582	1098125	0	True				
ANR	1098129	CallExpression	ASSERT ( ad1 )		1098125	0					
ANR	1098130	Callee	ASSERT		1098125	0					
ANR	1098131	Identifier	ASSERT		1098125	0					
ANR	1098132	ArgumentList	ad1		1098125	1					
ANR	1098133	Argument	ad1		1098125	0					
ANR	1098134	Identifier	ad1		1098125	0					
ANR	1098135	ExpressionStatement	ASSERT ( m_collector_list )	11086:1:337585:337609	1098125	1	True				
ANR	1098136	CallExpression	ASSERT ( m_collector_list )		1098125	0					
ANR	1098137	Callee	ASSERT		1098125	0					
ANR	1098138	Identifier	ASSERT		1098125	0					
ANR	1098139	ArgumentList	m_collector_list		1098125	1					
ANR	1098140	Argument	m_collector_list		1098125	0					
ANR	1098141	Identifier	m_collector_list		1098125	0					
ANR	1098142	IfStatement	"if ( ! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" ) )"		1098125	2					
ANR	1098143	Condition	"! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"	11089:5:337684:337810	1098125	0	True				
ANR	1098144	AndExpression	"! m_in_daemon_shutdown_fast && evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"		1098125	0		&&			
ANR	1098145	UnaryOperationExpression	! m_in_daemon_shutdown_fast		1098125	0					
ANR	1098146	UnaryOperator	!		1098125	0					
ANR	1098147	Identifier	m_in_daemon_shutdown_fast		1098125	1					
ANR	1098148	CallExpression	"evalExpr ( ad1 , ""DAEMON_SHUTDOWN_FAST"" , ATTR_DAEMON_SHUTDOWN_FAST , ""starting fast shutdown"" )"		1098125	1					
ANR	1098149	Callee	evalExpr		1098125	0					
ANR	1098150	Identifier	evalExpr		1098125	0					
ANR	1098151	ArgumentList	ad1		1098125	1					
ANR	1098152	Argument	ad1		1098125	0					
ANR	1098153	Identifier	ad1		1098125	0					
ANR	1098154	Argument	"""DAEMON_SHUTDOWN_FAST"""		1098125	1					
ANR	1098155	PrimaryExpression	"""DAEMON_SHUTDOWN_FAST"""		1098125	0					
ANR	1098156	Argument	ATTR_DAEMON_SHUTDOWN_FAST		1098125	2					
ANR	1098157	Identifier	ATTR_DAEMON_SHUTDOWN_FAST		1098125	0					
ANR	1098158	Argument	"""starting fast shutdown"""		1098125	3					
ANR	1098159	PrimaryExpression	"""starting fast shutdown"""		1098125	0					
ANR	1098160	CompoundStatement		8:32:244:244	1098125	1					
ANR	1098161	ExpressionStatement	m_wants_restart = false	11093:2:337881:337904	1098125	0	True				
ANR	1098162	AssignmentExpression	m_wants_restart = false		1098125	0		=			
ANR	1098163	Identifier	m_wants_restart		1098125	0					
ANR	1098164	Identifier	false		1098125	1					
ANR	1098165	ExpressionStatement	m_in_daemon_shutdown_fast = true	11094:2:337908:337940	1098125	1	True				
ANR	1098166	AssignmentExpression	m_in_daemon_shutdown_fast = true		1098125	0		=			
ANR	1098167	Identifier	m_in_daemon_shutdown_fast		1098125	0					
ANR	1098168	Identifier	true		1098125	1					
ANR	1098169	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGQUIT )"	11095:2:337944:338000	1098125	2	True				
ANR	1098170	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGQUIT )"		1098125	0					
ANR	1098171	Callee	daemonCore -> Send_Signal		1098125	0					
ANR	1098172	PtrMemberAccess	daemonCore -> Send_Signal		1098125	0					
ANR	1098173	Identifier	daemonCore		1098125	0					
ANR	1098174	Identifier	Send_Signal		1098125	1					
ANR	1098175	ArgumentList	daemonCore -> getpid ( )		1098125	1					
ANR	1098176	Argument	daemonCore -> getpid ( )		1098125	0					
ANR	1098177	CallExpression	daemonCore -> getpid ( )		1098125	0					
ANR	1098178	Callee	daemonCore -> getpid		1098125	0					
ANR	1098179	PtrMemberAccess	daemonCore -> getpid		1098125	0					
ANR	1098180	Identifier	daemonCore		1098125	0					
ANR	1098181	Identifier	getpid		1098125	1					
ANR	1098182	ArgumentList			1098125	1					
ANR	1098183	Argument	SIGQUIT		1098125	1					
ANR	1098184	Identifier	SIGQUIT		1098125	0					
ANR	1098185	ElseStatement	else		1098125	0					
ANR	1098186	IfStatement	"if ( ! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" ) )"		1098125	0					
ANR	1098187	Condition	"! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"	11097:10:338015:338134	1098125	0	True				
ANR	1098188	AndExpression	"! m_in_daemon_shutdown && evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"		1098125	0		&&			
ANR	1098189	UnaryOperationExpression	! m_in_daemon_shutdown		1098125	0					
ANR	1098190	UnaryOperator	!		1098125	0					
ANR	1098191	Identifier	m_in_daemon_shutdown		1098125	1					
ANR	1098192	CallExpression	"evalExpr ( ad1 , ""DAEMON_SHUTDOWN"" , ATTR_DAEMON_SHUTDOWN , ""starting graceful shutdown"" )"		1098125	1					
ANR	1098193	Callee	evalExpr		1098125	0					
ANR	1098194	Identifier	evalExpr		1098125	0					
ANR	1098195	ArgumentList	ad1		1098125	1					
ANR	1098196	Argument	ad1		1098125	0					
ANR	1098197	Identifier	ad1		1098125	0					
ANR	1098198	Argument	"""DAEMON_SHUTDOWN"""		1098125	1					
ANR	1098199	PrimaryExpression	"""DAEMON_SHUTDOWN"""		1098125	0					
ANR	1098200	Argument	ATTR_DAEMON_SHUTDOWN		1098125	2					
ANR	1098201	Identifier	ATTR_DAEMON_SHUTDOWN		1098125	0					
ANR	1098202	Argument	"""starting graceful shutdown"""		1098125	3					
ANR	1098203	PrimaryExpression	"""starting graceful shutdown"""		1098125	0					
ANR	1098204	CompoundStatement		16:38:568:568	1098125	1					
ANR	1098205	ExpressionStatement	m_wants_restart = false	11100:2:338141:338164	1098125	0	True				
ANR	1098206	AssignmentExpression	m_wants_restart = false		1098125	0		=			
ANR	1098207	Identifier	m_wants_restart		1098125	0					
ANR	1098208	Identifier	false		1098125	1					
ANR	1098209	ExpressionStatement	m_in_daemon_shutdown = true	11101:2:338168:338195	1098125	1	True				
ANR	1098210	AssignmentExpression	m_in_daemon_shutdown = true		1098125	0		=			
ANR	1098211	Identifier	m_in_daemon_shutdown		1098125	0					
ANR	1098212	Identifier	true		1098125	1					
ANR	1098213	ExpressionStatement	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"	11102:2:338199:338255	1098125	2	True				
ANR	1098214	CallExpression	"daemonCore -> Send_Signal ( daemonCore -> getpid ( ) , SIGTERM )"		1098125	0					
ANR	1098215	Callee	daemonCore -> Send_Signal		1098125	0					
ANR	1098216	PtrMemberAccess	daemonCore -> Send_Signal		1098125	0					
ANR	1098217	Identifier	daemonCore		1098125	0					
ANR	1098218	Identifier	Send_Signal		1098125	1					
ANR	1098219	ArgumentList	daemonCore -> getpid ( )		1098125	1					
ANR	1098220	Argument	daemonCore -> getpid ( )		1098125	0					
ANR	1098221	CallExpression	daemonCore -> getpid ( )		1098125	0					
ANR	1098222	Callee	daemonCore -> getpid		1098125	0					
ANR	1098223	PtrMemberAccess	daemonCore -> getpid		1098125	0					
ANR	1098224	Identifier	daemonCore		1098125	0					
ANR	1098225	Identifier	getpid		1098125	1					
ANR	1098226	ArgumentList			1098125	1					
ANR	1098227	Argument	SIGTERM		1098125	1					
ANR	1098228	Identifier	SIGTERM		1098125	0					
ANR	1098229	ReturnStatement	"return m_collector_list -> sendUpdates ( cmd , ad1 , ad2 , nonblock ) ;"	11107:1:338389:338450	1098125	3	True				
ANR	1098230	CallExpression	"m_collector_list -> sendUpdates ( cmd , ad1 , ad2 , nonblock )"		1098125	0					
ANR	1098231	Callee	m_collector_list -> sendUpdates		1098125	0					
ANR	1098232	PtrMemberAccess	m_collector_list -> sendUpdates		1098125	0					
ANR	1098233	Identifier	m_collector_list		1098125	0					
ANR	1098234	Identifier	sendUpdates		1098125	1					
ANR	1098235	ArgumentList	cmd		1098125	1					
ANR	1098236	Argument	cmd		1098125	0					
ANR	1098237	Identifier	cmd		1098125	0					
ANR	1098238	Argument	ad1		1098125	1					
ANR	1098239	Identifier	ad1		1098125	0					
ANR	1098240	Argument	ad2		1098125	2					
ANR	1098241	Identifier	ad2		1098125	0					
ANR	1098242	Argument	nonblock		1098125	3					
ANR	1098243	Identifier	nonblock		1098125	0					
ANR	1098244	ReturnType	int		1098125	1					
ANR	1098245	Identifier	DaemonCore :: sendUpdates		1098125	2					
ANR	1098246	ParameterList	"int cmd , ClassAd * ad1 , ClassAd * ad2 , bool nonblock"		1098125	3					
ANR	1098247	Parameter	int cmd	11083:25:337515:337521	1098125	0	True				
ANR	1098248	ParameterType	int		1098125	0					
ANR	1098249	Identifier	cmd		1098125	1					
ANR	1098250	Parameter	ClassAd * ad1	11083:34:337524:337535	1098125	1	True				
ANR	1098251	ParameterType	ClassAd *		1098125	0					
ANR	1098252	Identifier	ad1		1098125	1					
ANR	1098253	Parameter	ClassAd * ad2	11083:48:337538:337549	1098125	2	True				
ANR	1098254	ParameterType	ClassAd *		1098125	0					
ANR	1098255	Identifier	ad2		1098125	1					
ANR	1098256	Parameter	bool nonblock	11083:62:337552:337564	1098125	3	True				
ANR	1098257	ParameterType	bool		1098125	0					
ANR	1098258	Identifier	nonblock		1098125	1					
ANR	1098259	CFGEntryNode	ENTRY		1098125		True				
ANR	1098260	CFGExitNode	EXIT		1098125		True				
ANR	1098261	Symbol	nonblock		1098125						
ANR	1098262	Symbol	SIGQUIT		1098125						
ANR	1098263	Symbol	ATTR_DAEMON_SHUTDOWN		1098125						
ANR	1098264	Symbol	false		1098125						
ANR	1098265	Symbol	daemonCore -> getpid		1098125						
ANR	1098266	Symbol	ATTR_DAEMON_SHUTDOWN_FAST		1098125						
ANR	1098267	Symbol	ad2		1098125						
ANR	1098268	Symbol	m_collector_list		1098125						
ANR	1098269	Symbol	ad1		1098125						
ANR	1098270	Symbol	* m_collector_list		1098125						
ANR	1098271	Symbol	m_wants_restart		1098125						
ANR	1098272	Symbol	* daemonCore		1098125						
ANR	1098273	Symbol	daemonCore		1098125						
ANR	1098274	Symbol	m_in_daemon_shutdown_fast		1098125						
ANR	1098275	Symbol	true		1098125						
ANR	1098276	Symbol	m_in_daemon_shutdown		1098125						
ANR	1098277	Symbol	cmd		1098125						
ANR	1098278	Symbol	SIGTERM		1098125						
ANR	1098279	Symbol	evalExpr		1098125						
ANR	1098280	Symbol	m_collector_list -> sendUpdates		1098125						
ANR	1098281	Function	DaemonCore :: wantsRestart	11111:0:338456:338515							
ANR	1098282	FunctionDef	DaemonCore :: wantsRestart ()		1098281	0					
ANR	1098283	CompoundStatement		11113:0:338488:338515	1098281	0					
ANR	1098284	ReturnStatement	return m_wants_restart ;	11114:1:338491:338513	1098281	0	True				
ANR	1098285	Identifier	m_wants_restart		1098281	0					
ANR	1098286	ReturnType	bool		1098281	1					
ANR	1098287	Identifier	DaemonCore :: wantsRestart		1098281	2					
ANR	1098288	ParameterList			1098281	3					
ANR	1098289	CFGEntryNode	ENTRY		1098281		True				
ANR	1098290	CFGExitNode	EXIT		1098281		True				
ANR	1098291	Symbol	m_wants_restart		1098281						
ANR	1098292	Function	DaemonCore :: evalExpr	11118:0:338519:339180							
ANR	1098293	FunctionDef	"DaemonCore :: evalExpr (ClassAd * ad , const char * param_name , const char * attr_name , const char * message)"		1098292	0					
ANR	1098294	CompoundStatement		11121:0:338635:339180	1098292	0					
ANR	1098295	IdentifierDeclStatement	bool value = false ;	11122:1:338638:338656	1098292	0	True				
ANR	1098296	IdentifierDecl	value = false		1098292	0					
ANR	1098297	IdentifierDeclType	bool		1098292	0					
ANR	1098298	Identifier	value		1098292	1					
ANR	1098299	AssignmentExpression	value = false		1098292	2		=			
ANR	1098300	Identifier	false		1098292	0					
ANR	1098301	Identifier	false		1098292	1					
ANR	1098302	IdentifierDeclStatement	char * expr = param ( param_name ) ;	11123:1:338659:338689	1098292	1	True				
ANR	1098303	IdentifierDecl	* expr = param ( param_name )		1098292	0					
ANR	1098304	IdentifierDeclType	char *		1098292	0					
ANR	1098305	Identifier	expr		1098292	1					
ANR	1098306	AssignmentExpression	* expr = param ( param_name )		1098292	2		=			
ANR	1098307	Identifier	expr		1098292	0					
ANR	1098308	CallExpression	param ( param_name )		1098292	1					
ANR	1098309	Callee	param		1098292	0					
ANR	1098310	Identifier	param		1098292	0					
ANR	1098311	ArgumentList	param_name		1098292	1					
ANR	1098312	Argument	param_name		1098292	0					
ANR	1098313	Identifier	param_name		1098292	0					
ANR	1098314	IfStatement	if ( ! expr )		1098292	2					
ANR	1098315	Condition	! expr	11124:5:338696:338700	1098292	0	True				
ANR	1098316	UnaryOperationExpression	! expr		1098292	0					
ANR	1098317	UnaryOperator	!		1098292	0					
ANR	1098318	Identifier	expr		1098292	1					
ANR	1098319	CompoundStatement		4:12:67:67	1098292	1					
ANR	1098320	ExpressionStatement	expr = param ( attr_name )	11125:2:338707:338730	1098292	0	True				
ANR	1098321	AssignmentExpression	expr = param ( attr_name )		1098292	0		=			
ANR	1098322	Identifier	expr		1098292	0					
ANR	1098323	CallExpression	param ( attr_name )		1098292	1					
ANR	1098324	Callee	param		1098292	0					
ANR	1098325	Identifier	param		1098292	0					
ANR	1098326	ArgumentList	attr_name		1098292	1					
ANR	1098327	Argument	attr_name		1098292	0					
ANR	1098328	Identifier	attr_name		1098292	0					
ANR	1098329	IfStatement	if ( expr )		1098292	3					
ANR	1098330	Condition	expr	11127:5:338740:338743	1098292	0	True				
ANR	1098331	Identifier	expr		1098292	0					
ANR	1098332	CompoundStatement		15:2:304:318	1098292	1					
ANR	1098333	IfStatement	"if ( ! ad -> AssignExpr ( attr_name , expr ) )"		1098292	0					
ANR	1098334	Condition	"! ad -> AssignExpr ( attr_name , expr )"	11128:6:338754:338785	1098292	0	True				
ANR	1098335	UnaryOperationExpression	"! ad -> AssignExpr ( attr_name , expr )"		1098292	0					
ANR	1098336	UnaryOperator	!		1098292	0					
ANR	1098337	CallExpression	"ad -> AssignExpr ( attr_name , expr )"		1098292	1					
ANR	1098338	Callee	ad -> AssignExpr		1098292	0					
ANR	1098339	PtrMemberAccess	ad -> AssignExpr		1098292	0					
ANR	1098340	Identifier	ad		1098292	0					
ANR	1098341	Identifier	AssignExpr		1098292	1					
ANR	1098342	ArgumentList	attr_name		1098292	1					
ANR	1098343	Argument	attr_name		1098292	0					
ANR	1098344	Identifier	attr_name		1098292	0					
ANR	1098345	Argument	expr		1098292	1					
ANR	1098346	Identifier	expr		1098292	0					
ANR	1098347	CompoundStatement		8:40:152:152	1098292	1					
ANR	1098348	ExpressionStatement	"dprintf ( D_ALWAYS | D_FAILURE , ""ERROR: Failed to parse %s expression \\""%s\\""\\n"" , attr_name , expr )"	11129:3:338793:338900	1098292	0	True				
ANR	1098349	CallExpression	"dprintf ( D_ALWAYS | D_FAILURE , ""ERROR: Failed to parse %s expression \\""%s\\""\\n"" , attr_name , expr )"		1098292	0					
ANR	1098350	Callee	dprintf		1098292	0					
ANR	1098351	Identifier	dprintf		1098292	0					
ANR	1098352	ArgumentList	D_ALWAYS | D_FAILURE		1098292	1					
ANR	1098353	Argument	D_ALWAYS | D_FAILURE		1098292	0					
ANR	1098354	InclusiveOrExpression	D_ALWAYS | D_FAILURE		1098292	0		|			
ANR	1098355	Identifier	D_ALWAYS		1098292	0					
ANR	1098356	Identifier	D_FAILURE		1098292	1					
ANR	1098357	Argument	"""ERROR: Failed to parse %s expression \\""%s\\""\\n"""		1098292	1					
ANR	1098358	PrimaryExpression	"""ERROR: Failed to parse %s expression \\""%s\\""\\n"""		1098292	0					
ANR	1098359	Argument	attr_name		1098292	2					
ANR	1098360	Identifier	attr_name		1098292	0					
ANR	1098361	Argument	expr		1098292	3					
ANR	1098362	Identifier	expr		1098292	0					
ANR	1098363	ExpressionStatement	free ( expr )	11132:3:338905:338915	1098292	1	True				
ANR	1098364	CallExpression	free ( expr )		1098292	0					
ANR	1098365	Callee	free		1098292	0					
ANR	1098366	Identifier	free		1098292	0					
ANR	1098367	ArgumentList	expr		1098292	1					
ANR	1098368	Argument	expr		1098292	0					
ANR	1098369	Identifier	expr		1098292	0					
ANR	1098370	ReturnStatement	return false ;	11133:3:338920:338932	1098292	2	True				
ANR	1098371	Identifier	false		1098292	0					
ANR	1098372	IdentifierDeclStatement	int result = 0 ;	11135:2:338940:338954	1098292	1	True				
ANR	1098373	IdentifierDecl	result = 0		1098292	0					
ANR	1098374	IdentifierDeclType	int		1098292	0					
ANR	1098375	Identifier	result		1098292	1					
ANR	1098376	AssignmentExpression	result = 0		1098292	2		=			
ANR	1098377	Identifier	result		1098292	0					
ANR	1098378	PrimaryExpression	0		1098292	1					
ANR	1098379	IfStatement	"if ( ad -> EvalBool ( attr_name , NULL , result ) && result )"		1098292	2					
ANR	1098380	Condition	"ad -> EvalBool ( attr_name , NULL , result ) && result"	11136:6:338962:339008	1098292	0	True				
ANR	1098381	AndExpression	"ad -> EvalBool ( attr_name , NULL , result ) && result"		1098292	0		&&			
ANR	1098382	CallExpression	"ad -> EvalBool ( attr_name , NULL , result )"		1098292	0					
ANR	1098383	Callee	ad -> EvalBool		1098292	0					
ANR	1098384	PtrMemberAccess	ad -> EvalBool		1098292	0					
ANR	1098385	Identifier	ad		1098292	0					
ANR	1098386	Identifier	EvalBool		1098292	1					
ANR	1098387	ArgumentList	attr_name		1098292	1					
ANR	1098388	Argument	attr_name		1098292	0					
ANR	1098389	Identifier	attr_name		1098292	0					
ANR	1098390	Argument	NULL		1098292	1					
ANR	1098391	Identifier	NULL		1098292	0					
ANR	1098392	Argument	result		1098292	2					
ANR	1098393	Identifier	result		1098292	0					
ANR	1098394	Identifier	result		1098292	1					
ANR	1098395	CompoundStatement		16:55:375:375	1098292	1					
ANR	1098396	ExpressionStatement	"dprintf ( D_ALWAYS , ""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"" , attr_name , expr , message )"	11137:3:339016:339125	1098292	0	True				
ANR	1098397	CallExpression	"dprintf ( D_ALWAYS , ""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"" , attr_name , expr , message )"		1098292	0					
ANR	1098398	Callee	dprintf		1098292	0					
ANR	1098399	Identifier	dprintf		1098292	0					
ANR	1098400	ArgumentList	D_ALWAYS		1098292	1					
ANR	1098401	Argument	D_ALWAYS		1098292	0					
ANR	1098402	Identifier	D_ALWAYS		1098292	0					
ANR	1098403	Argument	"""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"""		1098292	1					
ANR	1098404	PrimaryExpression	"""The %s expression \\""%s\\"" evaluated to TRUE: %s\\n"""		1098292	0					
ANR	1098405	Argument	attr_name		1098292	2					
ANR	1098406	Identifier	attr_name		1098292	0					
ANR	1098407	Argument	expr		1098292	3					
ANR	1098408	Identifier	expr		1098292	0					
ANR	1098409	Argument	message		1098292	4					
ANR	1098410	Identifier	message		1098292	0					
ANR	1098411	ExpressionStatement	value = true	11140:3:339130:339142	1098292	1	True				
ANR	1098412	AssignmentExpression	value = true		1098292	0		=			
ANR	1098413	Identifier	value		1098292	0					
ANR	1098414	Identifier	true		1098292	1					
ANR	1098415	ExpressionStatement	free ( expr )	11142:2:339150:339160	1098292	3	True				
ANR	1098416	CallExpression	free ( expr )		1098292	0					
ANR	1098417	Callee	free		1098292	0					
ANR	1098418	Identifier	free		1098292	0					
ANR	1098419	ArgumentList	expr		1098292	1					
ANR	1098420	Argument	expr		1098292	0					
ANR	1098421	Identifier	expr		1098292	0					
ANR	1098422	ReturnStatement	return value ;	11144:1:339166:339178	1098292	4	True				
ANR	1098423	Identifier	value		1098292	0					
ANR	1098424	ReturnType	bool		1098292	1					
ANR	1098425	Identifier	DaemonCore :: evalExpr		1098292	2					
ANR	1098426	ParameterList	"ClassAd * ad , const char * param_name , const char * attr_name , const char * message"		1098292	3					
ANR	1098427	Parameter	ClassAd * ad	11119:22:338546:338556	1098292	0	True				
ANR	1098428	ParameterType	ClassAd *		1098292	0					
ANR	1098429	Identifier	ad		1098292	1					
ANR	1098430	Parameter	const char * param_name	11119:35:338559:338580	1098292	1	True				
ANR	1098431	ParameterType	const char *		1098292	0					
ANR	1098432	Identifier	param_name		1098292	1					
ANR	1098433	Parameter	const char * attr_name	11120:7:338590:338610	1098292	2	True				
ANR	1098434	ParameterType	const char *		1098292	0					
ANR	1098435	Identifier	attr_name		1098292	1					
ANR	1098436	Parameter	const char * message	11120:30:338613:338631	1098292	3	True				
ANR	1098437	ParameterType	const char *		1098292	0					
ANR	1098438	Identifier	message		1098292	1					
ANR	1098439	CFGEntryNode	ENTRY		1098292		True				
ANR	1098440	CFGExitNode	EXIT		1098292		True				
ANR	1098441	Symbol	ad		1098292						
ANR	1098442	Symbol	NULL		1098292						
ANR	1098443	Symbol	attr_name		1098292						
ANR	1098444	Symbol	ad -> EvalBool		1098292						
ANR	1098445	Symbol	false		1098292						
ANR	1098446	Symbol	D_ALWAYS		1098292						
ANR	1098447	Symbol	* ad		1098292						
ANR	1098448	Symbol	D_FAILURE		1098292						
ANR	1098449	Symbol	message		1098292						
ANR	1098450	Symbol	result		1098292						
ANR	1098451	Symbol	param		1098292						
ANR	1098452	Symbol	ad -> AssignExpr		1098292						
ANR	1098453	Symbol	true		1098292						
ANR	1098454	Symbol	expr		1098292						
ANR	1098455	Symbol	param_name		1098292						
ANR	1098456	Symbol	value		1098292						
ANR	1098457	Function	DaemonCore :: PidEntry :: PidEntry	11147:0:339183:339657							
ANR	1098458	FunctionDef	DaemonCore :: PidEntry :: PidEntry ()		1098457	0					
ANR	1098459	CompoundStatement		11156:0:339379:339657	1098457	0					
ANR	1098460	ForStatement	for ( int i = 0 ; i < 3 ; ++ i )		1098457	0					
ANR	1098461	ForInit	int i = 0 ;	11157:6:339387:339394	1098457	0	True				
ANR	1098462	IdentifierDeclStatement	int i = 0 ;		1098457	0					
ANR	1098463	IdentifierDecl	i = 0		1098457	0					
ANR	1098464	IdentifierDeclType	int		1098457	0					
ANR	1098465	Identifier	i		1098457	1					
ANR	1098466	AssignmentExpression	i = 0		1098457	2		=			
ANR	1098467	Identifier	i		1098457	0					
ANR	1098468	PrimaryExpression	0		1098457	1					
ANR	1098469	Condition	i < 3	11157:14:339395:339397	1098457	1	True				
ANR	1098470	RelationalExpression	i < 3		1098457	0		<			
ANR	1098471	Identifier	i		1098457	0					
ANR	1098472	PrimaryExpression	3		1098457	1					
ANR	1098473	UnaryExpression	++ i	11157:18:339399:339401	1098457	2	True				
ANR	1098474	IncDec	++		1098457	0					
ANR	1098475	Identifier	i		1098457	1					
ANR	1098476	CompoundStatement		2:23:24:24	1098457	3					
ANR	1098477	ExpressionStatement	pipe_buf [ i ] = NULL	11158:2:339408:339426	1098457	0	True				
ANR	1098478	AssignmentExpression	pipe_buf [ i ] = NULL		1098457	0		=			
ANR	1098479	ArrayIndexing	pipe_buf [ i ]		1098457	0					
ANR	1098480	Identifier	pipe_buf		1098457	0					
ANR	1098481	Identifier	i		1098457	1					
ANR	1098482	Identifier	NULL		1098457	1					
ANR	1098483	ExpressionStatement	std_pipes [ i ] = DC_STD_FD_NOPIPE	11159:2:339430:339461	1098457	1	True				
ANR	1098484	AssignmentExpression	std_pipes [ i ] = DC_STD_FD_NOPIPE		1098457	0		=			
ANR	1098485	ArrayIndexing	std_pipes [ i ]		1098457	0					
ANR	1098486	Identifier	std_pipes		1098457	0					
ANR	1098487	Identifier	i		1098457	1					
ANR	1098488	Identifier	DC_STD_FD_NOPIPE		1098457	1					
ANR	1098489	ExpressionStatement	penvid . num = PIDENVID_MAX	11161:1:339467:339492	1098457	1	True				
ANR	1098490	AssignmentExpression	penvid . num = PIDENVID_MAX		1098457	0		=			
ANR	1098491	MemberAccess	penvid . num		1098457	0					
ANR	1098492	Identifier	penvid		1098457	0					
ANR	1098493	Identifier	num		1098457	1					
ANR	1098494	Identifier	PIDENVID_MAX		1098457	1					
ANR	1098495	ForStatement	for ( int i = 0 ; i < PIDENVID_MAX ; ++ i )		1098457	2					
ANR	1098496	ForInit	int i = 0 ;	11162:6:339500:339509	1098457	0	True				
ANR	1098497	IdentifierDeclStatement	int i = 0 ;		1098457	0					
ANR	1098498	IdentifierDecl	i = 0		1098457	0					
ANR	1098499	IdentifierDeclType	int		1098457	0					
ANR	1098500	Identifier	i		1098457	1					
ANR	1098501	AssignmentExpression	i = 0		1098457	2		=			
ANR	1098502	Identifier	i		1098457	0					
ANR	1098503	PrimaryExpression	0		1098457	1					
ANR	1098504	Condition	i < PIDENVID_MAX	11162:16:339510:339523	1098457	1	True				
ANR	1098505	RelationalExpression	i < PIDENVID_MAX		1098457	0		<			
ANR	1098506	Identifier	i		1098457	0					
ANR	1098507	Identifier	PIDENVID_MAX		1098457	1					
ANR	1098508	UnaryExpression	++ i	11162:32:339526:339528	1098457	2	True				
ANR	1098509	IncDec	++		1098457	0					
ANR	1098510	Identifier	i		1098457	1					
ANR	1098511	CompoundStatement		7:37:151:151	1098457	3					
ANR	1098512	ExpressionStatement	penvid . ancestors [ i ] . active = 0	11163:2:339535:339563	1098457	0	True				
ANR	1098513	AssignmentExpression	penvid . ancestors [ i ] . active = 0		1098457	0		=			
ANR	1098514	MemberAccess	penvid . ancestors [ i ] . active		1098457	0					
ANR	1098515	ArrayIndexing	penvid . ancestors [ i ]		1098457	0					
ANR	1098516	MemberAccess	penvid . ancestors		1098457	0					
ANR	1098517	Identifier	penvid		1098457	0					
ANR	1098518	Identifier	ancestors		1098457	1					
ANR	1098519	Identifier	i		1098457	1					
ANR	1098520	Identifier	active		1098457	1					
ANR	1098521	PrimaryExpression	0		1098457	1					
ANR	1098522	ForStatement	for ( unsigned int j = 0 ; j < PIDENVID_ENVID_SIZE ; ++ j )		1098457	1					
ANR	1098523	ForInit	unsigned int j = 0 ;	11164:7:339572:339588	1098457	0	True				
ANR	1098524	IdentifierDeclStatement	unsigned int j = 0 ;		1098457	0					
ANR	1098525	IdentifierDecl	j = 0		1098457	0					
ANR	1098526	IdentifierDeclType	unsigned int		1098457	0					
ANR	1098527	Identifier	j		1098457	1					
ANR	1098528	AssignmentExpression	j = 0		1098457	2		=			
ANR	1098529	Identifier	j		1098457	0					
ANR	1098530	PrimaryExpression	0		1098457	1					
ANR	1098531	Condition	j < PIDENVID_ENVID_SIZE	11164:24:339589:339609	1098457	1	True				
ANR	1098532	RelationalExpression	j < PIDENVID_ENVID_SIZE		1098457	0		<			
ANR	1098533	Identifier	j		1098457	0					
ANR	1098534	Identifier	PIDENVID_ENVID_SIZE		1098457	1					
ANR	1098535	UnaryExpression	++ j	11164:46:339611:339613	1098457	2	True				
ANR	1098536	IncDec	++		1098457	0					
ANR	1098537	Identifier	j		1098457	1					
ANR	1098538	ExpressionStatement	penvid . ancestors [ i ] . envid [ j ] = '\\0'	11165:3:339619:339652	1098457	3	True				
ANR	1098539	AssignmentExpression	penvid . ancestors [ i ] . envid [ j ] = '\\0'		1098457	0		=			
ANR	1098540	ArrayIndexing	penvid . ancestors [ i ] . envid [ j ]		1098457	0					
ANR	1098541	MemberAccess	penvid . ancestors [ i ] . envid		1098457	0					
ANR	1098542	ArrayIndexing	penvid . ancestors [ i ]		1098457	0					
ANR	1098543	MemberAccess	penvid . ancestors		1098457	0					
ANR	1098544	Identifier	penvid		1098457	0					
ANR	1098545	Identifier	ancestors		1098457	1					
ANR	1098546	Identifier	i		1098457	1					
ANR	1098547	Identifier	envid		1098457	1					
ANR	1098548	Identifier	j		1098457	1					
ANR	1098549	PrimaryExpression	'\\0'		1098457	1					
ANR	1098550	Identifier	DaemonCore :: PidEntry :: PidEntry		1098457	1					
ANR	1098551	ParameterList			1098457	2					
ANR	1098552	CFGEntryNode	ENTRY		1098457		True				
ANR	1098553	CFGExitNode	EXIT		1098457		True				
ANR	1098554	Symbol	* * i		1098457						
ANR	1098555	Symbol	NULL		1098457						
ANR	1098556	Symbol	* penvid . ancestors		1098457						
ANR	1098557	Symbol	penvid . ancestors		1098457						
ANR	1098558	Symbol	std_pipes		1098457						
ANR	1098559	Symbol	penvid . num		1098457						
ANR	1098560	Symbol	i		1098457						
ANR	1098561	Symbol	penvid . ancestors [ i ] . active		1098457						
ANR	1098562	Symbol	j		1098457						
ANR	1098563	Symbol	penvid . ancestors [ i ] . envid		1098457						
ANR	1098564	Symbol	pipe_buf		1098457						
ANR	1098565	Symbol	PIDENVID_ENVID_SIZE		1098457						
ANR	1098566	Symbol	* * penvid		1098457						
ANR	1098567	Symbol	* i		1098457						
ANR	1098568	Symbol	* std_pipes		1098457						
ANR	1098569	Symbol	* penvid		1098457						
ANR	1098570	Symbol	* j		1098457						
ANR	1098571	Symbol	* penvid . ancestors [ i ] . envid		1098457						
ANR	1098572	Symbol	penvid		1098457						
ANR	1098573	Symbol	DC_STD_FD_NOPIPE		1098457						
ANR	1098574	Symbol	PIDENVID_MAX		1098457						
ANR	1098575	Symbol	* * penvid . ancestors		1098457						
ANR	1098576	Symbol	* pipe_buf		1098457						
ANR	1098577	Function	DaemonCore :: PidEntry :: ~PidEntry	11169:0:339660:340229							
ANR	1098578	FunctionDef	DaemonCore :: PidEntry :: ~PidEntry ()		1098577	0					
ANR	1098579	CompoundStatement		11169:34:339694:340229	1098577	0					
ANR	1098580	IdentifierDeclStatement	int i ;	11170:1:339697:339702	1098577	0	True				
ANR	1098581	IdentifierDecl	i		1098577	0					
ANR	1098582	IdentifierDeclType	int		1098577	0					
ANR	1098583	Identifier	i		1098577	1					
ANR	1098584	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		1098577	1					
ANR	1098585	ForInit	i = 0 ;	11171:6:339710:339713	1098577	0	True				
ANR	1098586	AssignmentExpression	i = 0		1098577	0		=			
ANR	1098587	Identifier	i		1098577	0					
ANR	1098588	PrimaryExpression	0		1098577	1					
ANR	1098589	Condition	i <= 2	11171:11:339715:339718	1098577	1	True				
ANR	1098590	RelationalExpression	i <= 2		1098577	0		<=			
ANR	1098591	Identifier	i		1098577	0					
ANR	1098592	PrimaryExpression	2		1098577	1					
ANR	1098593	PostIncDecOperationExpression	i ++	11171:17:339721:339723	1098577	2	True				
ANR	1098594	Identifier	i		1098577	0					
ANR	1098595	IncDec	++		1098577	1					
ANR	1098596	CompoundStatement		3:22:31:31	1098577	3					
ANR	1098597	IfStatement	if ( pipe_buf [ i ] )		1098577	0					
ANR	1098598	Condition	pipe_buf [ i ]	11172:6:339734:339744	1098577	0	True				
ANR	1098599	ArrayIndexing	pipe_buf [ i ]		1098577	0					
ANR	1098600	Identifier	pipe_buf		1098577	0					
ANR	1098601	Identifier	i		1098577	1					
ANR	1098602	CompoundStatement		4:19:52:52	1098577	1					
ANR	1098603	Statement	delete	11173:3:339752:339757	1098577	0	True				
ANR	1098604	ExpressionStatement	pipe_buf [ i ]	11173:10:339759:339770	1098577	1	True				
ANR	1098605	ArrayIndexing	pipe_buf [ i ]		1098577	0					
ANR	1098606	Identifier	pipe_buf		1098577	0					
ANR	1098607	Identifier	i		1098577	1					
ANR	1098608	ForStatement	for ( i = 0 ; i <= 2 ; i ++ )		1098577	2					
ANR	1098609	ForInit	i = 0 ;	11177:6:339855:339858	1098577	0	True				
ANR	1098610	AssignmentExpression	i = 0		1098577	0		=			
ANR	1098611	Identifier	i		1098577	0					
ANR	1098612	PrimaryExpression	0		1098577	1					
ANR	1098613	Condition	i <= 2	11177:11:339860:339863	1098577	1	True				
ANR	1098614	RelationalExpression	i <= 2		1098577	0		<=			
ANR	1098615	Identifier	i		1098577	0					
ANR	1098616	PrimaryExpression	2		1098577	1					
ANR	1098617	PostIncDecOperationExpression	i ++	11177:17:339866:339868	1098577	2	True				
ANR	1098618	Identifier	i		1098577	0					
ANR	1098619	IncDec	++		1098577	1					
ANR	1098620	CompoundStatement		9:22:176:176	1098577	3					
ANR	1098621	IfStatement	if ( std_pipes [ i ] != DC_STD_FD_NOPIPE )		1098577	0					
ANR	1098622	Condition	std_pipes [ i ] != DC_STD_FD_NOPIPE	11178:6:339879:339910	1098577	0	True				
ANR	1098623	EqualityExpression	std_pipes [ i ] != DC_STD_FD_NOPIPE		1098577	0		!=			
ANR	1098624	ArrayIndexing	std_pipes [ i ]		1098577	0					
ANR	1098625	Identifier	std_pipes		1098577	0					
ANR	1098626	Identifier	i		1098577	1					
ANR	1098627	Identifier	DC_STD_FD_NOPIPE		1098577	1					
ANR	1098628	CompoundStatement		10:40:218:218	1098577	1					
ANR	1098629	ExpressionStatement	daemonCore -> Close_Pipe ( std_pipes [ i ] )	11179:3:339918:339954	1098577	0	True				
ANR	1098630	CallExpression	daemonCore -> Close_Pipe ( std_pipes [ i ] )		1098577	0					
ANR	1098631	Callee	daemonCore -> Close_Pipe		1098577	0					
ANR	1098632	PtrMemberAccess	daemonCore -> Close_Pipe		1098577	0					
ANR	1098633	Identifier	daemonCore		1098577	0					
ANR	1098634	Identifier	Close_Pipe		1098577	1					
ANR	1098635	ArgumentList	std_pipes [ i ]		1098577	1					
ANR	1098636	Argument	std_pipes [ i ]		1098577	0					
ANR	1098637	ArrayIndexing	std_pipes [ i ]		1098577	0					
ANR	1098638	Identifier	std_pipes		1098577	0					
ANR	1098639	Identifier	i		1098577	1					
ANR	1098640	IfStatement	if ( ! shared_port_fname . IsEmpty ( ) )		1098577	3					
ANR	1098641	Condition	! shared_port_fname . IsEmpty ( )	11183:5:339969:339996	1098577	0	True				
ANR	1098642	UnaryOperationExpression	! shared_port_fname . IsEmpty ( )		1098577	0					
ANR	1098643	UnaryOperator	!		1098577	0					
ANR	1098644	CallExpression	shared_port_fname . IsEmpty ( )		1098577	1					
ANR	1098645	Callee	shared_port_fname . IsEmpty		1098577	0					
ANR	1098646	MemberAccess	shared_port_fname . IsEmpty		1098577	0					
ANR	1098647	Identifier	shared_port_fname		1098577	0					
ANR	1098648	Identifier	IsEmpty		1098577	1					
ANR	1098649	ArgumentList			1098577	1					
ANR	1098650	CompoundStatement		15:36:305:305	1098577	1					
ANR	1098651	ExpressionStatement	SharedPortEndpoint :: RemoveSocket ( shared_port_fname . Value ( ) )	11187:2:340108:340169	1098577	0	True				
ANR	1098652	CallExpression	SharedPortEndpoint :: RemoveSocket ( shared_port_fname . Value ( ) )		1098577	0					
ANR	1098653	Callee	SharedPortEndpoint :: RemoveSocket		1098577	0					
ANR	1098654	Identifier	SharedPortEndpoint :: RemoveSocket		1098577	0					
ANR	1098655	ArgumentList	shared_port_fname . Value ( )		1098577	1					
ANR	1098656	Argument	shared_port_fname . Value ( )		1098577	0					
ANR	1098657	CallExpression	shared_port_fname . Value ( )		1098577	0					
ANR	1098658	Callee	shared_port_fname . Value		1098577	0					
ANR	1098659	MemberAccess	shared_port_fname . Value		1098577	0					
ANR	1098660	Identifier	shared_port_fname		1098577	0					
ANR	1098661	Identifier	Value		1098577	1					
ANR	1098662	ArgumentList			1098577	1					
ANR	1098663	IfStatement	if ( child_session_id )		1098577	4					
ANR	1098664	Condition	child_session_id	11190:4:340185:340200	1098577	0	True				
ANR	1098665	Identifier	child_session_id		1098577	0					
ANR	1098666	ExpressionStatement	free ( child_session_id )	11191:2:340205:340227	1098577	1	True				
ANR	1098667	CallExpression	free ( child_session_id )		1098577	0					
ANR	1098668	Callee	free		1098577	0					
ANR	1098669	Identifier	free		1098577	0					
ANR	1098670	ArgumentList	child_session_id		1098577	1					
ANR	1098671	Argument	child_session_id		1098577	0					
ANR	1098672	Identifier	child_session_id		1098577	0					
ANR	1098673	Identifier	DaemonCore :: PidEntry :: ~PidEntry		1098577	1					
ANR	1098674	ParameterList			1098577	2					
ANR	1098675	CFGEntryNode	ENTRY		1098577		True				
ANR	1098676	CFGExitNode	EXIT		1098577		True				
ANR	1098677	Symbol	* i		1098577						
ANR	1098678	Symbol	* std_pipes		1098577						
ANR	1098679	Symbol	shared_port_fname . Value		1098577						
ANR	1098680	Symbol	std_pipes		1098577						
ANR	1098681	Symbol	daemonCore		1098577						
ANR	1098682	Symbol	i		1098577						
ANR	1098683	Symbol	DC_STD_FD_NOPIPE		1098577						
ANR	1098684	Symbol	child_session_id		1098577						
ANR	1098685	Symbol	shared_port_fname . IsEmpty		1098577						
ANR	1098686	Symbol	shared_port_fname		1098577						
ANR	1098687	Symbol	pipe_buf		1098577						
ANR	1098688	Symbol	* pipe_buf		1098577						
ANR	1098689	Function	DaemonCore :: PidEntry :: pipeHandler	11195:0:340233:342090							
ANR	1098690	FunctionDef	DaemonCore :: PidEntry :: pipeHandler (int pipe_fd)		1098689	0					
ANR	1098691	CompoundStatement		11196:47:340284:342090	1098689	0					
ANR	1098692	IdentifierDeclStatement	char buf [ DC_PIPE_BUF_SIZE + 1 ] ;	11197:4:340290:340320	1098689	0	True				
ANR	1098693	IdentifierDecl	buf [ DC_PIPE_BUF_SIZE + 1 ]		1098689	0					
ANR	1098694	IdentifierDeclType	char [ DC_PIPE_BUF_SIZE + 1 ]		1098689	0					
ANR	1098695	Identifier	buf		1098689	1					
ANR	1098696	AdditiveExpression	DC_PIPE_BUF_SIZE + 1		1098689	2		+			
ANR	1098697	Identifier	DC_PIPE_BUF_SIZE		1098689	0					
ANR	1098698	PrimaryExpression	1		1098689	1					
ANR	1098699	IdentifierDeclStatement	"int bytes , max_read_bytes , max_buffer ;"	11198:4:340326:340363	1098689	1	True				
ANR	1098700	IdentifierDecl	bytes		1098689	0					
ANR	1098701	IdentifierDeclType	int		1098689	0					
ANR	1098702	Identifier	bytes		1098689	1					
ANR	1098703	IdentifierDecl	max_read_bytes		1098689	1					
ANR	1098704	IdentifierDeclType	int		1098689	0					
ANR	1098705	Identifier	max_read_bytes		1098689	1					
ANR	1098706	IdentifierDecl	max_buffer		1098689	2					
ANR	1098707	IdentifierDeclType	int		1098689	0					
ANR	1098708	Identifier	max_buffer		1098689	1					
ANR	1098709	IdentifierDeclStatement	int pipe_index = 0 ;	11199:1:340366:340384	1098689	2	True				
ANR	1098710	IdentifierDecl	pipe_index = 0		1098689	0					
ANR	1098711	IdentifierDeclType	int		1098689	0					
ANR	1098712	Identifier	pipe_index		1098689	1					
ANR	1098713	AssignmentExpression	pipe_index = 0		1098689	2		=			
ANR	1098714	Identifier	pipe_index		1098689	0					
ANR	1098715	PrimaryExpression	0		1098689	1					
ANR	1098716	IdentifierDeclStatement	MyString * cur_buf = NULL ;	11200:1:340387:340411	1098689	3	True				
ANR	1098717	IdentifierDecl	* cur_buf = NULL		1098689	0					
ANR	1098718	IdentifierDeclType	MyString *		1098689	0					
ANR	1098719	Identifier	cur_buf		1098689	1					
ANR	1098720	AssignmentExpression	* cur_buf = NULL		1098689	2		=			
ANR	1098721	Identifier	NULL		1098689	0					
ANR	1098722	Identifier	NULL		1098689	1					
ANR	1098723	IdentifierDeclStatement	const char * pipe_desc = NULL ;	11201:1:340414:340440	1098689	4	True				
ANR	1098724	IdentifierDecl	* pipe_desc = NULL		1098689	0					
ANR	1098725	IdentifierDeclType	const char *		1098689	0					
ANR	1098726	Identifier	pipe_desc		1098689	1					
ANR	1098727	AssignmentExpression	* pipe_desc = NULL		1098689	2		=			
ANR	1098728	Identifier	NULL		1098689	0					
ANR	1098729	Identifier	NULL		1098689	1					
ANR	1098730	IfStatement	if ( std_pipes [ 1 ] == pipe_fd )		1098689	5					
ANR	1098731	Condition	std_pipes [ 1 ] == pipe_fd	11202:5:340447:340469	1098689	0	True				
ANR	1098732	EqualityExpression	std_pipes [ 1 ] == pipe_fd		1098689	0		==			
ANR	1098733	ArrayIndexing	std_pipes [ 1 ]		1098689	0					
ANR	1098734	Identifier	std_pipes		1098689	0					
ANR	1098735	PrimaryExpression	1		1098689	1					
ANR	1098736	Identifier	pipe_fd		1098689	1					
ANR	1098737	CompoundStatement		7:30:187:187	1098689	1					
ANR	1098738	ExpressionStatement	pipe_index = 1	11203:2:340476:340490	1098689	0	True				
ANR	1098739	AssignmentExpression	pipe_index = 1		1098689	0		=			
ANR	1098740	Identifier	pipe_index		1098689	0					
ANR	1098741	PrimaryExpression	1		1098689	1					
ANR	1098742	ExpressionStatement	"pipe_desc = ""stdout"""	11204:2:340494:340514	1098689	1	True				
ANR	1098743	AssignmentExpression	"pipe_desc = ""stdout"""		1098689	0		=			
ANR	1098744	Identifier	pipe_desc		1098689	0					
ANR	1098745	PrimaryExpression	"""stdout"""		1098689	1					
ANR	1098746	ElseStatement	else		1098689	0					
ANR	1098747	IfStatement	if ( std_pipes [ 2 ] == pipe_fd )		1098689	0					
ANR	1098748	Condition	std_pipes [ 2 ] == pipe_fd	11206:10:340529:340551	1098689	0	True				
ANR	1098749	EqualityExpression	std_pipes [ 2 ] == pipe_fd		1098689	0		==			
ANR	1098750	ArrayIndexing	std_pipes [ 2 ]		1098689	0					
ANR	1098751	Identifier	std_pipes		1098689	0					
ANR	1098752	PrimaryExpression	2		1098689	1					
ANR	1098753	Identifier	pipe_fd		1098689	1					
ANR	1098754	CompoundStatement		11:35:269:269	1098689	1					
ANR	1098755	ExpressionStatement	pipe_index = 2	11207:2:340558:340572	1098689	0	True				
ANR	1098756	AssignmentExpression	pipe_index = 2		1098689	0		=			
ANR	1098757	Identifier	pipe_index		1098689	0					
ANR	1098758	PrimaryExpression	2		1098689	1					
ANR	1098759	ExpressionStatement	"pipe_desc = ""stderr"""	11208:2:340576:340596	1098689	1	True				
ANR	1098760	AssignmentExpression	"pipe_desc = ""stderr"""		1098689	0		=			
ANR	1098761	Identifier	pipe_desc		1098689	0					
ANR	1098762	PrimaryExpression	"""stderr"""		1098689	1					
ANR	1098763	ElseStatement	else		1098689	0					
ANR	1098764	CompoundStatement		15:6:322:322	1098689	0					
ANR	1098765	ExpressionStatement	"EXCEPT ( ""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"" , ( int ) pid , pipe_fd )"	11211:2:340611:340704	1098689	0	True				
ANR	1098766	CallExpression	"EXCEPT ( ""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"" , ( int ) pid , pipe_fd )"		1098689	0					
ANR	1098767	Callee	EXCEPT		1098689	0					
ANR	1098768	Identifier	EXCEPT		1098689	0					
ANR	1098769	ArgumentList	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		1098689	1					
ANR	1098770	Argument	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		1098689	0					
ANR	1098771	PrimaryExpression	"""IMPOSSIBLE: in pipeHandler() for pid %d with unknown fd %d"""		1098689	0					
ANR	1098772	Argument	( int ) pid		1098689	1					
ANR	1098773	CastExpression	( int ) pid		1098689	0					
ANR	1098774	CastTarget	int		1098689	0					
ANR	1098775	Identifier	pid		1098689	1					
ANR	1098776	Argument	pipe_fd		1098689	2					
ANR	1098777	Identifier	pipe_fd		1098689	0					
ANR	1098778	IfStatement	if ( pipe_buf [ pipe_index ] == NULL )		1098689	6					
ANR	1098779	Condition	pipe_buf [ pipe_index ] == NULL	11215:5:340715:340742	1098689	0	True				
ANR	1098780	EqualityExpression	pipe_buf [ pipe_index ] == NULL		1098689	0		==			
ANR	1098781	ArrayIndexing	pipe_buf [ pipe_index ]		1098689	0					
ANR	1098782	Identifier	pipe_buf		1098689	0					
ANR	1098783	Identifier	pipe_index		1098689	1					
ANR	1098784	Identifier	NULL		1098689	1					
ANR	1098785	CompoundStatement		20:35:460:460	1098689	1					
ANR	1098786	Statement	pipe_buf	11217:2:340796:340803	1098689	0	True				
ANR	1098787	Statement	[	11217:10:340804:340804	1098689	1	True				
ANR	1098788	Statement	pipe_index	11217:11:340805:340814	1098689	2	True				
ANR	1098789	Statement	]	11217:21:340815:340815	1098689	3	True				
ANR	1098790	Statement	=	11217:23:340817:340817	1098689	4	True				
ANR	1098791	Statement	new	11217:25:340819:340821	1098689	5	True				
ANR	1098792	ExpressionStatement	MyString	11217:29:340823:340831	1098689	6	True				
ANR	1098793	Identifier	MyString		1098689	0					
ANR	1098794	ExpressionStatement	cur_buf = pipe_buf [ pipe_index ]	11219:1:340837:340867	1098689	7	True				
ANR	1098795	AssignmentExpression	cur_buf = pipe_buf [ pipe_index ]		1098689	0		=			
ANR	1098796	Identifier	cur_buf		1098689	0					
ANR	1098797	ArrayIndexing	pipe_buf [ pipe_index ]		1098689	1					
ANR	1098798	Identifier	pipe_buf		1098689	0					
ANR	1098799	Identifier	pipe_index		1098689	1					
ANR	1098800	ExpressionStatement	max_buffer = daemonCore -> Get_Max_Pipe_Buffer ( )	11222:1:340938:340984	1098689	8	True				
ANR	1098801	AssignmentExpression	max_buffer = daemonCore -> Get_Max_Pipe_Buffer ( )		1098689	0		=			
ANR	1098802	Identifier	max_buffer		1098689	0					
ANR	1098803	CallExpression	daemonCore -> Get_Max_Pipe_Buffer ( )		1098689	1					
ANR	1098804	Callee	daemonCore -> Get_Max_Pipe_Buffer		1098689	0					
ANR	1098805	PtrMemberAccess	daemonCore -> Get_Max_Pipe_Buffer		1098689	0					
ANR	1098806	Identifier	daemonCore		1098689	0					
ANR	1098807	Identifier	Get_Max_Pipe_Buffer		1098689	1					
ANR	1098808	ArgumentList			1098689	1					
ANR	1098809	ExpressionStatement	max_read_bytes = max_buffer - cur_buf -> Length ( )	11224:1:340988:341035	1098689	9	True				
ANR	1098810	AssignmentExpression	max_read_bytes = max_buffer - cur_buf -> Length ( )		1098689	0		=			
ANR	1098811	Identifier	max_read_bytes		1098689	0					
ANR	1098812	AdditiveExpression	max_buffer - cur_buf -> Length ( )		1098689	1		-			
ANR	1098813	Identifier	max_buffer		1098689	0					
ANR	1098814	CallExpression	cur_buf -> Length ( )		1098689	1					
ANR	1098815	Callee	cur_buf -> Length		1098689	0					
ANR	1098816	PtrMemberAccess	cur_buf -> Length		1098689	0					
ANR	1098817	Identifier	cur_buf		1098689	0					
ANR	1098818	Identifier	Length		1098689	1					
ANR	1098819	ArgumentList			1098689	1					
ANR	1098820	IfStatement	if ( max_read_bytes > DC_PIPE_BUF_SIZE )		1098689	10					
ANR	1098821	Condition	max_read_bytes > DC_PIPE_BUF_SIZE	11225:5:341042:341074	1098689	0	True				
ANR	1098822	RelationalExpression	max_read_bytes > DC_PIPE_BUF_SIZE		1098689	0		>			
ANR	1098823	Identifier	max_read_bytes		1098689	0					
ANR	1098824	Identifier	DC_PIPE_BUF_SIZE		1098689	1					
ANR	1098825	CompoundStatement		30:40:792:792	1098689	1					
ANR	1098826	ExpressionStatement	max_read_bytes = DC_PIPE_BUF_SIZE	11226:2:341081:341114	1098689	0	True				
ANR	1098827	AssignmentExpression	max_read_bytes = DC_PIPE_BUF_SIZE		1098689	0		=			
ANR	1098828	Identifier	max_read_bytes		1098689	0					
ANR	1098829	Identifier	DC_PIPE_BUF_SIZE		1098689	1					
ANR	1098830	ExpressionStatement	"bytes = daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"	11229:1:341121:341180	1098689	11	True				
ANR	1098831	AssignmentExpression	"bytes = daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"		1098689	0		=			
ANR	1098832	Identifier	bytes		1098689	0					
ANR	1098833	CallExpression	"daemonCore -> Read_Pipe ( pipe_fd , buf , max_read_bytes )"		1098689	1					
ANR	1098834	Callee	daemonCore -> Read_Pipe		1098689	0					
ANR	1098835	PtrMemberAccess	daemonCore -> Read_Pipe		1098689	0					
ANR	1098836	Identifier	daemonCore		1098689	0					
ANR	1098837	Identifier	Read_Pipe		1098689	1					
ANR	1098838	ArgumentList	pipe_fd		1098689	1					
ANR	1098839	Argument	pipe_fd		1098689	0					
ANR	1098840	Identifier	pipe_fd		1098689	0					
ANR	1098841	Argument	buf		1098689	1					
ANR	1098842	Identifier	buf		1098689	0					
ANR	1098843	Argument	max_read_bytes		1098689	2					
ANR	1098844	Identifier	max_read_bytes		1098689	0					
ANR	1098845	IfStatement	if ( bytes > 0 )		1098689	12					
ANR	1098846	Condition	bytes > 0	11230:5:341187:341195	1098689	0	True				
ANR	1098847	RelationalExpression	bytes > 0		1098689	0		>			
ANR	1098848	Identifier	bytes		1098689	0					
ANR	1098849	PrimaryExpression	0		1098689	1					
ANR	1098850	CompoundStatement		35:16:913:913	1098689	1					
ANR	1098851	ExpressionStatement	buf [ bytes ] = '\\0'	11235:2:341440:341457	1098689	0	True				
ANR	1098852	AssignmentExpression	buf [ bytes ] = '\\0'		1098689	0		=			
ANR	1098853	ArrayIndexing	buf [ bytes ]		1098689	0					
ANR	1098854	Identifier	buf		1098689	0					
ANR	1098855	Identifier	bytes		1098689	1					
ANR	1098856	PrimaryExpression	'\\0'		1098689	1					
ANR	1098857	ExpressionStatement	* cur_buf += buf	11236:2:341461:341476	1098689	1	True				
ANR	1098858	AssignmentExpression	* cur_buf += buf		1098689	0		+=			
ANR	1098859	UnaryOperationExpression	* cur_buf		1098689	0					
ANR	1098860	UnaryOperator	*		1098689	0					
ANR	1098861	Identifier	cur_buf		1098689	1					
ANR	1098862	Identifier	buf		1098689	1					
ANR	1098863	IfStatement	if ( cur_buf -> Length ( ) >= max_buffer )		1098689	2					
ANR	1098864	Condition	cur_buf -> Length ( ) >= max_buffer	11238:6:341485:341515	1098689	0	True				
ANR	1098865	RelationalExpression	cur_buf -> Length ( ) >= max_buffer		1098689	0		>=			
ANR	1098866	CallExpression	cur_buf -> Length ( )		1098689	0					
ANR	1098867	Callee	cur_buf -> Length		1098689	0					
ANR	1098868	PtrMemberAccess	cur_buf -> Length		1098689	0					
ANR	1098869	Identifier	cur_buf		1098689	0					
ANR	1098870	Identifier	Length		1098689	1					
ANR	1098871	ArgumentList			1098689	1					
ANR	1098872	Identifier	max_buffer		1098689	1					
ANR	1098873	CompoundStatement		43:39:1233:1233	1098689	1					
ANR	1098874	Statement	dprintf	11239:3:341523:341529	1098689	0	True				
ANR	1098875	Statement	(	11239:10:341530:341530	1098689	1	True				
ANR	1098876	Statement	D_DAEMONCORE	11239:11:341531:341542	1098689	2	True				
ANR	1098877	Statement	","	11239:23:341543:341543	1098689	3	True				
ANR	1098878	Statement	"""DC %s pipe closed for """	11239:25:341545:341568	1098689	4	True				
ANR	1098879	Statement	"""pid %d because max bytes (%d)"""	11240:5:341575:341605	1098689	5	True				
ANR	1098880	Statement	"""read\\n"""	11241:5:341612:341619	1098689	6	True				
ANR	1098881	Statement	","	11241:13:341620:341620	1098689	7	True				
ANR	1098882	Statement	pipe_desc	11241:15:341622:341630	1098689	8	True				
ANR	1098883	Statement	","	11241:24:341631:341631	1098689	9	True				
ANR	1098884	Statement	(	11241:26:341633:341633	1098689	10	True				
ANR	1098885	Statement	int	11241:27:341634:341636	1098689	11	True				
ANR	1098886	Statement	)	11241:30:341637:341637	1098689	12	True				
ANR	1098887	Statement	pid	11241:31:341638:341640	1098689	13	True				
ANR	1098888	Statement	","	11241:34:341641:341641	1098689	14	True				
ANR	1098889	Statement	max_buffer	11242:5:341648:341657	1098689	15	True				
ANR	1098890	Statement	)	11242:15:341658:341658	1098689	16	True				
ANR	1098891	ExpressionStatement		11242:16:341659:341659	1098689	17	True				
ANR	1098892	ExpressionStatement	daemonCore -> Close_Pipe ( pipe_fd )	11243:3:341664:341695	1098689	18	True				
ANR	1098893	CallExpression	daemonCore -> Close_Pipe ( pipe_fd )		1098689	0					
ANR	1098894	Callee	daemonCore -> Close_Pipe		1098689	0					
ANR	1098895	PtrMemberAccess	daemonCore -> Close_Pipe		1098689	0					
ANR	1098896	Identifier	daemonCore		1098689	0					
ANR	1098897	Identifier	Close_Pipe		1098689	1					
ANR	1098898	ArgumentList	pipe_fd		1098689	1					
ANR	1098899	Argument	pipe_fd		1098689	0					
ANR	1098900	Identifier	pipe_fd		1098689	0					
ANR	1098901	ExpressionStatement	std_pipes [ pipe_index ] = DC_STD_FD_NOPIPE	11244:3:341700:341740	1098689	19	True				
ANR	1098902	AssignmentExpression	std_pipes [ pipe_index ] = DC_STD_FD_NOPIPE		1098689	0		=			
ANR	1098903	ArrayIndexing	std_pipes [ pipe_index ]		1098689	0					
ANR	1098904	Identifier	std_pipes		1098689	0					
ANR	1098905	Identifier	pipe_index		1098689	1					
ANR	1098906	Identifier	DC_STD_FD_NOPIPE		1098689	1					
ANR	1098907	ElseStatement	else		1098689	0					
ANR	1098908	IfStatement	if ( ( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) ) )		1098689	0					
ANR	1098909	Condition	( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) )	11247:10:341759:341818	1098689	0	True				
ANR	1098910	AndExpression	( bytes < 0 ) && ( ( EWOULDBLOCK != errno ) && ( EAGAIN != errno ) )		1098689	0		&&			
ANR	1098911	RelationalExpression	bytes < 0		1098689	0		<			
ANR	1098912	Identifier	bytes		1098689	0					
ANR	1098913	PrimaryExpression	0		1098689	1					
ANR	1098914	AndExpression	( EWOULDBLOCK != errno ) && ( EAGAIN != errno )		1098689	1		&&			
ANR	1098915	EqualityExpression	EWOULDBLOCK != errno		1098689	0		!=			
ANR	1098916	Identifier	EWOULDBLOCK		1098689	0					
ANR	1098917	Identifier	errno		1098689	1					
ANR	1098918	EqualityExpression	EAGAIN != errno		1098689	1		!=			
ANR	1098919	Identifier	EAGAIN		1098689	0					
ANR	1098920	Identifier	errno		1098689	1					
ANR	1098921	CompoundStatement		52:72:1536:1536	1098689	1					
ANR	1098922	Statement	dprintf	11250:2:341907:341913	1098689	0	True				
ANR	1098923	Statement	(	11250:9:341914:341914	1098689	1	True				
ANR	1098924	Statement	D_ALWAYS	11250:10:341915:341922	1098689	2	True				
ANR	1098925	Statement	|	11250:18:341923:341923	1098689	3	True				
ANR	1098926	Statement	D_FAILURE	11250:19:341924:341932	1098689	4	True				
ANR	1098927	Statement	","	11250:28:341933:341933	1098689	5	True				
ANR	1098928	Statement	"""DC pipeHandler: """	11250:30:341935:341952	1098689	6	True				
ANR	1098929	Statement	"""read %s failed for pid %d: '%s' (errno: %d)\\n"""	11251:4:341958:342004	1098689	7	True				
ANR	1098930	Statement	","	11251:51:342005:342005	1098689	8	True				
ANR	1098931	Statement	pipe_desc	11252:4:342011:342019	1098689	9	True				
ANR	1098932	Statement	","	11252:13:342020:342020	1098689	10	True				
ANR	1098933	Statement	(	11252:15:342022:342022	1098689	11	True				
ANR	1098934	Statement	int	11252:16:342023:342025	1098689	12	True				
ANR	1098935	Statement	)	11252:19:342026:342026	1098689	13	True				
ANR	1098936	Statement	pid	11252:20:342027:342029	1098689	14	True				
ANR	1098937	Statement	","	11252:23:342030:342030	1098689	15	True				
ANR	1098938	Statement	strerror	11252:25:342032:342039	1098689	16	True				
ANR	1098939	Statement	(	11252:33:342040:342040	1098689	17	True				
ANR	1098940	Statement	errno	11252:34:342041:342045	1098689	18	True				
ANR	1098941	Statement	)	11252:39:342046:342046	1098689	19	True				
ANR	1098942	Statement	","	11252:40:342047:342047	1098689	20	True				
ANR	1098943	Statement	errno	11252:42:342049:342053	1098689	21	True				
ANR	1098944	Statement	)	11252:47:342054:342054	1098689	22	True				
ANR	1098945	ExpressionStatement		11252:48:342055:342055	1098689	23	True				
ANR	1098946	ReturnStatement	return FALSE ;	11253:2:342059:342071	1098689	24	True				
ANR	1098947	Identifier	FALSE		1098689	0					
ANR	1098948	ReturnStatement	return TRUE ;	11255:1:342077:342088	1098689	13	True				
ANR	1098949	Identifier	TRUE		1098689	0					
ANR	1098950	ReturnType	int		1098689	1					
ANR	1098951	Identifier	DaemonCore :: PidEntry :: pipeHandler		1098689	2					
ANR	1098952	ParameterList	int pipe_fd		1098689	3					
ANR	1098953	Parameter	int pipe_fd	11196:34:340271:340281	1098689	0	True				
ANR	1098954	ParameterType	int		1098689	0					
ANR	1098955	Identifier	pipe_fd		1098689	1					
ANR	1098956	CFGEntryNode	ENTRY		1098689		True				
ANR	1098957	CFGExitNode	EXIT		1098689		True				
ANR	1098958	Symbol	std_pipes		1098689						
ANR	1098959	Symbol	pid		1098689						
ANR	1098960	Symbol	pipe_desc		1098689						
ANR	1098961	Symbol	* bytes		1098689						
ANR	1098962	Symbol	DC_PIPE_BUF_SIZE		1098689						
ANR	1098963	Symbol	* std_pipes		1098689						
ANR	1098964	Symbol	cur_buf		1098689						
ANR	1098965	Symbol	daemonCore		1098689						
ANR	1098966	Symbol	max_read_bytes		1098689						
ANR	1098967	Symbol	DC_STD_FD_NOPIPE		1098689						
ANR	1098968	Symbol	pipe_index		1098689						
ANR	1098969	Symbol	* buf		1098689						
ANR	1098970	Symbol	errno		1098689						
ANR	1098971	Symbol	NULL		1098689						
ANR	1098972	Symbol	cur_buf -> Length		1098689						
ANR	1098973	Symbol	* pipe_index		1098689						
ANR	1098974	Symbol	EAGAIN		1098689						
ANR	1098975	Symbol	TRUE		1098689						
ANR	1098976	Symbol	pipe_buf		1098689						
ANR	1098977	Symbol	pipe_fd		1098689						
ANR	1098978	Symbol	max_buffer		1098689						
ANR	1098979	Symbol	buf		1098689						
ANR	1098980	Symbol	daemonCore -> Read_Pipe		1098689						
ANR	1098981	Symbol	bytes		1098689						
ANR	1098982	Symbol	* daemonCore		1098689						
ANR	1098983	Symbol	EWOULDBLOCK		1098689						
ANR	1098984	Symbol	FALSE		1098689						
ANR	1098985	Symbol	* cur_buf		1098689						
ANR	1098986	Symbol	* pipe_buf		1098689						
ANR	1098987	Symbol	daemonCore -> Get_Max_Pipe_Buffer		1098689						
ANR	1098988	Function	DaemonCore :: PidEntry :: pipeFullWrite	11259:0:342094:343401							
ANR	1098989	FunctionDef	DaemonCore :: PidEntry :: pipeFullWrite (int fd)		1098988	0					
ANR	1098990	CompoundStatement		11261:0:342142:343401	1098988	0					
ANR	1098991	IdentifierDeclStatement	int bytes_written = 0 ;	11262:1:342145:342166	1098988	0	True				
ANR	1098992	IdentifierDecl	bytes_written = 0		1098988	0					
ANR	1098993	IdentifierDeclType	int		1098988	0					
ANR	1098994	Identifier	bytes_written		1098988	1					
ANR	1098995	AssignmentExpression	bytes_written = 0		1098988	2		=			
ANR	1098996	Identifier	bytes_written		1098988	0					
ANR	1098997	PrimaryExpression	0		1098988	1					
ANR	1098998	IdentifierDeclStatement	void * data_left = NULL ;	11263:1:342169:342191	1098988	1	True				
ANR	1098999	IdentifierDecl	* data_left = NULL		1098988	0					
ANR	1099000	IdentifierDeclType	void *		1098988	0					
ANR	1099001	Identifier	data_left		1098988	1					
ANR	1099002	AssignmentExpression	* data_left = NULL		1098988	2		=			
ANR	1099003	Identifier	NULL		1098988	0					
ANR	1099004	Identifier	NULL		1098988	1					
ANR	1099005	IdentifierDeclStatement	int total_len = 0 ;	11264:1:342194:342211	1098988	2	True				
ANR	1099006	IdentifierDecl	total_len = 0		1098988	0					
ANR	1099007	IdentifierDeclType	int		1098988	0					
ANR	1099008	Identifier	total_len		1098988	1					
ANR	1099009	AssignmentExpression	total_len = 0		1098988	2		=			
ANR	1099010	Identifier	total_len		1098988	0					
ANR	1099011	PrimaryExpression	0		1098988	1					
ANR	1099012	IfStatement	if ( pipe_buf [ 0 ] != NULL )		1098988	3					
ANR	1099013	Condition	pipe_buf [ 0 ] != NULL	11266:5:342219:342237	1098988	0	True				
ANR	1099014	EqualityExpression	pipe_buf [ 0 ] != NULL		1098988	0		!=			
ANR	1099015	ArrayIndexing	pipe_buf [ 0 ]		1098988	0					
ANR	1099016	Identifier	pipe_buf		1098988	0					
ANR	1099017	PrimaryExpression	0		1098988	1					
ANR	1099018	Identifier	NULL		1098988	1					
ANR	1099019	CompoundStatement		7:1:98:98	1098988	1					
ANR	1099020	ExpressionStatement	data_left = ( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )	11268:2:342245:342317	1098988	0	True				
ANR	1099021	AssignmentExpression	data_left = ( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )		1098988	0		=			
ANR	1099022	Identifier	data_left		1098988	0					
ANR	1099023	CastExpression	( void * ) ( ( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset )		1098988	1					
ANR	1099024	CastTarget	void *		1098988	0					
ANR	1099025	AdditiveExpression	( ( const char * ) pipe_buf [ 0 ] -> Value ( ) ) + stdin_offset		1098988	1		+			
ANR	1099026	CastExpression	( const char * ) pipe_buf [ 0 ] -> Value ( )		1098988	0					
ANR	1099027	CastTarget	const char *		1098988	0					
ANR	1099028	CallExpression	pipe_buf [ 0 ] -> Value ( )		1098988	1					
ANR	1099029	Callee	pipe_buf [ 0 ] -> Value		1098988	0					
ANR	1099030	PtrMemberAccess	pipe_buf [ 0 ] -> Value		1098988	0					
ANR	1099031	ArrayIndexing	pipe_buf [ 0 ]		1098988	0					
ANR	1099032	Identifier	pipe_buf		1098988	0					
ANR	1099033	PrimaryExpression	0		1098988	1					
ANR	1099034	Identifier	Value		1098988	1					
ANR	1099035	ArgumentList			1098988	1					
ANR	1099036	Identifier	stdin_offset		1098988	1					
ANR	1099037	ExpressionStatement	total_len = pipe_buf [ 0 ] -> Length ( )	11269:2:342321:342354	1098988	1	True				
ANR	1099038	AssignmentExpression	total_len = pipe_buf [ 0 ] -> Length ( )		1098988	0		=			
ANR	1099039	Identifier	total_len		1098988	0					
ANR	1099040	CallExpression	pipe_buf [ 0 ] -> Length ( )		1098988	1					
ANR	1099041	Callee	pipe_buf [ 0 ] -> Length		1098988	0					
ANR	1099042	PtrMemberAccess	pipe_buf [ 0 ] -> Length		1098988	0					
ANR	1099043	ArrayIndexing	pipe_buf [ 0 ]		1098988	0					
ANR	1099044	Identifier	pipe_buf		1098988	0					
ANR	1099045	PrimaryExpression	0		1098988	1					
ANR	1099046	Identifier	Length		1098988	1					
ANR	1099047	ArgumentList			1098988	1					
ANR	1099048	ExpressionStatement	"bytes_written = daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"	11270:2:342358:342437	1098988	2	True				
ANR	1099049	AssignmentExpression	"bytes_written = daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"		1098988	0		=			
ANR	1099050	Identifier	bytes_written		1098988	0					
ANR	1099051	CallExpression	"daemonCore -> Write_Pipe ( fd , data_left , total_len - stdin_offset )"		1098988	1					
ANR	1099052	Callee	daemonCore -> Write_Pipe		1098988	0					
ANR	1099053	PtrMemberAccess	daemonCore -> Write_Pipe		1098988	0					
ANR	1099054	Identifier	daemonCore		1098988	0					
ANR	1099055	Identifier	Write_Pipe		1098988	1					
ANR	1099056	ArgumentList	fd		1098988	1					
ANR	1099057	Argument	fd		1098988	0					
ANR	1099058	Identifier	fd		1098988	0					
ANR	1099059	Argument	data_left		1098988	1					
ANR	1099060	Identifier	data_left		1098988	0					
ANR	1099061	Argument	total_len - stdin_offset		1098988	2					
ANR	1099062	AdditiveExpression	total_len - stdin_offset		1098988	0		-			
ANR	1099063	Identifier	total_len		1098988	0					
ANR	1099064	Identifier	stdin_offset		1098988	1					
ANR	1099065	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"" , total_len , bytes_written )"	11271:2:342441:342586	1098988	3	True				
ANR	1099066	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"" , total_len , bytes_written )"		1098988	0					
ANR	1099067	Callee	dprintf		1098988	0					
ANR	1099068	Identifier	dprintf		1098988	0					
ANR	1099069	ArgumentList	D_DAEMONCORE		1098988	1					
ANR	1099070	Argument	D_DAEMONCORE		1098988	0					
ANR	1099071	Identifier	D_DAEMONCORE		1098988	0					
ANR	1099072	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"""		1098988	1					
ANR	1099073	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Total bytes to write = %d, bytes written this pass = %d\\n"""		1098988	0					
ANR	1099074	Argument	total_len		1098988	2					
ANR	1099075	Identifier	total_len		1098988	0					
ANR	1099076	Argument	bytes_written		1098988	3					
ANR	1099077	Identifier	bytes_written		1098988	0					
ANR	1099078	IfStatement	if ( 0 <= bytes_written )		1098988	4					
ANR	1099079	Condition	0 <= bytes_written	11274:5:342597:342614	1098988	0	True				
ANR	1099080	RelationalExpression	0 <= bytes_written		1098988	0		<=			
ANR	1099081	PrimaryExpression	0		1098988	0					
ANR	1099082	Identifier	bytes_written		1098988	1					
ANR	1099083	CompoundStatement		15:1:475:475	1098988	1					
ANR	1099084	ExpressionStatement	stdin_offset = stdin_offset + bytes_written	11276:2:342622:342665	1098988	0	True				
ANR	1099085	AssignmentExpression	stdin_offset = stdin_offset + bytes_written		1098988	0		=			
ANR	1099086	Identifier	stdin_offset		1098988	0					
ANR	1099087	AdditiveExpression	stdin_offset + bytes_written		1098988	1		+			
ANR	1099088	Identifier	stdin_offset		1098988	0					
ANR	1099089	Identifier	bytes_written		1098988	1					
ANR	1099090	IfStatement	if ( ( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL ) )		1098988	1					
ANR	1099091	Condition	( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL )	11277:6:342673:342724	1098988	0	True				
ANR	1099092	OrExpression	( stdin_offset == total_len ) || ( pipe_buf [ 0 ] == NULL )		1098988	0		||			
ANR	1099093	EqualityExpression	stdin_offset == total_len		1098988	0		==			
ANR	1099094	Identifier	stdin_offset		1098988	0					
ANR	1099095	Identifier	total_len		1098988	1					
ANR	1099096	EqualityExpression	pipe_buf [ 0 ] == NULL		1098988	1		==			
ANR	1099097	ArrayIndexing	pipe_buf [ 0 ]		1098988	0					
ANR	1099098	Identifier	pipe_buf		1098988	0					
ANR	1099099	PrimaryExpression	0		1098988	1					
ANR	1099100	Identifier	NULL		1098988	1					
ANR	1099101	CompoundStatement		18:2:586:586	1098988	1					
ANR	1099102	ExpressionStatement	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"" )"	11279:3:342734:342816	1098988	0	True				
ANR	1099103	CallExpression	"dprintf ( D_DAEMONCORE , ""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"" )"		1098988	0					
ANR	1099104	Callee	dprintf		1098988	0					
ANR	1099105	Identifier	dprintf		1098988	0					
ANR	1099106	ArgumentList	D_DAEMONCORE		1098988	1					
ANR	1099107	Argument	D_DAEMONCORE		1098988	0					
ANR	1099108	Identifier	D_DAEMONCORE		1098988	0					
ANR	1099109	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"""		1098988	1					
ANR	1099110	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Closing Stdin Pipe\\n"""		1098988	0					
ANR	1099111	ExpressionStatement	daemonCore -> Close_Stdin_Pipe ( pid )	11281:3:342865:342898	1098988	1	True				
ANR	1099112	CallExpression	daemonCore -> Close_Stdin_Pipe ( pid )		1098988	0					
ANR	1099113	Callee	daemonCore -> Close_Stdin_Pipe		1098988	0					
ANR	1099114	PtrMemberAccess	daemonCore -> Close_Stdin_Pipe		1098988	0					
ANR	1099115	Identifier	daemonCore		1098988	0					
ANR	1099116	Identifier	Close_Stdin_Pipe		1098988	1					
ANR	1099117	ArgumentList	pid		1098988	1					
ANR	1099118	Argument	pid		1098988	0					
ANR	1099119	Identifier	pid		1098988	0					
ANR	1099120	ElseStatement	else		1098988	0					
ANR	1099121	IfStatement	if ( errno != EINTR && errno != EAGAIN )		1098988	0					
ANR	1099122	Condition	errno != EINTR && errno != EAGAIN	11284:10:342917:342949	1098988	0	True				
ANR	1099123	AndExpression	errno != EINTR && errno != EAGAIN		1098988	0		&&			
ANR	1099124	EqualityExpression	errno != EINTR		1098988	0		!=			
ANR	1099125	Identifier	errno		1098988	0					
ANR	1099126	Identifier	EINTR		1098988	1					
ANR	1099127	EqualityExpression	errno != EAGAIN		1098988	1		!=			
ANR	1099128	Identifier	errno		1098988	0					
ANR	1099129	Identifier	EAGAIN		1098988	1					
ANR	1099130	CompoundStatement		25:1:810:810	1098988	1					
ANR	1099131	ExpressionStatement	"dprintf ( D_ALWAYS , ""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"" , fd , errno )"	11288:2:343055:343190	1098988	0	True				
ANR	1099132	CallExpression	"dprintf ( D_ALWAYS , ""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"" , fd , errno )"		1098988	0					
ANR	1099133	Callee	dprintf		1098988	0					
ANR	1099134	Identifier	dprintf		1098988	0					
ANR	1099135	ArgumentList	D_ALWAYS		1098988	1					
ANR	1099136	Argument	D_ALWAYS		1098988	0					
ANR	1099137	Identifier	D_ALWAYS		1098988	0					
ANR	1099138	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"""		1098988	1					
ANR	1099139	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Unable to write to fd %d (errno = %d).  Aborting write attempts.\\n"""		1098988	0					
ANR	1099140	Argument	fd		1098988	2					
ANR	1099141	Identifier	fd		1098988	0					
ANR	1099142	Argument	errno		1098988	3					
ANR	1099143	Identifier	errno		1098988	0					
ANR	1099144	ExpressionStatement	daemonCore -> Close_Stdin_Pipe ( pid )	11289:2:343194:343227	1098988	1	True				
ANR	1099145	CallExpression	daemonCore -> Close_Stdin_Pipe ( pid )		1098988	0					
ANR	1099146	Callee	daemonCore -> Close_Stdin_Pipe		1098988	0					
ANR	1099147	PtrMemberAccess	daemonCore -> Close_Stdin_Pipe		1098988	0					
ANR	1099148	Identifier	daemonCore		1098988	0					
ANR	1099149	Identifier	Close_Stdin_Pipe		1098988	1					
ANR	1099150	ArgumentList	pid		1098988	1					
ANR	1099151	Argument	pid		1098988	0					
ANR	1099152	Identifier	pid		1098988	0					
ANR	1099153	ElseStatement	else		1098988	0					
ANR	1099154	CompoundStatement		32:1:1096:1096	1098988	0					
ANR	1099155	ExpressionStatement	"dprintf ( D_DAEMONCORE | D_FULLDEBUG , ""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"" , fd , errno )"	11293:2:343243:343385	1098988	0	True				
ANR	1099156	CallExpression	"dprintf ( D_DAEMONCORE | D_FULLDEBUG , ""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"" , fd , errno )"		1098988	0					
ANR	1099157	Callee	dprintf		1098988	0					
ANR	1099158	Identifier	dprintf		1098988	0					
ANR	1099159	ArgumentList	D_DAEMONCORE | D_FULLDEBUG		1098988	1					
ANR	1099160	Argument	D_DAEMONCORE | D_FULLDEBUG		1098988	0					
ANR	1099161	InclusiveOrExpression	D_DAEMONCORE | D_FULLDEBUG		1098988	0		|			
ANR	1099162	Identifier	D_DAEMONCORE		1098988	0					
ANR	1099163	Identifier	D_FULLDEBUG		1098988	1					
ANR	1099164	Argument	"""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"""		1098988	1					
ANR	1099165	PrimaryExpression	"""DaemonCore::PidEntry::pipeFullWrite: Failed to write to fd %d (errno = %d).  Will try again.\\n"""		1098988	0					
ANR	1099166	Argument	fd		1098988	2					
ANR	1099167	Identifier	fd		1098988	0					
ANR	1099168	Argument	errno		1098988	3					
ANR	1099169	Identifier	errno		1098988	0					
ANR	1099170	ReturnStatement	return 0 ;	11295:1:343391:343399	1098988	5	True				
ANR	1099171	PrimaryExpression	0		1098988	0					
ANR	1099172	ReturnType	int		1098988	1					
ANR	1099173	Identifier	DaemonCore :: PidEntry :: pipeFullWrite		1098988	2					
ANR	1099174	ParameterList	int fd		1098988	3					
ANR	1099175	Parameter	int fd	11260:36:342134:342139	1098988	0	True				
ANR	1099176	ParameterType	int		1098988	0					
ANR	1099177	Identifier	fd		1098988	1					
ANR	1099178	CFGEntryNode	ENTRY		1098988		True				
ANR	1099179	CFGExitNode	EXIT		1098988		True				
ANR	1099180	Symbol	errno		1098988						
ANR	1099181	Symbol	NULL		1098988						
ANR	1099182	Symbol	D_DAEMONCORE		1098988						
ANR	1099183	Symbol	total_len		1098988						
ANR	1099184	Symbol	EINTR		1098988						
ANR	1099185	Symbol	EAGAIN		1098988						
ANR	1099186	Symbol	D_ALWAYS		1098988						
ANR	1099187	Symbol	pid		1098988						
ANR	1099188	Symbol	D_FULLDEBUG		1098988						
ANR	1099189	Symbol	* * pipe_buf		1098988						
ANR	1099190	Symbol	pipe_buf		1098988						
ANR	1099191	Symbol	data_left		1098988						
ANR	1099192	Symbol	bytes_written		1098988						
ANR	1099193	Symbol	stdin_offset		1098988						
ANR	1099194	Symbol	pipe_buf [ 0 ] -> Length		1098988						
ANR	1099195	Symbol	* daemonCore		1098988						
ANR	1099196	Symbol	daemonCore		1098988						
ANR	1099197	Symbol	daemonCore -> Write_Pipe		1098988						
ANR	1099198	Symbol	fd		1098988						
ANR	1099199	Symbol	* pipe_buf		1098988						
ANR	1099200	Symbol	pipe_buf [ 0 ] -> Value		1098988						
ANR	1099201	Function	DaemonCore :: send_invalidate_session	11298:0:343404:344033							
ANR	1099202	FunctionDef	"DaemonCore :: send_invalidate_session (const char * sinful , const char * sessid)"		1099201	0					
ANR	1099203	CompoundStatement		11298:84:343488:344033	1099201	0					
ANR	1099204	IfStatement	if ( ! sinful )		1099201	0					
ANR	1099205	Condition	! sinful	11299:6:343496:343502	1099201	0	True				
ANR	1099206	UnaryOperationExpression	! sinful		1099201	0					
ANR	1099207	UnaryOperator	!		1099201	0					
ANR	1099208	Identifier	sinful		1099201	1					
ANR	1099209	CompoundStatement		2:16:17:17	1099201	1					
ANR	1099210	ExpressionStatement	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"" , sessid )"	11300:2:343510:343621	1099201	0	True				
ANR	1099211	CallExpression	"dprintf ( D_SECURITY , ""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"" , sessid )"		1099201	0					
ANR	1099212	Callee	dprintf		1099201	0					
ANR	1099213	Identifier	dprintf		1099201	0					
ANR	1099214	ArgumentList	D_SECURITY		1099201	1					
ANR	1099215	Argument	D_SECURITY		1099201	0					
ANR	1099216	Identifier	D_SECURITY		1099201	0					
ANR	1099217	Argument	"""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"""		1099201	1					
ANR	1099218	PrimaryExpression	"""DC_AUTHENTICATE: couldn't invalidate session %s... don't know who it is from!\\n"""		1099201	0					
ANR	1099219	Argument	sessid		1099201	2					
ANR	1099220	Identifier	sessid		1099201	0					
ANR	1099221	ReturnStatement	return ;	11301:2:343625:343631	1099201	1	True				
ANR	1099222	IdentifierDeclStatement	"classy_counted_ptr < Daemon > daemon = new Daemon ( DT_ANY , sinful , NULL ) ;"	11304:1:343638:343704	1099201	1	True				
ANR	1099223	IdentifierDecl	"daemon = new Daemon ( DT_ANY , sinful , NULL )"		1099201	0					
ANR	1099224	IdentifierDeclType	classy_counted_ptr < Daemon >		1099201	0					
ANR	1099225	Identifier	daemon		1099201	1					
ANR	1099226	AssignmentExpression	"daemon = new Daemon ( DT_ANY , sinful , NULL )"		1099201	2		=			
ANR	1099227	Identifier	daemon		1099201	0					
ANR	1099228	Expression	"DT_ANY , sinful , NULL"		1099201	1					
ANR	1099229	Identifier	DT_ANY		1099201	0					
ANR	1099230	Expression	"sinful , NULL"		1099201	1					
ANR	1099231	Identifier	sinful		1099201	0					
ANR	1099232	Identifier	NULL		1099201	1					
ANR	1099233	IdentifierDeclStatement	"classy_counted_ptr < DCStringMsg > msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid ) ;"	11306:1:343708:343794	1099201	2	True				
ANR	1099234	IdentifierDecl	"msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid )"		1099201	0					
ANR	1099235	IdentifierDeclType	classy_counted_ptr < DCStringMsg >		1099201	0					
ANR	1099236	Identifier	msg		1099201	1					
ANR	1099237	AssignmentExpression	"msg = new DCStringMsg ( DC_INVALIDATE_KEY , sessid )"		1099201	2		=			
ANR	1099238	Identifier	msg		1099201	0					
ANR	1099239	Expression	"DC_INVALIDATE_KEY , sessid"		1099201	1					
ANR	1099240	Identifier	DC_INVALIDATE_KEY		1099201	0					
ANR	1099241	Identifier	sessid		1099201	1					
ANR	1099242	ExpressionStatement	msg -> setSuccessDebugLevel ( D_SECURITY )	11310:1:343798:343835	1099201	3	True				
ANR	1099243	CallExpression	msg -> setSuccessDebugLevel ( D_SECURITY )		1099201	0					
ANR	1099244	Callee	msg -> setSuccessDebugLevel		1099201	0					
ANR	1099245	PtrMemberAccess	msg -> setSuccessDebugLevel		1099201	0					
ANR	1099246	Identifier	msg		1099201	0					
ANR	1099247	Identifier	setSuccessDebugLevel		1099201	1					
ANR	1099248	ArgumentList	D_SECURITY		1099201	1					
ANR	1099249	Argument	D_SECURITY		1099201	0					
ANR	1099250	Identifier	D_SECURITY		1099201	0					
ANR	1099251	ExpressionStatement	msg -> setRawProtocol ( true )	11311:1:343838:343863	1099201	4	True				
ANR	1099252	CallExpression	msg -> setRawProtocol ( true )		1099201	0					
ANR	1099253	Callee	msg -> setRawProtocol		1099201	0					
ANR	1099254	PtrMemberAccess	msg -> setRawProtocol		1099201	0					
ANR	1099255	Identifier	msg		1099201	0					
ANR	1099256	Identifier	setRawProtocol		1099201	1					
ANR	1099257	ArgumentList	true		1099201	1					
ANR	1099258	Argument	true		1099201	0					
ANR	1099259	Identifier	true		1099201	0					
ANR	1099260	IfStatement	if ( m_invalidate_sessions_via_tcp )		1099201	5					
ANR	1099261	Condition	m_invalidate_sessions_via_tcp	11313:5:343871:343899	1099201	0	True				
ANR	1099262	Identifier	m_invalidate_sessions_via_tcp		1099201	0					
ANR	1099263	CompoundStatement		16:37:414:414	1099201	1					
ANR	1099264	ExpressionStatement	msg -> setStreamType ( Stream :: reli_sock )	11314:2:343907:343944	1099201	0	True				
ANR	1099265	CallExpression	msg -> setStreamType ( Stream :: reli_sock )		1099201	0					
ANR	1099266	Callee	msg -> setStreamType		1099201	0					
ANR	1099267	PtrMemberAccess	msg -> setStreamType		1099201	0					
ANR	1099268	Identifier	msg		1099201	0					
ANR	1099269	Identifier	setStreamType		1099201	1					
ANR	1099270	ArgumentList	Stream :: reli_sock		1099201	1					
ANR	1099271	Argument	Stream :: reli_sock		1099201	0					
ANR	1099272	Identifier	Stream :: reli_sock		1099201	0					
ANR	1099273	ElseStatement	else		1099201	0					
ANR	1099274	CompoundStatement		19:6:466:466	1099201	0					
ANR	1099275	ExpressionStatement	msg -> setStreamType ( Stream :: safe_sock )	11317:2:343959:343996	1099201	0	True				
ANR	1099276	CallExpression	msg -> setStreamType ( Stream :: safe_sock )		1099201	0					
ANR	1099277	Callee	msg -> setStreamType		1099201	0					
ANR	1099278	PtrMemberAccess	msg -> setStreamType		1099201	0					
ANR	1099279	Identifier	msg		1099201	0					
ANR	1099280	Identifier	setStreamType		1099201	1					
ANR	1099281	ArgumentList	Stream :: safe_sock		1099201	1					
ANR	1099282	Argument	Stream :: safe_sock		1099201	0					
ANR	1099283	Identifier	Stream :: safe_sock		1099201	0					
ANR	1099284	ExpressionStatement	daemon -> sendMsg ( msg . get ( ) )	11320:1:344003:344031	1099201	6	True				
ANR	1099285	CallExpression	daemon -> sendMsg ( msg . get ( ) )		1099201	0					
ANR	1099286	Callee	daemon -> sendMsg		1099201	0					
ANR	1099287	PtrMemberAccess	daemon -> sendMsg		1099201	0					
ANR	1099288	Identifier	daemon		1099201	0					
ANR	1099289	Identifier	sendMsg		1099201	1					
ANR	1099290	ArgumentList	msg . get ( )		1099201	1					
ANR	1099291	Argument	msg . get ( )		1099201	0					
ANR	1099292	CallExpression	msg . get ( )		1099201	0					
ANR	1099293	Callee	msg . get		1099201	0					
ANR	1099294	MemberAccess	msg . get		1099201	0					
ANR	1099295	Identifier	msg		1099201	0					
ANR	1099296	Identifier	get		1099201	1					
ANR	1099297	ArgumentList			1099201	1					
ANR	1099298	ReturnType	void		1099201	1					
ANR	1099299	Identifier	DaemonCore :: send_invalidate_session		1099201	2					
ANR	1099300	ParameterList	"const char * sinful , const char * sessid"		1099201	3					
ANR	1099301	Parameter	const char * sinful	11298:43:343447:343464	1099201	0	True				
ANR	1099302	ParameterType	const char *		1099201	0					
ANR	1099303	Identifier	sinful		1099201	1					
ANR	1099304	Parameter	const char * sessid	11298:63:343467:343484	1099201	1	True				
ANR	1099305	ParameterType	const char *		1099201	0					
ANR	1099306	Identifier	sessid		1099201	1					
ANR	1099307	CFGEntryNode	ENTRY		1099201		True				
ANR	1099308	CFGExitNode	EXIT		1099201		True				
ANR	1099309	Symbol	msg		1099201						
ANR	1099310	Symbol	NULL		1099201						
ANR	1099311	Symbol	D_SECURITY		1099201						
ANR	1099312	Symbol	Stream :: safe_sock		1099201						
ANR	1099313	Symbol	DT_ANY		1099201						
ANR	1099314	Symbol	sessid		1099201						
ANR	1099315	Symbol	daemon		1099201						
ANR	1099316	Symbol	true		1099201						
ANR	1099317	Symbol	Stream :: reli_sock		1099201						
ANR	1099318	Symbol	msg . get		1099201						
ANR	1099319	Symbol	DC_INVALIDATE_KEY		1099201						
ANR	1099320	Symbol	sinful		1099201						
ANR	1099321	Symbol	m_invalidate_sessions_via_tcp		1099201						
