command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3640252	File	data/converged/CVE-2011-4930_htcondor/src_condor_procd_procd_main.cpp								
ANR	3640253	DeclStmt									
ANR	3640254	Decl							extern int	extern int	log_size
ANR	3640255	DeclStmt									
ANR	3640256	Decl							char	char *	local_server_address
ANR	3640257	DeclStmt									
ANR	3640258	Decl							char	char *	local_client_principal
ANR	3640259	DeclStmt									
ANR	3640260	Decl							char	char *	log_file_name
ANR	3640261	DeclStmt									
ANR	3640262	Decl							int	int	max_snapshot_interval
ANR	3640263	DeclStmt									
ANR	3640264	Decl							gid_t	gid_t	min_tracking_gid
ANR	3640265	DeclStmt									
ANR	3640266	Decl							gid_t	gid_t	max_tracking_gid
ANR	3640267	DeclStmt									
ANR	3640268	Decl							char	char *	windows_softkill_binary
ANR	3640269	DeclStmt									
ANR	3640270	Decl							char	char *	glexec_kill_path
ANR	3640271	DeclStmt									
ANR	3640272	Decl							char	char *	glexec_path
ANR	3640273	DeclStmt									
ANR	3640274	Decl							bool	bool	use_external_gid_association
ANR	3640275	DeclStmt									
ANR	3640276	Decl							pid_t	pid_t	root_pid
ANR	3640277	DeclStmt									
ANR	3640278	Decl							bool	bool	root_pid_specified
ANR	3640279	Function	usage	97:0:3076:4771							
ANR	3640280	FunctionDef	usage ()		3640279	0					
ANR	3640281	CompoundStatement		99:0:3100:4771	3640279	0					
ANR	3640282	Statement	fprintf	100:1:3103:3109	3640279	0	True				
ANR	3640283	Statement	(	100:8:3110:3110	3640279	1	True				
ANR	3640284	Statement	stderr	100:9:3111:3116	3640279	2	True				
ANR	3640285	Statement	","	100:15:3117:3117	3640279	3	True				
ANR	3640286	Statement	"""Usage:\\n"""	100:17:3119:3128	3640279	4	True				
ANR	3640287	Statement	"""  -h                     This usage message.\\n"""	101:1:3131:3178	3640279	5	True				
ANR	3640288	Statement	"""  -D                     Wait for debugger.\\n"""	102:1:3181:3227	3640279	6	True				
ANR	3640289	Statement	"""  -A <address-file>      Path to address file for client communication.\\n"""	103:1:3230:3304	3640279	7	True				
ANR	3640290	Statement	"""  -C <principal>         The UID owner of the address file.\\n"""	104:1:3307:3369	3640279	8	True				
ANR	3640291	Statement	"""  -L <log-file>          Path to the output logfile.\\n"""	105:1:3372:3427	3640279	9	True				
ANR	3640292	Statement	"""  -E                     When specified with -G, the procd_ctl tool\\n"""	106:1:3430:3500	3640279	10	True				
ANR	3640293	Statement	"""                         can be used to associate a gid with the pid\\n"""	107:1:3503:3574	3640279	11	True				
ANR	3640294	Statement	"""                         family.\\n"""	108:1:3577:3612	3640279	12	True				
ANR	3640295	Statement	"""  -P <pid>               If specified, then the procd will manage the\\n"""	109:1:3615:3687	3640279	13	True				
ANR	3640296	Statement	"""                         process family rooted at this pid. If this pid\\n"""	110:1:3690:3764	3640279	14	True				
ANR	3640297	Statement	"""                         dies the procd will continue running.  If not\\n"""	111:1:3767:3840	3640279	15	True				
ANR	3640298	Statement	"""                         specified, then the procd's parent, which must\\n"""	112:1:3843:3917	3640279	16	True				
ANR	3640299	Statement	"""                         not be process 1 on unix, is monitored. If\\n"""	113:1:3920:3990	3640279	17	True				
ANR	3640300	Statement	"""                         the parent process dies, the condor_procd will\\n"""	114:1:3993:4067	3640279	18	True				
ANR	3640301	Statement	"""                         exit.\\n"""	115:1:4070:4103	3640279	19	True				
ANR	3640302	Statement	"""  -S <seconds>           Process snapshot interval.\\n"""	116:1:4106:4160	3640279	20	True				
ANR	3640303	Statement	"""  -G <min-gid> <max-gid> If -E is not specified, then self-allocate gids\\n"""	117:1:4163:4238	3640279	21	True				
ANR	3640304	Statement	"""                         out of this range for process family tracking.\\n"""	118:1:4241:4315	3640279	22	True				
ANR	3640305	Statement	"""                         If -E is specified then procd_ctl must be used\\n"""	119:1:4318:4392	3640279	23	True				
ANR	3640306	Statement	"""                         to allocate gids which must then be in this\\n"""	120:1:4395:4466	3640279	24	True				
ANR	3640307	Statement	"""                         range.\\n"""	121:1:4469:4503	3640279	25	True				
ANR	3640308	Statement	"""  -I <glexec-kill-path> <glexec-path>\\n"""	122:1:4506:4546	3640279	26	True				
ANR	3640309	Statement	"""                         Specify the binary which will send a signal\\n"""	123:1:4549:4620	3640279	27	True				
ANR	3640310	Statement	"""                         to a pid and the glexec binary which will run\\n"""	124:1:4623:4696	3640279	28	True				
ANR	3640311	Statement	"""                         the program under the right priviledges.\\n"""	125:1:4699:4767	3640279	29	True				
ANR	3640312	Statement	)	125:70:4768:4768	3640279	30	True				
ANR	3640313	ExpressionStatement		125:71:4769:4769	3640279	31	True				
ANR	3640314	ReturnType	static void		3640279	1					
ANR	3640315	Identifier	usage		3640279	2					
ANR	3640316	ParameterList			3640279	3					
ANR	3640317	CFGEntryNode	ENTRY		3640279		True				
ANR	3640318	CFGExitNode	EXIT		3640279		True				
ANR	3640319	Function	fail_illegal_option	128:0:4774:4924							
ANR	3640320	FunctionDef	fail_illegal_option (char * option)		3640319	0					
ANR	3640321	CompoundStatement		130:0:4827:4924	3640319	0					
ANR	3640322	ExpressionStatement	"fprintf ( stderr , ""error: illegal option: %s\\n"" , option )"	131:1:4830:4902	3640319	0	True				
ANR	3640323	CallExpression	"fprintf ( stderr , ""error: illegal option: %s\\n"" , option )"		3640319	0					
ANR	3640324	Callee	fprintf		3640319	0					
ANR	3640325	Identifier	fprintf		3640319	0					
ANR	3640326	ArgumentList	stderr		3640319	1					
ANR	3640327	Argument	stderr		3640319	0					
ANR	3640328	Identifier	stderr		3640319	0					
ANR	3640329	Argument	"""error: illegal option: %s\\n"""		3640319	1					
ANR	3640330	PrimaryExpression	"""error: illegal option: %s\\n"""		3640319	0					
ANR	3640331	Argument	option		3640319	2					
ANR	3640332	Identifier	option		3640319	0					
ANR	3640333	ExpressionStatement	usage ( )	134:1:4905:4912	3640319	1	True				
ANR	3640334	CallExpression	usage ( )		3640319	0					
ANR	3640335	Callee	usage		3640319	0					
ANR	3640336	Identifier	usage		3640319	0					
ANR	3640337	ArgumentList			3640319	1					
ANR	3640338	ExpressionStatement	exit ( 1 )	135:1:4915:4922	3640319	2	True				
ANR	3640339	CallExpression	exit ( 1 )		3640319	0					
ANR	3640340	Callee	exit		3640319	0					
ANR	3640341	Identifier	exit		3640319	0					
ANR	3640342	ArgumentList	1		3640319	1					
ANR	3640343	Argument	1		3640319	0					
ANR	3640344	PrimaryExpression	1		3640319	0					
ANR	3640345	ReturnType	static inline void		3640319	1					
ANR	3640346	Identifier	fail_illegal_option		3640319	2					
ANR	3640347	ParameterList	char * option		3640319	3					
ANR	3640348	Parameter	char * option	129:20:4813:4824	3640319	0	True				
ANR	3640349	ParameterType	char *		3640319	0					
ANR	3640350	Identifier	option		3640319	1					
ANR	3640351	CFGEntryNode	ENTRY		3640319		True				
ANR	3640352	CFGExitNode	EXIT		3640319		True				
ANR	3640353	Symbol	stderr		3640319						
ANR	3640354	Symbol	option		3640319						
ANR	3640355	Function	fail_option_args	138:0:4927:5177							
ANR	3640356	FunctionDef	"fail_option_args (const char * option , int args_required)"		3640355	0					
ANR	3640357	CompoundStatement		140:0:5002:5177	3640355	0					
ANR	3640358	ExpressionStatement	"fprintf ( stderr , ""error: option \\""%s\\"" requires %d %s\\n"" , option , args_required , args_required == 1 ? ""argument"" : ""arguments"" )"	141:1:5005:5155	3640355	0	True				
ANR	3640359	CallExpression	"fprintf ( stderr , ""error: option \\""%s\\"" requires %d %s\\n"" , option , args_required , args_required == 1 ? ""argument"" : ""arguments"" )"		3640355	0					
ANR	3640360	Callee	fprintf		3640355	0					
ANR	3640361	Identifier	fprintf		3640355	0					
ANR	3640362	ArgumentList	stderr		3640355	1					
ANR	3640363	Argument	stderr		3640355	0					
ANR	3640364	Identifier	stderr		3640355	0					
ANR	3640365	Argument	"""error: option \\""%s\\"" requires %d %s\\n"""		3640355	1					
ANR	3640366	PrimaryExpression	"""error: option \\""%s\\"" requires %d %s\\n"""		3640355	0					
ANR	3640367	Argument	option		3640355	2					
ANR	3640368	Identifier	option		3640355	0					
ANR	3640369	Argument	args_required		3640355	3					
ANR	3640370	Identifier	args_required		3640355	0					
ANR	3640371	Argument	"args_required == 1 ? ""argument"" : ""arguments"""		3640355	4					
ANR	3640372	ConditionalExpression	"args_required == 1 ? ""argument"" : ""arguments"""		3640355	0					
ANR	3640373	Condition	args_required == 1		3640355	0					
ANR	3640374	EqualityExpression	args_required == 1		3640355	0		==			
ANR	3640375	Identifier	args_required		3640355	0					
ANR	3640376	PrimaryExpression	1		3640355	1					
ANR	3640377	PrimaryExpression	"""argument"""		3640355	1					
ANR	3640378	PrimaryExpression	"""arguments"""		3640355	2					
ANR	3640379	ExpressionStatement	usage ( )	146:1:5158:5165	3640355	1	True				
ANR	3640380	CallExpression	usage ( )		3640355	0					
ANR	3640381	Callee	usage		3640355	0					
ANR	3640382	Identifier	usage		3640355	0					
ANR	3640383	ArgumentList			3640355	1					
ANR	3640384	ExpressionStatement	exit ( 1 )	147:1:5168:5175	3640355	2	True				
ANR	3640385	CallExpression	exit ( 1 )		3640355	0					
ANR	3640386	Callee	exit		3640355	0					
ANR	3640387	Identifier	exit		3640355	0					
ANR	3640388	ArgumentList	1		3640355	1					
ANR	3640389	Argument	1		3640355	0					
ANR	3640390	PrimaryExpression	1		3640355	0					
ANR	3640391	ReturnType	static inline void		3640355	1					
ANR	3640392	Identifier	fail_option_args		3640355	2					
ANR	3640393	ParameterList	"const char * option , int args_required"		3640355	3					
ANR	3640394	Parameter	const char * option	139:17:4963:4980	3640355	0	True				
ANR	3640395	ParameterType	const char *		3640355	0					
ANR	3640396	Identifier	option		3640355	1					
ANR	3640397	Parameter	int args_required	139:37:4983:4999	3640355	1	True				
ANR	3640398	ParameterType	int		3640355	0					
ANR	3640399	Identifier	args_required		3640355	1					
ANR	3640400	CFGEntryNode	ENTRY		3640355		True				
ANR	3640401	CFGExitNode	EXIT		3640355		True				
ANR	3640402	Symbol	args_required		3640355						
ANR	3640403	Symbol	stderr		3640355						
ANR	3640404	Symbol	option		3640355						
ANR	3640405	Function	parse_command_line	151:0:5181:8548							
ANR	3640406	FunctionDef	"parse_command_line (int argc , char * argv [ ])"		3640405	0					
ANR	3640407	CompoundStatement		153:0:5236:8548	3640405	0					
ANR	3640408	IdentifierDeclStatement	int index = 1 ;	154:1:5239:5252	3640405	0	True				
ANR	3640409	IdentifierDecl	index = 1		3640405	0					
ANR	3640410	IdentifierDeclType	int		3640405	0					
ANR	3640411	Identifier	index		3640405	1					
ANR	3640412	AssignmentExpression	index = 1		3640405	2		=			
ANR	3640413	Identifier	index		3640405	0					
ANR	3640414	PrimaryExpression	1		3640405	1					
ANR	3640415	WhileStatement	while ( index < argc )		3640405	1					
ANR	3640416	Condition	index < argc	155:8:5262:5273	3640405	0	True				
ANR	3640417	RelationalExpression	index < argc		3640405	0		<			
ANR	3640418	Identifier	index		3640405	0					
ANR	3640419	Identifier	argc		3640405	1					
ANR	3640420	CompoundStatement		3:22:39:39	3640405	1					
ANR	3640421	IfStatement	if ( argv [ index ] [ 0 ] != '-' || argv [ index ] [ 1 ] == '\\0' )		3640405	0					
ANR	3640422	Condition	argv [ index ] [ 0 ] != '-' || argv [ index ] [ 1 ] == '\\0'	160:6:5405:5451	3640405	0	True				
ANR	3640423	OrExpression	argv [ index ] [ 0 ] != '-' || argv [ index ] [ 1 ] == '\\0'		3640405	0		||			
ANR	3640424	EqualityExpression	argv [ index ] [ 0 ] != '-'		3640405	0		!=			
ANR	3640425	ArrayIndexing	argv [ index ] [ 0 ]		3640405	0					
ANR	3640426	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640427	Identifier	argv		3640405	0					
ANR	3640428	Identifier	index		3640405	1					
ANR	3640429	PrimaryExpression	0		3640405	1					
ANR	3640430	PrimaryExpression	'-'		3640405	1					
ANR	3640431	EqualityExpression	argv [ index ] [ 1 ] == '\\0'		3640405	1		==			
ANR	3640432	ArrayIndexing	argv [ index ] [ 1 ]		3640405	0					
ANR	3640433	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640434	Identifier	argv		3640405	0					
ANR	3640435	Identifier	index		3640405	1					
ANR	3640436	PrimaryExpression	1		3640405	1					
ANR	3640437	PrimaryExpression	'\\0'		3640405	1					
ANR	3640438	CompoundStatement		8:55:217:217	3640405	1					
ANR	3640439	ExpressionStatement	fail_illegal_option ( argv [ index ] )	161:3:5459:5491	3640405	0	True				
ANR	3640440	CallExpression	fail_illegal_option ( argv [ index ] )		3640405	0					
ANR	3640441	Callee	fail_illegal_option		3640405	0					
ANR	3640442	Identifier	fail_illegal_option		3640405	0					
ANR	3640443	ArgumentList	argv [ index ]		3640405	1					
ANR	3640444	Argument	argv [ index ]		3640405	0					
ANR	3640445	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640446	Identifier	argv		3640405	0					
ANR	3640447	Identifier	index		3640405	1					
ANR	3640448	SwitchStatement	switch ( argv [ index ] [ 1 ] )		3640405	1					
ANR	3640449	Condition	argv [ index ] [ 1 ]	166:9:5542:5555	3640405	0	True				
ANR	3640450	ArrayIndexing	argv [ index ] [ 1 ]		3640405	0					
ANR	3640451	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640452	Identifier	argv		3640405	0					
ANR	3640453	Identifier	index		3640405	1					
ANR	3640454	PrimaryExpression	1		3640405	1					
ANR	3640455	CompoundStatement		14:25:321:321	3640405	1					
ANR	3640456	Label	case 'D' :	171:3:5646:5654	3640405	0	True				
ANR	3640457	ExpressionStatement	sleep ( 30 )	172:4:5660:5669	3640405	1	True				
ANR	3640458	CallExpression	sleep ( 30 )		3640405	0					
ANR	3640459	Callee	sleep		3640405	0					
ANR	3640460	Identifier	sleep		3640405	0					
ANR	3640461	ArgumentList	30		3640405	1					
ANR	3640462	Argument	30		3640405	0					
ANR	3640463	PrimaryExpression	30		3640405	0					
ANR	3640464	BreakStatement	break ;	173:4:5675:5680	3640405	2	True				
ANR	3640465	Label	case 'A' :	177:3:5719:5727	3640405	3	True				
ANR	3640466	IfStatement	if ( index + 1 >= argc )		3640405	4					
ANR	3640467	Condition	index + 1 >= argc	178:8:5737:5753	3640405	0	True				
ANR	3640468	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640469	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640470	Identifier	index		3640405	0					
ANR	3640471	PrimaryExpression	1		3640405	1					
ANR	3640472	Identifier	argc		3640405	1					
ANR	3640473	CompoundStatement		26:27:519:519	3640405	1					
ANR	3640474	ExpressionStatement	"fail_option_args ( ""-A"" , 1 )"	179:5:5763:5788	3640405	0	True				
ANR	3640475	CallExpression	"fail_option_args ( ""-A"" , 1 )"		3640405	0					
ANR	3640476	Callee	fail_option_args		3640405	0					
ANR	3640477	Identifier	fail_option_args		3640405	0					
ANR	3640478	ArgumentList	"""-A"""		3640405	1					
ANR	3640479	Argument	"""-A"""		3640405	0					
ANR	3640480	PrimaryExpression	"""-A"""		3640405	0					
ANR	3640481	Argument	1		3640405	1					
ANR	3640482	PrimaryExpression	1		3640405	0					
ANR	3640483	ExpressionStatement	index ++	181:4:5800:5807	3640405	5	True				
ANR	3640484	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640485	Identifier	index		3640405	0					
ANR	3640486	IncDec	++		3640405	1					
ANR	3640487	ExpressionStatement	local_server_address = argv [ index ]	182:4:5813:5847	3640405	6	True				
ANR	3640488	AssignmentExpression	local_server_address = argv [ index ]		3640405	0		=			
ANR	3640489	Identifier	local_server_address		3640405	0					
ANR	3640490	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640491	Identifier	argv		3640405	0					
ANR	3640492	Identifier	index		3640405	1					
ANR	3640493	BreakStatement	break ;	183:4:5853:5858	3640405	7	True				
ANR	3640494	Label	case 'C' :	187:3:5899:5907	3640405	8	True				
ANR	3640495	IfStatement	if ( index + 1 >= argc )		3640405	9					
ANR	3640496	Condition	index + 1 >= argc	188:8:5917:5933	3640405	0	True				
ANR	3640497	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640498	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640499	Identifier	index		3640405	0					
ANR	3640500	PrimaryExpression	1		3640405	1					
ANR	3640501	Identifier	argc		3640405	1					
ANR	3640502	CompoundStatement		36:27:699:699	3640405	1					
ANR	3640503	ExpressionStatement	"fail_option_args ( ""-C"" , 1 )"	189:5:5943:5968	3640405	0	True				
ANR	3640504	CallExpression	"fail_option_args ( ""-C"" , 1 )"		3640405	0					
ANR	3640505	Callee	fail_option_args		3640405	0					
ANR	3640506	Identifier	fail_option_args		3640405	0					
ANR	3640507	ArgumentList	"""-C"""		3640405	1					
ANR	3640508	Argument	"""-C"""		3640405	0					
ANR	3640509	PrimaryExpression	"""-C"""		3640405	0					
ANR	3640510	Argument	1		3640405	1					
ANR	3640511	PrimaryExpression	1		3640405	0					
ANR	3640512	ExpressionStatement	index ++	191:4:5980:5987	3640405	10	True				
ANR	3640513	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640514	Identifier	index		3640405	0					
ANR	3640515	IncDec	++		3640405	1					
ANR	3640516	ExpressionStatement	local_client_principal = argv [ index ]	192:4:5993:6029	3640405	11	True				
ANR	3640517	AssignmentExpression	local_client_principal = argv [ index ]		3640405	0		=			
ANR	3640518	Identifier	local_client_principal		3640405	0					
ANR	3640519	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640520	Identifier	argv		3640405	0					
ANR	3640521	Identifier	index		3640405	1					
ANR	3640522	BreakStatement	break ;	193:4:6035:6040	3640405	12	True				
ANR	3640523	Label	case 'L' :	197:3:6072:6080	3640405	13	True				
ANR	3640524	IfStatement	if ( index + 1 >= argc )		3640405	14					
ANR	3640525	Condition	index + 1 >= argc	198:8:6090:6106	3640405	0	True				
ANR	3640526	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640527	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640528	Identifier	index		3640405	0					
ANR	3640529	PrimaryExpression	1		3640405	1					
ANR	3640530	Identifier	argc		3640405	1					
ANR	3640531	CompoundStatement		46:27:872:872	3640405	1					
ANR	3640532	ExpressionStatement	"fail_option_args ( ""-L"" , 1 )"	199:5:6116:6141	3640405	0	True				
ANR	3640533	CallExpression	"fail_option_args ( ""-L"" , 1 )"		3640405	0					
ANR	3640534	Callee	fail_option_args		3640405	0					
ANR	3640535	Identifier	fail_option_args		3640405	0					
ANR	3640536	ArgumentList	"""-L"""		3640405	1					
ANR	3640537	Argument	"""-L"""		3640405	0					
ANR	3640538	PrimaryExpression	"""-L"""		3640405	0					
ANR	3640539	Argument	1		3640405	1					
ANR	3640540	PrimaryExpression	1		3640405	0					
ANR	3640541	ExpressionStatement	index ++	201:4:6153:6160	3640405	15	True				
ANR	3640542	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640543	Identifier	index		3640405	0					
ANR	3640544	IncDec	++		3640405	1					
ANR	3640545	ExpressionStatement	log_file_name = argv [ index ]	202:4:6166:6193	3640405	16	True				
ANR	3640546	AssignmentExpression	log_file_name = argv [ index ]		3640405	0		=			
ANR	3640547	Identifier	log_file_name		3640405	0					
ANR	3640548	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640549	Identifier	argv		3640405	0					
ANR	3640550	Identifier	index		3640405	1					
ANR	3640551	BreakStatement	break ;	203:4:6199:6204	3640405	17	True				
ANR	3640552	Label	case 'R' :	207:3:6253:6261	3640405	18	True				
ANR	3640553	IfStatement	if ( index + 1 >= argc )		3640405	19					
ANR	3640554	Condition	index + 1 >= argc	208:8:6271:6287	3640405	0	True				
ANR	3640555	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640556	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640557	Identifier	index		3640405	0					
ANR	3640558	PrimaryExpression	1		3640405	1					
ANR	3640559	Identifier	argc		3640405	1					
ANR	3640560	CompoundStatement		56:27:1053:1053	3640405	1					
ANR	3640561	ExpressionStatement	"fail_option_args ( ""-R"" , 1 )"	209:5:6297:6322	3640405	0	True				
ANR	3640562	CallExpression	"fail_option_args ( ""-R"" , 1 )"		3640405	0					
ANR	3640563	Callee	fail_option_args		3640405	0					
ANR	3640564	Identifier	fail_option_args		3640405	0					
ANR	3640565	ArgumentList	"""-R"""		3640405	1					
ANR	3640566	Argument	"""-R"""		3640405	0					
ANR	3640567	PrimaryExpression	"""-R"""		3640405	0					
ANR	3640568	Argument	1		3640405	1					
ANR	3640569	PrimaryExpression	1		3640405	0					
ANR	3640570	ExpressionStatement	index ++	211:4:6334:6341	3640405	20	True				
ANR	3640571	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640572	Identifier	index		3640405	0					
ANR	3640573	IncDec	++		3640405	1					
ANR	3640574	ExpressionStatement	log_size = atoi ( argv [ index ] )	212:4:6347:6375	3640405	21	True				
ANR	3640575	AssignmentExpression	log_size = atoi ( argv [ index ] )		3640405	0		=			
ANR	3640576	Identifier	log_size		3640405	0					
ANR	3640577	CallExpression	atoi ( argv [ index ] )		3640405	1					
ANR	3640578	Callee	atoi		3640405	0					
ANR	3640579	Identifier	atoi		3640405	0					
ANR	3640580	ArgumentList	argv [ index ]		3640405	1					
ANR	3640581	Argument	argv [ index ]		3640405	0					
ANR	3640582	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640583	Identifier	argv		3640405	0					
ANR	3640584	Identifier	index		3640405	1					
ANR	3640585	BreakStatement	break ;	213:4:6381:6386	3640405	22	True				
ANR	3640586	Label	case 'S' :	217:3:6434:6442	3640405	23	True				
ANR	3640587	IfStatement	if ( index + 1 >= argc )		3640405	24					
ANR	3640588	Condition	index + 1 >= argc	218:8:6452:6468	3640405	0	True				
ANR	3640589	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640590	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640591	Identifier	index		3640405	0					
ANR	3640592	PrimaryExpression	1		3640405	1					
ANR	3640593	Identifier	argc		3640405	1					
ANR	3640594	CompoundStatement		66:27:1234:1234	3640405	1					
ANR	3640595	ExpressionStatement	"fail_option_args ( ""-S"" , 1 )"	219:5:6478:6503	3640405	0	True				
ANR	3640596	CallExpression	"fail_option_args ( ""-S"" , 1 )"		3640405	0					
ANR	3640597	Callee	fail_option_args		3640405	0					
ANR	3640598	Identifier	fail_option_args		3640405	0					
ANR	3640599	ArgumentList	"""-S"""		3640405	1					
ANR	3640600	Argument	"""-S"""		3640405	0					
ANR	3640601	PrimaryExpression	"""-S"""		3640405	0					
ANR	3640602	Argument	1		3640405	1					
ANR	3640603	PrimaryExpression	1		3640405	0					
ANR	3640604	ExpressionStatement	index ++	221:4:6515:6522	3640405	25	True				
ANR	3640605	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640606	Identifier	index		3640405	0					
ANR	3640607	IncDec	++		3640405	1					
ANR	3640608	ExpressionStatement	max_snapshot_interval = atoi ( argv [ index ] )	222:4:6528:6569	3640405	26	True				
ANR	3640609	AssignmentExpression	max_snapshot_interval = atoi ( argv [ index ] )		3640405	0		=			
ANR	3640610	Identifier	max_snapshot_interval		3640405	0					
ANR	3640611	CallExpression	atoi ( argv [ index ] )		3640405	1					
ANR	3640612	Callee	atoi		3640405	0					
ANR	3640613	Identifier	atoi		3640405	0					
ANR	3640614	ArgumentList	argv [ index ]		3640405	1					
ANR	3640615	Argument	argv [ index ]		3640405	0					
ANR	3640616	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640617	Identifier	argv		3640405	0					
ANR	3640618	Identifier	index		3640405	1					
ANR	3640619	BreakStatement	break ;	223:4:6575:6580	3640405	27	True				
ANR	3640620	Label	case 'E' :	228:3:6748:6756	3640405	28	True				
ANR	3640621	ExpressionStatement	use_external_gid_association = true	229:4:6762:6797	3640405	29	True				
ANR	3640622	AssignmentExpression	use_external_gid_association = true		3640405	0		=			
ANR	3640623	Identifier	use_external_gid_association		3640405	0					
ANR	3640624	Identifier	true		3640405	1					
ANR	3640625	BreakStatement	break ;	230:4:6803:6808	3640405	30	True				
ANR	3640626	Label	case 'P' :	235:3:6990:6998	3640405	31	True				
ANR	3640627	IfStatement	if ( index + 1 >= argc )		3640405	32					
ANR	3640628	Condition	index + 1 >= argc	236:8:7008:7024	3640405	0	True				
ANR	3640629	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640630	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640631	Identifier	index		3640405	0					
ANR	3640632	PrimaryExpression	1		3640405	1					
ANR	3640633	Identifier	argc		3640405	1					
ANR	3640634	CompoundStatement		84:27:1790:1790	3640405	1					
ANR	3640635	ExpressionStatement	"fail_option_args ( ""-P"" , 1 )"	237:5:7034:7059	3640405	0	True				
ANR	3640636	CallExpression	"fail_option_args ( ""-P"" , 1 )"		3640405	0					
ANR	3640637	Callee	fail_option_args		3640405	0					
ANR	3640638	Identifier	fail_option_args		3640405	0					
ANR	3640639	ArgumentList	"""-P"""		3640405	1					
ANR	3640640	Argument	"""-P"""		3640405	0					
ANR	3640641	PrimaryExpression	"""-P"""		3640405	0					
ANR	3640642	Argument	1		3640405	1					
ANR	3640643	PrimaryExpression	1		3640405	0					
ANR	3640644	ExpressionStatement	index ++	239:4:7071:7078	3640405	33	True				
ANR	3640645	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640646	Identifier	index		3640405	0					
ANR	3640647	IncDec	++		3640405	1					
ANR	3640648	ExpressionStatement	root_pid = atoi ( argv [ index ] )	240:4:7084:7112	3640405	34	True				
ANR	3640649	AssignmentExpression	root_pid = atoi ( argv [ index ] )		3640405	0		=			
ANR	3640650	Identifier	root_pid		3640405	0					
ANR	3640651	CallExpression	atoi ( argv [ index ] )		3640405	1					
ANR	3640652	Callee	atoi		3640405	0					
ANR	3640653	Identifier	atoi		3640405	0					
ANR	3640654	ArgumentList	argv [ index ]		3640405	1					
ANR	3640655	Argument	argv [ index ]		3640405	0					
ANR	3640656	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640657	Identifier	argv		3640405	0					
ANR	3640658	Identifier	index		3640405	1					
ANR	3640659	IfStatement	if ( root_pid == 0 )		3640405	35					
ANR	3640660	Condition	root_pid == 0	241:8:7122:7134	3640405	0	True				
ANR	3640661	EqualityExpression	root_pid == 0		3640405	0		==			
ANR	3640662	Identifier	root_pid		3640405	0					
ANR	3640663	PrimaryExpression	0		3640405	1					
ANR	3640664	CompoundStatement		89:23:1900:1900	3640405	1					
ANR	3640665	ExpressionStatement	"EXCEPT ( ""The procd can not track pid 0."" )"	242:5:7144:7184	3640405	0	True				
ANR	3640666	CallExpression	"EXCEPT ( ""The procd can not track pid 0."" )"		3640405	0					
ANR	3640667	Callee	EXCEPT		3640405	0					
ANR	3640668	Identifier	EXCEPT		3640405	0					
ANR	3640669	ArgumentList	"""The procd can not track pid 0."""		3640405	1					
ANR	3640670	Argument	"""The procd can not track pid 0."""		3640405	0					
ANR	3640671	PrimaryExpression	"""The procd can not track pid 0."""		3640405	0					
ANR	3640672	IfStatement	if ( root_pid == 1 )		3640405	36					
ANR	3640673	Condition	root_pid == 1	247:8:7317:7329	3640405	0	True				
ANR	3640674	EqualityExpression	root_pid == 1		3640405	0		==			
ANR	3640675	Identifier	root_pid		3640405	0					
ANR	3640676	PrimaryExpression	1		3640405	1					
ANR	3640677	CompoundStatement		95:23:2095:2095	3640405	1					
ANR	3640678	ExpressionStatement	"EXCEPT ( ""The procd will not track pid 1 as the family."" )"	248:5:7339:7394	3640405	0	True				
ANR	3640679	CallExpression	"EXCEPT ( ""The procd will not track pid 1 as the family."" )"		3640405	0					
ANR	3640680	Callee	EXCEPT		3640405	0					
ANR	3640681	Identifier	EXCEPT		3640405	0					
ANR	3640682	ArgumentList	"""The procd will not track pid 1 as the family."""		3640405	1					
ANR	3640683	Argument	"""The procd will not track pid 1 as the family."""		3640405	0					
ANR	3640684	PrimaryExpression	"""The procd will not track pid 1 as the family."""		3640405	0					
ANR	3640685	ExpressionStatement	root_pid_specified = true	251:4:7413:7438	3640405	37	True				
ANR	3640686	AssignmentExpression	root_pid_specified = true		3640405	0		=			
ANR	3640687	Identifier	root_pid_specified		3640405	0					
ANR	3640688	Identifier	true		3640405	1					
ANR	3640689	BreakStatement	break ;	252:4:7444:7449	3640405	38	True				
ANR	3640690	Label	case 'G' :	257:3:7510:7518	3640405	39	True				
ANR	3640691	IfStatement	if ( index + 2 >= argc )		3640405	40					
ANR	3640692	Condition	index + 2 >= argc	258:8:7528:7544	3640405	0	True				
ANR	3640693	RelationalExpression	index + 2 >= argc		3640405	0		>=			
ANR	3640694	AdditiveExpression	index + 2		3640405	0		+			
ANR	3640695	Identifier	index		3640405	0					
ANR	3640696	PrimaryExpression	2		3640405	1					
ANR	3640697	Identifier	argc		3640405	1					
ANR	3640698	CompoundStatement		106:27:2310:2310	3640405	1					
ANR	3640699	ExpressionStatement	"fail_option_args ( ""-G"" , 2 )"	259:5:7554:7579	3640405	0	True				
ANR	3640700	CallExpression	"fail_option_args ( ""-G"" , 2 )"		3640405	0					
ANR	3640701	Callee	fail_option_args		3640405	0					
ANR	3640702	Identifier	fail_option_args		3640405	0					
ANR	3640703	ArgumentList	"""-G"""		3640405	1					
ANR	3640704	Argument	"""-G"""		3640405	0					
ANR	3640705	PrimaryExpression	"""-G"""		3640405	0					
ANR	3640706	Argument	2		3640405	1					
ANR	3640707	PrimaryExpression	2		3640405	0					
ANR	3640708	ExpressionStatement	index ++	261:4:7591:7598	3640405	41	True				
ANR	3640709	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640710	Identifier	index		3640405	0					
ANR	3640711	IncDec	++		3640405	1					
ANR	3640712	ExpressionStatement	min_tracking_gid = ( gid_t ) atoi ( argv [ index ] )	262:4:7604:7647	3640405	42	True				
ANR	3640713	AssignmentExpression	min_tracking_gid = ( gid_t ) atoi ( argv [ index ] )		3640405	0		=			
ANR	3640714	Identifier	min_tracking_gid		3640405	0					
ANR	3640715	CastExpression	( gid_t ) atoi ( argv [ index ] )		3640405	1					
ANR	3640716	CastTarget	gid_t		3640405	0					
ANR	3640717	CallExpression	atoi ( argv [ index ] )		3640405	1					
ANR	3640718	Callee	atoi		3640405	0					
ANR	3640719	Identifier	atoi		3640405	0					
ANR	3640720	ArgumentList	argv [ index ]		3640405	1					
ANR	3640721	Argument	argv [ index ]		3640405	0					
ANR	3640722	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640723	Identifier	argv		3640405	0					
ANR	3640724	Identifier	index		3640405	1					
ANR	3640725	ExpressionStatement	index ++	263:4:7653:7660	3640405	43	True				
ANR	3640726	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640727	Identifier	index		3640405	0					
ANR	3640728	IncDec	++		3640405	1					
ANR	3640729	ExpressionStatement	max_tracking_gid = ( gid_t ) atoi ( argv [ index ] )	264:4:7666:7709	3640405	44	True				
ANR	3640730	AssignmentExpression	max_tracking_gid = ( gid_t ) atoi ( argv [ index ] )		3640405	0		=			
ANR	3640731	Identifier	max_tracking_gid		3640405	0					
ANR	3640732	CastExpression	( gid_t ) atoi ( argv [ index ] )		3640405	1					
ANR	3640733	CastTarget	gid_t		3640405	0					
ANR	3640734	CallExpression	atoi ( argv [ index ] )		3640405	1					
ANR	3640735	Callee	atoi		3640405	0					
ANR	3640736	Identifier	atoi		3640405	0					
ANR	3640737	ArgumentList	argv [ index ]		3640405	1					
ANR	3640738	Argument	argv [ index ]		3640405	0					
ANR	3640739	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640740	Identifier	argv		3640405	0					
ANR	3640741	Identifier	index		3640405	1					
ANR	3640742	BreakStatement	break ;	265:4:7715:7720	3640405	45	True				
ANR	3640743	Label	case 'K' :	271:3:7804:7812	3640405	46	True				
ANR	3640744	IfStatement	if ( index + 1 >= argc )		3640405	47					
ANR	3640745	Condition	index + 1 >= argc	272:8:7822:7838	3640405	0	True				
ANR	3640746	RelationalExpression	index + 1 >= argc		3640405	0		>=			
ANR	3640747	AdditiveExpression	index + 1		3640405	0		+			
ANR	3640748	Identifier	index		3640405	0					
ANR	3640749	PrimaryExpression	1		3640405	1					
ANR	3640750	Identifier	argc		3640405	1					
ANR	3640751	CompoundStatement		120:27:2604:2604	3640405	1					
ANR	3640752	ExpressionStatement	"fail_option_args ( ""-K"" , 1 )"	273:5:7848:7873	3640405	0	True				
ANR	3640753	CallExpression	"fail_option_args ( ""-K"" , 1 )"		3640405	0					
ANR	3640754	Callee	fail_option_args		3640405	0					
ANR	3640755	Identifier	fail_option_args		3640405	0					
ANR	3640756	ArgumentList	"""-K"""		3640405	1					
ANR	3640757	Argument	"""-K"""		3640405	0					
ANR	3640758	PrimaryExpression	"""-K"""		3640405	0					
ANR	3640759	Argument	1		3640405	1					
ANR	3640760	PrimaryExpression	1		3640405	0					
ANR	3640761	ExpressionStatement	index ++	275:4:7885:7892	3640405	48	True				
ANR	3640762	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640763	Identifier	index		3640405	0					
ANR	3640764	IncDec	++		3640405	1					
ANR	3640765	ExpressionStatement	windows_softkill_binary = argv [ index ]	276:4:7898:7935	3640405	49	True				
ANR	3640766	AssignmentExpression	windows_softkill_binary = argv [ index ]		3640405	0		=			
ANR	3640767	Identifier	windows_softkill_binary		3640405	0					
ANR	3640768	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640769	Identifier	argv		3640405	0					
ANR	3640770	Identifier	index		3640405	1					
ANR	3640771	BreakStatement	break ;	277:4:7941:7946	3640405	50	True				
ANR	3640772	Label	case 'I' :	283:3:8020:8028	3640405	51	True				
ANR	3640773	IfStatement	if ( index + 2 >= argc )		3640405	52					
ANR	3640774	Condition	index + 2 >= argc	284:8:8038:8054	3640405	0	True				
ANR	3640775	RelationalExpression	index + 2 >= argc		3640405	0		>=			
ANR	3640776	AdditiveExpression	index + 2		3640405	0		+			
ANR	3640777	Identifier	index		3640405	0					
ANR	3640778	PrimaryExpression	2		3640405	1					
ANR	3640779	Identifier	argc		3640405	1					
ANR	3640780	CompoundStatement		132:27:2820:2820	3640405	1					
ANR	3640781	ExpressionStatement	"fail_option_args ( ""-I"" , 2 )"	285:5:8064:8089	3640405	0	True				
ANR	3640782	CallExpression	"fail_option_args ( ""-I"" , 2 )"		3640405	0					
ANR	3640783	Callee	fail_option_args		3640405	0					
ANR	3640784	Identifier	fail_option_args		3640405	0					
ANR	3640785	ArgumentList	"""-I"""		3640405	1					
ANR	3640786	Argument	"""-I"""		3640405	0					
ANR	3640787	PrimaryExpression	"""-I"""		3640405	0					
ANR	3640788	Argument	2		3640405	1					
ANR	3640789	PrimaryExpression	2		3640405	0					
ANR	3640790	ExpressionStatement	index ++	287:4:8101:8108	3640405	53	True				
ANR	3640791	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640792	Identifier	index		3640405	0					
ANR	3640793	IncDec	++		3640405	1					
ANR	3640794	ExpressionStatement	glexec_kill_path = argv [ index ]	288:4:8114:8144	3640405	54	True				
ANR	3640795	AssignmentExpression	glexec_kill_path = argv [ index ]		3640405	0		=			
ANR	3640796	Identifier	glexec_kill_path		3640405	0					
ANR	3640797	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640798	Identifier	argv		3640405	0					
ANR	3640799	Identifier	index		3640405	1					
ANR	3640800	ExpressionStatement	index ++	289:4:8150:8157	3640405	55	True				
ANR	3640801	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640802	Identifier	index		3640405	0					
ANR	3640803	IncDec	++		3640405	1					
ANR	3640804	ExpressionStatement	glexec_path = argv [ index ]	290:4:8163:8188	3640405	56	True				
ANR	3640805	AssignmentExpression	glexec_path = argv [ index ]		3640405	0		=			
ANR	3640806	Identifier	glexec_path		3640405	0					
ANR	3640807	ArrayIndexing	argv [ index ]		3640405	1					
ANR	3640808	Identifier	argv		3640405	0					
ANR	3640809	Identifier	index		3640405	1					
ANR	3640810	BreakStatement	break ;	291:4:8194:8199	3640405	57	True				
ANR	3640811	Label	default :	296:3:8237:8244	3640405	58	True				
ANR	3640812	Identifier	default		3640405	0					
ANR	3640813	ExpressionStatement	fail_illegal_option ( argv [ index ] )	297:4:8250:8282	3640405	59	True				
ANR	3640814	CallExpression	fail_illegal_option ( argv [ index ] )		3640405	0					
ANR	3640815	Callee	fail_illegal_option		3640405	0					
ANR	3640816	Identifier	fail_illegal_option		3640405	0					
ANR	3640817	ArgumentList	argv [ index ]		3640405	1					
ANR	3640818	Argument	argv [ index ]		3640405	0					
ANR	3640819	ArrayIndexing	argv [ index ]		3640405	0					
ANR	3640820	Identifier	argv		3640405	0					
ANR	3640821	Identifier	index		3640405	1					
ANR	3640822	ExpressionStatement	usage ( )	298:4:8288:8295	3640405	60	True				
ANR	3640823	CallExpression	usage ( )		3640405	0					
ANR	3640824	Callee	usage		3640405	0					
ANR	3640825	Identifier	usage		3640405	0					
ANR	3640826	ArgumentList			3640405	1					
ANR	3640827	ExpressionStatement	exit ( EXIT_FAILURE )	299:4:8301:8319	3640405	61	True				
ANR	3640828	CallExpression	exit ( EXIT_FAILURE )		3640405	0					
ANR	3640829	Callee	exit		3640405	0					
ANR	3640830	Identifier	exit		3640405	0					
ANR	3640831	ArgumentList	EXIT_FAILURE		3640405	1					
ANR	3640832	Argument	EXIT_FAILURE		3640405	0					
ANR	3640833	Identifier	EXIT_FAILURE		3640405	0					
ANR	3640834	BreakStatement	break ;	300:4:8325:8330	3640405	62	True				
ANR	3640835	ExpressionStatement	index ++	303:2:8339:8346	3640405	2	True				
ANR	3640836	PostIncDecOperationExpression	index ++		3640405	0					
ANR	3640837	Identifier	index		3640405	0					
ANR	3640838	IncDec	++		3640405	1					
ANR	3640839	IfStatement	if ( local_server_address == NULL )		3640405	2					
ANR	3640840	Condition	local_server_address == NULL	308:5:8419:8446	3640405	0	True				
ANR	3640841	EqualityExpression	local_server_address == NULL		3640405	0		==			
ANR	3640842	Identifier	local_server_address		3640405	0					
ANR	3640843	Identifier	NULL		3640405	1					
ANR	3640844	CompoundStatement		156:35:3212:3212	3640405	1					
ANR	3640845	ExpressionStatement	"fprintf ( stderr , ""error: the \\""-A\\"" option is required\\n"" )"	309:2:8453:8510	3640405	0	True				
ANR	3640846	CallExpression	"fprintf ( stderr , ""error: the \\""-A\\"" option is required\\n"" )"		3640405	0					
ANR	3640847	Callee	fprintf		3640405	0					
ANR	3640848	Identifier	fprintf		3640405	0					
ANR	3640849	ArgumentList	stderr		3640405	1					
ANR	3640850	Argument	stderr		3640405	0					
ANR	3640851	Identifier	stderr		3640405	0					
ANR	3640852	Argument	"""error: the \\""-A\\"" option is required\\n"""		3640405	1					
ANR	3640853	PrimaryExpression	"""error: the \\""-A\\"" option is required\\n"""		3640405	0					
ANR	3640854	ExpressionStatement	usage ( )	310:2:8514:8521	3640405	1	True				
ANR	3640855	CallExpression	usage ( )		3640405	0					
ANR	3640856	Callee	usage		3640405	0					
ANR	3640857	Identifier	usage		3640405	0					
ANR	3640858	ArgumentList			3640405	1					
ANR	3640859	ExpressionStatement	exit ( EXIT_FAILURE )	311:2:8525:8543	3640405	2	True				
ANR	3640860	CallExpression	exit ( EXIT_FAILURE )		3640405	0					
ANR	3640861	Callee	exit		3640405	0					
ANR	3640862	Identifier	exit		3640405	0					
ANR	3640863	ArgumentList	EXIT_FAILURE		3640405	1					
ANR	3640864	Argument	EXIT_FAILURE		3640405	0					
ANR	3640865	Identifier	EXIT_FAILURE		3640405	0					
ANR	3640866	ReturnType	static void		3640405	1					
ANR	3640867	Identifier	parse_command_line		3640405	2					
ANR	3640868	ParameterList	"int argc , char * argv [ ]"		3640405	3					
ANR	3640869	Parameter	int argc	152:19:5212:5219	3640405	0	True				
ANR	3640870	ParameterType	int		3640405	0					
ANR	3640871	Identifier	argc		3640405	1					
ANR	3640872	Parameter	char * argv [ ]	152:29:5222:5233	3640405	1	True				
ANR	3640873	ParameterType	char * [ ]		3640405	0					
ANR	3640874	Identifier	argv		3640405	1					
ANR	3640875	CFGEntryNode	ENTRY		3640405		True				
ANR	3640876	CFGExitNode	EXIT		3640405		True				
ANR	3640877	Symbol	local_client_principal		3640405						
ANR	3640878	Symbol	root_pid_specified		3640405						
ANR	3640879	Symbol	* index		3640405						
ANR	3640880	Symbol	min_tracking_gid		3640405						
ANR	3640881	Symbol	* argv		3640405						
ANR	3640882	Symbol	argv		3640405						
ANR	3640883	Symbol	glexec_path		3640405						
ANR	3640884	Symbol	* * argv		3640405						
ANR	3640885	Symbol	log_size		3640405						
ANR	3640886	Symbol	local_server_address		3640405						
ANR	3640887	Symbol	glexec_kill_path		3640405						
ANR	3640888	Symbol	* * index		3640405						
ANR	3640889	Symbol	argc		3640405						
ANR	3640890	Symbol	atoi		3640405						
ANR	3640891	Symbol	use_external_gid_association		3640405						
ANR	3640892	Symbol	NULL		3640405						
ANR	3640893	Symbol	index		3640405						
ANR	3640894	Symbol	log_file_name		3640405						
ANR	3640895	Symbol	stderr		3640405						
ANR	3640896	Symbol	max_snapshot_interval		3640405						
ANR	3640897	Symbol	EXIT_FAILURE		3640405						
ANR	3640898	Symbol	true		3640405						
ANR	3640899	Symbol	max_tracking_gid		3640405						
ANR	3640900	Symbol	root_pid		3640405						
ANR	3640901	Symbol	windows_softkill_binary		3640405						
ANR	3640902	Function	get_parent_info	315:0:8551:10095							
ANR	3640903	FunctionDef	"get_parent_info (pid_t & parent_pid , birthday_t & parent_birthday)"		3640902	0					
ANR	3640904	CompoundStatement		317:0:8627:10095	3640902	0					
ANR	3640905	IdentifierDeclStatement	procInfo * own_pi = NULL ;	318:1:8630:8653	3640902	0	True				
ANR	3640906	IdentifierDecl	* own_pi = NULL		3640902	0					
ANR	3640907	IdentifierDeclType	procInfo *		3640902	0					
ANR	3640908	Identifier	own_pi		3640902	1					
ANR	3640909	AssignmentExpression	* own_pi = NULL		3640902	2		=			
ANR	3640910	Identifier	NULL		3640902	0					
ANR	3640911	Identifier	NULL		3640902	1					
ANR	3640912	IdentifierDeclStatement	procInfo * parent_pi = NULL ;	319:1:8656:8682	3640902	1	True				
ANR	3640913	IdentifierDecl	* parent_pi = NULL		3640902	0					
ANR	3640914	IdentifierDeclType	procInfo *		3640902	0					
ANR	3640915	Identifier	parent_pi		3640902	1					
ANR	3640916	AssignmentExpression	* parent_pi = NULL		3640902	2		=			
ANR	3640917	Identifier	NULL		3640902	0					
ANR	3640918	Identifier	NULL		3640902	1					
ANR	3640919	IdentifierDeclStatement	int ignored ;	321:1:8686:8697	3640902	2	True				
ANR	3640920	IdentifierDecl	ignored		3640902	0					
ANR	3640921	IdentifierDeclType	int		3640902	0					
ANR	3640922	Identifier	ignored		3640902	1					
ANR	3640923	IfStatement	"if ( ProcAPI :: getProcInfo ( getpid ( ) , own_pi , ignored ) != PROCAPI_SUCCESS )"		3640902	3					
ANR	3640924	Condition	"ProcAPI :: getProcInfo ( getpid ( ) , own_pi , ignored ) != PROCAPI_SUCCESS"	322:5:8704:8769	3640902	0	True				
ANR	3640925	EqualityExpression	"ProcAPI :: getProcInfo ( getpid ( ) , own_pi , ignored ) != PROCAPI_SUCCESS"		3640902	0		!=			
ANR	3640926	CallExpression	"ProcAPI :: getProcInfo ( getpid ( ) , own_pi , ignored )"		3640902	0					
ANR	3640927	Callee	ProcAPI :: getProcInfo		3640902	0					
ANR	3640928	Identifier	ProcAPI :: getProcInfo		3640902	0					
ANR	3640929	ArgumentList	getpid ( )		3640902	1					
ANR	3640930	Argument	getpid ( )		3640902	0					
ANR	3640931	CallExpression	getpid ( )		3640902	0					
ANR	3640932	Callee	getpid		3640902	0					
ANR	3640933	Identifier	getpid		3640902	0					
ANR	3640934	ArgumentList			3640902	1					
ANR	3640935	Argument	own_pi		3640902	1					
ANR	3640936	Identifier	own_pi		3640902	0					
ANR	3640937	Argument	ignored		3640902	2					
ANR	3640938	Identifier	ignored		3640902	0					
ANR	3640939	Identifier	PROCAPI_SUCCESS		3640902	1					
ANR	3640940	CompoundStatement		6:73:144:144	3640902	1					
ANR	3640941	ExpressionStatement	"fprintf ( stderr , ""error: getProcInfo failed on own PID\\n"" )"	323:2:8776:8833	3640902	0	True				
ANR	3640942	CallExpression	"fprintf ( stderr , ""error: getProcInfo failed on own PID\\n"" )"		3640902	0					
ANR	3640943	Callee	fprintf		3640902	0					
ANR	3640944	Identifier	fprintf		3640902	0					
ANR	3640945	ArgumentList	stderr		3640902	1					
ANR	3640946	Argument	stderr		3640902	0					
ANR	3640947	Identifier	stderr		3640902	0					
ANR	3640948	Argument	"""error: getProcInfo failed on own PID\\n"""		3640902	1					
ANR	3640949	PrimaryExpression	"""error: getProcInfo failed on own PID\\n"""		3640902	0					
ANR	3640950	ExpressionStatement	exit ( 1 )	324:2:8837:8844	3640902	1	True				
ANR	3640951	CallExpression	exit ( 1 )		3640902	0					
ANR	3640952	Callee	exit		3640902	0					
ANR	3640953	Identifier	exit		3640902	0					
ANR	3640954	ArgumentList	1		3640902	1					
ANR	3640955	Argument	1		3640902	0					
ANR	3640956	PrimaryExpression	1		3640902	0					
ANR	3640957	IfStatement	"if ( ProcAPI :: getProcInfo ( own_pi -> ppid , parent_pi , ignored ) != PROCAPI_SUCCESS )"		3640902	4					
ANR	3640958	Condition	"ProcAPI :: getProcInfo ( own_pi -> ppid , parent_pi , ignored ) != PROCAPI_SUCCESS"	326:5:8854:8926	3640902	0	True				
ANR	3640959	EqualityExpression	"ProcAPI :: getProcInfo ( own_pi -> ppid , parent_pi , ignored ) != PROCAPI_SUCCESS"		3640902	0		!=			
ANR	3640960	CallExpression	"ProcAPI :: getProcInfo ( own_pi -> ppid , parent_pi , ignored )"		3640902	0					
ANR	3640961	Callee	ProcAPI :: getProcInfo		3640902	0					
ANR	3640962	Identifier	ProcAPI :: getProcInfo		3640902	0					
ANR	3640963	ArgumentList	own_pi -> ppid		3640902	1					
ANR	3640964	Argument	own_pi -> ppid		3640902	0					
ANR	3640965	PtrMemberAccess	own_pi -> ppid		3640902	0					
ANR	3640966	Identifier	own_pi		3640902	0					
ANR	3640967	Identifier	ppid		3640902	1					
ANR	3640968	Argument	parent_pi		3640902	1					
ANR	3640969	Identifier	parent_pi		3640902	0					
ANR	3640970	Argument	ignored		3640902	2					
ANR	3640971	Identifier	ignored		3640902	0					
ANR	3640972	Identifier	PROCAPI_SUCCESS		3640902	1					
ANR	3640973	CompoundStatement		10:80:301:301	3640902	1					
ANR	3640974	ExpressionStatement	"fprintf ( stderr , ""error: getProcInfo failed on parent PID\\n"" )"	327:2:8933:8993	3640902	0	True				
ANR	3640975	CallExpression	"fprintf ( stderr , ""error: getProcInfo failed on parent PID\\n"" )"		3640902	0					
ANR	3640976	Callee	fprintf		3640902	0					
ANR	3640977	Identifier	fprintf		3640902	0					
ANR	3640978	ArgumentList	stderr		3640902	1					
ANR	3640979	Argument	stderr		3640902	0					
ANR	3640980	Identifier	stderr		3640902	0					
ANR	3640981	Argument	"""error: getProcInfo failed on parent PID\\n"""		3640902	1					
ANR	3640982	PrimaryExpression	"""error: getProcInfo failed on parent PID\\n"""		3640902	0					
ANR	3640983	ExpressionStatement	exit ( 1 )	328:2:8997:9004	3640902	1	True				
ANR	3640984	CallExpression	exit ( 1 )		3640902	0					
ANR	3640985	Callee	exit		3640902	0					
ANR	3640986	Identifier	exit		3640902	0					
ANR	3640987	ArgumentList	1		3640902	1					
ANR	3640988	Argument	1		3640902	0					
ANR	3640989	PrimaryExpression	1		3640902	0					
ANR	3640990	IfStatement	if ( own_pi -> ppid == 1 )		3640902	5					
ANR	3640991	Condition	own_pi -> ppid == 1	340:5:9566:9582	3640902	0	True				
ANR	3640992	EqualityExpression	own_pi -> ppid == 1		3640902	0		==			
ANR	3640993	PtrMemberAccess	own_pi -> ppid		3640902	0					
ANR	3640994	Identifier	own_pi		3640902	0					
ANR	3640995	Identifier	ppid		3640902	1					
ANR	3640996	PrimaryExpression	1		3640902	1					
ANR	3640997	CompoundStatement		24:24:957:957	3640902	1					
ANR	3640998	ExpressionStatement	"fprintf ( stderr , ""error: Procd's ppid can't be 1!\\n"" )"	341:2:9589:9641	3640902	0	True				
ANR	3640999	CallExpression	"fprintf ( stderr , ""error: Procd's ppid can't be 1!\\n"" )"		3640902	0					
ANR	3641000	Callee	fprintf		3640902	0					
ANR	3641001	Identifier	fprintf		3640902	0					
ANR	3641002	ArgumentList	stderr		3640902	1					
ANR	3641003	Argument	stderr		3640902	0					
ANR	3641004	Identifier	stderr		3640902	0					
ANR	3641005	Argument	"""error: Procd's ppid can't be 1!\\n"""		3640902	1					
ANR	3641006	PrimaryExpression	"""error: Procd's ppid can't be 1!\\n"""		3640902	0					
ANR	3641007	ExpressionStatement	exit ( 1 )	342:2:9645:9652	3640902	1	True				
ANR	3641008	CallExpression	exit ( 1 )		3640902	0					
ANR	3641009	Callee	exit		3640902	0					
ANR	3641010	Identifier	exit		3640902	0					
ANR	3641011	ArgumentList	1		3640902	1					
ANR	3641012	Argument	1		3640902	0					
ANR	3641013	PrimaryExpression	1		3640902	0					
ANR	3641014	IfStatement	if ( parent_pi -> birthday > own_pi -> birthday )		3640902	6					
ANR	3641015	Condition	parent_pi -> birthday > own_pi -> birthday	346:5:9670:9707	3640902	0	True				
ANR	3641016	RelationalExpression	parent_pi -> birthday > own_pi -> birthday		3640902	0		>			
ANR	3641017	PtrMemberAccess	parent_pi -> birthday		3640902	0					
ANR	3641018	Identifier	parent_pi		3640902	0					
ANR	3641019	Identifier	birthday		3640902	1					
ANR	3641020	PtrMemberAccess	own_pi -> birthday		3640902	1					
ANR	3641021	Identifier	own_pi		3640902	0					
ANR	3641022	Identifier	birthday		3640902	1					
ANR	3641023	CompoundStatement		30:45:1082:1082	3640902	1					
ANR	3641024	Statement	fprintf	347:2:9714:9720	3640902	0	True				
ANR	3641025	Statement	(	347:9:9721:9721	3640902	1	True				
ANR	3641026	Statement	stderr	347:10:9722:9727	3640902	2	True				
ANR	3641027	Statement	","	347:16:9728:9728	3640902	3	True				
ANR	3641028	Statement	"""error: parent process's birthday ("""	348:10:9740:9775	3640902	4	True				
ANR	3641029	Statement	PROCAPI_BIRTHDAY_FORMAT	349:14:9791:9813	3640902	5	True				
ANR	3641030	Statement	""") is later than our own ("""	350:14:9829:9855	3640902	6	True				
ANR	3641031	Statement	PROCAPI_BIRTHDAY_FORMAT	351:14:9871:9893	3640902	7	True				
ANR	3641032	Statement	""")\\n"""	352:14:9909:9913	3640902	8	True				
ANR	3641033	Statement	","	352:19:9914:9914	3640902	9	True				
ANR	3641034	Statement	parent_pi	353:9:9925:9933	3640902	10	True				
ANR	3641035	Statement	->	353:18:9934:9935	3640902	11	True				
ANR	3641036	Statement	birthday	353:20:9936:9943	3640902	12	True				
ANR	3641037	Statement	","	353:28:9944:9944	3640902	13	True				
ANR	3641038	Statement	own_pi	354:9:9955:9960	3640902	14	True				
ANR	3641039	Statement	->	354:15:9961:9962	3640902	15	True				
ANR	3641040	Statement	birthday	354:17:9963:9970	3640902	16	True				
ANR	3641041	Statement	)	354:25:9971:9971	3640902	17	True				
ANR	3641042	ExpressionStatement		354:26:9972:9972	3640902	18	True				
ANR	3641043	ExpressionStatement	exit ( 1 )	355:2:9976:9983	3640902	19	True				
ANR	3641044	CallExpression	exit ( 1 )		3640902	0					
ANR	3641045	Callee	exit		3640902	0					
ANR	3641046	Identifier	exit		3640902	0					
ANR	3641047	ArgumentList	1		3640902	1					
ANR	3641048	Argument	1		3640902	0					
ANR	3641049	PrimaryExpression	1		3640902	0					
ANR	3641050	ExpressionStatement	parent_pid = parent_pi -> pid	358:1:9990:10017	3640902	7	True				
ANR	3641051	AssignmentExpression	parent_pid = parent_pi -> pid		3640902	0		=			
ANR	3641052	Identifier	parent_pid		3640902	0					
ANR	3641053	PtrMemberAccess	parent_pi -> pid		3640902	1					
ANR	3641054	Identifier	parent_pi		3640902	0					
ANR	3641055	Identifier	pid		3640902	1					
ANR	3641056	ExpressionStatement	parent_birthday = parent_pi -> birthday	359:1:10020:10057	3640902	8	True				
ANR	3641057	AssignmentExpression	parent_birthday = parent_pi -> birthday		3640902	0		=			
ANR	3641058	Identifier	parent_birthday		3640902	0					
ANR	3641059	PtrMemberAccess	parent_pi -> birthday		3640902	1					
ANR	3641060	Identifier	parent_pi		3640902	0					
ANR	3641061	Identifier	birthday		3640902	1					
ANR	3641062	Statement	delete	361:1:10061:10066	3640902	9	True				
ANR	3641063	ExpressionStatement	own_pi	361:8:10068:10074	3640902	10	True				
ANR	3641064	Identifier	own_pi		3640902	0					
ANR	3641065	Statement	delete	362:1:10077:10082	3640902	11	True				
ANR	3641066	ExpressionStatement	parent_pi	362:8:10084:10093	3640902	12	True				
ANR	3641067	Identifier	parent_pi		3640902	0					
ANR	3641068	ReturnType	static void		3640902	1					
ANR	3641069	Identifier	get_parent_info		3640902	2					
ANR	3641070	ParameterList	"pid_t & parent_pid , birthday_t & parent_birthday"		3640902	3					
ANR	3641071	Parameter	pid_t & parent_pid	316:16:8579:8595	3640902	0	True				
ANR	3641072	ParameterType	pid_t &		3640902	0					
ANR	3641073	Identifier	parent_pid		3640902	1					
ANR	3641074	Parameter	birthday_t & parent_birthday	316:35:8598:8624	3640902	1	True				
ANR	3641075	ParameterType	birthday_t &		3640902	0					
ANR	3641076	Identifier	parent_birthday		3640902	1					
ANR	3641077	CFGEntryNode	ENTRY		3640902		True				
ANR	3641078	CFGExitNode	EXIT		3640902		True				
ANR	3641079	Symbol	ignored		3640902						
ANR	3641080	Symbol	* parent_pi		3640902						
ANR	3641081	Symbol	NULL		3640902						
ANR	3641082	Symbol	own_pi -> ppid		3640902						
ANR	3641083	Symbol	parent_pi		3640902						
ANR	3641084	Symbol	PROCAPI_SUCCESS		3640902						
ANR	3641085	Symbol	parent_pi -> birthday		3640902						
ANR	3641086	Symbol	* own_pi		3640902						
ANR	3641087	Symbol	stderr		3640902						
ANR	3641088	Symbol	own_pi -> birthday		3640902						
ANR	3641089	Symbol	ProcAPI :: getProcInfo		3640902						
ANR	3641090	Symbol	parent_pi -> pid		3640902						
ANR	3641091	Symbol	parent_birthday		3640902						
ANR	3641092	Symbol	own_pi		3640902						
ANR	3641093	Symbol	parent_pid		3640902						
ANR	3641094	Symbol	getpid		3640902						
ANR	3641095	Function	main	365:0:10098:14947							
ANR	3641096	FunctionDef	"main (int argc , char * argv [ ])"		3641095	0					
ANR	3641097	CompoundStatement		367:0:10131:14947	3641095	0					
ANR	3641098	ExpressionStatement	fclose ( stdin )	370:1:10201:10214	3641095	0	True				
ANR	3641099	CallExpression	fclose ( stdin )		3641095	0					
ANR	3641100	Callee	fclose		3641095	0					
ANR	3641101	Identifier	fclose		3641095	0					
ANR	3641102	ArgumentList	stdin		3641095	1					
ANR	3641103	Argument	stdin		3641095	0					
ANR	3641104	Identifier	stdin		3641095	0					
ANR	3641105	ExpressionStatement	fclose ( stdout )	371:1:10217:10231	3641095	1	True				
ANR	3641106	CallExpression	fclose ( stdout )		3641095	0					
ANR	3641107	Callee	fclose		3641095	0					
ANR	3641108	Identifier	fclose		3641095	0					
ANR	3641109	ArgumentList	stdout		3641095	1					
ANR	3641110	Argument	stdout		3641095	0					
ANR	3641111	Identifier	stdout		3641095	0					
ANR	3641112	ExpressionStatement	"parse_command_line ( argc , argv )"	376:1:10333:10363	3641095	2	True				
ANR	3641113	CallExpression	"parse_command_line ( argc , argv )"		3641095	0					
ANR	3641114	Callee	parse_command_line		3641095	0					
ANR	3641115	Identifier	parse_command_line		3641095	0					
ANR	3641116	ArgumentList	argc		3641095	1					
ANR	3641117	Argument	argc		3641095	0					
ANR	3641118	Identifier	argc		3641095	0					
ANR	3641119	Argument	argv		3641095	1					
ANR	3641120	Identifier	argv		3641095	0					
ANR	3641121	IdentifierDeclStatement	birthday_t root_birthday ;	381:1:10543:10567	3641095	3	True				
ANR	3641122	IdentifierDecl	root_birthday		3641095	0					
ANR	3641123	IdentifierDeclType	birthday_t		3641095	0					
ANR	3641124	Identifier	root_birthday		3641095	1					
ANR	3641125	IfStatement	if ( root_pid_specified == false )		3641095	4					
ANR	3641126	Condition	root_pid_specified == false	382:5:10574:10600	3641095	0	True				
ANR	3641127	EqualityExpression	root_pid_specified == false		3641095	0		==			
ANR	3641128	Identifier	root_pid_specified		3641095	0					
ANR	3641129	Identifier	false		3641095	1					
ANR	3641130	CompoundStatement		16:34:471:471	3641095	1					
ANR	3641131	ExpressionStatement	"get_parent_info ( root_pid , root_birthday )"	383:2:10608:10648	3641095	0	True				
ANR	3641132	CallExpression	"get_parent_info ( root_pid , root_birthday )"		3641095	0					
ANR	3641133	Callee	get_parent_info		3641095	0					
ANR	3641134	Identifier	get_parent_info		3641095	0					
ANR	3641135	ArgumentList	root_pid		3641095	1					
ANR	3641136	Argument	root_pid		3641095	0					
ANR	3641137	Identifier	root_pid		3641095	0					
ANR	3641138	Argument	root_birthday		3641095	1					
ANR	3641139	Identifier	root_birthday		3641095	0					
ANR	3641140	ElseStatement	else		3641095	0					
ANR	3641141	CompoundStatement		21:2:568:624	3641095	0					
ANR	3641142	IdentifierDeclStatement	procInfo * pi = NULL ;	385:2:10662:10681	3641095	0	True				
ANR	3641143	IdentifierDecl	* pi = NULL		3641095	0					
ANR	3641144	IdentifierDeclType	procInfo *		3641095	0					
ANR	3641145	Identifier	pi		3641095	1					
ANR	3641146	AssignmentExpression	* pi = NULL		3641095	2		=			
ANR	3641147	Identifier	NULL		3641095	0					
ANR	3641148	Identifier	NULL		3641095	1					
ANR	3641149	IdentifierDeclStatement	int ignored ;	386:2:10685:10696	3641095	1	True				
ANR	3641150	IdentifierDecl	ignored		3641095	0					
ANR	3641151	IdentifierDeclType	int		3641095	0					
ANR	3641152	Identifier	ignored		3641095	1					
ANR	3641153	IdentifierDeclStatement	"int status = ProcAPI :: getProcInfo ( root_pid , pi , ignored ) ;"	387:2:10700:10756	3641095	2	True				
ANR	3641154	IdentifierDecl	"status = ProcAPI :: getProcInfo ( root_pid , pi , ignored )"		3641095	0					
ANR	3641155	IdentifierDeclType	int		3641095	0					
ANR	3641156	Identifier	status		3641095	1					
ANR	3641157	AssignmentExpression	"status = ProcAPI :: getProcInfo ( root_pid , pi , ignored )"		3641095	2		=			
ANR	3641158	Identifier	status		3641095	0					
ANR	3641159	CallExpression	"ProcAPI :: getProcInfo ( root_pid , pi , ignored )"		3641095	1					
ANR	3641160	Callee	ProcAPI :: getProcInfo		3641095	0					
ANR	3641161	Identifier	ProcAPI :: getProcInfo		3641095	0					
ANR	3641162	ArgumentList	root_pid		3641095	1					
ANR	3641163	Argument	root_pid		3641095	0					
ANR	3641164	Identifier	root_pid		3641095	0					
ANR	3641165	Argument	pi		3641095	1					
ANR	3641166	Identifier	pi		3641095	0					
ANR	3641167	Argument	ignored		3641095	2					
ANR	3641168	Identifier	ignored		3641095	0					
ANR	3641169	IfStatement	if ( status != PROCAPI_SUCCESS )		3641095	3					
ANR	3641170	Condition	status != PROCAPI_SUCCESS	388:6:10764:10788	3641095	0	True				
ANR	3641171	EqualityExpression	status != PROCAPI_SUCCESS		3641095	0		!=			
ANR	3641172	Identifier	status		3641095	0					
ANR	3641173	Identifier	PROCAPI_SUCCESS		3641095	1					
ANR	3641174	CompoundStatement		22:33:659:659	3641095	1					
ANR	3641175	IfStatement	if ( pi != NULL )		3641095	0					
ANR	3641176	Condition	pi != NULL	389:8:10801:10810	3641095	0	True				
ANR	3641177	EqualityExpression	pi != NULL		3641095	0		!=			
ANR	3641178	Identifier	pi		3641095	0					
ANR	3641179	Identifier	NULL		3641095	1					
ANR	3641180	CompoundStatement		23:20:681:681	3641095	1					
ANR	3641181	Statement	delete	390:5:10820:10825	3641095	0	True				
ANR	3641182	ExpressionStatement	pi	390:12:10827:10829	3641095	1	True				
ANR	3641183	Identifier	pi		3641095	0					
ANR	3641184	ExpressionStatement	"fprintf ( stderr , ""getProcInfo failed on root PID %u\\n"" , ( unsigned ) root_pid )"	392:4:10841:10926	3641095	1	True				
ANR	3641185	CallExpression	"fprintf ( stderr , ""getProcInfo failed on root PID %u\\n"" , ( unsigned ) root_pid )"		3641095	0					
ANR	3641186	Callee	fprintf		3641095	0					
ANR	3641187	Identifier	fprintf		3641095	0					
ANR	3641188	ArgumentList	stderr		3641095	1					
ANR	3641189	Argument	stderr		3641095	0					
ANR	3641190	Identifier	stderr		3641095	0					
ANR	3641191	Argument	"""getProcInfo failed on root PID %u\\n"""		3641095	1					
ANR	3641192	PrimaryExpression	"""getProcInfo failed on root PID %u\\n"""		3641095	0					
ANR	3641193	Argument	( unsigned ) root_pid		3641095	2					
ANR	3641194	CastExpression	( unsigned ) root_pid		3641095	0					
ANR	3641195	CastTarget	unsigned		3641095	0					
ANR	3641196	Identifier	root_pid		3641095	1					
ANR	3641197	ExpressionStatement	"EXCEPT ( ""getProcInfo failed on root PID %u"" , ( unsigned ) root_pid )"	395:4:10932:10999	3641095	2	True				
ANR	3641198	CallExpression	"EXCEPT ( ""getProcInfo failed on root PID %u"" , ( unsigned ) root_pid )"		3641095	0					
ANR	3641199	Callee	EXCEPT		3641095	0					
ANR	3641200	Identifier	EXCEPT		3641095	0					
ANR	3641201	ArgumentList	"""getProcInfo failed on root PID %u"""		3641095	1					
ANR	3641202	Argument	"""getProcInfo failed on root PID %u"""		3641095	0					
ANR	3641203	PrimaryExpression	"""getProcInfo failed on root PID %u"""		3641095	0					
ANR	3641204	Argument	( unsigned ) root_pid		3641095	1					
ANR	3641205	CastExpression	( unsigned ) root_pid		3641095	0					
ANR	3641206	CastTarget	unsigned		3641095	0					
ANR	3641207	Identifier	root_pid		3641095	1					
ANR	3641208	ExpressionStatement	root_birthday = pi -> birthday	398:2:11007:11035	3641095	4	True				
ANR	3641209	AssignmentExpression	root_birthday = pi -> birthday		3641095	0		=			
ANR	3641210	Identifier	root_birthday		3641095	0					
ANR	3641211	PtrMemberAccess	pi -> birthday		3641095	1					
ANR	3641212	Identifier	pi		3641095	0					
ANR	3641213	Identifier	birthday		3641095	1					
ANR	3641214	Statement	delete	399:2:11039:11044	3641095	5	True				
ANR	3641215	ExpressionStatement	pi	399:9:11046:11048	3641095	6	True				
ANR	3641216	Identifier	pi		3641095	0					
ANR	3641217	IdentifierDeclStatement	extern FILE * debug_fp ;	404:1:11097:11118	3641095	5	True				
ANR	3641218	IdentifierDecl	* debug_fp		3641095	0					
ANR	3641219	IdentifierDeclType	extern FILE *		3641095	0					
ANR	3641220	Identifier	debug_fp		3641095	1					
ANR	3641221	IdentifierDeclStatement	extern char * debug_fn ;	405:1:11121:11142	3641095	6	True				
ANR	3641222	IdentifierDecl	* debug_fn		3641095	0					
ANR	3641223	IdentifierDeclType	extern char *		3641095	0					
ANR	3641224	Identifier	debug_fn		3641095	1					
ANR	3641225	IfStatement	if ( log_file_name != NULL )		3641095	7					
ANR	3641226	Condition	log_file_name != NULL	407:5:11151:11171	3641095	0	True				
ANR	3641227	EqualityExpression	log_file_name != NULL		3641095	0		!=			
ANR	3641228	Identifier	log_file_name		3641095	0					
ANR	3641229	Identifier	NULL		3641095	1					
ANR	3641230	CompoundStatement		41:28:1042:1042	3641095	1					
ANR	3641231	ExpressionStatement	debug_fn = log_file_name	408:2:11178:11202	3641095	0	True				
ANR	3641232	AssignmentExpression	debug_fn = log_file_name		3641095	0		=			
ANR	3641233	Identifier	debug_fn		3641095	0					
ANR	3641234	Identifier	log_file_name		3641095	1					
ANR	3641235	ExpressionStatement	"debug_fp = safe_fopen_wrapper_follow ( log_file_name , ""a"" )"	409:2:11206:11262	3641095	1	True				
ANR	3641236	AssignmentExpression	"debug_fp = safe_fopen_wrapper_follow ( log_file_name , ""a"" )"		3641095	0		=			
ANR	3641237	Identifier	debug_fp		3641095	0					
ANR	3641238	CallExpression	"safe_fopen_wrapper_follow ( log_file_name , ""a"" )"		3641095	1					
ANR	3641239	Callee	safe_fopen_wrapper_follow		3641095	0					
ANR	3641240	Identifier	safe_fopen_wrapper_follow		3641095	0					
ANR	3641241	ArgumentList	log_file_name		3641095	1					
ANR	3641242	Argument	log_file_name		3641095	0					
ANR	3641243	Identifier	log_file_name		3641095	0					
ANR	3641244	Argument	"""a"""		3641095	1					
ANR	3641245	PrimaryExpression	"""a"""		3641095	0					
ANR	3641246	IfStatement	if ( debug_fp == NULL )		3641095	2					
ANR	3641247	Condition	debug_fp == NULL	410:6:11270:11285	3641095	0	True				
ANR	3641248	EqualityExpression	debug_fp == NULL		3641095	0		==			
ANR	3641249	Identifier	debug_fp		3641095	0					
ANR	3641250	Identifier	NULL		3641095	1					
ANR	3641251	CompoundStatement		44:24:1156:1156	3641095	1					
ANR	3641252	ExpressionStatement	"fprintf ( stderr , ""error: couldn't open file \\""%s\\"" for logging: %s (%d)\\n"" , log_file_name , strerror ( errno ) , errno )"	411:3:11293:11444	3641095	0	True				
ANR	3641253	CallExpression	"fprintf ( stderr , ""error: couldn't open file \\""%s\\"" for logging: %s (%d)\\n"" , log_file_name , strerror ( errno ) , errno )"		3641095	0					
ANR	3641254	Callee	fprintf		3641095	0					
ANR	3641255	Identifier	fprintf		3641095	0					
ANR	3641256	ArgumentList	stderr		3641095	1					
ANR	3641257	Argument	stderr		3641095	0					
ANR	3641258	Identifier	stderr		3641095	0					
ANR	3641259	Argument	"""error: couldn't open file \\""%s\\"" for logging: %s (%d)\\n"""		3641095	1					
ANR	3641260	PrimaryExpression	"""error: couldn't open file \\""%s\\"" for logging: %s (%d)\\n"""		3641095	0					
ANR	3641261	Argument	log_file_name		3641095	2					
ANR	3641262	Identifier	log_file_name		3641095	0					
ANR	3641263	Argument	strerror ( errno )		3641095	3					
ANR	3641264	CallExpression	strerror ( errno )		3641095	0					
ANR	3641265	Callee	strerror		3641095	0					
ANR	3641266	Identifier	strerror		3641095	0					
ANR	3641267	ArgumentList	errno		3641095	1					
ANR	3641268	Argument	errno		3641095	0					
ANR	3641269	Identifier	errno		3641095	0					
ANR	3641270	Argument	errno		3641095	4					
ANR	3641271	Identifier	errno		3641095	0					
ANR	3641272	ExpressionStatement	exit ( 1 )	416:3:11449:11456	3641095	1	True				
ANR	3641273	CallExpression	exit ( 1 )		3641095	0					
ANR	3641274	Callee	exit		3641095	0					
ANR	3641275	Identifier	exit		3641095	0					
ANR	3641276	ArgumentList	1		3641095	1					
ANR	3641277	Argument	1		3641095	0					
ANR	3641278	PrimaryExpression	1		3641095	0					
ANR	3641279	ExpressionStatement	"dprintf ( D_ALWAYS , ""***********************************\\n"" )"	418:2:11464:11522	3641095	3	True				
ANR	3641280	CallExpression	"dprintf ( D_ALWAYS , ""***********************************\\n"" )"		3641095	0					
ANR	3641281	Callee	dprintf		3641095	0					
ANR	3641282	Identifier	dprintf		3641095	0					
ANR	3641283	ArgumentList	D_ALWAYS		3641095	1					
ANR	3641284	Argument	D_ALWAYS		3641095	0					
ANR	3641285	Identifier	D_ALWAYS		3641095	0					
ANR	3641286	Argument	"""***********************************\\n"""		3641095	1					
ANR	3641287	PrimaryExpression	"""***********************************\\n"""		3641095	0					
ANR	3641288	ExpressionStatement	"dprintf ( D_ALWAYS , ""* condor_procd STARTING UP\\n"" )"	419:2:11526:11575	3641095	4	True				
ANR	3641289	CallExpression	"dprintf ( D_ALWAYS , ""* condor_procd STARTING UP\\n"" )"		3641095	0					
ANR	3641290	Callee	dprintf		3641095	0					
ANR	3641291	Identifier	dprintf		3641095	0					
ANR	3641292	ArgumentList	D_ALWAYS		3641095	1					
ANR	3641293	Argument	D_ALWAYS		3641095	0					
ANR	3641294	Identifier	D_ALWAYS		3641095	0					
ANR	3641295	Argument	"""* condor_procd STARTING UP\\n"""		3641095	1					
ANR	3641296	PrimaryExpression	"""* condor_procd STARTING UP\\n"""		3641095	0					
ANR	3641297	Statement	dprintf	421:2:11598:11604	3641095	5	True				
ANR	3641298	Statement	(	421:9:11605:11605	3641095	6	True				
ANR	3641299	Statement	D_ALWAYS	421:10:11606:11613	3641095	7	True				
ANR	3641300	Statement	","	421:18:11614:11614	3641095	8	True				
ANR	3641301	Statement	"""* PID = %lu\\n"""	421:20:11616:11630	3641095	9	True				
ANR	3641302	Statement	","	421:35:11631:11631	3641095	10	True				
ANR	3641303	Statement	(	422:3:11637:11637	3641095	11	True				
ANR	3641304	Statement	unsigned	422:4:11638:11645	3641095	12	True				
ANR	3641305	Statement	long	422:13:11647:11650	3641095	13	True				
ANR	3641306	Statement	)	422:17:11651:11651	3641095	14	True				
ANR	3641307	Statement	::	422:18:11652:11653	3641095	15	True				
ANR	3641308	Statement	GetCurrentProcessId	422:20:11654:11672	3641095	16	True				
ANR	3641309	Statement	(	422:39:11673:11673	3641095	17	True				
ANR	3641310	Statement	)	422:40:11674:11674	3641095	18	True				
ANR	3641311	Statement	)	422:41:11675:11675	3641095	19	True				
ANR	3641312	ExpressionStatement		422:42:11676:11676	3641095	20	True				
ANR	3641313	ExpressionStatement	"dprintf ( D_ALWAYS , ""***********************************\\n"" )"	428:2:11882:11940	3641095	21	True				
ANR	3641314	CallExpression	"dprintf ( D_ALWAYS , ""***********************************\\n"" )"		3641095	0					
ANR	3641315	Callee	dprintf		3641095	0					
ANR	3641316	Identifier	dprintf		3641095	0					
ANR	3641317	ArgumentList	D_ALWAYS		3641095	1					
ANR	3641318	Argument	D_ALWAYS		3641095	0					
ANR	3641319	Identifier	D_ALWAYS		3641095	0					
ANR	3641320	Argument	"""***********************************\\n"""		3641095	1					
ANR	3641321	PrimaryExpression	"""***********************************\\n"""		3641095	0					
ANR	3641322	IfStatement	if ( max_snapshot_interval < - 1 )		3641095	8					
ANR	3641323	Condition	max_snapshot_interval < - 1	434:5:12071:12096	3641095	0	True				
ANR	3641324	RelationalExpression	max_snapshot_interval < - 1		3641095	0		<			
ANR	3641325	Identifier	max_snapshot_interval		3641095	0					
ANR	3641326	UnaryOperationExpression	- 1		3641095	1					
ANR	3641327	UnaryOperator	-		3641095	0					
ANR	3641328	PrimaryExpression	1		3641095	1					
ANR	3641329	CompoundStatement		68:33:1967:1967	3641095	1					
ANR	3641330	ExpressionStatement	"fprintf ( stderr , ""error: maximum snapshot interval must be non-negative or -1\\n"" )"	435:2:12103:12193	3641095	0	True				
ANR	3641331	CallExpression	"fprintf ( stderr , ""error: maximum snapshot interval must be non-negative or -1\\n"" )"		3641095	0					
ANR	3641332	Callee	fprintf		3641095	0					
ANR	3641333	Identifier	fprintf		3641095	0					
ANR	3641334	ArgumentList	stderr		3641095	1					
ANR	3641335	Argument	stderr		3641095	0					
ANR	3641336	Identifier	stderr		3641095	0					
ANR	3641337	Argument	"""error: maximum snapshot interval must be non-negative or -1\\n"""		3641095	1					
ANR	3641338	PrimaryExpression	"""error: maximum snapshot interval must be non-negative or -1\\n"""		3641095	0					
ANR	3641339	ExpressionStatement	exit ( 1 )	437:2:12197:12204	3641095	1	True				
ANR	3641340	CallExpression	exit ( 1 )		3641095	0					
ANR	3641341	Callee	exit		3641095	0					
ANR	3641342	Identifier	exit		3641095	0					
ANR	3641343	ArgumentList	1		3641095	1					
ANR	3641344	Argument	1		3641095	0					
ANR	3641345	PrimaryExpression	1		3641095	0					
ANR	3641346	IfStatement	if ( windows_softkill_binary != NULL )		3641095	9					
ANR	3641347	Condition	windows_softkill_binary != NULL	444:5:12352:12382	3641095	0	True				
ANR	3641348	EqualityExpression	windows_softkill_binary != NULL		3641095	0		!=			
ANR	3641349	Identifier	windows_softkill_binary		3641095	0					
ANR	3641350	Identifier	NULL		3641095	1					
ANR	3641351	CompoundStatement		78:38:2253:2253	3641095	1					
ANR	3641352	ExpressionStatement	set_windows_soft_kill_binary ( windows_softkill_binary )	445:2:12389:12442	3641095	0	True				
ANR	3641353	CallExpression	set_windows_soft_kill_binary ( windows_softkill_binary )		3641095	0					
ANR	3641354	Callee	set_windows_soft_kill_binary		3641095	0					
ANR	3641355	Identifier	set_windows_soft_kill_binary		3641095	0					
ANR	3641356	ArgumentList	windows_softkill_binary		3641095	1					
ANR	3641357	Argument	windows_softkill_binary		3641095	0					
ANR	3641358	Identifier	windows_softkill_binary		3641095	0					
ANR	3641359	IfStatement	if ( glexec_kill_path != NULL )		3641095	10					
ANR	3641360	Condition	glexec_kill_path != NULL	453:5:12589:12612	3641095	0	True				
ANR	3641361	EqualityExpression	glexec_kill_path != NULL		3641095	0		!=			
ANR	3641362	Identifier	glexec_kill_path		3641095	0					
ANR	3641363	Identifier	NULL		3641095	1					
ANR	3641364	CompoundStatement		87:31:2483:2483	3641095	1					
ANR	3641365	ExpressionStatement	"glexec_kill_init ( glexec_kill_path , glexec_path )"	454:2:12619:12666	3641095	0	True				
ANR	3641366	CallExpression	"glexec_kill_init ( glexec_kill_path , glexec_path )"		3641095	0					
ANR	3641367	Callee	glexec_kill_init		3641095	0					
ANR	3641368	Identifier	glexec_kill_init		3641095	0					
ANR	3641369	ArgumentList	glexec_kill_path		3641095	1					
ANR	3641370	Argument	glexec_kill_path		3641095	0					
ANR	3641371	Identifier	glexec_kill_path		3641095	0					
ANR	3641372	Argument	glexec_path		3641095	1					
ANR	3641373	Identifier	glexec_path		3641095	0					
ANR	3641374	IfStatement	if ( root_pid_specified == true )		3641095	11					
ANR	3641375	Condition	root_pid_specified == true	464:5:12991:13016	3641095	0	True				
ANR	3641376	EqualityExpression	root_pid_specified == true		3641095	0		==			
ANR	3641377	Identifier	root_pid_specified		3641095	0					
ANR	3641378	Identifier	true		3641095	1					
ANR	3641379	CompoundStatement		98:33:2887:2887	3641095	1					
ANR	3641380	ExpressionStatement	"dprintf ( D_ALWAYS , ""Procd has no watcher pid and will not die if pid %lu dies.\\n"" , ( unsigned long ) root_pid )"	465:2:13023:13137	3641095	0	True				
ANR	3641381	CallExpression	"dprintf ( D_ALWAYS , ""Procd has no watcher pid and will not die if pid %lu dies.\\n"" , ( unsigned long ) root_pid )"		3641095	0					
ANR	3641382	Callee	dprintf		3641095	0					
ANR	3641383	Identifier	dprintf		3641095	0					
ANR	3641384	ArgumentList	D_ALWAYS		3641095	1					
ANR	3641385	Argument	D_ALWAYS		3641095	0					
ANR	3641386	Identifier	D_ALWAYS		3641095	0					
ANR	3641387	Argument	"""Procd has no watcher pid and will not die if pid %lu dies.\\n"""		3641095	1					
ANR	3641388	PrimaryExpression	"""Procd has no watcher pid and will not die if pid %lu dies.\\n"""		3641095	0					
ANR	3641389	Argument	( unsigned long ) root_pid		3641095	2					
ANR	3641390	CastExpression	( unsigned long ) root_pid		3641095	0					
ANR	3641391	CastTarget	unsigned long		3641095	0					
ANR	3641392	Identifier	root_pid		3641095	1					
ANR	3641393	ElseStatement	else		3641095	0					
ANR	3641394	CompoundStatement		102:8:3015:3015	3641095	0					
ANR	3641395	ExpressionStatement	"dprintf ( D_ALWAYS , ""Procd has a watcher pid and will die if pid %lu dies.\\n"" , ( unsigned long ) root_pid )"	469:2:13151:13260	3641095	0	True				
ANR	3641396	CallExpression	"dprintf ( D_ALWAYS , ""Procd has a watcher pid and will die if pid %lu dies.\\n"" , ( unsigned long ) root_pid )"		3641095	0					
ANR	3641397	Callee	dprintf		3641095	0					
ANR	3641398	Identifier	dprintf		3641095	0					
ANR	3641399	ArgumentList	D_ALWAYS		3641095	1					
ANR	3641400	Argument	D_ALWAYS		3641095	0					
ANR	3641401	Identifier	D_ALWAYS		3641095	0					
ANR	3641402	Argument	"""Procd has a watcher pid and will die if pid %lu dies.\\n"""		3641095	1					
ANR	3641403	PrimaryExpression	"""Procd has a watcher pid and will die if pid %lu dies.\\n"""		3641095	0					
ANR	3641404	Argument	( unsigned long ) root_pid		3641095	2					
ANR	3641405	CastExpression	( unsigned long ) root_pid		3641095	0					
ANR	3641406	CastTarget	unsigned long		3641095	0					
ANR	3641407	Identifier	root_pid		3641095	1					
ANR	3641408	IdentifierDeclStatement	"ProcFamilyMonitor monitor ( root_pid , root_birthday , max_snapshot_interval , root_pid_specified ? false : true ) ;"	474:1:13267:13401	3641095	12	True				
ANR	3641409	IdentifierDecl	"monitor ( root_pid , root_birthday , max_snapshot_interval , root_pid_specified ? false : true )"		3641095	0					
ANR	3641410	IdentifierDeclType	ProcFamilyMonitor		3641095	0					
ANR	3641411	Identifier	monitor		3641095	1					
ANR	3641412	Expression	"root_pid , root_birthday , max_snapshot_interval , root_pid_specified ? false : true"		3641095	2					
ANR	3641413	Identifier	root_pid		3641095	0					
ANR	3641414	Expression	"root_birthday , max_snapshot_interval , root_pid_specified ? false : true"		3641095	1					
ANR	3641415	Identifier	root_birthday		3641095	0					
ANR	3641416	Expression	"max_snapshot_interval , root_pid_specified ? false : true"		3641095	1					
ANR	3641417	Identifier	max_snapshot_interval		3641095	0					
ANR	3641418	ConditionalExpression	root_pid_specified ? false : true		3641095	1					
ANR	3641419	Condition	root_pid_specified		3641095	0					
ANR	3641420	Identifier	root_pid_specified		3641095	0					
ANR	3641421	Identifier	false		3641095	1					
ANR	3641422	Identifier	true		3641095	2					
ANR	3641423	IfStatement	if ( min_tracking_gid != 0 )		3641095	13					
ANR	3641424	Condition	min_tracking_gid != 0	483:5:13508:13528	3641095	0	True				
ANR	3641425	EqualityExpression	min_tracking_gid != 0		3641095	0		!=			
ANR	3641426	Identifier	min_tracking_gid		3641095	0					
ANR	3641427	PrimaryExpression	0		3641095	1					
ANR	3641428	CompoundStatement		117:28:3399:3399	3641095	1					
ANR	3641429	IfStatement	if ( min_tracking_gid > max_tracking_gid )		3641095	0					
ANR	3641430	Condition	min_tracking_gid > max_tracking_gid	484:6:13539:13573	3641095	0	True				
ANR	3641431	RelationalExpression	min_tracking_gid > max_tracking_gid		3641095	0		>			
ANR	3641432	Identifier	min_tracking_gid		3641095	0					
ANR	3641433	Identifier	max_tracking_gid		3641095	1					
ANR	3641434	CompoundStatement		118:43:3444:3444	3641095	1					
ANR	3641435	ExpressionStatement	"fprintf ( stderr , ""invalid group range given: %u - %u\\n"" , min_tracking_gid , max_tracking_gid )"	485:3:13581:13705	3641095	0	True				
ANR	3641436	CallExpression	"fprintf ( stderr , ""invalid group range given: %u - %u\\n"" , min_tracking_gid , max_tracking_gid )"		3641095	0					
ANR	3641437	Callee	fprintf		3641095	0					
ANR	3641438	Identifier	fprintf		3641095	0					
ANR	3641439	ArgumentList	stderr		3641095	1					
ANR	3641440	Argument	stderr		3641095	0					
ANR	3641441	Identifier	stderr		3641095	0					
ANR	3641442	Argument	"""invalid group range given: %u - %u\\n"""		3641095	1					
ANR	3641443	PrimaryExpression	"""invalid group range given: %u - %u\\n"""		3641095	0					
ANR	3641444	Argument	min_tracking_gid		3641095	2					
ANR	3641445	Identifier	min_tracking_gid		3641095	0					
ANR	3641446	Argument	max_tracking_gid		3641095	3					
ANR	3641447	Identifier	max_tracking_gid		3641095	0					
ANR	3641448	ExpressionStatement	exit ( 1 )	489:3:13710:13717	3641095	1	True				
ANR	3641449	CallExpression	exit ( 1 )		3641095	0					
ANR	3641450	Callee	exit		3641095	0					
ANR	3641451	Identifier	exit		3641095	0					
ANR	3641452	ArgumentList	1		3641095	1					
ANR	3641453	Argument	1		3641095	0					
ANR	3641454	PrimaryExpression	1		3641095	0					
ANR	3641455	ExpressionStatement	"monitor . enable_group_tracking ( min_tracking_gid , max_tracking_gid , use_external_gid_association ? false : true )"	497:2:14025:14142	3641095	1	True				
ANR	3641456	CallExpression	"monitor . enable_group_tracking ( min_tracking_gid , max_tracking_gid , use_external_gid_association ? false : true )"		3641095	0					
ANR	3641457	Callee	monitor . enable_group_tracking		3641095	0					
ANR	3641458	MemberAccess	monitor . enable_group_tracking		3641095	0					
ANR	3641459	Identifier	monitor		3641095	0					
ANR	3641460	Identifier	enable_group_tracking		3641095	1					
ANR	3641461	ArgumentList	min_tracking_gid		3641095	1					
ANR	3641462	Argument	min_tracking_gid		3641095	0					
ANR	3641463	Identifier	min_tracking_gid		3641095	0					
ANR	3641464	Argument	max_tracking_gid		3641095	1					
ANR	3641465	Identifier	max_tracking_gid		3641095	0					
ANR	3641466	Argument	use_external_gid_association ? false : true		3641095	2					
ANR	3641467	ConditionalExpression	use_external_gid_association ? false : true		3641095	0					
ANR	3641468	Condition	use_external_gid_association		3641095	0					
ANR	3641469	Identifier	use_external_gid_association		3641095	0					
ANR	3641470	Identifier	false		3641095	1					
ANR	3641471	Identifier	true		3641095	2					
ANR	3641472	ExpressionStatement	monitor . enable_cgroup_tracking ( )	504:1:14188:14220	3641095	14	True				
ANR	3641473	CallExpression	monitor . enable_cgroup_tracking ( )		3641095	0					
ANR	3641474	Callee	monitor . enable_cgroup_tracking		3641095	0					
ANR	3641475	MemberAccess	monitor . enable_cgroup_tracking		3641095	0					
ANR	3641476	Identifier	monitor		3641095	0					
ANR	3641477	Identifier	enable_cgroup_tracking		3641095	1					
ANR	3641478	ArgumentList			3641095	1					
ANR	3641479	IdentifierDeclStatement	"ProcFamilyServer server ( monitor , local_server_address ) ;"	509:1:14297:14351	3641095	15	True				
ANR	3641480	IdentifierDecl	"server ( monitor , local_server_address )"		3641095	0					
ANR	3641481	IdentifierDeclType	ProcFamilyServer		3641095	0					
ANR	3641482	Identifier	server		3641095	1					
ANR	3641483	Expression	"monitor , local_server_address"		3641095	2					
ANR	3641484	Identifier	monitor		3641095	0					
ANR	3641485	Identifier	local_server_address		3641095	1					
ANR	3641486	ExpressionStatement	server . set_client_principal ( local_client_principal )	516:1:14624:14675	3641095	16	True				
ANR	3641487	CallExpression	server . set_client_principal ( local_client_principal )		3641095	0					
ANR	3641488	Callee	server . set_client_principal		3641095	0					
ANR	3641489	MemberAccess	server . set_client_principal		3641095	0					
ANR	3641490	Identifier	server		3641095	0					
ANR	3641491	Identifier	set_client_principal		3641095	1					
ANR	3641492	ArgumentList	local_client_principal		3641095	1					
ANR	3641493	Argument	local_client_principal		3641095	0					
ANR	3641494	Identifier	local_client_principal		3641095	0					
ANR	3641495	ExpressionStatement	fclose ( stderr )	522:1:14851:14865	3641095	17	True				
ANR	3641496	CallExpression	fclose ( stderr )		3641095	0					
ANR	3641497	Callee	fclose		3641095	0					
ANR	3641498	Identifier	fclose		3641095	0					
ANR	3641499	ArgumentList	stderr		3641095	1					
ANR	3641500	Argument	stderr		3641095	0					
ANR	3641501	Identifier	stderr		3641095	0					
ANR	3641502	ExpressionStatement	server . wait_loop ( )	526:1:14915:14933	3641095	18	True				
ANR	3641503	CallExpression	server . wait_loop ( )		3641095	0					
ANR	3641504	Callee	server . wait_loop		3641095	0					
ANR	3641505	MemberAccess	server . wait_loop		3641095	0					
ANR	3641506	Identifier	server		3641095	0					
ANR	3641507	Identifier	wait_loop		3641095	1					
ANR	3641508	ArgumentList			3641095	1					
ANR	3641509	ReturnStatement	return 0 ;	528:1:14937:14945	3641095	19	True				
ANR	3641510	PrimaryExpression	0		3641095	0					
ANR	3641511	ReturnType	int		3641095	1					
ANR	3641512	Identifier	main		3641095	2					
ANR	3641513	ParameterList	"int argc , char * argv [ ]"		3641095	3					
ANR	3641514	Parameter	int argc	366:5:10107:10114	3641095	0	True				
ANR	3641515	ParameterType	int		3641095	0					
ANR	3641516	Identifier	argc		3641095	1					
ANR	3641517	Parameter	char * argv [ ]	366:15:10117:10128	3641095	1	True				
ANR	3641518	ParameterType	char * [ ]		3641095	0					
ANR	3641519	Identifier	argv		3641095	1					
ANR	3641520	CFGEntryNode	ENTRY		3641095		True				
ANR	3641521	CFGExitNode	EXIT		3641095		True				
ANR	3641522	Symbol	server		3641095						
ANR	3641523	Symbol	local_client_principal		3641095						
ANR	3641524	Symbol	stdin		3641095						
ANR	3641525	Symbol	stdout		3641095						
ANR	3641526	Symbol	root_pid_specified		3641095						
ANR	3641527	Symbol	min_tracking_gid		3641095						
ANR	3641528	Symbol	root_birthday		3641095						
ANR	3641529	Symbol	argv		3641095						
ANR	3641530	Symbol	glexec_path		3641095						
ANR	3641531	Symbol	debug_fp		3641095						
ANR	3641532	Symbol	debug_fn		3641095						
ANR	3641533	Symbol	glexec_kill_path		3641095						
ANR	3641534	Symbol	safe_fopen_wrapper_follow		3641095						
ANR	3641535	Symbol	argc		3641095						
ANR	3641536	Symbol	use_external_gid_association		3641095						
ANR	3641537	Symbol	ignored		3641095						
ANR	3641538	Symbol	errno		3641095						
ANR	3641539	Symbol	NULL		3641095						
ANR	3641540	Symbol	pi -> birthday		3641095						
ANR	3641541	Symbol	false		3641095						
ANR	3641542	Symbol	D_ALWAYS		3641095						
ANR	3641543	Symbol	PROCAPI_SUCCESS		3641095						
ANR	3641544	Symbol	log_file_name		3641095						
ANR	3641545	Symbol	monitor		3641095						
ANR	3641546	Symbol	stderr		3641095						
ANR	3641547	Symbol	strerror		3641095						
ANR	3641548	Symbol	ProcAPI :: getProcInfo		3641095						
ANR	3641549	Symbol	max_snapshot_interval		3641095						
ANR	3641550	Symbol	true		3641095						
ANR	3641551	Symbol	pi		3641095						
ANR	3641552	Symbol	max_tracking_gid		3641095						
ANR	3641553	Symbol	* pi		3641095						
ANR	3641554	Symbol	root_pid		3641095						
ANR	3641555	Symbol	windows_softkill_binary		3641095						
ANR	3641556	Symbol	status		3641095						
