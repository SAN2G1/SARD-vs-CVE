command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3149180	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_node_scheduler_DagInfo.cpp								
ANR	3149181	Function	Dag :: skeletonize	46:0:1181:2720							
ANR	3149182	FunctionDef	Dag :: skeletonize ()		3149181	0					
ANR	3149183	CompoundStatement		47:0:1209:2720	3149181	0					
ANR	3149184	IdentifierDeclStatement	"int i , j ;"	48:1:1212:1219	3149181	0	True				
ANR	3149185	IdentifierDecl	i		3149181	0					
ANR	3149186	IdentifierDeclType	int		3149181	0					
ANR	3149187	Identifier	i		3149181	1					
ANR	3149188	IdentifierDecl	j		3149181	1					
ANR	3149189	IdentifierDeclType	int		3149181	0					
ANR	3149190	Identifier	j		3149181	1					
ANR	3149191	IdentifierDeclStatement	Graph tc2 ;	51:1:1269:1278	3149181	1	True				
ANR	3149192	IdentifierDecl	tc2		3149181	0					
ANR	3149193	IdentifierDeclType	Graph		3149181	0					
ANR	3149194	Identifier	tc2		3149181	1					
ANR	3149195	ExpressionStatement	tc2 . initializeWith ( * this )	52:1:1281:1306	3149181	2	True				
ANR	3149196	CallExpression	tc2 . initializeWith ( * this )		3149181	0					
ANR	3149197	Callee	tc2 . initializeWith		3149181	0					
ANR	3149198	MemberAccess	tc2 . initializeWith		3149181	0					
ANR	3149199	Identifier	tc2		3149181	0					
ANR	3149200	Identifier	initializeWith		3149181	1					
ANR	3149201	ArgumentList	* this		3149181	1					
ANR	3149202	Argument	* this		3149181	0					
ANR	3149203	UnaryOperationExpression	* this		3149181	0					
ANR	3149204	UnaryOperator	*		3149181	0					
ANR	3149205	Identifier	this		3149181	1					
ANR	3149206	ExpressionStatement	tc2 . closeTransitively ( )	53:1:1309:1332	3149181	3	True				
ANR	3149207	CallExpression	tc2 . closeTransitively ( )		3149181	0					
ANR	3149208	Callee	tc2 . closeTransitively		3149181	0					
ANR	3149209	MemberAccess	tc2 . closeTransitively		3149181	0					
ANR	3149210	Identifier	tc2		3149181	0					
ANR	3149211	Identifier	closeTransitively		3149181	1					
ANR	3149212	ArgumentList			3149181	1					
ANR	3149213	ExpressionStatement	tc2 . square ( )	54:1:1335:1347	3149181	4	True				
ANR	3149214	CallExpression	tc2 . square ( )		3149181	0					
ANR	3149215	Callee	tc2 . square		3149181	0					
ANR	3149216	MemberAccess	tc2 . square		3149181	0					
ANR	3149217	Identifier	tc2		3149181	0					
ANR	3149218	Identifier	square		3149181	1					
ANR	3149219	ArgumentList			3149181	1					
ANR	3149220	IdentifierDeclStatement	Resizable2DArray < int > skelArcTable ;	57:1:1398:1432	3149181	5	True				
ANR	3149221	IdentifierDecl	skelArcTable		3149181	0					
ANR	3149222	IdentifierDeclType	Resizable2DArray < int >		3149181	0					
ANR	3149223	Identifier	skelArcTable		3149181	1					
ANR	3149224	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	58:1:1435:1461	3149181	6	True				
ANR	3149225	IdentifierDecl	numNodes = getNumNodes ( )		3149181	0					
ANR	3149226	IdentifierDeclType	int		3149181	0					
ANR	3149227	Identifier	numNodes		3149181	1					
ANR	3149228	AssignmentExpression	numNodes = getNumNodes ( )		3149181	2		=			
ANR	3149229	Identifier	numNodes		3149181	0					
ANR	3149230	CallExpression	getNumNodes ( )		3149181	1					
ANR	3149231	Callee	getNumNodes		3149181	0					
ANR	3149232	Identifier	getNumNodes		3149181	0					
ANR	3149233	ArgumentList			3149181	1					
ANR	3149234	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149181	7					
ANR	3149235	ForInit	i = 0 ;	59:6:1469:1472	3149181	0	True				
ANR	3149236	AssignmentExpression	i = 0		3149181	0		=			
ANR	3149237	Identifier	i		3149181	0					
ANR	3149238	PrimaryExpression	0		3149181	1					
ANR	3149239	Condition	i < numNodes	59:11:1474:1483	3149181	1	True				
ANR	3149240	RelationalExpression	i < numNodes		3149181	0		<			
ANR	3149241	Identifier	i		3149181	0					
ANR	3149242	Identifier	numNodes		3149181	1					
ANR	3149243	PostIncDecOperationExpression	i ++	59:23:1486:1488	3149181	2	True				
ANR	3149244	Identifier	i		3149181	0					
ANR	3149245	IncDec	++		3149181	1					
ANR	3149246	ExpressionStatement	skelArcTable . appendRow ( )	60:2:1494:1518	3149181	3	True				
ANR	3149247	CallExpression	skelArcTable . appendRow ( )		3149181	0					
ANR	3149248	Callee	skelArcTable . appendRow		3149181	0					
ANR	3149249	MemberAccess	skelArcTable . appendRow		3149181	0					
ANR	3149250	Identifier	skelArcTable		3149181	0					
ANR	3149251	Identifier	appendRow		3149181	1					
ANR	3149252	ArgumentList			3149181	1					
ANR	3149253	IdentifierDeclStatement	int * colorTable ;	63:1:1545:1560	3149181	8	True				
ANR	3149254	IdentifierDecl	* colorTable		3149181	0					
ANR	3149255	IdentifierDeclType	int *		3149181	0					
ANR	3149256	Identifier	colorTable		3149181	1					
ANR	3149257	ExpressionStatement	colorTable = new int [ numNodes ]	64:1:1563:1593	3149181	9	True				
ANR	3149258	AssignmentExpression	colorTable = new int [ numNodes ]		3149181	0		=			
ANR	3149259	Identifier	colorTable		3149181	0					
ANR	3149260	Identifier	numNodes		3149181	1					
ANR	3149261	IfStatement	if ( NULL == colorTable )		3149181	10					
ANR	3149262	Condition	NULL == colorTable	65:5:1600:1615	3149181	0	True				
ANR	3149263	EqualityExpression	NULL == colorTable		3149181	0		==			
ANR	3149264	Identifier	NULL		3149181	0					
ANR	3149265	Identifier	colorTable		3149181	1					
ANR	3149266	ThrowStatement	"throw ""Dag::skeletonize, colorTable is NULL"" ;"	66:2:1621:1665	3149181	1	True				
ANR	3149267	PrimaryExpression	"""Dag::skeletonize, colorTable is NULL"""		3149181	0					
ANR	3149268	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149181	11					
ANR	3149269	ForInit	i = 0 ;	67:6:1673:1676	3149181	0	True				
ANR	3149270	AssignmentExpression	i = 0		3149181	0		=			
ANR	3149271	Identifier	i		3149181	0					
ANR	3149272	PrimaryExpression	0		3149181	1					
ANR	3149273	Condition	i < numNodes	67:11:1678:1687	3149181	1	True				
ANR	3149274	RelationalExpression	i < numNodes		3149181	0		<			
ANR	3149275	Identifier	i		3149181	0					
ANR	3149276	Identifier	numNodes		3149181	1					
ANR	3149277	PostIncDecOperationExpression	i ++	67:23:1690:1692	3149181	2	True				
ANR	3149278	Identifier	i		3149181	0					
ANR	3149279	IncDec	++		3149181	1					
ANR	3149280	ExpressionStatement	colorTable [ i ] = - 1	68:2:1698:1716	3149181	3	True				
ANR	3149281	AssignmentExpression	colorTable [ i ] = - 1		3149181	0		=			
ANR	3149282	ArrayIndexing	colorTable [ i ]		3149181	0					
ANR	3149283	Identifier	colorTable		3149181	0					
ANR	3149284	Identifier	i		3149181	1					
ANR	3149285	UnaryOperationExpression	- 1		3149181	1					
ANR	3149286	UnaryOperator	-		3149181	0					
ANR	3149287	PrimaryExpression	1		3149181	1					
ANR	3149288	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149181	12					
ANR	3149289	ForInit	i = 0 ;	71:6:1813:1816	3149181	0	True				
ANR	3149290	AssignmentExpression	i = 0		3149181	0		=			
ANR	3149291	Identifier	i		3149181	0					
ANR	3149292	PrimaryExpression	0		3149181	1					
ANR	3149293	Condition	i < numNodes	71:11:1818:1827	3149181	1	True				
ANR	3149294	RelationalExpression	i < numNodes		3149181	0		<			
ANR	3149295	Identifier	i		3149181	0					
ANR	3149296	Identifier	numNodes		3149181	1					
ANR	3149297	PostIncDecOperationExpression	i ++	71:23:1830:1832	3149181	2	True				
ANR	3149298	Identifier	i		3149181	0					
ANR	3149299	IncDec	++		3149181	1					
ANR	3149300	CompoundStatement		29:2:783:814	3149181	3					
ANR	3149301	IdentifierDeclStatement	int numArcs = tc2 . getNumArcs ( i ) ;	75:2:1993:2024	3149181	0	True				
ANR	3149302	IdentifierDecl	numArcs = tc2 . getNumArcs ( i )		3149181	0					
ANR	3149303	IdentifierDeclType	int		3149181	0					
ANR	3149304	Identifier	numArcs		3149181	1					
ANR	3149305	AssignmentExpression	numArcs = tc2 . getNumArcs ( i )		3149181	2		=			
ANR	3149306	Identifier	numArcs		3149181	0					
ANR	3149307	CallExpression	tc2 . getNumArcs ( i )		3149181	1					
ANR	3149308	Callee	tc2 . getNumArcs		3149181	0					
ANR	3149309	MemberAccess	tc2 . getNumArcs		3149181	0					
ANR	3149310	Identifier	tc2		3149181	0					
ANR	3149311	Identifier	getNumArcs		3149181	1					
ANR	3149312	ArgumentList	i		3149181	1					
ANR	3149313	Argument	i		3149181	0					
ANR	3149314	Identifier	i		3149181	0					
ANR	3149315	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		3149181	1					
ANR	3149316	ForInit	j = 0 ;	76:7:2033:2036	3149181	0	True				
ANR	3149317	AssignmentExpression	j = 0		3149181	0		=			
ANR	3149318	Identifier	j		3149181	0					
ANR	3149319	PrimaryExpression	0		3149181	1					
ANR	3149320	Condition	j < numArcs	76:12:2038:2046	3149181	1	True				
ANR	3149321	RelationalExpression	j < numArcs		3149181	0		<			
ANR	3149322	Identifier	j		3149181	0					
ANR	3149323	Identifier	numArcs		3149181	1					
ANR	3149324	PostIncDecOperationExpression	j ++	76:23:2049:2051	3149181	2	True				
ANR	3149325	Identifier	j		3149181	0					
ANR	3149326	IncDec	++		3149181	1					
ANR	3149327	ExpressionStatement	"colorTable [ tc2 . getArc ( i , j ) ] = i"	77:3:2058:2091	3149181	3	True				
ANR	3149328	AssignmentExpression	"colorTable [ tc2 . getArc ( i , j ) ] = i"		3149181	0		=			
ANR	3149329	ArrayIndexing	"colorTable [ tc2 . getArc ( i , j ) ]"		3149181	0					
ANR	3149330	Identifier	colorTable		3149181	0					
ANR	3149331	CallExpression	"tc2 . getArc ( i , j )"		3149181	1					
ANR	3149332	Callee	tc2 . getArc		3149181	0					
ANR	3149333	MemberAccess	tc2 . getArc		3149181	0					
ANR	3149334	Identifier	tc2		3149181	0					
ANR	3149335	Identifier	getArc		3149181	1					
ANR	3149336	ArgumentList	i		3149181	1					
ANR	3149337	Argument	i		3149181	0					
ANR	3149338	Identifier	i		3149181	0					
ANR	3149339	Argument	j		3149181	1					
ANR	3149340	Identifier	j		3149181	0					
ANR	3149341	Identifier	i		3149181	1					
ANR	3149342	ExpressionStatement	numArcs = getNumArcs ( i )	81:2:2232:2255	3149181	2	True				
ANR	3149343	AssignmentExpression	numArcs = getNumArcs ( i )		3149181	0		=			
ANR	3149344	Identifier	numArcs		3149181	0					
ANR	3149345	CallExpression	getNumArcs ( i )		3149181	1					
ANR	3149346	Callee	getNumArcs		3149181	0					
ANR	3149347	Identifier	getNumArcs		3149181	0					
ANR	3149348	ArgumentList	i		3149181	1					
ANR	3149349	Argument	i		3149181	0					
ANR	3149350	Identifier	i		3149181	0					
ANR	3149351	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		3149181	3					
ANR	3149352	ForInit	j = 0 ;	82:7:2264:2267	3149181	0	True				
ANR	3149353	AssignmentExpression	j = 0		3149181	0		=			
ANR	3149354	Identifier	j		3149181	0					
ANR	3149355	PrimaryExpression	0		3149181	1					
ANR	3149356	Condition	j < numArcs	82:12:2269:2277	3149181	1	True				
ANR	3149357	RelationalExpression	j < numArcs		3149181	0		<			
ANR	3149358	Identifier	j		3149181	0					
ANR	3149359	Identifier	numArcs		3149181	1					
ANR	3149360	PostIncDecOperationExpression	j ++	82:23:2280:2282	3149181	2	True				
ANR	3149361	Identifier	j		3149181	0					
ANR	3149362	IncDec	++		3149181	1					
ANR	3149363	CompoundStatement		37:3:1081:1104	3149181	3					
ANR	3149364	IdentifierDeclStatement	"int child = getArc ( i , j ) ;"	83:3:2291:2314	3149181	0	True				
ANR	3149365	IdentifierDecl	"child = getArc ( i , j )"		3149181	0					
ANR	3149366	IdentifierDeclType	int		3149181	0					
ANR	3149367	Identifier	child		3149181	1					
ANR	3149368	AssignmentExpression	"child = getArc ( i , j )"		3149181	2		=			
ANR	3149369	Identifier	child		3149181	0					
ANR	3149370	CallExpression	"getArc ( i , j )"		3149181	1					
ANR	3149371	Callee	getArc		3149181	0					
ANR	3149372	Identifier	getArc		3149181	0					
ANR	3149373	ArgumentList	i		3149181	1					
ANR	3149374	Argument	i		3149181	0					
ANR	3149375	Identifier	i		3149181	0					
ANR	3149376	Argument	j		3149181	1					
ANR	3149377	Identifier	j		3149181	0					
ANR	3149378	IfStatement	if ( colorTable [ child ] < i )		3149181	1					
ANR	3149379	Condition	colorTable [ child ] < i	84:7:2323:2343	3149181	0	True				
ANR	3149380	RelationalExpression	colorTable [ child ] < i		3149181	0		<			
ANR	3149381	ArrayIndexing	colorTable [ child ]		3149181	0					
ANR	3149382	Identifier	colorTable		3149181	0					
ANR	3149383	Identifier	child		3149181	1					
ANR	3149384	Identifier	i		3149181	1					
ANR	3149385	ExpressionStatement	"skelArcTable . append ( i , child )"	85:4:2351:2379	3149181	1	True				
ANR	3149386	CallExpression	"skelArcTable . append ( i , child )"		3149181	0					
ANR	3149387	Callee	skelArcTable . append		3149181	0					
ANR	3149388	MemberAccess	skelArcTable . append		3149181	0					
ANR	3149389	Identifier	skelArcTable		3149181	0					
ANR	3149390	Identifier	append		3149181	1					
ANR	3149391	ArgumentList	i		3149181	1					
ANR	3149392	Argument	i		3149181	0					
ANR	3149393	Identifier	i		3149181	0					
ANR	3149394	Argument	child		3149181	1					
ANR	3149395	Identifier	child		3149181	0					
ANR	3149396	ExpressionStatement		86:3:2428:2428	3149181	4	True				
ANR	3149397	ExpressionStatement		87:2:2432:2432	3149181	13	True				
ANR	3149398	Statement	delete	89:1:2436:2441	3149181	14	True				
ANR	3149399	Statement	[	89:7:2442:2442	3149181	15	True				
ANR	3149400	Statement	]	89:8:2443:2443	3149181	16	True				
ANR	3149401	ExpressionStatement	colorTable	89:10:2445:2455	3149181	17	True				
ANR	3149402	Identifier	colorTable		3149181	0					
ANR	3149403	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149181	18					
ANR	3149404	ForInit	i = 0 ;	92:6:2518:2521	3149181	0	True				
ANR	3149405	AssignmentExpression	i = 0		3149181	0		=			
ANR	3149406	Identifier	i		3149181	0					
ANR	3149407	PrimaryExpression	0		3149181	1					
ANR	3149408	Condition	i < numNodes	92:11:2523:2532	3149181	1	True				
ANR	3149409	RelationalExpression	i < numNodes		3149181	0		<			
ANR	3149410	Identifier	i		3149181	0					
ANR	3149411	Identifier	numNodes		3149181	1					
ANR	3149412	PostIncDecOperationExpression	i ++	92:23:2535:2537	3149181	2	True				
ANR	3149413	Identifier	i		3149181	0					
ANR	3149414	IncDec	++		3149181	1					
ANR	3149415	CompoundStatement		48:2:1359:1397	3149181	3					
ANR	3149416	ExpressionStatement	arcTable . resetRow ( i )	93:2:2545:2565	3149181	0	True				
ANR	3149417	CallExpression	arcTable . resetRow ( i )		3149181	0					
ANR	3149418	Callee	arcTable . resetRow		3149181	0					
ANR	3149419	MemberAccess	arcTable . resetRow		3149181	0					
ANR	3149420	Identifier	arcTable		3149181	0					
ANR	3149421	Identifier	resetRow		3149181	1					
ANR	3149422	ArgumentList	i		3149181	1					
ANR	3149423	Argument	i		3149181	0					
ANR	3149424	Identifier	i		3149181	0					
ANR	3149425	IdentifierDeclStatement	int numArcs = skelArcTable . getNumElem ( i ) ;	94:2:2569:2607	3149181	1	True				
ANR	3149426	IdentifierDecl	numArcs = skelArcTable . getNumElem ( i )		3149181	0					
ANR	3149427	IdentifierDeclType	int		3149181	0					
ANR	3149428	Identifier	numArcs		3149181	1					
ANR	3149429	AssignmentExpression	numArcs = skelArcTable . getNumElem ( i )		3149181	2		=			
ANR	3149430	Identifier	numArcs		3149181	0					
ANR	3149431	CallExpression	skelArcTable . getNumElem ( i )		3149181	1					
ANR	3149432	Callee	skelArcTable . getNumElem		3149181	0					
ANR	3149433	MemberAccess	skelArcTable . getNumElem		3149181	0					
ANR	3149434	Identifier	skelArcTable		3149181	0					
ANR	3149435	Identifier	getNumElem		3149181	1					
ANR	3149436	ArgumentList	i		3149181	1					
ANR	3149437	Argument	i		3149181	0					
ANR	3149438	Identifier	i		3149181	0					
ANR	3149439	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		3149181	2					
ANR	3149440	ForInit	j = 0 ;	95:7:2616:2619	3149181	0	True				
ANR	3149441	AssignmentExpression	j = 0		3149181	0		=			
ANR	3149442	Identifier	j		3149181	0					
ANR	3149443	PrimaryExpression	0		3149181	1					
ANR	3149444	Condition	j < numArcs	95:12:2621:2629	3149181	1	True				
ANR	3149445	RelationalExpression	j < numArcs		3149181	0		<			
ANR	3149446	Identifier	j		3149181	0					
ANR	3149447	Identifier	numArcs		3149181	1					
ANR	3149448	PostIncDecOperationExpression	j ++	95:23:2632:2634	3149181	2	True				
ANR	3149449	Identifier	j		3149181	0					
ANR	3149450	IncDec	++		3149181	1					
ANR	3149451	CompoundStatement		50:3:1433:1470	3149181	3					
ANR	3149452	IdentifierDeclStatement	"int child = skelArcTable . getElem ( i , j ) ;"	96:3:2643:2680	3149181	0	True				
ANR	3149453	IdentifierDecl	"child = skelArcTable . getElem ( i , j )"		3149181	0					
ANR	3149454	IdentifierDeclType	int		3149181	0					
ANR	3149455	Identifier	child		3149181	1					
ANR	3149456	AssignmentExpression	"child = skelArcTable . getElem ( i , j )"		3149181	2		=			
ANR	3149457	Identifier	child		3149181	0					
ANR	3149458	CallExpression	"skelArcTable . getElem ( i , j )"		3149181	1					
ANR	3149459	Callee	skelArcTable . getElem		3149181	0					
ANR	3149460	MemberAccess	skelArcTable . getElem		3149181	0					
ANR	3149461	Identifier	skelArcTable		3149181	0					
ANR	3149462	Identifier	getElem		3149181	1					
ANR	3149463	ArgumentList	i		3149181	1					
ANR	3149464	Argument	i		3149181	0					
ANR	3149465	Identifier	i		3149181	0					
ANR	3149466	Argument	j		3149181	1					
ANR	3149467	Identifier	j		3149181	0					
ANR	3149468	ExpressionStatement	"arcTable . append ( i , child )"	97:3:2685:2709	3149181	1	True				
ANR	3149469	CallExpression	"arcTable . append ( i , child )"		3149181	0					
ANR	3149470	Callee	arcTable . append		3149181	0					
ANR	3149471	MemberAccess	arcTable . append		3149181	0					
ANR	3149472	Identifier	arcTable		3149181	0					
ANR	3149473	Identifier	append		3149181	1					
ANR	3149474	ArgumentList	i		3149181	1					
ANR	3149475	Argument	i		3149181	0					
ANR	3149476	Identifier	i		3149181	0					
ANR	3149477	Argument	child		3149181	1					
ANR	3149478	Identifier	child		3149181	0					
ANR	3149479	ExpressionStatement		98:3:2714:2714	3149181	3	True				
ANR	3149480	ExpressionStatement		99:2:2718:2718	3149181	19	True				
ANR	3149481	ReturnType	void		3149181	1					
ANR	3149482	Identifier	Dag :: skeletonize		3149181	2					
ANR	3149483	ParameterList			3149181	3					
ANR	3149484	CFGEntryNode	ENTRY		3149181		True				
ANR	3149485	CFGExitNode	EXIT		3149181		True				
ANR	3149486	CFGExceptionNode	EXCEPTION		3149181		True				
ANR	3149487	Symbol	tc2		3149181						
ANR	3149488	Symbol	* child		3149181						
ANR	3149489	Symbol	NULL		3149181						
ANR	3149490	Symbol	tc2 . getNumArcs		3149181						
ANR	3149491	Symbol	this		3149181						
ANR	3149492	Symbol	i		3149181						
ANR	3149493	Symbol	arcTable		3149181						
ANR	3149494	Symbol	j		3149181						
ANR	3149495	Symbol	* tc2		3149181						
ANR	3149496	Symbol	* this		3149181						
ANR	3149497	Symbol	colorTable		3149181						
ANR	3149498	Symbol	tc2 . getArc		3149181						
ANR	3149499	Symbol	getNumArcs		3149181						
ANR	3149500	Symbol	numNodes		3149181						
ANR	3149501	Symbol	getNumNodes		3149181						
ANR	3149502	Symbol	* i		3149181						
ANR	3149503	Symbol	numArcs		3149181						
ANR	3149504	Symbol	getArc		3149181						
ANR	3149505	Symbol	skelArcTable		3149181						
ANR	3149506	Symbol	* colorTable		3149181						
ANR	3149507	Symbol	skelArcTable . getNumElem		3149181						
ANR	3149508	Symbol	* tc2 . getArc		3149181						
ANR	3149509	Symbol	skelArcTable . getElem		3149181						
ANR	3149510	Symbol	child		3149181						
ANR	3149511	Function	Dag :: getParentCountVector	117:0:2942:3407							
ANR	3149512	FunctionDef	Dag :: getParentCountVector ()		3149511	0					
ANR	3149513	CompoundStatement		118:0:2986:3407	3149511	0					
ANR	3149514	IdentifierDeclStatement	"int i , j ;"	119:1:2989:2996	3149511	0	True				
ANR	3149515	IdentifierDecl	i		3149511	0					
ANR	3149516	IdentifierDeclType	int		3149511	0					
ANR	3149517	Identifier	i		3149511	1					
ANR	3149518	IdentifierDecl	j		3149511	1					
ANR	3149519	IdentifierDeclType	int		3149511	0					
ANR	3149520	Identifier	j		3149511	1					
ANR	3149521	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	122:1:3025:3053	3149511	1	True				
ANR	3149522	IdentifierDecl	numNodes = getNumNodes ( )		3149511	0					
ANR	3149523	IdentifierDeclType	int		3149511	0					
ANR	3149524	Identifier	numNodes		3149511	1					
ANR	3149525	AssignmentExpression	numNodes = getNumNodes ( )		3149511	2		=			
ANR	3149526	Identifier	numNodes		3149511	0					
ANR	3149527	CallExpression	getNumNodes ( )		3149511	1					
ANR	3149528	Callee	getNumNodes		3149511	0					
ANR	3149529	Identifier	getNumNodes		3149511	0					
ANR	3149530	ArgumentList			3149511	1					
ANR	3149531	IdentifierDeclStatement	int * numParents = new int [ numNodes ] ;	123:1:3056:3092	3149511	2	True				
ANR	3149532	IdentifierDecl	* numParents = new int [ numNodes ]		3149511	0					
ANR	3149533	IdentifierDeclType	int *		3149511	0					
ANR	3149534	Identifier	numParents		3149511	1					
ANR	3149535	AssignmentExpression	* numParents = new int [ numNodes ]		3149511	2		=			
ANR	3149536	Identifier	numNodes		3149511	0					
ANR	3149537	Identifier	numNodes		3149511	1					
ANR	3149538	IfStatement	if ( NULL == numParents )		3149511	3					
ANR	3149539	Condition	NULL == numParents	124:5:3099:3114	3149511	0	True				
ANR	3149540	EqualityExpression	NULL == numParents		3149511	0		==			
ANR	3149541	Identifier	NULL		3149511	0					
ANR	3149542	Identifier	numParents		3149511	1					
ANR	3149543	ThrowStatement	"throw ""Dag::getParentCountVector, numParents is NULL"" ;"	125:2:3120:3173	3149511	1	True				
ANR	3149544	PrimaryExpression	"""Dag::getParentCountVector, numParents is NULL"""		3149511	0					
ANR	3149545	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149511	4					
ANR	3149546	ForInit	i = 0 ;	126:6:3181:3184	3149511	0	True				
ANR	3149547	AssignmentExpression	i = 0		3149511	0		=			
ANR	3149548	Identifier	i		3149511	0					
ANR	3149549	PrimaryExpression	0		3149511	1					
ANR	3149550	Condition	i < numNodes	126:11:3186:3195	3149511	1	True				
ANR	3149551	RelationalExpression	i < numNodes		3149511	0		<			
ANR	3149552	Identifier	i		3149511	0					
ANR	3149553	Identifier	numNodes		3149511	1					
ANR	3149554	PostIncDecOperationExpression	i ++	126:23:3198:3200	3149511	2	True				
ANR	3149555	Identifier	i		3149511	0					
ANR	3149556	IncDec	++		3149511	1					
ANR	3149557	ExpressionStatement	numParents [ i ] = 0	127:2:3206:3223	3149511	3	True				
ANR	3149558	AssignmentExpression	numParents [ i ] = 0		3149511	0		=			
ANR	3149559	ArrayIndexing	numParents [ i ]		3149511	0					
ANR	3149560	Identifier	numParents		3149511	0					
ANR	3149561	Identifier	i		3149511	1					
ANR	3149562	PrimaryExpression	0		3149511	1					
ANR	3149563	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149511	5					
ANR	3149564	ForInit	i = 0 ;	130:6:3264:3267	3149511	0	True				
ANR	3149565	AssignmentExpression	i = 0		3149511	0		=			
ANR	3149566	Identifier	i		3149511	0					
ANR	3149567	PrimaryExpression	0		3149511	1					
ANR	3149568	Condition	i < numNodes	130:11:3269:3278	3149511	1	True				
ANR	3149569	RelationalExpression	i < numNodes		3149511	0		<			
ANR	3149570	Identifier	i		3149511	0					
ANR	3149571	Identifier	numNodes		3149511	1					
ANR	3149572	PostIncDecOperationExpression	i ++	130:23:3281:3283	3149511	2	True				
ANR	3149573	Identifier	i		3149511	0					
ANR	3149574	IncDec	++		3149511	1					
ANR	3149575	CompoundStatement		14:2:304:331	3149511	3					
ANR	3149576	IdentifierDeclStatement	int numArcs = getNumArcs ( i ) ;	131:2:3291:3318	3149511	0	True				
ANR	3149577	IdentifierDecl	numArcs = getNumArcs ( i )		3149511	0					
ANR	3149578	IdentifierDeclType	int		3149511	0					
ANR	3149579	Identifier	numArcs		3149511	1					
ANR	3149580	AssignmentExpression	numArcs = getNumArcs ( i )		3149511	2		=			
ANR	3149581	Identifier	numArcs		3149511	0					
ANR	3149582	CallExpression	getNumArcs ( i )		3149511	1					
ANR	3149583	Callee	getNumArcs		3149511	0					
ANR	3149584	Identifier	getNumArcs		3149511	0					
ANR	3149585	ArgumentList	i		3149511	1					
ANR	3149586	Argument	i		3149511	0					
ANR	3149587	Identifier	i		3149511	0					
ANR	3149588	ForStatement	for ( j = 0 ; j < numArcs ; j ++ )		3149511	1					
ANR	3149589	ForInit	j = 0 ;	132:7:3327:3330	3149511	0	True				
ANR	3149590	AssignmentExpression	j = 0		3149511	0		=			
ANR	3149591	Identifier	j		3149511	0					
ANR	3149592	PrimaryExpression	0		3149511	1					
ANR	3149593	Condition	j < numArcs	132:12:3332:3340	3149511	1	True				
ANR	3149594	RelationalExpression	j < numArcs		3149511	0		<			
ANR	3149595	Identifier	j		3149511	0					
ANR	3149596	Identifier	numArcs		3149511	1					
ANR	3149597	PostIncDecOperationExpression	j ++	132:23:3343:3345	3149511	2	True				
ANR	3149598	Identifier	j		3149511	0					
ANR	3149599	IncDec	++		3149511	1					
ANR	3149600	ExpressionStatement	"numParents [ getArc ( i , j ) ] ++"	133:3:3352:3380	3149511	3	True				
ANR	3149601	PostIncDecOperationExpression	"numParents [ getArc ( i , j ) ] ++"		3149511	0					
ANR	3149602	ArrayIndexing	"numParents [ getArc ( i , j ) ]"		3149511	0					
ANR	3149603	Identifier	numParents		3149511	0					
ANR	3149604	CallExpression	"getArc ( i , j )"		3149511	1					
ANR	3149605	Callee	getArc		3149511	0					
ANR	3149606	Identifier	getArc		3149511	0					
ANR	3149607	ArgumentList	i		3149511	1					
ANR	3149608	Argument	i		3149511	0					
ANR	3149609	Identifier	i		3149511	0					
ANR	3149610	Argument	j		3149511	1					
ANR	3149611	Identifier	j		3149511	0					
ANR	3149612	IncDec	++		3149511	1					
ANR	3149613	ExpressionStatement		134:2:3384:3384	3149511	6	True				
ANR	3149614	ReturnStatement	return numParents ;	136:1:3388:3405	3149511	7	True				
ANR	3149615	Identifier	numParents		3149511	0					
ANR	3149616	ReturnType	int *		3149511	1					
ANR	3149617	Identifier	Dag :: getParentCountVector		3149511	2					
ANR	3149618	ParameterList			3149511	3					
ANR	3149619	CFGEntryNode	ENTRY		3149511		True				
ANR	3149620	CFGExitNode	EXIT		3149511		True				
ANR	3149621	CFGExceptionNode	EXCEPTION		3149511		True				
ANR	3149622	Symbol	getNumArcs		3149511						
ANR	3149623	Symbol	numNodes		3149511						
ANR	3149624	Symbol	getNumNodes		3149511						
ANR	3149625	Symbol	* getArc		3149511						
ANR	3149626	Symbol	NULL		3149511						
ANR	3149627	Symbol	* i		3149511						
ANR	3149628	Symbol	numArcs		3149511						
ANR	3149629	Symbol	getArc		3149511						
ANR	3149630	Symbol	* numParents		3149511						
ANR	3149631	Symbol	numParents		3149511						
ANR	3149632	Symbol	i		3149511						
ANR	3149633	Symbol	j		3149511						
ANR	3149634	Function	Dag :: getNumSinks	153:0:3578:3762							
ANR	3149635	FunctionDef	Dag :: getNumSinks ()		3149634	0					
ANR	3149636	CompoundStatement		154:0:3611:3762	3149634	0					
ANR	3149637	IdentifierDeclStatement	int numNodes = getNumNodes ( ) ;	155:1:3614:3642	3149634	0	True				
ANR	3149638	IdentifierDecl	numNodes = getNumNodes ( )		3149634	0					
ANR	3149639	IdentifierDeclType	int		3149634	0					
ANR	3149640	Identifier	numNodes		3149634	1					
ANR	3149641	AssignmentExpression	numNodes = getNumNodes ( )		3149634	2		=			
ANR	3149642	Identifier	numNodes		3149634	0					
ANR	3149643	CallExpression	getNumNodes ( )		3149634	1					
ANR	3149644	Callee	getNumNodes		3149634	0					
ANR	3149645	Identifier	getNumNodes		3149634	0					
ANR	3149646	ArgumentList			3149634	1					
ANR	3149647	IdentifierDeclStatement	int numSinks = 0 ;	156:1:3645:3661	3149634	1	True				
ANR	3149648	IdentifierDecl	numSinks = 0		3149634	0					
ANR	3149649	IdentifierDeclType	int		3149634	0					
ANR	3149650	Identifier	numSinks		3149634	1					
ANR	3149651	AssignmentExpression	numSinks = 0		3149634	2		=			
ANR	3149652	Identifier	numSinks		3149634	0					
ANR	3149653	PrimaryExpression	0		3149634	1					
ANR	3149654	ForStatement	for ( int i = 0 ; i < numNodes ; i ++ )		3149634	2					
ANR	3149655	ForInit	int i = 0 ;	157:6:3669:3676	3149634	0	True				
ANR	3149656	IdentifierDeclStatement	int i = 0 ;		3149634	0					
ANR	3149657	IdentifierDecl	i = 0		3149634	0					
ANR	3149658	IdentifierDeclType	int		3149634	0					
ANR	3149659	Identifier	i		3149634	1					
ANR	3149660	AssignmentExpression	i = 0		3149634	2		=			
ANR	3149661	Identifier	i		3149634	0					
ANR	3149662	PrimaryExpression	0		3149634	1					
ANR	3149663	Condition	i < numNodes	157:15:3678:3687	3149634	1	True				
ANR	3149664	RelationalExpression	i < numNodes		3149634	0		<			
ANR	3149665	Identifier	i		3149634	0					
ANR	3149666	Identifier	numNodes		3149634	1					
ANR	3149667	PostIncDecOperationExpression	i ++	157:27:3690:3692	3149634	2	True				
ANR	3149668	Identifier	i		3149634	0					
ANR	3149669	IncDec	++		3149634	1					
ANR	3149670	CompoundStatement		4:33:84:84	3149634	3					
ANR	3149671	IfStatement	if ( 0 == getNumArcs ( i ) )		3149634	0					
ANR	3149672	Condition	0 == getNumArcs ( i )	158:6:3704:3721	3149634	0	True				
ANR	3149673	EqualityExpression	0 == getNumArcs ( i )		3149634	0		==			
ANR	3149674	PrimaryExpression	0		3149634	0					
ANR	3149675	CallExpression	getNumArcs ( i )		3149634	1					
ANR	3149676	Callee	getNumArcs		3149634	0					
ANR	3149677	Identifier	getNumArcs		3149634	0					
ANR	3149678	ArgumentList	i		3149634	1					
ANR	3149679	Argument	i		3149634	0					
ANR	3149680	Identifier	i		3149634	0					
ANR	3149681	ExpressionStatement	numSinks ++	159:3:3728:3738	3149634	1	True				
ANR	3149682	PostIncDecOperationExpression	numSinks ++		3149634	0					
ANR	3149683	Identifier	numSinks		3149634	0					
ANR	3149684	IncDec	++		3149634	1					
ANR	3149685	ExpressionStatement		160:2:3742:3742	3149634	3	True				
ANR	3149686	ReturnStatement	return numSinks ;	161:1:3745:3760	3149634	4	True				
ANR	3149687	Identifier	numSinks		3149634	0					
ANR	3149688	ReturnType	int		3149634	1					
ANR	3149689	Identifier	Dag :: getNumSinks		3149634	2					
ANR	3149690	ParameterList			3149634	3					
ANR	3149691	CFGEntryNode	ENTRY		3149634		True				
ANR	3149692	CFGExitNode	EXIT		3149634		True				
ANR	3149693	Symbol	getNumArcs		3149634						
ANR	3149694	Symbol	getNumNodes		3149634						
ANR	3149695	Symbol	numNodes		3149634						
ANR	3149696	Symbol	numSinks		3149634						
ANR	3149697	Symbol	i		3149634						
ANR	3149698	Function	Dag :: getEligPlot	179:0:4019:5140							
ANR	3149699	FunctionDef	Dag :: getEligPlot (const int * schedule)		3149698	0					
ANR	3149700	CompoundStatement		180:0:4070:5140	3149698	0					
ANR	3149701	IdentifierDeclStatement	int * numPar ;	181:1:4073:4085	3149698	0	True				
ANR	3149702	IdentifierDecl	* numPar		3149698	0					
ANR	3149703	IdentifierDeclType	int *		3149698	0					
ANR	3149704	Identifier	numPar		3149698	1					
ANR	3149705	IdentifierDeclStatement	"int numNodes , i , j , k ;"	182:1:4088:4106	3149698	1	True				
ANR	3149706	IdentifierDecl	numNodes		3149698	0					
ANR	3149707	IdentifierDeclType	int		3149698	0					
ANR	3149708	Identifier	numNodes		3149698	1					
ANR	3149709	IdentifierDecl	i		3149698	1					
ANR	3149710	IdentifierDeclType	int		3149698	0					
ANR	3149711	Identifier	i		3149698	1					
ANR	3149712	IdentifierDecl	j		3149698	2					
ANR	3149713	IdentifierDeclType	int		3149698	0					
ANR	3149714	Identifier	j		3149698	1					
ANR	3149715	IdentifierDecl	k		3149698	3					
ANR	3149716	IdentifierDeclType	int		3149698	0					
ANR	3149717	Identifier	k		3149698	1					
ANR	3149718	ExpressionStatement	numPar = getParentCountVector ( )	185:1:4163:4194	3149698	2	True				
ANR	3149719	AssignmentExpression	numPar = getParentCountVector ( )		3149698	0		=			
ANR	3149720	Identifier	numPar		3149698	0					
ANR	3149721	CallExpression	getParentCountVector ( )		3149698	1					
ANR	3149722	Callee	getParentCountVector		3149698	0					
ANR	3149723	Identifier	getParentCountVector		3149698	0					
ANR	3149724	ArgumentList			3149698	1					
ANR	3149725	IfStatement	if ( NULL == numPar )		3149698	3					
ANR	3149726	Condition	NULL == numPar	186:5:4201:4212	3149698	0	True				
ANR	3149727	EqualityExpression	NULL == numPar		3149698	0		==			
ANR	3149728	Identifier	NULL		3149698	0					
ANR	3149729	Identifier	numPar		3149698	1					
ANR	3149730	ThrowStatement	"throw ""Dag::getEligPlot, numPar is NULL"" ;"	187:2:4218:4258	3149698	1	True				
ANR	3149731	PrimaryExpression	"""Dag::getEligPlot, numPar is NULL"""		3149698	0					
ANR	3149732	ExpressionStatement	numNodes = getNumNodes ( )	190:1:4290:4314	3149698	4	True				
ANR	3149733	AssignmentExpression	numNodes = getNumNodes ( )		3149698	0		=			
ANR	3149734	Identifier	numNodes		3149698	0					
ANR	3149735	CallExpression	getNumNodes ( )		3149698	1					
ANR	3149736	Callee	getNumNodes		3149698	0					
ANR	3149737	Identifier	getNumNodes		3149698	0					
ANR	3149738	ArgumentList			3149698	1					
ANR	3149739	IdentifierDeclStatement	int * elig = new int [ numNodes + 1 ] ;	193:1:4351:4383	3149698	5	True				
ANR	3149740	IdentifierDecl	* elig = new int [ numNodes + 1 ]		3149698	0					
ANR	3149741	IdentifierDeclType	int *		3149698	0					
ANR	3149742	Identifier	elig		3149698	1					
ANR	3149743	AssignmentExpression	* elig = new int [ numNodes + 1 ]		3149698	2		=			
ANR	3149744	Identifier	elig		3149698	0					
ANR	3149745	AdditiveExpression	numNodes + 1		3149698	1		+			
ANR	3149746	Identifier	numNodes		3149698	0					
ANR	3149747	PrimaryExpression	1		3149698	1					
ANR	3149748	IfStatement	if ( NULL == elig )		3149698	6					
ANR	3149749	Condition	NULL == elig	194:5:4390:4399	3149698	0	True				
ANR	3149750	EqualityExpression	NULL == elig		3149698	0		==			
ANR	3149751	Identifier	NULL		3149698	0					
ANR	3149752	Identifier	elig		3149698	1					
ANR	3149753	ThrowStatement	"throw ""Dag::getEligPlot, elig is NULL"" ;"	195:2:4405:4443	3149698	1	True				
ANR	3149754	PrimaryExpression	"""Dag::getEligPlot, elig is NULL"""		3149698	0					
ANR	3149755	ForStatement	for ( i = 0 ; i < numNodes ; i ++ )		3149698	7					
ANR	3149756	ForInit	i = 0 ;	198:6:4529:4532	3149698	0	True				
ANR	3149757	AssignmentExpression	i = 0		3149698	0		=			
ANR	3149758	Identifier	i		3149698	0					
ANR	3149759	PrimaryExpression	0		3149698	1					
ANR	3149760	Condition	i < numNodes	198:11:4534:4543	3149698	1	True				
ANR	3149761	RelationalExpression	i < numNodes		3149698	0		<			
ANR	3149762	Identifier	i		3149698	0					
ANR	3149763	Identifier	numNodes		3149698	1					
ANR	3149764	PostIncDecOperationExpression	i ++	198:23:4546:4548	3149698	2	True				
ANR	3149765	Identifier	i		3149698	0					
ANR	3149766	IncDec	++		3149698	1					
ANR	3149767	CompoundStatement		19:29:481:481	3149698	3					
ANR	3149768	ExpressionStatement	elig [ i ] = 0	201:2:4680:4691	3149698	0	True				
ANR	3149769	AssignmentExpression	elig [ i ] = 0		3149698	0		=			
ANR	3149770	ArrayIndexing	elig [ i ]		3149698	0					
ANR	3149771	Identifier	elig		3149698	0					
ANR	3149772	Identifier	i		3149698	1					
ANR	3149773	PrimaryExpression	0		3149698	1					
ANR	3149774	ForStatement	for ( j = 0 ; j < numNodes ; j ++ )		3149698	1					
ANR	3149775	ForInit	j = 0 ;	202:7:4700:4703	3149698	0	True				
ANR	3149776	AssignmentExpression	j = 0		3149698	0		=			
ANR	3149777	Identifier	j		3149698	0					
ANR	3149778	PrimaryExpression	0		3149698	1					
ANR	3149779	Condition	j < numNodes	202:12:4705:4714	3149698	1	True				
ANR	3149780	RelationalExpression	j < numNodes		3149698	0		<			
ANR	3149781	Identifier	j		3149698	0					
ANR	3149782	Identifier	numNodes		3149698	1					
ANR	3149783	PostIncDecOperationExpression	j ++	202:24:4717:4719	3149698	2	True				
ANR	3149784	Identifier	j		3149698	0					
ANR	3149785	IncDec	++		3149698	1					
ANR	3149786	CompoundStatement		23:30:652:652	3149698	3					
ANR	3149787	IfStatement	if ( 0 == numPar [ j ] )		3149698	0					
ANR	3149788	Condition	0 == numPar [ j ]	203:7:4732:4743	3149698	0	True				
ANR	3149789	EqualityExpression	0 == numPar [ j ]		3149698	0		==			
ANR	3149790	PrimaryExpression	0		3149698	0					
ANR	3149791	ArrayIndexing	numPar [ j ]		3149698	1					
ANR	3149792	Identifier	numPar		3149698	0					
ANR	3149793	Identifier	j		3149698	1					
ANR	3149794	ExpressionStatement	elig [ i ] ++	204:4:4751:4760	3149698	1	True				
ANR	3149795	PostIncDecOperationExpression	elig [ i ] ++		3149698	0					
ANR	3149796	ArrayIndexing	elig [ i ]		3149698	0					
ANR	3149797	Identifier	elig		3149698	0					
ANR	3149798	Identifier	i		3149698	1					
ANR	3149799	IncDec	++		3149698	1					
ANR	3149800	ExpressionStatement		205:3:4765:4765	3149698	2	True				
ANR	3149801	ExpressionStatement	numPar [ schedule [ i ] ] = - 1	208:2:4817:4843	3149698	3	True				
ANR	3149802	AssignmentExpression	numPar [ schedule [ i ] ] = - 1		3149698	0		=			
ANR	3149803	ArrayIndexing	numPar [ schedule [ i ] ]		3149698	0					
ANR	3149804	Identifier	numPar		3149698	0					
ANR	3149805	ArrayIndexing	schedule [ i ]		3149698	1					
ANR	3149806	Identifier	schedule		3149698	0					
ANR	3149807	Identifier	i		3149698	1					
ANR	3149808	UnaryOperationExpression	- 1		3149698	1					
ANR	3149809	UnaryOperator	-		3149698	0					
ANR	3149810	PrimaryExpression	1		3149698	1					
ANR	3149811	ExpressionStatement	k = getNumArcs ( schedule [ i ] )	211:2:4873:4902	3149698	4	True				
ANR	3149812	AssignmentExpression	k = getNumArcs ( schedule [ i ] )		3149698	0		=			
ANR	3149813	Identifier	k		3149698	0					
ANR	3149814	CallExpression	getNumArcs ( schedule [ i ] )		3149698	1					
ANR	3149815	Callee	getNumArcs		3149698	0					
ANR	3149816	Identifier	getNumArcs		3149698	0					
ANR	3149817	ArgumentList	schedule [ i ]		3149698	1					
ANR	3149818	Argument	schedule [ i ]		3149698	0					
ANR	3149819	ArrayIndexing	schedule [ i ]		3149698	0					
ANR	3149820	Identifier	schedule		3149698	0					
ANR	3149821	Identifier	i		3149698	1					
ANR	3149822	ForStatement	for ( j = 0 ; j < k ; j ++ )		3149698	5					
ANR	3149823	ForInit	j = 0 ;	212:7:4911:4914	3149698	0	True				
ANR	3149824	AssignmentExpression	j = 0		3149698	0		=			
ANR	3149825	Identifier	j		3149698	0					
ANR	3149826	PrimaryExpression	0		3149698	1					
ANR	3149827	Condition	j < k	212:12:4916:4918	3149698	1	True				
ANR	3149828	RelationalExpression	j < k		3149698	0		<			
ANR	3149829	Identifier	j		3149698	0					
ANR	3149830	Identifier	k		3149698	1					
ANR	3149831	PostIncDecOperationExpression	j ++	212:17:4921:4923	3149698	2	True				
ANR	3149832	Identifier	j		3149698	0					
ANR	3149833	IncDec	++		3149698	1					
ANR	3149834	ExpressionStatement	"numPar [ getArc ( schedule [ i ] , j ) ] --"	213:3:4930:4968	3149698	3	True				
ANR	3149835	PostIncDecOperationExpression	"numPar [ getArc ( schedule [ i ] , j ) ] --"		3149698	0					
ANR	3149836	ArrayIndexing	"numPar [ getArc ( schedule [ i ] , j ) ]"		3149698	0					
ANR	3149837	Identifier	numPar		3149698	0					
ANR	3149838	CallExpression	"getArc ( schedule [ i ] , j )"		3149698	1					
ANR	3149839	Callee	getArc		3149698	0					
ANR	3149840	Identifier	getArc		3149698	0					
ANR	3149841	ArgumentList	schedule [ i ]		3149698	1					
ANR	3149842	Argument	schedule [ i ]		3149698	0					
ANR	3149843	ArrayIndexing	schedule [ i ]		3149698	0					
ANR	3149844	Identifier	schedule		3149698	0					
ANR	3149845	Identifier	i		3149698	1					
ANR	3149846	Argument	j		3149698	1					
ANR	3149847	Identifier	j		3149698	0					
ANR	3149848	IncDec	--		3149698	1					
ANR	3149849	ExpressionStatement		214:2:4972:4972	3149698	8	True				
ANR	3149850	ExpressionStatement	elig [ numNodes ] = 0	217:1:4985:5001	3149698	9	True				
ANR	3149851	AssignmentExpression	elig [ numNodes ] = 0		3149698	0		=			
ANR	3149852	ArrayIndexing	elig [ numNodes ]		3149698	0					
ANR	3149853	Identifier	elig		3149698	0					
ANR	3149854	Identifier	numNodes		3149698	1					
ANR	3149855	PrimaryExpression	0		3149698	1					
ANR	3149856	ExpressionStatement	"printf ( ""Eligibility plot: "" )"	220:0:5019:5047	3149698	10	True				
ANR	3149857	CallExpression	"printf ( ""Eligibility plot: "" )"		3149698	0					
ANR	3149858	Callee	printf		3149698	0					
ANR	3149859	Identifier	printf		3149698	0					
ANR	3149860	ArgumentList	"""Eligibility plot: """		3149698	1					
ANR	3149861	Argument	"""Eligibility plot: """		3149698	0					
ANR	3149862	PrimaryExpression	"""Eligibility plot: """		3149698	0					
ANR	3149863	ForStatement	for ( i = 0 ; i <= numNodes ; i ++ )		3149698	11					
ANR	3149864	ForInit	i = 0 ;	221:5:5054:5057	3149698	0	True				
ANR	3149865	AssignmentExpression	i = 0		3149698	0		=			
ANR	3149866	Identifier	i		3149698	0					
ANR	3149867	PrimaryExpression	0		3149698	1					
ANR	3149868	Condition	i <= numNodes	221:10:5059:5069	3149698	1	True				
ANR	3149869	RelationalExpression	i <= numNodes		3149698	0		<=			
ANR	3149870	Identifier	i		3149698	0					
ANR	3149871	Identifier	numNodes		3149698	1					
ANR	3149872	PostIncDecOperationExpression	i ++	221:23:5072:5074	3149698	2	True				
ANR	3149873	Identifier	i		3149698	0					
ANR	3149874	IncDec	++		3149698	1					
ANR	3149875	ExpressionStatement	"printf ( ""%d "" , elig [ i ] )"	222:1:5079:5102	3149698	3	True				
ANR	3149876	CallExpression	"printf ( ""%d "" , elig [ i ] )"		3149698	0					
ANR	3149877	Callee	printf		3149698	0					
ANR	3149878	Identifier	printf		3149698	0					
ANR	3149879	ArgumentList	"""%d """		3149698	1					
ANR	3149880	Argument	"""%d """		3149698	0					
ANR	3149881	PrimaryExpression	"""%d """		3149698	0					
ANR	3149882	Argument	elig [ i ]		3149698	1					
ANR	3149883	ArrayIndexing	elig [ i ]		3149698	0					
ANR	3149884	Identifier	elig		3149698	0					
ANR	3149885	Identifier	i		3149698	1					
ANR	3149886	ExpressionStatement	"printf ( ""\\n"" )"	223:0:5104:5116	3149698	12	True				
ANR	3149887	CallExpression	"printf ( ""\\n"" )"		3149698	0					
ANR	3149888	Callee	printf		3149698	0					
ANR	3149889	Identifier	printf		3149698	0					
ANR	3149890	ArgumentList	"""\\n"""		3149698	1					
ANR	3149891	Argument	"""\\n"""		3149698	0					
ANR	3149892	PrimaryExpression	"""\\n"""		3149698	0					
ANR	3149893	ReturnStatement	return elig ;	226:1:5127:5138	3149698	13	True				
ANR	3149894	Identifier	elig		3149698	0					
ANR	3149895	ReturnType	int *		3149698	1					
ANR	3149896	Identifier	Dag :: getEligPlot		3149698	2					
ANR	3149897	ParameterList	const int * schedule		3149698	3					
ANR	3149898	Parameter	const int * schedule	179:23:4042:4060	3149698	0	True				
ANR	3149899	ParameterType	const int *		3149698	0					
ANR	3149900	Identifier	schedule		3149698	1					
ANR	3149901	CFGEntryNode	ENTRY		3149698		True				
ANR	3149902	CFGExitNode	EXIT		3149698		True				
ANR	3149903	CFGExceptionNode	EXCEPTION		3149698		True				
ANR	3149904	CFGExceptionNode	EXCEPTION		3149698		True				
ANR	3149905	CFGExceptionNode	EXCEPTION		3149698		True				
ANR	3149906	Symbol	* numPar		3149698						
ANR	3149907	Symbol	* * i		3149698						
ANR	3149908	Symbol	numPar		3149698						
ANR	3149909	Symbol	NULL		3149698						
ANR	3149910	Symbol	* elig		3149698						
ANR	3149911	Symbol	i		3149698						
ANR	3149912	Symbol	j		3149698						
ANR	3149913	Symbol	getParentCountVector		3149698						
ANR	3149914	Symbol	elig		3149698						
ANR	3149915	Symbol	k		3149698						
ANR	3149916	Symbol	* schedule		3149698						
ANR	3149917	Symbol	schedule		3149698						
ANR	3149918	Symbol	getNumArcs		3149698						
ANR	3149919	Symbol	numNodes		3149698						
ANR	3149920	Symbol	getNumNodes		3149698						
ANR	3149921	Symbol	* getArc		3149698						
ANR	3149922	Symbol	* i		3149698						
ANR	3149923	Symbol	* j		3149698						
ANR	3149924	Symbol	getArc		3149698						
ANR	3149925	Symbol	* numNodes		3149698						
ANR	3149926	Symbol	* * schedule		3149698						
ANR	3149927	Function	Dag_test	243:0:5277:5761							
ANR	3149928	FunctionDef	Dag_test ()		3149927	0					
ANR	3149929	CompoundStatement		244:0:5297:5761	3149927	0					
ANR	3149930	ExpressionStatement	"printf ( ""[[[ BEGIN testing Dag\\n"" )"	245:1:5300:5333	3149927	0	True				
ANR	3149931	CallExpression	"printf ( ""[[[ BEGIN testing Dag\\n"" )"		3149927	0					
ANR	3149932	Callee	printf		3149927	0					
ANR	3149933	Identifier	printf		3149927	0					
ANR	3149934	ArgumentList	"""[[[ BEGIN testing Dag\\n"""		3149927	1					
ANR	3149935	Argument	"""[[[ BEGIN testing Dag\\n"""		3149927	0					
ANR	3149936	PrimaryExpression	"""[[[ BEGIN testing Dag\\n"""		3149927	0					
ANR	3149937	IdentifierDeclStatement	Dag * g ;	247:1:5337:5343	3149927	1	True				
ANR	3149938	IdentifierDecl	* g		3149927	0					
ANR	3149939	IdentifierDeclType	Dag *		3149927	0					
ANR	3149940	Identifier	g		3149927	1					
ANR	3149941	Statement	g	249:1:5347:5347	3149927	2	True				
ANR	3149942	Statement	=	249:3:5349:5349	3149927	3	True				
ANR	3149943	Statement	new	249:5:5351:5353	3149927	4	True				
ANR	3149944	ExpressionStatement	Dag	249:9:5355:5358	3149927	5	True				
ANR	3149945	Identifier	Dag		3149927	0					
ANR	3149946	ExpressionStatement	g -> addNode ( )	250:1:5361:5373	3149927	6	True				
ANR	3149947	CallExpression	g -> addNode ( )		3149927	0					
ANR	3149948	Callee	g -> addNode		3149927	0					
ANR	3149949	PtrMemberAccess	g -> addNode		3149927	0					
ANR	3149950	Identifier	g		3149927	0					
ANR	3149951	Identifier	addNode		3149927	1					
ANR	3149952	ArgumentList			3149927	1					
ANR	3149953	ExpressionStatement	g -> addNode ( )	251:1:5376:5388	3149927	7	True				
ANR	3149954	CallExpression	g -> addNode ( )		3149927	0					
ANR	3149955	Callee	g -> addNode		3149927	0					
ANR	3149956	PtrMemberAccess	g -> addNode		3149927	0					
ANR	3149957	Identifier	g		3149927	0					
ANR	3149958	Identifier	addNode		3149927	1					
ANR	3149959	ArgumentList			3149927	1					
ANR	3149960	ExpressionStatement	g -> addNode ( )	252:1:5391:5403	3149927	8	True				
ANR	3149961	CallExpression	g -> addNode ( )		3149927	0					
ANR	3149962	Callee	g -> addNode		3149927	0					
ANR	3149963	PtrMemberAccess	g -> addNode		3149927	0					
ANR	3149964	Identifier	g		3149927	0					
ANR	3149965	Identifier	addNode		3149927	1					
ANR	3149966	ArgumentList			3149927	1					
ANR	3149967	ExpressionStatement	g -> addNode ( )	253:1:5406:5418	3149927	9	True				
ANR	3149968	CallExpression	g -> addNode ( )		3149927	0					
ANR	3149969	Callee	g -> addNode		3149927	0					
ANR	3149970	PtrMemberAccess	g -> addNode		3149927	0					
ANR	3149971	Identifier	g		3149927	0					
ANR	3149972	Identifier	addNode		3149927	1					
ANR	3149973	ArgumentList			3149927	1					
ANR	3149974	ExpressionStatement	"g -> addArc ( 0 , 1 )"	254:1:5421:5435	3149927	10	True				
ANR	3149975	CallExpression	"g -> addArc ( 0 , 1 )"		3149927	0					
ANR	3149976	Callee	g -> addArc		3149927	0					
ANR	3149977	PtrMemberAccess	g -> addArc		3149927	0					
ANR	3149978	Identifier	g		3149927	0					
ANR	3149979	Identifier	addArc		3149927	1					
ANR	3149980	ArgumentList	0		3149927	1					
ANR	3149981	Argument	0		3149927	0					
ANR	3149982	PrimaryExpression	0		3149927	0					
ANR	3149983	Argument	1		3149927	1					
ANR	3149984	PrimaryExpression	1		3149927	0					
ANR	3149985	ExpressionStatement	"g -> addArc ( 1 , 2 )"	255:1:5438:5452	3149927	11	True				
ANR	3149986	CallExpression	"g -> addArc ( 1 , 2 )"		3149927	0					
ANR	3149987	Callee	g -> addArc		3149927	0					
ANR	3149988	PtrMemberAccess	g -> addArc		3149927	0					
ANR	3149989	Identifier	g		3149927	0					
ANR	3149990	Identifier	addArc		3149927	1					
ANR	3149991	ArgumentList	1		3149927	1					
ANR	3149992	Argument	1		3149927	0					
ANR	3149993	PrimaryExpression	1		3149927	0					
ANR	3149994	Argument	2		3149927	1					
ANR	3149995	PrimaryExpression	2		3149927	0					
ANR	3149996	ExpressionStatement	"g -> addArc ( 2 , 3 )"	256:1:5455:5469	3149927	12	True				
ANR	3149997	CallExpression	"g -> addArc ( 2 , 3 )"		3149927	0					
ANR	3149998	Callee	g -> addArc		3149927	0					
ANR	3149999	PtrMemberAccess	g -> addArc		3149927	0					
ANR	3150000	Identifier	g		3149927	0					
ANR	3150001	Identifier	addArc		3149927	1					
ANR	3150002	ArgumentList	2		3149927	1					
ANR	3150003	Argument	2		3149927	0					
ANR	3150004	PrimaryExpression	2		3149927	0					
ANR	3150005	Argument	3		3149927	1					
ANR	3150006	PrimaryExpression	3		3149927	0					
ANR	3150007	ExpressionStatement	g -> closeTransitively ( )	257:1:5472:5494	3149927	13	True				
ANR	3150008	CallExpression	g -> closeTransitively ( )		3149927	0					
ANR	3150009	Callee	g -> closeTransitively		3149927	0					
ANR	3150010	PtrMemberAccess	g -> closeTransitively		3149927	0					
ANR	3150011	Identifier	g		3149927	0					
ANR	3150012	Identifier	closeTransitively		3149927	1					
ANR	3150013	ArgumentList			3149927	1					
ANR	3150014	ExpressionStatement	g -> printAsText ( )	258:1:5497:5513	3149927	14	True				
ANR	3150015	CallExpression	g -> printAsText ( )		3149927	0					
ANR	3150016	Callee	g -> printAsText		3149927	0					
ANR	3150017	PtrMemberAccess	g -> printAsText		3149927	0					
ANR	3150018	Identifier	g		3149927	0					
ANR	3150019	Identifier	printAsText		3149927	1					
ANR	3150020	ArgumentList			3149927	1					
ANR	3150021	ExpressionStatement	g -> skeletonize ( )	259:1:5516:5532	3149927	15	True				
ANR	3150022	CallExpression	g -> skeletonize ( )		3149927	0					
ANR	3150023	Callee	g -> skeletonize		3149927	0					
ANR	3150024	PtrMemberAccess	g -> skeletonize		3149927	0					
ANR	3150025	Identifier	g		3149927	0					
ANR	3150026	Identifier	skeletonize		3149927	1					
ANR	3150027	ArgumentList			3149927	1					
ANR	3150028	ExpressionStatement	g -> printAsText ( )	260:1:5535:5551	3149927	16	True				
ANR	3150029	CallExpression	g -> printAsText ( )		3149927	0					
ANR	3150030	Callee	g -> printAsText		3149927	0					
ANR	3150031	PtrMemberAccess	g -> printAsText		3149927	0					
ANR	3150032	Identifier	g		3149927	0					
ANR	3150033	Identifier	printAsText		3149927	1					
ANR	3150034	ArgumentList			3149927	1					
ANR	3150035	IdentifierDeclStatement	int * p = g -> getParentCountVector ( ) ;	261:1:5554:5586	3149927	17	True				
ANR	3150036	IdentifierDecl	* p = g -> getParentCountVector ( )		3149927	0					
ANR	3150037	IdentifierDeclType	int *		3149927	0					
ANR	3150038	Identifier	p		3149927	1					
ANR	3150039	AssignmentExpression	* p = g -> getParentCountVector ( )		3149927	2		=			
ANR	3150040	Identifier	p		3149927	0					
ANR	3150041	CallExpression	g -> getParentCountVector ( )		3149927	1					
ANR	3150042	Callee	g -> getParentCountVector		3149927	0					
ANR	3150043	PtrMemberAccess	g -> getParentCountVector		3149927	0					
ANR	3150044	Identifier	g		3149927	0					
ANR	3150045	Identifier	getParentCountVector		3149927	1					
ANR	3150046	ArgumentList			3149927	1					
ANR	3150047	IfStatement	if ( ! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 ) )		3149927	18					
ANR	3150048	Condition	! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 )	262:5:5593:5636	3149927	0	True				
ANR	3150049	UnaryOperationExpression	! ( p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1 )		3149927	0					
ANR	3150050	UnaryOperator	!		3149927	0					
ANR	3150051	AndExpression	p [ 0 ] == 0 && p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1		3149927	1		&&			
ANR	3150052	EqualityExpression	p [ 0 ] == 0		3149927	0		==			
ANR	3150053	ArrayIndexing	p [ 0 ]		3149927	0					
ANR	3150054	Identifier	p		3149927	0					
ANR	3150055	PrimaryExpression	0		3149927	1					
ANR	3150056	PrimaryExpression	0		3149927	1					
ANR	3150057	AndExpression	p [ 1 ] == 1 && p [ 2 ] == 1 && p [ 3 ] == 1		3149927	1		&&			
ANR	3150058	EqualityExpression	p [ 1 ] == 1		3149927	0		==			
ANR	3150059	ArrayIndexing	p [ 1 ]		3149927	0					
ANR	3150060	Identifier	p		3149927	0					
ANR	3150061	PrimaryExpression	1		3149927	1					
ANR	3150062	PrimaryExpression	1		3149927	1					
ANR	3150063	AndExpression	p [ 2 ] == 1 && p [ 3 ] == 1		3149927	1		&&			
ANR	3150064	EqualityExpression	p [ 2 ] == 1		3149927	0		==			
ANR	3150065	ArrayIndexing	p [ 2 ]		3149927	0					
ANR	3150066	Identifier	p		3149927	0					
ANR	3150067	PrimaryExpression	2		3149927	1					
ANR	3150068	PrimaryExpression	1		3149927	1					
ANR	3150069	EqualityExpression	p [ 3 ] == 1		3149927	1		==			
ANR	3150070	ArrayIndexing	p [ 3 ]		3149927	0					
ANR	3150071	Identifier	p		3149927	0					
ANR	3150072	PrimaryExpression	3		3149927	1					
ANR	3150073	PrimaryExpression	1		3149927	1					
ANR	3150074	ThrowStatement	"throw ""Dag_test, 1"" ;"	263:2:5642:5661	3149927	1	True				
ANR	3150075	PrimaryExpression	"""Dag_test, 1"""		3149927	0					
ANR	3150076	IfStatement	if ( 1 != g -> getNumSinks ( ) )		3149927	19					
ANR	3150077	Condition	1 != g -> getNumSinks ( )	264:5:5668:5688	3149927	0	True				
ANR	3150078	EqualityExpression	1 != g -> getNumSinks ( )		3149927	0		!=			
ANR	3150079	PrimaryExpression	1		3149927	0					
ANR	3150080	CallExpression	g -> getNumSinks ( )		3149927	1					
ANR	3150081	Callee	g -> getNumSinks		3149927	0					
ANR	3150082	PtrMemberAccess	g -> getNumSinks		3149927	0					
ANR	3150083	Identifier	g		3149927	0					
ANR	3150084	Identifier	getNumSinks		3149927	1					
ANR	3150085	ArgumentList			3149927	1					
ANR	3150086	ThrowStatement	"throw ""Dag_test, 2"" ;"	265:2:5694:5713	3149927	1	True				
ANR	3150087	PrimaryExpression	"""Dag_test, 2"""		3149927	0					
ANR	3150088	Statement	delete	266:1:5716:5721	3149927	20	True				
ANR	3150089	ExpressionStatement	g	266:8:5723:5724	3149927	21	True				
ANR	3150090	Identifier	g		3149927	0					
ANR	3150091	ExpressionStatement	"printf ( ""]]] END testing Dag\\n"" )"	268:1:5728:5759	3149927	22	True				
ANR	3150092	CallExpression	"printf ( ""]]] END testing Dag\\n"" )"		3149927	0					
ANR	3150093	Callee	printf		3149927	0					
ANR	3150094	Identifier	printf		3149927	0					
ANR	3150095	ArgumentList	"""]]] END testing Dag\\n"""		3149927	1					
ANR	3150096	Argument	"""]]] END testing Dag\\n"""		3149927	0					
ANR	3150097	PrimaryExpression	"""]]] END testing Dag\\n"""		3149927	0					
ANR	3150098	ReturnType	void		3149927	1					
ANR	3150099	Identifier	Dag_test		3149927	2					
ANR	3150100	ParameterList			3149927	3					
ANR	3150101	CFGEntryNode	ENTRY		3149927		True				
ANR	3150102	CFGExitNode	EXIT		3149927		True				
ANR	3150103	CFGExceptionNode	EXCEPTION		3149927		True				
ANR	3150104	CFGExceptionNode	EXCEPTION		3149927		True				
ANR	3150105	CFGExceptionNode	EXCEPTION		3149927		True				
ANR	3150106	Symbol	p		3149927						
ANR	3150107	Symbol	* g		3149927						
ANR	3150108	Symbol	g		3149927						
ANR	3150109	Symbol	g -> getNumSinks		3149927						
ANR	3150110	Symbol	* p		3149927						
ANR	3150111	Symbol	g -> getParentCountVector		3149927						
