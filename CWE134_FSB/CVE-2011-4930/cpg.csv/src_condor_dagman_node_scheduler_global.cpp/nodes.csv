command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	3163403	File	data/converged/CVE-2011-4930_htcondor/src_condor_dagman_node_scheduler_global.cpp								
ANR	3163404	Function	alert	43:0:1005:1070							
ANR	3163405	FunctionDef	alert (const char * s)		3163404	0					
ANR	3163406	CompoundStatement		44:0:1031:1070	3163404	0					
ANR	3163407	ExpressionStatement	"fprintf ( stderr , "">>>>ERROR %s\\n"" , s )"	45:1:1034:1068	3163404	0	True				
ANR	3163408	CallExpression	"fprintf ( stderr , "">>>>ERROR %s\\n"" , s )"		3163404	0					
ANR	3163409	Callee	fprintf		3163404	0					
ANR	3163410	Identifier	fprintf		3163404	0					
ANR	3163411	ArgumentList	stderr		3163404	1					
ANR	3163412	Argument	stderr		3163404	0					
ANR	3163413	Identifier	stderr		3163404	0					
ANR	3163414	Argument	""">>>>ERROR %s\\n"""		3163404	1					
ANR	3163415	PrimaryExpression	""">>>>ERROR %s\\n"""		3163404	0					
ANR	3163416	Argument	s		3163404	2					
ANR	3163417	Identifier	s		3163404	0					
ANR	3163418	ReturnType	void		3163404	1					
ANR	3163419	Identifier	alert		3163404	2					
ANR	3163420	ParameterList	const char * s		3163404	3					
ANR	3163421	Parameter	const char * s	43:11:1016:1028	3163404	0	True				
ANR	3163422	ParameterType	const char *		3163404	0					
ANR	3163423	Identifier	s		3163404	1					
ANR	3163424	CFGEntryNode	ENTRY		3163404		True				
ANR	3163425	CFGExitNode	EXIT		3163404		True				
ANR	3163426	Symbol	s		3163404						
ANR	3163427	Symbol	stderr		3163404						
ANR	3163428	Function	randExponential	63:0:1341:1637							
ANR	3163429	FunctionDef	randExponential (float mean)		3163428	0					
ANR	3163430	CompoundStatement		64:0:1377:1637	3163428	0					
ANR	3163431	IdentifierDeclStatement	double r ;	69:1:1530:1538	3163428	0	True				
ANR	3163432	IdentifierDecl	r		3163428	0					
ANR	3163433	IdentifierDeclType	double		3163428	0					
ANR	3163434	Identifier	r		3163428	1					
ANR	3163435	ExpressionStatement	r = rand ( )	70:1:1541:1551	3163428	1	True				
ANR	3163436	AssignmentExpression	r = rand ( )		3163428	0		=			
ANR	3163437	Identifier	r		3163428	0					
ANR	3163438	CallExpression	rand ( )		3163428	1					
ANR	3163439	Callee	rand		3163428	0					
ANR	3163440	Identifier	rand		3163428	0					
ANR	3163441	ArgumentList			3163428	1					
ANR	3163442	ExpressionStatement	r += 1	71:1:1554:1560	3163428	2	True				
ANR	3163443	AssignmentExpression	r += 1		3163428	0		+=			
ANR	3163444	Identifier	r		3163428	0					
ANR	3163445	PrimaryExpression	1		3163428	1					
ANR	3163446	IdentifierDeclStatement	double d = RAND_MAX ;	72:1:1563:1582	3163428	3	True				
ANR	3163447	IdentifierDecl	d = RAND_MAX		3163428	0					
ANR	3163448	IdentifierDeclType	double		3163428	0					
ANR	3163449	Identifier	d		3163428	1					
ANR	3163450	AssignmentExpression	d = RAND_MAX		3163428	2		=			
ANR	3163451	Identifier	RAND_MAX		3163428	0					
ANR	3163452	Identifier	RAND_MAX		3163428	1					
ANR	3163453	ExpressionStatement	d += 2	73:1:1585:1591	3163428	4	True				
ANR	3163454	AssignmentExpression	d += 2		3163428	0		+=			
ANR	3163455	Identifier	d		3163428	0					
ANR	3163456	PrimaryExpression	2		3163428	1					
ANR	3163457	ExpressionStatement	r = r / d	74:1:1594:1601	3163428	5	True				
ANR	3163458	AssignmentExpression	r = r / d		3163428	0		=			
ANR	3163459	Identifier	r		3163428	0					
ANR	3163460	MultiplicativeExpression	r / d		3163428	1		/			
ANR	3163461	Identifier	r		3163428	0					
ANR	3163462	Identifier	d		3163428	1					
ANR	3163463	ReturnStatement	return - mean * logf ( ( float ) r ) ;	76:1:1605:1635	3163428	6	True				
ANR	3163464	MultiplicativeExpression	- mean * logf ( ( float ) r )		3163428	0		*			
ANR	3163465	UnaryOperationExpression	- mean		3163428	0					
ANR	3163466	UnaryOperator	-		3163428	0					
ANR	3163467	Identifier	mean		3163428	1					
ANR	3163468	CallExpression	logf ( ( float ) r )		3163428	1					
ANR	3163469	Callee	logf		3163428	0					
ANR	3163470	Identifier	logf		3163428	0					
ANR	3163471	ArgumentList	( float ) r		3163428	1					
ANR	3163472	Argument	( float ) r		3163428	0					
ANR	3163473	CastExpression	( float ) r		3163428	0					
ANR	3163474	CastTarget	float		3163428	0					
ANR	3163475	Identifier	r		3163428	1					
ANR	3163476	ReturnType	float		3163428	1					
ANR	3163477	Identifier	randExponential		3163428	2					
ANR	3163478	ParameterList	float mean		3163428	3					
ANR	3163479	Parameter	float mean	63:23:1364:1373	3163428	0	True				
ANR	3163480	ParameterType	float		3163428	0					
ANR	3163481	Identifier	mean		3163428	1					
ANR	3163482	CFGEntryNode	ENTRY		3163428		True				
ANR	3163483	CFGExitNode	EXIT		3163428		True				
ANR	3163484	Symbol	rand		3163428						
ANR	3163485	Symbol	RAND_MAX		3163428						
ANR	3163486	Symbol	logf		3163428						
ANR	3163487	Symbol	r		3163428						
ANR	3163488	Symbol	d		3163428						
ANR	3163489	Symbol	mean		3163428						
ANR	3163490	Function	randNormal	94:0:1942:2365							
ANR	3163491	FunctionDef	"randNormal (float mean , float stdev)"		3163490	0					
ANR	3163492	CompoundStatement		95:0:1986:2365	3163490	0					
ANR	3163493	IdentifierDeclStatement	"double V_1 , V_2 , S , X_1 ;"	96:1:1989:2012	3163490	0	True				
ANR	3163494	IdentifierDecl	V_1		3163490	0					
ANR	3163495	IdentifierDeclType	double		3163490	0					
ANR	3163496	Identifier	V_1		3163490	1					
ANR	3163497	IdentifierDecl	V_2		3163490	1					
ANR	3163498	IdentifierDeclType	double		3163490	0					
ANR	3163499	Identifier	V_2		3163490	1					
ANR	3163500	IdentifierDecl	S		3163490	2					
ANR	3163501	IdentifierDeclType	double		3163490	0					
ANR	3163502	Identifier	S		3163490	1					
ANR	3163503	IdentifierDecl	X_1		3163490	3					
ANR	3163504	IdentifierDeclType	double		3163490	0					
ANR	3163505	Identifier	X_1		3163490	1					
ANR	3163506	DoStatement	do		3163490	1					
ANR	3163507	CompoundStatement		5:4:94:94	3163490	0					
ANR	3163508	ExpressionStatement	V_1 = ( 2 * ( double ) rand ( ) ) / RAND_MAX - 1	100:2:2085:2123	3163490	0	True				
ANR	3163509	AssignmentExpression	V_1 = ( 2 * ( double ) rand ( ) ) / RAND_MAX - 1		3163490	0		=			
ANR	3163510	Identifier	V_1		3163490	0					
ANR	3163511	AdditiveExpression	( 2 * ( double ) rand ( ) ) / RAND_MAX - 1		3163490	1		-			
ANR	3163512	MultiplicativeExpression	( 2 * ( double ) rand ( ) ) / RAND_MAX		3163490	0		/			
ANR	3163513	MultiplicativeExpression	2 * ( double ) rand ( )		3163490	0		*			
ANR	3163514	PrimaryExpression	2		3163490	0					
ANR	3163515	CastExpression	( double ) rand ( )		3163490	1					
ANR	3163516	CastTarget	double		3163490	0					
ANR	3163517	CallExpression	rand ( )		3163490	1					
ANR	3163518	Callee	rand		3163490	0					
ANR	3163519	Identifier	rand		3163490	0					
ANR	3163520	ArgumentList			3163490	1					
ANR	3163521	Identifier	RAND_MAX		3163490	1					
ANR	3163522	PrimaryExpression	1		3163490	1					
ANR	3163523	ExpressionStatement	V_2 = ( 2 * ( double ) rand ( ) ) / RAND_MAX - 1	101:2:2148:2186	3163490	1	True				
ANR	3163524	AssignmentExpression	V_2 = ( 2 * ( double ) rand ( ) ) / RAND_MAX - 1		3163490	0		=			
ANR	3163525	Identifier	V_2		3163490	0					
ANR	3163526	AdditiveExpression	( 2 * ( double ) rand ( ) ) / RAND_MAX - 1		3163490	1		-			
ANR	3163527	MultiplicativeExpression	( 2 * ( double ) rand ( ) ) / RAND_MAX		3163490	0		/			
ANR	3163528	MultiplicativeExpression	2 * ( double ) rand ( )		3163490	0		*			
ANR	3163529	PrimaryExpression	2		3163490	0					
ANR	3163530	CastExpression	( double ) rand ( )		3163490	1					
ANR	3163531	CastTarget	double		3163490	0					
ANR	3163532	CallExpression	rand ( )		3163490	1					
ANR	3163533	Callee	rand		3163490	0					
ANR	3163534	Identifier	rand		3163490	0					
ANR	3163535	ArgumentList			3163490	1					
ANR	3163536	Identifier	RAND_MAX		3163490	1					
ANR	3163537	PrimaryExpression	1		3163490	1					
ANR	3163538	ExpressionStatement	S = ( V_1 * V_1 ) + ( V_2 * V_2 )	102:2:2211:2234	3163490	2	True				
ANR	3163539	AssignmentExpression	S = ( V_1 * V_1 ) + ( V_2 * V_2 )		3163490	0		=			
ANR	3163540	Identifier	S		3163490	0					
ANR	3163541	AdditiveExpression	( V_1 * V_1 ) + ( V_2 * V_2 )		3163490	1		+			
ANR	3163542	MultiplicativeExpression	V_1 * V_1		3163490	0		*			
ANR	3163543	Identifier	V_1		3163490	0					
ANR	3163544	Identifier	V_1		3163490	1					
ANR	3163545	MultiplicativeExpression	V_2 * V_2		3163490	1		*			
ANR	3163546	Identifier	V_2		3163490	0					
ANR	3163547	Identifier	V_2		3163490	1					
ANR	3163548	Condition	S >= 1	103:10:2246:2251	3163490	1	True				
ANR	3163549	RelationalExpression	S >= 1		3163490	0		>=			
ANR	3163550	Identifier	S		3163490	0					
ANR	3163551	PrimaryExpression	1		3163490	1					
ANR	3163552	IfStatement	if ( 0 == S )		3163490	2					
ANR	3163553	Condition	0 == S	105:5:2262:2265	3163490	0	True				
ANR	3163554	EqualityExpression	0 == S		3163490	0		==			
ANR	3163555	PrimaryExpression	0		3163490	0					
ANR	3163556	Identifier	S		3163490	1					
ANR	3163557	ExpressionStatement	X_1 = 0	106:2:2271:2278	3163490	1	True				
ANR	3163558	AssignmentExpression	X_1 = 0		3163490	0		=			
ANR	3163559	Identifier	X_1		3163490	0					
ANR	3163560	PrimaryExpression	0		3163490	1					
ANR	3163561	ElseStatement	else		3163490	0					
ANR	3163562	ExpressionStatement	X_1 = V_1 * sqrt ( - 2 * log ( S ) / S )	108:2:2288:2317	3163490	0	True				
ANR	3163563	AssignmentExpression	X_1 = V_1 * sqrt ( - 2 * log ( S ) / S )		3163490	0		=			
ANR	3163564	Identifier	X_1		3163490	0					
ANR	3163565	MultiplicativeExpression	V_1 * sqrt ( - 2 * log ( S ) / S )		3163490	1		*			
ANR	3163566	Identifier	V_1		3163490	0					
ANR	3163567	CallExpression	sqrt ( - 2 * log ( S ) / S )		3163490	1					
ANR	3163568	Callee	sqrt		3163490	0					
ANR	3163569	Identifier	sqrt		3163490	0					
ANR	3163570	ArgumentList	- 2 * log ( S ) / S		3163490	1					
ANR	3163571	Argument	- 2 * log ( S ) / S		3163490	0					
ANR	3163572	MultiplicativeExpression	- 2 * log ( S ) / S		3163490	0		*			
ANR	3163573	UnaryOperationExpression	- 2		3163490	0					
ANR	3163574	UnaryOperator	-		3163490	0					
ANR	3163575	PrimaryExpression	2		3163490	1					
ANR	3163576	MultiplicativeExpression	log ( S ) / S		3163490	1		/			
ANR	3163577	CallExpression	log ( S )		3163490	0					
ANR	3163578	Callee	log		3163490	0					
ANR	3163579	Identifier	log		3163490	0					
ANR	3163580	ArgumentList	S		3163490	1					
ANR	3163581	Argument	S		3163490	0					
ANR	3163582	Identifier	S		3163490	0					
ANR	3163583	Identifier	S		3163490	1					
ANR	3163584	ReturnStatement	return ( float ) ( X_1 * stdev + mean ) ;	111:1:2331:2363	3163490	3	True				
ANR	3163585	CastExpression	( float ) ( X_1 * stdev + mean )		3163490	0					
ANR	3163586	CastTarget	float		3163490	0					
ANR	3163587	AdditiveExpression	X_1 * stdev + mean		3163490	1		+			
ANR	3163588	MultiplicativeExpression	X_1 * stdev		3163490	0		*			
ANR	3163589	Identifier	X_1		3163490	0					
ANR	3163590	Identifier	stdev		3163490	1					
ANR	3163591	Identifier	mean		3163490	1					
ANR	3163592	ReturnType	float		3163490	1					
ANR	3163593	Identifier	randNormal		3163490	2					
ANR	3163594	ParameterList	"float mean , float stdev"		3163490	3					
ANR	3163595	Parameter	float mean	94:18:1960:1969	3163490	0	True				
ANR	3163596	ParameterType	float		3163490	0					
ANR	3163597	Identifier	mean		3163490	1					
ANR	3163598	Parameter	float stdev	94:30:1972:1982	3163490	1	True				
ANR	3163599	ParameterType	float		3163490	0					
ANR	3163600	Identifier	stdev		3163490	1					
ANR	3163601	CFGEntryNode	ENTRY		3163490		True				
ANR	3163602	CFGExitNode	EXIT		3163490		True				
ANR	3163603	Symbol	RAND_MAX		3163490						
ANR	3163604	Symbol	rand		3163490						
ANR	3163605	Symbol	S		3163490						
ANR	3163606	Symbol	log		3163490						
ANR	3163607	Symbol	sqrt		3163490						
ANR	3163608	Symbol	mean		3163490						
ANR	3163609	Symbol	V_2		3163490						
ANR	3163610	Symbol	V_1		3163490						
ANR	3163611	Symbol	X_1		3163490						
ANR	3163612	Symbol	stdev		3163490						
ANR	3163613	Function	strlwr	131:0:2646:2810							
ANR	3163614	FunctionDef	strlwr (char * tab)		3163613	0					
ANR	3163615	CompoundStatement		132:0:2671:2810	3163613	0					
ANR	3163616	IdentifierDeclStatement	char * beg = tab ;	133:1:2674:2688	3163613	0	True				
ANR	3163617	IdentifierDecl	* beg = tab		3163613	0					
ANR	3163618	IdentifierDeclType	char *		3163613	0					
ANR	3163619	Identifier	beg		3163613	1					
ANR	3163620	AssignmentExpression	* beg = tab		3163613	2		=			
ANR	3163621	Identifier	tab		3163613	0					
ANR	3163622	Identifier	tab		3163613	1					
ANR	3163623	IfStatement	if ( NULL != tab )		3163613	1					
ANR	3163624	Condition	NULL != tab	134:5:2695:2703	3163613	0	True				
ANR	3163625	EqualityExpression	NULL != tab		3163613	0		!=			
ANR	3163626	Identifier	NULL		3163613	0					
ANR	3163627	Identifier	tab		3163613	1					
ANR	3163628	CompoundStatement		3:17:35:35	3163613	1					
ANR	3163629	WhileStatement	while ( * tab )		3163613	0					
ANR	3163630	Condition	* tab	135:9:2718:2721	3163613	0	True				
ANR	3163631	UnaryOperationExpression	* tab		3163613	0					
ANR	3163632	UnaryOperator	*		3163613	0					
ANR	3163633	Identifier	tab		3163613	1					
ANR	3163634	CompoundStatement		4:16:53:53	3163613	1					
ANR	3163635	IfStatement	if ( isupper ( * tab ) )		3163613	0					
ANR	3163636	Condition	isupper ( * tab )	136:7:2734:2746	3163613	0	True				
ANR	3163637	CallExpression	isupper ( * tab )		3163613	0					
ANR	3163638	Callee	isupper		3163613	0					
ANR	3163639	Identifier	isupper		3163613	0					
ANR	3163640	ArgumentList	* tab		3163613	1					
ANR	3163641	Argument	* tab		3163613	0					
ANR	3163642	UnaryOperationExpression	* tab		3163613	0					
ANR	3163643	UnaryOperator	*		3163613	0					
ANR	3163644	Identifier	tab		3163613	1					
ANR	3163645	ExpressionStatement	* tab = tolower ( * tab )	137:4:2754:2776	3163613	1	True				
ANR	3163646	AssignmentExpression	* tab = tolower ( * tab )		3163613	0		=			
ANR	3163647	UnaryOperationExpression	* tab		3163613	0					
ANR	3163648	UnaryOperator	*		3163613	0					
ANR	3163649	Identifier	tab		3163613	1					
ANR	3163650	CallExpression	tolower ( * tab )		3163613	1					
ANR	3163651	Callee	tolower		3163613	0					
ANR	3163652	Identifier	tolower		3163613	0					
ANR	3163653	ArgumentList	* tab		3163613	1					
ANR	3163654	Argument	* tab		3163613	0					
ANR	3163655	UnaryOperationExpression	* tab		3163613	0					
ANR	3163656	UnaryOperator	*		3163613	0					
ANR	3163657	Identifier	tab		3163613	1					
ANR	3163658	ExpressionStatement	tab ++	138:3:2781:2786	3163613	1	True				
ANR	3163659	PostIncDecOperationExpression	tab ++		3163613	0					
ANR	3163660	Identifier	tab		3163613	0					
ANR	3163661	IncDec	++		3163613	1					
ANR	3163662	ExpressionStatement		139:3:2791:2791	3163613	1	True				
ANR	3163663	ExpressionStatement		140:2:2795:2795	3163613	2	True				
ANR	3163664	ReturnStatement	return beg ;	141:1:2798:2808	3163613	3	True				
ANR	3163665	Identifier	beg		3163613	0					
ANR	3163666	ReturnType	char *		3163613	1					
ANR	3163667	Identifier	strlwr		3163613	2					
ANR	3163668	ParameterList	char * tab		3163613	3					
ANR	3163669	Parameter	char * tab	131:13:2659:2668	3163613	0	True				
ANR	3163670	ParameterType	char *		3163613	0					
ANR	3163671	Identifier	tab		3163613	1					
ANR	3163672	CFGEntryNode	ENTRY		3163613		True				
ANR	3163673	CFGExitNode	EXIT		3163613		True				
ANR	3163674	Symbol	NULL		3163613						
ANR	3163675	Symbol	tab		3163613						
ANR	3163676	Symbol	tolower		3163613						
ANR	3163677	Symbol	beg		3163613						
ANR	3163678	Symbol	isupper		3163613						
ANR	3163679	Symbol	* tab		3163613						
ANR	3163680	Function	stricmp	163:0:3199:3294							
ANR	3163681	FunctionDef	"stricmp (const char * string1 , const char * string2)"		3163680	0					
ANR	3163682	CompoundStatement		164:0:3255:3294	3163680	0					
ANR	3163683	ReturnStatement	"return strcasecmp ( string1 , string2 ) ;"	165:1:3258:3292	3163680	0	True				
ANR	3163684	CallExpression	"strcasecmp ( string1 , string2 )"		3163680	0					
ANR	3163685	Callee	strcasecmp		3163680	0					
ANR	3163686	Identifier	strcasecmp		3163680	0					
ANR	3163687	ArgumentList	string1		3163680	1					
ANR	3163688	Argument	string1		3163680	0					
ANR	3163689	Identifier	string1		3163680	0					
ANR	3163690	Argument	string2		3163680	1					
ANR	3163691	Identifier	string2		3163680	0					
ANR	3163692	ReturnType	int		3163680	1					
ANR	3163693	Identifier	stricmp		3163680	2					
ANR	3163694	ParameterList	"const char * string1 , const char * string2"		3163680	3					
ANR	3163695	Parameter	const char * string1	163:13:3212:3230	3163680	0	True				
ANR	3163696	ParameterType	const char *		3163680	0					
ANR	3163697	Identifier	string1		3163680	1					
ANR	3163698	Parameter	const char * string2	163:34:3233:3251	3163680	1	True				
ANR	3163699	ParameterType	const char *		3163680	0					
ANR	3163700	Identifier	string2		3163680	1					
ANR	3163701	CFGEntryNode	ENTRY		3163680		True				
ANR	3163702	CFGExitNode	EXIT		3163680		True				
ANR	3163703	Symbol	string1		3163680						
ANR	3163704	Symbol	string2		3163680						
ANR	3163705	Symbol	strcasecmp		3163680						
ANR	3163706	Function	strnicmp	187:0:3714:3824							
ANR	3163707	FunctionDef	"strnicmp (const char * string1 , const char * string2 , int len)"		3163706	0					
ANR	3163708	CompoundStatement		188:0:3780:3824	3163706	0					
ANR	3163709	ReturnStatement	"return strncasecmp ( string1 , string2 , len ) ;"	189:1:3783:3822	3163706	0	True				
ANR	3163710	CallExpression	"strncasecmp ( string1 , string2 , len )"		3163706	0					
ANR	3163711	Callee	strncasecmp		3163706	0					
ANR	3163712	Identifier	strncasecmp		3163706	0					
ANR	3163713	ArgumentList	string1		3163706	1					
ANR	3163714	Argument	string1		3163706	0					
ANR	3163715	Identifier	string1		3163706	0					
ANR	3163716	Argument	string2		3163706	1					
ANR	3163717	Identifier	string2		3163706	0					
ANR	3163718	Argument	len		3163706	2					
ANR	3163719	Identifier	len		3163706	0					
ANR	3163720	ReturnType	int		3163706	1					
ANR	3163721	Identifier	strnicmp		3163706	2					
ANR	3163722	ParameterList	"const char * string1 , const char * string2 , int len"		3163706	3					
ANR	3163723	Parameter	const char * string1	187:14:3728:3746	3163706	0	True				
ANR	3163724	ParameterType	const char *		3163706	0					
ANR	3163725	Identifier	string1		3163706	1					
ANR	3163726	Parameter	const char * string2	187:35:3749:3767	3163706	1	True				
ANR	3163727	ParameterType	const char *		3163706	0					
ANR	3163728	Identifier	string2		3163706	1					
ANR	3163729	Parameter	int len	187:56:3770:3776	3163706	2	True				
ANR	3163730	ParameterType	int		3163706	0					
ANR	3163731	Identifier	len		3163706	1					
ANR	3163732	CFGEntryNode	ENTRY		3163706		True				
ANR	3163733	CFGExitNode	EXIT		3163706		True				
ANR	3163734	Symbol	len		3163706						
ANR	3163735	Symbol	string1		3163706						
ANR	3163736	Symbol	string2		3163706						
ANR	3163737	Symbol	strncasecmp		3163706						
ANR	3163738	Function	skipWhite	207:0:4045:4178							
ANR	3163739	FunctionDef	skipWhite (char * tab)		3163738	0					
ANR	3163740	CompoundStatement		208:0:4072:4178	3163738	0					
ANR	3163741	IfStatement	if ( NULL == tab )		3163738	0					
ANR	3163742	Condition	NULL == tab	209:5:4079:4087	3163738	0	True				
ANR	3163743	EqualityExpression	NULL == tab		3163738	0		==			
ANR	3163744	Identifier	NULL		3163738	0					
ANR	3163745	Identifier	tab		3163738	1					
ANR	3163746	ReturnStatement	return NULL ;	210:2:4093:4104	3163738	1	True				
ANR	3163747	Identifier	NULL		3163738	0					
ANR	3163748	WhileStatement	while ( * tab == ' ' || * tab == '\\t' || * tab == '\\n' )		3163738	1					
ANR	3163749	Condition	* tab == ' ' || * tab == '\\t' || * tab == '\\n'	212:8:4115:4151	3163738	0	True				
ANR	3163750	OrExpression	* tab == ' ' || * tab == '\\t' || * tab == '\\n'		3163738	0		||			
ANR	3163751	EqualityExpression	* tab == ' '		3163738	0		==			
ANR	3163752	UnaryOperationExpression	* tab		3163738	0					
ANR	3163753	UnaryOperator	*		3163738	0					
ANR	3163754	Identifier	tab		3163738	1					
ANR	3163755	PrimaryExpression	' '		3163738	1					
ANR	3163756	OrExpression	* tab == '\\t' || * tab == '\\n'		3163738	1		||			
ANR	3163757	EqualityExpression	* tab == '\\t'		3163738	0		==			
ANR	3163758	UnaryOperationExpression	* tab		3163738	0					
ANR	3163759	UnaryOperator	*		3163738	0					
ANR	3163760	Identifier	tab		3163738	1					
ANR	3163761	PrimaryExpression	'\\t'		3163738	1					
ANR	3163762	EqualityExpression	* tab == '\\n'		3163738	1		==			
ANR	3163763	UnaryOperationExpression	* tab		3163738	0					
ANR	3163764	UnaryOperator	*		3163738	0					
ANR	3163765	Identifier	tab		3163738	1					
ANR	3163766	PrimaryExpression	'\\n'		3163738	1					
ANR	3163767	ExpressionStatement	tab ++	213:2:4157:4162	3163738	1	True				
ANR	3163768	PostIncDecOperationExpression	tab ++		3163738	0					
ANR	3163769	Identifier	tab		3163738	0					
ANR	3163770	IncDec	++		3163738	1					
ANR	3163771	ReturnStatement	return tab ;	215:1:4166:4176	3163738	2	True				
ANR	3163772	Identifier	tab		3163738	0					
ANR	3163773	ReturnType	char *		3163738	1					
ANR	3163774	Identifier	skipWhite		3163738	2					
ANR	3163775	ParameterList	char * tab		3163738	3					
ANR	3163776	Parameter	char * tab	207:16:4061:4069	3163738	0	True				
ANR	3163777	ParameterType	char *		3163738	0					
ANR	3163778	Identifier	tab		3163738	1					
ANR	3163779	CFGEntryNode	ENTRY		3163738		True				
ANR	3163780	CFGExitNode	EXIT		3163738		True				
ANR	3163781	Symbol	NULL		3163738						
ANR	3163782	Symbol	tab		3163738						
ANR	3163783	Symbol	* tab		3163738						
ANR	3163784	Function	skipNonWhite	232:0:4391:4526							
ANR	3163785	FunctionDef	skipNonWhite (char * tab)		3163784	0					
ANR	3163786	CompoundStatement		233:0:4421:4526	3163784	0					
ANR	3163787	IfStatement	if ( NULL == tab )		3163784	0					
ANR	3163788	Condition	NULL == tab	234:5:4428:4436	3163784	0	True				
ANR	3163789	EqualityExpression	NULL == tab		3163784	0		==			
ANR	3163790	Identifier	NULL		3163784	0					
ANR	3163791	Identifier	tab		3163784	1					
ANR	3163792	ReturnStatement	return NULL ;	235:2:4442:4453	3163784	1	True				
ANR	3163793	Identifier	NULL		3163784	0					
ANR	3163794	WhileStatement	while ( * tab != ' ' && * tab != '\\t' && * tab != '\\n' )		3163784	1					
ANR	3163795	Condition	* tab != ' ' && * tab != '\\t' && * tab != '\\n'	237:8:4464:4500	3163784	0	True				
ANR	3163796	AndExpression	* tab != ' ' && * tab != '\\t' && * tab != '\\n'		3163784	0		&&			
ANR	3163797	EqualityExpression	* tab != ' '		3163784	0		!=			
ANR	3163798	UnaryOperationExpression	* tab		3163784	0					
ANR	3163799	UnaryOperator	*		3163784	0					
ANR	3163800	Identifier	tab		3163784	1					
ANR	3163801	PrimaryExpression	' '		3163784	1					
ANR	3163802	AndExpression	* tab != '\\t' && * tab != '\\n'		3163784	1		&&			
ANR	3163803	EqualityExpression	* tab != '\\t'		3163784	0		!=			
ANR	3163804	UnaryOperationExpression	* tab		3163784	0					
ANR	3163805	UnaryOperator	*		3163784	0					
ANR	3163806	Identifier	tab		3163784	1					
ANR	3163807	PrimaryExpression	'\\t'		3163784	1					
ANR	3163808	EqualityExpression	* tab != '\\n'		3163784	1		!=			
ANR	3163809	UnaryOperationExpression	* tab		3163784	0					
ANR	3163810	UnaryOperator	*		3163784	0					
ANR	3163811	Identifier	tab		3163784	1					
ANR	3163812	PrimaryExpression	'\\n'		3163784	1					
ANR	3163813	ExpressionStatement	tab ++	238:2:4505:4510	3163784	1	True				
ANR	3163814	PostIncDecOperationExpression	tab ++		3163784	0					
ANR	3163815	Identifier	tab		3163784	0					
ANR	3163816	IncDec	++		3163784	1					
ANR	3163817	ReturnStatement	return tab ;	240:1:4514:4524	3163784	2	True				
ANR	3163818	Identifier	tab		3163784	0					
ANR	3163819	ReturnType	char *		3163784	1					
ANR	3163820	Identifier	skipNonWhite		3163784	2					
ANR	3163821	ParameterList	char * tab		3163784	3					
ANR	3163822	Parameter	char * tab	232:19:4410:4418	3163784	0	True				
ANR	3163823	ParameterType	char *		3163784	0					
ANR	3163824	Identifier	tab		3163784	1					
ANR	3163825	CFGEntryNode	ENTRY		3163784		True				
ANR	3163826	CFGExitNode	EXIT		3163784		True				
ANR	3163827	Symbol	NULL		3163784						
ANR	3163828	Symbol	tab		3163784						
ANR	3163829	Symbol	* tab		3163784						
ANR	3163830	Function	global_test	259:0:4802:5222							
ANR	3163831	FunctionDef	global_test ()		3163830	0					
ANR	3163832	CompoundStatement		260:0:4825:5222	3163830	0					
ANR	3163833	ForStatement	for ( int i = 0 ; i < 1000 ; i ++ )		3163830	0					
ANR	3163834	ForInit	int i = 0 ;	262:6:4936:4943	3163830	0	True				
ANR	3163835	IdentifierDeclStatement	int i = 0 ;		3163830	0					
ANR	3163836	IdentifierDecl	i = 0		3163830	0					
ANR	3163837	IdentifierDeclType	int		3163830	0					
ANR	3163838	Identifier	i		3163830	1					
ANR	3163839	AssignmentExpression	i = 0		3163830	2		=			
ANR	3163840	Identifier	i		3163830	0					
ANR	3163841	PrimaryExpression	0		3163830	1					
ANR	3163842	Condition	i < 1000	262:15:4945:4950	3163830	1	True				
ANR	3163843	RelationalExpression	i < 1000		3163830	0		<			
ANR	3163844	Identifier	i		3163830	0					
ANR	3163845	PrimaryExpression	1000		3163830	1					
ANR	3163846	PostIncDecOperationExpression	i ++	262:23:4953:4955	3163830	2	True				
ANR	3163847	Identifier	i		3163830	0					
ANR	3163848	IncDec	++		3163830	1					
ANR	3163849	ExpressionStatement	"printf ( ""%f\\t%f\\n"" , randNormal ( 30 , 10 ) , randExponential ( 10 ) )"	263:2:4961:5019	3163830	3	True				
ANR	3163850	CallExpression	"printf ( ""%f\\t%f\\n"" , randNormal ( 30 , 10 ) , randExponential ( 10 ) )"		3163830	0					
ANR	3163851	Callee	printf		3163830	0					
ANR	3163852	Identifier	printf		3163830	0					
ANR	3163853	ArgumentList	"""%f\\t%f\\n"""		3163830	1					
ANR	3163854	Argument	"""%f\\t%f\\n"""		3163830	0					
ANR	3163855	PrimaryExpression	"""%f\\t%f\\n"""		3163830	0					
ANR	3163856	Argument	"randNormal ( 30 , 10 )"		3163830	1					
ANR	3163857	CallExpression	"randNormal ( 30 , 10 )"		3163830	0					
ANR	3163858	Callee	randNormal		3163830	0					
ANR	3163859	Identifier	randNormal		3163830	0					
ANR	3163860	ArgumentList	30		3163830	1					
ANR	3163861	Argument	30		3163830	0					
ANR	3163862	PrimaryExpression	30		3163830	0					
ANR	3163863	Argument	10		3163830	1					
ANR	3163864	PrimaryExpression	10		3163830	0					
ANR	3163865	Argument	randExponential ( 10 )		3163830	2					
ANR	3163866	CallExpression	randExponential ( 10 )		3163830	0					
ANR	3163867	Callee	randExponential		3163830	0					
ANR	3163868	Identifier	randExponential		3163830	0					
ANR	3163869	ArgumentList	10		3163830	1					
ANR	3163870	Argument	10		3163830	0					
ANR	3163871	PrimaryExpression	10		3163830	0					
ANR	3163872	ExpressionStatement	"alert ( ""test"" )"	264:1:5022:5035	3163830	1	True				
ANR	3163873	CallExpression	"alert ( ""test"" )"		3163830	0					
ANR	3163874	Callee	alert		3163830	0					
ANR	3163875	Identifier	alert		3163830	0					
ANR	3163876	ArgumentList	"""test"""		3163830	1					
ANR	3163877	Argument	"""test"""		3163830	0					
ANR	3163878	PrimaryExpression	"""test"""		3163830	0					
ANR	3163879	IdentifierDeclStatement	"char * str = strdup ( ""1Ux:"" ) ;"	266:1:5039:5065	3163830	2	True				
ANR	3163880	IdentifierDecl	"* str = strdup ( ""1Ux:"" )"		3163830	0					
ANR	3163881	IdentifierDeclType	char *		3163830	0					
ANR	3163882	Identifier	str		3163830	1					
ANR	3163883	AssignmentExpression	"* str = strdup ( ""1Ux:"" )"		3163830	2		=			
ANR	3163884	Identifier	str		3163830	0					
ANR	3163885	CallExpression	"strdup ( ""1Ux:"" )"		3163830	1					
ANR	3163886	Callee	strdup		3163830	0					
ANR	3163887	Identifier	strdup		3163830	0					
ANR	3163888	ArgumentList	"""1Ux:"""		3163830	1					
ANR	3163889	Argument	"""1Ux:"""		3163830	0					
ANR	3163890	PrimaryExpression	"""1Ux:"""		3163830	0					
ANR	3163891	ExpressionStatement	"printf ( ""%s\\n"" , strlwr ( str ) )"	267:1:5068:5094	3163830	3	True				
ANR	3163892	CallExpression	"printf ( ""%s\\n"" , strlwr ( str ) )"		3163830	0					
ANR	3163893	Callee	printf		3163830	0					
ANR	3163894	Identifier	printf		3163830	0					
ANR	3163895	ArgumentList	"""%s\\n"""		3163830	1					
ANR	3163896	Argument	"""%s\\n"""		3163830	0					
ANR	3163897	PrimaryExpression	"""%s\\n"""		3163830	0					
ANR	3163898	Argument	strlwr ( str )		3163830	1					
ANR	3163899	CallExpression	strlwr ( str )		3163830	0					
ANR	3163900	Callee	strlwr		3163830	0					
ANR	3163901	Identifier	strlwr		3163830	0					
ANR	3163902	ArgumentList	str		3163830	1					
ANR	3163903	Argument	str		3163830	0					
ANR	3163904	Identifier	str		3163830	0					
ANR	3163905	ExpressionStatement	"printf ( ""%d\\n"" , stricmp ( ""A"" , ""a"" ) )"	269:1:5098:5134	3163830	4	True				
ANR	3163906	CallExpression	"printf ( ""%d\\n"" , stricmp ( ""A"" , ""a"" ) )"		3163830	0					
ANR	3163907	Callee	printf		3163830	0					
ANR	3163908	Identifier	printf		3163830	0					
ANR	3163909	ArgumentList	"""%d\\n"""		3163830	1					
ANR	3163910	Argument	"""%d\\n"""		3163830	0					
ANR	3163911	PrimaryExpression	"""%d\\n"""		3163830	0					
ANR	3163912	Argument	"stricmp ( ""A"" , ""a"" )"		3163830	1					
ANR	3163913	CallExpression	"stricmp ( ""A"" , ""a"" )"		3163830	0					
ANR	3163914	Callee	stricmp		3163830	0					
ANR	3163915	Identifier	stricmp		3163830	0					
ANR	3163916	ArgumentList	"""A"""		3163830	1					
ANR	3163917	Argument	"""A"""		3163830	0					
ANR	3163918	PrimaryExpression	"""A"""		3163830	0					
ANR	3163919	Argument	"""a"""		3163830	1					
ANR	3163920	PrimaryExpression	"""a"""		3163830	0					
ANR	3163921	ExpressionStatement	"printf ( ""%d\\n"" , stricmp ( ""B"" , ""a"" ) )"	270:1:5137:5173	3163830	5	True				
ANR	3163922	CallExpression	"printf ( ""%d\\n"" , stricmp ( ""B"" , ""a"" ) )"		3163830	0					
ANR	3163923	Callee	printf		3163830	0					
ANR	3163924	Identifier	printf		3163830	0					
ANR	3163925	ArgumentList	"""%d\\n"""		3163830	1					
ANR	3163926	Argument	"""%d\\n"""		3163830	0					
ANR	3163927	PrimaryExpression	"""%d\\n"""		3163830	0					
ANR	3163928	Argument	"stricmp ( ""B"" , ""a"" )"		3163830	1					
ANR	3163929	CallExpression	"stricmp ( ""B"" , ""a"" )"		3163830	0					
ANR	3163930	Callee	stricmp		3163830	0					
ANR	3163931	Identifier	stricmp		3163830	0					
ANR	3163932	ArgumentList	"""B"""		3163830	1					
ANR	3163933	Argument	"""B"""		3163830	0					
ANR	3163934	PrimaryExpression	"""B"""		3163830	0					
ANR	3163935	Argument	"""a"""		3163830	1					
ANR	3163936	PrimaryExpression	"""a"""		3163830	0					
ANR	3163937	ExpressionStatement	"printf ( ""%d\\n"" , stricmp ( ""aabDDD"" , ""Edsa"" ) )"	271:1:5176:5220	3163830	6	True				
ANR	3163938	CallExpression	"printf ( ""%d\\n"" , stricmp ( ""aabDDD"" , ""Edsa"" ) )"		3163830	0					
ANR	3163939	Callee	printf		3163830	0					
ANR	3163940	Identifier	printf		3163830	0					
ANR	3163941	ArgumentList	"""%d\\n"""		3163830	1					
ANR	3163942	Argument	"""%d\\n"""		3163830	0					
ANR	3163943	PrimaryExpression	"""%d\\n"""		3163830	0					
ANR	3163944	Argument	"stricmp ( ""aabDDD"" , ""Edsa"" )"		3163830	1					
ANR	3163945	CallExpression	"stricmp ( ""aabDDD"" , ""Edsa"" )"		3163830	0					
ANR	3163946	Callee	stricmp		3163830	0					
ANR	3163947	Identifier	stricmp		3163830	0					
ANR	3163948	ArgumentList	"""aabDDD"""		3163830	1					
ANR	3163949	Argument	"""aabDDD"""		3163830	0					
ANR	3163950	PrimaryExpression	"""aabDDD"""		3163830	0					
ANR	3163951	Argument	"""Edsa"""		3163830	1					
ANR	3163952	PrimaryExpression	"""Edsa"""		3163830	0					
ANR	3163953	ReturnType	void		3163830	1					
ANR	3163954	Identifier	global_test		3163830	2					
ANR	3163955	ParameterList			3163830	3					
ANR	3163956	CFGEntryNode	ENTRY		3163830		True				
ANR	3163957	CFGExitNode	EXIT		3163830		True				
ANR	3163958	Symbol	str		3163830						
ANR	3163959	Symbol	randNormal		3163830						
ANR	3163960	Symbol	strlwr		3163830						
ANR	3163961	Symbol	stricmp		3163830						
ANR	3163962	Symbol	i		3163830						
ANR	3163963	Symbol	strdup		3163830						
ANR	3163964	Symbol	randExponential		3163830						
