command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	2003547	File	data/converged/CVE-2011-4930_htcondor/printf_format.cpp								
ANR	2003548	Function	isFlagChar	29:0:969:1111							
ANR	2003549	FunctionDef	isFlagChar (char c)		2003548	0					
ANR	2003550	CompoundStatement		31:0:1001:1111	2003548	0					
ANR	2003551	SwitchStatement	switch ( c )		2003548	0					
ANR	2003552	Condition	c	32:9:1012:1012	2003548	0	True				
ANR	2003553	Identifier	c		2003548	0					
ANR	2003554	CompoundStatement		2:13:14:14	2003548	1					
ANR	2003555	Label	case '#' :	33:1:1019:1027	2003548	0	True				
ANR	2003556	Label	case '0' :	34:1:1030:1038	2003548	1	True				
ANR	2003557	Label	case '-' :	35:1:1041:1049	2003548	2	True				
ANR	2003558	Label	case ' ' :	36:1:1052:1060	2003548	3	True				
ANR	2003559	Label	case '+' :	37:1:1063:1071	2003548	4	True				
ANR	2003560	Label	case '\\'' :	38:1:1074:1083	2003548	5	True				
ANR	2003561	ReturnStatement	return 1 ;	39:2:1087:1095	2003548	6	True				
ANR	2003562	PrimaryExpression	1		2003548	0					
ANR	2003563	ReturnStatement	return 0 ;	41:1:1101:1109	2003548	1	True				
ANR	2003564	PrimaryExpression	0		2003548	0					
ANR	2003565	ReturnType	static int		2003548	1					
ANR	2003566	Identifier	isFlagChar		2003548	2					
ANR	2003567	ParameterList	char c		2003548	3					
ANR	2003568	Parameter	char c	30:12:992:997	2003548	0	True				
ANR	2003569	ParameterType	char		2003548	0					
ANR	2003570	Identifier	c		2003548	1					
ANR	2003571	CFGEntryNode	ENTRY		2003548		True				
ANR	2003572	CFGExitNode	EXIT		2003548		True				
ANR	2003573	Symbol	c		2003548						
ANR	2003574	Function	isLengthChar	45:0:1117:1271							
ANR	2003575	FunctionDef	isLengthChar (char c)		2003574	0					
ANR	2003576	CompoundStatement		47:0:1151:1271	2003574	0					
ANR	2003577	SwitchStatement	switch ( c )		2003574	0					
ANR	2003578	Condition	c	48:9:1162:1162	2003574	0	True				
ANR	2003579	Identifier	c		2003574	0					
ANR	2003580	CompoundStatement		2:13:14:14	2003574	1					
ANR	2003581	Label	case 'h' :	49:1:1169:1177	2003574	0	True				
ANR	2003582	Label	case 'l' :	50:1:1180:1188	2003574	1	True				
ANR	2003583	Label	case 'L' :	51:1:1191:1199	2003574	2	True				
ANR	2003584	Label	case 'q' :	52:1:1202:1210	2003574	3	True				
ANR	2003585	Label	case 'j' :	53:1:1213:1221	2003574	4	True				
ANR	2003586	Label	case 'z' :	54:1:1224:1232	2003574	5	True				
ANR	2003587	Label	case 't' :	55:1:1235:1243	2003574	6	True				
ANR	2003588	ReturnStatement	return 1 ;	56:2:1247:1255	2003574	7	True				
ANR	2003589	PrimaryExpression	1		2003574	0					
ANR	2003590	ReturnStatement	return 0 ;	58:1:1261:1269	2003574	1	True				
ANR	2003591	PrimaryExpression	0		2003574	0					
ANR	2003592	ReturnType	static int		2003574	1					
ANR	2003593	Identifier	isLengthChar		2003574	2					
ANR	2003594	ParameterList	char c		2003574	3					
ANR	2003595	Parameter	char c	46:14:1142:1147	2003574	0	True				
ANR	2003596	ParameterType	char		2003574	0					
ANR	2003597	Identifier	c		2003574	1					
ANR	2003598	CFGEntryNode	ENTRY		2003574		True				
ANR	2003599	CFGExitNode	EXIT		2003574		True				
ANR	2003600	Symbol	c		2003574						
ANR	2003601	Function	consumeInt	70:0:1656:2107							
ANR	2003602	FunctionDef	consumeInt (const char * * str)		2003601	0					
ANR	2003603	CompoundStatement		72:0:1698:2107	2003601	0					
ANR	2003604	IdentifierDeclStatement	int rval = 0 ;	73:1:1701:1713	2003601	0	True				
ANR	2003605	IdentifierDecl	rval = 0		2003601	0					
ANR	2003606	IdentifierDeclType	int		2003601	0					
ANR	2003607	Identifier	rval		2003601	1					
ANR	2003608	AssignmentExpression	rval = 0		2003601	2		=			
ANR	2003609	Identifier	rval		2003601	0					
ANR	2003610	PrimaryExpression	0		2003601	1					
ANR	2003611	IdentifierDeclStatement	int digit_val ;	74:1:1716:1729	2003601	1	True				
ANR	2003612	IdentifierDecl	digit_val		2003601	0					
ANR	2003613	IdentifierDeclType	int		2003601	0					
ANR	2003614	Identifier	digit_val		2003601	1					
ANR	2003615	IfStatement	if ( ! str || ! * str )		2003601	2					
ANR	2003616	Condition	! str || ! * str	76:5:1737:1750	2003601	0	True				
ANR	2003617	OrExpression	! str || ! * str		2003601	0		||			
ANR	2003618	UnaryOperationExpression	! str		2003601	0					
ANR	2003619	UnaryOperator	!		2003601	0					
ANR	2003620	Identifier	str		2003601	1					
ANR	2003621	UnaryOperationExpression	! * str		2003601	1					
ANR	2003622	UnaryOperator	!		2003601	0					
ANR	2003623	UnaryOperationExpression	* str		2003601	1					
ANR	2003624	UnaryOperator	*		2003601	0					
ANR	2003625	Identifier	str		2003601	1					
ANR	2003626	CompoundStatement		5:22:55:55	2003601	1					
ANR	2003627	ReturnStatement	return - 1 ;	77:2:1758:1767	2003601	0	True				
ANR	2003628	UnaryOperationExpression	- 1		2003601	0					
ANR	2003629	UnaryOperator	-		2003601	0					
ANR	2003630	PrimaryExpression	1		2003601	1					
ANR	2003631	WhileStatement	while ( isdigit ( * * str ) )		2003601	3					
ANR	2003632	Condition	isdigit ( * * str )	80:8:1781:1794	2003601	0	True				
ANR	2003633	CallExpression	isdigit ( * * str )		2003601	0					
ANR	2003634	Callee	isdigit		2003601	0					
ANR	2003635	Identifier	isdigit		2003601	0					
ANR	2003636	ArgumentList	* * str		2003601	1					
ANR	2003637	Argument	* * str		2003601	0					
ANR	2003638	UnaryOperationExpression	* * str		2003601	0					
ANR	2003639	UnaryOperator	*		2003601	0					
ANR	2003640	UnaryOperationExpression	* str		2003601	1					
ANR	2003641	UnaryOperator	*		2003601	0					
ANR	2003642	Identifier	str		2003601	1					
ANR	2003643	CompoundStatement		9:25:99:99	2003601	1					
ANR	2003644	ExpressionStatement	digit_val = * * str - '0'	84:2:1970:1993	2003601	0	True				
ANR	2003645	AssignmentExpression	digit_val = * * str - '0'		2003601	0		=			
ANR	2003646	Identifier	digit_val		2003601	0					
ANR	2003647	AdditiveExpression	* * str - '0'		2003601	1		-			
ANR	2003648	UnaryOperationExpression	* * str		2003601	0					
ANR	2003649	UnaryOperator	*		2003601	0					
ANR	2003650	UnaryOperationExpression	* str		2003601	1					
ANR	2003651	UnaryOperator	*		2003601	0					
ANR	2003652	Identifier	str		2003601	1					
ANR	2003653	PrimaryExpression	'0'		2003601	1					
ANR	2003654	ExpressionStatement	rval *= 10	85:2:1997:2007	2003601	1	True				
ANR	2003655	AssignmentExpression	rval *= 10		2003601	0		*=			
ANR	2003656	Identifier	rval		2003601	0					
ANR	2003657	PrimaryExpression	10		2003601	1					
ANR	2003658	ExpressionStatement	rval += digit_val	86:2:2011:2028	2003601	2	True				
ANR	2003659	AssignmentExpression	rval += digit_val		2003601	0		+=			
ANR	2003660	Identifier	rval		2003601	0					
ANR	2003661	Identifier	digit_val		2003601	1					
ANR	2003662	ExpressionStatement	( * str ) ++	88:2:2080:2088	2003601	3	True				
ANR	2003663	PostIncDecOperationExpression	( * str ) ++		2003601	0					
ANR	2003664	UnaryOperationExpression	* str		2003601	0					
ANR	2003665	UnaryOperator	*		2003601	0					
ANR	2003666	Identifier	str		2003601	1					
ANR	2003667	IncDec	++		2003601	1					
ANR	2003668	ReturnStatement	return rval ;	90:1:2094:2105	2003601	4	True				
ANR	2003669	Identifier	rval		2003601	0					
ANR	2003670	ReturnType	static int		2003601	1					
ANR	2003671	Identifier	consumeInt		2003601	2					
ANR	2003672	ParameterList	const char * * str		2003601	3					
ANR	2003673	Parameter	const char * * str	71:12:1679:1694	2003601	0	True				
ANR	2003674	ParameterType	const char * *		2003601	0					
ANR	2003675	Identifier	str		2003601	1					
ANR	2003676	CFGEntryNode	ENTRY		2003601		True				
ANR	2003677	CFGExitNode	EXIT		2003601		True				
ANR	2003678	Symbol	str		2003601						
ANR	2003679	Symbol	* * str		2003601						
ANR	2003680	Symbol	rval		2003601						
ANR	2003681	Symbol	digit_val		2003601						
ANR	2003682	Symbol	* str		2003601						
ANR	2003683	Symbol	isdigit		2003601						
ANR	2003684	Function	parsePrintfFormat	120:0:3553:7813							
ANR	2003685	FunctionDef	"parsePrintfFormat (const char * * fmt_p , struct printf_fmt_info * info)"		2003684	0					
ANR	2003686	CompoundStatement		122:0:3627:7813	2003684	0					
ANR	2003687	IfStatement	if ( ! * * fmt_p )		2003684	0					
ANR	2003688	Condition	! * * fmt_p	123:5:3634:3642	2003684	0	True				
ANR	2003689	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003690	UnaryOperator	!		2003684	0					
ANR	2003691	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003692	UnaryOperator	*		2003684	0					
ANR	2003693	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003694	UnaryOperator	*		2003684	0					
ANR	2003695	Identifier	fmt_p		2003684	1					
ANR	2003696	CompoundStatement		2:17:18:18	2003684	1					
ANR	2003697	ReturnStatement	return FALSE ;	124:2:3650:3662	2003684	0	True				
ANR	2003698	Identifier	FALSE		2003684	0					
ANR	2003699	WhileStatement	while ( * * fmt_p && * * fmt_p != '%' )		2003684	1					
ANR	2003700	Condition	* * fmt_p && * * fmt_p != '%'	128:8:3713:3737	2003684	0	True				
ANR	2003701	AndExpression	* * fmt_p && * * fmt_p != '%'		2003684	0		&&			
ANR	2003702	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003703	UnaryOperator	*		2003684	0					
ANR	2003704	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003705	UnaryOperator	*		2003684	0					
ANR	2003706	Identifier	fmt_p		2003684	1					
ANR	2003707	EqualityExpression	* * fmt_p != '%'		2003684	1		!=			
ANR	2003708	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003709	UnaryOperator	*		2003684	0					
ANR	2003710	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003711	UnaryOperator	*		2003684	0					
ANR	2003712	Identifier	fmt_p		2003684	1					
ANR	2003713	PrimaryExpression	'%'		2003684	1					
ANR	2003714	CompoundStatement		7:36:113:113	2003684	1					
ANR	2003715	ExpressionStatement	( * fmt_p ) ++	129:2:3745:3755	2003684	0	True				
ANR	2003716	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2003717	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2003718	UnaryOperator	*		2003684	0					
ANR	2003719	Identifier	fmt_p		2003684	1					
ANR	2003720	IncDec	++		2003684	1					
ANR	2003721	IfStatement	if ( ! * * fmt_p )		2003684	2					
ANR	2003722	Condition	! * * fmt_p	132:5:3787:3795	2003684	0	True				
ANR	2003723	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003724	UnaryOperator	!		2003684	0					
ANR	2003725	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003726	UnaryOperator	*		2003684	0					
ANR	2003727	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003728	UnaryOperator	*		2003684	0					
ANR	2003729	Identifier	fmt_p		2003684	1					
ANR	2003730	CompoundStatement		11:16:170:170	2003684	1					
ANR	2003731	ReturnStatement	return FALSE ;	133:2:3802:3814	2003684	0	True				
ANR	2003732	Identifier	FALSE		2003684	0					
ANR	2003733	ExpressionStatement	( * fmt_p ) ++	136:1:3852:3862	2003684	3	True				
ANR	2003734	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2003735	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2003736	UnaryOperator	*		2003684	0					
ANR	2003737	Identifier	fmt_p		2003684	1					
ANR	2003738	IncDec	++		2003684	1					
ANR	2003739	IfStatement	if ( ! * * fmt_p )		2003684	4					
ANR	2003740	Condition	! * * fmt_p	137:5:3869:3877	2003684	0	True				
ANR	2003741	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003742	UnaryOperator	!		2003684	0					
ANR	2003743	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003744	UnaryOperator	*		2003684	0					
ANR	2003745	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003746	UnaryOperator	*		2003684	0					
ANR	2003747	Identifier	fmt_p		2003684	1					
ANR	2003748	CompoundStatement		16:17:253:253	2003684	1					
ANR	2003749	ReturnStatement	return FALSE ;	138:2:3885:3897	2003684	0	True				
ANR	2003750	Identifier	FALSE		2003684	0					
ANR	2003751	IfStatement	if ( ! info )		2003684	5					
ANR	2003752	Condition	! info	142:5:3952:3957	2003684	0	True				
ANR	2003753	UnaryOperationExpression	! info		2003684	0					
ANR	2003754	UnaryOperator	!		2003684	0					
ANR	2003755	Identifier	info		2003684	1					
ANR	2003756	CompoundStatement		21:14:333:333	2003684	1					
ANR	2003757	ReturnStatement	return FALSE ;	143:2:3965:3977	2003684	0	True				
ANR	2003758	Identifier	FALSE		2003684	0					
ANR	2003759	ExpressionStatement	"memset ( info , '\\0' , sizeof ( struct printf_fmt_info ) )"	145:1:3983:4035	2003684	6	True				
ANR	2003760	CallExpression	"memset ( info , '\\0' , sizeof ( struct printf_fmt_info ) )"		2003684	0					
ANR	2003761	Callee	memset		2003684	0					
ANR	2003762	Identifier	memset		2003684	0					
ANR	2003763	ArgumentList	info		2003684	1					
ANR	2003764	Argument	info		2003684	0					
ANR	2003765	Identifier	info		2003684	0					
ANR	2003766	Argument	'\\0'		2003684	1					
ANR	2003767	PrimaryExpression	'\\0'		2003684	0					
ANR	2003768	Argument	sizeof ( struct printf_fmt_info )		2003684	2					
ANR	2003769	SizeofExpression	sizeof ( struct printf_fmt_info )		2003684	0					
ANR	2003770	Sizeof	sizeof		2003684	0					
ANR	2003771	SizeofOperand	struct printf_fmt_info		2003684	1					
ANR	2003772	WhileStatement	while ( * * fmt_p && isFlagChar ( * * fmt_p ) )		2003684	7					
ANR	2003773	Condition	* * fmt_p && isFlagChar ( * * fmt_p )	148:8:4086:4115	2003684	0	True				
ANR	2003774	AndExpression	* * fmt_p && isFlagChar ( * * fmt_p )		2003684	0		&&			
ANR	2003775	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003776	UnaryOperator	*		2003684	0					
ANR	2003777	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003778	UnaryOperator	*		2003684	0					
ANR	2003779	Identifier	fmt_p		2003684	1					
ANR	2003780	CallExpression	isFlagChar ( * * fmt_p )		2003684	1					
ANR	2003781	Callee	isFlagChar		2003684	0					
ANR	2003782	Identifier	isFlagChar		2003684	0					
ANR	2003783	ArgumentList	* * fmt_p		2003684	1					
ANR	2003784	Argument	* * fmt_p		2003684	0					
ANR	2003785	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003786	UnaryOperator	*		2003684	0					
ANR	2003787	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003788	UnaryOperator	*		2003684	0					
ANR	2003789	Identifier	fmt_p		2003684	1					
ANR	2003790	CompoundStatement		27:41:491:491	2003684	1					
ANR	2003791	SwitchStatement	switch ( * * fmt_p )		2003684	0					
ANR	2003792	Condition	* * fmt_p	149:10:4131:4137	2003684	0	True				
ANR	2003793	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003794	UnaryOperator	*		2003684	0					
ANR	2003795	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003796	UnaryOperator	*		2003684	0					
ANR	2003797	Identifier	fmt_p		2003684	1					
ANR	2003798	CompoundStatement		28:20:513:513	2003684	1					
ANR	2003799	Label	case '#' :	150:2:4145:4153	2003684	0	True				
ANR	2003800	ExpressionStatement	info -> is_alt = 1	152:3:4221:4237	2003684	1	True				
ANR	2003801	AssignmentExpression	info -> is_alt = 1		2003684	0		=			
ANR	2003802	PtrMemberAccess	info -> is_alt		2003684	0					
ANR	2003803	Identifier	info		2003684	0					
ANR	2003804	Identifier	is_alt		2003684	1					
ANR	2003805	PrimaryExpression	1		2003684	1					
ANR	2003806	BreakStatement	break ;	153:3:4242:4247	2003684	2	True				
ANR	2003807	Label	case '0' :	155:2:4252:4260	2003684	3	True				
ANR	2003808	ExpressionStatement	info -> is_pad = 1	157:3:4307:4323	2003684	4	True				
ANR	2003809	AssignmentExpression	info -> is_pad = 1		2003684	0		=			
ANR	2003810	PtrMemberAccess	info -> is_pad		2003684	0					
ANR	2003811	Identifier	info		2003684	0					
ANR	2003812	Identifier	is_pad		2003684	1					
ANR	2003813	PrimaryExpression	1		2003684	1					
ANR	2003814	BreakStatement	break ;	158:3:4328:4333	2003684	5	True				
ANR	2003815	Label	case '-' :	160:2:4338:4346	2003684	6	True				
ANR	2003816	ExpressionStatement	info -> is_left = 1	162:3:4404:4421	2003684	7	True				
ANR	2003817	AssignmentExpression	info -> is_left = 1		2003684	0		=			
ANR	2003818	PtrMemberAccess	info -> is_left		2003684	0					
ANR	2003819	Identifier	info		2003684	0					
ANR	2003820	Identifier	is_left		2003684	1					
ANR	2003821	PrimaryExpression	1		2003684	1					
ANR	2003822	BreakStatement	break ;	163:3:4426:4431	2003684	8	True				
ANR	2003823	Label	case ' ' :	165:2:4436:4444	2003684	9	True				
ANR	2003824	ExpressionStatement	info -> is_space = 1	167:3:4507:4525	2003684	10	True				
ANR	2003825	AssignmentExpression	info -> is_space = 1		2003684	0		=			
ANR	2003826	PtrMemberAccess	info -> is_space		2003684	0					
ANR	2003827	Identifier	info		2003684	0					
ANR	2003828	Identifier	is_space		2003684	1					
ANR	2003829	PrimaryExpression	1		2003684	1					
ANR	2003830	BreakStatement	break ;	168:3:4530:4535	2003684	11	True				
ANR	2003831	Label	case '+' :	170:2:4540:4548	2003684	12	True				
ANR	2003832	ExpressionStatement	info -> is_signed = 1	172:3:4609:4628	2003684	13	True				
ANR	2003833	AssignmentExpression	info -> is_signed = 1		2003684	0		=			
ANR	2003834	PtrMemberAccess	info -> is_signed		2003684	0					
ANR	2003835	Identifier	info		2003684	0					
ANR	2003836	Identifier	is_signed		2003684	1					
ANR	2003837	PrimaryExpression	1		2003684	1					
ANR	2003838	BreakStatement	break ;	173:3:4633:4638	2003684	14	True				
ANR	2003839	Label	case '\\'' :	175:2:4643:4652	2003684	15	True				
ANR	2003840	ExpressionStatement	info -> is_grouped = 1	178:3:4741:4761	2003684	16	True				
ANR	2003841	AssignmentExpression	info -> is_grouped = 1		2003684	0		=			
ANR	2003842	PtrMemberAccess	info -> is_grouped		2003684	0					
ANR	2003843	Identifier	info		2003684	0					
ANR	2003844	Identifier	is_grouped		2003684	1					
ANR	2003845	PrimaryExpression	1		2003684	1					
ANR	2003846	BreakStatement	break ;	179:3:4766:4771	2003684	17	True				
ANR	2003847	ExpressionStatement	( * fmt_p ) ++	181:2:4779:4789	2003684	1	True				
ANR	2003848	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2003849	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2003850	UnaryOperator	*		2003684	0					
ANR	2003851	Identifier	fmt_p		2003684	1					
ANR	2003852	IncDec	++		2003684	1					
ANR	2003853	IfStatement	if ( * * fmt_p == '*' )		2003684	8					
ANR	2003854	Condition	* * fmt_p == '*'	186:5:4839:4852	2003684	0	True				
ANR	2003855	EqualityExpression	* * fmt_p == '*'		2003684	0		==			
ANR	2003856	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003857	UnaryOperator	*		2003684	0					
ANR	2003858	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003859	UnaryOperator	*		2003684	0					
ANR	2003860	Identifier	fmt_p		2003684	1					
ANR	2003861	PrimaryExpression	'*'		2003684	1					
ANR	2003862	CompoundStatement		65:22:1228:1228	2003684	1					
ANR	2003863	ElseStatement	else		2003684	0					
ANR	2003864	IfStatement	if ( isdigit ( * * fmt_p ) )		2003684	0					
ANR	2003865	Condition	isdigit ( * * fmt_p )	188:15:4939:4954	2003684	0	True				
ANR	2003866	CallExpression	isdigit ( * * fmt_p )		2003684	0					
ANR	2003867	Callee	isdigit		2003684	0					
ANR	2003868	Identifier	isdigit		2003684	0					
ANR	2003869	ArgumentList	* * fmt_p		2003684	1					
ANR	2003870	Argument	* * fmt_p		2003684	0					
ANR	2003871	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003872	UnaryOperator	*		2003684	0					
ANR	2003873	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003874	UnaryOperator	*		2003684	0					
ANR	2003875	Identifier	fmt_p		2003684	1					
ANR	2003876	CompoundStatement		67:34:1330:1330	2003684	1					
ANR	2003877	ExpressionStatement	info -> width = consumeInt ( fmt_p )	190:2:4991:5024	2003684	0	True				
ANR	2003878	AssignmentExpression	info -> width = consumeInt ( fmt_p )		2003684	0		=			
ANR	2003879	PtrMemberAccess	info -> width		2003684	0					
ANR	2003880	Identifier	info		2003684	0					
ANR	2003881	Identifier	width		2003684	1					
ANR	2003882	CallExpression	consumeInt ( fmt_p )		2003684	1					
ANR	2003883	Callee	consumeInt		2003684	0					
ANR	2003884	Identifier	consumeInt		2003684	0					
ANR	2003885	ArgumentList	fmt_p		2003684	1					
ANR	2003886	Argument	fmt_p		2003684	0					
ANR	2003887	Identifier	fmt_p		2003684	0					
ANR	2003888	IfStatement	if ( ! * * fmt_p )		2003684	9					
ANR	2003889	Condition	! * * fmt_p	192:5:5034:5042	2003684	0	True				
ANR	2003890	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003891	UnaryOperator	!		2003684	0					
ANR	2003892	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003893	UnaryOperator	*		2003684	0					
ANR	2003894	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003895	UnaryOperator	*		2003684	0					
ANR	2003896	Identifier	fmt_p		2003684	1					
ANR	2003897	CompoundStatement		71:17:1418:1418	2003684	1					
ANR	2003898	ReturnStatement	return FALSE ;	193:2:5050:5062	2003684	0	True				
ANR	2003899	Identifier	FALSE		2003684	0					
ANR	2003900	ExpressionStatement	info -> precision = - 1	199:1:5211:5231	2003684	10	True				
ANR	2003901	AssignmentExpression	info -> precision = - 1		2003684	0		=			
ANR	2003902	PtrMemberAccess	info -> precision		2003684	0					
ANR	2003903	Identifier	info		2003684	0					
ANR	2003904	Identifier	precision		2003684	1					
ANR	2003905	UnaryOperationExpression	- 1		2003684	1					
ANR	2003906	UnaryOperator	-		2003684	0					
ANR	2003907	PrimaryExpression	1		2003684	1					
ANR	2003908	IfStatement	if ( * * fmt_p == '.' )		2003684	11					
ANR	2003909	Condition	* * fmt_p == '.'	200:5:5238:5251	2003684	0	True				
ANR	2003910	EqualityExpression	* * fmt_p == '.'		2003684	0		==			
ANR	2003911	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003912	UnaryOperator	*		2003684	0					
ANR	2003913	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003914	UnaryOperator	*		2003684	0					
ANR	2003915	Identifier	fmt_p		2003684	1					
ANR	2003916	PrimaryExpression	'.'		2003684	1					
ANR	2003917	CompoundStatement		79:21:1626:1626	2003684	1					
ANR	2003918	ExpressionStatement	( * fmt_p ) ++	202:2:5312:5322	2003684	0	True				
ANR	2003919	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2003920	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2003921	UnaryOperator	*		2003684	0					
ANR	2003922	Identifier	fmt_p		2003684	1					
ANR	2003923	IncDec	++		2003684	1					
ANR	2003924	IfStatement	if ( ! * * fmt_p )		2003684	1					
ANR	2003925	Condition	! * * fmt_p	203:6:5330:5338	2003684	0	True				
ANR	2003926	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003927	UnaryOperator	!		2003684	0					
ANR	2003928	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003929	UnaryOperator	*		2003684	0					
ANR	2003930	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003931	UnaryOperator	*		2003684	0					
ANR	2003932	Identifier	fmt_p		2003684	1					
ANR	2003933	CompoundStatement		82:18:1714:1714	2003684	1					
ANR	2003934	ReturnStatement	return FALSE ;	204:3:5347:5359	2003684	0	True				
ANR	2003935	Identifier	FALSE		2003684	0					
ANR	2003936	IfStatement	if ( * * fmt_p == '*' )		2003684	2					
ANR	2003937	Condition	* * fmt_p == '*'	206:6:5371:5384	2003684	0	True				
ANR	2003938	EqualityExpression	* * fmt_p == '*'		2003684	0		==			
ANR	2003939	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003940	UnaryOperator	*		2003684	0					
ANR	2003941	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003942	UnaryOperator	*		2003684	0					
ANR	2003943	Identifier	fmt_p		2003684	1					
ANR	2003944	PrimaryExpression	'*'		2003684	1					
ANR	2003945	CompoundStatement		85:22:1759:1759	2003684	1					
ANR	2003946	ElseStatement	else		2003684	0					
ANR	2003947	IfStatement	if ( isdigit ( * * fmt_p ) )		2003684	0					
ANR	2003948	Condition	isdigit ( * * fmt_p )	209:13:5491:5506	2003684	0	True				
ANR	2003949	CallExpression	isdigit ( * * fmt_p )		2003684	0					
ANR	2003950	Callee	isdigit		2003684	0					
ANR	2003951	Identifier	isdigit		2003684	0					
ANR	2003952	ArgumentList	* * fmt_p		2003684	1					
ANR	2003953	Argument	* * fmt_p		2003684	0					
ANR	2003954	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003955	UnaryOperator	*		2003684	0					
ANR	2003956	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003957	UnaryOperator	*		2003684	0					
ANR	2003958	Identifier	fmt_p		2003684	1					
ANR	2003959	CompoundStatement		88:32:1882:1882	2003684	1					
ANR	2003960	ExpressionStatement	info -> precision = consumeInt ( fmt_p )	210:3:5515:5552	2003684	0	True				
ANR	2003961	AssignmentExpression	info -> precision = consumeInt ( fmt_p )		2003684	0		=			
ANR	2003962	PtrMemberAccess	info -> precision		2003684	0					
ANR	2003963	Identifier	info		2003684	0					
ANR	2003964	Identifier	precision		2003684	1					
ANR	2003965	CallExpression	consumeInt ( fmt_p )		2003684	1					
ANR	2003966	Callee	consumeInt		2003684	0					
ANR	2003967	Identifier	consumeInt		2003684	0					
ANR	2003968	ArgumentList	fmt_p		2003684	1					
ANR	2003969	Argument	fmt_p		2003684	0					
ANR	2003970	Identifier	fmt_p		2003684	0					
ANR	2003971	IfStatement	if ( ! * * fmt_p )		2003684	12					
ANR	2003972	Condition	! * * fmt_p	213:5:5569:5577	2003684	0	True				
ANR	2003973	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2003974	UnaryOperator	!		2003684	0					
ANR	2003975	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2003976	UnaryOperator	*		2003684	0					
ANR	2003977	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003978	UnaryOperator	*		2003684	0					
ANR	2003979	Identifier	fmt_p		2003684	1					
ANR	2003980	CompoundStatement		92:17:1953:1953	2003684	1					
ANR	2003981	ReturnStatement	return FALSE ;	214:2:5585:5597	2003684	0	True				
ANR	2003982	Identifier	FALSE		2003684	0					
ANR	2003983	WhileStatement	while ( * * fmt_p && isLengthChar ( * * fmt_p ) )		2003684	13					
ANR	2003984	Condition	* * fmt_p && isLengthChar ( * * fmt_p )	218:8:5660:5691	2003684	0	True				
ANR	2003985	AndExpression	* * fmt_p && isLengthChar ( * * fmt_p )		2003684	0		&&			
ANR	2003986	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003987	UnaryOperator	*		2003684	0					
ANR	2003988	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003989	UnaryOperator	*		2003684	0					
ANR	2003990	Identifier	fmt_p		2003684	1					
ANR	2003991	CallExpression	isLengthChar ( * * fmt_p )		2003684	1					
ANR	2003992	Callee	isLengthChar		2003684	0					
ANR	2003993	Identifier	isLengthChar		2003684	0					
ANR	2003994	ArgumentList	* * fmt_p		2003684	1					
ANR	2003995	Argument	* * fmt_p		2003684	0					
ANR	2003996	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2003997	UnaryOperator	*		2003684	0					
ANR	2003998	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2003999	UnaryOperator	*		2003684	0					
ANR	2004000	Identifier	fmt_p		2003684	1					
ANR	2004001	CompoundStatement		97:43:2067:2067	2003684	1					
ANR	2004002	SwitchStatement	switch ( * * fmt_p )		2003684	0					
ANR	2004003	Condition	* * fmt_p	219:10:5707:5713	2003684	0	True				
ANR	2004004	UnaryOperationExpression	* * fmt_p		2003684	0					
ANR	2004005	UnaryOperator	*		2003684	0					
ANR	2004006	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2004007	UnaryOperator	*		2003684	0					
ANR	2004008	Identifier	fmt_p		2003684	1					
ANR	2004009	CompoundStatement		98:20:2089:2089	2003684	1					
ANR	2004010	Label	case 'h' :	220:2:5721:5729	2003684	0	True				
ANR	2004011	ExpressionStatement	info -> is_short = 1	222:3:5780:5798	2003684	1	True				
ANR	2004012	AssignmentExpression	info -> is_short = 1		2003684	0		=			
ANR	2004013	PtrMemberAccess	info -> is_short		2003684	0					
ANR	2004014	Identifier	info		2003684	0					
ANR	2004015	Identifier	is_short		2003684	1					
ANR	2004016	PrimaryExpression	1		2003684	1					
ANR	2004017	BreakStatement	break ;	223:3:5803:5808	2003684	2	True				
ANR	2004018	Label	case 'l' :	225:2:5813:5821	2003684	3	True				
ANR	2004019	IfStatement	if ( info -> is_long )		2003684	4					
ANR	2004020	Condition	info -> is_long	226:7:5830:5842	2003684	0	True				
ANR	2004021	PtrMemberAccess	info -> is_long		2003684	0					
ANR	2004022	Identifier	info		2003684	0					
ANR	2004023	Identifier	is_long		2003684	1					
ANR	2004024	CompoundStatement		105:23:2218:2218	2003684	1					
ANR	2004025	ExpressionStatement	info -> is_long_long = 1	228:4:5884:5906	2003684	0	True				
ANR	2004026	AssignmentExpression	info -> is_long_long = 1		2003684	0		=			
ANR	2004027	PtrMemberAccess	info -> is_long_long		2003684	0					
ANR	2004028	Identifier	info		2003684	0					
ANR	2004029	Identifier	is_long_long		2003684	1					
ANR	2004030	PrimaryExpression	1		2003684	1					
ANR	2004031	ElseStatement	else		2003684	0					
ANR	2004032	CompoundStatement		108:10:2290:2290	2003684	0					
ANR	2004033	ExpressionStatement	info -> is_long = 1	231:4:5959:5976	2003684	0	True				
ANR	2004034	AssignmentExpression	info -> is_long = 1		2003684	0		=			
ANR	2004035	PtrMemberAccess	info -> is_long		2003684	0					
ANR	2004036	Identifier	info		2003684	0					
ANR	2004037	Identifier	is_long		2003684	1					
ANR	2004038	PrimaryExpression	1		2003684	1					
ANR	2004039	BreakStatement	break ;	233:3:5986:5991	2003684	5	True				
ANR	2004040	Label	case 'L' :	235:2:5996:6004	2003684	6	True				
ANR	2004041	ExpressionStatement	info -> is_long_double = 1	237:3:6053:6077	2003684	7	True				
ANR	2004042	AssignmentExpression	info -> is_long_double = 1		2003684	0		=			
ANR	2004043	PtrMemberAccess	info -> is_long_double		2003684	0					
ANR	2004044	Identifier	info		2003684	0					
ANR	2004045	Identifier	is_long_double		2003684	1					
ANR	2004046	PrimaryExpression	1		2003684	1					
ANR	2004047	BreakStatement	break ;	238:3:6082:6087	2003684	8	True				
ANR	2004048	Label	case 'q' :	240:2:6092:6100	2003684	9	True				
ANR	2004049	ExpressionStatement	info -> is_long_long = 1	242:3:6152:6174	2003684	10	True				
ANR	2004050	AssignmentExpression	info -> is_long_long = 1		2003684	0		=			
ANR	2004051	PtrMemberAccess	info -> is_long_long		2003684	0					
ANR	2004052	Identifier	info		2003684	0					
ANR	2004053	Identifier	is_long_long		2003684	1					
ANR	2004054	PrimaryExpression	1		2003684	1					
ANR	2004055	BreakStatement	break ;	243:3:6179:6184	2003684	11	True				
ANR	2004056	Label	case 'j' :	245:2:6189:6197	2003684	12	True				
ANR	2004057	Label	case 'z' :	246:2:6201:6209	2003684	13	True				
ANR	2004058	Label	case 't' :	247:2:6213:6221	2003684	14	True				
ANR	2004059	BreakStatement	break ;	250:3:6306:6311	2003684	15	True				
ANR	2004060	ExpressionStatement	( * fmt_p ) ++	252:2:6319:6329	2003684	1	True				
ANR	2004061	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2004062	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2004063	UnaryOperator	*		2003684	0					
ANR	2004064	Identifier	fmt_p		2003684	1					
ANR	2004065	IncDec	++		2003684	1					
ANR	2004066	IfStatement	if ( ! * * fmt_p )		2003684	14					
ANR	2004067	Condition	! * * fmt_p	254:5:6339:6347	2003684	0	True				
ANR	2004068	UnaryOperationExpression	! * * fmt_p		2003684	0					
ANR	2004069	UnaryOperator	!		2003684	0					
ANR	2004070	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2004071	UnaryOperator	*		2003684	0					
ANR	2004072	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2004073	UnaryOperator	*		2003684	0					
ANR	2004074	Identifier	fmt_p		2003684	1					
ANR	2004075	CompoundStatement		133:17:2723:2723	2003684	1					
ANR	2004076	ReturnStatement	return FALSE ;	255:2:6355:6367	2003684	0	True				
ANR	2004077	Identifier	FALSE		2003684	0					
ANR	2004078	ExpressionStatement	info -> fmt_letter = * * fmt_p	259:1:6442:6468	2003684	15	True				
ANR	2004079	AssignmentExpression	info -> fmt_letter = * * fmt_p		2003684	0		=			
ANR	2004080	PtrMemberAccess	info -> fmt_letter		2003684	0					
ANR	2004081	Identifier	info		2003684	0					
ANR	2004082	Identifier	fmt_letter		2003684	1					
ANR	2004083	UnaryOperationExpression	* * fmt_p		2003684	1					
ANR	2004084	UnaryOperator	*		2003684	0					
ANR	2004085	UnaryOperationExpression	* fmt_p		2003684	1					
ANR	2004086	UnaryOperator	*		2003684	0					
ANR	2004087	Identifier	fmt_p		2003684	1					
ANR	2004088	ExpressionStatement	( * fmt_p ) ++	262:1:6532:6542	2003684	16	True				
ANR	2004089	PostIncDecOperationExpression	( * fmt_p ) ++		2003684	0					
ANR	2004090	UnaryOperationExpression	* fmt_p		2003684	0					
ANR	2004091	UnaryOperator	*		2003684	0					
ANR	2004092	Identifier	fmt_p		2003684	1					
ANR	2004093	IncDec	++		2003684	1					
ANR	2004094	SwitchStatement	switch ( info -> fmt_letter )		2003684	17					
ANR	2004095	Condition	info -> fmt_letter	265:9:6619:6634	2003684	0	True				
ANR	2004096	PtrMemberAccess	info -> fmt_letter		2003684	0					
ANR	2004097	Identifier	info		2003684	0					
ANR	2004098	Identifier	fmt_letter		2003684	1					
ANR	2004099	CompoundStatement		144:28:3010:3010	2003684	1					
ANR	2004100	Label	case 'd' :	268:1:6666:6674	2003684	0	True				
ANR	2004101	Label	case 'i' :	269:1:6677:6685	2003684	1	True				
ANR	2004102	Label	case 'o' :	270:1:6688:6696	2003684	2	True				
ANR	2004103	Label	case 'u' :	271:1:6699:6707	2003684	3	True				
ANR	2004104	Label	case 'x' :	272:1:6710:6718	2003684	4	True				
ANR	2004105	Label	case 'X' :	273:1:6721:6729	2003684	5	True				
ANR	2004106	ExpressionStatement	info -> type = PFT_INT	274:2:6733:6753	2003684	6	True				
ANR	2004107	AssignmentExpression	info -> type = PFT_INT		2003684	0		=			
ANR	2004108	PtrMemberAccess	info -> type		2003684	0					
ANR	2004109	Identifier	info		2003684	0					
ANR	2004110	Identifier	type		2003684	1					
ANR	2004111	Identifier	PFT_INT		2003684	1					
ANR	2004112	BreakStatement	break ;	275:2:6757:6762	2003684	7	True				
ANR	2004113	Label	case 'e' :	277:1:6766:6774	2003684	8	True				
ANR	2004114	Label	case 'E' :	278:1:6777:6785	2003684	9	True				
ANR	2004115	Label	case 'f' :	279:1:6788:6796	2003684	10	True				
ANR	2004116	Label	case 'F' :	280:1:6799:6807	2003684	11	True				
ANR	2004117	Label	case 'g' :	281:1:6810:6818	2003684	12	True				
ANR	2004118	Label	case 'G' :	282:1:6821:6829	2003684	13	True				
ANR	2004119	Label	case 'a' :	283:1:6832:6840	2003684	14	True				
ANR	2004120	Label	case 'A' :	284:1:6843:6851	2003684	15	True				
ANR	2004121	ExpressionStatement	info -> type = PFT_FLOAT	285:2:6855:6877	2003684	16	True				
ANR	2004122	AssignmentExpression	info -> type = PFT_FLOAT		2003684	0		=			
ANR	2004123	PtrMemberAccess	info -> type		2003684	0					
ANR	2004124	Identifier	info		2003684	0					
ANR	2004125	Identifier	type		2003684	1					
ANR	2004126	Identifier	PFT_FLOAT		2003684	1					
ANR	2004127	BreakStatement	break ;	286:2:6881:6886	2003684	17	True				
ANR	2004128	Label	case 'c' :	288:1:6890:6898	2003684	18	True				
ANR	2004129	ExpressionStatement	info -> type = PFT_CHAR	289:2:6902:6923	2003684	19	True				
ANR	2004130	AssignmentExpression	info -> type = PFT_CHAR		2003684	0		=			
ANR	2004131	PtrMemberAccess	info -> type		2003684	0					
ANR	2004132	Identifier	info		2003684	0					
ANR	2004133	Identifier	type		2003684	1					
ANR	2004134	Identifier	PFT_CHAR		2003684	1					
ANR	2004135	BreakStatement	break ;	290:2:6927:6932	2003684	20	True				
ANR	2004136	Label	case 's' :	292:1:6936:6944	2003684	21	True				
ANR	2004137	ExpressionStatement	info -> type = PFT_STRING	293:2:6948:6971	2003684	22	True				
ANR	2004138	AssignmentExpression	info -> type = PFT_STRING		2003684	0		=			
ANR	2004139	PtrMemberAccess	info -> type		2003684	0					
ANR	2004140	Identifier	info		2003684	0					
ANR	2004141	Identifier	type		2003684	1					
ANR	2004142	Identifier	PFT_STRING		2003684	1					
ANR	2004143	BreakStatement	break ;	294:2:6975:6980	2003684	23	True				
ANR	2004144	Label	case 'p' :	298:4:7048:7056	2003684	24	True				
ANR	2004145	ExpressionStatement	info -> type = PFT_POINTER	299:2:7060:7084	2003684	25	True				
ANR	2004146	AssignmentExpression	info -> type = PFT_POINTER		2003684	0		=			
ANR	2004147	PtrMemberAccess	info -> type		2003684	0					
ANR	2004148	Identifier	info		2003684	0					
ANR	2004149	Identifier	type		2003684	1					
ANR	2004150	Identifier	PFT_POINTER		2003684	1					
ANR	2004151	BreakStatement	break ;	300:2:7088:7093	2003684	26	True				
ANR	2004152	Label	case 'n' :	302:4:7100:7108	2003684	27	True				
ANR	2004153	ExpressionStatement	info -> type = PFT_INT	304:2:7170:7190	2003684	28	True				
ANR	2004154	AssignmentExpression	info -> type = PFT_INT		2003684	0		=			
ANR	2004155	PtrMemberAccess	info -> type		2003684	0					
ANR	2004156	Identifier	info		2003684	0					
ANR	2004157	Identifier	type		2003684	1					
ANR	2004158	Identifier	PFT_INT		2003684	1					
ANR	2004159	BreakStatement	break ;	305:2:7194:7199	2003684	29	True				
ANR	2004160	Label	case 'C' :	307:4:7206:7214	2003684	30	True				
ANR	2004161	ExpressionStatement	info -> type = PFT_CHAR	308:2:7218:7239	2003684	31	True				
ANR	2004162	AssignmentExpression	info -> type = PFT_CHAR		2003684	0		=			
ANR	2004163	PtrMemberAccess	info -> type		2003684	0					
ANR	2004164	Identifier	info		2003684	0					
ANR	2004165	Identifier	type		2003684	1					
ANR	2004166	Identifier	PFT_CHAR		2003684	1					
ANR	2004167	ExpressionStatement	info -> is_long = 1	309:2:7243:7260	2003684	32	True				
ANR	2004168	AssignmentExpression	info -> is_long = 1		2003684	0		=			
ANR	2004169	PtrMemberAccess	info -> is_long		2003684	0					
ANR	2004170	Identifier	info		2003684	0					
ANR	2004171	Identifier	is_long		2003684	1					
ANR	2004172	PrimaryExpression	1		2003684	1					
ANR	2004173	BreakStatement	break ;	310:2:7264:7269	2003684	33	True				
ANR	2004174	Label	case 'S' :	312:4:7276:7284	2003684	34	True				
ANR	2004175	ExpressionStatement	info -> type = PFT_STRING	313:2:7288:7311	2003684	35	True				
ANR	2004176	AssignmentExpression	info -> type = PFT_STRING		2003684	0		=			
ANR	2004177	PtrMemberAccess	info -> type		2003684	0					
ANR	2004178	Identifier	info		2003684	0					
ANR	2004179	Identifier	type		2003684	1					
ANR	2004180	Identifier	PFT_STRING		2003684	1					
ANR	2004181	ExpressionStatement	info -> is_long = 1	314:2:7315:7332	2003684	36	True				
ANR	2004182	AssignmentExpression	info -> is_long = 1		2003684	0		=			
ANR	2004183	PtrMemberAccess	info -> is_long		2003684	0					
ANR	2004184	Identifier	info		2003684	0					
ANR	2004185	Identifier	is_long		2003684	1					
ANR	2004186	PrimaryExpression	1		2003684	1					
ANR	2004187	BreakStatement	break ;	315:2:7336:7341	2003684	37	True				
ANR	2004188	Label	case '%' :	317:4:7350:7358	2003684	38	True				
ANR	2004189	ReturnStatement	"return parsePrintfFormat ( fmt_p , info ) ;"	323:2:7638:7677	2003684	39	True				
ANR	2004190	CallExpression	"parsePrintfFormat ( fmt_p , info )"		2003684	0					
ANR	2004191	Callee	parsePrintfFormat		2003684	0					
ANR	2004192	Identifier	parsePrintfFormat		2003684	0					
ANR	2004193	ArgumentList	fmt_p		2003684	1					
ANR	2004194	Argument	fmt_p		2003684	0					
ANR	2004195	Identifier	fmt_p		2003684	0					
ANR	2004196	Argument	info		2003684	1					
ANR	2004197	Identifier	info		2003684	0					
ANR	2004198	BreakStatement	break ;	324:2:7681:7686	2003684	40	True				
ANR	2004199	Label	default :	326:4:7693:7700	2003684	41	True				
ANR	2004200	Identifier	default		2003684	0					
ANR	2004201	ExpressionStatement	info -> type = PFT_NONE	328:2:7745:7766	2003684	42	True				
ANR	2004202	AssignmentExpression	info -> type = PFT_NONE		2003684	0		=			
ANR	2004203	PtrMemberAccess	info -> type		2003684	0					
ANR	2004204	Identifier	info		2003684	0					
ANR	2004205	Identifier	type		2003684	1					
ANR	2004206	Identifier	PFT_NONE		2003684	1					
ANR	2004207	ReturnStatement	return FALSE ;	329:2:7770:7782	2003684	43	True				
ANR	2004208	Identifier	FALSE		2003684	0					
ANR	2004209	BreakStatement	break ;	330:2:7786:7791	2003684	44	True				
ANR	2004210	ReturnStatement	return TRUE ;	332:1:7800:7811	2003684	18	True				
ANR	2004211	Identifier	TRUE		2003684	0					
ANR	2004212	ReturnType	int		2003684	1					
ANR	2004213	Identifier	parsePrintfFormat		2003684	2					
ANR	2004214	ParameterList	"const char * * fmt_p , struct printf_fmt_info * info"		2003684	3					
ANR	2004215	Parameter	const char * * fmt_p	121:19:3576:3593	2003684	0	True				
ANR	2004216	ParameterType	const char * *		2003684	0					
ANR	2004217	Identifier	fmt_p		2003684	1					
ANR	2004218	Parameter	struct printf_fmt_info * info	121:39:3596:3623	2003684	1	True				
ANR	2004219	ParameterType	struct printf_fmt_info *		2003684	0					
ANR	2004220	Identifier	info		2003684	1					
ANR	2004221	CFGEntryNode	ENTRY		2003684		True				
ANR	2004222	CFGExitNode	EXIT		2003684		True				
ANR	2004223	Symbol	info -> width		2003684						
ANR	2004224	Symbol	PFT_FLOAT		2003684						
ANR	2004225	Symbol	* * fmt_p		2003684						
ANR	2004226	Symbol	consumeInt		2003684						
ANR	2004227	Symbol	PFT_POINTER		2003684						
ANR	2004228	Symbol	parsePrintfFormat		2003684						
ANR	2004229	Symbol	isFlagChar		2003684						
ANR	2004230	Symbol	info -> precision		2003684						
ANR	2004231	Symbol	PFT_CHAR		2003684						
ANR	2004232	Symbol	info -> fmt_letter		2003684						
ANR	2004233	Symbol	info -> is_alt		2003684						
ANR	2004234	Symbol	info -> is_long_long		2003684						
ANR	2004235	Symbol	isdigit		2003684						
ANR	2004236	Symbol	info		2003684						
ANR	2004237	Symbol	PFT_INT		2003684						
ANR	2004238	Symbol	info -> is_long		2003684						
ANR	2004239	Symbol	info -> type		2003684						
ANR	2004240	Symbol	info -> is_left		2003684						
ANR	2004241	Symbol	TRUE		2003684						
ANR	2004242	Symbol	fmt_p		2003684						
ANR	2004243	Symbol	info -> is_signed		2003684						
ANR	2004244	Symbol	info -> is_pad		2003684						
ANR	2004245	Symbol	PFT_NONE		2003684						
ANR	2004246	Symbol	isLengthChar		2003684						
ANR	2004247	Symbol	PFT_STRING		2003684						
ANR	2004248	Symbol	info -> is_short		2003684						
ANR	2004249	Symbol	info -> is_space		2003684						
ANR	2004250	Symbol	* fmt_p		2003684						
ANR	2004251	Symbol	FALSE		2003684						
ANR	2004252	Symbol	info -> is_grouped		2003684						
ANR	2004253	Symbol	* info		2003684						
ANR	2004254	Symbol	info -> is_long_double		2003684						
