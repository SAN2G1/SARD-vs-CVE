command	key	type	code	location	functionId	childNum	isCFGNode	operator	baseType	completeType	identifier
ANR	5265373	File	data/converged/CVE-2011-4930_htcondor/str_isxxx.cpp								
ANR	5265374	Function	str_isint	23:0:861:1018							
ANR	5265375	FunctionDef	str_isint (const char * s)		5265374	0					
ANR	5265376	CompoundStatement		25:0:893:1018	5265374	0					
ANR	5265377	IfStatement	if ( NULL == s )		5265374	0					
ANR	5265378	Condition	NULL == s	26:6:901:909	5265374	0	True				
ANR	5265379	EqualityExpression	NULL == s		5265374	0		==			
ANR	5265380	Identifier	NULL		5265374	0					
ANR	5265381	Identifier	s		5265374	1					
ANR	5265382	CompoundStatement		2:18:19:19	5265374	1					
ANR	5265383	ReturnStatement	return false ;	27:2:917:929	5265374	0	True				
ANR	5265384	Identifier	false		5265374	0					
ANR	5265385	WhileStatement	while ( * s )		5265374	1					
ANR	5265386	Condition	* s	29:8:942:943	5265374	0	True				
ANR	5265387	UnaryOperationExpression	* s		5265374	0					
ANR	5265388	UnaryOperator	*		5265374	0					
ANR	5265389	Identifier	s		5265374	1					
ANR	5265390	CompoundStatement		5:13:53:53	5265374	1					
ANR	5265391	IfStatement	if ( ! isdigit ( * s ) )		5265374	0					
ANR	5265392	Condition	! isdigit ( * s )	30:7:956:967	5265374	0	True				
ANR	5265393	UnaryOperationExpression	! isdigit ( * s )		5265374	0					
ANR	5265394	UnaryOperator	!		5265374	0					
ANR	5265395	CallExpression	isdigit ( * s )		5265374	1					
ANR	5265396	Callee	isdigit		5265374	0					
ANR	5265397	Identifier	isdigit		5265374	0					
ANR	5265398	ArgumentList	* s		5265374	1					
ANR	5265399	Argument	* s		5265374	0					
ANR	5265400	UnaryOperationExpression	* s		5265374	0					
ANR	5265401	UnaryOperator	*		5265374	0					
ANR	5265402	Identifier	s		5265374	1					
ANR	5265403	CompoundStatement		6:22:77:77	5265374	1					
ANR	5265404	ReturnStatement	return false ;	31:3:976:988	5265374	0	True				
ANR	5265405	Identifier	false		5265374	0					
ANR	5265406	ExpressionStatement	s ++	33:2:996:999	5265374	1	True				
ANR	5265407	PostIncDecOperationExpression	s ++		5265374	0					
ANR	5265408	Identifier	s		5265374	0					
ANR	5265409	IncDec	++		5265374	1					
ANR	5265410	ReturnStatement	return true ;	35:1:1005:1016	5265374	2	True				
ANR	5265411	Identifier	true		5265374	0					
ANR	5265412	ReturnType	bool		5265374	1					
ANR	5265413	Identifier	str_isint		5265374	2					
ANR	5265414	ParameterList	const char * s		5265374	3					
ANR	5265415	Parameter	const char * s	24:11:877:889	5265374	0	True				
ANR	5265416	ParameterType	const char *		5265374	0					
ANR	5265417	Identifier	s		5265374	1					
ANR	5265418	CFGEntryNode	ENTRY		5265374		True				
ANR	5265419	CFGExitNode	EXIT		5265374		True				
ANR	5265420	Symbol	s		5265374						
ANR	5265421	Symbol	NULL		5265374						
ANR	5265422	Symbol	false		5265374						
ANR	5265423	Symbol	true		5265374						
ANR	5265424	Symbol	* s		5265374						
ANR	5265425	Symbol	isdigit		5265374						
ANR	5265426	Function	str_isreal	38:0:1021:1547							
ANR	5265427	FunctionDef	"str_isreal (const char * s , bool strict)"		5265426	0					
ANR	5265428	CompoundStatement		40:0:1067:1547	5265426	0					
ANR	5265429	IfStatement	if ( NULL == s )		5265426	0					
ANR	5265430	Condition	NULL == s	41:6:1075:1083	5265426	0	True				
ANR	5265431	EqualityExpression	NULL == s		5265426	0		==			
ANR	5265432	Identifier	NULL		5265426	0					
ANR	5265433	Identifier	s		5265426	1					
ANR	5265434	CompoundStatement		2:18:19:19	5265426	1					
ANR	5265435	ReturnStatement	return false ;	42:2:1091:1103	5265426	0	True				
ANR	5265436	Identifier	false		5265426	0					
ANR	5265437	IdentifierDeclStatement	bool dot = false ;	44:1:1109:1127	5265426	1	True				
ANR	5265438	IdentifierDecl	dot = false		5265426	0					
ANR	5265439	IdentifierDeclType	bool		5265426	0					
ANR	5265440	Identifier	dot		5265426	1					
ANR	5265441	AssignmentExpression	dot = false		5265426	2		=			
ANR	5265442	Identifier	false		5265426	0					
ANR	5265443	Identifier	false		5265426	1					
ANR	5265444	IdentifierDeclStatement	const char * p = s ;	45:1:1130:1147	5265426	2	True				
ANR	5265445	IdentifierDecl	* p = s		5265426	0					
ANR	5265446	IdentifierDeclType	const char *		5265426	0					
ANR	5265447	Identifier	p		5265426	1					
ANR	5265448	AssignmentExpression	* p = s		5265426	2		=			
ANR	5265449	Identifier	s		5265426	0					
ANR	5265450	Identifier	s		5265426	1					
ANR	5265451	WhileStatement	while ( * p )		5265426	3					
ANR	5265452	Condition	* p	46:8:1157:1158	5265426	0	True				
ANR	5265453	UnaryOperationExpression	* p		5265426	0					
ANR	5265454	UnaryOperator	*		5265426	0					
ANR	5265455	Identifier	p		5265426	1					
ANR	5265456	CompoundStatement		8:2:98:124	5265426	1					
ANR	5265457	IdentifierDeclStatement	bool isdot = ( '.' == * p ) ;	47:2:1166:1192	5265426	0	True				
ANR	5265458	IdentifierDecl	isdot = ( '.' == * p )		5265426	0					
ANR	5265459	IdentifierDeclType	bool		5265426	0					
ANR	5265460	Identifier	isdot		5265426	1					
ANR	5265461	AssignmentExpression	isdot = ( '.' == * p )		5265426	2		=			
ANR	5265462	Identifier	isdot		5265426	0					
ANR	5265463	EqualityExpression	'.' == * p		5265426	1		==			
ANR	5265464	PrimaryExpression	'.'		5265426	0					
ANR	5265465	UnaryOperationExpression	* p		5265426	1					
ANR	5265466	UnaryOperator	*		5265426	0					
ANR	5265467	Identifier	p		5265426	1					
ANR	5265468	IfStatement	if ( isdot )		5265426	1					
ANR	5265469	Condition	isdot	48:7:1201:1205	5265426	0	True				
ANR	5265470	Identifier	isdot		5265426	0					
ANR	5265471	CompoundStatement		9:15:141:141	5265426	1					
ANR	5265472	IfStatement	if ( dot )		5265426	0					
ANR	5265473	Condition	dot	49:8:1219:1221	5265426	0	True				
ANR	5265474	Identifier	dot		5265426	0					
ANR	5265475	CompoundStatement		10:14:157:157	5265426	1					
ANR	5265476	ReturnStatement	return false ;	50:4:1231:1243	5265426	0	True				
ANR	5265477	Identifier	false		5265426	0					
ANR	5265478	ElseStatement	else		5265426	0					
ANR	5265479	IfStatement	if ( strict && ( s == p ) )		5265426	0					
ANR	5265480	Condition	strict && ( s == p )	53:13:1305:1322	5265426	0	True				
ANR	5265481	AndExpression	strict && ( s == p )		5265426	0		&&			
ANR	5265482	Identifier	strict		5265426	0					
ANR	5265483	EqualityExpression	s == p		5265426	1		==			
ANR	5265484	Identifier	s		5265426	0					
ANR	5265485	Identifier	p		5265426	1					
ANR	5265486	CompoundStatement		14:34:258:258	5265426	1					
ANR	5265487	ReturnStatement	return false ;	54:4:1332:1344	5265426	0	True				
ANR	5265488	Identifier	false		5265426	0					
ANR	5265489	ExpressionStatement	dot = true	56:3:1354:1364	5265426	1	True				
ANR	5265490	AssignmentExpression	dot = true		5265426	0		=			
ANR	5265491	Identifier	dot		5265426	0					
ANR	5265492	Identifier	true		5265426	1					
ANR	5265493	ElseStatement	else		5265426	0					
ANR	5265494	IfStatement	if ( ! isdigit ( * p ) )		5265426	0					
ANR	5265495	Condition	! isdigit ( * p )	58:12:1382:1393	5265426	0	True				
ANR	5265496	UnaryOperationExpression	! isdigit ( * p )		5265426	0					
ANR	5265497	UnaryOperator	!		5265426	0					
ANR	5265498	CallExpression	isdigit ( * p )		5265426	1					
ANR	5265499	Callee	isdigit		5265426	0					
ANR	5265500	Identifier	isdigit		5265426	0					
ANR	5265501	ArgumentList	* p		5265426	1					
ANR	5265502	Argument	* p		5265426	0					
ANR	5265503	UnaryOperationExpression	* p		5265426	0					
ANR	5265504	UnaryOperator	*		5265426	0					
ANR	5265505	Identifier	p		5265426	1					
ANR	5265506	CompoundStatement		19:27:329:329	5265426	1					
ANR	5265507	ReturnStatement	return false ;	59:3:1402:1414	5265426	0	True				
ANR	5265508	Identifier	false		5265426	0					
ANR	5265509	ExpressionStatement	p ++	61:2:1422:1425	5265426	2	True				
ANR	5265510	PostIncDecOperationExpression	p ++		5265426	0					
ANR	5265511	Identifier	p		5265426	0					
ANR	5265512	IncDec	++		5265426	1					
ANR	5265513	IfStatement	if ( strict && isdot && ( '\\0' == * p ) )		5265426	3					
ANR	5265514	Condition	strict && isdot && ( '\\0' == * p )	63:7:1473:1503	5265426	0	True				
ANR	5265515	AndExpression	strict && isdot && ( '\\0' == * p )		5265426	0		&&			
ANR	5265516	Identifier	strict		5265426	0					
ANR	5265517	AndExpression	isdot && ( '\\0' == * p )		5265426	1		&&			
ANR	5265518	Identifier	isdot		5265426	0					
ANR	5265519	EqualityExpression	'\\0' == * p		5265426	1		==			
ANR	5265520	PrimaryExpression	'\\0'		5265426	0					
ANR	5265521	UnaryOperationExpression	* p		5265426	1					
ANR	5265522	UnaryOperator	*		5265426	0					
ANR	5265523	Identifier	p		5265426	1					
ANR	5265524	CompoundStatement		24:41:439:439	5265426	1					
ANR	5265525	ReturnStatement	return false ;	64:3:1512:1524	5265426	0	True				
ANR	5265526	Identifier	false		5265426	0					
ANR	5265527	ReturnStatement	return true ;	67:1:1534:1545	5265426	4	True				
ANR	5265528	Identifier	true		5265426	0					
ANR	5265529	ReturnType	bool		5265426	1					
ANR	5265530	Identifier	str_isreal		5265426	2					
ANR	5265531	ParameterList	"const char * s , bool strict"		5265426	3					
ANR	5265532	Parameter	const char * s	39:12:1038:1050	5265426	0	True				
ANR	5265533	ParameterType	const char *		5265426	0					
ANR	5265534	Identifier	s		5265426	1					
ANR	5265535	Parameter	bool strict	39:27:1053:1063	5265426	1	True				
ANR	5265536	ParameterType	bool		5265426	0					
ANR	5265537	Identifier	strict		5265426	1					
ANR	5265538	CFGEntryNode	ENTRY		5265426		True				
ANR	5265539	CFGExitNode	EXIT		5265426		True				
ANR	5265540	Symbol	p		5265426						
ANR	5265541	Symbol	isdot		5265426						
ANR	5265542	Symbol	s		5265426						
ANR	5265543	Symbol	NULL		5265426						
ANR	5265544	Symbol	false		5265426						
ANR	5265545	Symbol	dot		5265426						
ANR	5265546	Symbol	true		5265426						
ANR	5265547	Symbol	* p		5265426						
ANR	5265548	Symbol	strict		5265426						
ANR	5265549	Symbol	isdigit		5265426						
ANR	5265550	Function	str_isalpha	70:0:1550:1709							
ANR	5265551	FunctionDef	str_isalpha (const char * s)		5265550	0					
ANR	5265552	CompoundStatement		72:0:1584:1709	5265550	0					
ANR	5265553	IfStatement	if ( NULL == s )		5265550	0					
ANR	5265554	Condition	NULL == s	73:6:1592:1600	5265550	0	True				
ANR	5265555	EqualityExpression	NULL == s		5265550	0		==			
ANR	5265556	Identifier	NULL		5265550	0					
ANR	5265557	Identifier	s		5265550	1					
ANR	5265558	CompoundStatement		2:18:19:19	5265550	1					
ANR	5265559	ReturnStatement	return false ;	74:2:1608:1620	5265550	0	True				
ANR	5265560	Identifier	false		5265550	0					
ANR	5265561	WhileStatement	while ( * s )		5265550	1					
ANR	5265562	Condition	* s	76:8:1633:1634	5265550	0	True				
ANR	5265563	UnaryOperationExpression	* s		5265550	0					
ANR	5265564	UnaryOperator	*		5265550	0					
ANR	5265565	Identifier	s		5265550	1					
ANR	5265566	CompoundStatement		5:13:53:53	5265550	1					
ANR	5265567	IfStatement	if ( ! isalpha ( * s ) )		5265550	0					
ANR	5265568	Condition	! isalpha ( * s )	77:7:1647:1658	5265550	0	True				
ANR	5265569	UnaryOperationExpression	! isalpha ( * s )		5265550	0					
ANR	5265570	UnaryOperator	!		5265550	0					
ANR	5265571	CallExpression	isalpha ( * s )		5265550	1					
ANR	5265572	Callee	isalpha		5265550	0					
ANR	5265573	Identifier	isalpha		5265550	0					
ANR	5265574	ArgumentList	* s		5265550	1					
ANR	5265575	Argument	* s		5265550	0					
ANR	5265576	UnaryOperationExpression	* s		5265550	0					
ANR	5265577	UnaryOperator	*		5265550	0					
ANR	5265578	Identifier	s		5265550	1					
ANR	5265579	CompoundStatement		6:22:77:77	5265550	1					
ANR	5265580	ReturnStatement	return false ;	78:3:1667:1679	5265550	0	True				
ANR	5265581	Identifier	false		5265550	0					
ANR	5265582	ExpressionStatement	s ++	80:2:1687:1690	5265550	1	True				
ANR	5265583	PostIncDecOperationExpression	s ++		5265550	0					
ANR	5265584	Identifier	s		5265550	0					
ANR	5265585	IncDec	++		5265550	1					
ANR	5265586	ReturnStatement	return true ;	82:1:1696:1707	5265550	2	True				
ANR	5265587	Identifier	true		5265550	0					
ANR	5265588	ReturnType	bool		5265550	1					
ANR	5265589	Identifier	str_isalpha		5265550	2					
ANR	5265590	ParameterList	const char * s		5265550	3					
ANR	5265591	Parameter	const char * s	71:13:1568:1580	5265550	0	True				
ANR	5265592	ParameterType	const char *		5265550	0					
ANR	5265593	Identifier	s		5265550	1					
ANR	5265594	CFGEntryNode	ENTRY		5265550		True				
ANR	5265595	CFGExitNode	EXIT		5265550		True				
ANR	5265596	Symbol	isalpha		5265550						
ANR	5265597	Symbol	s		5265550						
ANR	5265598	Symbol	NULL		5265550						
ANR	5265599	Symbol	false		5265550						
ANR	5265600	Symbol	true		5265550						
ANR	5265601	Symbol	* s		5265550						
ANR	5265602	Function	str_isalnum	85:0:1712:1871							
ANR	5265603	FunctionDef	str_isalnum (const char * s)		5265602	0					
ANR	5265604	CompoundStatement		87:0:1746:1871	5265602	0					
ANR	5265605	IfStatement	if ( NULL == s )		5265602	0					
ANR	5265606	Condition	NULL == s	88:6:1754:1762	5265602	0	True				
ANR	5265607	EqualityExpression	NULL == s		5265602	0		==			
ANR	5265608	Identifier	NULL		5265602	0					
ANR	5265609	Identifier	s		5265602	1					
ANR	5265610	CompoundStatement		2:18:19:19	5265602	1					
ANR	5265611	ReturnStatement	return false ;	89:2:1770:1782	5265602	0	True				
ANR	5265612	Identifier	false		5265602	0					
ANR	5265613	WhileStatement	while ( * s )		5265602	1					
ANR	5265614	Condition	* s	91:8:1795:1796	5265602	0	True				
ANR	5265615	UnaryOperationExpression	* s		5265602	0					
ANR	5265616	UnaryOperator	*		5265602	0					
ANR	5265617	Identifier	s		5265602	1					
ANR	5265618	CompoundStatement		5:13:53:53	5265602	1					
ANR	5265619	IfStatement	if ( ! isalnum ( * s ) )		5265602	0					
ANR	5265620	Condition	! isalnum ( * s )	92:7:1809:1820	5265602	0	True				
ANR	5265621	UnaryOperationExpression	! isalnum ( * s )		5265602	0					
ANR	5265622	UnaryOperator	!		5265602	0					
ANR	5265623	CallExpression	isalnum ( * s )		5265602	1					
ANR	5265624	Callee	isalnum		5265602	0					
ANR	5265625	Identifier	isalnum		5265602	0					
ANR	5265626	ArgumentList	* s		5265602	1					
ANR	5265627	Argument	* s		5265602	0					
ANR	5265628	UnaryOperationExpression	* s		5265602	0					
ANR	5265629	UnaryOperator	*		5265602	0					
ANR	5265630	Identifier	s		5265602	1					
ANR	5265631	CompoundStatement		6:22:77:77	5265602	1					
ANR	5265632	ReturnStatement	return false ;	93:3:1829:1841	5265602	0	True				
ANR	5265633	Identifier	false		5265602	0					
ANR	5265634	ExpressionStatement	s ++	95:2:1849:1852	5265602	1	True				
ANR	5265635	PostIncDecOperationExpression	s ++		5265602	0					
ANR	5265636	Identifier	s		5265602	0					
ANR	5265637	IncDec	++		5265602	1					
ANR	5265638	ReturnStatement	return true ;	97:1:1858:1869	5265602	2	True				
ANR	5265639	Identifier	true		5265602	0					
ANR	5265640	ReturnType	bool		5265602	1					
ANR	5265641	Identifier	str_isalnum		5265602	2					
ANR	5265642	ParameterList	const char * s		5265602	3					
ANR	5265643	Parameter	const char * s	86:13:1730:1742	5265602	0	True				
ANR	5265644	ParameterType	const char *		5265602	0					
ANR	5265645	Identifier	s		5265602	1					
ANR	5265646	CFGEntryNode	ENTRY		5265602		True				
ANR	5265647	CFGExitNode	EXIT		5265602		True				
ANR	5265648	Symbol	s		5265602						
ANR	5265649	Symbol	NULL		5265602						
ANR	5265650	Symbol	isalnum		5265602						
ANR	5265651	Symbol	false		5265602						
ANR	5265652	Symbol	true		5265602						
ANR	5265653	Symbol	* s		5265602						
ANR	5265654	ClassDef	TEST	101:0:1893:2006							
ANR	5265655	DeclStmt									
ANR	5265656	Decl							const char	const char *	s
ANR	5265657	DeclStmt									
ANR	5265658	Decl							bool	bool	is_int
ANR	5265659	DeclStmt									
ANR	5265660	Decl							bool	bool	is_real
ANR	5265661	DeclStmt									
ANR	5265662	Decl							bool	bool	is_strict
ANR	5265663	DeclStmt									
ANR	5265664	Decl							bool	bool	is_alpha
ANR	5265665	DeclStmt									
ANR	5265666	Decl							bool	bool	is_alnum
ANR	5265667	DeclStmt									
ANR	5265668	Decl							TEST	TEST [ ]	tests
ANR	5265669	Function	main	142:0:3271:4248							
ANR	5265670	FunctionDef	"main (int argc , const char * argv [ ])"		5265669	0					
ANR	5265671	CompoundStatement		143:0:3312:4248	5265669	0					
ANR	5265672	ExpressionStatement	( void ) argc	144:1:3315:3326	5265669	0	True				
ANR	5265673	CastExpression	( void ) argc		5265669	0					
ANR	5265674	CastTarget	void		5265669	0					
ANR	5265675	Identifier	argc		5265669	1					
ANR	5265676	ExpressionStatement	( void ) argv	145:1:3329:3340	5265669	1	True				
ANR	5265677	CastExpression	( void ) argv		5265669	0					
ANR	5265678	CastTarget	void		5265669	0					
ANR	5265679	Identifier	argv		5265669	1					
ANR	5265680	IdentifierDeclStatement	int failures = 0 ;	147:1:3344:3360	5265669	2	True				
ANR	5265681	IdentifierDecl	failures = 0		5265669	0					
ANR	5265682	IdentifierDeclType	int		5265669	0					
ANR	5265683	Identifier	failures		5265669	1					
ANR	5265684	AssignmentExpression	failures = 0		5265669	2		=			
ANR	5265685	Identifier	failures		5265669	0					
ANR	5265686	PrimaryExpression	0		5265669	1					
ANR	5265687	IdentifierDeclStatement	const TEST * t = tests ;	148:1:3363:3384	5265669	3	True				
ANR	5265688	IdentifierDecl	* t = tests		5265669	0					
ANR	5265689	IdentifierDeclType	const TEST *		5265669	0					
ANR	5265690	Identifier	t		5265669	1					
ANR	5265691	AssignmentExpression	* t = tests		5265669	2		=			
ANR	5265692	Identifier	tests		5265669	0					
ANR	5265693	Identifier	tests		5265669	1					
ANR	5265694	DoStatement	do		5265669	4					
ANR	5265695	CompoundStatement		13:2:278:476	5265669	0					
ANR	5265696	IdentifierDeclStatement	bool is_int = str_isint ( t -> s ) ;	150:2:3394:3426	5265669	0	True				
ANR	5265697	IdentifierDecl	is_int = str_isint ( t -> s )		5265669	0					
ANR	5265698	IdentifierDeclType	bool		5265669	0					
ANR	5265699	Identifier	is_int		5265669	1					
ANR	5265700	AssignmentExpression	is_int = str_isint ( t -> s )		5265669	2		=			
ANR	5265701	Identifier	is_int		5265669	0					
ANR	5265702	CallExpression	str_isint ( t -> s )		5265669	1					
ANR	5265703	Callee	str_isint		5265669	0					
ANR	5265704	Identifier	str_isint		5265669	0					
ANR	5265705	ArgumentList	t -> s		5265669	1					
ANR	5265706	Argument	t -> s		5265669	0					
ANR	5265707	PtrMemberAccess	t -> s		5265669	0					
ANR	5265708	Identifier	t		5265669	0					
ANR	5265709	Identifier	s		5265669	1					
ANR	5265710	IdentifierDeclStatement	bool is_real = str_isreal ( t -> s ) ;	151:2:3430:3464	5265669	1	True				
ANR	5265711	IdentifierDecl	is_real = str_isreal ( t -> s )		5265669	0					
ANR	5265712	IdentifierDeclType	bool		5265669	0					
ANR	5265713	Identifier	is_real		5265669	1					
ANR	5265714	AssignmentExpression	is_real = str_isreal ( t -> s )		5265669	2		=			
ANR	5265715	Identifier	is_real		5265669	0					
ANR	5265716	CallExpression	str_isreal ( t -> s )		5265669	1					
ANR	5265717	Callee	str_isreal		5265669	0					
ANR	5265718	Identifier	str_isreal		5265669	0					
ANR	5265719	ArgumentList	t -> s		5265669	1					
ANR	5265720	Argument	t -> s		5265669	0					
ANR	5265721	PtrMemberAccess	t -> s		5265669	0					
ANR	5265722	Identifier	t		5265669	0					
ANR	5265723	Identifier	s		5265669	1					
ANR	5265724	IdentifierDeclStatement	"bool is_strict = str_isreal ( t -> s , true ) ;"	152:2:3468:3509	5265669	2	True				
ANR	5265725	IdentifierDecl	"is_strict = str_isreal ( t -> s , true )"		5265669	0					
ANR	5265726	IdentifierDeclType	bool		5265669	0					
ANR	5265727	Identifier	is_strict		5265669	1					
ANR	5265728	AssignmentExpression	"is_strict = str_isreal ( t -> s , true )"		5265669	2		=			
ANR	5265729	Identifier	is_strict		5265669	0					
ANR	5265730	CallExpression	"str_isreal ( t -> s , true )"		5265669	1					
ANR	5265731	Callee	str_isreal		5265669	0					
ANR	5265732	Identifier	str_isreal		5265669	0					
ANR	5265733	ArgumentList	t -> s		5265669	1					
ANR	5265734	Argument	t -> s		5265669	0					
ANR	5265735	PtrMemberAccess	t -> s		5265669	0					
ANR	5265736	Identifier	t		5265669	0					
ANR	5265737	Identifier	s		5265669	1					
ANR	5265738	Argument	true		5265669	1					
ANR	5265739	Identifier	true		5265669	0					
ANR	5265740	IdentifierDeclStatement	bool is_alpha = str_isalpha ( t -> s ) ;	153:2:3513:3548	5265669	3	True				
ANR	5265741	IdentifierDecl	is_alpha = str_isalpha ( t -> s )		5265669	0					
ANR	5265742	IdentifierDeclType	bool		5265669	0					
ANR	5265743	Identifier	is_alpha		5265669	1					
ANR	5265744	AssignmentExpression	is_alpha = str_isalpha ( t -> s )		5265669	2		=			
ANR	5265745	Identifier	is_alpha		5265669	0					
ANR	5265746	CallExpression	str_isalpha ( t -> s )		5265669	1					
ANR	5265747	Callee	str_isalpha		5265669	0					
ANR	5265748	Identifier	str_isalpha		5265669	0					
ANR	5265749	ArgumentList	t -> s		5265669	1					
ANR	5265750	Argument	t -> s		5265669	0					
ANR	5265751	PtrMemberAccess	t -> s		5265669	0					
ANR	5265752	Identifier	t		5265669	0					
ANR	5265753	Identifier	s		5265669	1					
ANR	5265754	IdentifierDeclStatement	bool is_alnum = str_isalnum ( t -> s ) ;	154:2:3552:3587	5265669	4	True				
ANR	5265755	IdentifierDecl	is_alnum = str_isalnum ( t -> s )		5265669	0					
ANR	5265756	IdentifierDeclType	bool		5265669	0					
ANR	5265757	Identifier	is_alnum		5265669	1					
ANR	5265758	AssignmentExpression	is_alnum = str_isalnum ( t -> s )		5265669	2		=			
ANR	5265759	Identifier	is_alnum		5265669	0					
ANR	5265760	CallExpression	str_isalnum ( t -> s )		5265669	1					
ANR	5265761	Callee	str_isalnum		5265669	0					
ANR	5265762	Identifier	str_isalnum		5265669	0					
ANR	5265763	ArgumentList	t -> s		5265669	1					
ANR	5265764	Argument	t -> s		5265669	0					
ANR	5265765	PtrMemberAccess	t -> s		5265669	0					
ANR	5265766	Identifier	t		5265669	0					
ANR	5265767	Identifier	s		5265669	1					
ANR	5265768	IdentifierDeclStatement	bool ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) ) ;	155:2:3591:3789	5265669	5	True				
ANR	5265769	IdentifierDecl	ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) )		5265669	0					
ANR	5265770	IdentifierDeclType	bool		5265669	0					
ANR	5265771	Identifier	ok		5265669	1					
ANR	5265772	AssignmentExpression	ok = ( ( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum ) )		5265669	2		=			
ANR	5265773	Identifier	ok		5265669	0					
ANR	5265774	AndExpression	( is_int == t -> is_int ) && ( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		5265669	1		&&			
ANR	5265775	EqualityExpression	is_int == t -> is_int		5265669	0		==			
ANR	5265776	Identifier	is_int		5265669	0					
ANR	5265777	PtrMemberAccess	t -> is_int		5265669	1					
ANR	5265778	Identifier	t		5265669	0					
ANR	5265779	Identifier	is_int		5265669	1					
ANR	5265780	AndExpression	( is_real == t -> is_real ) && ( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		5265669	1		&&			
ANR	5265781	EqualityExpression	is_real == t -> is_real		5265669	0		==			
ANR	5265782	Identifier	is_real		5265669	0					
ANR	5265783	PtrMemberAccess	t -> is_real		5265669	1					
ANR	5265784	Identifier	t		5265669	0					
ANR	5265785	Identifier	is_real		5265669	1					
ANR	5265786	AndExpression	( is_strict == t -> is_strict ) && ( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		5265669	1		&&			
ANR	5265787	EqualityExpression	is_strict == t -> is_strict		5265669	0		==			
ANR	5265788	Identifier	is_strict		5265669	0					
ANR	5265789	PtrMemberAccess	t -> is_strict		5265669	1					
ANR	5265790	Identifier	t		5265669	0					
ANR	5265791	Identifier	is_strict		5265669	1					
ANR	5265792	AndExpression	( is_alpha == t -> is_alpha ) && ( is_alnum == t -> is_alnum )		5265669	1		&&			
ANR	5265793	EqualityExpression	is_alpha == t -> is_alpha		5265669	0		==			
ANR	5265794	Identifier	is_alpha		5265669	0					
ANR	5265795	PtrMemberAccess	t -> is_alpha		5265669	1					
ANR	5265796	Identifier	t		5265669	0					
ANR	5265797	Identifier	is_alpha		5265669	1					
ANR	5265798	EqualityExpression	is_alnum == t -> is_alnum		5265669	1		==			
ANR	5265799	Identifier	is_alnum		5265669	0					
ANR	5265800	PtrMemberAccess	t -> is_alnum		5265669	1					
ANR	5265801	Identifier	t		5265669	0					
ANR	5265802	Identifier	is_alnum		5265669	1					
ANR	5265803	ExpressionStatement	"printf ( ""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"" , t -> s , TF ( t -> is_int ) , TF ( t -> is_real ) , TF ( t -> is_strict ) , TF ( t -> is_alpha ) , TF ( t -> is_alnum ) , TF ( is_int ) , TF ( is_real ) , TF ( is_strict ) , TF ( is_alpha ) , TF ( is_alnum ) , ok ? ""OK"" : ""FAILURE"" )"	160:2:3793:4065	5265669	6	True				
ANR	5265804	CallExpression	"printf ( ""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"" , t -> s , TF ( t -> is_int ) , TF ( t -> is_real ) , TF ( t -> is_strict ) , TF ( t -> is_alpha ) , TF ( t -> is_alnum ) , TF ( is_int ) , TF ( is_real ) , TF ( is_strict ) , TF ( is_alpha ) , TF ( is_alnum ) , ok ? ""OK"" : ""FAILURE"" )"		5265669	0					
ANR	5265805	Callee	printf		5265669	0					
ANR	5265806	Identifier	printf		5265669	0					
ANR	5265807	ArgumentList	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		5265669	1					
ANR	5265808	Argument	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		5265669	0					
ANR	5265809	PrimaryExpression	"""%10s: expect=%c:%c:%c:%c:%c result=%c:%c:%c:%c:%c [%s]\\n"""		5265669	0					
ANR	5265810	Argument	t -> s		5265669	1					
ANR	5265811	PtrMemberAccess	t -> s		5265669	0					
ANR	5265812	Identifier	t		5265669	0					
ANR	5265813	Identifier	s		5265669	1					
ANR	5265814	Argument	TF ( t -> is_int )		5265669	2					
ANR	5265815	CallExpression	TF ( t -> is_int )		5265669	0					
ANR	5265816	Callee	TF		5265669	0					
ANR	5265817	Identifier	TF		5265669	0					
ANR	5265818	ArgumentList	t -> is_int		5265669	1					
ANR	5265819	Argument	t -> is_int		5265669	0					
ANR	5265820	PtrMemberAccess	t -> is_int		5265669	0					
ANR	5265821	Identifier	t		5265669	0					
ANR	5265822	Identifier	is_int		5265669	1					
ANR	5265823	Argument	TF ( t -> is_real )		5265669	3					
ANR	5265824	CallExpression	TF ( t -> is_real )		5265669	0					
ANR	5265825	Callee	TF		5265669	0					
ANR	5265826	Identifier	TF		5265669	0					
ANR	5265827	ArgumentList	t -> is_real		5265669	1					
ANR	5265828	Argument	t -> is_real		5265669	0					
ANR	5265829	PtrMemberAccess	t -> is_real		5265669	0					
ANR	5265830	Identifier	t		5265669	0					
ANR	5265831	Identifier	is_real		5265669	1					
ANR	5265832	Argument	TF ( t -> is_strict )		5265669	4					
ANR	5265833	CallExpression	TF ( t -> is_strict )		5265669	0					
ANR	5265834	Callee	TF		5265669	0					
ANR	5265835	Identifier	TF		5265669	0					
ANR	5265836	ArgumentList	t -> is_strict		5265669	1					
ANR	5265837	Argument	t -> is_strict		5265669	0					
ANR	5265838	PtrMemberAccess	t -> is_strict		5265669	0					
ANR	5265839	Identifier	t		5265669	0					
ANR	5265840	Identifier	is_strict		5265669	1					
ANR	5265841	Argument	TF ( t -> is_alpha )		5265669	5					
ANR	5265842	CallExpression	TF ( t -> is_alpha )		5265669	0					
ANR	5265843	Callee	TF		5265669	0					
ANR	5265844	Identifier	TF		5265669	0					
ANR	5265845	ArgumentList	t -> is_alpha		5265669	1					
ANR	5265846	Argument	t -> is_alpha		5265669	0					
ANR	5265847	PtrMemberAccess	t -> is_alpha		5265669	0					
ANR	5265848	Identifier	t		5265669	0					
ANR	5265849	Identifier	is_alpha		5265669	1					
ANR	5265850	Argument	TF ( t -> is_alnum )		5265669	6					
ANR	5265851	CallExpression	TF ( t -> is_alnum )		5265669	0					
ANR	5265852	Callee	TF		5265669	0					
ANR	5265853	Identifier	TF		5265669	0					
ANR	5265854	ArgumentList	t -> is_alnum		5265669	1					
ANR	5265855	Argument	t -> is_alnum		5265669	0					
ANR	5265856	PtrMemberAccess	t -> is_alnum		5265669	0					
ANR	5265857	Identifier	t		5265669	0					
ANR	5265858	Identifier	is_alnum		5265669	1					
ANR	5265859	Argument	TF ( is_int )		5265669	7					
ANR	5265860	CallExpression	TF ( is_int )		5265669	0					
ANR	5265861	Callee	TF		5265669	0					
ANR	5265862	Identifier	TF		5265669	0					
ANR	5265863	ArgumentList	is_int		5265669	1					
ANR	5265864	Argument	is_int		5265669	0					
ANR	5265865	Identifier	is_int		5265669	0					
ANR	5265866	Argument	TF ( is_real )		5265669	8					
ANR	5265867	CallExpression	TF ( is_real )		5265669	0					
ANR	5265868	Callee	TF		5265669	0					
ANR	5265869	Identifier	TF		5265669	0					
ANR	5265870	ArgumentList	is_real		5265669	1					
ANR	5265871	Argument	is_real		5265669	0					
ANR	5265872	Identifier	is_real		5265669	0					
ANR	5265873	Argument	TF ( is_strict )		5265669	9					
ANR	5265874	CallExpression	TF ( is_strict )		5265669	0					
ANR	5265875	Callee	TF		5265669	0					
ANR	5265876	Identifier	TF		5265669	0					
ANR	5265877	ArgumentList	is_strict		5265669	1					
ANR	5265878	Argument	is_strict		5265669	0					
ANR	5265879	Identifier	is_strict		5265669	0					
ANR	5265880	Argument	TF ( is_alpha )		5265669	10					
ANR	5265881	CallExpression	TF ( is_alpha )		5265669	0					
ANR	5265882	Callee	TF		5265669	0					
ANR	5265883	Identifier	TF		5265669	0					
ANR	5265884	ArgumentList	is_alpha		5265669	1					
ANR	5265885	Argument	is_alpha		5265669	0					
ANR	5265886	Identifier	is_alpha		5265669	0					
ANR	5265887	Argument	TF ( is_alnum )		5265669	11					
ANR	5265888	CallExpression	TF ( is_alnum )		5265669	0					
ANR	5265889	Callee	TF		5265669	0					
ANR	5265890	Identifier	TF		5265669	0					
ANR	5265891	ArgumentList	is_alnum		5265669	1					
ANR	5265892	Argument	is_alnum		5265669	0					
ANR	5265893	Identifier	is_alnum		5265669	0					
ANR	5265894	Argument	"ok ? ""OK"" : ""FAILURE"""		5265669	12					
ANR	5265895	ConditionalExpression	"ok ? ""OK"" : ""FAILURE"""		5265669	0					
ANR	5265896	Condition	ok		5265669	0					
ANR	5265897	Identifier	ok		5265669	0					
ANR	5265898	PrimaryExpression	"""OK"""		5265669	1					
ANR	5265899	PrimaryExpression	"""FAILURE"""		5265669	2					
ANR	5265900	IfStatement	if ( ! ok )		5265669	7					
ANR	5265901	Condition	! ok	167:7:4074:4076	5265669	0	True				
ANR	5265902	UnaryOperationExpression	! ok		5265669	0					
ANR	5265903	UnaryOperator	!		5265669	0					
ANR	5265904	Identifier	ok		5265669	1					
ANR	5265905	CompoundStatement		25:13:767:767	5265669	1					
ANR	5265906	ExpressionStatement	failures ++	168:3:4085:4095	5265669	0	True				
ANR	5265907	PostIncDecOperationExpression	failures ++		5265669	0					
ANR	5265908	Identifier	failures		5265669	0					
ANR	5265909	IncDec	++		5265669	1					
ANR	5265910	ExpressionStatement	t ++	170:2:4103:4106	5265669	8	True				
ANR	5265911	PostIncDecOperationExpression	t ++		5265669	0					
ANR	5265912	Identifier	t		5265669	0					
ANR	5265913	IncDec	++		5265669	1					
ANR	5265914	Condition	t -> s	171:10:4118:4121	5265669	1	True				
ANR	5265915	PtrMemberAccess	t -> s		5265669	0					
ANR	5265916	Identifier	t		5265669	0					
ANR	5265917	Identifier	s		5265669	1					
ANR	5265918	IfStatement	if ( failures )		5265669	5					
ANR	5265919	Condition	failures	172:6:4132:4139	5265669	0	True				
ANR	5265920	Identifier	failures		5265669	0					
ANR	5265921	CompoundStatement		30:17:830:830	5265669	1					
ANR	5265922	ExpressionStatement	"printf ( ""%d tests failed\\n"" , failures )"	173:2:4147:4186	5265669	0	True				
ANR	5265923	CallExpression	"printf ( ""%d tests failed\\n"" , failures )"		5265669	0					
ANR	5265924	Callee	printf		5265669	0					
ANR	5265925	Identifier	printf		5265669	0					
ANR	5265926	ArgumentList	"""%d tests failed\\n"""		5265669	1					
ANR	5265927	Argument	"""%d tests failed\\n"""		5265669	0					
ANR	5265928	PrimaryExpression	"""%d tests failed\\n"""		5265669	0					
ANR	5265929	Argument	failures		5265669	1					
ANR	5265930	Identifier	failures		5265669	0					
ANR	5265931	ExpressionStatement	exit ( 0 )	174:2:4190:4199	5265669	1	True				
ANR	5265932	CallExpression	exit ( 0 )		5265669	0					
ANR	5265933	Callee	exit		5265669	0					
ANR	5265934	Identifier	exit		5265669	0					
ANR	5265935	ArgumentList	0		5265669	1					
ANR	5265936	Argument	0		5265669	0					
ANR	5265937	PrimaryExpression	0		5265669	0					
ANR	5265938	ExpressionStatement	"printf ( ""All tests passed\\n"" )"	176:1:4205:4235	5265669	6	True				
ANR	5265939	CallExpression	"printf ( ""All tests passed\\n"" )"		5265669	0					
ANR	5265940	Callee	printf		5265669	0					
ANR	5265941	Identifier	printf		5265669	0					
ANR	5265942	ArgumentList	"""All tests passed\\n"""		5265669	1					
ANR	5265943	Argument	"""All tests passed\\n"""		5265669	0					
ANR	5265944	PrimaryExpression	"""All tests passed\\n"""		5265669	0					
ANR	5265945	ReturnStatement	return 0 ;	177:1:4238:4246	5265669	7	True				
ANR	5265946	PrimaryExpression	0		5265669	0					
ANR	5265947	ReturnType	int		5265669	1					
ANR	5265948	Identifier	main		5265669	2					
ANR	5265949	ParameterList	"int argc , const char * argv [ ]"		5265669	3					
ANR	5265950	Parameter	int argc	142:10:3281:3288	5265669	0	True				
ANR	5265951	ParameterType	int		5265669	0					
ANR	5265952	Identifier	argc		5265669	1					
ANR	5265953	Parameter	const char * argv [ ]	142:20:3291:3308	5265669	1	True				
ANR	5265954	ParameterType	const char * [ ]		5265669	0					
ANR	5265955	Identifier	argv		5265669	1					
ANR	5265956	CFGEntryNode	ENTRY		5265669		True				
ANR	5265957	CFGExitNode	EXIT		5265669		True				
ANR	5265958	Symbol	argc		5265669						
ANR	5265959	Symbol	is_strict		5265669						
ANR	5265960	Symbol	t -> is_alpha		5265669						
ANR	5265961	Symbol	str_isalnum		5265669						
ANR	5265962	Symbol	t -> is_real		5265669						
ANR	5265963	Symbol	failures		5265669						
ANR	5265964	Symbol	t -> is_alnum		5265669						
ANR	5265965	Symbol	is_alpha		5265669						
ANR	5265966	Symbol	str_isalpha		5265669						
ANR	5265967	Symbol	is_real		5265669						
ANR	5265968	Symbol	is_alnum		5265669						
ANR	5265969	Symbol	t -> is_int		5265669						
ANR	5265970	Symbol	argv		5265669						
ANR	5265971	Symbol	str_isint		5265669						
ANR	5265972	Symbol	t -> is_strict		5265669						
ANR	5265973	Symbol	TF		5265669						
ANR	5265974	Symbol	tests		5265669						
ANR	5265975	Symbol	t		5265669						
ANR	5265976	Symbol	is_int		5265669						
ANR	5265977	Symbol	true		5265669						
ANR	5265978	Symbol	t -> s		5265669						
ANR	5265979	Symbol	str_isreal		5265669						
ANR	5265980	Symbol	ok		5265669						
ANR	5265981	Symbol	* t		5265669						
